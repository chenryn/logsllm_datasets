are easily found, such as the ﬁrst rule. Some rules are not
so obvious, such as the fourth and ﬁfth rules. Nmap de-
velopers usually provide users with those hardcoded and
apparent rules in the service library. By contrast, our rule
miner would generate rules without human effort. When
we add new instances into the transaction set, the rule
miner could automatically learn new rules over time.
(cid:4)(cid:393)(cid:393)(cid:367)(cid:349)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:1005)
(cid:4)(cid:393)(cid:393)(cid:367)(cid:349)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:1006)
(cid:258)(cid:3)
(cid:4)(cid:393)(cid:393)(cid:367)(cid:349)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:69)
(cid:39)(cid:286)(cid:410)(cid:894)(cid:396)(cid:437)(cid:367)(cid:286)(cid:400)(cid:895)
(cid:104)(cid:393)(cid:282)(cid:258)(cid:410)(cid:286)(cid:3)(cid:894)(cid:400)(cid:393)(cid:258)(cid:272)(cid:286)(cid:853)(cid:3)(cid:410)(cid:349)(cid:373)(cid:286)(cid:895)
(cid:90)(cid:437)(cid:367)(cid:286)(cid:3)(cid:62)(cid:349)(cid:271)(cid:396)(cid:258)(cid:396)(cid:455)
(cid:87)(cid:367)(cid:258)(cid:374)(cid:374)(cid:286)(cid:396)
(cid:90)(cid:437)(cid:367)(cid:286)(cid:3)(cid:68)(cid:349)(cid:374)(cid:286)(cid:396)
(cid:100)(cid:396)(cid:258)(cid:374)(cid:400)(cid:258)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:18)(cid:381)(cid:367)(cid:367)(cid:286)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)
3.5 Discussion
(cid:18)(cid:455)(cid:271)(cid:286)(cid:396)(cid:400)(cid:393)(cid:258)(cid:272)(cid:286)
The rule miner leverages NLP techniques and asso-
ciation algorithms to learn rules, which can help appli-
cations to discover and annotate IoT devices in the cy-
berspace. Here we discuss ARE’s limitations, includ-
ing fake response data, the middle equipment, original
equipment manufacturer (OEM), private binary proto-
cols, and the extensibility.
Fake Responses. A transaction is the association be-
tween the response data from IoT devices and relevant
webpages from the search engine. If the response data
is faked (e.g., a honeypot can simulate IoT devices),
the transaction set may contain erroneous information,
leading to inaccurate rules. Furthermore, attackers may
change the application data when they compromise a de-
vice.
In those two cases, the transaction set for learn-
ing device rules could be corrupted. Fortunately, the
amount of fake response data is small in comparison with
the large number of regular IoT devices. Attackers may
also have to cancel their malicious activities and do not
change the application data, because such intrusive be-
haviors can be easily detected by administrators.
Middleboxes.
Many IoT devices are behind
the middleboxes such as ﬁrewalls/NAT in residen-
tial/enterprise/local networks and may not be accessible
to the outside world. For instance, universal plug and
play (UPnP) may attach multiple devices to a computer
for connecting to a network. In such cases, rules can-
not help to ﬁnd those IoT devices behind middleboxes.
However, if applications have the permission to search
the local networks, the transactions can be re-collected
inside the local networks and the rule miner can learn
new rules. Our prototype system can be seamlessly de-
ployed in large residential/enterprise/local networks that
manage a ﬂeet of IoT devices within their networks to
collect transactions (see Section 4). That is, ARE could
be also used for internal scans.
OEM. OEM is that one manufacturer produces parts
of a device for another manufacturer, leading to the mix-
ture of parts from the original and other vendors. Some
manufacturers may resell subsystems to assemble de-
vices for different manufacturers, which causes ambigu-
ity. In this case, neither ﬁngerprinting nor banner grab-
Figure 4: ARE architecture for learning device rules.
bing techniques can resolve the OEM problem. ARE of-
fers a best-effort service to generate rules of IoT devices.
Private Binary Protocol. ARE leverages the fact
that many application protocols include device informa-
tion. If application protocols are private and binary, their
packets cannot be tokenized into the text for generat-
ing query search keywords. However, some vendors use
proprietary binary protocols for business considerations.
Nowadays, there is no tool able to analyze proprietary
protocols for IoT devices. ARE cannot provide rules for
those IoT devices either.
Extensibility. ARE is used to generate rules for the
application response packets, not limited to IoT devices.
For instance, online services may provide the applica-
tion responses for their requests. If the response packets
include the information of services, ARE can generate
rules for those services.
4 ARE: Design and Implementation
In this section, we present the design and implementation
of ARE for automatically discovering IoT devices. ARE
consists of four components: transaction collection, rule
miner, rule library, and planner. The transaction collec-
tion module has the capability of gathering transactions
in a variety of networks. The rule miner module is the
core of ARE for learning IoT device rules. The rule li-
brary and planner modules provide interactive interfaces
to applications for discovering and annotating IoT de-
vices in the cyberspace. Below, we ﬁrst illustrate how
ARE works and then detail the system design and imple-
mentation of ARE.
4.1 ARE Architecture
Figure 4 shows a high-level architecture of ARE. It
works as the middleware, and the function of each com-
USENIX Association
27th USENIX Security Symposium    333
ponent is brieﬂy described as follows. (1) Transaction
Collection. According to the transaction deﬁnition 1, the
collection module gathers data in a network for the rule
miner. This module works in two steps. The ﬁrst step is
to collect response data in the network and ﬁlter out the
response data from non-IoT devices. The second step
uses the web crawler to obtain the description webpages
of IoT devices, and then removes redundant content from
the webpages. (2) Rule Miner. ARE leverages the rule
miner to automate the rule generation process from the
transaction set without human effort. Furthermore, this
module can dynamically learn rules, e.g., when manu-
(3) Rule
facturers release new IoT device products.
Library. The rule library is a standard ﬁle, which stores
each rule in the format {A ⇒ B} with a timestamp. A
denotes keywords in the response data, and B is the de-
vice annotation (t,v, p). Applications interact with ARE
through the API Get(rules), and the rule library returns
the latest rules to users. (4) Planner. The planner mod-
ule updates the rule library in ARE for applications. The
API Update(network, time) notiﬁes the planner module
to generate new rules in the current network and gather
data from this space, and the outdated rules would be re-
moved.
4.2 Transaction Collection
We present the overview of the transaction collection
in Figure 5. The response data collection (RDC) is used
to gather the application-layer data in a network and
then ﬁlter out the response data from non-IoT devices.
The web crawler extracts the search queries from the re-
sponse data and inputs them to the search engine. The
search engine returns the result lists of webpages, and the
web crawler crawls the HTML ﬁles in these webpages.
Response Data Collection. We can directly use pub-
lic data sets about application service responses (such
as HTTP, FTP, TELNET, and RTSP) from Censys [25].
After getting the raw response data, we should remove
some erroneous responses. For HTTP response data, we
remove some error responses in terms of IETF status
codes, such as responses with statute codes (5XX) and
redirection codes (3XX). For FTP response data, we re-
move some response packets that include some keywords
like (“ﬁlezilla, serve-u”), because they are common soft-
ware running on a computer. For Telnet response data,
we would remove a character sequence with the partic-
ular code (IAC 0xFF), which is used for negotiating the
communication between different operating systems.
After the pre-screening above, the response data con-
taining short and simple packets (such as TELNET, FTP
and RTSP response data) has been completely cleaned
up. However, the HTTP response data may still con-
(cid:90)(cid:286)(cid:400)(cid:393)(cid:381)(cid:374)(cid:400)(cid:286)
(cid:3)(cid:87)(cid:258)(cid:272)(cid:364)(cid:286)(cid:410)(cid:3)(cid:87)(cid:258)(cid:396)(cid:410)(cid:349)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:3)
(cid:894)(cid:90)(cid:87)(cid:87)(cid:895)
(cid:400)(cid:286)(cid:258)(cid:396)(cid:272)(cid:346)(cid:3)
(cid:395)(cid:437)(cid:286)(cid:396)(cid:455)
(cid:94)(cid:286)(cid:258)(cid:396)(cid:272)(cid:346)(cid:3)(cid:28)(cid:374)(cid:336)(cid:349)(cid:374)(cid:286)
(cid:104)(cid:90)(cid:62)(cid:3)(cid:62)(cid:349)(cid:400)(cid:410)
(cid:44)(cid:100)(cid:68)(cid:62)(cid:3)(cid:1092)(cid:876)(cid:1093)
(cid:38)(cid:349)(cid:367)(cid:286)(cid:400)
(cid:18)(cid:455)(cid:271)(cid:286)(cid:396)(cid:3)(cid:87)(cid:396)(cid:381)(cid:271)(cid:286)(cid:894)(cid:18)(cid:87)(cid:895)
(cid:116)(cid:286)(cid:271)(cid:3)(cid:18)(cid:396)(cid:258)(cid:449)(cid:367)(cid:286)(cid:396)(cid:3)(cid:894)(cid:116)(cid:18)(cid:895)
Figure 5: The overview of the transaction collection.
tain many non-IoT packets. For example, the packets
from some commercial websites selling camera devices
include device-relevant textual content. So, we need to
further ﬁlter out the HTTP response data from non-IoT
devices. We observe that consumer-oriented IoT de-
vices have limited computing and memory capacities,
usually deploying at homes, ofﬁces, facilities and else-
where. Thus, we ﬁnd that IoT devices have the follow-
ing features in their HTTP response data, which can be
leveraged for effective IoT device identiﬁcation.
• Generally, IoT devices use a lightweight web server
(e.g., boa and lighthttp) rather than a heavyweight
web server (e.g., Apache, IIS, and Ngnix).
• The webpage of IoT devices is simple, such as a lo-
gin or conﬁguration page. Compared with a regular
webpage, the number of terms (scripts, words, pic-
tures) in the webpage of IoT devices is very small.
• The webpage of IoT devices usually does not have
the external links to other websites, and if it does,
the number of links is also small.
Using these observations, we can ﬁlter the non-IoT de-
vices and the rest of the response data is added into the
candidate IoT devices.
Web Crawler. The web crawler ﬁrst extracts the se-
quence of search queries from the response data. There is
much redundant textual information unrelated to manu-
facturers. We ﬁrst remove hyperlinks, ﬁeld names, time,
script block, and symbols (such as  and ).
Then, we remove dictionary words in the response data.
The reason is that the names of vendors and product
models are usually non-dictionary words. Note that if
the dictionary word is also in our brand and device type
list, we will keep it. Dictionary words have little rela-
tion to device manufacturers. After that, we use the term
frequency-inverse document frequency (TF-IDF) to mea-
sure the concentration degree of a word in the response
data. If the TF-IDF score is higher, we think the term is
more relevant to the description webpage.
A practical problem here is the restrictions on the
amount of API accessing in today’s search engines. For
instance, Google provides 100 queries per day for free
users and has a limitation of 10,000 queries per day. To
address this issue, the web crawler simulates the browser
334    27th USENIX Security Symposium
USENIX Association
behavior and sends individual browser instances to the
search engine. Every time it is accessed, the web crawler
module uses a different user-agents and sleeps for a ran-
dom time after multiple requests. If one access instance
fails, we will perform the retransmission operation at the
end of the search query queue. The search engine will
return a URL list for every search query. Based on these
lists, we can reduce the scale of web crawling. Each
item in the URL list returned by browser instances is a
complete HTML page. There is much redundant con-
tent in these webpages, such as advertisements, pictures,
audios, videos, and dynamical scripts. For each web-
page, the web crawler removes the irrelevant information
and only keeps the textual content, including title, URL,
and snippet. Fortunately, the indexing algorithms in to-
day’s search engines have already found the most rele-
vant websites for the search query. In our experiment,
the top 10 webpages work well in practice for locating
relevant information on IoT devices.
In the implementation, we write a custom Python
script to pipeline from the response data into webpage
crawling. The web crawler uses the enchant library [17]
to remove dictionary words and the NLP toolkit [7] to
calculate the TF-IDF values. The web crawler uses the
python urllib2 library to simulate and automatically visit
the search engines. The Beautiful Soup [4] library is used
to extract the content from the webpage.
4.3
Implementation of Rule Miner
The rule miner automatically learns rules of IoT devices
from the transaction set. We use Python scripts to im-
plement DER, which is the core of rule miner. The NLP
toolkit [7] is used to process the text content, including
word splitting, stemming and removing stop words. We
also use apriori algorithm [3] in Python Package to gen-
erate rules for IoT devices.
In practice, the rule miner has to handle the scenar-
ios where the response data does not include sufﬁcient
device information to initiate the subsequent web crawl-
ing process for rule generation. For example, from the
FTP response packet “220 Printer FTP 4.8.7 ready at Jan
19 19:38:22,” we can only extract one useful keyword
“Printer” as a search query. With only one search query
being extracted, no local dependency can be exploited
to achieve accurate and ﬁne-grained device annotation.
Thus, there is no need to initiate the web crawling pro-
cess and no rule is created. However, we can still use the
DER module to extract one label in the response data,
achieving a coarse-grained device annotation. There are
two categories for such one-entity annotations, including
(device type, null, null) and (null, vendor, null). Note that
none of the existing tools (Nmap and Ztag) can address
this problem caused by the lack of information in the re-
sponse data.
4.4 Applications on ARE
We explicate how applications work with ARE. As
shown in Figure 4, an application interacts with ARE
by calling APIs (Get() and Update()). If the rule library
meets its requirements, the application directly uses rules
for discovering IoT devices. Otherwise, the RDC mod-
ule would gather the application layer data in the network
based on the parameters of Update(). The rule miner
module would generate rules according to the recently
collected data. In the implementation of the rule library
and planner, ARE provides the REST APIs to applica-
tions, including GET and POST operations. RESTful
GET is used to retrieve the representation of rules from
ARE, and POST is used to update the rule library. The
rule library stores rules in the text ﬁles.
In the design of ARE, we aim to provide rules for ap-
plications for discovering IoT devices while minimizing
the requirements of manual effort and training data. To
demonstrate the effectiveness of ARE, we develop three
ARE-based applications.
Internet-wide Measurement for IoT Devices. Like
prior Internet-wide measurements [21,26,31,33,35], we
build the measurement application using the rules from
ARE to collect, analyze, and characterize the deployment
of these IoT devices across the real world.
Detecting Compromised IoT Devices. Like [21, 29],
we build several honeypots to capture malicious behav-
iors in the cyberspace. After capturing their malicious
trafﬁc, we track their IP addresses and use the ARE rules
to identify whether it is an IoT device. If so, we extract its
device type, vendor, and product information, and then
we analyze its malicious behaviors.
Detecting Vulnerable IoT Devices.
Like [23, 24],
we build a vulnerability analysis application through the
dataset from the National Vulnerability Database [12]. If
a CVE item occurs in IoT devices, we extract the rules
of those devices from ARE and use the rules to discover
vulnerable online devices with a high probability.
5 Evaluation
In this section, we ﬁrst elaborate on the system setting
for ARE experiments. Then, we show the experimen-
tal results for ARE evaluation, which include that (1) the
number of rules generated by ARE is nearly 20 times
larger than those of the existing tools, (2) our rules can
achieve very high precision and coverage, and (3) the
time cost introduced by ARE is low.
USENIX Association
27th USENIX Security Symposium    335
Fig. 6: Time cost comparison for
generating the rules.
Fig. 7: Comparison with Nmap.
Fig. 8: Dynamic rule learning for
ARE.
5.1 Setting
In the transaction collection, the RDC module only
searches public IPv4 addresses for collecting response
data of four application protocols (HTTP, FTP, RTSP,
and TELNET). Most IoT devices usually have a built-in
Web, FTP, Real-time Media, or TELNET user interfaces.
ARE can be expanded supporting more application pro-
tocols without much modiﬁcation.
So far, ARE can-
not learn device rules if a device only appears behind the
home/private networks. However, ARE can be deployed
into local networks behind a ﬁrewall for internal IoT de-
vice discovery without any modiﬁcation.
We use two datasets for evaluating ARE performance.
In the ﬁrst dataset, we randomly choose 350 IoT de-
vices from the Internet. The selection process uses
the Mersenne Twister algorithm in Python’s random
package. We manually label those IoT devices, and
the ground truth labels include 4 different device types
(NVR, NVS, router, and ipcamera) 64 different vendors,
and 314 different products. The labeling process is done
by analyzing their application layer responses, searching