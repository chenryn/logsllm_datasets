### 优化后的文本

#### 图 13: 安全PageRank算法的相对精度
- **输入长度**: 2048条记录
- **比较对象**: 在明文执行中使用定点和浮点数实现的安全PageRank算法。
- **迭代次数**: 10, 20, 30, 40, 50
- **误差**:
  - 使用至少24位的小数部分（定点）或精度（浮点）时，误差相对较小。
  - 例如，在固定点表示中使用24位小数部分运行10次PageRank迭代，误差为\(10^{-5}\)。
  - 随着迭代次数增加，精度误差会累积，从而导致误差增大。

### 表 III: 大规模实验中使用的机器总结
- **数据集**: MovieLens 1M评分数据集
- **矩阵分解**: 用户和电影特征向量，每个向量维度为10
- **实数表示**: 40位定点数，其中20位用于小数部分
- **实验设备**:
  - **处理器总数**: 128
  - **内存总大小**: 524.7 GB
  - **评分总数**: 1M
  - **机器类型**:
    - Garbler: 机器1, 3, 5, 7
    - Evaluator: 机器2, 4, 6, 8
  - **每台机器的具体配置**:
    | 机器编号 | 处理器数量 | 类型 | JVM 内存大小 | 评分数量 |
    | --- | --- | --- | --- | --- |
    | 1 | 16 | Garbler | 64 GB | 256K |
    | 2 | 16 | Evaluator | 60.8 GB | 256K |
    | 3 | 6 | Garbler | 24 GB | 96K |
    | 4 | 6 | Evaluator | 24 GB | 96K |
    | 5 | 15 | Garbler | 58.5 GB | 240K |
    | 6 | 15 | Evaluator | 58.5 GB | 240K |
    | 7 | 27 | Garbler | 113.4 GB | 432K |
    | 8 | 27 | Evaluator | 121.5 GB | 432K |

### F. 大规模运行
- **实验设置**: 使用梯度下降法对包含1百万评分的真实世界MovieLens数据集进行矩阵分解。
- **性能**:
  - 单次梯度下降迭代大约需要13小时，使用7台机器（128个处理器），数据大小约为104 MB。
  - 收敛通常需要约20次迭代，这将花费约11天时间。
  - 通过切换到具有硬件AES-NI支持的JustGarble-like后端实现，并假设每对garbler-evaluator之间的带宽为2700 Mbps，可以立即获得约20倍的速度提升。
  - 增加更多处理器也可以加速执行。

### G. 与简单并行化方法的比较
- **对比方法**: 简单电路级并行化（无需开发者编写并行代码）
- **评估指标**: 电路深度（越浅越好）
- **结果**:
  - GraphSC生成的电路比使用最新SCVM编译器生成的电路更浅且更“宽”。
  - 表 IV 显示了两种技术生成的电路深度。
  - GraphSC生成的电路更适合并行化。

### H. 性能分析
- **微基准测试**: 分析应用程序在不同计算和网络传输部分的时间消耗。
- **图 14 和 图 15**:
  - 展示了PageRank和梯度下降在不同操作上的时间分布。
  - garbler主要集中在计算上，而evaluator则主要在网络I/O上。

通过这些优化，文本变得更加清晰、连贯和专业。希望这对你有帮助！