2.2 JavaScript优雅吗
这很难说，我使用过几种语言，写过许多不同范式的等价代码。因此，我很清楚JavaScript并非那么极致的优雅。然而，它是一种非常灵活的语言，拥有一颗相当优雅的内核，并且能够让你使用面向对象和函数式编程的混合方式。
JavaScript引擎之间的语言兼容性往往会是一个问题，但如今不再是了，这一定程度上要感谢test262套件（https://github.com/tc39/test262），它可以用于检查引擎是否遵循ECMAScript规范。相反，浏览器和DOM的差异仍然是一个挑战。这也是为什么我们通常会借助于框架来隐藏这些差异的原因。
2.3 JavaScript有用吗
如果它不能让你写出你想要的程序，那么哪怕它是世界上最漂亮的程序语言都没有任何用处。
2.3.1 图形用户界面
在图形用户界面方面，JavaScript受益于它已成为HTML5的一部分。在本节中，我用HTML5这个术语来表示“跨浏览器平台”（HTML、CSS，以及浏览器JavaScript API）。HTML5现被广泛部署并且仍在不断地进步，它正逐渐变成完善的一层，能够写出功能完备的、跨浏览器的应用；类似于Java平台，它就像是一个嵌入式的操作系统。HTML5的一个卖点是允许你编写跨平台的图形用户界面。当然，这总会有一些妥协：通过放弃一定的质量要求换取不仅限于单一的操作系统。在过去，“跨平台”意味着Windows、Mac OS，或者Linux。但是现在我们又有了两个交互平台：Web以及mobile。通过HTML5，你可以通过使用诸如PhoneGap、Chrome Apps（http://developer.chrome.com/apps/）、以及TideSDK（http://www.tidesdk.org/）等这些技术去触及所有的平台。
另外，有些平台拥有和原生应用一样的Web应用，或者可以让你将它们安装到本地，例如Chrome OS、Firefox OS以及Android。
2.3.2 其他技术补充完善JavaScript
有更多不是HTML5的技术对JavaScript进行着有效的补充，使得该语言变得更为实用：
（1）类库
JavaScript有大量的类库，从解析JavaScript（通过Esprima（http://esprima.org）到处理和显示PDF文件（通过PDF.js（https://github.com/mozilla/pdf.js）等，足以让你完成任务。
（2）Node.js（http://nodejs.org）
Node.js平台允许你编写服务端代码以及Shell脚本（如构建工具、测试执行等）。
（3）JSON (JavaScript对象表示法, 参见第22章
JSON是一种基于JavaScript的数据格式，已经成为网络上流行的数据交换格式（如Web服务的结果）。
（4）NoSQL数据库 (诸如CouchDB［http://couchdb.apache.org］以及MongoDB ［http://www.mongodb.org］）
这些数据库和JSON以及JavaScript紧密相连。
2.4 JavaScript有什么好用的工具吗
JavaScript正在具备越来越好的构建工具（如Grunt［http://gruntjs.com］）和测试工具（如mocha［http://visionmedia.github.io/mocha/］）。Node.js使得我们可以通过Shell（不仅仅是通过浏览器）来运行这些工具。这一领域存在一个风险就是碎片化，现在正日渐出现太多类似的工具。
JavaScript IDE的空间仍处于较为初级的阶段，但是发展迅速。Web开发的复杂性和活力为它带来创新的沃土。两个开源的例子是Brackets（http://brackets.io）和Light Table（http://www. lighttable.com）。
此外，浏览器也越来越具备开发的环境。如Chrome，尤其是在最近取得了令人印象深刻的进步。看着许多IDE和浏览器未来将整合在一起，这将非常有趣。
2.5 JavaScript是否足够快
JavaScript引擎已经取得了极大的进步，旧的编译器进化成了实时的编译器。绝大多数的应用程序现在已经运行得足够快了。况且，新的想法也正在开发中，它们都为了让未来应用里的JavaScript程序可以执行得足够快：
asm.js（http://asmjs.org/）是一个JavaScript（非常稳定）的子集，它在当前的引擎上跑得很快，具备C++编译过的程序的70%的性能。例如，它可以用于实现Web应用程序中性能至上的算法部分，也可以用于将基于C++的游戏移植到Web平台。
ParallelJS（http://www.2ality.com/2013/12/paralleljs.html）使用和JavaScript截然不同的代码，使用新的数组方法mapPar, filterPar, 以及reducePar（JavaScript对于已经存在的数组平行版本方法是map，filter，以及reduce）。为了使其并行工作，回调函数必须写成指定的格式；主要的限制是你不能够改变那些回调中创建的数据。
2.6 JavaScript是广泛使用的吗
一门被广泛使用的语言通常有两个好处。首先，这门语言有更好的文档和支持。其次，越来越多的程序员了解它，这点非常重要，不论你是想要雇用别人还是销售基于这门语言的工具。
JavaScript被广泛使用，且获得了以下两个好处。
JavaScript相关的文档和各式各样的支持：书籍、播客、博客、电子邮件时事通信、论坛等。第33章的是你重要的资源。
JavaScript开发人员需求量很大，尽管他们的排名也不断在增加。
2.7 JavaScript有前途吗
有几件事表明JavaScript有一个光明的未来。
语言是稳步发展的；ECMAScript 6看起来不错。
有许多JavaScript相关的创新（例如，上述提到的asm.js和ParallelJS，微软出品的TypeScript等）。
JavaScript的网络平台是一个必需的组成部分，正在迅速成熟。
JavaScript是被联盟广泛支持的，而不是被单独的人或者公司控制。
2.8 结论
综上所述，JavaScript做得非常好。当然它不是完美的，但是此时此刻，它很难被击败，并且会做得更好。
第3章 JavaScript的性质
JavaScript的本质可以概括如下。
（1）它是动态的
许多东西可以被改变。例如，你可以在对象被创建之后自由地添加或者删除对象的属性（字段）。你可以直接创建对象，而无须先创建一个对象工厂（例如，一个类）。
（2）它是动态类型
变量和属性值可以保存任意类型。
（3）它是函数式和面向对象的
JavaScript编程语言支持两种范式：函数式编程（一类函数、闭包、部分程序通过bind()、数组对象内建map()以及reduce()等）以及面向对象编程（可变状态、对象、继承等）。
（4）它静默失败
JavaScript直到ECMAScript 3之前都没有异常处理。这就解释了为什么语言经常静默失败并自动转换argument和操作符：它最初不抛出异常。
（5）它部署的是开源代码
JavaScript总是以JavaScript引擎编译并且以开源发布。源代码的好处是灵活的交付格式和抽象不同引擎之间的差异。有两种技术来保证文件足够小：压缩（主要是gzip）和精简（通过重命名变量、删除注释等操作使得源代码更加小巧；参考第32章的细节）。
（6）它是网络平台的一部分
JavaScript是一个如此重要的网络平台（HTML5 API，DOM等）以致于人们很容易遗忘，即使没有后者前者也可以正常使用。然而，JavaScript更多地用于非浏览器的设置（诸如 Node.js），这些变得越来越明显。
3.1 古怪和非官方特性
一方面，JavaScript有一些古怪和缺失的特效（举例来说，它没有块级作用域的变量，没有内建模块，没有对子类化的支持）。所以，当你学习其他语言的特性，你同样学习了JavaScript的模式和解决方案。另一方面，JavaScript包含了非官方的特效（诸如原型继承和对象属性）。这些同样是需要被学习的，但仅作为特性而非bug。
注意，JavaScript引擎已经变得越来越聪明以及修复了许多古怪的问题，例如。
明确地说，JavaScript没有整数，只有浮点数。在内部，大多数引擎实现尽可能用整数。
可以说，JavaScript中的数组太灵活了：它们不是被索引的元素序列，但是可以使用数字来映射到这些元素。这些映射可以有空缺：数组“内部”没有关联的数值的索引。并且，引擎帮助使用优化如果数组不存在空缺。
3.2 优雅部分
但是JavaScript同样有许多优雅的部分。Brendan Eich’s最喜欢的有：[1]
一类函数；
闭包；
原型；
对象直接量；
数组直接量。
最后两个项目，对象直接量和数组直接量，让你从对象开始，然后介绍抽象（诸如构造器，JavaScript类）。同时也支持JSON（参考第22章）。
注意，优雅部分帮助你解决怪癖。诸如，它们允许你实现块级作用域、模块，以及继承语言的全部API。
3.3 影响
JavaScript受到了一些编程语言的影响（如图3.1所示）：
Java是JavaScript语法的参考模型。它同时影响JavaScript将值分为原始类型和对象类型，以及日期构造函数（java.util.Date的移植）。
AWK给了JavaScript函数的灵感。实际上关键字function来自AWK。
由于Scheme，JavaScript拥有第一类函数（函数被作为数值来对待并且可以像函数的参数一样被传递）和闭包（参考第16章）。
JavaScript向Self借鉴了与众不同的面向对象风格；Self支持对象之间的原型继承。
Perl和Python影响了JavaScript对字符串、数组和正则表达式的处理方式。
除实际语法外，HyperTalk启发了JavaScript如何集成到浏览器。这使得HTML标签拥有事件处理属性，比如onclick。
图3.1 影响JavaScript的编程语言
[1]  Brendan Eich，“JavaScript的简史”，2010年7月21日, http://bit.ly/1lKkI0M.。
第4章 JavaScript是如何创造出来的
了解为什么要创造JavaScript及JavaScript是如何被创造出来的，会帮助我们理解为什么它的现状是这样的。
在1993年，NCSA（国家计算机安全协会）的Mosaic是最早广泛发行的浏览器。在1994年，网景成立，它致力于挖掘还处于幼稚时期的互联网的潜力。网景创造了一个专门的浏览器Netscape Navigator，它主导了整个90年代的市场。许多Mosaic最初的作者都跳槽去做Navigator的开发工作，但是这两者之间没有共享任何代码。
网景很快就意识到Web需要变得更加动感。那时候即使你只是想检查用户在表单中输入的值是否正确，都需要将数据发送到服务器才能得到反馈。1995年网景聘请Brendan Eich，承诺让他在浏览器中实现Scheme（一个Lisp的语言分支）[1]。在他开始之前，网景与软硬件公司Sun（后被Oracle收购）展开合作，将它的静态编程语言Java植入到Navigator中。因此，在网景有一个问题讨论得很激烈：为什么Web中需要有两种编程语言——Java和一个脚本语言。脚本语言的支持者们提到了如下的解释[2]：
我们的目标是给设计师和那些将图片、插件和Java小应用等组件生成Web内容的兼职程序员提供一种“胶水”语言。我们将Java作为一种被高薪程序员使用的“组件语言”，而“胶水程序员”——Web页面设计者可以通过一种脚本语言来封装组件和自动化交互。
当时网景公司的管理者决定创造一个类似Java语法的脚本语言。这样就排除了现有的脚本语言，比如Perl、Python、TCL和Scheme。为了保护JavaScript的思想免受竞争提案的影响，网景需要一个原型。在1995年5月，Eich在10天内就写出了第一个版本。JavaScript的第一个代号是Mocha，Marc Andreesen起的这个名字。由于商标问题以及很多产品已经使用了Live前缀，网景市场部将它改名为LiveScript。在1995年11月底，Navigator 2.0B3发行，其中包含了该语言的原型，这个版本相比之前没有什么大的变化。在1995年12月初，Java语言发展壮大，Sun把Java的商标授权给了网景。这种语言被再次改名，变成了它最终的名字——JavaScript[3]。
[1] 摘自Brendan Eich在2008年4月3日发表的“Popularity”一文，http://bit.ly/1lKl6fG。
[2] 摘自NaomiHamilton在2008年6月30日发表在计算机世界的“The A–Z of Programming Languages: JavaScript”一文，http://bit.ly/1lKldIe。
[3] 摘自Paul Krill在2008年6月23日发表在InfoWorld上的“Java ScriptCreatorPondersPast, Future”一文，http://bit.ly/1lKlpXO以及Brendan Eich在2010年7月21日发表的“A Brief History of JavaScript”一文，http://bit.ly/1lKkI0M。
第5章 标准化：ECMAScript
在JavaScript之后，微软在Internet Explorer 3.0（1996年8月）推出了一个不同名字的类似语言JScript。部分出于遏制微软的考量，网景决定规范JavaScript，并且由标准化组织Ecma International（http://en.wikipedia.org/wiki/Ecma）去主持其标准化。1996年11月开始实施一个叫ECMA-262的规范。因为Sun已经注册了Java的商标，标准化语言的官方名称不能是JavaScript，因此最终选中了源自JavaScript和Ecma的ECMAScript。然而这个名字只是用来指语言版本（指规范），大家仍然称这个语言为Javascript。
ECMA-262由ECMA技术委员会39（http://bit.ly/1oNTQiP）（TC39）来管理与发展。其成员公司，如微软、Mozilla、Google，指定雇员参与组委会工作，比如Brendan Eich、Allen WirfsBrock（ECMA-262的编辑）、David Herman。为了推进ECMAScript的设计，TC39会主持一个公开的讨论频道（比如邮件列表），并且举行定期会议。TC39成员和特邀嘉宾会出席会议。在2013年年初，参会者人数在15～25之间。
下面列出的是ECMAScript的各个版本（或者说ECMA-262标准的各个版本）和其主要功能。
（1）ECMAScript 1（1997年1月）
第一个版本。
（2）ECMAScript 2（1998年8月）
编辑修改ECMA262标准，使其符合ISO/IEC 16262。
（3）ECMAScript 3（1999年12月）
do-while、正则表达式、字符串新方法（针对正则表达式的concat， match， replace， slice， split方法等）、错误处理等。
（4）ECMAScript 4（2008年7月废弃）
ECMAScript 4曾被作为下一个版本的JavaScript来开发，它基于ML写的原型。然而TC39没有接受它的特性列表。为了防止僵局，组委会在2008年7月底达成协议，得出如下四点总结（http://mzl.la/ 1oNTUiG）：
① 开发一个ECMAScript 3的增量更新版本（后来变成ECMAScript 5）。
② 开发改动比ECMAScript 4少的新版本，但是要多于ECMAScript 3的改动量。新版本代号Harmony，基于此次会议的本质。Harmony被分化为ECMAScript 6和ECMAScript 7。
③ ECMAScript 4的特性将会丢弃，包括包、命名空间、前期绑定。
④ 其他的想法需要在所有TC39成员的共识下进行开发。
因此，ECMAScript 4的开发者们商定Harmony不要像ECMAScript 4那么激进，其余TC39成员则同意继续推动事情前进。
（5）ECMAScript 5（2009年12月）
增加严格模式、getters和setters、新的数组方法、内建支持JSON等（参见第25章）。
（6）ECMAScript 5.1（2011年6月）
编辑修改ECMA262标准，使其符合ISO/IEC 16262:2011第三版。
（7）ECMAScript 6
目前正在开发中，预计在2014年年底被批准发布。在批准时，大多数引擎可能会支持大部分的重要ECMAScript 6特性。完整支持可能需要更多的时间。
达成共识并且创建一个标准并不容易，但是由于上述各方的共同努力，JavaScript最终成为一个真正的开放语言，由多个商贩实现，并且互相兼容。一个非常详细具体的规范才让兼容成为可能。比如规范中经常使用伪代码，并且还提供了一个测试套件test262（http://test262.ecmascript.org/）用来检查是否符合ECMAScript规范。有趣的是，需要注意ECMAScript不是由万维网组织（W3C）来管理的。TC39和W3C在ECMAScript和HTML5的重叠部分进行合作。
第6章 JavaScript的历史里程碑
JavaScript花了很长时间才有点影响。很多JavaScript相关技术只会存在一段时间直到它们被主流接受。本章介绍了JavaScript从诞生至今发生的事。自始至终，只有最流行的项目会被介绍到，而许多项目被忽略了，即使它们是最早的JavaScript技术。例如，Dojo Tookit会被提到，但是同时期出现的qooxdoo（http://qooxdoo.org/）却较少有人知道。同理Node.JS被提到，但是之前早已出现的Jaxer却没有。
（1）1997年——动态HTML（http://bit.ly/1oNVOzH）
动态HTML允许动态改变网页的内容和外观。通过操纵文档对象模型（DOM）来实现，DOM是一个树状结构。通过它可以改变内容、改变样式、显示和隐藏元素。动态HTML首次出现于Internet Explorer 4和网景Navigator 4。
（2）1999年——XMLHttpRequest（http://www.w3.org/TR/XMLHttpRequast/）
这个API可以让用户端脚本发送一个HTTP或HTTPS请求到服务端并且拿到返回数据，通常返回数据是一个文本格式（XML、HTML、JSON）。它是从Internet Explorer 5开始被引进的。
（3）2001年——JSON（http://json.org/），基于JavaScript的数据交换格式
2001年Douglas Crockford命名并编写了JSON（JavaScript Object Notation），其主要思想是以JavaScript的语法存储数据到文本格式。JSON使用JavaScript的对象字面量、数组、字符串、数字、布尔值来表示结构化数据。例如：
多年以后，JSON已经成为XML的轻量级替代方案，尤其是结构化的数据只是用来呈现结构而不是真正要标记的数据时。当然，JSON在JavaScript中很容易使用（参考第22章）。
（4）2004年——Dojo Toolkit（http://dojotoolkit.org/），一个大型JavaScript编程框架
Dojo Toolkit在构建大型应用时提供了所必需的基础设施：继承库、模块系统、桌面风格图形界面组件API等。
（5）2005年——Ajax（http://bit.ly/1oNW3Lf），基于浏览器的桌面类应用
Ajax是一些技术的集合，它给Web页面带来交互性的提升，可以与桌面应用相匹敌。在2005年2月发布了一个通过Ajax实现的令人印象深刻的示例：Google地图。这个应用允许你在一张世界地图上平移和缩放，但只有当前视图里的内容被下载到浏览器。Google地图推出后，Jesse James Garrett发现它与其他一些交互性网站有某些共同的特性。他把这些特性称为Ajax，Asynchronous JavaScript and XML的缩写[1]。Ajax载入时的两大基石包括：在背后异步加载内容（通过XMLHttpRequest），以及动态更新当前网页（通过动态HTML）。相比之前每次都要刷新页面，这是一个相当大的易用性改善。
Ajax是对JavaScript和动态Web应用主流的突破。有趣的是这花了很长时间，目前Ajax已经被使用很多年了。Ajax问世以来，很多其他数据格式被使用（JSON替代XML），很多其他协议被使用（例如，添加到HTML上的Web Sockets），并且双向通信成为可能。但是基础技术都是相同的。然而，现在很少使用Ajax这个术语，不久就已经被更广泛的术语HTML5和Web平台（意思是，JavaScript加浏览器API）替代。
（6）2005年——Apache CouchDB（http://couchdb.apache.org/），一个以JavaScript为中心的数据库
大致上，CouchDB是一个JSON数据库。你可以给它JSON对象，并且不用事先定义结构。此外，你还可以通过使用JavaScript函数执行map/reduce操作来定义视图和索引。因此，CouchDB和JavaScript配合非常默契，你可以直接使用原生对象进行工作。与关系型数据库相比较，它不会阻抗失谐。与对象数据库相比较，它只会存储数据而不去存储行为，所以你可以避免很多并发症。CouchDB只是几个类似NoSQL数据库（http://bit.ly/1oNYfcp）中的一个，它们大多数都有良好的JavaScript支持。
（7）2006年——jQuery（http://jquery.com/）辅助DOM操作
浏览器DOM是浏览器端开发最痛苦的部分。jQuery通过提供了一个强大流畅的API，可以在不同浏览器中查询与修改DOM，这让DOM操作变得有趣。
（8）2007年——WebKit（https://www.webkit.org/），让移动Web成为主流
基于KDE之前的工作，WebKit这个HTML引擎被苹果在2003年引进。它在2005年被开源。随着2007年iPhone推出，移动Web一下子变成了主流，并且与非移动Web 相比几乎没有什么局限性。
（9）2008年——V8（http://code.google.com/p/v8/），证明JavaScript可以更快
当Google推出Chrome浏览器时，其中的一个亮点便是V8这个高效JavaScript引擎。它改变了人们对JavaScript缓慢的看法，并且引爆了其他浏览器厂商的速度竞赛，这让我们从中受益匪浅。众所周知，V8引擎是开源的，并且在你需要一个快速的嵌入式语言时，它可以作为一个独立组件快速嵌入你的程序。
（10）2009年——Node.js（http://nodejs.org/），实现服务端的JavaScript
Node.js可以让你实现在负载下表现良好的服务器。为此，它使用事件驱动、非阻塞I/O和JavaScript（使用V8）。Node.js的作者Ryan Dahl提到了选择JavaScript的原因：
“因为它是暴露的并且不自带I/O API。”[Node.js可以去推行自己的非阻塞I/O。]
“Web开发者已在使用。”[JavaScript是众所周知的语言，尤其是在Web开发领域。]
“DOM API是基于事件的。所有人都已经习惯了不使用线程，而使用事件循环的机制。”[开发者已经在使用异步风格进行编码。]
Dahl曾经参与过事件驱动服务的开发和服务端JavaScript（主要是CommonJS（http://www. commonjs.org/）项目）。
Node.js的魅力在于JavaScript程序员不仅能够在熟悉的语言环境下工作，还可以在客户端和服务器端使用同一种语言。这意味着你可以共用更多的代码（比如数据验证）和使用JavaScript同构技巧（http://bit.ly/1gWhLIs）。同构JavaScript可以在服务端或者客户端渲染网页，这样有很多好处：页面可以由服务器渲染，这样页面的初始化更快，有利于SEO，并且可以运行在不支持JavaScript或者太老版本的浏览器。但页面也可以在客户端进行更新，进而构建一个更灵活的用户界面。
（11）2009——PhoneGap（http://phonegap.com/），用HTML5编写Native应用
PhoneGap原本是一家叫Nitobi的公司建立的，后被Adobe收购。PhoneGap的开源基础叫作Cordova。PhoneGap最初的使命是通过HTML5来实现原生移动应用。之后，PhoneGap对平台的支持已经扩展到了非移动端的操作系统。当前支持的平台包括Android、Bada、BlackBerry、Firefox OS、iOS、Mac OS X、Tizen、Ubuntu、Windows(桌面版)、Windows Phone。除了HTML5的API以外，还存在PhoneGap特有的API来访问原生特性（http://bit.ly/10OzzQq）），比如加速器、摄像头、通讯录。
（12）2009年——Chrome OS（http://bit.ly/1oO27U2），将浏览器变成操作系统
有了Chrome OS，Web平台就是本地平台。该方案有以下几种优点。
创建一个操作系统更加容易，因为所有的用户界面技术早已准备就绪。
许多开发者已经知道（基本上）如何为操作系统编写应用。
管理应用非常简单，这有助于在例如网咖、学校等公共场所安装应用。
移动操作系统webOS（http://bit.ly/1oO2e1N，源自Palm，现在由LG电子所有）的推出早于Chrome OS，但前者“浏览器操作系统”的理念比后者更为明显（这就是为什么它被选为了里程碑）。webOS既少又多。少，是因为它非常注重手机和平板电脑。多，因为它内置Node.js，可以用JavaScript实现服务。另一个更接近浏览器操作系统的是Mozilla的Firefox OS（http://mzl.la/ 1oO2i1J），其目标是手机和平板电脑。Mozilla的Wiki（http://mzl.la/1oO2n5m）中提到浏览器操作系统对于Web的一点好处：
为了使我们的努力更加专注，还需要迎接很大的挑战。最近我们看到pdf.js项目[使用HTML5渲染PDF，而不使用插件]暴露了一个小的差距，需要填充它才能让“HTML5”成为PDF的超集。现在我们需要跨出一大步，去寻找这些妨碍Web开发者构建和iPhone、Android、WP7原生应用各方面都相同的应用的差距。
（13）2011年——Windows 8（http://bit.ly/1oO2qhJ），第一类HTML5应用
当微软推出Windows 8时，让所有人惊喜的是操作系统大量整合了HTML5。HTML5应用在Windows 8是“一等公民”，可以与现行技术看齐，比如.NET和C++。为了演示这一点，微软用HTML5（外加一些Native接口）编写了几个重要的Windows 8应用，包括应用商店、邮件应用。
[1] Ajax是一种速记的形式而非缩写，这也是它没有被写成AJAX的原因。
第3部分 深入JavaScript
这一部分是JavaScript语言的综合参考。
第7章 JavaScript的语法
JavaScript的语法相当简单，这章将介绍需要注意的事情。
7.1 语法概览