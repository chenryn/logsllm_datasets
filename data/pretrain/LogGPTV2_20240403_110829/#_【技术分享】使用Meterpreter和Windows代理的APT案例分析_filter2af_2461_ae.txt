            WINHTTP_NO_HEADER_INDEX = 0
            dwInfoLevel = WINHTTP_QUERY_RAW_HEADERS_CRLF
            lpdwBufferLength = ctypes.wintypes.DWORD()
            lpdwIndex = ctypes.wintypes.DWORD()
            result = ctypes.windll.winhttp.WinHttpReceiveResponse(hRequest, 0)
            if result:
                result = ctypes.windll.winhttp.WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_RAW_HEADERS_CRLF,
                                                                   WINHTTP_HEADER_NAME_BY_INDEX, 0,
                                                                   ctypes.byref(lpdwBufferLength),
                                                                   WINHTTP_NO_HEADER_INDEX)
                ERROR_INSUFFICIENT_BUFFER = 122
                if ctypes.GetLastError() == ERROR_INSUFFICIENT_BUFFER:
                    lpBuffer = ctypes.create_string_buffer(lpdwBufferLength.value)
                    result = ctypes.windll.winhttp.WinHttpQueryHeaders(hRequest, WINHTTP_QUERY_RAW_HEADERS_CRLF,
                                                                       WINHTTP_HEADER_NAME_BY_INDEX, ctypes.byref(lpBuffer),
                                                                       ctypes.byref(lpdwBufferLength),
                                                                       WINHTTP_NO_HEADER_INDEX)
                    if result:
                        line = lpBuffer.raw.replace('x00', '').split('n')[0]
                        space_1 = line.find(' ')
                        space_2 = line.find(' ', space_1+1)
                        code = line[space_1:space_2].strip()
                        text = line[space_2:].strip()
                        print "t[*] HTTP Query Status Code / Text: nt    %s / %s" % (code, text)
                        if code != "200":
                            return False
                        else:
                            return True
        ctypes.windll.winhttp.WinHttpCloseHandle(hRequest)
        ctypes.windll.winhttp.WinHttpCloseHandle(hInternet)
        ctypes.windll.winhttp.WinHttpCloseHandle(hSession)
        return True
    def main():
        result, pProxyConfig = GetCurrentProxies()
        if result == False:
            sys.exit()
        print 'n[*] We got the proxy configuration.'
        if pProxyConfig is None:
            print '[*] No proxy setting found for the current user.'
            sys.exit()
        target_server = 'www.google.com'
        target_url = 'http://' + target_server
        target_port = 80
        proxy_list = GetProxyInfoList(pProxyConfig, target_url)
        print 'n[*] Number of proxies: %s' % str(len(proxy_list))
        print 'n[*] Testing if proxy servers actually work...'
        for proxy in proxy_list:
            print 'n    [*] Proxy "%s" ... ' % proxy.lpszProxy
            result = CheckProxyStatus(proxy, target_server, target_port)
            if result:
                print '        [+] Works! :)'
            else:
                print '        [-] Does not work :('
    if __name__ == '__main__':
        main()
以上代码有两个重要函数：
1、GetProxyInfoList(pProxyConfig,
target_url)：这个函数会评估当前用户的代理设置，根据传入的URL地址，返回一个代理套接字（IP:PORT）列表。需要注意的是这个代理列表中包含具体的代理地址，我们有可能使用这些代理地址访问目标URL，但是这并不意味着代理服务器一定处于正常工作状态。比如，这个列表中可能包含从WPAD.DAT文件中读取的代理信息，这个WPAD.DAT文件为“使用自动配置脚本”选项中设置的脚本文件，但在访问目标URL时这个代理可能不起作用。
2、CheckProxyStatus(proxy, target_server,
target_port)：这个函数会使用给定的代理，访问目标服务器和端口（直接访问根目录），以测试代理是否实际可用。我们可以使用这个函数判断某个代理是否可用。
**5.2 测试场景 #1**
在这个测试场景中，代理服务器tmg1以及tmg2的内部网络接口（192.168.0.x）在客户机启动前已被禁用。这意味着客户机只能通过代理服务器TMG3访问互联网。
脚本程序的输出结果如下所示。此外，我们还可以从输出结果中看到IE和Firefox浏览器如何处理这种场景：
从测试程序的输出结果中我们可知以下信息：
1、“自动检测设置”选项已启用，获取的代理为“192.168.0.10:8080”（Windows会在后台下载WPAD.PAC文件，同时在代理服务器内部接口被禁用前缓存已获取的代理信息）。然而，这个代理并不能正常工作，因为TMG1的内部接口已被禁用，客户机不可能通过网络访问到这个接口（会出现访问超时情况）。
2、“使用自动配置脚本”选项已启用，获取的代理为“192.168.0.11:8080”（Windows会在后台下载WPAD.PAC文件，同时在代理服务器内部接口被禁用前缓存已获取的代理信息）。然而这个代理依然不能正常工作，因为TMG2的内部接口已被禁用，客户机不可能通过网络访问到这个接口（会出现访问超时情况）。
3、手动配置的代理服务器为“tmg3.lab.bransh.com:8080”。这个代理可以正常使用，客户机可以通过它发送请求。
同时我们还知道，在当前的代理环境下，不管是IE还是Firefox浏览器都不能访问互联网。然而，使用tmg3作为代理服务器的自定义应用程序可以成功访问互联网。
**5.3 测试场景 #2**
这个场景与测试场景#1非常类似，代理服务器tmg1和tmg2的内部网络接口（192.168.0.x）在客户机启动前已被禁用。这意味着客户机只能通过代理服务器TMG3访问互联网。
脚本程序的输出结果如下图所示。此外，我们还可以从输出结果中看到IE和Firefox浏览器如何处理这种场景：
从测试程序的输出结果中我们可知以下信息：
1、“自动检测设置”选项已启用（tmg1.lab.bransh.com/wpad.dat），但没有获取到任何一个代理信息。之所以出现这种情况，原因在于当客户机收到DHCP配置信息（252选项）时，代理服务器（tmg1）并不可达，因此客户机无法下载wpad.dat代理配置文件。
2、“使用自动配置脚本”选项已启用，配置文件所使用的URL地址为“tmg2.lab.bransh.com/wpad.dat”。然而客户机无法下载配置脚本，因为代理服务器此时并不可达。
3、手动配置的代理服务器为“tmg3.lab.bransh.com:8080”。这个代理可以正常使用，客户机可以通过它发送请求。
同时我们还知道，在当前的代理环境下，IE浏览器能够正确识别代理信息，访问互联网，然而Firefox浏览器却不能做到这一点。
**5.4 测试场景 #3**
在这个场景中，代理服务器TMG2的内部网络接口（192.168.0.11）在客户机启动前已被禁用。这意味着客户机可以通过代理服务器TMG1和TMG3代理服务器访问互联网。
脚本程序的输出结果如下图所示。此外，我们还可以从输出结果中看到IE和Firefox浏览器如何处理这种场景：
从测试程序的输出结果中我们可知以下信息：
1、“自动检测设置”选项已启用，客户机可以使用已获取的代理信息（192.168.0.10:8080）访问互联网。
2、“使用自动配置脚本”选项已启用，配置文件所使用的URL地址为“tmg2.lab.bransh.com/wpad.dat”。然而由于这个代理服务器的网络接口已被禁用，客户机无法下载配置脚本。
3、手动配置的代理服务器为“tmg3.lab.bransh.com:8080”。这个代理可以正常使用，客户机可以通过它发送请求。
同时我们还知道，在当前的代理环境下，IE浏览器能够正确识别代理信息，访问互联网，然而Firefox浏览器却不能做到这一点。
**5.5 测试场景 #4**
在这个场景中，只有TMG2代理服务器的内部网络接口（192.168.0.11）处于启用状态：
从测试程序的输出结果中我们可知以下信息：
1、“自动检测设置”选项已启用，客户机无法通过这个代理（192.168.0.10:8080）访问互联网。
2、“使用自动配置脚本”选项已启用，配置文件所使用的URL地址为“tmg2.lab.bransh.com/wpad.dat”。此外，获取到的代理地址为“192.168.0.11:8080”，客户机可以通过这个代理访问互联网。
3、手动配置的代理服务器为“tmg3.lab.bransh.com:8080”。这个代理可以正常使用，客户机可以通过它发送请求。
同时我们还知道，在当前的代理环境下，IE浏览器不能识别代理信息，无法访问互联网。然而Firefox成功获取了代理配置信息，能够正常访问互联网。
**5.6 测试场景 #5**
在这个场景中，所有三个代理服务器的内部网络接口全部处于启用状态。然而，TMG1和TMG2服务器的外部接口处于禁用状态：
从测试程序的输出结果中我们可知以下信息：
1、“自动检测设置”选项已启用，对应的代理服务器（192.168.0.10:8080）也可达。然而代理服务器返回了一个错误应答（502错误），表明客户机无法通过此代理服务器访问互联网。
2、“使用自动配置脚本”选项已启用，对应的代理服务器（192.168.0.11:8080）也可达。然而代理服务器返回了一个错误应答（502错误），表明客户机无法通过此代理服务器访问互联网。
3、手动配置的代理服务器为“tmg3.lab.bransh.com:8080”。这个代理可以正常使用，客户机可以通过它访问互联网。
在当前的代理环境下，IE和Firefox浏览器都不能访问互联网，然而使用TMG3作为代理服务器的自定义应用程序可以成功访问互联网。
**六、总结**
在某些场景下（比如本文第一部分描述的场景），我们会发现我们最喜爱的工具无法像预期那样正常工作。在这些情况下，我们主要有两种选择：尝试找到另一种解决方案，或者亲自上手修改工具，使其能正常工作。在本文所描述的企业网络场景中，我们修改了Meterpreter载荷源码，重新编译载荷Dll后，Meterpreter载荷能够在上文描述的代理环境中正常工作。我不确定我的这些修改是否会反馈到Meterpreter官方代码中，但如果你面临的是类似的场景，现在你应该知道该如何处理。
另一方面，我们知道Windows会按一定优先级顺序使用代理（如前文提到的优先级顺序）。然而，我们似乎发现，如果Windows已经获取了某个代理信息（如场景
#1给出的结果），即使这个代理无法正常工作，Windows也不会继续尝试使用另一个可用的代理选项。此外，我们发现在启用“使用系统代理设置”选项的条件下，IE和Firefox浏览器在查找代理时的表现也不尽相同。最后我们也发现，如果某个代理可达，但这个代理出于某些原因（比如互联网连接失败），无法提供互联网访问服务，此时这两个浏览器都不会尝试使用其他可能生效的代理服务器访问互联网。
考虑到这些测试结果，我们可以看到，我们的确可以使用某些API函数来评估所有的代理配置情况，甚至可以测试这些代理，以确认它们能否访问互联网资源。因此，我们只需要修改几行代码，就可以增加我们APT工具的鲁棒性，使其可以在这种网络环境下正常工作。然而，我必须承认，客户工作站存在多个代理的情况的确比较罕见，我不大相信管理员能够妥善处理这种混乱场面。另一方面，在连IE浏览器都不能正常工作的场景中，如果我们的APT工具还能正常工作的话，我不敢完全确定这是一个好主意。如果人们认为某个主机肯定不能访问互联网，但突然某一天，它开始通过可用的代理服务器访问互联网，这种情况对于蓝队来说可能比较奇怪。
最后总结一下，我认为如果我们的APT工具能够像IE浏览器那样健壮，那么它已经足以应付大多数情况。如果IE浏览器能够访问互联网，那么我们的APT工具也可以。
**七、参考资料**
[1] 自动代理：
[2] Windows Web代理配置：
[3] 编译Meterpreter：
[4] Meterpreter WinHTTP源代码：
[5] Meterpreter common.h源代码：
[6] Sysinternals DebugView：
[7] 对比WinHTTP与WinInet：
[8] Metasploit bug反馈：
[9] WinHTTP示例代码：