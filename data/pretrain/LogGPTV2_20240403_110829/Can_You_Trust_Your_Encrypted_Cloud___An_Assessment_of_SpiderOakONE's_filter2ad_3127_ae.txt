[29] Martin Mulazzani, Sebastian Schrittwieser, Manuel Leithner, Markus Hu-
ber, and Edgar R. Weippl. Dark clouds on the horizon: Using cloud storage
as attack vector and online slack space. In 20th USENIX Security Sympo-
sium, San Francisco, CA, USA, August 8-12, 2011, Proceedings, 2011.
[30] Niels Provos and David Mazières. A future-adaptable password scheme. In
USENIX Annual Technical conference, 1999.
[31] Erin Risner. Why we will no longer use the phrase zero knowledge
https://spideroak.com/articles/why-we-
to describe our software.
will-no-longer-use-the-phrase-zero-knowledge-to-describe-
our-software, 02 2017.
[32] P Rogaway and T Shrimpton. Deterministic authenticated-encryption. In
Advances in Cryptology–EUROCRYPT, volume 6, 2007.
[33] SpiderOak.
Encryption white paper.
resources/encryption-white-paper.
https://spideroak.com/
[34] SpiderOak.
Building for new threat models
in a post-snowden
https://spideroak.com/articles/building-for-new-threat-
era.
models-in-a-postsnowden-era, 6 2017.
[35] SpiderOak.
security update for spideroak groups & one; bugs reported
& resolved. https://spideroak.com/articles/security-update-for-
spideroak-groups-one-bugs-reported-resolved/, 9 2017.
25
[36] Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher W. Fletcher, Ling
Ren, Xiangyao Yu, and Srinivas Devadas. Path ORAM: an extremely sim-
ple oblivious RAM protocol. In 2013 ACM SIGSAC Conference on Com-
puter and Communications Security, CCS’13, Berlin, Germany, November
4-8, 2013, pages 299–310, 2013.
[37] Mark W. Storer, Kevin Greenan, Darrell D.E. Long, and Ethan L. Miller.
Secure data deduplication. In Proceedings of the 4th ACM International
Workshop on Storage Security and Survivability, StorageSS ’08, pages 1–10,
New York, NY, USA, 2008. ACM.
[38] Nikos Virvilis, Stelios Dritsas, and Dimitris Gritzalis. Secure Cloud Storage:
Available Infrastructures and Architectures Review and Evaluation, pages
74–85. Springer Berlin Heidelberg, Berlin, Heidelberg, 2011.
[39] Duane C Wilson and Giuseppe Ateniese.
“to share or not to share” in
client-side encrypted clouds. In International Conference on Information
Security, pages 401–412. Springer, 2014.
[40] F. F. Yao and Y. L. Yin. Design and analysis of password-based key deriva-
IEEE Transactions on Information Theory, 51(9):3292–
tion functions.
3297, Sept 2005.
A Notation
We explicitly denote the KDFs that will be used: bcrypt(pw, s) [30] where pw is a
password and s a modular crypt formatted salt (see e.g., [1]); PBKDF2(pw, s, c) [22],
where pw is a password, s a random string and c an integer denoting an itera-
tion count. By writing Enci
k(iv, m)) we mean an AES-CFB
encryption (resp. decryption) of message m under key k, using segment size i
(cf. [13]) and initialization vector iv. Similar notation is used for RSA encryp-
tion, and we use |pk| to denote the bit-length of the modulus. Assignment is
written as x := y and random sampling as x $← X. Finally, xi,j denotes the bit
sub-string xi, . . . , xj−1 of x; and by |x| we mean x’s length in bits.
k(iv, m) (resp. Deci
B Authentication Protocols
Protocol names (e.g., “pandora/zk”) reﬂect the value of the short identiﬁer the
server uses to instruct the client which protocol is to be run.
We will always use pw to denote the user’s password and usr to denote their
username.
B.1 pandora/zk (login)
$←{0, 1}256. Assume both
Deﬁne ck as ck := PBKDF2(pwd, s1, 16384) where s1
client and server knows ck. (The server learns ck after an account registration
26
where the client sends it.)
Client: Send usr to the server.
Server: Let k ∈ {0, 1}256, iv ∈ {0, 1}128 and let tv ∈ {0, 1}32 be the current
ck(iv, k)
server time. Using usr, ﬁnd values s1 and ck. Compute c := Enc8
and send (tv, iv, s1, c) to the client.
Client: Compute k(cid:48) = Dec8
back to the server.
ck(iv, c), a := Enc8
k(cid:48)(iv, tv) and send (iv, tv, c, s1, a)
Server: Accept if tv = Dec8
k(iv, a).
B.2 bcrypt (account registration)
We repeat the description from Section 3.3 here:
Client: Send usr to the server.
Server: Using usr, ﬁnd a salt s and bcrypt hash h. Send s(cid:48) to the client.
Client: Compute h(cid:48) := bcrypt(pw, s) and send h(cid:48) to the server.
Server: Reject if h(cid:48) (cid:54)= h.
escrow/challenge (i.e., escrow login)
B.3
We ﬁrst describe the two procedures FP (fingerprint) and LE (layered-encryption):
FP(lst)
lst is a list of keys and ids. We use a counter n to denote its length. Deﬁne lst
as
(cid:40){(id1, pk1), . . . , (idn, pkn)},
lst :=
∅.
if n > 0
else.
A hash h of l is computed as
l(cid:48) := [ ],
l(cid:48) := l(cid:48) || idi || E(pki), for (idi, pki) ∈ lst ∧ i = 1, . . . n
h := sha256(l(cid:48)),
(Step 2 is skipped if n = 0.) E(x) performs a DER encoding [20] of x. Use
the key2eng procedure from [11] to obtain 24 words w0, . . . , w23. Output the
ﬁngerprint f p = w0 || w2 || . . . || w22 (i.e., only words at even indexes are used).
27
LE(pw, lst, chl)
lst is deﬁned as before and chl ∈ {0, 1}∗. Let auth = chl || pwd and do for every
pair (idi, pki) ∈ lst:
1. Pick xi
$←{0, 1}|pki|−8, let tv denote the current system time and deﬁne
ivi := sha256(tv)0,16.
2. Compute
Return auth.
A := Enc8
sha256(xi)(ivi, auth)
B := RSAEncpki(xi),
auth := idi || A || B || ivi.
The protocol in its entirety then goes as described in Section 3.3:
Client: Send usr to the server.
Server: Retrieve lst and chl associated with usr.
Client: Compute f p = FP(lst) and show f p to the user (i.e., the human). If
the user accepts the ﬁngerprint, continue. Otherwise the client aborts the
protocol.
Client: (If the user accepted f p) Compute auth = LE(pw, lst, chl) and send
auth to the server.
Note that, as we did not observe this protocol being used during normal inter-
action with the server, we cannot say what criteria has to be satisﬁed, for the
server to authenticate the client.
B.4 pandora/zk/sha256
We do not know when or where this protocol is used.
Client: Retrieve value s1 from local storage and compute ck as in B.1. Send
ck to the server.
For the same reasons as in the previous protocol, we do not know how the server
should react to the client’s message.
C Keys
Figure 2 shows the relationship between various secrets in SpiderOakONE. Key
encapsulation is done in diﬀerent ways, depending on the “layer” in Figure 2:
1. The user’s password protects an RSA keypair kp;
28
2. kp protects a special long term secret, ksym;
3. ksym protects all other long term secrets;
4. jk (a long term key) protects directory keys; and
5. Each directory key protects a set of ﬁle encryption keys corresponding to
ﬁles stored in the corresponding directory.
A technical description of all but the last step follows (the last step is treated
in Section D).
C.1 Step 1
Let kp := (sk, pk) be a 3072-bit RSA keypair, and s2
$←{0, 1}256. Compute
k := PBKDF2(pw, s2, 16834),
iv := sha256("keypair" || s2)0,16,
ckeypair := Enc8
k(iv, kp).
C.2 Step 2
Write (sk, kp) = kp, let ksym
$←{0, 1}3064 and compute
c := RSAEncpk(ksym),
s := RSASignsk(sha256(c)),
csym := (c, s).
(Note: “textbook RSA” is used, which explains the number 3064 as it is exactly
1 byte smaller than the size of the modulus.)
C.3 Step 3
Let k $←{0, 1}(cid:96) where (cid:96) is the length of this particular long term key; let id be
its name (in step 1, id = "keypair") and let miv $←{0, 1}2048. Compute:
kk := sha256(ksym)
iv := sha256(miv)0,16,
cid := Enc8
kk(iv, k).
C.4 Step 4
$←{0, 1}256 and
For k = jk, we have (cid:96) = 256 and id = "journalkey". Let dki
id be a unique ID for this directory. (In fact, this ID will be unique across all
accounts in the system.) Compute:
iv := sha256(miv || "journal" || id || ".key")0,16
cid := Enc8
jk(iv, dki).
29
User password pw
miv, s1, s2, s
kp (ckeypair)
ck
ksym (csym)
jk (cid)
mk (cid)
Other long term keys . . .
Directory keys dki (cid)
File keys Xk (cid)
Figure 2: Key tree. A solid arrow from A to B means that A is used to “protect”
B in some way (e.g., B is encrypted under A), while a dashed arrow means A is
used to derive B in some way. Values in a dashed box are the public values (i.e.,
client and server both possess them). Values inside parenthesis are possessed
by the server and id’s are distinct.
C.5 Remark on password change
As noted, a password change does not eﬀectively prevent an old password from
being useful in the future. To see why, we note that, upon a password change,
the client only recomputes ckp but otherwise leaves everything as is. I.e., the
secrets recoverable with the old password, will still be the same secrets in use
with the new password.
D File Encryption
We describe in technical detail the diﬀerent encryption methods mentioned in
Section 3.5.
D.1 Metadata Encryption
An encrypted metadata ﬁle can be seen as a bit-string rn || rs || c where
|rn| = |rs| = 32
and
|c| =
rs
8
.
That is, both rn and rs are 4-byte integers and rs describes the size of c (the
ciphertext). rn describes a record number and is used in IV creation and encryp-
tion in the following way. Suppose m is the piece of metadata to be encrypted:
1. Find the highest rn∗ among all stored encryptions. For the new encryp-
tion, set rn := rn∗ + 1;
30
2. Compute iv := sha256(miv || rn)0,16;
3. Let k be an encryption key (this k is always one of the long-term keys);
k(iv, m), rs = |c|/8 and deﬁne the new encryption as
4. Compute c := Enc8
rn || rs || c.
D.2 User ﬁle encryption
Let F be a ﬁle uploaded by the user to a directory with directory key dk.
Encryption of F proceeds as follows:
1. partition F into n blocks b0, . . . , bn−1 each of some (not necessarily equal)
size. The client treats block as a separate ﬁle, so let bi.id denote the id of
block bi. For each block bi, do
(a) Compute
ivi := sha256("block" || bi.id || miv)0,16,
bki := sha256(bi || mk),
where mk $←{0, 1}2048 is a long-term secret (the previously mentioned
“master key”).
(b) Encryption of bi:
ci := Enc128
bki
ebki := Enc8
dk(ivi, bki),
(ivi, pad(bi)),
where pad(x) applies an ANSI X.932 padding to x. Deﬁne the en-
cryption of bi as cbi := ebki || ci.
Having so obtained an encryption for each bi, compute
vk := sha256(F || mk),
iv := sha256("version" || F.id, miv)0,16.
Let bl := [b0.id, . . . , bn−1.id], compute cF := Enc8
Enc8
dk(iv, vk). Output ci for i = 0, . . . , n − 1 and cvF := evkF || cF .
vk(iv, bl) and evkF :=
D.3 File sharing
Observe that cvF describes the exact blocks making up the ﬁle F . Thus, a ﬁle
sharing of F has to include also cvF . File sharing then proceeds in the way
described in 3.5, namely:
Single ﬁles: The client ﬁrst recovers each bi.id from cvF . From bi.id, the
corresponding cbi can be found, and from cbi, the client extracts bki from
ebki and sends {bki}n−1
i=0 as well as evkF to the server.
31
Directory: Sharing a whole directory works in much the same way as with
single ﬁles. However, instead of recovering each individual ﬁle encryption
key, the directory key dk is shared instead.
32