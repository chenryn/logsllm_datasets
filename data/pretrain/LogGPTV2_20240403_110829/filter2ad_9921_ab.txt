  * 设计模式
这个时候你可以注意一些需要特定页面跳转的功能点。通常这些功能点可以被手工操控，从而使其不用满足特定跳转顺序就可以实现，这可以让你有重大发现。(举个栗子，电子商务网站的付款功能，密码重置页面等)
## 0x03 漏洞挖掘
> 在一次渗透测试过程中，漏洞挖掘是在攻击者的角度来了解整个Web应用的全貌。
### 1\. 过渡
在你Mapping之后，并且进行了一些基本的功能性的分析后，就可以开始进行漏洞挖掘了。这个步骤中，你应该尽可能多的识别出Web应用存在的漏洞。这些漏洞不仅是`The
OWASP Top 10`中包含的那些，还包含于应用的商业逻辑中。记住一点，你将会遇到大量的漏洞，它不属于任何一个现有的分类中，你应该时刻警惕这一点。
### 2\. 内容挖掘
#### 2.1 漏洞扫描
名称 | 描述  
---|---  
Nikto | 有指纹识别功能的Web服务漏洞扫描器  
`Nikto`当之无愧的是最好的Web服务漏洞扫描器，特别是在大型的Web应用程序中表现非常好。它可以利用`-Format`选项来导出特定格式的扫描结果，使扫描结果更容易阅读和分析。
  * 扫描目标并将结果导出成HTML格式 
        nikto -h http://example.com -output ~/nikto.html -Format htm
> 漏洞扫描通常是第二步和第三步的过渡。一旦有了扫描结果，一定要花时间去分析一下结果，打开一些引人注目的页面看看。
### 3\. 强制浏览(译者注：翻译的感觉很别扭，看下面内容应该能明白什么意思)
名称 | 描述  
---|---  
Burp Engagement Tools | Burp Suite Pro中自带的有特殊用途的工具集  
Engagement Tool: Discover Content | Burp Suite Pro自带的用于强制浏览的工具  
Burp Intruder | Burp Suite中可自定义的用于自动化的攻击的模块。(比如brute forcing, injection, 等)  
FuzzDB | 包含各种恶意输入、资源名、用于grep搜索响应内容的字符串、Webshell等。  
强制浏览是一种挖掘技巧，它可以发现应用程序中没有被引用但是确实是可以访问的页面。`Discover
Content`是`Burp`中专门用于此目的的工具。除此之外，`Burp
Intruder`也可以通过字典攻击来实施强制浏览(通常是在url参数和文件路径部分进行修改)。`FuzzDB`包含一些用于此目的的非常牛逼的字典，你可以在[这里](https://github.com/fuzzdb-project/fuzzdb/tree/master/discovery)看看。
#### 3.1 测试可选内容
名称 | 描述  
---|---  
User Agent Switcher | 用于迅速切换浏览器的User Agent的一款Firefox插件  
Burp Intruder | Burp Suite中可自定义的用于自动化的攻击的模块。(比如brute forcing, injection, 等)  
FuzzDB | 包含各种恶意输入、资源名、用于grep搜索响应内容的字符串、Webshell等。  
在内容挖掘这一步，我非常喜欢做一件事。那就是利用`User Agent Switcher`切换不同的User
Agent然后访问同一个特定页面。这是因为很多的Web应用对于不同的`User-Agent`和`Referer`请求头会返回不同的内容。
我经常使用`Burp Intruder`来模糊测试`User-Agent`和`Referer`请求头，一般还利用`FuzzDB`的字典。
### 4\. 自动化的漏洞挖掘
名称 | 描述  
---|---  
Burp Scanner | 自动化扫描安全漏洞的Burp Suite工具  
当你在Mapping和进行漏洞挖掘的开始部分时候，`Burp Passive
Scanner`就已经在后台悄悄运行。你应该先分析这份扫描结果，然后再进行`Burp Active Scanner`，这样在`Burp Passive
Scanner`中发现的值得关注的页面就可以在`Burp Active Scanner`中进行详细的扫描。
由于Burp Active Scanner完成所需的时间非常长，我更喜欢只允许一小段时间，然后查看两者之间的扫描结果并记录结果。
> ！！！自动化的漏洞扫描是很危险的。用Burp Scanner可能导致不良的影响。除非你非常熟悉目标的功能与环境，否则你只应在非生产环境中使用。
### 5\. 配置
#### 5.1 默认配置
在确认了目标所使用的技术后，很自然的一步跟进就是测试有没有默认配置。许多框架使用许多易受攻击默认配置的应用程序以便于向开发人员介绍他们的产品。然后由于开发人员的疏忽，这些示例应用被部署到和目标站点所在的同一台服务器上，这使得目标站点承受很大的风险。
#### 5.2 错误配置
在Web渗透测试的每一步，你都应该注意Web应用有没有错误的配置。你可以特别关注页面出现的错误信息，这些信息经常会给出很有用的`数据库结构`和`服务器文件系统`等信息。
> 错误信息几乎总能够发现一些。这些错误信息在注入和LFI(Local File Include)中特别有用。
另外一个值得注意的是页面的敏感表单有没有禁用自动填充。比如密码字段经常会有一个“显示/隐藏”按钮。浏览器默认不会填充`type="password"`的`input`标签内容，而当密码字段是“显示”时，`input`标签就变成了`type="text"`，这样浏览器就会进行自动填充。这在多用户环境下是一个隐患。
### 6\. 身份认证
在漏洞挖掘过程中，你应该认真审视你看到的每个登录表单。如果这些表单没有做很好的安全措施(比如双重认证，验证码，禁止重复提交等)，攻击者就可能得到用户账户未授权的权限。取决于表单的不同实现以及不同的框架/CMS，即使登录失败目标站点也可能会透露出用户账户的一些信息。
如果你测试发现了上述所讨论的问题，你应该关注并记录。另外，如果登录表单没有加密(或者利用了旧版本的SSL/TLS)，这也应该关注并记录。
#### 6.1 模糊登录测试
名称 | 描述  
---|---  
CeWL | 通过爬取目标站点来生成用户字典的工具  
Burp Intruder | Burp Suite中可自定义的用于自动化的攻击的模块。(比如brute forcing, injection, 等)  
在你认真审视了登录表单后，就可以开始登录测试了。`CeWL`是一款非常好用的用于生成一次性字典的工具。你可以利用`-h`查看帮助文档。
基本语法如下
    cewl [options] www.example.com
当你构造好用户字典后就可以开始用`Burp
Intruder`进行实际的模糊测试了。通常我会用两个payload集(一个是用户名的，另一个是`CeWL`生成的密码)。Intruder的Attack
Type通常应该选`Cluster Bomb`。
### 7\. Session管理
Session-token/Cookie分析在渗透测试过程中虽然不是很吸引人的部分，但确实非常重要的一块。通常是这样子的，你想了解整个web应用是如何跟踪Session，然后用`Burp
Sequencer`这样的工具去测试session
token的随机性/可预测性。一些应用(较传统的应用)会把session的内容存储在客户端。有时候这些数据里面会包含有加密的，序列化的敏感信息。
这时也应该检查HTTP返回头的`Set-Cookie`是否包含`Secure`和`HttpOnly`的标识。如果没有的话就值得注意了，因为没有理由不设置这些标识位。
> Google搜索你得到的session token，可能会有一些发现，比如Session可预测等，这样就可以进行Session劫持攻击。
#### 7.1 用Burp测试Session Tokens
名称 | 描述  
---|---  
Burp Sequencer | Burp用来分析数据集的随机性的模块  
`Burp Sequencer`是用来测试Session
Token随机性和可预测性的很好的工具。当你用这个工具来测试目标的Session管理时，你应该先清除所有的Cookies，然后重新认证一次。然后就可以把带有`Set-Cookie`头的返回包发送给`Burp
Sequencer`，然后Sequencer就会启动新的拦截对Token进行分析。通常10000次请求就差不多可以判断随机性和可预测性了。
如果发现Session token不够随机，那就可以考虑Session劫持了。
### 8\. 授权
授权漏洞很像[功能级访问控制缺失](https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control)和[不安全的直接对象引用](https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References)漏洞，是很长一段时间我发现的最流行的漏洞。这是因为许多的开发者没有想到一个低权限甚至是匿名用户会去向高权限的接口发送请求(失效的权限控制)。
    http://example.com/app/admin_getappInfo
或者是去请求其他用户的数据(不安全的直接对象引用，译者注：水平越权)
    http://example.com/app/accountInfo?acct=notmyacct
#### 8.1 测试权限控制
名称 | 描述  
---|---  
Compare Site Maps | Burp的用于测试授权的模块  
这里有个小技巧，就是注册两个不同权限的用户，然后用高权限的用户去访问整个Web应用，退出高权限用户，登录低权限用户,然后用Burp的`Compare
Site Maps`工具去测试哪些页面的权限控制没有做好。
### 9\. 数据验证测试
名称 | 描述  
---|---  
Burp Repeater | 用于手工修改、重放HTTP请求的Burp模块  
注入漏洞的存在是因为Web应用接受任意的用户输入，并且在服务端没有正确验证用户的输入的有效性。作为一个渗透测试者，你应该注意每一个接受随意的用户输入的地方并设法进行注入。
因为每个Web应用情况都不一样，所以没有一种万能的注入方式。接下来，我会把注入漏洞进行分类并且给出一些Payload。`Burp
Repeater`是我测试注入漏洞时最常使用的工具。它可以重放HTTP请求，并且可以随时修改Payload。
有一件事需要谨记：漏洞挖掘阶段要做的只是识别漏洞，而漏洞利用阶段才会利用漏洞做更多地事。当然，每个注入漏洞都值得被记录，你可以在漏洞挖掘阶段之后对这些注入漏洞进行深入的测试。
在每个分类下可以参照[OWASP](https://www.owasp.org/)获取更多地信息。
#### 9.1 SQLi
任何将输入带入数据库进行查询的地方都可能存在SQL注入。结合错误的配置问题，会导致大量的数据被攻击者盗取。
我推荐你在做SQL注入时参照这个[Wiki](https://sqlwiki.netspi.com/#mysql)。如果你输入了这些Payload得到了数据库返回的错误信息，那么目标就非常有可能存在SQL注入漏洞。
`Sqlmap`是一款自动化的SQL注入工具，我将会在漏洞利用阶段介绍它。
[OWASP-测试SQL注入](https://www.owasp.org/index.php/Testing_for_SQL_Injection_\(OTG-INPVAL-005))
  * 示例
    ' OR 1=1 -- 1
    ' OR '1'='1
    ' or 1=1 LIMIT 1;-- 
    admin';--    
    http://www.example.com/product.php?id=10 AND 1=1
#### 9.2 跨站脚本攻击(XSS)
攻击者利用Web应用程序发送恶意代码(通常是JavaScript代码)给另外一个用户，就发生了XSS。
有三种不同的XSS：
  1. 存储型。当提供给Web应用的数据是攻击者事先提交到服务器端永久保存的恶意代码时，发生存储型XSS。
  2. 反射型。当提供给Web应用的数据是服务端脚本利用攻击者的恶意输入生成的页面时，发生反射型XSS。
  3. DOM型。DOM型XSS存在于客户端的脚本。
[OWASP-测试XSS](https://www.owasp.org/index.php/Testing_for_Cross_site_scripting)
  * 示例
    ">
       ]>&xxe;
       ]>&xxe;