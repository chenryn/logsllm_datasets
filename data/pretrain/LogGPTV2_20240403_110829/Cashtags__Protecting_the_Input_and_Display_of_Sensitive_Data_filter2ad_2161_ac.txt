components  into  a  screen  bitmap.    Fig. 4.1 shows  a 
simple  user  input  form  and  its  composition  of  various 
widgets and layouts. 
Text  rendering:    Text  can  be  rendered  on  the  screen 
through several mechanisms (Fig 3.1), most frequently
the TextView widget. An EditText is an extension 
of  the  TextView that  provides  an  interface  for  text 
input from the user via the on-screen software keyboard, 
hardware  keypads,  voice  input,  and  gestures.    These 
widgets can be pre-filled with text by the app internally
or through suggestion or auto-correction interfaces.
Text  can  also  be  rendered  on  screen  via  OpenGL
Canvas, other  graphic  rendering  libraries,  browser 
rendering  engines,  and  other  methods,  many  of  which 
do not inherit from the base TextView widget. This 
plethora of methods complicates practical capture of all 
possible ways text could get onto the screen.
converted 
logical 
is 
from 
966  24th USENIX Security Symposium 
USENIX Association
LinearLayout
(vertical)
FrameLayout
ImageView
LinearLayout
(horizontal)
TextView
TextView
EditText
TextView
EditText
â€¦
TextView
EditText
Button
ImageView
View
android.view.View
TextView
android.widget.TextView
CheckedTextView
android.widget.CheckedTextView
EditText
android.widget.EditText
Button
android.widget.Button
AutoCompleteTextView
android.widget.AutoCompleteTextView
MultiAutoCompleteTextView
android.widget.MultiAutoCompleteTextView
CheckBox
android.widget.CheckBox
RadioButton
android.widget.RadioButton
Switch
android.widget.Switch
Fig.    4.2. Simplified  inheritance  hierarchy  of  Android
on-screen views and widgets.
Fig.    4.1. Decomposition  of  on-screen  views,  layouts, 
and widgets of a simple app input form. 
4.2 Android code-injection framework
Cashtags  uses  the  Android  Xposed  code-injection 
framework.    The  development  cycle  is  accelerated  by 
short-circuiting  the  need  to  perform  complete  device 
firmware rebuilds from scratch.
Underneath  the  hood,  whenever  an  app  is  started, 
Android forks off a new virtual machine.  The Android 
Xposed framework allows overriding library routines to 
be  inserted  into  the  Java  classpath,  prior  to  the 
execution  of  the  new  virtual  machines.    Thus,  the 
overall  system  behavior  is  altered  without  modifying 
either the apps or the underlying firmware.  
Individual  class  methods  can  be  hooked,  allowing 
injected  code  to  be  executed  prior  to,  following  the 
completion  of,  or  in  place  of the base-method  calls.  
Private  or  protected  member  fields  and  functions  can 
also be accessed and modified, and additional fields or 
functions  can  be  added  to  the  base  class  or  object 
granularity.  
4.3 Sensitive data intercepting points
With the background of the Android display data paths 
(Fig. 3.1)  and  the  code-injection  framework,  we  can 
determine  where  and  how 
intercept  sensitive 
information.    Since  all  text-displaying  screen  widgets 
to 
to 
hooked 
needed 
to 
hook 
intercepted 
(integrated, 
plugged, 
through 
the  OpenGL 
are descendants of the TextView class (Fig. 4.2), we 
TextView 
only 
(android.widget.TextView)
intercept  all 
widgets containing static sensitive text.  For user input, 
EditText
we 
(android.widget.EditText) to capture sensitive 
data  or  cashtags  entered  via  on-screen  software 
keyboards, 
or  wirelessly 
connected) hardware keypads, voice input, and gestures.  
libraries,  we 
For  display 
intercepted 
GLText 
(android.view.GLES20Canvas).    For  browsers, 
WebView
we 
(android.WebKit/WebView).
4.4 TextView
Fig.
the 
implementation  of  the  TextView widget  in  the 
Android  API,  present  since  version  1  of  the  Android 
SDK.  The getText() and setText() methods of the 
TextViews are hooked and modified (the setText() 
method in TextView is inherited by EditText, to be 
detailed later).    We  also  added  mAlias to  map  the 
sensitive text to the corresponding cashtag.  
4.5 EditText
from 
to 
In  addition 
TextView,  EditText must also  handle additional 
actions  that  can  be  performed  by  the  user,  app,  or 
system to modify on-screen text. 
simplified  version  of 
functionality 
4.3
shows  a 
the 
inherited 
USENIX Association  
24th USENIX Security Symposium  967
public class TextView extends View 
implements ViewTreeObserver.
OnPreDrawListener {
return mText;
...
private CharSequence mText;
private CharSequence mAlias:
...
public CharSequence getText() {
}
...
private void setText(CharSequence
text, BufferType type, boolean 
notifyBefore, int oldlen) {
...
mBufferType = type;
mText = text;
}
...
}
Fig.  4.3. Simplified TextView implementation. Bolded 
functions getText() and setText() are hooked and 
modified. An additional private field mAlias is added 
for mapping to a displayed cashtag, if applicable.
from 
the  TextView base  class, 
For cases where the system or app has pre-populated a 
text  box  with  input,  the  TextView injection  handles 
the  cashtag  replacement.  Since  the  EditText class 
extends 
this 
functionality  is  provided  through  inheritance.    This  is 
also  the  case  for  nearly  every  other  on-screen  text 
widget, which also descend from the base TextView.
Fig. 4.4 and Fig. 4.5 show how Cashtags interacts with 
TextView and  EditText objects.    When  these 
getText() and setText() methods are called by the 
app or through system processes, such as auto correct or 
to  be  rendered  on  screen,  Cashtags  will  determine 
whether  to  return  the  alias  or  the  sensitive  data, 
depending on the caller.
User  input  can  be  entered  through  software  keyboards 
or  through  physical  devices.    In  both  cases,  Cashtags 
operates  similar  to,  and  through  the  same  interface,  as 
service.  This  TextWatcher
the 
(android.text.TextWatcher)  interface  handles 
text  has  been  modified. 
events  when  on-screen 
EditTexts internally  maintain  an  array  of  these 
TextWatcher event  handlers.    Cashtags,  as  one  of 
these  handlers,  is  activated  after  any  character  is 
modified within the text field.
auto-correct 
Fig.  4.4. Interactions among Cashtags, TextView, and 
other  software  components.  getText()  returns  either 
the  cashtag  or  actual  text  depending  upon  the  service 
making the request.
Fig.    4.5. Interactions  among  Cashtags,  EditText, 
and  other  software  components.  setText()  returns 
either  the  cashtag  or  actual  text  depending  upon  the 
service making the request.
This  functionality  is  also  achieved  through  the  view 
OnFocusChangeListener
(android.view.OnFocusChangeListener).  
This  event  handler  works  at  the  granularity  of  the  full 
text  field  rather  than  the  individual  characters of  the 
TextWatcher.  This  is  more  efficient,  since the  text 
replacement  only  occurs  once  per  text  field.  It  does, 
however, risk additional on-screen exposure of sensitive 
information, since direct input of actual sensitive terms 
would remain on-screen as long as the cursor remains in 
that text field.  The input of the cashtag alias does not 
have this risk and further reduces any partial exposure 
during term input. 
In both cases, the constructor of the EditText class is 
hooked 
corresponding 
the 
OnFocusChangeListener
or  TextWatcher
object  is  attached at runtime.    User  settings  allow 
activation of either or both interception methods.
and 
968  24th USENIX Security Symposium 
USENIX Association
engines  with 
implementation  for  OpenGLES
4.6 OpenGLES Canvas
Canvas is 
The 
similar  to  the  base  TextView only  with  different 
parameter  types.  The  only  distinction  is  that  no 
accompanying getText() equivalent is present in this 
object,  so  no  manipulation 
is  necessary  beyond 
drawText().
4.7 WebView
Unlike the  previous  screen  widgets,
the  relevant 
interception  points  for  screen  rendering  for  WebKit  or 
Chromium browser engines are all below the accessible 
Android/Java layer. Thus, they cannot be code-injected 
through the same mechanisms used for previous screen 
widget cases.  We attempted custom compilations of the 
browser 
similar  widget  display 
interception,  but  abandoned  the  effort  for  portability 
concerns.
Instead, WebView interception is handled similarly to a 
web  browser  plug-in. This  decision  maintains  the 
portability goal of the system design. 
Cashtags intercepts web rendering immediately before it 
is first displayed on-screen. The HTML is pre-processed
with  JavaScript  to  extract  the  DOM.  Cashtags  iterates 
over  the  text  nodes  and  makes  the  appropriate  text 
replacements  of  sensitive  data 
to  corresponding 
cashtags.
Other options were explored using specific browser and 
proxy  requests  through  the  web  server.  However,  all 
apps  that  use  cross-platform  frameworks  (PhoneGap, 
Apache Cordova, JQuery Mobile, etc.) run locally and
could not easily be piped though this service.  For this 
reason,  we  favored  the  plug-in  approach over  other 
alternatives.
4.8 Cashtags repository
are 
Sensitive 
encrypted 
SharedPreference key/value pairs, which uses the 
AES 
Java  Cryptography 
Architecture  (javax.crypto.*).  This  structure  is 
accessed 
the 
XposedSharedPreference interface.  
5. Evaluation Methods
Cashtags  was evaluated  for  how  well the  intercepted 
points  prevent
from  being 
displayed on the screen, verified by screen captures and 
OCR  processing.    This  coverage  was measured  by
enumerating  common  paths sensitive  text  can  traverse 
to  the  screen.    We  also  evaluated  user  input  through 
popular apps, making sure that the cashtags reverted to 
information 
specified 
through 
encryption 
from 
the 
stored 
as 
terms 
by 
enabled 
apps 
  The 
access. 
selected 
the  sensitive  data  items  when  accessed  by  the  apps.  
Finally,  we  evaluated  the  performance  overhead  of 
Cashtags.
5.1 API coverage evaluation
For Android API coverage, we focus on the TextView
and EditText display  data  paths,  which  account  for 
86%  of  usage  hours  for  mobile  devices  [56],  though 
Cashtags  can  also  handle  the  remaining  14%  of 
browser-based 
sensitive 
information  (Table  2)  is  based  on  the  Personally 
Identifiable  Information  (PII)  specified  by  the  U.S. 
government  and  NIST  standards  [59].    We  enumerate 
all combinations of the input phrase type (e.g., numbers, 
strings),  case  sensitivity,  common  widget, 
layout, 
theme,  and  lifecycle  for  these  data  paths.    Each 
combination  is  used  to  demonstrate  that  the  PII  terms 
are  not  displayed  on  the  screen  from  the  app,  as  user 
input  of  the  sensitive  data,  or  as  user  input  of  the 
cashtag  alias.  In  all  three  cases,  we  also  demonstrate 
that  the  PII  term  is  correctly  returned  from  Cashtags 
when used by the app.
This  totals  1,728  tests  for  the  static  text  widgets  and 
inputs, with 526 additional cases for widgets that permit 
user  input  via  software  keyboards  as  well  as  physical 
devices  (on-board  hardware,  USB, or  wireless  input 
devices). Table 5.1 shows the full list of configurations.
For each combination, the Android Debug Bridge [60] 
and UIautomator tool [36] are used to capture the device 