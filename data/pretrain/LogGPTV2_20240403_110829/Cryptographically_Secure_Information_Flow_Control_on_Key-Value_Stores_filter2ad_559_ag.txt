the system (provided the real semantics was shown separately to
provide CTA security and security against leveraged forgery).
There is also work on strengthening the guarantees of existing
cryptosystems to protect against more powerful adversaries, e.g.,
Chosen Ciphertext Attack (CCA) [43] security for adversaries that
can observe decryptions of arbitrary ciphertexts. CCA security
is needed in systems where an adversary can observe (some of)
the effects of decrypting arbitrary ciphertexts. In contrast, Clio’s
security guarantees are based on a very precise definition of the
adversary’s power over the system. In particular it captures that
an adversary cannot observe anything about the decryptions of
confidential values due to IFC mechanisms, since the results of such
a decryption would be protected by a label that is more confidential
than an adversary would have access to. As a result, Clio requires
only a CPA secure cryptosystem to be CTA secure.
Systems. DStar [65] extends decentralized IFC in a distributed
system. Every DStar node has an exporter that is responsible for
communicating over the network. Exporters also establish the secu-
rity categories trusted by a node via private/public keys. Fabric [34]
is a platform and statically-checked fine-grained IFC language. Fab-
ric supports the secure transfer of data as well as code [2] through,
in part, the use of cryptographic mechanisms. In contrast to Fabric,
Clio provides coarse-grained IFC and uses DC labels instead of the
DLM. In contrast to both DStar and Fabric, this work establishes a
formal basis for security of the use of cryptography in the system.
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1905The lack of a formal proof in both DStar and Fabric is not surprising,
given that they target more ambitious and complex scenarios (i.e.,
decentralized information-flow control for distributed systems).
Remote storage. While data can be stored and fetched crypto-
graphically, information can be still leaked through access patterns.
Private Information Retrieval protocols aim to avoid such leaks by
hiding queries and answers from a potentially malicious server [16]
similar to Clio’s threat model. For performance reasons [42, 50],
some approaches rely on a small trusted execution environment
provided by hardware [20, 58] that provides the cryptographic sup-
port needed to obliviously query the data store [9, 52, 62]. This
technique can be seen in oblivious computing [35], online advertis-
ing [11], and credit networks [38] for clients which are benign or
follow an strict access protocol. If clients are malicious, however,
attacker’s code may leak information though access patterns. We
force communication with the store to occur in non-sensitive con-
tests. In addition, our language-based techniques could be extended
to require untrusted code to follow an oblivious protocol.
8 Conclusion
Clio is a computationally secure coarse-grained dynamic information-
flow control library that uses cryptography to protect the confiden-
tiality and integrity of data. The use of cryptography is hidden from
the language operations and is controlled instead through familiar
language constructs in an existing IFC library, LIO. Further, we
present a novel proof technique that combines standard program-
ming language and cryptographic proof techniques to show the
interaction between the high-level security guarantees provided
by information flow control and the low-level guarantees offered
by the cryptographic mechanisms are secure. We also provide a
prototype Clio implementation in the form of a Haskell library
extending LIO to evaluate its practicality. We see Clio as a way for
programmers that are non-expert cryptographers to use cryptogra-
phy securely.
Acknowledgments
This material is based upon work supported by the National Science
Foundation under Grant No.s 1421770 and 1524052. Any opinions,
findings, and conclusions or recommendations expressed in this
material are those of the authors and do not necessarily reflect the
views of the National Science Foundation. This research is also
supported by the Air Force Research Laboratory and the Swedish
research agencies VR and STINT.
References
[1] Ross Anderson and Roger Needham. 1995. Robustness Principles for Public Key
Protocols. In Annual International Cryptology Conference. 236–247.
[2] Owen Arden, Michael D. George, Jed Liu, K. Vikram, Aslan Askarov, and An-
drew C. Myers. 2012. Sharing Mobile Code Securely with Information Flow
Control. In Proceedings of the 2012 IEEE Symposium on Security and Privacy.
191–205.
[3] Owen Arden, Jed Liu, and Andrew C. Myers. 2015. Flow-Limited Authorization. In
Proceedings of the IEEE 28th Computer Security Foundations Symposium. 569–583.
[4] Aslan Askarov and Stephen Chong. 2012. Learning is Change in Knowledge:
Knowledge-based Security for Dynamic Policies. In Proceedings of the IEEE Com-
puter Security Foundations Symposium.
[5] Aslan Askarov, Daniel Hedin, and Andrei Sabelfeld. 2006. Cryptographically-
Masked Flows. In Proceedings of the 13th International Static Analysis Symposium.
[6] Aslan Askarov, Sebastian Hunt, Andrei Sabelfeld, and David Sands. 2008.
Termination-Insensitive Noninterference Leaks More Than Just a Bit. In Proceed-
ings of the 13th European Symposium on Research in Computer Security: Computer
Security.
[7] Aslan Askarov and Andrei Sabelfeld. 2007. Gradual Release: Unifying Declassifi-
cation, Encryption and Key Release Policies. In Proceedings of the IEEE Symposium
on Security and Privacy. 207–221.
[8] Aslan Askarov, Danfeng Zhang, and Andrew C. Myers. 2010. Predictive black-
box mitigation of timing channels. In Proceedings of the 17th ACM Conference on
Computer and Communications Security.
[9] D. Asonov. 2005. Querying Databases Privately: A New Approach to Private
Information Retrieval. Springer.
[10] Michael Backes, Dennis Hofheinz, and Dominique Unruh. 2009. CoSP: A General
Framework for Computational Soundness Proofs. In Proceedings of the 16th ACM
Conference on Computer and Communications Security. 66–78.
[11] Michael Backes, Aniket Kate, Matteo Maffei, and Kim Pecina. 2012. ObliviAd:
Provably Secure and Practical Online Behavioral Advertising. In Proceedings of
the 2012 IEEE Symposium on Security and Privacy.
[12] John Bethencourt, Amit Sahai, and Brent Waters. 2007. Ciphertext-policy
attribute-based encryption. In Proc. of the 2007 IEEE Symposium on Security
and Privacy. 321–334.
[13] Niklas Broberg and David Sands. 2010. Paralocks: Role-based Information Flow
Control and Beyond. In Proceedings of the ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages.
[14] Winnie Cheng, Dan R.K. Ports, David Schultz, Victoria Popic, Aaron Blankstein,
James Cowling, Dorothy Curtis, Liuba Shrira, and Barbara Liskov. 2012. Abstrac-
tions for Usable Information Flow Control in Aeolus. In Proceedings of the 2012
USENIX Annual Technical Conference. 139–151.
[15] Stephen Chong and Andrew C. Myers. 2006. Decentralized Robustness. In Pro-
ceedings of the 19th IEEE Workshop on Computer Security Foundations. 242–256.
[16] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. 1995. Private Information Re-
trieval. In Proceedings of the 36th Annual Symposium on Foundations of Computer
Science.
[17] Tom Chothia, Dominic Duggan, and Jan Vitek. 2003. Type-Based Distributed
Access Control. In Proceedings of the 16th IEEE Computer Security Foundations
Workshop. 170–186.
[18] Willem De Groef, Dominique Devriese, Nick Nikiforakis, and Frank Piessens.
2012. FlowFox: a web browser with flexible and precise information flow control.
In Proceedings of the 2012 ACM Conference on Computer and communications
security.
[19] Tim Dierks. 2008. The Transport Layer Security (TLS) Protocol Version 1.2. RFC
5246. (2008). https://rfc-editor.org/rfc/rfc5246.txt
[20] Xuhua Ding, Yanjiang Yang, Robert H. Deng, and Shuhong Wang. 2010. A new
hardware-assisted PIR with O(n) shuffle cost. International Journal of Information
Security 9, 4 (2010).
[21] Cédric Fournet and Tamara Rezk. 2008. Cryptographically Sound Implementa-
tions for Typed Information-flow Security. In Proceedings of the 35th Annual ACM
SIGPLAN-SIGACT Symposium on Principles of Programming Languages. 323–335.
[22] Ivan Gazeau, Tom Chothia, and Dominic Duggan. 2017. Types for Location and
Data Security in Cloud Environments. In Proceedings of the IEEE Computer Sec.
Foundations Symposium.
[23] Daniel B. Giffin, Amit Levy, Deian Stefan, David Terei, David Mazières, John
Mitchell, and Alejandro Russo. 2012. Hails: Protecting Data Privacy in Untrusted
Web Applications. In Proceedings of the Symposium on Operating Systems Design
and Implementation.
[24] J. A. Goguen and J. Meseguer. 1982. Security Policies and Security Models. In
Proceedings of the IEEE Symposium on Security and Privacy. 11–20.
[25] Shafi Goldwasser and Mihir Bellare. 2001. Lecture Notes on Cryptography. Chap-
ter 10.
[26] Shafi Goldwasser and Silvio Micali. 1982. Probabilistic Encryption & How to
Play Mental Poker Keeping Secret All Partial Information. In Proceedings of the
14th Annual ACM Symposium on Theory of Computing. 365–377.
[27] Vincent Hanquez. 2017. The cryptonite library. http://hackage.haskell.org/
package/cryptonite. (2017).
[28] Daniel Hedin, Arnar Birgisson, Luciano Bello, and Andrei Sabelfeld. 2014. JSFlow:
Tracking information flow in JavaScript and its APIs. In Proceedings of the 29th
ACM Symposium on Applied Computing.
[29] Redis Labs. 2015. Redis. http://redis.io/. (2015).
[30] Peeter Laud. 2001. Semantics and Program Analysis of Computationally Secure
Information Flow. In Proceedings of the 10th European Symposium on Programming
Languages and Systems.
[31] Peeter Laud. 2008. On the Computational Soundness of Cryptographically
Masked Flows. In Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Sympo-
sium on Principles of Programming Languages. 337–348.
[32] Peng Li, Yun Mao, and Steve Zdancewic. 2003. Information integrity policies. In
Proceedings of the Workshop on Formal Aspects in Security and Trust.
[33] Jed Liu, Michael D. George, K. Vikram, Xin Qi, Lucas Waye, and Andrew C. Myers.
2009. Fabric: A Platform for Secure Distributed Computation and Storage. In
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1906Proceedings of the ACM SIGOPS Symposium on Operating Systems Principles.
[34] Jed Liu, Michael D. George, K. Vikram, Xin Qi, Lucas Waye, and Andrew C. Myers.
2009. Fabric: A Platform for Secure Distributed Computation and Storage. In
Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles.
321–334.
[35] Martin Maas, Eric Love, Emil Stefanov, Mohit Tiwari, Elaine Shi, Krste Asanovic,
John Kubiatowicz, and Dawn Song. 2013. PHANTOM: Practical Oblivious Com-
putation in a Secure Processor. In Proceedings of the ACM SIGSAC Conference on
Computer & Communications Security.
[36] John McLean. 1990. Security Models and Information Flow. In Proceedings of the
IEEE Symposium On Security And Privacy. 180–187.
[37] Michael Mimoso. 2015. D-Link Accidentally Leaks Private Code-Signing Keys.
https://threatpost.com/d-link-accidentally-leaks-private-code-signing-keys/
114727/. (Sept. 2015).
[38] Pedro Moreno-Sanchez, Aniket Kate, Matteo Maffei, and Kim Pecina. 2015. Pri-
vacy Preserving Payments in Credit Networks: Enabling trust with privacy in
online marketplaces. In Proceedings of the Network and Distributed System Security
Symposium.
[39] Andrew C. Myers and Barbara Liskov. 1998. Complete, Safe Information Flow
with Decentralized Labels.. In Proceedings of the IEEE Symposium on Security and
Privacy.
[40] Andrew C. Myers, Andrei Sabelfeld, and Steve Zdancewic. 2006. Enforcing Robust
Declassification and Qualified Robustness. Journal of Computer Security 14, 2
(April 2006), 157–196.
[41] A. C. Myers, L. Zheng, S. Zdancewic, S. Chong, and N. Nystrom. 2001–. Jif: Java
Information Flow. (2001–). Software release. http://www.cs.cornell.edu/jif.
[42] Femi G. Olumofin and Ian Goldberg. 2011. Revisiting the Computational Practi-
cality of Private Information Retrieval. In Proceedings of the 15th International
Conference on Financial Cryptography and Data Security.
[43] Rafael Pass and Abhi Shelat. 2010. A Course in Cryptography (3rd ed.). Chapter 7.
[44] Falko Peters. 2017. The hedis library. http://hackage.haskell.org/package/hedis.
[45] Ronald L Rivest, Adi Shamir, and Yael Tauman. 2006. How to leak a secret: Theory
and applications of ring signatures. In Theoretical Computer Science. 164–186.
[46] Indrajit Roy, Donald E. Porter, Michael D. Bond, Kathryn S. McKinley, and Em-
mett Witchel. 2009. Laminar: Practical Fine-grained Decentralized Information
Flow Control. In Proceedings of the ACM SIGPLAN Conference on Programming
Language Design and Implementation.
[47] Alejandro Russo. 2015. Functional Pearl: Two Can Keep a Secret, if One of Them
Uses Haskell. In Proceedings of the 20th ACM SIGPLAN International Conference
on Functional Programming. 280–288.
(2017).
[48] Rafia Shaikh. 2015.
User Data at Risk of Man-in-the-Middle Attacks.
microsoft-accidentally-leaks-xbox-live-keys/. (Dec. 2015).
[49] V. Simonet. 2003. The Flow Caml System. (July 2003).
http://cristal.inria.fr/~simonet/soft/flowcaml/.
Microsoft Accidentally Leaks Xbox Live Keys,
http://wccftech.com/
Software release at
[50] Radu Sion and Bogdan Carbunar. 2007. On the Computational Practicality of Pri-
vate Information Retrieval. In Proceedings of the Network and Distributed Systems
Security Symposium. Stony Brook Network Security and Applied Cryptography Lab
Tech Report.
[51] Geoffrey Smith and Rafael Alpízar. 2006. Secure Information Flow with Random
Assignment and Encryption. In Proceedings of the 4th ACM Workshop on Formal
Methods in Security. 33–44.
[52] S. W. Smith and D. Safford. 2001. Practical Server Privacy with Secure Coproces-
sors. IBM Systems Journal 40, 3 (March 2001).
[53] Deian Stefan, Alejandro Russo, David Mazières, and John C. Mitchell. 2011.
Disjunction Category Labels. In Proceedings of the 16th Nordic Conference on
Security IT Systems. 223–239.
[54] Deian Stefan, Alejandro Russo, John C. Mitchell, and David Mazières. 2011.
Flexible Dynamic Information Flow Control in Haskell. In Proceedings of the 4th
ACM symposium on Haskell. 95–106.
[55] Deian Stefan, Edward Z. Yang, Petr Marchenko, Alejandro Russo, Dave Herman,
Brad Karp, and David Mazières. 2014. Protecting Users by Confining JavaScript
with COWL. In Proceedings of the 11th Symposium on Operating Systems Design
and Implementation.
[56] Jeffrey A. Vaughan and Steve Zdancewic. 2007. A Cryptographic Decentralized
Label Model. In Proceedings of the 2007 IEEE Symposium on Security and Privacy.
192–206.
[57] Veracode. 2015. State of Software Security. Vol. 6.
[58] Shuhong Wang, Xuhua Ding, Robert H. Deng, and Feng Bao. 2006. Private Infor-
mation Retrieval Using Trusted Hardware. In Proceedings of the 11th European
Symposium on Research in Computer Security. 49–64.
[59] Lucas Waye, Pablo Buiras, Owen Arden, Alejandro Russo, and Stephen Chong.
2017. Cryptographically Secure Information Flow Control on Key-Value Stores.
ArXiv e-prints (Aug. 2017). arXiv:1708.08895
[60] Lucas Waye, Pablo Buiras, Dan King, Stephen Chong, and Alejandro Russo. 2015.
It’s My Privilege: Controlling Downgrading in DC-Labels. In Proceedings of the
11th International Workshop on Security and Trust Management.
[61] Alma Whitten and J. D. Tygar. 1999. Why Johnny Can’t Encrypt: A Usability
Evaluation of PGP 5.0. In Proceedings of the 8th Conference on USENIX Security
Symposium.
[62] Peter Williams and Radu Sion. 2008. Usable PIR. In Proceedings of the Network
and Distributed System Security Symposium.
[63] Alexander Yip, Neha Narula, Maxwell Krohn, and Robert Morris. 2009. Privacy-
preserving browser-side scripting with BFlow. In EuroSys.
[64] Steve Zdancewic and Andrew C. Myers. 2001. Robust Declassification. In Pro-
ceedings of the 14th IEEE Computer Security Foundations Workshop. 15–23.
[65] Nickolai Zeldovich, Silas Boyd-Wickizer, and David Mazières. 2008. Securing
Distributed Systems with Information Flow Control. In Proceedings of the 5th
USENIX Symposium on Networked Systems Design and Implementation. 293–308.
[66] Lantian Zheng and Andrew C. Myers. 2005. End-to-End Availability Policies and
Noninterference. In Proceedings of the 18th IEEE Computer Security Foundations
Workshop. 272–286.
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1907