When using the following code in an Android application:

```java
Glide.with(mContext).load(mUrl).placeholder(R.drawable.placeholder).crossFade().into(mViewHolder.getImageView());
```

you may encounter an issue where the image appears smaller than the `ImageView`, even though you have set the `scaleType` of the `ImageView` to `fitXY`.

To ensure that the image fills the `ImageView` properly, you can explicitly set the `scaleType` of the `ImageView` in your layout XML or programmatically. Hereâ€™s how you can do it:

### In XML:
```xml
<ImageView
    android:id="@+id/imageView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:scaleType="fitXY" />
```

### Programmatically:
```java
mViewHolder.getImageView().setScaleType(ImageView.ScaleType.FIT_XY);
```

Additionally, if the issue persists, you might want to check the following:

1. **Image Dimensions**: Ensure that the image dimensions are appropriate for the `ImageView` size.
2. **Layout Constraints**: Verify that the `ImageView` is not constrained by its parent layout in a way that affects its size.
3. **Glide Configuration**: Consider adding additional options to Glide to handle the image scaling, such as:

```java
Glide.with(mContext)
     .load(mUrl)
     .placeholder(R.drawable.placeholder)
     .override(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL) // Load the image at its original size
     .centerCrop() // Crop the image to fit the ImageView
     .crossFade()
     .into(mViewHolder.getImageView());
```

By setting the `scaleType` and ensuring the image is loaded and scaled correctly, you should be able to resolve the issue of the image appearing smaller than the `ImageView`.