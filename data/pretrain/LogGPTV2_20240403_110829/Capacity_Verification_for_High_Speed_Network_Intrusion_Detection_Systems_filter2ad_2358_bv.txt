was caused by udp packets, the mi value of udp increased a lot and so did the
“weights” (time requirements) of their analysis tasks (see Problem (5)). The re-
conﬁguration ended up dropping all tasks for udp and hence the ﬁlter for picking
up udp traﬃc. Similarly, for Adaptive Snort, when the system is overloaded, it
performs a quick reconﬁguration (disabling udp rules and packet ﬁlter) to avoid
further packet drops.
We also experimented with the same overload attacks described in Section 2.4
against Adaptive Bro and Adaptive Snort. The systems detected the WEB-IIS
CMD.EXE exploits more than 90% of time (19 out of 20) for Bro and 100% of
the time for Snort (20 out of 20).
An important consideration when employing performance monitoring and dy-
namic reconﬁguration mechanisms is their overheads. We used micro-benchmark
experiments to compute these overheads. As for Adaptive Bro, at each “heart
beat” (1 second in our experiment), on average 0.0002 seconds are spent on com-
puting the numbers of packets received and drops, the mean inter-event arrival
time, and the mean event service time, the overhead is thus .02%. We believe
the overhead is acceptable. Changing ﬁlters (using pre-compiled ﬁlters) takes
only an average of 0.00005 seconds each time, which is very fast. Running the
270
W. Lee et al.
Knapsack algorithm takes an average of 0.0002 seconds each time. As for Adap-
tive Snort, the “heart beat” function (which is a timer function invoked every
1 second), takes 0.00005 seconds. The corresponding overhead is thus 0.005%.
Running the Knapsack algorithm takes approximately 0.0002 seconds. The ﬁl-
ter change (using pre-compiled ﬁlters) takes an average of 0.00005 seconds. We
believe the overheads are acceptable in both systems.
4 Related Work
The problems of real-time network-based IDSs being evaded (e.g. with “ambigu-
ous” packets), overloaded, and crashed were ﬁrst discussed in [25,23]. Evasion
can be prevented if an IDS uses stateful analysis and a network traﬃc normal-
izer [12]. Although high-end hardware platforms can be used for data capturing
to ensure “no packet ﬁlter drops” [23], an IDS, with the often site-speciﬁc ID
logics implemented as application-level software, can still be overloaded due to
high volume ﬁltered events. Paxson suggested that load-shedding may help a
real-time IDS defend against overload attacks [23]. Several enterprise-wide and
Internet-wide distributed IDSs [24,35] and agent-based architectures [4,11] have
been proposed to address the issues of detection coverage and workload distribu-
tion. For example, in EMERALD [24], ID modules are deployed and conﬁgured
in a hierarchical fashion according to the enterprise network topology. More re-
cently, Kruegel et al. proposed a partitioning approach for intrusion detection
in high speed network environments [14]. Compared with simple load-balancing,
this approach is to partition the traﬃc meaningfully to a distributed set of sen-
sors each equipped with a set of detection rules. Even with this distributed
approach it is noted that the system is vulnerable if the conﬁguration for split-
ting is static, resulting in some of the sensors being overloaded. Therefore some
adaptive approach has to be incorporated. Our research complements these re-
search eﬀorts because performance monitoring and performance adaptation via
dynamic reconﬁguration are the necessary techniques for an IDS to adaptively
resist attacks. It is often more appropriate to evaluate an IDS using the damages
(costs) it has prevented [10,15]. We use cost-beneﬁt analysis to determine the
best IDS conﬁgurations given the resource constraints.
Operating systems also need load-shedding techniques (e.g., [7,20]) to support
real-time and multimedia applications. Performance monitoring and Quality-of-
Service adaptation approaches have been studied in other domains, e.g., network
servers (e.g., [1]), and middleware (e.g., [16]). We can learn from these studies
and design techniques for monitoring IDS performance and shedding workload
to satisfy the real-time requirements of high priority detection tasks. Although
load-balancing is typically used in a diﬀerent context than load-shedding, we can
still learn from the research in this classical problem. For example, in addition to
measuring resource utilization, it is necessary to test the application response in
order to determine the “meaningful” system load. In our approach, the manager
tests the IDS response time using a simulated attack. We can also learn from
Performance Adaptation in Real-Time Intrusion Detection Systems
271
the vast amount of research in dynamic real-time system scheduling (e.g., [32,
17]), and develop techniques to optimize real-time IDSs.
Attack tree analysis [29] is an oﬀ-line process. We are interested in recogniz-
ing run-time scenarios and predicting likely forthcoming attacks. Similar to the
activity graphs in GrIDS [31,6], we use a scenario graph and network topology
to detect scenarios.
5 Conclusion
Providing performance guarantee (assurance) should be the key requirement of
IDSs, and security products in general. In this paper, we provided an analysis
of IDS performance metrics and constraints, and argued that an IDS should
provide the best value under operational constraints. This is essentially an opti-
mization problem. We showed that a statically conﬁgured IDS can be overloaded
by adversaries to a point that it will miss the intended attacks with high prob-
ability. We argued that an IDS should at least achieve a weaker goal: providing
performance adaptation, i.e., providing the best possible performance for the
given operation environment. We discussed that in order to enable performance
adaptation in real-time IDS, performance monitoring and reconﬁguration mech-
anisms are needed. We described prototype adaptive IDSs based on Bro and
Snort. Results from experiments thus far validate our motivation and approach.
As for future work, we will be conducting more extensive and realistic exper-
iments. We will reﬁne the performance monitoring and adaptation mechanisms,
focusing on lowering the overheads and making them not only customizable but
also dynamically conﬁgurable.
Although we were able to add performance adaptation mechanisms to Bro
and Snort, it was not without conceptual and architectural diﬃculties. We thus
plan to follow our formal framework to design and implement an adaptive real-
time IDS with built-in performance monitoring and dynamic optimization capa-
bilities.
Acknowledgments. This research is supported in part by grants from DARPA
(F30602-00-1-0603). We wish to thank Vern Paxson of ICSI/LBNL for help on
Bro, and Lee Rossey and Richard Lippmann of MIT Lincoln Lab for help on
LARIAT.
References
1. T. F. Abdelzaher, K. G. Shin, and N. Bhatti. Performance guarantees for web
server end-systems: A control-theoretical approach. IEEE Transactions on Parallel
and Distributed Systems, 2001. to appear.
2. S. Axelsson. The base-rate fallacy and the diﬃculty of intrusion detection. ACM
Transactions on Information and System Security, 3(3), 2000.
3. R. Bace. Intrusion Detection. Macmillan Technical Publishing, 2000.
272
W. Lee et al.
4. J. S. Balasubramaniyan, J. O. Garcia-Fernandez, D. Isacoﬀ, E. Spaﬀord, and
D. Zamboni. An architecture for intrusion detection using autonomous agents.
Technical report, COAST Laboratory, Department of Computer Science, Purdue
University, West Lafayette, IN, 1998.
5. J.B.D. Cabrera, W. Lee, R. K. Prasanth, L. Lewis, and R. K. Mehra. Optimization
and control problems in real time intrusion detection. submitted for publication,
March 2002.
6. S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland, K. Levitt, J. Rowe,
S. Staniford-Chen, R. Yip, and D. Zerkle. The design of GrIDS: A graph-based
intrusion detection system. Technical Report CSE-99-2, U.C. Davis Computer
Science Department, Davis, CA, 1999.
7. C. L. Compton and D. L. Tennenhouse. Collaborative load shedding for media-
In International Conference on Multimedia Computing and
based applications.
Systems, Boston, MA, May 1994.
8. D. Contis, W. Lee, D. E. Schimmel, W. Shi, A. Thomas, Y. Zhang, Jun Li, and
C. Clark. A prototype programmable network processor based ids. submitted for
publication, March 2002.
9. D. Denning. Information Warfare and Security. Addison Wesley, 1999.
10. J.E. Gaﬀney and J. W. Ulvila. Evaluation of intrusion detectors: A decision theory
approach. In Proceedings of the 2001 IEEE Symposium on Security and Privacy,
May 2001.
11. R. Gopalakrishna and E. H. Spaﬀord. A framework for distributed intrusion detec-
tion using interest driven cooperating agents. In The 4th International Symposium
on Recent Advances in Intrusion Detection (RAID 2001), October 2001.
12. M. Handley, C. Kreibich, and V. Paxson. Network intrusion detection: Evasion,
traﬃc normalization, and end-to-end protocol semantics. In Proceedings of the 10th
USENIX Security Symposium, August 2001.
13. L. Kleinrock. Queuing Systems, Vol. 1: Theory. John Wiley & Sons, Inc., 1975.
14. C. Kruegel, F. Valeur, G. Vigna, and R. A. Kemmerer. Stateful intrusion detection
for high-speed networks. In Proceedings of 2002 IEEE Symposium on Security and
Privacy, May 2002.
15. W. Lee, W. Fan, M. Miller, S. J. Stolfo, and E. Zadok. Toward cost-sensitive
modeling for intrusion detection and response. Journal of Computer Security,
2001. to appear.
16. L. Liu, C. Pu, K. Schwan, and J. Walpole. Infoﬁlter: Supporting quality of service
for fresh information delivery. New Generation Computing Journal, 18(4), August
2000.
17. C. Lu, J. A. Stankovic, T. F. Abdelzaher, G. Tao, S. H. Son, and M. Marley. Per-
formance speciﬁcations and metrics for adaptive real-time systems. In Proceedings
of the IEEE Real-Time Systems Symposium, December 2000.
18. S. Martello and P. Toth. Knapsack Problems: Algorithms and Computer Imple-
mentations. John Wiley & Sons Ltd., 1990.
19. S. McCanne, C. Leres, and V. Jacobson. libpcap. available via anonymous ftp to
ftp.ee.lbl.gov, 1994.
20. J. Nieh and M. S. Lam. The design, implementation and evaluation of SMART:
A scheduler for multimedia applications. In Proceedings of the Sixteen ACM Sym-
posium on Operating Systems Principles, October 1997.
21. S. Northcutt. Intrusion Detection: An Analyst’s Handbook. New Riders, 1999.
22. C. H. Papadimitriou and K. Steiglitz. Combinatorial Optimization - Algorithms
and Complexity. Prentice-Hall, Inc., 1982.
Performance Adaptation in Real-Time Intrusion Detection Systems
273
23. V. Paxson. Bro: A system for detecting network intruders in real-time. Computer
Networks, 31(23-24), December 1999.
24. P. A. Porras and P. G. Neumann. EMERALD: Event monitoring enabling re-
sponses to anomalous live disturbances. In National Information Systems Security
Conference, Baltimore MD, October 1997.
25. T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding
network intrusion detection. Technical report, Secure Networks Inc., January 1998.
http://www.aciri.org/vern/Ptacek-Newsham-Evasion-98.ps.
26. N. Puketza, K. Zhang, M. Chung, B. Mukherjee, and R. Olsson. A methodology for
testing intrusion detection systems. IEEE Transactions on Software Engineering,
22(10), October 1996.
27. M. Roesch. Snort - lightweight intrusion detection for networks.
In Proceed-
ings of the USENIX LISA Conference, November 1999. Snort is available at
http://www.snort.org.
28. L. M. Rossey, R. K. Cunningham, D. J. Fried, J. C. Rabek, R. P. Lippmann,
and J. W. Haines. LARIAT: Lincoln adaptable real-time information assurance
In The 4th International Symposium on Recent Advances in Intrusion
testbed.
Detection (RAID 2001), October 2001.
29. B. Schneier. Secrets & Lies: Digital Security in a Networked World. John Wiley
& Sons, Inc., 2000.
30. G. Shipley and P. Mueller. Dragon claws its way to the top. In Network Computing.
TechWeb, August 2001.
31. S. Staniford-Chen, S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland,
K. Levitt, C. Wee, R. Yip, and D. Zerkle. GrIDS-a graph based intrusion detection
system for large networks. In Proceedings of the 19th National Information Systems
Security Conference, 1996.
32. J. A. Stankovic, C. Lu, S. H. Son, and G. Tao. The case for feedback control
real-time scheduling. In Proceedings of the EuroMicro Conference on Real-Time
Systems, June 1999.
33. SunSoft. SunSHIELD Basic Security Module Guide. SunSoft, Mountain View, CA,
1995.
34. Top Layer Networks and Internet Security Systems. Gigabit Ethernet intrusion
detection solutions: Internet security systems RealSecure network sensors and top
layer networks AS3502 gigabit AppSwitch performance test results and conﬁgura-
tion notes. White Paper, July 2000.
35. G. Vigna, R. A. Kemmerer, and P. Blix. Designing a web of highly-conﬁgurable
intrusion detection sensors. In Proceedings of the 4th International Symposium on
Recent Advances in Intrusion Detection (RAID 2001), October 2001.
Accurate Buﬀer Overﬂow Detection via
Abstract Payload Execution
Thomas Toth and Christopher Kruegel
Distributed Systems Group
Technical University Vienna
Argentinierstrasse 8, A-1040 Vienna, Austria
{ttoth, chris}@infosys.tuwien.ac.at
Abstract. Static buﬀer overﬂow exploits belong to the most feared and
frequently launched attacks on todays Internet. These exploits target
vulnerabilities in daemon processes which provide important network
services. Ever since the buﬀer overﬂow hacking technique has reached a
broader audience due to the Morris Internet worm [21] in 1988 and the
infamous paper by AlephOne in the phrack magazine [1], new weaknesses
in many programs have been discovered and abused.
Current intrusion detection systems (IDS) address this problem in dif-
ferent ways. Misuse based network IDS attempt to detect the signature
of known exploits in the payload of the network packets. This can be
easily evaded by a skilled intruder as the attack code can be changed,
reordered or even partially encrypted. Anomaly based network sensors
neglect the packet payload and only analyze bursts of traﬃc thus missing
buﬀer overﬂows altogether. Host based anomaly detectors that monitor
process behavior can notice a successful exploit but only a-posteriori
when it has already been successful. In addition, both anomaly variants
suﬀer from high false positive rates.
In this paper we present an approach that accurately detects buﬀer over-
ﬂow code in the request’s payload by concentrating on the sledge of the
attack. The sledge is used to increase the chances of a successful intrusion
by providing a long code segment that simply moves the program counter
towards the immediately following exploit code. Although the intruder
has some freedom in shaping the sledge it has to be executable by the
processor. We perform abstract execution of the payload to identify such
sequences of executable code with virtually no false positives.
A prototype implementation of our sensor has been integrated into the
Apache web server. We have evaluated the eﬀectivity of our system on
several exploits as well as the performance impact on services.
Keywords: Intrusion Detecion, Buﬀer Overﬂow Exploit, Network Secu-
rity
This work has been supported by the FWF (Fonds zur F¨orderung der wis-
senschaftlichen Forschung), under contract number P13731-MAT. The views ex-
pressed in this article are those of the authors and do not necessarily reﬂect the
opinions and positions of the FWF.
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 274–291, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
275
1 Introduction
The constant increase of attacks against networks and their resources causes
a necessity to protect these valuable assets. Although well-conﬁgured ﬁrewalls
provide good protection against many attacks, some services (like HTTP or DNS)
have to be publicly available. In such cases a ﬁrewall has to allow incoming
traﬃc from the Internet without restrictions. The programs implementing these
services are often complex and old pieces of software. This inevitably leads to the
existence of programming bugs. Skilled intruders exploit such vulnerabilities by
sending packets with carefully crafted content that overﬂow a static buﬀer in the
victim process. This allows the intruder to alter the execution ﬂow of the service
daemon and to execute arbitrary code that he can inject, eventually leading to
a system compromise and elevating the privileges of the attacker to the ones of
the service process. Such an attack is called a buﬀer overﬂow exploit. Recent
studies [19] have indicated that these attacks contribute to a large number of
system compromises as many daemons run with root privileges.
Intrusion detection systems (IDS) are security tools that are used to detect
traces of malicious activities which are targeted against the network and its re-
sources. IDS are traditionally classiﬁed as anomaly or signature based. Signature
based systems like Snort [18] or NetSTAT [23,24] act similar to virus scanners
and look for known, suspicious patterns in their input data. Anomaly based
systems watch for deviations of actual from expected behavior and classify all
‘abnormal’ activities as malicious.
As signature based designs compare their input to known, hostile scenarios
they have the advantage of raising virtually no false alarms (i.e. classifying an
action as malicious when in fact it is not). For the same reason, they have the
signiﬁcant drawback of failing to detect variations of known attacks or entirely
new intrusions.
Because of the ability to detect previously unknown intrusions a number of
diﬀerent anomaly based systems have been proposed. Depending on their source
of input data, they are divided into host based and network based designs.
Host based anomaly detection systems can focus on user or program behav-
ior. User proﬁles are built from login times and accessed resources [6,11,2] (e.g.
ﬁles, programs) or from timing analysis of keystrokes [20]. Unfortunately, user
behavior is hard to predict and can change frequently. Additionally, such sys-
tems cannot react properly when network services get compromised as no single
user proﬁle can be associated to a daemon program.
As a consequence the focus was shifted from user to program behavior. The
execution of a program is modeled as a set of system call sequences [8,7] which
occur during ‘normal’ program execution. When the observed sequences devi-
ate from the expected behavior the program is assumed to perform something
unintended, possibly because of a successful attack (e.g. buﬀer overﬂow). Other
researchers use neural networks [10] and concentrate on the analysis of the in-
put data that is passed to programs. These systems are capable of detecting
buﬀer overﬂows attacks against service daemons but only after they have been
successful and manifest themselves in abnormal behavior. This has the problem
276
T. Toth and C. Kruegel
that damage might have already occurred. Another approach, followed by Stack-