As a simplistic example, suppose a scavenger is intended to
coexist with a latency-based primary protocol like PCC Vivace or
COPA. The scavenger could use packet loss as a different metric,
but the loss signal will come too late, if ever, since Vivace and COPA
avoid filling queues.
LEDBAT’s congestion signal is RTT exceeding a threshold,
e.g., 100 ms above the minimum RTT. This signal often comes
earlier than loss, but still fails for primary protocols that react to
even earlier signals – as will occur with Vivace’s and COPA’s latency
sensitivity. Even with CUBIC as primary, it will fail if a moderate-
size buffer causes loss before latency inflation hits 100 ms.
Another interesting signal is RTT gradient, used by Timely [28]
and PCC Vivace [17]. For example, Vivace calculates the gradient
of recently received RTT samples, and avoids inflation by penal-
izing positive gradient. This will occur earlier than many other
signals, but being in use by certain protocols and having similar
latency-awareness to a protocol like COPA, it may not be appropri-
ate for a scavenger. Furthermore, there is a chance that the gradient
calculation (e.g., linear regression in [17]) may average out some
transient congestion-related RTT fluctuation. In an extreme case,
RTT gradient may stay close to zero while the bottleneck buffer is
repeatedly inflated and deflated by other concurrent senders.
To sum up, we can’t hope to guarantee that a scavenger is robust
to every conceivable primary protocol. But ideally, its signal of
competition should be typically not used by primary protocols, and
should provide as early as possible a signal of competing senders.
Figure 1: Proteus congestion control architecture
2.3 Motivation for Flexibility
The Internet congestion control domain accumulates massive code-
bases after decades of effort, ranging from traditional kernel mod-
ules to recent user-space implementations (e.g., QUIC [25]). For
example, the main existing scavenger protocol, LEDBAT, uses a
different implementation from primary protocols such as BBR and
CUBIC. As content providers try to optimize use cases with dif-
ferent needs (web traffic, video, real-time voice, scavengers, etc.),
a proliferation of codebases would impose a nontrivial burden to
develop initially and to maintain. The interaction between different
protocols, especially the deprioritization of the scavenger, can be
challenging to analyze, and brittle even with minor implementation-
level code updates or bugfixes.
Separate implementations are also limited to coarse-grained pri-
ority changes. Most operating system kernels use a single conges-
tion control protocol for all traffic. Although it is possible to config-
ure different protocols on a per-socket basis or through tools such
as iptables, this cannot accommodate priority changes mid-flow.
For example, when a software update has a deadline requirement,
it may want to yield dynamically, only after reaching a certain
throughput.
Therefore, it would be of great value if there is a flexible, generic
architecture for Internet congestion control that synthesizes both
primary and scavenger modes, and eases the formal analysis for
intra- and inter-protocol interaction, i.e., scavenger vs. scavenger,
and scavenger vs. primary flow.
3 PROTEUS DESIGN OVERVIEW
Fig. 1 summarizes the PCC Proteus architecture. We begin with a
utility-based approach, similar to [16, 17]. Proteus separates con-
gestion control into a utility module and a rate control module.
The utility module has a library of utility functions, which may
be tailored to different applications’ needs. During data transmis-
sion, the utility module collects packet-level events (e.g., loss, RTT,
timeout), summarizes these metrics in the form of a numeric utility
value, and associates the utility with the corresponding sending
rate (or window size). Based on the relationship between different
sending rates and their corresponding utilities, the rate control
module algorithmically adjusts sending rate in the direction that
empirically maximizes utility. The sender uses different sending
rates in consecutive time intervals called monitor intervals (MIs),
617
NICUtilityCalculatorUtilityModuleRate Control ModuleRequirementsUtility_Primary                Utility_… Utility_ScavengerUtility_HybridUtility_…  Metric CollectionUtility LibPacket Level EventsPerformance Metric(Throughput, Loss Rate, …)UtilityFunctionUtilityApplicationsControlAlgorithmControl StorageSendingRateControl InfoUtility1Sending Rate1Utility2Sending Rate2SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Tong Meng, Neta R. Schiff, Brighten Godfrey, and Michael Schapira
and calculates the utility for each MI when all packets sent in that
MI are acknowledged or lost.
We adopt PCC’s utility approach because of its decoupled utility
design and rate control. We can construct utility functions based
on selected performance metrics (§2.2), while allowing these util-
ity functions to share the same rate control algorithm (e.g., the
gradient-based rate control in PCC Vivace [17]). In fact, a sender
can even switch utility functions dynamically within a running in-
stance of the rate controller, which provides flexibility with minimal
overhead (§2.3).
To apply this approach to our setting, Proteus introduces sev-
eral new components. First, we design a new utility function for
scavenger senders, called Proteus-S, that satisfies our yielding
and performance goals by leveraging latency deviation as a signal
of flow competition. Second, to satisfy our flexibility goal, the
Proteus system supports dynamic utility function selection. The
application may select or re-select a utility function in real-time,
even in the middle of a flow. (In our user-space implementation,
this is a simple API call.) In addition to Proteus-S, applications
may select among a primary-flow utility function called Proteus-P,
and a new hybrid-mode utility function that we call Proteus-H,
which combines Proteus-S and Proteus-P in an adaptive piece-wise
function according to applications’ throughput requirements.
Within this high-level design, there are two hard problems,
which are the subject of the upcoming sections. First, we design
the new utility functions, especially the scavenger and its exten-
sion to hybrid mode (§4). We employ a game-theoretic analysis
of equilibria when senders use the proposed utility functions to
show that our performance goal is met for both our primary and
scavenger utility functions. Second, because the scavenger utility
function is sensitive to non-congestion RTT noise, we design novel
noise-tolerant control mechanisms (§5).
4 PROTEUS UTILITY DESIGN
In this section, we present the utility functions employed by Proteus.
After introducing the primary-protocol mode, we discuss the key
metric employed by our scavenger and then the scavenger utility
function for Proteus-S. Finally, we combine Proteus-P and Proteus-S
into a hybrid mode (Proteus-H), using a piecewise utility function
with cross-layer design, to improve bandwidth allocation.
4.1 Primary Utility Function
We begin with the relatively easy part: for Proteus-P, we use the PCC
Vivace utility function [17] with a minor modification – negative
RTT gradient is ignored:
𝑢𝑃 (𝑥𝑖) = 𝑥𝑡
𝑖 − 𝑏 · 𝑥𝑖 · 𝑚𝑎𝑥
0,
𝑑(𝑅𝑇𝑇𝑖)
𝑑𝑡
− 𝑐 · 𝑥𝑖 · 𝐿 ,
(1)
(cid:26)
(cid:27)
where 𝑥𝑖 is the sending rate of sender 𝑖, 𝐿 is the observed loss rate,
and 𝑑(𝑅𝑇𝑇𝑖)/𝑑𝑡 represents RTT gradient. We ignore negative RTT
gradient because we found it ultimately slows convergence (the
sender tends to reduce its rate significantly below capacity so the
queue drains quickly). This change still results in a fair equilibrium
among competing Proteus-P senders, similar to [17]. We prove the
following theorem in Appendix A).
2, · · · , 𝑥∗
1, 𝑥∗
𝑛, and the link is fully utilized.
Theorem 4.1. In a shared bottleneck, 𝑛 Proteus-P senders will
converge to a fixed rate configuration (𝑥∗
𝑛) such that 𝑥∗
1 =
2 = · · · = 𝑥∗
𝑥∗
The above Proteus-P utility function is latency-aware, and penal-
izes two performance metrics: RTT gradient and packet loss rate. Its
convergence property is determined by three constant parameters
as proved in [6]. The exponent 𝑡 (0  0) corresponds to a theoretical maxi-
mum number of competing senders on a specific bottleneck with
no inflation in equilibrium state, i.e., all senders’ sending rates sum
up to the bottleneck capacity. For example, 𝑏 = 900 is used by PCC
Vivace [17], aimed at up to 1000 competing senders on a bottleneck
of at most 1000 Mbps. The coefficient 𝑐 sets a threshold on random
loss tolerance, e.g., 𝑐 = 11.35 to tolerate up to 5% random loss rate.
In Proteus-P, we use the same default values as in [17] (𝑡 = 0.9,
𝑏 = 900, 𝑐 = 11.35).
4.2 Competition Indicator: RTT Deviation
As analyzed in §2.2, the ideal signal for a scavenger is not just
ongoing congestion; we would like to know of impending conges-
tion, i.e., competition between flows. The implication is twofold.
First, when there are multiple concurrent primary flows with a
scavenger on a common bottleneck, if they are under-utilizing the
bandwidth, the scavenger does not need to back off since there is
no competition. Second, if the bottleneck buffer starts to be inflated
and deflated alternatively due to flows probing for bandwidth, the
scavenger should identify and react to such an early signal even
before persistent congestion is induced. That is crucial to guarantee
consistent low priority whether the primary flow is latency-aware
or not. Based on that intuition, we choose RTT deviation as the indi-
cator for flow competition. RTT deviation is the standard deviation
of RTT samples within an MI and is calculated as
(cid:115) 1
𝑛
𝑗
·
(cid:16)𝑅𝑇𝑇𝑗 − 𝑅𝑇𝑇(cid:17)2
,
𝜎(𝑅𝑇𝑇) =
where 𝑛 is the number of RTT samples in the corresponding MI, and
𝑅𝑇𝑇𝑗 and 𝑅𝑇𝑇 are the 𝑗-th and the mean RTT of the MI, respectively.
RTT deviation captures the latency, and thus buffer occupancy
dynamics, caused by flow competition. As long as the competing
primary flows actively probe for available bandwidth and do not
blindly speed up transmission, their competition will cause RTT
fluctuation. This is true for both the early scenario when several
latency-aware flows have just come close to full bandwidth utiliza-
tion (where brief random bursts will cause RTT deviation even if
the queue isn’t persistently growing), and the late scenario when
several loss-based flows already bloat the buffer to full occupancy.
Even if multiple latency-sensitive flows converge at the steady state,
primary senders still repeatedly probe around the steady-state rate
so that they can adapt to channel dynamics, for example, bandwidth
that is freed up when competing flows stop transmitting. That pro-
cess causes positive RTT deviation, driving scavenger senders to
back off. Of course, this is not to imply that RTT deviation is ideal
when competing with any possible primary protocol, but we believe
the above arguments are broadly true of current protocols.
618
PCC Proteus: Scavenger Transport And Beyond
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
ameliorate possible confusion by trying to distinguish whether the
sender’s rate is the cause of utility changes, by experimenting with
different rates. However, we found realistic noise still impacted
performance, so we designed noise control mechanisms (§5) for
enhanced robustness.
4.3 Scavenger Utility Function
Given the intuition that RTT deviation can indicate when to yield,
we define the utility function for Proteus-S as:
𝑢𝑆(𝑥𝑖) = 𝑢𝑃 (𝑥𝑖) − 𝑑 · 𝑥𝑖 · 𝜎(𝑅𝑇𝑇𝑖) ,
(2)
where 𝑢𝑃 (𝑥𝑖) is the utility function for Proteus-P, 𝑑 > 0 is a pa-
rameter, and 𝜎(𝑅𝑇𝑇𝑖) denotes the RTT deviation calculated from a
corresponding MI.
We show that this utility function results in a fair equilibrium
among competing Proteus-S senders, as required by our perfor-
mance goal. We prove the following theorem in Appendix A.
2, · · · , 𝑥∗
1, 𝑥∗
𝑛, and the link is fully utilized.
Theorem 4.2. In a shared bottleneck, 𝑛 Proteus-S senders will
converge to a fixed rate configuration (𝑥∗
𝑛) such that 𝑥∗
1 =
2 = · · · = 𝑥∗
𝑥∗
When Proteus-P and Proteus-S senders compete with each other,
we prove in the appendix that there exists a unique equilibrium. We
leave the formal analysis of Proteus-S senders yielding bandwidth to
Proteus-P senders to future work. As informal intuition, a Proteus-
S sender yields to a Proteus-P sender because the RTT deviation
term in the Proteus-S utility function generates larger penalty, and
makes the Proteus-S sender relatively conservative.
When the primary protocol is something other than Proteus-P,
the effectiveness of RTT deviation can be informally justified by
§ 4.2, and validated by our experiments.
Since we adopt the rate control algorithm from PCC Vivace, the
above theorem and analysis deal with the existence of equilibria.
We leave a study of the dynamics of convergence (e.g., convergence
speed) to future work.
4.4 Proteus-H: Hybrid Mode
Network-wide utility can also benefit from applications only occa-
sionally switching to scavenger mode. For example, when watch-
ing an online video, users may complain about rebuffering if the
throughput cannot fulfill a certain bitrate, but will be satisfied once
the video is played in the highest bitrate smoothly. For that purpose,
we extend Proteus-P and Proteus-S into Proteus-H, a hybrid mode
with a piecewise utility function constructed from Proteus-P and
Proteus-S:
(cid:26)𝑢𝑃 (𝑥𝑖)
𝑢𝑆(𝑥𝑖)
𝑢𝐻 (𝑥𝑖) =
if 𝑥𝑖 < 𝑡ℎ𝑟𝑒𝑠ℎ𝑜𝑙𝑑,
otherwise.
(3)
Effectively, Proteus-H switches between scavenger and primary
modes based on a threshold. But there is no explicit switch in the
control algorithm; it happens implicitly, simply by comparing utility
values of different sending rates.