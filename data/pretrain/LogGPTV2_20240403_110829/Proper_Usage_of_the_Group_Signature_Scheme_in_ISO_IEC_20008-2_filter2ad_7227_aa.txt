title:Proper Usage of the Group Signature Scheme in ISO/IEC 20008-2
author:Ai Ishida and
Yusuke Sakai and
Keita Emura and
Goichiro Hanaoka and
Keisuke Tanaka
Proper Usage of the Group Signature Scheme
in ISO/IEC 20008-2
(cid:3)
Ai Ishida
y
Yusuke Sakai
y
Keita Emura
z
Goichiro Hanaoka
y
x
Keisuke Tanaka
July 5, 2019
Abstract
In ISO/IEC 20008-2, several anonymous digital signature schemes are speci(cid:12)ed. Among these,
the scheme denoted as Mechanism 6, is the only plain group signature scheme that does not aim
at providing additional functionalities. The Intel Enhanced Privacy Identi(cid:12)cation (EPID) scheme,
which has many applications in connection with Intel Software Guard Extensions (Intel SGX), is in
practice derived from Mechanism 6. In this paper, we (cid:12)rstly show that Mechanism 6 does not satisfy
anonymity in the standard security model, i.e., the Bellare-Shi-Zhang model [CT-RSA 2005]. We
then provide a detailed analysis of the security properties oﬀered by Mechanism 6 and characterize
the conditions under which its anonymity is preserved. Consequently, it is seen that Mechanism 6 is
secure under the condition that the issuer, who generates user signing keys, does not join the attack.
We also derive a simple patch for Mechanism 6 from the analysis.
Keywords: Group signature, Cryptanalysis, ISO/IEC 20008-2, SGX
1 Introduction
1.1 Background
The ISO/IEC standards are some of the most important reference documents representing a consensus
among the experts in the (cid:12)eld of information security. In practice, it is generally required to utilize the
technologies which are speci(cid:12)ed in standards to ensure interoperability.
In the case of cryptographic technologies, standardization plays an even more important role of
building trust. During the process of cryptographic standardizations, much work and time are required
in order to carefully examine the security of a proposed scheme even if it has already been published in a
(cid:13)agship conference. Concretely, it typically takes about 2-3 years to standardize (and revise) a scheme.
Due to this strict evaluation process, standardized schemes are some of the most trusted schemes in
general.
The ISO/IEC 20008-2 standard [2], which is for privacy-enhanced user authentication technologies,
was published in 2013.
In this document, seven anonymous digital signature schemes (Mechanism 1
to 7) are speci(cid:12)ed. Among them, the scheme denoted as Mechanism 6, is the only plain group signature
scheme [14] which does not aim at providing additional functionalities.
Due to its simplicity, Mechanism 6 is the most eﬃcient group signature scheme in standards. There-
fore, if we need to introduce a (plain) group signature scheme in a practical system, it is considered rea-
sonable to employ Mechanism 6. In fact, the Intel Enhanced Privacy Identi(cid:12)cation (EPID) scheme [13]
is based on the Furukawa-Imai scheme [22, 23], from which Mechanism 6 originates.1 The EPID scheme
(cid:3)
y
PI:EMAIL
This work was supported by JST CREST Grant Number JPMJCR19F6, Japan.
National Institute of Advanced Industrial Science and Technology (AIST), Japan.
fa.ishida, yusuke.sakai,
z
National Institute of Information and Communications Technology (NICT), Japan. PI:EMAIL
x
Tokyo Institute of Technology, Japan. PI:EMAIL
1The EPID scheme is listed as Mechanism 3 in the ISO/IEC 20008-2 [2]. We can (cid:12)nd the explicit description that the
EPID scheme is derived from the Furukawa-Imai scheme in the paper [13] and the conference material [7].
1
is an anonymous signature scheme for identi(cid:12)cation, and there are its many applications (see \Intel
EPID Use Cases" in the web page [5] for details) represented by Intel Software Guard Extensions (Intel
SGX) [6].
In terms of Mechanism 6’s security, the ISO/IEC document says that the associated security proofs
are based on the original paper [23]. More precisely, it is considered that Mechanism 6 is secure in the
Bellare-Shi-Zhang (BSZ) model [11], which is one of the popular security models for group signatures.2
1.2 Our Contribution
In this paper, we (cid:12)rstly prove that Mechanism 6 is not secure in the BSZ model by showing a con-
crete attack against its anonymity, and then discuss possible countermeasures. Secondly, as the best
countermeasure, we provide a detailed analysis of the security properties oﬀered by Mechanism 6 and
characterize the conditions under which its anonymity is preserved. Consequently, it is seen that Mecha-
nism 6 is secure under the condition that the issuer does not join the attack. For example, Mechanism 6
is secure if a unique organization simultaneously plays roles of both issuer and opener. Finally, we derive
a simple patch for Mechanism 6. In the following, we provide more details of our contributions.
Attack against Mechanism 6 in the BSZ model. We show an attack against the anonymity of
Mechanism 6 in the BSZ model. More precisely, we show that the issuer, who generates user signing keys
by the issuing key, can identify the signer of any signature although only the entity called the opener is
allowed to trace the signer in the BSZ model.
In a nutshell, the reason why Mechanism 6 can be attacked is that the underlying proof system does
not satisfy simulation soundness.
If a proof system is not simulation sound, it might be possible to
create a valid proof without a witness after seeing some valid proofs. We note that the proof of original
paper [23] is not correct since it is misunderstood that the underlying proof system satis(cid:12)es simulation
soundness but it only satis(cid:12)es soundness.
In Mechanism 6, this possibility allows an adversary to re-randomize the challenge signature and
helps to break its anonymity. Speci(cid:12)cally, in our attack, the challenge signature is re-randomized by
using the issuing key. Then, the adversary queries the manipulated signature to the opening oracle and
obtains the identity of the signer. Since the adversary is allowed to corrupt the issuer and to access the
opening oracle in the anonymity game of the BSZ model, our attack is valid in this model.
Countermeasures for Our Attack. We consider the following three countermeasures for our attack:
(1) to remove Mechanism 6 from the list and use alternative schemes in the standard, (2) to patch
Mechanism 6 and update the document, and (3) to analyze the security properties oﬀered by Mechanism 6
and restrict its use in a way that ensures that its anonymity is preserved.
The countermeasure (1) seems easy but is not desirable. At a (cid:12)rst glance, Mechanism 5 and 7
might be considered reasonable substitutes for Mechanism 6. However, this is not always the case since
Mechanism 5 and 7 have some drawbacks. More precisely, Mechanism 5 is signi(cid:12)cantly less eﬃcient
than Mechanism 6 due to the fact that Mechanism 5 is based on an RSA-type algebraic structure.
Furthermore, Mechanism 7 provides only a weaker security notion of anonymity (the so-called \CPA-
anonymity"). Therefore, countermeasure (1) is not very appropriate.
The countermeasure (2) is ideal and should be taken if possible. However, it cannot be carried out
immediately since it takes much work and time to standardize a new scheme even though it is just
an updated to an existing one. For example, in the case of the ISO/IEC 9796-2 standard [1], one of
the standardized schemes was attacked by Coron et al. [15] in 1999, but the (cid:12)nal revised version was
published in 2002. That is, it took three years to update the document. Thus, although it will most
certainly be useful to provide a patched scheme, it is not an immediate countermeasure for the attack.
The countermeasure (3) seems most realistic among the possible countermeasures. Although we see
that Mechanism 6 does not satisfy the expected security level by our attack, it is premature to rule out
Mechanism 6 as a useful scheme. Speci(cid:12)cally, it might be true that Mechanism 6 is still secure to use in
practice since the BSZ model considers a relatively strong level of security. Therefore in this work, we
investigate this countermeasure as we consider that this is the most appropriate one.
Rigorous Security Evaluation of Mechanism 6. As mentioned above, the countermeasure (3) is
2The model in the papers [22, 23] is slightly diﬀerent from the BSZ model. However, it is easy to see that they are
essentially same.
2
most appropriate among the possible countermeasures. Therefore, we analyze the security properties
oﬀered by Mechanism 6 in order to characterize the conditions under which its anonymity is preserved.
As a result of this analysis, we see that no one can extract the signer’s information from a signature
except for the opener and the issuer. More precisely, this fact indicates that Mechanism 6 is still secure
under the condition that the issuer does not join the attack. Such a condition is reasonable if a single
authority plays roles of both the opener and the issuer.
We stress that (cid:12)nding out the strict security of Mechanism 6 is quite non-trivial, and then it can
be considered a theoretically interesting problem. As we mentioned, the (cid:13)aw of Mechanism 6 is that
the underlying proof system does not satisfy simulation soundness, and this property allows to break
the anonymity by re-randomizing the challenge signature. In our analysis, we (cid:12)rstly show that such an
attack is the only way to break the anonymity. However, it is not very clear how to defend against this
attack since it is diﬃcult to (cid:12)nd out what essentially allows an adversary to make such an attack. Then,
we determine to minutely divide (i.e., 31 cases) this attack and analyze each case one by one. Finally, we
give its complete analysis and (cid:12)nd out the strict condition to securely use Mechanism 6. Our approach
looks simple once it has been described, but we think that it is not so easy to take this approach in
practice.
In addition, the formal proof of the Mechanism 6’s strict security is non-trivial and non-standard
although its intuition can be obtained from the above analysis. Generally, the anonymity of a group
signature scheme reduces to the con(cid:12)dentiality of the underlying public key encryption scheme and the
zero-knowledgeness of the underlying non-interactive zero-knowredge proof system, and does not reduce
to the unforgeability of the underlying signature scheme. However, in the case of Mechanism 6, we also
reduce to the unforgeability of the signature scheme since claiming that the issuing key that is essentially
a signing key of the signature scheme can be extracted from an adversary breaking the anonymity.
Therefore, the reduction algorithm is required to manage to generate users’ certi(cid:12)cates without the
issuing key. For this reason, the proof of the Mechanism 6’s security is complicated.
A Patched Scheme. Owing to our analysis of the security of Mechanism 6, we derive a non-trivial
patch for the scheme. In fact, it is not so hard to come up with a patched scheme just secure in the BSZ
model, but a scheme with a small patch is non-trivial. Our patched scheme could be a candidate for the
new standardized scheme when ISO/IEC 20008-2 will be revised in the future.
In the patched scheme, only the signing and veri(cid:12)cation algorithms are changed, and the signature
size increases by only one element in the group G1 where G1 is a source group in the used asymmetric
bilinear group. More precisely, a signature in the patched scheme consists of two elements from G1, three
elements from G, and six elements from Zp (where G is the group in which the decisional Diﬃe-Hellman
assumption holds). This achieves the comparable eﬃciency to the existing schemes [17, 18] satisfying
the same security level. Also, we need to introduce the external Diﬃe-Hellman assumption in G1 to
prove the anonymity of the patched scheme, but the other security requirements can be showed under
the same assumptions as those of Mechanism 6.
1.3 Paper Organization
In Section 2, we review basic notations, and the de(cid:12)nitions of computational assumptions and crypto-
graphic primitives which we use in this paper. Mechanism 6 is reviewed also in Section 2. In Section 3,
we describe an attack against the anonymity of Mechanism 6 in the BSZ model and discuss about its
countermeasures. In Section 4, we analyze the security properties oﬀered by Mechanism 6. More pre-
cisely, we prove that Mechanism 6 satis(cid:12)es anonymity if the adversary does not make the type of attacks
which we give in Section 4.1, and provide further analysis of the attack in Section 4.2. From the result in
this section, we can characterize the conditions under which the anonymity of Mechanism 6 is preserved.
Then in Section 4.3, we formalize these conditions and prove the strict security of Mechanism 6 under
these. In Section 4.4, we discuss the practical implications of our results. Furthermore, we give a patch
for Mechanism 6 in Section 5. Lastly, we conclude this paper in Section 6.
2 Preliminaries
Notations. x $ (cid:0) X denotes choosing an element from a (cid:12)nite set X uniformly at random. If A is a
probabilistic algorithm, y   A(x; r) denotes the operation of running A on an input x and a randomness
3
r, and letting y be the output. When it is not necessary to specify the randomness, we omit it and simply
write y   A(x). If we describe the statement that the output of A(x) is y, then we denote A(x) = y. If
O is a function or an algorithm, A
denotes that A has oracle access to O. If A and B are statements,
O
A , B denotes that A and B are equivalent. If ai is an indexed element, faigi denotes an ordered set
arranged in the index order. (cid:21) denotes a security parameter. PPT stands for probabilistic polynomial
time. A function f ((cid:21)) is called negligible if for any c > 0, there exists an integer (cid:3) such that f ((cid:21))  (cid:3).
2.1 Complexity Assumptions
Let G1 and G2 be multiplicative cyclic groups of order p where p is a (cid:21)-bit prime. Let G1 and G2 be
generators of G1 and G2, respectively. Let (cid:9) be an isomorphism from G2 to G1 with (cid:9)(G2) = G1. Let
e be a computable map e : G1 (cid:2) G2 ! GT with bilinearity: for all a; b 2 Z, e(G1
b) = e(G1; G2)ab,
and non-degeneracy: e(G1; G2) ̸= 1. We say that groups (G1; G2) are a bilinear group pair if there exist
the map (cid:9) and the bilinear map e as above, and the group operations in G1 and G2, the map (cid:9), and the
bilinear map e are eﬃciently computable. In this paper, we consider bilinear maps e : G1 (cid:2) G2 ! GT
where G1, G2, and GT are groups of prime order p.
a; G2
We de(cid:12)ne the discrete logarithm (DL) assumption, the external Diﬃe-Hellman (XDH) assumption,
and the q-strong Diﬃe-Hellman (q-SDH) assumption.
De(cid:12)nition 2.1 (Discrete Logarithm Assumption). We say that the DL assumption holds in G1 if for
any PPT adversary A, the advantage AdvDLA ((cid:21)) := Pr[H = G1
xjx   A(G1; G2; H)] is negligible, where
the probability is taken over the random choices of a generator G2 2 G2 with G1 = (cid:9)(G2), of an element
H 2 G1, and a random coin of A.
De(cid:12)nition 2.2 (External Diﬃe-Hellman Assumption). We say that the XDH assumption holds in G1
if for any PPT adversary A, the advantage AdvXDHA ((cid:21)) := j Pr[1   A(G1; G2; G1
ab)](cid:0) Pr[1  
A(G1; G2; G1
b; W )]j is negligible, where the probability is taken over the random choices of a gener-
ator G2 2 G2 with G1 = (cid:9)(G2), of elements a; b 2 Zp, and of an element W 2 G1, and a random coin
of A.
De(cid:12)nition 2.3 (q-Strong Diﬃe-Hellman Assumption). We say that the q-SDH assumption holds in (G1;
G2) if for any PPT adversary A, the advantage Advq-SDHA
x) = e(G1; G2)j(C; x)  
A(G1; G2; G2
generator G2 2 G2 with G1 = (cid:9)(G2) and of a value (cid:13) 2 Z(cid:3)
((cid:21)) := Pr[e(C; G2
p, and a random coin of A.
)] is negligible, where the probability is taken over the random choices of a
(cid:13) (cid:1) G2
; : : : ; G2
(cid:13); G2
a; G1
a; G1
b; G1
(cid:13)2
(cid:13)q
For simplifying a security proof, we also introduce the simpli(cid:12)ed q-strong Diﬃe-Hellman (simpli(cid:12)ed
q-SDH) assumption.
1
A
De(cid:12)nition 2.4 (Simpli(cid:12)ed q-Strong Diﬃe-Hellman Assumption [?]). We say that the simpli(cid:12)ed q-SDH
assumption holds in (G1; G2) if for any PPT adversary A, the advantage Advsim-q-SDH
e(C; G2
is taken over the random choices of a generator G2 2 G2 with G1 = (cid:9)(G2), of a value (cid:13) 2 Z(cid:3)
values xi 2 Zp, and a random coin of A.
((cid:21)) := Pr[x ̸= xi^
i=1)] is negligible, where the probability
p, and of
x) = e(G1; G2)j(C; x)   A(G1; G2; G2
(cid:13)+xi ; xigq
(cid:13);fG1
(cid:13) (cid:1) G2
The following theorem is known between the q-SDH assumption and the simpli(cid:12)ed (q (cid:0) 1)-SDH
assumption. Therefore, we use the simpli(cid:12)ed (q (cid:0) 1)-SDH assumption instead of the q-SDH assumption
in our security proof.
Theorem 2.1 ([?]). For any PPT adversary A and any integer q > 0, it holds that Advsim-(q (cid:0) 1)-SDH
Advq-SDHA
((cid:21)) (cid:20)
((cid:21)). That is, if the q-SDH assumption holds, the simpli(cid:12)ed (q (cid:0) 1)-SDH assumption also holds.
In Mechanism 6, another multiplicative cyclic group G of order p in which the decisional Diﬃe-
A
Hellman (DDH) assumption holds is introduced. We de(cid:12)ne the DDH assumption in the following.
De(cid:12)nition 2.5 (Decisional Diﬃe-Hellman Assumption). We say that the DDH assumption holds in
G if for any PPT adversary A, the advantage AdvDDHA ((cid:21)) := j Pr[1   A(G; Ga; Gb; Gab)] (cid:0) Pr[1  
A(G; Ga; Gb; W )]j is negligible, where the probability is taken over the random choices of a generator
G 2 G, of elements a; b 2 Zp, and of an element W 2 G, and a random coin of A.
4
2.2 Group Signature
In this section, we review group signature. Here, we follow the Bellare-Shi-Zhang (BSZ) model [11].
A group signature scheme (cid:5)GS consists of the following algorithms (GKg; UKg; Join=Iss; GSig; GVf; Open;
Judge).
GKg: The group key generation algorithm takes as input a security parameter 1(cid:21) ((cid:21) 2 N), and returns
a group public key gpk, an issuing key ik, and an opening key ok.
UKg: The user key generation algorithm, which is run by a user i, takes as input 1(cid:21) and gpk, and returns
a public and secret key pair (upki; uski).
Join/Issue: The pair of (interactive) algorithms are run by a user i and the issuer, and takes as input gpk,
upki, and uski from the user i, and gpk, upki, and ik from the issuer, respectively. If it is successful, the
issuer stores the registration information of the user i in reg[i] and the user obtains the corresponding
signing key gski. We denote reg = freg[i]gi.
GSig: The signing algorithm takes as input gpk, gski, and a message m, and returns a group signature (cid:6).
GVf: The veri(cid:12)cation algorithm takes as input gpk, (cid:6), and m, and returns either 1 (indicating that (cid:6) is
a valid group signature on m), or 0.
Open: The opening algorithm takes as input gpk, ok, m, (cid:6), and reg, and returns either (i; (cid:28) ) or ? where i
is a user identity and (cid:28) is a proof that the user i computed (cid:6). The symbol ? indicates that the opening
procedure fails.
Judge: The judge algorithm takes as input gpk, i, upki, m, (cid:6), and (cid:28) , and returns either 1 (indicating
that (cid:6) is produced by the user i), or 0.
Bellare et al. [11] formalized correctness, anonymity, non-frameability, and traceability as security
requirements. Here, we give only the de(cid:12)nition of anonymity since we are focusing on on the anonymity
of Mechanism 6.
Firstly, we give the de(cid:12)nitions of some oracles. The SndToU oracle is an interactive oracle. Also, HU
and CU are the set of honest users and corrupted users, respectively.
  upk
CrptU((cid:1);(cid:1)): The corrupt-user oracle takes as input a user identity i and upk. This oracle sets upki
and adds i to CU.
SndToU((cid:1)): The send-to-user oracle takes as input a user identity i. At (cid:12)rst, the oracle produces a user
public and secret key pair (upki; uski)   UKg(1(cid:21); gpk) and adds i to HU. Then he interacts with the
adversary who corrupts the issuer by running Join(gpk; upki; uski). The user i needs to be neither in the
set HU nor the set CU. If so, the oracle outputs ?.
USK((cid:1)): The user secret keys oracle takes as input i, and returns the secret keys uski and gski if i 2 HU.
WReg((cid:1);(cid:1)): The write-registration-table oracle takes as input i and a value creg, and writes or modi(cid:12)es
If not, the oracle returns ?.
the contents of reg by setting reg[i]   creg.
Ch((cid:1);(cid:1);(cid:1);(cid:1)): The challenge oracle takes as input a bit b, two identities i0, i1, and a message m
(cid:3)
) if both i0 2 HU and i1 2 HU. If not, the oracle returns ?. In this
returns (cid:6)
(cid:3)
paper, we call b a challenge bit, m
a challenge signature, and i0, i1 challenge
users.
Open((cid:1);(cid:1)): The opening oracle takes as input m and (cid:6), and returns (i; (cid:28) )   Open(gpk; ok; m; (cid:6); reg) if
(m; (cid:6)) ̸= (m
(cid:3)
(cid:3)   GSig(gpk; gskib
a challenge message, (cid:6)
(cid:3)
). If not, the oracle returns ?.
; (cid:6)
(cid:3)
; m
(cid:3)
, and
Then, we describe the de(cid:12)nition of anonymity given in the BSZ model. Intuitively, it ensures that
the adversary who can corrupt all users and the issuer cannot extract the information of the signer from
a group signature. The formal de(cid:12)nition is given as follows.
5
′
i
$ (cid:0) Zp; R1   G(cid:26)xi ; R2   H (cid:26)xi K (cid:26)z
′
i
′
i
′
i
′
i
ci
$ (cid:0) Zp; Ai  (
User: (cid:26)xi; (cid:26)z
User: Send (R1; R2) to the issuer
$ (cid:0) Zp
Issuer: ci
Issuer: Send ci to the user
(cid:1) ci + (cid:26)z
  xi (cid:1) ci + (cid:26)xi; (cid:27)z
  z
′
User: (cid:27)xi
i
User: Send ((cid:27)xi; (cid:27)z
) to the issuer
) 1
  G(cid:27)xi =Qi
  H (cid:27)xi K (cid:27)z
′
′
′
ci; R
i =Hi
Issuer: R
̸= R1 _ R
̸= R2
Issuer: Return ? to the user if R
′
2
1
2
w+yi ; reg[i]   Qi
′′
G1
Issuer: yi; z
Hi(cid:1)Kz
i
Issuer: Send (Ai; yi; z
User: zi   z
User: Set gski
GSig(gpk; gski; m):
r; q $ (cid:0) Zp; T1   Ai (cid:1) K q; T2   Gxi+r; T3   U r; T4   V r; (cid:26)xi; (cid:26)yi; (cid:26)(cid:14); (cid:26)q; (cid:26)r
R1   e(H; G2)(cid:26)xi (cid:1) e(K; G2)(cid:26)(cid:14) (cid:1) e(K; Y )
c   H(gpk;fTigi2[1;4];fRigi2[1;4]; m); (cid:14)   zi (cid:0) qyi