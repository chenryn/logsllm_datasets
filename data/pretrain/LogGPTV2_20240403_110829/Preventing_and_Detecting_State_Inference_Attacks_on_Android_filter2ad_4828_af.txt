### Bad Coding Practices and Malware Detection

**Bad Coding Practices:**
As a representative example, we identified an application that continuously invokes the `getRunningServices` API without any sleep intervals between invocations. This practice can lead to performance degradation and increased resource consumption.

**Malware Detection:**
To evaluate our system's effectiveness in detecting malware, we used synthetic applications configured to mimic real malicious behavior. The methods employed to simulate this behavior are detailed in Section IX-A. Our system successfully identified the malicious behavior in all samples, indicating its capability to detect and prevent such attacks in a real-world scenario.

### Performance Considerations

**System Design:**
Our detection system is designed with optimized data structures and a fast algorithm, allowing it to handle each service invocation in constant time (O(1)), regardless of the number of services, running applications, or the rate of system service invocations. The memory requirement is approximately \( n_{\text{apps}} \times (x + 1) \times 8 \) bytes, where \( n_{\text{apps}} \) is the number of running applications and \( x \) is the number of entries in the circular buffers. For a hypothetical scenario with 50 applications invoking multiple services, our system requires less than 10KB of memory.

**Performance Overhead:**
We measured the performance overhead of our detection system by performing a micro-benchmark. This involved invoking the `ActivityManager` service's `getAppTasks` API 10,000 times and repeating the test 100 times for both the modified and vanilla versions of AOSP. To ensure accurate results, we modified our system to prevent exceptions when the polling threshold was exceeded. Figure 5 (in the Appendix) shows the average and standard deviation of the time required to serve 10,000 requests. On average, our detection system introduces an overhead of only 1.98% compared to the AOSP baseline, which we consider acceptable. From a usability perspective, there was no noticeable difference between using a device with the baseline AOSP and one with our detection system.

### Comparison with LeaveMeAlone

**Overview:**
LeaveMeAlone [38] is a recent work aimed at detecting and blocking malicious applications that perform runtime information gathering attacks on Android. This section provides a detailed comparison, highlighting significant limitations in LeaveMeAlone when dealing with phishing attacks.

**Runtime Information Gathering Attack:**
A runtime information gathering attack involves a malicious app stealing or inferring sensitive information about the target application's runtime data by analyzing shared resources. The core component of LeaveMeAlone, "AppGuardian," monitors the runtime behavior of running apps and identifies suspicious behavior. It collects static information, such as permissions, and runtime behavior, such as thread names, CPU scheduling, and kernel time, from the procfs subsystem.

**Safe Execution Environment:**
When a protected target app is started, AppGuardian stops all suspicious background processes, creating a safe execution environment. This prevents the "runtime information gathering" attack. However, LeaveMeAlone has several limitations when tasked with preventing phishing attacks:

1. **Vulnerability Dependence:**
   AppGuardian relies on known vulnerabilities to collect runtime information. Since it runs as a non-privileged application, future patches by Google will render this approach ineffective. For example, all side-channel sources mentioned in the LeaveMeAlone paper have been fixed in recent Android versions.

2. **Permission Requirements:**
   Several vulnerable APIs identified by our framework do not require sensitive permissions, making them difficult to detect through automatic vetting. Our approach, which focuses on polling-like behaviors, can detect these cases regardless of the requested permissions.

3. **Whitelisting:**
   AppGuardian heavily relies on whitelisting to function. In their dataset of 475 apps, they need to suspend 19.3% (92 apps). Our approach would affect only about 40 apps in a dataset of 10,000, which is 20 times larger.

4. **Race Conditions:**
   AppGuardian is susceptible to race conditions during ongoing phishing attacks. If the malicious app detects the victim app before AppGuardian, it can go to the foreground, making it impossible for AppGuardian to suspend it. Our approach does not suffer from this limitation.

**High-Level Comparison:**
This comparison is high-level due to the following reasons:
- All side-channels used are now fixed.
- The off-market vetting system based on dangerous permissions lacks details and is challenging to reproduce.
- The source code for the app and vetting system is not available.

### Limitations

**Source Code Availability:**
Our tool currently requires access to the Android framework's source code to extract argument semantics. This limits its use to AOSP and excludes systems from other vendors like Samsung or Huawei. Extending the analysis to the bytecode level could address this, but it would lose important information such as argument names.

**Phishing Variants:**
Our on-device detection system can identify and stop classic phishing attacks but may struggle with new variants, such as those involving generic error messages or luring victims to re-enter credentials. These variants do not necessarily rely on polling, and their effectiveness is currently unknown.

### Related Work

**Detecting Side-Channel Attacks:**
Several works have focused on finding vulnerable APIs leading to state inference attacks. Examples include Chen et al. [6], who found information leakage in the `/proc/$PID/statm` file, and Bianchi et al. [4], who identified leaks in the procfs filesystem. Recent proposals, such as [12] and [11], have also contributed to this area.

**Phishing Attacks and Defense:**
Phishing on Android is a form of User Interface attack, with various configurations like task hijacking and fake notifications. Defensive approaches include OCR techniques to detect spoofed UIs, visual similarity perception, and trusted activity chains. LeaveMeAlone [38] is another related work, discussed in Section IX-E.

### Conclusion

In this work, we demonstrate that the Android platform remains vulnerable to state inference attacks. We systematically extended the attack surface and designed an automatic framework that discovered 18 new vulnerable APIs affecting Android 8.1 and 9. We characterized polling behaviors in both malicious and benign apps, enabling the design of a new on-device detection mechanism that blocks state inference attacks with negligible overhead and without sacrificing usability.

### Acknowledgements

We thank our shepherd, Ben Andow, and the anonymous reviewers for their constructive feedback. We also extend our gratitude to Betty Sebright for her support over the past years.

### References

[1] Jagdish Achara. Unveiling and Controlling Online Tracking. PhD thesis, 2016.

[2] Efthimios Alepis and Constantinos Patsakis. "Trapped by the UI: The Android Case". In Proceedings of the International Symposium Research in Attacks, Intrusions, and Defenses (RAID), pages 334–354, 2017.

[3] AndroidRank. Open Android market data since 2011. https://www.androidrank.org. Accessed: January 8, 2021.

[4] Antonio Bianchi, Jacopo Corbetta, Luca Invernizzi, Yanick Fratantonio, Christopher Kruegel, and Giovanni Vigna. What the App is That? Deception and Countermeasures in the Android User Interface. In Proceedings of the 2015 IEEE Symposium on Security and Privacy (S&P), pages 931–948, 2015.

[5] Broadcom. Android malware finds new ways to derive current running tasks. https://community.broadcom.com/symantecenterprise/community-tasks. Accessed: January 8, 2021.

[6] Qi Alfred Chen, Zhiyun Qian, and Z. Morley Mao. Peeking into Your App Without Actually Seeing It: UI State Inference and Novel Android Attacks. In Proceedings of the 23rd USENIX Conference on Security Symposium, pages 1037–1052, 2014.

[7] Brett Cooley, Haining Wang, and Angelos Stavrou. Activity Spoofing and Its Defense in Android Smartphones. In Proceedings of the International Conference on Applied Cryptography and Network Security (ACNS), 2014.

[8] Corbin Davenport. Google will remove Play Store apps that use Accessibility Services for anything except helping disabled users. https://www.androidpolice.com/2017/11/12/google-will-remove-play-store-apps-use-accessibility-services-anything-except-helping-disabled-users/. Accessed: January 8, 2021.

[9] dtmilano. AndroidViewClient. https://github.com/dtmilano/AndroidViewClient. Accessed: January 8, 2021.

[10] Adrienne Porter Felt and David Wagner. Phishing on Mobile Devices. In Proceedings of the Web 2.0 Security and Privacy, 2011.

[11] Earlence Fernandes, Qi Alfred Chen, Justin Paupore, Georg Essl, J. Alex Halderman, Z. Morley Mao, and Atul Prakash. "Android UI Deception Revisited: Attacks and Defenses". In Financial Cryptography and Data Security, pages 41–59, 2017.

[12] Yanick Fratantonio, Chenxiong Qian, Simon Chung, and Wenke Lee. Cloak and Dagger: From Two Permissions to Complete Control of the UI Feedback Loop. In Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2017.

[13] Google. UsageStatsManager Documentation. https://developer.android.com/reference//app/usage/UsageStatsManager. Accessed: January 8, 2021.

[14] Yacong Gu, Yao Cheng, Lingyun Ying, Yemian Lu, Qi Li, and Purui Su. "Exploiting Android System Services Through Bypassing Service Helpers". In Security and Privacy in Communication Networks, 2017.

[15] Chandraiah Jagadeesh. Red Alert 2.0: Android Trojan targets security-seekers. https://news.sophos.com/en-us/2018/07/23/red-alert-2-0-android-trojan-targets-security-seekers/. Accessed: January 8, 2021.

[16] Kaspersky. Asacub Android Trojan: From Information Stealing to Financial Fraud. https://www.kaspersky.com/about/press-releases/2016-asacub-android-trojan-from-information-stealing-to-financial-fraud. Accessed: January 8, 2021.

[17] Sun Kevin. BankBot Found on Google Play and Targets Ten New UAE Banking Apps. https://blog.trendmicro.com/trendlabs-security-intelligence/bankbot-found-google-play-targets-ten-new-uae-banking-apps/. Accessed: January 8, 2021.

[18] Nick Kralevich. Honey, I Shrunk the Attack Surface. Adventures in Android Security Hardening. https://www.blackhat.com/docs/us-17/thursday/us-17-Kralevich-Honey-I-Shrunk-The-Attack-Surface-Adventures-In-Android-Security-Hardening.pdf. Accessed: January 8, 2021.

[19] Luka Malisa, Kari Kostiainen, and Srdjan Capkun. Detecting Mobile Application Spoofing Attacks by Leveraging User Visual Similarity Perception. In Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy (CODASPY), pages 289–300, 2017.

[20] Lorenz Nicole. MysteryBot - the Android malware that’s keylogger, ransomware, and trojan. https://blog.avira.com/mysterybot-the-android-malware-thats-keylogger-ransomware-and-trojan/. Accessed: January 8, 2021.