}
}
//将显示明细写成一个方法
func(this *FamilyAccount) showDetails(){
fmt.Println("-----------------当前收支明细记录-----------------")
ifthis.flag {
fmt.Println(this.details)
} else{
fmt.Println("当前没有收支明细... 来一笔吧!")
}
}
//将登记收入写成一个方法，和*FamilyAccount 绑定
func(this *FamilyAccount) income(){
fmt.Println("本次收入金额:")
fmt.Scanln(&this.money)
this.balance+= this.money // 修改账户余额
fmt.Println("本次收入说明:")
fmt.Scanln(&this.note)
//将这个收入情况，拼接到 details 变量
//收入 11000 1000 有人发红包
this.details+= fmt.Sprintf("\n 收入\t%v\t%v\t%v", this.balance, this.money,this.note)
this.flag= true
}
//将登记支出写成一个方法，和*FamilyAccount 绑定
func(this *FamilyAccount) pay(){
fmt.Println("本次支出金额:")
fmt.Scanln(&this.money)
//这里需要做一个必要的判断
ifthis.money > this.balance {
fmt.Println("余额的金额不足")
//break
}
this.balance-= this.money
fmt.Println("本次支出说明:")
fmt.Scanln(&this.note)
this.details+= fmt.Sprintf("\n 支出\t%v\t%v\t%v", this.balance, this.money,this.note)
this.flag= true
}
//将退出系统写成一个方法,和*FamilyAccount 绑定
func(this *FamilyAccount) exit(){
fmt.Println("你确定要退出吗?y/n")
choice :=""
for{
fmt.Scanln(&choice)
ifchoice== "y" || choice == "n" {
break
}
fmt.Println("你的输入有误，请重新输入 y/n")
}
ifchoice== "y" {
this.loop=false
}
}
//给该结构体绑定相应的方法
//显示主菜单
func(this *FamilyAccount) MainMenu() {
for{
fmt.Println("\n-----------------家庭收支记账软件-----------------")
fmt.Println(" 1 收支明细")
fmt.Println(" 2 登记收入")
fmt.Println(" 3 登记支出")
fmt.Println(" 4 退出软件")
fmt.Print("请选择(1-4)：")
fmt.Scanln(&this.key)
switch this.key{
case"1":
this.showDetails()
case"2":
this.income()
case"3":
this.pay()
case"4":
this.exit()
default :
fmt.Println("请输入正确的选项..")
}
if!this.loop{
break
}
}
}
12.4.3 对项目的扩展功能的练习
1) 对上面的项目完成一个转账功能
2) 在使用该软件前，有一个登录功能，只有输入正确的用户名和密码才能操作.
第 章项目 客户信息关系系统
13 2-
13.1 项目需求分析
1) 模拟实现基于文本界面的《客户信息管理软件》。
2) 该软件能够实现对客户对象的插入、修改和删除（用切片实现），并能够打印客户明细表
13.2 项目的界面设计
 主菜单界面
 添加客户界面
 修改客户界面
 删除客户界面
 客户列表界面
13.3 客户关系管理系统的程序框架图
13.4 项目功能实现-显示主菜单和完成退出软件功能
 功能的说明
当用户运行程序时，可以看到主菜单，当输入5时，可以退出该软件.
 思路分析
编写customerView.go ,另外可以把 customer.go 和 customerService.go 写上.
 代码实现
customerManage/model/customer.go
package model
//声明一个 Customer结构体，表示一个客户信息
type Customerstruct {
Idint
Namestring
Genderstring
Ageint
Phonestring
Email string
}
//使用工厂模式，返回一个 Customer的实例
funcNewCustomer(id int,name string, gender string,
age int,phonestring, email string )Customer{
return Customer{
Id : id,
Name :name,
Gender :gender,
Age: age,
Phone:phone,
Email :email,
}
}
customerManage/service/customerService.go
package service
import(
"go_code/customerManage/model"
)
//该CustomerService， 完成对Customer的操作,包括
//增删改查
type CustomerService struct {
customers []model.Customer
//声明一个字段，表示当前切片含有多少个客户
//该字段后面，还可以作为新客户的id+1
customerNum int
}
customerManage/view/customerView.go
package main
import(
"fmt"
)
type customerViewstruct {
//定义必要字段
key string //接收用户输入...
loopbool //表示是否循环的显示主菜单
}
//显示主菜单
func(this *customerView) mainMenu(){
for{
fmt.Println("-----------------客户信息管理软件-----------------")
fmt.Println(" 1 添 加 客 户")
fmt.Println(" 2 修 改 客 户")
fmt.Println(" 3 删 除 客 户")
fmt.Println(" 4 客 户 列 表")
fmt.Println(" 5 退 出")
fmt.Print("请选择(1-5)：")
fmt.Scanln(&this.key)
switch this.key{
case"1" :
fmt.Println("添 加 客 户")
case"2" :
fmt.Println("修 改 客 户")
case"3" :
fmt.Println("删 除 客 户")
case"4" :
fmt.Println("客 户 列 表")
case"5" :
this.loop=false
default :
fmt.Println("你的输入有误，请重新输入...")
}
if!this.loop{
break
}
}
fmt.Println("你退出了客户关系管理系统...")
}
funcmain() {
//在main 函数中，创建一个customerView,并运行显示主菜单..
customerView:=customerView{
key : "",
loop: true,
}
//显示主菜单..
customerView.mainMenu()
}
13.5 项目功能实现-完成显示客户列表的功能
 功能说明
 思路分析
 代码实现
customerManage/model/customer.go
customerManage/service/customerService.go[增加了两个方法]
customerManage/view/customerView.go
package main
import(
"fmt"
"go_code/customerManage/service"
)
type customerViewstruct {
//定义必要字段
key string //接收用户输入...
loopbool //表示是否循环的显示主菜单
//增加一个字段customerService
customerService *service.CustomerService
}
//显示所有的客户信息
func(this*customerView)list(){
//首先，获取到当前所有的客户信息(在切片中)
customers := this.customerService.List()
//显示
fmt.Println("---------------------------客户列表---------------------------")
fmt.Println("编号\t姓名\t 性别\t年龄\t电话\t邮箱")
fori:= 0;i <len(customers); i++ {
//fmt.Println(customers[i].Id,"\t",customers[i].Name...)
fmt.Println(customers[i].GetInfo())
}
fmt.Printf("\n-------------------------客户列表完成-------------------------\n\n")
}
//显示主菜单
func(this *customerView) mainMenu(){
for{
fmt.Println("-----------------客户信息管理软件-----------------")
fmt.Println(" 1 添 加 客 户")
fmt.Println(" 2 修 改 客 户")
fmt.Println(" 3 删 除 客 户")
fmt.Println(" 4 客 户 列 表")
fmt.Println(" 5 退 出")
fmt.Print("请选择(1-5)：")
fmt.Scanln(&this.key)
switch this.key{
case"1" :
fmt.Println("添 加 客 户")
case"2" :
fmt.Println("修 改 客 户")
case"3" :
fmt.Println("删 除 客 户")
case"4" :
this.list()
case"5" :
this.loop=false
default :
fmt.Println("你的输入有误，请重新输入...")
}
if!this.loop{
break
}
}
fmt.Println("你退出了客户关系管理系统...")
}
funcmain() {
//在main 函数中，创建一个customerView,并运行显示主菜单..
customerView:=customerView{
key : "",
loop: true,
}
//这里完成对customerView结构体的 customerService 字段的初始化
customerView.customerService= service.NewCustomerService()
//显示主菜单..
customerView.mainMenu()
}
13.6 项目功能实现-添加客户的功能
 功能说明
 思路分析
 代码实现
customerManage/model/customer.go
customerManage/service/customerService.go
customerManage/service/customerView.go
//得到用户的输入，信息构建新的客户，并完成添加
func(this *customerView) add(){
fmt.Println("---------------------添加客户---------------------")
fmt.Println("姓名:")
name:=""
fmt.Scanln(&name)
fmt.Println("性别:")
gender:= ""
fmt.Scanln(&gender)
fmt.Println("年龄:")
age :=0
fmt.Scanln(&age)
fmt.Println("电话:")
phone:=""
fmt.Scanln(&phone)
fmt.Println("电邮:")
email :=""
fmt.Scanln(&email)
//构建一个新的 Customer实例
//注意: id 号，没有让用户输入，id 是唯一的，需要系统分配
customer:=model.NewCustomer2(name, gender,age, phone, email)
//调用
ifthis.customerService.Add(customer) {
fmt.Println("---------------------添加完成---------------------")
} else{
fmt.Println("---------------------添加失败---------------------")
}
}
13.7 项目功能实现-完成删除客户的功能
 功能说明
 思路分析
 代码实现
customerManage/model/customer.go [没有变化]
customerManage/service/customerService.go
customerManage/view/customerView.go