### NFC Attack Surface Exploration: Fuzzing the NFC Stack

#### Introduction
When considering the attack surface introduced by NFC (Near Field Communication) in a device, the most obvious starting point is the NFC software stack. This stack typically includes a driver for the NFC chip, a communication library, and OS code to handle incoming NFC payloads, including various types of NDEF (NFC Data Exchange Format) messages.

In Android, the NFC handling code is structured as shown in Figure 5. In MeeGo, the structure is similar, as depicted in Figure 6.

**Figure 5: NFC Handling Code in Android**

**Figure 6: NFC Handling Code in MeeGo**

In such a complex stack, there are likely to be bugs that could allow remote compromise of NFC-enabled devices. While some components in Android are Java-based, making memory corruption less likely, native code is always involved at the lowest levels.

#### Approaches to Finding Vulnerabilities
There are several approaches to finding vulnerabilities in the NFC stack:
1. **Reverse Engineering and Analysis**: Even proprietary drivers can be reverse-engineered.
2. **Open Source Auditing**: The library `libnfc.so` in Android is open source and can be audited.
3. **Fuzzing**: Setting up a fuzzing environment to test the NFC protocol stack.

#### Fuzzing Setup
To simulate various NFC tags, card emulation is used, where an NFC device acts like a passive tag. We found that:
- An SCL 3711 Contactless Mobile Reader can emulate a Type 2 Mifare UltraLight tag using `libnfc`.
- An ACS ACR122U can emulate a Type 4 Mifare DESFire tag using `libnfc`.
- An SCL3711 can perform LLCP (Logical Link Control Protocol) transactions using `nfcpy`.

**Figure 7: Fuzzing Using This Setup Can Test Any of the Indicated Areas**

Sometimes, the hardware devices hang and need to be restarted. To simulate unplugging and replugging the USB card reader, we use a DLink DUB-H7 7-Port USB Hub with port power control. The hardware setup is shown in Figure 8.

**Figure 8: Fuzzing Hardware Setup**

To simulate placing the device onto the emulated tag, we can:
- Kill and restart the NFC process.
- Use SIGSTOP and SIGCONT signals.
- Enable and disable the NFC service, as done in the Android Settings app.

#### Fuzzing Test Cases
Fuzzing test cases can be generated in two ways:
1. **Generation-Based**: Creating test cases from scratch using the specification as a guide.
2. **Mutation-Based**: Injecting faults into existing valid data.

Using multiple fuzzers is often more effective than using a single fuzzer.

#### Protocol Layer Fuzzing
On the protocol level, we used a mutation-based approach due to the simplicity of the fields being fuzzed. We can only emulate Type 2 and Type 4 tags and perform basic LLCP connections. For these types, we can fuzz at a low level, just after the anti-collision layer. We cannot fuzz Type 1 (Topaz) or Type 3 (FeliCa) protocols at this time.

For low-level fuzzing of tags, we used modified versions of `nfc-emulate-forum-tag2` and `nfc-emulate-forum-tag4` programs from `libnfc`. For Type 2 tags, we fuzzed the non-NDEF bytes in the MiFare Ultralightâ€™s memory. For Type 4 tags, we fuzzed the Capability Container file.

For LLCP, we used modified versions of the `nfcpy` software suite to fuzz the CONNECT packet and the I (Information) packet.

#### Application Layer Fuzzing
Application layer fuzzing involves creating fuzzed NDEF messages and sending them to the device using available low-level protocols. We started with a mutation-based approach, adding mutations to different types of NDEF messages. Additionally, we used a generation-based approach to create more specialized NDEF fuzzing test cases.

We utilized the Sulley Fuzzing Framework to generate test cases. For example:

```bash
$ ./ndef_short_uri.py | grep -v "^\["
D1010B550036333633393934373931
D1010B550136333633393934373931
D1010B550236333633393934373931
...
```

In the above output, the fifth byte is being mutated.

```bash
$ ./ndef_short_uri.py | grep "total cases"
[10:08.08] fuzzed 0 of 1419 total cases
```

Sulley is designed for test case generation, sending, and monitoring. Our modifications to Sulley allow it to print out test cases in a format that can be easily read by another program responsible for sending and monitoring the test device.

#### Results - Nexus S
We fuzzed the NFC stack on a Nexus S phone running Android 2.3.3. This was the most current version when we started fuzzing.

**Protocol Layer**
- **Type 2 (UL)**: 4000 test cases, 18 bytes of MiFare UL memory.
- **Type 4 (DESFire)**: 4000 test cases, 15 bytes of Capacity Container.
- **ISO 14443 A-4 (PDU)**: Nothing interesting to fuzz.

**Figure 7: Fuzzing Using This Setup Can Test Any of the Indicated Areas**

By systematically testing the NFC stack, we can identify and mitigate potential security vulnerabilities, enhancing the overall security of NFC-enabled devices.