### Optimized Text

#### Committing Sensitive Keystrokes to the Targeted User App
After isolating and translating sensitive keystrokes, we must commit them to the targeted user application. As a pre-IME defense, untrusted IME applications cannot be used to commit sensitive strings. Therefore, we need to find an isolated data path that bypasses IME apps. Our solution involves adding an independent system service that can securely transmit sensitive strings from the secure world to the user app via a trusted path.

Typically, a user app's edit box receives character strings through a local binder named `IInputContext.Stub`, which is initialized in the Input Method Manager Service (IMMS) at the start of input. To implement our solution, we modify the Input Method Framework (IMF) to create an additional binder client for our new service, called `commit-proxy`. This `commit-proxy` can then commit sensitive strings to the user app. Since the new Inter-Process Communication (IPC) and service are independent of IME apps, sensitive strings in this data path remain inaccessible to any IMEs.

**Creating a New IPC:**
Figure 6 illustrates how the `commit-proxy` establishes a new IPC with a user app. When a user taps on the edit box, the user app requests the IMMS to call back functions in the currently active IME app. Hooks in the `startInput` method are invoked, and the pre-IME Guard generates a token for the IMMS, containing a unique ID to identify the current user app. The IMMS then requests the `commit-proxy` to bind the user app with two parameters: the token and `InputConnection`. Upon receiving the bind request, the `commit-proxy` makes a Secure Monitor Call (SMC) to verify the token's ID. If valid, the `commit-proxy` adds the new connection; otherwise, it refuses the bind request. If any sensitive string is detected, the pre-IME Guard sends it to the `commit-proxy` via shared memory, which then commits it using the new IPC.

**STIE Initialization:**
Figure 5 shows the STIE initialization process. Hooks in the IMF and event subsystem notify the pre-IME Guard in the secure world to initialize the STIE. In modern mobile devices with touch screens, we assume a user intends to type text when they tap the screen after a soft keyboard appears. The touch screen driver in the secure world provides a secure way to obtain touch coordinates. The pre-IME Guard also needs to securely obtain the soft keyboard layout, which is display data in the normal world managed by the IME app and stored in the framebuffer.

To securely obtain the soft keyboard layout, the pre-IME Guard takes two steps:
1. **Secure Display Controller Configuration:** The display controller is reconfigured as secure by the TrustZone Trusted Zone Peripheral Controller (TZPC), preventing the normal world from altering it. This ensures the pre-IME Guard receives accurate information about the framebuffer's start region.
2. **Frame Buffer Reading and Layout Verification:** After a touch event, the pre-IME Guard reads the framebuffer and checks the layout's correctness. As a proof-of-concept, IM-Visor preloads layout information for popular IME apps and compares the hash of the current layout with the preloaded standard one. Future work will involve using efficient Optical Character Recognition (OCR) to obtain the current layout.

**Keystroke Translation:**
Once a keystroke is identified, the pre-IME Guard translates it into a character. For Latin languages, each keystroke directly corresponds to a character. For non-Latin languages, candidate words often need to be displayed. We focus on Latin language translation with a QWERTY keyboard. For example, if a user types "a" on the soft keyboard, the secure touch coordinates are translated into the character "a".

#### Addressing Challenge 3: Retaining Extra Benefits
To retain the extra benefits of IME apps (e.g., auto-correction and word association), one approach is to implement these features in IM-Visor. However, this would render all IME apps useless and require significant additional coding. Instead, we design a replay mechanism that allows IME apps to handle non-sensitive keystrokes. A daemon thread, the `Replay Executor`, runs in the System Server process to replay touch events. If touch events need to be replayed, the pre-IME Guard places them in shared memory, and the `Replay Executor` reads and replays them.

In the Android system, activities and services maintain a thread loop to receive touch events or other input events via an input channel. The `Replay Executor` only receives touch events from the pre-IME Guard and triggers the event subsystem to complete the "maintain&selection" process. The `Replay Executor` encapsulates non-sensitive keystrokes in the required Android touch event format, enqueues them, and wakes up the dispatch thread to handle the rest.

#### Minor Challenge 4: Buffer Revisiting Threat
As discussed in Section III-A, we discovered a new data leakage path from a user app to an IME app through revisit APIs. To prevent this, we hook all revisit APIs (see Listing 1) and analyze the revisited character strings to detect and block sensitive text when a third-party IME app revisits the buffer of a user app.

#### Implementation
We implemented IM-Visor on a Samsung 4412 development board equipped with ARM TrustZone. The Android and kernel versions on the board are 4.0 and 3.0.2, respectively. The pre-IME Guard runs as a trustlet in the secure world, while the `commit-proxy` and `Replay Executor` run in the Android System Server process. Both components passively wait to receive data from the pre-IME Guard.

When a user types in the STIE, the pre-IME Guard receives keystrokes from the touch screen, translates them into a character string, and returns it through either the green or red path, depending on its sensitivity (see Figure 4).

**Hooks in the IMF and Event Subsystem:**
To minimize system overhead, we hook only three classes in the Android framework: `InputMethodManagerService`, `TouchInputMapper`, and `BaseInputConnection`. A TrustZone driver is installed in the Linux kernel to enable jumps to the secure world. Hooks make SMC calls through this driver, allowing the pre-IME Guard to intervene in the data flows in the Android IMF. Listing 1 details the hooks we placed in Android.

**Secure Touch Screen and Display Controller Reconfiguration:**
When a user intends to type in an IME soft keyboard, the STIE must be initialized. We reconfigure the Interrupt Security Register (ICDISR), Priority Mask Register (ICCPMR), and Enable Set Register (ICDISER) to make the touch input a secure interrupt and mask all non-secure interrupts. In the CPU Interface Control Register (ICCICR), FIQEn and EnableS are set to 1 to enable FIQ interrupts. The FIQ bit in the Secure Configuration Register (SCR) is also set to 1 to ensure FIQ interrupt routing to TrustZone monitor mode. Additionally, the touch screen and display controller are set as secure peripherals with TZPC. As a proof-of-concept, we implemented single-touch in the separate touch driver and left multi-touch for future work.

#### Evaluation
**Security Evaluation:**
Malicious IME apps and Potentially Harmful Applications (PHAs) can upload user-sensitive data to remote servers, causing harm. To evaluate IM-Visor's effectiveness against malicious IME apps, we repackaged popular IME apps to send sensitive keystrokes to a remote server. We tested whether these repackaged apps could still leak sensitive keystrokes under IM-Visor's protection. To evaluate IM-Visor's effectiveness against PHAs, we analyzed network packets from commonly used IME apps. Without IM-Visor, these apps may send user-sensitive keystrokes; with IM-Visor, such keystrokes are not found in their network packets.

**Defense against Malicious IME Apps:**
We repackaged three popular third-party IME apps: Sogou IME, QQ IME, and TouchPal IME. After decompiling the APK files, we added code to intercept and upload user keystrokes to a remote server. The modified apps were recompiled, signed, and installed on the terminal. After setting the repackaged IME as the default, we observed that the entered user name and password were sent to the remote server, confirming the need for IM-Visor's protection (see Figure 8).

This optimized text aims to provide a clearer, more coherent, and professional explanation of the described system and its implementation.