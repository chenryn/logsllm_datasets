第38章。Entity Framework允许使用对象关系，而不是基于表的关系。
37.1.1 示例数据库
本章的例子使用AdventureWorks2014数据库。这个数据库可以从
https://msftdbprodsamples. 
codeplex.com/中下载。通过这个链接可以在一个zip文件中下载
AdventureWorks2014数据库备份。选择推荐下载Adventure Works 2014 Full Database
Backup.zip。解压缩文件之后，可以使用SQL Server Management Studio恢复数据库备份，
如图37-1所示。如果系统上没有SQL 
Server 
Management 
Studio，可以从
http://www.microsoft.com/downloads上下载一个免费的版本。
图37-1
这一章使用的SQL Server是SQL Server LocalDb。这个数据库服务器安装为Visual
Studio的一部分。也可以使用任何其他SQL Server版本，只需要改变相应的连接字符串。
37.1.2 NuGet包和名称空间
ADO.NET示例的示例代码利用以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    Microsoft.Extensions.Configuration
    Microsoft.Extensions.Configuration.Json
    System.Data.SqlClient
名称空间：
    Microsoft.Extensions.Configuration
    System
    System.Data
    System.Data.SqlClient
    System.Threading.Tasks
    static System.Console
37.2 使用数据库连接
为了访问数据库，需要提供某种连接参数，如运行数据库的计算机和登录证书。使用
SqlConnection类连接SQL Server。
下面的代码段说明了如何创建、打开和关闭AdventureWorks2014数据库的连接（代码
文件ConnectionSamples/Program.cs）。
    public static void OpenConnection()
    {
      string connectionString = @"server=(localdb)\MSSQLLocalDB; " +
                  "integrated security=SSPI; " +
                  "database=AdventureWorks2014";
      var connection = new SqlConnection(connectionString);
      connection.Open();
      // Do something useful
      WriteLine("Connection opened");
      connection.Close();
    }
  注意： SqlConnection类实现了IDisposable接口，其中包含Dispose方法和Close
方法。这两个方法的功能相同，都是释放连接。这样，就可以使用using语句来关闭连
接。
在该示例的连接字符串中，使用的参数如下所示。连接字符串中的参数用分号分隔
开。
● server=（localdb）\ MSSQLLocalDB：表示要连接到的数据库服务器。SQL Server
允许在同一台计算机上运行多个不同的数据库服务器实例，这里连接到localdb服
务器和SQL Server实例MSSQLLocalDB。如果使用的是本地安装的SQL Server，就
把这一部分改为server=（local）。如果不使用关键字server，还可以使用Data
Source。要连接到SQL 
Azure中，可以设置Data
Source=servername.database.windows.net。
● database=AdventureWorks2014：这描述了要连接到的数据库实例。每个SQL Server
进程都可以提供几个数据库实例。如果不使用关键字database，还可以使用Initial
Catalog。
● integrated security=SSPI：这个参数使用Windows Authentication连接到数据库，如果
使用SQL Azure，就需要设置User Id和Password。
  注意： 在http://www.connectionstrings.com上可以找到许多不同数据库的连接
字符串信息。
这个ConnectionSamples示例使用定义好的连接字符串打开数据库连接，再关闭该连
接。一旦打开连接后，就可以对数据源执行命令，完成后，就可以关闭连接。
37.2.1 管理连接字符串
不在C#代码中硬编码连接字符串，而是最好从配置文件中读取它。在.NET 
4.6
和.NET Core 1.0中，配置文件可以是JSON或XML格式，或从环境变量中读取。在下面的
示例中，连接字符串从一个JSON配置文件中读取（代码文件ConnectionSamples 
/
config.json）：
    {
      "Data": {
        "DefaultConnection": {
        "ConnectionString":
          "Server=(localdb)\\MSSQLLocalDB; Database=AdventureWorks2014;
            Trusted_Connection=True; "
        }
      }
    }
使用NuGet包Microsoft.Framework.Configuration定义的Configuration 
API可以读取
JSON文件。为了使用JSON配置文件，还要添加NuGet包
Microsoft.Framework.Configuration.Json。为了读取配置文件，创建ConfigurationBuilder。
AddJsonFile扩展方法添加JSON文件config. Json，从这个文件中读取配置信息——假定它
与程序在相同的路径中。要配置另一条路径，可以调用SetBasePath方法。调用
ConfigurationBuilder的Build方法，从所有添加的配置文件中构建配置，返回一个实现了
IConfiguration接口的对象。这样，就可以检索配置值，如
Data:DefaultConnection:ConnectionString的配置值（代码文件ConnectionSamples 
/
Program.cs）：
    public static void ConnectionUsingConfig()
    {
      var configurationBuilder =
        new ConfigurationBuilder().AddJsonFile("config.json");
      IConfiguration config = configurationBuilder.Build();
      string connectionString = config["Data:DefaultConnection:ConnectionString"]
;
      WriteLine(connectionString);
    }
37.2.2 连接池
几年前实现两层应用程序时，最好在应用程序启动时打开连接，关闭应用程序时，关
闭连接。现在就不应这么做。使用这个程序架构的原因是，需要一定的时间来打开连接。
现在，关闭连接不会关闭与服务器的连接。相反，连接会添加到连接池中。再次打开连接
时，它可以从池中提取，因此打开连接会非常快速，只有第一次打开连接需要一定的时
间。
连接池可以用几个选项在连接字符串中配置。选项Pooling设置为false，会禁用连接
池；它默认为启用：Pooling = true。Min Pool Size和Max Pool Size允许配置池中的连接
数。默认情况下，Min Pool Size的值为0, Max Pool Size的值为100。Connection Lifetime定
义了连接在释放前，连接在池中保持不活跃状态的时间。
37.2.3 连接信息
在创建连接之后，可以注册事件处理程序，来获得一些连接信息。SqlConnection类定
义了InfoMessage和StateChange事件。每次从SQL Server返回一个信息或警告消息时，就触
发InfoMessage事件。连接的状态变化时，就触发StateChange事件，例如打开或关闭连接
（代码文件ConnectionSamples / Program.cs）：
    public static void ConnectionInformation()
    {
      using (var connection = new SqlConnection(GetConnectionString()))
      {
        connection.InfoMessage
 += (sender, e) =>
        {
        WriteLine($"warning or info {e.Message}");
        };
        connection.StateChange
 += (sender, e) =>
        {
        WriteLine($"current state: {e.CurrentState}, before: {e.OriginalState}");
        };
        connection.Open();
        WriteLine("connection opened");
        // Do something useful
      }
    }
运行应用程序时，会触发StateChange事件，看到Open和Closed状态：
    current state: Open, before: Closed
    connection opened
    current state: Closed, before: Open
37.3 命令
37.2节“使用数据库连接”简要介绍了针对数据库执行的命令。简言之，命令就是一个
要在数据库上执行的包含SQL语句的文本字符串。命令也可以是一个存储过程，如本节后
面所述。
把SQL子句作为一个参数传递给Command类的构造函数，就可以构造一条命令，如
下例所示（代码文件CommandSamples/Program.cs）：
    public static void CreateCommand()
    {
      using (var connection = new SqlConnection(GetConnectionString()))
      {
        string sql = "SELECT BusinessEntityID, FirstName, MiddleName, LastName " 
+
        "FROM Person.Person";
        var command = new SqlCommand(sql, connection);
        connection.Open();
        // etc.
      }
    }
通过调用SqlConnection的CreateCommand方法，把SQL语句赋予CommandText属性，
也可以创建命令：
    SqlCommand command = connection.CreateCommand();
    command.CommandText = sql;
命令通常需要参数。例如，下面的SQL语句需要一个EmailPromotion参数。不要试图
使用字符串连接来建立参数。相反，总是应使用ADO.NET的参数特性：
    string sql = "SELECT BusinessEntityID, FirstName, MiddleName, LastName " +
        "FROM Person.Person WHERE EmailPromotion = @EmailPromotion";
    var command = new SqlCommand(sql, connection);
将参数添加到SqlCommand对象中时，有一个简单的方式可以使用Parameters属性返回
SqlParameterCollection和AddWithValue方法：
    command.Parameters.AddWithValue("EmailPromotion", 1);
有一个更有效的方式，但需要更多的编程工作：通过传递名称和SQL数据类型，使用
Add方法的重载版本：
    command.Parameters.Add("EmailPromotion", SqlDbType.Int);
    command.Parameters["EmailPromotion"].Value = 1;
也可以创建一个SqlParameter对象，并添加到SqlParameterCollection中。
  注意： 不要试图给SQL参数使用字符串连接。它是经常被用于SQL注入攻
击。使用SqlParameter对象会抑制这种攻击。
定义好命令后，就需要执行它。执行语句有许多方式，这取决于要从命令中返回什么
数据。SqlCommand类提供了下述可执行的命令：
● ExecuteNonQuery（）——执行命令，但不返回任何结果。
● ExecuteReader（）——执行命令，返回一个类型化的IDataReader。
● ExecuteScalar（）——执行命令，返回结果集中第一行第一列的值。
37.3.1 ExecuteNonQuery（）方法
这个方法一般用于UPDATE、INSERT或DELETE语句，其中唯一的返回值是受影响
的记录个数。但如果调用带输出参数的存储过程，该方法就有返回值。示例代码在
Sales.SalesTerritory表中创建了一个新的记录。这个表把TerritoryID作为主键，TerritoryID
是一个标识列，因此创建记录时不需要提供它。这个表的所有列都不允许空值（见图37-
2），但其中的一些使用默认值，例如一些销售和成本列、rowguid和ModifiedDate。
rowguid列从newid函数中创建，ModifiedDate列从getdate中创建。创建新行时，只需要提
供Name、CountryRegionCode和Group列。ExecuteNonQuery方法定义了SQL 
INSERT语
句，添加了参数值，并调用SqlCommand类的ExecuteNonQuery方法（代码文件
CommandSamples / Program.cs）：
      public static void ExecuteNonQuery
      {
        try
        {
          using (var connection = new SqlConnection(GetConnectionString()))
          {
          string sql = "INSERT INTO [Sales].[SalesTerritory] "  +
            "([Name], [CountryRegionCode], [Group]) " +
            "VALUES (@Name, @CountryRegionCode, @Group)";
          var command = new SqlCommand(sql, connection);
          command.Parameters.AddWithValue("Name", "Austria");
          command.Parameters.AddWithValue("CountryRegionCode", "AT");
          command.Parameters.AddWithValue("Group", "Europe");
          connection.Open();
          int records = command.ExecuteNonQuery();
          WriteLine($"{records} inserted");
          }
        }
        catch (SqlException ex)
        {
          WriteLine(ex.Message);
        }
      }
图37-2
ExecuteNonQuery（）方法返回命令所影响的行数，它是一个整数。第一次运行这个
方法时，插入了一个记录。第二次运行相同的方法时，会得到一个异常，因为唯一索引有
冲突。Name定义了唯一的索引，只允许使用一次。第二次运行该方法时，需要先删除前
面创建的记录。
37.3.2 ExecuteScalar（）方法
在许多情况下，需要从SQL语句返回一个结果，如给定表中的记录个数，或者服务器
上的当前日期/时间。ExecuteScalar（）方法就可以用于这些场合：
    public static void ExecuteScalar()
    {
      using (var connection = new SqlConnection(GetConnectionString()))
      {
        string sql = "SELECT COUNT(＊) FROM Production.Product";
        SqlCommand command = connection.CreateCommand();
        command.CommandText = sql;
        connection.Open();
        object count = command.ExecuteScalar();
        WriteLine($¡±counted {count} product records¡±);
      }
    }
该方法返回一个对象，根据需要，可以把该对象强制转换为合适的类型。如果所调用
的SQL只返回一列，则最好使用ExecuteScalar（）方法来检索这一列。这也适合于只返回
一个值的存储过程。
37.3.3 ExecuteReader（）方法
ExecuteReader（）方法执行命令，并返回一个DataReader对象，返回的对象可以用于
遍历返回的记录。ExecuteReader示例使用一个SQL INNER JOIN子句，如下面的代码片段
所示。这个SQL 
INNER 
JOIN子句用来获取单一产品的价格历史。价格历史存储在表
Production.ProductCostHistory中，产品的名称在Production.Product表中。在SQL语句中，
需要的一个参数是产品标识符（代码文件CommandSamples / Program.cs）：
    private static string GetProductInformationSQL() =>
      "SELECT Prod.ProductID, Prod.Name, Prod.StandardCost, Prod.ListPrice, " +
        "CostHistory.StartDate, CostHistory.EndDate, CostHistory.StandardCost " +
      "FROM Production.ProductCostHistory AS CostHistory  " +
      "INNER JOIN Production.Product AS Prod ON " +
        "CostHistory.ProductId = Prod.ProductId " +
      "WHERE Prod.ProductId = @ProductId";
当调用SqlCommand对象的ExecuteReader方法时，返回SqlDataReader。注意，
SqlDataReader使用完后需要销毁。还要注意，这次SqlConnection对象没有在方法的最后明
确地销毁。给ExecuteReader方法传递参数CommandBehavior.CloseConnection，会在关闭
读取器时，自动关闭连接。如果没有提供这个设置，就仍然需要关闭连接。
从数据读取器中读取记录时，Read方法在while循环中调用。Read方法的第一个调用
将光标移动到返回的第一条记录上。再次调用Read时，光标定位到下一个记录（只要还
有记录）。如果下一步位置上没有记录了，Read方法就返回false。访问列的值时，调用不
同的GetXXX方法，如GetInt32、GetString和GetDateTime。这些方法是强类型化的，因为
它们返回所需的特定类型，如int、string和DateTime。传递给这些方法的索引对应于用
SQL SELECT语句检索的列，因此即使数据库结构有变化，该索引也保持不变。在强类型
化的GetXXX方法中，需要注意从数据库返回的null值；此时，GetXXX方法会抛出一个异
常。对于检索的数据，只有CostHistory.EndDate可以为空，所有其他列都由数据库模式定
义为不能是null。在这种情况下为了避免异常，使用C#条件语句？：和
SqlDataReader.IsDbNull方法，检查值是否是null。如果是，就把null分配给可空的
DateTime。只有值不是null，才使用GetDateTime方法访问DateTime 
（代码文件
CommandSamples / Program.cs）：
    public static void ExecuteReader(int productId)
    {
      var connection = new SqlConnection(GetConnectionString());
      string sql = GetProductInformationSQL();
      var command = new SqlCommand(sql, connection);
      var productIdParameter = new SqlParameter("ProductId", SqlDbType.Int);
      productIdParameter.Value = productId;
      command.Parameters.Add(productIdParameter);
      connection.Open();
      using (SqlDataReader reader =
        command.ExecuteReader(CommandBehavior.CloseConnection))
      {
        while (reader.Read()
)
        {
        int id = reader.GetInt32(0);