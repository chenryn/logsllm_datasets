title:Software decoys for insider threat
author:Young Hee Park and
Salvatore J. Stolfo
Software Decoys for Insider Threat ∗
Younghee Park
Department of Computer Science
Columbia University, New York, NY 10027
PI:EMAIL
ABSTRACT
Decoy technology and the use of deception are useful in securing
critical computing systems by confounding and confusing adver-
saries with fake information. Deception leverages uncertainty forc-
ing adversaries to expend considerable effort to differentiate real-
istic useful information from purposely planted false information.
In this paper, we propose software-based decoy system that aims
to deceive insiders, to detect the exﬁltration of proprietary source
code. The proposed system generates believable Java source code
that appear to an adversary to be entirely valuable proprietary soft-
ware. Bogus software is generated iteratively using code obfusca-
tion techniques to transform original software using various trans-
formation methods. Beacons are also injected into bogus software
to detect the exﬁltration and to make an alert if the decoy soft-
ware is touched, compiled or executed. Based on similarity mea-
surement, the experimental results demonstrate that the generated
bogus software is different from the original software while main-
taining similar complexity to confuse an adversary as to which is
real and which is not.
Keywords: decoy, insider attacks, code obfuscation
1.
INTRODUCTION
Information theft by insiders, who exﬁltrate sensitive informa-
tion and intellectual property using legitimate credentials, has been
a serious problem for decades. Software is one of the most valu-
able assets for many organizations and enterprises, and is also the
most lucrative target for insiders. In 2010, according to the FBI, a
former employee of Goldman Sachs, a computer programmer, was
accused of stealing trading software by uploading to a server in
Germany a program implementing its proprietary trading platform
for equity products, and the use of the software made the thief in
excess of 300 million dollars in illicit proﬁts in one year. Clearly,
it is crucial to create an environment in which the most valuable
proprietary software is isolated and protected from such theft.
∗This material is based on work supported by the Defense Ad-
vanced Research Projects Agency (DARPA) under the ADAMS
(Anomaly Detection at Multiple Scales) Program with grant award
number W911NF-11-1-0140.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-1303-2/12/05 ...$10.00.
Salvatore J. Stolfo
Department of Computer Science
Columbia University, New York, NY 10027
PI:EMAIL
Much previous work has focused on the detection of insider at-
tacks that exﬁltrate important and sensitive information, rather than
proprietary software. To detect the exﬁltration, deception-based de-
fense methods (i.e. decoys) are important mechanisms in the pro-
tection of systems, networks, and information. In addition, document-
based decoy system has gained lots of interests for the detection of
insider threats [2, 1]. This decoy system is presented to confuse
and deceive adversaries based on fake information [5, 6, 16].
While previous research has focused on detecting information
leaks, this paper proposes a software-based decoy system to de-
ceive attackers in order to detect software exﬁltration and to track
unauthorized uses. The basic concept of software-based decoys
is similar to the document-based decoy to detect insider attacks.
However, the software-based decoy system prevents insiders that il-
legally obtain proprietary software through deceptive mechanisms [4,
19, 13]. The objective of this paper is to isolate the proprietary
source code from such theft using fake source code as decoys. By
using software decoys, the proposed system identiﬁes or detects the
exﬁltration of proprietary software in enterprises or government or-
ganizations from insiders. For the design of software-based decoy
system, this paper addresses the two research problems: (1) How
to generate fake (bogus) software? (2) How to detect software ex-
ﬁltration and unauthorized use?
First, to generate bogus software, the proposed system analyzes
and obfuscates original source code to generate bogus programs
that are compilable, realistic looking and dissimilar syntactically to
the original program, through static obfuscation. Second, to de-
tect or to track software exﬁltration, the generated bogus programs
include “beacons” that serve as a trap-based defense system. The
proposed system designs various types of beacons to detect any
possible unauthorized use of bogus software by providing various
beacons for PDF, HTML as well as software itself.
Software decoys are composed of bogus programs that are de-
signed to deceive adversaries. Bogus programs are synthesized
by software that is automatically transformed from original source
code, but designed to be dissimilar to the original. By using the
bogus programs along with beacons, the proposed system aims to
detect internal and external adversaries who exﬁltrate proprietary
(bogus) software. The experiments reported in this paper evaluate
decoy properties of bogus software by using various metrics for
similarity [17] and software complexity[7]. As a result, the bogus
software has low similarity and analogous software complexity to
the original software. As code obfuscation is performed several
times, we can obtain bogus software that is completely different
from the original software.
The proposed system makes several contributions over the typi-
cal advantages of decoy systems. First, we have developed a new
software-based decoy system that integrates deception mechanisms
using software obfuscation and beaconing techniques. Second, we
have designed fake (bogus) software by using code obfuscation
techniques. Third, we have proposed a method to detect insiders
based on bogus software instead of fake information, and track the
use of the software decoy based on beacons. Lastly, we have im-
plemented a software-decoy system and evaluated it through real
open source projects that are popularly used in the real world.
The rest of the paper is organized as follows. Section 2 explains
the desirable property of the software decoy system. Section 3
gives an overview of the proposed system and describes the de-
tailed methods used to design software-based decoys. Section 4
describes the implementation of system prototypes and the results
of that experiment. Lastly, section 5 reviews related work, and sec-
tion 6 states the conclusion drawn from this paper.
2. SOFTWARE DECOY PROPERTIES
Software decoys should be designed carefully with the knowl-
edge and capability of adversaries in mind. In addition, software
decoys should have several properties for our goal, which are sim-
ilar to document-based decoys [5]. Software decoys system should
be inherently enticing. The decoy system must detect the exﬁltra-
tion of bogus software that has been purposely planted in the sys-
tem. To provide the means of detecting the exﬁltration, the system
we developed injects a beacon into the bogus software. In addition,
the decoy system should be clearly conspicuous to adversaries. The
bait, any bogus software, should be accessible and visible to adver-
saries and hence provided in a honeypot or a local system. Lastly,
the decoy system has a large set of bogus programs from original
projects that are different from every other one. That is, variability
should provide a decoy system with a variety of attractive bogus
programs. Along with these properties, software decoys have to
satisfy additional core properties as follows.
• Compilable and Executable: The bogus programs should be
compilable without any error. The programs should be also
executable for a reasonable amount of time so that the decoy
can detect the software exﬁltration and identify bogus soft-
ware. The program that is to be successfully compiled should
be run to produce a part of functions of the original software.
These two properties are essential requirements to make the
bogus software believable.
• Indistinguishable: An adversary should not be able to rec-
ognize whether a bogus program has been transformed from
particular source code or not. The adversary should have
great difﬁculty in distinguishing bogus programs from a lot
of other source code.
In other words, we should produce
an unbounded collection of distinct and variable bogus pro-
grams. This property is crucial so that adversaries cannot
easily determine whether particular software is fake, nor that
it is a derivative of open source software, non-proprietary
project.
• Believable: The transformed program should logically look
like a normal program. This property makes adversaries trust
it as if the bogus software were true and real source code.
While in the process of transforming an original seed pro-
gram, we should try to maintain the original program struc-
ture and keep logical control ﬂow so that the bogus software
look likes real runnable source code.
We will show in Section 4 that additional bogus software proper-
ties can be validated through extensive experiments with real open
source projects. Widely accepted software metrics [17, 7], such as
similarity and software complexity, provide evidence of the practi-
cality of our proposed bogus software generator.
3. SOFTWARE-BASED DECOY SYSTEM AR-
CHITECTURE
This section will provide an overview of the system architecture
that we designed and implemented to create a software-based decoy
system. The system depicted Figure 1 is given an original software
project including several programs (in Java) as an input seed. It
then produces a bogus project having a series of bogus programs.
There are three requisite processes to create the software decoy:
program analysis, code obfuscator, and program generator.
Figure 1: Software-based Decoy System Architecture
3.1 Analyzing Source Code
For any given input project seeding the synthesis of a software
decoy, the proposed system ﬁrst analyzes the syntax and the struc-
ture of each program in the project as in Figure 1. ANTLR (An-
other Tool for Language Recognition) [14] was used to extract in-
formation about syntax and the static semantics of each program.
ANTLR is a parser generator with LL(∗) based on a context-free
grammar argumented with syntactic and semantic predicates [15].
The current prototype targets Java-based projects, but the proposed
system is easily extended because ANTLR provides a ﬂexible and
language-agnostic grammar development environment.
As for program analysis of a target project, we obtain informa-
tion about what classes/variables/methods are deﬁned, how they
are related and where they are used. The extracted information in-
cludes (1) package declaration and import information, (2) class
and interface names, (3) member variables names and types, (4)
member method names, types, and parameter information, (5) map-
ping between package and class/interface, (6) mapping between
member variables and method, (7) mapping between class and in-
terface, and (8) the scope of local variables. The information is
signiﬁcant because when source code is transformed from one to
another, other places matched with or related to the code must be
consistently modiﬁed in order to make the overall project compil-
able and runnable.
Finally, as in Figure 1, through program analysis, we create two
databases that are used to generate a bogus project. First, we an-
alyze the syntax of Java standard APIs to generate a database of
standard classes and methods. This database is important to ob-
fuscate a target program carefully since the APIs should be mostly
preserved during code transformation. Second, we extract sample
classes and methods from Java sample source code collected from
the Internet. This database is utilized to insert junk code in obfus-
cating target programs.
3.2 Obfuscating Source Code
OriginalSource ProgramsA ProjectProgramAnalysisCode ObfuscatorProgramGeneratorBogusProgramsA Bogus ProjectBogus Programsnn-1n-21..Software Version Control System (CVS)(1) Java Standard Classes and Method(2) Classes and Methods of Junk Codes(3) Glossary and Dictionary Words       (1)(2)(2)Grammar Express for ANTLRSyntax AnalysisStatic Semantic AnalysisStatement TransformationStructure TransformationSemantic TransformationJunk InsertionGenerating Bogus ProgramsConstructing CVSEmbedding BeaconsAfter determining the syntax and the structure of target programs,
the code obfuscator transforms original programs into bogus pro-
grams by making thorough changes in the form, syntax, or seman-
tics of the original programs. This is called a code transforma-
tion as Deﬁnition 1. The proposed system modiﬁes the semantics
of the program slightly while the program is being continuously
transformed. The proposed system has four different code transfor-
mation methods as follows. All the code transformation methods
are closely related and the effects are interchangeably affected in
programs since relevant statements should be changed together.
1. Statement Transformation: This transformation renames all
the variables and methods for each statement in a program.
Based on syntax information from program analysis, it al-
ters the name for all classes, methods, and variables in an
original program. When changing all the names, the asso-
ciated statements for variables, methods, and classes should
be automatically renamed in all of the programs in a given
project. The statement transformation replaces the original
names for classes, methods and variables with bogus ones.
When changing the names of classes and methods, the bogus