[73] Zhang, Y., Genkin, D., Katz, J., Papadopoulos, D., Papamanthou,
C.: vSQL: Verifying arbitrary SQL queries over dynamic outsourced
databases. In: IEEE Symposium on Security and Privacy (S&P) 2017
(2017)
[74] Zhang, Y., Genkin, D., Katz, J., Papadopoulos, D., Papamanthou,
C.: vSQL: Verifying arbitrary SQL queries over dynamic outsourced
databases. In: Security and Privacy (SP), 2017 IEEE Symposium on.
pp. 863–880. IEEE (2017)
[75] Zhang, Y., Genkin, D., Katz, J., Papadopoulos, D., Papamanthou, C.:
vRAM: Faster veriﬁable RAM with program-independent preprocessing.
In: Proceeding of IEEE Symposium on Security and Privacy (S&P)
(2018)
APPENDIX A
REED-SOLOMON CODE
Let L be a subset of F, an RS code is the evaluations of
a polynomial ρ(x) of degree less than m (m  k. Protocol 4 is
an interactive proof to prove μ =
a∈H f (a) with soundness
F + negl(κ)). The proof size and the veriﬁcation time are
O( L
O(log2 |L|) and the prover time is O(|L| log |L|).
(cid:8)
APPENDIX C
x
∗∗
PROOF OF THEOREM 1
(cid:8)
(cid:8)
a∈H l(a) · q(a) =
such that com =
|H|·l(x)·q(x)−|H|·ZH(x)h(x)−μ
∗ ∈ RS[L,|H| + 1]
/∈ RS[L,|H| + 1]
∗∗|L), if the points v
∗|L), i.e. com is not a valid commitment.
Proof. Completeness. By the deﬁnition of l(x) and q(x), if
a∈H g(a) = g(0) ·
μ = f (t), then μ =
|H| by Lemma 3. Thus, p(x) =
|H|·x
=
, which is in RS[L,|H| − 1]. The rest follows the
g(x)−g(0)
completeness of the LDT protocol and the GKR protocol.
Soundness. Let εLDT, εMT, εGKR be the soundness error of the
LDT, Merkle tree and GKR protocols. There are two cases for
a malicious prover P.
Case 1: (cid:2)l
MT.Commit(l
• By the check in step 6, if com is not a valid Merkle tree
root, the veriﬁcation passes with probability less than εMT.
• If ∃l
such that
i opened by P in step 5
∗
MT.Commit(l
∗
the veriﬁcation passes with
v
i
probability no more than εMT.
(cid:5)= q(ai) for
some i, the veriﬁcation passes with probability less than
εGKR.
(x)· q(x) /∈ RS[L, 2|H| + 1], by the checks
of LDT in step 4, the veriﬁcation passes with probability no
more than εLDT.
Case 2: ∃l
∗|L). Let
(cid:8)
MT.Commit(l
(cid:8)
∗ (cid:5)=
∗
a∈H l
f
h ∈ RS[L,|H|+1], p
∗
(cid:8)
(a)·q(a)−μ
∗
|H|
such that com =
∗|H and f
(x) =
∗ (cid:5)=
∗
, pp). Suppose μ
(cid:8)
(a)q(a). Then by Lemma 3, for all
(a)·a) =
(cid:8)
∗ (cid:5)= 0.
∗ ∈ RS[L,|H| + 1]
= l
∗
i Wi(x), then com = Commit(f
/∈ RS[L,|H|−1], as
=
∗
a∈H(p
(a) · q(a)) − μ
i returned by P in step 7 is q
∗
N
i=1 c
(t), then μ
• Otherwise, as l
• If the output q
(ai) for some i,
(cid:5)= l
com
∗∗
∗∗
a∈H(l
∗
i
∗
∗
c
∗
∗
∗
|H|·l
Therefore,
a∈H
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
873
∗
i
• If the output q
i returned by P in step 7 q
∗
• Similar to case 1, if the commitment in step 3 is not a
valid Merkle tree root, or the points opened by P in step 5
∗, the veriﬁcation passes with
are inconsistent with h or l
probability no more than εMT.
(cid:5)= q(ai) for some
i, the veriﬁcation passes with probability no more than εGKR.
∗ · q ∈ RS[L, 2|H| + 1], either h /∈
• Otherwise, as l
RS[L,|H|+1] or p /∈ RS[L,|H|−1] as explained above. By
the check in step 4, the veriﬁcation passes with probability
no more than εLDT.
By the union bound, the probability of the event of a mali-
cious prover is no more than O(εLDT +εMT +εGKR). As stated
) and
in Section II, εLDT = O(
εMT = negl(λ). Therefore, with proper choice of parameters,
the probability is ≤ negl(λ).
|L|
|F| )+negl(κ), εGKR = O( log2 N|F|
APPENDIX D
PROOF OF THEOREM 2
(cid:4)∗
(cid:4)∗
(cid:8)
(a) =
a∈H l
(cid:4)∗
Proof. Completeness. It follows the completeness of Proto-
col 2.
Soundness. It follows the soundness of Protocol 2 and the
random linear combination. In particular, in Case 2 of the proof
of Theorem 1, if ∃l
(cid:4)∗ ∈ RS[L,|H| + κ + 1], it can always be
(x) − ZH(x)r
∗
∗
(cid:8)
uniquely decomposed as l
(x) such
(x) = l
(x) is |H|
∗
∗
(cid:8)
that
(a) and the degree of l
a∈H l
∗ (cid:5)= μ =
(a)·q(a)) =
∗
(cid:8)
(cid:8)
and the degree of r(x) is κ. If μ
a∈H(l
(a) · q(a)), let S
∗
∗
∗
(cid:8)
(x) is
(a) where s
a∈H s
=
committed by P in step 5, then
(a)·q(a)+s
(cid:4)∗
∗
a∈H(αl
(a)) =
= αμ + S if and only if α = S−S
μ∗−μ , which happens
αμ
with probability 1/|F|. The probability of other cases are the
same as the proof of Theorem 1, and we omit the details here.
Zero knowledge. The simulator is given in Figure 4.
To prove
in
zkVPD.Commit are both uniformly distributed. In S2, steps
1, 2 and 9 are the same as the real world in Protocol 3. No
message is sent in steps 4, 8 and 10.
sim in S1
(cid:4)
zero knowledge,
a∈H(l
∗
and l
+ S
∗
∗
l
(cid:4)
(cid:4)
In step 3 and 7, ssim and s are both randomly selected and
their commitments and evaluations are indistinguishable. As
r(x) is a degree-κ random polynomial in the real world in
Protocol 3, κ evaluations of l
(x) opened in step 7 are inde-
pendent and randomly distributed, which is indistinguishable
from step 7 of S2 in the ideal world. Finally, in step 7 of the
ideal world, V∗ receives κ evaluations of hsim at point indexed
by I. Together with l
sim · q and ssim, by Lemma 4, the view
(cid:4)
of steps 5-7 simulated by LDT.S is indistinguishable from the
(cid:4) · q and s, which completes the proof.
real world with h, l
Our zkVPD protocol is also a proof of knowledge. Here
we give the formal deﬁnition of knowledge soundness of a
zkVPD protocol in addition to Deﬁnition 3 and prove that our
protocol has knowledge soundness.
Knowledge Soundness. For any PPT adversary A, there exists
a PPT extractor E such that given access to the random tape
(cid:2)
Protocol 4 (Univariate Sumcheck). Let f be a degree k univariate
polynomial on F with degree less than k and H, L be a multiplicative
coset of F such that H ⊂ L ⊂ F and |L| > k. To prove
a∈H f (a), a univariate sumcheck protocol has the following
μ =
algorithms.
• SC.com SC.Commit(f ):
1) P computes polynomial h such that f (x) = g(x) + ZH(x) ·
2) P commits to the vectors using Merkle tree rootf
h(x). P evaluates of f|L and h|L.
MT.Commit(f|L) and rooth
V com = (rootf , rooth).
MT.Commit(h|L). P sends
• (cid:3)SC.Prove(f ), SC.Verify(com, μ)(cid:4):
1) Let p(x) =
2) P
and
|H|·f (x)−μ−|H|·ZH(x)h(x)
the
|H|·x
invoke
V
.
low
degree
test:
(cid:3)LDT.P((f, h), p), LDT.V((k, k − |H|),|H| − 1)(cid:4)(L).
If
the test fails, V aborts and output 0. Otherwise, at then end
of the test, V needs oracle access to κ points of f, h and p in
L. We denote their indices as I.
3) For each index i ∈ I, P opens MT.Open(i, f|L) and
MT.Open(i, h|L).
4) V executes MT.Verify for all points opened by P. If any
5) V completes the low degree test with these points. If all checks
veriﬁcation fails, abort and output 0.