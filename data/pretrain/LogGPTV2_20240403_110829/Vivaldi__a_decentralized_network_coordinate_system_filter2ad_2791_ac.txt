node was assigned eight neighbors: the four immediately adjacent
to it and four chosen at random (on average, the random neighbors
will be far away). At each step, each node decides to communicate
either with an adjacent neighbor or a faraway neighbor. Speciﬁ-
cally, each node chooses the faraway neighbor set with probability
p. Then a speciﬁc node to sample is chosen from the set at random.
Figure 8 shows the e(cid:11)ect of p on the ﬁnal accuracy of the coor-
dinates. When half of the communication is to distant nodes, co-
ordinates converge quickly. Convergence slows as the proportion
of distant nodes increases, but similarly accurate coordinates are
60
40
20
)
s
m
(
r
o
r
r
e
n
a
i
d
e
m
0
0
p = 0.50
p = 0.20
p = 0.10
p = 0.05
p = 0.02
1000
2000
3000
samples
Figure 8: The e(cid:11)ect of long-distance communication on the accuracy
of the coordinates. Each line in the graph plots prediction error over
time for an experiment in which nodes contact distant nodes (as op-
posed to nearby nodes) with probability p at each time step.
eventually chosen for small proportions of distant nodes, suggest-
ing that even when only 5% of the samples involve distant nodes,
skewed coordinate placements like in Figure 7 will be avoided.
4.4 Adapting to network changes
Because Vivaldi constantly recomputes coordinates, it naturally
adapts to changes in the network. To test how well Vivaldi responds
to changes we created a synthetic “Transit-Stub” topology of 100
hosts using the ITM tool [2]. We used Vivaldi to ﬁnd coordinates
for the 100 hosts; Vivaldi found a 6-dimensional ﬁt using 32 ran-
domly chosen neighbors. We then changed the network topology
by increasing the length of one of the stub’s connection to the core
by a factor of 10. Figure 9 shows the median of the absolute error
predictions made by each node over time. Prior to time 100 seconds
the nodes have stabilized and the median prediction error is around
15ms. At time 100 the topology is changed to include the much
longer transit-stub link. Shortly after the change the median error
rises to 25ms the network quickly re-converges (by time 120ms)
to a new stable conﬁguration. The error is higher during this time
period than at 99ms because the new conﬁguration is more di(cid:14)cult
to model. To show this, we restore the original conﬁguration at
time 300s. The nodes quickly reconverge to positions which give a
median error of again, around 15ms.
Vivaldi also scales to large networks. The algorithm uses a con-
stant amount of storage on each node, and as shown in the previous
section can use measurements of tra(cid:14)c that would have been sent
anyway. The algorithm has no requirements that scale even loga-
rithmically in the number of nodes, much less linearly.
The one exception is startup cost for an initial network. A net-
work of millions of nodes cannot coordinate itself from scratch in a
constant amount of time. However, networks of millions of nodes
tend not to spring up all at once. They start as smaller networks and
grow incrementally. Once there is a critical mass of well-placed
nodes in a Vivaldi network, a new node joining the system needs
to make few measurements in order to ﬁnd a good place for itself.
That is, once there are enough nodes in the system, the joining cost
for a new node is only a small constant number of network samples,
regardless of the size of the network.
To demonstrate this claim, we initialized a 1,000-node network
using the King data set. Once that network had converged on accu-
rate coordinates, we added 1,000 new nodes, one at a time, measur-
ing the actual (not estimated) prediction error of each newly placed
node as a function of the number of samples obtained. Each new
node’s prediction error is as low as it will ever be after about 20
samples. New nodes are able to converge quickly because they be-
gin with a large initial time-step.
30
)
s
m
(
r
o
r
r
E
n
a
i
d
e
M
20
10
0
100
200
time (sec)
300
Figure 9: Vivaldi is able to adapt to changes in the network. In this
experiment, we constructed a 100 node GTITM topology and allowed
Vivaldi to determine coordinates for the nodes. The median error is
plotted above against time. At time 100 one of the transit stub links
is made 10 time larger; after around 20 seconds the system has recon-
verged to new coordinates. The error of the new system is larger in the
original conﬁguration. At time 300 the link goes back to its normal size
and the system quickly reconverges to the original error.
s
r
i
a
P
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
s
r
i
a
P
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
1.0
0.8
0.6
0.4
0.2
0.0
1.0
0.8
0.6
0.4
0.2
0.0
0
0
Vivaldi
GNP best
Vivaldi
GNP best
3
3
1
1
Relative Error
Relative Error
2
2
Figure 10: The cumulative distribution of prediction error for 2-
dimensional Euclidean coordinates chosen by Vivaldi and GNP on the
PlanetLab data set (top) and the King data set (bottom).
4.5 Accuracy
To evaluate Vivaldi’s accuracy, we compared it against GNP [15],
a centralized algorithm, on the PlanetLab and King data sets. Fig-
ure 10 compares the cumulative distribution of prediction error for
the 2-dimensional Euclidean coordinates chosen by Vivaldi and
GNP for both the PlanetLab and King data sets, using using 32
neighbors (Vivaldi) or landmarks (GNP). Vivaldi’s error is compet-
itive with that of GNP.
In Section 4.3 we discussed how Vivaldi can avoid “folding” the
coordinate space by communicating with some distant nodes. We
also ﬁnd that neighbor selection a(cid:11)ects accuracy in another way:
preferentially collecting RTT samples from some nodes that are
nearby in the network improves prediction accuracy. This was ﬁrst
demonstrated by PIC [3]. In the experiments presented in this sec-
tion, each Vivaldi node took measurements from 16 nearby neigh-
bors (found using the simulator’s global knowledge of the network)
and 16 random neighbors. Because GNP’s performance depends
on the choice of landmarks in the network, we performed 64 GNP
1.0
0.8
0.6
0.4
0.2
s
r
i
a
P
e
d
o
N
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
0.0
0.0
4
8
16
32
64
128
0.5
1.0
Relative Error
1.5
2.0
1.0
0.8
0.6
0.4
0.2
s
r
i
a
P
f
o
n
o
i
t
c
a
r
F
e
v
i
t
a
l
u
m
u
C
0.0
0.0
King
PlanetLab
0.5
1.0
1.5
2.0
Best Indirect RTT / Direct RTT
Figure 11: The cumulative distribution of prediction error for 3-
dimensional coordinates chosen by Vivaldi using di(cid:11)erent numbers of
neighbors.
Figure 12: The cumulative distribution of the ratios of the RTTs of
the best two-hop path to the direct path between each pair of King and
PlanetLab nodes. The best indirect path usually has lower RTT than
the direct path.
experiments with random landmark sets and chose the set that gave
the lowest median error.
The number of neighbors also a(cid:11)ects the accuracy of Vivaldi.
Figure 11 shows the distribution of RTT prediction errors for vary-
ing numbers of neighbors using 3-dimensional coordinates. The
neighbors were chosen using half nearby neighbors as described
above. Vivaldi’s performance increases rapidly until about 32 neigh-
bors, after which time it does not improve much. GNP requires
fewer neighbors than Vivaldi (it works well with around 16), but
Vivaldi is less sensitive to neighbor placement and can use any node
in the system as a neighbor.
5. MODEL SELECTION
Vivaldi was inspired by analogy to a real-world (and thus three-
dimensional Euclidean) mass-spring system. As discussed in Sec-
tion 2, the algorithm can use other coordinate spaces by redeﬁning
the coordinate subtraction, vector norm, and scalar multiplication
operations. In this section, we consider a few possible coordinate
spaces that might better capture the Internet’s underlying structure
for the King and PlanetLab data sets.
5.1 Triangle inequalities
Before considering any speciﬁc coordinate spaces, let us ﬁrst
consider how well we can expect to do. Almost any coordinate
space we might consider satisﬁes the triangle inequality, which
states that the distance directly between two nodes A and C should
should be less than or equal to the distance along a path detouring
from A to B and then to C. One should only expect to be able to
ﬁnd a coordinate space consistent with a set of inter-node latencies
if the latencies themselves satisfy the triangle inequality.
Figure 12 presents an evaluation of the extent of such violations.
For each pair of nodes, we found the lowest-RTT path through any
intermediate node and calculated the ratio of the RTTs of the indi-
rect and direct paths. Figure 12 plots the cumulative distribution of
these ratios for the PlanetLab and King data sets. The vast majority
of node pairs in the King data set are part of a triangle violation:
these small violations are due mainly to measurement inaccuracy.
A smaller number of severe violations are present in both datasets,
as well as in the analysis of Tang and Crovella [29]. Because only
around ﬁve percent of node pairs have a signiﬁcantly shorter two-
hop path, we expect that both data sets will be “embeddable” in a
Euclidean space.
We also count the number of triples (i; j; k) that violate the con-