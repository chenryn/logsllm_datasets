a
i
t
n
e
u
q
e
S
 30000
 25000
 20000
 15000
 10000
 5000
 0
Android-CBC
Android-XTS
MobiPluto-Pub
MobiPluto-PDE
d
d
-
W
rite
d
d
-
R
e
a
d
B
B
o
n
nie
+
o
n
nie
+
+
-
W
rite
+
-
R
e
a
d
Figure 3: Sequential Throughput test of dd and
Bonnie++ in KB/s
how this leakage can aﬀect deniability and how to avoid this
leakage. It is the subject of future work to further under-
stand this.
6.2 Performance Evaluation
In this section, we describe experimental results of Mobi-
Pluto prototype and explain the performance impact on the
device. We summarize our ﬁndings and provide conclusions.
The main diﬀerence between MobiPluto and the default
Android is that MobiPluto uses 1) AES-XTS and 2) thin
volumes, so we intend to understand how these two points
impact the performance. We use three experiments to un-
derstand the performance diﬀerences among 1) the default
Android FDE, 2) the XTS Android FDE (i.e., only replace
the AES-CBC of Android FDE with AES-XTS), 3) the pub-
lic mode of MobiPluto, 4) and the PDE mode of MobiPluto.
We conduct the experiments on the internal storage of a LG
Nexus 4.
of=test.dbf
bs=400M count=1
First of all, we use a popular Linux command tool, “dd”, to
measure the storage performance of the four systems. For
the write speed, we execute following command, “time dd
if=/dev/zero
conv=
fdatasync”. It measures the time for writing a 400MB ﬁle to
the storage. Note that “conv=fdatasync” ensures the data
is written to the disk instead of a RAM buﬀer.
In addi-
tion, we use “time dd if=234.mp4 of=/dev/null bs=400M”
to measure the read speed. Here “234.mp4” is a multimedia
ﬁle and its size is 3 GB. Note that “dd” command tests the
sequential I/O performance. Additionally, we use a popu-
lar benchmark, Bonnie++ [20], to test the sequential I/O
operations. We conduct each experiment 10 times, and the
average results and standard deviations are shown in Fig-
ure 3. We can see that the AES-XTS has a small impact
on the read speed, and the use of thin volumes has little
inﬂuence on the performance.
We use AndroBench [25], a popular storage benchmark
for Android-based mobile devices, to conduct the second ex-
periment. AndroBench measures the sequential and random
I/O operations and SQLite transactions. We repeat the ex-
periment 10 times. Figure 4 shows the I/O access speed that
includes sequential and random read/write. In Figure 4, for
sequential I/O performance, we can get a similar conclu-
sion to “dd” and Bonnie++ tests. For random I/O access,
the AES-XTS also has a small impact on the access speed.
Additionally, Figure 5 shows throughputs of three SQLite
transactions, which are SQLite-Insert, SQLite-Update, and
387
)
s
/
B
M
(
t
u
p
h
g
u
o
r
h
T
 25
 20
 15
 10
 5
 0
Android-CBC
Android-XTS
MobiPluto-Pub
MobiPluto-PDE
Seq-Read Seq-Write Rnd-Read Rnd-Write
Figure 4: I/O Throughput test of AndroBench in
MB/s (Seq: Sequential, Rnd: Random)
d
n
o
c
e
S
r
e
P
s
n
o
i
t
c
a
s
n
a
r
T
 100
 80
 60
 40
 20
 0
Android-CBC
Android-XTS
MobiPluto-Pub
MobiPluto-PDE
SQLite-Insert SQLite-Update SQLite-Delete
Figure 5: The SQLite performance test of An-
droBench in transactions per second
SQLite-Delete. Though AES-XTS decreases the throughput
of I/O access, it improves the storage performance of SQLite,
compared with AES-CBC. However, we can see that from
the experiment results, the use of thin volumes decreases the
performance. On the whole, the storage performance is not
signiﬁcantly aﬀected.
We use Bonnie++ [20], a benchmark suit conducting tests
on hard drives and ﬁle systems, for the third experiment.
Figure 6 shows the number of ﬁle system operations can be
done in one second. We can see from Figure 6 that both
AES-XTS and thin provisioning have a low performance
overhead on ﬁle system operations, and it gives us a good re-
sult that MobiPluto is competitive with the default Android
FDE in I/O performance.
Additionally, Bonnie++ shows us the CPU overhead, which
indicates the power consumption diﬀerence. The CPU over-
head shows the CPU requirement of encryption and space
allocation, so we can get the power consumption result from
it, as shown in Figure 7. We can see that the AES-XTS de-
creases the power consumption and the use of thin volumes
has little impact on it. Note that we repeat 10 times for
each experiment with Bonnie++, and we show the averages
and standard deviations of the experiment results.
The initialization time and the booting time are two fac-
tors that aﬀect the user experience. If a user wants to en-
crypt the phone, the default Android FDE performs an in-
place encryption to the internal storage but MobiPluto per-
Android-CBC
Android-XTS
MobiPluto-Pub
MobiPluto-PDE
s
/
s
n
o
i
t
a
r
e
p
O
m
e
t
s
y
S
e
l
i
F
 2000
 1500
 1000
 500
 0
R
S
S
S
R
R
R
n
d
-
S
C
-
C
C
-
R
C
-
D
C
-
C
C
-
R
e
e
k
re
ate
e
a
d
elete
re
ate
e
a
d
C
-
D
elete
Figure 6: File system operations per second mea-
sured with Bonnie++ (Rnd: Random; SC: Sequen-
tial Create; RC: Random Create)
Android-CBC
Android-XTS
MobiPluto-Pub
MobiPluto-PDE
R
S
S
R
R
C
-
R
C
-
D
C
-
R
C
-
D
e
a
d
e
e
k
e
a
d
elete
e
a
d
elete
)
%
(
e
g
a
s
U
U
P
C
 30
 25
 20
 15
 10
 5
 0
S
e
q
-
R
e
w
S
e
q
-
R
rite
n
d
-
S