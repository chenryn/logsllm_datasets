Wireshark 0.99.5(cid:13)
Samba 3.0.24(cid:13)
NetBios(cid:13)
Samba(cid:13)
0(cid:13)
1(cid:13)
4(cid:13)
8(cid:13)
9(cid:13)
13(cid:13)
14(cid:13)
16(cid:13)
18(cid:13)
26(cid:13)
28(cid:13)
30(cid:13)
32(cid:13)
34(cid:13)
36(cid:13)
37(cid:13)
39(cid:13)
Message Type: Fixed(cid:13)
Length: Length(cid:13)
Server Component: Fixed(cid:13)
Command: Fixed(cid:13)
NT Status: Fixed(cid:13)
Flags: Fixed(cid:13)
Flags2: Fixed(cid:13)
Process ID High: Fixed(cid:13)
Signature: Fixed(cid:13)
Reserved: Fixed(cid:13)
Tree ID: Fixed(cid:13)
Process ID: Fixed(cid:13)
User ID: Fixed(cid:13)
Multiplex ID: Fixed(cid:13)
Word Count: Length(cid:13)
Byte Count: Length(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Unused(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Unused(cid:13)
Fixed(cid:13)
Unused(cid:13)
Direction(cid:13)
Requested Dialects: Variable(cid:13)
Requested Dialects: Variable(cid:13)
[144](cid:13)
[144](cid:13)
Requested(cid:13)
Dialecs(cid:13)
39(cid:13)
40(cid:13)
63(cid:13)
64(cid:13)
88(cid:13)
89(cid:13)
112(cid:13)
113(cid:13)
123(cid:13)
124(cid:13)
134(cid:13)
135(cid:13)
149(cid:13)
150(cid:13)
156(cid:13)
157(cid:13)
171(cid:13)
172(cid:13)
182(cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [23](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [24](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [23](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [10](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [10](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [14](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [6](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [14](cid:13)
Buffer Format: Fixed(cid:13)
Name: Variable [11](cid:13)
Unused(cid:13)
Variable [22](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [23](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [22](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [9](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [9](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [13](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [5](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [13](cid:13)
Separator(cid:13)
Unused(cid:13)
Name: Variable [10](cid:13)
Separator(cid:13)
Figure 6: Message format extracted from a Samba negotiate protocol request. On the left we present the
message format from Wireshark.
Keyword
GET
Host
User-Agent
Accept
Accept-Language
Accept-Encoding Accept- Accept-
Accept-Charset
Accept- Accept-
Keep-Alive
Connection
Yes
NS
Yes
Yes
Yes
NS
Yes
Yes
Yes
NS
NS
NS
NS
NS
NS
Yes
Apache Savant Miniweb
Accept
Yes
Yes
NS
Yes
NS
Yes
Table 4: Keywords present in a HTTP GET query
sent to all three HTTP servers and whether they
were properly extracted by our system.
Server Additional keywords found
Apache
Savant
Miniweb N/A
’HTTP/’ (1); ’e’ (1) ; ’Keep-Alive’ (1)
’HTTP/1.’ (1); ’Keep-Alive’ (1); ’:’ (4)
Table 5: Additional keywords found in the HTTP
GET query.
as a partial match. For example, Savant supports the Accept
and Accept-Language ﬁelds but not the Accept-Encoding or
Accept-Charset ﬁelds. For the unsupported ﬁelds, there is a
partial match with Accept. Note that these partial keywords
still mark protocol-dependant data in the message.
Table 5 shows additional keywords, with the number of oc-
currences in parenthesis, that were found in the HTTP GET
query. It includes the HTTP version and another Keep-Alive
keyword, which is diﬀerent from the one shown in Table 4.
This one is the ﬁeld data for the Connection ﬁeld in Ta-
ble 4. We obtained similar results for an IRC login request.
An interested reader can ﬁnd them in Appendix B.3.
8. RELATED WORK
We divide the Related Work into groups dealing with
protocol reverse engineering, other work related to proto-
col message format extraction, and dynamic taint analysis
applications.
Protocol Reverse-engineering: Successful protocol re-
versing projects have so far relied on manual techniques,
which are slow and costly [4, 1, 3, 7, 2]. Our work provides
new automatic techniques that can be used to reduce the
cost and time associated with these projects.
Lim et al [24] addressed the problem of automatically
extracting the format from ﬁles and application data out-
put by a program using binaries. Their approach needs the
user to identify the output functions and their correspond-
ing parameters. This information is rarely available. Our
approach diﬀers in that we do not require any a priori knowl-
edge about the program, only the program binary.
Reverse engineering a protocol strictly from network traces
was ﬁrst addressed in the Protocol Informatics Project [9]
that used sequence alignment algorithms. Recently, Cui et
al [17] have also proposed a method to derive the message
format strictly from application data. Our approach lever-
ages the availability of a protocol implementation, and mon-
itors the program’s processing of the network input.
Additional work on protocol message format: There
has been additional work that can be used in the protocol
reverse-engineering problem. Kannan et al [22] studied how
to extract the application-level structure in application data.
Their work can be used to ﬁnd multiple connections belong-
ing to the same protocol session.
Application dialogue replayers [18, 23, 30], aim to replay
an original protocol session involving two hosts, to a third
host that did not participate in the original session. These
tools need to update user or session dependant information
in the protocol session. Thus, they may eﬀectively extract
a partial session description.
Ma et al [25] use a network-based approach for automati-
cally identifying traﬃc that uses the same application-layer
protocol, without relying on the port number. Their ap-
proach extracts a partial session description from the ﬁrst
64 bytes of the session data. In addition, protocol analyzers
have been widely used in network security [8, 6]. Since many
protocols exist and their speciﬁcation is sometimes complex,
there have been languages and parsers proposed for simpli-
fying the speciﬁcation of network protocols [10, 16, 33].
Dynamic Taint Analysis: Previous work has used dy-
namic taint analysis to tackle problems such as: exploit de-
tection [13, 15, 28, 35], worm containment [14, 34], signature
generation [29], and cross-site scripting detection [36]. We
propose to use dynamic taint analysis as a technique to un-
derstand how a program processes the received application
data.
9. DISCUSSION
In this section we discuss the limitations of our approach
and how we plan to address them in the future.
Input messages: One fundamental limitation is that we
can only obtain the format from the messages given to our
analysis. If some messages never appear, we know nothing
about them. We plan to incorporate static analysis to our
dynamic analysis techniques to deal with this limitation.
Other ﬁeld format attributes:
Currently, our ﬁeld
description only captures a few ﬁeld attributes. Other at-
tributes such as the ﬁeld data type (e.g., integer/string), or
the ﬁeld encoding (e.g., big-endian / litte-endian or ASCII /
EBDIC / Unicode) are currently not extracted. Also, some
ﬁeld properties such as whether a ﬁeld is ﬂoating, that is, if
it can appear in any order in the ﬁeld sequence, that require
analyzing multiple message formats simultaneoulsy are left
up to the analyst. Finally, our analysis works on byte gran-
ularity. Thus, currently we are not able to distinguish ﬁelds
shorter than one byte, such as ﬂags ﬁelds.
Field semantics: Our system provides limited descrip-
tion about how ﬁelds are used. We identify direction ﬁelds
but we do not identify other ﬁeld uses such as timestamps,
checksums or addresses. We expect to be able to extract
more complete semantic information about ﬁelds by using
symbolic execution to understand the way the program han-
dles them.
Message boundaries:
In this paper, we have focus on
ﬁnding the ﬁeld boundaries in a message, assuming a syn-
chronous protocol, which helps us to identify the message
boundaries. But sessions can contain multiple messages, so
we need to identify the message boundaries as well. We hope
to address the problem of identifying message boundaries in
future work.
Robustness against obfuscation:
Although we have
tried to keep our analysis as general as possible, currently,
our techniques are not fully resistant against obfuscation.
Thus, a protocol architect determined to hide her protocol
message format might be able to do so. We plan to study
techniques more robust against obfuscation in future work.
10. CONCLUSION
In this paper we have proposed a new approach for pro-
tocol reverse engineering by using dynamic analysis of pro-
gram binaries implementing a protocol. Compared to pre-
vious work that uses only network traces [17], our approach
can extract more accurate information because the program
binary contains richer protocol semantics.
Our approach, shadowing, is based on the intuition that
the way that an implementation of the protocol processes
the received application data reveals a wealth of data about
the protocol message format. To extract the message for-
mat from the diﬀerent messages that comprise a protocol
we have developed new techniques for identifying diﬃcult-
to-ﬁnd protocol elements such as direction ﬁelds, separators,
multi-byte ﬁxed-length ﬁelds and keywords. Our techniques
are more general than previously proposed ones, and allow
us to extract more reﬁned message formats.
We have implemented our approach in a system called
Polyglot and evaluated it over real world implementations
of ﬁve diﬀerent protocols: DNS, HTTP, IRC, Samba and
ICQ. Our results show accurate message format with min-
imal diﬀerences compared to the manually crafted formats
in a state-of-the-art protocol analyzer. The minimal diﬀer-
ences we ﬁnd are usually due to diﬀerent implementations
handling ﬁelds in diﬀerent ways. Finding such diﬀerences
between implementations is an added beneﬁt, as they are im-
portant for problems such as ﬁngerprint generation, fuzzing,
and error detection.
11. ACKNOWLEDGEMENTS
We would like to thank all members of the BitBlaze group
for helpful discussions. We would also like to thank Christo-
pher Kruegel, Weidong Cui, and the anonymous reviewers
for their help to improve this paper.
12. REFERENCES
[1] How Samba Was Written.
http://samba.org/ftp/tridge/misc/french cafe.txt.
[2] Icqlib: The ICQ Library.
http://kicq.sourceforge.net/icqlib.shtml.
[3] Libyahoo2: A C Library for Yahoo! Messenger.
http://libyahoo2.sourceforge.net.
[4] MSN Messenger Protocol.
http://www.hypothetic.org/docs/msn/index.php.
[5] Qemu: Open Source Processor Emulator.
http://fabrice.bellard.free.fr/qemu/.
[6] Tcpdump. http://www.tcpdump.org/.
[7] The UnOﬃcial AIM/OSCAR Protocol Speciﬁcation.