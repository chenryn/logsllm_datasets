Abusing Bleeding Edge Web 
Standards for AppSec Glory 
Bryant Zadegan  
Ryan Lester 
Advisor/Mentor 
CEO, Co-Founder 
Mach37 
Cyph 
keybase.io/bryant 
PI:EMAIL 
@eganist 
@TheRyanLester 
• Does AppSec stuff, 
usually. 
• Mentors security 
startups, sometimes. 
• “Mentors” others on 
AppSec, occasionally. 
• Paid a buck to make 
Steve Ballmer dance, 
but just once. 
• Runs an E2EE 
communication startup 
• Codes for an E2EE 
communication startup 
• Ran QA automation at a 
rocket factory 
• Got sued by Napster 
(and not for piracy)  
Bleeding Edge Web Standards 
• For Your (Ab)use 
(FOSS + Demo) 
(Demo) 
(Demo) 
Potential Pain: 
But Why? 
Source: Harold & Kumar Go to White Castle 
• New standards are 
frequently drafted. 
• Many introduce 
unforeseen 
complications. 
• Novel uses  
encourage 
future  
tweaks. 
S
R
 I
• Validate resources beyond your trust (e.g. 
CDNs) 
• w3.org/TR/SRI/ 
• caniuse.com/subresource-integrity 
BUILDER DEMO 
heisenberg.co/sridemo/ 
Praise be to the demo gods 
heisenberg.co/sridemo/sameorigin 
(  ͡° ͜ʖ ͡°) 
SRI 
Per the SRI Spec: 
...so we implemented it for you.  
NOTE 
On a failed integrity check, an error event is fired. Developers 
wishing to provide a canonical fallback resource (e.g., a resource 
not served from a CDN, perhaps from a secondary, trusted, but 
slower source) can catch this error event and provide an 
appropriate handler to replace the failed resource with a different 
one.  
BUILDER DEMO 
heisenberg.co/srifallbackdemo/ 
Kneel to the demo gods 
SOURCE (Simplified BSD) 
github.com/cyph/sri-fallback 
Do source gods even exist? 
CSP 
• Combines semi-strict header with strict meta. 
• Allows for pre-loading of trusted complex 
logic. 
• Does not work for the verbs frame-
ancestors, report-uri, or sandbox. 
(We didn’t actually trademark this, but it’s a good name.) 
BUILDER DEMO 
heisenberg.co/metacspdemo/ 
Fall on thy sword for the demo gods. 
CSP 
• Best for adapting a semi-recent application for 
use with CSP. 
• Application’s trusted static logic is allowed to 
execute on initial load. 
• Meta-Hardening prevents dynamic content 
from potentially executing later on. 
• This can break 
sites. Use 
!
– (Chrome 46+ only; no reporting in Firefox 😐) 
• Quickstart: 
Public-Key-Pins
:  
max-age=5184000; includeSubdomains;  
pin-sha256="az9AwClWuHM+fYV+d8Cv9B4sAwdcoUqj93omk18O/pc="; 
pin-sha256="5UONcYAsFtYscIlFlm4+aodoL20RRHzGaOeoSNEZ+iA=" 
"https://report-uri.io/report/[id]/reportOnly" 
• tools.ietf.org/html/rfc7469 
• caniuse.com/hpkp 
HPKP + Rapid Key Rotation can trap content: 
– to enable in-browser code signing 
– control content changes and harden SRI. 
– to enable nuanced web content blocking. (NetSec) 
– to track users… 
– to be total jerks… 
...in ways we shouldn't put in print. 
(Thanks Jann Horn @ Cure53 for putting us onto this!) 
Wait, in-browser code signing? No extensions? 
• Used HPKP Suicide to pin code-signing logic 
and keys into the AppCache/Service Worker. 
• Logic fetches and validates content from a 
different origin. Nearly Trust-On-First-Use. 
This was so novel, Cyph had to file for a patent 
(protecting this is why this slide is even here), 
but you come fairly close to this for free if you... 
Control local storage updates! Harden SRI! 
• Set HPKP max-age to around your deployment 
schedule, but no more than 60 days.  
• Rotate routinely. 
Benefits: retain control of front-end content 
between releases, mitigate risks of SRI hash 
tampering server-side. 
BUILDER DEMO 
redskins.io 
I don't believe in demo gods 
Web Content Gateway e.g. [SomeVendor]?  
Lock your users out of sites even when they're 
not on your network!  
1. For flagged domains, set HPKP headers. 
2. Rotate keys weekly at the web gateway. 
Done! 
(By us disclosing it, is this now prior art? ) 
Oh... https://crt.sh/?id=19538258 
Issuer: 
commonName             = VeriSign Class 3 Public  
                         Primary Certification  
                         Authority - G5 
Subject: 
commonName             = 
organizationalUnitName = Symantec Trust Network 
organizationName       = "Blue Coat Systems, Inc." 
User tracking? 
Well, we really shouldn't talk about this… 
But since this is DEF CON... 
…let's track users! 
Pre-requisites: 
Lots of (sub)domains to pin 
Browsers that allow HPKP incognito 
Rapid Key Rotation 
(Thanks! ) 
Server setup: 
1.
Point *.cyph.wang at the backend server 
2.
Set POST /set to add ${clientIP}-${subdomain} to cache 
and return 200 response with valid HPKP header 
3.
Set GET /check to return 418 error response if ${clientIP}-
${subdomain} is in the cache; otherwise return 200 response (no 
HPKP header) 
4.
Set a 12-hour interval to delete the current TLS key + IP cache then 
generate a new TLS key + cert for [0-31].cyph.wang and $(date 
+%s).cyph.wang 
Client JavaScript: 
1.
GET [0-31].cyph.wang/check and reconstruct a uint32 ID from 
the resulting binary (with each successful request being 0 and each 
failure being 1) 
2.
If ID is 4294967295 (max uint32), assume an error and throw an 
exception 
3.
If ID is 0, generate a new ID via crypto.getRandomValues, convert 
it to binary, iterate over the bits, and POST each 1 bit to the correct index 
within [0-31].cyph.wang/set 
4.
Return final ID to calling code 
Considerations: 
Risk: DoSing tracker domains as a public service 
1. Domain whitelist for your own tracker, or 
2. App-issued and tracker-verified nonce if analytics 
is your business model. 
The pattern we described is among those here: 
https://tools.ietf.org/html/rfc7469#section-5  
BUILDER DEMO 
cyph.wang 
I don't believe in demo gods 
SOURCE (New BSD) 
github.com/cyph/hpkp-supercookie 
Do source gods even exist? 
…to be total jerks? 
we really shouldn't talk about this… 
Who are we kidding?  
This is DEF CON. 
Pre-requisites: 
A high-traffic target 
A way to shell the box 
A free certificate authority 
(Sorry ) 
1. Determine target  
2. Generate ransom keypair (the recovery key)  
3. Pwn  target webserver. 
4. Generate new lockout keypair + CSR  
5.   
6. Profit! 
While owned users > 
security.cert_pinning.enforcement_level = 0,  
visit site to take new header, re-enable. 
SOURCE (New BSD) 
github.com/cyph/ransompkp 
Do source gods even exist? 
Hat Tip 
To Geller Bedoya, Jonn Callahan, Jann Horn (and all of Cure53),  
Samy Kamkar, Jim Manico, Mike McBryde, Garrett Robinson, and 
John Wilander, as well as the Chrome, Firefox, and Let's Encrypt 
security teams for their contributions. 
Thank You! 
Bryant Zadegan 
Ryan Lester 
Advisor/Mentor 
CEO, Co-Founder 
Mach37 
Cyph 
keybase.io/bryant 
PI:EMAIL 
@eganist 
@TheRyanLester