# Abusing Bleeding-Edge Web Standards for AppSec Glory

## Presenters
- **Bryant Zadegan**
  - Advisor/Mentor, Mach37
  - keybase.io/bryant
  - @eganist
  - Primarily involved in AppSec.
  - Occasionally mentors security startups and provides guidance on AppSec.
  - Once paid a dollar to make Steve Ballmer dance.

- **Ryan Lester**
  - CEO & Co-Founder, Cyph
  - @TheRyanLester
  - Leads an end-to-end encrypted (E2EE) communication startup.
  - Previously worked on QA automation at a rocket factory.
  - Was sued by Napster (not for piracy).

## Introduction
This presentation explores how bleeding-edge web standards can be exploited for application security (AppSec). We will demonstrate various techniques using open-source tools and live demos.

## Why Use New Web Standards?
- **Frequent Drafts:** New standards are regularly introduced.
- **Unforeseen Complications:** Many new standards introduce unexpected issues.
- **Innovative Uses:** Novel applications of these standards often lead to future refinements.

## Subresource Integrity (SRI)
- **Purpose:** Validate resources beyond your trust (e.g., CDNs).
- **Specification:** w3.org/TR/SRI/
- **Browser Support:** caniuse.com/subresource-integrity

### Demo
- **Builder Demo:** heisenberg.co/sridemo/
- **Demo with Same Origin:** heisenberg.co/sridemo/sameorigin

**Note:**
On a failed integrity check, an error event is fired. Developers can catch this event and provide a fallback resource from a trusted but slower source.

### Fallback Demo
- **Builder Demo:** heisenberg.co/srifallbackdemo/
- **Source Code (Simplified BSD):** github.com/cyph/sri-fallback

## Content Security Policy (CSP)
- **Features:**
  - Combines semi-strict headers with strict meta tags.
  - Allows pre-loading of trusted complex logic.
  - Does not work for `frame-ancestors`, `report-uri`, or `sandbox`.

### Demo
- **Builder Demo:** heisenberg.co/metacspdemo/

**Best Practices:**
- Ideal for adapting semi-recent applications for CSP.
- Trusted static logic is allowed to execute on initial load.
- Meta-hardening prevents dynamic content from executing later.

**Challenges:**
- Can break sites if not implemented carefully.
- Currently supported in Chrome 46+; no reporting in Firefox.

## Public Key Pinning (HPKP)
- **Usage:**
  - Enables in-browser code signing.
  - Controls content changes and hardens SRI.
  - Facilitates nuanced web content blocking (NetSec).
  - Can be used for user tracking and other nefarious purposes.

### Example Header
```plaintext
Public-Key-Pins: max-age=5184000; includeSubdomains; 
pin-sha256="az9AwClWuHM+fYV+d8Cv9B4sAwdcoUqj93omk18O/pc="; 
pin-sha256="5UONcYAsFtYscIlFlm4+aodoL20RRHzGaOeoSNEZ+iA=";
report-uri="https://report-uri.io/report/[id]/reportOnly"
```

### Specifications and Browser Support
- **RFC:** tools.ietf.org/html/rfc7469
- **Browser Support:** caniuse.com/hpkp

### Rapid Key Rotation
- **Benefits:**
  - Retain control of front-end content between releases.
  - Mitigate risks of SRI hash tampering server-side.
- **Recommendations:**
  - Set HPKP max-age to match deployment schedules (no more than 60 days).
  - Rotate keys routinely.

### Demo
- **Builder Demo:** redskins.io

## Web Content Gateway
- **Use Case:**
  - Lock users out of flagged domains even when they are not on your network.
- **Steps:**
  - Set HPKP headers for flagged domains.
  - Rotate keys weekly at the web gateway.

### Example Certificate
- **Issuer:**
  - Common Name: VeriSign Class 3 Public Primary Certification Authority - G5
- **Subject:**
  - Organizational Unit: Symantec Trust Network
  - Organization: Blue Coat Systems, Inc.

## User Tracking
- **Pre-requisites:**
  - Lots of (sub)domains to pin.
  - Browsers that allow HPKP incognito.
  - Rapid key rotation.

### Server Setup
1. Point *.cyph.wang at the backend server.
2. Set POST /set to add ${clientIP}-${subdomain} to cache and return a 200 response with a valid HPKP header.
3. Set GET /check to return a 418 error response if ${clientIP}-${subdomain} is in the cache; otherwise, return a 200 response (no HPKP header).
4. Set a 12-hour interval to delete the current TLS key + IP cache, then generate a new TLS key + cert for [0-31].cyph.wang and $(date +%s).cyph.wang.

### Client JavaScript
1. GET [0-31].cyph.wang/check and reconstruct a uint32 ID from the resulting binary (with each successful request being 0 and each failure being 1).
2. If ID is 4294967295 (max uint32), assume an error and throw an exception.
3. If ID is 0, generate a new ID via crypto.getRandomValues, convert it to binary, iterate over the bits, and POST each 1 bit to the correct index within [0-31].cyph.wang/set.
4. Return the final ID to the calling code.

### Considerations
- **Risk:** DoSing tracker domains as a public service.
- **Mitigation:**
  - Domain whitelist for your own tracker.
  - App-issued and tracker-verified nonce if analytics is your business model.

### RFC Reference
- **Pattern Description:** tools.ietf.org/html/rfc7469#section-5

### Demo
- **Builder Demo:** cyph.wang

### Source Code (New BSD)
- **GitHub Repository:** github.com/cyph/hpkp-supercookie

## Ransomware with HPKP
- **Pre-requisites:**
  - A high-traffic target.
  - A way to shell the box.
  - A free certificate authority.

### Steps
1. Determine the target.
2. Generate a ransom keypair (the recovery key).
3. Pwn the target web server.
4. Generate a new lockout keypair + CSR.
5. Profit!

### Additional Information
- **While owned users > security.cert_pinning.enforcement_level = 0, visit site to take new header, re-enable.**

### Source Code (New BSD)
- **GitHub Repository:** github.com/cyph/ransompkp

## Acknowledgments
Special thanks to:
- Geller Bedoya
- Jonn Callahan
- Jann Horn (and all of Cure53)
- Samy Kamkar
- Jim Manico
- Mike McBryde
- Garrett Robinson
- John Wilander
- The Chrome, Firefox, and Let's Encrypt security teams for their contributions.

## Contact Information
- **Bryant Zadegan**
  - Advisor/Mentor, Mach37
  - keybase.io/bryant
  - @eganist
  - PI:EMAIL

- **Ryan Lester**
  - CEO & Co-Founder, Cyph
  - @TheRyanLester

Thank you!