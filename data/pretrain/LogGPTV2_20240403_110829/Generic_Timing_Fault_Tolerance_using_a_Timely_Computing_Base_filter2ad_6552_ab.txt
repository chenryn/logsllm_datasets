ity, the process handling write requests is also replicated.
Therefore, when considering write requests the server can
be seen as a replicated state machine. On the other hand,
read requests are made to one or more servers, and served
immediately they are done, concurrently with write re-
quests, internal concurrency control (e.g., critical sections)
not withstanding. This allows the server to process the two
types of requests in an independent manner, for instance us-
ing concurrent threads of execution, one for the writes and
the others for the reads. This independence is particularly
relevant if we consider that the frequency of read requests
is much higher that that of write requests (e.g., interactive
web servers, real-time databases).
2.3. QoS Model
Timing speciﬁcations are usually derived from applica-
tion timeliness requirements. In the current context we fol-
low an end-to-end approach, in which we take into account
the delay of interactions (messages transmitted and/or re-
ceived from the server) in addition to the response time of
the server. These are the relevant timeliness requirements
for the clients interacting with the server.
Since we are not considering an environment of guar-
anteed behavior, time bounds may be violated during ex-
ecution. An adequate approach for dependable operation
is to consider that time bounds have an associated measure
of the probability that they will hold during an interval of
execution. This measure is called coverage (of the assump-
tion) [18]. Therefore, we assume that QoS requirements
can be speciﬁed through hbound, coveragei pairs, that is,
by deﬁning a bound that should be secured with a given
coverage. A generic timing fault tolerance approach must
ensure that despite the occurrence of timing failures of read
or write interactions, the system (including clients and the
replicated server) will remain correct and timely, and QoS
speciﬁcations of the form hbound, coveragei will be se-
cured. Incidentally, we should point out that this approach
may be applied in soft, as well as in mission-critical real-
time systems design. Timeliness of execution is guaranteed
with a certain coverage (the QoS speciﬁcation) and, should
a QoS failure be detected, safety measures (e.g., fail-safe
shutdown), or real-time adaptation (e.g., reducing the sys-
tem requirement), or QoS renegotiation can be undertaken,
depending on the application characteristics [25].
3. A Paradigm for Timing Fault Tolerance
To analyze the effects of timing failures on the correct-
ness of the replicated server and to derive the paradigm that
will allow us to achieve timing fault tolerance with a repli-
cated state machine, we will address read and write interac-
tions separately.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
3.1. Read interactions
When considering read interactions, the server can be
seen as a simple information server that replies to client
queries. The key issue we have to deal with is that these
queries have timeliness requirements. The relevant timed
action is the query operation, which includes the time to
send the query request, the time to process it and the time
to send the reply. A timing failure occurs if the reply is not
delivered to the client within the speciﬁed time bound. By
replicating the server, and by sending the query to multiple
replicas, the probability of receiving a timely reply (from
one of the replicas) can be increased. Note that any re-
ply can be used, provided that it has been sent by a correct
(which implies timely) replica.
The effect of individual timing failures in the case of read
interactions can simply be masked by replicating the server,
assuming that at least one of the replies is timely. But there
is always a chance that multiple timing failures occur, caus-
ing the replicated query operation to fail. The idea is to
reason in terms of the QoS speciﬁcation, that is, in terms of
the coverage required for the timeliness of the query. An
adequate number of replicas– not too few, to ensure that the
coverage is secured, not too many, to avoid unnecessarily
increasing the load of the system– should be used. Finding
an adequate number of replicas raises two issues:
(cid:15) First, it is necessary to observe the behavior of individ-
ual replicas and accurately estimate the coverage that
can be expected for each of them.
(cid:15) Second, since some replicas may be timelier than oth-
ers, it is necessary to ﬁnd a convenient set (provid-
ing the desired coverage), preferably containing as few
replicas as possible.
Observing the execution of generic timed actions re-
quires the measurement of both local and distributed du-
rations. Although the overall duration of query operations
can be measured on a local basis, sometimes it may be con-
venient to measure the partial terms that contribute to this
overall duration. This implies measuring distributed dura-
tions such as those relative to message transmission delays.
The possibility to measure durations of individual interac-
tions, allows to differentiate the coverage associated with
each replica. In [7] we describe a methodology to estimate
with a bounded error the duration distribution function and
the expected coverage of a timed action, based on the his-
tory of measured durations.
To address the second issue, we propose to devise an al-
gorithm that takes the hbound, coveragei QoS speciﬁcation
and uses the distribution function to select the set of repli-
cas that should be used [23]. The work presented in [16],
speciﬁcally concerned with this issue, proposes a solution
that uses local duration measurements to calculate response
time distribution functions of query operations, which are
then used to select the convenient replica set.
If the number of available replicas is not sufﬁcient to en-
sure the desired coverage, then the QoS speciﬁcation must
be dynamically modiﬁed, increasing the requested time
bound or reducing the target coverage.
3.2. Write interactions
Dealing with interactions that modify the state of the
replicated state machine raises several additional problems.
We consider that for the case of write interactions the in-
teresting timed action consists on the transmission of an up-
date message and its consequent processing by the receiving
replica. The timed action terminates when the state machine
has modiﬁed its internal state.
Similarly to what we have mentioned earlier for the case
of read interactions, we could also decompose a write in-
teraction into two basic timed actions, which could be ob-
served individually: the transmission of the write request
through the network and the actual write operation in the
replica. However, for the purpose of showing that the state
machine behaves correctly and timely, we simply need to
observe the global timed action. We do not care about the
precise instant at which a write request is received, provided
that the replica is able to process the request and update the
local state before the requisite global deadline.
Since we need to ensure that updates are delivered to
replicas in total order (to obtain a deterministic replicated
state machine) it is necessary to use a message delivery ser-
vice that provides this semantics. For instance, this can be
done using a protocol designed for timed models [9].
The difﬁcult problem to be solved consists in ensur-
ing temporal consistency in the presence of timing failures.
When a timing failure occurs, that is, when one of the repli-
cas does not update its state in a timely fashion, it will be-
come inconsistent with the other replicas. If nothing is done
to prevent this situation, then an undesirable contamination
effect can be observed. The effect is illustrated in Figure 1.
Figure 1. The contamination effect.
In the example, some process  sends an update to the
replicated state machine, which is received and processed
by replicas RA and RB. There is a timing speciﬁcation to
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
express the required timeliness of the write interaction. The
arrows representing the transmission of the update include
the time to achieve a total order delivery. The write opera-
tion, executed after the request is received, must be termi-
nated within the speciﬁed duration. Otherwise there will
be a timing failure and the late replica will become tempo-
rally inconsistent. Process  sends a query to replicas RA
and RB, and waits for the ﬁrst reply. Since we assumed
that the server may use independent (but properly synchro-
nized) threads to concurrently serve read and write requests,
the ﬁrst reply may be received from the temporally incon-
sistent replica (RA), and process  may use a temporally
incorrect value and become contaminated.
To avoid contamination, something must be done in or-
der to prevent the affected replica to propagate its incon-
sistent state to other elements in the system. For instance,
one can remove the affected replica from the set of avail-
able replicas. This translates into the following two basic
requirements. It is necessary to a) detect timing failures in
a timely manner; b) guarantee a timely reaction after failure
detection.
The ﬁrst requirement implies a form of timing failure
detection. As mentioned in the beginning of this section,
timing failures occur when some timing speciﬁcation is vi-
olated. Therefore, any timing failure detection service must
observe the execution of timed actions and must be aware
of the relevant deadlines. Furthermore, for the detection to
be useful it must be done in a bounded amount of time. In
Section 5 we explain how the bounded detection latency is
crucial to enforce application timeliness requirements. The
second requirement implies a form of timely executing cer-
tain actions. Solutions to this problem must take into ac-
count existing results in the realm of real-time systems.
Since the solution for the contamination problem relies
on the information provided by a timing failure detection
service, the properties of this failure detector are mostly rel-
evant. Informally, the timing failure detector should exhibit
the following properties:
Completeness: All timing failures must be detected, that
is, no faulty timed action should ever be considered
timely. This property is required to guarantee that
faulty behaviors are never allowed.
Accuracy: Timely timed actions should not be wrongly de-
tected as timing failures. Sometimes the failure detec-
tor may make (false positives) mistakes, but it must be
possible to establish a bound to limit the situations in
which these mistakes can take place (see Section 5).
This property is required to establish the usefulness of
the failure detector.
Another important issue is related with the scope of fail-
ure detection. Failure notiﬁcations should be delivered to all
interested participants in order to allow the execution of co-
ordinated actions upon failure events. For instance, it may
be desirable to switch in a coordinated way to a degraded
mode of operation after a replica is disabled. Therefore,
in addition to the above properties, an useful timing failure
detector must ensure that timing failures are detected by all
processes in the system. Since all processes in the system
(clients and server replicas) may have the same view about
timing failures, late replicas can be removed from the set of
available replicas everywhere.
Reducing the number of available replicas will also re-
duce the probability of subsequent read or write interactions
to be executed on time. Let us now reason about the cov-
erage of write interactions and its relation with the number
of available replicas. Remember that given a certain QoS
speciﬁcation of the form hbound, coveragei, the objective is
to ensure that the required coverage can be achieved for that
bound.
Since a write interaction must be performed using all
available replicas (to ensure strong consistency), its overall
coverage depends on the number of available replicas and
on the coverage that can be expected from each of them.
It is obviously much higher than it would be with a non-
replicated solution and typically higher than the coverage
required by the QoS speciﬁcation. When timing failures
occur and replicas are removed the decreased coverage ef-
fect can be observed, that is, the overall achievable cover-
age is reduced. This is acceptable in write interactions, and
nothing has to be done, provided that the achievable cov-
erage is still higher than the desired one. However, it may
be possible that too many replicas fail, bringing down the
achievable coverage to a level lower than the required one.
In this case the system can react in two ways: a) by adapting
the timeliness requirements, in order to maintain the desired
coverage; b) by starting new replicas, in order to increase
the availability and, consequently, the achievable coverage.
The former solution requires the system to be adaptable and
does not solve the problem of decreased replication level.
The latter is a good long term solution, but may require too
many system resources and time to start some new replicas.
Since we are talking about timing failures, and not crash
failures, in some cases it may be possible to simply wait
for removed (late) replicas to be re-enabled, and in that way
reestablish the replication level. This approach is discussed
with more detail in Section 6.
It should be clear at this point that the use of replica-
tion can improve the availability of a system with timeli-
ness requirements. But this is only achievable if the correct
measures to prevent the negative effects of timing failures
are taken. In summary, any effective solution based on the
paradigm for generic timing fault tolerance using a repli-
cated state machine must be able to: 1) measure local and
distributed durations; 2) timely detect timing failures, in a
complete, accurate and distributed manner; 3) guarantee a
timely reaction after the failures are detected.