diction. Then at least one of X1, . . . , Xn is not a correct
completion. That is, for some X ∈ P(I), there exists an input
in the set of all inputs, i ∈ I, such that CX (i) (cid:54)= C(i). But
as I is discriminating, we know that CX1, . . . , CXn agree on
all inputs, i.e., all i ∈ I. Therefore, none of X1, . . . , Xn is a
correct completion. But this contradicts Lemma 1.
Of course, the set of all inputs, I, is discriminating. But the
question that is most relevant to us is whether there is some
I ⊂ I that is discriminating for a given camouﬂaged circuit.
In particular, an attacker seeks an I that is small because this
allows him to reverse engineer the camouﬂaged circuit quickly
— empirically, we ﬁnd that our attack procedure indeeds
succeeds in doing so.
Attack methodology Our attack methodology is to ﬁrst
identify such a discriminating set of inputs, and then use it
to correctly complete the camouﬂaged circuit. Towards this,
we ﬁrst characterize the problem of determining if a given set
of input patterns, I, is discriminating.
Deﬁnition 4. We deﬁne DISC-SET-DEC to be the following
decision problem. Given the following three inputs: (i) a
camouﬂaged circuit C, (ii) I, a set of input patterns, and (iii)
the set of outputs obtained from applying input patterns in I to
the black-box circuit, i.e., C(I) = {C(i1), . . . ,C(in)}, where
I = {i1, . . . , in}. Is I a discriminating set for C?
Theorem 2. DISC-SET-DEC is in co-NP.
Proof: We prove the above by showing that the comple-
ment of DISC-SET-DEC, which we call NOT-DISC-SET-DEC, is in
NP. NOT-DISC-SET-DEC is the problem, given the same inputs,
of determining whether I is not a discriminating set of input
patterns. A problem is in NP if it has an efﬁciently sized proof
(a certiﬁcate) for every true instance of the problem that can
be veriﬁed efﬁciently [2]. “Efﬁcient,” in this context, means
polynomial in the size of the inputs. For NOT-DISC-SET-DEC,
such a certiﬁcate consists of two distinct completions X1 and
X2, and a new input pattern i(cid:48) (cid:54)∈ I such that the following two
conditions hold. First,
CX1 (i) = CX2 (i) = C(i) ∀i ∈ I,
Second,
CX1(i(cid:48)) (cid:54)= CX2 (i(cid:48)).
X1 and X2 are both in the set of candidate completions, P(I),
but do not agree with each other on the input i(cid:48). The existence
of such a certiﬁcate establishes that I is not a discriminating
set, because Equation (1) in Deﬁnition 3 is not satisﬁed. Such
a certiﬁcate is linear in the size of the input, because each of
X1, X2, i(cid:48) can be encoded with size at worst the size of C.
Verifying the certiﬁcate can also be done in time polynomial
in the input. All we do is check: (1) that each of X1, X2 is
a completion of C, which is linear-time in the size of C, (2)
that CX1 (i) = CX2(i) for all i ∈ I, which can be done in
time linear in the size of C for each i, for a total time of
O(|C| · |I|), and (3) that CX1(i) (cid:54)= CX2(i), which can be
done in time linear in the size of C.
A consequence of Theorem 2 is that NOT-DISC-SET-DEC
can be efﬁciently reduced to a problem that is complete for
the complexity class NP, such as CNF-SAT. A SAT solver
can then be used to generate a certiﬁcate for NOT-DISC-SET-
DEC, which also serves as a counter-example for the orginal
problem DISC-SET-DEC. As we discuss below, the certiﬁcate is
useful in constructing a discriminating input set I for C.
Theorem 3. DISC-SET-DEC is co-NP-complete.
The proof is in the appendix, and establishes that NOT-DISC-
SET-DEC is NP-complete. Then, by deﬁnition, its complement
DISC-SET-DEC is co-NP-complete [2]. Theorem 3 is not neces-
sary for there to exist an efﬁcient reduction to SAT; Theorem
2 alone sufﬁces. However, it does suggest that seeking an
efﬁcient algorithm for DISC-SET-DEC would be naive given the
customary assumption that P (cid:54)= NP. Even though a SAT
solver cannot fully address the intractability that is inherent
in DISC-SET-DEC, it has been observed that such solvers can
be surprisingly effective for large classes of input instances,
particularly those that arise in practice. Thus, it makes sense
for us to reduce NOT-DISC-SET-DEC to SAT, and use a SAT
solver.
B. Determining a Correct Completion
Assuming that the attacker is able to ﬁnd a discriminating
set of input patterns I, the problem that remains for him is to
ﬁnd a correct completion of the camouﬂaged circuit C. The
following decision problem captures this.
Deﬁnition 5. We deﬁne COMPLETION-DEC to be the following
decision problem. Given the following three inputs: (i) a
camouﬂaged circuit C, (ii) I, a set of input patterns, and
(iii) the output patterns obtained from applying input patterns
in I on the black-box circuit, i.e., C(I). Does there exist a
completion X such that ∀i ∈ I, CX (i) = C(i)?
One may ask why we care to pose COMPLETION-DEC, given
that the only instances of it of interest to us are those in which
the camouﬂaged circuit C that we input has a correct comple-
tion, i.e., those in which the answer to the decision problem
is always ‘yes.’ We address this question after characterizing
the the computational complexity of COMPLETION-DEC below.
Theorem 4. COMPLETION-DEC is in NP.
Proof: We need to show that for every true instance,
there exists an efﬁciently sized certiﬁcate that can be veriﬁed
efﬁciently. Such a certiﬁcate is simply a completion X such
that the completed circuit, CX, agrees with the black-box
circuit C on all inputs in I. We ﬁrst observe that the size of
X is linear in the size of C because it is linear in the number
of gates in C. To verify X, we check: (1) that X is indeed a
completion of C, which can be done in time linear in the size
of C, and, (2) that CX (i) = C(i) for all i ∈ I, which can be
done in time O(|C| · |I|).
Since COMPLETION-DEC is in NP, a solver for COMPLETION-
DEC is able to construct and provide a certiﬁcate,
i.e., a
completion X as discussed above. Therefore, when the input to
the solver is a discriminating set of inputs, it provides exactly
what we want: a correct completion.
Theorem 5. COMPLETION-DEC is NP-complete.
6
The proof is in the appendix. As with DISC-SET-DEC, a
consequence of the above theorem is that it is also unlikely
that we will ﬁnd an efﬁcient algorithm for COMPLETION-DEC,
and reduction to SAT is well-motivated.
C. Constructing a Discriminating Set
As we point out in the previous section, given a solver
for COMPLETION-DEC and a discriminating set of inputs I for a
camouﬂaged circuit C, we can determine a correct completion
for C. The only issue that remains is the identiﬁcation of such
a discriminating set I.
We do this using a process akin to guided reﬁnement [14].
That is, we iterate as follows given access to a solver for NOT-
DISC-SET-DEC. We begin with inputs (cid:104)C, I, O(cid:105) with I = O = ∅
to the solver. If the solver says that that input is true, this means
that ∅ is not discriminating for C.
The solver also returns a certiﬁcate, (cid:104)X1, X2, i(cid:48)(cid:105), as we
discuss in the Proof for Theorem 2. In such a certiﬁcate, i(cid:48) ∈ I
is an input for which two distinct completions for C differ in
their outputs. We add i(cid:48) to I, i.e., set I ← I ∪ {i(cid:48)}, and
O ← O ∪{C(i(cid:48))}, and again invoke the solver with the inputs
(cid:104)C, I, O(cid:105).
That is, we “reﬁne” our search for a discriminating set by
“guiding” it by adding i(cid:48) to I in the input to the solver. We
repeat this till the solver says that the instance is no longer
true. From the deﬁnition of NOT-DISC-SET-DEC, such an I to
which the above procedure converges is a discriminating set
of inputs for C.
D. The Attack
Now, we can compose the solvers for NOT-DISC-SET-DEC,
and COMPLETION-DEC to get a correct completion for C. The
composition is that we ﬁrst determine a discriminating set I
by repeatedly calling NOT-DISC-SET-DEC as we discuss in the
previous section, and then provide that as input along with C
and C(I) to the solver for COMPLETION-DEC. This algorithm is
expressed in the following pseudo-code.
I ← ∅
while true do
(cid:104)X1, X2, i(cid:48)(cid:105) ← N (C, I,C(I))
if (cid:104)X1, X2, i(cid:48)(cid:105) (cid:54)=  then
else
I ← I ∪ {i(cid:48)}
break
end if
end while
return M (C, I,C(I))
Alg. 1: IC Decamouﬂaging. N is a solver for NOT-DISC-SET-
DEC, and M is a solver for COMPLETION-DEC, each of which
outputs a certiﬁcate if the input instance is true, and the special
symbol  otherwise.
In the above pseudo-code, N is a solver for NOT-DISC-SET-
DEC, and M is a solver for COMPLETION-DEC. We assume that
N outputs a certiﬁcate (cid:104)X1, X2, i(cid:48)(cid:105) as we discuss in Section
III-A if the input instance is true, and the special symbol 
7
otherwise. We assume that M outputs a certiﬁcate if it is given
as input a true instance of COMPLETION-DEC.
To construct the solver N, we efﬁciently reduce NOT-DISC-
SET-DEC to CNF-SAT, determining whether a boolean formula
in conjunctive normal form is satisﬁable. CNF-SAT is known
to be NP-complete [12], and therefore we know that such
a reduction exists. As we mention in the previous section,
solvers, such as Minisat [11], exist for CNF-SAT that are
efﬁcient for large classes of input instances.
Such a solver returns not only whether an input instance
is true or false, but if it is true, it returns a certiﬁcate for it.
We can use our reduction to easily map a certiﬁcate returned
by Minisat to a certiﬁcate for NOT-DISC-SET-DEC.
To construct the solver M, we similarly efﬁciently reduce
COMPLETION-DEC to CNF-SAT, and leverage a solver for CNF-SAT
such as Minisat. We discuss our reductions from NOT-DISC-SET-
DEC and COMPLETION-DEC to CNF-SAT below, in Section III-E.
Attacker’s Effort
In each iteration of Algorithm 1, the
attacker exercises the black-box with a new input pattern, and
calls the solver N once for each such input pattern. In other
words, if |I| = D is the size of the discriminating set of input
patterns found by Algorithm 1, the attacker would have applied
exactly D input patterns to the black-box circuit and called the
solver for N, D+1 times. In addition, the attacker has to make
one call to the solver for M. If the circuit is sequential, the
attacker also sets the ﬂip-ﬂops in the IC
E. Reductions to CNF-SAT
As we mention in the previous section, because both NOT-
DISC-SET-DEC and COMPLETION-DEC are in NP,
there exist
efﬁcient (polynomial-time) reductions from each of those
problems to CNF-SAT. In this section, we discuss our reductions
from those problems to CNF-SAT.
Our approach is to ﬁrst reduce each to CIRCUIT-SAT, the
problem of determining whether a boolean circuit is satisﬁable.
CIRCUIT-SAT is also known to be NP-complete [12]. We then
employ a well-known efﬁcient reduction from CIRCUIT-SAT to
CNF-SAT [28]. A reduction r from problem A to B, in this
context, maps instances of A to instances of B, and has the
properties that it is efﬁciently-computable, and an instance a
of A is true if and only if the instance r(a) of B is true.
We ﬁrst discuss our reduction from NOT-DISC-SET-DEC to
CIRCUIT-SAT. For clarity, we assume that each camouﬂaged gate
has only one of two identities. That is, a completion X can be
seen as a bit-vector x1, . . . , xk where the camouﬂaged circuit
C has k camouﬂaged gates.
Note that there is nothing fundamental about this assump-
tion. That is, even if a gate is allowed to have one l identities,
where l is a constant, our reduction is sound with only minor
changes, and remains efﬁcient. Speciﬁcally, each xi above,
rather than being a bit, becomes a bit string xi = y1 . . . ylog2(l).
The boolean circuit that is the output of our reduction to
CIRCUIT-SAT has 2k + n inputs, where n is the number of
inputs to C. We label these inputs x11, x12, . . ., x1k, x21,
. . ., x2k, i1, . . ., in. Conceptually, if X1 = (cid:104)x11, . . . , x1k(cid:105),
X2 = (cid:104)x21, . . . , x2k(cid:105) and i(cid:48) = (cid:104)i1, . . . , in(cid:105), then (cid:104)X1, X2, i(cid:48)(cid:105)
TABLE I.
BENCHMARK CHARACTERISTICS, AND THE NUMBER OF
CAMOUFLAGED GATES PER CIRCUIT USED TO COMPARE OUR ATTACK
AGAINST THE BRUTE FORCE ATTACK FROM PRIOR WORK [20]. THE
NUMBER OF CAMOUFLAGED GATES IS CHOSEN TO BE THE SAME AS IN THE
PRIOR WORK.
B’mark
c432
s298
s400
s444
s713
c5315
c7552
s5378
s9234
s38584
Inputs