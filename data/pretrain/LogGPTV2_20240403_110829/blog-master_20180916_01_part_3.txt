latency average = 0.761 ms  
latency stddev = 1.873 ms  
tps = 42058.973764 (including connections establishing)  
tps = 42059.153928 (excluding connections establishing)  
statement latencies in milliseconds:  
         0.002  \set aid random(1, 100000 * :scale)  
         0.001  \set bid random(1, 1 * :scale)  
         0.001  \set tid random(1, 10 * :scale)  
         0.001  \set delta random(-5000, 5000)  
         0.029  BEGIN;  
         0.425  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;  
         0.062  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
         0.075  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;  
         0.065  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;  
         0.052  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);  
         0.049  END;  
```  
IO监测  
```  
Total DISK READ :    2027.55 M/s | Total DISK WRITE :     661.01 M/s  
Actual DISK READ:    2028.33 M/s | Actual DISK WRITE:     653.42 M/s  
  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO>    COMMAND                                                                                                                                                                         
14545 be/4 postgres   59.30 M/s    9.82 M/s  0.00 % 26.14 % postgres: postgres postgres [local] UPDATE               
14588 be/4 postgres   58.05 M/s   11.29 M/s  0.00 % 26.07 % postgres: postgres postgres [local] BINDTE               
14574 be/4 postgres   62.22 M/s   10.33 M/s  0.00 % 25.95 % postgres: postgres postgres [local] UPDATE               
14582 be/4 postgres   60.69 M/s   10.70 M/s  0.00 % 25.94 % postgres: postgres postgres [local] UPDATE          
14561 be/4 postgres   56.00 M/s    9.60 M/s  0.00 % 25.77 % postgres: postgres postgres [local] idle                 
14567 be/4 postgres   70.98 M/s    9.82 M/s  0.00 % 25.70 % postgres: postgres postgres [local] UPDATE               
14589 be/4 postgres   67.12 M/s    9.80 M/s  0.00 % 25.68 % postgres: postgres postgres [local] INSERT               
14563 be/4 postgres   60.19 M/s    9.95 M/s  0.00 % 25.68 % postgres: postgres postgres [local] UPDATE               
14583 be/4 postgres   69.52 M/s    9.87 M/s  0.00 % 25.60 % postgres: postgres postgres [local] UPDATE               
14566 be/4 postgres   58.28 M/s    9.92 M/s  0.00 % 25.59 % postgres: postgres postgres [local] UPDATE               
14587 be/4 postgres   54.09 M/s    9.86 M/s  0.00 % 25.57 % postgres: postgres postgres [local] UPDATE               
14565 be/4 postgres   59.45 M/s    9.79 M/s  0.00 % 25.43 % postgres: postgres postgres [local] BINDRT               
14580 be/4 postgres   71.12 M/s    9.96 M/s  0.00 % 25.32 % postgres: postgres postgres [local] SELECTn transaction  
14576 be/4 postgres   64.08 M/s    9.54 M/s  0.00 % 25.20 % postgres: postgres postgres [local] UPDATE               
14568 be/4 postgres   57.60 M/s   10.07 M/s  0.00 % 25.16 % postgres: postgres postgres [local] UPDATE               
14584 be/4 postgres   63.87 M/s   10.05 M/s  0.00 % 25.13 % postgres: postgres postgres [local] UPDATE               
14564 be/4 postgres   68.96 M/s    9.78 M/s  0.00 % 25.00 % postgres: postgres postgres [local] UPDATE               
14550 be/4 postgres   68.82 M/s    9.85 M/s  0.00 % 24.94 % postgres: postgres postgres [local] UPDATE               
14562 be/4 postgres   80.99 M/s   10.59 M/s  0.00 % 24.88 % postgres: postgres postgres [local] UPDATE               
14581 be/4 postgres   59.95 M/s   11.24 M/s  0.00 % 24.85 % postgres: postgres postgres [local] UPDATE               
14578 be/4 postgres   65.43 M/s   10.52 M/s  0.00 % 24.83 % postgres: postgres postgres [local] UPDATE               
14570 be/4 postgres   61.71 M/s   10.06 M/s  0.00 % 24.51 % postgres: postgres postgres [local] UPDATE               
14573 be/4 postgres   64.77 M/s   10.00 M/s  0.00 % 24.50 % postgres: postgres postgres [local] UPDATE               
14575 be/4 postgres   61.35 M/s   10.01 M/s  0.00 % 24.40 % postgres: postgres postgres [local] UPDATE               
14585 be/4 postgres   59.80 M/s   10.36 M/s  0.00 % 24.29 % postgres: postgres postgres [local] UPDATE               
14560 be/4 postgres   74.76 M/s   11.13 M/s  0.00 % 24.09 % postgres: postgres postgres [local] idle in transaction  
14577 be/4 postgres   58.25 M/s    9.75 M/s  0.00 % 23.98 % postgres: postgres postgres [local] idle in transaction  
14579 be/4 postgres   72.02 M/s   10.09 M/s  0.00 % 23.94 % postgres: postgres postgres [local] UPDATE               
14571 be/4 postgres   57.67 M/s   10.01 M/s  0.00 % 23.63 % postgres: postgres postgres [local] UPDATE               
14572 be/4 postgres   55.61 M/s   10.20 M/s  0.00 % 23.36 % postgres: postgres postgres [local] UPDATE               
14569 be/4 postgres   64.92 M/s   12.51 M/s  0.00 % 23.32 % postgres: postgres postgres [local] UPDATE               
14586 be/4 postgres   59.95 M/s    9.79 M/s  0.00 % 23.29 % postgres: postgres postgres [local] UPDATE               
13639 be/4 postgres   27.33 K/s   23.99 M/s  0.00 %  1.14 % postgres: walwriter  
13638 be/4 postgres    0.00 B/s  214.99 M/s  0.00 %  0.00 % postgres: background writer  
13637 be/4 postgres    0.00 B/s   95.76 M/s  0.00 %  0.00 % postgres: checkpointer       
```  
## 写测试后的数据大小  
```  
postgres=# \dt+ pgbench*  
                          List of relations  
 Schema |       Name       | Type  |  Owner   |  Size   | Description   
--------+------------------+-------+----------+---------+-------------  
 public | pgbench_accounts | table | postgres | 1264 GB |   
 public | pgbench_branches | table | postgres | 16 MB   |   
 public | pgbench_history  | table | postgres | 8701 MB |   
 public | pgbench_tellers  | table | postgres | 66 MB   |   
(4 rows)  
postgres=# \di+ pgbench*  
                                      List of relations  
 Schema |         Name          | Type  |  Owner   |      Table       |  Size   | Description   
--------+-----------------------+-------+----------+------------------+---------+-------------  
 public | pgbench_accounts_pkey | index | postgres | pgbench_accounts | 209 GB  |   
 public | pgbench_branches_pkey | index | postgres | pgbench_branches | 8776 kB |   
 public | pgbench_tellers_pkey  | index | postgres | pgbench_tellers  | 43 MB   |   
(3 rows)  
```  
## 100亿 tpbc 性能数据小结  
### 1、100亿TPCB 初始化  
耗时：8385秒。  
速度：约119万行/s。  
### 2、100亿TPCB 创建索引（24并行）  
耗时：43分50秒。  
速度：约380万行/s。  
### 3、100亿TPCB 空间占用  
表：1.251 TB  
索引：209 GB  
### 4、100亿TPCB 只读3600秒  
TPS: 118053   
QPS: 118053   
### 5、100亿TPCB 读写3600秒  
TPS: 42058    
QPS: 210290    
## 小结  
PostgreSQL 在oltp, olap混合场景下有着出色的表现（```100亿 TPCB 只读qps 11.8万，读写qps 21万``` ；  ```1000万 TPCC：103万 tpmC``` ；  ```SF=10 TPCH 150秒，SF=200 TPCH 39 min```；），再加上对Oracle兼容性的加持，以及**阿里、平安集团、邮储、国家电网、中兴、华为、铁总、苏宁、去哪儿、探探等PG企业用户的背书**，已成为市场去O的标志性替代产品，帮助企业实现几乎无痛的去O。    
1、**[阿里云ADAM 去O 专版 PPAS(PostgreSQL高级版)](https://promotion.aliyun.com/ntms/act/ppasadam.html) 提供免费去O评估。**      
2、**[Ora2pg](http://ora2pg.darold.net/) 开源去O产品.**    
3、[《Oracle migration to Greenplum - (含 Ora2pg)》](../201804/20180423_02.md)      
## 参考  
man pgbench  
pgbench --help  
[《PostgreSQL 11 tpcc 测试(103万tpmC on ECS) - use sysbench-tpcc by Percona-Lab》](../201809/20180913_01.md)    
[《(TPC-H测试 SF=10,SF=200) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)    
[大量PostgreSQL pgbench测试场景](https://github.com/digoal/blog/blob/master/201711/readme.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")