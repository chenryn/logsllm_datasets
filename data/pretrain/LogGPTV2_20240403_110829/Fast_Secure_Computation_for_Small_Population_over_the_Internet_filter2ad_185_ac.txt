distribution ensembles. We say X and Y are computationally indistinguishable, if for any PPT distinguisher D
and all sufﬁciently large s ∈ S, we have | Pr[D(Xs) = 1]− Pr[D(Ys) = 1]| < 1/p(|s|) for every polynomial p(·).
We prove the security of our protocols in the standard real/ideal world paradigm. The security deﬁnition and
the required functionalities are given in Appendix A.
2.2 Primitives
Garbling Schemes
‘Garbling Schemes’ traditionally used as a technique in secure protocols, were formalized
as a primitive by Bellare et al. [BHR12] and were assigned well-deﬁned notions of security, namely correctness,
privacy, obliviousness, and authenticity. This terminology has largely been adopted by works that followed in this
domain [JKO13, ZRE15, GLNP15].
A garbling scheme G is characterized by a tuple of PPT algorithms G = (Gb, En, Ev, De) described below.
With the exception of Gb, are all deterministic.
• Gb (1κ, C) is invoked on a circuit C in order to produce a ‘garbled circuit’ C, ‘input encoding information’ e,
and ‘output decoding information’ d.
• En (x, e) encodes a clear input x with encoding information e in order to produce an encoded input X.
6
• Ev (C, X) evaluates C on X to produce an encoded output Y.
• De (Y, d) translates Y into a clear output y as per decoding information d.
We give an informal intuition of the notion captured by each of the security properties, namely correctness,
privacy, obliviousness, and authenticity. Correctness enforces that a correctly garbled circuit, when evaluated, out-
puts the correct output of the underlying circuit. Privacy aims to protect the privacy of encoded inputs. Authenticity
enforces that the evaluator can only learn the output label that corresponds to the value of the function. Oblivious-
ness captures the notion that when the decoding information is withheld, the garbled circuit evaluation leaks no
information about any underlying clear values; be they of the input, intermediate, or output wires of the circuit.
The formal deﬁnitions are deferred to Appendix B.1. We are interested in a class of garbling schemes referred to
as projective in [BHR12]. When garbling a circuit C : {0, 1}n (cid:55)→ {0, 1}m, a projective garbling scheme produces
i∈[n], and the encoded input X corresponding to x = (xi)i∈[n] can
encoding information of the form e =(cid:0)e0
be interpreted as X = En(x, e) = (exi
(cid:1)
i , e1
i
i )i∈[n].
Our 3PC with fairness and 4PC with guaranteed output delivery protocol rely on garbling schemes that are
simultaneously correct, private, oblivious and authentic. Our 3PC protocol with guaranteed output delivery relies
on garbling schemes that are correct, private and authentic. It further needs an additional decoding mechanism de-
noted as soft decoding algorithm sDe [MRZ15] that can decode garbled outputs without the decoding information
d. The soft-decoding algorithm must comply with correctness: sDe(Ev(C, En(e, x))) = C(x) for all (C, e, d).
While both sDe and De can decode garbled outputs, the authenticity needs to hold only with respect to De. In
practice, soft decoding in typical garbling schemes can be achieved by simply appending the truth value to each
output wire label.
Non-Interactive Commitment Schemes A non-interactive commitment scheme (NICOM) consists of two al-
gorithms (Com, Open) deﬁned as follows. Given a security parameter κ, a common parameter pp, message x and
random coins r, PPT algorithm Com outputs commitment c and corresponding opening information o. Given κ,
pp, a commitment and corresponding opening information (c, o), PPT algorithm Open outputs the message x. The
algorithms should satisfy correctness, binding (i.e. it must be hard for an adversary to come up with two different
openings of any c) and hiding (a commitment must not leak information about the underlying message) properties.
For our 3-party protocols, binding is required to hold only with respect to uniformly chosen public parameter pp,
while our 4-party protocols demand stronger form of binding that must hold even against adversarially chosen pub-
lic parameter. There exist instantiations based on one-way functions for the former and injective one-way function
(alternately one-way permutation) for the latter. We denote the NICOM with the stronger binding property as
strong NICOM that consists of (sCom, sOpen). The formal deﬁnitions of the properties and the instantiations of
NICOM based on symmetric key primitives are given in Appendix B.2.
We also need a NICOM scheme that admits equivocation property for our fair 3PC. An equivocal NICOM
(eNICOM) is a NICOM that allows equivocation of a certain commitment to any given message with the help of a
trapdoor. Apart from the usual two algorithms (eCom, eOpen), eNICOM comprises of:
– eGen(1κ) returns a public parameter and a corresponding trapdoor (epp, t), where epp is used by both eCom
and eOpen. The trapdoor t is used for equivocation.
– Equiv(c, o(cid:48), x, t) is invoked on a certain commitment c and its corresponding opening o(cid:48), given message x and
the trapdoor t and returns o such that x ← eOpen(epp, c, o).
An eNICOM satisﬁes correctness, hiding and binding properties much like the NICOM does. The hiding prop-
erty of eNICOM is slightly changed compared to that of NICOM taking the equivocation property into account.
This new deﬁnition implies the usual hiding deﬁnition. In our fair protocol, the public parameter epp for eNICOM
is generated jointly by two parties acting garblers so that the trapdoor t remains distributed among them. Our
instantiations are based on Naor [Nao91] and programmable random oracle, all of which admit the above property.
We thus rewrite eGen in our fair protocol as (epp, t1, t2) ← eGen(1κ), where ti denotes the share of trapdoor
7
held by garbler Pi (i ∈ [2]). Both these shares are necessary to perform equivocation. The formal deﬁnitions and
instantiations appear in Appendix B.3.
In the implementation of our protocols, we use the random oracle based construction for all the above variants
of NICOM which is implemented using SHA-256 .
Replicated Secret Sharing (RSS)
[CDI05, ISN89] We use a 3-party replicated secret sharing scheme private
against one corruption (1-private). Informally, for a secret s to be shared over a boolean ﬁeld F2, we randomly
choose r1, r2 and compute r3 such that s = r1 ⊕ r2 ⊕ r3 (where r3 = s ⊕ r1 ⊕ r2). We refer to r1, r2, r3 as the
three shares of s. Each of the 3 participating parties say P1, P2, P3 are given access to two among the three shares
i.e (r2, r3), (r1, r3) and (r1, r2) respectively. Reconstruction of s is possible by combining the shares held by any
two among the three parties. However, given only the shares of a single party, the distribution of shares appears
random and hence s remains private. We say that two parties say P1, P3 hold consistent shares if r(cid:48)
2 = r2 where
(r(cid:48)
2, r3) are the shares held by P1 and (r1, r2) are the shares held by P3 [IKKP15].
Pre-Image Resistance Hash [RS04] Consider a hash function family H: K × M → Y. The hash function H
is said to be pre-image resistant if for all probabilistic polynomial-time adversaries A, given y = Hk(x) where
k ∈R K; x ∈R {0, 1}m, Pr[x(cid:48) ← A(k, y) : Hk(x(cid:48)) = y] is negligible in κ, where m = poly(κ).
Collision-Resistant Hash [RS04] Consider a hash function family H(cid:48): K × M → Y. The hash function H(cid:48) is
k where k ∈R K; x ∈R
said to be collision resistant if for all probabilistic polynomial-time adversaries A, given H(cid:48)
{0, 1}m, Pr[(x, x(cid:48)) ← A(k) : (x (cid:54)= x(cid:48)) ∧ H(cid:48)
k(x(cid:48))] is negligible in κ, where m = poly(κ).
k(x) = H(cid:48)
3 3PC with Fairness
In this section, we present an efﬁcient fair 3PC protocol that consumes 4 rounds in a network constituting of only
pairwise-private channels. The starting point of our protocol is that of [MRZ15]. In the protocol of [MRZ15],
P1, P2 act as garblers while P3 acts as an evaluator. The garblers use common randomness to construct the same
GC individually. Since at most one party can be corrupt, a comparison of GCs received from the garblers allows
the evaluator P3 to conclude its correctness. Besides, P3 additively shares his input among the garblers at the
beginning of the protocol. This eliminates the need of oblivious transfer (OT) to transfer the evaluator’s encoded
input, as the garblers can directly send the encoded inputs corresponding to their own input as well as the share
of P3’s input held by them. To force the garblers to input encoded inputs (the keys) that are consistent with the
GCs, the following technique is adopted. Together with the GC, each garbler also generates the commitment to the
encoding information using the common shared randomness and communicates to the evaluator. Again a simple
check on whether the set of commitments are same for both the garblers allows to conclude their correctness. Now
it is infeasible for the garblers to decommit the encoded input corresponding to their own input and the evaluator’s
share to something that are inconsistent to the GC without being caught. Following a common trick to hide the
inputs of the garblers, the commitments on the encoding information corresponding to every bit of the garblers’
input are sent in permuted order that is private to the garblers. Now if evaluation of the GC by P3 is successful,
P3 computes the output using soft decoding on the encoded output Y. P3 then sends Y to the garblers, enabling
them to decode the output. For a function where all parties receive same output, depending upon whether Y is
broadcast or sent over pairwise channel, the protocol achieves security with abort or selective abort respectively.
Speciﬁcally, in the latter case when Y is sent over point-to-point channel, a corrupt P3 may choose to send Y to
only one of the garblers, thereby achieving security with selective abort.
In the protocol of [MRZ15], the only scenario in which fairness is violated is when a malicious P3 computes
the output via soft decoding but chooses not to send (or sends wrong) encoded output Y to the garblers. At a high-
level, we overcome this limitation by using oblivious garbling instead and withholding the decoding information
d from P3 until he forwards Y. Obliviousness ensures that P3 gets no information regarding output as long as
d is unknown to him. A corrupt P3 is forced to send Y to the garblers if he wants to learn the output, in which
8
case at least one the garblers P1, P2 also learn the output. Authenticity ensures that P3 cannot forge an encoded
output Y(cid:48) (cid:54)= Y such that its decoding is valid. Even if P3 chooses to abort, fairness is achieved as no party learns
the output. However, this new step gives rise to the following issues: (a) A corrupt garbler may send incorrect
decoding information to an honest P3 who forwarded Y; (b) A corrupt P3 may send the correct encoded output
Y (obtained by GC evaluation) to only one of the garblers. To tackle (a), the garblers are made to commit to the
decoding information which P3 can verify by means of cross-checking across garblers. The binding property of
the commitment scheme prevents the corrupt garbler from lying about the decoding information later. The second
issue is trivial to resolve with a broadcast channel. Without a broadcast channel, each garbler is made to forward
the encoded output received from the evaluator to its co-garbler with a “proof" that he indeed received the encoded
output from P3. Without a proof, a corrupt garbler may “pretend" to have received the encoded output from honest
P3, whereas in reality P3 was unable to evaluate the GC.
We facilitate this “proof" using a preimage-resistant cryptographic hash H function (alternately, one-way func-
tion can be used). In Round 1, each garbler Pi chooses a random value ri (which will serve as the proof) and sends
its digest hi = H(ri) to the other two parties, while it sends ri only to P3. In Round 2, each garbler Pi forwards
the digest received from its co-garbler (in Round 1) to P3. For each digest hi, P3 veriﬁes its validity (whether
hi = H(ri)) and consistency (whether both garblers are in agreement with respect to hi) and aborts in case the
checks fail. If no abort has occurred, an honest P3 who is able to obtain Y upon successful GC evaluation addi-
tionally sends the preimage of a garbler’s digest with the fellow garbler. This preimage helps a garbler to convince
its fellow garbler about the fact that Y (which is also valid) was received from P3. When an honest P3 was unable
to evaluate GC, the property of pre-image resistance of the hash ensures that the corrupt garbler P1 will not have
access to any r(cid:48)
2) = h2 except with negligible probability. Therefore, he will not be able to fool his
honest co-garbler P2 to accept. On the ﬂip side, consider a corrupt P3 who sends Y to P1 alone. If P3 sends any
proof, say r(cid:48)
2 to P1 that veriﬁes (may not be the same r2 received from P2; note that given r2, it may be possible for
corrupt P3 to compute r(cid:48)
2) = h2 since we do not assume H is second-preimage resistant), then P1
would check H(r(cid:48)
2) = h2 holds, accept the output, forward the proof and the output to P2. Importantly, pre-image
resistance sufﬁces for an honest P2 who hasn’t received Y from P3, to conclude that P3 is corrupt upon receiving
any r(cid:48)
2) = h2. Thus, P2 can simply accept output
from P1.
2 (may not be equal to r2 picked by him) from P1 such that H(r(cid:48)
2 such that H(r(cid:48)
2 such that H(r(cid:48)
The protocol f3PC appears in Figures 1, 2. We use an eNICOM to commit to the decoding information.
This is due to a technicality that arises in the security proof explained in Appendix C. Our proofs and proposed
optimizations for f3PC which are incorporated in our implementation are explained subsequently. Lastly, the
protocol f3PC cannot be naively extended to obtain guaranteed output delivery even in the presence of a broadcast
channel (which is necessary due to [CHOR16]). When the evaluator fails to obtain the encoded output, there
should be a way to compute the output which either seems to need more parties to enact the role of the evaluator
and consequently involvement of more than one GCs or seems to require more than four rounds. We take the latter
way-out and design a 5-round protocol in Section 6.
3.1 Correctness and Security
Theorem 3.1. The protocol f3PC is correct.
Proof. The inputs committed by P3 is deﬁned by the shares it distributes to the garblers in the ﬁrst round. The in-
puts committed by the garblers are deﬁned based on their openings of commitments. The encoded output obtained
upon evaluation is based on the committed inputs. The correctness of the output follows from the correctness of
the garbling scheme.
While the formal proof is deferred to Appendix C, we give intuition for fairness and state the theorem below.
We need to argue that a corrupt party gets the output of the computation if and only if the honest parties receive the
output. For the forward direction assume that a corrupt party gets the output. Say the evaluator P3 is corrupt. Due
to oblivious garbling, P3 would obtain the output only if given access to decoding information. This would occur
only if he had sent a valid (Y, rj) to at least one of the garblers say Pi (Pj is the co-garbler) i.e., De(Y, d) (cid:54)=⊥ and
H(rj) = hj. Pi would communicate (Y, rj) to Pj as well which would be veriﬁed and subsequently accepted by Pj.
9
Figure 1: Protocol f3PC
Inputs: Party Pα has xα for α ∈ [3].
Common Inputs: The circuit C(x1, x2, x3, x4) that computes f (x1, x2, x3⊕ x4) where x1, x2, x3, x4 as well
as function output belong to {0, 1}(cid:96) for (cid:96) ∈ poly(κ). P3 is assumed to be the evaluator and (P1, P2) as
the garblers.
Output: y = C(x1, x2, x3, x4) = f (x1, x2, x3 ⊕ x4) or ⊥.
Primitives: G = (Gb, En, Ev, De) that is correct, private, oblivious and authentic, a NICOM (Com, Open),
an eNICOM (eGen, eCom, eOpen, Equiv), a PRG G and a preimage-resistant Hash H.
Round 1:
– P1 chooses random seed s ∈R {0, 1}κ for G and sends s to P2.
– P1 does the following (Similar steps will be executed by P2): Sample t1 corresponding to its share epp1 for
eNICOM. Compute h1 = H(r1), where r1 is chosen uniformly at random. Send {epp1, h1} to P2 and
{h1, r1} to P3.
– P3 samples pp for the NICOM and sends (x31, pp) to P1, (x32, pp) to P2.
Round 2:
– Pi(i ∈ [2]) does the following:
(cid:96)+α, e1
(cid:96)+α}α∈[(cid:96)], {e0
◦ Compute epp using eppi and the share eppj received from Pj (j ∈ [2] \ i). Forward hj received
α}α∈[(cid:96)],
◦ Compute GC (C, e, d) ← Gb(1κ, C) using randomness from G(s). Assume {e0
2(cid:96)+α}α∈[2(cid:96)] correspond to the encoding information for the input of
◦ Choose permutation strings p1, p2 ∈R {0, 1}(cid:96) for the garblers’ input wires and generate commit-
1 ⊕b
),
α
2(cid:96)+α) for α ∈ [2(cid:96)].
from Pj to P3.
{e0
P1, P2 and shares of P3 respectively.
ments to e and d using randomness from G(s). For b ∈ {0, 1}, (cb
(cid:96)+α, ob
(cb
Let (c, o) ← eCom(epp, d). Set B =(cid:8)epp, C,{cb
2 ⊕b
(cid:96)+α) ← Com(pp, epα
(cid:96)+α ) for α ∈ [(cid:96)] and (cb
α}α∈[4(cid:96)],b∈{0,1}, c(cid:9).
2(cid:96)+α) ← Com(pp, eb
α) ← Com(pp, epα
2(cid:96)+α, e1
2(cid:96)+α, ob
α, e1
α, ob
– P1 computes m1 = x1⊕p1 and sends to P3: B, the openings of the commitments corresponding to (x1, x31)
2(cid:96)+α}α∈[(cid:96)] and m1. Similarly, P2 computes m2 = x2 ⊕ p2 and sends to P3: B, the openings
i.e {omα
of the commitments corresponding to (x2, x32) i.e {omα
3(cid:96)+α}α∈[(cid:96)] and m2.
(cid:96)+α, oxα
α , oxα
32
31
2
1