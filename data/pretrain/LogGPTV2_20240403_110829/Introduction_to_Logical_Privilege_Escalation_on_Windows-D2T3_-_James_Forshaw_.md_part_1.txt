Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Introduction to Logical Privilege
Escalation on Windows
2Hr Workshop
James Forshaw - @tiraniddo
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Agenda of this Workshop
● Windows Internals as relevant to privilege escalation
● Attack surface analysis from sandboxes and normal user
● Bug classes and Vulnerability Exploitation
● Willing to answer questions as I go along, however it might
need to be saved till the end depending on the question :-)
Sorry, only so much I can talk about in 2hrs.
Some things are going to be missed :(
2
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Setup the Tools and Examples
● Download toolset and workbook from link below
● Ideally you want a VM of Windows 10 Anniversary Edition
○ 32 bit preferred, but 64 bit should also work for most things
● Extract contents to c:\workshop in the VM
● Read setup.txt for instructions on setting up a few things.
https://goo.gl/HzZ2Gw
https://goo.gl/P4Q9GN
3
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
What is a Logical Vulnerability?
A security vulnerability which rely on
subverting the programmer's original logic
rather than abusing unintended behaviour.
4
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Why?
● Why Privilege Escalation?
○ Everything is getting sandboxed!
■ Even Firefox (probably).
○ Everyone is running as a normal user
■ Or should be, of course there’s UAC, but well.
● Why Logical Exploitation?
○ Exploiting memory corruption is getting more difficult
■ Stack cookies, hardened heaps
■ Control Flow and Return Flow Guard
■ SMEP preventing trivial kernel code execution
■ ASLR, DEP and all that, including limiting information leakage from kernel.
○ Exploiting memory corruptions is boring ;-)
5
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
My Approach to Finding Logical Vulnerabilities
Attack Surface Find attack surface
from low to high
Enumeration
privilege level
6
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
My Approach to Finding Logical Vulnerabilities
Attack Surface Find attack surface
from low to high
Enumeration
privilege level
Static and Dynamic
Vulnerability
RE of Attack
Analysis Surface for Bug
Classes
7
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
My Approach to Finding Logical Vulnerabilities
Attack Surface Find attack surface
from low to high
Enumeration
privilege level
Static and Dynamic
Vulnerability
RE of Attack
Analysis Surface for Bug
Classes
Exploitation Exploit Discovered
Vulnerabilities
8
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Windows Internals for EoP Hunters
9
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Windows Security Components
Resource Windows Kernel
Owner SID
Group SID
SACL
Security
DACL Resource Access Check
Reference Monitor
Security Descriptor
Se* API
Process
System Call Kernel and
User Calls IO
Handlers Driver Code
Access
Token
10
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Access Token
User Security
Identifier
Groups
Mandatory
Label
Privileges
11
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Security Identifiers
● A Security Identifier (SID) is how Windows represents a user or
group (think or it like an expanded UID/GID from Unix)
S-1-5-RID1-RID2-...-RIDN
Version
Authority Relative
(always 1)
Identifiers
● Some well known SIDs:
World/Everyone S-1-1-0
Creator Owner S-1-3-0
Local SYSTEM S-1-5-18
Authenticated Users S-1-5-11
Anonymous S-1-5-7
12
More at - https://msdn.microsoft.com/en-us/library/windows/desktop/aa379649(v=vs.85).aspx
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Access Masks
● When opening a handle need specify the access mask.
● Checked against the access mask in the DACL entries
Generic Standard
Reserved Object Specific Access
Access Access
Bits Bits Bits Bits
31-28 27-24 23-16 15-0
Standard Access Rights:
READ_CONTROL - Read Security Descriptor
WRITE_DAC - Write Security Descriptor
WRITE_OWNER - Write Owner SID
DELETE - Delete the object
SYNCHRONIZE - Wait on the object
13
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Handles
Windows Kernel
Process
4 READ
8 READ/WRITE
12 READ
16 READ/WRITE File Object
Handle: 16 System Call
20 READ/WRITE
Handle table
Handle from
NTSTATUS ObReferenceObjectByHandle( user mode.
_In_ HANDLE Handle,
_In_ ACCESS_MASK DesiredAccess,
Required
_In_opt_ POBJECT_TYPE ObjectType,
Access
_In_ KPROCESSOR_MODE AccessMode,
_Out_ PVOID *Object,
Kernel Object
_Out_opt_ POBJECT_HANDLE_INFORMATION HandleInformation
Pointer
);
14
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Security Access Check (SeAccessCheck)
Desired Access:
IL Check
e.g. Read and Write
Owner SID
Group SID
SACL
Owner
Check
DACL
Access Token
Security Descriptor
DACL Check
Grant Access Deny Access
15
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Mandatory Integrity Level Check
Token IL Resource IL
Hard coded to
Medium IL if token is
Greater
Policy for:
Lowbox
or Equal
Read Access
Write Access
Execute Access
Desired Access Resource IL Policy
Allowed
By Policy
True
Continue to
Deny Access
Owner Check
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Owner Check
User SID Owner
False
Is Equal
Grant Write DAC/Read Can also use the
Control if Requested OWNER RIGHTS SID ACE
All
True
Access
Granted
Continue to
Grant Access
DACL Check
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Kernel DACL Check
Request Read/Write Access
Token User and Groups DACL
User SID Everyone RO
BUILTIN\Users BUILTIN\Administrators RW
Everyone BUILTIN\Users W
Current Granted Access: Read Only
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Kernel DACL Check
Request Read/Write Access
Token User and Groups DACL
User SID Everyone RO
BUILTIN\Users BUILTIN\Administrators RW
Everyone BUILTIN\Users W
Final Granted Access: Read/Write
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Security Descriptors and Inheritance
● New resources by default will inherit Security Descriptor for
parent container (be it object directory/file directory/registry
key etc.)
● Most resource creation calls can specify explicit SD
● If no inheritable ACEs, uses default DACL.
○ Even for Files, which is an odd behaviour.
● Special ACEs
○ OWNER RIGHTS - Limits/Grants Owner Access
○ CREATOR OWNER - SID replaced during inheritance with current owner SID
○ SELF - Replaced by the SID specified in AccessCheckByType
20
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Token Categories
UAC
Normal Token Linked Token
Nt
n C r
e e
ok at
T e
r L
e o
Filt w
B
Nt o
x
T
o
k
e
n
Filtered Token LowBox Token
Used for Sandboxes
21
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Restricted/Lowbox Token Access Check
Desired Access:
IL Check
e.g. Read and Write
Restricted
Owner
/Capability
Check
SIDs Owner
Check
Restricted
/Capability
DACL Check
SIDs DACL
Check
Grant Access Deny Access
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Access Token Types
Primary Impersonation
23
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Impersonation Security Level
Delegation
Impersonation
Identification
Anonymous
24
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Setting an Impersonation Token
● Impersonation assigns a token to a thread, replaced the token
used in access checks for the majority of system calls
Direct Setting Indirect Setting
SetThreadToken() ImpersonateNamedPipeClient()
ImpersonateLoggedOnUser() RpcImpersonateClient()
NtSetInformationThread(...) CoImpersonateClient()
Kernel Setting
PsImpersonateClient()
SeImpersonateClient/Ex()
25
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Impersonation Security
PsImpersonateClient(...) ► SeTokenCanImpersonate(...)
Capability
If Process has
If Token Level If Process IL <
Check
Impersonate
< Impersonate Token IL
Privilege
If Process User
== Token User
Elevation
Check
Restrict to
ALLOWED Identification
Level
Windows 10
Only
26
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Login Sessions
System Session 0 System Session 1
Local System Logon Session (AuthID: 00000000-000003e7) User Logon Session UAC Logon Session
(AuthID: U-V) (AuthID: X-Y)
User Process
User Process
Admin User
Process
User Process
User Process
User Process
27
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
DEMO 1: Viewing Token and Security Descriptors
28
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Object Manager Namespace
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Important Object Directories
Path Description
\Device Default location for kernel driver Device Objects
\GLOBAL?? System location for symbolic links to devices
including drive letters
\BaseNamedObjects System location for named resources
\Sessions\X Directory for the login session X
\Session\0\DosDevices Directory for the “Dos Devices” for each logged in
user.
\?? “Fake” prefix which refers to per-user Dos Devices.
30
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Win32 Path Support
Path Description
some\path Relative path to current
directory
c:\some\path Absolute directory
\\.\c:\some\path Device path, canonicalized
\\?\c:\some\path Device path,
non-canonicalized
\\server\share\path UNC path to share on server
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
File Path Handling
C:\Blah\..\SomeName
User Mode
\??\C:\SomeName
\Sessions\0\DosDevices\X-Y\C:\SomeName
\GLOBAL??\C:\SomeName
Kernel Mode
\Device\HardDisk1\SomeName
32
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Canonicalization
● Type of Win32 path affects canonicalization behaviour
Path Result of Canonicalization
c:\path\../badgers c:\badgers
c:\..\d:/badgers c:\d:\badgers
\\.\c:\path\../badgers c:\badgers
\\.\c:\..\d:/badgers d:\badgers (WTF!)
\\?\c:\path\../badgers c:\path\../badgers
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Opening a Device Name
\Device\Harddisk1\SomeName
Native NT Path
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Opening a Device Name
\Device\Harddisk1\SomeName
Native NT Path
\Device\Harddisk1 \SomeName
Device Path Device
Namespace Path
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Opening a Device Name
\Device\Harddisk1\SomeName
Native NT Path
\Device\Harddisk1 \SomeName
Device Path Device
Namespace Path
NOTE: In most cases securing
Create File
Handler the Device namespace Path is up
to the driver. This can lead to
Harddisk Driver
security bypasses.
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Device Namespace Path
Device
Device Path
Namespace Path
\Device\Harddisk1 \SomeName
Secured by Kernel
By Default
using a Security
Secured by Driver
Descriptor
Calls to IoCreateDevice which specify
FILE_DEVICE_SECURE_OPEN DeviceCharacteristics option
secures the namespace using the device security descriptor.
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Kernel Devices and IRPs
● Device objects are exposed in the Object Namespace
● Opened using file APIs (NtCreateFile/NtOpenFile)
● When a file is opened a special packet, an IO Request Packet
(IRP) is sent to the driver’s handlers
○ IRP_CREATE - Sent when the device object is opened
○ IRP_CLOSE - Sent when all device object handles are closed
○ IRP_DEVICE_CONTROL - DeviceIoControl
○ IRP_READ/WRITE - File Read and Writes
38