# Introduction to Logical Privilege Escalation on Windows

## Workshop Overview
**Duration:** 2 hours  
**Instructor:** James Forshaw - @tiraniddo  
**Resources:**
- Tools/Examples: [https://goo.gl/HzZ2Gw](https://goo.gl/HzZ2Gw)
- Workbook: [https://goo.gl/P4Q9GN](https://goo.gl/P4Q9GN)

### Agenda
1. **Windows Internals Relevant to Privilege Escalation**
2. **Attack Surface Analysis from Sandboxes and Normal Users**
3. **Bug Classes and Vulnerability Exploitation**
4. **Q&A Session** (Questions may be addressed at the end, depending on time and complexity)

*Note: Due to the 2-hour time constraint, some topics may not be covered in depth.*

---

## Setting Up the Tools and Examples
1. **Download the Toolset and Workbook:**
   - Download from: [https://goo.gl/HzZ2Gw](https://goo.gl/HzZ2Gw) and [https://goo.gl/P4Q9GN](https://goo.gl/P4Q9GN)
2. **Virtual Machine Setup:**
   - Use a VM with Windows 10 Anniversary Edition.
   - 32-bit is preferred, but 64-bit should work for most tasks.
3. **Extract Contents:**
   - Extract the contents to `C:\workshop` in the VM.
4. **Setup Instructions:**
   - Follow the instructions in `setup.txt` for additional setup steps.

---

## What is a Logical Vulnerability?
A logical vulnerability is a security flaw that exploits the programmer's intended logic rather than unintended behavior.

---

## Why Focus on Privilege Escalation and Logical Exploitation?

### Privilege Escalation
- **Sandboxing:** Many applications, including Firefox, are increasingly sandboxed.
- **User Permissions:** Most users run as standard users, though User Account Control (UAC) still exists.

### Logical Exploitation
- **Memory Corruption Challenges:**
  - Stack cookies, hardened heaps, Control Flow Guard, and Return Flow Guard make memory corruption more difficult.
  - SMEP (Supervisor Mode Execution Protection) prevents trivial kernel code execution.
  - ASLR (Address Space Layout Randomization), DEP (Data Execution Prevention), and other measures limit information leakage from the kernel.
- **Interest and Novelty:**
  - Memory corruption exploitation can be tedious, while logical vulnerabilities offer new and interesting challenges.

---

## My Approach to Finding Logical Vulnerabilities

### Step 1: Attack Surface Identification
- Identify attack surfaces from low to high privilege levels.
- Enumerate privileges and access levels.

### Step 2: Static and Dynamic Analysis
- Perform static and dynamic analysis of the attack surface to identify potential bug classes.

### Step 3: Exploitation
- Develop and test exploits for discovered vulnerabilities.

---

## Windows Internals for EoP Hunters

### Windows Security Components
- **Resource Access Check:**
  - **Security Descriptor:** Contains SIDs, DACLs, and SACLs.
  - **Access Token:** Holds user and group SIDs, mandatory labels, and privileges.
  - **Reference Monitor:** Enforces access control based on the security descriptor and token.

### Access Token
- **Components:**
  - **User Security Identifier (SID):** Represents the user.
  - **Groups:** SIDs of groups the user belongs to.
  - **Mandatory Label:** Integrity level (e.g., Low, Medium, High).
  - **Privileges:** Special permissions (e.g., SeDebugPrivilege).

### Security Identifiers (SIDs)
- **Format:** `S-1-5-RID1-RID2-...-RIDN`
  - **Version:** Always 1.
  - **Authority:** Relative identifiers.
- **Well-Known SIDs:**
  - World/Everyone: `S-1-1-0`
  - Creator Owner: `S-1-3-0`
  - Local SYSTEM: `S-1-5-18`
  - Authenticated Users: `S-1-5-11`
  - Anonymous: `S-1-5-7`

### Access Masks
- **Access Mask:** Specifies the type of access required when opening a handle.
- **Generic and Standard Access Rights:**
  - **Generic Access:** READ_CONTROL, WRITE_DAC, WRITE_OWNER, DELETE, SYNCHRONIZE.
  - **Standard Access:** Specific to the object type.

### Handles
- **Handle Table:** Manages handles in the kernel.
- **System Call:** `ObReferenceObjectByHandle` checks the handle and desired access.

### Security Access Check (SeAccessCheck)
- **Steps:**
  - **Integrity Level (IL) Check:** Ensures the token's IL is appropriate.
  - **Owner Check:** Grants Write DAC/Read Control if the user is the owner.
  - **DACL Check:** Determines final access based on the DACL entries.

### Mandatory Integrity Level (MIL) Check
- **Policy:**
  - **Read Access:** Allowed if token IL >= resource IL.
  - **Write/Execute Access:** Allowed if token IL > resource IL.

### Security Descriptors and Inheritance
- **Inheritance:**
  - New resources inherit the parent's security descriptor.
  - Explicit SD can be specified during creation.
- **Special ACEs:**
  - OWNER RIGHTS: Limits/grants owner access.
  - CREATOR OWNER: Replaces SID with the current owner's SID.
  - SELF: Replaced by the SID specified in `AccessCheckByType`.

### Token Categories
- **Token Types:**
  - **Primary Token:** Used by processes.
  - **Impersonation Token:** Assigned to threads.
- **Token Levels:**
  - **Delegation, Impersonation, Identification, Anonymous.**

### Impersonation Security
- **Setting an Impersonation Token:**
  - **Direct Setting:** `SetThreadToken()`, `NtSetInformationThread(...)`.
  - **Indirect Setting:** `ImpersonateLoggedOnUser()`, `RpcImpersonateClient()`.
  - **Kernel Setting:** `PsImpersonateClient()`, `SeImpersonateClient/Ex()`.

### Login Sessions
- **Sessions:**
  - **System Session 0:** Local System.
  - **System Session 1:** User logon session.
  - **UAC Logon Session:** Elevated user session.

### Demo 1: Viewing Token and Security Descriptors
- **Objective:** Understand how to view and interpret tokens and security descriptors.

### Object Manager Namespace
- **Important Directories:**
  - `\Device`: Kernel driver device objects.
  - `\GLOBAL??`: Symbolic links to devices.
  - `\BaseNamedObjects`: Named system resources.
  - `\Sessions\X`: Directory for login session X.
  - `\Session\0\DosDevices`: Per-user DOS devices.
  - `\??`: Prefix for per-user DOS devices.

### File Path Handling
- **Path Types:**
  - **Relative Path:** Relative to the current directory.
  - **Absolute Path:** Full path from the root.
  - **Device Path:** Canonicalized or non-canonicalized.
  - **UNC Path:** Network share path.

### Canonicalization
- **Behavior:**
  - **Canonical Paths:** Simplified paths (e.g., `c:\path\../badgers` becomes `c:\badgers`).
  - **Non-Canonical Paths:** Preserved as-is (e.g., `\\?\c:\path\../badgers` remains `c:\path\..\badgers`).

### Opening a Device Name
- **Paths:**
  - **Native NT Path:** `\Device\Harddisk1\SomeName`.
  - **Device Path:** Secured by the driver.
  - **Namespace Path:** Secured by the kernel using a security descriptor.

### Kernel Devices and IRPs
- **Device Objects:**
  - Exposed in the object namespace.
  - Opened using file APIs (e.g., `NtCreateFile`, `NtOpenFile`).
- **IRPs:**
  - **IRP_CREATE:** Sent when the device is opened.
  - **IRP_CLOSE:** Sent when all handles are closed.
  - **IRP_DEVICE_CONTROL:** `DeviceIoControl`.
  - **IRP_READ/WRITE:** File read and write operations.

---

For more detailed information, refer to the provided resources:
- Tools/Examples: [https://goo.gl/HzZ2Gw](https://goo.gl/HzZ2Gw)
- Workbook: [https://goo.gl/P4Q9GN](https://goo.gl/P4Q9GN)