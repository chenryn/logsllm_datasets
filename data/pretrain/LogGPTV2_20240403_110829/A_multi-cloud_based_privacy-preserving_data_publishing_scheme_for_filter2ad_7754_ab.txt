1. Pick k − 1 random points to deﬁne a polynomial q(x)
2. Share the secret over n parties by computing q(i) for
of degree k − 1 with q(0) = s.
any i ∈{ 1,··· , n}.
3. Reconstruct the polynomial from any k parties de-
noted by a set S, using interpolation q(x) =
i=1 q(i)∆i,S(x). The Lagrange coeﬃcient is ∆i,S(x) =
x−j
i−j , where S(x) denotes an element of S. Fi-
nally, recover the secret s = q(0).
!k
"j∈S,j̸=i
2.3 Bloom Filter
Bloom ﬁlter (BF) [5] is a space-eﬃcient probabilistic data
structure for an approximate representation of a set S, which
is typically implemented using a bit-array of w bits with k
hash functions. Given an arbitrary element x, a BF supports
approximate membership queries “x ∈ S?”.
It can yield
false positive answers but never false negative ones. The
probability of false positives can be adjusted by varying w
and k, as a tradeoﬀ between space eﬃciency and the false
positive rate.
3. PARALLEL-CLOUD SCHEME
Existing outsourced ABE schemes assume the cloud provi-
der is fully trusted and thus delegate attributes to a single
cloud server. However, under the honest-but-curious setting,
this assumption is no longer valid. To prevent the cloud
server from inferring user privacy from outsourced keys and
attributes, we propose a new secure data publishing ap-
proach that employs multiple non-colluding cloud servers.
32
(cid:1829)(cid:1864)(cid:1867)(cid:1873)(cid:1856)(cid:2869)(cid:483)
Health domain
(cid:57)(cid:68)(cid:79)(cid:88)(cid:72)(cid:16)(cid:68)(cid:71)(cid:71)(cid:72)(cid:71)(cid:3)(cid:86)(cid:72)(cid:85)(cid:89)(cid:76)(cid:70)(cid:72)(cid:86)(cid:3)
(cid:83)(cid:85)(cid:82)(cid:89)(cid:76)(cid:71)(cid:72)(cid:85)
(cid:58)(cid:72)(cid:68)(cid:85)(cid:68)(cid:69)(cid:79)(cid:72) (cid:71)(cid:72)
(cid:58)(cid:72)(cid:68)(cid:85)(cid:68)(cid:69)(cid:79)(cid:72)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)
(cid:69)(cid:79) (cid:71)
(cid:80)(cid:68)(cid:81)(cid:88)(cid:73)(cid:68)(cid:70)(cid:87)(cid:88)(cid:85)(cid:72)(cid:85)
(cid:1829)(cid:1864)(cid:1867)(cid:1873)(cid:1856)(cid:3040):
Geolocation domain
(cid:51)(cid:68)(cid:85)(cid:87)(cid:76)(cid:68)(cid:79)(cid:79)(cid:92)(cid:3)(cid:71)(cid:72)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)
(cid:1847)(cid:1871)(cid:1857)(cid:1870)(cid:2869)(cid:483)(cid:1827)(cid:1872)(cid:1872)(cid:2869)(cid:2869)(cid:481)(cid:1827)(cid:1872)(cid:1872)(cid:2873)(cid:2871),(cid:1827)(cid:1872)(cid:1872)(cid:2869)(cid:2868)(cid:2869)(cid:481) …
(cid:1847)(cid:1871)(cid:1857)(cid:1870)(cid:2870)(cid:483)(cid:1827)(cid:1872)(cid:1872)(cid:2869)(cid:481)(cid:1827)(cid:1872)(cid:1872)(cid:2870)(cid:2870), (cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2873)(cid:481)(cid:1827)(cid:1872)(cid:1872)(cid:2869)(cid:2870)(cid:2874) , …
(cid:1847)(cid:1871)(cid:1857)(cid:1870)(cid:3041)(cid:483)(cid:1827)(cid:1872)(cid:1872)(cid:2871)(cid:481)(cid:1827)(cid:1872)(cid:1872)(cid:2871)(cid:2873), (cid:1827)(cid:1872)(cid:1872)(cid:2869)(cid:2870)(cid:2875)(cid:481)(cid:485)…
(cid:1847)(cid:1871)(cid:1857)(cid:1870)(cid:2869)(cid:483)(cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2869)(cid:2870)(cid:481)(cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2875)(cid:2871),(cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2877)(cid:2869), ….
(cid:1872)(cid:1872)(cid:2872)(cid:2877)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869)(cid:2869), ,, , , , ,,,,,,,,,,,,, …………………………….…...…………………….…………….…………….……….……
(cid:1847)(cid:1871)(cid:1857)(cid:1870)(cid:2870)(cid:483)(cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2870)(cid:2870)(cid:481)(cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2873)(cid:2873), (cid:1827)(cid:1872)(cid:1872)(cid:2873)(cid:2869)(cid:2868)(cid:481)(cid:485)
(cid:1847)(cid:1871)(cid:1857)(cid:1870)(cid:3041)(cid:483)(cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2869)(cid:2870)(cid:481)(cid:1827)(cid:1872)(cid:1872)(cid:2872)(cid:2873)(cid:2873), (cid:1827)(cid:1872)(cid:1872)(cid:2873)(cid:2869)(cid:2868)(cid:481)….
…
…
…
(cid:58)(cid:72)(cid:68)(cid:85)(cid:68)(cid:69)(cid:79)(cid:72)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)
(cid:88)(cid:86)(cid:72)(cid:85)
Figure 1: Framework of privacy-preserving targeted broad-
cast in e-healthcare using parallel-cloud scheme.
We ﬁrst present a parallel-cloud scheme that divides the at-
tribute set into m parts and outsources each part to one
cloud server. The cloud servers operate on the received ac-
cess structure and ciphertext messages in parallel, and send
the intermediate results to the receiver separately. In this
process, as long as the cloud servers do not collude with each
other, we can protect the complete set of user attributes from
any single semi-honest cloud server.
3.1 System Model and Scheme Overview
In this scheme, the system consists of three entities, as
shown in Figure 1: the sender, such as a value-added service
provider or a wearable device manufacturer, publishing a
message in the encrypted form; m cloud servers partially
decrypting the ciphertext; and a large set of targeted device
users receiving and decrypting the message. In addition, a
trusted authority (TA) is implicitly assumed to be in charge
of the distribution and management of attributes and private
keys to users and cloud servers.
To enforce the ﬁne-grained broadcasting, the sender en-
crypts a message according to a speciﬁc access policy A in
the form of a series of AND gates. For instance, an access
structure A = DeviceA ∧ HeartDisease ∧ Overweight ∧
CityB deﬁnes that only the user living in City B who is a
customer wearing device A with the heart disease and the
overweight issue can decrypt the message. For the simplicity
of exposition, we let N denote the universal attribute set of
n attributes. The TA divides N into m mutually exclusive
subsets as N = N1 ∪··· ∪ Nm, where Ni ∩ Nj = ∅ for any
i ̸= j, and then outsources each Ni to a cloud server.
For privacy preserving considerations, the attribute split-
ting and distribution should follow two strategies. First,
each subset of attributes is only about one aspect (or do-
main) of the user. Attributes in any single subset should
not provide information for inference attacks. Secondly, the
attribute subset is assigned to a cloud considering its ser-
vice domain and trust level. For example, the cloud server
of a private hospital is trusted to host all health-related at-
tributes, while common user attributes such as location can
be distributed to a public cloud server.
Correspondingly, the access structure is also divided into
m parts such that A = A1 ∪··· ∪A m. When the sender
sends the main ciphertext and access structures to cloud
servers, each cloud server, on behalf of the receiver, checks
if the attributes of the receiver satisfy the access structure.
Based on the result of this ﬁne-grained access control, each
cloud server decrypts a part of the message and sends it to
the user, who will combine the intermediate results received
from all the servers to recover the original message.
3.2 Construction
Setup(λ, N , m). The TA calls the Setup algorithm to gen-
erate a public key P K and a master key M K. The algorithm
takes as input the security parameter λ, a universal attribute
set N and the number of cloud servers m. It chooses a bilin-
ear group G0 of prime order p with a generator g, and the
bilinear map e : G0 × G0 → G1. Next, the setup algorithm
chooses two randoms α, β ∈ Zp and generates P K and M K:
P K = (G0, g, h = gβ, e(g, g)α),
M K = (β, g α).
KeyGen(M K, S, t). Assume each user has a set of at-
tributes S = S1 ∪··· ∪ Sm, where S1 ⊆ N1,··· , Sm ⊆ Nm
and ∀i̸=jSi ∩ Sj = ∅. When a new user (e.g., a wearable de-
vice) joins the system, it registers to the TA with S and a
random t ∈ Zp chosen by itself. Then, the TA calls the key
generation algorithm to prepare a transformation key T K
for the clouds to perform partial decryption, from which
the user can recover the ﬁnal message with his private key
SK = t. In particular, KeyGen selects a random r ∈ Zp and
a randomr j ∈ Zp for each attribute j ∈ S, and takes S,
t, and the master key M K as input to generate the trans-
formation key. T K is set as T K = (D = gt(α+r)/β, Dj =
grH(j)rj , Dj′ = grj ,∀j ∈ S). H and H1 denote collision-
free hash functions, where H : {0, 1}∗ → G0. Finally, the
TA distributes D, Dj, and D′j to Cloudj.
Encrypt(P K, M , A). To broadcast a message M under
the access structure A, the sender ﬁrst chooses m random
numbers s1,··· , sm ∈ Zp, where the secret si is shared by
all attributes in Ai. Let ki = |Ai| be the number of elements
in Ai and index(y) be the index of the attribute y in Ai.
To share the secret, a polynomial qi(x) of degree ki − 1 is
constructed for Ai, where qi(0) = si and the other ki − 1
values are randomly set to complete the construction. Given
Ai, the ciphertext CT is then constructed as:
#C = M e(g, g)αs, C = hs, CTi
where s =! si, and CTi =
Ai, Cy = gqi(index(y)), C′y = H(y)qi(index(y)),∀y ∈ Ai
To allow the receiver to verify the correctness and com-
pleteness of the transformation performed by the clouds, the
sender also generates a veriﬁcation value V = senderID|
H1(A)|seq(H1(A))|T , where“|”denotes concatenation. H1(A)
is the digest of the access policy A, seq(H1(A)) is the se-
quence number of the message regarding the access policy
A, and T is the timestamp of the message. The sender main-
tains the sequence number for each access policy, and in-
creases its value by 1 when sending a new message under that
access policy. Then, the sender generates the signature of
message M and veriﬁcation value V as σ = sign(H1(M|V )).
Finally, the sender randomly chooses a cloud, e.g., Cloud1,
to hold (#C, C, σ), and sends CTi and V to Cloudi.
Transform(CTi, T Ki). When a cloud, e.g., Cloudi, re-
ceives CTi, it uses the transformation key T Ki to partially
decrypt the ciphertext and transforms it into a form whose
decryption is less computationally costly. In particular, the
cloud ﬁrst checks if Ai ⊆ Si. If not, it returns an error sym-
bol ⊥, indicating that the user does not satisfy the access
structure. If Ai ⊆ Si, for each attribute j ∈ Ai, it computes:
DecryptN ode(CTi, T Ki, j) =
=
e(Dj, Cj)
e(D′j, C′j)
e(grH(j)rj , gqi(index(j)))
e(grj , H(j)qi(index(j)))
= e(g, g)rqi(index(j))
After the cloud computes the values for all attributes in
Ai, it combines them to partially recover the secret si that
is shared in Ai. In particular, it computes F (Ai) as below
and sends the result together with V to the receiver:
(e(g, g)rqi(index(j)))∆j,Ai
(0)
qi(index(j))·∆j,Ai
(0)
F (Ai) = $j∈Ai
= e(g, g)r!j∈Ai
= e(g, g)rqi(0)
= e(g, g)rsi
With C and D, Cloud1 computes #D as:
#D = e(C, D)
= e(gβs, gt(α+r)/β)
= e(g, g)st(α+r)
and σ to the receiver.
Finally, it sends the partially decrypted ciphertext #C, #D
Decrypt(#C, #D, F (Ai), SK). If the receiver receives m parts
of partial ciphertexts, she knows that her attributes satisfy
the access policy. Otherwise, she discards the partial cipher-
text without decryption.
With its private key SK and the ciphertext transformed
by the clouds (i.e., #D and F (Ai)s), the receiver recovers the
original message as:
#C
("D)1/t
#m
i=1 F (Ai)
#C
=
=
(e(g,g)st(α+r))1/t
i=1 e(g,g)rsi
#m
M e(g, g)αs
e(g, g)αs
=
e(g,g)s(α+r)
e(g,g)rs
#C
= M.
In the above computation, it is obvious that the receiver
does not need any paring operation to recover the message.
Instead, it only takes one exponentiation and m multipli-
cation operations regardless of the complexity of the ac-
cess structure. Compared to the original CP-ABE, which
requires 2!|Ai| pairings, our scheme greatly reduces the
computational overhead at the receiver.
Verify(M, σ, V). To verify the completeness of the opera-
tions done by the clouds, the receiver needs to check if all
the veriﬁcation values are consistent. As long as at least one
cloud is honest, the received veriﬁcation data is authentic.
Then, the receiver randomly chooses a V from m partial
ciphertexts, and uses senderID and H1(A) to look up the
sequence number seqprv(H1(A)) of the previous round for
H1(A) from senderID. The receiver veriﬁes the complete-
ness, that is, she has received all messages intended to her,
by checking if seq(H1(A)) = seqprv(H1(A)) + 1. If not, this
indicates some messages are discarded by dishonest cloud(s).
After the completeness veriﬁcation, the receiver checks M|V
against the signature σ to verify the correctness of the re-
covered message, and updates seq(H1(A)).
33
(cid:51)(cid:68)(cid:85)(cid:87)(cid:76)(cid:68)(cid:79)(cid:79)(cid:92)(cid:3)(cid:71)(cid:72)(cid:70)(cid:85)(cid:92)(cid:83)(cid:87)(cid:3)(cid:82)(cid:81)(cid:3)(cid:1829)(cid:1864)(cid:1867)(cid:1873)(cid:1856)(cid:3036)
(cid:56)(cid:81)(cid:76)(cid:70)(cid:68)(cid:86)(cid:87)(cid:3)(cid:87)(cid:82)(cid:3)(cid:87)(cid:75)(cid:72)(cid:3)
(cid:73)(cid:76)(cid:85)(cid:86)(cid:87)(cid:3)(cid:70)(cid:79)(cid:82)(cid:88)(cid:71)
(cid:73)(cid:76)(cid:85)(cid:86)
(cid:57)(cid:68)(cid:79)(cid:88)(cid:72)(cid:16)(cid:68)(cid:71)(cid:71)(cid:72)(cid:71)(cid:3)(cid:86)(cid:72)(cid:85)(cid:89)(cid:76)(cid:70)(cid:72)(cid:86)(cid:3)
(cid:83)(cid:85)(cid:82)(cid:89)(cid:76)(cid:71)(cid:72)(cid:85)
…
(cid:58)(cid:72)(cid:68)(cid:85)(cid:68)(cid:69)(cid:79)(cid:72)(cid:3)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:3)
(cid:88)(cid:86)(cid:72)(cid:85)
Figure 2: Framework of privacy-preserving targeted broad-
cast in e-healthcare using chain-cloud scheme.
Discussions. The parallel-cloud scheme hides the complete
set of user attributes from a single cloud server, and signif-
icantly reduces the computational overhead at the receiver.
However, it yields three drawbacks. First, the scheme only
supports the AND gate in the access structure. Thus, it is
less expressive comparing to the monotone structure pro-
posed in the original CP-ABE design [4], which supports
k-threshold gates. Secondly, the scheme uses the number
of clouds, m, as a system-wide parameter, which makes the
system structure very rigid. It requires all the receiver to
use the same value for m, and imposes an additional burden
to the sender, who is required to split the access structure
into m pieces and distribute to m cloud servers. As individ-
ual users may have diﬀerent needs regarding the protection
of the attribute privacy, schemes that provide a ﬂexible pri-
vacy setting are more desirable. Finally, the parallel-scheme
incurs unnecessary communication between a cloud and the
receiver. For example, when Cloudi successfully matches Ai
to Si but Cloudj fails to match Aj, Cloudi has to partially
decrypt the message and forward the intermediate result to