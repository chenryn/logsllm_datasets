title:Isogrammic-Fusion ORAM: Improved Statistically Secure Privacy-Preserving
Cloud Data Access for Thin Clients
author:Michael T. Goodrich
Isogrammic-Fusion ORAM: Improved Statistically Secure
Privacy-Preserving Cloud Data Access for Thin Clients
Michael T. Goodrich
University of California, Irvine
PI:EMAIL
ABSTRACT
We study oblivious random access machine (ORAM) simulation,
in cloud computing environments where a thin client outsources
her data to a server using O (1)-sized messages.
KEYWORDS
ORAM, cloud storage, oblivious storage, fusion trees
ACM Reference Format:
Michael T. Goodrich. 2018. Isogrammic-Fusion ORAM: Improved Statis-
tically Secure Privacy-Preserving Cloud Data Access for Thin Clients. In
ASIA CCS ’18: 2018 ACM Asia Conference on Computer and Communications
Security, June 4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY,
USA, 8 pages. https://doi.org/10.1145/3196494.3196500
1 INTRODUCTION
In the cloud storage paradigm, a client, Alice, outsources her data
to a server, Bob, who stores Alice’s data and provides her with an
interface to access it from anywhere in the network. We assume that
Bob is “honest-but-curious,” in that Bob is trusted to keep Alice’s
data safe and available, but he wants to learn as much as possible
about Alice’s data. The challenge, then, is for Alice to obfuscate not
just the values of her data through encryption but also obfuscate her
data access pattern. Fortunately, in support of this obfuscation goal,
there is a large and growing literature on methods for simulating a
RAM algorithm to achieve obliviousness. Such oblivious algorithm
simulation methods provide ways for Alice to privately outsource
her data to Bob by replacing each single access in an algorithm, A,
that Alice is executing into a set of accesses. Formally, we assume
Alice outsources a storage of size n, with indices in [0, n − 1], and
that A uses the following operations:
• write(i, v): Write v into memory cell i.
• read(i): Read v from memory cell i.
A related concept is oblivious storage (OS), e.g., see [13, 16–18],
where Alice wishes to store a dictionary at the server, Bob, of size
at most n, and her algorithm, A, accesses this dictionary using the
following operations:
• put(k, v): Add the pair (item), (k, v). This causes an error if
there is already an item with key k.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Copyright held by the owner/author(s). Publication rights licensed to the
Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196500
• get(k ): Return and remove the item, (k, v), associated with
the key, k. If there is no such item, then this operation returns
NOT-FOUND.
We assume Alice’s algorithm, A, will issue an access sequence
of some given length, N , where N is at most polynomial in n. The
challenge is for Alice to make sure that Bob learns nothing about
her access sequence beyond the values of n and N , that is, that she
achieves statistical secrecy for her data access pattern.
Let σ denote a sequence of N read/write operations (or get/put
operations). An ORAM (or OS) scheme transforms σ into a sequence,
σ ′, of operations. We assume that each item is stored using a
semantically-secure encryption scheme, so that independent of
whether Alice wants to keep a key-value item unchanged, for each
access, the sequence σ ′ involves always replacing anything Alice
accesses with a new encrypted value so that Bob is unable to tell if
the underlying plaintext value has changed.
The security for an ORAM (or OS) simulation is defined in terms
of a computational game. Let σ1 and σ2 be two different access
sequences, of length N , for a key/index set of size n, that are chosen
by Bob and given to Alice. Alice chooses uniformly at random one of
these sequences and transforms it into access sequence σ ′ according
to her ORAM (OS) scheme, which she then executes according to
this scheme. Alice’s ORAM (OS) scheme is statistically secure at
hiding her access pattern if Bob can determine which sequence, σ1
or σ2, Alice chose with probability at most 1/2.
The I/O overhead for such an OS or ORAM scheme is a function,
T (n), such that the total number of messages sent between Alice
and Bob during the simulation of all N of her accesses from σ is
O (N · T (n)) with high probability.
In this paper, we provide methods for improving the asymptotic
I/O overhead for such ORAM simulations. The approach we take
to achieve this goal is to first transform the original RAM access
sequence, σ, into an intermediate OS sequence, ˆσ, which has a
restricted structure that we refer to as it being isogrammic 1, and
we then efficiently transform the isogrammic sequence, ˆσ, into the
final access sequence, σ ′, by taking advantage of this structure. We
define a sequence, σ = (σ1, σ2, . . . , σN ), of put and get operations
to be isogrammic if the following conditions are satisfied [11]:
(1) For every get(k ) operation, there is a previous put(k, v)
operation.
the set with key k.
(2) For any put(k, v) operation, there is not already an item in
(3) For each put(k, v) operation, the key k includes a compo-
nent that is chosen uniformly and independently at random
from a sufficiently large key space (which depends, e.g., on
configuration parameters).
1An isogram is a word, like “uncopyrightable,” without a repeated letter. E.g., see
wikipedia.org/wiki/Isogram.
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea699Thus, isogrammic access sequences do not result in error condi-
tions, never get NOT-FOUND responses, and use keys that are
substantially random. The following parameters are also relevant:
• w: The word size in bits for indices and keys. As is standard
(e.g., see [9]), we assume w ≥ log n, so an index or key can
be stored in O (1) memory words.
• M: The number of words in Alice’s private memory.
• B: The maximum number of words in a message block sent
from/to Alice in one I/O operation.
In this paper, we are interested in scenarios where M is o(log n)
and B is O (1), so as to design efficient statistically-secure ORAM sim-
ulation schemes for thin clients, that is, clients that have asymptot-
ically sublogarithmic-sized local private memory and use constant-
sized messages to communicate with the server. Moreover, we desire
schemes whose I/O overhead bounds hold with high probability.
Besides being of interest in its own right, and returning to the
original thin-client models for ORAM simulation [6, 9], designing
improved ORAM simulation methods for thin clients also can
improve other cryptographic primitives and protocols, which use
ORAM simulations as black-box or white-box constructions, such as
dynamic searchable encryption and secure two-party computation.
Previous Related Results. ORAM simulation methods origi-
nate from the seminal work of Goldreich and Ostrofsky [9], who
achieve an I/O overhead of O (log3
n) for thin clients, with M and
B being O (1), with a scheme that fails with polynomial probability
and requires the use of a random oracle (hence, is not statistically
secure). Subsequently, Goodrich and Mitzenmacher [12] present
an ORAM simulation with an O (log n) I/O overhead and constant-
sized messages, and their method is also not statistically secure. In
addition, it requires that M be Ω(nϵ ), for some fixed constant ϵ > 0,
i.e., their result is not for thin clients. Kushilevitz et al. [14] improve
the I/O overhead for thin clients (with a constant-size client-side
memory) to be O (log2
n/ log log n), but their method assumes the
existence of random oracles.
Addressing the more challenging goal of designing an ORAM
simulation method that achieves statistical security, Damgård et
al. [6] introduce an ORAM scheme that is statistically secure and
achieves an I/O overhead of O (log3
n). Moreover, their method
works for thin clients, with M and B being O (1); in fact, their method
remained until the present paper the best previous statistically
secure ORAM method for thin clients. Stefanov et al. [19] introduce
the Path ORAM method, which is statistically secure but not suited
for thin clients, in that it uses B-sized messages and assumes B
is ω (log n) and M is ω (B log n), to achieve an I/O overhead of
O (log2
n/ log B). Chung et al. [3] provide an alternative “supermar-
ket ORAM” implementation for the case when B is O (1) and M is
polylogarithmic, which has an I/O overhead of O (log2
n log log n),
but their method is nevertheless not a solution for thin clients.
Still, applying an observation of Chung and Pass for their “Simple-
ORAM” scheme [4], the supermarket ORAM method can be made
to work on a thin client, but then the overhead becomes worse that
the overhead for the scheme of Damgård et al. [6]. These schemes
for non-thin clients use a simple tree-based approach (which our
scheme also uses), but, in order to achieve efficient I/O overheads,
they require an additional complication of carefully-implemented
recursive applications of their approaches, which take away from
their simplicity. Ohrimenko et al. [16] present an oblivious storage
(OS) scheme that achieves an I/O overhead of O (1), but it requires
that M and B be Ω(nϵ ), for a fixed constant ϵ > 0, and it assumes
the existence of random oracles. Addressing a more restricted
problem than ORAM or OS simulation, Wang et al. [21] introduce
an interesting “oblivious data structure” framework, which applies
to algorithms that use a small number of bounded-degree data
structures, such as stacks, queues, or search trees, to achieve an
O (log n) I/O overhead for data-structure access sequences. Their
work can be seen a precursor to isogrammic access sequences. Un-
fortunately, their algorithms are based on the (non-recursive) Path
ORAM of Stefanov et al. [19], however, which requires that M and B
be ω (log n); hence, their results for oblivious data structures are not
for thin clients, but instead require superlogarithmic-sized client-
side memory and superlogarithmic-sized messages to be exchanged
between the client and the server. The Circuit ORAM [20], improves
the circuit complexity for such tree-based ORAM simulations, but
still requires blocks to be of size at least Ω(log2
n); hence, it is also
not designed for thin clients.
At a high level, our work is similar to the recent BIOS ORAM
scheme of Goodrich [11], which is a tree-based ORAM scheme that
uses B-trees instead of binary trees to improve the I/O overhead for
ORAM simulation for non-thin clients. Like our scheme, his scheme
avoids recursion by a reduction to isogrammic access sequences,
but his scheme is not for thin clients.
n).
Our Results. We provide statistically secure ORAM simulation
methods for thin clients that asymptotically improve the I/O over-
heads of previous statistically secure ORAM simulation methods
for thin clients. We summarize our results in Table 1. given in
an appendix. Our isogrammic-fusion ORAM scheme is the first
statistically secure ORAM to achieve an I/O overheads of O (log2
n)
or O (log2
n log log n) for thin clients, whereas the previous best
result for this cloud-computing scenario, by Damgård et al. [6], has
an I/O overhead of O (log3
We refer to our approach to ORAM simulation as isogrammic-
fusion ORAM, due to its combination of two concepts for ORAM
simulations. The first concept is the exploitation of isogrammic
access sequences [11]. This framework extends the oblivious data
structure framework of Wang et al. [21], which is only for fat clients.
The second concept we use is the main technical device we utilize
to achieve our results, which is a bit-level parallel data structure
known as the fusion tree [2, 8]. By “bit-level parallelism” we
are referring to storing information in words of size w = Θ(log n)
bits and accessing this information using bit-level operations, such
as AND, OR, XOR, shift, etc. Note that the standard ORAM and
OS client-server models are completely agnostic regarding bit-
level parallelism at the client; hence, our use of this technique
fits squarely in the standard, classic ORAM model [9]. We provide
a review of fusion trees and a “warm up” isogrammic simulation of
stacks and queues in appendices, as well as omitted proofs.
2 REDUCING ORAM TO ISOGRAMMIC OS
In this section, we describe how to reduce ORAM simulation to
an isogrammic OS problem, where every key used for get and put
operations includes Θ(log n) random bits. So, suppose Alice has a
Session 16: Applied Crypto 2ASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea700RAM algorithm, A, with memory size n, which she would like to
simulate, such that the data for A is stored at a server, Bob.
Given the n indices in the range [0, n − 1] for the cells of A’s
data storage, rather than have Alice index cells using the indices
as addresses for cells in an array, we have Alice access the cells of
her outsourced storage stored by Bob searching down a complete
binary tree, R, having the cells of her storage associated with R’s
leaves. This tree-based approach is actually quite common in ORAM
simulations, e.g., see [7, 19]. That is, our first reduction replaces
each read(i) or write(i, v) operation with a sequence of O (log n)
put(k, v) and get(v) operations.
Without loss of generality, let us assume that n is a power of 2, so
that every root-to-leaf path in R has the same length, namely, log n.
For each access for an item with index, i, we simply do a search
for i in R using the standard binary-tree searching algorithm. This
requires that we access exactly log n nodes, which, admittedly does
not yet give rise to an isogrammic access sequence.
The modification we perform, then, is that instead of doing such
accesses in a non-isogrammic fashion, let us instead convert our