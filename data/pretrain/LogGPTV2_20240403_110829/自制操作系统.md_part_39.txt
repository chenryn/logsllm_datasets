本次的HariMain节选
int mx, my, i, count = 0;
10
（中略）
for (;;) { 11
count++; /* 这里！ */
io_cli();
12
if (fifo8_status(&keyfifo) + fifo8_status(&mousefifo) + fifo8_status(&timerfifo) == 0) {
io_sti();
} else {
if (fifo8_status(&keyfifo) != 0) { 13
（中略）
} else if (fifo8_status(&mousefifo) != 0) {
（中略）
13
} else if (fifo8_status(&timerfifo) != 0) {
i = fifo8_get(&timerfifo); /* 超时的是哪个呢？ */
io_sti();
if (i == 10) { 15
putfonts8_asc_sht(sht_back, 0, 64, COL8_FFFFFF, COL8_008484, "10[sec]", 7);
sprintf(s, "%010d", count); /* 这里！ */
putfonts8_asc_sht(sht_win, 40, 28, COL8_000000, COL8_C6C6C6, s, 10); /* 这里！ */
} else if (i == 3) { 16
图灵社区会员 metorm 专享 尊重版权
244 …… 第13天：定时器（2）
putfonts8_asc_sht(sht_back, 0, 80, COL8_FFFFFF, COL8_008484, "3[sec]", 6);
count = 0; /* 开始测定 */
} else {
/* 0还是1 */
if (i != 0) {
timer_init(timer3, &timerfifo, 0); /* 下面是设定为0 */
boxfill8(buf_back, binfo->scrnx, COL8_FFFFFF, 8, 96, 15, 111);
} else {
timer_init(timer3, &timerfifo, 1); /* 下面是设定为1 */
boxfill8(buf_back, binfo->scrnx, COL8_008484, 8, 96, 15, 111);
}
timer_settime(timer3, 50);
sheet_refresh(sht_back, 8, 96, 16, 112);
}
}
}
}
■■■■■
我们先执行一下这段程序吧。运行“make run”。
在笔者的环境中执行haribl10c
像这样，10秒钟结果就出来了。大家试着运行几次“make run”，会发现每次结果都不同。
我们运行了5次。在测试期间的10秒钟内，不要动鼠标也不要按键。如果动鼠标或按键了，程序
就不得不进行光标的显示处理，这样会减缓count的增长。
用“make run”运行5次harib10c的结果
0002638668
0002639649
0002638944
0002648179
0002637604
图灵社区会员 metorm 专享 尊重版权
3 测试性能（harib10c～harib10f） …… 245
5次结果是如此发散，是由于使用模拟器而受到了Windows的影响。5次结果中，最大值与最
1
小值的差有10575之大。因此我们在真机上也执行“make install”①看看。
18
用真机执行5次harib10c的结果
0074643522
0074643698
3
0074643532
0074643699
0074643524
20
靠按复位按钮完成多次起动，的确很麻烦，我们只做了5次。得到的数值收敛得很好，最大
值和最小值的差只有177。果然还是真机好呀。虽然用了真机，可还是出现了177的误差，其原因 21
在于电脑内部的温度変化，或时钟频率的微妙変化。
22
■■■■■
下面来看看，如果对harib10c程序利用harib09d时候的timer.c和bootpack.h，结果会怎样呢？
7
赶紧尝试一下吧，当然是在误差较小的真机上做了。我们这时的程序叫作harib10d。
用真机执行5次harib10d的结果 8
0074620088
0074620077
9
0074619893
0074619902
0074619967
10
像这样记流水账似的罗列一堆数值，谁也看不出个所以然。我们还是计算一下平均值吧。
11
harib10c:0074643595
harib10d:0074619985
可以看得出来，harib10c比harib10d快了23610个数。这下我们能够确定程序的确有了改进， 12
太好了！昨天的辛苦总算没有白费。
那么harib09e和harib09f的定时器控制又怎么样呢？笔者使用它们分别创建了harib10e和 13
harib10f，而且也在真机上进行了测试，结果总结如下。
harib10d:0074619985(最初的定时器) 13
harib10e:0074629087(舍弃剩余时间，记忆超时时刻)
harib10f:0074633350(导入next)
harib10c:0074643595(导入timers[ ]) 15
——————————
16
① 在真机上也进行了测试：笔者用的真机是“AMD Duron 800MHz，内存为192MB”的组装机。
图灵社区会员 metorm 专享 尊重版权
246 …… 第13天：定时器（2）
大家可以看出，程序每改良一次速度就提高一点。
COLUMN-7 起动3秒后，将count置为0的原因
首先考虑一下这个命令的意思吧。起动3秒后把count复位至0，这与从3秒后开始计数是
一样的。画面上要到10秒以后才显示，这样测试的时间就是7秒钟。
事实上，笔者最初并没有加入“count=0;”语句。但那样做的结果是，在真机上测定
harib10d时，最高值和最低值的差值竟然达到了150054。这可了不得呀。差值这么大，即使
我们比较harib10c和harib10d，也不知道哪个更快。
对于这样的结果，笔者曾茫然不知所措，差一点要放弃性能比较。但后来笔者忽然想起，
只要某些条件稍微有些变化，电脑初始化所花费的时间就会有很大变化。这就是为什么我们
在起动后3秒钟之内不进行测试的原因。这样做之后，误差急剧减小，终于可以比较结果了，
真是太好了。
44 重新调整 FIFO 缓冲区（2）（harib10g）
我们已经可以确定性能真正得到了改善，所以下面把程序恢复到harib10c，沿着13.2节继续
思考吧。
既然可以把3个定时器归纳到1个FIFO缓冲区里，那是不是可以把键盘和鼠标都归纳起来，只
用1个FIFO缓冲区来管理呢？如果能够这样管理的话，程序就可以写成：
if (fifo8_status(&keyfifo) + fifo8_status(&mousefifo) + fifo8_status(&timerfifo) == 0) {
冗长的if语句，也可以缩短了。那么或许harib10c中206行的bootpack.c也能简化。
■■■■■
在13.2节中，通过往FIFO内写入不同的数据，我们可以把3个定时器归入1个FIFO缓冲区里。
同理，分别将从键盘和鼠标输入的数据也设定为其他值就可以了。那好，我们就这么办。
（写入FIFO的数值 中断类型）
0～ 1…………………光标闪烁用定时器
3…………………3秒定时器
10…………………10秒定时器
256～ 511…………………键盘输入（从键盘控制器读入的值再加上256）
512～ 767……鼠标输入（从键盘控制器读入的值再加上512）
这样，1个FIFO缓冲区就可以正常进行处理了。真是太好了！不过现在有一个问题，fifo8_put
图灵社区会员 metorm 专享 尊重版权
4 重新调整FIFO缓冲区（2）（harib10g） …… 247
函数中的参数是char型，所以不能指定767那样的数值。哎，我们好不容易整理到1个缓存器中了，
1
却又出现这种问题。
18
■■■■■
所以，我们想将写入FIFO缓冲区中的内容改成能够用int指定的形式。大家可不要担心哦。
3
内容上与FIFO8完全相同。只是将char型变成了int型。
本次的bootpack.h节选
20
struct FIFO32 {
int *buf;
int p, q, size, free, flags; 21
};
22
本次的fifo.c节选
void fifo32_init(struct FIFO32 *fifo, int size, int *buf)
/* FIFO缓冲区的初始化*/ 7
{
fifo->size = size;
fifo->buf = buf;
fifo->free = size; /*空*/ 8
fifo->flags = 0;
fifo->p = 0; /*写入位置*/
fifo->q = 0; /*读取位置*/ 9
return;
}
int fifo32_put(struct FIFO32 *fifo, int data) 10
/*给FIFO发送数据并储存在FIFO中*/
{
if (fifo->free == 0) { 11
/*没有空余空间，溢出*/
fifo->flags |= FLAGS_OVERRUN;
return -1;
} 12
fifo->buf[fifo->p] = data;
fifo->p++;
if (fifo->p == fifo->size) {
13
fifo->p = 0;
}
fifo->free--;
return 0; 13
}
int fifo32_get(struct FIFO32 *fifo)
/*从FIFO取得一个数据*/ 15
{
int data;
if (fifo->free == fifo->size) {
16
/*当缓冲区为空的情况下返回-1*/
图灵社区会员 metorm 专享 尊重版权
248 …… 第13天：定时器（2）
return -1;
}
data = fifo->buf[fifo->q];
fifo->q++;
if (fifo->q == fifo->size) {
fifo->q = 0;
}
fifo->free++;
return data;
}
int fifo32_status(struct FIFO32 *fifo)
/*报告已经存储了多少数据*/
{
return fifo->size - fifo->free;
}
■■■■■
下面我们就要写键盘和鼠标的相关程序了。我们不使用FIFO8，而是改为使用FIFO32。
本次的keyboard.c节选
struct FIFO32 *keyfifo;
int keydata0;
void init_keyboard(struct FIFO32 *fifo, int data0)
{
/* 将FIFO缓冲区的信息保存到全局变量里 */
keyfifo = fifo;
keydata0 = data0;
/* 键盘控制器的初始化 */
wait_KBC_sendready();
io_out8(PORT_KEYCMD, KEYCMD_WRITE_MODE);
wait_KBC_sendready();
io_out8(PORT_KEYDAT, KBC_MODE);
return;
}
void inthandler21(int *esp)
{
int data;
io_out8(PIC0_OCW2, 0x61); /* 把IRQ-01接收信号结束的信息通知给PIC */
data = io_in8(PORT_KEYDAT);
fifo32_put(keyfifo, data + keydata0);
return;
}
本次的mouse.c节选
struct FIFO32 *mousefifo;
i nt mousedata0;
图灵社区会员 metorm 专享 尊重版权
4 重新调整FIFO缓冲区（2）（harib10g） …… 249
void enable_mouse(struct FIFO32 *fifo, int data0, struct MOUSE_DEC *mdec)
1
{
/* 将FIFO缓冲区的信息保存到全局变量里 */
mousefifo = fifo;
mousedata0 = data0; 18
/* 鼠标有效 */
wait_KBC_sendready();
io_out8(PORT_KEYCMD, KEYCMD_SENDTO_MOUSE);
3
wait_KBC_sendready();
io_out8(PORT_KEYDAT, MOUSECMD_ENABLE);
/* 顺利的话，ACK(0xfa)会被发送*/
mdec->phase = 0; /* 等待鼠标的0xfa的阶段*/ 20
return;
}
21
void inthandler2c(int *esp)
/* 基于PS/2鼠标的中断 */