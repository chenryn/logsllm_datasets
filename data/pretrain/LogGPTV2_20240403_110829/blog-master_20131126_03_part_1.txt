## 优化器成本因子校对 - PostgreSQL explain cost constants alignment to timestamp    
### 作者                            
digoal                            
### 日期                            
2013-11-26                           
### 标签                            
PostgreSQL , 优化器 , 成本因子 , 校对   
----                            
## 背景               
最近在写一个客户的PostgreSQL数据库培训PPT, 其中有explain的讲解需求, 刚刚接触PostgreSQL的童鞋对PostgreSQL的explain输出中cost的部分可能会一头雾水, 看不懂cost的值和SQL实际运行时间有什么联系.  
为了让大家能更加深刻的了解explain, 我打算对explain的cost常量做一次校准, 这个校准的灵感来自天文望远镜赤道仪的校准. PostgreSQL cost常量在校准后, explain 的输出cost就会非常接近真实执行的时间.  
接下来我们就来看一看如何校准PostgreSQL COST常量.  
http://www.postgresql.org/docs/9.3/static/runtime-config-query.html#RUNTIME-CONFIG-QUERY-CONSTANTS  
在赤道仪的校准中, 要用到北极星以及至少一颗已知赤经赤纬的亮星.  
同样, 在PostgreSQL COST的校准中, 要用到的是已知算法以及真实的数据. 利用真实的数据和公式, 求出未知数, 达到校准的目的.  
已知的数据可以来自硬件厂商或者自行测试得到, 已知的cost值算法则可以参考PostgreSQL手册或源代码.  
src/backend/optimizer/path/costsize.c  
PostgreSQL的cost常量如下 :   
```
seq_page_cost  
-- 连续块扫描操作的单个块的cost. 例如全表扫描  
random_page_cost  
-- 随机块扫描操作的单个块的cost. 例如索引扫描  
cpu_tuple_cost  
-- 处理每条记录的CPU开销  
cpu_index_tuple_cost  
-- 扫描每个索引条目带来的CPU开销  
cpu_operator_cost  
-- 操作符或函数带来的CPU开销.(需要注意函数以及操作符对应的函数的三态, 执行计划会根据三态做优化, 关系到多条记录时三态对应的调用次数是需要关心的)  
```
接下来举例说明如何校对这几个常量.  
## 1\. 推算seq_page_cost 以及 cpu_tuple_cost  
创建测试表  
```  
digoal=# create table tbl_cost_align (id int, info text, crt_time timestamp);  
CREATE TABLE  
```  
插入测试数据, 这里插入的ID为随机数, 这样的话可以使得我们后面要做的离散IO请求测试更准确一些.  
```  
digoal=# insert into tbl_cost_align select (random()*2000000000)::int, md5(random()::text), clock_timestamp() from generate_series(1,100000);  
INSERT 0 100000  
digoal=# insert into tbl_cost_align select (random()*2000000000)::int, md5(random()::text), clock_timestamp() from generate_series(1,10000000);  
INSERT 0 10000000  
```  
分析表, 获得统计信息  
```  
digoal=# analyze tbl_cost_align;  
ANALYZE  
```  
可以查看到占用的数据块个数  
```  
digoal=# select relpages from pg_class where relname='tbl_cost_align';  
 relpages   
----------  
    94393  
(1 row)  
```  
执行checkpoint后关闭数据库, 为了得到一个纯粹的物理磁盘的连续io请求的cost常量, 不能有shared buffer的干扰.  
```  
digoal=# checkpoint;  
CHECKPOINT  
pg93@db-172-16-3-150-> pg_ctl stop -m fast  
waiting for server to shut down.... done  
server stopped  
```  
同时还不能有OS Cache的干扰, 所以要清理操作系统cache.  
```  
[root@db-172-16-3-150 ssd1]# sync; echo 3 > /proc/sys/vm/drop_caches  
```  
前面我们说了, 有些指标可以通过硬件厂商得到或者自行测试得到, 那么这里我们就要自己测试得到.  
测试方法比较多, 本文将通过systemtap来得到每次IO请求的时间.  
为了降低systemtap带来的额外开销, 请参考 :   
[《USE blockdev --setra 0 and systemtap test real BLOCKDEV iops》](../201311/20131126_02.md)    
[《设置进程亲和 - numactl 或 taskset - retrieve or set a process's CPU affinity (affect SYSTEMTAP TIME)》](../201311/20131126_01.md)    
指定亲和1, 启动数据库 :   
```  
pg93@db-172-16-3-150-> taskset -c 1 /home/pg93/pgsql9.3.1/bin/postgres >/dev/null 2>&1  
```  
开启psql  
```  
pg93@db-172-16-3-150-> psql  
psql (9.3.1)  
Type "help" for help.  
digoal=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
           5727  
(1 row)  
```  
指定亲和7, 开启stap, 收集postgres进程相关的io信息.  
```  
[root@db-172-16-3-150 ~]# taskset -c 7 stap -e '  
global a  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {  
  delete a  
  println("query__start ", user_string($arg1), "pid:", pid())  
}  
probe vfs.read.return {  
  t = gettimeofday_ns() - @entry(gettimeofday_ns())  
  # if (execname() == "postgres" && devname != "N/A")  
    a[pid()]  taskset -c 1 /home/pg93/pgsql9.3.1/bin/postgres >/dev/null 2>&1  
[root@db-172-16-3-150 ~]# sync; echo 3 > /proc/sys/vm/drop_caches  
digoal=# set seq_page_cost=0.014329;  
SET  
digoal=# set cpu_tuple_cost=0.00018884145574257426;  
SET  
digoal=# explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align;  
                                                              QUERY PLAN                                                              
------------------------------------------------------------------------------------------------------------------------------------  
--  
 Seq Scan on postgres.tbl_cost_align  (cost=0.00..3259.86 rows=10100000 width=45) (actual time=0.915..3318.443 rows=10100000 loops=1  
)  
   Output: id, info, crt_time  
   Buffers: shared read=94393  
 Total runtime: 4380.828 ms  
(4 rows)  
```  
现在是完全从硬盘读取, 所以得出的cost就和实际执行时间相当接近了3259.86 VS (3318.443 - 0.915).  
## 2\. 推算random_page_cost 以及 cpu_index_tuple_cost , cpu_operator_cost  
random_page_cost 本文还是通过stap跟踪来获得.  
cpu_index_tuple_cost 和 cpu_operator_cost 两个未知数不是很好推算, 基本上出现cpu_index_tuple_cost 的场景, 另一个cpu_operator_cost 也出现了, 所以2个未知数都是同时出现.    
那么我们只能给他们来个比例. 或者能够直接跟踪到其中的一个未知数, 才能得出另一个未知数.  
本文利用cpu_index_tuple_cost 和 cpu_operator_cost的默认占比来求得这两个值.  
首先我们还是要确定公式, 为了方便公式验证, 把所有的常量都设置为1.  
```  
digoal=# set random_page_cost=1;  
SET  
digoal=# set cpu_tuple_cost=1;  
SET  
digoal=# set cpu_index_tuple_cost=1;  
SET  
digoal=# set cpu_operator_cost=1;  
SET  
digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where id>1998999963;  
SET  
SET  
                                                                         QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------------------------------  
-------------------------  
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align  (cost=174.00..20181.67 rows=5031 width=45) (actual time=0.029..1  
7.773 rows=5037 loops=1)  
   Output: id, info, crt_time  
   Index Cond: (tbl_cost_align.id > 1998999963)  
   Buffers: shared hit=5054  
 Total runtime: 18.477 ms  
(5 rows)  