title:Arbitrum: Scalable, private smart contracts
author:Harry A. Kalodner and
Steven Goldfeder and
Xiaoqi Chen and
S. Matthew Weinberg and
Edward W. Felten
Arbitrum: Scalable, private smart contracts
Harry Kalodner, Steven Goldfeder, Xiaoqi Chen, S. Matthew Weinberg,  
and Edward W. Felten, Princeton University
https://www.usenix.org/conference/usenixsecurity18/presentation/kalodner
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Arbitrum: Scalable, private smart contracts
Harry Kalodner
Princeton University
Steven Goldfeder
Princeton University
Xiaoqi Chen
Princeton University
S. Matthew Weinberg
Princeton University
Edward W. Felten
Princeton University
Abstract
We present Arbitrum, a cryptocurrency system that sup-
ports smart contracts without the limitations of scala-
bility and privacy of systems previous systems such as
Ethereum. Arbitrum, like Ethereum, allows parties to
create smart contracts by using code to specify the be-
havior of a virtual machine (VM) that implements the
contract’s functionality. Arbitrum uses mechanism de-
sign to incentivize parties to agree off-chain on what a
VM would do, so that the Arbitrum miners need only ver-
ify digital signatures to conﬁrm that parties have agreed
on a VM’s behavior. In the event that the parties can-
not reach unanimous agreement off-chain, Arbitrum still
allows honest parties to advance the VM state on-chain.
If a party tries to lie about a VM’s behavior, the veri-
ﬁer (or miners) will identify and penalize the dishonest
party by using a highly-efﬁcient challenge-based proto-
col that exploits features of the Arbitrum virtual machine
architecture. Moving the veriﬁcation of VMs’ behavior
off-chain in this way provides dramatic improvements in
scalability and privacy. We describe Arbitrum’s protocol
and virtual machine architecture, and we present a work-
ing prototype implementation.
1
Introduction
The combination of digital currencies and smart con-
tracts is a natural marriage. Cryptocurrencies allow par-
ties to transfer digital currency directly, relying on dis-
tributed protocols, cryptography, and incentives to en-
force basic rules. Smart contracts allow parties to cre-
ate virtual trusted third parties that will behave according
to arbitrary agreed-upon rules, allowing the creation of
complex multi-way protocols with very low counterparty
risk. By running smart contracts on top of a cryptocur-
rency, one can encode monetary conditions and penalties
inside the contract, and these will be enforced by the un-
derlying consensus mechanism.
Ethereum [31] was the ﬁrst cryptocurrency to support
Turing-complete stateful smart contracts, but it suffers
from limits on scalability and privacy. Ethereum requires
every miner to emulate every step of execution of every
contract, which is expensive and severely limits scalabil-
ity. It also requires the code and data of every contract
to be public, absent some type of privacy overlay feature
which would impose costs of its own.
1.1 Arbitrum
We present the design and implementation of Arbitrum,
a new approach to smart contracts which addresses these
shortcomings. Arbitrum contracts are very cheap for ver-
iﬁers to manage. (As explained below, we use the term
veriﬁers generically to refer to the underlying consensus
mechanism. For example, in the Bitcoin protocol, Bit-
coin miners are the veriﬁers.) If parties behave according
to incentives, Arbitrum veriﬁers need only verify a few
digital signatures for each contract. Even if parties be-
have counter to their incentives, Arbitrum veriﬁers can
efﬁciently adjudicate disputes about contract behavior
without needing to examine the execution of more than
one instruction by the contract. Arbitrum also allows
contracts to execute privately, publishing only (saltable)
hashes of contract states.
In Arbitrum, parties can implement a smart contract as
a Virtual Machine (VM) that encodes the rules of a con-
tract. The creator of a VM designates a set of managers
for the VM. The Arbitrum protocol provides an any-trust
guarantee: any one honest manager can force the VM to
behave according to the VM’s code. The parties that are
interested in the VM’s outcome can themselves serve as
managers or appoint someone they trust to manage the
VM on their behalf. For many contracts, the natural set
of managers will be quite small in practice.
Relying on managers, rather than requiring every ver-
iﬁer to emulate every VM’s execution, allows a VM’s
managers to advance the VM’s state at a much lower cost
USENIX Association
27th USENIX Security Symposium    1353
to the veriﬁers. Veriﬁers track only the hash of the VM’s
state, rather than the full state. Arbitrum creates incen-
tives for the managers to agree out-of-band on what the
VM will do. Any state change that is endorsed by all of
the managers (and does not overspend the VM’s funds)
will be accepted by the veriﬁers. If, contrary to incen-
tives, two managers disagree about what the VM will do,
the veriﬁers employ a bisection protocol to narrow the
disagreement down to the execution of a single instruc-
tion, and then one manager submits a simple proof of that
one-instruction execution which the veriﬁers can check
very efﬁciently. The manager who was wrong pays a
substantial ﬁnancial penalty to the veriﬁers, which serves
to deter disagreements.
Parties can send messages and currency to a VM, and a
VM can itself send messages and currency to other VMs
or other parties. VMs may take actions based on the mes-
sages they receive. The Veriﬁer tracks the hash of the
VM’s inbox.
The architecture of the Arbitrum VM and protocol are
designed to make the task of resolving disputes as fast
and simple for the veriﬁers as possible. Details of the
design appear later in the paper.
Arbitrum dramatically reduces the cost of smart con-
tracts.
If participants behave according to their incen-
tives, then veriﬁers will never have to emulate or verify
the behavior of any VM. The only responsibility of ver-
iﬁers in this case is to do simple bookkeeping to track
the currency holdings, the hash of a message inbox, and
a single hashed state value for each VM. If a participant
behaves irrationally, it may require the veriﬁers to do a
modest amount of extra work, but the veriﬁers will be
(over-)compensated for this work at the expense of the
irrational party.
As a corollary of the previous principle, Arbitrum
VMs can be private, in the sense that a VM can be created
and execute to completion without revealing the VM’s
code or its execution except for the content and timing
of the messages and payments it sends, and (saltable)
hashes of its state. Any manager of a VM will neces-
sarily have the ability to reveal information about that
VM, but if managers want to maintain a VM’s privacy
they can do so.
Arbitrum is consensus-agnostic, meaning that it as-
sumes the existence of a consensus mechanism that
publishes transactions, but the Arbitrum design works
equally well with any consensus mechanism, including a
single centralized publisher, a quorum-based consensus
system, or Nakamoto consensus as used in Bitcoin [26].
Additionally, an existing smart contract system can serve
as this consensus mechanism assuming it can encode Ar-
bitrum’s rules as a smart contract. In this paper, we refer
to the consensus entity or system as the Veriﬁer (and the
participants in the said consensus system as the veriﬁers).
1.2 Structure of the paper
The remainder of the paper is structured as follows. In
section 2 we discuss the difﬁculties of implementing
smart contracts efﬁciently, and we present the Participa-
tion Dilemma, a new theoretical result on participation
games showing that one approach to incentivize smart
contract veriﬁcation may not work. In section 3 we de-
scribe Arbitrum’s approach, and in section 4 we provide
more details of Arbitrum’s protocol and virtual machine
architecture, which together allow much more efﬁcient
and privacy-friendly veriﬁcation of the operations of vir-
tual machines implementing smart contracts. Section 5
describes our implementation of Arbitrum and provides
some benchmarks of performance and the sizes of proofs
and blockchain transactions. Section 6 surveys related
work, and section 7 concludes the paper.
2 Why Scaling Smart Contracts is Difﬁcult
Supporting smart contracts in a general and efﬁcient way
is a difﬁcult problem. In this section we survey the draw-
backs of some existing approaches.
2.1 The Veriﬁer’s Dilemma
The most obvious way to implement smart contract VMs
is to have every miner in a cryptocurrency system emu-
late every step of execution of every VM. This has the
advantage of simplicity, but it imposes severe limits on
scalability.
The high cost of verifying VM execution may mani-
fest as the Veriﬁer’s Dilemma [22]. Because transactions
involving code execution by a VM are expensive to ver-
ify, a party that is supposed to verify these transactions
has an incentive to free-ride by accepting the transactions
without verifying them, in the hope that either (1) misbe-
havior is deterred by other parties’ doing veriﬁcation, or
(2) any discrepancies will not be detected by other po-
tential veriﬁers because they also do not perform veriﬁ-
cation. This can lead to an equilibrium in which some
transactions are accepted with little or no veriﬁcation.
Conversely, in a scenario in which all miners are hon-
estly doing the veriﬁcation, a miner can exploit this by
including a time-consuming computation that will take
the other miners a signiﬁcant amount of time to verify.
While all of the other miners are doing the veriﬁcation,
the miner that included this computationally heavy trans-
action can get a head-start on mining the next block, giv-
ing it a disproportionate chance of collecting the next
block reward. This dilemma exists because of the high
cost of verifying VM execution.
1354    27th USENIX Security Symposium
USENIX Association
2.2 The Participation Dilemma
One approach to scaling veriﬁcation (as used in, e.g.,
TrueBit [30]) relies on participation games, a mecha-
nism design approach that aims to induce a limited but
sufﬁcient number of parties to verify each VM’s execu-
tion. These systems face what we call the Participation
Dilemma, of how to prevent Sybil attacks in which a sin-
gle veriﬁer, who may or may not be honest, claims to be
multiple veriﬁers, and in doing so can drive other veri-
ﬁers out of the system.
2.3 Participation Games
In this section we prove new formal barriers to ap-
proaches based on participation games. The idea is that
players will “participate” in a costly process. Consider
the following game:
• There are n players, who may pay 1 to participate.
• Participating player i chooses a number of Sybils
si ≥ 1. Non-participating players set si = 0.
• Player i receives reward si· f (∑ j s j), where f : N →
R+ is a reward function.
In the context of this paper, think of participating as
“verifying a computation.” It costs something to ver-
ify the computation, but once you’ve veriﬁed it, you can
claim to have veriﬁed it from any number of additional
Sybils for free, and these Sybils are indistinguishable
from “real” veriﬁers. The goal would then be to design
a participation game (i.e. a reward function f (·)) such
that in equilibrium, no player has any incentive to Sybil,
and a desired number of players participate, so that the
apparent number of veriﬁers equals the actual number of
separate players who were veriﬁers.
The authors of TrueBit correctly observe that the fam-
ily of functions fc(m) = c · 2−m make great candidates
for participation games. Speciﬁcally, for any target k
of participating players, the participation game with re-
ward function f (m) = (2k + 0.5)· 2−m has a unique (up
to symmetry) pure Nash equilibrium where every player
has si ∈ {0,1}, and exactly k players participate. In fact,
an even stronger property holds: it is always a best re-
sponse for any player to set si ≤ 1!1 We call such reward
functions One-Shot Sybil-Proof (formal deﬁnition in Ap-
pendix A). This initially makes participation games seem
like a promising avenue for veriﬁable smart contracts, as
One-Shot Sybil-proof reward functions exist.
However, a problem that prior work fails to resolve is
that smart contract veriﬁcation is a repeated game.
In
repeated games, there are numerous other equilibria that
1That is, no matter what the other players do, player i is strictly
happier to set si = 1 than si > 1.
don’t project onto Nash equilibria of their one-shot vari-
ants. For intuition, recall the classic prisoner’s dilemma:2
if the game is only played once, then the unique Nash
equilibrium is for both players to defect (and defecting
is even a strictly dominant strategy). However, in the
repeated prisoner’s dilemma, there are numerous other
equilibria including the famous Tit-For-Tat, and Grim
Trigger strategies [29].
We discuss the formal model for repeated games
(which is standard, but not the focus of this paper) in
Appendix A. But the point is that repeated games allow
for players to sacriﬁce the present in order to save for the
future. For example, the following is an equilibrium of
the repeated participation game with f (m) = (4.5)· 2−m.
Player one uses the strategy: set s1 = 2 in all rounds.
Player i > 2 sets si = 0 in all rounds. Player 2 uses
the strategy:
if in either of the previous two rounds,
∑ j(cid:54)=2 s j ≤ 1, set s2 = 1. Otherwise, set s2 = 0.
Note that all players aside from player 1 are certainly
best responding. They currently get utility zero (because
player 1 sets s1 = 2 every round, and they therefore all
set si = 0).
If they instead participated in any round,
they would get negative utility. Player 1 on the other
hand, is also best responding! This is because if they
decreased their number of Sybils in any round, it would
cause player 2 to participate in the next two rounds (for-
mal proof in appendix).
Note that this equilibrium is not at all unnatural: play-
ers > 1 are simply reacting to what the market looked
like in the previous rounds. Player 1 is staying one step
ahead of the game and realizing that no matter what,
there are going to be two participants in equilibrium, so
player 1 might as well be all of them rather than share
the reward. In fact, this is not a property speciﬁc to the
reward function c· 2i, but any reward function.
Theorem 1. Every One-Shot Sybil-Proof participation
game admits a Nash equilibrium where only one player
participates.
In Appendix A, we provide a proof of Theorem 1, as
well as a discussion of possible outside-the-box defenses.
These defenses seem technically challenging (perhaps