Euclidean
Distance
Proof
Size (MB)
650.5
53.9
1,603
SNPs related to ﬁve diseases: Alzheimer’s, bipolar disorder,
breast cancer, type-2 diabetes, and Schizophrenia. We obtain
the weight of a SNP with respect to those diseases from the
GWAS Catalog [21]. Then, for every individual, we estimate
their susceptibility to each disease. For this use case, we use
a precision log p=25, a modulus of logq=56 consumed over
two levels and a polynomial degree of logN=12. The input
vector ddd (consisting of 211 slots) is an ordered vector of inte-
gers containing the SNP values, coded on two bits, associated
with the diseases. One vector is sufﬁcient for the considered
diseases. To estimate the proof size, we assume that the mes-
sage signed by the data source contains a 16-bit user identiﬁer,
a 128-bit nonce, and the whole block of SNPs.
Results. The average encryption time for up to 2,048 SNPs at
the user side is tenc=60 ms, and the decryption is tdec=2.7 ms.
The computation time of the disease susceptibility at the ser-
vice provider is tcomp=22 ms. The user needs tprove=26 s to
generate the proof for the arithmetic part of the circuit, and the
service provider veriﬁes it in tver=13 s. The estimated proof
size for the ZKCE is 36.6 MB, whereas the bound proof is
17.3 MB. Figure 4b shows our construction’s accuracy for dis-
ease susceptibility computations by plotting the distribution
of the relative error. We remark that the mean absolute rela-
tive error for such computations is appreciably low: 2.2·10−5
on average with a standard deviation of 2.3·10−5. Moreover,
more that 75% of the evaluated records have an absolute error
inside the range ±0.7·10−4.
6.4 Location-Based Activity Tracking
We assume that a user is running with a wearable device that
retrieves her location points during the activity from a data
source, e.g., a cellular network. The service provider, e.g.,
an online ﬁtness social network, seeks to estimate the total
distance that the user ran during her activity I:
(cid:114)
mrun=∑
i∈I
(ddd[i+1]−ddd[i])2+(ddd[
N
4
+i+1]−ddd[
N
4
+i])2,
with ddd the vector of UTM (Universal Transverse Mercator)
inputs packing Eastings in the ﬁrst half of the vector and
Northings in the second. Given that Euclidean distance com-
putations require the evaluation of a non-linear square root
function, we consider its least-squares approximation by a
degree seven polynomial on a Legendre polynomial base.
Dataset & Experiment Setup. We run our experiment on a
public dataset from Garmin Connect [63]. This dataset con-
tains GPS traces of thousands of users engaging in various
activities such as walking, running, and cycling. We randomly
sample 2,000 running traces and we discard traces with less
than 15 points and more than 2,000 points. Our initial dataset
analysis shows that the traces are very noisy: we identiﬁed
unrealistic distances between consecutive points, timestamps
and locations. We use GPSBabel [75], an open-source soft-
ware, to interpolate the running traces such that the following
criteria are met: (a) the maximum speed of a runner is less
than 10 m/s, (b) the maximum distance between consecutive
points is less than 30 m, and (c) the time delta between two
points is less than 3 s, which are realistic for running activities.
We remove traces whose time sampling was improperly exe-
cuted by the data source (difference more than 10 s, standard
deviation more than 5, or a zero inter-quartile at 75%), as
well as traces with unacceptable idleness1, and we convert the
remaining GPS traces to UTM to obtain the Northings and
Eastings geographic coordinates. Overall, we obtain a dataset
of 1,608 traces (80% of the initial 2K running trace dataset)
which on average contain 1,124 datapoints and we estimate
their total distance with CRISP.
Considering the polynomial approximation required for
the square root function, we set the size of the polynomial
ring N=213 and a modulus logq=184. To calculate the proof
sizes, we assume that the messages obtained from the data
source contain a 16-bit user identiﬁer, a 128-bit nonce, a 32-bit
timestamp, and 24-bit Easting/Northing coordinates.
Results. The encryption and decryption overhead for fully
packed ciphertexts of up to 2,048 points at the user side
is tenc=980 ms and tdec=7 ms, respectively, and the Eu-
clidean distance computation at the service provider requires
tcomp=180 ms. For 2,048 datapoints, the user generates the
proof for the arithmetic part of the circuit in tprove=7.9 min,
and the service provider veriﬁes it in tver=3.4 min. Consid-
ering that each message signed by the data source is 96-bits,
the proof size per trace for the ZKCE is 1,499.2 MB, and the
bound proof is 103.7 MB. For our dataset, the average proof
size is 922.1 MB considering the mean number of points
in the traces. In Section 6.5, we will show how to reduce
this proof size. With fully packed ciphertexts, CRISP’s proof
generation requires 230 ms per datapoint and 100 ms for its
veriﬁcation, at a communication cost of 732 KB. Finally, Fig-
ure 4c plots the relative error that we achieve for Euclidean
distance computations. In particular, the average absolute rel-
ative error is 1.5·10−2 with a standard deviation of 2.3·10−2.
1Idleness of a trace is a situation where the interquartile at 25% of the
instant speed is less than 0.3 m/s and the covered distance is less than 15 m.
USENIX Association
30th USENIX Security Symposium    2121
In Figure 4c, we see that more than 75% of the evaluated
traces have an absolute error between ±0.04. We observe that
the polynomial approximation of the square-root introduces
errors higher than the other use cases. An improved accuracy
can be achieved by increasing the polynomial degree, but this
would require to increase upfront the encryption parameters
(N, L, q) introducing additional communication and computa-
tion overhead to CRISP. The wider spread of the relative error
is due to the variance of the datapoints. Indeed, our analysis
shows that gait, time sampling, and skewness of the speed
distribution are among the factors that inﬂuence the overall
relative error of the computations.
6.5 Reducing the Communication Overhead
Table 1 summarizes CRISP’s overhead for three use cases:
smart metering, disease susceptibility, and location-based ac-
tivity tracking. We observe that it introduces acceptable com-
putational overhead at the user and service provider sides
and that it achieves average absolute relative error between
2.2·10−5 and 0.015 for the desired computations. We re-
mark however that our construction uses post-quantum secure
lattice-based cryptographic primitives, such as encryption and
commitment, and the MPC-in-the-head approach, to ensure
the integrity of the user’s data transfer. These come at the
price of an increased communication (i.e., proof size). There-
fore, we propose several improvements that one could employ
to reduce this overhead and illustrate them in Figure 5 for the
smart metering and location-based activity tracking use cases.
Random Integrity Checks (RIC). A ﬁrst optimization is to
reduce the number of data points whose integrity is checked
by the service provider. This introduces a trade-off between
CRISP’s security level and its communication overhead. In
particular, a service provider can decide to check only a sub-
set of the input data hashes in the data veriﬁcation phase, as
we assume malicious but rational users (Section 2.2) who
will not cheat if there is a signiﬁcant probability of getting
caught. This is achieved through a sigma-protocol, that can
be made non-interactive with the Fiat-Shamir heuristic: The
user sends the ciphertext that encrypts all the datapoints (this
can be seen as a commitment). Then, the service provider
challenges a subset of datapoints to be hashed in the veriﬁca-
tion circuit. Such a strategy enables a service provider to tune
the solution depending on the level of conﬁdence it has in the
user. In Figure 5 we observe how the proof size decreases as
the service provider checks fewer data blocks. For instance,
if the service provider checks 20% of the data blocks in the
veriﬁcation phase (RIC-20%), the proof size for location-
based activity tracking drops from 1,499.2 MB to 497 MB
(i.e., 243 KB/datapoint), whereas for smart metering it de-
creases from 643.4 MB to 142.2 MB (i.e., 139 KB/datapoint).
This yields a reduction of more than 66% in the total ZKCE
communication overhead. Computation times to generate and
verify the proofs are also more than halved.
Batching (BG). Another improvement is to modify the way
Figure 5: ZKCE proof size (MB) for fully packed ciphertexts
and various optimizations.
data sources certify the users’ data points. So far, in the smart
metering and location-based activity tracking use cases, we
assumed that data sources hash and sign every data point
generated by the user. However, another strategy is to hash
batches of data points in a single signed message. This modi-
ﬁcation is purely operational as it does not require additional
software or hardware deployment. We set the batch size de-
pending on the use case – i.e., considering the additional
information of each message before signature – such that
the overall batch can ﬁt on a single SHA-256 input block of
447 bits. Figure 5 shows a reduction of more than 50% in
proof size for the two use cases when batching (BG) is em-
ployed compared to the non-optimized solution. Batching can
also be combined with RIC-20% (BG+RIC-20% in Figure 5):
For smart metering, the ZKCE proof size is further reduced to
38.1 MB (i.e., 37.2 KB/datapoint), whereas for the location-
based activity tracking the proof size drops to 329.7 MB (i.e.,
161 KB/datapoint). For activity-tracking, the tprove is reduced
to 2.1 min and tver to 1.1 min (61 and 32 ms per datapoint,
resp.). For smart metering, tprove is reduced to 20 s and tver to
9.3 s (20 and 9 ms per datapoint, resp.).
ZKCE Pre-processing (PP). Finally, one can employ a
ZKCE pre-processing model, such as that presented by Katz
et al. [66]. The pre-processing model considers that the user
executes ofﬂine a series of circuit evaluations on committed
values. The service provider challenges a subset M of those
evaluations and checks their integrity, and the remaining τ
ones are used in an online phase along with the committed
values. The rest of the protocol is similar to ZKB++. The
proof size per iteration is reduced to:
τ(κlog2 3 + 2κ + (|ddd| +|Com| +|Enc| +|ttt|) + 2(bhash + bA2B)).
Regarding our three players setting, a 128-bit security level re-
quires M =300 and τ=81, yielding a signiﬁcant reduction of
25% on the proof size (see [66] for the computation details)
compared to the non-optimized approach. Pre-processing,
batching, and RIC can also be applied together to obtain
smaller proofs (see PP+BG+RIC-20% in Figure 5): For smart
metering, the ZKCE proof is reduced to 26.8 MB. Similarly,
for location-based activity tracking, the ZKCE proof becomes
203.0 MB. This yields optimal ZKCE proof size per datapoint
of 26.2 KB and 99.1 KB for smart metering and activity-
tracking, respectively. Finally, we remark that according to
|pi|=2κ + τlog2
M
τ 3κ+
2122    30th USENIX Security Symposium
USENIX Association
NoneRIC-80%RIC-50%RIC-20%BGBG+RIC-20%PPPP+BG+RIC-20%0250500750100012501500Proof Size (MB)Activity-TrackingSmart MeteringKatz et al. [66], a trade-off between proof size and prover’s
computations could be achieved by increasing the number of
players involved in the MPC-in-the-head protocol. However,
such an improvement would require additional changes in
CRISP, e.g., the conversion block that interfaces the arith-
metic and Boolean parts of the circuit should be adapted for a
larger number of players.
6.6 Comparison with ADSNARK
A fair comparison with [13] is not trivial to achieve, as our
solution provides post-quantum security and overcomes the
constraint of a trusted setup. Nonetheless, here we provide
hints of their qualitative and quantitative differences. In par-
ticular, ADSNARK considers a smart metering use case that
requires a non-linear cumulative function for the billing anal-
ysis over a month of data. We consider a similar non-linear
pricing function evaluated by a degree-two polynomial, and
we evaluate CRISP on the UKPN dataset for 400 households,
with N=12 and logq=106. The median accuracy of our so-
lution is higher than 99%. In terms of proof size, our con-
struction yields 889.2 MB (verifying all phh measurements
for a month), whereas the overhead induced by ADSNARK
is 71 MB. However, we remark that the latter requires a new
proof to be generated and exchanged every time a different
computation is needed. In our solution, this cost is incurred
only once; any subsequent operations can be computed lo-
cally by the service provider on the veriﬁed data. Additionally,
ADSNARK accounts for only a “theoretical estimate” of the
complexity of the signature circuit (with only 1K multiplica-
tive gates for signature veriﬁcation) and, if we were to evaluate
our solution with this circuit, the proof size would be only
104.2 MB. Thus, our analysis shows that our construction of-
fers comparable results to the state-of-the-art and provides
stronger security guarantees.
7 Discussion
In this section, we present some interesting considerations
that could inﬂuence the deployment of our solution.
Signature Scheme. As discussed in Section 4.1, CRISP is
agnostic of the digital signature and it is compatible with
any scheme that uses the SHA-256 hash function. We em-
ploy SHA-256 as it is widely deployed in current infras-
tructures, adopted by various signature schemes (e.g., the
recent post-quantum SPHINCS [18] or the standard ECDSA
schemes), and it is a benchmark for the evaluation of ZK-
Boo [55] and ZKB++ [29]. This ﬂexibility enables CRISP to
be compliant with currently deployed signature schemes that
might not be quantum resistant (e.g., ECDSA) at the cost
of CRISP’s post-quantum integrity property. Working with
other hash functions (e.g., SHA-3 that is employed in [29]) is
possible, with modiﬁcations to CRISP’s circuit.
Integrity Attacks. CRISP copes with malicious users that
might attempt to modify their data or the computed result to
their beneﬁt. However, some use cases require accounting
for additional threats. For example, for smart metering, users
might purposefully fail to report some data (i.e., misreport) to
reduce their billing costs. Similarly, in location-based activity-
tracking, users might re-use pieces of data certiﬁed by the data
source to claim higher performance and increase their beneﬁts
(i.e., double report). Such attacks can be thwarted by system
level decisions; e.g., data sources can generate data points
at ﬁxed time-intervals known to service providers. Message
timestamps can be encrypted along with the data points, so
that service providers can verify their properties (e.g., their
order or their range). As those attacks are application speciﬁc,
we consider them out of the scope of this work.
Security of the ZKCE. Dinur and Nadler [42] unveil a vul-
nerability of ZKCE systems, such as ZKB++, to multi-target
attacks on the pseudo-random number generators. However,
as stated by the authors, these attacks require a very large
number of protocol executions (more than 257) and thus are
impractical and out of scope for our construction. The authors
also argue that the use of appropriate salting in the pseudo-
random number generation renders the attack very hard to
succeed.
Multiple Users. CRISP trivially allows the service provider
to compute aggregate statistics on data from multiple users by
interacting separately with each of them and combining the
results. Nonetheless, such a functionality can also be achieved