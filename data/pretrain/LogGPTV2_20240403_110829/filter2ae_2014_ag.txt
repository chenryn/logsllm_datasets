[105] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. Grand
pwning unit: Accelerating microarchitectural attacks with the gpu. In SP18.  
[106] Robert Gawlik and Thorsten Holz. Sok: Make jit-spray great again. In
WOOT18. [107] Guang Gong. Security: Pwn2Own mobile case, out-of-bound access
in json stringifier. In Chromium Bug Tracker, 2015.  
[108] Guang Gong. Pwn a nexus device with a single vulnerability. In
CanSecWest, 2016.  
[109] Google. Open sourcing clusterfuzz.
https://security.googleblog.com/2019/02/open-sourcing-clusterfuzz.html.  
[110] Google. Scalable fuzzing infrastructure.
https://github.com/google/clusterfuzz.  
[111] Google. Clusterfuzz. https://google.github.io/clusterfuzz/, 2015.  
[112] Google. Google C Style Guide, 2017.  
[113] Google. Torque: Applying leverage to the CodeStubAssembler, 2018.  
[114] Google. Chrome - Mitigating Side-Channel Attacks, 2019.
https://www.chromium.org/Home/chromium-security/ssca.  
[115] Google. GWP-ASan: Sampling heap memory error detection in-the-wild.
https://sites.google.com/a/chromium.org/dev/Home/chromium-security/articles/gwp-asan, 2019.  
[116] Google. Chrome Vulnerability Reward Program Rules. https://www.
google.com/about/appsecurity/chrome-rewards/, 2021.  
[117] Google. Chromium design docs - sandboxing.
https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/design/sandbox.md,
2021.  
[118] Google. wasm: Write-protection of generated code with PKEYs/PKU, 2021.  
[119] Google Chrome Team. V8 Heap Sandbox - High-Level Design Doc.
https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/,
2021.  
[120] Samuel Groβ. Pwn2Own 2018: Safari + macOS, 2018.
https://github.com/saelo/pwn2own2018.  
[121] SamuelGroβandProjectZero.Jitsploitationii:Gettingread/write.
https://googleprojectzero.blogspot.com/2020/09/jitsploitation-two.html, 2020.  
[122] HyungSeok Han, DongHyeon Oh, and Sang Kil Cha. Codealchemist: Semantics-aware code generation to find vulnerabilities in javascript engines. In
NDSS19.  
[123] Abdul-Aziz Hariri, Brian Gorenc, and Simon Zuckerbraun. Abusing Silent
Mitigations: Understanding weaknesses within Internet Explorer’s Isolated Heap
and MemoryProtection. In Black Hat USA 15.  
[124] Xiaoyu He, Xiaofei Xie, Yuekang Li, Jianwen Sun, Feng Li, Wei Zou, Yang
Liu, Lei Yu, Jianhua Zhou, Wenchang Shi, and Wei Huo. Sofi: Reflection-augmented fuzzing for javascript engines. In CCS21.  
[125] Christian Holler, Kim Herzig, and Andreas Zeller. Fuzzing with code
fragments. In USENIX Security 12.  
[126] Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael Franz.
Librando: transparent code randomization for just-in-time compilers. In CCS13.  
[127] Jann Horn. Mozilla Foundation Security Advisory 2018-01, 2018.
https://www.mozilla.org/en-US/security/advisories/mfsa2018-01/.  
[128] Intel. Intel® 64 and IA-32 Architectures Software Developer Manuals,
2021.  
[129] Ivan Fratric. Domato - DOM fuzzer.
https://github.com/googleprojectzero/domato, 2017.  
[130] James Forshaw. Breaking the Chain.
https://googleprojectzero.blogspot.com/2016/11/breaking-chain.html, 2016.  
[131] Artur Janc, Charlie Reis, and Anne van Kesteren. Coop and coep
explained.
https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k,
2020.  
[132] Jeff Aboud. Why You Need to Stop Using CVSS for Vulnerability
Prioritization. https://www.tenable.com/blog/why-you-need-to-stop-using-cvss-for-vulnerability-prioritization, 2020.  
[133] Jeremy Fetiveau. Circumventing Chrome’s hardening of typer bugs.
https://doar-e.github.io/blog/2019/05/09/circumventing-chromes-hardening-of-typer-bugs/.  
[134] Yonghwi Jin, Jungwon Lim, Insu Yun, and Taesoo Kim. Compromising the
macOS kernel through Safari by chaining six vulnerabilities. In Black Hat USA
20.  
[135] Zihao Jin, Ziqiao Kong, Shuo Chen, and Haixin Duan. Timing-based
browsing privacy vulnerabilities via site isolation. In SP22.  
[136] Joe Belfiore and Windows Experience Blog. Microsoft Edge: Making the web
better through more open source collaboration, 2018.  
[137] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner
Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, et al.
Spectre attacks: Exploiting speculative execution. In SP19.  
[138] David Kohlbrenner and Hovav Shacham. Trusted browsers for uncertain
times. In USENIX Security 16.  
[139] Ivan Krstic. Behind the scenes of ios and mac security. In Black Hat USA
16.  
[140] Ivan Krstic. App sandbox and the mac app store. In WWDC 2011, 2011.
https://developer.apple.com/videos/play/wwdc2011/204/.  
[141] The Citizen Lab. The Million Dollar Dissident: NSO Group’s iPhone Zero-Days used against a UAE Human Rights De- fender.
https://citizenlab.ca/2016/08/million- dollar- dissident- iphone- zero-day-nso-group-uae/, 2016.  
[142] Sangho Lee, Youngsok Kim, Jangwoo Kim, and Jong Kim. Stealing webpages
rendered on your browser by exploiting gpu vulnerabilities. In SP14.  
[143] Suyoung Lee, HyungSeok Han, Sang Kil Cha, and Sooel Son. Montage: A
neural network language model-guided javascript engine fuzzer. In USENIX
Security 20.  
[144] Wilson Lian, Hovav Shacham, and Stefan Savage. A call to arms:
Understanding the costs and benefits of jit spraying mitigations. In NDSS,
2017.  
[145] Hongyang Lin, Junhu Zhu, Jianshan Peng, and Dixia Zhu. Deity: Finding
deep rooted bugs in javascript engines. In ICCT19.  
[146] Linux. Seccomp BPF (SECure COMPuting with filters). 2012.  
[147] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner
Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, et