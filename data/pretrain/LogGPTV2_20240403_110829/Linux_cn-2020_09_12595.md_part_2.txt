**00:08:21 - Claire Evans**：
葛丽丝独特地意识到，计算将成为改变世界的事情。但是如果没有人知道如何接触并使用计算机，那么它就不会成为改变世界的事情。因此她想确保它对尽可能多的人开放，尽可能多的人可以使用。
**00:08:37 - Claire Evans**：
这就需要编程在可理解性和可读性上做一些妥协。因此最终创造一个编程语言的目标就是给机器提供更多切入点，让它脱离这个神职，让它的开发面向大众和未来新一代。
**00:08:59 - Saron Yitbarek**：
我想在这里打断并强调下 Claire 的说法：现在我们所已知的编程语言，都来源于科技开放的愿望。这让计算机不再是数学博士们的专属玩具，让编程开发变得更容易。
**00:09:14**：
编译器所有工作的本质，是让程序变得更好理解，更有人性。
**00:09:21**：
Claire 有一个猜测，为什么葛丽丝是做出改变的那个人，这与她在二战期间的工作有关。
**00:09:29 - Claire Evans**：
她的工作是解决扫雷问题、弹道问题和海洋学问题。她用很多不同的、交叉的学科来模拟战争里的所有的暴力、混乱和现实的灾难，并将他们转化成在 Mark I 计算机上运行的程序。
**00:09:45**：
她知道如何在语言之间去做翻译转换。我的意思不是说计算机语言，是人类语言。她知道如何倾听一个提出复杂问题的人的意见，并尝试理解问题的背景，其信息和所涉及的专业规律，然后将这些转为计算机可以理解的程序。
**00:10:06**：
从这个角度看她如同早期的编译器。就像一个人类版本的编译器，因为她知道你必须理解他们才能满足他们的需求。
**00:10:17 - Saron Yitbarek**：
编译器干的事情就是一个解释和理解。我觉得我们应该在学习新语言，或想知道为什么有一些东西根本不能编译的时候牢记这个理念。编译器的工作就是满足你使用生活中说的语言来编程。
**00:10:32**：
葛丽丝知道人类一旦可以学会讲编程语言，而编译器可以将我们的意图转换为机器语言，就像为洪水打开了大门一样。
**00:10:43 - Claire Evans**：
她知道如果计算机太孤立和太具体，就不会发展为一个产业，从而成为改变世界的力量。也就是说计算机的从业者，可以让提出问题的人跟机器直接沟通。
**00:11:00**：
因此她真的是一个善于人类语言翻译的专家，至少我是这么想的。这使她有独一无二的机会，去思考和创建编程语言。
**00:11:15 - Saron Yitbarek**：
葛丽丝对英文式数据处理语言的研究最终演变成了 COBOL，它在某种意味上很不错。因为它不浮华，很适合商务用途，葛丽丝·哈伯也是这样的人。
**00:11:28**：
从某种角度看，她给了我们一个很像她的语言。像葛丽丝一样，COBOL 语言也很长寿，它现在已经 60 多了。
**00:11:50**：
葛丽丝的编译器就像一个 巴别鱼   babelfish ，在程序员和机器之间充当翻译，不过它们翻译的都是高度概括性的语言。
**00:12:03**：
然后，几十年之后，另一个重要的思潮在语言界兴起。想象下画面：自由软件社区在 1980 年出现，但是 Unix 的替代品 GNU 被开发出来后，却没有任何自由开放的编译器随之出现。
**00:12:22**：
为了让 GNU 给我们提供一个真正的开源 UNIX 替代品，为了让编程语言在开源世界蓬勃发展，社区需要找来一个格蕾丝·哈伯 —— 我们需要一个开源编译器。
**00:12:38**：
这是 Langdon White，红帽的平台架构师，来讲讲他对这个事情的理解。
**00:12:45 - Langdon White**：
在 80 年代，你要买一个编译器很轻松就要花上上万块钱。费用是最大的问题，我没有多余的钱去给自己买编译器。再一个事实是，我必须为所有我想要的目标平台买一个对应的编译器。那个时代大部分是 Unix 平台，但是细节和风格各不相同。
**00:13:06**：
因此你就不能买一个，你需要为不同的架构，不同的供应商购买多个编译器。
**00:13:14 - Saron Yitbarek**：
Langdon 指出这不仅仅是成本问题，在一些情况下，对编码工作也带来了问题。
**00:13:21 - Langdon White**：
大家都没有意识到，你如何用很特殊的方式来组织你的代码是很重要的。做嵌套 for 循环或者做嵌套 while 循环之类的事情可能是可以的，这取决于编译器。
**00:13:38**：
因此，大家都应该明白，如果你不知道编译是如何优化你的代码的，就很难知道如何写出最优的代码。
**00:13:49 - Saron Yitbarek**：
必须要提的是，我们需要一个免费的、可获得的、可值得信赖的编译器。这就是 GNU C 语言编译器：GCC。它横空出世在 1987 年，它是格蕾丝·哈伯的编译器革命和自由软件运动的结合。
**00:14:12**：
它是使编译更标准化，从而让所有人可以编译别人写的代码。我们编程语言的丰富性要归功于它。
**00:14:22 - Carol Willing**：
GCC 是开放的，可以说将编程语言推向一个更高的层次。
**00:14:29 - Saron Yitbarek**：
这是 Jupiter 项目成员 Carol Willing，她是 Python 软件基金会的前理事。
**00:14:35 - Carol Willing**：
人们开始意识到，专有的语言会在特定时间内被服务于一个目的，但并不能得到开发者社区的认可和热爱。因为如果你是一个开发者，你希望学习最常用的，以及未来最流行的东西。
**00:14:59**：
我没必要去发展一种将我锁定在一种技术上的技能。我想 Python 成功的一个原因是因为它是开源的，它有非常简洁的语法。
**00:15:11**：
它的特点就是允许人们用常见的方法，快速高效地解决问题，也允许大家合作解决问题。我想这就是好的程序和代码库的标志：如果你可以用最小的工作量完成你的工作，并且与他人分享，这是确实很棒的事情。
**00:15:35 - Saron Yitbarek**：
这么多年过去了，GCC 逐渐的支持了 Java、C++、Ada 和 Fortran 语言，我还可以继续说说它的进步。
**00:15:43 - Carol Willing**：
通过像 GCC 这样的通用底层接口，人们可以根据自己的特殊需求来定制语言。例如，在 Python 的世界里，有大量的库，甚至具体到科学 Python 世界里，我们有 numpy，还有 scikit-image、scikit-learn 这样的东西。
**00:16:08**：
每个库都是为一个特定目的而工作。因此，我们也看到了生物信息学和自然语言处理之类的东西。而人们可以在一个共同的基础上，做出很多不同的事情。而且可以把它们放到编程语言或库里，使他们能够在他们特定的行业或领域中优化问题的解决。
**00:16:42 - Saron Yitbarek**：
因此，这就是编译器技术一头撞进开源运动的结果吧？随着时间的推移，这种不同技术的碰撞，爆炸般地创造了一个新的、被社区支持的语言，大家都可以学习和完善它。
**00:16:58**：
现在有成百上千的编程语言存活着。
**00:17:03 - Carol Willing**：
随着开源软件越来越流行和被广泛接受，我们看到了编程语言的大量激增。现在有大量围绕着手机技术的编程语言，不同的编程语言也让游戏开发更加简单快速便捷。各种用途的语言，如 Python 和 Ruby，它们算是现代网页开发和交付网页应用和网站的基础。
**00:17:34 - Saron Yitbarek**：
这个队伍还会继续壮大。是的，我们建造的这个巴别塔在未来会更加拥挤。但是你可以把它当作一个聚宝盆，一个语言的盛宴。下面我们将会帮你们梳理这个盛宴。
**00:17:55**：
现在我们已经知道编程语言泛滥的原因了。但是这些对我们有什么具体的意义？我们如何选择对我们重要的语言呢？这是个大问题，因此我们找了一些人帮忙：Clive Thompson，是最好的作家之一，他能让科技世界变得更有意义。他是《连线》的专栏记者，《纽约时报》杂志的特约撰稿人，他现在正在写一本关于计算机程序员心理学的书。
**00:18:24**：
当我们挑选我们想要学习的编程语言时，我们需要知道我们到底想要什么。
**00:18:31**：
这是我和 Clive 反复讨论得出的结论。
**00:18:35**：
当我作为一个开发新人第一次入手的时候，我就说：“让我选一个最好的编程语言，然后掌握并熟练运用它，不就完事了么。”
**00:18:44**：
不过事情不会这样简单，否则为什么有那么多的编程语言呢？
**00:18:49 - Clive Thompson**：
每个语言都有那么点它的特长。因此通常来说，有人创造一个新语言是因为现有的语言满足不了他们的需求。JavaScript 就是一个典型的例子。
**00:19:03**：
 网景公司   Netscape 曾经在 90 年代中开发了一款浏览器，所有的网站管理员想做一些更具交互性的事情。他们希望有一种方法，使其可以在网站上运行一些脚本。
**00:19:16**：
当然这些需求都提给了网景。然后他们说：“好吧，现在我们没有可以做到这一点的办法，我们需要一个可以集成到我们浏览器的脚本语言。”
**00:19:25**：
于是他们雇佣了 Brendan Eich，一个被认为很资深的家伙。他当时 32 岁，其他人 21 岁的样子。
**00:19:32 - Saron Yitbarek**：
这在开发者圈里就很资深了
**00:19:35 - Clive Thompson**：