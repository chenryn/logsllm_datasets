case, any reference of `      &file     ` within the XML document will
be replaced by `      "Hello!"     ` .
XML实体的工作方式就像编程语言中的变量一样：任何时候你使用 &file
语法引用此实体时，XML文档都会加载file的值来代替它。在这种情况下，XML文档内的任何
&file 引用都将被替换为"Hello！"。
XML documents can also use *external entities* to access either local or
remote content with a URL. If an entity's value is preceded by a
`      SYSTEM     ` keyword, the entity is an external entity, and its
value will be loaded from the URL. You can see here that the following
DTD declares an external entity named `      file     ` , and the value
of `      file     ` is the contents of *file:///example.txt* on the
local filesystem:
XML文档也可以使用外部实体来访问具有URL的本地或远程内容。如果实体的值前面带有系统关键字，则该实体是外部实体，其值将从URL加载。您可以在此处看到以下DTD声明了名为file的外部实体，而file的值是本地文件系统上file：///example.txt的内容：
    ]>
    &file;
That last line loads the `      file     ` entity in the XML document,
referencing the contents of the text file located at
*file:///example.txt* .
那最后一行加载了XML文档中的文件实体，引用位于file://example.txt的文本文件的内容。
[ ]{#c15.xhtml#Page_249 .pagebreak title="249"} External entities can
also load resources from the internet. This DTD declares an external
entity named `      file     ` that points to the home page of
*example.com* :
外部实体也可以从互联网加载资源。这个DTD声明了一个名为"file"的外部实体，指向example.com的主页。
    ]>
    &file;
What's the vulnerability hidden within this functionality? The issue is
that if users can control the values of XML entities or external
entities, they might be able to disclose internal files, port-scan
internal machines, or launch DoS attacks.
这个功能存在哪些漏洞?
问题在于，如果用户可以控制XML实体或外部实体的值，则他们可能能够披露内部文件，端口扫描内部计算机或发动DoS攻击。
Many sites use older or poorly configured XML parsers to read XML
documents. If the parser allows user-defined DTDs or user input within
the DTD and is configured to parse and evaluate the DTD, attackers can
declare their own external entities to achieve malicious results.
许多网站使用较旧或配置不佳的XML解析器来读取XML文档。如果解析器允许用户定义DTD或在DTD内输入用户输入，并配置为解析和评估DTD，则攻击者可以声明自己的外部实体以实现恶意结果。
For example, let's say a web application lets users upload their own XML
document. The application will parse and display the document back to
the user. A malicious user can upload a document like this one to read
the */etc/shadow* file on the server, which is where Unix systems store
usernames and their encrypted passwords:
例如，假设一个Web应用程序允许用户上传他们自己的XML文档。该应用程序将解析并将文档显示回给用户。恶意用户可以上传这样一个文档来读取服务器上的/etc/shadow文件，这是Unix系统存储用户名及其加密密码的地方。
    ]>
    &file;
Parsing this XML file will cause the server to return the contents of
*/etc/shadow* because the XML file includes */etc/shadow* via an
external entity [ 1 ]{.CodeAnnotation aria-label="annotation1"} .
分析这个XML文件将会导致服务器返回/etc/shadow的内容，因为这个XML文件通过一个外部实体1包含了/etc/shadow。
Attacks like these are called XML external entity attacks, or *XXEs* .
Applications are vulnerable to XXEs when the application accepts
user-supplied XML input or passes user input into DTDs, which is then
parsed by an XML parser, and that XML parser reads local system files or
sends internal or outbound requests specified in the DTD.
这样的攻击被称为XML外部实体攻击或XXE攻击。当应用程序接受用户提供的XML输入或将用户输入传递到DTD中，并由XML解析器解析时，应用程序就容易受到XXE攻击，XML解析器会读取本地系统文件或根据DTD指定的定义发送内部或外部请求。
## Prevention {#c15.xhtml#h1-123456c15-0002}
Preventing XXEs is all about limiting the capabilities of an XML parser.
First, because DTD processing is a requirement for XXE attacks, you
should disable DTD processing on the XML parsers if possible. If it's
not possible to disable DTDs completely, you can disable external
entities, parameter entities (covered in [ "Escalating the Attack" on
page 254 ]{.xref
itemid="xref_target_“Escalating the Attack” on page 254"} ), and inline
DTDs (DTDs included in the XML document). And to prevent XXE-based DoS,
you can limit the XML parser's parse time and parse depth. You can also
disable the expansion of entities entirely.
预防XXE攻击的关键在于限制XML解析器的能力。首先，由于对DTD的处理是XXE攻击的要求，如果可能的话，应该在XML解析器中禁用DTD处理。如果无法完全禁用DTD，可以禁用外部实体、参数实体（在第254页的"加剧攻击"中介绍）和内联DTD（包含在XML文档中的DTD）。为了防止基于XXE的拒绝服务攻击，可以限制XML解析器的解析时间和解析深度。您还可以完全禁用实体扩展。
[ ]{#c15.xhtml#Page_250 .pagebreak title="250"} The mechanisms for
disabling DTD processing and configuring parser behavior vary based on
the XML parser in use. For example, if you're using the default PHP XML
parser, you need to set `      libxml_disable_entity_loader     ` to
`      TRUE     ` to disable the use of external entities. For more
information on how to do it for your parser, consult the OWASP Cheat
Sheet at
[https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md){.LinkURL}
*.*
禁用DTD处理和配置分析器行为的机制取决于所使用的XML分析器。例如，如果您使用默认的PHP
XML解析器，则需要将libxml_disable_entity_loader设置为TRUE以禁用使用外部实体。有关如何为您的解析器执行此操作的更多信息，请参阅OWASP防伪劫持清单https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md。
Another path you can take is input validation. You could create an
allowlist for user-supplied values that are passed into XML documents,
or sanitize potentially hostile data within XML documents, headers, or
nodes. Alternatively, you can use less complex data formats like JSON
instead of XML whenever possible.
另一种方法是进行输入验证。您可以创建用户提供的数值的允许列表，以传递到XML文档中，或清理XML文档中、标头或节点中的潜在恶意数据。另外，尽可能使用较少复杂的数据格式，例如JSON，而不是XML。
In classic XXEs (like the example I showed in [ "Mechanisms" on page 249
]{.xref itemid="xref_target_“Mechanisms” on page 249"} ), attackers
exfiltrate data by making the application return data in an HTTP
response. If the server takes XML input but does not return the XML
document in an HTTP response, attackers can use blind XXEs to exfiltrate
data instead. Blind XXEs steal data by having the target server make an
outbound request to the attacker's server with the stolen data. To
prevent blind XXEs, you can disallow outbound network traffic.
在传统的XXE攻击中（比如我在第249页"机制"中展示的例子），攻击者通过让应用程序在HTTP响应中返回数据来将数据窃取。如果服务器接收XML输入，但不在HTTP响应中返回XML文档，则攻击者可以使用盲目的XXE来替代从而窃取数据。盲目的XXE通过让目标服务器向攻击者的服务器发出包含窃取数据的出站请求来窃取数据。为了防止盲目的XXE，您可以禁止出站网络流量。
Finally, you can routinely review your source code to detect and fix XXE
vulnerabilities. And because many XXEs are introduced by an
application's dependencies instead of its custom source code, you should
keep all dependencies in use by your application or by the underlying
operating system up-to-date.
最后，您可以定期检查您的源代码以检测和修复XXE漏洞。因为许多XXE是由应用程序的依赖项而不是其自定义源代码引入的，所以您应该始终保持应用程序或底层操作系统使用的所有依赖项最新。
## Hunting for XXEs {#c15.xhtml#h1-123456c15-0003}
To find XXEs, start with locating the functionalities that are prone to
them. This includes anywhere that the application receives direct XML
input, or receives input that is inserted into XML documents that the
application parses.
寻找XXE攻击，要先定位容易受攻击的功能区。这包括应用程序直接接收XML输入的地方，或接收插入到应用程序解析的XML文档中的输入。
### Step 1: Find XML Data Entry Points {#c15.xhtml#h2-123456c15-0001}
Many applications use XML data to transfer information within HTTP
messages. To look for these endpoints, you can open up your proxy and
browse the target application. Then, find XML-like documents in HTTP
messages by looking for the previously mentioned tree-like structures,
or by looking for the signature of an XML document: the string
`      "
    ]>
    &test;
Then, test whether the `      SYSTEM     ` keyword is usable by trying
to load a local file:
然后，尝试通过加载本地文件来测试是否可以使用SYSTEM关键字：
    ]>
    &test;
[ ]{#c15.xhtml#Page_252 .pagebreak title="252"} When the
`      SYSTEM     ` keyword does not work, you can replace it with the
`      PUBLIC     ` keyword instead. This tag requires you to supply an
ID surrounded by quotes after the `      PUBLIC     ` keyword. The
parser uses this to generate an alternate URL for the value of the
entity. For our purposes, you can just use a random string in its place:
当SYSTEM关键字无法使用时，您可以使用PUBLIC关键字代替。该标记需要在PUBLIC关键字后面提供带引号的ID。解析器使用此选项生成实体值的替代URL。对于我们的目的，您可以使用随机字符串代替。
    ]>
    &test;
Next, try to extract some common system files. You can start with the
files */etc/hostname* and */etc/passwd* , for example. Another file I
like to extract using XXEs is *.bash_history* . This file is typically
located at each user's home directory ( *\~/.bash_history* ) and
contains a list of commands previously executed. By reading this file,
you can often uncover juicy information like internal URLs, IP
addresses, and file locations. Common system files or paths mentioned
here can be restricted, so don't give up if the first few files you try