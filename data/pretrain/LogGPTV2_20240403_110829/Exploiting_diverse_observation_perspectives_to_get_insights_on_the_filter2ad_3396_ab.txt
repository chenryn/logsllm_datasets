### SGNET Sensors and Information Interaction

SGNET sensors successfully interact with information and leverage algorithms and protocols based on code injection to the sensors. The memory tainting, generated by Argos, is combined with simple heuristics to identify injected shellcodes, which are part of the Nepenthes network actions. This process helps in recognizing the intended behavior associated with the observed network activities.

### Memory Tainting and Shellcode Identification

Memory tainting, generated by Argos, is combined with simple heuristics to identify injected shellcodes, a part of the Nepenthes network actions. This allows SGNET honeypots to understand and emulate the shellcodes, thereby enhancing the detection and analysis of malicious activities. SGNET takes advantage of metadata on the attacking entities, and all the information collected during the interaction is stored in a database. An enrichment component adds additional sources and behavioral analysis, including AV detection, to the dataset. Relevant malware samples are automatically analyzed, and the resulting reports enrich the knowledge base.

### Injection Event and Malware Analysis

- **Payload (7f):** The set of network bytes that the attacker uses to redirect control through the flow, allowing more sophisticated operations.
- **Malware (p):** The binary content uploaded to the victim, enabling the attacker to execute more complex operations within the limited space available.

To exploit SGNET information, it is necessary to handle the degree of variation in different propagation techniques. For example, polymorphic techniques can mutate the content of the payload and malware. In simpler cases, such as using a random filename in an FTP request to download the malware sample, clustering techniques can be applied.

### EPM Clustering Technique

Given the unique characteristics of the SGNET dataset, we have chosen not to reuse existing techniques but to introduce a new, simple pattern-based method for EPM clustering. This technique is designed to be sufficiently generic and independent, making it useful for recognizing a class of attacks. The assumption is that any randomization or polymorphism has a cost for the attacker, and it will always be possible to detect a certain amount of features within a specific scope.

#### 3.2. EPM Clustering

The SGNET dataset provides information on the different phases of each observed code injection attack. We show that SGNET is structured upon the pi-mu (EGPM) model, an extension of the epsilon-gamma model. The EPM clustering technique is composed of four dimensions: feature definition, invariant discovery, and pattern discovery, applied independently to the three distinct phases (E, Ï€, and p).

**Phase 1: Feature Definition**
- The feature definition phase involves defining a set of features that are useful for characterizing the code injections in each dimension. Table 1 lists the selected features.

**Phase 2: Invariant Discovery**
- The invariant discovery phase searches for values that are not specific to a single instance but are used across multiple instances. These invariants help in characterizing the code injection events. The definition of an invariant value is threshold-based, requiring at least 10 different attack instances and at least three different attackers and three honeypot IPs.

**Phase 3: Pattern Discovery**
- The pattern discovery phase looks at all the code injection attacks over a period and identifies combinations of discriminant values for the different features. This phase aims to find patterns that can be used to classify and understand the behavior of the malware.

### Conclusion

By continuously collecting and analyzing data on the threat landscape, SGNET aims to generate more sophisticated approaches to handle future complex and costly evasion techniques. The EPM clustering technique, while simple, is effective in dealing with the current sophistication level observed in the SGNET dataset.