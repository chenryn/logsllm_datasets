### Delay Variation
To fully compare one round trip with its offset, multiple trips are necessary. A smaller measurement interval may miss large Round-Trip Times (RTTs), while a larger interval reduces the detectable RTT variation. If there are multiple strong correlations at different lags, this can indicate varying RTTs within the measurement interval. Our algorithm can report multiple candidate RTT estimates along with their correlation strengths.

### Noise Effects on Self-Clocking Patterns
Congestion caused by competing traffic or other network conditions can disrupt the burst-gap pattern generated by self-clocking, leading to high correlations at very small lags. This issue can be mitigated by specifying a lower bound on the RTT as a parameter. The effects of competing traffic on our algorithm are evaluated in the next section.

### Evaluation of RTT Estimation Methods
To evaluate the two passive RTT estimation methods, we implemented them in a toolkit called TCPpet (TCP Passive Estimation Toolkit). These implementations take traces captured by `tcpdump` and generate RTT estimates. The timestamp method generates as many RTT estimates as the timestamp granularity allows from bidirectional TCP traffic. The self-clocking method can use either bidirectional or unidirectional traffic. Harmonic frequency detection is enabled for all experiments. If 1/4 of the lag with the strongest correlation has at least 75% of that correlation, it is taken as the RTT measurement. The 75% threshold is measured from the minimum correlation in the interval, which may be negative. These values were chosen for optimal performance with FTP downloads. Additionally, RTTs are assumed to be at least 10ms, and lags less than 10ms are not considered to correct for strong autocorrelations caused by noise. If the Nyquist period exceeds 10ms, it becomes the minimum instead.

### Emulation Test with a Single Flow
We evaluated both RTT estimation methods over an emulated network with varying delays. The network consists of four machines: a sender, a receiver, and two routers, creating a three-hop route. Both the sender and receiver have a timestamp granularity of 1ms. NIST Net [8] was used to add delay to both directions of traffic on each router, resulting in four sources of delay. For example, to achieve a total round trip delay of 100ms, a delay of 25ms was added at each point.

Traces were captured using `tcpdump` on the router closest to the sender, from the network interface connecting to the receiver's router. TCP data transfers were generated by the `ttcp` utility, which reports RTT estimates from the server’s TCP implementation. All transfers involved 16MB of data.

Figure 4 shows RTT estimates for a network trace with a 60ms delay. A 250ms measurement interval was heuristically chosen for the self-clocking method. Future work will aim to find a general default interval. As shown, most RTT measurements are close to those reported by the server, with initial estimates influenced by preexisting TCP state. After 1 second, the server estimates stabilize.

### Emulation Test with Competing Flows
To simulate real-world conditions, the emulated network was modified using NIST Net to limit the sender's segments to 10mb/s with a queue length of 13 packets. A 30ms delay was added to the receiver side router, resulting in a 60ms round trip delay. Competing traffic was generated by running an Apache web server on the sender and using Surge [9] on the receiver to generate HTTP requests. Traces were captured with `tcpdump` while Surge was generating traffic. A 250ms measurement interval was chosen for the self-clocking method.

Figure 6 shows average RTT estimates with varying numbers of emulated Web users. The error bars represent the standard deviation of each set of estimates. Initial 1s of server RTT estimates were discarded due to preexisting TCP state. The timestamp-based method's estimates were within 1ms of the server's, while the self-clocking method's estimates were within 5ms. High loss and retransmission rates, especially in traces with 200 and 400 emulated users, caused variations. For the self-clocking method, 9.7% of 250ms intervals could not produce RTT estimates due to no arriving segments. Despite congestion, our average RTT estimates were accurate.

### Real Network Tests
To evaluate our RTT estimation methods on real networks, we performed FTP downloads from seven sites (Table 2). Traces were captured on the client using `tcpdump`. A 500ms measurement interval was chosen for the self-clocking method. ICMP ping times were captured for reference. The RTT for the Sun server appears to have changed after the traces were taken, and the Intel server did not provide valid estimates due to a 100ms timestamp granularity and lack of ping response.

Table 2 shows RTT estimates for FTP downloads. The self-clocking method's estimates were highly accurate, with minimal differences between minimum and maximum estimates. The highest coefficient of variation was 0.11% for the JRiver trace, suggesting that our method detects small-scale RTT variations.

Figure 7 illustrates RTT estimates for the Stanford FTP download. The timestamp method takes many samples, while the self-clocking method is limited by the measurement interval. All self-clocking estimates were 65 or 66ms, and nearly all timestamp estimates were within 5ms of the self-clocking average. Two estimates above 70ms were likely caused by sender delay.

### Conclusions
We presented two new methods for passive estimation of RTTs for bulk TCP transfers, which can be made at any point along the network route. One method uses TCP timestamps to locate segments arriving one RTT apart, while the other detects self-clocking patterns repeating every RTT. Both methods can be used throughout a TCP session, with the timestamp method suitable for symmetric routes and the self-clocking method for both symmetric and asymmetric routes.

### References
1. Jain, M., Dovrolis, C.: End-to-end available bandwidth: measurement methodology, dynamics, and relation with TCP throughput. In: SIGCOMM, ACM (2002)
2. Zhang, Y., Breslau, L., Paxson, V., Shenker, S.: On the characteristics and origins of Internet flow rates. In: SIGCOMM, ACM (2002)
3. Ratnasamy, S., Handley, M., Karp, R., Shenker, S.: Topologically-aware overlay construction and server selection. In: INFOCOM, IEEE (2002)
4. Jiang, J., Dovrolis, C.: Passive estimation of TCP round-trip times. ACM Computer Communication Review 32 (2002)
5. Lu, G., Li, X.: On the correspondency between TCP acknowledgment packet and data packet. In: Internet Measurement Conference, ACM (2003)
6. Jaiswal, S., Iannaccone, G., Diot, C., Kurose, J., Towsley, D.: Inferring TCP connection characteristics through passive measurements. In: INFOCOM, IEEE (2004)
7. Alexa Internet: Alexa Web search—top 500. http://www.alexa.com/site/ds/top_sites?ts_mode=global&lang=none (2004)
8. Carson, M., Santay, D.: NIST Net: a Linux-based network emulation tool. ACM Computer Communication Review 33 (2003) 111–126
9. Barford, P., Crovella, M.: Generating representative web workloads for network and server performance evaluation. In: Measurement and Modeling of Computer Systems. (1998) 151–160
10. Barford, P., Bestavros, A., Bradley, A., Crovella, M.: Changes in web client access patterns: Characteristics and caching implications. World Wide Web 2 (1999)