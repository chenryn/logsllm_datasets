trips are needed to fully compare one round trip with its oﬀset.
Delay Variation. While a smaller measurement interval may miss large RTTs,
a larger measurement interval decreases the amount RTT variation that can be
detected. If multiple strong correlations exist at diﬀerent lags, this may indicate
diﬀerent RTTs at diﬀerent times within a measurement interval. Our algorithm
can report multiple candidate RTT estimates within an interval along with their
correlation strengths.
Noise Eﬀects on Self-Clocking Patterns. Congestion caused by competing
traﬃc or other network conditions may disrupt the burst-gap pattern caused by
self-clocking. One consequence of this is a high correlation at very small lags.
This problem can be corrected by allowing a lower bound on the RTT to be
speciﬁed as a parameter. We evaluate the eﬀects of competing traﬃc on our
algorithm in the next section.
New Methods for Passive Estimation of TCP Round-Trip Times
129
6 Evaluation of RTT Estimation Methods
To evaluate these two passive RTT estimation methods, we have implemented
them in a toolkit called TCPpet (TCP Passive Estimation Toolkit). Our imple-
mentations take traces captured by tcpdump and generate RTT estimates. The
implementation of the timestamp method takes a trace with bidirectional TCP
traﬃc and generates as many RTT estimates as the timestamp granularity will
allow.
2, 1
3, or 1
The implementation of the self-clocking method can use a trace with bidirec-
tional or unidirectional traﬃc. Harmonic frequency detection is enabled for all
experiments. If 1
4 of the lag having the strongest correlation has at least
75% of that correlation, it is taken as the RTT measurement. Note that 75%
is measured from the minimum correlation in the measurement interval, which
may be negative, instead of from zero. These values were chosen for good overall
performance with the FTP downloads described later. Additionally, RTTs are
assumed to be at least 10ms. Lags less than 10ms are not considered in order
to correct for strong autocorrelations caused by noise eﬀects. Note that if the
Nyquist period is higher than 10ms, it becomes the minimum instead.
Emulation Test with a Single Flow
6.1
We have evaluated both RTT estimation methods with diﬀerent network delays
over an emulated network. The network consists of four machines: a sender,
a receiver, and two routers, creating a three-hop route between the sender and
receiver. Both the sender and receiver have timestamp granularities of 1ms. NIST
Net [8] was used to add delay along the route by adding delay to both directions
of traﬃc on each of the two routers. Thus, there are a total of four sources
of delay along the route. If, for instance, a total round trip delay of 100ms is
desired, then a delay of 25ms is added to each of the four points.
Traces were taken with tcpdump on the router closest to the sender. These
traces were taken from the network interface that connects to the receiver’s
router, so that segments from the sender are delayed both before and after being
recorded by tcpdump.
TCP data transfers were generated by the ttcp utility, which has been in-
strumented to report RTT estimates from the server’s TCP implementation. All
transfers were 16MB of data generated by ttcp.
Figure 4 shows all the RTT estimates for a network trace with a 60ms delay.
Although the trace is longer, we only show the ﬁrst 2 seconds for clarity. It
includes estimates made by the server as well those made by the two passive
estimation methods. A 250ms measurement interval was heuristically chosen for
the self-clocking method. We plan to ﬁnd a general default measurement interval
as future work. As shown in the ﬁgure, nearly all the RTT measurements are
close to those reported by the server. Note that the ﬁrst few estimates for the
server were inﬂuenced by preexisting state in the TCP implementation. After
the 1s mark, the server estimates level oﬀ throughout the duration of the trace.
130
B. Veal, K. Li, and D. Lowenthal
Server RTT
Timestamp Method
Self-Clocking Method
 64
 62
 60
 58
 56
)
s
m
(
e
t
a
m
i
t
s
E
T
T
R
 0
 0.5
 1
 1.5
Time (s)
 2
 2.5
 3
Fig. 4. RTT estimates for an emulated network trace with a 60ms delay
RTT estimates were taken for traces with 15, 30, 60, 120, and 240ms delays.
Figure 5 shows the average of all the RTT estimates reported by each method for
each trace. Here, a 500ms measurement interval was chosen for the self-clocking
estimation method to accommodate possible RTTs up to 250ms. As shown in
the ﬁgure, the averages are nearly identical. The largest coeﬃcients of variation
(standard deviation/mean) occurred for the 15ms delay trace, which were 3.79%
for the timestamp based method and 6.69% for the self-clocking based method.
Emulation Test with Competing Flows
6.2
While the previous experiments show that our methods work well with diﬀerent
delays, real networks have conditions such as bottlenecks and competing traﬃc.
The emulated network used previously was modiﬁed using NIST Net to limit
the segments sent from the sender to the receiver to 10mb/s with a queue length
of 13 packets. Delay was only added to the receiver side router, and it was set
to 30ms for either direction of traﬃc. Thus, there was a total 60ms delay for the
round trip.
To generate competing traﬃc, an Apache web server was run on the sender.
Surge [9] was run on the receiver to generate HTTP requests to be served by
the sender. Surge was conﬁgured with the default settings based on analyses
in [10]. Traces were generated with ttcp while Surge was concurrently generating
traﬃc. The traces were captured by tcpdump as described previously. A 250ms
measurement interval was chosen for the self-clocking based method.
Figure 6 shows average RTT estimates when Surge is generating requests
from 0, 200, 400, 600, 800, 1000, and 1200 emulated Web users. The error bars
show the standard deviation of each set of estimates. Note that the initial 1s
)
s
m
(
e
t
a
m
i
t
s
E
T
T
R
e
g
a
r
e
v
A
t
e
a
m
i
t
s
E
T
T
R
e
g
a
r
e
v
A
New Methods for Passive Estimation of TCP Round-Trip Times
131
 1000
 100
 10
 10
Server RTT
Timestamp Method
Self-Clocking Method
 100
Network Delay (ms)
 1000
Fig. 5. Emulated network traces with varying delay
Server RTT
Timestamp Method
Self-Clocking Method
0
200
400
600
800
1000
1200
Number of Clients
 120
 100
 80
 60
 40
 20
 0
Fig. 6. RTT estimates with competing traﬃc from emulated Web users
period of server RTT estimates for each trace is discarded because the initial
estimates were inﬂuenced by preexisting state in the TCP implementation.
The average RTT estimates from the timestamp based method are all within
1ms of that of the server. They are all within 5ms for the self-clocking method.
High loss and retransmission rates were the principle causes of variation in the
estimates, especially in the traces with 200 and 400 emulated users. In fact, for
132
B. Veal, K. Li, and D. Lowenthal
the self-clocking based method, 9.7% of the 250ms measurement intervals could
not produce RTT estimates because no segments arrived during that time. Other
intervals had one or two segments–too few to produce accurate estimates. We
are currently investigating why traces with more than 600 emulated users had
lower loss rates. Considering the severity of the eﬀects of congestion, our average
RTT estimates were very accurate.
6.3 Real Network Tests
To evaluate our RTT estimation methods on real networks, we performed FTP
downloads from seven sites (Table 2). Traces were captured for the FTP data
streams on the client with tcpdump. A measurement interval of 500ms was cho-
sen for the self-clocking based method to accommodate possible RTTs up to
250ms. Note that RTT estimates for the servers’ TCP implementations are not
available since we do not have access to these machines. ICMP ping times were
captured for reference at a later date than the traces. The RTT for the Sun
server appears to have changed after the traces were taken. For the Intel server,
the 100ms timestamp granularity was too coarse, so no valid RTT estimate could
be produced. The Intel server also did not respond to ping requests.
Table 2. RTT estimates in ms for FTP downloads
Site
Ping Timestamps Method Self-Clocking Method
97.9
ftp10.us.freebsd.org
97.6 98.7
ftp.cs.washington.edu 59.7 62.0
60.7
ftp.cs.stanford.edu
64.0
62.4 65.3
ftp.jriver.com
60.6
60.5 75.3
docs-pdf.sun.com
51.7
90.7 52.2
ftp.cs.uiuc.edu
21.2
20.7 21.5
download.intel.com — 110.6 98.2
98.0
60.0
65.0
40.0
50.0
20.0
—
Avg. Min. Max. Avg. Min. Max.
99.0
60.0
66.0
150.0
50.0
20.0
—
98.1
134.5
60.0
87.0
65.1
99.9
75.7
101.6
50.0
61.4
24.4
20.0
127.1 —
The estimates for the self-clocking based method were very accurate. With the
exception of one trace, the minimum and maximum estimates diﬀered by at most
1ms. The maximum diﬀerence between the average self-clocking based estimate
and the average timestamp based estimate was 2.2ms for the Sun trace, which
had a high 10ms timestamp granularity. The 150ms estimate for JRiver trace
from the self-clocking based method was caused by a single missed harmonic
frequency. Similarly, the low 40ms was caused by two consecutive measurements
during a series of half-RTT bursts.
Despite some of the high maximum estimates for the timestamp based meth-
od, the number of large estimates were few. The highest coeﬃcient of variation
was only 0.11% for the JRiver trace. While many of the other RTT estimates
from the timestamp based method are aﬀected by a few outliers, estimates for
this trace have a more scattered distribution in both directions from the mean.
This suggests that our method is detecting actual small-scale variations in RTT
caused by conditions in the network route.
)
s
m
(
e
t
a
m
i
t
s
E
T
T
R
New Methods for Passive Estimation of TCP Round-Trip Times
133
 105
 100
 95
 90
 85
 80
 75
 70
 65
 60
Timestamp Method
Self-Clocking Method
 0
 0.5
 1
 1.5
 2
 2.5
 3
 3.5
 4
 4.5
 5
Time (s)
Fig. 7. RTT estimates for Stanford FTP download
Figure 7 shows the passive RTT estimates for the FTP download from Stan-
ford as an example. Note that the timestamp based method is able to take many
samples, while samples from the self-clocking based method are limited by the
size of the measurement interval. All the estimates from the self-clocking based
method are either 65 or 66ms. Nearly all the estimates from the timestamps
based method are within 5ms of the average self-clocking estimate. Only two
estimates larger than 70ms exist, which were likely caused by sender delay.
7 Conclusions
We have presented two new methods for passive estimation of round-trip times
for bulk TCP transfers. These RTT estimations can be made at an interior point
along the network route. One method uses TCP timestamps to locate segments
from a bulk data sender that arrive one RTT apart, while the other detects
patterns caused by self-clocking that repeat every RTT. Both methods can be
used throughout the lifetime of a TCP session. The timestamp based method
can be used for symmetric routes, while the self-clocking based method works
for both symmetric and asymmetric routes.
References
1. Jain, M., Dovrolis, C.: End-to-end available bandwidth: measurement methodol-
ogy, dynamics, and relation with tcp throughput. In: SIGCOMM, ACM (2002)
2. Zhang, Y., Breslau, L., Paxson, V., Shenker, S.: On the characteristics and origins
of Internet ﬂow rates. In: SIGCOMM, ACM (2002)
134
B. Veal, K. Li, and D. Lowenthal
3. Ratnasamy, S., Handley, M., Karp, R., Shenker, S.: Topologically-aware overlay
construction and server selection. In: INFOCOM, IEEE (2002)
4. Jiang, J., Dovrolis, C.: Passive estimation of TCP round-trip times. ACM Com-
puter Communication Review 32 (2002)
5. Lu, G., Li, X.: On the correspondency between tcp acknowledgment packet and
data packet. In: Internet Measurement Conference, ACM (2003)
6. Jaiswal, S., Iannaccone, G., Diot, C., Kurose, J., Towsley, D.:
Inferring TCP
connection characteristics through passive measurements. In: INFOCOM, IEEE
(2004)
7. Alexa Internet: Alexa Web search—top 500.
http://www.alexa.com/site/ds/top sites?ts mode=global&lang=none (2004)
8. Carson, M., Santay, D.: NIST Net: a Linux-based network emulation tool. ACM
Computer Communication Review 33 (2003) 111–126
9. Barford, P., Crovella, M.: Generating representative web workloads for network
and server performance evaluation. In: Measurement and Modeling of Computer
Systems. (1998) 151–160
10. Barford, P., Bestavros, A., Bradley, A., Crovella, M.: Changes in web client access
patterns: Characteristics and caching implications. World Wide Web 2 (1999)