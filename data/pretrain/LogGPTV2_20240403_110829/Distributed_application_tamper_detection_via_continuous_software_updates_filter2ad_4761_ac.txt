### Diversity Graphs and Forbidden Set Computation

**Figure 3: Diversity Graphs.**
- **Protocol Nodes:** Represented as ellipses.
- **Implementation Nodes:** Represented as rectangles.

**Figure 4: Computing Forbidden Sets for Forward Operations.**
- **Active Blocks:** Marked with an 'A'.
- **Generation Markers (wi):** Indicate the generation a block belongs to.
- **Forbidden Blocks:** Crossed out.

#### Example of Forbidden Set Computation
1. **Initial State:**
   - `main` is the protocol node.
   - `main[0,0]` is the active block.
   - `foo` is another protocol node.
   - `foo[0]` is the implementation node.

2. **Obfuscation Steps:**
   - Apply `rnd_args` to `foo[0]` using the `encode_var` primitive, resulting in a new variant `foo[0,0]`.
   - Generate a protocol-incompatible variant `g` from `foo[0,0]`, leading to a new protocol node `foo[1]`.
   - In Figure 3(d), `foo[0,2]` is created by applying `rnd_args` to `foo[0,0]`.

3. **Rollback Update Cycles:**
   - For performance reasons, it is not always feasible to transform a working set `wi` into a new generation `wi+1` by simply applying obfuscating primitives.
   - The diversity scheduler supports a rollback operation, where `wi+1` is formed by reverting some blocks in `wi` to previous generations.
   - This allows the system to roll back a few blocks to previous variants, then apply new transformations without incurring extra performance penalties.

### Diversity Strategies

**Definition 3 (Diversity):**
- **Temporal Diversity:** A program `p` is delivered as an infinite and non-repeating sequence of variants `{v0, v1, ...}` where `vi ≠ vj` if `i ≠ j`.
- **Spatial Diversity:** A variant `v` is constructed by compounding multiple layers of interchangeable primitive transformations.
- **Semantic Diversity:** Two variants `vi` and `vj` of `p` cannot be used interchangeably.

**Strategies:**
- **Temporal Diversity:** Also known as renewability or software aging.
- **Spatial Diversity:** Known as defense-in-depth.

**Diversity Scheduler:**
- Decides on the appropriate sequence of strategies to protect the client program from tampering.
- Employs temporal diversity by producing generations of block variant working sets.
- Uses spatial diversity by compounding protocol-preserving primitives.
- Applies semantic diversity through non-protocol-preserving primitives.

**Scheduler Input:**
- Current working set `wi`.
- Current diversity graph `Gi`.
- Performance profile of the client code.
- Security requirements of different parts of the code.
- Set of primitives and their effects on diversity and performance.
- Active set (functions currently on the client’s call stack).

**Scheduler Output:**
- New working set `wi+1`.
- Kill set of blocks to be invalidated on the client side.
- Updated diversity graph `Gi+1`.

### Forward and Rollback Updates

**Forward Update:**
- Applies primitive transformations to blocks in the current working set, increasing confusion but also performance overhead.

**Rollback Update:**
- Reverts one or more blocks in the current working set to previous variants.

**Restrictions on Forward Update Cycles:**
- Blocks not in the current generation (`wj, j < i`) are forbidden.
- Active blocks (e.g., `main[0,0]`) are forbidden.
- Blocks directly called by active blocks (e.g., `foo[0,0]`) are forbidden for non-protocol-preserving transformations.

**Forward Transformation Process:**
1. Compute forbidden nodes in the diversity graph.
2. Select a permissible block `B` and transformation `T`.
3. Perform the transformation.
4. Update the diversity graph.
5. Send the kill set to the client.

### Linking

- During execution, blocks continuously come and go in the client’s block bag.
- An array of function pointers `funPtrArr` indexed by block numbers is maintained.
- Function calls are redirected through this array, and missing blocks are loaded over the network.

### Security Analysis

**Attack Detection:**
- The server can detect tampering during interaction events with the client.
- Three key interaction events:
  1. Block requests from the client.
  2. Client's active set responses.
  3. Remote procedure call (RPC) verifications.

**Enumeration of the Attack Space:**
- **Goal:** Tamper with a particular asset without detection.
- **Steps:**
  1. Find the asset blocks `A = {A1, ..., An}`.
  2. Tamper with these blocks.
  3. Avoid detection by the server.

**Countermeasures:**
- Primitives designed to counter various attacks.
- Block analysis is made more difficult using protocol-preserving primitives.
- Transformations slow down reverse engineering efforts between updates.

**Figure 5: Attack Tree**
- Shows the attack space available to a malicious user.
- Four ways to avoid detection, ordered from easiest to hardest.

This optimized text provides a clear and structured overview of the diversity graphs, forbidden set computation, diversity strategies, forward and rollback updates, linking, and security analysis.