MANCE_NLSTE
XT
counters in the local language of the area in which 
the computer system is running
HKEY_PERFOR
MANCE_TEXT
Stores text strings that describe performance 
counters in US English.
HKEY_CURREN
T_CONFIG
Stores some information about the current 
hardware profile (deprecated)
Why do root-key names begin with an H? Because the root-key names
represent Windows handles (H) to keys (KEY). As mentioned in Chapter 1,
“Concepts and tools” of Part 1, HKLM is an abbreviation used for
HKEY_LOCAL_MACHINE. Table 10-3 lists all the root keys and their
abbreviations. The following sections explain in detail the contents and
purpose of each of these root keys.
Table 10-3 Registry root keys
Root Key
A
b
b
re
vi
at
io
n
Description
Link
HKEY_CU
RRENT_U
SER
H
K
C
U
Points to the 
user profile of 
the currently 
logged-on user
Subkey under HKEY_USERS 
corresponding to currently 
logged-on user
HKEY_CU
RRENT_U
SER_LOC
AL_SETTI
H
K
C
U
Points to the 
local settings 
of the 
currently 
Link to 
HKCU\Software\Classes\Local 
Settings
NGS
L
S
logged-on user
HKEY_US
ERS
H
K
U
Contains 
subkeys for all 
loaded user 
profiles
Not a link
HKEY_CL
ASSES_RO
OT
H
K
C
R
Contains file 
association 
and COM 
registration 
information
Not a direct link, but rather a 
merged view of 
HKLM\SOFTWARE\Classes and 
HKEY_USERS\
\SOFTWARE\Classes
HKEY_LO
CAL_MAC
HINE
H
K
L
M
Global settings 
for the 
machine
Not a link
HKEY_CU
RRENT_C
ONFIG
H
K
C
C
Current 
hardware 
profile
HKLM\SYSTEM\CurrentControl
Set\Hardware Profiles\Current
HKEY_PE
RFORMAN
CE_DATA
H
K
P
D
Performance 
counters
Not a link
HKEY_PE
RFORMAN
CE_NLSTE
XT
H
K
P
N
T
Performance 
counters text 
strings
Not a link
HKEY_PE
H
Performance 
Not a link
RFORMAN
CE_TEXT
K
P
T
counters text 
strings in US 
English
HKEY_CURRENT_USER
The HKCU root key contains data regarding the preferences and software
configuration of the locally logged-on user. It points to the currently logged-
on user’s user profile, located on the hard disk at \Users\
\Ntuser.dat. (See the section “Registry internals” later in this
chapter to find out how root keys are mapped to files on the hard disk.)
Whenever a user profile is loaded (such as at logon time or when a service
process runs under the context of a specific username), HKCU is created to
map to the user’s key under HKEY_USERS (so if multiple users are logged
on in the system, each user would see a different HKCU). Table 10-4 lists
some of the subkeys under HKCU.
Table 10-4 HKEY_CURRENT_USER subkeys
Subkey
Description
AppEvents
Sound/event associations
Console
Command window settings (for example, width, height, 
and colors)
Control 
Panel
Screen saver, desktop scheme, keyboard, and mouse 
settings, as well as accessibility and regional settings
Environme
nt
Environment variable definitions
EUDC
Information on end-user defined characters
Keyboard 
Layout
Keyboard layout setting (for example, United States or 
United Kingdom)
Network
Network drive mappings and settings
Printers
Printer connection settings
Software
User-specific software preferences
Volatile 
Environme
nt
Volatile environment variable definitions
HKEY_USERS
HKU contains a subkey for each loaded user profile and user class
registration database on the system. It also contains a subkey named
HKU\.DEFAULT that is linked to the profile for the system (which is used
by processes running under the local system account and is described in more
detail in the section “Services” later in this chapter). This is the profile used
by Winlogon, for example, so that changes to the desktop background
settings in that profile will be implemented on the logon screen. When a user
logs on to a system for the first time and her account does not depend on a
roaming domain profile (that is, the user’s profile is obtained from a central
network location at the direction of a domain controller), the system creates a
profile for her account based on the profile stored in
%SystemDrive%\Users\Default.
The location under which the system stores profiles is defined by the
registry value HKLM\Software\Microsoft\Windows
NT\CurrentVersion\ProfileList\ProfilesDirectory, which is by default set to
%SystemDrive%\Users. The ProfileList key also stores the list of profiles
present on a system. Information for each profile resides under a subkey that
has a name reflecting the security identifier (SID) of the account to which the
profile corresponds. (See Chapter 7, “Security,” of Part 1 for more
information on SIDs.) Data stored in a profile’s key includes the time of the
last load of the profile in the LocalProfileLoadTimeLow value, the binary
representation of the account SID in the Sid value, and the path to the
profile’s on-disk hive (Ntuser.dat file, described later in this chapter in the
“Hives” section) in the directory given by the ProfileImagePath value.
Windows shows profiles stored on a system in the User Profiles management
dialog box, shown in Figure 10-1, which you access by clicking Configure
Advanced User Profile Properties in the User Accounts Control Panel
applet.
Figure 10-1 The User Profiles management dialog box.
EXPERIMENT: Watching profile loading and
unloading
You can see a profile load into the registry and then unload by
using the Runas command to launch a process in an account that’s
not currently logged on to the machine. While the new process is
running, run Regedit and note the loaded profile key under
HKEY_USERS. After terminating the process, perform a refresh in
Regedit by pressing the F5 key, and the profile should no longer be
present.
HKEY_CLASSES_ROOT
HKCR consists of three types of information: file extension associations,
COM class registrations, and the virtualized registry root for User Account
Control (UAC). (See Chapter 7 of Part 1 for more information on UAC.) A
key exists for every registered file name extension. Most keys contain a
REG_SZ value that points to another key in HKCR containing the association
information for the class of files that extension represents.
For example, HKCR\.xls would point to information on Microsoft Office
Excel files. For example, the default value contains “Excel.Sheet.8” that is
used to instantiate the Excel COM object. Other keys contain configuration
details for all COM objects registered on the system. The UAC virtualized
registry is located in the VirtualStore key, which is not related to the other
kinds of data stored in HKCR.
The data under HKEY_CLASSES_ROOT comes from two sources:
■    The per-user class registration data in HKCU\SOFTWARE\Classes
(mapped to the file on hard disk \Users\
\AppData\Local\Microsoft\Windows\Usrclass.dat)
■    Systemwide class registration data in HKLM\SOFTWARE\Classes
There is a separation of per-user registration data from systemwide
registration data so that roaming profiles can contain customizations.
Nonprivileged users and applications can read systemwide data and can add
new keys and values to systemwide data (which are mirrored in their per-user
data), but they can only modify existing keys and values in their private data.
It also closes a security hole: a nonprivileged user cannot change or delete
keys in the systemwide version HKEY_CLASSES_ROOT; thus, it cannot
affect the operation of applications on the system.
HKEY_LOCAL_MACHINE
HKLM is the root key that contains all the systemwide configuration
subkeys: BCD00000000, COMPONENTS (loaded dynamically as needed),
HARDWARE, SAM, SECURITY, SOFTWARE, and SYSTEM.
The HKLM\BCD00000000 subkey contains the Boot Configuration
Database (BCD) information loaded as a registry hive. This database replaces
the Boot.ini file that was used before Windows Vista and adds greater
flexibility and isolation of per-installation boot configuration data. The
BCD00000000 subkey is backed by the hidden BCD file, which, on UEFI
systems, is located in \EFI\Microsoft\Boot. (For more information on the
BCD, see Chapter 12, "Startup and shutdown”).
Each entry in the BCD, such as a Windows installation or the command-
line settings for the installation, is stored in the Objects subkey, either as an
object referenced by a GUID (in the case of a boot entry) or as a numeric
subkey called an element. Most of these raw elements are documented in the
BCD reference in Microsoft Docs and define various command-line settings
or boot parameters. The value associated with each element subkey
corresponds to the value for its respective command-line flag or boot
parameter.
The BCDEdit command-line utility allows you to modify the BCD using
symbolic names for the elements and objects. It also provides extensive help
for all the boot options available. A registry hive can be opened remotely as
well as imported from a hive file: you can modify or read the BCD of a
remote computer by using the Registry Editor. The following experiment
shows you how to enable kernel debugging by using the Registry Editor.
EXPERIMENT: Remote BCD editing
Although you can modify offline BCD stores by using the bcdedit
/store command, in this experiment you will enable debugging
through editing the BCD store inside the registry. For the purposes
of this example, you edit the local copy of the BCD, but the point
of this technique is that it can be used on any machine’s BCD hive.
Follow these steps to add the /DEBUG command-line flag:
1. 
Open the Registry Editor and then navigate to the
HKLM\BCD00000000 key. Expand every subkey so that
the numerical identifiers of each Elements key are fully
visible.
2. 
Identify the boot entry for your Windows installation by
locating the Description with a Type value of 0x10200003,
and then select the 12000004 key in the Elements tree. In
the Element value of that subkey, you should find the name
of your version of Windows, such as Windows 10. In recent
systems, you may have more than one Windows installation
or various boot applications, like the Windows Recovery
Environment or Windows Resume Application. In those
cases, you may need to check the 22000002 Elements
subkey, which contains the path, such as \Windows.
3. 
Now that you’ve found the correct GUID for your Windows
installation, create a new subkey under the Elements subkey
for that GUID and name it 0x260000a0. If this subkey
already exists, simply navigate to it. The found GUID
should correspond to the identifier value under the
Windows Boot Loader section shown by the bcdedit /v
command (you can use the /store command-line option to
inspect an offline store file).
4. 
If you had to create the subkey, now create a binary value
called Element inside it.
5. 
Edit the value and set it to 1. This will enable kernel-mode
debugging. Here’s what these changes should look like:
 Note
The 0x12000004 ID corresponds to BcdLibraryString_ApplicationPath,
whereas the 0x22000002 ID corresponds to
BcdOSLoaderString_SystemRoot. Finally, the ID you added, 0x260000a0,
corresponds to BcdOSLoaderBoolean_KernelDebuggerEnabled. These
values are documented in the BCD reference in Microsoft Docs.
The HKLM\COMPONENTS subkey contains information pertinent to the
Component Based Servicing (CBS) stack. This stack contains various files
and resources that are part of a Windows installation image (used by the
Automated Installation Kit or the OEM Preinstallation Kit) or an active
installation. The CBS APIs that exist for servicing purposes use the
information located in this key to identify installed components and their
configuration information. This information is used whenever components
are installed, updated, or removed either individually (called units) or in
groups (called packages). To optimize system resources, because this key can
get quite large, it is only dynamically loaded and unloaded as needed if the
CBS stack is servicing a request. This key is backed by the COMPONENTS
hive file located in \Windows\system32\config.
The HKLM\HARDWARE subkey maintains descriptions of the system’s
legacy hardware and some hardware device-to-driver mappings. On a
modern system, only a few peripherals—such as keyboard, mouse, and ACPI
BIOS data—are likely to be found here. The Device Manager tool lets you
view registry hardware information that it obtains by simply reading values
out of the HARDWARE key (although it primarily uses the
HKLM\SYSTEM\CurrentControlSet\Enum tree).
HKLM\SAM holds local account and group information, such as user
passwords, group definitions, and domain associations. Windows Server
systems operating as domain controllers store domain accounts and groups in
Active Directory, a database that stores domainwide settings and
information. (Active Directory isn’t described in this book.) By default, the
security descriptor on the SAM key is configured so that even the
administrator account doesn’t have access.
HKLM\SECURITY stores systemwide security policies and user-rights
assignments. HKLM\SAM is linked into the SECURITY subkey under
HKLM\SECURITY\SAM. By default, you can’t view the contents of
HKLM\SECURITY or HKLM\SAM because the security settings of those
keys allow access only by the System account. (System accounts are
discussed in greater detail later in this chapter.) You can change the security
descriptor to allow read access to administrators, or you can use PsExec to
run Regedit in the local system account if you want to peer inside. However,
that glimpse won’t be very revealing because the data is undocumented and
the passwords are encrypted with one-way mapping—that is, you can’t
determine a password from its encrypted form. The SAM and SECURITY
subkeys are backed by the SAM and SECURITY hive files located in the