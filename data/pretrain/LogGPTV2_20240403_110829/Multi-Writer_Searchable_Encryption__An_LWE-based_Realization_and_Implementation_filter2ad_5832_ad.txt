|. The difference is caused by the
identity. However, with the identity, our scheme no longer needs to
use the matrix as their public key, and only one fixed length string is
sufficient. Then all the users can share the same system parameters
and use them to perform the encryption and search operations with
their identities. The size of ciphertext in [6] is |ZκO(log n)×(2m+1)
|.
This is because their scheme uses a κ-bit message for encryption,
and the message is encrypted bit by bit, where the complexity of
ciphertext for each bit is O(log n) as indicated in [6]. We note that
the above treatment is not necessary in an PEKS scheme, where the
message can be a single bit ‘0’ or ’1’ to indicate matching after search.
Therefore, our scheme only encrypts a one-bit message during
keyword encryption. The token generation of these two schemes
adapts the same SampleLeft algorithm, and the only difference is
q |
the input. Note that it makes the token size different; ours is |Z2m
and theirs is |Z2m
q |.
In the aspect of computation, the complexity of encryption in
our scheme is O(n
3). As mentioned before, the scheme in [6] en-
crypts a κ-bit message and thus their computational complexity
reaches O(κO(log n)n
3). This also affects the efficiency of the search
algorithm. The computation cost of our Search algorithm without
q
q
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand127Table 2: Space Complexity Analysis
Scheme
[6]
Ours
Private-key Size
|Zm×m
q
|Zm×m
q
|
|
Ciphertext Size
|ZκO(log n)(2m+1)
q
|Z2m+1
q
|
|
Token Size
|Z2m
q |
|Z2m
q |
Table 3: Computation Complexity Analysis
Scheme
[6]
Ours
TokGen Comp
O(ρm)
O(ρm)
Search Comp
O(κO(log n)n3) O(κO(log n)n2)
Enc. Comp
O(n3)
O(n2)
token generation is O(n
2) which just needs one matrix-vector mul-
tiplication and one integer subtraction to encrypt one bit, while
it is O(κO(log n)n
2) for [6]. The computation complexity of the
token generation depends on the size of the input, and the complex-
ity of token generation in the two schemes is O(ρm) and O(ρm),
respectively.
6 SECURITY ANALYSIS
The security of the scheme relies on the assumption of LWE men-
tioned in Definition 4.6. Following the security game in Definition
3.3, for a given adversary A who can perform queries defined in the
security game, we show how to reduce the security of the scheme to
the LWE assumption. No adversary A can break our scheme with
non-negligible probability. Otherwise, there exists a challenger B
that can prove that the LWE assumption does not hold.
Before the security analysis, we introduce an artificial abort
function from [2].
Definition 6.1. [2] Let H := {h : X → Y} be a family of hash
functions form X to Y where 0 ∈ Y. For a set of qt + 1 inputs
x = (x0, . . . , xqt ), the non-abort probability of x is defined as
p(x) = Pr[h(x0) = 0 ∧ h(x1) (cid:44) 0 ∧ . . . h(xqt ) (cid:44) 0]
where the probability is over the random choice of h ∈ H. We say
that H is (qt , pmin, pmax) abort-resistant if p(x) ∈ [pmin, pmax] for
all x = (x0, x1, . . . , xqt ) with x0 (cid:60) {x1, . . . , xqt }.
q/{0k} → Zq} as hθ(w) = 1 +k
Following the work in [2], we introduce the hash family H :
i =1 θiwi ∈ Zq, where
q. It has the
{hθ : Zk
w = (w1, . . . , wk) ∈ {−1, 1}k and θ = (θ1, . . . , θk) ∈ Zk
following properties.
Lemma 6.2. [2] Let q be a prime and 0 ≤ qt ≤ q, then the hash
family H introduced above is (qt ,
q (1 − qt
q ),
1
q ) abort-resistant.
1
Theorem 6.3. Our searchable encryption scheme(q, n, m, m′, σ, α)
is IND-sTag-CKA secure assuming that the (Zq, n, Ψα)-LWE assump-
tion holds. For a probabilistic polynomial (qe , qt , ϵ) adversary A, if
she can win the game with advantage ϵ by making no more than qe
derive queries and qt token queries, then challenger B can solve the
(Zq, n, Ψα)-LWE problem as A with advantage ϵ′ ≥ ϵ/(4q) in the
same time.
Proof. To prove this theorem, we introduce a sequence of games
and show that no (t, qe , qt , ϵ)-adversary A can distinguish these
games.
Game0 is the real game described in definition 3.3.
q
q
q
× Zm×m
Game1 is identical to Game0 except invoking the TrapGen al-
gorithm to obtain (Aτ , S) ∈ Zn×m
and parsing Aτ =
A0∥A1∥ . . . ∥Al , where m = m + m′ and Ai ∈ Zn×m′′
for i ∈
{1, . . . , l}. For a selected identity tag τ∗ ∈ {0, 1}l , B sets Tτ ∗
= Ai
1−τ ∗
and Si by running TrapGen(q, n, m′′). After
and generates T
1
i
that, B executes the remaining algorithms as in Game0. In this case,
if there exists an adversary A who can distinguish Game0 and
Game1, then their exists an algorithm B can distinguish between
Ti and a truly random matrix from uniform distribution. Note that,
in the view of A, Ti for i = 1, . . . , l defined above are statistically
close to uniform distribution, and thus A cannot distinguish Ti
with that is chosen randomly in Zn×m′′
, i.e.
i
i
q
Pr[Game0(1λ) = 1] = Pr[Game1(1λ) = 1].
i
q
For the challenge keyword w, make Rw = k
Game2 is identical to Game1 except that set Mi = Aτ ∗ ·R∗
+θi ·B
rather than selecting it randomly from Zn×m
, where θi ∈ Zq and
i ∈ {−1, 1}m×m are randomly selected at the initialization phase.
R∗
i =1 wi R∗
and z =
(R∗
w)⊤ ∗y ∈ Zm
q to construct the challenge ciphertext. After that, B
executes the rest algorithms as Game0. In this case, if there exists
an adversary A who can distinguish Game1 and Game2, then
their exists an algorithm B can distinguish between Mi and a truly
random matrix from uniform distribution. Note that, in the view
of A, Mi for i = 1, . . . , k defined above are statistically close to
uniform distribution, and thus A cannot distinguish Mi from the
matrix chosen randomly in Zn×m
, i.e.
i
q
Pr[Game1(1λ) = 1] = Pr[Game2(1λ) = 1].
Game3. Game3 is the same as Game2 except that an artificial
abort event is deployed in the security game. In this case, the differ-
ence between Game3 and Game2 is reflected in the initialization
and final guess phase. On the one hand, in the initialization phase,
challenger B needs to choose a random hash function h ∈ H and
keeps it by herself. When she receives the private key on τ (cid:44) τ∗ and
from A, she responds to the queries
token queries on w1, . . . , wqt
and returns the challenge ciphertext as in Game2. Note that, the
challenge keyword here should not be in the query set. On the
other hand, for a given tag τ∗ and the selected keyword w∗, when
the adversary A outputs the final guess. B checks if h(w∗) = 0 and
h(wi) (cid:44) 0 for i = 1, . . . , qt . If not, B refreshes b′ with a random bit
from {0, 1} and aborts the game. In addition, B selects a random
bit β ∈ {0, 1} such that Pr[β = 1] = ψ(w∗, w1, . . . , wqt ) where
the function ψ(·) is defined in [36]. As all of these challenges are
independent from the perspective of A and the results in [2], we
have that
Pr[Game1(1λ) = 1] ≤ 1
4q
Pr[Game2(1λ) = 1].
q
Game4 is identical to Game3 except the selection of A0 and
B. Instead, B randomly chooses A0 from a uniform distribu-
tion on Zn×m
, and generates B and the corresponding basis SB
via the TrapGen algorithm. The remaining parameter settings
are the same as those in Game3. In this case, B responds to
the private key queries in the same way in Game3. While for
the token query w ∈ {−1, 1}k on a given tag τ, let Aτ ,w =
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand128(Aτ |B +k
Rw = k
i
and h(w) = 1 +k
i =1 wi Ai) = (Aτ |Aτ Rw + h(w)B), where Aτ = A0|Fτ ,
i =1 wi ∗ R∗
i =1 wiθi ∈ Zq. Then set
stw = SampleRight(A0, h(w)B, Rw , SB, u, σ) ∈ Z
as the to-
ken for query result. Note that, the obtained token stw is close to
the distribution DΛu
q(Aτ ,w) as in Game3. From the perspective of
A, as Games3 and Game4 have the same setting for private key
queries, data encryption, and abort conditions, and thus she cannot
distinguish them under the existing conditions, i.e.
2(m+m′)
q
Pr[Game3(1λ) = 1] = Pr[Game4(1λ) = 1].
1, . . . , T0
2(m+m′)
q
Game5. Game5 is the same as Game4 except that B selects
(C0, C1) ∈ Zq × Z
randomly as the challenge ciphertext.
In this case, A has no advantage to win the game because this
challenge ciphertext is always generated randomly from the cipher-
text space. Here, we show how to deploy a simulator to prove that
Game4 and Game5 are computationally indistinguishable to the
adversary.
Simulator. Assume that a (t, qe , qt , ϵ)-adversary A for our
scheme exists. From the adversary, we construct a challenger B
that solves LWE with probability at least ϵ′ and in polynomial time
for a target tag τ∗.
q × Zq
Setup. B samples the entries of LWE instance (ui , vi) ∈ Zn
randomly for i = 0, . . . , m, then makes the following assignment:
(1) Assemble Aτ ∗ by the last m samples above, i.e., let Aτ ∗ =
(u1, . . . , um).
1, T1
(2) Generate matrices A0, T0
as Game1. Con-
struct the remainder of the public parameters, namely
M1, . . . , Mk and B as Game3.
l , M1, . . . , Mk , B, u0) to A.
(3) Send sp = (A0, T0
1, . . . , T0
Phase 1.When adversary A asks the private key for a tag τ. B
-Derive Queries. Considering qe queries for the private key of a
(1) Generate F(τ) = (Tτ1
l ), then compute Aτ =
(A0|F(τ)). Since τ (cid:44) τ∗, without loss of generality, we as-
sume that the i-th bit of τ∗ and τ are different. As Tτi
is
i
generated by TrapGen algorithm, B knows the basis Sτi
for
i
Λ⊥
i ).
q (Tτi
(2) Respond to the private key query of τ by running skτ ←
RandBasis (ExtBasis(Sτi
(3) Finally, send the answer skτ to A.
-Token Queries. When A asks for the token of a keyword w
under the target identity tag τ∗, If h(w) = 0, abort the game and
output a random bit b′ ∈ {0, 1}. Otherwise, B answers the query
as follows:
answers the query as follows:
tag τ (cid:44) τ∗, B answers the query as follows:
1 | . . . |Tτl
i , Aτ )).
l , T1
l , T1
1, T1
l
q
q (B).
with a trap-
(1) Invoke TrapGen algorithm to obtain B ∈ Zn×m
(2) For 1 ≤ i ≤ k, choose R∗
· R∗