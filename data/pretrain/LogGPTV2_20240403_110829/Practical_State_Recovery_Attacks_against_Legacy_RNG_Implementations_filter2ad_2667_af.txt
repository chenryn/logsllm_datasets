Hellman Fails in Practice. In 22nd ACM Conference on Computer and Communica-
tions Security.
[7] Elaine Barker and Allen Roginsky. 2011. Transitions: Recommendation for
transitioning the use of cryptographic algorithms and key lengths. NIST Special
Publication 800 (2011), 131A.
[8] Elaine B Barker and John Michael Kelsey. 2007. Recommendation for random num-
ber generation using deterministic random bit generators (revised). US Department
of Commerce, Technology Administration, National Institute of Standards and
Technology, Computer Security Division, Information Technology Laboratory.
IETF RFC
[9] Mihir Bellare, Kenneth G. Paterson, and Phillip Rogaway. 2014. Security of
Symmetric Encryption against Mass Surveillance. Springer Berlin Heidelberg,
Berlin, Heidelberg. https://doi.org/10.1007/978-3-662-44371-2_1
[10] Daniel J Bernstein, Yun-An Chang, Chen-Mou Cheng, Li-Ping Chou, Nadia
Heninger, Tanja Lange, and Nicko Van Someren. 2013. Factoring RSA keys
from certified smart cards: Coppersmith in the wild. In International Conference
on the Theory and Application of Cryptology and Information Security. Springer,
341–360.
[11] Manuel Blum and Silvio Micali. 1984. How to Generate Cryptographically Strong
Sequences of Pseudo-random Bits. SIAM J. Comput. 13, 4 (Nov. 1984), 850–864.
https://doi.org/10.1137/0213053
[12] Fabrice Boudot. 2017. On Improving Integer Factorization and Discrete Logarithm
Computation using Partial Triangulation. Cryptology ePrint Archive, Report
2017/758. http://eprint.iacr.org/2017/758.
[13] Daniel RL Brown. 2006. Conjectured Security of the ANSI-NIST Elliptic Curve
[14] Ed. C. Kaufman. 2005.
RNG. IACR Cryptology ePrint Archive 2006 (2006), 117.
RFC4306.
Internet Key Exchange (IKEv2) Protocol.
[15] Stephen Checkoway, Matthew Fredrikson, Ruben Niederhagen, Adam Ev-
erspaugh, Matthew Green, Tanja Lange, Thomas Ristenpart, Daniel J. Bernstein,
Jake Maskiewicz, and Hovav Shacham. 2014. On the Practical Exploitability of
Dual EC in TLS Implementations. In Proceedings of the 23rd USENIX Conference on
Security Symposium (SEC’14). USENIX Association, Berkeley, CA, USA, 319–335.
http://dl.acm.org/citation.cfm?id=2671225.2671246
[16] Stephen Checkoway, Jacob Maskiewicz, Christina Garman, Joshua Fried, Shaanan
Cohney, Matthew Green, Nadia Heninger, Ralf-Philipp Weinmann, Eric Rescorla,
and Hovav Shacham. 2016. A systematic analysis of the Juniper Dual EC in-
cident. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 468–479.
[17] M. Schneider D. Maughan, M. Schertler and J. Turner. 1998. Internet Security
Association and Key Management Protocol. IETF RFC RFC2408.
[18] Jean Paul Degabriele, Kenneth G. Paterson, Jacob C. N. Schuldt, and Joanne
Woodage. 2016. Backdoors in Pseudorandom Number Generators: Possibility
and Impossibility Results. In Advances in Cryptology – CRYPTO 2016, Matthew
Robshaw and Jonathan Katz (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg,
403–432.
[19] Yevgeniy Dodis, Chaya Ganesh, Alexander Golovnev, Ari Juels, and Thomas
Ristenpart. 2015. A Formal Treatment of Backdoored Pseudorandom Generators.
Springer Berlin Heidelberg, Berlin, Heidelberg, 101–126. https://doi.org/10.1007/
978-3-662-46800-5_5
[20] Yevgeniy Dodis, David Pointcheval, Sylvain Ruhault, Damien Vergniaud, and
Daniel Wichs. 2013. Security analysis of pseudo-random number generators
with input: /dev/random is not robust. In Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security. ACM, 647–658.
[21] Yevgeniy Dodis, Adi Shamir, Noah Stephens-Davidowitz, and Daniel Wichs. 2014.
How to Eat Your Entropy and Have It Too – Optimal Recovery Strategies for
Compromised RNGs. In CRYPTO ’14.
[22] Leo Dorrendorf, Zvi Gutterman, and Benny Pinkas. 2009. Cryptanalysis of the
random number generator of the Windows operating system. ACM Transactions
on Information and System Security (TISSEC) 13, 1 (2009), 10.
[23] Digital Signature Standard (DSS). 2013. Generation of Probable Primes with
Conditions Based on Auxiliary Probable Primes. http://nvlpubs.nist.gov/nistpubs/
FIPS/NIST.FIPS.186-4.pdf.
[24] Fortinet. [n. d.]. FG-IR-16-067: FortiOS local privilege escalation via malicious
use of USB storage devices. http://fortiguard.com/psirt/FG-IR-16-067.
[25] Fortinet. [n. d.]. FG-IR-17-245: DUHK Attack against Fortinet Products. https:
//fortiguard.com/psirt/FG-IR-17-245.
[26] Fortinet. 2016.
Brief Statement Regarding Issues Found with For-
tiOS. https://web.archive.org/web/20160125202411/http://blog.fortinet.com:80/
post/brief-statement-regarding-issues-found-with-fortios.
[27] John Franks, Phillip M. Hallam-Baker, Jeffery L. Hostetler, Scott D. Lawrence,
Paul J. Leach, Ari Luotonen, and Lawrence C. Stewart. 1999. HTTP Authentication:
Basic and Digest Access Authentication. RFC 2617. RFC Editor. http://www.
rfc-editor.org/rfc/rfc2617.txt http://www.rfc-editor.org/rfc/rfc2617.txt.
Group claims to hack NSA-tied hackers, posts ex-
https://arstechnica.com/information-technology/2016/08/
ploits as proof.
group-claims-to-hack-nsa-tied-hackers-posts-exploits-as-proof/
[28] Dan Goodin. 2016.
[29] Matthew Green. 2016.
primer.
random-number-generation-illustrated/
Random number generation: An illustrated
https://blog.cryptographyengineering.com/2012/02/21/
[30] Zvi Gutterman, Benny Pinkas, and Tzachy Reinman. 2006. Analysis of the Linux
random number generator. In IEEE Symposium on Security and Privacy. IEEE
Press.
[31] D. Harkins and D. Carrel. 1998. The Internet Key Exchange (IKE). IETF RFC
RFC2409.
[32] Marcella Hastings, Joshua Fried, and Nadia Heninger. 2016. Weak keys remain
widespread in network devices. In Proceedings of the 2016 Internet Measurement
Conference. ACM.
[33] Marcella Hastings, Joshua Fried, and Nadia Heninger. 2016. Weak keys remain
widespread in network devices. In Proceedings of the 2016 ACM on Internet Mea-
surement Conference. ACM, 49–63.
[34] Nadia Heninger, Zakir Durumeric, Eric Wustrow, and J Alex Halderman. 2012.
Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices.
In USENIX Security Symposium.
[35] William Herlands, Thomas Hobson, and Paula Donovan. 2014. Effective Entropy
for Memory Randomization Defenses. In USENIX 7th Workshop on Cyber Security
Experimentation and Test. Lincoln Labratory.
[36] Dan Shumow Joanne Woodage. 2018. An Analysis of the NIST SP 800-90A
Standard.
[37] Juniper Networks, Inc. [n. d.].
FIPS 140-2 SECURITY POLICY - SSG
140. https://www.juniper.net/documentation/hardware/netscreen-certifications/
Security_Policy_SSG-140_ScreenOS_6_2.pdf.
[38] George Kadianakis, Claudia V Roberts, Laura M Roberts, and Philipp Winter. [n.
d.]. “Major key alert!” Anomalous keys in Tor relays. ([n. d.]).
[39] Sharon S. Keller. 2005. NIST-Recommended Random Number Generator Based
on ANSI X9.31 Appendix A.2.4 Using the 3-Key Triple DES and AES Algorithms.
National Institute of Standards and Technology.
[40] John Kelsey, Bruce Schneier, and Neils Ferguson. 1999. Notes on the Design and
Analysis of the Yarrow Cryptographic Pseudorandom Number Generator. In SAC
’99.
[41] John Kelsey, Bruce Schneier, David Wagner, and Chris Hall. 1998. Cryptana-
lytic attacks on pseudorandom number generators. In Fast Software Encryption.
Springer, 168–188.
[42] Alex Klyubin. 2013. Some SecureRandom Thoughts. https://android-developers.
googleblog.com/2013/08/some-securerandom-thoughts.html.
[43] Sharon S. Keller Lawrence E. Bassham III. 2005. The Random Number Generator
Validation System (RNGVS). National Institute of Standards and Technology.
[44] Arjen Lenstra, James P Hughes, Maxime Augier, Joppe Willem Bos, Thorsten
Kleinjung, and Christophe Wachter. 2012. Public Keys. In Proceedings of the
32nd Annual Cryptology Conference on Advances in Cryptology — CRYPTO 2012 -
Volume 7417. 626–642.
[45] Steve Marquess. 2013. Flaw in Dual EC DRBG (no, not that one). http://marc.
info/?l=openssl-announce&m=138747119822324&w=2.
[46] Kai Michaelis, Christopher Meyer, and Jörg Schwenk. 2013. Randomly Failed!
The State of Randomness in Current Java Implementations.. In CT-RSA, Vol. 7779.
Springer, 129–144.
[47] Stephan Müller. [n. d.]. Linux Random Number Generator — A New Approach.
Available at http://www.chronox.de/lrng/doc/lrng.html.
[48] Phong Q Nguyen and Igor E Shparlinski. 2003. The insecurity of the Elliptic
curve Digital Signature Algorithm with partially known nonces. Designs, codes
and cryptography 30, 2 (2003), 201–217.
[49] NIST. [n. d.]. Automated Cryptographic Validation Testing. https://csrc.nist.gov/
Projects/Automated-Cryptographic-Validation-Testing.
[50] NIST. 2001. SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES.
http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.140-2.pdf.
[51] NIST. 2017. CMVP Historical Validation List. http://web.archive.org/web/
20170120035228/http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/
140val-historical.htm.
[52] Nicole Perlroth. 2013. Government Announces Steps to Restore Confidence on
Encryption Standards. Available at https://bits.blogs.nytimes.com/2013/09/10/
government-announces-steps-to-restore-confidence-on-encryption-standards/
?_r=1. The New York Times (2013).
[53] Thomas Ristenpart and Scott Yilek. 2010. When Good Randomness Goes Bad:
Virtual Machine Reset Vulnerabilities and Hedging Deployed Cryptography. In
NDSS ’10.
ators. In IACR Transactions on Symmetric Cryptography (TOSC), Vol. 1.
the NIST SP800-90 Dual EC PRNG. http://rump2007.cr.yp.to/15-shumow.pdf
[55] Dan Shumow and Niels Ferguson. [n. d.]. On the possibility of a Back Door in
[54] Sylvain Ruhault. 2017. SoK: Security Models for Pseudo-Random Number Gener-
[56] Falko Strenzke. 2016. An Analysis of OpenSSL’s Random Number Generator. In
EUROCRYPT ’16. Springer-Verlag New York, Inc., New York, NY, USA, 644–669.
https://doi.org/10.1007/978-3-662-49890-3_25
[57] Wladimir J van der Laan. 2016. TADAQUEOUS moments. http://laanwj.github.
io/2016/09/01/tadaqueos.html
[58] Scott Yilek, Eric Rescorla, Hovav Shacham, Brandon Enright, and Stefan Savage.
2009. When Private Keys are Public: Results From the 2008 Debian OpenSSL
Vulnerability. In Proceedings of IMC 2009, Anja Feldmann and Laurent Mathy
(Eds.). ACM Press, 15–27.
[59] Adam Young and Moti Yung. 1997. Kleptography: Using cryptography against
cryptography. In Eurocrypt, Vol. 97. Springer, 62–74.
[60] Adam Young and Moti Yung. 1997. The prevalence of kleptographic attacks on
discrete-log based cryptosystems. In Annual International Cryptology Conference.
Springer, 264–276.
[61] zzz intro to the vpn 2010. Intro to the VPN Exploitation Process. Media leak.
http://www.spiegel.de/media/media-35515.pdf.
A FORTIOS V4 X9.31 INITIALIZATION
ROUTINE
B SUPPORTED CIPHER SUITES IN
FORTIOSV4
Listing 1: The X9.31 Initialization Routine.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
int initialize_X931()
{
char rng_state[16];
char timestamp_buffer[16];
int aes_key[4];
int result = key_set;
aes_key[0] = 0x6D66B1F3;
aes_key[1] = 0x42726013;
aes_key[2] = 0xAB1C06ED;
aes_key[3] = 0x0262D4B8;
if ( !key_set )
result = set_aeskey(aes_key);
if ( !state_set )
{
/* initial state setting removed for
clarity */
save_state(rng_state);
fill_timestamp(timestamp_buffer);
result =
x931(&timestamp_buffer, output_buffer,
rng_state, 16);
}
return result;
}
Our hardware device supported the following cipher suites. Our
scanning client used in Section 5 offered all of these cipher suites.
Table 5: Supported TLS Cipher Suites in FortiOS v4
tls_dhe_rsa_with_aes_256_cbc_sha
tls_dhe_rsa_with_camellia_256_cbc_sha
tls_rsa_with_aes_256_cbc_sha
tls_rsa_with_camellia_256_cbc_sha
tls_rsa_with_3des_ede_cbc_sha
tls_dhe_rsa_with_aes_128_cbc_sha
tls_dhe_rsa_with_seed_cbc_sha
tls_dhe_rsa_with_camellia_128_cbc_sha
tls_rsa_with_aes_128_cbc_sha
tls_rsa_with_seed_cbc_sha
tls_rsa_with_camellia_128_cbc_sha
tls_rsa_with_rc4_128_sha
tls_rsa_with_rc4_128_md5
Table 6: Supported IKEv1 Parameters in FortiOS v4
Cipher
des
3des
aes-128
aes-192
aes-256
PRF
md5
sha1
sha256
Group
dh_768
dh_1024
dh_1536
Authentication
psk
rsa
Table 7: Supported IKEv2 Parameters in FortiOS v4
Cipher
des
3des
aes-128
aes-192
aes-256
PRF
sha256
sha1
md5
MAC
sha256
sha1
md5
Group
dh_768
dh_1024
dh_1536
dh_2048