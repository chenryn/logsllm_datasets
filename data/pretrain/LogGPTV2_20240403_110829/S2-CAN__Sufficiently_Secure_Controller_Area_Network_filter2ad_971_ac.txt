an integrity and freshness check: (1) The extracted counter cntj
is compared with the expected counter for the respective sender.
If the two values match, the local counter for sender ECUj on
the receiver is incremented, and (2) the internal ID of the sender
int_IDj is compared with the stored internal ID for the respective
sender on the receiver ECU. Only if these two checks do not fail, the
receiver can assume that the message came from a legitimate sender
ECUj and start processing the data in the payload. Otherwise, it
may either suspect a replay attack or a message with fabricated
information from a malicious ECU and drop the CAN message.
The operation mode with the respective encoding and integrity
parameters ends once a new handshake has been completed. A new
session Si +1 begins. The operation mode does not get interrupted
by the start of a new handshake to guarantee functionality and
safety.
Finally, we discuss what happens in the case of packet drops that
can happen naturally on the CAN bus. Since each CAN message
has a counter to prevent replay attacks and the receiver expects the
next message with an incremented counter value, a packet drop can
lead to inconsistencies with the local state counter on the receiver
side. In order to account for packet drops, the receiver ECU will
still accept CAN messages with counter values higher than the
previous message within a specific threshold. The latter depends on
the packet loss rate on the CAN bus which is usually very robust.
The authors of [46] suggested to setting this threshold to 1.
6 FINDING FREE SPACE
To gain a better understanding of how many signals are used in
a CAN ID and thus how much of free space (FS) is available to
include our integrity parameters int_IDj and cntj, we analyzed the
DBC files of four passenger vehicles from a North American OEM
under NDA (see Sec. 8.1). Since we include a 2-byte parameter qj
into the CAN payload, only a maximum of 6 bytes may be used for
data. Among all CAN IDs in each DBC, we identified certain low-
priority non-operation-related CAN IDs that do not occur during
regular operation of the vehicle. Hence, we manually removed these
irrelevant CAN IDs for our purposes and analyzed the remaining
operation-related CAN IDs for available unused space.
Figure 3: CDF of used bits
A Cumulative Distribution Function (CDF) for each vehicle is
plotted in Fig. 3. The vertical marker indicates that all vehicles —
with the exception of Vehicle B — contain between 60% and 80%
CAN IDs that have at least 16 bits of free space. As a result, we
can apply S2-CAN for the majority of CAN IDs, but would like to
analyze how to further improve this metric to maximize the number
of usable CAN IDs. Note that we are referring to the free space in
the CAN payload/data field and not the CAN ID field (see Fig. 1).
OEMs could re-balance the disparity of available space in a CAN
message with a more careful design of the CAN communication
matrix while still considering functional requirements. In what
follows, we present a possible re-balancing approach. CAN mes-
sages are differentiated by four types: fixed-periodic, event-periodic,
event-on-change and network management. First, we grouped CAN
IDs based on the sender ECU. As mentioned before, a sender can
transmit multiple CAN IDs with different cycle times if the CAN
ID is fixed-periodic or event-periodic. The latter message type is
similar to fixed-periodic except a CAN message is not necessar-
ily transmitted at every cycle time. Both message types cannot be
grouped together.
0102030405060Used Bits0.00.20.40.60.81.0CDFVehicle A HS1Vehicle A HS2Vehicle B HSVehicle B MSVehicle C HS1Vehicle C HS2Vehicle D HS1Vehicle D HS2431ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
Table 2: Free space in DBCs
Veh.
Bus
#IDs
#Rebalan-
cable IDs
#IDs
with FS
Veh.A HS1
HS2
Veh.B HS
MS
Veh.C HS1
HS2
Veh.D HS1
HS2
102
53
81
62
57
42
58
51
31
2
5
3
7
1
7
4
63
35
26
16
38
26
43
38
Usable
CAN
IDs (%)
92.2
69.8
38.3
30.6
78.9
64.3
86.2
82.4
As an example, Fig. 4 depicts the number of used bits of fixed-
periodic CAN messages with exactly the same cycle time that a
sender ECU transmits on HS1-CAN (high-speed CAN 1) of Vehicle
A. Points above the red threshold line of 48 bits depict CAN IDs that
do not have sufficient free space for S2-CAN. Since all vertical dots
are grouped by sender ECU and cycle time, they can be re-balanced
by packing signals of their mean value per CAN ID (depicted with
marker x). For Veh. A HS1, there are a total of 101 fixed-periodic
CAN IDs. A mean value below 48 bits indicates that the CAN IDs in
the group can be re-balanced. 27 CAN IDs can be re-balanced this
way, besides those already under this threshold. We repeated this
experiment for all other vehicles and buses for both fixed-periodic
and event-periodic messages and summarized the number of re-
balancable and existing CAN IDs with free space in Table 2. The
sum of these two yields the number of usable CAN IDs for S2-CAN.
With the exception of Veh. B, around 79–92% of all CAN IDs can
be used with S2-CAN for the more safety-critical HS1-CAN. The
remaining non-periodic CAN IDs can be re-balanced further by
OEMs based on functionality — something that we cannot interpret.
Figure 4: Re-balancing Vehicle A HS1
Finally, no relationship between message priority and free space
can be derived. This analysis is depicted in Fig. 6 (in Appendix B).
7 EVALUATION
7.1 Experimental Setup
We have built a prototype with three CAN nodes, each of which
consists of an Arduino Mega 2560 board and a SeeedStudio CAN
shield [47]. This prototype was set up to operate at a 500 kBit/s baud
rate as in a typical high-speed safety-critical CAN bus. Note that
the entire evaluation is based on a simple scenario with the sender
ECU transmitting only one CAN message. In reality, multiple CAN
messages will be broadcast on the CAN bus in a relatively short time
and CAN scheduling will pick the highest-priority CAN message to
be broadcast first. This will inherently lead to blocking time tb for
lower-priority messages which depends on the number of higher-
priority messages that have to be transmitted first. Nevertheless,
using a simpler setup does not affect our evaluation metrics except
the operation latency which is discussed in Sec. 7.3.
Since we want to compare the performance of S2-CAN with prior
work, we implemented existing CAN bus encryption methods from
Sec. 4.2 with vatiCAN [33] for authentication. We chose vatiCAN
among various existing SW-only CAN authentication approaches
due to its decent performance for both latency and bus load, as well
as existing and well-documented Arduino implementation.
7.2 Handshake Latency
We measured the time it took to complete a handshake while vary-
ing the number of slave ECUs in a CAN domain. As outlined in
Sec. 5.2, the handshake process is repeated every T . The old session
still continues with the existing parameters until the handshake is
completed. As a result, no critical message exchange during the op-
eration mode of the previous session is interrupted. The handshake
of the new session will be executed in parallel with the operation
of the previous session. The only critical time when the handshake
latency can affect operations of the car is during the initial start-up
of the car since a session S0 of S2-CAN cannot start until the initial
handshake has been completed. We simulated a varying number of
slave ECUs by having our two prototype ECUs take turns to send
ACK of the handshake, in a ping-pong manner. We surveyed the
DBCs of four vehicles (see Sec. 8.1) to find that each CAN bus has
9–23 different ECUs. So, we consider a maximum of 25 slave ECUs
in our simulation. For two slave ECUs, the average total handshake
time stands at 303ms, for five at 529ms, for ten at 907ms and for the
maximum number of 25 slave ECUs, we achieve around 2 seconds
of handshake latency ths, i.e., the car starts talking S2-CAN after 2s
when it is powered on. Our calculations also show that each addi-
tional slave ECU on the bus will add an average of 75.5ms towards
the latency. Furthermore, the handshake process will be started at
P · T − ths − Q · tb before the current session expires to provide a
smooth transition to the next session. P denotes the session number
and Q the average number of higher-priority CAN messages that
can be expected to cause the blocking of handshake messages.
7.3 Operation Latency
CAN messages have stringent deadlines, i.e., when they must arrive
at the receiver. Although the authors of [16] suggest deadlines of
cyclic safety-critical CAN messages standing at 2.5–10ms, this is
outdated. Modern HS-CAN buses have minimum cycle times (and
0510152025Sender ECUs with Fixed Periodic CAN IDs0102030405060# Used Bits432S2-CAN: Sufficiently Secure Controller Area Network
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
thus deadlines) of 10ms, as our manual inspection of the four DBCs
also confirmed. Latency measurements are averaged from a sample
of 1000 messages sent over 100 seconds, or one message every
100ms. We were interested in calculating the E2E latency tE2E for
(1) Regular CAN with vatiCAN authentication ("NONE"),
(2) 3DES, TEA, XOR, AES-128 and AES-256 encrypted CAN
with vatiCAN authentication,
(3) and finally S2-CAN.
In the first case, E2E latency consists of processing delays of the
sender and receiver, the time to calculate the MAC on the sender and
check the MAC on the receiver, as well as the CAN bus network
latency. In the second case, encryption/decryption latencies are
added on the respective sides. S2-CAN uses the latter calculation
methodology as well, while the MAC and encryption/decryption
latencies are replaced by the delay to calculate/check the internal
ID and counter, and encode/decode through Circular Shift (CS).
Figure 5: E2E latency for different "encryption" algorithms
Fig. 5 depicts the breakdown of the E2E latency for all three
aforementioned cases. Furthermore, the dotted horizontal line in-
dicates the aforementioned deadline of 10ms. It can be easily seen
that the encryption/decryption of 3DES takes much longer on Ar-
duinos than other encryption algorithms that can still satisfy the
10ms deadline. Tiny Encryption Algorithm (TEA) and XOR seem
to satisfy it although they are not considered secure [7, 26] and
are thus not recommended to be used in production. Furthermore,
in all experiments, we did not include any additional traffic, so
that the reported E2E latencies assume no blocking time due to
higher-priority CAN messages and can be considered a lower bound.
Hence, even AES-128 and AES-256 are likely to miss the 10ms dead-
line if they lose the CAN arbitration to a message with lower ID.
S2-CAN with tE2E = 414µs satisfies both deadlines and only adds
an overhead of 75µs to the E2E latency of a regular CAN message
(i.e., no encryption or authentication).
Latency numbers for MAC operations by vatiCAN are lower
in Fig. 5 than the reported 3.3ms from Table 1. We used a sponge
capacity of c = 8 instead of the original, more secure c = 128 to
provide a lower bound for vatiCAN’s latency overhead.
Table 3: Benchmark of other metrics
AES128 None
AES256 None
Encr.
None
3DES
TEA
XOR
S2
Auth.
BL
(%)
0.25
None
VatiCAN 0.5
0.5
VatiCAN 1
0.5
VatiCAN 1
None
0.25
VatiCAN 0.5
None
0.25
VatiCAN 0.5
None
0.25
VatiCAN 0.5
S2 Auth
0.25
CPUo (%)
S / R
0/0
86.7/82.3
0.8/2.0
87.0/82.8
1.0/2.5
87.0/82.9
52.8/53.5
93.8/90.8
0.5/0.5
86.8/82.4
0.01/0.01
86.7/82.3
0.04/0.03
RAM(kB)
S / R
1.24/1.29
1.57/1.66
1.25/1.30
1.60/1.67
1.27/1.31
1.61/1.69
1.26/1.31
1.60/1.69
1.27/1.32
1.60/1.69
1.25/1.30
1.57/1.67
1.25/1.30
Flash(kB)
S / R
10.1/11.96
17.25/17.07
10.30/12.02
17.35/17.13
10.31/12.04
17.37/17.15
12.27/14.22
19.38/19.33
10.55/12.50
17.78/17.61
10.16/12.05
17.31/17.17
10.24/12.10

7.4 Other Metrics
Besides the E2E latency, we measured bus load, CPU overhead,
and memory usage of each encryption method with and without
vatiCAN authentication. The results are summarized in Table 3. The
metrics are calculated for messages exchanged during Operation
Mode, unless noted otherwise.
Bus Load. The bus load (BL) b is calculated as follows [2]:
1
pm
,
sf r ame
fbaud
b =
m∈M
(4)
where we used fbaud = 500 kBit/s as baud rate on the CAN bus,
and pm is the period/cycle time of message m, and assuming each
CAN frame uses 125 bits, sf r ame = 125. With regular CAN (no
encryption and authentication), we send one message every pm.
AES has a block size of 16 bytes and the maximum size of the
payload is 8 bytes. Thus, we send two consecutive messages, each
with a period of pm. With vatiCAN authentication, an additional
MAC is sent after each message, effectively doubling the bus load.
Table 3 shows that only S2-CAN does not add any overhead to
the bus load of regular CAN during operation mode, but provides
protections against both confidentiality and integrity. Note that the
bus load does increase during each handshake due to additional
2(N + 2) exchanged messages. Nevertheless, the handshake adds
an overhead of merely 2.5% to the bus load.
CPU Usage. CPU overhead (CPUo) cy of ECUy is calculated by
measuring how many idle cycles pass per message. We establish
regular CAN to be the baseline, then calculate overhead cy for
y ∈ {Sender , Receiver} as follows:
cy = 1 − cyclesidle
cyclesbaseline
.
(5)
We see in Table 3 that vatiCAN authentication accounts for the
largest CPU overhead. (with the exception of 3DES). The CPU
utilization on each ECU almost doubles. With S2-CAN, we have a
negligible CPU overhead that demonstrates the lightness of our
approach on computational resources.
107.5108.0108.5Encryption LatencySender LatencyNetwork LatencyCalculating MAC LatencyChecking MAC LatencyDecryption LatencyReceiver Latency535455Latency (ms)NONE3DESTEAXORS2AES128AES256Encryption Algorithm0510433ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
Memory Consumption. Finally, Flash and RAM usage are re-
ported when our code compiles to the Arduinos. No dynamic mem-