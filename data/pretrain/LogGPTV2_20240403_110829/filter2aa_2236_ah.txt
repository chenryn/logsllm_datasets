from collections import namedtuple
from Crypto.Util.number import long_to_bytes, inverse 
from Crypto.Cipher import AES
from hashlib import sha256
import fuckpy3
def add_points(P, Q):
    return ((P[0]*Q[0]-P[1]*Q[1]) % p, (P[0]*Q[1]+P[1]*Q[0]) % p)
def multiply(P, n):
    Q = (1, 0)
    while n > 0:
        if n % 2 == 1:
            Q = add_points(Q, P)
        P = add_points(P, P)
        n = n//2
    return Q
a = 
68279847973010227567437241690876400434176575735647388141445319082120661**2+365
21392659318312718307506287199839545959127964141955928297920414981390**2 - 1
b = 
84698630137710906531637499064120297563999383201108850561060383338482806**2+109
75400339031190591877824767290004140780471215800442883565278903964109**2 - 1
elgaml_rsa
secret.py secretn0rsa
g = 
29223879291878505213325643878338189297997503744039619988987863719655098**2+321
88620669315455017576071518169599806490004123869726364682284676721556**2 - 1
p = gcd(gcd(a,b),g)
g = (29223879291878505213325643878338189297997503744039619988987863719655098,
 32188620669315455017576071518169599806490004123869726364682284676721556)
A = (68279847973010227567437241690876400434176575735647388141445319082120661, 
36521392659318312718307506287199839545959127964141955928297920414981390)
B = (84698630137710906531637499064120297563999383201108850561060383338482806, 
10975400339031190591877824767290004140780471215800442883565278903964109)
c = 
'26b1b05962d188f1f2abdfad2cef049d45cfc27d9e46f40ebe52e367941bcfa05dd0ef698f528
375be2185759e663431'
# http://citeseerx.ist.psu.edu/viewdoc/download?
doi=10.1.1.66.8688&rep=rep1&type=pdf
F = GF(p)
R. = PolynomialRing(F)
K. = F.extension(w^2 + 1)
g_K = g[0] + g[1]*w
B_K = B[0] + B[1]*w
b = discrete_log(B_K, g_K)
print(b)
assert multiply(g, b) == B
shared = multiply(A, b)[0]
key = sha256(long_to_bytes(shared)).digest()
aes = AES.new(key, AES.MODE_ECB)
print(aes.decrypt(c.unhex()))
#!/usr/bin/env python
# coding=utf-8
from Crypto.Util.number import *
from gmpy2 import iroot, gcd
da Vinci after rsa
RSA
:
secret = 
329380824451982777596468080979390700896875051159309053251427777390225223390054
462862874890632092714850180031743329031313028975903871751004003831036860000454
098274963081490031808010876171935539110201531253322208564941373067673598629247
111527738724700328114569409692796434368030258427126193825227856160081569366870
307559297674909108870298864572520476006338972072593434914773857347865349086098
662711283463352902488164071184362082990162654586995346553108747183805073294471
613391819978413596510467204977114038549473397779377039088475929677184284430986
636686769839308217865627271293739711926018699557041530631349486791876338842184
994986024157099233298972714917732995013317087756483
e = 0x1296
c = 
255310806360822158306697936064463902328816816156848194779397173946813224291656
351345682266227949792774097276485816149202739762582969208376195999403112665514
848825884325279574067341653685838880693150001066940379902609411551128810484902
428845412055387955258568610350610226605230048821754213270699317153844590496606
931431733319116866235538921198147193538906156906954406577796507390570080177313
707462469835954564824944706687157852157673146976402325057144745208116022973614
795377968986322754779469798013426261911408914756488145211933799442123449261969
392169406969410065018032795960230701484816708147958190769470879211953704222809
883281592308316942052671516609231501663363123562942
phi = 
169512351679770171618675249864345640767421538150090035559977983038045344868762
320371403387799131619484135084298332855527355791901792805109978367711556345880
0531098545736044991078
print(gcd(e,phi))
d = inverse(e//2,phi)
n0 = pow(653551912583,15)
assert secret%n0==0
c = pow(c%n0,d,n0)
print(iroot(c,2))
print(long_to_bytes(2359087442779294192755063232279316350495409317591379421761
63750119983954556089554596660))
publickey=
[0x1d42aea2879f2e44dea5a13ae3465277b06749ce9059fd8b7b4b560cd861f99144d0775ffff
ffffffff,5]
c=4213630151749813091037865206266038074279159735164278363197270733787909749864
29057810159449046489151
RSAnephi(n)
[1,28657,2,1,3,17711,5,8,13,21,46368,75025,34,55,89,610,377,144,233,1597,2584,
4181,6765,10946,987]
n = 
0x1d42aea2879f2e44dea5a13ae3465277b06749ce9059fd8b7b4b560cd861f99144d0775fffff
fffffff
c = 
421363015174981309103786520626603807427915973516427836319727073378790974986429
057810159449046489151
p = 9749
q = 11237753507624591
r = n / p / q
e = 5
def GCRT(mi, ai):
    assert (isinstance(mi, list) and isinstance(ai, list))
    curm, cura = mi[0], ai[0]
    for (m, a) in zip(mi[1:], ai[1:]):
        d = gcd(curm, m)
        c = a - cura
        assert (c % d == 0)  
        K = c / d * gmpy2.invert(curm / d, m / d)
        cura += curm * K
        curm = curm * m / d
    return (cura % curm, curm)  
# p1 ^ e = c % p (mod p)
# https://www.wolframalpha.com/input/?i=x%5E5+%3D+9079+%28mod+9749%29
p1 = [7361
q1 = [2722510300825886, 6139772527803903, 6537111956662153, 8415400986072042, 
9898464751509789]
r1 = 
[180966415225632465120208272366108475667934082405238808958048294287011243645,
281611441149332825868287335789398900768449655220282330604577136320518514867439
1,
136913525989179329233434575177313938811237813292736377063173250024163099045866
7,
557087786258406311441741058464090158075617970704277451659056282293838581126959
7,
849905240758807800288593176516613730839707423236108768297444863394635053929222
2]
m_list = []
rsa
ezAES
paddingblockkeyiv
for p2 in p1:
    for q2 in q1:
        for r2 in r1:
            res = GCRT([p, q, r], [p1, q1, r1])[0]
            if pow(res, e, n) == c:
                print long_to_bytes(res)
a = [1, 28657, 2, 1, 3, 17711, 5, 8, 13, 21, 46368, 75025, 34, 55, 89, 610, 
377, 144, 233, 1597, 2584, 4181, 6765,
     10946, 987]
b = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 
2584, 4181, 6765, 10946, 17711, 28657, 46368,
     75025]
s = "weadfa9987_adwd23123_454f"
d = ""
for i in a:
    d += s[b.index(i)]
    b[b.index(i)] = -1
print d
from Crypto.Cipher import AES
import binascii, sys
import hashlib
import fuckpy3
import string
table = string.digits+string.ascii_letters
table = table.encode()
key = b'T0EyZaLRzQmNe2pd'
KEYSIZE = len(key)
assert(KEYSIZE==16)
def fixed_xor(s1, s2):
    m1, m2 = s1.unhex(), s2.unhex()
    return bytes([i^j for i,j in zip(m1, m2)])
def pad(message):
    p = bytes((KEYSIZE - len(message) % KEYSIZE) * chr(KEYSIZE - len(message) 
% KEYSIZE),encoding='utf-8')
    return message + p
def encrypt(message,passphrase,iv):
    aes = AES.new(passphrase, AES.MODE_CBC, iv)
    return aes.encrypt(message)
h = hashlib.md5(key).hexdigest()
SECRET = binascii.unhexlify(h)[:10]
# with open('flag','rb') as f:
#   IV = f.read().strip(b'gactf{').strip(b'}')  
message = b'AES CBC Mode is commonly used in data encryption. What do you know 
about it?'+SECRET
message = pad(message)
# print("Encrypted data: ", binascii.hexlify(encrypt(pad(message),key,IV)))
c = 
b'a8**************************b1a923**************************011147**********
****************6e094e**************************cdb1c7**********a32c412a3e7474
e584cd72481dab9dd83141706925d92bdd39e4'
# a8**************************b1a9
# 23**************************0111
# 47**************************6e09
# 4eea629633f4d9589791ac584817cdb1
# c70b38bbd268a32c412a3e7474e584cd
# 72481dab9dd83141706925d92bdd39e4
# print(message[0:16])
# print(message[16:32])
# print(message[32:48])
# print(message[48:64])
# print(message[64:80])
# print(message[80:96])
# print(message[80:96].hex())
# for i in table:
#     for j in table:
#         aes = AES.new(b"T0EyZaLRzQmNe2"+bytes([i,j]), AES.MODE_ECB)
#         if 
len(set(fixed_xor(aes.decrypt('72481dab9dd83141706925d92bdd39e4'.unhex()).hex(
)[-20:], b"a32c412a3e7474e584cd")))==1:
#             print(bytes([i,j]), 
fixed_xor(aes.decrypt('72481dab9dd83141706925d92bdd39e4'.unhex()).hex()[-20:], 
b"a32c412a3e7474e584cd"))
#             break
aes = AES.new(key, AES.MODE_ECB)
what_r_the_noise
print(fixed_xor(aes.decrypt('72481dab9dd83141706925d92bdd39e4'.unhex()).hex(),
message[80:96].hex()).hex())
print(fixed_xor(aes.decrypt('c70b38bbd268a32c412a3e7474e584cd'.unhex()).hex(),
message[64:80].hex()).hex())
print(fixed_xor(aes.decrypt('4eea629633f4d9589791ac584817cdb1'.unhex()).hex(),
message[48:64].hex()).hex())
print(fixed_xor(aes.decrypt('4765763869a74c4d22538ad4489c6e09'.unhex()).hex(),
message[32:48].hex()).hex())
print(fixed_xor(aes.decrypt('233f21c19790307c1f0b551b29640111'.unhex()).hex(),
message[16:32].hex()).hex())
print(fixed_xor(aes.decrypt('a884ed307a7af7b003e81c46b928b1a9'.unhex()).hex(),
message[0:16].hex()))
from pwn import *
import fuckpy3
context(os='linux', arch='amd64', log_level='debug')
io = remote('124.71.145.165', 9999)
flag = [0]*47
for i in range(10000):
    io.sendlineafter(":","2")
    res = list(map(float, io.recvuntil("\n", drop=True).strip().split(b',')
[:-1]))
    print(res)
    for idx, val in enumerate(res):
        flag[idx] += val
    print(''.join(map(lambda x:chr(round(x/(i+1))), flag)))