man -a name
```
将在每一节中搜索由 `name` 标识的手册页，按数字顺序逐一显示。要把搜索限制在一个特定的部分，请在 `man` 命令中使用一个参数，像这样：
```
man 1 name
```
这个命令将只在手册页的第 1 节中搜索 `name`。使用我们前面的 `passwd` 例子，这意味着我们可以保持搜索的针对性。如果我想阅读 `passwd` 命令的手册页，我可以在终端输入以下内容：
```
man 1 passwd
```
`man` 工具将只在第 1 节中搜索 `passwd` 并显示它。它不会在任何其他节中寻找 `passwd`。
这个命令的另一种方法是输入: `man passwd.1`。
### 使用 man -k 来搜索包含某个关键词的所有手册页
如果你想获得包含某个关键词的手册页的列表，`man` 命令中的 `-k` 选项（通常称为标志或开关）可以派上用场。例如，如果你想看一个关于 `ftp` 的手册列表，你可以通过输入以下内容得到这个列表：
```
man -k ftp
```
在接下来的列表中，你可以选择一个特定的手册页来阅读：
![man k example](/data/attachment/album/202106/12/161814dyayfwfzegff6e4s.png)
在某些系统上，在 `man -k` 工作之前，系统管理员需要运行一个叫做 `catman` 的工具。
### 使用 whatis 和 whereis 命令来了解手册的各个节
有两个有趣的工具可以帮助你搜索信息：`whatis`和 `whereis`。
#### whatis
有的时候，我们完全可以得到我们需要的信息。我们需要的信息有很大的机会是可以找到的 —— 找到它可能是一个小问题。
例如，如果我想看关于 `passwd` 文件的手册页，我在终端上输入：
```
man passwd
```
我就会看到关于 `passwd` 命令所有信息的手册页，但没有关于 `passwd` 文件的内容。我知道 `passwd` 是一个命令，也有一个 `passwd` 文件，但有时，我可能会忘记这一点。这时我才意识到，文件结构在手册页中的不同节，所以我输入了：
```
man 4 passwd
```
我得到这样的答复：
```
No manual entry for passwd in section 4
See 'man 7 undocumented' for help when manual pages are not available.
```
又是一次健忘的失误。文件结构在 System V UNIX 页面的第 4 节中。几年前，当我建立文件时，我经常使用 `man 4 ...`；这仍然是我的一个习惯。那么它在 Linux 手册中的什么地方呢？
现在是时候调用 `whatis` 来纠正我了。为了做到这一点，我在我的终端中输入以下内容：
```
whatis passwd
```
然后我看到以下内容：
```
passwd (1)           - change user password
passwd (1ssl)        - compute password hashes
passwd (5)           - the password file
```
啊！`passwd` 文件的页面在第 5 节。现在没问题了，可以访问我想要的信息了：
```
man 5 passwd
```
然后我被带到了有我需要的信息的手册页。
`whatis` 是一个方便的工具，可以用简短的一句话告诉你一个命令的作用。想象一下，你想知道 `cal` 是做什么的，而不想查看手册页。只要在命令提示符下键入以下内容。
```
whatis cal
```
你会看到这样的回应：
```
cal (1)              - displays a calendar and the date of Easter
```
现在你知道了 `whatis` 命令，我可以告诉你一个秘密 —— 有一个 `man` 命令的等价物。为了得到这个，我们使用 `-f` 开关：`man -f ...`。
试试吧。在终端提示下输入 `whatis cal`。执行后就输入：`man -f cal`。两个命令的输出将是相同的：
![whatis cal and man f cal outputs are the same](/data/attachment/album/202106/12/161814u2ab2cczbywk3v45.png)
#### whereis
`whereis` 命令的名字就说明了这一点 —— 它告诉你一个程序在文件系统中的位置。它也会告诉你手册页的存放位置。再以 `cal` 为例，我在提示符下输入以下内容：
```
whereis cal
```
我将看到这个：
![whereis cal output](/data/attachment/album/202106/12/161815rpfytzo755771djc.png)
仔细看一下这个回答。答案只在一行里，但它告诉我两件事：
* `/usr/bin/cal` 是 `cal` 程序所在的地方，以及
* `/usr/share/man/man1/cal.1.gz` 是手册页所在的地方（我也知道手册页是被压缩的，但不用担心 —— `man` 命令知道如何即时解压）。
`whereis` 依赖于 `PATH` 环境变量；它只能告诉你文件在哪里，如果它们在你的 `PATH` 环境变量中。
你可能想知道是否有一个与 `whereis` 相当的 `man` 命令。没有一个命令可以告诉你可执行文件的位置，但有一个开关可以告诉你手册页的位置。在这个例子中使用 `date` 命令，如果我们输入：
```
whereis date
```
在终端提示符下，我们会看到：
![whereis date output](/data/attachment/album/202106/12/161815ggt2l1l4rww49wte.png)
我们看到 `date` 程序在 `/usr/bin/` 目录下，其手册页的名称和位置是：`/usr/share/man/man1/date.1.gz`。
我们可以让 `man` 像 `whereis` 一样行事，最接近的方法是使用 `-w` 开关。我们不会得到程序的位置，但我们至少可以得到手册页的位置，像这样：
```
man -w date
```
我们将看到这样的返回：
![](/data/attachment/album/202106/12/161815d1o60t9n84n12c13.png)
你知道了 `whatis` 和 `whereis`，以及让 `man` 命令做同样（或接近）事情的方法。我展示了这两种方法，有几个不同的原因。
多年来，我使用 `whatis` 和 `whereis`，因为它们在我的培训手册中。直到最近我才了解到 `man -f ...` 和 `man -w ...`。我确信我看了几百次 `man` 的手册页，但我从未注意到 `-f` 和 `-w` 开关。我总是在看手册页的其他东西（例如：`man -k ...`）。我只专注于我需要找到的东西，而忽略了其他的东西。一旦我找到了我需要的信息，我就会离开这个页面，去完成工作，而不去注意这个命令所提供的其他一些宝贝。
这没关系，因为这部分就是手册页的作用：帮助你完成工作。
直到最近我向别人展示如何使用手册页时，我才花时间去阅读 —— “看看还有什么可能” —— 我们才真正注意到关于 `man` 命令的 `-f` 和 `-w` 标记可以做什么的信息。
不管你使用 Linux 多久了，或者多么有经验，总有一些新东西需要学习。
手册页会告诉你在完成某项任务时可能需要知道的东西 —— 但它们也有很多内容 —— 足以让你看起来像个魔术师，但前提是你要花时间去读。
### 结论
如果你花一些时间和精力在手册页上，你将会取得胜利。你对手册页的熟练程度，将在你掌握 Linux 的过程中发挥巨大作用。
---
via: 
作者：[Bill Dyer](https://itsfoss.com/author/bill/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出