## PostgreSQL 14 preview - BRIN (典型IoT 时序场景) 块级索引支持 multi-range min-max [s] - 分段范围索引  
### 作者  
digoal  
### 日期  
2021-03-26   
### 标签  
PostgreSQL , brin , 索引 , 块级索引 , iot , 物联网 , 时序 , feed , log  
----  
## 背景  
BRIN索引特别适合边界清晰的堆存储数据, 例如BLOCK 1到8 存储的id范围是100-10000, 9到16 存储的id范围是100001到200000, 检索id=1000时, 只需要扫描1到8号数据块.  
然而如果堆存储里面的边界不清晰(或者说存储顺序和value相关性不高), 那么被索引字段的值分布很零散,或者范围跨度很大时,  检索一个ID值时可能要扫描很多很多数据块.    
为了解决这个问题, PG 14 支持multi range brin, 1到8号块存储的ID范围可能是1-199, 10000-10019, 20000-20000, 占用5个value(1,199,10000,10019,20000), 一个blocks区间存储多少个value取决于values_per_range参数(8到256).  
当不断插入数据时, 这些范围还可以被合并  
PostgreSQL 开发者确实很精致, 赞!!!  
```  
  28  * The number of intervals tracked per page range is somewhat flexible.  
  29  * What is restricted is the number of values per page range, and the limit  
  30  * is currently 32 (see values_per_range reloption). Collapsed intervals  
  31  * (with equal minimum and maximum value) are stored as a single value,  
  32  * while regular intervals require two values.  
  33  *  
  34  * When the number of values gets too high (by adding new values to the  
  35  * summary), we merge some of the intervals to free space for more values.  
  36  * This is done in a greedy way - we simply pick the two closest intervals,  
  37  * merge them, and repeat this until the number of values to store gets  
  38  * sufficiently low (below 50% of maximum values), but that is mostly  
  39  * arbitrary threshold and may be changed easily).  
```  
```  
   1 /*  
   2  * brin_minmax_multi.c  
   3  *      Implementation of Multi Min/Max opclass for BRIN  
   4  *  
   5  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group  
   6  * Portions Copyright (c) 1994, Regents of the University of California  
   7  *  
   8  *  
   9  * Implements a variant of minmax opclass, where the summary is composed of  
  10  * multiple smaller intervals. This allows us to handle outliers, which  
  11  * usually make the simple minmax opclass inefficient.  
  12  *  
  13  * Consider for example page range with simple minmax interval [1000,2000],  
  14  * and assume a new row gets inserted into the range with value 1000000.  
  15  * Due to that the interval gets [1000,1000000]. I.e. the minmax interval  
  16  * got 1000x wider and won't be useful to eliminate scan keys between 2001  
  17  * and 1000000.  
  18  *  
  19  * With minmax-multi opclass, we may have [1000,2000] interval initially,  
  20  * but after adding the new row we start tracking it as two interval:  
  21  *  
  22  *   [1000,2000] and [1000000,1000000]  
  23  *  
  24  * This allow us to still eliminate the page range when the scan keys hit  
  25  * the gap between 2000 and 1000000, making it useful in cases when the  
  26  * simple minmax opclass gets inefficient.  
  27  *  
  28  * The number of intervals tracked per page range is somewhat flexible.  
  29  * What is restricted is the number of values per page range, and the limit  
  30  * is currently 32 (see values_per_range reloption). Collapsed intervals  
  31  * (with equal minimum and maximum value) are stored as a single value,  
  32  * while regular intervals require two values.  
  33  *  
  34  * When the number of values gets too high (by adding new values to the  
  35  * summary), we merge some of the intervals to free space for more values.  
  36  * This is done in a greedy way - we simply pick the two closest intervals,  
  37  * merge them, and repeat this until the number of values to store gets  
  38  * sufficiently low (below 50% of maximum values), but that is mostly  
  39  * arbitrary threshold and may be changed easily).  
  40  *  
  41  * To pick the closest intervals we use the "distance" support procedure,  
  42  * which measures space between two ranges (i.e. length of an interval).  
  43  * The computed value may be an approximation - in the worst case we will  
  44  * merge two ranges that are slightly less optimal at that step, but the  
  45  * index should still produce correct results.  
  46  *  
  47  * The compactions (reducing the number of values) is fairly expensive, as  
  48  * it requires calling the distance functions, sorting etc. So when building  
  49  * the summary, we use a significantly larger buffer, and only enforce the  
  50  * exact limit at the very end. This improves performance, and it also helps  
  51  * with building better ranges (due to the greedy approach).  
  52  *  
  53  *  
  54  * IDENTIFICATION  
  55  *    src/backend/access/brin/brin_minmax_multi.c  
  56  */  
```  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=ab596105b55f1d7fbd5a66b66f65227d210b047d  
```  
BRIN minmax-multi indexes master github/master  
author	Tomas Vondra 	  
Fri, 26 Mar 2021 12:54:29 +0000 (13:54 +0100)  
committer	Tomas Vondra 	  
Fri, 26 Mar 2021 12:54:30 +0000 (13:54 +0100)  
commit	ab596105b55f1d7fbd5a66b66f65227d210b047d  
tree	ba03f65e68913c0a684e9483a0c43e0df0229ee3	tree  
parent	77b88cd1bb9041a735f24072150cacfa06c699a3	commit | diff  
BRIN minmax-multi indexes  
Adds BRIN opclasses similar to the existing minmax, except that instead  
of summarizing the page range into a single [min,max] range, the summary  
consists of multiple ranges and/or points, allowing gaps. This allows  
more efficient handling of data with poor correlation to physical  
location within the table and/or outlier values, for which the regular  
minmax opclassed tend to work poorly.  
It's possible to specify the number of values kept for each page range,  
either as a single point or an interval boundary.  
  CREATE TABLE t (a int);  
  CREATE INDEX ON t  
   USING brin (a int4_minmax_multi_ops(values_per_range=16));  
When building the summary, the values are combined into intervals with  
the goal to minimize the "covering" (sum of interval lengths), using a  
support procedure computing distance between two values.  
Bump catversion, due to various catalog changes.  
Author: Tomas Vondra   
Reviewed-by: Alvaro Herrera   
Reviewed-by: Alexander Korotkov   
Reviewed-by: Sokolov Yura   
Reviewed-by: John Naylor   
Discussion: https://postgr.es/m/PI:EMAIL  
Discussion: https://postgr.es/m/5d78b774-7e9c-c94e-12cf-fef51cc89b1a%402ndquadrant.com  
```    
用法  
```  
CREATE TABLE brintest_multi (  
   2     int8col bigint,  
   3     int2col smallint,  
   4     int4col integer,  
   5     oidcol oid,  
   6     tidcol tid,  
   7     float4col real,  
   8     float8col double precision,  
   9     macaddrcol macaddr,  
  10     inetcol inet,  
  11     cidrcol cidr,  
  12     datecol date,  
  13     timecol time without time zone,  
  14     timestampcol timestamp without time zone,  
  15     timestamptzcol timestamp with time zone,  
  16     intervalcol interval,  
  17     timetzcol time with time zone,  
  18     numericcol numeric,  
  19     uuidcol uuid,  
  20     lsncol pg_lsn  
  21 ) WITH (fillfactor=10);  
  22 INSERT INTO brintest_multi SELECT  
  23     142857 * tenthous,  
  24     thousand,  
  25     twothousand,  
  26     unique1::oid,  
  27     format('(%s,%s)', tenthous, twenty)::tid,  
  28     (four + 1.0)/(hundred+1),  
  29     odd::float8 / (tenthous + 1),  
  30     format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  
  31     inet '10.2.3.4/24' + tenthous,  
  32     cidr '10.2.3/24' + tenthous,  
  33     date '1995-08-15' + tenthous,  
  34     time '01:20:30' + thousand * interval '18.5 second',  
  35     timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  
  36     timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  
  37     justify_days(justify_hours(tenthous * interval '12 minutes')),  
  38     timetz '01:30:20+02' + hundred * interval '15 seconds',  
  39     tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  
  40     format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  
  41     format('%s/%s%s', odd, even, tenthous)::pg_lsn  
  42 FROM tenk1 ORDER BY unique2 LIMIT 100;  
  43 -- throw in some NULL's and different values  
  44 INSERT INTO brintest_multi (inetcol, cidrcol) SELECT  
  45     inet 'fe80::6e40:8ff:fea9:8c46' + tenthous,  
  46     cidr 'fe80::6e40:8ff:fea9:8c46' + tenthous  
  47 FROM tenk1 ORDER BY thousand, tenthous LIMIT 25;  
  48 -- test minmax-multi specific index options  
  49 -- number of values must be >= 16  
  50 CREATE INDEX brinidx_multi ON brintest_multi USING brin (  
  51     int8col int8_minmax_multi_ops(values_per_range = 7)  
  52 );  
  53 ERROR:  value 7 out of bounds for option "values_per_range"  
  54 DETAIL:  Valid values are between "8" and "256".  
  55 -- number of values must be <= 256  
  56 CREATE INDEX brinidx_multi ON brintest_multi USING brin (  
  57     int8col int8_minmax_multi_ops(values_per_range = 257)  
  58 );  
  59 ERROR:  value 257 out of bounds for option "values_per_range"  
  60 DETAIL:  Valid values are between "8" and "256".  
  61 -- first create an index with a single page range, to force compaction  
  62 -- due to exceeding the number of values per summary  
  63 CREATE INDEX brinidx_multi ON brintest_multi USING brin (  
  64     int8col int8_minmax_multi_ops,  