we assume that all humans will interpret any given screen image in
the same way, and thus a single function sufﬁces; usability issues
are outside the scope of this paper. In particular, we assume that
testers will interpret screen images in the same way as voters. We
make no attempt to specify I formally. Instead, we devise a set of
tests that sufﬁce to check that the screen images produced by the
voting machine will be interpreted by humans in a way that accu-
rately represents the internal state of the machine, no matter what
I may be. The assumptions mentioned above cannot be mathe-
matically proven; rather, they serve as a way to make precise what
assumptions we do and do not make about the nature of human
expectations.
Accordingly, the fourth part of our speciﬁcation is:
• a formal model of a human’s view of how the voting machine
should operate, which we call the speciﬁcation voting machine.
The fourth veriﬁcation goal listed above then becomes to verify that
the actual voting machine’s behavior is consistent with the speciﬁ-
cation machine: i.e., that a human will interpret the screen images
produced by the actual voting machine in a way consistent with
how the speciﬁcation machine mandates that its state should evolve.
This is veriﬁed using systematic testing. As mentioned above, we
provide formal veriﬁcation of structural properties of the actual vot-
ing machine which, when combined with testing using a test suite
that attains 100% transition coverage in each individual contest and
of navigation between contests, is sufﬁcient to guarantee trace cor-
respondence between the voting machine and the speciﬁcation vot-
ing machine.
In the rest of this section, we describe the speciﬁcation machine
in detail. The formal speciﬁcation of each component, behavioral
properties, and structural properties are presented in Section 3.
2.1 Notation and deﬁnitions
We begin by brieﬂy deﬁning some voting-related terms that are
used throughout the discussion.
Contest: A single race, such as President, that a voter will vote on.
Ballot: The physical or electronic representation of all contests that
a voter will be deciding on election day.
Candidate: A choice in a particular contest. The voter will typi-
cally choose from among two or more candidates for each contest
on the ballot.
Voting Session: A voter’s interaction with the machine from the
time they are given a new ballot until the time their entire ballot
is stored in non-volatile memory, i.e., until the time they cast the
ballot.
Cast: Casting a vote refers to the action taken at the end of a voting
session that causes the selections made in all contests to be irre-
vocably written to non-volatile memory. Making a selection in a
particular contest and moving on to the next contest is not consid-
ered casting a vote.
Selection State: The state representing the set of all candidates
currently selected in a particular contest.
Button: A (usually rectangular) region on the screen. Touching
anywhere within this region activates a particular functionality of
the machine. The corresponding part of the screen image is often
designed to provide the appearance of a physical button.
Next we provide deﬁnitions for the transducers that make up the
speciﬁcation voting machine.
DEFINITION 1. A deterministic ﬁnite-state transducer M is a
6-tuple (I, O, S, δ, ρ, sinit) where
• I is the set of input events,
• O is the set of outputs,
• S is the set of states of M ,
• δ : S × I → S is the transition function,
• ρ : S → O is the output function, and
• sinit ∈ S is the initial state of M .
We introduce the notion of controlled composition, where we com-
pose N transducers M1, . . . , MN and a controller C whose output
set is {1, . . . , N }. The output of C determines which transducer
is active. Inactive transducers produce no output and do not tran-
sition between states. We assume that the Mi’s share a common
465C
...
M
N
M
1
M
2
1M
b
2M
(a) Controlled composition
(b) Sequential composition
Figure 1: Composition
input set IM , and that the input set of C is disjoint from IM . Any
input from IM will be routed to whichever transducer is currently
active, and any other input will be provided to C. The output of
the composition is taken from the output of whichever transducer
is currently active. See Figure 1(a) for a visualization. Formally:
DEFINITION 2. Let C, M1, . . . , MN be deterministic ﬁnite-state
transducers, given by
• C = (IC , {1, . . . , N }, SC , δC , ρC , sinit
• Mi = (IM , O, Si, δi, ρi, sinit
Suppose IC ∩IM = ∅. Then their controlled composition, denoted
LC; M1, . . . , MN M, is the transducer
C ) and
i ).
(IC ∪ IM , O, SC × S1 × · · · × SN , δ∗, ρ∗, (sinit
N )),
C , sinit
1 , . . . , sinit
where δ∗ and ρ∗ are deﬁned as
δ∗((i, s1, . . . , sN ), b)
=((δC (i, b), s1, . . . , sN )
(i, s1, . . . , si−1, δi(si, b), si+1, . . . , sN )
if b ∈ IC ,
if b ∈ IM ;
ρ∗(i, s1, . . . , sN ) = ρi(si).
We also use the notion of sequential composition of transducers.
If M1, M2 are two transducers with common input and output sets
I, O, and b is another input not in I, then the sequential composi-
b→ M2 is a transducer that initially begins executing M1.
tion M1
When it receives input b, it immediately transfers control to M2,
starting at the initial state of M2. Equivalently, let C be a two-state
transducer that begins executing in state 1 and transitions to state
2 upon receiving input b, and whose output function is the identity
function. Then M1
b→ M2 = LC; M1, M2M.
2.2 Speciﬁcation Voting Machine
The speciﬁcation voting machine formalizes how voters will ex-
pect the voting machine to respond to inputs from the voter, and
how voters will expect the ﬁnal votes recorded by the machine to
correspond to these actions. Therefore, we start with a list of prob-
able voter expectations:
1. If the voter presses a button for a candidate who is not already
selected, then the effect will be to add that candidate to the list of
selected candidates if this is legal (and nothing else will change).
If the voter presses a button for a candidate who is already se-
lected, the effect will be to remove that selection.
2. If the voter presses a button to navigate among contests, the vot-
ing machine will do so appropriately.
3. When the voter casts his/her ballot, the state of each contest
equals the state of that contest the last time the voter saw that
contest’s screen.
From these expectations we develop a speciﬁcation voting machine.
Instead of outputting screen images (like the actual voting ma-
chine), it outputs only an abstract representation of what should be
displayed upon the screen. Similarly, instead of receiving as input
(x, y)-locations where the voter touched the screen (like the actual
voting machine), the speciﬁcation voting machine receives only an
abstract representation of the button pressed. This abstract button
number not distinguish between different locations corresponding
to the same button.
The speciﬁcation machine P is a deterministic ﬁnite-state trans-
ducer with a special structure, depicted in Figure 2. Conceptually,
P operates in two modes in which its operation is respectively de-
ﬁned by two transducers Mmain and Mcast. Mmain represents the
main mode of operation, in which P begins and processes voter
selections, and Mcast is the cast mode in which the voter casts her
ballot and the machine records the vote and resets itself for the next
voter. Mmain is itself the composition of N + 1 state machines,
Mnav, M1, M2, . . ., MN , where Mnav controls navigation across
contests, and Mi is the state machine responsible for processing
votes for contest i.
cast→ Mcast.
Formally, P is the sequential composition P = Mmain
Mmain is the controlled composition Mmain = LMnav; M1, . . . , MN M.
Mcast is a transducer with only a single state and a self-loop on ev-
ery input.
DEFINITION 3. P is a 6-tuple (I, O, SP , δP , ρ, sinit) where
• I is the set of input events from the voter, corresponding to but-
tons that the voter can press,
• O is the set of outputs from the speciﬁcation machine,
• SP is the set of states of the speciﬁcation machine,
• δP : SP × I → SP is the transition function,
• ρ : SP → O is the output function, and
• sinit ∈ SP is the initial state of P for each voter.
Note that this formulation requires P to be a deterministic ﬁnite-
state transducer. It also requires the output to depend only upon the
current state, not upon the input.
The output set O of the speciﬁcation machine is partitioned into
two kinds of outputs: O = Omain ∪Ocast. Each element of Omain has
the form (i, si), where i indicates the current contest and si is the
set of candidates selected in that contest. This is an abstraction of
the information that should be displayed on the screen at that point,
and is output when the machine is in main mode. Each element of
Ocast has the form (s1, . . . , sN ), representing a record of the votes
cast in all N contests, and is output when the machine is in cast
mode.
The input set I of the speciﬁcation machine is partitioned into two
sets: I = IN ∪ IS. The set IN corresponds to buttons that a
voter can press to navigate between contests, while IS corresponds
to buttons that a voter can press to select or deselect the options
within a contest. We use IN = {next, prev, cast}; next moves
from contest i to contest i+1, prev moves from contest i to contest
i − 1, and cast irrevocably casts the voter’s ballot and moves to
a ﬁnal screen informing the voter that her vote has been recorded.
Also we assume IS = {0, 1, . . . , k − 1}, where k is an upper
bound on the number of choices in any contest. The event b ∈ IS
corresponds to pressing a button to select/deselect the bth candidate
in the contest that is currently active.
Speciﬁcation of Mnav. The controller Mnav can be speciﬁed for-
mally as follows. Its state set is {1, 2, . . . , N }, corresponding to
the set of N contests, with 1 as its initial state, corresponding to
the fact that the speciﬁcation machine starts at the ﬁrst contest. Its
466Mnav
next/prev
...
M
1
M
2
cast
castM
M
N
Mmain
Figure 2: Structure of speciﬁcation voting machine P.
input set is {next, prev}. Its transition function is given by
i + 1 if i  1 and b = prev
i
otherwise.
δnav(i, b) =8>:
Its output function is the identity function: ρnav(i) = i.
Speciﬁcation of Mi, the machine for contest i. We specify
the transducer Mi for an arbitrary contest i (for 1 ≤ i ≤ N ).
This transducer is implicitly parametrized by two election-speciﬁc
parameters: ki, the number of candidates in contest i; and ℓi, the
maximum number of candidates who can be selected at a time in
contest i. For instance, in a contest where the candidate is entitled
to vote for up to 2 candidates, out of a list of 10, we have ℓi = 2
and ki = 10.
A state si of Mi is a set of candidates who are currently selected in
contest i: namely, si ⊆ {0, . . . , ki − 1} where |si| ≤ ℓi; j ∈ si
indicates that the jth candidate in contest i is currently selected.
The initial state is ∅, indicating that no selection has been made in
this contest. The input set is IS. The transition function is given by
si ∪ {b} if b /∈ si, b :
The output function ρi is given by ρi(si) = (i, si).
States of P. Given the structure of P deﬁned above, the overall
set of states SP of P can be written as SP = S × {Main, Cast}.
The set S is in turn partitioned into states of Mnav, M1, M2, . . . , MN :
S = {1, . . . , N }×S1 ×· · ·×SN . The overall initial state is sinit =
(s0, Main) where s0 = (1, ∅, . . . , ∅). The transition function of P
is constructed from δnav and δi as described in Section 2.1. The out-
put function in cast mode is ρcast(i, s1, . . . , sN ) = (s1, . . . , sN ),
and the output function in main mode is constructed from ρi as
deﬁned in Section 2.1.
Meeting voter expectations. The speciﬁcation machine mod-
els the expected behavior of the voting machine for a single voter.
Above, we listed several voter expectations on which we based this
speciﬁcation. P was designed so that each of these expectations
holds by construction. For instance, when the voter casts their bal-
lot they expect the votes cast in each contest to match the voter’s
last view of that contest. This expectation follows from the sepa-
ration between the Mis and by the sequential composition of Mnav
and Mcast. The speciﬁcation states that each Mi can only transition
between states when it is active, which is exactly when the voter
sees its output on the screen. Furthermore, the transition to Mcast
can cause no transitions in any of the Mi.
2.3 Interpretation Functions
The touch-screen input-output interface of the voting machine plays
a very important role since it is through this interface that a human
voter perceives the execution of the voting machine.
Consider the output screen images. It is difﬁcult to predict a priori
how a human might interpret any particular screen image. Instead,
we assume that everyone will interpret any screen image output by
the voting machine in the same way, and introduce a function IO
that maps screen images to their abstract content. If z is a screen
image, then IO(z) is deﬁned by the following thought experiment:
we imagine showing z to a prototypical human; we ask the human
which contest this screen is associated with, and let i ∈ {1, . . . , N }
denote the contest they identiﬁed; we ask the human which candi-
dates are currently selected in this contest, and let si denote the set
of candidates they identify; then IO(z) = (i, si).
Similarly, we introduce an interpretation function II that maps a
screen image z and an (x, y)-location on that screen to an input
in I. II formalizes how a prototypical human would map screen
locations to buttons.
The crucial assumption we make is that everyone—all voters and
testers alike—will use the same input/output interpretation func-
tions. Testing procedures can partially validate this assumption:
we can ask testers to check that each screen image output by the