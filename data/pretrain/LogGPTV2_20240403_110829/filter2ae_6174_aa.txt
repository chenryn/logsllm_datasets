**这PPT值得好好理解，审计思路可拓展至任何语言的框架、前端、后端、数据库操作逻辑审计**
**如有翻译失误，参照原文混合阅读理解即可，pdf见附件**
## 背景
WordPress是一个非常流行的内容管理系统，超过34％的人使用它搭建网站。易用性、兼容性、免费性和庞大的插件库（超过5w个）使WordPress成为第一个无需任何建站知识和开发预算即可快速轻松地建立网站的系统。
WordPress可以进行自定义和优化，因此很多政府网站或者市值百亿的公司也在使用此CMS来开发管理他们的网站。
黑客们一直很热衷于对WordPress进行漏洞挖掘，他公开公平公正的bugBounty计划，吸引了各路神仙的审计与挖掘，当然少不了有些0day收藏所需导致的神秘力量也在挖呢。。得益于此，WordPress的迭代更新周期也很快，所以审计这个最受欢迎的CMS源码是一个巨大的挑战，但同时也是学习代码审计思路的优秀案例，因为他更新的真滴贼快，时效性贼强:P
当开始对WordPress核心代码进行漏洞挖掘时，我们很快意识到要找到关键漏洞，就必须脱离日常Web应用程序中查找简单漏洞的方法（黑盒），转而使用更有效的方法和手段来进行挖掘（代码审计）。
本文记录了我们将源代码分离为组件，将几个影响较小的bug组合为功能强大的特权升级和远程代码执行exp-chain的过程。文中我们陆续发现了五个漏洞，最终完成从【未验证漏洞】提升到【任意远程代码执行】的流程。所有问题均已披露给WordPress安全团队并已发出补丁。
我们相信公开此漏洞审计的文章不仅可以帮助其他研究人员优化审计方法，还可以帮助开发人员更好地了解攻击者的思维方式，并为提高安全开发意识而打下基础。
## 方法介绍
本章介绍了我们审计WordPress的方式。
首先一起回顾最常见的审核源代码的方法，了解并当前被审计框架（例如WordPress）的bug缺陷。然后，我们跟随文章案例介逐一讲解我们所使用的审计思路。
## 传统代码审核方法
挖掘Web应用程序中漏洞的最简单方法是【用户输入】→【危险函数】。
对传入数据直接丢进【危险函数】是一个脑残的开发方式，可能使【不受信任的用户输入】被直接带入执行，执行前我们应该对任何输入内容进行过滤处理。
例如：数据库操作、文件写入或命令执行等敏感操作时，这些操作可能会被攻击者利用，通过逃逸或者反序列化等，最终导致不可控的外部命令非法注入。
此类漏洞的一个非常简单的示例如下所示：
    $dir = $_GET['dir'];
    // something...
    system("ls " . $dir);
通过随机传入特殊fuzz内容，研究人员可以很快通过黑盒发现此类漏洞。当然，通过审计中层层步进的审计方式，手工验证数据是否经过处理后安全传递给危险函数（或逃逸传递逻辑），出奇制胜风味更佳。
## 传统审计方法缺陷
由于WordPress等通用框架的0days价值很高，使用【用户输入】→【危险函数】这种静态审计的方法已经被老练的黑客团体、国家队和研究人员挖烂了。流行的通用框架中搞出这种“教科书式漏洞”的效率越来越低。所以如今的0day多半极其复杂，这种通用框架的漏洞，多半需要2-3个组合拳利用链才能完成整个攻击过程。这意味着越来越多的中间步骤夹杂在【用户输入】到【处理逻辑】的过程中。更恶心的是在每个步骤之间，还有许多需要精心设计才能满足的先前逻辑条件，就特么跟CTF故意的一样。艹
我们使用RIPS的静态扫描器WordPress核心代码时，着重于发现【用户输入】→【处理逻辑】中的看似低影响或没有太多直接影响的小缺陷。通常，那些总有各种传入限制或只会引发一些不痛不痒的错误的洞，被某些只想“一键日天”的人视为卵用没有。
其实许多可控的gadgets并不是真正意义的漏洞，看起来只是导致功能出现偏差（弱类转换/变量覆盖）或影响非常有局限性（self-xss/需要其他权限的操作）。同时网络犯罪分子、赏金猎人们和0day自动挖掘工具，仅感兴趣于或仅能发现表层“一发入魂”的直接造成高危影响的洞。因此，这些没卵用的bug，可能并没被注意也没被上报。那么问题就来了。艹
为了找出新高危利用方式，我们选择了全面审查代码中最牛批有效的方法：“无敌组合拳exp-chain”。单合并多个低影响力漏洞难在把他们联系起来。不同利用点要不不在一个逻辑里，要不干脆不在一个module里，要不干脆功能上没有半毛钱关联。但正是毛线关系没有，导致这种利用链很难发现（虽然你很难发现，但可喜可贺别人也难得发现，呵呵呵）。当研究人员仅尝试通过代码审计跟踪【用户输入】是否直接传递给关键【危险函数】时，由于通常无法直接绕过这些限制，研究人员通常放弃继续跟，因为看上去这个洞就是卵用没有。但是，或许可以通过不同的方式来打破限制。（联想nginx配置失误后php_pathinfo的洞）
## 案例分析
让我们看一下这种组合洞的实例，在WordPress中发现。我们使用了两个漏洞（特性），在代码审计时并没看到他俩有卵毛线关系。所以分别单个审视时他们是不可利用的。（请注意，以下示例需要管理员权限才能进行利用并作为一个案例）尽管默认情况下管理员可以通过上传新的插件和主题来执行任意PHP代码，但这类弱点也可以在安装WordPress后进行[改进修复](https://wordpress.org/support/article/hardening-wordpress/)。所以我们要找到另一个（后漏洞分析中会提到的）未认证漏洞。
### 有限制的文件包含
我们使用静态代码分析工具发现了一个WordPress主题中的本地文件包含（LFI）的漏洞（RIPS漏洞报告）。它允许攻击者从当前目录里`include()`执行任何文件。
WordPress中的主题是可能只会包含模板文件以及css文件/js文件。因此此LFI漏洞是有局限性不能直接利用的。
WordPress通过限制为当前主题的目录，来确保传递给`include()`的参数是安全的，我们不可能从其他目录绕过限制引发漏洞，至少在正常的经过安全加固的WordPress中，我们无法上传其他文件到该主题的目录或修改主题目录中已存在的文件。这意味着尽管可以在当前主题目录中实行任意文件包含，我们也包含不到我们的payload，艹。
因此，这个点只能被看作是个弱点，但不是安全漏洞。（在撰写本文时这个弱点也尚未被WordPress修补）但是，如果我们找到个方法把payload传入到这个主题目录下呢？
### 绕过限制的方法
由于WordPress限制了所包含的模板文件必须位于当前主题的目录下，所以唯一的利用方法是 **以某种方式修改主题文件** 或者
**将payload文件上传/移动到主题目录**
。找到这样一个利用点，我们决定对WordPress中的一些上传/修改文件的组件进行审计。我们减少了对插件的研究，开始看看更新功能和媒体文件上传功能，因为这些点可控也必定出现文件操作。但是，我们很快意识到，去审计WordPress的文件上传功能必定一无所获，因为各种模块里上传文件有各种奇葩限制并且还会对文件名进行过滤。
审计WordPress中间件（如：过滤器）在文件上传过程中的作用，发现上传不同文件类型时中间件的处理方式也不同。因此，我们将每种文件类型的上传功能分解为如下线性方式。例如当`.txt`类型文件上传到WordPress中时，将经过：
1.清理文件名  
2.从数据库相关`upload_path`设置中获取`.txt`类型文件应该移动到的目录  
3.将文件移动到目标目录