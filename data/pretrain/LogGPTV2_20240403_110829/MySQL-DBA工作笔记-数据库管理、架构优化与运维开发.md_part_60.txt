张，全年也就400张左右。
下来累计是16*365=5840张表，几乎没有满足不了的场景了。
它的扩展能力是极强的，比如一个日表的划分，每天一个日表，拆分成16份，那么一年
个时间维度的表，其中日表是最为常见的，也是目前在分布式改造中使用频率最高的。
个表分成100份，就需要100个数据库，这个层面其实也可以做更细粒度的定制优化。
实例维度，即IP端口的组合方式
辑映射关系，如下图10-2 是把表 table1和 table2 拆成了 4个分片，而 datahost 则是基于
节点对应100个数据库。
据量，拆分为400份，单表的数据量是在100万，如果是4个物理分片节点，那么每个
中很可能就需要配置 40个数据库来对应，扩展力度上相对有限，比如一个表有4亿的数
另外一类表是具有时间属性的，也叫做周期表，目前主要是年、季、月、周、日这5
在 Mycat 中会是这样的设计方式，其中 datanode 就是上述的数据库，它们是一种逻
按照这样的配置策略，原来的方式下表里会有近万张表，而用现在的方式只有几十
·tqa_test_201901--季度
· tya_test_2019 --年
·twa_test_201901--周
●tda_test_20190321 --日
对于周期表来说，有一些策略和命名规则，比如：
· dbo_test_credit
对于这两类表，在表名的设计上也有一定的技巧。
如果琢磨一下就会发现这种方式也存在瓶颈，那就是分表层面的代价有些高，如果把一
●tma_test_201903--月
· dbo_test_score
对于固定表来说，相对简单，比如：
database
host
table
database
host
table
datanode
图10-2
table1
datahost
datanode
schema
第10章基于业务的数据库架构设计|371
datahost
datanode
table2
datanode
---
## Page 394
372丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
如果做水平扩展，也是可以应需而动，如图10-4所示。
说，面对的不是一个集群而是多套单一的环境。
或者一主多从的架构模式。
多写少的业务，读写分离可以极大地提高查询效率，减轻主库的负担，通常有一主一从
10.1.3Mycat读写分离配置
采用代理的模式，能够明显改进这种状况，对应用也是透明的，对于读节点来说，
linux.tar.gz
wget http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-
早期的主从分离架构是下图10-3这样的。
早些年 MySQL 架构在主从复制的基础上使用比较广泛的场景就是读写分离。对于读
先从官方下载相应的安装包即可，大概是15M左右。
1．安装部署
接下来我们以 Mycat 为例，看一下在读写分离中的一些配置和使用。
但是这样明显存在一个缺点，即读请求的扩展对于应用层是不友好的，对于应用来
图10-4
图10-3
---
## Page 395
mycat_read 负责查询。
要提供大量的数据量连接访问。我们就可以创建两个用户，mycat_user 负责 DML,
分分钟搞定。
速搭建部署可以参考 github上我写的一个小脚本，https://github.com/jeanron100/mysql_slaves,
可，然后修改权限。
如果系统自带，版本不低也可以的。
grant select,insert,delete,update on db1.* to mycat_user;
grant select on db1.* to mycat_read;
分配权限的部分如下：
create
create database db1;
比如有多个数据库，我们就模拟创建3个数据库。
create user mycat_user
Mycat可以实现很多功能，在此先实现一个需求，比如现在有一套环境读多写少，需
slave3:
slave2:
master:
假设环境的情况如下：
我们需要配置的数据库环境假设是一主三从，可以在一台服务器上搭建模拟，一主三从的快
2．配置数据库环境
chown mycat:mycat /usr/local/mycat
mvmycat//usr/local/
对于安装来说，
useradd mycat
创建系统级的组和用户，如下：
export
export JAVA_HOME=/usr/1ib/jvm/jre-1.7.0-openjdk.x86_64
比如修改.bash_profile文件。
相应的 Java 的基础配置也需要在 profile 文件里对应调整一下。
OpenJDK 64-Bit Server VM (build 24.45-b08, mixed mode)
OpenJDK
# java -version
export
解压后的安装包有60M 左右。
ava
database
 CLASSPATH=.:$JAVA_HO. ME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
PATH=SPATH:$JAVA HOME/bin
端端
端
端
口
口33091
33092
几乎不需要调整，
db3
.7.0_45"
2
identified
，安装Mycat很简单，只需要保证 Java已经正确安装，
直接把解压后的 mycat 目录拷贝到/usr/local 下即
第10章基于业务的数据库架构设计丨373
---
## Page 396
374丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
按照如下的配置，这里我们配置 schema是 pxc_schema，先卖个关子。
这是配置读写分离的关键。
数据库 dbl，db2，db3 中创建。
server.xml的配置关键内容如下，我们配置了两个用户，所以在这个配置文件里就先
在mycat/conf目录下有两个文件需要重点关注，
上面的工作做好之后，系统层面和数据库层面的工作就完成了。启动 Mycat 的命令
mysql>
mysql>
mysql> create table travelrecord 
4.Mycat 配置
(id bigint not null primary key,user_id varchar(100),traveldate DATE,
mysql> grant
mysql> grant replication client on *.* to
赋予从库状态查询的权限，在后面需要用。
grant select,insert,delete,update on
grant select,insert,delete,update on db2.* to mycat_user;
schema.xml的内容如下，
初始化数据库，
3．初始化数据
grant
select on db2.*
pxc_schema
 into travelrecord(id,user_id,traveldate,fee,days)
我还是选用一个经典的表 travelrecord，然后插入两行记录。在3个
replication
true
client
-->
http://io.mycat/">
dataHost="dtHost" database="db1"/>
read;
uo
(5000001,@@hostname,20160102,100,10);
￥￥
n db3.* to mycat_user;
一个是 server.xml,
to
(1,@@hostname,20160101,100,10)
decimal,days int)
 sqlMaxLimit=
一个是 schema.xml,
values
value:
fee
---
## Page 397
其实这是 db1，而 db2，db3 还没有在 Mycat 配置文件中体现，所以还没有生效。
db3，但是为什么这里出现了pxc_shema 呢，其实也可以理解为 Mycat在中间过滤的效果
mycat 的字样，就证明是 Mycat 设置生效了。
文件的配置，配置不当是需要反复调试的。
user="mycat_read"
user="mycat_read'
如何验证 Mycat 的生效呢，我们可以使用 8066 这个默认端口来连接，如果里面出现
mysql> use pxc_schema
我们就连接到这个 pxc_schema 数据库。
mysql> show databases;
我们看看这个用户 mycat_read 能够访问的数据库，在数据库里应该就是 dbl，db2,
[root@oel64 1ogs]# mysql -umycat_read -pmycat -P8066 -h192.168.163.128
Mycat 的配置做好了以后，整个工作 80%的任务就完成了，其实关键还是在于Mycat
5．检测 Mycat 的连接情况
row in set(0.00sec)
DATABASE
aHost>
 host="hostSlave2"
host
host="hostSlavel"
host="hostMaster"
 dbType="mysql"
dbDriver="native"
url="192.168.163.128:33094"
ur1="192.168.163.128:33093"
ur1="192.168.163.128:33092"
minCon
来配置，
第10章基于业务的数据库架构设计|375
slaveThreshold="100">
比如
,schema 中的每一个
(OpenCloundDB）
这里就是我们的
---
## Page 398
376丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
阶段：
10.1.4
dataNode=
dataNode="pcxNode2">
dataNode
细节是在 schema.xml里面映射的。
仅仅是 pxc_schema，该如何配置呢。
load balance 的方式是否满意。
（1）环境部署，MHA 和 Mycat 的融合，读写分离。
中间件 Mycat 自己之前也简单测试和总结过。最近做分布式测试，我大体分了三个
我们在 server.xml 中就需要对 schema 扩展一下，schema 的值是以逗号分隔，配置的
整个过程完成后，重新加载一些配置文件即可生效。
6．继续扩展 Mycat 读写分离的配置
由此我们可以看到，连接到的是33092 的端口，即 slavel；可以反复切换，看看这个
如何验证我们连接到的数据库是否启用了 Mycat 的读写分离呢。我们可以看端口。
1 row in set (0.01 sec)
mysql> show tables;
上面的步骤只是简单实现了读写分离的配置，但是如果我要访问多个数据库，而不
@@port
可以看到这个数据库下的表。
330921
Tables_in_db1-
name="pxc_schema"
一
<property
name
db2"
dataHost="dtHost"
da
checkSQLschema="false"
checkSQLschema="false"
 checkSQLschema="false"
dtHost'
相应的 dataNode 也需要扩展映射。
database='
 sqlMaxLimit="100"
sqlMaxLimit="100"
---
## Page 399
写了个脚本，让它慢慢跑吧，明天上班收数。
时，按照这个要求，至少得20个小时，长夜漫漫我不能一直守在那里。所以就在下班前
处就是前期规划了，后期如果出现瓶颈，可以很方便的拆分，如图10-6所示。
个进度，基本就是3N的方式，所以就会有3，6，9，12这样的一些分布方式，这样的好
测试
测试
测试的场景就会很丰富。
存在的数据库为 dbl，db2，db3，db4,
的方法，假设测试的表为：sharding_table,
外一台服务器部署了Mycat，这样就是
服务器是一个 sharding 节点，然后有另
明白之后，事情就很简单了。
装 Java 到部署 Mycat，如果全程跟进，基本两个小时都能够拿下来。
场景，就可以很轻松地使用 insert 的模板来测试。
尤其是支持的场景很丰富，在一些流水型数据的业务中，我如果侧重测试密集型插入的
需要基本保证，那就是测试的场景要全面一些。
希望达到什么目标，是否稳定，功能是否满足需求，这些都是需要反复明确的地方。
一个简单的分布式 sharding 环境。
场景1:3个 sharding 节点的压力
测试的场景，我是这样来规划的，首先在3个物理机上面部署了MySQL 服务，每个
而 sharding 策略的配置还是需要花一些时间的，首先是你得理解它的 sharding 逻辑。
Mycat 的部署上本身是很简单的，无非是一些基本的环境配置。如果是一个新手，从安
要压测基本的性能情况，有几种测试
测试工具的选择上，我目前先选择了 sysbench，原生支持，操作起来相对容易控制，
当然，这些我没有留太多的时间细细琢磨，我希望是速战速决，但是测试质量还是
要完成这些工作，每个场景测试偷工减料的测试几分钟是不行的，最起码得1个小
在之前的基础上进行扩展，按照这
场景2:6个 sharding 节点的压力
如下图10-5所示。
我在测试之前所想：做这个分布式测试的意义是什么，是想通过测试来论证什么，
尤其是分库分表的测试方面，目前还是存在一些需要确认的点。
（3）结合业务做分库分表的模拟测试。
（2）sharding 策略和分库分表的压力测试。
Mycat
第10章基于业务的数据库架构设计”377
图10-5
sharding_table
sharding_table
sharding_table
---
## Page 400
378丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发