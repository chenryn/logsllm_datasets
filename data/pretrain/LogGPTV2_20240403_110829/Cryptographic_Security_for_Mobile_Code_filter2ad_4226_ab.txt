that in the definition  of privacy, the information that a host 
Hj learns about the input xj-1  to its part of the computation 
depends on the combination of the agent output z j  and the 
host’s private input yj. 
For simplicity, the model assumes that the order in which 
the agent visits all hosts is fixed. It can be extended to allow 
for the sequence to depend on zj  by  introducing a function 
7r : 2 -+  { 1, . . . , e}  and sending the mobile agent to 
from Hj . 
single host H ,  the function g yields 0’s output e and h gives 
H’s output z .  
In  the  special  case of  mobile  code applications with  a 
2.2  Software-only Solutions 
Sander and Tschudin  [22] were the first to realize  that 
a software-only  solution to protecting mobile code from a 
malicious host  is indeed feasible for small programs using 
cryptographic techniques.  They proposed to use  so-called 
homomorphic public-key encryption schemes that allow for 
non-interactive  addition or multiplication of two encrypted 
messages by manipulating ciphertext only. In this way, the 
host  can compute any  function  g(., y) on a hidden  input z 
that is representable by a polynomial (in the single-host sce- 
nario). 
This approach was later improved by Sander et al. [23] to 
non-interactive  evaluation  of all functions g(., y)  on a hid- 
den input z that  can be represented by circuits of logarith- 
mic depth [23]. Cachin et al. [7] further generalized this to 
arbitrary  functions, provided they  can be represented by  a 
polynomial-size circuit; they  also described how  to realize 
secure mobile agent applications with  multiple hosts in this 
way. 
However,  all  those  solutions  address  only  the  secure 
evaluation of g j  for updating the agent’s state and producing 
the final result, but  ignore how to realize  hj  for producing 
output at  H j .   More precisely,  they  are restricted  to func- 
tions hj  : y  -+ 2 such that the output from the agent to the 
host must not depend on anything else than its own input. 
In  fact, it is not hard to see that this is the best one can 
achieve  under  the given circumstances.  Towards a contra- 
diction suppose there exists an active agent that also outputs 
some value to its host, for example, in a shopping agent ap- 
plication  indicating whether or not to accept an offer.  As- 
sume for simplicity that the agent’s decision is solely based 
on the price y j  offered by Hj and that it will buy the cheap- 
est offer; the  state of  the  agent is  xj-1  = c indicating  a 
secret threshold  c chosen by  the originator, below which  it 
will  accept the  offer.  Because of the communication con- 
straints in  our model it must be that running algorithm f3j 
on mj-1  and yj immediately yields z j .  Then Hj can deter- 
mine whether the  agent is willing  to accept yj or not, i.e., 
whether yj < c. But nothing prevents a malicious host from 
running Bj again with some other yi and continuing in this 
4 
way until  the agent has leaked c completely, applying sim- 
ple binary search. 
This shows that software-only protection  for the privacy 
of a mobile shopping agent application  is  not possible.  In 
fact, we can conclude the following. 
Proposition 1.  (Non-interactive) secure mobile computing 
schemes do not  exist.  In particulal; any scheme in  which 
some  host  is  to  learn  injornintion  that  depends  on  the 
agent’s current state cannot be secure. 
As  a  consequence of  this,  we  must  extend  our  model 
above in order to obtain privacy and integrity for active mo- 
bile agents. Allowing for communication between each host 
and the  originator would  solve the  problem as mentioned 
earlier; but it would destroy the benefits of the mobile agent 
paradigm  where the originator may be poorly connected or 
temporarily off-line.  The only  alternative seems to extend 
the model by  at least one trusted element. 
One such extension, proposed  by  Yee  [27] and by  Wil- 
helm  et  al.  [25],  uses  trusted  and  tamper-proof  hardware 
modules at every host, such as smart cards or cryptographic 
coprocessors.  Each  one  of  these  hardware modules pos- 
sesses  a  public  key  and  mobile  code  can  be  executed  se- 
curely using this infrastructure in the following way: After 
generating  the  mobile  agent  code, the  originator encrypts 
it  under  the  public  key  of  HI’S module.  Upon  receiving 
some encrypted mobile agent, a host Hj passes  it along to 
its hardware module, together with Hj’s input y j .  The mod- 
ule decrypts the code, executes it on the inputs provided and 
encrypts the output again under the public key of the mod- 
ule in Hj+l. Then it returns this encryption to the host, to- 
gether with zJ, the output intended for Hj. The host sends 
the encrypted code and  the encrypted data to the next  host 
in the sequence. 
To  guarantee  privacy  in  the  formal  model  discussed 
above, each hardware module must be trusted to execute the 
code properly and only once. Furthermore, all trusted mod- 
ules must be produced and initialized by  a trusted, external 
entity. 
In the next section we introduce an alternative extension 
that is based on a minimally  trusted party, the secure com- 
putation service. 
3  Generic Secure Computation Service 
Suppose there exists a third  party  T  that  is  on-line and 
connected  to all hosts running  agent applications and is at 
their disposal for securing agent computations. Is it possible 
to realize such a secure mobile computing scheme in which 
T  itself does not gain any  information about  the computa- 
tion,  no  matter  how  it  behaves’?  All  computations  should 
proceed  with minimal or no interaction.  We give a positive 
answer below and describe a scheme with  these properties 
5 
under assumptions that ( I )  T does not collude with the orig- 
inator against any host, and (2) T does not collude with any 
host against the originator or against any other host. 
Our scheme is  generic and not  bound to any  particular 
application.  Hence  the  service  of  T  may  be  offered  as a 
public  service  for  “secure  mobile  agent computation”  on 
the Internet. The two trust assumptions seem reasonable for 
such a generic, independent entity. Clients who use this ser- 
vice in  the role of 0 or H (e.g., for comparison shopping) 
do not have to fear that T  has “second  thoughts” trying to 
violate their privacy (e.g., of customer profiling and collect- 
ing marketing  data).  Moreover, T  itself  has  an  interest to 
maintain its reputation as a security provider. 
The scheme described below extends the communication 
pattern of mobile agent computations by two messages from 
each host to T and back. Figure 1 shows the communication 
in traditional mobile agent computation and in our scheme. 
Our technique is based on encrypting a binary digital cir- 
cuit that realizes the part of the agent computation in which 
privacy  must be  maintained.  Although,  in principle, such 
circuits may  model  arbitrary  computations,  the associated 
costs are prohibitive  for larger applications.  But  for small 
parts of an agent application, like the comparison function 
of the shopping agent, the overhead seems reasonable. 
We proceed by  reviewing the encrypted circuit construc- 
tion for interactive secure protocols. 
3.1  Encrypted Circuit Construction 
The encrypted circuit construction of Yao [26] is an in- 
teractive  protocol  for  secure  function  evaluation  between 
two parties.  We describe it for a binary function g ( . ,  .) and 
parties  Alice  (with  input  z) and  Bob  (with input y).  Bob 
receives the output z  = g(x, y) but learns nothing else and 
Alice learns nothing  at all.  We  give an abstract version of 
Yao’s construction describing only the properties necessary 
here (more details can be found in the literature [ 12, 211). 
and  (a,...,znz) de- 
note the binary representations of z, y, and z ,  respectively, 
and let C denote a polynomial-sized  binary circuit comput- 
ing g.  The essential  components of Yao’s construction are 
( 1 )   an algorithm construct that Alice  uses to construct an 
encrypted circuit, (2) a transfer protocol between Alice and 
Bob,  and  (3) an  algorithm  evaluate allowing  Bob  to  re- 
trieve g(z, y).  More precisely, these procedures are as fol- 
lows. 
Let  (21 , . . . ,  z I L 2 ) ,  (YI,...,Y~~), 
( I )   The  probabilistic  algorithm  construct(C)  takes  the 
circuit as input and outputs the tuple 
where C may be viewed as an encrypted version of the 
n, + nu-input circuit C ( . ,  .) and  where C ,  IC, and U 
Figure 1. The communication flows of  a traditional mobile agent (left) and using the generic secure 
computation service (right). 
to Bob. 
(3)  The algorithm evaluate(C, L i ,  . . . , LLz, K i ,  . , . , Kky) 
takes  as inputs the  encrypted circuit, a representation 
of z, and a representation  of y by  the respective  keys. 
It  outputs the  keys  Vi,. . . , U;:  from which  Bob can 
recover  z ,  and  if  Alice  and  Bob  obey  the  protocol, 
then z  = g(z, y). 
The security  of  this  construction can  be  proved  in  the 
appropriate  formal  models.  Implementing  the  construct 
and  evaluate  algorithms  requires  pseudo-random  func- 
tions [15],  which are realized in practice by block ciphers. 
Block ciphers are very fast cryptographic primitives, even if 
implemented in software. 
3.2  Basic Scheme 
We first show how to use the encrypted circuit construc- 
tion  for realizing secure mobile code  computation  with  a 
single host. The extension to multiple hosts is considered in 
Section 3.3. 
Assume T has published  the public key of an encryption 
scheme.  We  denote the  corresponding encryption and de- 
cryption operations by ET(.) and &(.), 
respectively.  As- 
sume further that  all parties  can communicate over secure 
authenticated links, which  could be realized  by  using  stan- 
dard public-key encryption and digital signatures. 
The basic  idea is that  0 constructs an encrypted circuit 
C  computing the  two values 
and z .   It  sends C to H, but 
encrypts all  keys  in K for T  and does not  include the key 
pairs  in  U  which  correspond to E  (denoted by U,) so that 
H  will  not learn anything about E.  Next H selects from K: 
the encrypted keys representing  y and invokes T to decrypt 
them in a single round of interaction. Then H evaluates the 
corresponding to 2, g, and z ,  respectively. 
In  order  to  compute  C(z,y)  from  the  encryption C, 
Bob  needs  one  “key”  for each  input bit:  Li,b corre- 
sponds to  input  bit  zi  = b  and  Ki,b corresponds to 
input bit yi  = b.  The keys Ui,o and Ui,1 represent the 
output bits  of  the encrypted circuit, i.e., if  evaluation 
of the encrypted circuit produces Ui,b, then the output 
bit z; is set to b. 
The particular method in which C is encrypted ensures 
that for every gate in the circuit, given two keys repre- 
senting its input bits, the key representing the resulting 
output bit can be readily computed, but no information 
is revealed about which cleartext bit it represents. 
(2)  Alice and Bob engage in a protocol for oblivious trans- 
fer  [IO]  or  “all-or-nothing-disclosure-of-secrets” [6]. 
This is  an  interactive  two-party  protocol  for a sender 
with  input  two  messages  mo  and  m l   and  a chooser 
with  input a  bit  IT.  At  the  end, the  chooser receives 
m u  but does not learn anything about m u e l ,  and the 
sender has no information  about IT. 
More precisely,  Alice acts as  the  sender of  Ki,o and 
Ki,l, and Bob obtains for every bit yi of his input the 
value K: = Ki,y, but learns nothing about K i , y ; e l .  At 
the same time, Alice learns nothing about yi. 
In addition, Alice computes the keys representing 2 as 
Li  = Li,zi fori = 1,. . . , n, and sends 
c, L:, . . . , LL=, U 
6 
circuit and obtains z ;  it also returns the keys in  the circuit 
output representing E  to 0, who can determine I from this. 
We  now  give  the  details.  Let  C  be  the  binary  circuit 
computing ( I ,  z )  = (g(x, y), h ( z ,  y)) from the same inputs 
with n, +n, input bits 2 1 , .  . . , x,,=, y1, . . . , yn,  and n,+nz 
output bits (1  , . . . , In, , z1 , . . . , z n z ,  slightly  modifying the 
notation from the previous section. The scheme proceeds in 
five steps. 
:1. 
0 chooses a string id that uniquely  identifies the com- 
putation,  e.g.,  containing the  name  of  0, a  descrip- 
tion  of  g  and  h, and  a  sequence counter.  0 invokes 
construct(C) and obtains  (C, C, IC, U) as above with 