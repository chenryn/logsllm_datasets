## 面试题
为什么要进行系统拆分？如何进行系统拆分？拆分后不用 Dubbo 可以吗？

## 面试官心理分析
在当前的技术环境中，分布式系统的知识已成为面试中的标配。几乎所有公司都会考察应聘者在这方面的理解和实践经验。这背后的原因是整个 IT 行业技术发展的自然趋势。

回溯到 2010 年左右，当时大多数中小型 IT 公司还在使用 Struts2、Spring 和 Hibernate 或者稍晚一些的 Spring MVC 与 MyBatis 组合架构来构建应用。那时候，Oracle 数据库管理员非常吃香，而大数据的概念还未普及。然而，随着业务需求的增长和技术的进步，尤其是阿里推出的 Dubbo 框架，推动了更多企业向分布式架构转型。Dubbo 的出现使得许多中小企业能够更容易地实现服务化改造，从而提升开发效率和系统可维护性。因此，在当今的求职市场上，具备分布式系统设计与实现能力已成为基本要求。

## 靈析面試題

### 為什麼要將系統進行拆分？
对于拥有数十万行代码且由多人共同维护的大规模软件项目来说，不进行模块化或服务化会导致以下问题：
- **频繁的代码冲突**：当多个开发者同时修改同一份代码时，很容易产生合并冲突。
- **测试成本高昂**：每次变更都可能影响到其他部分的功能，导致需要进行全面回归测试。
- **发布风险高**：单体应用的每一次更新都需要整体部署，增加了出错几率及恢复时间。
- **技术演进困难**：想引入新技术或者升级现有组件变得异常复杂，因为任何改动都可能对整个系统造成未知影响。

相比之下，通过将大系统拆分为独立的服务单元（即微服务），每个团队成员只需专注于自己负责的那一小块功能，不仅减少了协作摩擦，还提高了灵活性和响应速度。此外，这种方式也便于采用持续集成/持续交付(CI/CD)实践，进一步加快产品迭代周期。

### 如何进行系统拆分？
实施系统拆分通常是一个迭代过程，涉及以下几个步骤：

1. **识别边界**：基于业务逻辑或数据访问模式定义清晰的服务界限。
2. **初步划分**：根据已确定的领域模型开始第一次切割，比如将电子商务平台分解为订单处理、商品展示等子系统。
3. **逐步细化**：随着业务增长和技术栈演变，继续对已有服务做更细致的切分。例如，可以进一步把采购流程细分为供应商管理、采购订单跟踪等多个独立服务。
4. **持续优化**：定期评估各服务间的耦合度以及性能瓶颈，并据此调整设计方案。

重要的是要注意，理想的微服务架构应遵循“单一职责原则”，即每个服务只关注特定领域的功能实现。同时也要考虑到运维便利性和资源利用率等因素。

### 拆分后不用 Dubbo 可以吗？
理论上讲，即使没有使用像 Dubbo 这样的远程过程调用(RPC)框架，也可以通过 HTTP 协议直接让不同服务之间相互通信。不过这样做会带来额外的挑战，如手动处理超时重试机制、实现负载均衡策略等。而 Dubbo 作为一种成熟的 RPC 解决方案，它能帮助开发者轻松应对这些问题，提供诸如自动发现注册、流量调度等功能支持。因此，在实际项目中推荐采用成熟的技术栈来简化开发工作并提高服务质量。