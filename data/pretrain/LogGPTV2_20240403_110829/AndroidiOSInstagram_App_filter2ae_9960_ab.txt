        for s, x, y in sorted(res, key=lambda i: i[0]):
             print "0x%06x, 0x%08x, 0x%08x" % (s, x, y)
    if __name__ == '__main__':
        high = None
        low = None 
        if len(sys.argv) == 2:
            high = int(sys.argv[1], 16)
        elif len(sys.argv) == 3:
             high = int(sys.argv[2], 16)
             low = int(sys.argv[1], 16) 
        main(low, high)
现在，我们已经具备了使用`wildcopy`的先决条件，让我们看看如何利用它们。
要触发此漏洞，我们必须指定一个大于`2 ^ 32`字节的数据长度。实际上，我们需要在到达未映射的内存之前停止`wildcopy`。
我们有很多选择：
>   *
> 依靠竞态条件–尽管wildcopy破坏了一些有用的目标结构或内存，但是我们可以竞争另一个线程，以在wildcopy崩溃之前使用现在已损坏的数据来执行某些操作（例如，构造其他原语，终止wildcopy等）。
>   * 如果wildcopy循环具有某种逻辑，可以在某些情况下停止循环，那么我们可以打乱这些检查，并在破坏足够的数据后停止循环。
>   *
> 如果wildcopy循环在每次迭代时都调用一个虚函数，并且指向该函数的指针位于堆内存中的结构中（或位于我们在wildcopy期间可能损坏的另一个内存地址中），则漏洞利用程序可以使用该循环来覆盖并在wildcopy期间转移执行。
>
遗憾的是，第一种方法不适用于此处，因为我们是从图像向量中进行攻击。 因此，我们对线程没有任何控制，因此竞态条件选项无济于事。
为了使用第二种方法，我们寻找了一个终止开关来停止wildcopy。 我们尝试将文件切成两半，同时保持图像标题中的大小相同。
但是，我们发现，如果解码库达到一个EOF标记，它只会添加另一个EOF标记，因此我们最终陷入EOF标记的无限循环中。
我们还尝试寻找一种`ERREXIT`函数，该函数可以在运行时停止解压缩过程，但是我们了解到，无论我们做什么，我们都永远无法在此代码中找到导致`ERREXIT`的路径。
因此，第二种选择也不适用。
要使用第三个选项，我们需要寻找一个在wildcopy循环的每次迭代中都会调用的虚函数。
让我们回到发生memcpy复制的循环逻辑：
    while ( 1 ){
       output_scanline = cinfo->output_scanline;
       if ( (unsigned int)output_scanline >= cinfo->output_height )
          break;
        jpeg_read_scanlines(cinfo, line_buffer, 1);
        if ( output_scanline >= Rect->left && output_scanline top )
        {
            memcpy(allocated_address + bytes_copied , line_buffer, width*output_component)
            bytes_copied += width * output_component;
        }
     }
我们可以看到，除了覆盖我们的`memcpy…` 之外，只有一个函数可以在每次迭代中调用—`jpeg_read_scanlines`
让我们检查一下`jpeg_read_scanlines`的代码：
    GLOBAL(JDIMENSION)
    jpeg_read_scanlines(j_decompress_ptr cinfo, JSAMPARRAY scanlines,
                        JDIMENSION max_lines)
    {
      JDIMENSION row_ctr;
      if (cinfo->global_state != DSTATE_SCANNING)
        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
      if (cinfo->output_scanline >= cinfo->output_height) {
        WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
        return 0;
      }
      /* Call progress monitor hook if present */
      if (cinfo->progress != NULL) {
        cinfo->progress->pass_counter = (long)cinfo->output_scanline;
        cinfo->progress->pass_limit = (long)cinfo->output_height;
        (*cinfo->progress->progress_monitor) ((j_common_ptr)cinfo);
      }
      /* Process some data */
      row_ctr = 0;
      (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
      cinfo->output_scanline += row_ctr;
      return row_ctr;
    }
在上面的代码中我们可以看到，每次调用`jpeg_read_scanlines`从文件中读取另一行时，我们都会调用虚拟函数`process_data`。
从文件中读取的行被复制到`cinfo`结构内的`row_ctr`的缓冲区中。
    (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
`proccess_data`指向另一个名为`process_data_simple_main`的函数：
    process_data_simple_main(j_decompress_ptr cinfo, JSAMPARRAY output_buf,
                             JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail)
    {
      my_main_ptr main_ptr = (my_main_ptr)cinfo->main;
      JDIMENSION rowgroups_avail;
      /* Read input data if we haven't filled the main buffer yet */
      if (!main_ptr->buffer_full) {
        if (!(*cinfo->coef->decompress_data) (cinfo, main_ptr->buffer))
          return;                   
        main_ptr->buffer_full = TRUE;      
      }
      rowgroups_avail = (JDIMENSION)cinfo->_min_DCT_scaled_size;
      /* Feed the postprocessor */
      (*cinfo->post->post_process_data) (cinfo, main_ptr->buffer,
                                         &main_ptr->rowgroup_ctr, rowgroups_avail,
                                         output_buf, out_row_ctr, out_rows_avail);
      /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
      if (main_ptr->rowgroup_ctr >= rowgroups_avail) {
        main_ptr->buffer_full = FALSE;
        main_ptr->rowgroup_ctr = 0;
      }
    }
从`process_data_simple_main`中，我们可以确定另外2个在每次迭代中都会调用的虚函数。 它们都有一个cinfo结构。
什么是`cinfo`呢？
`Cinfo`是在Mozjpeg各种函数期间传递的结构。 它包含关键成员，函数指针和图像元数据。
让我们看看来自`Jpeglib.h`的`cinfo`结构
    struct jpeg_decompress_struct { 
            struct jpeg_error_mgr *err;   
            struct jpeg_memory_mgr *mem;  
            struct jpeg_progress_mgr *progress; 
            void *client_data;            
            boolean is_decompressor;     
            int global_state 
                struct jpeg_source_mgr *src;
                JDIMENSION image_width;
                JDIMENSION image_height;
                int num_components;
                ...
           J_COLOR_SPACE out_color_space;
           unsigned int scale_num
           ...
           JDIMENSION output_width;      
           JDIMENSION output_height;     
           int out_color_components;     
           int output_components;        
           int rec_outbuf_height;
           int actual_number_of_colors;  
           ...
           boolean saw_JFIF_marker;      
           UINT8 JFIF_major_version;    
           UINT8 JFIF_minor_version;
           UINT8 density_unit;           
           UINT16 X_density;             
           UINT16 Y_density;             
           ...    
           ...
           int unread_marker;
           struct jpeg_decomp_master *master;    
           struct jpeg_d_main_controller *main;     * _struct jpeg_d_post_controller \_ post*
>   * _struct jpeg_d_main_controller \_ main*
>   * struct jpeg_d_coef_controller *coef
>
这3个结构在`Jpegint.h`中定义如下:
    /* Main buffer control (downsampled-data buffer) */
    struct jpeg_d_main_controller {
      void (*start_pass) (j_decompress_ptr cinfo, J_BUF_MODE pass_mode);
      void (*process_data) (j_decompress_ptr cinfo, JSAMPARRAY output_buf,
                            JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail);
    };