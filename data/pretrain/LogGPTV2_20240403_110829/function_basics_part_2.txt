SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Composite Argument
CREATE TABLE emp (name text,
salary numeric,
age integer,
cubicle point);
CREATE FUNCTION double_salary(emp) RETURNS numeric AS $$
SELECT $1.salary * 2 AS salary;
$$ LANGUAGE SQL;
SELECT name, double_salary(emp.*) AS dream
FROM emp WHERE emp.cubicle ~= point ’(2,1)’;
SELECT name,
double_salary(ROW(name, salary*1.1, age, cubicle)) AS dream
FROM emp;
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Polymorphic
CREATE FUNCTION myappend(anyarray, anyelement) RETURNS anyarray AS
$$
SELECT $1 || $2;
$$ LANGUAGE SQL;
SELECT myappend(ARRAY[42,6], 21), myappend(ARRAY[’abc’,’def’], ’xyz’);
myappend | myappend
-----------+---------------
{42,6,21} | {abc,def,xyz}
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Target List versus FROM Clause
CREATE FUNCTION new_emp() RETURNS emp AS $$
SELECT ROW(’None’, 1000.0, 25, ’(2,2)’)::emp;
$$ LANGUAGE SQL;
SELECT new_emp();
new_emp
--------------------------
(None,1000.0,25,"(2,2)")
SELECT * FROM new_emp();
name | salary | age | cubicle
------+--------+-----+---------
None | 1000.0 | 25 | (2,2)
SELECT (new_emp()).name;
name
------
None
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
VARIADIC
CREATE FUNCTION mleast(VARIADIC numeric[]) RETURNS numeric AS $$
SELECT min($1[i]) FROM generate_subscripts($1, 1) g(i);
$$ LANGUAGE SQL;
SELECT mleast(10, -1, 5, 4.4);
mleast
--------
-1
(1 row)
SELECT mleast(42, 6, 42.42);
mleast
--------
6
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
DEFAULT Arguments
CREATE FUNCTION foo(a int, b int DEFAULT 2, c int DEFAULT 3)
RETURNS int LANGUAGE SQL AS $$SELECT $1 + $2 + $3$$;
SELECT foo(10, 20, 30);
foo
-----
60
(1 row)
SELECT foo(10, 20);
foo
-----
33
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
PL/pgSQL
PL/pgSQL is SQL plus procedural elements
variables
if/then/else
loops
cursors
error checking
Loading the language handler into a database:
createlang plpgsql dbname
http://www.postgresql.org/docs/9.1/interactive/plpgsql.html
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Simple
CREATE OR REPLACE FUNCTION sum (text, text)
RETURNS text AS $$
BEGIN
RETURN $1 || ’ ’ || $2;
END;
$$ LANGUAGE plpgsql;
SELECT sum(’hello’, ’world’);
sum
-------------
hello world
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Parameter ALIAS
CREATE OR REPLACE FUNCTION sum (int, int)
RETURNS int AS $$
DECLARE
i ALIAS FOR $1;
j ALIAS FOR $2;
sum int;
BEGIN
sum := i + j;
RETURN sum;
END;
$$ LANGUAGE plpgsql;
SELECT sum(41, 1);
sum
-----
42
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Named Parameters
CREATE OR REPLACE FUNCTION sum (i int, j int)
RETURNS int AS $$
DECLARE
sum int;
BEGIN
sum := i + j;
RETURN sum;
END;
$$ LANGUAGE plpgsql;
SELECT sum(41, 1);
sum
-----
42
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Control Structures: IF ...
CREATE OR REPLACE FUNCTION even (i int)
RETURNS boolean AS $$
DECLARE
tmp int;
BEGIN
tmp := i % 2;
IF tmp = 0 THEN RETURN true;
ELSE RETURN false;
END IF;
END;
$$ LANGUAGE plpgsql;
SELECT even(3), even(42);
even | even
------+------
f | t
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Control Structures: FOR ... LOOP
CREATE OR REPLACE FUNCTION factorial (i numeric)
RETURNS numeric AS $$
DECLARE
tmp numeric; result numeric;
BEGIN
result := 1;
FOR tmp IN 1 .. i LOOP
result := result * tmp;
END LOOP;
RETURN result;
END;
$$ LANGUAGE plpgsql;
SELECT factorial(42::numeric);
factorial
------------------------------------------------------
1405006117752879898543142606244511569936384000000000
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Control Structures: WHILE ... LOOP
CREATE OR REPLACE FUNCTION factorial (i numeric)
RETURNS numeric AS $$
DECLARE tmp numeric; result numeric;
BEGIN
result := 1; tmp := 1;
WHILE tmp <= i LOOP
result := result * tmp;
tmp := tmp + 1;
END LOOP;
RETURN result;
END;
$$ LANGUAGE plpgsql;
SELECT factorial(42::numeric);
factorial
------------------------------------------------------
1405006117752879898543142606244511569936384000000000
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Recursive
CREATE OR REPLACE FUNCTION factorial (i numeric)
RETURNS numeric AS $$
BEGIN
IF i = 0 THEN
RETURN 1;
ELSIF i = 1 THEN
RETURN 1;
ELSE
RETURN i * factorial(i - 1);
END IF;
END;
$$ LANGUAGE plpgsql;
SELECT factorial(42::numeric);
factorial
------------------------------------------------------
1405006117752879898543142606244511569936384000000000
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Record types
CREATE OR REPLACE FUNCTION format ()
RETURNS text AS $$
DECLARE
tmp RECORD;
BEGIN
SELECT INTO tmp 1 + 1 AS a, 2 + 2 AS b;
RETURN ’a = ’ || tmp.a || ’; b = ’ || tmp.b;
END;
$$ LANGUAGE plpgsql;
select format();
format
--------------
a = 2; b = 4
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
PERFORM
CREATE OR REPLACE FUNCTION func_w_side_fx() RETURNS void AS
$$ INSERT INTO foo VALUES (41),(42) $$ LANGUAGE sql;
CREATE OR REPLACE FUNCTION dummy ()
RETURNS text AS $$
BEGIN
PERFORM func_w_side_fx();
RETURN ’OK’;
END;
$$ LANGUAGE plpgsql;
SELECT dummy();
SELECT * FROM foo;
f1
----
41
42
(2 rows)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Dynamic SQL
CREATE OR REPLACE FUNCTION get_foo(i int)
RETURNS foo AS $$
DECLARE
rec RECORD;
BEGIN
EXECUTE ’SELECT * FROM foo WHERE f1 = ’ || i INTO rec;
RETURN rec;
END;
$$ LANGUAGE plpgsql;
SELECT * FROM get_foo(42);
f1
----
42
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Cursors
CREATE OR REPLACE FUNCTION totalbalance()
RETURNS numeric AS $$
DECLARE
tmp RECORD; result numeric;
BEGIN
result := 0.00;
FOR tmp IN SELECT * FROM foo LOOP
result := result + tmp.f1;
END LOOP;
RETURN result;
END;
$$ LANGUAGE plpgsql;
SELECT totalbalance();
totalbalance
--------------
83.00
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Error Handling
CREATE OR REPLACE FUNCTION safe_add(a integer, b integer)
RETURNS integer AS $$
BEGIN
RETURN a + b;
EXCEPTION
WHEN numeric_value_out_of_range THEN
-- do some important stuff
RETURN -1;
WHEN OTHERS THEN
-- do some other important stuff
RETURN -1;
END;
$$ LANGUAGE plpgsql;
http://www.postgresql.org/docs/9.1/interactive/errcodes-appendix.html
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Nested Exception Blocks
CREATE FUNCTION merge_db(key integer, data text)
RETURNS void AS $$
BEGIN
LOOP
UPDATE db SET b = data WHERE a = key;
IF found THEN RETURN;
END IF;
BEGIN
INSERT INTO db (a, b) VALUES (key, data);
RETURN;
EXCEPTION WHEN unique_violation THEN
-- do nothing
END;
END LOOP;
EXCEPTION WHEN OTHERS THEN
-- do something else
END;
$$ LANGUAGE plpgsql;
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Thank You
Questions?
JoeConway SCALE10X-PGDay