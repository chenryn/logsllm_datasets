Alice: Request
Resource
Response
Active
Cert
Active
Cert
KBob
KAlice
Figure 3. Chained Active Certiﬁcates.
3.1 Chained Operation
To begin, consider a simple example, where Bob wishes
to delegate rights he acquired via an active certiﬁcate fur-
ther. He creates a new certiﬁcate program that enforces his
own restrictions, signs it, and hands it to Carol. When Carol
wishes to access the Resource, she presents it with both
Bob’s and Alice’s certiﬁcates. The Resource instantiates the
certiﬁcates in a chain, as shown in Figure 3. Carol’s request
is ﬁrst passed to Bob’s certiﬁcate, which then forwards it to
Alice’s certiﬁcate. At this point the request is authenticated
as coming from Bob, and will therefore be accepted by
Alice’s certiﬁcate. Responses are passed back up the chain
of certiﬁcates. Carol can re-delegate her rights using the
same process; chains of certiﬁcates of arbitrary depth are
possible.
Notice that although Alice may not wish Bob to be able
to redelegate her rights, in general she cannot prevent him
from doing so. Even if the runtime system allowed Alice’s
certiﬁcate to differentiate between chained and non-chained
operation, Bob could simply create a delegation proxy that
is completely transparent to the system.
3.2 Policy Attributes
As witnessed above, chaining can be used to combine
several active certiﬁcates to implement a composite policy.
This is a powerful technique that can be used to break a
complex policy into several subcomponents, bringing with
it the promise of policy modularity. However, modularity
requires another important principle: abstraction.
Abstraction can be implemented by way of policy at-
tributes. We create a new type of request, which is a
wrapper around another request (of arbitrary type) with an
additional attribute ﬁeld. This ﬁeld is used to specify a
policy abstraction generated by one active certiﬁcate and
intended to be consumed by another.
In this way, active
certiﬁcates can communicate policy decisions to each other.
Consider the following: suppose Alice wants to delegate
access to ﬁle "foo" to a group of her friends. An active
certiﬁcate to enforce this policy would need to perform two
checks: that the request is coming from a member of the
group of friends, and that the request is of the appropriate
form, i.e. accesses "foo". Policy attributes allow these
checks to be separated into two certiﬁcates: one that veriﬁes
membership in the “friends” group and one that veriﬁes
the request type. The former certiﬁcate would check the
originator of a request, and then add an isFriend attribute if
the membership is correct. The latter would verify that the
isFriend attribute is present, and then proceed with the path
name checks.
Such decomposition allows policy components to be
reused. Alice could create many policies that rely on
delegating some rights to her friends, each of which could
make use of the isFriend attribute. She can then evolve her
set of friends without modifying any of these policies by
issuing new certiﬁcates that generate the isFriend attribute.
Decomposition also allows distribution of trust.
In our
example, certiﬁcates that consume the isFriend attribute
must ensure that attributed requests are authenticated as
coming from Alice, since presumably only Alice should be
allowed to decide who her friends are. However, for other
kinds of policies, Alice may trust someone else to deﬁne
those abstractions; for example, she might want to delegate
some rights to Bob’s friends.
3.3 Application Policy Adapters
Although typically policy attributes are consumed by
chained active certiﬁcates and are not passed onto the ap-
plication, some applications may wish to accept attributed
requests in order to facilitate policy implementation. For
example, it may be easier for the ﬁle system to identify
requests that are read-only internally; in this case, it may
choose to accept attributed requests with a readOnly at-
tribute, and refuse to carry out any modiﬁcation operations
for such requests.
Then the example certiﬁcate from
Figure 2 could be rewritten to allow any requests but add
a readOnly attribute.
Another way to provide support is to create an adapter
agent operating outside the application that consumes pol-
icy attributes such as readOnly and enforces restrictions
based on request type. This agent can either be used as
a library by Alice’s other certiﬁcates, or instantiated as
In the latter case, the certiﬁcate
a standalone certiﬁcate.
would not be performing delegation but instead enforcing
a higher-level policy;
therefore, it should be signed by
Alice and only accept requests from her. Placing the agent
outside the application has the advantage that it can evolve
independently.
3.4 Hierarchical PKI
A more complex example that uses composition and ab-
straction is a hierarchical public key infrastructure. A public
key infrastructure uses certiﬁcates to create associations
between names and public keys. We can represent these
name associations as policy attributes. For example, in a ﬂat
.
hierarchy, a certiﬁcate authority may assign Bob the key
In this case, the CA would create an active certiﬁcate that
and forwards
accepts any request authenticated with key
an attributed request with the ﬁeld name set to “Bob”. Other
certiﬁcates can rely on such mappings to delegate rights to
named principals, instead of public keys; those certiﬁcates
should accept requests authenticated as coming from the
CA and with the name ﬁeld set appropriately. Of course,
the CA is then able to issue arbitrary requests claiming to
be from an authorized principal, but this is inherent in all
hierarchical public key infrastructures: a CA is always free
to associate a name with its own key and thus impersonate
any principal. Our formulation merely makes this ability
more explicit.
It is easy to introduce subauthorities: the root CA cre-
ates a certiﬁcate which accepts any named request that is
authenticated by the key of the subauthority, as long as the
name is within the authority’s domain of power; this is a
straightforward example of rights delegation. Notice that
in this case there is a one-to-one correspondence between
conventional certiﬁcates used in a hierarchical PKI to create
the name-key bindings for “Bob” and active certiﬁcates.
In this case, each active certiﬁcate encodes the operational
semantics of its passive counterpart.
3.5 Discussion
The fact that it was easy to build a hierarchical PKI out of
active certiﬁcates speaks to their generality. The resulting
system not only duplicates many of the features of conven-
tional PKIs, it also has interesting new properties, such as
ease of interoperation, extensibility, and the potential for a
more secure TCB.
Interoperation is an important requirement of PKIs: com-
panies frequently use cross-certiﬁcation [2] to connect their
corporate infrastructures. However, both systems must be
able to understand each other’s certiﬁcate format, name-
spaces, etc. The use of active certiﬁcates provides an easier
way to connect two hierarchies; all that is necessary is an
active certiﬁcate chaining trust from a node on the ﬁrst
hierarchy to the root (or some other node) on the other.
The certiﬁcate acts as a “bridge” between the two systems,
performing any necessary namespace translations and other
modiﬁcations to make the systems compatible. Its role here
can be compared to an active proxy [11] protocol adapter.
Active certiﬁcates also leave plenty of room for exten-
sion. A general purpose language allows any computable
function to be used as a policy, and the interposition
architecture avoids any limitations of an explicit interface
with the Resource. As a result, it is possible to create
certiﬁcates expressing new types of policies and integrate
them with an existing system. It is even possible to evolve
policy abstractions over time, using adapter certiﬁcates to
provide backwards compatibility. In contrast, conventional
certiﬁcate systems are difﬁcult to upgrade, since all the
libraries that interpret certiﬁcates must be replaced, and
backwards compatibility may be difﬁcult to achieve.
The active certiﬁcate architecture may also help to make
the trusting computing base more secure. Complex certiﬁ-
cate libraries can be removed from the TCB and replaced
by a general-purpose language interpreter. An interpreter
for an established language is likely to be more mature than
any given certiﬁcate library. Further, there may be incentive
for commercial vendors to offer the core of their system
as open-source, since most of a given solution’s value lies
in management subcomponents which, while essential to
operation, are not security critical.
In this way, they can
provide their customers with a higher assurance of security
than is possible today.
Unfortunately, active certiﬁcates cannot duplicate all of
the features of modern PKIs. Since it is undesirable to
allow a mobile agent to open new network connections,
it is difﬁcult to implement certiﬁcate revocation lists using
active certiﬁcates (although the “bill-of-health” certiﬁcates
proposed by Rivest [31] could be supported). It is still pos-
sible to implement revocation lists in the runtime system,
but that solution lacks the advantages of active certiﬁcates
such as the easy ability to change algorithms. Automated
certiﬁcate management is also complicated by the fact
that it is infeasible to automatically tell what an active
certiﬁcate does based on its content, thus it is difﬁcult
to tell which subset of a collection of certiﬁcates will be
useful to authenticate Bob to the Resource. And despite
a smaller TCB, running untrusted mobile code, even in
a restricted environment, is still considered a risk today.
Nonetheless, active certiﬁcates present an interesting, if
not yet practical, new direction for implementing PKIs and
other policy systems.
4 Security Analysis
In this section, we formally model the operation of
active certiﬁcates using a belief logic deﬁned by Abadi et
al [1]. Formal methods have been used to examine and
formally verify a large number of security systems; they
have helped to identify problems and hidden assumptions
in many. Even outside the context of proofs of security, a
formal speciﬁcation of a system can often lead to a better
understanding of its properties. We will therefore proceed
to describe the operation of active certiﬁcates using the
logic.
When Alice ordinarily accesses the Resource without del-
over a secure channel. This is
egation, she sends a request
represented in the logic as
. The Resource receives
the message and performs an authorization decision to see
if Alice is allowed to do action , and if the authorization is
successful, proceeds with the request.
When Bob wishes to access the resource, he ﬁrst sends
Alice’s active certiﬁcate to the Resource. The certiﬁcate
is signed by Alice’s public key, which we can model by
. The contents of the certiﬁcates represent Alice’s
policy delegating access to Bob, so it may be tempting to
is the “speaks for” operator,
say
deﬁned as
, where
1
unrestricted ability to do anything
After sending the certiﬁcate, Bob sends his request
(1)
However, this would be incorrect, since that statement gives
is allowed to do,
as opposed to only the things allowed by the certiﬁcate
program. We must therefore examine the operation of active
certiﬁcates more closely.
to
the Resource. The request is given as input to the certiﬁcate
. To model the program
program, which we will call
within the logic, we consider it as a function on statements
in the logic. Since the program knows that it was Bob who
as input. The program
made the request, we give it
, which
then produces another request
is then passed to the Resource. At this point,
must be
interpreted as if it were coming from Alice for delegation
to succeed. Since the program is acting on Alice’s behalf,
operator. We need to deﬁne a
it is appropriate to use the
representing the program, and introduce
new principal
the following rule:
(2)
says whatever the program outputs.
In other words,
Now Alice’s certiﬁcate can be deﬁned simply as:
1Similar to the notation used by Abadi et al, we use
logical containment relation;
means that if
then .
(3)
to represent the
. Then it can derive
from Bob, the Resource
So, upon getting the request
passes it to the active certiﬁcate to obtain
. It then applies (2) to obtain
. Now it needs to
interpret the policy in the active certiﬁcate. We will assume
that it knows that
is Alice’s public key, and therefore
. We also
need another assumption:
, which
says that Alice has the authority to delegate her rights —
this is not implicit in the logic, but necessary for our system.
Combining the two statements, the Resource obtains
, which allows it to apply (1) and ﬁnally derive
.
At this point it can apply the authorization decision as if
Alice made the request herself, and the delegation succeeds.