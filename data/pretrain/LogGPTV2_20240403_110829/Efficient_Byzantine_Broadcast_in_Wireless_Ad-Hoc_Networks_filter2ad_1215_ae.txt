# Figures and Captions
**Figure 15: Latency to Deliver a Message to X% of the Nodes When All Nodes Are Static with Varying Number of Byzantine Nodes**
- **Latency (seconds):** 4.5, 3.5, 3, 2.5, 2, 1.5, 1, 0.5, 0
- **Byzantine Nodes:** BDP-0, BDP-1, BDP-2, BDP-8, BDP-14
- **Percentage of Nodes:** 0%, 20%, 40%, 60%, 80%, 100%

**Figure 16: Latency to Deliver a Message to X% of the Nodes When Nodes Are Mobile with Varying Number of Byzantine Nodes**
- **Latency (seconds):** 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
- **Byzantine Nodes:** BDP-0, BDP-1, BDP-2, BDP-8, BDP-14
- **Percentage of Nodes:** 0%, 20%, 40%, 60%, 80%, 100%

# Background and Related Work

## Broadcast and Multicast in Large Groups
Broadcast and multicast have been widely used in large groups, such as in IP multicast [39, 45] and in the MBone [20, 33]. More sophisticated overlay networks, such as hypercubes and Harary graphs, have been explored in [22, 32], as well as distributed hash tables like SCRIBE [42].

## Message Detection and Gossip Protocols
The concept of a process detecting missing messages by exchanging information with other processes was first introduced in the MNAK layer of the Ensemble system in 1996 [27]. Randomized gossip has been used to ensure reliable delivery of broadcast/multicast messages while maintaining high throughput in the PBcast/Bi-modal work [6] and subsequent papers [19]. In these works, nodes can choose their gossip partners randomly. In contrast, our approach involves gossiping with all physically determined neighbors, and it also accounts for Byzantine failures, which [6, 19, 27] did not.

## Secure Point-to-Point Routing
There has been extensive research on securing point-to-point routing schemes against malicious nodes. For example, [2] describes a mechanism for detecting malicious faults along a path and discovering alternative routes. Another secure routing protocol (SRP) [37] requires a secure association between each pair of source and destination but assumes that Byzantine nodes do not collude. SMT [38] protects pairwise communication by breaking messages into pieces and sending them along different paths. Other examples include [43, 49, 50].

## Gossip in Wired Networks
Minsky and Schneider [36] explored disseminating information using gossip in wired networks, where some nodes may be faulty. They proposed only trusting gossips that have the support of at least f + 1 nodes, where f is the number of potential Byzantine nodes. Similar approaches, such as sending messages along f + 1 distinct paths, have been proposed in [15, 34]. Using multiple stochastic paths to reduce interception possibilities has been studied in [7].

## Reliable Byzantine Tolerant Broadcast and Multicast
Reliable Byzantine-tolerant broadcast and multicast in networks where all nodes can communicate directly have been formally described in [8] and explored in [15, 35]. The works in [4, 9] propose a formal framework for defining and implementing reliable multicast protocols in hybrid failure environments (Byzantine, crash, and omission) based on modern cryptography. They also investigate the computational complexity of such protocols.

## Fault-Tolerance by Adaptation
A framework for fault-tolerance by adaptation was proposed in [11]. This framework runs a simple protocol during normal operation alongside a failure detection mechanism. Upon detecting a failure, the execution switches to a masking protocol. While this approach is somewhat similar to ours, [11] does not detail how the overlay (a tree in their case) is constructed and maintained. Additionally, their masking protocol uses flooding, whereas we avoid flooding even when failures are detected. Our approach first attempts local message recovery. Furthermore, [11] does not explain when and how to return to the simple protocol after a failure is compensated for. Our work encapsulates failure detection behind failure detectors, resulting in a modular implementation.

## Failure Detectors
The notion of a failure detector, which captures the required functional properties of failure detection without specifying explicit timing assumptions, was initiated by Chandra and Toueg in the context of the Consensus problem [10]. Mute failure detectors were initially proposed in [17, 18] to solve Byzantine Consensus in asynchronous systems. They were later used in [5, 24]. The use of a trusted timely control channel (TTCB) was explored as another means of solving Byzantine Consensus efficiently in [14]. TTCB can be used to implement mute failure detectors, for example, by using cellular communication for TTCB while sending normal data over WiFi.

# Discussion and Conclusions

In this work, we describe a Byzantine-tolerant broadcast protocol for mobile ad-hoc networks. The protocol disseminates messages along the arcs of a logical overlay and relies on signatures to prevent message forgery. It also employs gossiping of headers of known messages to prevent Byzantine overlay nodes from stopping the dissemination of messages. For efficiency, the overlay maintenance mechanism ensures that enough correct nodes are elected to the overlay so that Byzantine nodes cannot disconnect it beyond the time required to detect such behavior. The detection of observable Byzantine behaviors, such as mute and verbose failures, is encapsulated within corresponding failure detector modules. The use of failure detectors simplifies the protocol and makes it more generic and robust, as it need not deal explicitly with issues like timers and timeouts.

Our measurements confirm that for non-sparse networks, the protocol performs very well, achieving high delivery ratios while sending fewer messages than flooding. When there is no Byzantine activity, our protocol is almost as economical as a protocol with no recovery mechanism and much more efficient than flooding. When Byzantine failures occur, our protocol remains more efficient than flooding while maintaining a comparable delivery rate. In contrast, having no recovery mechanism results in a significant drop in delivery rates when there are Byzantine failures or mobility. Interestingly, Byzantine failures have a reduced impact when nodes are mobile, as the chance of Byzantine nodes being at critical positions on message dissemination paths is lower.

We detect and cope with verbose attacks but do not address denial of service attacks caused by Byzantine nodes constantly sending messages to jam the network. This problem can only be solved at the hardware level, e.g., using frequency hopping techniques borrowed from electronic warfare [12]. A solution to this denial of service problem will not provide a remedy for other forms of Byzantine behavior.

Finally, power consumption is a major issue in mobile ad-hoc networks, as nodes are typically battery-operated. The network card consumes similar energy levels when sending, receiving, or listening for messages. The main source of energy saving is to put the card in sleep mode. The IEEE 802.11 standard includes Power Save Mode to address this problem in wireless LANs. Extending this to multi-hop ad hoc networks is an interesting challenge. Developing a Byzantine broadcast protocol that enables most nodes to sleep most of the time to reduce energy consumption is a future direction.

**Acknowledgements:**
We would like to thank Eli Biham and Elad Barkan for advising us on the usage of cryptography for this work.

# References
[References listed here as in the original text]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.