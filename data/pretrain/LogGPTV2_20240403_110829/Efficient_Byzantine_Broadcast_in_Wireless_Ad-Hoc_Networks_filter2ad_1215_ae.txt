e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
)
c
e
s
(
y
c
n
e
a
t
l
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0
0
BDP−0
BDP−1
BDP−2
BDP−8
BDP−14
20
40
60
80
100
%nodes
)
c
e
s
(
y
c
n
e
a
t
l
10
9
8
7
6
5
4
3
2
1
0
BDP−0
BDP−1
BDP−2
BDP−8
BDP−14
0
20
40
60
80
100
%nodes
Figure 15: Latency to deliver a message to X% of
the nodes when all nodes are static with varying
number of Byzantine nodes
Figure 16: Latency to deliver a message to X%
of the nodes when nodes are mobile with varying
number of Byzantine nodes
large groups, e.g., in IP multicast [39, 45] and in the MBone [20, 33]. More sophisticated overlays such as
hypercubes and Harary graphs have been explored, e.g., in [22, 32], as well as distributed hash tables like
SCRIBE [42].
The idea that a process can detect that it is missing a message by exchanging messages with other
processes ﬁrst appeared, to the best of our knowledge, in the MNAK layer of the Ensemble system in
1996 [27]. Additionally, randomized gossip has been used as a method of ensuring reliable delivery of
broadcast/multicast messages while maintaining high throughput in the PBcast/Bi-modal work [6] as well
as in several followup papers, e.g., [19]. In these works it is assumed that a node can choose with whom
it wishes to gossip, and does so in a random manner. In contrast, in our case gossiping is done with all
neighbors that are physically decided by the movement of nodes and transmission ranges. Also, the works
of [6, 19, 27] ignored Byzantine failures.
There has been a lot of work on securing point-to-point routing schemes against malicious nodes. Due
to space limitations, we will only mention a few of them. One example is the protocol presented in [2]. In
this work, the authors describe a mechanism for detecting malicious faults along a path and then discovering
alternative paths. Another secure routing protocol (SRP) has been proposed in [37]. SRP requires a secure
association between each pair of source and destination but assumes that Byzantine nodes do not collude.
Yet another protocol, SMT [38], protects pairwise communication by breaking the message into several
pieces based on a coding scheme that allows reconstructing the message even when some pieces are lost.
Each piece is then sent along a different path. Additional examples of secure point-to-point routing include,
e.g,. [43, 49, 50].
The work of Minsky and Schneider [36] explored disseminating information using gossip in wired net-
works, when some nodes can be faulty. This is by only trusting gossips that have gained the support of
at least f + 1 nodes, where f is the number of potential Byzantine nodes. Several other works have also
proposed a Byzantine multicast scheme that sends a message along f + 1 distinct paths [15, 34]. Similarly,
using multiple paths chosen in a stochastic manner in order to reduce the possibility of interception have
been studied in [7].
Reliable Byzantine tolerant broadcast and multicast in networks where all nodes can communicate di-
17
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
rectly with each other has been formally described in [8], and has been explored, e.g., in [15, 35]. Also, the
works in [4, 9] have proposed a formal framework for deﬁning and implementing reliable multicast proto-
cols in a hybrid failure environment (Byzantine, crash, and omission) based on modern cryptography. In
particular, they have investigated the computational complexity of such protocols.
A framework for fault-tolerance by adaptation was proposed in [11]. In this framework, a simple proto-
col is run during normal operation alongside some failure detection mechanism. Once a failure is detected,
the execution switches to a masking protocol. This idea was demonstrated in [11] on the broadcast problem,
which results in a somewhat similar solution to ours. However, in [11] it was not mentioned how the overlay
(a tree in their case) is constructed and maintained. Also, the masking protocol was ﬂooding, whereas we
avoid ﬂooding even when failures are detected. Instead, in our approach, local message recovery is ﬁrst
attempted. Moreover, in [11] it was not explained when and how to return to the simple protocol once a
failure is compensated for. Finally, our work encapsulates failure detection behind failure detectors, which
results in a modular implementation.
The notion of a failure detector, which capture the required functional properties of failure detection
without specifying explicit timing assumptions, was initiated by Chandra and Toueg in the context of the
Consensus problem [10]. Mute failure detectors were initially proposed in [17, 18] in order to solve Byzan-
tine Consensus in otherwise asynchronous systems. They were later used also in [5, 24]. Moreover, the
use of a trusted timely control channel, called TTCB, was explored as another mean of solving Byzantine
Consensus efﬁciently in [14]. In fact, TTCB can be used to implement mute failure detectors. For example,
when each node has both WiFi and cellular communication, one might be able to implement a TTCB using
cellular communication while sending normal data using WiFi.
7 Discussion and Conclusions
In this work we have described a Byzantine tolerant broadcast protocol for mobile ad-hoc networks. The
protocol disseminates messages along the arcs of a logical overlay. The protocol relies on signatures to
prevent messages from being forged. It also employs gossiping of headers of known messages to prevent a
Byzantine overlay node from stopping the dissemination of messages to the rest of the system. Additionally,
for efﬁciency reasons, the overlay maintenance mechanism is augmented to ensure that enough correct
nodes are elected to the overlay so that Byzantine nodes do not disconnect the overlay beyond the time
required to detect such behavior. Finally, the detection of observable Byzantine behaviors, such as mute
and verbose failures, are encapsulated within corresponding failure detectors modules. The use of failure
detectors simpliﬁes the presentation of the protocol and makes it more generic and robust. This is because
the protocol need not deal explicitly with issues like timers and timeouts.
Our measurements conﬁrm that for non-sparse networks, the protocol behaves very well. That is, our
protocol obtains very high delivery ratios while sending much fewer messages than ﬂooding. When there is
no Byzantine activity, our protocol is almost as economical as a protocol that has no recovery mechanism
(and in particular, much more efﬁcient than ﬂooding). When some Byzantine failures occur, our protocol
still remains more efﬁcient than ﬂooding, while maintaining a comparable delivery rate. In contrast, when
there are Byzantine failures or mobility, having no recovery mechanism results in a signiﬁcant drop in
delivery rates. Additionally, we discovered the interesting anecdote that Byzantine failures have a somewhat
reduced impact when the nodes are mobile. Intuitively, when nodes are mobile, there is a lower chance that
Byzantine nodes will constantly be at critical positions on the message dissemination paths for all messages.
In this work we detect and cope with verbose attacks. However, we do not address denial of service
attacks caused by Byzantine nodes constantly sending messages in order to jam the network (at the MAC
18
level). This problem can only be solved at the hardware level, e.g., using frequency hopping techniques
borrowed from electronic warfare [12]. While this is a very important issue, it is orthogonal to other forms
of Byzantine failures. In particular, a solution to this denial of service problem will not provide remedy for
the other forms of Byzantine behavior.
Finally, one of the main problems in mobile ad-hoc networks is power. As nodes are mobile, they are
typically battery operated. It turns out that the network card consumes roughly the same levels of energy
when it sends a message, receives a message, and listen for messages. The main source of energy saving
is to put the card in sleeping mode. The IEEE 802.11 standard includes the Power Save Mode in order to
deal with this problem in wireless LANs when all messages are point to point. There have also been a few
attempts to extend this to multiple hops networks with point to point messages, such as [3]. An interesting
problem is to develop a Byzantine broadcast protocol for multiple hop ad hoc networks that enables most
nodes to sleep most of the time in order to reduce their energy consumption.
Acknowledgements: We would like to thank Eli Biham and Elad Barkan for advising us on the usage of
cryptography for this work.
References
[1] http://jist.ece.cornell.edu/.
[2] B. Awerbuch, D. Holmer, C. Nita-Rotaru, and H. Rubens. An On-Demand Secure Routing Protocol Resilient to
Byzantine Failures. In Proc. ACM Workshop on Wireless Security (WiSe), Atlanta, GA, September 2002.
[3] B. Awerbuch, D. Holmer, and H. Rubens. The Pulse Protocol: Energy Efﬁcient Infrastructure Access. In Proc.
of the 23rd Conference of the IEEE Communications Society (Infocom), March 2004.
[4] M. Backes and C. Cachin. Reliable Broadcast in a Computational Hybrid Model with Byzantine Faults, Crashes,
and Recoveries. In Proc. of the International Conference on Dependable Systems and Networks (DSN), June
2003.
[5] R. Baldoni, J.M. Helary, and M. Raynal. From Crash-Fault Tolerance to Arbitrary-Fault Tolerance: Towards a
Modular Approach. In Proc. of the IEEE International Conference on Dependable Systems and Networks (DSN),
pages 273–282, June 2000.
[6] K. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu, , and Y. Minsky. Bimodal Multicast. ACM Transactions
on Computer Systems, 17(2):41–88, May 1999.
[7] S. Bohacek, J. Hespanha, J. Lee, C. Lim, and K. Obraczka. Enhancing Security via Stochastic Routing.
In
Proc. of the 11th IEEE International Conference on Computer Communications and Networks, pages 58–62,
May 2002.
[8] G. Bracha and S. Toueg. Asynchronous Consensus and Broadcast Protocols. Journal of the ACM, 32(4):824–840,
October 1985.
[9] C. Cachin, K. Kursawe, F. Petzold, and V. Shoup. Secure and Efﬁcient Asynchronous Broadcast Protocols. In
Proc. of Advances in Cryptology: CRYPTO 2001, pages 524–541, 2001.
[10] T. Chandra and S. Toueg. Unreliable Failure Detectors for Asynchronous Systems.
Journal of the ACM,
43(4):685–722, July 1996.
[11] I. Chang, M.A. Hiltunen, and R.D. Schlichting. Affordable Fault Tolerance Through Adaptation. In Proc. of
Workshop on Fault-Tolerant Parallel and Distributed Systems (LNCS 1388), pages 585–603, April 1998.
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
19
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
[12] M.C.-H. Chek and Y.-K. Kwok. On Adaptive Frequency Hopping to Combat IEEE 802.11b with Practical
Resource Constraints. In International Symposium on Parallel Architectures, Algorithms and Networks (ISPAN),
pages 391–396, May 2004.
[13] T. Clause, P. Jacquet, and A. Laouti. Optimized Link State Routing Protocol. In Proc. IEEE International Multi
Topic Conference (INMIC), December 2001.
[14] M. Correia, N.F. Neves, L.C. Lung, and P. Ver´ıssimo. Low complexity byzantine-resilient consensus. Technical
Report TR-03-25, DI-FCUL, University of Lisbon (Portugal), 2003. To appear in Distributed Computing.
[15] F. Cristian, H. Aghili, R. Strong, and D. Dolev. Atomic Broadcast: From Simple Diffusion to Byzantine Agree-
ment. In Proc. of the 15th International Conference on Fault-Tolerant Computing, pages 200–206, Austin, Texas,
1985.
[16] F. Cristian and C. Fetzer. The Timed Asynchronous Distributed System Model. IEEE Transanctions on Parallel
and Distributed Systems, 10(6):642–657, June 1999.
[17] A. Doudou, B. Garbinato, R. Guerraoui, and A. Schiper. Muteness Failure Detectors: Speciﬁcation and Imple-
mentation. In Proc. 3rd European Dependable Computing Conference (EDCC), pages 71–87, 1999.
[18] A. Doudou and A. Schiper. Muteness Detectors for Consensus with Byzantine Processes (Brief Announcement).
In Proc. 17th ACM Symposium on Principles of Distributed Computing (PODC), page 315, 1998.
[19] P. Th. Eugster, R. Guerraoui, S. B. Handurukande, P. Kouznetsov, and A.-M. Kermarrec. Lightweight Proba-
bilistic Broadcast. ACM Transactions on Computing Systems, 21(4):341–374, 2003.
[20] S. Floyd, van Jacobson, S. McCanne, C. Liu, and L. Zhang. A Reliable Multicast Framework for Light-Weight
Sessions and Application Level Framing. In Proc. ACM SIGCOMM’95, August 1995.
[21] R. Friedman, M. Gradinariu, and G. Simon. Locating Cache Proxies in MANETs. In Proc. 5th ACM Interna-
tional Symposium on Mobile Ad Hoc Networking and Computing (MobiHoc), pages 175–186, May 2004.
[22] R. Friedman, S. Manor, and K. Guo. Scalable Hypercube Based Stability Detection.
IEEE Transactions on
Parallel and Distributed Systems, 13(8), August 2002.
[23] R. Friedman, A. Mostefaoui, and M. Raynal. Asynchronous Bounded Lifetime Failure Detectors. Information
Processing Letters. To appear.
[24] R. Friedman, A. Mostefaoui, and M. Raynal. Simple and Efﬁcient Oracle-Based Consensus Protocols for Asyn-
chronous Byzantine Systems. In Proc. of the 23rd IEEE International Symposium on Reliable Distributed Sys-
tems (SRDS), pages 228–237, October 2004.
[25] J.J. Garcia-Luna-Aceves and E.L. Madruga. The Core-Assisted Mesh Protocol. IEEE Journal on Selected Areas
in Communications, 17(8):1380–1394, August 1999.
[26] Z. Haas. A New Routing Protocol for the Reconﬁgurable Wireless Networks.
In Proc. IEEE Int. Conf. on
Universal Personal Communications (ICUP), October 1997.
[27] M. Hayden. The Ensemble System. Technical Report TR98-1662, Department of Computer Science, Cornell
University, January 1998.
[28] D.B. Johnson and D.A. Maltz. Dynamic Source Routing in Ad Hoc Wireless Networks. In Imielinski and Korth,
editors, Mobile Computing, volume 353. Kluwer Academic Publishers, 1996.
[29] B. Karp. Geographic Routing for Wireless Networks. PhD thesis, Harvard University, 2000.
[30] Y. Ko and N. H. Vaidya. Geocasting in Mobile Ad Hoc Networks: Location-Based Multicast Algorithms. In
Proc. 2nd IEEE Workshop on Mobile Computer Systems and Applications, page 101, 1999.
[31] J. Li, J. Jannotti, D. S. J. De Couto, D. R. Karger, and R. Morris. A Scalable Location Service for Geographic Ad
Hoc Routing. In Proc. 6th Annual International Conference on Mobile Computing and Networking (MobiCom),
pages 120–130, 2000.
20
[32] M.-J. Lin, K. Marzullo, and S. Masini. Gossip versus Deterministically Constrained Flooding on Small Net-
works. In Proc ˙14th International Conference on Distributed Computing 2000, pages 253–267, October 2000.
[33] M.R. Macedonia and D.P. Brutzman. MBone Provides Audio and Video Across the Internet. IEEE Computer,
27(4):30–36, April 1994.
[34] D. Malkhi, Y. Mansour, and M.K. Reiter. Diffusion Without False Rumors: on Propagating Updates in a Byzan-
tine Environment. Theoretical Computer Science, 1–3(299):289–306, April 2003.
[35] Dahlia Malkhi and Michael Reiter. A High-Throughput Secure Reliable Multicast Protocol. Journal of Computer
Security, 5:113–127, 1997.
[36] Y. Minsky and F.B. Schneider. Tolerating Malicious Gossip. Distributed Computing, 16(1):49–68, 2003.
[37] P. Papadimitratos and Z. Haas. Secure Routing for Mobile and Ad Hoc Networks. In Proc. Communication
Networks and Distributed Systems Modeling and Simulations Conference, January 2002.
[38] P. Papadimitratos and Z. Haas. Secure Message Transmission in Mobile and Ad Hoc Networks. Ad Hoc Net-
works, 1, July 2003.
[39] S. Paul, K. K. Sabnani, J. C. Lin, and S. Bhattacharya. Reliable Multicast Transport Protocol (RMTP). IEEE
Journal on Selected Areas in Communications, 15(3):407–421, April 1997. Special issue on Network Support
for Multipoint Communication.
[40] C. Perkins. Ad Hoc On Demand Distance Vector (AODV) Routing. Internet Draft, draft-ietf-manet-aodv-00.txt,
citeseer.nj.nec.com/article/perkins99ad.html, 1997.
[41] A. Rao, C. Papadimitriou, S. Shenker, and I. Stoica. Geographic Routing without Location Information. In Proc.
9th Annual International Conference on Mobile Computing and Networking (MobiCom), pages 96–108, 2003.
[42] A. Rowstron, A-M. Kermarrec, M. Castro, and P. Druschel. SCRIBE: The Design of a Large Scale Event
Notiﬁcation Infrastructure. In Proceedings of 3rd International Workshop on Networked Group Communication,
November 2001.
[43] K. Sanzgiri, B. Dahill, B. Levine, C. Shields, and E.M. Belding-Royer. A Secure Routing Protocol for Ad Hoc
Networks. In Proc. of the IEEE International Conference on Network Protocols (ICNP), November 2002.
[44] B. Schneier. Applied Cryptography. Wiley, 1996.
[45] A. S. Tanenbaum. Computer Networks. Prentice Hall PTR, 1996. Third Edition.
[46] C.K. Toh. Ad Hoc Mobile Wireless Networks. Prantice Hall, 2002.
[47] C.W. Wu and Y.C. Tay. AMRIS: A Multicast Protocol for Ad-Hoc Wireless Networks. In Proceedings of the
IEEE MILCOMM ’99, November 1999.
[48] J. Wu, M. Gao, and I. Stojmenovic. On Calculating Power-Aware Connected Dominating Sets for Efﬁcient
Routing in Ad Hoc Wireless Networks. In Proc. of the 30th International Conference on Parallel Processing
(ICPP), pages 346–353, 2001.
[49] S. Yi, P. Naldurg, and R. Kravets. Security Aware Ad Hoc Routing for Wireless Networks.
In Proc. ACM
Syposium on Mobile Ad Hoc Networking and Computing, October 2001.
[50] M.G. Zapata and N. Asokan. Secure Ad Hoc Routing Protocol. In Proc. ACM Workshop on Wireless Security,
2002.
5
0
0
2
-
0
1
-
5
0
0
2
-
S
C
t
r
o
p
e
R
l
a
c
i
n
h
c
e
T
-
t
n
e
m
t
r
a
p
e
D
e
c
n
e
i
c
S
r
e
t
u
p
m
o
C
-
n
o
i
n
h
c
e
T
21