For contract-generated contracts, we also saw high levels of
code reuse. They, too, exhibit a long-tail distribution, with a largest
cluster of 361 contracts. Code reuse among these forms of contracts
is not quite as rampant as with user-generated contracts; of the
2,440 contracts, we found 694 clusters, the largest five of which
comprise 37.5% of all such contracts. We also compared the source
code of the three largest clusters of the contract-generated contracts
and found that all three clusters are made up of token contracts.
4.5 Summary
The results in this section have a consistent message: that
Ethereum’s smart contract ecosystem has a considerable lack of
diversity. Most contracts reuse code extensively, and there are few
creators compared to the number of overall contracts. It remains to
be seen whether this lack of diversity is endemic to smart contracts
(or Ethereum itself), or if it is merely a reflection of the relative
youth of smart contracts as a whole—perhaps as new contracts and
modes of interactions are developed, we will see an increase in
diversity.
In the mean time, the high levels of code reuse represent a po-
tential threat to the security and reliability. Ethereum has been
subject to high-profile bugs that have led to hard forks in the
blockchain [13] or resulted in over $170 million worth of Ether
being frozen [1]; like with DNS’s use of multiple implementations,
having multiple implementations of core contract functionality
would introduce greater defense-in-depth to Ethereum.
5 RELATED WORK
There has been extensive work towards developing an empirical
understanding of various aspects of the cryptocurrency ecosystem.
Early work in this space inspected the transactions taking place on
Bitcoin’s blockchain including transaction patterns [5, 22], prop-
erties of repeated subgraphs [16] and hypergraphs [21], and the
UTXO set [10]. Work focusing on privacy and anonymity of Bitcoin
transactions have looked at transaction history [6], address cluster-
ing [19] and mixing services [18] to de-anonymize addresses. Others
have focused on transactions related to scams, Ponzi schemes and
Ransomware [8, 24, 25] and the impact of what kind of data is stored
as part of Bitcoin transactions [14].
Other work has studied Bitcoin’s peer-to-peer network—
including how information propagates [9], how networks react
to partitions [13], how to leverage the peer-to-peer topology to in-
fer which nodes are more influential or linked to mining pools [17],
3Contract source code is available at etherscan.io and can be verified against the
bytecode.
Figure 3: The cluster sizes for user-generated contracts fol-
lows a long-tail distribution. Of the 125,177 bytecode-unique
user-generated contracts, there are only 16,373 clusters, the
largest comprising 26,144 contracts and 11,678 clusters of
size one.
therefore define two contracts to be equivalent under opcode-level
equality if their bytecode is identical when ignoring the opcode
arguments. Table 1 shows the number of unique contracts using
opcode-level equality in the final column. We find that about 25%
of the bytecode-level unique user-created contracts are not opcode-
level unique, indicating even further code reuse.
4.4 Contract similarity
Next, we seek to understand the extent to which users reuse por-
tions of code from one contract in another. Such code reuse can
have ramifications on the reliability of the contract ecosystem: a
bug or vulnerability in one contract could potentially be copied
elsewhere. Moreover, in blockchain systems like Ethereum, smart
contract code can never be changed as it is part of the permanent
blockchain state; instead, entirely new contracts need to be created
and migrated to.
To measure code reuse, we compute the similarity between two
contracts as follows: First, we disassemble all contracts and strip
out all arguments to opcodes (but maintain the order in which
the opcodes appear). Then, we compute the frequency of all n-
grams in both contracts (we use n = 5, but found similar results for
larger values of n). This yields, for each contract, a hypervector in
the high-dimensional space of 5-grams of Ethereum opcodes. To
compare two contracts, we compute the cosine similarity between
their respective hypervectors, resulting in a number between zero
(completely dissimilar) and one (identical).
We spot-checked dozens of contracts and found that, when two
contracts have a score of 0.90 or higher, they exhibit extensive
code reuse. We also verified that this similarity score is highly
transitive: for three contracts a, b, and c, if sim(a, b) ≥ 0.90 and
sim(b, c) ≥ 0.90, then sim(a, c) ≥ 0.90 over 88.8% of the time.
We use this similarity score to cluster contracts together. Specifi-
cally, we cluster together any two contracts with score 0.90 or higher.
We note that a contract belongs to the first cluster it matches to.
We run our clustering algorithm on the set of all user-generated
contracts, and on the set of all contract-generated contracts. Fig-
ure 3 shows the distribution of cluster sizes for user-generated
contracts. Of the 125,177 total contracts, we find that there are
100101102103104105100101102103104Cluster sizeCluster rankIMC ’18, October 31-November 2, 2018, Boston, MA, USA
Lucianna Kiffer, Dave Levin, and Alan Mislove
and other studies on decentralization in Bitcoin and Ethereum’s
peer-to-peer networks [11].
Conversely, in this paper, we explore a unique and growing as-
pect of the cryptocurrency ecosystem: smart contracts. The most
closely related work to ours involve analysis of the kinds of con-
tracts being written. Norvill et al. clustered 998 Ethereum contracts
whose source code were available on the block explorer etherscan.io
at the time of their study [20]. They looked at the frequency of the
most common words in the code and clusters based on context
triggered piecewise hashes of the bytecode of these contracts. Bar-
toletti and Pompianu studied 811 Ethereum contracts with available
source code [7] and categorized them into 5 categories: financial, no-
tary, game, wallet and library. They look at how many transactions
relate to each category and find that around 66% of transactions to
contracts at the time were to financial categorized contracts. They
did a similar analysis for Bitcoin transactions which use a scripting
language and encode some metadata in transactions and also found
that financial categorized transactions were the most popular. Their
analysis of the Ethereum contracts included manually inspecting
them to identify different design patterns.
Compared to both of these studies, we perform our analysis over
a much larger scale of contracts. We are not limited to contracts
for which there is publicly available code; we measure contract
similarity based on n-grams of the decompiled bytecode for all
unique bytecodes, allowing us to examine similarity at a much
larger scale. As a result, we believe our work to be an important
first step towards developing a more comprehensive understanding
of the smart contract ecosystem.
6 CONCLUSION
Smart contracts are a fundamental addition to cryptocurrencies;
just as it is important to study the peer-to-peer network topology
and user-to-user transaction activity, we argue that it is equally
important to study how users interact with smart contracts. In this
paper, we have initiated the study of Ethereum’s smart contracts
at-scale by investigating its smart contract topology. Our initial
findings indicate high levels of contract activity (largely indepen-
dent of price), but low levels of contract diversity: most contracts
are direct- or near-copies of other contracts. While this is likely a
driving force behind Ethereum’s success (copying another’s con-
tract is an easy way to start using the system), it also represents a
potential risk, if buggy or vulnerable code were to be copied.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their helpful comments.
This research was supported in part by NSF grants CNS-1409191,
CNS-1409249, CNS-1564143, CCF-1422715 and CCF-1535929.
REFERENCES
[1] Another parity wallet hack explained.
another-parity-wallet-hack-explained-847ca46a2e1c.
https://medium.com/@Pr0Ger/
[2] Spurious dragon hard fork. https://blog.ethereum.org/2016/11/18/hard-fork-no-
[3] Tangerine whistle.
https://blog.ethereum.org/2016/10/18/faq-upcoming-
4-spurious-dragon/, November 2016.
ethereum-hard-fork/, October 2016.
ethereum.
[4] Cryptokitties
on
http://www.bbc.com/news/technology-42237162, December 2017.
transactions
down
craze
slows
[5] L. Anderson, R. Holz, A. Ponomarev, P. Rimba, and I. Weber. New kids on the
block: an analysis of modern blockchains. arXiv preprint arXiv:1606.06530, 2016.
[6] E. Androulaki, G. O. Karame, M. Roeschlin, T. Scherer, and S. Capkun. Evaluating
user privacy in bitcoin. In International Conference on Financial Cryptography
and Data Security, pages 34–51. Springer, 2013.
[7] M. Bartoletti and L. Pompianu. An empirical analysis of smart contracts: plat-
forms, applications, and design patterns. In International Conference on Financial
Cryptography and Data Security, pages 494–509. Springer, 2017.
[8] H. Basil Al Jawaheri, M. Al Sabah, and Y. Boshmaf. Measurement and analysis
of bitcoin transactions of ransomware. In Qatar Foundation Annual Research
Conference Proceedings, volume 2018, page ICTPD1026. HBKU Press Qatar, 2018.
[9] C. Decker and R. Wattenhofer. Information propagation in the bitcoin network.
In International Conference on Peer-to-Peer Computing (P2P), pages 1–10. IEEE,
2013.
[10] S. Delgado-Segura, C. Pérez-Sola, G. Navarro-Arribas, and J. Herrera-Joancomartı.
Analysis of the bitcoin utxo set.
[11] A. E. Gencer, S. Basu, I. Eyal, R. van Renesse, and E. G. Sirer. Decentralization in
[12] A. Hertig. $160 million stuck: Can parity still shake up ethereum? https://www.
bitcoin and ethereum networks. arXiv preprint arXiv:1801.03998, 2018.
coindesk.com/startup-lost-160-million-still-wants-shake-ethereum/.
[13] L. Kiffer, D. Levin, and A. Mislove. Stick a fork in it: Analyzing the ethereum
network partition. In Proceedings of the 16th ACM Workshop on Hot Topics in
Networks, pages 94–100. ACM, 2017.
[14] R. Matzutt, J. Hiller, M. Henze, J. H. Ziegeldorf, D. Müllmann, O. Hohlfeld, and
K. Wehrle. A quantitative analysis of the impact of arbitrary blockchain content
on bitcoin.
In Proceedings of the 22nd International Conference on Financial
Cryptography and Data Security (FC). Springer, 2018.
[15] P. Maymounkov and D. Mazieres. Kademlia: A peer-to-peer information system
based on the xor metric. In International Workshop on Peer-to-Peer Systems, pages
53–65. Springer, 2002.
[16] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy, G. M. Voelker,
and S. Savage. A fistful of bitcoins: characterizing payments among men with no
names. In Internet Measurement Conference, pages 127–140. ACM, 2013.
[17] A. Miller, J. Litton, A. Pachulski, N. Gupta, D. Levin, N. Spring, and B. Bhat-
tacharjee. Discovering bitcoin’s public topology and influential nodes. et al.,
2015.
[18] M. Moser. Anonymity of bitcoin transactions: An analysis of mixing services. In
Münster Bitcoin Conference (MBC), 2013.
[19] T. Neudecker and H. Hartenstein. Could network information facilitate address
clustering in bitcoin? In International Conference on Financial Cryptography and
Data Security, pages 155–169. Springer, 2017.
[20] R. Norvill, B. B. F. Pontiveros, R. State, I. Awan, and A. Cullen. Automated labeling
of unknown contracts in ethereum. In Computer Communication and Networks
(ICCCN), 2017 26th International Conference on, pages 1–6. IEEE, 2017.
[21] S. Ranshous, C. A. Joslyn, S. Kreyling, K. Nowak, N. F. Samatova, C. L. West,
and S. Winters. Exchange pattern mining in the bitcoin transaction directed
hypergraph. In International Conference on Financial Cryptography and Data
Security, pages 248–263. Springer, 2017.
[22] D. Ron and A. Shamir. Quantitative analysis of the full bitcoin transaction graph.
In International Conference on Financial Cryptography and Data Security, pages
6–24. Springer, 2013.
https://www.coindesk.com/
Understanding the dao attack.
[23] D. Siegal.
understanding-dao-hack-journalists/.
[24] M. Vasek and T. Moore. There’s no free lunch, even using bitcoin: Tracking the
popularity and profits of virtual currency scams. In International conference on
financial cryptography and data security, pages 44–61. Springer, 2015.
[25] M. Vasek and T. Moore. Analyzing the bitcoin ponzi scheme ecosystem. In Bitcoin
Workshop, 2018.
[26] G. Wood. Ethereum: A secure decentralised generalised transaction ledger.
Ethereum project yellow paper, 151:1–32, 2014.