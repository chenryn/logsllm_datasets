lo 环回接口通信。
--net=none 让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配
置。之后，用户可以自己进行配置。
网络配置细节
用户使用 --net=none 后，可以自行配置网络，让容器达到跟平常一样具有访问
网络的权限。通过这个过程，可以了解 Docker 配置网络的细节。
首先，启动一个 /bin/bash 容器，指定 --net=none 参数。
$ sudo docker run -i -t --rm --net=none base /bin/bash
root@63f36fc01b5f:/#
在本地主机查找容器的进程 id，并为它创建网络命名空间。
$ sudo docker inspect -f '{{.State.Pid}}' 63f36fc01b5f
2778
$ pid=2778
$ sudo mkdir -p /var/run/netns
$ sudo ln -s /proc/$pid/ns/net /var/run/netns/$pid
检查桥接网卡的 IP 和子网掩码信息。
189
网络
$ ip addr show docker0
21: docker0: ...
inet 172.17.42.1/16 scope global docker0
...
创建一对 “veth pair” 接口 A 和 B，绑定 A 到网桥 docker0 ，并启用它
$ sudo ip link add A type veth peer name B
$ sudo brctl addif docker0 A
$ sudo ip link set A up
将B放到容器的网络命名空间，命名为 eth0，启动它并配置一个可用 IP（桥接网
段）和默认网关。
$ sudo ip link set B netns $pid
$ sudo ip netns exec $pid ip link set dev B name eth0
$ sudo ip netns exec $pid ip link set eth0 up
$ sudo ip netns exec $pid ip addr add 172.17.42.99/16 dev eth0
$ sudo ip netns exec $pid ip route add default via 172.17.42.1
以上，就是 Docker 配置网络的具体过程。
当容器结束后，Docker 会清空容器，容器内的 eth0 会随网络命名空间一起被清
除，A 接口也被自动从 docker0 卸载。
此外，用户可以使用 ip netns exec 命令来在指定网络命名空间中进行配置，
从而配置容器内的网络。
190
Docker Compose 项目
Docker Compose 项目
Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集
群中部署分布式应用。
本章将介绍 Compose 项目情况以及安装和使用。
191
简介
Compose 简介
图 1.16.1.1 - Docker Compose 项目
Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编
排。从功能上看，跟 OpenStack 中的 Heat 十分类似。
192
简介
其代码目前在 https://github.com/docker/compose 上开源。
Compose 定位是 “定义和运行多个 Docker 容器的应用（Defining and running
multi-container Docker applications）”，其前身是开源项目 Fig，目前仍然兼容 Fig
格式的模板文件。
通过第一部分中的介绍，我们知道使用一个 Dockerfile 模板文件，可以让用户很方
便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相
互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本
身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。
Compose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-
compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目
（project）。
Compose 中有两个重要的概念：
服务（service）：一个应用的容器，实际上可以包括若干运行相同镜像的容器
实例。
项目(project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-
compose.yml 文件中定义。
Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生
命周期管理。
Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进
行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose
来进行编排管理。
193
安装与卸载
安装与卸载
Compose 目前支持 Linux 和 Mac OS 平台，两者的安装过程大同小异。
安装 Compose 之前，要先安装 Docker（需要 Docker Engine 1.7.1+），请参考第
一部分中章节，在此不再赘述。
Compose 可以通过 Python 的 pip 工具进行安装，可以直接下载编译好的二进制文
件使用，甚至直接运行在 Docker 容器中。
前两种方式是传统方式，适合本地环境下安装使用；最后一种方式则不破坏系统环
境，更适合云计算场景。
PIP 安装
这种方式是将 Compose 当作一个 Python 应用来从 pip 源中安装。
执行安装命令：
$ sudo pip install -U docker-compose
可以看到类似如下输出，说明安装成功。
Collecting docker-compose
Downloading docker-compose-1.8.0.tar.gz (149kB): 149kB downloa
ded
...
Successfully installed docker-compose cached-property requests t
exttable websocket-client docker-py dockerpty six enum34 backpor
ts.ssl-match-hostname ipaddress
安装成功后，可以查看 docker-compose 命令的用法。
$ docker-compose -h
Define and run multi-container applications with Docker.
Usage:
194
安装与卸载
docker-compose [-f=...] [options] [COMMAND] [ARGS...]
docker-compose -h|--help
Options:
-f, --file FILE Specify an alternate compose file (d
efault: docker-compose.yml)
-p, --project-name NAME Specify an alternate project name (d
efault: directory name)
--x-networking (EXPERIMENTAL) Use new Docker networ
king functionality.
Requires Docker 1.9 or later.
--x-network-driver DRIVER (EXPERIMENTAL) Specify a network dri
ver (default: "bridge").
Requires Docker 1.9 or later.
--verbose Show more output
-v, --version Print version and exit
Commands:
build Build or rebuild services
help Get help on a command
kill Kill containers
logs View output from containers
pause Pause services
port Print the public port for a port binding
ps List containers
pull Pulls service images
restart Restart services
rm Remove stopped containers
run Run a one-off command
scale Set number of containers for a service
start Start services
stop Stop services
unpause Unpause services
up Create and start containers
migrate-to-labels Recreate containers to add labels
version Show the Docker-Compose version information
之后，可以添加 bash 补全命令。
195
安装与卸载
$ curl -L https://raw.githubusercontent.com/docker/compose/1.8.0
/contrib/completion/bash/docker-compose > /etc/bash_completion.d
/docker-compose
二进制包
官方定义编译好二进制包，供大家使用。这些发布的二进制包可以在
https://github.com/docker/compose/releases 页面找到。
这些二进制文件，下载后直接放到执行路径下，并添加执行权限即可。
例如，在 Linux 平台上。
$ sudo curl -L https://github.com/docker/compose/releases/downlo
ad/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/d
ocker-compose
$ sudo chmod a+x /usr/local/bin/docker-compose
可以使用 docker-compose version 命令来查看版本信息，以测试是否安装成
功。
$ docker-compose version
docker-compose version 1.8.0, build 94f7016
docker-py version: 1.9.0
CPython version: 2.7.6
OpenSSL version: OpenSSL 1.0.1f 6 Jan 2014
容器中执行
Compose 既然是一个 Python 应用，自然也可以直接用容器来执行它。
$ curl -L https://github.com/docker/compose/releases/download/1.
8.0/run.sh > /usr/local/bin/docker-compose
$ chmod +x /usr/local/bin/docker-compose
实际上，查看下载的 run.sh 脚本内容，如下
196
安装与卸载
set -e
VERSION="1.8.0"
IMAGE="docker/compose:$VERSION"
# Setup options for connecting to docker host
if [ -z "$DOCKER_HOST" ]; then
DOCKER_HOST="/var/run/docker.sock"
fi
if [ -S "$DOCKER_HOST" ]; then
DOCKER_ADDR="-v $DOCKER_HOST:$DOCKER_HOST -e DOCKER_HOST"
else
DOCKER_ADDR="-e DOCKER_HOST -e DOCKER_TLS_VERIFY -e DOCKER_C
ERT_PATH"
fi
# Setup volume mounts for compose config and context
if [ "$(pwd)" != '/' ]; then
VOLUMES="-v $(pwd):$(pwd)"
fi
if [ -n "$COMPOSE_FILE" ]; then
compose_dir=$(dirname $COMPOSE_FILE)
fi
# TODO: also check --file argument
if [ -n "$compose_dir" ]; then
VOLUMES="$VOLUMES -v $compose_dir:$compose_dir"
fi
if [ -n "$HOME" ]; then
VOLUMES="$VOLUMES -v $HOME:$HOME -v $HOME:/root" # mount $HO
ME in /root to share docker.config
fi
# Only allocate tty if we detect one
if [ -t 1 ]; then
DOCKER_RUN_OPTIONS="-t"
fi
if [ -t 0 ]; then
197
安装与卸载
DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -i"
fi
exec docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_O
PTIONS $VOLUMES -w "$(pwd)" $IMAGE "$@"
可以看到，它其实是下载了 docker/compose 镜像并运行。
卸载
如果是二进制包方式安装的，删除二进制文件即可。
$ sudo rm /usr/local/bin/docker-compose
如果是通过 python pip 工具安装的，则可以执行如下命令删除。
$ sudo pip uninstall docker-compose
198
使用
使用
术语
首先介绍几个术语。
服务（service）：一个应用容器，实际上可以运行多个相同镜像的实例。
项目(project)：由一组关联的应用容器组成的一个完整业务单元。
可见，一个项目可以由多个服务（容器）关联而成，Compose 面向项目进行管
理。
场景
下面，我们创建一个经典的 Web 项目：一个 Haproxy，挂载三个 Web 容器。
创建一个 compose-haproxy-web 目录，作为项目工作目录，并在其中分别创建
两个子目录： haproxy 和 web 。
web 子目录
这里用 Python 程序来提供一个简单的 HTTP 服务，打印出访问者的 IP 和 实际的
本地 IP。
index.py
编写一个 index.py 作为服务器文件，代码为
#!/usr/bin/python
#authors: yeasy.github.com
#date: 2013-07-05
import sys
import BaseHTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler
import socket
import fcntl
199
使用
import struct
import pickle
from datetime import datetime
from collections import OrderedDict
class HandlerClass(SimpleHTTPRequestHandler):
def get_ip_address(self,ifname):
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
return socket.inet_ntoa(fcntl.ioctl(
s.fileno(),
0x8915, # SIOCGIFADDR
struct.pack('256s', ifname[:15])
)[20:24])
def log_message(self, format, *args):
if len(args)   <fo