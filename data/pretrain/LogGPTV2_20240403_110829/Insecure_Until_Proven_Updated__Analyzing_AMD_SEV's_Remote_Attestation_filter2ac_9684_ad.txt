hypervisor to dump plaintext memory instead. The SEV firmware
will only allow the use of this interface if the guest owner explicitly
enabled debugging in the guest policy as described in Section 2.5.
Using the security issues described in Section 3.2, an attacker is
able to patch the SEV firmware so that it ignores the policy. After
installing the patched firmware, the SEV firmware will decrypt or
encrypt guest memory regardless of the guest owner’s policy. This
allows the attacker to read and write arbitrary guest memory using
the SEV debug interface from the SEV-enabled host.
Leveraging these security flaws, we were able to successfully
install such a patched version of the SEV firmware. As opposed to
previous attacks on SEV such as [25] and [15], this attack does not
depend on any services running inside the guest VM.
This attack is also possible if the firmware vulnerabilities de-
scribed in Section 3.2 are fixed. Due to the missing rollback pre-
vention, an attacker can always replace the existing PSP OS with a
vulnerable version before installing her patched SEV firmware.
6 DISCUSSION
In the previous sections, we laid out how security issues in the PSP
firmware pave the way for attacks against SEV that permanently
break the security properties of the SEV technology on AMD Epyc
based systems. Furthermore, we demonstrated that, although the
issues have been addressed through firmware updates, the confi-
dentiality of SEV-protected systems is still at risk. This is due to the
fact that the presence of an updated firmware cannot be verified by
a guest owner. A given CEK is valid throughout the lifetime of the
CPU and does not depend on the firmware version. This section
discusses possible mitigations and proposes a key generation design
for future SEV implementations.
Without vulnerabilities as the one described in Section 3, none of
our attacks would be possible. Various methods such as static and
dynamic analysis, formal verification, and extensive code audits
naturally come to mind when discussing possible mitigations. How-
ever, the sheer amount of security issues that are present in related
systems, such as Intel ME [16, 17] and the PSP itself [13], prove the
difficulty to ensure the absence of security issues. We hence believe
that the security design of SEV should incorporate the possibility of
firmware bugs. Thus the proposed mitigations focus on SEV design
changes that empower a guest owner to enforce the use of both an
authentic as well as an up-to-date firmware on the remote platform.
6.1 Current Design Issues
As discussed in Section 3.2, the PSP allows installing any signed
firmware, including rollbacks to previous insecure versions. This
allows attackers to provision any AMD Epyc CPU with a vulnerable
PSP OS version and mount the attacks discussed earlier. While the
current on-chip bootloader is not updatable, AMD confirmed that it
is possible to revoke an ARK and enforce the use of alternative keys
to verify the integrity of the PSP OS. This mechanism can be used
to label every currently available PSP firmware as untrusted, i.e.,
effectively preventing an attacker to roll back to a vulnerable PSP
OS version. However, it does not allow a guest owner to verify that
a PSP OS version signed with the alternative key is actually used.
Furthermore, the CEK does not depend on the PSP OS version, i.e.,
a CEK extracted before the revocation of the ARK key is still valid
afterwards - its lifetime is the lifetime of the CPU [3, Chapter 2.1.3].
Thus this approach is insufficient to mitigate our proposed attacks.
This is also true for another SEV mechanism: SEV allows the guest
owner to enforce the SEV API version implemented by the remote
platform, see Section 2.5 Step 4. However, the SEV API check is
only enforced by the SEV firmware. An attacker able to manipulate
the SEV firmware can spoof arbitrary SEV API versions.
The validity of the CEK across firmware versions impedes mit-
igations only based on firmware updates. To overcome this, we
propose design changes to the SEV technology which are laid out
in the next section.
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom10956.2 Proposed SEV Design Changes
The goal of our proposed design changes is to enable the guest
owner to enforce the use of an authentic and up-to-date PSP firmware.
It is specifically not our goal to provide means to ensure the PSP
firmware has no bugs in the first place. We rather focus on design
changes that allow ensuring the PSP firmware in use is still trusted.
Our proposed changes aim to incur only low complexity overhead
to the current SEV technology. This enables re-use of the current
software stack and minimizes the required effort to migrate to our
proposed design.
CEK Derivation The current CEK is derived using a key deriva-
tion function (KDF) that takes a 32-byte secret value which is
unique per CPU and is stored in one-time-programmable (OTP)
fuses (SOT P ):
CEK = KDF(SOT P)
We propose to change the way the CEK is generated in order to
connect it to the PSP OS version and the SEV firmware version. To
that end, we introduce a two-stage secret generation procedure. In-
stead of deriving the CEK directly from the SOT P , two intermediate
secrets are derived using different inputs:
(1) SPSP : based on the PSP OS version (PV ) and SOT P .
SPSP = KDF(PV , SOT P)
(2) SCEK : based on the SEV firmware version (SV ) and SPSP .
SCEK = KDF(SV , SPSP)
The final CEK is then derived from SCEK :
CEK = KDF(SCEK)
For the sake of simplicity, static, i.e., non-confidential, inputs to the
KDF were omitted. The resulting CEK will not only depend on the
chip-unique SOT P , but also on the current PSP OS version as well
as the SEV firmware version. As the intermediate secrets must not
be accessible by an attacker, our design separates the derivation of
those secrets in different PSP firmware components.
In the current SEV design, the initial CEK secret, SOT P , is ac-
cessible to the on-chip bootloader, the PSP OS as well as the SEV
firmware (see left part of Figure 5).
Our new design proposes a better isolation, as depicted on the
right hand side of Figure 5. The SOT P is only accessible to the
on-chip bootloader and is used in conjunction with the PSP OS
version to derive the SPSP . The SPSP is accessible by the PSP OS
and is given as an input to a key derivation function together with
the SEV firmware version. The derived SCEK is used by the SEV
firmware to finally derive the CEK.
The required changes in the firmware components are discussed
in the following paragraphs.
On-chip Bootloader The current on-chip bootloader provisions
the Cryptographic Co-Processor (CCP) with the SOT P , see Step 1 of
Figure 4. In our proposed design, the on-chip bootloader provisions
the CCP with SPSP instead.
SPSP is derived from the SOT P and the PSP OS version using a
key derivation function. The PSP OS version is a field in the signed
header of the PSP OS component stored on flash. The current on-
chip bootloader is already required to read this header as it contains
information about the key used to verify its signature. In addition,
the on-chip bootloader needs to implement the key derivation func-
tion that derives the SPSP . It is crucial for our enhanced design, that
the original SOT P is never visible outside the scope of the on-chip
bootloader. To that end, the hardware component implementing
the access to the SOT P must prevent further accesses after the first
access.
As the on-chip bootloader is not updatable, it is paramount that
its code complexity is rather low. Any errors in this component that
are identified after the CPU is manufactured and shipped cannot
be fixed.
While our proposed changes do increase the overall complexity
of the on-chip bootloader, we believe they are reasonable and man-
ageable. Determining the PSP OS version incurs only little overhead
as this information is present in the PSP OS header stored on flash.
Including the PSP OS version in the SPSP simply requires parsing
one additional header field.
The key derivation function does add additional complexity.
However, the PSP system has access to the CCP, which offers the
possibility to offload cryptographic operations. We believe that the
complexity of the KDF implementation can be reduced by offloading
the cryptographic primitives, such as hash functions, to the CCP.
In fact, the CCP is already leveraged to verify the signature of the
firmware components. The proposed KDF in the on-chip bootloader
could make use of the CCP in a similar fashion.
Limiting the privilege of accessing the SOT P to only the on-chip
bootloader effectively reduces the risk of leaking the SOT P as Fig-
ure 5 illustrates.
Figure 5: The current SEV design as opposed to our proposed
design. Dashed lines between two secrets show a derivation.
Boxes show the scope of secrets and firmware components.
In contrast to the original SEV design, the PSP OS must
PSP OS
not get access to the original SOT P . Instead, it only has access to
the intermediate secret SPSP that depends on the PSP OS version.
Similarly to the proposed on-chip bootloader changes, the PSP OS
uses the SEV firmware version together with the SPSP to derive
the SCEK . The SEV firmware version information is present in the
header of the SEV firmware which is parsed by the PSP OS. The
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1096resulting SCEK now depends on the SOT P , the PSP OS version and
the SEV firmware version. As the PSP OS runs at a higher privilege
level (SVC mode) than the SEV firmware (USR mode), the intermedi-
ate SPSP is not accessible by the SEV firmware. Only the SCEK is
provided to the SEV firmware through a syscall.
SEV API To accommodate for our proposed design changes, the
format of the CEK certificate, see [3, Appendix C.1], must be ex-
tended. In the current SEV API, version 17 at the time of writing, the
CEK certificate contains no information about the PSP components.
We propose to extend the CEK certificate format to also include the
minimum PSP OS and SEV firmware versions. As opposed to the
original SEV design, there are now multiple valid CEKs for a single
CPU.
To enable the guest owner to enforce firmware versions of the
remote platform, we further propose to extend the guest policy to
include the PSP OS version as well as the SEV firmware version.
SEV Firmware The current SEV firmware derives the CEK from
a secret value that is provided by the PSP OS. This does not change
in our proposed design. However, the SOT P is not exposed to the
SEV firmware. Instead, the CEK is derived from the SCEK which is
accessible via a syscall.
As there are now multiple CEKs for a single platform, the SEV
API must support to enforce the minimum SEV firmware version
and PSP OS version that is defined by the guest policy.
During the initial deployment, the guest owner will additionally
receive the firmware versions, Step 1 of Figure 2, and will query
the AMD key server using the platform ID together with the stated
firmware versions, see variant D, Step 3 of Figure 2. The retrieved
CEK is then used in the certificate chain verification, as shown in
Step 5 of Figure 2. The verification will only succeed if the remote
platform hosts the stated firmware versions.
In case of migration, the source SEV firmware enforces the mini-
mum firmware versions when authenticating the target platform,
Step 5 of Figure 2. To that end, the source SEV firmware verifies
that the versions specified in the provided CEK certificate of the
target, see variant M, Step 4 of Figure 2, are equal to or greater than
the versions specified in the guest policy.
In the current SEV design, the AMD Key Server
AMD Key Server
provides means to retrieve a CPU-specific CEK certificate for a
given platform ID, as shown in variant D, Step 3 of Figure 2. In our
enhanced design, the AMD Key Server is queried with a platform
ID as well as PSP OS and SEV firmware versions.
In a similar fashion to the proposed key derivation introduced
above and based on the CPU-specific SOT P , the AMD Key Server
will calculate the intermediate secret SPSP before delivering the
version-dependent SCEK to the client. It is left to AMD how to
communicate the revocation of certain PSP OS and SEV firmware
versions for use with the SEV technology. One possible option is
to disable the generation of CEK certificates for known vulnerable
PSP OS and SEV firmware versions. We believe that the on-demand
calculation of CEKs increases the required computational effort for
the AMD Key Server to a manageable degree.
6.3 Security Evaluation
This section discusses the advantages of our proposed design. For
the following paragraphs, we assume that a previously released
PSP firmware version contained security issues which are fixed
in a later version. This is the case for the current state of the PSP
firmware [24]. Furthermore, we assume that AMD publishes in-
formation about the outdated, vulnerable firmware versions along
with the updated version. Additionally, we assume that it is not
possible to extract the CEK from the current PSP firmware version.
Guest Deployment The proposed SEV design changes allow a
guest owner to enforce the use of specific firmware versions on the
remote platform. As the CEK is now tied to the firmware version
deployed on the remote platform, a CEK extracted using different
firmware versions is no longer valid. In the current SEV design, the
security of the SEV technology itself is compromised as long as a
bug exists in any relevant PSP firmware component.
During the deployment of a guest VM, the guest owner authen-
ticates the remote platform, see Step 5 in Figure 2. In our enhanced
design, the guest owner retrieves the CEK certificate for the up-to-
date firmware, i.e., the firmware version that includes the bug fixes.
To that end, she uses the platform ID of the target platform along
with the required PSP OS and SEV firmware version to retrieve the
CEK certificate from the AMD key server, variant D, Step 3 and 4
of Figure 2.
While a malicious cloud provider could provide an extracted CEK
from an outdated, vulnerable firmware, the CEK will not match
the CEK certificate served by the AMD Key Server. As the guest
owner only trusts CEKs for specific PSP firmware versions, she
will dismiss the proposed CEK from the malicious cloud provider.
This prevents the deployment of SEV-protected guest VMs on SEV
platforms with known security issues.
Since the Fake SEV attack presented in Section 5.1 relies on a
valid, extracted CEK, which can only come from a vulnerable and
therefore revoked firmware, the new design effectively prevents
this attack.
In a similar fashion, the Debug Override attack presented in Sec-
tion 5.3 relies on the ability to alter the SEV firmware in order to
patch and abuse its debug functionality. This is only possible with
a vulnerable, i.e., revoked, firmware, which will be dismissed by
the client.
Migration Leveraging the enhanced SEV design, the guest owner
successfully deployed her virtual machine on a trusted SEV platform.
To ensure the virtual machine is not migrated to a platform using
a vulnerable firmware version, the source SEV firmware enforces
a version check on the CEK. The attack discussed in Section 5.2
requires the attacker to provide an extracted CEK. In the original
SEV design, the source SEV firmware validates the CEK solely on the
fact whether it has a root of trust originating in an ARK certificate.
In our enhanced design, the SEV firmware also ensures that the
CEK certificate is valid for the SEV firmware version specified in the
guest policy. To that end, the CEK certificate contains the PSP OS
version as well as the SEV firmware version numbers, see Section
6.2. The SEV firmware can now verify that the version fields of the
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1097provided CEK are equal to, or higher than the version numbers
specified in the guest policy.
While an attacker could still provide a valid, extracted CEK, she
cannot provide a CEK with a valid version field assuming the spec-