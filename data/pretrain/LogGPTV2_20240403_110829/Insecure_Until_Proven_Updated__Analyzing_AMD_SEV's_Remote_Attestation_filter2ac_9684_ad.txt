### Hypervisor and SEV Firmware Interaction

The hypervisor can dump plaintext memory if the guest owner explicitly enables debugging in the guest policy, as described in Section 2.5. However, an attacker can exploit the security issues detailed in Section 3.2 to patch the SEV firmware, thereby bypassing this policy. After installing the patched firmware, the SEV firmware will decrypt or encrypt guest memory regardless of the guest owner's policy. This allows the attacker to read and write arbitrary guest memory using the SEV debug interface from the SEV-enabled host.

### Exploitation and Mitigation

We successfully installed a patched version of the SEV firmware, demonstrating that this attack does not depend on any services running inside the guest VM, unlike previous attacks [25, 15]. Even if the firmware vulnerabilities described in Section 3.2 are fixed, the attack remains possible due to the lack of rollback prevention. An attacker can replace the existing PSP OS with a vulnerable version before installing the patched SEV firmware.

### Discussion

In the previous sections, we outlined how security issues in the PSP firmware enable attacks against SEV, permanently compromising the security properties of SEV technology on AMD Epyc-based systems. Although these issues have been addressed through firmware updates, the confidentiality of SEV-protected systems is still at risk because the presence of updated firmware cannot be verified by the guest owner. The CEK (Confidentiality Encryption Key) is valid throughout the CPU's lifetime and is independent of the firmware version. This section discusses possible mitigations and proposes a key generation design for future SEV implementations.

### Current Design Issues

As discussed in Section 3.2, the PSP allows the installation of any signed firmware, including rollbacks to previous insecure versions. This enables attackers to provision any AMD Epyc CPU with a vulnerable PSP OS version and mount the attacks described earlier. While the current on-chip bootloader is not updatable, AMD confirmed that it is possible to revoke an ARK and enforce the use of alternative keys to verify the integrity of the PSP OS. This mechanism can label all currently available PSP firmware as untrusted, preventing rollbacks to vulnerable versions. However, it does not allow a guest owner to verify that a PSP OS version signed with the alternative key is actually in use. Furthermore, the CEK does not depend on the PSP OS version, so a CEK extracted before the revocation of the ARK key remains valid. Thus, this approach is insufficient to mitigate our proposed attacks.

### Proposed SEV Design Changes

Our goal is to enable the guest owner to enforce the use of an authentic and up-to-date PSP firmware. We propose changes to the SEV technology that incur only low complexity overhead, allowing re-use of the current software stack and minimizing migration effort.

#### CEK Derivation

The current CEK is derived using a key derivation function (KDF) that takes a 32-byte secret value stored in one-time-programmable (OTP) fuses (SOT P):
\[ \text{CEK} = \text{KDF(SOT P)} \]

We propose a two-stage secret generation procedure:
1. **SPSP**: Based on the PSP OS version (PV) and SOT P.
   \[ \text{SPSP} = \text{KDF(PV, SOT P)} \]
2. **SCEK**: Based on the SEV firmware version (SV) and SPSP.
   \[ \text{SCEK} = \text{KDF(SV, SPSP)} \]
3. **Final CEK**: Derived from SCEK.
   \[ \text{CEK} = \text{KDF(SCEK)} \]

This ensures the CEK depends on the chip-unique SOT P, the current PSP OS version, and the SEV firmware version. The intermediate secrets must not be accessible to an attacker, so our design separates their derivation in different PSP firmware components.

#### On-chip Bootloader

The current on-chip bootloader provisions the Cryptographic Co-Processor (CCP) with the SOT P. In our proposed design, the on-chip bootloader provisions the CCP with SPSP instead. SPSP is derived from the SOT P and the PSP OS version using a KDF. The PSP OS version is a field in the signed header of the PSP OS component stored on flash. The on-chip bootloader must implement the KDF to derive SPSP, ensuring the original SOT P is never visible outside its scope.

#### PSP OS

In the original SEV design, the PSP OS has access to the SOT P. In our proposed design, the PSP OS only has access to the intermediate secret SPSP, which depends on the PSP OS version. The PSP OS uses the SEV firmware version together with SPSP to derive SCEK. The SEV firmware version information is present in the header of the SEV firmware, which is parsed by the PSP OS. The resulting SCEK now depends on the SOT P, the PSP OS version, and the SEV firmware version. The PSP OS runs at a higher privilege level (SVC mode) than the SEV firmware (USR mode), so the intermediate SPSP is not accessible by the SEV firmware. Only the SCEK is provided to the SEV firmware through a syscall.

#### SEV API

To accommodate our proposed design changes, the format of the CEK certificate must be extended to include the minimum PSP OS and SEV firmware versions. The guest policy should also include the PSP OS version and the SEV firmware version. The SEV API must support enforcing the minimum SEV firmware version and PSP OS version defined by the guest policy.

#### SEV Firmware

The current SEV firmware derives the CEK from a secret value provided by the PSP OS. In our proposed design, the SOT P is not exposed to the SEV firmware. Instead, the CEK is derived from the SCEK, which is accessible via a syscall. The SEV API must support enforcing the minimum SEV firmware version and PSP OS version defined by the guest policy.

### Security Evaluation

Our proposed design changes offer several advantages. Assuming a previously released PSP firmware version contained security issues fixed in a later version, the guest owner can enforce the use of specific firmware versions on the remote platform. During guest deployment, the guest owner retrieves the CEK certificate for the up-to-date firmware, ensuring the CEK is tied to the deployed firmware version. A malicious cloud provider cannot provide an extracted CEK from an outdated, vulnerable firmware, as it will not match the CEK certificate served by the AMD Key Server.

Similarly, the Fake SEV attack and Debug Override attack rely on a valid, extracted CEK, which can only come from a vulnerable and therefore revoked firmware. The new design effectively prevents these attacks.

During migration, the source SEV firmware enforces a version check on the CEK, ensuring the virtual machine is not migrated to a platform using a vulnerable firmware version. The SEV firmware verifies that the version fields of the provided CEK are equal to or higher than the version numbers specified in the guest policy, thus preventing the use of a valid, extracted CEK from a vulnerable firmware.

By implementing these changes, we enhance the security of SEV-protected systems, making them more resilient to firmware-based attacks.