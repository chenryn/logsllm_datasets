pleted, the train and trackside equipment can start to ex-
change data using the Application Layer protocol. This pro-
tocol is used to specify messages used for communication
between train and trackside. A number of message types
are de(cid:12)ned in the ERTMS Standard [7].
Messages contain a header, which may be dependent on
whether the message was generated by a train or trackside
equipment. Messages will additionally contain a timestamp,
indicating the time at which the message was sent. This
time, however, is relative to the train (i.e. a counter) and is
not represented by a universally-set time source, e.g. UTC.
After authentication, the trackside equipment will synchro-
nise its clock upon receipt of the (cid:12)rst message from the train.
The EuroRadio and Application Layer protocols have pre-
viously been formally analysed [6], where it was shown that
while both layers prevent an attacker from learning the se-
cret key, there are (cid:13)aws in the protocol, for instance allowing
unauthenticated ‘Unconditional Emergency Stop’ messages
being sent by an attacker. There is no existing work to our
knowledge, however, which attempts to fuzz the EuroRadio
or Application Layer protocols at this time.
Typically, messages sent from train to trackside have the
following format:
msg
type
msg
length
time-
stamp
train
ID
pos.
report
other
(opt.)
padding
(opt.)
Similarly, a message sent from the trackside to the train will
typically have this format:
msg
type
msg
length
time-
stamp
ack.
LRBG
ID
other
(opt.)
padding
(opt.)
Both messages contain their respective type, length and
relative timestamp. Messages sent by the train contain a
position report and, dependent on the message being sent,
additional data is formatted in packets, as prescribed in [7].
The position report contains the distance and direction trav-
elled respective to the Last Relevant Balise Group (LRBG),
an upper and lower interval based on some tolerance for
the odometer onboard, and the LRBG’s location accuracy,
which is part of data received from the balises. To ensure
the message has a whole byte length, the message may be
optionally padded with ‘0’.
Emergency messages.
Messages may carry a priority marker, where emergency
messages, set as ‘high’ priority, are treated diﬀerently to
other types of message. As a result, most of the integrity
and authentication veri(cid:12)cation that takes place within Euro-
Radio is bypassed where the message may be immediately
passed up to the Application Layer. This may only take
place once an authenticated session is established. Cur-
rently, only two message types may be sent with ‘high’ pri-
ority: unconditional emergency stop and conditional emer-
gency stop [7]. All emergency stop messages must be ac-
knowledged by the train, where a diﬀerent message type is
used, rather than the standard acknowledgement message.
Acknowledgements and revocations for emergency stops, how-
ever, are not sent as ‘high’ priority data, and must satisfy
any veri(cid:12)cation that takes place in the EuroRadio layer.
3. EURORADIO ATTACK ROADMAP
This section will provide an outline of our attack on ERTMS
to forge train control messages, where we present known
vulnerabilities and show how the attack can be deployed.
Whilst the attack mainly relies on breaking the cryptographic
implementation of the MAC in EuroRadio, we might also
need to circumvent the security of GSM-R. This can easily
be done using commercial oﬀ-the-shelf (COTS) equipment,
for example the $100 HackRF and NVIDIA GTX Titan X
GPU for $1,400.
The stages of the attack presented in this paper are:
(cid:15) Obtain unencrypted GSM-R traﬃc
(cid:15) Observe a collision in the EuroRadio MAC
(cid:15) Recover the (cid:12)rst of the three 3DES keys, k1
(cid:15) Forge an Movement Authority message and send it
Obtaining and Decrypting GSM-R traﬃc. The GSM-
R protocol uses the same cryptographic mechanisms as GSM
to protect messages from tampering and eavesdropping. There-
fore, any vulnerability that exists against the current GSM
standard may be exploitable within GSM-R as well. A chan-
nel jamming attack using COTS equipment would aﬀect all
operations within range of the equipment for ERTMS. A
more sophisticated attack would be to intercept communi-
cations in order to eavesdrop, or, insert messages into the
communications channel. Inserted messages could cause a
train to stop for an unpredictable amount of time to some-
thing more signi(cid:12)cant, for example, allowing a train to en-
ter an unsafe situation e.g. allowing two trains to occupy
the same section of track. Messages sent over GSM only
provide authentication that the communicating party also
possesses the A5 key being used for encryption, and not
that the message being conveyed is actually from a genuine,
honest entity.
The weakness of GSM encryption has been heavily eval-
uated, where recently, it was shown that the A5/1 cipher
used in both GSM and GSM-R could be broken in as lit-
tle as 9 seconds using commodity hardware [16]. For this a
time-memory trade-oﬀ attack was used, with a probability
for success of 81%. The setup time for this attack, how-
ever, was approximately two months, producing tables that
may be reused over diﬀerent attacks. An alternative is the
use of rainbow tables, used by Nohl and others [15, 22, 14],
requiring approximately 1.6TB of storage capacity.
An export variant of A5/1, A5/2, was also shown to be
weak and is vulnerable to real-time attacks, which can break
the cipher in less than a second [2, 19]. Barkan et al. [2]
describe a method to perform a man-in-the-middle attack,
which forces the GSM protocol to fall back to the A5/2
cipher, allowing real-time attacks to be carried out. As the
key used for the A5/2 cipher is usually the same as the one
used by the A5/1 cipher, this provides a means to attack
the A5/1 cipher. Once the A5 key has been established, it
is then possible to recover traﬃc sent over the GSM-R link,
including train control messages.
Another form of attack is through so-called ‘IMSI Catch-
ers’ [4], where the mobile station is tricked into connecting
to a dishonest base station in two phases. The (cid:12)rst phase
is to obtain the TMSI of the victim train, known as ‘Iden-
ti(cid:12)cation’. Whilst train operating timetables and (in the
United Kingdom) train positions are publicly available, the
TSMI and some ERTMS values (for example train ID) are
not publicly documented. In the second phase, ‘Camping’,
the attacker captures traﬃc between the train and trackside
infrastructure where the A5/1 key is then obtained.
The attacker then controls all traﬃc through to and from
the mobile station.
Recovering k1 from the EuroRadio MAC algorithm.
Assuming that the attacker has access to the communication
between the train and the backend, it is now a matter of
observing two messages which have the same MAC at the
EuroRadio layer.
The current EuroRadio MAC generation and veri(cid:12)cation
process depends on the DES and 3DES encryption ciphers.
The way the DES cipher is used in the EuroRadio MAC
algorithm makes it likely for collisions to occur due to its
small block sizes (i.e. 64 bits) [20].
In a well designed protocol, the existence of a collision
would not lead to a vulnerability, however we show in Sec-
tion 4 that (cid:13)aws in the MAC combined with the short key-
length of DES, makes it susceptible to successful brute-force
attacks on k1.
Forging Movement Authority messages. Finding just
one of the three DES keys would not normally lead to an
attack against a secure cryptographic system, however we
show in Section 5 that additional (cid:13)aws in EuroRadio allow
us to create a forged message that has the same MAC as an
observed valid message, using just k1.
ERTMS messages from trackside to the train can include
optional packets, where one of these can be used to send a
text message, which is displayed to the driver. This packet
also speci(cid:12)es the conditions under which the message should
be displayed. This means that random bytes may be in-
cluded in a message. An attacker may take advantage of this
to construct a properly-formatted application layer message
which would be accepted by the train. Additionally, this
message can be designed by the attacker such that it will
not be displayed, thus, the driver is not aware of the mes-
sage having been received by the train.
4. EURORADIO KEY RECOVERY
In this section we will present a method to recover k1, one
of the three keys used by the MAC algorithm in the Euro-
Radio protocol. As stated before, our attack leverages the
small block size of the DES and 3DES ciphers and relies on
the observation of a MAC collision. In Section 5, we will go
on to show how this key, together with a weakness in the
Application Layer protocol, can be used to forge valid Euro-
Radio messages. Our method of recovering k1 exploits two
limitations: (1) if two messages have the same EuroRadio
MAC then the input into the (cid:12)nal 3DES block is identical;
and (2) only k1 is used for the single DES rounds and can
be brute-forced.
As described in Section 3, EuroRadio uses a combination
of the DES and 3DES ciphers, in a mode similar to CBC, to
compute the MAC for an Application Layer protocol mes-
sage m as follows (see also Figure 2). First, the message m
is split into 64 bit blocks, m = (m1; : : : ; mn).
If the last
block mn is not 64 bits long it is padded with 0 s. Then, for
each block mi; i 2 f1; : : : ; n (cid:0) 1g, Hi is computed as:
Hi = DESk1 (Hi(cid:0)1 (cid:8) mi)
(1)
where H0 = 0 and Hi(cid:0)1 (cid:8) mi is the result of the XOR
operation on Hi(cid:0)1 and mi. The (cid:12)nal MAC of the message
ma1
ma2
man(cid:0)1
man
H ma
n(cid:0)2
DESk1
DESk1
: : :
DESk1
3DES
H ma
1
H ma
2
H mb
1
H mb
2
H ma
n(cid:0)1
(cid:8) man ) =
3DES(H ma
n(cid:0)1
(cid:8) mbl )
3DES(H mb
l(cid:0)1
H mb
l(cid:0)1
DESk1
DESk1
: : :
DESk1
3DES
mb1
mb2
mbl(cid:0)1
mbl
H mb
l(cid:0)2
Figure 3: Recovering the DES k1 key using message
collisions.
is the result of the (cid:12)nal 3DES encryption:
M AC(m) = 3DESk1;k2;k3 (Hn(cid:0)1 (cid:8) mn)
(2)
The likelihood of at least one MAC collision occurring
between two messages out of M observed (message, MAC)
pairs for N possible MAC values, is [5]:
)
(
P = 1 (cid:0) M(cid:0)1∏
1 (cid:0) i
N
)
(
(cid:25) 1 (cid:0) e
1 (cid:0) 1
(cid:25)
N
i=1
(cid:0)M (M(cid:0)1)=(2N )
M (M(cid:0)1)=2
(3)
In the case of DES and 3DES N = 264.
We argue that, for rail infrastructure, a 1% probability of
compromise is signi(cid:12)cant and using Equation (3) the number
of (message, MAC) pairs needed to detect a collision with a
probability of 1% is M = 6:1(cid:2)108. We discuss the feasibility
of collecting this data in Section 7.
Once a collision is found between two messages ma and
mb, consisting of n and l blocks respectively, we know that
the input to the 3DES functions is identical for both mes-
sages (see Figure 3), namely:
H ma
n(cid:0)1
(cid:8) man = H mb
l(cid:0)1
(cid:8) mbl
(4)
We can use this information to perform a brute-force search
for k1. Both initial input messages ma and mb are known,
so we can compute H ma
l(cid:0)1 for every possible key
′
′
k
1 for which Eq. (4) holds then we have a
1.
possible candidate for key k1. We discuss the time it takes
to perform this brute-force attack in Section 6.
n(cid:0)1 and H mb
If we (cid:12)nd k
(cid:8) ma3 =
(cid:8) ma2 ) (cid:8)
(cid:8) mb2 ) (cid:8) mb3 . The (cid:12)nal expansion is:
Example. For n = l = 3, Eq. (4) becomes H ma
(cid:8) mb3 . We can expand this to DESk1 (H ma
H mb
ma3 = DESk1 (H mb
DESk1 (DESk1 (ma1 ) (cid:8) ma2 ) (cid:8) ma2
= DESk1 (DESk1 (mb1 ) (cid:8) mb2 ) (cid:8) mb3
2
2
1
1
As we know ma1 ; ma2 ; ma3 ; mb1 ; mb2 and mb3 the only un-
Variable
Length
(bits)
Description
Message 146 (Acknowledgement)
NID MESSAGE
L MESSAGE
T TRAIN
NID ENGINE
T TRAIN
8
10
32
24
32
Message type
Length of message (bytes)
Train timestamp
Train ID
Timestamp being acknowledged
Example
146 (Acknowledgement)
10
53088208
1
53088178
Table 1: Example of an Acknowledgement message sent by a train
known in this equality is k1, therefore we may use this to
(cid:12)nd the key with a brute force guessing attack.
5. FORGING TRAIN CONTROL
MESSAGES
In this section, we present our Application Layer message
forging attack. The attack relies on several weaknesses in
the ERTMS stack, allowing us to create Application Layer
messages which have MACs identical to the ones of previ-
ously observed valid messages. Our attack does not require
complete knowledge of all three keys used in the EuroRadio
MAC algorithm, but only requires key k1, used for the single
DES cipher, to be known. In Section 4, we described how
k1 can be recovered when a MAC collision is observed.
For this attack, we assume that we have seen a valid mes-
sage mv = (mv1 ; : : : ; mvn ) and the corresponding MAC, and
we have obtained the key k1. First, we show how a diﬀerent
message can be forged that has the same MAC as mv.
Assuming we want to get a valid MAC for the forged mes-
sage mf = (mf1 ; : : : ; mfl ) ̸= mv. Based on Equation (2)
M AC(mf ) will be identical to M AC(mv) only if:
H mv
n(cid:0)1
(cid:8) mvn = H
mf
l(cid:0)1
(cid:8) mfl
(5)
Using k1 we can compute valid intermediate MACs H for