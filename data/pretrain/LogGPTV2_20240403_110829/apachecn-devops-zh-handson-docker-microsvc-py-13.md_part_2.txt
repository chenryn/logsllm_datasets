6.  **什么是命名空间？**
命名空间是一个虚拟集群。集群中的所有定义都需要有唯一的名称。
7.  **如何在文件中定义 Kubernetes 元素？**
我们需要以 YAML 格式指定它，并提供关于它的应用编程接口版本、它是什么类型的元素、带有名称和命名空间的元数据部分以及`spec`部分中的元素定义的信息。
8.  **kube CTL get 和 description 命令有什么区别？**
`kubectl get`获取服务或 pods 等若干元素，并显示其基本信息。`describe`另一方面，访问单个元素并呈现更多关于它的信息。
9.  **crashloopback 错误表示什么？**
此错误表示容器已完成执行定义的启动命令。这个错误只发生在 pods 上，因为它们不应该停止执行。
# 第六章
1.  **我们正在部署的三个微服务是什么？**
以下是我们正在部署的三种微服务:
*   用户后端，控制认证和如何处理用户。
*   思想后端，它存储思想，并允许我们创建和搜索它们。
*   前端，它为我们提供了一个用户界面，这样我们就可以与系统交互。它通过 RESTful 调用调用另外两个微服务。
2.  **三个微服务中的哪一个需要另外两个微服务可用？**
前端调用另外两个微服务，因此它们需要可供前端使用。
3.  **当微服务在 docker-compose 中运行时，为什么我们需要使用外部 IPs 来连接它们？**
`docker-compose`为每个微服务创建一个内部网络，因此它们需要使用外部 IP 进行通信，以便正确路由。当我们公开主机中的端口时，可以使用外部主机 IP。
4.  **每个应用需要哪些主要的 Kubernetes 对象？**
对于每个微服务，我们提供一个部署(自动生成 pod)、一个服务和一个入口。
5.  **是否有不需要的对象？**
用户后端和想法后端的入口并不是严格要求的，因为它们可以通过节点端口访问，但它确实使访问它们变得更容易。
6.  **如果我们扩展到多个吊舱或任何其他微服务，我们能检测到问题吗？**
用户后端和想法后端创建了一个包含两个容器的容器，其中包括数据库。如果我们创建多个 pod，我们将创建多个数据库，它们之间的交替会导致问题。
例如，如果我们在其中一个窗格中创建了一个新的想法，那么如果请求是在另一个窗格中提出的，我们将无法搜索到它。
另一方面，前端可以毫无问题地扩展。
7.  **我们为什么要使用/etc/hosts 文件？**
我们正在使用这个文件，这样我们就可以定义一个`host`路由到我们本地的 Kubernetes 集群。这避免了我们必须定义一个 FQDN 和配置一个域名系统服务器。
# 第七章
1.  **为什么我们不应该管理自己的 Kubernetes 集群？**
由于 Kubernetes 是一个抽象层，让云提供商负责维护和管理以及安全最佳实践会更方便。将集群委托给现有的商业云提供商也非常便宜。
2.  **你能说出一些有托管 Kubernetes 解决方案的商业云提供商吗？**
亚马逊网络服务、谷歌云服务、微软 Azure、数字海洋和 IBM Cloud 都是拥有托管 Kubernetes 解决方案的商业云提供商。
3.  **您需要执行什么操作才能推送至 AWS Docker 注册表？**
您需要登录到您的 Docker 守护程序。您可以使用以下代码获得登录命令:
```
$ aws ecr get-login --no-include-email
```
4.  **我们使用什么工具来建立 EKS 集群？**
`eksctl`允许我们从命令行创建整个集群，并根据需要进行扩展或缩小。
5.  **为了使用前几章中的 YAML 文件，我们在本章中做了哪些主要更改？**
我们必须改变映像的清晰度才能使用 AWS 注册表。我们包括活跃度和准备情况调查，以及部署策略。
These are only added to the `frontend` deployment. Adding the rest of the deployments is left to you as an exercise.
6.  **这个集群中有没有不需要的 Kubernetes 元素？**
入口元素不是严格要求的，因为思想后端和用户后端不能从外部访问。前端服务能够创造一个面向外部的 ELB。
Don't feel like you're limited by our configuration. You can manually configure an ELB so that you can access the cluster in different ways, so you can use the Ingress configuration if you wish.
7.  **为什么我们需要控制一个 SSL 证书关联的 DNS？**
我们需要证明我们拥有域名系统，以便 SSL 证书可以验证只有域名系统地址的合法所有者才能访问该域名系统的证书。这是 HTTPS 的根元素，表示您正在与特定域名系统的所有者进行私下交流。
8.  **活跃度探测器和就绪探测器有什么区别？**
如果准备状态探测失败，吊舱将不会接受请求，直到它再次通过。如果活性探测失败，容器将重新启动。
9.  **为什么滚动更新在生产环境中很重要？**
它们很重要，因为它们可以避免服务中断。他们一个接一个地添加工人，同时删除旧工人，确保随时可用的工人数量保持不变。
10.  **自动缩放豆荚和节点有什么区别？**
由于节点反映在物理实例中，扩展它们会影响系统中的资源。与此同时，扩展吊舱使用它们可用的资源，但不修改它们。
换句话说，增加我们拥有的节点数量会增加需要在系统上运行的硬件。这有相关的成本，因为我们需要从云提供商那里雇佣更多的硬件。增加我们拥有的吊舱数量在硬件方面没有成本，这就是为什么应该有一些开销来允许增加。
这两种策略应该协调，以便我们能够对负载增加做出快速反应，同时减少正在使用的硬件数量，从而降低成本。
11.  **在本章中，我们部署了自己的数据库容器。在生产中，这不是必需的。但是，如果您连接到一个已经存在的数据库，您会如何做呢？**
第一步是更改`thoughts_backend/deployment.yaml`和`users_backend/deployment.yaml`文件中的环境变量。要连接的主要是`POSTGRES_HOST`，但是用户和密码也可能需要更改。
Instead of connecting to `POSTGRES_HOST` as an IP or DNS address directly, we could create an internal Kubernetes service called `postgres-db` that points toward an external address. This could help us abstract the address of the external database.
这将一次性部署，以确保我们可以连接到外部数据库。
然后，我们可以删除部署中描述的数据库容器，即`thoughts-backend-db`和`users-backend-db`。这些容器的映像仅用于测试和开发。
# 第八章
1.  **使用脚本将新代码推送到服务器和使用 Puppet 等配置管理工具有什么区别？**
当使用脚本向服务器推送新代码时，每个服务器都需要单独推送代码。 *Puppet* 等配置管理工具有一个集中的服务器，接收新数据并适当分发。他们还监控服务器按预期运行的事实，并可以执行补救任务。
配置管理工具用于大型集群，因为它们减少了需要在自定义脚本中处理的工作量。
2.  **devo PS 背后的核心思想是什么？**
DevOps 背后的核心思想是增强团队的能力，使他们能够控制自己的部署和基础设施。这需要一个自动化程序形式的安全网络，以确保这些操作简单、安全、快速。
3.  **使用 GitOps 有什么优势？**
使用 GitOps 的主要优势如下:
*   Git 是大多数团队已经知道如何使用的通用工具。
*   它保留了基础架构定义的副本，这意味着我们可以将其用作备份并从灾难性故障中恢复，或者轻松地基于以前的定义创建新的群集。
*   基础设施的变更是有版本控制的，这意味着我们可以一个接一个地进行小的离散变更，如果有问题，可以恢复任何变更。
4.  **只能在 Kubernetes 集群中使用 GitOps 吗？**
虽然 GitOps 确实与 Kubernetes 有协同作用，但是由于 Kubernetes 可以由 YAML 文件控制，所以没有什么可以阻止我们使用 Git 存储库来控制集群。
5.  **Flux 部署在哪里？**
它生活在自己的 Kubernetes 集群中，因此可以从 Git 中提取数据。
6.  **需要在 GitHub 中配置什么才能让 Flux 访问？**
您需要将 SSH 密钥添加到 GitHub 存储库的部署密钥中。你可以通过调用`fluxctl identity`获得一个 SSH 密钥。
7.  **当您在生产环境中工作时，GitHub 提供的哪些功能可以确保我们能够控制部署？**
在合并到主分支之前，我们需要经过审查和批准，这将触发部署。包含代码所有者来强制特定用户的批准可以帮助我们控制微妙的区域。
# 第九章
1.  **当收到新的业务特性时，在微服务架构下工作的系统需要做哪些分析？**
我们需要确定新业务特性会影响哪些微服务。影响多个微服务的特性使其实现更加困难。
2.  **如果一个特性需要更改两个或更多的微服务，我们如何决定应该先更改哪个？**
为了保持向后兼容性，这应该以背靠背的方式进行。应该在考虑向后兼容性的同时添加新功能，因此可能性有限。一旦后端准备好了，前端就可以相应地改变，这样我们就可以利用新功能。
3.  【Kubernetes 如何帮助我们建立多种环境？
在 Kubernetes 中创建新的名称空间非常容易。由于系统的定义封装在 YAML 文件中，因此可以对其进行复制和修改，以创建一个重复的环境。这可以作为一个基线，然后进化。
4.  **代码评审是如何工作的？**
将一个分支中的代码与主分支进行比较。另一个开发人员可以查看它们之间的差异并做出评论，要求澄清或更改。然后可以讨论这些，如果审查者认为代码足够好，就可以批准代码。在获得一个或多个批准之前，可以阻止合并。
5.  **代码评审的主要瓶颈是什么？**
主要的瓶颈是没有审查者来提供反馈和批准代码。这就是为什么有足够的人来扮演评审者的角色是很重要的。
6.  **在 GitOps 原则下，部署的评审是否不同于代码评审？**
没有；在 GitOps 下，部署被视为代码，因此它们可以像任何其他代码审查一样进行审查。
7.  **为什么一旦一个特性准备好合并到主分支中，就要有一个清晰的部署路径？**