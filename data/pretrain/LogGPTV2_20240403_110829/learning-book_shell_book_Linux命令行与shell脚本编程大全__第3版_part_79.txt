本章带你逐步了解了gawk编程语言的高级特性。每种编程语言都要使用变量，gawk也不例
外。gawk编程语言包含了一些内建变量，可以用来引用特定的数据字段值，获取数据文件中处理
过的数据字段和记录数目信息。也可以自定义一些变量在脚本中使用。
gawk编程语言还提供了许多你期望编程语言该有的标准结构化命令。可以用if-then逻辑、
while和do-while以及for循环轻松地创建强大的程序。这些命令都允许你改变gawk程序脚本
的处理流程来遍历数据字段的值，创建出详细的数据报表。
---
## Page 509
第22章gawk进阶
如果要定制报告的输出，printf命令会是一个强大的工具。它允许指定具体的格式来显示
gawk程序脚本的数据。你可以轻松地创建格式化报表，将数据元素一丝不差地放到正确的位置上。
最后，本章讨论了gawk编程语言的许多内建函数，并介绍了如何创建自定义函数。gawk程
序有许多有用的函数可处理数学问题（比如标准的平方根运算、对数运算以及三角函数）。另外
还有若干字符申相关的函数，这使得从较大字符申中提取子字符申变得很简单。
你并不仅仅只能使用gawk程序的内建函数。如果你正在写一个要用到大量特定算法的应用程
序，那你可以创建自定义函数来处理这些算法，然后在代码中使用这些函数。也可以创建一个含
有所有你要在gawk程序中用到的函数的库文件，以节省时间和精力。
下一章会稍微换个方向，转面介绍你可能会遇到的其他一些shell环境。虽然bashshell是Linux
中最常用的shell，但它并不是唯一的shell。了解一点其他shell以及它们与bash shell的区别总归是
有好处的。
---
## Page 510
第23章
使用其他shell
本章内容
口理解dash shell
 dash shell脚本编程
 zsh shell介绍
zsh脚本编程
一些shell了。本章将会介绍另外两个你可能会碰到的shell，以及它们与bash shell有什么区别。
23.1什么是dashshell
Debian的dash shell的历史很有趣。它是ash shell的直系后代，而ash shel则是Unix系统上原来
的Bourne shell的简化版本（参见第1章）。Kenneth Almquist为Unix系统开发了一个Bourme shell的
23
简化版本，并将它命名为Almquist shell，缩写为ash。ash shell最早的版本体积极小、速度奇快，
但缺乏许多高级功能，比如命令行编辑或命令使用记录功能，这使它很难用作交互式shell。
对ash shell进行了定制，增加了一些新的功能，使它更接近Bourne shell。新功能包括使用emacs
和vi编辑器命令进行命令行编辑，利用历史命令来查看先前输人的命令。ashshell的这个版本也
被FreeBSD操作系统用作默认登录shell。
Debian Linux发行版创建了它自己的ash shell版本（称作Debian ash，或dash）以供自用。dash
复制了ash shell的NetBSD版本的大多数功能，提供了一些高级命令行编辑能力。
但令人不解的是，实际上dash shell在许多基于Debian的Linux发行版中并不是默认的shell。由
于bash shell在Linux中的流行，大多数基于Debian的Linux发行版将bash shell用作普通登录shell，
而只将dash shell作为安装脚本的快速启动shell，用于安装发行版文件。
流行的Ubuntu发行版是例外。这经常让shell脚本程序员摸不清头脑，给Linux环境中运行shell
脚本带来了很多问题。UbuntuLinux发行版将bash shell用作默认的交互shell，但将dash shell用作
---
## Page 511
496
第23章使用其他shell
默认的/bin/sh shell。这个“特性”着实让shell脚本程序员一头雾水。
如第11章所述，每个shell脚本的起始行都必须声明脚本所用的shell。在bash shell脚本中，我
们一直用下面的行。
+ 1 /bin/bash
它会告诉shell使用位于/bin/bash的shell程序来执行脚本。在Unix世界中，默认shell一直是
/bin/sh。许多熟悉Unix环境的shell脚本程序员会将这种用法带到他们的Linux shell脚本中。
+ 1 /bin/εh
在大多数Linux发行版上，/bin/sh文件是链接到shell程序/bin/bash的一个符号链接（参见第3
章）。这样你就可以在无需修改的情况下，轻松地将为Unix Bourne shell设计的shell脚本移植到
Linux环境中。
很遗燃，Ubuntu Linux发行版将/bin/sh文件链接到了shell程序/bin/dash。由于dash shell只含有
原来Boume shell中的一部分命令，这可能会（而且经常会）让有些shell脚本无法正确工作。
下一节将带你逐步了解dash shell的基础知识以及它眼bash shell的区别。如果你编写的bash
shell脚本可能要在Ubuntu环境中运行，了解这些内容就尤其重要。
23.2dashshell的特性
尽管bash shell和dash shell都以Boume shell为样板，但它们还是有一些差别的。在深入了解
shell脚本编程特性之前，本节将会带你了解Debian dash shell的一些特性，以便让你熟悉dash shell
的工作方式。
23.2.1dash命令行参数
dashshell使用命令行参数来控制其行为。表23-1列出了命令行参数，并介绍了每个参数的
用途。
表23-1dash命令行参数
数
播述
导出分配给sbell的所有变量
-c
从特定命令字符串中读取命令
-e
如果是非交互式sae的话。在有未经测试的命令失败时立即退出
-f
显示路径名通配符
n
如果是非交互式sell的话，读取命令但不执行它们
在尝试展开一个未设置的变量时，将错误消息写出到sTDERR
在读取输人时将输人写出到STDERR
在执行命令时将每个命令写出到STDERR
I
在交互式模式下，忽略输人中的E0F字符
---
## Page 512
23.2dash shell 的特性
497
（续）
器
述
激制shel运行在交互式模式下
启用作业控制（在交互式模式下默认开启）
·8
从STDID读取命令（在没有指定文件参数时的赋认行为）
-E
启用emacs命令行编辑器
N
启用vi命令行编辑莽
除了原先的ash shell的命令行参数外，Debian还加人了另外一些命令行参数。-E和-V命令行
参数会启用dash shell特有的命令行编辑功能。
-E命令行参数允许使用emacs编辑器命令进行命令行文本编辑（参见第10章）。你可以使用所
有的emacs命令来处理一行中的文本，其中会用到Ctrl和Meta组合键。
V命令行参数允许使用vi编辑器命令进行命令行文本编辑（参见第10章）。这个功能允许用
Esc键在普通模式和vi编辑器模式之间切换。当你在vi模式中时，可以用标准的vi编辑器命令（例
如，x删除一个字符，i插入文本）。完成命令行编辑后，必须再次按下Esc键退出vi编辑器模式。
23.2.2dash环境变量
dashshell用相当多的默认环境变量来记录信息，你也可以创建自已的环境变量。本节将会介
绍环境变量以及dash如何处理它们。
1.默认环境变量
dash环境变量跟bash环境变量很像（参见第6章）。这绝非偶然。别忘了dash shell和bash shell
都是Bourne shell的扩展版，两者都吸收了很多Boume shell的特性。不过，由于dash的目标是简洁，
23
因此它的环境变量比bash shell少多了。在dash shell环境中编写脚本时要记住这点。
dash shell用set命令来显示环境变量。
$set
DESKTOP_SESSION= *defau1t 
COLORTERM= '*
DISPLAY=′ : 0 , 0 '
GS_LIB=* /hone/ateat / ,fonta *
DH_CONTROL= * /var/xun /xdmct1 
HOME= */home/atest*
IFS='
KDEROOTHOXE=* /root/ kde*
KDE_FULL_SESSION=′true *
KONSOLE_DCOP= ′DCOPRe f (konso1e- 5293 , kongo1e1 *
KDE_KULTIHEAD='′ fa1se '
KONSOLE_DCOP_SESSION= DCOPRef (kongo1e5293, se8alon-11 *
LANG= 'en_US*
LANGUAGE= ′ en *
Sn"u9 , =TTV"
---
## Page 513
86
第23章使用其他shell
LOCNAME= ′ateat *
PATH=* /usr/Local/abin:/uax/1oca1/bin:/uar/abin: /uax/bin: /abin: /bin*
OPTIND=′1*
PPID= * 5293 *
PS1='$ 
PS2=′>
PS4=′+*
PHD= */home/atest ′
SESSION_KANAGER=*1oca1/testbox: /tmp/ ICEunix/5051*
SHELL=*/bin/dash *
SHLVL=*1′
TERK=*xtern'
XCURSOR_THEME=*defau1t
USER=* atest *
$
_=′ash *
这和你的默认dash shell环境很可能会不一样，因为不同的Linux发行版在登录时分配的默认
环境变量不同。
2.位置参数
除了默认环境变量，dash shell还给命令行上定义的参数分配了特殊变量。下面是dash shell
中用到的位置参数变量。
$0：shell的名称。
口$n：第a个位置参数。
口$*：含有所有参数内容的单个值，由IFS环境变量中的第一个字符分隔；没定义IFS的话，
由空格分隔。
口S9：将所有的命令行参数展开为多个参数。
S#：位置参数的总数
口$？：最近一个命令的退出状态码。
口$-：当前选项标记。
$$：当前shell的进程ID（PID）。
口S！：最近一个后台命令的PID。
所有dash的位置参数都类似于bash shell中的位置参数。可以在shell脚本中使用位置参数，就
和bash shell中的用法一样。
3.用户自定义的环境变量
dash shell还允许定义自已的环境变量。与bash一样，你可以在命令行上用赋值语句来定义新
的环境变量。
$teating=10 ; export test1ng
$ echo Stesting
1 0
$
如果不用export命令，用户自定义的环境变量就只在当前shell或进程中可见。
---
## Page 514
23.2dash shell 的特性
499
警告dash变量和bash变量之间有一个巨大的差异。dash shell不支持数组。这个小特性给高级
shell脚本开发人员带采了各种问题。
23.2.3dash内建命令
跟bash shell一样，dash shell含有一组它能识别的内建命令。你可以在命令行界面上直接使用
这些命令，或者将其放到shell脚本中。表23-2列出了dash shell的内建命令。
表23-2dash shell内建命令
命
描述
alla5
创建代表文本字符串的别名字符申
bg
以后台模式继续执行指定的作业
切换到指定的目录
echo
显示文本字符申和环境变量
eva1
将所有参数用空格连起来
exec
用指定命令替换shel进程
exit.
终止shelli进程
export:
导出指定的环境变量，供子shel使用
fg
以前台模式继续执行指定的作业
getopta
从参数列表中中提取选项和参数
hash
维护并提取最近执行的命令及其位置的哈希表
pvd
显示当前工作目录
read
从STDIN读取一行并将其赋给一个变量
23
readonly
从STDIN读取一行并赋给一个只读变量
printf
用格式化字符串显示文本和变量
set
列出或设置选项标记和环境变量
shift
按指定的次数移动位置参数
test
测试一个表达式，成立的话返目0，不成立的话返回1
c.ineR
显示当前shel和所有shell进程的累计用户时阿和系统时间
c.rap
在shel收到某个指定信号时解析并执行命令
cype
解释指定的名称并显示结果（别名、内建、命令或关键字）
ulinit
查询或设置进程限制
umask
设置文件和目录的默认权限
umallas
删除指定的别名
①这条命令的重点在于将所有参数用空格连接起来之后，它会重新解析并执行这条命令。
---
## Page 515
500
第23章使用其他shell
(续）
命令
描述
unset:
从导出的变量中删除指定的变量或选项标记
mait
等待指定的作业完成，然后返回退出状态码
你可能在bash shell中已经认识了上面的所有内建命令。dash shell支持许多和bash shell一样的
内建命令。你会注意到其中没有操作命令历史记录或目录栈的命令。dashshell不支持这些特性。
23.3dash脚本编程
很遗,dash shell不能识别bash shell的所有脚本编程功能。为bash环境编写的脚本在dash shell
中通常会运行失败，这给shell脚本程序员带来了很多痛苦。本节将介绍一些值得留意的差别，以
便你的shell脚本能够在dash shell环境中正常运行。
23.3.1创建dash脚本
到此你可能已经猜到了，为dash shell编写脚本和为bash shel编写脚本非常类似。一定要在脚
本中指定要用哪个shell，保证脚本是用正确的shell运行的。
可以在shell脚本的第一行指定：
+ 1 /bin/dash
还可以在这行指定shell命令行参数，23.2.1节介绍了这些参数。
23.3.2不能使用的功能
很遗燃，由于dash shell只是Bourne shell功能的一个子集，bash shell脚本中的有些功能没法
在dash shell中使用。这些通常被称作bash主叉（bashism）。本节将简单总结你在bash shell脚本中
习惯使用但在dash shell环境中没法工作的bash shell功能。
1.算术运算
第11章介绍了三种在bashshell脚本中进行数学运算的方法。
使用expr命令：expr operation。
使用方括号：$[operation ]。
使用双圆括号：S（（operation1）。
dash shell支持expr命令和双圆括号方法，但不支持方括号方法。如果有大量采用方括号形
式的数学运算的话，这可能是个问题。
在dashshell脚本中执行算术运算的正确格式是用双圆括号方法。
$ cat test5b
+1 /bin/dash
+ testing mathenatical operations
---