the arguments of the command are as follows:
.tp
.i title
the title of the man page, written in all caps (e.g.,
.ir man-pages ).
.tp
.i section
the section number in which the man page should be placed (e.g.,
.ir 7 ).
.tp
.i date
the date of the last nontrivial change that was made to the man page.
(within the
.i man-pages
project, the necessary updates to these timestamps are handled
automatically by scripts, so there is no need to manually update
them as part of a patch.)
dates should be written in the form yyyy-mm-dd.
.tp
.i source
the source of the command, function, or system call.
.ip
for those few \fiman-pages\fp pages in sections 1 and 8,
probably you just want to write
.ir gnu .
.ip
for system calls, just write
.ir "linux" .
(an earlier practice was to write the version number
of the kernel from which the manual page was being written/checked.
however, this was never done consistently, and so was
probably worse than including no version number.
henceforth, avoid including a version number.)
.ip
for library calls that are part of glibc or one of the
other common gnu libraries, just use
.ir "gnu c library" ", " gnu ,
or an empty string.
.ip
for section 4 pages, use
.ir "linux" .
.ip
in cases of doubt, just write
.ir linux ", or " gnu .
.tp
.i manual
the title of the manual (e.g., for section 2 and 3 pages in
the \fiman-pages\fp package, use
.ir "linux programmer's manual" ).
.\"
.ss sections within a manual page
the list below shows conventional or suggested sections.
most manual pages should include at least the
.b highlighted
sections.
arrange a new manual page so that sections
are placed in the order shown in the list.
.pp
.rs
.ts
l l.
\fbname\fp
\fbsynopsis\fp
configuration	[normally only in section 4]
\fbdescription\fp
options	[normally only in sections 1, 8]
exit status	[normally only in sections 1, 8]
return value	[normally only in sections 2, 3]
.\" may 07: few current man pages have an error handling section,,,
.\" error handling,
errors	[typically only in sections 2, 3]
.\" may 07: almost no current man pages have a usage section,,,
.\" usage,
.\" diagnostics,
.\" may 07: almost no current man pages have a security section,,,
.\" security,
environment
files
versions	[normally only in sections 2, 3]
attributes	[normally only in sections 2, 3]
conforming to
notes
bugs
examples
.\" authors sections are discouraged
authors	[discouraged]
reporting bugs	[not used in man-pages]
copyright	[not used in man-pages]
\fbsee also\fp
.te
.re
.pp
.ir "where a traditional heading would apply" ", " "please use it" ;
this kind of consistency can make the information easier to understand.
if you must, you can create your own
headings if they make things easier to understand (this can
be especially useful for pages in sections 4 and 5).
however, before doing this, consider whether you could use the
traditional headings, with some subsections (\fi.ss\fp) within
those sections.
.pp
the following list elaborates on the contents of each of
the above sections.
.tp
.b name
the name of this manual page.
.ip
see
.br man (7)
for important details of the line(s) that should follow the
\fb.sh name\fp command.
all words in this line (including the word immediately
following the "\e\-") should be in lowercase,
except where english or technical terminological convention
dictates otherwise.
.tp
.b synopsis
a brief summary of the command or function's interface.
.ip
for commands, this shows the syntax of the command and its arguments
(including options);
boldface is used for as-is text and italics are used to
indicate replaceable arguments.
brackets ([]) surround optional arguments, vertical bars (|)
separate choices, and ellipses (\&...) can be repeated.
for functions, it shows any required data declarations or
.b #include
directives, followed by the function declaration.
.ip
where a feature test macro must be defined in order to obtain
the declaration of a function (or a variable) from a header file,
then the synopsis should indicate this, as described in
.br feature_test_macros (7).
.\" fixme . say something here about compiler options
.tp
.b configuration
configuration details for a device.
.ip
this section normally appears only in section 4 pages.
.tp
.b description
an explanation of what the program, function, or format does.
.ip
discuss how it interacts with files and standard input, and what it
produces on standard output or standard error.
omit internals and implementation details unless they're critical for
understanding the interface.
describe the usual case;
for information on command-line options of a program use the
.b options
section.
.\" if there is some kind of input grammar or complex set of subcommands,
.\" consider describing them in a separate
.\" .b usage
.\" section (and just place an overview in the
.\" .b description
.\" section).
.ip
when describing new behavior or new flags for
a system call or library function,
be careful to note the kernel or c library version
that introduced the change.
the preferred method of noting this information for flags is as part of a
.b .tp
list, in the following form (here, for a new system call flag):
.rs 16
.tp
.br xyz_flag " (since linux 3.7)"
description of flag...
.re
.ip
including version information is especially useful to users
who are constrained to using older kernel or c library versions
(which is typical in embedded systems, for example).
.tp
.b options
a description of the command-line options accepted by a
program and how they change its behavior.
.ip
this section should appear only for section 1 and 8 manual pages.
.\" .tp
.\" .b usage
.\" describes the grammar of any sublanguage this implements.
.tp
.b exit status
a list of the possible exit status values of a program and
the conditions that cause these values to be returned.
.ip
this section should appear only for section 1 and 8 manual pages.
.tp
.b return value
for section 2 and 3 pages, this section gives a
list of the values the library routine will return to the caller
and the conditions that cause these values to be returned.
.tp
.b errors
for section 2 and 3 manual pages, this is a list of the
values that may be placed in
.i errno
in the event of an error, along with information about the cause
of the errors.
.ip
where several different conditions produce the same error,
the preferred approach is to create separate list entries
(with duplicate error names) for each of the conditions.
this makes the separate conditions clear, may make the list easier to read,
and allows metainformation
(e.g., kernel version number where the condition first became applicable)
to be more easily marked for each condition.
.ip
.ir "the error list should be in alphabetical order" .
.tp
.b environment
a list of all environment variables that affect the program or function
and how they affect it.
.tp
.b files
a list of the files the program or function uses, such as
configuration files, startup files,
and files the program directly operates on.
.ip
give the full pathname of these files, and use the installation
process to modify the directory part to match user preferences.
for many programs, the default installation location is in
.ir /usr/local ,
so your base manual page should use
.i /usr/local
as the base.
.\" may 07: almost no current man pages have a diagnostics section;
.\"         "return value" or "exit status" is preferred.
.\" .tp
.\" .b diagnostics
.\" gives an overview of the most common error messages and how to
.\" cope with them.
.\" you don't need to explain system error messages
.\" or fatal signals that can appear during execution of any program
.\" unless they're special in some way to the program.
.\"
.\" may 07: almost no current man pages have a security section.
.\".tp
.\".b security
.\"discusses security issues and implications.
.\"warn about configurations or environments that should be avoided,
.\"commands that may have security implications, and so on, especially
.\"if they aren't obvious.
.\"discussing security in a separate section isn't necessary;
.\"if it's easier to understand, place security information in the
.\"other sections (such as the
.\" .b description
.\" or
.\" .b usage
.\" section).
.\" however, please include security information somewhere!
.tp
.b attributes
a summary of various attributes of the function(s) documented on this page.
see
.br attributes (7)
for further details.
.tp
.b versions
a brief summary of the linux kernel or glibc versions where a
system call or library function appeared,
or changed significantly in its operation.
.ip
as a general rule, every new interface should
include a versions section in its manual page.
unfortunately,
many existing manual pages don't include this information
(since there was no policy to do so when they were written).
patches to remedy this are welcome,
but, from the perspective of programmers writing new code,
this information probably matters only in the case of kernel
interfaces that have been added in linux 2.4 or later
(i.e., changes since kernel 2.2),
and library functions that have been added to glibc since version 2.1
(i.e., changes since glibc 2.0).
.ip
the
.br syscalls (2)
manual page also provides information about kernel versions
in which various system calls first appeared.
.tp
.b conforming to
a description of any standards or conventions that relate to the function
or command described by the manual page.
.ip
the preferred terms to use for the various standards are listed as
headings in
.br standards (7).
.ip
for a page in section 2 or 3,
this section should note the posix.1
version(s) that the call conforms to,
and also whether the call is specified in c99.
(don't worry too much about other standards like sus, susv2, and xpg,
or the svr4 and 4.xbsd implementation standards,
unless the call was specified in those standards,
but isn't in the current version of posix.1.)
.ip
if the call is not governed by any standards but commonly
exists on other systems, note them.
if the call is linux-specific, note this.
.ip
if this section consists of just a list of standards
(which it commonly does),
terminate the list with a period (\(aq.\(aq).
.tp
.b notes
miscellaneous notes.
.ip
for section 2 and 3 man pages you may find it useful to include
subsections (\fbss\fp) named \filinux notes\fp and \figlibc notes\fp.
.ip
in section 2, use the heading
.i "c library/kernel differences"
to mark off notes that describe the differences (if any) between
the c library wrapper function for a system call and
the raw system call interface provided by the kernel.
.tp
.b bugs
a list of limitations, known defects or inconveniences,
and other questionable activities.
.tp
.b examples
one or more examples demonstrating how this function, file, or
command is used.
.ip
for details on writing example programs,
see \fiexample programs\fp below.
.tp
.b authors
a list of authors of the documentation or program.
.ip
\fbuse of an authors section is strongly discouraged\fp.
generally, it is better not to clutter every page with a list
of (over time potentially numerous) authors;
if you write or significantly amend a page,
add a copyright notice as a comment in the source file.
if you are the author of a device driver and want to include
an address for reporting bugs, place this under the bugs section.
.tp
.b reporting bugs
the
.ir man-pages
project doesn't use a reporting bugs section in manual pages.
information on reporting bugs is instead supplied in the
script-generated colophon section.
however, various projects do use a reporting bugs section.
it is recommended to place it near the foot of the page.
.tp
.b copyright
the
.ir man-pages
project doesn't use a copyright section in manual pages.
copyright information is instead maintained in the page source.
in pages where this section is present,
it is recommended to place it near the foot of the page, just above see also.
.tp
.b see also
a comma-separated list of related man pages, possibly followed by
other related pages or documents.
.ip
the list should be ordered by section number and
then alphabetically by name.
do not terminate this list with a period.
.ip
where the see also list contains many long manual page names,
to improve the visual result of the output, it may be useful to employ the
.i .ad l
(don't right justify)
and
.i .nh
(don't hyphenate)
directives.
hyphenation of individual page names can be prevented
by preceding words with the string "\e%".
.ip
given the distributed, autonomous nature of foss projects
and their documentation, it is sometimes necessary\(emand in many cases
desirable\(emthat the see also section includes references to
manual pages provided by other projects.
.sh formatting and wording conventions
the following subsections note some details for preferred formatting and
wording conventions in various sections of the pages in the
.ir man-pages
project.
.ss synopsis
wrap the function prototype(s) in a
.ir .nf / .fi
pair to prevent filling.
.pp
in general, where more than one function prototype is shown in the synopsis,
the prototypes should
.i not
be separated by blank lines.
however, blank lines (achieved using
.ir .pp )
may be added in the following cases:
.ip * 3
to separate long lists of function prototypes into related groups
(see for example
.br list (3));
.ip *
in other cases that may improve readability.
.pp
in the synopsis, a long function prototype may need to be
continued over to the next line.
the continuation line is indented according to the following rules:
.ip 1. 3
if there is a single such prototype that needs to be continued,
then align the continuation line so that when the page is
rendered on a fixed-width font device (e.g., on an xterm) the
continuation line starts just below the start of the argument
list in the line above.
(exception: the indentation may be
adjusted if necessary to prevent a very long continuation line
or a further continuation line where the function prototype is
very long.)
as an example:
.pp
.rs
.nf
.bi "int tcsetattr(int " fd ", int " optional_actions ,
.bi "              const struct termios *" termios_p );
.fi
.re
.ip 2. 3
but, where multiple functions in the synopsis require
continuation lines, and the function names have different
lengths, then align all continuation lines to start in the
same column.
this provides a nicer rendering in pdf output
(because the synopsis uses a variable width font where
spaces render narrower than most characters).
as an example:
.pp
.rs
.nf
.bi "int getopt(int " argc ", char * const " argv[] ,
.bi "           const char *" optstring );
.bi "int getopt_long(int " argc ", char * const " argv[] ,
.bi "           const char *" optstring ,
.bi "           const struct option *" longopts ", int *" longindex );
.fi
.re
.ss return value
the preferred wording to describe how
.i errno
is set is
.ri \(dq errno
is set to indicate the error"
or similar.
.\" before man-pages 5.11, many different wordings were used, which
.\" was confusing, and potentially made scripted edits more difficult.
this wording is consistent with the wording used in both posix.1 and freebsd.
.ss attributes
.\" see man-pages commit c466875ecd64ed3d3cd3e578406851b7dfb397bf
note the following:
.ip * 3
wrap the table in this section in a
.ir ".ad\ l" / .ad
pair to disable text filling and a
.ir .nh / .hy
pair to disable hyphenation.
.ip *
ensure that the table occupies the full page width through the use of an
.i lbx
description for one of the columns
(usually the first column,
though in some cases the last column if it contains a lot of text).
.ip *
make free use of
.ir t{ / t}
macro pairs to allow table cells to be broken over multiple lines
(also bearing in mind that pages may sometimes be rendered to a
width of less than 80 columns).
.pp
for examples of all of the above, see the source code of various pages.
.sh style guide
the following subsections describe the preferred style for the
.ir man-pages
project.
for details not covered below, the chicago manual of style
is usually a good source;
try also grepping for preexisting usage in the project source tree.
.ss use of gender-neutral language
as far as possible, use gender-neutral language in the text of man
pages.
use of "they" ("them", "themself", "their") as a gender-neutral singular
pronoun is acceptable.
.\"
.ss formatting conventions for manual pages describing commands
for manual pages that describe a command (typically in sections 1 and 8),
the arguments are always specified using italics,
.ir "even in the synopsis section" .
.pp
the name of the command, and its options, should
always be formatted in bold.
.\"
.ss formatting conventions for manual pages describing functions
for manual pages that describe functions (typically in sections 2 and 3),
the arguments are always specified using italics,
.ir "even in the synopsis section" ,
where the rest of the function is specified in bold:
.pp
.bi "    int myfunction(int " argc ", char **" argv );
.pp
variable names should, like argument names, be specified in italics.
.pp
any reference to the subject of the current manual page
should be written with the name in bold followed by
a pair of parentheses in roman (normal) font.
for example, in the
.br fcntl (2)
man page, references to the subject of the page would be written as:
.br fcntl ().
the preferred way to write this in the source file is:
.pp
.ex
    .br fcntl ()
.ee
.pp
(using this format, rather than the use of "\efb...\efp()"
makes it easier to write tools that parse man page source files.)
.\"
.ss use semantic newlines
in the source of a manual page,
new sentences should be started on new lines,
and long sentences should be split into lines at clause breaks
(commas, semicolons, colons, and so on).
this convention, sometimes known as "semantic newlines",
makes it easier to see the effect of patches,
which often operate at the level of individual sentences or sentence clauses.
.\"
.ss formatting conventions (general)
paragraphs should be separated by suitable markers (usually either
.i .pp
or
.ir .ip ).
do
.i not
separate paragraphs using blank lines, as this results in poor rendering
in some output formats (such as postscript and pdf).
.pp
filenames (whether pathnames, or references to header files)
are always in italics (e.g.,
.ir  ),
except in the synopsis section, where included files are in bold (e.g.,
.br "#include " ).
when referring to a standard header file include,
specify the header file surrounded by angle brackets,
in the usual c way (e.g.,
.ir  ).
.pp