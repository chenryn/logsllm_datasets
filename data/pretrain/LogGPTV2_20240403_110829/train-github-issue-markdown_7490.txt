### Apache Airflow version
2.3.2 (latest released)
### What happened
Using the provided minimal example, `task_instance` (i.e., `ti`) is accessible
when using `PythonOperator` but fails when using `PythonVirtualenvOperator`.
### What you think should happen instead
I would expect `PythonOperator` and `PythonVirtualenvOperator` to behave in a
similar way. Instead, none of the xcom examples work with
`PythonVirtualenvOperator`.
### How to reproduce
Switch between `PythonOperator` and `PythonVirtualenvOperator`. Using
`PythonVirtualenvOperator` dag will fail.
    from airflow import DAG
    from airflow.operators.python import PythonVirtualenvOperator, PythonOperator
    from datetime import datetime, timedelta
    def _pusher(ti):
        ti.xcom_push(key='my-key', value='my-value')
    def _puller(ti):
        value = ti.xcom_pull(task_ids='pusher', key='my-key')
        assert value == 'my-value'
    with DAG('minimal-example', schedule_interval='@once', start_date=datetime(2021, 1, 1), catchup=False) as dag:
        #pusher = PythonVirtualenvOperator(
        pusher = PythonOperator(
            task_id='pusher',
            python_callable=_pusher,
            #requirements=[],
        )
        #puller = PythonVirtualenvOperator(
        puller = PythonOperator(
            task_id='puller',
            python_callable=_puller,
            #requirements=[],
        )
        pusher >> puller
### Operating System
Ubuntu 20.04
### Versions of Apache Airflow Providers
Apache airflow 2.3.2 in docker container
### Deployment
Docker-Compose
### Deployment details
https://github.com/apache/airflow/blob/2.3.2/docs/apache-airflow/start/docker-
compose.yaml
### Anything else
_No response_
### Are you willing to submit PR?
  * Yes I am willing to submit a PR!
### Code of Conduct
  * I agree to follow this project's Code of Conduct