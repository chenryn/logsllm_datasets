Figure 2.6: XML example document
2.2. THE EXTENSIBLE MARKUP LANGUAGE
23
An XML document must be well-formed, which requires it to comply with
ﬁve conditions. First, an XML document must have only one root element.
Second, non-empty elements must be enclosed in both a start and an end
tag. Third, all attribute values must be placed either in single quotes (”)
or in double quotes (“”). Forth, tags must be nested and must not overlap
each other. In other words, each element except of the root element must be
contained completely in another element. Fifth, the XML document must be
encoded as stated in its prolog or as speciﬁed in the corresponding transport
protocol, e.g., HTTP. In addition to being well-formed, a document can also
be valid, which means that the document is conform with a document type
deﬁnition or a schema. We will explain both concepts in Section 2.2.4. Before
we introduce these concepts, we must explain the concept
2.2.3 XML Namespaces
XML Namespaces [Con99] are used to combine data from diﬀerent documents
in one XML document. Namespaces can be assigned both to elements and
to attributes. This can be done to give elements or attributes with the
same name diﬀerent semantics as it was intended, because Namespaces deﬁne
in which context an element has to be interpreted. Consequently, the use
of Namespaces helps to avoid collisions of data type names from diﬀerent
sources. As a result, documents can be combined even if parts of their data
types share the same name but have diﬀerent semantics.
Namespaces are identiﬁed using a Uniform Resource Identiﬁer (URI)
[BLFM05], which is the more general concept of a Uniform Resource Lo-
cator (URL) [Net02]. These URIs are used to name or to locate a speciﬁc
resource. Namespaces can be assigned either directly to an element or with
the use of a preﬁx. Elements inherit the Namespace of their parent elements,
if no Namespace is assigned directly to them. Only the most speciﬁc Names-
pace is eﬀective for an element. Consequently, an element or attribute can
have only one Namespace.
Figure 2.7 illustrates the usage of Namespaces. In this example, we assign
the Namespace urn:example:report to the root element Report and deﬁne
the Namespace urn:example:ac with the preﬁx ac, where ac is short for ac-
cess control. We use the preﬁx ac to assign the the corresponding Namespace
to the to two block elements.
In this thesis, Namespaces are used within the implementation in Chapter
7 to store history information together with the original content of a docu-
ment without having collisions of names of the corresponding elements and
attributes.
24
CHAPTER 2. BACKGROUND
text part 1
text part 2
Figure 2.7: Example usage of Namespaces
2.2.4 XML Schema
XML Schemas [Con04] are used to describe classes of documents with a
common structure. Before Schemas were introduced in 2004, Document Type
Deﬁntions (DTDs) were used for this purpose. Compared to DTDs, Schemas
oﬀer three advantages. First, Schemas are denoted in XML in contrast to
DTD, which are written in a diﬀerent syntax. Storing Schemas as XML
enables one to use the same tools for both Schemas and XML documents to
verify their well-formedness and their validity. Second, Schemas oﬀer a richer
language to express constraints on the structure of documents, which makes
the resulting speciﬁcation more precise. For example, to deﬁne a data type
in a DTD one has to enumerate all possible values for that type. In a Schema
one can use data types or regular expressions for this purpose, which is both
more expressive and more precise. Third, Schemas can be derived from each
other by inheritance, which makes the deﬁnition of Schemas more expressive
and therefore more eﬃcient. Schemas can also be combined by using other
Schemas in the deﬁnition of one Schema. In this cases, Namespaces are used
to avoid conﬂicts in names and to resolve ambiguity.
The Schema in Figure 2.8 deﬁnes Report documents like the one illus-
trated in Figure 2.6. In its root element schema, the Namespace with the
preﬁx xs is deﬁned, which is used for all elements of a Schema. Next, the
root element of a Report is deﬁned as a complex type (complexType) consist-
ing of a sequence of Section elements and a required attribute funded-by.
The Section elements in the sequence must occur at least 0 times, which
states that it is optional, whereas their maximum number of occurrences is
unbounded. The Title attribute of a Section is marked as being optional.
Both the attributes and the content of the element are deﬁned as a string,
which means that they can contain any text.
Summing up, Schemas describe how certain types of XML document must
2.2. THE EXTENSIBLE MARKUP LANGUAGE
25
Figure 2.8: Example of a Schema for a Report
be structured, but they do not deﬁne the semantics of the corresponding
elements. Schemas are relevant in this thesis in two aspects. First, to deﬁne
access control rules in our model it is essential that documents are conform
to the structure deﬁned in their Schemas. Otherwise, it would be impossible
to specify access control rules. Second, in the implementation of our model
in Chapter 7, we make use of Schemas to deﬁne the data structures for access
control rules and histories.
2.2.5 XML Path Language (XPath)
The XML Path Language (XPath) [CD99] is a language to address parts of
an XML document. XPath is used in many diﬀerent ways and for diﬀer-
ent purposes. Many implementations that manipulate XML documents use
XPath to specify the objects on which an operation should be performed.
Moreover, XPath is also used as a query language to retrieve a speciﬁc part
of a document that is of special interest. In addition to this, XPath is used in
other languages such as XPointer , XSLT and XQuery , which use XPath as
a basis mechanism to address parts of an XML document. Finally, XPath is
26
CHAPTER 2. BACKGROUND
used in access control to describe the objects within an access control rule. In
this thesis, we use XPath as a mechanism to specify objects in access control
rules. For this reason, we brieﬂy explain the basics of XPath.
XPath operates on the logical structure of an XML document, which is
interpreted as a tree with three types of nodes: elements, attributes and text
content. The basic expression of XPath is the path expression, which consists
of a sequence of element names divided by “/”, e.g., /Report/Section is used
to address all Sections elements of a Report. A condition using predicates
can be placed after each step in the path and is used to specify the nodes
in question more precise, e.g., /Report/Section[@Title="Introduction"]
only returns the Section elements with an attribute Title that is set to
“Introduction”. These previous examples made use of the child relation of
elements among each other. In addition to the child relation, other relations
can be used in XPath as well.
An XPath expression is evaluated for a speciﬁc node, which is called
the context node. The context node changes within a sub-expression to the
resulting nodes of the previous expression. The result of an expression has
one of the following four types: boolean, node set, string or ﬂoating point
number. XPath deﬁnes a set of operators that can be used to manipulate
these data types. This includes boolean operators, arithmetic operators and
comparison operators. In addition to these operators, XPath has a built-in
function library which includes functions for string manipulations, functions
on node sets and mathematical functions.
In XPath, other relations of the elements among each other can be used
to specify nodes in expressions as well. For this purpose, XPath oﬀers so-
called axis for each relation. For example, the child axis is used to describe
elements by their child relation among each other. The child axis is also
the default axis of XPath and is speciﬁed the “/” character in expressions.
The “/” is part of the abbreviated syntax of XPath, which is used to make
expressions shorter. The expanded syntax can be used to make expressions
easier to understand or to emphasize a speciﬁc relation between nodes. For
example, /child::Report/child::Section is the expanded syntax of the
pattern presented above.
2.3 Trusted Computing Group Mechanisms
This section gives an overview of the mechanisms described by the TCG. For
a more detailed description, we refer to the TPM speciﬁcation [Gro06] or
[Pea02].
The core of the TCG mechanisms [Gro06, Pea02] is the Trusted Platform
2.3. TRUSTED COMPUTING GROUP MECHANISMS
27
Module (TPM), which is basically a smartcard soldered on the mainboard of
a PC. The TPM serves as the root of trust, because its hardware implemen-
tation makes it diﬃcult to tamper with, and therefore it is assumed to be
trustworthy. One must also assume that the hardware vendor is trustworthy
and has designed the TPM chip according to the speciﬁcation. Although
the TPM chip is not speciﬁed to be tamper-resistant, it is tamper-evident,
meaning that unauthorized manipulations can be detected.
The TPM can create and store cryptographic keys, both symmetric and
asymmetric. These keys can either be marked migratable or non-migratable,
which is speciﬁed when the key is generated. In contrast to non-migratable
keys, migratable keys can be transferred to another TPM. Due to its limited
storage capacity, the TPM can also store keys on the hard disk. In this case,
these keys are encrypted with a non-migratable key, assuring the same level
of security as if the keys were stored directly in the TPM. The TPM is able
to perform calculations on its own, e.g., it can use the generated keys for
encryption and decryption.
In the context of this thesis, the Platform Conﬁguration Registers (PCRs)
are of particular interest. These registers are initialized on power up and
are used to store the software integrity values. Software components are
measured by the TPM and the corresponding hash-value is then written
to this platform conﬁguration register by extending the previous value of a
speciﬁc PCR. The following cryptographic function is used to calculate the
values for the speciﬁc registers:
Extend(P CRN , value) = SHA1(P CRN||value)
For every measured component an event is created and stored in the
stored measurement log (SML). The PCR values can then be used together
with the SML to attest the platform’s state to a remote party. To make sure
that these values are authentic, they are signed with a non-migratable TPM
signing key, the Attestation Identity Key (AIK). The remote platform can
compare these values with reference values to see whether the platform is in a
trustworthy state or not. The TCG assumes that a trusted operating system
measures the hash value of every process started after the boot process.
Such s trusted OS is not part of the TCG speciﬁcation. For a description of
a trusted OS see [GRB03, SZJvD04, Bas06].
The TPM additionally oﬀers a number of diﬀerent signing keys. One
major key is the Endorsement Key (EK) which is generated by the module
manufacturer and injected into the TPM. The EK uniquely identiﬁes the
TPM and is used to prove that the TPM is genuine. In addition, the EK is
used to obtain an Attestation Identity Key (AIK). An AIK is created inside
28
CHAPTER 2. BACKGROUND
the TPM, signed with the private portion of the EK, and the public part is
transferred to a third party (a Privacy-CA). The Privacy-CA veriﬁes that the
platform is a genuine TPM and creates a certiﬁcate which binds the identity
key to the identity label and generic information about the platform. This
certiﬁcate, also known as identity credential is sent to the TPM and later
used to attest the authenticity of a platform conﬁguration.
2.3.1 Remote Attestation
The remote attestation is used to attest the conﬁguration of an entity to
a remote entity. This procedure is widely used to get integrity information
before a client proceeds with the communication in order to use a service or
receive data, e.g., digital content. This mechanism is referred as integrity re-
porting and can be applied in many scenarios and diﬀerent applications, such
as controlling access to a network depending on the trustworthiness of the
client [SJZvD04]. The integrity reporting mechanism is also one requirement
mechanism in the context of DRM applications, since it is obviously required
that the DRM-client software is in a trustworthy state and executes a cer-
tain policy to prohibit unauthorized use, copy or redistribution of intellectual
property [RC05].
2.3.2
Integrity Reporting Protocols
The concept of remote attestation has been developed to enable integrity re-
porting protocols. In this section we discuss an integrity reporting protocol
proposed by [SZJvD04], which is based on the challenge-response authenti-
cation [BM92] and is used to validate the integrity of an attesting system.
Figure 2.9 illustrates the remote attestation of B against A. In step 1 and
2, A creates a non-predictable nonce and sends it to the attestor B. In step 3a,
the attestor loads the Attestation Identity Key from the protected storage of
the TPM by using the storage root key (SRK). In the next step, the attestor
performs a TPM Quote command, which is used to sign the selected PCRs
and the provided nonce with the private key AIKpriv. Additionally, the
attestor retrieves the stored measurement log (SML). In step 4, the attestor
sends the response consisting of the signed Quote, signed nonce and the
SML to A. The attestor also delivers the AIK credential which consists of
the AIKpub that was signed by a Privacy-CA.
In step 5a, A validates if the AIK credential was signed by a trusted
Privacy-CA thus belonging to a genuine TPM. A also veriﬁes whether AIKpub
is still valid by checking the certiﬁcate revocation list of the trusted issuing
2.3. TRUSTED COMPUTING GROUP MECHANISMS
29
A
A → B : ChallengeRequest(nonce)
: create a non-predictable 160bit nonce
1.
2.
3a. B
3b. B
3c. B
4.
5a. A
5b. A
5c. A
: loadkey(AIKpriv)
: retrieve Quote = sig{P CR, nonce}AIKpriv
: get stored measurement log (SML)
B → A : ChallengeResponse(Quote, SML) and cert(AIKpub)
: validate cert(AIKpub)
: validate sig{P CR, nonce}AIKpriv
: validate nonce and SM L using P CR
Figure 2.9: Integrity reporting protocol [SZJvD04]
party. This step was designed to discover masquerading by comparing the
unique identiﬁcation of B with the system identiﬁcation given in AIKpub.
In the next step, A veriﬁes the signature of the Quote and checks the
freshness of Quote in step 5c. Based on the received stored measurement
log and the PCR values A processes the SML and re-computes the received
PCR values. If the computed values match the signed aggregate, the SML is
valid and untampered. A now only veriﬁes if the delivered integrity reporting
values match given reference values, thus A can decide if the remote party is
in a trustworthy system state.
30
CHAPTER 2. BACKGROUND
Chapter 3
Scenario and Requirements
In this chapter, we ﬁrst present a scenario to illustrate diﬀerent challenges for
history-based access control for XML documents. Within this scenario, we
sketch diﬀerent situations that illustrate requirements for an access control
system. We use these speciﬁc situations to derive general challenges for ac-
cess control. Based on these general challenges, we deﬁne explicit individual
requirements for our model.
3.1 Scenario
In this section, we present a scenario to illustrate the requirements for history-
based access control. In our scenario, we consider ﬁve types of documents,
which are listed in Table 3.2. These document types diﬀer in their required
level of protection. We list protection levels of this scenario and their descrip-
tion in Table 3.1. The document types in this scenario are an example for