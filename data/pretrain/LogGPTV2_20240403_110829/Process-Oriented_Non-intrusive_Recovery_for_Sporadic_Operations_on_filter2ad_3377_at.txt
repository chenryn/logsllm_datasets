Step 3. 
Register these 
12 instances 
with the load 
balancer 
6 instances 
not in ELB 
RP1, RP3, 
RP5, RP6, 
RP8 
3)  Satisfying Recovery Requirement R2 
Attach ASG 
with the correct 
LC; 
Terminate the 6 
wrong 
instances; 
Wait for ASG 
to launch 6 new 
instances; 
57.98 s 
Attach ASG 
with the 
correct LC; 
Terminate the 
6 wrong 
instances; 
Wait for ASG 
to launch 6 
new instances; 
59.76 s 
(Reparation) 
 (Reparation) 
Register the 6 
instances with 
the load 
balancer; 
(Reparation) 
11.44 s 
Register the 
12 instances 
with the load 
balancer 
again; 
 (Direct Redo) 
20.69 s 
From  the  results  we  can  see  that  the  recovery  for  all  the  recovery  points  in  the  scale-up 
operation takes no more than 60 seconds for execution. In addition, for these experiments state 
capturing time was typically around 14s but at most 15s, applicable recovery patterns filtering 
time  was  at  most  44  milliseconds  (ms),  recovery  plan  generation  time  for  each  applicable 
recovery pattern was at most 75 milliseconds (ms), applicable recovery actions evaluation time 
is at most 230 milliseconds (ms), and acceptable recovery action selection time is at most 280 
milliseconds  (ms).  While  not  part  of  our  scope  here  directly,  error  detection  time  has  to  be 
considered when discussing RTO as well. Detection times reported in the literature ranged from 
10ms to 11 seconds (X. Xu, et al., 2014). The sum of the worst cases of all the above times, i.e. 
the total error detection and recovery time, is around 87s. So, for each recovery point, the total 
recovery time is below 87 seconds, no matter which recovery action selection method is used. 
Normally,  if  the  errors  occur  again,  POD-Diagnosis  service  will  capture  the  errors  again  and 
trigger POD-Recovery again. Hence, POD-Recovery achieves a reasonable RTO. 
117 
C.  Recovery Reducing Negative Impact 
1)  Experimental Procedure 
This recovery requirement concerns the negative impact the recovery incurs on the cloud system. 
We  therefore  measure  recovery  impact  by  performing  the  scale-up  operation  on  a  cloud 
application. There are initially 12 instances in the cloud application. The instances are attached 
to  an  auto  scaling  group  and  are  registered  in  an  elastic  load  balancer.  The  cloud  application 
running  in  the  instances  is  TPC-W  which  is  a  3-tier  web  benchmark  application  running  in 
Tomcat  service.  The  average  workload  on  each  instance  is  50  query  requests  per  second.  We 
used  our  own  proprietary  fault  injection  tool  to  inject  faults  for  each  of  the  two  determined 
recovery  points  in  the  scale-up  operation,  automatically  determined  the  applicable  recovery 
patterns based on the applicable recovery patterns filtering method described in section 7.3, and 
performed  recovery  using  the  selected  acceptable  recovery  action  based  on  each  of  the  two 
recovery action selection methods. The faults injected are described in Table 29. The selection 
of  injected  faults  is  based  on  our  interviews  with  industry  and  failure  reports,  and  hence 
representative. The recovery impact is calculated by computing the cross-product of two vectors: 
1) the average response time to user requests in each of the steps of the recovery action; 2) the 
execution time of each step of the recovery action. We ran the experiment 30 times, measuring 
the average recovery impact. 
Table 29.  Faults injected for Scale-up Operation 
Recovery Point 
Fault injected 
Recovery Point 1 (After Step 2) 
6 instances with wrong AMI 
Recovery Point 2 (After Step 3) 
6 instances not in ELB 
2)  Experimental Results 
Table  30  shows  the  recovery  impact  of  the  recovery  for  the  scale-up  operation.  The  recovery 
impact in the table represents the average value of the recovery impact for 30 runs. The highest 
relative standard deviation is 2.4%. For each recovery point, the impact of the recovery action 
selected  by  the  Pareto  set  search  based  optimization  method  is  no  greater  than  the  other 
applicable recovery  actions;  the impact  of the  selected  recovery  action  by  the  user  constraints 
based  optimization  method  is  not  necessarily  less  than  all  the  other  ones,  but  it  is  within  the 
impact constraint set by business stakeholders. 
118 
Table 30.  Recovery Impact for Scale-up 
Legends 
Recovery Pattern ID 
RP1 
RP2 
RP3 
RP4 
Recovery Pattern 
Compensated Undo & Redo 
Compensated Undo & Alternative 
Rewind & Replay 
Rewind & Alternative 
Recovery Pattern ID 
RP5 
RP6 
RP7 
RP8 
Recovery Pattern 
Reparation 
Direct Redo 
Direct Alternative 
Farther Undo & Redo 
Recovery 
Point 
Process 
Step 
Errors 
Applicab
le 
Recovery 
Patterns 
Selected 
Recovery 
Action(Pareto 
Set) 
Recovery 
Impact 
(Pareto Set) 
Selected 
Recovery 
Action(User 
Constraints) 
Recovery 
Impact 
(User 
Constraints) 
Step 1. 
Increase 
auto scaling 
groupâ€™s 
desired 
capacity by 
12 
Step 2. Wait 
for the auto 
scaling 
group to 
start 
additional 
12 instances 
Step 3. 
Register 
these 12 
instances 
with the 
load 
balancer 
Recovery 
Point 1 
Recovery 
Point 2 
6 instances 
with wrong 
AMI 
RP1, 
RP2, 
RP3, 
RP4, RP5 
Attach ASG 
with the correct 
LC; 
Terminate the 6 
wrong 
instances; 
Wait for ASG 
to launch 6 new 
instances; 
3462.59 s2 
Attach ASG 
with the correct 
LC; 
Terminate the 6 
wrong 
instances; 
Wait for ASG 
to launch 6 new 
instances; 
(Reparation) 
 (Reparation) 
3502.16 s2 
6 instances 
not in ELB 
RP1, 
RP3, 
RP5, 
RP6, RP8 
Register the 6 
instances with 
the load 
balancer; 
69.68 s2 
Register the 12 
instances with 
the load 
balancer again; 
138.73 s2 
(Reparation) 
 (Direct Redo) 
3)  Satisfying Recovery Requirement R3 
The recovery impact of the selected recovery action is the optimal/acceptable one, which means 
that  its  recovery  impact  is  relatively  small  compared  to  all  other  recovery  actions.  Such 
selection  and  optimization  mechanism  guarantees  that  the  recovery  impact  can  meet  the 
recovery impact objective set by stakeholders. Hence, the requirement that the recovery should 
reduce negative impact is achieved. 
D.  Recovery Reducing Monetary Cost 
1)  Experimental Procedure 
This recovery requirement concerns the monetary cost the recovery incurs on the cloud system. 
We therefore measure recovery monetary cost by performing the scale-up operation on a cloud 
application. There are initially 12 instances in the cloud application. The instances are attached 
to  an  auto  scaling  group  and  are  registered  in  an  elastic  load  balancer.  The  cloud  application 
running  in  the  instances  is  TPC-W  which  is  a  3-tier  web  benchmark  application  running  in 
Tomcat  service.  The  average  workload  on  each  instance  is  50  query  requests  per  second.  We 
used  our  own  proprietary  fault  injection  tool  to  inject  faults  for  each  of  the  two  determined 
recovery  points  in  the  scale-up  operation,  automatically  determined  the  applicable  recovery 
patterns based on the applicable recovery patterns filtering method described in section 7.3, and 
119 
performed  recovery  using  the  selected  acceptable  recovery  action  based  on  each  of  the  two 
recovery action selection methods. The faults injected are described in Table 31. The selection 
of  injected  faults  is  based  on  our  interviews  with  industry  and  failure  reports,  and  hence 
representative.  The  recovery  monetary  cost  is  calculated  by  summing  up  the  monetary  cost 
incurred  by  each  step  in  the  recovery  action.  We  ran  the  experiment  30  times,  measuring  the 
average recovery monetary cost.  
Table 31.  Faults injected for Scale-up Operation 
Recovery Point 
Fault injected 
Recovery Point 1 (After Step 2) 
Recovery Point 2 (After Step 3) 
6 instances with wrong AMI 
6 instances not in ELB 
2)  Experimental Results 
Table  32  shows  the  recovery  monetary  cost  of  the  recovery  for  the  scale-up  operation.  The 
recovery monetary cost in the table represents the average value of the recovery monetary cost 
for 30 runs. The relative standard deviation is 0%. For each recovery point, the monetary cost of 
the  recovery  action  selected  by  the  Pareto  set  search  based  optimization  method  is  no  greater 
than the other applicable recovery actions; the monetary cost of the selected recovery action by 
the user constraints based optimization method is not necessarily less than all the other ones, but 
it is within the monetary cost constraint set by business stakeholders. 
Table 32.  Recovery Monetary Cost for Scale-up 
Legends 
Recovery Pattern ID 
Recovery Pattern 
Recovery Pattern ID 
Recovery Pattern 
RP1 
RP2 
RP3 
RP4 
Compensated Undo & Redo 
Compensated Undo & Alternative 
Rewind & Replay 
Rewind & Alternative 
RP5 
RP6 
RP7 
RP8 
Reparation 
Direct Redo 
Direct Alternative 
Farther Undo & Redo 
Recovery 
Point 
Process Step 
Errors 
Applicab
le 