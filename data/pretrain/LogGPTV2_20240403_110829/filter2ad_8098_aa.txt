银雁冰 @猎影实验室  
前言  
从2019年开始，与Chrome相关的在野0day披露开始增多，仅笔者所知的有如下几个：  
CVE编号 发现厂商  
CVE-2019-5786 Google  
CVE-2019-13720 Kaspersky  
CVE-2020-6418 Google  
作为对比，2014-2018年被厂商披露的Chrome在野0day数量为0，上述数据表明接下来会有更多的Chrome在野0day出现。  
站在防守方的角度，一旦预感到某种类型的漏洞接下来会出现，就应该提前对相关领域进行研究，以降低未来应急响应的门槛。基于此，笔者决定挑一个例子上手Chrome下的漏洞调试。  
那么，选择哪个漏洞比较好呢？一番对比后，笔者选了2019年StarCTF的一道v8 off-by-one的题，这个例子满足如下条件：
  1. 题目较新，一般来说出题者的思路即会反映该领域研究人员的较新研究方向
  2. 漏洞原理较为简单，利用手法比较常规，实践起来比较容易
  3. 网上有较多质量较高的Writeup  
调试环境搭建  
阅读若干Writeup后，笔者决定在Ubuntu 18.04 64位环境调试这个漏洞。  
科学上网  
要调试这类漏洞，首先需要下载v8源码到本地，这个过程需要进行科学上网。相关操作笔者参考了Migraine的文章。配置好科学上网工具后，使用depot_tools
fetch v8代码前，请不要忘记在当前终端设置以下两句(端口因设置而异)，不然会提示一些文件未找到的错误：  
export https_proxy=  
export http_proxy=  
下载v8代码到本地后，继续进行调试环境构建，以便于辅助调试，笔者着重构建的几点是：
  4. pwndbg的安装
  5. v8源码中提供的gdb插件gdb-v8-support.py的安装(可参考Migraine的文章)，里面的job命令可以结构化打印对象
  6. Turbolizer工具的搭建，此工具对于当前漏洞用处不大，但对涉及到jit的漏洞调试比较有帮助(可参考mem2019的文章)  
以下为该题给出的提示：  
Yet another off by one
$ nc 212.64.104.189 10000  
the v8 commits is 6dc88c191f5ecc5389dc26efa3ca0907faef3598.  
构建完上述环境后，切换到相应分支，再次执行gclient sync同步代码，打上diff文件，随后就可以编译本题所需v8引擎了：  
fetch v8  
cd v8
git checkout 6dc88c191f5ecc5389dc26efa3ca0907faef3598  
gclient sync -D  
git apply  r  
Starting program: /home/test/v8/out.gn/x64.release/d8 --allow-natives-syntax
/home/test/Desktop/exp/poc/oob.js  
[Thread debugging using libthread_db enabled]  
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".  
[New Thread 0x7efd78970700 (LWP 33522)]  
[New Thread 0x7efd7816f700 (LWP 33523)]  
[New Thread 0x7efd7796e700 (LWP 33524)]  
[New Thread 0x7efd7716d700 (LWP 33525)]  
[New Thread 0x7efd7696c700 (LWP 33526)]  
[New Thread 0x7efd7616b700 (LWP 33527)]  
[New Thread 0x7efd7596a700 (LWP 33528)]  
0x294872acde69   
...
pwndbg> job 0x294872acde69  
0x294872acde69: [JSArray]
  * map: 0x0e81fe702ed9  [FastProperties]
  * prototype: 0x100de9751111 
  * elements: 0x294872acde39  [PACKED_DOUBLE_ELEMENTS]
  * length: 4
  * properties: 0x04dff3640c71  {  
#length: 0x1d7f06ac01a9  (const accessor descriptor)  
}
  * elements: 0x294872acde39  { 
        0: 1
        1: 2
        2: 3
        3: 1.1
}
pwndbg> job 0x294872acde39  
0x294872acde39: [FixedDoubleArray]
  * map: 0x04dff36414f9 
  * length: 4 
        0: 1
        1: 2
        2: 3
        3: 1.1
要注意在v8中打印出的对象地址是实际地址+1，原因在《v8利用入门：从越界访问到RCE》这篇文章中有说到：  
为了加快垃圾回收的效率需要区分number和指针，v8的做法是使用低位为标志位对它们进行区分。由于32位、64位系统的指针会字节对齐，指针的最低位一定为0，v8利用这一点最低位为1视为指针，最低位为0视为number，smi在32位系统中只有高31位是有效数据位。  
所以数组a在内存中的实际地址应该是0x294872acde68，来验证一下：  
pwndbg> telescope 0x294872acde69-1  
00:0000│ 0x294872acde68 —▸ 0xe81fe702ed9 ◂— 0x4000004dff36401  
01:0008│ 0x294872acde70 —▸ 0x4dff3640c71 ◂— 0x4dff36408  
02:0010│ 0x294872acde78 —▸ 0x294872acde39 ◂— 0x4dff36414  
03:0018│ 0x294872acde80 ◂— 0x400000000  
04:0020│ 0x294872acde88 ◂— 0x0  
从上面的输出可以看到存储在0x294872acde68的即为0xe81fe702ed9，对应job命令输出的map值。  
还可以注意到的一个有趣的现象是PoC中数组a的elements对象地址位于a对象之前的0x30，且这两个对象是紧邻的：  
pwndbg> telescope 0x294872acde39-1  
00:0000│ 0x294872acde38 —▸ 0x4dff36414f9 ◂— 0x4dff36401  
01:0008│ 0x294872acde40 ◂— 0x400000000  
02:0010│ 0x294872acde48 ◂— 0x3ff0000000000000 // 1的64位浮点数表示形式  
03:0018│ 0x294872acde50 ◂— 0x4000000000000000 // 2的64位浮点数表示形式  
04:0020│ 0x294872acde58 ◂— 0x4008000000000000 // 3的64位浮点数表示形式  
05:0028│ 0x294872acde60 ◂— 0x3ff199999999999a // 1.1的64位浮点数表示形式  
06:0030│ 0x294872acde68 —▸ 0xe81fe702ed9 ◂— 0x4000004dff36401 // 数组a的map  
07:0038│ 0x294872acde70 —▸ 0x4dff3640c71 ◂— 0x4dff36408  
浮点数在内存中的表示  
在v8中，浮点数在64位内存中的表现形式遵循IEEE 754 64位存储格式，具体如下：  
1(符号位) + 11(指数部分) + 52(尾数部分) // 左为高bit，右为低bit  
关于IEEE 754 64位的更多细节读者可自行上网查阅，为了便于转换调试器输出的浮点值到普通表示形式，可以编写如下的python脚本进行转换：  
import binascii  
import struct
hex_list_64 = ['3ff0000000000000', '4000000000000000', '4008000000000000',
'3ff199999999999a']
for value in hex_list_64:  
print(struct.unpack('>d', binascii.unhexlify(value)))
// 转换输出如下  
(1.0,)  
(2.0,)  
(3.0,)  
(1.1,)  
越界读取  
在调试器中输入c，继续运行PoC代码，断下后再次进行观察：  
pwndbg> c  
Continuing.  
[*] oob return data:7.881079421936e-311  
7.881079421936e-311是什么呢？如果我们将数组a的map值转化为64位浮点数，可以得到如下输出：  