Given the limited space, we only display half of the edges, specifically those corresponding to sessions initiated by an outgoing HTTP connection. The chosen Deterministic Finite Automaton (DFA) is intended to illustrate the variety of HTTP sessions and does not correspond to any particular knee in the coverage curve. While such DFAs generally reflect remote tail behavior, they can be particularly prominent for specific hosts, such as servers or web crawlers. Highlighting this host-specific behavior for analysts is a promising area for future work.

The figure illustrates that HTTP (port 80) can occur alongside multiple connections on other ports (e.g., 81, 8000, 8080, HTTPS, FTP), which are typically used for web access. The presence of ephemeral ports in the DFA likely reflects services offering HTTP interfaces that include client-side code (such as JavaScript) for retrieving additional data. Connections to port 8765 (labeled "ultraseek") likely indicate an Ultraseek search engine crawler, supported by our observation that the hosts exhibiting this traffic have names suggesting indexers. We also observe LDAP connections, possibly reflecting web services that use it for authentication. Finally, outgoing SSH connections may simply reflect a user's routine of opening web pages and logging into a commonly visited remote host.

**Figure 4:**
- **(A)** FTP Coverage Curve
- **(B)** DFA with 4 edges
- **(C)** DFA with 4 edges
- **(D)** DFA with 6 edges
- **(E)** DFA with 8 edges
- **(F)** DFA with 10 edges
- **(G)** DFA with 18 edges

Deeper in the coverage curve, the DFAs also reflect AOL and other connections occurring alongside HTTP, possibly indicating activities like chatting and browsing, and a broader range of services offered via web pages (e.g., Oracle database access and music streaming applications using Real Time Streaming Protocol and Windows Media).

**Other Applications:**
Due to space constraints, we summarize some of the more interesting application session structures exposed in the trace, including:
- Mail-related applications (SMTP, IMAP4, POP3)
- Remote access (SSH, Exec, Rlogin, Telnet)
- Database (Oracle, MySQL)
- Bulk transfer (GridFTP)
- Windows (NetMeeting, NETBIOS)
- Peer-to-peer (BitTorrent, KCEasy)

Mail-related session structures due to client-side applications (e.g., Thunderbird or Outlook) exhibit patterns like "smtp in (imap4 in | imap4ssl in | pop3 in | pop3ssl in)*", reflecting different protocols used for sending and receiving email. Server-side sessions often follow the pattern "smtp in (smtp out | ident out)", reflecting SMTP mail relays and Ident reverse connections.

Remote access applications typically show session structures such as "ssh in (ident out | X11 out*)", due to reverse Ident connections initiated by servers and X11 connections initiated by users back to their desktop X11 servers. We also see structures like "ssh in (ssh out | vnc in)", which exhibit a "stepping-stone" structure, though without the goal of "laundering" traffic since users connect back to their own originating site. Note that VNC stands for Virtual Network Computing, a popular remote desktop protocol.

Such activity likely reflects creating multiple login windows or transferring files to supplement the login session. We also find structures like "ssh in (ftp in | http in)", presumably due to user browsing behavior once logged in. GridFTP is dominated by sessions with a single outbound connection followed by multiple inbound ephemeral connections (though sometimes this occurs in the opposite direction). Services such as Oracle, SQL, and NetMeeting exhibit session structures that include multiple ephemeral connections alongside the primary connection on a well-known port. P2P applications display the session structure "app out app in*".

**Finding Attacks Using Anomaly Detection:**
Our experimental analysis over these traces also revealed sessions exhibiting anomalous structures, reflecting malicious activity. Our original goal was to detect network attacks by identifying sessions that deviate from established session structures. Our hypothesis was that such deviations would reflect either unintended misconfigurations (a host behaving as a spam relay or a web proxy), scanning, or "phone home" connections associated with compromises. Figure 7 shows an example of such an attack (confirmed by the site). The event consists of an incoming SSH connection, which compromises the host, followed by the host visiting a web server (presumably controlled by the attacker), an incoming port 65535 connection (likely the attacker instructing the bot software installed on the host), and then an outbound IRC connection (presumably to a botnet).

**Figure 5:**
- **(A)** Timbuktu Coverage Curve
- **(B)** DFA with 4 edges
- **(C)** DFA with 18 edges

**Figure 6:**
- **(A)** HTTP DFA with 30 edges

**Figure 7:**
- **(A)** Session Illustrating Anomalous Behavior

In assessing the sessions uncovered by our extraction algorithm, we have also found anomalous sessions caused by peer-to-peer applications disallowed by the siteâ€™s policy (and using non-standard ports), and an instance where a machine within the site acted as an HTTP relay for Yahoo web pages, for reasons we could not determine.

While our session extractor, being statistical, might not catch all anomalous sessions, the ones it does catch can be of considerable operational interest. Unfortunately, such activity often only manifests in the upper tail of the coverage curve, making it difficult to directly act on upper-tail instances due to the presence of many strange-but-benign sessions and potentially false inferences. However, we hope that detecting peculiar sessions can serve as input for further analysis, which might use additional complementary information to derive actionable conclusions. Such information might include the host's history, such as the services it typically runs and the remote hosts it has contacted in the past.

**Discussion:**
A major utility of session descriptors is in enabling the development of source models that can generate synthetic traffic similar to real traffic at the connection level. Our work captures the qualitative nature of such sessions; with these descriptors, one can obtain distributions for session duration, number of connections in a session, and so forth (using techniques similar to those used in Nuzman et al. [24] for HTTP sessions). The main value of our approach is that it requires much less a priori information about the applications in the trace (only a mapping from port number to application, whereas previous work explicitly required a session descriptor for the application as well).