given limited space we show only half the edges, those correspond-
ing to sessions begun with an outgoing HTTP connection. We
chose this DFA simply to illustrate the variety of HTTP sessions;
it does not correspond to any obviously visible knee in the cover-
age curve. Although these sorts of DFAs in general reﬂect remote
tail behavior, for some particular hosts they can be quite promi-
nent (e.g., a server or a crawler). Highlighting such host-speciﬁc
behavior for an analyst is a promising area for our future work.
The ﬁgure highlights that HTTP (port 80) can occur in con-
junction with multiple connections on other ports (81, 8000, 8080,
HTTPS, FTP) typically used for Web access. Likely the presence of
ephemeral ports in the DFA also reﬂects this sort of linking, for ex-
ample due to services offering HTTP interfaces that include client-
side code (such as JavaScript) for retrieving additional data from
the service. Connections to a port 8765 (marked “ultraseek”) likely
reﬂect an Ultraseek search engine crawler (supported by our obser-
vation that the hosts exhibiting this trafﬁc have names that suggest
indexers). We also see LDAP connections, perhaps reﬂecting Web
services that rely on it for authentication. Finally, we see outgoing
SSH connections. These may simply reﬂect a user’s “start up” rou-
tine of opening both some Web pages and logging into a commonly
visited remote host.
)
n
o
i
t
c
a
r
F
(
e
g
a
r
e
v
o
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
0
0
0
Coverage
ftp_in
ftp_out
ftp_in ftp_out
ftp_in
ftp_out
1
2
1
1
2
eph_in eph_out
eph_in eph_out
eph_in
eph_out eph_in
eph_out
 0
 10
 5
 15
Number of Edges in G_i
 20
(A)
3
(B)
2
(C)
0
0
ftp_in ftp_out
ftp_out
ftp_in
3
eph_in
4
5
eph_out
(D)
0
ftp_in
ftp_out
1
2
1
2
1
http_in
eph_in eph_out
eph_in eph_out
http_out
eph_in
eph_out
http_out
eph_out
http_in
eph_in
eph_out
eph_in
3
4
eph_in eph_out
5
2
eph_in
3
eph_out
3
5
eph_out
4
eph_in
http_in
eph_in
http_out
eph_out
6
http_in
7
eph_in
8
http_out
9
eph_out
(E)
(F)
(G)
Figure 4: FTP Coverage Curve (A), DFAs: 4 edges (B), 4 edges (C), 6 edges (D), 8 edges (E), 10 edges (F), 18 edges (G)
Deeper in the coverage curve, the DFAs also reﬂect AOL and
other connections occurring in conjunction with HTTP, perhaps re-
ﬂecting chatting and browsing alongside, and a greater variety of
services offered via Web pages (e.g., Oracle database access and
music streaming applications that use Real Time Streaming Proto-
col and Windows Media).
Other Applications. Due to space constraints, we summarize
some of the more interesting additional application session struc-
tures that our scheme exposed in the trace, which included mail-
related applications (SMTP, IMAP4, POP3), remote access (SSH,
Exec, Rlogin, Telnet), database (ORACLE, MYSQL), bulk transfer
(Grid FTP), Windows (NetMeeting, NETBIOS), and peer-to-peer
(BitTorrent, KCEasy).
Mail-related session structures due to client-side applications
(e.g., ThunderBird or Outlook) exhibit session structures of the
form “smtp in (imap4 in | imap4ssl in | pop3 in | pop3ssl in)* ”
, reﬂecting the different protocol clients use to send and receive
email. We also see server-side sessions of the form “smtp in
(smtp out | ident out),” reﬂecting SMTP mail relays and Ident re-
verse connections.
Remote access applications typically exhibit session structures
such as “ssh in (ident out | X11 out* ),” due to reverse Ident con-
nections initiated by servers, and X11 connections initated by the
users back to their desktop X11 servers. We also see structures such
as “ssh in (ssh out | vnc in),” which exhibit a “stepping-stone”-like
structure [35, 42], though without the goal of “laundering” trafﬁc
since the users connect back to their own originating site. Note
that, in the regular expression above, VNC stands for Virtual Net-
work Computing, a popular remote desktop protocol.
Presumably such activity reﬂects creating multiple login win-
dows or transferring ﬁles to supplement the login session. We also
ﬁnd structures such as “ssh in (ftp in | http in),” presumably due
to user browsing behavior once logged. Finally, GridFTP is dom-
inated by sessions with a single outbound connection followed by
multiple inbound ephemeral connections (though sometimes this
all occurs in the opposite direction); services such as Oracle, SQL,
and NetMeeting exhibit session structures that include multiple
ephemeral connections alongside the primary connection on a well-
known port; and P2P applications display the session structure of
the form “app out app in*.”
6.3 Finding Attacks Using Anomaly Detection
Our experimental analysis over these traces also revealed ses-
sions exhibiting anomalous structure reﬂecting malicious activity.
Indeed, our original goal had been to detect network attacks by
ﬁnding sessions that deviate from established session structures.
Our hypothesis was that such deviations would reﬂect either un-
intended misconﬁgurations (a host behaving as spam relay or as
a Web proxy), scanning, or “phone home” connections associated
with compromises. Figure 7 shows an example of such an attack
(conﬁrmed by the site). The event consists of an incoming ssh con-
nection, which compromises the host, followed by the host visiting
a Web server (presumably controlled by the attacker), an incom-
ing port 65535 connection (likely the attacker instructing the bot
software they installed on the host) and then an outbound IRC con-
nection (presumably to a botnet).
)
n
o
i
t
c
a
r
F
(
e
g
a
r
e
v
o
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
 2
Coverage (G_i)
 8  10  12  14  16  18
 6
 4
Number of Edges in G_i
(A)
0
timbuktu_in
timbuktu_out
1
2
http_in http_out
3
(B)
0
timbuktu_in
timbuktu_out
1
2
appletalk_in
http_in
other_in
other_in ssh_in other_out ssh_out
appletalk_out
http_out
other_out
3
appletalk_in
4
http_in
5
other_in
6
7
appletalk_out
8
http_out
9
other_out
(C)
Figure 5: Timbuktu Coverage Curve (A) and DFAs: 4 edges (B), 18 edges (C)
0
http_out
1
http8000_out
http8080_out
https_out
 eph_out
ultraseek_out
 ftp_out ldap_out priv_81_out ssh_out
2
http8000_out
3
http8080_out
4
https_out
5
 eph_out
6
ultraseek_out
7
Figure 6: HTTP DFA with 30 edges
ssh_in
0
6
http_out
5
http_out
4
http_out
3
other_65535_in
irc_out
2
1
Figure 7: Session Illustrating Anomalous Behavior
In assessing the sessions uncovered by our extraction algorithm,
we have also found anamolous sessions caused by peer-to-peer ap-
plications disallowed by the site’s policy (and using non-standard
ports), and an instance where machine within the site acted as a
HTTP relay for Yahoo Web pages, for reasons we could not deter-
mine.
Thus, although our session extractor, being statistical, might not
catch all anomalous sessions, the sessions it does catch can be
of considerable operational interest. Unfortunately, we ﬁnd that
such activity often only manifests in the upper tail of the cover-
age curve. Thus, there are usually too many strange-but-benign
sessions—plus structures (perhaps) falsely inferred due to the sta-
tistical limits of our detection algorithm—for upper-tail instances
to serve as directly “actionable” indications of attacker activity. We
do hold hope, however, that detection of peculiar sessions can serve
as input into further analysis that might use additional complemen-
tary information to derive actionable conclusions. Such informa-
tion might be, for example, history about the host (e.g., what ser-
vices it typically runs, and which remote hosts it has contacted in
the past).
7. DISCUSSION
A major utility of session descriptors is in enabling the devel-
opment of source models that can generate synthetic trafﬁc that is
similar to real trafﬁc at the connection-level. Our work only cap-
tures the qualitative nature of such sessions; however, with such
session descriptors in hand, one can then set about obtaining dis-
tributions for the duration of a session, number of connections in
a session, and so forth (using techniques similar to those used in
Nuzman et al. [24] for HTTP sessions). The main value of our
approach is that it requires much less a priori information about
the applications in the trace (it requires only a mapping from port
number to application, whereas previous work explicitly required a
session descriptor for the application as well).