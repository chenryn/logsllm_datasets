91
• the ability for plaintext and ciphertext spaces to be deﬁned over different cyclotomic
rings, which permits certain optimizations;
• and strict separation of the interface from the computational details, so it is easy to
use our SHE scheme on, e.g., multi-core CPUs, GPUs, etc.
4.1 SHE with Λ∘𝜆
Our implementation uses the Λ∘ 𝜆 library deﬁned in chapter 3 to achieve its advanced
functionality. The high level interfaces exposed in Λ∘𝜆 make our implementation particularly
simple, closely and concisely matching the SHE scheme’s mathematical deﬁnition.
Using Λ∘ 𝜆’s support for the cyclotomic hierarchy, we also devise and implement a
more efﬁcient variant of ring-switching for HE, which we call ring tunneling. A prior
technique [AP13] homomorphically evaluates a linear function by “hopping” from one
ring to another through a common extension ring. The extension ring can be very large
(dimension 200,000 or more), leading to a signiﬁcant performance bottleneck. Our new
approach avoids this problem by “tunneling” through a common subring, which has a
much smaller dimension resulting in improved performance. Moreover, we show that the
linear function can be integrated into the accompanying key-switching step, thus unifying
two operations into a simpler and even more efﬁcient one. (See section 4.2 for details.)
This implementation is the foundation for the homomorphic evaluation of a lattice-based
symmetric-key primitives (chapter 6).
4.1.1 Example: SHE in Λ∘𝜆
For illustration, here we brieﬂy give a ﬂavor of our SHE implementation in Λ∘ 𝜆; see
Figure 4.1 for representative code, and section 4.3 for many more details of the scheme’s
mathematical deﬁnition and implementation. While we do not expect the reader (especially
one who is not conversant with Haskell) to understand all the details of the code, it should be
clear that even complex operations like modulus-switching and key-switching/relinearization
92
have very concise and natural implementations in terms of Λ∘𝜆’s interfaces (which include the
functions errorCoset, reduce, embed, twace, liftDec, etc.). Indeed, the implementations
of the SHE functions are often shorter than their type declarations! (For the reader who
is new to Haskell, section 2.3 gives a brief tutorial that provides sufﬁcient background to
understand the code fragments appearing in this paper.)
As a reader’s guide to the code from Figure 4.1, by convention the type variables z, zp,
zq always represent (respectively) the integer ring Z and quotient rings Z𝑝 = Z/𝑝Z, Z𝑞 =
Z/𝑞Z, where 𝑝 ≪ 𝑞 are respectively the plaintext and ciphertext moduli. The types m, m’
respectively represent the indices 𝑚, 𝑚′ of the cyclotomic rings 𝑅, 𝑅′, where we need 𝑚|𝑚′
so that 𝑅 can be seen as a subring of 𝑅′. Combining all this, the types Cyc m’ z, Cyc m zp,
and Cyc m’ zq respectively represent 𝑅′, the plaintext ring 𝑅𝑝 = 𝑅/𝑝𝑅, and the ciphertext
ring 𝑅′
𝑞 = 𝑅′/𝑞𝑅′.
The declaration encrypt :: (m ‘Divides‘ m’, ...) => ... deﬁnes the type of the
function encrypt (and similarly for decrypt, rescaleCT, etc.). Preceding the arrow =>,
the text (m ‘Divides‘ m’, ...) lists the constraints that the types must satisfy at compile
time; here the ﬁrst constraint enforces that 𝑚|𝑚′. The text following the arrow => deﬁnes
the types of the inputs and output. For encrypt, the inputs are a secret key in 𝑅′ and a
plaintext in 𝑅′
𝑞. Notice that the full ciphertext
type also includes the types m and zp, which indicate that the plaintext is from 𝑅𝑝. This
𝑝, and the output is a random ciphertext over 𝑅′
aids safety: thanks to the type of decrypt, the type system prevents the programmer from
incorrectly attempting to decrypt the ciphertext into a ring other than 𝑅𝑝.
Finally, each function declaration is followed by an implementation, which describes
how the output is computed from the input(s). Because the implementations rely on the
mathematical deﬁnition of the scheme, we defer further discussion to section 4.3.
93
encrypt :: (m ‘Divides‘ m’, MonadRandom rnd, ...)
-- secret key ∈ 𝑅′
-- plaintext ∈ 𝑅𝑝
-- ciphertext over 𝑅′
=> SK (Cyc m’ z)
-> PT (Cyc m
zp)
-> rnd (CT m zp (Cyc m’ zq))
𝑞
encrypt (SK s) mu = do
 SK (Cyc m’ z)
-> CT m zp (Cyc m’ zq)
-> PT (Cyc m zp)
-- secret key ∈ 𝑅′
-- ciphertext over 𝑅′
-- plaintext in 𝑅𝑝
𝑞
decrypt (SK s) (CT LSD k l c) =
let e = liftDec $ evaluate c (reduce s)
in l *> twace (iterate divG (reduce e) !! k)
-- homomorphic multiplication
(CT LSD k1 l1 c1) * (CT _ k2 l2 c2) =
CT d2 (k1+k2+1) (l1*l2) (mulG  c1 * c2)
-- ciphertext modulus switching
rescaleCT :: (Rescale zq zq’, ...)
=> CT m zp (Cyc m’ zq )
-> CT m zp (Cyc m’ zq’)
-- ciphertext over 𝑅′
-- to 𝑅′
𝑞′
𝑞
rescaleCT (CT MSD k l [c0,c1]) =
CT MSD k l [rescaleDec c0, rescalePow c1]
-- key switching/linearization
keySwitchQuad :: (MonadRandom rnd, ...)
=> SK r’ -> SK r’
-> rnd (CT m zp r’q -> CT m zp r’q) -- recrypt function
-- target, source keys
keySwitchQuad sout sin = do
-- in randomness monad
hint 
CT MSD k l $ [c0,c1] + switch hint c2
switch hint c =
sum $ zipWith (*>) (reduce  decompose c) hint
Figure 4.1: Representative (and approximate) code from our implementation of an SHE
scheme in Λ∘𝜆.
94
4.1.2 Related Work
FHEW. FHEW [DM15] is an implementation of a very fast bootstrapping algorithm for
“third-generation” FHE schemes [GSW13; AP14]. However, it is not intended for general-
purpose homomorphic computations, since the scheme encrypts only one bit per ciphertext.
Our implementation supports large plaintext rings, which allows much higher throughtput.
HElib. HElib [HS] is an “assembly language” for BGV-style HE over cyclotomic rings [BGV14].
It holds speed records for a variety of HE benchmarks (e.g., homomorphic AES compu-
tation [GHS12c]), and appears to be the sole public implementation of many advanced
HE features, like bootstrapping for “packed” ciphertexts [HS15]. However, it does not
use the best known algorithms for cryptographic operations in general (non-power-of-two)
cyclotomics, which results in more complex and less efﬁcient algorithms, and suboptimal
noise growth in cryptographic schemes.
Our SHE scheme is implemented with Λ∘𝜆, which uses a much better representation for
arbitrary cyclotomic rings. This results in improved efﬁciency compared to HELib, despite
its emphasis on performance (see subsection 4.4.2 for details.)
Computational Platform. Several SHE implementations target specialized computational
platforms like FPGAs [Cou+14] and GPUs [Wan+12]. Since our implementation uses Λ∘𝜆,
the hardware platform is completely abstracted away from the FHE functionality. This
means it is easy to make our SHE scheme run on FPGAs, GPUs, use vector instruction sets,
multi-core CPUs, and more. In particular, it is possible to include the highly-optimized code
from [HS] for two-power cyclotomic rings into an Λ∘𝜆 backend to obtain the efﬁciency
of HELib, while simultaneoulsy enjoying the safety and advanced functionality of our
implementation.
95
4.1.3 Organization
The rest of this chapter is organized as follows:
Section 4.2 describes ring-tunneling for HE, a method of ring-switching which improves
upon prior work of [AP13].
Section 4.3 gives the design and implementation of our SHE scheme using Λ∘𝜆, including
the implementation of ring-tunneling.
Section 4.4 uses the SHE implementation to evaluate Λ∘𝜆 in terms of code quality and
runtime performance, and gives a comparison to HElib [HS].
Acknowledgments. We thank Tancrède Lepoint for providing HElib benchmark code and
Victor Shoup for helpful discussions regarding HElib performance.
4.2 Efﬁcient Ring-Switching
The term “ring switching” encompasses a collection of techniques, introduced in [BGV14;
Gen+13; AP13], that allow one to change the ciphertext ring for various purposes. These
techniques can also induce a corresponding change in the plaintext ring, at the same time
applying a desired linear function to the underlying plaintext.
In this section we describe an new, more efﬁcient instantiation of homomorphic ring-
switching which we call “ring-tunneling”. This operation was ﬁrst described in [Gen+12],
and an improved version called ring-hopping was given in [AP13]. These prior works focus
mainly on the mathematical description and analysis and the procedures, and do not give
many details regarding efﬁcient algorithms or concrete implementation.
Ring-switching provides the following functionality: given a ciphertext over a certain
cyclotomic ring 𝑅, it transforms it into a ciphertext over another cyclotomic ring 𝑆, with
the effect of applying a linear function to the original plaintext coefﬁcients (with respect to
a certain basis of 𝑅). The transformation is implemented by passing through a sequence
96
of “hybrid” rings which gradually interpolate between 𝑅 and 𝑆, while also gradually
transforming the coefﬁcients via a sequence of linear functions..
We observed that the ring-hopping procedure as described in [AP13] has a signiﬁcant
bottleneck in its use of so-called compositum rings, which in practice can be very large (of
dimension 200,000 or more) and thus expensive to work in. Here we describe an alternative
procedure that avoids compositum rings altogether, working entirely within rings whose
dimensions are essentially only as large as they need to be for security (e.g., in the low
thousands in our application). This yields a major runtime improvement, of at least an order
of magnitude (as compared with the procedure described in [AP13]).
In a bit more detail, the relationship between [AP13] and our work is as follows. To
“hop” from one hybrid ring to the next, the procedure from [AP13] embeds into their
compositum ring (i.e., smallest common super-ring), and then uses ring-switching [Gen+12]
to map into the target hybrid ring. Here we show how to avoid the compositum by instead
decomposing elements over the largest common subring; this also leaves no explicit need
for key-switching. See Figure 4.2 for a visual comparison of the two methods.
embed
𝑇
𝐿
𝑅
rin
g-s
w
itc
h
(induced)
𝐸
𝑆
𝑅
d
e
c
o
𝐿
(induced)
𝑆
combine
embed
m
p
o
s
e
𝐸
Figure 4.2: Comparison of ring hopping and ring tunneling from a ring 𝐻 to a ring 𝐻′. On
the left is the method from [AP13], which passes through the (large) compositum ring 𝑇 .
On the right is our more efﬁcient version, which decomposes the secret key and ciphertext
into 𝐸-elements, then combines them appropriately while embedding into 𝐻′.
97
4.2.1 Linear Functions
Here we recall the main algebraic facts needed to explain our instantiation of ring-hopping.
This section relies heavily on section 2.2, especially regarding mod-𝑝 CRT sets (subsec-
tion 2.2.6). In addition, we will need some basic theory of linear functions on rings. Let 𝐸
be a common subring of some rings 𝑅, 𝑆. A function 𝐿 : 𝑅 → 𝑆 is 𝐸-linear if for all
𝑟, 𝑟′ ∈ 𝑅 and 𝑒 ∈ 𝐸,
𝐿(𝑟 + 𝑟′) = 𝐿(𝑟) + 𝐿(𝑟′)
and 𝐿(𝑒 · 𝑟) = 𝑒 · 𝐿(𝑟).
From this it follows that for any 𝐸-basis ⃗𝑏 of 𝑅, an 𝐸-linear function 𝐿 is uniquely deter-
mined by its values 𝑦𝑗 = 𝐿(𝑏𝑗) ∈ 𝑆. Speciﬁcally, if 𝑟 = ⃗𝑏𝑡 · ⃗𝑒 ∈ 𝑅 for some ⃗𝑒 over 𝐸, then
𝐿(𝑟) = 𝐿(⃗𝑏)𝑡 · ⃗𝑒 = ⃗𝑦𝑡 · ⃗𝑒.
Extending linear functions. Now let 𝐸′, 𝑅′, 𝑆′ respectively be cyclotomic extension
rings of 𝐸, 𝑅, 𝑆 satisfying certain conditions described below. As part of ring switching we
will need to extend an 𝐸-linear function 𝐿 : 𝑅 → 𝑆 to an 𝐸′-linear function 𝐿′ : 𝑅′ → 𝑆′
that agrees with 𝐿 on 𝑅, i.e., 𝐿′(𝑟) = 𝐿(𝑟) for every 𝑟 ∈ 𝑅. The following lemma gives a
sufﬁcient condition for when and how this is possible.
Lemma 4.2.1. Let 𝑒,𝑟,𝑠,𝑒′,𝑟′,𝑠′ respectively be the indices of cyclotomic rings 𝐸,𝑅,𝑆,𝐸′,𝑅′,𝑆′,
and suppose 𝑒 = gcd(𝑟, 𝑒′), 𝑟′ = lcm(𝑟, 𝑒′), and lcm(𝑠, 𝑒′)|𝑠′. Then:
1. The relative decoding bases ⃗𝑑𝑟,𝑒 of 𝑅/𝐸 and ⃗𝑑𝑟′,𝑒′ of 𝑅′/𝐸′ are identical.
2. For any 𝐸-linear function 𝐿 : 𝑅 → 𝑆, the function 𝐿′ : 𝑅′ → 𝑆′ deﬁned by 𝐿′(⃗𝑑𝑟′,𝑒′) =
𝐿(⃗𝑑𝑟,𝑒) is 𝐸′-linear and agrees with 𝐿 on 𝑅.
Proof. First observe that 𝐿′ is indeed well-deﬁned and is 𝐸-linear, by deﬁnition of the
ring operations of 𝑅′ ∼= 𝑅 ⊗𝐸 𝐸′. Now observe that 𝐿′ is in fact 𝐸′-linear: any 𝑒′ ∈ 𝐸′
embeds into 𝑅′ as 1 ⊗ 𝑒′, so 𝐸′-linearity follows directly from the deﬁnition of 𝐿′ and the
98
mixed-product property. Also, any 𝑟 ∈ 𝑅 embeds into 𝑅′ as 𝑟 ⊗ 1, and 𝐿′(𝑟 ⊗ 1) = 𝐿(𝑟) · 1,
so 𝐿′ agrees with 𝐿 on 𝑅.
Finally, observe that because 𝑅′ ∼= 𝑅 ⊗𝐸 𝐸′, the index of 𝐸 is the gcd of the indices
of 𝑅, 𝐸′, and the index of 𝑅′ is their lcm. Then by the Kronecker-product factorization
of decoding bases, the relative decoding bases of 𝑅/𝐸 and of 𝑅′/𝐸′ are the Kronecker
products of the exact same components, in the same order. (This can be seen by considering
each prime divisor of the index of 𝑅′ in turn.)
4.2.2 Error Invariant
In cryptographic applications, error terms are combined in various ways, and thereby grow