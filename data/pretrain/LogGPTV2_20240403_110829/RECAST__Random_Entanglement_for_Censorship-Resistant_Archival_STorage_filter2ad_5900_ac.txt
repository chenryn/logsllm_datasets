104
103
102
101
100
0
1
2
3
4
5
6
7
8
9
10
index target document (x100000)
Fig. 5. Number of corrupted documents to erase a target (x-axis) with a
leaping attack in a nu-(1, t, 2, 3)-archive with t = 3, 4, 5, 10.
see that the ﬁrst quartile (25%) grows from pointed to at most
once under uniform entanglement, to pointed to at most three
under normal entanglement.
As discussed in the previous section, approximating a
sliding window bounds the propagation of the entanglement.
In particular, the creeping attack is very effective. To conﬁrm
this intuition, we simulate the creeping attack on an archive
storing 106 documents: as expected, the average number of
documents to be censored, i.e., the protection, is constant
through the archive and only the last 2000 documents have
lower protection (Figure 4, right-most side of the x-axis). As
expected, increasing the number of pointers t improves the
average protection against the creeping attack : in Figure 4
the average number of documents to be destroyed to censor
the target is about 506 for t = 3, 758 for t = 4, 835 for t = 5
and 935 for t = 10.
Hybrid nu-entanglement. To overcome the limitations of
the described entanglement techniques, we blend normal and
uniform entanglement together. We select each of t pointers
by ﬂipping a coin, so that with probability 1
2 we have:
• a uniform pointer, providing the good randomness and
the strong long-term protection of uniform entanglement,
• a normal pointer, offering the fast short-term protection
of normal entanglement.
175
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:09 UTC from IEEE Xplore.  Restrictions apply. 
u-l
n-c
nu-l
bt
min
max
s
t
n
e
m
u
c
o
d
d
e
y
o
r
t
s
e
d
#
106
105
104
103
102
101
100
0
0
0
6
8
d
0
0
0
0
2
9
d
0
0
0
8
9
9
d
0
1
2
3
4
5
6
7
8
9
10
index target document (x100000)
s
t
n
e
m
u
c
o
d
d
e
y
o
r
t
s
e
d
#
 30
 25
 20
 15
 10
 5
 0
 0
 100  200  300  400  500  600  700  800  900  1000
index target document
Fig. 6. Best greedy attacks on uniformly-entangled, normally-entangled and
nu-entangled (1, 5, 2, 3)-archives.
Fig. 7. Backtracking the creeping attack on a n100-(1, 5, 2, 3)-archive of
1000 documents.
The best greedy heuristic on a STEP archive with nu-
entanglement is the leaping attack, indeed the effectiveness of
the creeping attack drops thanks to the restored randomness.
In Figure 5, we observe a greater inﬂuence of the number of
pointer blocks on the protection. In particular for t = 5, the
long-term protection grows by almost 3 orders of magnitude
with respect
term-
protection grows by about 2 orders of magnitude with respect
to uniform entanglement.
to normal entanglement and the short
We compare the three entanglement methods in Figure 6
over an archive of 106 documents. Using uniform entangle-
ment, around 6 · 105 documents can be censored tampering
with only 10 documents. On the other hand, using normal
entanglement with σ = 1000, all the documents have the same
protection except for the last 2σ = 2000 documents. Moreover,
when normal entanglement is in place, protection is offered
fast: to erase d998000 (a recent one), a greedy attacker needs
to tamper with more than 800 documents. In contrast, using
uniform entanglement, d998000 can be censored by tampering
with one document. As discussed, nu-entanglement mixes
the two approaches to gain the best of both worlds: nu-
entanglement offers greater protection than uniform entangle-
ment for all the documents older than document d86000 and
greater than normal entanglement up to document d920000.
Hence, nu-entanglement outperforms the other entanglement
approaches on more than the 80% of the archive when tested
with suboptimal greedy attacks.
Temporary Replication. Regardless of the pointer blocks’
selection method, entanglement takes time to provide protec-
tion to new documents (e.g. the last archived document is
not pointed to). Hence, we use temporary replication until the
entanglement kicks-in. The replicas are spread over the various
storage nodes. They enable fast recoveries in case of node
failure, at the cost of increased storage overhead. To reduce
such costs, we periodically examine the level of protection of
blocks and once a given threshold is passed, RECAST removes
the corresponding replicas from the storage nodes.
establish when a given block’s replicas can be safely removed.
For uniform entanglement, as the number of blocks increases
over time, the random selection of pointers lowers the prob-
ability of picking recent ones. Hence the replication level
and the replication threshold are determined by the normal
pointers. On a normally-entangled STEP-archive with 1000
documents, we run the creeping attack to get a ﬁrst estimate,
then we backtrack the tree of solutions to ﬁnd the optimal one,
exploiting branch pruning [5] to speed up the execution time.
We present the results in Figure 7. The average protection
offered by t = 5 normal pointers selected with standard
deviation σ = 100 is 21.8. It drops with the 800th document,
e.g. 2σ documents before the end of the archive. The average
number of documents to be deleted is 8.2 on the full archive
and 11.6 out of the tail. Hence to guarantee homogeneous
protection to a RECAST system that uses a STEP-archive with
t = 10 nu-pointers when the normal pointers are extracted
with standard deviation σ = 100, we decide to replicate the
tail, i.e., 2σ documents, 10 times each. We evaluate the failure
resilience of this archive in Section VIII.
Summary. Uniform entanglement provides strong long-
term protection but needs a massive use of replication to reach
an adequate level of short-term protection. To reduce the stor-
age overhead, we study normal entanglement which provides
constant long-term protection, fast short-term protection and
a level of replication independent on the size of the archive.
While the cost of replicas grows linearly with the size of the
archive when using uniform entanglement, it goes to zero in
the case of normal entanglement. Indeed, as the number of
documents that need to be replicated is constant, in the long-
term it becomes a negligible fraction of the whole archive.
Finally we presented nu-entanglement to blend the two ap-
proaches, to attain strong long-term protection with uniform
pointers, fast short-term protection and a constant amount of
temporary replication determined by normal pointers.
VI. ARCHITECTURE
This section presents the architecture of RECAST. Figure 8
depicts the architecture as well as the typical operating ﬂow
for a single document insertion (a document retrieval follows
In the remainder of this section we study how to set such a
threshold in a STEP-archive conﬁgured with nu-entanglement.
We conduct this study by means of simulations, in order to
176
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:09 UTC from IEEE Xplore.  Restrictions apply. 
Client
REST Client
docker
KV Store
Metadata
docker
ZooKeeper

Recast
Cache
Proxy
REST Service
Python, Bottle

…

.


request
reply
Entanglement
Python, C, C++


docker
KV Store
Data Blocks
docker
KV Store
Data Blocks
…
.
docker
KV Store
Data Blocks
Fig. 8. The RECAST architecture and execution ﬂow.
a similar pattern, as described next). The RECAST architecture
comprises the following components: a proxy that mediates in-
teractions between clients and the RECAST system, an encoder
that performs the entanglement operation, a metadata server
that logs the stored documents and their entanglement links,
and a set of storage nodes that serve as backends. We assume
the storage backends to be deployed over untrusted, possibly
malicious but not colluding service providers. The proxy is the
gateway to the data and metadata in the system, and we assume
it is deployed in a trusted environment, typically on the client-
side. The proxy acts as RECAST’s front-end coordinating
the operations between the actual storage backends and the
metadata server. Clients contact the proxy to write or read
data through a simple REST interface issuing PUT and GET
requests, similar to Amazon S3.1 The conﬁguration system of
RECAST allow system deployers to tweak the number and type
of storage nodes, the STEP parameters, the replication factor,
and the prefetching strategy used to preﬁll the cache. Write
operations.  A client sends a write request to the proxy.
 The proxy then acquires a write lock from Zookeeper to
handle this document. At this point, the proxy can  delegate
the entanglement operation to a dedicated encoder or handle
the process by itself. In both cases, the original document is
split into s blocks, t random pointers are sourced from the
storage nodes and used for entanglement.  The resulting p
blocks are then synchronously dispatched to the storage nodes.
Once the entanglement and storage steps are ﬁnalized,  the
proxy persistently saves the required information for future
decoding in the metadata server. This information includes the
location of the parity blocks of the document and as well as
the pointers’ for entanglement.  Finally, the proxy releases
the lock and replies to the client.
Read operations. Upon a read request, the proxy looks
through the metadata server for the document’s blocks and its
pointers to reverse the entanglement. The proxy fetches the
blocks from the storage nodes and delegates the decoding to
the encoder (or decodes by itself if conﬁgured to do so).
Deployment considerations. The modular RECAST archi-
tecture enables the decoupling of the proxy and the compo-
nent in charge of the entanglement operations. To maximize
throughput, these components should be hosted on the same
1We consider out of the scope of this paper to provide an interface that
acts as drop-in replacement for S3.
177
thus avoiding bottlenecks induced by high
physical node,
pressure on the network stack. For the same practical reason,
the metadata server should be deployed on the same machine
as the proxy. Note that these considerations do not affect the
RECAST’s threat model.
Entanglement and replicas management RECAST uses
STEP-based entanglement for long term protection of docu-
ments. At the same time, new blocks are replicated to provide
a high level of redundancy from the very early moments
the document’s life in the archive. To mitigate the storage
overhead that this approach could generate, RECAST manages
the lifetime of the replicas as follows:
1) Upon a write request, pointers are randomly selected and
used for the entanglement of the incoming document;
2) A static number of replicas is computed and spread
randomly over the storage nodes;
3) As soon as any of the chosen pointers is pointed a
sufﬁcient number of times, its replicas are permanently
removed from the system.
Hence, deployers must decide upon two parameters to
conﬁgure RECAST: the replication factor and the protection
threshold. The former is known by the proxy, which is in
charge of computing how many copies of any block it must
send to the storage nodes. The entanglement component is
unaware of the replication factor, and it only asks for blocks.
This design makes the management of replicas simpler and
shields the component executing the block coding (or fur-
ther clients) from having to deal with corrupted replicas or
unavailable storage nodes. Moreover, in a conﬁguration with
homogeneous storage nodes, this level of indirection enables
the proxy server to balance the load of read requests for a
block over the different storage nodes holding replicas. The
latter, the protection threshold, is also known and used by the
proxy. In our current prototype implementation, the threshold
is expressed as the number of documents pointing
to a
block. The choice of this metric rather than the age of the
document and its blocks stems from our use of uniformly
random selection of pointers. In particular, its deterministic
nature prevents from the risk of exposing poorly protected
documents to potential threats.
As described in Section IV, some old blocks may never be
entangled with enough documents to reach the given threshold,
which would prevent the system to use an age-based approach.
In practice, we deploy a separate process running next to the
proxy that periodically scans the metadata and lists blocks
that have been pointed
to threshold times. Once this list
is assembled, the system removes the redundant replicas and
updates the metadata server.
Metadata management Our system leverages randomness
in the selection of tangled blocks and in the placement of
new blocks into storage nodes. If metadata is unavailable,
damaged or lost, stored blocks become meaningless. Apart
from the classical choice of replicating the servers, RECAST
implements a mechanism to reduce risks of complete loss of
access to the metadata nodes.This procedure allows RECAST
to reconstruct the metadata from the data itself. Under the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:09 UTC from IEEE Xplore.  Restrictions apply. 
assumptions of available and honest storage nodes as well as
pristine data blocks, we scan the storage nodes, examining the
hosted blocks and reconstruct the associated metadata (except
for the creation date), see Figure 13.2
This solution is possible because, we prepend the entangle-
ment information to each block before sending them to the
storage nodes. More speciﬁcally, given a block, this metadata-
overhead includes a reference to all
the pointers selected
during the entanglement of the document. In our prototype,
it consists of a ﬁxed 80 Bytes per block (erasure coding
information) and the list of t pointer names. As blocks are
named according to the document they belong to and their
position in the codeword, this average length depends on the
naming patterns in the archive. For example, in the case where
users do not provide names for the documents they insert, the
system defaults to an ASCII version of a uuid. This results
in average length of 38 Bytes: 36 Bytes of the serialized uuid
+ 2 Bytes for the index.
VII. IMPLEMENTATION DETAILS
Our
implementation choices have been largely driven
by performance and programming simplicity considerations,
as well as by constraints from the storage backends in-
terfaces. The proxy and the encoder are implemented in
Python [27] (v2.7). In particular, the entanglement code is built
on top of PyECLib [28] (v1.3.1), liberasurecode [29] (v1.1.1)
and Intel ISA-L [30] (v2.20.0). Clients communicate with
the proxy through the REST API implemented using Bot-