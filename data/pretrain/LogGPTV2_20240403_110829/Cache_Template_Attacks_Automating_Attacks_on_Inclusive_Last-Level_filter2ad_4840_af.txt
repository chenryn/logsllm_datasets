preventing cache-line sharing, i.e., by disabling shared
memory. Unfortunately, operating systems make heavy
use of shared memory, and without modifying the operat-
ing system it is not possible for a user program to prevent
its own memory from being shared with an attacker, even
in the case of static linkage as discussed in Section 2.2.
With operating-system modiﬁcations, it would be pos-
sible to disable shared memory in all cases where a vic-
tim program cannot prevent an attack, i.e., shared pro-
gram binaries, shared libraries, shared generated ﬁles
(for instance, locale-archive). Furthermore, it would
be possible to provide a system call to user programs to
mark memory as “do-not-share.”
A hardware-based approach is to change cache tags.
Virtually tagged caches are either invalidated on context
switches or the virtual tag is combined with an address
space identiﬁer. Therefore, shared memory is not shared
in the cache. Thus, Flush+Reload is not possible on vir-
tually tagged caches.
We emphasize that as long as shared cache lines are
available to an attacker, Flush+Reload or Evict+Reload
cannot be prevented completely.
Cache Set Associativity. Prime+Probe, Evict+Time
and Evict+Reload exploit set-associative caches. In all
three cases, it is necessary to ﬁll all ways of a cache set,
either for eviction or for the detection of evicted cache
sets. Based on which cache set was reloaded (respec-
tively evicted), secret information is deduced. Fully as-
sociative caches have better security properties, as such
information deduction is not possible and cache eviction
can only be enforced by ﬁlling the whole cache. How-
ever, a timing attack would still be possible, e.g., due
to internal cache collisions [5] leading to different exe-
cution times. As fully associative caches are impractical
for larger caches, new cache architectures have been pro-
posed to provide similar security properties [29, 51, 52].
However, even fully associative caches only prevent at-
tacks which do not exploit cache-line sharing. Thus, a
combination of countermeasures is necessary to prevent
most types of cache attacks.
6.2 Proactive Prevention of Cache Attacks
Instrumenting cache attacks to detect co-residency [57]
with another virtual machine on the same physical ma-
chine, or even to detect cache attacks [58] and cache-
based side channels in general [11] has already been pro-
USENIX Association  
24th USENIX Security Symposium  909
13
posed in the past. Moreover, Brumley and Hakala [7]
even suggested that developers should use their attack
technique to detect and eliminate cache vulnerabilities
in their programs. Inspired by these works, we present
defense mechanisms against cache attacks which can be
improved by using Cache Template Attacks.
Detect Cache Vulnerabilities as a Developer. Similar
to Brumley and Hakala [7], we propose the employment
of Cache Template Attacks to ﬁnd cache-based vulner-
abilities automatically. Compared to [7], Cache Tem-
plate Attacks allow developers to detect potential cache
side channels for speciﬁcally chosen events automati-
cally, which can subsequently be ﬁxed by the developer.
A developer only needs to select the targeted events (e.g.,
keystrokes, window switches, or encryptions) and to trig-
ger these events automatically during the proﬁling phase,
which signiﬁcantly eases the evaluation of cache side
channels. Ultimately, our approach even allows devel-
opers to ﬁnd such cache vulnerabilities in third party li-
braries.
Detect and Impede Ongoing Attacks as a User.
Zhang et al. [58] stated the possibility to detect cache
attacks by performing a cache attack on one of the vul-
nerable addresses or cache sets. We propose running a
Cache Template Attack as a system service to detect code
and data under attack. If Flush+Reload prevention is suf-
ﬁcient, we simply disable page sharing for all pages with
cache lines under attack. Otherwise, we disable caching
for these pages as proposed by Aciic¸mez et al. [1] and,
thus, prevent all cache attacks. Only the performance for
critical code and data parts is reduced, as the cache is
only disabled for speciﬁc pages in virtual memory.
Furthermore, cache attacks can be impeded by per-
forming additional memory accesses, unrelated to the se-
cret information, or random cache ﬂushes. Such obfus-
cation methods on the attacker’s measurements have al-
ready been proposed by Zhang et al. [59]. The idea of the
proposed obfuscation technique is to generate random
memory accesses, denoted as cache cleansing. How-
ever, it does not address the shared last-level cache. In
contrast, Cache Template Attacks can be used to iden-
tify possible cache-based information leaks and then to
speciﬁcally add noise to these speciﬁc locations by ac-
cessing or ﬂushing the corresponding cache lines.
6.3 Enhancing the Prefetcher
During our experiments, we found that the prefetcher in-
ﬂuences the cache activity of certain access patterns dur-
ing cache attacks, especially due to the spatial locality
of addresses, as also observed in other work [16, 39, 54].
However, we want to discuss the prefetcher in more de-
tail as it is crucial for the success of a cache attack.
Although the proﬁling phase of Cache Template At-
tacks is not restricted by the prefetcher, the spy pro-
gram performing the exploitation phase might be unable
to probe all leaking addresses simultaneously. For in-
stance, we found 255 addresses leaking side-channel in-
formation about keypresses in the GDK library but we
were only able to probe 8 of them simultaneously in the
exploitation phase, because the prefetcher loads multi-
ple cache lines in advance and, thus, generates numerous
false positive cache hits.
According to the Intel 64 and IA-32 Architectures Op-
timization Reference Manual [19], the prefetcher loads
multiple memory addresses in advance if “two cache
misses occur in the last level cache” and the correspond-
ing memory accesses are within a speciﬁc range (the so-
called trigger distance). Depending on the CPU model
this range is either 256 or 512 bytes, but does not ex-
ceed a page boundary of 4 KB. Due to this, we are able
to probe at least 2 addresses per page.
We suggest
increasing the trigger distance of the
prefetcher beyond the 4 KB page boundary if the corre-
sponding page already exists in the translation lookaside
buffer. The granularity of the attack will then be too high
for many practical targets, especially attacks on executed
instructions will then be prevented.
As cache attacks constantly reaccess speciﬁc memory
locations, another suggestion is to adapt the prefetcher
to take temporal spatiality into consideration.
If the
prefetcher were to prefetch data based on that temporal
distance, most existing attacks would be prevented.
Just as we did in Section 4, an attacker might still be
able to establish a communication channel targeted to
circumvent the prefetcher. However, the presented coun-
termeasures would prevent most cache attacks targeting
real-world applications.
7 Conclusion
In this paper, we introduced Cache Template Attacks,
a novel technique to ﬁnd and exploit cache-based side
channels easily. Although speciﬁc knowledge of the at-
tacked machine and executed programs or libraries helps,
it is not required for a successful attack. The attack is
performed on closed-source and open-source binaries in
exactly the same way.
We studied various applications of Cache Template
Attacks. Our results show that an attacker is able to in-
fer highly accurate keystroke timings on Linux as well as
Windows. For Linux distributions we even demonstrated
a fully automatic keylogger that signiﬁcantly reduces the
entropy of passwords. Hence, we conclude that cache-
based side-channel attacks are an even greater threat for
910  24th USENIX Security Symposium 
USENIX Association
14
USENIX Association  
24th USENIX Security Symposium  911
today’scomputerarchitecturesthanassumedsofar.Infact,evensensitiveuserinput,likepasswords,cannotbeconsideredsecureonmachinesemployingCPUcaches.Wearguethatfundamentalconceptsofcomputerar-chitecturesandoperatingsystemsenabletheautomaticexploitationofcache-basedvulnerabilities.Weobservedthatmanyoftheexistingcountermeasuresdonotpre-ventsuchattacksasexpected.Still,thecombinationofmultiplecountermeasurescaneffectivelymitigatecacheattacks.However,thefactthatcacheattackscanbelaunchedautomaticallymarksachangeofperspective,fromamoreacademicinteresttowardspracticalattacks,whichcanbelaunchedbylesssophisticatedattackers.Thisshiftemphasizestheneedtodevelopandintegrateeffectivecountermeasuresimmediately.Inparticular,itisnotsufﬁcienttoprotectonlyspeciﬁccryptographical-gorithmslikeAES.Moregeneralcountermeasureswillbenecessarytocounterthethreatofautomatedcacheat-tacks.8AcknowledgmentsWewouldliketothanktheanonymousre-viewersandourshepherd,BenRansford,fortheirvaluablecommentsandsuggestions.TheresearchleadingtotheseresultshasreceivedfundingfromtheEuropeanUnion’sHorizon2020researchandinno-vationprogrammeundergrantagreementNo644052(HECTOR).Furthermore,thisworkhasbeensupportedbytheAus-trianResearchPromotionAgency(FFG)andtheStyrianBusinessPromotionAgency(SFG)undergrantnumber836628(SeCoS).References[1]ACIIC¸MEZ,O.,BRUMLEY,B.B.,ANDGRABHER,P.NewResultsonInstructionCacheAttacks.InCryptographicHard-wareandEmbeddedSystems–CHES(2010),vol.6225ofLNCS,Springer,pp.110–124.[2]ACIIC¸MEZ,O.,ANDKOC¸,C¸.K.Trace-DrivenCacheAttacksonAES(ShortPaper).InInternationalConferenceonInforma-tionandCommunicationsSecurity–ICICS(2006),vol.4307ofLNCS,Springer,pp.112–121.[3]BENGER,N.,VANDEPOL,J.,SMART,N.P.,ANDYAROM,Y.”OohAah...JustaLittleBit”:ASmallAmountofSideChannelCanGoaLongWay.InCryptographicHardwareandEmbeddedSystems–CHES(2014),vol.8731ofLNCS,Springer,pp.75–92.[4]BERNSTEIN,D.J.Cache-TimingAttacksonAES,2004.URL:http://cr.yp.to/papers.html#cachetiming.[5]BOGDANOV,A.,EISENBARTH,T.,PAAR,C.,ANDWIENECKE,M.DifferentialCache-CollisionTimingAttacksonAESwithApplicationstoEmbeddedCPUs.InTopicsinCryptology–CT-RSA(2010),vol.5985ofLNCS,Springer,pp.235–251.[6]BONNEAU,J.,ANDMIRONOV,I.Cache-CollisionTimingAt-tacksAgainstAES.InCryptographicHardwareandEmbeddedSystems–CHES(2006),vol.4249ofLNCS,Springer,pp.201–215.[7]BRUMLEY,B.B.,ANDHAKALA,R.M.Cache-TimingTem-plateAttacks.InAdvancesinCryptology–ASIACRYPT(2009),vol.5912ofLNCS,Springer,pp.667–684.[8]CHARI,S.,RAO,J.R.,ANDROHATGI,P.TemplateAttacks.InCryptographicHardwareandEmbeddedSystems–CHES(2002),vol.2523ofLNCS,Springer,pp.13–28.[9]CHEN,C.,WANG,T.,KOU,Y.,CHEN,X.,ANDLI,X.Im-provementofTrace-DrivenI-CacheTimingAttackontheRSAAlgorithm.JournalofSystemsandSoftware86,1(2013),100–107.[10]DAEMEN,J.,ANDRIJMEN,V.TheDesignofRijndael:AES–TheAdvancedEncryptionStandard.InformationSecurityandCryptography.Springer,2002.[11]DOYCHEV,G.,FELD,D.,K¨OPF,B.,MAUBORGNE,L.,ANDREINEKE,J.CacheAudit:AToolfortheStaticAnalysisofCacheSideChannels.InUSENIXSecuritySymposium(2013),USENIXAssociation,pp.431–446.[12]FRANZ,M.Eunibuspluram:Massive-ScaleSoftwareDiver-sityasaDefenseMechanism.InWorkshoponNewSecurityParadigms–NSPW(2010),ACM,pp.7–16.[13]GALLAIS,J.,KIZHVATOV,I.,ANDTUNSTALL,M.ImprovedTrace-DrivenCache-CollisionAttacksagainstEmbeddedAESImplementations.IACRCryptologyePrintArchive2010/408.[14]GOOGLEGROUPS.RowhammerwithoutCLFLUSH,2015.URL:https://groups.google.com/forum/#!topic/rowhammer-discuss/ojgTgLr4q_M.[15]GUERON,S.WhitePaper:IntelAdvancedEncryptionStan-dard(AES)InstructionsSet,2010.URL:https://software.intel.com/file/24917.[16]GULLASCH,D.,BANGERTER,E.,ANDKRENN,S.CacheGames–BringingAccess-BasedCacheAttacksonAEStoPrac-tice.InIEEESymposiumonSecurityandPrivacy–S&P(2011),IEEEComputerSociety,pp.490–505.[17]G¨ULMEZO˘GLU,B.,INCI,M.S.,EISENBARTH,T.,ANDSUNAR,B.AFasterandMoreRealisticFlush+ReloadAttackonAES.InConstructiveSide-ChannelAnalysisandSecureDe-sign–COSADE(2015),LNCS,Springer.Inpress.[18]HUND,R.,WILLEMS,C.,ANDHOLZ,T.PracticalTimingSideChannelAttacksagainstKernelSpaceASLR.InIEEESympo-siumonSecurityandPrivacy–SP(2013),IEEEComputerSoci-ety,pp.191–205.[19]INTELCORPORATION.IntelR(cid:31)64andIA-32ArchitecturesOpti-mizationReferenceManual.No.248966-026.2012.[20]IRAZOQUI,G.,EISENBARTH,T.,ANDSUNAR,B.S$A:ASharedCacheAttackthatWorksAcrossCoresandDeﬁesVMSandboxing–anditsApplicationtoAES.InIEEESymposiumonSecurityandPrivacy–S&P(2015),IEEEComputerSociety.[21]IRAZOQUI,G.,INCI,M.S.,EISENBARTH,T.,ANDSUNAR,B.FinegrainCross-VMAttacksonXenandVMwarearepossible!IACRCryptologyePrintArchive2014/248.[22]IRAZOQUI,G.,INCI,M.S.,EISENBARTH,T.,ANDSUNAR,B.WaitaMinute!Afast,Cross-VMAttackonAES.InResearchinAttacks,IntrusionsandDefensesSymposium–RAID(2014),vol.8688ofLNCS,Springer,pp.299–319.[23]IRAZOQUI,G.,INCI,M.S.,EISENBARTH,T.,ANDSUNAR,B.KnowThyNeighbor:CryptoLibraryDetectioninCloud.PrivacyEnhancingTechnologies1,1(2015),25–40.[24]IRAZOQUI,G.,INCI,M.S.,EISENBARTH,T.,ANDSUNAR,B.Lucky13StrikesBack.InACMASIACCS(2015),pp.85–96.15[25] K ¨ASPER, E., AND SCHWABE, P. Faster and Timing-Attack Re-
sistant AES-GCM. In Cryptographic Hardware and Embedded
Systems – CHES (2009), vol. 5747 of LNCS, Springer, pp. 1–17.
[26] KELSEY, J., SCHNEIER, B., WAGNER, D., AND HALL, C. Side
Channel Cryptanalysis of Product Ciphers. Journal of Computer
Security 8, 2/3 (2000), 141–158.
[27] KIM, Y., DALY, R., KIM, J., FALLIN, C., LEE, J., LEE, D.,
WILKERSON, C., LAI, K., AND MUTLU, O. Flipping Bits in
Memory Without Accessing Them: An Experimental Study of
DRAM Disturbance Errors. In ACM/IEEE International Sympo-
sium on Computer Architecture – ISCA (2014), IEEE Computer
Society, pp. 361–372.
[28] KOCHER, P. C. Timing Attacks on Implementations of Difﬁe-
Hellman, RSA, DSS, and Other Systems. In Advances in Cryp-
tology – CRYPTO (1996), vol. 1109 of LNCS, Springer, pp. 104–
113.
[29] KONG, J., ACIIC¸ MEZ, O., SEIFERT, J., AND ZHOU, H. De-
constructing New Cache Designs for Thwarting Software Cache-
based Side Channel Attacks.
In ACM Workshop on Computer
Security Architecture – CSAW (2008), pp. 25–34.
[30] K ¨ONIGHOFER, R. A Fast and Cache-Timing Resistant Imple-
mentation of the AES. In Topics in Cryptology – CT-RSA (2008),
vol. 4964 of LNCS, Springer, pp. 187–202.
[31] LIU, F., AND LEE, R. B. Random Fill Cache Architecture. In
International Symposium on Microarchitecture – MICRO (2014),
IEEE, pp. 203–215.
[32] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.
Last-level cache side-channel attacks are practical. In IEEE Sym-
posium on Security and Privacy – S&P (2015).
[33] MAURICE, C., NEUMANN, C., HEEN, O., AND FRANCILLON,
A. C5: Cross-Cores Cache Covert Channel. In DIMVA (2015).
In press.
[34] MOWERY, K., KEELVEEDHI, S., AND SHACHAM, H. Are AES
x86 Cache Timing Attacks Still Feasible? In Workshop on Cloud
Computing Security – CCSW (2012), ACM, pp. 19–24.
[35] NATIONAL INSTITUTE OF STANDARDS AND TECHNOLOGY.
Advanced Encryption Standard. NIST FIPS PUB 197, 2001.
[36] NEVE, M. Cache-based Vulnerabilities and SPAM Analysis. PhD
thesis, UCL, 2006.
[37] OPENSSL SOFTWARE FOUNDATION. OpenSSL Project, 2014.
URL: http://www.openssl.org/.
[38] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND
KEROMYTIS, A. D. The Spy in the Sandbox - Practical Cache
Attacks in Javascript. CoRR abs/1502.07373 (2015).
[39] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache Attacks
and Countermeasures: The Case of AES. In Topics in Cryptology
– CT-RSA (2006), vol. 3860 of LNCS, Springer, pp. 1–20.
[40] OWENS, R., AND WANG, W. Non-Interactive OS Fingerprint-
ing Through Memory De-Duplication Technique in Virtual Ma-
chines. In International Performance Computing and Communi-
cations Conference – IPCCC (2011), IEEE, pp. 1–8.
[41] PAGE, D. Theoretical Use of Cache Memory as a Cryptanalytic
Side-Channel. IACR Cryptology ePrint Archive 2002/169.
[42] PERCIVAL, C.
Cache Missing for Fun and Proﬁt,
http://www.daemonology.net/
2005.
hyperthreading-considered-harmful/.
URL:
[43] REBEIRO, C., SELVAKUMAR, A. D., AND DEVI, A. S. L. Bit-
slice Implementation of AES. In Cryptology and Network Secu-
rity – CANS (2006), vol. 4301 of LNCS, Springer, pp. 203–212.
16
[44] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE,
S. Hey, You, Get Off of My Cloud: Exploring Information Leak-
age in Third-Party Compute Clouds.
In ACM Conference on
Computer and Communications Security – CCS (2009), ACM,
pp. 199–212.
[45] SEABORN, M., AND DULLIEN, T. Exploiting the DRAM
Rowhammer Bug to Gain Kernel Privileges, 2015. URL:
http://googleprojectzero.blogspot.co.at/2015/03/
exploiting-dram-rowhammer-bug-to-gain.html.
[46] SPREITZER, R., AND PLOS, T. Cache-Access Pattern Attack on
In Constructive Side-Channel Anal-
Disaligned AES T-Tables.
ysis and Secure Design – COSADE (2013), vol. 7864 of LNCS,
Springer, pp. 200–214.
[47] SUZAKI, K., IIJIMA, K., YAGI, T., AND ARTHO, C. Memory
Deduplication as a Threat to the Guest OS. In European Work-
shop on System Security – EUROSEC (2011), ACM, pp. 1–6.
[48] TANNOUS, A., TROSTLE, J. T., HASSAN, M., MCLAUGHLIN,
S. E., AND JAEGER, T. New Side Channels Targeted at Pass-
words. In Annual Computer Security Applications Conference –
ACSAC (2008), pp. 45–54.
[49] TROMER, E., OSVIK, D. A., AND SHAMIR, A. Efﬁcient Cache
Attacks on AES, and Countermeasures. Journal Cryptology 23,
1 (2010), 37–71.
[50] TSUNOO, Y., SAITO, T., SUZAKI, T., SHIGERI, M., AND
MIYAUCHI, H. Cryptanalysis of DES Implemented on Com-
puters with Cache. In Cryptographic Hardware and Embedded
Systems – CHES (2003), vol. 2779 of LNCS, Springer, pp. 62–76.
[51] WANG, Z., AND LEE, R. B. New Cache Designs for Thwarting
Software Cache-based Side Channel Attacks.
In International
Symposium on Computer Architecture – ISCA (2007), pp. 494–
505.
[52] WANG, Z., AND LEE, R. B. A Novel Cache Architecture with
Enhanced Performance and Security. In IEEE/ACM International
Symposium on Microarchitecture – MICRO (2008), pp. 83–93.
[53] WEISS, M., HEINZ, B., AND STUMPF, F. A Cache Timing At-
tack on AES in Virtualization Environments. In Financial Cryp-
tography and Data Security – FC (2012), vol. 7397 of LNCS,
Springer, pp. 314–328.
[54] YAROM, Y., AND BENGER, N. Recovering OpenSSL ECDSA
Nonces Using the FLUSH+RELOAD Cache Side-channel At-
tack. IACR Cryptology ePrint Archive 2014/140.
[55] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A High
Resolution, Low Noise, L3 Cache Side-Channel Attack.
In
USENIX Security Symposium (2014), USENIX Association,
pp. 719–732.
[56] ZHANG, K., AND WANG, X. Peeping Tom in the Neighborhood:
In USENIX
Keystroke Eavesdropping on Multi-User Systems.
Security Symposium (2009), USENIX Association, pp. 17–32.
[57] ZHANG, Y., JUELS, A., OPREA, A., AND REITER, M. K.
HomeAlone: Co-residency Detection in the Cloud via Side-
Channel Analysis. In IEEE Symposium on Security and Privacy
– S&P (2011), IEEE Computer Society, pp. 313–328.
[58] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART,
T. Cross-Tenant Side-Channel Attacks in PaaS Clouds. In ACM
Conference on Computer and Communications Security – CCS
(2014), ACM, pp. 990–1003.
[59] ZHANG, Y., AND REITER, M. K. D¨uppel: Retroﬁtting Com-
modity Operating Systems to Mitigate Cache Side Channels in
the Cloud. In ACM Conference on Computer and Communica-
tions Security – CCS (2013), ACM, pp. 827–838.
912  24th USENIX Security Symposium 
USENIX Association