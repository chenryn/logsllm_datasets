the Passe analyzer and increase the allowable code paths. In
respect to this, Passe guarantees monotonicity: additional tests
cannot reduce the set of allowable queries. To see why this
is the case, imagine that Passe witnesses an additional query
event for some (query, view) pair. If this event creates any
new data-ﬂow constraints, they only increase the allowable
data-ﬂows. If, previously, that particular query argument
was unconstrained, then it will remain unconstrained (again,
because data-ﬂow constraints only add new paths). The same
is true for any new control-ﬂow constraints, because a control-
ﬂow constraint will only be added if it holds for all the
witnessed events of a particular (query, view) pair.
E. Impacts of False Positives and Negatives
Passe’s analysis phase is capable of both false positives and
false negatives when detecting dependencies. False positives
occur when the application developer wishes to allow data-
ﬂows which Passe’s analysis phase does not witness. This
results in a policy which disallows those data-ﬂows. The
developer can resolve such false positives by including new
test cases which cover those particular data-ﬂows. Passe is
also capable of false negatives when detecting dependencies.
In these scenarios, Passe will generate a policy which is
too permissive, such that, in the event of an application
compromise, an attacker would be able to execute data-
ﬂows which should be constrained. This can only occur if
a witnessed dependency is not captured by our taint tracker.
As discussed in §V-A, our prototype can fail to detect certain
kinds of control-ﬂow dependencies. (Building a more full-
featured PyPy taint-tracker is part of ongoing work.) A
developer can remedy such missed dependencies by manually
inserting those dependencies into the outputted policy. While
this is an unsatisfying method, we did not encounter any such
cases of false negatives in our tested applications. This is
also a current limitation of our prototype, rather than Passe’s
underlying method; a more complete implementation of taint-
tracking in the Python interpreter would not encounter false
negatives while detecting dependencies.
VI. IMPLEMENTATION
We implemented the Passe runtime and analysis engine as
modiﬁed versions of Django 1.3. For the analysis engine, we
modiﬁed certain Django libraries to make analysis easier—
in particular, the authentication and database libraries—by
adding annotating calls for the tracer. Further, we use our
modiﬁed version of the PyPy 1.9 interpreter to perform our
dynamic taint tracking.
For the runtime, we modiﬁed the Django dispatcher
to support interprocess calls to views, and the database,
authentication, and session libraries were modiﬁed to make
proxied requests. A Gunicorn HTTP server just acts as
the network front-end, accepting HTTP requests before
passing them to Django (and its dispatcher). Our database
proxy provides support for two different database backends,
PostgreSQL and SQLite.
In total, Passe required 2100 new lines of code (LOC) for
Passe-speciﬁc functionality, as well as changing 2500 LOC
in the Django library and 1000 LOC in PyPy. Our HTML5
141
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
social-news
swingtime calendar
simplewiki
django-articles
django-forum
whoami blog
wakawaka wiki
django-proﬁles
portfolio
django-polls-tutorial
django-notes
views
47
19
19
22
18
15
20
9
10
5
5
queries
411
95
132
219
165
47
114
23
24
29
10
constrained
queries
68%
52%
71%
75%
81%
49%
71%
47%
61%
62%
37%
constraints
653
379
370
455
436
129
323
69
103
87
16
policies
17
9
13
15
15
9
7
5
6
5
4
app
actions
155
17
46
12
34
6
39
18
8
15
16
admin
actions
46
101
69
139
111
74
92
37
19
25
0
code
coverage
90%
97%
95%
100%
100%
95%
99%
100%
96%
99%
100%
loc
4375
1187
1057
992
510
487
471
230
118
77
65
Figure 7: For each application, we measure the number of browser actions performed in our test suites for Passe’s analysis phase and the number of
discovered views, queries, constraints, and higher-level policies. Code coverage numbers reﬂect what percentage of the application code was covered by our
tests (both in runtime and analysis phases). The lines of code (loc) not covered were either completely unreachable or unreachable through web browsing
alone.
sandbox requires 320 lines of Javascript code, which are
inserted into responses automatically by our dispatcher.
A. Unsupported Django Behavior.
While we attempt to provide an interface identical to
Django, our modiﬁcations do require some changes to this
interface: views are forced to authenticate users through the
default authentication library, which we modiﬁed, applica-
tions cannot use arbitrary global variables and the URL Map
may only contain views found during analysis.
Developers may attempt to authenticate users directly,
circumventing the authentication library. In our system, this
will fail, as only the authentication server is able to create
a new token for the application. This is problematic for
applications that use external sources for authentication (e.g.,
OAuth). Our prototype could be extended to support different
authentication libraries, or to provide a generic API which
would allow Passe to be integrated with custom authentication
method. This, however, would still require modifying some
applications to use our API.
Because views in Passe run in separate processes, global
variables cannot be used to pass information between views.
However, passing information through global variables is
discouraged by the Django framework. Using global variables
in this way can lead to problems even in normal Django
deployments where multiple worker processes are responsible
for processing concurrent requests in parallel. Because these
workers do not share an address space, propagating informa-
tion through global variables could lead to inconsistencies
between requests. As such, none of the applications we tested
used global variables in this way.
Django allows developers to modify the URL Map to
add new views dynamically. While Passe could possibly
be extended to support such behavior by giving the new
view the same permissions as the parent view, this was not
implemented. Instead, if a view attempts to modify the URL
Map, it fails, as it has no access to the dispatcher’s URL
Map object. We did not encounter this problem in any of
the applications we tested.
VII. PROTECTIONS FOR REAL APPLICATIONS
To understand how Passe executes real applications,
we ran and tested ten open-source Django applications,
manually inspecting both the application source code and
Passe’s inferred policies. We assessed the source code for
instances of application security policies and, in particular,
those impacting data integrity or conﬁdentiality. We then
checked whether Passe correctly enforces those policies.
Across all applications, we found four instances of clearly
intended policies missed by Passe, exposing the application
to conﬁdentiality violations. In this section, we evaluate the
following questions:
§VII-A. How does Passe mitigate our three classes of
vulnerabilities?
§VII-B. How difﬁcult is it to construct end-to-end test cases
for Passe to analyze applications?
§VII-C. What coarse-grained isolation properties can Passe
provide to applications?
§VII-D. Are there security policies in these applications
which Passe’s dependency constraints cannot enforce?
§VII-E. Examining three case studies in more depth, how
does Passe capture ﬁne-grained security policies?
§VII-F. How do common web application vulnerabilities
apply to Passe?
A. Passe in the Presence of Vulnerabilities
1) Unexpected Behavior: When applications exhibit un-
expected behavior, Passe is able to prevent the attacker from
compromising the database in many cases. For example, in
the 2012 Github / Ruby-on-Rails attack, a mass assignment
142
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:26 UTC from IEEE Xplore.  Restrictions apply. 
vulnerability allowed users to set the UID for the public key
being uploaded. This allows users to upload a key for any
user. In Passe, the normal path of the code would create a
constraint for the UPDATE statements asserting that the UID
must be equal to the current account.
2) XSS Attacks: Passe can mitigate many of the effects of
XSS vulnerabilities. Passe restricts the content returned by
views to only making AJAX requests to a whitelisted set of
other views. For example, if a view containing user-generated
content (such as a forum page) does not normally call to other
views, then no XSS vulnerabilities in the view will be able to
call other views. While this does not prevent scripting attacks
which do not make cross-site requests, it does prevent views
from using scripts to open attack channels against unrelated
views. This allows Passe to preserve isolation between views,
even at the client’s browser.
3) Arbitrary Code Execution: Some web applications
contain bugs which allow arbitrary code execution. For
example, a commonly used YAML library in Django allowed
arbitrary object deserialization, ultimately allowing remote
code exploits [9]. YAML parsing libraries exposed node.js
and Rails applications to a similar attack [16, 17]. Passe
mitigates the threat of this by restricting developer-supplied
code to speciﬁc database actions.
Unfortunately, an attacker who has complete control over
a view can launch a phishing attack, displaying a convincing
login screen to users. This is more damaging than normal
phishing attacks as this page will be served by the correct
web host. Therefore, it is still important to recover from an
attack quickly, even though Passe continues to provide data
security properties during an attack. Other similar systems are
also susceptible to this attack, including those incorporating
more formal mechanisms such as DIFC [18].
B. Building End-to-End Tests
To perform end-to-end tests, we wrote a test suite for
each application using Selenium, a library for automating
web-browser actions. Our suites tested applications entirely
through their web interfaces by performing normal applica-
tion actions. After running an application through Passe’s
testing phase, we ran the application in the secure runtime of
Passe, and when the inferred constraints were too strong, we
added more tests to the test suite. Each of these test suites
took less than an hour to construct and was comprised of
about 200 lines of Python.
To understand how much testing was required for each
application, we measured the number of browser actions in
each of the test suites we developed. The table in Figure 7
displays these measurements. An important note is that
while each application required a large number of browser
actions to test the application, many of these actions were
performed on the django-admin interface. Because this is a
standard interface, a more advanced testing framework could
automatically generate tests for this interface, a possible
direction for future work.
In order to run with Javascript sandboxing on the browser,
Passe requires that a mapping from AJAX requesting views
to the responding views be constructed. To see how much
additional burden was required to generate this mapping,
we tested the most AJAX-intensive application in our test
cases (social-news) in the Javascript sandboxing mode.
We modiﬁed our end-to-end test scripts so that elements
would be selected in the sandboxed frame rather than in
the parent window. Other than these changes, the original
end-to-end tests we developed to capture query constraints
were sufﬁcient to capture all of the allowable AJAX requests
as well.
C. Isolation Properties
To understand how much isolation Passe provides by
restricting each view to the set of queries it needs, we
measured the proportion of views that can access each table
of an application. Half of our applications’ tables are readable
by at most 7 views. Still, some tables can be accessed
by nearly all of an application’s views. For example, in
the blogging applications, the user table holds an author’s
username. Because most of the views display authored posts,
the user table can be read by most views. When we look
at views with write access, however, the separation is much
stronger. Fully half of the tables for all applications are
writable by only one or two views. Of course, these results
do not speak to the guarantees provided by the inferred
constraints, which further strengthen the application’s security