In strict mode, React will call render method twice, to catch mutate-during-
render type of bugs. However, there is an inconsistency in the way this is
done for `useRef()`.
During the _first_ render only, each call will give you a fresh ref object.
During subsequent calls, you will be given the same object during both calls.
React version: 17.0.2
## Steps To Reproduce
Here is a little app to demo this.
    import React from "react";
    import "./styles.css";
    const Hooky = () => {
      const ref = React.useRef(null);
      const [num, setNum] = React.useState(0);
      ref.current = (ref.current || 0) + 1;
      return (
            Val: {num} 
             setNum(Math.random())}>Roll
          Ref count: {ref.current}
      );
    };
    const App = () => {
      const [show, setShow] = React.useState(false);
      return (
          Show or hide
           setShow(!show)}>{show ? "Hide" : "Show"}
          {show && }
      );
    };
    export default App;
Click "Show". You will see ref count set to `1`, indicating the `useRef` has
returned a different object both times it was called (it could also mean the
component was called only once, but that isn't the case, I checked using
debugger). If you force rerender by clicking the other button, the ref will
increase in increments of 2, which is what you'd expect.
Link to code example: https://codesandbox.io/s/react-fiddle-forked-
fkocg?file=/src/App.js
## The current behavior
`useRef` in strict mode has one behavior during first render and other during
subsequent renders.
## The expected behavior
`useRef` operates consistently during all renders. Either always gives you the
same object, or has a separate object for each "lane" and always reuses the
same one.
Basically, the counter in the code sandbox example should either go: `2 4 6 8`
or `1 2 3 4`. Not `1 3 5 7`, as it does now.
## Why this matters
Practical issue where I encountered this was trying to do
subscribe/unsubscribe system using refs. I want my components to consistently
subscribe and subscribe callbacks, kind of like element ref works. This failed
when I detected callbacks not getting called, due to a duplicate ref object
provided the first time component is rendered.