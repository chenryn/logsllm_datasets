**Author: u2400@Knownsec 404 Team  
Chinese version:  **
Foreword: Recently, I have implemented HIDS agent in linux. When searching for
data, I found that although there are a lot of data, each article has its own
focus, and few of them are progressive and comprehensive Chinese articles, I
have stepped on a lot of holes in the step-by-step learning. Here I will take
the process information collection as the entry point to give a detailed
explanation on how to implement a HIDS agent. I hope it will be helpful to all
the Masters.
# 1\. What is HIDS?
Host intrusion detection usually divided into two parts: agent and server.
The agent is responsible for collecting information, sorting out relevant
information and sending it to the server.
Server is usually used as an information center to deploy rules written by
security personnel (currently, HIDS rules do not have a specification written
), collect data obtained from various security components (such as waf and
NIDS), analyze the data, and determine whether host behavior is abnormal based
on rules, and alarms and prompts the abnormal behaviors of the host.
The purpose of the existence of HIDS is that the administrator will not be
disturbed by security events when managing a large number of IDCs, and the
health status of each host can be monitored through the information center.
Relevant open-source projects include OSSEC, OSquery, etc. OSSEC is a well-built HIDS with agent and server, built-in rules, and basic rootkit detection,
sensitive file modification reminders and other functions are included in an
open source project called wazuh. OSquery is an open source project developed
by facebook, which can be used as an agent to collect host-related data,
however, the server and rules need to be implemented by themselves.
Each company's HIDS agent will be customized according to its own needs, more
or less adding some personalized functions, a basic HIDS agent generally needs
to achieve:
  * Collect process information
  * Collect network information
  * Periodic collection open port
  * Monitoring sensitive file modifications
The following section will start with the implementation of an agent, and
discuss how to implement the process information collection module of a HIDS
agent around the agent.
# 2\. Agent Process Monitoring Module Summary
## 2.1 The Purpose of Process Monitoring
In the Linux operating system, almost all operations and intrusion behaviors
are reflected in the executed commands, and the essence of command execution
is to start the process, therefore, the monitoring of processes is the
monitoring of command execution, which is of great help to the operation
upgrade and intrusion behavior analysis.
## 2.2 The Data That The Process Monitoring Module Should Obtain
Now that you want to obtain information, you need to make it clear what you
need first. If you don't know what information you need, then there is no way
to realize it, even if you try hard to implement a HIDS that can obtain basic
information such as pid, the interface will be changed frequently due to lack
of planning in the later stage, which will waste manpower, here, refer to the
《Internet Enterprise Security Advanced Guide》 to provide a basic list of
information acquisition. The method of obtaining this table will be
supplemented later.
Data name | Meaning  
---|---  
path | The path of the executable file  
ppath | Parent process executable file path  
ENV | Environment variables  
cmdline | Process start Command  
pcmdline | Parent process startup command  
pid | Process id  
ppid | Parent process id  
pgid | Process Group id  
sid | Process session id  
uid | Uid of the user who started the process  
euid | The euid of the user who started the process  
gid | User group id of the user who started the process  
egid | The egid of the user who started the process  
mode | Executable file permissions  
owner_uid | The uid of the file owner  
owner_gid | The gid of the file owner  
create_time | File creation time  
modify_time | Last file modification time  
pstart_time | The start time of the process  
prun_time | The time when the parent process has been running  
sys_time | Current system time  
fd | File descriptor  
## 2.3 The Method of Process Monitoring
Process Monitoring usually uses hook technology, and these hooks are roughly
divided into two types:
  * Application-level (working in r3, it is common to hijack the libc Library, which is usually simple but may be bypassed.
  * Kernel-level (working in r0 or r1, kernel-level hook is usually related to the system call VFS, which is complex, and may cause compatibility problems between different kernel versions, when a serious error occurs on the hook, kenrel may panic and cannot be bypassed in principle.
Let's start with a simple application-level hook.
# 3\. HIDS Application-level Hook
## 3.1 Hijack libc Library
Libraries are used to package functions. The packaged functions can be used
directly. linux is divided into static libraries and dynamic libraries.
Dynamic libraries are loaded only when applications are loaded, however, the
program has a loading order for the dynamic library, which can be modified
/etc/ld.so.preload To manually load a dynamic link library first, in which the
original function can be replaced before the program calls the original
function, after executing its own logic in its own function, call the original
function to return the result that the original function should return.
For those who want to know more, please refer to this
[article](https://www.ibm.com/developerworks/cn/linux/l-dynamic-libraries/index.html).
To hijack the libc library, you can perform the following steps:
### 3.1.1 Compile a Dynamic Link Library
A simple dynamic link library of hook execve is as follows.
The logic is very simple
  1. Customize a function named execve, and accept the same parameter type as the original execve.
  2. Execute your own logic
    #define _GNU_SOURCE
    #include 
    #include 
    typedef ssize_t (*execve_func_t)(const char* filename, char* const argv[], char* const envp[]);
    static execve_func_t old_execve = NULL;
    int execve(const char* filename, char* const argv[], char* const envp[]) {
            //从这里开始是自己的逻辑, 即进程调用execve函数时你要做什么
        printf("Running hook\n");
        //下面是寻找和调用原本的execve函数, 并返回调用结果
        old_execve = dlsym(RTLD_NEXT, "execve");
        return old_execve(filename, argv, envp);
    }
Compile into so file through gcc.
    gcc -shared -fPIC -o libmodule.so module.c
### 3.1.2 Modify ld. so. preload
Ld. so. preload is the configuration file of the LD_PRELOAD environment
variable. By modifying the file content to the specified dynamic link library
file path,
Be careful, only root can modify ld. so. preload, unless the default
permission is changed
Customize an execve function as follows:
    extern char **environ;
    int execve(const char* filename, char* const argv[], char* const envp[]) {
        for (int i = 0; *(environ + i) ; i++)
        {
            printf("%s\n", *(environ + i));
        }
        printf("PID:%d\n", getpid());
        old_execve = dlsym(RTLD_NEXT, "execve");
        return old_execve(filename, argv, envp);
    }
The Pid of the current process and all environment variables can be output.
After compilation, modify ld. so. preload and restart the shell. The result of
running the ls command is as follows:
### 3.1.3 Advantages and Disadvantages of libc hook
Advantages: it has better performance and is relatively stable. Compared with
LKM, it is simpler and more adaptable. It is usually against web intrusion.
Disadvantages: there is no way out for the static compilation program, and
there is a risk of being bypassed.
### 3.1.4 Hook and Information Acquisition
A hook is set up to establish monitoring points and obtain process-related
information. However, if the hook part is written too much, it will affect the
operation efficiency of normal services, this is unacceptable to the business.
In general HIDS, the information that can not be obtained at the hook is
obtained in the agent, so that the information acquisition and the business
logic are executed concurrently, reduce the impact on the business.
# 4\. Information Completion and Acquisition
If the information accuracy requirement is not very high, and you want to do
everything possible without affecting the normal business deployed on the HIDS
host, you can choose hook to obtain only the necessary data such as PID and
environment variables, then, these things are handed over to the agent, and
the agent continues to obtain other relevant information of the process. That
is to say, when obtaining other information of the process, the process has
already continued to run, instead of waiting for the agent to obtain the
complete information table.
## /proc/[pid]/stat
/Proc is a set of fifo interfaces provided by the kernel to the user state,
calling interfaces in the form of pseudo file directories
The information related to each process is placed in a folder named pid.
Commands such as ps also obtain the information related to the process by
traversing the/proc directory.
The contents of a stat file are as follows. The following self is an interface
provided by the/proc directory to quickly view its own process information.
Each process will see its own information when accessing/self.
    #cat /proc/self/stat
    3119 (cat) R 29973 3119 19885 34821 3119 4194304 107 0 0 0 0 0 0 0 20 0 1 0 5794695 5562368 176 18446744073709551615 94309027168256 94309027193225 140731267701520 0 0 0 0 0 0 0 0 0 17 0 0 0 0 0 0 94309027212368 94309027213920 94309053399040 140731267704821 140731267704841 140731267704841 140731267706859 0
You will find that the data is messy. Spaces are used as the boundaries of
each data. There is no place to explain what the data means.
Generally, I found a list in an article, which describes the data type of each
data and the meaning of its expression. See the article in [Appendix 1].
Finally, a structure with 52 data items and different types of each data item
was sorted out. It was a little troublesome to get it. No wheel was found on
the Internet, so I wrote one myself.
Specific structure definition:
    struct proc_stat {
        int pid; //process ID.
        char* comm; //可执行文件名称, 会用()包围
        char state; //进程状态
        int ppid;   //父进程pid