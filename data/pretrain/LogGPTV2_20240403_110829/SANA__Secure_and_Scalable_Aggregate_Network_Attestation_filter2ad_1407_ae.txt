### Optimized Text

**Set by V and Embedded in Token T:**
During the attestation response aggregation, aggregators continue to aggregate signatures on bad software configurations until the threshold is reached. Any subsequent signatures are discarded. Since discarding signatures makes the final report unverifiable, if the verification fails, V infers that the number of bad devices has exceeded the threshold.

**Threshold Attestation in Constant Time:**
As illustrated in Figure 7, the threshold attestation process runs in constant time. However, factors such as benign errors and active (DoS) attacks can also cause a failure in the verification of the aggregate attestation response. To address this, it is crucial to confirm that the failure is due to an excessive number of bad devices. A potential solution is to split the OAS signature into two parts: an aggregate signature (over bad configurations) and a multi-signature (over good configurations). This approach allows V to verify the aggregate signature in constant time, ensuring that the number of devices with bad configurations has exceeded the threshold. Additionally, V can identify the identities and software configurations of these bad devices.

**Figure 7: Runtime of SANA on an EC2 t2.micro [3] Verifier**

**Background and Related Work:**
Individual Device Attestation is a well-established research area. The primary goal of an attestation process is to enable a verifier to check the integrity of the software running on a potentially remote device (prover). There are three main approaches to attestation: software-based, co-processor-based, and hybrid.

- **Software-Based Attestation:** [16, 31, 14, 19] does not require secure hardware and does not rely on cryptographic secrets, making it attractive for low-end devices with limited resources. However, its security has been challenged [35] due to strong assumptions that are difficult to achieve in practice [4]. For example, it assumes optimal attestation algorithms and passive adversaries, relies on strict round-trip time estimations, and requires out-of-band authentication, limiting it to one-hop communication.
  
- **Co-Processor Based Attestation:** [27, 33, 18, 30, 22, 21] offers improved security but is more suitable for general-purpose computing platforms. The underlying security hardware is often too complex or expensive for low-end embedded devices.

- **Hybrid Approaches:** [12, 17, 13, 11] aim to minimize the required hardware security features, which can be as simple as a Read-Only Memory (ROM) and a Memory Protection Unit (MPU). SANA requires similar minimal hardware support for collective attestation on the attested devices.

**Collective Attestation:**
SEDA, proposed in [5], was a pioneering step towards scalable attestation for large groups of interconnected devices. SEDA focuses on efficiency and applicability to low-end devices rather than security against strong adversaries. It extends the software-only attacker model assumed by most single-prover attestation schemes to swarms of devices. SEDA uses security hardware to enable neighbor verification and secure hop-by-hop aggregation, distributing the attestation burden across the network. It reports the number of devices that passed attestation and requires minimal trust anchors in hardware for all nodes. However, SEDA is vulnerable to physical tampering, and a breach in one node can compromise the entire scheme.

**SANA's Advantages Over SEDA:**
SANA overcomes SEDA's limitations by:
- Requiring minimal trust anchors in hardware only for the attested devices.
- Allowing largely untrusted nodes to perform aggregation, focusing on availability.
- Limiting the impact of successful attacks on a single device to that device alone, preventing cascading failures.
- Informing the verifier about the IDs and software configurations of devices that failed attestation.

**In-Network Aggregation:**
To meet these goals, SANA employs in-network aggregation. Several secure in-network aggregation protocols have been proposed for sensor networks to provide scalable data collection. These protocols allow sensors to collaboratively and securely compute aggregation functions, reducing message complexity. However, they either have linear verification complexity or require multiple protocol rounds.

**Aggregate Multi-Signatures:**
SANA requires a scalable aggregatable signature scheme to allow attested devices to sign their state. Such a scheme should allow different signers with different public keys to sign distinct messages and enable intermediate nodes to aggregate individual signatures into a single verifiable short signature. Existing aggregate signature schemes have linear verification overhead, making them unsuitable for scalable attestation. They also have additional constraints, such as requiring distinct messages, complex key agreement, sequential order, or identical messages.

**Optimistic Aggregate Signature (OAS):**
We present a new signature scheme, OAS, that:
- Allows signatures on distinct messages to be aggregated.
- Provides a signature verification algorithm with constant-time complexity.
- Has communication overhead linear in the number of different messages and computational overhead linear in the number of signers who signed a different message than the default one, assuming this number is limited.

To our knowledge, OAS is the first scheme that meets the requirements for secure collective attestation. We also present a pairings-based construction of OAS and combine it with aggregation trees, providing unlimited scalability. Our OAS construction is also applicable to witness cosigning at certification, logging, and timestamping authorities [32].

**Conclusions:**
Collective attestation is essential for securing the Internet of Things, especially for validating the configuration and software of large numbers of devices. SANA is the first practical and secure collective attestation scheme, improving upon existing solutions like SEDA in several ways:
- Easy deployment using any untrusted aggregator.
- Publicly verifiable output with a short aggregate attestation.
- Superior security, ensuring that a fully compromised device (including hardware and keys) does not affect other devices.
- Realistic trust model, where only the attested devices need to be trusted.

We have demonstrated that SANA is truly scalable and can be implemented on lightweight devices.

**Acknowledgements:**
We thank anonymous reviewers for their valuable comments. This research was co-funded by the German Science Foundation (project S2 within CRC 1119 CROSSING, EC-SPRIDE), the European Union’s 7th Framework Programme (grant No. 609611, PRACTICE project), and Intel Collaborative Research Institute for Secure Computing (ICRI-SC). Additional support was provided by the EU TagItSmart! Project (agreement H2020-ICT30-2015-688061) and the EU-India REACH Project (agreement ICI+/2014/342-896). Mauro Conti is supported by a Marie Curie Fellowship funded by the European Commission (agreement PCIG11-GA-2012-321980).

**References:**
[1] Target attack shows danger of remotely accessible HVAC systems. http://www.computerworld.com/article/2487452/cybercrime-hacking/target-attack-shows-danger-of-remotely-accessible-hvac-systems.html, 2014.
[2] Jeep Hacking 101. http://spectrum.ieee.org/cars-that-think/transportation/systems/jeep-hacking-101, 2015.
[3] Amazon EC2 Instance Types. https://aws.amazon.com/ec2/instance-types/, 2016.
[4] F. Armknecht et al. A security framework for the analysis and design of software attestation. In ACM CCS’13.
[5] N. Asokan et al. SEDA: Scalable Embedded Device Attestation. In ACM CCS’15.
[6] A. Bagherzandi et al. Multisignatures secure under the discrete logarithm assumption and a generalized forking lemma. In ACM CCS’08.
[7] M. Bellare, C. Namprempre, and G. Neven. Unrestricted aggregate signatures. In ICALP ’07.
[8] M. Bellare et al. Random oracles are practical: A paradigm for designing efficient protocols. In ACM CCS ’93.
[9] A. Boldyreva. Threshold signatures, multisignatures and blind signatures based on the gap-diffie-hellman-group signature scheme. In PKC ’03.
[10] D. Boneh et al. Aggregate and verifiably encrypted signatures from bilinear maps. In EUROCRYPT’03.
[11] F. Brasser et al. Tytan: Tiny trust anchor for tiny devices. In ACM/EDAC/IEEE DAC’15.
[12] K. Eldefrawy et al. SMART: Secure and minimal architecture for (establishing a dynamic) root of trust. In NDSS’12.
[13] A. Francillon et al. A minimalist approach to remote attestation. In DATE’14.
[14] R. Gardner et al. Detecting code alteration by creating a temporary memory bottleneck. IEEE Transactions on Information Forensics and Security, 2009.
[15] K. Itakura et al. A public-key cryptosystem suitable for digital multisignatures. NEC Research & Development, 1983.
[16] R. Kennell et al. Establishing the genuinity of remote computer systems. In USENIXSec’03.
[17] P. Koeberl et al. TrustLite: A security architecture for tiny embedded devices. In ACM EuroSys’14.
[18] X. Kovah et al. New results for timing-based attestation. In IEEE S&P’12.
[19] Y. Li et al. VIPER: Verifying the integrity of peripherals’ firmware. In ACM CCS’11.
[20] S. Lu et al. Sequential aggregate signatures, multisignatures, and verifiably encrypted signatures without random oracles. Journal of Cryptology, 2012.
[21] J. McCune et al. TrustVisor: Efficient TCB reduction and attestation. In IEEE S&P ’10.
[22] J. McCune et al. Flicker: An execution infrastructure for TCB minimization. SIGOPS Operating Systems Review, 2008.
[23] S. Micali et al. Accountable-subgroup multisignatures: Extended abstract. In ACM CCS’01.
[24] S. Micali et al. Accountable-subgroup multisignatures: Extended abstract. In ACM CCS’01.
[25] OpenSim Ltd. OMNeT++ discrete event simulator. http://omnetpp.org/, 2015.
[26] S. Ozdemir and Y. Xiao. Secure data aggregation in wireless sensor networks: A comprehensive overview. Computer Networks, 2009.
[27] J. Petroni et al. Copilot — A coprocessor-based kernel runtime integrity monitor. In USENIXSec’04.
[28] T. Ristenpart et al. The power of proofs-of-possession: Securing multiparty signatures against rogue-key attacks. In EUROCRYPT’07.
[29] M. Rubenstein et al. Programmable self-assembly in a thousand-robot swarm. Science, 2014.
[30] D. Schellekens et al. Remote attestation on legacy operating systems with trusted platform modules. Science of Computer Programming, 2008.
[31] A. Seshadri et al. SAKE: Software attestation for key establishment in sensor networks. In Ad Hoc Networks. 2011.
[32] E. Syta et al. Keeping authorities "honest or bust" with decentralized witness cosigning. In IEEE S&P ’15.
[33] Trusted Computing Group (TCG). Website. http://www.trustedcomputinggroup.org, 2015.
[34] T. Unterluggauer et al. Efficient pairings and ECC for embedded systems. In CHES ’14.
[35] G. Wurster et al. A generic attack on checksumming-based software tamper resistance. In IEEE S&P ’05.

**Appendix: Security of SANA**
The security goal of any collective attestation scheme is to ensure that a verifier V can confirm that all devices in a network are running software known to and accepted by V. In other words, V should accept the attestation result and declare the network G as benign.