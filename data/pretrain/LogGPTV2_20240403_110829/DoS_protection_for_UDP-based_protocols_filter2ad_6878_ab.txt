presence of a fragmentation attack, IKE can pass a list of
preferred IP addresses to the reassembly code, allowing
resources to be used for completion of IKE handshakes from
IP addresses that have returned valid cookies.
The scheme we are proposing has the IP reassembly code,
when resources are getting scarce, devote resources to IP
addresses recommended by IKE (based on having received a
valid cookie).
3.1.2 The guessed IP address attack
There is an additional subtlety, which is that attackers that can
guess IP addresses on the preferred list will still be able to
mount a fragmentation attack, since the IP reassembly code
would not be able to distinguish packet fragments from the
legitimate source from packet fragments from an attacker.
To guard against this attack, an address should stay on the
preferred list only long enough to complete the IKE exchange.
Once an SA is established, there are other ways to defend
against a fragmentation attack. The endpoints of the SA can, as
TCP can, discover the MTU, and prefragment a large packet to
a size that will not need to be fragmented along the path, with
each fragment separately IPsec-protected. Reassembly at the
SA endpoint can be done above the IP reassembly layer, i.e.,
after the fragment has been verified authentic by IPsec. Or if
the SA is merely a VPN link along the path, say between two
firewalls,
then the fragments can be forwarded after being
decapsulated.
Therefore, there is only a small time window in which IP
reassembly must favor traffic from an IP address in order for
the IKE exchange to complete and allow the SA to be
established. In the 6-message protocol, the window is between
receipt of message 3 (in which the cookie is received and
verified) and the successful establishment of the SA. It would
be tempting to assume that Bob’s IKE can remove that IP
address from the preferred list after receipt of the reassembled
message 5. However, if Bob’s message 6 were lost, then Alice
will retransmit the (still large) message 5. Thus Bob will need
to keep the IP address on the preferred list until he is assured
the SA has been established. This can be done after
that
successful
(somewhat
dangerously) after a timeout after receipt of message 5.
traffic on that SA, or
receipt of
3.1.3 Making the extra messages optional
The extra round trip can be made optional (and actually is, in
the IKEv2 protocol). Bob can choose, in message 2, whether to
do the handshake in Figure 2 or the one in Figure 3, and Alice
will know which one he has chosen based on his reply to her
initial message. The idea of having the stateless cookie be an
optional initial round-trip was proposed in [11]. The choice of
doing the stateless cookie exchange with the optional initial
round trip realizes the goal of keeping legitimate pre-cookie-
verification messages sufficiently small so as not to require
fragmentation.
How would an implementation know if it was under attack?
The simplest strategy is to always use the 6-message protocol,
since it is the safest. An alternative is to count the number of
partially completed handshakes, and revert to the 6-message
protocol
if that number goes over some threshold. This is
equivalent to saying that the implementation reserves a fixed
amount of resources to IKE handshakes that have not returned
a cookie.
3.1.4 Avoiding a CPU exhaustion attack
Note that in the stateless 4-message protocol in Figure 2 we
are assuming that Bob will reuse the same Diffie-Hellman
exponent (“b”) for many exchanges, perhaps encoding into the
cookie which “b” he’d chosen. Otherwise,
if Bob had to
compute a unique gb mod p for each connection attempt, he
would be vulnerable to a CPU resource exhaustion DoS attack.
Reusing the same “b” does result in less than perfect PFS
(perfect forward security) if knowledge of “b” persists beyond
a connection whose key is computed from b and information
exchanged over the wire.
If the stateless cookie is instead done as in Figure 3, as an
optional additional round trip, then Bob will be keeping state
starting with message 3, and there is no need to repeat the
information from messages 1 and 2 into message 3.
enough
to
cookie,
it
is
large
contains
is possible to protect against
that message 3 in Figure 2, which includes Alice’s
of Bob’s
require
information such as
3.2 First Fragment Defense
In this section we describe how to defend against
the
fragmentation attack with the 4-message design in Figure 2,
despite the fact that message 3 is large, and might require
fragmentation.
It
the fragmentation attack
without adding an extra round trip for the stateless cookie.
This
is done by an additional unorthodox, but easily
implementable, channel between the reassembly code and the
IKE code.
Recall
return
fragmentation, because
certificate chains.
The solution is to design message 3 so that Bob’s cookie is the
first item in the message, and to allow the reassembly code to
pass the first fragment of an unassembled IP packet up to IKE.
There will be enough information in the fragment for the
reassembly code to detect that:
•
•
•
This is additional
layer violation beyond the defense in
Section 3.1, since it requires the IP reassembly code to look at
the UDP header, and it requires a more radical change to the
API (passing up an unassembled IP fragment). But although
unorthodox, it certainly is not difficult, and it is routine for
routers (which claim to be layer 3 devices) to look beyond the
IP header for firewalling and QOS-categorization reasons.
it is the first fragment (offset=0)
it is UDP (protocol type=UDP)
port in UDP header=500.
There are two variants of this approach. In one approach, the
IP reassembly code always (whether or not it is at the resource
limit) sends the first fragment of a fragmented IKE packet up
to the IKE code. In the other variant, the IP reassembly code
only passes up the first fragment if it was forced to throw away
fragments due to resource exhaustion. In the first approach,
Bob might be lucky and not need to throw away any fragments
if the first fragment is validated by IKE, and IKE informs the
reassembly process to add the address to the preferred list
before Bob discards other fragments of that packet. In this
case, Alice’s IP address will only have to remain on the
preferred list until message 3 is reassembled.
In the second approach, Bob’s IKE only gets to inspect the
first fragment of message 3 if the reassembly resources are
exhausted and Bob is forced to discard fragments. In that case,
Alice’s IP address will have to remain on the preferred list
timer
until Alice’s
and Alice
retransmits message 3,
time hopefully successfully
reassembled because her IP address will be on the preferred
list.
retransmission
this
expires
3.3 Avoiding-IP-Fragmentation Defense
Another approach to avoiding the fragmentation attack is to
design IKE so that it does not depend on IP fragmentation.
This requires first discovering the path MTU (PMTU) and then
doing application-level fragmentation in order to make the
packets smaller than the PMTU. So, instead of sending the
entire message 3 from Figure 2 in a single chunk, it breaks the
message into fragments of appropriate size and has the IKE
peer at the other end reassemble the messages. In order to
prevent fragmentation-flooding attacks on the IKE process,
each application-fragment (remember, in this approach there
are no IP-level fragments) should include the cookie, and any
fragment containing a bogus cookie will be rejected by IKE.
There are two ways of ensuring that fragments are no larger
than the PMTU. The first is to use essentially the technique of
RFC 1191 and set the DF bit in each packet. Thus, an overlarge
packet will be rejected with an ICMP error. This method has
the drawback that it introduces latency (if Alice guesses too
large a PMTU) even when no attack is in progress.
An alternate approach is to not set the DF bit. Then, if Bob is
under attack and forced to flush his fragment reassembly
queue, he can send the ICMP Time Exceeded (Reassembly)
message. When Alice gets this message, she knows that she
needs to back off and then can use the explicit PMTU
discovery mechanism mentioned above. The difficulty here is
that many implementations do not send the Time Exceeded
message
those
implementations concerned with defense against this attack
could easily do so. Those not concerned with defense would do
nothing.
Although this approach offers good protection, it makes the
IKE protocol and implementation somewhat more complex
since it has to do the work that would be done by IP
the efficiency is just as bad as
fragmentation. Moreover,
ordinary IP fragmentation [9]. One might
improve the
efficiency of the fragmentation mechanism by introducing
application-layer ACKs for individual chunks. This would
remove the need to retransmit the entire message when a single
chunk is lost. However,
it would greatly complicate the
protocol state machine. It might well be easier to simply use
TCP instead of UDP.
circumstances. However,
under
these
3.4 Using-an-IP-option-for-the-cookie defense
Another potential defense has IKE inform IP of the strategy for
cookie verification, and carry Bob’s cookie value in a newly
defined IPv4 option, or IPv6 extension header. For example, if
the cookie is a function of the IP address and a secret S, then
IKE will inform IP of the function and S. Alice’s IKE would,
in this strategy, insert the IP option with Bob’s cookie into all
the handshake messages following receipt of Bob’s cookie. In
this way, IP can discard all fragments with an invalid cookie,
or nonexistent cookie. To ensure that all fragments contain the
IP option, the “copy” flag on that option must be set.
The usual objection to anything involving IPv4 options is that
current router implementations forward packets with options
inefficiently, since they will not be able to be forwarded
through the fast path. Another issue with options is that they
are sufficiently rare these days that router code in some
implementations has evolved that will mishandle packets with
options. Header compression implementations are notorious
for mangling headers with IP options.
Assuming an IP option would be handled correctly but slowly
by the routers, this is not necessarily a problem for IKE. All
this means is that the handshake messages will be slower at
traversing the network. However,
it might open up a new
avenue for a DoS attack, which is to send a lot of nonstandard
packets into the network, using up the CPU in a router’s
central processor. But this attack would not be introduced by
this mechanism (an IP option to carry cookies), since an
attacker could already use any unusual IP packets to swamp
the slow path of existing routers.
The fragmentation defense in this section is much more radical
than others proposed. It
involves not only giving the IP
reassembly code hints about preferred addresses, but actual
is more resilient
code for verifying cookies. However,
against
the
in
Section 3.1.2.
guessed-IP-address
described
it
attack
3.5 Using-the-IP-pktID-for-the-cookie defense
After the fragmentation attack and proposed defense was
described in [4], the defense in this section was proposed and
described in the 4th draft of JFK [2]. This defense is similar to
the defense in Section 3.4 above, but has the cookie appear in
the 2-byte packet identifier field in the IP header instead of as
an IP option. As with the defense in Section 3.4, IKE will need
to tell IP the cryptographic algorithm for verifying cookies.
Since the packet identifier appears in all IP packets, Bob’s IP
reassembly code will need to compute the expected cookie on
every fragment, even those on non-IKE packets,
since
fragments other than first fragments cannot be distinguished as
IKE fragments. If the packet identifier field in the IP header
matches the bottom 2 bytes of the cookie Bob’s IKE would
have computed for that IP address, then Bob’s IP reassembly
code queues that fragment on a preferred queue; otherwise, on
a non-preferred queue.
This scheme has additional disadvantages over the defense in
Section 3.4:
•
It puts a lot of computation responsibility on the
reassembly code (a cryptographic hash must be computed
for every IP fragment; even those that are not fragments
of IKE packets, since other than the first fragment, an IKE
packet cannot be distinguished from packets from other
protocols).
•
The packet identifier field is already used by IP for other
purposes, and if other processes at Alice are transmitting
packets that must be fragmented, it is possible that the
value in the bottom 2 bytes of the cookie she received
from Bob has already been assigned to a packet identifier
of a recently transmitted IP packet.
4. CONCLUSIONS
This paper describes a fragmentation DoS attack unique to
protocols such as IKE that run on top of UDP and require
sending large packets. Applications that run on top of TCP can
defend against the attack in more straightforward ways. The
paper presents
for defense against a
fragmentation DoS attack by UDP-based protocols such as
IKE. The proposed defenses are:
strategies
several
•
•
•
•
•
designing the protocol so that messages are small enough
not to require fragmentation until a cookie is verified, and
having IKE pass to the IP reassembly process a list of
preferred IP addresses (those that have returned a valid
cookie).
designing the protocol so that the cookie is in the first
fragment, and changing the API so that IP can pass the
first fragment of an unreassembled IP packet to a process,
if the process requests. Then, once IKE has verified the
cookie in the first
inform the
reassembly process to add the IP address from which the
fragment was received to its preferred list.
IKE will
fragment,
designing IKE to do its own MTU discovery and
fragmentation, so as not to depend on IP reassembly
putting cookies into a new IP option, and having IKE pass
the cookie-verification algorithm to IP, which will verify
all fragments carrying that option
having IKE pass the cookie-verification algorithm to IP,
as well as the cookie to be carried in the packet identifier
field in the IP header.
Additional subtleties, such as the desirability of keeping an IP
address on the preferred list for as short a time as possible, are
also explained.
We prefer either of the first two defense strategies. Although
they require layer violation, it is simple to implement and does
not put undue burden on IP. The first strategy is a simpler API
change than the 2nd since the first only requires having IKE
pass preferred IP addresses to IP, and the 2nd additionally
requires having IP pass up first fragments of unfragmented
packets.
require a much more difficult
The strategies that require IP to verify cookies (the last two
defenses)
interface, and
especially the final proposed defense presents an undo burden
on IP because it requires cryptographic verification of the
packet identifier on every fragment, even those that do not
belong to IKE packets. The third defense (designing IKE to do
its own MTU discovery), has the advantage of not changing
the API, but does require a more complex IKE.
Ultimately, the IPsec WG chose the IKEv2 variant with the
extra round trip, due to its being more amenable to
incorporating legacy authentication,
its
simplicity. That decision alone does not mean that IKEv2
implementations will be invulnerable to the fragmentation
and because of
attack, since defense requires the additional implementation
mechanism. However,
it does enable implementations to
implement
if
fragmentation attacks start being seen in the wild.
the first defense suggested in this paper,
5. ACKNOWLEDGMENTS
Eric Rescorla was particularly helpful in reading several drafts
of this paper, and offering suggestions.
6. REFERENCES
[1] Aiello, W., Bellovin, S., Blaze, M., Canetti, R., Ioannidis, J.,
Keromytis, A., Reingold, O., “Just Fast Keying (JFK)”, draft-
ietf-ipsec-jfk-00.txt, Nov 2001.
[2] Aiello, W., Bellovin, S., Blaze, M., Canetti, R., Ioannidis, J.,
Keromytis, A., Reingold, O., draft-ietf-ipsec-jfk-03, April
2002.
[3] Harkins, D., and Carrel, D., “The Internet Key Exchange
(IKE)”, RFC 2409, November 1998.
[4] Harkins, D., Kaufman, C., and Perlman, R., “The Internet
Key Exchange (IKE) Protocol, draft-ietf-ipsec-ikev2-00.txt,
Nov 2001.
[5] Harkins, D., Kaufman, C., Kent, S., Kivinen, T., and Perlman,
R., “The Internet Key Exchange (IKE) Protocol, draft-ietf-
ipsec-ikev2-01.txt, Feb 2002.
[6] Harkins, D., Kaufman, C., Kent, S., Kivinen, T., and Perlman,
R., “Design Rationale for IKEv2, draft-ietf-ipsec-ikev2-
rationale-00.txt, Feb 2002.
[7] Leiwo, J., Nikander, P., and Aura, T., “Towards network
denial of service resistant protocol. In Proceedings of the 15th
International Information Security Conference (IFIP/SEC),
August 2000.
[8] Karn, P., “The Photuris Key Management Protocol”, internet
draft draft-karn-photuris-00.txt, December 1994.
[9] Kent C., and Mogul, J, “Fragmentation Considered Harmful”,
ACM SIGCOMM, 1987.
[10] Mogul, J. and S. Deering, "Path MTU discovery", RFC 1191,
November 1990.
[11] Orman, H., “The OAKLEY Key Determination Protocol”,
RFC 2412, November, 1998.
[12] Perlman, R., and Kaufman, C., “Key Exchange in IPsec:
Analysis of IKE”, IEEE Internet Computing, Nov/Dec 2000.
[13] Perlman, R., and Kaufman, C., “Analysis of the IPsec key
exchange Standard”, WET-ICE Security Conference, MIT,
2001, http://sec.femto.org/wetice-2001/papers/radia-
paper.pdf.
[14] Simpson, W. A.: “Photuris: Design Criteria”, Selected Areas
in Cryptography 1999: 226-242
[15] Simpson, W. A., “IKE/ISAKMP Considered Harmful”,
Usenix ;login, December 1999, Volume 24, Number 6.