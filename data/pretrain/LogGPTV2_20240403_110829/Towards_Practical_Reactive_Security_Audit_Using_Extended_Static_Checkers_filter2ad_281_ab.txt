### When Using HAVOC-LITE with Property and Candidate Annotations

When a user runs HAVOC-LITE with property and candidate annotations, the tool infers two additional annotations:
- The `func_use_vfield` method has a precondition: `__requires(v->vt == (VT_BYREF | VT_UI1))`.
- The `func_set_vt` method has a postcondition: `__ensures(v->vt == (VT_BYREF | VT_UI1))`.

These inferred annotations allow the tool to identify and report only the true error, which in this case is the `t1bad` method. Although it may be simpler to manually write these two additional annotations for this simple example, the automatic inference becomes immensely valuable when dealing with modules that contain several thousand deeply nested procedures.

### Example 2: Object-Oriented Reasoning

A second example involves the `IUnknown` interface class, which is responsible for all reference counting mechanisms necessary to maintain object consistency in COM applications. In this example, the `A::Action` method calls `QueryInterface`, which retrieves an instance of the interface given an input interface identifier. This call implicitly invokes `AddRef`, increasing the reference counter for the interface. If the call is successful (i.e., the return status is `S_OK`), the `WebAction` method is called to perform the expected operation on class `B`. If the call fails, the program terminates early, and the `IUnknown` interface pointer is released using the `ReleaseInterface` method, which decrements the reference count (provided the interface pointer is non-NULL).

A security vulnerability exists in this example due to the lack of NULL initialization of the `IWebIface` pointer. This can lead to corruption of the reference counter at an unknown location in the program if the `QueryInterface` call is not successful. Accurate object-oriented awareness from the static checker is required to detect such vulnerabilities. HAVOC-LITE was used to uncover multiple similar security vulnerabilities in a critical browser component.

To model this property, the user can introduce a ghost field `Queried` in every object. This ghost field tracks whether an object has been created by a successful call to `QueryInterface`. The value of the ghost field for an object `x` is written as `__resource("Queried", x)`. A precondition for the `Release` methods of class `B` and its derived classes can be written as:

```c
#define QUERIED(x) __resource("Queried", x) == 1
__requires(QUERIED(this))
ULONG B::Release();
```

This indicates that the receiver object of the `Release` method must have been created by an earlier call to `QueryInterface`. The corresponding postcondition for the `QueryInterface` method is:

```c
__ensures(__return != S_OK || QUERIED(*p))
HRESULT B::QueryInterface(IID id, void **p);
```

Here, `__return` denotes the return value of the procedure. Additionally, the following annotation needs to be inferred:

```c
__requires(i == NULL || QUERIED(i))
void ReleaseIface(IUnknown *i);
```

This can be achieved by first populating candidate annotations on all methods that consume an `IUnknown` argument, and then performing inter-procedural annotation inference.

### Background: HAVOC

HAVOC is an extended static checker for C programs, similar to ESC/Java. It provides:
- An extensible property checker with an annotation/contract language.
- A modular verifier that accurately depicts C semantics.
- A user-guided inter-procedural annotation inference engine.
- Various instrumentation primitives.

The overall usage model of HAVOC (and HAVOC-LITE) is shown in Figure 4. The key components are briefly described below, with more details available in earlier work [2].

#### Contract Language

Users can document contracts about the code using an annotation language. There are four types of assertions:
- Assertions: `__assert(e)`
- Assumptions: `__assume(e)`
- Preconditions: `__requires(e)`
- Postconditions: `__ensures(e)`

Here, `e` is a side-effect-free C expression that evaluates to a scalar or pointer value. For example, `__ensures(*x == y->f)` indicates that on exit from a procedure, the value obtained by dereferencing `x` is identical to the value stored in the field `f` inside the structure pointed to by `y`.

In addition to assertions, users can specify a `__modifies` clause to indicate which part of the heap is modified by a procedure. HAVOC also supports loop invariants, although they are not discussed in this paper.

#### Modular Verifier

An annotated BoogiePL program is checked for correctness one procedure at a time by the Boogie program verifier. The verifier uses verification condition generation and automated theorem proving (SMT solvers) to check the satisfiability of the formula. HAVOC lifts intraprocedural counterexamples at the BoogiePL level to display over the C source code. The ability of Boogie to generate compact verifications is key to HAVOC's scalability compared to tools that use symbolic execution-based path enumeration.

#### User-Guided Inference

HAVOC uses a variant of the Houdini algorithm for inter-procedural annotation inference. Users can write candidate preconditions (`__cand_requires(e)`) and postconditions (`__cand_ensures(e)`) in addition to the usual annotations. The Houdini algorithm performs an inter-procedural greatest fix-point analysis to retain the maximum subset of these candidates that can be proved modularly, while assuming the non-candidate annotations. The process terminates in at most \( n \times c \) iterations, where \( n \) is the total number of procedures and \( c \) is the total number of candidate annotations. In practice, it runs almost linearly in \( c \), ensuring quick turnaround.

#### Instrumentations

Various syntax-based instrumentation facilities are provided to avoid manually writing annotations on large codebases. For example, users can instrument all procedures whose names match a regular expression with a postcondition on globals, or instrument all procedures that take a parameter `x` of type `Ï„*` with a precondition parameterized by `x`. These annotations can include candidate annotations, which is crucial for performing the annotation inference. Users can also instrument reads and writes to specific fields, types, or globals to insert assertions or assumptions before or after the source line.

### HAVOC-LITE

Although HAVOC had been applied to large Windows source modules, it lacked usability and applicability for the codebases under investigation. The principal limitations addressed in HAVOC-LITE are:
- Modeling common C++ language constructs.
- Augmenting instrumentation mechanisms to exploit C++ class structure.
- Scaling annotation inference to modules containing hundreds of thousands of procedures.
- Other usability concerns, such as the need to modify source code to insert annotations.

In making the tool more robust, some features from HAVOC were dropped, such as checking type-safety of C programs, using fine-grained modifies clauses, and dealing with linked list invariants.