While trying to benchmark JuMP solvers on M1, we found that JuMP requires a
compiler feature that is apparently not available on aarch64:
    $ julia --project=. bench.jl 
    ERROR: LoadError: cfunction: closures are not supported on this platform
    Stacktrace:
      [1] _set_callback
        @ ~/.julia/dev/GLPK/src/MOI_wrapper/MOI_wrapper.jl:259 [inlined]
      [2] empty!(model::GLPK.Optimizer)
        @ GLPK ~/.julia/dev/GLPK/src/MOI_wrapper/MOI_wrapper.jl:290
      [3] GLPK.Optimizer(; want_infeasibility_certificates::Bool, method::GLPK.MethodEnum, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
        @ GLPK ~/.julia/dev/GLPK/src/MOI_wrapper/MOI_wrapper.jl:206
      [4] Optimizer
        @ ~/.julia/dev/GLPK/src/MOI_wrapper/MOI_wrapper.jl:171 [inlined]
      [5] _instantiate_and_check(optimizer_constructor::Type{GLPK.Optimizer})
        @ MathOptInterface ~/.julia/packages/MathOptInterface/YDdD3/src/instantiate.jl:62
      [6] instantiate(optimizer_constructor::Type; with_bridge_type::Type{Float64}, with_names::Bool)
        @ MathOptInterface ~/.julia/packages/MathOptInterface/YDdD3/src/instantiate.jl:120
      [7] set_optimizer(model::Model, optimizer_constructor::Type; bridge_constraints::Bool)
        @ JuMP ~/.julia/packages/JuMP/klrjG/src/optimizer_interface.jl:109
      [8] Model(optimizer_factory::Type; bridge_constraints::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
        @ JuMP ~/.julia/packages/JuMP/klrjG/src/JuMP.jl:287
      [9] Model
        @ ~/.julia/packages/JuMP/klrjG/src/JuMP.jl:286 [inlined]
     [10] example_factory_schedule(factory::Type)
        @ Main ~/mlp_bench/bench.jl:557
     [11] top-level scope
        @ ~/mlp_bench/bench.jl:605
    in expression starting at /Users/sabae/mlp_bench/bench.jl:602
The relevant code can be found here: https://github.com/jump-
dev/GLPK.jl/blob/ebc73abbf0c8352c0509932aa1ad57a69716a2e6/src/MOI_wrapper/MOI_wrapper.jl#L242-L259
Reading through the docs, it appears this is advertised, but since such a
prominent package uses them internally, it seems like we might want to see if
there's a workaround we can use.