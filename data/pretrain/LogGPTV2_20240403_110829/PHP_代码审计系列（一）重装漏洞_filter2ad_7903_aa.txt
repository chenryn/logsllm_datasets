# PHP 代码审计系列（一）重装漏洞
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
系统学习审计也有很长一段时间了，打算把期间复现的漏洞和各种知识做一些梳理，算是一个审计系列，希望能帮助到初学者入门。
这次说的重装漏洞在早年有很多，原因大多数是判断是否安装的部分写得不严谨，而到了现在以结合其他漏洞存在导致 RCE
的占多数，因为任意删除文件导致的是最常见的。
总之，如有不当，烦请评论捉虫，我会在第一时间响应并评论提示错误，谢谢。
## 重装漏洞的种类
1.自动删除这个安装文件
通过生成一个 lock 文件来判断程序是否安装过。
2.根本无验证
安装完成后不会自动删除文件，又不会生成 lock 判断是否安装过。
3.安装file
直接用 GET 提交 step 绕过，直接进入下一步。
如果安装过程中存在多个页面，而且在第一个页面存在判断是否安装，可以通过直接访问后面的页面进行重装。
说白了就是安装步骤中所有页面并非都经过了 lock 文件的验证，可以直接访问。
4.变量覆盖导致重装
可以 GET，POST，COOKIE 任意提交一个变量名 insLockfile ，给其赋空值，覆盖掉​ insLockfile ，从而让
file_exists 为 false 就不会退出。
5.判断 lock 后，无exit
判断是否存在 lock 文件，如果存在 lock 文件，就会 header 到 index.php ，但是 header 后并没有 exit
，所以并不会退出，类似的还有 javascript 弹个框。
6.解析漏洞
在安装完成后会将 install.php 重命名为 index.php.bak ，但是由于 Apache
的解析漏洞：如果无法识别到最后一个后缀的话，就会向上解析，那么就又变成了 php 了，然后结合安装时的变量覆盖又成重装了。
7.满足一些条件不会退出的
上述都是某牛课程里的总结，但我觉得太散了不够泛，我个人觉得精简成下面这样更好理解，每个附加了几个案例方便实践，有的在下面漏洞复现会提到：
1.没有 lock 文件验证
2.有 lock 文件验证
(1) 没有 exit 只用了 header 重定向 / 满足一些条件没有结束进程（比如虽然有 exit 但并不影响其他页面）。
这种可以通过安装过程中填写信息闭合写入配置文件利用。
(2) 安装步骤的所有页面并非都进行了 lock 文件验证，也就是验证缺陷。
这种可以直接跳步骤来利用。
CVE-2019-16314 indexhibit cms v2.1.5 重装漏洞就是这个原因。
(3) 组合拳导致重装，也就是上面两种都有，且严格，但可以通过其他漏洞删除 lock 文件 / 修改（如果是判断 lock 文件内容 / 某个 lock
相关变量）重装。
DedeCMS v5.7 的重装漏洞就是属于判断 lock 相关的一个变量，可以通过变量覆盖加解析漏洞组合来重装。
而 iWebShop v5.9.21010 则是通过任意删除文件从而删除了 lock 文件来重装。
## 漏洞复现
以下复现了五个漏洞，由浅入深，由易到难，都是我认为比较具有代表性的，作为一个集锦以供大家参考。
前三个仅作为学习参考，现在比较少见了，后两个是现在普遍有所存在的，利用的好就是高危。
源码[戳我下载](https://blacksun.lanzoui.com/iLZEwvtxeeb)
###  VAuditDemo 重装漏洞
漏洞成因：有 lock 文件验证但无 exit
对应上述种类的第五种，漏洞代码如下：
这里虽然进行了 lock 文件的验证，但在重定向到 index.php 之后并没有结束进程，所以可以在安装页面抓包修改数据作为该 if
语句之后的代码执行，从而导致了重装漏洞。
我们来看安装页面提交的数据部分：
    if ( $_POST ) {
        ...
        $dbhost = $_POST["dbhost"];
        $dbuser = $_POST["dbuser"];
        $dbpass = $_POST["dbpass"];
        $dbname = $_POST["dbname"];
        ...
        // exp;-- -";phpinfo();//
        mysql_query( "CREATE DATABASE $dbname", $con ) or die ( mysql_error() );
        $str_tmp="";
        $str_tmp.="\r\n";
        $str_tmp.="error_reporting(0);\r\n";
        $str_tmp.="\r\n";
        $str_tmp.="if (!file_exists(\$_SERVER[\"DOCUMENT_ROOT\"].'/sys/install.lock')){\r\n\theader(\"Location: /install/install.php\");\r\nexit;\r\n}\r\n";
        $str_tmp.="\r\n";
        $str_tmp.="include_once('../sys/lib.php');\r\n";
        $str_tmp.="\r\n";
        $str_tmp.="\$host=\"$dbhost\"; \r\n";
        $str_tmp.="\$username=\"$dbuser\"; \r\n";
        $str_tmp.="\$password=\"$dbpass\"; \r\n";
        $str_tmp.="\$database=\"$dbname\"; \r\n";
        $str_tmp.="\r\n";
        $str_tmp.="\$conn = mysql_connect(\$host,\$username,\$password);\r\n";
        $str_tmp.="mysql_query('set names utf8',\$conn);\r\n";
        $str_tmp.="mysql_select_db(\$database, \$conn) or die(mysql_error());\r\n";
        $str_tmp.="if (!\$conn)\r\n";
        $str_tmp.="{\r\n";
        $str_tmp.="\tdie('Could not connect: ' . mysql_error());\r\n";
        $str_tmp.="\texit;\r\n";
        $str_tmp.="}\r\n";
        $str_tmp.="\r\n";
        $str_tmp.="session_start();\r\n";
        $str_tmp.="\r\n";
        $str_tmp.=$str_end;
        $fp=fopen( "../sys/config.php", "w" );
        fwrite( $fp, $str_tmp );
        fclose( $fp );
        ...
可以看到 $dbxx 四个参数都没有经过任何过滤就作为 php 文件的一部分拼接到了一起，并且写入了 /sys/config.php 文件当中。
本质上这个文件还是在对是否安装以及数据库连接进行检验。
$dbname 是我们可控且能修改的，对应 payload：
    ;-- -";phpinfo();//
    ps:-- - 是为了注释 sql 语句后面的部分，后面的 - 只是为了突出-- 后的空格，并不必要。
拼接到一起即：
而安装后的 index.php 会包含这个 config.php 文件：
所以可以直接在主页看到 phpinfo 界面，当然也可以拼接一句话木马 getshell 。
利用过程：
payload：
访问主页：
###  zswin v2.6 博客重装漏洞
漏洞成因：可直接进入安装页面验证缺陷 + 无 exit
漏洞在于 Install/Install/Controller/IndexController.class.php 中：
zswin 是 tp 框架，我们可以看到 index 方法对于 lock
文件的验证并没有在控制器的初始化方法中，也就是说即使没有通过验证，也不影响安装，且安装页面没有对 lock 文件的验证，安装后也可访问，就可进行重装。
接下来我们来看执行安装的数据部分：
    public function finish_done() {
            ...
            $this->_show_process('注册创始人帐号');
            //注册创始人帐号
            //修改配置文件
            $auth  = build_auth_key();
            // 这些数据都没有进行过滤检查
            $config_data['DB_TYPE'] = $temp_info['db_type'];
            $config_data['DB_HOST'] = $temp_info['db_host'];
            $config_data['DB_NAME'] = $temp_info['db_name'];
            $config_data['DB_USER'] = $temp_info['db_user'];
            $config_data['DB_PWD'] = $temp_info['db_pass'];
            $config_data['DB_PORT'] = $temp_info['db_port'];
            $config_data['DB_PREFIX'] = $temp_info['db_prefix'];
            $db = Db::getInstance($config_data);
            $config_data['WEB_MD5'] = $auth;
            // write_config 本质就是把 sqldata 下的信息写入配置文件
            $conf     =    write_config($config_data);
            // Install/Install/Common/function.php
            // function write_config($config, $auth){
            //    if(is_array($config)){
            //        //读取配置内容
            //        $conf = file_get_contents(MODULE_PATH . 'sqldata/conf.tpl');
            //        $user = file_get_contents(MODULE_PATH . 'sqldata/user.tpl');
            //        //替换配置项
            //        foreach ($config as $name => $value) {
            //            $conf = str_replace("[{$name}]", $value, $conf);
            //            $user = str_replace("[{$name}]", $value, $user);
            //        }
            //        //写入应用配置文件