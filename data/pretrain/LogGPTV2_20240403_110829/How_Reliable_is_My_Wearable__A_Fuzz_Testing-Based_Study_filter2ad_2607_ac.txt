### Analysis of Crashes and Exceptions in Android Wear Applications

#### Overview
Our study investigates the causes of crashes and exceptions in both built-in and third-party applications on Android Wear (AW) devices. The results highlight that built-in apps are more prone to crashes compared to third-party apps, with a significant number of crashes attributed to `NullPointerExceptions` and `ClassNotFoundExceptions`.

#### Crash Analysis
**Figure 4** presents the exceptions causing crashes, categorized by built-in and third-party applications. The percentage is calculated based on the combined data from both application classes. Notably, built-in apps experienced crashes at a higher rate (64%) than third-party apps (46%). These failures often occurred in core AW components designed for tracking workout activities, such as Google Fit and Motorola Body.

During our fuzzing campaigns, the system restarted twice due to these crashes. Our empirical findings indicate that:

- **Built-in Apps**: Crashed at a higher rate (64%).
- **Third-Party Apps**: Crashed at a lower rate (46%).

#### Distribution of Behaviors Among Fuzz Intent Campaigns
The distribution of behaviors among fuzz intent campaigns is summarized in **Table III**. The table categorizes the actions and data into four types: Semi-valid, Blank, Random, and Random Extra. The health and non-health categories further break down the distribution.

**Table III: DISTRIBUTION OF BEHAVIORS AMONG FUZZ INTENT CAMPAIGNS**

| Category | A: Semi-valid | B: Blank | C: Random | D: Random Extra |
|----------|---------------|----------|-----------|------------------|
| Health   | 8%            | 0%       | 0%        | 0%               |
| Reboot   | 0%            | 0%       | 0%        | 3%               |
| Not Health | 23%         | 31%      | 31%       | 15%              |

#### Distribution of Crashes by Exception Type
**Table IV** details the distribution of crashes on an Android phone, broken down by exception type. "Others" include exceptions that caused fewer than five crashes.

**Table IV: DISTRIBUTION OF CRASHES ON ANDROID PHONE PER EXCEPTION TYPE**

| Exception                             | #Crashes | %     |
|---------------------------------------|----------|-------|
| `java.lang.NullPointerException`     | 54       | 30.9% |
| `java.lang.ClassNotFoundException`    | 46       | 26.3% |
| `java.lang.IllegalArgumentException`  | 31       | 17.7% |
| `java.lang.IllegalStateException`     | 10       | 5.7%  |
| `java.lang.RuntimeException`          | 9        | 5.1%  |
| `android.content.ActivityNotFoundException` | 7       | 4.0%  |
| `java.lang.UnsupportedOperationException` | 6       | 3.4%  |
| Others                                | 12       | 6.9%  |

The primary cause of crashes was `NullPointerException`, followed by `ClassNotFoundException`, `IllegalArgumentException`, and `IllegalStateException`. These results suggest that input validation on Android has improved over the years, with fewer uncaught `NullPointerExceptions` in Android 7.1.1 compared to earlier studies [8].

#### QGJ-UI Results
**Table V** summarizes the results of our UI event injection using QGJ-UI, introduced in Section III-E. We observed two categories: "Crash" and "No effect". Only 0.05% of the injections led to app crashes with semi-valid injections, while no crashes occurred with random injections. Despite 1.5% of the injections leading to exceptions, all were handled. No system crashes were observed during our UI injections.

**Table V: DISTRIBUTION OF EXCEPTIONS AND CRASHES DURING QGJ-UI EXPERIMENTS**

| Experiment | #Injected Events | Exceptions Raised | Crashes |
|------------|------------------|-------------------|---------|
| Semi-valid | 41405            | 1496 (3.6%)       | 615 (1.5%) |
| Random     | 41405            | 22 (0.05%)        | 0 (0%)   |

Compared to QGJ-Master, QGJ-UI showed fewer exceptions and crashes, indicating better resilience to malformed UI events. This can be attributed to:
1. Better input validation at event handlers.
2. Fewer and simpler target components.
3. Robust input validation and sanitization routines in various adb tools.

#### Software Engineering Techniques for Improving Robustness
Based on our results, we recommend three software engineering techniques to improve the robustness of Android Wear apps:

1. **Better Tool Support**: Utilize static analysis tools like the Lint static code inspection tool in Android Studio IDE. Integrating Android Studio with dynamic testing tools like QGJ can further enhance application robustness.
2. **Research on Software Aging**: Investigate software aging and rejuvenation to detect and recover from accumulated errors. Recent work by Cotroneo et al. [14] supports this approach.
3. **Stronger Input Validation**: Ensure stringent input validation, especially for action or category strings, to prevent potential crashes.

#### Related Work
Previous research on Android testing includes security-focused studies and those aimed at improving application robustness. Our work is closest to the JarJarBinks (JJB) tool [8], which uses fuzz injection campaigns to detect exception handling errors in stock Android applications. Our study differs by focusing on Android Wear apps and including UI event injections.

#### Conclusion
Our extensive study on the reliability of Android Wear apps through mutating inter-process communication messages and UI events reveals that while `NullPointerException` handling has improved, other exceptions like `IllegalStateException` remain prevalent. Built-in apps crash more frequently than third-party apps, and software aging and cascading failures can cause device reboots. We propose better IDE support, stronger input validation, and research on software aging to improve the resilience of AW apps.

#### Threats to Validity
1. **Single Device Limitation**: Our study used a single wearable device, potentially missing vendor-specific customizations.
2. **Inter-Device Interactions Ignored**: We focused only on the wearable component, ignoring interactions with mobile devices.
3. **Comparison Scope**: Our comparison with Android error manifestations did not include third-party apps.

Future work will address these concerns.

#### References
[1] Statista, “Statistics & facts on wearable technology,” 2017. [Online]. Available: https://www.statista.com/topics/1556/wearable-technology/
[2] J. Huang, A. Badam, R. Chandra, and E. B. Nightingale, “Weardrive: Fast and energy-efficient storage for wearables.” in USENIX Annual Technical Conference, 2015, pp. 613–625.
[3] R. Liu and F. X. Lin, “Understanding the characteristics of android wear os,” in Mobisys, 2016, pp. 151–164.
[4] A. K. Iannillo, R. Natella, D. Cotroneo, and C. Nita-Rotaru, “Chizpurfle: A gray-box android fuzzer for vendor service customizations,” in ISSRE, 2017.
[5] S. R. Choudhary, A. Gorla, and A. Orso, “Automated test input generation for android: Are we there yet?(e),” in ASE, 2015, pp. 429–440.
[6] A. Machiry, R. Tahiliani, and M. Naik, “Dynodroid: An input generation system for android apps,” in FSE, 2013, pp. 224–234.
[7] Android. UI/Application Exerciser Monkey. [Online]. Available: https://developer.android.com/studio/test/monkey.html
[8] A. K. Maji, F. A. Arshad, S. Bagchi, and J. S. Rellermeyer, “An empirical study of the robustness of inter-component communication in android,” in DSN, 2012, pp. 1–12.
[9] “Qui-Gon Jinn: An Android Wear Benchmarking Tool.” [Online]. Available: https://github.com/ebarsallo/QGJ
[10] R. Sasnauskas and J. Regehr, “Intent fuzzer: crafting intents of death,” in WODA and PERTEA, 2014, pp. 1–5.
[11] Google. (2017) Android developers. gridviewpager. [Online]. Available: https://developer.android.com/reference/android/support/wearable/view/GridViewPager.html
[12] Google. Android developers: Creating custom uis for wear devices. [Online]. Available: https://developer.android.com/training/wearables/ui/index.html
[13] C. Fu and B. G. Ryder, “Exception-chain analysis: Revealing exception handling architecture in java server applications,” in ICSE, 2007, pp. 230–239.
[14] D. Cotroneo, F. Fucci, A. K. Iannillo, R. Natella, and R. Pietrantuono, “Software Aging Analysis of the Android Mobile OS,” in ISSRE, 2016, pp. 478–489.
[15] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android permissions demystified,” in ACM CCS, 2011, pp. 627–638.
[16] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-application communication in android,” in Mobisys. ACM, 2011, pp. 239–252.
[17] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, “Quire: Lightweight provenance for smart phone operating systems.” in USENIX Security Symposium, vol. 31, 2011.
[18] C. Hu and I. Neamtiu, “Automating gui testing for android applications,” in Workshop on Automation of Software Test, 2011, pp. 77–83.
[19] H. Zhang and A. Rountev, “Analysis and testing of notifications in android wear applications,” in ICSE, 2017, pp. 347–357.
[20] H. Huang, S. Zhu, K. Chen, and P. Liu, “From system services freezing to system server shutdown in android: All you need is a loop in an app,” in ACM CCS, 2015, pp. 1236–1247.
[21] R. Liu, L. Jiang, N. Jiang, and F. X. Lin, “Anatomizing system activities on interactive wearable devices,” in APSys, 2015, pp. 1–7.
[22] X. Liu, T. Chen, F. Qian, Z. Guo, F. X. Lin, X. Wang, and K. Chen, “Characterizing smartwatch usage in the wild,” in Mobisys, 2017, pp. 385–398.