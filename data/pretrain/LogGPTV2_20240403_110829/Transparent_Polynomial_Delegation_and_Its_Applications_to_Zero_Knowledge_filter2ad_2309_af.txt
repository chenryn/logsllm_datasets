heavy cryptographic operations, while the scheme in [72] uses
modular exponentiations on the base group of a bilinear map.
In terms of the asymptotic complexity, though the prover time
is claimed to be linear in [72], there is a hidden factor of log |F|
because of the exponentiations. The prover complexity of our
scheme is O(n log n), which is strictly better than O(n log |F|)
ﬁeld operations. Additionally, as explained in Section V-A, our
scheme is on the extension ﬁeld of a Mersenne prime, while
the scheme in [72] is on a 254-bit prime ﬁeld with bilinear
maps, the basic arithmetic of which is slower.
The veriﬁcation time of our zkVPD scheme is also compa-
rable to that of [72]. For n = 220, it takes 12.4ms to validate
the proof in our scheme, and 20.9ms in [72].
The drawback of our scheme is the proof size. As shown in
Figure 1(c), the proof size of our scheme is 30-40× larger than
that of [72]. This is due to the opening of the commitments
using Merkle tree, which is a common disadvantage of all IOP-
based schemes [5], [9], [14]. The proof size of our scheme can
be improved by a factor of log n using the vector commitment
scheme with constant-size proofs in [20], with a compromise
on the prover time. This is left as a future work.
Finally, the scheme in [72] requires a trusted setup phase,
which takes 12.6s for n = 220. We remove the trusted setup
completely in our new scheme.
C. Performance of Virgo
In this section, we present the performance of our ZKP
scheme, Virgo, and compare it with existing ZKP systems.
Methodology. We ﬁrst compare with Libra [70], as our
scheme follows the same framework and replaces the zkVPD
with our new transparent one. We use the open-source imple-
mentation and the layered arithmetic circuits at [4] for all the
benchmarks. The circuits are generated using [63].
We then compare the performance of Virgo to state-of-the-
art transparent ZKP systems: Ligero [5], Bulletproofs [28],
Hyrax [69], Stark [9] and Aurora [14]. We use the open-
source implementations of Hyrax, Bulletproofs and Aurora
at [2] and [3]. As the implementation of Aurora runs on F2192,
we execute the system on a random circuit with the same
number of constraints. For Ligero, as the system is not open-
source, we use the same number reported in [5] on computing
hashes. For Stark, after communicating with the authors, we
obtain numbers for proving the same number of hashes in the
3rd benchmark. The experiments were executed on a server
with 512GB of DDR3 RAM (1.6GHz) and 16 cores (2 threads
per core) at speed of 3.2GHz.
Benchmarks. We evaluate the systems on three benchmarks:
matrix multiplication, image scaling and Merkle tree, which
are used in [69], [70].
• Matrix multiplication: P proves to V that it knows two
matrices whose product equals a public matrix. We evaluate
on different dimensions from 4 × 4 to 256 × 256, and the
size of the circuit is n3.
• Image scaling: It computes a low-resolution image by
scaling from a high-resolution image. We use the classic
Lanczos re-sampling [65] method. It computes each pixel
of the output as the convolution of the input with a slid-
ing window and a kernel function deﬁned as: k(x) =
sinc(x)/sinc(ax), if − a < x < a; k(x) = 0, otherwise,
where a is the scaling parameter and sinc(x) = sin(x)/x.
We evaluate by ﬁxing the window size as 16 × 16 and
increase the image size from 112x112 to 1072x1072.
• Merkle tree: P proves to V that it knows the value of the
leaves of a Merkle tree that computes to a public root
value [19]. We use SHA-256 for the hash function. We
implement it with a ﬂat circuit where each sub-computation
is one instance of the hash function. The consistency of the
input and output of corresponding hashes are then checked
by the circuit. There are 2M − 1 SHA256 invocations for
a Merkle tree with M leaves. We increase the number of
leaves from 16 to 256. The circuit size of each SHA256 is
roughly 219 gates and the size of the largest Merkle tree
instance is around 226 gates.
Comparing to Libra. Figure 2 shows the prover time, ver-
iﬁcation time and proof size of our ZKP system, Virgo, and
compares it with Libra. The prover time of Virgo is 7-10×
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
869
102
101
100
−1
−2
10
10
103
102
101
100
−1
10
24
25
26
27
28
104
105
106
105
104
103
102
101
100
−1
10
21 22 23 24 25 26 27 28
(a) P time: MatMul.
(b) P time: 16x Lanczos
−1
10
−2
10
10
100
−1
−2
−3
10
10
24
25
26
27
28
104
105
106
103
102
101
100
−1
10
−2
10
−3
10
(c) P time: Merkle tree
21 22 23 24 25 26 27 28
(d) V time: MatMul.
(e) V time: 16x Lanczos
(f) V time: Merkle tree
102
101
24
25
26
27
28
(g) Proof size: MatMul.
Libra
Hyrax
103
102
101
103
102
101
100
104
105
106
21 22 23 24 25 26 27 28
(h) Proof size: 16x Lanczos
(i) Proof size: Merkle tree
Bulletproofs
Ligero
Virgo
libSTARK
Aurora
Fig. 2: Comparisons of prover time, proof size and veriﬁcation time between Virgo and existing ZKP systems.
faster than Libra on the ﬁrst two benchmarks, and 3-5× faster
on the third benchmark. The speedup comes from our new
efﬁcient zkVPD. As shown in Section V-B, the prover time of
our zkVPD is already an order of magnitude faster. Moreover,
the GKR protocol for the whole arithmetic circuit must operate
on the same ﬁeld of the zkVPD. In Libra,
it runs on a
254-bit prime ﬁeld matching the base group of the bilinear
map, though the GKR protocol itself is information-theoretic
secure and can execute on smaller ﬁelds. This overhead is
eliminated in Virgo, and both zkVPD and GKR run on our
efﬁcient extension ﬁeld of Mersenne prime, resulting in an
order of magnitude speedup for the whole scheme. It only
takes 53.40s to generate the proof for a circuit of 226 gates.
Our improvement on the third benchmark is slightly less, as
most input and values in the circuit are binary for SHA-256,
which is more friendly to exponentiation used in Libra.
The veriﬁcation time of Virgo is also signiﬁcantly improved
upon Libra, leading to a speedup of 10-30× in the bench-
marks. This is because in Libra, the veriﬁcation time of the
zkVPD for the input layer is similar to that for the masking
polynomials in each layer, both taking O(log C) bilinear
pairings. Thus the overall veriﬁcation time is roughly D times
one instance of zkVPD veriﬁcation. This is not the case in
Virgo. As explained in the optimization in Section IV-B, we
combine all the evaluations into one inner product through
random linear combinations. Therefore, the veriﬁcation time
in Virgo is only around twice of the zkVPD veriﬁcation time,
ranging from 7ms to 50ms in all the benchmarks.
Because of the zkVPD, the proof size of Virgo is larger
than Libra. For example, Virgo generates a proof of 253KB
for Merkle tree with 256 leaves, while the proof size of Libra
is only 90KB. However, the gap is not as big as the zkVPD
schemes themselves in Section V-B, as the proof size of Libra
is dominated by the GKR protocol of the circuit, which is
actually improved by 2× in Virgo because of the smaller ﬁeld.
Finally, Libra requires a one-time trusted setup for the pairing-
based zkVPD, while Virgo is transparent.
Comparing to other transparent ZKP Systems. Table II and
Figure 2 show the comparison between Virgo and state-of-the-
art transparent ZKP systems. As shown in Figure 2, Virgo is
the best among all systems in terms of practical prover time,
which is faster than others by at least an order of magnitude.
The veriﬁcation time of Virgo is also one of the best thanks to
the succinctness of our scheme. It only takes 50ms to verify the
proof of constructing a Merkle tree with 256 leaves, a circuit
of size 226 gates. The veriﬁcation time is competitive to Stark,
and faster than all other systems by 2 orders of magnitude. The
proof size of Virgo is also competitive to other systems. It is
larger than Bulletproofs [28] and is similar to Hyrax, Stark
and Aurora.
In particular, our scheme builds on the univariate sumcheck
proposed in [14]. Compared to the system Aurora, Virgo
signiﬁcantly improves the prover time due to our efﬁcient
ﬁeld and the fact that the univariate sumcheck is only on the
witness, but not on the whole circuit. For the computation
in Figure 2, the witness size is 16× smaller than the circuit
size. E.g., the witness size for one hash is around 214 while
the circuit size is 218. In the largest instance in the ﬁgure, the
witness size is 222 while the circuit size is 226. The veriﬁcation
time is also much faster as we reduce the complexity from
linear to logarithmic. The proof size is similar to Aurora.
Essentially the proof size is the same as that in Aurora on the
same number of constraint as the witness size, plus the size
of the GKR proofs in the zkVPD and for the whole circuit.
6When the circuit is data parallel, the prover time of Hyrax [69] is O(C +
C(cid:3)
) where C(cid:3) is the size of each copy in the data parallel circuit.
log C(cid:3)
Hyrax has the option with proof size O(D log C + nτ ) and veriﬁcation time
O(D log C + n1−τ ) for τ ∈ [0, 1
2 ].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
870
P time
V time
Proof size
Ligero [5]
O(C log C)
√
O(C)
O(
C)
Bulletproofs [28]
O(C)
O(C)
O(log C)
Hyrax6 [69]
√
O(C log C)
√
O(D log C +
O(D log C +
n)
n)
Stark [9]
Aurora [14]
O(C log2 C) O(C log C)
O(log2 C)
O(log2 C)
O(log2 C)
O(C)
Virgo
O(C + n log n)
O(D log C + log2 n)
O(D log C + log2 n)
TABLE II: Performance of transparent ZKP systems. C is the size of the regular circuit with depth D, and n is witness size.
VI. APPLICATIONS
In this section, we discuss several applications of our new
zkVPD and ZKP schemes.
A. Veriﬁable Secret Sharing
Veriﬁable polynomial delegations (or polynomial commit-
ments) are widely used in secret sharing to achieve malicious
security. In Shamir’s secret sharing [62], the secret is embed-
ded as the constant term of a univariate polynomial f (x), and
the shares hold by party i is the evaluation of the polynomial
f (i). To update the shares, in proactive secret sharing [47],
each party generates a random polynomial δ(x) with constant
term 0, and sends the evaluation of the polynomial δ(i) to party
i. To prevent adversaries from changing the secret or sending
inconsistent shares, the random polynomial is committed using
a polynomial commitment scheme together with a proof that
δ(0) = 0, and each evaluation to party i comes with a proof