lidity of proofs—including that each consumable credential
in the environment ∆ is used exactly once—ratiﬁers and
reference monitors use a LolliMon interpreter as a logical
proof checker. For the scenarios that we consider, proofs
that depend on consumable credentials can be generated by
a syntax-driven backward-chaining algorithm (e.g., [9]).
As discussed in Section 4, a ratiﬁer is invoked with a
proof term and a formula M and F . If the proof is valid,
the ratiﬁer then engages in the contract-signing protocol to
ratify the credentials for which it is responsible (assuming
it consents to their use). As such, the contract-signing pro-
tocol and the verifying of proofs by the ratiﬁers account for
the primary additional costs incurred during proof gener-
ation in a distributed proving system such as the one we
use [9]. The LolliMon interpreter that we use for proof ver-
iﬁcation is sufﬁciently fast for the proofs we consider that it
is not a bottleneck, and we do not discuss it further here.
The contract-signing protocol
that we have imple-
mented [29] offers strong properties that make it ideally
suited for our system:
it guarantees atomicity regardless
of the number of ratiﬁers that fail or misbehave (provided
that the trusted third party does not), and it implements an
invisible third party T .5 To achieve these properties, how-
ever, the protocol utilizes signiﬁcant machinery: the proto-
col running among n ratiﬁers involves O(n3) messages in
O(n2) rounds. Each message is accompanied by an efﬁ-
cient non-interactive zero-knowledge proof [16] regarding
its contents, the details of which we omit. The cost of each
zero-knowledge proof in the protocol is dominated by 9
modular exponentiations by the prover, and 12 by the veri-
ﬁer. The form of the ﬁnal contract signature by a ratiﬁer A0,
where F is the content of the credential being ratiﬁed and
M is a proof term describing the derivation of the proof goal
G of the proof of access, is a zero-knowledge proof that an
ElGamal ciphertext [27], if decrypted using T ’s private key,
would yield a particular target plaintext. This proof can be
constructed either by the ratiﬁer A0 who created the cipher-
text or by the trusted third party T ; see Garay et al. [28] for
details.
The common-case latency (i.e., when the third party is
not invoked) of our current prototype as a function of the
number of participating ratiﬁers is shown in Figure 1. In
these tests, each ratiﬁer executed on a separate 2.8 GHz
Pentium 4 computer. The latency of the ratiﬁcation protocol
includes the cost of verifying the correctness of the submit-
ted proof (including the digital signatures on the credentials
contained therein) as well as the creation, veriﬁcation and
5The protocol does not provide abuse freedom, but as noted earlier, this
is not necessary in our use of the protocol.
communication among all ratiﬁers of the non-interactive
zero-knowledge proofs used in the contract signing proto-
col. A typical access-control proof involving consumable
resources would likely depend on at most two consumable
credentials (and a greater number of reusable credentials),
so the ratiﬁcation cost for such a proof would be compar-
atively low; e.g., the sample proofs in Appendix B.1 and
Appendix B.2 each make use of only a single consumable
credential.
A breakdown of the component costs of ratiﬁcation as
measured on each of ﬁve ratiﬁers engaging in a contract-
signing protocol is shown in Figure 2. The ratiﬁcation pro-
tocol we implemented is asymmetric in that certain rati-
ﬁers create and verify more zero-knowledge proofs than
other ratiﬁers; as a consequence, some ratiﬁers spend a
majority of their time waiting to receive messages (Net-
work/Waiting). Other major costs in the ratiﬁcation pro-
tocol are generating the zero-knowledge proofs (ZKP Cre-
ation) communicated between the ratiﬁers, as well as ver-
ifying them (ZKP Veriﬁcation). Note that the cost of
the contract-signing protocol dominates the proof-checking
time of the subgoal F : a proof of F containing 5 reusable
and 5 linear credentials is veriﬁed by each ratiﬁer in approx-
imately 50 ms, with an additional 45 ms required to verify
the validity of the digital certiﬁcates.
The costs shown in Figure 1 are somewhat pronounced
because we implemented the prototype of our contract sign-
ing primarily in Java, with only modular exponentiations
optimized by a native implementation. Transition of the re-
maining cryptographic computations to native implementa-
tions should speed up the implementation even further.
Acknowledgments
We gratefully acknowledge support from the National
Science Foundation grant number CNS-0433540, the Of-
ﬁce of Naval Research (ONR) grant number N00014-04-1-
0724, and the U.S. Army Research Ofﬁce contract number
DAAD19-02-1-0389.
References
[1] M. Abadi. On SDSI’s linked local name spaces. Journal of
Computer Security, 6(1–2):3–21, Oct. 1998.
[2] M. Abadi, M. Burrows, B. Lampson, and G. D. Plotkin.
A calculus for access control in distributed systems. ACM
Transactions on Programming Languages and Systems,
15(4):706–734, Sept. 1993.
[3] M. Abadi, E. Wobber, M. Burrows, and B. Lampson. Au-
thentication in the Taos Operating System. In Proceedings
of the 14th ACM Symposium on Operating System Princi-
ples, pages 256–269, Dec. 1993.
[4] A. W. Appel and E. W. Felten. Proof-carrying authentication.
In Proceedings of the 6th ACM Conference on Computer and
Communications Security, pages 52–62, 1999.
[5] D. Balfanz, D. Dean, and M. Spreitzer. A security infras-
tructure for distributed java applications. In Proceedings of
the 2000 IEEE Symposium on Security and Privacy, pages
15–26, 2000.
[6] L. Bauer. Access Control for the Web via Proof-carrying
Authorization. PhD thesis, Princeton University, Nov. 2003.
[7] L. Bauer, K. D. Bowers, F. Pfenning, and M. K. Reiter. Con-
sumable credentials in logic-based access control. Techni-
cal Report CMU-CyLab-06-002, Carnegie Mellon Univer-
sity, Feb 2006.
[8] L. Bauer, S. Garriss, J. M. McCune, M. K. Reiter, J. Rouse,
and P. Rutenbar. Device-enabled authorization in the Grey
system. In Proceedings of the 8th Information Security Con-
ference, pages 431–445, Sept. 2005.
[9] L. Bauer, S. Garriss, and M. K. Reiter. Distributed prov-
ing in access-control systems.
In Proceedings of the 2005
IEEE Symposium on Security and Privacy, pages 81–95,
May 2005.
[10] L. Bauer, M. A. Schneider, and E. W. Felten. A general and
ﬂexible access-control system for the Web. In Proceedings of
the 11th USENIX Security Symposium, pages 93–108, 2002.
[11] B. Baum-Waidner. Optimistic asynchronous multi-party
contract signing with reduced number of rounds.
In Pro-
ceedings of the 28th International Colloquium on Automata,
Languages and Programming, pages 898–911, 2001.
[12] B. Baum-Waidner and M. Waidner. Round-optimal and
abuse free optimistic multi-party contract signing.
In Pro-
ceedings of the 27th International Colloquium on Automata,
Languages and Programming, pages 524–535, 2000.
[13] M. Bellare, J. Garay, R. Hauser, A. Herzberg, H. Krawczyk,
M. Steiner, G. Tsudik, E. V. Herreweghen, and M. Waidner.
Design, implementation, and deployment of the iKP secure
electronic payment system. IEEE Journal on Selected Areas
in Communications, 18(4):611–627, Apr 2000.
[14] M. Ben-Or, O. Goldreich, S. Micali, and R. L. Rivest. A
IEEE Transactions on
fair protocol for signing contracts.
Information Theory, 36(1):40–46, 1990.
[15] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D. Keromytis.
The KeyNote trust-management system, version 2. Request
For Comments (RFC) 2704, Sept. 1999.
[16] M. Blum, A. DeSantis, S. Micali, and G. Persiano. Non-
interactive zero-knowledge. SIAM Journal of Computing,
20(6):1084–1118, 1991.
[17] D. F. C. Brewer and M. J. Nash. The Chinese wall security
policy. In Proceedings of the IEEE Symposium on Security
and Privacy, pages 206–214, 1989.
[18] M. Burrows, M. Abadi, and R. Needham. A logic of authen-
tication. ACM Transactions on Computer Systems, 8(1):18–
36, 1990.
[19] J. G. Cederquist, R. J. Corin, M. A. C. Dekker, S. Etalle, J. I.
den Hartog, and G. Lenzini. The audit logic: Policy com-
pliance in distributed systems. Technical Report TR-CTIT-
06-33, Centre for Telematics and Information Technology,
University of Twente, 2006.
[20] R. Chadha, S. Kramer, and A. Scedrov. Formal analysis
of multi-party contract signing. In Proceedings of the 17th
IEEE Computer Security Foundations Workshop, pages 266–
279, 2004.
[21] A. H. Chan, Y. Frankel, and Y. Tsiounis. Easy come - easy
go divisible cash. In Advances in Cryptology - Proceedings
of Eurocrypt ’98, pages 561–575, 1998.
[22] D. Chaum. Blind signatures for untraceable payments.
In
Advances in Cryptology, Proceedings of Crypto ’82, pages
199–203. 1983.
[23] D. Chaum. Security without identiﬁcation: Transaction sys-
tems to make big brother obsolete. Communications of the
ACM, 28(10):1030–1044, 1985.
[24] D. Chaum. Online cash checks. In Advances in Cryptology,
Proceedings of Eurocrypt ’89, pages 288–293, 1990.
[25] D. Chaum, A. Fiat, and M. Naor. Untraceable electronic
cash. In Advances in Cryptology, Proceedings of Crypto ’88,
pages 319–327, 1990.
[26] D. E. Clarke, J.-E. Elien, C. M. Ellison, M. Fredette,
A. Morcos, and R. L. Rivest. Certiﬁcate chain discovery
in SPKI/SDSI. Journal of Computer Security, 9(4):285–322,
2001.
[27] T. ElGamal. A public key cryptosystem and a signature
scheme based on discrete logarithm. IEEE Transactions on
Information Theory, 31:465–472, 1985.
[28] J. A. Garay, M. Jakobsson, and P. MacKenzie. Abuse-free
optimistic contract signing. In Advances in Cryptology, Pro-
ceedings of Crypto ’99, pages 449–466, 1999.
[29] J. A. Garay and P. D. MacKenzie. Abuse-free multi-
party contract signing.
In Proceedings of the 13th Inter-
national Symposium on Distributed Computing, pages 151–
165, 1999.
[30] D. Garg, L. Bauer, K. D. Bowers, F. Pfenning, and M. K.
Reiter. A linear logic of authorization and knowledge.
In
Proceedings of the 11th European Symposium on Research
in Computer Security, pages 297–312, Sept. 2006.
[31] D. Garg and F. Pfenning. Non-interference in constructive
authorization logic. In Proceedings of the 19th IEEE Com-
puter Security Foundations Workshop, pages 283–296, 2006.
[32] J.-Y. Girard. Linear logic. Theoretical Computer Science,
50:1–102, 1987.
[33] J. Y. Halpern and R. van der Meyden. A logic for SDSI’s
linked local name spaces. In Proceedings of the 12th IEEE
Computer Security Foundations Workshop, pages 111–122,
June 1999.
[34] J. Y. Halpern and R. van der Meyden. A logical reconstruc-
In Proceedings of the 14th IEEE Computer
tion of SPKI.
Security Foundations Workshop, pages 59 – 70, 2001.
[35] J. Y. Halpern and V. Weissman. Using ﬁrst-order logic to
reason about policies. In Proceedings of the 16th IEEE Com-
puter Security Foundations Workshop, pages 187 – 201, June
2003.
[36] J. Howell. Naming and sharing resources across administra-
tive boundaries. PhD thesis, Dartmouth College, May 2000.
[37] J. Howell and D. Kotz. A formal semantics for SPKI.
In
Proceedings of the 6th European Symposium on Research in
Computer Security, pages 140–158, 2000.
[38] B. Lampson, M. Abadi, M. Burrows, and E. Wobber. Au-
thentication in distributed systems: Theory and practice.
ACM Transactions on Computer Systems, 10(4):265–310,
Nov. 1992.
[39] N. Li, B. N. Grosof, and J. Feigenbaum. Delegation
logic: a logic-based approach to distributed authorization.
ACM Transactions on Information and Systems Security,
6(1):128–171, Feb. 2003.
[40] N. Li and J. C. Mitchell. Understanding SPKI/SDSI using
ﬁrst-order logic. In Proceedings of the 16th IEEE Computer
Security Foundations Workshop, pages 89–103, June 2003.
[41] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a
role-based trust management framework. In Proceedings of
the 2002 IEEE Symposium on Security and Privacy, pages
114–130, May 2002.
[42] P. L´opez, F. Pfenning, J. Polakow, and K. Watkins. Monadic
concurrent linear logic programming. In Proceedings of the
7th International Symposium on Principles and Practice of
Declarative Programming, pages 35–46, July 2005.
[43] G. C. Necula. Proof-carrying code.
In Proceedings of the
24th ACM Symposium on Principles of Programming Lan-
guages, pages 106–119, Jan. 1997.
[44] T. Okamoto and K. Ohta. Universal electronic cash. In Ad-
vances in Cryptoloty, Proceedings of Crypto ’91, pages 324–
337. 1992.
[45] B. Pﬁtzmann and M. Waidner. How to break and repair a
“provably secure” untraceable payment system. In Advances
in Cryptoloty, Proceedings of Crypto ’91, pages 338–350.
1992.
[46] SET Secure Electronic Transaction LLC. The SET Standard
Speciﬁcation, May 1997.
[47] D. R. Simon. Anonymous communication and anonymous
cash. In Advances in Cryptology, Proceedings of Crypto ’96,
pages 61–73, 1996.
[48] M. Sirbu and J. D. Tygar. Netbill: An internet commerce
system optimized for network delivered services.
In Pro-
ceedings of the 40th IEEE Computer Society International
Conference, pages 20 – 25, 1995.
[49] H. Tewari, D. O’Mahony, and M. Peirce. Reusable off-line
electronic cash using secret splitting. Technical report, Trin-
ity College, 1998.
Principals
Propositions
Categorical Judgments
Unrestricted context
Linear context
Conclusions
Hypothetical judgment
A
F, G ::= action(U, P, N ) | A says F | . . .
J ::= F true | F valid | A aﬃrms F | A signed F
| A signedA0 F
Γ ::= · | Γ, F valid | Γ, A signed F
∆ ::= · | ∆, F true | ∆, A signedA0 F | ∆, A signed F
γ
::= F true | A aﬃrms F
Γ; ∆ ` γ
Γ; F true ` F true
(hyp)
Γ, F valid; ∆, F true ` G true
Γ, F valid; ∆ ` G true
(copy)
Γ, A signed F ; ∆, A signed F ` G true
Γ, A signed F ; ∆ ` G true
(copy0)
Γ; ∆ ` F true
Γ; ∆ ` A aﬃrms F
(aﬀ )
Γ; ∆ ` A aﬃrms F
Γ; ∆ ` (A says F ) true
(saysR)
Γ; ∆, F true ` A aﬃrms G