Symposium. 689–706.
Hijacking and Interception in the Internet. (2007), 265–276 pages.
https://doi.org/10.1145/1282380.1282411
[10] Hitesh Ballani, Paul Francis, and Xinyang Zhang. 2007. A Study of Prefix
[11] E. Barker and A. Roginsky. 2011. Transitions: Recommendation for transitioning
the use of cryptographic algorithms and key lengths. NIST Special Publication.
(2011).
[12] David Basin, Cas Cremers, Tiffany Hyuni-jin, Adrian Perrig, Ralf Sasse, and
Pawel Szalachowski. 2016. Design, Analysis, and Implementation of ARPKI: an
Attack-Resilient Public-Key Infrastructure. IEEE Transactions on Dependable and
Secure Computing (2016).
[13] Henry Birge-Lee, Yixin Sun, Annie Edmundson, Jennifer Rexford, and Prateek
Mittal. 2017. Using BGP to acquire bogus TLS certificates. HotPETSâĂŹ17 (2017).
[14] CAIDA. [n. d.]. Anonymized Internet Traces Dataset. ([n. d.]).
[15] Vincent Cheval, Mark Ryan, and Jiangshan Yu. 2014. DTKI: a new formalized
[16] Taejoong Chung, Roland van Rijswijk-Deij, Balakrishnan Chandrasekaran,
PKI with no trusted parties. arXiv preprint arXiv:1408.1023 (2014).
David Choffnes, Dave Levin, Bruce M Maggs, Alan Mislove, and Christo Wilson.
2017. A longitudinal, end-to-end view of the DNSSEC ecosystem. In USENIX
Security.
[17] Tianxiang Dai, Haya Shulman, and Michael Waidner. 2016. DNSSEC
Misconfigurations in Popular Domains. In International Conference on
Cryptology and Network Security. Springer, 651–660.
https://www.internetsociety.org/blog/2014/09/email-hijacking-new-research-
shows-why-we-need-dnssec-now/. (2014).
[18] Deploy260. 2014. Email Hijacking.
[19] Danny Dolev, Cynthia Dwork, Orli Waarts, and Moti Yung. 1993. Perfectly
Secure Message Transmission. J. ACM 40, 1 (Jan. 1993), 17–47.
https://doi.org/10.1145/138027.138036
[20] Zakir Durumeric, Eric Wustrow, and J Alex Halderman. 2013. ZMap: Fast
Internet-wide Scanning and Its Security Applications.. In USENIX Security
Symposium, Vol. 8. 47–53.
secure. Electronic Frontier Foundation 18 (2011).
[21] Peter Eckersley. 2011. Sovereign keys: A proposal to make https and email more
(2010).
[22] P. Eckersley and J. Burns. 2010. An observatory for the SSLiverse. DEFCON’18.
[23] Hongyu Gao, Vinod Yegneswaran, Yan Chen, Phillip Porras, Shalini Ghosh, Jian
Jiang, and Haixin Duan. 2013. An empirical reexamination of global DNS
behavior. In Proceedings of the ACM SIGCOMM 2013 conference on SIGCOMM.
ACM, 267–278.
[24] Yossi Gilad and Amir Herzberg. 2013. Fragmentation Considered Vulnerable.
ACM Transactions on Information and System Security (TISSEC) 15, 4 (April 2013),
16:1–16:31. A preliminary version appeared in WOOT 2011.
[25] Phillipa Gill, Michael Schapira, and Sharon Goldberg. 2011. Let the market drive
deployment: a strategy for transitioning to BGP security. In SIGCOMM,
Srinivasan Keshav, Jörg Liebeherr, John W. Byers, and Jeffrey C. Mogul (Eds.).
ACM, 14–25. http://doi.acm.org/10.1145/2018436.2018439
[26] Phillipa Gill, Michael Schapira, and Sharon Goldberg. 2012. Modeling on
quicksand: Dealing with the scarcity of ground truth in interdomain routing
data. ACM SIGCOMM Computer Communication Review 42, 1 (2012), 40–46.
[27] Matthias Gohring, Haya Shulman, and Michael Waidner. 2018. Path MTU
Discovery Considered Harmful. In 38th IEEE International Conference on
Distributed Computing Systems, ICDCS 2018, Vienna, Austria, July 2-6, 2018.
866–874.
[28] Shuai Hao, Yubao Zhang, Haining Wang, and Angelos Stavrou. 2018. End-Users
Get Maneuvered: Empirical Analysis of Redirection Hijacking in Content
Delivery Networks. In 27th USENIX Security Symposium (USENIX Security 18).
USENIX Association.
[29] Nadia Heninger, Zakir Durumeric, Eric Wustrow, and J Alex Halderman. 2012.
Mining your Ps and Qs: Detection of widespread weak keys in network devices.
In Presented as part of the 21st USENIX Security Symposium (USENIX Security 12).
205–220.
[30] Amir Herzberg and Haya Shulman. 2012. Security of Patched DNS. In Computer
Security - ESORICS 2012 - 17th European Symposium on Research in Computer
Security, Pisa, Italy, September 10-12, 2012. Proceedings. 271–288.
[31] Amir Herzberg and Haya Shulman. 2013. Fragmentation considered poisonous,
or: One-domain-to-rule-them-all. org. In Communications and Network Security
(CNS), 2013 IEEE Conference on. IEEE, 224–232.
[32] Amir Herzberg and Haya Shulman. 2013. Socket Overloading for Fun and Cache
Poisoning. In ACM Annual Computer Security Applications Conference (ACM
ACSAC), New Orleans, Louisiana, U.S., Charles N. Payne Jr. (Ed.).
Resolution. In Computer Security - ESORICS 2013 - 18th European Symposium on
Research in Computer Security, Egham, UK, September 9-13, 2013. Proceedings.
219–236. https://doi.org/10.1007/978-3-642-40203-6_13
[33] Amir Herzberg and Haya Shulman. 2013. Vulnerable Delegation of DNS
[34] Ralph Holz, Lothar Braun, Nils Kammenhuber, and Georg Carle. 2011. The SSL
landscape: a thorough analysis of the x. 509 PKI using active and passive
measurements. In Proceedings of the 2011 ACM SIGCOMM conference on Internet
measurement conference. ACM, 427–444.
[35] Margaret Hu. 2015. Taxonomy of the Snowden Disclosures. Wash & Lee L. Rev.
72 (2015), 1679–1989.
[36] Dan Kaminsky. 2008. It’s the End of the Cache As We Know It. In Black Hat
conference. http://www.blackhat.com/presentations/bh-jp-08/bh-jp-08-
Kaminsky/BlackHat-Japan-08-Kaminsky-DNS08-BlackOps.pdf.
[37] Kernel.org. 2011. Linux Kernel Documentation.
http://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt. (2011).
[38] Tiffany Hyun-Jin Kim, Lin-Shung Huang, Adrian Perring, Collin Jackson, and
[40] Amit Klein, Haya Shulman, and Michael Waidner. 2017. Internet-Wide Study of
[39] Amit Klein, Haya Shulman, and Michael Waidner. 2017. Counting in the Dark:
Virgil Gligor. 2013. Accountable key infrastructure (AKI): a proposal for a
public-key validation infrastructure. In Proceedings of the 22nd international
conference on World Wide Web. ACM, 679–690.
Caches Discovery and Enumeration in the Internet. In The 47th IEEE/IFIP
International Conference on Dependable Systems and Networks (DSN).
DNS Cache Injections. In INFOCOM.
Arbitrary Internet Hosts.. In FOCI.
Technical Report.
[42] Ben Laurie, Adam Langley, and Emilia Kasper. 2013. Certificate transparency.
[43] Kyle Schomp, Tom Callahan, Michael Rabinovich, and Mark Allman. 2013. On
[41] Jeffrey Knockel and Jedidiah R Crandall. 2014. Counting Packets Sent Between
[44] Sharon Goldberg. 2018. The myetherwallet.com hijack and why it’s risky to hold
measuring the client-side DNS infrastructure. In Proceedings of the 2013
conference on Internet measurement conference. ACM, 77–90.
cryptocurrency in a webapp.
https://medium.com/@goldbe/the-myetherwallet-com-hijack-and-why-its-
risky-to-hold-cryptocurrency-in-a-webapp-261131fad278. (2018).
[45] Haya Shulman and Michael Waidner. 2014. Fragmentation Considered Leaking:
Port Inference for DNS Poisoning. In Applied Cryptography and Network Security
(ACNS), Lausanne, Switzerland. Springer.
[46] Haya Shulman and Michael Waidner. 2015. Towards Security of Internet
Naming Infrastructure. In European Symposium on Research in Computer
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2073[47] Haya Shulman and Michael Waidner. 2017. One Key to Sign Them All
Security. Springer, 3–22.
Considered Vulnerable: Evaluation of DNSSEC in the Internet.. In NSDI. 131–144.
[48] Sooel Son and Vitaly Shmatikov. 2010. The hitchhikerâĂŹs guide to DNS cache
poisoning. In Security and Privacy in Communication Networks. Springer,
466–483.
[50] Dan Wendlandt, David G Andersen, and Adrian Perrig. 2008. Perspectives:
[49] Pawel Szalachowski, Stephanos Matsumoto, and Adrian Perrig. 2014. PoliCert:
Secure and flexible TLS certificate management. In Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security. ACM, 406–417.
Improving SSH-style Host Authentication with Multi-Path Probing.. In USENIX
Annual Technical Conference, Vol. 8. 321–334.
Deploying cryptography in Internet-scale systems: A case study on DNSSEC.
Dependable and Secure Computing, IEEE Transactions on 8, 5 (2011), 656–669.
[51] Hao Yang, Eric Osterweil, Dan Massey, Songwu Lu, and Lixia Zhang. 2011.
A PKI AND DNS SECURITY
A.1 Public Key Infrastructure
Public Key Infrastructure (PKI) is a comprehensive system to pro-
vide public-key encryption and digital signature services. It in-
cludes a set of roles, policies and procedures to manage digital
certificates and public-key encryption. It is used when there is a
strict requirement to confirm the identity of parties involved in
the communication or to validate the information transferred. The
basic concept behind PKI is to bind public keys with respective
identities of entities such as persons or organizations. To establish
the binding, an entity should go through a process of registration
and verification at and by a certificate authority (CA). Since there
are different levels of binding, the process may vary, which can
be fully automated or under human supervision. With a complete
process of registration and verification, the CA would conclude
the binding by issuing a certificate, which confirms the identity
of the entity bound with the public key. Registration Authority
(RA) accepts requests for digital certificates and authenticates the
requesting entity. However, they do not actually sign the certificate
that is issued. They would forward the certificate issuing to a CA
after assuring valid and correct registration. After the issuance of a
certificate, CA should publish it so that applications can retrieve it
on behalf of users. Directory systems that are LDAP (Lightweight
Directory Access Protocol)-compliant are believed to be the best
technology for certificate repositories. Directories may be made
publicly available or they may be private to a specific organization.
Prior to each use of a certificate, the revocation status of a certificate
must be checked. As a result, a PKI must incorporate a scalable
certificate revocation system. The CA must securely publish the
status of each certificate, while application software must verify
the revocation information prior to each use of a certificate. Certifi-
cate Revocation List (CRL) is a popular way to maintain revocation
information, which contains a list of digital certificates that have
been revoked. CRLs can be published to a directory system by CAs.
An alternative to CRLs is the certificate validation protocol, On-
line Certificate Status Protocol (OCSP), where a responder answers
queries about the revocation information of a requested certificate.
A.2 Domain Name System (DNS)
Domain Name System (DNS), [RFC1034, RFC1035], is a distributed
database containing mappings for resources (also called resource
records (RRs)), from domain names to different values. The most
popular and widely used mappings, [23], are for IP addresses, repre-
sented by A type RRs, that map a domain name to its IPv4 address,
and name servers, represented by NS type RRs, that map a name
server to domain name. The resource records in DNS correspond to
the different services run by the organisations and networks, e.g.,
hosts, servers, network blocks.
DNS is a client-server protocol, used by the resolvers to re-
trieve RRs stored in the zone files maintained by the name servers.
The resolvers communicate to the name servers using a simple
request-response protocol (typically over UDP); for instance, (ab-
stracting out details) to translate www.foo.bar resolvers locate the
name server ns.foo.bar, authoritative for foo.bar, and obtain
the IP address of the machine hosting the web server of the web-
site www.foo.bar. Resolvers store the DNS records, returned in
responses, in their caches for the duration indicated in the Time To
Live (TTL) field of each record set.
The zones are structured hierarchically, with the root zone at
the first level, Top Level Domains (TLDs) at the second level, and
millions of Second Level Domains (SLDs) at the third level. The IP
addresses of the 13 root servers are provided via the hints file, or
compiled into DNS resolvers software and when a resolver’s cache
is empty, every resolution process starts at the root. According to
the query in the DNS request, the root name server redirects the
resolver, via a referral response type, to a corresponding TLD,
under which the requested resource is located. There are a number
of TLDs types, most notably: country code TLD (ccTLD), which
domains are (typically) assigned to countries, e.g., us, il, de, and
generic TLD (gTLD), whose domains are used by organisations, e.g.,
com, org, and also by US government and military, e.g., gov, mil.
Domains in SLDs can also be used to further delegate subdomains
to other entities, or can be directly managed by the organisations,
e.g., as in the case of ibm.com, google.com.
A.3 DNS Cache Poisoning and Defences
In the course of a DNS cache poisoning attack, the attacker sends
spoofed DNS responses impersonating a real nameserver. The re-
sponses contain malicious DNS records, pointing legitimate services
at incorrect addresses or names. If a victim DNS resolver accepts
and caches the responses, it will redirect the services or clients
using it to incorrect hosts. DNS cache poisoning expose to malware
distribution, credentials theft, and can be leveraged for censorship
[8] or for surveillance [35], as well as for financial gain by cyber
criminals. The poisoned DNS responses are sent from a spoofed IP
address (impersonating a legitimate nameserver) to the victim DNS
resolver. Prior to accepting poisoned responses, the DNS resolvers
validate that the responses contain the same source port and trans-
action identifier (TXID) as were in the corresponding DNS request.
In accordance with the standard best practices [RFC5452] the DNS
resolvers should select source ports and TXIDs at random, hence
spoofing the correct responses, for attackers that do not see the
DNS request packets, is not a simple challenge – the attacker has a
1
232 success chance.
Following Kaminsky’s cache poisoning attack, DNS resolvers
were quickly patched to support challenge-response defences
against cache poisoning. Most existing challenge-response mecha-
nisms, [RFC5452], are ‘patches’, randomising and validating existing
fields in the TCP/IP protocols. We next review standardised and
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2074Figure 12: Selected payloads for cache overwriting; see full list in [40]. Spoofed DNS records are marked in red.
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2075Figure 13: Evaluation of selected payloads against popular DNS software, appliances and public services; see full list in [40].
most commonly used challenge-response authentication mecha-
nisms.
DNS uses a random 16-bit TXID (transaction identifier) field that
associates a DNS response with its corresponding request. DNS
implementations additionally support a random selection of name
servers each time they send a request. The main defence, that makes
poisoning impractical is a (16-bit) source port randomisation recom-
mended in [RFC5452], which together with a TXID result in a search
space containing 232 possible values; a source port identifies the
client side application in requests, and is echoed (as a destination
port) in responses. Specific recommendations for port randomisa-
tion algorithms were recently provided in [RFC6056]. Due to the
significance of port randomisation for preventing off-path attacks,
e.g., cache poisoning and injections into TCP, multiple studies were
conducted to measure support of port randomisation in the Internet,
and it seems that many resolvers adopted port randomisation meth-
ods that were recommended in [RFC6056]. Currently the security of
most DNS resolvers relies on these challenge-response mechanisms.
However, relying only on TXID and source port randomisation is
not believed to be sufficient against cache poisoning.
To mitigate the DNS cache poisoning attacks, the IETF designed
and standardised Domain Name System Security Extensions
(DNSSEC) [RFC4033-RFC4035]. Unfortunately DNSSEC requires
significant changes to the DNS infrastructure as well as to the pro-
tocol, and although proposed and standardised already in 1997,
it is still not widely deployed. The low adoption of DNSSEC in
tandem with the recent wave of cache poisoning vulnerabilities
and evidence for DNS injections in the Internet stimulated efforts
within the operational and research communities to standardise
alternative easy to adopt defences.
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2076