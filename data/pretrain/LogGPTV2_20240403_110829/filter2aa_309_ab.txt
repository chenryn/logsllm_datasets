27
input
 Generation Mifare Classic – Hitag2 traces
 Select Hitag2 cipher and its filter function
 Secret initial Key => input (uid^nT、nR) 
 Output keystream : ks1,ks2,ks3
新的安全议题
- 实验与分析方式
1.纯代数攻击方式
64bits continuous keystream
64bits continuous keystream & α33 HELP 
bits
2.代数攻击+差分攻击
代数 & 差分方程式
代数 & 差分方程式 & α33 HELP bits
28
新的安全议题
- 1. 纯代数攻击分析
 Grain of salt
 ks0, ks1 only
 Mifare Classic
protocol
 ks2,ks3 in practice
29
新的安全议题
-1. 纯代数攻击分析 - Grain of salt 工具
 Grain of salt本身可以产
生crypto1与hitag2两种的
cnf file(下图)
 使用Grain of salt 产生出
来的cnf 档案内容(右图)
30
纯代数攻击分析 - Grain of salt 
Grain of salt 
Crypto1
Hitag2
Solver time
2m43.315s
NA
31
纯代数攻击分析
- Mifare Classic protocol – We generate cnf files
 cnf file rule ：
* Secret Key algebra = 1 ~ 48
1. LFSR
2. Filter Function
3. HELP bits : uid^nt
4. HELP bits：{nR} 
5. HELP bits：ks2 , ks3
(64bits) 
32
纯代数攻击分析 - Mifare Classic protocol
 实验为求取较正确值，因此每⼀项⽬会做3-10次的数据结果，
然后再使用平均值标准差的方式取得⼀个代表性数据，平均
值与表准差的公式如下：
33
平均值
标准差
纯代数攻击分析 - Mifare Classic protocol
34
My cnf 1
Crypto1
Hitag2
Solver time
2m48.226s
NA
Given ks2,ks3 64bits
Hitag2：3万7千多分钟……unsat
 α32 state vs α33 state
35
纯代数攻击分析 - Mifare Classic protocol 
– Give α33 HELP bits
α32
α33
纯代数攻击分析 - Mifare Classic protocol 
– Give α33 HELP bits
 承上条件与实验，
再给⼀些α33 的状
态值当成 HELP bits，
看看是否有帮助或
可加速 for Hitag2
36
纯代数攻击分析 - Mifare Classic protocol 
– Give α33 HELP bits
37
转化成图表比较
纯代数攻击分析 - Mifare Classic protocol 
– Give α33 HELP bits
38
My cnf 2
Crypto1
Hitag2
Solver time
0m34.12s
10m46.935s
纯代数攻击分析 – 比较分析
39
Crypto1
Hitag2
Grain of salt 
2m43.315s
NA
My cnf 1(30 traces)
2m48.226s
NA
My cnf 2(1 trace)
Give α33 HELP bits
0m34.12s
10m46.935s
虽然Hitag2有比较好的防御能力，但是也有机会在容许的时间范围内被解出来
代数差分攻击
for new YY card
1. 首先必须取得特殊的traces
Nt are different, so does {Nr}
2. 定义差分方程式
3. 定义产生CNF的条件
40
代数差分攻击 –取得特殊的trace
 同⼀张卡uid固定，nT能够与fed bit作用被放入state，因此nT可以直接
影响state的状态，nR明文也有此功能，但是nR明文无法直接控制，因此
让差分在nT的第⼀个bit就产生，当nT使用完时两条trace差分为
0x000100000000，之后nR无法精准控制，而state保持fed bit持续为0，
因此必须从keystream来挑选，若ks = ks’ 则可认定state保持仅⼀个bit有
差分.
 特殊nT差分值： 0x87441585 Crypto1 ; 0xe7002260 hitag2 
41
代数差分攻击 – 差分方程式
 差分方程式的产生
 为了保持state 仅1个bit有差分
42
Crypto1
代数差分攻击 – 差分方程式
 差分方程式的产生
 为了保持state 仅1个bit有差分
43
Hitag2
input
 辅助资讯
 设ks差分为已知，可由nR差分求得{nR}差分
44
代数差分攻击 – 差分方程式
dfc
dx15
=
dfc
dfa
dfa
dx15
．
fc( state ) = fc( state + differential )
fc( state ) - fc( state + differential ) = 0
Calculus : Chain rule
Benefit: one variable is gone
代数差分攻击 – 差分方程式
45
4 diff rules
8 diff rules
代数差分攻击 –产生cnf的条件
 CNF file rules ：
* Secret Key algebra = 1 ~ 48
1. LFSR
2. Filter Function
3. HELP bits : uid^nt
4. HELP bits：{nR} 
5. 差分方程式 ： crypto1*4条、Hitag2*8条
46
代数差分攻击 – 实验结果分析
使用不同traces数量做比较分析
约25~35traces左右表现最佳
47
代数差分攻击 – 实验结果分析
48
差距最大拿掉
My cnf 2
Crypto1
Hitag2
Solver time
 300 min
代数差分攻击 – HELP α33 bits
 承上条件下，同样的再给α33的HELP bits，看看结
果如何
 经多次实验观察20与30trace于crypto1和Hitag2会比较有效，
因此本实验使用了20traces和30traces的两种case
 将给予的α33 HELP bit 逐渐减少(from 48 to 1)
49
代数差分攻击 – HELP α33 bits
50
单位 : 秒
My cnf 2
Crypto1
Hitag2
Solver time
大约  1000 sec≒16.6min
代数差分攻击 – HELP α33 bits
51
单位 : 秒
My cnf 2
Crypto1
Hitag2
Solver time
大约  1000 sec≒16.6min
代数差分攻击– 比较分析
52
Crypto1
Hitag2
no α33 HELP _ 30trace
 300 min
HELP α33 _ 
20trace
大约  1000 
sec≒16.6min
HELP α33 _ 
30trace
大约  1000 
sec≒16.6min
虽然Hitag2有比较好的防御能力，但是也有机会在容许的时间范围内被解出来
结论
1. 代数差分攻击抵抗能力：
Hitag2 >> Crypto1
2. 两者间 Filter Function input的Hamming 
distance为13，但实验解的速度并没有增加2
3. 代数差分攻击的确会对Stream Cipher与Mifare 
Classic protocol造成影响
4. 建议停止使用Mifare Classic，并改用其他架构设
计，以免造成更大资的安损失。
53
结论
 Hitag2是⼀个比Crypto1强的cipher，套用上了
Mifare classic protocol，以我们实验结果其安全性
并不很高
 以代数差分攻击⾓度来看，对于两种不⼀样的
stream cipher 都可造成有效的攻击，本攻击证明对
于protocol方面也是有影响的效力
 在未来的研究可以继续讨论是否代数差分攻击可以
针对于所有stream cipher加上任何的protocol有显
著的效果
54
Extra: Non-NIST Ciphers
 Lavabit, TrueCrypt, SilentMail etc
 Close any good (tough) services or companies as you can ?
 The link between NIST and NSA ? RSA and NSA ?
 ECC ?
 AES ?
 SHA-1 ?
 OpenSSL Heartbleed ?
55
Extra: Toward a New Good/Bad World !?
 Prepare for the Good New World ?
 Government cannot censor anymore ?
 Prepare for the Cryptopocalypse ?
 Discrete Logarithm Problem(DLP) is easier than we thought before ?
 Eurocrypt2014 
 A Heuristic Quasi-Polynomial Algorithm for Discrete Logarithm in Finite Fields of Small 
Characteristic
 ECC is ok ?
56
第57页
We must know
We will know
David Hilbert
谢谢聆听
Q and A