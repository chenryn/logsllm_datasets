## Page 182
### Android安全攻防实战

**Properties.java**

- [PackageManager 类](https://developer.android.com/reference/android/content/pm/PackageManager.html) 在 Android 开发者参考指南中。
- [ApplicationInfo 类](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html) 在 Android 开发者参考指南中。

### 5.8 使用 ProGuard 删除所有日志消息

ProGuard 是一个开源的 Java 代码混淆器，它包含在 Android SDK 中。对于不熟悉混淆器的读者，简单解释一下：混淆器会删除代码中所有运行时不需要的信息，如未使用的代码和调试信息，并将易读、描述性强且易于维护的代码转换为优化后的、更短且难以阅读的代码。例如，`SecurityManager.encrypt(String text)` 可能会被优化为 `a.b(String c)`，从而完全隐藏其功能。

通过移除未使用的方法、字段和属性，ProGuard 可以减少代码的整体大小。由于进行了机器级优化，程序执行速度也会更快。这对于移动环境来说非常理想，因为优化显著减小了导出的 .apk 文件的大小，尤其是在仅使用第三方库的一部分时更为明显。

尽管还有其他 Java 混淆器可用，但 ProGuard 作为 Android SDK 的一部分，许多第三方库都自带自定义的 ProGuard 配置，确保它们的功能正常。

#### 准备工作

首先，我们需要在一个 Android 应用中启用 ProGuard。

1. 如果你使用的是 Eclipse 的 Android ADT 插件，进入你的 workspace，切换到包含应用代码的目录。确保以下配置行未被注释：
   ```plaintext
   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
   ```
   假设你的 Android SDK 目录结构是默认的。如果不是，请复制 `proguard-android.txt` 文件到你的项目目录，并进行如下配置：
   ```plaintext
   proguard.config=proguard-android.txt:proguard-project.txt
   ```

2. 对于 Android Studio，需要在 Gradle 构建系统的 `release` 部分添加以下配置：
   ```groovy
   android {
       buildTypes {
           release {
               runProguard true
               proguardFile file('proguard-project.txt')
               proguardFile getDefaultProguardFile('proguard-android.txt')
           }
       }
   }
   ```

3. 确保 `proguard-android.txt` 文件始终位于配置指定的位置，因为它包含了针对 Android 的特定例外规则，没有这些规则，应用可能无法正常运行。例如，以下代码段要求 ProGuard 不要混淆 `AndroidManifest.xml` 文件中处理 `onClick` 事件的方法名：
   ```plaintext
   -keepclassmembers class * extends android.app.Activity {
       public void *(android.view.View);
   }
   ```

#### 如何操作

在项目中启用 ProGuard 后，只需两个步骤即可删除所有日志消息。

1. 创建一个包装类来擦除 Android 日志：
   ```java
   public class LogWrap {
       public static final String TAG = "MyAppTag";
       
       public static void e(final Object obj, final Throwable cause) {
           Log.e(TAG, String.valueOf(obj));
           Log.e(TAG, convertThrowableStackToString(cause));
       }

       public static void e(final Object obj) {
           Log.e(TAG, String.valueOf(obj));
       }

       public static void w(final Object obj, final Throwable cause) {
           Log.w(TAG, String.valueOf(obj));
           Log.w(TAG, convertThrowableStackToString(cause));
       }

       public static void w(final Object obj) {
           Log.w(TAG, String.valueOf(obj));
       }

       public static void i(final Object obj) {
           Log.i(TAG, String.valueOf(obj));
       }

       public static void d(final Object obj) {
           Log.d(TAG, String.valueOf(obj));
       }

       public static void v(final Object obj) {
           Log.v(TAG, String.valueOf(obj));
       }

       public static String convertThrowableStackToString(final Throwable thr) {
           StringWriter sw = new StringWriter();
           thr.printStackTrace(new PrintWriter(sw));
           return sw.toString();
       }
   }
   ```

2. 在应用代码中，使用 `LogWrap` 类代替标准的 `android.util.Log`。例如：
   ```java
   try {
       // 你的代码
   } catch (IOException e) {
       LogWrap.e("Error opening file.", e);
   }
   ```

3. 在项目的 `proguard-project.txt` 文件中插入以下定制的 ProGuard 配置：
   ```plaintext
   -assumenosideeffects class android.util.Log {
       public static boolean isLoggable(java.lang.String, int);
       public static int v(...);
       public static int i(...);
       public static int d(...);
       public static int e(...);
   }
   ```

4. 将优化配置文件添加到项目中并启用 ProGuard 优化：
   ```plaintext
   proguard.config=${sdk.dir}/tools/proguard/proguard-android-optimize.txt:proguard-project.txt
   ```

5. 在 release 模式下构建应用以使用 ProGuard：
   - 使用 Eclipse 的 Android Tools 导出向导。
   - 或者，在终端窗口中切换到项目根目录并运行以下命令：
     - 对于 Ant：`ant release`
     - 对于 Gradle：`gradle assembleRelease`

#### 工作原理

当在 release 模式下构建应用时，构建系统会检查 `proguard.config` 的值（如果未被注释），并在将应用字节码打包进 .apk 文件之前，使用 ProGuard 进行处理。通过 `assumeNoSideEffects` 属性，ProGuard 会完全删除相关代码行—在这个例子中，即 `android.util.Log` 类中的所有方法调用。结合优化配置和日志擦除器，ProGuard 能够安全地识别并删除所有对 `android.util.Log` 类中各个方法的调用。

#### 更多信息

##### ProGuard 输出

以下是将 ProGuard 应用于 Android .apk 文件时生成的输出文件：

- `mapping.txt`：包含混淆后的类、字段名称与原始名称之间的映射关系。当你需要使用 ProGuard 的 ReTrace 工具分析由混淆过的应用生成的堆栈跟踪或错误报告时，必须有这个文件。
- `seeds.txt`：列出未混淆的类和成员。
- `usage.txt`：列出从 .apk 文件中删除的代码。
- `dump.txt`：描述 .apk 文件中所有 .class 文件的内部结构。

##### 局限性

虽然使用 ProGuard 混淆应用可以增加逆向工程、理解和利用漏洞所需的时间和技术水平，但逆向工程仍然可能完成。因此，不能将其视为软件安全的唯一屏障，而应将其作为整体安全解决方案的一部分。

##### 拓展阅读

- [高级代码混淆与 DexGuard](http://developer.android.com/tools/help/proguard.html)
- [ProGuard 官方网站](http://proguard.sourceforge.net/index.htm)
- [ProGuard 示例配置](http://proguard.sourceforge.net/index.html/manual/examples.html)

### 5.9 使用 DexGuard 进行高级代码混淆

DexGuard 是 Eric Lafortune 编写的一个商用优化和混淆工具，类似于 ProGuard，但它还可以混淆 Android 资源和 Dalvik 字节码。与 ProGuard 一样，DexGuard 使开发者能够保持源代码的可维护性和可测试性，同时编译输出经过优化和加固。

通常，使用 DexGuard 可以获得更高的安全性，因为它专门为 Android 优化，并提供了额外的安全特性。在这个实验中，我们将使用其中的两个特性：API 隐藏和字符串加密，应用于上一个实验中编写的签名验证代码。

- **API 隐藏**：使用 API 反射机制隐藏对敏感 API 和代码的调用。如果你需要隐藏关键代码段，这是完美的解决方案。例如，注册码验证代码肯定是破解者的主要目标，因此应该专门加固。反编译时，基于反射机制的调用会极大地增加破解难度。
- **字符串加密**：将源代码中的字符串加密，防止逆向工程人员找到它们。对于 API 密钥或其他硬编码在代码中的常量，这是一个特别有用的功能。

我们使用 API 隐藏功能将指定的调用转换为基于反射机制的调用，这对于隐藏不想让攻击者发现的敏感方法非常有用。此外，我们将使用字符串加密特性进一步加固这些反射字符串，提供一种保护应用中敏感代码段（如篡改检测代码、注册码验证代码和加密/解密代码）的健壮方法。

**注意**：DexGuard 需要开发者许可，请访问 [http://www.saikoa.com/dexguard](http://www.saikoa.com/dexguard) 购买。

#### 准备工作

假设你已经下载了 Android SDK 工具（版本 22 或更高）和 DexGuard，并将它们解压到一个可访问的目录中。在这个例子中，我们使用的 DexGuard 位于 `/Users/user1/dev/lib/DexGuard/` 目录中，基于 DexGuard 5.3 版本。我们将介绍如何将 DexGuard 整合到 Eclipse、Ant 构建系统和 Gradle 构建系统中。

安装完成后，你的应用将获得比 ProGuard 更高的安全级别。此外，我们还将启用一些自定义配置，以保护应用中的敏感部分。

##### 安装 DexGuard 的 Eclipse 插件

1. 将插件 JAR 文件 (`com.saikoa.dexguard.eclipse.adt_22.0.0.v5_3_14.jar`) 从 DexGuard 的 `/eclipse` 目录复制到 Eclipse 安装目录下的 `/dropins` 目录中。
2. 启动或重启 Eclipse 时，DexGuard 插件会自动安装。
3. 如果安装成功，在右键点击 Android 项目时，你会在 Android Tools 菜单中看到一个新的选项：
   - `Export Optimize and Obfuscate Application package (DexGuard)`
4. 你的项目现在可以像往常一样编译并生成 .apk 文件，但在后台，DexGuard 会被用来优化和混淆应用。

##### 在 Ant 构建系统中启用 DexGuard

在 Ant 中启用 DexGuard 很简单，只需在你的 Android 项目的 `local.properties` 文件中指定 DexGuard 所在的目录即可。

1. 如果还没有 `local.properties` 文件，请创建一个，并添加以下内容：
   ```plaintext
   dexguard.dir=/Users/user1/dev/lib/DexGuard/
   ```
2. 将 `Custom_rules.xml` 文件从 DexGuard 目录中的 `ant` 文件夹复制到你的 Android 项目的根目录中。

##### 在 Gradle 构建系统中启用 DexGuard

在 Gradle 构建系统中启用 DexGuard，需要修改你的项目中的 `build.gradle` 文件：
```groovy
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.1'
        classpath 'dexguard:'
    }
}

apply plugin: 'dexguard'

android {
    buildTypes {
        release {
            proguardFile getDefaultDexGuardFile('proguard-android-optimize.txt')
            proguardFile 'proguard-project.txt'
        }
    }
}
```

#### 如何操作

安装完成后，我们可以启用和配置 API 隐藏和字符串加密特性。

1. 在你的 Android 项目的根目录下，创建一个名为 `dexguard-project.txt` 的新文件。
2. 在 DexGuard 中配置要加密的敏感字符串。在这个例子中，我们使用一个普通的模式：固定不变的接口以及之前实验中使用的证书哈希。这些固定值在编译后甚至是 ProGuard 混淆后仍然是可读的。
3. 在 `Constants` 接口中加密指定的字符串：
   ```plaintext
   -encryptstrings interface com.packt.android.security.Constants {
       public static final java.lang.String CERTIFICATE_SHA1;
   }
   ```
   或者你可以加密某个接口或类中的所有字符串。以下是在 `MainActivity.java` 中定义的所有字符串的例子：
   ```plaintext
   -encryptstrings class com.packt.android.security.MainActivity
   ```
4. 作为对“验证应用签名（防篡改）”实验中“局限性”一节的回应，我们将演示一种相应的反制方法，给它再加上一层保护：隐藏调用 `verifyAppSignature` 方法的代码，使攻击者很难分析出到底是哪里的代码在做防篡改验证：
   ```plaintext
   -accessthroughreflection class com.packt.android.security.Tamper {
       boolean verifyAppSignature(Context);
   }
   -accessthroughreflection class android.content.pm.PackageManager {
   }
   ```

这样，你就完成了使用 DexGuard 进行高级代码混淆的设置。