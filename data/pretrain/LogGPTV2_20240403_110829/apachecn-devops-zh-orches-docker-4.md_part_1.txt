# 四、自动化和最佳实践
在这一点上，我们现在知道如何在我们的开发环境中设置 Docker，对 Docker 命令感到满意，并且对 Docker 适合的情况有了一个很好的想法。我们还知道如何配置 Docker 及其容器来满足我们的所有需求。
在这一章中，我们将集中讨论各种使用模式，这些模式将帮助我们在生产环境中部署 web 应用。我们将从 Docker 的远程 API 开始，因为登录到生产服务器并运行命令总是被认为是危险的。因此，最好运行一个应用来监控和编排主机中的容器。Docker 目前有大量的编排工具可用，随着 v1.0 的发布，Docker 还宣布了一个新项目 **libswarm** ，它为管理和编排分布式系统提供了一个标准界面，这将是我们将深入研究的另一个主题。
Docker 开发人员建议每个容器只运行一个进程。如果你想检查一个已经运行的容器，这是很困难的。我们将看一个命令，它允许我们将一个进程注入到一个已经运行的容器中。
随着组织的增长，负载也在增长，您需要开始考虑扩展。Docker 本身意味着在单个主机中使用，但是通过使用大量工具，如`etcd`和`coreos`，您可以轻松地在集群中运行一堆 Docker 主机，并发现该集群中的所有其他容器。
每个在生产环境中运行 web 应用的组织都知道安全性的重要性。在本章中，我们将不仅讨论`docker`守护进程的安全方面，还将讨论 Docker 使用的各种 Linux 特性。总之，在本章中，我们将了解以下内容:
*   远程 API Docker
*   使用 Docker exec 命令将进程注入容器
*   服务发现
*   安全
# Docker 远程 API
Docker 二进制文件既可以作为客户端运行，也可以作为守护进程运行。当 docker 作为守护进程运行时，默认情况下，它会在`unix:///var/run/docker.sock`将自己附加到一个 Unix 套接字上(当然，这可以在启动 Docker 时更改)，并通过 REST 接受命令。然后，相同的 Docker 二进制文件可以用于运行所有其他命令(这只是客户端对`docker`守护程序进行 REST 调用)。
`docker`守护进程的示意图如下所示:
![Docker remote API](img/4787OS_04_04.jpg)
这一部分将主要用例子来解释，因为我们在查看 Docker 命令时已经遇到了这些操作的工作。
要测试这些应用编程接口，请在一个 TCP 端口上运行`docker`守护程序，如下所示:
```
$ export DOCKER_HOST=tcp://0.0.0.0:2375
$ sudo service docker restart
$ export DOCKER_DAEMON=http://127.0.0.1:2375 # or IP of your host
```
### 注
这不是参考指南，因为当我们在[第 2 章](2.html "Chapter 2. Docker CLI and Dockerfile")、 *Docker CLI 和 Dockerfile* 中讨论 Docker 命令时，我们已经介绍了 Docker 可用的特性。相反，我们将覆盖一个精选的几个原料药，你可以在[docs.docker.com/reference/api/docker_remote_api](http://docs.docker.com/reference/api/docker_remote_api)查阅其余的。
在我们开始之前，让我们确保`docker`守护程序正在响应我们的请求:
```
$ curl $DOCKER_DAEMON/_ping
OK
```
好吧，一切都很好。我们走吧。
## 容器远程 API
让我们首先看看有助于创建和管理容器的几个可用端点。
### 创建命令
`create`命令创建一个容器:
```
$ curl \
> -H "Content-Type: application/json" \
> -d '{"Image":"ubuntu:14.04",\
> "Cmd":["echo", "I was started with the API"]}' \
> -X POST $DOCKER_DAEMON/containers/create?\
> name=api_container;
{"Id":"4e145a6a54f9f6bed4840ac730cde6dc93233659e7eafae947efde5caf583f c3","Warnings":null}
```
### 注
`curl`实用程序是一个简单的 Unix 实用程序，可以用来构造 HTTP 请求和分析响应。
在这里，我们向`/containers/create`端点发出`POST`请求，并传递一个`JSON`对象，该对象包含我们希望容器基于的映像细节和我们期望容器运行的命令。
请求类型:开机自检
`JSON`数据随`POST`请求一起发送给:
| 
参数
 | 
类型
 | 
说明
 |
| --- | --- | --- |
| 
```
config
```
 | `JSON` | 描述要启动的容器的配置 |
开机自检请求的查询参数:
| 
参数
 | 
类型
 | 
说明
 |
| --- | --- | --- |
| 
```
name
```
 | `String` | 这个给容器指定一个名称。必须匹配`/?[a-zA-Z0-9_-]+`正则表达式。 |
下表显示了响应的状态代码:
| 
状态代码
 | 
意义
 |
| --- | --- |
| 
```
201
```
 | 没有错误 |
| 
```
404
```
 | 没有这样的容器 |
| 
```
406
```
 | 无法连接(容器未运行) |
| 
```
500
```
 | 内部服务器错误 |
### 列表命令
`list`命令获取容器列表:
```
$ curl $DOCKER_DAEMON/containers/json?all=1\&limit=1
[{"Command":"echo 'I was started with the API'","Created":1407995735,"Id":"96bdce1493715c2ca8940098db04b99e3629 4a333ddacab0e04f62b98f1ec3ae","Image":"ubuntu:14.04","Names":["/api_c ontainer"],"Ports":[],"Status":"Exited (0) 3 minutes ago"}
```
这是一个`GET`请求 API。对`/containers/json`的请求将返回一个包含符合标准的容器列表的`JSON`响应。这里，通过`all`查询参数将列出没有运行的容器。`limit`参数是将在响应中列出的容器数量。
这些 API 调用可以提供查询参数，可以微调响应。
请求类型:获取
| 
参数
 | 
类型
 | 
说明
 |
| --- | --- | --- |
| 
```
all
```
 | 1/ `True` / `true`或 0/ `False` / `false` | 这个告诉是否应该显示所有的容器。默认情况下，只显示正在运行的容器。 |
| 
```
limit
```
 | `Integer` | 此显示最后[ *n* ]个容器，包括非运行容器。 |
| 
```
since
```
 | `Container` `ID` | 此仅显示从[x]开始的容器，包括未运行的容器。 |
| 
```
before
```
 | `Container` `ID` | 这仅显示在[x]之前启动的容器，包括未运行的容器。 |
| 
```
size
```
 | 1/ `True` / `true`或 0/ `False` / `false` | 这个告诉是否应该在响应中显示容器尺寸。 |
响应的状态代码遵循相关**请求******注释** ( **RFC** ) 2616:**
 **  
| 
状态代码
 | 
意义
 |
| --- | --- |
| 
```
200
```
 | 没有错误 |
| 
```
400
```
 | 错误参数和客户端错误 |
| 
```
500
```
 | 服务器错误 |