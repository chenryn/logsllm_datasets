                if (str[0] == '#') {
                    fgetpos(logff[pos].fp, &fp_pos);
                    continue;
                }
        #endif
                debug2("%s: DEBUG: Reading syslog message: '%s'", ARGV0, str);
                /* Send message to queue */
                if (drop_it == 0) {
                    if (SendMSG(logr_queue, str, logff[pos].file,
                                LOCALFILE_MQ) = (OS_MAXSTR - OS_LOG_HEADER - 2)
                    // truncate str before logging to ossec.log
        #define OUTSIZE 4096
                    char buf[OUTSIZE + 1];
                    buf[OUTSIZE] = '\0';
                    snprintf(buf, OUTSIZE, "%s", str);
                    merror("%s: Large message size(length=%d): '%s...'", ARGV0, (int)strlen(str), buf);
                    while (fgets(str, OS_MAXSTR - 2, logff[pos].fp) != NULL) {
                        /* Get the last occurrence of \n */
                        if (strrchr(str, '\n') != NULL) {
                            break;
                        }
                    }
                    __ms = 0;
                }
                fgetpos(logff[pos].fp, &fp_pos);
                continue;
            }
            return (NULL);
        }
#### d.策略推送
我们如果对服务器进行大批量的操作的时候，一个一个ssh上去显然是不现实的，所以这里可以利用Agent做策略推送，诸如修改防火墙策略。其实这里就类似于写一个后门，用Rootkit实现比较靠谱。由于众所周知的原因，这里我就不放代码了。
#### e.Agent存活性检测
如何保证Agent正确运行于服务器上，这里就存在一个Agent存活性检测的问题，OSSEC这里其实提供了monitor_agents()函数用来监控Agent的状态，代码如下：
    void monitor_agents()
        {
            char **cr_agents;
            char **av_agents;
            av_agents = get_agents_with_timeout(GA_ACTIVE, mond.notify_time);
            /* No agent saved */
            if (!mond.agents) {
                mond.agents = av_agents;
                return;
            }
            /* Check if any of the previously available agents are disconnected */
            cr_agents = mond.agents;
            while (*cr_agents) {
                int available = 0;
                char **tmp_av;
                tmp_av = av_agents;
                while (tmp_av && *tmp_av) {
                    if (strcmp(*cr_agents, *tmp_av) == 0) {
                        available = 1;
                        break;
                    }
                    tmp_av++;
                }
                /* Agent disconnected */
                if (available == 0) {
                    char str[OS_SIZE_1024 + 1];
                    /* Send disconnected message */
                    snprintf(str, OS_SIZE_1024 - 1, OS_AG_DISCON, *cr_agents);
                    if (SendMSG(mond.a_queue, str, ARGV0,
                                LOCALFILE_MQ) Hi elknot@360corpsec:"
            content += ""
            content += "Your Server is being attacked by "+ attacker_ip + " "
            content += "Attack Behavior:"
            for i in range(len(attack_behavior)):
                content += "" + attack_behavior[i] + ""
            content += ""
            content += "Attack Concerned:"
            content += "" + yara_rule + ""
            content += ""
            return content
        def mail():
            ret = True
            try:
                text = mail_content()
                msg = MIMEText(text,'html','utf-8')
                msg['From'] = formataddr(['BI Tracker', my_sender])
                msg['To'] = formataddr(['elknot@360corpsec', my_user])
                msg['Subject'] = 'HoneyPot is over Attacked!'
                print msg
                smtp = smtplib.SMTP(smtp_host, smtp_port)
                smtp.set_debuglevel(True)
                smtp.starttls()
                smtp.login(my_sender, sender_password)
                smtp.sendmail(my_sender, my_user, msg.as_string())
                smtp.close()
            except smtplib.SMTPException as e:
                print e
                ret = False
            return ret
        ret = mail()
        if ret:
            print("ok")
        else:
            print("failed")
这样就完成了一个简单的邮件通知，这里需要注意邮件服务配置的问题，防止敏感信息泄露。比如下面这个图，其实这个是自己弄的一个基于Agent+Server模式的蜜罐推送的邮件（有时间再说）。  
微信的话，在github上有个开源的wxBot，可以用作微信通知：
    #!/usr/bin/env python
        # coding: utf-8
        from wxbot import *
        class MyWXBot(WXBot):
            def handle_msg_all(self, msg):
                if msg['msg_type_id'] == 4 and msg['content']['type'] == 0:
                    self.send_msg_by_uid(u'hi', msg['user']['id'])
                    #self.send_img_msg_by_uid("img/1.png", msg['user']['id'])
                    #self.send_file_msg_by_uid("img/1.png", msg['user']['id'])
            def schedule(self):
                self.send_msg(u'elknot@360corpsec', u'Hi,Boss!')
                time.sleep(1)
        def main():
            bot = MyWXBot()
            bot.DEBUG = True
            bot.conf['qr'] = 'png'
            bot.run()
        if __name__ == '__main__':
            main()
### 4.操作的检索
在检索之前，应该将数据库中的信息进行清洗后才能放入Spark做数据分析，当然也跟某大佬交换过意见，意见是，TensorFlow那里其实也可以放到Spark那部分去做，因为在Spark里面分析的时候直接将受影响的命令标红就OK了，但是跟据我的经验来看，有一些多一层TensorFlow的目的在于区分一些看起来不像是攻击的攻击，或者是去区分扫描器和真人攻击，再或者。。。（众所周知的原因）。在检索的时候，可以使用gc或者是t调整lucene
cache为filter
cache来为ES做优化，检索资源优化产生的原因是因为Lucene索引的时候只能一个线程工作，而且lucene会根据索引段合并去提高查询的效率，如果数据量过大，合并操作会浪费大量时间，造成数据会挤压在内存里。
具体怎么样检索或者是如何检索，由于众所周知的原因大家看着来吧。
## 0x02 与SIEM对接
HIDS平台作为内网安全设施的一部分，势必要进行日志集中化管理，之前也说过，如果日志源过多，就必须要要做日志集中化管理，也就是传说当中的上SIEM。所以HIDS要留出来API去让SIEM检索当前的日志，这里我们就一切从简的来一个SIEM，同时结合情报做自查。  
说一下流程，HIDS中的数据通过前置Agent（和HIDS Agent不是一回事）将日志摆渡到SIEM的Log
Collector（日志收集器）中，然后配合情报数据进行检索，检查日志中是否有与情报匹配的Server，如果有，则通过Agent向HIDS的消息队列里面推送任务进行操作（比如说利用YARA规则匹配是否真正为中招的文件）。
## 0x03 小结
由于众所周知的原因，这篇文章里面的东西不能够直接作为HIDS去用，暂且算是为大家提供一种思路吧，如果有异议者欢迎在群里与我讨论，我定会一一回答。
顺便打个广告，360观星实验室常年招人，欢迎各位投简历，简历请发送至PI:EMAIL或者PI:EMAIL