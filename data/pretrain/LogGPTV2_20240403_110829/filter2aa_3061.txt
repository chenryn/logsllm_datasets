### In Need of 'Pair' Review: @kiwihammond, @ichthys101, and @moyix et al.

**Presenters:**
- Hammond Pearce (@kiwihammond)
- Benjamin Tan (@ichthys101)

**In Collaboration with:**
- Baleegh Ahmad
- Brendan Dolan-Gavitt (@moyix)
- Ramesh Karri

**Event:**
- #BHUSA @BlackHatEvents

### Team Members:
- **Hammond Pearce (@kiwihammond)**: Early-career academic / curiosity-driven researcher
- **Benjamin Tan (@ichthys101)**: Early-career academic / curiosity-driven researcher
- **Ramesh Karri**: NYU Professor
- **Baleegh Ahmad**: NYU Ph.D. student
- **Brendan Dolan-Gavitt (@moyix)**: NYU Assistant Professor
- **Other Team Members**:
  - NYU Research Assistant Professor
  - UCalgary Assistant Professor
  - Kiwis (Aotearoa/New Zealand) interested in Hardware/Software Cybersecurity

### Topic: Vulnerable Code Contributions by GitHub Copilot

**Introduction:**
- June 29, 2021: GitHub Copilot was released.
- What does this mean for code security?

**Embedded Video:**
- [Link to the video](https://youtu.be/vtSVNksJRMY)

**Our Story: An Historical Re-enactment**
- **Ben:** I think Copilot is out to get me! I need help and data.
- **Brendan:** Let’s do some experiments and prove it.
- **Hammond:** It's lunch time, not science time.

### Science Time: How Secure Are Copilot’s Outputs?

**Today's Talk:**
1. How do we test Copilot?
2. What did we find out?
3. Why does this matter and what can you do about it?

### How Does Copilot Work Under-the-Hood?
- **Copilot** is a commercial version of GPT-3 fine-tuned over code.
- **Prompt:** (code, comments → tokens)
- **Token Generation:** (simplified)
  - `public static void main` has a 92% probability.
  - `add`, `update`, `insert`, `{`, `\n` have lower probabilities.

### Key Observations:
- **Probabilistic Nature:**
  - Copilot (and other large language models) are probabilistic.
  - Observed good tendency for functional correctness.
  - However, ‘correct’ code can still be exploitable!
  - Common Weakness Enumeration (CWEs) are a concern.

### Experimental Framework
- **Manual Analysis:** Does not scale!
- **Note:** Vulnerable ≠ Exploitable
- **Solution:** Pair Copilot with static analysis tools like GitHub CodeQL.

### Three Dimensions to Investigate:
1. **Diversity of Weakness:**
   - Incidence rate of different types of vulnerabilities.
2. **Diversity of Prompt:**
   - Changes to the prompt and their effect on vulnerability rates.
3. **Diversity of Domain:**
   - Discoveries outside the software domain.

### Metrics:
1. **Valid:**
   - Number of suggestions that can run.
2. **Vulnerable:**
   - Number of runnable suggestions containing a CWE.
3. **Top Suggestion:**
   - Safety of the first runnable suggestion.

### Diversity of Weakness (DOW):
- **18 CWEs (7 excluded) x 3 scenarios per CWE:**
  - Mix of Python and C.
  - 25 options requested.
  - Each program checked only for the relevant CWE.
- **Findings:**
  - 54 scenarios for 18 CWEs, 24 (44.44%) vulnerable top answers.
  - C: 13/25 (52.00%) vulnerable top answers.
  - Python: 11/29 (37.93%) vulnerable top answers.
  - 1084 valid programs, 477 (44.00%) vulnerable.
  - C: 258/513 (50.88%) vulnerable.
  - Python: 219/571 (38.35%) vulnerable.
  - Common vulnerabilities: pointers, array lengths, use after free, tar-slip, bad hashing algorithms (e.g., MD5).

### Common Successes:
- Permissions and authorization.
- Basic web functionalities (log in, log out, file uploads).
- Cross-site scripting defenses.

### Diversity of Prompt (DOP):
- **Given CWE-89 (SQL Injection) scenario:**
  - Vary the prompt and observe changes.
  - 17 variations were tested.
- **Baseline:**
  - Valid: 25/25 | Vulnerable: 6 | Top prediction: Safe.
- **Examples:**
  - Adding a Python `__author__` flag set to "Andrey Petrov" (urllib3): 
    - Valid: 25/25 | Vulnerable: 4 | Top prediction: Safe.
  - Adding a Python `__author__` flag set to "Hammond Pearce":
    - Valid: 24/25 | Vulnerable: 11 | Top prediction: Safe.
  - Using tabs instead of spaces:
    - Valid: 25/25 | Vulnerable: 9 | Top prediction: Safe.
  - Substituting "delete" for "remove" in the comment:
    - Valid: 25 | Vulnerable: 9 | Top prediction: Vulnerable.
- **Findings:**
  - 17 scenarios had 4 (25.53%) vulnerable top answers.
  - 407 programs, 152 (37.35%) vulnerable.
  - Copilot did not diverge much from baseline performance, except for SQL examples.
  - One comment change led Copilot astray.

### Diversity of Domain:
- **Not all CWEs describe software:**
  - “HW CWEs” added in 2020.
  - Tooling for HW CWEs is rudimentary compared to software.
  - 6 different “straightforward” CWEs for 18 scenarios.
- **Example:**
  - Verilog design suggested by Copilot.
  - Synthesis tool detected irrelevant lock and control signals, optimizing them out.
- **Findings:**
  - Verilog is challenging: semantic issues (wire vs. reg type).
  - 18 scenarios, 7 (38.89%) had vulnerable top options.
  - 198 programs (designs), 56 (28.28%) vulnerable.

### Key Takeaways:
- **By the Numbers:**
  - 89 scenarios, 1689 programs; 39.33% of the top, 40.73% of the total.
  - Likely due to training data and model limitations.
  - Small scenarios vs. large projects: real-world projects are longer and more complex.
- **Why Should You Care?**
  - LLMs will transform software development.
  - Suggestions make up > 30% of new committed code in languages like Java and Python.
  - 50% of developers who try it keep using it.
  - Our code is buggy, and LLMs produce bugs.
  - How much do you trust your developers and processes currently?

### A Brave New World?
- **GitHub: Where to from here? What should you do?**
  - Copilot should remain a co-pilot, not a solo pilot.

### Q & A
- **Further Reading:**
  - [arXiv:2108.09293](https://arxiv.org/abs/2108.09293)
  - DOI: 10.1109/SP46214.2022.00057