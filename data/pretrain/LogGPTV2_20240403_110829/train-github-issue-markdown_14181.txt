**I'm submitting a ...** (check one with "x")
    [ X] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**
In a component I have this:
    @ViewChild(AccountFormComponent)
        form: AccountFormComponent;
In the template I have this:
    Save
After the component was rendered, change detection stoped completely.  
I tracked it down to the apprefs zone subscription having stopped:
    this._zone.onMicrotaskEmpty.subscribe(
            {next: () => { this._zone.run(() => { this.tick(); }); }});
Reason was, that `this.tick()` threw the error
    Error: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: 'true'. Current value: 'false'.
        at viewDebugError (core.es5.js:8625) [angular]
        at expressionChangedAfterItHasBeenCheckedError (core.es5.js:8603) [angular]
        at checkBindingNoChanges (core.es5.js:8767) [angular]
        at checkNoChangesNodeInline (core.es5.js:12195) [angular]
        at checkNoChangesNode (core.es5.js:12169) [angular]
        at debugCheckNoChangesNode (core.es5.js:12743) [angular]
        at debugCheckDirectivesFn (core.es5.js:12645) [angular]
        at Object.eval [as updateDirectives] (AccountFormPage.html:4) [angular]
        at Object.debugUpdateDirectives [as updateDirectives] (core.es5.js:12627) [angular]
        at checkNoChangesView (core.es5.js:12027) [angular]
        at callViewAction (core.es5.js:12348) [angular]
        at execComponentViewsAction (core.es5.js:12300) [angular]
        at checkNoChangesView (core.es5.js:12030) [angular]
        at callViewAction (core.es5.js:12348) [angular]
The error is catched by `SafeSubscriber.prototype.__tryOrUnsub` and propagated
up to zone.js.  
However, the error was being catched and swallowed by zone.js hasTask
function:
            ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
                // hasTask should not throw error so other ZoneDelegate
                // can still trigger hasTask callback
                try {
                    return this._hasTaskZS &&
                        this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
                }
                catch (err) {
                }
            };
This made this really hard to debug since change detection just stops working.  
I am not really sure why the error occurs, since I have seen this error
printed out with change detection continuing to work in other cases.
**Expected behavior**
Errror printed out, app-ref resubscription to `zone.onMicrotaskEmpty`, which
actually did not stop, only the appref got unsubscribed.
**Minimal reproduction of the problem with instructions**
Not sure if the combination above (injecting viewchild and using it in the
view in an expression) is already enough.
**What is the motivation / use case for changing the behavior?**
I would at least print some information to the console so developers are not
clueless what caused change detection to stop.  
However, this might be an issue for zone.js.
**Please tell us about your environment:**
OS X, angular@4.0.1, zone.js@0.8.5, chrome 57