call    ds:mfc90_945 
.text:64405050          
xor     edi, edi 
.text:64405052          
push    edi                ; fWinIni 
.text:64405053          
lea     eax, [ebp+pvParam] 
.text:64405056          
push    eax                ; PvParam 
.text:64405057          
push    edi                ; uiParam 
.text:64405058          
push    30h                ; uiAction 
.text:6440505A          
call    ds:SystemParametersInfoA 
.text:64405060          
mov     eax, [ebp+var_34] 
.text:64405063          
cmp     eax, 1600 
.text:64405068          
jle     short loc_64405072 
.text:6440506A          
cdq 
.text:6440506B          
sub     eax, edx 
.text:6440506D          
sar     eax, 1 
.text:6440506F          
mov     [ebp+var_34], eax 
.text:64405072 
.text:64405072 loc_64405072: 
.text:64405072          
push    edi                ; hWnd 
.text:64405073          
mov     [ebp+cy], 0A0h 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
788 
逆向工程权威指南（下册） 
.text:6440507A          
call    ds:GetDC 
.text:64405080          
mov     [ebp+var_10], eax 
.text:64405083          
mov     ebx, 12Ch 
.text:64405088          
cmp     eax, edi 
.text:6440508A          
jz      loc_64405113 
.text:64405090          
push    11h                ; i 
.text:64405092          
call    ds:GetStockObject 
.text:64405098          
mov     edi, ds:SelectObject 
.text:6440509E          
push    eax                ;h 
.text:6440509F          
push    [ebp+var_10]     ; hdc 
.text:644050A2          
call    edi ; SelectObject 
.text:644050A4          
and     [ebp+rc.left], 0 
.text:644050A8          
and     [ebp+rc.top], 0 
.text:644050AC          
mov     [ebp+h], eax 
.text:644050AF          
push    401h               ; format 
.text:644050B4          
lea     eax, [ebp+rc] 
.text:644050B7          
push    eax                ; lprc 
.text:644050B8          
lea     ecx, [esi+2854h] 
.text:644050BE          
mov     [ebp+rc.right], ebx 
.text:644050C1          
mov     [ebp+rc.bottom], 0B4h 
; demangled name: ATL::CSimpleStringT::GetLength(void) 
.text:644050C8          
call    ds:mfc90_3178 
.text:644050CE          
push    eax                ; cchText 
.text:644050CF          
lea     ecx, [esi+2854h] 
; demangled name: const char* ATL::CSimpleStringT::operator PCXSTR 
.text:644050D5          
call    ds:mfc90_910 
.text:644050DB          
push    eax                ; lpchText 
.text:644050DC          
push    [ebp+var_10]     ; hdc 
.text:644050DF          
call    ds:DrawTextA 
.text:644050E5          
push    4                   ; nIndex 
.text:644050E7          
call    ds:GetSystemMetrics 
.text:644050ED          
mov     ecx, [ebp+rc.bottom] 
.text:644050F0          
sub     ecx, [ebp+rc.top] 
.text:644050F3          
cmp     [ebp+h], 0 
.text:644050F7          
lea     eax, [eax+ecx+28h] 
.text:644050FB          
mov     [ebp+cy], eax 
.text:644050FE          
jz      short loc_64405108 
.text:64405100          
push    [ebp+h]           ; h 
.text:64405103          
push    [ebp+var_10]     ; hdc 
.text:64405106          
call    edi ; SelectObject 
.text:64405108 
.text:64405108 loc_64405108: 
.text:64405108          
push    [ebp+var_10]     ; hDC 
.text:6440510B          
push    0                  ; hWnd 
.text:6440510D          
call    ds:ReleaseDC 
.text:64405113 
.text:64405113 loc_64405113: 
.text:64405113          
mov     eax, [ebp+var_38] 
.text:64405116          
push    80h                ; uFlags 
.text:6440511B          
push    [ebp+cy]          ; cy 
.text:6440511E          
inc     eax 
.text:6440511F          
push    ebx                ; cx 
.text:64405120          
push    eax                ; Y 
.text:64405121          
mov     eax, [ebp+var_34] 
.text:64405124          
add     eax, 0FFFFFED4h 
.text:64405129          
cdq 
.text:6440512A          
sub     eax, edx 
.text:6440512C          
sar     eax, 1 
.text:6440512E          
push    eax                 ; X 
.text:6440512F          
push    0                    ; hWndInsertAfter 
.text:64405131          
push    dword ptr [esi+285Ch] ; hWnd 
.text:64405137          
call    ds:SetWindowPos 
.text:6440513D          
xor     ebx, ebx 
.text:6440513F          
inc     ebx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 80 章  SAP 
789 
.text:64405140          
jmp     short loc_6440514D 
.text:64405142 
.text:64405142 loc_64405142: 
.text:64405142          
push    offset byte_64443AF8 
; demangled name: ATL::CStringT::operator=(char const *) 
.text:64405147          
call    ds:mfc90_820 
.text:6440514D 
.text:6440514D loc_6440514D: 
.text:6440514D          
cmp     dword_6450B970, ebx 
.text:64405153          
jl      short loc_64405188 
.text:64405155          
call    sub_6441C910 
.text:6440515A          
mov     dword_644F858C, ebx 
.text:64405160          
push    dword ptr [esi+2854h] 
.text:64405166          
push    offset aCdwsguiPrepare ; "\nCDwsGui::PrepareInfoWindow:  
     sapgui env"...  
.text:6440516B          
push    dword ptr [esi+2848h] 
.text:64405171          
call    dbg 
.text:64405176          
add     esp, 0Ch 
.text:64405179          
mov     dword_644F858C, 2 
.text:64405183          
call    sub_6441C920 
.text:64405188 
.text:64405188 loc_64405188: 
.text:64405188          
or      [ebp+var_4], 0FFFFFFFFh 
.text:6440518C          
lea     ecx, [ebp+var_14] 
; demangled name: ATL::CStringT::~CStringT() 
.text:6440518F          
call    ds:mfc90_601 
.text:64405195          
call    __EH_epilog3 
.text:6440519A          
retn 
.text:6440519A CDwsGui__PrepareInfoWindow endp 
在执行上述函数的最初几个指令时，数据对象（thiscall）的指针存储于ECX寄存器。
①本例中，对象明
显使用了CDwsGui类。它所记录的选项开关，直接决定着函数窗口的提示信息。 
如果地址 this+0x3D 的值不是 0，那么整个程序就会关闭网络数据的压缩功能： 
.text:64405007 loc_64405007: 
.text:64405007          
cmp    byte ptr [esi+3Dh], 0 
.text:6440500B          
jz     short bypass 
.text:6440500D          
push   offset aDataCompressio ; "data compression switched off\n" 
.text:64405012          
mov    ecx, edi 
; demangled name: ATL::CStringT::operator+=(char const *) 
.text:64405014          
call   ds:mfc90_945 
.text:6440501A          
mov    [ebp+var_10], ebx 
.text:6440501D 
.text:6440501D bypass: 
更有意思的是，决定程序是否显示提示窗口的关键因素是变量 var_10： 
.text:6440503C   
cmp    [ebp+var_10], ebx 
.text:6440503F                  
jnz    exit ; bypass drawing 
; add strings "For maximum data security delete" / "the setting(s) as soon as possible !": 
.text:64405045          
push   offset aForMaximumData ; "\nFor maximum data security  
     delete\nthe s"...      
.text:6440504A          
call   ds:mfc90_945 ; ATL::CStringT::operator+=(char const *) 
.text:64405050          
xor    edi, edi 
.text:64405052          
push   edi                 ; fWinIni 
.text:64405053          
lea    eax, [ebp+pvParam] 
.text:64405056          
push   eax                 ; pvParam 
① 这属于 thiscall 类型的函数。有关 thiscall 类型的函数，可参见本书 51.1.1 节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
790 
逆向工程权威指南（下册） 
.text:64405057          
push   edi                 ; uiParam 
.text:64405058          
push   30h                 ; uiAction 
.text:6440505A          
call   ds:SystemParametersInfoA 
.text:64405060          
mov    eax, [ebp+var_34] 
.text:64405063          
cmp    eax, 1600 
.text:64405068          
jle    short loc_64405072 
.text:6440506A          
cdq 
.text:6440506B          
sub    eax, edx 
.text:6440506D          
sar    eax, 1   
.text:6440506F          
mov    [ebp+var_34], eax 
.text:64405072 
.text:64405072 loc_64405072: 
start drawing: 
.text:64405072          
push   edi       
   ; hWnd 
.text:64405073          
mov    [ebp+cy], 0A0h 
.text:6440507A          
call   ds:GetDC 
那么，我们通过实践来验证刚才这些推测吧。 
首先找到这个 JNZ 指令： 
.text:6440503F  
jnz    exit ; bypass drawing 
把它改为 JMP 之后，SAPGUI 程序就再也不会显示恼人的提示窗口了！ 
下一步，我们找到 load_command_line()函数（函数名称是笔者命名的名字）里偏移量为 0x15 的数据，
以及 CDwsGui::PrepareInfoWindow 里的变量 this+0x3D。这两个值是相等的值么？ 
为了验证这一猜测，笔者在程序里搜索与偏移量 0x15 有关的全部指令。在 SAPGUI 这样的小型程序
里，某个规定变量一般只会被同一个文件调用；换而言之，我们不必检索其他文件。 
在当前文件里，第一处赋值的指令如下： 
.text:64404C19 sub_64404C19    
proc near 
.text:64404C19 
.text:64404C19 arg_0           
= dword ptr  4 
.text:64404C19 
.text:64404C19       
push     ebx 
.text:64404C1A       
push     ebp 
.text:64404C1B       
push     esi 
.text:64404C1C      
push     edi 
.text:64404C1D       
mov      edi, [esp+10h+arg_0] 
.text:64404C21       
mov      eax, [edi] 
.text:64404C23       
mov      esi, ecx ; ESI/ECX are pointers to some unknown object. 
.text:64404C25       
mov     [esi], eax 
.text:64404C27       
mov     eax, [edi+4] 
.text:64404C2A       