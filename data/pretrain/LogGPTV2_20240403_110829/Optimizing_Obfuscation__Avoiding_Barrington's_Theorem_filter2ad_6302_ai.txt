30
[45] O. Pandey, M. Prabhakaran, and A. Sahai. Obfuscation-based non-black-box simulation
and four message concurrent zero knowledge for np. Cryptology ePrint Archive, Report
2013/754, 2013.
[46] R. Pass, K. Seth, and S. Telang. Indistinguishability obfuscation from semantically-secure
multilinear encodings. In CRYPTO, pages 500–517, 2014.
[47] M. Paterson and U. Zwick. Shallow circuits and concise formulae for multiple addition and
multiplication. Computational Complexity, 3:262–291, 1993.
[48] F. P. Preparata and D. E. Muller. Eﬃcient parallel evaluation of boolean expression. IEEE
Trans. Computers, 25(5):548–549, 1976.
[49] A. Sahai and B. Waters. How to use indistinguishability obfuscation: deniable encryption,
and more. In STOC, pages 475–484, 2014.
[50] M. Sauerhoﬀ, I. Wegener, and R. Werchner. Relating branching program size and formula
size over the full binary basis. In STACS, pages 57–67, 1999.
[51] I. S. Sergeev. Upper bounds for the formula size of symmetric boolean functions. Russian
Mathematics, 58 (5):30–42, 2014.
[52] P. M. Spira. On time-hardware complexity tradeoﬀs for boolean functions. In Proceedings
of the 4th Hawaii Symposium on System Sciences, pages 525–527, 1971.
A Boolean Formulae
A boolean circuit for a function f : {0, 1}(cid:96) → {0, 1} is a directed acyclic graph (DAG). The
vertices in this graph are either input variables or gates. We assume that all the gates in the
circuit have fan-in at most 2. The outdegree of an output gate is 0 and it is at least 1 for all
other vertices. The fan-out of a gate is the out-degree of that gate. In this work, we consider a
special type of circuits called formulae. A boolean formula is a boolean circuit where the fan-out
of each gate is 1. A formula can be viewed as binary tree where the root is the output gate. We
deﬁne the size of a formula to be the number of leaves in this binary tree.
B From Formula to BP
In this section, we give a transformation of boolean formulas over and and not gates to a
branching program. Note that any formula over and, or and not gates can be converted to a
formula over and and not gates of the same size.
Consider a formula, denoted by F. We inductively transform F to a branching program BP.
Our construction will maintain a stronger induction hypothesis. There will be two sink nodes,
“accept” and “reject.” Also, there will be a path from the source to the accept iﬀ the output is
1 and there will be a path from the source to the reject iﬀ the output is 0.
The base case corresponds to an input wire w. Let input variable be xi. We construct a
branching program for w, denoted by BPw consists of three nodes denoted by source, acc and
rej. We add an edge labeled 0 from source to rej and an edge labeled 1 from source to acc. We
label the source with xi.
We proceed to the induction hypothesis. Consider a gate G.
Case (1) and gate:- Let F1 and F2 be two sub-formulae such that their output wires are fed
to F. Let BPF1 and BPF2 be the branching programs for F1 and F2, respectively. We construct
a branching program for F as follows (see Figure 1). We merge the accept node of BPF1 with
the source node of BPF2 . Similarly, merge the reject node of BPF1 with the reject node of BPF2.
Case (2) not gate:- Let F(cid:48) be the sub-formula such that the output wire of F(cid:48) is fed into the
gate G. Let BPF(cid:48) be a branching program for F(cid:48). To construct the branching program for F we
31
source
BPF1
BPF
acc
rej
source
BPF2
acc
rej
Figure 1: This denotes the branching program for an and gate.
simply rename accept node of BPF(cid:48) as reject node for BPF. We also rename reject node of BPF(cid:48)
as accept node for BPF.
BPF
source
BPF(cid:48)
acc
rej
Figure 2: This denotes the branching program for a not gate. The accept and the reject nodes are
interchanged.
Note that once the transformation is complete for the formula, the ﬁnal reject node can be
deleted. So our ﬁnal construction will only have one sink node, the “accept” node.
It is easy to see that the above described layered branching program correctly evaluates the
formula F. More formally,
Lemma 7. For every input x ∈ {0, 1}l, we have F(x) = 1 if and only if BPF(x) = 1. Moreover,
for a formula of size s, the size of the branching program BPF is at most s.
Proof Sketch.
It follows by an induction on the structure of the formula by noting that the
number of leaves in a formula is the sum of the leaves of the left sub-tree and the right sub-tree.
C Proof of Theorem 3
At a high level the proof proceeds as follows. We demonstrate a transformation that consists
of the following steps – ﬁrst the formula is balanced and then the resulting balanced formula
is converted to a linear bijection straightline-program (LBSP) which is then converted to an
RMBP. Note that the size of the resulting relaxed matrix branching program is better than the
one presented above. For completeness sake, we present the deﬁnition of LBSP as given in [20].
[20] A linear bijection straightline-program (LBSP) over Zp is a sequence of
Deﬁnition 7.
assignments of the form:
Rj ← Rj + c · Ri
Rj ← Rj − c · Ri
Rj ← Rj + xu · Ri
Rj ← Rj − xu · Ri
32
where R1, . . . , Rw are registers, x1, . . . , xl are inputs, c ∈ Zp and u ∈ {1, . . . , l}. The width
of LBSP, denoted by w, is the number of the registers in LBSP. The length of a LBSP is the
number of statements it contains. An LBSP computes a function f (x1, . . . , xl) if there exists
a, b ∈ {1, . . . , w} such that the register Ra, after the evaluation, contains R∗
b · f (x1, . . . , xl),
where R∗
b contains the initial value of the
register Rb.
a denotes the initial value of the register Ra and R∗
a + R∗
In the LBSP we are going to consider, we will assume that the initial value in the register
Rb is 1 and the initial value in the register Ra is 0.
We now provide a sketch of the proof of Theorem 3. 10 We refer the reader to Giel [31]
for more details. The main deviation of our proof from the proof by [31] is in the last step –
instead of transforming a LBSP to a layered branching program, we directly transform LBSP
to a relaxed matrix branching program.
Proof sketch. Consider a formula of size s over any complete basis. First, the formula is balanced
using [11] to obtain a formula of depth at most 3c ln(2) log s and the size of the formula is at
most sα, where c ≥ 2 is a constant and α = 1 +(cid:0)1/(1 + log(c− 1))(cid:1). Then the balanced formula
is converted to a linear bijection straight-line program (LBSP) using [31]. The resulting LBSP
has width at most 2k + 2 and the number of variable references (which is essentially the number
of instructions in LBSP, each variable appears in) is at most 8sα+ 6c ln2
, where k is a constant to
be determined later. Finally, we transform this as a relaxed matrix branching program, denoted
by BP = {Bi,b}i∈[n+1],b∈{0,1}, each matrix of width w × w, as follows. Note that matrices Bi,b
represent the (i − 1)th instruction in LBSP. Further, we associate a function inp : [n] → [(cid:96)],
where n is the number of matrices that we obtain.
k
• k = 1: In this case, both B1,0 and B1,1 represent the same matrix. The ﬁrst row of the
matrix B1,0 represents the initial values in the registers in LBSP. The rest of the rows are
picked such that B1,0 is a full rank matrix. The function inp on k is set to 1.
• k > 1 and the (k − 1)th instruction is of the form Rj ← Rj + c · Ri OR Rj ← Rj − c · Ri
for c ∈ Z2: Even in this case both Bi,0 and Bi,1 represent the same matrix. Bi,0 contains
1’s on the diagonal. It also contains 1 in the (i, j)th entry. The rest of the entries are 0.
Even in this case, inp on k is set to 1.
• k > 1 and the (k − 1)th instruction is of the form Rj ← Rj + xu · Ri OR Rj ← Rj − xu · Ri
for u ∈ {1, . . . , n}: In this case, B1,0 is an identity matrix of width w. The matrix Bi,1
contains 1’s on the diagonal and it contains 1 in the (i, j)th entry. The rest of the entries
in the matrix are 0. For this case, inp(k) is set to u.
observe that the product (cid:81)j+1
Finally, the (1, a)th entry in the ﬁnal product (cid:81)n+1
This completes the description of RMBP. Deﬁne Mi = Bi,xinp(i), for some x ∈ {0, 1}(cid:96). Now,
i=1 Mi denotes the evaluation of the ﬁrst i instructions in LBSP.
i=1 Mi denotes the output of the LBSP on
input x. Further, observe that the width of the relaxed matrix branching program is exactly the
width of the LBSP which is at most 2k + 2 and the length of the LBSP is at most 8sα+ 6c ln2
.
By suitably substituting for k, we can get the size of the RMBP to be s1+, for any  > 0 and
the width of the matrices in this RMBP is a constant (depending on ).
k
D Proof of Virtual Black Box Obfuscation in the Idealised
Graded Encoding Model
In this section, we prove that the obfuscator O described in Section 7 is a good VBB obfuscator
for polynomial sized formulas in the ideal graded encoding model.
10In the proof of Giel’s theorem, the ring Z2 was used in the deﬁnition of LSBP. We remark that the proof extends
to the case when the LSBP is considered in the ring over Zp.
33
Let F = {F(cid:96)}(cid:96)∈N be a formula class such that every formula in F(cid:96) is of size O((cid:96)). We assume
WLOG that all formulas in F(cid:96) are of the same size (otherwise the formula can be padded). It
follows from Theorem ?? that for any formula F there exists a RMBP represented in the form of
O(|F|) matrices each of width O(|F|). Hence, there exists linear functions n(·) and w(·) such that
O in Section 7 outputs a dual-input oblivious RMBP of size n(|F|) and width w(|F|) computing
on (cid:96)(|F|) inputs. Hence, O satisﬁes the polynomial slowdown requirement. We also showed that
O satisﬁes the functionality requirement and always computes the correct output (see Section 7).
We are now left to show that O satisﬁes the virtual black box property.
The Simulator Sim Here we construct a simulator Sim that takes as input 1|F| and descrip-
tion of the adversary A, and is given oracle access to the formula F. This simulator is required
to simulate the view of the adversary.
The simulator begins by emulating the obfuscator O on F. First, the simulator needs to
compute the RMBP BPF and the matrices Bi,b1,b2 corresponding to the branching program.
Note that the simulator is only given oracle access to the formula F and has no way to compute
these matrices. Thus, Sim initializes the oracle M with formal variables. Also note that the
simulator can compute the evaluation functions inp1 and inp2 and also the system used for
encodings since the RMBPs are oblivious. This would be important when Sim simulates the
oracle queries of A.
More formally, we extend the deﬁnition of an element to allow for values that are formal
variables and also expressions over formal variables, instead of just being ring elements. When we
perform an operation ◦ on two elements e1 and e2, that contain formal variables, the resultant
element e1 ◦ e2 is a corresponding arithmetic expression over formal variables. This way we
represent formal expressions as arithmetic circuits. We denote by α(e) the arithmetic expression
over formal variables for element e. An element is called basic element if the corresponding
arithmetic circuit has no gates, i.e. either it is a constant or a formal variable. We say that e(cid:48)
is a sub-element of e if the circuit corresponding to e(cid:48) is a sub-circuit of the circuit for e.
Next, Sim will emulate the oracle M that O accesses as follows: Sim will maintain a table
of handles and corresponding level of encodings that have been initialized so far. As mentioned
before, Sim will initialize the oracle M with formal variables. Note that Sim can emulate all the
interfaces of M apart from the zero-testing. Note that O does not make any zero-test queries.
Hence, the simulation of the obfuscator O is perfect.
When Sim completes the emulation of O it obtains a simulated obfuscation ˜O(F). Now Sim
has to simulate the view of the adversary on input ˜O(F). Our Sim will use the same handles
table for emulating the oracle calls of both O and A. Hence, Sim can perfectly emulate all
the oracle calls made by A apart from zero-testing. The problem with answering zero-test
queries is that Sim cannot zero-test the expressions involving formal variables. Zero-testing is
the main challenge for simulation, which we describe in the next section. Since the distribution
of handles generated during the simulation and during the real execution are identical, and since
the obfuscation consists only of handles (as opposed to elements), we have that the simulation
of the obfuscation ˜O and the simulation of M’s answers to all the queries, except for zero-test
queries, is perfect.
Simulating zero testing queries
In this part we describe how our simulator handles the
zero-test queries made by A. This part is the non-trivial part of the analysis for the following
reason. The handle being zero-tested is an arithmetic circuit whose value depends on the formal
variables which are unknown to the simulator. The real value for these formal variables would
depend on the formula F. At a very high level, we show that these values can be simulated given
oracle access to F.
There are two steps to zero-testing an element. Note that the adversary may have combined
the handles provided in very convoluted manner. More precisely, A may have computed sub-
34
expressions involving multiple inputs and hence, the value of the element being zero-tested may
depend on formal variables which correspond to using multiple inputs. Hence, the ﬁrst step is
to decompose this elements into “simpler” elements that we call single-input elements. As the
name suggests, any single input element’s circuit consists of formal variables corresponding to
a distinct input x ∈ {0, 1}(cid:96). Namely, it only depends on formal variables in matrices Ci,b1,b2
such that b1 = xinp1(i) and b2 = xinp2(i). In the ﬁrst step we show that any element e, such
that S(e) = U which is zero-tested can be decomposed into polynomial number of single input
elements.
In the second step, Sim simulates the value of each of the single input elements obtained
via decomposition independently. More formally, we use Theorem 6 to show that value of each
single-input element can be simulated perfectly. But we run into the following problem. We
cannot simulate the value of all the single input elements together as these have correlated
randomness of the obfuscator. Instead we show that it suﬃces to zero-test each single-input
element individually. For this we use the fact that each of the matrix ˜Bi,b1,b2 was multiplied
by αi,b1,b2. Using this we prove that value of each single input element depends on product
of diﬀerent α’s which is determined by the input being used. Now, we use the fact that the
probability that A creates an element such that non-zero value of two single input elements
cancel each other is negligible. Therefore, it holds that element is zero iﬀ each of the single
input elements are zero independently.
D.1 Decomposition to Single-Input Elements
Next we show how every element can be decomposed into polynomial number of single-input
elements. We start by introducing some notation.
For every element e, we will assign an input-proﬁle Prof(e) ∈ {0, 1,∗}(cid:96)∪{⊥}. Intuitevely, if e
is a sub-expression in the evaluation of the obfuscated program on some input x ∈ {0, 1}(cid:96), then
Prof(e) is used to represent the partial information about x which can be learnt from formal
variables which occur in e. For example, we say that Prof(e)j is consistent with the bit b if there
exists a basic sub-element e(cid:48) of e such that S(e(cid:48)) = S(i, b1, b2) such that inp1(i) = j and b1 = b
or inp2(i) = j and b2 = b. Next, for every j ∈ [(cid:96)] we set Prof(e)j = b iﬀ Prof(e)j is consistent
with b and is not consistent with (1 − b). If Prof(e)j is neither consistent with b nor (1 − b),
we set Prof(e)j = ∗. Finally, we set Prof(e) = ⊥ iﬀ there exists a j ∈ [(cid:96)] such that Prof(e) is
consistent with both b and (1 − b). We call e a single-input element iﬀ Prof(e) (cid:54)= ⊥. Finally, if
Prof(e) ∈ {0, 1}(cid:96), we say that input-proﬁle of e is complete. Otherwise, we say that input-proﬁle
of e is partial.
We also deﬁne the partial symmetric operation (cid:12) : {0, 1,∗,⊥} × {0, 1,∗,⊥} → {0, 1,⊥} as
follows: b(cid:12)∗ = b for b ∈ {0, 1,∗,⊥}, b(cid:12) b = b, and b(cid:12) (1− b) = ⊥ for b ∈ {0, 1}, and ⊥(cid:12)⊥ = ⊥.