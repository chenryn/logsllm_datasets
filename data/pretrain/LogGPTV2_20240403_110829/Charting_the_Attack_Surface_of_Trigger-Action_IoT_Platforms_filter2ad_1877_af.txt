### Specific Security Postures

iRuler differs from network-based [79, 89], platform-based [39], and app-based [49, 87] IoT security solutions, which detect vulnerabilities at runtime. Instead, iRuler leverages Natural Language Processing (NLP) and model checking to statically check for vulnerabilities before an app is installed and executed. Celik et al. [29] use static analysis to identify sensitive data flows in IoT apps, while our work focuses on vulnerabilities caused by the interaction of multiple trigger-action rules. Several other studies address challenges related to access control in IoT [44, 50, 74, 77].

### Trigger-Action Programming (TAP) in IoT

Researchers have explored how smart homes [33, 85, 88] and commercial buildings [66] can be customized using TAP. They also study the usability of existing TAP frameworks to propose guidelines for developing more user-friendly interfaces [46, 83]. Ur et al. [86] created a dataset of IFTTT recipes and analyzed various aspects of these recipes. Bastys et al. [23, 24] discussed user privacy issues in IFTTT and developed a framework to detect private data leakage to attacker-controlled URLs. However, their focus is on privacy violations in the filter code of individual applets, not on the interaction between applets. Fernandes et al. [40] examined OAuth-related overprivilege issues on the IFTTT platform and proposed a method to decouple untrusted cloud services from trusted clients on users' personal devices.

### NLP-Aided Flow Analysis

FlowCog [71] extracts app semantics and contextual information that define Android app behavior and uses NLP to correlate this behavior with information flows within the app. Other work has used NLP to locate sensitive information in mobile apps and track information leakage to third-party libraries [35, 67]; evaluate the semantic gap between mobile app descriptions and app permissions [72]; and match IoT app descriptions with actual app behavior [84]. Ding et al. [36] use keyword identification in the app descriptions of SmartThings apps to detect app interaction chains through physical channels. Surbatovich et al. [81] defined an information flow lattice to analyze potential secrecy or integrity violations in IFTTT recipes. While their work manually rewrites and labels triggers and actions to identify rule-interaction chains, our approach automates this process using NLP. There are also efforts to build semantic parsers that create executable code from IFTTT-style natural language recipes [53, 73], which are orthogonal to our contributions.

### IoT Automation Errors

IoT automation errors have been studied from various perspectives, including analyzing logic inconsistencies and supporting end-user debugging to resolve them [20, 34, 51, 52, 90], as well as assisting IoT app developers with GDPR compliance [58]. Chandrakana et al. [68] identified that too few triggers in automation rules can lead to errors and security issues. They proposed a tool to determine a necessary and sufficient set of triggers based on the actions written by end users. However, their tool analyzes each rule in isolation, whereas we consider vulnerabilities arising from rule interactions. Some work has also focused on detecting and resolving automation conflicts in smart home and office environments [59, 60, 65, 66, 80]. In this work, we consider a broader class of vulnerabilities.

### IoT Properties Checking

Several recent studies have proposed methods to check security or safety properties of IoT systems when multiple rules or apps are enabled. We compare our approach with other existing approaches in Table 5. iRuler supports advanced features of TA platforms (Multiple Actions), incorporates a broad set of characteristics into its model (Environment Modeling, Device Location, Time Modeling, Support Checking Other Properties), and identifies new classes of inter-rule vulnerabilities. Conversely, these works provide several useful properties that iRuler does not consider. AutoTap [90] presents a method for verifying configuration properties as expressed by novice users and, along with MenShen [28], Salus [51], and SIFT [52], supports automated creation and repair of rules (Rule Writing). Systems like Soteria [30], IoTSan [70], and HomeGuard (arXiv preprint only: [32]) are based on source code analysis of IoT apps and can therefore consider additional factors such as finer-grained reduction of state explosion and specific malicious input sequences. IoTGuard [31] instruments apps to check security and safety properties at runtime. Unlike these approaches, iRuler uses an NLP-based technique to infer information flow. As a result, iRuler is less precise and fine-grained in its analysis but has the advantage of working out-of-the-box on commodity IoT platforms where source code is typically unavailable.

### Conclusion

While the trigger-action programming paradigm promotes the creation of rich and collaborative IoT applications, it also introduces potential security and safety threats if users do not take precautions in combining these apps. In this work, we generalize and examine inter-rule vulnerabilities in trigger-action IoT platforms, presenting a tool for their automatic detection. iRuler combines the power of SMT solving and model checking to model IoT systems and check for vulnerable properties. As a related contribution, we have also demonstrated an NLP-aided technique for inferring information flow between rules in proprietary trigger-action platforms.

### Acknowledgements

This work was supported in part by NSF CNS 13-30491, NSF CNS 17-50024, and NSF CNS 16-57534. The views expressed are those of the authors only. We appreciate valuable insights from our CCS reviewers and our shepherd, Blase Ur.

### References

[References listed as provided, with proper formatting and citations.]