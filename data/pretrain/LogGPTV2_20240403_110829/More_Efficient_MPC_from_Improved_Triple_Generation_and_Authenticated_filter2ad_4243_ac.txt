al. [KRRW18], we can conceptually divide the authenticated garbling protocol into two parts: 1) jointly
generate a distributed garbled circuit among all parties; 2) authenticate the correctness of the garbled circuit
for the evaluator. Here we only consider the ﬁrst part about distributed garbling. The WRK distributed
garbling [WRK17a] in the two-party setting can be written as:
uv := H(Lα,u, Lβ,v) ⊕(cid:0)Lγ,0 ⊕ K2[r1
uv] ⊕ r2
uv∆2
(cid:1)
P2 : G2
P1 : G1
uv := M2[r1
uv],
uv ⊕ r2
where r1
Guv as in the classical garbling.
uv = ruv is deﬁned as above. The correctness can be checked given the fact that G1
uv ⊕ G2
uv =
Recently, Katz et al. [KRRW18] showed that the half-gates technique can be applied to the above two-
party distributed garbling. Although P2 cannot compute G0, G1 and Lγ,0 as in the half-gates garbling
(because P2 does not know the wire masks, and thus cannot compute the terms λβ∆2, λα∆2 and (λαλβ ⊕
λγ)∆2), both parties P1 and P2 hold the authenticated shares, say, R1 ⊕ R2 = λβ∆2, S1 ⊕ S2 = λα∆2, and
T1 ⊕ T2 = (λαλβ ⊕ λγ)∆2. Thus, they can conceptually “shift” the entire garbling procedure by R1, S1
and T1. In detail, P2 can compute
0 := H(Lα,0) ⊕ H(Lα,1) ⊕ R2,
G2
1 := H(Lβ,0) ⊕ H(Lβ,1) ⊕ Lα,0 ⊕ S2,
G2
Lγ,0 := H(Lα,0) ⊕ H(Lβ,0) ⊕ T2.
0 ⊕ R1 and G1 := G2
1 ⊕ S1. Then P1 can
Evaluator P1 can recover G0 and G1 by computing G0 := G2
perform the standard half-gates evaluation, and adds T1 as a correction value, so as to compute the garbled
label for output wire γ.
Applying half-gates for multi-party authenticated garbling. Applying half-gates to the multi-party set-
ting has been an open problem proposed by multiple prior works [BLO16, WRK17b, BLO17, KRRW18,
BJPR18]. We present how to partially use half-gates in the multi-party distributed garbling for boolean
circuits. Recently, Ben-Efraim [Ben18] proposed a technique for distributed garbling of arithmetic circuits,
which makes it compatible with some of the half-gates optimizations. Note that their technique does not
9
reduce the size of distributed garbled circuits for the case of boolean circuits. Thus, their work still leaves
the open problem of applying half-gates to the multi-party distributed garbling for boolean circuits.
Let’s ﬁrst recall the classical multi-party distributed garbling [WRK17b]. For each wire w, every garbler
Pi (i ≥ 2) has a pair of garbled labels Li
w,1 = ∆i, where ∆i is a random offset
only known to Pi. For each AND gate (α, β, γ,∧) and u, v ∈ {0, 1}, the distributed garbling is constructed
in the following form:
Pi, i ≥ 2 : Gi
P1 : G1
β,v) ⊕(cid:16){Mj[ri
γ,0 ⊕(cid:0)(cid:76)
uv](cid:1) ⊕ ri
uv]}j(cid:54)=i,1, Li
w,1 such that Li
w,0 ⊕ Li
j(cid:54)=iKi[rj
w,0, Li
uv∆i
(cid:17)
,
where(cid:76)
i∈[n] ri
uv := H(Li
uv := {Mj[r1
α,u, Li
uv]}j(cid:54)=1,
uv = ruv is deﬁned as above.
As we can see above, the multi-party garbling is very complicated and difﬁcult to analyze. Our ﬁrst step
is to further split the distributed garbled table into two parts as below:
β,v) ⊕(cid:0)Li
γ,0 ⊕ ((cid:76)
β,v) ⊕(cid:0){Mj[ri
uv]}j(cid:54)=i,1
(cid:1).
j(cid:54)=iKi[rj
uv]) ⊕ ri
uv∆i
(cid:1),
α,u, Li
α,u, Li
Ai
uv := H(Li
uv := H(cid:48)(Li
Bi
uv as (Ai
Essentially, we can view Gi
distributed garbling. Thus we can attempt to apply the half-gates optimization on this portion:
uv). Now we can see that Ai
uv is very similar to the two-party
uv, Bi
α,0 ⊕ Si,
where(cid:76)
0 := H(Li
Ai
1 := H(Li
Ai
Li
γ,0 := H(Li
α,0) ⊕ H(Li
β,0) ⊕ H(Li
α,0) ⊕ H(Li
i∈[n] Ri = λβ∆i,(cid:76)
i∈[n] Si = λα∆i and(cid:76)
α,1) ⊕ Ri,
β,1) ⊕ Li
β,0) ⊕ Ti,
i∈[n] Ti = (λαλβ ⊕ λγ)∆i. Unlike the two-party
α,0 ⊕ λα∆i, and then
setting, here P1 cannot recover H(Li
perform the standard half-gates evaluation, since it does not get the other parties’ shares for λβ∆i and λα∆i.
By a careful evaluation, we show that evaluator P1 can still compute the garbled label for output wire γ in the
}i(cid:54)=1,
following way. If P1 holds public values Λα, Λβ and the corresponding garbled labels {Li
then for each i (cid:54)= 1, it computes as follows:
1. Evaluate the half-gates portion:
α,1) ⊕ λβ∆i and H(Li
β,0) ⊕ H(Li
α,0) ⊕ H(Li
β,1) ⊕ Li
, Li
α,Λα
β,Λβ
H(Li
= H(Li
α,Λα) ⊕ H(Li
α,0) ⊕ H(Li
) ⊕ Λα · Ai
1 ⊕ Li
α,Λα)
β,0) ⊕ ΛαRi ⊕ ΛβSi ⊕ ΛαΛβ∆i.
0 ⊕ Λβ · (Ai
β,Λβ
2. Evaluate classical garbling portion. Let u = Λα and v = Λβ. Then, the evaluator P1 can compute
(cid:8)Mj[ri
uv](cid:9)
j(cid:54)=i,1 := H(cid:48)(Li
α,Λα, Li
β,Λβ
) ⊕ Bi
uv,
where Mj[ri
uv] is Pi’s share of Λγ∆j for j (cid:54)= i.
3. P1 can compute its share Mi[r1
uv] of Λγ∆i for each i (cid:54)= 1. Then, P1 combines them with the above
results as follows:(cid:0)H(Li
α,0) ⊕ H(Li
α,0) ⊕ H(Li
β,0) ⊕ ΛαRi ⊕ ΛβSi ⊕ ΛαΛβ∆i
β,0) ⊕ Ti ⊕ Λγ∆i = Li
γ,0 ⊕ Λγ∆i = Li
j(cid:54)=iMi[rj
γ,Λγ .
= H(Li
(cid:1) ⊕(cid:0)(cid:76)
uv](cid:1)
10
The correctness holds because
Λγ∆i = ΛαΛβ∆i ⊕ Λαλβ∆i ⊕ Λβλα∆i ⊕ (λαλβ ⊕ λγ)∆i
(cid:0)(cid:76)
= ΛαΛβ∆i ⊕ Λα
(cid:1) ⊕ Λβ
=(cid:0)ΛαΛβ∆i ⊕ ΛαRi ⊕ ΛβSi ⊕ Ti
=(cid:0)ΛαΛβ∆i ⊕ ΛαRi ⊕ ΛβSi ⊕ Ti
i∈[n] Ri
(cid:0)(cid:76)
(cid:1) ⊕(cid:0)(cid:76)
(cid:1) ⊕(cid:0)(cid:76)
(cid:1) ⊕(cid:0)(cid:76)
(cid:1)
j(cid:54)=i(ΛαRj ⊕ ΛβSj ⊕ Tj)(cid:1)
uv](cid:1),
j(cid:54)=i Mi[rj
i∈[n] Ti
i∈[n] Si
where Λγ = (Λα ⊕ λα) ∧ (Λβ ⊕ λβ) ⊕ λγ and Mi[rj
uv] = ΛαRj ⊕ ΛβSj ⊕ Tj is Pj’s share of Λγ∆i.
As a result, we can reduce the communication per AND gate from each garbler by 2κ bits in the function-
dependent phase. We refer the reader to Section 4 for the detailed construction.
2.6 Batch Circuit Authentication in the Multi-Party Setting
In this section, we focus on the circuit authentication part, which is used to authenticate the correctness of a
garbled circuit. Speciﬁcally, this part roughly works as follows:
– In the preprocessing phase, for each AND gate (α, β, γ,∧), every party Pi holds authenticated shares of
λα, λβ, λγ and λαβ = λα · λβ.
– After evaluating the distributed garbled circuit in the online phase, for each wire w, the evaluator P1
obtains a public value Λw, which is the XOR of the actual value on the wire (based on the input) and a
wire mask λw. P1 would like to check correctness of all public values by using the above authenticated
shares. In particular, it will guarantee that for each AND gate, the actual values on the wires form an
AND relationship.
Prior solution. For each AND gate (α, β, γ,∧) and u, v ∈ {0, 1}, we deﬁne ruv = (u ⊕ λα) ∧ (v ⊕
λβ) ⊕ λγ. In the original WRK protocol [WRK17b], the circuit authentication was essentially done by
encrypting authenticated bits of the form (ri
uv is Pi’s share of ruv.
This because the garblers do not know the public values at the stage of garbling. When incorporating the
optimization [WRK17a] into the protocol, their solution requires 4ρ bits of communication per AND gate
in the function-dependent phase.
uv]) in each garbled row, where ri
uv, M1[ri
γ and t2
Katz et al. [KRRW18] observed that in the two-party setting, such circuit authentication can be done in a
batch, which reduces the communication to 1 bit per AND gate. In particular, evaluator P1 needs to send the
public values on the output wires of all AND gates to P2, as P2 cannot evaluate the circuit. For each AND
gate (α, β, γ,∧), for correctness of Λγ, it sufﬁces to show that tγ = (Λα⊕λα)∧(Λβ⊕λβ)⊕(Λγ⊕λγ) = 0.
Two parties compute the authenticated shares t1
γ of tγ by using the authenticated shares of λα, λβ,
λγ and λα · λβ. Then P2 sends M1[t2
γ] to P1, who checks its validity by comparing it with K1[t2
γ∆1,
where tγ = 0 if and only if t1
γ. This authentication procedure can be made in a batch for all AND
γ = t2
gates by checking whether H({M1[t2
w]}w∈W ) = H({K1[t2
w∆1}w∈W ). A malicious P1 may ﬂip some
w] ⊕ t1
public values, and reveals some secret shares held by P2 from such authentication, which may break the
privacy. To prevent the attack, P1 also needs to send H({M2[t1
w]}w∈W ) to P2 who checks that it is equal to
H({K2[t1
w∆2}w∈W ). This solution does not extend to the multi-party setting directly, because when
there are multiple garblers, P1 only knows t1
Our solution. For each wire w ∈ W, we let P1 check that tw =(cid:76)
to all other parties, where tw is deﬁned as above. In a naive approach, each garbler Pi sends (ti
w, M1[ti
P1, who checks that M1[ti
By optimizing the approach with batched MAC check, the communication is reduced to |C| + κ bits.
w = 0, after P1 sends {Λw}w∈W
w]) to
w∆1. This requires |C|· (κ + 1) bits of communication per garbler.
γ for i (cid:54)= 1.
i∈[n] ti
γ but not individual ti
w] = K1[ti
w] ⊕ t2
γ] ⊕ t1
w]⊕ ti
We propose a new circuit authentication procedure in the multi-party setting based on an almost-universal
linear hash function H (as deﬁned in Appendix A.2), which further reduces the communication per garbler
11
w]}w∈W ) ∈ F2κ to P1, and P1 computes
i∈[n] zi = 0. As H is XOR-homomorphic,
w∆1 for each wire w ∈ W. For each w ∈ W, tw = 0 if and only if
w∆1 = tw∆1 = 0.
w] ⊕ M1[ti
i∈[n] ti
w] ⊕ t1
i(cid:54)=1 K1[ti
i∈[n] M1[ti