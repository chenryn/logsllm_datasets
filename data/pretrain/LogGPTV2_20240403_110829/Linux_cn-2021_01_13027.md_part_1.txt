---
author: Red Hat
category: 代码英雄
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 8354
date: '2021-01-18 12:22:00'
editorchoice: false
excerpt: 在20世纪50年代，创造一台会思考的机器似乎只是科幻小说中的情节。然而，John McCarthy决心将其变为现实，并从一种名为LISP的语言开始。
fromurl: https://www.redhat.com/en/command-line-heroes/season-3/talking-to-machines
id: 13027
islctt: true
largepic: /data/attachment/album/202101/18/122208sbgevv2xekbg97zc.png
permalink: /article-13027-1.html
pic: /data/attachment/album/202101/18/122208sbgevv2xekbg97zc.png.thumb.jpg
related:
- displayorder: 0
  raid: 12951
- displayorder: 0
  raid: 13066
reviewer: acyanbird, Northurland, wxy
selector: bestony
summary: 在20世纪50年代，创造一台会思考的机器似乎只是科幻小说中的情节。然而，John McCarthy决心将其变为现实，并从一种名为LISP的语言开始。
tags:
- AI
- 代码英雄
- LISP
thumb: false
title: 《代码英雄》第三季（7）：与机器对话
titlepic: true
translator: bestony
updated: '2021-01-18 12:22:00'
---

> 《代码英雄》讲述了开发人员、程序员、黑客、极客和开源反叛者如何彻底改变技术前景的真实史诗。

### 什么是《代码英雄》

《代码英雄》是由世界领先的企业开源软件解决方案供应商红帽（Red Hat）精心制作的原创音频播客。该节目邀请了来自谷歌、NASA等重量级企业的众多技术大牛，共同讲述开源、操作系统、容器、DevOps、混合云等领域的发展过程中的动人故事。

![](/data/attachment/album/202101/18/122208sbgevv2xekbg97zc.png)

本文是《[代码英雄](https://www.redhat.com/en/command-line-heroes)》系列播客[《代码英雄》第三季（7）：与机器对话](https://www.redhat.com/en/command-line-heroes/season-3/heroes-in-a-bash-shell)的[音频脚本](https://cdn.simplecast.com/audio/a88fbe/a88fbe81-5614-4834-8a78-24c287debbe6/8e47deb9-b0ab-4d3b-a4be-7b0f1037ced0/CLH_S3_E7_Talking_to_Machines_LISP_and_the_Origins_of_A_I_vFINAL_tc.mp3)。

### 导读

在20世纪50年代，创造一台会思考的机器似乎只是科幻小说中的情节。然而，John McCarthy决心将其变为现实，并从一种名为LISP的语言开始。Colin Garvey介绍了McCarthy是如何创造出第一种人工智能语言的。Sam Williams探讨了早期人们对思考机器的兴趣如何从学术界蔓延到商业界，以及某些项目未能兑现承诺后，漫长的人工智能寒冬是如何到来的。Ulrich Drepper解释说，当时硬件的能力还不足以实现人工智能的梦想。但随着硬件变得越来越强大，Chris Nicholson指出，今天的机器已经具备足够的处理能力来应对人工智能的需求，从而迎来了人工智能研发的复兴。最后，Rachel Thomas确定了LISP之外的人工智能语言，展示了人工智能现在可以完成的不同类型的任务。

**00:00:05 - 播音员**

卡斯帕罗夫非常慌乱。尽管他拼尽全力，但最终还是输了。

**00:00:12 - Saron Yitbarek**

1997年春天，国际象棋冠军加里·卡斯帕罗夫输给了计算机程序“深蓝”。对于机器智能来说，这是一个历史性的时刻。对某些人来说，这是一次生存危机，是对人类智慧至上的挑战。但对于技术专家来说，这是人工智能领域的一个里程碑。它表明，真正的智能机器不再是遥不可及的梦想。

**00:00:47 - 播音员**

赋予机器思考的能力仍然是一个梦想，实现这一目标还需要多年的努力和许多惊人的突破。

**00:00:56 - Saron Yitbarek**

我们是如何走到这一步的？是什么导致了卡斯帕罗夫那场著名的失败？我们从哪里来，又将去往何处？我是Saron Yitbarek，这里是《代码英雄》，一档来自红帽的原创播客节目。在本季中，我们将探索编程语言的奥秘，揭开它们的历史和发展潜力。本期我们将关注人工智能。你会使用什么语言让你的机器拥有自己的思想呢？我们的编程语言如何帮助我们达到“深蓝时刻”，甚至是更远的地方？什么样的编程语言最适合会思考的机器？这是我们半个多世纪以来一直在尝试解决的问题。因此，我们的故事要追溯到1940年代，那时“人工智能”这个词还没有被创造出来。

**00:01:59**

回顾二战结束时，有一种感觉是技术帮助同盟国赢得了战争。人们乐观地认为科技可以成就一切。整整一代人都相信计算机的力量。在这一代人中诞生了人工智能的教父——杰出的数学家John McCarthy，他从根本上改变了我们与机器交流的方式。我想知道他的思想起源，以及这种范式转变是如何发生的。麦卡锡和他的同事们在想象智能机器的未来时，究竟想象了什么？

**00:02:43 - Colin Garvey**

这是一个很好的问题。

**00:02:46 - Saron Yitbarek**

我和Colin Garvey聊了聊。他是伦斯勒理工学院科学与技术研究系的历史学家。以下是我们的一些聊天内容：

**00:02:58 - Colin Garvey**

麦卡锡对定义人工智能非常谨慎。例如，在他最著名但未实现的程序中，他描述了一种称为“接受建议者”的概念。他在1960年的论文《具有常识的程序》中提出了这个概念。最初，你可能会认为接受建议者是一个学习型机器人，它可以接受建议并理解你的意思。例如，你说：“不，你这样做是错误的，要那样做。”它就会明白你的意思。

**00:03:44 - Saron Yitbarek**

这很有帮助。

**00:03:45 - Colin Garvey**

确实有帮助。接受建议者的目的是从办公室导航到机场。换句话说，将从办公室去机场的建议正式化为接受建议者机器人能够理解的程序。它将人类的语言形式化为一系列逻辑陈述，根据当前情况做出合适的抉择，以达到理想状态。这些想法后来变成了伪代码，实际上是LISP的起源。接下来的几年里，LISP作为一种实现这些想法的语言出现了。

**00:04:39 - Saron Yitbarek**

麦卡锡的LISP语言改变了游戏规则。它不仅帮助机器理解命令，还帮助机器理解一些常识性逻辑。麦卡锡发现，他可以编写条件表达式，即体现规则的代码，而不仅仅是简单的命令。实际上，LISP有许多重大的编程突破，如条件表达式、垃圾回收、递归等。LISP在代码和数据中都使用了列表，这是一个简单但影响深远的改变。这是一种语言范式的转变，为麦卡锡本人称之为“人工智能”的整个领域打开了大门。想象一下，当你与机器交谈时，不需要把每一个细节都编写好。你可以让机器自己进行推断和推理。麦卡锡希望通过他的LISP语言，给机器一种智慧。好了，回到我和Colin Garvey的聊天。

**00:05:41 - Colin Garvey**

LISP是人们尝试编写高级计算机语言的过程中诞生的精华。

**00:05:47 - Saron Yitbarek**

这很有趣。因为我的下一个问题是关于LISP和人工智能之间的关系。接受建议者第一次描述了AI的功能，听起来也像是LISP的开始。你能谈谈更多关于LISP和人工智能之间的关系吗？

**00:06:04 - Colin Garvey**

当然。早期的人工智能研究人员面临的一个问题是他们还在使用打孔卡进行编程。也许这些早期的编程人员知道如何进行机器码级别的编程，但这是一项非常困难且耗时的工作。因此，需要一种更高级的编程语言，以便可以用更接近人类语言的方式编程。像LISP这样的语言，通过列表的形式给出指令——这也是其名称的来源，基于列表的处理（LCTT译注：LISP全称：“LISt Processing”）。从某种意义上说，用列表给出的指令更接近于人类语言，因为它们基本上都可以用通顺的逻辑去理解。因此，如果你能读懂形式逻辑，那么基本上可以看懂LISP程序或任何基于逻辑的编程语言的程序，并更好地了解代码中发生的事情。
---