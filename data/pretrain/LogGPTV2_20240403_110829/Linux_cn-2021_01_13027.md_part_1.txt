---
author: Red Hat
category: 代码英雄
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 8354
date: '2021-01-18 12:22:00'
editorchoice: false
excerpt: 创造一台会思考的机器在 20 世纪 50 年代似乎是科幻小说。但 John McCarthy 决定把它变成现实。他从一种叫做 LISP 的语言开始。
fromurl: https://www.redhat.com/en/command-line-heroes/season-3/talking-to-machines
id: 13027
islctt: true
largepic: /data/attachment/album/202101/18/122208sbgevv2xekbg97zc.png
permalink: /article-13027-1.html
pic: /data/attachment/album/202101/18/122208sbgevv2xekbg97zc.png.thumb.jpg
related:
- displayorder: 0
  raid: 12951
- displayorder: 0
  raid: 13066
reviewer: acyanbird, Northurland, wxy
selector: bestony
summary: 创造一台会思考的机器在 20 世纪 50 年代似乎是科幻小说。但 John McCarthy 决定把它变成现实。他从一种叫做 LISP 的语言开始。
tags:
- AI
- 代码英雄
- LISP
thumb: false
title: 《代码英雄》第三季（7）：与机器对话
titlepic: true
translator: bestony
updated: '2021-01-18 12:22:00'
---
> 
> 代码英雄讲述了开发人员、程序员、黑客、极客和开源反叛者如何彻底改变技术前景的真实史诗。
> 
> 
> 
> 
> **什么是《代码英雄》**
> 
> 
>  代码英雄   Command Line Heroes 是世界领先的企业开源软件解决方案供应商红帽（Red Hat）精心制作的原创音频播客，讲述开发人员、程序员、黑客、极客和开源反叛者如何彻底改变技术前景的真实史诗。该音频博客邀请到了谷歌、NASA 等重量级企业的众多技术大牛共同讲述开源、操作系统、容器、DevOps、混合云等发展过程中的动人故事。
> 
> 
> 
![](/data/attachment/album/202101/18/122208sbgevv2xekbg97zc.png)
本文是《[代码英雄](https://www.redhat.com/en/command-line-heroes)》系列播客[《代码英雄》第三季（7）：与机器对话](https://www.redhat.com/en/command-line-heroes/season-3/heroes-in-a-bash-shell)的[音频](https://cdn.simplecast.com/audio/a88fbe/a88fbe81-5614-4834-8a78-24c287debbe6/8e47deb9-b0ab-4d3b-a4be-7b0f1037ced0/CLH_S3_E7_Talking_to_Machines_LISP_and_the_Origins_of_A_I_vFINAL_tc.mp3)脚本。
> 
> 导读：创造一台会思考的机器在 20 世纪 50 年代似乎是科幻小说。但 John McCarthy 决定把它变成现实。他从一种叫做 LISP 的语言开始。Colin Garvey 介绍了 McCarthy 是如何创造出第一种人工智能语言的。Sam Williams 介绍了早期人们对思考机器的兴趣是如何从学术界蔓延到商业界的，以及在某些项目没有兑现承诺之后，漫长的人工智能寒冬是如何最终到来的。Ulrich Drepper 解释说，人工智能的梦想超出了当时硬件所能提供的范围。
> 
> 
> 但硬件每天都在变得更强大。Chris Nicholson 指出，今天的机器有足够的处理能力来处理人工智能的资源需求 —— 以至于我们正处于人工智能研发的革命性复苏之中。最后，Rachel Thomas 确定了 LISP 之外的人工智能语言 —— 证明了人工智能现在正准备做的不同类型的任务。
> 
> 
> 
> 
> **00:00:05 - 播音员**：
> 
> 
> 卡斯帕罗夫非常慌乱。虽然已经拼尽全力，但是他意识到，他已经输了。
> 
> 
> 
**00:00:12 - Saron Yitbarek**：
1997 年的春天，国际象棋冠军 加里·卡斯帕罗夫   Garry Kasparov 输给了计算机程序“深蓝”。对于机器智能来说，这是历史上的关键时刻。对于某些人来说，这是一次生存危机，是对人类智慧至上的挑战。但是，对于世界上的技术专家来说，这是另一种意味上的里程碑，是 人工智能   artificial intelligence （AI）领域的一次飞跃。这表明，想要真正的智慧机器诞生，或许不是太过于疯狂的梦想。
> 
> **00:00:47 - 播音员**：
> 
> 
> 去赋予一台机器思考的能力仍然还是梦想，距离实现梦想还需要很多年的努力。此外，还需要做出不少惊人的突破。
> 
> 
> 
**00:00:56 - Saron Yitbarek**：
我们是如何抵达这一步的？是什么导致了卡斯帕罗夫那场著名的失败？我们从哪里来，又该到哪里去？我是 Saron Yitbarek，这里是《代码英雄》，一档来自红帽的原创播客节目。在本季，我们都在探索编程语言的奥秘，揭开他们的历史和发展潜力。这一期让我们关注人工智能。你会使用什么语言，来让你的机器拥有自己的思想呢？我们的编程语言如何帮助我们抵达“深蓝时刻”，甚至是更远的地方？什么样的编程语言能最适配会思考的机器？这是我们半个多世纪以来一直在尝试解决的问题。因此，我们的故事要追溯到 1940 年代，那时，人工智能这个词汇还没有被创造出来。
**00:01:59**:
回顾二战结束是如何结束的，我们有这样一种感觉，那就是技术帮助同盟国赢得了战争。人们乐观地认为，科技可以成就一切。整整一代人都相信计算机的力量。在这一代人中诞生了人工智能的教父，一位出色的数学家 ——  约翰·麦卡锡   John McCarthy ，他从根本上改变了我们与机器交谈的方式。我想知道他的思想的起源，以及范式的转变是如何发生的。我的意思是，对于初学者来说，当麦卡锡和他的同事们在想象智能机器的未来时，他们到底想象了什么？
**00:02:43 - Colin Garvey**：
哇，这是一个好问题。
**00:02:46 - Saron Yitbarek**：
我和 Colin Garvey 聊了聊。他是 伦斯勒理工学院   Rensselaer Polytechnic Institute 科学与技术研究系的历史学家。以下是我们的一些聊天内容：
**00:02:58 - Colin Garvey**：
麦卡锡对提出 AI 究竟是什么这件事情非常谨慎。不过，举个例子来说，他可能在他最著名但并未实现的程序中描述过（这只是一个思路），人工智能是一个 接受建议者   advice taker 。接受建议者这个说法由麦卡锡于 1960 年的名为《 具有常识的程序   Programs with Common Sense 》的论文中提出的。在开始的时候，你觉得接受建议者可能是一个会学习的机器人，这是它被发明的本意，它算是一个可以接受建议的家用机器人。你说：“不，你这样做是错误的，要那样做。”它就会明白你的意思。
**00:03:44 - Saron Yitbarek**：
那很有帮助。
**00:03:45 - Colin Garvey**：
可能会有帮助。那时候接受建议者要实现的目标是，从办公室导航到机场。换句话说，将从办公室去机场这个建议，正式化成接受建议者机器人能够接受的程序以达成目的，得出从办公室前往机场的一系列程序。它把人类的语言正式化为一系列的合乎逻辑的陈述，即需要根据现在的情况进行合适的抉择，以达到把当前情况转变为理想情况的目标。他将这些想法伪代码化，这实际上是 LISP 的起源。然后在接下来的几年里，LISP 作为他想法的实现，或者说实现他想法的语言出现了。
**00:04:39 - Saron Yitbarek**：
麦卡锡的 LISP 语言改变了游戏规则。它不仅能帮助机器理解命令，还能帮助机器理解一些常识性的逻辑。麦卡锡发现，他可以编写条件表达式，即体现规则的代码，而不是仅仅是直白的命令。实际上，LISP 有一堆重大的编程突破，条件表达式、垃圾回收、递归等等。LISP 在代码和数据中都使用了列表。这是一个简单但具有深远的影响的更改。这是语言范式的转变，所有这些为麦卡锡本人称之为“人工智能”的整个领域打开了大门。想象一下，在你和机器说话的时候，并不需要把每一个细节都给编写好。你可以让那台机器自己来进行推断和推理。麦卡锡希望通过他的 LISP 语言，给机器一种智慧。好了，回到我和 Colin Garvey 的聊天。
**00:05:41 - Colin Garvey**：
LISP 是人们编写高级计算机语言的尝试的过程中，诞生的精华。
**00:05:47 - Saron Yitbarek**：
这很有意思。因为我的下一个问题是 LISP 和人工智能之间的关系。接受建议者第一次描述了 AI 的功能，它听起来也像是 LISP 的开始。能跟我聊聊更多 LISP 和人工智能之间的关系吗？
**00:06:04 - Colin Garvey**：
当然。这些早期的人工智能研究人员面临着一件事，那就是他们还在使用打孔卡进行编程。也许这些早期的编程人员，知道如何进行机器码级别的编程，这是非常困难且耗时的工作。因此，你需要一个更高级的编程语言，以便你可以用更加接近人类语言的方式编程。所以，像 LISP 这样，用列表的形式给出指令的语言 —— 这也是其名称的来源，基于列表的处理（LCTT 译注，LISP 全称：“LISt Processing“）。从某种意义上来说，这样用列表给出的指令更加接近于人类语言，因为他们基本上都可以用通顺的逻辑去理解。因此，如果你可以读懂 形式逻辑   formal logic ，那么基本上可以看明白 LISP 程序，或者任何基于逻辑的编程语言的程序，并对于代码中发生的事情有着更好的了解。