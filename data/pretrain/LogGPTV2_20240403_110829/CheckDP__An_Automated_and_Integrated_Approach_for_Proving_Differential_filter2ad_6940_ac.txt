variables as an optimization: as we show shortly, it helps to reduce
the code size for later stages (Section 3.3) as well as aids proof
template generation (Section 3.4).
Note that boolean types (bool) and list types (list τ) cannot
be associated with numeric distances, hence omitted in the syntax.
However, nested cases such as list num∗ still accurately track the
distances of the elements inside the list.
The semantics of CheckDP follows the standard definitions of
probabilistic programs [37]; the formal semantics can be found
in the Appendix. Finally, CheckDP also supports shadow execu-
tion, a technique that underpins ShadowDP [50] and is crucial to
the verification of challenging mechanisms such as Report Noisy
Max [25]. However, in order to focus on the most interesting parts
of CheckDP, we first present the transformation without shadow
execution, and later discuss how to support it.
3.2 Program Transformation
CheckDP is equipped with a flow-sensitive type system whose
typing rules are shown in Figure 3. At command level, each rule has
the following format:⊢ Γ {c ⇀ c′} Γ′ where a typing environment Γ
tracks for each program variable its type with distance, c and c′ are
the source and target programs respectively, and the flow-sensitive
type system also updates typing environment to Γ′ after command c.
At a high-level, the type system transforms the probabilistic source
code c into the non-probabilistic target code c′ in a way that if all
assertions in c′ holds, then c is differentially private.
CheckDP’s program transformation is motivated by those of
LightDP and ShadowDP [50, 51], all built on randomness alignment
proof. However, there are a few important differences:
• CheckDP generates an alignment template for each sampling in-
struction, rather than requiring manually provided alignments.
• CheckDP defers all privacy-related checks to assertions. This is
crucial since information needed for proof and counterexample
generation is unavailable in a lightweight static type system.
Transformation rules for expressions with form Γ ⊢ e : Bn
(T-Boolean)
(T-Num)
Γ ⊢ b : bool | true
Γ ⊢ e : bool | C
Γ ⊢ ¬e : bool | C (T-Neg)
(T-VarStar)
Γ ⊢ r : num0 | true
Γ, x : B∗ ⊢ x : B(cid:98)x | true
Γ ⊢ e1 : numn1 | C1
Γ ⊢ e1 ⊗ e2 : num0 | C1 ∧ C2 ∧ (n1 = n2 = 0) (T-OTimes)
Γ ⊢ e1 : Bn1 | C1
Γ ⊢ e1 :: e2 : list Bn | C1 ∧ C2 ∧ (n1 = n2 = 0) (T-Cons)
Γ ⊢ e2 : list Bn2 | C2
Γ ⊢ e2 : numn2 | C2
Γ, x : B0 ⊢ x : B0 | true
(T-VarZero)
Γ ⊢ e1 : Bn1 | C1
Γ ⊢ e2 : Bn2 | C2
Γ ⊢ e1 ⊕ e2 : Bn1⊕n2 | C1 ∧ C2
(T-OPlus)
Γ ⊢ e1 : numn1 | C1
Γ ⊢ e1 ⊙ e2 : bool | C1 ∧ C2 ∧
Γ ⊢ e1 : numn2 | C2
(e1 ⊙ e2) ⇔
(e1 + n1) ⊙ (e2 + n2)
Γ ⊢ e2 : numn | C2
(T-ODot)
(T-Index)
Γ ⊢ e1 : list τ | C1
Γ ⊢ e1[e2] : τ | C1 ∧ C2 ∧ (n = 0)
Γ ⊢ e1 : bool | C1
Γ ⊢ e2 : Bn1 | C2
Γ ⊢ e3 : Bn2 | C3
Γ ⊢ e1 ? e2 : e3 : Bn1 | C1 ∧ C2 ∧ C3 ∧ (n1 = n2)
(T-Select)
Transformation rules for commands with form ⊢ Γ {c ⇀ c′} Γ′
if n == 0,
Γ ⊢ e : Bn | C ⟨d, c⟩ =
⊢ Γ {x := e; ⇀ assert(C); x := e; c } Γ[x (cid:55)→ Bd]
(cid:40)⟨0, skip⟩,
⟨∗, (cid:98)x := n⟩, otherwise
Γ ⊢ e : Bn | C
⊢ Γ {return e ⇀ assert(C ∧ n = 0); return e } Γ
(T-Asgn)
(T-Return)
⊢ Γ {c1 ⇀ c′
1} Γ1
⊢ Γ1 {c2 ⇀ c′
2} Γ2
⊢ Γ {c1; c2 ⇀ c′
1; c′
2} Γ2
(T-Seq)
⊢ Γ {skip ⇀ skip} Γ
(T-Skip)
⊢ Γ ⊔ Γf {c ⇀ c′} Γf
⊢ Γ {while e do c ⇀ cs ;(while e do (assert((cid:76)e, Γ(cid:77)◦); c′; c′′))} Γ ⊔ Γf
Γf , Γ ⊔ Γf ⇛ c′′
Γ, Γ ⊔ Γf ⇛ cs
(T-While)
i } Γi
⊢ Γ {ci ⇀ c′
Γi, Γ1 ⊔ Γ2 ⇛ c′′
⊢ Γ {if e then c1 else c2 ⇀ if e then (assert((cid:76)e, Γ(cid:77)◦); c′
1 ) else (assert(¬(cid:76)e, Γ(cid:77)◦); c′
2; c′′
1; c′′
⊢ Γ {ca; η := Lap r ⇀ η := sample[idx]; idx := idx + 1; vϵ := vϵ + | A |/r;(cid:98)η := A ; } Γ[η (cid:55)→ num∗]
2 )} Γ1 ⊔ Γ2
ca = assert(((η + A){η1/η} = (η + A){η2/η} ⇒ η1 = η2))
A = GenerateTemplate(Γ, All Assertions)
i ∈ {1, 2}
i
(T-If)
(T-Laplace)
Transformation rules for merging environments
Γ1 ⊑ Γ2
c = {(cid:98)x := 0 | Γ1(x) = num0 ∧ Γ2(x) = num∗}
Γ1, Γ2 ⇛ c
Figure 3: Program transformation rules. Distinguished variable vϵ and assertions are added to ensure differential privacy.
• CheckDP only tracks if a variable has the same value in two
related runs (with distance 0) or not (with distance ∗). This
design aids alignment template generation and reduces the size
of transformed code.
Checking Expressions. Each typing rule for expression e computes
the correct distance for its resulting value: Γ ⊢ e : Bn | C, which
reads as: expression e has type B and distance n under the typing
environment Γ if the constraints C are satisfied. The reason to
collect constraints C instead of statically checking them, is to defer
all privacy-related checks to later stages.
Most of the expression rules are straightforward: they check the
base types (just like a traditional type system) and compute the
distance of e’s value in two related runs. For example, all constants
must be identical (Rules (T-Num,T-Boolean)) and the distance of a
variable is retrieved from the environment (T-VarZero,T-VarStar)
(note that rule (T-VarStar) just desugers the ∗ notation). For linear
operation (⊕), the distance of the result is computed in a precise
way (Rule (T-OPlus)), while the other operations are treated in a
more conservative way: constraints are generated to ensure that
the result is identical in Rules (T-OTimes, T-ODot). For example,
(T-ODot) ensures boolean value of e1 ⊙ e2 will be the same in two
related runs by adding a constraint
(e1 ⊙ e2) ⇔ (e1 + n1) ⊙ (e2 + n2)
(T-Cons) restricts constructed list elements to have 0-distance (note
that the restriction does not apply to input lists), while (T-Index)
requires the index to have zero-distance. Rule (T-Select) restricts
e1 and e2 to have the same distance. The constraints gathered in the
6
expression rules will later be explicitly instrumented as assertions
in the translated programs, which we will explain shortly.
3.4 Checking Sampling Commands
Rule (T-Laplace) performs a few important tasks:
3.3 Checking Commands
For each program statement, the type system updates the typing en-
vironment and if necessary, instruments code to update(cid:98)x variables
to the correct distances. Moreover, it ensures that the two related
runs take the same branch in if-statement and while-statement.
tain the corresponding(cid:98)x variables. The most interesting rules are:
optimizes away updates to(cid:98)x and properly downgrades type to B0
Flow-Sensitivity. Each typing rule updates the typing environ-
ment to track if a variable has zero-distance. When a variable has
non-zero distance, it instruments the source code to properly main-
rule (T-Asgn) properly promotes the type of x to be B∗ (tracked by
distance variables) in Γ′ if the distance of e is not 0. Meanwhile it
if e has a zero-distance. For example, line 16 in GapSVT (Figure 1)
is instrumented to update distance of Tη, according to the distance
of T + η1. Moreover, variable count in GapSVT always has the type
num0; therefore its distance variable never appears in the translated
program due to the optimization in (T-Asgn).
Rule (T-If) and (T-While) are more complicated since they both
need to merge environments. In rule (T-If), as c1 and c2 might
update Γ to Γ1 and Γ2 respectively, we need to merge them in a
natural way: the distance of a type form a two-level lattice with
0 ⊏ ∗. Thus we define a union operator ⊔ for distances d as:
(cid:40)
d1 ⊔ d2 ≜
d1
∗
if d1 = d2
otherwise
therefore the union operator for two environments are defined as
follows: Γ1 ⊔ Γ2 = λx . Γ1[x] ⊔ Γ2[x].
Moreover, we use an auxiliary function Γ1, Γ2 ⇛ c to “promote”
a variable to star type. For example, with Γ(x) = ∗, Γ(y) = ∗ and
Γ(b) = 0, rule (T-If) translates the source code
if b then x := y else x := 1 to the following:
if b then (x := y;(cid:98)x :=(cid:98)y;) else (x := 1;(cid:98)x := 0)
where(cid:98)x :=(cid:98)y is instrumented by (T-Asgn) and(cid:98)x := 0 is instru-
mented due to the promotion.
Similarly, the typing environments are merged in rule (T-While),
except that it requires a fixed point Γf such that ⊢ Γ ⊔ Γf {c} Γf .
We follow the construction in [50] to compute a fixed point, noting
that the computation always terminates since all of the translation
rules are monotonic and the lattice only has two levels.
Assertion Generation. To ensure differential privacy, the type
system inserts assertion in various rules:
• To ensure that two related runs take the same control flow, (T-
If) and (T-While) asserts that the value of the branch condition
stays the same across two related executions. A helper function
(cid:76)e, Γ(cid:77)◦ is used to compute the value of e in the aligned execution;
its full definition can be found in the Appendix.
• To ensure that the final output value is differentially private,
rule (T-Return) asserts that its distance is zero (i.e., identical
in two related runs).
• To ensure all constraints collected in the expression rules are
satisfied, assignment rules (T-Asgn) and (T-AsgnStar) also
insert corresponding assertions.
7
Replacing Sampling Command. Rule (T-Laplace) removes the
sampling instruction and assign to η the next (unknown) sample
value sample[idx], where sample is a parameter of type list num
added to the transformed code. The typing rule also increments idx
so that the next sampling command will read out the next value.
Checking Injectivity. T-Laplace adds an assertion ca to check the
injectivity of the generated alignment (a fundamental requirement
of alignment-based proofs): the same aligned value of η implies the
same value of η in the original execution.
Tracking Privacy Cost. A distinguished privacy cost variable vϵ
is also instrumented to track the cost for aligning the random vari-
ables in the program. Due to the properties of Laplace distribution,
for a sampling command η := Lap r with alignment template A, we
have P(η)/P(η +A) ≤ e|A|/r . Hence, the privacy cost for aligning η
by A is|A| /r. Note that the symbols in gray, including A, are place-
holders when the rule is applied, since function GenerateTemplate
takes all assertions in the transformed code as inputs. Once trans-
lation is complete, the placeholders are filled in by the algorithm
that we discuss in Section 4.
Alignment Template Generation. For each sampling command
η := Lap r, an alignment of η is needed in a randomness alignment
proof. In its most flexible form, the alignment can be written as
any numerical expression n, which is prohibitive for our goal of
automatic proof generation. On the other hand, using simple heuris-
tics such as only considering constant alignment does not work:
for example, the correct alignment for η2 in GapSVT is written as
“(q[i] + η2 ≥ Tη) ? (1 −(cid:98)q[i]) : 0”, where the alignment actually
depends on which branch is taken during the execution.
To tackle the challenges, CheckDP generates an alignment tem-
plate for each sampling instruction; a template is a numerical ex-
pression with “holes” whose values are to be searched for in later
stages. For example, the template generated for η2 in GapSVT is
(q[i] + η2 ≥ Tη)?(θ[0] + θ[1] ×(cid:98)Tη + θ[2] ×(cid:98)q[i]):
(θ[3] + θ[4] ×(cid:98)Tη + θ[5] ×(cid:98)q[i])
where θ[0] − θ[5] are symbolic coefficients to be found later.
In general, for each sampling command η = Lap r, CheckDP
first uses static program analysis to find a set of relevant program
expressions, denoted by E, and a set of relevant program variables,
denoted by V (as described shortly). Second, it generates an align-
ment template as follows:
e0 ? AE\{e0} : AE\{e0}, when E = {e0, · · · }
AE ::=
where θ denotes coefficients (“holes”) to be filled out out by later
stages and each of them is generated fresh.
vi ∈V θi × viwith fresh θ0, · · · , θ|V|, otherwise
To find proper E and V, our insight is that the alignments serve
to “cancel out” the differences between two related runs (i.e., to
make all assertions pass). Algorithm 1 follows the insight to com-
pute E and V for each sampling instruction: it takes Γs, the typing
environment right before the sampling instruction and A, all asser-
tions in the transformed code, as inputs. It also assumes an oracle
(cid:40)
θ0 +
Depends(e, x) which returns true whenever the expression e de-
pends on the variable x. We note that the oracle can be implemented
as standard program dependency analysis [2, 31] or information
flow analysis [12]; hence, we omit the details in this paper.
A: set of the generated assertions in the program
Algorithm 1: Template generation for η := Lap r
input: Γs: typing environment at sampling command
1 function GenerateTemplate(Γs , A):
2
3
4
5
6
7
E ← ∅, V ← ∅
foreach assert(e) ∈ A do
if Depends(e, η) then
if assert(e) is generated by (T-If) then
e′ ← the branch condition of if
E ← E ∪ {e′}
if Γs ̸⊢ v : B0 ∧ Depends(e, v) then
foreach v ∈ V ars ∪ {e1[e2]|e1[e2] ∈ e} do
V ← V ∪ {v}
8
9
10
11
12
13
foreach e ∈ E ∪ V do
remove e from E and V if not in scope
return E,V;
such as q[i] used in e. Hence, we only need to consider(cid:98)v if (1) v
The algorithm first checks (at line 4) if aligning η has a chance to
make an assertion pass. If so, it will increment E and V as follows.
For E, we notice that only for the assertions generated by rule (T-If),
depending on the branch condition allows the alignment to have
different values under different branches. Hence, we add the branch
condition to E in this case. For V, our goal is to use the alignment to
“cancel” the differences caused by other variables and array elements
is different between two related runs (i.e., Γs ̸⊢ v : B0) and (2) v
contributes the assertion (i.e., e depends on v).
Finally, the algorithm performs a “scope check”: if any element in
E or V contains out-of-scope variables, then the element is excluded;
for example, η1 should not depend on q[i] in GapSVT since q[i],
essentially an iterator of q, is not in scope at that point.
Consider η1 and η2 in GapSVT. The assertions in the translated
programs are (we only list the assertion in the true branch since