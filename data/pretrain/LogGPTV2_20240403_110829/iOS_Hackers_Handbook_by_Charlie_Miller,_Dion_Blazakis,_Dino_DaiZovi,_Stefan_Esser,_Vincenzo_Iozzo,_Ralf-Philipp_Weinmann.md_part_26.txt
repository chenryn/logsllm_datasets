Therefore, the allocator fi rst looks for already allocated memory pages of the
correct size. If none can be found, it searches for bigger memory blocks and
splits them so that one half can fulfi ll the request and the other is pushed back
to the list of available ones.
Finally, if no memory regions are available, an allocation using mmap() is
performed.
Deallocation
The same distinction made for allocations in terms of regions holds true for
deallocations as well. As a result, deallocation is covered only for tiny memory
objects and large memory objects.
When a tiny object is freed, the allocator puts it in the region cache, that is,
mag_last_free.
The memory area that was previously there is moved to the appropriate free-
list following three steps. First the allocator checks whether the object can be
cc0077..iinndddd 118899 44//1166//22001122 55::4466::1100 PPMM
190 Chapter 7 n Exploitation
coalesced with the previous one, then it verifi es if it can be coalesced with the
following one. Depending on whether any of the coalescing operations were
successful, the object is placed accordingly.
If the size of the object after coalescing it is bigger than the appropriate sizes
for the tiny region, the object is placed in the last freelist (recalling from the
Allocation section, this is the region where objects bigger than expected for a
given region are placed).
When a tiny region contains only freed blocks, the whole region is released
to the system.
The procedure is slightly different for large objects. If the object is larger than
a certain threshold, the object is released immediately to the system. Otherwise,
in a similar fashion to tiny and small, the object is placed in a dedicated position
called large_entry_cache_newest.
The object that was in the most recent position is moved to the large object
cache if there is enough space — that is, if the number of entries in the cache
doesn’t exceed the maximum number of elements allowed to be placed there.
The size of the cache is architecture- and OS-dependent.
If the cache exceeds the size, the object is deallocated without being placed in
the cache. Likewise, if after placing the object in the cache, the cache size grows
too big, the oldest object in the cache is deleted.
Taming the iOS Allocator
In this section you walk through a number of examples that allow you to better
understand the internals of the allocator and how to use it for your own purposes
in the context of exploitation.
Most often you will work directly on the device. The main reason for this
choice is that magazine malloc keeps per-CPU caches of tiny and small regions;
therefore, the behavior on an Intel machine might be too imprecise compared
to the iPhone. Nonetheless, when debugging real-world exploits it might be
desirable to work from a virtual machine running Mac OS X, which is as close as
possible to an iPhone in terms of available RAM and number of CPUs. Another
viable and easier option is to use a jailbroken phone; this grants access to gdb
and a number of other tools.
Tools of the Trade
A number of tools exist to assist in debugging heap-related issues on Mac OS X;
unfortunately, only a small percentage of those are available on non-jailbroken
iPhones.
This section talks about all the available tools both on OS X and iOS, specifying
which ones are available on both platforms and which are available only on OS X.
cc0077..iinndddd 119900 44//1166//22001122 55::4466::1100 PPMM
Chapter 7 n Exploitation 191
A number of environment variables exist to ease the task of debugging. The
most important ones are listed here:
n MallocScribble—Fills freed memory with 0x55
n MallocPreScribble—Fills uninitialized memory with 0xAA
n MallocStackLogging—Records the full history and stack logging of a
memory block (the results can be inspected using malloc_history)
These environment variables can be used both on Mac OS X and iOS.
Another tool useful for determining the types of bugs you are dealing with
is crashwrangler. When an application crashes, it tells the reason of the crash
and whether or not it appears to be exploitable. In general, crashwrangler is not
really good at predicting exploitability, but nonetheless understanding why the
application crashed can be pretty useful.
Finally, you can use Dtrace to inspect allocations and deallocations of memory
blocks on the system allocator. The Mac Hacker’s Handbook shows a number of
Dtrace scripts that can be handy for debugging purposes.
Both Dtrace and crashwrangler are available only for Mac OS X.
Learning Alloc/Dealloc Basics
NOTE Find code for this chapter at our book’s website at. www.wiley.com/
go/ioshackershandbook.
One of the easiest ways to exploit an arithmetic bug in the past was to over-
write heap-metadata information. This is not possible anymore with magazine
malloc. Every time an object is deallocated, its integrity is verifi ed by the fol-
lowing function:
static INLINE void *
free_list_unchecksum_ptr(szone_t *szone, ptr_union *ptr)
{
ptr_union p;
uintptr_t t = ptr->u;
t = (t > ANTI_NYBBLE); // compiles to rotate instruction
p.u = t & ~(uintptr_t)0xF;
if ((t & (uintptr_t)0xF) != free_list_gen_checksum(p.u ^ szone->cookie))
{
free_list_checksum_botch(szone, (free_list_t *)ptr);
return NULL;
}
return p.p;
}
cc0077..iinndddd 119911 44//1166//22001122 55::4466::1100 PPMM
192 Chapter 7 n Exploitation
Specifi cally, when an object is deallocated, the previous and next elements
of its heap metadata are verifi ed by XORing them with a randomly generated
cookie. The result of the XOR is placed in the high four bits of each pointer.
Metadata of objects allocated in the large region are not verifi ed. Nonetheless
the metadata for those objects are stored separately, and therefore classic attacks
against large objects are not feasible either.
Unless an attacker is capable of reading the cookie that is used to verify heap
metadata, the only option left is to overwrite application-specifi c data. For this
reason you should try to become familiar with common operations that can be
used during exploitation.
It is clear that the ability of an attacker to place memory objects close to each
other in memory is pretty important to reliably overwrite application-specifi c data.
To understand better how to control the heap layout, start with a simple
example that illustrates the way objects are allocated and freed. Run this small
application on a test device running iOS:
#defi ne DebugBreak() \
do { \
__asm__(“mov r0, #20\nmov ip, r0\nsvc 128\nmov r1, #37\nmov ip, r1\nmov r1,
#2\nmov r2, #1\n svc 128\n” \
: : : “memory”,”ip”,”r0”,”r1”,”r2”); \
} while (0)
int main(int argc, char *argv[])
{
unsigned long *ptr1, *ptr2, *ptr3, *ptr4;
ptr1 = malloc(24);
ptr2 = malloc(24);
ptr3 = malloc(24);
ptr4 = malloc(24);
memset(ptr1, 0xaa, 24);
memset(ptr2, 0xbb, 24);
memset(ptr3, 0xcc, 24);
DebugBreak();
free(ptr1);
DebugBreak();
free(ptr3);
DebugBreak();
free(ptr2);
DebugBreak();
free(ptr4);
DebugBreak();
@autoreleasepool {
return UIApplicationMain(argc, argv, nil, NSStringFromClass
([bookAppDelegate class]));
}
}
cc0077..iinndddd 119922 44//1166//22001122 55::4466::1100 PPMM
Chapter 7 n Exploitation 193
The application fi rst allocates four buffers in the tiny region and then starts
to free them one by one. We use a macro to cause a software breakpoint so that
Xcode will automatically break into gdb for us while running the application
on the test device.
At the fi rst breakpoint the buffers have been allocated and placed in memory:
GNU gdb 6.3.50-20050815 (Apple version gdb-1708) (Fri Aug 26 04:12:03 UTC 2011)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type “show copying” to see the conditions.
There is absolutely no warranty for GDB. Type “show warranty” for details.
This GDB was confi gured as “--host=i386-apple-darwin
--target=arm-apple-darwin”.tty /dev/ttys002
target remote-mobile /tmp/.XcodeGDBRemote-1923-40
Switching to remote-macosx protocol
mem 0x1000 0x3fffffff cache
mem 0x40000000 0xffffffff none
mem 0x00000000 0x0fff none
[Switching to process 7171 thread 0x1c03]
[Switching to process 7171 thread 0x1c03]
sharedlibrary apply-load-rules all
Current language: auto; currently objective-c
(gdb) x/40x ptr1
0x14fa50: 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa
0x14fa60: 0xaaaaaaaa 0xaaaaaaaa 0x00000000 0x00000000
0x14fa70: 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb
0x14fa80: 0xbbbbbbbb 0xbbbbbbbb 0x00000000 0x00000000
0x14fa90: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc
0x14faa0: 0xcccccccc 0xcccccccc 0x00000000 0x00000000
0x14fab0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fac0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fad0: 0x7665442f 0x706f6c65 0x752f7265 0x6c2f7273
0x14fae0: 0x6c2f6269 0x63586269 0x4465646f 0x67756265
(gdb) c
Continuing.
Next the fi rst object is freed:
Program received signal SIGINT, Interrupt.
main (argc=1, argv=0x2fdffbac) at /Users/snagg/Documents/Book/booktest/
booktest/main.m:34
34 free(ptr3);
(gdb) x/40x ptr1
0x14fa50: 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa 0xaaaaaaaa
0x14fa60: 0xaaaaaaaa 0xaaaaaaaa 0x00000000 0x00000000
0x14fa70: 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb
0x14fa80: 0xbbbbbbbb 0xbbbbbbbb 0x00000000 0x00000000
0x14fa90: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc
0x14faa0: 0xcccccccc 0xcccccccc 0x00000000 0x00000000
0x14fab0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fac0: 0x00000000 0x00000000 0x00000000 0x00000000
cc0077..iinndddd 119933 44//1166//22001122 55::4466::1100 PPMM
194 Chapter 7 n Exploitation
0x14fad0: 0x7665442f 0x706f6c65 0x752f7265 0x6c2f7273
0x14fae0: 0x6c2f6269 0x63586269 0x4465646f 0x67756265
(gdb) c
Continuing.
Nothing in memory layout has changed, and this is in line with what we have
explained before. In fact, at this point only ptr1 was freed and it was placed
accordingly in the mag_last_free cache. Going further:
main (argc=1, argv=0x2fdffbac) at /Users/snagg/Documents/Book/booktest
/booktest/main.m:36
36 free(ptr2);
(gdb) x/40x ptr1
0x14fa50: 0x90000000 0x90000000 0xaaaa0002 0xaaaaaaaa
0x14fa60: 0xaaaaaaaa 0xaaaaaaaa 0x00000000 0x00020000
0x14fa70: 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb
0x14fa80: 0xbbbbbbbb 0xbbbbbbbb 0x00000000 0x00000000
0x14fa90: 0xcccccccc 0xcccccccc 0xcccccccc 0xcccccccc
0x14faa0: 0xcccccccc 0xcccccccc 0x00000000 0x00000000
0x14fab0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fac0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fad0: 0x7665442f 0x706f6c65 0x752f7265 0x6c2f7273
0x14fae0: 0x6c2f6269 0x63586269 0x4465646f 0x67756265
(gdb) c
Continuing.
Now ptr3 was freed as well; therefore, ptr1 had to be taken off the
mag_last_free cache and was actually placed on the freelist. The fi rst two dwords
represent the previous and the next pointer in the freelist. Remembering that
pointers are XORed with a randomly generated cookie, you can easily gather
that both of them are NULL; in fact, the freelist was previously empty. The next
object to be freed is ptr2:
Program received signal SIGINT, Interrupt.
main (argc=1, argv=0x2fdffbac) at /Users/snagg/Documents/Book/booktest
/booktest/main.m:38
38 free(ptr4);
(gdb) x/40x ptr1
0x14fa50: 0x70014fa9 0x90000000 0xaaaa0002 0xaaaaaaaa
0x14fa60: 0xaaaaaaaa 0xaaaaaaaa 0x00000000 0x00020000
0x14fa70: 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb
0x14fa80: 0xbbbbbbbb 0xbbbbbbbb 0x00000000 0x00000000
0x14fa90: 0x90000000 0x70014fa5 0xcccc0002 0xcccccccc
0x14faa0: 0xcccccccc 0xcccccccc 0x00000000 0x00020000
0x14fab0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fac0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fad0: 0x7665442f 0x706f6c65 0x752f7265 0x6c2f7273
0x14fae0: 0x6c2f6269 0x63586269 0x4465646f 0x67756265
(gdb) c
Continuing.
cc0077..iinndddd 119944 44//1166//22001122 55::4466::1111 PPMM
Chapter 7 n Exploitation 195
Things have changed slightly. Now ptr2 is in the mag_last_free cache and
both ptr1 and ptr3 are on the freelist. Moreover, the previous pointer for ptr1
now points to ptr3, whereas the next pointer for ptr3 points to ptr1. Finally,
see what happens when ptr4 is placed in the mag_last_free cache:
Program received signal SIGINT, Interrupt.
0x00002400 in main (argc=1, argv=0x2fdffbac) at
/Users/snagg/Documents/Book/booktest/booktest/main.m:39
39 DebugBreak();
(gdb) x/40x ptr1
0x14fa50: 0x90000000 0x90000000 0xaaaa0006 0xaaaaaaaa
0x14fa60: 0xaaaaaaaa 0xaaaaaaaa 0x00000000 0x00020000
0x14fa70: 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb 0xbbbbbbbb
0x14fa80: 0xbbbbbbbb 0xbbbbbbbb 0x00000000 0x00000000
0x14fa90: 0x90000000 0x90000000 0xcccc0002 0xcccccccc
0x14faa0: 0xcccccccc 0xcccccccc 0x00000000 0x00060000
0x14fab0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fac0: 0x00000000 0x00000000 0x00000000 0x00000000
0x14fad0: 0x7665442f 0x706f6c65 0x752f7265 0x6c2f7273
0x14fae0: 0x6c2f6269 0x63586269 0x4465646f 0x67756265
(gdb)
The content of ptr2 seems unchanged, but other things are different. First,
both previous and next pointers for ptr1 and ptr3 are set to NULL, and also the
size of the ptr1 block has changed. ptr1 in fact is now 96 bytes long (0x0006*16
bytes, which is the quanta size for the tiny block). This means that ptr1, ptr2,
and ptr3 were all coalesced in one block that was placed on the freelist of a
different quantum (0x0006), which has no other elements. Therefore, both the
previous and the next pointers are freed. The freelist for 0x0002 is now empty.
Exploiting Arithmetic Vulnerabilities
The previous example cleared once and for all the idea of being able to overwrite
heap metadata to achieve code execution. Therefore, the only available option
is to allocate objects in a way that allows the vulnerable object to be placed
next to one to overwrite. This technique is called Heap Feng Shui. Later in this
chapter, you learn its basics and use it in the context of a browser. For now, you
will limit yourself to a simple plan:
1. Allocate a bunch of vulnerable objects.
2. Create holes in between them.
3. Allocate “interesting” objects in the holes.
To accomplish this goal you can use the following simple application. It fi rst
allocates 50 objects and sets their content to 0xcc. Then half of them will be
freed, and fi nally 10 objects fi lled with 0xaa will be allocated:
cc0077..iinndddd 119955 44//1166//22001122 55::4466::1111 PPMM
196 Chapter 7 n Exploitation
#define DebugBreak() \
do { \
__asm__(“mov r0, #20\nmov ip, r0\nsvc 128\nmov r1, #37\nmov ip, r1\nmov
r1, #2\nmov r2,
#1\n svc 128\n”
: : : “memory”,”ip”,”r0”,”r1”,”r2”); \