title:MUZZ: Thread-aware Grey-box Fuzzing for Effective Bug Hunting in
Multithreaded Programs
author:Hongxu Chen and
Shengjian Guo and
Yinxing Xue and
Yulei Sui and
Cen Zhang and
Yuekang Li and
Haijun Wang and
Yang Liu
Muzz: Thread-aware Grey-box Fuzzing for 
Effective Bug Hunting in Multithreaded Programs
Hongxu Chen, University of Science and Technology of China and Nayang 
Technological University; Shengjian Guo, Baidu Security; Yinxing Xue, University 
of Science and Technology of China; Yulei Sui, University of Technology Sydney; 
Cen Zhang and Yuekang Li, Nanyang Technological University; Haijun Wang, 
Ant Financial Services Group; Yang Liu, Nanyang Technological University
https://www.usenix.org/conference/usenixsecurity20/presentation/chen-hongxu
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.MUZZ: Thread-aware Grey-box Fuzzing
for Effective Bug Hunting in Multithreaded Programs
Hongxu Chen§†
Shengjian Guo‡ Yinxing Xue§∗ Yulei Sui¶
Cen Zhang† Yuekang Li† Haijun Wang# Yang Liu†
†Nanyang Technological University
‡Baidu Security
¶University of Technology Sydney
§University of Science and Technology of China
#Ant Financial Services Group
Abstract
Grey-box fuzz testing has revealed thousands of vulner-
abilities in real-world software owing to its lightweight
instrumentation, fast coverage feedback, and dynamic adjust-
ing strategies. However, directly applying grey-box fuzzing
to input-dependent multithreaded programs can be extremely
inefﬁcient. In practice, multithreading-relevant bugs are usu-
ally buried in the sophisticated program ﬂows. Meanwhile,
existing grey-box fuzzing techniques do not stress thread-
interleavings that affect execution states in multithreaded pro-
grams. Therefore, mainstream grey-box fuzzers cannot ade-
quately test problematic segments in multithreaded software,
although they might obtain high code coverage statistics.
To this end, we propose MUZZ, a new grey-box fuzzing
technique that hunts for bugs in multithreaded programs.
MUZZ owns three novel thread-aware instrumentations,
namely coverage-oriented instrumentation, thread-context
instrumentation, and schedule-intervention instrumentation.
During fuzzing, these instrumentations engender runtime feed-
back to accentuate execution states caused by thread inter-
leavings. By leveraging such feedback in the dynamic seed
selection and execution strategies, MUZZ preserves more valu-
able seeds that expose bugs under a multithreading context.
We evaluate MUZZ on twelve real-world multithreaded
programs. Experiments show that MUZZ outperforms
AFL in both multithreading-relevant seed generation and
concurrency-vulnerability detection. Further, by replaying
the target programs against the generated seeds, MUZZ also
reveals more concurrency-bugs (e.g., data-races, thread-leaks)
than AFL. In total, MUZZ detected eight new concurrency-
vulnerabilities and nineteen new concurrency-bugs. At the
time of writing, four reported issues have received CVE IDs.
1 Introduction
Multithreading has been popular in modern software systems
since it substantially utilizes the hardware resources to boost
∗Corresponding Author.
software performance. A typical computing paradigm of mul-
tithreaded programs is to accept a set of inputs, distribute
computing jobs to threads, and orchestrate their progress ac-
cordingly. Compared to sequential programs, however, multi-
threaded programs are more prone to severe software faults.
On the one hand, the non-deterministic thread-interleavings
give rise to concurrency-bugs like data-races, deadlocks,
etc [32]. These bugs may cause the program to end up with ab-
normal results or unexpected hangs. On the other hand, bugs
that appear under speciﬁc inputs and interleavings may lead
to concurrency-vulnerabilities [5, 30], resulting in memory
corruptions, information leakage, etc.
There exist a line of works on detecting bugs and vulner-
abilities inmultithreaded programs. Static concurrency-bug
predictors [2, 40, 45, 50] aim to approximate the runtime
behaviors of a program without actual concurrent execution.
However, they typically serve as a complementary solution
due to the high percentage of false alarms [19]. Dynamic
detectors detect concurrency-violations by reasoning memory
read/write and synchronization events in a particular execu-
tion trace [5, 12, 21, 41, 42, 49, 58]. Several techniques like
ThreadSanitizer (a.k.a., TSan) [42] and Helgrind [49] have
been widely used in practice. However, these approaches by
themselves do not automatically generate new test inputs to
exercise different paths in multithreaded programs.
Meanwhile, grey-box fuzzing is effective in generating test
inputs to expose vulnerabilities [34, 36]. It is reported that
grey-box fuzzers (GBFs) such as AFL [63] and libFuzzer [31]
have detected more than 16,000 vulnerabilities in hundreds
of real-world software projects [16, 31, 63].
Despite the great success of GBFs in detecting vulner-
abilities, there are few efforts on fuzzing user-space multi-
threaded programs. General-purpose GBFs usually cannot
explore thread-interleaving introduced execution states due
to their unawareness of multithreading. Therefore, they can-
not effectively detect concurrency-vulnerabilities inherently
buried in sophisticated program ﬂows [30]. In a discussion in
2015 [64], the author of AFL, Michal Zalewski, even suggests
that “it’s generally better to have a single thread”. In fact, due
USENIX Association
29th USENIX Security Symposium    2325
to the difﬁculty and inefﬁciency, the fuzzing driver programs
in Google’s continuous fuzzing platform OSS-fuzz are all
tested in single-threaded mode [15]. Also, by matching unions
of keyword patterns “race*”, “concurren*” and “thread*” in
the MITRE CVE database [48], we found that only 202 CVE
records are relevant to concurrency-vulnerabilities out of the
70438 assigned CVE IDs ranging from CVE-2014-* to CVE-
2018-*. In particular, we observed that, theoretically, at most
4 CVE records could be detected by grey-box fuzzers that
work on user-space programs.
As a result, there are no practical fuzzing techniques to
test input-dependent user-space multithreaded programs and
detect bugs or vulnerabilities inside them. To this end, we
present a dedicated grey-box fuzzing technique, MUZZ, to
reveal bugs by exercising input-dependent and interleaving-
dependent paths. We categorize the targeted multithreading-
relevant bugs into two major groups:
• concurrency-vulnerabilities (Vm):
they correspond to
memory corruption vulnerabilities that occur in a multi-
threading context. These vulnerabilities can be detected
during the fuzzing phase.
• concurrency-bugs (Bm): they correspond to the bugs like
data-races, atomicity-violations, deadlocks, etc. We detect
them by replaying the seeds generated by MUZZ with state-
of-the-art concurrency-bug detectors such as TSan.
Note that Bm may not be revealed during fuzzing since they
do not necessarily result in memory corruption crashes. In the
remaining sections, when referring to multithreading-relevant
bugs, we always mean the combination of concurrency-bugs
and concurrency-vulnerabilities, i.e., Vm ∪ Bm.
We summarize the contributions of our work as follows:
1) We develop three novel thread-aware instrumentations for
grey-box fuzzing that can distinguish the execution states
caused by thread-interleavings.
2) We optimize seed selection and execution strategies based
on the runtime feedback provided by the instrumentations,
which help generate more effective seeds concerning the mul-
tithreading context.
3) We integrate these analyses into MUZZ for an effective bug
hunting in multithreaded programs. Experiments on 12 real-
world programs show that MUZZ outperforms other fuzzers
like AFL and MOPT in detecting concurrency-vulnerabilities
and revealing concurrency-bugs.
4) MUZZ detected 8 new concurrency-vulnerabilities and 19
new concurrency-bugs, with 4 CVE IDs assigned. Consider-
ing the small portion of concurrency-vulnerabilities recorded
in the CVE database, the results are promising.
2 Background and Motivation
2.1 Grey-box Fuzzing Workﬂow
Algorithm 1 presents the typical workﬂow of a grey-box
fuzzer [3, 34, 63]. Given a target program Po and the input
:program Po, initial seed queue QS
Algorithm 1: Grey-box Fuzzing Workﬂow
input
output :ﬁnal seed queue QS, vulnerable seed ﬁles TC
1 P f ← instrument(Po) ;
2 TC ← /0;
3 while True do
4
5
6
7
8
9
10
11
12
t ← select_next_seed(QS) ;
M ← get_mutation_chance(P f , t) ;
for i ∈ 1 . . .M do
t(cid:48) ← mutated_input(t) ;
res ← run(P f , t’, Nc);
if is_crash(res) then
else if cov_new_trace(t’, res) then
TC ← TC ∪{t(cid:48)} ; // report vulnerable seeds
QS ← QS ⊕t(cid:48) ; // preserve “effective” seeds
// instrumentation
// seed selection
// seed scheduling
// seed mutation
// repeated execution
// seed triaging
seeds QS, a GBF ﬁrst utilizes instrumentation to track the cov-
erage information in Po. Then it enters the fuzzing loop: 1)
Seed selection decides which seed to be selected next; 2) Seed
scheduling decides how many mutations M will be applied
on the selected seed t; 3) Seed mutation applies mutations
on seed t to generate a new seed t(cid:48); 4) During repeated ex-
ecution, for each new seed t(cid:48), the fuzzer executes against it
Nc times to get its execution statistics; 5) Seed triaging eval-
uates t(cid:48) based on the statistics and the coverage feedback
from instrumentation, to determine whether the seed leads
to a vulnerability, or whether it is “effective” and should be
preserved in the seed queue for subsequent fuzzing. Here,
steps 3), 4), 5) are continuously processed M times. Notably,
Nc times of repeated executions are necessary since a GBF
needs to collect statistics such as average execution time for
t(cid:48), which will be used to calculate mutation times M for seed
scheduling in the next iteration. In essence, the effectiveness
of grey-box fuzzing relies on the feedback collected from
the instrumentation. Speciﬁcally, the result of cov_new_trace
(line 11) is determined by the coverage feedback.
2.2 The Challenge in Fuzzing Multithreaded
Programs and Our Solution
Figure 1 is an abstracted multithreaded program that accepts
a certain input ﬁle and distributes computing jobs to threads.
Practically it may behave like compressors/decompressors
(e.g., lbzip2, pbzip2), image processors (e.g., ImageMagick,
GraphicsMagick), encoders/decoders (e.g., WebM, libvpx), etc.
After reading the input content buf, it does an initial validity
check inside the function check. It exits immediately if the
buffer does not satisfy certain properties. The multithreading
context starts from function compute (via pthread_create
at lines 24-25). It contains shared variables s_var (passed
from main) and g_var (global variables), as well as the mutex
primitive m to exclusively read/write shared variables (via
pthread_mutex_lock and pthread_mutex_unlock).
2326    29th USENIX Security Symposium
USENIX Association
i n t g_ va r = −1;
v o i d modify ( i n t ∗pv ) { ∗pv −= 2 ; }
v o i d check ( c h a r ∗ buf ) {
( i s _ i n v a l i d ( buf ) ) { e x i t ( 1 ) ; }
i f
e l s e { modify ( ( i n t ∗ ) buf ) ; }
}
c h a r ∗ compute ( v o i d ∗ s _ v a r ) {
g _v ar += 1 ;
g _v ar ∗= 2 ;
i f
( ( i n t ∗ ) s _ v a r [ 0 ] < 0 )
modify ( ( i n t ∗ ) s _ v a r ) ;
p t h r e a d _ m u t e x _ l o c k (&m) ;
modify (& g _v ar ) ;
p t h r e a d _ m u t e x _ u n l o c k (&m) ;
r e t u r n ( c h a r ∗ ) s _ v a r ;
//
9
//
//
//
//
//
//
//
//
1
2
3
4
5
6
7
8
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
}
}
i n t main ( i n t
argc ,
c h a r ∗∗ a r g v ) {
c h a r ∗ buf = r e a d _ f i l e _ c o n t e n t ( a r g v [ 1 ] ) ;
check ( buf ) ;
p t h r e a d _ t T1 , T2 ;
p t h r e a d _ c r e a t e ( T1 , NULL, compute , buf ) ;
p t h r e a d _ c r e a t e ( T2 , NULL, compute , buf + 1 2 8 ) ;
. . . . . .
Figure 1: Code segments abstracted from real-world programs.
The shadow lines denote “suspicious interleaving scope” in-
troduced in §4.1.
With different inputs, the program may execute different
segments. For example, based on the condition of statement
3 , which is purely dependent on the input content (i.e., differ-
ent results of buf provided by seed ﬁles), it may or may not
execute 4 . Therefore, different seed ﬁles need to be generated
to exercise different paths in multithreading context — in fact,
this is the starting point that we use fuzzing to generate seed
ﬁles to test multithreaded programs.
Meanwhile, in the presence of thread-interleavings, g_var
(initialized with -1) may also have different values. Let
us focus on different seeds’ executions at two statements:
1 :“g_var+=1”, and 2 : “g_var*=2”. Suppose there are two
threads: T1, T2; and T1: 1
is executed ﬁrst. Then there are at
least three interleavings:
i) T1: 1 →T2: 1 →T2: 2 →T1: 2
g_var=4
ii) T1: 1 →T2: 1 →T1: 2 →T2: 2
g_var=4
iii) T1: 1 →T1: 2 →T2: 1 →T2: 2
g_var=2
After the second 2
is executed, the values of g_var may be
different (4 and 2, respectively). Worse still, since neither 1
nor 2 is an atomic operation in the representation of the actual
program binary, many more interleavings can be observed
and g_var will be assigned to other values.
The challenge. To reveal multithreading-relevant bugs, a
GBF needs to generate diverse seeds that execute different
paths in multithreading context (e.g., paths inside compute).
However, existing GBFs even have difﬁculties in generat-
ing seeds to reach multithreading segments. For example, if
check is complicated enough, most of the seeds may fail the
check and exit before entering compute — this is quite com-
mon due to the low quality of fuzzer-generated seeds [34, 61].
Meanwhile, even if a seed indeed executes multithreading
code, it may still fail to satisfy certain preconditions to reach
the problematic context. For example, suppose modify con-
tains a vulnerability that can only be triggered when g_var is
2. If the fuzzer has occasionally generated a seed that executes
compute and the condition of 3 is true, with no awareness of
thread-interleavings, it will not distinguish different schedules
between i), ii) and iii). As a result, subsequent mutations on
this seed will miss important feedback regarding g_var, mak-
ing it difﬁcult to generate seeds that trigger the vulnerability.
To summarize, the challenge of fuzzing multithreaded
programs is, existing GBFs have difﬁculties in generating
seeds that execute multithreading context and keep thread-
interleaving execution states.
Our solution. We provide ﬁne-grained thread-aware feed-
back for seed ﬁles that execute multithreading context and
distinguish more such execution states. According to §2.1,
the preservation of seeds is based on the feedback; then we
can expect that the fuzzer will preserve more distinct seeds
that execute multithreading code segments in the seed queue.
This means that the multithreading-relevant seeds are implic-
itly prioritized. Since these seeds have already passed the
validity checking, the overall quality of the generated seeds is
higher. The “Matthew Effect” helps keep the quality of seed
generations for subsequent fuzzing. Essentially, this provides
a biased coverage feedback on multithreading code segments
(more explanations on this are available in §5.3.
Now let us investigate what instrumentations can be im-
proved to existing fuzzers for thread-aware feedback.
2.3 Thread-aware Feedback Improvements
2.3.1 Feedback to Track Thread-interleavings and
Thread-context
The state-of-the-art GBFs, such as AFL, instrument the en-
try instruction of each basicblock evenly as the basicblock’s
deputy. We refer to this selection strategy over deputy instruc-