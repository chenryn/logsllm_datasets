title:Capsicum: Practical Capabilities for UNIX
author:Robert N. M. Watson and
Jonathan Anderson and
Ben Laurie and
Kris Kennaway
Capsicum: practical capabilities for UNIX
Robert N. M. Watson
University of Cambridge
Jonathan Anderson
University of Cambridge
Kris Kennaway
Google UK Ltd.
Ben Laurie
Google UK Ltd.
Abstract
Capsicum is a lightweight operating system capabil-
ity and sandbox framework planned for inclusion in
FreeBSD 9. Capsicum extends, rather than replaces,
UNIX APIs, providing new kernel primitives (sandboxed
capability mode and capabilities) and a userspace sand-
box API. These tools support compartmentalisation of
monolithic UNIX applications into logical applications,
an increasingly common goal supported poorly by dis-
cretionary and mandatory access control. We demon-
strate our approach by adapting core FreeBSD utilities
and Google’s Chromium web browser to use Capsicum
primitives, and compare the complexity and robustness
of Capsicum with other sandboxing techniques.
1
Introduction
Capsicum is an API that brings capabilities to UNIX. Ca-
pabilities are unforgeable tokens of authority, and have
long been the province of research operating systems
such as PSOS [16] and EROS [23]. UNIX systems have
less ﬁne-grained access control than capability systems,
but are very widely deployed. By adding capability prim-
itives to standard UNIX APIs, Capsicum gives applica-
tion authors a realistic adoption path for one of the ideals
of OS security: least-privilege operation. We validate our
approach through an open source prototype of Capsicum
built on (and now planned for inclusion in) FreeBSD 9.
Today, many popular security-critical applications
have been decomposed into parts with different privi-
lege requirements, in order to limit the impact of a single
vulnerability by exposing only limited privileges to more
risky code. Privilege separation [17], or compartmentali-
sation, is a pattern that has been adopted for applications
such as OpenSSH, Apple’s SecurityServer, and, more re-
cently, Google’s Chromium web browser. Compartmen-
talisation is enforced using various access control tech-
niques, but only with signiﬁcant programmer effort and
signiﬁcant technical limitations: current OS facilities are
simply not designed for this purpose.
The access control systems in conventional (non-
capability-oriented) operating systems are Discretionary
Access Control (DAC) and Mandatory Access Control
(MAC). DAC was designed to protect users from each
other: the owner of an object (such as a ﬁle) can specify
permissions for it, which are checked by the OS when
the object is accessed. MAC was designed to enforce
system policies: system administrators specify policies
(e.g. “users cleared to Secret may not read Top Secret
documents”), which are checked via run-time hooks in-
serted into many places in the operating system’s kernel.
Neither of these systems was designed to address the
case of a single application processing many types of in-
formation on behalf of one user. For instance, a mod-
ern web browser must parse HTML, scripting languages,
images and video from many untrusted sources, but be-
cause it acts with the full power of the user, has access to
all his or her resources (such implicit access is known as
ambient authority).
In order to protect user data from malicious JavaScript,
Flash, etc., the Chromium web browser is decomposed
into several OS processes. Some of these processes han-
dle content from untrusted sources, but their access to
user data is restricted using DAC or MAC mechanism
(the process is sandboxed).
These mechanisms vary by platform, but all require a
signiﬁcant amount of programmer effort (from hundreds
of lines of code or policy to, in one case, 22,000 lines
of C++) and, sometimes, elevated privilege to bootstrap
them. Our analysis shows signiﬁcant vulnerabilities in
all of these sandbox models due to inherent ﬂaws or in-
correct use (see Section 5).
Capsicum addresses these problems by introducing
new (and complementary) security primitives to support
compartmentalisation: capability mode and capabilities.
Capsicum capabilities should not be confused with op-
erating system privileges, occasionally referred to as ca-
Figure 1: Capsicum helps applications self-compartmentalise.
pabilities in the OS literature. Capsicum capabilities are
an extension of UNIX ﬁle descriptors, and reﬂect rights
on speciﬁc objects, such as ﬁles or sockets. Capabilities
may be delegated from process to process in a granular
way in the same manner as other ﬁle descriptor types: via
inheritance or message-passing. Operating system priv-
ilege, on the other hand, refers to exemption from ac-
cess control or integrity properties granted to processes
(perhaps assigned via a role system), such as the right
to override DAC permissions or load kernel modules. A
ﬁne-grained privilege policy supplements, but does not
replace, a capability system such as Capsicum. Like-
wise, DAC and MAC can be valuable components of a
system security policy, but are inadequate in addressing
the goal of application privilege separation.
We have modiﬁed several applications, including base
FreeBSD utilities and Chromium, to use Capsicum prim-
itives. No special privilege is required, and code changes
are minimal: the tcpdump utility, plagued with security
vulnerabilities in the past, can be sandboxed with Cap-
sicum in around ten lines of code, and Chromium can
have OS-supported sandboxing in just 100 lines.
In addition to being more secure and easier to use than
other sandboxing techniques, Capsicum performs well:
unlike pure capability systems where system calls neces-
sarily employ message passing, Capsicum’s capability-
aware system calls are just a few percent slower than
their UNIX counterparts, and the gzip utility incurs a
constant-time penalty of 2.4 ms for the security of a Cap-
sicum sandbox (see Section 6).
2 Capsicum design
Capsicum is designed to blend capabilities with UNIX.
This approach achieves many of the beneﬁts of least-
privilege operation, while preserving existing UNIX
APIs and performance, and presents application authors
with an adoption path for capability-oriented design.
Capsicum extends,
rather than replaces, standard
UNIX APIs by adding kernel-level primitives (a sand-
boxed capability mode, capabilities and others) and
userspace support code (libcapsicum and a capability-
aware run-time linker). Together, these extensions sup-
port application compartmentalisation, the decomposi-
tion of monolithic application code into components that
will run in independent sandboxes to form logical appli-
cations, as shown in Figure 1.
Capsicum requires application modiﬁcation to exploit
new security functionality, but this may be done grad-
ually, rather than requiring a wholesale conversion to a
pure capability model. Developers can select the changes
that maximise positive security impact while minimis-
ing unacceptable performance costs; where Capsicum re-
places existing sandbox technology, a performance im-
provement may even be seen.
This model requires a number of pragmatic design
choices, not least the decision to eschew micro-kernel ar-
chitecture and migration to pure message-passing. While
applications may adopt a message-passing approach, and
indeed will need to do so to fully utilise the Capsicum
architecture, we provide “fast paths” in the form of di-
rect system call manipulation of kernel objects through
delegated ﬁle descriptors. This allows native UNIX per-
formance for ﬁle system I/O, network access, and other
critical operations, while leaving the door open to tech-
niques such as message-passing system calls for cases
where that proves desirable.
2.1 Capability mode
Capability mode is a process credential ﬂag set by a new
system call, cap enter; once set, the ﬂag is inherited
by all descendent processes, and cannot be cleared. Pro-
cesses in capability mode are denied access to global
namespaces such as the ﬁlesystem and PID namespaces
(see Figure 2).
In addition to these namespaces, there
UNIX processambient authorityBrowser processambient authorityRenderer processcapability modeRenderer processcapability mode...KernelTraditional UNIX applicationCapsicum logical applicationbecomesare several system management interfaces that must be
protected to maintain UNIX process isolation. These in-
terfaces include /dev device nodes that allow physical
memory or PCI bus access, some ioctl operations on
sockets, and management interfaces such as reboot and
kldload, which loads kernel modules.
Access to system calls in capability mode is also re-
stricted: some system calls requiring global namespace
access are unavailable, while others are constrained. For
instance, sysctl can be used to query process-local in-
formation such as address space layout, but also to moni-
tor a system’s network connections. We have constrained
sysctl by explicitly marking ≈30 of 3000 parameters
as permitted in capability mode; all others are denied.
The system calls which require constraints are
sysctl, shm open, which is permitted to create anony-
mous memory objects, but not named ones, and the
openat family of system calls. These calls already ac-
cept a ﬁle descriptor argument as the directory to per-
form the open, rename, etc.
in capabil-
ity mode, they are constrained so that they can only
operate on objects “under” this descriptor.
For in-
stance, if ﬁle descriptor 4 is a capability allowing ac-
cess to /lib, then openat(4, "libc.so.7") will suc-
ceed, whereas openat(4, "../etc/passwd") and
openat(4, "/etc/passwd") will not.
relative to;
2.2 Capabilities
The most critical choice in adding capability support to a
UNIX system is the relationship between capabilities and
ﬁle descriptors. Some systems, such as Mach/BSD, have
maintained entirely independent notions: Mac OS X pro-
vides each task with both indexed capabilities (ports) and
ﬁle descriptors. Separating these concerns is logical, as
Mach ports have different semantics from ﬁle descrip-
tors; however, confusing results can arise for application
developers dealing with both Mach and BSD APIs, and
we wanted to reuse existing APIs as much as possible.
As a result, we chose to extend the ﬁle descriptor ab-
straction, and introduce a new ﬁle descriptor type, the
capability, to wrap and protect raw ﬁle descriptors.
File descriptors already have some properties of ca-
pabilities: they are unforgeable tokens of authority, and
can be inherited by a child process or passed between
processes that share an IPC channel. Unlike “pure” ca-
pabilities, however, they confer very broad rights: even
if a ﬁle descriptor is read-only, operations on meta-data
such as fchmod are permitted. In the Capsicum model,
we restrict these operations by wrapping the descriptor
in a capability and permitting only authorised operations
via the capability, as shown in Figure 3.
The cap new system call creates a new capability
given an existing ﬁle descriptor and a mask of rights;
if the original descriptor is a capability, the requested
rights must be a subset of the original rights. Capabil-
ity rights are checked by fget, the in-kernel code for
converting ﬁle descriptor arguments to system calls into
in-kernel references, giving us conﬁdence that no paths
exist to access ﬁle descriptors without capability checks.
Capability ﬁle descriptors, as with most others in the sys-
tem, may be inherited across fork and exec, as well as
passed via UNIX domain sockets.
There are roughly 60 possible mask rights on each
capability, striking a balance between message-passing
(two rights: send and receive), and MAC systems (hun-
dreds of access control checks). We selected rights
to align with logical methods on ﬁle descriptors: sys-
tem calls implementing semantically identical operations
require the same rights, and some calls may require
multiple rights. For example, pread (read to mem-
ory) and preadv (read to a memory vector) both re-
quire CAP READ in a capability’s rights mask, and read
(read bytes using the ﬁle offset) requires CAP READ |
CAP SEEK in a capability’s rights mask.
Capabilities can wrap any type of ﬁle descriptor in-
cluding directories, which can then be passed as argu-
ments to openat and related system calls. The *at sys-
tem calls begin relative lookups for ﬁle operations with
the directory descriptor; we disallow some cases when
a capability is passed: absolute paths, paths contain-
ing “..” components, and AT FDCWD, which requests a
lookup relative to the current working directory. With
these constraints, directory capabilities delegate ﬁle sys-
tem namespace subsets, as shown in Figure 4. This
allows sandboxed processes to access multiple ﬁles in
a directory (such as the library path) without the per-
formance overhead or complexity of proxying each ﬁle
open via IPC to a process with ambient authority.
The “..” restriction is a conservative design, and pre-
vents a subtle problem similar to historic chroot vul-
nerabilities. A single directory capability that only en-
forces containment by preventing “..” lookup on the root
of a subtree operates correctly; however, two colluding
sandboxes (or a single sandbox with two capabilities) can
race to actively rearrange a tree so that the check always
succeeds, allowing escape from a delegated subset.
It
is possible to imagine less conservative solutions, such
as preventing upward renames that could introduce ex-
ploitable cycles during lookup, or additional synchroni-
sation; these strike us as more risky tactics, and we have
selected the simplest solution, at some cost to ﬂexibility.
Many past security extensions have composed poorly
with UNIX security leading to vulnerabilities; thus, we
disallow privilege elevation via fexecve using setuid
and setgid binaries in capability mode. This restriction
does not prevent setuid binaries from using sandboxes.
Namespace
Process ID (PID)
File paths
NFS ﬁle handles
File system ID
Protocol addresses
Sysctl MIB
System V IPC
POSIX IPC
System clocks
Jails
CPU sets
Description
UNIX processes are identiﬁed by unique IDs. PIDs are returned by fork and used
for signal delivery, debugging, monitoring, and status collection.
UNIX ﬁles exist in a global, hierarchical namespace, which is protected by discre-
tionary and mandatory access control.
The NFS client and server identify ﬁles and directories on the wire using a ﬂat,
global ﬁle handle namespace. They are also exposed to processes to support the
lock manager daemon and optimise local ﬁle access.
File system IDs supplement paths to mount points, and are used for forceable un-
mount when there is no valid path to the mount point.
Protocol families use socket addresses to name local and foreign endpoints. These
exist in global namespaces, such as IPv4 addresses and ports, or the ﬁle system
namespace for local domain sockets.
The sysctl management interface uses numbered and named entries, used to get
or set system information, such as process lists and tuning parameters.
System V IPC message queues, semaphores, and shared memory segments exist in
a ﬂat, global integer namespace.
POSIX deﬁnes similar semaphore, message queue, and shared memory APIs, with
an undeﬁned namespace: on some systems, these are mapped into the ﬁle system;
on others they are simply a ﬂat global namespaces.
UNIX systems provide multiple interfaces for querying and manipulating one or
more system clocks or timers.
The management namespace for FreeBSD-based virtualised environments.
A global namespace for afﬁnity policies assigned to processes and threads.
Figure 2: Global namespaces in the FreeBSD operating kernel
2.3 Run-time environment
Even with Capsicum’s kernel primitives, creating sand-
boxes without leaking undesired resources via ﬁle de-
scriptors, memory mappings, or memory contents is dif-