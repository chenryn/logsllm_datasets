This issue was raised at #20421 (comment). We should define clear rules
regarding when it's OK to use `@inbounds` in Base code. Currently the code
seems to be inconsistent.
@JeffBezanson mentioned this: "only use `@inbounds` when you can be certain,
from local information, that all accesses are in bounds." In a strict
interpretation, that would mean `@inbounds for i in eachindex(a)` is not
correct when `a::AbstractArray`, since an incorrect array implementation could
return invalid indices, which would crash Julia.
This strict interpretation is problematic since (as @stevengj noted) often a
generic `AbstractArray` method is also used for `Array`: if we cannot use
`@inbounds` there, performance suffers in the common case just to avoid
possible crashes in rare cases. A mechanism to enable `@inbounds` only for
trusted types could help, but it would still be too bad that custom array
types wouldn't benefit from bounds checking removal even when they implemented
everything correctly: that would defeat the goal of making user-defined type
as efficient as Base types. So I would say we need to trust custom array
types, or at least allow them to opt out of bounds checking by stating that
they are safe. Cf. #15291.