---
## Page 88
52
略的，会对你的服务进行长久性的改善的工作。工程工作通常是有创新性和创造性的，
什么算作工程工作
的组织来实现这个承诺。
门进行运维工作。我们通过禁止SRE组织或者其中任何小团队退化为专门从事运维工作
不仅如此，招聘新的SRE时，我们也会引用上文提及的50%规则，承诺新员工不会专
单纯的研发团队和单纯的运维工作团队能更有效地管理服务的秘诀。
（Engineering）。对工程工作的关注使 SRE可以在服务规模扩大的同时减少人数，并且比
速占据我们每个人100%的时间。减少琐事和扩大服务规模的工作就是SRE中的E
SRE公开50%这个目标是因为如果不加以控制，琐事会变得越来越多，以至于迅
服务功能包括提高可靠性、性能，或利用率，同时也会进一步消除琐事。
50%。SRE至少花50%的时间在工程项目上，以减少未来的琐事或增加服务功能。增加
工程工作（Engineering）是一种新颖的、本质上需要主观判断的工作。它是符合长期战
工程项目。
理者需要在团队中更均衡地分布琐事负荷，同时应该鼓励该SRE找到自己满意的
花费了80%的时间。当某个SRE报告自己承担了过量的琐事时，这通常意味着
SRE琐事比例为0%（纯开发项目而不参加on-call），而其他人宣称他们在琐事
比总体目标50%做得更好。然而，这个平均值没有显示出其中的异常情况：一些
GoogleSRE的季度调查显示，琐事的时间占用大约在33%，所以我们其实目前
化的，这个部分仍有许多改进的空间。
随其后的是发布和数据更新。即使Google的发布和数据更新过程通常是高度自动
服务相关的非紧急的邮件和电子邮件）。另一个主要来源是on-call（紧急的），
与此计算相一致，来自SRE的数据显示，琐事的最大来源就是中断性工作（即与
工作时间的2/6，也就是33%。如果是八人轮值，那么最小值就是2/8，即25%。
专注于on-call和中断性事务的处理，这意味着潜在的琐事的最小值是一个SRE的
请参见第11章）。因此，在一个六个人的轮值周期中，每六周中至少有两周需要
周期中会有一周主on-call和一周副on-call的工作。（主on-call和副on-call的讨论，
任何一个SRE在参与on-call时都会承担一定程度的琐事。一个典型的SRE每个
如果我们想要将一个SRE花在琐事上的时间限制在50%，应该如何分配时间呢？
第5章
减少琐事
琐事的计算
紧
---
## Page 89
担忧，大声抱怨。在许多琐事有害的原因中，有如下因素需要考虑：
么大问题。但是一旦琐事的数量变多，就会有害了。如果琐事特别繁重，那就应该非常
的琐事是不可避免的，这其实是任何工程类工作都具有的特点。少量的琐事存在不是什
琐事的存在并不总是坏事，但是每个人都必须清楚，在SRE所扮演的角色中，一定数量
压力的活动，有些员工甚至喜欢做这种类型的工作。
让人平静的功效。完成这些事可以带来一种满足感和快速胜利感。琐事可能是低风险低
琐事不会总是让每个人都不开心，特别是不太多的时候。已知的和重复性的工作有一种
琐事繁多是不是一定不好
低于50%，受影响的团队就需要退一步来找出问题所在。
实，在某些季度中可能无法达到这个目标。但是，长期看来，如果工程时间的比例大幅
常有一定集中性，对于某些团队而言，把50%的时间稳定地花在工程工作上可能不太现
流程负担
琐事
系统工程
软件工程
典型的SRE活动分为如下几类。
SRE组织在维持同等人员配备的情况下接手更大或者更多的服务。
着重通过设计来解决问题，解决方案越通用越好。工程工作有助于使该团队或是整个
任务系统的定期清理工作、工作总结、同行评价和自我评价，以及培训课程等。
与运维服务不直接相关的行政工作。例如招聘、人力资源书面工作、团队／公司会议、
与运维服务相关的重复性的、手工的劳动。
计和生产环境方面的咨询工作。
系统的参数调整和负载均衡器的部署。系统工程还包括与研发团队进行的架构、设
来书写系统文档。例如，监控的部署和更新、负载均衡的配置、服务器配置、操作
配置生产系统、修改现存配置，或者用一种通过一次性工作产生持久的改进的方法
更稳健。
创造工具或框架，增加可扩展性和可靠性的服务功能，或修改基础设施代码以使其
编写或修改代码，以及所有其他相关的设计和文档工作。例如，编写自动化脚本，
琐事繁多是不是一定不好
53
---
## Page 90
54
就可以将更多的力量投入到扩大服务规模的工程工作上去，或者是进行下一代的服务的
如果我们都致力于每一周通过工程工作消除一点琐事，就可以持续性地整顿服务。我们
小结
促进摩擦产生
开创先例
进展缓慢
造成误解
另外，牺牲工程实践而做琐事会对SRE组织的整体发展造成损害，原因如下：
士气低落
职业停滞
架构设计，又或者是建立一套跨SRE使用的工具链。让我们多创新，少干琐事吧！
违反承诺
我们努力确保每个SRE以及每个与SRE一起工作的人都理解SRE是一个工程组织。
这非常不利于公司的士气。
那些为了项目工程工作而新入职的员工，以及转入SRE的老员工会有被欺骗的感觉，
更有价值的工作。
引入了太多的琐事，
即使你个人对琐事没有怨言，
接受这样的工作，这显然是不好的。
本来应该由研发团队承担的运维工作转给SRE来承担。其他团队也会开始指望SRE
如果SRE过于愿意承担琐事，研发同事就更倾向于加入更多的琐事，有时候甚至将
新功能的发布就会变慢。
琐事过多会导致团队生产力下降。
如果个人或者团队过度参与琐事，会破坏这种角色，造成误解。
致过度劳累、厌倦和不满。
每个人对自己可以承担的琐事限度有所不同，但是一定有个限度。过多的琐事会导
时候才会这样做。没有人可以通过不停地做脏活累活满足自己的职业发展。
奖励做那些脏活累活的人，但是仅仅是该工作是不可避免，并有巨大的正面影响的
如果花在工程项目上的时间太少，你的职业发展会变慢，
第5章
减少琐事
，其实就是在鼓励团队里最好的工程师开始寻找其他地方提供的
，你现在的或未来的队友可能会很不开心。如果团队中
，如果SRE团队忙于为手工操作和导出数据救火，
甚至停滞。Google确实会
---
## Page 91
监控台页面（dashboard）
黑盒监控（black-boxmonitoring）
白盒监控（white-boxmonitoring）
监控（monitoring）
使用不同的术语，以下是绝大部分通用的术语。
在讨论监控系统时，目前几乎没有通用的术语。
术语定义
论了如何应对那些不那么严重的警报。
章在决定何时需要人工干预（发出紧急警报）的问题上提供了一些指导意见，同时也讨
Google的 SRE团队在构建监控系统和报警系统方面遵循一些核心思想和最佳实践。本
提供某个服务核心指标一览服务的应用程序（一般是基于Web的）。该应用程序可
通过测试某种外部用户可见的系统行为进行监控。
收集、处理、汇总，并且显示关于某个系统的实时量化数据，例如请求的数量和类型，
控接口，或者一个列出内部统计数据的HTTP接口进行监控。
依靠系统内部暴露的一些性能指标进行监控。包括日志分析、Java虚拟机提供的监
错误的数量和类型，以及处理用时，应用服务器的存活时间等。
分布式系统的监控
。即使在Google内部，不同的团队也在
作者：Rob Ewaschuk
编辑：BetsyBeyer
第6章
6
55
---
## Page 92
注1有时候也称为“垃圾警报”，因为很少有人会去关注他们，这些警报也不会触发任何操作。
跨时间范围的比较，或者是观察实验组与控制组之间的区别
为什么要监控
推送（push）
节点或者机器（node/machine）
根源问题（rootcause）
警报（alert）
分析长期趋势
监控一个系统有多个原因，包括如下几项。
数据库目前的数据量，以及增长速度。又例如每日活跃用户的数量增长的速度。
指系统（软件或流程）中的某种缺陷。这个缺陷如果被修复，就可以保证这种问题
使用Acme Bucket of Bytes 2.72或者AjaxDB3.14（都是虚构的系统名称名字）哪
关于某个服务正在运行的软件或者其配置文件的任何改动。
这里的两个术语是可以互换的：指在物理机、虚拟机，或者容器内运行的某个实例。
足等。这里每一个因素都是一个根源问题，并且每一个都需要被修复。
可能自动化程度不够，软件在异常输入下崩溃，以及对生成配置文件的脚本测试不
不会再以同样的方式发生。某一个故障情况可能同时具有多个根源问题：例如，有
以及紧急警报（page）。
E-mail地址，或者某个传呼机。相应的，这些警报被分类为：工单、E-mail警报注1，
目标对象是某个人发向某个系统地址的一个通知。目的地可以包括工单系统、
数量、高优先级的 Bug 列表、目前的 on-call工程师和最近进行的生产发布等。
示系统最重要的指标。该程序同时可以显示相应团队的一些信息，包括目前工单的
上周速度要慢？
个请求速度更快？增加新节点后，memcache的缓存命中率是否增加？网站是否比
·相互关联的服务：例如Web服务器与对应的缓存服务器。
open-source）和lChef（https://www.chef.io/chef/)。
的配置管理系统的主进程。例如Puppet（https://puppetlabs.com/puppet/puppet-
不相关的服务，它们仅仅共享硬件：例如代码仓库和把文件存放在代码仓库中
第6章分布式系统的监控
---
## Page 93
们会避免任何“魔法”系统一
Google SRE团队中的1~2个人全职进行监控的构建和维护工作。由于我们花了很多精力
施的情况下，标记、收集、显示，以及报警这些工作，通常需要10~12个人组成的标准
对监控系统设置合理预期
警报系统应该提供足够的信息，并且误报率非常低。
的故障。由于无效信息太多，分析和修复可能会变慢，故障时间也会相应延长。高效的
怀疑警报的有效性甚至忽略该警报，有的时候在警告过多的时候甚至会忽略掉真实发生
甚至是把他从睡眠中叫醒。当紧急警报出现得太频繁时，员工会进入“狼来了”效应，
打断他原本的工作流程。如果该员工正在家，紧急警报的处理则会影响他的个人生活，
紧急警报的处理会占用员工的宝贵时间。如果该员工正在工作时间段，该警报的处理会
问题”就发出警报。
在真实故障，采取一定方法缓解故障，最终找出导致故障的根源问题。除了是在针对某
么。当系统无法自动修复某个问题时，需要一个人来调查这项警报，以决定目前是否存
监控与报警可以让一个系统在发生故障时主动通知我们，或者能够告诉我们即将发生什
本书关注的焦点是SRE所关注的工程领域，我们就不在这里讨论这些方面的应用了。
系统监控在给业务分析提供原始数据和分析安全入侵的场景时也有一定作用。但是由于
临时性的回溯分析（也就是在线调试）
构建监控台页面