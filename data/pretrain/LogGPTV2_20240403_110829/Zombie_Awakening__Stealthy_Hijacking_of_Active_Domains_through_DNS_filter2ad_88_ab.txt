IN
A
93.184.216.34
;; AUTHORITY SECTION :
example . com .
example . com .
43020
43020
IN
IN
NS
NS
a. iana - servers . net .
b. iana - servers . net .
;; ADDITIONAL SECTION :
a. iana - servers . net . 118512 IN
b. iana - servers . net . 35275
IN
A
A
199.43.135.53
199.43.133.53
Figure 1: The structure of the DNS response to an A record
query for example.com showing the three main sections.
More specifically, such protection falls into three categories:
(1) challenge-response (e.g., Source Port Randomization [22]) ; (2)
cryptographic defense (e.g., DNSSEC [77]); and (3) caching rules,
including Bailiwick rule [72], and Credibility rule [32]. The bailiwick
rule protects the cache by ignoring out-of-bailiwick records in
the authoritative or additional sections of a DNS response. For
example, if a response to .com returned a mapping of .org in the
additional or authority sections, this record will not be cached. The
credibility rule determines when to overwrite existing records in
the cache. Each DNS record is assigned a trust level, or ranking. The
resolver overwrites an existing record if it receives a new one with
a higher/equal trust level. The trust level is based on two criteria: (1)
whether the response is received from an authoritative nameserver
or not; and (2) in which section of the response the record is placed.
For instance, a DNS response, which is an authoritative answer
in the authority section from an authoritative nameserver (e.g.,
iana-servers.net ), will have a higher trust level than a response
from non-authoritative nameservers (e.g., .net zone file).
Some new attacks can be used to circumvent the protection.
However, they are all based upon strong assumptions and have
difficulty succeeding in practice. For example, prior research [46]
shows that an attacker can abuse caching rules to place a poisonous
record in a resolver’s cache, requiring the attacker to craft a DNS
response to bypass the challenge-response protection. As another
example, the study [42] found that the attacker can revive a revoked
domain by extending its TTL value, when the domain’s nameserver
is assumed to be under his control, without providing a practical
scenario in which the assumption is possible. By comparison, we do
not make these assumptions in our research, and our attack works in
practice whenever a Zref is found (Section 4). Also, the deployment
of DNSSEC [77] may mitigate the risk due to the authorization
between parent/child zones. However, the protection still has not
been widely used [16, 73, 74, 79].
2.2 DNS Hosting
Operations of DNS hosting services. A DNS hosting provider is
a service that provides authoritative nameservers to help its cus-
tomers manage the DNS records of their domains. To use such a
service, one first creates an account with the provider and adds
a domain under her account. Then, the provider assigns a set of
nameservers to manage the domain and respond to its DNS queries.
This is achieved in various ways across different hosting services.
For instance, DigitalOcean [26] offers a fixed set of nameservers
(i.e., ns[1,2,3].digitalocean.com) to all of its customers, while
CloudFlare [18] and GoDaddy DNS hosting [36] randomly select
two or more nameservers (e.g., [hank, val].ns.cloudflare.com;
[ns51,52].domaincontrol.com) from their nameserver pools for
(a) DNS configuration and resolution for a vulnerable domain
(b) DNS configuration and resolution for a hijacked domain
Figure 2: Overview of the threat model. (a) shows the case of vulnerable domain (i.e., example.com). (b) shows the case of the
domain being hijacked (Bold represents the stale NS records. For simplicity, here we ignore queries to the root DNS servers.)
each user. In our study, we observe that all DNS hosting providers
(Table 1) validate the absence of an active zone for a domain in
their services before hosting it, except for the Amazon Route 53 [6],
which allows the same domain to be hosted under different ac-
counts and assigns different nameservers to manage it for these
accounts. Similar protection measures are taken by most providers
to prevent subdomain hijacking.
Security risks. Once a customer stops using the hosting service,
the provider’s nameservers stop responding to the queries for her
domain1 and return the REFUSED status code instead. If the cus-
tomer does not clear up her NS records (in the TLD zone or the
new SLD zone) that point to these deactivated hosting nameservers,
then these records become stale and pose security risks [12, 13].
In particular, we found that most providers do not validate their
customers’ ownership of the domains they claim under their ac-
counts, possibly due to the belief that to have the domains fully
resolved, the NS records have to be properly updated at the TLD
level (i.e., at the registrar) and therefore are under the full control
of authorized parties. Even when the TLD zone contains the stale
RRs, the misconfiguration is conspicuous, since failure in resolving
is likely to happen and be noticed by the domain owner. Our study,
however, shows that it is possible to trigger an unexpected resolu-
tion path through the stale NS record at the SLD zone, even when
the record is not present in the TLD zone. This opens a new and
stealthy avenue to exploit the stale record for hijacking a domain.
3 ZOMBIE AWAKENING ATTACK
Threat model. We present the Zaw attack, assuming the presence
of at least one stale NS record in a target domain’s SLD zone that
points to a DNS hosting service that is not verifying the ownership
of the domain being claimed. This enables an adversary to stealthily
hijack a domain with ongoing service, by exploiting both the name-
server at the hosting service and the targeted resolvers, to divert
the traffic the domain receives. Later we show that these assump-
tions are realistic (Sections 4.3 and 5.2): our analysis of over 1M
high-profile domains has brought to light 628 hijackable 2 domains
with Zrefs that enables such a Zaw attack.
Stale NS record at SLD zone. As mentioned earlier, the Zaw at-
tack aims at the stale NS record at the SLD zone. The presence of
such a record is less noticeable since it does not normally affect the
resolution of a domain in the absence of the attack. As an example,
Figure 2a shows a client that attempts to connect to a vulnerable do-
main example.com. In this case, the NS record at both the TLD and
SLD zones points to ns.example.com. A domain typically has mul-
tiple NS records, and ideally, its NS RRSets are identical at the TLD
and the SLD zones. The SLD zone further contains its A record that
points to the IP address set by the domain’s owner. In reality, the
domain’s zone may include a stale NS record pointing at a DNS host-
ing provider ns.provider.com that no longer manages the domain.
The existence of such a record could be caused by the importation of
the SLD zone information from the provider (ns.provider.com) to
the new DNS server (ns.example.com) when moving the domain’s
management out of the provider. Oftentimes, the RRs that do not
affect the normal resolution of the domain are left there without
being cleaned up.
More specifically, when the stale NS record remains in the TLD
zone, it can be used to locate the authoritative nameserver of the
domain (which will fail) and, therefore, could make the domain
temporarily unavailable. However, if it just appears in the SLD zone,
it becomes almost unnoticeable. Figure 2a illustrates the resolution
process in the presence of the stale record. As mentioned earlier
(Section 2.1), when a resolver receives a request to map the domain
example.com to its IP address (
) and cannot find the answer from
1CloudFlare is an exception and continues to resolve the domain until the referral
records are changed.
2Through out this paper we use the terms hijackable, vulnerable, and exploitable
interchangeably.
ns.example.com.com nameserverexample.com  NS  ns.example.comexample.com  NS  ns.example.comexample.com  A   IPcorrectexample.com  NS  ns.provider.comns.provider.comexample.com  NS  ns.provider.comexample.com  A   IPcorrectexample.com NS  ns.example.comexample.com A   IPcorrectResolver23567814ns.example.com.com nameserverexample.com  NS  ns.example.comns.provider.comexample.com  NS  ns.provider.comexample.com  A   IPattackerexample.com NS  ns.example.comexample.com NS  ns.provider.comexample.com A   IPattackerResolver1236example.com NS?example.com A?107example.com  NS  ns.example.comexample.com  A   IPcorrectexample.com  NS  ns.provider.com45911121314889410111213141). This response (
) to get the domain’s A record (i.e., IPCorrect)(
its cache, it forwards the query to the TLD’s DNS server (
), which
in turns responds with the domain’s NS records at the TLD (pointing
to ns.example.com) (
) could be cached by
the resolver, which continues to query the returned nameserver at
the SLD zone (
).
This response is then sent back to the client (
) and cached by
the resolver until its TTL expires (
). As we can see here, during
this process, the stale NS record at the SLD zone is not used3, and
therefore, its presence is almost oblivious.
Attack. Such a hidden stale record, however, can still be exploited
by an adversary to build and later trigger a resolution path that
leads to domain hijacking. Figure 2b illustrates how this zombie
awakening attack works: the adversary first claims the vulnerable
domain at the DNS hosting provider and then poisons the cache of
the targeted resolver with the A record through the stale NS record.
Specifically, the adversary sets an account at the hosting provider
) to
directed by the stale NS record of the domain example.com (
) at the same nameserver on
claim the domain and set its RRs (
the stale record (i.e., ns.provider.com) (see Section 2.2). Here, the
adversary creates an A record for the domain that points to an IP
address under his control (i.e., IPAttacker).
To hijack the domain, the adversary activates the stale resolution
path through ns.provider.com to attack the A record by poison-
ing a target resolver. For this purpose, he strategically queries the
resolver for the NS records of the domain (
). If no authoritative
answer is found in the resolver’s cache, the resolver sends the
request to the TLD’s nameserver (
) and receives a NS RR with
). This nameserver is further contacted for NS
ns.example.com (
RRs in the SLD zone (
), which results in all such records, includ-
ing the one with ns.example.com and the stale record pointing
to ns.provider.com to be cached at the resolver side (
). Note
that in this case, the NS RR from the TLD zone is replaced by the
RRs (including the stale one) from the domain zone (
) as the
authoritative response from the SLD zone has a higher trust level
than a referral from the TLD zone.
), which is cached by the resolver until its TTL expires (
After that, the adversary can query the resolver for the domain’s
A record (
). Given that both NS records are cached, if chosen
randomly, the stale record has a 50% of chance to be used to find
the A record (
). When this happens, the entire attack resolution
path is activated: ns.provider.com returns the attack A record
(
).
The adversary can ensure the success of such contamination by
repeatedly querying the resolver until he receives IPAttacker. Later,
when the resolver is contacted to resolve the domain (
) by a
legitimate client, IPAttacker is given as the response, and the traffic
of the follow-up visit is then directed to the attacker’s IP address
(
).
In our research, we implemented this attack on our domains to
check 17 hosting providers (e.g., AWS Route 53 and GoDaddy DNS
hosting) and 12 resolver operators (e.g., CloudFlare and Quad9). The
results show a high success rate (Sections 4.3), confirming that the
threat is indeed realistic and serious. We further demonstrate that
vulnerable domains with the exploitable stale NS records widely
exist using ZreFinder (Section 4).
3An exception is that the nameserver could be configured to also send the SLD NS RRs
to the resolver.
Figure 3: Workflow of ZreFinder to identify hijackable do-
mains, where PVDs represents the potential vulnerable do-
mains.
4 UNDERSTANDING ZAW RISKS
In this section, we first present ZreFinder, a semi-automatic method-
ology for finding Zrefs, and how to utilize it for a large-scale dis-
covery of domains vulnerable to the Zaw attack. We also describe
a study to analyze whether open DNS resolvers can be used to
“awaken” zombie resolution paths for domain hijacking.
Figure 3 illustrates the workflow of ZreFinder: it first runs an
automated mechanism to scan public domains and identify those
containing stale NS records at the domain level (
), called poten-
tially vulnerable domains or PVDs; then, from the nameserver in
those records, our approach determines those associated with DNS
hosting services. Furthermore, we manually analyze these services
to find out whether they allow a zombie resolution path to be built
and whether some hidden policies on handling public domains are
in place to prevent the PVDs from being exploited (
). The outputs
of the analysis are a list of vulnerable domains and their stale NS
records, which are considered Zrefs.
In our study, we collected Alexa’s top-1M [4] domains, together
with around 20K education and government domains collected from
Farsight’s DNSDB [33], Table 2. From these domains, ZreFinder
reported 4,914 PVDs with unresponsive NS records in their SLD
zones (Section 4.1). Furthermore, our approach discovered 12 vul-
nerable providers that allow one to make unauthorized claims on
their related PVDs among 17 popular DNS hosting providers. As a
result, 628 domains were confirmed to be hijackable (Section 4.2).
Finally, we present our study on resolvers which included: the 46
most popular resolvers [78], 11K open resolvers [28], and an or-
ganizational resolver, show that the vast majority of them can be
easily manipulated to trigger the domain hijacking attack.
4.1 PVD and Provider Discovery
Methodology. To identify PVDs, we built a scanner to automati-
cally inspect a large number of domains. Given a domain 𝑑𝑛, our
approach first locates all its NS records in the SLD zone (but not
in the TLD zone) and then evaluates whether the nameservers
they point to still resolve 𝑑𝑛’s DNS query requests. Algorithm 1
ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver23567814ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver2356781489410111213141ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver23567814ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver2356781489410111213141ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver2356781489410111213141ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver23567814ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver2356781489410111213141ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver23567814ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver23567814ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver2356781489410111213141894101112131418941011121314189410111213141894101112131418941011121314189410111213141Find PVDsDomains(PVDs, unresponsive NS)Providers
 ListFind the frequently 
used providersCorresponding PVDsApply heuristicsHijackable 
DomainsBlacklistsData CollectionSeized Domains IdentiﬁcationSinkhole IP/NSReverse Lookup∪DM?WhoisPDNSWhois  RecordsPDNS  RecordsDelisted  Domain IdentifierSinkholed Domain IdentifierExtend Sinkhole DurationDBDSDomains on HoldSinkhole Durations∪Seized Domain Profiles DM?WhoisPDNSWhois  RecordsPDNS  Records.TLD BlacklistsData CollectionSeized Domains IdentiﬁcationSinkhole IP/NSReverse Lookup∪DM?WhoisPDNSWhois  RecordsPDNS  RecordsDelisted  Domain IdentifierSinkholed Domain IdentifierExtend Sinkhole DurationDBDSDomains on HoldSinkhole Durations∪Seized Domain Profiles Identify PVDsIdentify Hijackable Domains Check provider
if aﬀected89410111213141ns[1,2].example.com.com nameserverexample.com  NS  ns[1,2].example.comexample.com  NS  ns[1,2].example.comexample.com  A   IPcorrectexample.com  NS  ns[1,2].provider.comns[1,2].provider.comexample.com  NS  ns[1,2].provider.comexample.com  A   IPcorrectexample.com NS  ns[1,2].example.comexample.com A   IPcorrectResolver23567814describes process. Specifically, for each domain (e.g., example.com),
we collect two NS record sets: the TLD NS RRSet (TLDns) and
the SLD NS RRSet (SLDns) for a differential analysis. Here the
TLDns are found by querying the domain’s TLD authoritative name-
server (e.g., a.gtld-servers.net) through dig NS example.com
@a.gtld-servers.net. We then continue to query all the returned
nameservers (e.g., ns[1,2].example.com) to acquire the SLDns,
e.g., through dig NS example.com @ns[1,2].example.com. After
that, our approach compares the TLDns and the SLDns to identify
the nameservers that appear on the NS records in SLDns but not in
the TLDns. For each such nameserver, we further look into whether
its NS record is indeed stale; that is, the target domain 𝑑𝑛 is not
configured at the nameserver [68], which causes any query for the
domain on the server to return a REFUSED status code [25]. When
the domain is confirmed to include such a stale NS record in its SLD
zone, it is considered to be a PVD.
Once PVDs have been discovered, our approach analyzes them
to identify the potential DNS hosting providers involved (pointed to
by their stale NS records), particularly the popular ones. To this end,
our approach first extracts the domain name from all nameservers