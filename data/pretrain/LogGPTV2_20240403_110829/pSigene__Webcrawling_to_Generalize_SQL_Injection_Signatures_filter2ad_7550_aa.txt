title:pSigene: Webcrawling to Generalize SQL Injection Signatures
author:Gaspar Modelo-Howard and
Christopher N. Gutierrez and
Fahad A. Arshad and
Saurabh Bagchi and
Yuan Qi
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
pSigene: Webcrawling to Generalize SQL Injection Signatures
Gaspar Modelo-Howard
Christopher N. Gutierrez, Fahad A. Arshad, Saurabh Bagchi, Yuan Qi
Narus
PI:EMAIL
{faarshad,gutier20,sbagchi,alanqi}@purdue.edu
Purdue University
Abstract—Intrusion detection systems (IDS) are an impor-
tant component to effectively protect computer systems. Misuse
detection is the most popular approach to detect intrusions,
using a library of signatures to ﬁnd attacks. The accuracy of
the signatures is paramount for an effective IDS, still today’s
practitioners rely on manual techniques to improve and update
those signatures. We present a system, called pSigene, for the
automatic generation of intrusion signatures by mining the vast
amount of public data available on attacks. It follows a four-
step process to generate the signatures, by ﬁrst crawling attack
samples from multiple public cybersecurity web portals. Then,
a feature set is created from existing detection signatures to
model the samples, which are then grouped using a biclustering
algorithm which also gives the distinctive features of each
cluster. Finally the system automatically creates a set of
signatures using regular expressions, one for each cluster. We
tested our architecture for SQL injection attacks and found
our signatures to have a True and False Positive Rates of
90.52% and 0.03%, respectively and compared our ﬁndings
to other SQL injection signature sets from popular IDS and
web application ﬁrewalls. Results show our system to be very
competitive to existing signature sets.
Keywords-web application security; signature generalization;
biclustering; SQL injection;
I. INTRODUCTION
Network intrusion detection systems (NIDS) are an im-
portant and necessary component in the security strategy
of many organizations. These systems continuously inspect
network trafﬁc to detect malicious activity and when this
happens, send alerts to system administrators. One type
of NIDS, called misuse-based detector, uses signatures of
attacks to inspect the trafﬁc and ﬂag the malicious activity.
But a potential problem faced by these signature-based NIDS
is that as new attacks are created and as new kinds of benign
trafﬁc are observed, the signatures need to be updated. The
current approach to this process is manual. Consequently,
keeping them updated is a Herculean task that involves
tedious work by many security experts at organizations
that provide the NIDS software. A big drawback of the
signature-based schemes that has been pointed out by many
researchers and practitioners [20], [9] is that due to their
relatively static nature, they miss zero-day attacks. These
are attacks that target hitherto unknown vulnerabilities and
consequently, no signature exists for such attacks. Our goal
This work was done while G. Modelo-Howard was a graduate student in
the Department of Electrical and Computer Engineering, Purdue University.
in this work is to automatically generate signatures by
performing data mining on attack samples. Further, we aim
to create generalized signatures; “generalized” implies the
signatures will be able to match some zero-day attacks as
well, not just the attack samples that it has been trained on.
We use SQL injection attacks for developing and demon-
strating our method.
We look at the rulesets of three popular misuse-based
detectors—Snort [37], Bro [28], and ModSec [41]. From
these, we observe the reﬂection of the ad hoc and manual
nature of the signature creation (and update) process. We
observe that many rulesets include signatures that are too
speciﬁc, many are disabled by default, and several show
clear overlaps. For example, 70% of the almost 20,000
signatures included in the ruleset for Snort (snapshot 2920)
are disabled by default. Also, several sets of signatures
contained in the Snort ruleset ﬁle sql.rules could be
merged as one. For example, signatures with identiﬁers
19439 and 19440 have the same regular expression, except
for the last character and hence could easily be merged. Ad-
ditionally, we found multiple examples of signatures using
very simple regular expressions, which increases the risk of
generating false positive (FP) alerts. As an example, several
rules in Snort use the regex .+UNION\s+SELECT to detect
SQL injection attacks, by searching for the SQL statements
UNION and SELECT. The problem is that such search might
be too simple as these statements are also commonly found
in benign database queries from web applications.
In this paper, we propose a solution for the automatic
creation of generalized signatures represented as regular
expressions, by applying a sequence of two data mining
techniques to a corpus of attack samples. The goal is to
make the process less manual (and tedious) and target
detection of zero-day attacks. We call our solution pSigene
(pronounced psy-gene), which stands for probabilistic
Signature generation. pSigene follows a four-step process. In
the ﬁrst step, it crawls multiple public cybersecurity portals
to collect attack samples. In the second step, it extracts a rich
set of features from the attack samples. In the third step,
it applies a specialized clustering technique to the attack
sample (training) data collected in step 2. The clustering
technique also gives the distinctive features for each cluster.
In the last step a generalized signature is created for each
cluster, using logistic regression modeling, which is trained
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.21
DOI 10.1109/DSN.2014.21
DOI 10.1109/DSN.2014.21
45
45
45
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:01 UTC from IEEE Xplore.  Restrictions apply. 
both on attack sample data (from step 2) and some benign
trafﬁc data. Logistic regression gives a probabilistic classiﬁer
— given a new sample, it can tell with a probability value
what is the likelihood of the sample belonging to any given
cluster.
Regular expressions (regexs) are a structural notation for
describing similar strings. Regexs are a powerful tool used to
deﬁne languages, per the automata theory deﬁnition. Current
NIDS have incorporated the usage of regexs to generalize
signatures, so variations of attacks can be detected. We adopt
the use of regexs for our generalized signatures.
Most of the efforts to date to automate the signature
creation process has been related to malware activity [44],
[19], such as for worms and botnets. This landscape is
different from ours in that we target attack steps that have
a small “distance” from legitimate activity. Consider for
example, an SQL injection attack in which a small variation
in the where clause, such as a tautology 1==1, followed by
a comment demarcation symbol “;”, can cause a legitimate-
looking SQL query to become an attack sample. Second, we
consider activities where the feature set of each sample is
very rich. For example, we ﬁrst started with 477 features for
SQL injection attacks, corresponding to various keywords,
symbols and their relative placements. The rich feature set
poses challenges and constraints on the kinds of machine
learning techniques that can be used.
We demonstrate our solution speciﬁcally with SQL in-
jection attacks (shortened as SQLi attacks). Although there
exist elegant preventive solutions to solve this problem,
like parameterizing SQL statements [4], dynamic bracket-
ing [38], taint inference [36], and escaping special SQL
characters [18], in practice it seems elusive to completely
implement such solutions. SQLi attacks have been very
dominant in the last few years, being used in high-proﬁle
cases such as intrusions to large technology organizations
[14], government agencies [2], and software companies [23],
[8]. Signatures to improve detection mechanisms, such as
what pSigene delivers, are necessary as they complement
prevention mechanisms.
pSigene effectively suggests the number of signatures
necessary to detect the attacks while helping to reduce the
size of each signature, in terms of the number of features
necessary to deﬁne each signature. In our experiments,
pSigene collected a set of 30,000 attack samples from which
we manually extracted a set of 159 features and then pSigene
created nine signatures, all but one of which required 14
or fewer features. For testing, we used the popular SQL
injection tools SQLmap [7], Arachni [1] and Vega [39].
The experimental results showed that our signature set was
able to detect 86.53% of all attacks while only generating
0.037% of false positives. This is a higher true positive rate
for SQLi than Snort (79.55%) and Bro (73.23%), which use
manually created and progressively reﬁned signatures. Bro
had no false positive while Snort had about 5X false posi-
tives compared to pSigene. ModSecurity however performed
better than pSigene with a true positive rate of 96.07%, and a
false positive rate slightly worse (0.0515% compared to our
0.037%). We also compared our technique to an existing
signature generation algorithm [29] and found that its TPR
was very low but it had no false positive at all.
The contributions of our work are:
1) An automatic approach to generate and update signa-
tures for misuse-based detectors.
2) A framework to generalize existing signatures. The
detection of new variations of attacks is achieved by
using regular expressions for the generalized signa-
tures.
3) We rigorously benchmark our solution with a large
set of attack samples and compare our performance to
popular misuse-based IDS-es and a web application
ﬁrewall. Our evaluation also brings out the impact
of practical use case whereby periodically new attack
samples are fed into our algorithm and consequently
the signatures can be progressively, and automatically,
updated.
The remainder of this paper is structured as follows:
Section II presents the threat model used along with the
different components for the proposed framework. Section
III describes the dataset used to evaluate pSigene, the evalua-
tion results along with a comparison to existing open-source
rulesets and to another signature generation algorithm. We
also determine the performance implications of using our
approach. A discussion follows in Section IV about the
usage scenarios and limitations of our approach. Then we
give an overview of previous approaches to automatically
generating signatures and detecting attacks through inter-
actions between web services and databases. We end with
some conclusions and future work.
II. DESIGN
The goal of pSigene is to generate generalized signatures
from traces of attack samples and non-malicious network
trafﬁc. As shown in Figure 1, the generation of the signatures
involves four phases. First multiple public cybersecurity
portals on the Internet are crawled to collect attack samples.
In the second step, a set of features is extracted from the
attack samples. The third step calls for the sample set to be
grouped using a clustering technique. This step also gives
the features that distinguish each cluster. In the ﬁnal step,
a generalized signature is created for each cluster, using
logistic regression modeling. The process allows to create
signatures that represent a set of similar attacks, reducing
the number of rules handled by a NIDS.
To develop our system, we consider SQL injection (SQLi)
attacks. They have been a very relevant and popular attack
vector for the last few years. IBM [16] reported that in
2012 the majority of the security incidents detected on
their monitored clients around the world were attributed
464646
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:01 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. Components of the pSigene architecture, a webcrawl-based creation process for SQLi attack signatures. For each component, there is a reference
to the section providing further details. It is shown below each component.
to SQLi. Also, injection attacks were the primary cause of
incidents, making SQLi a primary attack vector for hackers.
To consider this attack type, our threat model assumes
attacks against web applications, connected to a database
(commonly known as three-tier system). An attacker starts
by having a publicly accessible description of the system and
then browses the web application, looking for forms where
she can provide user input and then this input can serve as
parameters for an SQL statement.
A. Webcrawling for Attack Samples
The ﬁrst phase is to crawl
the web to collect attack
samples that later are used to generate the generalized signa-
tures. The objective is to take advantage of the multitude of
public web sources available that provide attack samples.
This approach looks to proactively collect samples from
multiples web sources, which is the opposite of a more
common strategy to use honeypots to collect attack samples.
We chose to proactively collect samples because we are
targeting slow moving attacks (such as SQLi), they present
a greater diversity than typically handled by honeypots, the
distance between legitimate requests and malicious requests
is often quite small, and above all, for a purely logistical
reason — to speed up the data collection. Our approach
was facilitated in practice by the wide availability of well-
maintained data sources of SQLi attack samples, some of
which provide APIs to enable automated sample collection.
A practical point here is that what we see during the web
crawling is the entire HTTP request payload and we extract
the SQL query from it by leaving out the HTTP address,
the port, and the path (typically a ? indicates the start of the
query string).
To collect the attack samples, we crawled different cy-
bersecurity portals between April and June of 2012. Each
portal or site is a public repository of computer security
tools, exploits, and security advisories, where security pro-
fessionals and hackers share examples of different attacks.
Examples of cybersecurity portals include Security Focus
EXAMPLES OF SQLI VULNERABILITIES PUBLISHED IN JULY 2012.
Table I
VULNERABILITY
Joomla 1.5.x RSGallery 2.3.20
component
Drupal 6.x-4.2 Addressbook mod-
ule
Moodle
mod/feedback/complete.php
2.0.10
RTG 0.7.4
95/view/rtg.php
and RTG2
2.0.x
0.9.2
CVE ID
CVE-2012-3554
CVE-2012-2306
CVE-2012-3395
CVE-2012-3881
[35], the Exploit Database [34], PacketStorm Security [27],
and the Open Source Vulnerability Database [13]. This
last site also provides its own search API, making it easy
for security practicioners and researchers to automate the
collection process of data on those sites. For sites that do
not provide such capability, one can use the APIs provided
by search engines, such as Google custom search API [15].
There are also open forums and mailing lists where users
share attack samples. In our experiments, we collected over
30,000 SQLi attack samples and used these as our dataset to
generate the generalized signatures during the experiments.
It is important for our signature generalization approach
to work effectively that the sample collection be as com-
prehensive as possible. As one heuristic-based check for
this, we manually inspected the high and medium risk SQL
injection vulnerabilities published during the month of July
2012 in the National Vulnerability Database [25] for web
applications using the MySQL database — approximately
30 in number. In each case, we found examples of SQLi
attacks in our dataset that could be launched against each
of the web applications reviewed. Table I includes some
examples of the SQLi vulnerabilities published in July 2012
and for which, we found attack samples in our collected
dataset.
Once the attack samples are collected, we use a set of
5 transformations, including uppercase → lowercase, URL
474747
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:01 UTC from IEEE Xplore.  Restrictions apply. 
Table II
SOURCES OF SQLI FEATURES.
FEATURE
SOURCE
MySQL
Reserved
Words
NIDS/WAF
Signatures
SQLi
Reference
Documents
EXAMPLES
create
insert
delete
in\s*?\(+\s*?select
\)?;
[ˆa-zA-Z&]+=
’ ORDER BY [0-9]-- -
/\*/
\"
DESCRIPTION
Words are reserved
in MySQL and require
special treatment
for use as identiﬁers
or functions.
SQLi signatures from
popular open-source
detection systems
are deconstructed
into its components.
Common strings
found in SQLi
attacks, shared by
subject matter experts.
encoding → ascii characters, and unicode → ascii characters.
B. Feature Selection
We characterize each sample using a set of features, which
will be used as input for the clustering algorithm. To create
the set of features, we use three sources that are domain-
speciﬁc for the SQLi attack scenario: (1) SQL reserved
words [26], (2) SQLi signatures from the Bro and Snort
IDS and the ModSecurity web application ﬁrewall (WAF),
and (3) SQLi reference documents [33], [6]. A summary of