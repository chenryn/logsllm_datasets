# 【技术分享】CARBANAK后门背后那些事
|
##### 译文声明
本文是翻译文章，文章来源：fireeye.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
>
> 严正声明：本文仅限于技术讨论与学术学习研究之用，严禁用于其他用途（特别是非法用途，比如非授权攻击之类），否则自行承担后果，一切与作者和平台无关，如有发现不妥之处，请及时联系作者和平台
译者：[ForrestX386](http://bobao.360.cn/member/contribute?uid=2839753620)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**0x00. 前言  
**
在这边文章中，我们将和读者一起近距离地剖析著名的、强大的、多才多艺的后门 软件：CARBANAK
（又名Anunak）。具体来说，我们将着重介绍过去几年中关于CARBANAK 后门的一些使用细节，包括后门的配置，不同样本间的细小变化，以及后门的演变史。
通过对这些细节的分析，我们将对CARBANAK后门的幕后操纵者进行一些总结。有关CARBANAK后门的更多的详情信息，请参阅[卡巴斯基](https://securelist.com/files/2015/02/Carbanak_APT_eng.pdf\))、[Group-IB与Fox-It公司](https://www.fox-it.com/en/files/2014/12/Anunak_APT-against-financial-institutions2.pdf)的相关报告。
**0x01. 技术分析**
在正式切入本篇文章的主题之前，我们有必要对这个后门进行一个简要的技术分析，以便我们对这个后门的前前后后有个大致的了解。CARBANAK后门基于插件化的架构进行开发，功能完备且具备数据窃取能力，其中的一些功能模块包括：键盘记录，桌面录屏，VNC连接，HTTP
表单抓取，文件系统管理，文件传输，TCP 隧道，HTTP
代理，操作系统破坏，SHELL反弹，POS和Outlook数据窃取等。大部分的数据窃取模块自最早的CARBANAK 后门版本开始便已具备，
当然，随着后门变种的演变，后续的变种后门也增加了一些其他的数据窃取模块。
1）后门的监控进程
CARBANAK后门会启动（可通过后门配置文件可选地启动监控进程）一到多个监控进程进行持续的监控，不同的监控进程有着不同的目的。具体如下表所示：
表1
2）后门指令
除了后门自带的文件系统管理功能，后门的数据窃取模块支持多达34种指令，这些指令通过命令控制服务器下发给后门。经过解密之后，我们找到了34种指令相关的所有明文内容，这些指令都会跟着相应的参数，这些参数以空格隔开，看起来就像我们平时用的命令行命令。这些指令和参数的名字都会被计算成hash值，然后后门会去校验这些hash是否和预期一致，只有和预期一致才会执行，这就给我们恢复指令和参数明文内容的工作带来了很大的困难。
表2
3）后门配置
后门的配置文件位于后门的安装目录，以.bin为后缀，配置文件中包含了若干指令，这些指令拥有和表2中所示指令一样的格式，当后门启动的时候，这些配置文件中的指令都会被自动执行。当然，当后门接收到loadconfig指令的时候，也会自动执行这些位于配置文件中的指令。你可以把后门的配置文件当作是后门的启动脚本。配置文件中包含一个名为state的指令（当然是以16进制hash值表示的），这个指令会设置一个包含了一串布尔值（用ASCII码中的0
或1’表示）的全局变量。这一串布尔值中某些值表示后门和命令控制服务器之间的通信协议，有的值表示后门是否已经安装，
有的值表示PST监控进程是否已启动。不仅仅是state
指令，其他的所有指令都是以16进制hash值而不是明文名字被保存在配置文件中的，某些指令在执行时会自动将自己添加到配置文件中，以便它们在后门重启后自动生效（有的指令不需要重启后门）。loadconfig指令和state
指令在后门初始化期间就被执行，如果发现后门配置文件不存在，则重新创建一个，并将state指令写入配置文件中。
图1和图2 描绘了一些我们在调查中遇到的解码后的配置文件内容。
图1：增加一个新的命令服务器地址，强制数据窃取模块使用这个新的地址和命令服务器通信
图2：新增3个TCP隧道，指示后门进行桌面录屏
4）指令与控制
CARBANAK 后门和命令服务器之间的通信协议要么是伪HTTP协议，要么是自定义二进制协议
**关于伪HTTP协议**
伪HTTP协议中的消息字段被 ‘|’ 字符分割开来，消息主体从主机ID开始，该主机ID由两段组成，其中一段是一串hash，这个hash
由主机名和主机MAC值计算而来，另一段是一个可能是标识活动代码的字符串，
一旦消息被格式化完成，然后就会有额外的个字段（这两个字段值由随机的大小写字符组成）包裹住这个消息内容。
图3和图4向您描绘了命令控制服务器轮询后门，获取进程列表信息的消息：
图3：命令控制服务器轮询后门，获取进程信息的消息
图4：后门响应后门消息
传输中的消息都会先经过RC2_CBC_PKCS5Padding （微软实现版）加密处理，然后再进行Base64编码，
Base64编码的目的是将RC2_CBC_PKCS5Padding 加密结果中的’/’ 和 ‘+’ 分别替换成’.’ 和 ‘-‘.
，然后由随机的大小写字母组成的8位初始化向量值会增加到经过加密和编码后的消息前面。
然后后门会向载荷内的随机位置插入随机数量的’/’字符，这样会使得命令载荷看起来像一个URI，再然后后门会在载荷末尾增加一个携带参数的脚本后缀或一个不携带参数的文件名，如果是脚本后缀(比如php,bml,cgi等)这个脚本后缀会携带若干数量的名称和值都随机的参数值对；如果是一个文件名，这个文件的后缀名一般是gif,
jpg, png, htm, html, php。
最后，这个看起来像URI的命令载荷会通过HTTP 的GET 或者POST
请求发送出去。如果是POST请求，那么POST请求body中可能会包含cabinet 格式的文件，图5是一个简单的通过HTTP GET
请求发送命令请求的例子。
图5
这个伪HTTP 协议会使用HTTP 代理监控进程发现的的任何代理配置 或者由adminka 指令配置的代理信息。
后门也会在注册表(HKCUSoftwareMicrosoftWindowsCurrentVersionInternet Settings )和Mozilla
Firefox 配置文件(%AppData%MozillaFirefoxprefs.js)中搜索可用的代理配置信息.
**自定义二进制协议**
图6描绘了后门所使用的自定义二进制协议中的消息格式。 如果指令消息大于150字节， 它就会被一个目前还无法识别的的压缩算法压缩。
如果指令消息大于4096字节，它就会被分割成多个压缩块。后门所使用的这款自定义二进制协议这些年也发生了一些变化， 新的版本都会在旧的版本上做一些小调整，
二进制协议中的这些变化可能会使得现有网络签名无效，使得签名创建更加复杂和困难。
图6：二进制协议中的消息格式
**版本1**
在二进制协议的最早版本中，消息body内容会与主机ID进行异或运算，然后将结果保存在字段中，而且，初始化的消息是没有被加密的，这个初始化消息中就包含了主机ID。
**版本2**
这个版本不再使用主机ID作为异或key值， 这个版本会在每一个session中重新生成一个大小在32 到
64之间字节的随机key值，这个key值用于和消息body进行异或运算。
**版本3**
版本3给消息头进行了加密，
消息头的前19个字节（从消息内容开始位置直到字段为止）会与5个字节的随机key值进行异或运算然后被存储在字段中,
这5个字节的随机key值在每一个消息中都是不一样的。如果消息头中字段数大于1，用于加密消息体的异或key在加密和解密消息时反向进行迭代。
**版本4**
这个版本中，消息头的加密模式增加了一点小复杂度，首先会使用字段存储的异或key与消息头内容进行异或运算，然后再使用字段存储的异或key进行异或运算，最后将两次异运算的结果组合在一起并反转得到最终加密结果。