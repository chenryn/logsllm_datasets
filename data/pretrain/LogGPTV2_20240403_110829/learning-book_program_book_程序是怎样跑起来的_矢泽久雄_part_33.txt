该函数的处理内容比较短，因此并不需要多个函数。即便如此，
如果我们非要将其分成两个函数的话会怎样呢？我们不妨来看一下。
分开后如代码清单A-4所示。在main函数中，从键盘输入两个数值并
分别赋值给a和b，然后把这两个数值作为参数传递给刚做成的
---
## Page 267
函数调用
average函数，再将average函数的返回值赋值给变量ave，这样ave的
数值就被输出在显示器上了。由此可见，average函数成功地实现了求
解作为参数的两个数值的平均值并把结果返回这一操作。这是因为
main函数调用了average 函数。
代码清单A-4从main函数中调用average函数的程序示例
#include 
int average(int, int) ;
//定义average函数的原型
void main( void ){
Int a, b, ave;
//定义3个int类型的变量a、b、ave
(P)gues
//接收从键点输入的a
scanf (*$d", sb) ;
//计算a和b的平均值，并将结果赋值绝ave
//挂收从键盘输入的b
printf(*d\n*,ave))
ave = average(a, b) ;
//把ave的值输出到显示器上
int average (int a, int b)[
return (a + b) / 2;
//把2个参数的平均值作为返回值返回
int average(int a, int b){) 开头的 int，表示 average 函数的返回值
是int类型，括号中的int表示的是参数a和b是int类型。retum是返
回函数返回值的指令。这里返回的是（a+b）/2，也就是a和b的平均值。
请大家注意一下代码清单A-4中的注释“定义average函数的原型”
这一部分。编译器会按照从上到下的顺序解析源代码的内容。面如果
main函数中突然出现average函数的话，编译器就会理解为“没有该函
数”，从面进行报错。正因为如此，就有必要在代码的开头部分加上int
average(int,int)，来告诉编译器“在后面有一个名是average、返回值是
int类型、两个参数也是int类型的函数”。这个就称为函数原型定义。
前面已经提到，stdio.h文件中定义了标准函数库中的printf和scanf
函数。具体来说，就是在stdio.h文件中定义了printf和scanf的原型。
253
---
## Page 268
附录让我们开始C语言之旅
局部变量和全局变量
在函数模块中定义的变量，只能在该函数中使用。这样的变量就
称为局部变量。局部（local）是“当地的、地区的”的意思。在代码清
单A-4中，main函数中定义的a、b、ave都是局部变量。如果将局部
变量的数值传递给其他函数来处理的话，该数值就会被作为参数来使
用。代码清单A-4就是把main函数的局部变量a、b作为参数传递给
了average 函数。
变量也可以在函数模块外进行定义（虽然函数处理必须要在函数的
模块中进行，但变量是可以在模块外进行定义的），该变量称为全局变
量。全局（global）是“全世界的、全体的”意思。全局变量在程序的
所有函数中都可利用。因而，通过利用全局变量，在函数中就可以获
取其他函数的数值。不过，在大规模的程序中过多使用全局变量的话，
就会使程序内容变复杂（无法清楚掌握是哪些函数在使用全局变量）
这一点一定要注意。
将代码清单A-4的程序示例改造为使用全局变量的形式后，结果
就如代码清单A-5所示。可以看出，average函数的参数没有了。而
ave还是局部变量的形式。这是因为ave仅仅被用在了main函数中。
代码清单A-5利用全局变量的程序示例
#include 
int average(void) ;
//定义average函数的原型
int a, b;
//定义全局变量a、b
void main(void)(
scanf(*d",5a);
int ave;
//定文局部变量ave
//接收从键虚输入的b
//接收从键盘输入的a
）-
//计算a和b的平均值，并搞结果赋值给ave
printf（*4d\n，ave）;//把ave的值输出到显示辖上
---
## Page 269
数组和环
1
int average(void)(
return（a+b）/2：//把两个参数的平均值作为返田值退图
数组和循环
处理大量数据是计算机擅长的领城之一。例如，在求解100万个
数据的平均值的时，利用计算机瞬间就能完成。在程序中表现大量数
据时，通常会使用数组的形式。数组的全体数据用同一个名字（数组的名
字）来表示，各数据（称为元素）则通过从0开始的连续编号（称为索
引）来进行区分。100万个数据的话，输人起来太过麻烦，因此，这里我
们就来做一个求解10个数据的平均值的程序，如代码清单A-6所示。
代码清单A-6求解10个数据的平均值的程序示例
#include 
void main(void)(
Int data [10]:
//定义具有10个元素的数组data，数据类型为int
int sum, ave, 11
//定义3个int类型的变量gum、ave、
0.-uns
//把用来保存总和结果的sum清0
//将1从0~9逐-+1，退增错环
for（i=0;1<10;++）{
BcanE（4d*，4data[111：//把从键盘输入的数值存入data[1]中
sun += data [1]:
// 把把data[1]的数值累加到 sun中
printf（d\n*，ave）;//将ave的值输出到显示器上
ave=sun/ 10;
//用sum除以10得到平均值
intdata[10]：部分是数组的定义。表示的是“请准备好数据类型是
int、有10个元素、数组名为data的数组”。定义数组后，data[0]、
data[1]、data[2]、data[3]、data[4]、data[5]、data[6]、data[7]、data[8]
255
---
## Page 270
附录让我们开始C语言之旅
data[9]这10个元素就可以使用了。虽然数组是带方括号的表现形式，
但数组各元素的利用和通常的变量是没有区别的。
从键盘重复输人10个数值，并分别赋值给data[0]~data[9]。输人
的数值与变量sum连续相加 10次后，即可得到data[0]~data[9]的总
和。将sum的数值除以10后得到的平均值代人ave中，并把结果输出
到显示器上。
连续10次的重复处理，用for(int=0;i<10;++){-)来表示。for括
号中的内容被分号分割成了3部分，按照顺序分别是“循环刚开始时只
执行一次”“循环继续的条件”“每次循环处理后执行的处理”。在处理
数组的情况下，for括号中一般以表示数组索引的变量（在这里是i）从
0开始逐一增加的形式来指定元素。变量称为循环计数器。循环
（loop）是“重复”的意思。因此，for（int/=0;k<10;i++）表示的就是“循
处理完毕后i的数值+1”。这样，i的数值就是从0~9逐一递增，for
模块（0围起来的部分）中的处理也被重复10次。
这里请大家注意一下for模块中的data[i]。它表示的是数组data的
第i元素的意思。由于i的值是从0~9依次递增的，因此，数组各元
素data[0]～data[9]的处理（这里指从键盘输入、sum求和）就可以按照
顺序进行了。
其他语法结构
C语言的语法结构是ANSI（AmericanNational Standard Institute，
美国国家标准协会）制定的。ANSI规定了如表A-2所示的32个C语
言的关键词。如果能够完全理解这些关键词的具体意思和用途的话，
那就说明你已经掌握了C语言的语法结构。在补充章节中，已经涉及
---
## Page 271
其他谱法结构
到了不少关键词。因此，大家只需查一下没有涉及的关键词有多少，
就能知道自己还需多久才能完全掌握C语言了。
表A-2C语言的关键字（按英文字母排序）
auto
声明自动变量
break
跳出当前循环
case
开关语句分支
char
声明字符型变量或函数
const
声明只读变量
continue
结束当前循环，开始下一轮循环
defaut
开关语句中的“其它”分支
do
循环语句的循环体
double
声明双精度变量或函数
else
条件语句否定分支（与证连用）
enum
声明枚举类型
cxtern
声明变量是在其它文件中声明
float
声明浮点型变量或函数
for
一种循环语句
goto
无条件就转语句
if
条件语句
int
声明整型变量或函数
long
声明长整型变量或函数
register
声明寄存器安量
return
子程序返回语句（可以带参数，也可不带参数）福环条件
short
声明短整型变量或函数
signed
声明有符号类型变量或函数
sizeof
计算数据类型长度
static
声明静态变量
struct
声明结构体变量或函数
switch
用于开关语句
lypede!
用以给数据类型取别名
union
声明共用数据类型
unsigned
声明无符号类型变量或函数
void
声明函数无返回值或无参数，声明无类型指针
volatie
说明变量在程序执行中可被隐含地改变
while
环语句的循环条件
更多资料请关注裁的新浪体客址p：
---
## Page 272
附录让我们开始C语言之旅
最后讲一下学习C语言的技巧。不仅仅是C语言，学习所有编程
语言的语法结构，都不应该是圆图吞枣地背下来。只有多做上机练习
并反复确认运行结果，才能征服这门语言。因此，我并不希望大家仅
仅记住语法结构，面是要掌握该语法的具体使用方法。“了解语法结构
但不会编写程序”和“知道英文语法却不会说英语”是同样的。不管是
C语言还是英语，都是从实践中得来的。在C语言的语法结构中，很
多人都提到指针和结构比较难。面如果想要掌握指针和结构的话，那
你就要去查看一下它们是如何使用的，并通过编写各种程序来反复进
行尝试。
在学习的初始阶段，大家直接模仿教材中的示例程序即可。慢慢
的，你就会想对示例程序进行改造。再到后来，你就会尝试把几个示
例程序组合起来微成自己原创的作品。如果你真的想到了这些，那就
不要有什么顾虑，放心大胆地去尝试吧！一边思考着“这样写，会得到
这样的结果”，一边编写程序。如果实际结果和预期结果不一致的话，
就要对其原因进行分析，并再次进行挑战和尝试。在这一过程中，你
会多次遇到同样的代码，语法结构自然也就记下来了。在分析程序没
有按照预期顺利运行的原因时，大家可以参考本书中有关CPU及内存
机制的知识，肯定会大有帮助的。
在不断犯错纠错的过程中，慢慢地就能得到和预期一致的运行结
果，这时你就是一个合格的程序员了。所谓编程，就是把程序员的思
考方式用编程语言的语法结构表示出来，然后再传递给计算机运行。
如果能进行编程的话，就可以让计算机按照自己的思考方式来运行。
这真的是一件让人愉悦的事情。通过阅读本书，了解了程序的运行机
制后，相信大家更能体会到编程的乐趣。
---
## Page 273
结语
一些令自已担心恐惧的事情，枯萎的花朵都能被看成幽灵，这句话说
的就是这样的心理。这种心理也适用于编程，在了解程序的实质前，
大家也许会觉得程序很难。面对困难，我们会感到恐惧，笔者也不例
外。还记得刚接触计算机时，笔者也经常感到担忧。
不过，对已经读过本书的各位读者来说，编程应该不再是那么可
怕的事情了吧。程序的运行机制其实很简单，这一点想必大家也都有
了切身体会。不管今后的计算机怎么发展，程序的实质是不会发生太
大变化的。因此，请大家务必放松心情，无所畏惧地继续向新技术发
起挑战吧！
感谢各位读者阅读本书。也祝各位的编程之路一路通畅。
致谢
值此本书发行之际，对从策划阶段就对本书给予悉心指导的《日经
Software》的柳田俊彦主编、早坂利之先生、细阳一郎先生，以及出版
社的高昌知子女士等各位同仁，一并致以深深的谢意。此外，笔者在
《日经Software》上连载“程序是怎样跑起来的”一文时，热心的读者朋
友们为笔者指出了不足及笔误，并写信鼓励笔者，借此机会也向各位
致以深深的感谢。
259
---