命令是一种操作，如`backup`、`restore`、`install`和`get`。大多数初始命令需要第二个命令才能完成操作。例如，`backup`命令需要另一个命令，如`create`或`delete`，才能形成完整的操作。
有两种类型的标志——命令标志和全局标志。全局标志是可以为任何命令设置的标志，而命令标志特定于正在执行的命令。
像许多命令行界面工具一样，Velero 包括每个命令的内置帮助。如果您忘记了一些语法或想知道命令可以使用哪些标志，您可以使用`-h`标志来获得帮助:
```
velero backup create -h
```
以下是`backup create`命令的简短帮助输出:
![Figure 13.8 – Velero help output ](img/Fig_13.8_B15514.jpg)
图 13.8–Velero 帮助输出
我们发现 Velero 的帮助系统非常有帮助；一旦你熟悉了 Velero 的基础知识，你会发现内置的帮助为大多数命令提供了足够的信息。
## 使用常用的 Velero 命令
因为你们中的许多人可能是 Velero 的新手，所以我们想提供一个最常用命令的快速概述，让您对操作 Velero 感到舒适。
### 列出 Velero 对象
正如我们提到的，Velero 管理是通过使用 CLI 驱动的。您可以想象，当您创建额外的备份作业时，可能很难记住已经创建的内容。这就是`get`命令派上用场的地方。
命令行界面可以检索或获取以下 Velero 对象的列表:
*   备份位置
*   备份
*   插件
*   恢复
*   时间表
*   快照位置
如您所料，执行`velero get `将返回由 Velero 管理的对象列表:
```
velero get backups
```
以下是输出:
![Figure 13.9 – The velero get output ](img/Fig_13.9_B15514.jpg)
图 13.9–韦莱罗获得输出
所有`get`命令将产生一个类似的输出，其中包含每个对象的名称和对象的任何唯一值。
`get`命令对于快速查看存在哪些对象很有用，但它通常被用作执行下一个命令`describe`的第一步。
### 正在检索 Velero 对象的详细信息
在你得到你想要详细信息的对象名称后，你可以使用`describe`命令得到对象的详细信息。使用上一节中`get`命令的输出，我们想要查看`cluster-daily-20200627175009`备份作业的详细信息:
```
velero describe backup cluster-daily-20200627175009
```
该命令的输出提供了所请求对象的所有细节。您会发现自己正在使用`describe`命令来解决备份故障等问题。
### 创建和删除对象
由于我们已经使用了`create`命令几次，我们将在本节重点介绍`delete`命令。
概括地说，`create`命令允许您创建将由 Velero 管理的对象，包括备份、计划、恢复以及备份和快照的位置。我们已经创建了备份和时间表，在下一节中，我们将创建一个恢复。
一旦创建了对象，您可能会发现需要删除它。要删除 Velero 中的对象，可以使用`delete`命令，以及要删除的对象和名称。
在我们的`get backups`输出示例中，我们有一个名为`day2`的备份。要删除该备份，我们将执行以下`delete`命令:
```
velero delete backup day2
```
由于删除是单向操作，您需要确认是否要删除对象。一旦确认，可能需要几分钟时间才能将对象从 Velero 中移除，因为它会等待，直到所有相关数据都被移除:
![Figure 13.10 – Velero delete output ](img/Fig_13.10_B15514.jpg)
图 13.10–Velero 删除输出
正如您在输出中看到的，当我们删除备份时，Velero 将删除备份的所有对象，包括快照的备份文件和恢复。
您还可以使用其他命令，但是本节中介绍的命令是您熟悉 Velero 所需的主要命令。
现在，您可以创建和计划备份，并知道如何使用 Velero 中的帮助系统，我们可以继续使用备份来恢复对象。
# 从备份恢复
运气好的话，你将很少需要执行任何 Kubernetes 对象的恢复。即使您在信息技术领域的时间不长，您也可能经历过驱动器故障或意外删除重要文件的个人情况。如果您没有丢失数据的备份，这是一个非常令人沮丧的情况。在企业领域，丢失数据或没有备份可能会导致巨大的收入损失，或者在某些情况下，在受监管的行业中导致巨额罚款。
要从备份运行恢复，可以使用带有`--from-backup `标签的`create restore`命令。
在本章的前面，我们创建了一个名为`initial-backup`的一次性备份，它包括集群中的每个名称空间和对象。如果我们决定需要恢复该备份，我们将使用 Velero 命令行界面执行恢复:
```
velero restore create --from-backup initial-backup
```
`restore`命令的输出可能看起来很奇怪:
```
Restore request "initial-backup-20200627194118" submitted successfully.
```
一眼看去，这似乎是一个备份请求，因为韦莱罗回复了`"initial-backup-20200627194118" submitted successfully`。Velero 使用备份名称创建还原请求，由于我们将备份命名为`initial-backup`，还原作业名称将使用该名称并附加还原请求的日期和时间。
您可以使用`describe`命令查看恢复状态:
```
velero restore describe initial-backup-20200627194118
```
根据还原的大小，还原整个备份可能需要一些时间。在恢复阶段，备份状态将为`InProgress`。一旦完成，状态将变为`Completed`。
## 恢复运行
有了背后的所有理论，让我们用两个例子来看看韦莱罗的行动。对于示例，我们将从一个简单的部署开始，该部署将在同一个集群上删除和恢复。下一个例子会更复杂；我们将使用主 KinD 集群的备份，并将集群对象恢复到新的 KinD 集群。
### 从备份恢复部署
对于第一个例子，我们将使用 NGINX 网络服务器创建一个简单的部署。我们将部署应用，验证它是否按预期工作，然后删除部署。使用备份，我们将恢复部署，并通过浏览 web 服务器的主页来测试恢复是否有效。
我们已经在您的克隆存储库的`chapter13`文件夹中包含了一个部署。这个部署将为我们的练习创建一个新的名称空间、NGINX 部署、一个服务和一个入口规则。还包括了部署清单。
与我们在本书中创建的任何入口规则一样，您需要编辑其网址以反映您的主机的 IP 地址，以便`nip.io`正确工作。我们的实验室服务器的 IP 地址为`10.2.1.121`–将该 IP 更改为您的主机的 IP:
1.  从名为`nginx-deployment.yaml`的`chapter13`文件夹下的 GitHub 存储库中编辑清单，以包含您的`niop.io`网址。您需要更改的部分如下所示:
    ```
    spec:
      rules:
     - host: nginx-lab.10.2.1.121.nip.io
    ```
2.  Deploy the manifest using `kubectl`:
    ```
    kubectl apply -f nginx-deployment.yaml
    ```
    这将创建部署所需的对象:
    ```
    namespace/nginx-lab created
    pod/nginx-deployment created
    ingress.networking.k8s.io/nginx-ingress created
    service/nginx-lab created
    ```
3.  最后，使用任何浏览器测试部署，并从入口规则打开网址:
![Figure 13.11 – Verify that NGINX is running ](img/Fig_13.11_B15514.jpg)
图 13.11–验证 NGINX 是否正在运行
现在您已经验证了部署工作正常，我们需要使用 Velero 创建一个备份。
### 备份命名空间
使用 Velero `create backup`命令创建新命名空间的一次性备份。为备份作业指定名称`nginx-lab`:
```
velero create backup nginx-lab --include-namespaces=nginx-lab
```
由于命名空间只包含一个小的部署，备份应该会很快完成。使用`describe`命令验证备份是否成功完成:
```
velero backup describe nginx-lab
```
验证阶段状态是否完成。如果您在阶段状态中有错误，您可能在`create backup`命令中输入了错误的名称空间名称。
验证备份成功后，您可以继续下一步。
### 模拟失败
为了模拟需要对我们的命名空间进行备份的事件，我们将使用`kubectl`删除整个命名空间:
```
kubectl delete ns nginx-lab
```
删除命名空间中的对象可能需要一分钟。一旦您返回提示，删除应该已经完成。
通过在浏览器中打开网址来验证 NGINX 服务器没有回复；如果您使用的是与初始测试相同的浏览器，请刷新页面。刷新或打开网址时，您应该会收到一个错误:
![Figure 13.12 – Verify whether NGINX is running ](img/Fig_13.12_B15514.jpg)
图 13.12–验证 NGINX 是否正在运行
随着确认 NGINX 部署已经被删除，我们将从备份中恢复整个命名空间和对象。
## 恢复命名空间
想象这是一个“真实世界”的场景。你接到一个电话，说一个开发人员不小心删除了他们名字空间中的每个对象，并且他们没有源文件。
当然，你已经为这类事件做好了准备。您的群集中有几个正在运行的备份作业，您告诉开发人员，您可以通过备份将其恢复到昨晚的状态:
1.  我们知道备份的名字是`nginx-lab`，所以使用 Velero，我们可以使用`--from-backup`选项
    ```
    velero create restore --from-backup nginx-lab
    ```
    执行`restore create`命令
2.  Velero 将返回已提交还原作业:
    ```
    Restore request "nginx-lab-20200627203049" submitted successfully.
    Run `velero restore describe nginx-lab-20200627203049` or `velero restore logs nginx-lab-20200627203049` for more details.
    ```
3.  您可以使用`velero restore describe`命令来检查状态:
    ```
    velero restore describe nginx-lab-20200627203049
    ```
4.  验证阶段状态显示`completed`，如果已经打开，通过浏览网址或刷新页面验证部署已经恢复:
![Figure 13.13 – Verify that NGINX has been restored ](img/Fig_13.13_B15514.jpg)
图 13.13–验证 NGINX 是否已恢复
恭喜，您刚刚为开发人员节省了大量工作，因为您有了名称空间的备份！