### Interface Reference Counting Vulnerability (Obfuscated)

In the following code snippet, a mechanism is used to ensure that a given browser element `pElem` is of the intended type. However, the interface is never actually used; instead, the looked-up content is automatically discarded via the call to `ReleaseInterface`, and the element is simply passed to the `AddOption` method for storage.

```c
h r = AddOption(pElem, pElem->str, FALSE);
return (SetErrorInfo(h r));
ReleaseInterface(pUnk);
if (S_OK != h r) {
    h r = E_INVALIDARG;
    goto End;
}
( void ∗∗) &pUnk;
```

A vulnerability exists when the `QueryInterface` method fails and `ReleaseInterface` is still called. This is due to two issues:
1. The `pUnk` pointer is uninitialized.
2. The return check is placed after the call to `ReleaseInterface`.

These coding practices lead to a security vulnerability because `Release` is called on an uninitialized interface pointer, which can later trigger a use-after-free vulnerability.

To exploit this flaw for untrusted code execution, an attacker would need to control the stack content and make the stack offset used by the local variable `pUnk` coincide with the stack offset used by another reference-counted class in a previous stack context. Such security exploits have already been demonstrated by industry researchers.

### VARIANT Type Confusion Vulnerability (Obfuscated)

The second vulnerability class, as shown below, is related to the `VARIANT` data structure. This structure is used in COM applications to transfer data items across generic interfaces. A generic container for arrays of `VARIANT` structures is the `DISPPARAMS` structure, which is used, among others, by the `IDispatch::Invoke` interface method.

```c
STDMETHODIMP CBrowserOp::Invoke(DISPID dispId, DISPPARAMS *dParams)
{
    if (!dParams || !dParams->rgvarg || !dParams->rgvarg[0].pdispVal) {
        switch (dispId) {
            case DISPID_ONPROCESSINGCOMPLETE:
                if (/* some condition */) {
                    return E_INVALIDARG;
                } else {
                    IUnknown *pUnk = dParams->rgvarg[0].pdispVal;
                    INeededInterface *pRes = NULL;
                    HRESULT hr = pUnk->QueryInterface(IID_NeededIfac, (void **)&pRes);
                    if (hr == S_OK) {
                        PerformAction(pRes, dParams);
                        ReleaseInterface(pRes);
                        break;
                    }
                    default: return DISP_E_MEMBERNOTFOUND;
                }
            }
        }
    }
    return S_OK;
}
```

The safety of `VARIANT` manipulation relies on testing its `vt` field to ensure that the contained pointer corresponds to the expected data type. Failing to perform such a check before calling `QueryInterface` on the `IUnknown` pointer `pUnk` can be devastating for security, especially if the input parameters are user-controlled. If the first `VARIANT` structure field `dParams->rgvarg[0].pdispVal` contains a different interface, a different method than `QueryInterface` might be called, leading to a likely exploitable memory corruption.

The appropriate fix for this vulnerability is to extend the conditional predicate to include a test `vt == VT_UNKNOWN || vt == VT_DISPATCH` to ensure that the `VARIANT` structure holds the appropriate interface pointer. If this is not the case, `E_INVALIDARG` should be returned.

### Related Work

Extended static checking was pioneered for Java by ESC/Java [1] and has since been applied to other languages such as Spec# for C# [21] and HAVOC for C [2]. Unlike these tools, HAVOC-LITE provides a rich set of instrumentation and inference capabilities to reduce the manual burden for large modules and supports most common C++ features used in legacy applications.

Software model checkers like SLAM [22] offer automatic annotation inference based on predicate abstraction for sparse type-state properties. However, these approaches do not scale to modules greater than 100KLOC and lack the configurability provided by HAVOC-LITE. Saturn [23] uses precise intra-procedural analysis with SAT solvers but requires careful configuration and is not easily adaptable.

Chen et al. [25] apply the model checker MOPS to check similar type-state properties on a million lines of code, but the properties are restricted to finite state machines, making it harder for users to describe type-state properties on fields of objects.

Hackett et al. [26] provide a checker for buffer overruns in legacy applications using a combination of buffer length annotations and custom rules. While they provide useful heuristics to infer buffer annotations, their technique cannot be readily extended to the properties discussed in this work.

Dynamic test generation tools such as DART [27], EXE [28], and SAGE [29] leverage existing tests to create path constraints. These techniques have revealed several bugs in large applications but are oblivious to the property being checked and aim at providing higher path coverage. They do not use procedure summaries and thus cannot provide coverage guarantees on the entire attack surface.

Recent work on Automated Exploit Generation [30] attempts both vulnerability checking and input crafting to find and exploit code defects. This approach, while promising, provides limited configurability for security auditors and does not guarantee as much coverage as extended static checking.

Security properties such as `VARIANT` type consistency [32] and reference counting invariants [33] have previously been studied for COM programs and web browsers via run-time monitoring and unit testing. However, no systematic program analysis has been performed to the extent of this work, and no guarantee of coverage could be made based on concrete executions.

HAVOC-LITE provides security auditors with extended security audit abilities, allowing them to focus on code locations where such security properties could not be proved, thereby providing a stronger guarantee that no instance of such vulnerabilities has been left behind.

### Conclusions

Extended static checking complements fuzz testing and other data-flow-based static analysis techniques. Inter-procedural inference is key in reducing false positives to an acceptable level for security experts. Future work includes extending the two-level Houdini algorithm to a distributed version and performing warning prioritization.

### Acknowledgments

We thank the anonymous reviewers and our shepherd Patrick McDaniel for improving the presentation of the paper. We are grateful to Mark Wodrich and Ali Rahbar from the MSRC team for their help in deploying the tool, and to Shaz Qadeer for his help in porting the tool to the latest build environment in Windows.

### References

[1] C. Flanagan, K. R. M. Leino, M. Lillibridge, G. Nelson, J. B. Saxe, and R. Stata, “Extended static checking for Java,” in Programming Language Design and Implementation (PLDI’02), 2002, pp. 234–245.

[2] T. Ball, B. Hackett, S. K. Lahiri, S. Qadeer, and J. Vanegue, “Towards scalable modular checking of user-defined properties,” in Verified Software: Theories, Tools, Experiments (VSTTE ’10), vol. LNCS 6217, 2010, pp. 1–24.

[3] Satisfiability Modulo Theories Library (SMT-LIB), “Available at http://goedel.cs.uiowa.edu/smtlib/.”

[4] C. Flanagan and K. R. M. Leino, “Houdini, an annotation assistant for ESC/Java,” in International Symposium of Formal Methods Europe (FME ’01), 2001, pp. 500–517.

[5] M. Dahlweid, M. Moskal, T. Santen, S. Tobies, and W. Schulte, “Vcc: Contract-based modular verification of concurrent c,” in International Conference on Software Engineering, (ICSE ’09), Companion Volume, 2009, pp. 429–430.

[6] B. Chess, “Improving computer security using extended static checking,” in IEEE Symposium on Security and Privacy, 2002, pp. 160–.

[7] Component Object Model (COM), “Available at http://www.microsoft.com/com/default.mspx.”

[8] C. Flanagan, K. R. M. Leino, M. Lillibridge, G. Nelson, J. B. Saxe, and R. Stata, “Extended static checking for Java,” in Programming Language Design and Implementation (PLDI’02), 2002, pp. 234–245.

[9] R. DeLine and K. R. M. Leino, “BoogiePL: A typed procedural language for checking object-oriented programs,” Microsoft Research, Tech. Rep. MSR-TR-2005-70, 2005.

[10] J. Condit, B. Hackett, S. K. Lahiri, and S. Qadeer, “Unifying type checking and property checking for low-level code,” in Principles of Programming Languages (POPL ’09), 2009, pp. 302–314.

[11] M. Barnett and K. R. M. Leino, “Weakest-precondition of unstructured programs.” in Program Analysis For Software Tools and Engineering (PASTE ’05), 2005, pp. 82–87.

[12] S. K. Lahiri, S. Qadeer, and Z. Rakamaric, “Static and precise detection of concurrency errors in systems code using smt solvers,” in Computer Aided Verification (CAV ’09), vol. LNCS 5643, 2009, pp. 509–524.

[13] MSRC MS10-054, “Microsoft security bulletin ms10-054 - critical,” 2010. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS10-054

[14] MSRC MS11-092, “Microsoft security bulletin ms11-092 - critical,” 2011. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS11-092

[15] MSRC MS09-034, “Microsoft security bulletin ms09-034 - critical,” 2009. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS09-034

[16] MSRC MS11-093, “Microsoft security bulletin ms11-093 - important,” 2011. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS11-093

[17] MSRC MS11-018, “Microsoft security bulletin ms11-018 - critical,” 2011. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS11-018

[18] MSRC MS12-074, “Microsoft security bulletin ms12-074 - critical,” 2012. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS12-074

[19] MSRC MS11-050, “Microsoft security bulletin ms11-050 - critical,” 2011. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS11-050

[20] MSRC MS08-066, “Microsoft security bulletin ms08-066 - important,” 2008. [Online]. Available: http://technet.microsoft.com/en-us/security/bulletin/MS08-066

[21] M. Barnett, K. R. M. Leino, and W. Schulte, “The Spec# programming system: An overview.” in Construction and Analysis of Safe, Secure and Interoperable Smart Devices (CASSIS ’05), 2005, pp. 49–69.

[22] T. Ball, R. Majumdar, T. Millstein, and S. K. Rajamani, “Automatic predicate abstraction of C programs,” in Programming Language Design and Implementation (PLDI ’01), 2001, pp. 203–213.

[23] A. Aiken, S. Bugrara, I. Dillig, T. Dillig, B. Hackett, and P. Hawkins, “An overview of the Saturn project,” in Workshop on Program Analysis for Software Tools and Engineering (PASTE ’07), 2007, pp. 43–48.

[24] S. Bugrara and A. Aiken, “Verifying the safety of user pointer dereferences,” in IEEE Symposium on Security and Privacy, 2008, pp. 325–338.

[25] H. Chen, D. Dean, and D. Wagner, “Model checking one million lines of C code,” in Proceedings of the Network and Distributed System Security Symposium (NDSS’04), 2004.

[26] B. Hackett, M. Das, D. Wang, and Z. Yang, “Modular checking for buffer overflows in the large,” in International Conference on Software Engineering (ICSE ’06), 2006, pp. 232–241.

[27] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed automated random testing.” in Programming Language Design and Implementation (PLDI ’05). ACM, 2005, pp. 213–223.

[28] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler, “EXE: Automatically generating inputs of death,” in ACM Conference on Computer and Communications Security, 2006, pp. 322–335.

[29] P. Godefroid, M. Y. Levin, and D. A. Molnar, “SAGE: Whitebox fuzzing for security testing,” Commun. ACM, vol. 55, no. 3, pp. 40–44, 2012.

[30] T. Avgerinos, S. K. Cha, and D. Brumley, “AEG: Automatic exploit generation,” ser. Network and Distributed System Security Symposium, 2011.

[31] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing mayhem on binary code,” in Proceedings of the 2012 IEEE Symposium on Security and Privacy, ser. SP ’12. Washington, DC, USA: IEEE Computer Society, 2012, pp. 380–394. [Online]. Available: http://dx.doi.org/10.1109/SP.2012.31

[32] M. Dowd, R. Smith, and D. Dewey, “Attacking interoperability,” ser. Blackhat USA briefings, 2009.

[33] S. Chen, H. Chen, and M. Caballero, “Residue objects: A challenge to web browser security,” in Proceedings of the 5th European conference on Computer systems, ser. EuroSys ’10. ACM, 2010, pp. 279–292.