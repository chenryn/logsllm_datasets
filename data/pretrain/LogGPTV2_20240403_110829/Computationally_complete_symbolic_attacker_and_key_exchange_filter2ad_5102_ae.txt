the symbolic part of their traces, si agree. Remember that the sym-
bolic states have the transition conditions Θi in them. So at the
challenge state, we have Mc, Π, S |c= Θm ∧ Φ. Note that since on
the traces, si agree, the terms that are in the frame also agree for
all trace ω ∈ S. Therefore, ˆφ in the formulas of θm and Φ can be
replaced by the list of terms in the frames. Let θ(cid:48)
m and Φ(cid:48) denote
the formulas we receive this way. Then, Mc, Π, S |c= Θ(cid:48)
m ∧ Φ(cid:48).
This is the same as Mc, Π, S |s4= (Θ(cid:48)
m ∧ Φ(cid:48))∗, that, by Fitting’s the-
m ∧
orem means that Θ(cid:48)
Φ(cid:48))∗ is S4 satisﬁable). Hence there is a symbolic model M with
m ∧ Φ(cid:48) is ﬁrst-order satisﬁable (because (Θ(cid:48)
m∧Φ(cid:48). As Θ(cid:48)
M|s= Θ(cid:48)
m and Φ(cid:48) have no frames in them, it is easy to
see from the symbolic satisfaction that M, sm |s= Θ(cid:48)
m ∧ Φ(cid:48) is also
satisﬁed as satisfaction does not depend on the state. Finally, as in
sm, the frames contain exactly the terms with which we replaced
ˆφ, we can now write them back and receive M, sm |s= Θm ∧ Φ.
Which also means that Θm and Φ are ﬁrst-order consistent.
Finally, for proving Theorem 5.3, consider the following. If there
is a computational attack, that is, if the negation of the security for-
mula θs is computationally satisﬁed by some Mc, Π, S, then, as
long as only bounded number (in the security parameter) of ses-
sions are allowed, the maximum number of different (with respect
to ω) symbolic transitions s1 → ··· → sm does not depend on
the security parameter. Therefore, S can be split (up to negligible
probability) into a ﬁxed number of non-negligible subsets on each
of which s1 → ··· → sm is independent of ω. Pick one, call it S(cid:48).
Then Mc, Π, S(cid:48) computationally satisﬁes ¬θs as well as all com-
putationally sound axioms (denote the set by ΦA), and Θm also:
Mc, Π, S(cid:48) |c= Θm ∧ ΦA ∧ θs. Hence, By Theorem 5.2 there is
a symbolic model M such that M, sm |s= Θm ∧ ΦA ∧ θs, which
exactly means that there is a symbolic attack.
Note, although by Fitting’s theorem, the ﬁrst-order deduction
rules are computationally sound, it is not possible in the current
formulation to deduce security properties from the axioms only by
ﬁrst-order deduction rules and nothing else. The BC technique has
no formulas expressing the transition system, no formulas saying
the agents follow the protocol roles. Explicit time and some axiom
for induction would also be needed as in [8]. These are taken care
by the symbolic execution.
7. DERIVABILITY WITH ORACLES
Syntax of various types of derivability with oracles was intro-
duced in Section 3. Here we deﬁne their computational semantics
and list a number of axioms that are computational sound.
7.1 Computational Semantics of Derivability
with Oracles
Let Osic2 be the following oracle: It ﬁrst takes a list of honestly
generated keys K and some additional list C of ciphertexts. The or-
acle can be called for encryption by submitting a string to encrypt
along with the encrypting key’s place number in K. The oracle hon-
estly generates the desired encryption, returns the result and adds it
to the list C. The oracle can also be called for a decryption again
with specifying the key and providing a ciphertext. If the ciphertext
is not one of those in C, the oracle outputs the decryption. Let Oskc2
take K and C as above, but also τ (L) assignment of bit strings to
a ﬁnite set of name symbols L. The oracle accepts descriptions of
functions of the names L, the ciphers C and the keys K, into which
he substitutes the corresponding bit strings, computes the function
and then encrypts the result with the speciﬁed key and adds it to
C. Decryption works as for Osic2. Let Oaic2 and Oakc2 be the analo-
gous notions for public key encryption. PPT algorithms with oracle
access will be written as AOO, BOO.
τ (ω), it outputs the bit string [[x]]σ(ω)
The meaning of the deﬁnition is that Mc, Π, S, σ |s4= ˆφ, (cid:126)x Ox
holds if there is a PPT algorithm AOO that, for ω ∈ S, receiving
the bit strings [[ ˆφ, (cid:126)x]]σ(ω)
τ (ω). In the
computation AOO can request encryption and decryption oracles
corresponding to the honest keys, but it will only receive a decryp-
tion if the submitted bit string is not a bit string corresponding to
an encryption in ˆφ, (cid:126)x or a bit string received from the encryption
oracle. Outside S, nothing is required.
1238DEFINITION 7.1. Semantics of Derivability with Oracles: Let
Mc, Π, S, σ be as before. Let a(ωη) denote the protocol adversary
output as it reaches the challenge state on the random input ωη,
and let m(ωη) denote the number of moves till then. We write
Mc, Π, S, σ |s4= ˆφ, (cid:126)x Ox iff there is a PPT Turing machine AOO
such that for all ω ∈ S,
AOO(cid:0)[[φm(ω)]]σ(ω)
τ (ω), a(ω), r(ω)(cid:1) = [[x]]σ(ω)
τ (ω)
τ (ω), [[(cid:126)x]]σ(ω)
where r(ω) is some fresh (not used for the computation of ˆφ, (cid:126)x, x)
random input from the random string. On each ω, if the tuple
(((q, n), h, φ, Θ), b, b(cid:48), γ) denotes the state yielded by the unique
valid computation of Π with respect to Mc and τ (ω), then the or-
acles receive in K all keys (bit strings) corresponding to the keys
in n, and in C all strings of the form [[{z}R
τ (ω) with R and K
names in n, and n, φ|s= {z}R
eK (cid:118) ˆφ, (cid:126)x. In τ (L), the KDM oracles
receive all assignments of names in ¯n to bit strings, except (in the
symmetric case), for those that occur as random inputs R to the
encryptions in C. We shorten this as
eK ]]σ(ω)
Mc, Π, S, σ ||= AOO
( ˆφ, (cid:126)x) = x,
implicitly assuming the algorithm has access to the protocol adver-
sary’s knowledge and to random bits. Let
Mc, Π, S, σ |c= ˆφ, (cid:126)x Ox iff Mc, Π, S, σ |s4= 23( ˆφ, (cid:126)x Ox).
In the KDM case, the submitted functions may depend on randomly
generated items that differ from the secret keys but are not accessi-
ble to the protocol adversary. For example, it is allowed to depend
on a secret nonce. This is necessary for receiving nice axioms for
the KDM case, and we explain the reason at the axioms. Still, as-
suming the usual KDM security is enough to prove that an unsent
key is uncompromised with such oracle access. The reason is that
when a KDM attack is constructed from the protocol attack, the
KDM attacker has access to the items generated by honest agents
except for the secret keys and the random inputs to the encryptions.
7.2 Axioms for Derivability with Oracles
The following axioms (except for the second and last entry of
the core axioms for derivability predicates) are very similar to the
ones in Section 5.3, and are just as trivial. The second entry of the
core axioms for derivability predicates with oracles is also trivially
computationally sound.
Core Axioms for the Derivability Predicate with Oracles.
• Let SameEnc((cid:126)x; (cid:126)y) be the constraint that there is a one-to-
one correspondence between the honest encryption terms of
(cid:126)x and (cid:126)y such that the corresponding encryption terms are
equal (with respect to the equality predicate). Then
SameEnc((cid:126)x; (cid:126)y) ∧ (cid:126)x, x = (cid:126)y, y −→ ( ˆφ, (cid:126)x Ox ↔ ˆφ, (cid:126)y Oy).
• More oracles help more: If the oracles of O are more power-
ful than the oracles of O(cid:48), then ˆφ, (cid:126)x O(cid:48)
In particular, ˆφ, (cid:126)x  x −→ ˆφ, (cid:126)x Ox and
ˆφ, (cid:126)x aic2 x → ˆφ, (cid:126)x akc2 x and ˆφ, (cid:126)x sic2 x → ˆφ, (cid:126)x skc2 x
x −→ ˆφ, (cid:126)x Ox.
• Increasing capabilities: ˆφ, (cid:126)x Oy −→ ˆφ, (cid:126)x, x Oy
• Commutativity: If (cid:126)x(cid:48) is a permutation of (cid:126)x, then
ˆφ, (cid:126)x Oy −→ ˆφ, (cid:126)x(cid:48) Oy
• Transitivity: ˆφ, (cid:126)x O(cid:126)y ∧ ˆφ, (cid:126)x, (cid:126)y O(cid:126)z −→ ˆφ, (cid:126)x O(cid:126)z
• Decryption Oracles help:
RanGen(K) ∧ ˆφ, (cid:126)x Oy
∧ ∀xR(y = {x}R
−→ ˆφ, (cid:126)x Odec(y, dK).
eK → {x}R
eK (cid:54)(cid:118) ˆφ, (cid:126)x)
This expresses that if y is computable and is not an encryp-
tion in ˆφ, (cid:126)x, then dec(y, dK) is also computable from the
same items as the decryption oracle can be called. We do not
have to require that y is none of the encryptions done by the
oracles, because if they were, then the decryption is known
to the submitter. Again, this follows purely from the deﬁni-
tion of O, CCA2 security of the encryption is not required.
This axiom together with the transitivity axiom easily imply
RanGen(K) ∧ ˆφ, (cid:126)x Oy ∧ ˆφ, (cid:126)x, dec(y, dK) Oz
∧ ∀xR(y = {x}R
eK (cid:54)(cid:118) ˆφ, (cid:126)x) −→ ˆφ, (cid:126)x Oz.
eK → {x}R
This replaces the non-malleability axiom of [5] for the deriv-
ability predicate. With tiny modiﬁcations, it is possible to
rewrite the NSL proof presented in [5] for using the Opred-
icate and this simpler axiom instead of the  predicate with
the non-malleability axiom there.
Axioms for Freshly Generated Items. These axioms are sound
• No telepathy: fresh(x; ˆφ, (cid:126)x) ∧ (cid:126)x (cid:52) ˆφ −→ ˆφ, (cid:126)x (cid:54)Ox
for the same reason as the corresponding ones for  were:
(implies no-telepathy axiom without oracles). This is sound
as long as RanGen() means generation with negligible guess-
ing probability only.
fresh(x; ˆφ, (cid:126)x, y) ∧
• Fresh items do not help to compute:
(cid:126)x, y (cid:52) ˆφ ∧ ˆφ, (cid:126)x, x Oy −→ ˆφ, (cid:126)x Oy
ˆφ, (cid:126)x, x Ox is implied by the more oracles help more axiom and the
self-derivability axiom of derivability predicate. Also, ˆφ, (cid:126)xOf ((cid:126)x).
8. KEY USABILITY
Semantics of IND-CCA2 Key Compromise
Syntax of various types of key usability was introduced in Sec-
tion 3. Here we deﬁne their computational semantics and list a
number of axioms that are computational sound.
8.1 IND-CCA2 and KDM-CCA2 cases
8.1.1
The idea of key usability is that a key has been uncompromised,
that is, it can be used for safe encryption. To match the computabil-
ity predicate, we deﬁne the negation of it, key compromise. The
intuitive meaning of ˆφ, (cid:126)x (cid:73)O K is that ˆφ, (cid:126)x compromises the key
(with oracles) and it cannot be used for safe encryption any more.
The ﬁrst thought here would be to deﬁne the compromise so that
from ˆφ, (cid:126)x, an x can be computed such that the encryption of x and
of 0|x| are computationally distinguishable. However, the major
difﬁculty here (and the major difference from [22]) is that we have
to deﬁne our notion for any S. Computational distinguishability on
an arbitrary set has no meaning: even in the usual CCA2 game with
CCA2 secure encryption, there can be non-negligible sets of coins
deﬁned on which the CCA2 attacker returns 1 if the real bit string
is encrypted, while 1 with probability 1/2 if the 0’s are encrypted;
it is very easy to ﬁnd sets like this.
What we came up with is a notion of observational inequiva-
lence: encryptions of x and 0|x| have to be observationally inequiv-
alent on S, where PPT algorithms with oracle access provide the
contexts and equality on S provides the equivalence.
DEFINITION 8.1
(KEY COMPROMISE). The deﬁne the rela-
tion Mc, Π, S, σ |s4= ˆφ, (cid:126)x (cid:73)OK to hold if either Mc, Π, S, σ |s4= (cid:126)x (cid:54)(cid:52)
ˆφ ∨ ¬RanGen(K), or there are R, PPT algorithms AOO
21 , AOO
22 ,
and AOO
(in the IND case) or x (in the KDM case) such that:
1
In the the IND case
12391
( ˆφ, (cid:126)x) and
terpretations of ˆφ, (cid:126)x, AOO
• R is generated honestly, statistically independently of the in-
• Either Mc, Π, S, σ ||=
21 ( ˆφ, (cid:126)x,{AOO
( ˆφ, (cid:126)x)}R
( ˆφ, (cid:126)x)}R
AOO
eK )
and for some (hence for all) R(cid:48) fresh random input generated
inside S, Mc, Π, S, σ ||=
22 ( ˆφ, (cid:126)x,{AOO
eK ) = AOO
1
1
1
|AOO
|AOO
( ˆφ,(cid:126)x)|}R(cid:48)
22 ( ˆφ, (cid:126)x,{0
eK ) (cid:54)= AOO