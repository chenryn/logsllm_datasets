#### Describe the workflow you want to enable
The following is a proposal for an additional feature_selection method. I
would like to propose a simple feature selection function that removes highly
correlated feature columns using the Pearson product-moment correlation
coefficients. The threshold that needs to be exceeded can be specified by the
user.
#### Describe your proposed solution
Below is a simplified function showing the essential functionality of the
proposed feature:
    # input data, 1st and 2nd column highly correlated
    X = np.array([[3, 2, 9], [2, 1, 2], [2, 1, 1], [1, 0, 3]]) 
    >>> X
    array([[3, 2, 9],
           [2, 1, 2],
           [2, 1, 1],
           [1, 0, 3]])
    def correlation_selection(X, threshold=.9, rowvar=False):
        """Remove highly correlated feature columns.
        Parameters
        -----------
        X : ndarray of shape (n_samples, n_features)
        threshold : float, default=.9
        rowvar: bool, default=False
        Returns
        --------
        X_reduced : ndarray of shape (n_samples, n_features_reduced)
        """
        corr = np.absolute(np.corrcoef(X, rowvar=rowvar))
        upper = corr*np.triu(np.ones(corr.shape), k=1).astype(np.bool)
        to_drop = [column for column in range(upper.shape[1]) if any(upper[:,column] >= threshold)]
        X_reduced = np.delete(X, to_drop, axis=1)
        return X_reduced
    X_reduced = correlation_selection(X)
    # feature matrix after removing correlated columns
    >>> X_reduced
    array([[3, 9],
           [2, 2],
           [2, 1],
           [1, 3]])