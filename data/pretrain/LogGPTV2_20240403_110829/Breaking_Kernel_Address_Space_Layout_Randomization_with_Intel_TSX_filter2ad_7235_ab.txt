fectively use TSX to process transactions, but how we
exploit the way it handles an exception, which acciden-
tally exposes a clear, stable timing channel.
Example code. To explain our attack, we first introduce
how a transaction can be implemented by using TSX,
which we will use as a template for the actual attack. Fig-
ure 2 shows a minimal source snippet to run a transaction.
A transaction region starts with _xbegin() and terminates
when _xend() is invoked (i.e., committed). Then, all
3
instructions (e.g., if-statement in Figure 2) in the trans-
actional region are guaranteed to be atomically executed.
However, a transaction might fail (i.e., abort) as well: for
example, when two or more concurrent transactions affect
each other during the execution—a read-write or a write-
write conflict, depending on how they affect each other.
In such a case, it automatically rolls back the aborted
transactions (e.g., cleaning up the overwritten memory
space) and invokes an abort handler specified by a user
(e.g., else-branch in Figure 2). The more interesting situ-
ation, in terms of security, is when erroneous situations
occur during the execution: for example, segmentation
faults, page faults, or even interrupts.
Suppressing exceptions. According to Intel’s manual
([31, §15.3.7]), a transaction aborts when such a hard-
ware exception occurs during the execution of the trans-
action. However, unlike normal situations where the OS
intervenes and handles these exceptions gracefully, TSX
instead invokes a user-specified abort handler, without
informing the underlying OS. More precisely, TSX treats
these exceptions in a synchronous manner—immediately
executing an abort handler while suppressing the excep-
tion itself. In other words, the exception inside the transac-
tion will not be communicated to the underlying OS. This
allows us to engage in abnormal behavior (e.g., attempting
to access privileged, i.e., kernel, memory regions) without
worrying about crashing the program. In DrK, we break
KASLR by turning this surprising behavior into a timing
channel that leaks the status (e.g., mapped or unmapped)
of all kernel pages.
3 The DrK Attack
In this section, we provide a a high-level description of the
DrK attack, which breaks KASLR by exploiting a timing
channel in TSX. As explained in §2.2, when an exception
occurs inside a transaction, TSX aborts its execution and,
importantly, suppresses the exception (i.e., no OS inter-
vention). The key idea of DrK is to measure the timing
difference in handling a transaction abort when attempting
to access mapped compared to unmapped kernel memory
regions inside the transaction. Accessing the kernel space
from a user process incurs an access violation (i.e., a page
fault), but TSX suppresses this exception and immedi-
ately invokes its abort handler. The mapping status of
the targeted kernel address results in a time difference
(an order of a few hundred cycles) in invoking the abort
handler due to the subtleties in TSX’s micro-architecture
(see §5). More importantly, this attack is not observable
to the OS, as these exceptions are all suppressed. Fur-
thermore, unlike prior attacks that only try to distinguish
between mapped and unmapped pages, the DrK attack
can even extract the executable and non-executable bit of
every kernel page.
3.1 Threat Model
The DrK attack is built on four realistic assumptions:
1. The attacker has unrestricted access to the local, user-
level, and non-root privilege execution environment
of the target system.
2. The attacker knows a memory corruption vulnerabil-
ity in the kernel space, but needs to bypass KASLR
deployed in the target system in order to exploit this
vulnerability.
3. The attacker does not have any explicit way to figure
out the kernel memory layout.
4. The attacker can gather the information of the tar-
get system: for example, the OS version or CPU
information.
This threat model is very realistic. For example,
the platform-as-a-service (PaaS) cloud services such as
Heroku [26] provide a local execution environment that
satisfies all of the assumptions above. Similarly, these
assumptions hold true in exploiting the vulnerabilities in
modern web browsers due to their user-level sandbox;
the real exploits demonstrated in the Pwn2Own competi-
tion [42, 44] are performed under the same threat model
as the DrK attack. Moreover, the operating systems dis-
allow user-level code to access to their kernel address
space information. In Ubuntu, access to /proc/kallsyms,
which shows all mappings of kernel space, is prohibited
to the non-root users. In Windows 10, there is a sys-
tem call NtQuerySystemInformation() which allows a
normal user to see the current mapping of the kernel.
However, in the LOW or UNTRUSTED integrity level that is
generally set as the running level of sandboxed applica-
tions (e.g., the renderer process of Google Chrome), it is
not allowed to access the system call to get the address
layout of the kernel. We confirmed that DrK works in
such restricted integrity levels.
3.2 Overview
Figure 3 shows a code snippet that we ran to probe a
kernel address for its mapping status. We perform two
types of access to a kernel address addr inside a TSX
region (if-statement, from _xbegin() to _xend()): (1) try
to execute on addr by running mov rax, addr; jmp rax
(exec), and (2) try to read a value from addr by running
mov rax, [addr] (read). Note that since addr is a kernel
address, the access is not performed, instead generating
an exception, which makes the transaction abort.
We measure the timing between the initialization of the
TSX region (_xbegin()) and the abort handler (line 15-
16). Since the DrK attack relies on the timing difference
4
: mov rax, addr; jmp rax
: mov rax, [addr]
}
errx(1, "Not reachable");
// TSX aborted; end timer, return the timing.
return rdtsc_end() - beg;
// Timer starts
uint64_t beg = rdtsc_beg();
// initiate TSX region
if (_xbegin() == _XBEGIN_STARTED) {
// fn() performs either 1) or 2).
// 1) execute
// 2) read
fn(addr);
// commit TSX, which will never take place.
_xend();
1 // The given argument addr is an address for a kernel page.
2 uint64_t do_probe_memory(void *addr, mode_fn fn)
3 {
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 }
20 // probe the address for multiple times
21 uint64_t probe_memory(int ntimes, void *addr, mode_fn fn)
22 {
23
24
25
26
27
28
29
30
31 }
Figure 3: Code snippet that probes timing for a kernel address
access. The access on address through fn(addr) always raise
an exception (i.e., access violation) which makes the transaction
abort. In the DrK attack, we measure the minimum timing value
from multiple trials of probing for determining page mapping
status (e.g., 215 cycles for mapped region and 245 cycles for
unmapped region).
uint64_t clk = do_probe_memory(addr, fn);
// Only record the minimum timing observed.
if (clk 235 cycles220 cyclesexecutable(X)non-executable(NX)def probe(addr):    beg = rdtsc()    if _xbegin():         [mode]★    else         end = rdtsc()    return  end - begmapped(M)❶ Probing memoryaddrResource budget(e.g., time)  OS Memory Spec.CPU ModelKnowledge Base❷ DeterminingU/X/NXdb MemorymapsinputoutputProbeAnalysisCPU/Types
READ
(mov rax,[addr])
JMP
(mov rax,addr; jmp rax)
X
NX
<U
X<
NX
U
226
178
164
189
181
142
134
159
240
188
173
195
209
164
149
177
209
164
149
177
i7-6700K (4.0G, Skylake)
i5-6300HQ (2.3G, Skylake)
i7-5600U (2.6G, Broadwell)
E3-1271v3 (3.6G, Haswell)
226
178
164
189
Table 3: The minimum observed timings over 1,000 iterations
of probing for the known kernel mappings, for each CPU. In
the DrK attack, we use timing differences to determine the
mapping status of the page. We measured the timings using
mov and jmp instructions, to observe the minimum timings for
unmapped (U), non-executable (NX), and executable (X) pages.
The value indicates that having access with a mov instruction on
unmapped pages takes 18–31 more cycles (marked in red color)
than the mapped pages. Likewise, the timing for executable
pages on accessing with a jmp instruction takes 30–44 fewer
cycles (marked in blue color) than non-executable or unmapped
pages. Note that the values are observed minimums, namely, we
cannot observe the timings below the values per each mapping
status during the experiment.
4 Attack Evaluation
across various CPU and OSes? (§4.1)
We attempt to answer the following questions to evaluate
DrK:
• How different are the TSX timing characteristics
• How effectively can DrK break KASLR of popular
• How does DrK work in a virtualized environment
• With what configuration does DrK give high preci-
• How much is DrK better than prior attacks on
OSes? (§4.2, §4.2.3)
sion (§4.4)?
(§4.3)?
KASLR (§4.5)?
4.1 Characteristics of the Timing Channel
The DrK attack uses timing information as an oracle for
determining the mapping status of kernel memory pages.
We rely on the timing difference on accessing each type
of kernel page mappings: unmapped, mapped, and exe-
cutable. A necessary condition that enables such a dis-
tinction is that there should be a prominent timing gap to
determine different mappings.
We observed that the timing channel measured with a
TSX abort handler has a significant gap between the dif-
ferent mappings. Table 3 shows the minimum timing that
we could observe on accessing each type of page map-
ping, across 4 types of processors over 1,000 times. There
are significant timing differences between mapped versus
unmapped pages, and executable versus non-executable
(and unmapped) pages. When we attempted to access to
arbitrary kernel memory pages using a mov instruction,
the timing differences between unmapped and mapped
6
(a) Mapped vs. Unmapped
(b) Executable vs. Non-executable
Figure 6: Two timing graphs for measuring timings on Linux
kernel modules area, running on a Skylake (Core i7-6700K)
processor. The graph shows that the difference in the minimum
timing (see Table 3) is sufficient to set the threshold (the red