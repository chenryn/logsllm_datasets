### 优化后的文本

#### 函数 Π 的定义
函数 Π 建立了两个概念类之间属性的映射。图5展示了涉及映射的两个本体。

例如，在匹配 `DepositAccount` 和 `Deposit` 类时，我们需要在这两个类的属性之间建立映射。该映射通过函数 Π(p(DepositAccount), p(Deposit)) 计算得出，等同于：
\[ \Pi(\{agreementMember, agreementPeriod, effectiveDate, insured, accountHolder, amountDue, simpleInterest, agreementBalance, availableCash\}, \{member, per, date, sinterest, agreedBalance, money\}) \]

可能建立的映射如下：
- \(\Pi_{i,1} : (simpleInterest, sinterest)\)
- \(\Pi_{i,2} : (agreementBalance, agreeBalance)\)
- \(\Pi_{i,3} : (availableCash, money)\)

函数 Π 用于在两组属性 \(pl_1\) 和 \(pl_2\) 之间建立最佳映射，并定义如下：
\[ \Pi(pl_1, pl_2) = 
\begin{cases} 
\max(\Pi(pl_1 - p, pl_2 - p) + ss(p, p)), & \text{如果 } ss(p, p) = 1 \text{ 且 } pl_1 \neq \emptyset \land pl_2 \neq \emptyset \\
\Pi(pl_1 - p, pl_2 - p), & \text{如果 } ss(p, p) = 0 \text{ 且 } pl_1 \neq \emptyset \land pl_2 \neq \emptyset \\
0, & \text{如果 } pl_1 = \emptyset \lor pl_2 = \emptyset 
\end{cases}
\]

函数 \(ss(p_1, p_2)\) 用于确定两个属性是否相等，使用函数 g 进行判断。如果两个属性在语法上匹配，则函数 ss 返回 1，否则返回 0。属性在语法上匹配仅当函数 g 确定其语法相似度大于常数 β。
\[ ss(p_1, p_2) = 
\begin{cases} 
1, & \text{如果 } g(p_1, p_2) \geq \beta \\
0, & \text{如果 } g(p_1, p_2) < \beta 
\end{cases}
\]

函数 \(g(p_1, p_2)\) 用于计算两个词的语法相似度。我们的方法中，使用“字符串匹配”来计算相似度。函数 g 可以通过多种现有方法实现，如名称相等、词干提取后的规范名称表示、q-grams、同义词、基于公共子串的相似性、发音、soundex、缩写扩展、词干提取、分词等。更多信息检索领域的技术也可以考虑。关于检索技术的详细信息可以参考 [37]。常数 β 决定了匹配的敏感度。当 β 接近 1 时，匹配函数返回较少的假阳性；当 β 接近 0 时，返回较多的假阳性。

#### 示例
假设请求查询中 \(c_R = "DepositAccount"\)，广告中 \(c_A = "Deposit"\)。计算 \(\Pi(p("DepositAccount"), p("Deposit"))\) 时，我们得到值 2，这表示两个有效的映射：
- \(\Pi_{i,1} : (simpleInterest, sinterest)\)
- \(\Pi_{i,2} : (agreementBalance, agreeBalance)\)

映射 \(\Pi_{i,1}\) 是因为 \(ss("simpleInterest", "sinterest")\) 和 \(ss("agreementBalance", "agreeBalance")\) 使用 q-grams 方法 [38] 实现 g 函数，β = 0.5 时的结果大于 0.58（例如，\(g("agreementBalance", "agreeBalance") = 0.58\)）。其他所有映射不包含在 \(\Pi\) 中。例如，计算 \(ss("agreementBalance", "money")\) 得到结果为 0（函数 g 的值为 0），这意味着我们认为这两个属性在语法上不相等。

#### 计算 S≠
计算 \(S_{\neq}(c_R, c_A)\) 如下：
- 概念 `DepositAccount` 有 9 个属性：`agreementMember, agreementPeriod, effectiveDate, insured, accountHolder, amountDue, simpleInterest, agreementBalance, availableCash`
- 概念 `Deposit` 有 6 个属性：`member, per, date, interest, balance, cash`
- \(\Pi(p("DepositAccount"), p("Deposit")) = 2\)

应用函数 \(S_{\neq}(c_R, c_A)\) 我们得到：
\[ S_{\neq}(c_R, c_A) = \frac{2}{(9+6)-2} = \frac{2}{13} \approx 0.154 \]

这个结果符合我们的直觉，因为 `Deposit` 的六个属性中只有两个被 `DepositAccount` 的属性满足。此外，`DepositAccount` 和 `Deposit` 的概念非常不同，因为它们之间只共享了两个属性。

#### 排序算法
在本节中，我们将介绍实际的 Web 服务广告排名算法，基于前面介绍的函数。

- REQ(c_i, c_o, c_f) = Web 服务请求
- ADV_j(c_ji, c_jo, c_jf) = 广告列表

对于所有的 j，获取 ADV_j(c_ji, c_jo, c_jf)：
- 如果 same_ontology(c_i, c_ji)，则 i = S_(c_i, c_ji)
- 否则 i = S_≠(c_i, c_ji)
- 如果 same_ontology(c_o, c_jo)，则 o = S_(c_o, c_jo)
- 否则 o = S_≠(c_o, c_jo)
- 如果 same_ontology(c_f, c_jf)，则 f = S_(c_f, c_jf)
- 否则 f = S_≠(c_f, c_jf)

match[j] = (i + o + f) / 3;
对所有的 match[j] 进行排序。

算法使用函数 same_ontology 来确定两个概念是否在同一本体中定义。一旦计算出 Web 服务请求和 Web 服务广告之间的输入、输出和功能的匹配程度，我们将整体匹配程度定义为输入匹配程度、输出匹配程度和功能匹配程度的算术平均值。当然，如果某个维度（输入、输出或功能）对服务提供者或消费者来说更重要，可以实现加权函数。

#### SM-T 在 METEOR-S WSDI 和 Lumina 中的应用
SM-T 算法可以集成到 METEOR-S Web 服务发现基础设施 (MWSDI) [7] 和 Lumina [21] 的实现中。本文作者之一是 MWSDI 和 Lumina 的架构师之一。这两个项目都利用了 METEOR-S 发现 API，该 API 将语义模板与密切匹配的 Web 服务进行匹配，这些服务可以插入抽象流程中，几乎不需要人工干预。METEOR-S 发现 API 基于 jUDDI 发现引擎，并将语义信息映射到 UDDI 的业务、服务和 tModel 组件，从而提供了增强的 UDDI。

##### UDDI
UDDI [39] 是由 OASIS 赞助的一种 XML 基础的注册表，用于在全球范围内列出业务和服务。UDDI 的重点是动态地允许企业和组织发布和发现 Web 服务。UDDI 提供了一个基础，既支持公开可用的 Web 服务，也支持企业内部的服务。UDDI 模型具有持久的数据结构，称为实体，用 XML 表示并存储在 UDDI 节点中。信息模型包括以下实体类型：
- businessEntity: 表示一个业务
- businessService: 由业务提供的 Web 服务集合
- bindingTemplate: 提供如何使用 Web 服务的信息
- tModel: 提供 Web 服务类型的分类
- publisherAssertion: 提供业务实体之间的关系
- subscription: 报告业务实体的变化

UDDI 的编程接口分为两部分：查询和发布。要通过 UDDI 查询 Web 服务，有多种方法可供选择。可以通过组合这些搜索方法来优化结果。根据业务兴趣，可以使用关键字搜索、类别搜索和 tModel 搜索等方法。

##### 发现方法
服务注册表需要为消费者提供合适的发现机制。我们可以根据用于匹配服务广告和服务请求的元素对匹配方法进行分类。以下是四种方法：IO 匹配、多级匹配、基于图的方法和语法匹配。

- **IO 匹配**：Paolucci [40] 和 Cardoso [6, 41] 描述了一种早期的工作，即“当请求的所有输出都被广告的输出匹配，且广告的所有输入都被请求的输入匹配时，广告匹配请求”。Cardoso 还考虑了概念的语义和语法相似性，使用 Tversky 模型。因此，这些方法仅考虑服务的输入和输出进行匹配。
- **多级匹配**：Jaeger [42] 提出的这种匹配策略在多个层次上进行匹配，即输入/输出、服务类别和其他自定义服务参数（例如，与 QoS 相关的问题）。这种方法反映了理想的发现应该尽可能多地利用可用的功能和非功能性服务信息。
- **基于图的方法**：Trastour [43] 提出了一个语义图匹配方法。服务描述（请求或广告）表示为有向图（RDF 图），节点是概念实例（即个体），弧是连接这些实例的属性（即概念角色）。每个图的根节点是代表服务广告/请求的个体。其他节点引用从领域本体借用的概念（能力、约束等）。通过递归算法在两个图之间进行匹配，一个代表服务请求，另一个代表服务广告。
- **语法匹配**：虽然 IO 匹配、多级匹配和基于图的匹配依赖于各种本体中的子集关系来评估服务的相似性，但这还不足以实现有效的发现。一种扩展方法是使用相似度度量和信息检索 (IR) 技术。目标是利用服务的隐式语义，而不仅仅是由领域本体描述的显式语义。这种方法的核心思想是在基于逻辑（子集）匹配失败时应用 IR 相似度度量。例如，TFIDF（词频/逆文档频率）术语权重方案 [44] 可用于评估概念、词或文档之间的语义距离/接近度。

##### Lumina
Lumina 与 MWSDI [7] 密切合作，提供了一个用户友好的 GUI，用于指定语义模板并发现匹配的服务。MWSDI 是一个基础设施，解决了跨多个领域整合大量注册表的挑战。MWSDI 提供了一个可扩展的架构来访问这些注册表，并提供了使用特定领域本体进行语义发布和发现的能力。系统提供了两种算法，用于使用 WSDL 描述进行语义发布和发现。这两种算法将 Web 服务的输入和输出映射到本体概念，随后可以使用构建的模板进行搜索。

MWSDI 采用底层对等网络实现，提供了所需的可扩展性和灵活性，以创建适用于多样化 Web 服务注册表的基础设施。

Lumina 可以看作是 Radiant 的伴侣。Radiant 注释并发布语义 Web 服务，而 Lumina 用于发现这些已发布的服务。它允许搜索服务、单个操作或接口（即操作组合）。为了创建语义模板，GUI 提供了输入文本框和选择项，可以通过数据输入、鼠标点击或将类或属性从本体拖动来填充。图6展示了如何使用 Lumina 填充语义模板。

Lumina 设计支持 WSDL-S，提供了指定输入、输出、功能/类别、前提条件和效果的方法。后来添加了一个简化的 SAWSDL 模式，不支持前提条件和效果。

SM-T、MWSDI 和 Lumina 在处理 Web 服务方面基本上遵循相同的方法。它们都将 Web 服务视为由多个操作组成的抽象接口（黑盒），每个操作都有自己的输入和输出集以及功能。注释 Web 服务操作的输入、输出和功能显著提高了发现效率，优于当前 UDDI 注册表所使用的方法。这是因为当前的 UDDI 实现仅基于属性的语法匹配。语义方法已经在多个领域证明可以提高搜索精度。第 3.2 节和第 3.3 节表明 SM-T 算法能够超越简单的语法匹配来比较概念。假设用户向 UDDI 发出请求，...