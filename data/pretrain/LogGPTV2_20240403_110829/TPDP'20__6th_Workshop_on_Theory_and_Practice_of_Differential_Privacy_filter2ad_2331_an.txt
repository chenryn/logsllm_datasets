Recall that a digital signature scheme is given by a triple of polynomial-time algorithms as
follows:
1. A randomized key generation algorithm Gen(1d) = (pk , sk ) that produces a public key pk and
a private key sk given a security parameter d as input.
2. A randomized signing algorithm that given a message m ∈ {0, 1}d and a secret key sk produces
a signature σ = Signsk (m) ∈ {0, 1}d.
3. A deterministic veriﬁcation algorithm Verpk (m, σ) that always accepts a signature for m
generated using the secret key sk corresponding to pk .
56
Informally, we say that the scheme is secure if given access to examples (mi, σi = Signsk (mi)) signed
with the same secret key, any algorithm running in time poly(d) cannot generate a new message
m(cid:48) /∈ {mi} and a signature σ(cid:48) such that Verpk (m(cid:48), σ(cid:48)) = 1.
We now describe how to use digital signatures to construct datasets for which it is hard to
generate synthetic data preserving the answer to a cryptographically deﬁned counting query. This
construction is due to Dwork et al. [40]:
The Dataset: Generate (pk , sk ) ← Gen(1d) and construct a dataset x with n individuals, where
each row contains a pair (mi, σi) with mi selected uniformly at random from {0, 1}d and
σi ← Signsk (mi).
The Query: Consider the counting query q(·) = Verpk (·). This query is eﬃciently computable
and evaluates to 1 on the whole dataset.
The Hardness: Now suppose for contradiction that there exists a polynomial-time diﬀerently
private mechanism M that given x produces a synthetic dataset ˆx ∈ ({0, 1}d)ˆn which is
accurate with respect to q with high probability. By accuracy, ˆx must contain at least one
row ˆxj = ( ˆmj, ˆσj) such that Verpk ( ˆmj, ˆσj) = q(ˆxj) = 1. To derive a contradiction, we consider
two cases:
• if ˆmj /∈ x, then M succeeded in creating a forgery for the signature scheme in polynomial
time, contradicting its security.
• if ˆmj ∈ x, then M intuitively has violated privacy, as it has copied part of a row (which
is independent from all other rows) entirely in the output. More precisely, for every
i ∈ [n], the probability that an (ε, δ)-diﬀerentially private mechanism M outputs mi
is at most eε/2d + δ, since it could output mi with probability at most 1/2d if we
replaced the i’th row with all zeroes. Thus, the probability M outputs any mi is at most
n · (eε/2d + δ)  0 and three polynomial time algorithms Red, Enc, Dec satisfying the
following:
1. Red is a randomized reduction that given a circuit C output a 3-CNF Red(C) = φ = φ1 ∧
. . .∧ φm such that if C is satisﬁable then φ is satisﬁable, and otherwise there is no assignment
satisfying more than (1 − α)m clauses of φ.
2. If w is a satisfying assignment for C, then z = Enc(C, w) is a satisfying assignment for φ.
3. If z is an assignment for φ satisfying more than (1 − α)m clauses, then w = Dec(C, z) is a
satisfying assignment for C.
Item 1 is the standard formulation of the PCP Theorem in terms of the hardness of approximation
MAX-3SAT; it asserts a Karp reduction from Circuit SAT to the promise problem Gap-MAX-
3SAT. Items 2 and 3 are saying that this reduction is actually a Levin reduction, meaning we can
57
eﬃciently transform witnesses between the Circuit SAT instance and the corresponding Gap-MAX-
3SAT instance.
Here is our modiﬁed construction:
The Dataset: Let x be the dataset constructed above using digital signatures. We write z for the
dataset with n individuals obtained by encoding each row xi of x with the encoding algorithm
given by the PCP theorem, relative to the circuit C = Verpk . That is, zi = Enc(Verpk , xi).
The Queries: Our set of queries is all 3-way conjunctions, but we will only exploit accuracy with
respect to the clauses of the 3-CNF formula φ = φ1 ∧ ··· ∧ φm output by Red(Verpk ). Note
that for every row zi in z we have φ(zi) = 1 (since Verpk (xi) = 1), so for every clause φj in φ
we have φj(z) = n−1(cid:80)
i∈[n] φj(zi) = 1.
The Hardness: Suppose for contradiction that M is a polynomial-time diﬀerentially private mech-
anism that produces synthetic datasets that are α-accurate with respect to 3-way conjunctions
and let ˆz = M(z). Then for every j ∈ [m] we have φj(ˆz) ≥ 1 − α. By averaging, this implies
that there exists some row ˆzi of ˆz that satisﬁes at least (1− α)· m clauses from φ. Therefore,
using this row from the sanitized dataset we can obtain ( ˆm, ˆσ) = Dec(Verpk , ˆz) such that
Verpk ( ˆm, ˆσ) = 1. Now the same argument used earlier shows that either ( ˆm, ˆσ) is a forgery
(in case ˆm /∈ x) or a violation of privacy (in case ˆm ∈ x).
The hardness results we have seen apply to either contrived (cryptographic) queries (Corol-
lary 6.6 and Theorem 6.8) or constrain the form of the mechanism’s output to synthetic data
(Theorem 6.12). Obtaining a hardness result for any “natural” family of queries without restrict-
ing the form of the mechanism’s output remains an intriguing open problem.
Open Problem 6.13. Give evidence of hardness of accurately answering any “natural” family
of counting queries under diﬀerential privacy, without constraining the form of the mechanism’s
output.
At the same time, the lack of such a hardness result should provide some hope in looking for
algorithms, and suggests that we should look for output representations other than synthetic data.
We can gain hope from computational learning theory, where proper learning (where the learner’s
output is constrained to come from the same representation class as the concept it is learning)
is often computationally harder than unconstrained, improper learning. Indeed, we will see the
beneﬁts of moving beyond synthetic data for conjunctions in the next section.
7 Eﬃcient Algorithms for Speciﬁc Query Families
In this section, we will see that for some speciﬁc, natural families of queries, one can in fact obtain
eﬃcient algorithms for answering more than n2 queries.
7.1 Point Functions (Histograms)
We have already seen that for the class Qpt = Qpt(X) of point functions on X, we can achieve better a
better accuracy-privacy tradeoﬀ than is possible with an arbitrary class Q of eﬃciently computable
queries. Indeed, Proposition 2.8 and Theorems 3.5 and 5.14 show that the optimal error achievable
58
for Qpt(X) is Θ(min{log |X|, log(1/δ), εn}/εn), whereas for an arbitrary query family with |Q| = |X|,
there is a lower bound of Ω((log |X|)3/2/εn)1/2 for a wide range of parameters (Theorem 5.22).
Now we will see that in fact the optimal algorithms for point functions can in fact be imple-
mented in polynomial time, and can be modiﬁed to generate synthetic data.
Theorem 7.1 (point functions with diﬀerential privacy [2]). For every data universe X, n ∈ N,
and ε, δ > 0 such that δ  0, there
is a poly(n, d)-time (ε, 0)-diﬀerentially private algorithm that takes a dataset of n rows from data
universe X = [2d] and outputs a synthetic dataset maintaining the value of all threshold-function
counting queries up to an error of
α = max
with high probability.
(cid:26) O(d)
, ˜O
(cid:18) 1
(cid:19)(cid:27)
εn
εn
59
Interestingly, in the case of approximate diﬀerential privacy, there is an inherent dependence
on log∗ d in the error.
Theorem 7.3 (thresholds with approximate diﬀerential privacy [9, 23]). For every n, d ∈ N,
ε, δ > 0 such that exp(−εn/ log∗ n) ≤ δ ≤ 1/n2,
1. There is a poly(n, d)-time (ε, δ)-diﬀerentially private algorithm that takes a dataset of n rows
from data universe X = [2d] and outputs a synthetic dataset maintaining the value of all
threshold-function counting queries up to an error of
α = max
2(1+o(1)) log∗ d · log(1/δ)
εn
, ˜O
(cid:19)(cid:41)
.
(cid:18) 1
εn
(cid:40)
(cid:18)
2. Every (ε, δ)-diﬀerentially private algorithm for answering all threshold functions on datasets
of n rows from data universe X = [2d] must incur an error of at least
(cid:26) (log∗ d) · log(1/δ)
(cid:27)(cid:19)
, 1
εn
α = Ω
min
We will not cover the proofs of these results, except to note that the log∗ d lower bound has
a Ramsey-theoretic proof [18], raising the possibility that there is more general Ramsey-theoretic
combinatorial quantity that can help in characterizing the optimal accuracy or sample complexity
for diﬀerentially private algorithms (Open Problems 5.24 and 5.25).
Note that our understanding of threshold functions is not as tight as for point functions, and it
would be interesting to close the gap between the upper and lower bounds. In particular:
Open Problem 7.4. Does the optimal error for releasing threshold functions over X = [2d] with
approximate diﬀerential privacy grow linearly or exponentially with log∗ d, or something in between?
7.3 Conjunctions (Marginals)
Unlike point functions and thresholds, the class Qconj of conjunctions is unlikely to have a polynomial-
time diﬀerentially private algorithm for generating synthetic data, by Theorem 6.12. This suggests
that we should look to other ways of summarizing the answers to conjunction queries.
Indeed, we will sketch two algorithms that beat the barrier of Theorem 6.12 by avoiding synthetic
√
data. One algorithm summarizes the answers to all conjunction queries in subexponential (2 ˜O(
d))
time (using a subexponential-sized dataset), using low-degree approximations to boolean functions.
(Assuming the existence of digital signature schemes with exponential security and nearly linear-
time veriﬁcation, the proof of Theorem 6.12 can be extended to show that generating synthetic data
requires time at least 2d1−o(1), even when n = 2d1−o(1).) The other algorithm answers all k = Θ(d2)
√
2-way conjunctions in polynomial time with error ˜O(
d)/εn, in particular allowing us to answer
k = ˜Ω(n4) (cid:29) n2 such queries, using ideas from convex geometry and optimization.
Theorem 7.5 (marginals via low-degree approximation [101]). There is a constant c such that
√
for all ε, α > 0, d, n, t ∈ N with d ≥ t and n ≥ dc
t·log(1/α)/ε, there is an ε-diﬀerentially private
algorithm running in time poly(n) that takes a dataset x ∈ ({0, 1}d)n and outputs a “summary”
(say, as a boolean circuit) that allows for computing approximating the answer to all the queries in
Qconj
(d) to within additive error α.
t
60
A more sophisticated algorithm from [26] reduces the amount of data needed to near-optimal
(n = O(t · d.51)) at the cost of a larger (but still slightly subexponential) running time of 2o(d).
Proof sketch. Starting with our dataset x with n rows in X = {0, 1}d the mechanism M will
produce a “summary” S that will approximate the function fx deﬁned as fx(q) = q(x). S will be
a polynomial of low degree.
By introducing new variables for negative literals and negating our functions, it suﬃces to
handle monotone t-way disjunctions, which can conveniently be speciﬁed by bit strings y ∈ {0, 1}d:
qy(w) =
wi ,
w ∈ X .
(6)
of(cid:80)t
For a t-way disjunction, y has Hamming weight t, and the value of qy(w) is determined by the value
i=1 wiyi ∈ {0, . . . , t}. Speciﬁcally
qy(w) =
i=1 wiyi ∈ {1, . . . , t},
i=1 wiyi = 0
(7)
(cid:95)
i:yi=1
(cid:40)
1 (cid:80)t
0 (cid:80)t
n(cid:88)
1
n
Given a dataset x, we are interested in producing a (diﬀerentially private) approximation to
the function fx(·) deﬁned as:
fx(y) = qy(x) =
qy(xi) =
1
n
i=1
fxi(y).
n(cid:88)
i=1