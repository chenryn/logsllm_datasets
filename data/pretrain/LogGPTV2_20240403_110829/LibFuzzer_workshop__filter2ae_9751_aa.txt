# LibFuzzer 进阶学习指南

## 译文声明
本文为翻译文章，仅供参考。具体内容和含义请以原文为准。

## LibFuzzer 进阶学习（二）

在上一篇文章中，我们对 LibFuzzer 的基本原理和使用方法有了初步了解。接下来，我们将深入探讨一些进阶内容，包括字典的使用、语料库精简、错误报告生成以及关键编译选项的选择等，希望能让读者对 LibFuzzer 有更全面的理解。

## 第八课：字典的有效性

本节将通过 fuzzing `libxml2` 来展示字典的使用。首先解压并使用 Clang 编译 `libxml2`：

```bash
tar xzf libxml2.tgz
cd libxml2
./autogen.sh
export FUZZ_CXXFLAGS="-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link"
CXX="clang++ $FUZZ_CXXFLAGS" CC="clang $FUZZ_CXXFLAGS" CCLD="clang++ $FUZZ_CXXFLAGS" ./configure
make -j$(nproc)
```

### 新编译选项解释

- `-gline-tables-only`：启用采样分析器。根据 Clang 手册，采样分析器用于收集程序运行时的信息（如硬件计数器），并且非常高效，不会带来大的运行时开销。这些数据可用于确定代码中最频繁执行的部分，从而优化 fuzzing 效率。

### 提供的测试用例

```cpp
// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
#include <stddef.h>
#include <stdint.h>
#include "libxml/parser.h"

void ignore (void* ctx, const char* msg, ...) {
    // Error handler to avoid spam of error messages from libxml parser.
}

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
    xmlSetGenericErrorFunc(NULL, &ignore);
    if (auto doc = xmlReadMemory(reinterpret_cast<const char*>(data), static_cast<int>(size), "noname.xml", NULL, 0)) {
        xmlFreeDoc(doc);
    }
    return 0;
}
```

该测试用例将输入样本转换后传递给 `xmlReadMemory` 函数进行处理。编译命令如下：

```bash
clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -std=c++11 xml_read_memory_fuzzer.cc -I libxml2/include libxml2/.libs/libxml2.a -fsanitize=fuzzer -lz -o libxml2-v2.9.2-fsanitize_fuzzer1
```

由于使用了采样分析器，fuzzing 的执行速度和覆盖率都得到了显著提升。

### Fuzzing 输出示例

```plaintext
#2481433    NEW    cov: 2018 ft: 9895 corp: 3523/671Kb lim: 1470 exec/s: 2038 rss: 553Mb L: 484/1470 MS: 1 CopyPart-
#2481939    REDUCE cov: 2018 ft: 9895 corp: 3523/671Kb lim: 1470 exec/s: 2037 rss: 553Mb L: 390/1470 MS: 4 InsertByte-ChangeBit-ShuffleBytes-EraseBytes-
...
```

尽管 fuzzer 在短时间内未能发现崩溃，但可能的原因包括：
1. 程序本身健壮。
2. 选择的接口函数不合适。
3. 异常检测设置不当。

针对第三点，我们可以尝试添加更多具体的异常检测选项，例如 `-fsanitize-address-use-after-scope`，以提高检测精度：

```bash
export FUZZ_CXXFLAGS="-O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope"
CXX="clang++ $FUZZ_CXXFLAGS" CC="clang $FUZZ_CXXFLAGS" CCLD="clang++ $FUZZ_CXXFLAGS" ./configure
make -j$(nproc)
clang++ -O2 -fno-omit-frame-pointer -gline-tables-only -fsanitize=address,fuzzer-no-link -fsanitize-address-use-after-scope -std=c++11 xml_read_memory_fuzzer.cc -I libxml2/include libxml2/.libs/libxml2.a -fsanitize=fuzzer -lz -o libxml2-v2.9.2-fsanitize_fuzzer1
```

即使如此，仍需较长时间才能观察到明显的效果。

### 字典文件示例

```plaintext
attr_encoding=" encoding=\"1\""
attr_generic=" a=\"1\""
attr_href=" href=\"1\""
attr_standalone=" standalone=\"no\""
attr_version=" version=\"1\""
attr_xml_base=" xml:base=\"1\""
attr_xml_id=" xml:id=\"1\""
attr_xml_lang=" xml:lang=\"1\""
attr_xml_space=" xml:space=\"1\""
attr_xmlns=" xmlns=\"1\""
entity_builtin="&lt;"
entity_decimal="&#1;"
entity_external="&a;"
entity_hex="&#x1;"
string_any="ANY"
string_brackets="[]"
string_cdata="CDATA"
string_col_fallback=":fallback"
string_col_generic=":a"
string_col_include=":include"
string_dashes="--"
string_empty="EMPTY"
string_empty_dblquotes="\"\""
string_empty_quotes="''"
string_entities="ENTITIES"
string_entity="ENTITY"
string_fixed="#FIXED"
string_id="ID"
string_idref="IDREF"
string_idrefs="IDREFS"
string_implied="#IMPLIED"
string_nmtoken="NMTOKEN"
string_nmtokens="NMTOKENS"
string_notation="NOTATION"
string_parentheses="()"
string_pcdata="#PCDATA"
string_percent="%a"
string_public="PUBLIC"
string_required="#REQUIRED"
string_schema=":schema"
string_system="SYSTEM"
string_ucs4="UCS-4"
string_utf16="UTF-16"
string_utf8="UTF-8"
string_xmlns="xmlns:"
tag_attlist="<!ATTLIST"
tag_cdata="<![CDATA["
```

通过使用上述字典文件，可以进一步提高 fuzzing 的效率和覆盖率。