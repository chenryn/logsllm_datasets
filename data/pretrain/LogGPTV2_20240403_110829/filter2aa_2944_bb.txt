token had been supplied. You can log the exception details to a debug log that is only
accessible to system administrators if you wish. Once the JWT has been decrypted, you
can extract and validate the claims from the JWT. Open EncryptedJwtTokenStore.java
in your editor again and implement the read method as in listing 6.7.
@Override
public Optional read(Request request, String tokenId) {
    try {
        var jwt = EncryptedJWT.parse(tokenId);     
        var decryptor = new DirectDecrypter(encKey);    
        jwt.decrypt(decryptor);                         
        var claims = jwt.getJWTClaimsSet();
        if (!claims.getAudience().contains("https://localhost:4567")) {
            return Optional.empty();
        }
        var expiry = claims.getExpirationTime().toInstant();          
        var subject = claims.getSubject();                            
        var token = new Token(expiry, subject);                       
        var ignore = Set.of("exp", "sub", "aud");                     
        for (var attr : claims.getClaims().keySet()) {                
            if (ignore.contains(attr)) continue;                      
            token.attributes.put(attr, claims.getStringClaim(attr));  
        }
Listing 6.7
The JWT read method
Create the JWE header
and assemble the
header and claims.
Encrypt the 
JWT using the 
AES key in direct 
encryption mode.
Return the Compact 
Serialization of the 
encrypted JWT.
Parse the
encrypted
JWT.
Decrypt and 
authenticate 
the JWT using the 
DirectDecrypter.
Extract any
claims from
the JWT.
205
Encrypting sensitive attributes
        return Optional.of(token);
    } catch (ParseException | JOSEException e) {
        return Optional.empty();      
    }
}
You can now update the main method to switch to using the EncryptedJwtToken-
Store, replacing the previous EncryptedTokenStore. You can reuse the AES key that
you generated in section 6.3.2, but you’ll need to cast it to the more specific
javax.crypto.SecretKey class that the Nimbus library expects. Open Main.java and
update the code to create the token controller again:
TokenStore tokenStore = new EncryptedJwtTokenStore(
    (SecretKey) encKey);                              
var tokenController = new TokenController(tokenStore);
Restart the API and try it out:
$ curl -H 'Content-Type: application/json' \
  -u test:password -X POST https://localhost:4567/sessions
{"token":"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..hAOoOsgfGb8yuhJD
➥ .kzhuXMMGunteKXz12aBSnqVfqtlnvvzqInLqp83zBwUW_rqWoQp5wM_q2D7vQxpK
➥ TaQR4Nuc-D3cPcYt7MXAJQ.ZigZZclJPDNMlP5GM1oXwQ"}
Compressed tokens
The encrypted JWT is a bit larger than either a simple HMAC token or the NaCl tokens
from section 6.3.2. JWE supports optional compression of the JWT Claims Set before
encryption, which can significantly reduce the size for complex tokens. But combining
encryption and compression can lead to security weaknesses. Most encryption algo-
rithms do not hide the length of the plaintext message that was encrypted, and com-
pression reduces the size of a message based on its content. For example, if two
parts of a message are identical, then it may combine them to remove the duplica-
tion. If an attacker can influence part of a message, they may be able to guess the
rest of the contents by seeing how much it compresses. The CRIME and BREACH
attacks (http://breachattack.com) against TLS were able to exploit this leak of infor-
mation from compression to steal session cookies from compressed HTTP pages.
These kinds of attacks are not always a risk, but you should carefully consider the
possibility before enabling compression. Unless you really need to save space, you
should leave compression disabled.
Pop quiz
4
Which STRIDE threats does authenticated encryption protect against? (There are
multiple correct answers.)
a
Spoofing
b
Tampering
Never reveal the cause 
of a decryption failure 
to the user.
Cast the key to the more 
specific SecretKey class.
206
CHAPTER 6
Self-contained tokens and JWTs
6.4
Using types for secure API design
Imagine that you have implemented token storage using the kit of parts that you devel-
oped in this chapter, creating a JsonTokenStore and wrapping it in an Encrypted-
TokenStore to add authenticated encryption, providing both confidentiality and
authenticity of tokens. But it would be easy for somebody to accidentally remove the
encryption if they simply commented out the EncryptedTokenStore wrapper in the
main method, losing both security properties. If you’d developed the Encrypted-
TokenStore using an unauthenticated encryption scheme such as CTR mode and
then manually combined it with the HmacTokenStore, the risk would be even greater
because not every way of combining those two stores is secure, as you learned in sec-
tion 6.3.1.
 The kit-of-parts approach to software design is often appealing to software engi-
neers, because it results in a neat design with proper separation of concerns and maxi-
mum reusability. This was useful when you could reuse the HmacTokenStore, originally
designed to protect database-backed tokens, to also protect JSON tokens stored on
the client. But a kit-of-parts design is opposed to security if there are many insecure
ways to combine the parts and only a few that are secure.
PRINCIPLE
Secure API design should make it very hard to write insecure
code. It is not enough to merely make it possible to write secure code,
because developers will make mistakes.
You can make a kit-of-parts design harder to misuse by using types to enforce the secu-
rity properties you need, as shown in figure 6.6. Rather than all the individual token
(continued)
c
Repudiation
d
Information disclosure
e
Denial of service
f
Elevation of privilege
5
What is the purpose of the initialization vector (IV) in an encryption algorithm?
a
It’s a place to add your name to messages.
b
It slows down decryption to prevent brute force attacks.
c
It increases the size of the message to ensure compatibility with different
algorithms.
d
It ensures that the ciphertext is always different even if a duplicate message
is encrypted.
6
True or False: An IV should always be generated using a secure random number
generator.
The answers are at the end of the chapter.
207
Using types for secure API design
stores implementing a generic TokenStore interface, you can define marker interfaces
that describe the security properties of the implementation. A ConfidentialToken-
Store ensures that token state is kept secret, while an AuthenticatedTokenStore
ensures that the token cannot be tampered with or faked. We can then define a Secure-
TokenStore that is a sub-type of each of the security properties that we want to enforce.
In this case, you want the token controller to use a token store that is both confidential
and authenticated. You can then update the TokenController to require a Secure-
TokenStore, enforcing that an insecure implementation is not used by mistake.
DEFINITION
A marker interface is an interface that defines no new methods. It
is used purely to indicate that the implementation has certain desirable
properties.
Navigate to src/main/java/com/manning/apisecurityinaction/token and add the three
new marker interfaces, as shown in listing 6.8. Create three separate files, Confidential-
TokenStore.java, AuthenticatedTokenStore.java, and SecureTokenStore.java to hold
the three new interfaces.
+create(...)
+read(...)
TokenStore
ConﬁdentialTokenStore
AuthenticatedTokenStore
SecureTokenStore
The TokenStore interface
provides the basic operations.
Marker interfaces
are used to indicate
security properties.
Deﬁne a SecureTokenStore
as a combination of the
desired security goals.
Figure 6.6
You can use marker interfaces to indicate the security properties 
of your individual token stores. If a store provides only confidentiality, it should 
implement the ConfidentialTokenStore interface. You can then define a 
SecureTokenStore by subtyping the desired combination of security properties. 
In this case, it ensures both confidentiality and authentication.
208
CHAPTER 6
Self-contained tokens and JWTs
package com.manning.apisecurityinaction.token;                 
public interface ConfidentialTokenStore extends TokenStore {   
}                                                              
package com.manning.apisecurityinaction.token;                  
public interface AuthenticatedTokenStore extends TokenStore {   
}                                                               
package com.manning.apisecurityinaction.token;                     
public interface SecureTokenStore extends ConfidentialTokenStore,  
    AuthenticatedTokenStore {                                      
}                                                                  
You can now change each of the token stores to implement an appropriate interface:
 If you assume that the backend cookie storage is secure against injection and
other attacks, then the CookieTokenStore can be updated to implement the
SecureTokenStore interface.
 If you’ve followed the hardening advice from chapter 5, the DatabaseToken-
Store can also be marked as a SecureTokenStore. If you want to ensure that it
is always used with HMAC for extra protection against tampering, then mark it
as only confidential.
 The JsonTokenStore is completely insecure on its own, so leave it implement-
ing the base TokenStore interface.
 The SignedJwtTokenStore provides no confidentiality for claims in the JWT, so
it should only implement the AuthenticatedTokenStore interface.
 The HmacTokenStore turns any TokenStore into an AuthenticatedTokenStore.
But if the underlying store is already confidential, then the result is a Secure-
TokenStore. You can reflect this difference in code by making the HmacToken-
Store constructor private and providing two static factory methods instead, as
shown in listing 6.9. If the underlying store is confidential, then the first method
will return a SecureTokenStore. For anything else, the second method will be
called and return only an AuthenticatedTokenStore.
 The EncryptedTokenStore and EncryptedJwtTokenStore can both be changed
to implement SecureTokenStore because they both provide authenticated
encryption that achieves the combined security goals no matter what underly-
ing store is passed in.
Listing 6.8
The secure marker interfaces
The ConfidentialTokenStore marker interface
should go in ConfidentialTokenStore.java.
The AuthenticatedTokenStore should
go in AuthenticatedTokenStore.java.
The SecureTokenStore combines them 
and goes in SecureTokenStore.java.
209
Handling token revocation
public class HmacTokenStore implements SecureTokenStore {    
    private final TokenStore delegate;
    private final Key macKey; 
    private HmacTokenStore(TokenStore delegate, Key macKey) {     
        this.delegate = delegate;
        this.macKey = macKey;
    }
    public static SecureTokenStore wrap(ConfidentialTokenStore store,   
                                        Key macKey) {                   
        return new HmacTokenStore(store, macKey);                       
    }                                                                   
    public static AuthenticatedTokenStore wrap(TokenStore store,  
                                          Key macKey) {           
        return new HmacTokenStore(store, macKey);                 
    }                                                             
You can now update the TokenController class to require a SecureTokenStore to be
passed to it. Open TokenController.java in your editor and update the constructor to
take a SecureTokenStore:
    public TokenController(SecureTokenStore tokenStore) {
        this.tokenStore = tokenStore;
    }
This change makes it much harder for a developer to accidentally pass in an imple-
mentation that doesn’t meet your security goals, because the code will fail to type-
check. For example, if you try to pass in a plain JsonTokenStore, then the code will
fail to compile with a type error. These marker interfaces also provide valuable docu-
mentation of the expected security properties of each implementation, and a guide
for code reviewers and security audits to check that they achieve them.
6.5
Handling token revocation
Stateless self-contained tokens such as JWTs are great for moving state out of the data-
base. On the face of it, this increases the ability to scale up the API without needing
additional database hardware or more complex deployment topologies. It’s also much
easier to set up a new API with just an encryption key rather than needing to deploy a
new database or adding a dependency on an existing one. After all, a shared token
database is a single point of failure. But the Achilles’ heel of stateless tokens is how to
handle token revocation. If all the state is on the client, it becomes much harder to
invalidate that state to revoke a token. There is no database to delete the token from.
 There are a few ways to handle this. First, you could just ignore the problem and
not allow tokens to be revoked. If your tokens are short-lived and your API does not
handle sensitive data or perform privileged operations, then you might be comfortable
Listing 6.9
Updating the HmacTokenStore
Mark the 
HmacTokenStore 
as secure.
Make the 
constructor 
private.
When passed a
ConfidentialTokenStore,
returns a SecureTokenStore.
When passed
any other
TokenStore,
returns an
Authenticated-
TokenStore.
210
CHAPTER 6
Self-contained tokens and JWTs
with the risk of not letting users explicitly log out. But few APIs fit this description;
almost all data is sensitive to somebody. This leaves several options, almost all of which
involve storing some state on the server after all:
 You can add some minimal state to the database that lists a unique ID associated
with the token. To revoke a JWT, you delete the corresponding record from the
database. To validate the JWT, you must now perform a database lookup to
check if the unique ID is still in the database. If it is not, then the token has
been revoked. This is known as an allowlist.4
 A twist on the above scheme is to only store the unique ID in the database when
the token is revoked, creating a blocklist of revoked tokens. To validate, make
sure that there isn’t a matching record in the database. The unique ID only
needs to be blocked until the token expires, at which point it will be invalid any-
way. Using short expiry times helps keep the blocklist small.
 Rather than blocking individual tokens, you can block certain attributes of a set
of tokens. For example, it is a common security practice to invalidate all of a
user’s existing sessions when they change their password. Users often change
their password when they believe somebody else may have accessed their
account, so invalidating any existing sessions will kick the attacker out. Because
there is no record of the existing sessions on the server, you could instead
record an entry in the database saying that all tokens issued to user Mary before
lunchtime on Friday should be considered invalid. This saves space in the data-
base at the cost of increased query complexity.
 Finally, you can issue short-lived tokens and force the user to reauthenticate
regularly. This limits the damage that can be done with a compromised token
without needing any additional state on the server but provides a poor user
experience. In chapter 7, you’ll use OAuth2 refresh tokens to provide a more
transparent version of this pattern.
6.5.1
Implementing hybrid tokens
The existing DatabaseTokenStore can be used to implement a list of valid JWTs, and
this is the simplest and most secure default for most APIs. While this involves giving up
on the pure stateless nature of a JWT architecture, and may initially appear to offer
the worst of both worlds—reliance on a centralized database along with the risky
nature of client-side state—in fact, it offers many advantages over each storage strategy
on its own:
 Database tokens can be easily and immediately revoked. In September 2018, Face-
book was hit by an attack that exploited a vulnerability in some token-handling
code to quickly gain access to the accounts of many users (https://newsroom
.fb.com/news/2018/09/security-update/). In the wake of the attack, Facebook
4 The terms allowlist and blocklist are now preferred over the older terms whitelist and blacklist due to negative
connotations associated with the old terms.
211
Handling token revocation
revoked 90 million tokens, forcing those users to reauthenticate. In a disaster situ-
ation, you don’t want to be waiting hours for tokens to expire or suddenly finding
scalability issues with your blocklist when you add 90 million new entries.
 On the other hand, plain database tokens may be vulnerable to token theft and
forgery if the database is compromised, as described in section 5.3 of chapter 5.
In that chapter, you hardened database tokens by using the HmacTokenStore to
prevent forgeries. Wrapping database tokens in a JWT or other authenticated
token format achieves the same protections.
 Less security-critical operations can be performed based on data in the JWT
alone, avoiding a database lookup. For example, you might decide to let a user
see which Natter social spaces they are a member of and how many unread mes-
sages they have in each of them without checking the revocation status of the
token, but require a database check when they actually try to read one of those
or post a new message.
 Token attributes can be moved between the JWT and the database depending
on how sensitive they are or how likely they are to change. You might want to
store some basic information about the user in the JWT but store a last activ-
ity time for implementing idle timeouts in the database because it will change
frequently.
DEFINITION
An idle timeout (or inactivity logout) automatically revokes an authen-
tication token if it hasn’t been used for a certain amount of time. This can be
used to automatically log out a user if they have stopped using your API but
have forgotten to log out manually.
Listing 6.10 shows the EncryptedJwtTokenStore updated to list valid tokens in the
database. It does this by taking an instance of the DatabaseTokenStore as a construc-
tor argument and uses that to create a dummy token with no attributes. If you wanted
to move attributes from the JWT to the database, you can do that here by populating
the attributes in the database token and removing them from the JWT token. The
token ID returned from the database is then stored inside the JWT as the standard
JWT ID (jti) claim. Open JwtTokenStore.java in your editor and update it to allowlist
tokens in the database as in the listing.
public class EncryptedJwtTokenStore implements SecureTokenStore {
    private final SecretKey encKey;
    private final DatabaseTokenStore tokenAllowlist;            
    public EncryptedJwtTokenStore(SecretKey encKey,
                         DatabaseTokenStore tokenAllowlist) {   
        this.encKey = encKey;
        this.tokenAllowlist = tokenAllowlist;                   
    }
Listing 6.10
Allowlisting JWTs in the database
Inject a Database-
TokenStore into the 
EncryptedJwtToken-
Store to use for the 
allowlist.
212
CHAPTER 6
Self-contained tokens and JWTs
    @Override
    public String create(Request request, Token token) {
        var allowlistToken = new Token(token.expiry, token.username);  
        var jwtId = tokenAllowlist.create(request, allowlistToken);    
        var claimsBuilder = new JWTClaimsSet.Builder()
                .jwtID(jwtId)    
                .subject(token.username)