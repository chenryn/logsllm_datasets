To confirm that RIP-RH does not otherwise affect the perfor-
mance of 7-zip we tested the program separately with multi-processing
mode disabled and repeated the compression test. Without any isola-
tion compressing a 10G file sequentially with 7-zip took on average
over three repetitions 9 minutes and 39 seconds; when we ran 7-zip
as a critical process sequentially compressing the same file took 9
minutes and 40 seconds on average. In summary, RIP-RH shows no
adverse effects in terms of memory or performance for standard
applications.
7.3 LMBench Microbenchmarks
To further assess the initialization and potential memory overhead
observed in the case of gcc and mcf, we conducted micro bench-
marks, using the widely used LMBench test suite. In particular, we
started the LMBench tests with and without using our fork wrap-
per script, showing visible overhead in application startup, but no
slowdowns in terms of write or read performance.7
7.4 Real-world Applications
To better assess the performance of RIP-RH we conducted addi-
tional experiments using the three popular applications OpenSSH,
Firefox, and Chrome. We started both applications as critical pro-
cesses. Further we created isolated variants of all setuid binaries to
demonstrate feasibility.
7.4.1 OpenSSH. For our real-world use case of OpenSSH we started
the SSH daemon itself as a critical process. We then connected over
the local network to copy files of different sizes and recorded the file
transfer times. To eliminate any significant random noise events, we
repeated the whole process three times and rebooted the machine
in between our experiments.
Overall, these results are in line with our benchmark measure-
ments. In particular, the overhead in all cases is below 4%, also for
6In Appendix A we provide the detailed scores and overhead numbers for all of the
experiments we conducted (Table 4).
7Detailed evaluation results are provided in Appendix A (Table 2).
milcnamddealllpovraylbmsphinx3bzip2gccmcfgobmkhmmersjenglibquantumh264refomnetppastarxalancbmkMeanGeomean-505101520RIP-RH (no isolation)RIP-RH (all isolated)Overhead (%)Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand567smaller file transfers that take just a couple of seconds over the local
network.8 The experiment demonstrates that a physical isolation
for processes is practical in the network service scenario.
Firefox. In our second real-world experiment we tested the
7.4.2
performance of RIP-RH while running the popular browser Firefox
as a physically isolated user process. We used the browser bench-
marks Kraken and Octane to see if our prototype would impact the
browsing performance and thereby affect user experience.
We found the performance impact for both benchmarks to be
less than 3% for an isolated Firefox process.9 We conclude that
RIP-RH does not adversely affect user experience while running
desktop applications such as Firefox.
7.4.3 Chrome Tabs. In addition, to provoke high memory pressure
in order to get an understanding of the effects of memory fragmen-
tation we tested how many isolated tabs a user could open on the
popular Chrome browser (in contrast to Firefox, opening a tab will
start a new process on Chrome). In our experiment, we were able
to open and load 100 tabs without problems from a Chrome pro-
cess that was marked as critical. Hence, we conclude that RIP-RH
represents a feasible defense in practice—also for a larger number
of processes.
7.4.4 setuid binaries. We further verified that isolating all setuid
binaries is feasible in practice by marking all of them as critical. We
were able to successfully boot the system without any problems
and also restarted the phoronix test suite (we omit these results for
brevity as there are no noticeable deviations).
8 DISCUSSION
In this paper we focused on isolation policies between individual
user-level programs. However, in this section we discuss several
areas that might be of interest for future work.
8.1 In-process isolation
One possible extension of our physical DRAM isolation mechanism
could be realized on the allocation level. For instance, instrumenting
the system-wide heap allocator would allow for an isolation policy
between individual application components or threads. This would
be particularly useful for large single-process applications, that are
structured into components.
8.2 Shared memory
Memory areas that are accessible to multiple processes are problem-
atic for memory-isolation schemes for several reasons: first, shared
memory might be accessed by a malicious third-party process. Sec-
ond, even if all processes with access to the shared memory region
are benign, an adversary might trick a benign process into mali-
ciously accessing the shared region (i.e., a confused-deputy attack).
Third, while individual third-party processes by themselves might
be benign, they could act maliciously in combination by work-
ing together (i.e., a collusion attack). For these reasons, we argue
that shared memory—in any memory-isolation scheme—must be
considered untrusted and potentially compromised. Consequently,
8We provide detailed evaluation results in Appendix A (Table 1).
9We provide detailed evaluation results in Appendix A (Table 3).
RIP-RH does not support isolation of shared memory regions. In
practice utilizing shared memory can be avoided, e.g., through tech-
niques such as static linking or decoupling shared components from
the main application (called broker architecture).
9 RELATED WORK
In this section, we briefly summarize existing rowhammer attacks
and compare RIP-RH against other proposed defenses.
9.1 Rowhammer-based Attacks
As described in section 2 induced bit flips were first systematically
study and analyze Kim et al. [14], however, they did not provide
any practical attack.
The first practical rowhammer-based privilege-escalation attacks
were presented by Seaborn and Dullien [27], by exploiting the
clflush instruction on x86. First, they exploited rowhammer-
induced bit flips to escape the Chrome browser sandbox (which is
called Native Client, or NaCl [36]). This attacks shows, that mali-
cious developers can escape the sandbox by exploiting rowhammer,
and achieve code execution on the victim machine. Second, the
authors presented an attack to compromise the kernel from an un-
privileged user-mode application by resorting to rowhammer. By
manipulating page-table entries via rowhammer the attack can gain
the possibility to modify arbitrary kernel memory, and subsequently
compromise the entire system
Combining the first and second attack in a two-stage attack it is
easy to imagine that an adversary can completely compromise ma-
chine remotely, i.e., by delivering malicious java script first escaping
the sandbox and afterwards the kernel.
Thereafter, Qiao and Seaborn [24] demonstrated a new rowham-
mer attack using the class of non-temporal instructions on x86 (e.g.,
movnti). Since many library functions, such as memcpy, utilize
these non-temporal reads and writes for optimization purposes, an
adversary can exploit rowhammer by resorting to code-reuse attack
techniques [28]. Hence, it is not required to inject a dedicated code
to induce bit flips, instead existing code can be re-used to conduct
an attack.
Further, Aweke et al. [1] demonstrated that executing a rowham-
mer attack is possible even without leveraging any dedicated in-
struction to circumvent the caches and force a memory access.
Instead, the authors crafted a memory-access pattern that will
force the processor to evict a particular element from the cache
reliably and at a high rate. Therefore they concluded that higher re-
fresh rates for DRAM would not be enough to successfully prevent
rowhammer attacks.
Gruss et al. [11] showed that rowhammer attacks can also be
launched from JavaScript. More specifically, the authors were able
to exploit bit flips in the page tables only by running a JavaScript
program in a recent version of Firefox.
Bosman et al. [2] followed up on this work by leveraging memory
deduplication in Windows 10 to create fake JavaScript objects. They
corrupted these objects by generating bit flips and subsequently
gained arbitrary read/write access within the browser process.
Later, Razavi et al. [25] applied a very similar technique to attack
and fully compromise cryptographic keys in co-located virtual
machines running on the same host.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand568Xiao et al. [35] presented a second cross-VM attack at the same
time: they exploited rowhammer to manipulate page-table entries of
the Xen hypervisor to gain hypervisor privileges and compromise
the host. They were also the first to present a methodology for
automatically reverse engineering the physical-to-DRAM mapping,
i.e., the exact relationship between physical addresses and DRAM
structures such as rows and banks.
Pessl et al. [22] independently presented a similar methodology
to reverse engineer this mapping. Based on the uncovered DRAM
mappings, they demonstrated that cross-CPU rowhammer attacks
are possible, and for the first time presented a practical attack on
DDR4 modules. Moreover, Van der Veen et al. [33] demonstrated
that the original rowhammer exploit can be used to escalate privi-
leges on smartphones.
More recently, Gruss et al. [10] demonstrated that row-hammer-
based privilege-escalation exploits are a realistic threat, they showed
that real-world setuid binaries such as sudo can be exploited
through a technique called opcode flipping.
Further, Frigo et al. [8] showed that rowhammer attacks can be
accelerated by using the graphical-processing unit (GPU) of the sys-
tem. As they were able to demonstrate, this opens up a new attack
vector for exploiting bit flips as GPU memory can be controlled
completely independent from the CPU, e.g., from a browser.
To summarize all the attacks described in the literature require
memory belonging to a different security domain (e.g., kernel or
setuid process) to be physically co-located to memory that is under
the attacker’s control. Our defense prevents such direct co-location
between user-level processes.
9.2 Defenses against Rowhammer
Kim et al. [14] presented a list of defense strategies, however, most
of their solutions require modifications to the hardware, such as
improved manufacturing, higher refresh rates, and error-correcting
codes. Consequently, these solutions are not practical, as the pro-
duction of improved hardware is costly, and deployment of such
hardware typically takes many years, if implemented at all. Higher
refresh rates for DRAM (e.g., every 16ms instead of 64ms) were also
proposed by manufacturers as rowhammer mitigation as the at-
tacker needs to access rows many times between two refresh events,
in order to destabilize any adjacent memory cells and produce a bit
flip. Refreshing rows more frequently could serve as a stabilizing
factor to prevent attacks. However, Aweke et al. [1] successfully
conducted rowhammer attacks within 16ms. Therefore, higher re-
fresh rates do not represent an effective countermeasure against
rowhammer-based attacks. Moreover, error-correcting codes (ECC)
are able to detect and correct single-bit errors. However, Kim et
al. [14] already demonstrated in their original study that rowham-
mer can induce multiple bit errors, and hence, ECC memory does
not prevent rowhammer-based attacks. Finally, Kim et al. [14] sug-
gested probabilistic adjacent row activation (PARA) to mitigate
rowhammer in the memory controller. The idea is that any access
to a row can trigger an activation of adjacent rows with some con-
figurable probability. Since malicious rows are activated many times
during an attack, the victim row will eventually receive a refresh,
and hence, will be stabilized during the attack. The advantage of
this approach is that is has a low performance overhead, however,
it also requires changes to the memory controller and is therefore
not suited to protect legacy systems, where the hardware cannot
be updated easily. So far, only few software-based defenses against
rowhammer were proposed: first, Aweke et al. [1] proposed ANVIL,
which uses performance counters to detect high cache-eviction
rates, which is a typical effect of an ongoing rowhammer-based
attack. Nonetheless, their defense has several disadvantages, e.g.,
it requires CPU performance counters, and also relies on heuris-
tics, which means that ANVIL suffers from false positives. Second,
CATT [3] provide a deterministic approach that stops rowhammer-
based kernel-privilege escalation attacks. It devise a partitioning
scheme for isolating the kernel memory domain from that of any
user processes. Consequently, an adversary can still induce bit flips,
but no longer force physical co-location to kernel-owned memory.
However, they only demonstrate their isolation for the special case
of two domains, i.e, kernel and user, and partitioning DRAM phys-
ically among a larger number of entities comes with significant
challenges. As we demonstrate in this paper, RIP-RH tackles all of
these challenges and enables physical isolation for user processes.
ZebRAM [15] uses a static approach to isolate memory rows using
guard rows. RIP-RH, in contrast, dynamically manages protection
domains, which allows for better memory utilization.
Other defenses apply the general concept of physical memory
isolation, as introduced by CATT [3], to provide protection for
special scenarios. For instance, “GuardION only enforces that DMA-
based Rowhammer attacks can no longer flip bits in another process
or kernel memory” [34]. ALIS [32] proposes physical memory iso-
lation for network buffers.
10 CONCLUSION
In this paper we present RIP-RH, the first rowhammer defense
that allows physical isolation of processes. Through its DRAM-
aware physical page allocator, it enables the creation of critical
processes on a system, which will be isolated physically in memory
from all other processes. As we demonstrate in our evaluation, RIP-
RH offers a high performance with an overhead of only 3.17% for
standard benchmarks. This shows that software-based defenses
for rowhammer are practical also for a larger number of security
domains.
ACKNOWLEDGMENT
This work has been supported by the German Research Founda-
tion (DFG) as part of projects HWSec, P3 and S2 within the CRC
1119 CROSSING, by the German Federal Ministry of Education
and Research (BMBF) and the Hessen State Ministry for Higher
Education, Research and the Arts (HMWK) within CRISP, by BMBF
within the projects iBlockchain and CloudProtect, and by the Intel
Collaborative Research Institute for Collaborative Autonomous &
Resilient Systems (ICRI-CARS).
REFERENCES
[1] Zelalem Birhanu Aweke, Salessawi Ferede Yitbarek, Rui Qiao, Reetuparna
Das, Matthew Hicks, Yossi Oren, and Todd Austin. 2016. ANVIL: Software-
Based Protection Against Next-Generation Rowhammer Attacks. In Inter-
national Conference on Architectural Support for Programming Languages
and Operating Systems.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand569[2] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2016.
Dedup Est Machina: Memory Deduplication as an Advanced Exploitation
Vector. In IEEE Symposium on Security and Privacy.
[3] Ferdinand Brasser, Lucas Davi, David Gens, Christopher Liebchen, and
Ahmad-Reza Sadeghi. 2017. Can’t touch this: Software-only mitigation
against rowhammer attacks targeting kernel memory. In USENIX Security
Symposium.
[4] Nathan Burow, Scott A. Carr, Stefan Brunthaler, Mathias Payer, Joseph
Nash, Per Larsen, and Michael Franz. 2016. Control-Flow Integrity: Pre-
cision, Security, and Performance. (2016). http://arxiv.org/abs/1602.04056
[5] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per
Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015.
Readactor: Practical Code Randomization Resilient to Memory Disclosure.
In IEEE Symposium on Security and Privacy.
[6] J. Criswell, N. Dautenhahn, and V. Adve. 2014. KCoFI: Complete Control-
Flow Integrity for Commodity Operating System Kernels. In IEEE Sympo-
sium on Security and Privacy.
[7] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer,
Thorsten Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi.
2012. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smart-
phones. In Annual Network and Distributed System Security Symposium.
[8] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. 2018.
Grand Pwning Unit: Accelerating Microarchitectural Attacks with the
GPU. In IEEE Symposium on Security and Privacy.
[9] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger. 2016. Fine-
Grained Control-Flow Integrity for Kernel Software. In IEEE European Sym-
posium on Security and Privacy.
[10] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel Genkin, Jonas Juffin-
ger, Sioli O’Connell, Wolfgang Schoechl, and Yuval Yarom. 2018. Another
flip in the wall of rowhammer defenses. In IEEE Symposium on Security and
Privacy.
[11] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2016. Rowham-
mer.js: A Cache Attack to Induce Hardware Faults from a Website. In Con-
ference on Detection of Intrusions and Malware and Vulnerability Assess-
ment.
[12] IC Insights. 2017. DDR4 Set to Account for Largest Share of DRAM Market
by Architecture. http://icinsights.com/data/articles/documents/969.pdf.
[13] Michael Kerrisk. 2010. The Linux programming interface: a Linux and UNIX
system programming handbook. No Starch Press.
[14] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk
Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu. 2014. Flipping Bits
in Memory Without Accessing Them: An Experimental Study of DRAM
Disturbance Errors. In Annual International Symposium on Computer Ar-
chitecture.
[15] Radhesh Krishnan Konoth, Marco Oliverio, Andrei Tatar, Dennis An-
driesse, Herbert Bos, Cristiano Giuffrida, and Kaveh Razavi. 2018. ZebRAM:
Comprehensive and Compatible Software Protection Against Rowhammer
Attacks. In USENIX Symposium on Operating Systems Design and Implemen-
tation.
[16] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo
Kim, Long Lu, and Wenke Lee. 2015. Preventing Use-after-free with Dan-
gling Pointers Nullification. In Annual Network and Distributed System Se-
curity Symposium.
[17] Zhiqiang Lin, RyanD. Riley, and Dongyan Xu. 2009. Polymorphing Soft-
ware by Randomizing Data Structure Layout. In Conference on Detection of
Intrusions and Malware and Vulnerability Assessment.
[18] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner
Haas, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike
Hamburg. 2018. Meltdown: reading kernel memory from user space. In
USENIX Security Symposium.
[19] Nick Nikiforakis, Steven Van Acker, Wannes Meert, Lieven Desmet, Frank
Piessens, and Wouter Joosen. 2013. Bitsquatting: Exploiting bit-flips for
fun, or profit?. In Proceedings of the 22nd international conference on World
Wide Web.
[20] Gene Novark and Emery D Berger. 2010. DieHarder: securing the heap. In
ACM Conference on Computer and Communications Security.
[21] Kaan Onarlioglu, Leyla Bilge, Andrea Lanzi, Davide Balzarotti, and Engin
Kirda. 2010. G-Free: Defeating Return-Oriented Programming through
Gadget-less Binaries. In Annual Computer Security Applications Confer-
ence.
[22] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and Ste-
fan Mangard. 2016. DRAMA: Exploiting DRAM Addressing for Cross-CPU
Attacks. In USENIX Security Symposium.
[23] Jannik Pewny and Thorsten Holz. 2013. Control-flow Restrictor: Compiler-
based CFI for iOS. In Annual Computer Security Applications Conference.
[24] Rui Qiao and Mark Seaborn. 2016. A New Approach for Rowhammer At-
tacks. In IEEE International Symposium on Hardware Oriented Security and
Trust.
[25] Kaveh Razavi, Ben Gras, Erik Bosman, Bart Preneel, Cristiano Giuffrida,