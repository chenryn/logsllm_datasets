有rax  
rax不行 要求是rax恰好指向当前shellcode
    namespace shellcodeEncodeServer
    {
        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("Server is running ... ");
                IPAddress ip = new IPAddress(new byte[] { 0, 0, 0, 0 });
                TcpListener listener = new TcpListener(ip, 24356);
                listener.Start();         
                Console.WriteLine("Start Listening ...");
                while (true)
                {
                    TcpClient remoteClient = listener.AcceptTcpClient();
                    Console.WriteLine("Client Connected！{0} 
                {
                    string getData = e.Data;
                    if (String.IsNullOrEmpty(getData))
                    {
                        return;
                    }
                    encodeCode = getData;
                });
                p.Start();
                p.BeginOutputReadLine();
                p.PriorityClass = ProcessPriorityClass.High;
            }
            public string GetEncodeCod()
            {
                int count = 0;
                while (String.IsNullOrEmpty(this.encodeCode))
                {
                    Thread.Sleep(50);
                    count++;
                    if (count >= 40)
                    {
                        break;
                    }
                }
                return this.encodeCode;
            }
            ~Processor()
            {
                p.Close();
            }
        }
    }
这个encode工具只能在windows下用，只能开个server让那边连过来再encode，很蠢（
## Reverse
### LuckyStar☆
一堆smc，一堆反调
用ce附上去终于dump下来内存了
base64变表加密加一个随机数的异或，还是通过ce去读栈上加密之后的信息然后还原出这个异或的表
    >>> en = 'ywfHywfHywfHywfHywfHywfHywfHywfHywfHywe='
    >>> de = '71 F6 5F C5 39 7E 24 5C A9 85 FE 2E 4A A1 AF FA B8 E2 D0 56 BE 5A 7A A7 AB C5 39 2E F5 CE 97 70 6D 7F E9 86 90 08 68 38'
    >>> de = de.split(' ')
    >>> de
    ['71', 'F6', '5F', 'C5', '39', '7E', '24', '5C', 'A9', '85', 'FE', '2E', '4A', 'A1', 'AF', 'FA', 'B8', 'E2', 'D0', '56', 'BE', '5A', '7A', 'A7', 'AB', 'C5', '39', '2E', 'F5', 'CE', '97', '70', '6D', '7F', 'E9', '86', '90', '08', '68', '38']
    >>> de_1 = []
    >>> de_1 = ''
    >>> for i in de:
    ...     de_1 += chr(int(i,16))
    ...
    >>> table = []
    >>> for i in xrange(40):
    ...     table.append(ord(de_1[i])^ord(en[i]))
    ...
    >>> table
    [8, 129, 57, 141, 64, 9, 66, 20, 208, 242, 152, 102, 51, 214, 201, 178, 193, 149, 182, 30, 199, 45, 28, 239, 210, 178, 95, 102, 140, 185, 241, 56, 20, 8, 143, 206, 233, 127, 13, 5]
    import ida_bytes
    start = 0x403520
    table = [8, 129, 57, 141, 64, 9, 66, 20, 208, 242, 152, 102, 51, 214, 201, 178, 193, 149, 182, 30, 199, 45, 28, 239, 210, 178, 95, 102, 140, 185, 241, 56, 20, 8, 143, 206, 233, 127, 13, 5]
    res = ''
    for i in xrange(32):
        res += chr(ida_bytes.get_byte(i+start) ^ table[i])
    print res
然后直接解base64即可
    #include "stdafx.h"
    #include 
    #include 
    #include 
    char base64_table[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/";
    char* base64_encode(const char* data, size_t len)
    {
        char *des = (char*)malloc(1 + 4 * len / 3);
        memset(des, 0, 1 + 4 * len / 3);
        size_t index = 0;
        size_t i;
        for (i = 0; i > 2; //first
            size_t index2 = (data[i] % 4) * 16 + (data[i + 1] >> 4); //second
            size_t index3 = (data[i + 1] % 16) * 4 + (data[i + 2] >> 6); //third
            size_t index4 = data[i + 2] % 64;
            des[index++] = base64_table[index1];
            des[index++] = base64_table[index2];
            des[index++] = base64_table[index3];
            des[index++] = base64_table[index4];
        }
        if (len - i == 1)
        {
            size_t index1 = data[i] >> 2;
            size_t index2 = (data[i] % 4) * 16 + (data[i + 1] >> 4); //second
            des[index++] = base64_table[index1];
            des[index++] = base64_table[index2];
            des[index++] = '=';
            des[index++] = '=';
        }
        else if (len - i == 2)
        {
            size_t index1 = data[i] >> 2;
            size_t index2 = (data[i] % 4) * 16 + (data[i + 1] >> 4); //second
            size_t index3 = (data[i + 1] % 16) * 4 + (data[i + 2] >> 6); //third
            des[index++] = base64_table[index1];
            des[index++] = base64_table[index2];
            des[index++] = base64_table[index3];
            des[index++] = '=';
        }
        else
        {
            size_t index1 = data[i] >> 2; //first
            size_t index2 = (data[i] % 4) * 16 + (data[i + 1] >> 4); //second
            size_t index3 = (data[i + 1] % 16) * 4 + (data[i + 2] >> 6); //third
            size_t index4 = data[i + 2] % 64;
            des[index++] = base64_table[index1];
            des[index++] = base64_table[index2];
            des[index++] = base64_table[index3];
            des[index++] = base64_table[index4];
        }
        des[index++] = 0;
        return des;
    }
    char* base64_decode(char *data)
    {
        size_t index = 0;
        size_t len = strlen(data);
        char* des = (char*)malloc(1 + len * 3 / 4);
        memset(des, 0, 1 + len * 3 / 4);
        for (size_t i = 0; i > 4);
            des[index++] = ((index2 % 16) > 2);
            des[index++] = ((index3 % 4) 
    index_table=[320,332, 339, 354, 375, 395, 425, 456, 467, 491, 510, 606, 519, 540, 551, 582, 609, 624, 651, 664, 675, 689, 604, 698, 709, 720, 727, 754, 775, 784, 606, 807,
    838, 988, 845, 868, 883, 911, 934, 947, 959, 976, 991, 1007, 1024, 1099, 1043, 1068, 1083, 1103, 1106, 1168, 1119, 1132, 1149, 1166, 1175, 1182, 1205, 1227,
     1093, 1093, 1238, 1101, 1101, 1172, 1253, 1103]
    import ida_bytes,idaapi
    def my_get_str(ea):
        #print(hex(ea))
        res = ''
        i = 0
        while True:
            tt = ida_bytes.get_byte(ea+i)
            if tt ==0 or tt & 0x80 != 0:
                break
            res += chr(tt)
            i += 1
        return res
    guess_offest = [6480]
    for offest in guess_offest:
        res = ''
        for i in index_table:
            res += my_get_str(i+offest)
            res += '\n'
        print(res+'\n')
感觉这个大概没问题了，都是可见字符。
    notepad.exe
    44646 64094 
    71825 66562 15873 21793 7234 17649 43827 
    2155 74767 35392 
    88216 83920 16270 20151 5268 90693 
    82773 716 27377 44329 49366 65217 
    1653 38790 70247 97233 18347 22117 94686 
    49428 72576 52460 47541 46975 53769 94005 
    83065 72914 
    5137 87544 40301 71583 20370 37968 17478 
    55350 
    40532 10089 
    13332 70643 
    24170 46845 16048 23142 31895 62386 12179 94552 79082 
    19517 52918 91580 38900 89883 
    38412 91537 70 98594 57553 35275 62912 4755 
    16737 27595 21031 43551 64482 
    3550 
    *++-+*+
    *++
    -*+*++-+
    -+++-+
    -+
    +*+
    *+*
    ++-*++
    +-+*+++
    -    *+++-+*
    +++-++-+-    *
    ++*++-+-*
    +*++*+*++
    *+*++
    -*+
    *++-*+
    +
    `
这堆东西有什么用吗。
题出错了，差评差评差评
    notepad.exe
    44646 
    + ( 64094 + ( 
    71825 * ( ( 15873 + 
    ( 21793 * ( 7234 + 
    ( 17649 * ( ( 2155 + ( 74767 
    * ( 35392 + ( 88216 * ( 83920 
    + ( 16270 
    + ( 20151 * ( 5268 + ( 
    90693 * ( 82773 + 
    ( 716 + 
    ( 
    27377 * ( 44329 + ( 
    49366 * ( 
    ( ( 38790 + ( 70247 * ( 97233 
    + ( 18347 + ( 22117 * ( ( 
    ( 72576 + ( ( 
    47541 + ( 46975 + ( 53769 
    * ( 94005 + 
    ( ( 72914 
    + ( 5137 + ( 