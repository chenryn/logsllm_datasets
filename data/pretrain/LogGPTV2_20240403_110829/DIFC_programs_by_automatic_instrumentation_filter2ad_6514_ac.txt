§3.2.2). Note that this deﬁnition of
P is purely conceptual:
programs produced by Swim do not generate fresh processes
at each step of execution.
When a process p takes a step of execution, it may have
further eﬀects on the program state and event trace. These
eﬀects are determined by the template to which p is bound.
The eﬀects are as follows, according to the form of the tem-
plate:• SKIP: p halts execution.
p
chooses
−→
P (PROCVAR).
• PROCVAR: p initializes a fresh process p(cid:48) to execute
• PROCVAR12PROCVAR2:
the template
non-
deterministically to initialize p(cid:48) to execute either
template PROCVAR1 or template PROCVAR2.
• PROCVAR1(cid:57) PROCVAR2: p spawns a fresh process p(cid:48),
which it initializes to execute template PROCVAR1,
and a second fresh process p(cid:48)(cid:48), which it initializes to
execute template PROCVAR2.
• CREATEτ → PROCVAR1: p creates a new tag t, binds
it to the tag identiﬁer τ in the tag namespace of p(cid:48),
and adds t to both the positive and negative capabil-
ities of p(cid:48). Tag t is never bound to another identiﬁer,
so at most one tag created at a given CREATE tem-
plate can ever be bound in the namespace of a process.
However, multiple tags created at a CREATE template
can be bound in the namespaces of multiple processes.
Furthermore, the set of tags created at such a template
over an execution may be unbounded.
• ChangeLabel(L, M, N ) → PROCVAR1: L, M , and N
are sets of tag identiﬁers. p initializes p(cid:48) to execute
PROCVAR1, and attempts to initialize the label, posi-
tive capability, and negative capability of p(cid:48) to the tags
bound in the namespace of p to the identiﬁers in L, M ,
and N , respectively. Each initialization is only allowed
if it satisﬁes the conditions enforced by Flume: (1) the
label of p(cid:48) may be no larger (smaller) than the union
(diﬀerence) of the label of p and the positive (nega-
tive) capability of p, and (2) the positive (negative)
capability of p(cid:48) may be no larger than the union of the
positive (negative) capability of p and capabilities for
all tags created at p(cid:48).
• ! q → PROCVAR1: p attempts to send information to
process q. For simplicity, we assume that a process
may attempt to send information to any process, and
make a similar assumption when p attempts to receive
information. p generates an event p!q only if it suc-
cessfully sends information; that is, the label of p is
contained in the label of q. Process p then initializes
p(cid:48) to execute template PROCVAR1.
• ? q → PROCVAR1: p attempts to receive information
from q. p generates an event p?q only if it successfully
receives information; that is, the label of p contains
the label of q. Process p then initializes p(cid:48) to execute
template PROCVAR1.
−→
−→
P ) denotes the set of all traces of events that program
P ) is given in
Tr(
−→
P may generate. A formal deﬁnition of Tr(
[9, App. E].
3.2 DIFC Policies
Policies give a formal condition for when one program is
Syntax of DIFC Policies
a correct instrumentation of another.
3.2.1
A DIFC policy F = (V,S,R) contains two sets, S and
R, of ﬂow assertions deﬁned over a set V of template
variables. S is a set of secrecy assertions, each of the
form Secrecy(Source, Sink, Declass, Anc), with Source, Sink,
Anc ∈ V and Declass ⊆ V. R is a set of protection as-
sertions, each of the form Prot(Source, Sink, Anc), with
Source, Sink, Anc ∈ V.
3.2.2
The semantics of a policy F = (V,S,R) is deﬁned by
−→
P ,F), which deﬁnes when a
−→
−→
a satisfaction relation
P (cid:48) is a correct instrumentation of
−→
program
P according to
F. Program
P (cid:48) must satisfy three instrumentation condi-
−→
−→
P ,R)),
P (cid:48) |=T (
−→
tions: secrecy (
P ,R)), which are deﬁned below.
and containment (
−→
P (cid:48) |=S S), transparency (
Semantics of DIFC Policies
−→
P (cid:48) |=C (
−→
P (cid:48) |= (
If no execution of
Secrecy.
−→
P (cid:48) leaks information from a source to
−→
a sink as deﬁned by S, then we say that
P (cid:48) satisﬁes the
secrecy instrumentation condition induced by S. To state
this condition formally, we ﬁrst deﬁne a set of formulas that
describe properties of an execution trace T . For process p
and template P , let p ∈ P denote that p executes P in
its next step of execution. Let spawnedT (a, p) hold when
process a spawns process p in execution trace T :
spawnedT (a, p) ≡ ∃i. T [i] = SPAWN(a, p)
Let IsAnc(a, p, T ) hold when process a is an ancestor of p
under the spawnedT relation:
IsAnc(a, p, T ) ≡ TC(spawnedT )(a, p)
where TC denotes transitive closure. Let ShareAnc(p, q, Anc,
289T ) hold when processes p and q share an ancestor in Anc:
ShareAnc(p, q, Anc, T ) ≡ ∃a ∈ Anc.
IsAnc(a, p, T ) ∧ IsAnc(a, q, T )
Finally, let InfFlowD,T (p, q) hold when information is sent
and received directly from process p to process q in execution
trace T , where neither p or q execute a template in D:
InfFlowD,T (p, q) ≡ ∃i < j. ((T [i] = p!q ∧ T [j] = q?p)
∨ spawnedT (p, q)) ∧ p, q (cid:54)∈ D
−→
P (cid:48) satisﬁes the secrecy condition induced by Secrecy(
−→
Source, Sink, Declass, Anc) ∈ S if for every execution of
P (cid:48),
a process p ∈ Source only sends information to a process
q ∈ Sink with the information ﬂow avoiding all processes in
−→
Declass if the endpoints p and q share an ancestor process
a ∈ Anc. Formally, for every trace T ∈ Tr(
P (cid:48)), and every
p ∈ Source and q ∈ Sink, the following must hold:
TC(InfFlowDeclass,T )(p, q) =⇒ ShareAnc(p, q, Anc, T )
If the formula holds for every secrecy assertion in S, then
−→
P (cid:48) satisﬁes the secrecy instrumentation condition induced
by S, denoted by
−→
P (cid:48) |=S S.
If an execution of
Transparency over protected ﬂows.
−→
P performs only information ﬂows that
are described by the set of protection assertions R, then
−→
P (cid:48). We call this condi-
−→
this execution must be possible in
tion transparency. Formally, let T ∈ Tr(
P ) be such that
ProtTr(T,R) holds, where
ProtTr(T,R) ≡ ∀p,q.
InfFlow∅,T (p, q) =⇒
∃Prot(Source, Sink, Anc) ∈ R.
p ∈ Source ∧ q ∈ Sink
∧ShareAnc(p, q, Anc)
−→
If for every such T , it is the case that T ∈ Tr(
P (cid:48)
satisﬁes the transparency condition induced by P and R,
denoted by
−→
P (cid:48) |=T (P,R).
−→
P (cid:48)), then
Finally, an instrumented program
Trace containment for protected ﬂows.
−→
P (cid:48) should not exhibit
any behaviors solely over ﬂows protected by R that are not
possible in the input program P . We call this condition trace
containment. Formally, let T ∈ Tr(
If ProtTr(T,R)
holds, then it must be the case that T ∈ Tr(
−→
If this
holds for every trace of T ∈ Tr(
P (cid:48) satisﬁes the
−→
P and R, denoted by
−→
containment condition induced by
P (cid:48) |=C (
−→
P (cid:48)), then
−→
P ,R).
−→
P (cid:48)).
−→
P ).
Formal Problem Statement.
The goal of the Swim is thus to take as input a program
−→
P , a DIFC policy F = (V,S,R), and produce a program
−→
−→
−→
P (cid:48) |=C (
P ,R).
P (cid:48) such that
−→
P (cid:48) satisﬁes all three conditions, then it is a correct instru-
−→
−→
If
P ,F).
P (cid:48) |= (
mentation of
−→
P (cid:48) |=S S,
−→
P according to F, denoted by
−→
P ,R), and
−→
P (cid:48) |=T (
3.3 From Programs and Policies to
Instrumentation Constraints
−→
P (cid:48) such that
−→
P and policy F. To pro-
Swim takes as input a program
−→
−→
P ,F), Swim generates
P (cid:48) |= (
duce a program
−→
a system of set constraints such that a solution to the sys-
P (cid:48). The constraints generated ensure
−→
−→
tem corresponds to
P (cid:48) only manipulates labels in
P : (1)
two key properties of
−→
a manner allowed by the Flume reference monitor, and (2)
P (cid:48)
the values of labels of all processes in all executions of
ensure that F is satisﬁed.
3.3.1 Constraint Variables and Their Domain
The constraint system is deﬁned over a set of variables,
where each variable describes how a process should manipu-
late its label and capabilities when it executes a given tem-
plate. One natural candidate for the domain of such vari-
ables is a ﬁnite set of atomic elements, where each element
corresponds to a tag created by the program. However, if
Swim were to use such a domain, then it could not produce
a program that may create an unbounded set of tags over
its execution. Swim thus could not handle many real-world
programs and policies of interest, such as the example de-
scribed in §2. The domain of the constraint variables is thus
a ﬁnite set of atomic elements where each element corre-
sponds to a tag identiﬁer bound at a template CREATEτ in
the instrumented program.
−→
P , Swim gener-
ates four constraint variables: labX , posX , negX , createsX .
−→
Let τ be a tag identiﬁer.
in a constraint solution,
τ ∈ createsX , then in
P (cid:48), the template P bound to X is
rewritten to CREATEτ → P . If τ ∈ labX , then the label of
−→
process p ∈ X executing
P (cid:48) contains a tag bound to τ . The
analogous connection holds for variable posX and the posi-
tive capability of p, and the variable negX and the negative
capability of p.
For each CSPDIFC template variable X in
If
Exa. 6. The constraint variables used by Swim are illus-
trated in Exa. 5. Consider the templates A5 and W . The
solution in Exa. 5 deﬁnes createsA5 = {τ}. Thus Swim
rewrites template A5 so that when a process executes A5, it
creates a tag and binds the tag to identiﬁer τ . The solu-
tion deﬁnes labW = {τ}, posW = negW = ∅. Thus in the
instrumented program, the label of each Worker process con-
tains a tag bound to τ , but each Worker process cannot add
or remove such a tag from its label.
3.3.2 Generating Semantic Constraints
Swim must generate a system of constraints such that any
solution to the system results in DIFC code that performs
actions allowed by Flume. To do so, Swim constrains how a
process’s labels and capabilities may change over each step
of its execution.
For each equation that deﬁnes the CSPDIFC program, Swim
290generates the set of constraints SemCtrs deﬁned as follows:
SemCtrs(X = SKIP) = ∅
SemCtrs(X = Y ) = StepCtrs(X, Y )
SemCtrs(X = EVENT → Y ) = StepCtrs(X, Y )
SemCtrs(X = Y 2 Z) = StepCtrs(X, Y )
SemCtrs(X = Y (cid:57) Z) = StepCtrs(X, Y )
∪ StepCtrs(X, Z)
∪ StepCtrs(X, Z)
SemCtrs is deﬁned by a function StepCtrs, which takes as
input two template variables X and Y . StepCtrs generates a
set of constraints that encode the relationship between the
labels of a process p ∈ X and the labels of process p(cid:48) ∈ Y
that p spawns in a step of execution. One set of constraints
in StepCtrs encodes that if a tag is bound to an identiﬁer τ
and is in the label of p(cid:48), then the tag must be in the label of
p, or it must be in the positive capability of p(cid:48). Formally:
∀τ.τ ∈ labY =⇒ τ ∈ labX ∨ τ ∈ posY
Equivalently:
labY ⊆ labX ∪ posY
Additionally, if a tag is bound to τ in the label of p and is
not in the negative capability of p(cid:48), then the tag must be in
the label of p(cid:48). Formally:
∀τ.τ ∈ labX ∧ τ (cid:54)∈ negY =⇒ τ ∈ labY
Equivalently:
labY ⊇ labX − negY
The other constraints in StepCtrs encode that the capabili-
ties of p(cid:48) may only grow by the capabilities of tags that p(cid:48)
creates. If p(cid:48) has a positive (negative) capability for a tag
bound to an identiﬁer τ , then either p must have the positive
(negative) capability for the tag, or the tag must be created
and bound to τ at p(cid:48). Formally:
∀τ.τ ∈ posY =⇒ τ ∈ posX ∨ τ ∈ createsY
∧ τ ∈ negY =⇒ τ ∈ negX ∨ τ ∈ createsY