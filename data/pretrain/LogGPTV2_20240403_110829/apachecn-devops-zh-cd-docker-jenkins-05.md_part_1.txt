# 五、自动化验收测试
我们已经配置了持续交付流程的提交阶段，现在是时候解决验收测试阶段了，这通常是最具挑战性的部分。通过逐步扩展管道，我们将看到一个良好的验收测试自动化的不同方面。
本章包括以下几点:
*   介绍验收测试过程及其难点
*   解释工件存储库的概念
*   在 Docker 集线器上创建 Docker 注册表
*   安装和保护私有 Docker 注册表
*   在 Jenkins 管道中实施验收测试
*   Docker 作曲介绍与探索
*   在验收测试过程中使用 Docker 编写
*   与用户一起编写验收测试
# 引入验收测试
验收测试是为了确定业务需求或合同是否得到满足而进行的测试。从用户的角度来看，它涉及对一个完整系统的黑盒测试，它的积极结果应该意味着软件交付的接受。有时，也称为 **UAT** ( **用户验收测试**)、最终用户测试或 beta 测试，是软件遇到*现实世界*受众时开发过程的一个阶段。
许多项目依赖于质量保证人员或用户执行的手动步骤来验证功能性和非功能性需求，但是，将它们作为编程的可重复操作来运行更合理。
然而，自动化验收测试由于其特殊性而被认为是困难的:
*   **面向用户**:需要和一个用户写在一起，需要在技术和非技术两个世界之间进行理解。
*   **依赖项集成**:被测试的应用应该与其依赖项一起运行，以检查系统整体是否正常工作。
*   **环境标识**:分段(测试)和生产环境应该相同，以确保在生产环境中运行时，应用也能按预期运行。
*   **应用标识**:应用只能构建一次，同一二进制应该转移到生产中。这保证了测试和发布之间的代码没有变化，并消除了不同构建环境的风险。
*   **相关性和后果**:如果验收测试通过，从用户角度来看，应该很清楚应用已经准备好发布了。
我们将在本章的不同部分讨论所有这些困难。应用标识可以通过只构建一次 Docker 映像并使用 Docker 注册表进行存储和版本控制来实现。Docker Compose 有助于依赖项集成，提供了一种构建一组协同工作的容器化应用的方法。以面向用户的方式创建测试在*编写验收测试*一节中进行了解释，环境标识由 Docker 工具本身解决，也可以通过下一章中描述的其他工具进行改进。关于相关性和后果，唯一好的答案是记住验收测试必须总是高质量的。
Acceptance testing can have multiple meanings; in this book, we treat acceptance testing as a complete integration test from a user perspective, excluding nonfunctional testing, such as performance, load, and recovery.
# Docker 注册表
Docker 注册表是 Docker 映像的存储。确切地说，它是一个无状态的服务器应用，允许发布(推送)映像，并在需要时检索(拉取)映像。我们已经看到了一个运行正式 Docker 映像时的注册表示例，例如`jenkins`。我们从 Docker Hub 中提取了这些映像，Docker Hub 是一个官方的基于云的 Docker 注册表。拥有一个单独的服务器来存储、加载和搜索软件包是一个更通用的概念，称为软件仓库，或者更通用的称为工件仓库。让我们仔细看看这个想法。
# 工件存储库
虽然源代码管理存储源代码，但工件存储库专用于存储软件二进制工件，例如编译的库或组件，稍后用于构建完整的应用。为什么我们需要使用单独的工具将二进制文件存储在单独的服务器上？
*   **文件大小**:工件文件可以很大，所以系统需要针对其下载和上传进行优化。
*   **版本**:每个上传的神器都需要有一个便于浏览和使用的版本。然而，并不是所有的版本都必须永久保存；例如，如果检测到一个 bug，我们可能对相关的工件不感兴趣，并将其删除。
*   **版本映射**:每个工件应该恰好指向源代码控制的一个版本，而且二进制创建过程应该是可重复的。
*   **包**:工件以编译压缩的形式存储，这样就不需要重复这些耗时的步骤。
*   **访问控制**:可以对用户进行不同的源代码和工件二进制访问限制。
*   **客户端**:工件存储库的用户可以是团队或组织之外的开发人员，他们希望通过库的公共 API 来使用库。
*   **用例**:工件二进制文件用于保证在每个环境中部署完全相同的构建版本，以便在出现故障时简化回滚过程。
The most popular artifact repositories are JFrog Artifactory and Sonatype Nexus.
工件存储库在持续交付过程中扮演着特殊的角色，因为它保证了在所有管道步骤中使用相同的二进制文件。
让我们看看下图，展示它是如何工作的:
![](img/60334691-bdc8-4953-9758-40f5983827d8.png)
**开发人员**将变更推送到**源代码库**，这触发了管道构建。作为**提交阶段**的最后一步，一个二进制文件被创建并存储在工件库中。之后，在交付过程的所有其他阶段，相同的二进制文件被提取和使用。
The built binary is often called the **release candidate** and the process of moving binary to the next stage is called **promotion**.
取决于编程语言和技术，二进制格式可能会有所不同。
例如，在 Java 的情况下，通常存储 JAR 文件，在 Ruby 的情况下，存储 gem 文件。我们使用 Docker，所以我们将 Docker 映像存储为工件，存储 Docker 映像的工具称为 Docker 注册表。
Some teams maintain two repositories at the same time, artifact repository for JAR files and Docker registry for Docker images. While it may be useful during the first phase of the Docker introduction, there is no good reason to maintain both forever.
# 正在安装 Docker 注册表
首先，我们需要安装一个 Docker 注册表。有许多选项可用，但其中两个比其他选项更常见，基于云的 Docker Hub 注册表和您自己的私有 Docker 注册表。让我们深入研究一下。
# Docker 集线器
Docker Hub 是一种基于云的服务，它提供 Docker 注册表和其他功能，例如构建映像、测试映像以及直接从代码存储库中提取代码。Docker Hub 是云托管的，所以它实际上不需要任何安装过程。您只需要创建一个 Docker Hub 帐户:
1.  在浏览器中打开 [https://hub.docker.com/](https://hub.docker.com/) 。
2.  填写密码、电子邮件地址和 Docker ID。
3.  收到电子邮件并单击激活链接后，帐户就创建好了。
Docker Hub 肯定是最简单的开始选项，它允许存储私有和公共映像。
# 私人 Docker 注册处
Docker 中心可能不总是可以接受的。它对企业来说并不是免费的，更重要的是，许多公司都有政策不将他们的软件存储在自己的网络之外。在这种情况下，唯一的选择是安装一个私有的 Docker 注册表。
Docker 注册表安装过程快速简单，但是，要使其安全并在公共场合可用，需要设置访问限制和域证书。这就是为什么我们将这一部分分为三个部分:
*   安装 Docker 注册表应用
*   添加域证书
*   添加访问限制
# 安装 Docker 注册表应用
Docker 注册表可以作为 Docker 映像使用。为此，我们可以运行以下命令:
```
$ docker run -d -p 5000:5000 --restart=always --name registry registry:2
```
By default, the registry data is stored as a docker volume in the default host filesystem's directory. To change it, you can add `-v :/var/lib/registry`. Another alternative is to use a volume container.
该命令启动注册表，并使其可通过端口 5000 访问。`registry`容器从注册表映像(版本 2)启动。`--restart=always`选项使容器在关闭时自动重启。
Consider setting up a load balancer and starting a few Docker registry containers in case of a large number of users.
# 添加域证书
如果注册表在本地主机上运行，那么一切正常，不需要其他安装步骤。然而，在大多数情况下，我们希望有一个专门的服务器用于注册，以便映像可以广泛使用。在这种情况下，Docker 要求使用 SSL/TLS 保护注册表。该过程与公共 web 服务器配置非常相似，同样，强烈建议证书由 CA(证书颁发机构)签名。如果获取 CA 签署的证书不是一个选项，那么我们可以自行签署证书或使用`--insecure-registry`标志。
You can read about creating and using self-signed certificates at [https://docs.docker.com/registry/insecure/#using-self-signed-certificates](https://docs.docker.com/registry/insecure/#using-self-signed-certificates).
有了 CA 签名或自签名的证书，我们可以将`domain.crt`和`domain.key`移动到`certs`目录并启动注册表。
```
$ docker run -d -p 5000:5000 --restart=always --name registry -v `pwd`/certs:/certs -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key registry:2
```
In case of a self-signed certificate, clients have to explicitly trust the certificate. In order to do this, they can copy the `domain.crt` file to `/etc/docker/certs.d/:5000/ca.crt`.
不建议使用`--insecure-registry`标志，因为它根本不提供安全性。
# 添加访问限制
除非我们在安全的专用网络中使用注册表，否则我们应该配置身份验证。
最简单的方法是使用`registry`映像中的`htpasswd`工具创建一个带有密码的用户:
```
$ mkdir auth
$ docker run --entrypoint htpasswd registry:2 -Bbn   > auth/passwords
```
该命令运行`htpasswd`工具创建`auth/passwords`文件(内部有一个用户)。然后，我们可以在该用户被授权访问注册表的情况下运行注册表:
```
$ docker run -d -p 5000:5000 --restart=always --name registry -v `pwd`/auth:/auth -e "REGISTRY_AUTH=htpasswd" -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/passwords -v `pwd`/certs:/certs -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key registry:2
```
该命令除了设置证书之外，还创建了仅限于`auth/passwords`文件中指定的用户的访问限制。
因此，在使用注册表之前，客户端需要指定用户名和密码。
Access restriction doesn't work in the case of the `--insecure-registry` flag.
# 其他 Docker 注册表
当涉及到基于 Docker 的工件存储库时，Docker Hub 和私有注册中心并不是唯一的可能性。
其他选项如下:
*   **通用存储库**:广泛使用的通用存储库，比如 JFrog Artifactory 或者 Sonatype Nexus，都实现了 Docker 注册表 API。它们的优点是一个服务器可以存储 Docker 映像和其他工件(例如，JAR 文件)。这些系统也是成熟的，并提供企业集成。
*   **基于云的注册中心** : Docker Hub 并不是唯一的云提供商。大多数面向云的服务都在云中提供 Docker 注册中心，例如谷歌云或 AWS。
*   **自定义注册表**:Docker 注册表 API 是开放的，所以可以实现自定义解决方案。此外，映像可以导出为文件，因此简单地将映像存储为文件是可行的。
# 使用 Docker 注册表
配置注册表后，我们可以通过三个步骤展示如何使用它:
*   建立形象
*   将映像推送到注册表
*   从注册表中提取映像
# 建立形象
我们用[第二章](02.html)、*介绍 Docker* 的例子，在安装了 Ubuntu 和 Python 解释器的情况下构建一个镜像。在新目录中，我们需要创建一个 Dockerfile:
```
FROM ubuntu:16.04
RUN apt-get update && \
    apt-get install -y python
```
现在，我们可以构建映像:
```
$ docker build -t ubuntu_with_python .
```
# 推送映像
为了推送创建的映像，我们需要根据命名约定对其进行标记:
```
/:
```
“`registry_address`”可以是:
*   Docker 集线器情况下的用户名
*   带有专用注册表端口的域名或 IP 地址(例如，`localhost:5000`)
In most cases, `` is in the form of image/application version.
让我们标记映像以使用 Docker Hub:
```
$ docker tag ubuntu_with_python leszko/ubuntu_with_python:1
```
We could have also tagged the image in the `build` command: `"docker`
`build -t leszko/ubuntu_with_python:1 . "`.
如果存储库配置了访问限制，我们需要首先授权它:
```
$ docker login --username  --password 
```
It's possible to use the `docker login` command without parameters and Docker would ask interactively for the username and password.
现在，我们可以使用`push`命令将映像存储在注册表中:
```
$ docker push leszko/ubuntu_with_python:1
```
请注意，不需要指定注册表地址，因为 Docker 使用命名约定来解析它。映像被存储，我们可以使用在[https://hub.docker.com](https://hub.docker.com)提供的 Docker Hub 网络界面进行检查。
# 拉映像
为了演示注册表是如何工作的，我们可以在本地删除映像并从注册表中检索它:
```
$ docker rmi ubuntu_with_python leszko/ubuntu_with_python:1
```
我们可以看到映像已经使用`docker images`命令移除。然后，让我们从注册表中检索映像:
```
$ docker pull leszko/ubuntu_with_python:1
```
If you use the free Docker Hub account, you may need to change the `ubuntu_with_python` repository to public before pulling it.
我们可以通过`docker images`命令确认映像恢复。
当我们配置好注册中心并了解它如何工作时，我们就可以看到如何在持续交付管道中使用它并构建验收测试阶段。
# 管道验收测试
我们已经理解了验收测试背后的思想，并且知道如何配置 Docker 注册表，因此我们已经准备好在 Jenkins 管道中首次实现它。
让我们看一下展示我们将使用的流程的图:
![](img/0a20aa8e-7116-4a9b-97ef-d619265b0725.png)
过程如下:
1.  开发人员将代码更改推送到 GitHub。
2.  Jenkins 检测变更，触发构建，并检查当前代码。
3.  Jenkins 执行提交阶段并构建 Docker 映像。
4.  Jenkins 将映像推送到 Docker 注册表。
5.  Jenkins 在登台环境中运行 Docker 容器。
6.  暂存 Docker 主机需要从 Docker 注册表中提取映像。
7.  Jenkins 针对在试运行环境中运行的应用运行验收测试套件。
For the sake of simplicity, we will run the Docker container locally (and not on a separate staging server). In order to run it remotely, we need to use the `-H` option or to configure the `DOCKER_HOST` environment variable. We will cover this part in the next chapter.
让我们继续上一章中开始的管道，并增加三个阶段:
*   `Docker build`
*   `Docker push`
*   `Acceptance test`
请记住，您需要将 Docker 工具安装在 Jenkins executor(代理从机或主机，在无从机配置的情况下)上，以便它能够构建 Docker 映像。