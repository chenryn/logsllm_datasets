   do_data_ex(ea, FF_STRU, sz, idx); 
MakeTbyte
//macro, see MakeData
MakeUnkn
do_unknown(ea, flags);
MakeUnknown
do_unknown_range(ea, size, flags);
MakeVar
doVar(ea);
MakeWord
//macro, see MakeData
MarkPosition
 curloc  loc;
loc.ea = ea; loc.lnnum = lnnum; loc.x = x; loc.y = y;
loc.mark(slot, NULL, comment); 
MaxEA
//macro, see GetLongPrm
Message
msg(format, ...);
MinEA
//macro, see GetLongPrm
MoveSegm
return move_segm(get_seg(ea), to, flags);
Name
return qstrdup(get_name(-1, ea, buf, sizeof(buf)));
NameEx
return qstrdup(get_name(from, ea, buf, sizeof(buf)));
NextAddr
return nextaddr(ea);
NextFchunk
return funcs->getn_area(funcs->get_next_area(ea))->startEA;
NextFuncFchunk
 func_tail_iterator_t  fti(get_func(funcea), tailea);
return fti.next() ? fti.chunk().startEA : -1; 
NextFunction
return get_next_func(ea)->startEA;
NextHead
return next_head(ea, maxea);
NextNotTail
return next_not_tail(ea);
NextSeg
int n = segs.get_next_area(ea);
return getnseg (n)->startEA; 
OpAlt
set_forced_operand(ea, n, str);
OpBinary
op_bin(ea, n);
OpChr
op_chr(ea, n);
OpDecimal
op_dec(ea, n);
OpEnumEx
op_enum(ea, n, enumid, serial);
OpFloat
op_flt(ea, n);
OpHex
op_hex(ea, n);
OpHigh
return op_offset(ea, n, REF_HIGH16, target);
OpNot
toggle_bnot(ea, n);
OpNumber
op_num(ea, n);
OpOctal
op_oct(ea, n);
OpOff
if (base != 0xFFFFFFFF) set_offset(ea, n, base);
else noType(ea, n); 
OpOffEx
op_offset(ea, n, reftype, target, base, tdelta);
OpSeg
op_seg(ea, n);
OpSign
toggle_sign(ea, n);
OpStkvar
op_stkvar(ea, n);
OpStroffEx
op_stroff(ea, n, &strid, 1, delta);
ParseType
 qstring in(input);
if (in.last() != ';') in += ';';
flags |= PT_TYP;
if (flags & PT_NDC) flags |= PT_SIL;
else flags &= ~PT_SIL;
flags &= ~PT_NDC;
qstring name, type, fields;
parse_decl(idati, in.c_str(), &name, &type, &fields, flags);
internal_build_idc_typeinfo(&result, &type, &fields); 
ParseTypes
int hti_flags = (flags & 0x70) 
PatchByte
if (qthread_same(idc_debthread))
PatchDbgByte
   dbg->write_memory(ea, &value, 1);
else
   put_dbg_byte(ea, value); 
PatchDword
patch_long(ea, value);
PatchWord
patch_word(ea, value);
PauseProcess
suspend_process();
PopXML
pop_xml();
PrevAddr
return prevaddr(ea);
PrevFchunk
return get_prev_fchunk(ea)->startEA;
PrevFunction
return get_prev_func(ea)->startEA;
PrevHead
return prev_head(ea, minea);
PrevNotTail
return prev_not_tail(ea);
ProcessUiAction
return process_ui_action(name, flags);
PushXML
push_xml(path);
Qword
return get_qword(ea);
RebaseProgram
return rebase_program(delta, flags);
RecalcSpd
return recalc_spd(cur_ea);
Refresh
refresh_idaview_anyway();
RefreshDebuggerMemory
 invalidate_dbgmem_config();
invalidate_dbgmem_contents(BADADDR, -1);
if (dbg && dbg->stopped_at_debug_event)
   dbg->stopped_at_debug_event(true); 
RefreshLists
callui(ui_list);
RemoveFchunk
remove_func_tail(get_func(funcea), tailea);
RenameArray
qsnprintf(buf, sizeof(buf), "$ idc_array %s", name);
netnode n(id).rename(newname); 
RenameEntryPoint