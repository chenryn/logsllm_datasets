skS, bi, ci
Server 2
skT , di
let sid = hash((cid:104)gai, gbi, gaibi(cid:105))
gbi, pk(skS), sign(sid, skS)
enc(sign(sid, skP ), k)
let k=gaibi
Successful login of the user on Server 1
gci
let sid2 = hash((cid:104)gci, gdi, gcidi(cid:105))
enc(sid2, k)
gdi, pk(skT ), sign(sid2, skT )
let k2 = gcidi
enc(sign((cid:104)sid2, “f orwarded”(cid:105), skP ), k) enc(sign((cid:104)sid2, “f orwarded”(cid:105), skP ), k2)
Figure 6: SSH with Forwarding Agent
is forwarding agent: once a user u is logged on a server S, they may, from S, perform another
login on another server T . As S does not have access to the signing key of u, it forwards
a signature request to u’s platform using the secure SSH channel between u and S. This
represents a challenge for compositional proofs: we compose a ﬁrst key exchange with another
one, the second one using a signature key already used in the ﬁrst.
We provide the decomposition of the security proof of SSH composed with one (modiﬁed)
forwarding agent. We use multiple times in sequence our composition Theorems, that allow us
to further simplify the required indistinguishability proofs. The corresponding indistinguisha-
bility proofs are performed in Appendix D and Appendix E.
There is a known weakness in this protocol: any privileged user on S can use the agents
of any other user as a signing oracle. Thus, in order to be able to prove the security of the
protocol, we only consider the case where there is no such privileged user. Figure 6 presents an
example of a login followed by a login using the forwarding agent. For simplicity, we abstract
away some messages that are not relevant to the security of the protocol.
In the current speciﬁcation of the forwarding agent, it is impossible for a server to know
if the received signature was completed locally by the user’s platform, or remotely through
the forwarding agent. As the two behaviors are diﬀerent in term of trust assumptions, we
claim that they should be distinguishable by a server. For instance, a server should be able
to reject signatures performed by a forwarded agent, because intermediate servers are not
trusted. To this end, we assume that the signatures performed by the agent are (possibly
implicitly) tagged in a way that distinguishes between their use in diﬀerent parts of the
protocol. This assumption also allows for domain separation between the two key exchanges,
and thus simpliﬁes the proof.
We consider a scenario in which there is an unbounded number of sessions of SSH, each with
one (modiﬁed) forwarding agent, used to provide a secure channel for a protocol P . Thanks to
multiple applications of Theorems 2 and 4, we are able to break the proof of this SSH scenario
into small ones, that are very close to the proof of a simple Diﬃe-Hellman key exchange. This
assumes the decisional Diﬃe-Hellman (DDH) hypothesis for the group, EUF-CMA for the
42
Pi :=
out(gai);
in((cid:104)xB, pk(skS), sign(cid:105))
let k = xai
let sid = hash((cid:104)gai, xB, k(cid:105)) in
if verify(sign, pk(skS)) = sid then
B in
out(enc(sign(sid, skP ), k));
_
P .
Si :=
A in
in(xA);
let k = xbi
let sid = hash((cid:104)xA, gbi, k(cid:105)) in
out((cid:104)gbi, pk(skS), sign(sid, skS)(cid:105))
in(enc(xsign, k))
if verify(xsign, pk(skP )) = sid then
_
S.
SSH := (cid:107)i(Pi[0](cid:107)Si[0])
Figure 7: Basic SSH Key Exchange
signature scheme and that the encryption must ensure integrity of the cyphertexts (this last
assumption is only required for the forwarded key exchange, where a signature is performed
over an encrypted channel). P also has to satisfy the conditions of Section 8.1. In particular,
it must be secure w.r.t. an attacker that has access to a hash that includes the exchanged
secret key, since SSH produces such a hash. Note that the scenario includes multiple sessions,
but only one forwarding. The extension would require an induction to prove in our framework
the security for any number of chained forwardings.
9.1 The SSH Protocol
The basic SSH key exchange is presented in Figure 7, with possible continuations at the end
denoted by _P and _S. In this Section, we use a strong notion of pattern matching, where
for instance in(enc(xsign, k)) is a syntactic sugar for in(x); let xsign = dec(x, k) in _.
As it is always the case for key exchanges that contain a key conﬁrmation, the indistin-
guishability of the derived key is not preserved through the protocol. The diﬃculty of SSH
is moreover that once a user has established a secure connection to a server, they can from
this server establish a secure connection to another server, while using the secure channel
previously established to obtain the user credentials. We provide in Figure 8 a model of the
SSH with forwarding of agent (reusing the deﬁnitions of P and S from Figure 7). After a
session of P terminates successfully, a F orwardAgent is started on the computer.
It can
receive on the secret channel a signing request and perform the signature of it. In parallel,
after the completion of a session of S, a distant session of P that runs on the same machine as
S can be initiated by P Distant. It will request on the previously established secret channel
the signature of the corresponding sid. Finally, as the forwarding can be chained multiple
time, at the end of a successful P Distant, a F orwardServer is set up. It accepts to receive a
signing request on the new secret channel of P Distant, forwards the request on the old secret
channel, gets the signature and ﬁnally forwards it.
The forwarding agent implies a diﬃcult composition problem: we sequentially compose
a basic SSH exchange with a second one that uses the derived key and the same long term
secret keys. Thus, to be able to prove the security of SSH with forwarding agent, we must be
able to handle key conﬁrmations and composition with shared long term secrets.
43
P Distanti(oldk) :=
SF orwardi :=
A in
in(xA);
let k = xbi
let sid = hash((cid:104)xA, gbi, k(cid:105)) in
out((cid:104)gbi, pk(skS), sign(sid, skS)(cid:105))
in(enc(sign, k))
if verify(sign, pk(skP )) = (cid:104)sid, “fwd ”(cid:105) then
_
SF
out(gai);
in((cid:104)xB, pk(skS), sign(cid:105))
let k = xai
let sid = hash((cid:104)gai, xB, kP(cid:105)) in
if verify(sign, pk(skS)) = sid then
B in
out(enc(sid, oldk))
in(enc(sign, oldk))
out(enc(sign, k))
_
P D.
F orwardAgent(k) :=
in(enc(sid, k))
out(enc(sign((cid:104)sid, “fwd ”(cid:105), skP ), k))
SSHF orward := (cid:107)i(Pi[F orwardAgent(k)](cid:107)SF orwardi(cid:107)Si[P Distanti(k)])
Figure 8: SSH Key Exchange with Forwarding Agent
9.2 Security of SSH
We show how to prove the Conditions of Section 8 to the basic SSH protocol (without forward-
ing agent). We provide in Figure 9 the decomposition for key exchanges with key conﬁrmation
corresponding to the SSH protocol. We directly specify that P and S may only relate to each
other by hard-coding the expected public keys in them. This is the classical behaviour of SSH
where a user wants to login on a speciﬁc server, and the public key of the user was registered
previously on the server.
For some abstract continuation RP (x)(cid:107)RS(x) and its idealized version QP (x)(cid:107)QS(x), our
goal would be to prove that
P 0
i
:=
out(gai);
in(xB)
let k = xai
0.
i (xB, k) :=
in((cid:104)pk(skS), sign(cid:105))
B in
P 1
let sid = hash((cid:104)ga, xB, k(cid:105)) in
if verify(sign, pk(skS)) = sid then
out(enc(sign(sid, skP ), k))
_P.
S0
i :=
in(xA);
let k = xbi
let sid = hash((cid:104)xA, gbi, k(cid:105)) in
A in
out(gbi)
S1
i (sid, k) :=
out((cid:104)pk(skS), gbi, sign(sid, skS)(cid:105))
in(enc(sign, k))
if verify(sign, pk(skP )) = sid then
_S.
Figure 9: Divided SSH Key Exchange
44
i (xB, k)[RP (k)](cid:107)S0
i ; S1
i (sid, k)[RS(k)] ∼= P 0
i (xB, k)[QP (k)](cid:107)S0
i ; P 1
P 0
Without specifying the continuation, a ﬁrst step toward the security of the basic SSH key
exchange is to obtain Conditions K-1 and K-3 of Section 8. Recall that if a key exchange
satisﬁes those Conditions, it can be seen as a secure key exchange in the classical sense as it
can be composed with any continuation that do not share any long term secrets. The proofs
only need to ne adapted when it is not the case.
i (sid, k)[QS(k)]
i ; P 1
i ; S1
The behaviour of the protocol is very similar to the signed DDH key exchange (Figure 4)
previously studied. We can once again see the DH shares {ai, bi}i∈N as local session identiﬁers
that can be used to pair sessions. For each session and each party, the messages signed by this
party always depend strongly on the DH share. We can thus make all SSH sessions simulatable
with the following tagging functions and corresponding signing oracles.
TP (m, s) := ∃s ∈ {ai}i∈N,∃m1, m = hash(gs, m1, ms
1)
TS(m, s) := ∃s ∈ {bi}i∈N,∃m1, m = hash(m1, gs, ms
1)
We have that the set of axioms Ax = EUF-CMATP ,skP ,s∧EUF-CMATS ,skS ,s is Osign
sound thanks to Proposition 27. We use those axioms to perform the proof of K-3, where the
tagging essentially implies the authentication property. However, the proof must be slightly
stronger, when we consider that the continuations P, Q are instantiated with a second round
of SSH with a forwarding agent that uses the same long term secrets.
TP ,skP ,s,Osign
TS ,skQ,s,Oai,bi
9.3 SSH with Forwarding Agent
For concision, we write F A for F orwardAgent, SF for SF orward, and P D for P Distant.
Let us consider an abstract continuation protocol, satisfying a security property of the form
RP (k)(cid:107)RS(k) ∼= QP (k)(cid:107)QS(k) where k denotes a fresh name modelling an ideal key produced
by a key exchange.
We once again assume that the agents are only willing to communicate with the honest
identities, i.e., pk(skS) and pk(skP ) are predeﬁned in the processes. The goal is to prove the
following equivalence.
(cid:107)i
∼= (cid:107)i
(Pi[F A(k)]
(cid:107)Si[P D(k); RP (kP D)]
(cid:107)SF [RS(kSF )])
(Pi[F A(k)]
(cid:107)Si[P D(k); QP (kP D)]
(cid:107)SF [QS(kSF )])
It corresponds to the fact that we should have RP (k)(cid:107)RS(k) ∼= QP (k)(cid:107)QS(k), even if the ideal
key k is replaced for each party by a key derived by a SSH key exchange (P D and SF ) using
an forwarding agent (F A) based on a previous SSH key exchange (P and S).
We apply twice the decomposition of Section 8, once to show the security of the ﬁrst key
exchange (as done in the previous paragraph), and that we can thus prove the security of the
second key exchange using an ideal key derived instead of the one derive by the ﬁrst exchange.
The second application is then used to prove the security of this second key exchange.
First application The ﬁrst application is performed with the following Conditions (corre-
sponding to the one of Section 8), which allow to derive the desired conclusion.
45
K-3):
P 0
0 ;
(cid:107)S0
0 ;
if xB /∈ s then
0 (xB, k); out(k)
P 1
else out(k, ga0, xB)
if xA /∈ s then
i (xA, k); out(k)
S1
else out(k, gb0, xA)
P 0
0 ;
∼=OP S ,Of orward
(cid:107)S0
0 ;
if xB = gb0 then
out(k, ga0, xB)
else if xB /∈ s then
P 1(xB, k); bad
else out(k, gb0, xA)
if xA = ga0 then
out(k, gb0, xA)
else if xB /∈ s then
S1
0 (xA, k); bad
else out(k, gb0, xA)
(cid:107)iP 1
i (k)[P D(k); RP ](cid:107)SF [RS] ∼=OKE1
P-1):
i (k)[F A(k)](cid:107)S1
We use the following oracles:
• OP S allows to simulate (K-1) the other honest sessions of P and S, it corresponds to
i (k)[P D(k); QP ](cid:107)SF [QS]
i (k)[F A(k)](cid:107)S1
(cid:107)iP 1
Osign
TP ,F,skS ,s,Osign
TS ,F,skP ,s,Oai,bi
of Section 9.2.
• Oforward allows to simulate (S-1) the continuation, i.e., protocols of the form
in(k); P 1(k)[F A(k)](cid:107)in(k); S1(k)[P D(k); RP ](cid:107)SF [RQ]
allows to simulate (S-2) (cid:107)i(Pi(cid:107)Si) (it is identical to OP S).
• OKE1
All simulations are performed under νskS, skP . To deﬁne Oforward, we need to settle an
issue. Indeed, for hypothesis S-1, we need to provide an oracle that can simulate sessions of
the forwarding protocols. However, in order to get the simulatability of in(k).F A(skP , k), one
must give a generic signing oracles to the attacker, which would obviously make the protocol
insecure. Based on the assumption that the forwarded sessions perform signatures tagged with
“fwd(cid:48)(cid:48) (as shown below), we can however provide a signing oracle for such messages only. It
allows for the simulatability of the forwarding agent and of the forwarded client and server.
More speciﬁcally, recall the the forwarding agent is of the form:
F A(skP , k) :=
in(enc(sid, k));
out(enc(sign((cid:104)sid, “fwd ”(cid:105), skP ), k))
We may obtain its simulatability with the following tagging function:
Tfor (m, s) := ∃m1. m = (cid:104)m1, “fwd ”(cid:105)
Then, Oforward is simply Osign
Tfor ,F,skP ,s,Osign
Tfor ,F,skS ,s,Oa(cid:48)
i,b(cid:48)
i
the corresponding EUF-CMA axioms in Appendix E.
. We prove Condition K-3 under
46
Second application We further simplify Condition P-1 of the previous paragraph with a
second application of the decomposition of Section 8. We now denote s(cid:48) = {a(cid:48)
i}i∈N. P Di
and SFi are split into P D0
similarly to the split of Figure 9 before and
after the key conﬁrmation. The tagging functions used are only slight variations of the tagging
functions for the ﬁrst SSH key exchange:
and SF 0
i , P D1
i
i , SF 1
i
i, b(cid:48)
P (m, s(cid:48)) := ∃i,∃X, m = (cid:104)hash(ga(cid:48)
T (cid:48)
S(m, s(cid:48)) := ∃i,∃X, m = (cid:104)hash(X, gb(cid:48)
T (cid:48)
i, X, X a(cid:48)
i, X b(cid:48)
i), “fwd ”(cid:105)
i), “fwd ”(cid:105)
We then need to prove the Conditions:
K-3):
0 (k); F A(k)(cid:107)S1
P 1