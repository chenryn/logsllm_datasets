### Results and Discussion

#### A. Long-Term Stability of USB Fingerprinting
Our results indicate that USB-based machine fingerprinting methodologies are robust against concept drift over extended periods. This finding contrasts with previous research [8], which reported inconsistent characteristics after just two weeks.

### VI. Discussion

#### A. Towards Commodity Deployment
To facilitate further exploration of USB fingerprinting, we are releasing the two Android applications developed in this study (see Section VIII). These apps simplify USB data collection and analysis, but our methodologies can be implemented using any device capable of recording USB timing events at sufficient granularity. For instance, we replicated the results from Section IV-B using a low-cost Gumstix embedded device. Potential applications for USB fingerprinting range from personal computer attestation with our Android app to large-scale data center monitoring using dedicated hardware.

**Android USB Analyzer:**
- **Functionality:** This application rapidly collects USB enumeration data from USB-enabled hosts and embedded devices.
- **Efficiency:** It takes approximately 2 seconds to record and complete a single enumeration period.
- **Scalability:** In our experiments, we typically collected 50 traces per machine. Using our collection procedure, a single administrator could collect data from up to 260 host machines in an eight-hour day.
- **Automation:** The app requires no human intervention after initial connection, allowing the administrator to perform other tasks during data collection.
- **Data Management:** The app stores attribute information of previously collected machines, minimizing data entry requirements (Figure 8).

**Android USB Identifier:**
- **Functionality:** This distributed application performs real-time machine identification using a pre-generated fingerprint model.
- **Model Generation:** The model can be generated in Weka using traces collected by the Android USB Analyzer, following the procedures in Section IV-C.
- **Operation:** The client app sends USB enumeration traces to a remote server, which builds a testing set to verify the generated machine fingerprint. The server then performs the Chi-Squared test described in Section IV-C and notifies the client app of the result. The user is informed whether the machine is identified as a target or not (Figure 8).

#### B. Attacks against USB Fingerprinting
We explore the resilience of USB fingerprinting in the presence of a strong adversary. An attacker with knowledge of our approach might attempt to evade detection by manipulating the behavior of the USB stack. Consider the scenario where an attacker replaces a victim's machine with an identically specified one under their control, aiming to trick the USB fingerprinting model into incorrectly identifying the device as safe. The attacker could employ several tactics:

1. **Altering Descriptor Requests:** Changing the sequence or presence of descriptor requests.
2. **Invalid Data Injection:** Sending invalid data to the device, violating the USB protocol.
3. **Mimicry Attack:** Leveraging a remote host acting as a proxy helper to mislead the USB fingerprinting verifier.
4. **Timing Manipulation:** Altering the timing information of messages within certain constraints.

**Countermeasures:**
- **Descriptor Request Spoofing:** Our approach does not rely on specific descriptor sequences, making it resilient to spoofed descriptor requests. We demonstrate this through a proof-of-concept attack against Davis’s Windows fingerprint [9].
- **Invalid Data Handling:** If invalid data causes enumeration to fail, the attacker is detected. However, if enumeration completes, unexpected results may occur. Adding fail-safe mechanisms similar to those used by Stavrou et al. and Davis [11], [9] would help.
- **Mimicry Attack:** The latency introduced by a mimicry attack makes it detectable. Our feature vectors show transactions within 122µs, and an optimized Linux network stack has a maximum request-response rate of 7985 IP packets per second, with a per-packet processing time of 125 µs [37]. This latency is well above the inter-IRQ time captured by our features, making mimicry attacks detectable.
- **Timing Manipulation:** The attacker can cause arbitrary message delays, but this is more complex and would require modifying host behavior near the USB Bus Interface level. One method to strengthen our scheme is to incorporate Stavrou et al.’s method of emulating randomly selected USB peripherals [11].

#### C. Future Work
We plan to conduct additional USB fingerprinting trials, including investigating the impact of system load and quiescence. Although our current scheme offers over 150 features, we believe that additional contextual information can be mined from the USB protocol. These features may improve machine identification results. Despite promising preliminary results, our current scheme does not offer sufficient machine coverage for general use. However, USB fingerprinting can serve as a reference point in various applications. While we have shown that USB fingerprinting is robust against certain forms of tampering, a full security analysis was outside the scope of this work. We intend to demonstrate that a modified version of USB fingerprinting is fully secure against active adversaries.

### VII. Related Work

#### A. Fingerprinting
Fingerprinting has been widely used for device identification, including home electronics, websites, operating systems of VMs, and the source of phone calls. The concept leverages measurable signals caused by hardware imperfections to uniquely identify devices. Remote fingerprint techniques, such as Nmap and Xprobe, detect operating systems by examining network traffic. However, these methods can be fooled by systems that spoof operating systems at the network layer. Other remote schemes, like clock skew data, can also be manipulated. Semi-persistent network data and browser fingerprinting are also popular, particularly for advertising agencies.

**USB Fingerprinting:**
- **Comparison with Previous Work:** While many remote fingerprinting methods exist, there has been limited exploration into host identification using USB traffic. Wang et al. [11] and Butler et al. [8] have explored USB-based approaches, but their methods are susceptible to concept drift and do not differentiate between basic host attributes. Our approach, demonstrated over a larger machine corpus, is resistant to concept drift, distinguishes between similar machine models, and can differentiate between hosts in a set of identically specified machines.
- **Collection Mechanism:** Our collection mechanism is a freely available app for commodity devices, whereas previous studies relied on expensive specialty devices.

#### B. Compromise Detection
Network-based (NIDS) and host-based (HIDS) intrusion detection systems are used for compromise detection. NIDS analyze network traffic, while HIDS examine audit logs for suspicious activity. However, an attacker with kernel control can manipulate HIDS. Trustworthy kiosk systems and Kells systems provide similar guarantees but are susceptible to relay attacks.

#### C. Distance Bounding
Distance bounding protocols are used in various systems to prevent distance spoofing. Rasmussen et al. [70] and Ramaswamy et al. [71] highlight the need for fast processing speeds to prevent distance spoofing. Our method, performed over a direct physical connection, provides more accurate timing measurements than possible over a network. VIPER [36] demonstrates software attestation and resilience to relay or proxy attacks. Our discussion in Section VI-B demonstrates our robustness against attacks on distance bounding protocols.

### VIII. Conclusion
In conclusion, our study demonstrates the robustness and practicality of USB-based machine fingerprinting. Our approach is resistant to concept drift, can distinguish between similar machine models, and is applicable to a wide range of devices. Future work will focus on improving the scheme and conducting a full security analysis.