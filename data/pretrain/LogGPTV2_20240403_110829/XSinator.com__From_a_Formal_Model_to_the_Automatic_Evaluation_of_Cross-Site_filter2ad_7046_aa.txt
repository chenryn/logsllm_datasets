title:XSinator.com: From a Formal Model to the Automatic Evaluation of Cross-Site
Leaks in Web Browsers
author:Lukas Knittel and
Christian Mainka and
Marcus Niemietz and
Dominik Trevor No√ü and
J&quot;org Schwenk
XSinator.com: From a Formal Model to the Automatic
Evaluation of Cross-Site Leaks in Web Browsers
Lukas Knittel
Marcus Niemietz
Niederrhein University
of Applied Sciences
PI:EMAIL
Ruhr University Bochum
PI:EMAIL
Christian Mainka
Ruhr University Bochum
PI:EMAIL
Dominik Trevor No√ü
Ruhr University Bochum
PI:EMAIL
J√∂rg Schwenk
Ruhr University Bochum
PI:EMAIL
ABSTRACT
Cross-Site Leaks (XS-Leaks) describe a client-side bug that allows
an attacker to collect side-channel information from a cross-origin
HTTP resource. They are a significant threat to Internet privacy
since simply visiting a web page may reveal if the victim is a drug
addict or leak a sexual orientation. Numerous different attack vec-
tors, as well as mitigation strategies, have been proposed, but a
clear and systematic understanding of XS-Leak‚Äô root causes is still
missing.
Recently, Sudhodanan et al. gave a first overview of XS-Leak at
NDSS 2020. We build on their work by presenting the first formal
model for XS-Leaks. Our comprehensive analysis of known XS-
Leaks reveals that all of them fit into this new model. With the help
of this formal approach, we (1) systematically searched for new
XS-Leak attack classes, (2) implemented XSinator.com, a tool to
automatically evaluate if a given web browser is vulnerable to XS-
Leaks, and (3) systematically evaluated mitigations for XS-Leaks.
We found 14 new attack classes, evaluated the resilience of 56
different browser/OS combinations against a total of 34 XS-Leaks,
and propose a completely novel methodology to mitigate XS-Leaks.
CCS CONCEPTS
‚Ä¢ Information systems ‚Üí Browsers; Web applications; ‚Ä¢ Secu-
rity and privacy ‚Üí Formal security models.
KEYWORDS
XS-Leaks; Browser; Web Security
ACM Reference Format:
Lukas Knittel, Christian Mainka, Marcus Niemietz, Dominik Trevor No√ü,
and J√∂rg Schwenk. 2021. XSinator.com: From a Formal Model to the Auto-
matic Evaluation of Cross-Site Leaks in Web Browsers. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ‚Äô21), November 15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 18 pages. https://doi.org/10.1145/3460120.3484739
This work is licensed under a Creative Commons Attribution-NonCommercial-
ShareAlike International 4.0 License.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484739
Figure 1: XS-Leak attack flow example. The victim (1) visits
the attacker-controlled website, which (2) uses an inclusion
method to request a state-dependent resource from a target
website. The attacker then uses (3) a leak technique to (4)
determine the victim‚Äôs user state.
1 INTRODUCTION
Web Applications and User States. In a web application, a web
browser interacts with several web servers through HTTP or Web-
Socket connections. The client-side logic of the web application
is written in HTML, CSS, and JavaScript code, and is executed
inside a tab of the browser, or inside an inline frame in another
application. The execution context of a web application is defined
through the concept of web origins [5]. Web applications may call
and embed other web applications to enhance functionality. For
example, a hotel reservation site may embed Google Maps and
public transportation sites as an easy method to allow its customers
to determine how to reach the hotel. In such situations, cross-origin
HTTP requests between different web origins are necessary to
retrieve data to embed and display in the web application.
When interacting with a website, a user has a well-defined state
‚Äì this state typically contains the information whether the user is
logged in or not. Besides the login status, the user state may contain
account permissions, such as admin privileges, premium member-
ship, or restricted accounts. The number of different user states
is potentially unlimited. For example, in a webmail application, a
user may or may not have received an email with the subject ‚Äútop
secret‚Äù.
attacker.comCookieVictim visits attacker.com Use InclusionMethod Use LeakTechnique State-Dependent ResourceDetermineUser State target.com1234Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1771Privacy Risks of Cross-Origin Requests. Consider the fol-
lowing situation: the attacker has lured a victim on a malicious web
application that executes hidden cross-origin HTTP requests to
different drug counseling sites. If the attacker could learn whether
the victim is logged in at one of these drug counseling sites, the
attacker would gain highly privacy-critical information about the
victim.
Cross-Site Leaks on the User States. To distinguish between
two user states, the attacker‚Äôs JavaScript code must be able to iden-
tify differences in its own execution environment resulting from
different responses to cross-origin HTTP requests. These different
responses must correspond to different user states at the target web
application. If this differentiation is possible, we call this vulnera-
bility an XS-Leak. The attacker can then craft a malicious website,
which triggers the XS-Leak once the victim opens it (Figure 1). In
the following two real-world examples, we try to exemplify the
scope of the problem.
XS-Leak on Gitlab. Gitlab is a popular web application for
collaborative software development hosted by many companies.
Gitlab provides a profile URL https://git.company.com/profile: if
the user is not logged in, this URL redirects the user to https:
//git.company.com/users/sign_in; if the user is logged in, the cur-
rent user‚Äôs profile information is shown. However, since the attacker
embeds Gitlab cross-origin into the attacker‚Äôs own web page, the
attacker cannot directly read the URL. In Listing 1, we use the
window.length property, which is readable cross-origin, to deter-
mine the user state; the profile page does not contain any iframes,
but the login page includes three frames. If this property has the
value 3, the user is not logged in. If it has the value the 0, the user is
logged in. By scanning different company websites hosting Gitlab,
the attacker may collect information on a programmer‚Äôs affiliation.
Listing 1: XS-Leak on Gitlab.
let url = 'https://git.company.com/profile'
let ref = window.open(url, '_blank')
// wait until pop-up is loaded
let counted_frames = ref.window.length;
if (counted_frames === 0) {
// User is logged in
} else if (counted_frames === 3) {
// User is NOT logged in
}
XS-Leak on Google Mail. Google Mail is one of the most popu-
lar webmail applications. In 2019, Terjanq [53] reported an XS-Leak
which could determine whether an email with a certain subject
(e.g., ‚Äúdrug counseling‚Äù) or content was present in the user‚Äôs inbox
cross-origin. The XS-Leak abused the common cache that web ap-
plications share. By using the advanced search option, which can be
called cross-origin, Google Mail marks search results (if any exist)
with a dedicated image. To perform an XS-Leak attack, the attacker
first empties the web cache, then calls Google Mail advanced search,
and finally checks if the dedicated image is available in the cache.
If true, the search was successful, and the attacker learned that an
email containing the used search term exists in the victim‚Äôs inbox.
Formal Modelling and Testing. Sudhodanan et al. [51] gave
the first classification of existing XS-Leaks. They surveyed related
(1) By distinguishing between inclusion methods ùëñ and leak
techniques ùë°, we provide a clear methodology on how to
search for novel, yet undiscovered, XS-Leaks. While we did
not extend the set of inclusion methods ùêº, we later show that
mitigations may work for certain inclusion methods only.
On the other hand, we could substantially extend the set ùëá
of leak techniques, by grouping known elements of ùëá and
systematically searching for new vectors which may fit in
these groups.
(2) To systematically evaluate the three-dimensional matrix con-
sisting of pairs (ùëñ, ùë°, ùë§), where ùë§ ‚àà ùëä is a web browser from
the set of tested web browsers, we build a tool called XSinator.
This tool uses hand-crafted state-dependent resources to de-
termine if there exists at least one pair ùëñ, ùë° for which the state
of this resource can be leaked in ùë§. If at least one such pair
exists, we label ùë§ as vulnerable against this attack vector.
With this tool, we were able to detect major differences be-
tween browser implementations (Table 2). These findings
are used as guides to propose new mitigation methods.
(3) By separating inclusion methods ùëñ and leak techniques ùë°,
we could evaluate existing and propose novel mitigations.
Current mitigations mainly focus on the inclusion methods.
4 out of 7 mitigations discussed in [51] are related to HTTP
headers, which only may be effective against certain inclu-
sion methods. For example, SameSite=Lax cookies are only
effective if the target resource is included as an iframe, but
not if it is called with window.open. We introduce a novel
class of mitigations, which in Sudhodanan et al. [51] is only
present as a short analysis of the Tor browser. This class of
mitigations targets the leak techniquesùëá and can be sketched
as follows: if our evaluation (Table 2) shows that some web
browsers are immune to certain XS-Leaks, this indicates that
the corresponding leak techniques can be fixed by changing
the browser implementation. So in our discussion of mitiga-
tions, we clearly distinguish between mitigations targeting
certain inclusion methods only, and mitigations targeting
leak techniques.
work, both academic and non-academic, added further attack classes,
and showed that XS-Leaks are a novel paradigm in attacks on pri-
vacy. We build on their work to propose the first formal model for
XS-Leak attacks (Section 2). This formalization allows us to extend
their work in three aspects:
Empirical Study with Reproducible Results. XSinator is an
easy to deploy web application. With a single click, all XS-Leaks
test cases can be automatically executed for the active browser. We
used XSinator to evaluate 37 different web browsers on desktop
operating systems, 9 on Android, and 10 on iOS. Surprisingly, we
identified very different XS-Leaks in all major browser families such
as Chromium, Firefox (FF), and Safari (SA). Browsers based on the
Chromium engine (i.e., Google Chrome (GC), Microsoft Edge (MSE),
Opera (OP)) behave identically. For example, XS-Leaks identified
in GC are also applicable to all other browsers based on the same
engine. Moreover, we could detect differences in FF compared to
the Tor browser.
Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1772into our formal model (Section 4).
Contributions. We make the following key contributions:
‚Ä¢ We are the first to present a formal model for XS-Leaks.
We show that this model can be used to gain a systematic
in-depth understanding of XS-Leaks‚Äô root causes (Section 2).
‚Ä¢ We implemented XSinator, an easy-to-use, open-source web-
site that is publicly available at XSinator.com. With a single
click, XSinator can automatically scan for XS-Leaks vulner-
abilities in every browser, including mobile and desktop
(Section 3).
‚Ä¢ We analyze known vulnerabilities and show that they fit
‚Ä¢ We significantly extend the set of known XS-Leak attack
vectors by contributing 14 new XS-Leaks with the help of
our formal model (Section 5).
‚Ä¢ We evaluated 56 browser/OS combinations against a total set
of 34 XS-Leaks XSinator fully automatically. We identified
XS-Leaks in 37 desktop, 9 Android and 10 iOS web browsers.
(Section 6).
‚Ä¢ We use XSinator and the formal distinction between leak
techniques and inclusion methods to propose a novel class of
mitigation that disables leak techniques within web browser
implementations (Section 7).
Artifact Availability. In the interest of open science, our tool
and its source code, including all 34 XS-Leaks implementations, are
available at XSinator.com.
Responsible Disclosure. We reported new leak techniques to
Google and Mozilla and the disclosure process is still ongoing. We
incorporated their feedback into our countermeasure discussion in
Section 7.
2 FORMAL XS-LEAK DESCRIPTION
This section gives a formal description of XS-Leak attacks as a basis
for further analysis. This formal description helps us to (1) classify
existing XS-Leaks thoroughly, (2) systematically identify new candi-
dates for XS-Leaks, and (3) classify and evaluate countermeasures.
2.1 Formal Description
Same Origin. We first formalize the well-known fact that requests
to the same URL may yield different results, depending on which
state ùë† the web application is currently in.
Definition 2.1 (State-dependent resource). A state-dependent re-
source ùë†ùëëùëü is a 2-tuple (ùë¢ùëüùëô, (ùë†, ùëë)), where (ùë†, ùëë) ‚àà {(ùë†0, ùëë0), (ùë†1, ùëë1)},
and
‚Ä¢ ùë¢ùëüùëô is a URL resource on the target web application.
‚Ä¢ ùëÜ = {ùë†0, ùë†1} is a set of two different states of the target web
application.
‚Ä¢ ùê∑ = {ùëë0, ùëë1} is a set that represents the difference of the web
application‚Äôs behavior that depends on ùë†0 and ùë†1.
Differences. Please note that the definition of ùê∑ is, by intention,
somewhat vague. Two different states ùë†0, ùë†1 on the same ùë¢ùëüùëô ‚àà URL
can result in different behavior by the web application. The differ-
ence ùëë ‚àà ùê∑ manifests itself either directly in the initial response
(e.g., HTTP status code, or different HTML elements) or indirectly
when the web application behaves differently (e.g., a navigation
triggered by JavaScript code). Our notion of ùëë does not only cover
differences in HTTP requests and responses, but also side-effects
on the APIs caused by these responses.
States. A web application may have (potentially infinitely many)
different states ùë† ‚àà ùëÜ for a user ùë£. To successively detect the de-
sired state, the attacker may use a divide-and-conquer approach,
for example, by detecting the subject on an email in a webmail
application letter by letter. For this reason, in our model, we con-
centrate on distinguishing between two different states ùë†0, ùë†1. States
are typically stored in the web browser, which sends them along
with the HTTP Request (e.g., HTTP cookies, cache content).
Cross-Origin. In the web attacker model, an adversary can
only access a state-dependent resource ùë†ùëëùëü from a different web
origin. He thus must use an inclusion method to include ùë†ùëëùëü into
his web page, and he may use different leak techniques to observe
the victim‚Äôs web browser from his malicious JavaScript code.
ùë•ùë†ùëô() that outputs a bit ùëè‚Ä≤, that is ùëè‚Ä≤ = ùë•ùë†ùëô(ùë†ùëëùëü, ùëñ, ùë°) where
Definition 2.2 (Cross-Site Leak). A Cross-Site Leak is a function
‚Ä¢ ùë†ùëëùëü ‚àà ùëÜùê∑ùëÖ is a state-dependent resource.
‚Ä¢ ùëñ ‚àà ùêº is a inclusion method to request a cross-origin resource.
‚Ä¢ ùë° ‚àà ùëá is a leak technique which can be observed state-
dependent resources cross-origin.
The difference ùëë in a state-dependent resource ùë†ùëëùëü is called de-
tectable if there exists a inclusion method ùëñ and a leak technique ùë°
such that ùë•ùë†ùëô((ùë¢ùëüùëô, (ùë†ùëè, ùëëùëè)), ùëñ, ùë°) = ùëè for all requests.
Inclusion methods ùëñ ‚àà ùêº trigger cross-origin requests to the tar-
get web application‚Äôs state-dependent resource ùë†ùëëùëü in the victim‚Äôs
browser ùë§ùë£. For example, the attacker can include the ùë¢ùëüùëô of the ùë†ùëëùëü
(i.e., ùë†ùëëùëü .ùë¢ùëüùëô) in the src attribute of a specific HTML element, and
may use the target when opening new browser tabs or windows, or
Session 6B: Web Vulnerabilities CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1773can use the Fetch API. Note that since ùëñ issues a cross-origin request,
ùë° cannot directly access the server response due to the Same-Origin
Policy (SOP) that forbids cross-origin access.
Leak techniques ùë° ‚àà ùëá provide information that malicious Java-
Script can observe cross-origin when it runs in the victim‚Äôs web
browser ùë§ùë£. This information may be rooted in the JavaScript exe-
cution context (e.g., event handlers, readable DOM attributes), in
the global state of the web browser (e.g., global resource limits), or
on Web APIs (e.g., the Performance API). It can vary in different
browsers. For example, a piece of information may be accessible
cross-origin in Firefox but inaccessible in Chrome.
Example: Cross-Site Leak on Gitlab. Let us illustrate these
definitions with the XS-Leak on Gitlab as depicted in Listing 1. In
that case, we have a state-dependent resource ùë†ùëëùëü with
‚Ä¢ ùë¢ùëüùëô = https://git.company.com/profile
‚Ä¢ ùë† ‚àà {logged-in, logged-out}
‚Ä¢ ùëë is the number of frames included in the page: ùëë0 = 0 for
state logged-in, and ùëë1 = 3 for state logged-out.
Note that the reconnaissance phase, in which such state-dependent
resources are found, is conducted on the web application itself
(same origin) and thus is not limited by the cross-origin restrictions.
Whether a state-dependent resource is exploitable in an XS-Leak
depends on the attacker finding a suitable ùëñ and ùë° that works in
a victims browser. In this example, the attacker implements the
XS-Leak ùëè‚Ä≤ = ùë•ùë†ùëô(ùë†ùëëùëü, ùëñ, ùë°) as follows:
‚Ä¢ window.open(sdr, '_blank') is the inclusion method ùëñ.
‚Ä¢ The DOM property window.length is the leak technique ùë°,
which reads the number of frames ùëë by using the pop-up
window reference from ùëñ.
‚Ä¢ The function ùë•ùë†ùëô() is given in Listing 1.
2.2 Attacker Model
Different attacker models can be derived from this formal descrip-
tion by giving the attacker control over the different components
of an XS-Leak ùëë = ùë•ùë†ùëô(ùë†ùëëùëü, ùëñ, ùë°).
Real-World Attacks. In real-world attacks, the attacker only
controls the inclusion method ùëñ and the leak technique ùë° through
the malicious HTML page that they created. The attacker has no
control of ùë†ùëëùëü .ùë†, which is stored in the victim‚Äôs browser, or ùë†ùëëùëü .ùëë,
which depends on the target web application. To determine a state-
dependent resource ùë†ùëëùëü, a reconnaissance phase is needed in which
the attacker collects information on different states ùë† that the web
application may have, and on the resulting differences ùëë in the
HTTP responses.
Evaluation. Our evaluation uses a stronger attacker model,
which also gives the adversary full control over the state-dependent
resource ùë†ùëëùëü. That is, the attacker can choose the ùë¢ùëüùëô, choose a state
ùë† and a difference ùëë. The only element the attacker does not control
is the web browser and its cross-origin isolation techniques. In an
ideal world, the browser should reduce the set of detectable dif-
ference to the empty set. Thus, we consider the strongest possible
attacker, and we want to determine which XS-Leak may potentially
exist in any web application. We describe this approach‚Äôs goal as
follows: if we can reduce the set of detectable difference in this
strong attacker model by strengthening cross-origin isolation tech-
niques within the web browser, then we automatically reduce the
attack surface in any weaker, more realistic attacker model. Our
security experiment can be described as follows:
rity Experiment operates as follows:
Definition 2.3 (XS-Leak Security Experiment). The XS-Leak Secu-
‚Ä¢ Setup. In our security experiment, the attacker sets up a web
application‚Äôs state-dependent resources ùë†ùëëùëü0 = (ùë¢ùëüùëô, (ùë†0, ùëë0)),
ùë†ùëëùëü1 = (ùë¢ùëüùëô, (ùë†1, ùëë1)), where the web application at ùë¢ùëüùëô differs
exactly in ùëë based on ùë†. The attacker then creates an XS-Leak
ùë•ùë†ùëô with the inclusion method ùëñ and the leak technique ùë°,
and deploys the resulting code in the web browser ùë§ùë£ under
investigation.
‚Ä¢ Execution. An unbiased random bit ùëè ‚àà {0, 1} is chosen by
the environment, and the resource ùë†ùëëùëüùëè, which uses state
ùë†ùëè, is selected. The attacker does not learn ùëè. The attacker
may now issue a request to ùë†ùëëùëüùëè, using inclusion method ùëñ.
Once the response has been returned, the attacker may try
to determine the state ùë† by learning the detectable difference
ùëë through the use of leak technique ùë° in ùë§ùë£. From ùëë, the
attacker derives state ùë† and, therefore, bit ùëè‚Ä≤.
‚Ä¢ Winning condition. The attacker wins the security exper-
iment if ùëè‚Ä≤ = ùëè.
2.3 Detectable Differences
A detectable difference is a difference ùê∑ that can be observed cross-
origin through at least one pair (ùëñ, ùë°) to infer the actual state ‚Äì we
do not observe the difference directly, but rather through a side
effect that this difference causes. We categorized them into five
groups:
Status Code. An attacker can distinguish different HTTP re-
sponse status codes cross-origin (e.g., server errors, client errors,
or authentication errors).
API Usage. This detectable difference allows an attacker to
detect Web APIs‚Äô usage across pages, allowing an attacker to infer
whether a cross-origin page is using a specific JavaScript Web API.
Redirects. It is possible to detect if a web application has navi-
gated the user to a different page. This is not limited to HTTP redi-
rects but also includes redirects triggered by JavaScript or HTML.
Page Content. These detectable differences appear in the HTTP
response body itself or in sub-resources included by the page. For
example, this could be the number of included frames (cf. XS-Leak
on Gitlab) or size differences of images.
HTTP Header. An attacker can detect the presence of a specific
HTTP response header and may be able to gather its value. This in-
cludes headers such as X-Frame-Options, Content-Disposition,
and Cross-Origin-Resource-Policy.
It is questionable that these groups are complete since new
browser features or yet unknown XS-Leaks might unveil new de-