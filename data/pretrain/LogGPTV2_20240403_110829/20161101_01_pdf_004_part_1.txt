培训
PostgreSQL 9.3
Day 2
digoal.zhou
2013/12/5
课程内容
 Day - 2
 PostgreSQL 索引介绍
 目标:
 熟悉b-tree , hash , gist , gin , sp-gist几种索引类型的概念, 以及在什么样的场景应该使用何种索引
 了解全文检索的应用
 PostgreSQL查询优化
 目标:
 了解explian SQL分析工具的使用, 理解explain 的代价计算原理, 并根据数据库硬件环境校准代价因子.
 理解explain 输出的含义 (如 组合行集 , 节点处理 , 合并连接, 哈希连接 等), 并可以结合explain的输出优化SQL.
 连接池及数据库高速缓存
 目标:
 以pgbouncer为例, 理解数据库连接池在短连接环境下的好处, 连接池的几种模式和使用场景
 本地和异地高速缓存的介绍, 如本地os 层缓存pgfincore, 异地K-V缓存pgmemcached的使用.
 数据库扩展及复制
 目标:
 了解数据库集群级流复制, 数据库热备份, 表级复制, 数据库在虚拟化环境下的使用注意事项
PostgreSQL 索引介绍
 使用索引的好处
 利用索引进行排序减少CPU开销
 加速带条件的查询, 删除, 更新
 加速JOIN操作
 加速外键约束更新和删除操作
 加速唯一值约束, 排他约束
 索引带来的弊端
 索引随着表的记录块的变迁需要更新, 因此会对这类操作带来一定的性能影响. (块不变更的情况下触发HOT特性, 可
以不需要更新索引)
 使用索引的注意事项
 正常创建索引时, 会阻断除查询以外的其他操作.
 使用并行CONCURRENTLY 选项后, 可以允许同时对表的DML操作, 但是对于频繁DML的表, 这种创建索引的时间
非常长.
 某些索引不记录WAL, 所以如果有利于WAL进行数据恢复的情况(如crash recovery, 流复制, warm standby等), 这类
索引在使用前需要重建. (HASH 索引)
PostgreSQL 索引介绍
 索引类型
 根据不同的索引算法, PostgreSQL的算法分为 B-tree, Hash, GiST, SP-GiST, GIN
 select amname from pg_am;
 索引应用场景
 PostgreSQL不同的索引类别支持的索引访问操作符也有区别, 以下为不同的索引类型对应的系统默认的索引策略
 Btree, 同时还支持前导模糊查询(like ‘xxx%’ 或 ~ ‘^xxx’), 忽略大小写字符前导模糊查询(ILIKE ‘xxx%’ 或 ~* ‘^xxx’)
 =
 >
 Hash
 =
 Gin, 支持多值列的索引, 例如数组类型, 全文检索类型, 例如以下为一维数组类型对应的GIN索引已实现的访问策略操作符
  -- 包含 array[1,2,3] @> array[2]
 = -- 相等 array[1,2,3] = array[1,2,3]
 && -- 相交 array[1,2,3] && array[2]
PostgreSQL 索引介绍
 Gist, 并不是单类的索引, 可以认为它是一种索引框架, 支持许多不同的索引策略(operator class),
 例如二维几何类型的以下操作符支持通过Gist索引访问
  -- 表示左边的平面体不会扩展到超过右边的平面体的左边. 例如box '((0,0),(3,3))' &> box '((0,0),(2,2))'
 >> -- 严格在右
  -- 不会扩展到超出下面
 |>> -- 严格在上
 @> -- 包含
  point '(101,456)' LIMIT 10;
 另外contrib中也提供了一些gist索引策略.
PostgreSQL 索引介绍
 Sp-Gist, 与gist类似, 也是一种索引框架, 支持基于磁盘存储的非平衡数据结构, 如四叉树, k-d树, radix树.
 例如二维的point类型, gist索引支持的操作符如下
 >
 ~=
 ^ -- 在上面, circle '((0,5),1)' >^ circle '((0,0),1)'
PostgreSQL 索引使用场景举例
 利用索引进行排序减少CPU开销
 加速带条件的查询, 删除, 更新
 加速JOIN操作
 加速外键约束更新和删除操作
 加速唯一值约束, 排他约束
PostgreSQL 索引使用场景举例
 利用索引进行排序减少CPU开销
 1. 查询条件就是索引列
 digoal=# create table test(id int, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# insert into test select generate_series(1,10000), md5(random()::text),clock_timestamp();
 INSERT 0 10000
 digoal=# create index idx_test_1 on test(id);
 CREATE INDEX
 digoal=# explain analyze select * from test where id Seq Scan on test (cost=0.00..219.00 rows=1 width=45) (actual time=0.016..2.201 rows=1 loops=1)
 Filter: (info = '620f5eaeaf0d7cf48cd1fa6c410bad49'::text)
 Rows Removed by Filter: 9999
 Total runtime: 2.273 ms
 (7 rows)
PostgreSQL 索引使用场景举例
 利用索引进行排序减少CPU开销
 2. 查询条件不是索引列
 digoal=# set enable_seqscan=off;
 SET
 digoal=# explain analyze select * from test where info='620f5eaeaf0d7cf48cd1fa6c410bad49' order by id;
 QUERY PLAN
 --------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_test_1 on test (cost=0.29..299.29 rows=1 width=45) (actual time=0.027..3.628 rows=1 loops=1)
 Filter: (info = '620f5eaeaf0d7cf48cd1fa6c410bad49'::text)
 Rows Removed by Filter: 9999
 Total runtime: 3.661 ms
 (4 rows)
 这个只是例子, 不一定适合实际应用场景.
 如果info的选择性好的话, 在info上面加索引时比较妥当的.
PostgreSQL 索引使用场景举例
 加速带条件的查询, 删除, 更新
 digoal=# explain analyze select * from test where id=1;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_test_1 on test (cost=0.29..2.30 rows=1 width=45) (actual time=0.014..0.015 rows=1 loops=1)
 Index Cond: (id = 1)
 Total runtime: 0.039 ms
 (3 rows)
 在没有索引的情况下的查询效率 :
 set enable_indexscan=off;
 set enable_bitmapscan=off;
 digoal=# explain analyze select * from test where id=1;
 QUERY PLAN
 -------------------------------------------------------------------------------------------------
 Seq Scan on test (cost=0.00..219.00 rows=1 width=45) (actual time=0.017..1.744 rows=1 loops=1)
 Filter: (id = 1)
 Rows Removed by Filter: 9999
 Total runtime: 1.773 ms
 (4 rows)
PostgreSQL 索引使用场景举例
 加速JOIN操作
 digoal=# create table test1(id int, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# insert into test1 select generate_series(1,10000), md5(random()::text),clock_timestamp();
 INSERT 0 10000
 test1表没有索引时
 digoal=# explain analyze select t1.*,t2.* from test t1 join test1 t2 on (t1.id=t2.id and t2.id=1);
 QUERY PLAN
 ---------------------------------------------------------------------------------------------------------------------------
 Nested Loop (cost=0.29..221.31 rows=1 width=90) (actual time=0.028..1.708 rows=1 loops=1)
 -> Index Scan using idx_test_1 on test t1 (cost=0.29..2.30 rows=1 width=45) (actual time=0.015..0.016 rows=1 loops=1)
 Index Cond: (id = 1)
 -> Seq Scan on test1 t2 (cost=0.00..219.00 rows=1 width=45) (actual time=0.010..1.686 rows=1 loops=1)
 Filter: (id = 1)
 Rows Removed by Filter: 9999
 Total runtime: 1.768 ms
 (7 rows)
PostgreSQL 索引使用场景举例
 加速JOIN操作
 digoal=# create index idx_test1_1 on test1(id);
 CREATE INDEX
 digoal=# explain analyze select t1.*,t2.* from test t1 join test1 t2 on (t1.id=t2.id and t2.id=1);
 QUERY PLAN
 -----------------------------------------------------------------------------------------------------------------------------
 Nested Loop (cost=0.57..4.61 rows=1 width=90) (actual time=0.045..0.046 rows=1 loops=1)
 -> Index Scan using idx_test_1 on test t1 (cost=0.29..2.30 rows=1 width=45) (actual time=0.012..0.012 rows=1 loops=1)
 Index Cond: (id = 1)
 -> Index Scan using idx_test1_1 on test1 t2 (cost=0.29..2.30 rows=1 width=45) (actual time=0.029..0.030 rows=1 loops=1)
 Index Cond: (id = 1)
 Total runtime: 0.089 ms
 (6 rows)
PostgreSQL 索引使用场景举例
 加速JOIN操作
 MERGE JOIN也能用到索引.
 digoal=# explain analyze select t1.*,t2.* from test t1 join test1 t2 on (t1.id=t2.id);
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 ---
 Merge Join (cost=0.57..698.57 rows=10000 width=90) (actual time=0.024..14.468 rows=10000 loops=1)
 Merge Cond: (t1.id = t2.id)
 -> Index Scan using idx_test_1 on test t1 (cost=0.29..274.29 rows=10000 width=45) (actual time=0.010..3.754 rows=10000 loops=1)
 -> Index Scan using idx_test1_1 on test1 t2 (cost=0.29..274.29 rows=10000 width=45) (actual time=0.007..3.715 rows=10000 loops=
 1)
 Total runtime: 15.429 ms
 (5 rows)
PostgreSQL 索引使用场景举例
 加速JOIN操作
 在没有索引的情况下, merge join增加排序开销.
 digoal=# explain analyze select t1.*,t2.* from test t1 join test1 t2 on (t1.id=t2.id);
 QUERY PLAN
 -------------------------------------------------------------------------------------------------------------------------
 Merge Join (cost=1716.77..1916.77 rows=10000 width=90) (actual time=8.220..17.291 rows=10000 loops=1)
 Merge Cond: (t1.id = t2.id)
 -> Sort (cost=858.39..883.39 rows=10000 width=45) (actual time=4.177..5.211 rows=10000 loops=1)
 Sort Key: t1.id
 Sort Method: quicksort Memory: 1018kB
 -> Seq Scan on test t1 (cost=0.00..194.00 rows=10000 width=45) (actual time=0.008..1.757 rows=10000 loops=1)
 -> Sort (cost=858.39..883.39 rows=10000 width=45) (actual time=4.035..5.300 rows=10000 loops=1)
 Sort Key: t2.id
 Sort Method: quicksort Memory: 1018kB
 -> Seq Scan on test1 t2 (cost=0.00..194.00 rows=10000 width=45) (actual time=0.006..1.752 rows=10000 loops=1)
 Total runtime: 18.420 ms
 (11 rows)
PostgreSQL 索引使用场景举例
 加速外键约束更新和删除操作
 digoal=# create table p(id int primary key, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# create table f(id int primary key, p_id int references p(id) on delete cascade on update cascade, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# insert into p select generate_series(1,10000), md5(random()::text), clock_timestamp();
 INSERT 0 10000
 digoal=# insert into f select generate_series(1,10000), generate_series(1,10000), md5(random()::text), clock_timestamp();
 INSERT 0 10000
PostgreSQL 索引使用场景举例
 加速外键约束更新和删除操作
 在f表的p_id未加索引时, 更新p.id
 digoal=# explain (analyze,verbose,costs,buffers,timing) update p set id=0 where id=1;
 QUERY PLAN
 --------------------------------------------------------------------------------------------------------------------------
 Update on postgres.p (cost=0.29..2.30 rows=1 width=47) (actual time=0.082..0.082 rows=0 loops=1)
 Buffers: shared hit=8
 -> Index Scan using p_pkey on postgres.p (cost=0.29..2.30 rows=1 width=47) (actual time=0.021..0.022 rows=1 loops=1)
 Output: 0, info, crt_time, ctid
 Index Cond: (p.id = 1)
 Buffers: shared hit=3