unsigned long eflags;
unsigned long cs;
unsigned long rip;
unsigned long orig_rax;
unsigned long
unsigned
unsigned
unsigned
unsigned long
unsigned long
unsigned long
unsigned long
unsigned long 
unsigned long
unsigned long
unsigned long 
unsigned long r15;
unsigned
1long
1 long
1 long
1long
2
www.TopSage.com
---
## Page 297
插入上面的侦测器后，就会显示下面的内核信息。
使用 kprobes 的另一个有效的调试方法，就是显示栈跟踪。
显示栈跟踪
方法（i386篇)”。
数调用时的参数传递方法（x86_64篇)”、“HACK#11函数调用时的参数传递
中，因此查看rdi和rsi就能得到第1、第2个参数的值（参见“HACK#10函
在 x86_64 架构中，函数的参数从左到右分别保存在 rdi、rsi、rdx、rcx、r8、r9
Call Trace:
int handler_pre(struct kprobe *p, struct pt_regs *regs)
int handler_pre(struct kprobe *p, struct pt_regs *regs)
[]int3+0x93/0xa4
[] do_int3+0x42/0x83
[] notifier_call_chain+0x20/0x32
[] kprobe_exceptions_notify0x3b/0x75
[]kprobe_handler+0x198/0x1c8
[] :kpro3:handler_pre+0x9/0x10
[] do_execve+0x0/0x243
return 0;
dump_stack();
for (argv = (char _
int cnt = 0;
return 0;
printk(KERN_INFO "argv[d]: %s\n", cnt, *argv);
息”讲述的方法使用 jprobes 更简单。
如果只想查看参数的值，那么用“HACK#48使用 jprobes 查看内核内部的信
(++uo '++Abue inN =i Abue* itsJ
#include 
#include 
[] stub_ execve+0x67/0xb0
>[] sys_execve+0x36/0x4c
[] do_execve+0x1/0x243
使用jprobes查看内核内部的信息
到内核函数的开头，获取内核内部信息的方法。
本hack介绍了使用内核调试的功能之一
www.TopSage.com
-jprobes，将侦测器插入
—大和一洋
---
## Page 299
struct kprobe kp 成员设置的是要侦测的函数（上例中为 do_execve()）的符号
jprobe()。jprobe 结构的成员如下所示，只包括 kprobe 结构和 entry两者。
预备的数据结构是 jprobe 结构，并将指针传递给 register_jprobe()和 unregister.
代码大体上与 kprobes 的情况完全相同，只有 3 点不一样。第1 点就是给侦测器
struct jprobe {
MODULE_LICENSE("GPL");
module_exit(cleanup_jprobe_sample);
static __-exit void cleanup_jprobe_sample(void)
module_init(init_jprobe_sample);
static __init int init_jprobe_sample(void)
kprobe_opcodet *entry; /* probe handling code to jump to */ 
unregister_jprobe(&jp);
struct kprobe kp;
return 0;
register_jprobe(&jp);
jp.entry = JPROBE_ENTRY(jp_do_execve);
jp.kp.symbol_name = "do_execve";
return 0;
jprobe_return();
for (; *argv l= NULL; argv++, cnt++) 
printk(KERN_ INFO “filename: %s\n", filename);
int cnt = 0; 
printk(KERN_INFO "argv[%d]: %s\n", cnt, *argv);
char __user *-_user *envp, struct pt_regs *regs)
www.TopSage.com
HACK#48 使用 jprobes 查看内核内部的信息I  281
---
## Page 300
289
址的指令执行之前或之后执行，或者前后都执行。
大功能，那就是它能在内核的任意地址插入侦测器。此外，侦测器可以在任意地
况下使用[HACK#48]介绍的jprobes更方便。但是，kprobes 拥有jprobes 没有的强
函数参数和栈跟踪的例子。但是，如果只在函数开头插入侦测器，那么大多数情
[HACK#47]介绍了利用kprobes在函数开头插入侦测器以显示内核内的全局变量
kprobes的强大功能
#
比kprobes更简单。
本 hack 介绍了使用 jprobes 在函数的开头放置侦测器的方法。用 jprobes 获取参数
总结
执行。这个return语句是为了避免编译器的警告和错误而写的。
jprobe_return(）。该函数会回到被侦测的函数，后面的那个return实际上不会被
第3点不同就是，侦测器处理程序的末尾不仅要用return语句，还要写上
jprobes，那么无须了解架构的详细知识，也能简单地查看参数的值。
寄存器或栈才能计算出参数的值。此外，计算方法还依赖于架构。如果使用
动地使用变量名，编写侦测器处理程序就会更方便。使用kprobes时，必须通过
do_execve（））的参数相同。这样printk（）等函数在获取变量内容时，就能原封不
第2点不同就是侦测器处理程序的参数应当与要侦测的函数（上例中为
程序（上例中为 jp_do_execve())。
(symbol_name）或地址（addr）。entry中为 JPROBE_ENTRY(）宏处理过的侦测器处理
282丨第6章高手们的调试技术
使用kprobes获取内核内部任意位置的
息的方法。
本hack介绍利用kprobes 在内核函数的任意位置插入侦测器并获取信
信息
www.TopSage.com
一大和一洋
---
## Page 301
的例子。
地址，而是相对于 do_execve()开头的相对地址。下面是用 crash 命令调查地址
首先调查一下①的地址。这里所谓的地址并不是在被调查的机器上的绝对逻辑
d
下面的例子演示了在 do_execve()的①处插入侦测器，并显示 kzalloc()的返回值
示的变量保存在哪个寄存器、哪个内存地址。
代码中想要调查的位置对应于编译后的二进制文件中的什么地址，并调查希望显
入侦测器，可以插入的位置只能是任意地址。因此，应当观察汇编代码，找到源
内核大部分用C 语言写成，但遗憾的是，kprobes 并不能向源代码内的任意行插
向任意地址插入侦测器
oxffff8003e295 :
Oxfffffff8003e292 :
Oxfffffff8003e290:
crash> dis do_execve
int do_execve(char * filename,
（以下省略）
file = open_exec(filename);
if (!bprm)—
bprm = kzalloc(sizeof(*bprm), GFP_KERNEL);
retval = -ENOMEM;
int i;
int retval;
struct file *file;
 struct linux_binprm *bprm;
struct pt_regs * regs)
char __user *_
（*.ko）来找出地址。
在无法使用crash 命令的环境中，可以用 objdump 反汇编 vmlinux 文件或模块
 goto out_ret;
HACK#49 使用kprobes 获取内核内部任意位置的信息1283
www.TopSage.com
mov
mov
oush
$0xd0,%esi
8rsi,%r15
%r15
①②
---
## Page 302
291
码为例，必须放在do_execve+50/+53/+56/+62/+65等地址。
件，放在哪里都无所谓。但是，必须放在指令的起始地址上。以上面的反汇编代
的 do_execve+45之后，而且在保存返回值的rax被改变之前，只要符合这两个条
kmem_cache_zalloc()的返回值，故侦测器的插入地址就是在调用kmem_cache_zalloc()
因此，似乎可以认为kzalloc()的返回值（即bprm 值）就是 do_execve+45 处
代码，因此可以认为这里对应于②。
给了某个寄存器 r12d。由于ENOMEM 就是 12，似乎对应于源代码上的①，
函数初始化部分。接下来的 do_execve+20 和 do_execve+22 将-12（$oxffff4）赋
do_execve+17之间只是将参数保存到了其他寄存器中，似乎是编译器自动生成的
只要将①前后的源代码与汇编代码比较一下就可以知道。do_execve+2 到
难，但可以估计到，kzalloc展开的位置大概在do_execve+28到do_execve+45左右，
数中。汇编代码和源代码并不是严格的一对一关系，因此正确地对应范围比较困
源代码中，kzalloc()为内联函数（inline），因此处理内容展开到了 do_execve()函
284 1第6章高手们的调试技术
oxffffffff8003e2dl :
Dxfffff8003e2ce :
oxffffffff8003e2c8 :
oxffffff8003e2c5 :
oxffffffff8003e2c2:
Oxffffffff8003e2b9:
ffff802ec828 
Dxffff8003e2b2 :
xffffffff8003e2ae:
oxfffffff8003e29f :
Oxffffffff8003e29c :
θxffffff8003e29a :
:
:
:
:
:
www.TopSage.com
callq 0xffff8003b769 
mov
test
callq 0xffff80od2528 
D
mov
push
0xfffff8003e4c3 
%rax,%rbp
%rax,%rax
%rcx,(%rsp)
$oxfffff4, %r12d 
%r13,%rdi
2811247(%rip),%rdi
$0x8,%rsp
&r12
%rdi,%r13
%r13
%rdx,%r14
%r14
#Oxffff
而
---
## Page 303
kallsyms_lookup_name()的返回值加上从函数开头算起的偏移量，设置到 addr成员
以上版本要设置 struct kp 的 symbol_name 成员和 offset 成员，而在低版本上要将
侦测 do_execve+50的代码如下所示。要点在于，在内核版本2.6.19（或者RHEL5）
创建侦测器
module_exit(cleanup_kprobe_sample);
static __exit void cleanup_kprobe_sample(void)
module_init(init_kprobe_sample);
static __init int init_kprobe_sample(void)
int handler(struct kprobe *p, struct pt_regs *regs) {
struct kprobe kp;
#include 
#include 
#include 
unregister_kprobe(&kp);
return 0;
register_kprobe(&kp);
kp.pre_handler = handler;
/* kp.addr = (kprobe_opcode_t *)kallsyms_Llookup_name("do_execve") + 50; */
kp.symbol_name = "do_execve";
printk(KERN_INF0 "rax: %016lx, eflags: %08x, %rip: %016lx\n",
/*如果内核版本在2.6.18以下 */
kp.offset = 50;
return 0;
regs->rax, regs->eflags, regs->rip);
HACK#49 使用 kprobes 获取内核内部任意位置的信息|  285
www.TopSage.com
292
---
## Page 304
293
与的 MSB（MostSignificant Bit：最高位比特）为1，可知进位标志（第7比特）
的逻辑与不是0，因此test指令执行后的零标志（第6比特）被清空，而且逻辑
改变寄存器内容，因此 rax的值在执行前后是相同的。注意eflags，现在 rax和 rax
test指令计算两个操作数的逻辑与，并将结果反映到标志寄存器中。该指令不会
测结果。
do_execve+50的 test 指令执行之前的侦测结果，第 2行为 test指令执行之后的侦
将上述代码添加到刚才的示例源代码中并执行，其结果如下。第1行为
可以设置与 pre_handler 相同的函数，也可以设置不同的函数。
侦测程序，只需如下设置 struct kprobes 的 post_handler 即可。post_handler成员
本 hack 开头说过，kprobes 的强大之处之一，就是能在指令执行之后的位置插入
在指令执行之后插入侦测程序
的内核信息，其中的 rax 的值就是源代码中 bprm的值。
加载该模块之后，执行某个命令以调用 do_execve()，在笔者的环境中得到了如下
286丨第6章高手们的调试技术
kernel: rax: ffff81001e4b9a00, eflags: 00000186, &rip: fffffff8800012
kernel: rax: ffff81001e4b9a00, eflags: 00000246, %rip: fffff8003e2c3
kp.post_handler = handler;
kernel: rax: ffff81000b9a3800, eflags: 00000246, %rip: fffff8003e2c3
MODULE_LICENSE("GPL");
地址大一个字节。
是这条int 3指令执行后的寄存器值，因此程序计数器rip的值比侦测器插入
址处插入一条int 3指令，其长度为1字节。侦测器函数的参数regs 中保存的
址大1字节，这是因为在x86_64、i386架构中，调用侦测器时要向被侦测的地
(0x32)，即 fffffff8003e2c2。但是 kprobes 处理程序显示的 rip值比这个地
插入侦测器的地址为从函数开头起的第50字节，因此应该是该地址加上50
ffff8003e290 T do_execve
# cat /proc/kallsyms | grep do_execve 
的地址。在笔者的环境中，do_execve()的绝对地址为ffffffff8003e290。
使用kprobes 时要注意的是，侦测器处理程序中的rip 的值并不是侦测器被插入
www.TopSage.com
---
## Page 305
处理函数中，处设置regs->rip，将侦测器结束后的返回地址改成了
的值。首先，把要查看的内核函数（本例中为do_execve（））整个复制，并改变函
下面的侦测器的例子与[HACK#49]相同，都是在do_execve()的开头显示指针bprm