title:SENG, the SGX-Enforcing Network Gateway: Authorizing Communication
from Shielded Clients
author:Fabian Schwarz and
Christian Rossow
SENG, the SGX-Enforcing Network Gateway: 
Authorizing Communication from Shielded Clients
Fabian Schwarz and Christian Rossow, CISPA Helmholtz Center for Information Security
https://www.usenix.org/conference/usenixsecurity20/presentation/schwarz
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.SENG, the SGX-Enforcing Network Gateway:
Authorizing Communication from Shielded Clients
Fabian Schwarz and Christian Rossow
CISPA Helmholtz Center for Information Security
Saarbrücken, Germany
{fabian.schwarz,rossow}@cispa.saarland
Abstract
Network administrators face a security-critical dilemma.
While they want to tightly contain their hosts, they usually
have to relax ﬁrewall policies to support a large variety of
applications. However, liberal policies like this enable data
exﬁltration by unknown (and untrusted) client applications.
An inability to attribute communication accurately and reli-
ably to applications is at the heart of this problem. Firewall
policies are restricted to coarse-grained features that are easy
to evade and mimic, such as protocols or port numbers.
We present SENG, a network gateway that enables ﬁrewalls
to reliably attribute trafﬁc to an application. SENG shields
an application in an SGX-tailored LibOS and transparently
establishes an attestation-based DTLS channel between the
SGX enclave and the central network gateway. Consequently,
administrators can perfectly attribute trafﬁc to its originating
application, and thereby enforce ﬁne-grained per-application
communication policies at a central ﬁrewall. Our prototype
implementation demonstrates that SENG (i) allows adminis-
trators to readily use their favorite ﬁrewall to enforce network
policies on a certiﬁed per-application basis and (ii) prevents
local system-level attackers from interfering with the shielded
application’s communication.
1 Introduction
Companies and sovereign institutions aggregate increasing
amounts of sensitive digital information, while the number
of attacks on them is proliferating steadily at the same time.
Attackers regularly inﬁltrate systems to steal information and
disrupt competitors, e.g., using social engineering (phishing)
or advanced exploits (watering hole, zero days) [18]. As a
response, organizations harden endpoints, deploy network-
based attack detection systems, and train their employees. Yet,
given the abundance and power of attacks, preventing any kind
of information leakage has become practically infeasible, even
in highly-secure settings and in absence of internal attackers.
Foremost among these problems is the fact that containing
an organization’s incoming and outgoing communication is
almost impossible. On the one hand, network administrators
deploy ﬁrewalls and Intrusion Detection Systems (IDS) to
tightly control and contain information ﬂows. On the other
hand, they have to support a vast diversity of applications
and access methods and lack a mapping between which ap-
plication causes which trafﬁc. This enables internal clients
to (possibly unknowingly) leak data by executing untrusted
or even malicious software. Furthermore, companies opening
their servers to partners lack control over which remote client
applications are used to access these servers.
One fundamental solution to this problem is a certiﬁed attri-
bution of network trafﬁc to its application, which would allow
for app-speciﬁc communication policies. Existing attempts to
attribute trafﬁc fall short in their security guarantees, as they
(i) rely on protocol identiﬁcation and thereby can be evaded
by trafﬁc morphing [24], (ii) rely on host-based sensors that
can be evaded or manipulated by local attackers, or (iii) are
host-based only and cannot be used at central perimeter ﬁre-
walls. In fact, reliable trafﬁc-to-app attribution is challenging,
as attackers can inject code into trusted processes [4] and
abuse their identity. For example, if malware injects itself into
browsers, it hides its functionality within an otherwise trusted
process and thus inherits the browser’s identity and privileges.
Lacking a hardware-based trust anchor, existing attribution
attempts can be fooled by system-level attackers.
To tackle this underlying core problem, we require a de-
sign that (i) shields processes from system-level attackers
and (ii) gives stronger integrity protection of processes than
just their name or any sort of other loose identiﬁer. In fact,
trusted execution environments (TEEs) like Intel SGX [13]
ensure such hardware-enforced protections and have been the
subject of endeavors to shield client applications [23, 31] and
outsourced network services [7,45,57]. Library operating sys-
tems (LibOSes) tailored for SGX wrap and shield unmodiﬁed
client and server applications, thus protecting legacy applica-
tions out of the box [2, 5, 9]. However, while they do enable
transparent shielding and attestation, existing LibOSes fail
to provide the following two guarantees. First, they rely on
the untrusted host’s network stack, s.t. local system-level ad-
USENIX Association
29th USENIX Security Symposium    753
versaries can still manipulate and redirect trafﬁc (e.g., DNS
spooﬁng, IP/TCP header modiﬁcation). Second, the network
gateway is still entirely blind to the concrete application which
is sending and/or receiving data. Gateways can therefore nei-
ther block unauthenticated, vulnerable senders (e.g., malware,
shadow IT) nor restrict communication with security-critical
servers to certain trusted client applications.
In this paper, we present SENG, a network gateway service
coupled with a client-side runtime library, which aims to solve
the above problems. SENG transparently protects the connec-
tions of applications that are shielded in an SGX-tailored
LibOS to prevent packet manipulation and redirection attacks
by local system-level attackers. Technically, SENG automat-
ically establishes attestation-based, trusted DTLS channels
between the SGX enclaves and the central network gateway.
Trafﬁc from and to an enclave is wrapped in the respective se-
cure tunnel and thus inherits enclave-to-gateway conﬁdential-
ity and integrity guarantees. Furthermore, this design allows
the gateway to link trafﬁc to the trusted application causing
it. Consequently, the gateway can distinguish between trafﬁc
from shielded and unshielded applications and can ultimately
enforce central ﬁne-grained per-application policies. We have
designed SENG in such a way that shielded apps are wrapped
in an SGX-based LibOS without requiring any modiﬁcations.
This allows us to shield legacy binaries without source code
changes and completely independent of the underlying net-
work protocols. We also provide an alternative SENG design,
which operates without LibOS and provides SENG support
for enclaves based on Intel’s SGX SDK [25] instead. While
the latter does require application modiﬁcations, it outper-
forms the LibOS variant in terms of performance.
To demonstrate the general feasibility, we have developed
SENG in an open-source (cf. Section 12) C++ prototype
based on Graphene-SGX [9]. Our proof-of-concept illustrates
the security beneﬁts of an SGX-enforcing gateway. To high-
light the two most important merits, SENG (i) allows network
administrators to readily use their favorite ﬁrewall implemen-
tation (e.g., Netfilter/iptables [40]) to enforce network
policies on a certiﬁed per-application basis and (ii) prevents
local system-level attackers from interfering with the shielded
application’s communication.
In summary, we make the following contributions:
• We design SENG, which transparently (i.e., without the
need of code rewriting) shields applications to protect
and attribute their network trafﬁc.
• SENG enables tight control over network communica-
tion at the perimeter and thereby mitigates information
leakage by untrusted applications. Consequently, cen-
tral ﬁrewalls can enforce the use of particular trusted
applications for trafﬁc entering or leaving their network.
• We implement and release a prototype and thoroughly
evaluate its performance based on network- and mi-
crobenchmarks as well as a set of real-world client
(cURL, Telnet) and server (NGINX) applications.
2 Threat Model
Centralized network ﬁrewalls (“perimeter ﬁrewalls”) are a
core security instrument in any network [19]. Network ad-
ministrators typically segment clients and servers into dis-
joint subnetworks that are interconnected via a central net-
work gateway—a classical demilitarized zone (DMZ) ﬁrewall
setup, as shown in Figure 1. They can then specify ﬁrewall
policies based on source and destination addresses and pro-
tocol information to regulate communication between these
segments. To retain security guarantees of perimeter ﬁrewalls,
administrators usually aim to prohibit secondary WAN con-
nections (e.g., 4G/5G) or other bridges that would subvert the
gateway’s centralized position.
Unfortunately, perimeter ﬁrewalls are restricted to coarse-
grained policies. They ﬁlter trafﬁc based on host information
(IP addresses, port number) and transport protocol (e.g., TCP
or UDP). Firewalls cannot ﬁlter communication per applica-
tion, as the application source is unknown. Firewalls therefore
lack mechanisms to block communication of undesired and/or
potentially malicious software. Firewalls have been extended
to learn about client programs using host-based sensors [11].
However, these existing app attributions can be undermined
when attackers compromise client systems (cf. Section 3), as
malware can inject into allowlisted processes [4], or escalate
its privileges to subvert host sensors.
This challenging setting is exactly our use case. We aim
to provide app-grained trafﬁc attribution to organizations
with stationary clients that are potentially compromised by
malware and/or want to isolate untrusted apps. Identical to
the ﬁrewall setting (“bastion host”), also in our threat model
the ﬁrewall and its underlying system is fully trusted. In con-
trast to ﬁrewalls, however, we tolerate a system-level attacker
fully controlling the client’s software stack, including its OS
and hypervisor(s). That is, we do not mistrust the user or its
hardware, but allow its host system to be fully compromised.
After compromise, attackers will attempt to leak sensitive host
information either directly or indirectly by manipulating the
network trafﬁc of shielded applications.1
To tackle this problem, we leverage trusted hardware to en-
able ﬁrewalls to rely on app identiﬁcations for network trafﬁc.
Technically, we shield client apps inside an Intel SGX enclave
with a trusted LibOS. Administrators can then maintain a
list of trusted apps and use their identiﬁers to create ﬁrewall
policies that govern which network resources a given app can
access. For ease of discussion, we protect client systems and
assume that internal servers are not compromised, while our
methodology can also be applied to servers in principle.
For our work, we follow the classical SGX threat model.
Denial-of-Service (DoS), side-channel attacks, and physical
attacks against the CPU are out of scope [35, 58, 59] and
can be tackled by orthogonal work [1, 41, 49, 54]. Similarly,
1We refer to related work to mitigate covert channels [8, 60] and focus on
stopping explicit and malicious information exchange instead.
754    29th USENIX Security Symposium
USENIX Association
However, Assayer has no insights into the app identities of
annotated trafﬁc (no introspection) and cannot prevent in-
fected or malicious apps from submitting arbitrary trafﬁc for
annotation. Thus, Assayer can neither provide trafﬁc-to-app
attribution (Attr:
).
) nor prevent leaks by malware (¬IL:
Alcatraz [3] establishes secure tunnels between SGX en-
claves integrated into network nodes (incl. clients and gate-
way). Trafﬁc is securely tunneled between enclaves with hop-
speciﬁc keys to provide trafﬁc conﬁdentiality and integrity
as well as path integrity. While Alcatraz shields tunneled IP
trafﬁc from MITM attackers and compromised switches, Alca-
traz doesn’t protect trafﬁc against client compromise (C+I:
).
Therefore, Alcatraz’s client enclaves cannot link trafﬁc to
apps (Attr:
) and do not restrict access to the tunnel, s.t. local
attackers can send arbitrary authenticated IP packets (¬IL:
).
EndBox [22] outsources middlebox services to untrusted
client systems for scalability. EndBox runs inside an SGX
enclave and tunnels all app trafﬁc through a VPN connection
) to the gateway, which blocks trafﬁc that does not
(C+I:
arrive through the enclave-terminated VPN tunnel (TA:
).
However, similar to Alcatraz, EndBox cannot enforce app-
grained policies (Attr:
), as all client apps are untrusted.
Container overlay networks like Slim OS [61] or Docker-
based networks [14] assign virtual IP addresses to containers
enabling per-container ﬁrewall policies at virtual switches.
However, they cannot protect against system-level attackers,
as they trust the client OS, have no HW-based container iden-
tiﬁers, and do not deal with information leakage.
Client-side Solutions with Host-level Firewalls. Host-
based ﬁrewalls enforce policies directly at the client host, but
do not provide an enterprise-wide decision and enforcement
point. They are often combined with compartmentalization
frameworks which conﬁne apps in sandboxes to mitigate sys-
tem compromises, which lead to direct ﬁrewall subversion.
For example, iptables [40] is the de facto standard ﬁrewall
conﬁguration tool in Linux. A Debian extension allows poli-
cies per user and process ID [27], while mandatory access
control (MAC) modules [51, 56] allow ﬁne-grained policies
(incl. app-grained). However, none of these approaches shares
data with a central gateway ﬁrewall. While some ﬁrewalls
support labeled IPsec, which can negotiate MAC contexts as
trafﬁc selectors [28], labeled IPsec faces major conﬁguration
and key management complexity. ClipOS [12] is a hardened
Linux which sandboxes apps and plans to include multi-level
compartmentalization support. However, system-level attack-
ers can subvert all aforementioned approaches.
QubesOS [48] uses Xen to sandbox all apps into isolated
VMs and provides per-app VM network policies. QubesOS
could thus be modeled to enable app-grained, central policy
enforcement by setting up separate VPN tunnels for each
application VM and enforce rules on the unique per-app VPN
IP addresses. However, this would require a complex client
setup and requires trust in the hypervisor. In contrast, we
want to root our app attribution in hardware and stay fully
Figure 1: Overview of Network Topology and Threat Model
enclaves are trusted and free of vulnerabilities. Any disk I/O
by the application has to be protected (e.g., hashing ﬁles and
transparent sealing as provided by existing ﬁle system shields
and SDK functions [2, 9, 25]). Finally, we assume that all
locally exposed enclave interfaces are shielded [55] to avoid
an oracle-like API access that could be abused for information
leaks based on confused deputy attacks.
3 Related Work
Table 1 summarizes related work and its deﬁciencies to
cope with our threat model. For the discussion, we consider
the following attackers: (a) user-space malware (MWuser),
(b) system-level attackers at the client (Syscli) or middlebox
(Sysmbox), and (c) on-path MITM attackers (mitm). The last
four columns rate if an approach fulﬁlls (yes:
, n/a: -)
the following requirements: (i) Conﬁdentiality and integrity
(C+I) of client trafﬁc (incl. IP headers and DNS queries),
(ii) trafﬁc authentication (TA) of either protected client or host
sensor trafﬁc, (iii) secure (client) trafﬁc-to-app attribution
(Attr), and (iv) protection against information leakage (¬IL)—
deﬁned as security requirements SR2–SR6 in Section 5.