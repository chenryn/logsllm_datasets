## PostgreSQL partition table or inherits table predict count and gap and privilege monitor  
### 作者                           
digoal                            
### 日期                            
2013-01-04                                                      
### 标签        
PostgreSQL , 监控 , nagios , check_postgres , customize nagios script , partition table , inherit                            
----        
## 背景                      
当管理的数据库越来越多, 分区表也越来越多, 一个人可能要维护几十万的分区表. 对于分表的监控显得尤为重要.  
本文基于PostgreSQL 9.2 进行讲解, 其他版本可能需要略微调整.  
PostgreSQL 的分区表除了性能方面需要加强以外, 管理方面也需要加强.  
例如,   
## 一、分区表的气泡, 例如以下情况 :   
父表:  
```  
tbl  
```  
子表 :   
```  
tbl_2012_01  
tbl_2012_02  
tbl_2012_03  
tbl_2012_05  
tbl_2012_06  
```  
以上分区表tbl_2012_04不存在, 说明存在气泡.  
## 二、分区表的子表权限和父表权限不一致, 例如以下情况 :   
一般来说父表权限应该和子表权限一致, 什么时候可能遇到不一致的情况呢?   
1\. 新增了子表, 忘记给新增的子表赋予权限.  
例如系统中有另外的用户需要读分区表, 在一段时间后新增了子表, 很有可能会忘记赋予权限.  
PostgreSQL 9.0开始, 只要给主表赋权, 直接操作主表的话, 不需要子表权限. 但是直接查询子表的话, 还是需要赋权的.  
```  
Note how table access permissions are handled. Querying a parent table can automatically access data in child tables without further access privilege checking.   
This preserves the appearance that the data is (also) in the parent table.   
Accessing the child tables directly is, however, not automatically allowed and would require further privileges to be granted.  
```  
## 三、分区表的过期
例如以下情况 :   
父表:   
```  
tbl  
```  
子表 :   
```  
tbl_2012_12  
tbl_2013_01  
```  
那么到2013年02月份的时候, 子表tbl_2013_02还不存在, 通常会报表不存在的错误.  
接下来将针对以上几种情况进行监控, 假设表名遵循以下规则 :   
1\. 表名中的日期使用标准的yyyy, mm, dd 格式.   
例如, tbl_2012_1_1 是不合法的,   
应该改成tbl_2012_01_01.  
2\. 继承表的表名应该包含父表的表名作为前缀.  
例如, tbl, tbl_2014.  
监控还需要用到pg_inherits这个系统表, 其中inhseqno字段需要注意一下 :   
```  
  If there is more than one direct parent for a child table (multiple inheritance),   
  this number tells the order in which the inherited columns are to be arranged. The count starts at 1.  
```  
当一个表直接继承多个父表的时候, 可用inhseqno来区分.  
如下 :   
```  
digoal=> create table t1(id int);  
CREATE TABLE  
digoal=> create table t2(id int);  
CREATE TABLE  
digoal=> create table t(id int) inherits(t1);  
NOTICE:  merging column "id" with inherited definition  
CREATE TABLE  
digoal=> alter table t inherit t2;  
ALTER TABLE  
digoal=> select inhparent::regclass,inhrelid::regclass,inhseqno from pg_inherits ;  
 inhparent | inhrelid | inhseqno   
-----------+----------+----------  
 t1        | t        |        1  
 t2        | t        |        2  
(2 rows)  
```  
解除继承后重新继承的话, inhseqno会增加.  
```  
digoal=> alter table t no inherit t1;  
ALTER TABLE  
digoal=> alter table t inherit t1;  
ALTER TABLE  
digoal=> select inhparent::regclass,inhrelid::regclass,inhseqno from pg_inherits ;  
 inhparent | inhrelid | inhseqno   
-----------+----------+----------  
 t2        | t        |        2  
 t1        | t        |        3  
(2 rows)  
```  
在被监控的数据库中创建2个函数, 1个视图 :   
通过pg_class.oid获取权限的函数, 用于比较子表的权限和父表的权限是否一致 .   
```  
create or replace function mon_part_get_acl(i_oid oid) returns aclitem[] as $$  
declare  
  result aclitem[] := '{}'::aclitem[];  
begin  
  select relacl into result from pg_class where oid=i_oid and relacl is not null;  
  if found then  
    return result;  
  else  
    return '{}'::aclitem[];  
  end if;  
exception when others then  
  return '{}'::aclitem[];  
end;  
$$ language plpgsql;  
```  
把表名的数字转成日期的函数, 用于分析gap等.  
```  
create or replace function mon_part_conv_to_date(i_relname text, i_prefix text) returns date as $$  
declare  
  v_len int;  
  v_date text := '';  
  i text := '';  
  v_suffix text := '';  
begin  
  v_suffix := replace(i_relname,i_prefix,'');  
  FOREACH i IN ARRAY regexp_split_to_array(v_suffix, '')  
  loop  
    if (i >= '0' and i = '18' and substr(v_date,1,2) = 4 and v_len =365 then  -- 预计按年分区  
    pdate - date_trunc('day', (pdate - interval '1 year'))::date  
  when pdate-lag_pdate >=28 then  -- 预计按月分区  
    pdate - date_trunc('day', (pdate - interval '1 month'))::date  
  when pdate-lag_pdate >=1 then  -- 预计按日分区  
    1  
  else   
    0.9  -- 分区间隔小于1天  
  end AS predict_gap  
from   
(  
select   
  row_number() over (partition by inhparent order by mon_part_conv_to_date(inhrelid::regclass::text,inhparent::regclass::text)) AS rn,  
  current_database() AS dbname,   
  inhparent::regclass::text AS inhparent,   
  lag(inhrelid::regclass::text,1) over (partition by inhparent order by mon_part_conv_to_date(inhrelid::regclass::text,inhparent::regclass::text)) AS lag_inhrelid,  
  inhrelid::regclass::text AS inhrelid,   
  mon_part_get_acl(inhparent) AS acl_inhparent,   
  mon_part_get_acl(inhrelid) AS acl_inhrelid,   
  mon_part_conv_to_date(inhrelid::regclass::text,inhparent::regclass::text) AS pdate,   
  lag(mon_part_conv_to_date(inhrelid::regclass::text,inhparent::regclass::text), 1) over (partition by inhparent order by mon_part_conv_to_date(inhrelid::regclass::text,inhparent::regclass::text)) AS lag_pdate,  
  max(mon_part_conv_to_date(inhrelid::regclass::text,inhparent::regclass::text)) over (partition by inhparent) AS max_pdate  
from pg_inherits   
) t   
) t;  
```  
视图结构如下 :   
```  
   View "payment.v_mon_partition_tables"  
      Column       |   Type    | Modifiers   
-------------------+-----------+-----------  
 rn                | bigint    |   
 dbname            | name      |   
 inhparent         | text      |   
 lag_inhrelid      | text      |   
 inhrelid          | text      |   
 acl_inhparent     | aclitem[] |   
 acl_inhrelid      | aclitem[] |   
 pdate             | date      |   
 lag_pdate         | date      |   
 max_pdate         | date      |   
 gap               | integer   |   
 predict_gap       | numeric   |   
 future_tables_cnt | numeric   |   
```  
监控日期继承表存在气泡SQL,  
```  
select * from v_mon_partition_tables  
  where   
  gap<>predict_gap   
  and pdate <> '22220101'::date   
  and lag_pdate is not null;  
```  
## 监控过期的子表  
例如保持未来有10个子表可用,并且未来2年(731day)都有子表已经创建,  
```  
select * from  
(  
select dbname,inhparent,lag_inhrelid,inhrelid,max_pdate,predict_gap,future_tables_cnt,row_number() over (partition by inhparent order by pdate desc) AS rn  
from v_mon_partition_tables  
  where   
  (future_tables_cnt '22220101'::date   
  and lag_pdate is not null  
) t order by rn;  
```  
继承表的权限是否一致,  
```  
select * from v_mon_partition_tables  
  where acl_inhparent<>acl_inhrelid;  