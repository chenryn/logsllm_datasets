# 概述
Fortify是一款商业级的源码扫描工具，其工作原理和codeql类似，甚至一些规则编写的语法都很相似，其工作示意图如下：
首先`Fortify`对源码进行分析（需要编译），然后提取出相关信息保存到某个位置，然后加载规则进行扫描，扫描的结果保存为 `.fpr` 文件，然后用户使用
`GUI` 程序对结果进行分析，排查漏洞。
# 环境搭建
本文的分析方式是在 `Linux` 上对源码进行编译、扫描，然后在 `Windows` 平台对扫描结果进行分析，所以涉及 `Windows` 和
`Linux` 两个平台的环境搭建。
## Windows搭建
首先双击 `Fortify_SCA_and_Apps_20.1.1_windows_x64.exe` 安装
安装完成后，把 `fortify-common-20.1.1.0007.jar` 拷贝 `Core\lib` 进行破解，然后需要把 `rules`
目录的规则文件拷贝到安装目录下的 `Core\config\rules` 的路径下，该路径下保存的是Fortify的默认规则库。
`ExternalMetadata` 下的文件也拷贝到 `Core\config\ExternalMetadata` 目录即可
最后执行 `auditworkbench.cmd` 即可进入分析源码扫描结果的IDE.
## Linux搭建
解压下载的压缩包，然后执行 `./Fortify_SCA_and_Apps_19.2.1_linux_x64.run`
按照引导完成安装即可，安装完成后进入目录执行`sourceanalyzer`来查看是否安装完成
    $ ./bin/sourceanalyzer -version
    Fortify Static Code Analyzer 19.2.1.0008 (using JRE 1.8.0_181)
然后将 `rules` 和 `ExternalMetadata` 拷贝到对应的目录中完成规则的安装。
# 工具使用
本节涉及代码
    https://github.com/hac425xxx/sca-workshop/tree/master/fortify-example
Fortify的工作原理和codeql类似，首先会需要使用Fortify对目标源码进行分析提取源代码中的信息，然后使用规则从源码信息中查询出匹配的代码。
首先下载代码然后使用 `sourceanalyzer` 来分析源码
    /home/hac425/sca/fortify/bin/sourceanalyzer -b fortify-example make
其中
  * `-b` 指定这次分析的 `id`
  * 后面是编译代码时使用的命令，这里是 `make`
分析完代码后再次执行 `sourceanalyzer` 对源码进行扫描
    /home/hac425/sca/fortify/bin/sourceanalyzer -b fortify-example -scan -f fortify-example.fpr
其中
  * `-b` 指定扫描的 `id` 和之前分析源码时的 `id` 对应
  * `-scan` 表示这次是采用规则对源码进行扫描
  * `-f` 指定扫描结果输出路径，扫描结果可以使用 `auditworkbench.cmd` 进行可视化的分析。
生成 `.fpr` 结果后可以使用 `auditworkbench` 加载分析
# system命令执行检测
本节涉及代码
    https://github.com/hac425xxx/sca-workshop/tree/master/fortify-example/system_rules
漏洞代码如下
    int call_system_example()
    {
        char *user = get_user_input_str();
        char *xx = user;
        system(xx);
        return 1;
    }
首先通过 `get_user_input_str` 获取外部输入， 然后传入 `system` 执行。
下面介绍如何编写 `Fortify` 规则来识别这个漏洞， 规则文件是一个xml文件，其主要结构如下
        EA6AEBB1-F11A-44AD-B5DD-F4F66907184E
        1.0
                    ....
  1. `RulePackID` 表示这个规则文件的 ID， 设置符合格式的唯一字符串即可
  2. `RuleDefinitions` 里面是这个xml文件中的所有规则，每个规则作为`RuleDefinitions`的子节点存在，比如示例中的 `DataflowSourceRule` 节点，表示这是一个 `DataflowSource` 规则，用于指定数据流跟踪的 `source`
我们开发规则实际也只需要在 `RuleDefinitions` 中新增对应的规则节点即可。
`Fortify` 也支持污点跟踪功能，下面就介绍如何定义 `Fortify` 的污点跟踪规则，首先我们需要定义 `source`
，`DataflowSourceRule` 规则用于定义污点源，不过这个只支持定义函数的一些属性作为污点源，比如返回值、参数等，代码如下
        AEFA1FBF-3137-4DD8-A65F-774350C97427
                get_user_input_str
        return
这条规则的作用是告知Fortify的数据流分析引擎 `get_user_input_str` 的返回值是污点数据，规则的解释如下：
  1. 首先 `RuleID` 用于唯一标识一条规则
  2. `FunctionIdentifier` 用于匹配一个函数， 其中包含一个 `FunctionName` 子节点，表示通过函数名进行匹配，这里就是匹配 `get_user_input_str` 函数
  3. 然后 `OutArguments` 用于定义污点源， `return` 表示该函数的返回值是污点数据，如果该节点的值为数字 `n` ， 则表示第 `n` 个参数为污点数据，`n` 从0开始计数。
定义好 `source` 点后，还需要定义 `sink` 点，`DataflowSinkRule` 规则用于定义 `sink` 点
        AA212456-92CD-48E0-A5D5-E74CC26ADDF
        Command Injection
        4.0
            0
                system
这条规则的作用是设置 `system` 的第 `0` 个参数为 `sink` 点，规则解释如下：
  1. `VulnCategory` 是一个字符串，会在扫描结果中呈现
  2. `FunctionIdentifier` 用于匹配一个函数，这里就是匹配 `system` 函数
  3. `Sink` 和 `InArguments` 用于表示函数的第 `0` 个参数为 `sink` 点
规则编写完后，保存成一个 `xml` 文件，然后在对源码进行扫描时通过 `-rules` 指定自定义的规则文件即可
    /home/hac425/sca/fortify/bin/sourceanalyzer -rules system.xml -b fortify-example -scan -f fortify-example.fpr -no-default-rules
ps: `-no-default-rules` 表示不使用Fortify的默认规则，这里主要是在自己开发规则时避免干扰。
扫描的结果如下
由于我们没有考虑 `clean_data` 函数对外部输入的过滤，所以会导致误报
    int call_system_safe_example()
    {
        char *user = get_user_input_str();
        char *xx = user;
        if (!clean_data(xx))
            return 1;
        system(xx);
        return 1;
    }
可以使用 `DataflowCleanseRule` 规则来定义这类会对输入进行过滤的函数
        3EC057A4-AE7A-42C4-BAA0-3ACB36C8AB4B
                clean_data
        0
规则表示 `clean_data` 函数执行后其第 0 个参数就是干净的（不再是污点值），此时就可以把外部数据被过滤的场景从查询结果中剔除掉了。
此时的扫描还会漏报 `call_our_wrapper_system_custom_memcpy_example`
，因为其中使用了custom_memcpy这个外部函数来进行内存拷贝，这样`Fortify`在进行污点跟踪的时候就会导致污点数据丢失，从而漏报。
    int custom_memcpy(char *dst, char *src, int sz);
    int call_our_wrapper_system_custom_memcpy_example()
    {
        char *user = get_user_input_str();
        char *tmp = malloc(strlen(user) + 1);
        custom_memcpy(tmp, user, strlen(user));
        our_wrapper_system(tmp);
        return 1;
    }
我们可以使用 `DataflowPassthroughRule` 规则来对这个函数进行建模
        C929ED5F-9E6A-4CB5-B8AE-AAAAD3C20BDC
                custom_memcpy
        1
        0
规则作用是告知 `Fortify` 调用 `custom_memcpy` 函数时，第 `1` 个参数的污点数据会传播到第 `0` 个参数，结果如下
# system命令执行检测 # 2
除了使用 DataflowSourceRule 、DataflowSinkRule 等规则来定义污点跟踪相关的属性外，Fortify还支持使用
CharacterizationRule 来定义污点跟踪相关的特性。
其中对应关系如[下图所示](https://tech.esvali.com/mf_manuals/html/sca_ssc/hpe_security_fortify_static_code_analyzer-custom_rules_guide.htm)：
根据文档的使用示例，修修改改很快就可以使用 `CharacterizationRule` 来搜索出涉及 `system` 命令执行的代码，代码路径如下
    https://github.com/hac425xxx/sca-workshop/blob/master/fortify-example/system_rules/system_CharacterizationRule.xml
介绍具体的 `CharacterizationRule` 规则实现之前，先介绍一下 `StructuralRule` 规则，因为
`CharacterizationRule` 就是通过 `StructuralRule` 的语法来匹配代码中的语法结构。
`StructuralRule` 官方文档中的内容如下
    The Structural Analyzer operates on a model of the program source code called the structural tree. The structural tree is made up of a set of nodes that represent program constructs such as classes, functions, fields, code blocks, statements, and expressions.
Fortify在 **编译/分析** 代码过程中会把代码中的元素（代码块、类、表达式、语句等）通过树状结构体组装起来形成一颗 structural
tree，然后扫描的时候使用 Structural Analyzer 来解析 StructuralRule ，最后输出匹配的代码。
下面以一个简单的示例看看 structural tree 的结构，示例代码如下
    class C { 
        private int f; 
        void func() {
        }
    }
代码对应的树结构如下