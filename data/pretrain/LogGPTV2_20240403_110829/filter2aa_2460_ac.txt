### Identifying and Analyzing RPC Servers and Clients

#### Finding RPC Servers
To identify executables that start an RPC server, you can use the `dumpbin.exe` tool to inspect the imports of each executable. Here is a PowerShell script to find executables that import the `RpcServerListen` function from `rpcrt4.dll`:

```powershell
Get-ChildItem -Path "C:\Windows\System32\" -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
    $out = & "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\dumpbin.exe" /IMPORTS:rpcrt4.dll $_.VersionInfo.FileName
    if ($out -like "*RpcServerListen*") {
        Write-Host "[+] Exe starting RPC Server: $($_.VersionInfo.FileName)"
        Write-Output "[+] $($_.VersionInfo.FileName)`n`n $($out|%{"$_`n"})" | Out-File -FilePath EXEs_RpcServerListen.txt -Append
    }
}
```

Another method to find interesting RPC servers is by querying the RPC Endpoint Mapper, either locally or on a remote system. Microsoft provides a utility called `PortQry` for this purpose:

```sh
C:\PortQryV2\PortQry.exe -n <target> -e 135
```

This tool provides information about remote RPC interfaces known to the Endpoint Mapper. Note that well-known endpoints do not need to inform the Endpoint Mapper about their interfaces.

You can also query the Endpoint Manager directly using the `RpcMgmtEpEltInqBegin` and `RpcMgmtEpEltInqNext` functions. A sample implementation, named `RPCDump`, was included in Chris McNab’s book "Network Security Assessment". I have ported this tool to VC++ and made some usability changes. The fork is available at [https://github.com/csandker/RPCDump](https://github.com/csandker/RPCDump).

#### Finding RPC Clients
Identifying clients that connect to local or remote RPC servers can be done in two ways:
1. **Finding Executables/Processes that Use Client RPC APIs**:
   Similar to finding RPC servers, you can use `dumpbin.exe` to find executables that import the `RpcStringBindingCompose` function from `rpcrt4.dll`.

   ```powershell
   Get-ChildItem -Path "C:\Windows\System32\" -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
       $out = & "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\dumpbin.exe" /IMPORTS:rpcrt4.dll $_.VersionInfo.FileName
       if ($out -like "*RpcStringBindingCompose*") {
           Write-Host "[+] Exe creates RPC Binding (potential RPC Client): $($_.VersionInfo.FileName)"
           Write-Output "[+] $($_.VersionInfo.FileName)`n`n $($out|%{"$_`n"})" | Out-File -FilePath EXEs_RpcClients.txt -Append
       }
   }
   ```

2. **Caught Clients in the Act**:
   You can spot clients while they are connecting to their target. One way to do this is by inspecting network traffic with Wireshark, using the 'DCERPC' filter to spot connections.

#### Unauthorized Access
Once you have identified an RPC server, check if you can access it without authorization. You can either implement your own client or refer to the Access Matrix to see if your client can connect to the server.

If the server sets authentication information using `RpcServerRegisterAuthInfo`, remember that an authenticated server binding does not enforce the client to use an authenticated binding. Client calls with invalid credentials will not be dispatched, but calls with no credentials will be.

#### Client Impersonation
Client impersonation is another interesting attack vector. The steps to impersonate a client are:
1. **Find a RPC client connecting to your server**.
2. **Ensure the client uses an authenticated binding**.
3. **Set the Impersonation Level to `SecurityImpersonation` or higher**.

The process involves:
- Calling `RpcImpersonateClient` within your server interface function.
- Checking the return status of `RpcImpersonateClient`.
- Using `GetCurrentThread` and `OpenThreadToken` to get the client's Impersonation token.
- Calling `DuplicateTokenEx` to turn the Impersonation token into a primary token.
- Returning to the original server thread context with `RpcRevertToSelfEx`.
- Creating a new process with the client's token using `CreateProcessWithTokenW`.

If the client does not authenticate its binding, `RpcImpersonateClient` will return `Error 1764 (RPC_S_BINDING_HAS_NO_AUTH)`.

#### Server Non-Impersonation
Servers that impersonate clients and fail to check the return status of `RpcImpersonateClient` can be exploited. The recipe for this attack is:
1. **Find a server that impersonates its clients**.
2. **Ensure the server runs actions in an assumed impersonated context**.
3. **Force the impersonation attempt to fail**.

To force a failed impersonation, you can:
- Connect from an unauthenticated binding.
- Connect from an authenticated binding and set the Impersonation Level to `SecurityAnonymous`.

#### MITM Authenticated NTLM Connections
If you are in a suitable network position, you can:
- Grab the NTLM(v2) challenge response hash and brute-force the user's password.
- Intercept and relay the NTLM connection to gain access to another system.

For more details, refer to:
- Hashcat mode 5600: [https://hashcat.net/wiki/doku.php?id=example_hashes](https://hashcat.net/wiki/doku.php?id=example_hashes)
- NTLM Relay: [https://en.hackndo.com/ntlm-relay/](https://en.hackndo.com/ntlm-relay/)

#### MITM Authenticated GSS_NEGOTIATE Connections
When using `RPC_C_AUTHN_GSS_NEGOTIATE`, the Negotiate SSP is used to determine whether NTLM or Kerberos should be used for authentication. By default, this negotiation will result in Kerberos if both client and server support it.

This negotiation can be attacked to force the usage of NTLM over Kerberos, effectively downgrading the authentication scheme. For more details, see: [Downgrade SPNEGO Authentication](https://your-link-here).

#### References
- Microsoft’s documentation of RPC: [https://docs.microsoft.com/en-us/windows/win32/rpc/overviews](https://docs.microsoft.com/en-us/windows/win32/rpc/overviews)
- Jonathan Johnson’s Review of RPC: [https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html](https://ipc-research.readthedocs.io/en/latest/subpages/RPC.html)
- Adam Chester’s Review of RPC: [https://blog.xpnsec.com/analysing-rpc-with-ghidra-neo4j/](https://blog.xpnsec.com/analysing-rpc-with-ghidra-neo4j/)
- Code Project on how to start programming with RPC: [https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17](https://www.codeproject.com/Articles/4837/Introduction-to-RPC-Part-1#Implicitandexplicithandles17)

That's it! You've made it through the guide.