### Out of Scope for Other Tools
The scope of other tools, as indicated in their respective papers, does not encompass the functionalities provided by REMEDY. Additionally, integrating these functionalities would require a significant overhaul, as detailed in Sections III, IV, and V.

### Summary of REMEDY's Advantages
REMEDY surpasses other state-of-the-art tools from a theoretical perspective and is the only tool that supports all the required characteristics. It is important to note that none of the other state-of-the-art tools can repair any of the regular expressions (regexes) used in our evaluation.

### Comparison with DFA-Based Approach
We have also compared REMEDY against the DFA-based approach proposed in [41]. While this approach is not based on Programming by Example (PBE), it claims to produce an invulnerable pure regex that is semantically equivalent to the given pure regex. We conducted an experiment using 100 pure regexes randomly selected from the dataset in [7] and compared the size of the repaired regexes generated by both methods.

Our findings are as follows:
1. All 100 regexes repaired by REMEDY were more concise than those produced by the DFA-based approach.
2. On average, the size of the regexes repaired by the DFA-based approach was 37.3 times larger than those repaired by REMEDY.

This difference is partly due to REMEDY's ability to use real-world extensions, even when repairing pure regexes. Additionally, the DFA-based approach ensures semantic equivalence, which can be undesirable and often results in exponentially large DFAs. For example, for the vulnerable regex `·∗·∗=`, REMEDY returns the repaired invulnerable regex `··∗(?]∗font-style:italic[ˆ>]∗>])∗)`, while the DFA-based approach produces a regex of size 73,433,094. In summary, REMEDY generates simpler and more understandable regexes compared to the DFA-based approach.

### Availability
Our tool is available at [42].

### Limitations and Future Work
#### Limitations
1. **Extraction of Captured Strings**: Our approach does not support the extraction of captured strings, a common limitation in regex repair and synthesis. Many recent works also do not support extraction [20], [22]–[24]. This is particularly problematic for real-world regexes, as the string captured in a lookahead is regex engine dependent. A recent work [44] proposes a method involving the execution of an actual regex engine, but this approach may not be ideal for generating a regex that is correct and invulnerable in all contexts. We plan to investigate the support for extraction in future work.
   
   - **Note**: Our formal definition of vulnerability considers all possible captures that can happen in a lookahead, ensuring that our approach is regex-engine-independently sound with respect to invulnerability.

2. **Semantic Equivalence**: Like other PBE methods, we focus on cases where the given regex is incorrect or only partially built. As argued by others [7], [13], [24], semantic equivalence is often too strong for practical use, and PBE better reflects users' intentions. However, in future work, we aim to support the case where the user is interested in repairing only the vulnerability, while preserving the semantics. The possibility of repairing a regex to be invulnerable while maintaining its semantics is an open problem, especially for real-world regexes. Semantic equivalence of real-world regexes is undecidable [26], and regexes with backreferences are generally not determinizable [45].

### Related Work
#### Previous PBE Methods
There has been substantial work on PBE methods for synthesizing and repairing regexes [5], [19]–[24]. However, existing methods do not support real-world features such as lookarounds and backreferences. Most of these methods are not designed with resilience to ReDoS in mind and may generate vulnerable regexes.

#### Recent Work
- **Li et al. [24]**: They propose a PBE regex synthesis and repair method that addresses vulnerability by ensuring the generated regex is deterministic (i.e., 1-unambiguous). However, 1-unambiguity is insufficient for invulnerability, and their method does not guarantee invulnerability. Their method also only supports pure regexes and not real-world extensions.
  
- **van der Merwe et al. [41]**: They propose a technique based on DFA conversion and insertion of positive lookaheads to convert a vulnerable regex into an invulnerable one. However, they only consider the fragment with the positive lookahead extension, and the resulting regexes can be complex and hard to understand.

- **Cody-Kenny et al. [46]**: They propose a genetic-programming-based method to convert a regex into one with more efficient matching. However, their method only supports pure regexes and does not guarantee invulnerability.

#### Vulnerability Detection
While our work focuses on repairing vulnerability, there has been considerable work on detecting vulnerability [12]–[16]. Some works [12], [14], [16] propose formal detection methods, but no prior work on formal vulnerability detection supports real-world extensions. The possibility of sound-and-complete detection of vulnerability for real-world regexes remains an open question.

#### Other Related Works
- **Davis et al. [47]**: They propose a regex engine optimization to eliminate super-linear behavior of real-world regex matching at runtime.
  
- **Loring et al. [44]**: They present a dynamic symbolic execution method for real-world regexes that addresses the regex-engine-dependent capturing issue.

### Conclusion
We have presented REMEDY, a novel PBE regex repair method that guarantees the invulnerability of synthesized regexes and supports real-world regexes containing extended features such as lookarounds, capturing groups, and backreferences. We defined a formal semantics of backtracking matching algorithms for real-world regexes and a formal definition of ReDoS vulnerability. We introduced a condition called Real-World Strong 1-Unambiguity (RWS1U) and proved its soundness for ensuring ReDoS invulnerability. We formalized the RWS1U repair problem, proved its NP-hardness, and presented an algorithm for solving it. Experimental evaluation on a real-world dataset showed that REMEDY can efficiently and successfully repair vulnerable real-world regexes.

To the best of our knowledge, we are the first to address ReDoS vulnerabilities for real-world regexes, whose theoretical properties are substantially different from those of pure regexes tackled by prior works [5], [19]–[24], [41], [46].

### Acknowledgements
We thank the anonymous reviewers for their valuable comments. This work was supported by JSPS KAKENHI Grant Numbers 17H01720, 18K19787, 20H04162, and 20K20625.