without time zone ] time zone)
14 digits
1
timestamp [ (p) ] with both date and time, with
8 bytes 4713 BC 294276 AD microsecond /
time zone time zone
14 digits
date 4 bytes date (no time of day) 4713 BC 5874897 AD 1 day
1
time [ (p) ] [ without
8 bytes time of day (no date) 00:00:00 24:00:00 microsecond /
time zone ]
14 digits
1
time [ (p) ] with time times of day only, with 00:00:00+14 24:00:00-
12 bytes microsecond /
zone time zone 59 1459
14 digits
1
-178000000 178000000
interval [ fields ] [ (p) ] 12 bytes time interval microsecond /
years years
14 digits
Data Type
 常用数据类型, 时间
 特殊日期/时间输入
 postgres=# select timestamp 'epoch',date 'infinity',time 'now',date 'today',time 'allballs';
 timestamp | date | time | date | time
 ---------------------+----------+-----------------+------------+----------
 1970-01-01 00:00:00 | infinity | 15:14:13.461166 | 2012-04-27 | 00:00:00
Data Type
 常用数据类型, 时间
 时间输入输出格式
 postgres=# set datestyle='SQL,DMY';
 postgres=# select now();
 27/04/2012 15:49:51.373789 CST
 postgres=# set datestyle='SQL,MDY';
 postgres=# select now();
 04/27/2012 15:50:07.882063 CST
Data Type
 常用数据类型, 时间
 时间间隔interval 格式
 [@] quantity unit [quantity unit...] [direction]
 P quantity unit [ quantity unit ...] [ T [ quantity unit ...]]
 P [ years-months-days ] [ T hours:minutes:seconds ]
 IntervalStyle样式
 postgres=# show IntervalStyle ;
 postgres
 postgres=# select interval 'P-1Y-2M3DT-4H-5M-6S';
 -1 years -2 mons +3 days -04:05:06
 postgres=# select interval '1 day ago';
 -1 days
 postgres=# set IntervalStyle ='sql_standard';
 postgres=# select interval 'P-1Y-2M3DT-4H-5M-6S';
 -1-2 +3 -4:05:06
Data Type
 常用数据类型, 布尔
Name Storage Size Description
boolean 1 byte state of true or false
 真
 TRUE 't' 'true' 'y' 'yes' 'on' '1'
 假
 FALSE 'f' 'false' 'n' 'no' 'off' '0'
 unknown
 NULL
Data Type
 常用数据类型, 枚举
 CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
 CREATE TABLE person (name text,current_mood mood);
 INSERT INTO person VALUES ('Moe', 'happy');
 SELECT * FROM person WHERE current_mood = 'happy';
 name | current_mood
 Moe | happy
 (1 row)
 -- 输入一个不存在的枚举值, 将报错
 postgres=# SELECT * FROM person WHERE current_mood = 'happ';
 ERROR: invalid input value for enum mood: "happ"
 -- 避免报错的方法, 把枚举转换成text
 postgres=# SELECT * FROM person WHERE current_mood::text = 'happ';
 name | current_mood
 ------+--------------
 (0 rows)
Data Type
 枚举值每一个在行中占用4 bytes :
 postgres=# select current_mood,pg_column_size(current_mood) from person;
 current_mood | pg_column_size
 --------------+----------------
 happy | 4
 枚举的标签在定义中最大限制由NAMEDATALEN决定, 默认是64-1. 前面已经讲过.
 查找枚举的数据结构 :
 postgres=# select oid,typname from pg_type where typname='mood';
 oid | typname
 ---------+---------
 3952969 | mood
 postgres=# select * from pg_enum where enumtypid=3952969;
 enumtypid | enumsortorder | enumlabel
 -----------+---------------+-----------
 3952969 | 1 | sad
 3952969 | 2 | ok
 3952969 | 3 | happy
Data Type
 枚举类型变更
 ALTER TYPE name ADD VALUE new_enum_value [ { BEFORE | AFTER }
existing_enum_value ]
 This form adds a new value to an enum type. If the new value's place in the enum's ordering is
not specified using BEFORE or AFTER, then the new item is placed at the end of the list of
values.
 注意事项, 添加枚举元素时尽量不要改动原来的元素的位置, 即尽量新增值插到最后.
 否则可能会带来性能问题.
 ALTER TYPE ... ADD VALUE (the form that adds a new value to an enum type) cannot be
executed inside a transaction block.
 Comparisons involving an added enum value will sometimes be slower than comparisons
involving only original members of the enum type. This will usually only occur if BEFORE or
AFTER is used to set the new value's sort position somewhere other than at the end of the list.
However, sometimes it will happen even though the new value is added at the end (this occurs
if the OID counter "wrapped around" since the original creation of the enum type). The
slowdown is usually insignificant; but if it matters, optimal performance can be regained by
dropping and recreating the enum type, or by dumping and reloading the database.
Data Type
 money类型
 显示和客户端参数lc_monetary有关
 postgres=# show lc_monetary;
 C
 postgres=# SELECT '12.345'::money;
 $12.35
 postgres=# set lc_monetary='zh_CN';
 postgres=# SELECT '12.345'::money;
 ￥12.35
Data Type
 bytea类型
 The bytea data type allows storage of binary strings
 A binary string is a sequence of octets (or bytes)
 bytea与字符类型的区别
 binary strings specifically allow storing octets of value zero and other "non-
printable" octets.
 Character strings disallow zero octets, and also disallow any other octet values and
sequences of octet values that are invalid according to the database's selected
character set encoding.
 Second, operations on binary strings process the actual bytes, whereas the
processing of character strings depends on locale settings. In short, binary strings
are appropriate for storing data that the programmer thinks of as "raw bytes",
whereas character strings are appropriate for storing text.
Data Type
 bytea类型
 同时支持两种格式输入
 escape
select E'\\336\\255\\276\\357'::bytea;
 hex, 每两个16进制数字为一组, 表示一个"raw byte"
SELECT E'\\x DE AD BE EF'::bytea;
 支持两种格式输出, 需配置
 9.0引入hex输出(通过配置bytea_output)
 9.0以前为escape输出
 如果有从老版本数据库迁移到9.0及以后版本的情况, 需要注意, 可能再次与程序不
兼容, 只需要将默认值调整为escape即可.
 推荐使用hex格式输入输出
Data Type
 几何类型
Data Type
 Network Address Types
Data Type
 网段填充 :
 Table "digoal.tbl_ip_info"
 Column | Type | Modifiers
 ----------+-----------------------+-----------
 id | integer |
 province | character varying(10) | 省份
 start_ip | inet | 开始IP
 end_ip | inet | 结束IP
 digoal=> insert into tbl_ip_info values (1,'浙江','192.168.1.254','192.168.2.5');
 digoal=> insert into tbl_ip_info values (2,'广东','192.168.2.254','192.168.3.5');
 digoal=> insert into tbl_ip_info values (3,'湖南','192.168.3.254','192.168.4.5');
Data Type
 digoal=> select id,generate_series(0,end_ip-  2 | 192.168.3.0
start_ip)+start_ip from tbl_ip_info ;
 2 | 192.168.3.1
  2 | 192.168.3.2
 id | ?column?  2 | 192.168.3.3
 ----+---------------  2 | 192.168.3.4
 1 | 192.168.1.254  2 | 192.168.3.5
 1 | 192.168.1.255  3 | 192.168.3.254
 1 | 192.168.2.0  3 | 192.168.3.255
 1 | 192.168.2.1  3 | 192.168.4.0
 1 | 192.168.2.2  3 | 192.168.4.1
 1 | 192.168.2.3  3 | 192.168.4.2
 1 | 192.168.2.4  3 | 192.168.4.3
 1 | 192.168.2.5  3 | 192.168.4.4
 2 | 192.168.2.254  3 | 192.168.4.5
 2 | 192.168.2.255  (24 rows)
Data Type
 Bit String Type
 Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are
two SQL bit types: bit(n) and bit varying(n), where n is a positive integer.
 CREATE TABLE test (a BIT(3), b BIT VARYING(5));
 INSERT INTO test VALUES (B'101', B'00');
 INSERT INTO test VALUES (B'10', B'101');
 ERROR: bit string length 2 does not match type bit(3)
 INSERT INTO test VALUES (B'10'::bit(3), B'101');
 SELECT * FROM test;
 a | b
 -----+-----
 101 | 00
 100 | 101
Data Type
 全文检索类型
 tsvector
 去除重复分词后按分词顺序存储
 可以存储位置信息和权重信息
 tsquery
 存储查询的分词, 可存储权重信息
Data Type
 全文检索类型
label * specify prefix matching
Data Type
 uuid
 UUIDs could be generated by client applications or other libraries invoked through a server-
side function.
 specifically a group of 8 digits followed by three groups of 4 digits followed by a group of 12
digits, for a total of 32 digits representing the 128 bits.
输出格式:
输入格式:
Data Type
 xml
 Use of this data type requires the installation to have been built with configure --with-libxml
 构造xml类型的语法
 SQL标准写法
 XMLPARSE ( { DOCUMENT | CONTENT } value)
 例如
 XMLPARSE (DOCUMENT 'Manual...')
 XMLPARSE (CONTENT 'abcbarfoo')
 PostgreSQL写法
 xml 'bar'
 'bar'::xml
 从xml到字符串的转换
 XMLSERIALIZE ( { DOCUMENT | CONTENT } value AS type )
 例如
 XMLSERIALIZE ( CONTENT 'bar'::xml AS text )
Data Type
 Array
 不限长度
 目前PostgreSQL未对长度强限定, 如int[]和int[10]都不会限定元素个数.
 array_length(ARRAY[[1,2,3,4,5],[6,7,8,9,10]], 1)
 不限维度
 目前PostgreSQL未对维度强限定,如int[]和int[][], 效果是一样的, 都可以存储任意维度的数组.
 矩阵强制
 多维数组中, 同一个维度的元素个数必须相同.
 正确
 array[[1,2,3,4],[5,6,7,8]]
 不正确
 array[[1,2,3,4],[5,6,7]]
 元素强制
 元素类型必须一致
 正确
 array[1,2,3]
 不正确
 array[1,2,'abc']
Data Type
 Array
 扩展
 一维数组支持prepend, append, cat操作
array_append(ARRAY['digoal','francs'],'david')
array_prepend('david',ARRAY['digoal','francs'])
 二维数组仅支持cat操作
array_cat(ARRAY[['digoal','zhou'],['francs','tan']], ARRAY['david','guo'])
 subscript
 元素脚本默认从1开始, 也可以指定.
 array_lower(ARRAY[[1,2,3,4,5],[6,7,8,9,10]], 2)
 array_lower('[-3:-2]={1,2}'::int[], 1)
 select array_upper('[-3:-2]={1,2}'::int[], 1)
Data Type
 Array