title:Machine-Learning-Guided Typestate Analysis for Static Use-After-Free
Detection
author:Hua Yan and
Yulei Sui and
Shiping Chen and
Jingling Xue
Machine-Learning-Guided Typestate Analysis for Static
Use-After-Free Detection
Hua Yan
School of Computer Science and Engineering
University of New South Wales, Australia
Data61, CSIRO, Australia
Yulei Sui
CAI and School of Software
University of Technology Sydney, Australia
Shiping Chen
Data61
CSIRO, Australia
Jingling Xue
School of Computer Science and Engineering
University of New South Wales, Australia
ABSTRACT
Typestate analysis relies on pointer analysis for detecting temporal
memory safety errors, such as use-after-free (UAF). For large pro-
grams, scalable pointer analysis is usually imprecise in analyzing
their hard “corner cases”, such as infeasible paths, recursion cycles,
loops, arrays, and linked lists. Due to a sound over-approximation
of the points-to information, a large number of spurious aliases
will be reported conservatively, causing the corresponding type-
state analysis to report a large number of false alarms. Thus, the
usefulness of typestate analysis for heap-intensive clients, like UAF
detection, becomes rather limited, in practice.
We introduce Tac, a static UAF detector that bridges the gap
between typestate and pointer analyses by machine learning. Tac
learns the correlations between program features and UAF-related
aliases by using a Support Vector Machine (SVM) and applies this
knowledge to further disambiguate the UAF-related aliases reported
imprecisely by the pointer analysis so that only the ones validated
by its SVM classifier are further investigated by the typestate anal-
ysis. Despite its unsoundness, Tac represents a practical typestate
analysis approach for UAF detection. We have implemented Tac
in LLVM-3.8.0 and evaluated it using a set of eight open-source
C/C++ programs. The results show that Tac is effective (in terms of
finding 5 known CVE vulnerabilities, 1 known bug, and 8 new bugs
with a low false alarm rate) and scalable (in terms of analyzing a
large codebase with 2,098 KLOC in just over 4 hours).
CCS CONCEPTS
• Security and privacy → Software and application security;
• Theory of computation → Program analysis; • Computing
methodologies → Machine learning;
KEYWORDS
use-after-free; vulnerability detection; static analysis; machine
learning
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134620
Figure 1: A finite state automation (FSA) for UAF.
ACM Reference Format:
Hua Yan, Yulei Sui, Shiping Chen, and Jingling Xue. 2017. Machine-Learning-
Guided Typestate Analysis for Static Use-After-Free Detection . In Proceed-
ings of ACSAC 2017, San Juan, PR, USA, December 4–8, 2017, 13 pages.
https://doi.org/10.1145/3134600.3134620
1 INTRODUCTION
Use-after-free (UAF) vulnerabilities, i.e., dangling pointer derefer-
ences (accessing objects that have already been freed) in C/C++ pro-
grams can cause data corruption [14, 70], information leaks [32, 53],
denial-of-service attacks (via program crashes) [11], and control-
flow hijacking attacks [9, 19, 20]. While other memory corruption
bugs, such as buffer overflows, have become harder to exploit due to
various mitigation techniques [14, 61, 78], UAF has recently become
a significantly more important target for exploitation [32, 77].
Recent years have witnessed an increasingly large body of re-
search on detecting or mitigating UAF vulnerabilities. Most ex-
isting approaches rely on dynamic analysis techniques by main-
taining shadow memory [42, 52, 69] and performing runtime
checks [9, 32, 77]. Dynamic analysis yields no or few false posi-
tives, but can incur non-negligible runtime and memory overheads,
hindering their adoption in production environments. In addition,
dynamic analysis often suffers from binary incompatibility issues
due to code instrumentation used [61]. When used as bug detectors,
dynamic approaches are often limited by test inputs used and can
thus provide low code coverage and miss true bugs.
Static analysis, which approximates the program behavior at
compile-time, does not suffer from the above limitations, but re-
quires scalable yet precise pointer analysis in order to find memory
errors with low false alarm rates in large programs [32]. Typestate
analysis [21, 57] represents a fundamental approach for detecting
statically temporal memory safety errors in C/C++ programs. For
example, UAF bugs can be detected based on the finite state au-
tomaton (FSA) depicted in Figure 1. The typestates of an object o
are tracked by statically analyzing all the statements (e.g., malloc
livedeaderrorusefreeusefreemallocuse/freeACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Hua Yan, Yulei Sui, Shiping Chen, and Jingling Xue
sites, free sites, and pointer dereferences at loads/stores) that affect
the state transitions along all the possible program paths. A UAF
warning for the object o is reported when error is reached. This
happens when a free site f ree (p) reaches a use site use (q) (which
denotes a memory access on the same object pointed by q, e.g., ∗q)
along a control-flow path, where ∗p and ∗q are aliases, i.e., p and q
point to o. In what follows, such aliases are said to be UAF-related.
Double-free bugs are handled as a special case of UAF bugs.
ESP [17], as a representative path-sensitive typestate analysis
that runs in polynomial time and space, is useful for checking prop-
erties such as “file open-close” [17] and “socket-connection” [21].
Unlike a data-flow-based path-sensitive analysis that computes ex-
ecution states as its data-flow facts by finding a meet-over-all-path
(MOP) solution, ESP avoids examining possibly infinite program
paths by being partially path-sensitive [17, 68]. ESP uses a symbolic
state as a data-flow fact, which includes an execution state and a
property state of an FSA, based on the points-to information. At a
control-flow joint point, ESP produces a single symbolic state, by
merging the execution states whose corresponding property states
are identical, thus yielding a maximal-fixed-point (MFP) solution.
Below we first discuss the challenges faced in developing a prac-
tical typestate analysis for detecting UAF bugs. We then outline the
motivation behind our machine-learning-based solution.
Challenges and Insights. Unlike temporal properties such as “file
open-close” and “socket-connection”, UAF is much harder to handle
by ESP-based typestate analysis both scalably and precisely, due to
complex aliasing in the presence of a large number of free-use pairs
in real-world programs. For example, php-5.6.8 has 340 million
free-use pairs with 1,391 frees and 244,917 uses.
To achieve soundness, any change to the typestate of an object
must be reflected in all pointers that point to the object, i.e., all
aliases of the object. In addition, the typestate transitions of an
object o must be tracked efficiently and precisely from its free site
f ree (p) to all the corresponding use sites use (q), where ∗p and ∗q
are aliases (with o), along possibly many program paths spanning
across possibly many functions in the program.
A typestate analysis becomes more effective if a more precise
pointer analysis is used. Ideally, one may wish to combine both
typestates and points-to information into the same analysis domain
to form a single data-flow-based path-sensitive analysis, which
will be, unfortunately, intractable due to potentially an unbounded
number of paths and undecidability of aliasing [28, 48]. In order to
simplify complexity, several dimensions of pointer analysis are con-
sidered to enable precision and efficiency trade-offs: flow-sensitive
(by distinguishing the flow of control), field-sensitive (by distinguish-
ing different components of an aggregate data structure), context-
sensitive (by distinguishing calling contexts of a function), and/or
path-sensitive (by distinguishing program paths).
In practice, these over-approximation solutions are usually im-
precise, despite recent advances on sparse [23, 76, 79] and demand-
driven pointer analysis [54, 56, 58], in analyzing a number of hard
“corner cases” in a program, such as infeasible paths (by ignoring
path sensitivity or handling it partially), recursion cycles (by merg-
ing all functions in a recursion cycle), loops (by not distinguishing
different iterations of a loop), arrays (by not distinguishing array
elements), and linked lists (by abstracting some of their nodes as
a single one). As a result, a large number of spurious aliases will
be reported, causing the corresponding typestate analysis to report
a large number of spurious state transitions, i.e., false alarms. For
debugging purposes, therefore, the practical usefulness of typestate
analysis for UAF detection becomes limited.
Our Solution. To address the above challenges, we introduce a
new UAF detection framework, Tac, to bridge the gap between
typestate and pointer analyses by machine learning. Our key obser-
vation is that the spurious aliases reported by pointer analysis are
alike and predictable. They share some common program features
explicitly (e.g., in terms of their declaration types) or implicitly (in
terms of their points-to relations). By training Tac using a Two-
Class Support Vector Machine (TC-SVM), existing UAF ground
truths, i.e., codebases containing labeled known false alarms and
true bugs can be leveraged to enable Tac to learn the correlations
between program features and the UAF-related aliases. Then its
SVM classifier can be called upon to further scrutinize the UAF-
related aliases reported imprecisely by the pointer analysis so that
only the ones validated by the SVM classifier are further investi-
gated by the typestate analysis. Despite its unsoundness, Tac turns
out to be a practical tool for detecting UAF bugs efficiently with a
low false alarm rate for large C/C++ programs.
We evaluate the effectiveness of Tac against Tac-NML (Tac
without machine learning) in both its training and analysis phases.
In the training phase, we exercise Tac using a large number of
UAF samples, including manually identified false alarms reported
by Tac-NML and true bugs (both real and injected) in a set of
four C/C++ training programs. By using the standard 5-fold cross
validation, Tac achieves high precision (92.6%) and recall (95.8%)
while Tac-NML is imprecise (42.1%) despite a total recall (100%),
measured in terms of their ability in finding the true bugs in the
training samples provided.
In its analysis phase, Tac finds 109 true UAF bugs out of 266
warnings reported in a set of eight C/C++ programs including the
four used in the training phase. Among the 109 bugs, there are 14
distinct ones (two UAF pairs are considered to be duplicated if they
share the same free site and dereference the same pointer at the
two use sites), including 5 CVE vulnerabilities, 1 known bug and 8
previously unknown ones. Compared to 19,083 warnings reported
by Tac-NML, Tac reports only 266 warnings, achieving a reduction
rate of 98.6%, reducing significantly the amount of manual effort
needed for inspecting a vast number of false alarms.
Contributions. This paper makes the following contributions:
• We present Tac, a new machine-learning-guided typestate
analysis for detecting UAF bugs statically.
• We introduce an SVM classifier specialized for UAF detection
with a set of 35 features that can effectively disambiguate the
UAF-related aliases reported imprecisely by pointer analysis
to help typestate analysis in finding true UAF bugs at a
significantly reduced false alarm rate.
• We have implemented Tac in LLVM-3.8.0 and evaluated it
using eight open-source C/C++ programs (2,098 KLOC). Tac
finds 109 bugs out of 266 warnings by suppressing 19,083
warnings reported by Tac-NML. Among the 109 true bugs,
Machine-Learning-Guided Typestate Analysis for Static Use-After-Free Detection ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
Figure 2: Tac framework.
there are 14 distinct ones, including 5 CVE vulnerabilities, 1
known bug, and 8 previously unknown bugs.
2 OVERVIEW
As shown in Figure 2, Tac has two main components. The training
phase extracts the program features from ground truths and then
uses these features to train an SVM classifier to learn harmful
(benign) UAF-related aliases that cause true bugs (false alarms). A
UAF pair ⟨f ree (p), use (q)⟩ is said to be harmful (benign) if ∗p and
∗q are regarded as aliases (non-aliases) by the SVM classifier.
The analysis phase filters outs many spurious UAF-related aliases
reported by the pointer analysis. A pre-analysis is first performed
to identify a set of candidate UAF pairs ⟨f ree (p), use (q)⟩, where
∗p and ∗q are found to be aliased. For every object o created at an
allocation site, such that o is related to at least one candidate pair
⟨f ree (p), use (q)⟩, where∗p and∗q are aliased with o, a forward slice
of the program starting from the allocation site but restricted only to
the statements into which o flows (referred to as the slice of o below)
is found. Then an on-demand typestate analysis is performed on the
slice of o. Based on the features of ⟨f ree (p), use (q)⟩ extracted on the
fly from this slice, the SVM classifier passes ⟨f ree (p), use (q)⟩, when
it is harmful, to the typestate analysis for further investigation.
2.1 The Training Phase
Ground Truths. We exercise Tac using both false and true UAF
samples in a set of real-world C/C++ programs as training programs.
All such UAF samples are annotated for feature extraction.
Feature Extraction. We use a feature vector consisting of 35 fea-
tures to describe a UAF sample. We categorize these features into
the following four categories: (1) type information (e.g., global,
array and struct), (2) control-flow (e.g., loop, recursion, and the
distance between a free site and a use site), (3) common program-
ming practices (e.g., pointer casting and reference counting), and
(4) points-to information (e.g., the number of objects that may be
used at a use site and the number of UAF pairs sharing the same
free site).
Prediction Model. Our prediction model for UAF detection uses
an SVM classifier. Conceptually, the SVM model used is a harm-
fulness predicate, which separates the input space containing all
the UAF samples into two regions, marked as harmful and benign,
respectively. To tune the intrinsic SVM parameters for optimal ac-
curacy, standard grid search is applied with 5-fold cross validation
by enumerating all possible combinations of the SVM parameters.
Given a set of SVM parameters, 5-fold cross validation computes
the accuracy of the SVM model in three steps. First, all the UAF
samples are divided into 5 equal-sized subsets. Then, each subset, in
turn, is used as a test set with the remaining 4 subsets combined as
its training set. Finally, the averaged accuracy rate obtained is the
expected accuracy of a model under the set of SVM parameters [10].
2.2 The Analysis Phase
Pre-analysis. We start conservatively with a set of candidate ob-
jects that may be unsafe (as they may induce UAF bugs). An object
o (identified by its allocation site) is selected as a candidate to be
further investigated by our typestate analysis if a free site f ree (p)
can reach a use site use (q) via context-sensitive control-flow reacha-
bility in the program, where p and q point to o, i.e., o ∈ pt(p)∩ pt(q).
Here, pt(v) denotes the points-to set of a variable v. In this case, ∗p
and ∗q are aliased (with o). For efficiency reasons, the pre-analysis
is performed in terms of Andersen’s pointer analysis [5] as im-
plemented in [59]. As is standard, context-sensitive control-flow
reachability is solved as a balanced-parentheses problem by match-
ing calls and returns to filter out unrealizable program paths on the