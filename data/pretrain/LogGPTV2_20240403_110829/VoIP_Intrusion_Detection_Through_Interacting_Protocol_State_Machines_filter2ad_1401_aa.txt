title:VoIP Intrusion Detection Through Interacting Protocol State Machines
author:Hemant Sengar and
Duminda Wijesekera and
Haining Wang and
Sushil Jajodia
VoIP Intrusion Detection Through Interacting Protocol State Machines
Hemant Sengar† Duminda Wijesekera† Haining Wang ‡
†Center for Secure Information Systems
Sushil Jajodia†
‡Department of Computer Science
George Mason University
Fairfax, VA 22030, USA
{hsengar,dwijesek,jajodia}@gmu.edu
College of William and Mary
Williamsburg, VA 23187, USA
PI:EMAIL
Abstract
Being a fast-growing Internet application, Voice over In-
ternet Protocol (VoIP) shares the network resources with
the regular Internet trafﬁc, and is susceptible to the existing
security holes of the Internet. Moreover, given that voice
communication is time sensitive and uses a suite of inter-
acting protocols, VoIP exposes new forms of vulnerabilities
to malicious attacks. In this paper, we propose a highly-
needed VoIP intrusion detection system. Our approach is
novel in that, it utilizes not only the state machines of net-
work protocols but also the interaction among them for in-
trusion detection. This detection approach is particularly
suited for protecting VoIP applications, in which a melange
of protocols are involved to provide IP telephony services.
Based on tracking deviations from interacting protocol state
machines, our solution shows promising detection charac-
teristics and low runtime impact on the perceived quality of
voice streams.
1 Introduction
IP telephony, commonly known as Voice over IP (VoIP),
is emerging as a viable alternative to traditional telephone
systems. As the popularity of VoIP and its deployment
grows, it will become the target of hackers and crackers.
VoIP suffers threats from many different protocol layers.
Malicious attackers may exploit the misconﬁguration of de-
vices, the vulnerability of the underlying operating systems,
and protocol implementation ﬂaws to break in. Well-known
attacks of data networks such as worms, viruses, Trojan
horse, denial-of-service (DoS) attacks can also plague VoIP
network devices [16].
An Intrusion Detection System (IDS) helps adminis-
trators to monitor and defend against security breaches.
Intrusion detection techniques are generally divided into
two paradigms, anomaly detection and misuse detection.
In anomaly detection techniques, the deviation from nor-
mal system behaviors is detected, whereas misuse detec-
tion is based on the matching of attack signatures. Un-
like signature-based intrusion detection, anomaly detection
has the advantage of detecting previously-unknown attacks
but at the cost of relatively high false alarm rate. Sekar et
al. [15] introduced a third category of speciﬁcation-based
intrusion detection. Speciﬁcation-based approach takes the
manual development of a speciﬁcation that captures legit-
imate system behavior and detects any deviation thereof.
This approach can detect unseen attacks with low false
alarm rate. Based on the state transition analysis, Vigna
et al. proposed NetSTAT [18] and WebSTAT [19] intru-
sion detection systems. As a popular network-based intru-
sion detection system, Snort [11] monitors network trafﬁc
between trusted devices and the untrusted Internet, and in-
spects packets by signature matching. However, these pre-
vious approaches fall short of defending VoIP applications,
because of the cross-protocol interaction and distributed na-
ture of VoIP.
VoIP systems use multiple protocols for call control and
data delivery. For example, in SIP-based IP telephony, Ses-
sion Initiation Protocol (SIP) [12] is used to control call
setup and teardown, while Real-time Transport Protocol
(RTP) [14] is for media delivery. A VoIP system is dis-
tributed in nature, consisting of IP phones, SIP proxies,
and many other servers. Defending against malicious at-
tacks on such a heterogeneous and distributed environment
is far from trivial. Recently, Wu et al. [20] proposed a state-
ful and cross-protocol intrusion detection architecture for
VoIP, in which protocol dependent information is assem-
bled from multiple packets and aggregated states are used in
the rule-matching engine. Different from their approach, in
this paper, we propose a VoIP IDS based on protocol state
machines. Speciﬁcally, instead of collecting and deriving
the call state and protocol dependent information from the
packets, our approach utilizes the state transitions made in
the protocol state machines for intrusion detection. These
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
transitions are triggered either by the arrival of packets or
the internal interaction between protocol state machines.
Our approach of incorporating the interaction between pro-
tocol state machines is particularly suited for intrusion de-
tection in VoIP. Call control and media delivery protocols
are synchronized by exchanging synchronization messages
for critical events throughout the established sessions.
A protocol state machine based IDS can be considered
as a variant of anomaly detection mechanism, which clas-
siﬁes a deviation from normal behavior as a suspicious at-
tack. The protocol state machine is built from speciﬁcation,
and is used to derive legitimate states and transitions. Af-
ter the protocol state machine is constructed and the related
attribute features are identiﬁed, this protocol state machine
based approach not only lowers the number of false alarms
but also is capable of detecting previously unseen attacks.
To validate its effectiveness, we evaluate the proposed VoIP
Intrusion Detection System (vIDS) using our VoIP network
testbed and OPNET network simulator. Our experimental
results demonstrate that on average the online placement
of vIDS induces the additional delay of (cid:39) 100 ms to call
setup time. The average increase of CPU overhead induced
by vIDS is only (cid:39) 3.6%. Although the associated mem-
ory cost is proportional to the number of calls to be mon-
itored, as with each call, only one instance of a protocol
state machine is maintained at the memory. Once the calls
have successfully reached the ﬁnal state, the corresponding
protocol state machines will be deleted from the memory.
More importantly, the memory cost per call is insigniﬁcant.
Therefore, vIDS can monitor thousands of calls at the same
time and its memory cost can be easily afforded by a mod-
ern computer.
The remainder of this paper is structured as follows. Sec-
tion 2 brieﬂy describes SIP protocol and its usage in enter-
prise networks. Section 3 presents the threat models of SIP
and RTP. Section 4 presents the extended ﬁnite state ma-
chines and its application in developing vIDS. Section 5 de-
tails the architecture of vIDS. Section 6 describes how to
detect the SIP and RTP related attacks using protocol state
machines. Section 7 conducts the performance evaluation
of vIDS. Section 8 surveys related work. Finally, Section 9
concludes the paper.
2 Background
We ﬁrst present the SIP-based IP telephony. Then, we
describe its usage in enterprise networks and illustrate the
placement of vIDS in such a network.
SIP is a text-based application level protocol to setup, mod-
ify, and teardown multimedia sessions between one or more
participants. SIP messages can be transmitted over UDP
or TCP, but UDP is preferred over TCP because of its
simplicity and lower transmission delays. SIP architecture
identiﬁes two basic types of components, user agents (i.e.
phones) and SIP servers (i.e. Location, Redirect, Registrar
and Proxy servers). Each UA is a combination of two enti-
ties, the user agent client (UAC) and the user agent server
(UAS). The UA switches back and forth between being an
UAC and an UAS.
The SIP messages are classiﬁed into two groups: re-
quests and responses. The SIP requests are also called
methods, and there are six of them (INVITE, ACK,
BYE, CANCEL, REGISTER and OPTIONS) described
in [12]. Other methods are proposed as the extensions of
the original six methods. For each request of an UAC, UAS
or SIP server generates a SIP response. Each response mes-
sage is identiﬁed by a numeric status code (similar to HTTP
response messages).
Now, we use an example of a typical call setup ﬂow to
highlight the usage of SIP request and response messages
between user agents UA-A and UA-B. Suppose that the two
UAs belong to different domains that have their own proxy
servers. UA-A calls UA-B using its SIP phone over the In-
ternet. The outbound proxy server uses the Domain Name
System (DNS) to locate the inbound proxy server at the
other domain. After obtaining the IP address of inbound
proxy server, the outbound proxy server of UA-A sends
the INVITE request to the domain of UA-B. The inbound
proxy server consults a location service database to ﬁnd out
the current location of UA-B and forwards the INVITE re-
quest to UA-B’s SIP phone. Exchanging INVITE/200
OK/ACK messages completes the three-way handshake and
establishes a SIP session. A set of parameters are exchanged
via SIP messages (in the message body using Session De-
scription Protocol (SDP) [2]) between the two end points
before a RTP-based voice channel is established. In gen-
eral, the path of media packets is independent of that of
the SIP signaling messages. The signaling protocol remains
oblivious to the changes made to the media path during the
life span of the call, unless it is explicitly requested through
a re-INVITE message. At the end of the call, UA-B (or
UA-A) hangs up by sending a BYE message. Subsequently,
UA-A (or UA-B) terminates the session and sends back a
200 OK response. This example shows the basic function-
ality of SIP, detailed description of the SIP operations is in
RFC 3261 [12].
2.1 SIP-based IP Telephony
2.2 Enterprise IP Telephony
SIP is a standard signaling protocol for VoIP, and is ap-
propriately coined as the “SS7 of future telephony” [6].
Figure 1 illustrates a SIP-based IP telephony enabled
enterprise network and the placement of vIDS inside the
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
still possible to be launched by an authenticated but mis-
behaving UA. In the following, we describe some of these
attacks, which require proper analysis of attack patterns for
detection.
CANCEL Denial of Service Attack: The CANCEL method
is used to terminate pending searches or call attempts.
Speciﬁcally, it asks the UAS to cease the request processing
and generate an error response to the request. A CANCEL is
for an outstanding INVITE, since INVITE is the only re-
quest taking some time (few seconds) to complete. All other
SIP requests are responded immediately. It can be generated
either by a UA or the proxy servers that have received 1xx
responses but still wait for the ﬁnal 2xx responses. Note that
without proper authentication, the receiving UA cannot dif-
ferentiate the spoofed CANCEL message from the genuine
one, leading to the denial of the communication between
UAs.
BYE Denial of Service Attack: When a caller has received
the response message 200 OK, the session is considered
as established. An established media session is terminated
upon receiving a BYE message. It is an end-to-end message
sent by UAs participating in the session. The BYE attack
aborts an established call between UAs. For example, UA-
A and UA-B have established a call (i.e. 200 OK and ACK
messages are already exchanged), suddenly malicious UA-
C sends a BYE message to either UAs, A or B. The receiving
UA will prematurely teardown the established call assuming