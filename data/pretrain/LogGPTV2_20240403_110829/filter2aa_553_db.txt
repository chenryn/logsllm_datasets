#define SLEN 81
void append(FILE *source, FILE *dest);
char * s_gets(char * st, int n);
int main(void)
{
FILE *fa, *fs;  // fa 指向目标文件，fs 指向源文件
int files = 0;     // 附加的文件数量
char file_app[SLEN];  // 目标文件名
char file_src[SLEN];  // 源文件名
int ch;
986
puts("Enter name of destination file:");
s_gets(file_app, SLEN);
if ((fa = fopen(file_app, "a+")) == NULL)
{
fprintf(stderr, "Can't open %s\n", file_app);
exit(EXIT_FAILURE);
}
if (setvbuf(fa, NULL, _IOFBF, BUFSIZE) != 0)
{
fputs("Can't create output buffer\n", stderr);
exit(EXIT_FAILURE);
}
puts("Enter name of first source file (empty line to quit):");
while (s_gets(file_src, SLEN) && file_src[0] != '\0')
{
if (strcmp(file_src, file_app) == 0)
fputs("Can't append file to itself\n", stderr);
else if ((fs = fopen(file_src, "r")) == NULL)
fprintf(stderr, "Can't open %s\n", file_src);
987
else
{
if (setvbuf(fs, NULL, _IOFBF, BUFSIZE) != 0)
{
fputs("Can't create input buffer\n", stderr);
continue;
}
append(fs, fa);
if (ferror(fs) != 0)
fprintf(stderr, "Error in reading file %s.\n",
file_src);
if (ferror(fa) != 0)
fprintf(stderr, "Error in writing file %s.\n",
file_app);
fclose(fs);
files++;
printf("File %s appended.\n", file_src);
puts("Next file (empty line to quit):");
}
988
}
printf("Done appending.%d files appended.\n", files);
rewind(fa);
printf("%s contents:\n", file_app);
while ((ch = getc(fa)) != EOF)
putchar(ch);
puts("Done displaying.");
fclose(fa);
return 0;
}
void append(FILE *source, FILE *dest)
{
size_t bytes;
static char temp[BUFSIZE]; // 只分配一次
while ((bytes = fread(temp, sizeof(char), BUFSIZE, source)) > 0)
fwrite(temp, sizeof(char), bytes, dest);
}
char * s_gets(char * st, int n)
{
989
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是NULL，
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
continue;
}
return ret_val;
}
如果setvbuf()无法创建缓冲区，则返回一个非零值，然后终止程序。可
以用类似的代码为正在拷贝的文件创建一块4096字节的缓冲区。把NULL作
为setvbuf()的第2个参数，便可让函数分配缓冲区的存储空间。
该程序获取文件名所用的函数是 s_gets()，而不是 scanf()，因为 scanf()
会跳过空白，因此无法检测到空行。该程序还用s_gets()代替fgets()，因为后
者在字符串中保留换行符。
990
以下代码防止程序把文件附加在自身末尾：
if (strcmp(file_src, file_app) == 0)
fputs("Can't append file to itself\n",stderr);
参数file_app表示目标文件名，file_src表示正在处理的文件名。
append()函数完成拷贝任务。该函数使用fread()和fwrite()一次拷贝4096
字节，而不是一次拷贝1字节：
void append(FILE *source, FILE *dest)
{
size_t bytes;
static char temp[BUFSIZE]; // 只分配一次
while ((bytes = fread(temp, sizeof(char), BUFSIZE, source)) > 0)
fwrite(temp, sizeof(char), bytes, dest);
}
因为是以附加模式打开由 dest 指定的文件，所以所有的源文件都被依
次添加至目标文件的末尾。注意，temp数组具有静态存储期（意思是在编译
时分配该数组，不是在每次调用append()函数时分配）和块作用域（意思是
该数组属于它所在的函数私有）。
该程序示例使用文本模式的文件。使用"ab+"和"rb"模式可以处理二进制
文件。
13.7.9 用二进制I/O进行随机访问
随机访问是用二进制I/O写入二进制文件最常用的方式，我们来看一个
991
简短的例子。程序清单13.6中的程序创建了一个储存double类型数字的文
件，然后让用户访问这些内容。
程序清单13.6 randbin.c程序
/* randbin.c -- 用二进制I/O进行随机访问 */
#include 
#include 
#define ARSIZE 1000
int main()
{
double numbers[ARSIZE];
double value;
const char * file = "numbers.dat";
int i;
long pos;
FILE *iofile;
// 创建一组 double类型的值
for (i = 0; i = 0 && i 
#include 