---
## Page 55
读也许会更好：首先执行的是main函数中的语句，
文件的顺序应该是先看newline再看threeline再看main。如果你换一个角度，按代码的执行顺序来
读代码和读文章不一样，
通过这个简单的例子可以体会到：
4．使用自定义函数可以使代码更简洁，
3．通过自定义函数可以给一组复杂的操作起一个简单的名字，
2．可以用一个函数调用另一个函数，
1．同一个函数可以被多次调用。
图 3.1.函数调用的执行顺序
例 3.3.较简单的自定义函数
只需要通过threeline这个简单的名字来调用就行了
void threeline(void)
 #include 
int main(void)
void newline(void)
，按从上到下从左到右的顺序读代码未必是最好的。比如上面的例子，
printf("Three
printf("\n");
return 0;
newline(
newline();
eline();
"Another three lines.\n");
这里还剩下两次newline调用，
，后者再去调第三个函数。
lines:\n");
 main函数在任何地方想打印三个空行只需调用一个简单
在一
 不必知道打印三个空行具体怎么
，例如threeline。
，效果也都一样，执行完之
。对于main函数来
这时再去
5
按源
后
---
## Page 56
这样仍然遵循了先声明后使用的原则。
用之前，
在上面的例子中，
以函数原型必须出现在函数调用之前，这也是遵循"先声明后使用
才知道这个函数的名字、参数类型和返回值，
器提供了有用的信息，
型。在代码中可以单独写一个函数原型，后面加;号结束，而不写函数体，例如：
threeline(void)这一行,
现在澄清一下函数声明、
现在读的代码是被哪个函数调用的，这段代码返回后应该从上一个函数的什么地方接着往下读。
以改变函数的定义顺序：
配存储空间的变量声明才叫变量定义，
这种写法只能叫函数声明而不能叫函数定义
读代码的过程就是模仿计算机执行程序的过程，
，而指令在程序运行时当然也要占存储空间。那么没有函数体的函数声明有什么用呢？它为编
int main(void)
void threeline(void)
void
int main(void)
void 
#include 
void threeline(void);
return 0;
threeline();
threeline();
print("Three lines:(\n");
 newline(void)
，编译器在翻译代码的过程中，
，声明了一个函数的名字、参数类型和个数、返回值类型，这称为函数原
函数定义
函数原型（Prototype）这几个概念。比如void
，其实函数也是一样，编译器只有见到函数定义才会生成指
void threeline(void)
newline();
newline();
，这样碰到函数调用时才知道怎么生成相应的指令，
只有带函数体的声明才叫定义。
，我们不仅要记住当前读到了哪一行代码，
：只有见到函数原型（不管带不带函数体）之后
如果使用不带函数体的声明，则可
”的原则。
void newline(void)
void newline(void)
void newline(void)
 要保证每个函数的原型出现在调
printf("\n");
printf("\n");
printf("\n");
上一章讲过，
还要记住
，只有分
所
后
译
---
## Page 57
致和语义上的不矛盾。
达式不能参与运算，
式都有值，
键字的原因：首先从语法上规定没有返回值的函数调用表达式有一
值了吗？然而上一
[4] 敏锐的读者可能会发现一个矛盾：如果函数newline没有返回值，那么表达式newline（)不就没有
也没用到这个函数的返回值，所以执行结果仍然正确。
数的原型是void threeline(void);,
threeline(void);,
但仍然能编译通过，运行结果也对。这里涉及到的规则称为函数的隐式声明
编译时会报警告：
不推荐这种写法。比如按上面的顺序定义这三个函数，但是把开头的两行声明去掉：
StyleC风格写的代码，但绝不应该按这种风格写新的代码。
个数，就不会做语法检查,
器的信息只有函数名和返回值类型。如果在这样的声明之后调用函数，编译器不知道参数的类型和
由于有Old Style C语法的存在,
编译器根据这些信息为函数调用生成相应的指令。然后编译器接着往下看，看到threeline函
所以编译器认为这个隐式声明的参数类型是void，
here
S
void threeline(void)
void newline(void)
int main(void)
#include 
，不必考虑特殊情况，编译器的语法解析比较容易实现；然后从语义上规定void类型的表
newline()
newline()
newline():
printf("\n");
一章讲过任何表达式都有值和类型两个基本属性。
return 0;
 因此newline（）＋1这样的表达式不能通过语义检查，从而兼顾了语法上的-
，所以很容易引入Bug。读者需要了解这个知识点以便维护别人用Old
 并非所有函数声明都包含完整的函数原型,
这样函数的参数和返回值类型都确定下来
 所以不算函数原型,
由于我们调用这个函数时没有传任何参
。其实这正是设计void这么一个关
一个void类型的值，
，我可以解释一下，但绝
，例如void
(Implicit 
，这个声明提供给编译
，这样任何表达
5
---
## Page 58
1.数学函数
一页
全国嵌入式人才培训基地
起始页
一级
3.形参和实参
---
## Page 59
学习C语言的人肯定都乐意看到这句话：“变量是这样定义的，
参数就像定义变量一样，需要为每个参数指明类型，参数的命名也要遵循标识符命名规则。例如：
3.形参和实参 请点评
样声明参数的：
为什么参数声明要用,号做分隔符而不用;号呢？这也是从Old Style C继承下来的，Old Style C是过
的分隔符,
其实这条规定也不算十分例外，也是可以理解的。参数列表中的,号（Comma）是各参数声明之间
用户接受的设计应该遵循最少例外原则（Rule of Least Surprise）。
而定义参数却不可以"。
这意味着不用专门去记住参数应该怎么定义了。
的定义是错的：
需要注意的是，
下面我们定义一个带参数的函数，
上一页
例3.4.带参数的自定义函数
char z;
int x;
void foo(x, Y, z)
void print_time(int hour, minute)
int main(void)
void print_time(int hour, int minute)
#include 
定义变量时可以把相同类型的变量列在一起，
printf("%d:%d\n",hour, minute);
。C语言的设计者也不希望自己设计的语法规则里到处都是例外，
print_time(23, 59);
printf("%d:%d\n", hour, minute);
return 0;
，我们需要在函数定义中指明参数的个数和每个参数的类型，
全国嵌入式人才培训基地
第3章简单函数
3.形参和实参
谁也不愿意看到这句话：“定义变量可以这样写，
，而定义参数却不可以，例如下面这样
参数也是这样定义的，
一模一样"
一个容易被
定义
下一页
8
这
---
## Page 60
 main函数的变量h和print_time函数的参数hour是两个不同的变量，只不过它们的存储空间中都保
相当于在函数print_time中执行了这样一些语句：
数传递参数的过程相当于定义形参变量并且用实参的值来初始化。例如这样调用：
下文判断我说的到底是形参还是实参。记住这条基本原理：形参相当于函数中定义的变量，调用区
我们讨论传一个参数23给函数时,
确切地说
一定要吃到嘴里，不要吃到鼻子里，更不要吃到耳朵里一样。
之所以会犯这种错误，
提醒，例如有的初学者看完第2章常量、变量和表达式之后会这样打印π的值：
念和基本原理，
要想错，
而C++的设计一直饱受争议，这个观点在[UNIX编程艺术]中有详细阐述。
写出任意复杂的程序，
总的来说，
仅有助于记忆，
学习编程语言不应该死记各种语法规定，
现在的C编译器仍然支持这种语法。上例中不写类型的参数y默认是int型。
回到正题。
在本书中，
反
的，
细
，C++的设计就非常复杂，
考，
，值得参考。
 例如上-
printf('
int minute 
int hour =
int main(void)
void print_time(int hour, int minute)
..........................
凡是提醒读者注意的地方都是多少有些Surprise的地方,
C语言的设计是非常优美的，
，或者根本无视组合规则而全凭自己主观臆断所致，
，而且会有更多收获。本书在必要的地方会解释一些Rationale，
int h = 23, m = 59;
 printf("%d:%d\n", hour, minute);
'%d:%d\n", hour, minute);
return 
print_
h;
一是不理解Literal的含义，
很少有例外的规定说这样组合是不允许的，或者那样类推是错误的。相
!u
time(h, m);
0;
，充满了例外，
，我们所说的“参数"是指实参（Argument）
只要理解了少数基本概念和基本原则就可以根据组合规则
，如果能够想清楚设计者这么规定的原因（Rationale）
，全世界没几个人能把C++的所有规则都牢记于心，因
函数中的参数hour就代表23，
二是自己想当然地把变量名组合到字符串里去,
 对这一类问题本书不会做特别的
 初学者如果按常理来想很可能
 完全是因为没有掌握好基本概
参数minute就代表59 
，就好比提醒小孩吃饭
但我习惯都叫参数
，或者启发读者自己
读者可以根据
60
区
布
不
---
## Page 61
总之，每个函数的原型都明确规定了返回值类型以及参数的类型和个数，
第一个参数是constchar*类型的，后面的..可以代表0个或任意多个参数，
肯定有读者注意到了，
有几个形参，在调用时就要传几个实参，
存了相同的值23,
（Interface），调用函数就是使用这个接口，使用接口的前提是必须和接口保持一致。
为"不确定"也是一种明确的规定，
int printf(const char *format,
例程"说明。
要root权限。系统调用和库函数的区别将在第2节“main函数和启动
录，一般用户可以执行用户命令，而执行系统管理命令经常需
注意区分用户命令和系统管理命令，
Page各Section的含义如下：
面描述一个主题，
Man Page是Linux开发最常用的参考手册，
Man Page 请点评
，因为变量h的值赋给了参数nour。
Section
表 3.1. Man Page的Section
，为什么我们每次调用printr传的实参个数都不一样呢？因为C语言规定了-
9
5
4
系统管理命令，例如ifconfig（8）
了bash的各种内建命令 
其它杂项,
游戏
系统配置文件的格式，例如passwd(5)描述了
件/dev/null、/dev/zero的作用
特殊文件，例如nul1(4)描述了设备文
库函数，例如printf(3）
系统调用，
用户命令，
 这些页面被组织成若干
调用函数时要严格遵守这些规定，
系统管理命令通常位于/sbin和/usr/sbin目
，不能多也不能少，每个参数的类型也必须对应上。
，例如_exit(2)
例如1s（1）
···
 用户命令通常位
描述
同理，
第6节“可变参数"将会详细讨论这种格式。
，每个参数都需要得到一个值，函数定义中
由很多页面组成，每个页
，变量m的值赋给了参数minute。
，有时候我们把函数叫做接口
这些参数的类型也是
。C语言的
9
---
## Page 62
2.自定义函数
我们在main函数中调用increment增加变量i和j的值，
1、定义一个函数increment，
习题 请点评
'printf′。请分析错误原因。
一页
int main(void)
void increment(int x)
第3个Section,
Man Page中有些页面有重名,
return 0;
int i = 1,
x=x+ 1;
j = 2;
它的作用是把传进来的参数加1。例如：
或者表示"我这里想说的是printf库函数而不
/*
/*
全国嵌入式人才培训基地
now becomes 
括号中的3表示Man Page的
比如敲man printf命令看到的并不
起始页
上一级
这样能奏效吗？为什么？
4.全局变量、局部变量和作用域
要查看
下一页
3
---
## Page 63
2、每次调用函数时局部变量都表示不同的存储空间。局部变量在每次函数调用时分配存储空间，
我们把函数中定义的变量称为局部变量（LocalVariable）
4.全局变量、局部变量和作用域请点评
量，例如：
们在程序开始运行时分配存储空间，在程序结束时释放存储空间，在任何函数中都可以访问全局变
与局部变量的概念相对的是全局变量（Global Variable）
20)时又分配hour和minute的存储空间，在里面分别存上12和20。
储空间，
在每次函数返回时释放存储空间，
数minute也是如此。
两个不同的变量，
义
所以形参也是一种局部变量。在这里“局部"有两层含义：
上一页
例3.5.全局变量
int main(void)
void print_time(int hour, int minute)
int main(void)
void print_time(void)
int hour = 23, minute = 59;
#include 
 printf("%d:%d\n", hour, minute);
print_
int hour = 23,
 printf("%d:%d in print_time\n", hour, minute);
_time(hour, minute);
4.全局变量、局部变量和作用域
minute = 59;
全国嵌入式人才培训基地
第3章简单函数
全局变量定义在所有的函数体之外，
，由于形参相当于函数中定义的变量，
，但仍然是
下一
8
它
---
## Page 64
要注意一点：局部变量可以用类型相符的任意表达式来初始化，
到目前为止我们在初始化一个变量时都是用常量做lnitializer,
张大纸上的一张小纸，
如果全局变量和局部变量重名了会怎么样呢？如果上面的例子改为：
没
N
符
变
一定要慎用，能用函数传参代替的就不要用全局变量。
易看出访问的先后顺序是怎样的,
对局部变量的访问不仅局限在一个函数内部，而且局限在一次函数调用之中，
某个不起眼的地方对全局变量的读写顺序不正确，
中是看不出来的，源代码的书写顺序并不能反映函数的调用顺序。程序出现了Bug往往就是因为在
正因为全局变量在任何函数中都可以访问，所以在程序运行过程中全局变量被读写的顺序从源代码
（Constant Expression）初始化。例如，全局变量pi这样初始化是合法的：
有找到它的定义，那么再去翻看下面的大纸上有没有定义，例如上图中的变量x。
参考小纸上的定义
中。如上图所示，
量的值。在C语言中每个标识符都有特定的作用域，全局变量是定义在所有函数体之外的标识
第一次调用print_time打印的是全局变量的值，
，它的作用域从定义的位置开始直到源文件结束，
例3.6.作用域
double pi = 3.14 + 0.0016;
int main(void)
void print_time(void)
int x = 10;
int hour = 23, minute = 59;
#include 
printf("%d:%d in print_time\n", hour, minute);