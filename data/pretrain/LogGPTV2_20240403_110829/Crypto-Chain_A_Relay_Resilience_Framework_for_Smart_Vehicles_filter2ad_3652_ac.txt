, sid
, l
, sid
, l
′
, l
′
, l
′
′
′
′
′
′
′
443ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Sani, et al.
′
′
, l
′)), and r
the end of
′
η(H(k.r .r
′ represents an ECDH key. (IV) Shared secret ses-
PRF F, and d.Q
′), which is provided
sion key derivation (DeriveSKey, ptrii , r , r
to only (ID, sid, l) and returns (SKeyPointer, ptriv) to the user at
the end of its execution, where the pointer ptriv points to a shared
′ is an ephemeral ran-
secret session key ki = F
dom values of another user. (V) Compute a cryptographic proof
′), which
and a cryptographic timestamp (CompP&E, ptriv , r , r
is provided to only (ID, sid, l) and returns (P&E, proo f , x,
ctimestamp, t3)
its execution,
to the user at
= MACki(x) is a cryptographic proof com-
where proo f
puted at timestamp t3 and it uses an AES 128-bit encryp-
tion algorithm Enc(.) and 256-bit MAC algorithm MAC(.),
′) is a cryptographic timestamp,
ctimestamp = t3.H(ki , r , r
′). (VI) Verify a cryptographic proof
and x = Encki(ki , r , r
timestamp (VerP/ValT,
and validate a cryptographic
ptriv , proo f , x, ctimestamp, t3), which is provided to only
′) and returns (Validation, t6) to the user at the end of its
(ID
execution, where proo f is verified via V MACki(proo f , x) = 1? at a
′) = Decki(x), and ctimestamp is validated
timestamp t6 and (ki , r , r
′) = ctimestamp. The description of the six above
via t3.H(ki , r , r
commands is provided in Appendix A. Note that the combination
of authentication mechanisms in GetRV, CompEPuK, GenPSK,
DeriveSKey, CompP&E, and VerP/ValT commands represent the
DMA, while the combination of authentication and key exchange
mechanisms in CompEPuk and GenPSK commands represent the
KKE.
, sid
A user of FCC can request for the corruption status of any of its
pointers or keys and the environment can request whether the keys
of a user is stored as corrupted. In the real and ideal worlds, the
environment ensures that a key has the same corruption status. FCC
assumes that every user knows the inputs to be provided for every
command. One could easily see that if the right data is not provided
to execute a command, such command cannot be executed.
= {F
authenc,
unauthenc, and
three encryption schemes
a mac scheme
We now construct a realization PCC of FCC by using standard
cryptographic schemes to implement all commands/operations of
FCC. Formally, PCC is a machine that has the same I/O and network
interfaces as FCC. It is parameterized with the EDPGen(1η) algo-
rithm and timestamp function f with similar properties as FCC,
pubenc
for authenticated symmetric key encryption, unauthenticated sym-
metric key encryption, and public key encryption, respectively,
MAC, two families of PRF F = {Fη}η∈N and
′
′
η}η∈N that take key(s) and salt as input and output a key
F
(see [18] for formal definition of these primitives).
To activate PCC for the first time, we expect PCC to receive some
message m and then initializes itself by executing EDPGen(1η)
and storing the results before processing m. PCC maintains infor-
mation in a similar way as FCC. It keeps track of the ephemeral
random values, keys, and pointers to (i) determine which type of
cryptographic primitive to execute with a given ephemeral ran-
dom value, key, and pointer, for example, F is used for deriving
′ is used for
preshared keys from ECDH keys and salts, while F
deriving shared secret session key from preshared keys and salts
and to (ii) provide strong security guarantees that all the values
and keys are fresh. The implementation of the FCC’s commands in
PCC is provided in Appendix B. Note that the commands GetRV,
CompEPuK, GenPSK, DeriveSKey, CompP&E, and VerP/ValT re-
turns (r , t), (ptri , Q), ptrii, ptriv, (proo f , x, ctimestamp, t3), and t6,
respectively to the user executing the command at the end of its
execution.
We now show that PCC realizes FCC. To show this, we want
to state and prove our theorem that PCC[c] realizes FCC[c]. We
want to use standard cryptographic assumptions for this proof as
these assumptions provide security guarantees. Additionally, we
want to use the Decisional Diffie-Hellman (DDH) assumption [28],
[1] to prove that the simulator in this proof PCC[c] ≤R FCC[c]
′
provides ki and k
i for uncorrupted and corrupted shared secret
session key, respectively. To capture the expected properties of
PCC/FCC, we restrict the environment in this proof not to cause
commitment problem [7] and key cycles [4], i.e., it’s a well-behaved
environment, as many real-world protocols satisfy the conditions
of the well-behaved environment and thus if these protocols are
analyzed using FCC, then FCC can be replaced with PCC afterwards.
We introduce a machine M∗ to ensure that the conditions are
satisfied by the environment. In the following theorem, M∗ is in-
serted between the I/O interface of PCC/FCC and the environment.
M∗ forwards all messages while checking that the conditions are
satisfied. If any of the two conditions is not met, M∗ stops the for-
warding of messages and blocks all communications going forward.
We now obtain the following theorem:
authenc , 
unauthenc , 
Theorem 3. Let 
schemes,
′
pub be encryption
MAC be a MAC scheme, EDPGen(1η) be an algorithm as
be a family of pseudo-random functions, and F be a family
above, F
of pseudorandom functions for EDPGen. Let PCC be parameterized
with these algorithms. Let FCC be parameterized with an ECDH do-
main parameters algorithm EDPGen and a timestamp function f .
Let c be a sequence of cryptographic operations of PCC and FCC such
that every operation ci in c always rely on the preceding operation
ci−1. Then, the following holds true
if PCC[ci(ci−1)] ≤R FCC[ci(ci−1)],
unauthenc and
CTXT secure,
∗|FCC[c]
MAC is IND-CPA and INT-
MAC
is UF-CMA secure, EDPGen always outputs random primes for field
order p and groups with n ≥ 2 and such that the DDH assumption
holds true for EDPGen.
pub is IND-CCA2 secure,
∗|PCC[c] ≤R M
M
We provide a proof sketch of this theorem in Appendix C.
4.2 Ideal Functionality for Mutual
Authentication and Key Derivation
The main idea of our ideal functionality for mutual authentica-
tion and key derivation FMK D is that authenticated users can
send key derivation requests to FMK D to start a mutual authen-
tication and key derivation by deriving a session key, a crypto-
graphic proof, and a cryptographic timestamp to ensure relay re-
silience. Formally, FMK D is a machine that has two I/O tapes,
one network tape, and another two I/O tapes for connecting to
FCC, which is used by FMK D for as a subroutine for cryptographic
operations. We parameterize FMK D with symmetric key of type
skey ∈ {authenc − key, unauthenc − key}, maximum end-to-end
delay (EED) for messages sent from a key derivation initiator to
a responder max .eed1, maximum end-to-end delay for messages
444Crypto-Chain: A Relay Resilience Framework for Smart Vehicles
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
sent from a key derivation responder to the initiator max .eed2,
and expected time of completing a mutual authentication and key
derivation session et .mkd, which refers to the amount of time ex-
pected for all cryptographic operations associated with computing
and verifying a cryptographic proof to be executed. skey represents
the type of key that can be output after successful mutual authenti-
cation and key derivation. Note that maximum EED refers to the
average time taken by the messages to reach the destination from
the source. Similar to FCC, the sessions for all users are handled by
FMK D and every user participating in the mutual authentication
and key derivation can be identified by (ID, sid, l), where l specifies
the role of the user, i.e., l ∈ {A, B}. FMK D also uses the IT E’s data-
base for any check or verification. Furthermore, messages from/to
every I/O tape are prefixed with (ID, sid) to prevent any user from
claiming to be another user.
FMK D manages sessions of users and global sessions: A user
(ID, sid, l) can send start a mutual authentication and key deriva-
tion. The adversary/simulator groups sessions of an initiator A
and a responder B to form global sessions. FMK D makes two as-
sumptions when analyzing timestamps of messages: i) Her clock
and FCC’s clock, as well as the initiator clock and responder clock,
move-in relative synchrony while users are in a global session; and
ii) network speed is symmetric, i.e., the data speed from initiator to
the responder as well as the data speed from the responder back to
the initiator are the same. FMK D maintains several key deriva-
tion states restricted, startedMKD, f inishedMKD, closedMKD,
and corrupted for mutual authentication and key derivation and
provides seamless transitions between states to prevent broken
authentication. The initial state of every user (ID, sid, l) is set as
restricted. In FMK D, we keep the information of every user in an
active session as a secret to support the security of mutual authenti-
cation and key derivation. Note that one can observe that a session
is active by monitoring the network of the user. Furthermore, as
long as a user is not in the state restricted or corrupted, FMK D
answers such a user’s request without contacting the adversary.
However, if the user is in the state restricted or corrupted, FMK D
asks the adversary about any request received by sending a restrict-
ing message.
To provide relay resilience, FMK D uses the EED of a message
or a data packet from an initiator to a responder eed1, EED of
a data packet from the responder to the initiator eed2, the com-
putation time of cryptographic operations at the responder cce2,
and computation time of cryptographic operations at the initia-
tor cce1. Note that the computation times of the above operations
are not known in advance and as such an attacker cannot carry
out attacks that change these times and thus cannot mount De-
nial of Service (DoS) attacks for the users. In a scenario where the
attacker has estimated these times before doing the DoS attacks,
we use Enc(.) and MAC(.) to authenticate timestamps (see below)
and provide timestamps confidentiality, integrity, and authenticity
thereby preventing the attacker from carrying out such attacks.
The conditions for relay resilience in the smart vehicles are as fol-
lows: i) eed1 is directly proportional to eed2 based on max .eed1
and max .eed2, respectively; ii) eed2 is directly proportional to eed1
based on max .eed2 and max .eed1, respectively; iii) cce2 ≈ cce1;
and iv) cce1 + cce2 + eed1 + eed2 ≤ et .mkd. If the above conditions
hold, this shows that the mutual authentication and key derivation
is complete and thus provides relay resilience (cf. Section 3.3). Note
that if the attacker introduced a DoS attack by delays, the above
conditions cannot be satisfied and thus such an attack is mitigated.
The operations provided by FMK D to mutual authentication and
key derivation protocols are as follows:
′
, mi), where ID
• A user (ID, sid, l) with state restricted can start a mutual
authentication and key derivation by sending a message
′ is user identity of the in-
m = (InitKE, ID
tended key derivation responder and mi is a random bit
string that can be used by the realization in the key deriva-
tion protocol. Upon receiving m, FMK D checks that both
′ ex-
users are not yet part of a global session and ID and ID
′ if the
ist in the database and sets responder(ID, sid, l) = ID
checks succeed. Then, FMK D forwards (m,(ID, sid, l)) to the
adversary via a restricting message. The adversary responds
by sending (CreateGroupSession,(IDA, sidA),(IDB , sidB))
to FMK D. Then, FMK D sets the state of the users to
startedMKD, stores that (IDA, sidA, A) and (IDB , sidB , B)
are in the same global session, and sends Okay to the adver-
sary.
• A user (ID, sid, l) with state(ID, sid, l) = startedMKD can
use (CompEED1, t1, t2) to request FMK D to compute the
EED eed1 of a message using receiving time t2 and send-
ing time of the message t1. In this case, FMK D first computes
eed1 = t2 − t1 and checks whether eed1 ≤ max .eed1. If
the check succeeds, FMK D returns (EED1, eed1) to the user.
Otherwise, it returns (EED1, restricted) to the user.
• A user (ID, sid, l) with state(IDA, sidA, A) = startedMKD
can get secured timestamps by sending a request
(GetTimestamps, y, z, ptrii) to FMK D. If k is recorded in the
database as a preshared key of user IDA via the pointer ptrii,
FMK D uses the Dec(.) and V MAC(.) algorithms provided
by the adversary to decrypt y = Enck(ctimestamp, t2, t3)
and verify z = MACk(y), respectively, and returns
(Timestamps, ctimestamp, t2, t3) to the user. Furthermore,