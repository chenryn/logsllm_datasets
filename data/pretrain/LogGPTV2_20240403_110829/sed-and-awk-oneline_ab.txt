文本转换和替代：
# Unix 环境：转换 DOS 的新行符（ CR/LF）为 Unix 格式。
sed 's/.$//' # 假设所有行以 CR/LF 结束
sed 's/^M$//' # 在 bash/tcsh 中，将按 Ctrl-M 改为按 Ctrl-V
sed 's/\x0D$//' # ssed、 gsed 3.02.80，及更高版本
awk '{sub(/\x0D$/,"");print $0}'
# Unix 环境：转换 Unix 的新行符（ LF）为 DOS 格式。
sed "s/$/`echo -e \\\r`/" # 在 ksh 下所使用的命令
sed 's/$'"/`echo \\\r`/" # 在 bash 下所使用的命令
sed "s/$/`echo \\\r`/" # 在 zsh 下所使用的命令
sed 's/$/\r/' # gsed 3.02.80 及更高版本
awk '{printf("%s\r\n",$0)}'
# DOS 环境：转换 Unix 新行符（ LF）为 DOS 格式。
sed "s/$//" # 方法 1
sed -n p # 方法 2
DOS 环境的略过
# DOS 环境：转换 DOS 新行符（ CR/LF）为 Unix 格式。
# 下面的脚本只对 UnxUtils sed 4.0.7 及更高版本有效。要识别 UnxUtils 版本的
# sed 可以通过其特有的“–text”选项。你可以使用帮助选项（ “–help”）看
# 其中有无一个“–text”项以此来判断所使用的是否是 UnxUtils 版本。其它 DOS
# 版本的的 sed 则无法进行这一转换。但可以用“tr”来实现这一转换。
sed "s/\r//" infile >outfile # UnxUtils sed v4.0.7 或更高版本
tr -d \r outfile # GNU tr 1.22 或更高版本
DOS 环境的略过
# 将每一行前导的“空白字符”（空格，制表符）删除
# 使之左对齐
sed 's/^[ \t]*//' # 见本文末尾关于'\t'用法的描述
awk '{sub(/^[ \t]+/,"");print $0}'
# 将每一行拖尾的“空白字符”（空格，制表符）删除
sed 's/[ \t]*$//' # 见本文末尾关于'\t'用法的描述
awk '{sub(/[ \t]+$/,"");print $0}'
# 将每一行中的前导和拖尾的空白字符删除
sed 's/^[ \t]*//;s/[ \t]*$//'
awk '{sub(/^[ \t]+/,"");sub(/[ \t]+$/,"");print $0}'
# 在每一行开头处插入 5 个空格（使全文向右移动 5 个字符的位置）
sed 's/^/ /'
awk '{printf(" %s\n",$0)}'
# 以 79 个字符为宽度，将所有文本右对齐
# 78 个字符外加最后的一个空格
sed -e :a -e 's/^.\{1,78\}$/ &/;ta'
awk '{printf("%79s\n",$0)}'
# 以 79 个字符为宽度，使所有文本居中。在方法 1 中，为了让文本居中每一行的前
# 头和后头都填充了空格。 在方法 2 中，在居中文本的过程中只在文本的前面填充
# 空格，并且最终这些空格将有一半会被删除。此外每一行的后头并未填充空格。
sed -e :a -e 's/^.\{1,77\}$/ & /;ta' # 方法 1
sed -e :a -e 's/^.\{1,77\}$/ &/;ta' -e 's/\( *\)\1/\1/' # 方法 2
awk '{for(i=0;i=0;j--)print A[j]}'
# 将行中的字符逆序排列，第一个字成为最后一字， ……（模拟“rev”）
sed '/\n/!G;s/\(.\)\(.*\n\)/&\2\1/;//D;s/.//'
awk '{for(i=length($0);i>0;i--)printf("%s",substr($0,i,1));printf("\n")}'
# 将每两行连接成一行（类似“paste”）
sed '$!N;s/\n/ /'
awk '{f=!f;if(f)printf("%s",$0);else printf(" %s\n",$0)}'
# 如果当前行以反斜杠“\”结束，则将下一行并到当前行末尾
# 并去掉原来行尾的反斜杠
sed -e :a -e '/\\$/N; s/\\\n//; ta'
awk '{if(/\\$/)printf("%s",substr($0,0,length($0)-1));else printf("%s\n",$0)}'
# 如果当前行以等号开头，将当前行并到上一行末尾
# 并以单个空格代替原来行头的“=”
sed -e :a -e '$!N;s/\n=/ /;ta' -e 'P;D'
awk '{if(/^=/)printf(" %s",substr($0,2));else printf("%s%s",a,$0);a="\n"}END{printf("\n")}'
# 为数字字串增加逗号分隔符号，将“1234567”改为“1,234,567”
gsed ':a;s/\B[0-9]\{3\}\>/,&/;ta' # GNU sed
sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta' # 其他 sed
#awk 的正则没有后向匹配和引用，搞的比较狼狈，呵呵。
awk
'{while(match($0,/[0-9][0-9][0-9][0-9]+/)){$0=sprintf("%s,%s",substr($0,0,RSTART+RLENGT
H-4),substr($0,RSTART+RLENGTH-3))}print $0}'
# 为带有小数点和负号的数值增加逗号分隔符（ GNU sed）
gsed -r ':a;s/(^|[^0-9.])([0-9]+)([0-9]{3})/\1\2,\3/g;ta'
#和上例差不多
awk
'{while(match($0,/[^\.0-9][0-9][0-9][0-9][0-9]+/)){$0=sprintf("%s,%s",substr($0,0,RSTART+RL
ENGTH-4),substr($0,RSTART+RLENGTH-3))}print $0}'
# 在每 5 行后增加一空白行 （在第 5， 10， 15， 20，等行后增加一空白行）
gsed '0~5G' # 只对 GNU sed 有效
sed 'n;n;n;n;G;' # 其他 sed
awk '{print $0;i++;if(i==5){printf("\n");i=0}}'
选择性地显示特定行：
# 显示文件中的前 10 行 （模拟“head”的行为）
sed 10q
awk '{print;if(NR==10)exit}'
# 显示文件中的第一行 （模拟“head -1”命令）
sed q
awk '{print;exit}'
# 显示文件中的最后 10 行 （模拟“tail”）
sed -e :a -e '$q;N;11,$D;ba'
#用 awk 干这个有点亏，得全文缓存，对于大文件肯定很慢
awk '{A[NR]=$0}END{for(i=NR-9;i=65)print}'
# 显示包含 65 个以下字符的行
sed -n '/^.\{65\}/!p' # 方法 1，与上面的脚本相对应
sed '/^.\{65\}/d' # 方法 2，更简便一点的方法
awk '{if(length($0)<=65)print}'
# 显示部分文本——从包含正则表达式的行开始到最后一行结束
sed -n '/regexp/,$p'