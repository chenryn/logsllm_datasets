---
author: David Both
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4141
date: '2019-12-26 11:15:19'
editorchoice: false
excerpt: 本文是 Bash 编程系列三篇中的最后一篇，来学习使用循环执行迭代的操作。
fromurl: https://opensource.com/article/19/10/programming-bash-loops
id: 11714
islctt: true
largepic: /data/attachment/album/201912/26/111437f9pa3zqqwcc9wwg1.jpg
permalink: /article-11714-1.html
pic: /data/attachment/album/201912/26/111437f9pa3zqqwcc9wwg1.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11687
reviewer: wxy
selector: lujun9972
summary: 本文是 Bash 编程系列三篇中的最后一篇，来学习使用循环执行迭代的操作。
tags:
- Bash
thumb: false
title: 怎样用 Bash 编程：循环
titlepic: true
translator: lxbwolf
updated: '2019-12-26 11:15:19'
---
> 
> 本文是 Bash 编程系列三篇中的最后一篇，来学习使用循环执行迭代的操作。
> 
> 
> 
![](/data/attachment/album/201912/26/111437f9pa3zqqwcc9wwg1.jpg)
Bash 是一种强大的用于命令行和 shell 脚本的编程语言。本系列的三部分都是基于我的三集 [Linux 自学课程](http://www.both.org/?page_id=1183) 写的，探索怎么用 CLI 进行 bash 编程。
本系列的 [第一篇文章](/article-11552-1.html) 讨论了 bash 编程的一些简单命令行操作，如使用变量和控制操作符。[第二篇文章](/article-11687-1.html) 探讨了文件、字符串、数字等类型和各种各样在执行流中提供控制逻辑的的逻辑运算符，还有 bash 中不同种类的扩展。本文是第三篇（也是最后一篇），意在考察在各种迭代的操作中使用循环以及怎么合理控制循环。
### 循环
我使用过的所有编程语言都至少有两种循环结构来用来执行重复的操作。我经常使用 `for` 循环，然而我发现 `while` 和 `until` 循环也很有用处。
#### for 循环
我的理解是，在 bash 中实现的 `for` 命令比大部分语言灵活，因为它可以处理非数字的值；与之形成对比的是，诸如标准 C 语言的 `for` 循环只能处理数字类型的值。
Bash 版的 `for` 命令基本的结构很简单：
```
for Var in list1 ; do list2 ; done
```
解释一下：“对于 `list1` 中的每一个值，把 `$Var` 设置为那个值，使用该值执行 `list2` 中的程序语句；`list1` 中的值都执行完后，整个循环结束，退出循环。” `list1` 中的值可以是一个简单的显式字符串值，也可以是一个命令执行后的结果（`` 包含其内的命令执行的结果，本系列第二篇文章中有描述）。我经常使用这种结构。
要测试它，确认 `~/testdir` 仍然是当前的工作目录（PWD）。删除目录下所有东西，来看下这个显式写出值列表的 `for` 循环的简单的示例。这个列表混合了字母和数字 — 但是不要忘了，在 bash 中所有的变量都是字符串或者可以被当成字符串来处理。
```
[student@studentvm1 testdir]$ rm *
[student@studentvm1 testdir]$ for I in a b c d 1 2 3 4 ; do echo $I ; done
a
b
c
d
1
2
3
4
```
给变量赋予更有意义的名字，变成前面版本的进阶版：
```
[student@studentvm1 testdir]$ for Dept in "Human Resources" Sales Finance "Information Technology" Engineering Administration Research ; do echo "Department $Dept" ; done
Department Human Resources
Department Sales
Department Finance
Department Information Technology
Department Engineering
Department Administration
Department Research
```
创建几个目录（创建时显示一些处理信息）：
```
[student@studentvm1 testdir]$ for Dept in "Human Resources" Sales Finance "Information Technology" Engineering Administration Research ; do echo "Working on Department $Dept" ; mkdir "$Dept"  ; done
Working on Department Human Resources
Working on Department Sales
Working on Department Finance
Working on Department Information Technology
Working on Department Engineering
Working on Department Administration
Working on Department Research
[student@studentvm1 testdir]$ ll
total 28
drwxrwxr-x 2 student student 4096 Apr  8 15:45  Administration
drwxrwxr-x 2 student student 4096 Apr  8 15:45  Engineering
drwxrwxr-x 2 student student 4096 Apr  8 15:45  Finance
drwxrwxr-x 2 student student 4096 Apr  8 15:45 'Human Resources'
drwxrwxr-x 2 student student 4096 Apr  8 15:45 'Information Technology'
drwxrwxr-x 2 student student 4096 Apr  8 15:45  Research
drwxrwxr-x 2 student student 4096 Apr  8 15:45  Sales
```
在 `mkdir` 语句中 `$Dept` 变量必须用引号包裹起来；否则名字中间有空格（如 `Information Technology`）会被当做两个独立的目录处理。我一直信奉的一条实践规则：所有的文件和目录都应该为一个单词（中间没有空格）。虽然大部分现代的操作系统可以处理名字中间有空格的情况，但是系统管理员需要花费额外的精力去确保脚本和 CLI 程序能正确处理这些特例。（即使它们很烦人，也务必考虑它们，因为你永远不知道将拥有哪些文件。）
再次删除 `~/testdir` 下的所有东西 — 再运行一次下面的命令：
```
[student@studentvm1 testdir]$ rm -rf * ; ll
total 0
[student@studentvm1 testdir]$ for Dept in Human-Resources Sales Finance Information-Technology Engineering Administration Research ; do echo "Working on Department $Dept" ; mkdir "$Dept"  ; done
Working on Department Human-Resources
Working on Department Sales
Working on Department Finance
Working on Department Information-Technology
Working on Department Engineering
Working on Department Administration
Working on Department Research
[student@studentvm1 testdir]$ ll
total 28
drwxrwxr-x 2 student student 4096 Apr  8 15:52 Administration
drwxrwxr-x 2 student student 4096 Apr  8 15:52 Engineering
drwxrwxr-x 2 student student 4096 Apr  8 15:52 Finance
drwxrwxr-x 2 student student 4096 Apr  8 15:52 Human-Resources
drwxrwxr-x 2 student student 4096 Apr  8 15:52 Information-Technology
drwxrwxr-x 2 student student 4096 Apr  8 15:52 Research
drwxrwxr-x 2 student student 4096 Apr  8 15:52 Sales
```
假设现在有个需求，需要列出一台 Linux 机器上所有的 RPM 包并对每个包附上简短的描述。我为北卡罗来纳州工作的时候，曾经遇到过这种需求。由于当时开源尚未得到州政府的“批准”，而且我只在台式机上使用 Linux，对技术一窍不通的老板（PHB）需要我列出我计算机上安装的所有软件，以便他们可以“批准”一个特例。
你怎么实现它？有一种方法是，已知 `rpm –qa` 命令提供了 RPM 包的完整描述，包括了白痴老板想要的东西：软件名称和概要描述。
让我们一步步执行出最后的结果。首先，列出所有的 RPM 包：
```
[student@studentvm1 testdir]$ rpm -qa
perl-HTTP-Message-6.18-3.fc29.noarch
perl-IO-1.39-427.fc29.x86_64
perl-Math-Complex-1.59-429.fc29.noarch
lua-5.3.5-2.fc29.x86_64
java-11-openjdk-headless-11.0.ea.28-2.fc29.x86_64
util-linux-2.32.1-1.fc29.x86_64
libreport-fedora-2.9.7-1.fc29.x86_64
rpcbind-1.2.5-0.fc29.x86_64
libsss_sudo-2.0.0-5.fc29.x86_64
libfontenc-1.1.3-9.fc29.x86_64
&lt;snip&gt;
```
用 `sort` 和 `uniq` 命令对列表进行排序和打印去重后的结果（有些已安装的 RPM 包具有相同的名字）：
```
[student@studentvm1 testdir]$ rpm -qa | sort | uniq
a2ps-4.14-39.fc29.x86_64
aajohan-comfortaa-fonts-3.001-3.fc29.noarch
abattis-cantarell-fonts-0.111-1.fc29.noarch
abiword-3.0.2-13.fc29.x86_64
abrt-2.11.0-1.fc29.x86_64
abrt-addon-ccpp-2.11.0-1.fc29.x86_64
abrt-addon-coredump-helper-2.11.0-1.fc29.x86_64
abrt-addon-kerneloops-2.11.0-1.fc29.x86_64
abrt-addon-pstoreoops-2.11.0-1.fc29.x86_64
abrt-addon-vmcore-2.11.0-1.fc29.x86_64
&lt;snip&gt;
```
以上命令得到了想要的 RPM 列表，因此你可以把这个列表作为一个循环的输入信息，循环最终会打印每个 RPM 包的详细信息：
```
[student@studentvm1 testdir]$ for RPM in `rpm -qa | sort | uniq` ; do rpm -qi $RPM ; done