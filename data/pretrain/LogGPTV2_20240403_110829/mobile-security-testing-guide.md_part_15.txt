Replace Java method implementations (Java API).
Enumerate live instances of specific classes by scanning the Java heap (Java API).
Scan process memory for occurrences of a string (Memory API).
Intercept native function calls to run your own code at function entry and exit (Interceptor API).
Remember that on Android, you can also benefit from the built-in tools provided when installing Frida, that includes
the Frida CLI ( frida ), frida-ps , frida-ls-devices and frida-trace , to name some of them.
Frida is often compared to Xposed, however this comparison is far from fair as both frameworks were designed with
different goals in mind. This is important to understand as an app security tester so that you can know which
framework to use in which situation:
114
Setting up a Testing Environment for Android Apps
Frida is standalone, all you need is to run the frida-server binary from a known location in your target Android
device (see "Installing Frida" below). This means that, in contrast to Xposed, it is not deep installed in the target
OS.
Reversing an app is an iterative process. As a consequence of the previous point, you obtain a shorter feedback
loop when testing as you don't need to (soft) reboot to apply or simply update your hooks. So you might prefer to
use Xposed when implementing more permanent hooks.
You may inject and update your Frida JavaScript code on the fly at any point during the runtime of your process
(similarly to Cycript on iOS). This way you can perform the so-called early instrumentation by letting Frida spawn
your app or you may prefer to attach to a running app that you might have brought to a certain state.
Frida is able to handle both Java as well as native code (JNI), allowing you to modify both of them. This is
unfortunately a limitation of Xposed which lacks of native code support.
Note that Xposed, as of early 2019, does not work on Android 9 (API level 28) yet.
Installing Frida
To install Frida locally, simply run:
$ pip install frida-tools
Or refer to the installation page for more details.
The next step is to set up Frida on your Android device:
If your device is not rooted, you can also use Frida, please refer to section Dynamic Analysis on Non-Rooted
Devices.
If you have a rooted device, simply follow the official instructions or follow the hints below.
We assume a rooted device here unless otherwise noted. Download the frida-server binary from the Frida releases
page. Make sure that you download the right frida-server binary for the architecture of your Android device or
emulator: x86, x86_64, arm or arm64. Make sure that the server version (at least the major version number) matches
the version of your local Frida installation. PyPI usually installs the latest version of Frida. If you're unsure which
version is installed, you can check with the Frida command line tool:
$ frida --version
Or you can run the following command to automatically detect Frida version and download the right frida-server
binary:
$ wget https://github.com/frida/frida/releases/download/$(frida --version)/frida-server-$(frida --version)-andr
oid-arm.xz
Copy frida-server to the device and run it:
$ adb push frida-server /data/local/tmp/
$ adb shell "chmod 755 /data/local/tmp/frida-server"
$ adb shell "su -c /data/local/tmp/frida-server &"
Using Frida on Android
With frida-server running, you should now be able to get a list of running processes with the following command (use
the -U option to indicate Frida to use a connected USB devices or emulator):
$ frida-ps -U
PID Name
115
Setting up a Testing Environment for Android Apps
----- --------------------------------------------------------------
276 adbd
956 android.process.media
198 bridgemgrd
30692 com.android.chrome
30774 com.android.chrome:privileged_process0
30747 com.android.chrome:sandboxed
30834 com.android.chrome:sandboxed
3059 com.android.nfc
1526 com.android.phone
17104 com.android.settings
1302 com.android.systemui
(...)
Or restrict the list with the -Uai flag combination to get all apps ( -a ) currently installed ( -i ) on the connected USB
device ( -U ):
$ frida-ps -Uai
PID Name Identifier
----- ---------------------------------------- ---------------------------------------
766 Android System android
30692 Chrome com.android.chrome
3520 Contacts Storage com.android.providers.contacts
- Uncrackable1 sg.vantagepoint.uncrackable1
- drozer Agent com.mwr.dz
This will show the names and identifiers of all apps, if they are currently running it will also show their PIDs. Search for
your app in the list and take a note of the PID or its name/identifier. From now on you'll refer to your app by using one
of them. A recommendation is to use the identifiers, as the PIDs will change on each run of the app. For example let's
take com.android.chrome . You can use this string now on all Frida tools, e.g. on the Frida CLI, on frida-trace or from a
Python script.
Tracing Native Libraries with frida-trace
To trace specific (low-level) library calls, you can use the frida-trace command line tool:
$ frida-trace -U com.android.chrome -i "open"
This generates a little JavaScript in __handlers__/libc.so/open.js , which Frida injects into the process. The script
traces all calls to the open function in libc.so . You can modify the generated script according to your needs with
Frida JavaScript API.
Unfortunately tracing high-level methods of Java classes is not yet supported (but might be in the future).
Frida CLI and the Java API
Use the Frida CLI tool ( frida ) to work with Frida interactively. It hooks into a process and gives you a command line
interface to Frida's API.
$ frida -U com.android.chrome
With the -l option, you can also use the Frida CLI to load scripts , e.g., to load myscript.js :
$ frida -U -l myscript.js com.android.chrome
Frida also provides a Java API, which is especially helpful for dealing with Android apps. It lets you work with Java
classes and objects directly. Here is a script to overwrite the onResume function of an Activity class:
116
Setting up a Testing Environment for Android Apps
Java.perform(function () {
var Activity = Java.use("android.app.Activity");
Activity.onResume.implementation = function () {
console.log("[*] onResume() got called!");
this.onResume();
};
});
The above script calls Java.perform to make sure that your code gets executed in the context of the Java VM. It
instantiates a wrapper for the android.app.Activity class via Java.use and overwrites the onResume function. The
new onResume function implementation prints a notice to the console and calls the original onResume method by
invoking this.onResume every time an activity is resumed in the app.
Frida also lets you search for and work with instantiated objects that are on the heap. The following script searches for
instances of android.view.View objects and calls their toString method. The result is printed to the console:
setImmediate(function() {
console.log("[*] Starting script");
Java.perform(function () {
Java.choose("android.view.View", {
"onMatch":function(instance){
console.log("[*] Instance found: " + instance.toString());
},
"onComplete":function() {
console.log("[*] Finished heap search")
}
});
});
});
The output would look like this:
[*] Starting script
[*] Instance found: android.view.View{7ccea78 G.ED..... ......ID 0,0-0,0 #7f0c01fc app:id/action_bar_black_back
ground}
[*] Instance found: android.view.View{2809551 V.ED..... ........ 0,1731-0,1731 #7f0c01ff app:id/menu_anchor_stu
b}
[*] Instance found: android.view.View{be471b6 G.ED..... ......I. 0,0-0,0 #7f0c01f5 app:id/location_bar_verbose_
status_separator}
[*] Instance found: android.view.View{3ae0eb7 V.ED..... ........ 0,0-1080,63 #102002f android:id/statusBarBackg
round}
[*] Finished heap search
You can also use Java's reflection capabilities. To list the public methods of the android.view.View class, you could
create a wrapper for this class in Frida and call getMethods from the wrapper's class property:
Java.perform(function () {
var view = Java.use("android.view.View");
var methods = view.class.getMethods();
for(var i = 0; i < methods.length; i++) {
console.log(methods[i].toString());
}
});
This will print a very long list of methods to the terminal:
public boolean android.view.View.canResolveLayoutDirection()
public boolean android.view.View.canResolveTextAlignment()
public boolean android.view.View.canResolveTextDirection()
public boolean android.view.View.canScrollHorizontally(int)
public boolean android.view.View.canScrollVertically(int)
117
Setting up a Testing Environment for Android Apps
public final void android.view.View.cancelDragAndDrop()
public void android.view.View.cancelLongPress()
public final void android.view.View.cancelPendingInputEvents()
...
Frida Bindings
In order to extend the scripting experience, Frida offers bindings to programming languages such as Python, C,
NodeJS, and Swift.
Taking Python as an example, the first thing to note is that no further installation steps are required. Start your Python
script with import frida and you're ready to go. See the following script that simply runs the previous JavaScript
snippet:
# frida_python.py
import frida
session = frida.get_usb_device().attach('com.android.chrome')
source = """
Java.perform(function () {
var view = Java.use("android.view.View");
var methods = view.class.getMethods();
for(var i = 0; i < methods.length; i++) {
console.log(methods[i].toString());
}
});
"""
script = session.create_script(source)
script.load()
session.detach()
In this case, running the Python script ( python3 frida_python.py ) has the same result as the previous example: it will
print all methods of the android.view.View class to the terminal. However, you might want to work with that data from
Python. Using send instead of console.log will send data in JSON format from JavaScript to Python. Please read
the comments in the example below:
# python3 frida_python_send.py
import frida
session = frida.get_usb_device().attach('com.android.chrome')
# 1. we want to store method names inside a list
android_view_methods = []
source = """
Java.perform(function () {
var view = Java.use("android.view.View");
var methods = view.class.getMethods();
for(var i = 0; i < methods.length; i++) {
send(methods[i].toString());
}
});
"""
script = session.create_script(source)
# 2. this is a callback function, only method names containing "Text" will be appended to the list
def on_message(message, data):
if "Text" in message['payload']:
android_view_methods.append(message['payload'])
118
Setting up a Testing Environment for Android Apps
# 3. we tell the script to run our callback each time a message is received
script.on('message', on_message)
script.load()
# 4. we do something with the collected data, in this case we just print it
for method in android_view_methods:
print(method)
session.detach()
This effectively filters the methods and prints only the ones containing the string "Text":
$ python3 frida_python_send.py
public boolean android.view.View.canResolveTextAlignment()
public boolean android.view.View.canResolveTextDirection()
public void android.view.View.setTextAlignment(int)
public void android.view.View.setTextDirection(int)
public void android.view.View.setTooltipText(java.lang.CharSequence)
...
In the end, it is up to you to decide where would you like to work with the data. Sometimes it will be more convenient
to do it from JavaScript and in other cases Python will be the best choice. Of course you can also send messages
from Python to JavaScript by using script.post . Refer to the Frida docs for more information about sending and
receiving messages.
Magisk
Magisk ("Magic Mask") is one way to root your Android device. It's specialty lies in the way the modifications on the
system are performed. While other rooting tools alter the actual data on the system partition, Magisk does not (which
is called "systemless"). This enables a way to hide the modifications from root-sensitive applications (e.g. for banking
or games) and allows using the official Android OTA upgrades without the need to unroot the device beforehand.
You can get familiar with Magisk reading the official documentation on GitHub. If you don't have Magisk installed, you
can find installation instructions in the documentation. If you use an official Android version and plan to upgrade it,
Magisk provides a tutorial on GitHub.
Learn more about rooting your device with Magisk.
MobSF
MobSF is an automated, all-in-one mobile application pentesting framework that also supports Android APK files. The
easiest way of getting MobSF started is via Docker.
$ docker pull opensecurity/mobile-security-framework-mobsf
$ docker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest
Or install and start it locally on your host computer by running:
# Setup
git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git
cd Mobile-Security-Framework-MobSF
./setup.sh # For Linux and Mac
setup.bat # For Windows
# Installation process
./run.sh # For Linux and Mac
run.bat # For Windows
119
Setting up a Testing Environment for Android Apps
Once you have MobSF up and running you can open it in your browser by navigating to http://127.0.0.1:8000. Simply
drag the APK you want to analyze into the upload area and MobSF will start its job.
After MobSF is done with its analysis, you will receive a one-page overview of all the tests that were executed. The
page is split up into multiple sections giving some first hints on the attack surface of the application.
The following is displayed:
Basic information about the app and its binary file.
Some options to:
View the AndroidManifest.xml file.
View the IPC components of the app.
Signer certificate.
App permissions.
A security analysis showing known defects e.g. if the app backups are enabled.
List of libraries used by the app binary and list of all files inside the unzipped APK.
Malware analysis that checks for malicious URLs.
Refer to MobSF documentation for more details.
Objection
Objection is a "runtime mobile exploration toolkit, powered by Frida". Its main goal is to allow security testing on non-
rooted devices through an intuitive interface.
Objection achieves this goal by providing you with the tools to easily inject the Frida gadget into an application by
repackaging it. This way, you can deploy the repackaged app to the non-rooted device by sideloading it and interact
with the application as explained in the previous section.
However, Objection also provides a REPL that allows you to interact with the application, giving you the ability to
perform any action that the application can perform. A full list of the features of Objection can be found on the project's
homepage, but here are a few interesting ones:
Repackage applications to include the Frida gadget
Disable SSL pinning for popular methods
Access application storage to download or upload files
Execute custom Frida scripts
List the Activities, Services and Broadcast receivers
Start Activities
120
Setting up a Testing Environment for Android Apps
The ability to perform advanced dynamic analysis on non-rooted devices is one of the features that makes Objection
incredibly useful. An application may contain advanced RASP controls which detect your rooting method and injecting
a frida-gadget may be the easiest way to bypass those controls. Furthermore, the included Frida scripts make it very
easy to quickly analyze an application, or get around basic security controls.
Finally, in case you do have access to a rooted device, Objection can connect directly to the running Frida server to
provide all its functionality without needing to repackage the application.
Installing Objection
Objection can be installed through pip as described on Objection's Wiki.
$ pip3 install objection
If your device is jailbroken, you are now ready to interact with any application running on the device and you can skip