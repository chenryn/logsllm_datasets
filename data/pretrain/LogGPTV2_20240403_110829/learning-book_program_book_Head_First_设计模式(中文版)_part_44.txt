---
## Page 393
选代器与组合模式
我们可以任意创建复杂的树。
Submen
组合模式让我们能用树
形方式创建对象的结
MenaJtems
O
构，树里面包含了组合
以及个别的对象。
然后将它们视为一
整体
使用组合结构，我们能
把相同的操作应用在组
Sabmenu
合和个别对象上。换句
7
话说，在大多数情况下，
Mems2tems
我们可以忽略对象组合
……或是许多部分
和个别对象之间的差别。
操作能够应用
print)
于整体··
Sxbmen
MenuJtems
也适用于
ptintO
部分。
你现在的位置
357
---
## Page 394
组合模式类图
Component可以为add（）、temove()
Component为组合中的所有对
setChild（）和它的德作实现一些默认
象定义一个接口，不管是组
的行为。
客户使用Component接口作
合还是叶节点。
组合中的对象。
Component
operutiong
add(Component)
请注意，叶节点也继承了像
(oduog)/aAoUR
getChid(int)
add(）、remove(）和getChild(）这
样的方法，这些方法对叶节点
或许没有意义。我们稍后再图
来讨论这个问题。
Leaf
Composite
operstion0
add(Component)
emove(Component)
叶节点没有殖
getChid(int)
这个Composite也实瑰了
operetion(
子。
叶节点相关的摄作。请
注意，其中有一些提作
叶节点通过实现
可能对于Composite象义
Composite支持的摄
不大，因此在这个情况
Composite的角色是要定义组件
作，定义了组合内
下可能产生异常。
的行为，而这样的组件具有子节
元素的行为。
点。
问：
当你用这种方式组织数据的时候，最
组件、组合、树？我被
合：
别忘了、我们现在采取
终会得到树形结构（正确的说法是由
了一个新方法，打算用新的方案
搞混了。
上而下的树形结构），根部是一个组
组合模式，未重新实现策单。所以不
合，而组合的分支逐渐往下延伸，直
要认为选代器和组合之间有什么神奇
到叶节点为止。
的转换。我们可以说，这两者可以合
两种：组合与叶节点元素。听起来象
作无间，你很快就会看到我们可以在
逆归是不是？组合持有一群孩子，这
：
这和选代器有什么关
组合的实现中使用选代器，而且做法
些孩子可以是别的组合或者叶节点元
系？
还不只一种。
素。
358
第9章
---
## Page 395
选代器与组合模式
利用组合设计菜单
我们要如何在菜单上应用组合模式呢？一开始，我们需要创建一个组件接口来作为菜单和菜
单项的共同接口，让我们能够用统一的做法来处理菜单和菜单项。换句话说，我们可以针对
菜单或菜单项调用相同的方法。
现在，对于菜单或菜单项来说，有些方法可能不太恰当。但我们可以处理这个问题，等一下
就会这么做。至于现在，让我们从头来看看如何让菜单能够符合组合模式的结构：
莱单组件提供了一个提口.让莱单项和莱单共同
使用。因为我们希望能够为这些方法提供默认
的实现，所以我们在这里使用了一个抽象类。
女招待将使用莱单组件接口访问莱
单和莱单项。
ge(Name()
Quogdjoeegia6
在前面版本的莱单项和莱
getPrioe()
单中，有些方法和这里的
isVegetarian()
print)
方法一样。我们也加进了
[ueuodwog)ppe
ptint（).add()，temove(）fo
这些方法是用来操纵组件
move(Component)
petChid(int)
setChild()。稍后在实现新
的。莱单项和莱单都是组
的莱单和莱单项类时，我
件。
们金描述这些方法。
莱单项和莱单都覆盖了
Monultem
print().
getName()
(uogduosegied
getPrice[
getName()
Ouogduosegyee
isVegetarian()
print)
add(Component)
remove(Component)
getChid(int)
莱单项覆盖了这些对它有意义的方法。至于
那些没有鲁义的方法（例如add(）），就置之
莱单也覆盖了一些对它有意义的方法，例
不理。add（）之所以没意义，是因为莱单项已
如增加或删除莱单项（或者其他的莱
经是叶节点，它的下面不能再有任何组件。
单：）。除此之外.我们也使用setName（）和
setDesctiption(）方法来返回莱单名称与描述。
你现在的位置
359
---
## Page 396
实现菜单组件
实现菜单组件
所有的组件都必须实现
MenuComponent接口：
好了，我们要开始编写菜单组件的抽象类；请
然而，叶节点和组合节点
记住，菜单组件的角色是为叶节点和组合节点
的角色不同，所以有些
提供一个共同的接口。现在你可能想问：“那
方法可能并不适合某种节
么菜单组件不就扮演了两个角色吗？”可能是
点面对这种情况，有时
这样的，我们稍后再讨论这一点。然而，目前
候，你最好是抛出运行时
我们要为这些方法提供默认的实现，这样，如
异常
果菜单项（叶节点）或者菜单（组合）不想
实现某些方法的时候（例如叶节点不想实现
因为有些方法只对莱单项有意义，而有些则只
getChildO方法），就可以不实现这些方法。
对莱单有意义.默认实现是抛出UnsuppottedOper
MenuComponent对每个方法都提供默认
ationException异常。这样，如果莱单项或莱单不
的实现。
支持某个操作，他们就不需做任何事情，直接
↑
继承默认实现就可以了。
public abstract class MenuComponent {
public void add(MenuComponent menuComponent)(
throw new UnsupportedoperationException();
public void remove (MenuComponent menuComponent)
1
7
我们把“组合”方法组织在一
throw new UnsupportedoperationException();
起，即新增、删除和取得莱单
public MenuComponent getChild(int i) {
组件。
throw new UnsupportedOperationException();
public String getName() {
throw new UnsupportedOperationException();
这些是“操作”方法：它们被莱
/
单项使用，其中有一些也可用在
public String getDescription()(
莱单上，再过几页你就会在莱单
throw new UnsupportedOperationException();
代码中看到了。
public double getPrice(){
throw new UnsupportedoperationException() ;
public boolean isVegetarian() (
throw new UnsupportedoperationException() ;
print（）是一个“懋作”方法.这
个方法同时被莱单和莱单项所实
public void print()(
现，和但我们还是在这里提供了
throw new UnsupportedOperationException() ;
默认的操作。
360
第9章
---
## Page 397
选代器与组合模式
实现菜单项
我很高兴我们朝着这
个方向走，这个方向会给我
带来很大的弹性，我需要实现我
好了，让我们来看菜单项类。别忘了，这是组合类图里
直想做的可丽饼菜单。
的叶类，它实现组合内元素的行为。
public class MenuItem extends MenuComponent {
String name;
个
首先，我们需要扩展
String description;
boolean vegetarian;
MenaComponent接。
double price;
public MenuItem (String name,
构造器需要被传入名字、叙述
String description,
等，并保持对它们的引用。这
boolean vegetarian,
double price)
和我们旧的莱单项实现很像。
this.name = name;
this.description = description;
this.vegetarian = vegetarian;
this.price = price;
public String getName (){
return name;
这是我们的setter方法，和之前
的实现一样。
public String getDescription(){
return description;
public double getPrice ()
return price;
这和之前的实现不一样，在
{
MenuComponet类里我们覆盖了
public boolean isVegetarian(){
print(）方法。对莱单项来说
return vegetarian;
此方法金打印出完整的莱单项
条目，包括：名字、描述、价
public void print()(
格以及是否为素金。
System.out.print (*
+ getName ());
if (isVegetarian()){
System.out.print ("(v)") ;
System.out.println (",
+ getPrice());
System.out.println (“
+ getDescription());
你现在的位置
361
---
## Page 398
组合结构
实现组合菜单
我们已经有了菜单项，还需要组合类，就是我们叫做菜单的。别忘了，此组合
类可以持有菜单项或其他菜单。有一些方法并未在MenuComopnent类中实现，
比如getPrice(和isVegertarian（)，因为这些方法对菜单而言并没多大意义。
莱单和莱单项一样，都是
莱单可以有任意数目的孩子，这些孩子
MenaComponent,
都必须属于MenComponent类型，我们
使用内部的Araylist记录它们。
public class Menu extends MenuComponent(
ArrayList menuComponents = new ArrayList ();
String name;
String description;
这和我们之前的实现不一样，我们将给
每个菜单一个名字和一个描述。以前，
public Menu(String name, String description) (
每个莱单的类名称就是此莱单的名字。
this.name = name;
this.description = description;
public void add(MenuComponent menuComponent)
我们在这里将莱单项和其他莱单加
menuComponents.add(menuComponent);
入到莱单中。因为莱单和莱单项都
}
是MenzComponent，所以我们只需用
public void remove (MenuComponent menuComponent)
一个方法就可以两者兼肠。
menuComponents.remove(menuComponent);
同样的遂理，也可以删除或取得某
public MenuComponent getChild(int i)(
个MenuComponent。
return (MenuComponent)menuComponents.get(i);
这是用来取得名字和描述的setter方法。
public String getName () (
return name;
请注意，我们并未覆盖setPeice或
isVegertatan(）.因为这些方法对Menu来说并
public String getDescription(）{
没有意义（虽然你可能认为isVegertarian）有意
return description;
义）。如果有人试着在Menz上调用这些方法，
就金得到UnsuppontedOperationException异常。
public void print(){
System.out.print("\n" + getName ()) ;
System.out.println(",
"+ getDescription());
System.out.println("-
_"）;
为了打印出莱单，我们打印莱
单的名称和描述。
1
362
第9章
---
## Page 399
选代器与组合模式
等一下，我不了解print（）的实现。原本
我以为应该能够在组合和叶节点上应用相同的操
作。如累我围这种实现对组合节点应用print()，所
得到的竞然只是一个筒单的菜单名字和描述，而不
是完整地打印出组合内的每个项。
说得好。因为菜单是一个组合，包含了菜单项和其他的菜
单，所以它的print()应该打印出它所包含的一切。如果它
不这么做，我们就必须遍历整个组合的每个节点，然后将
每一项打印出来。这么一来，也就失去了使用组合结构的
意义。
想要正确地实现print(其实很容易，因为我们可以让每个
组件打印自己，这种递归方式简直美妙极了，赶快来看看
修正print()方法
吧：
public class Menu extends MenuComponent {
ArrayList menuComponents = new ArrayList ();
String name;
String description;
//构造器代码在这里
我们所要做的只是改变print(）方法，能让它
不仅打印出莱单本身的信息，也打印出莱单
//其他的方法在这里
内所有组件的内容：其他莱单和莱单项。
public void print() (
System,out.print ("\n" + getName ()) ;
System.out.println(", " + getDescription()) ;