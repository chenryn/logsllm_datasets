that support social-content crawling such as 80legs.com.
2.3.4 Exploitable Platforms and APIs
Most OSNs provide software APIs that enable the inte-
gration of their platforms into third-party software systems.
For example, Facebook Graph API [1] enables third parties
to read from and write data into Facebook, and provides
a simple and consistent view of Facebook’s social graph by
uniformly representing objects (e.g., proﬁles, photos) and
the connections between them (e.g., friendships, likes, tags).
An adversary, however, can use such APIs to automate the
execution of online social activities.
If an activity is not
supported by the API, then the adversary can scrape the
content of the platform’s web pages, and record the exact
HTTP requests which are used to carry out such an activ-
ity (i.e., HTTP-request templates). In particular, sending
connection requests is often not supported, and is protected
against automated usage by CAPTCHAs. This is also the
case if a user sends too many requests in a short time period.
An adversary, however, can always choose to reduce the fre-
quency at which he sends the requests to avoid CAPTCHAs.
Another technique is to inject artiﬁcial connection requests
into normal OSN traﬃc at the HTTP level, so that it would
appear as if the users added the adversary as a friend [19].
3. THE SOCIALBOT NETWORK
We ﬁrst start with a conceptual overview of a Socialbot
Network (SbN), and brieﬂy outline the adversarial objectives
behind maintaining such a network. This is followed by a
discussion on the SbN design goals, after which we outline
its construction details.
3.1 Overview
We deﬁne a Socialbot Network (SbN) as a set of socialbots
that are owned and maintained by a human controller called
the botherder (i.e., the adversary). An SbN consists of three
components: socialbots, a botmaster, and a Command &
Control (C&C) channel. Each socialbot controls a proﬁle
in a targeted OSN, and is capable of executing commands
that result in operations related to social interactions (e.g.,
posting a message) or the social structure (e.g., sending a
connection request). These commands are either sent by the
botmaster or predeﬁned locally on each socialbot. All data
collected by the socialbots are called the botcargo and are
always sent back to the botmaster. A botmaster is an OSN-
independent software controller that the botherder interacts
with in order to deﬁne and then send commands through
the C&C channel. The C&C channel is a communication
Table 1: The generic operations supported by a socialbot in any given OSN.
Operation
read(o, p)
write(v, o, p)
connect(b, p)
disconnect(b, p)
Description
Type
Social-interaction Reads an object o from proﬁle p and returns its value v as botcargo
Social-interaction Writes value v to object o on proﬁle p
Social-structure
Social-structure
Sends or accepts a connection request sent from proﬁle b to proﬁle p
Breaks the social connection between proﬁles b and p
3.4.1 The Socialbots
A socialbot consists of two main components: a proﬁle on
a targeted OSN (the face), and the socialbot software (the
brain). We enumerate the socialbots with the proﬁles they
control, that is, for a set B = {b1, . . . , bn} of n socialbots,
we use bi ∈ B to refer to both the i-th socialbot and the
proﬁle it controls. But how should the socialbot software be
programmed in order to mimic real users?
First, we require the socialbot to support two types of
generic operations in any given OSN: social-interaction op-
erations that are used to read and write social content, and
social-structure operations that are used to alter the social
graph. A description of these operations is shown in Table 1.
Second, we deﬁne a set of commands that each includes
a sequence of generic operations. Each command is used
to mimic a real user action that relates to social content
generation (e.g., a status update) or social networking (e.g.,
joining a community of users). Commands can be either
deﬁned locally on each socialbots (called native commands),
or sent by the botmaster through the C&C channel (called
master commands). For example, we deﬁne a native com-
mand called status_update as follows: at arbitrary times,
a socialbot bi ∈ B generates a message m (e.g., a random
blurb crawled from the Web), and executes the operation
write(m, o, bi) where o is the object that maintains mes-
sages on proﬁle bi (e.g., the proﬁle’s “wall” in Facebook).
Finally, each socialbot employs a native controller: a sim-
ple two-state Finite-State Machine (FSM) that enables the
socialbot to either socialize by executing commands, or stay
dormant.
3.4.2 The Botmaster
A botmaster is a botherder-controlled automation soft-
ware that orchestrates the overall operation of an SbN. The
botmaster consists of three main components: a botworker,
a botupdater, and a C&C engine. The botworker builds and
maintains socialbots. Building a new socialbot involves ﬁrst
creating a new socially attractive proﬁle in the targeted OSN
as discussed in Section 2.3.2. After that, the proﬁle’s creden-
tials (i.e., the user name and password) are delegated to the
socialbot software so as to get a full control over this proﬁle.
The botupdater pushes new software updates, such as a new
list of native commands, to the socialbots through the C&C
channel. Finally, the C&C engine maintains a repository of
master commands and runs a master controller: a many-
state FSM that is the core control component of the SbN.
The botherder interacts with the C&C engine to deﬁne a set
of master commands, which are dispatched when needed by
the master controller and then sent to the socialbots. An
interesting question now follows: what kinds of master com-
mands are required to achieve a large-scale inﬁltration in the
targeted OSN?
First, notice that at the beginning each socialbot is iso-
lated from the rest of the OSN, that is, |Γ(bi)| = 0 for each
Figure 1: A Socialbot Network. Each node in the
OSN represents a proﬁle. The socialbots are marked
in black.
Inﬁltrated proﬁles are marked in gray.
Edges between nodes represent social connections.
The dashed arrow represent a connection request.
The small arrows represent social interactions.
channel that facilitates the transfer of both the botcargo and
the commands between the socialbots and the botmaster,
including any heartbeat signals. Figure 1 shows a conceptual
model of an SbN.
3.2 Objectives
The botherder is a person or an organization that builds
and operates an SbN for two main objectives: (1) to carry
out a large-scale inﬁltration campaign in the targeted OSN,
and (2) to harvest private users’ data. The ﬁrst objective
involves connecting to a large number of either random or
targeted OSN users for the purpose of establishing an inﬂu-
ential position or fame. The second objective, on the other
hand, aims to generate proﬁt by collecting personal users’
data that have monetary value. Notice that this data can
be then used to craft personalized messages for subsequent
spam, phishing, or astroturf campaigns.
3.3 Design Goals
Ideally, an SbN has to be fully automated and scalable
enough to control hundreds of socialbots. This is achieved by
adopting a traditional web-based botnet design. In order to
be eﬀective, however, an SbN has to meet three challenging
goals: (1) each socialbot has to be designed in such a way
that hides its true face; a robot, (2) the botmaster has to
implement heuristics that enable large-scale inﬁltration in
the targeted OSN, and (3) the traﬃc in the C&C channel
has to look benign in order to avoid detecting the botmaster.
In this paper, we decided to use a simplistic design in order
to meet each one of these goals. We used techniques that
have shown to be both feasible and eﬀective. We discuss the
details of these techniques in the following section.
3.4 Construction
We now discuss how a botherder can construct an SbN
that performs well in practice while meeting the design goals
outlined in the previous section.
Botmaster C&C Channel Socialbots Online Social Network Botherder Table 2: Master commands. The socialbot bi ∈ B is the socialbot executing the command, |B| = n.
Command
cluster
rand_connect(k)
decluster
crawl_extneighborhood Returns ∆(bi), the extended neighborhood of bi, as botcargo
mutual_connect
harvest_data
Description
Connects bi to at most Navg other socialbots in B
Connects bi to k non-boherder-owned proﬁles that are picked at random from the OSN
Disconnects bi from every socialbot bj ∈ S where S = {bj | bj ∈ Γ(bi) ∩ B and |Γ(bj)| > n}
Connects bi to every proﬁle pj ∈ ∆(bi) − B.
Reads all accessible information of every proﬁle pj ∈ Γ(bi), and returns it as botcargo
bi ∈ B, which is not a favorable structure to start a large-
scale inﬁltration. Tong et al. [39] show that the social at-
tractiveness of a proﬁle in an OSN is highly correlated to its
neighborhood size, where the highest attractiveness is ob-
served when the neighborhood size is close to the network’s
average. Usually, Navg is known or can be estimated (e.g.,
Navg = 130 on Facebook [3]). Thus, in order to increase the
social attractiveness of a socialbot, the adversary deﬁnes a
master command cluster, which orders each socialbot to
connect to at most Navg other socialbots.
Second, it has been widely observed that if two users have
a mutual connection in common, then there is an increased
likelihood that they become connected themselves in the fu-
ture [22]. This property is known as the triadic closure prin-
ciple, which originates from real-life social networks [32].
Nagle et al. [29] show that the likelihood of accepting a
connection request in an OSN is about three times higher
given the existence of some number of mutual connections.
Therefore, in order to improve the potential inﬁltration in
the targeted OSN, the adversary deﬁnes a master command
mutual_connect, which orders each socialbot to connect to
user proﬁles with whom it has mutual connections.
Finally, we design the master controller to switch between
three master states or phases: setup, bootstrapping, and
propagation. In the setup phase, the botmaster builds n so-
cialbots, updates their software, and then issues the cluster
command. After that, in the bootstrapping phase, the bot-
master issues the command rand_connect(k), which orders
each socialbot to connect to k proﬁles that are picked at
random from the targeted OSN. When every socialbot is
connected to k non-botherder-owned proﬁles, the botmaster
issues the command decluster, which orders the socialbots
to break the social connections between them, and hence,
destroying any n-clique structure that could have been cre-
ated in the earlier step. In the propagation phase, the bot-
master issues the command crawl_extneighborhood, which
orders the socialbots to crawl their extended neighborhoods,
after which the botmaster uses this information and issues
the command mutual_connect. Whenever a socialbot in-
ﬁltrates a user proﬁle, the botmaster issues the command
harvest_data, which orders the socialbot to collect all ac-
cessible users’ proﬁle information in its neighborhood. A
description of all master commands is shown in Table 2.
3.4.3 The C&C Channel
The communication model of an SbN consists of two chan-
nels: the C&C channel and the socialbot-OSN channel. The
socialbot-OSN channel carries only OSN-speciﬁc API calls
and normal HTTP traﬃc, which are the end product of ex-
ecuting a command by a socialbot. From the OSN side, this
traﬃc originates from either an HTTP proxy in case of high
activity, or from a normal user. It is therefore quite diﬃ-
Figure 2: The Facebook Socialbot Network.
cult to identify a socialbot solely based on the traﬃc in the
socialbot-OSN channel.
As for the C&C channel, how should it be built so that it
is particularly hard to identify the botmaster? To start with,
we argue that detecting the botmaster from the C&C traﬃc
is as hard as it is in a traditional botnet; the botherder
can rely on the existing botnet infrastructure and deploy
the SbN as part of the botnet. Alternatively, the botherder
can employ advanced techniques that, for example, establish
a probabilistically unobservable communication channel by
building a covert OSN botnet [28].
4. EVALUATION
In order to evaluate how vulnerable OSNs are to a large-
scale inﬁltration by an SbN, we decided to build one accord-
ing to the discussion in Section 3.4. We chose Facebook as
a targeted OSN because we believe it is particularly diﬃcult
to operate an SbN in Facebook for the following reasons:
(1) unlike other OSNs, Facebook is mostly used to connect
to oﬄine friends and family but not to strangers [13], and
(2) Facebook employs the Facebook Immune System (FIS):
an adversarial learning system which represents a potential
nemesis of any SbN [36].
4.1 Ethics Consideration
Given the nature of an SbN, a legitimate question follows:
is it ethically acceptable and justiﬁable to conduct such a
research experiment? We believe that minimal-risk realistic
experiments are the only way to reliably estimate the fea-
sibility of an attack in real-world. These experiments allow
us, and the wider research community, to get a genuine in-
sight into the ecosystem of online attacks, which are useful
in understanding how similar attacks may behave and how
to defend against them. This seems to be the opinion of
other researchers who share our belief [6, 20].
CMDs Botcargo Graph API + HTTP Facebook Servers b1 bi Socialbot API Wrapper HTTP Scraper Native Controller bi Botmaster Botbuilder Botupdater C&C Engine Master Controller 3rd Party  Websites & APIs bi Our Machines HTTP Figure 3: Degree distribution
of the generated random sam-
ple of Facebook user proﬁles.
Figure 4: Cumulative distribu-
tion of number of days and ac-
cepted friendship requests.
Figure 5: Overall inﬁltration as
a function of number of mutual
friends.
We carefully designed our experiment in order to reduce
any potential risk at the user side by following known prac-
tices [7], and got the approval of our university’s behavioral
research ethics board. We strongly encrypted and properly
anonymized all collected data, which we have completely
deleted after we ﬁnished our planned data analysis.
4.2 The Facebook SbN
Figure 2 shows the architecture of the SbN we developed.
Each socialbot ran the same software and was equipped with
only one native command; status_update. We implemented
the generic operations described in Table 1 using two tech-
niques: API calls and HTTP-request templates, which we
now brieﬂy describe. First, we exploited Facebook’s Graph
API [1] to carry out the social-interaction operations. The
API, however, requires the user (i.e., the socialbot in this
case) to be logged in to Facebook at the time of any API
call. To avoid this, we developed a Facebook application
that fetches permanent OAuth 2.0 access tokens that al-
low each socialbot to send API calls without the need to
login. Second, for the social-structure operations, we used
pre-recorded HTTP-request templates that allow each so-
cialbot to send friendship requests as if they were sent from
a browser. We used an API provided by iheartquotes.com
to pull random quotes and blurbs which we used as mes-
sages for the status updates. As for the botmaster software,
we implemented the botworker to interface with three useful
websites: decaptcher.com; a CAPTCHA-breaking business,
hotornot.com; a photo-sharing website, and mail.ru; an
email provider. We also implemented the botupdater with
an enhanced functionality to update the HTTP-request tem-
plates, along with any new native commands. Finally, we
implemented all master commands described in Table 2.
The master command rand_connect requires some extra
attention. On Facebook, each proﬁle has a unique ID that
is represented by a 64-bit integer and is assigned at the time
the proﬁle is created.
In order to get a uniform sample
of Facebook proﬁles, we decided to use a simple random
sampling technique called rejection sampling [34], which we
now descirbe. First, we generated 64-bit integers at random,
but with a range that is reduced to the known ID ranges used