```  
postgres=# select oid,relname,ctid from pg_class order by ctid desc limit 10;  
   oid    |              relname              |    ctid      
----------+-----------------------------------+------------  
     3455 | pg_class_tblspc_relfilenode_index | (92424,33)  
     2663 | pg_class_relname_nsp_index        | (92424,32)  
     2662 | pg_class_oid_index                | (92424,31)  
     1259 | pg_class                          | (92424,30)  
 13089945 | test_pkey                         | (92424,25)  
```  
以上诡异的问题，在Greenplum数据库中就是致命的（不知道现在的版本改进了没有，反正PostgreSQL 9.5是没这个问题的）。    
如果你在GP中有几百万的表，这几条元数据因以上原因跑pg_class 的最后几页去了，那问题就大了(后面会讲回天的方法)。    
http://cncc.bingj.com/cache.aspx?q=osdba+pg_index+reindex&d=5025474051580513&mkt=zh-CN&setlang=zh-CN&w=pa4BQX_-Pu7tUlh6kM34Dv-xu2uzi4m6    
以前老唐在Greenplum上对元表做了这样的操作，结果很感人。      
greenplum中reindex pg_class后发生狂读pg_class的问题分析       
当访问任何一个表时，需要从pg_class表中提取这个表的元数据信息，而在pg_class中查找表的原数据信息，需要访问索引pg_class_oid_index，而访问索引pg_class_oid_index，也需要从pg_class表中获得索引pg_class_oid_index的元数据信息，而获得索引pg_class_oid_index自己的元数据信息，就不能再通过索引自己去查找自己的信息了，这里就只能从头扫描表pg_class来获得，而由于索引pg_class_oid_index的条目被移到了最后的位置，所以导致需要几乎把pg_class从头 扫描到尾才能找到pg_class_oid_index的条目，这样就大大的降低了数据库的性能。  
以前也做过pg_class，为什么没有出来这个问题呢？我和任振中也做了测试发现，当原先的0号块中有空闲空间时，做reindex时，索引pg_class_oid_index的 条目仍会在0号块中，这样就不会出现上面的问题了。    
由此可知，在greenplum中是不能随便对pg_class表做reindex了。      
### 如果不小心把pg_class_oid_index等几个元表弄到pg_class 的末端了咋办  
其实还是可以回天的，而且方法依旧很简单。    
把头几个页的数据更新掉，然后用 vacuum回收前几页，然后把要挪动的记录更新一下，FSM会随机选择空页面给你放，就有机会回到前面的页。    
例子    
当前他们在这里    
```  
postgres=# select ctid,oid,relname from pg_class where oid in (1259,3455,2663,2662);  
    ctid    | oid  |              relname                
------------+------+-----------------------------------  
 (92424,42) | 1259 | pg_class  
 (92424,43) | 2662 | pg_class_oid_index  
 (92424,44) | 2663 | pg_class_relname_nsp_index  
 (0,1)      | 3455 | pg_class_tblspc_relfilenode_index  
(4 rows)  
```  
把前面5页的记录都更新一遍    
```  
postgres=# update pg_class set relkind=relkind where ctid::text ~ '^\(0,' or ctid::text ~ '^\(1,' or ctid::text ~ '^\(2,' or ctid::text ~ '^\(3,' or ctid::text ~ '^\(4,' or ctid::text ~ '^\(5,';  
UPDATE 207  
```  
回收垃圾    
```  
postgres=# vacuum verbose pg_class;  
```  
更新要挪动的记录  
```  
postgres=# update pg_class set relkind=relkind where oid in (1259,3455,2663,2662);  
UPDATE 4  
```  
已经挪到前面的页了，恭喜你    
```  
postgres=# select ctid,oid,relname from pg_class where oid in (1259,3455,2663,2662);  
  ctid  | oid  |              relname                
--------+------+-----------------------------------  
 (0,46) | 1259 | pg_class  
 (0,48) | 2662 | pg_class_oid_index  
 (1,1)  | 2663 | pg_class_relname_nsp_index  
 (1,2)  | 3455 | pg_class_tblspc_relfilenode_index  
(4 rows)  
```  
### 参考    
src/backend/catalog/postgres.bki    
```  
create pg_proc 1255 bootstrap rowtype_oid 81  
...  
insert OID = 1242 ( boolin 11 10 12 1 0 0 0 f f f f t f i 1 0 16 "2275" _null_ _null_ _null_ _null_ _null_ boolin _null_ _null_ _null_ )  
insert OID = 1243 ( boolout 11 10 12 1 0 0 0 f f f f t f i 1 0 2275 "16" _null_ _null_ _null_ _null_ _null_ boolout _null_ _null_ _null_ )  
...  
```  
### 注意事项    
1\. 因为vacuum full和cluster都是DDL操作，需要注意锁等待和本身需要运行的时间，建议空闲时间操作。      
并且设置语句超时或锁超时。      
2\. 对于Greenplum 千万别对pg_class执行vacuum full, reindex, cluster操作，否则可能是致命伤害。    
万一你不小心这么做了，可以使用我上面教你的挪动记录的方法来补救。      
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")