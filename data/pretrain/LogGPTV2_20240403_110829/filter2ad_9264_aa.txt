# Java反射
### 前言
第一次迈入Java安全的领域 这种感觉又让我回想起了去年第一次开始学习php的时候 面对全新的语法 语言结构 又需要从零开始慢慢领悟 结合之前学习的经验
在刚刚接触一种语言之初 建立自己好的习惯 往往比解决某一个问题更重要 学习的过程将结合p牛的Java安全漫谈 以及网上的大小文章进行全面的领悟与理解
前路道阻且艰 尚需更加努力
### 类 函数 方法 对象
在学习Java之前 我们需要先确定一下 这几个概念的定义 虽然各类语言之间互通 但是我们还是需要在学习一门新的语言之前 做好充分的准备
#### 类
类在`java`中是用`class`关键字定义的一个结构，类中可以定义函数以及定义变量
#### 函数与方法
我们首先可以来借鉴一下 在python中的这两种概念的区分
定义函数时，我们是可以不设置形参的。  
如果设置了形参，形参和实参是对应的，有多少形参，就需要传多少实参。
定义类的方法时，是必须至少设置一个形参的，并且在调用这个方法时，不需要传实参的。
其实 在Java中 也是差不多的道理 我们可以用实参和形参的存在 来区分二者
#### 对象
Java本身就是一门 面向对象编程的语言 对象自然是其中的主角 一切皆为对象 我们可以将其理解为 在内存中的一段代码块 当我们使用new创建了一个实体类后
java虚拟机就会在内存中开辟出一段内存空间 用来存放这个实体类
eg.
    Person person = new Person("Jums",78,187);
代码中定义了Person 实体类 其别名叫做person 那么此时的person 就代表一个对象
### 反射的定义
反射的定义是指在程序的`运行状态`中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。
我们说的通俗一点
可以说是获取Class对象然后使用java.lang.reflect里提供的方法操作Class对象，Class与java.lang.reflect构成了java的反射技术。
反射是大多数语言中都必不可少的部分 对象可以通过反射获取他的类 类可以通过反射拿到所有方法 拿到的方法可以调用 总之 通过反射 我们可以将Java
这种静态语言 赋予动态特性
我们从这个定义中 我们就可以看出来 Java可以通过反射变得格外的灵活
#### 反射常用API
##### 获取反射中的Class对象
在反射中，要获取一个类或调用一个类的方法，我们首先需要获取到该类的 Class 对象。
在 Java API 中，获取 Class 类对象有三种方法：
**第一种，使用 Class.forName 静态方法。** 当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。
    Class clz = Class.forName("java.lang.String");
**第二种，使用 .class 方法。**
这种方法只适合在编译前就知道操作的 Class。
    Class clz = String.class;
**第三种，使用类对象的 getClass() 方法。**
    String str = new String("Hello");
    Class clz = str.getClass();
##### 通过反射创建类对象
通过反射创建类对象主要有两种方式：通过 Class 对象的 newInstance() 方法、通过 Constructor 对象的
newInstance() 方法。
第一种：通过 Class 对象的 newInstance() 方法。
    Class clz = Apple.class;
    Apple apple = (Apple)clz.newInstance();
第二种：通过 Constructor 对象的 newInstance() 方法
    Class clz = Apple.class;
    Constructor constructor = clz.getConstructor();
    Apple apple = (Apple)constructor.newInstance();
通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class
对象则只能使用默认的无参数构造方法。下面的代码就调用了一个有参数的构造方法进行了类对象的初始化。
    Class clz = Apple.class;
    Constructor constructor = clz.getConstructor(String.class, int.class);
    Apple apple = (Apple)constructor.newInstance("红富士", 15);
##### 通过反射获取类属性、方法、构造器
我们通过 Class 对象的 getFields() 方法可以获取 Class 类的属性，但无法获取私有属性。
    Class clz = Apple.class;
    Field[] fields = clz.getFields();
    for (Field field : fields) {
        System.out.println(field.getName());
    }
输出结果是：
    price
而如果使用 Class 对象的 getDeclaredFields() 方法则可以获取包括私有属性在内的所有属性：
    Class clz = Apple.class;
    Field[] fields = clz.getDeclaredFields();
    for (Field field : fields) {
        System.out.println(field.getName());
    }
输出结果是：
    name
    price
与获取类属性一样，当我们去获取类方法、类构造器时，如果要获取私有方法或私有构造器，则必须使用有 declared 关键字的方法。
我们可以通过一个简单的实例程序 来说明 反射的作用
    public class Apple {
        private int price;
        public int getPrice() {
            return price;
        }
        public void setPrice(int price) {
            this.price = price;
        }
        public static void main(String[] args) throws Exception{
            //正常的调用
            Apple apple = new Apple();
            apple.setPrice(5);
            System.out.println("Apple Price:" + apple.getPrice());
            //使用反射调用
            Class clz = Class.forName("com.chenshuyi.api.Apple");
            Method setPriceMethod = clz.getMethod("setPrice", int.class);
            Constructor appleConstructor = clz.getConstructor();
            Object appleObj = appleConstructor.newInstance();
            setPriceMethod.invoke(appleObj, 14);
            Method getPriceMethod = clz.getMethod("getPrice");
            System.out.println("Apple Price:" + getPriceMethod.invoke(appleObj));
        }
    }
上面的代码的输出结果是
    Apple Price:5
    Apple Price:14
所以 我们可以简单总结一下 我们通过反射获取一个对象的步骤
1.获取类的Class对象实例
    Class clz = Class.forName("com.zhenai.api.Apple");
2.根据Class对象实例获取Constructor对象
    Constructor appleConstructor = clz.getConstructor();
3.使用Constructor对象的newInstance方法获取反射类对象
    Object appleObj = appleConstructor.newInstance();
而当我们要调用某一个方法 则需要通过下面的步骤
1.获取方法的Method对象
    Method setPriceMethod = clz.getMethod("setPrice", int.class);
2.利用invoke方法调用方法
    setPriceMethod.invoke(appleObj, 14);
其实 我们不免疑惑 上面的这些Class之类 是从什么地方来的呢 这便要介绍一下 java中一个至关重要的包 java.lang
#### java.lang
这其中 就包含着我们常用类 比如说Object Class 等等 而当我们使用这个包之下的类时 我们是不需要import导入的 这是一个默认导入的 包
我们简单介绍一下其中的几个类
##### 对象基类Object
Object，是java.lang的根类，也是所有类的超类 超类也就是 当我们的派生关键字 extends出现的时候 被继承的类称为超类 或者是基类 父类
派生出来的类 则为子类
其实 当父类 子类这种字眼出现的时候 我们就很好去理解了 而这里的超类 往往定义的都是公共部分 他们的子类才会具有更加丰富的功能
##### 类
Class，用来表示类和接口的类型。Class对象在类加载时由JVM调用类加载器中的defineClass方法自动构造。  
ClassLoader，负责加载类。  
Compiler，作为编译器的占位符，它不做任何事情，仅用来支持Java到本机代码的编译器及相关服务。
对这些知识有了基本的了解之后 我们才可以在理解的时候更加简单
#### 动态特性
那么 什么 叫动态特性呢 这是p牛在安全漫谈中提出的一个概念 p牛对他的解释是 一段代码 改变其中的变量 将会导致这段代码产生功能性的变化
举个例子 在php中 其本身就拥有很多动态特性 所以 我们就可以通过一句话木马 来执行各种功能 Java虽然做不到php那么灵活 但是
也是可以提供一些动态特性的
    public void execute(String className, String methodName) throws Exception {
     Class clazz = Class.forName(className);
     clazz.getMethod(methodName).invoke(clazz.newInstance());
    }
在上面 包含了几个极为重要的方法
获取类的方法 forName
实例化类对象的方法 newInstance
获取函数的方法 getMethod
执行函数的方法 invoke
我们在下面将分开介绍
### forName
forName是Class类中的一个static的成员方法 所有的Class对象都来自于Class类 所以 Class类中
定义的方法将适用于所有Class对象 Class.forName的调用 会返回一个对应类的Class对象 因此
当我们想要去获取一个正在运行的Class对象的相关属性时 我们就可以使用forName方法 获取对Class对象的引用
Class.forName 如果知道某个类的名字 想获取到这个类 就可以使用 forName 来获取
对于大部分人来说 第一次见到`class.forName(String className)` 的时候 应该是 在使用JDBC连接数据库的时候
    import com.mysql.jdbc.Driver;
    import java.sql.*;
        public class JdbcDemo {
            public static void main(String[] args) throws SQLException, ClassNotFoundException {
            String url = "jdbc:mysql://127.0.0.1:3306/mydb";
            String username = "root";
            String password = "redhat";
            Class.forName("com.mysql.jdbc.Driver"); //这里
            Connection connection = DriverManager.getConnection(url, username, password);
            String sql = "SELECT * FROM msg";
            PreparedStatement prepareStatement = connection.prepareStatement(sql);
            ResultSet resultSet = prepareStatement.executeQuery();
            resultSet.next();
            String address = resultSet.getString("address");
            System.out.println(address);
        }
    }
这里通过 Class.forName 传入 com.mysql.jdbc.Driver 之后，就判断了连接的数据库为 mysql 数据库
forName有两个函数重载 （函数重载就是 可以在一个类中存在多个函数 函数名称相同 但是 参数列表不同
eg.假如你是个木工，我要让你制作桌子(返回值)。然后，我给了你紫檀木，你就可以制作一张紫檀桌子；我给了你黄花梨，你可以做黄花梨的桌子。这些不同材质的木料，就是参数。返回的都是桌子，但是具体使用哪个函数，就根据传入的木料不同来决定的。）
`Class forName(String name)`
`Class forName(String name, **boolean** initialize, ClassLoader loader)`
第一个 其实就是 我们常见的获取class的方式 可以理解为 第二种方式的一个封装
    Class.forName(className)
    //等于
    Class.forname(className,true,currentLoader)