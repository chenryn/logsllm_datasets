以下流程描述了如何检查 [**[chrony]{.application}**]{.strong} 是否与使用
`tracking`{.literal}, `sources`{.literal}, 和 `sourcestats`{.literal}
命令同步。
::: orderedlist
**流程**
1.  运行以下命令检查 [**[chrony]{.application}**]{.strong} 跟踪：
    ``` literallayout
    $ chronyc tracking
    Reference ID    : CB00710F (foo.example.net)
    Stratum         : 3
    Ref time (UTC)  : Fri Jan 27 09:49:17 2017
    System time     :  0.000006523 seconds slow of NTP time
    Last offset     : -0.000006747 seconds
    RMS offset      : 0.000035822 seconds
    Frequency       : 3.225 ppm slow
    Residual freq   : 0.000 ppm
    Skew            : 0.129 ppm
    Root delay      : 0.013639022 seconds
    Root dispersion : 0.001100737 seconds
    Update interval : 64.2 seconds
    Leap status     : Normal
    ```
2.  sources 命令显示 `chronyd`{.literal}
    正在访问的当前时间源的信息。运行以下命令检查
    [**[chrony]{.application}**]{.strong} 源：
    ``` literallayout
    $ chronyc sources
    	210 Number of sources = 3
    MS Name/IP address         Stratum Poll Reach LastRx Last sample
    ===============================================================================
    #* GPS0                          0   4   377    11   -479ns[ -621ns] /-  134ns
    ^? a.b.c                         2   6   377    23   -923us[ -924us] +/-   43ms
    ^ d.e.f                         1   6   377    21  -2629us[-2619us] +/-   86ms
    ```
    可以使用可选参数 -v
    来包括详细信息。在这种情况下，会输出额外的标头行显示字段含义的信息。
3.  `sourcestats`{.literal} 命令显示目前被 `chronyd`{.literal}
    检查的每个源的偏移率和误差估算过程的信息。运行以下命令检查
    [**[chrony]{.application}**]{.strong} 源统计：
    ``` literallayout
    $ chronyc sourcestats
    210 Number of sources = 1
    Name/IP Address            NP  NR  Span  Frequency  Freq Skew  Offset  Std Dev
    ===============================================================================
    abc.def.ghi                11   5   46m     -0.001      0.045      1us    25us
    ```
    可以使用可选参数 `-v`{.literal}
    来包括详细信息。在这种情况下，会输出额外的标头行显示字段含义的信息。
:::
::: itemizedlist
**其他资源**
-   `chronyc(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#manually-adjusting-the-system-clock_using-chrony}手动调整系统时钟 {.title}
:::
以下流程描述了如何手动调整系统时钟。
::: orderedlist
**流程**
1.  要立即调整系统时钟，绕过单机进行的任何调整，以 `root`{.literal}
    身份运行以下命令：
    ``` literallayout
    # chronyc makestep
    ```
:::
如果使用了 `rtcfile`{.literal}
指令，则不应该手动调整实时时钟。随机调整会干扰
[**[chrony]{.application}**]{.strong}的需要测量实时时钟偏移的速度。
:::
::: section
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#setting-up-chrony-for-a-system-in-an-isolated-network_using-chrony}在隔离的网络中为系统设定 chrony {.title}
:::
对于从来不连接到互联网的网络来说，一台计算机被选为主计时服务器。其他计算机要么是主计算机的直接客户端，要么是客户端的客户端。在
master 上，必须使用系统时钟的平均偏移率手动设置 drift 文件。如果 master
被重启，它将从周围的系统获得时间并计算设定系统时钟的平均值。之后它会恢复基于
drift 文件的调整。当使用 settime 命令时会自动更新 `drift`{.literal}
文件。
以下流程描述了如何为隔离的网络中的系统设置
[**[chrony]{.application}**]{.strong}。
::: orderedlist
**流程**
1.  在选为 master 的系统上，以 `root`{.literal}
    用户身份运行一个文本编辑器来编辑
    `/etc/chrony.conf`{.literal}，如下所示：
    ``` literallayout
    driftfile /var/lib/chrony/drift
    commandkey 1
    keyfile /etc/chrony.keys
    initstepslew 10 client1 client3 client6
    local stratum 8
    manual
    allow 192.0.2.0
    ```
    其中 `192.0.2.0`{.literal} 是允许客户端连接的网络或者子网地址。
2.  在选择为 master 客户端的系统上，以 `root`{.literal}
    用户身份运行一个文本编辑器来编辑
    `/etc/chrony.conf`{.literal}，如下所示：
    ``` literallayout
    server master
    driftfile /var/lib/chrony/drift
    logdir /var/log/chrony
    log measurements statistics tracking
    keyfile /etc/chrony.keys
    commandkey 24
    local stratum 10
    initstepslew 20 master
    allow 192.0.2.123
    ```
    其中 `192.0.2.123`{.literal} 是 master 的地址， `master`{.literal}
    是 master 的主机名。带有此配置的客户端如果重启 master 将重新同步。
:::
在不是 master 客户端的客户端系统中，`/etc/chrony.conf`{.literal}
文件应该是相同的，除了应该省略 `local`{.literal} 和 `allow`{.literal}
指令。
在隔离的网络中，您还可以使用 `local`{.literal}
指令来启用本地参考模式。该模式可允许 `chronyd`{.literal} 作为
`NTP`{.literal}
服务器实时显示同步，即使它从未同步或者最后一次更新时钟早前发生。
要允许网络中的多个服务器使用相同的本地配置并相互同步，而不让客户端轮询多个服务器，请使用
`local`{.literal} 指令的 `orphan`{.literal}
选项启用孤立模式。每一服务器需要配置为轮询使用`本地`{.literal}的所有其他服务器。这样可确保只有具有最小参考
ID
的服务器具有本地参考活跃状态，并同步其他服务器。当服务器出现故障时，另一个服务器将接管。
:::
::: section
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#proc_configuring-remote-monitoring-access_using-chrony}配置远程监控访问 {.title}
:::
[**[chronyc]{.application}**]{.strong} 可以通过两种方式访问
`chronyd`{.literal}:
::: itemizedlist
-   互联网协议、IPv4 或者 IPv6。
-   UNIX 域套接字，由 `root`{.literal} 用户或 `chrony`{.literal}
    用户从本地进行访问。
:::
默认情况下，[**[chronyc]{.application}**]{.strong} 连接到 Unix
域套接字。默认路径为
`/var/run/chrony/chronyd.sock`{.literal}。如果此连接失败，例如
[**[chronyc]{.application}**]{.strong} 在非 root
用户下运行，[**[chronyc]{.application}**]{.strong} 会尝试连接到
127.0.0.1，然后 ::1。
网络中只允许以下监控命令，它们不会影响 `chronyd`{.literal} 的行为：
::: itemizedlist
-   activity
-   manual list
-   rtcdata
-   smoothing
-   sources
-   sourcestats
-   tracking
-   waitsync
:::
`chronyd`{.literal} 接受这些命令的主机集合可以使用 `chronyd`{.literal}
配置文件中的 `cmdallow`{.literal} 指令，或者在
[**[chronyc]{.application}**]{.strong} 中使用 `cmdallow`{.literal}
命令配置。默认情况下，只接受来自本地主机（127.0.0.1 或 ::1）的命令。
所有其他命令只能通过 Unix
域套接字进行。当通过网络发送时，`chronyd`{.literal} 会返回
`Notauthorized`{.literal} 错误，即使它来自 localhost。
以下流程描述了如何使用 [**[chronyc]{.application}**]{.strong} 远程访问
chronyd。
::: orderedlist
**流程**
1.  在 `/etc/chrony.conf`{.literal} 文件中添加以下内容来允许 IPv4 和
    IPv6 地址的访问：
    ``` literallayout
    bindcmdaddress 0.0.0.0
    ```
    或者
    ``` literallayout
    bindcmdaddress ::
    ```
2.  使用 `cmdallow`{.literal} 指令允许来自远程 IP
    地址、网络或者子网的命令。
    ::: informalexample
    在 `/etc/chrony.conf`{.literal} 文件中添加以下内容：
    ``` literallayout
    cmdallow 192.168.1.0/24
    ```
    :::
3.  在防火墙中打开端口 323 从远程系统连接。
    ``` literallayout
    #  firewall-cmd --zone=public --add-port=323/udp
    ```
    如果想永久打开端口 323，使用 `--permanent`{.literal}。
    ``` literallayout
    #  firewall-cmd --permanent --zone=public --add-port=323/udp
    ```
:::
::: itemizedlist
**其他资源**
-   `chrony.conf(5)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#managing-time-synchronization-using-rhel-system-roles_using-chrony}使用 RHEL 系统角色管理时间同步 {.title}
:::
您可以使用 `timesync`{.literal}
角色在多个目标机器上管理时间同步。`timesync`{.literal} 角色安装并配置
NTP 或 PTP 实现来作为 NTP 客户端或 PTP slave 操作，以便将系统时钟与 PTP
域中的 NTP 服务器或 grandmasters 同步。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
`timesync 角色`{.literal}替换了受管主机上给定或检测到的供应商服务的配置。之前的设置即使没有在角色变量中指定，也会丢失。如果没有定义
`timesync_ntp_provider`{.literal} 变量，唯一保留的设置就是供应商选择。
:::
以下示例演示了如何在只有一个服务器池的情况下应用 `timesync`{.literal}
角色。
::: example
[]{#using-chrony_configuring-basic-system-settings.html#idm140217697993488}
**例 28.1. 为单一服务器池应用 timesync 角色的 playbook 示例**
::: example-contents
``` literallayout
---
- hosts: timesync-test
  vars:
    timesync_ntp_servers:
      - hostname: 2.rhel.pool.ntp.org
        pool: yes
        iburst: yes
  roles:
    - rhel-system-roles.timesync
```
:::
:::
有关 `timesync`{.literal} 角色变量的详细参考，请安装
`rhel-system-roles`{.literal} 软件包，并参阅
`/usr/share/doc/rhel-system-roles/timesync`{.literal} 目录中的
` README.md`{.literal} 或 README.html``{=html} 文件。
::: itemizedlist
**其他资源**
-   [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/administration_and_configuration_tasks_using_system_roles_in_rhel/getting-started-with-rhel-system-roles_administration-and-configuration-tasks-using-system-roles-in-rhel){.link}
:::
:::
::: section
::: titlepage
# []{#using-chrony_configuring-basic-system-settings.html#_additional_resources_10}其他资源 {.title}
:::
::: itemizedlist
-   `chronyc(1)`{.literal} man page
-   `chronyd(8)`{.literal} man page
-   [常见问题解答](https://chrony.tuxfamily.org/faq.html){.link}
:::
:::
:::
[]{#chrony-with-hw-timestamping_configuring-basic-system-settings.html}
::: chapter
::: titlepage
# []{#chrony-with-hw-timestamping_configuring-basic-system-settings.html#chrony-with-hw-timestamping_configuring-basic-system-settings}第 29 章 带有 HW 时间戳的 Chrony {.title}
:::
硬件时间戳是一些网络接口控制器(NIC)中支持的一项功能，它提供了准确的传入和传出数据包的时间戳。`NTP`{.literal}
时间戳通常由内核及使用系统时钟的 [**[chronyd]{.application}**]{.strong}
创建。但是，当启用 HW 时间戳时，NIC
使用其自己的时钟在数据包进入或离开链路层或物理层时生成时间戳。与
`NTP`{.literal}
一起使用时，硬件时间戳可能会显著提高同步的准确性。为了获得最佳准确性，`NTP`{.literal}
服务器和 `NTP`{.literal}
客户端都需要使用硬件时间戳。在理想的情况下，有可能有微秒级的准确性。
另一个用于使用硬件时间戳进行时间同步的协议是 `PTP`{.literal}
与 `NTP`{.literal} 不同，`PTP`{.literal}
依赖于网络交换机和路由器。如果您想要达到同步的最佳准确性，请在带有
`PTP`{.literal} 支持的网络中使用
`PTP`{.literal}，在使用不支持这个协议的交换机和路由器的网络上选择
`NTP`{.literal}。
以下小节描述了如何进行：
::: itemizedlist
-   验证硬件时间戳支持
-   启用硬件时间戳
-   配置客户端轮询间隔
-   启用交集模式
-   为大量客户端配置服务器
-   验证硬件时间戳
-   配置 PTP-NTP 网桥
:::
::: section
::: titlepage
# []{#chrony-with-hw-timestamping_configuring-basic-system-settings.html#verifying-support-for-hardware-timestamping_chrony-with-hw-timestamping}验证硬件时间戳支持 {.title}