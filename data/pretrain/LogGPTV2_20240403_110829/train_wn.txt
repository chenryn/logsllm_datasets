.br sigchld .)
the glibc wrapper invokes any fork handlers that have been
established using
.br pthread_atfork (3).
.\" and does some magic to ensure that getpid(2) returns the right value.
.sh examples
see
.br pipe (2)
and
.br wait (2).
.sh see also
.br clone (2),
.br execve (2),
.br exit (2),
.br setrlimit (2),
.br unshare (2),
.br vfork (2),
.br wait (2),
.br daemon (3),
.br pthread_atfork (3),
.br capabilities (7),
.br credentials (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\" and copyright 2008, linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified 1993-07-24 by rik faith (PI:EMAIL)
.\" modified 1995-08-14 by arnt gulbrandsen 
.\" modified 2002-07-27 by walter harms
.\" 	(PI:EMAIL)
.th pow 3  2021-03-22 "" "linux programmer's manual"
.sh name
pow, powf, powl \- power functions
.sh synopsis
.nf
.b #include 
.pp
.bi "double pow(double " x ", double " y );
.bi "float powf(float " x ", float " y );
.bi "long double powl(long double " x ", long double " y );
.fi
.pp
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br powf (),
.br powl ():
.nf
    _isoc99_source || _posix_c_source >= 200112l
        || /* since glibc 2.19: */ _default_source
        || /* glibc <= 2.19: */ _bsd_source || _svid_source
.fi
.sh description
these functions return the value of
.i x
raised to the
power of
.ir y .
.sh return value
on success, these functions return the value of
.i x
to the power of
.ir y .
.pp
if
.i x
is a finite value less than 0, and
.i y
is a finite noninteger, a domain error occurs,
.\" the domain error is generated at least as far back as glibc 2.4
and a nan is returned.
.pp
if the result overflows,
a range error occurs,
.\" the range error is generated at least as far back as glibc 2.4
and the functions return
.br huge_val ,
.br huge_valf ,
or
.br huge_vall ,
respectively, with the mathematically correct sign.
.pp
if result underflows, and is not representable,
a range error occurs,
and 0.0 is returned.
.\" posix.1 does not specify the sign of the zero,
.\" but http://sources.redhat.com/bugzilla/show_bug.cgi?id=2678
.\" points out that the zero has the wrong sign in some cases.
.pp
except as specified below, if
.i x
or
.i y
is a nan, the result is a nan.
.pp
if
.i x
is +1, the result is 1.0 (even if
.i y
is a nan).
.pp
if
.i y
is 0, the result is 1.0 (even if
.i x
is a nan).
.pp
if
.i x
is +0 (\-0),
and
.i y
is an odd integer greater than 0,
the result is +0 (\-0).
.pp
if
.i x
is 0,
and
.i y
greater than 0 and not an odd integer,
the result is +0.
.pp
if
.i x
is \-1,
and
.i y
is positive infinity or negative infinity,
the result is 1.0.
.pp
if the absolute value of
.i x
is less than 1,
and
.i y
is negative infinity,
the result is positive infinity.
.pp
if the absolute value of
.i x
is greater than 1,
and
.i y
is negative infinity,
the result is +0.
.pp
if the absolute value of
.i x
is less than 1,
and
.i y
is positive infinity,
the result is +0.
.pp
if the absolute value of
.i x
is greater than 1,
and
.i y
is positive infinity,
the result is positive infinity.
.pp
if
.i x
is negative infinity,
and
.i y
is an odd integer less than 0,
the result is \-0.
.pp
if
.i x
is negative infinity,
and
.i y
less than 0 and not an odd integer,
the result is +0.
.pp
if
.i x
is negative infinity,
and
.i y
is an odd integer greater than 0,
the result is negative infinity.
.pp
if
.i x
is negative infinity,
and
.i y
greater than 0 and not an odd integer,
the result is positive infinity.
.pp
if
.i x
is positive infinity,
and
.i y
less than 0,
the result is +0.
.pp
if
.i x
is positive infinity,
and
.i y
greater than 0,
the result is positive infinity.
.pp
if
.i x
is +0 or \-0,
and
.i y
is an odd integer less than 0,
a pole error occurs and
.br huge_val ,
.br huge_valf ,
or
.br huge_vall ,
is returned,
with the same sign as
.ir x .
.pp
if
.i x
is +0 or \-0,
and
.i y
is less than 0 and not an odd integer,
a pole error occurs and
.\" the pole error is generated at least as far back as glibc 2.4
.rb + huge_val ,
.rb + huge_valf ,
or
.rb + huge_vall ,
is returned.
.sh errors
.\" fixme . review status of this error
.\" longstanding bug report for glibc:
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=369
.\" for negative x, and -large and +large y, glibc 2.8 gives incorrect
.\" results
.\" pow(-0.5,-dbl_max)=nan
.\" edom fe_invalid nan; fail-errno fail-except fail-result;
.\" fail (expected: range-error-overflow (erange, fe_overflow); +inf)
.\"
.\" pow(-1.5,-dbl_max)=nan
.\" edom fe_invalid nan; fail-errno fail-except fail-result;
.\" fail (expected: range-error-underflow (erange, fe_underflow); +0)
.\"
.\" pow(-0.5,dbl_max)=nan
.\" edom fe_invalid nan; fail-errno fail-except fail-result;
.\" fail (expected: range-error-underflow (erange, fe_underflow); +0)
.\"
.\" pow(-1.5,dbl_max)=nan
.\" edom fe_invalid nan; fail-errno fail-except fail-result;
.\" fail (expected: range-error-overflow (erange, fe_overflow); +inf)
see
.br math_error (7)
for information on how to determine whether an error has occurred
when calling these functions.
.pp
the following errors can occur:
.tp
domain error: \fix\fp is negative, and \fiy\fp is a finite noninteger
.i errno
is set to
.br edom .
an invalid floating-point exception
.rb ( fe_invalid )
is raised.
.tp
pole error: \fix\fp is zero, and \fiy\fp is negative
.i errno
is set to
.br erange
(but see bugs).
a divide-by-zero floating-point exception
.rb ( fe_divbyzero )
is raised.
.tp
range error: the result overflows
.i errno
is set to
.br erange .
an overflow floating-point exception
.rb ( fe_overflow )
is raised.
.tp
range error: the result underflows
.i errno
is set to
.br erange .
an underflow floating-point exception
.rb ( fe_underflow )
is raised.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br pow (),
.br powf (),
.br powl ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
c99, posix.1-2001, posix.1-2008.
.pp
the variant returning
.i double
also conforms to
svr4, 4.3bsd, c89.
.sh bugs
.ss historical bugs (now fixed)
before glibc 2.28,
.\" https://sourceware.org/bugzilla/show_bug.cgi?id=13932
on some architectures (e.g., x86-64)
.br pow ()
may be more than 10,000 times slower for some inputs
than for other nearby inputs.
this affects only
.br pow (),
and not
.br powf ()
nor
.br powl ().
this problem was fixed
.\" commit c3d466cba1692708a19c6ff829d0386c83a0c6e5
in glibc 2.28.
.pp
a number of bugs
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=3866
in the glibc implementation of
.br pow ()
were fixed in glibc version 2.16.
.pp
in glibc 2.9 and earlier,
.\"
.\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=6776
when a pole error occurs,
.i errno
is set to
.br edom
instead of the posix-mandated
.br erange .
since version 2.10,
.\" or possibly 2.9, i haven't found the source code change
.\" and i don't have a 2.9 system to test
glibc does the right thing.
.pp
in version 2.3.2 and earlier,
.\" actually, 2.3.2 is the earliest test result i have; so yet
.\" to confirm if this error occurs only in 2.3.2.
when an overflow or underflow error occurs, glibc's
.br pow ()
generates a bogus invalid floating-point exception
.rb ( fe_invalid )
in addition to the overflow or underflow exception.
.sh see also
.br cbrt (3),
.br cpow (3),
.br sqrt (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2003 andries e. brouwer (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th alloc_hugepages 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
alloc_hugepages, free_hugepages \- allocate or free huge pages
.sh synopsis
.nf
.bi "void *syscall(sys_alloc_hugepages, int " key ", void *" addr \
", size_t " len ,
.bi "              int " prot ", int " flag );
.\" asmlinkage unsigned long sys_alloc_hugepages(int key, unsigned long addr,
.\" unsigned long len, int prot, int flag);
.bi "int syscall(sys_free_hugepages, void *" addr );
.\" asmlinkage int sys_free_hugepages(unsigned long addr);
.fi
.pp
.ir note :
glibc provides no wrappers for these system calls,
necessitating the use of
.br syscall (2).
.sh description
the system calls
.br alloc_hugepages ()
and
.br free_hugepages ()
were introduced in linux 2.5.36 and removed again in 2.5.54.
they existed only on i386 and ia64 (when built with
.br config_hugetlb_page ).
in linux 2.4.20, the syscall numbers exist,
but the calls fail with the error
.br enosys .
.pp
on i386 the memory management hardware knows about ordinary pages (4\ kib)
and huge pages (2 or 4\ mib).
similarly ia64 knows about huge pages of
several sizes.
these system calls serve to map huge pages into the
process's memory or to free them again.
huge pages are locked into memory, and are not swapped.
.pp
the
.i key
argument is an identifier.
when zero the pages are private, and
not inherited by children.
when positive the pages are shared with other applications using the same
.ir key ,
and inherited by child processes.
.pp
the
.i addr
argument of
.br free_hugepages ()
tells which page is being freed: it was the return value of a
call to
.br alloc_hugepages ().
(the memory is first actually freed when all users have released it.)
the
.i addr
argument of
.br alloc_hugepages ()
is a hint, that the kernel may or may not follow.
addresses must be properly aligned.
.pp
the
.i len
argument is the length of the required segment.
it must be a multiple of the huge page size.
.pp
the
.i prot
argument specifies the memory protection of the segment.
it is one of
.br prot_read ,
.br prot_write ,
.br prot_exec .
.pp
the
.i flag
argument is ignored, unless
.i key
is positive.
in that case, if
.i flag
is
.br ipc_creat ,
then a new huge page segment is created when none
with the given key existed.
if this flag is not set, then
.b enoent
is returned when no segment with the given key exists.
.sh return value
on success,
.br alloc_hugepages ()
returns the allocated virtual address, and
.br free_hugepages ()
returns zero.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b enosys
the system call is not supported on this kernel.
.sh files
.tp
.i /proc/sys/vm/nr_hugepages
number of configured hugetlb pages.