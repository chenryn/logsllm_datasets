The GitLab REST API enables a user to perform several actions such as interacting with 
projects, access tokens, SSH keys and more. This also allows administrative actions. 
Full documentation on the REST API is available here37. 
ATTACK SCENARIOS 
The below scenarios are notable for an attacker to attempt against GitLab Enterprise 
and have been useful as a part of X-Force Red’s Adversary Simulation engagements. 
This is not an exhaustive list of every single attack path available to execute on GitLab 
Enterprise. The below table summarizes the attack scenarios that will be described. 
Attack Scenario 
Sub-Scenario 
Admin Required? 
Reconnaissance 
-Repository 
-File 
-Code 
No 
User Impersonation 
-Impersonate User Login 
-Impersonation Token 
Yes 
Promoting User to Admin Role 
N/A 
Yes 
Maintain Persistent Access 
-Personal Access Token 
-Impersonation Token 
-SSH Key 
No 
Yes 
No 
Modifying CI/CD Pipeline 
N/A 
No 
SSH Access 
N/A 
Yes 
Table of GitLab Enterprise Attack Scenarios 
Reconnaissance 
The first step an attacker will take once access has been gained to a GitLab Enterprise 
instance, is to start performing reconnaissance. Reconnaissance that could be of value 
to an attacker includes searching for repositories, files, and code of interest. 
Repository Reconnaissance 
An attacker may be looking for repositories that deal with a particular application or 
system. In this case, we are searching for “charm” to look for repositories with that 
search term in the name. 
37 https://docs.gitlab.com/ee/api/index.html 
X-Force Red | 3/2/2022 
52 
Performing web interface project search in GitLab 
Another option for an attacker to search for a project is via the Advanced Search REST 
API38 as shown with the below example curl command. 
curl -k --header "PRIVATE-TOKEN: apiKey" 
"https://gitlabHost/api/v4/search?scope=projects&search=searchTerm" 
38 https://docs.gitlab.com/ee/api/search.html#scope-projects 
X-Force Red | 3/2/2022 
53 
Project search results via API 
File Reconnaissance 
There also may be certain files of interest to an attacker based on file name. For 
example, maybe a file with “decrypt” in it. In GitLab Enterprise, you can use the 
“Advanced Search” feature in the web interface if Elasticsearch is configured and 
enabled. This is detailed at this resource39. 
An alternative method for an attacker to search for a file is via the Repository Tree REST 
API40 as shown with the below example curl command. This request needs to be 
performed for each project, and then the output filtered for the file you are looking for.  
curl -k --header "PRIVATE-TOKEN: apiToken" 
"https://gitlabHost/api/v4/projects/projectID/repository/tree" | 
python -m json.tool | grep -i searchTerm 
39 https://docs.gitlab.com/ee/user/search/advanced_search.html 
40 https://docs.gitlab.com/ee/api/repositories.html#list-repository-tree 
X-Force Red | 3/2/2022 
54 
Search results for filtering for files of interest 
Code Reconnaissance 
An important area of interest for an attacker is searching for secrets within code, such 
as passwords or API keys. In GitLab Enterprise, you can use the “Advanced Search” 
feature in the web interface if Elasticsearch is configured and enabled. 
A different method for an attacker to search code is via the Project Search REST API41 
as shown with the below example curl command. This request needs to be performed 
for each project. 
curl -k --request GET --header "PRIVATE-TOKEN: apiKey" 
"https://gitlabHost/api/v4/projects/projectID/search?scope=blobs&searc
h=searchTerm" | python -m json.tool 
Results of searching for search term in code 
Logging of Reconnaissance 
The project searches via the web interface are logged in the Production log 
(/var/log/gitlab/gitlab-rails/production.log) as shown below. One issue with 
this is that it doesn’t have details on the search term that was used. As you can see in 
the below screenshot it says “[FILTERED]”. 
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i GET | 
grep -i '/search?search' 
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i get | 
grep -i '/search"' 
41 https://docs.gitlab.com/ee/api/search.html#scope-blobs-premium-2 
X-Force Red | 3/2/2022 
55 
Viewing production logs for search information 
The project, file and code searches via the REST API previously shown are logged via 
the API log (/var/log/gitlab/gitlab-rails/api_json.log) as shown below. 
However, the actual search query is not shown and is instead shown as “[FILTERED]”. 
cat /var/log/gitlab/gitlab-rails/api_json.log | grep -i get | grep -i 
'/search"\|repository/tree' 
Viewing API log for searches 
An alternative log file to get the search terms being used is the web log 
(/var/log/gitlab/nginx/gitlab_access.log) 
as shown below. 
This allows 
defenders to see what is being searched for and build rules for anomalous activity or 
suspicious searches such as “password”. 
cat /var/log/gitlab/nginx/gitlab_access.log | grep -i '/search' | cut 
-d " " -f1,4,7 | grep -i api 
X-Force Red | 3/2/2022 
56 
Filtering web log for search requests 
Ensure all the logs mentioned are being forwarded from the GitLab Enterprise server to 
a SIEM, where they can be ingested, and alerts built from them for anomalous activity. 
User Impersonation 
There are two options an attacker has if they have administrative access to GitLab 
Enterprise and would like to impersonate another user. The first option is to 
impersonate a user login via the web interface, and the second option is to create an 
impersonation token.  
Impersonate User Login 
When viewing a user via the admin area, there is a button available in the top right-hand 
corner labeled “Impersonate”. 
Impersonate user button in hpotter profile 
After clicking the “Impersonate” button, you will be logged in as the user you are 
wanting to impersonate. In this instance, we are impersonating the hpotter user 
account. 
X-Force Red | 3/2/2022 
57 
Showing impersonation of hpotter 
This impersonation action is logged as shown in the audit events documentation 42. The 
below search query can be performed on the GitLab server to find impersonation logon 
events. 
cat /var/log/gitlab/gitlab-rails/application*.log | grep -i 'has 
started impersonating' 
Showing user impersonation in application log 
Impersonation Token 
An attacker with admin access can also impersonate another user by creating an 
impersonation token. This can be performed via the web interface or the Users REST 
API43. Using the web interface as an admin, you can navigate to the “Impersonation 
Tokens” section for the user account that you would like to impersonate. Add the 
details for your token including name, expiration date, and scope of permissions. 
42 https://docs.gitlab.com/ee/administration/audit_events.html#impersonation-data 
43 https://docs.gitlab.com/ee/api/users.html#create-an-impersonation-token 
X-Force Red | 3/2/2022 
58 
Creating impersonation token 
After you have created your impersonation token, the token value will be listed for use. 
The user that is impersonated cannot see this impersonation token when accessing 
GitLab Enterprise as themselves; it is only visible to other admin users. 
Showing created impersonation token 
X-Force Red | 3/2/2022 
59 
This activity is 
logged 
in the 
production log 
(/var/log/gitlab/gitlab-
rails/production_json.log) as shown below. 
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i 
impersonate 
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i post | 
grep -A3 -i impersonation_tokens 
Viewing impersonation token creation via web interface in logs 
An attacker can also create an impersonation token via the Users REST API as shown 
with the below example curl command. 
curl -k --request POST --header "PRIVATE-TOKEN: apiToken" --data 
"name=someName-impersonate" --data "expires_at=" --data "scopes[]=api" 
--data "scopes[]=read_user" --data "scopes[]=read_repository" --data 
"scopes[]=write_repository" --data "scopes[]=sudo" 
"https://gitlabHost/api/v4/users/userIDNumberToImpersonate/impersonati
on_tokens" 
Output after creating impersonation token via API 
X-Force Red | 3/2/2022 
60 
This activity is logged in the API log (/var/gitlab/gitlab-rails/api_json.log) as 
shown below. 
cat /var/log/gitlab/gitlab-rails/api_json.log | grep -i 
impersonation_tokens 
Viewing impersonation token creation via API in logs 
Promoting User to Admin Role 
An attacker who has admin credentials (username/password or API key) can promote 
another regular user to the admin role. One option to perform this is via the GitLab 
Enterprise web interface by checking the “Admin” radio button shown below. 
X-Force Red | 3/2/2022 
61 
Giving user admin level access 
You can now see the hgranger user has the admin role. 
X-Force Red | 3/2/2022 
62 
Showing hgranger user has admin access 
This activity is 
logged 
in the 
production log 
(/var/log/gitlab/gitlab-
rails/production_json.log) as shown below. 
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i patch | 
grep -i 'admin/users' 
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i 'patch' 
| grep -A3 -i 'admin/users' 
Showing logging for adding user to admin via web interface 
An attacker can also promote a user to admin via the Users REST API44 as shown with 
the below example curl command.  
44 https://docs.gitlab.com/ee/api/users.html#user-modification 
X-Force Red | 3/2/2022 
63 
curl -k --request PUT --header "PRIVATE-TOKEN: apiToken" -H $'Content-
Type: application/json' --data-binary '{"admin":"true"}' 
"https://gitlabHost/api/v4/users/UserIDNumberToPromote" 
Adding user to admin via API 
This activity is logged in the API log (/var/log/gitlab/gitlab-rails/api_json.log) 
as shown below. 
cat /var/log/gitlab/gitlab-rails/api_json.log | grep -i PUT | grep -i 
'"key":"admin","value":"true"' 
Snippet of API log showing user added to admin role 
Maintain Persistent Access 
An attacker has three primary options in terms of maintaining persistent access to 
GitLab Enterprise. This can be performed either by creating a personal access token, 
impersonation token, or adding a public SSH key. 
Personal Access Token 
X-Force Red | 3/2/2022 
64 
The first option is creating a personal access token. This can be performed via the web 
interface as a regular user or can be performed via the Users REST API45 as an 
administrator. The below screenshot shows creating a personal access token called 
“persistence-token”. 
Creating personal access token for hpotter user 
You can see the created personal access token and the token value below. 
45 https://docs.gitlab.com/ee/api/users.html#create-a-personal-access-token 
X-Force Red | 3/2/2022 
65 
Showing token value created 
This activity is 
logged 
in the 
production log 
(/var/log/gitlab/gitlab-
rails/production.log) as shown below. 
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i post | 
grep -A3 -i personal_access_tokens 
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i post | 
grep -i personal_access_tokens 
Viewing production log with access token creation activity 
An attacker can also create a personal access token via the Users REST API as shown 
with the below example curl command. This requires admin permissions. 
curl -k --request POST --header "PRIVATE-TOKEN: apiToken" --data 
"name=hgranger-persistence-token" --data "expires_at=" --data 
"scopes[]=api" --data "scopes[]=read_repository" --data 
"scopes[]=write_repository" 
"https://gitlabHost/api/v4/users/UserIDNumber/personal_access_tokens" 
X-Force Red | 3/2/2022 
66 
Creating access token via API 
This activity is logged in the API log (/var/log/gitlab/gitlab-rails/api_json.log) 
as shown below. 
cat /var/log/gitlab/gitlab-rails/api_json.log | grep -i post | grep -i 
personal_access_tokens 
Viewing API log with access token creation 
Impersonation Token 
If an attacker has admin privileges in GitLab Enterprise, they can create an 
impersonation token for any user they would like. This is a much stealthier option in 
terms of maintaining access to GitLab Enterprise. This process and details were 
previously covered in the “User Impersonation” section. 
SSH Key 
Another option that an attacker has for maintaining persistent access to GitLab 
Enterprise is via an SSH key as shown in the screenshot below. 
X-Force Red | 3/2/2022 
67 
Adding SSH key via web interface 
This activity is 
logged 
in the 
production log 
(/var/log/gitlab/gitlab-
rails/production.log) as shown below. 
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i post | 
grep -A3 -i 'profile/keys' 
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i post | 
grep -i 'profile/keys' 
Viewing log with evidence of adding SSH key for hgranger 
X-Force Red | 3/2/2022 
68 
Another method to add an SSH key is via the Users REST API46 as shown with the below 
example curl command. When performing this request via a personal access token, it 
requires the “api” permission in the scope of the personal access token. Additionally, 
this SSH key cannot exist for any other user. Users cannot share the same public SSH 
key. 
curl -k --request POST -H $'Content-Type: application/json' --header 
"PRIVATE-TOKEN: apiToken" --data-binary '{"title":"persistence-
key","key":"pubSSHKey"}' "https://gitlabHost/api/v4/user/keys" 
Adding SSH key via API request 
The private SSH key associated with the public SSH key added can now be used to clone 
repositories within GitLab Enterprise. 
Cloning repository via added SSH key 
This activity is logged in the API log (/var/log/gitlab/gitlab-rails/api_json.log) 
as shown below. 
cat /var/log/gitlab/gitlab-rails/api_json.log | grep -i post | grep -i 
'user/keys' 
46 https://docs.gitlab.com/ee/api/users.html#add-ssh-key 
X-Force Red | 3/2/2022 
69 
Viewing SSH key addition via API log 
Modifying CI/CD Pipeline 
As shown in the “” section, GitLab Runners can be abused to facilitate lateral movement 
throughout an environment. A GitLab Runner will run the instructions defined in the CI 
configuration file for a project. The example of modifying the GitLab CI configuration 
file is shown below. This can also be done outside of the web interface via the Git 
command-line tool. When modifying the CI configuration file, you will need either the 
Developer, Maintainer or Owner role for a project. 
Modifying GitLab CI configuration file 
X-Force Red | 3/2/2022 
70 
When modifying the GitLab CI configuration file through the web interface, it is logged 
in the Production log (/var/log/gitlab/gitlab-rails/production_json.log) as 
shown below. 
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i post | 
grep -i '/api/graphql' | grep -i '.gitlab-ci.yml' | grep -i update 
Filtering production log for CI file update 
Any commits that update the CI configuration file in a project should be heavily 
scrutinized and require approval before pushed. 
SSH Access 
If an attacker obtains SSH access to a GitLab Enterprise server, there are a few items 
of interest. The first item is the GitLab configuration file (/etc/gitlab/gitlab.rb), as 
it can contain multiple different types of credentials. For example, if GitLab Enterprise 
is integrated with Active Directory, it may have LDAP credentials in the configuration 
file, as shown below. 
X-Force Red | 3/2/2022 
71 
 Reading GitLab configuration file searching for AD creds 
Another type of credential that may be contained in the configuration file is AWS keys. 
This is just one example of a type of credential that could be contained in this 
configuration file. 
X-Force Red | 3/2/2022 
72 
Reading GitLab configuration file searching for AWS keys 
The GitLab secrets json file (/etc/gitlab/gitlab-secrets.json) also may contain 
credentials of interest to an attacker. 
Reading GitLab secrets file 
By default, GitLab Enterprise uses a Postgresql database to store information. This can 
be connected to locally as shown below. 
X-Force Red | 3/2/2022 
73 
Accessing Postgresql database 
One type of information that can be obtained from this database is user information, as 
shown below. 
Listing user information in Postgresql database 
X-Force Red | 3/2/2022 
74 
Bitbucket 
Bitbucket is the last SCM system that will be detailed in this whitepaper. In this section, 
there will be an overview of common terminology, the access model and API 
capabilities of Bitbucket. Additionally, attack scenarios against Bitbucket will be 
shown, along with how these attacks can be detected in system logs. In this case, 
Bitbucket Server47 will be specifically detailed. 
BACKGROUND 
Terminology 
A list of key terms related to Bitbucket can be found here48. One thing to note about 
Bitbucket is that a project is meant to be a container for one-to-many repositories. 
Access Model 
Access Levels 
There are four levels of permissions in Bitbucket, which include global, project, 
repository, and branch permissions. A table listing an explanation of the permissions is 
shown below from the Bitbucket documentation49. One thing to note is that all 
permissions can either be set at the user or group level. Before a user can login to 
Bitbucket, they must at least have been added permissions in the global access 