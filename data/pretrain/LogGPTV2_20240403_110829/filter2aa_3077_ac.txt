### GitLab REST API and Security Considerations

The GitLab REST API enables users to perform a variety of actions, including interacting with projects, managing access tokens, and handling SSH keys. It also supports administrative functions. Comprehensive documentation on the REST API is available [here](https://docs.gitlab.com/ee/api/index.html).

### Attack Scenarios

The following scenarios are notable for potential attacks against GitLab Enterprise and have been observed in X-Force Redâ€™s Adversary Simulation engagements. This list is not exhaustive but highlights key attack paths.

| **Attack Scenario** | **Sub-Scenario** | **Admin Required?** |
|---------------------|------------------|---------------------|
| Reconnaissance       | - Repository     | No                  |
|                     | - File           | No                  |
|                     | - Code           | No                  |
| User Impersonation   | - Impersonate User Login | Yes             |
|                     | - Impersonation Token  | Yes             |
| Promote User to Admin Role | N/A              | Yes                  |
| Maintain Persistent Access | - Personal Access Token | No            |
|                     | - Impersonation Token | Yes             |
|                     | - SSH Key        | No                  |
| Modify CI/CD Pipeline | N/A              | No                  |
| SSH Access           | N/A              | Yes                 |

### Reconnaissance

#### Repository Reconnaissance
An attacker may search for repositories related to specific applications or systems. For example, searching for repositories containing the term "charm" can be done via the web interface or the Advanced Search REST API.

**Web Interface:**
- Perform a project search using the web interface.

**REST API:**
```bash
curl -k --header "PRIVATE-TOKEN: apiKey" "https://gitlabHost/api/v4/search?scope=projects&search=searchTerm"
```

#### File Reconnaissance
An attacker might look for files with specific names, such as those containing "decrypt." In GitLab Enterprise, this can be done via the web interface (if Elasticsearch is configured) or the Repository Tree REST API.

**Web Interface:**
- Use the Advanced Search feature.

**REST API:**
```bash
curl -k --header "PRIVATE-TOKEN: apiToken" "https://gitlabHost/api/v4/projects/projectID/repository/tree" | python -m json.tool | grep -i searchTerm
```

#### Code Reconnaissance
Searching for secrets within code, such as passwords or API keys, is another common reconnaissance activity. This can be done via the web interface or the Project Search REST API.

**Web Interface:**
- Use the Advanced Search feature.

**REST API:**
```bash
curl -k --request GET --header "PRIVATE-TOKEN: apiKey" "https://gitlabHost/api/v4/projects/projectID/search?scope=blobs&search=searchTerm" | python -m json.tool
```

### Logging of Reconnaissance

Reconnaissance activities are logged in various log files. The Production log (`/var/log/gitlab/gitlab-rails/production.log`) and the API log (`/var/log/gitlab/gitlab-rails/api_json.log`) record these activities, but the actual search terms are often filtered. The web log (`/var/log/gitlab/nginx/gitlab_access.log`) can provide more detailed information.

**Production Log:**
```bash
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i GET | grep -i '/search?search'
```

**API Log:**
```bash
cat /var/log/gitlab/gitlab-rails/api_json.log | grep -i get | grep -i '/search"\|repository/tree'
```

**Web Log:**
```bash
cat /var/log/gitlab/nginx/gitlab_access.log | grep -i '/search' | cut -d " " -f1,4,7 | grep -i api
```

### User Impersonation

If an attacker has administrative access, they can impersonate another user in two ways: through the web interface or by creating an impersonation token.

#### Impersonate User Login
- Navigate to the admin area, view the user, and click the "Impersonate" button.

**Logging:**
```bash
cat /var/log/gitlab/gitlab-rails/application*.log | grep -i 'has started impersonating'
```

#### Impersonation Token
- Create an impersonation token via the web interface or the Users REST API.

**Web Interface:**
- Navigate to the "Impersonation Tokens" section and add the token details.

**REST API:**
```bash
curl -k --request POST --header "PRIVATE-TOKEN: apiToken" --data "name=someName-impersonate" --data "expires_at=" --data "scopes[]=api" --data "scopes[]=read_user" --data "scopes[]=read_repository" --data "scopes[]=write_repository" --data "scopes[]=sudo" "https://gitlabHost/api/v4/users/userIDNumberToImpersonate/impersonation_tokens"
```

**Logging:**
```bash
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i impersonate
```

### Promoting User to Admin Role

An attacker with admin credentials can promote a regular user to an admin role via the web interface or the Users REST API.

**Web Interface:**
- Check the "Admin" radio button in the user's profile.

**REST API:**
```bash
curl -k --request PUT --header "PRIVATE-TOKEN: apiToken" -H $'Content-Type: application/json' --data-binary '{"admin":"true"}' "https://gitlabHost/api/v4/users/UserIDNumberToPromote"
```

**Logging:**
```bash
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i patch | grep -i 'admin/users'
```

### Maintaining Persistent Access

An attacker can maintain persistent access by creating a personal access token, an impersonation token, or adding a public SSH key.

#### Personal Access Token
- Create a personal access token via the web interface or the Users REST API.

**Web Interface:**
- Navigate to the "Personal Access Tokens" section and create a token.

**REST API:**
```bash
curl -k --request POST --header "PRIVATE-TOKEN: apiToken" --data "name=hgranger-persistence-token" --data "expires_at=" --data "scopes[]=api" --data "scopes[]=read_repository" --data "scopes[]=write_repository" "https://gitlabHost/api/v4/users/UserIDNumber/personal_access_tokens"
```

**Logging:**
```bash
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i post | grep -A3 -i personal_access_tokens
```

#### Impersonation Token
- Follow the same steps as described in the "User Impersonation" section.

#### SSH Key
- Add an SSH key via the web interface or the Users REST API.

**Web Interface:**
- Navigate to the "SSH Keys" section and add a key.

**REST API:**
```bash
curl -k --request POST -H $'Content-Type: application/json' --header "PRIVATE-TOKEN: apiToken" --data-binary '{"title":"persistence-key","key":"pubSSHKey"}' "https://gitlabHost/api/v4/user/keys"
```

**Logging:**
```bash
cat /var/log/gitlab/gitlab-rails/production.log | grep -A3 -i post | grep -A3 -i 'profile/keys'
```

### Modifying CI/CD Pipeline

An attacker can modify the CI/CD pipeline configuration file to facilitate lateral movement. This requires Developer, Maintainer, or Owner role permissions.

**Web Interface:**
- Edit the `.gitlab-ci.yml` file.

**Logging:**
```bash
cat /var/log/gitlab/gitlab-rails/production_json.log | grep -i post | grep -i '/api/graphql' | grep -i '.gitlab-ci.yml' | grep -i update
```

### SSH Access

If an attacker gains SSH access to the GitLab server, they can access sensitive files and databases.

- **GitLab Configuration File:**
  - `/etc/gitlab/gitlab.rb` may contain LDAP and AWS credentials.
  
- **GitLab Secrets File:**
  - `/etc/gitlab/gitlab-secrets.json` may contain other credentials.

- **Postgresql Database:**
  - Connect to the database locally to access user information.
  
**Example:**
```bash
psql -U gitlab -d gitlabhq_production
```

### Bitbucket Overview

Bitbucket is another SCM system that will be discussed in this whitepaper. This section will cover common terminology, the access model, API capabilities, and attack scenarios against Bitbucket Server, along with detection methods in system logs.

#### Terminology
- A project in Bitbucket is a container for one or more repositories.

#### Access Model
- There are four levels of permissions: global, project, repository, and branch.
- Permissions can be set at the user or group level.

For more detailed information, refer to the [Bitbucket documentation](https://confluence.atlassian.com/bitbucketserver).