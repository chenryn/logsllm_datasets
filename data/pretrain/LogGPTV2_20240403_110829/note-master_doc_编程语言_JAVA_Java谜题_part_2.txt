    protected String makeName(){ return "i am your father"; }
    @Override
    public String toString() { return name; }
}
class Son extends Father{
    String pname;
    public Son(String name) {
        this.pname = name;
    }
    @Override
    protected String makeName() {
        return "i am " + pname;
    }
}
```
创建一个Son对象 最终会打印出 i am null ,关键在于子类还没初始化完全 name就已经完成初始化
- null
```java
class Null{
    public static void print(){ System.out.println("hello world"); }
}
((Null)null).print(); // 可以打印
```
静态方法的调用只与类型相关 这或许是Java的设计缺陷 静态方法压根就不能通过对象实例调用
- 创建对象
```java
for (int i = 0; i  personSet = new HashSet<>();
personSet.add(new Person("cxk"));
System.out.println(personSet.contains(new Person("cxk"))); // false
```
任何时候 只要重写了equals方法 就必须重写hashCode方法 equals相等的对象hashCode必须相等 但hashCode相等不代表equals相等
- 六亲不认
```java
class Person {
    public final String name;
    public Person(String name) { this.name = name; }
    public int hashCode(){ return name.hashCode();}
    public boolean equals(Person p){
        return  p.name.equals(this.name);
    }
}
```
这个类声明虽然声明了hashCode 但是还是和上面一例一样 返回false
原因在与我们重载了equals方法 而非重写
**重载为错误和混乱提供了机会**
为避免犯这种错误 加上@Override
- 混乱的代价
```java
766 - 066 == 712 // true
```
以0开头的整型字面常量会被解释为八进制 不要这么做！！！
- 一行代码解决
```java
// 去除list中的重复元素并保持顺序
return new ArrayList<>(new LinkedHashSet<>(originList));
// 以,后面跟随者0-n个空格分割文本
str.split(",\\S*");
// 以字符串形式展示数组
Arrays.toString(...);
// 判断一个整数的二进制表示有多少1
Integer.bitCount(xxx);
```
了解类库可以节省大量时间与精力
- 可怕的日期API
```java
Calendar cal = Calendar.getInstance();
cal.set(2019,12,31);
System.out.println(cal.get(Calendar.YEAR));//2020
```
Calendar 或 Date 使用时一定要注意文档
- 名字游戏
```java
Map map1 = new IdentityHashMap<>();
map1.put(new String("111"),"kk");
map1.put(new String("111"),"dd");
System.out.println(map1.size()); // 2
Map map2 = new IdentityHashMap<>();
map2.put("111","kk");
map2.put("111","dd");
System.out.println(map2.size()); // 1
```
IdentityHashMap 是基于引用判断两个key是否相等的
Java 语言规范规定了字符串常量会进行复用 会有相同的引用
- 不生效的绝对值
```java
Math.abs(Integer.MIN_VALUE) Note that if the argument is equal to the value of
     * {@link Integer#MIN_VALUE}, the most negative representable
     * {@code int} value, the result is that same value, which is
     * negative.
- 奇葩的排序
```java
Integer[] a = new Integer[100];
Random rnd = new Random();
 for (int i = 0; i (){
     @Override
     public int compare(Integer o1, Integer o2) {
         return o1-o2;
     }
 });
 System.out.println(Arrays.toString(a));
```
打印出来的数组基本是无序的(有序的可能性非常小) 原因在于使用的这个比较器 这个比较器通过减法来实现
在数值比较小的情况下没有 但一旦数组元素极大或极小则会发生溢出 导致结果不正确
## 类(升级版)
- 私人领域
```java
class Base { public String name = "cxk";}
class D extends Base {private String name = "jntm";}
System.out.println(new D().name); // 无法编译
```
对于成员变量 通过这种子类权限比父类更小的方式来隐藏
但对于成员方法 这种写法是非法的
违反了LSP
**隐藏会带来混乱** 
- 李鬼替代了李逵
```java
public class Main {
    public static void main(String[] args) { }
}
class String{}
```
这个程序将无法启动 报错：在类 Main 中找不到 main 方法
原因就是因为这个自定义的 String 
**避免重用平台类的名字 并且不要复用java.lang中的类名**
- 阴影中的类
```java
class X{
    static class Y { String Z = "Z1";}
    static C Y = new C();
}
class C {String Z = "Z2";}
System.out.println(X.Y.Z); // print Z2
```
**当一个变量和一个类型具有相同名字 变量名的优先级更高**
- 无法覆写的方法
```java
package p1;
public class Click {
    public void click(){print();}
    void print(){ System.out.println("print"); }
}
package p2;
public class Main {
    public static void main(String[] args) {
        new Click(){
            void click() { System.out.println("click"); } // 无法覆写
        }.click();
    }
}
```
**一个包内私有的方法不能被位于另一个包的某个方法直接覆写**
- 方法遮蔽
```java
import static java.util.Arrays.toString;
public class Main {
    static void print(){System.out.println(toString(new int[]{1,2,3}));} // 编译错误 找不到这样的toString方法
}
```
编译失败的原因在于本身就属于某个范围的成员的优先级比静态导入的优先级更高
**静态导致使用应该十分克制**
### 名字重用
- 覆写
```java
class Base {public void f(){}}
class D {public void f(){}} // 覆写Base.f
```
- 隐藏
```java
class Base {public static void f(){}}
class D {public static void f(){}} // 隐藏Base.f
```
- 重写
```java
class Base {
    public void f(){}
    public void f(int i){} // 重载f
}
```
- 遮蔽
```java
class Base {
    static String name = "cxk";
    static void f(){
        String name = "jntm"; // 变量遮蔽
    }
}
// 经常使用的遮蔽:
class Main {
    private String name;
    public Main(String name){
        this.name = name;
    }
}
```
- 遮掩
```java
class Main {
    static String System; // 遮掩 java.lang.System
}
```
## 库(升级版)
- 乒乓
```java
public static synchronized void main(String[] args) {
    new Thread(()->{
        pong();
    }).start();
    System.out.println("ping");
}
static synchronized void pong(){
    System.out.println("pong");
}
```
这段程序ping pong总会按照顺序打印出来 重点就在于main与pong都是同步方法 不会并发执行
- 反射的污染
```java
Iterator iterator = new HashSet<>().iterator();
Method method = iteraor.getClass().getMethod("hasNext");
System.out.println(method.invoke(iterator)); // IllegalAccessException
```
原因在于这个迭代器的实际实现类是某个内部类 Java语言规范规定**访问位于其他包中的非公共类型的成员是不合法的**
这个问题在使用了反射之后 就更加难以发现
- 吃饭睡觉打豆豆
```java
class Cat {
    void eat(){
        System.out.println("eat");
    }
    void sleep(){
        System.out.println("sleep");
    }
    void live(){
        new Thread(){
            @Override
            public void run() {
                while (true){
                    eat();
                    sleep(); // 编译错误
                }
            }
        }.start();
    }
}
```
这个类无法通过编译 原因在于Cat的sleep被Thread.sleep 遮蔽了
**事实证明 使用Runnable创建线程比继承Thread要更方便**
- 丢失的构造器
```java
class Outer {
    public class Inner{}
}
Outer.Inner.class.newInstance(); // NoSuchMethodException: Outer$Inner.()
```
如果一个类为非静态内部类 那么它的默认构造函数就会变成变成一个携带着隐藏参数的构造器 这个参数就是外围的对象实例
**同时 newInstance这个方法现在也已经被废弃了 不推荐使用**
应该优先使用静态成员类
- hello 不 world
```java
String str = "hello world";
for (int i = 0; i {
    java.util.List iterator(){
        return new ArrayList();
    }
}
List list = new List();
for(String s: list.iterator()){ // 编译错误：不兼容的类型
    System.out.println(s);
}
```
原生类型：支持泛型但是没有使用泛型
原因在于原生类型的泛型丢失了 这个时候iterator返回的是`ArrayList()`
**避免编写原生类型**
- 泛型遮蔽
内部类中也可以访问到外部类中的泛型参数 避免这个问题
- 序列化杀手
HashSet 或者 HashMap 在反序列化的时候会调用对象自身的方法
所以使用这些集合的时候 注意不要让这些集合的元素内部又指向这些集合 否则就会发生一些非预期结果
- 剪不断理还乱
```java
public class Main {
    private String name = "";
    public Main(String name) { this.name = name; }
    private String name(){return name;}
    private void run(){
        new Main("cxk"){
            void print(){
                System.out.println(name());
            }
        }.print();
    }
    public static void main(String[] args) {
        new Main("main").run();
    }
}
```
这个程序乍一看会由于调用了Main不存在的print方法无法通过编译 但其实发现他可以访问print方法
重点在于最终打印的出来是main 而非cxk 原因在于私有成员变量是无法被继承的 所以这里调用name方法打印的是main方法里Main传递的main
- 类常量的编译处理
```java
public class Client {
    public static void main(String[] args) {
        System.out.println(Server.one);
        System.out.println(Server.two);
        System.out.println(Server.three);
    }
}
public class Server {
    public static final String one = "1";
    public static final String two = "2";
    public static final String three = "3";
}
```
这里如果Server被重新编译 会打印出什么？
答案还是和原来一样 Java 语言规范规定常量在编译时都会直接被转化为常量值 而不会被间接引用 这个时候就算把Server.class 删掉 Client也能正常运行
- 假随机
打乱数组时用Random是不正确的  使用Collection.shuffle
## 餐后甜点
```java
int count = 0;
for(int =0;i({
    public int compare(Integer i1，Integer i2）{
    return i1i1 ?1:O);
});
System.out.println(Arrays.tostring(array));
```
```java
true?false:true == true?false:true
```