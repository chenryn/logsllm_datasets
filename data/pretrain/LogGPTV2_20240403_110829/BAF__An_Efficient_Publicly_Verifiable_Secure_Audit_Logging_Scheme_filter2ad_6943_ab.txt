including high signer computational efﬁciency, storage efﬁ-
ciency, bandwidth efﬁciency, public veriﬁability, immediate
veriﬁcation, and high veriﬁer computational efﬁciency. To
demonstrate how BAF achieves these properties, we ﬁrst
221
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
discuss the envisioned design principles, on the basis of
which BAF strategy is constructed. We then present the BAF
strategy that achieves the stated goals by following these
design principles.
Design Principles: BAF is based on the following design
principles:
• Avoid PKC operations for logging: All existing PKC-
based forward secure and aggregate schemes are directly
derived from the existing aggregate or forward secure
signature schemes. For instance, FssAgg-BLS [8] is based
on the aggregate signature scheme given in [19]. Sim-
ilarly, FssAgg-BM and FssAgg-AR in [1], [3], [9] are
based on the forward secure signatures given in [22] and
[23], respectively. Hence, existing forward secure and
aggregate schemes naturally inherit high computational
costs of these signature primitives. To achieve efﬁciency,
BAF restricts operations used in signature generation
to basic arithmetic operations and cryptographic hash
functions. This implies that BAF does not use any PKC
operation for logging.
• Avoid time factor and online TTP Support: BAF aims
to achieve public veriﬁability without using any PKC
operation at the signer side. One of the possible solutions
would be to introduce asymmetry between the signer
and the veriﬁers via the time factor (e.g., TESLA [24]).
However, such a scheme cannot achieve immediate ver-
iﬁcation at the veriﬁer side. Moreover, it requires online
TTP support to achieve forward security. (If the signer
herself introduces the required asymmetry, then an active
attacker compromising the signer can eventually forge the
computed signatures). To achieve immediate veriﬁcation
and scalability, BAF uses neither the time factor nor
online TTP support.
BAF Strategy: BAF uses a novel strategy called “Blind-
Aggregate-Forward”. Such a strategy enables signers to log a
large number of log entries with little computational, storage,
and communication costs in a publicly veriﬁable way. To
achieve this, BAF signature generation has three phases as
described below:
1) Individual Signature Generation: BAF computes the
individual signature of each accumulated data item using
a simple and efﬁcient blinding operation. Blinding is
applied to the hash of data item via ﬁrst a multiplication
and then an addition operation modular a large prime p
by using a pair of secret blinding keys (referred as the
blinding key pair). The result of this blinding operation
is a unique and random looking output (i.e., the individ-
ual signature), which cannot be forged without knowing
its associated secret blinding keys.
2) Key Update: BAF updates the blinding key pair via
two hash operations after each individual signature gen-
eration, and then deletes the previous key pair from
memory.
3) Signature Aggregation: BAF aggregates the individual
signature of each accumulated data item into the existing
aggregate signature with a single addition operation
modular a large prime p, similar to the additive collision-
free incremental hash techniques (e.g., [25], [26]).
In the above construction, the individual signature computa-
tion binds a given blinding key pair to the hash of signed data
item in a speciﬁc algebraic form. The signature aggregation
maintains this form incrementally and also preserves the
indistinguishability of each individual signature. Hence, the
resulting aggregate signature can be veriﬁed by a set of public
key securely. BAF enables this veriﬁcation by embedding each
blinding secret key pair of signer i into a public key pair
via an ECC scalar multiplication. Using the corresponding
public keys, the veriﬁers follow the BAF signature veriﬁ-
cation equation by performing a scalar multiplication for
each received data item. The successful veriﬁcation of the
aggregate signature guarantees that only the claimed signer,
who possessed the correct blinding secret key pairs before their
deletion, could compute such a signature (which is unforgeable
after the keys were deleted).
B. Description of BAF
Following the syntax given in Deﬁnition 1, the proposed
BAF scheme behaves as described below:
1) BAF.Kg(L, IDi): BAF.Kg generates L private/public
key pairs for signer i. The parameter L determines
the maximum number of key update operations that a
signer can execute, which should be decided according
to the application requirements. In BAF, an ofﬂine
TTP executes BAF.Kg before the initialization of the
scheme, and then provides the required keys to system
entities.
a) Pick two random numbers as (a0, b0) R← Fp,
which are initial blinding keys of signer i. Also
pick a random index number as n R← Fp, which
is used to preserve the order (sequentiality) of
individual signatures. Such an order enforcement is
needed, since BAF signature aggregation operation
is commutative.
b) Generate two hash chains from the initial secret
blinding keys (a0, b0) as aj+1 = H1(aj) and
bj+1 = H1(bj) for j = 0, . . . , L−1. Also generate
a public key for each element of these hash chains
as (Aj = ajG and Bj = bjG) for j = 0, . . . , L−1.
c) The TTP provides required keys to signer i and
veriﬁers as follows: IDi ← {a0, b0, n} and
Veriﬁers← {IDi : A0, B0, . . . , AL−1, BL−1, n}.
2) BAF.Upd(al, bl): BAF.U pd is the key update algorithm,
which updates the given blinding keys as al+1 = H1(al)
and bl+1 = H1(bl). BAF.U pd then deletes (al, bl)
from the memory. BAF.U pd is invoked after each
BAF.ASig operation, whose frequency is determined
according to the application requirements based on the
chosen key update model given in Deﬁnition 2 (i.e., per-
data item or per-interval key update models).
3) BAF.ASig(σ0,l−1, Dl, al, bl): Assume that signer i has
accumulated data items (D0, . . . , Dl−1) and computed
the aggregate signature σ0,l−1. Signer i computes the
aggregate signature for new data item Dl via BAF.ASig
as follows:
222
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
BAF.Kg is executed once before the deployment.  Key generation for logger IDi and all receivers is as follows:
Key Generation (BAF.Kg)
1) Initial blinding key pair and index are given to IDi :
2) Public keys and index are given to all receivers:
(
nba
0
0
,
⎯ ⎯←),
R F
p
=
A
0
1
0
H
⎯⎯ →⎯
=
a
AGa
1
0
   ,
a
1
Ga
1
  ,
H
⎯⎯ →⎯
1
LL
1
H
⎯⎯ →⎯
− =
1
A
L
 , 
a
L
a
L
−
1
−
;
;   
G
1
KKKKK
1
H
b
0
=
B
BGb
0
1
⎯⎯ →⎯
b
1
=
Gb
1
   ,
0
H
⎯⎯ →⎯
  ,
1
LL
1
H
⎯⎯ →⎯
b
−
1
L
=
 , 
B
Gb
−
1
L
−
1
L
KKKKK
Secure Logging  (BAF.ASig)
Secure Log Verification (BAF.Aver)
Logger IDi computes aggregate signature of each
generated log entry as follows:
Log
Entries
=σ
||
nDHa
0
0
0
H⎯⎯ →⎯
and
 ,
b
b
0
1
2
(
1
+
)
b
0
mod
p
IDi transmits the signature-log entry set to  the receivers :
(
DD
1
0
,
,
L
,
D
L
− σ
,0
1
,
−
1
,
ID
i
)
L
1) Individual Signature:
⎯ →⎯
2) BAF.Upd:
a
1
).b,
0
3) Signature Aggregation:
a
0
delete
(a  
H
0
1
1) Individual Signature:
⎯ →⎯
2) BAF.Upd:
a
2
).b,
1
3) Signature Aggregation:
a
1
delete
(a  
H
1
1
0,0 σσ =
0
,
,
(
11 σba
0,0
=σ
D
0
D
1
M
M
D
L-1
)
Receivers can publicly verify the received
aggregate signature as follows:
1
and
DHa
1
1
b
1
(
1(||
2
H
⎯ →⎯
b
2
1
+
+
))
b
1
mod
p
n
 ,
1) Fetch public keys and  index of IDi:
ID
i
−L
BA
A
L
(:
B
n
−
L