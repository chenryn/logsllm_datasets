       deps += [ '//services/db/public/mojom' ]
    ...
    运行ninja -C out/r services/db/public/mojom会生成
    ->
    out/gen/services/db/public/mojom/db.mojom.cc
    out/gen/services/db/public/mojom/db.mojom.h
你能在源码里包含上面生成的头文件，以使用其定义
    #include "services/business/public/mojom/factory.mojom.h"
    class TableImpl : public db::mojom::Table {
      // ...
    };
本文档涵盖了Mojom IDL为C++使用者生成的各种定义，以及如何有效地使用它们,在消息管道之间进行通信。
#### Interfaces
##### Basic Usage
让我们看一下`//sample/logger.mojom`里定义的简单的接口，以及client如何使用他们去log simple string
message。
    module sample.mojom;
    interface Logger {
      Log(string message);
    };
通过binding generator将生成下面的定义
    namespace sample {
    namespace mojom {
    class Logger {
      virtual ~Logger() {}
      virtual void Log(const std::string& message) = 0;
    };
    }  // namespace mojom
    }  // namespace sample
##### Remote and PendingReceiver
##### Creating Interface Pipes
一种方法是手动创建pipe，并用强类型对象包装两端：
    #include "sample/logger.mojom.h"
    mojo::MessagePipe pipe;
    mojo::Remote logger(
        mojo::PendingRemote(std::move(pipe.handle0), 0));
    mojo::PendingReceiver receiver(std::move(pipe.handle1));
这很冗长，所以c++
binding库提供了更简便的方法来完成这件事。[remote.h](https://cs.chromium.org/chromium/src/mojo/public/cpp/bindings/remote.h)定义了BindNewPipeAndPassReceiver
    mojo::Remote logger;
    auto receiver = logger.BindNewPipeAndPassReceiver());
这个代码和之前的等价。
绑定`PendingRemote`后，我们可以立即开始在其上调用Logger接口方法，该方法将立即将消息写入管道。这些消息将在管道的receiver排队，直到有人绑定到receiver并开始读取它们为止。
    logger->Log("Hello!");
但是`PendingReceiver`本质上只是一个类型化的容器，用于容纳`Remote`管道的另一端（即接收端），直到将其绑定到接口的具体实现上。
`PendingReceiver`实际上除了保留管道端点并携带有用的编译时类型信息外，没有做任何其他事情。  
因此该消息将永远存在于管道中。我们需要一种从管道的另一端读取消息并进行分发的方法。我们必须 **bind这个pending receiver**
##### Binding a Pending Receiver
这有许多不同的helper类，用于binding message
pipe的receiver端，其中最原始的是`mojo::Receiver`，`mojo::Receiver`将T的impl和单个的message
pipe端点`mojo::PendingReceiver`绑定到一起，并监视是否有新消息发送过来。  
每当bound pipe有新消息可读，Receiver都会安排一个task去读，反序列化消息并将其分发到其绑定的impl去。  
下面是Logger接口的示例实现，注意，一般implement会own `mojo::Receiver`字段，这是一种常见的模式。因为
**绑定的implement必须比绑定它的任何mojo::Receiver存活的更久**
    #include "base/logging.h"
    #include "base/macros.h"
    #include "sample/logger.mojom.h"
    class LoggerImpl : public sample::mojom::Logger {
     public:
      // NOTE: A common pattern for interface implementations which have one
      // instance per client is to take a PendingReceiver in the constructor.
      explicit LoggerImpl(mojo::PendingReceiver receiver)
          : receiver_(this, std::move(receiver)) {}
      ~Logger() override {}
      // sample::mojom::Logger:
      void Log(const std::string& message) override {
        LOG(ERROR)  receiver_;
      DISALLOW_COPY_AND_ASSIGN(LoggerImpl);
    };
现在我们可以使用`PendingReceiver`来构造出一个LoggerImpl,`LoggerImpl
impl(std::move(receiver));`  
##### Receiving Responses
一些mojom接口需要response，我们修改Logger接口，从而获取最后一个Log行。
    module sample.mojom;
    interface Logger {
      Log(string message);
      GetTail() => (string message);
    };
现在生成的c++ interface是这样的
    namespace sample {
    namespace mojom {
    class Logger {
     public:
      virtual ~Logger() {}
      virtual void Log(const std::string& message) = 0;
      using GetTailCallback = base::OnceCallback;
      virtual void GetTail(GetTailCallback callback) = 0;
    }
    }  // namespace mojom
    }  // namespace sample
和之前一样，此接口的client和implement对GetTail都使用相同的函数签名:implement使用callback参数去对请求进行响应，而client传递callback参数来异步接收响应，现在的implement是这样的:
    class LoggerImpl : public sample::mojom::Logger {
     public:
      // NOTE: A common pattern for interface implementations which have one
      // instance per client is to take a PendingReceiver in the constructor.
      explicit LoggerImpl(mojo::PendingReceiver receiver)
          : receiver_(this, std::move(receiver)) {}
      ~Logger() override {}
      // sample::mojom::Logger:
      void Log(const std::string& message) override {
        LOG(ERROR)  receiver_;
      std::vector lines_;
      DISALLOW_COPY_AND_ASSIGN(LoggerImpl);
    };
现在client可以这样调用GetTail
    void OnGetTail(const std::string& message) {
      LOG(ERROR) GetTail(base::BindOnce(&OnGetTail));
#### Sending Interfaces Over Interfaces
我们知道如何创建接口管道,并以一些有趣的方式使用它们的Remote和PendingReceiver端点。这仍然不构成有趣的IPC!Mojo
IPC的主要功能是能够跨其他接口传输接口端点，因此让我们看一下如何实现这一点。
##### Sending Pending Receivers
考虑如下Mojom
    module db.mojom;
    interface Table {
      void AddRow(int32 key, string data);
    };
    interface Database {
      AddTable(pending_receiver table);
    };
`pending_receiver`对应c++里的`PendingReceiver`类型，并且为这个mojom生成类似如下的代码:
    namespace db {
    namespace mojom {
    class Table {
     public:
      virtual ~Table() {}
      virtual void AddRow(int32_t key, const std::string& data) = 0;
    }
    class Database {
     public:
      virtual ~Database() {}
      virtual void AddTable(mojo::PendingReceiver table);
    };
    }  // namespace mojom
    }  // namespace db
其对应的implemention如下:
    #include "sample/db.mojom.h"
    class TableImpl : public db::mojom:Table {
     public:
      explicit TableImpl(mojo::PendingReceiver receiver)
          : receiver_(this, std::move(receiver)) {}
      ~TableImpl() override {}
      // db::mojom::Table:
      void AddRow(int32_t key, const std::string& data) override {
        rows_.insert({key, data});
      }
     private:
      mojo::Receiver receiver_;
      std::map rows_;
    };
    class DatabaseImpl : public db::mojom::Database {
     public:
      explicit DatabaseImpl(mojo::PendingReceiver receiver)
          : receiver_(this, std::move(receiver)) {}
      ~DatabaseImpl() override {}
      // db::mojom::Database:
      void AddTable(mojo::PendingReceiver table) {
        tables_.emplace_back(std::make_unique(std::move(table)));
      }
     private:
      mojo::Receiver receiver_;
      std::vector> tables_;
    };
`pending_receiver`参数对应的是一个强类型的message pipe
handle，当DatabaseImpl接收到一个AddTable消息时，它构造一个新的`TableImpl`实例，并且将其绑定到接收到的`mojo::PendingReceiver`  
让我们看一下具体的用法
    mojo::Remote database;
    DatabaseImpl db_impl(database.BindNewPipeAndPassReceiver());
    mojo::Remote table1, table2;
    database->AddTable(table1.BindNewPipeAndPassReceiver());
    database->AddTable(table2.BindNewPipeAndPassReceiver());
    table1->AddRow(1, "hiiiiiiii");
    table2->AddRow(2, "heyyyyyy");
请注意，即使它们的`mojo::PendingReceiver`端点仍在传输中，我们也可以立即立即开始使用新的Table管道。
##### Sending Remote
当然我们也可以发送Remotes
    interface TableListener {
      OnRowAdded(int32 key, string data);
    };
    interface Table {
      AddRow(int32 key, string data);
      AddListener(pending_remote listener);
    };
生成这样的代码
    virtual void AddListener(mojo::PendingRemote listener) = 0;
使用起来是这样的
    mojo::PendingRemote listener;
    TableListenerImpl impl(listener.InitWithNewPipeAndPassReceiver());
    table->AddListener(std::move(listener));
#### Other Interface Binding Types
##### Self-owned Receivers
self-owned的receiver作为一个独立的object存在，它拥有一个std::unique_ptr指向其绑定的interface
implemention，并且在MessagePipe被关闭或者发生一些错误时，负责任的去delete
implemention，所以其将一个interface implemention和MessagePipe绑定到了一起。  
MakeSelfOwnedReceiver函数被用于创建这样的receiver
    class LoggerImpl : public sample::mojom::Logger {
     public:
      LoggerImpl() {}
      ~LoggerImpl() override {}
      // sample::mojom::Logger:
      void Log(const std::string& message) override {
        LOG(ERROR)  logger;
    mojo::MakeSelfOwnedReceiver(std::make_unique(),
                            logger.BindNewPipeAndPassReceiver());
    logger->Log("NOM NOM NOM MESSAGES");
只要logger在系统中的某个位置保持open状态，在另一端绑定的LoggerImpl将存活。
##### Receiver Sets
在多个client共享同一个implement实例的时候使用。
    module system.mojom;
    interface Logger {
      Log(string message);