P (LCU) 
LINK_ 
GOING_DO
WN (LGD) 
LINK_ 
DOWN (LD) 
RSSI>= 
LU_TH 
LU 
LU 
LU_TH  
>RSSI>= 
LCU_TH 
LU 
LCU_TH 
>RSSI>= 
LGD_TH 
LU 
LGD_TH 
>RSSI>= 
LD_TH 
LGD 
LCU 
LCU 
LGD 
LD_TH
> RSSI 
LD 
LD 
LU 
LCU 
LGD 
LGD 
LD 
LU 
LCU 
LD 
LD 
LD 
Table 2. Link status transition 
2.2  Comparison of smoothing methods 
As  mentioned  above,  it  is  necessary  to  apply  a 
smoothing  method  on  raw  RSSI.  However,  different 
smoothing  methods  have  different  performance  in 
responding  to  long  term  trend  of  RSSI  and  short  term 
sharp  changes.  We  next  evaluate  several  smoothing 
methods  to  choose  one  that  can  both  respond  fast  to 
short term changes and catch long term trend properly. 
The evaluation is based on the total number of triggers 
generated, unnecessary triggers, and triggering delays: 
  A  LGD/LD  (or  LCU/CU)  trigger  generated  after 
obtaining  the  ith  raw  RSSI  is  a  unnecessary 
trigger  if  60%  of  next  k  raw  RSSI  values  are  no 
lower  (or  no  higher)  than  LGD_TH/LD_TH  (or 
LCU_TH/LU_ TH). 
triggering  delay 
  After obtaining the ith raw RSSI value, a LGD/LD 
(or LCU/CU) trigger is said to be delayed for one 
step, or triggering delay is increased by one step, 
if  60%  of  next  k  raw  RSSI  values  are  below  (or 
above) LGD_TH/LD_TH (or LCU_TH/LU_ TH).  
In  this  paper,  we  set  k=30,  k  as  defined  above. 
Intuitively,  unnecessary  trigger  indicates  false  alarms 
and 
level  of 
responsiveness. The larger the triggering delay, the less 
responsive  a  method  is  to  the  changing  trend  of  raw 
RSSI.  The  smoothing  methods  we  considered  are  as 
follows, where x(i) is the ith smoothed RSSI, r(i) is the 
ith  raw  RSSI,  and  N=50.  In  practice,  RSSI  values  are 
reported as integers. Hence, all  smoothed  RSSI  values 
were also converted to integer values in our study.1 
•  Average: x(i) is the average of r(i-N+1) to r(i).  
•  Exponential average: x(i) = αx(i-1) + (1-α)r(i). We 
indicates 
the 
set α=0.9 in this paper [1]. 
•  Olympic average: remove the highest n and lowest 
n  values  from  r(i-N+1)  to  r(i),  and  take  the 
average of the remaining N-2n values, n=3. 
1  For  exponential  average,  we  keep  x(i)  in  real  number  for 
calculation  accuracy,  and  return  the  integer  part  as  the  current 
exponential-average value. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:48 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE432DSN 2008: Liu et al.•  Median: the median value of r(i-N+1) to r(i).  
•  Mode:  the  most  frequent  value.  To  obtain  the 
mode  value,  we  divide  the  RSSI  value  space  into 
buckets of width 3. For example, bucket[0] ={-40, 
-41, -42}. Mode is defined to be the middle value 
of the bucket that contains the most of r(j)’s.2 
To  evaluate  the  performance  of  these  smoothing 
methods  in  trigger  generation,  we  collected  multiple 
traces of raw RSSI inside Intel’s office buildings.  We 
used a laptop with Intel 3945 wireless card. Altogether, 
more  than  42K  raw  RSSI  values  were  collected, 
including  the  traces  in  Figure  2  and  the  top  two  in 
Figure  8.  For  the  first  three  traces  in  Figure  2,  the 
laptop  was  associated  with  one  AP  and  was 
continuously moving. For the last trace in Figure 2 and 
the  top  two  in  Figure  8,  the  laptop  roamed  into 
different  APs  (each  sharp  increase  of  raw  RSSI 
corresponds  to  roaming  to  a  new  AP).  The  roaming 
aggressiveness  parameter  was  set  to  the  lowest  in  all 
the traces so that for each AP the laptop associated, we 
could collect a complete trace of RSSI from the starting 
time of the association to the time when the connection 
was almost lost due to bad signal strength.  
Figure 2. Traces of raw RSSI, part 1. 
Using  each  RSSI  smoothing  method,  triggers  were 
generated  based  on  the  link-status-update  method  in 
Section  2.1,  for  all  traces  mentioned  above.  Then  we 
compare  the  total  number  of  triggers,  unnecessary 
triggers, and trigger delays for  all  smoothing  methods. 
Figure  3  presents  results  for  LGD  triggers.  (We  see 
similar  trends  for  other  triggers.)  First  of  all,  we  find 
that  all  methods  generated  similar  number  of  triggers. 
Second,  mode  method 
to  generate  more 
unnecessary  triggers,  while  the  other  methods  have 
very  limited  number  of  unnecessary  triggers.  Third, 
different  smoothing  methods  differ  a  lot  in  terms  of 
triggering  delays.  As  shown 
in  Figure  3,  both 
exponential  average  and  mode  methods  have  much 
shorter triggering delay than others.  
tends 
2 The reason of not using the most frequent value in x(i-N+1)  to 
x(i) is that the percentage of the frequency is usually and may not be 
a representative of the characteristics of x(i-N+1) to x(i). 
Figure 3. Smoothing methods comparison 
In summary, to react faster to recent trend of signal 
strength  so  as  to  minimize  service  interruption,  we 
choose  exponential  average  as  the  smoothing  method. 
Also,  to  avoid  duplicated  triggers,  we  use  the  Link-
Status-Update method to generate link triggers. 
3. Link trigger prediction 
The  trigger  generation  method  presents  a  way  to 
detect  events  of  link  status  changes.  Next,  we  discuss 
how  we  predict  the  happening  of  such  event,  for 
instance,  how  to  predict  that  LGD  is  going  to  happen. 
Note  that  although  our  discussion  here  focuses  on 
prediction  of  LGD  triggers,  the  same  algorithm  could 
be  applied  to  other  link  layer  triggers  as  well. 
Furthermore,  for  simplicity,  in  this  section,  we  use 
RSSI  to  refer  to  the  exponential-average  of  RSSI; 
otherwise,  we  use  raw  RSSI  explicitly.  The  objectives 
for trigger prediction are: 
•  A  large  “proactive  window”,  which  is  defined  to 
be the period from the time a prediction is made to 
the  time  the  predicted  LGD  trigger  is  generated. 
Figure 4 illustrates the concept.  
•  Accurate prediction 
o No  miss:  when  a  LGD  trigger  is  generated,  a 
prediction is made some time in advance. 
o No false-alarm: when a prediction is made, some 
time  later  a  LGD  does  happen;  and  in  between 
RSSI does not go up high enough such that link 
quality is considered as coming up. 
-46
-46
-52
-52
-58
-58
T1: prediction is 
T1: prediction is 
T1: prediction is 
T1: prediction is 
mademade
mademade
I
I
S
S
S
S
R
R
-64
-64
-70
-70
Raw RSSI
Raw RSSI
exp-average RSSI
exp-average RSSI
predicted exp-average RSSI
predicted exp-average RSSI
T2: Link--GoingGoing--Down 
T2: Link--GoingGoing--Down 
Down 
Down 
T2: Link
T2: Link
trigger is generated 
trigger is generated 
trigger is generated 
trigger is generated 
(exp(exp--avgavg RSSI 
(exp(exp--avgavg RSSI 
RSSI 
RSSI 
0.  
We  call  data  from  x[i-N+1]  to  x[i],  the  data  in  the 
history  window, and parameter j the prediction  step. 
When  predicting  x[i+j],  we  say  we  are  predicting  j 
steps  ahead.  Typically,  RSSI  measurements  are 
collected  every  100ms.  Hence,  predicting  one  step 
ahead corresponds to predicting 100ms into the future. 
The prediction methods we have investigated are: 
•  Straight-line: x’[i+j]=k*j+x[i], where k= (x[i]- x[i-
N+1])/N (the slope of the line formed by the oldest 
and newest RSSI values in the history window). 
•  Step-by-step:  First  predict  x[i+1]  by  applying  the 
straight-line method to x[i-N+1] to x[i]. Then slide 
the  history  window  by  1  to  include  x[i-N+2]  to 
x’[i+1] and predict x[i+2], and so on. 
•  Least 
+
[
ix
square 
ββ +
1
0
estimator 
][*
ix
,   
j
]
=
(LSE)[16]: 
i
∑
β
1
=
k
−=
Ni
−
t
)(
kx
[
]
−
k
x
)
(
+
t
1
N
∑
k
=
1
(
t
k
−
t
)
2
β
0
−=
x
β
t
1
(1) 
(2) 
where  x is the average of x[i-N+1] to x[i], tk is the 
index for x[k], and  t is the average of tk. 