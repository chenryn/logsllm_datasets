return
}
//延时关闭
defer conn.Close()
//2. 准备通过 conn 发送消息给服务
varmes message.Message
mes.Type= message.RegisterMesType
//3. 创建一个 LoginMes 结构体
varregisterMes message.RegisterMes
registerMes.User.UserId = userId
registerMes.User.UserPwd= userPwd
registerMes.User.UserName =userName
//4.将registerMes 序列化
data, err :=json.Marshal(registerMes)
iferr!= nil {
fmt.Println("json.Marshal err=", err)
return
}
//5. 把 data 赋给 mes.Data字段
mes.Data= string(data)
//6. 将 mes 进行序列化化
data, err = json.Marshal(mes)
iferr!= nil {
fmt.Println("json.Marshal err=", err)
return
}
//创建一个 Transfer 实例
tf:=&utils.Transfer{
Conn: conn,
}
//发送data 给服务器端
err =tf.WritePkg(data)
iferr!= nil {
fmt.Println("注册发送信息错误 err=", err)
}
mes, err= tf.ReadPkg() //mes 就是 RegisterResMes
iferr!= nil {
fmt.Println("readPkg(conn) err=", err)
return
}
//将mes 的Data 部分反序列化成 RegisterResMes
varregisterResMes message.RegisterResMes
err =json.Unmarshal([]byte(mes.Data), &registerResMes)
ifregisterResMes.Code ==200{
fmt.Println("注册成功, 你重新登录一把")
os.Exit(0)
} else {
fmt.Println(registerResMes.Error)
os.Exit(0)
}
return
}
[4] 在client/main/main.go 增加了代码
[5] 在 server/model/userDao.go 增加方法
[6] 在server/process/userProcess.go 增加了方法，处理注册
func(this *UserProcess) ServerProcessRegister(mes *message.Message) (err error) {
//1.先从 mes 中取出 mes.Data ，并直接反序列化成RegisterMes
varregisterMes message.RegisterMes
err =json.Unmarshal([]byte(mes.Data), &registerMes)
iferr!= nil {
fmt.Println("json.Unmarshal fail err=", err)
return
}
//1先声明一个 resMes
varresMes message.Message
resMes.Type =message.RegisterResMesType
varregisterResMes message.RegisterResMes
//我们需要到 redis 数据库去完成注册.
//1.使用 model.MyUserDao 到redis 去验证
err =model.MyUserDao.Register(&registerMes.User)
iferr!= nil {
iferr== model.ERROR_USER_EXISTS {
registerResMes.Code =505
registerResMes.Error =model.ERROR_USER_EXISTS.Error()
} else{
registerResMes.Code =506
registerResMes.Error ="注册发生未知错误..."
}
} else{
registerResMes.Code =200
}
data, err :=json.Marshal(registerResMes)
iferr!= nil {
fmt.Println("json.Marshal fail", err)
return
}
//4. 将 data 赋值给 resMes
resMes.Data= string(data)
//5. 对 resMes 进行序列化，准备发送
data, err = json.Marshal(resMes)
iferr!= nil {
fmt.Println("json.Marshal fail", err)
return
}
//6. 发送 data, 我们将其封装到 writePkg 函数
//因为使用分层模式(mvc), 我们先创建一个Transfer 实例，然后读取
tf:=&utils.Transfer{
Conn: this.Conn,
}
err =tf.WritePkg(data)
return
}
[7] server/main/processor.go 调用了
18.5.8 实现功能-完成登录时能返回当前在线用户
 用户登录后，可以得到当前在线用户列表思路分析、示意图、代码实现
思路分析：
代码实现：
[1] 编写了server/process/userMgr.go
[2] server/process/userProcess.go
[3] common/message/message.go
[4] client/process/userProcess.go
 当一个新的用户上线后，其它已经登录的用户也能获取最新在线用户列表,思路分析、示意图、代
码实现
[1] server/process/userProcess.go
[2] sever/proces/userProcess.go [的 Login]
[3] common/mesage/message.go
[4] client/process/userMgr.go
[5] client/process/server.go
[6] client/process/server.go
18.5.9 实现功能-完成登录用可以群聊
 步骤1：步骤1:当一个用户上线后，可以将群聊消息发给服务器，服务器可以接收到
思路分析:
代码实现：
[1] common/message/messag.go
[2] client/model/curUser.go
[3] client/process/smsProcess.go 增加了发送群聊消息
[4] 测试
 步骤2:服务器可以将接收到的消息，群发给所有在线用户(发送者除外)
思路分析：
代码实现：
[1] server/process/smsProcess.go
[2] server/main/processor.go
[3] client/process/smsMgr.go
[4] client/process/server.go
18.5.10 聊天的项目的扩展功能要求
1. 实现私聊.[点对点聊天]
2. 如果一个登录用户离线，就把这个人从在线列表去掉【】
3. 实现离线留言，在群聊时，如果某个用户没有在线，当登录后，可以接受离线的消息
4. 发送一个文件.
第 章 的使用
19 Redis
19.1 Redis 基本介绍
19.1.1 Redis 的安装
19.1.2 Redis 操作的基本原理图
19.2 Redis 的安装和基本使用
19.2.1 Redis 的启动:
19.3 Redis 的操作指令一览
19.3.1 Redis 的基本使用:
说明:Redis 安装好后，默认有16个数据库，初始默认使用0号库, 编号是0...15
1. 添加key-val [set]
2. 查看当前redis 的 所有key [keys *]
3. 获取key 对应的值.[get key]
4. 切换redis 数据库 [select index]
5. 如何查看当前数据库的key-val 数量 [dbsize]
6. 清空当前数据库的key-val 和清空所有数据库的key-val [flushdb flushall]
19.4 Redis 的 Crud 操作
19.4.1 Redis 的五大数据类型:
Redis的五大数据类型是: String(字符串) 、Hash (哈希)、List(列表)、Set(集合)
和zset(sorted set：有序集合)
19.4.2 String(字符串) -介绍
string是redis 最基本的类型，一个 key 对应一个value。
string类型是二进制安全的。除普通的字符串外，也可以存放图片等数据。
redis 中字符串value 最大是512M
 举例,存放一个地址信息:
address 北京天安门
说明 ：
key : address
value: 北京天安门
 String(字符串) -CRUD
举例说明Redis 的 String 字符串的 CRUD操作.
set[如果存在就相当于修改，不存在就是添加]/get/del
19.4.3 String(字符串)-使用细节和注意事项
 setex(setwith expire)键秒值
 mset[同时设置一个或多个 key-value 对]
 mget[同时获取多个 key-val]
19.4.4 Hash (哈希，类似 golang 里的 Map)-介绍
 基本的介绍
Redishash 是一个键值对集合。var user1 map[string]string
Redishash 是一个string 类型的field 和value的映射表，hash 特别适合用于存储对
象。
 举例,存放一个User 信息:(user1)
user1 name "smith" age 30job "golang coder"
说明 ：
key : user1
name 张三 和 age 30 就是两对 field-value
19.4.5 Hash（哈希，类似 golang 里的 Map）-CRUD
举例说明Redis 的 Hash 的CRUD的基本操作.
hset/hget/hgetall/hdel
演示添加user 信息的案例 (name,age )
19.4.6 Hash-使用细节和注意事项
 在给user 设置 name 和 age 时，前面我们是一步一步设置,使用 hmset 和 hmget 可以一次性来设
置多个 filed 的值和返回多个field 的值 。
 hlen 统计一个hash 有几个元素.
 hexistskey field
查看哈希表key 中，给定域field 是否存在
19.4.7 课堂练习
19.4.8 List（列表）-介绍
列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列
表的头部（左边）或者尾部（右边）。
List 本质是个链表,List 的元素 是有序的，元素的值可以重复.
举例,存放多个地址信息:
city 北京 天津 上海
说明 ：
key : city
北京 天津 上海 就是三个元素
 入门的案例
19.4.9 List（列表）-CRUD
举例说明Redis 的List 的CRUD操作。
lpush/rpush/lrange/lpop/rpop/del/
 说明:
List 画图帮助学员理解(可以把l想象成一根管道.)
herosList 的演示
19.4.10 List-使用细节和注意事项
19.4.11 Set(集合) - 介绍
 Redis的Set 是string 类型的无序集合。
 底层是HashTable数据结构,Set 也是存放很多字符串元素，字符串元素是无序
的，而且元素的值不能重复
 举例,存放多个邮件列表信息:
email PI:EMAIL PI:EMAIL
说明 ：
key : email
PI:EMAIL PI:EMAIL 就是二个元素
redis>sadd email xxxxx
19.4.12 Set(集合)- CRUD
 举例说明Redis 的 Set 的CRUD操作.
sadd
smembers[取出所有值]
sismember[判断值是否是成员]
srem [删除指定值]
 演示添加多个电子邮件信息的案例
19.4.13 Set 课堂练习
 举例,存放一个商品信息:
包括 商品名、价格、生产日期。
完成对应的crud操作
19.5 Golang 操作 Redis
19.5.1 安装第三方开源 Redis 库
1) 使用第三方开源的redis 库: github.com/garyburd/redigo/redis
2) 在使用Redis前，先安装第三方Redis 库，在GOPATH路径下执行安装指令:
D:\goproject>go get github.com/garyburd/redigo/redis
3) 安装成功后,可以看到如下包
 特别说明: 在安装Redis 库前，确保已经安装并配置了 Git, 因为 是从github 下载安装Redis 库的，
需要使用到Git。 如果没有安装配置过Git，请参考: 如何安装配置Git
19.5.2 Set/Get 接口
说明: 通过Golang 添加和获取 key-value 【比如 name-tom~ 】
package main
import(
"fmt"
"github.com/garyburd/redigo/redis" //引入redis 包
)
funcmain() {
//通过 go 向redis 写入数据和读取数据
//1. 链接到redis
conn, err :=redis.Dial("tcp", "127.0.0.1:6379")
iferr!= nil {
fmt.Println("redis.Dial err=", err)
return
}
defer conn.Close() //关闭..
//2. 通过go 向redis 写入数据 string [key-val]
_,err =conn.Do("Set", "name", "tomjerry 猫猫")
iferr!= nil {
fmt.Println("set err=", err)
return
}
//3. 通过go 向redis 读取数据 string [key-val]
r,err :=redis.String(conn.Do("Get", "name"))
iferr!= nil {
fmt.Println("set err=", err)
return
}
//因为返回 r 是 interface{}
//因为 name 对应的值是string,因此我们需要转换
//nameString:=r.(string)
fmt.Println("操作ok", r)
}
19.5.3 操作 Hash
说明: 通过Golang 对Redis操作Hash 数据类型
对hash 数据结构，field-val 是一个一个放入和读取
代码：
package main
import(
"fmt"
"github.com/garyburd/redigo/redis" //引入redis 包
)