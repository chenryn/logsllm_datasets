出现问题时，声音是很好的提示。我们在Viaweb搞了一块很大的面
PDG
207
---
## Page 234
有助于减少内存需求。
时支持的用户数量取决于用户数据所消耗的内存。编程语言在这方面也
对象就是软件的运行速度。但是，一般情况下内存才是瓶颈，你能够同
变，因为硬件和软件现在捆绑在一起供应。对于那些提供互联网软件的公
胀，消耗光所有可以得到的资源。这一切将随着互联网软件的出现发生改
软件的效率。帕金森定律?被证明与摩尔定律一样颠扑不破。软件不断膨
发者总是假设用户桌面电脑的运算能力会不断增长，所以不用刻意提高
本支出就取决于这个指标。
对待发明创造。但是，让别人相信一种新事物是需要时间的。我有一个
以，大多数黑客往往会等上几年，看看某一种新语言的势头，然后才真
没人想用一种会被淘汰的语言编程，这方面已经有很多前车之鉴了。所
(heap）。持久化对象和语言内核级别的延迟加载（lazy loading）支持也
能发挥作用，对线程的良好支持将使得所有用户共享同一个内存堆
朋友，他的客户第一次提出某种需求时，他很少理会。因为他知道人们
正考虑使用它。
司来说，将每台服务器支持的用户数量最大化会对降低成本产生巨大影响。
需要的东西。
能已经很不高兴了，但是这至少保证他们提出的需求应该就是他们真正
户第三次或第四次提出同样的需求时，他才认真对待。这个时候客户可
有时候会想要自己并不真正需要的东西。为了避免浪费时间，只有当客
在一些应用程序中，处理器的运算能力是瓶颈，那么最重要的优化
许多年以来，大多数面向最终用户的程序都不太关心效率。软件开
新事物的发明者通常对这个发现很震惊，他们没想到人们居然这样
①帕金森定律(Parkinson's Law)的一种原始表达形式是“工作总是到最后一刻才会完成”，
一种编程语言要想变得流行，最后一关就是要经受住时间的考验。
大多数人接触新事物时都学会了使用类似的过滤机制。甚至有时要
一种资源的需求总是会消耗光这种资源的所有供应”。一——译者注
后来引申到计算机领域就变成了“数据总是会填满所有空间”，更一般性的总结则是“对
间
PDG
---
## Page 235
Viaweb 不需要下载安装就能使用。不过，好消息是，简单重复同一个信
直到人们开始接受这种发明。我们就耗费了好几年才使得客户明白
场已经把它遗忘了。
到一两年后再去学习它，结果一两年后已经没有学习的必要了，因为市
即使给用户造成了损失，早期使用者也会对你宽容大度的。
能够很快找出你的技术中存在的缺点。而且，如果你的用户只有很少几
用者比其他因素更能促进技术发展。早期使用者都是行家，要求也很高，
发现过了这么久你居然还在那里。
始倾听。人们真正注意到你的时候，不是第一眼看到你站在那里，而是
息就能解决这个问题。你只需要不停地重复同一句话，最终人们将会开
无踪。虚拟现实建模语言VRML 刚诞生时曾经轰动一时，但是我决定等
数的热门新商品事后被证明都是浪费时间的头，没多久就消失得无影
听到别人提起十遍以上他们才会留意。这样做完全是合理的，因为大多
心程度无与伦比)。创业者持续改进新技术，与此同时，通过口碑效应，
术。他们把它推向市场，没有任何宣传，最初的用户寥塞无几（但是热
业者。几个好朋友埋头工作，在外界毫不知晓的情况下开发出某种新技
爆炸式。自然成长式的一个例子就是在车库里白手起家、自力更生的创
个人，你就能够与他们所有人保持密切接触。只要不断改进你的系统,
渐发生了巨大的变化，编程语言更是如此。诞生头几年，一小批早期使
了明星人物。自然成长式的创业者坐在自家车库里，觉得自己又穷又可
买得起，在公关公司配合产品推出的宣传活动中，他们自己也附带成为
导人物个个光彩照人、自信非凡，深受风险资本商的追捧。他们什么都
就获得了一大批使用者 (至少他们希望如此)。
公司。他们急急忙忙地开发一个产品，推向市场的时候大肆曝光，立刻
用户数量不断增长。在创业者不经意间，他们已经壮大起来了。
新事物的发展改进一般也需要很长时间。大多数技术在诞生后都逐
所以，发明新事物的人必须有耐心，要常年累月不断地做市场推广，
大爆炸式的例子是有风险资本支持、在市场上大张旗鼓宣传的创业
 新技术被市场接纳的方式有两种，一种是自然成长式，另一种是大
一般来说，车库里的创业者会妒忌大爆炸式的创业公司。后者的主
209
PDG
梦寐以求的编程语言
?
---
## Page 236
经沧桑的老人一样，对自己的能力抱着怀疑态度。在你的大脑中，有一
你要像初生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历
一点就是要经常“再设计”，编程尤其如此，再多的修改都不过分。
秀作家都知道这一点，它对软件开发也适用。设计一样东西，最重要的
承者 Unix和C语言则是自然成长式项目。
系统和 Ada语言是大爆炸式项目，现在都已经销声匿迹了，而它们的继
技术，就会发现大部分都是源于自然成长式。
更好的技术，能为创始人带来更多的财富。如果你研究一下目前的主流
怜。但是我想他们不必难过。最终来看，自然成长式会比大爆炸式产生
乐观，自以为做出了伟大的产品，从不反思和改进。上了年纪的黑客又
你对自己的怀疑没有超过你对自己的信心,就能够坦然接受这个半成品，
自己已经完成的部分，清楚地意识到存在各种各样的缺陷。此时，只要
个难题，自信一定能够解决它。到了第二阶段，你在清晨的寒风中看到
在保持平衡中前进一样。在创新活动的第一阶段，你不知疲倦地猛攻某
陷。这种视角的差异并非偶然，因为只有对现状不满，才会造就杰出的
人看到他们的成果觉得棒极了，而创造者本人看到的都是自己作品的缺
性保持乐观，同时对当前解法的合理性保持怀疑。
观主义和怀疑倾向分别针对两个不同的对象。你必须对解决难题的可能
心想不管多难我还是可以把剩下的部分做完。
成果。
为了写出优秀软件，你必须同时具备两种互相冲突的信念。一方面
这种模式不仅存在于商业公司，还存在于科研活动中。Multics 操作
让这两股相反的力量保持平衡是很难的。
做出优秀成果的人，在做的过程中常常觉得自己做得不够好。其他
这里的难点在于你要意识到，实际上这两种信念并不矛盾。你的乐
如果你能平衡好希望和担忧，它们就会推动项目前进，就像自行车
著名散文家 E.B.怀特说过，“最好的文字来自不停的修改”。所有优
设
计
。初出茅庐的年轻黑客都很
PDG
---
## Page 237
结。这种语言干净简练，具有最高层次的抽象和互动性，而且很容易装
的决定往往还是维持现状。
会只会做出恶劣的设计。但是我觉得，委员会最大的问题在于他们妨碍
语言规格做出改变就像撕绷带，当你感到痛苦的一瞬间，痛苦就已经成为
情况下，用户比较少意味着你任何时候都可以加大修改的力度。这时，对
进行大规模改造。所以，一开始的时候要精心选择用户，避免使用者过
思想产生了不协调，但是软件的使用者就会抱怨修改后的版本有不兼容
地进行下去。文章的读者不可能抱怨修改后新增加的内容让他们前后的
的一层定义的语言，那么接口就由较低的一层控制；如果较低的一层从
却往往一成不变，成为整个系统中拖后腿的部分。
则接口就无法改变。因此现实中，尽管软件功能越来越强大，内部接口
内部的各个接口由不同的人负责。这时除非两个人都同意改变接口，否
人愿意自讨苦吃。而且，即使大多数成员不喜欢某种做法，委员会最后
了“再设计”。在委员会的主持下，修改一种语言是非常麻烦的事，没有
快增长。
的。文章可以修改到你满意为止，但是软件的修改通常来说可以无休止
太不自信，甚至故意回避一些挑战性很强的项目。
属于较高的一层，那么接口就由较高的一层控制。
层与层之间的接口完全由其中的一层控制。如果较高的一层使用了较低
水平接口。这意味着软件内部的模块是一个个垂直堆积起来的抽象层，
了回忆。如果用户数量庞大，修改语言带来的痛苦就将持续很长时间。
问题。
用户是一把双刃剑。他们推动语言的发展，但也使得你不敢对语言
就算委员会只有两个人，还是会妨碍“再设计”，典型例子就是软件
大家都知道，让一个委员会负责设计语言是非常糟糕的主意。委员
任何措施，只要能让“再设计”周而复始地进行下去，就都是可取
一种可能的解决方法是，将软件内部的接口设计成垂直接口而不是
让我们试着描述黑客心目中梦寐以求的语言来为以上内容做个小
。发展用户就像一种优化过程，明智的做法就是放慢速度。一般
梦寐以求的编程语言
X
PDG
211
梦寐以求的编程语言
---
## Page 238
212
梦寐以求的编程语言
保留某些功能。所有函数库的源码都很容易得到。这种语言能够很轻松
精密照相机的各种零件一样完美契合，不需要为了兼容性问题放弃或者
核一样经过精心设计，它们都能很好地协同工作。语言的每个部分就像
操作手册，它本身很薄，里面关于限定条件和例外情况的警告寥廖无几
花几分钟阅读范例就能领会应该如何使用此种语言。你偶尔才需要查阅
需要的地方还能直接嵌人字节码。
告诉你应该重点关注什么地方。你能让多重循环快得难以置信，并且在
然后，等到你开始优化的时候，它还提供一个真正出色的性能分析器，
母是多余的，甚至用到 Shift键的机会也很少。
有现成的函数库可以调用。
要写的代码几乎都与你自己的特定设置有关，其他具有普遍性的问题都
备，可以只用很少的代码就解决常见的问题。不管是什么程序，你真正