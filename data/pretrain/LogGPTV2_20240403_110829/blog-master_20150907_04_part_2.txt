-rw-r--r-- 1 postgres postgres 4.1K Jun 10 03:29 crc32.c  
drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 sql  
drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 expected  
drwxrwxrwx 2 postgres postgres 4.0K Jun 10 03:38 data  
```  
contrib/ltree的Makefile如下（在这里配置回归测试的调度，用到变量REGRESS，对应sql目录中的脚本文件名）：  
```  
# contrib/ltree/Makefile  
MODULE_big = ltree  
OBJS =  ltree_io.o ltree_op.o lquery_op.o _ltree_op.o crc32.o \  
        ltxtquery_io.o ltxtquery_op.o ltree_gist.o _ltree_gist.o  
PG_CPPFLAGS = -DLOWER_NODE  
EXTENSION = ltree  
DATA = ltree--1.0.sql ltree--unpackaged--1.0.sql  
REGRESS = ltree  
ifdef USE_PGXS  
PG_CONFIG = pg_config  
PGXS := $(shell $(PG_CONFIG) --pgxs)  
include $(PGXS)  
else  
subdir = contrib/ltree  
top_builddir = ../..  
include $(top_builddir)/src/Makefile.global  
include $(top_srcdir)/contrib/contrib-global.mk  
endif  
```  
其中：  
```  
include $(PGXS)  
```  
或 :   
```  
include $(top_builddir)/src/Makefile.global  
```  
都指向了：  
src/makefiles/pgxs.mk  
这个makefile中会用到回归测试相关的两个变量：  
```  
#   REGRESS -- list of regression test cases (without suffix)  
#   REGRESS_OPTS -- additional switches to pass to pg_regress  
```  
引用src/makefiles/pgxs.mk的部分内容如下：  
```  
ifdef REGRESS  
# Select database to use for running the tests  
ifneq ($(USE_MODULE_DB),)  
  REGRESS_OPTS += --dbname=$(CONTRIB_TESTDB_MODULE)  
else  
  REGRESS_OPTS += --dbname=$(CONTRIB_TESTDB)  
endif  
# where to find psql for running the tests  
PSQLDIR = $(bindir)  
# When doing a VPATH build, must copy over the data files so that the  
# driver script can find them.  We have to use an absolute path for  
# the targets, because otherwise make will try to locate the missing  
# files using VPATH, and will find them in $(srcdir), but the point  
# here is that we want to copy them from $(srcdir) to the build  
# directory.  
ifdef VPATH  
abs_builddir := $(shell pwd)  
test_files_src := $(wildcard $(srcdir)/data/*.data)  
test_files_build := $(patsubst $(srcdir)/%, $(abs_builddir)/%, $(test_files_src))  
all: $(test_files_build)  
$(test_files_build): $(abs_builddir)/%: $(srcdir)/%  
        $(MKDIR_P) $(dir $@)  
        ln -s $ cd /opt/soft_bak/postgresql-9.4.4/contrib/ltree/  
postgres@digoal-> ../../src/test/regress/pg_regress --inputdir=. --temp-install=./tmp_check --top-builddir=../.. --extra-install=contrib/ltree ltree  
============== removing existing temp installation    ==============  
============== creating temporary installation        ==============  
============== initializing database system           ==============  
============== starting postmaster                    ==============  
running on port 57636 with PID 27852  
============== creating database "regression"         ==============  
CREATE DATABASE  
ALTER DATABASE  
============== running regression test queries        ==============  
test ltree                    ... ok  
============== shutting down postmaster               ==============  
============== removing temporary installation        ==============  
=====================  
 All 1 tests passed.   
=====================  
```  
另外一种测试时installcheck，和check不同的是，installcheck不需要初始化数据库，是在我们开启了数据库集群的情况下的测试。  
同样的方法，我们可以发现它调用的是：  
```  
	$(pg_regress_installcheck) $(REGRESS_OPTS) $(REGRESS)  
```  
通过src/Makefile.global的定义：  
```  
pg_regress_installcheck = $(top_builddir)/src/test/regress/pg_regress --inputdir=$(srcdir) --psqldir='$(PSQLDIR)' $(pg_regress_locale_flags) $(EXTRA_REGRESS_OPTS)  
bindir := $(shell $(PG_CONFIG) --bindir)  
```  
以及  
src/makefiles/pgxs.mk  
```  
PSQLDIR = $(bindir)  
```  
最终转换为：  
```  
../../src/test/regress/pg_regress --inputdir=. --psqldir='/opt/pgsql/bin' ltree  
```  
启动数据库后，就可以进行测试了。同样需要注意(PGPORT PGHOST PGDATABASE PGUSER等)环境变量。  
```  
postgres@digoal-> pg_ctl start  
postgres@digoal-> pwd  
/opt/soft_bak/postgresql-9.4.4/contrib/ltree  
postgres@digoal-> ../../src/test/regress/pg_regress --inputdir=. --psqldir='/opt/pgsql/bin' ltree  
(using postmaster on /data01/pg_root_1921, port 1921)  
============== dropping database "regression"         ==============  
DROP DATABASE  
============== creating database "regression"         ==============  
CREATE DATABASE  
ALTER DATABASE  
============== running regression test queries        ==============  
test ltree                    ... ok  
=====================  
 All 1 tests passed.   
=====================  
```  
所以插件的回归测试配置也很简单，同样需要sql, expected目录，以及通过配置Makefile来指定需要回归测试的sql脚本。  
## 参考  
1\. http://www.postgresql.org/docs/devel/static/regress-run.html  
2\. http://www.postgresql.org/docs/devel/static/regress-variant.html  
各种Makefile  
```  
src/Makefile.global  
src/Makefile  
src/makefiles/pgxs.mk   
contrib/contrib-global.mk   
contrib/xx/Makefile  
......  
```  
代码覆盖率测试见我另一篇BLOG  
http://blog.163.com/digoal@126/blog/static/1638770402015875295989/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")