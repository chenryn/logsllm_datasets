title:Order-Revealing Encryption: New Constructions, Applications, and Lower
Bounds
author:Kevin Lewi and
David J. Wu
Order-Revealing Encryption: New Constructions,
Applications, and Lower Bounds
(Extended Version)
Kevin Lewi
Stanford University
David J. Wu
Stanford University
PI:EMAIL
PI:EMAIL
Abstract
In the last few years, there has been signiﬁcant interest in developing methods to search over
encrypted data. In the case of range queries, a simple solution is to encrypt the contents of
the database using an order-preserving encryption (OPE) scheme (i.e., an encryption scheme
that supports comparisons over encrypted values). However, Naveed et al. (CCS 2015) recently
showed that OPE-encrypted databases are extremely vulnerable to “inference attacks.”
In this work, we consider a related primitive called order-revealing encryption (ORE), which
is a generalization of OPE that allows for stronger security. We begin by constructing a new ORE
scheme for small message spaces which achieves the “best-possible” notion of security for ORE.
Next, we introduce a “domain-extension” technique and apply it to our small-message-space
ORE. While our domain-extension technique does incur a loss in security, the resulting ORE
scheme we obtain is more secure than all existing (stateless and non-interactive) OPE and ORE
schemes which are practical. All of our constructions rely only on symmetric primitives. As
part of our analysis, we also give a tight lower bound for OPE and show that no eﬃcient OPE
scheme can satisfy best-possible security if the message space contains just three messages. Thus,
achieving strong notions of security for even small message spaces requires moving beyond OPE.
Finally, we examine the properties of our new ORE scheme and show how to use it to
construct an eﬃcient range query protocol that is robust against the inference attacks of Naveed
et al. We also give a full implementation of our new ORE scheme, and show that not only is
our scheme more secure than existing OPE schemes, it is also faster: encrypting a 32-bit integer
requires just 55 microseconds, which is more than 65 times faster than existing OPE schemes.
1
Introduction
Today, large corporations and governments collect and store more personal information about
us than ever before. And as high-proﬁle data breaches on companies and organizations (such as
Anthem [AC15], eBay [Kel14], and the U.S. Voter Database [FV15]) become startlingly common, it
is imperative that we develop practical means for securing our personal data in the cloud.
One way to mitigate the damage caused by a database breach is to encrypt the data before
storing it in the cloud. This, however, comes at the price of functionality: once data is encrypted, it
is more diﬃcult to execute searches over the data without ﬁrst decrypting the data. As a result,
This is the extended version of a paper by the same name that appeared in ACM Conference on Computer and
Communications Security in October, 2016.
1
security researchers have turned to developing methods that both protect the contents of the
database, as well as support eﬃcient operations, such as search, over the encrypted data.
Property-preserving encryption. One way to support searching over an encrypted database
is through property-preserving encryption (PPE) [BCLO09, PR12, CD15]. A PPE scheme is an
encryption scheme where the ciphertexts reveal a particular property on their underlying plaintexts.
Examples include deterministic encryption, where the ciphertexts reveal equality between messages,
and order-preserving encryption (OPE) [AKSX04, BCLO09], where the ciphertexts reveal the
ordering of messages. Deterministic and order-preserving encryption schemes have been used in
CryptDB [PRZB11], and also commercially by SkyHigh Networks, CipherCloud, Google Encrypted
BigQuery, and others. One of the main appeals of PPE for encrypting relational databases is that
they are lightweight, and hence, can be deployed with minimal changes to existing databases. For
instance, in an OPE scheme, the ciphertexts themselves are numeric and the order of the ciphertexts
precisely coincides with the order of the plaintexts. Thus, searching over a column encrypted using
OPE is identical to searching over an unencrypted column.
Limitations of PPE and OPE. While PPE, and in particular, OPE, provides a practical solution
for searching on encrypted data, these schemes also leak signiﬁcant amounts of information about
their underlying plaintexts. For instance, Boldyreva et al. [BCO11] showed that a single OPE
ciphertext leaks half of the most signiﬁcant bits of its underlying plaintext!
More recently, Naveed et al. [NKW15] described a series of inference attacks on relational
databases encrypted using deterministic and order-preserving encryption schemes. They show that,
given just a data dump of an encrypted database along with auxiliary information from a public
database, an attacker can successfully recover nearly all of the underlying plaintext values from
their respective ciphertexts.
Our goals. Motivated by the limited security of existing OPE schemes and the emerging threat
of inference attacks on databases encrypted using PPE, our goal in this work is to construct a
practical property-preserving encryption for comparisons that achieves stronger security guarantees
compared to existing OPE schemes while at the same time providing robustness against oﬄine
inference attacks, such as those considered by Naveed et al.
Order-revealing encryption. To address the limitations of OPE, we rely on a closely-related,
but more ﬂexible, notion called order-revealing encryption (ORE) [BLR+15, CLWW16] (also called
eﬃciently-orderable encryption (EOE) [BCO11, §5]). In this work, we focus exclusively on non-
interactive and stateless schemes—these are the only schemes we know of that are deployed on a
large scale. We survey the work on alternative solutions in Section 8.
In an OPE scheme, both the plaintext and ciphertext spaces must be numeric and well-ordered.
Moreover, the ciphertexts themselves preserve the order of the underlying plaintexts. While this
property makes OPE suitable for performing range queries on encrypted data, it also limits the
achievable security of OPE schemes. In their original work, Boldyreva et al. [BCLO09] introduced
the notion of “best-possible” semantic security for OPE, which states that the ciphertexts do not
leak any information beyond the ordering of the plaintexts. Unfortunately, in the same work and a
follow-up work [BCO11], they show that any OPE scheme with best-possible security must have
ciphertexts whose length grows exponentially in the length of the plaintexts. Popa et al. [PLZ13]
further extended this lower bound to apply to stateful, interactive OPE schemes. These lower
bounds rule out any hope of constructing eﬃcient OPE schemes for large message spaces. As a
2
compromise, Boldyreva et al. [BCLO09] introduced a weaker notion of security (POPF-CCA) for
OPE schemes, but it is diﬃcult to quantify the leakage of schemes which are POPF-CCA secure.
Recently, Boneh et al. [BLR+15] studied the more general notion of ORE, which does not
place any restrictions on the structure of the ciphertext space. An ORE scheme simply requires
that there exists a publicly computable function that compares two ciphertexts. By relaxing the
constraint on the ciphertext space, the Boneh et al. scheme is the ﬁrst (non-interactive and stateless)
scheme to achieve best-possible semantic security. However, their construction relies on multilinear
maps [BS03, GGH13a, CLT13], and is extremely far from being practically viable. More recently,
Chenette et al. [CLWW16] introduced a new security model for ORE that explicitly models the
information leakage of an ORE scheme. They also give the ﬁrst eﬃciently-implementable ORE
scheme. However their scheme also reveals the index of the ﬁrst bit that diﬀers between two
encrypted values.
1.1 Extending ORE: The Left/Right Framework
Before describing our main contributions, we ﬁrst highlight the “left/right” framework for order-
revealing encryption that we use in this work. Our notions are adapted from similar deﬁnitions for
multi-input functional encryption [GGG+14, BLR+15], where the encryption function operates on
diﬀerent “input slots.” In a multi-input functional encryption scheme (of which ORE is a special
case), information about plaintexts is only revealed when one has a ciphertext for every slot.
We now describe how this notion of encrypting to diﬀerent input slots applies to order-revealing
encryption. In a vanilla ORE scheme, there is a single encryption algorithm that takes a message
and outputs a ciphertext. The comparison algorithm then takes two ciphertexts and outputs the
comparison relation on the two underlying messages. In the left/right framework, we modify this
interface and decompose the encryption function into two separate functions: a “left” encryption
function and a “right” encryption function. Each of these encryption functions takes a message and
the secret key, and outputs either a “left” or a “right” ciphertext, respectively. Next, instead of
taking two ciphertexts, the comparison function takes a left ciphertext and a right ciphertext, and
outputs the comparison relation between the two underlying messages (encrypted by the left and
right ciphertexts). We note that any ORE scheme in the left/right framework can be converted to
an ORE scheme in the usual sense by simply having the ORE encryption function output both the
left and right ciphertexts for a given message.
This left/right notion is a strict generalization of the usual notion of order-revealing encryption,
and thus, can be used to strengthen the security guarantees provided by an ORE scheme. In
particular, a key advantage of working in this framework is that we can now deﬁne additional
security requirements on collections of left or right ciphertexts taken in isolation. For example, in
both of the ORE constructions we introduce in this work (Sections 3 and 4), a collection of right
ciphertexts taken individually is semantically secure—that is, no information about the underlying
plaintexts (including their order relations) is revealed given only a collection of right ciphertexts. In
Section 5, we describe precisely how semantic security of the right ciphertexts can be leveraged to
obtain a range query protocol that is robust against oﬄine inference attacks. We also note that the
schemes presented in this work are the ﬁrst practical ORE constructions in the left/right framework
where one side (the right ciphertexts) achieves semantic security.1
1Concurrent with the publication of this work, Joye and Passel´egue [JP16] along with Cash, Liu, O’Neill, and
Zhang [CLOZ16] independently gave constructions of ORE based on bilinear groups where the ciphertexts are
decomposable into left and right components where one side has semantic security.
3
Finally, we note that the left/right framework extends naturally to property-preserving encryption
schemes, and thus, opens up many new avenues of developing more secure cryptographic primitives
for searching on encrypted data.
1.2 Our Contributions
In this work, we describe a new ORE scheme that achieves stronger security compared to existing
practical OPE and ORE schemes, as well as a method to leverage our new ORE scheme to eﬃciently
perform range queries while providing robustness against inference attacks. We now highlight our
main contributions.
An eﬃcient small-domain ORE. We begin by giving the ﬁrst construction of a practical, small-
domain ORE scheme with best-possible semantic security that only relies on pseudorandom functions
(PRFs).2 The restriction to “small” domains is due to the fact that the ciphertext length in our
scheme grows linearly in the size of the plaintext space. All existing constructions of ORE that
achieve best-possible security in the small-domain setting rely on pairings [KLM+16], general-purpose
functional encryption [AJ15, BKS15], or multilinear maps [BLR+15], and thus, are not yet practical.
Our particular construction is inspired by the “brute-force” construction of functional encryption
by Boneh et al. [BSW11, §4.1]. They show that functional encryption with respect to a “small”
(i.e., polynomially-sized) class of functions can be constructed using only symmetric primitives. We
adapt these methods to show how best-possible ORE (and more generally, functional encryption)
can be eﬃciently constructed from symmetric primitives when the message space is small. Our
construction is described in Section 3.
Domain extension for ORE. Of course, a small-domain ORE by itself is not very useful for
range queries. Our second contribution is a recasting of the Chenette et al. [CLWW16] ORE
construction as a general technique of constructing a large-domain ORE from a small-domain ORE.
The transformation is not perfect and incurs some leakage. Applying this domain-extension technique
to our new small-domain ORE, we obtain an ORE scheme whose leakage proﬁle is signiﬁcantly
better than that of the Chenette et al. construction. In particular, our new ORE scheme operates
on blocks (where a block is a sequence of bits) and the additional leakage in our scheme is the
position of the ﬁrst block in which two messages diﬀer. For instance, if blocks are byte-sized (8 bits),
then our ORE scheme only reveals the index of the ﬁrst byte that diﬀers between the two messages
(and nothing more). In contrast, the Chenette et al. construction always reveals the index of the
ﬁrst bit that diﬀers.3 Thus, our new ORE construction provides signiﬁcantly stronger security, at
the cost of somewhat longer ciphertexts.
Encrypted range queries. While our new ORE scheme can almost4 be used as a drop-in
replacement for OPE to enable searching over an encrypted database, the scheme remains susceptible
to an oﬄine inference attack. To carry out their inference attacks, Naveed et al. [NKW15] rely on
the fact that OPE-encrypted ciphertexts enable equality tests and comparisons (by design). In our
2We prove security in the random oracle model, but it is possible to replace the random oracle with a PRF to show
security under a slightly weaker indistinguishability-based notion of security.
3While Chenette et al. also describe a multi-bit generalization of their scheme, the generalized version leaks more
information, namely the diﬀerence of the values in the ﬁrst diﬀering block. In our construction, only the index and
nothing else is revealed.
4We say “almost,” since using ORE in place of OPE would require writing a custom comparator for database elements.
4
setting, we take advantage of the special structure of the ciphertexts in our ORE scheme to obtain a
way of supporting range queries on encrypted data while protecting against oﬄine inference attacks.
Our range query protocol critically relies on the fact that our ORE scheme is a left/right ORE
scheme (Section 1.1). More precisely, a ciphertext ct in our ORE scheme naturally decomposes into a
left component ctL and a right component ctR. To compare two ciphertexts, the comparison function
only requires the left component of one ciphertext and the right component of the other. More
importantly, the right components have the property that they are semantically-secure encryptions
of their messages. To build an encrypted database system with robustness against range queries, the
database server only stores the “right” ciphertexts (in sorted order). To perform a range query, the
client provides the “left” ciphertexts corresponding to its range. The server can respond to the range
query as usual since comparisons are possible between left and right ciphertexts. Robustness against
oﬄine inference attacks is ensured since the database dump only contains the right ciphertexts
stored on the server, which are semantically-secure encryptions of their underlying messages. We
describe our method in greater detail in Section 5.
New lower bounds for OPE. The core building block in our new ORE construction is a
small-domain ORE with best-possible security. This raises the natural question of whether
we could construct a small-domain OPE that also achieves best-possible security. Previously,
Boldyreva et al. [BCLO09, BCO11] and Popa et al. [PLZ13] gave lower bounds that ruled out
schemes where the ciphertext space is subexponential in the size of the plaintext space. But when
the plaintext has size poly(λ) for a security parameter λ, there could conceivably exist an eﬃcient
OPE scheme with best-possible security. In this work, we show that this is in fact impossible. Using
a very diﬀerent set of techniques compared to [BCLO09, BCO11, PLZ13], we show (Section 6) that
no eﬃcient (stateless and non-interactive) OPE scheme can satisfy best-possible security, even
when the message space contains only 3 elements! Thus, to achieve strong security even in the
small-domain setting, it is necessary to consider relaxations of OPE, such as ORE.
Experimental evaluation. Finally, we implement and compare our new ORE scheme to the ORE
scheme by Chenette et al. [CLWW16] and the OPE scheme by Boldyreva et al. [BCLO09]. For
typical parameters, our new ORE scheme is over 65 times faster than the Boldyreva et al. scheme,
but has longer ciphertexts. For example, when working with byte-size blocks, encrypting a 32-bit
integer requires just 55 µs and produces a ciphertext that is 224 bytes. Typically, range queries
are not performed over extremely long ﬁelds, so the extra space overhead of our scheme is not
unreasonable. Given the superior security conferred by our scheme (in both the online and oﬄine
settings), and faster throughputs, our ORE scheme is a very compelling replacement for existing
OPE schemes.
Applying ORE. To conclude, we make a cautionary note that because of the leakage associated
with any ORE scheme, the primitive is not always suitable for applications that demand a high level
of security. Our hope, however, is that by giving precise, concrete characterization of the leakage
proﬁle of our construction (in both the online and oﬄine settings when used to support encrypted
database queries), practitioners are able to make better-informed decisions on the suitability of our
construction for a speciﬁc application.
5
For two distributions D1,D2, we write D1
2 Preliminaries
For n ∈ N, we write [n] to denote the set of integers {1, . . . , n}. If P is a predicate on x, we write
1(P(x)) to denote the indicator function for P: that is, 1(P(x)) = 1 if and only if P(x) = 1, and
0 otherwise. For a distribution D, we write x ← D to denote a draw from D. For a ﬁnite set S,
r←− S to denote a uniformly random draw from S. In this work, we write λ to denote a
we write x
security parameter. We say a function f (λ) is negligible in λ if f = o(1/λc) for all c ∈ N. We write
negl(λ) to denote a negligible function in λ and poly(λ) to denote a polynomial in λ. We say that
an event occurs with negligible probability if the probability of the event occurring is negl(λ), and