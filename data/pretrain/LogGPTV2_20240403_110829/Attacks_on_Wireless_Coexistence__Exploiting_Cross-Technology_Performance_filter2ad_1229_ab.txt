available to this other chip (e.g., steal a Wi-Fi password via
Bluetooth) and generally widens the attack surface for further
escalating into the OS (e.g., use a Bluetooth chip vulnerability
to escalate into an Android Wi-Fi driver).
B. Attacker Prerequisites
We assume an attacker with code execution on one wireless
component. Thus, one wireless core or chip is untrusted. While
this is a strong attack precondition,
is similar to other
side-channel attacks that escalate privileges for information
extraction or code execution, e.g., executing JavaScript on a
website [28], [49].
it
Controlling a wireless component requires one of the fol-
lowing efforts. An attacker can execute code by i) exploiting
an unpatched or new security issue over-the-air, or ii) use the
local OS ﬁrmware update mechanism [40], [51]. Coexistence
iii)
behavior can also be observed on higher layers, e.g.,
untrusted applications on a smartphone can observe side-
effects of packet scheduling of either Bluetooth or Wi-Fi. Such
observations do not require code execution within a wireless
chip but exploit the mere existence of coexistence protocols.
In the remainder of this paper, we consider an over-the-air
attacker i). We will practically conﬁrm our attacks using the
code execution methods i) and ii). We neglect iii), since it does
not directly involve wireless chips.
Typically, when a new exploitable wireless bug or attack
class is found, it only affects one wireless technology, such
as Bluetooth [23], [24], [48], [36], [40], Wi-Fi [1], [6], [9],
[21], [26], or cellular basebands [13], [25], [27], [29], [30],
[35], [39], [41]. Coexistence attacks change this in favor of
Impact
CVE
Bluetooth→Wi-Fi memory readout
CVE-2020-10368
Bluetooth→Wi-Fi code execution
CVE-2020-10367
Bluetooth→Wi-Fi denial of service
CVE-2019-15063
CVE-2020-10370 Wi-Fi→Bluetooth denial of service
CVE-2020-10369 Wi-Fi→Bluetooth packet timing & metadata
CVE-2020-29531
CVE-2020-29533
CVE-2020-29532 Wi-Fi→Bluetooth denial of service
CVE-2020-29530 Wi-Fi→Bluetooth packet timing & metadata
Bluetooth→Wi-Fi denial of service
Bluetooth→Wi-Fi packet timing & metadata
Patchable
×××
×××
(cid:88)(cid:88)(cid:88)
(cid:88)(cid:88)(cid:88)
?
(cid:88)(cid:88)(cid:88)
?
(cid:88)(cid:88)(cid:88)
?
the attacker: vulnerabilities of a single technology can affect
multiple technologies due to the lateral privilege escalation.
Even without ﬁnding a new bug, an attacker has a chance
to gain initial over-the-air code execution due to patch gap-
ping. Wireless ﬁrmware patching requires close collabora-
tion between OS maintainers and hardware manufacturers. In
practice, rolling out such patches takes multiple months, and
some devices receive patches earlier than others [48]. Despite
coordinated disclosure processes, even in 2021, Bluetooth
chip vulnerability descriptions have been released prior to
patches [23], resulting in a patch gap of approximately 1–2
months, depending on the vendor. Similarly, a Wi-Fi fuzzing
tool capable of ﬁnding new bugs was released in 2021 prior
to rolling out all patches [21]. After such publications, the
speciﬁc technology is at high risk of being exploited, until the
vendor rolls out patches and users install them.
IV. COEXISTENCE ATTACK CONCEPTS
We implement practical coexistence attacks against popular
chips, as listed in Table I. Prior to implementing these at-
tacks, we provide a brief description of their root cause and
impact. The ﬁrst two vulnerabilities are architectural, while
the remaining vulnerabilities are protocol-based.
A. Architectural Vulnerabilities
Wireless cores or chips can share otherwise redundant
components. Even though there is no detailed documentation,
some datasheets brieﬂy mention shared components like the
antenna [44], [45], [57],
interface [42],
or memory [18]. Chip architectures might contain further
undocumented shared components.
the USB to host
Within a shared component, data of multiple wireless
technologies is mixed, e.g., in a shared buffer that caches
raw samples prior to transmission via the antenna, or in a
shared interface to the OS such as USB or PCIe. If these
components miss separation, one technology can access data
of the other technology. Moreover, the OS sends data to the
chips in plaintext, and chips perform encryption, meaning
that unencrypted data can leak over shared components
(CVE-2020-10368). Additionally, if shared components hold
ﬁrmware data or are involved in ﬁrmware updates, this can
lead to code execution (CVE-2020-10367).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
31231
B. Protocol-based Vulnerabilities
Separate wireless chips use hardwired serial interfaces to
coordinate packet transmissions. Such interfaces can also be
part of a combo chip design, in addition to shared components.
Even a simple serial protocol, which only allows or defers
transmissions, can be susceptible to DoS, e.g., the coexistence
interface can be misconﬁgured on one end (CVE-2019-15063),
transmission requests can be ignored (CVE-2020-10370), or
priority transmissions can be requested permanently (CVE-
2020-29531, CVE-2020-29532).
Most serial coexistence protocols contain additional infor-
mation to optimize scheduling, such as transmission slot tim-
ings and packet priorities. This can leak information across
wireless chips: depending on the underlying serial protocol
an attacker can determine current packet types and activity
(CVE-2020-29533, CVE-2020-29530) or even understand if a
Bluetooth packet contained keystrokes (CVE-2020-10369).
C. Stealthiness
Since wireless chip code execution ﬂaws are published so
frequently, OSes harden their wireless stacks against privilege
escalations from the chip towards the OS, e.g., by reimple-
menting wireless daemons in Rust [3]. However, instead of
escalating into higher-level components of wireless stacks, our
attacker aims at escalating laterally between wireless tech-
nologies within the same level (wireless chip). On this level,
components are hardwired, and the OS can neither observe
nor ﬁlter an ongoing attack. Thus, coexistence ﬂaws bypass
OS-level protections like sandboxing wireless daemons.
D. Patchability
Some issues can only be patched by releasing a new
hardware revision. For example, a new ﬁrmware version will
not physically remove shared memory from a chip or adjust
for arbitrary jitter in a serial protocol. Moreover, some packet
timing and metadata cannot be removed without negatively
impacting packet coordination performance. More details on
patches and the disclosure timeline follow in Section VI-B.
V. PRACTICAL COEXISTENCE ATTACKS
We implement coexistence attacks on multiple chip types,
components, and protocols. This demonstrates that coexistence
is exploitable in practice. First, we explain standardized coex-
istence mechanisms (Section V-A). Then, we outline methods
for ﬁnding coexistence mechanisms within proprietary chips
for analysis (Section V-B). Based on this knowledge, we ex-
ploit a proprietary memory sharing mechanism (Section V-C),
a proprietary coexistence protocol (Section V-D), as well as a
standardized serial protocol (Section V-E).
A. Standardized Coexistence Mechanisms
As a ﬁrst step for testing coexistence implementations, we
need to understand which chips implement which coexistence
mechanisms and if these could be vulnerable. Two hardwired
inter-chip coexistence mechanisms are both openly standard-
ized and actually used by wireless chips or mentioned in
their datasheets. These mechanisms are called Packet Trafﬁc
Arbitration (PTA) and Mobile Wireless Standards (MWS).
1) Packet Trafﬁc Arbitration: PTA, speciﬁed by IEEE
802.15.2, addresses the coexistence of a co-located Wi-Fi
and Bluetooth transmitter [62]. Based on timing and packet
type information of both Wi-Fi and Bluetooth, it prevents
potential collisions and assigns priorities by packet
types.
For example, Bluetooth voice transmissions and Wi-Fi recep-
tion acknowledgment frames are given priority. The standard
deﬁnes three collaborative coexistence mechanisms between
Wi-Fi and Bluetooth [62]: i) A frequency notch ﬁlter on the
physical layer, ii) trafﬁc type prioritization called PTA, and iii)
time-based transmission division called Alternating Wireless
Medium Access (AWMA) on the MAC layer. All of these
mechanisms can be combined. The standard does not propose
any DoS mitigation.
PTA was speciﬁed in 2003, but is still mentioned in recent
wireless combo chip datasheets [19], [44], [52]. Silicon Labs
chips support a basic PTA mode without proprietary exten-
sions, which we will analyze later in Section V-E.
that
2) Mobile Wireless Standards: The Bluetooth speciﬁcation
deﬁnes MWS, which targets Wi-Fi and LTE [11, p. 290ff].
MWS deﬁnes inter-chip logical signals, which indicate packet
priorities [11, p. 3227ff]. The logical coexistence signals are
exchanged using Universal Asynchronous Receiver Transmit-
ter (UART). Bluetooth indicates priority receptions and, thus,
can request
the LTE chip ceases its transmission or
refrains from starting a transmission. Even though MWS is
part of the Bluetooth speciﬁcation, it also considers chips
that integrate Wi-Fi functionality. Since such chips know the
Wi-Fi state within the 2.4 GHz frequency band, there is also
a Wi-Fi priority signal. According to the speciﬁcation, it is
not guaranteed that the LTE chip honors these priority signals.
However, if it does, this enables DoS attacks. If vendor-speciﬁc
messages are used [11, p. 3252], information disclosure side
channels might also be possible.
In general, Broadcom and Cypress Bluetooth chips as well
as Intel LTE chips implement MWS command handlers. We
iPhones with Intel
conﬁrm that MWS is used on recent
baseband chips. MWS messages can be found in PacketLogger
traces as well as the system log [4], for example, on the iPhone
7, 8, 11, and SE2.
B. Identifying and Testing Coexistence Features in Practice
In the following, we use a real-world example to illustrate
how coexistence interfaces are implemented and how to ana-
lyze them for security issues. Most datasheets contain little to
no information about coexistence features. Thus, we focus on
the previously conﬁdential datasheet of the slightly outdated
BCM4339 Bluetooth/Wi-Fi combo chip by Broadcom. The
datasheet was released upon acquisition by Cypress [17]. We
highlight the most important parts of this datasheet in Figure 3.
In general, any shared component or connection between the
two cores of the combo chip could be attacked:
• Global Coexistence Interface (GCI), which is mentioned
to be similar to PTA but with vendor-speciﬁc extensions,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:02 UTC from IEEE Xplore.  Restrictions apply. 
41232
• unidirectional WLAN RAM sharing,
• bidirectional WLAN/Bluetooth access, with the exact
purpose being undocumented,
• Low-Noise Ampliﬁer (LNA) control,
• Front-End Module (FEM) or Single Pole, Triple Throw
(SP3T) switch circuit connecting the antenna.
The datasheet also includes “other” coexistence interfaces
without any further speciﬁcation. All interfaces are undocu-
mented, e.g., commands and addresses to interact with them
are missing. The most interesting features are GCI, which
is protocol-based and can also be addressed externally, and
WLAN RAM sharing, which could potentially be abused
for escalating between cores. Further features, such as LNA
control and antenna connections, are likely only susceptible to
DoS attacks. Thus, we only focus on the ﬁrst two features.
Proprietary coexistence interfaces in the Broadcom chip
are not meant to be reprogrammed by external developers.
Nonetheless, this is possible by using Nexmon for the Wi-Fi
core [51] and InternalBlue for the Bluetooth core [40]. These
two projects provide a patching framework and contain many
resources assisting further reverse engineering.
C. WLAN RAM Sharing (Broadcom & Cypress)
In the following, analyze the WLAN RAM sharing feature
and ﬁnd that the Bluetooth core can abuse this feature for
reading security-sensitive data from the Wi-Fi core and reliably
gain code execution.
1) Reverse Engineering: We recover the “WLAN RAM
Sharing” internals using leaked symbols from Cypress WICED
Studio 6.2, a public wireless chip development platform by
Cypress [20], [22]. It contains symbol information about the
Bluetooth part of the BCM20703A2 combo chip, embedded
into 2015–2016 MacBooks. In these symbols, we ﬁnd a
few functions following the naming scheme wlan_buff_*.
Based on these function names and a ROM dump from the
MacBook, we reverse-engineer the Bluetooth→Wi-Fi memory
mapping. When Wi-Fi is turned off, this memory area is all
zeros. Otherwise—irrespective of whether Wi-Fi is currently
connected to a network—this memory region is mapped. As
detailed in Appendix A-A, Bluetooth can read and write data
within a large memory region. The shared RAM address
mapping is the same on all chips introduced since 2014.
The shared RAM region seems to be a legacy feature. Blue-
tooth ﬁrmware compiled after 2016 does not cross-reference
the shared RAM, as listed in Table II. The few symbol leaks
let us assume that the shared RAM was introduced for audio
buffer sharing. It remains unclear why such a feature would
require access to almost
the full Wi-Fi RAM region via
Bluetooth and why it was never removed in newer chips.
2) RAM Sharing Code Execution: Bluetooth can write to
the Wi-Fi shared RAM area. We conﬁrm that this is sufﬁcient
for Bluetooth to execute code on the Wi-Fi core. Due to its
ﬁrmware patching mechanism, Wi-Fi executes code in writable
memory regions [51]. There are two suitable approaches to
identify Wi-Fi RAM areas that lead to code execution:
• Statically reverse-engineering Wi-Fi patches provided by
the vendor, which are applied to the RAM region, and
ﬁnd a location that is executed regularly, or
• dynamically writing pre-deﬁned chunks to the Wi-Fi
RAM region until they appear in crash logs.
SECI UART and GCI-GPIOs
External output used in the evaluation board debugging setup.
BT HOST WAKE
BT DEV WAKE
UART
USB 2.0
PCM
I2S
Other GPIOs
Bluetooth
l
o
r
t
n
o
C
t
r
o
P
UART
I2S
PCM
USB
Registers
DMA
JTAG
GPIO
Timers
WD
Pause
B
P
A
2
B
H
A
x
i
r
t
a
M
s
u
B
B
H
A
RAM
ROM
ARM CM3
WLAN M/S
RX/TX
BLE
LCU
APU
BlueRF
Modem
BT RF
GCI
WLAN RAM Sharing
CVE-2020-10368:
CVE-2020-10367: Code Execution
Information Disclosure
WLAN/BT Access
GCI Coex I/F
CVE-2019-15063: Denial of Service
CVE-2020-10370: Denial of Service
CVE-2020-10369:
Information Disclosure
Shared LNA Control
and Other Coex I/Fs
32 kHz External LPO
BT PA
CLB
Wi-Fi
RAM
ROM
ARM CR4
AXI↔AHB
Chip
Common
OTP
e
n
a
l
p
k
c