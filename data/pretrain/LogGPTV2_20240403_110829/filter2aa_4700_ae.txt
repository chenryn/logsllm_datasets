    }
    while (i > 1 ^
           garbled_buf_copy[i + -0xe3] ^
           *(uint *)(&DAT_0041e8c0 + (garbled_buf_copy[i + 1] & 1) * 4);
      i = i + 1;
    }
    garbled_buf_copy[0x26f] =
         (garbled_buf_copy[0x26f] & 0x80000000 | *garbled_buf_copy & 0x7fffffff) >> 1 ^
         garbled_buf_copy[0x18c] ^ *(uint *)(&DAT_0041e8c0 + (*garbled_buf_copy & 1) * 4);
    garbled_buf_copy[0x270] = 0;
  }
  uVar1 = garbled_buf_copy[garbled_buf_copy[0x270]];
  garbled_buf_copy[0x270] = garbled_buf_copy[0x270] + 1;
  uVar1 = uVar1 >> 0xb ^ uVar1;
  uVar1 = (uVar1 & 0x13a58ad) > 0x12 ^ uVar1;
}
undefined * get_mac_addr(void)
{
  char cVar1;
  int *piVar2;
  int iVar3;
  undefined *puVar4;
  int *piVar5;
  size_t local_8;
  puVar4 = (undefined *)0x0;
  local_8 = 0x288;
  piVar5 = (int *)allocate(0x288);
  if (piVar5 == (int *)0x0) {
    return (undefined *)0x0;
  }
  iVar3 = GetAdaptersInfo(piVar5,&local_8);
  if (iVar3 == 0x6f) {
    free(piVar5);
    piVar5 = (int *)allocate(local_8);
    if (piVar5 == (int *)0x0) {
      return (undefined *)0x0;
    }
    iVar3 = GetAdaptersInfo(piVar5,&local_8);
  }
  if (iVar3 == 0) {
    cVar1 = *(char *)(piVar5 + 0x65);
    piVar2 = piVar5;
    while ((((cVar1 == 0 && (*(char *)((int)piVar2 + 0x195) == 0)) &&
            (*(char *)((int)piVar2 + 0x196) == 0)) &&
           (((*(char *)((int)piVar2 + 0x197) == 0 && (*(char *)(piVar2 + 0x66) == 0)) &&
            (*(char *)((int)piVar2 + 0x199) == 0))))) {
      piVar2 = (int *)*piVar2;
      if (piVar2 == (int *)0x0) goto LAB_00401ce1;
      cVar1 = *(char *)(piVar2 + 0x65);
    }
    puVar4 = (undefined *)allocate(6);
    if (puVar4 != (undefined *)0x0) {
      *puVar4 = *(undefined *)(piVar2 + 0x65);
      puVar4[1] = *(undefined *)((int)piVar2 + 0x195);
      puVar4[2] = *(undefined *)((int)piVar2 + 0x196);
      puVar4[3] = *(undefined *)((int)piVar2 + 0x197);
      puVar4[4] = *(undefined *)(piVar2 + 0x66);
      puVar4[5] = *(undefined *)((int)piVar2 + 0x199);
    }
  }
LAB_00401ce1:
  free(piVar5);
  return puVar4;
}
undefined4 * __fastcall extract_serial(ushort *param_1)
{
  ushort *puVar1;
  undefined4 *puVar2;
  uint uVar3;
  uint uVar4;
  undefined4 *puVar5;
  undefined4 *puVar6;
  puVar1 = FUN_00402b60(param_1,10);
  if (puVar1 != (ushort *)0x0) {
    puVar5 = (undefined4 *)(puVar1 + 1);
    puVar1 = FUN_00402b60((ushort *)puVar5,0x20);
    if (puVar1 != (ushort *)0x0) {
      uVar4 = (int)((int)puVar1 - (int)puVar5) >> 1;
      puVar2 = (undefined4 *)allocate(uVar4 * 2 + 2);
      if (puVar2 != (undefined4 *)0x0) {
        if (0 > 1;
          puVar6 = puVar2;
          while (uVar3 != 0) {
            uVar3 = uVar3 - 1;
            *puVar6 = *puVar5;
            puVar5 = puVar5 + 1;
            puVar6 = puVar6 + 1;
          }
          uVar3 = (uint)((uVar4 & 1) != 0);
          while (uVar3 != 0) {
            uVar3 = uVar3 - 1;
            *(undefined2 *)puVar6 = *(undefined2 *)puVar5;
            puVar5 = (undefined4 *)((int)puVar5 + 2);
            puVar6 = (undefined4 *)((int)puVar6 + 2);
          }
        }
        *(undefined2 *)(uVar4 * 2 + (int)puVar2) = 0;
        return puVar2;
      }
    }
  }
  return (undefined4 *)0x0;
}
undefined4 __fastcall lchar_to_dword(ushort *param_1)
{
  ushort uVar1;
  undefined8 *puVar2;
  int iVar3;
  undefined4 uVar4;
  ushort *puVar5;
  uint uVar6;
  uVar4 = 0xffffffff;
  puVar5 = param_1;
  do {
    uVar1 = *puVar5;
    puVar5 = puVar5 + 1;
  } while (uVar1 != 0);
  uVar6 = (int)((int)puVar5 - (int)(param_1 + 1)) >> 1;
  puVar2 = (undefined8 *)allocate(uVar6 + 1);
  if (puVar2 == (undefined8 *)0x0) {
    return 0xffffffff;
  }
  *(undefined *)((int)puVar2 + uVar6) = 0;
  iVar3 = copy_str_into_buffer(puVar2,param_1,uVar6);
  if (iVar3 != 0) {
    uVar4 = *(undefined4 *)puVar2;
  }
  free(puVar2);
  return uVar4;
}
undefined4 * get_disk_serial(void)
{
  ushort *puVar1;
  undefined4 *puVar2;
  puVar1 = (ushort *)execute_command(L"wmic diskdrive get serialnumber");
  if (puVar1 == (ushort *)0x0) {
    return (undefined4 *)0x0;
  }
  puVar2 = extract_serial(puVar1);
  free(puVar1);
  return puVar2;
}
int __cdecl FUN_00401e10(wchar_t *param_1,uint param_2,wchar_t *param_3)
{
  undefined4 *puVar1;
  int iVar2;
  __crt_locale_pointers *p_Var3;
  char *pcVar4;
  pcVar4 = &stack0x00000010;
  p_Var3 = (__crt_locale_pointers *)0x0;
  puVar1 = (undefined4 *)FUN_00401000();
  iVar2 = ___stdio_common_vswprintf_s(*puVar1,puVar1[1],param_1,param_2,param_3,p_Var3,pcVar4);
  if (iVar2 > 1;
  local_8 = param_1;
  _Command = (wchar_t *)allocate(iVar6 * 2 + 0x2e);
  if (_Command == (wchar_t *)0x0) {
    return (void *)0x0;
  }
  iVar2 = FUN_00401e10((wchar_t *)_Command,iVar6 + 0x17,(wchar_t *)L"%s%s%s");
  if (iVar2 != -1) {
    _Command[iVar6 + 0x15] = L'\0';
    __wsystem(_Command);
    ppvVar3 = (HANDLE *)allocate(4);
    if (ppvVar3 != (HANDLE *)0x0) {
      hFile = CreateFileW(L"command_result.txt",0x80000000,0,(LPSECURITY_ATTRIBUTES)0x0,3,0x80,
                          (HANDLE)0x0);
      *ppvVar3 = hFile;
      if (hFile != (HANDLE)0xffffffff) {
        local_8 = (short *)GetFileSize(hFile,(LPDWORD)0x0);
        if (local_8 != (short *)0xffffffff) {
          local_c = (uint)local_8 & 0xfffffffe;
          lpBuffer = allocate(local_c + 2);
          if (lpBuffer != (void *)0x0) {
            *(undefined2 *)(local_c + (int)lpBuffer) = 0;
            BVar4 = ReadFile(*ppvVar3,lpBuffer,(DWORD)local_8,(LPDWORD)&local_10,(LPOVERLAPPED)0x0);
            if ((BVar4 == 0) || (local_10 != local_8)) {
              free(lpBuffer);
              lpBuffer = (void *)0x0;
            }
          }
        }
        CloseHandle(*ppvVar3);
      }
      free(ppvVar3);
    }
    cleanup(L"command_result.txt");
  }
  free(_Command);
  return lpBuffer;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
void __fastcall FUN_00401f78(int iParm1)
{
  code *pcVar1;
  BOOL BVar2;
  undefined4 extraout_ECX;
  undefined4 extraout_EDX;
  undefined4 unaff_EBX;
  undefined4 local_4;
  undefined4 unaff_ESI;
  undefined4 unaff_EDI;
  undefined2 in_ES;
  undefined2 in_CS;
  undefined2 in_SS;
  undefined2 in_DS;
  undefined2 in_FS;
  undefined2 in_GS;
  byte in_PF;
  byte in_AF;
  byte in_TF;
  byte in_IF;
  byte in_NT;
  byte in_AC;
  byte in_VIF;
  byte in_VIP;
  byte in_ID;
  undefined4 local_res0;
  if (iParm1 == DAT_0041e004) {
    return;
  }
  BVar2 = IsProcessorFeaturePresent(0x17);
  if (BVar2 != 0) {
    pcVar1 = (code *)swi(0x29);
    (*pcVar1)();
    return;
  }
  _DAT_0041ea30 =
       (uint)(in_NT & 1) * 0x4000 | (uint)(in_IF & 1) * 0x200 | (uint)(in_TF & 1) * 0x100 |
       (uint)(BVar2 < 0) * 0x80 | (uint)(BVar2 == 0) * 0x40 | (uint)(in_AF & 1) * 0x10 |
       (uint)(in_PF & 1) * 4 | (uint)(in_ID & 1) * 0x200000 | (uint)(in_VIP & 1) * 0x100000 |
       (uint)(in_VIF & 1) * 0x80000 | (uint)(in_AC & 1) * 0x40000;
  _DAT_0041ea34 = &stack0x00000004;
  _DAT_0041e970 = 0x10001;
  _DAT_0041e920 = 0xc0000409;
  _DAT_0041e924 = 1;
  _DAT_0041e930 = 1;
  DAT_0041e934 = 2;
  _DAT_0041e92c = local_res0;
  _DAT_0041e9fc = in_GS;
  _DAT_0041ea00 = in_FS;
  _DAT_0041ea04 = in_ES;
  _DAT_0041ea08 = in_DS;
  _DAT_0041ea0c = unaff_EDI;
  _DAT_0041ea10 = unaff_ESI;
  _DAT_0041ea14 = unaff_EBX;
  _DAT_0041ea18 = extraout_EDX;
  _DAT_0041ea1c = extraout_ECX;
  _DAT_0041ea20 = BVar2;
  _DAT_0041ea24 = local_4;
  DAT_0041ea28 = local_res0;
  _DAT_0041ea2c = in_CS;
  _DAT_0041ea38 = in_SS;
  FUN_004021da((_EXCEPTION_POINTERS *)&PTR_DAT_004171b0);
  return;
}
// WARNING: Function: __SEH_prolog4 replaced with injection: SEH_prolog4
UINT entry(void)
{
  code *pcVar1;
  bool bVar2;
  uint uVar3;
  int iVar4;
  code **ppcVar5;
  FuncDef5 **ppFVar6;
  char **argv;
  int *piVar7;
  UINT UVar8;
  UINT unaff_ESI;
  undefined4 *in_FS_OFFSET;
  undefined4 uVar9;
  undefined4 uVar10;
  undefined4 uVar11;
  UINT local_24;
  undefined4 local_14;
  FUN_004025e2();
  uVar3 = ___scrt_initialize_crt(1);
  if ((char)uVar3 != 0) {
    bVar2 = false;
    uVar3 = FUN_0040235c();
    if (DAT_0041ec3c != 1) {
      if (DAT_0041ec3c == 0) {
        DAT_0041ec3c = 1;
        iVar4 = FUN_00409556((undefined **)&DAT_0041716c,(undefined **)&DAT_00417184);
        if (iVar4 != 0) {
          unaff_ESI = 0xff;
          goto LAB_004021aa;
        }
        FUN_0040950f((undefined **)&DAT_00417160,(undefined **)&DAT_00417168);
        DAT_0041ec3c = 2;
      }
      else {
        bVar2 = true;
      }
      ___scrt_release_startup_lock((char)uVar3);
      ppcVar5 = (code **)FUN_0040269a();
      if (*ppcVar5 != (code *)0x0) {
        uVar3 = FUN_0040246c((int)ppcVar5);
        if ((char)uVar3 != 0) {
          pcVar1 = *ppcVar5;
          uVar11 = 0;
          uVar10 = 2;
          uVar9 = 0;
          _guard_check_icall();
          (*pcVar1)(uVar9,uVar10,uVar11);
        }
      }
      ppFVar6 = (FuncDef5 **)FUN_004026a0();
      if (*ppFVar6 != (FuncDef5 *)0x0) {
        uVar3 = FUN_0040246c((int)ppFVar6);
        if ((char)uVar3 != 0) {
          FUN_004097ea(*ppFVar6);
        }
      }
      argv = (char **)FUN_00409882();
      argv = (char **)*argv;
      piVar7 = (int *)FUN_0040987c();
      FUN_004094f6();
      unaff_ESI = main(*piVar7,argv);
      uVar3 = FUN_004027c5();
      if ((char)uVar3 != 0) {
        if (!bVar2) {
          FUN_004097c5();
        }
        ___scrt_uninitialize_crt(1,0);
LAB_004021aa:
        *in_FS_OFFSET = local_14;
        return unaff_ESI;
      }
      goto LAB_004021c1;
    }
  }
  FUN_004026a6(7);
LAB_004021c1:
  FUN_00409810(unaff_ESI);
  FUN_004097d4(local_24);
  pcVar1 = (code *)swi(3);
  UVar8 = (*pcVar1)();
  return UVar8;
}
void __cdecl FUN_004021da(_EXCEPTION_POINTERS *param_1)
{
  HANDLE hProcess;
  UINT uExitCode;
  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)0x0);
  UnhandledExceptionFilter(param_1);
  uExitCode = 0xc0000409;
  hProcess = GetCurrentProcess();
  TerminateProcess(hProcess,uExitCode);
  return;
}