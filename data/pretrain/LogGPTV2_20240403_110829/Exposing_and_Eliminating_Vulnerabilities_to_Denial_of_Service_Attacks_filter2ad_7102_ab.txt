important measures of bounding the number of messages
accepted in each round and using random ports. Thus, in
comparing the three protocols, we study the effectiveness
of combining push and pull operations under the assump-
tion that these other measures are used.
We begin by evaluating the effect that a range of DoS at-
tacks have on message latency using asymptotic mathemat-
ical analysis (in Section 6) and simulations (in Section 7).
Our simulation results exhibit the trends predicted by the
analysis.
In the full paper [1], we also present detailed
mathematical analysis, with results virtually identical to our
simulations.
For these evaluations, we make some simplifying as-
sumptions: We consider the propagation of a single mes-
sage M , and assume that M is never purged from any
process’s message buffer. We model the push operation
as performed without push-offers (in Drum and in Push).
We assume that the rounds are synchronized, and that the
message-delivery latency is smaller than half the gossip pe-
riod; thus, a process that sends a pull-request receives the
pull-reply in the same round. All of these assumptions
were made in previous analyses of gossip-based protocols,
e.g., [2, 8, 13, 16].
The analysis and simulations measure latency in terms of
gossip rounds: we measure M ’s propagation time, which is
the expected number of rounds it takes a given protocol to
propagate M to all (in the closed-form analysis) or to 99%
(in the simulations) of the correct processes. We chose a
threshold of 99% since M may fail to reach some of the
correct processes. Note that correct processes can be either
attacked or non-attacked. In both cases, they should be able
to send and receive messages.
Finally, we turn to measure actual performance on a clus-
ter of workstations (in Section 8), and measure the con-
sequences of DoS attacks not only on actual latency (in
msecs.), but also on the throughput of a real system, where
multiple messages are sent, and old messages are purged
from processes’ message buffers.
Attacks. In all of our evaluations, we stage various DoS
attacks. In each attack, the adversary focuses on a fraction
α of the processes (0  2−α
Proof. From Equations (5) and (6) we get that for all x,
· F pu.
Oa = I a > 1−α
Since pu is independent of x, the effective fan-ins and fan-
outs of all the processes are bounded from below by a con-
stant independent of x. Therefore, the propagation time is
inevitably bounded from above by a constant independent
of x.
Figure 1(a) in Section 7.1 illustrates this quality of Drum.
2
We now consider attacks where the adversary has a ﬁxed
F·n the attack strength
attacking power. We denote by c = B
divided by the total system capacity.
Lemma 2. For c > 5, Drum’s expected propagation time
is monotonically increasing with α.
Proof. We will show that all the processes’ effective fan-ins
and fan-outs are monotonically decreasing with α. That is,
dα  3
condition:
c  0.6 for all F ≥ 3. Since an attacked process
is sent at least x messages in a round, and accepts at most
F of them, we get the following coarse bound: pa  2
+ α
Thus, we require that 2
pu . This is al-
ready inferred from our previous result. The lemma follows
since pu > 0.6.
= F
αx
2α
c
F
αx
F
x
2
c
 0 a  0 1
Deﬁne h(y) = ln(1 + y) − y
By taking derivatives we get:
1+y − y
(cid:1)(y) = 1
h
(y+1)2 ) = y
1+y − ( 1
y  0.
Since h(0) = g(0) = 0, y > ln(1 + y) > y
1
y  0, ∀y > 0,
(y+1). Therefore,
We proceed to show that Push’s propagation time is lin-
ear in x.
Lemma 4. The expected propagation time to all processes
in Push is bounded from below by:
ln n − ln [(1 − α) n + 1]
ln (1 + F αpa)
Proof. We prove that the given bound holds even for the
case where initially all the non-attacked processes have M,
in addition to the source (which is attacked). The lemma
then follows immediately.
Let M(k) denote the expected number of processes that
have M at the beginning of round k. In round k, each pro-
cess having M sends it to F other processes. On average,
F α of those are attacked, and each attacked process re-
ceives the message with probability pa. Thus, we get the
coarse recursive bound M(k + 1) ≤ M(k) + M(k)· F αpa
with the initial condition M(0) = (1 − α)n + 1. Thus,
M(k) ≤ [(1 − α) n + 1] (1 + F αpa)k. M reaches all the
processes when M(k) ≥ n. The ﬁrst round number k that
satisﬁes this inequality is the required formula.
Corollary 1. Fix α and n > 1
Push increases at least linearly with x.
α . The propagation time of
Proof. Since α and n > 1
α are ﬁxed, the numerator in
Lemma 4 is a positive constant. Consider the denomina-
x). The
tor: since pa 
we show that 1(cid:3)p = Ω(x).
x3F −(x−F )3F . In the full paper [1]
x3F
Figure 1(a) illustrates this behavior of Pull.
7. Simulation Results
This section presents MATLAB simulations of the three
protocols under various DoS attack scenarios. We consider
a loss rate of 0.01 on all links and a fan-out of F = 4. We
assume that 10% of the processes are controlled by the ad-
versary and they do not propagate any valid messages. We
note that, according to our model, malicious group members
performing a DoS attack are equivalent to group members
suffering crash failures, and an externally-sourced DoS at-
tack of the same strength. In the full paper [1] we evaluate
the protocols without DoS attacks, and show that they are
highly robust to crash failures (cf. [9, 11]). Thus, control-
ling more group members does not grant the adversary with
a signiﬁcant advantage. We measure the propagation times
to the correct processes, both attacked and non-attacked.
Each data point is averaged over 1000 runs.
7.1. Targeted DoS Attacks
Figure 1 compares the time it takes M to reach 99% of
the correct processes for the three protocols under various
DoS attacks, with 120 and 1000 processes. Figure 1(a)
shows that when 10% of the processes are attacked, the
propagation time of both Push and Pull increases linearly
with the severity of the attack, while Drum’s propagation
time is unaffected by the attack strength. This is consistent
with the prediction of Lemmas 1 and 5 and Corollary 1.
Moreover, the three protocols perform virtually the same
without DoS attacks (see the leftmost data point). Fig-
ure 1(b) illustrates the propagation time as the percentage
of attacked processes (and thus B) increases. Although the
protocols exhibit similar trends, Drum propagates messages
faster than Push and Pull.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:04:10 UTC from IEEE Xplore.  Restrictions apply. 
Push, 1000
Push, 120
Pull, 1000
Pull, 120