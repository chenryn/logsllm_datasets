# Protocol State Fuzzing of TLS Implementations

## Authors
- Joeri de Ruiter, University of Birmingham
- Erik Poll, Radboud University Nijmegen

## Publication Information
- **Conference:** 24th USENIX Security Symposium
- **Dates:** August 12â€“14, 2015
- **Location:** Washington, D.C.
- **ISBN:** 978-1-939133-11-3
- **Open Access:** Sponsored by USENIX
- **Link:** [Proceedings](https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/de-ruiter)

## Abstract
This paper presents a largely automated and systematic analysis of TLS implementations through a technique called "protocol state fuzzing." We use state machine learning to infer state machines from protocol implementations using only black-box testing. The inferred state machines are then inspected for spurious behavior, which may indicate flaws in the program logic. Our approach is almost fully automatic: we automatically obtain state machines, and any spurious behavior is easily identifiable. However, determining whether the spurious behavior introduces exploitable security weaknesses requires manual investigation. We analyzed both server- and client-side implementations with a test harness supporting several key exchange algorithms and client certificate authentication. This method revealed new security flaws in three TLS implementations (GnuTLS, Java Secure Socket Extension, and OpenSSL), demonstrating that protocol state fuzzing is a useful technique for systematically analyzing security protocol implementations. Additionally, the unique state machines generated for each implementation can be used for fingerprinting TLS implementations.

## 1. Introduction
Transport Layer Security (TLS) is widely used to secure network connections, such as in HTTPS. Despite extensive research, TLS has been subject to various issues, including cryptographic attacks, implementation bugs, and timing attacks. To analyze TLS, a state machine can be used to specify possible sequences of messages. Using automated learning techniques, these state machines can be extracted from protocol implementations through black-box testing, a process we call "protocol state fuzzing."

By analyzing these state machines, logical flaws in the protocol flow can be discovered. For example, a flaw might involve accepting and processing a message to perform a security-sensitive action before authentication. The analysis of the state machines can be done manually or with a model checker. Both approaches require knowledge of the protocol to interpret results or specify requirements. In security protocols, every superfluous state or transition is undesirable and warrants closer inspection, which is typically easy to spot visually.

### 1.1 Related Work on TLS
Various formal methods have been used to analyze different parts and properties of the TLS protocol. However, these analyses focus on abstract descriptions rather than actual implementations, and many security problems with TLS have been due to implementation mistakes. Formally verified TLS implementations have been proposed to bridge this gap. Existing tools for analyzing TLS implementations mainly focus on fuzzing individual messages, particularly certificates, which have been a source of numerous security problems. Our approach complements these tools by targeting different aspects of the code and can guide message fuzzing by indicating interesting protocol states.

### 1.2 Related Work on State Machine Learning
State machine learning can be passive or active. Passive learning constructs models based on existing data, while active learning queries the implementation and constructs models based on responses. We have used active learning to analyze implementations of security protocols in EMV bank cards and handheld readers for online banking, providing insights into implementation variations and confirming known attacks.

### 1.3 Overview
We first discuss the TLS protocol in detail, followed by our setup for automated learning. We then present the results of our analysis of nine TLS implementations and conclude with a comparison of our work with related research.

## 2. The TLS Protocol
The TLS protocol, originally known as SSL, was developed at Netscape. SSL 1.0 was never released, and SSL 2.0 had numerous security flaws, leading to the development of SSL 3.0. After SSL 3.0, the name was changed to TLS, and currently, three versions are published: 1.0, 1.1, and 1.2. The specifications for these versions are published in RFCs by the Internet Engineering Task Force (IETF).

To establish a secure connection, TLS uses several subprotocols:
- **Handshake Protocol:** Establishes session keys and parameters and optionally authenticates the server and/or client.
- **ChangeCipherSpec Protocol:** Indicates the start of the use of established session keys.
- **Alert Protocol:** Sends alerts and notifications, specifying the alert level (warning or fatal) and a one-byte description.

Figure 1 shows a normal flow for a TLS session. The ClientHello message indicates the desired TLS version, supported cipher suites, and optional extensions. During the key exchange, a premaster secret is established, which is used to derive the master secret. This master secret is then used to derive the actual keys for encryption and MAC computation. Optionally, the key exchange can be followed by client verification. After the key exchange and optional client verification, a ChangeCipherSpec message is sent, and the Finished message concludes the handshake phase. Application data can then be exchanged over the established secure channel.

TLS also offers the possibility to add extensions to the protocol, such as the Heartbeat Extension, which can keep a connection alive using HeartbeatRequest and HeartbeatResponse messages.

## 3. State Machine Learning
### 3.1 Test Harness
To infer the state machines of TLS implementations, we used LearnLib, which employs a modified version of Angluin's L* algorithm. The System Under Test (SUT) is considered a black box, and LearnLib must be provided with a list of messages it can send to the SUT (the input alphabet) and a command to reset the SUT to its initial state. A test harness translates abstract messages from the input alphabet to concrete messages that can be sent to the SUT.

For server testing, we support messages such as ClientHello (RSA and DHE), Certificate (RSA and empty), ClientKeyExchange, ClientCertificateVerify, ChangeCipherSpec, Finished, ApplicationData (regular and empty), HeartbeatRequest, and HeartbeatResponse. For client testing, we support messages such as ServerHello (RSA and DHE), Certificate (RSA and empty), CertificateRequest, ServerKeyExchange, ServerHelloDone, ChangeCipherSpec, Finished, ApplicationData (regular and empty), HeartbeatRequest, and HeartbeatResponse.

Our test harness supports both TLS version 1.2 and, for older implementations, version 1.0. The input alphabet is configurable per analysis. The output alphabet includes all regular TLS messages, Alert protocol messages, and special symbols for exceptions like Empty, Decryption failed, and Connection closed.

LearnLib uses these abstract inputs and outputs as labels on the transitions of the state machine. The test harness translates abstract input messages to actual TLS packets and responses back to abstract responses. Given the use of cryptographic operations, we introduced state in our test harness to manage these operations.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.