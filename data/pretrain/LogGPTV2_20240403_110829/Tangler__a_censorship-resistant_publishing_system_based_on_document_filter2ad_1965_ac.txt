coefﬁcients of the polynomial are randomly chosen. So, for exam-
ple, if our secret was the element 6 ∈ Z11 and k equals 3 then an
appropriate polynomial would be y(x) = 7x2 + 4x + 6. To form
the n shares we evaluate this polynomial n times using n different
values of x. Each (x, y) pair formed from the evaluation of the
polynomial forms a share. Of course, the x value of a share must
never be 0 as that share would reveal the secret.
Performing interpolation on any of the k shares allows us to re-
form the polynomial. This polynomial can then be evaluated at
0, revealing the secret. Combining fewer than k shares, in this
manner, gives no hint as to the true value of the secret.
5.2 Entanglement
In our discussion of secret sharing we stated that each share con-
In our entanglement system the server
sisted of an (x, y) pair.
blocks play the role of the shares.
As you will recall, a ﬁle to be published is divided into ﬁxed
sized data blocks. The last data block may need to be padded to
achieve the ﬁxed size. We view each of these data blocks as a y
value. Since each share consists of an (x, y) pair we assign an x
value of zero to each of the data blocks. With this addition the data
block becomes a server block. Call the ﬁrst such server block f1.
We now randomly select b server blocks from the block pool. Each
of these pool blocks consists of an (x, y) pair. We then perform La-
grange interpolation on the b pool blocks and f1. This forms a poly-
nomial, p, of degree b. We can now evaluate p at different nonzero
integers to obtain new server blocks. Each new server block is of
the form (x, p(x)). We then store these new server blocks in the
block pool. One could conceivably store f1 in the block pool as
well, however in a censorship resistant system one would usually
not store this block as it consists of plaintext and therefore is an
easy target of the censor. The server blocks, being shares, give no
hint as to the content they have been entangled with.
This procedure must be done for every server block of the ﬁle
to be published. A data structure similar to that of an inode is
necessary to record which server blocks are needed to re-form the
original data blocks and therefore the published ﬁle. The Tangler
publish algorithm entangles the inode as well.
5.3 Reconstruction Algorithm
In order to reconstruct a data block of a ﬁle we need to retrieve
at least k of the appropriate shares. Any k of the n shares will
do. Lagrange interpolation is performed on these shares producing
polynomial p. Evaluation of this polynomial at zero produces the
server block corresponding to our original data block. By simply
stripping away the x value we are left with the original data block.
This is repeated for every data block of the ﬁle we wish to recon-
struct.
5.4
Implementation Issues
We have implemented the entanglement based publish and re-
construction algorithm in Java. The implementation shows that en-
tanglement does not impose a large performance penalty as several
optimizations are used to speed up what might otherwise be consid-
ered a somewhat costly computation. Our publish algorithm takes
as input the ﬁles to be entangled. Each ﬁle is divided into ﬁxed
sized data blocks. Each data block is converted into a server block
with x = 0 and then entangled with two random server blocks.
The polynomial formed from the entanglement is evaluated twice
to produce two additional server blocks. Essentially our publish al-
gorithm deﬁnes a secret sharing scheme with n = 4 and k = 3,
with the added feature that two of the four shares are also shares
of other blocks. The newly created server blocks are written to the
block pool, however we do not use these blocks in future entangle-
ments of the same ﬁle.
In our implementation each ﬁle to be published is divided into
data blocks of size 16K. Therefore each server block consists of
an x value and a 16K y value. Instead of simply performing inter-
polation on a large (16K) y value we treat each server block as a
collection of (x, y) pairs. Each pair has the same x value. The y
value is 2 bytes long which means that each server block consists of
a single x value and (1024 ∗ 16)/2 = 8192 y values. Interpolation
is performed on corresponding (x, y) pairs of each server block.
For example, the third (x, y) pair of each server block is interpo-
lated and evaluated to form the third (x, y) pair of one of the new
server blocks formed during the publication process. This process
is further described in the analysis section below. All interpolation
is done over the ﬁnite ﬁeld GF (216).
Our current java implementation can reconstruct ﬁles at a rate
of 600 KB/sec. Publishing incurs a fairly steep upfront cost be-
cause of block pool initialization and the use of the Java secure
random number generator, but the incremental cost of publishing
data scales linearly. Publishing a one megabyte ﬁle took 36 sec-
onds, a two megabyte ﬁle took 41 seconds and a ﬁve megabyte ﬁle
took 53 seconds.
5.5 Analysis
In a very basic sense entanglement and reconstruction consist of
a server block interpolation followed by evaluation of the associ-
ated polynomial. In this section we look at the cost, in terms of
interpolation, of the entanglement and reconstruction scheme.
Given a 16K data block, d, we entangle it to produce 4 shares,
any 3 of which determine d. Two of these four shares come directly
from the block pool. Data block d is ﬁrst converted into a server
block. The x value of this server block is 0 and the 16K data block
forms the 8192 y values. We perform Lagrange interpolation on
these three server blocks. Below is the Lagrange interpolation for-
mula [19] for the unique polynomial a(x) of degree at most t. The
value t is three in our scheme.
t(cid:1)
(cid:2)
a(x) =
yij
j=1
1≤k≤t,k(cid:2)=j
x − xik
xij − xik
131We must perform interpolation once for each (x, y) pair in the
server block. This means that we must perform interpolation (and
an evaluation) 8192 times per block. However, this operation can
be heavily optimized as the x value remains the same. Below we
show the computation necessary for interpolating three (x, y) pairs.
Let (x1, y1), (x2, y2) and (x3, y3) denote the three points to be in-
terpolated. Note (x1, y1) and (x2, y2) denote points in the two
public pool server blocks and (x3, y3) denotes the point from the
data block d. All arithmetic is done over the ﬁnite ﬁeld GF (216).
(cid:3)
(cid:4)(cid:3)
x − x3
x1 − x3
(cid:4)(cid:3)
x − x3
x2 − x3
(cid:4)(cid:3)
x − x2
x3 − x2
x − x2
x1 − x2
(cid:3)
x − x1
x2 − x1
(cid:3)
x − x1
x3 − x1
a(x) = y1
+ y2
+ y3
(cid:4)
(cid:4)
(cid:4)
The entanglement procedure produces two new server blocks.
Each new block is formed by evaluating a(x) 8192 times with x
assigned a random nonzero element from GF (216), generated at
the same time the server block was created. Notice that the x values
do not change, only the y values change. Therefore we only need
to compute the fractional x terms once per server block. Therefore
our interpolation is now reduced to three multiplications and three
additions— certainly not prohibitive. As the computation is done
over the ﬁnite ﬁeld GF (216) the addition and subtraction opera-
tions are the XOR operation. Multiplication and division consists
of three tabular lookups and one addition (for multiplication), or a
subtraction (for division). All relatively inexpensive operations.
The reconstruction algorithm also utilizes interpolation in ex-
In this case the polynomial is evaluated
actly the same manner.
once at zero. This evaluation reveals the secret (the data block).
5.5.1 Beneﬁts
Entanglement has three beneﬁcial consequences. The ﬁrst is that
it promotes the replication of blocks of previously published doc-
uments (the blocks in the pool). A publisher could easily generate
random, useless server blocks to entangle with, or else entangle ex-
clusively with blocks of his own previously published documents.
However, neither of these alternatives is as beneﬁcial as using the
blocks of documents published by others. If we assume that an in-
dividual who publishes a document has a direct interest in caching
and replicating it, then his actions are indirectly helping all docu-
ments entangled with it.
The second consequence is that each server block now “belongs”
to several documents—those documents that have become entan-
gled with the server block. This leads to the third consequence
of entanglement—incentive to store the server blocks published by
others. If a set of entangled blocks are necessary to reconstruct your
own document then you have some incentive to retain and replicate
these blocks.
5.5.2 Limitations
We believe the entanglement process provides several beneﬁts
and can be proﬁtably grafted onto many censorship-resistant sys-
tems. However the system is not perfect. Below we outline some
potential limitations of the technique.
Any censorship-resistant system incorporating entanglements will
need to build in some incentive for an individual to entangle with
unknown content. If all individuals only entangle with a few pop-
ular documents (e.g. The Declaration of Independence) then the
desired replication of other, lesser known, documents will not take
place.
Although the entanglement system does allow the reconstruction
of a ﬁle from server blocks produced by others, at least one server
block that the publisher has generated is required. As you will
recall, b blocks are chosen from the block pool and are entangled
with a data block from the ﬁle to be published. Several new server
blocks are then produced. At least one of these new server blocks
is needed to perform the interpolation required during document
reconstruction process.
If an adversary manages to delete all of
these newly created server blocks then the original ﬁle cannot be
reformed, even if all the original pool blocks are available.
6. TANGLER NETWORK
In this section, we propose a speciﬁc design for a Tangler net-
work. The network is a collection of block servers that accept
queries either for SHA-1 hashes or public keys and return cor-
responding blocks. The Tangler network protocol is intended to
complement the beneﬁts of entanglement. Speciﬁcally, while en-
tanglement makes replicating other people’s documents an inherent
part of publishing, the Tangler network protocol additionally makes
auditing servers’ behavior inherent to publishing. Thus, in the ordi-
nary course of events, a well-behaved server will very likely obtain
irrefutable evidence of any malicious server’s bad behavior. The
evidence can then be used to eject the bad server from the system.
One of the important goals of the Tangler network is to let the
system accept new servers without fully trusting them. The net-
work must therefore withstand misbehaving servers. Because bad
servers are quickly detected when they misbehave, the worst a bad
Tangler server can do is reduce the capacity of the system by what-
ever storage it is contributing. However, the protocol does not let
new servers consume storage during their ﬁrst month of operation.
Whatever capacity new servers provide only increases replication.
By the time a server can actually reduce the system’s capacity, it
must have been performing useful work for some time and thus will
have contributed more block-days of storage than it has consumed.
Moreover, if, after being ejected, a malicious server attempts to re-
join the system under a different identity, the server will actually
reverse what little damage it has inﬂicted by restoring lost capacity
to the system.
The Tangler model assumes a collection of servers around the
world, run by volunteers opposed to censorship. Users publish
documents by anonymously submitting server blocks to servers.
Blocks persist for a minimum of two weeks in the system, but must
be refreshed by users to persist indeﬁnitely. Each server has a long-
lived public key, used for authentication. Servers can communicate
with each other both directly and anonymously (using other servers
as a mix network [2]). Different servers may dedicate different
amounts of storage to Tangler, but each publicly certiﬁes its capac-
ity. There is a general consensus on the public keys and capacities
of available servers.
The list of servers is maintained using a standard group mem-
bership algorithm (e.g., [16]). Convincing other nodes of a server’s
corruption is straight-forward. Many forms of corruption result in
two contradictory messages digitally signed by the same server—a
succinct proof of the server’s misbehavior. The other main threat is
that a bad server will refuse to answer requests properly. When a
server fails to answer, the requester can forward its request through
any other server, enlisting that server as a witness. Any participat-
ing server can validate the response to any Tangler request. Thus,
the witness will either detect misbehavior or return a valid response
to the requester. All Tangler operations are idempotent, so if a wit-
ness is faulty, the requester can safely resend its request through a
different witness.
Each server has the right to consume other servers’ storage in
132proportion to its own capacity. This right is conferred by digitally
signed storage credits, good for the storage of one block for two
weeks from the date of the credit’s issue. Servers delegate the
credits they receive to users who wish to publish blocks. How a
server apportions its credits is entirely at the discretion of its opera-
tor. One server might introduce blocks in exchange for e-cash pay-
ments. Another might charge hashcash [1]. Another might charge
for publication in human time—posing challenges that could not be
answered by automatic “spamming” programs [13]. Alternatively,
a server might only accept blocks from particular pseudonyms, or
from members of the organization sponsoring the server. Whatever
the policies of individual servers, however, no server can inﬂuence
or limit how other servers dedicate their space.
The Tangler network hides the identity of the server whose credit
was used to introduce any particular block. In fact, servers may not
themselves know for which blocks their credits have been used. To
foil attempts to trace publication by trafﬁc analysis, new storage
credits all become available at the same time, once per day.
6.1 Block-to-server mapping
The Tangler network uses consistent hashing [10] to map blocks
to particular servers. The 160-bit output of the SHA-1 hash func-
tion is mapped onto points of a circle. Each server block is assigned
the point on the circle corresponding to the SHA-1 hash value of
its contents. Collection root blocks are assigned the point on the
circle corresponding to a hash of their public key. Each server is
also assigned a number of points on the circle proportional to its
stated capacity—for example one point per 100 MBytes of storage.
A server’s points are calculated from its public key, K, and the
number d of days since January 1, 1970. Server A with N points
and public key KA is assigned the values:
SHA-1 (KA,(cid:6)dN/14(cid:7)) , SHA-1 (KA,(cid:6)dN/14(cid:7) − 1) ,
. . . SHA-1 (KA,(cid:6)dN/14(cid:7) − (N − 1))
Thus, each day roughly 1/14 of a server’s points change. After two
weeks, a server has, with very high probability, entirely new points
on the circle.
Each block is stored on the servers immediately clockwise from
it on the SHA-1 circle. Figure 3 gives a simpliﬁed example, using
a 6-bit hash function. There are three servers in the example, A,
B, and C, each with four points on the circle. A block with hash
011001 is represented as a black triangle. Going clockwise from
the block’s position, we cross points belonging ﬁrst to server A,
then to server C. Thus, if we are replicating blocks twice, the block
will be stored on servers A and C.
Since server public keys and the day number are well-known in-
formation, anyone can compute the current set of points on the cir-
cle. To look up a block given its hash (or public key, for collection
roots), one must contact the server corresponding to that block’s
successor on the circle, trying subsequent points if the immediate
successor is unavailable, misbehaving, or simply does not have the
block. Even if a server is misbehaving or if there are slight incon-
sistencies in the list of known servers, the lookup algorithm will
very likely locate a replica of the block in question.
Note that it is up to users to publish blocks on the servers where
people will look for those blocks. Tangler does not prevent users
from publishing blocks elsewhere. However, since storage credits
are limited, it is in a user’s best interest to spend her credits wisely.
As server points move around the circle, users will need to repub-
lish server blocks. Since the duration of server points and storage
credits is both two weeks, we expect that the maintainer of a stable