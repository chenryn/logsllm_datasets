---
## Page 493
474漏洞战争：软件漏洞分析精要
图10-20small动态调试
10.3.3S0库动态调试
在APK包里，经常在lib目录下可以见到一些后级为so的动态链接库，它们一般都是用C/C++开发
的，属于ELF格式的linux程序。为了分析这些so库，我们得把IDA请出来，操作方法如下。
步骤一：通过以下命令启动待调试的程序，但使用前需要知道应用的主Activity，可通过逆向
AndroidManifest.xml获取，相对比较麻烦，最好的方式是使用图10-15所示的方法。
anstart-D-n包名/主Activity类名
步骤二：执行以下命令将IDA目录下的/dbgsrc/android_server复制到Android系统中，然后以Root
权限启动它，等转发端口完成后，再用IDA附加需要调试的进程。
adb push android_server /data/local/tmp/android_server
adb she11
chmod +x /data/1ocal/tmp/android_server
cd /data/1oca1/tmp/
su && ./android_server
adb forward tcp:23946 tcp:23946
---
## Page 494
第10章Android平台漏润分析475
步骤三：通过DDMS获取相应进程的调试端口号（默认大多为8700端口，如图10-18所示），然
后执行以下命令：
jdb -connect con.sun.jdi.SocketAttach:hostname=127.0.e.1,port=87e0
步骤四：连接成功后，在IDA上按F9键运行程序后，如图10-16所示的“WaitingForDebugger”
提示会自动消失，接下来就可以设置断点，比如JNI_Onload函数，可在IDA上按“Crl+S”组合键找
到对应so库的基址，然后加上JNI_Onload的文件偏移量（用IDA打开so库文件，找到JINI_Onload函数
地址再减去IDA加载基址后得到），即可找到JNI_Onload函数的内存地址，然后按F9键运行后即可断
下，如图10-21所示是笔者在调试国内某款知名Android加固壳时的截图。
50:5080
R5，-（_52-）
SP..1
图10-21动态调试Android链接库
10.3.4补丁源码比对
由于Android系统的开源性，允许
900
大家直接在线或者下载源码进行学习
 4o
4.4,1
70.17 08
和研究，这也为漏洞研究者提供了便
利，无论是在挖掘漏洞还是在分析漏洞
物
B buld
上都有帮助。但是Google并没有直接提
供源码压缩包进行下载，面是通过repo
A
命令下载，下载单个版本的系统文件大
anice
小达71GB（如图10-22所示），且速度
sdema
很慢，更为不幸的是，在国内是访问不
了Google等相关站点的，包括Android
20
源码官方站点，笔者用VPN下载一周才
名银名：
完成，有条件的读者可以直接挂国外服
4.4.r1
务器下载，一般几小时搞定。本节主要
28:
介绍的是静态源码分析，下载源码进行
调试及其他分析技巧会在后面的实例
图00
漏洞中介绍。
网上有很多Android源码在线阅读
图10-22Android系统源码
的站点，此处笔者推荐“Open Source Cross Reference网站，链接为http:/osxr.org/android/source/
---
## Page 495
476漏洞战争：软件漏洞分析精要
它支持关键字搜索及交叉参考（如图10-23所示），便于提高分析效率。如果是在Windows平台上的
用户，也可以在下载Android源码后用Sourcelnsight分析，关于该软件的用法在7.6.2节已介绍过。
Android Cross Reference
$4.1.2_-2/rs
图10-23Android源码交叉参考站点
如果要分析Android系统漏洞源码，其实还有个更便捷的方法，那就是直接分析官网的BUG列表
（htps://code.google.com/p/android/issues/list），可以找到修复前后的代码比对情况。比如著名的
zergRush提权漏洞，在Android Buglist上可以搜索到关于它的漏润描述，以及补丁源码对比，如图10-24
和图10-25所示。
android
B==
   2
漏润补丁代码对比
图10-24zergRush漏润
---
## Page 496
第10章Android平台漏润分析477
android
1081
atchdtAAK
390044
图10-25补丁源码比对
找到漏洞源码的位置，再结合图10-21介绍的站点，可以查看到完整的漏洞代码，然后做进一步
的详细分析，通过这种方式可以更快速地定位漏润成因。
10.3.5
系统Java源码调试
以在Mac系统上下载Android-4.4的源码为例，详细介绍操作过程。
（1）下载Android源码（笔者挂VPN下载一周，大小达70GB），
$ mkdir ~/bin
$ PATH=~/bin:SPATH
$ curl https://storage-googleapis.com/git-repo-downloads/repo > ~/bin/repo
$ chmod a+x ~/bin/repo
$ repo init -u https://android-googlesource.com/platform/manifest -b android-4.4_r1
$ repo sync
（2）下载完成后，复制/build/buildspec.mk.defiault到Android源码根目录，重命名为buildspec.mk，
并编辑添加以下内容，以确保WebKit是以Debug模式创建的：
DEBUG_MooULE_1ibwebcore:=true
DEBUG_MoDULE_11ibxm12:=true
TARGET_CUSToM_DEBUG_CFLAGS:=-Oθ -mlong-ca11s
---
## Page 497
478漏洞战争：软件漏洞分析精要
ADDITIONAL_BUILD_PROPERTIES += debug-db.uid=1eeeee
（3）创建不区分大小写的磁盘文件（Android要求在不区分大小写的文件系统下编译，而Mac
是区分大小写的，若用其他系统可能就不需要此步骤）：
hdiuti1 create -type SPARSE -fs 'Case-sensitive Journaled HFS+* -size 75g ~/android.dmg
（4）修改~.bash_profile，添加以下内容，以后就可以直接使用mountAndroid与umountAndroid
挂载/卸载Android磁盘文件了：
# mount the android file inage
ptoupue/saunton/ qugodqunou- allewrasuedsSup *ptoupue/~ qpepe antpu 3 proupuqunou uoqoun,
# unmount the android file inage
function umountAndroid()(hdiut11 detach/Volumes/android;)
挂载创建的磁盘，然后将前面下载的源码复制到里面：
$ mountAndroid
$ cp Andro1d-4.4_r1 /Volumes/andro1d/
& cd /Volumes/android/Android-4.4_r1
（5）执行以下命令设置环境变量，并开始编译：
slunch fu11-eng
$ source ./bui1d/envsetup.sh
$make-j2
编译成功后输出以下内容：
+ ENABLE_SPARSE_IMAGE=
.s-=ss8/p/o..+
[.9au-ge-sau-9，].+
+ SRC_DIR=out/target/product/generic/system
+*[′*1-d out/target/product/generic/system ]’
+
+ EXT_VARIANT=ext4
+MOUNT_POINT=System
+SIZE=576716880
+ FC=out/target/product/generic/root/file_contexts
+ case $EXT_VARIANT in
.[.uass z-.]. +
[.0899195 z-.].+
+‘['-n out/target/product/generic/root/file_contexts ']
+ FcopT='-s out/target/product/generic/root/file_contexts
---
## Page 498
第10章Android平台漏润分析479
-a system out/target/product/generic/obj/PACKAGING/systemimage_intermediates/systen.img
out/target/product/generic/system'
out/target/product/generic/obj/PACKAGING/systemimage_intermediates/systen.img
out/target/product/generic/system
out/target/product/generic/obj/PACKAGING/systemimage_intermediates/systen.ing
out/target/product/generic/system
out/target/product/generic/obj/PACKAGING/systemimage_intermediates/system.1mg
out/target/product/generic/system
Creating filesystem with parameters:
S1ze: 576716800
Block size:4096
Blocks per group: 32768
Inodes per group:7e4e
Inode size: 256
Journal blocks:22ee
Label:
Blocks:14e880
Block groups:5
Reserved block group size: 39
Created f11esystem with 1162/35208 inodes and 68154/140808 blocks
.[.eau-θ.].+
Install system fs 1mage: out/target/product/generic/system.img
reserve=5947392
编译成功后，整个目录大小达到86GB，如图10-26所示。
---
## Page 499
480漏洞战争：软件漏洞分析精要
DUTPUT_FILE=out/target/product/gever1c/ob}/PACKAGING/syse#age_1nteraediates/systee.ing
EKT_
rCrout/target/groduct/generic/root/fite_contexts
systes 1*
gut/tarat
r1c/root/ite_contexts -l 576716see a systes
neric/systen
S1ze:576716880
Stock si2e14095
Blocks
laodes
per
per
grom
7040
32768
Inode s1ze:250
Jourat Btocks:200
Latel:
e.1.
292x
9ZK
/toots/externat/rat32ts/src/sain/java.
/toots/ecternal/rat3ztit/src/sain/java/de
92
92
84
/toots/externat/fat32tsb/src
/tools/externat/fat32tib
/toots/externat/graste
/toots/etemat
./toots
855
u:ksk:MlacEook:/Wotumes/ahdreid/android-4.4_r15
图10-26Android源码编译成功
（5）启动编译后的模拟器，如图10-27所示。
rluskskgMacBook:/Volumes/android/android-4.4_r1$ echo SANDROID_PRODUCT_OUT
/Volumes/android/android-4.4_r1/out/target/product/generic
riusksk@MacBook:/Volumes/android/android-4.4_r1$ enulator
---
## Page 500
第10章Android平台漏润分析481
图10-27成功编译好的模拟器
在编译过程中可能会遇到以下错误。
(1)“SyntaxError: Unable to find any JNI methods for org/chromium/ui/Clipboard."*
【解决方法】主要是由于Mac上的cpp命令没有-fpreprocessed参数导致的错误，按图10-28所示修
改/base/androidjmi_generatorjmi_generator.py代码即可，或者直接删除里面的“-fpreprocessed”参数。
l4/p*4_gem
ir s
onport glatfors
1H4
t httg:/cade
Givep; or xaybe s
we cnale rwrite this script is 3ars
 - nbproceis.Pope(arg-['po','-fpneg
ad'1,
cp_p -[°o,-fr
[arpsoiPR_*rgi,
stfissstprecets,FDR,
tkoat+sabprocess
F)
图10-28删除里面的“-fpreprocessed”参数
---
## Page 501
482漏润战争：软件漏洞分析精要
（2）提示缺少Mac OSX10.x.sdk包，或者提示lcrt1.10.6.o链接库不存在：“ldlibrary:notlibrary
found notfor found-lcrt1.10.6.o"*
【解决方法】从https:/github.com/phracker/MacOSX-SDKs下载到相应版本的SDK包，推荐10.6
版本，然后将其放到以下自录：
riusksk@MacBook:/App1ications/Xcode.app/Contents/Developer/Platforms/Mac0Sx.platform/Develo
per/SDKs$ sudo svn checkout https://github.com/3u11aE1ch1er/Mac_05X_S0Ks/trunk/Mac05X1e.6.sdk
device)”*
【解决方法】执行以下命令扩充磁盘文件：
unmountAndroid
hdiutil resize -size g ~/android.dmg.sparseimage
下面正式开始进行Android Java源码的调试。
（1）将/developmcnt/ide/eclipse/.classpath复制到Android源码根目录，可以根据需要删除或注
释掉无须加载的目录，比如源码中的example与apps目录源码示例，可以避免一些无必要的错误。
-- >
-->
设置为Android源码根目录，加载过程可能会卡一会，等待完成即可。然后选择“Run”→“Debug
Configuration”选项，双击“Remote JavaApplication”选项然后设置名称与端口，system_process端
口默认为8600，如图10-29所示。
---
## Page 502
第10章Android平台漏润分析483
Debog
Creatt, managt, atd run configurations
toich to a -Jent
or4
?
图10-29调试配置
（3）导入项目可能会遇到一堆错误（如图10-30所示），主要还是缺少编译后的链接库导致的，
般是.classpath载入不完整导致的。
Proble
adoc B Dec
sot: IBl Task. Livt
18.283erors
toatyp
15t
gAcc
hed to a lype
图10-30错误提示
可以在buildpath中添加链接库，可根据错误逐步添加，如果不确定是哪个，就批量添加源码编
译后生成的out目录里面的jarlibjari或者classes.jar，如图10-31和图10-32所示。
---
## Page 503
漏洞战争：软件漏洞分析精要
目年