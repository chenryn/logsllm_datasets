### Advent of Programmable ASICs and FBOSS

With the advent of programmable Application-Specific Integrated Circuits (ASICs), we believe it will be beneficial for FBOSS to support these programmable ASICs [19] and the programming languages used to configure them, such as P4 [18].

### 10. Related Work

#### Existing Switch Software
There are various proprietary switch software implementations, often referred to as "Network OS," such as Cisco NX-OS [12] or Juniper JunOS [41]. However, FBOSS differs significantly from these. For example, FBOSS allows full access to the switch's Linux environment, providing users with the flexibility to run custom processes for management and configuration. In contrast, conventional switch software is generally accessed through proprietary interfaces.

Several open-source switch software solutions also run on Linux, including Open Network Linux (ONL) [30], OpenSwitch [11], Cumulus Linux [20], and Microsoft SONiC [33]. FBOSS is most comparable to SONiC: both were developed to meet the growing needs of data center networks and share similar architectural components, such as a hardware abstraction layer and state management module. A key difference is that FBOSS is not a separate Linux distribution but uses the same Linux OS and libraries as our large server fleet. This approach enables us to leverage best practices in monitoring, configuring, and deploying server software. The open-source community around switch software is growing, which bodes well for FBOSS.

Recent proposals have suggested eliminating switch software entirely [31, 51], offering new insights into the role of switch software and the future of data center switch design.

#### Centralized Network Control
In the context of the Software-Defined Networking (SDN) movement, many systems, such as [28, 34], aim to achieve centralized network control. While FBOSS relies on centralized configuration management and distributed BGP daemons, it is largely orthogonal to these efforts. Functionally, FBOSS is more comparable to software switches like Open vSwitch [44], even though the implementation and performance characteristics differ. Similar to how Open vSwitch uses OpenFlow, FBOSS's Thrift API can, in theory, interface with a central controller to provide SDN-like functionality.

#### Large-scale Software Deployment
FBOSSdeploy is influenced by other cloud-scale continuous integration frameworks that support continuous canary deployments, such as Chef [3], Jenkins [6], Travis CI [10], and Ansible [1]. Unlike these general-purpose frameworks, FBOSSdeploy is specifically designed for deploying switch software. It monitors the network during deployment and performs network-specific remediations. Additionally, FBOSSdeploy considers the global network topology when deploying the switch software.

#### Network Management Systems
Many network management systems are designed to interact with vendor-specific devices. For example, HP OpenView [23] provides interfaces to control various vendors' switches, and IBM Tivoli Netcool [29] handles real-time network events for efficient troubleshooting and diagnosis. OpenConfig [9] has recently proposed a unified, vendor-agnostic configuration interface. Instead of using a standardized management interface, FBOSS provides programmable APIs that can be integrated with other vendor-agnostic network management systems.

### 11. Conclusion

This paper presents a retrospective on five years of developing, deploying, operating, and open-sourcing switch software built for large-scale production data centers. We departed from conventional methods and adopted techniques widely used to ensure scalability and resiliency in general-purpose software. We created a set of modular abstractions, allowing the software to be flexible and not tied to specific features or hardware. We also developed a continuous deployment system that enables incremental and rapid changes, automatic testing, and safe, incremental deployment. Additionally, we built a custom management system for simpler configuration, monitoring, and operations. Our approach has provided significant benefits, enabling us to quickly and incrementally grow our network size and features while reducing software complexity.

### Acknowledgment

Many people in the Network Systems team at Facebook have contributed to FBOSS over the years and to this paper. We particularly acknowledge Sonja Keserovic, Srikanth Sundaresan, and Petr Lapukhov for their extensive help. We also thank Robert Soul√© and Nick McKeown for providing ideas to initiate the paper. We acknowledge Facebook for the resources provided. Finally, we are indebted to Omar Baldonado, our shepherd, Hitesh Ballani, and the anonymous SIGCOMM reviewers for their comments and suggestions on earlier drafts.

### References

[References remain the same as in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and structured.