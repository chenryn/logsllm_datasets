advent of programmable ASICs, we believe that it will be
useful for FBOSS to support programmable ASICs [19] and
the language to program these ASICs, such as P4 [18].
10 RELATED WORK
Existing Switch Software. There are various proprietary
switch software implementations, often referred to as “Net-
work OS”, such as Cisco NX-OS [12] or Juniper JunOS [41],
yet FBOSS is quite different from them. For example, FBOSS
allows full access to the switch Linux, giving users flexibility
to run custom processes for management or configuration.
In comparison, conventional switch software are generally
accessed through their own proprietary interfaces.
There is also various open-source switch software that
runs on Linux, such as Open Network Linux (ONL) [30],
OpenSwitch [11], Cumulus Linux [20] and Microsoft
SONiC [33]. FBOSS is probably most comparable to SONiC:
both as results of running switch software at scale to serve
ever increasing data center network needs, and with similar
architecture (hardware abstraction layer, state management
module, etc.). One major difference between SONiC and
FBOSS is that FBOSS is not a separate Linux distribution,
but using the same Linux OS and libraries in our large server
fleet. This allows us to truly reusing many best practices of
monitoring, configuring, and deploying for server software.
In general, open source communities around switch software
are starting grow, which is promising for FBOSS.
Finally, there are recent proposals to completely eliminate
switch software [31, 51] from a switch. They provide new
insights for the role of switch software and the future of data
center switch design.
Centralized Network Control. In the recent Software-
Defined Network (SDN) movement, many systems (e.g.,
[28, 34]), sometimes also referred to as “Network OS”, are
built to realize centralized network control. While we rely
on centralized configuration management and distributed
BGP daemons, FBOSS is largely orthogonal to these efforts.
By functionality, FBOSS’s is more comparable to software
switches such as Open vSwitch [44], even if the implemen-
tation and performance characteristics are quite different. In
fact, similar to how Open vSwitch uses OpenFlow, FBOSS’s
Thrift API, in theory, can interface with a central controller
to provide a more SDN-like functionality.
Large-scale Software Deployment. fbossdeploy is
influenced by other cloud scale [16] continuous integration
frameworks that support continuous canary [45]. Some no-
table examples are Chef [3], Jenkins [6], Travis CI [10] and
Ansible [1]. Contrary to other frameworks, fbossdeploy
is designed specifically for deploying switch software. It is
capable of monitoring the network to perform network spe-
cific remediations during the deployment process. In addition,
fbossdeploy can deploy the switch software in a manner
that considers the global network topology.
Network Management Systems. There are many network
management systems built to interact with vendor specific
devices. For example, HP OpenView [23] has interfaces to
control various vendors’ switches. IBM Tivoli Netcool [29]
handles various network events in real-time for efficient trou-
bleshooting and diagnosis. OpenConfig [9] recently proposed
a unified vendor-agnostic configuration interface. Instead of
using a standardized management interface, FBOSS provides
programmable APIs that can be integrated with other network
management systems that are vendor-agnostic.
11 CONCLUSION
This paper presents a retrospective on five years of develop-
ing, deploying, operating, and open sourcing switch software
built for large-scale production data centers. When building
and deploying our switch software, we departed from conven-
tional methods and adopted techniques widely used to ensure
scalability and resiliency for building and deploying general
purpose software. We built a set of modular abstractions that
allows the software to be not tied down to a specific set of
features or hardware. We built a continuous deployment sys-
tem that allows the software to be changed incrementally and
rapidly, tested automatically, and deployed incrementally and
safely. We built a custom management system that allows
for simpler configuration management, monitoring and op-
erations. Our approach has provided significant benefits that
enabled us to quickly and incrementally grow our network
size and features, while reducing software complexity.
ACKNOWLEDGMENT
Many people in the Network Systems team at Facebook
have contributed to FBOSS over the years and toward this
paper. In particular, we would like to acknowledge Sonja
Keserovic, Srikanth Sundaresan and Petr Lapukhov for the
extensive help with the paper. We also would like to thank
Robert Soulé and Nick McKeown for providing ideas to initi-
ate the paper. We would like to acknowledge Facebook for the
resource it provided for us. And finally, we are also indebted
to Omar Baldonado, our shepherd, Hitesh Ballani, as well as
the anonymous SIGCOMM reviewers for their comments and
suggestions on earlier drafts.
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
S. Choi et al.
REFERENCES
[1] [n. d.]. Ansible is Simple IT Automation. https://www.ansible.com/.
[2] [n. d.]. Apache Thrift. https://thrift.apache.org/.
[3] [n. d.]. Chef. https://www.chef.io/chef/.
[4] [n. d.]. FBOSS Open Source. https://github.com/facebook/fboss.
[5] [n. d.]. FBOSS Thrift Management Interface. https://github.com/
facebook/fboss/blob/master/fboss/agent/if/ctrl.thrift.
[6] [n. d.]. Jenkins. https://jenkins-ci.org/.
[7] [n. d.]. Kerberos: The Network Authentication Protocol. http://web.mit.
edu/kerberos/.
[8] [n.
d.].
Microsoft
showcases
Switch.
microsoft-showcases-the-azure-cloud-switch-acs/.
Cloud
https://azure.microsoft.com/en-us/blog/
the Azure
[9] [n. d.]. OpenConfig. https://github.com/openconfig/public.
[10] [n. d.]. Travis CI. https://travis-ci.org/.
[11] 2016. OpenSwitch. http://www.openswitch.net/.
[12] 2017. Cisco NX-OS Software. http://www.cisco.com/c/en/us/products/
ios-nx-os-software/nx-os-software/index.html.
[13] 2018. Facebook Open Routing Group. https://www.facebook.com/
groups/openr/about/.
[14] 2018. HwSwitch implementation for Mellanox Switch. https://github.
com/facebook/fboss/pull/67.
[15] Lior Abraham, John Allen, Oleksandr Barykin, Vinayak Borkar,
Bhuwan Chopra, Ciprian Gerea, Daniel Merl, Josh Metzler, David
Reiss, Subbu Subramanian, Janet L. Wiener, and Okay Zed. 2013.
Scuba: Diving into Data at Facebook. Proc. VLDB Endow. 6, 11 (Aug.
2013), 1057–1067. https://doi.org/10.14778/2536222.2536231
[16] Michael Armbrust, Armando Fox, Rean Griffith, Anthony D. Joseph,
Randy Katz, Andy Konwinski, Gunho Lee, David Patterson, Ariel
Rabkin, Ion Stoica, and Matei Zaharia. 2010. A View of Cloud
Computing. Commun. ACM 53, 4 (April 2010), 50–58.
https:
//doi.org/10.1145/1721654.1721672
[17] Randy Bias. 2016. The History of Pets vs Cattle and How to Use
the Analogy Properly. http://cloudscaling.com/blog/cloud-computing/
the-history-of-pets-vs-cattle/.
[18] Pat Bosshart, Dan Daly, Glen Gibb, Martin Izzard, Nick McKeown,
Jennifer Rexford, Cole Schlesinger, Dan Talayco, Amin Vahdat, George
Varghese, and David Walker. 2014. P4: Programming Protocol-
independent Packet Processors. SIGCOMM Comput. Commun. Rev. 44,
3 (July 2014), 87–95. https://doi.org/10.1145/2656877.2656890
[19] Pat Bosshart, Glen Gibb, Hun-Seok Kim, George Varghese, Nick McK-
eown, Martin Izzard, Fernando Mujica, and Mark Horowitz. 2013. For-
warding Metamorphosis: Fast Programmable Match-Action Processing
in Hardware for SDN. In SIGCOMM Conference on Applications, Tech-
nologies, Architectures, and Protocols for Computer Communication
(SIGCOMM). 99–110. http://doi.acm.org/10.1145/2486001.2486011
[20] Cumulus. [n. d.]. Cumulus Linux. https://cumulusnetworks.com/
products/cumulus-linux/.
[21] Harrington D., R. Presuhn, and Wijnen B. 2002. An Architecture for De-
scribing Simple Network Management Protocol (SNMP) Management
Frameworks. https://tools.ietf.org/html/rfc4862.
[22] Sebastian Elbaum, Gregg Rothermel, and John Penix. 2014. Tech-
niques for Improving Regression Testing in Continuous Integration
Development Environments. In Proceedings of the 22Nd ACM SIG-
SOFT International Symposium on Foundations of Software Engi-
neering (FSE 2014). ACM, New York, NY, USA, 235–245. https:
//doi.org/10.1145/2635868.2635910
[23] HP Enterprise. [n. d.]. HP Openview. https://software.microfocus.com/
en-us/products/application-lifecycle-management/overview.
[24] Facebook. 2017. Wedge 100S 32x100G Specification. http://www.
opencompute.org/products/facebook-wedge-100s-32x100g/.
[25] Tian Fang. 2015. Introducing OpenBMC: an open software framework
for next-generation system management. https://code.facebook.com/
posts/1601610310055392.
[26] A. Farrel, J.-P. Vasseur, and J. Ash. 2006. A Path Computation Element
(PCE)-Based Architecture. Technical Report. Internet Engineering Task
Force.
[27] Phillipa Gill, Navendu Jain, and Nachiappan Nagappan. 2011. Un-
derstanding Network Failures in Data Centers: Measurement, Anal-
ysis, and Implications. In Proceedings of the ACM SIGCOMM 2011
Conference (SIGCOMM ’11). ACM, New York, NY, USA, 350–361.
https://doi.org/10.1145/2018436.2018477
[28] Natasha Gude, Teemu Koponen, Justin Pettit, Ben Pfaff, Martín Casado,
Nick McKeown, and Scott Shenker. 2008. NOX: Towards an Operating
System for Networks. SIGCOMM Comput. Commun. Rev. 38, 3 (July
2008), 105–110. https://doi.org/10.1145/1384609.1384625
[29] IBM. [n. d.]. Tivoli Netcool/OMNIbus. https://www-03.ibm.com/
software/products/en/ibmtivolinetcoolomnibus.
[30] Big Switch Networks Inc. 2013. Open Network Linux.
https:
//opennetlinux.org/.
[31] Xin Jin, Nathan Farrington, and Jennifer Rexford. 2016. Your Data
Center Switch is Trying Too Hard. In Proceedings of the Symposium
on SDN Research (SOSR ’16). ACM, New York, NY, USA, Article 12,
6 pages. https://doi.org/10.1145/2890955.2890967
[32] D Joachimpillai and JH Salim. 2004. Forwarding and Control Element
Separation (forces). https://datatracker.ietf.org/wg/forces/about/.
[33] Yousef Khalidi. 2017. SONiC: The networking switch software that
powers the Microsoft Global Cloud. https://azure.github.io/SONiC/.
[34] Teemu Koponen, Martin Casado, Natasha Gude, Jeremy Stribling, Leon
Poutievski, Min Zhu, Rajiv Ramanathan, Yuichiro Iwata, Hiroaki Inoue,
Takayuki Hama, and Scott Shenker. 2010. Onix: A Distributed Control
Platform for Large-scale Production Networks. In Proceedings of the
9th USENIX Conference on Operating Systems Design and Implemen-
tation (OSDI’10). USENIX Association, Berkeley, CA, USA, 351–364.
http://dl.acm.org/citation.cfm?id=1924943.1924968
[35] David L. Tennenhouse and David J. Wetherall. 2000. Towards an Active
Network Architecture. 26 (07 2000), 14.
[36] P. Lapukhov, A. Premji, and Mitchell J. 2016. Use of BGP for Routing
in Large-Scale Data Centers. https://tools.ietf.org/html/rfc7938.
[37] Ville Lauriokari. 2009. Copy-On-Write 101. https://hackerboss.com/
copy-on-write-101-part-1-what-is-it/.
[38] K. Lougheed, Cisco Systems, and Y. Rkhter. 1989. A Border Gateway
Protocol (BGP). https://tools.ietf.org/html/rfc1105.
[39] R. P. Luijten, A. Doering, and S. Paredes. 2014. Dual function heat-
spreading and performance of the IBM/ASTRON DOME 64-bit mi-
croserver demonstrator. In 2014 IEEE International Conference on
IC Design Technology. 1–4.
https://doi.org/10.1109/ICICDT.2014.
6838613
[40] Nick McKeown, Tom Anderson, Hari Balakrishnan, Guru Parulkar,
Larry Peterson, Jennifer Rexford, Scott Shenker, and Jonathan Turner.
2008. OpenFlow: Enabling Innovation in Campus Networks. SIG-
COMM Comput. Commun. Rev. 38, 2 (March 2008), 69–74. https:
//doi.org/10.1145/1355734.1355746
[41] Juniper Networks. 2017. Junos OS. https://www.juniper.net/us/en/
products-services/nos/junos/.
[42] Tuomas Pelkonen, Scott Franklin, Justin Teller, Paul Cavallaro, Qi
Huang, Justin Meza, and Kaushik Veeraraghavan. 2015. Gorilla: A Fast,
Scalable, In-memory Time Series Database. Proc. VLDB Endow. 8, 12
(Aug. 2015), 1816–1827. https://doi.org/10.14778/2824032.2824078
[43] A.D. Persson, C.A.C. Marcondes, and D.P. Johnson. 2013. Method
and system for network stack tuning. https://www.google.ch/patents/
US8467390 US Patent 8,467,390.
FBOSS: Building Switch Software at Scale
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
[44] Ben Pfaff, Justin Pettit, Teemu Koponen, Ethan Jackson, Andy Zhou,
Jarno Rajahalme, Jesse Gross, Alex Wang, Joe Stringer, Pravin Shelar,
Keith Amidon, and Martin Casado. 2015. The Design and Implemen-
tation of Open vSwitch. In 12th USENIX Symposium on Networked
Systems Design and Implementation (NSDI 15). USENIX Association,
Oakland, CA, 117–130. https://www.usenix.org/conference/nsdi15/
technical-sessions/presentation/pfaff
[45] Danilo Sato. 2014. Canary Release. https://martinfowler.com/bliki/
CanaryRelease.html.
[46] Brandon Schlinker, Hyojeong Kim, Timothy Cui, Ethan Katz-Bassett,
Harsha V. Madhyastha, Italo Cunha, James Quinn, Saif Hasan, Petr
Lapukhov, and Hongyi Zeng. 2017. Engineering Egress with Edge
Fabric: Steering Oceans of Content to the World. In Proceedings of the
ACM SIGCOMM 2017 Conference (SIGCOMM ’17). ACM, New York,
NY, USA, 418–431. https://doi.org/10.1145/3098822.3098853
[47] Arjun Singh, Joon Ong, Amit Agarwal, Glen Anderson, Ashby Armis-
tead, Roy Bannon, Seb Boving, Gaurav Desai, Bob Felderman, Paulie
Germano, Anand Kanagala, Jeff Provost, Jason Simmons, Eiichi Tanda,
Jim Wanderer, Urs Hölzle, Stephen Stuart, and Amin Vahdat. 2015.
Jupiter Rising: A Decade of Clos Topologies and Centralized Control in
Google’s Datacenter Network. SIGCOMM Comput. Commun. Rev. 45,
4 (Aug. 2015), 183–197. https://doi.org/10.1145/2829988.2787508
[48] Yu-Wei Eric Sung, Xiaozheng Tie, Starsky H.Y. Wong, and Hongyi
Zeng. 2016. Robotron: Top-down Network Management at Face-
book Scale. In Proceedings of the ACM SIGCOMM 2016 Confer-
ence (SIGCOMM ’16). ACM, New York, NY, USA, 426–439. https:
//doi.org/10.1145/2934872.2934874
[49] David Szabados. 2017. Broadcom Ships Tomahawk 3, Industry’s
Highest Bandwidth Ethernet Switch Chip at 12.8 Terabits per Sec-
ond.
http://investors.broadcom.com/phoenix.zhtml?c=203541&p=
irol-newsArticle&ID=2323373.
[50] S Thomson, Narten T., and Jinmei T. 2007. IPv6 Stateless Address
Autoconfiguration. https://tools.ietf.org/html/rfc4862.
[51] F. Wang, L. Gao, S. Xiaozhe, H. Harai, and K. Fujikawa. 2017. Towards
reliable and lightweight source switching for datacenter networks. In
IEEE INFOCOM 2017 - IEEE Conference on Computer Communica-
tions. 1–9. https://doi.org/10.1109/INFOCOM.2017.8057152
[52] Jun Xiao. 2017. New Approach to OVS Datapath Performance. http:
//openvswitch.org/support/boston2017/1530-jun-xiao.pdf.
[53] Xilinx. [n. d.]. Lightweight Ethernet Switch. https://www.xilinx.
com/applications/wireless-communications/wireless-connectivity/
lightweight-ethernet-switch.html.