*   将`PatchStrategicMerge`策略与一个`patch.yaml`文件和一个 Kustomization 文件一起使用。
*   将`JSONPatch`策略与一个`patch.yaml`文件和一个 Kustomization 文件一起使用。
让我们从使用一个专门修补 YAML 的 Kustomization 文件开始。
### 直接在自定义文件中指定更改
如果我们想直接在 Kustomization 文件中指定更改，我们可以这样做，但是我们的选项有些有限。我们可以用于 Kustomization 文件的密钥类型如下:
*   `resources`–指定应用补丁时要自定义哪些文件
*   `transformers`–从 Kustomization 文件中直接应用补丁的方法
*   `generators`–从 Kustomization 文件创建新资源的方法
*   `meta`–设置可以影响生成器、转换器和资源的元数据字段
如果我们想在我们的 Kustomization 文件中指定直接补丁，我们需要使用转换器。前面提到的`PatchStrategicMerge`和`JSONPatch`合并策略是两种类型的变压器。但是，要将更改直接应用到 Kustomization 文件，我们可以使用几个变形金刚中的一个，包括`commonLabels`、`images`、`namePrefix`和`nameSuffix`。
在下面的 Kustomization 文件中，我们将使用`commonLabels`和`images`变压器对初始部署`YAML`进行更改。
部署-kustomization-1.yaml:
```
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- deployment.yaml
namespace: default
commonLabels:
  app: frontend-app
images:
  - name: frontend-myapp
    newTag: 2.0.0
    newName: frontend-app-1
```
这个特殊的`Kustomization.yaml`文件将映像标签从`1.0.0`更新为`2.0.0`，将应用的名称从`frontend-myapp`更新为`frontend-app`，并将容器的名称从`frontend-myapp`更新为`frontend-app-1`。
要了解每台变压器的详细情况，您可以查看位于[https://kubernetes-sigs.github.io/kustomize/](https://kubernetes-sigs.github.io/kustomize/)的库斯托米兹医生。Kustomize 文件假设`deployment.yaml`与自身在同一个文件夹中。
要查看将 Kustomize 文件应用于部署时的结果，我们可以使用 Kustomize CLI 工具。我们将使用以下命令来生成 kustomized 输出:
```
kustomize build deployment-kustomization1.yaml
```
该命令将给出以下输出:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-myapp
  labels:
    app: frontend-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: frontend-app-1
        image: myrepo/myapp:2.0.0
        ports:
        - containerPort: 80
```
如您所见，我们的 Kustomization 文件中的定制已经应用。因为一个`kustomize build`命令输出 Kubernetes YAML，我们可以很容易地将输出部署到 Kubernetes，如下所示:
```
kustomize build deployment-kustomization.yaml | kubectl apply -f -
```
接下来，让我们看看如何使用带有`PatchStrategicMerge`的 YAML 文件来修补我们的部署。
### 使用补丁策略合并指定更改
为了说明的一个`PatchStrategicMerge`策略，我们再次从我们相同的`deployment.yaml`文件开始。这一次，我们将通过`kustomization.yaml`文件和`patch.yaml`文件的组合发布我们的更改。
首先，让我们创建我们的`kustomization.yaml`文件，如下所示:
部署-kustomization-2.yaml:
```
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- deployment.yaml
namespace: default
patchesStrategicMerge:
  - deployment-patch-1.yaml
```
如您所见，我们的 Kustomization 文件在`patchesStrategicMerge`部分引用了一个新文件`deployment-patch-1.yaml`。这里可以添加任意数量的 YAML 补丁文件。
然后，我们的`deployment-patch-1.yaml`文件是一个简单的文件，它反映了我们打算进行的更改的部署。这是它的样子:
部署-补丁-1.yaml:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-myapp
  labels:
    app: frontend-myapp
spec:
  replicas: 4
```
此修补程序文件是原始部署中字段的子集。在这种情况下，它只是将`replicas`从`2`更新为`4`。同样，要应用更改，我们可以使用以下命令:
```
 kustomize build deployment-kustomization2.yaml
```
但是，我们也可以在`kubectl`命令中使用`-k`标志！事情是这样的:
```
Kubectl apply -k deployment-kustomization2.yaml
```
该命令相当于以下命令:
```
kustomize build deployment-kustomization2.yaml | kubectl apply -f -
```
类似于`PatchStrategicMerge`，我们也可以在我们的 Kustomization 中指定基于 JSON 的补丁——让我们现在来看看。
### 使用 JSONPatch 指定更改
要用 JSON 补丁文件指定更改，过程与涉及 YAML 补丁的过程非常相似。
首先，我们需要我们的 Kustomization 文件。看起来是这样的:
部署-kustomization-3.yaml:
```
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- deployment.yaml
namespace: default
patches:
- path: deployment-patch-2.json
  target:
    group: apps
    version: v1
    kind: Deployment
    name: frontend-myapp
```
如您所见，我们的 Kustomize 文件有一个部分，`patches`，它引用了一个 JSON 补丁文件和一个目标。在本节中，您可以引用任意多的 JSON 补丁。`target`用于确定资源部分指定的哪个 Kubernetes 资源将接收补丁。
最后，我们需要我们的补丁 JSON 本身，如下所示:
部署-补丁-2.json:
```
[
  {
   "op": "replace",
   "path": "/spec/template/spec/containers/0/name",
   "value": "frontend-myreplacedapp"
  }
]
```
该补丁应用后，将对我们第一个容器的名称执行`replace`操作。您可以沿着我们原始的`deployment.yaml`文件的路径查看它是否引用了第一个容器的名称。它会用新值`frontend-myreplacedapp`替换这个名称。
现在，我们已经在 Kubernetes 资源模板化以及 Kustomize 和 Helm 的发布方面有了坚实的基础，我们可以转向 Kubernetes 的自动化部署。在下一节中，我们将研究用 Kubernetes 实现 CI/CD 的两种模式。
# 了解集群内和集群外 Kubernetes 上的 CI/CD 范例
对 Kubernetes 的持续集成和部署可以采取多种形式。
大多数 DevOps 工程师都会熟悉詹金斯、TravisCI 等工具。这些工具非常相似，因为它们提供了一个执行环境来构建应用、执行测试以及在受控环境中调用任意的 Bash 脚本。其中一些工具在容器中运行命令，而另一些则不运行。
说到 Kubernetes，在如何以及在哪里使用这些工具方面有多种学派。还有一种更新的 CI/CD 平台，它与 Kubernetes 原语的耦合要紧密得多，而且许多都是为在集群本身上运行而设计的。
为了彻底讨论工具如何与 Kubernetes 相关，我们将把我们的管道分成两个逻辑步骤:
1.  **构建**:编译、测试应用、构建容器映像并发送到映像存储库
2.  **部署**:通过 Kubernetes、Helm 或其他工具更新 Kubernetes 资源
出于本书的目的，我们将主要关注第二个以部署为中心的步骤。虽然许多可用的选项都处理构建和部署步骤，但是构建步骤几乎可以在任何地方发生，不值得我们在一本关于 Kubernetes 的细节的书中关注。
考虑到这一点，为了讨论我们的工具选项，我们将把我们的工具集分成两类，直到管道的部署部分:
*   群集外配置项/光盘
*   集群内配置项/光盘
## 簇外置信区间/置信区间
在第一个模式中，我们的 CI/CD 工具在目标 Kubernetes 集群之外运行。我们称之为集群外配置项/光盘。有一个灰色区域，该工具可能在一个单独的 Kubernetes 集群中运行，该集群专注于 CI/CD，但我们现在将忽略该选项，因为这两个类别之间的差异仍然主要有效。
您经常会发现像 Jenkins 这样的行业标准工具与这种模式一起使用，但是任何能够以安全的方式运行脚本和保留密钥的 CI 工具都可以在这里工作。几个例子是**git lab CI**`,`**circle CI****TravisCI****GitHub Actions****AWS CodeBuild**。Helm 也是这种模式的一大部分，因为集群外 CI 脚本可以调用 Helm 命令来代替 kubectl。
这种模式的一些优势在于它的简单性和可扩展性。这是一种基于`push`的模式，其中代码的变化同步触发 Kubernetes 工作负载的变化。
集群外 CI/CD 的一些弱点是在推送到许多集群时的可扩展性，以及需要将集群凭证保留在 CI/CD 管道中，以便它能够调用 kubectl 或 Helm 命令。
## 簇内置信区间/置信区间
在第二种模式中，我们的工具运行在我们的应用运行的同一个集群上，这意味着 CI/CD 发生在与我们的应用相同的 Kubernetes 上下文中，作为 pods。我们称之为集群内配置项/光盘。这种集群内模式仍然可以让“构建”步骤发生在集群外部，但是部署步骤发生在集群内部。
自 Kubernetes 发布以来，这些类型的工具越来越受欢迎，许多工具使用自定义资源定义和自定义控制器来完成它们的工作。例如 **FluxCD** 、 **Argo CD** 、 **JenkinsX** 和 **Tekton Pipelines** 。 **GitOps** 模式在这些工具中很受欢迎，在这种模式中，Git 存储库被用作集群上应该运行的应用的真实来源。
集群内 CI/CD 模式的一些优势是可伸缩性和安全性。通过让集群通过 GitOps 操作模型从 GitHub“拉”出变更，解决方案可以扩展到许多集群。此外，它消除了在配置项/光盘系统中保留强大的集群凭据的需要，而不是在集群本身上拥有 GitHub 凭据，从安全角度来看，这可能会好得多。
集群内 CI/CD 模式的缺点包括复杂性，因为这种基于拉的操作略微异步(因为`git pull`通常发生在循环上，而不总是在推送更改时准确发生)。
# 用 Kubernetes 实现簇内和簇外 CI/CD
既然有这么多的 CI/CD 和 Kubernetes 的选项，我们就选择两个选项，逐个实现，这样你就可以比较它们的特征集了。首先，我们将在 AWS CodeBuild 上实现 CI/CD 到 Kubernetes，这是一个很好的示例实现，可以在任何可以运行 Bash 脚本的外部 CI 系统上重用，包括 Bitbucket Pipelines、Jenkins 等。然后，我们将继续讨论 FluxCD，这是一个基于集群内 GitOps 的 CI 选项，是 Kubernetes 本地的。让我们从外部选项开始。
## 用 AWS 代码构建实现 Kubernetes CI
正如前面提到的，我们的 AWS CodeBuild CI 实现将很容易在任何基于脚本的 CI 系统中复制。在许多情况下，我们将使用的管道 YAML 定义几乎相同。同样，正如我们之前讨论的，我们将跳过容器映像的实际构建。相反，我们将关注实际的部署部分。
为了快速介绍 AWS CodeBuild，它是一个基于脚本的 CI 工具，运行 Bash 脚本，就像许多其他类似的工具一样。在高级工具 AWS CodePipeline 的上下文中，多个独立的 AWS CodeBuild 步骤可以组合成更大的管道。
在我们的示例中，我们将同时使用 AWS 代码构建和 AWS 代码管道。我们将不深入讨论如何使用这两个工具，而是将我们的讨论与如何使用它们来部署到 Kubernetes 保持特定的联系。