title:Postmortem Program Analysis with Hardware-Enhanced Post-Crash Artifacts
author:Jun Xu and
Dongliang Mu and
Xinyu Xing and
Peng Liu and
Ping Chen and
Bing Mao
Postmortem Program Analysis with  
Hardware-Enhanced Post-Crash Artifacts
Jun Xu, The Pennsylvania State University; Dongliang Mu, Nanjing University; Xinyu Xing, 
Peng Liu, and Ping Chen, The Pennsylvania State University; Bing Mao, Nanjing University
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/xu-jun
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXPOMP: Postmortem Program Analysis with
Hardware-Enhanced Post-Crash Artifacts
Jun Xu†, Dongliang Mu‡†, Xinyu Xing†, Peng Liu†, Ping Chen†, and Bing Mao‡
†College of Information Sciences and Technology, The Pennsylvania State University
‡State Key Laboratory for Novel Software Technology, Department of Computer Science and
{jxx13,dzm77,xxing, pliu, pzc10}@ist.psu.edu, {maobing}@nju.edu.cn
Technology, Nanjing University
Abstract
While a core dump carries a large amount of infor-
mation, it barely serves as informative debugging aids
in locating software faults because it carries information
that indicates only a partial chronology of how program
reached a crash site. Recently, this situation has been
signiﬁcantly improved. With the emergence of hardware-
assisted processor tracing, software developers and secu-
rity analysts can trace program execution and integrate
them into a core dump. In comparison with an ordinary
core dump, the new post-crash artifact provides software
developers and security analysts with more clues as to a
program crash. To use it for failure diagnosis, however, it
still requires strenuous manual efforts.
In this work, we propose POMP, an automated tool to
facilitate the analysis of post-crash artifacts. More specif-
ically, POMP introduces a new reverse execution mecha-
nism to construct the data ﬂow that a program followed
prior to its crash. By using the data ﬂow, POMP then
performs backward taint analysis and highlights those
program statements that actually contribute to the crash.
To demonstrate its effectiveness in pinpointing program
statements truly pertaining to a program crash, we have
implemented POMP for Linux system on x86-32 platform,
and tested it against various program crashes resulting
from 31 distinct real-world security vulnerabilities. We
show that, POMP can accurately and efﬁciently pinpoint
program statements that truly pertain to the crashes, mak-
ing failure diagnosis signiﬁcantly convenient.
1
Introduction
Despite the best efforts of software developers, software
inevitably contains defects. When they are triggered, a
program typically crashes or otherwise terminates ab-
normally. To track down the root cause of a software
crash, software developers and security analysts need to
identify those program statements pertaining to the crash,
analyze these statements and eventually ﬁgure out why
a bad value (such as an invalid pointer) was passed to
the crash site. In general, this procedure can be signif-
icantly facilitated (and even automated) if both control
and data ﬂows are given. As such, the research on post-
mortem program analysis primarily focuses on ﬁnding
out control and data ﬂows of crashing programs. Of
all techniques on postmortem program analysis, record-
and-replay (e.g., [10, 12, 14]) and core dump analysis
(e.g., [16, 26, 36]) are most common.
Record-and-replay is a technique that typically instru-
ments a program so that one can automatically log non-
deterministic events (i. e., the input to a program as well
as the memory access interleavings of the threads) and
later utilize the log to replay the program deterministically.
In theory, this technique would signiﬁcantly beneﬁt root
cause diagnosis of crashing programs because develop-
ers and security analysts can fully reconstruct the control
and data ﬂows prior to a crash. In practice, it however is
not widely adopted due to the requirement of program in-
strumentation and the high overhead it introduces during
normal operations.
In comparison with record-and-reply, core dump analy-
sis is a lightweight technique for the diagnosis of program
crashes. It does not require program instrumentation, nor
rely upon the log of program execution. Rather, it facil-
itates program failure diagnosis by using more generic
information, i. e., the core dump that an operating system
automatically captures every time a process has crashed.
However, a core dump provides only a snapshot of the
failure, from which core dump analysis techniques can
infer only partial control and data ﬂows pertaining to pro-
gram crashes. Presumably as such, they have not been
treated as the ﬁrst choice for software debugging.
Recently, the advance in hardware-assisted processor
tracing signiﬁcantly ameliorates this situation. With the
emergence of Intel PT [6] – a brand new hardware feature
in Intel CPUs – software developers and security ana-
lysts can trace instructions executed and save them in a
USENIX Association
26th USENIX Security Symposium    17
circular buffer. At the time of a program crash, an oper-
ating system includes the trace into a core dump. Since
this post-crash artifact contains both the state of crashing
memory and the execution history, software developers
not only can inspect the program state at the time of the
crash, but also fully reconstruct the control ﬂow that led to
the crash, making software debugging more informative
and efﬁcient.
While Intel PT augments software developers with the
ability of obtaining more informative clues as to a soft-
ware crash, to use it for the root cause diagnosis of soft-
ware failures, it is still time consuming and requires a
lot of manual efforts. As we will discuss in Section 2,
a post-crash artifact1 typically contains a large amount
of instructions. Even though it carries execution history
that allows one to fully reconstruct the control ﬂow that a
crashing program followed – without an automated tool
to eliminate those instructions not pertaining to the fail-
ure – software developers and security analysts still need
to manually examine each instruction in an artifact and
identify those that actually contribute to the crash.
To address this problem, recent research [22] has pro-
posed a technical approach to identify program statements
that pertain to a software failure. Technically speaking,
it combines static program analysis with a cooperative
and adaptive form of dynamic program analysis that uses
Intel PT. While shown to be effective in facilitating failure
diagnosis, particularly those caused by concurrency bugs,
this technique is less likely to be effective in analyzing
crashes resulting from memory corruption vulnerabilities
(e.g. buffer overﬂow or use after free). This is due to
the fact that a memory corruption vulnerability allows an
attacker to manipulate the control (or data) ﬂow, whereas
the static program analysis heavily relies upon the as-
sumption that program execution does not violate control
nor data ﬂow integrity. Given that the technique proposed
in [22] needs to track data ﬂow using hardware watch-
points in a collaborative manner, this technique is also less
suitable to the situation where program crashes cannot be
easily collected in a crowd-sourcing manner.
In this work, we design and develop POMP, a new auto-
mated tool that analyzes a post-crash artifact and pinpoints
statements pertaining to the crash. Considering that the
control ﬂow of a program might be hijacked and static
analysis is unreliable, the design of POMP is exclusively
on the basis of the information residing in post-crash arti-
facts. In particular, POMP introduces a reverse execution
mechanism which takes as input a post-crash artifact, an-
alyzes the crashing memory and reversely executes the
instructions residing in the artifact. With the support of
this reverse execution, POMP reconstructs the data ﬂow
1By a post-crash artifact, without further speciﬁcation, we mean a
core dump including both the snapshot of crashing memory and the
instructions executed prior to the crash.
that a program followed prior to its crash, and then utilizes
backward taint analysis to pinpoint the critical instructions
leading up to the crash.
The reverse execution proposed in this work is novel.
In previous research, the design of reverse execution is
under the assumption of the data integrity in crashing
memory [16, 37] or heavily relies upon the capability of
recording critical objects in memory [7–9, 13]. In this
work, considering a software vulnerability might incur
memory corruption and object recording imposes over-
head on normal operations, we relax this assumption and
the ability of data object recording, and introduce a recur-
sive algorithm. To be speciﬁc, the algorithm performs the
restoration of memory footprints by constructing the data
ﬂow prior to the crash. In turn, it also employs recovered
memory footprints to improve data ﬂow construction. If
needed, the algorithm also veriﬁes memory aliases and
ensures data ﬂow construction does not introduce errors
or uncertainty. We detail this algorithm in Section 4.
To the best of our knowledge, POMP is the ﬁrst work
that can recover the data ﬂow prior to a program crash.
Since POMP relies only upon a post-crash artifact, it is
non-intrusive to normal operations and, more importantly,
generally applicable to any settings even though crash
report collection cannot be performed in a cooperative
manner. Last but not least, it should be noted that the
impact of this work is not just restricted to analyzing
the abnormal program termination caused by memory
corruption vulnerabilities. The technique we proposed is
generally applicable to program crashes caused by other
software bugs, such as dereferencing null pointers. We
will demonstrate this capability in Section 6.
In summary, this paper makes the following contribu-
tions.
• We designed POMP, a new technique that analyzes
post-crash artifacts by reversely executing instruc-
tions residing in the artifact.
• We implemented POMP on 32-bit Linux for facili-
tating software developers (or security analysts) to
pinpoint software defects, particularly memory cor-
ruption vulnerabilities.
• We demonstrated the effectiveness of POMP in fa-
cilitating software debugging by using various post-
crash artifacts attributable to 31 distinct real world
security vulnerabilities.
The rest of this paper is organized as follows. Section 2
deﬁnes the problem scope of our research. Section 3
presents the overview of POMP. Section 4 and 5 describe
the design and implementation of POMP in detail. Sec-
tion 6 demonstrates the utility of POMP. Section 7 sum-
marizes the work most relevant to ours followed by some
discussion on POMP in Section 8. Finally, we conclude
this work in Section 9.
18    26th USENIX Security Symposium
USENIX Association
...
1 void test(void){
2
3 }
4
5 int child(int *a){
6
7
8
9 }
a[0] = 1; // assigning value to var
a[1] = 2; // overflow func
return 0;
10
11 int main(){
12
13
14
15
16
17 }
void (*func)(void);
int var;
func = &test;
child(&var);
func(); // crash site
Table 1: A toy example with a stack overﬂow defect.
2 Problem Scope
In this section, we deﬁne the problem scope of our re-
search. We ﬁrst describe our threat model. Then, we
discuss why failure diagnosis can be tedious and tough
even though a post-crash artifact carries information that
allows software developers to fully reconstruct the control
ﬂow that a program followed prior to its crash.
2.1 Threat Model
In this work, we focus on diagnosing the crash of a pro-
cess. As a result, we exclude the program crashes that do
not incur the unexpected termination of a running process
(e.g., Java program crashes). Since this work diagnoses a
process crash by analyzing a post-crash artifact, we fur-
ther exclude those process crashes that typically do not
produce an artifact. Up to and including Linux 2.2, the de-
fault action for CPU time limit exceeded, for example, is
to terminate the process without a post-crash artifact [3].
As is mentioned above, a post-crash artifact contains
not only the memory snapshot of a crashing program but
also the instructions that the program followed prior to
its crash2. Recall that the goal of this work is to identify
those program statements (i. e., instructions) that actually
pertain to the crash. Therefore, we assume the instruction
trace logged in an artifact is sufﬁciently long and the
root cause of a program failure is always enclosed. In
other words, we assume a post-crash artifact carries all
the instructions that actually contribute to the crash. We
believe this is a realistic assumption because a software
defect is typically close to a crash site [19, 27, 39] and
2While Intel PT does not log unconditional jumps and linear code,
a full execution trace can be easily reconstructed from the execution
trace enclosed in a post-crash artifact. By an execution trace in a post-
crash artifact, without further speciﬁcation, we mean a trace including
conditional branch, unconditional jump and linear code.
an operating system can easily allocate a memory region
to store the execution trace from a defect triggered to an
actual crash. Since security analysts may not have the
access to source code of crashing programs and they can
only pinpoint software defects using execution traces left
behind crashes, it should be noted that we do not assume
the source code of the crashing program is available.
2.2 Challenge
As is mentioned earlier, Intel PT records program execu-
tion in a circular buffer. At the time a software defect is
triggered and incurs a crash, the circular buffer has gener-
ally accumulated a large amount of conditional branches.
After the control ﬂow reconstruction from these branches,
a full execution trace may carry more than a billion in-
structions. Even if zooming in the trace from where a fault
is triggered to where a crash occurs, a software developer
(or security analyst) may confront tens of thousands of
instructions. As such, it is tedious and arduous for a
software developer to plow through an execution trace to
diagnose the root cause of a software failure.
In fact, even though an execution trace is short and con-
cise, it is still challenging for commonly-adopted manual
diagnosis strategies (like backward analysis). Here, we
detail this challenge using a toy example shown in Table 1.
As is shown in the table, the program crashes at line
16 due to an overﬂow that occurs at line 7. After the
crash, an execution trace is left behind in a post-crash
artifact shown in Figure 1. In addition to the trace, the
artifact captures the state of the crashing memory which
is illustrated as the values shown in column T20.
To diagnose the root cause with backward analysis for
the program crash shown in Figure 1, a software developer
or security analyst typically follows through the execution
trace reversely and examines how the bad value in register
eax was passed to the crash site (i. e., instruction A20
shown in Figure 1). In this procedure, his effort can be
prematurely blocked when his analysis reaches instruction
A19.
In that instruction mov overwrote register eax
and an inverse operation against this instruction lacks
information to restore its previous value.
To address this problem, one straightforward solution
is to perform forward analysis when backward analysis
reaches a non-invertible instruction. Take instruction A19
for the example. By following a use-deﬁne chain, we can
construct a data ﬂow. Then, we can easily observe that
instruction A15 speciﬁes the deﬁnition of register eax,
and that deﬁnition can reach instruction A19 without any
other intervening deﬁnitions. As a result, we can restore
the value in register eax and thus complete the inverse
operation for instruction A19.
While the backward and forward analysis provides se-
curity analysts with an effective method to construct data
USENIX Association
26th USENIX Security Symposium    19
Figure 1: A post-crash artifact along with the memory footprints recovered by reversely executing the trace enclosed in the artifact.
Note that, for simplicity, all the memory addresses and the value in registers are trimmed and represented with two hex digits. Note
that A18 and test indicate the addresses at which the instruction and function are stored.
ﬂows, this is not sufﬁcient for completing program fail-
ure diagnosis. Again, take for example the execution
trace shown in Figure 1. When backward analysis passes
through instruction A15 and reaches instruction A14,
through forward analysis, a security analyst can quickly
discover that the value in register eax after the execution
of A14 is dependent upon both instruction A12 and A13.
As a result, an instinctive reaction is to retrieve the value
stored in the memory region speciﬁed by [ebp+0x8]
shown in instruction A12. However, memory indicated
by [ebp+0x8] and [eax] shown in instruction A14
might be alias of each other. Without an approach to re-
solve memory alias, one cannot determine if the deﬁnition
in instruction A14 interrupts the data ﬂow from instruc-
tions A12 and A13. Thus, program failure diagnosis has
to discontinue without an outcome.
3 Overview
In this section, we ﬁrst describe the objective of this re-
search. Then, we discuss our design principle followed
by the basic idea on how POMP performs postmortem
program analysis.
3.1 Objective
The goal of software failure diagnosis is to identify the
root cause of a failure from the instructions enclosed in
an execution trace. Given a post-crash artifact containing
an execution trace carrying a large amount of instructions
that a program has executed prior to its crash, however,
any instructions in the trace can be potentially attributable
to the crash. As we have shown in the section above, it is
tedious and tough for software developers (or security an-
alysts) to dig through the trace and pinpoint the root cause
of a program crash. Therefore, the objective of this work
is to identify only those instructions that truly contribute
to the crash. In other words, given a post-crash artifact,
our goal is to highlight and present to software developers
(or security analysts) the minimum set of instructions that
contribute to a program crash. Here, our hypothesis is that
the achievement of this goal can signiﬁcantly reduce the
manual efforts of ﬁnding out the root cause of a software
failure.
3.2 Design Principle
To accomplish the aforementioned objective, we de-
sign POMP to perform postmortem analysis on binaries