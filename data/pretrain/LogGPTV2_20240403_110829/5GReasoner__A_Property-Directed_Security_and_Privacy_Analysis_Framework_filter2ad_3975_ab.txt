inactive to RRC connected, a new procedure named RRC Resume
has been setup. The UE initiates the procedure when responding
to NG-RAN paging (while the UE is in RRC inactive) and requests
the resume of a suspended RRC connection using this procedure.
The process is quite similar to RRC setup with rrc_resume_request,
rrc_resume and rrc_resume_complete.
RRC Connection Re-establishment. A UE in RRC idle state fol-
lows this procedure to transition from RRC idle to RRC connected.
However, a UE, which is in RRC connected state and for which
security has been activated, may initiate the procedure in order
to continue the RRC connection. The connection re-establishment
succeeds if the network is able to find and verify a valid UE context.
2.4 Paging Procedure
Whenever a registered UE has no data to send, it goes to low en-
ergy/idle mode and wakes up periodically according to a defined
paging occasion to check for paging massages. As discussed earlier,
in 5G an extra state has been added to RRC idle and active named
inactive, thus there are two types of paging.
RAN Initiated Paging. In RRC Inactive mode, paging is initiated
by 5G-RAN and uses I-RNTI (Inactive-Radio Network Temporary
Identifier) as a unique identifier for the UE. The paging is triggered
by the last serving gNB. If the UE has been successfully reached, it
attempts to resume from RRC inactive to RRC connected following
the RRC connection resume procedure.
CN Initiated Paging. When in RRC idle mode, paging is initiated
by 5G-CN and uses TMSI as a unique identifier for the UE. In
this case the paging is triggered through the CN and RRC setup
procedure is invoked to move the UE from idle to connected state.
3 OVERVIEW OF 5GREASONER
We now present the architecture of 5GReasoner (see Figure 3) and
describe its major components. We then present a working example
to describe the verification workflow of 5GReasoner. Before delving
into the details, we first present our threat model.
3.1 Threat Model
For our analysis, we consider the following communication chan-
nels to be private and free of adversarial influence: (1) channel
between NAS and RRC layers in UE; (2) channel between the core
network and the base station. The communication channels be-
tween the UE and base station, and between the UE and core net-
work, are subject to adversarial influence from a Dolev-Yao-style
network adversary [24] who can impersonate a legitimate protocol
participant and can also drop, inject, or modify any packet while
adhering to cryptographic assumptions (e.g., it can decrypt an en-
crypted message only if he possesses the decryption key). Also,
cryptographic constructs are considered to be perfectly secure.
We also consider the core network components, target user’s
UE, and the USIM to be part of the trusted computing base and
free of adversarial influence. The adversary, however, may possess
USIMs provided by network operators which the adversary can
compromise to learn the master secret key and symmetric session
keys of that USIM along with network operators’ public keys.
3.2 High-Level Approach
Our approach at a high-level is similar to Hussain et al. [28]. Both ap-
proaches follow the counterexample-guided abstraction-refinement
principle (CEGAR) [21] with one subtle difference. Before pointing
out this difference, we first give a brief introduction to CEGAR.
In the general CEGAR framework, the verification inputs are
a concrete model/program Mc and the property to verify ϕ. The
aim is to check whether Mc satisfies ϕ. The verification starts with
abstracting the concrete model to obtain an abstract model Ma and
verified against ϕ. If the verification goes through (i.e., Ma satisfies
ϕ), due to the use of abstraction (i.e., the number of executions
in Mc is a subset of Ma), then it entails that Mc satisfies ϕ. If the
verification, however, does not go through (i.e., a counterexample σ
is generated) then there are two possibilities: (1) Mc violates ϕ; (2)
Ma violates ϕ due to the use of abstraction but Mc actually may not
violate ϕ. To figure out which case it is, one check to see whether
σ is a realizable execution in Mc. If it is, then we are in case (1) and
the counterexample is returned as evidence of verification failure.
If σ is, however, not realizable in Mc, then Ma is modified to obtain
Ma1 which rules out σ (and, possibly its generalization). This cycle
continues until either the verification goes through or a realizable
counterexample is found.
Example. Now let us consider a very simple program M with
the following four statements. The property we are interested in
verifying is ϕ ≡ out = (x1 + x2) ∗ (y1 + y2) where x1, x2, y1, y2
are 32-bit machine integers and “+” (resp., “∗”) represents addition
(resp., multiplication). Suppose reasoning about both “+” and “∗”
operations together in a bit-precise manner is hard for an automated
reasoner like a Satisfiability Modulo Theory (SMT) solver [13].
i n t 3 2
/ /
input d e c l a r a t i o n s
1 x1 , x2 , y1 , y2 :
:= x1 + x2
2 u1
3 u2
:= y1 + y2
:= u1 ∗ u2
4 out
To make the analysis amenable to an automated reasoner like
an SMT solver, let us assume that we abstract “+” and “∗” with
two uninterpreted binary functions F : int32 × int32 → int32 and
G : int32 × int32 → int32, respectively. Roughly, an uninterpreted
function is a function symbol whose signature is known but not its
semantics. We also expect that both these uninterpreted functions
satisfy the congruence property—required for an SMT solver to
reason about uninterpreted functions, that is, ∀s1, s2, t1, t2.(s1 =
t1 ∧ s2 = t2) → F (s1, s2) = F (t1, t2) and ∀s1, s2, t1, t2.(s1 = t1 ∧
s2 = t2) → G (s1, s2) = G (t1, t2). After applying our uninterpreted-
function abstraction, the abstract property becomes ϕabs ≡ out =
G (F (x1, x2), F (y1, y2)). Furthermore, the abstract counterpart of
the above program becomes the following.
i n t 3 2
1 x1 , x2 , y1 , y2 :
2 u1
3 u2
4 out
:= F ( x1
, x2 )
:= F ( y1 , y2 )
:= G( u1 , u2 )
/ /
input d e c l a r a t i o n s
Session 3D: Formal Analysis ICCS ’19, November 11–15, 2019, London, United Kingdom672Figure 3: 5GReasoner Architecture.
Expanding u1 and u2 in the abstract program will result in the
exact expression warranted by ϕabs discharging the verification
obligation. This shows the potential power of CEGAR-based ap-
proach as we did not require to reason about multiplication or
addition of machine integers at all.
For the sake of argument, suppose that the property we want to
verify now is the following: ϕ′ ≡ out = (y1 +y2)∗ (x1 +x2) with its
abstract form being ϕ′
abs ≡ out = G (F (y1, y2), F (x1, x2)). As for all
uninterpreted functions G (·,·), it is not the case that G(x,y)=G(y,x)
(i.e., not commutative) and hence the verification will fail because
from the program we know “out = G(F(x1, x2), F(y1, y2))” which
does not entail ϕ′
abs. Suppose the refinement we add to the model
and property is to replace all occurrences of G (·,·) with the actual
multiplication function. In that case, the verification will pass as “∗”
is commutative. Also, we did not need to reason about addition at
all, showing the advantage of a CEGAR-based approach.
5GReasoner. In our context, during verification, abstraction is
achieved by replacing cryptographically-protected messages with
their plaintext counterpart. As the 5G protocol model is fixed
so to rule out infeasible counterexamples—due to abstraction of
cryptographically-protected messages—we refine the property in-
stead of the model. Our refined properties are of the form α → β
(→ signifies logical entailment) where α is a formula used to rule
out the infeasible counterexample. This is to focus the verification
so that it only considers traces that satisfy α.
Concretely, given a 5G protocol model and a property to check,
we first replace all encrypted/integrity-protected messages with
their plaintext counterpart in both the model and the property. We
then enhance the model to include a Dolev-Yao-style adversary. We
then use a general-purpose model checker (MCheck) [18, 19] to
check whether the (cryptography-abstracted) model satisfies the
property. If this is the case, then we adjudicate the property to be
satisfied by the model. If, however, a counterexample is generated,
like above, there are two possibilities: (a) the 5G model violates the
property; (b) due to the abstraction of cryptographic-constructs,
a spurious counterexample is generated. To check which of the
cases is true, we consult a symbolic cryptographic protocol verifier
(CPVerif). If the CPVerif confirms that all the steps conform to the
cryptographic assumptions, then the counterexample (alternatively,
the attack) is reported by 5GReasoner. If CPVerif, however, adjudi-
cates one of the steps taken by the adversary to be infeasible, then
we refine the property to ensure that the adversary does not exer-
cise the offending action in the future iterations of the verification.
The verification loop continues until either the property is satisfied
by the model or a realizable counterexample is found.
3.3 Major Components of our Framework
We now describe the major components of 5GReasoner.
Protocol Model. We model the protocol abstractly as a set of com-
municating state machines (SM). Each of these state machines M1
communicate with another state machine M2 with two unidirec-
tional (private or public) channels, one carrying messages from M1
towards M2, and another from M2 to M1. Each state machine is a
tuple (I, O,V, Init, A) where I is a finite set of input variables; O
is a finite set of output variables; V is a finite set of state variables;
Init is a set of initial states; and A is a finite set of assignments to
variables in V. Assignments define how state variables are updated,
and thus define the transition relation of the system.
Adversarial Model Instrumentor. The adversarial model instru-
mentor takes as input a general protocol model M and it returns
another model Madv which is an extension of M containing ex-
plicit adversarial influence. Given a public channel c1 from M1
to M2, the instrumentor introduces a new state machine Ma cap-
turing the behavior of the adversary. It then replaces c1 with two
channels c1a and ca2. Channel c1a carries data from machine M1
to Ma whereas channel ca2 carries data from Ma to M2.
Ma mimics a Dolev-Yao-style adversary, that is, given an input
message, it non-deterministically decides either to drop the mes-
sage (no_operation), let the message go, or change the message (or,
its payload). The non-deterministic behavior is needed to let the
adversary choose any arbitrary strategy to attack the protocol.
Model Checker (MCheck). MCheck takes as input the adversary
included protocol model and a temporal trace property (i.e., safety
and liveness), and checks whether there is an execution of the model
which violates the property. If such a violation is not found, then it
outputs that the model satisfies the property. If it finds a violating
execution of the model, it presents a counterexample as evidence.
Due to abstraction, this counterexample may be spurious and hence
it is validated with a cryptographic protocol verifier.
Cryptographic Protocol Verifier (CPVerif). For each adversary
action in the MCheck provided a counterexample, we query the
CPVerif to check its feasibility. If all adversarial actions can be
Session 3D: Formal Analysis ICCS ’19, November 11–15, 2019, London, United Kingdom673Figure 4: A simplified 5G Model for NAS layer
proven to feasible then the counterexample is presented as a feasible
attack. Otherwise, we manually generate an invariant—ruling out
the infeasible adversarial action—to refine the property.
3.4 Working Example
We now walk the reader through our approach using an example.
For ease of exposition, we rely on an overly-simplified model of the
5G NAS ecosystem (See Figure 4).
Example model. In MAdv, the UE and the AMF are represented
with two SMs communicating through two unidirectional, attacker-
controlled public channels—UE to AMF, and AMF to UE. Transitions
labels are of the form “condition/actions” in which condition is a
logical formula specifying the condition under which the transition
will be triggered whereas the actions component refers to an action
sequence to be performed (in their appearance order) by the SM af-
ter the transition is taken. An empty actions component is denoted
with –. Initial states for UE and AMF SMs are UE-DEREGISTERED
and AMF-DEREGISTERED, respectively. The SMs have the follow-
ing environmental variables: enable_n1 (enable 5G connectivity);
cmd_mac_failure (improper MAC for sec_mode_command message);
cmp_mac_failure (improper MAC for sec_mode_complete message).
Desired example property. The property φ we want to check is:
“It is always the case that whenever the UE SM is in the registered-
initiated state and the UE has authenticated the AMF, the UE will
reply with sec_mode_complete only if the AMF sent a sec_mode_command
message.” The property signifies that whenever the UE initiates
the registration procedure and authenticates the core network, it
will eventually be able to move on to the next stage of the regis-
tration procedure where the UE successfully negotiates the secu-
rity algorithms with the core network using sec_mode_command and
sec_mode_complete messages while passing all sanity checks (i.e., valid
MAC and same security capabilities). This property is desired as
any violation of this could signify a privacy or service disruption
attack.
Verification with MCheck. Checking MAdv against φ generates a
counterexample π1 in which the adversary sends a sec_mode_command
to the UE. After the UE receives it, the UE sends sec_mode_complete.
Verification with CPVerif. To ensure the validity of π1, 5GRea-
soner using CPVerif verifies whether the adversary can inject a fake
sec_mode_command message. We verify a injective-correspondence [16]
property (with infinite parallel sessions) which asserts that every
sec_mode_command message received by the cellular device should be
preceded by a unique sec_mode_command message sent by the AMF.
The CPVerif provides one counterexample for this property. In the
attack trace, the adversary can replay a sec_mode_command message
captured from a previous session to the UE. Upon receiving the
message, the UE responds with sec_mode_complete message.
Invariant Generation. 5GReasoner rules out π1 by refining φ with
the following additional invariants— (1) cmd_mac_failure will not
happen; and (2) the adversary can only inject sec_mode_command only
if it has seen a previous sec_mode_command message sent by the AMF.
Second Iteration. After this iteration, 5GReasoner checks φref
with MCheck which generates another counterexample π2 in which
the adversary replays a sec_mode_command message that was sent ear-
lier by the core network to the UE. After the UE receives it, the UE
sends sec_mode_complete. This is a feasible attack and demonstrates
the effectiveness of 5GReasoner.
4 MODELING DISCIPLINES
We now first explain how we extract security requirements and
turn them into formal properties. We then discuss the high-level
protocol modeling discipline. Finally, we present the different types
of behavior-aware predicate abstraction techniques we employ.
4.1 Extracting Formal Properties
The set of properties that 5GReasoner aims to check include authen-
ticity (e.g., disallowing impersonation), availability (e.g., preventing
service denial), integrity (e.g., restricting unauthorized messages),
secrecy of user’s sensitive information (e.g., preventing location
data and activity profiling), and replay protection (e.g., restricting
reception of same messages more than once). We, therefore, first
identify and extract the precise and formal security goals from the
informal and high-level descriptions given in the conformance test
suites [7], the technical specification (TS) [4–6], and the technical
requirement (TR) [2] documents provided by the 3GPP and then
translate them into formal properties.
Conformance Test Suites. To test a UE’s correct behavior in dif-
ferent control-plane procedures, the 3GPP standard defines confor-
mance test cases [7] from the UE’s point of view. The test cases,
however, are defined at a very high-level and do not consider all
Session 3D: Formal Analysis ICCS ’19, November 11–15, 2019, London, United Kingdom674with {The UE in 5GMM-REGISTERED-INITIATED state}
ensure that{
when { the SS sends an EAP-request/AKA’-challenge within AU-
THENTICATION REQUEST}
then { the UE sends an EAP-response/AKA’-challenge message
within AUTHENTICATION RESPONSE } }
Figure 5: A conformance test case for authentication procedure [7].
possible use cases. For instance, the conformance test case listed
in Figure 5 only considers the case when a UE is in the regis-
tered_initiated state, possesses a valid credential, and then receives
an authentication_request message. This test case, however, does not
consider the cases when the UE has already failed to verify the in-
tegrity of a previous authentication_request message and fails the
sequence number checking for the current authentication_request
message. To address this challenge, we break down the high-level
test case into fine-grained sub test-cases by enumerating all possible
conditions, and then translating them into formal properties.
TS 24.501, clause: 4.4.3.2: Replay protection assures that one and
the same NAS message is not accepted twice by the receiver.
Figure 6: An example of replay protection requirement [1].
Technical Specifications and Requirements. Similar to confor-
mance test suites, the technical specifications [4–6] and the tech-
nical requirement [2] documents define the security requirements
at a high-level, albeit, in an abstract way. For instance, the replay
protection requirement in Figure 6 extracted from the technical
specification [4] needs to be interpreted and translated into for-
mal properties for each NAS layer message only after the integrity
protection has been activated.
Figure 7: Threat instrumented cross-layer model.
4.2 High-Level Protocol Modeling Discipline
We model the 5G protocol as a set of communicating state machines