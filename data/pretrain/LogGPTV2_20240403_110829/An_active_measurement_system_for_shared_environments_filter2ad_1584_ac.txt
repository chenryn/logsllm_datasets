r
f
4
0
.
0
3
0
.
0
2
0
.
0
1
0
.
0
0
0
.
0
−50
0
timestamp error on receive
50
100
(microseconds)
(b) Histogram of timestamp errors for receiving
packet pairs.
4: Histograms of send and receive timestamp errors for packet
pair experiments on live PlanetLab hosts. Data collected on 1 May
2007 at 11:40–11:49. Results from other measurement periods are
qualitatively similar.
tens of packet pairs. Similarly, we found that the timestamping
error upon sending a packet pair has close to zero mean when con-
sidering a few tens of packet pairs. Figure 4a shows a representa-
tive histogram from 1 May 2007 of timestamp errors on sending a
packet pair. These results are consistent with the notion that when
a process gets scheduled, it generally retains the processor for the
relatively short duration that it needs to busy-wait between sending
packets.
For timestamp errors on receiving packet pairs we found that dis-
tribution of errors often does not have zero mean. Figure 4b shows
a histogram of receive timestamp errors from data collected on 1
May 2007. The distribution is clearly shifted away from zero, with
a peak around 40 microseconds. Note that for these measurements,
we used system call interfaces in Linux to obtain probe packet
timestamps from the kernel, much as Spruce does [44]. Clearly,
there is a consistent expansion of packet pair spacings as they arrive
at the destination host and pass through the hardware and operating
system to the user process.
As a calibration check on our packet pair measurements, we used
the Spruce available bandwidth measurement tool which sends 100
pairs of packets to derive an estimate of available bandwidth [44],
also collecting DAG packet traces while we ran Spruce. Since the
detailed timings of packet pairs can be affected by speciﬁc pro-
gramming constructs, we wanted to be sure that our results were
not speciﬁc to the way in which our code was written. (In fact, our
code was developed from the BADABING code base.) We found
that the results obtained from using Spruce were consistent with
those described above.
Finally, we show results for discrete clock scheduling errors for
each probe algorithm. Table 4 shows the number of missed time
slots i.e., probe sending process woke up after it should have, for
measurement periods on the 26th of April. We can see from these
results that many times there was signiﬁcant deviation from the in-
tended probe schedule. (Note that since the discrete time interval is
5 milliseconds, 1000 slips implies a 5 second cumulative difference
in the intended probe process versus what is realized.)
For each of the three measurement algorithms, we also experi-
mented using the Sirius calendar scheduling system available through
the PlanetLab web interface, which should result in higher priority
given to the slice in which the measurement tools were run and
potentially better accuracy. We did not observe any qualitative dif-
ference in the measurement results.
4: Discrete clock scheduling errors (time slot misses) for mea-
surement periods on 26 April for three measurement algorithms.
Total number of time slots in experiment is 120,000. Results are
representative of other measurement periods.
Date / Time
26 April 00:20
26 April 04:20
26 April 08:20
26 April 12:20
26 April 16:20
26 April 20:20
Round-trip Delay Packet Pair BADABING
4633
547
4747
34
3866
6540
5797
6181
6989
8667
20638
7991
5411
1208
2361
8645
6287
5408
4. A MULTI-USER ACTIVE MEASUREMENT
SYSTEM
In this section we ﬁrst discuss general requirements for a sys-
tem designed to enable accurate active measurement for users of a
shared testbed environment. We then describe key aspects of the
design of MAD, a multi-user active measurement daemon. Lastly,
we discuss speciﬁc issues related to the implementation of MAD.
4.1 Requirements
Results from our experiments on the live PlanetLab nodes de-
scribed in § 3 suggest that one way to improve the accuracy of
active probe streams would be to implement aspects of required
measurement functionality at lower levels in a host system. This
idea is a key aspect of the classic end-to-end arguments [34], and
motivates our requirements and design in this paper.
Our list of requirements for a system to facilitate accurate active
network measurements in a shared testbed is as follows:
1. Accuracy. First and foremost, network measurements in
shared environments should be accurate. They should reli-
ably reﬂect the state of the network at the time of probing,
rather than effects due to host system load. Our results us-
ing three standard active measurement techniques on two live
PlanetLab hosts in § 3 show that inaccuracies can be signiﬁ-
cant for these probe methodologies when running in a shared
environment that is virtualized at the system call interface
level. As part of requiring accurate measurements, times-
tamps should be as accurate as possible, at least matching
accuracy of a lightly-loaded non-shared host. Not all widely
distributed shared testbeds use virtualization techniques, e.g.,
RON [10], so it is important that measurements be accurate
in both virtualized and non-virtualized environments.
2. Permit Multiple, Simultaneous Users. The measurement
system should permit simultaneous use by multiple users.
One way to meet this requirement is to leverage the notion
of multi-objective probing described in [39,40]. Speciﬁcally,
we ﬁrst assume that all probe algorithms operate according
to a discrete time slot. If multiple, simultaneously operating
algorithms attempt to send a probe at the same time slot, a
single probe can be marked according to the algorithms to
which it applies. Sending a single, tagged probe can also
reduce measurement bandwidth requirements, as discussed
in [40]. Rather than considering multiple, simultaneous al-
gorithms, we can consider multiple users. Indeed, multiple
incarnations of the same algorithm, e.g., periodic probes at a
given frequency, should be able to operate at the same time
on behalf of multiple users of such a system.
3. Low Impact on Host System. The system for coordinating
measurements on a host in a shared testbed should require
only enough processor, memory, and network resources to
support accurate measurements. In addition, the system should
scale to facilitate active measurement for a reasonably large
number of simultaneous users.
4. Permit Flexibility in Specifying the Probe Process. The
network measurement community continues to produce novel
active measurement algorithms each year. Embedding a spe-
ciﬁc probe algorithm, or even a set of algorithms, in a shared
measurement system is undesirable. Apart from the restric-
tion of requiring an algorithm to operate in discrete time, the
measurement system should permit a great deal of ﬂexibil-
ity in being able to specify the probe process, from simple
periodic probes, to more elaborate probe algorithms such as
BADABING.
5. Provide Secure Access to Users. A system for support-
ing active network measurements in a shared environment
should not permit itself to be the launch pad for denial-of-
service attacks. The system should provide, at minimum,
authentication and authorization functions to identify users
and provide appropriate access to the measurement facility.
6. Provide Limits on Probe Trafﬁc. In addition to authenti-
cation and authorization, accounting is an important facil-
ity that the system should provide. In particular, the system
should permit probe trafﬁc quotas to be speciﬁed. For exam-
ple, it may be desirable to impose an upper bound on trafﬁc
introduced by a user over a given time interval between two
hosts or across the entire system.
7. Provide Interfaces for Reporting Self-Measurement. The
system should allow users and administrators a window into
its current operating state. For example, it may be possible
to expose information to users about possible inaccuracies
in measurements, such as scheduling errors in the case of
discrete-time measurements, or other problems that can be
ascertained by the measurement system itself.
8. No Modiﬁcations to the OS Kernel. Finally, if such a sys-
tem is to be widely deployed, it should not require any changes
to the host operating system. While beneﬁts in accuracy may
be obtained by avoiding software layers, or by reimplement-
ing some existing functionality in a highly simpliﬁed manner,
such changes might represent a signiﬁcant barrier to wide
adoption.
4.2 Design
We now describe the design of a system to support multi-user ac-
tive measurements, MAD. We focus on the key problem of provid-
ing a ﬂexible probe process speciﬁcation for multiple, simultaneous
users.
The basic approach we take is for users to specify the probe al-
gorithm using a restricted language. Code written in this restricted
language is executed as a callback. Constructs in the language ex-
ist to schedule future callbacks, to schedule probes to be sent at a
speciﬁc discrete time slot, and to perform basic arithmetic (integer)
operations. Our approach bears similarities to a virtual machine
execution environment and to the approaches of the Exokernel and
SPIN operating systems that allow application-speciﬁc code frag-
ments to be downloaded to a kernel execution environment [15,19].
In the latter context, the execution kernel is MAD itself, and the
application-speciﬁc code implements the key aspects of a probe al-
gorithm, e.g., a periodic probe, or geometrically distributed probe
pairs.
To specify a probe algorithm, MAD provides an assembly-like
language, MADcode. It currently contains ﬁve operations, which
can be easily translated to bytecode that is executed by MAD. Four
virtual registers, r0–r3, are available for use: two have pre-deﬁned
uses and two are available for algorithm state maintenance or tem-
porary storage, if necessary.
Upon download of MADcode by a user, the code is executed at
the next possible time slot. Upon execution of user bytecode, reg-
ister r0 contains the current time slot number and register r1 con-
tains the current probe sequence number. Registers r2 and r3 are
available for arbitrary use. After executing user bytecode at call-
back time, registers r1–r3 are saved for the next time the byte-
code is executed. Any change to r0 is discarded. Thus, user code
can control its own sequence through register r1 (with a maximum
sequence value of 216). Note that the sequence refers to a probe,
which may itself consist of multiple packets (e.g., in the case of
packet pairs and BADABING). Individual packets of a probe have
an additional sequence number (with smaller range), currently as-
signed by MAD. Other probe process parameters, such as probe
packet size, the number of packets emitted per probe, the spacing
of those packets, and addressing information are currently speciﬁed
when a user initiates a request to start a measurement experiment.
Table 5 shows the ﬁve operations that are currently deﬁned in
MAD. All MADcode operations are on integers—no ﬂoating point
operations are allowed. In addition, there are no branch or looping
instructions, eliminating the possibility for inﬁnite loops or other
common programming errors. As we gain experience with imple-
menting different active measurement algorithms using MAD, we
may ﬁnd it necessary to expand the set of operations in MADcode.
5: MADcode instruction set.
Operation
add rx, arg
load rx, arg
geom rx, arg
Description
Add the contents of rx and
arg, placing the result in rx.
arg may be a literal (denoted
by a pound symbol before the
literal integer) or may be an-
other register.
Copy the value from arg into
register rx. arg may be a lit-
eral or a register.
Store a geometrically dis-
tributed random deviate with
parameter p = arg/100 in rx.
arg may be a literal or a reg-
ister.
schedule_probe rx, ry Schedule a probe to be sent
at time slot rx with sequence
number ry.
Schedule a callback for time
slot rx.
schedule_callback rx
MADcode to implement the three measurement algorithms shown
in Table 1 is shown in Listings 1, 2, and 3. The code for the peri-
odic probe proceeds by simply adding a ﬁxed number of time slots
to the current slot number (lines 5 and 8), incrementing the probe
sequence number (line 10), then scheduling a probe and the next
callback. The geometrically distributed probe algorithm in List-
ing 2 is very similar to the periodic probe except that the number
of time slots between probes is obtained through a call to the geom
operation (line 5). This operation returns an integer representing
the number of time slots until the next probe emission (and call-
back) drawn from a geometric distribution. The geom operation
assumes a denominator of 100 for its parameter p. The numera-
tor is speciﬁed as the second argument to the operation. The code
for implementing the BADABING algorithm is shown in Listing 3.
BADABING emits pairs of probes at time slots i and i + 1, initiated
with independent probability p at time slot i. The effect of lines 5
and 9 is to obtain the next time slot at which to initiate a probe pair.
Lines 15 and 17 increment the probe sequence and schedule the
ﬁrst probe of the pair, and lines 20 and 22 do the same for the sec-
ond probe of the pair. Line 25 schedules the next time slot for this
MADcode fragment to be executed. While Listing 3 implements the
basic algorithm of BADABING (i.e., probe pairs, rather than triple
probes), implementing the improved algorithm is straightforward
using MADcode.
Listing 1: MADcode for periodic probes used in delay experiments.
; on entry:
; r0 (read-only): current time slot
; r1 (read-write): probe sequence
load r2, #interval
; assign r2 literal value #interval
; (the probe period, in time slots)
add r2, r0
; r2 := r2 + current slot number
add r1, #1
; increment probe sequence by 1
schedule_callback r2
; schedule callback for slot r2
schedule_probe r2, r1
; send probe at slot r2
; with sequence r1
; on exit:
; probe sequence (r1) saved to user state
; r2, r3 saved to user state
Listing 2: MADcode for geometrically distributed probes used in
packet pair experiments.
; on entry:
; r0 (read-only): current time slot
; r1 (read-write): probe sequence
geom r2, #numerator
; store geometrically distributed
; random number with parameter
; p = #numerator/100 in r2
add r2, r0
; r2 := r2 + current slot number
add r1, #1
; increment probe sequence
schedule_callback r2
; schedule callback for slot r2
schedule_probe r2, r1
; send probe at slot r2
; with sequence r1
; on exit:
; probe sequence (r1) saved to user state
; r2, r3 saved to user state
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Listing 3: MADcode for implementing BADABING geometrically
distributed probe pairs used in loss experiments.
1
2
3