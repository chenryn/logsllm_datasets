ing on when in the boot process this happens, it might
grant the attacker control at exception levels consider-
ably higher than what they may achieve with a root or
even a kernel exploit on the device. In fact, if this is done
early enough in the boot process, the attacker could gain
control over Trusted Execution Environment initializa-
tion, granting them a myriad of security-critical capabil-
ities that are unavailable otherwise.
Bricking. One aspect that is related to secure bootload-
ers is the possibility of “bricking” a device, i.e., the cor-
ruption of the device so that the user has no way to
re-gain control of it. Bootloaders attempt to establish
whether a piece of code is trusted or not: if such code is
trusted, then the bootloader can proceed with their load-
ing and execution. But what happens when the trust can-
not be established? In the general case, the bootloader
stops and issues a warning to the user. The user can, usu-
ally through the bootloader’s recovery functionality (e.g.,
Fastboot) restore the device to a working state. However,
if an attacker can write to the partition holding this re-
covery mechanism, the user has no chance to restore the
device to an initial, clean state, and it may be rendered
useless.
This aspect becomes quite important when consider-
ing that malware analysis systems are moving from using
emulators to using real, physical devices. In this context,
a malware sample has the capability of bricking a device,
making it impossible to re-use it. This possibility consti-
tutes a limitation for approaches that propose baremetal
malware analysis, such as BareDroid [20].
One could think of having a mechanism that would
offer the user the possibility of restoring a device to a
clean state no matter how compromised the partitions
are. However, if such mechanism were available, any
anti-theft mechanism (as discussed in Section 4), could
be easily circumvented.
Unsafe unlock. As discussed in Section 4, the trusted
boot standard does not mandate the implementation de-
tails of storing the secure state. Devices could use an
eMMC ﬂash device with RPMB, an eFuse, or a special
partition on the ﬂash, depending on what is available. If
the security state is stored on the device’s ﬂash, and a
sufﬁciently-privileged process within Android can write
to this region, the attacker might be able to unlock the
bootloader, bypassing the requirement to notify the user.
Moreover, depending on the implementation, the boot-
loader could thus be unlocked without the user’s data be-
ing wiped.
In the next section, we will propose a design for an
automated analysis approach to detect vulnerabilities in
bootloader implementations. Unfortunately, our exper-
iments in Section 7 show that currently deployed boot-
loaders are vulnerable to combinations of these issues.
But hope is not lost – in Section 8, we discuss a mecha-
nism that addresses this problematic aspect.
6 BOOTSTOMP
The goal of BOOTSTOMP is to automatically identify se-
curity vulnerabilities that are related to the (mis)use of
attacker-controlled non-volatile memory, trusted by the
bootloader’s code. In particular, we envision using our
system as an automatic system that, given a bootloader
as input, outputs a number of alerts that could signal
the presence of security vulnerabilities. Then, human
analysts can analyze these alerts and quickly determine
whether the highlighted functionality indeed constitute a
security threat.
Bootloaders are quite different from regular programs,
both regarding goals and execution environment, and
USENIX Association
26th USENIX Security Symposium    787
they are particularly challenging to analyze with existing
tools. In particular, these challenges include:
• Dynamic analysis is infeasible. Because a primary
responsibility of bootloaders is to initialize hard-
ware, any concrete execution of bootloaders would
require this hardware.
• Bootloaders often lack available source code, or
even debugging symbols. Thus, essential tasks, in-
cluding ﬁnding the entry point of the program, be-
come much more difﬁcult.
• Because bootloaders run before the OS, the use of
syscalls and standard libraries that depend on this
OS is avoided, resulting in all common functional-
ity, including even functions such as memcpy, being
reimplemented from scratch, thus making standard
signature-based function identiﬁcation schemes in-
effective.
To take the ﬁrst step at overcoming these issues, we
developed a tool, called BOOTSTOMP, combining differ-
ent static analyses as well as a dynamic symbolic execu-
tion (DSE) engine, to implement a taint analysis engine.
To the best of our knowledge, we are the ﬁst to propose
a traceable ofﬂine (i.e., without requiring to run on real
hardware) taint analysis completely based on dynamic
symbolic execution. Other works as [24] [33] propose
completely ofﬂine taint analyses on binaries. In contrast
to our work, they implement static taint analyses, and are
hence not based on dynamic symbolic execution.
The main problem with these types of approaches is
that, though sound, they might present a high rate of false
positives, which a human analyst has to ﬁlter out by man-
ually checking them. Note that, in the context of taint
analysis, a false positive result is a path which is mistak-
enly considered tainted. Furthermore, producing a trace
(i.e., a list of basic blocks) representing a tainted path
using a static taint analysis approach is not as simple as
with symbolic execution.
On the other hand, our approach based on DSE,
though not sound (i.e., some tainted paths might not be
detected as explained in Section 7.4), presents the perk
of returning a traceable output with a low false positives
rate, meaning that the paths we detected as tainted are
indeed tainted, as long as the initial taint is applied and
propagated correctly. Note that there is a substantial dif-
ference between false positives when talking about taint
analyses and when talking about vulnerability detection.
Though our tool might return some false positives in
terms of detected vulnerabilities, as seen in Section 7,
false positives in tainted path detection are rare (we never
found any in our experiments) as our tool is based on
DSE. For a deeper discussion about the results obtained
by BOOTSTOMP, please refer to Section 7.4.
With these considerations in mind, since the output of
our analysis is supposed to be triaged by a human, we
Figure 2: BOOTSTOMP’s overview.
opted for a taint analysis based on DSE.
This section discusses the goal, the design features,
and the implementation details of BOOTSTOMP.
6.1 Design
Our system aims to ﬁnd two speciﬁc types of vulnera-
bilities: uses of attacker-controlled storage that result in
a memory-corruption vulnerability, and uses of attacker-
controlled storage that result in the unlocking of the boot-
loader. While these two kinds of bugs are conceptually
different, we are able to ﬁnd both using the same under-
lying analysis technique.
The core of our system is a taint analysis engine,
which tracks the ﬂow of data within a program.
It
searches for paths within the program in which a seed of
taint (such as the attacker-controlled storage) is able to
inﬂuence a sink of taint (such as a sensitive memory op-
eration). The tool raises an alert for each of these poten-
tially vulnerable paths. The human analyst can then pro-
cess these alerts and determine whether these data ﬂows
can be exploitable.
Our system proceeds in the following steps, as shown
in Figure 2:
Seed Identiﬁcation. The ﬁrst phase of our system in-
volves collecting the seeds of taint. We developed an
automated analysis step to ﬁnd all the functions within
the program that read data from any non-volatile stor-
age, which are used as the seeds when locating memory
corruption vulnerabilities. However, if the seeds have
semantics that cannot be automatically identiﬁed, such
as the unlocking mechanism of the bootloader, BOOT-
STOMP allows for the manual speciﬁcation of seeds by
the analyst. This feature comes particularly in handy
when source code is available, as the analyst can rely on
788    26th USENIX Security Symposium
USENIX Association
it to manually provide seeds of taint.
Sink Identiﬁcation. We then perform an automated
analysis to locate the sinks of taint, which represent code
patterns that an attacker can take advantage of, such as
bulk memory operations. Moreover, writes to the de-
vice’s storage are also considered sinks for locating po-
tentially attacker-controlled unlocking mechanisms.
Taint Analysis. Once the seeds of taint have been col-
lected, we consider those functions containing the seed
of taint and, starting from their entry point, perform a
multi-tag taint analysis based on under-constrained sym-
bolic execution [23] to ﬁnd paths where seeds reach
sinks. This creates alerts, for an analyst to review, includ-
ing detailed context information, which may be helpful
in determining the presence and the exploitability of the
vulnerability.
In the remainder of this section, we will explore the
details about each of these steps.
6.2 Seed Identiﬁcation
1 # define S E C _ X _ L E N 255
2
3 void g e t _ c o n f _ x () {
4
// ...
n = r e a d _ e m m c ( " sec_x " , a2 , a3 ) ;
if ( n < S E C _ X _ L E N ) {
return ;
}
// ...
9
10 }
11
12 int g e t _ u s e r _ d a t a () {
13
5
6
7
8
14
15
16
17
18
19 }
// ...
if (! r e a d _ e m m c ( b1 , b2 , 0) ) {
debug ( " E M M C _ E R R O R : no data read " ) ;
return -1;
}
// ...
Listing 1: By scanning every call site of read emmc,
BOOTSTOMP infers that the ﬁrst parameter is a string, the third
can assume the value zero, and the returned type is an integer.
For ﬁnding memory corruption vulnerabilities, our
system supports the automatic identiﬁcation of seeds of
taint. We use approaches similar to those in prior work
(e.g., [27]). We rely on error logging because there are
many different mechanisms that may read from non-
volatile memory, or different types of memory (plain
ﬂash memory vs. eMMC), and these error log strings
give us semantic clues to help ﬁnding them. Our sys-
tem looks for error logging functions using keywords as
mmc, oeminfo, read, and fail, and avoiding keywords like
memory and write.
This approach is useful for identifying functions that
somehow retrieve the content from a device’s storage.
However, since the signature of these functions is not
known, it is challenging to identify which argument of
this function stores the receiving buffer. To determine
the argument to be tainted, we use an approach based on
type inference.
Ideally, the taint should only be applied to the seed’s
argument pointing to the memory location where the read
data will be stored. As distinguishing pointers from inte-
gers is an undecidable problem [31], our analysis might
dereference an integer in the process of applying the
taint, resulting in a possible huge rate of false positive
alarms. Nonetheless, during this study, we observed that,
surprisingly, strings might not always be passed by refer-
ence to a function, but rather by value. During our analy-
sis, we check every call site of the functions we retrieved
using the above mentioned method and check the entity
of every passed argument. If an argument is composed of
only ASCII printable characters, we assume it is a string,
and we consider the same argument to a be a string for
every other call to the same function. When looking for
the memory locations to apply the taint, we consider this
information to ﬁlter out these arguments. We also do not
taint arguments whose passed values are zeroes, as they
might represent the NULL value.
As an example, consider Listing 1. First, BOOT-
STOMP retrieves the function read emmc as a possible
seed function, by analyzing the error log at line 18.
Then, it scans every call site of read emmc and infers
that the returned value is an integer (as it is compared
against an integer variable), the ﬁrst parameter is a string
and the third parameter can assume the value zero. As
read emmc is a candidate seed function, it has to store
the content read from a non-volatile storage in a valid
buffer, pointed by a non-null pointer. Therefore, BOOT-
STOMP applies the taint only to the second parameter
of read emmc (a2 and b2). Note that, as the receiving
buffer could be returned by a seed function, if the type
of the returned value cannot be inferred, the variable it is
assigned to is tainted as well. Note that, when a tainted
pointer is dereferenced, we taint the entire memory page
it points to.
In the case of locating unlocking-related vulnerabil-
ities, there is no bootloader-independent way of locat-
ing the unlocking function, since the implementation de-
tails signiﬁcantly vary. Therefore, BOOTSTOMP also
supports supplying the seeds manually: an analyst can
thus perform reverse-engineering to locate which func-
tion implements the “unlock” functionality and manu-
ally indicate these to our analysis system. While this
is not a straightforward process, there is a speciﬁc pat-
tern a human analyst can rely on: Fastboot’s main com-
mand handler often includes a basic command line parser
that determines which functionality to execute, and the
strings involved are often already enough to quickly pin-
USENIX Association
26th USENIX Security Symposium    789
point which function actually implements the “unlock”
functionality.
6.3 Sink Identiﬁcation
Our automatic sink identiﬁcation strategy is designed to
locate four different types of sinks:
memcpy-like functions. BOOTSTOMP locates memcpy-
like functions (e.g., memcpy, strcpy) by looking for se-
mantics that involve moving memory, unchanged, from
a source to a destination. As mentioned above, there are
no debugging symbols, and standard function signature-
based approaches would not be effective. For this reason,
we rely on a heuristic that considers the basic blocks con-
tained within each function to locate the desired behav-
ior. In particular, a function is considered memcpy-like
if it contains a basic block that meets the following con-
ditions: 1) Loads data from memory; 2) stores this same
data into memory; 3) increments a value by one unit (one
word, one byte, etc). Moreover, since it is common for
bootloaders to rely on wrapper functions, we also ﬂag
functions that directly invoke one (and only one) function
that contains a block satisfying the above conditions.
We note that there may be several other functions that,
although satisfy these conditions as well, do not imple-
ment a memcpy-like behavior. Thus, we rely on an addi-
tional observation that memcpy and strcpy are among the
most-referenced functions in a bootloader, since much of
their functionality involves the manipulation of chunks
of memory. We therefore sort the list of all functions in
the program by their reference count, and consider the
ﬁrst 50 as possible candidates. We note that, empirically,
we found that memcpy functions often fall within the top
ﬁve most-referenced functions.
Attacker-controlled dereferences. BOOTSTOMP con-
siders memory dereferences controlled by the attacker as
sinks. In fact, if attacker-controlled data reaches a deref-
erence, this is highly indicative of an attacker-controlled
arbitrary memory operation.
Attacker-controlled loops. We consider as a sink any
expression used in the guard of a loop. Naturally, any
attacker able to control the number of iterations of a loop,