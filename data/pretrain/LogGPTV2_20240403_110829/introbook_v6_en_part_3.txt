• boolean,whichisalogicaldatatypetakingtrueorfalse
values
Apartfromregularvaluesdefinedbythedatatype,afield
canhaveanundefinedmarkerNULL.Itcanbeinterpretedas
“thevalueisunknown”or“thevalueisnotset.”
Let’screateatableofuniversitycourses:
test=# CREATE TABLE courses( 37
test(# c_no text PRIMARY KEY, iv
test(# title text,
test(# hours integer
test(# );
CREATE TABLE
Notethatthepsqlcommandprompthaschanged: itisa
hintthatthecommandcontinuesonthenewline.Forcon-
venience,wewillnotrepeatthepromptoneachlineinthe
examplesthatfollow.
Theabovecommandcreatesthecoursestablewiththree
columns.c_nodefinesthecoursenumberrepresentedasa
textstring. titleprovidesthecoursetitle. hourslistsan
integernumberoflecturehours.
Apartfromcolumnsanddatatypes,wecandefineintegrity
constraintsthatwillbecheckedautomatically:PostgreSQL
won’tallowinvaliddatainthedatabase.Inthisexample,we
haveaddedthePRIMARYKEYconstraintforthec_nocolumn.
Itmeansthatallvaluesinthiscolumnmustbeunique,and
NULLsarenotallowed. Suchacolumncanbeusedtodis-
tinguishonetablerowfromanother.Forthefulllistofcon-
straints,seepostgrespro.com/doc/ddl-constraints.html.
You can find the exact syntax of the CREATE TABLE com-
mandindocumentation,orviewcommand-linehelpright
inpsql:
test=# \help CREATE TABLE
SuchreferenceinformationisavailableforeachSQLcom-
mand.TogetthefulllistofSQLcommands,run\helpwith-
outarguments.
38 FillingTableswithData
iv
Let’sinsertsomerowsintothecreatedtable:
test=# INSERT INTO courses(c_no, title, hours)
VALUES ('CS301', 'Databases', 30),
('CS305', 'Networks', 60);
INSERT 0 2
Ifyouneedtoperformabulkdatauploadfromanexternal
source,theINSERTcommandisnotthebestchoice.Instead,
youcanusetheCOPYcommandspecificallydesignedforthis
purpose:postgrespro.com/doc/sql-copy.html.
We’llneedtwomoretablesforfurtherexamples:students
and exams. For each student, we are going to store their
nameandtheyearofadmission(startyear).ThestudentID
cardnumberwillserveasthestudent’sidentifier.
test=# CREATE TABLE students(
s_id integer PRIMARY KEY,
name text,
start_year integer
);
CREATE TABLE
test=# INSERT INTO students(s_id, name, start_year)
VALUES (1451, 'Anna', 2014),
(1432, 'Victor', 2014),
(1556, 'Nina', 2015);
INSERT 0 3
Eachexamshouldhavethescorereceivedbystudentsin
thecorrespondingcourse. Thus,studentsandcoursesare
connectedbythemany-to-manyrelationship:eachstudent
cantakeexamsinmultiplecourses,andeachexamcanbe 39
takenbymultiplestudents. iv
Eachtablerowisuniquelyidentifiedbythecombinationof
astudentIDandacoursenumber.Suchintegrityconstraint
pertainingtoseveralcolumnsatonceisdefinedbytheCON-
STRAINTclause:
test=# CREATE TABLE exams(
s_id integer REFERENCES students(s_id),
c_no text REFERENCES courses(c_no),
score integer,
CONSTRAINT pk PRIMARY KEY(s_id, c_no)
);
CREATE TABLE
Besides,usingtheREFERENCESclause,wehavedefinedtwo
referentialintegritychecks,calledforeignkeys. Suchkeys
showthatthevaluesofonetablereferencerowsofanother
table.
Whenanyactionisperformedonthedatabase,PostgreSQL
willnowcheckthatalls_ididentifiersintheexamstable
correspondtorealstudents(thatis,entriesinthestudents
table), while course numbers in c_no correspond to real
courses. Thus,itisimpossibletoassignascoreonanon-
existingsubjectortoanon-existentstudent,regardlessof
theuseractionsorpossibleapplicationerrors.
Let’sassignseveralscorestoourstudents:
test=# INSERT INTO exams(s_id, c_no, score)
VALUES (1451, 'CS301', 5),
(1556, 'CS301', 5),
(1451, 'CS305', 5),
(1432, 'CS305', 4);
INSERT 0 4
40 DataRetrieval
iv
SimpleQueries
Toreaddatafromtables,usetheSQLoperatorSELECT.For
example,let’sdisplaytwocolumnsofthecoursestable:
test=# SELECT title AS course_title, hours
FROM courses;
course_title | hours
--------------+-------
Databases | 30
Networks | 60
(2 rows)
TheASclauseallowstorenamethecolumn,ifrequired. To
displayallthecolumns,simplyusethe*symbol:
test=# SELECT * FROM courses;
c_no | title | hours
-------+-------------+-------
CS301 | Databases | 30
CS305 | Networks | 60
(2 rows)
Theresultcancontainseveralrowswiththesamedata.Even
ifallrowsintheoriginaltablearedifferent, thedatacan
appearduplicatedifnotallthecolumnsaredisplayed:
test=# SELECT start_year FROM students;
start_year
------------
2014
2014
2015
(3 rows)
Toselectalldifferentstartyears,specifytheDISTINCTkey- 41
wordafterSELECT: iv
test=# SELECT DISTINCT start_year FROM students;
start_year
------------
2014
2015
(2 rows)
For details, see documentation: postgrespro.com/doc/sql-
select.html#SQL-DISTINCT
Ingeneral,youcanuseanyexpressionsaftertheSELECTop-
erator. IfyouomittheFROMclause,theresultingtablewill
containasinglerow.Forexample:
test=# SELECT 2+2 AS result;
result
--------
4
(1 row)
Whenyouselectsomedatafromatable,itisusuallyrequired
toreturnonlythoserowsthatsatisfyacertaincondition.This
filteringconditioniswrittenintheWHEREclause:
test=# SELECT * FROM courses WHERE hours > 45;
c_no | title | hours
-------+----------+-------
CS305 | Networks | 60
(1 row)
42 Theconditionmustbeofalogicaltype.Forexample,itcan
iv containrelations=,<>(or!=),>,>=, 2014;
s_id | c_no | score
------+-------+-------
1556 | CS301 | 5
(1 row)
Youcanalsoaddfilteringconditionstosubqueriesreturning
anarbitrarynumberofrows. SQLoffersseveralpredicates
forthispurpose. Forexample,INcheckswhetherthetable 47
returnedbythesubquerycontainsthespecifiedvalue. iv
Let’sdisplayallstudentswhohaveanyscoresinthespecified
course:
test=# SELECT name, start_year
FROM students
WHERE s_id IN (SELECT s_id
FROM exams
WHERE c_no = 'CS305');
name | start_year
--------+------------
Anna | 2014
Victor | 2014
(2 rows)
ThereisalsotheNOTINformofthispredicatethatreturnsthe
oppositeresult.Forexample,thefollowingqueryreturnsthe
listofstudentswhogotonlyexcellentscores(thatis,who
didn’tgetanylowerscores):
test=# SELECT name, start_year
FROM students
WHERE s_id NOT IN (SELECT s_id
FROM exams
WHERE score < 5);
name | start_year
------+------------
Anna | 2014
Nina | 2015
(2 rows)
AnotheroptionistousetheEXISTSpredicate,whichchecks
thatthesubqueryreturnsatleastonerow. Withthispredi-
cate,youcanrewritethepreviousqueryasfollows:
48 test=# SELECT name, start_year
FROM students
iv
WHERE NOT EXISTS (SELECT s_id
FROM exams
WHERE exams.s_id = students.s_id
AND score < 5);
name | start_year
------+------------
Anna | 2014
Nina | 2015
(2 rows)
You can find more details in documentation: postgrespro.
com/doc/functions-subquery.html
Intheexamplesabove,weappendedtablenamestocolumn
namestoavoidambiguity. However,itmaybeinsufficient.
Forexample,thesametablecanbeusedinthequerytwice,
orwecanuseanamelesssubqueryinsteadofthetablein
theFROMclause.Insuchcases,youcanspecifyanarbitrary
nameafterthequery,whichiscalledanalias. Youcanuse
aliasesforregulartablesaswell.
Let’s display student names and their scores for the
“Databases”course:
test=# SELECT s.name, ce.score
FROM students s
JOIN (SELECT exams.*
FROM courses, exams
WHERE courses.c_no = exams.c_no
AND courses.title = 'Databases') ce
ON s.s_id = ce.s_id;
name | score
------+-------
Anna | 5
Nina | 5
(2 rows)
Here“s”isatablealias,while“ce”isasubqueryalias.Aliases 49
areusuallychosentobeshort,butcomprehensive. iv
Thesamequerycanalsobewrittenwithoutsubqueries.For
example:
test=# SELECT s.name, e.score
FROM students s, courses c, exams e
WHERE c.c_no = e.c_no
AND c.title = 'Databases'
AND s.s_id = e.s_id;
Sorting
Aswehavealreadymentioned,tabledataisnotsorted.How-
ever,itisoftenimportanttogettherowsintheresultina
particularorder. ItcanbeachievedbyusingtheORDERBY
clausewiththelistofsortingexpressions.Aftereachexpres-
sion(sortingkey),youcanspecifythesortingorder:ASCfor
ascending(usedbydefault),DESCfordescending.
test=# SELECT * FROM exams
ORDER BY score, s_id, c_no DESC;
s_id | c_no | score
------+-------+-------
1432 | CS305 | 4
1451 | CS305 | 5
1451 | CS301 | 5
1556 | CS301 | 5
(4 rows)
Heretherowsarefirstsortedbyscore,intheascendingorder.
Forthesamescores,therowsgetsortedbystudentIDcard
number,intheascendingorder.Ifthefirsttwokeysarethe
50 same,rowsaresortedbythecoursenumber,inthedescend-
iv ingorder.
Itmakessensetodosortingattheendofthequery,right
beforegettingtheresult;thisoperationisusuallyuselessin
subqueries.
Formoredetails,seedocumentation:postgrespro.com/doc/
sql-select.html#SQL-ORDERBY.
GroupingOperations
Whengroupingisused,thequeryreturnsasinglelinewith