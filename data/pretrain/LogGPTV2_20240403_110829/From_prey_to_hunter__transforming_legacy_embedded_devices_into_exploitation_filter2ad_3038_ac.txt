illustrates a typical shadow sensor deployment.
As the name suggests, incoming network traﬃc is mir-
rored from the production embedded device to a Symbiote-
injected shadow device, which runs the same ﬁrmware as
the production device. The Symbiote sensor injected into
the shadow device continuously monitors the shadow device,
quietly emitting alerts when malicious activity is detected.
The performance of the shadow sensor is critical, as it
must be able to keep up with the production router. Thus,
minimizing the control-plane latency and computational over-
head of the Symbiote is critical to the eﬀectiveness of the
detection system. We discuss preliminary performance data
in the next section. The development of Symbiote-based
shadow sensors is an area of active research.
9. PERFORMANCE AND OVERHEAD
We measure the performance and overhead of our Symbiote-
based exploit detector using two quantitative metrics: com-
putational overhead and detection latency. The Symbiote-
protected router is an emulated Cisco 7200 series router
running IOS 12.3. Two neighbor routers are used to ver-
ify that the Symbiote-protected router’s original functional-
ity is unchanged. One neighbor router is an emulated 7200
series router running standard IOS 12.3. The other neigh-
bor router is a physical Cisco 2921 router running IOS 12.5.
Each router is conﬁgured to expose a cross-section of func-
tionality typically seen on production routers. Speciﬁcally,
a large number of local loopback interfaces are conﬁgured on
each router. OSPF routing is enabled on all three routers,
along with a suite of standard services like IP-SLA, SNMP,
HTTP{S} and SSH.
A stress-test script automatically generates network traﬃc
throughout the test environment, and periodically accesses
services on all the test routers. All routers are continu-
ously monitored to ensure that all services operate correctly
throughout testing. The workload script also periodically
forces route-table re-calculations by perturbing the various
OSPF routers on the network. In eﬀect, the stress-test script
simulates a typical use proﬁle for the IOS routers in the test
environment. The same stress-test script is run against sev-
eral variants of the Symbiote-injected IOS ﬁrmware in order
to illustrate key performance features of our system.
The computational overhead and performance of our sys-
tem is a conﬁgurable parameter. As the ﬁgures in this sec-
tion shows, the scheduling algorithm used within the Sym-
biote Manager directly impacts the resource consumption of
the Symbiote payload, and thus the overall utilization of the
host device as well as the detection latency. Two scheduling
algorithms are discussed in this section: ﬁxed burst-rate and
inverse-adaptive.
As the name suggests, the ﬁxed burst-rate scheduling al-
gorithm instructs the Symbiote payload to execute for a
ﬁxed burst-rate each time the Symbiote Manager is invoked
through a randomly placed execution intercept. On the
other hand, the inverse-adaptive scheduling algorithm cal-
culates the payload burst-rate based on the elapsed time
since the Symbiote Manager was last invoked; the longer
the elapsed time, the longer the burst-rate.
Intuitively, we can expect the ﬁxed burst-rate scheduling
algorithm to execute the Symbiote payload more frequently
as the host system becomes more utilized. This simple algo-
rithm executes the Symbiote payload more frequently when
the Cisco router is heavily utilized, and less frequently when
the router is idle. In contrast, the inverse-adaptive schedul-
ing algorithm increases Symbiote payload burst-rate when
the system is under-utilized, and throttles back the Sym-
biote payload when the router is under high load.
We analyze the performance of 15 Symbiote-injected IOS
images under the same stress-test; 7 variants using the ﬁxed
burst-rate Symbiote scheduler and 8 variants using the inverse-
adaptive Symbiote scheduler. As the next three subsections
show, the ﬁxed burst-rate Symbiote scheduler aggressively
executes the Symbiote payload, and achieves the least detec-
tion latency (approximately 400 ms). However, this aggres-
sive scheduler tends to amplify CPU utilization of the pro-
tected router, causing very high control-plane latency when
the router is under load. Although the higher ﬁxed burst-
rate values like 0x7FF and 0xFFF detected IOS modiﬁcation
very quickly, it also caused the router’s control-plane to be
less responsive.
In contrast, the inverse-adaptive Symbiote scheduler pro-
duced slightly longer detection latencies (approximately 450
ms), but was able to signiﬁcantly reduce the control-plane
latency of the host router, even under high load.
9.1 Computational Overhead
The same stress-test script is run against various ver-
sions of the Symbiote-injected IOS image in order to show
how the Symbiote Manager’s scheduling algorithm aﬀects
the CPU utilization of the router. Two major scheduling
algorithms are measured: ﬁxed burst-rate (Figure 7) and
inverse-adaptive (Figure 8). Burst-rate values presented
in the next two sections represent the number of iterations
of the main Symbiote payload executed each time the Sym-
biote Manager is invoked.
Figure 7 shows the CPU utilization of 7 variants of the
Symbiote ProtectedRouter (Emulated Shadow)Internal MonitoringProcessNetworkCapture and AnalysisEngineGeneral Purpose ServerProduction RouterSPAN Portﬁxed burst-rate Symbiote scheduler, which unconditionally
executes the Symbiote payload for a constant number of
CPU cycles each time the Symbiote is invoked via its many
control-ﬂow intercepts. The units used, burst-rate, is the
number of iterations of the checksum Symbiote payload that
is executed each time the Symbiote Manager is invoked.
This Symbiote scheduler disregards the current CPU uti-
lization of the host device. At higher burst-rate values like
0x7FF and 0xFFF, the router’s CPU utilization tends to re-
main above 95% under heavy load, causing large spikes in
control-plane latency. (See Figure 11)
Figure 8 shows the CPU utilization of 8 variants of the
inverse-adaptive Symbiote scheduler, compared with the base-
line CPU utilization of the unmodiﬁed IOS image under the
same stress-test. The inverse-adaptive scheduler is conﬁg-
ured with maximum burst-rates from 0x1FFFF to 0xFFFFFF.
Unlike the ﬁxed burst-rate Symbiote scheduler, the inverse-
adaptive scheduler throttles how much the CPU is diverted
to the Symbiote based on current host device utilization.
As a result, Symbiotes with inverse-adaptive schedulers can
achieve comparable detection latencies while signiﬁcantly re-
ducing its impact on the host router’s control-plane latency.
(Compare Figure 11 and Figure 12).
9.2 Detection Performance
In order to measure the detection latency of our exploita-
tion detection Symbiote, a simple vulnerability which al-
lows arbitrary memory modiﬁcation is artiﬁcially introduced
into the Symbiote-injected IOS image. Using an automated
script, this vulnerability is triggered, modifying a random
byte within monitored memory regions. A timer is simul-
taneously started in order to measure the time it takes the
Symbiote payload to detect the event.
Figure 9 shows a roughly linear relationship between the
Symbiote’s ﬁxed burst-rate value and the Symbiote’s detec-
tion latency. As expected, the Symbiote detection latency
decreases as the Symbiote payload’s execution burst-rate
increases. However, as Figure 11 shows, the ﬁxed burst-
rate Symbiote scheduler causes signiﬁcant increases in the
router’s control-plane latency.
Figure 10 shows the detection latency of Symbiotes using
the inverse-adaptive scheduler. As the ﬁgure shows, these
Symbiotes can achieve comparable detection latency values
as the ﬁxed burst-rate versions, but as Figure 12 shows, the
Symbiote’s impact on the router’s control-plane is signiﬁ-
cantly reduced.
Figure 7: CPU Utilization: Fixed Burst-Rate SEM
Manager
Figure 9: Detection Latency: Fixed Burst-Rate
SEM Manager
Figure 8: CPU Utilization: Inverse-Adaptive SEM
Manager
Figure 10: Detection Latency:
SEM Manager
Inverse-Adaptive
 0 0.5 1 1.5 2 2.5 3 3.5 40xF0x3F0x6F0x7F0x9F0xCF0xFF0x3FF0x6FF0x9FF0xCFF0xFFF0x3FFF0x6FFF0x9FFF0xCFFF0xFFFFDetection Latency (Seconds)Payload Execution RateDetection Latency: Fixed Burst−Rate SEM ManagerDetection Latency: Fixed Burst−Rate SEM ManagerDetection Latency: Fixed Burst-Rate SEM Manager 0 0.5 1 1.5 2 2.5 3 3.5 40x1FFFF0x3FFFF0x7FFFF0xFFFFF0x1FFFFF0x3FFFFF0x7FFFFF0xFFFFFF0x1FFFFF0x3FFFFF0x7FFFFF0xFFFFFFDetection Latency (Seconds)Maximum Payload Execution RateDetection Latency: Inversely Adaptive SEM ManagerDetection Latency: Inversely Adaptive SEM Manager9.3 Control-Plane Latency
Control-plane latency is an indicator of how responsive
the router is. High control-plane latency can cause a router
to drop routing adjacencies and break various time-sensitive
network protocols. Note, however, that this measurement
will not signiﬁcantly aﬀect the latency of traﬃc passing
through the router, as most modern routers have hardware-
accelerated forwarding engines which are decoupled from the
control-plane.
Control-plane latency is measured by sending ICMP-echo
messages from the test PC to the router’s local loopback in-
terface. The round-trip-time is collected and shown in Fig-
ure 11 for Symbiotes using ﬁxed burst-rate scheduler vari-
ants, and in Figure 12 for Symbiotes using inverse-adaptive
scheduler variants. Clearly, the inverse-adaptive Symbiote
scheduler signiﬁcantly reduces the Symbiote’s impact on the
host router’s control-plane latency while achieving compa-
rable detection latency values as ﬁxed burst-rate Symbiotes.
Figure 11: Ping Latency: Fixed Burst-Rate SEM
Manager
Figure 12: Ping Latency:
Manager
Inverse-Adaptive SEM
9.4 Discussion
Preliminary performance results shown in this section sug-
gests that high performance exploitation detection is pos-
sible in Cisco IOS. Furthermore, an optimized Symbiote
scheduling algorithm can greatly improve performance of
the overall sensor system by reducing both detection latency
and the Symbiote’s impact on the router’s control-plane la-
tency. Optimization of the detection latency and the in-
duced control-plane latency is an area of active research.
10. FUTURE WORK
The Symbiote-based sensor presented in this paper is a
ﬁrst step towards demonstrating the feasibility and novel ca-
pability of Symbiotic defense systems. The Symbiote struc-
ture allows complex payloads to be injected into legacy em-
bedded devices, allowing the payload to safely execute along-
side the original ﬁrmware without altering the embedded de-
vice’s functionality. The checksumming payload we injected
into Cisco IOS can be replaced with a wide range of de-
fensive payloads. Below are several new Symbiote payloads
currently under development.
10.1 Embedded Self-Healing
The checksumming Symbiote payload discussed in this pa-
per can be extended to reverse unauthorized modiﬁcation
of memory after it is detected. A self-healing Symbiote pay-
load can be used to identify and restore regions of memory
which have been maliciously modiﬁed.
10.2 Embedded Anomaly Detector
Symbiote payloads can implement existing anomaly detec-
tion algorithms. For example, behavior modeling strategies
which monitor resource utilization, control and data ﬂow
patterns can be injected into embedded devices via Sym-
biote payloads.
10.3 Large-Scale Embedded Sensor Grid
The exploitation detection sensor described in this paper
can be injected into large numbers of embedded devices like
Cisco routers in order to monitor and analyze 0-day exploita-
tion of embedded devices. We believe the use of Symbiote-
based exploitation sensors in the wild is a feasible and eﬀec-
tive way of monitoring and analyzing exploits levied against
the internet substrate. A large-scale Symbiote-based sensor
grid can potentially give us real-time visibility into embed-
ded device exploitation on a global scale.
Furthermore, Symbiotes can be used to transform embed-
ded devices into other kinds of sensor grids as well. Sym-
biotes can allow us to use hardware components of embed-
ded devices in novel ways not intended by its original de-
sign. For example, many power-consuming, EM emitting
components can be transformed into covert communication
channels. Existing sensors on embedded devices, combined
with such covert channels can transform a wide gamut of in-
nocuous embedded devices into a web of remotely controlled
mobile sensors.
11. CONCLUSION
The Symbiote mechanism can be used to augment legacy
embedded devices with novel functionality in an OS agnostic
manner. The applications of this capability are numerous,
and will help make the introduction of modern host-based
defenses on existing embedded devices a feasible reality. The
checksumming Symbiote payload described in this paper is
a starting point in demonstrating the unique advantages of
Symbiotic defense systems. We have demonstrated that the
[14] Richard Lippmann, Engin Kirda, and Ari
Trachtenberg, editors. Recent Advances in Intrusion
Detection, 11th International Symposium, RAID 2008,
Cambridge, MA, USA, September 15-17, 2008.
Proceedings, volume 5230 of Lecture Notes in
Computer Science. Springer, 2008.
[15] Michael Lynn. Cisco IOS Shellcode, 2005. In BlackHat
USA.
[16] Sebastian Muniz. Killing the myth of Cisco IOS
rootkits: DIK, 2008. In EUSecWest.
[17] Ryan Riley, Xuxian Jiang, and Dongyan Xu.
Guest-transparent prevention of kernel rootkits with
vmm-based memory shadowing. In Lippmann et al.
[14], pages 1–20.
[18] Dror-John Roecher and Michael Thumann. NAC
Attack. In In BlackHat USA, 2007.
[19] Skywing. Subverting PatchGuard Version 2, 2008.
Uninformed,Volume 6.
[20] Yingbo Song, Pratap V. Prahbu, and Salvatore J.
Stolfo. Smashing the stack with hydra: The many
heads of advanced shellcode polymorphism. In Defcon
17, 2009.
[21] Salvatore J. Stolfo, Issac Greenbaum, and Simha
Sethumadhavan. Self-monitoring monitors. Technical
Report cucs-026-09, Columbia University Computer
Science Department, April 2009.
[22] Vikas R. Vasisht and Hsien-Hsin S. Lee. Shark:
Architectural support for autonomic protection
against stealth by rootkit exploits. In MICRO, pages
106–116. IEEE Computer Society, 2008.
[23] Zhi Wang, Xuxian Jiang, Weidong Cui, and Xinyuan
Wang. Countering persistent kernel rootkits through
systematic hook discovery. In Lippmann et al. [14],
pages 21–38.
Symbiote can automatically augment Cisco IOS with eﬀec-
tive anti-rootkitting capabilities. This accomplishment has
laid the foundation for the construction of a large sensor-grid
of legacy embedded devices in order to accurately detect and
analyze the exploitation of the devices which make up the
fabrics of our global communication infrastructures.
12. ACKNOWLEDGEMENTS
This material is based on research sponsored by Air Force
Research labs under agreement number FA8750-09-1-0075.
The U.S. Government is authorized to reproduce and dis-
tribute reprints for Governmental purposes notwithstand-
ing any copyright notation thereon. This material is also
based on research sponsored by DARPA contract: CRASH
program, SPARCHS, FA8750-10-2-0253.
13. REFERENCES
[1] kaiten.c IRC DDOS Bot.
http://packetstormsecurity.nl/irc/kaiten.c.
[2] Microsoft Corporation, Kernel Patch Protection:
Frequently Asked Questions.
http://tinyurl.com/y7pss5y, 2006.
[3] The End of Your Internet: Malware for Home
Routers, 2008. http://tinyurl.com/3d9yv9l.
[4] Network Bluepill. Dronebl.org, 2008.
http://www.dronebl.org/blog/8.
[5] New worm can infect home modem/routers.
APCMAG.com, 2009.
http://apcmag.com/Content.aspx?id=3687.
[6] Hoi Chang and Mikhail J. Atallah. Protecting
software code by guards. In Tomas Sander, editor,
Digital Rights Management Workshop, volume 2320 of
Lecture Notes in Computer Science, pages 160–175.
Springer, 2001.
[7] Ang Cui, Jatin Kataria, and Salvatore J. Stolfo.
Killing the myth of cisco ios diversity: Towards
reliable, large-scale exploitation of cisco ios, 2011. 5th
USENIX Workshop on Oﬀensive Technologies.
[8] Ang Cui and Salvatore J. Stolfo. A quantitative
analysis of the insecurity of embedded network
devices: results of a wide-area scan. In Carrie Gates,
Michael Franz, and John P. McDermott, editors,
ACSAC, pages 97–106. ACM, 2010.
[9] Ang Cui and Savaltore J. Stolfo. Defending legacy
embedded devices with software symbiotes. In Robin
Sommer, Davide Balzarotti, and Gregor Maier,
editors, RAID, volume 6961 of Lecture Notes in
Computer Science. Springer, 2011.
[10] Abdallah Ghourabi, Tarek Abbes, and Adel Bouhoula.
Honeypot router for routing protocols protection. In
Anas Abou El Kalam, Yves Deswarte, and Mahmoud
Mostafa, editors, CRiSIS, pages 127–130. IEEE, 2009.
[11] Christopher Kr¨ugel, William K. Robertson, and
Giovanni Vigna. Detecting kernel-level rootkits
through binary analysis. In ACSAC, pages 91–100.
IEEE Computer Society, 2004.
[12] Felix ”FX” Linder. Cisco Vulnerabilities. In In
BlackHat USA, 2003.
[13] Felix ”FX” Linder. Cisco IOS Router Exploitation. In
In BlackHat USA, 2009.