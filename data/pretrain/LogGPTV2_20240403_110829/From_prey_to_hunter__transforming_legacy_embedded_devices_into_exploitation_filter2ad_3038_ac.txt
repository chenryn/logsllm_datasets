### Shadow Sensor Deployment

As the name suggests, a shadow sensor deployment involves mirroring incoming network traffic from a production embedded device to a Symbiote-injected shadow device. The shadow device runs the same firmware as the production device. The Symbiote sensor continuously monitors the shadow device and quietly emits alerts when it detects malicious activity.

The performance of the shadow sensor is critical, as it must keep up with the production router. Minimizing the control-plane latency and computational overhead of the Symbiote is essential for the effectiveness of the detection system. We will discuss preliminary performance data in the next section. The development of Symbiote-based shadow sensors is an active area of research.

### 9. PERFORMANCE AND OVERHEAD

We measure the performance and overhead of our Symbiote-based exploit detector using two quantitative metrics: computational overhead and detection latency. The Symbiote-protected router is an emulated Cisco 7200 series router running IOS 12.3. Two neighbor routers are used to verify that the Symbiote-protected router’s original functionality remains unchanged. One neighbor router is an emulated 7200 series router running standard IOS 12.3, while the other is a physical Cisco 2921 router running IOS 12.5. Each router is configured to expose a cross-section of functionality typically seen on production routers, including a large number of local loopback interfaces. OSPF routing is enabled on all three routers, along with standard services such as IP-SLA, SNMP, HTTP/HTTPS, and SSH.

A stress-test script automatically generates network traffic throughout the test environment and periodically accesses services on all the test routers. All routers are continuously monitored to ensure that all services operate correctly throughout testing. The workload script also periodically forces route-table recalculations by perturbing the various OSPF routers on the network. In effect, the stress-test script simulates a typical use profile for the IOS routers in the test environment. The same stress-test script is run against several variants of the Symbiote-injected IOS firmware to illustrate key performance features of our system.

### 9.1 Computational Overhead

The computational overhead and performance of our system are configurable parameters. The scheduling algorithm used within the Symbiote Manager directly impacts the resource consumption of the Symbiote payload, and thus the overall utilization of the host device and the detection latency. Two scheduling algorithms are discussed in this section: fixed burst-rate and inverse-adaptive.

#### Fixed Burst-Rate Scheduling
The fixed burst-rate scheduling algorithm instructs the Symbiote payload to execute for a fixed burst-rate each time the Symbiote Manager is invoked through a randomly placed execution intercept. This simple algorithm executes the Symbiote payload more frequently when the Cisco router is heavily utilized and less frequently when the router is idle.

#### Inverse-Adaptive Scheduling
The inverse-adaptive scheduling algorithm calculates the payload burst-rate based on the elapsed time since the Symbiote Manager was last invoked. The longer the elapsed time, the longer the burst-rate. This algorithm increases the Symbiote payload burst-rate when the system is under-utilized and throttles back the Symbiote payload when the router is under high load.

We analyze the performance of 15 Symbiote-injected IOS images under the same stress-test: 7 variants using the fixed burst-rate Symbiote scheduler and 8 variants using the inverse-adaptive Symbiote scheduler. The fixed burst-rate Symbiote scheduler aggressively executes the Symbiote payload, achieving the least detection latency (approximately 400 ms). However, this aggressive scheduler tends to amplify CPU utilization of the protected router, causing very high control-plane latency when the router is under load. Higher fixed burst-rate values like 0x7FF and 0xFFF detected IOS modifications quickly but also caused the router’s control-plane to be less responsive.

In contrast, the inverse-adaptive Symbiote scheduler produced slightly longer detection latencies (approximately 450 ms) but significantly reduced the control-plane latency of the host router, even under high load.

### 9.2 Detection Performance

To measure the detection latency of our exploitation detection Symbiote, a simple vulnerability allowing arbitrary memory modification is artificially introduced into the Symbiote-injected IOS image. An automated script triggers this vulnerability, modifying a random byte within monitored memory regions, and a timer measures the time it takes for the Symbiote payload to detect the event.

Figure 9 shows a roughly linear relationship between the Symbiote’s fixed burst-rate value and the Symbiote’s detection latency. As expected, the Symbiote detection latency decreases as the Symbiote payload’s execution burst-rate increases. However, Figure 11 shows that the fixed burst-rate Symbiote scheduler causes significant increases in the router’s control-plane latency.

Figure 10 shows the detection latency of Symbiotes using the inverse-adaptive scheduler. These Symbiotes can achieve comparable detection latency values as the fixed burst-rate versions, but Figure 12 shows that the Symbiote’s impact on the router’s control-plane is significantly reduced.

### 9.3 Control-Plane Latency

Control-plane latency is an indicator of how responsive the router is. High control-plane latency can cause a router to drop routing adjacencies and break various time-sensitive network protocols. However, this measurement does not significantly affect the latency of traffic passing through the router, as most modern routers have hardware-accelerated forwarding engines decoupled from the control-plane.

Control-plane latency is measured by sending ICMP-echo messages from the test PC to the router’s local loopback interface. The round-trip-time is collected and shown in Figures 11 and 12 for Symbiotes using fixed burst-rate and inverse-adaptive scheduler variants, respectively. Clearly, the inverse-adaptive Symbiote scheduler significantly reduces the Symbiote’s impact on the host router’s control-plane latency while achieving comparable detection latency values as fixed burst-rate Symbiotes.

### 9.4 Discussion

Preliminary performance results suggest that high-performance exploitation detection is possible in Cisco IOS. An optimized Symbiote scheduling algorithm can greatly improve the overall sensor system's performance by reducing both detection latency and the Symbiote’s impact on the router’s control-plane latency. Optimizing these aspects is an active area of research.

### 10. FUTURE WORK

The Symbiote-based sensor presented in this paper is a first step towards demonstrating the feasibility and novel capability of Symbiotic defense systems. The Symbiote structure allows complex payloads to be injected into legacy embedded devices, enabling the payload to safely execute alongside the original firmware without altering the embedded device’s functionality. The checksumming payload we injected into Cisco IOS can be replaced with a wide range of defensive payloads. Below are several new Symbiote payloads currently under development.

#### 10.1 Embedded Self-Healing
The checksumming Symbiote payload can be extended to reverse unauthorized memory modifications after detection. A self-healing Symbiote payload can identify and restore regions of memory that have been maliciously modified.

#### 10.2 Embedded Anomaly Detector
Symbiote payloads can implement existing anomaly detection algorithms. For example, behavior modeling strategies that monitor resource utilization, control, and data flow patterns can be injected into embedded devices via Symbiote payloads.

#### 10.3 Large-Scale Embedded Sensor Grid
The exploitation detection sensor described in this paper can be injected into large numbers of embedded devices like Cisco routers to monitor and analyze zero-day exploits. Using Symbiote-based exploitation sensors in the wild is a feasible and effective way to monitor and analyze exploits levied against the internet substrate. A large-scale Symbiote-based sensor grid can provide real-time visibility into embedded device exploitation on a global scale.

Furthermore, Symbiotes can transform embedded devices into other kinds of sensor grids. They can enable the use of hardware components in novel ways not intended by the original design. For example, power-consuming, EM-emitting components can be transformed into covert communication channels. Existing sensors on embedded devices, combined with such covert channels, can transform a wide gamut of innocuous embedded devices into a web of remotely controlled mobile sensors.

### 11. CONCLUSION

The Symbiote mechanism can augment legacy embedded devices with novel functionality in an OS-agnostic manner. The applications of this capability are numerous and will help make the introduction of modern host-based defenses on existing embedded devices a feasible reality. The checksumming Symbiote payload described in this paper is a starting point in demonstrating the unique advantages of Symbiotic defense systems. We have demonstrated that the Symbiote can automatically augment Cisco IOS with effective anti-rootkitting capabilities, laying the foundation for the construction of a large sensor-grid of legacy embedded devices to accurately detect and analyze the exploitation of the devices that make up the fabrics of our global communication infrastructures.

### 12. ACKNOWLEDGEMENTS

This material is based on research sponsored by Air Force Research labs under agreement number FA8750-09-1-0075. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. This material is also based on research sponsored by DARPA contract: CRASH program, SPARCHS, FA8750-10-2-0253.

### 13. REFERENCES

[1] kaiten.c IRC DDOS Bot. http://packetstormsecurity.nl/irc/kaiten.c.
[2] Microsoft Corporation, Kernel Patch Protection: Frequently Asked Questions. http://tinyurl.com/y7pss5y, 2006.
[3] The End of Your Internet: Malware for Home Routers, 2008. http://tinyurl.com/3d9yv9l.
[4] Network Bluepill. Dronebl.org, 2008. http://www.dronebl.org/blog/8.
[5] New worm can infect home modem/routers. APCMAG.com, 2009. http://apcmag.com/Content.aspx?id=3687.
[6] Hoi Chang and Mikhail J. Atallah. Protecting software code by guards. In Tomas Sander, editor, Digital Rights Management Workshop, volume 2320 of Lecture Notes in Computer Science, pages 160–175. Springer, 2001.
[7] Ang Cui, Jatin Kataria, and Salvatore J. Stolfo. Killing the myth of Cisco IOS diversity: Towards reliable, large-scale exploitation of Cisco IOS, 2011. 5th USENIX Workshop on Offensive Technologies.
[8] Ang Cui and Salvatore J. Stolfo. A quantitative analysis of the insecurity of embedded network devices: results of a wide-area scan. In Carrie Gates, Michael Franz, and John P. McDermott, editors, ACSAC, pages 97–106. ACM, 2010.
[9] Ang Cui and Savaltore J. Stolfo. Defending legacy embedded devices with software symbiotes. In Robin Sommer, Davide Balzarotti, and Gregor Maier, editors, RAID, volume 6961 of Lecture Notes in Computer Science. Springer, 2011.
[10] Abdallah Ghourabi, Tarek Abbes, and Adel Bouhoula. Honeypot router for routing protocols protection. In Anas Abou El Kalam, Yves Deswarte, and Mahmoud Mostafa, editors, CRiSIS, pages 127–130. IEEE, 2009.
[11] Christopher Krügel, William K. Robertson, and Giovanni Vigna. Detecting kernel-level rootkits through binary analysis. In ACSAC, pages 91–100. IEEE Computer Society, 2004.
[12] Felix “FX” Linder. Cisco Vulnerabilities. In In BlackHat USA, 2003.
[13] Felix “FX” Linder. Cisco IOS Router Exploitation. In In BlackHat USA, 2009.
[14] Richard Lippmann, Engin Kirda, and Ari Trachtenberg, editors. Recent Advances in Intrusion Detection, 11th International Symposium, RAID 2008, Cambridge, MA, USA, September 15-17, 2008. Proceedings, volume 5230 of Lecture Notes in Computer Science. Springer, 2008.
[15] Michael Lynn. Cisco IOS Shellcode, 2005. In BlackHat USA.
[16] Sebastian Muniz. Killing the myth of Cisco IOS rootkits: DIK, 2008. In EUSecWest.
[17] Ryan Riley, Xuxian Jiang, and Dongyan Xu. Guest-transparent prevention of kernel rootkits with vmm-based memory shadowing. In Lippmann et al. [14], pages 1–20.
[18] Dror-John Roecher and Michael Thumann. NAC Attack. In In BlackHat USA, 2007.
[19] Skywing. Subverting PatchGuard Version 2, 2008. Uninformed, Volume 6.
[20] Yingbo Song, Pratap V. Prahbu, and Salvatore J. Stolfo. Smashing the stack with hydra: The many heads of advanced shellcode polymorphism. In Defcon 17, 2009.
[21] Salvatore J. Stolfo, Issac Greenbaum, and Simha Sethumadhavan. Self-monitoring monitors. Technical Report cucs-026-09, Columbia University Computer Science Department, April 2009.
[22] Vikas R. Vasisht and Hsien-Hsin S. Lee. Shark: Architectural support for autonomic protection against stealth by rootkit exploits. In MICRO, pages 106–116. IEEE Computer Society, 2008.
[23] Zhi Wang, Xuxian Jiang, Weidong Cui, and Xinyuan Wang. Countering persistent kernel rootkits through systematic hook discovery. In Lippmann et al. [14], pages 21–38.