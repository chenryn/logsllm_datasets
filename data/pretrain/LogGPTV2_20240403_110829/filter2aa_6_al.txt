typeof用来区分原始值和对象，并确定原始值（不能用instanceof处理的）。不幸的是，这个运算符的结果不是完全地符合逻辑，只能大概地符合ECMAScript规范中定义的类型（参见8.1.1“JavaScript类型”中的解释），如表9.1所示。
表9.1
运算数
结果
undefined
'undefined'
null
'object'
布尔值
'boolean'
数字
'number'
字符串
'string'
函数
'function'
所有其他的常规值
'object'
（引擎创建的值）
JavaScript引擎可以被允许去创建一些值，且typeof的结果可以返回任意字符串（可以与表中列出的结果都不一样）
陷阱：typeof null
很不幸，typeof null返回object是一个不能去修正的bug，因为这会破坏现有的代码。因此你只能谨慎对待null。比如以下这个判断value是不是一个对象的函数：
尝试执行后会得到：
typeof null的历史
第一代JavaScript引擎中的JavaScript值表示为32位的字符。最低的3位作为一种标识，表示值是对象、整数、浮点数或者布尔值（正如你所了解的那样，即使这些早期的引擎，都已经尽可能地将数字存储为整数了）。
对象的标识是000。而为了表现null值，引擎使用了机器语言NULL指针，该字符的所有位都是0。而typeof就是检测值的标志位，这就是为什么它会认为null是一个对象。[4]
检测值是否存在
以下检测：
有两个用处：
（1）检测x是否为undefined。
（2）检测变量x是否存在。
有以下两种场景：
9.8.2 instanceof：检测对象是否是给定构造函数的实例
instanceof运算符：
检测value是否是由构造函数Constr创建的或是否为它的一个子类。示例如下：
undefined和null调用instaneof的结果是false：
但是对于其他的原始值也是false：
更多instanceof细节，参见17.10.4“instanceof运算符”。
9.9 对象运算符
以下三个运算符只对对象有效。它们会在其他地方有详细说明。
new（参见17.10“第3层：构造函数——实例工厂”）
调用一个构造函数——示例：new Point(3, 5)
delete（参见17.1.3小节的“删除属性”）
删除一个属性——示例：deleteobj.prop
in（参见17.5“遍历和检测属性”）
检测一个对象是否包含一个给定的属性——示例：'prop' in obj
[1] 严格来讲，设置数组元素是设置属性的特例。
[2] 感谢Brandon Benvie(@benvie)，他告诉我可以对IIFE使用void。
[3] 源自：http://en.wikipedia.org/wiki/Bookmarket。
[4] 感谢Tom Schuster（@evilpies）指导我查看第一代JavaScript引擎的源码。
第10章 布尔类型
原始的布尔类型包括两个值，true和false：
10.1 转换成布尔值
其他值到布尔值的转换如表10.1所示。
表10.1
值
转换成的布尔值
undefined
false
null
false
布尔值
与输入相同（不用转换）
数字
0，NaN转换成false，其他数字转换成true
字符串
''转换成false，其他字符串转换成true
对象
总是为true
10.1.1 手动转换为布尔值
有三种方式可以将任意值转换成布尔值：
Boolean(value) (Invoked as a function, not as a constructor)
value ? true : false
!!value     A single "not" converts to negated boolean;
         use twice for the nonnegated conversion.
建议使用Boolean()，因为这种方式更加直观。这里有一些例子：
10.1.2 真值和假值
凡是在JavaScript需要布尔值的地方，都可以提供任意类型的值，它会自动转换成一个布尔值。因此，在JavaScript中有两类值的集合：一个集合转换成false，另一个集合转换成true。这些集合叫作假值和真值。根据表10.1，下面这些都是假值。
undefined, null。
Boolean：false。
Number：0, NaN。
String：。
所有其他的值——包括所有的对象，甚至是空对象、空数组，以及new Boolean(false)，都是真值。因为undefined和null都是假值，你可以使用if语句来检查一个变量x是否有值：
需要谨慎的是前面的检查会把所有的假值解释成“没有值”，而不仅仅是undefined和null。但是如果能接受这种限制，你就可以使用这种简洁和既定的模式。
陷阱：所有的对象都是真值
所有的对象都是真值：
这和对象转换成数字或者字符串的方式不同，转换成数字或字符串时可以通过实现valueOf()和toString()方法来控制结果：
历史：为什么对象总是为真？
布尔值转换的不同是有历史原因的。对于ECMAScript 1，曾经决定不支持通过对象配置来转换（例如，通过toBoolean()方法）。原理是布尔运算符||和&&会保持运算数的值。因此，如果链式使用这些运算符，会多次确认相同值的真假。这样的检查对于原始类型成本不大，但是对于对象，如果能够通过配置来转换成布尔值，成本很大。ECMAScript 1通过使去掉对象总是为真避免了这样的成本。
10.2 逻辑运算符
在这一节，我们会讨论基本的逻辑运算符：与(&&)，或(||)，非(!)。
10.2.1 二元逻辑运算符：与(&&)和或(||)
二元逻辑运算符是：
（1）值保留
总是返回其中的一个运算数，且不改变它的值：
（2）短路
如果第一个运算数已经决定了结果，则不再求第二个运算数的值。举个例子：（console.log的结果是undefined）：
对于运算符来讲这种行为并不常见。通常情况下，在运算符执行之前，会对所有运算数求值（比如for函数）。
10.2.2 逻辑与(&&)
如果第一个运算数能被转换成false，则返回这个值。否则，返回第二个运算数：
10.2.3 逻辑或(||)
如果第一个运算数能被转换成true，则返回这个值。否则，返回第二个运算数：
模式：提供一个默认值
有时候在某些场景中的值（参数、函数结果等）可能为空值（undefined，null），或者实际的值。如果想为前一种情况提供一个默认值，可以使用或运算符：
上面的表达式如果theValue为真会取theValue的值，否则取defaultValue的值。通常需要注意的是：如果theValue是一个不为undefined和null的假值，则会返回defaultValue。让我们来看看使用这种模式的三个例子。
示例1：参数的默认值
函数saveText()的参数text是可选的，并且当被忽略的时候应该是一个空字符：
将||作为默认运算符是最常见的用法。更多关于可选参数的内容参见15.8.3“可选参数”。
示例2：属性的默认值
options对象可能有属性title。如果没有，应该被设成Untitled：
示例3：函数结果的默认值
函数countOccurences计算regex在str中被匹配的频率：
问题是match()方法（参见19.7“String.prototype.match: 捕获分组或返回所有匹配的子字符串”）会返回一个数组或者null。幸好有||，在后一种情况下可以设定一个默认值。因此，在这两种情况下你都可以安全地访问length属性。
10.2.4 逻辑非(!)
逻辑非运算符!会将它的运算数转换成布尔值，然后取反：
10.3 等号运算符、排序运算符
下面这些运算符会在其他章节讨论到。
等号运算符：===，!==，==，!=（见9.3“等号运算符：===和==”）
排序运算符：>，>=，<，<=（见9.4“排序运算符”）
10.4 Boolean函数
Boolean函数有两种调用方式。
Boolean(value)
作为一个普通函数，它将value转换成一个原始的布尔值（参见10.1“转换成布尔值”）：
new Boolean(bool)
作为一个构造函数，它会创建一个Boolean的实例（参见8.4“原始值的包装对象”），一个封装了bool（在转换成布尔值之后）的对象。举个例子：
前面的调用方式比较常见。
第11章 数字
JavaScript对所有的数字只有一种类型：它把所有的数字都作为浮点数。不过，如果小数点后没有数字，这个点也不会显示出来：
大部分的JavaScript引擎会在内部做优化并区分浮点数字和整数（详情请参见11.6“JavaScript中的整型”）。不过那都是程序员看不到的东西。
JavaScript的数字是双精度值（64位），基于浮点算术的IEEE标准（IEEE 754）。很多编程语言都使用了该标准。
11.1 数字字面量
一个数字字面量可以是整型、浮点型或者十六进制（整型）：
11.1.1 说明
指数eX，是10x次方的缩写：
11.1.2 在字面量上调用方法
对于数字字面量，用来访问一个属性的点必须要和小数点的点区分开来。如果想在数字字面量123上调用toString()方法，有下面几种方法可选：
11.2 转换成数字
其他值到数字的转换如表11.1所示。
表11.1
值
结果
undefined
NaN
null
0
布尔值
false转换成0，true转换成1
数字
保持不变（没什么好转换的）
字符串
解析字符串中的数字（忽略开头和结尾的空格）；空字符转换成0。比如'3.141'转换成3.141
对象
调用ToPrimitive(value, number)（参见8.5.3“算法：ToPrimitive()——将值转换为原始值”）并转换生成的原始类型
在将空字符串转换成数字时，NaN可以说是比较好的结果。选择结果0是为了方便处理空的数字输入域，这和20世纪90年代中期其他编程语言的做法一致。[1]
11.2.1 手动转换为数字
两种将任意值转换为数字的最常用方法是：