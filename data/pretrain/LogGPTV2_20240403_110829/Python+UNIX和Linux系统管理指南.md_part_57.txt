花了大约34秒。但是内存使用非常大，用了大约130MB内存。其原因是generate_log.
对于数据提取库的正则表达式版本，花了大约46秒。对于使用string.split()的版本，
本：
def dictify_logline(line):
#1/usr/bin/env python
user
real
190.20.250.250
190.40.10.0
IP ADDRESS
access_bigger.log
return report_dict
split_line = line.split()
Currently, the only fields we are interested in are remote host and bytes sent,
第14章
'return a dictionary of format remote_host=>[list of bytes sent]
att sot pautquos auoede ue jo sasatd zuautirad aut fo Kreuotiotp e uinzai..
report_dict[host] = report_dict.setdefault(host, o) + bytes_sent
except ValueError:
try:
#print line_dict
line in logfile:
host=
0m0.896s
0m33.354s
0m34.261s
bytes_sent = int(line_dict['bytes_sent'])
continue
##totally disregard anything we don't understand
：line_dict['
237440000
699160000
BYTES TRANSFERRED
'remote_host']
www.TopSage.com
*本**
PDG
---
## Page 423
的summarize_logfiles脚本，添加了新的选项，该选项针对加载占用内存较少版本的库：
当其运行的时候，大体上符合bytes_sent，而不是创建的调用函数符合。以下是略微修改
def obfuscate_ipaddr(addr):
def combine_lines(files):
def open_files(files):
#1/usr/bin/env python
from optparse import OptionParser
aweu
if options.consolidate:
opened_files = open_files(logfiles)
if options.regex:
(options, args) = parser.parse_args()
return
for
else:
for
opened_files = (('CONSOLIDATED', combine_lines(opened_files)),)
yield (f, open(f))
 from apache_log.parser_split_mem import generate_log_report
from apache_log_parser_regex import generate_log_report
action='store_true'
print
int“%-20s%s"
int
"join(str((int(n) / 10) * 10) for n in addr.split('.'))
yield line
f_obj in files:
else:
print "%-20s%s" % (obfuscate_ipaddr(ip_addr), bytes)
60
60
60
I-
, help="use mem parser")
help=
"--consolidate", dest="consolidate", default=False,
--mem",
www.TopSage.com
default=False,
default=False,
实例丨409
DG
---
## Page 424
410
望下载数据的服务器进行访问的权限，怎么办？这里有一个办法。以下是mirror脚本的
员这似乎是不太可能的，但是它碰巧发生了）。或者如果你没有使用sSH或rsync对你希
rsync不能安装到你正使用的服务器上并且你不允许安装它，将怎么办？（对于系统管理
源码：
点在哪里？rsync不能处理所有这些工作么？”回答是肯定的“是的，它不能”。
个服务器上的文件。在获得文件之后，也允许进行删除。你或许奇怪“这个脚本的关键
接下来的示例演示了如何连接到一个FTP服务器，递归获得用户指定目录中的所有在那
FTP镜像
用会随着独立IP地址而增长。如果内存消耗成为问题，你可以将字典与一个持久数据库
样。然而，由于这里使用了一个字典，并且每个关键字是独一无二的IP地址，内存的使
志文件。理论上讲，文件大小可以是不确定的，内存不会增长，就像它在之前版本中那
对于每个运行周期，
并且，这实际上比内存不足版本更快：
（或是关系数据库，甚至是BerkeleyDB）进行交换。
class FTPSync(object):
import ftplib
#1/usr/bin/env python
import os
sys
user
real
190.20.250.250
190.40.10.0
IP ADDRESS
access_bigger.log
第14章
def
self.delete= delete
self.ftp_base_dir = ftp_base_dir
self.password = password
self.host = host
self.username=username
0m0.636s
0m29.866s
0m30.508s
，内存的消耗稳定在大约4MB。这个脚本将每分钟处理大约2GB的日
237440000
699160000
BYTES TRANSFERRED
local_base_dir, delete=False):
www.TopSage.com
*****
 ==== ==== = = === = == =
*******
。如果
---
## Page 425
def
def
def
action='store',
action='store'
run(self):
for d in dirs:
except OSError:
self.conn.cwd(next_dir)
except OSError:
self.conn = ftplib.FTP(host, username, password)
self.walk('.')
for
print
ftp_curr_dir = self.conn.pwd()
os.chdir(next_dir)
dir
try:
local_curr_dir = os.getcwd()
irs=
es=
f in files:
_res
os.chdir(local_curr_dir)
if self.delete:
finally:
try:
os.mkdir(next_dir)
os.makedirs(local_base_dir)
self.walk(d)
self.conn.cwd(ftp_curr_dir)
pass
pass
print "Deleting",
outf.close()
self.conn.retrbinary('RETR %s' % f, outf.write)
=
main_
0
-p"
help="FTP username")
help="FTP host")
-0
(wb`)
"--host",.
，8)[-1]
"--password",
www.TopSage.com
+
for f in dir_res if f.startswith('d')]
dest="host",
, dest="password",
dest="username",
,′ dest="remote_dir",
实例丨411
款乎，
---
## Page 426
412
用walk()，并传递它到当前的FTP目录。
我们定义的最后一个方法是run()。run()是一个简单而便捷的方法。调用run()简单地调
回到我们所在的位置。
目录。我们再次改变目录到当前目录的原因是当更低层的walk()调用返回时，我们可以
删除文件。接下来，改变目录到FTP服务器的当前目录，调用walk()来进入到更低级的
一个文件，通过使用retrbinary(）FTP方法来获得。如果删除标志被传递进来，我们也
用已经介绍过的get_dirs_files()方法下载这个目录中的文件和目录。对于目录中的每
到变量ftp_curr_dir和本地位置到变量local_curr_dir中，以备将来使用。接下来，使
地服务器的目录上（如果需要的话就进行创建）。然后，保存当前在FTP服务器的位置
人。在wa1k()方法中的代码首先修改FTP服务器的目录到指定的目录。接下来改变到本
数。我们让它调用自己。如果任何目录包括其他其子目录，这些子目录都会被逐一进
有单一的参数：下一个被访问的目录。在更进一步了解之前，需要指出这是一个递归函
下一个我们定义的方法是walk()。该方法是大量处理工作发生的地方。walk()方法只
这表示我们不用跟踪链接，也不用处理块设备。
个是目录。如果字符是“d”，那么它就是目录。如果字符是“-”，
作）。它通过一个目录列表，查看列出的每一行的第一个字符，识别出哪个是文件，哪
当前目录中哪个是文件哪个是目录。（顺便说一句，这是Unix服务器上唯一需要做的工
有三个额外定义的方法：get_dirs_files()、walk()和run()。get_dirs_files()决定在
异常，我们将忽略该异常。
地启始目录之前，我们首先进行创建。如果该目录已经存在，我们将获得一个OSError
到指定的服务器起始目录，并且改变本地目录到本地主机的起始目录。在实际修改到本
一旦用对象属性设置完这些值，我们连接到指定的FTP服务器并登录。然后，改变目录
置的默认值为False。
标志，指定一旦你下载远端服务器上的文件完毕，是否进行删除一
你的本地服务器的合适位置，必须传递ftp_base_dir和local_base-dir。delete是一个
你必然传递给它host、username以及password。为了进入远端服务器的合适位置，以及
这个脚本对于使用类进行编写略微有些容易。构造器获得一些参数。为了连接并登录，
第14章
f.run()
action='store',
options.remote_dir,options.local_dir,options.delete)
help="FTP remote starting directory"
www.TopSage.com
dest:
Local
, default=False,
dir"
，那么它就是文件。
在构造器中我们设
---
## Page 427
时候，脚本将再次开始下载文件。不用删除它已经下载的文件部分。
得到一个异常。在这种情况下，程序将终止。如果脚本在下载的中间终止，
行。如果异常发生，我们不用再次尝试下载文件。如果一些事情导致下载失败，我们将
并且确信至少host、username和password被传入。如果没有特别指定，脚本将很快被执
在这个脚本中有一些非常基本的错误和异常处理。首先，不用检测所有的命令行参数，
www.TopSage.com
下次开始的
实例| 413
DC
---
## Page 428
Solaris/OpenSolaris 电子书、视频等精华资料下载索引
FreeBSD/OpenBSD/NetBSD 精品学习资源索引含书籍+视频
UNIX操作系统精品学习资料分类总汇
Linux shell、内核及系统编程精品资料下载汇总
Linux 系统管理员必备参考资料下载汇总
天罗地网：精品Linux 学习资料大收集(电子书+视频教程)Linux参考资源大系
经典 LinuxCBT 视频教程系列Linux 快速学习视频教程一帖通
UML 学习电子资下载汇总 软件设计与开发人员必备
网络最强 PHP 开发工具+电子书+视频教程等资料下载汇总
最新JavaScript、Ajax 典藏级学习资料下载分类汇总
最强HTML/xHTML、CSS 精品学习资料下载汇总
数据库精品学习资源汇总：MySQL 篇丨SQL Server 篇丨Oracle 篇
最新最全 Ruby、Ruby on Rails 精品电子书等学习资料下载
Python 语言编程学习资料(电子书+视频教程)下载汇总
Perl/CGI 脚本语言编程学习资源下载地址大全
VisualC++(Vc/MFC)学习电子书及开发工具下载
撼世出击：C/C++编程语言学习资料尽收眼底 电子书+视频教程
Java一览无余：Java 视频教程丨Java SE丨Java EE
软考视频”考试机构”考试时间安排
软考官方指定教材及同步辅导书下载”软考历年真是解析与答案
.Net技术精品资料下载汇总：VB.NET篇
Net 技术精品资料下载汇总：C#语言篇
Net技术精品资料下载汇总：ASP.NET篇
计算机精品学习资料大放送
www.TopSage.com
---
## Page 429
Out[4]:
In [4]: dir(foo)
In [3]: type(foo)
In [1]: def foo():
例A-1：函数作为“第一个类”
将它们视为对象一
知道它是怎么运行的。在Python中，函数是“第一个类”，
.：
你进行深入研究，能够理解得足够透彻而使用它，或者最起码，当你看到它被使用时，
回调（callback）和传递函数的概念或许对你来说还很陌生。
+**
_repr_
_class_
init
get
 print foo
一因为它们事实上就是一类对象。参见例A-1。
www.TopSage.com
，这意味着你可以传递它们，
。如果真是这样，它显然值得
回调
附录
415
---
## Page 430
 In [1]: def foo():c
例A-2：通过函数名引用函数
例A-2。
名字能够获得函数所具有的任何属性，甚至之后用不同的名称引用函数仍然如此。参见
过bar来访问它。调用foo和bar将产生相同的结果。
相同的事情，也就是说它是一个foo函数。我们设置名为foo的函数的属性，并且可以通
数foo。在Python中，你通常考虑可作为变量的往往是某个对象的名字。连接一个名称与
我们创建了一个新函数foo，它包括一个docstring。之后，我们声明bar指向刚创建的函
In [7]: foo.a = 1
In [4]: bar = foo
简单地对函数进行引用，例如在之前示例中的foo，并非对函数进行调用。引用函数的
416
的关于foo的基本信息，它向回报告这是一个foo函数。有趣的是，它说的是与名称bar
个函数对象，然后绑定foo到一个新的函数。使用IPython提示符来查看，我们可以了解
一个对象的过程称为“名称绑定”
Out[6]:
func_dict',
func_defaults',
func_code',
'func_closure',
func_doc',
[10]: bar()
FUNCTION FOO
...·
:1
'this is a docstring'
附录
'this is a docstring'
bar
。因此当我们创建函数foo时，我们实际上创建了一
www.TopSage.com
---
## Page 431
为自己不会使用回调，它仍然是一个值得你记住的思维过程。
行时的动态机制，具有实现代码－时间可扩展性，并能够改进代码的重用性。即使你认
在本书中我们使用回调是在第5章的网络部分。在这一章的FTP示例中，传递函数允许运
www.TopSage.com
回调1417
---