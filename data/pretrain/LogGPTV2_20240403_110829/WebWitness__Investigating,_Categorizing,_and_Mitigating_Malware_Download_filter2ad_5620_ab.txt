One of the goals of our system is to automatically trace
back the sequence of steps (i.e., HTTP transactions) that
lead victims to be infected via a malware download. One
may think that reconstructing the web path to infection
is fairly easy, because we could rely on the Referer and
Location header ﬁelds to link subsequent HTTP trans-
actions together (see RFC2616). For example, a simple
strategy would be to start from the download transaction
and “walk back” the sequence of transactions by follow-
ing the Referer header found in the HTTP requests.
Unfortunately, in practice download path traceback is
much more difﬁcult than it may seem at ﬁrst. Depend-
ing on the particular version of the browser, JavaScript
engine, and plugin software running on the client, the
Referer and/or Location headers may be suppressed
(e.g., see [14]), resulting in the inability to correctly re-
construct the entire sequence of download path transac-
tions in a given network trace.
Deriving and Measuring Surrogate Features: As part
of our study, we reviewed hundreds of malicious down-
load traces. In most cases we cannot rely completely on
the Referer and Location headers, and we therefore
derive surrogate “referrer indicator” features and heuris-
tics, which can be used to perform a more complete
download path traceback. Next, we deﬁne each of the
features we observed, and then provide a measure of how
prevalent they are for malware download paths. While in
this section we simply measure their prevalence, we later
use these features to automate path traceback (Section 3).
First, let us more precisely deﬁne what we mean with
download path traceback. Let Td indicate an HTTP
USENIX Association  
24th USENIX Security Symposium  1027
3
transaction carrying an executable ﬁle download initi-
ated by client C. Given the recording of all web trafﬁc
generated by C during a time window preceding (and in-
cluding) Td, we would like to reconstruct the sequence
of transactions (T1,T2, . . . ,Td) that led to the download,
while ﬁltering out all unrelated trafﬁc. This sequence
of transactions may be the consequence of both explicit
user interactions (e.g., a click on a link) and actions taken
by the browser during rendering (e.g., following a page
redirection). Notice that the trafﬁc trace we are given
may contain a large number of transactions that are com-
pletely unrelated to the download path, simply because
the user may have multiple browser tabs open and multi-
ple web-based applications active in parallel. Thus, po-
tentially producing a large amount of overlapping unre-
lated trafﬁc.
Let T1 and T2 be two HTTP transactions. We found
that the features/heuristics listed below can be used to
determine whether T1 is a likely source of T2, therefore
allowing us to “link” them with different levels of con-
ﬁdence. Table 1 summarizes the prevalence of each fea-
ture in both drive-by and social engineering downloads
(we discuss how we can distinguish drive-by from social
engineering later in Section 2.5). A detailed discussion
of how WebWitness uses these features for automated
download path traceback is given in Section 3.
(1) Location: According to RFC2616, if transaction
T2’s URL matches T1’s Location header, it indi-
cates that T2 was reached as a consequence of a
server redirection from T1.
(2) Referrer: Similarly,
if T1’s URL matches T2’s
Referer header, this indicates that the request for
T2 originated (either directly or through a redirec-
tion chain) from T1, for example as a consequence
of page rendering, a click on a hyperlink, etc.
(3) Domain-in-URL: We observed that advertisement
URLs often embed the URL of the page that dis-
played the ad. So, if T1’s domain name is “em-
bedded” in T2’s URL, it is likely that T1 was the
“source” of the request, even though the Referer
is not present. This is especially true if there is only
a small time gap between the transactions.
(4) URL-in-Content: If T1’s response content includes
T2’s URL (e.g., within an HTML or non-obfuscated
JavaScript code), this indicates there is (potentially)
a “source of” relationship that links T1 to T2.
(5) Same-Domain: By investigating numerous drive-by
malware downloads, we found that in many cases the
exploit code and the malware executable ﬁle itself
are served from the same domain. This approach is
likely chosen by the attackers because if the exploit
is successfully served, it means that the related mali-
cious domain is currently reachable and serving the
malware ﬁle from the same domain helps guarantee a
successful infection (a similar observation was made
in [13]). Therefore, if T1 and T2 share the same do-
main name and are temporally close, this likely indi-
cates that T1 is the “source of” T2.
(6) Commonly Exploitable Content (CEC): In our ob-
servations, most drive-by downloads use “commonly
exploitable” content (e.g., .jar, .swf, or .pdf ﬁles that
carry an exploit) to compromise their victims. The
exploit downloads the malicious executable; thus,
if T1 contains commonly exploitable content (CEC)
and T2 is an executable download that occurred
within a small time delta after T1, this indicates that
T1 may be the “source of” T2.
(7) Ad-to-Ad:
In some cases, we observed chains
of ad-related transactions where the Referer and
Location header are missing (e.g., due to JavaScript
or plugin-driven redirections). Therefore, if T1 and
T2 are consecutive ad-related requests (e.g., identi-
ﬁed by matching their URLs against a large list of
known ad-distribution sites) and were issued within
a small time delta, this indicates there may be a
“source of” relationship.
Table 1: Success rate of traceback method and “Source-
of” relationships in malware download paths. The num-
bers indicate the percentage of analyzed download paths.
Traceback method success rate
Only Referrer and Location
All surrogate referrer features
Drive-by
0%
96%
Social Eng.
53%
95%
Feature
Location
Referrer
Domain-in-URL
URL-in-Content
Same-Domain
CEC
Ad-to-Ad
Drive-by
69%
97%
0%
17%
97%
5%
6%
Social Eng.
73%
100%
5%
17%
20%
0%
10%
As a conﬁrmation to the fact that tracing back malware
download paths is challenging, we found that not a single
drive-by download in our dataset could be traced back
by relying only on the Referer and Location head-
ers. For example, even if 97% of the drive-by download
paths contained at least one pair of requests linked via
the Referer, all drive-by paths contained at least some
subsequence of the path’s transactions that could not be
“linked” by simply using the Referer header.
For social engineering paths, we found that 53% of the
downloads could be traced back using only the Referer
and Location headers. When this was not possible,
the main cause was the presence of requests made via
JavaScript and browser plugins. In some cases, we were
not able to fully trace back the download path. The cause
for the majority of the untraceable drive-by (4%) and so-
cial engineering (5%) downloads, when using all the fea-
tures, was missing transactions likely due to our system
1028  24th USENIX Security Symposium 
USENIX Association
4
not observing all related packets.
2.5 Drive-by vs. Social Engineering
We label a malware download path as social engineer-
ing if explicit user interaction (e.g., a mouse click) is re-
quired to initiate a malware download. In contrast, we
label as drive-by those malware downloads that are trans-
parently delivered to the victim via a browser exploit.
As mentioned earlier (Section 2.3), during our study, we
were able to manually review and label 164 drive-by and
41 social engineering malware downloads.
What distinguishes drive-by from social-engineering:
In the following we report the characteristics that we ob-
served for different types of paths. In particular, some of
these characteristics could be leveraged as statistical fea-
tures to build a classiﬁer that automatically distinguishes
between drive-by and social engineering downloads (see
Section 3). We also discuss characteristics of malware
updates/drops that could be used to ﬁlter out download
paths that belong neither to the drive-by nor to the social-
engineering class. Table 2 summarizes the prevalence of
each of the characteristics described below.
Table 2: Download path properties.
Feature
Candidate Exploit Domain Age
Drive-by URL Similarity
Download Domain Recurrence
Download Referrer
Download Path Length
User-Agent Popularity
Drive-by
0
69%
0.6%
0.6%
6
95%
Social eng.
-
0%
34%
95%
7
98%
(1) Candidate Exploit Domain “Age”: Drive-by
download attacks often exploit their victims by de-
livering exploits via ﬁles of popular content types
such as .jar, .swf, or .pdf ﬁles; we simply re-
fer to these ﬁle types as “commonly exploitable”
content (CEC). For example, during our study, we
found that 94% of the drive-by download paths at
some point delivered the exploit via CEC. The do-
mains serving these exploits tend to be short-lived
compared to domains serving benign content of the
same type. Therefore, CEC served from a recently
registered domain is an indicator of a possible drive-
by download path. On the other hand, none of the so-
cial engineering download paths we observed during
our study had this property. Table 2 reports the me-
dian domain name “age”, computed as the number
of days of activities for the domain of a page serv-
ing CEC, measured over a very large passive DNS
database. The median age is less than one day for
drive-by paths, and is not indicated for social engi-
neering paths, because none of the nodes in the so-
cial engineering path served content of the type we
consider as CEC (the overall trafﬁc traces included
HTTP transactions that carried content such as .swf
ﬁles, but none of those were on the download path).
(2) Drive-by URL Similarity: The majority of drive-
by downloads (about 70% of our observations) are
served by a small number of exploit kits. Therefore,
in many cases the exploit delivery URLs included in
drive-by download paths share a structural URL sim-
ilarity to known exploit kit URLs. Table 2 reports the
fraction of drive-by download paths that had a sim-
ilarity to known exploit kit URLs greater than 0.8,
measured using the approach proposed in [26].
(3) Download Domain Recurrence: Most domains
serving drive-by and social engineering malware
download are contacted rarely, and often only once
by one particular client at the time of the attack. On
the other hand, malicious software regularly checks
for executable updates. To approximately capture
this intuition, we measured the number of queries to
the malware download domain. As shown in Table 2,
only 0.6% of the malware download domains in our
drive-by paths are queried mulitple times within a
small time window (two days, in our measurements).
The higher percentage of social engineering malware
paths with download domain recurrence is due to the
fact that a signiﬁcant fraction of the ones we ob-
served used a free ﬁle sharing website for the mal-
ware download and that we count the domain query
occurrences in aggregate, rather than per client.
(4) Download Referrer: In case of social engineering
attacks, the HTTP transaction that delivers the mali-
cious ﬁle download tends to carry a Referer, usu-
ally due to the direct user interaction that character-
izes them. On the other hand, drive-by attack mal-
ware ﬁle delivery happens via a browser exploit. The
request initiated from the shell code typically does
not have a Referer header. Similarly, malware up-
dates/drops initiated by malicious applications are
already running on a compromised machine, and
usually do not carry any referrer information. Ta-
ble 2 shows that only 0.6% of all drive-by paths, in
contrasts to 95% of social engineering paths, carried
a Referer in the download node.
(5) Download Path Length: Drive-by and social en-
gineering attacks typically generate download paths
consisting of several nodes, mainly because a user
has to ﬁrst browse to a site that eventually leads to
the actual attack. In addition, the malware distribu-
tion infrastructure is often built in such ways that en-
ables malware downloads “as a service”, which en-
tails the use of a number of “redirection” steps. In
contrast, download paths related to malware updates
or drops tend to be very short. Table 2 reports the
median number of nodes for drive-by and social en-
gineering paths. In case of malware updates/drops,
the median length for the path was only one node.
USENIX Association  
24th USENIX Security Symposium  1029
5
(6) User-Agent Popularity: The download paths for
both drive-by and social engineering downloads typ-
ically include several nodes that report a popular
browser user-agent string, as the victims use their
browser to reach the attack. On the other hand,