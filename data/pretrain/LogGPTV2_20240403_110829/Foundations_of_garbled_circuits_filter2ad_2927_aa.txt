title:Foundations of garbled circuits
author:Mihir Bellare and
Viet Tung Hoang and
Phillip Rogaway
Foundations of Garbled Circuits
Mihir Bellare
Dept of CS and Engineering
UC San Diego, USA
Viet Tung Hoang
Dept of Computer Science
UC Davis, USA
Phillip Rogaway
Dept of Computer Science
UC Davis, USA
ABSTRACT
Garbled circuits, a classical idea rooted in the work of Yao,
have long been understood as a cryptographic technique, not
a cryptographic goal. Here we cull out a primitive corre-
sponding to this technique. We call it a garbling scheme. We
provide a provable-security treatment for garbling schemes,
endowing them with a versatile syntax and multiple secu-
rity deﬁnitions. The most basic of these, privacy, suﬃces
for two-party secure function evaluation (SFE) and private
function evaluation (PFE). Starting from a PRF, we provide
an eﬃcient garbling scheme achieving privacy and we ana-
lyze its concrete security. We next consider obliviousness and
authenticity , properties needed for private and veriﬁable out-
sourcing of computation. We extend our scheme to achieve
these ends. We provide highly eﬃcient blockcipher-based
instantiations of both schemes. Our treatment of garbling
schemes presages more eﬃcient garbling, more rigorous anal-
yses, and more modularly designed higher-level protocols.
Categories and Subject Descriptors
D.4.6 [Software]: Security and Protection—cryptography;
E.3 [Data]: Data Encryption—symmetric encryption
Keywords
Garbled circuits, garbling schemes, provable security, secure
function evaluation, Yao’s protocol
INTRODUCTION
1.
Overview.
This paper is about elevating garbled cir-
cuits from a cryptographic technique to a cryptographic goal.
While circuit garbling has traditionally been viewed as a
method for achieving SFE (secure function evaluation) or
some other cryptographic goal, we view it as an end goal
in its own right, deﬁning garbling schemes and formaliz-
ing several notions of security for them, these encompassing
privacy, authenticity, and obliviousness. This enables more
modular use of garbled circuits in higher-level protocols and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
grounds follow-on work, including the development of new
and highly eﬃcient schemes.
History. The idea of a garbled circuit is due to A. Yao,
who described the technique in oral presentations [18] (p. 27)
about SFE [50, 51]. The ﬁrst written account of the method
is by Goldreich, Micali, and Wigderson [19]. The protocol
they describe, crediting Yao [50], involves associating two
tokens to each wire of a boolean circuit, these having hidden
semantics of 0 and 1. Means are then provided to propa-
gate tokens across a gate, preserving the hidden semantics.
More speciﬁcally, there’s a four-row table for each gate of
the circuit, each row employing public-key encryption to en-
crypt a pair of random strings whose xor is the token for the
outgoing wire.
The term garbled circuit is from Beaver, Micali, and Rog-
away [10], where the method was ﬁrst based on a symmetric
primitive. Garbled circuits took on a modern, PRF-based in-
stantiation in work by Naor, Pinkas, and Sumner on privacy-
preserving auctions [40].
Yao’s idea has been enormously impactful, engendering
numerous applications, implementations, and reﬁnements.
Still, there has been little deﬁnitional attention paid to gar-
bled circuits themselves. Lindell and Pinkas [35] provide the
ﬁrst proof of Yao’s protocol—to the extent one can say that
a particular scheme is Yao’s—but, even there, the authors do
not formalize garbled circuits or what it means to securely
create one.
Instead, they prove that a particular garbled-
circuit-using protocol, one based on double encryption [18],
is a secure two-party SFE. Implemented SFE methods do not
coincide with what’s in Lindell and Pinkas [35], and absence
of a good abstraction boundary makes daunting the task of
providing a full proof for what’s actually in optimized SFE
implementations.
Scattered throughout the enormous literature dealing with
garbled circuits, several papers do work to abstract out what
these provide. A ﬁrst set of such work begins with Feige,
Kilian, and Naor [15] and is followed by [8, 13, 28, 30]. Each
paper aims to modularly use garbled circuits in some intend-
ing application. To that end, they single out, deﬁnitionally,
precisely what they need, usually arriving at something close
to what we will later call “prv.sim security over Φcirc.” None
of the papers pick up deﬁnitions from any other, nor does
any prove that any particular construction satisﬁes the no-
tion given. The conceptualization of garbling as involving
a component that creates garbled circuits and another that
evaluates them is found in all of these works, and in Schnei-
der’s [47, 48]. A second line of deﬁnitions begins with Ishai
and Kushilevitz [25] and continues with [2, 3, 5, 6, 26, 27, 46].
784These works deﬁne various ﬂavors of randomized encodings.
Their authors do see randomized encodings as a general-
purpose primitive, and the deﬁnitions elegantly support a
variety of theory-centered work. However, they lack the
ﬁne-grained syntax that we shall need to investigate oblivi-
ousness, authenticity, and precise measures of eﬃciency. Fi-
nally, in concurrent work, Kamara and Wei oﬀer deﬁnitions
to support their idea of garbling structured circuits [29]. See
Appendix A for further discussion of selected related work.
Contributions. We formalize what we call a garbling
scheme. The notion is designed to support a burgeoning and
practical area: the myriad applications of garbled circuits.
Our deﬁnitions and results enable easy and widespread ap-
plications with modular, simpliﬁed, and yet more rigorous
proofs of security.
Roughly said, a garbling algorithm Gb is a randomized al-
gorithm that transforms a function f : {0, 1}n → {0, 1}m
into a triple of functions (F, e, d) ← Gb(f ). We require that
f = d ◦ F ◦ e. The encoding function e turns an initial input
x ∈ {0, 1}n into a garbled input X = e(x). Evaluating the
garbled function F on the garbled input X gives a garbled
output Y = F (X). The decoding function d turns the gar-
bled output Y into the ﬁnal output y = d(Y ), which must
coincide with f (x). Informally, one has probabilistically fac-
tored f into d◦F ◦e. Formally, it is problematic to regard Gb
as operating on functions. Thus a garbling scheme G = (Gb,
En, De, Ev, ev) is regarded as a ﬁve-tuple of algorithms, with
strings d, e, f , and F interpreted as functions under the
auspices of functions De, En, ev, and Ev. See Fig. 1.
Our syntactic framework is representation-independent;
circuits are nowhere to be found. One can garble DFAs,
OBDDs, RAMs, TMs, whatever; deﬁnitionally, this isn’t
even seen. See Section A, “Eclectic representations.”
Of course none of this says anything about the desired
security notion. We deﬁne several. The most important is
privacy: a party acquiring (F, X, d) shouldn’t learn anything
impermissible beyond that which is revealed by knowing just
the ﬁnal output y. To formalize that which it is permissi-
ble to reveal, a side-information function, Φ, parameterizes
the deﬁnition; an adversary should be able to ascertain from
(F, X, d) nothing beyond Φ(f ) and y. By varying Φ one
can encompass the customary setting for SFE (let Φ(f ) = f ;
circuit f is not concealed) and PFE (private function eval-
uation) (let Φ(f ) be the number of gates of f ; leak just the
circuit’s size). We formalize privacy in multiple ways, giving
an indistinguishability deﬁnition, prv.ind, and a simulation-
based one, prv.sim. We show that whether or not they are
equivalent depends on the side-information function Φ. For
the most important ones the notions are equivalent (in gen-
eral, they are not).
We provide a simple garbling scheme, Garble1, for achiev-
ing privacy. The scheme is conveniently described in terms
of a dual-key cipher (DKC), a notion we put forward. We
deﬁne a DKC’s security and prove privacy for Garble1 un-
der this assumption. Garble1 is described with uncustomary
precision, including a detailed and precise deﬁnition of cir-
cuits. We show how to make a DKC from a pseudorandom
function (PRF), and how to realize the PRF using a con-
ventional blockcipher, say AES128. In this way we obtain
a provably secure, blockcipher-based garbling scheme where
circuit evaluation takes two AES calls per gate.
We go on to suggest a still more eﬃcient instantiation for
the dual-key cipher, one where evaluating a garbled circuit
needs only one AES128 call per gate and all blockcipher
invocations use the same key. This is the fastest approach
now known for garbling circuits.
Beyond privacy we consider obliviousness: a party acquir-
ing F and X, but not d, shouldn’t learn anything about f , x,
or y. As with privacy, we formalize obliviousness in diﬀerent
but “usually” equivalent ways. Next we explore authenticity:
a party who learns F and X should be unable to produce a
garbled output Y
diﬀerent from F (X) that is deemed to be
) (cid:6)= ⊥. Our interest in obliviousness and authen-
valid: d(Y
ticity was sparked by Gennaro, Gentry, and Parno [17]; the
notions arise in the context of private, veriﬁable outsourcing
of computation.
∗
∗
We prove implications and separation among all security
notions we have mentioned, painting a complete picture of
deﬁnitions for this space. See Fig. 2.
We deﬁne a protocol, Garble2, to simultaneously achieve
privacy, obliviousness, and authenticity. The assumption re-
quired is the same as before. The scheme is only a bit more
complex than Garble1, the eﬃciency, only a little worse.
Discussion. Once viewed as a “theoretical” approach for
multiparty computation, a long line of work, beginning with
Fairplay [37], has made clear that circuit garbling is now
a practical technique. State-of-the-art implementations by
Huang et al. and Kreuter et al. can handle complex func-
tionalities and hundreds of millions of gates [23, 24, 32]. We
aim to support such work, and applications further aﬁeld.
With a protocol’s garbling scheme delineated, implementa-
tions can more reasonably oﬀer proofs for the actual scheme
employed, the “messy” optimizations stripped of surround-
ing interaction and protocol aims. In general, an approach
where the garbling scheme is conceptually separated from
its use seems essential for managing complexity in this do-
main. As an analog, authenticated encryption took oﬀ after
it was reconceptualized as a primitive, not a method formed
of encryption schemes and MACs.
Garble1 and Garble2 are close to numerous other protocols
(especially [40]) that incarnate Yao’s idea. Given this, one
might assume that, once good deﬁnitions are written down,
proving security would be easy, based on prior work [35].
From our experience, this is not the case; the proofs we
provide are not implicit in prior work.
One thing novel about our schemes is that they admit
eﬃcient AES-based instantiations whose quantitative secu-
rity may be inferred via the concrete security bounds as-
sociated to our theorems.
In the past, SFE schemes sup-
ported by proofs would use objects less eﬃciently realizable
in practice [35], or, for practical realizations, would aban-
don proven-secure schemes and use hash-based ones, some-
times with an unproven claim that security is maintained in
the random-oracle model. Given the increasing ubiquity of
AES hardware support, we believe that optimized, proven,
blockcipher-based schemes are a good direction.
This paper is the ﬁrst of several we envision.
In it we
aim to instill fresh, practice-oriented foundations in an area
where, historically, omitted deﬁnitions and proofs have been
the norm. The current work maintains a circumscribed fo-
cus: to investigate the deﬁnitions central to the reconceptu-
alization of garbling schemes as a sui generis cryptographic
goal. Upcoming work will explore several directions:
We can construct extremely eﬃcient garbling schemes,
like the one-call, ﬁxed-key, AES128-based scheme we men-
tioned. This can be done in a way that does not preclude
7851k
f
G b
F
e
d
x
x
En
X
Ev
Y
ev
De
y
y
Figure 1: Components of a garbling scheme G = (Gb, En, De, Ev, ev). Function Gb maps f and k to (F, e, d), strings
encoding the garbled function, the encoding function, and the decoding function. Possession of e and x lets
one compute the garbled input X = En(e, x); having F and X lets one calculate the garbled output Y = Ev(F, X);
and knowing d and Y lets one recover the ﬁnal output y = De(d, Y ), which must equal ev(f, x).
Protocol
Application
Needs
Over
prv.sim
obv.sim
aut
I
E
)
v
e
,
φ
(
f
i
I
E
φ
f
i
prv.ind
obv.ind
Figure 2: Relations among security notions. A solid
arrow is an implication; an if-labeled arrow, a con-
ditional implication; a hatched arrow, a separation.
the free-xor and row-elimination techniques that have
proven so eﬀective [23, 31, 44]. Proofs remain complex,
even in the random-permutation model.
Implementa-
tions are underway, these achieving about 15 nsec/gate.
We can generalize security to the adaptive (=dynamic)
setting. This is needed for one-time programs [20] and
secure outsourcing [17]. For one ﬂavor of adaptivity,
prv1/obv1/aut1, the input x may depend on the garbled
function F . For ﬁner-grained notions, prv2/obv2/aut2,
each bit of x can depend on previously acquired Xi-
values. Transformations turn prv/obv/aut schemes into
prv1/obv1/aut1 ones and these into prv2/obv2/aut2 ones.
Building on the oft-described metaphor of lockboxes and
keys (eg, [35] (pp. 163–164)), we can formulate garbling-
scheme security using a formal treatment of dual-key en-
ciphering. We choose to do this by absorbing the func-
tionality of the ideal primitive into the code-based deﬁ-
nition. Privacy, obliviousness, and authenticity become
yes/no matters—no probabilities.
For all of these directions, the framework developed here
serves as the needed starting point.
A thesis underlying our deﬁnitions is that they work —that
most (though not all) applications described as using gar-
bled circuits can be built from an arbitrary garbling scheme,
instead. To date we have surveyed 20 papers containing pro-
tocols that can be recast to use a generic garbling scheme.
See Fig. 3. In all cases we gain in simplicity and modularity.
Applications beneﬁt from the increased eﬃciency of our gar-
bling schemes. The improvement is particularly marked in
the application to KDM encryption (security with respect to
prv
2-party SFE (sh)