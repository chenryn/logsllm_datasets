这一日，懒蜗牛把一张SD卡插进了电脑，然后运行mount命令来挂载：
![alt](images/00270.jpeg){.calibre3}
挂载之后，把里面的东西复制了进来：
![alt](images/00271.jpeg){.calibre3}
之后把这些图片打成压缩包，放到一个目录里作为备份：
![alt](images/00272.jpeg){.calibre3}
备份完了，把卡里的文件删掉吧：
![alt](images/00273.jpeg){.calibre3}
最后，卸载这个SD卡：
![alt](images/00274.jpeg){.calibre3}
又一日，懒蜗牛又把这张SD卡插进来了，里面有了新的文件。于是，他像前一次一样操作，又一次挂载：
![alt](images/00275.jpeg){.calibre3}
又一次复制：
![alt](images/00276.jpeg){.calibre3}
又一次备份，又一次删除，又一次卸载：
![alt](images/00277.jpeg){.calibre3}
然后第3天......懒蜗牛终于忍不住了。每次都要输入这么多命令很麻烦啊，能不能省事一点呢？
【高级批处理】
懒蜗牛同学回忆起了在很久很久以前，用过一个叫做DOS的操作系统，那里面有一种叫做"批处理"的东西，可以把很多条命令写进一个.bat文件里，一起执行，似乎很强大。那么我们Linux系统里有没有这种批处理呢？在我们Linux系统面前说批处理，那简直就是关公面前耍大刀，华佗门口卖止疼膏了。
您或许听说过我们Linux系统中有叫做Shell脚本的东西。这是我们Linux的骄傲，如果批处理文件是辆自行车的话，Shell脚本就是波音747！这么强大的东西，解决懒蜗牛同学现在遇到的问题，绰绰有余。
要写个Shell脚本很简单，随便用一个什么文本编辑器，写上你要执行的命令，然后保存，就可以了。比如要解决懒蜗牛同学每次敲很多相同命令的烦恼，那么可以写这么一个文本文件：
![alt](images/00278.jpeg){.calibre3}
然后保存，随便起个名字就可以，比如叫"daily_backup.sh"。到此为止这个脚本还不能运行，还得赋予这个文件"可执行"权限。就这么操作：
![alt](images/00279.jpeg){.calibre3}
这就可以了。这回这个脚本就可以运行了，就这样：
![alt](images/00280.jpeg){.calibre3}
不过因为里面涉及挂载操作，所以脚本里面调用了sudo。因此运行的时候会提示输入密码。这样，用这么一个脚本就可以省去懒蜗牛同学每次敲命令的烦恼了。
![alt](images/00011.jpeg){.tpzz}**提示：**[脚本文件并不要求特定的扩展名，只要是文本文件，具有可执行权限即可。但一般习惯上将脚本文件的扩展名命名为.sh。]{.kai1}
【灵活的Shell脚本】
不过有的同学可能发现了，这样简单地把静态的命令写成脚本，并不能完全解放懒蜗牛同学。懒蜗牛每天打包备份的文件都是不一样的，但是这个脚本里，备份文件的文件名是固定的呀，这样懒蜗牛同学每次运行完这个脚本还得去改一下文件名。就不能送佛送到西，帮忙帮到底么？
当然能，咱们来把脚本修改一下：
![alt](images/00281.jpeg){.calibre3}
这回，脚本中使用了"\`"符号，"\`"符号的意思就是：先执行两个"\`"符号之间的命令，用执行后的输出代替掉两个"\`"符号之间的内容（包括"\`"本身）。
![alt](images/00011.jpeg){.tpzz}**提示：**[要注意，这里的"\`"符号不是单引号"'"，而是键盘上和"～"位于同一个键的反引号。]{.kai1}
这里两个反引号"\`"之间的"date"，就是用来打印出当前日期的命令。你可以在命令行下试着运行一下这个命令看看效果：
![alt](images/00282.jpeg){.calibre3}
因此，如果在2011年10月17日执行上面那一段脚本，就相当于执行了：
![alt](images/00283.jpeg){.calibre3}
于是，这样修改之后，这个脚本就可以根据运行当天的日期自动为备份出来的文件命名了。
![alt](images/00011.jpeg){.tpzz}**提示：**[date命令用于显示当前的日期及时间。直接运行date命令可得到类似如下格式的显示：]{.kai1}
![alt](images/00284.jpeg){.calibre3}
[或者也可在date命令后添加参数，以设定输出格式。可支持的格式参数如表6.1所示。]{.kai1}
**表6.1 date命令参数**
![alt](images/00285.jpeg){.calibre3}
![alt](images/00286.jpeg){.calibre3}
6.3.2 规范的Shell脚本
虽然懒蜗牛同学用一个类似批处理的脚本文件解决了他每次都要手动敲很多命令的烦恼，但是他写的这个所谓的脚本还是太初级了，一点都不专业。
【要有必要的注释】
一个专业点的脚本，一般总要在脚本里写清楚这个脚本是干什么的。这种给人类看的文字叫做注释，大家应该都听说过吧。
那么我们的Shell脚本里怎么写注释呢？很简单，以"#"开头，后面的全是注释。例如懒蜗牛同学的自动备份脚本，就可以加入这样一些注释：
![alt](images/00287.jpeg){.calibre3}
大致就是这样，只要某一行的某一个位置出现了"#"符号，那么后面的就全是注释了，Shell不再进行解释。这跟C语言中的双斜杠"//"的作用是一样的。
![alt](images/00011.jpeg){.tpzz}**提示：**[Shell脚本中没有类似C语言中的"/\*"，"\*/"方式的段落注释。]{.kai1}
【指明使用哪个Shell】
有时候可以看到一些脚本的第一行是类似这样的：
![alt](images/00288.jpeg){.calibre3}
这又是什么意思呢？有的同学说：我知道，这个以"#"开头，所以只是个注释。但是，很不幸，这不是注释。
确实，我说过，以"#"开头的是注释。但是，"#!"放在一起还出现在脚本第一行，那就不是注释啦！这一行的意思是用来指明这个脚本所需要的Shell。
前面说过，我们Linux系统中有很多的Shell，比如bash、tcsh、ksh等。这些不同的Shell，他们的特性、语法什么的，大都是不同的。那么一个脚本程序就有必要说明一下，这是个bash的脚本，还是tcsh或者别的什么Shell的脚本。就好像你写了一段代码，总要告诉人家你写的是C语言的代码还是Java语言的代码吧。
当然，你可以直接告诉系统，说这个脚本是一个bash的脚本，请用bash来解释这个脚本。那么你就需要这样运行你写的脚本（比如脚本叫做myscript.sh）：
![alt](images/00289.jpeg){.calibre3}
但是这显然很麻烦，难道你要自己记住每一个脚本都是对应于哪个Shell么（虽然一般情况下都是bash）？当然不必，就像多数脚本一样，加入对这个脚本所需要的解释器的说明就可以了，比如懒蜗牛同学的自动备份脚本，我们假设它需要bash来运行，那就应该完善一下，写成这样（为什么说"假设"需要bash？因为这个脚本太简单，都是调用命令，基本上是个Shell就能正常执行这个脚本）：
![alt](images/00290.jpeg){.calibre3}
【使用函数】
另外，Shell脚本也像大多数编程语言一样支持函数。如果你有一段代码需要在脚本里执行多次，不必反复地写多份，而是把它们写成一个函数，直接调用即可。比如这个自动备份的脚本：
![alt](images/00291.jpeg){.calibre3}
把备份的动作写成一个backup_picture()函数后，需要进行备份的时候，在脚本里调用这个函数就可以了。脚本在执行的时候，会先略过写进函数里的部分，直到执行到某一行调用了这个函数，再回来执行。
6.3.3 在Shell中使用变量