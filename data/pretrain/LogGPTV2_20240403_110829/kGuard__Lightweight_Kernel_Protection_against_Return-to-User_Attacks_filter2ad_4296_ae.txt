OS in inconsistent states (e.g., by aborting an in-ﬂight
kernel thread that holds a lock). However, kGuard can be
conﬁgured to use a custom handler. Upon enabling this
option, our instrumentation becomes slightly different.
Instead of overwriting offending branch targets with the
address of our handler, we push the value of the branch
target into the stack and invoke the handler directly. In
the case of a CFAR guard this means that the mov in-
struction (see Snippet 3) will be replaced with a push
and call. CFAM guards are modiﬁed accordingly.
This instrumentation increases slightly the size of our
inline guards, but does not incur additional overhead,
since the extra instructions are on the error path. Ad-
ditionally, the custom violation handler has access to the
location where the violation occurred, by reading the re-
turn address of the callee (pushed into the stack from
call), as well as to the offending branch target (passed
as argument to the handler). Using that information,
one can implement adaptive defense mechanisms, in-
cluding selective conﬁnement (e.g., deal with VMware’s
I/O backdoor that needs to “violate” protection domains),
error virtualization [63], as well as forensic analysis (e.g.,
dump the shellcode). The latter can be useful in honeypot
setups for studying new ret2usr exploitation vectors.
Persistent threats By building upon the previous fea-
ture, we implemented a handler that actively responds to
persistent threats (i.e., users that repeatedly try to per-
form a ret2usr attack). Once invoked, due to a violation,
it performs the following. First, it checks the execution
context of the kernel to identify if it runs inside a user-
level process or an interrupt handler. If the violation oc-
curred while executing an interrupt service routine, or
the current execution path is holding a lock9, then we
fail-stop the kernel. Else, if the kernel is preemptible, we
terminate all processes with the same uid of the offend-
ing process and prevent the user from logging in. Other
possible approaches include inserting an exponentially
increased delay for user logins (i.e., make the bruteforce
attack slow and impractical), activate CFA motion, etc.
Future considerations Currently, we investigate how
to apply the CFA motion technique (see Section 3.5),
while a kernel is running and the OS is live. Our early
Linux prototype utilizes a dedicated kernel thread, which
upon a certain condition, freezes the kernel and per-
forms rewriting. Thus far, we achieve CFA relocation
in a coarse-grained manner, by exploiting the suspend
subsystem of the Linux kernel. Speciﬁcally, we bring
the system to pre-suspend state for preventing any ker-
nel code from being invoked during the relocation (note
that the BSD OSs have similar facilities). Possible events
to initiate live CFA motion are the number of executed
system calls or interrupts (i.e., diversify the kernel ev-
ery n invocation events), CFA violations, or in the case
of smartphone devices, dock station attach and charging.
However, our end goal is to perform CFA motion in a
more ﬁne-grained, non-interruptible and efﬁcient man-
ner, without “locking” the whole OS.
7 Related Work
kGuard is inspired by the numerous compiler-based tech-
niques that explicitly or implicitly constrain control ﬂow
and impose a speciﬁc execution policy. StackGuard [14]
and ProPolice [34] are GCC patches that extend the be-
havior of the translator for inserting a canary word prior
to the saved return address on the stack. The canary is
checked again before a function return is performed, and
execution is halted if it has been overwritten (e.g., due to
a stack-smashing attack). Stack Shield [1] is a similar ex-
tension that saves the return address, upon function entry,
into a write-protected memory area that is not affected by
buffer overﬂows and restores it before returning.
Generally, these approaches have limitations [9, 69].
However, they signiﬁcantly mitigate real-life exploits by
assuring that functions will always return to caller sites,
incur low performance overhead, and do not require any
change to the runtime environment or platform of the
protected applications. For these reasons, they have been
adopted by mainstream compilers, such as GCC, and en-
abled by default in many BSD and Linux distributions.
9In Linux, we can check if the kernel
is holding locks by
looking at the preempt_count variable in the current process’s
thread_info structure [48].
kGuard operates analogously, by hooking to the compi-
lation process and dynamically instrumenting code with
inline guards. However, note that we leverage the plugin
API of GCC, and do not require patching the compiler
itself, thus aiding the adoption of kGuard considerably.
More importantly, since stack protection is now enabled
by default, kGuard can be conﬁgured to ofﬂoad the bur-
den of dealing with the integrity of return control data
to GCC. If random XOR canaries [14] are utilized, then
any attempt to tamper with saved return addresses on the
stack, for redirecting the privileged control ﬂow to user
space, will be detected and prevented. Hence, the protec-
tion of kernel-level ret instructions with CFAs can be
turned off. Note that during our preliminary evaluation
we also measured such a scenario. The average overhead
of kGuard, with no ret protection, on system call and
I/O latency was 6.5% on x86 and 5.4% on x86-64, while
its impact on real-life applications was ≤ 0.5%. This
“ofﬂoading” cannot be performed in the case of simple
random canaries or terminator canaries. Nevertheless, it
demonstrates that our approach is indeed orthogonal to
complementary mitigation schemes, and operates nicely
with conﬁnement checks injected during compile time.
PointGuard [13] is another GCC extension that works
by encrypting all pointers while they reside in mem-
ory and decrypting them before they are loaded into a
CPU register. PointGuard could provide some protection
against ret2usr attacks, especially if a function pointer is
read directly from user-controlled memory [20]. How-
ever, it cannot deal with cases where an attacker can nul-
lify kernel-level function pointers by exploiting a race
condition [19] or supplying carefully crafted arguments
to buggy system calls [23].
In such scenarios, the re-
spective memory addresses are altered by legitimate code
(i.e., kernel execution paths), and not directly by the at-
tacker. kGuard provides solid protection against ret2usr
attacks by policing every computed control transfer for
kernel/user space boundary violations.
Other compiler-based approaches include DFI [11]
that enforces data ﬂow integrity based on a statically cal-
culated reaching deﬁnition analysis. However, the main
focus of DFI, and similar techniques [3, 12, 33], is the
enforcement of spatial safety for mitigating bounds vio-
lations and preventing bounds-related vulnerabilities.
Control-Flow Integrity (CFI) [2], Program Shepherd-
ing [43], and Strata [57], employ binary rewriting and
dynamic binary instrumentation (DBI) for retroﬁtting se-
curity enforcement capabilities into unmodiﬁed binaries.
The major issue with such approaches has been mainly
the large performance overhead they incur, as well as
the reliance on interpretation engines, which complicates
their adoption. Program Shepherding exhibits ∼100%
overhead on SPEC benchmarks, while CFI has an aver-
age overhead of 15%, and a maximum of 45%, on the
same test suite. CFI-based techniques rewrite programs
so that every branch target is given a label, and each indi-
rect branch instruction is prepended with a check, which
ensures that the target’s label is in accordance with a pre-
computed control-ﬂow graph (CFG). Unfortunately, CFI
is not effective against ret2usr attacks. The integrity of
the CFI mechanism is guaranteed as long as the attacker
cannot overwrite the code of the protected binary, or ex-
ecute user-provided data. However, during a ret2usr at-
tack, the attacker completely controls user space mem-
ory, both in terms of contents and rights. Therefore, CFI
can be subverted by prepending user-provided shellcode
with the respective label.
As an example, consider again Snippet 1 and assume
that the attacker has managed to overwrite the func-
tion pointer sendpage with an address pointing in user
space. CFI will prepend the instruction that invokes
sendpage with an inline check that fetches a label
ID (placed right before the ﬁrst instruction in functions
that sendpage can point to), and compares it with the
allowed label IDs.
If the two labels match, the con-
trol transfer will be authorized. Unluckily, since the at-
tacker controls the contents and rights of the memory
that sendpage is now pointing, he can easily prepend
his code with the label ID that will authorize the control
transfer. Furthermore, Petroni and Hicks [55] noted that
computing in advance a precise CFG for a modern kernel
is a nontrivial task, due to the rich control structure and
the several levels of interrupt handling and concurrency.
CFI-based proposals can be combined with kGuard to
overcome the individual limitations of each technique.
kGuard can guarantee that privileged execution will al-
ways be conﬁned in kernel space, thus leaving no other
options to attackers than targeting kernel-level control
ﬂow violations, which can be solidly protected by CFI.
Garﬁnkel and Rosenblum proposed Livewire [36],
which was the ﬁrst system that used a virtual machine
monitor (VMM) for implementing invariant-based ker-
nel protection. Similarly, Grizzard uses a VMM for mon-
itoring kernel execution and validating control ﬂow [38].
For LMBench, he reports an average of 30% overhead,
and a maximum of 74%, on top of VMM’s performance
penalty. SecVisor [62] is a tiny hypervisor that ensures
the integrity of commodity OS kernels. It relies on phys-
ical memory virtualization for protecting against code
injection attacks and kernel rootkits, by allowing only
approved code to execute in kernel mode and ensuring
that such code cannot be modiﬁed. However, it requires
modern CPUs that support virtualization in hardware,
as well as kernel patching to add the respective hyper-
calls that authorize module loading. Along the same
lines, NICKLE [56] offers similar guarantees, without
requiring any OS modiﬁcation, by relying on an inno-
vative memory shadowing scheme and real-time kernel
code authentication via VMM introspection. Petroni and
Hicks proposed state-based CFI (SBCFI) [55], which re-
ports violations of the kernel’s control ﬂow due to the
presence of rootkits. Similarly, Lares [54] and Hook-
Safe [68] protect kernel hooks (including function point-
ers) from being manipulated by kernel malware. The fo-
cus of those techniques, however, has been kernel attes-
tation and kernel code integrity [10], which is different
from the control-ﬂow integrity of kernel code. On the
other hand, kGuard focuses on solving a different prob-
lem: privilege escalation via hijacked kernel-level exe-
cution paths. Although VMMs provide stronger security
guarantees than kGuard, and SecVisor and NICKLE can
prevent ret2usr attacks by refusing execution from user
space while running in kernel mode, they incur larger
performance penalties and require running the whole OS
over custom hypervisors and specialized hardware. It is
also worth noting that SecVisor and NICKLE cannot pro-
tect against execution hijacking via tampered data struc-
tures containing control data [18,20]. kGuard offers solid
protection against that type of ret2usr due to the way it
handles control data stored in memory.
Supervisor Mode Execution Prevention (SMEP) [37]
is an upcoming Intel CPU feature, which prevents code
executing in kernel mode from branching to code located
in pages without the supervisor bit set in their page table
entry. Although it allows for a conﬁnement mechanism
similar to PaX with zero performance penalty, it is plat-
form speciﬁc (i.e., x86, x86-64), requires kernel patch-
ing, and does not protect legacy systems.
8 Conclusions
We presented kGuard, a lightweight compiler-based
mechanism that protects the kernel from ret2usr attacks.
Unlike previous work, kGuard is fast, ﬂexible, and of-
fers cross-platform support. It works by injecting ﬁne-
grained inline guards during the translation phase that
are resistant to bypass, and it does not require any mod-
iﬁcation to the kernel or additional software such as a
VMM. kGuard can safeguard 32- or 64-bit OSs that map
a mixture of code segments with different privileges in-
side the same scope and are susceptible to ret2usr attacks.
We believe that kGuard strikes a balance between safety
and functionality, and provides comprehensive protec-
tion from ret2usr attacks, as demonstrated by our exten-
sive evaluation with real exploits against Linux.
Availability
The prototype implementation of kGuard is freely avail-
able at: http://www.cs.columbia.edu/~vpk/
research/kguard/
Acknowledgments
We thank Michalis Polychronakis and Willem de Bruijn
for their valuable feedback on earlier drafts of this pa-
per. This work was supported by DARPA and the
US Air Force through Contracts DARPA-FA8750-10-2-
0253 and AFRL-FA8650-10-C-7024, respectively. Any
opinions, ﬁndings, conclusions, or recommendations ex-
pressed herein are those of the authors, and do not nec-
essarily reﬂect those of the US Government, DARPA, or
the Air Force.
References
[1] Stack Shield.
http://www.angelfire.com/sk/
stackshield/, January 2000.
[2] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J.
Control-Flow Integrity. In Proceedings of the 12th ACM Confer-
ence on Computer and Communications Security (CCS) (2005),
pp. 340–353.
[3] AKRITIDIS, P., CADAR, C., RAICIU, C., COSTA, M., AND
CASTRO, M. Preventing memory error exploits with WIT. In
Proceedings of the 29th IEEE Symposium on Security and Pri-
vacy (S&P) (2008), pp. 263–277.
[4] AZAB, A. M., NING, P., WANG, Z., JIANG, X., ZHANG, X.,
AND SKALSKY, N. C. HyperSentry: Enabling Stealthy In-
context Measurement of Hypervisor Integrity.
In Proceedings
of the 17th ACM Conference on Computer and Communications
Security (CCS) (2010), pp. 38–49.
[5] BELLARD, F. QEMU, a Fast and Portable Dynamic Translator.
In Proceedings of the 7th USENIX Annual Technical Conference
(FREENIX track) (2005), pp. 41–46.
[6] BICKFORD, J., O’HARE, R., BALIGA, A., GANAPATHY, V.,
AND IFTODE, L. Rootkits on Smart Phones: Attacks, Implica-
tions and Opportunities. In Proceedings of the 11th International
Workshop on Mobile Computing Systems and Applications (Hot-
Mobile) (2010), pp. 49–54.
[7] BLETSCH, T., JIANG, X., FREEH, V. W., AND LIANG, Z.
Jump-Oriented Programming: A New Class of Code-Reuse At-
In Proceedings of the 6th ACM Symposium on Infor-
tack.
mation, Computer and Communications Security (ASIACCS)
(2011), pp. 30–40.
[8] BOVET, D. P., AND CESATI, M. Understanding the Linux
Kernel, 3nd ed. O’Reilly Media, Sebastopol, CA, USA, 2005,
ch. System Startup, pp. 835–841.
[9] BULBA AND KIL3R. Bypassing StackGuard and StackShield.
Phrack 5, 56 (May 2000).
[10] CARBONE, M., CUI, W., LU, L., LEE, W., PEINADO, M., AND
JIANG, X. Mapping Kernel Objects to Enable Systematic In-
tegrity Checking. In Proceedings of the 16th ACM Conference on
Computer and Communications Security (CCS) (2009), pp. 555–
565.
[11] CASTRO, M., COSTA, M., AND HARRIS, T. Securing Soft-
ware by Enforcing Data-Flow Integrity.
In Proceedings of the
7th Symposium on Operating Systems Design and Implementa-
tion (OSDI) (2006), pp. 147–160.
[12] CASTRO, M., COSTA, M., MARTIN, J.-P., PEINADO, M.,
AKRITIDIS, P., DONNELLY, A., BARHAM, P., AND BLACK, R.
Fast Byte-granularity Software Fault Isolation.
In Proceedings
of the 22nd ACM Symposium on Operating Systems Principles
(SOSP) (2009), pp. 45–58.
[13] COWAN, C., BEATTIE, S., JOHANSEN, J., AND WAGLE, P.
PointGuardT M : Protecting Pointers From Buffer Overﬂow Vul-
nerabilities. In Proceedings of the 12th USENIX Security Sympo-
sium (USENIX Sec) (2003), pp. 91–104.
[14] COWAN, C., PU, C., MAIER, D., HINTON, H., WALPOLE, J.,
BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND ZHANG,
Q. StackGuard: Automatic Adaptive Detection and Prevention
of Buffer-Overﬂow Attacks. In Proceedings of the 7th USENIX
Security Symposium (USENIX Sec) (1998), pp. 63–78.
[15] COX, M. J. Red Hat’s Top 11 Most Serious Flaw Types for
2009. http://www.awe.com/mark/blog/20100216.
html, February 2010.
[16] CVE. CVE-2009-1897. http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2009-1897, June 2009.
[17] CVE. CVE-2009-2692. http://cve.mitre.org/cgi-
August
bin/cvename.cgi?name=CVE-2009-2692,
2009.
[18] CVE. CVE-2009-2908. http://cve.mitre.org/cgi-
August
bin/cvename.cgi?name=CVE-2009-2908,
2009.
[19] CVE.
CVE-2009-3527.
http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2009-3527, Octo-
ber 2009.
[20] CVE.
CVE-2009-3547.
http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2009-3547, Octo-
ber 2009.
[21] CVE. CVE-2010-2959. http://cve.mitre.org/cgi-
August
bin/cvename.cgi?name=CVE-2010-2959,
2010.
[22] CVE.
CVE-2010-3904.
http://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2010-3904, Octo-
ber 2010.
[23] CVE. CVE-2010-4258. http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2010-4258, November
2010.
[24] DAN ROSENBERG. kptr_restrict for hiding kernel point-
ers. http://lwn.net/Articles/420403/, December
2010.
[25] DE C VALLE, R.
Pointer Dereference