### `savefig` saves cropped images by default.
### **Bug summary**
It's probably an issue that almost everybody who uses matplotlib would have
encountered. If you generate a figure - which often contains axis labels and
legends - and save it with default settings, you'll get a cropped image.
It's a duplicate of my question on stackoverflow.
#### **Code for reproduction**
    import matplotlib.pyplot as plt
    def plot():
        plt.figure(figsize=[3,3],linewidth=5,edgecolor='r') 
        ax=plt.subplot()
        ax.plot(range(10),range(10),label='label')
        ax.set_xlabel('xlabel\nxlabel\nxlabel')
        ax.set_ylabel('ylabel\nylabel\nylabel')
        ax.legend(bbox_to_anchor=[1,1])
    plot()    
    plt.savefig('no_tight_layout.png')
#### **Actual outcome**
![no_tight_layout.png](https://camo.githubusercontent.com/6255553d8a7b317d251abaf2ee0aba3bda398b2c7b5700a41e65bdfce21a990c/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f50635a676e2e706e67)
### **Expected outcome**
If I generate the same plot in a jupyter notebook, without using
`tight_layout` option, I see that all the elements of the plot are contained
within the figure boundaries (shown in red).
![jupyter
notebook](https://camo.githubusercontent.com/97dd4a102df9934d1ac0643ada4079c80cf3a2a6d2fe2a681df473fb9ce27a01/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f544a6834722e706e67)
This figure is generated in the output cell of a jupyter notebook(!).  
Then why it is not saved as it is? Why the saved image is by default different
from the image jupyter notebook?  
In my opinion this is a very fundamental issue with matplotlib.  
Would't it make the lives of the users easier, if by default, all the elements
are contained in the saved figure without the need of any workarounds?
### **(Thanks to stackoverflow), we know few workarounds but each has a caveat
of its own**..
**Workaround#1:** from within matplotlib: use of **`tight_layout`** option.
    plot()    
    plt.savefig('tight_layout.png',bbox_inches='tight')
![tight_layout.png](https://camo.githubusercontent.com/62053ded4f9b3fbf82a63cfe4ac37efd34b13b93735d1c96822e1aad0ec4c78d/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f48516c37532e706e67)
It works for simple figures.  
**However** , in my experience, it is not reliable option in the case of more
complex, multi-panel figures.  
`tight_layout` often fails with errors such as these:
    UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
    UserWarning: tight_layout not applied: number of rows in subplot specifications must be multiples of one another.
**Workaround#2:** from outside of matplotlib: save the image in SVG format and
then convert to png. For example using `--export-area-drawing` option in the
**inkscape** command line UI or "resize to page" option in the inkscape's GUI.
**However** , in this case you have to depend on external softwares which are
difficult to add as dependencies in python packages (currently conda only
hosts Windows version of inkscape).
### **So my question is..**
Why doesn't matplotlib save the whole figure by default?
* * *
**Matplotlib version**
  * Operating system: Ubuntu 18.04
  * Matplotlib version: 3.1.2 (this is issue reproducible in previous version too.)
  * Matplotlib backend (`print(matplotlib.get_backend())`):
  * Python version: 3.6.5
  * Jupyter version (if applicable): 1.0
  * Other libraries: