# ACL Steganography: Hiding Data with Permissions

## Author
**Michael Perklin**
- Corporate Investigator
- Digital Forensic Examiner
- Security Professional
- eDiscovery Administrator
- Computer Geek + Legal Support Hybrid

**Educational Background:**
- Diploma in Computer Science Technology
- Bachelor’s Degree in Information Systems Security
- Master’s Degree in Information Assurance

**Certifications:**
- EnCase Certified Examiner (EnCE)
- AccessData Certified Examiner (ACE)
- Certified Information Systems Security Professional (CISSP)

## Overview
- **What is Steganography?**
- **Historical Examples of Physical and Digital Forms**
- **How Do They Work?**
- **Identifying a “Lowest Common Denominator”**
- **ACL Steganography - A New Scheme**

### What is Steganography?
- **Etymology:** The term "steganography" comes from the Greek words "steganos" (στεγανός) meaning "covered or protected," and "graphei" (γραφή) meaning "writing."
- **Origin:** The term was first coined in 1499, but there are many earlier examples.
- **Definition:** Steganography is the practice of hiding information within other information. Essentially, it is about concealing data in plain sight.

### Historical Examples
#### Classical Example: Tattoo
- **Method:** Encoder tattoos a message on a slave's scalp.
- **Decoding:** Decoder shaves the messenger’s hair to reveal the message.
- **Delay:** The message must be delayed to allow time for hair regrowth.

#### Classical Example: Morse Code
- **Method:** Stitch Morse code into a sweater or jacket worn by a messenger.
- **Delivery:** Messenger hand-delivers one message while actually delivering two.

#### Classical Example: Invisible Ink
- **Method:** Write secrets with lemon juice.
- **Encoding:** Allow the ink to dry.
- **Decoding:** Apply heat (candle, match, hair dryer, iron) to reveal the message.

### Digital Examples
#### Photo Steganography
- **Principle:** Files can be encoded as color information embedded in a photo.
- **Common Type:** This is the most common type of digital steganography.
- **Implementation:** Each pixel is assigned a color with an RGB color code. The last bit of this 8-bit code is overwritten with encoded data.
- **Example:** #DFFF00 is chartreuse, #DFFF01 is a slightly different yellow. Eight adjacent pixels with slightly adjusted colors allow 1 byte of encoded information.

#### Audio Steganography
- **Principle:** Similar to photographic steganography, but with audio.
- **Human Perception:** Humans cannot easily tell the difference between 400Hz and 401Hz, especially if the note isn’t sustained.
- **Implementation:** Alter each frame of audio with 1 bit of encoded information.

#### x86 Operations
- **Principle:** Information can be encoded in x86 op codes.
- **Examples:**
  - NOP (No Operation)
  - ADD / SUB (Addition and Subtraction)
- **PE Files:** Standard .exe programs have many areas that can hold arbitrary data.

#### Chaffing and Winnowing
- **Concept:** Conceived by Ron Rivest in 1998 (the R in RSA, as well as RC4 and others).
- **Properties:** It has properties of both steganography and encryption.
- **Process:**
  - Sender issues 'real' messages and 'chaff' messages.
  - Listeners don’t know which messages are real.
  - Real chunks of the message include a parity value (Message Authentication Code, MAC).
  - Receiver calculates MACs on every packet, discards invalid ones, and reassembles valid packets.

### Steganography Breakdown
- **Requirements:**
  - A medium of arbitrary information.
  - A key or legend for encoding information.
  - A way to differentiate 'encoded' and 'medium' information.

### ACL Steganography
- **Definition:** A method to encode files as Access Control Entries (ACEs) within Access Control Lists (ACLs) of files stored on an NTFS volume.
- **Medium:** All files on an NTFS volume.
- **Key:** Security Identifiers (SIDs) in ACEs.
- **Differentiator:** ACEs with an unlikely combination of permissions.

### Background: NTFS Security
- **Permissions:**
  - There are 22 unique permissions available, stored in a 32-bit field.
  - Many more granular permissions exist than "Read, Write, Execute."

- **Security Identifiers (SIDs):**
  - Maximum Size: 68 bytes.
  - Structure:
    - 1st byte: Revision (always 1).
    - 2nd byte: Count of SubAuthorities (maximum 15 per SID).
    - 6 bytes: Identifier Authority (always 000004).
    - 60 bytes: Store the content of the SubAuthorities and the Relative ID.

- **Acronyms:**
  - **ACL (Access Control List):** A list of Access Control Entries.
  - **ACE (Access Control Entry):** A permission rule (allow or deny) pertaining to a SID.
  - **SID (Security Identifier):** A unique identifier for a user or group in a Windows system.

### Implementation
- **Encoding:**
  - A file is split into 60-byte chunks.
  - Each chunk becomes a SID.
  - ACEs are created with "Allow" permissions for each SID.
  - ACEs are added to the ACLs of multiple files.

- **ACLEncode Details:**
  - Two bits are set for all ACLEncoded entries: Synchronize + ReadPermissions.
  - Synchronize cannot be set within the Windows UI.
  - The 9 least significant bits are used as a counter from 0-512.
  - These bits correspond to specific permissions.

- **FileList as Symmetric Key:**
  - The FileList identifies which files have ACLEncoded entries and the order in which they are encoded.

### Limitations
- **ACL Size:**
  - An ACL can be no bigger than 64kB per file.
  - Maximum ACE size is 76 bytes (68 for SID + 8 byte header).
  - Theoretical maximum: 862 ACEs per file.
  - Imposed limit: 512 entries per file to leave room for legitimate permissions.

- **Largest Encodable File:**
  - NumFilesInList * 512 * 60 bytes, or about 30kB per file.
  - Larger files require a longer file list.

- **$SECURE File:**
  - Hidden file on every NTFS volume.
  - Stores all ACLs for all files.
  - Does not remove old/unused SIDs, leading to persistent storage of ACLEncoded chunks.

### Forensic Review
- **Test Setup:**
  - 2GB USB Key, formatted as NTFS.
  - Tools: AccessData FTK 4.0.2.33, Guidance EnCase Forensic 6.19.6.
  - Detection: Manual process using popular forensic tools.
  - Automation: Possible with EnScripts (EnCase’s scripting language) and other purpose-built tools.

### Questions and Answers
- **Contact:** For questions, see Michael in the Q&A room for Track 1.

### Acknowledgments
- **Thanks to:** Josh, Nick, Joel, Reesh, family, friends, colleagues, and employer for providing time for research.
- **Inspiration:** Eugene for the idea of "How can you hide data on a drive without detection?"

### Resources
- **Source Code:**
  - [ACLEncode.zip](http://www.perklin.ca/~defcon21/ACLEncode.zip)
- **Slides:**
  - [Latest Version](http://www.perklin.ca/~defcon21/aclsteganography.pdf)
  - Available on the DEFCON site soon.

### References
- [MSDN: NTFS Permissions](http://msdn.microsoft.com/en-us/library/gg465313.aspx)
- [Stack Overflow: Maximum Length of a SID in SDDL Format](http://stackoverﬂow.com/questions/1140528/what-is-the-maximum-length-of-a-sid-in-sddl-format)
- [TechNet: NTFS Permissions](http://technet.microsoft.com/en-us/library/cc962011.aspx)
- [MSDN: FileSystemRights](http://msdn.microsoft.com/en-CA/library/ms229078(v=vs.85).aspx)
- [GitHub: Mono-Class-Libraries](https://github.com/mosa/Mono-Class-Libraries/blob/master/mcs/class/corlib/System.Security.AccessControl/FileSystemRights.cs)
- [NTFS.com: NTFS Permissions](http://www.ntfs.com/ntfs-permissions-access-entries.htm)
- [NTFS.com: NTFS Permissions Security Descriptor](http://www.ntfs.com/ntfs-permissions-security-descriptor.htm)
- [Microsoft Support: KB 279682](http://support.microsoft.com/kb/279682)