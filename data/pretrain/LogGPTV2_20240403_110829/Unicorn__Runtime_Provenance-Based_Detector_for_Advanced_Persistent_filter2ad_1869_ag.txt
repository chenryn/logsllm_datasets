lease,” Accessed 21st January 2020, https://github.com/darpa-i2o/
Transparent-Computing.
[67] S. Khandelwal, “Ccleaner attack timeline. here’s how hackers in-
fected 2.3 million pcs,” 2018, https://thehackernews.com/2018/04/
ccleaner-malware-attack.html.
[68] W. Khreich, S. S. Murtaza, A. Hamou-Lhadj, and C. Talhi, “Combin-
ing heterogeneous anomaly detectors for improved software security,”
Journal of Systems and Software, vol. 137, pp. 415–429, 2018.
[69] S. T. King and P. M. Chen, “Backtracking intrusions,” ACM SIGOPS
Operating Systems Review, vol. 37, no. 5, pp. 223–236, 2003.
[70] R. Klinkenberg, “Learning drifting concepts: Example selection vs.
example weighting,” Intelligent data analysis, vol. 8, no. 3, pp. 281–
300, 2004.
[71] R. Kondor, N. Shervashidze, and K. M. Borgwardt, “The graphlet
spectrum,” in International Conference on Machine Learning. ACM,
2009, pp. 529–536.
[72] O. Kostakis, “Classy: fast clustering streams of call-graphs,” Data
mining and knowledge discovery, vol. 28, no. 5-6, pp. 1554–1585, 2014.
[73] I. Koychev, “Gradual forgetting for adaptation to concept drift,” in
ICJAI/E-
Workshop on Current Issues in Spatio-Temporal Reasoning.
CAI, 2000.
[74] G. Kurtz, “Operation Aurora Hit Google, Others,” Jan 2010, available
at http://securityinnovator.com/index.php?articleID=42948&sectionID=
25.
[75] A. Kyrola, G. E. Blelloch, and C. Guestrin, “GraphChi: Large-scale
graph computation on just a pc,” in Symposium on Operating Systems
Design and Implementation. USENIX, 2012.
[76] P. Li, “0-bit consistent weighted sampling,” in International Conference
on Knowledge Discovery and Data Mining. ACM, 2015, pp. 665–674.
[77] C. Liu, X. Yan, H. Yu, J. Han, and P. S. Yu, “Mining behavior graphs for
backtrace of noncrashing bugs,” in International Conference on Data
Mining. SIAM, 2005, pp. 286–297.
[78] M. Liu, Z. Xue, X. Xu, C. Zhong, and J. Chen, “Host-based intrusion
detection system with system calls: Review and future trends,” ACM
Computing Surveys (CSUR), vol. 51, no. 5, p. 98, 2018.
[79] Y. Liu, M. Zhang, D. Li, K. Jee, Z. Li, Z. Wu, J. Rhee, and P. Mittal,
“Towards a timely causality analysis for enterprise security.” NDSS,
2018.
[80] S. Ma, X. Zhang, and D. Xu, “Protracer: Towards practical provenance
tracing by alternating between logging and tainting.” in NDSS, 2016.
[81] F. Maggi, M. Matteucci, and S. Zanero, “Detecting intrusions through
system call sequence and argument analysis,” IEEE Transactions on
Dependable and Secure Computing, vol. 7, no. 4, pp. 381–395, 2010.
[82] M. Manasse, F. McSherry, and K. Talwar, “Consistent weighted
http://research. microsoft.com/en-
Technical Report
sampling,”
us/people/manasse, vol. 2, 2010.
[83] E. Manzoor, S. M. Milajerdi, and L. Akoglu, “Fast memory-efﬁcient
anomaly detection in streaming heterogeneous graphs,” in International
Conference on Knowledge Discovery and Data Mining. ACM, 2016,
pp. 1035–1044.
[84] ——, “Streamspot datasets,” 2016, https://github.com/sbustreamspot/
sbustreamspot-data.
[85] J. McHugh, “Testing intrusion detection systems: a critique of the 1998
and 1999 darpa intrusion detection system evaluations as performed
by lincoln laboratory,” ACM Transactions on Information and System
Security (TISSEC), vol. 3, no. 4, pp. 262–294, 2000.
[86] S. M. Milajerdi, B. Eshete, R. Gjomemo, and V. Venkatakrishnan,
“Poirot: Aligning attack behavior with kernel audit records for cyber
threat hunting,” in Proceedings of the SIGSAC Conference on Computer
and Communications Security. ACM, 2019, pp. 1813–1830.
[87] S. M. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. Venkatakrish-
nan, “Holmes: Real-time apt detection through correlation of suspicious
information ﬂows,” in Symposium on Security and Privacy.
IEEE,
2019.
[88] M. Mongiovi, P. Bogdanov, R. Ranca, E. E. Papalexakis, C. Faloutsos,
16
and A. K. Singh, “Netspot: Spotting signiﬁcant anomalous regions
on dynamic networks,” in International Conference on Data Mining.
SIAM, 2013, pp. 28–36.
[89] J. Morris, S. Smalley, and G. Kroah-Hartman, “Linux security modules:
General security support for the linux kernel,” in USENIX Security
Symposium, 2002.
[90] K.-K. Muniswamy-Reddy, D. A. Holland, U. Braun, and M. I. Seltzer,
“Provenance-aware storage systems.” in USENIX Annual Technical
Conference, 2006, pp. 43–56.
[91] S. S. Murtaza, A. Hamou-Lhadj, W. Khreich, and M. Couture, “Total
ads: Automated software anomaly detection system,” in 14th Interna-
tional Working Conference on Source Code Analysis and Manipulation.
IEEE, 2014, pp. 83–88.
[92] D. Mutz, W. Robertson, G. Vigna, and R. Kemmerer, “Exploiting
execution context for the detection of anomalous system calls,” in
International Workshop on Recent Advances in Intrusion Detection.
Springer, 2007, pp. 1–20.
[93] D. Namiot and M. Sneps-Sneppe, “On micro-services architecture,”
International Journal of Open Information Technologies, vol. 2, no. 9,
pp. 24–27, 2014.
[94] A. Narayanan, M. Chandramohan, R. Venkatesan, L. Chen, Y. Liu, and
S. Jaiswal, “graph2vec: Learning distributed representations of graphs,”
CoRR, vol. abs/1707.05005, 2017.
[95] M. Neuhaus and H. Bunke, “Self-organizing maps for learning the edit
costs in graph matching,” IEEE Transactions on Systems, Man, and
Cybernetics, Part B (Cybernetics), vol. 35, no. 3, pp. 503–514, 2005.
[96] C. Nikos Virvilis, G. CISSP, C. Oscar Serrano, C. CISM et al., “Big
data analytics for sophisticated attack detection,” 2014.
[97] P. Papadimitriou, A. Dasdan, and H. Garcia-Molina, “Web graph
similarity for anomaly detection,” Journal of Internet Services and
Applications, vol. 1, no. 1, pp. 19–30, 2010.
[98] C. Parampalli, R. Sekar, and R. Johnson, “A practical mimicry attack
against powerful system-call monitors,” in Symposium on Information,
Computer and Communications Security. ACM, 2008, pp. 156–167.
[99] J. Park, D. Nguyen, and R. Sandhu, “A provenance-based access control
model,” in International Conference on Privacy, Security and Trust.
IEEE, 2012, pp. 137–144.
[100] T. Pasquier, X. Han, M. Goldstein, T. Moyer, D. Eyers, M. Seltzer, and
J. Bacon, “Practical whole-system provenance capture,” in Symposium
on Cloud Computing. ACM, 2017, pp. 405–418.
[101] T. Pasquier, X. Han, T. Moyer, A. Bates, O. Hermant, D. Eyers, J. Ba-
con, and M. Seltzer, “Runtime analysis of whole-system provenance,”
in Conference on Computer and Communications Security (CCS’18).
ACM, 2018.
[102] K. Pei, Z. Gu, B. Saltaformaggio, S. Ma, F. Wang, Z. Zhang, L. Si,
X. Zhang, and D. Xu, “Hercule: Attack story reconstruction via
community discovery on correlated log graph,” in Proceedings of the
32nd Annual Conference on Computer Security Applications. ACM,
2016, pp. 583–595.
[103] B. Perozzi, L. Akoglu, P. Iglesias S´anchez, and E. M¨uller, “Focused
clustering and outlier detection in large attributed graphs,” in Interna-
tional Conference on Knowledge Discovery and Data Mining. ACM,
2014, pp. 1346–1355.
[104] D. J. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, “Hi-ﬁ: col-
lecting high-ﬁdelity whole-system provenance,” in Computer Security
Applications Conference. ACM, 2012, pp. 259–268.
[105] N. Provos, “Systrace-interactive policy generation for system calls,”
2006.
[106] T. Radichel, “Case Study: Critical Controls that Could Have Pre-
vented Target Breach,” SANS Institute InfoSec Reading Room, Septem-
ber 2014, available at https://www.sans.org/reading-room/whitepapers/
casestudies/paper/35412.
[107] E. Raff and C. Nicholas, “Malware classiﬁcation and class imbalance
via stochastic hashed lzjd,” in Proceedings of the 10th Workshop on
Artiﬁcial Intelligence and Security. ACM, 2017, pp. 111–120.
[108] P. J. Rousseeuw, “Silhouettes: a graphical aid to the interpretation and
validation of cluster analysis,” Journal of computational and applied
mathematics, vol. 20, pp. 53–65, 1987.
[109] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni, “A fast automaton-
based method for detecting anomalous program behaviors,” in Sympo-
sium on Security and Privacy (S&P).
IEEE, 2001, pp. 144–155.
[110] N. Shervashidze, P. Schweitzer, E. J. v. Leeuwen, K. Mehlhorn,
and K. M. Borgwardt, “Weisfeiler-lehman graph kernels,” Journal of
Machine Learning Research, vol. 12, no. Sep, pp. 2539–2561, 2011.
[111] A. Shrivastava and P. Li, “In defense of minhash over simhash,” in
Artiﬁcial Intelligence and Statistics, 2014, pp. 886–894.
[112] X. Shu, D. D. Yao, N. Ramakrishnan, and T. Jaeger, “Long-span
program behavior modeling and attack detection,” ACM Transactions
on Privacy and Security (TOPS), vol. 20, no. 4, p. 12, 2017.
[113] X. Shu, D. D. Yao, and B. G. Ryder, “A formal framework for program
anomaly detection,” in International Workshop on Recent Advances in
Intrusion Detection. Springer, 2015, pp. 270–292.
[114] A. Somayaji and S. Forrest, “Automated response using system-call
delay,” in Usenix Security Symposium, 2000, pp. 185–197.
[115] J. Sun, C. Faloutsos, S. Papadimitriou, and P. S. Yu, “Graphscope:
parameter-free mining of large time-evolving graphs,” in International
Conference on Knowledge Discovery and Data Mining. ACM, 2007,
pp. 687–696.
[116] W. Symantec, “Advanced persistent threats: A symantec perspective,”
Symantec World Headquarters, 2011.
[117] J. E. Tapiador and J. A. Clark, “Masquerade mimicry attack detection:
A randomised approach,” Computers & Security, vol. 30, no. 5, pp.
297–310, 2011.
[118] D. Tariq, B. Baig, A. Gehani, S. Mahmood, R. Tahir, A. Aqil, and
F. Zaffar, “Identifying the provenance of correlated anomalies,” in
Symposium on Applied Computing. ACM, 2011, pp. 224–229.
[119] C. Thornton, F. Hutter, H. H. Hoos, and K. Leyton-Brown, “Auto-weka:
Combined selection and hyperparameter optimization of classiﬁcation
algorithms,” in Proceedings of the 19th SIGKDD international con-
ference on Knowledge discovery and data mining. ACM, 2013, pp.
847–855.
[120] A. Tsymbal, “The problem of concept drift: deﬁnitions and related
work,” Computer Science Department, Trinity College Dublin, vol. 106,
no. 2, 2004.
[121] E. van der Kouwe, D. Andriesse, H. Bos, C. Giuffrida, and G. Heiser,
“Benchmarking crimes: an emerging threat in systems security,” arXiv
preprint arXiv:1801.02381, 2018.
[122] S. V. N. Vishwanathan, N. N. Schraudolph, R. Kondor, and K. M.
Borgwardt, “Graph kernels,” Journal of Machine Learning Research,
vol. 11, no. Apr, pp. 1201–1242, 2010.
[123] D. Wagner and P. Soto, “Mimicry attacks on host-based intrusion
detection systems,” in Conference on Computer and Communications
Security. ACM, 2002, pp. 255–264.
[124] J. Wang, H. T. Shen, J. Song, and J. Ji, “Hashing for similarity search:
A survey,” arXiv preprint arXiv:1408.2927, 2014.
[125] R. N. Watson, “Exploiting concurrency vulnerabilities in system call
wrappers.” WOOT, vol. 7, pp. 1–8, 2007.
[126] B. Weisfeiler and A. Lehman, “A reduction of a graph to a canon-
ical form and an algebra arising during this reduction,” Nauchno-
Technicheskaya Informatsia, vol. 2, no. 9, pp. 12–16, 1968.
[127] A. Wespi, M. Dacier, and H. Debar, “Intrusion detection using variable-
length audit trail patterns,” in International Workshop on Recent Ad-
vances in Intrusion Detection. Springer, 2000, pp. 110–129.
[128] W. Wu, B. Li, L. Chen, and C. Zhang, “Consistent weighted sampling
made more practical,” in International Conference on World Wide Web.
International World Wide Web Conferences Steering Committee, 2017,
pp. 1035–1043.
[129] K. Xu, W. Hu, J. Leskovec, and S. Jegelka, “How powerful are graph
neural networks?” arXiv preprint arXiv:1810.00826, 2018.
[130] K. Xu, K. Tian, D. Yao, and B. G. Ryder, “A sharper sense of self:
Probabilistic reasoning of program behaviors for anomaly detection
with context sensitivity,” in International Conference on Dependable
Systems and Networks.
IEEE/IFIP, 2016, pp. 467–478.
[131] T. Yadav and A. M. Rao, “Technical aspects of cyber kill chain,” in In-
ternational Symposium on Security in Computing and Communication.
Springer, 2015, pp. 438–452.
[132] D. Yang, B. Li, L. Rettig, and P. Cudr´e-Mauroux, “Histosketch: Fast
similarity-preserving sketching of streaming histograms with concept
drift,” in International Conference on Data Mining (ICDM).
IEEE,
2017, pp. 545–554.
[133] J. Yang, Y.-G. Jiang, A. G. Hauptmann, and C.-W. Ngo, “Evaluating
bag-of-visual-words representations in scene classiﬁcation,” in Work-
shop on multimedia information retrieval. ACM, 2007, pp. 197–206.
[134] N. Ye et al., “A markov chain model of temporal behavior for anomaly
detection,” in Systems, Man, and Cybernetics Information Assurance
and Security Workshop, vol. 166. West Point, NY, 2000, p. 169.
17
APPENDIX
A. Availability
The implementation described in § V and the material to reproduce the
evaluation presented in § VI are available online under Apache License
V2.0 and GPL v2 (see individual subcomponents for more details) at https:
//github.com/crimson-unicorn.
B. HistoSketch
Notation and Basic Concepts. Table X presents the notation we use in the
rest of this section. Similarity-preserving data sketching, or locality sensitive
hashing (LSH), allows us to efﬁciently compute the similarity between two
graphs by projecting their high-dimensional histogram representations to a
low-dimensional space while preserving their similarity [83].

h
L
Lh
λ
wt
S
(cid:44) Set of histogram elements
(cid:44) Histogram element: h ∈ 
(cid:44) Cumulative, weighted histogram count vector: L ∈ R||
(cid:44) Count of histogram element h
(cid:44) Weight decay factor
(cid:44) Exponential decay weight: wt = e−λ∆t
(cid:44) Sketch of histogram vector L: |S| (cid:28) || and is ﬁxed
>0
TABLE X: Notation
Formally, we deﬁne LSH as follows (adopted from Charikar [25]):
Deﬁnition 1: A locality sensitive hashing scheme is a distribution on
a family F of hash functions operating on a collection of objects, such
that for two objects m, n,
Ph∈F [h(m) = h(n)] = sim(m, n)
where sim(m, n) is some similarity function deﬁned on the collection
of objects.
HistoSketch [132] uses normalized min-max similarity to measure the
similarity between two histogram vectors:
Deﬁnition 2:
simmin−max(H a, H b) =
(cid:80)
(cid:80)
h∈ min(H a
h∈ max(H a
h , H b
h)
h , H b
h)
(cid:88)
(cid:88)
h∈
h∈
H a
h = 1
H b
h = 1
where the superscript a, b denotes the identity of a histogram.
Sketch Creation. HistoSketch uses a variation of consistent weighted
sampling that takes as input positive real numbers to generate ﬁxed-size
sketches [76]. The size of the sketch |S| controls the tradeoffs between
information loss and computation efﬁciency for real-time detection (§ VI).
To generate one sketch element Sj, we ﬁrst draw three random variables
for each h ∈ :
rh,j ∼ Gamma(2, 1)
ch,j ∼ Gamma(2, 1)
βh,j ∼ U nif orm(0, 1)
and then follow the steps in Alg. 3. r, c, and β are ﬁxed for each element
Algorithm 3: Creating Graph Sketch Using HistoSketch
: Histogram L, r, c, β
Input
Output: Sketch S and the corresponding hash values A
for j ← 1 to |S| do
foreach h ∈  do
yh,j = exp(logLh − rh,j βh,j )
ah,j =
ch,j
yh,j exp(rh,j )
Sj = argminh∈ah,j
Aj = minh∈ah,j
1
2
3
4
5
6
in . The sketch element j is the element h in  whose hashed value ah,j is
the minimum in the jth column of matrix A.
Sketch Update. HistoSketch makes it possible to quickly update the sketch
as new data arrives. At
incrementally updates the sketch
S(t + 1) based on the weighted histogram L, the previous sketch S(t) and
its corresponding hash values A(t), the new data item xt+1, and the weight
decay factor λ. Alg. 4 describes this process in detail.
time t + 1,
it
Algorithm 4: Updating Graph Sketch
: L, S(t), A(t), xt+1, λ
Input
Output: New sketch S(t + 1) and the corresponding hash values A(t + 1)
foreach h ∈  do
/* exponential decay */
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Lh = Lh(t) · e−λ
for j ← 1 to |S| do
if xt+1 ∈  then Lxt+1 = Lxt+1 + 1
else
 =  + {xt+1}
Lxt+1 = 1
Compute axt+1,j
if axt+1,j < Aj (t) · e−λ then
Sj (t + 1) = xt+1
Aj (t + 1) = axt+1,j
else
Sj (t + 1) = Sj (t)
Aj (t + 1) = Aj (t) · e−λ
/* see Alg. 3 */
C. Metrics
We denote false positives by f p, false negatives f n, true positives tp,
and true negatives tn.
Deﬁnition 3: precision =
tp
tp+f p
Deﬁnition 4: recall =
tp
tp+f n
Precision and recall measure relevance in classiﬁcation, where precision is a
measure of exactness and recall completeness.
Deﬁnition 5: accuracy =
tp+tn
tp+tn+f p+f n
Deﬁnition 6: F-score = 2 × precision×recall
precision+recall
F-score combines precision and recall using their harmonic mean. In our
measurement, recall and precision are evenly weighted.
18