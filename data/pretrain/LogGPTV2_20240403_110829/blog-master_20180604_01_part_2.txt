  sql3 text := 'values (';  
  sql4 text := ' where ';   
begin  
  rcnt := 0;
  for k,v in select * from json_each_text(icontent)  
  loop  
    if (not array[k] && keys) then  
      sql1 := sql1||quote_ident(k)||'='||coalesce(quote_literal(v),'NULL')||',';  
    else
      sql4 := sql4||quote_ident(k)||'='||coalesce(quote_literal(v),'NULL')||' and ';  
    end if;  
  end loop;  
  execute rtrim(sql1, ',') || rtrim(sql4, 'and ');  
  GET DIAGNOSTICS rcnt = ROW_COUNT;  
  if rcnt=0 then  
    for k,v in select * from json_each_text(icontent)  
    loop  
      sql2 := sql2||quote_ident(k)||',';  
      sql3 := sql3||coalesce(quote_literal(v),'NULL')||',';  
    end loop;  
    execute rtrim(sql2, ',') || ') ' || rtrim(sql3, ',') || ') ';  
  end if;  
  return;  
  exception when others then  
    execute rtrim(sql1, ',') || rtrim(sql4, 'and ');  
    return;  
end;  
$$ language plpgsql strict; 
-- 返回0 表示insert, 返回1表示update
```  
3、测试使用UPSERT动态函数，将数据upsert到test表  
```  
postgres=> truncate test;
TRUNCATE TABLE
postgres=> select gp_upsert('public', 'test', array['id1','id2'], '{"id1":1, "id2":2, "info":"digoal  ab", "c1":123, "c2":1.1, "c3":1.9999, "crt_time":"2018-01-01 10:10:10"}'::json);
 gp_upsert 
-----------
(1 row)
postgres=> select ctid,* from test;
 ctid  | id1 | id2 |    info    | c1  | c2  |   c3   | c4 |      crt_time       
-------+-----+-----+------------+-----+-----+--------+----+---------------------
 (0,1) |   1 |   2 | digoal  ab | 123 | 1.1 | 1.9999 |    | 2018-01-01 10:10:10
(1 row)
postgres=> select gp_upsert('public', 'test', array['id1','id2'], '{"id1":1, "id2":2, "info":"digoal  ab", "c1":123, "c3":2.9999, "crt_time":null}'::json);
 gp_upsert 
-----------
(1 row)
postgres=> select ctid,* from test;
 ctid  | id1 | id2 |    info    | c1  | c2  |   c3   | c4 | crt_time 
-------+-----+-----+------------+-----+-----+--------+----+----------
 (0,2) |   1 |   2 | digoal  ab | 123 | 1.1 | 2.9999 |    | 
(1 row)
postgres=> select gp_upsert('public', 'test', array['id1','id2'], '{"id1":1, "id2":1, "info":"digoal  ab", "c1":123, "c3":2.9999, "crt_time":null}'::json);
 gp_upsert 
-----------
(1 row)
postgres=> select ctid,* from test;
 ctid  | id1 | id2 |    info    | c1  | c2  |   c3   | c4 | crt_time 
-------+-----+-----+------------+-----+-----+--------+----+----------
 (0,2) |   1 |   2 | digoal  ab | 123 | 1.1 | 2.9999 |    | 
 (0,3) |   1 |   1 | digoal  ab | 123 |     | 2.9999 |    | 
(2 rows)
```  
### 压测
直连segment压测   
```
vi test.sql
\set id1 random(1,1000)
\set id2 random(1,10000)
select gp_upsert('public', 'test', array['id1','id2'], '{"id1": :id1, "id2": :id2, :a}'::json);
PGOPTIONS='-c gp_session_role=utility' pgbench -M simple -n -r -P 1 -f ./test.sql -c 96 -j 96 -T 120 -D a='"info":"digoal  ab", "c1":123, "c2":1.1, "c3":1.9999, "crt_time":"2018-01-01 10:10:10"'
transaction type: ./test.sql
scaling factor: 1
query mode: simple
number of clients: 96
number of threads: 96
duration: 120 s
number of transactions actually processed: 786825
latency average = 14.637 ms
latency stddev = 8.285 ms
tps = 6555.649259 (including connections establishing)
tps = 6557.772914 (excluding connections establishing)
script statistics:
 - statement latencies in milliseconds:
         0.001  \set id1 random(1,1000)
         0.000  \set id2 random(1,10000)
        14.633  select gp_upsert('public', 'test', array['id1','id2'], '{"id1": :id1, "id2": :id2, :a}'::json);
```
## 小结
结合直接读写SEGMENT，如果使用HEAP TABLE，可以实现高效实时的UPSERT。  
用户提供四组信息即可：  
1、schemaname  
2、表名   
3、分布键（由于GPDB支持多个字段作为分布键，所以这里使用数组来提供），(如果要直接将请求发送到SEGMENT执行，计算哈希时，请使用对应类型的HASH函数来计算。)     
4、K-V组成的JSON或JSONB  
如果输入的字符串中包含了特殊字符，可以使用unicode格式输入。   
```
postgres=# select gp_upsert('public', 'test', array['id1','id2'], '{"id1":1, "id2":2, "info":"digoal d\u0061t\u0061 \u0061 ab", "c1":123, "c2":1.1, "c3":1.9999, "crt_time":"2018-01-01 10:10:10"}'::jsonb);
 gp_upsert 
-----------
(1 row)
postgres=# select * from test;
 id1 | id2 |       info       | c1  | c2  |   c3   | c4 |      crt_time       
-----+-----+------------------+-----+-----+--------+----+---------------------
   1 |   2 | digoal data a ab | 123 | 1.1 | 1.9999 |    | 2018-01-01 10:10:10
(1 row)
```
json_lex_string@src/backend/utils/adt/json.c   
[《PostgreSQL 转义、UNICODE、与SQL注入》](../201704/20170402_01.md)    
如果要提升性能，可以使用[《PostgreSQL Oracle 兼容性之 - DBMS_SQL(存储过程动态SQL中使用绑定变量)》](../201803/20180323_02.md) , 但是请注意，如果每次操作的表的字段不尽相同，需要多次绑定不同的PS，所以可能会导致过多的PS，所以这样的情况下使用PS也不一定是个好方法。       
本例只用了单行upsert的方式，下一篇为batch方式，把对单表操作的多次请求封装到一次数据库请求，使用json或jsonb数组提交请求的内容（不同的JSON元素可以包含不同的被操作字段）。  
### Greenplum, PostgreSQL性能诊断，部署参考  
[《Greenplum PostgreSQL --enable-profiling 产生gprof性能诊断代码》](../201601/20160125_01.md)    
[《PostgreSQL on Linux 最佳部署手册 - 珍藏级》](../201611/20161121_01.md)  
[《PostgreSQL 源码性能诊断(perf profiling)指南 - 珍藏级》](../201611/20161129_01.md)  
[《PostgreSQL 代码性能诊断之 - OProfile & Systemtap》](../201505/20150509_01.md)    
## 参考  
[《让greenplum的oltp性能飞起来 - 直接读写数据节点》](../201511/20151126_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")