related-key-deriving function 𝜙MAC), and requires it to produce
two payloads 𝑝0, 𝑝1 (for either user u) such that there is a
collision in the corresponding outputs msg_key0, msg_key1
of the function family MAC. The advantage of F in break-
ing the RKCR-security of MAC with respect
to 𝜙MAC is
MAC, 𝜙MAC,F]. It is clear by
deﬁned as Advrkcr
inspection that the RKCR-security of MTP-MAC.Ev(mku, 𝑝) =
SHA-256(mku (cid:107) 𝑝)[64 : 192]
to 𝜙MAC from
Fig. 15) reduces to the collision resistance of truncated-output
SHA-256.
MAC, 𝜙MAC(F) = Pr[Grkcr
(with respect
MAC, 𝜙MAC,F
Game Grkcr
mk ←$ {0, 1}320 ; (mkI , mkR) ← 𝜙MAC(mk)
(u, 𝑝0, 𝑝1) ←$ F (mkI , mkR) ; msg_key0 ← MAC.Ev(mku, 𝑝0)
msg_key1 ← MAC.Ev(mku, 𝑝1) ; dist_inp ← ( 𝑝0 ≠ 𝑝1)
eq_out ← (msg_key0 = msg_key1) ; Return dist_inp ∧ eq_out
Figure 18: Related-key collision resistance of function family
MAC with respect to related-key-deriving function 𝜙MAC.
4) MTP-MAC is a PRF under RKA for unique-preﬁx inputs:
We require that MTP-MAC behaves like a pseudorandom
function in the RKA setting when it is evaluated on a set of
inputs that have unique 256-bit preﬁxes (UPRKPRF), as deﬁned
in Fig. 19. The security game Guprkprf
MAC, 𝜙MAC,D in Fig. 19 extends the
standard PRF notion to use two related 𝜙MAC-derived function
keys mkI, mkR for the function family MAC (similar to the
RKPRF-security notion we deﬁned above); but it also enforces
that the adversary D cannot query its oracle RoR on two
inputs (u, 𝑝0) and (u, 𝑝1) for any u ∈ {I, R} such that 𝑝0, 𝑝1
share the same 256-bit preﬁx. The unique-preﬁx condition
means that the game does not need to maintain a PRF table to
achieve output consistency. Note that this security game only
allows to call the oracle RoR with inputs of length | 𝑝| ≥ 256;
this is sufﬁcient for our purposes, because in MTP-CH the
function family MTP-MAC is only used with payloads that are
longer than 256 bits. The advantage of D in breaking the
UPRKPRF-security of MAC with respect to 𝜙MAC is deﬁned as
Advuprkprf
MAC, 𝜙MAC
In Section V-B2 we deﬁne a novel security notion that
requires SHACAL-2 to be a leakage-resilient, related-key PRF
when evaluated on a ﬁxed input; in the full version of this work
we show that the UPRKPRF-security of MTP-MAC reduces to
this security notion and to the one-time PRF-security (OTPRF)
of the SHA-256 compression function ℎ256. The new security
notion is similar to the notion discussed in Section V-A2 and
deﬁned in Section V-B1, in that it only allows the adversary
to evaluate SHACAL-2 on the ﬁxed input IV256. However, the
underlying security game derives the related SHACAL-2 keys
(D) = 2 · Pr[Guprkprf
MAC, 𝜙MAC,D] − 1.
MAC, 𝜙MAC,D
Game Guprkprf
𝑏 ←$ {0, 1}
mk ←$ {0, 1}320
(mkI , mkR) ← 𝜙MAC(mk)
𝑋I ← 𝑋R ← ∅
𝑏(cid:48) ←$ DRoR
Return 𝑏(cid:48) = 𝑏
// 𝑝 ∈ {0, 1}∗
RoR(u, 𝑝)
If | 𝑝| < 256 then return ⊥
𝑝0 ← 𝑝[0 : 256]
If 𝑝0 ∈ 𝑋u then return ⊥
𝑋u ← 𝑋u ∪ {𝑝0}
msg_key1 ← MAC.Ev(mku, 𝑝)
msg_key0 ←$ {0, 1}MAC.ol
Return msg_key𝑏
Figure 19: Related-key PRF-security of function family MAC
for inputs with unique 256-bit preﬁxes, with respect to key
derivation function 𝜙MAC.
differently, partially based on the function 𝜙MAC deﬁned in
Fig. 15 (as opposed to 𝜙KDF). The new notion is formalised as
the HRKPRF-security of SHACAL-2 with respect to 𝜙MAC.
5) MTP-SE is a one-time indistinguishable SE scheme:
For any block cipher E, the full version of this work shows
that IGE[E] as used in MTProto is OTIND$-secure (deﬁned in
Fig. 3) if CBC[E] is OTIND$-secure. This enables us to use
standard results [37], [38] on CBC in our analysis of MTProto.
B. Novel assumptions about SHACAL-2
In this section we deﬁne two novel assumptions about
SHACAL-2. Both assumptions require SHACAL-2 to be a related-
key PRF when evaluated on the ﬁxed input IV256 (i.e. on the
initial state of SHA-256), meaning that the adversary can obtain
the values of SHACAL-2.Ev(·, IV256) for a number of different
but related keys. We formalise the two assumptions as security
notions, called LRKPRF and HRKPRF, each deﬁned with
respect to different related-key-deriving functions; this reﬂects
the fact that these security notions allow the adversary to
choose the keys in substantially different ways. The notion of
LRKPRF-security derives the SHACAL-2 keys partially based
on the function 𝜙KDF, whereas the notion of HRKPRF-security
derives SHACAL-2 keys partially based on the function 𝜙MAC
(both functions are deﬁned in Fig. 15). Both security notions
also have different ﬂavours of leakage resilience: (1) the security
game deﬁning LRKPRF allows the adversary to directly choose
128 bits of the 512-bit long SHACAL-2 key, with another 96
bits of this key ﬁxed and known (due to being chosen by the
SHA padding function SHA-pad), and (2) the security game
deﬁning HRKPRF allows the adversary to directly choose 256
bits of the 512-bit long SHACAL-2 key.
We use the notion of LRKPRF-security to justify the RKPRF-
security of MTP-KDF with respect to 𝜙KDF (as explained in
Section V-A2), which is needed in both the IND-security
and the INT-security proofs of MTP-CH. We use the notion
of HRKPRF-security to justify the UPRKPRF-security of
MTP-MAC with respect to 𝜙MAC (as explained in Section V-A4),
which is needed in the IND-security proof of MTP-CH.
We stress that we have to assume properties of SHACAL-2 that
have not been studied in the literature. Related-key attacks on
reduced-round SHACAL-2 have been considered [39], [40], but
they ordinarily work with a known difference relation between
unknown keys. In contrast, our LRKPRF-security notion uses
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
99
keys that differ by random, unknown parts. Both of our security
notions consider keys that are partially chosen or known by the
adversary. It is straightforward to show that both the LRKPRF-
security and the HRKPRF-security of SHACAL-2 hold in the
ideal cipher model (i.e. when SHACAL-2 is modelled as the
ideal cipher). However, we cannot rule out the possibility of
attacks on SHACAL-2 due to its internal structure in the setting
of related-key attacks combined with key leakage. We leave
this as an open question.
1) SHACAL-2 is a PRF with 𝜙KDF-based related keys:
Our LRKPRF-security notion for SHACAL-2 is deﬁned with
respect to related-key-deriving functions 𝜙KDF (from Fig. 15)
and 𝜙SHACAL-2 from Fig. 20. The latter mirrors the design
of MTP-KDF that (in Deﬁnition 9) is deﬁned to return
SHA-256(msg_key (cid:107) kk0) (cid:107) SHA-256(kk1 (cid:107) msg_key) for the
target key kku = (kk0, kk1), except 𝜙SHACAL-2 only needs to
produce the corresponding SHA-padded inputs.
// |msg_key| = 128
𝜙SHACAL-2(kku, msg_key)
(kk0, kk1) ← kku ; sk0 ← SHA-pad(msg_key (cid:107) kk0)
sk1 ← SHA-pad(kk1 (cid:107) msg_key) ; Return (sk0, sk1)
𝜙SHACAL-2 :
Figure
function
(MTP-KDF.Keys × MTP-KDF.Keys) × {0, 1}128 → {0, 1}512.
20: Related-key-deriving
Consider the game Glrkprf
SHACAL-2, 𝜙KDF, 𝜙SHACAL-2,D in Fig. 21. Ad-
versary D is given access to the RoR oracle that takes
u, 𝑖, msg_key as input; all
inputs to the oracle serve as
parameters for the SHACAL-2 key derivation, used to determine
the challenge key sk𝑖. The adversary gets back either the output
of SHACAL-2.Ev(sk𝑖, IV256) (if 𝑏 = 1), or a uniformly random
value (if 𝑏 = 0), and is required to guess the challenge bit.
The PRF table T is used to ensure consistency, so that a single
random value is sampled and remembered for each set of used
key derivation parameters u, 𝑖, msg_key. The advantage of D
in breaking the LRKPRF-security of SHACAL-2 with respect to
(D) =
𝜙KDF and 𝜙SHACAL-2 is deﬁned as Advlrkprf
2 · Pr[Glrkprf
SHACAL-2, 𝜙KDF, 𝜙SHACAL-2,D] − 1.
SHACAL-2, 𝜙KDF, 𝜙SHACAL-2
SHACAL-2, 𝜙KDF, 𝜙SHACAL-2,D
// u ∈ {I, R}, 𝑖 ∈ {0, 1}, |msg_key| = 128
Game Glrkprf
𝑏 ←$ {0, 1} ; kk ←$ {0, 1}672 ; (kkI , kkR) ← 𝜙KDF(kk)
𝑏(cid:48) ←$ DRoR ; Return 𝑏(cid:48) = 𝑏
RoR(u, 𝑖, msg_key)
(sk0, sk1) ← 𝜙SHACAL-2(kku, msg_key)
𝑦1 ← SHACAL-2.Ev(sk𝑖, IV256)
If T[u, 𝑖, msg_key] =⊥ then
𝑦0 ← T[u, 𝑖, msg_key] ; Return 𝑦𝑏
Figure 21: Leakage-resilient, related-key PRF-security of
function family SHACAL-2 on ﬁxed input IV256 with respect to
related-key-deriving functions 𝜙KDF and 𝜙SHACAL-2.
T[u, 𝑖, msg_key] ←$ {0, 1}SHACAL-2.ol
2) SHACAL-2 is a PRF with 𝜙MAC-based related keys:
SHACAL-2, 𝜙MAC,D in Fig. 22. Adversary D
Consider the game Ghrkprf
is given access to RoR oracle, and is required to choose
SHACAL-2, 𝜙MAC,D
// u ∈ {I, R}, | 𝑝| = 256
RoR(u, 𝑝)
𝑦1 ← SHACAL-2.Ev(mku (cid:107) 𝑝, IV256)
If T[u, 𝑝] = ⊥ then
𝑦0 ← T[u, 𝑝]
Return 𝑦𝑏
Game Ghrkprf
𝑏 ←$ {0, 1}
mk ←$ {0, 1}320
(mkI , mkR) ← 𝜙MAC(mk)
𝑏(cid:48) ←$ DRoR
Return 𝑏(cid:48) = 𝑏
Figure 22: Leakage-resilient, related-key PRF-security of
function family SHACAL-2 on ﬁxed input IV256 with respect to
related-key-deriving function 𝜙MAC.
T[u, 𝑝] ←$ {0, 1}SHACAL-2.ol
SHACAL-2, 𝜙MAC
(D) = 2 · Pr[Ghrkprf
the 256-bit sufﬁx 𝑝 of each challenge key used for evaluating
SHACAL-2.Ev(·, IV256). The value of mku is then used to set the
256-bit preﬁx of the challenge key, where u is also chosen by
the adversary, but the mkI, mkR values themselves are related
secrets that are not known to D. The advantage of D in break-
ing the HRKPRF-security of SHACAL-2 with respect to 𝜙MAC is
SHACAL-2, 𝜙MAC,D] − 1.
deﬁned as Advhrkprf
C. Security requirements on message encoding
1) MTP-ME ensures in-order delivery: We require that
MTP-ME is EINT-secure (Fig. 8) with respect to the support
function SUPP deﬁned in Fig. 23. SUPP enforces in-order
delivery for each user’s sent messages, thus preventing uni-
directional reordering attacks, replays and message deletion. It
is formalised using a function ﬁnd(op, tr, label) that searches
a given transcript for a sent or recv entry that corresponds to
label, and also counts the number of valid entries encountered
prior to ﬁnding the target. For any label that corresponds to the
𝑁sent-th valid sent-type entry in tru, the support function SUPP
checks that tru contains 𝑁recv = 𝑁sent−1 valid recv-type entries,
and that none of them contains the label itself. Here we rely
on each label being unique, which is true for MTP-ME as long
as it encodes at most 296 messages.20 Replays are prevented
by the search of entries received by u. The count from both
searches is used to ensure that there are no gaps between
the number of sent and received ciphertexts, thus preventing
deletion and reordering.21 As outlined in Section IV-B1, the
MTProto implementation of ME we studied allowed reordering
so it was not EINT-secure with respect to SUPP. The full
MTP-ME,SUPP(F) = 0 for any
version of this work shows that Adveint
F making at most 296 queries to Send.
2) Preﬁx uniqueness of MTP-ME: We require that payloads
produced by MTP-ME have distinct preﬁxes of size 256 bits
(independently for each user u ∈ {I, R}), as deﬁned by the
security game in Fig. 24. The advantage of an adversary F in
breaking the UPREF-security of a message encoding scheme
ME,F]. Given the ﬁxed
ME is deﬁned as Advupref
ME
preﬁx size, this notion cannot be satisﬁed against unbounded
adversaries. Our MTP-ME scheme ensures unique preﬁxes using
the 96-bit counter seq_no that contains the number of messages
(F) = Pr[Gupref
20A limitation on number of queries is inherent as long as ﬁxed-length
sequence numbers are used.
21Note that aux is not used in SUPP or MTP-ME. It would be possible to
add time synchronisation using the timestamp captured in the msg_id ﬁeld
just as the current MTProto ME implementation does.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
100
ﬁnd(recv, tru, label)
ﬁnd(op, tr, label)
𝑁op ← 0
For (op, 𝑚, label(cid:48), aux) ∈ tr do
SUPP(u, tru, tru, label, aux)
(𝑁recv, 𝑚recv) ←
If 𝑚recv ≠⊥ then return ⊥
(𝑁sent, 𝑚sent) ←
ﬁnd(sent, tru, label)