title:Efficient Security Mechanisms for Routing Protocolsa
author:Yih-Chun Hu and
Adrian Perrig and
David B. Johnson
Ef(cid:2)cient Security Mechanisms for Routing Protocols
Yih-Chun Hu
Carnegie Mellon University
Adrian Perrig
Carnegie Mellon University
PI:EMAIL
PI:EMAIL
David B. Johnson
Rice University
PI:EMAIL
Abstract
As our economy and critical infrastructure increasingly rely on
the Internet, securing routing protocols becomes of critical impor-
tance. In this paper, we present four new mechanisms as tools for
securing distance vector and path vector routing protocols. For
securing distance vector protocols, our hash tree chain mecha-
nism forces a router to increase the distance (metric) when for-
warding a routing table entry. To provide authentication of a re-
ceived routing update in bounded time, we present a new mecha-
nism, similar to hash chains, that we call tree-authenticated one-
way chains. For cases in which the maximum metric is large, we
present skiplists, which provides more ef(cid:2)cient initial computa-
tion cost and more ef(cid:2)cient element veri(cid:2)cation; this mechanism
is based on a new cryptographic mechanism, called MW-chains,
which we also present. For securing path vector protocols, our cu-
mulative authentication mechanism authenticates the list of routers
on the path in a routing update, preventing removal or reordering
of the router addresses in the list; the mechanism uses only a sin-
gle authenticator in the routing update rather than one per router
address. We also present a simple mechanism to securely switch
one-way chains, by authenticating the next one-way chain using
the previous one. These mechanisms are all based on ef(cid:2)cient
symmetric cryptographic techniques and can be used as building
blocks for securing routing protocols.
Introduction
1.
Routing protocols are dif(cid:2)cult to ef(cid:2)ciently secure. An
attacker may, for example, attempt to inject forged routing
messages into the system, or may attempt to modify legit-
imate routing messages sent by other nodes. An attacker
may also attempt to exploit mechanisms in the routing pro-
tocol, such as those intended to quickly spread new routing
information, to instead consume large amounts of network
and router resources. Even the addition of cryptographic
mechanisms to a routing protocol may make the protocol
This work was supported in part by NSF under grant CCR-0209204, by
NASA under grant NAG3-2534, and by gifts from Schlumberger and
Bosch. The views and conclusions contained here are those of the au-
thors and should not be interpreted as necessarily representing the of(cid:2)-
cial policies or endorsements, either express or implied, of NSF, NASA,
Schlumberger, Bosch, Rice University, Carnegie Mellon University, or the
U.S. Government or any of its agencies.
vulnerable to such attacks, since traditional security mech-
anisms are generally expensive in terms of CPU time; an
attacker may be able to cripple several routers simply by
(cid:3)ooding each router with large numbers of randomly gen-
erated, forged routing messages, which then must be au-
thenticated and rejected by the router, leading to a denial of
service by consuming all router CPU time.
Current routing protocols in use in the Internet today,
such as the Border Gateway Protocol (BGP) [36] or the
Routing Information Protocol (RIP) [23], were originally
designed to operate in a trusted environment, assuming no
malicious nodes. However, with the growing importance
and usage of the Internet, an increasing number of corpo-
rations and public services are becoming dependent on the
correct functioning of the Internet, and routing protocol se-
curity has become a signi(cid:2)cant issue. The command and
control of critical infrastructures (such as the control of the
power grid) and the emerging use of the Internet to carry
voice traf(cid:2)c are two examples of this trend. The importance
of securing Internet routing has also been illustrated by re-
cent BGP miscon(cid:2)gurations [22], in which non-malicious
BGP speakers have been able to disrupt Internet routing as
a result of incorrect con(cid:2)guration.
Several researchers have proposed secure network rout-
ing protocols, but most have used standard digital signatures
to authenticate routing update messages [18, 19, 20, 32, 38,
39, 40]. Similarly, in the area of secure multihop wireless
ad hoc network routing, most researchers use standard dig-
ital signatures to authenticate routing messages [5, 41, 43].
Unfortunately, generation and veri(cid:2)cation of digital signa-
tures is relatively inef(cid:2)cient, and it is thus challenging to
design a scalable, ef(cid:2)cient, and viable secure routing proto-
col based on such asymmetric cryptography.
Symmetric cryptographic primitives are much more ef-
(cid:2)cient than asymmetric primitives, but so far, few security
mechanisms based on symmetric cryptography have been
designed for the requirements of routing protocols. We now
discuss the exceptions of which we are aware.
Three mechanisms based on symmetric cryptography
have been proposed to secure link state routing updates.
Cheung [2] presents an ef(cid:2)cient time-based authentication
protocol to authenticate link state routing updates. The
proposed authentication is optimistic, though, and routers
use the routing update before it is authenticated. Hauser,
Przygienda, and Tsudik [10] propose to use ef(cid:2)cient one-
way hash chains to authenticate link state routing up-
dates. Zhang [42] subsequently improves their mechanism
and presents a chained Merkle-Winternitz one-time signa-
ture [27, 26], similar to our basic MW chains scheme that
we present in Section 4.6, although our technique is more
space-ef(cid:2)cient.
Heffernan [12] assumes that neighboring routers share
secret keys, and routers use MD5 to authenticate each
other’s messages. This approach allows BGP to protect
itself against the introduction of spoofed TCP segments
into the connection stream (TCP resets are of particular
concern).
Basagni et al. [1] present a protocol with a network-wide
shared key for use in routing, purely based on symmet-
ric cryptography. However, their approach assumes secure
hardware to protect the key.
We have previously developed two ef(cid:2)cient secure rout-
ing protocols based on symmetric cryptography. Our SEAD
protocol [13] introduces a new ef(cid:2)cient mechanism, based
on one-way hash chains, to secure distance vector routing
updates. Our Ariadne routing protocol [14] is a secure
on-demand ad hoc network routing protocol using source
routing.
In this paper, we present four new security mechanisms
based on ef(cid:2)cient symmetric cryptographic techniques, that
can be applied to strengthen current distance vector and path
vector routing protocols or can be incorporated into the de-
sign of new secure routing protocols. For securing distance
vector protocols, our hash tree chain mechanism forces a
router to increase the distance (metric) when forwarding a
routing table entry. To provide authentication of a received
routing update in bounded time, we present a new mecha-
nism, similar to hash chains, that we call tree-authenticated
one-way chains. For cases in which the maximum metric
is large, we present skiplists, which provides more ef(cid:2)cient
initial computation cost and more ef(cid:2)cient element veri(cid:2)-
cation; this mechanism is based on a new cryptographic
mechanism, called MW-chains, which we also present. For
securing path vector protocols, our cumulative authentica-
tion mechanism authenticates the list of routers on the path
in a routing update, preventing removal or reordering of the
router addresses in the list; the mechanism uses only a sin-
gle authenticator in the routing update rather than one per
router address. We also present a simple mechanism to se-
curely switch one-way chains, by authenticating the next
one-way chain using the previous one.
In Section 2 of this paper, we discuss the assumptions
underlying our secure mechanisms. Section 3 describes the
basic cryptographic mechanisms that we use. Section 4
describes our new mechanisms for improving security in
distance vector protocols, and Section 5 presents our new
mechanisms for building ef(cid:2)cient and secure path vector
routing protocols. Finally, we present our conclusions in
Section 6.
2. Assumptions
In designing our mechanisms to build secure routing proto-
cols, we make the following assumptions on node capability
and key setup.
2.1. Node Assumptions
The computational resources of network nodes vary greatly,
from a high-end Internet backbone router to a tiny ad hoc
network node. To make our results as general as possi-
ble, we design our mechanisms to be extremely lightweight
and ef(cid:2)cient. This allows our mechanisms to be used on
resource-constrained ad hoc network nodes and enables
large Internet routers to scale to high bandwidth links. In
particular, we design our mechanisms from purely symmet-
ric cryptographic functions, such as message authentication
codes (MACs) or cryptographic hash functions. In contrast,
mechanisms based on asymmetric cryptography are often 3
to 4 orders of magnitude slower than hash functions.
Most previous work on secure Internet and ad hoc
network routing relies on asymmetric cryptography [18,
20, 32, 38, 39, 40]. However, computing such signatures
on resource-constrained nodes is expensive, and such high
overhead computations may hinder the routing protocol’s
scalability to large networks.
We do not assume trusted hardware such as tamperproof
modules. Secure routing with trusted hardware is much
simpler, since node compromise is assumed to be impos-
sible.
2.2. Security Assumptions and Key Setup
We assume a mechanism that enables the secure and authen-
tic distribution of keying material. Most of our mechanisms
require the distribution of authentic public values to enable
authentication of subsequent values. However, the cumula-
tive authentication mechanism assumes pairwise shared se-
cret keys, or authentic public keys of other nodes if a broad-
cast authentication system such as TESLA [34, 35] is used.
Digital signatures and a public-key infrastructure may be
used to set up the authenticated public values, as well as to
establish pairwise shared secret keys if used in conjunction
with a key agreement protocol such as Dif(cid:2)e-Hellman [6].
We assume protection against the immediate replay of
routing packets.
In a wired network or a static wireless
network, each router can be con(cid:2)gured with a list of possi-
ble neighbors; a router that receives an update from a node
not on this list can silently discard that update. In mobile
m07
m03
m47
m01
m23
m45
m67
v00
v0
v01
v1
v02
v2
v03
v3
v04
v4
v05
v5
v06
v6
v07
v7
Figure 1: Tree authenticated values
wireless networks, such as ad hoc networks, we have de-
veloped packet leashes which restrict such immediate re-
play [15]. In this paper, we assume that one of these mech-
anisms is used.
3. Cryptographic Mechanisms
In this section, we review the basic cryptographic mech-
anisms that we use in this work. We (cid:2)rst review tree-
authenticated values, also known as Merkle hash trees [25].
We also review one-way hash chains, a frequently used
cryptographic primitive.
3.1. Tree-Authenticated Values
The mechanism of tree-authenticated values is an ef(cid:2)-
cient hash tree authentication mechanism, (cid:2)rst presented by
Merkle and also known as Merkle hash trees [25]. To au-
thenticate values v0;v1; : : : ;vw(cid:0)1, we place these values at
the leaf nodes of a binary tree. (For simplicity we assume
a balanced binary tree, so w is a power of two.) We (cid:2)rst
blind all the vi values with a one-way hash function H to
prevent disclosing neighboring values in the authentication
information (as we describe below), so v0i = H[vi]. We then
use the Merkle hash tree construction to commit to the val-
ues v00; : : : ;v0w(cid:0)1. Each internal node of the binary tree is
derived from its two child nodes. Consider the derivation of
some parent node mp from its left and right child nodes ml
and mr: mp = H[ml jj mr], where jj denotes concatenation.
We compute the levels of the tree recursively from the leaf
nodes to the root node. Figure 1 shows this construction
over the eight values v0;v1; : : : ;v7, e.g., m01 = H(v00 jj v01),
m03 = H[m01 jj m23].
The root value of the tree is used to commit to the en-
tire tree, and in conjunction with additional information, it
can be used to authenticate any leaf value. To authenticate a
value vi the sender discloses i, vi, and all the sibling nodes of
the nodes on the path from vi to the root node. The receiver
can then use these nodes to verify the path up to the root,
which authenticates the value vi. For example, if a sender
wants to authenticate key v2 in Figure 1, it includes the val-
ues v03;m01;m47 in the packet. A receiver with an authentic
root value m07 can then verify that
H(cid:20)H(cid:2) m01 jj H(cid:2) H[ v2 ] jj v03 (cid:3)(cid:3) jj m47(cid:21)
equals the stored root value m07. If the veri(cid:2)cation is suc-
cessful, the receiver knows that v2 is authentic.
The extra v00;v01; : : : ;v07 in Figure 1 are added to the tree
to avoid disclosing (in this example) the value v3 for the
authentication of v2.
3.2. One-Way Hash Chains
One-way hash chains, or simply one-way chains, are a fre-
quently used cryptographic primitive in the design of secure
protocols. We create a one-way chain by selecting the (cid:2)nal
value at random, and repeatedly apply a one-way hash func-
tion H. (In our description, we discuss the one-way chain
from the viewpoint of usage, so the (cid:2)rst value of the chain is
the last value generated, and the initially randomly chosen
value is the last value of the chain used.) One-way chains
have two main properties (assuming H is a cryptographi-
cally secure one-way hash function):
(cid:15) Anybody can authenticate that a value v j really be-
longs to the one-way chain, by using an earlier value
vi of the chain and checking that H j(cid:0)i(v j) equals vi.
(cid:15) Given the latest released value vi of a one-way chain,
an adversary cannot (cid:2)nd a later value v j such that
H j(cid:0)i(v j) equals vi. Even when value vi+1 is released,
a second pre-image collision resistant hash function
prevents an adversary from (cid:2)nding v0i+1 different from
vi+1 such that H[vi+1] equals vi.
These two properties result in authentication of one-way
chain values: if the current value vi belongs to the one-way
chain, and we see another value v j with the property that
H j(cid:0)i(v j) equals vi, then v j also originates from the same
chain and was released by the creator of the chain.
Jakobsson [16] and Coppersmith and Jakobsson [3] pro-
pose a storage-ef(cid:2)cient mechanism for one-way chains,
such that a one-way chain with N elements requires only
O(log(N)) storage and O(log(N)) computation to access an
element.
4. Mechanisms for Securing
Distance Vector Protocols
In this section, we (cid:2)rst review distance vector routing pro-
tocols, and then discuss attacks, previous work on securing
distance vector routing, and the remaining research chal-
lenges. We then present new mechanisms to address these
challenges.
The utility of the mechanisms we present is not limited
to routing protocols. In particular, the skiplists mechanism
we present in Section 4.7 allows highly ef(cid:2)cient genera-
tion and veri(cid:2)cation of elements in long hash chains, giving
a constant factor speedup in both generation and veri(cid:2)ca-
tion. Skiplists are thus particularly useful for protocols that
use long one-way hash chains, such as TESLA [34, 35] or
BiBa [33].
4.1. Overview of Distance Vector Routing
A distance vector routing protocol (cid:2)nds shortest paths be-
tween nodes in the network through a distributed implemen-
tation of the classical Bellman-Ford algorithm. Distance
vector protocols are easy to implement and are ef(cid:2)cient in
terms of memory and CPU processing capacity required at
each node. A popular example of a distance vector rout-
ing protocol is RIP [11, 23], which is widely used in IP
networks of moderate size. Distance vector routing can
also be used for routing within a multihop wireless ad hoc
network by having each node in the network act as a router
and participate in the routing protocol [17, 30, 31].
In distance vector routing, each router maintains a rout-