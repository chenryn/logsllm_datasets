title:PPR: partial packet recovery for wireless networks
author:Kyle Jamieson and
Hari Balakrishnan
PPR: Partial Packet Recovery for Wireless Networks
Kyle Jamieson and Hari Balakrishnan
MIT Computer Science and Artiﬁcial Intelligence Laboratory
{jamieson, hari}@csail.mit.edu
ABSTRACT
Bit errors occur in wireless communication when interference or
noise overcomes the coded and modulated transmission. Current
wireless protocols may use forward error correction (FEC) to cor-
rect some small number of bit errors, but generally retransmit the
whole packet if the FEC is insufﬁcient. We observe that current
wireless mesh network protocols retransmit a number of packets
and that most of these retransmissions end up sending bits that have
already been received multiple times, wasting network capacity. To
overcome this inefﬁciency, we develop, implement, and evaluate a
partial packet recovery (PPR) system.
PPR incorporates two new ideas: (1) SoftPHY, an expanded
physical layer (PHY) interface that provides PHY-independent
hints to higher layers about the PHY’s conﬁdence in each bit it
decodes, and (2) a postamble scheme to recover data even when a
packet preamble is corrupted and not decodable at the receiver.
Finally, we present PP-ARQ, an asynchronous link-layer ARQ
protocol built on PPR that allows a receiver to compactly encode a
request for retransmission of only those bits in a packet that are
likely in error. Our experimental results from a 31-node Zigbee
(802.15.4) testbed that includes Telos motes with 2.4 GHz Chipcon
radios and GNU Radio nodes implementing the 802.15.4 standard
show that PP-ARQ increases end-to-end capacity by a factor of 2×
under moderate load.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network Archi-
tecture and Design—Wireless Communication
General Terms
Design, experimentation, measurement
Keywords
Wireless, 802.11, Zigbee, layering, synchronization, ARQ
1.
INTRODUCTION
Bit errors over wireless channels occur when the signal to inter-
ference and noise ratio (SINR) is not high enough to decode infor-
This work was supported by the National Science Foundation under Award
Numbers CNS-0520032 and CNS-0205445.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’07, August 27–31, 2007, Kyoto, Japan.
Copyright 2007 ACM 978-1-59593-713-1/07/0008 ...$5.00.
mation correctly. In addition to noise, poor SINR arises from the
interference caused by one or more concurrent transmissions in the
network, and varies in time even within a single packet transmis-
sion. Thus a tension arises between permitting concurrent trans-
missions to increase spatial reuse, and receiving those transmis-
sions correctly. Even with a variety of physical layer (PHY) tech-
niques such as spread-spectrum and OFDM modulation, channel
coding, and the like, current systems rely heavily on link-layer re-
transmissions to recover from bit errors and achieve high capacity.
Since wireless channels are hard to model and predict, designing an
error-free communication link generally entails sacriﬁcing signiﬁ-
cant capacity; instead, a design that occasionally causes errors to
occur fares better in this regard. Retransmissions allow a receiver
to recover from lost packets.
Retransmitting entire packets works well over wired networks
where bit-level corruption is rare and a packet loss implies that all
the bits of the packet were lost (e.g., due to a queue overﬂow in a
switch). Over radio, however, all the bits in a packet don’t share the
same fate: very often, only a small number of bits in a packet are in
error; the rest are correct. Thus, it is wasteful to re-send the entire
packet: our goal is to eliminate this waste.
There are several challenges in realizing this goal. First, how
can a receiver tell which bits are correct and which are not? Sec-
ond, since most PHYs require the receiver to synchronize with the
sender on a preamble before decoding a packet’s contents, wouldn’t
any corruption to the preamble (caused, for instance, by a packet
collision from another transmission) greatly diminish the potential
beneﬁts of the proposed scheme? Third, how can higher layer pro-
tocols use partial packets to improve end-to-end performance?
This paper presents the design, implementation, and evaluation
of PPR, a Partial Packet Recovery system that improves aggregate
network capacity by greatly reducing the number of redundant bits
transmitted. Our key insight is to use information from the physical
layer to improve error resilience. PPR incorporates the following
two novel techniques, to meet the challenges mentioned above:
The SoftPHY interface (Section 2) allows the receiver to deter-
mine, with no additional feedback or information from the sender,
which bits are likely to be correct in any given packet reception
using hints from the PHY. The key insight in SoftPHY is that the
PHY should pass up information about how close each received
symbol or codeword was to the symbol or codeword the PHY de-
cided upon. The higher layer can then use this information as a hint,
independent of the underlying details in the PHY.
Postamble decoding (Section 3) allows a receiver to receive and
decode bits correctly even from packets whose preambles are cor-
rupted by other transmissions or noise. The main idea here is to
replicate the information in the preamble and packet header in a
postamble and a packet trailer, allowing a receiver to lock on the
409Figure 1: Block diagram of the PPR system; dark blocks and the SoftPHY interface are the contributions of this paper. Our contri-
butions ﬁt above one of many different types of receiver structure, modiﬁed to pass up SoftPHY hints (Section 2) to the MAC layer.
Postamble decoding, described in Section 3, increases the number of opportunities for recovering partial packets from the receiver.
SoftPHY hints propagate to PP-ARQ, the partial packet retransmission layer, described in Section 4.
postamble and then “roll back” in time to recover data that was
previously impossible to decode.
Using PPR, we have designed PP-ARQ (Section 4), a link-layer
retransmission protocol in which the receiver compactly requests
the retransmission of only the select portions of a packet where
there are bits likely to be wrong. In response, the sender retrans-
mits the bits and checksums for those ranges, so that the receiver
can eventually be certain that all the bits in the packet are correct.
The receiver’s request encoding uses a dynamic programming algo-
rithm that minimizes the expected bit overhead of communicating
this feedback, balancing that against the cost of the sender retrans-
mitting bits already received correctly.
We have implemented each of the three above ideas for 802.15.4,
the Zigbee standard. Our implementation is compatible with that
speciﬁcation. The SoftPHY and postamble decoding steps running
at the receiver can recover partial packets from unmodiﬁed Zigbee
senders, while PP-ARQ requires sender-side modiﬁcations. For ad-
ditional insight, we have implemented PPR in an uncoded DQPSK
receiver. Section 6 gives the details of all our implementation work.
The underlying premise in PPR is that signiﬁcant performance
gains can be obtained by the combination of a more aggressive,
higher-rate PHY and being more ﬂexible about the granularity
of error recovery in wireless networks. Our techniques can im-
prove performance in both access point-based networks and wire-
less mesh networks. Section 7 shows several experimental results
that conﬁrm this premise: in that section, we describe a 31-node in-
door testbed consisting of telos motes with 2.4 GHz Zigbee radios
from Chipcon and six GNU Radio nodes. Our results show factor-
of-two gains over the status quo in aggregate end-to-end through-
put using PP-ARQ. Our gains are even higher (4× better aggregate
end-to-end throughput) under heavy load, which causes a number
of links to have marginal quality. Even at light load we ﬁnd that
on the links with the lowest loss rates (which would be the ones se-
lected by routing protocols), the raw success rate improves by 1.6×.
We also compare PPR to other ways of determining which bits are
likely to be correct, such as fragmented packet checksums.
2. SOFTPHY INTERFACE AND DESIGN
In current receivers, the PHY outputs only a sequence of bits
after demodulation and channel decoding. This interface is rather
limiting, since higher layers have no easy way of assertaining the
certainty that the PHY has in each bit it outputs. The PHY, how-
ever, has this information, and in this section we discuss how it
can annotate each group of bits output with the conﬁdence it has
in those bits’ correctness. For three common receiver designs span-
ning the PHY design space, we specify this information and discuss
Figure 2: SoftPHY in a standard demodulator. For each output
symbol ˆak, the demodulator produces SoftPHY hint ϕk.
implementation methods. In the following sections, we consider
SoftPHY in an uncoded demodulator, a DSSS receiver with hard-
decision symbol decoding, and soft-decision decoders. We begin
with a key observation regarding the PHY’s digital abstraction.
2.1 SoftPHY architecture
One beneﬁt of the current layered receiver architecture is that the
PHY provides a digital abstraction, which isolates layers above the
PHY from implementation details of the PHY itself. While a va-
riety of PHY implementations can provide the SoftPHY interface,
the semantics of SoftPHY hints are tied to the details of the PHY,
potentially violating this digital abstraction.
In PPR, layers above the PHY are not aware of how SoftPHY
hints are calculated. Instead, they adapt their decisions on how to
handle each bit based on observation. For example, the MAC layer
could observe the correlation between a particular threshold and the
correctness of the hint, and adapt the threshold dynamically. This
approach can be used as long as the PHY simply provides a “mono-
tonicity” contract; i.e., given any two SoftPHY hint values, h1 and
h2, h1 < h2 always implies that the PHY has a higher conﬁdence in
the bits associated with h1 than with h2 (or vice-versa).
Thus, while SoftPHY hints themselves are PHY-dependent, lay-
ers above the PHY use SoftPHY hints in a PHY-independent man-
ner, retaining the beneﬁts of the PHY’s digital abstraction. At the
same time, from an information-theoretic perspective, the SoftPHY
design necessitates no loss of information: the bits and the hints can
contain the same amount of information as the raw signal samples.
We now brieﬂy delve into the PHY, describing how three common
designs can yield SoftPHY hints.
2.2 SoftPHY for an uncoded channel
Figure 2 gives a picture of a rudimentary digital receiver that has
been agumented to return SoftPHY hints. Once the incoming signal
r(t) has been downconverted to baseband, the structure that maxi-
Preamble frame synchronizationPP-ARQPostamble frame synchronizationHard symbol-decisionDSSS decoderSoft-outputViterbi decoderQPSK/QAM detectorSoftPHY InterfaceBits andSoftPHY hintsPartial packets andSoftPHY hintsPhysical LayerMAC LayerPacketsOROROR OTHERS...u(f)etfj02π−h*(−t)kTakˆϕk)(trykFigure 3: A frame is composed of S symbols, preceeded by a start-of-frame delimiter (SFD) and followed by an end-of-frame
delimeter (EFD). Using the notation of Section 2.3, symbols are organized into S /B codewords of B/k symbols each by channel coding
or direct-sequence spread spectrum. Each codeword encodes b data bits. Our novel contribution to the frame layout, the postamble,
is shown in bold.
mizes SNR at the output of the receiver [7] is a ﬁlter h∗(−t) matched
to the shape of the transmitted signal as seen through the channel,
h(t). After sampling, the key element in the receiver is the slicer,
which quantizes the sampled signal to one of a few symbols ˆak. For
each quantized output symbol, we obtain PHY hints ϕk as the dif-
ference between the sampler output and the slicer output, as shown
in Figure 2. This SoftPHY hint can be interpreted as the distance
in signal space between r(t)’s constellation point and the decoded
symbol’s constellation point. We have implemented the design in
Figure 2 for a DQPSK receiver. In Section 7.4, we evaluate these
SoftPHY hints at marginal SNR.
2.3 SoftPHY in a hard-decision block decoder
Our Zigbee implementation, evaluated in Section 7.1, uses a hard
decision decoder (HDD). To understand how SoftPHY works in our
Zigbee receiver, a conceptual model of the wireless communication
system will be helpful. This model also applies to common direct-
sequence spread spectrum (DSSS) or OFDM-DSSS radio. In par-
ticular, it applies to both 802.15.4 (Zigbee) and 802.11b/g (WiFi),
two common standards.
In block coding, the PHY maps groups of b source bits to a B-
bit (B-chip) codeword as shown in Figure 3. Since there are only
2b unique b-bit strings, the space of valid codewords is extremely
sparse. The sender then groups the codewords into channel symbols
encoding k ≥ 1 bits each, and sends the channel symbols over the
air, modulated over some baseband transmit waveform. In Zigbee,
k = 2, b = 4, and B = 32, thus each group of four source bits in
the original packet gets spread over 32 chips, or B/k = 16 channel
symbols.
In an HDD design, the demodulator outputs hard symbol de-
cisions (ˆak in Figure 2) for each symbol in turn, independent of
other symbols. It then sends that information to the channel de-
coder, which maps the received codeword to the closest valid code-
word. The proximity of this mapping, measured as the Hamming
distance between the received word and the codeword (the number
of distinct elements between the two words), can serve as a useful
conﬁdence hint; we evaluate its performance below in Section 2.5.
2.4 SoftPHY in a decoder with soft decisions
For better performance at low SINR, a decoder can use soft-
decision decoding (SDD) [7]. The SDD decoder works directly on
samples of received symbols yk, before they are sliced, thus using
more information to make its decisions. However, SDD will still
produce incorrect codewords at very low SINR, and does not re-
cover correct bits particularly well during packet collisions.
In a block-based code, the SDD decoder calculates the corre-
lation C between the received samples Y and each codeword Ci
(whose jth bit is ci j) deﬁned as:
nX
C (Y, Ci) =
y jci j.
(1)
j=1
C can then serve as a SoftPHY hint from the PHY to higher layers.
In the case of a convolutional code, SoftPHY can use the soft
output of the Viterbi [16] or BCJR [6] decoder. This output is a
measure of how well the received symbol sequence matches with
the path through the coding trellis associated with the chosen code-
word.
In some ways, SoftPHY might seem analogous to soft-decision
decoding, but there is a crucial architectural difference. With soft-
decision decoding, the demodulator’s interface to the decoder is
quite different from hard decoding. In the former, the demodulator
does not attempt to make a decoding decision, instead propagating
received signal samples up to the decoder. In contrast, in the Soft-
PHY design, the PHY doesn’t simply pass up all its raw informa-
tion to the higher layer. The PHY still makes “hard” decisions, thus
preserving layering boundaries. This architecture preserves a clean
decomposition between PHY and higher layers while enabling per-
formance gains.
2.5 SoftPHY experiments
We have conducted preliminary experiments with the HDD and
SDD schemes described above. We found that our bit errors were
mostly attributable to collisions, and in this case, the difference be-
tween HDD and SDD was not signiﬁcant. Because the HDD imple-
mentation was conceptually simpler, we developed a complete im-
plementation of that idea and conducted several experiments with
it (described in detail in Section 7.1). Here, we give brief experi-
mental results showing that Hamming distance is a good SoftPHY
hint.
We ﬁrst take a detailed look at a particular partial packet re-
ception, showing the receiver’s view of each codeword. Figure 4
shows a receiver’s view of a packet sent from one sender, at two
different codeword synchronization offsets. The packet contains a
known bit pattern, against which we test each received codeword
for correctness. The result of each test is indicated by the presence
or absence of a triangle in the ﬁgure.1 The upper plot in Figure 4
shows the packet arriving at the receiver at time2 0, and achiev-
ing synchronization at time 10 (lower plot). When the PHY syn-
1For clarity, we show the result of every fourth codeword-
correctness test.