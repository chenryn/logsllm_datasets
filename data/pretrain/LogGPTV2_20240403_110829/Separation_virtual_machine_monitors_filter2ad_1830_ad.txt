### Common Criteria EAL4 and Formal Interface Specifications

Common Criteria (CC) Evaluation Assurance Level 4 (EAL4) does not require a formal interface specification to guide the design and implementation of security features in a software product. In contrast, CC EAL7 mandates a formal interface specification (ADV FSP.6), which significantly enhances assurance by leveraging the rigor of a formal security model. An interface specification is more concrete than a security model but remains more abstract than internal design or source code. Although hardware variations may necessitate rework on a formal interface specification, this does not preclude its use. The lack of a formal relationship between the interface specification and the underlying design and source code, instead being at best semi-formal, mitigates orthogonal feature creep. The cost of reworking a semi-formal mapping is considerably less than that of remapping a formal refinement.

Freitas, McDermott, and Woodcock developed a partial formal interface specification for Xenon [11]. This specification, modeled in the Circus formalism, was verified using tools such as the Z/Eves theorem prover and the Community Z Tools (CZT) suite. It also demonstrated the refinement of the formal security policy model [19] by McDermott and Freitas.

### Abstract Formal Design Models

While it may not be justifiable to formally verify the complete design, verifying abstract models of parts of a design is often feasible. For instance, Franklin et al. used model checking to verify the design of Xen's shadow paging mechanism [9], ensuring that it correctly isolates one guest's memory from another. Formally verifying the abstract design of a VMM subsystem or component is not merely an academic exercise; previous research by Franklin et al. has uncovered flaws in actual VMMs [10]. Since these design models are abstract, they are less sensitive to changes in hardware.

### Related Work

There is a rapidly growing body of virtualization security research. We focus on work closely related to our goal: developing a separation VMM with higher security than conventional VMMs, such as Citrix XenServer, VMware’s ESXi, and Microsoft’s Hyper-V.

#### Early IBM Work

Sailer et al. [27] developed a mandatory access control framework for Xen called Access Control Module (ACM). Xenon's Multi-Security Mode (MSM) follows some of the design principles of the IBM ACM framework.

#### NoHype

Szefer et al. prototyped NoHype [32], which minimizes the run-time interface between the VMM and guest VMs by locking guests to specific processor cores and reducing hypervisor interaction to a stub that handles certain privileged events like VM exits. This approach makes it very unlikely that any guest can attack the VMM through its interface. However, NoHype sacrifices some benefits of cloud computing and still runs the VMM and Linux control plane (domain 0) on shared hardware.

#### HyperSafe

HyperSafe [35] adds self-protection mechanisms to VMMs running on commodity hardware to compensate for hardware inadequacies. The project prototyped two mechanisms: memory lockdown based on x86 hardware support and restricted pointer indexing. The memory lockdown feature was constructed using conventional tools, while the restricted pointer indexing is based on the LLVM compiler [18]. Full results have been reported for BitVisor [28], which is too simple to support complex applications but strongly protects a single guest. Partial results for the more complex Xen hypervisor show that the memory lockdown technique has been prototyped, but no performance results were provided [35].

#### NOVA

NOVA [30] enhances VMM security by layering it into a more privileged micro-hypervisor and a user-space per-guest VMM. Communication between layers is via messages, and the extra transitions do impose overhead, though the exact amount varies with the hardware and software configuration. The NOVA prototype currently runs unmodified Linux guests and is under development to reduce overhead and support Windows guests.

#### CloudVisor

Zhang et al. [38] prototyped CloudVisor, which uses nested virtualization and encryption to protect guest VMs, a modified Xen VMM, and the control plane VM. The underlying CloudVisor VMM is small (about 5K SLOC) but has some performance impact, especially for I/O-intensive applications. While CloudVisor provides strong security, it limits the cloud provider's ability to inspect tenant behavior, making it suitable for clouds where such restrictions are not needed.

### Xenon Project

The Xenon project [20] focused on transforming open-source Xen 3 into a higher-assurance form as defined by the Common Criteria. Unlike earlier prototypes, the current Xenon prototype refactored the entire Xen 4 code base and made extensive changes to the Xen security subsystems.

### Conclusions

Our results confirm the IAD's position on modern commodity hardware. In parts of Xenon where the code is largely independent of the underlying hardware, a useful separation kernel-style policy can be enforced with fewer than 500 lines of code. Simplifying the paging code, however, incurs a performance penalty exceeding 5%, which is too high for a single security feature. We successfully reduced the size of a conventional VMM to about 75% of its original size without losing the ability to virtualize the same operating systems as Xen. The Xenon VMM prioritizes security alongside function and performance.

### Future Work

Future work with Xenon will focus on further size reduction, reducing the domain 0 control plane, and constructing evidence for less-than-full-mathematical-verification. The high-quality Xen code base has been essential to our progress.

### References

[References listed here, formatted consistently and alphabetically.]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical depth and accuracy of the original text.