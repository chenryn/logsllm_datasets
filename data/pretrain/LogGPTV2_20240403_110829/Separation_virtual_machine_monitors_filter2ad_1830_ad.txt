Common Criteria EAL4 does not require a formal inter-
face speciﬁcation to guide the design and implementation of
the security features of a software product. A formal inter-
face speciﬁcation (ADV FSP.6) is used in CC EAL7, so it
does increase assurance. It also leverages the assurance pro-
vided by a formal security model. An interface speciﬁcation
is much less abstract than a security model, but signiﬁcantly
more abstract than internal design or source code. A for-
mal interface speciﬁcation is likely to require rework due
to hardware variation, but not enough to rule out its use.
Orthogonal feature creep is also mitigated by the fact that
there is no formal relationship between the interface speciﬁ-
cation and the underlying design and source code, but only
a semiformal one at best. The cost of reworking a semifor-
mal mapping is signiﬁcantly less than the cost of remapping
a formal reﬁnement.
Freitas, McDermott, and Woodcock developed a partial
formal interface speciﬁcation [11] for Xenon. The speciﬁ-
cation modeled the event channel interface in the Circus
formalism and was veriﬁed using a combination of tools in-
cluding the Z / Eves theorem prover and the Community
Z Tools (CZT) suite. The speciﬁcation also demonstrated
reﬁnement of the formal security security policy model [19]
of McDermott and Freitas.
5.6 Abstract Formal Design Models
While formal veriﬁcation of the complete design is not jus-
tiﬁable, it is justiﬁable to verify abstract models of parts of
a design. For example, Franklin et al. have model checked
the design of the Xen shadow paging mechanism [9], to show
that it correctly isolates one guest’s memory from another.
Formally verifying the abstract design of a VMM subsys-
tem or component is not just an academic exercise, previous
research by Franklin et al. has discovered ﬂaws in actual
VMMs [10]. Since the design models are abstract, they are
less sensitive to changes in hardware.
the
6. RELATED WORK
There is a rapidly growing body of virtualization security
research. We only discuss work that is closely related to our
own goal: a separation VMM that has arguably higher se-
curity than a conventional VMM. Examples of conventional
VMMs would be open source Xen distributions such as Cit-
rix XenServer, VMWare’s ESXi, and Microsoft’s Hyper-V.
Early IBM work by Sailer et al. [27] developed a manda-
tory access control framework for Xen called Access Control
Module (ACM). Xenon’s MSM follows some of the design
principles of the IBM ACM framework.
Szefer et al. have prototyped NoHype [32]. NoHype
severely reduces the size of the run-time interface between
the VMM and the guest virtual machines of a platform, by
locking guests to speciﬁc processor cores and reducing hy-
pervisor interaction to a stub that handles certain privileged
events such as VM exits. This makes it very unlikely that
any guest can attack the VMM through its interface.
Ultimately, the NoHype approach is very similar to allo-
cating separate hardware blade servers, from a blade enclo-
sure, to each customer, and is not really virtualization at
all, as conﬁrmed by the title of Keller et al. [16]. The design
sacriﬁces some of the beneﬁts of cloud computing on a vir-
tualized infrastructure. There is an added drawback when
compare to dedicated blade servers: NoHype still has the
software VMM and Linux control plane (domain 0) running
on the shared hardware.
HyperSafe [35] adds software self-protection mechanisms
to VMMs that run on commodity hardware, to compensate
for the hardware inadequacies discussed above. The Hyper-
Safe project prototyped 2 alternative mechanisms: memory
lockdown based on x86 hardware support for copy-on-write
and restricted pointer indexing. The memory lockdown fea-
ture was constructed using conventional tools, but the re-
stricted pointer indexing is based on the specialized LLVM
compiler [18]. Full results have been reported for prototyp-
ing these techniques on BitVisor [28]. BitVisor is too small
and simple to support cloud computing or similar applica-
tions, but instead strongly protects a single guest. Wang
and Jiang report partial results for the more complex Xen
hypervisor: the memory lockdown technique has been pro-
totyped but no code size or performance results were given
[35].
NOVA [30] increases VMM security by layering it into
1) a more privileged component (micro-hypervisor) that di-
rectly controls the hardware and manages VM exits, and
2) a user space per-guest VMM that emulates sensitive in-
structions, handles VM exits, and implements virtual de-
vices. Communication between the privileged layer and the
per-guest VMMs is by messages sent from the privileged
layer to portals in the per-guest VMMs. For example, if
a per-guest VMM executes a sensitive instruction, the per-
guest VMM performs a VM exit and the privileged VMM
transmits the correct state to a handler at the appropriate
port in the per-guest VMM. The extra transitions between
layers do impose an overhead compared to conventional vir-
tualization technology; the precise amount varies depending
on the hardware/software conﬁguration used. The NOVA
prototype currently runs unmodiﬁed Linux guests but is ac-
tively under development to reduce overhead and support
Windows guests.
Zhang et al.
[38] have prototyped CloudVisor to use
nested virtualization and encryption to protect the guest
426
VMs, the higher level VMM (a modiﬁed Xen VMM), and the
control plane VM. The underlying CloudVisor VMM is tiny,
about 5K SLOC. CloudVisor does have some performance
impact, e.g. worst case I/O intensive applications over 50%.
The CloudVisor approach can provide strong security but
the threat model precludes cloud providers from inspecting
the computing practices of tenant guest machines, to en-
sure that tenants abide by their good user agreements. For
clouds where the provider does not need to enforce any kind
of restrictions on tenant behavior, the CloudVisor approach
is a good ﬁt.
The Xenon project constructed a Xen based prototype
[20] that focused on transforming open source Xen 3 into
a Common Criteria deﬁned higher assurance form. Unlike
the prototype reported here, the earlier Xenon 3 prototype
was a partial prototype that did not change Xen security
subsystems. The Xenon prototype has re-factored the entire
Xen 4 code base and made extensive changes to the Xen
security subsystems.
Current examples of full mathematical veriﬁcation applied
[17] and Heit-
to VMM-like systems included Klein et al.
[13]. The L4.veriﬁed project of Klein et al.
meyer et al.
is targeted at cell phones and similar hardware. The for-
mal veriﬁcation applied to C source code (i.e. a practical
veriﬁcation) but placed impractical restrictions on the use
of pointers (for system software) and did not verify memory
management. The deﬁnition of security veriﬁed was not a in-
formation ﬂow security deﬁnition, but the take-grant model,
which is much simpler than a true information ﬂow model
that would be needed by a separation kernel. The embedded
device veriﬁed by Heitmeyer et al. has much higher assur-
ance and is veriﬁed to enforce a true information ﬂow model.
It is accurately described as a strict separation kernel but it
does not run on commodity hardware.
7. CONCLUSIONS
Our results conﬁrm IAD’s position on modern commod-
ity hardware. In parts of Xenon where the code is largely
independent of the underlying hardware, a useful separation
kernel style policy can be enforced with less than 500 lines
of code. In the parts of the VMM that must deal with or-
thogonal feature creep and legacy hardware features, e.g.,
the paging code, the reduction cannot be as much. We tried
simplifying the paging code but the performance penalty for
the simpler code was in excess of 5%, i.e. too much for a
single security feature.
We have been successful in reducing the size of a conven-
tional VMM to roughly 3/4 of its original size without losing
the ability to virtualize the same operating systems as Xen.
Some of this success is due to orthogonal feature creep in the
conventional VMM software but some is also due to being fo-
cused on a diﬀerent goal. The Xen community is concerned
with security but makes fewer concessions to it when design
tradeoﬀs are considered. The Xenon VMM puts security on
par with function and performance.
Our ability to simplify the code exceeded our expecta-
tions. At the beginning of the project we did not think it
would be possible to actually simplify C function x86_emulate
by such a large amount and we further did not expect it to
be as fast as the original. Our results indicate that using
an open source VMM as the basis for a higher assurance
separation VMM is practical.
Our performance results for the security logging domain
are encouraging. They suggest that it should be possible to
refactor Xen’s domain 0 into a number of simpler manage-
ment domains, without harming performance.
Application of formal methods to abstract representations
can be useful. Formal models of not only the hypercall in-
terface but also abstractions of key subsystem design (e.g.
the shadow paging) and the fundamental security policy can
increase the assurance of a VMM, without excessive sensi-
tivity to orthogonal feature creep.
Our future work with Xenon will focus on further size re-
duction, reducing the size of the domain 0 control plane, and
construction of evidence for less-than-full-mathematical-veriﬁcation.
None of this work would have been possible without the
high-quality Xen code base.
8. REFERENCES
[1] Green Hills Software INTEGRITY-178B Separation
Kernel, comprising: INTEGRITY-178B Real Time
Operating System (RTOS), version
IN-ICR750-0101-GH01 REL running on Compact PCI
card, version CPN 944-2021-021 with PowerPC,
version 750cxe. Science International Applications
Corporation (SAIC), September 2008.
[2] J. Alves-Foss, W. S. Harrison, P. Oman, and
C. Taylor. The MILS architecture for high assurance
embedded systems. International Journal of Embedded
Systems, 2((3/4)), 2006.
[3] R. Anderson. Security Engineering: A Guide to
Building Dependable Distributed Systems, 2nd ed.
Wiley Publishing, Inc., 2008.
[4] A. Bensoussan, C. Clingen, and R. Daley. The Multics
virtual memory: concepts and design. In Proc.
Symposium on Operating Systems Principles (SOSP),
1969.
[5] W. E. Bobert and R. Y. Kain. A practical alternative
to heirarchical integrity policies. In Proc. 8th National
Computer Security Conference, Gaithersburg,
Maryland, US, 1985.
[6] C. Boettcher, R. DeLong, J. Rushby, and W. Sifre.
The MILS component integration approach to secure
information sharing. In 27th IEEE/AIAA Digital
Avionics Systems Conference, 2008.
[7] D. Brewer and M. Nash. The Chinese wall security
policy. In Proc. IEEE Symposium on Research in
Security and Privacy, pages 206–214, Oakland,
California, US, May 1989.
[8] D. Chisnall. The Deﬁnitive Guide to the Xen
Hypervisor. Prentice-Hall, 2008.
[9] J. Franklin, S. Chaki, A. Datta, J. McCune, and
A. Vasudevan. Parametric veriﬁcation of address space
separation. In Proc. 1st Conference on Principles of
Security and Trust (POST), Tallin, EE, March 2012.
[10] J. Franklin, S. Chaki, A. Datta, and A. Seshadri.
Scalable parametric veriﬁcation of secure systems:
How to verify reference monitors without worrying
about data structure size. In Proc. IEEE Symposium
on Security and Privacy, Oakland, California, US,
May 2010.
[11] L. Freitas, J. McDermott, and J. Woodcock. Formal
methods for security in the Xenon hypervisor.
International Journal on Software Tools for
Technology Transfer (STTT), 13(5):463–489, 2011.
427
[12] L. Hatton. EC– a measurement based safer subset of
ISO C suitable for embedded systems development.
Information and Software Technology, 47(3):181–187,
2005.
[13] C. Heitmeyer, M. Archer, E. Leonard, and J. McLean.
Formal speciﬁcation and veriﬁcation of data
separation in a separation kernel for an embedded
system. In Proc. 13 ACM Conf. on Computer and
Communications Security, Alexandria, Virginia, US,
2006.
[14] T. Jaeger and J. Tidswell. Practical safety in ﬂexible
access control models. ACM Trans. on Information
and System Security, 4(2):158–190, May 2001.
S. Berger, J. Griﬃn, and L. van Doorn. Building a
MAC-Based security architecture for the Xen
open-source hypervisor. In Proc. 21st Annual
Computer Security Applications Conference, Tucson,
Arizona, US, December 2005.
[28] T. Shinagawa, H. Eiraku, K. Tanimoto, K. Omote,
S. Hasegawa, T. Horie, M. Hirano, K. Kourai,
Y. Oyama, E. Kawai, K. Kono, S. Chiba, Y. Shinjo,
and K. Kato. BitVisor: a thin hypervisor for enforcing
I/O device security. In Proc. 2009 ACM
SIGPLAN/SIGOPS Int. Conf. on Virtual Execution
Environments, pages 121–130, Washington, DC, US,
2009.
[15] P. Karger and R. Schell. Thirty years later: Lessons
[29] R. Spencer, S. Smalley, P. Loscocco, M. Hibler,
from the Multics security evaluation. In In Proc.
Annual Computer Security Applications Conference,
2002.
[16] E. Keller, J. Szefer, J. Rexford, and R. Lee.
Virtualized cloud infrastructure without the
virtualization. In International Symposium on
Computer Architecture (ISCA). IEEE Computer
Society Press, June 2010.
[17] G. Klein, K. Elphinstone, G. Heiser, J. Andronick,
D. Cook, P.Derrin, D. Elkaduwe, K. Englehardt,
R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and
S. Winwood. seL4: Formal veriﬁcation of an OS
kernel. In Proc. 22nd ACM Symposium on Operating
System Principles, Big Sky, MT, US, October 2009.
[18] C. Lattner. LLVM: An infrastructure for multi-stage
optimization. Master’s thesis, Computer Science
Dept., University of Illinois at Urbana-Champaign,
2002.
[19] J. McDermott and L. Freitas. A formal security policy
model for Xenon. In Proc. Formal Methods in Security
Engineering (FMSE ’08), October 2008.
[20] J. McDermott, J. Kirby, B. Montrose, T. Johnson,
and M. Kang. Re-engineering Xen internals for
higher-assurance security. Information Security
Technical Report, 13(1):17–24, 2008.
[21] J. McDermott, B. Montrose, M. Li, J. Kirby, and
M. Kang. The Xenon separation VMM: Secure
virtualization infrastructure for military clouds. In
Military Communications Conference - MILCOM
2012, Orlando, FL, US, October 2012.
[22] B. Randell and J. Rushby. Distributed secure systems:
Then and now. In 23rd Annual Computer Security
Applications Conference (ACSAC), Miami, FL, US,
December 2007.
D. Andersen, and J. Lepreau. The Flask security
architecture: system support for diverse security
policies. In Proceedings of the 8th conference on
USENIX Security Symposium - Volume 8,
Washington, DC, US, 1999.
[30] U. Steinberg and B. Kauer. NOVA: a
microhypervisor-based secure virtualization
architecture. In Proc. 5th European conference on
Computer Systems, pages 209–222, Paris, FR, 2010.
[31] Systems and N. A. Center. Separation Kernels on
Commodity Workstations. Information Assurance
Directorate, NSA, March 2010.
[32] J. Szefer, E. Keller, R. Lee, and J. Rexford.
Eliminating the hypervisor attack surface for a more
secure cloud. In Proc. Computer and Communications
Security, Chicago, IL, US, October 2011. ACM.
[33] C. Takemura and L. Crawford. The Book of Xen. No
Starch Press, 2010.
[34] K. Walker, D. Sterne, M. L. Badger, M. Petkac,
D. Shermann, and K. Oostendorp. Conﬁning root
programs with domain and type enforcement (DTE).
In Proc. 6th USENIX UNIX Security Symposium, San
Jose, California, US, July 1996.
[35] Z. Wang and X. Jiang. HyperSafe: a lightweight
approach to provide lifetime hypervisor control-ﬂow
integrity. In Proc. 31st IEEE Symposium on Security
& Privacy, Oakland, California, US, May 2010.
[36] A. Watson and T. McCabe. Structured Testing: A
Testing Methodology Using the Cyclomatic Complexity
Metric, NIST Special Publication 500-235. National
Institute of Standards and Technology, 1996.
[37] J. Woodcock, A. Cavalcanti, M.-C. Godel, and
L. Freitas. Operational semantics of Circus. Formal
aspects of computing, 2008. in press.
[23] A. Roscoe. CSP and determinism in security
[38] F. Zhang, J. Chen, H. Chen, and B. Zang. CloudVisor:
retroﬁtting protection of virtual machines in
multi-tenant cloud with nested virtualization. In Proc.
23rd ACM Symp. on Operating Systems Principles
(SOSP), pages 203–216, Cascais, Portugal, 2011.
modelling. In Proc. IEEE Symposium on Security and
Privacy, Oakland, California, US, May 1995.
[24] A. Roscoe, J. Woodcock, and L. Wulf.
Non-interference through nondeterminism. In Proc.
ESORICS, Brighton, UK, November 1994.
[25] S. Rueda, H. Vijayakumar, and T. Jaeger. Analysis of
virtual machine system policies. In Proc. ACM
Symposium on Access Control Models and
Technologies (SACMAT), Stresa, Italy, June 2009.
[26] J. Rushby. Design and veriﬁcation of secure systems.
Proc. ACM Symposium on Operating System
Principles, 15:12–21, 1981.
[27] R. Sailer, T. Jaeger, E. Valdez, R. C´aceres, R. Perez,
428