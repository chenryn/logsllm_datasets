3.  使用 `clevis luks bind`{.literal} 命令将卷绑定到 Tang 服务器：
    ``` screen
    # clevis luks bind -d /dev/sda2 tang '{"url":"http://tang.srv"}'
    The advertisement contains the following signing keys:
    _OsIk0T-E2l6qjfdDiwVmidoZjA
    Do you wish to trust these keys? [ynYN] y
    You are about to initialize a LUKS device for metadata storage.
    Attempting to initialize it may result in data loss if data was
    already written into the LUKS header gap in a different format.
    A backup is advised before initialization is performed.
    Do you wish to initialize /dev/sda2? [yn] y
    Enter existing LUKS password:
    ```
    此命令执行四个步骤：
    ::: orderedlist
    1.  使用与 LUKS 主密钥相同的无序状态测量法创建新的密钥。
    2.  使用 Clevis 加密新密钥.
    3.  将 Clevis JWE 对象存储在 LUKS2 标头令牌中，或者使用
        LUKSMeta（如果使用非默认的 LUKS1 标头）。
    4.  启用与 LUKS 一起使用的新密钥。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        绑定过程假定至少有一个可用的 LUKS
        密码插槽。`clevis luks bind`{.literal} 命令占用了其中一个插槽。
        :::
    :::
4.  现在可以使用您的现有密码和 Clevis 策略来解锁卷。
5.  要启用早期引导系统来处理磁盘绑定，请在已安装的系统上使用
    `dracut`{.literal} 工具：
    ``` screen
    # yum install clevis-dracut
    ```
    在 Red Hat Enterprise Linux 8 中，Clevis
    生成一个没有特定于主机配置选项的通用 `initrd`{.literal} （初始的
    ramdisk），且不会自动在内核命令行中添加诸如 `rd.neednet=1`{.literal}
    等参数。如果您的配置依赖于在早期引导期间需要网络的 Tang pin
    ，请在检测到 Tang 绑定时使用 `--hostonly-cmdline`{.literal} 参数和
    `dracut`{.literal} add `rd.neednet=1`{.literal} ：
    ``` screen
    # dracut -fv --regenerate-all --hostonly-cmdline
    ```
    或者，在 `/etc/dracut.conf.d/ 中创建一个 .conf`{.literal} 文件，并将
    `hostonly_cmdline=yes`{.literal} 选项添加到该文件中，例如：
    ``` screen
    # echo "hostonly_cmdline=yes" > /etc/dracut.conf.d/clevis.conf
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您还可以通过使用安装了 Clevis 的系统上的 `grubby`{.literal}
    工具，确保在早期引导时 Tang pin 的网络可用：
    ``` screen
    # grubby --update-kernel=ALL --args="rd.neednet=1"
    ```
    :::
    然后您可以使用不带 `--hostonly-cmdline`{.literal} 的
    `dracut`{.literal} ：
    ``` screen
    # dracut -fv --regenerate-all
    ```
:::
::: orderedlist
**验证**
1.  要验证 Clevis JWE 对象是否已成功放入 LUKS 标头中，请使用
    `clevis luks list`{.literal} 命令：
    ``` screen
    # clevis luks list -d /dev/sda2
    1: tang '{"url":"http://tang.srv:port"}'
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
要将 NBDE 用于使用静态 IP 配置（没有
DHCP）的客户端，请手动将网络配置传给 `dracut`{.literal} 工具，例如：
``` screen
# dracut -fv --regenerate-all --kernel-cmdline "ip=192.0.2.10::192.0.2.1:255.255.255.0::ens3:none"
```
或者，在 `/etc/dracut.conf.d/`{.literal} 目录中创建
一个带有静态网络信息的.conf 文件。例如：
``` screen
# cat /etc/dracut.conf.d/static_ip.conf
kernel_cmdline="ip=192.0.2.10::192.0.2.1:255.255.255.0::ens3:none"
```
重新生成初始 RAM 磁盘镜像：
``` screen
# dracut -fv --regenerate-all
```
:::
::: itemizedlist
**其它资源**
-   `clevis-luks-bind(1)`{.literal} 和 `dracut.cmdline(7)`{.literal}
    手册页。
-   [RHEL
    网络引导选项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_an_advanced_rhel_installation/kickstart-and-advanced-boot-options_installing-rhel-as-an-experienced-user#network-boot-options_kickstart-and-advanced-boot-options){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#configuring-manual-enrollment-of-volumes-using-tpm2_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}使用 TPM 2.0 策略配置 LUKS 加密卷的手动注册 {.title}
:::
使用以下步骤，使用受信任的平台模块 2.0(TPM 2.0)策略来配置 LUKS
加密卷的解锁。
::: itemizedlist
**先决条件**
-   一个可访问的 TPM 2.0 兼容设备。
-   具有 64 位 Intel 或 64 位 AMD 架构的系统。
:::
::: orderedlist
**流程**
1.  要自动解锁现有的 LUKS 加密卷，请安装 `clevis-luks`{.literal}
    子软件包：
    ``` screen
    # yum install clevis-luks
    ```
2.  识别 PBD 的 LUKS 加密卷。在以下示例中，块设备是指
    [*/dev/sda2*]{.emphasis} ：
    ``` screen
    # lsblk
    NAME                                          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
    sda                                             8:0    0    12G  0 disk
    ├─sda1                                          8:1    0     1G  0 part  /boot
    └─sda2                                          8:2    0    11G  0 part
      └─luks-40e20552-2ade-4954-9d56-565aa7994fb6 253:0    0    11G  0 crypt
        ├─rhel-root                               253:0    0   9.8G  0 lvm   /
        └─rhel-swap                               253:1    0   1.2G  0 lvm   [SWAP]
    ```
3.  使用 `clevis luks bind`{.literal} 命令将卷绑定到 TPM 2.0
    设备，例如：
    ``` screen
    # clevis luks bind -d /dev/sda2 tpm2 '{"hash":"sha1","key":"rsa"}'
    ...
    Do you wish to initialize /dev/sda2? [yn] y
    Enter existing LUKS password:
    ```
    此命令执行四个步骤：
    ::: orderedlist
    1.  使用与 LUKS 主密钥相同的无序状态测量法创建新的密钥。
    2.  使用 Clevis 加密新密钥.
    3.  将 Clevis JWE 对象存储在 LUKS2 标头令牌中，或者使用
        LUKSMeta（如果使用非默认的 LUKS1 标头）。
    4.  启用与 LUKS 一起使用的新密钥。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        绑定过程假定至少有一个可用的 LUKS
        密码插槽。`clevis luks bind`{.literal} 命令占用了其中一个插槽。
        :::
        或者，如果您要将数据封装为特定的平台配置寄存器(PCR)状态，请在
        `clevis luks bind`{.literal} 命令中添加
        `pcr_bank 和 `{.literal}pcr_ids``{=html} 值，例如：
        ``` screen
        # clevis luks bind -d /dev/sda2 tpm2 '{"hash":"sha1","key":"rsa","pcr_bank":"sha1","pcr_ids":"0,1"}'
        ```
        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        由于只有 PCR
        哈希值与密封时使用的策略匹配，并且可以重写哈希时，数据才会被解封，因此添加一个强大的密码短语，以便您可以在
        PCR 中的值变化时手动解锁加密的卷。
        如果在升级 `shim-x64`{.literal}
        软件包后系统无法自动解锁加密的卷，请遵照 [重启后，Clevis TPM2
        不再解密 LUKS
        设备](https://access.redhat.com/solutions/6175492){.link} KCS
        文章中的步骤进行操作。
        :::
    :::
4.  现在可以使用您的现有密码和 Clevis 策略来解锁卷。
5.  要启用早期引导系统来处理磁盘绑定，请在已安装的系统上使用
    `dracut`{.literal} 工具：
    ``` screen
    # yum install clevis-dracut
    # dracut -fv --regenerate-all
    ```
:::
::: orderedlist
**验证**
1.  要验证 Clevis JWE 对象是否已成功放入 LUKS 标头中，请使用
    `clevis luks list`{.literal} 命令：
    ``` screen
    # clevis luks list -d /dev/sda2
    1: tpm2 '{"hash":"sha1","key":"rsa"}'
    ```
:::
::: itemizedlist
**其它资源**
-   `clevis-luks-bind(1)`{.literal}、`clevis-encrypt-tpm2(1)`{.literal}
    和 `dracut.cmdline(7)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#removing-a-clevis-pin-from-a-luks-encrypted-volume-manually_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}手动从 LUKS 加密卷中删除 Clevis pin {.title}
:::
使用以下步骤手动删除 `clevis luks bind`{.literal}
命令创建的元数据，以及擦除包含 Clevis 添加的密码短语的密钥插槽。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
从 LUKS 加密卷中删除 Clevis pin 的建议方法是通过
`clevis luks unbind`{.literal} 命令。使用 `clevis luks unbind`{.literal}
的删除过程只包含一个步骤，适用于 LUKS1 和 LUKS2
卷。以下示例命令删除绑定步骤所创建的元数据，并擦除
[*/dev/sda2*]{.emphasis} 设备上的密钥插槽 [*1*]{.emphasis} ：
``` screen
# clevis luks unbind -d /dev/sda2 -s 1
```
:::
::: itemizedlist
**先决条件**
-   具有 Clevis 绑定的 LUKS 加密卷。
:::
::: orderedlist
**流程**
1.  检查卷（例如 [*/dev/sda2*]{.emphasis}）由哪个 LUKS
    版本加密，并标识绑定到 Clevis 的插槽和令牌：
    ``` screen
    # cryptsetup luksDump /dev/sda2
    LUKS header information
    Version:        2
    ...
    Keyslots:
      0: luks2
    ...
    1: luks2
          Key:        512 bits
          Priority:   normal
          Cipher:     aes-xts-plain64
    ...
          Tokens:
            0: clevis
                  Keyslot:  1
    ...
    ```
    在上例中，Clevis 令牌标识为 [*0*]{.emphasis} ，关联的密钥插槽是
    [*1*]{.emphasis}。
2.  如果是 LUKS2 加密，请删除令牌：
    ``` screen
    # cryptsetup token remove --token-id 0 /dev/sda2
    ```
3.  如果您的设备是由 LUKS1 加密的，其在 `cryptsetup luksDump`{.literal}
    命令的输出中标识为 `Version: 1`{.literal} 字符串，请使用
    `luksmeta wipe`{.literal} 命令执行这个额外步骤：
    ``` screen
    # luksmeta wipe -d /dev/sda2 -s 1
    ```
4.  擦除包含 Clevis 密码短语的密钥插槽：
    ``` screen
    # cryptsetup luksKillSlot /dev/sda2 1
    ```
:::
::: itemizedlist