account for more than half of Hamilton’s idle current [55].
Hamilton/SAMR21 is on the lower end of platforms typi-
cally used for sense-and-send applications in buildings. Some
older studies [41,59] use even more constrained hardware like
USENIX Association
28th USENIX Security Symposium    1531
Create DOTBuild DOTChain10−2100102104Running Time (ms)Unmodified bw2JEDI1 KiB32 KiB1 MiBSize of Message020406080100Time to 1st Message (ms)Unmodified bw2JEDIJEDI anon. sig.Trusted Key Server381 is about 74 KiB, which ﬁts comfortably in the 256 KiB
of code memory (ROM) provided by the SAMR21.
A related question is whether storing a hash chain in mem-
ory (as required for authenticated broadcast, §4.3) is practical.
If we use a granularity of 1 minute for authenticated broad-
cast, the length of the hash chain is 60. At the start of an
hour, one computes the entire chain, storing 10 hashes equally
spaced along the chain, each separated by 5 hashes. As one
progresses along the hash chain, one re-computes each set of
5 hashes one additional time. This requires storage for only
15 hashes (< 4 KiB memory) and computation of only 105
hashes per hour, which is practical. One could possibly opti-
mize performance further using hierarchical hash chains [50].
7.3.4 Impact of JEDI’s Optimizations
JEDI’s cryptographic optimizations (§3.6.2, §4.2.2, §4.3),
which use WKD-IBE in a non-black-box manner, provide a
2-3x performance improvement. Our assembly optimizations
(§6) provide an additional 4-5x improvement. Without both of
these techniques, JEDI would not be practical on low-power
sensors. Hybrid encryption and key reuse (§3.6.1), which let
JEDI use WKD-IBE rarely, are also crucial.
7.4 Comparison to Other Systems
Table 4 compares JEDI to other systems and cryptographic
approaches, particularly those geared toward IoT, in regard
to security, expressivity and performance. We treat these ex-
isting systems as they would be used in a messaging system
for smart buildings (§1). Table 4 contains quantitative com-
parisons to the cryptography used by these systems; for those
schemes based on bilinear groups, we re-implemented them
using our JEDI crypto library (§6.1) for a fair comparison.
Security. The owner of a resource is considered trusted for
that resource, in the sense that an adversary who compromises
a principal can read all of that principal’s resources. In Table
4, we focus on whether a single component is trusted for
all resources in the system. Note that, although Trusted Key
Server (§2) and PICADOR [23] encrypt data in ﬂight, granting
or revoking access to a principal requires participation of an
online trusted party to generate new keys.
Expressivity. PRE-based approaches, which associate pub-
lic keys with users and support delegation via proxy
re-encryption, are fundamentally coarse-grained—a re-
encryption key allows all of a user’s data to be re-encrypted.
PICADOR [23] allows more ﬁne-grained semantics, but does
not enforce them cryptographically. ABE-based approaches
typically do not support delegation beyond a single hop,
whereas JEDI achieves multi-hop delegation. In ABE-based
schemes, however, attributes/policies attached to keys can de-
scribe more complex sets of resources than JEDI. That said,
a hierarchical resource representation is sufﬁcient for JEDI’s
intended use case, namely smart cities; existing syndication
systems for smart cities, which do not encrypt data and are un-
constrained by the expressiveness of crypto schemes, choose
a hierarchical rather than attribute-based representation (§1).
Performance. The Trusted Key Server (§2) is the most naïve
approach, requiring an online trusted party to enforce all pol-
icy. Even so, JEDI’s performance in the common case is the
same as the Trusted Key Server (Fig. 7), because of JEDI’s hy-
brid encryption—JEDI invokes WKD-IBE rarely. Even when
JEDI invokes WKD-IBE, its performance is not signiﬁcantly
worse than PRE-based approaches. An alternative design for
JEDI uses the GPSW KP-ABE construction instead of WKD-
IBE, but it is signiﬁcantly more expensive. Based Table 3, the
power cost of a WKD-IBE operation even when only invoked
once per hour contributes signiﬁcantly to the overall energy
consumption on the low-power IoT device; using KP-ABE
instead of WKD-IBE would increase this power consumption
by an order of magnitude, reducing battery life signiﬁcantly.
In summary, existing systems fall into one of three cate-
gories. (1) The Trusted Key Server allows access to resources
to be managed by arbitrary policies, but relies on a central
trusted party who must be online whenever a user is granted
access or is revoked. (2) PRE-based approaches, which per-
mit sharing via re-encryption, cannot cryptographically en-
force ﬁne-grained policies or support multi-hop delegation.
(3) ABE-based approaches, if carefully designed, can achieve
the same expressivity as JEDI, but are substantially less perfor-
mant and are not suitable for low-power embedded devices.
8 Related Work
We organize related work into the following categories.
Traditional Public-Key Encryption. SiRiUS [47] and Plu-
tus [54] are encrypted ﬁlesystems based on traditional public-
key cryptography, but they do not support delegable and qual-
iﬁable keys like JEDI. Akl et al. [2] and further work [33, 34]
propose using key assignment schemes for access control in
a hierarchy. A line of work [8, 9, 51, 80] builds on this idea to
support both hierarchical structure and temporal access. Key
assignment approaches, however, require the full hierarchy to
be known at setup time, which is not ﬂexible in the IoT setting.
JEDI does not require this, allowing different subtrees of the
hierarchy to be managed separately (§1.1, “Delegation”).
Identity-Based Encryption. Tariq et al. [78] use Identity-
Based Encryption (IBE) [18] to achieve end-to-end encryp-
tion in publish-subscribe systems, without the router’s par-
ticipation in the protocol. However, their approach does not
support hierarchical resources. Further, encryption and private
keys are on a credential-basis, so each message is encrypted
multiple times according to the credentials of the recipients.
Wu et al. [87] use a preﬁx encryption scheme based on
IBE for mutual authentication in IoT. Their preﬁx encryption
scheme is different from JEDI, in that users with keys for
identity a/b/c can decrypt messages encrypted with preﬁx
identity a, a/b and a/b/c, but not identities like a/b/c/d.
Hierarchical Identity-Based Encryption. Since the orig-
inal proposal of Hierarchical Identity-Based Encryption
(HIBE) [46], there have been multiple HIBE construc-
tions [16, 17, 45, 46] and variants of HIBE [1, 88]. Although
1532    28th USENIX Security Symposium
USENIX Association
Crypto Scheme /
System
Trusted Key Server
(§2)
Avoids Cen-
tral Trust?
– No
Expressivity
Table 4: Comparison of JEDI with other crypto-based IoT/cloud systems
+ Supports arbitrary policies (beyond
hierarchies)
– No delegation
+ Supports arbitrary policies (beyond
hierarchies)
– No delegation
Performance
+ ≈ 10 µs to encrypt 1 KiB message (same as
JEDI in common case, faster for ﬁrst message
after key rotation)
– Trusted party generates one key per resource
+ ≈ 5 ms encrypt, ≈ 3 ms decrypt (similar to
– Trusted party must generate one key per
JEDI: 3-4 ms)
sender-receiver pair
PRE
(Lattice-
Based), as used in
PICADOR [23]
PRE
(Pairing-
Based), as used in
Pilatus [75]
– No
+ Yes
CP-ABE [12]
+ Yes
+ Yes
+ Yes
+ Yes
KP-ABE, as used in
Sieve [83]
Delegable
Large
Univ. KP-ABE [48]
(used in Alternative
JEDI Design)
This paper: WKD-
IBE [1] with Op-
timizations, as used
in JEDI
– Delegation is single-hop
– Delegation is coarse (all-or-nothing)
+ Can compute aggregates on en-
+ 0.6 ms encrypt, 1.3 ms re-encrypt, 0.5 ms
decrypt (faster than JEDI: 3-4 ms)
+ Practical on constrained IoT device with
crypted data
crypto accelerator
+ Good ﬁt for RBAC policies
– Cannot support JEDI’s hierarchy ab-
+ Only symmetric crypto in common case
– 14 ms encrypt for ﬁrst time after key rotation
straction with delegation
+ Succinct delegation based on at-
tributes
– Delegation is single-hop
+ Generalizes beyond hierarchies and
supports multi-hop delegation (sub-
sumes JEDI)
+ Delegation is multi-hop
+ Succinct delegation of subtrees of re-
sources (or more complex sets, §3.7)
+ Non-interactive expiry
(4-5x slower than JEDI: 3 ms)
+ Only symmetric crypto in common case
– 25 ms encrypt for ﬁrst time after key rotation
(8-9x slower than JEDI: 3 ms)
+ Only symmetric crypto in common case
– 60 ms encrypt for ﬁrst time after key rotation
(20x slower than JEDI: 3 ms)
– Impractical for low-power sense-and-send
+ After key rotation (e.g., once per hour), 3 ms
encrypt, 4 ms decrypt (Fig. 6a)
+ Only symmetric crypto in common case
+ Practical for ultra low-power “sense-and-
send” without crypto accelerator
seemingly a good match for resource hierarchies, HIBE can-
not be used as a black box to efﬁciently instantiate JEDI.
We considered alternative designs of JEDI based on exist-
ing variants of HIBE, but as we elaborate in the appendix of
our extended paper [57], each resulting design is either less
expressive or signiﬁcantly more expensive than JEDI.
Attribute-Based Encryption. A line of work [83, 90] uses
Attribute-Based Encryption (ABE) [12,48] to delegate permis-
sion. Our work additionally supports hierarchically-organized
resources and decentralized delegation of keys, which [90]
and [83] do not address. As discussed in §7.4, WKD-IBE
is substantially more efﬁcient than KP-ABE and provides
enough functionality for JEDI.
Other approaches prefer Ciphertext-Policy ABE (CP-
ABE) [12]. Existing work [84, 85] combines HIBE with CP-
ABE to produce Hierarchical ABE (HABE), a solution for
sharing data on untrusted cloud servers. The “hierarchical”
nature of HABE, however, corresponds to the hierarchical
organization of domain managers in an enterprise, not a hier-
archical organization of resources as in our work.
Proxy Re-Encryption. NuCypher KMS [39] allows a user
to store data in the cloud encrypted under her public key,
and share it with another user using Proxy Re-Encryption
(PRE) [14]. While NuCypher assumes limited collusion
among cloud servers and recipients (e.g., m of n secret shar-
ing) to achieve properties such as expiry, JEDI enforces expiry
via cryptography, and therefore remains secure against any
amount of collusion. Furthermore, NuCypher’s solution for
resource hierarchies requires a keypair for each node in the hi-
erarchy, meaning that the creation of resources is centralized.
Finally, keys in NuCypher are not qualiﬁable.
PICADOR [23], a publish-subscribe system with end-to-
end encryption, uses a lattice-based PRE scheme. However,
PICADOR requires a central Policy Authority to specify ac-
cess control, by creating a re-encryption key for every per-
mitted pair of publisher and subscriber. In contrast, JEDI’s
access control is decentralized.
Revocation Schemes. Broadcast encryption (BE) [19–22,37,
58, 67] is a mechanism to achieve revocation, by encrypting
messages such that they are only decryptable by a speciﬁc set
of users. However, these existing schemes do not support key
qualiﬁcation and delegation, and therefore, cannot be used
in JEDI directly. Another line of work builds revocation di-
rectly into the underlying cryptography primitive, achieving
USENIX Association
28th USENIX Security Symposium    1533
Revocable IBE [15, 62, 72, 86], Revocable HIBE [63, 71, 73]
and Revocable KP-ABE [10]. These papers use a notion of
revocation in which URIs are revoked. In contrast, JEDI sup-
ports revocation at the level of keys. If multiple principals
have access to a URI, and one of their keys is revoked, then
the other principal can still use its key to access the resource.
Some systems [11, 39] rely on the participation of servers or
routers to achieve revocation.
Secure Reliable Multicast Protocol. Secure Reliable Multi-
cast [64,65] also uses a many-to-many communication model,
and ensures correct data transfer in the presence of malicious
routers. JEDI, as a protocol to encrypt messages, is comple-
mentary to those systems.
Authorization Services. JEDI is complementary to autho-
rization services for IoT, such as bw2 [5], Vanadium [77],
WAVE [6], and AoT [68], which focus on expressing autho-
rization policies and enabling principals to prove they are au-
thorized, rather than on encrypting data. Droplet [74] provides
encryption for IoT, but does not support delegation beyond
one hop and does not provide hierarchical resources.
An authorization service that provides secure in-band per-
mission exchange, like WAVE [6], can be used for key distri-
bution in JEDI. JEDI can craft keys with various permissions,
while WAVE can distribute them without a centralized party
by including them in its attestations.
9 Conclusion
In this paper, we presented JEDI, a protocol for end-to-end
encryption for IoT. JEDI provides many-to-many encrypted
communication on complex resource hierarchies, supports
decentralized key delegation, and decouples senders from
receivers. It provides expiry for access to resources, reconciles
anonymity and authorization via anonymous signatures, and
allows revocation via tree-based broadcast encryption. Its
encryption and integrity solutions are capable of running on
embedded devices with strict energy and resource constraints,
making it suitable for the Internet of Things.
Availability