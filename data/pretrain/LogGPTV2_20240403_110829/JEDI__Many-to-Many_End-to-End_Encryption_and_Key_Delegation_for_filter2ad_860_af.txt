### 7.3.4 Impact of JEDI’s Optimizations

JEDI’s cryptographic optimizations, as detailed in Sections 3.6.2, 4.2.2, and 4.3, which utilize WKD-IBE in a non-black-box manner, provide a 2-3x performance improvement. Our assembly-level optimizations (Section 6) offer an additional 4-5x enhancement. Without these techniques, JEDI would not be practical for low-power sensors. Hybrid encryption and key reuse (Section 3.6.1), which allow JEDI to use WKD-IBE infrequently, are also crucial.

### 7.4 Comparison to Other Systems

Table 4 compares JEDI with other systems and cryptographic approaches, particularly those designed for IoT, in terms of security, expressivity, and performance. We evaluate these existing systems as they would be used in a messaging system for smart buildings (Section 1). Table 4 includes quantitative comparisons to the cryptography used by these systems; for schemes based on bilinear groups, we re-implemented them using our JEDI crypto library (Section 6.1) for a fair comparison.

#### Security
The owner of a resource is considered trusted for that resource, meaning an adversary who compromises a principal can read all of that principal’s resources. In Table 4, we focus on whether a single component is trusted for all resources in the system. Note that, although Trusted Key Server (Section 2) and PICADOR [23] encrypt data in transit, granting or revoking access to a principal requires the participation of an online trusted party to generate new keys.

#### Expressivity
PRE-based approaches, which associate public keys with users and support delegation via proxy re-encryption, are fundamentally coarse-grained—a re-encryption key allows all of a user’s data to be re-encrypted. PICADOR [23] allows more fine-grained semantics but does not enforce them cryptographically. ABE-based approaches typically do not support delegation beyond a single hop, whereas JEDI achieves multi-hop delegation. However, attributes/policies attached to keys in ABE-based schemes can describe more complex sets of resources than JEDI. That said, a hierarchical resource representation is sufficient for JEDI’s intended use case, namely smart cities. Existing syndication systems for smart cities, which do not encrypt data and are unconstrained by the expressiveness of crypto schemes, choose a hierarchical rather than attribute-based representation (Section 1).

#### Performance
The Trusted Key Server (Section 2) is the most straightforward approach, requiring an online trusted party to enforce all policies. Even so, JEDI’s performance in the common case is the same as the Trusted Key Server (Figure 7), due to JEDI’s hybrid encryption—JEDI invokes WKD-IBE rarely. Even when JEDI invokes WKD-IBE, its performance is not significantly worse than PRE-based approaches. An alternative design for JEDI uses the GPSW KP-ABE construction instead of WKD-IBE, but it is significantly more expensive. Based on Table 3, the power cost of a WKD-IBE operation, even when only invoked once per hour, contributes significantly to the overall energy consumption on the low-power IoT device. Using KP-ABE instead of WKD-IBE would increase this power consumption by an order of magnitude, significantly reducing battery life.

In summary, existing systems fall into one of three categories:
1. **Trusted Key Server**: Allows access to resources to be managed by arbitrary policies but relies on a central trusted party who must be online whenever a user is granted access or revoked.
2. **PRE-based Approaches**: Permit sharing via re-encryption but cannot cryptographically enforce fine-grained policies or support multi-hop delegation.
3. **ABE-based Approaches**: If carefully designed, can achieve the same expressivity as JEDI but are substantially less performant and unsuitable for low-power embedded devices.

### 8 Related Work

We categorize related work as follows:

#### Traditional Public-Key Encryption
SiRiUS [47] and Plutus [54] are encrypted file systems based on traditional public-key cryptography but do not support delegable and qualifiable keys like JEDI. Akl et al. [2] and further work [33, 34] propose using key assignment schemes for access control in a hierarchy. A line of work [8, 9, 51, 80] builds on this idea to support both hierarchical structure and temporal access. Key assignment approaches, however, require the full hierarchy to be known at setup time, which is not flexible in the IoT setting. JEDI does not have this requirement, allowing different subtrees of the hierarchy to be managed separately (Section 1.1, "Delegation").

#### Identity-Based Encryption
Tariq et al. [78] use Identity-Based Encryption (IBE) [18] to achieve end-to-end encryption in publish-subscribe systems without the router’s participation in the protocol. However, their approach does not support hierarchical resources. Further, encryption and private keys are on a credential-basis, so each message is encrypted multiple times according to the recipients' credentials. Wu et al. [87] use a prefix encryption scheme based on IBE for mutual authentication in IoT. Their prefix encryption scheme differs from JEDI in that users with keys for identity `a/b/c` can decrypt messages encrypted with prefix identities `a`, `a/b`, and `a/b/c`, but not identities like `a/b/c/d`.

#### Hierarchical Identity-Based Encryption
Since the original proposal of Hierarchical Identity-Based Encryption (HIBE) [46], there have been multiple HIBE constructions [16, 17, 45, 46] and variants of HIBE [1, 88]. Although seemingly a good match for resource hierarchies, HIBE cannot be used as a black box to efficiently instantiate JEDI. We considered alternative designs of JEDI based on existing variants of HIBE, but as elaborated in the appendix of our extended paper [57], each resulting design is either less expressive or significantly more expensive than JEDI.

#### Attribute-Based Encryption
A line of work [83, 90] uses Attribute-Based Encryption (ABE) [12, 48] to delegate permission. Our work additionally supports hierarchically-organized resources and decentralized delegation of keys, which [90] and [83] do not address. As discussed in Section 7.4, WKD-IBE is substantially more efficient than KP-ABE and provides enough functionality for JEDI.

Other approaches prefer Ciphertext-Policy ABE (CP-ABE) [12]. Existing work [84, 85] combines HIBE with CP-ABE to produce Hierarchical ABE (HABE), a solution for sharing data on untrusted cloud servers. The “hierarchical” nature of HABE, however, corresponds to the hierarchical organization of domain managers in an enterprise, not a hierarchical organization of resources as in our work.

#### Proxy Re-Encryption
NuCypher KMS [39] allows a user to store data in the cloud encrypted under her public key and share it with another user using Proxy Re-Encryption (PRE) [14]. While NuCypher assumes limited collusion among cloud servers and recipients (e.g., m of n secret sharing) to achieve properties such as expiry, JEDI enforces expiry via cryptography and remains secure against any amount of collusion. Furthermore, NuCypher’s solution for resource hierarchies requires a keypair for each node in the hierarchy, meaning that the creation of resources is centralized. Finally, keys in NuCypher are not qualifiable.

PICADOR [23], a publish-subscribe system with end-to-end encryption, uses a lattice-based PRE scheme. However, PICADOR requires a central Policy Authority to specify access control by creating a re-encryption key for every permitted pair of publisher and subscriber. In contrast, JEDI’s access control is decentralized.

#### Revocation Schemes
Broadcast encryption (BE) [19–22, 37, 58, 67] is a mechanism to achieve revocation by encrypting messages such that they are only decryptable by a specific set of users. However, these existing schemes do not support key qualification and delegation and therefore cannot be used directly in JEDI. Another line of work builds revocation directly into the underlying cryptographic primitive, achieving Revocable IBE [15, 62, 72, 86], Revocable HIBE [63, 71, 73], and Revocable KP-ABE [10]. These papers use a notion of revocation in which URIs are revoked. In contrast, JEDI supports revocation at the level of keys. If multiple principals have access to a URI, and one of their keys is revoked, the other principal can still use its key to access the resource. Some systems [11, 39] rely on the participation of servers or routers to achieve revocation.

#### Secure Reliable Multicast Protocol
Secure Reliable Multicast [64, 65] also uses a many-to-many communication model and ensures correct data transfer in the presence of malicious routers. JEDI, as a protocol to encrypt messages, is complementary to these systems.

#### Authorization Services
JEDI is complementary to authorization services for IoT, such as bw2 [5], Vanadium [77], WAVE [6], and AoT [68], which focus on expressing authorization policies and enabling principals to prove they are authorized, rather than on encrypting data. Droplet [74] provides encryption for IoT but does not support delegation beyond one hop and does not provide hierarchical resources.

An authorization service that provides secure in-band permission exchange, like WAVE [6], can be used for key distribution in JEDI. JEDI can craft keys with various permissions, while WAVE can distribute them without a centralized party by including them in its attestations.

### 9 Conclusion

In this paper, we presented JEDI, a protocol for end-to-end encryption for IoT. JEDI provides many-to-many encrypted communication on complex resource hierarchies, supports decentralized key delegation, and decouples senders from receivers. It provides expiry for access to resources, reconciles anonymity and authorization via anonymous signatures, and allows revocation via tree-based broadcast encryption. Its encryption and integrity solutions are capable of running on embedded devices with strict energy and resource constraints, making it suitable for the Internet of Things.

### Availability

[Further details on availability, if any, should be provided here.]