for more concurrent connection pairs, which can eat up
memory and CPU cycles. Similarly, having a smaller
idle means that we need to update state for connec-
tions more frequently, which in turn increases CPU con-
sumption. To illustrate these effects, we increased A
from 80 msec to 200 msec and reduced =
idle from
0.5 sec to 0.3 sec. After this change, the time required to
process lbnl-telnet.trace increases to 155 sec,
more than double the 69 sec required with the current
settings.
FP/FN (
=30%)
(msec)
20
40
80
120
160
1
162/0
683/0
2,486/0
5,633/0
10,131/0
EMF>H csc
4
0/0
0/0
0/0
12/0
28/0
2
5/0
19/0
134/0
431/0
995/0
8
0/2
0/2
0/1
3/1
7/1
12
0/5
0/4
0/3
3/3
4/3
16
0/6
0/6
0/5
2/5
2/5
Table 3: Number of false positives (FP) and false neg-
atives (FN) for detecting indirect stepping stones when
.
Pea
Pea
Table 3 summarizes the results for detecting indirect
stepping stones when
. From the table it is evi-
dent that both the number of false positives and the num-
niÔ¨Åcantly increase the number of false positives, while a
ber of false negatives are minimized when EMFH csc
PjZ
andAk@ 80 msec. A smallerEMF>H csc or a largerA can sig-
larger EMF>H csc can lead to more false negatives. When
PlZ
smaller, but the optimal combination of EMFH csc and A
, the number of false positives is in general
remains the same. When
, the number of false
Pmb
PoZ
positives increases 150‚Äì300%, and for A
EMF>H csc
, increases from 0 false positives to 7.
Pen
Q msec and
the current settings of
These Ô¨Åndings show that
least for the
the parameters are fairly optimal, at
ucb-telnet.trace, and that there is considerable
room for varying the parameters in response to certain
evasion threats ( 4.4). We also note that there is no par-
idle, A , and
ticular need to use the same values of =
for both direct and indirect stepping stones, other than
simplicity, and there may be room for some further per-
formance improvement by allowing them to be speciÔ¨Åc
.
to the type of stepping stone, just as for EGFH csc and
5.7 Failures
In this section we summarize the common scenarios that
can cause the timing-based algorithm to fail. Some of
these failures have already been solved in the current
algorithm, but it is beneÔ¨Åcial to discuss them, because
they illustrate some of the subtleties involved in stepping
stone detection.
 Excessively short stepping stones. In many cases,
the timing-based algorithm missed a stepping stone
simply because the connections were exceedingly
short. In some cases, the ‚Äúdisplay‚Äù and ‚Äúlogin tag‚Äù
schemes are still able to catch these because both of
them key off of text sent very early during a login
session.
On the other hand, often attackers can‚Äôt do very
much during such short stepping stones, so failing
to detect them is not quite as serious as failing to
detect longer-lived stepping stones.
 Message broadcast applications such as the Unix
talk and wall utilities. Such utilities can cause
correlations between Ô¨Çows because they cause the
same text to be transmitted on multiple connec-
tions. However, these correlations will be of the
('
p
the endpoint break-
endpoint that breaks the idle period will be the same
This observation led to the directionality criterion
 , 
p
form 
(' ; that is, the connection
 , in this case), whereas for a true
for both Ô¨Çows (
q
+
stepping stone 
 ).
ing the idle period will differ (Ô¨Årst 
in  3.7.
 Correlations due to phase drift in periodic trafÔ¨Åc.
Consider two connections 
 . If the periodici-
data with periodicities r
ties are exactly the same, then the ON/OFF periods
 , then 
 and 
 and r
that transmit
N
R
]
N
R
]
N
Q
]
N
=
N
A
N
Q
]
N
Q
]
N
R
]
N
R
]
N
N
W


of the connections will remain exactly the same dis-
tance apart (equal to the phase offset for the period-
is slightly different from
icities). If, however, r
 , then the offset between the ON/OFF periods
of the two will drift in phase, and occasionally the
two will overlap. Such overlaps appear to be cor-
relations, but actually are due to the periods being
in fact uncorrelated, and hence able to drift with
respect to one another.
This phenomenon is not idle speculation (see also
[FJ94] for discussion of how it can lead to self-
synchronization in coupled systems). For example,
one of our traces includes two remote Telnet ses-
sions to the same machine at the same time (involv-
ing different user IDs, but clearly the same user).
The sessions had a period of overlap during which
both sessions were running pine to check mail. For
some reason, the pine display began periodically
sending data in small chunks, with about a second
between each chunk. These transmissions were ini-
tially out of sync, but sometimes sync‚Äôd up fairly
closely. Before we added the rule on consecutive
, discussed
coincidences (parametersEMF>H csc and
in  4.3), these sessions had been reported as a step-
ping stone, because the ratio of coincidences was
high enough. After we reÔ¨Åned the algorithm, such
spurious stepping stones went away (the rule on di-
rectionality discussed in the previous item would
have also happened to succeed in eliminating this
particular case).
 Large latency and its variation. As mentioned
of A
above, when a connection has a very high latency or
large delay variation, we need to increase the value
) in order
to detect it. We have not yet modiÔ¨Åed the algorithm
to do so because of complications in efÔ¨Åciently es-
timating a connection‚Äôs RTT.
, EGFH csc, and
(and, accordingly,
5.8 Experience with operational use
We initially expected that detecting a stepping stone
would mean that with high probability we had found an
intruder attempting to disguise their location. As the Ô¨Åg-
ures above on the frequency of detecting stepping stones
indicate, this expectation was woefully optimistic.
In
fact, we Ô¨Ånd that wide-area Internet trafÔ¨Åc abounds with
stepping stones, virtually all of them legitimate.
For example, UCB‚Äôs wide area trafÔ¨Åc includes more than
100 stepping stones each day. These fall into a num-
ber of categories. Some are external users who wish
to access particular machines that apparently trust inter-
nal UCB hosts but do not trust arbitrary external hosts.
Some appear to reÔ¨Çect habitual patterns of use, such as
‚Äúto get to a new host, type rlogin to the current host,‚Äù in
which it is not infrequent to observe a stepping stone us-
ing a remote host to access a nearby local host, or even
the same local host.2 Some are simply bizarre, such as
one user who regularly logs in from UCB to a site in Asia
and then returns from the Asian site back to UCB, in-
curring hundreds of msecs of latency (and thwarting our
default choice ofA , per the above discussion). Other pos-
sible legitimate uses that we haven‚Äôt happened to specif-
ically identify are gaining anonymity for purposes other
than attacks, or running particular client software pro-
vided by the intermediary but not by the upstream host.
Clearly, operational use will require development of re-
Ô¨Åned Bro policy scripts to codify patterns correspond-
ing to legitimate stepping stones, allowing the monitor
to then alert only on those stepping stones at odds with
the policies. But even given these hurdles, we Ô¨Ånd the
utility of the algorithm clear and compelling.
Finally, we note that the detection capability has already
yielded an unanticipated security bonus. Since the tim-
ing algorithm is indifferent to connection contents, it
can readily detect stepping stones in which the upstream
connection is made using a clear-text protocol such as
Telnet or Rlogin, but the downstream connection uses a
secure, encrypted protocol such as SSH. Whenever we
detect such stepping stones, it is highly probable that the
user typed their SSH passphrase or password in the clear
over the Ô¨Årst connection in the chain, thus undermining
the security of the SSH connection. Indeed, after begin-
ning to run the timing algorithm to look for this pattern,
we rapidly found instances of such use, and conÔ¨Årmed
that for each the passphrase was indeed typed in the
clear. At LBNL, running the timing algorithm looking
for such exposures is now part of the operational secu-
rity policy, and, unfortunately, it continues to alert nu-
merous times each day (and we have traced at least one
break-in to a passphrase exposed in this manner at an-
other site). Efforts are being made to educate the users
about the nature of this risk.
6 Concluding remarks
Internet attackers often mask their identity by launching
attacks not from their own computer, but from an inter-
2Inspection of some of these connections conÔ¨Årms that these are
not inside attackers attempting to hide their location.

r
N
W
N
N
W
mediary host that they previously compromised, i.e., a
stepping stone. By leveraging the distinct properties of
interactive network trafÔ¨Åc (smaller packet sizes, longer
idle periods than machine-generated trafÔ¨Åc), we have de-
vised a stepping-stone detection algorithm based on cor-
relating the timing of the ON/OFF periods of different
connections. The algorithm runs on a site‚Äôs Internet ac-
cess link.
It proves highly accurate, and has the ma-
jor advantage of ignoring the data contents of the con-
nections, which means both that it works for encrypted
trafÔ¨Åc such as SSH, and that the packet capture load
is greatly diminished since the packet Ô¨Ålter need only
record packet headers.
While the algorithm works very well, a major stumbling
block we failed to anticipate is the large number of le-
gitimate stepping stones that users routinely traverse for
a variety of reasons. One large site (the University of
California at Berkeley) has more than 100 such stepping
stones each day. Accordingly, the next step for our work
is to undertake operating the algorithm as part of a site‚Äôs
production security monitoring, which we anticipate will
require reÔ¨Åned security policies addressing the many le-
gitimate stepping stones. But even given these hurdles,
we Ô¨Ånd the utility of the algorithm clear and compelling.
Finally, a natural extension to this work is to attempt
to likewise detect non-interactive stepping stones, such
as relays, in which trafÔ¨Åc such as Internet Relay Chat
[OR93] is looped through a site, and slaves, in which in-
coming trafÔ¨Åc triggers outgoing trafÔ¨Åc (which is not re-
layed), such as used by some forms of distributed denial-
of-service tools [CE99]. These forms of stepping stones
have different coincidence patterns than the interactive
ones addressed by our algorithm, but a preliminary as-
sessment indicates they may be amenable to detection
on the basis of observing a local host that has long been
idle suddenly becoming active outbound, just after it has
accepted an inbound connection.
7 Acknowledgments
We would like to thank Stuart Staniford-Chen and Felix
Wu for thought-provoking discussions, and in particular
for the notion of deliberately introducing delay ( 4.4);
Ken Lindahl and Cliff Frost for their greatly appreci-
ated help with gaining research access to UCB‚Äôs trafÔ¨Åc;
and Mark Handley, Tara Whalen, and the anonymous
reviewers for their feedback on the work and its presen-
tation.
References
[Al94] S. Alexander, ‚ÄúTelnet Environment Option,‚Äù
RFC 1572, DDN Network Information Center,
Jan. 1994.
[Bo90] D. Borman,
‚ÄúTelnet Linemode Option,‚Äù
RFC 1184, Network Information Center, SRI
International, Menlo Park, CA, Oct. 1990.
[CE99] Computer
Response
Team,
‚ÄúDenial-of-Service Tools,‚Äù CERT Advisory CA-99-
17, Dec. 1999.
Emergency
[DJCME92] P. Danzig, S. Jamin, R. C¬¥aceres, D. Mitzel,
and D. Estrin, ‚ÄúAn Empirical Workload Model for
Driving Wide-area TCP/IP Network Simulations,‚Äù In-
ternetworking: Research and Experience, 3(1), pp. 1-
26, 1992.
[FJ94] S. Floyd, and V. Jacobson, ‚ÄúThe Synchroniza-
tion of Periodic Routing Messages,‚Äù IEEE/ACM
Transactions on Networking, 2(2), p. 122‚Äì136,
April 1994.
[OR93] J. Oikarinen and D. Reed, ‚ÄúInternet Relay Chat
Protocol,‚Äù RFC 1459, Network Information Center,
DDN Network Information Center, May 1993.
[PF95] V. Paxson and S. Floyd, ‚ÄúWide-Area TrafÔ¨Åc:
The Failure of Poisson Modeling,‚Äù IEEE/ACM Trans-
actions on Networking, 3(3), pp. 226-244, June 1995.
[Pa98] V. Paxson, ‚ÄúBro: A System for Detecting Net-
work Intruders in Real-Time,‚Äù Proc. USENIX Secu-
rity Symposium, Jan. 1998.
[PR83b] J. Postel and J. Reynolds, ‚ÄúTelnet Option Spec-
iÔ¨Åcations,‚Äù RFC 855, Network Information Center,
SRI International, Menlo Park, CA, May 1983.
[PN98] T. Ptacek and T. Newsham, ‚ÄúInsertion, Eva-
sion, and Denial of Service: Eluding Network
Intrusion Detection,‚Äù
Inc.,
http://www.aciri.org/vern/Ptacek-Newsham-Evasion-
98.ps, Jan. 1998.
Secure Networks,
[SH95] S. Staniford-Chen and L.T. Heberlein, ‚ÄúHolding
Intruders Accountable on the Internet.‚Äù Proc. IEEE
Symposium on Security and Privacy, Oakland, CA,
May 1995, pp. 39‚Äì49.
[YKSRL99] T. Ylonen, T. Kivinen, M. Saarinen, T.
Rinne, and S. Lehtinen, ‚ÄúSSH Transport Layer Proto-
col,‚Äù Internet Draft, draft-ietf-secsh-transport-06.txt,
June 1999.
[Zi91] D. Zimmerman, ‚ÄúThe Finger User Information
Protocol,‚Äù RFC 1288, Network Information Center,
SRI International, Menlo Park, CA, Dec. 1991.