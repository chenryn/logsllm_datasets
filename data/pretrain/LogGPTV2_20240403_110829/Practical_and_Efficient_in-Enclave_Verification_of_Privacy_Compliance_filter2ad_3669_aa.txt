title:Practical and Efficient in-Enclave Verification of Privacy Compliance
author:Weijie Liu and
Wenhao Wang and
Hongbo Chen and
Xiaofeng Wang and
Yaosong Lu and
Kai Chen and
Xinyu Wang and
Qintao Shen and
Yi Chen and
Haixu Tang
Practical and Efﬁcient in-Enclave Veriﬁcation of
Privacy Compliance
Weijie Liu∗, Wenhao Wang†§, Hongbo Chen∗, XiaoFeng Wang∗§, Yaosong Lu†, Kai Chen†, Xinyu Wang‡
∗Indiana University Bloomington {weijliu, hc50, xw7, hatang}@iu.edu
†Institute of Information Engineering, CAS {wangwenhao, luyaosong, chenkai, shenqintao}@iie.ac.cn
Qintao Shen†, Yi Chen¶, Haixu Tang∗
‡Shanghai Jiao Tong University wang x PI:EMAIL
¶The Chinese University of Hong Kong PI:EMAIL
Abstract—A trusted execution environment (TEE) such as Intel
Software Guard Extension (SGX) runs attestation to prove to
a data owner the integrity of the initial state of an enclave,
including the program to operate on her data. For this purpose,
the data-processing program is supposed to be open to the
owner or a trusted third party, so its functionality can be
evaluated before trust being established. In the real world,
however, increasingly there are application scenarios in which the
program itself needs to be protected (e.g., proprietary algorithm).
So its compliance with privacy policies as expected by the data
owner should be veriﬁed without exposing its code.
To this end, this paper presents DEFLECTION, a new model
for TEE-based delegated and ﬂexible in-enclave code veriﬁcation.
Given that the conventional solutions do not work well under the
resource-limited and TCB-frugal TEE, we come up with a new
design inspired by Proof-Carrying Code. Our design strategically
moves most of the workload to the code generator, which is
responsible for producing easy-to-check code, while keeping the
consumer simple. Also, the whole consumer can be made public
and veriﬁed through a conventional attestation. We implemented
this model on Intel SGX and demonstrate that it introduces
a very small part of TCB. We also thoroughly evaluated its
performance on micro- and macro- benchmarks and real-world
applications, showing that the design only incurs a small overhead
when enforcing several categories of security policies.
Index Terms—Intel SGX, Conﬁdential Computing, Proof-
Carrying Code, Enclave Shielding Runtime
I. INTRODUCTION
Recent years have witnessed the emergence of hardware
trusted execution environments (TEEs) that enable efﬁcient
computation on untrusted platforms. A prominent example
such as Intel SGX [1] has already been supported by major
cloud providers today, including Microsoft Azure and Google
Cloud [2], [3], and its further adoption has been facilitated
by the Conﬁdential Computing Consortium [4], a Linux
Foundation project that brings together the biggest technical
companies such as Intel, Google, Microsoft and IBM etc.
However, before TEEs can see truly wide deployment for real-
world conﬁdential computing, key technical barriers still need
to be overcome, remote attestation in particular.
Remote attestation. At the center of a TEE’s trust model is
remote attestation (RA), which allows the user of conﬁdential
the enclave code processing her
computing to verify that
§Corresponding authors
sensitive data is correctly built and operates on a genuine
TEE platform [5], so her data is well protected. This is
done on SGX through establishing a chain of trust rooted
at a platform attestation key which is used to generate a
Quote – a signed report that contains the measurement of
the code and data in an enclave; the Quote is delivered to
the data owner and checked against the signature and the
expected measurement hash. This trust building process is
contingent upon the availability of the measurement, which
is calculated from the enclave program either by the data
owner when the program is publicly available or by a trusted
third party working on the owner’s behalf. This becomes
problematic when the program itself is private and cannot be
exposed. Programs may have exploitable bugs or they may
write information out of the enclave through corrupted pointers
easily. For example, a pharmaceutical company can run its
proprietary algorithm inside an enclave hosting patient medical
records, without exposing the algorithm but can still ensure
the compliance of data use with the hospital’s privacy policy.
Another example can be a privacy-preserving credit evaluation
service, in which a customer’s transactions are only exposed
to an enclave running the credit evaluation code in compliance
with a set of public privacy-protection rules (such as GDPR).
We consider conﬁdential computing as a service (CCaaS) as
a privacy extension of today’s online data processing services
like machine-learning as a service [2]. CCaaS is hosted by the
party that operates its own target binary on the data provided
by remote users. With applications of this kind on the rise,
new techniques for protecting both data and code privacy are
in great demand.
Challenges. To address this problem, we present in this paper
a novel Delegated and ﬂexible in-enclave code veriﬁcation
(DEFLECTION) model to enable veriﬁcation of an enclave pro-
gram’s compliance with user-deﬁned security policies without
exposing its source or binary code to unauthorized parties
involved. Under the DEFLECTION model, a bootstrap enclave
whose code is public and veriﬁable through the Intel’s remote
attestation, is responsible for performing the compliance check
on behalf of the participating parties, who even without access
to the code or data to be attested, can be convinced that desired
policies are faithfully enforced. However, building a system
to support this model turns out to be nontrivial, due to the
complexity in static analysis of enclave binary for policy com-
pliance, the need to keep the veriﬁcation mechanism, which
is inside the enclave’s trusted computing base (TCB), small,
the demand for a quick turnaround from the enclave user,
and the limited computing resources today’s SGX provides.
Although the shielding runtimes such as Library OSes [6],
[7], SCONE container [8], Ryoan sandbox [9] and the inter-
preters/compilers built for SGX [10], [11] enable conﬁnement
of unmodiﬁed binary in SGX enclaves, they all rely on a heavy
interface layer for in-enclave service code to interact with the
OS/Hypervisor [12], which introduces performance overhead.
More importantly, the conﬁnement mechanisms (sometimes
including a whole interpreter) signiﬁcantly increase the TCB,
leading to a challenge in ensuring its security [13].
A promising direction we envision that could lead to a
practical solution is proof-carrying code (PCC) [14], [15],
a technique that enables a veriﬁcation condition generator
(VCGen) [16]–[18] to analyze a program and create a proof
that attests the program’s adherence to policies, and a proof
checker to verify the proof and the code. The hope is to
keep the VCGen outside the enclave while keeping the proof
checker inside the enclave small and efﬁcient. The problem is
that this cannot be achieved by existing approaches, which
utilize formal veriﬁcation (such as [18], [19]) to produce
a proof that could be considerably larger than the original
code. Actually, today’s formal veriﬁcation techniques, theorem
proving in particular, are still less scalable, difﬁcult to handle
large code blocks when constructing a security proof [20].
Our solution. We developed a new technique to instantiate
the DEFLECTION model on SGX. Our approach, has been
inspired by PCC, but relies on program analysis and Software-
based Fault Isolation (SFI) techniques, particularly out-of-
enclave targeted instrumentation for lightweight
in-enclave
information-ﬂow conﬁnement, instead of heavyweight theorem
proving to ensure policy compliance of enclave code. More
speciﬁcally, DEFLECTION operates an untrusted code producer
as a compiler to build the binary code for a data-processing
program (called target program) and instrument it with a set of
security annotations for enforcing desired policies at runtime,
together with a lightweight trusted code consumer running in
the bootstrap enclave to statically verify whether the target
code indeed carries properly implanted security annotations.
To reduce the TCB and in-enclave computation, DEFLEC-
TION is designed to simplify the veriﬁcation step by pushing
out most computing burden to the code producer running
outside the enclave. More speciﬁcally, the target binary is
expected to be well formatted by the producer, with all its
indirect control ﬂows resolved, all possible jump target ad-
dresses speciﬁed on a list and enforced by security annotations.
In this way, the code consumer can check the target binary’s
policy compliance through lightweight Recursive Descent Dis-
assembly to inspect its complete control ﬂow (Section V-B),
so as to ensure the presence of correctly constructed security
annotations in front of each critical operation, such as load,
store, enclave operations like OCall, and stack management
(through a shadow stack). Any failure in such an inspection
causes the rejection of the program. Also, since most code
instrumentation (for injecting security annotations) is tasked
to the producer, the code consumer does not need to make any
change to the binary except relocating it inside the enclave.
As a result, we only need a veriﬁer with a vastly simpliﬁed
instead of a full-ﬂedged, complicated binary
disassembler,
analysis toolkit,
to support categories of security policies,
including data leak control, control-transfer management, self-
modifying code block and side/covert channel mitigation in a
small-size machine-language format (Section IV-B); in further
work, other proofs could be extended given a formal model of
the x64 instruction set (e.g., as in [21]). A wider spectrum of
policies can also be upheld by an extension of DEFLECTION,
as discussed in the paper (Section VII).
We implemented DEFLECTION in our research, building the
code producer on top of the LLVM compiler infrastructure
and the code consumer based upon the Capstone disassembly
framework [22] and the core disassembling engine for x86
architecture. Using this unbalanced design, our in-enclave pro-
gram has only 2000 lines of source code, which is signiﬁcantly
smaller than other shielding runtimes. We further evaluated
our implementation on micro-benchmarks (nBench), as well
as macro-benchmarks, including credit scoring, HTTPS server,
and also basic biomedical analysis algorithms.
DEFLECTION incurs on average (calculated by geometric
mean) 20% performance overhead enforcing all the proposed
security policies, and leads to around 10% performance over-
head without side/covert channel mitigation. We have released
our code on Github [23].
II. BACKGROUND
Intel SGX. Intel SGX [1] is a user-space TEE, which is
characterized by ﬂexible process-level isolation. Such pro-
tection, however, comes with in-enclave resource constraints.
Particularly, only 128 MB (256 MB for some new processors)
encryption protected memory is reserved. Although virtual
memory support is available, it incurs signiﬁcant overheads
in paging [8].
it can perform an OCall
Another problem caused by SGX’s design is a large attack
surface. The application can invoke a pre-deﬁned function
inside the enclave, passing input parameters and pointers
to shared memory within the application. Those invocations
from the application to the enclave are called ECall. When
an enclave executes,
to a pre-
deﬁned function in the application. Contrary to an ECall,
an OCall cannot share enclave memory with the application,
so it must copy the parameters into the application memory
before the OCall. When an enclave program contains memory
vulnerabilities, attacks can happen to compromise enclave’s
privacy protection. Prior research demonstrates that a Return-
oriented programming (ROP) attack can succeed in injecting
malicious code inside an enclave, which can be launched by
the OS, Hypervisor, or BIOS [24]–[26]. Another security risk
is side-channel leak [27]–[29], caused by the thin software
2
stack inside an enclave (for reducing TCB), which often has
to resort to the OS for resource management (e.g., paging,
I/O control). Particularly, an OS-level adversary can perform
a controlled side channel attack (e.g., [30]).
PCC. PCC is a mechanism that allows a host system to
verify an application’s properties with a proof accompanying
the application’s executable code. Traditional PCC schemes
tend to utilize formal veriﬁcation for proof generation and
validation. Techniques for this purpose includes veriﬁcation
condition generation [16], [31], theorem proving [32]–[34],
and proof checking [35], which typically work on type-safe
intermediate languages (IL) or higher level
languages. A
problem here is that up to our knowledge, no formal tool
today can automatically transform a binary to IL for in-
enclave veriﬁcation. BAP [36] disassembles binaries and lifts
x86 instructions to a formal format, but it does not have a
runtime C/C++ library for static linking, as required for an
enclave program. Moreover, the PCC architecture relies on
the correctness of the VCGen and the proof checker, so a
direct application of PCC to conﬁdential computing needs
to include both in TCB. This is problematic due to their
complicated designs and implementations, which are known to
be error-prone [19]. Particularly, today’s VCGens are built on
either an interpreter/compiler even a virtual machine [17], and
therefore will lead to a huge TCB. Prior attempts [37] to move
VCGen out of TCB are found to have serious performance
impacts, due to the signiﬁcantly increased proof size growing
exponentially with the size of the program that needs to be
certiﬁed [14]. Although techniques are there to reduce the
proof size [18], [37], they are too complicated to scale to
real-world applications [35].
III. DEFLECTION
In this section, we present the DElegated and FLexible in-
Enclave Code veriﬁcation (DEFLECTION) model to allow the
data owner to verify that the enclave code satisﬁes predeﬁned
security policy requirements without undermining the privacy
of the enclave code. Consider an organization that provides
data-processing services, such as image editing, tax prepa-
ration, personal health analysis and deep learning inference
as a service. To use the services, customers need to upload
their sensitive data, such as images, tax documents, and health
data,
to the hosts operated by the organization. To avoid
exposing the data, the services run inside SGX enclaves and
need to prove to the customers that they are accessing to
attested service programs. However, the organization may not
want to release proprietary programs to protect its intellectual
property. Here, DEFLECTION can enforce the data privacy on
behalf of the data-processing services. Besides, the framework
of our system is highly ﬂexible, which means assembling
new policies into current design can be very straightforward.
Different on-demand policies can be appended/withdrawn to
serve various goals. For example, DEFLECTION can make
the quick patch possible on software level, like the way people
coping with 1-day vulnerabilities - emergency quick ﬁx.
Fig. 1: The DEFLECTION model
A. The Delegation Model
Attestation service. Attestation Service (AS) assists in the
remote attestation process by helping the data owner verify
the quote generated by an enclave, as performed by the Intel
attestation service for SGX.
Bootstrap enclave. The bootstrap enclave is a built-in control
layer on the software stack, hosted by the code provider or a
third party cloud (see Figure 1). Its code is public and initial
state is measured by hardware for generating an attestation
quote, which is later veriﬁed by the data owner with the help
of the AS. This software layer is responsible for establishing
security channels with enclave users, authenticating and dy-
namically loading the binary of the target program from the
code provider and data from its owner. It further veriﬁes the
code to ensure its compliance with predeﬁned security policies
before bootstrapping the computation. During the computing,