App基础设施
FB服务
FBML
FB AP1
浏览器
FB基础设施
FBML解释
S_REQUEST
Receiver
FQL
器+FBJS
HTML,JS,
CSS
appJs
隐私规则
(obj)
FB逻辑层
FB显示层
FB数据
图6-6：Facebook平台服务
随着开发者的社会关系应用越来越成为Facebook使用的一项集成服
务，而不是由浏览器使用的外部站点，我们已经重新创建或重新设
计了浏览器的某些功能（通过平台cookie、FBJIS等）。在试图改变
或重建“应用”的概念时，这是必需的两个重要修改的例子。
Facebook平台包括类似的其他一些架构上的巧妙设计，这里没有详
细介绍，其中包括数据存储API和浏览器端Web服务客户端。
6.6总结
Facebook的用户贡献的社会关系有效地提高了http://facebook.com上
几乎所有页面的效用。而且，这种数据非常通用，所以当它与外部
开发者的应用栈结合在一起时，它的最佳使用就出现了，这都是通
1043
---
## Page 1045
过Facebook平台的Web服务、数据查询服务和FBML等技术来实现
的。从取得用户的朋友或简介信息的简单内部API开始，我们在本
章中详细介绍的全部改进展示了如何协调不断扩展的数据访问方法
和容器网站的预期，特别是对数据隐私和站点体验集成方面的要
求。每次对数据架构的新改动都发现了Web架构的一些新问题，我
们又通过对数据访问模式的更强改进来解决这些问题。
虽然我们将关注重点完全放在那些使用Facebook的社会关系数据平
台的应用的潜力和约束上，但像这样的新型数据服务不一定局限于
社会关系信息。随着用户责献和使用的信息越来越多，这些信息在
许多容器站点上都很有用（如内容收集、评论、位置信息、个人计
划、协作等数据），各式各样的平台提供者可以应用Facebook平台
特有的数据和Web架构背后的这些思想，并从中获益。
第三部分系统架构
第7章Xen和虚拟化之美
第8章Guardian：一个容错操作系统环境
第9章JPC：一个纯Java的x86PC模拟程序
第10章元循环虚拟机的力量：JikesRVM
第7章Xen和虚拟化之美
Derek Murray Keir Fraser
原则与特性
结构
V功能多样性
V模块
概念完整性
V依赖关系
V修改独立性
1044
---
## Page 1046
进程
自动传播
数据访问
可构建性
V增长适应性
熵增抵抗力
7.1简介
Xen是一个虚拟化平台，它来自于一项学术研究成果，现已发展成
一个重要的并源项目。它容许用户在单个物理机器上运行几个操作
系统，并特别强调性能、隔离性和安全性。Xen项目在多个领域造
成了很大的影响：从软件到硬件，从学术研究到商业并发。它的成
功很大一部分应归于采用了GPL（GNUGeneralPublicLicense）的开
源发布方式。然而，并发人员并非某一天突发奇想决定编写一个并
源的系统管理程序。它最初是一个大的（甚至野心勃勃的）研究项
目Xenoservers的一部分。这个项目催生了开发Xen的动机，所以，
在这儿我们将用它来解释虚拟化的必要性。
把Xen并源，这不仅使大量的用户可以使用它，也使它能够和其他
开源项目享有共生关系。Xen的独特之处在于，当它第一次发布
时，使用了半虚拟化（Paravirtualization）来运行像Linux这样的常规
操作系统。半虚拟化需要修改运行在Xen之上的操作系统，既提升
性能文简化了Xen自身。然而，半虚拟化只能做到这样，而且只有
在处理器供应商的硬件支持下，Xen才能运行未修改的操作系统，
如MicrosoftWindows。处理器发展的前沿之一是增加新特性来支持
虚拟机并消除一些性能开销。
随着新特性的增加及新的硬件变得可用，Xen的架构正在慢慢地发
展。然而，从最初的原型到现在的版本，它的基本结构一直保持不
变。在这一章中，我们介绍Xen的架构如何从早期的一个研究项目
经过三个主要的版本，一直演变到目前的情况。
7.2Xenoservers
1045
---
## Page 1047
与Xen相关的工作于2002年4月在剑桥大学开始。它最初作为
Xenoservers项目的一部分，而Xenoservers的目标是创建一个“全球
的分布式计算结构”。
几乎在同一时期，网格计算（gridcomputing）发展为利用分布于全
球的计算资源的最好方式。最初的网格方案把计算机时间塑造成一
种能力，就像电一样，这种能力可以通过协作计算机的网络或网格
来获得。然而，后续的实现集中到了虚拟组织（virtual
organization）上：可能建立了复杂信任关系的公司或机构组，这通
过采用重量级的公钥加密来认证和授权而得以加强。
Xenoservers从相反的方向来解决这个问题。顾客通过一个代理（众
所周知的XenoCorp）选择公并市场上的一个资源，而不是和服务提
供商形成信任关系。XenoCorp保存一系列的xenoservers（由第三方
提供出租的计算机）把顾客与服务器相对应，根据使用情况收取费
用并支付报酬。至关重要的是，在顾客和提供商之间是相互不信任
的：顾客不能损坏提供商的机器，提供商不能纂改顾客的工作。
信任
不信任是一个有用的架构特征，这听起来似乎违反常识。然而，在
这个环境中，安全的主要目标是防止其他人访问或破坏敏感数据。
因此，可信的系统是一个允许访问数据的系统。当不信任被构建入
架构时，可信组件的数量会减到最少，并由此默认地提供了安全
性。
下面开始讨论虚拟化。提供商为顾客提供一个新的虚拟机任其使
用，而不是为顾客提供服务器上的一个账号。然后，顾客可以运行
任何操作系统和任何应用程序（参见图7-1）。
1046
---
## Page 1048
应用
应用
A
C
应用
服务
B
X
操作系统1
操作系统2
系统管理程序
硬件
图7-1：虚拟机架构
虚拟软件确保这些与机器的其他部分隔离开，其他部分可能会租赁
给更多的顾客。运行在虚拟机上面的系统管理程序（hypervisor）包
含两个主要部分：一个引用监控器和一个调度程序，引用监控器确
保一个虚拟机不能访问另一个虚拟机的资源（尤其是虚拟机的数
据），调度程序确保每个虚拟机平等共享机器的CPU。
你不能只使用一个操作系统？
自20世纪60年代以来，分时操作系统就已经存在了，它能够使几个
相互不信任的用户同时运行进程。比如说，在基于UNIX的机器上给
每个用户一个账号还不够吗？
这确实让用户共享了计算的资源。然而，这不能令人满意，因为用
户不具有灵活性和性能隔离。
在灵活性方面，用户只能运行与这台机器的操作系统兼容的软件，
没有办法运行一个不同的操作系统，或改变操作系统。确实，（没
有管理员的支持）用户不可能安装需要root权限的软件。
至于性能隔离，对于一个操作系统内核（这是一个极端复杂的软件
块）来说，计算某一用户使用的所有资源比较困难。fork炸弹（fork
bomb）就是一个例子，在这里一个用户的进程数呈指数级增长。这
会迅速地消耗掉处理器的所有资源并导致对其他用户拒绝服务。因
1047
---
## Page 1049
此，多用户系统通常需要用户之间有一定的信任和规范，以使不会
出现这样的攻击。
在图7-1中，我们看到两个虚拟机运行在一个系统管理程序上。第一
序：第二个虚拟机运行操作系统2（例如Linux）、一个应用程序和
一个服务。
这表明虚拟化对于其他事情也有用。例如，在许多数据中心，每个
应用程序都有一个专门的服务器可用，如一个数据库服务器或一个
Web服务器，但是，每个服务器只使用它的一小部分处理器。然
而，仅仅在同一个操作系统上运行那些应用程序会引起糟糕的结
果。当各种各样的应用程序一起运行时，可能会导致不可预知的差
的性能。更糟糕的是，存在关联失败的风险，当一个应用程序崩溃
时，也会引起其他应用程序崩溃。通过把每个应用程序单独放在一
个虚拟机，然后在一个系统管理程序之上运行它们，系统管理程序
可以保护这些应用程序并确保每个应用程序平等共享服务器的资
源。
用虚拟化来进行效用计算（utilitycomputing）的观点在最近几年开
始流行。最知名的效用计算服务之一是Amazon的EC2，它允许顾客
在Amazon数据中心的服务器上创建虚拟机。然后，顾客为他的虚拟
机所使用的处理器时间和网络带宽付费。实际上，这些服务器运行
Xen作为它们的虚拟化软件，使得它更接近于Xenoservers（虽然它
只容许单个服务提供商）。
虚拟化对网格计算也有影响。网格计算事实的标准中间件Globus，
现在支持虚拟工作空间（virtualworkspace），它把虚拟机和现有的
网格安全及资源管理协议结合在了一起。这样做的一个额外的好处
是，如果条件改变，一个虚拟工作空间（就像任意的虚拟机）可以
迁移到另一个物理位置。
采用Xenoservers模式的虚拟机的关键优势是它们可以用来运行流行
的操作系统和现有的应用程序。实际上，这意味着它运行在主流的
x86架构之上，这给系统管理程序的并发人员提出了一些挑战。
7.3虚拟化的挑战
1048
---