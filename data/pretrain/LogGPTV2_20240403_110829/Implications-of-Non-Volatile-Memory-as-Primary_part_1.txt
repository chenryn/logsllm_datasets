Implications of Non-Volatile Memory as Primary
Storage for Database Management Systems
Naveed Ul Mustafa∗, Adria` Armejach†, Ozcan Ozturk∗, Adria´n Cristal† and Osman S. Unsal†
∗Computer Engineering Department, Bilkent University, Ankara, Turkey.
Email: PI:EMAIL, PI:EMAIL
† Barcelona Supercomputing Center, Barcelona, Spain.
Email: PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract—Traditional Database Management System (DBMS) an in-memory database, 59% of the overall energy is spent in
software relies on hard disks for storing relational data. Hard main memory [11]. Furthermore, there are inherent physical
disks are cheap, persistent, and offer huge storage capacities.
limitations related to leakage current and voltage scaling that
However, data retrieval latency for hard disks is extremely
prevent DRAM from further scaling [12, 13]. As a result,
high. To hide this latency, DRAM is used as an intermediate
storage. DRAM is significantly faster than disk, but deployed DRAM is unlikely to keep up with current and future dataset
in smaller capacities due to cost and power constraints, and growth trends as a primary storage medium.
without the necessary persistency feature that disks have. Non- NVM is an emerging storage class technology which pro-
VolatileMemory(NVM)isanemergingstorageclasstechnology
vides a good combination of features from disk and DRAM.
whichpromisesthebestofbothworlds.Itcanofferlargestorage
ProminentNVMtechnologiesarePC-RAM1 [14],STT-RAM
capacities, due to better scaling and cost metrics than DRAM,
andisnon-volatile(persistent)likeharddisks.Atthesametime, 2 [13],andR-RAM3 [15].SinceNVMprovidespersistencyat
itsdataretrievaltimeismuchlowerthanthatofharddisksand the device level, it does not need a refresh cycle like DRAM
it is also byte-addressable like DRAM. to maintain data states, as a consequence NVM technologies
In this paper, we explore the implications of employing NVM
consume less energy per bit compared to DRAM [16]. In
asprimarystorageforDBMS.Inotherwords,weinvestigatethe
addition, NVM features significantly better access latencies
modifications necessary to be applied on a traditional relational
DBMS to take advantage of NVM features. As a case study, we than hard disks - with read latencies being almost as good as
have modified the storage engine (SE) of PostgreSQL enabling those of DRAM, byte-addressability, and higher density than
efficient use of NVM hardware. We detail the necessary changes DRAM [17].
andchallengessuchmodificationsentailandevaluatethemusing
To benefit from these features, a DBMS design should take
a comprehensive emulation platform. Results indicate that our
modified SE reduces query execution time by up to 40% and into account the characteristics of NVM. Simple ports of a
14.4% when compared to disk and NVM storage, with average traditional DBMS - designed to use disks as primary storage
reductions of 20.5% and 4.5%, respectively. medium - to NVM will show improvement due to the lower
access latencies of NVM. However, adapting a DBMS to fit
I. INTRODUCTION
NVM characteristics can offer a number of benefits beyond
Traditional design of Database Management Systems lower access latencies.
(DBMS) assumes a memory hierarchy where datasets are
Inthispaper,westudytheimplicationsofemployingNVM
stored in disks. Disks are a cheap and non-volatile storage
inthedesignofaDBMS.Wefirstdiscussandprovideinsights
medium suitable for storing large datasets. However, they are
on the different available options of including NVM into the
extremelyslowfordataretrieval.Tohidetheirhighdata-access
memory hierarchy of current systems. We then investigate the
latency, DRAM is used as an intermediate storage between
required modifications in the DBMS’s storage engine (SE) to
disks and the processing units. DRAM is orders of magnitude
leverage NVM features using a well-known relational disk-
faster than a disk. In addition, with increasing DRAM chip
optimized DBMS - PostgreSQL. We explain in detail the
densities and decreasing memory prices, systems with large
necessary steps to modify PostgreSQL, and explain how the
pools of main memory are common.
modifications impact the internals of the DBMS. Our modifi-
For these reasons, relational in-memory DBMSs have be- cations aim at providing fast access to data by bypassing the
comeincreasinglypopular[1,2,3,4].Significantcomponents slow disk interfaces while maintaining all the functionalities
of in-memory DBMSs, like index structures [5], recovery of a robust DBMS such as PostgreSQL.
mechanisms from system failure [6], and commit processing
We evaluate two modified SEs of PostgreSQL using a
[7]aretailoredtowardstheusageofmainmemoryasprimary
comprehensiveemulationplatformandtheTPC-H[18]bench-
storage. However, in-memory DBMSs dealing with critical or
mark. In addition, we also evaluate an unmodified version of
non redundant data still need to provide a form of persistent
storage, typically a large pool of disks [1, 8, 9, 10].
1PC-RAM:PhaseChangeRandomAccessMemory
DRAM is a major factor affecting the power-efficiency of 2STT-RAM:SpinTransferTorqueRandomAccessMemory
in-memory database servers. In a typical query execution for 3R-RAM:ResistiveRandomAccessMemory
PostgreSQLusingahigh-endsolidstatediskandtheemulated
User Applications
NVM hardware. We show that our modified SEs are able to
mmap File IO File IO mmap
reduce the kernel execution time, where file I/O operations
take place, from around 10% to 2.6% on average. In terms of Virtual File System
wall-clock query execution time, our modifications improve Kernel
performance by 20.5% and 4.5% on average when compared
to disk and NVM storage, respectively. We also demonstrate Traditional FS
that the performance of our modified SE is limited by the fact
Page Cache mmu
that,sincedataisdirectlyaccessedfromtheNVMhardware,it PMFS mappings
isnotclosetotheprocessingunitswhenitisneededforquery Block Device
processing. This leads to long latency user-level cache misses
that eat up the improvements achieved by avoiding expensive
NVM (Persistent Memory)
data movement operations.
Block-based Files System PMFS
II. BACKGROUND
Fig.1. ComparisonoftraditionalFSandPMFS.“mmap”referstothesystem
In this section, we first describe in detail the properties of
callformemorymappedI/Ooperation.“mmu”isthememorymanagement
NVM technologies, highlighting the implications these might unitresponsibleforaddressmappings.
have in the design of a DBMS. We then describe currently
available system software to manage NVM.
like disks. Due to these features, NVMs are starting to appear
A. Characteristics of NVM in embedded and energy-critical devices and are expected to
Data access latency: Read latency of NVM technologies is play a major role in future computing systems. Companies
significantly lower than that of a disk. However, since NVM like Intel and Micron have launched the 3D XPoint memory
devices are still under development, sources quote varying technology, which features non-volatility [23]. Intel has also
read latencies. For example, the read latency for STT-RAM introduced new instructions to support the usage of persistent
ranges from 1 to 20ns [16, 19, 20]. Nonetheless, there is a memory at the instruction level [24].
general consensus that read latencies will be similar to those
of DRAM [16, 19]. B. System software for NVM
PC-RAM and R-RAM are reported to have a higher write
latency compared to DRAM, but STT-RAM also outperforms Using NVM as primary storage necessitates modifications
DRAM in this regard [16, 19]. However, the write latency is not only in application software but also in system software
typically not on the critical path, since it can be tolerated by in order to take advantage of NVM features. A traditional
using buffers [17]. file system (FS) accesses the storage through a block layer.
Density: NVM technologies provide higher densities than If a disk is replaced by NVM without any modifications in
DRAM, which makes them a good candidate to be used the FS, the NVM storage will still be accessed at block level
as main memory as well as primary storage, particularly in granularity. Hence, we will not be able to take advantage of
embedded systems [21]. For example, PC-RAM provides 2 to the byte-addressability feature of NVM.
4 times higher density as compared to DRAM [17], and it is For this reason, there have been developments in file sys-
expected to scale to lower technology nodes as opposed to tem support for persistent memory. PMFS is an open-source
DRAM. POSIX compliant FS developed by Intel Research [25, 26]. It
Endurance: Endurance is defined as the maximum number offers two key features in order to facilitate usage of NVM.
of writes for each memory cell [17]. The most promising First, PMFS does not maintain a separate address space
contestantsarePC-RAMandSTT-RAM.Bothmemoriesoffer for NVM. In other words, both main memory and NVM use
an endurance close to that of DRAM. More specifically, en- the same address space. This implies that there is no need to
duranceforNVMsis1015 whereasforDRAMitis1016 [22]. copy data from NVM to DRAM to make it accessible to an
On the other hand, NVMs exhibit higher endurance than flash application.Aprocesscandirectlyaccessfile-systemprotected
memory technologies [19]. data stored in NVM at byte level granularity.
Energy consumption: Since NVMs do not need a refresh Second,inatraditionalFSstoredblockscanbeaccessedin
cycle to maintain data states in memory cells like DRAM, two ways: (i) file I/O and (ii) memory mapped I/O. PMFS
they are more energy efficient. A main memory designed by implements file I/O in a similar way to a traditional FS.
using PC-RAM technology consumes significantly lower per However, the implementation of memory mapped I/O differs.
access write energy as compared to DRAM [22]. Other NVM InatraditionalFS,memorymappedI/Owouldfirstcopypages
technologies also have similar lower energy consumption per to DRAM [25] from where application can examine those
bit when compared to DRAM [16, 20]. pages. PMFS avoids this copy overhead by mapping NVM
In addition to the features listed above, NVM technologies pages directly into the address space of a process. Figure 1
also provide byte-addressability like DRAM and persistency from [25] compares a traditional FS with PMFS.
tantcomponentsoftheDBMSneedtobemodifiedorremoved
when using NVM as a primary storage.
Queries Queries Queries
Avoid the block level access: Traditional design of DBMS
Intermediate data Intermediate data Intermediate data uses disk as a primary storage. Since disks favor sequential
in DRAM in NVM in DRAM accesses,databasesystemshidedisklatenciesbyissuingfewer
Database in Disk Database in NVM Database in NVM but larger disk accesses in the form of a data block [28].
Unfortunately, block level I/O costs extra data movement.
(a)Traditionaldesign (b)All-in-NVM (c)NVM-Disk For example, if a transaction updates a single byte of a tuple,
Fig.2. NVMplacementinthememoryhierarchyofacomputingsystem. it still needs to write the whole block of data to the disk. On
the other hand, block level access provides good data locality.
Since NVM is byte-addressable, we can read and write
III. DESIGNCHOICES
onlytherequiredbyte(s).However,reducingthedataretrieval
In this section, we discuss the possible memory hierarchy granularity down to a byte level eliminates the advantage of
designs when including NVM in a system. We also discuss data locality altogether. A good compromise is to reduce the
the high-level modifications necessary in a traditional disk- block size in such a way that the overhead of the block I/O
optimized DBMS in order to take full advantage of NVM is reduced to an acceptable level, while at the same time the
hardware. application benefits from some degree of data locality.
Remove internal buffer cache of DBMS: DBMSs usually
A. Memory Hierarchy Designs for an NVM-Based DBMS
maintain an internal buffer cache. Whenever a tuple is to be
There are various ways to place NVM in the memory hier- accessed, first its disk address has to be calculated. If the
archy of a current DBMS computing system. Figure 2 shows corresponding block of data is not found in the internal buffer
different options that might be considered when including cache,thenitisreadfromdiskandstoredintheinternalbuffer
NVMintothesystem.Figure2adepictsatraditionalapproach, cache [29].
wheretheintermediatestate-includinglogs,databuffers,and This approach is unnecessary in an NVM-based database
partial query state - is stored in DRAM to hide disk latencies design.IftheNVMaddressspaceismadevisibletoaprocess,
fordatathatiscurrentlyinuse;whilethebulkoftherelational then there is no need to copy data blocks. It is more efficient
data is stored in disk. to refer to the tuple directly by its address. However, we need
Given the favorable characteristics of NVM over the other an NVM-aware FS, such as PMFS, to enable direct access to
technologies, an option might be to replace both DRAM and the NVM address space by a process.
disk storage using NVM (Figure 2b). However, such a drastic Remove the redo logging: To ensure the atomicity, consis-
changewouldrequireacompleteredesignofcurrentoperating tency,isolationanddurability(ACID)propertiesofadatabase,
systemandapplicationsoftware.Inaddition,NVMtechnology a DBMS maintains two types of logs: the undo and redo
is still not mature enough in terms of endurance to be used logs. The undo log is used for cleaning after uncommitted
as a DRAM replacement. Hence, we advocate for a platform transactions, in case of a system failure or a transaction abort
that still has a layer of DRAM memory, where the disk is issued by the program [30]. The redo log is used to re-
completely or partially replaced using NVM, as shown in apply those transactions which were committed but yet not
Figure 2c (NVM-Disk). materialized before the system failure.
Using this approach, we can retain the programmability of In the case of NVM-based design, if internal buffers are
current systems by still having a layer of DRAM, thereby not employed and all updates are materialized directly into
exploiting DRAM’s fast read and write access latencies for the NVM address space then the need and criticality of the
temporary data structures and application code. In addition, redo log can be relaxed [27]. However, the undo log will still
it allows the possibility to directly access the bulk of the be needed to recover from a system failure.
database relational data by using a file system such as PMFS,
IV. ACASESTUDY:POSTGRESQL