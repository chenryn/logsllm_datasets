title:Engineering Over-Clocking: Reliability-Performance Trade-Offs for
High-Performance Register Files
author:Gokhan Memik and
Masud H. Chowdhury and
Arindam Mallik and
Yehea I. Ismail
Engineering Over-Clocking: Reliability-Performance 
Trade-Offs for High-Performance Register Files
Gokhan Memik1, Masud H. Chowdhury2, Arindam Mallik1, Yehea I. Ismail1
1 Dept of Electrical and Computer Engineering
Northwestern University 
{memik, arindam, ismail}@ece.northwestern.edu 
2 College of Engineering, 
University of Illinois at Chicago 
PI:EMAIL
ABSTRACT
Register files are in the critical path of most high-performance 
processors  and  their  latency  is  one  of  the  most  important 
factors  that  limit  their  size.  Our  goal  is  to  develop  error 
correction mechanisms at the architecture level. Utilizing this 
increased robustness, the clock frequencies of the circuits are 
pushed  beyond  the  point  of  allowing  full  voltage  swing.  This 
increases  the errors observed due to noise and other external 
factors.  The  resulting  errors  are  then  corrected  through  the 
error  correction  mechanisms.  We  first  develop  a  realistic 
model  for  error  probability  in  register  files  for  a  given  clock 
frequency.  Then,  we  present  the  overall  architecture,  which 
allows  the  error  detection  computation  to  be  overlapped  with 
other computation in the pipeline. We develop novel techniques 
that  utilize  the  fact  that  at  a  given  instance  many  physical 
registers  are  not  used  in  superscalar  processors.  These 
underutilized  registers  are  used  to  store  the  values  of  active 
registers.  Our  simulation  results  show  that  for  a  fixed 
architecture the access times to the registers can be reduced by 
as  much  as  80%  while  increasing  the  number  of  execution 
cycles  by  0.12%.  On  the  other  hand,  by  reducing  the  register 
file  access  pipeline  stages  by  75%,  the  average  number  of 
execution  cycles  of  SPEC  applications  can  be  reduced  by 
11.5%.  
Keywords: Reliability,  Fault-Tolerant  Computing, 
Adaptive Systems.
1.  INTRODUCTION
Over  the  last  decade,  in  spite  of  the  complexities  of  new 
manufacturing  technologies  and  increasingly  complicated 
architectures, designers have been able to steadily increase 
the  performance  of  high-end  microprocessors.  This 
improvement  is  achieved  through  optimizations  at  the 
architecture level (such as aggressive pipelining strategies) 
and  at  the  circuit  level  (such  as  smaller  feature  sizes).  As 
we  move 
the 
complexity  of  pushing  the  circuit  performance  further 
becomes  an 
important  obstacle.  To  achieve  better 
performance, there is an increasing need for collaboration 
of  higher  level  (e.g.  microarchitecture-level)  and  circuit-
level  optimizations.  In  this  work,  we  present  such  a 
collaborative  optimization.  Particularly,  we  provide 
architectural  structures  to  increase  the  robustness  of  the 
register  files  in  high-end  processors,  thereby  allowing  the 
into  deeper  sub-micron 
technologies, 
designers  to  push  the  operating  frequencies  further1.  The 
reduced  delay  times  usually  result  in  an  increase  in  the 
number of errors observed due to noise and other external 
effects.  However,  the  architectural  structures  proposed 
allow the processor to recover from these errors efficiently. 
Our  goal  in  this  paper  is  to  investigate  this  trade  off 
between the register file access delay and its reliability and 
allow  architects  to  find  the  optimal  operation  frequency. 
Specifically, 
the  following 
contributions:
(cid:120)(cid:3) We  present  a  realistic  model  that  determines  the 
probability  of  an  error  for  a  given  cycle  time  of  a 
register,
this  paper  we  make 
in 
(cid:120)(cid:3) We present simulation results showing that a significant 
the  registers  are  not  utilized  for  a 
fraction  of 
representative processor architecture,
(cid:120)(cid:3) We propose a novel error recovery scheme that exploits 
these underutilized registers, 
(cid:120)(cid:3) We study how different error recovery mechanisms can 
be employed by a high-performance microprocessor,  
(cid:120)(cid:3) We  present  simulation  results  investigating  an  optimal 
point  for  trading  off  the  reliability  for  reducing  cycle 
time of a register file in a representative architecture.
High-performance  processors  are  aggressive:  they  try  to 
fetch  and  execute  multiple  instructions  per  cycle,  are 
speculative.  In  such  processors,  there  are  two  important 
hardware loops that affect performance: Branch Loop and 
Memory  Loop  [1].  The  Branch  Loop  includes  the  stages 
between  when  a  prediction  for  the  outcome  of  a  branch 
instruction  is  made  and  when  the  outcome  of  the  branch 
instruction  is  found.  The  Memory  Loop  includes  stages 
between a load operation is scheduled and the cache access 
is made. The lengths of these loops are arguably the most 
essential  components  in  the  overall  performance  of  a 
processor [7]. The longer the loop, the longer it will take to 
recognize a misprediction and recover from it. For all high-
performance  microprocessors,  register  file  access  stage(s) 
are  in  both  of  these  loops.  Hence,  the  access  latency  to  a 
1 Note that, we do not vary the supply voltage (Vdd). We change 
the input clock frequency.  
1
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
register  file  is  likely  to  have  a  significant  impact  on  the 
overall performance. Our proposed schemes aim to achieve 
reduced access latency for the register file. Particularly, in 
Section 5, we show that the number of register file access 
pipeline stages can be reduced by as much as 75%, thereby 
reducing the average number of execution cycles of SPEC 
applications by 11.5% on average. By allowing the register 
file  to  operate  at  higher  frequencies,  we  will  allow  larger 
register files to be implemented. 
In  the  next  section,  we  present  a  study  investigating  the 
relation  between  the  cycle  time  and  error  probability  in 
register file. Section 3 gives an overview of how the errors 
are  detected  and  corrected.  In  Section  4,  we  discuss  our 
novel  error  correction  schemes.  Section  5  presents  the 
experimental results. In Section 6, we overview the related 
work and Section 7 concludes the paper with a summary. 
2.  FREQUENCY VS. RELIABILITY
We  present  an  analytical  framework,  which  relates 
reliability  with  overclocking  scheme  used  in  the  register 
file. This section discusses the model that we have used in 
our work.
clock frequencies, a circuit node may suffer from reduced 
voltage  swing,  since  there  is  not  enough  time  to  fully 
charge or discharge the load capacitance. Cfs in Figure 1 is 
the  clock  cycle  time  required  to  obtain  the  full  voltage 
swing (Vfs) from zero to Vdd. Note that the supply voltage 
is kept constant at Vdd.
Figure  10  illustrates  the  decrease  of  voltage  swing  (Vs) 
with the decrease of clock cycle time (C). The clock cycle 
time  and  the  voltage  swing  are  normalized  against  the 
clock  cycle  at  full  swing  (Cfs)  and  the  full  swing  voltage 
(Vfs), respectively. The relative voltage swing is defined as 
Vsr  =  Vs/Vfs  and  the  relative  cycle  time  Cr  =  C/Cfs.  If  the 
voltage swing changes, all the signals become faster by the 
same  ratio  independent  of  the  capacitive  load  at  a  circuit 
node. Note that the change of voltage swing slows down at 
longer  clock  cycle  time.  This  shape  correctly  maps  the 
change of actual signals on-chip with time. Any signal at a 
circuit node rises quickly at the beginning and as the signal 
reaches close to the full swing value it takes longer time for 
a certain change. The curve in Figure 1 has been produced 
by  simulating  a  chain  of  gates  driven  by  an  inverter  at 
different frequencies with constant supply voltage Vdd.
at 0.3Cfs
at Cfs
Figure 1. Voltage at a circuit node at two different frequencies 
e
g
a
t
l
o
v
e
v
i
t
a
l
e
r
)
r
s
V
(
g
n
i
w
s
1
0.8
0.6
0.4
0.2
0
____
CLK
D
CLK
Q 
CLK
____
CLK
Q
Figure 3. A simple D Flip-Flop 
Vfs
0.89Vfs0.78Vfs
0.67Vfs
0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
1
relative cylce time (Cr )
0.39Vfs
0.50Vfs
0.56Vfs
0.61Vfs
Figure 2. Decrease of voltage swing with increase of frequency 
Injection  of  noise  into  a  circuit  node  causes  a  signal 
deviation at that node. This signal deviation will affect the 
operation of the circuit or circuit block driven by the victim 
net. A functional failure is possible when induced noise is 
propagated  and  wrongly  evaluated  at  the  primary  output. 
The parameters that determine if there will be a logic error 
are  (i)  the  amplitude  and  the  duration  of  the  noise  pulse, 
(ii) the type of the victim node and the circuit connected to 
the  victim  node,  and  (iii)  the  signal  condition  on  the 
affected  node.  It  is  important  to  note  that  with  increasing 
Figure 4. Noise immunity curves of a D flip-flop at various voltage 
swings
With a reduced signal level, a circuit node is more likely to 
suffer  from  logic  failure  due  to  a  certain  level  of  noise. 
Therefore, increasing frequency leads to higher probability 
of  logic  failure  at  a  circuit  node  due  to  reduced  voltage 
swing.  The  main  advantage  of  static  logic  over  dynamic 
logic  is  its  robustness  under  the  influence  of  noise.  But 
static  logic  may  suffer  from  logic  failure  if  there  is  a 
feedback loop. A static D flip-flop (as in Figure 3), which 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
2
is  common  in  registers,  has  a  feedback  loop  that  cannot 
recover  from  noise-induced  errors.  In  these  types  of 
circuits there are three possible points where noise can be 
injected:  the  input,  the  clock  and  the  feedback  loop.  The 
feedback loop is the most sensitive to noise. Even a small 
noise pulse on the feedback loop when the clock is falling 
or inactive will be propagated repeatedly through the loop 
and may ultimately destroy the logic information stored in 
the flip-flop. A set of noise immunity curves for the D flip-
flop  in  Figure  3  is  presented  in  Figure  4,  which  plots  the 
relative  noise  duration  (Dr)  against  the  relative  noise 
amplitude  (Ar)  at  various  voltage  swings.  Noise  pulses  of 
various  amplitudes  and  durations  have  been  injected  into 
the  feedback  loop  of  a  D  flip-flop  at  different  voltage 
swings,  while  keeping  Vdd  constant.  SPICE  simulations 
were  used  to  determine  the  set  of  noise  amplitudes  and 
durations  that  cause  a  logic  failure  for  different  voltage 
swing  levels.  The  area  above  each  curve  in  Figure  4 
represents  the  amplitudes  and  durations  of  a  noise  pulse 
that  can  cause  logic  failure.  Hence,  the  lower  the  voltage 
swing the larger the area of noise amplitudes and durations 
that  can  cause  an  error.  The  relative  noise  amplitude  is 
defined  as  Ar  =  A/Vfs,  where  A  is  the  amplitude  of  the 
noise pulse, and the relative duration of noise Dr = D/Cfs,
where  D  is  the  duration  of  the  noise  pulse.  The  highest 
curve is for the full voltage swing Vfs (swing from zero to 
Vdd). The lower curves illustrate noise immunity at voltage 
swings smaller than the full swing. It is important to note 
that  the  noise  amplitudes  and  durations  are  not  equally 
probable. The probability of smaller noise amplitudes and 
noise  durations  are  higher  than  larger  amplitude  pulses 
with longer duration.
(1) 
number of cases 
0.05*22n
0
Figure 5. Noise amplitude at various switching combination of 
neighboring lines of a victim line 
Consider a victim line, which has n neighbors significantly 
coupling  to  it.  For  noise  injection  into  the  victim  line  the 
total number of switching combinations of the neighboring 
lines is 22n. Only one switching combination results in the 
worst-case  noise  amplitude,  which  occurs  when  all  the 
neighboring  lines  switch  in  the  same  direction.  However, 
the  number  of  cases  where  the  effects  of  most  of  the 
neighboring  lines  cancel  each  other  resulting  in  small 
amplitude of noise is large. We have found the number of 
switching  cases  between  these  two  limiting  cases,  which 
result  in  a  certain  noise  amplitude  range.  The  results  are 
3
plotted in Figure 5. This distribution can be approximated 
by an exponential as in (1). 
Number of cases = 
(cid:16)
AKeK
2
1
(1)
The  exact  constants  K1  and  K2  depend  on  the  number  of 
lines  (n)  coupling  to  the  victim  line.  For  large  n  (greater 
than  16)  this  curve  saturates  to  continuous  probability 
distribution of the form  
8.28
(cid:16)
rA
(
rAP
)
(cid:32)
*8.28
e
 where
(cid:31) rA0
(cid:102)(cid:31)
(cid:32)rDP
(
)
10
(cid:32)rDP
(
)