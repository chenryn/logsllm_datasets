completely synchronized manner, each thread can be executed
within a threshold, and the time differences between any two
threads have an upper limit. We deﬁne this upper limit as
Tns threshold.
Fig. 1: ARMv8-A Security Model [1]
two generic requirements. First, it should be guaranteed to
route secure interrupts to be handled by the secure world,
even when the current execution is in the normal world.
Thus, it protects secure interrupts against potential intervention
from non-secure software. Second, it should be able to route
the non-secure interrupts to the normal world when current
execution is in the secure world. When the non-secure interrupt
is conﬁgured to be routed to EL3, the secure monitor in
EL3 can save the state of software in secure world before
handing the interrupt to non-secure software. In this case, the
secure world is preemptive. When the non-secure interrupt is
conﬁgured to be routed to the S-EL1 or S-EL0, the secure
software can either hand the interrupt
to the non-secure
software in a preemptive mode, or ignore the interrupt until
its running task completes in a non-preemptive secure mode.
OP-TEE OS [28] is an open-source secure operating system
that supports preemptive secure world.
III. EVASION ATTACKS ON MULTI-CORE PROCESSORS
A. Assumptions and Threat Model
We assume the secure world can be trusted and all the
introspection components in the secure world are secure from
attacks in the normal world. The asynchronous introspection
can run randomly on any core at any time, and it cannot be
intercepted by the normal world. We assume the asynchronous
introspection does not suspend the rich OS on all cores;
otherwise, it will face the same poor user experience problem
as that on single-core processors. We assume the rich OS can
be compromised and the attacker can bypass the existing syn-
chronous introspection mechanisms to gain root privilege [26],
[35] (see discussion in section VII-A). We assume the attack is
an Advanced Persistent Threat (APT), which aims to maintain
its presence on the target and makes various effort to remain
undetected. For example, a key-logger may collect all user
inputs on the keyboard by intercepting a system interrupt,
while the hijacking is detectable to the introspection. In this
case, whenever the introspection is running, the key-logger
should stop the attack and clean its attack trace to camouﬂage
its existence; Meanwhile, for all the other time, it remains in
the attacking phase.
B. New Attack Surface
On multi-core ARM processors, attackers may defeat the
existing asynchronous introspection by satisfying two require-
291
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
Ask one(cid:2)core(cid:2)for
introspection at
t_start
S-EL1(cid:2)starts the 
introspection
Ts_switch
S * Ts_1byte
Touches the
ﬁrst(cid:2)byte of M bytes 
Timeline
Secure World
Normal World
Tns_delay =(cid:2)Tns_sched + Tns_threshold
M * Tns_1byte 
Realize(cid:2)one(cid:2)core(cid:2) 
enters(cid:2)secure world 
Recover(cid:2)the malicious 
byte as(cid:2)benign
Fig. 3: Race Condition Between Two Worlds on Multi-Core System
If thread i ﬁnds any core x’s latest time x is earlier
than its reporting time and the latency is larger than the
threshold, namely, time i > (time x + Tns threshold), then
this thread reports that core x switches to the secure world.
To remain stealthy, we can afford to have the threads sleep
for a time interval. We assume the threads can be sched-
uled with the average frequency fns sched, so between any
two consecutive rounds of Time Comparer, there is a delay
Tns sched = 1/fns sched. Finally,
the prober needs time
Tns delay = Tns sched + Tns threshold to detect that one core
enters the secure world.
We implement and evaluate this user-level prober on the
ARM Juno development board (see Section IV-A). When
running one round of probing every 8 seconds, we found
the Tns delay is smaller than 5.97 × 10−3 s while the average
time for one core to conduct a kernel
integrity check is
8.04 × 10−2 s. We can see the prober is capable of detecting
the running of a typical TrustZone-based kernel
integrity
checking. Since each step of the prober requires no modiﬁ-
cation with OS kernel privilege, it is stealthy and useful to
check if the secure world is ever entered.
2) Race Condition on Multi-core Processors: One state-
of-the-art defense mechanism against evasion attacks is to
trigger the security checking randomly. However, on multi-
core systems, we observe that as long as the normal world is
not frozen on all cores, there exist a race condition between
the normal world to remove the attacking traces and the
secure world to detect the attacking traces. We assume the
introspection will check N bytes of critical memory and the
normal world needs to clean M bytes of attacking traces.
We formalize the race condition between the evasion attacks
and the asynchronous introspection. We suppose the secure
world requests to start the asynchronous introspection at the
time moment t start. To switch one core to the secure world
for conducting introspection, the ARM processor needs to
save the normal world context of this core and then switch
to the secure world. We deﬁne this context switching period
as Ts switch. Thus, the moment that the secure world starts
the integrity checking can be as early as t start + Ts switch.
We deﬁne the time for the secure world to inspect one byte
as Ts 1byte. Since the secure world assumes all N bytes may
be vulnerable while it does not know exactly what bytes are
modiﬁed by the attacker, it may check S bytes before it
touches any malicious byte where 0 ≤ S ≤ N−M. Therefore,
the introspection cannot ﬁnd any malicious bytes before the
time moment t start + Ts switch + S ∗ Ts 1byte.
From the attacker’s point of view, since she wants to
attack the system with the longest duration (e.g., to collect
inputted password), she would only stop the attack and hide the
attacking trace if she believes there is an introspection. If it can
predict the t start, it can easily hide before the introspection
starts. When the t start is unknown or unpredictable, the
attacker need to detect it by probing the secure world’s state.
We deﬁne the probing delay for the attacker to notice one core
entering the secure world as Tns delay. Assume the time for the
attacker to recover one malicious byte is Tns 1byte. The total
recovering time for the attacker is Tns recover = M∗Tns 1byte.
Then after the moment t start + Tns delay + Tns recover,
the secure world cannot detect the malicious modiﬁcation.
The timing relationship between the two worlds is shown in
Figure 3. Finally, for the attacker that is able to escape from
the introspection, the condition 1 should be satisﬁed :
(Ts switch + S ∗ Ts 1byte) > (Tns delay + Tns recover)
We can see that the key element for evasion attacks to
win the race condition is to minimize the probing delay
Tns delay. Though the user-level prober shows the capability
of understanding the secure world state stealthily, its probing
stability and accuracy cannot be guaranteed. Particularly, when
one core is scheduled with several
threads that have the
same or higher schedule priority than the probing thread,
the prober’s Tns sched is increased. To improve the probing
accuracy, we should minimize the detection delay. In the next
section, we present a new evasion attack called TZ-Evader
based on a more accurate kernel-level prober.
(1)
C. TZ-Evader
TZ-Evader includes two components: a kernel-level attack
module that conducts the persistent attack on the OS and
removes the attacking trace accordingly; a ﬁne-grained kernel-
level prober module that can accurately and reliably monitor
the running state of each core. The kernel-level prober also
contains two components Time Reporter and Time Comparer,
the same as the user-level prober. After obtaining the root
privilege in rich OS, the prober module is loaded. If the prober
can receive the time reported from all CPU cores, TZ-Evader
believes there is no introspection in the secure world and keeps
the attack active on the rich OS. Once the prober module
292
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
reports that one core may be switched to the secure world, TZ-
Evader begins to remove its attacking trace. We provide two
implementation options for the kernel-level prober. The ﬁrst
option KProber-I is based on intercepting the timer interrupt
to inject the prober in the rich OS,and the second option
KProber-II works by manipulating the real-time scheduler of
the Linux kernel to add the prober as a high priority process
to be scheduled.
1) KProber-I: On ARM processors, each core has its own
timers to generate time interrupts. The Time Reporter and
Time Comparer are injected into the normal world timer
interrupt handler, so as to ensure the prober being executed
with the same frequency as the timer interrupts. After this hi-
jacking, for any incoming timer interrupt to core i, the interrupt
handler updates the time i into its corresponding buf f er i
and compares it with other n − 1 cores’ time reports before
resuming the normal timer interrupt handler. Linux kernel
is typically conﬁgured as the CON F IG N O HZ IDLE
mode, which means when the core is not in the IDLE state, the
per-core timer raises the timer interrupt for scheduling-clock
ticks periodically with the frequency of HZ. For most versions
of the Linux kernel, 100 ≤ HZ ≤ 1000 [13]. To avoid
any core entering the idle mode, KProber-I keeps running
a user-level multi-threads program on each core. KProber-I
can guarantee to work with a frequency no less than HZ
on any core, no matter how many tasks are running on that
CPU core. Though this implementation option can achieve
the highest time accuracy from the rich OS perspective, it
requires to modify the timer interrupt handler, which may
introduce extra attacking trace for the defender to detect. In
section III-C2, we present another implementation without
modifying any kernel static area. Moreover, since there are
many potentially unknown mechanisms to manipulate the
handler, the defender has to scan the entire kernel for detecting
all potential preparation traces, which gives KProber-I a larger
chance to be recovered as we evaluated in Section IV-C.
2) KProber-II: This prober utilizes the Linux’s real-time
(RT) scheduler to ensure a reliable execution of Time Reporter
and Time Comparer. According to the Linux kernel design,
RT scheduler has higher scheduling priority than the default
Linux CFS scheduler, which is responsible for scheduling most
of Linux application threads. Meanwhile, RT scheduler can
be used to schedule tasks with higher priority. Therefore, by
setting the prober with the highest priority of RT scheduler,
KProber-II can protect the reliable execution of Time Reporter
and Time Comparer from being affected by either CFS-
scheduled threads or low priority RT-scheduled threads.
Theoretically speaking, the timer-interrupt based prober is
more stable than the RT scheduler based prober, since the
frequency of the RT scheduler relies on the timer interrupt.
However, injecting a prober into the interrupt handler demands
more engineering efforts than simply increasing the priority of
the attacking threads using the real-time scheduler. We present
more implementation details in Section IV-A1.
IV. TZ-EVADER IMPLEMENTATION AND EVALUATION
A. TZ-Evader Implementation
We develop a prototype of TZ-Evader on ARM Juno r1
development board [4], which is featured with the ARM
big.LITTLE technology that consists of a 4-core Cortex-
A53 “LITTLE” processor for maximum power efﬁciency and
a 2-core Cortex-A57 “big” processor to achieve maximum
computation performance. The secure monitor running in EL3
is provided by ARM trusted ﬁrmware (ARM-TF), and the
secure world OS running in S-EL1 is modiﬁed based on
the Test Secure Payload (TSP) of ARM-TF [3]. We modify
the secure timer interrupt handler in the TSP to perform the
integrity check over the normal world. The normal world runs
OpenEmbedded LAMP OS with kernel version lsk-4.4-armlt
in EL1, which is downloaded using the script from Juno Wiki
of ARM Community [5].
1) Kernel-Level Prober Implementation: We deploy two
types of KProber to probe a speciﬁc core or a randomly chosen
core. To probe a speciﬁc core’s running state, we ﬁx one thread
of Time Reporter on the targeted core and ﬁx another thread
containing Time Reporter and Time Comparer on another core.
To probe a random CPU core, we assign each core with one
thread that contains Time Reporter and Time Comparer.
To implement
the timer interrupt based KProber-I, one
key technical issue is to hijack the time interrupt handler.
In ARMv8-A architecture, the address of the original timer
interrupt address is saved in the IRQ Exception Vector, which
can be located in the AArch64 Exception Vector Table [2]. The
table’s starting address is saved in the Vector Based Address
Registers V BAR ELi(1 ≤ i ≤ 3). After locating the timer
interrupt, we modify its corresponding table entry to redirect
it to our hijacking code.
For
the real-time scheduler based KProber-II, we use
the function pthread setschedparam() to schedule the
targeted threads with the real-time scheduler. We use
the rt-scheduler SCHED F IF O with the priority pa-
rameter sched get priority max(SCHED F IF O) for all
KProber-II’s threads. After investigating the relationship be-
tween thread sleeping and CPU utilization, we set the sleep
time Tsleep = 2 × 10−4 s and we assume the Tns sched =
Tsleep. In the following experiments, we implement Time
Reporter with KProber-I and Time Comparer with KProber-
II to demonstrate that both techniques can achieve reliable
probing results.
2) Sample Kernel-Level Attack: To facilitate the evaluation
of TZ-Evader, we implement a kernel-level attack that can
hijack the GETTID system call. Successful system hijacking
requires modifying an entry of the system call table, and this
attack modiﬁes one 8-bytes address of the system call table.
Since the system call table is deﬁned as text kernel data,
TrustZone-based introspection can detect the GETTID system
call is hijacked if the introspection scans and detects any of
these 8 bytes is modiﬁed. Note there are many other kernel
level attacking vectors, we just use GETTID hijacking attack
as an example to study the evasion attacks.
293
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
B. Attack Evaluation
1) Introspection Time Delay: We ﬁrst evaluate the time
delay of the introspection. As we mentioned in the Equation 1,
TrustZone-based asynchronous introspection suffers two major
delays: Ts switch and s ∗ Ts 1byte. To evaluate Ts switch, we
execute the context switching function of Test Secure Payload
Dispatcher 50 times on one A53 core and one A57 core. The
result shows for a secure timer interrupt raised at t start, the
time for the dispatcher to pause the normal world and jump
to the related timer interrupt on the A53 core or A57 core are
similar, ranging from 2.38 × 10−6 s to 3.60 × 10−6 s.
Then we evaluate Ts 1byte regarding two different introspec-
tion techniques. Traditional hardware-assisted asynchronous
kernel introspection takes a snapshot of the kernel [47], [48]
and then analyzes the memory copy. Since this copy remains
inaccessible by the attacker, the analysis steps after taking
the snapshot are not vulnerable to the TOCTTOU attack.
Meanwhile, since the secure world and the normal world
share the system hardware, TrustZone-based introspection can
directly read the normal world OS’ kernel from the secure
world. After reading the kernel data, it can hash the data and
compare the hash value to a pre-calculated authorized value.
In our experiment, we measure the time for the secure world
to take the snapshot and hash the kernel data. We use djb2 [31]
as the hash function. Each measurement is repeated 50 times.
Table I shows that directly hashing the kernel’s memory is
more efﬁcient than capturing and hashing the snapshot. In
addition, it consumes less memory than the snapshot approach.
Therefore, directly hashing the memory is better than taking
snapshot when the asynchronous introspection targets at the
static kernel area. We also ﬁnd that it takes less time to conduct