(PIR) [23, 24, 35, 38, 40], in contrast, can only provide pri-
vacy against computationally bounded adversaries. PIR
schemes seek to provide as much privacy as the trivial con-
struction of retrieving the entire database, but with smaller
than linear communication complexity in the number of en-
tries. While traditionally PIR protocols use homomorphic
cryptosystems like [18, 46] to compute the PIR response to
queries, their practicality and scalability is limited due to the
expensive operations involved. New lattice-based PIR has
received signiﬁcant attention in recent years [2, 23, 30, 36]
for their improved speed in comparison to number-theoretic
algorithms, allowing for faster processing.
Oblivious-RAM (ORAM) techniques [25, 28, 48, 54], in
contrast to read-only PIR, allow client read and writes to be
hidden from the server. While the added protection to write
patterns allows for greater ﬂexibility, the overhead for write
operations has little utility in the one-sided key distribution
strategy we use for this work.
There has been signiﬁcant interest in the industry on
improving Wi-Fi client security for public hotspots. Protocol
attacks ranging from key discovery to multi-layer Evil Twin
impersonation [11, 26, 59] are periodically being discovered
and mitigated. New protocols and services that improve on
the client experience and security have also been proposed [37,
60]. Yet the number of available anonymous authentication
services for hotspots remains low, and is subject to the
same limitations for group re-keying and message size as the
schemes above.
3. ANONYMITY BY PIR
As stated on Section 1 TracEdge provides anonymous client
authentication, and as consequence of the mechanisms in
our protocol no traﬃc, AP usage patterns, nor identities
are disclosed to the server. More formally, given a group
of n clients, and access to a simulator of authentication ex-
changes, an adversary is not able to guess the client identity
for a given exchange with probability P > 1
n + ε, where ε is
“negligibly” small, depending only on the security parameters
of underlying cryptographic primitives. In addition, further
executions of the protocol provide no advantage to the adver-
sary. At the end of the authentication, the only information
the server learns is whether the connecting client has proved
membership to the group.
3.1 Adversary Model
TracEdgetargets protection against covert adversaries, see
[4] for an overview. In contrast to a semi-honest adversary,
a covert adversary is not bound to follow protocol execution
and observe, but can arbitrarily (maliciously) deviate from
the protocol to reach their goal. Yet, an important object of
such an adversary is to remain covert, i.e., not be caught in
performing malicious activities.
Covert adversaries are typical in scenarios where detection
of malicious behavior can have signiﬁcant consequences for
the adversary. For example, an ISP that is reported to
“cheat” on their clients’ privacy will not only lose customers
and revenues, but might even face legal consequences.
With TracEdge, we design an authentication mechanism
that will protect clients’ privacy. In case an ISP tries to
cheat, clients will be able to prove this to a third party.
13483.2 PIR Authentication
Algorithm 1 shows our basic authentication mechanism.
We assume a Public Key encryption scheme
S = (Apub, Apriv, E() , D())
exists for every client A and for which the server and clients
know U, the set of subscriber’s public keys. To make keys
publicly available, a simple, integrity protected public key
directory like PGP keyservers [47], a public ledger such as the
one in Namecoin [56], or a traditional trusted CA structure
protecting identities may be used.
We also assume every server has a public identity known
to the clients, and that client certiﬁcates are marked to only
be used on this scheme to prevent protocol composition. To
authenticate a client, the server uses a random key K, for
which it builds a table with rows EApub (K) for every client
A in U. An authenticating client A has to anonymously
and eﬃciently retrieve the entry corresponding to their key.
Then, once K is recovered, they can use it to authenticate
using a standard challenge-response mechanism.
The client A can obtain the current key K without re-
vealing its identity by performing a PIR exchange with the
server. Given the table index i0 where A’s entry resides, the
client constructs a query vector v using additive homomor-
phic encryption (detailed on Section 4.3). The server then
computes the product of the vector with each entry in the
database and adds the results to obtain a response for the
client. For a detailed presentation of the new PIR scheme
we use, see Section 4. The main insight in PIR, is that the
result is obtained by performing a computation on every
element of the database, thus hiding the value requested by
the client to the server. This is in fact an Ω(n) operation
if full anonymity in the set is desired, as any row skipped
by the server leaks information about the query. In other
words, the cost of computation may be traded oﬀ by being
anonymous in a proportionally smaller set of the users. For
instance if O (m) m  0 do
C : row ← {1 . . . n} \ A
C → S : PIR Q(row)
C ← S :
PIR Resp( Erowpub (K(cid:48)(cid:48)) ),
SigSPR
(cid:16)
(cid:17)
PIR Resp( Erowpub (K(cid:48)(cid:48)) (cid:107) ts)
C : Checks signature, computes
X = PIR Extract(PIR Resp( Erowpub (K(cid:48)(cid:48)) )
C : audit ← audit − 1
C : if Erowpub (K(cid:48)) (cid:54)= X then
K ←⊥ and report server
end
end
C ↔ S : Mutual Authentication Protocol using K
it can detect and prove to any third party when a server
has sent a key diﬀerent from the committed one, violating
its client’s trust. A misbehaving server has to trade the
amount of information they learn with the chance of being
exposed. Assume that the server commits to key K1 but
sets m entries in the table with key K2. Table 1 summarizes
the trade-oﬀ available to the misbehaving server. The server
learns diﬀerent amounts of information depending on whether
the query matches the commitment. However, any time a
client makes a query for an entry that doesn’t match the
commitment, they detect the misbehavior of the server and
can publicly expose it. While a misbehaving server learns a
limited amount of information about the identity of a client,
the probability of not being detected decreases exponentially
as a function of the number of queries.
Let DB = {ECi (Ki) , 1 ≤ i ≤ n} be a database of n au-
thorized clients, commitment K∗, and m ﬂagged keys (i.e.,
there exist m indices i where Ki (cid:54)= K∗). A system receiv-
ing a queries to rows selected uniformly at random has a
probability pnd of no client detecting a ﬂagged key:
(cid:18)
a−1(cid:89)
i=0
(cid:19)
pnd =
1 − m
n − i
Table 1: Identity Leakage vs. Server Detection.
Commit. matches No matches
(cid:16) n
(cid:17)
log(cid:0) n
m
(cid:1) bits
Yes, prob. m
n
Srv. learns
bits
Srv. exposed? No, prob. n−m
n−m
log
n
The maximum probability for a server to be undetected
by a non-ﬂagged client occurs when m = 1, in which case
the minimal amount of information will be learned. The
ﬂagged client, on the other hand, will detect the ﬂagging
unconditionally, and will have proof the server has cheated.
Assuming queries are uniformly distributed in the set of
clients, the probability of being detected after i queries is
(cid:1)i. To learn 1 bit about the identity of clients, the
1−(cid:0)1 − m
misbehaving server will be exposed with probability 1−(cid:0) 1
(cid:1)i
n
after i queries. Given the typical number of queries and
that when a server is exposed they lose the clients’ trust
irrevocably, a server cannot misbehave with impunity for any
reasonable amount of time. In Section 4.2, we will show how
multiple queries can be aggregated in a fraction on a single
PIR query.
3.5 Table Management
2
Because clients may enter or leave the authentication set
at any point, the authentication table must be managed such
that queries and row auditing present consistent results. The
operations related to table management in our model are as
follows:
Empty row creation The server computes the encryption
of key K using its own public key. This value is taken
to signify an empty row value.
Client ID Assignment At the time of registration to the
system, every client is assigned an empty table row.
This assignment will be maintained across table gen-
erations, and the value of the assigned row is commu-
nicated to the client. The server writes the encrypted
value of K for the new user on its corresponding row.