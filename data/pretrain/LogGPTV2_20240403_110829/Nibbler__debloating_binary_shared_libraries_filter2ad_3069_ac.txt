a plethora of tests related to layout and rendering, conformance
to certain web standards, UI events, and Chrome-specific APIs.
During profiling the browser loaded 63 additional libraries. After
including the used symbols in Nibbler, we included an additional
3241 functions or approximately 1MB of code. Table 3 lists the
10 (out of 84) most thinned libraries and total code reduction in
Chromium. Finally, we browsed the top-10 sites in Alexa’s list,
which did not result in new libraries being loaded. Our experiment
confirms the results of previous work [53], which showed that
profiling can be sufficient to debloat manually-loaded libraries in
certain applications.
Figure 4: Nginx throughput for vanilla Shuffler, and Nib-
bler+Shuffler, over an undefended baseline.
5.2 Benefits on Defenses
5.2.1 Continuous Code Re-randomization. By identifying and re-
moving unused code, Nibbler can reduce the overhead of certain
security techniques, thereby easing their adoption and improving
software security. Shuffler [76] is a system realizing such a tech-
nique: continuous re-randomization of a target program and all
its libraries, including its own code. It does so asynchronously,
from a background thread, preparing a new copy of the code every
20 ms (in case of Nginx), and then signaling all other threads to
migrate to this new copy. Because of this asynchronous design,
all functions must be re-randomized, during each shuffle period,
as the system cannot determine in advance what will be required.
Nibbler’s library thinning can combine excellently with Shuffler’s
defense. We fused Nibbler with Shuffler, on Nginx 1.4.6, trimming
functions that would never be used during execution, reducing the
amount of work that Shuffler must perform. Overall, we nibbled
≈1.6K functions (out of ≈6.2K) or 26%.
In our experiment, we used 4 Nginx worker processes, pinned
to 2 CPU cores; Shuffler threads (one per worker) were also pinned
to the same cores. Shuffler’s asynchronous overhead will take CPU
time away from the target program, reflecting in a throughput drop.
We ran 32 client threads (using the benchmark tool Siege [33])
pinned to 4 other cores on the same system, which was sufficient
to saturate the server. This experiment is a smaller scale version of
the Nginx experiment included in the original paper [76].
Results are shown in Figure 4. Nibbler+Shuffler performance
improves substantially when there are more Shuffler workers, and
hence more CPU time is being spent on asynchronously copying
code. In the 2-cores, 1-worker case, one core runs the Nginx worker
and one executes the Shuffler thread, so Nibbler has little impact.
However, if we assume a carefully provisioned system with few
resources to spare, Nibbler can improve Shuffler’s performance sig-
nificantly. Overall, the geometric mean of throughput improved
from 50.51% (Shuffler) to 60.54%, a relative increase of 19.87%.
This makes sense since we trimmed 26% of the code; due to
Shuffler’s design, we expect a linear increase in performance as the
amount of code decreases. Additionally, we expect these results
to scale to larger experiments, since Shuffler spends very little
time on coordination (0.3% of overall runtime [76]). If the server
is multiprocess, every process gets its own independent Shuffler
thread, and Nibbler still reduces the overhead linearly. If the server is
 0 20 40 60 80 1001 core, 1 worker1 core, 2 workers2 cores, 1 worker2 cores, 2 workers2 cores, 4 workersgeometric meanNormalized throughput (%)ShufflerNibbler+ShufflerACSAC ’19, December 9–13, 2019, San Juan, PR, USA
I. Agadakos, D. Jin, D. Williams-King, V. P. Kemerlis, and G. Portokalidis
Table 1: The effect of Nibbler on various application sets. The table summarizes library-code reduction in terms of code bytes
and functions removed. The Vanilla column corresponds to the original libraries.
Application Set
Code Reduction (Lib. Set)
App(s)
a) Coreutils
b) SPEC
c) Nginx
d) MySQL
a) + b) + c) + d)
Set Size
Functions
Code (KB)
# of Bin.
104
11
1
1
117
# of Lib. Vanilla Removed Reduction (%) Vanilla Removed Reduction (%)
11
5
7
8
16
4754
7808
8599
7979
14438
2796
5729
7015
5524
10622
58.81%
73.37%
81.57%
69.23%
73.57%
2164.61
2431.15
2917.77
2522.66
4621.53
711.01
1104.93
1632.71
1010.17
2208.93
32.85%
45.44%
55.95%
40.04%
47.80%
Table 2: Code removed from common libraries in our appli-
cation set (Coreutils, Nginx, MySQL, and SPEC CINT2006).
Table 3: 10 most debloated libraries in Chromium.
Library
librt
libattr
libgcc
libdl
libcrypto
libz
libpthread
libpcre
libc
libm
libstdc++
libgmp
libselinux
libacl
libcap
libcrypt
Unused Code
Functions
52
17
113
8
4770
83
139
21
1539
426
2719
438
225
42
21
9
(72.22%)
(53.12%)
(66.86%)
(33.33%)
(93.82%)
(40.84%)
(46.80%)
(13.29%)
(53.27%)
(66.56%)
(71.31%)
(66.46%)
(63.20%)
(60.00%)
(75.00%)
(23.08%)
Bytes
8.88 KB (71.64%)
3.35 KB (38.17%)
36.02KB (56.10%)
0.55 KB (26.70%)
1043.96 KB (83.57%)
40.84 KB (60.91%)
19.42 KB (36.89%)
33.26 KB (10.09%)
297.90 KB (24.93%)
172.16 KB (39.76%)
309.14 KB (45.04%)
176.60 KB (46.43%)
50.51 KB (53.13%)
11.75 KB (69.99%)
3.38 KB (49.97%)
0.91 KB (4.29%)
multithreaded, Shuffler’s overhead decreases as more cores become
available, and Nibbler still reduces the overhead proportionally.
5.2.2 Control-flow Integrity. Nibbler improves low-overhead, coarse
CFI schemes in two ways. First, it reduces the number of (CALL-
preceded) ROP gadgets that are accessible to attackers. To quantify
this gain, we built a gadget analysis framework (details in App. A),
atop the Capstone disassembler [54] to calculate the reduction of
CFI-resistant [78] gadgets in thinned libraries.
Table 4 reports the results of our analysis. The Suite column cor-
responds to the different applications used, along with their thinned
libraries; the numbers in parentheses indicate code reduction. Total
reports the overall reduction of the gadgets (thinned vs. vanilla) in
each library, whereas the rest of the columns (Stack – NOP) present
the reduction of certain gadget classes. For the different gadget
types, we used the semantic definitions of Snow et al. [63], with
additional (sub)categories for precision. (Gadget reduction when
CFI is not in place can be found in App. B.)
Library
libgtk
libxml2
libc
libgio
libgnutls
libnss3
libbglib
libasound
libm
libstdc++
libX11
Total
Unused Code
Functions
Bytes
4886
1260
1606
1749
826
2763
840
1053
375
842
433
20946
(49.06%)
(48.26%)
(46.93%)
(38.65%)
(36.26%)
(70.56%)
(40.64%)
(36.15%)
(61.68%)
(28.45%)
(22.29%)
(34.95%)
994.70 KB (41.03%)
423.87 KB (46.70%)
316.35 KB (26.25%)
289.00 KB (35.13%)
212.32 KB (27.76%)
172.14 KB (18.05%)
154.70 KB (32.37%)
152.99 KB (27.61%)
137.77 KB (32.00%)
115.45 KB (22.47%)
111.08 KB (19.95%)
4198.22 KB (25.98%)
Second, Nibbler reduces the number of functions that can be tar-
geted by indirect functions calls, by eliminating function pointers
that are never used in applications (Sec. 3.5). Specifically, our anal-
ysis eliminates 45.19%, 57.86%, 57.75%, and 36.60% of AT functions
in the four tested applications suites: Coreutils, SPEC, Nginx, and
MySQL; 49.08% when we combine all of them.
All in all, the reduction of the CFI-resistant gadgets is analo-
gous to the achieved code reduction, but, on average, the gadget
reduction rate(s) are higher, suggesting that Nibbler can increase con-
siderably the precision of backward-edge CFI schemes [81, 82]. More
importantly, Nibbler can eliminate certain gadget classes in vari-
ous libraries (100% reduction), like Load Reg. (load a register from
another register or the stack), Memory (memory read/write), Arith-
metic+Mem. (arithmetic computations with memory operands),
Logic (logic computations), and Branch (indirect JMP/CALL), even
on applications that experience moderate code reduction rates, such
as Coreutils, as shown in Table 4 (underlined entries). As expected,
when CFI is not present, Nibbler can achieve compelte gadget elim-
ination in less cases (see Table 6 in App. B).
5.3 Performance Overhead
Memory. Nibbler can be applied on an entire system or on smaller
sets of applications. In the latter case, if the original version of a
Nibbler: Debloating Binary Shared Libraries
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Table 4: CFI-resistant gadget reduction results. The percentages correspond to removed gadgets (thinned vs. vanilla). Entries
marked with ‘N/A’ indicate absence of certain gadget classes in vanilla.
Suite
Total
Stack
Pivot
Lift
Load Reg.
Reg.
Stack
Memory
Load
Store
Gadget Type
Arithmetic
Reg. Mem.
Logic
Branch
Reg. Mem.
jmp
call
Syscall NOP
SPEC
libpthread
libm
libc
libgcc
libstdc++
(92.79%)
(39.76%)
(42.01%)
(72.35%)
(48.88%)
N/A
N/A
97.0%
N/A
52.3%
N/A
0.0%
75.8% 91.7%
N/A
45.7%
0.0%
0.0% 50.0%
80.1%
95.7% 100.0% 100.0%
0.0%
72.6%
21.1%
76.4%
18.5%
78.0%
60.3%
79.5%
N/A
75.6%
39.8%