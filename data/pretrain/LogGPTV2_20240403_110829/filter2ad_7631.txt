# ZeroAUDIT
**Authors:** Aman Luthra, James Cavanaugh, Hugo Renzzo Oclese, Rina M. Hirsch, Xiang Fu  
**Institution:** Hofstra University  
**Date:** December 11, 2020  
**Conference:** ACSAC 2020

## Abstract
ZeroAUDIT is a privacy-preserving auditing protocol that allows for the inspection of financial transactions without revealing sensitive details. This paper introduces a novel zk-Membership Proof for Merkle Trees, enabling auditors to verify the presence of specific transactions in a Merkle Tree while maintaining the confidentiality of the underlying data. The protocol is implemented and optimized using various techniques, including Bullet Range Proofs and Chained Schnorr Groups.

## Research Question
Can we audit transactions while knowing nothing about their content?

## Our Contributions
- **zk-Membership Proof for Merkle Tree:**
  - Prove \( n \in T(r) \) given \( C(r) \) and \( C(n) \).
  - Example:
    - \( r \)
    - \( n \)

- **Implementation & Optimization:**
  - 25K lines of Golang code on Hyperledger Fabric.
  - Small exponent test.
  - Chained Schnorr Groups.
  - Pippenger’s Multi-Exponentiation.
  - Bullet Range Proofs.
  - Other optimizations.

- **ZeroAudit Protocol:**
  - Inspect each transaction at fair market price.
  - Auditor maintains fund portfolio using commitments.
  - Certify net asset value at any time.
  - No trusted setup required.
  - Equivalence proof of commitments over two groups of different prime orders.
  - Utilizes range proofs.

## ZeroAUDIT Architecture
- **Participants:**
  - Fund B, Fund A, Investor, Fund C, Fund D, Fund E
  - ZeroAUDIT (as Auditor and Accounting)
  - Brokerage

- **Merkle Tree:**
  - Example: Buy 10 units of Fund A for $1000
  - FundID, StockID, Quantity, SpendKey

## Trading Operation
- **Example:**
  - Fund A buys 10 shares of Stock 1.
  - Two spend keys and two new certificate roots.
  - Encrypt: "Buy 10 shares of Stock 1"
  - zk-Proof:
    1. Fund A has enough cash (range proof).
    2. Spending key is valid.
    3. Quantities in the same as in the commitment.

## Verify Fair Market Price
- **Given:**
  - Price Merkle Tree
  - SID: 1, Price: 20
  - SID: 2, Price: 30
- **Prove:**
  - The transaction was conducted at the fair market price.

## Chained Schnorr Groups
- **Commitment:**
  - \( \text{Commit}_1(P) \in G_1 \subseteq Z_p^* \)
  - \( \text{Commit}_2(L) \)
  - \( \text{Commit}_2(R) \)
  - \( g_2^{a} \cdot g_2^{b} \equiv m \mod p \)
  - \( g_2^{c} \cdot g_2^{d} \equiv n \mod p \)
- **Properties:**
  - Two primes \( q \mid p \): \( G_2 \) is a subgroup of \( Z_{p'}^* \)
  - \( p' = r \): \( G_1 \) is a subgroup of \( Z_p^* \)
  - Pedersen Commitment:
    - Second larger group
    - \( P = \text{hash}(L, R) \)
    - \( P = \text{Commit}_2(L, R) \)
    - \( P = g_2^{a} \cdot g_2^{b} \cdot g_2^{d} \mod p \)
    - \( G_2 \subseteq G_1 \subseteq Z_p^* \)

## Double Discrete Logarithm Proof (DDLP)
- **Commitment:**
  - \( \text{Commit}_1(P) \)
  - \( \text{Commit}_2(L) \)
  - \( \text{Commit}_2(R) \)
  - \( P = g_2^{a} \cdot g_2^{b} \cdot g_2^{d} \mod p \)
  - \( P = \text{Commit}_2(L) \cdot \text{Commit}_2(R) \cdot g_2^{D} \mod p \)
- **Key Observation:**
  - Prover knows the value of \( D \).

## Complete Merkle Tree Proof
- **Commitment:**
  - \( \text{Commit}_1(P) \)
  - \( \text{Commit}_2(L) \)
  - \( \text{Commit}_2(R) \)
- **Disjunctive Zk-Proof:**
  - Zk-Equality Proof Over Groups of Different Order
  - [Camenisch CRYPT’99] Chain Commitments on Unknown Order
  - Our Approach: No Trusted Setup
  - Range Proof to Confine Values [Special Chained Schnorr Setting]
  - Challenge: Huge Range \( 0, 2^{64} \)
  - Incorporate Inaccurate Range Proof

## System Implementation
- **Language:**
  - 25K lines of Golang
- **Platform:**
  - Hyperledger Fabric

## Performance Data
- **Extra Cost:**
  - Paid for no trusted setup
- **Proof Size:**
  - Large (needs improvement)

## Conclusion
- **ZeroAUDIT:**
  - Inspects trading transactions without knowing details.
  - Anonymous Merkle Tree Membership zk-Proof.
  - No trusted setup.
  - Simple assumptions: DLP + Random Oracle.
  - Log(n) proof size and verification time (n: anonymity set size).
  - Equality Proof (on different order groups) using range proofs.
  - Various optimization techniques.

## Questions
- [Open for questions]

---

This revised version aims to provide a clearer, more structured, and professional presentation of the ZeroAUDIT protocol.