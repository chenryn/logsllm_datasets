### Subtyping and Type System Overview

In the given system, types are structured in a way that supports subtyping, which is crucial for ensuring that operations on data are type-safe. The following rules define the subtyping relationships:

- **Public Types**: A type \( T \) is considered public if it is a subtype of `Public`. Variables of type `Public` (and not some subtype of it) may point to tainted terms, which are terms constructed by an adversary.
- **Sum Types**: For any types \( T_1 \) and \( T_2 \), \( T_1 + T_2 \) is a type that can be either \( T_1 \) or \( T_2 \). This sum type is associative and commutative.
- **List Types**: A list type `List(T1, ..., Tn)` is a subtype of `Public` if each \( T_i \) is a subtype of `Public`.
- **Subtype Addition**: If \( T_1 \) and \( T_2 \) are subtypes of \( T \), then \( T_1 + T_2 \) is also a subtype of \( T \).
- **Type Order**: The order of types is defined as follows:
  - Public types, `SecData`, and `SNonce` have an order of 0.
  - `SKi(T)` has an order of \( i \).
  - The order of lists and sums is the maximum order of their components.
  - A type `SKi(T)` is valid if the order of \( T \) is strictly less than \( i \).

### Type System Constraints

- **Symmetric Key Security**: The type system does not allow making symmetric encryption keys available to the adversary. This ensures that symmetric keys are not revealed before they are used for encryption.
- **Channel Typing**: The typing function \( \Gamma \) maps free variables of a process to types. It also maps channels between principals to types, with separate types for sent and received messages. For abstract channels, the types must satisfy certain constraints:
  - For channels in `Chana`, both send and receive types must be public.
  - For channels in `Chani`, both send and receive types must be `Public`.
  - For channels in `Chans`, `Chana`, and `Chani`, the inequality \( \Gamma(c, s) \leq \Gamma(c, r) \) must hold.
  - For channels in `Chanu`, the receive type must be `SecRD` and the send type must be `AllRD`.

### Expression Typing Rules

The typing judgments for expressions are defined as follows:

- **Subtype Inference**: If \( \Gamma \vdash e : T \) and \( T \leq T' \), then \( \Gamma \vdash e : T' \).
- **Constant Typing**: Constants are typed as `PubRD`.
- **Variable Typing**: Variables are typed according to their assigned type in \( \Gamma \).
- **List Construction**: A list of elements is typed as `List(T1, ..., Tk)` if each element \( e_i \) is typed as \( T_i \).
- **Storage Operations**: Storing a `PubRD` value results in `PubData`, while storing a `SecRD` value results in `SecData`.
- **Key Generation**: Symmetric and asymmetric key generation functions produce keys of appropriate types.
- **Encryption and Decryption**: Encryption and decryption operations are typed based on the types of the keys and the data being encrypted or decrypted.

### Process Typing Rules

The typing rules for processes ensure that the communication and control flow are type-safe:

- **Zero Process**: The zero process is trivially type-safe.
- **Parallel Composition**: Parallel composition of type-safe processes is type-safe.
- **Send and Receive**: Sending and receiving messages on channels must respect the channel types.
- **Let Binding**: Let bindings are type-safe if the expression and the body are type-safe.
- **Conditional Statements**: Conditional statements are type-safe if the condition and both branches are type-safe.

### Example

Consider the processes \( A \) and \( B \) from Figure 4. A valid typing \( \Gamma \) can be defined with the domain \( \{c1, c2, ci, cu\} \times \{s, r\} \):

- \( \Gamma(ci, s) = \Gamma(ci, r) = \text{Public} \)
- \( \Gamma(cu, r) = \text{SecRD} \)
- \( \Gamma(cu, s) = \text{AllRD} \)
- \( \Gamma(c1, s) = \Gamma(c1, r) = \text{EK}(T1) \)
- \( \Gamma(c2, s) = \Gamma(c2, r) = \text{EK}(T2) \)

Where:
- \( T1 = \text{List}(\text{SNonce}, \text{SK1}(\text{SecData}), \text{EK}(T2)) \)
- \( T2 = \text{List}(\text{SNonce}, \text{Public}) + \text{SK1}(\text{SecData}) \)

In process \( A \):
- Variable \( kA_1 \) gets the type \( \text{DK}(T1) \).
- Variable \( sA \) gets the type `SNonce` in the first case and `Public` in the second.
- The expression `pubenc(kX, list(sA, kA))` is typed as `Public` using the (PET) rule in the first case and (PEU) in the second.

In process \( B \):
- Variable \( kB_1 \) gets the type \( \text{DK}(T2) \).
- Variable \( l1 \) gets the sum type \( T2 \).
- The variable \( kAB \) gets the type \( \text{SK1}(\text{SecData}) \).
- The variable \( kAB2 \) also gets the sum type \( T2 \).

By applying the typing rules, it can be verified that both processes \( A \) and \( B \) are type-safe under the given typing \( \Gamma \).