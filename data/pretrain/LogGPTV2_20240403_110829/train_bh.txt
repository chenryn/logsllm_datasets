.b esrch
record not found.
.pp
.br setutent (),
.br pututline (),
and the
.br getut* ()
functions can also fail for the reasons described in
.br open (2).
.sh files
.tp
.i /var/run/utmp
database of currently logged-in users
.tp
.i /var/log/wtmp
database of past user logins
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lb lb lbx
l l l.
interface	attribute	value
t{
.br getutent ()
t}	thread safety	t{
mt-unsafe init race:utent
race:utentbuf sig:alrm timer
t}
t{
.br getutid (),
.br getutline ()
t}	thread safety	t{
mt-unsafe init race:utent
sig:alrm timer
t}
t{
.br pututline ()
t}	thread safety	t{
mt-unsafe race:utent
sig:alrm timer
t}
t{
.br setutent (),
.br endutent (),
.br utmpname ()
t}	thread safety	mt-unsafe race:utent
.te
.hy
.ad
.sp 1
in the above table,
.i utent
in
.i race:utent
signifies that if any of the functions
.br setutent (),
.br getutent (),
.br getutid (),
.br getutline (),
.br pututline (),
.br utmpname (),
or
.br endutent ()
are used in parallel in different threads of a program,
then data races could occur.
.sh conforming to
xpg2, svr4.
.pp
in xpg2 and svid 2 the function
.br pututline ()
is documented to return void, and that is what it does on many systems
(aix, hp-ux).
hp-ux introduces a new function
.br _pututline ()
with the prototype given above for
.br pututline ().
.pp
all these functions are obsolete now on non-linux systems.
posix.1-2001 and posix.1-2008, following susv1,
does not have any of these functions, but instead uses
.pp
.rs 4
.ex
.b #include 
.pp
.b struct utmpx *getutxent(void);
.b struct utmpx *getutxid(const struct utmpx *);
.b struct utmpx *getutxline(const struct utmpx *);
.b struct utmpx *pututxline(const struct utmpx *);
.b void setutxent(void);
.b void endutxent(void);
.ee
.re
.pp
these functions are provided by glibc,
and perform the same task as their equivalents without the "x", but use
.ir "struct utmpx" ,
defined on linux to be the same as
.ir "struct utmp" .
for completeness, glibc also provides
.br utmpxname (),
although this function is not specified by posix.1.
.pp
on some other systems,
the \fiutmpx\fp structure is a superset of the \fiutmp\fp structure,
with additional fields, and larger versions of the existing fields,
and parallel files are maintained, often
.i /var/*/utmpx
and
.ir /var/*/wtmpx .
.pp
linux glibc on the other hand does not use a parallel \fiutmpx\fp file
since its \fiutmp\fp structure is already large enough.
the "x" functions listed above are just aliases for
their counterparts without the "x" (e.g.,
.br getutxent ()
is an alias for
.br getutent ()).
.sh notes
.ss glibc notes
the above functions are not thread-safe.
glibc adds reentrant versions
.pp
.nf
.b #include 
.pp
.bi "int getutent_r(struct utmp *" ubuf ", struct utmp **" ubufp );
.bi "int getutid_r(struct utmp *" ut ,
.bi "              struct utmp *" ubuf ", struct utmp **" ubufp );
.bi "int getutline_r(struct utmp *" ut ,
.bi "                struct utmp *" ubuf ", struct utmp **" ubufp );
.fi
.pp
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.pp
.br getutent_r (),
.br getutid_r (),
.br getutline_r ():
.nf
    _gnu_source
        || /* since glibc 2.19: */ _default_source
        || /* glibc 
#include 
#include 
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    struct utmp entry;
    system("echo before adding entry:;who");
    entry.ut_type = user_process;
    entry.ut_pid = getpid();
    strcpy(entry.ut_line, ttyname(stdin_fileno) + strlen("/dev/"));
    /* only correct for ptys named /dev/tty[pqr][0\-9a\-z] */
    strcpy(entry.ut_id, ttyname(stdin_fileno) + strlen("/dev/tty"));
    time(&entry.ut_time);
    strcpy(entry.ut_user, getpwuid(getuid())\->pw_name);
    memset(entry.ut_host, 0, ut_hostsize);
    entry.ut_addr = 0;
    setutent();
    pututline(&entry);
    system("echo after adding entry:;who");
    entry.ut_type = dead_process;
    memset(entry.ut_line, 0, ut_linesize);
    entry.ut_time = 0;
    memset(entry.ut_user, 0, ut_namesize);
    setutent();
    pututline(&entry);
    system("echo after removing entry:;who");
    endutent();
    exit(exit_success);
}
.ee
.sh see also
.br getutmp (3),
.br utmp (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" this man page is copyright (c) 1998 heiner eisen.
.\"
.\" %%%license_start(verbatim_one_para)
.\" permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" %%%license_end
.\"
.\" $id: x25.7,v 1.4 1999/05/18 10:35:12 freitag exp $
.\"
.th x25 7 2021-03-22 "linux" "linux programmer's manual"
.sh name
x25 \- itu-t x.25 / iso-8208 protocol interface
.sh synopsis
.nf
.b #include 
.b #include 
.pp
.b x25_socket = socket(af_x25, sock_seqpacket, 0);
.fi
.sh description
x25 sockets provide an interface to the x.25 packet layer protocol.
this allows applications to
communicate over a public x.25 data network as standardized by
international telecommunication union's recommendation x.25
(x.25 dte-dce mode).
x25 sockets can also be used for communication
without an intermediate x.25 network (x.25 dte-dte mode) as described
in iso-8208.
.pp
message boundaries are preserved \(em a
.br read (2)
from a socket will
retrieve the same chunk of data as output with the corresponding
.br write (2)
to the peer socket.
when necessary, the kernel takes care
of segmenting and reassembling long messages by means of
the x.25 m-bit.
there is no hard-coded upper limit for the
message size.
however, reassembling of a long message might fail if
there is a temporary lack of system resources or when other constraints
(such as socket memory or buffer size limits) become effective.
if that
occurs, the x.25 connection will be reset.
.ss socket addresses
the
.b af_x25
socket address family uses the
.i struct sockaddr_x25
for representing network addresses as defined in itu-t
recommendation x.121.
.pp
.in +4n
.ex
struct sockaddr_x25 {
    sa_family_t sx25_family;    /* must be af_x25 */
    x25_address sx25_addr;      /* x.121 address */
};
.ee
.in
.pp
.i sx25_addr
contains a char array
.i x25_addr[]
to be interpreted as a null-terminated string.
.i sx25_addr.x25_addr[]
consists of up to 15 (not counting the terminating null byte) ascii
characters forming the x.121 address.
only the decimal digit characters from \(aq0\(aq to \(aq9\(aq are allowed.
.ss socket options
the following x.25-specific socket options can be set by using
.br setsockopt (2)
and read with
.br getsockopt (2)
with the
.i level
argument set to
.br sol_x25 .
.tp
.b x25_qbitincl
controls whether the x.25 q-bit (qualified data bit) is accessible by the
user.
it expects an integer argument.
if set to 0 (default),
the q-bit is never set for outgoing packets and the q-bit of incoming
packets is ignored.
if set to 1, an additional first byte is prepended
to each message read from or written to the socket.
for data read from
the socket, a 0 first byte indicates that the q-bits of the corresponding
incoming data packets were not set.
a first byte with value 1 indicates
that the q-bit of the corresponding incoming data packets was set.
if the first byte of the data written to the socket is 1, the q-bit of the
corresponding outgoing data packets will be set.
if the first byte is 0,
the q-bit will not be set.
.sh versions
the af_x25 protocol family is a new feature of linux 2.2.
.sh bugs
plenty, as the x.25 plp implementation is
.br config_experimental .
.pp
this man page is incomplete.
.pp
there is no dedicated application programmer's header file yet;
you need to include the kernel header file
.ir  .
.b config_experimental
might also imply that future versions of the
interface are not binary compatible.
.pp
x.25 n-reset events are not propagated to the user process yet.
thus,
if a reset occurred, data might be lost without notice.
.sh see also
.br socket (2),
.br socket (7)
.pp
jonathan simon naylor:
\(lqthe re-analysis and re-implementation of x.25.\(rq
the url is
.ur ftp://ftp.pspt.fi\:/pub\:/ham\:/linux\:/ax25\:/x25doc.tgz
.ue .
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2007 silicon graphics, inc. all rights reserved
.\" written by dave chinner 
.\"
.\" %%%license_start(gplv2_oneline)
.\" may be distributed as per gnu general public license version 2.
.\" %%%license_end
.\"
.\" 2011-09-19: added falloc_fl_punch_hole
.\" 2011-09-19: substantial restructuring of the page
.\"
.th fallocate 2 2019-11-19 "linux" "linux programmer's manual"
.sh name
fallocate \- manipulate file space
.sh synopsis
.nf
.br "#define _gnu_source" "             /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "int fallocate(int " fd ", int " mode ", off_t " offset \
", off_t " len ");"
.fi
.sh description
this is a nonportable, linux-specific system call.
for the portable, posix.1-specified method of ensuring that space
is allocated for a file, see
.br posix_fallocate (3).
.pp
.br fallocate ()
allows the caller to directly manipulate the allocated disk space
for the file referred to by
.i fd
for the byte range starting at
.i offset
and continuing for
.i len
bytes.
.pp
the
.i mode
argument determines the operation to be performed on the given range.
details of the supported operations are given in the subsections below.
.ss allocating disk space
the default operation (i.e.,
.i mode
is zero) of
.br fallocate ()
allocates the disk space within the range specified by
.i offset
and
.ir len .
the file size (as reported by
.br stat (2))
will be changed if
.ir offset + len
is greater than the file size.
any subregion within the range specified by
.i offset
and
.ir len
that did not contain data before the call will be initialized to zero.
this default behavior closely resembles the behavior of the
.br posix_fallocate (3)
library function,
and is intended as a method of optimally implementing that function.
.pp
after a successful call, subsequent writes into the range specified by
.ir offset
and
.ir len
are guaranteed not to fail because of lack of disk space.
.pp
if the
.b falloc_fl_keep_size
flag is specified in
.ir mode ,
the behavior of the call is similar,
but the file size will not be changed even if
.ir offset + len
is greater than the file size.
preallocating zeroed blocks beyond the end of the file in this manner
is useful for optimizing append workloads.
.pp
if the
.b falloc_fl_unshare_range
flag is specified in
.ir mode ,
shared file data extents will be made private to the file to guarantee
that a subsequent write will not fail due to lack of space.
typically, this will be done by performing a copy-on-write operation on
all shared data in the file.
this flag may not be supported by all filesystems.
.pp
because allocation is done in block size chunks,
.br fallocate ()
may allocate a larger range of disk space than was specified.
.ss deallocating file space
specifying the
.br falloc_fl_punch_hole
flag (available since linux 2.6.38) in
.i mode
deallocates space (i.e., creates a hole)
in the byte range starting at
.i offset
and continuing for
.i len
bytes.
within the specified range, partial filesystem blocks are zeroed,
and whole filesystem blocks are removed from the file.
after a successful call,
subsequent reads from this range will return zeros.
.pp
the
.br falloc_fl_punch_hole
flag must be ored with
.br falloc_fl_keep_size
in
.ir mode ;
in other words, even when punching off the end of the file, the file size
(as reported by
.br stat (2))
does not change.
.pp
not all filesystems support
.br falloc_fl_punch_hole ;
if a filesystem doesn't support the operation, an error is returned.
the operation is supported on at least the following filesystems:
.ip * 3
xfs (since linux 2.6.38)
.ip *
ext4 (since linux 3.0)
.\" commit a4bb6b64e39abc0e41ca077725f2a72c868e7622
.ip *
btrfs (since linux 3.7)
.ip *
.br tmpfs (5)
(since linux 3.5)
.\" commit 83e4fa9c16e4af7122e31be3eca5d57881d236fe
.ip *
.br gfs2 (5)
(since linux 4.16)
.\" commit 4e56a6411fbce6f859566e17298114c2434391a4
.ss collapsing file space
.\" commit 00f5e61998dd17f5375d9dfc01331f104b83f841
specifying the
.br falloc_fl_collapse_range
flag (available since linux 3.15) in
.i mode
removes a byte range from a file, without leaving a hole.
the byte range to be collapsed starts at
.i offset
and continues for
.i len
bytes.
at the completion of the operation,
the contents of the file starting at the location
.i offset+len
will be appended at the location
.ir offset ,
and the file will be
.i len
bytes smaller.
.pp
a filesystem may place limitations on the granularity of the operation,
in order to ensure efficient implementation.
typically,
.i offset
and
.i len
must be a multiple of the filesystem logical block size,
which varies according to the filesystem type and configuration.
if a filesystem has such a requirement,
.br fallocate ()
fails with the error
.br einval
if this requirement is violated.
.pp
if the region specified by
.i offset
plus
.i len
reaches or passes the end of file, an error is returned;
instead, use
.br ftruncate (2)
to truncate a file.
.pp
no other flags may be specified in
.ir mode
in conjunction with
.br falloc_fl_collapse_range .
.pp
as at linux 3.15,
.b falloc_fl_collapse_range
is supported by
ext4 (only for extent-based files)
.\" commit 9eb79482a97152930b113b51dff530aba9e28c8e