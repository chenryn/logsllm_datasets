# Unidirectional Chains with Multi-Use Proxy Re-Signature

## Overview
Figure 1 illustrates unidirectional chains with multi-use proxy re-signature. Each node (e.g., C) holds only a proxy re-signature key (e.g., rk C→D) and not a signing key (e.g., sk C). This prevents an adversary from injecting a signed message into the chain by corrupting intermediate nodes.

## Certificate Distribution Challenges
In certain environments, distributing certificates can be difficult or impossible. Proxy re-signatures can mitigate this issue by transforming signatures into ones that can be verified with public keys already trusted by the verifier. 

### Example: Certificate Sharing
Consider a scenario where a set of public keys is embedded into a software product or a limited-storage device, such as a smart card. It would be convenient if operating systems came pre-installed with certified public keys of major companies. However, changing or adding new keys can be cumbersome. For example, a large company may want to start signing documents at a department level instead of a company-wide level, even though the software has been shipped with only one company-wide verification key (pk A).

To address this, the company could set up a proxy to translate between old and new keys. Suppose the software was shipped with a single company verification key (pk A). The company could create new verification keys for each department (pk B, pk C, pk D) and include these in the next software release. To remain backwards compatible, the company could also publish (or set up a semi-trusted proxy) with the re-signature keys (rk B→A, rk C→A, rk D→A). The proxy could then convert any signature generated by departments B, C, or D (which the old software would not recognize) into a company-wide signature under A (which the old software will recognize).

## Limitations of Previous Schemes
Although some applications were proposed for the BBS proxy re-signature scheme [5], it is not suitable for certificate sharing. In the process of certificate sharing, both the original, specialized signature (σB(m)) and the re-signed, company-wide signature (σA(m)) may be public. As seen in Section 3.2, anyone can compute the proxy’s "secret" re-signing key (rk A→B) after seeing a signature (σA(m)) and its translation (σB(m)). Moreover, an active adversary can easily find an original and re-signed pair of signatures using the BBS scheme, as the re-signatures are linkable to their originals.

## New Applications

### Space-Efficient Proof of Path Traversal (using Sbi)
Proxy re-signatures are particularly useful when deployed with their multi-use capability, such as Sbi. Signatures can be converted in series, as shown in Figure 1. Here, the signer A generates the first signature on the message m (σA(m)), and the intermediate proxies convert it into the final signature (σE(m)) through a series of transformations. This structure can be used to prove that a certain item followed a specific path without taking shortcuts.

For example, the United States is adopting E-passports, which can store a limited number of digital signatures. Suppose Eve arrives in New York from her home country of Eden and shows US border patrol a signature (σA(m)) from Eden, stating she is a citizen in good standing. The border patrol officer checks this signature and translates it into (σB(m)), indicating that Eve has passed the border patrol check. Eve then takes her passport to the customs officer. The customs officer verifies Eve’s passport against one public key (that of border patrol) and, if it checks out, translates the signature into (σC(m)), and so on.

This system reduces space requirements on the limited memory passport and the number of verification keys that checkpoints must store. Additionally, corrupting a customs officer only allows Eve to skip the customs check, but she must still have gone through the initial checks by Eden and border patrol. Thus, Eve can skip at most one stop for each checkpoint officer she compromises, and only for a message that Eden already authenticated.

### Easy to Manage Group Signatures (using Suni)
Proxy re-signatures can be used to conceal identities or details of the structure of an organization. For instance, a corporate proxy sitting on a company’s outgoing mail server could translate the individual signatures of its employees (valid inside the organization) into signatures that can be verified with a single corporate public key. The proxy could log which employee signed the message for internal auditing while keeping that information confidential. Even if the proxy is compromised, no signing keys are revealed, making it a less appealing target.

### Transparent Certification (using Sbi or, in some cases, Suni)
Proxy re-signatures can translate between public-key certificates from different Certification Authorities (CAs). Suppose A and B want to communicate securely by building a private and authenticated channel. If A can only verify certificates from CA1 and B from CA2, a proxy could be set up by the CAs to temporarily convert certificates from CA1 to CA2 and vice versa. This approach is useful when high coordination between A and B is impractical, or when two distinct entities suddenly agree to cooperate, such as two banks merging into a single company.

Using unidirectional schemes, rather than bidirectional ones, offers advantages. For example, consider two ad-hoc networks (A and B) that use their own CA and have their own domain. We can achieve the same functionality of a bidirectional scheme by using a unidirectional one with two re-signature keys (rk A→B and rk B→A). Each time a certificate is sent from one network to another, it is processed and translated by a proxy in the destination network and forwarded directly to the destination node. Alternatively, the destination node could collect the incompatible certificate from the source node and forward it to a local proxy for translation.

The main advantage is that the two networks can communicate transparently to the internal nodes, without requiring reprogramming or storing new keys. Using unidirectional schemes allows each network to set up proxies inside their own perimeter without relying on nodes from the other (possibly untrusted) network.

## Conclusions
We formalized the proxy re-signature primitive of Blaze, Bleumer, and Strauss [5], pointed out several limitations of the BBS scheme, and provided new improved constructions. One of our schemes (Suni) allows the proxy to translate from Alice to Bob, but not vice versa. Our schemes are efficient and based on standard assumptions in the random oracle model. We presented exciting applications of proxy re-signatures, including key management, (weak) group signatures, and short proofs that a valid path was taken in a graph. We are confident that proxy re-signatures have many additional applications beyond those mentioned here.

An open problem is whether proxy re-signature schemes can translate from one type of signature scheme to another, such as translating Alice's Schnorr signatures into Bob's RSA-based ones. The existence of multi-use, unidirectional schemes also remains an open question.

## Acknowledgments
We are grateful to Kevin Fu, Matthew Green, Ari Juels, and Adam Stubblefield for discussions on applications of proxy re-signatures. Kevin Fu suggested using proxy re-signatures to non-repudiably prove that a maze was solved. We thank Dan Boneh for useful comments on assumptions used in earlier schemes and the CCS anonymous reviewers. Susan Hohenberger’s work was supported by an NDSEG Fellowship.

## References
[References listed as in the original text]