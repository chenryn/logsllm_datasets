A
)
B
(
m
D
)
(m
C
D
(
m
)
C
E
)
E ( m
V
Figure 1: Unidirectional chains with multi-use proxy re-signature. Each node (e.g., C) holds only a proxy
re-signature key (e.g., rk C→D) and not a signing key (e.g., sk C ). Thus, an adversary cannot inject a signed
message into the chain by corrupting intermediate nodes.
distribution of certiﬁcates may be diﬃcult or impossible in
certain environments. Proxy re-signatures could be used to
mitigate (at least temporarily) this issue by transforming
signatures into ones that can be veriﬁed with public keys
already trusted by the veriﬁer. We now present an example
of certiﬁcate sharing.
∗
A Time to Share (using Suni or S
uni). Consider the
case where a set of public keys is embedded into a soft-
ware product or a limited-storage device, such as a smart-
card.
In many cases, it would be convenient if operating
systems came installed with the certiﬁed public keys of ma-
jor companies. The drawback, however, is that it might
then be diﬃcult or cumbersome for a company to change
or add new keys. For example, a large company may want
to begin signing documents at a department, rather than a
company-wide, level even though software has been shipped
with only one company-wide veriﬁcation key pk A. To solve
this dilema, the company could set up a proxy which could
translate between old and new keys or from a large set of
keys to a smaller one, etc.
To see this, suppose that software was shipped with a sin-
gle company veriﬁcation key pk A. The company could still
create new veriﬁcation keys for each department pk B, pk C ,
pk D and include these ceriﬁed keys in the next software
release. However, to temporarily remain backwards com-
patible with the old software, the company could also pub-
lish (or setup a semi-trusted proxy) with the re-signature
keys rk B→A, rk C→A, rk D→A; thus the proxy could change
any signature generated by departments B, C, or D (which
the old software would not recognize) and turn it into a
company-wide signature under A (which the old software
will recognize).
Where Previous Schemes Fail in These Applications.
Although (some form of) the applications presented above
were proposed for the BBS proxy re-signature scheme [5],
that scheme is not suitable for them given that in the pro-
cess of certiﬁcate-sharing both the original, specialized sig-
nature σB(m) (for the updated software) and the re-signed,
company-wide signature σA(m) (for the old software) may
be public. As we saw in Section 3.2, anyone can compute the
proxy’s “secret” re-signing key rk A→B after seeing a signa-
ture σA(m) and its translation σB(m). Moreover, an active
adversary will have an easy time ﬁnding an original and re-
signed pair of signatures using the BBS scheme, since the
re-signatures are linkable to their originals; that is, the sig-
nature (r, s), given as input to the ReSign algorithm, and its
corresponding output (r
= r set by the protocol
speciﬁcation.
4.2 New Applications
) have r
, s
(cid:1)
(cid:1)
(cid:1)
Armed with our new proxy re-signature schemes, we now
show that they can be used as a space-eﬃcient “proof” that
a path was taken in a graph, or as an easy-to-manage group
signature scheme, and to simplify certiﬁcate management.
Space-Eﬃcient Proof that a Path was Taken (using
Sbi). Proxy re-signatures are particularly useful when de-
ployed with their multi-use capability, such as Sbi. In par-
ticular, signatures can be converted in series as shown in
Figure 1. Here, the signer A generates the ﬁrst signature on
the message m, σA(m), and the intermediate proxies con-
vert it into the ﬁnal signature σE(m) through a series of
transformations repeated in sequence. Such a structure can
be used to prove that a certain item followed a speciﬁc path
without taking any shortcuts.
The United States is currently in the process of adopting
E-passports [17] – traditional passport documents capable
of storing a limited number of digital signatures. Suppose
Eve arrives in New York from her home country of Eden
and shows US border patrol a signature σA(m) from Eden
that she is a citizen in good standing. The border patrol
oﬃcer checks this signature and translates it into σB(m),
stating that Eve has passed the border patrol check. Eve
next takes her passport to the customs oﬃcer. The customs
oﬃcer need only verify Eve’s passport against one public key
– that of border patrol – and if it checks out and she passes
customs, he can translate the signature into σC (m), etc.
This system has many beneﬁts. First, keeping only one
signature around at a time reduces the space requirements
on the limited memory passport – and also reduces the num-
ber of veriﬁcation keys that checkpoints down the chain must
store. Second, by only giving each checkpoint a re-signature
key (e.g., giving customs rk B→C instead of sk C ), corrupting
a customs oﬃcer only allows Eve to skip the customs check
– but she must still have gone through the intial checks by
Eden and border patrol. Thus, Eve can – at best – skip one
stop for each checkpoint oﬃcer that she compromises, and
only for a message that Eden already authenticated.
Notice that although we use our bidirectional scheme (be-
cause it is “multi-use”), the chain in Figure 1 is actually
unidirectional as long as the secret e corresponding to the
last public key is kept secret. Thus, we can design only one
way for Eve to get through the airport checks. Obviously,
a scheme that is both multi-use and unidirectional would
be ideal for this application, but no such scheme currently
exists. Fortunately, by the strategic release of certain Sbi
re-signature keys we can design for arbitrary traversal of
a given “graph” allowing for a host of other quality check
applications.
With a proper release of keys, proxy re-signatures can be
used to non-repudiably prove that a message has traversed
a graph via a legitimate path. Of course, one could em-
ploy multi-signatures [19] or aggregate signatures [8] to get
a proof that certain nodes were visited, but both of these
solutions require the veriﬁer to have the veriﬁcation keys
of all of these nodes. Using proxy re-signatures, each node
(including the ﬁnal one) need only store and trust a single
public key (the public key of the node preceeding it in the
chain) – and yet each node has some real conﬁdence that it
is validating the entire path. Thus, we see another savings
in key management.
Additionally in some cases, users may want the privacy
that multi-use proxy re-signatures provide; that is, these
signatures could simultaneously authenticate and yet hide
the path traversed by the message in the network.
∗
Easy to Manage Group Signatures (using S
uni). Proxy
re-signatures can be used to conceal identities or details of
the structure of an organization. For instance, a corporate
proxy sitting on a company’s outgoing mail server could
translate the individual signatures of its employees, which
are perfectly valid signatures inside the organization, into
signatures that can be veriﬁed with a single corporate pub-
lic key. The proxy could (optionally) log which employee
signed the message for internal auditing, but choose to keep
that information company conﬁdential. The interesting fea-
ture here is that even if the proxy is compromised from
the outside, no signing keys are ever revealed which makes
the proxy a less appealing target. The actual corporate se-
cret key could be kept securely in a lock-box, and then the
proxy, with only re-signing information, could sit out on the
mail server. For accountability purposes, it is also advisable
to employ unidirectional schemes (with private re-signature
key) so that the proxy will not be able to generate members’
signatures from existing corporate signatures.
Transparent Certiﬁcation (using Sbi or, in some cases
∗
either, Suni or S
uni). Proxy re-signatures can be used to
translate between public-key certiﬁcates, which are often im-
plemented as digital signatures, from diﬀerent Certiﬁcation
Authorities (CAs). Suppose A and B want to communicate
securely by building a private and authenticated channel.
The common ﬁrst step for A and B would be to exchange
their certiﬁed public keys. However, let’s assume that A can
only verify certiﬁcates from the certiﬁcation authority CA1
and B those from CA2.
A proxy could be set up by the certiﬁcation authorities to
temporarily convert certiﬁcates from CA1 to ones from CA2
and vice-versa. This approach is useful when a high level of
coordination between A and B is impractical, or when two
distinct entities suddenly agree to cooperate, e.g., two banks
merge into a single company and deploy (or publish) proxy
keys as a temporary compatibility ﬁx.
We notice that there are certain advantages in using uni-
A
B
Proxies
Figure 2: Using a unidirectional re-signature
scheme, two ad-hoc networks can set up their own
trusted “proxies”, inside their own perimeter or do-
main, to translate incompatible certiﬁcates issued
by an authority for the other network.
directional schemes, rather than bidirectional ones, when
setting up such a proxy. For example, consider a scenario in
which A and B are two (ad-hoc) networks that use their own
CA and have their own domain, as shown in Figure 2. We
can achieve the same functionality of a bidirectional scheme
by using a unidirectional one with two re-signature keys,
rk A→B and rk B→A.
For example, as shown in Figure 2, each time a certiﬁcate
is sent from one network to another, it is ﬁrst processed and
translated by a proxy in the destination network and for-
warded directly to the destination node. Alternatively, the
destination node could collect the incompatible certiﬁcate
from the source node of the other network and forward it to
one of its local proxies to have it translated.
The main advantage of using proxy re-signature schemes
in this scenario is to allow the two networks to communi-
cate in a way that is completely transparent to the inter-
nal nodes. Indeed, nodes do not have to be reprogrammed
or instructed to trust and store new keys (certain types of
sensor or RFID chips cannot be reprogrammed or do not
have enough memory to store new information). The ad-
vantage of using unidirectional schemes over bidirectional
ones is to allow each network to set up proxies inside their
own perimeter or domain without relying on nodes from the
other (possibly untrusted) network. Moreover, our approach
does not require interaction since each network can generate
a re-signature key directly from the public key of the other
network.
5. CONCLUSIONS
In this work, we formalized the proxy re-signature prim-
itive of Blaze, Bleumer, and Strauss [5]. We pointed out
several limitations of the BBS scheme and we provided new
improved constructions. One of our schemes (Suni) allows
the proxy to translate from Alice to Bob, but not vice versa.
This is the only known construction to have this property
since BBS proposed the concept in 1998 [5]. Our schemes are
eﬃcient and based on standard assumptions in the random
oracle model, although they oﬀer slightly diﬀerent proper-
ties. Finally, we presented exciting applications of proxy
re-signatures, including key management, (weak) group sig-
natures, and short proofs that a valid path was taken in a
graph. We are conﬁdent that proxy re-signatures have many
additional applications beyond those mentioned here.
One open problem of particular interest stemming from
this work is whether or not proxy re-signature schemes can
be built that translate from one type of signature scheme
to another. For example, a scheme that translates Alice’s
Schnorr signatures into Bob’s RSA-based ones. The exis-
tence of multi-use, unidirectional schemes also remains open.
Acknowledgments. We are grateful to Kevin Fu, Matthew
Green, Ari Juels, and Adam Stubbleﬁeld for discussions on
applications of proxy re-signatures. In particular, Kevin Fu
suggested to use proxy re-signatures to non-repudiably prove
that a maze was solved. We thank Dan Boneh for useful
comments on assumptions used in earlier schemes. We also
thank the CCS anonymous reviewers.
Susan Hohenberger’s work was supported by an NDSEG
Fellowship.
6. REFERENCES
[1] Jee Hea An, Yevgeniy Dodis, and Tal Rabin. On the
security of joint signature and encryption. In Advances
in Cryptology – EUROCRYPT ’02, volume 2332 of
LNCS, pages 83–107, 2002.
[2] Giuseppe Ateniese, Kevin Fu, Matthew Green, and
Susan Hohenberger. Improved Proxy Re-encryption
Schemes with Applications to Secure Distributed
Storage. In Network and Distributed System Security
Symposium, pages 29–43, 2005.
[3] Giuseppe Ateniese and Susan Hohenberger. Proxy
Re-Signatures: New Deﬁnitions, Algorithms, and
Applications. Cryptology ePrint Archive, 2005.
http://eprint.iacr.org/2005.
[4] Mihir Bellare and Gregory Neven. Transitive
Signatures Based on Factoring and RSA. In Advances
in Cryptology – ASIACRYPT ’02, volume 2501 of
LNCS, pages 397–414, 2002.
[5] Matt Blaze, G. Bleumer, and M. Strauss. Divertible
protocols and atomic proxy cryptography. In Advances
in Cryptology – EUROCRYPT ’98, volume 1403 of
LNCS, pages 127–144, 1998.
[6] A. Boldyreva. Eﬃcient Threshold Signature,
Multisignature, and Blind Signature Schemes based on
the Gap-Diﬃe-Hellman-group signature Scheme. In
Public Key Cryptography 2003, volume 2567 of LNCS,
pages 31–46, 2003.
[7] Dan Boneh and Matt Franklin. Identity-based
encryption from the Weil Pairing. SIAM Journal of
Computing, 32(3):586–615, 2003.
[8] Dan Boneh, Craig Gentry, Ben Lynn, and Hovav
Shacham. Aggregate and veriﬁably encrypted
signatures. In Advances in Cryptology – EUROCRYPT
’03, volume 2656 of LNCS, pages 416–432, 2003.
[9] Dan Boneh, Ben Lynn, and Hovav Shacham. Short
signatures from the Weil Pairing. Journal of
Cryptology, 17(4):297–319, 2004.
[10] Dan Boneh, Hovav Shacham, and Ben Lynn. Short
signatures from the Weil pairing. In Advances in
Cryptology – ASIACRYPT ’01, volume 2248 of LNCS,
pages 514–532, 2001.
[11] Jan Camenisch and Anna Lysyanskaya. Signature
schemes and anonymous credentials from bilinear
maps. In Advances in Cryptology — CRYPTO 2004,
volume 3152 of LNCS, pages 56–72, 2004.
[12] Yevgeniy Dodis and Anca Ivan. Proxy cryptography
revisited. In Network and Distributed System Security
Symposium, February 2003.
[13] Yevgeniy Dodis and Leonid Reyzin. Breaking and
repairing optimistic fair exchange from PODC 2003.
In Proceedings of the Third ACM Workshop on Digital
Rights Management (DRM’03), ACM Press, 2003.
[14] Steven D. Galbraith, Keith Harrison, and David
Soldera. Implementing the tate pairing. In Algorithmic
Number Theory Symposium, volume 2369 of LNCS,
pages 324–337, 2002.
[15] Shaﬁ Goldwasser, Silvio Micali, and Ronald L. Rivest.
A digital signature scheme secure against adaptive
chosen-message attacks. SIAM Journal of Computing,
17(2):281–308, 1988.
[16] Antoine Joux. A one-round protocol for tripartite
Diﬃe-Hellman. In ANTS-IV conference, volume 1838
of LNCS, pages 385–394, 2000.
[17] Ari Juels, David Molnar, and David Wagner. Security
and privacy issues in e-passports. To appear in IEEE
SecureComm, 2005.
[18] M. Mambo, K. Usuda, and E. Okamoto. Proxy
signatures: delegation of the power to sign messages.
IEICE Trans. Fundamentals, E79-A(9), 1996.
[19] S. Micali, K. Ohta, and L. Reyzin.
Accountable-subgroup multisignatures. In ACM
Communication and Computer Security 2001, pages
245–54. ACM press, 2001.
[20] Silvio Micali and Ronald L. Rivest. Transitive
signature schemes. In CT-RSA ’02, volume 2271 of
LNCS, pages 236–243, 2002.
[21] K. Ohta and T. Okamoto. Multisignature schemes
secure against active insider attacks. IEICE Trans.
Fundamentals, E82-A/1:21–31, 1999.
[22] T. Okamoto. A digital multisignature scheme using
bijective public-key cryptosystems. ACM Trans.
Computer Systems, 6(4):432–441, 1998.
[23] Claus-Peter Schnorr. Eﬃcient signature generation by
smart cards. Journal of Cryptography, 4:161–174,
1991.