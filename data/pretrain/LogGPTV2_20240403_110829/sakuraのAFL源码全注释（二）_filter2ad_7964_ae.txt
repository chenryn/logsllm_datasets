  * 如果state为1 
    * 尝试创建`out_dir/queue/.state/redundant_edges/fname`
  * 如果state为0 
    * 尝试删除`out_dir/queue/.state/redundant_edges/fname`
####  show_init_stats
在处理输入目录的末尾显示统计信息，以及一堆警告,以及几个硬编码的常量。
  * 依据之前从calibrate_case里得到的total_cal_us和total_cal_cycles，计算出单轮执行的时间avg_us，如果大于10000，就警告`"The target binary is pretty slow! See %s/perf_tips.txt."`
    * 如果avg_us大于50000，设置havoc_div为10 / _0-19 execs/sec_ /
    * 大于20000，设置havoc_div为5 / _20-49 execs/sec_ /
    * 如果大于10000，设置havoc_div为2 / _50-100 execs/sec_ /
  * 如果不是resuming session，则对queue的大小和个数超限提出警告，且如果useless_at_start不为0，就警告有可以精简的样本。
  * 如果timeout_given为0，则根据avg_us来计算出exec_tmout， **注意这里avg_us的单位是微秒，而exec_tmout单位是毫秒，所以需要除以1000**
    * avg_us > 50000 
      * exec_tmout = avg_us * 2 / 1000
    * avg_us > 10000 
      * exec_tmout = avg_us * 3 / 1000
    * exec_tmout = avg_us * 5 / 1000
    * 然后在上面计算出来的exec_tmout和所有样例中执行时间最长的样例进行比较，取最大值赋给exec_tmout
    * 如果exec_tmout大于EXEC_TIMEOUT，就设置exec_tmout = EXEC_TIMEOUT 
      * EXEC_TIMEOUT的值为1秒，即最大超时时间是1秒
    * 打印出`"No -t option specified, so I'll use exec timeout of %u ms.", exec_tmout`
    * 设置timeout_given为1
  * 如果timeout_give不为0，且为3，代表这是resuming session，直接打印`"Applying timeout settings from resumed session (%u ms).", exec_tmout`,此时的timeout_give是我们从历史记录里读取出的。
  * 如果是dumb_mode且没有设置环境变量AFL_HANG_TMOUT 
    * 设置hang_tmout为EXEC_TIMEOUT和`exec_tmout * 2 + 100`中的最小值
  * `All set and ready to roll!`
####  find_start_position
resume时,请尝试查找要从其开始的队列位置,这仅在resume时以及当我们可以找到原始的fuzzer_stats时才有意义.
  * 如果不是resuming_fuzz，就直接返回
  * 如果是in_place_resume,就打开`out_dir/fuzzer_stats`文件，否则打开`in_dir/../fuzzer_stats`文件
  * 读这个文件的内容到tmp[4096]中，找到`cur_path`，并设置为ret的值，如果大于queued_paths就设置ret为0，返回ret。
####  void write_stats_file(double bitmap_cvg, double stability, double eps)
更新统计信息文件以进行无人值守的监视
  * 创建文件`out_dir/fuzzer_stats`
  * 写入统计信息
  * start_time 
    * fuzz运行的开始时间，start_time / 1000
  * last_update 
    * 当前时间
  * fuzzer_pid 
    * 获取当前pid
  * cycles_done 
    * `queue_cycle`在`queue_cur`为空，即执行到当前队列尾的时候才增加1，所以这代表queue队列被完全变异一次的次数。
  * execs_done 
    * total_execs，target的总的执行次数，每次`run_target`的时候会增加1
  * execs_per_sec 
    * 每秒执行的次数
  * paths_total 
    * queued_paths在每次`add_to_queue`的时候会增加1，代表queue里的样例总数
  * paths_favored 
    * queued_favored，有价值的路径总数
  * paths_found 
    * queued_discovered在每次`common_fuzz_stuff`去执行一次fuzz时，发现新的interesting case的时候会增加1，代表在fuzz运行期间发现的新queue entry。
  * paths_imported 
    * queued_imported是master-slave模式下，如果sync过来的case是interesting的，就增加1
  * max_depth 
    * 最大路径深度
  * cur_path 
    * current_entry一般情况下代表的是正在执行的queue entry的整数ID,queue首节点的ID是0
  * pending_favs 
    * pending_favored 等待fuzz的favored paths数
  * pending_total 
    * pending_not_fuzzed 在queue中等待fuzz的case数
  * variable_paths 
    * queued_variable在`calibrate_case`去评估一个新的test case的时候，如果发现这个case的路径是可变的，则将这个计数器加一，代表发现了一个可变case
  * stability
  * bitmap_cvg
  * unique_crashes 
    * unique_crashes这是在`save_if_interesting`时，如果fault是FAULT_CRASH，就将unique_crashes计数器加一
  * unique_hangs 
    * unique_hangs这是在`save_if_interesting`时，如果fault是FAULT_TMOUT，且exec_tmout小于hang_tmout，就以hang_tmout为超时时间再执行一次，如果还超时，就让hang计数器加一。
  * last_path 
    * 在`add_to_queue`里将一个新case加入queue时，就设置一次last_path_time为当前时间，`last_path_time / 1000`
  * last_crash 
    * 同上，在unique_crashes加一的时候，last_crash也更新时间，`last_crash_time / 1000`
  * last_hang 
    * 同上，在unique_hangs加一的时候，last_hang也更新时间，`last_hang_time / 1000`
  * execs_since_crash 
    * total_execs – last_crash_execs,这里last_crash_execs是在上一次crash的时候的总计执行了多少次
  * exec_tmout 
    * 配置好的超时时间，有三种可能的配置方式，见上文
        fprintf(f, "start_time        : %llu\n"
                   "last_update       : %llu\n"
                   "fuzzer_pid        : %u\n"
                   "cycles_done       : %llu\n"
                   "execs_done        : %llu\n"
                   "execs_per_sec     : %0.02f\n"
                   "paths_total       : %u\n"
                   "paths_favored     : %u\n"
                   "paths_found       : %u\n"
                   "paths_imported    : %u\n"
                   "max_depth         : %u\n"
                   "cur_path          : %u\n" /* Must match find_start_position() */
                   "pending_favs      : %u\n"
                   "pending_total     : %u\n"
                   "variable_paths    : %u\n"
                   "stability         : %0.02f%%\n"
                   "bitmap_cvg        : %0.02f%%\n"
                   "unique_crashes    : %llu\n"
                   "unique_hangs      : %llu\n"
                   "last_path         : %llu\n"
                   "last_crash        : %llu\n"
                   "last_hang         : %llu\n"
                   "execs_since_crash : %llu\n"
                   "exec_timeout      : %u\n" /* Must match find_timeout() */
                   "afl_banner        : %s\n"
                   "afl_version       : " VERSION "\n"
                   "target_mode       : %s%s%s%s%s%s%s\n"
                   "command_line      : %s\n"
                   "slowest_exec_ms   : %llu\n",
                start_time / 1000, get_cur_time() / 1000, getpid(),
                queue_cycle ? (queue_cycle - 1) : 0, total_execs, eps,
                queued_paths, queued_favored, queued_discovered, queued_imported,
                max_depth, current_entry, pending_favored, pending_not_fuzzed,
                queued_variable, stability, bitmap_cvg, unique_crashes,
                unique_hangs, last_path_time / 1000, last_crash_time / 1000,
                last_hang_time / 1000, total_execs - last_crash_execs,
                exec_tmout, use_banner,
                qemu_mode ? "qemu " : "", dumb_mode ? " dumb " : "",
                no_forkserver ? "no_forksrv " : "", crash_mode ? "crash " : "",
                persistent_mode ? "persistent " : "", deferred_mode ? "deferred " : "",
                (qemu_mode || dumb_mode || no_forkserver || crash_mode ||
                 persistent_mode || deferred_mode) ? "" : "default",
                orig_cmdline, slowest_exec_ms);
  * 统计子进程的资源用量并写入。
####  save_auto
保存自动生成的extras
  * 如果auto_changed为0，则直接返回
  * 如果不为0，就设置为0，然后创建名为`alloc_printf("%s/queue/.state/auto_extras/auto_%06u", out_dir, i);`的文件，并写入a_extras的内容。
####  通信管道基础知识
                假设进程A拥有一个已打开的文件描述符fd3，它的状态如下
                进程A的文件描述符表(before dup2)
                ------------                fd0 0   | p0
                ------------                fd1 1   | p1 -------------> 文件表1 ---------> vnode1
                ------------                fd2 2   | p2
                ------------                fd3 3   | p3 -------------> 文件表2 ---------> vnode2
                ------------                ... ...
                ... ...
                ------------    
                经下面调用：
                n_fd = dup2(fd3, STDOUT_FILENO);后进程状态如下：
                进程A的文件描述符表(after dup2)
                ------------                fd0 0   | p0
                ------------                n_fd 1  | p1 ------------                ------------               \
                fd2 2   | p2                  \
                ------------                 _\|
                fd3 3   | p3 -------------> 文件表2 ---------> vnode2
                在学习dup2时总是碰到“重定向”一词，上图完成的就是一个“从标准输出到文件的重定向”，经过dup2后进程A的任何目标为STDOUT_FILENO的I/O操作如printf等，其数据都将流入fd3所对应的文件中。下面是一个例子程序：
                #define TESTSTR "Hello dup2\n"
                int main() {
                        int     fd3;
                        fd3 = open("testdup2.dat", 0666);
                        if (fd < 0) {
                                printf("open error\n");
                                exit(-1);
                        }
                        if (dup2(fd3, STDOUT_FILENO) < 0) {       
                                printf("err in dup2\n");
                        }
                        printf(TESTSTR);
                        return 0;
                }
                其结果就是你在testdup2.dat中看到"Hello dup2"。