https://github.com/avast/retdec/
blob/567c30e3dd4c572fa825d8781ed69652306a961e/src/bin2llvmir/
optimizations/simple types/simple types.cpp, 2020.
[9] SecondWrite. https://www.secondwrite.com, 2020.
[10] Translating binaries to LLVM with Revgen. http://s2e.systems/docs/
Tutorials/Revgen/Revgen.html, 2020.
[11] Binary Lifter Errors and Our Fixes.
https://www.dropbox.com/s/
lqskhqrbiunz44j/lifter-sm.pdf?dl=0, 2021.
[12] CVE details. https://www.cvedetails.com/, 2021.
[13] Known issues of mctoll.
https://github.com/microsoft/llvm-mctoll#
known-issues, 2021.
[14] mcsema optimization passes. https://github.com/lifting-bits/mcsema/
blob/0a541eafaf211c1c67c3a4ecbc737792996c6d22/mcsema/BC/
Optimize.cpp#L1582, 2021.
[15] Retrowrite codebase. https://github.com/HexHive/retrowrite, 2021.
[16] Mohammed Abuhamad, Tamer AbuHmed, Aziz Mohaisen, and Dae-
Hun Nyang.
Large-scale and language-oblivious code authorship
identiﬁcation. In Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security, pages 101–114, 2018.
[17] Uri Alon, Meital Zilberstein, Omer Levy, and Eran Yahav. code2vec:
Learning distributed representations of code. Proceedings of the ACM
on Programming Languages, 3(POPL):1–29, 2019.
[18] Anil Altinay, Joseph Nash, Taddeus Kroes, Prabhu Rajasekaran, Dixin
Zhou, Adrian Dabrowski, David Gens, Yeoul Na, Stijn Volckaert,
Cristiano Giuffrida, et al. BinRec: dynamic binary lifting and re-
In Proceedings of the Fifteenth European Conference
compilation.
on Computer Systems, pages 1–16, 2020.
[19] Kapil Anand, Matthew Smithson, Khaled Elwazeer, Aparna Kotha, Jim
Gruen, Nathan Giles, and Rajeev Barua. A compiler-level intermediate
representation based binary analysis and rewriting system. In EuroSys
’13, 2013.
[20] Shushan Arakelyan, Christophe Hauser, Erik Kline, and Aram Gal-
styan. Towards learning representations of binary executable ﬁles for
security tasks. arXiv preprint arXiv:2002.03388, 2020.
[21] artemdinaburg. Mcsema demo: Llvm’s libfuzzer? https://github.com/
lifting-bits/mcsema/issues/131, 2017.
[22] Avast. Retdec. https://github.com/avast/retdec, 2020.
[23] Gogul Balakrishnan and Thomas Reps. Analyzing memory accesses
in x86 executables. In Compiler Construction, pages 5–23. Springer,
2004.
[24] Gogul Balakrishnan and Thomas Reps. Wysinwyx: What you see is
not what you execute. ACM Trans. Program. Lang. Syst., 32(6):23:1–
23:84, August 2010.
[25] Fabrice Bellard. Qemu, a fast and portable dynamic translator.
In
USENIX Annual Technical Conference, FREENIX Track, volume 41,
page 46, 2005.
[26] Tal Ben-Nun, Alice Shoshana Jakobovits, and Torsten Hoeﬂer. Neural
code comprehension: A learnable representation of code semantics.
NIPS 2018, pages 3588–3600, 2018.
[27] Fraser Brown, Deian Stefan, and Dawson Engler. Sys: a static/symbolic
tool for ﬁnding good bugs in good (browser) code. In 29th {USENIX}
Security Symposium ({USENIX} Security 20), pages 199–216, 2020.
[28] David Brumley, JongHyup Lee, Edward J. Schwartz, and Maverick
Woo. Native x86 decompilation using semantics-preserving structural
analysis and iterative control-ﬂow structuring. In Presented as part of
the 22nd USENIX Security Symposium (USENIX Security 13), pages
353–368, 2013.
[29] Cristian Cadar, Daniel Dunbar, and Dawson Engler. KLEE: Unassisted
and automatic generation of high-coverage tests for complex systems
In Proceedings of the 8th USENIX Conference on Oper-
programs.
ating Systems Design and Implementation, OSDI’08, pages 209–224.
USENIX Association, 2008.
[30] Aylin Caliskan-Islam, Richard Harang, Andrew Liu, Arvind Narayanan,
De-
In 24th USENIX
Clare Voss, Fabian Yamaguchi, and Rachel Greenstadt.
anonymizing programmers via code stylometry.
Security Symposium (USENIX Security 15), pages 255–270, 2015.
[31] Hongxu Chen, Yinxing Xue, Yuekang Li, Bihuan Chen, Xiaofei Xie,
Xiuheng Wu, and Yang Liu. Hawkeye: Towards a desired directed grey-
box fuzzer. In Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security, pages 2095–2108, 2018.
[32] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong Zhou, Yulong
Zhang, Tao Wei, and Long Lu. Savior: Towards bug-driven hybrid
testing. In 2020 IEEE Symposium on Security and Privacy (SP), pages
1580–1596. IEEE, 2020.
[33] Vitaly Chipounov and George Candea. Reverse engineering of binary
the 5th European
device drivers with revnic.
Conference on Computer Systems, pages 167–180, 2010.
[34] Vitaly Chipounov and George Candea. Enabling sophisticated analyses
of× 86 binaries with revgen.
In 2011 IEEE/IFIP 41st International
Conference on Dependable Systems and Networks Workshops (DSN-
W), pages 211–216. IEEE, 2011.
In Proceedings of
[35] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. S2E:
A platform for in-vivo multi-path analysis of software systems. ACM
SIGPLAN Notices, 46(3):265–278, 2011.
[36] Zheng Leong Chua, Shiqi Shen, Prateek Saxena, and Zhenkai Liang.
Neural nets can learn function type signatures from binaries. In 26th
USENIX Security Symposium (USENIX Security 17), pages 99–116,
2017.
[37] Nassim Corteggiani, Giovanni Camurati, and Aur´elien Francillon. In-
ception: System-wide security testing of real-world embedded systems
software. In USENIX Sec., 2018.
[38] Sandeep Dasgupta, Sushant Dinesh, Deepan Venkatesh, Vikram S
Adve, and Christopher W Fletcher. A scalable validator for binary
In Proceedings of the 41st ACM SIGPLAN Conference on
lifters.
Programming Language Design and Implementation, pages 655–671,
2020.
[39] Yaniv David, Nimrod Partush, and Eran Yahav. Statistical similarity
of binaries. In PLDI, 2016.
[40] Yaniv David, Nimrod Partush, and Eran Yahav. FirmUp: Precise static
detection of common vulnerabilities in ﬁrmware. In ASPLOS, 2018.
[41] Zhui Deng, Xiangyu Zhang, and Dongyan Xu. BISTRO: Binary com-
ponent extraction and embedding for software security applications.
ESORICS. 2013.
[42] Edsger W Dijkstra. Letters to the editor: go to statement considered
harmful. Communications of the ACM, 11(3):147–148, 1968.
[43] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer.
Retrowrite: Statically instrumenting cots binaries for fuzzing and
sanitization. In 2020 IEEE Symposium on Security and Privacy (SP),
pages 1497–1511. IEEE, 2020.
[44] Steven HH Ding, Benjamin CM Fung, and Philippe Charland.
Asm2vec: Boosting static representation robustness for binary clone
In 2019
search against code obfuscation and compiler optimization.
IEEE Symposium on Security and Privacy (SP), pages 472–489. IEEE,
2019.
[45] Yue Duan. Deepbindiff.
https://github.com/yueduan/DeepBinDiff,
2020.
[46] Yue Duan, Xuezixiang Li, Jinghan Wang, and Heng Yin. DeepBinDiff:
In
the 27th Annual Network and Distributed System
Learning program-wide code representations for binary difﬁng.
Proceedings of
Security Symposium (NDSS’20), 2020.
[47] Khaled ElWazeer, Kapil Anand, Aparna Kotha, Matthew Smithson, and
Rajeev Barua. Scalable variable and data type detection in a binary
rewriter. In PLDI, 2013.
[48] Alexis Engelke and Martin Schulz.
leveraging llvm for
high performance dynamic binary instrumentation. In Proceedings of
the 16th ACM SIGPLAN/SIGOPS International Conference on Virtual
Execution Environments, pages 172–184, 2020.
Instrew:
[49] Bauman Erick, Lin Zhiqiang, and Hamlen Kevin W. Superset disas-
sembly: Statically rewriting x86 binaries without heuristics. In NDSS,
2018.
[50] Gang Fan, Rongxin Wu, Qingkai Shi, Xiao Xiao, Jinguo Zhou, and
Charles Zhang. Smoke: scalable path-sensitive memory leak detection
for millions of lines of code. In 2019 IEEE/ACM 41st International
Conference on Software Engineering (ICSE), pages 72–82. IEEE, 2019.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:18 UTC from IEEE Xplore.  Restrictions apply. 
1114
[51] Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa,
and Heng Yin. Scalable graph-based bug search for ﬁrmware images.
In Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security, pages 480–491, 2016.
In
29th {USENIX} Security Symposium ({USENIX} Security 20), pages
1075–1092, 2020.
[52] Antonio Flores-Montoya and Eric Schulte. Datalog disassembly.
[53] Debin Gao, Michael K. Reiter, and Dawn Song. BinHunt: Automati-
cally ﬁnding semantic differences in binary programs. ICICS, 2008.
[54] David Gens, Simon Schmitt, Lucas Davi, and Ahmad-Reza Sadeghi.
K-miner: Uncovering memory corruption in linux. In NDSS, 2018.
[55] Ivan Gotovchits, Rijnard van Tonder, and David Brumley. Saluki:
In
ﬁnding taint-style vulnerabilities with static property checking.
NDSS, 2018.
[56] Dan Guido. Mcsema author’s notes on design goal. https://github.com/
microsoft/llvm-mctoll/issues/1#issuecomment-429446832, 2018.
[57] David Gunning. Explainable artiﬁcial intelligence (xai). Defense
Advanced Research Projects Agency (DARPA), nd Web, 2:2, 2017.
[58] Niranjan Hasabnis and R Sekar. Lifting assembly to intermediate
representation: A novel approach leveraging compilers. In Proceedings
of the Twenty-First International Conference on Architectural Support
for Programming Languages and Operating Systems, pages 311–324,
2016.
[59] Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin Raychev, and
Martin Vechev. Debin: Predicting debug information in stripped
In Proceedings of the 2018 ACM SIGSAC Conference on
binaries.
Computer and Communications Security, CCS ’18, pages 1667–1680.
ACM, 2018.
[60] SA Hex-Rays. IDA Pro: a cross-platform multi-processor disassembler
and debugger, 2014.
[61] Galois Inc. reopt. https://github.com/GaloisInc/reopt, 2020.
[62] Dae R Jeong, Kyungtae Kim, Basavesh Shivakumar, Byoungyoung
Lee, and Insik Shin. Razzer: Finding kernel race bugs through fuzzing.
In 2019 IEEE Symposium on Security and Privacy (S&P), pages 754–
768. IEEE, 2019.
[63] Anastasis Keliris and Michail Maniatakos Yakdan. ICSREF: A frame-
work for automated reverse engineering of industrial control systems
binaries. In NDSS, 2019.
[64] Mustakimur Rahman Khandaker, Wenqing Liu, Abu Naser, Zhi Wang,
and Jie Yang. Origin-sensitive control ﬂow integrity. In 28th {USENIX}
Security Symposium ({USENIX} Security 19), pages 195–211, 2019.
[65] Chung Hwan Kim, Taegyu Kim, Hongjun Choi, Zhongshu Gu, By-
oungyoung Lee, Xiangyu Zhang, and Dongyan Xu. Securing real-time
microcontroller systems through customized memory view switching.
In NDSS, 2018.
[66] Soomin Kim, Markus Faerevaag, Minkyu Jung, SeungIl
Jung,
DongYeop Oh, JongHyup Lee, and Sang Kil Cha. Testing intermediate
representations for binary analysis. In ASE, 2017.
[67] Taegyu Kim, Chung Hwan Kim, Hongjun Choi, Yonghwi Kwon,
Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. RevARM:
A platform-agnostic arm binary rewriter for security applications. In
ACSAC, 2017.
[68] J. Kˇroustek and P. Matula. Retdec: An open-source machine-code
decompiler. [talk], July 2018. Presented at Pass the SALT 2018, Lille,
FR.
[69] Vu Le, Mehrdad Afshari, and Zhendong Su. Compiler validation via
equivalence modulo inputs. In PLDI, 2014.
[70] Vu Le, Chengnian Sun, and Zhendong Su. Finding deep compiler bugs
via guided stochastic program mutation. In OOPSLA, 2015.
[71] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo
Kim, Long Lu, and Wenke Lee. Preventing use-after-free with dangling
pointers nulliﬁcation. In NDSS. Citeseer, 2015.
[72] JongHyup Lee, Thanassis Avgerinos, and David Brumley.
TIE:
Principled reverse engineering of types in binary programs. In NDSS,
2011.
[73] leepeter2019.
Run llvm-mctoll occurs error.
https://github.com/
microsoft/llvm-mctoll/issues/29, 2019.
[77] Zhibo Liu and Shuai Wang. How far we have come: testing decompi-
lation correctness of c decompilers. In Proceedings of the 29th ACM
SIGSOFT International Symposium on Software Testing and Analysis,
pages 475–487, 2020.
[78] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu.
Semantics-based obfuscation-resilient binary code similarity compari-
son with applications to software plagiarism detection. In FSE, 2014.
llvm
https://github.com/lifting-bits/mcsema#
bitcode
comparison-with-other-machine-code-to-llvm-bitcode-lifters, 2020.
[79] McSema.
of machine
Comparison
lifters.
code
to
[80] Microsoft. LLVM-mctoll. https://github.com/Microsoft/llvm-mctoll,
2020.
[81] Microsoft. Mctoll. https://github.com/microsoft/llvm-mctoll, 2021.
[82] Lili Mou, Ge Li, Lu Zhang, Tao Wang, and Zhi Jin. Convolutional neu-
ral networks over tree structures for programming language processing.
In Thirtieth AAAI Conference on Artiﬁcial Intelligence, 2016.
[83] Steven Muchnick et al. Advanced compiler design implementation.
Morgan kaufmann, 1997.
[84] Stefan Nagy, Anh Nguyen-Tuong, Jason D Hiser, Jack W Davidson,
and Matthew Hicks. Breaking through binaries: Compiler-quality
In 30th {USENIX}
instrumentation for better binary-only fuzzing.
Security Symposium ({USENIX} Security 21), 2021.
[85] Coseinc Nguyen Anh Quynh. Capstone. http://www.capstone-engine.
org/, 2021.
[86] National Security Agency (NSA). Ghidra.
resources/everyone/ghidra/, 2018.
https://www.nsa.gov/
[87] Trail of Bits. McSema. https://github.com/lifting-bits/mcsema, 2018.
[88] Trail of Bits. Polytracker: An LLVM-based instrumentation tool for
universal taint tracking, dataﬂow analysis, and tracing, 2021.
[89] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James
Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia
Gimelshein, Luca Antiga, et al. Pytorch: An imperative style, high-
performance deep learning library. In NIPS, 2019.
[90] David J Pearce, Paul HJ Kelly, and Chris Hankin. Efﬁcient ﬁeld-
sensitive pointer analysis of C. ACM Transactions on Programming
Languages and Systems (TOPLAS), 30(1):4–es, 2007.
[91] Kexin Pei, Jonas Guan, David Williams-King, Junfeng Yang, and
Suman Jana. Xda: Accurate, robust disassembly with transfer learning.
arXiv preprint arXiv:2010.00770, 2020.
[92] Kexin Pei, Zhou Xuan, Junfeng Yang, Suman Jana, and Baishakhi
Ray. TREX: Learning execution semantics from micro-traces for binary
similarity. In IEEE Symposium on Security and Privacy (SP), 2020.
[93] Sebastian Poeplau and Aur´elien Francillon. Systematic comparison
of symbolic execution systems: intermediate representation and its
In Proceedings of the 35th Annual Computer Security
generation.
Applications Conference, pages 163–176, 2019.
[94] David A Ramos and Dawson Engler. Under-constrained symbolic
In 24th {USENIX}
execution: Correctness checking for real code.
Security Symposium ({USENIX} Security 15), pages 49–64, 2015.
[95] rev.ng Srls. Rev.ng. https://rev.ng/, 2018.
[96] Philipp Dominik Schubert, Ben Hermann, and Eric Bodden. PhASAR:
An inter-procedural static analysis framework for c/c++. In TACAS (2),
pages 393–410, 2019.
[97] Edward J. Schwartz, Cory F. Cohen, Michael Duggan, Jeffrey Gennari,
Jeffrey S. Havrilla, and Charles Hines. Using logic programming to
recover c++ classes and methods from compiled executables. In CCS,
2018.
[98] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and
Dmitry Vyukov. AddressSanitizer: A Fast Address Sanity Checker.
In Proceedings of the 2012 USENIX Conference on Annual Technical
Conference, USENIX ATC’12, pages 28–28, 2012.
[99] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens,
Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe
Hauser, Christopher Kruegel, and Giovanni Vigna. SoK: (State of)
In IEEE
The Art of War: Offensive Techniques in Binary Analysis.
Symposium on Security and Privacy, 2016.
[100] Asia Slowinska, Traian Stancescu, and Herbert Bos. Howard: A
dynamic excavator for reverse engineering data structures. In NDSS,
2011.
[101] Dokyung Song, Julian Lettner, Prabhu Rajasekaran, Yeoul Na, Stijn
Volckaert, Per Larsen, and Michael Franz. SoK: sanitizing for security.
In 2019 IEEE Symposium on Security and Privacy (SP), pages 1275–
1295. IEEE, 2019.
[74] Xuezixiang Li, Qu Yu, and Heng Yin.
PalmTree: Learning an
assembly language model for instruction embedding. arXiv preprint
arXiv:2103.03809, 2021.
[75] Yujia Li, Chenjie Gu, Thomas Dullien, Oriol Vinyals, and Pushmeet
Kohli. Graph matching networks for learning the similarity of graph