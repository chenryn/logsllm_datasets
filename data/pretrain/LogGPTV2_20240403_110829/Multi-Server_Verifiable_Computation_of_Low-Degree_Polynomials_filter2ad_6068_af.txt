increasing. For each (t, m), we run the KeyGen, ProbGen and
Verify on VMc and run the Compute on VMs, respectively.
We also evaluate F (x) on VMc. We repeat each execution 5
times and record the average CPU time such that the standard
deviations are within 5% of the means.
Time cost. Fig. 1 plots the experimental results of Rt for the
five MSVC schemes and for all settings of (t, m) ∈ {1, 2, 3}×
{200, 400, . . . , 2000}. For Π1, Π2, Π4 and Π5, it shows that
Rt  1 for all m and Rt
tends to be ≈ 1.2 when m is large, which leads to a seemingly
surprising conclusion that the client will not benefit from using
Π3. However, we will see shortly that this is not always true
and whether one will benefit from Π3 largely depends on the
gap between the computing speed of the client and that of
the servers. On one hand, when m is large enough, we always
have that Tp + Tv = o(Tn) in all schemes. As a result, we will
roughly have Rt ≈ T ∗
c /Tn. On the other hand, each server in
Π1, Π2, Π4 and Π5 needs to evaluate F at a random point of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
10605
The experimental results of Rp⋆ (m = 2000)
TABLE III
Rp⋆
t = 1
t = 2
t = 3
Π1 Π2 Π3 Π4 Π5
2.3
2.8
4.0
3.9
5.1
5.9
2.2
3.9
5.4
3.5
6.1
8.7
2.9
3.9
5.1
TABLE IV
The estimated limits of Rp⋆ (m → ∞)
Rp⋆
Π1 Π2 Π3 Π4 Π5
2.1
2.6
t = 1
3.7
3.7
t = 2
4.8
5.3
t = 3
2.1
3.7
5.3
3.2
5.2
7.4
2.6
3.7
4.8
m
Fig. 2. The value of Rp⋆ = Tc/(Tn − Tp − Tv) for degree-2 polynomial
evaluations (d = 2, t = 1, 2, 3 and m = 200, 400, . . . , 2000 in all schemes)
Fm
q and the workload is roughly equal to that of computing
F (x). In our experiments, T ∗
c is needed by VMs evaluating F
once and Tn is needed by VMc evaluating F (x). Note that the
ratio of the speed of VMc to that of VMs is 1.9/3.6 ≈ 0.53.
Therefore, in the four schemes, given that the client and each
server have the same workload, we would have that Rt → 0.53
as m → ∞. This fact has been partially reflected in Fig. 1 as
Rt ≤ 0.6 starting from m = 1600. In Π3, the situation is
quite different. Each server has to evaluate F once, but at a
random point of Fm
q2. Based on the fast integer multiplication
of FLINT, the workload of each server is roughly twice of that
of the client. With our virtual machines, one would have that
Rt → 1.06 as m → ∞, which is partially reflected in Fig. 1.
In order for Rt  2.
Monetary cost. Fig. 2 plots the experimental results of
Rp for the five schemes and for all settings of (t, m) ∈
{1, 2, 3} × {200, 400, . . . , 2000}. For every t ∈ {1, 2, 3}, it
shows that the Rp⋆ value of every scheme is decreasing as m
is increasing. In particular, when m = 2000, the Rp⋆ values
are as shown in Table III. Therefore, for every t ∈ {1, 2, 3}
and Π ∈ {Π1, Π2, Π3, Π4, Π5}, as long as the ratio of the
price of VMc’s computation to that of VMs’s computation is
larger than the (t, Π)-entry of Table III, the client will benefit
in terms of monetary cost by using MSVC to evaluate a 2000-
variate polynomial of degree 2. When m → ∞, we expect the
Rp⋆ values of every scheme to converge. When m is large
enough, we have that Tp + Tv = o(Tn) and thus
Rp⋆ = Tc/(Tn−Tp−Tv) ≈ Tc/Tn ≈ kT ∗
c /Tn ≈ k·Rt, (19)
where k is the number of required servers in each scheme.
Given the estimated Rt limits (≈ 0.53 for Π1, Π2, Π4, Π5 and
≈ 1.06 for Π3), the estimated Rp⋆ limits (see Table IV) can
be easily computed as well. A simple comparison shows that
our experimental results of Rp⋆ (as shown in Table II) for
m = 2000 are both lower bounded by and quite close to the
estimated limits of Rp⋆ (as shown in Table IV). As per (19),
m
c −Tp−Tv) for degree-2 polynomial
Fig. 3. The value of Nt = Tk/(Tn−T ∗
evaluations (d = 2, t = 1, 2, 3 and m = 200, 400, . . . , 2000 in all schemes)
the Rp⋆ limits are linear in k and the Rt limits, respectively.
The client will benefit most from MSVC when k is small and
the computing gap between client and servers is large.
Break-even points. Only two of the schemes (Π1 and Π4)
have a non-empty KeyGen algorithm. Fig. 3 plots the exper-
imental results of Nt for these schemes and for all settings
of (t, m) ∈ {1, 2, 3} × {200, 400, . . . , 2000}. It shows that
Nt ≤ 7 when m is large enough. That is, if Tk is accounted,
then in terms of time cost the client will benefit from evaluat-
ing F at least 7 times. The actual values of Nm depend on our
choices of the Rp⋆
0, an upper bound of the Rp⋆ in (16). If we
choose Rp⋆
0 = 6 in both schemes, then for t = 1, 2, 3 we will
respectively have Nm ≤ 5, 8, 20 in these schemes. That is, in
terms of monetary cost the client will benefit from evaluating
F at least 5, 8, and 20 times, respectively.
F. Experimental Results: Polynomials of Higher Degree
We also consider higher-degree polynomials to have a more
complete overview of performance. In these experiments, we
choose d = 4, 8, 16, 32, 64, choose t = 1 and choose q to
be either the 129-bit prime or the 253-bit prime from Section
V-D. Given (q, d), the scale of a problem instance (F, x) ∈
P(q, m, d) × Fm
q can be measured with m. However, for our
choice of d, a small m may result in a huge n =(cid:0)m+d
(cid:1), the
number of coefficients in an m-variate polynomial of degree d.
For example, for (m, d) = (32, 10), we have n = 1471442973,
which is too large for a real application. Instead of using m, we
d
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
11606
(cid:102)Rp
d = 4
d = 8
d = 16
d = 32
d = 64
The estimated limits of Rp⋆ (m → ∞)
TABLE V
Π1
4.8
9.0
17.5
34.4
68.4
Π2
3.2
5.3
9.5
18.0
35.0
Π3
5.3
9.5
18.0
35.0
68.9
Π4
4.8
9.0
17.5
34.4
68.4
Π5
3.2
5.3
9.5
18.0
35.0
Fig. 4. The value of Rt = (Tp + Tv + T ∗
evaluations (d = 4, 8, 16, 32, 64, t = 1 and n = 106 in all schemes)
c )/Tn in higher-degree polynomial
Fig. 5. The value of Rp⋆ = Tc/(Tn−Tp−Tv) for higher-degree polynomial
evaluations (d = 4, 8, 16, 32, 64, t = 1 and n = 106 in all schemes)
will use the number of coefficients in F to measure the scale of
(F, x). We try to experiment with homogeneous polynomials
that have 106 coefficients. In particular, we choose (d, m) =
(4, 69), (8, 18), (16, 10), (32, 7), (64, 6) such that it is possible
to have a polynomial with 106 coefficients. For each setting
of (d, m), we run the KeyGen, ProbGen and Verify on VMc
and run the Compute on VMs. We also execute the native
computation of F (x) on VMc. We repeat each execution 5
times and record the average CPU time such that the standard
deviations are within 5% of the means.
Time cost. Fig. 4 plots the experimental results of Rt for the
five schemes and for all settings of (d, m). For Π1, Π2, Π4
and Π5, it shows that Rt 
1. Comparing with the degree-2 setting, these schemes have
quite similar performances for every d ∈ {4, 8, 16, 32, 64}.
Monetary cost. Fig. 5 plots the experimental results of Rp⋆ for
the five schemes and for all settings of (d, m). It shows that the
Rp⋆ value of every scheme is increasing as d is increasing. In
particular, these values are lower bounded by and quite close
to the estimated limits of Rp⋆ in Table V.
VI. APPLICATIONS
A. Curve Fitting with Private Data Points
Given a set of data points {(xi, yi)}m
i=1 that result from
an experiment or a real-life scenario, we may assume there
is a function y = f (x) that passes through the data points
and perfectly represents the quantity of interest at all non-data
points. Curve fitting [5] is the process of constructing a curve
or function that has the best fit to the data points. When the
data points exhibit a significant degree of error, the strategy is
to derive a single curve that represents the general trend of the
data and may be realized with least squares regression (LSR)
[34]. When the data points are very precise, the strategy is to
fit a curve or a series of curves that pass directly through each
of the points and may be realized with interpolation [34].
In LSR, to fit a degree-d polynomial y =(cid:80)d
idea is to minimize S = (cid:80)m
i=1(yi −(cid:80)d
j=0 ajxj
j=0 ajxj, the
i )2, the sum
of the squares of the residuals between the measured values
{yi}m
i=1 and the values calculated with the model. The best
= 0 for 0 ≤ i ≤ d and then
fit is obtained by setting ∂S
solving a linear equation system in {ai}d
∂ai
i=0. In particular, the
solution of each ai may be represented as a rational function
of the data points {(xi, yi)}m
i=1. For example, for d = 1, both
the numerator and the denominator of the rational function are
polynomials of degree ≤ 3 in the 2m variables {(xi, yi)}m
i=1.
In general, fitting with a degree-d polynomial requires one
to evaluate polynomials whose degrees are determined by
d. In particular, small values of d are usually preferred
and approached first [58]. Therefore, low-degree polynomial
evaluations will be frequently used. The same situation occurs
in multiple linear regression and interpolation.
In real-life scenarios, the data points may contain highly
sensitive personal information such as the patients’ brain white
matter microstructure [77] and inspiratory pressure [65]. Our
schemes allow the client to outsource curve fitting with private
data points to cloud, without leaking the personal information.
B. PIR with Cheating Detection
PIR [37] is a cryptographic primitive that has important real
applications [40]. It allows a client to retrieve an item Fi from
a database F = (F1, F2, . . . , Fn) and reveals no information
about i to the database server(s). In a t-private k-server PIR
[94], each server keeps a copy of F and answers to the client’s