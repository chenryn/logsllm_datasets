cure source to eliminate potential transformation carried out
by the adversary [14, 3]. Moreover, it may include sub-
stituting the programs to remove vulnerabilities existent in
previous versions (e.g., software bugs that could crash the
system or software errors exploitable by outside attackers).
Thus, by using a well-planned strategy of proactive recov-
ery, Atexhaust can be constantly postponed in order that re-
source exhaustion never happens before Atend. This intu-
ition is illustrated in Figure 2, featuring a system A with a
proactive recovery subsystem A(cid:1). In Figure 2a we can see
that as execution approaches Atexhaust, the system may risk
exhaustion-failures. However (Figure 2b), the execution of
a proactive recovery procedure by A(cid:1) – triggered at instant
prtstart and terminated at instant prtend – causes the post-
poning of Atexhaust.
immune to exhaustion-failures
vulnerable to exhaustion-failures
A
A’
A
A’
Atexhaust
(a)
Atexhaust
2
1
prtstart
prtend
(b)
t
t
t
t
Figure 2. (a) Before proactive recovery being
executed, A exhaustion-safety is in risk of be-
ing violated; (b) after the execution of proac-
tive recovery (1), Atexhaust is postponed (2).
The following theorem states a necessary condition for
the behavior illustrated in Figure 2b.
Theorem 3.4. Consider a system A enhanced with a
proactive recovery subsystem A(cid:1)
, which rejuvenates2 sys-
tem A. Consider that after a rejuvenation i, Atexhaust
is bounded by T i
exhaust, and that the time of comple-
the (next) rejuvenation i + 1 is bounded by
tion of
rejuvenation,∀A, i. If Atend has an unbounded value (i.e.,
T i
2For instance, the rejuvenation may be periodic.
(cid:1)Tend : Atend
if T i
rejuvenation < T i
exhaust,∀A, i.
≤ Tend,∀A), then A is exhaustion-safe only
exhaust ≤ T i
Proof. In order to prove by contradiction, let us assume that
∃A, i : T i
rejuvenation and A is exhaustion-safe.
exhaust ≤ T i
rejuvenation ≤
T i
Atend. Therefore, A is not exhaustion-safe. This contradicts
the hypothesis.
rejuvenation ⇒ Atexhaust
≤ T i
Observe that this theorem applies to any type of system
A and A(cid:1), independently of their synchrony assumptions.
Let us now focus on asynchronous proactive recovery.
An asynchronous system with proactive recovery is repre-
sented as in Figure 3. The asynchronous system A is en-
hanced with a subsystem A(cid:1) responsible for the proactive
recovery operations. As expected, A(cid:1) is also asynchronous
because it is part of A.
asynchronous
A
A’
Figure 3. A system A enhanced with a proac-
tive recovery subsystem A(cid:1). Both A and A(cid:1)
run asynchronously.
Some proactive recovery protocols for asynchronous
systems have been proposed in the literature [21, 2, 3]. De-
spite having different goals, their effectiveness depends on
the same assumption: regular execution. They assume that
the proactive subsystem is regularly executed, and that the
rejuvenation operation does not take a very long period to
complete. Now suppose that a proactive recovery system
makes timing assumptions (implicit or explicit) about the
environment, which by deﬁnition, can be violated in an
asynchronous setting. Figure 4 shows an example of how
an adversary can deploy an exploit that takes advantage of
these timing assumptions and consequently compromise A
exhaustion-safety. Firstly, the adversary forces the viola-
tion of the timing assumptions by slowing the system down
through more or less visible actions (e.g., by compromis-
ing the clock behavior) and in this way delays the trigger-
ing of the proactive recovery procedure. In consequence,
the rejuvenation is not completed in time to avoid A’s re-
source exhaustion. Between resources being exhausted at
Atexhaust and resources being rejuvenated at prtend, there
is an interval of time where A’s correctness may be com-
promised. Although A immunity to exhaustion-failures is
reestablished after prtend, its correctness may already have
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:59 UTC from IEEE Xplore.  Restrictions apply. 
, prtend
been corrupted if some of its safety properties were violated
] through some exhaustion-
in the interval [Atexhaust
failure. Notice that although we consider A(cid:1) as a subsystem
that is inside A, Figure 4 represents A(cid:1) as being immune
]
to exhaustion-failures during the period [Atexhaust
, prtend
when A is vulnerable. Our intention was simply to ease the
understanding of this ﬁgure. For the interested reader, the
insight about this problem concerns coverage of timing as-
sumptions and contamination by timing failures, and was
equated in [17].
immune to exhaustion-failures
vulnerable to exhaustion-failures
A
A’
1
timing
failure!
Atexhaust
prtstart
2
prtstart
prtend
t
t
Figure 4. The violation of A(cid:1)’s timing assump-
tions (1), causes the delay of proactive recov-
ery execution (2), which thus fails to guaran-
tee A exhaustion-safety.
is bounded by T i
So, the asynchronous proactive recovery subsystem A(cid:1)
effectiveness depends on timing assumptions that can be vi-
olated, and for that reason A(cid:1) cannot permanently guarantee
the exhaustion-safety of the asynchronous system A. More
formally:
Corollary 3.5. Consider an asynchronous system A (i.e.,
≤ Tend,∀A) enhanced with an asyn-
(cid:1)Tend : Atend
chronous proactive recovery subsystem A(cid:1)
, which rejuve-
nates system A. Consider that after a rejuvenation i,
Atexhaust
exhaust and that the time of
completion of the (next) rejuvenation i + 1 is bounded by
rejuvenation,∀A, i. Then, A is not exhaustion-safe.
T i
Proof. Theorem 3.4 states that if Atend has an unbounded
value, then A is exhaustion-safe only if T i
rejuvenation <
exhaust,∀A, i. Given that A is asynchronous, Atend has
T i
an unbounded value and the asynchrony of A(cid:1)
implies
that it cannot guarantee the condition T i
rejuvenation <
exhaust,∀A, i. Therefore, A is not exhaustion-safe.
T i
Regarding adversary models, some authors [21] distin-
guish between the adversary being an agent whose ability
to compromise the system depends on the time available
for attacks, and it relying on intrinsic aspects of the sys-
tem, such as the operating system or application software.
In reality these are false alternatives since both facets must
be present:
following [18], for there to be an intrusion,
there must be a vulnerability (e.g., “an intrinsic aspect of
the system”), which is attacked successfully (and that re-
quires some time). From the discussion above, it should be
evident that we follow this composite adversary model.
This section showed that even using asynchronous
proactive recovery, it is impossible to have exhaustion-safe
f fault/intrusion-tolerant asynchronous systems, namely in
the presence of malicious faults.
To illustrate these conclusions in a real system, we
will describe in the next section a possible attack to
CODEX [13] that is based on the time-related vulnerabil-
ity of the proactive recovery protocols it uses, predicted by
our results under P SM and exhaustion-safety.
4 An attack to the proactive recovery scheme
of CODEX
CODEX (COrnell Data EXchange) is a recent dis-
tributed service for storage and dissemination of se-
crets [13]. It binds secrets to unique names and allows sub-
sequent access to these secrets by authorized clients. Clients
can call three different operations that allow them to manip-
ulate and retrieve bindings: create to introduce a new name;
write to associate a (presumably secret) value with a name;
and read to retrieve the value associated with a name.
The service makes relatively weak assumptions about
the environment and the adversaries. It assumes an asyn-
chronous model where operations and messages can suf-
fer unbounded delays. Moreover, messages while in transit
may be modiﬁed, deleted or disclosed. An adversary can
also insert new messages in the network. Nevertheless, it is
assumed fair links, which means that if a message is trans-
mitted a number of times from one node to another, then it
will eventually be received.
CODEX enforces three security properties. Availability
is provided by replicating the values in a set of n servers. It
is assumed that at most f servers can (maliciously) fail at
the same time, and that n ≥ 3f + 1. Cryptographic oper-
ations such as digital signatures and encryption/decryption
are employed to achieve conﬁdentiality and integrity of both
the communication and stored values. These operations
are based on public key and threshold cryptography. Each
client has a public/private key pair and has the CODEX
public key. In the same way, CODEX has a public/private
key pair and knows the public keys of the clients. The pri-
vate key of CODEX however is shared by the n CODEX
servers using an (n, f + 1) secret sharing scheme3, which
3In a (n, f + 1) secrete sharing scheme, there are n shares and any
subset of size f + 1 of these shares is sufﬁcient to recover the secret.
However, nothing is learnt about the secret if the subset is smaller than
f + 1.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:59 UTC from IEEE Xplore.  Restrictions apply. 
means that no CODEX server is trusted with that private
key. Therefore, even if an adversary controls a subset of f
or less replicas, she or he will be unable to sign as CODEX
or to decrypt data encrypted with the CODEX public key.
In CODEX, both requests and conﬁrmations are signed
with the private key of, respectively, the clients or CODEX
(which requires the cooperation of at least f + 1 replicas).
Values are stored encrypted with the public key of CODEX,
which prevents disclosure while transit through the network
or by malicious replicas. The details of the CODEX client
interface, namely the message formats for each operation,
can be found in [13]. At this moment, we just want to point
out that by knowing the CODEX private key, one can vio-
late the conﬁdentiality property in different ways.
4.1 Overview of the proactive recovery scheme
An adversary must know at least f + 1 shares in or-
der to construct the CODEX private key. CODEX assumes
that a maximum of f nodes running CODEX servers are
compromised at any time, with f = n−1
3 . This assump-
tion excludes the possibility of an adversary controlling
f + 1 servers, but as the CODEX paper points out, “it
does not rule out the adversary compromising one server
and learning the CODEX private key share stored there, be-
ing evicted, compromising another, and ultimately learning
f +1 shares”. To defend against these so called mobile virus
attacks [14], CODEX employs the APSS proactive secret
sharing protocol [21]. “This protocol is periodically exe-
cuted, each time generating a new sharing of the private key
but without ever materializing the private key at any server”.
Because older secret shares cannot be combined with new
shares, the CODEX paper concludes that “a mobile virus
attack would succeed only if it is completed in the interval
between successive executions of APSS”. This scenario can
be prevented from occurring by running APSS regularly, in
intervals that “can be as short as a few minutes”.
4.2 An example attack
We now describe an attack that explores the asynchrony
of APSS with the goal of increasing its execution interval,
to allow the retrieval of f +1 shares and the disclosure of the
CODEX private key. Once this key is obtained, it is trivial
to breach the conﬁdentiality of the service.
The intrusion campaign is carried out by two adversaries,
ADV1 and ADV2. ADV1’s attack takes the system into a
state where the ﬁnal attack can be performed by the second
adversary. As expected, both adversaries will execute the
attacks without violating any of the assumptions presented
in the CODEX paper. ADV1 basically delays some parts