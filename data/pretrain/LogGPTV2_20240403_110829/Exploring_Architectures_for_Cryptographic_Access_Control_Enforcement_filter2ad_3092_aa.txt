title:Exploring Architectures for Cryptographic Access Control Enforcement
in the Cloud for Fun and Optimization
author:Stefano Berlato and
Roberto Carbone and
Adam J. Lee and
Silvio Ranise
Exploring Architectures for Cryptographic Access Control
Enforcement in the Cloud for Fun and Optimization
Stefano Berlato
Security & Trust Research Unit
Fondazione Bruno Kessler
Trento, Italy
PI:EMAIL
Adam J. Lee
Computer Science Department
University of Pittsburgh
Pittsburgh, United States
PI:EMAIL
Roberto Carbone
Security & Trust Research Unit
Fondazione Bruno Kessler
Trento, Italy
PI:EMAIL
Silvio Ranise
Security & Trust Research Unit
Fondazione Bruno Kessler
Trento, Italy
PI:EMAIL
ABSTRACT
To facilitate the adoption of cloud by organizations, Cryptographic
Access Control (CAC) is the obvious solution to control data shar-
ing among users while preventing partially trusted Cloud Ser-
vice Providers (CSP) to access sensitive data. Indeed, several CAC
schemes have been proposed in the literature. Despite their differ-
ences, available solutions are based on a common set of entities—e.g.,
a data storage service or a proxy mediating the access of users to
encrypted data—that operate in different (security) domains—e.g.,
on-premise or the CSP. However, the majority of the CAC schemes
assumes a fixed assignment of entities to domains; this has security
and usability implications that are not made explicit and can make
inappropriate the use of a CAC scheme in certain scenarios with
specific requirements. For instance, assuming that the proxy runs
at the premises of the organization avoids the vendor lock-in effect
but may substantially mine scalability.
To the best of our knowledge, no previous work considers how to
select the best possible architecture (i.e., the assignment of entities
to domains) to deploy a CAC scheme for the requirements of a
given scenario. In this paper, we propose a methodology to assist
administrators to explore different architectures of CAC schemes
for a given scenario. We do this by identifying the possible archi-
tectures underlying the CAC schemes available in the literature
and formalize them in simple set theory. This allows us to reduce
the problem of selecting the most suitable architecture satisfying
a heterogeneous set of requirements arising from the considered
scenario to a Multi-Objective Optimization Problem (MOOP) for
which state-of-the-art solvers can be invoked. Finally, we show how
the capability of solving the MOOP can be used to build a prototype
tool assisting administrators to preliminary perform a “What-if”
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’20, June 1–5, 2020, Taipei, Taiwan
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-6750-9/20/06...$15.00
https://doi.org/10.1145/3320269.3384767
analysis to explore the trade-offs among the various architectures
and then use available standards and tools (such as TOSCA and
Cloudify) for automated deployment in multiple CSPs.
CCS CONCEPTS
• Security and privacy → Access control; Cryptography.
KEYWORDS
Cryptographic Access Control; Architecture; Optimization
ACM Reference Format:
Stefano Berlato, Roberto Carbone, Adam J. Lee, and Silvio Ranise. 2020.
Exploring Architectures for Cryptographic Access Control Enforcement
in the Cloud for Fun and Optimization. In Proceedings of the 15th ACM
Asia Conference on Computer and Communications Security (ASIA CCS ’20),
June 1–5, 2020, Taipei, Taiwan. ACM, New York, NY, USA, 14 pages. https:
//doi.org/10.1145/3320269.3384767
1 INTRODUCTION
Cryptographic Access Control (CAC) allows organizations and
users to enforce Access Control (AC) on cloud-hosted sensitive data
while preserving data confidentiality with respect to both external
attackers and the cloud itself. Several CAC schemes have been pro-
posed in the literature, each embodying particular features through
different cryptographic primitives. Among others, Attribute-Based
Encryption (ABE) is employed by some CAC schemes [13, 18, 39]
due to its ability to enforce rich Attribute-Based AC (ABAC) policies.
Other schemes combine asymmetric and symmetric cryptography
in hybrid cryptosystems [10], employ lazy revocation [40] or ex-
press other AC models like Role-Based AC [41] (RBAC). Others
adopt proxy re-encryption [32] or onion encryption [29] to offload
the burden of cryptographic operations to the cloud.
Problem Statement. While these CAC schemes offer advanced
and remarkable features, they are often not suitable for a concrete
use [10]. For instance, ABE applied to AC in the cloud “only exists
in an academic world and it is often difficult to find a practical use
of ABE for a real application” [18]. Since researchers often focus
on high-level features only, little space is left for aspects related
to the deployment of their scheme in a given scenario. An impor-
tant aspect for the deployment of CAC schemes is the definition
of the software entities that compose the CAC scheme along with
the entities’ logical or physical locations (i.e., the definition of the
“architecture” of the CAC scheme). However, CAC schemes are sel-
dom provided with an architecture or this is usually fixed and it
cannot adapt to the requirements (e.g., enhance architecture scal-
ability or reduce architecture-related monetary costs) of different
scenarios. Indeed, while CAC has been studied in several scenarios
like eGovernment [15, 21] and eHealth [1, 7, 15, 25, 28, 32], we
note that different scenarios have different requirements on the
architectures of CAC schemes (i.e., architectural requirements). For
instance, the eGovernment scenario may favour scalability and reli-
ability of the architecture, while the eHealth scenario could require
more control over the data. Unfortunately, the lack of study on
the relationship between the architectures and the requirements
of scenarios hampers the adoption of CAC schemes, since these
are incapable of adapting to the mutable requirements of different
scenarios. In other words, there is little or no research on how to fill
the gap between CAC schemes in the abstract and an architecture
for a deployment in a given scenario.
Solution. In this paper, we propose a methodology for finding
the optimal architecture meeting the specific requirements of a
given scenario for the enforcement of CAC schemes in the cloud.
In particular, our contributions are as follows:
• we provide an architectural model to capture elements—
namely resources, entities and domains— commonly involved
in the architectures of CAC schemes. The architectural model
formally expresses the set of the possible architectures of
CAC schemes which preserve the expected confidentiality,
integrity and availability properties of the involved resources.
Then, to assess the model generality, we illustrate how the
architectures of some state-of-the-art CAC schemes can be
specified in our architectural model;
• we define how to evaluate different architectures based on
security and usability goals that may be desirable in different
scenarios. Then, we formalize a MOOP (which can be solved
leveraging well-known techniques for Pareto optimality) to
select the most suitable architecture that satisfies the goals
of a specific scenario;
• we give a proof-of-concept application of how the architec-
tural model and the MOOP can be used to assist administra-
tors in the deployment of CAC schemes architectures. We
develop a web dashboard1 to solve a specific formalization
of the optimization problem and perform a “What-if” anal-
ysis to further tune the requirements of the scenario and
check the resulting architecture in real-time. To ensure cloud
portability, interoperability and automatic deployment of the
resulting architecture, we rely on the TOSCA (Topology and
Orchestration Specification for Cloud Applications) OASIS
standard to automatically generate a deployable specification
of the resulting architecture. Finally, we implement a CAC
scheme supporting such an architecture (i.e., the scheme pro-
posed in [10]) and provide a fully working prototype with
Amazon Web Services (AWS).
The paper is structured as follows. In Section 2 we introduce
the background. In Section 3, we illustrate two important scenarios
1see https://sites.google.com/view/asiacss2020cryptoac/
often considered in the cloud-relevant literature, namely eGovern-
ment and eHealth, while in Section 4 we introduce our architectural
model. We present the optimization problem in Section 5 and our
validation deployment in Section 6. In Section 7 we discuss related
work and we conclude the paper with final remarks and future
work in Section 8.
2 BACKGROUND
In this section, we introduce AC, RBAC and present the high-level
functioning of a cryptographic RBAC scheme.
2.1 Access Control
Samarati and De Capitani di Vimercati [34] defined AC as “the pro-
cess of mediating every request to resources maintained by a system
and determining whether the request should be granted or denied”.
Resources usually consist of data such as files and documents. AC
is traditionally divided into three levels:
• Policy: this abstract level consists of the rules stating which
users can perform which operations on which resources. The
policy is usually defined by the owner of the resources or of
the system (e.g., the organization);
• Model: this intermediate level is a formal representation of
the policy (e.g., RBAC [35] and ABAC [16] are two models)
giving the semantics to granting or denying users’ requests;
• Enforcement: this concrete level comprehends the hardware
and software entities that enforce the policy based on the
chosen model. The physical or logical location of these en-
tities along with their interactions (i.e., the architecture) is
part of the enforcement level.
These three levels are independent of each other. This allows eval-
uating different enforcement mechanisms for the same policy and
model.
RBAC is one of the most widely adopted AC models in which
Users are assigned to one or more roles. In the context of an orga-
nization, a role reflects an internal qualification (e.g., employee).
Permissions are assigned to one or more roles by administrators
of the policy. Users activate some roles to access the permissions
needed to finalize their operations (e.g., read a file). Formally, the
state of an RBAC policy can be described by the set of users U,
roles R, permissions P and the assignments users-roles UR ⊆ U × R
and roles-permissions PA ⊆ R × P. A user u can use permission p if
∃r : ((u, r) ∈ UR) ∧ ((𝑟, 𝑝) ∈ PA). We note that role hierarchies can
always be compiled away by adding suitable pairs to UA.
There are two main classes of enforcements for AC. In the first
class, a trusted central entity decides whether to grant a specific
action on a resource to a given user. All resources are stored in one
or more trusted logical or physical locations (i.e., domains) to which
the trusted entity has full access. Unfortunately, this trusted entity
may not always be present in every scenario. Therefore, the second
class studies the enforcement of AC policies in a partially trusted
domains [4, 9]. A partially trusted domain is a domain controlled
by a third-party (e.g., an external organization or a cloud service
provider) which faithfully performs the assigned instructions (e.g.,
store the data) but, at the same time, it tries to extract information
from the stored data. If data are sensitive, this behaviour may be
undesirable. A CSPs is an example of a partially trusted domain,
as traditionally assumed in the literature of cloud computing [5].
Indeed, a report by the U.S. Federal Trade Commission [31] states
that CSPs regularly collect companies’ data without the latter’s
knowledge. When trust on the participant entities is limited, re-
sources are often encrypted to ensure confidentiality (e.g., through
encryption) and integrity (e.g., through signatures).
2.2 Cryptographic Access Control Schemes
In partially trusted environments, CAC is often used to enforce AC
while ensuring the confidentiality of sensitive data. Data are en-
crypted and the permission to read the encrypted data is embodied
by the secret decrypting keys. While implying a further compu-
tational burden (i.e., the cryptographic operations), CAC allows
encrypted data to be stored in partially trusted domains.
𝑢) and (ks
𝑟 is encrypted with kp
For concreteness, we present the CAC scheme proposed in [10]
for enforcing crypographic RBAC policies, although our findings
can be generalized for other CAC schemes. In the proposed scheme,
each user 𝑢 and each role 𝑟 is provided with a pair of secret and pub-
𝑟 ), respectively. Each file is encrypted
lic keys (ks
with a different symmetric key ksym. To assign a user to a role, the
role’s secret key ks
𝑢 . To
give read permission to a role, the symmetric key ksym is encrypted
with kp
𝑟 . The use of both secret-public and
symmetric cryptographic schemes is usually called “Hybrid Encryp-
tion”. The policy is enforced through the encrypted cryptographic
keys and further auxiliary data (e.g., files version numbers and dig-
ital signatures), together referred to as metadata. Both encrypted
data and metadata are stored in the cloud. To read a file, a user
performs the following actions through a software entity usually
called proxy:
𝑟 , resulting in {ksym }kp
𝑢, resulting in {ks
𝑟 }kp
𝑢, kp
𝑟 , kp
(1) The user decrypts the role’s encrypted secret key {ks
𝑟 }kp
𝑢 with
his secret key ks
𝑢, obtaining ks
𝑟 ;
(2) The user decrypts the encrypted symmetric key {ksym }kp
𝑟
with ks
𝑟 , obtaining ksym;
(3) The user decrypts the file with ksym.
To write on a file, a user performs the same operations to obtain
the symmetric key ksym and then sends the new (encrypted) file
to the cloud. Finally, an entity in the cloud, usually called Refer-
ence Monitor (RM), checks whether the user has actually write
permission before accepting the new file.
3 SCENARIOS AND PROBLEM STATEMENT
We study scenarios in which an organization outsources the storage
of sensitive data to the cloud and wants to use a CAC scheme to
preserve the data confidentiality in presence of partially trusted
Cloud Service Provider (CSP). Besides the basic requirement of
ensuring data confidentiality (i.e., besides enforcing the AC pol-
icy), each scenario has different architectural requirements (e.g.,
simplify maintenance or enhance reliability). We note that differ-
ent CAC schemes architectures have a different impact on these
requirements. For instance, the architecture of the CAC scheme
presented in Section 2.2 assumes the data and the RM to stay in
the cloud domain, while the proxy is installed in the computer of
each user. By using the cloud, this architecture gains scalability
and reliability, but it may suffer from high cloud-related monetary
costs and the negative “Vendor Lock-in” effect, i.e., the more cloud
services are used, the more difficult is to switch to another cloud.
Hosting the RM on the premises of the organization can partially re-
lieve these issues but may give rise to other concerns (e.g., software
maintenance effort and weakness to Denial-of-Service attacks). In
this paper, we develop a tool-supported methodology that assists
administrators in evaluating these kinds of trade-offs.
Preliminary, we present two scenarios often studied in the lit-
erature of CAC schemes, namely eGovernment and eHealth. We
discuss their requirements and highlight the importance of carefully
analyzing architectural trade-offs when deploying a CAC scheme.
3.1 eGovernment Scenario
The eGovernment scenario is getting more attention [15, 21] as
the Public Administrations (PAs) in different countries (e.g., Italy2,
Spain3) start a digitalization process to simplify the maintenance
of their infrastructure by using the cloud.4
Based on technologies that include mobile and web applications
together with electronic identity services (besides cloud computing),
PAs can develop and provide a portfolio of public services. Suppose
a PA wants to allow citizens to access government-issued personal
documents (e.g., tax certificates) from anywhere and anytime. A
European citizen may use eIDAS5 to authenticate in an online
service of a foreign European country. Then, through a CAC scheme,
the citizen may share his data (e.g., an electronic passport or the
tax certificate) with a public authority of the foreign European
country while still preserving end-to-end confidentiality [15]. We
summarize some of the most important architectural requirements
of the eGovernment scenario:
• eGR1 - enable citizens’ access from anywhere and anytime;
• eGR2 - simplify the maintenance of the architecture;
• eGR3 - limit CSP-related costs for budget constraints;
• eGR4 - prioritize the scalability of the services.
It should be clear how difficult it is to select the most suitable
CAC scheme architecture for the requirements of the eGovernment
scenario, as this means finding the architecture that simultaneously
maximizes the achievement of each requirement.
3.2 eHealth Scenario
The problem of storing medical data in the cloud has been widely
studied in the literature [1] by many researchers [7, 15, 21, 25,
28, 32, 36, 40], along with the eHealth scenario requirements. For
instance, Hörandner et al. [15] discussed the possible need for track-
ing patients’ medical data from multiple devices (e.g., glucometers)
continuously. These data are sent to the smartphone and finally en-
crypted and uploaded to the cloud. Domingo-Ferrer et al. [7] pointed
out that, besides medical data (e.g., Blood sugar, LDL Cholesterol),
also metadata should be hidden from the CSP, since they may leak
sensitive information. Suppose a person with a mental disorder is
hospitalized in a clinic specialized for treating mental disorders. The
clinic is storing in the cloud the patients’ medical data encrypted
2https://www.agid.gov.it/it/infrastrutture/cloud-pa
3https://joinup.ec.europa.eu/collection/egovernment/news/spanish-government-
approv
4https://joinup.ec.europa.eu/
5https://www.eid.as/home
under a CAC scheme. However, suppose the CAC scheme expects
the patient’s name to be included in the metadata (e.g., in the AC
policy or in the name of the file). Therefore, the CSP may infer
that a specific person has a mental disorder. Consequently, the CSP
may share this information for targeted advertisements or with a
health insurance company that may then increase the insurance
premium of the person. We summarize some of the most important
architectural requirements of the eHealth scenario:
• eHR1 - hide metadata to avoid information leaking;
• eHR2 - prioritize redundancy to avoid medical data loss;
• eHR3 - limit the vendor lock-in effect.
As for the eGovernment scenario, it is not trivial how to find the
architecture satisfying all or the highest number of these require-
ments at the same time.
3.3 Problem Characterization
Generalizing the scenarios presented in Section 3.1 and Section 3.2,
we are interested in finding the CAC scheme architecture that
strikes the best possible trade-off among the several requirements
of a scenario. Depending on the scenario, there are many security
and usability goals to consider and requirements to balance. There-
fore, we argue that there is no single CAC scheme architecture that
fits all scenarios. There is a need to carefully evaluate different ar-
chitectures and find the one that maximizes the achievement of the
requirements of each scenario. We do this by first formalizing the
notion of CAC scheme architecture (Section 4) and then reducing
the problem of finding the optimal architecture to a multi-objective
optimization problem [22] (Section 5).
4 A MODEL FOR CAC ARCHITECTURES
While CAC schemes have different features, their architectures
leverage several common elements (e.g., cryptographic keys, proxy,
and reference monitor). We identify three sets to contain the basic
building blocks of our model, namely (cryptographic) Resources,
Domains and Entities. We also consider the set Properties to con-
tain the three basic security properties, namely C(onfidentiality),
I(ntegrity), and A(vailability). These sets are linked together by six
relationships: domains can contain (CanContain) entities and pre-
serve or not (Preserves) the security properties of resources, while
entities use (Uses) and host (Hosts) resources and inherit (Inherits) se-
curity properties required (Requires) by resources. Figure 1a shows
the situation as an Entity-Relation diagram where sets are depicted
as rectangles with rounded corners and relations as diamonds.
Below, we define the three sets and six relations and explain how
they are combined to specify an architecture for a CAC scheme. To
show expressiveness and adequacy, we specify several architectures
of CAC schemes proposed in the literature as instances of our
architectural model. Formally, we work in basic set theory and use
the standard notions of set membership (∈), containment (⊆), and
set comprehension ({·| · · · }). Sometimes, we write 𝑋(𝑞) to denote
𝑞 ∈ 𝑋 for 𝑞 an element (a tuple) and 𝑋 a set (relation, respectively).
4.1 Cryptographic Resources and Properties
The set Resources contains (cryptographic) resources of the follow-
ing types (see the column Resource in Table (b) of Figure 1):
(a) Elements and Relationships
(b) 𝑅𝑒𝑞𝑢𝑖𝑟𝑒𝑠(𝑟𝑒𝑠, 𝑝𝑟𝑜)
Property
Resource
encrypted data
secret keys
metadata
A
I
C
✗
✓ ✓
✓
✓ ✓