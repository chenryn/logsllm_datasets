来自nmask博客：https://thief.one/2017/08/09/2/
前段时间做了一次不算成功也不算完整的linux内网渗透，不算成功是因为并没有拿下内网中其他服务器的权限，不算完整是因为由于某些原因测试被迫暂时中止。虽然这次linux内网渗透不算是一个很好的教学案例，但我还是决定把过程记录一下，尤其重点记录linux内网渗透的思路，以防遗忘。
网上关于内网渗透的资料很多，我在做测试之前也是翻阅了很多资料。本篇标题突出linux，是因为本次测试不涉及windows系统，当然linux与windows内网渗透的原理差不多，只不过使用的工具有所区别。
### 收集测试网络环境
当我们拿到一台目标内网服务器，或者说肉鸡服务器，首先要做的就是收集信息。而在我看来需要收集的信息中，最重要的之一便是肉鸡的网络环境。
#### 实验环境
首先介绍下本次测试的服务器环境：
  * 攻击机Mac：110.xx.xx.xx 外网
  * 肉鸡centos：192.168.16.x 目标内网16网段系统
  * 内网渗透范围：192.168.17.0/24 目标内网17网段系统
本次测试模拟假设：由于肉鸡服务器上对外开放了存在漏洞的web应用，被入侵植入webshell。  
本次测试目的：通过肉鸡服务器上的shell，深入渗透内网17网段的服务器。
#### 收集测试哪些网络数据？
ok，目前我已经拥有了肉鸡的shell，那么该收集肉鸡服务器的哪些网络环境呢？又该如何去测试？我认为至少要收集以下几点网络环境信息：
  * 肉鸡服务器与外网的连通性
  * 肉鸡服务器与内网其他网段的连通性
  * 肉鸡服务器与外网之间是否有端口访问限制
  * 肉鸡服务器与内网其他网段之间是否有端口访问限制
注：连通性主要是指能否ping通，需要双方互相ping测试；端口访问限制，指的是目标网络边界是否有堡垒机或者防火墙，对进出的端口是否有做限制。
#### 端口访问限制测试
ping测试这里不介绍了，主要说下如何测试端口访问限制，可以使用的工具如下：
  * curl、wget（可连接web服务，主要为80、443、8000+端口）
  * telnet（可主动连接指定ip的指定port）
  * nmap（可扫描端口，open或者filter）
  * ncat（可以创建端口监听，也可以主动连接）
  * python（可主动创建端口监听）  
……
在测试端口访问限制前，我们先要搞清楚当前的网络环境。本次测试中，攻击机在外网而肉鸡在内网，因此正常情况下攻击机是无法直接访问到肉鸡上某个端口的（需要网络边界路由器做端口映射）。
##### 反向连接测试
我们在测试端口访问限制时，首先可以利用ncat在攻击机上监听一个端口。
    ncat -l -p 9999
然后利用ncat或者telnet等工具在肉鸡上尝试连接，我称之为反向连接测试。
    ncat 110.xx.xx.xx 9999
注：监听的端口可以随机选取，尽量选取多个端口尝试多次；如果肉鸡能够访问攻击机的任何端口，说明目标网络边界没有对出方向的连接做限制，了解这方面的信息对后面的端口转发有很大好处。
##### 正向连接测试
我们也可以在肉鸡上监听一个端口，攻击机上尝试连接（这里连接的是肉鸡的外网ip地址，肉鸡对外开放的web应用肯定是以一个外网ip或者域名的形式存在，而该ip在本次测试中并不是肉鸡真正的ip地址，是目标边界网络设备的ip，原理是通过端口映射将网络设备（外网ip）上的web端口映射到了肉鸡（内网ip）的web端口上），我称之为正向连接测试。  
尝试连接肉鸡外网地址的端口，意义在于有些粗心的管理员会在网络设备上设置全端口映射，也就是说肉鸡上监听任何端口都能映射到网络边界设备的相同端口上，那么这跟肉鸡服务器直接处在外网就没差了。
### 收集服务器信息
收集信息可以说是渗透测试的第一步，内网渗透也一样，收集的服务器信息越多，渗透的成功率就越大。
#### 查看系统内核
linux系统上查看内核版本如下：
    lsb_release –a
一般系统的入侵途径是先提权，而提权可以通过linux内核漏洞进行，因此可以先查看linux内核版本，然后根据内核[寻找exp的网站](https://www.kernel-exploits.com/)，上传exp进行提权。由于本次测试不涉及提权部分，因此不做测试，另外补充一句：内核提权有宕机风险，请谨慎操作。
#### 查看操作系统位数
linux系统上查看位数如下：
    getconf LONG_BIT
说明：知道系统是32位还是64位对后期生成msf木马有帮助。
#### 系统敏感信息
收集一些系统相关的敏感信息，比如账号密码、日志、历史命令、ssh文件等。
    /etc/shadow
    /etc/passwd
    /var/log
    history
    .ssh
    ......
#### web敏感信息
如果服务器存在web应用，可以查看web目录下是否存在敏感信息，比如连接数据库的配置文件等等。
### 内网扫描
当信息收集完成后，可以尝试扫描一下内网的机器，比如主机存活扫描、端口扫描、arp扫描等。端口扫描可以使用nmap、msf等工具，但如果服务器上没有安装这些工具时，通常有3种手段可以达到内网端口扫描的效果。第一种就是服务器上安装扫描工具，这里不多说也不推荐，因为动静大且麻烦；第二种就是端口转发，将服务器内网端口转发到外网进行扫描；第三种就是代理扫描，也就是把装有扫描工具的攻击机代理到目标内网环境。  
无论是端口转发扫描还是代理扫描，原理都是打通攻击机（外网）与肉鸡（内网）的连通性，即让攻击机可以直接访问到肉鸡所在的内网资源。这里的连接不借助于目标网络边界设备的端口映射功能，因此与攻击机访问肉鸡web服务所产生的连接有所区别。
#### 端口转发
想要达到以上所介绍的彼此”直接”的连接，我们需要一个中间的桥梁，来传递内外网（攻击机与肉鸡）之间的数据。搭建这种桥梁的方式有很多，我们首先可以想到端口转发，即把肉鸡服务器上的某个端口转发到攻击机的某个端口上，这样攻击机上访问本机某个端口，就相当于访问了肉鸡服务器上的某个端口。
端口转发的工具：lcx、meterpreter等，具体用法后面会介绍  
端口转发类型：tcp端口转发、http转发、ssh转发等
##### tcp端口转发
本机转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发肉鸡22端口。  
转发连接原理：
    肉鸡22端口肉鸡随机高端口肉鸡随机高端口攻击机上2222高端口攻击机随机高端口攻击机3333端口
注：此时我们去连接攻击机的3333端口，就相当于连接了肉鸡的22端口。
远程转发：攻击机上监听2222、3333端口，肉鸡上连接攻击机的2222端口，并转发内网目标服务器的22端口。（前提是肉鸡能够连接目标服务器的22端口）  
转发连接原理：
    内网目标服务器22端口肉鸡随机高端口肉鸡随机高端口攻击机上2222高端口攻击机随机高端口攻击机3333端口
注：此时我们去连接攻击机的3333端口，就相当于连接了目标服务器的22端口。  
说明：从上面的连接过程不难看出，端口转发比较难以防范的原因就在于，攻击机上监听的端口是随机的，不可预知的，因此不可能事先在堡垒机或者防火墙上做出方向的端口策略，除非禁止服务器访问外部所有端口（现实情况大多只对进方向的端口连接做限制）。
##### http转发
有些安全意思强的管理员，会对一些服务器做禁止访问外网的策略，即服务器禁止连接任何外网的端口。此时普通的tcp端口转发就没有效果了，因为转发的前提是要能互相连接上。此种情况，可以使用http转发。  
转发连接原理：
    肉鸡web端口(80)网络边界设备端口(80)攻击机随机端口
注：这里之所以能够连通，是借助了服务器上的web服务，以及网络边界设备的映射功能。
说明：虽然肉鸡不能访问外网任何端口，但只要它对外提供web服务，就说明它还能跟外界通信，只不过这种通信局限于web服务端口中，并且肉鸡不是直接跟攻击机通信，而是借助了边界设备。
#### 代理扫描内网
以上介绍了几种端口转发的使用以及原理，从中我们不难看出端口转发固然厉害，但也很局限，因为每次都只能转发一个ip的一个端口，对于扫描来说，并不是最好的选择方案。因此出现了一种更好的技术方案–代理扫描，其原理与端口转发差不多，都是需要搭建一个桥梁，而这个桥梁往往不是某个端口，而是shell或者说session。
代理扫描同样可以分为tcp代理扫描、http代理扫描。
##### http代理转发
如果目标服务器有web系统，可以使用Regeorg + proxychains。  
工具下载：[reGeorg](https://github.com/sensepost/reGeorg)、[proxychains](https://github.com/rofl0r/proxychains-ng)  
将reGeorg的tunnel文件上传到肉鸡服务器到网站目录下，攻击机执行：
    python reGeorgSocksProxy.py -p 2333 -u http://test.com/tunnel.php
然后修改proxychains.conf 配置文件
    vim /etc/proxychains.conf   （mac上在~/.proxychains/proxychains.conf ,没有则自己创建）
在最后一行添加socks5 127.0.0.1 2333(与regeorg设置的端口相同)
最后在攻击机使用扫描工具时，可以在执行的命令前加proxhchains4, 比如：