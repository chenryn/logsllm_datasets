more  delicate  way  is  to  inject  error  codes  into  the  guest.  For 
instance, we can change the return value of a system call (Sec. 
IV.C)  so  that  after  the  VMENTER,  the  guest  will  abort  the 
system call as requested by the security monitor. 
execution 
rejects 
the 
(i.e. 
no 
Original
Guest VM
000  0F01F8             swapgs
003  654889242510000000  mov [gs:0x10],rsp
00C  65488B2425A8010000  mov rsp,[gs:0x1a8]
After stealthy hook is installed
000  0FA2                cpuid
002  F8                  clc
003  654889242510000000  mov [gs:0x10],rsp
00C  65488B2425A8010000  mov rsp,[gs:0x1a8]
VMENTER
VMENTER
The CPUID is 
due to a SH
1. VMEXIT 
Handler
3. Invoke 
security 
monitor
The CPUID is 
not due to a SH
4. Emulate the 
overwritten 
instruction (i.e. 
‘swapgs’)
5. Return to the 
instruction past the 
overwritten 
instruction
2. Emulate CPUID and return to 
the next instruction
Figure 3. Use of CPUID privileged instruction for stealthy 
hook 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
Guest VM
Integrity check routine that reads the patched 
memory region
xor rdx, [r9]
mov ecx, [r13+0x2a0]
……
Memory page patched with stealthy hook(s)
000  0FA2                cpuid
002  F8                  clc
003  654889242510000000  mov [gs:0x10],rsp
00C  65488B2425A8010000  mov rsp,[gs:0x1a8]
r9=000
EPT read violation
Disable 
READ/WRITE 
permissions in 
EPT for the 
memory page
EPT WRITE 
violation / 
update 
shadow copy
Write back 
updates
Emulate the offending 
instruction (i.e. xor rdx, [r9])
000  0F01F8             swapgs
003  654889242510000000  mov [gs:0x10],rsp
00C  65488B2425A8010000  mov rsp,[gs:0x1a8]
Return to 
next 
instruction
Shadow copy of the original memory content
Figure 4. Hiding the hook 
The technique of using privileged instructions for diverting 
control  into  the  hypervisor  is  more  general  than  techniques 
based on modifying SSDT or MSR.EIP, which are restricted to 
system  call  interception.  On  the  other  hand,  code  execution 
events can also be intercepted by setting hardware breakpoints 
at  the  corresponding  hook  locations.  However,  there  are  a 
limited  of  number  x86  debug  registers  for  setting  hardware 
breakpoints, and the guest OS may be using some of them as 
well.  Both will limit the number of hooks that be placed in a 
guest at the same time.  
One  drawback  of  the  CPUID-based  approach  is  that  the 
inserted privilege instructions are not transparent to the guest. 
This  becomes  an  issue  when  the  guest  employs  an  integrity 
check routine such as PatchGuard kernel patching protection on 
x86_64  Windows  [16].  PatchGuard  periodically  checks  the 
integrity  of  critical  kernel  structures,  system  images,  and 
processor MSRs. The inserted CPUID instructions will result in 
a  mismatch  in  the  system  image  checksums  and  will  cause  a 
blue screen of death (BSOD) error. As a result, we have to hide 
the  inserted  CPUID  instruction  from  guest  integrity  check, 
namely making the hooks stealthy. In EagleEye, we disable the 
read  /  write  permissions  of  the  patched  memory  pages  where 
the hooks are inserted. A shadow copy containing the original 
memory  content  prior  to  the  insertion  of  the  hooks  is 
maintained for each of the memory pages as shown in Figure 4. 
When  a  guest  integrity  check  routine  (e.g.  the  PatchGuard) 
attempts to read a patched page, an EPT read violation will be 
raised.  EagleEye  will  intervene  and  emulate  the  offending 
instruction (i.e. the xor rdx,[r9] shown in Figure 4). The 
data  which  the  offending  instruction  is  trying  to  read  will  be 
supplied  from  the  shadow  copy  of  the  memory  page.  On  the 
other hand, if the guest attempts to write to the memory page, 
an EPT write violation will be raised. EagleEye will decode the 
offending 
copy 
correspondingly. 
D.  Deferred Memory Introspection for Non-present Memory 
and  update 
instruction 
Pages 
Right  after  the  interception  of  a  guest  system  event,  a 
security  monitor  may  need  to  introspect  the  guest  VM’s 
memory  space  to  gather  further  details  about  the  event.  For 
instance, the call arguments of NtCreateFile including the 
shadow 
the 
file  handle,  access  mode,  and  the  file  path  are  essential  for 
establishing  the  context  of  a  file  creation  system  call  event. 
However, memory introspection may fail if the guest system’s 
page  table  entries  (PTEs)  are  not  properly  set.  This  can  be 
caused by  demand  paging  or memory  swapping  in  the  guest 
system. 
We  develop  a 
technique  called  deferred  memory 
introspection  to  introspect  memory  regions  that  are  not 
properly mapped in the guest system’s page table yet. The idea 
is that if the guest will also access the memory region as part 
of an execution to be monitored, then the introspection can be 
deferred till the guest has populated the PTEs for the memory 
region.  This 
in  Figure  5,  where  the  failed 
introspection at Step H1 will be re-attempted at (deferred to) 
Step H2 after the guest page fault handler fills the PTEs of the 
memory region.   
is  shown 
Hypervisor
H1. Event E intercepted. Memory 
introspection at [addrS:addrE] 
failed due to invalid PTEs
H2. Re-attempt memory 
introspection at 
[addrS:addrE]
E1. Guest is about to carry 
out  execution X that 
involves data at memory 
region [addrS:addrE]
E2. Execution X 
attempts to 
access data at 
[addrS:addrE]
E3. Guest page 
fault handler 
populates the PTEs 
for [addrS:addrE]
Guest VM
E4. Execution X 
accesses data at 
[addrS:addrE]
...
Figure 5. Deferred memory introspection 
PTEs for [addrS:addrE] ready
1. Memory 
introspection at 
[addrS:addrE]
Address 
translation 
failed
2. Disable write 
permission to PTEs 
of [addrS:addrE] in 
EPT
4. Disassemble 
the offending 
instruction 
5. Update the PTE on 
behalf of the 
offending instruction 
EPT fault / VMEXIT
VMENTER
3. VM Running
PTEs for 
[addrS:addrE] 
not ready / 
VMENTER
Figure 6. Reattempting memory introspection 
The time point for the re-attempted memory introspection is 
determined by intercepting updates to the guest PTEs. This is 
achieved  by  disabling  write  permissions  in  the  EPT  for  the 
memory region that holds the corresponding PTEs. As shown 
in the process flow in Figure 6, when introspection of memory 
region  [addrS:AddrE]  fails  at  Step  1,  EagleEye  will  disable 
write access to the PTEs via setting permission bits in the EPT 
(Step 2). The guest system will resume execution (Step 3) till 
the guest system attempts to update the PTEs and trigger a EPT 
violation  /  VMEXIT  event  into  the  hypervisor.    At  Step  4, 
EagleEye will disassemble the offending instruction that causes 
the EPT violation, and at Step 6, EagleEye will update the PTE 
on  behalf  of  the  offending  instruction.  If  the  PTEs  for  the 
memory  range  [addrS:addrE]  are  all  valid,  EagleEye  will  re-
attempt  the  memory  introspection  again  back  at  Step  1. 
Otherwise, the guest VM will resume running till the next PTE 
update (Step 3 → Step 4→ Step 5) occurs. 
E.  Replication of High-Level Representations 
EagleEye  can  supply  a  security  monitor  with  the  CPU, 
memory, and disk states of a VM as shown in Figure 2. We use 
a  combination  of  existing  VM  introspection  techniques  and  a 
modified  Xen  device  model  to  extract  the  states  of  a  VM. 
However, most security monitors are designed to operate on a 
much  higher-level  representation  of  the  low-level  states  for 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
e1: Add X3 to RX             e3: Change Y1 to Y4 in RY
e2: Del Y2 from RY
Events
t=0
High-Level Representations
RX
X1 X2
RY
Y1 Y2
Y3
t=1
High-Level Representations
RX
X1 X2
X3
RY
Y4
Y3
Complex black-box mechanism
SBB
Events
Complex black-box mechanism
SBB
X1
SD
X2
Y1
Y2
Y3
Introspectable States
SM
X1
X2
SD
Y4
Y2
Y1
Y3
Introspectable States
SM
Figure 7. Replication of High-Level Representations 
detecting  security  threats.  For  instance,  an  anti-virus  scanner 
may assume that the information about running processes on a 
system  can  be  acquired  in  the  form  of  process  information 
records  (e.g.  EPROCESS  [17])  and  that  the  disk  content  is 
structured in the forms of files and directories.  
Mapping low-level states into high-level representations is 
hindered  by  the  semantic  gap  between  low-level  states  and 
high-level  representations.  In  some  cases,  the  mapping  across 
the  semantic  gap  is  readily  available,  and  the  high-level 
representations can be easily attained. For instance, XenAccess 
[18]  relies  on  guest  OS  kernel  symbols  to  reconstruct  kernel 
data  structures  from  memory 
introspection  results.  The 
Virtuoso  system  [19]  and  Space  Traveling  [20]  can  automate 
the  mapping  through  a  training  run  with  the  corresponding 
utility program in an emulator, provided that the low-level data 
for  the  high-level  representations  of  interest  are  readily 
available  in  the  memory  (e.g.  be  present  as  part  of  the  guest 
kernel data in the memory introspection results).  
A  limitation  of  existing  solutions  to  the  sematic  gap 
problem is that they all assume the low-level data is readily and 
consistently  available  from  memory  introspection.  The  high-
level representations extractable by the state-of-the-art tools [19, 
20]  are  still  limited  to  available information  kept  in the  guest 
kernel such as getting the list of running processes, getting the 
list  of  loaded  kernel  modules,  getting  the  memory  usage 
statistics, etc. of a guest system. If we look at practical security 
monitoring  applications  such  as  anti-virus  scanners  and 
intrusion  detection  systems,  we  can  see  that  a  lot  more  high-
level  representations  are  required  to  support  their  operations. 
These high-level representations are not limited to in-memory 
kernel  data.  And,  for  synchronous  security  monitoring 
applications,  many  of  the  high-level  representations  required 
are time-sensitive. For instance, an on-access virus scanner may 
want  to  check  a  file  for  virus  before  it  being  accessed.  To 
achieve that, the scanner will have to be able to read the most 
current content of that file. This is impossible to achieve with 
existing  solutions as the  file data  will be  cached  by  the  guest 
OS  and  may  not  be 
immediately  available  from  disk 
introspection. It is equally impossible to introspect the file data 
from the in-memory disk cache as there is no guarantee the data 
will stay in there consistently at the time of security monitoring. 
Finally, many of these mechanisms (e.g. disk caching) are not 
well-documented and are inherently complex to deal with. It is 
questionable  whether 
high-level 
representations  from  VM  introspection  results  alone  can  be 
reconstructing 
their 
efficiently  and  reliably  carried  out.  For  the  mechanisms  are 
complex, the VM introspection will have to be quite thorough 
to  begin  with,  and  that  will  also  be  a  problem  on  the 
performance  if  it  was  to  be  inlined  as  part  of  the  security 
monitoring process. 
is  because 
through  VM 
Instead of pushing the limit of VM introspection further, we 
pursued a complementary approach to the monitoring of high-
level  representations  of  a  guest  VM.  Let  Ri  be  a  high-level 
representation of guest VM states SVM:={s1,s2,…,sN} that is of 
interest to some security monitoring application. The high-level 
representation  Ri  also  has  an  associated  mapping  function 
MAPi:  SVM → Ri.  In  practice,  only  a  subset  of  VM  states 
SINTRO ⊆  SVM  are  introspectable  (i.e.  can  be  reliably  and 
efficiently  acquired 
introspection).  Existing 
solutions to the semantic gap problem thus focus on finding the 
mapping MAP𝒊𝒊: SINTRO→Ri. Note that we require a high-level 
representation  to  be  always  consistent  with  respect  to  its 
specification.  This 
inconsistent  high-level 
representations are of little use to security monitoring. We do 
not  want  to  burden  the  security  monitor  developer  with 
situations  where  the  representations  presented  to  the  security 
monitor  may  contain  invalid  information  in  it.  On  the  other 
introspectable  states  SVM  may  be 
hand, 
inconsistent, possibly due to introspection at the wrong timing 
that returns stale or incomplete states. It is up to the designer of 
the  underlying 
design of the mapping function. 
MAPi or  MAP𝒊𝒊 to either preclude or tolerate these states in the 
In EagleEye, we bring in the notion of monitoring time into 
the  high-level  representations.  Thus  Ri(t)    is  the  high-level 
representation of the VM states SVM(t) at time t when a security 
monitor requests for the high-level representation. We assume 
that  changes 
representation  between 
monitoring  time  t1  and  t2  (t1≦t2)  are  observable  through  the 
interception  of  corresponding  system  events  Ei(t1,t2)  (e.g. 
the  high-level 
system  calls),  that  is    Ri(t1)𝐄𝐄𝐢𝐢(t1,t2)
to 
 Ri(t2).  As  such,  we  can 
determine Ri(t) by a one-shot introspection at Ri(0), when the 
introspection  can  be  reliably  and  efficiently  carried  out,    and 
then apply the changes Ei(0,t) leading to Ri(t).  
As  an  example  of  the  approach,  let  us  consider  the  VM 
illustrated 
in  Figure  7,  where  states  SD  and  SM  are 
introspectable,  and  state  SBB  is  not  introspectable.    The  high-