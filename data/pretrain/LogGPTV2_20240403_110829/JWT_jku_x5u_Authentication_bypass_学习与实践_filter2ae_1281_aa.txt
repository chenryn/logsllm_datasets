# JWT jku/x5u Authentication bypass 学习与实践
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
之前对JWT的利用姿势只停留在拿到秘钥后进行身份伪造，前几天`Volgactf2021`遇到了一道jku的题，发现此前关于jku
权限绕过利用原理与利用手法的文章还是比较少的，趁此机会将这一块好好学一遍，希望对大家有用，欢迎大家批评指正！
## 0x01 jwt简介
> JSON Web Token (JWT)是一个开放标准(RFC 7519)，通常可用于在身份提供商和服务提供商之间传递用户的身份验证信息。
JWT由三部分组成，由”.”进行连接，分别是：
  * 头部（Header）
  * 有效载荷（Payload）
  * 签名(Signature)
###  Header
header用于标识用于生成签名的算法。如下：
    { 
      "alg"： "HS256"，
      "typ"： "JWT"
    }
HS256 表示此令牌是使用HMAC-SHA256签名的。
###  Payload
payload包含用户数据以及一些元数据有关的信息。比如：
    { 
      "loggedInAs"： "admin"，
      "iat"： 1422779638 
    }
###  Signature
签名部分用于安全地验证该token。 **拥有该部分的JWT被称为JWS，也就是签了名的JWS；没有该部分的JWT被称为nonsecure JWT
也就是不安全的JWT，此时header中声明的签名算法为none。**
签名部分使用多种算法，HMAC-SHA256是其中的一种：
    HMAC-SHA256(
      secret,
      base64urlEncoding(header) + '.' +
      base64urlEncoding(payload)
    )
    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI
eyJ —— Base64(‘{“‘)
## 0x02 jwt 相关概念
>   * JWS：Signed JWT，签名过的jwt
>   * JWK：JWT的密钥，也就是我们常说的scret；
>   * JWE：Encrypted JWT部分payload经过加密的jwt；
>   * jku：”jku” (JSON Web Key Set URL) 是jwt
> header中的一个字段，字段内容是一个URI，该URI用于指定用于验证令牌秘钥的服务器，该服务器用于回复jwk。
>   * x5u：”x5u” 也是jwt header中的一个字段，指向一组X509公共证书的URL，与jku功能类似
>   * X.509 标准
>     * X.509 标准是密码学里公钥证书的格式标准,包括TLS/SSL(WWW万维网安全浏览的基石)在内的众多
> Internet协议都应用了X.509 证书）
>
更详细的概念请参考：[深入了解Json Web
Token之概念篇](https://www.freebuf.com/articles/web/180874.html)
## 0x02 jku 工作原理
内容参考：
  * ppt：
  * 视频：[https://www.youtube.com/watch?v=VA1g7YV8HkI&list=PLKAaMVNxvLmAD0ZVUJ2IGFFC0APFZ5gzy&index=11](https://www.youtube.com/watch?v=VA1g7YV8HkI&list=PLKAaMVNxvLmAD0ZVUJ2IGFFC0APFZ5gzy&index=11)
###  正常工作场景
jku使用的场景如下：
####  Step1 用户携带JWS（带有签名的JWT）访问应用
####  Step2 应用程序解码JWS得到jku字段
####  Step3 应用根据jku访问返回JWK的服务器
####  Step4 应用程序得到JWK
####  Step5 使用JWK验证用户JWS
####  step6 验证通过则正常响应
###  攻击场景
攻击场景如下：
  1. 攻击者使用伪造的JWS访问应用，jku字段指向自己控制的服务器。
  2. 应用程序得到jku后对恶意服务器进行访问，得到伪造的JWK。
  3. 攻击者的JWS成功得到验证，进而可以越权访问应用。
为了保证JWK服务器的可信，应用程序会对jku的指向增加各种防护措施，比如对URL进行白名单过滤，想要攻击成功也并非容易的事。
## 0x03 攻击方式
###  方式一：绕过对jku地址的过滤
如果过滤方式比较简单只按照规定长度检查域名的话，很容易绕过。
    https://trusted  => http://PI:EMAIL
绕过方式由具体场景而定。
###  方式二：可信服务器本身的漏洞
  * 1.文件上传漏洞
  * 2.开放重定向漏洞
  * 3.CRLF注入漏洞
####  利用文件上传漏洞
文件上传漏洞很好理解，如果对jku做了域名限制，利用文件上传就不会有影响了，攻击者可以上传自己生成的JWK文件，然后修改jku指向此文件即可。
####  利用重定向漏洞
重定向漏洞的利用方式可以参考下图：
  1. 攻击者使用恶意JWS访问应用程序，应用程序向得到jku，并访问jku指向的链接
  2. 此时可信服务器返回一个重定向，使得应用程序从恶意服务器中获取JWK
####  利用CRLF注入
CRLF注入的利用场景如下：
攻击者在jku中嵌入CRLF，构造HTTP报文，使得应用程序得到的返回内容被攻击者控制，攻击者将返回内容控制为自己生成的JWK，即可绕过验证
## 0x04 jku利用实例
###  AttackDefense实验室：jku Claim Misuse
####  场景描述
  * 1.攻击者IP地址为：192.170.138.2
  * 2.局域网内192.170.138.3的8080端口包含了一个基于CLI的JWT API，该API提供如下三个功能 
    * /issue ：访问后生成一个JWT
    * /goldenticket：得到goldenticket，但是需要身份为admin才能获取
    * /help：查看一些帮助
  * 3.实验的目标是获取goldenticket
####  实验过程
    curl http://192.170.138.3:8080/issue
响应得到JWS
使用得到的JWS到[https://jwt.io](https://jwt.io/)网站上解码
该JWT使用RSASHA256进行加密，并且jku指向了如下地址：
    http://witrap.com:8000/jwks.json
直接请求该jwk