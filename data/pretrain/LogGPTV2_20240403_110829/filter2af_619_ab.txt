            try {
                //建立代理rmi服务，等会我们去看看内部做了什么
                System.out.println("\n[~] Getting proxied jmxrmi object...");
                obj = (RMIServer)this.getProxiedObject(ep, "jmxrmi", payload.getBytes(cmd, 0));
                //调用newClient()方法,传入一个固定默认的object
                System.out.println("[+] Retrieved, invoking newClient(PAYLOAD)...");
                obj.newClient(this.DEFAULT_MARKER_OBJECT);
            } catch(Exception ex) {
                //Check the exception for useful info
                this.checkDeserException(ex);
            }
        }
跟进this.getProxiedObject
`nb.barmie.modes.attack.RMIDeserAttack#getProxiedObject(nb.barmie.modes.enumeration.RMIEndpoint,
java.lang.String, byte[])`:
    protected final Object getProxiedObject(RMIEndpoint ep, String name, byte[] payload) throws BaRMIeException {
        //需要注意此处的this.DEFAULT_MARKER_OBJECT_BYTES
        //与obj.newClient(this.DEFAULT_MARKER_OBJECT)中的内容一致，等同于一个占位符的感觉
        //这边是从ep（rmi服务端）端中获取了名字为name的对象，做代理
        //同时在代理之后所有的通讯的同时，会将this.DEFAULT_MARKER_OBJECT_BYTES替换为payload
        //从而实现不同的payload的动态注入
        return this.getProxiedObject(ep, name, payload, this.DEFAULT_MARKER_OBJECT_BYTES);
    }
可以看到实际利用就是直接去服务端lookup获取这个 **jmxrmi** 对象，获取到了就调用 **newClient(Object a)**
这个方法，然后用自己的payload替换这个a就可以了。
与我们预想中的一样，也不是啥rmi服务都能打的。如果不知道对面接口、参数，对方那又不存在自己已知的用Object参数的rmi服务接口（class判断），就直接GG。
同样局限很大，但是相对于探测利用开放的RMI服务，这个稍微要求低点，不要求对方功能有害，只要有一个已知有Object参数的方法接口就行。但是，这里作为一个反序列化点，要利用，还需要服务器有利用链才行。
#### 漏洞触发点
我们之前默认了这个Object参数肯定会在服务端反序列化，虽然事实也是如此，但是我们来看一下到底在服务端是如何反序列化的。这将对我们接下来的漏洞理解有帮助，毕竟之后都是看源码。
> github：RMI-Client Client 攻击 RMI-Server ServerAndRegister
> 【没用BaRMIe打是因为，那边的环境比较复杂，自己写个参数简单点】
>
> jdk:1.7u80【这边使用的CC payload是1.7下的】
>
> 反序列化链：cc3.2.1
服务端在下面的dispatch方法中下断点，开启调试，客户端直接运行攻击服务端，就会到断点处
`rt.jar.sun.rmi.server.UnicastServerRef#dispatch`
    public void dispatch(Remote var1, RemoteCall var2) throws IOException {
        try {
            long var4;
            ObjectInput var40;
            //---------第一个try--------            try {
                var40 = var2.getInputStream();
                int var3 = var40.readInt();
                if (var3 >= 0) {
                    //在正式接受参数前解析前，会进入几次这个if函数，虽然不知道干了啥，估计是一些固定通讯
                    //但是在接受参数，进行解析执行参数的dispatch，不会进入这个if
                    //所以第一个try这里其实没做什么，就在下main读取了一个Method hash
                    if (this.skel != null) {
                        this.oldDispatch(var1, var2, var3);
                        return;
                    }
                    throw new UnmarshalException("skeleton class not found but required for client version");
                }
               //var4是从客户端传输过来的序列化数据中读取客户端调用的Method hash
                var4 = var40.readLong();
            } catch (Exception var36) {
                throw new UnmarshalException("error unmarshalling call header", var36);
            }
           //--------第一个try结束---------            MarshalInputStream var39 = (MarshalInputStream)var40;
            var39.skipDefaultResolveClass();
            //通过客户端提供的var4去验证客户端想要调用的方法，在这里有没有
            Method var8 = (Method)this.hashToMethod_Map.get(var4);
            //如果没有就报错你想调用的方法在这里不存在。
            if (var8 == null) {
                throw new UnmarshalException("unrecognized method hash: method not supported by remote object");
            }
来看看这边服务端的hashToMethod_Map长啥样，就是我们在服务端实现的RMI服务对象的三个方法。
**之前开过一个脑洞** ：
正常而言是服务端什么接口，客户端就用什么接口，比如`name(java.lang.String)`
如果我们在客户端强行把`name(java.lang.String)`的方法接口写成`name(java.lang.Object)`（因为在客户端，RMI接口类是客户端自己写的，如果把name参数故意写成Object，在客户端调用是不会报错的），尝试无中生有一个Object来让服务端解析，如果这样成功的话，就可以这样是不是就扩大了攻击面了，不是Object的参数就创造一个Object参数出来，让服务端解析？
但是实际上看过源码我们也会发现，会卡死在上面method hash验证这一步的，会报错： **unrecognized method hash**
虽然我们知道不行，还是看看具体数据包，打开wireshark，抓个RMI客户端发送参数给RMI服务端的数据包（关于抓包交互流程啥的参考上一篇RMI
反序列化吧，个人是抓的Npcap网卡，无线网卡抓不到本地交互包）：
导出为16进制字符串，把aced反序列化开头前的不要，给serializationdumper分析一下，图中框起来的就是我们客户端传输的method
hash
对比下服务端分析处的：（服务端调试时，显示的是10进制Long型，写个小DEMO，我们把它调为16进制来对比下）
跟我们wireshark获取的完全一致（当然了....）但是这个Method hash，与上面服务端自己实现的method hash
map中的值均不符，于是，强行把`name(java.lang.String)`的方法接口写成`name(java.lang.Object)`来无中生有一个Object，会因为服务端没有我们传输过去的method
hash而失败。
啊噢，脑洞失败。
但是 **第二个脑洞** ：我们既然都抓到数据包了，反正理论上我们客户端生成的数据包我们可以随意控制，我们可以在method
hash的位置正常写一个服务端有的method hash，就可以通过method hash校验了。但是然后传输的参数继续写成Object形式这样可以么？
继续看源码，顺路看看判断这个脑洞可以不，`sun.rmi.server.UnicastServerRef#dispatch`紧接着上面method
hash判定
    this.logCall(var1, var8);
    //var8 是在hashToMethod_Map中用客户端传输过来的method hash查询到的RMI服务端实现的Method类型
    //获取Method中的入参
    Class[] var9 = var8.getParameterTypes();
    //获取入参个数，等会拿来存储反序列化结果
    Object[] var10 = new Object[var9.length];
    try {
        //这边是JDK提供给开发者自定义的解析部分，默认是一个空函数
        this.unmarshalCustomCallData(var40);
        //遍历入参类型
        for(int var11 = 0; var11  var0, ObjectInput var1) throws IOException, ClassNotFoundException {
        //var0 是服务端Method设定的入参参数类型
        //var1 是传输从客户端来的的序列化数据流
        //var0.isPrimitive 判断是否是默认基础类型
        //需要注意基础类型!=下面这些TYPE，我们在之后解释这个坑
        if (var0.isPrimitive()) {
            if (var0 == Integer.TYPE) {
                return var1.readInt();
            } else if (var0 == Boolean.TYPE) {
                return var1.readBoolean();
            } else if (var0 == Byte.TYPE) {
                return var1.readByte();
            } else if (var0 == Character.TYPE) {
                return var1.readChar();
            } else if (var0 == Short.TYPE) {
                return var1.readShort();
            } else if (var0 == Long.TYPE) {
                return var1.readLong();
            } else if (var0 == Float.TYPE) {
                return var1.readFloat();
            } else if (var0 == Double.TYPE) {
                return var1.readDouble();
            } else {
                throw new Error("Unrecognized primitive type: " + var0);
            }
        } else {
            //将从客户端传输过来的序列化数据流进行readObject
            //**反序列化执行处**
            return var1.readObject();
        }
    }
这里`var1.readObject();`就是 **反序列化** 我们的Object payload参数的地方。
到这里我们利用Object的类型参数传输payload的漏洞触发点就跟完了，主要就以下步骤
  1. 根据传输过来的Method hash，判断本地提供的RMI服务类的方法是否有这个Method hash
  2. 根据Method hash取到Method类，遍历入参，从输入流按顺序反序列化入参
  3. 当服务端设定的RMI方法的入参 **不是基础数据类型** 时，执行`var1.readObject`就会触发我们的payload
### 绕过Object类型参数
上面我们也在一直开脑洞，想要扩大影响范围，但一路分析下来好像看似没什么办法。但是好像有一个地方可以注意到：当服务端设定的RMI方法的入参
**不是基础数据类型** 时，就会执行反序列化输入流。这里并不强求是要Object类型的参数才能`var1.readObject`。
这里看似没问题，但是你细品：
假如服务端的RMI方法接口的入参是`name(java.lang.String)`（ **String不在基础数据类型表中**
）；那么它就会进入else分支，执行`var1.readObject();`，但是`var1`又是我们客户端输出的值，假如我们输入的
**不是一个`java.lang.String`的值**，而是一个 **Object对象**
，那么实际上也会被反序列化解析，即`Object.readObject();`完成任意命令执行。
那么： **RMI服务端需要起一个具有Object参数的RMI方法** 的利用条件限制 就扩展到了
**RMI服务端只需要起一个具有不属于基础数据类型参数的RMI方法** （比如String啥的）
**攻击原理核心**
在于替换原本不是Object类型的参数变为Object类型。之前我们修改String接口变为Object，是可以做到修改参数类型，但是那样还会修改method
hash。所以这里只能修改底层代码，去替换原本的参数为我们想要的payload。
afanti总结了以下途径（后发现是[国外老哥](https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/)先提出来的）：
  1. 直接修改rmi底层源码
  2. 在运行时，添加调试器hook客户端，然后替换
  3. 在客户端使用Javassist工具更改字节码
  4. 使用代理，来替换已经序列化的对象中的参数信息
途径不同，目的都是一样的，我们使用afanti的[RemoteObjectInvocationHandler](https://github.com/Afant1/RemoteObjectInvocationHandler)来试验下可行性。
RMI服务端改成提供一个String参数为接口的方法：`say(String say)`
修改`afanti.rasp.visitor.RemoteObjectInvocationHandlerHookVisitor.RemoteObjectInvocationHandlerHookVisitorAdapter#onMethodEnter`下的DNS地址为自己的，然后打包成jar。