title:WL-Reviver: A Framework for Reviving any Wear-Leveling Techniques
in the Face of Failures on Phase Change Memory
author:Jie Fan and
Song Jiang and
Jiwu Shu and
Long Sun and
Qingda Hu
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
WL-Reviver: A Framework for Reviving any Wear-Leveling Techniques in the Face
of Failures on Phase Change Memory
‡
, Song Jiang
†
, Jiwu Shu
†
, Long Sun
†
, Qingda Hu
‡
Tsinghua National Laboratory for
Information Science and Technology
Beijing, China
‡
Department of Electrical and
Computer Engineering
Wayne State University
Detroit, MI, USA
†
†
Jie Fan
Department of Computer Science
and Technology
Tsinghua University
†
Beijing, China
†{fanj11, shujw, sun-l12, hqd13}@mails.tsinghua.edu.cn
Abstract—While Phase Change Memory (PCM) has emerged
as one of most promising complements or even replacements
of DRAM-based memory, it has only limited write endurance.
Because of uneven write distribution, PCM is highly likely
to have early failures, which can spread over the chip space
and leave the entire chip unusable. Wear leveling is an
indispensable technique to even out wear caused by the writes.
However, because of process variation early failure cannot be
fully avoided. State-of-the-art wear-leveling schemes, such as
Start-Gap and Security Refresh, cease to function once even
a single block failure occurs because their designs require
persistent writable address space for wear leveling operations.
Existent solutions attempting to address the problem demand
substantial OS supports, such as explicit space allocations and
data migrations. The demand on substantial OS cooperation
creates a barrier to widespread adoption of the PCM technique.
While fault-tolerance techniques, such as FREE-p and zom-
bie, that remap failed blocks to inaccessible but healthy space
have the potential to address the wear-leveling issue by relocat-
ing data from failed blocks to healthy ones, they cannot work
together with the wear-leveling schemes as data migration may
change placement of relocated data. In this paper, we propose a
framework, WL-Reviver, that allows any in-PCM wear-leveling
scheme to keep delivering its designed leveling service even
after failures occur in its working address space. The design
is unique on two aspects: (1) it leverages the fault-tolerance
techniques so that they can work together with the wear-
leveling schemes; and (2) it requires no OS supports additional
to what’re available to today’s DRAM-based memory system.
Furthermore, WL-Reviver is a lightweight framework of very
low overhead. Our extensive experiments show that WL-
Reviver can efﬁciently revive a wear-leveling scheme without
compromising the scheme’s wear-leveling effect.
Keywords-PCM; Fault Tolerance; Wear Leveling;
I. INTRODUCTION
Resistive memory has emerged as a promising technology
when the scaling of DRAM technology to smaller feature
sizes (beyond 30 nm) becomes increasingly difﬁcult [10],
[13]. With higher scalability and being non-volatile, they
are expected to complement or even replace DRAM as
Corresponding author: Jiwu Shu
PI:EMAIL
main memory in the near future. Among a number of resis-
tive memories currently available, phase-change memories
(PCM) is the most likely technology for volume produc-
tion [1], [2] and has seen the most research efforts [9], [14],
[15], [18], [20], [21].
A. PCM’s Limited Endurance and Wear Leveling
One of most challenging constraints on PCM is its limited
endurance. That is, after a limited number of writes on a
memory cell (on average about 107 - 108), the cell perma-
nently fails. Because of existence of write locality, cells of
PCM memory are probably not uniformly worn. That is,
some cells can become unuseful earlier than others, leading
to loss of memory space. A computer becomes unavailable
once a certain percentage of its memory capacity gets lost.
To postpone this effect as late as possible, practitioners must
apply wear leveling techniques to spread the wear evenly
across the entire address space. A wear leveling scheme
may periodically change address mapping so that addresses
mapped to more heavily written blocks can be remapped to
less written blocks.
While it is possible for the operating system (OS) to con-
duct the remapping and accordingly to provide PCM wear
leveling functionality, an OS-based design is a less desirable
solution. Such a design may require substantial changes to
OS, including page usage monitoring, page mapping, and
data migration. It is much more expensive to preform these
operations with software than that in hardware. In addition,
as wear leveling is an indispensable operation in the use of
PCM, an OS-based solution requires an OS supporting wear
leveling as a prerequisite for adopting PCM in the memory
system. This creates an artiﬁcial barrier to a widespread
adoption of PCM-based main memory. Therefore, if it is
possible every effort should be made to leave OS out of
the execution of wear leveling functionality in PCM. As
an analogous example, ﬂash-based SSDs always implement
their wearing leveling functionalities within the devices,
rather than requiring OS to play the role.
To this end, state-of-the-art PCM wear-leveling schemes,
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.33
DOI 10.1109/DSN.2014.33
DOI 10.1109/DSN.2014.33
228
228
228
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:52 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
Figure 1.
Illustration of changes of mapping from physical address (PA) to
device address (DA) because of data migration required by a wear-leveling
scheme. (a) Initially user data ”Data1” at PA P1 is stored at DA D1 when
mapping function F1 is applied; (b) Data1 is migrated into DA D2, and
the mapping function is accordingly changed to F2(P1) = D2.
such as Start-Gap [21] and security refresh [22], are all
designed to function in the memory controller without any
OS involvements. In the meantime, the traditional approach
of tracking every memory block’s access count, comparing
the counts of different blocks, and using an indirection table
to perform address mapping,
is too expensive and non-
scalable to be implemented in hardware. Accordingly the
schemes designed for PCM give up the ﬂexibility enabled
by the mapping table to avoid the expensive table main-
tenance cost and table look-up time spent on each PCM
access, which could signiﬁcantly increase access latency and
consume substantial energy. Instead, they all use easy-to-
compute algebraic mapping functions for the purpose.
B. Wear Leveling in the Face of PCM Failures
In a computer system, software uses physical address,
or PA in short,
to access the memory device, and the
memory controller translates this address into its corre-
sponding device address, or DA in short. A memory block
is persistently identiﬁed with a speciﬁc device address.
As we have explained, for space and time efﬁciency a
wear-leveling scheme uses a PA-to-DA address mapping
function, rather than a mapping table, to quickly determine
which memory block should be accessed upon a software-
initiated PA access. As illustrated in Figure 1, a fundamental
and essential operation of any weal-leveling scheme is to
periodically migrate data and accordingly change PA-to-DA
mapping function. When a condition for the wear-leveling
operation is met (e.g., a certain number of writes have
been serviced on the PCM), a block of data is migrated
from its current storage location (memory block at DA
D1), to a selected new location (memory block at DA D2).
As illustrated, before the migration physical address P1 is
mapped to D1 using function F1 (F1(P1) = D1) and any
software-initiated access to data at P1 occurs at D1. After the
migration, the access should occur at D2. For correctness,
the mapping function has to accordingly change to F2 so that
F2(P1) = D2. When the block of data keeps its migration
from one memory block to another one, the function needs
to keep changing so that P1 always refers to the same block
of data. It is an invariant in any wearing leveling schemes
that the same valid PA consistently refers to the same data no
matter where it is physically migrated, unless it is updated
by the software via a re-write.
To ensure that writes are evenly spread over a given range
of PCM space, a wear-leveling scheme schedules a block of
data to migrate into every memory block in the space over
a certain period of time. In other words, any device address
Di, where i = 0, 1, ..., N − 1 and N is the total number
of blocks in the space, can be the mapping target of any
physical address Pj, where j = 0, 1, ..., N−1. If the memory
block at Di fails, the wear-leveling scheme does not function
as designed because (1) a block of data cannot be migrated
into Di, and (2) attempt for accessing Pj, which is mapped
to Di, will fail. Even worse, because every physical address
(Pj) can be mapped to the failed block (Di) at different
time periods of the wear-leveling execution, the OS would
be informed that Pj is a failed address and ultimately be
misled to believe that all memory blocks fail.
To address this issue, one might attempt to change the
data migration schedule to keep data from migrating into
the failed memory blocks, or DAs, and to modify the
mapping function to exclude the DAs from being mapped
to. However, as failed blocks can appear at any random
locations and are accumulating, it is unlikely to design a
set of functions, rather than to use a mapping table, to cover
scenarios of various failure distributions. Though the state-
of-the-art PCM wear-leveling schemes can achieve a near-
perfect wear-leveling effect even with writes of strong spatial
locality and malicious wear-out attacks [21], [22], they stop
functioning with even a single block failure,
leading to
accelerated failures and loss of memory space. Furthermore,
due to process variations there is a high variability in
PCM cells’ lifetime and some cells are subject to early
failures [18]. Therefore, it is critical to revive the wear-
leveling techniques that cease to function with failures.
C. Page-recovery Schemes vs. the Wear-leveling Issue
One of the studies on PCM’s fault tolerance is concerned
with recovery of an OS page when some blocks of the page
fail. This study is important as it keeps an entire page from
being lost due to failure of some of its blocks. An OS page
can be 4KB while a block is usually of a cacheline size.
Representative schemes from this study include FREE-p [23]
and Zombie [8]. Their idea is to link a failed block to a
healthy block in another page that has been considered by
OS as a failed one and is dedicated for supplying its healthy
blocks for being linked to other pages’ failed blocks.
By making a failed block appear to be available for
storing data via its linked healthy block, these page-recovery
schemes have the potential to allow a wear-leveling scheme
to continue functioning after occurrence of block failures.
After the linkage, any access, including that for data mi-
gration due to wear-leveling operations, to the failed block
is redirected to the linked healthy but software-unreachable
229229229
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:25:52 UTC from IEEE Xplore.  Restrictions apply. 
block1. We name this healthy block as a shadow block of the
corresponding failed block. These shadow blocks are from
a pre-reserved space, such as the page considered as failed
one by OS, dedicated for the purpose. Because blocks in
the space are not used to store data until they are linked to
failed blocks. the space must be incrementally obtained to
maintain a high space utilization.
D. Challenges on Reviving Wear-leveling Operations
While the approach suggested by the page-recovery
schemes for reviving wear-leveling operations in the face of
block failures sounds promising, it has three critical issues
challenging its feasibility and efﬁcacy.
The ﬁrst issue is how the reserved space can be incre-
mentally obtained. For the sake of space efﬁciency, one
must reserve a relatively small amount of additional space
once currently reserved space has been used up and failing
of a block demands for a shadow block [12], [23]. This
means one block used to be mapped into the software’s PA
address space and was accessible to the software needs to
become unreachable. Because only operating system (OS)
is able to determine which PA address space is accessible
via page allocation and deallocation, any explicit request
for additional reservation requires OS to change its memory
allocation and possibly move data among its pages. As
mentioned, the demand of such an OS support is highly
undesirable and should be avoided if possible.
The second issue is whether to involve unlinked blocks
in the reserved space in the wear leveling operations. Once
physical blocks, or their corresponding DAs, are reserved,
they have to remain unused and be ready to be linked to
failed blocks and store their data. This means that these
blocks cannot participate in the wear leveling, which may
migrate data into them. Excluding them from the wear level-
ing can compromise entire PCM chip’s leveling efﬁcacy. A
more serious issue of the reservation method is that the wear
leveling scheme may have to be substantially modiﬁed [12],
assuming such a modiﬁcation is possible. Because mapping
function of a scheme is designed to accommodate its sched-
uled data migration, DAs of the reserved blocks, whose data
are not involved in the data migration, have to be removed
from the functions’ target set (or codomain). Accordingly,
the mapping functions have to be revised after the removal.
Even worse, some wear-leveling schemes, such as security
refresh [16], requires its mapping functions’ target set (or
mapped DA space) be of size of power of 2 in terms of block
count. In this case, the schemes have to resort to mapping
table [12] if each reservation did not take away half of a
scheme’s target set.
The third issue is that the page-recovery schemes them-
selves can be at odds with the wear-leveling operations
1When a block at a DA is claimed to be unreachable to software, the
software, including OS, does not access data at a PA that is mapped to the
DA.
230230230
if shadow blocks are allowed to participate in the wear
leveling. Data stored in a shadow block actually belongs to
its corresponding failed block, and the failed block records
its shadow block’s address. When the data in the shadow
block is migrated to another block in a wear-leveling oper-
ation, the failed block cannot ﬁnd its data via its recorded
address. Because in both FREE-p [23] and Zombie [8] a
shadow block does not record its failed block’s address,
it can be very expensive to re-link the failed block to the
new shadow block. Therefore the wear-leveling operations
essentially invalidate the page-recovery schemes.
E. Our Solution
In this paper we propose a framework in which wear-
leveling schemes continue to function with failures and the
page-recovery schemes can be used together with active
wear-leveling operations. In the design all the aforemen-
tioned issues are effectively addressed in a very lightweight
manner. Speciﬁcally, the framework is unique at four as-
pects. First, it does not require any new OS supports. Second,
it consistently performs wear-leveling operations over any
blocks, including those in the reserved space. Third, it does
not require any modiﬁcations of wear-leveling schemes.
Fourth, the page-recovery schemes can continue to function
without any efforts of updating links after data migration.
The enabling technique of the framework is to reserve
virtual space in the PA address space, instead of memory
blocks in the DA address space, to provide shadow blocks. A
key observation inspiring the design is the fact that once an
access failure is reported to the OS, OS would discontinue its
use of the page containing the failure [3], where page is the
unit for OS to manage its memory. A page contains multiple
PAs, each mapped to a memory block at a DA, which is
unit for wear-leveling. While the OS excludes the page,
where a failure has been reported, from further accessing, the
PAs contained in the page are essentially reserved without
an explicit request to the OS. Although the reserved PAs
themselves are simply addresses, or they represent virtual
space, each of them is mapped to a DA. As long as a PA
is reserved and becomes unaccessible to the software, its
mapped DA, a memory block, is also reserved and available
to serve as a shadow block for storing data on behalf of a
failed block. However, a reserved PA is possibly mapped to a
different memory block, or DA at different time, as the wear
leveling scheme migrates data and changes the mapping.
Because a failed memory block is only linked to a reserved
PA, their relationship is independent of the data migration
and change of PA-DA mapping function.
In this paper we present the proposed design as a frame-