C++
C++/Python
Lines of Code
2,057
1,166
2,752
842
870
731
Table 5: The sub-components of libfte.
K is 2t/|Img(Y )| =
expected number of invocations of E T
2t/|Y |. (And certainly no more than imax.)
Under this standard security assumption, it is intuitive
that any element of Y = Fc returned by our rejection-
sampling FTE is a uniform one. If each C0 is indistin-
guishable from a random string, then the corresponding
number b represented by C0 is random, too. Hence if
b 2 Img(Y ), then it is a random element of that set, and
so the element of Y that results from unranking b will be
random.
We give a formal security notion for randomized
FTE, and a security theorem for rejection-sampling-
based FTE, in the full version.
6 Realizing LibFTE
In Section 5 we explored strategies for constructing
FPE/FTE schemes in theory. Now, let’s concretely de-
scribe the schemes implemented in libfte.
Implementation. The libfte implementation is a hy-
brid of C, C++, Python, Flex and Bison. We present a
detailed breakdown of the sub-components in Table 5.
We engineered a custom regular expression parser be-
cause off-the-shelf solutions did not expose the appro-
priate data structures necessary to implement our NFA
relaxed-ranking algorithm.
In addition to a native C++ interface, we also pro-
vide interfaces in Python and JavaScript for libfte. The
Python interface is exposed through a manually-written
wrapper around the C++ implementation. The JavaScript
interface is provided through C++-to-JavaScript compi-
lation.
6.1 Schemes Implemented in LibFTE
We use a shorthand notation to refer to types of libfte in-
stantiations. As an example, T-ND-$ is a an FTE scheme
that uses NFA-based ranking (Section 4.1) for the input
format, and DFA-based ranking (Section 4.2) for the out-
put format, and is randomized ($); T-ND denotes the
same, but the scheme is deterministic. FPE constructions
are similarly named, but begin with P.
For deterministic schemes (those without the ﬁnal $)
we use the cycle-walking construction, with FFX[2]
as the underlying tweakable cipher. For randomized
schemes, we use the rejection-sampling construction.
As the underlying encryption scheme, we employ the
Bellare-Rogaway “encode-then-encipher” paradigm [6],
prepending the result of RankX (M ) (interpreted as a
ﬁxed-length bitstring) with the appropriate number of
random padding bits, and applying FFX[2] to this. Be-
cause our particular application of randomized FTE does
not need support for associated data, the FFX tweak was
ﬁxed to an all-zeros string, and we do not need redun-
dancy padding in our encode-then-encipher scheme.
We note that, although we ﬁxed speciﬁc instantiations
of FPE/FTE schemes for the sake of a concrete evalua-
tion, there is no reason to restrict to these. In the ran-
domized scheme, for example, one could use CTR-AES
(with a random IV) and HMAC-SHA256 in an “encrypt-
then-mac” composition [4, 18] (including any associated
data in the mac-scope) for the underlying primitive.4
6.2 The LibFTE Conﬁguration Assistant
We now turn our attention towards the implementation
details of the libfte conﬁguration assistant. We di-
vide the internal workﬂow of the conﬁguration assistant
into three steps. First, we gather requirements from the
user, this is done by the user passing parameters to a
command-line interface. Then, we start with an initial
set of all possible FPE/FTE schemes (i.e., P-xx, T-xx, T-
xx-$) that one could instantiate, and use a decision tree
algorithm to eliminate schemes from the initial set that
do not satisfy user requirements. Finally, the conﬁgura-
tion assistant analyzes the set of all schemes that were
not eliminated in stage two, performs a battery of tests
on them, and returns the results to the user. We provide
a sample output of this tool in Figure 7.
Collecting requirements from the user. The command-
line conﬁguration assistant (see Figure 7) takes two re-
quired parameters, the input and output formats. In addi-
tion to the required parameters, the conﬁguration assis-
tant takes optional parameters, most notably: the mem-
ory threshold for the conﬁguration assistant to deter-
minize regexs, and the memory threshold for FPE/FTE
scheme instantiation.
Identifying feasible schemes. Next, the conﬁguration
assistant’s job is to eliminate schemes that fall outside
the user-speciﬁed requirements. It starts with a set of all
possible FPE/FTE schemes that one could construct (i.e.,
4One should keep in mind the interaction between the cipher-
text length overheads of AEAD and the expected number of steps in
rejection-sampling.
886  23rd USENIX Security Symposium 
USENIX Association
10
Input/Output Format
Scheme R
P-DD
P-NN
(a|b)*
(a|b)*a(a|b){16}
(a|a|b){16}(a|b)*
(a|b){1024}
(a|b)*
(a|b)*a(a|b){16}
(a|a|b){16}(a|b)*
(a|b){1024}
↵
0
16
16
1,024
0
16
16
1,024
β
32
32
32
1,024
32
32
32
1,024
2
18
1,026
States
131,073
DFA/NFA Memory
Required
4KB
266MB
36KB
34MB
6KB
73KB
103KB
68MB
3
36
51
2,049
Encrypt
(ms)
0.18
0.25
0.19
1.2
0.36
0.61
1,340
6.6
Decrypt
(ms)
0.18
0.21
0.18
1.2
0.35
0.60
1,340
6.6
Table 6: Performance benchmarks for P-DD and P-NN constructions, based on our Python API. The regular expres-
sions have been selected to highlight the strengths and weaknesses of the constructions. Recall that ↵ and β are upper-
and lowerbounds (respectively) on the length of strings used in a range slice.
$ ./configuration-assistant \
>
>
--input-format "(a|b)*a(a|b){16}" 0 32 \
--output-format "[0-9a-f]{16}" 0 16
==== Identifying valid schemes ====
WARNING: Memory threshold exceeded when
building DFA for input format
VALID SCHEMES: T-ND, T-NN,
T-ND-$, T-NN-$
==== Evaluating valid schemes
SCHEME ENCRYPT DECRYPT ... MEMORY
T-ND
T-NN
...
0.31ms ... 77KB
0.38ms ... 79KB
0.32ms
0.39ms
====
Figure 7: A sample execution of our conﬁguration as-
sistant for building an FTE scheme. The tool failed to
determinize the regex of the input format, and notiﬁes
the user that that T-ND, T-NN, T-ND-$ and T-NN-$ con-
structions are possible. Then reports on the performance
of these schemes.
P-xx, T-xx, T-xx-$). If the DFA can’t be built (within the
user-speciﬁed memory thresholds) for the input format,
then we eliminate P-Dx, T-Dx and T-Dx-$ schemes from
consideration. We repeat this process for the output for-
mat. Then we perform a series of additional checks — in-
volving the sizes of L(FP ), L(FC), the sizes of the inter-
mediate representations, the minimum ciphertext stretch
of underlying cryptographic primitives, etc. — to cull
away schemes that should not be considered further.
Evaluating feasible schemes. Finally, we consider the
set of schemes that remain from the previous step.
If
there are none, we output an error. Otherwise, we iterate
through the set of schemes and perform a series of func-
tional and performance tests against them. We have four-
teen quantitative tests, such as: the average time elapsed
to perform encryption/decryption, the (estimated) prob-
ability that encryption returns ?, and memory require-
ments. The ﬁnal result of the tool is a table output to
the user, each row of the table represents one scheme
and the columns are results from the quantitative tests
performed. The method for sorting (i.e., prefer memory
utilization, prefer runtime performance, etc.) is a user-
conﬁgurable parameter.
6.3 Performance
We conclude this section with benchmarks of our
libfte
implementation. All benchmarks were per-
formed on Ubuntu 12.04, with an Intel Xeon E3-1220 at
3.10GHz and 32GB of memory. Numbers reported are
an average over 1,000 trials for calls to our libfte Python
API. For memory utilization of each scheme, we mea-
sure the memory required at runtime to use the speciﬁed
formats. For encrypt benchmarks we select a random
string in the language of the input format and measure
the time it takes for encrypt to return a ciphertext. For de-
crypt benchmarks we select a random plaintext, encrypt
it, then measure the time it takes for decrypt to recover
the plaintext.
In Table 6 we have the performance of libfte for P-DD
and P-NN schemes. Note that (a|b)*a(a|b){16}
requires roughly four orders of magnitude less memory
using a P-NN scheme, compared to a P-DD scheme.
With the P-NN scheme for (a|a|b){16}(a|b)*,
the high encrypt cost is completely dominated by cycle
walking, we do roughly 720 FFX[2] encrypt calls per
P-NN call.
(The conﬁguration assistant would inform
the user of this, and the user would have the opportu-
nity to re-write the expression as (a|b){16}(a|b)*.)
For (a|b)*, the two constructions (i.e., P-DD, P-NN)
require a comparable amount of memory but the P-DD
construction is twice as fast for encryption/decryption.
Due to space constraints we omit benchmarks for T-
xx and T-xx-$ schemes in this section, and defer their
analysis to Section 7.
USENIX Association  
23rd USENIX Security Symposium  887
11
7 Exploring LibFTE Use Cases
We turn our attention to integrating libfte into third-party
applications. Our goal is to show that libfte is easy to
use, ﬂexible, and in some cases improves performance,
compared to other cryptographic solutions. In this sec-
tion we consider three use cases: database encryption,
web form encryption, and encryption using formats lifted
from a network monitoring device.
7.1 Databases
We start with integration of libfte into a PostgreSQL
database. For our database we used PostgreSQL 9.1 in
its default conﬁguration. Our server was Ubuntu 12.04
with an Intel Xeon E3-1220 v3 @ 3.10GHz and 32GB
of memory. We use the pgcrypto library that is included
in PostgreSQL’s contrib directory as our baseline cryp-
tographic library. We performed all tests with the Post-
greSQL client and server on the same machine, such that
network latency did not impact our performance results.
The integration of libfte into our database as Post-
greSQL stored procedures required 53 lines of plpython
code.
Pgbench is tool included with PostgreSQL to measure
database performance. As input, pgbench takes a de-
scription of a database transaction and runs the transac-
tion repeatedly, emulates concurrent users, and measures
statistics such as transactions per second and response la-
tency. We used pgbench’s default database schema and
transaction set for testing libfte’s impact on PostgreSQL
performance. The default pgbench testing schema simu-
lates a simple bank and has four tables: accounts, tellers,
branches, and history. The default transaction set for test-
ing includes three query types: SELECT (S), UPDATE
(U) and INSERT (I). There are three different transaction
types that can be selected using pgbench: S, USI, and
USUUI — for each transaction type the acronym repre-
sents the type and order of queries executed.
In order to test the performance impact libfte has on
PostgreSQL, we created four conﬁgurations for populat-
ing and accessing data in the database:
(cid:127) PSQL: The default conﬁguration and schema used
by the pgbench utility for its simple bank application.
No encryption is employed.
(cid:127) +AES: The default schema, with the following mod-
iﬁcations: the balance columns in accounts, tellers,
and branches are changed from type integer to
type bytea. To secure these ﬁelds we use AES128
in ECB mode with PKCS padding.
(cid:127) +AE: We use the same schema as +AES, but we
change our encryption algorithm to pgcrypto’s rec-
ommended encrypt function pgp sym encrypt,
Transaction
Type
S
USI
USUUI
Account Balance Queries
Transactions Per Second
+FPE
8,280
1,540
96.5
PSQL
38,500
2,380
99.2
+AES
30,246
2,259
97.5
+AE
8,380
1,580
97.2
Table 8: A comparison of
tions/second) for our four database conﬁgurations.
throughput
(transac-
which provides privacy and integrity of data.
(cid:127) +FPE: We use the default schema, but employ
a libfte
P-DD scheme with the format R  
\-[0-9]{9}, (R, 9, 10), to encrypt account bal-
ances (in accounts, tellers, and branches) in-place.
We note that in our evaluation we did not have the
option to compare libfte to a scheme that provides the
same functionality or security, as no prior scheme ex-
ists. We compare to +AES because it provides a base-
line performance that we would not expect libfte to ex-
ceed. The comparison to +AE, which provides privacy
and integrity, can be used as a baseline for the perfor-
mance of a cryptographic primitive implementation in a
widely-used, mature database product.
Performance For each conﬁguration and transaction
type we executed pgbench for ﬁve minutes with 50 ac-
tive customers, leaving all other pgbench parameters as