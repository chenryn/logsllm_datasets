# 天翼杯Crypto Write Up
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
上周五参加了天翼杯，其中的密码学赛题整体难度中等左右，这里记录下全部四道赛题的题解。
## Easy RSA
题目代码:
    from Crypto.Util.number import *
    from gmpy2 import invert
    from secret import flag,e
    def enc(key, p):
        e, n = key
        cipher = [pow(ord(char), e, n) for char in p]
        return cipher
    def dec(pk, c):
        key, n = pk
        plain = [chr(pow(char, key, n)) for char in c]
        return ''.join(plain)
    p = getPrime(512)
    q = getPrime(512)
    n = p*q
    pubkey = (e,n)
    assert(e < 20000)
    print("Public key:")
    print(pubkey[1])
    cipher = (enc(pubkey, flag))
    print("Encrypted flag:")
    print(cipher)
这题的enc函数中，将flag的每个字节分别进行加密，这导致明文空间只有256,简单枚举即可算出m。
虽然e还不知道，但是我们知道flag是以flag{开头的，利用’f’和对应的密文，在(1,20000)范围内爆破，即可得到e
exp如下：
    from gmpy2 import *
    n = 53868412634233045090369153437747412878975425992040754576346754596620347350784422917543759897936684646663150893442998869763798006729979997564587680875175995309635877031073898192380128134509976889005408768734374216063639902277690308505919178272615191163114645916867249827856751349851814346547505622471483949937
    f = open('output' , 'r')
    c = f.readline()[:-1]
    c = [int(i) for i in c.split('L, ')]
    for i in range(20000):
        if pow(ord('f') , i , n) == c[0]:
            e = i
            break
    flag = ''
    for cipher in c:
        for i in range(256):
            if pow(i , e , n) == cipher:
                flag += chr(i)
                break
    print(flag)
## AliceHomework
题目所用的密码系统为knaspack，给了公钥为303维，直接规约以后并不能得到理想的向量。
因此我采用了一点小小的技巧来降维。
由于flag的格式为flag{32位16进制数}
flag{}这里6个字节我们是已知的，因此可以去掉48维。
稍加观察还可以发现，16进制的数他们的ascii码的2进制，满足0#1#####。
因此对于每一位都还可以去掉2维。这里可以去掉64维。
所以最后只剩下了192维，LLL规约后，即可得到解向量
exp:(sage)
    from Crypto.Util.number import *
    def backpacker(n  , c , K):
        M = matrix(ZZ , n+1 , n+1)
        N = 2 ^ 333
        for i in range(n):
            M[i,i] = 2
            M[n,i] = 1
            M[i,n] = K[i] * N
        M[n,n] = c*N
        tmp = M.BKZ(blocksize = 22)[0]
        if tmp[-1] != 0:
            print('wrong')
            return 0
        else:
            print(tmp)
    c = 48900138654057608906330336094404001410012416314129947343718254788658710361958972300167501443635234828803130486373878734082851314709567051747373094122800043398642622361749518265923115930476719470463043632323571459743381102290686602475870167398059452505895370462341540956691006903515181773586159733875651
    f = open('./output' , 'r')
    key = f.readline()[:-1]
    key = [int(i) for i in key.split('L, ')]
    plain = bin(bytes_to_long(b'flag{'))[2:]
    for i in plain:
        if i == '1':
            c -= key[0]
        key = key[1:]
    true_key = []
    for i in range(32):
        choose_list = [1,3,4,5,6,7]
        for j in choose_list:
            true_key.append(key[i * 8 + j])
        c -= key[i * 8 + 2]
    plain = bin(ord('}'))[2:].rjust(8 , '0')
    key = key[-8:]
    for i in range(8):
        if plain[i] == '1':
            c -= key[i]
    print(len(true_key))
    alist = backpacker(len(true_key) ,c ,true_key)
    flag = ''
    for i in range(32):
        tmp = 2**5
        valuelist = [64,16,8,4,2,1]
        for j in range(6):
            if alist[i*6 + j] == -1:
                tmp += valuelist[j]
        flag += chr(tmp)
    print(flag)
## hard rsa
题目代码：