entries occupy one row each, whereas the seventh entry occupies two rows. Of the seven entries, the
first six are used to match partially (17 bits) over an instruction's major opcode (bits 0 through 5) and
extended opcode (bits 21 through 31). The seventh entry matches in its entirety: a 32-bit full
instruction match. As instructions are fetched from storage, they are matched against the IMC entries
by the Instruction Fetch Unit's matching facility. If matched, the instruction's processing can be
altered based on other information in the matched entry. For example, the instruction can be replaced
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 55 of 83
with microcode from the instruction decode unit's softpatch table.
The 970FX provides various other tracing and performance-monitoring facilities that are beyond the
scope of this chapter.
3.4. Software Conventions
An application binary interface (ABI) defines a system interface for compiled programs, allowing
compilers, linkers, debuggers, executables, libraries, other object files, and the operating system to
work with each other. In a simplistic sense, an ABI is a low-level, "binary" API. A program
conforming to an API should be compilable from source on different systems supporting that API,
whereas a binary executable conforming to an ABI should operate on different systems supporting
that ABI.[51]
[51] ABIs vary in whether they strictly enforce cross-operating-system compatibility or
not.
An ABI usually includes a set of rules specifying how hardware and software resources are to be used
for a given architecture. Besides interoperability, the conventions laid down by an ABI may have
performance-related goals too, such as minimizing average subroutine-call overhead, branch
latencies, and memory accesses. The scope of an ABI could be extensive, covering a wide variety of
areas such as the following:
Byte ordering (endianness)
Alignment and padding
Register usage
Stack usage
Subroutine parameter passing and value returning
Subroutine prologues and epilogues
System calls
Object files
Dynamic code generation
Program loading and dynamic linking
The PowerPC version of Mac OS X uses the Darwin PowerPC ABI in its 32-bit and 64-bit versions,
whereas the 32-bit x86 version uses the System V IA-32 ABI. The Darwin PowerPC ABI is similar
tobut not the same asthe popular IBM AIX ABI for the PowerPC. In this section, we look at some
aspects of the Darwin PowerPC ABI without analyzing its differences from the AIX ABI.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 56 of 83
3.4.1. Byte Ordering
The PowerPC architecture natively supports 8-bit (byte), 16-bit (half word), 32-bit (word), and 64-bit
(double word) data types. It uses a flat-address-space model with byte-addressable storage. Although
the PowerPC architecture provides an optional little-endian facility, the 970FX does not implement
itit implements only the big-endian addressing mode. Big-endian refers to storing the "big" end of a
multibyte value at the lowest memory address. In the PowerPC architecture, the leftmost bitbit 0is
defined to be the most significant bit, whereas the rightmost bit is the least significant bit. For
example, if a 64-bit register is being used as a 32-bit register in 32-bit computation mode, then bits 32
through 63 of the 64-bit register represent the 32-bit register; bits 0 through 31 are to be ignored. By
corollary, the leftmost bytebyte 0is the most significant byte, and so on.
In PowerPC implementations that support both the big-endian and little-endian[52] addressing modes,
the LE bit of the Machine State Register can be set to 1 to specify little-endian mode. Another bitthe
ILE bitis used to specify the mode for exception handlers. The default value of both bits is 0 (big-
endian) on such processors.
[52] The use of little-endian mode on such processors is subject to several caveats as
compared to big-endian mode. For example, certain instructionssuch as load/store
multiple and load/store stringare not supported in little-endian mode.
3.4.2. Register Usage
The Darwin ABI defines a register to be dedicated, volatile, or nonvolatile. A dedicated register has a
predefined or standard purpose; it should not be arbitrarily modified by the compiler. A volatile
register is available for use at all times, but its contents may change if the context changesfor
example, because of calling a subroutine. Since the caller must save volatile registers in such cases,
such registers are also called caller-save registers. A nonvolatile register is available for use in a local
context, but the user of such registers must save their original contents before use and must restore the
contents before returning to the calling context. Therefore, it is the calleeand not the callerwho must
save nonvolatile registers. Correspondingly, such registers are also called callee-save registers.
In some cases, a register may be available for general use in one runtime environment but may have a
special purpose in some other runtime environment. For example, GPR12 has a predefined purpose
on Mac OS X when used for indirect function calls.
Table 312 lists common PowerPC registers along with their usage conventions as defined by the 32-
bit Darwin ABI.
Table 312. Register Conventions in the 32-bit Darwin PowerPC ABI
Register(s) Volatility Purpose/Comments
GPR0 Volatile Cannot be a base register.
GPR1 Dedicated Used as the stack pointer to allow access to
parameters and other temporary data.
GPR2 Volatile Available on Darwin as a local register but
used as the Table of Contents (TOC) pointer
in the AIX ABI. Darwin does not use the
TOC.
GPR3 Volatile Contains the first argument word when calling
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 57 of 83
a subroutine; contains the first word of a
subroutine's return value. Objective-C uses
GPR3 to pass a pointer to the object being
messaged (i.e., "self") as an implicit
parameter.
GPR4 Volatile Contains the second argument word when
calling a subroutine; contains the second word
of a subroutine's return value. Objective-C
uses GPR4 to pass the method selector as an
implicit parameter.
GPR5GPR10 Volatile GPRn contains the (n 2)th argument word
when calling a subroutine.
GPR11 Varies In the case of a nested function, used by the
caller to pass its stack frame to the nested
functionregister is nonvolatile. In the case of a
leaf function, the register is available and is
volatile.
GPR12 Volatile Used in an optimization for dynamic code
generation, wherein a routine that branches
indirectly to another routine must store the
target of the call in GPR12. No special
purpose for a routine that has been called
directly.
GPR13GPR29 Nonvolatile Available for general use. Note that GPR13 is
reserved for thread-specific storage in the 64-
bit Darwin PowerPC ABI.
GPR30 Nonvolatile Used as the frame pointer registeri.e., as the
base register for access to a subroutine's local
variables.
GPR31 Nonvolatile Used as the PIC-offset table register.
FPR0 Volatile Scratch register.
FPR1FPR4 Volatile FPRn contains the nth floating-point argument
when calling a subroutine; FPR1 contains the
subroutine's single-precision floating-point
return value; a double-precision floating-point
value is returned in FPR1 and FPR2.
FPR5FPR13 Volatile FPRn contains the nth floating-point argument
when calling a subroutine.
FPR14FPR31 Nonvolatile Available for general use.
CR0 Volatile Used for holding condition codes during
arithmetic operations.
CR1 Volatile Used for holding condition codes during
floating-point operations.
CR2CR4 Nonvolatile Various condition codes.
CR5 Volatile Various condition codes.
CR6 Volatile Various condition codes; can be used by
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 58 of 83
AltiVec.
CR7 Volatile Various condition codes.
CTR Volatile Contains a branch target address (for the
bcctr instruction); contains counter value for
a loop.
FPSCR Volatile Floating-Point Status and Control Register.
LR Volatile Contains a branch target address (for the bclr
instruction); contains subroutine return
address.
XER Volatile Fixed-point exception register.
VR0, VR1 Volatile Scratch registers.
VR2 Volatile Contains the first vector argument when
calling a subroutine; contains the vector
returned by a subroutine.
VR3VR19 Volatile VRn contains the (n 1)th vector argument
when calling a subroutine.
VR20VR31 Nonvolatile Available for general use.
VRSAVE Nonvolatile If bit n of the VRSAVE is set, then VRn must
be saved during any kind of a context switch.
VSCR Volatile Vector Status and Control Register.
3.4.2.1. Indirect Calls
We noted in Table 312 that a function that branches indirectly to another function stores the target of
the call in GPR12. Indirect calls are, in fact, the default scenario for dynamically compiled Mac OS X
user-level code. Since the target address would need to be stored in a register in any case, using a
standardized register allows for potential optimizations. Consider the code fragment shown in Figure
318.
Figure 318. A simple C function that calls another function
void
f1(void)
{
f2();
}
By default, the assembly code generated by GCC on Mac OS X for the function shown in Figure 318
will be similar to that shown in Figure 319, which has been annotated and trimmed down to relevant
parts. In particular, note the use of GPR12, which is referred to as r12 in the GNU assembler syntax.
Figure 319. Assembly code depicting an indirect function call
...
_f1:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 59 of 83
mflr r0 ; prologue
stmw r30,-8(r1) ; prologue
stw r0,8(r1) ; prologue
stwu r1,-80(r1) ; prologue
mr r30,r1 ; prologue
bl L_f2$stub ; indirect call
lwz r1,0(r1) ; epilogue
lwz r0,8(r1) ; epilogue
mtlr r0 ; epilogue
lmw r30,-8(r1) ; epilogue
blr ; epilogue
...
L_f2$stub:
.indirect_symbol _f2
mflr r0
bcl 20,31,L0$_f2
L0$_f2:
mflr r11
; lazy pointer contains our desired branch target
; copy that value to r12 (the 'addis' and the 'lwzu')
addis r11,r11,ha16(L_f2$lazy_ptr-L0$_f2)
mtlr r0
lwzu r12,lo16(L_f2$lazy_ptr-L0$_f2)(r11)
; copy branch target to CTR
mtctr r12
; branch through CTR
bctr
.data
.lazy_symbol_pointer
L_f2$lazy_ptr:
.indirect_symbol _f2
.long dyld_stub_binding_helper
3.4.2.2. Direct Calls
If GCC is instructed to statically compile the code in Figure 318, we can verify in the resultant
assembly that there is a direct call to f2 from f1, with no use of GPR12. This case is shown in Figure
320.
Figure 320. Assembly code depicting a direct function call
.machine ppc
.text
.align 2
.globl _f1
_f1:
mflr r0
stmw r30,-8(r1)
stw r0,8(r1)
stwu r1,-80(r1)
mr r30,r1
bl _f2
lwz r1,0(r1)
lwz r0,8(r1)
mtlr r0
lmw r30,-8(r1)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 60 of 83
blr
3.4.3. Stack Usage
On most processor architectures, a stack is used to hold automatic variables, temporary variables, and
return information for each invocation of a subroutine. The PowerPC architecture does not explicitly
define a stack for local storage: There is neither a dedicated stack pointer nor any push or pop
instructions. However, it is conventional for operating systems running on the PowerPCincluding
Mac OS Xto designate (per the ABI) an area of memory as the stack and grow it upward: from a high
memory address to a low memory address. GPR1, which is used as the stack pointer, points to the top
of the stack.
Both the stack and the registers play important roles in the working of subroutines. As listed in Table
312, registers are used to hold subroutine arguments, up to a certain number.
Functional Subtleties
The terms function, procedure, and subroutine are sometimes used in programming
language literature to denote similar but slightly differing entities. For example, a
function is a procedure that always returns a result, but a "pure" procedure does not
return a result. Subroutine is often used as a general term for either a function or a
procedure. The C language does not make such fine distinctions, but some languages do.
We use these terms synonymously to represent the fundamental programmer-visible unit
of callable execution in a high-level language like C.
Similarly, the terms argument and parameter are used synonymously in informal
contexts. In general, when you declare a function that "takes arguments," you use formal
parameters in its declaration. These are placeholders for actual parameters, which are
what you specify when you call the function. Actual parameters are often called
arguments.
The mechanism whereby actual parameters are matched with (or bound to) formal
parameters is called parameter passing, which could be performed in various ways, such
as call-by-value (actual parameter represents its value), call-by-reference (actual
parameter represents its location), call-by-name (actual parameter represents its program
text), and variants.
If a function f1 calls another function f2, which calls yet another function f3, and so on in a program,
the program's stack grows per the ABI's conventions. Each function in the call chain owns part of the
stack. A representative runtime stack for the 32-bit Darwin ABI is shown in Figure 321.
Figure 321. Darwin 32-bit ABI runtime stack
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 61 of 83
In Figure 321, f1 calls f2, which calls f3. f1's stack frame contains a parameter area and a linkage
area.
The parameter area must be large enough to hold the largest parameter list of all functions that f1
calls. f1 typically will pass arguments in registers as long as there are registers available. Once
registers are exhausted, f1 will place arguments in its parameter area, from where f2 will pick them
up. However, f1 must reserve space for all arguments of f2 in any caseeven if it is able to pass all
arguments in registers. f2 is free to use f1's parameter area for storing arguments if it wants to free up
the corresponding registers for other use. Thus, in a subroutine call, the caller sets up a parameter area
in its own stack portion, and the callee can access the caller's parameter area for loading or storing
arguments.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 62 of 83
The linkage area begins after the parameter area and is at the top of the stackadjacent to the stack
pointer. The adjacency to the stack pointer is important: The linkage area has a fixed size, and
therefore the callee can find the caller's parameter area deterministically. The callee can save the CR
and the LR in the caller's linkage area if it needs to. The stack pointer is always saved by the caller as
a back chain to its caller.
In Figure 321, f2's portion of the stack shows space for saving nonvolatile registers that f2 changes.
These must be restored by f2 before it returns to its caller.
Space for each function's local variables is reserved by growing the stack appropriately. This space
lies below the parameter area and above the saved registers.
The fact that a called function is responsible for allocating its own stack frame does not mean the
programmer has to write code to do so. When you compile a function, the compiler inserts code
fragments called the prologue and the epilogue before and after the function body, respectively. The
prologue sets up the stack frame for the function. The epilogue undoes the prologue's work, restoring
any saved registers (including CR and LR), incrementing the stack pointer to its previous value (that
the prologue saved in its linkage area), and finally returning to the caller.
A 32-bit Darwin ABI stack frame is 16-byte aligned.