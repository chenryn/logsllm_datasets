# 【技术分享】内存中的猎者
|
##### 译文声明
本文是翻译文章，文章来源：endgame.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
图1.1
译者：[Kp_sover](http://bobao.360.cn/member/contribute?uid=2899451914)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前言**
在大量复杂数据中筛选可能存在的威胁并且在软件生命周期中任何一个阶段定位出恶意行为真的是一项艰巨任务，想要做到这些，安全研究员必须不断学习新的攻击技术和检测方法的专业知识。
内存驻留类型的恶意软件顾名思义会将它自己存放在内存中，这个技术已经出现超过十年，而且有越演欲烈的趋势，这可能归功于内存技术的普及和代码数量的增加，但另一方面，这也恰巧反映了它在逃逸安全软件和管理员检测方面的优势，这个曾经只在顶尖攻击者中出现的技术，现在基本已经被滥用了，我将和我的团队通过研究最常见的内存攻击技术，希望能开发出一种可扩展的、低误杀率的检测方法。
**攻击技术相关**
当然，如果能理解
shellcode注入，反射型DLL注入，内存模块，进程和模块HOLLOWING，GARGOYLE（ROP/APCs注入）等方面的知识，这对于理解内存检测技术会很有用处！
**0x1、SHELLCODE 注入**
最常见的内存驻留技术就是shellcode注入，它可以归纳为下面四个步骤：
1、OpenProcess 打开目标进程，获得句柄。
2、VirtualAllocEx 在目标进程里分配一块内存。
3、WriteProcessMemory 向刚分配的区域写入我们的shellcode。
4、CreateRemoteThread 远程创建一个新的线程去执行我们的shellcode。
著名的 [Poison Ivy](https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-poison-ivy.pdf) 远控
就是使用了这个技术，这大概也是很多APT组织喜欢上它的主要原因吧！
如果你用 [x64dbg](http://x64dbg.com/) 打开 [Poison
Ivy](https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-poison-ivy.pdf)
植入端程序并在VirtualAllocEx处设置断点，很快你就会看到它分配内存的情景及后续相关操作.
图1.2  
图1.3
在图1.2中，push 40 表示将 VirtualAllocEx 函数分配的内存页设置为
PAGE_EXECUTE_READWRITE，也就是可读写可执行属性，下面这张图片是用
[ProcessHacker](http://processhacker.sourceforge.net/) 获取到的 [Poison
Ivy](https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-poison-ivy.pdf) 的内存分配图，你可以看到大量具有 RWX 属性的区段.
图1.4
通常情况下，代码段的类型是 ‘image’，并且会被关联到磁盘文件，但这里却是 ‘Private’
属性并且没有被关联到磁盘文件，它们就是没有关联的可执行区段或者被称为
浮动的代码，从这些内存区域启动的线程通常都是不正常的，这也可以作为鉴定恶意代码的一个重要因素，通过 ProcessHacker
我们还可以看到它的调用堆栈，在这里我们可以清晰地看到 红色箭头处的 几个内存地址没有和任何模块关联.
图1.5
**0x2、反射型DLL注入**
另一种内存攻击技术是由 [Steven
Fewer](https://github.com/stephenfewer/ReflectiveDLLInjection)
发现，被称为反射型DLL注入，Metasploit’s 的
[Meterperter](https://github.com/rapid7/metasploit-payloads/tree/master/c/meterpreter)
第一次将这种技术应用于实战，现在仍然有很多恶意软件使用这种技术，反射型DLL注入取代了需要
Windows加载器执行的方式，通过将自身dll文件映射到内存中获得执行，它注入进程的方式和 shellcode
注入相同，唯一不同的就是这里shellcode被换成了实现自我映射的loader.它负责将读取到的dll 通过解析输入表、修复重定向、最后调用
DllMain的方式让其获得执行，攻击者可以用高级语言例如c/c++来利用这个技术，而不再需要苦逼的汇编语言了。
典型的反射型DLL注入例如 Meterpreter所采用的，是很容易被检测到的，因为它在进程里留下了大量的 RWX 内存区段，即使
Meterpreter已经断开连接， 这些没有关联的可执行内存区段的开始位置是完整的
MZ/PE头，就像下面看到的一样！但需要注意的是这些残留的数据是可以被抹除的.
图1.6
图1.7
当然，在dll里面也可以很方便的实现一个导出函数，例如
ReflectiveLoader()，这个函数没有任何参数，返回值就是dllmain的地址，通常用来定位dllmain！
图1.8
**0x3、内存模块**
内存模块注入是另外一种内存驻留技术，它和反射型dll注入相似，但不同的是 前者由注射器或加载器负责将dll映射到内存 变成了
自己映射到内存，相当于它自身实现了 LoadLibrary
的功能，而且它不再需要释放文件到磁盘上，最开始的植入器只能映射到当前进程，但现在已经可以将其映射到远程进程中去，为了躲避检测，现在大多数的植入器都没有改动dll的区段属性，并且不再设置其为RWX.
[NetTraveler](https://www.proofpoint.com/us/threat-insight/post/nettraveler-apt-targets-russian-european-interests)
就是采用这一技术的恶意软件，[NetTraveler](https://www.proofpoint.com/us/threat-insight/post/nettraveler-apt-targets-russian-european-interests)运行后，会解压核心功能函数并将它映射到内存中去，区段属性也被设置成像一个正常的dll一样，但只是这些似乎还是不够，因为它的内存区段中仍然具有
‘Private’ 这个特征.