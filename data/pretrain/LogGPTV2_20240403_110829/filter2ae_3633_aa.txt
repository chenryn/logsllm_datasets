## 0x01 EL简介
EL（Expression Language） 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath
表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。
EL表达式主要功能如下：
  * 获取数据：EL表达式主要用于替换JSP页面中的脚本表达式，以从各种类型的Web域中检索Java对象、获取数据（某个Web域中的对象，访问JavaBean的属性、访问List集合、访问Map集合、访问数组）；
  * 执行运算：利用EL表达式可以在JSP页面中执行一些基本的关系运算、逻辑运算和算术运算，以在JSP页面中完成一些简单的逻辑运算，例如`${user==null}`；
  * 获取Web开发常用对象：EL表达式定义了一些隐式对象，利用这些隐式对象，Web开发人员可以很轻松获得对Web常用对象的引用，从而获得这些对象中的数据；
  * 调用Java方法：EL表达式允许用户开发自定义EL函数，以在JSP页面中通过EL表达式调用Java类的方法；
## 0x02 基本语法
### EL语法
在JSP中访问模型对象是通过EL表达式的语法来表达。所有EL表达式的格式都是以`${}`表示。例如，`${
userinfo}`代表获取变量userinfo的值。当EL表达式中的变量不给定范围时，则默认在page范围查找，然后依次在request、session、application范围查找。也可以用范围作为前缀表示属于哪个范围的变量，例如：`${
pageScope. userinfo}`表示访问page范围中的userinfo变量。
简单地说，使用EL表达式语法：`${EL表达式}`
其中， **EL表达式和JSP代码等价转换** 。事实上，可以将EL表达式理解为一种简化的JSP代码。
扩展JSP代码的写法总结：
  * JSP表达式：``
向浏览器输出变量或表达式的计算结果。
  * JSP脚本：``
执行java代码的原理：翻译到_jspService()方法中。
  * JSP声明：``
声明jsp的成员变量或成员方法。
  * JSP注释：``
用于注释JSP代码，不会翻译到Java文件中，也不会执行。
### [ ]与.运算符
EL表达式提供`.`和`[]`两种运算符来存取数据。
当要存取的属性名称中包含一些特殊字符，如`.`或`-`等并非字母或数字的符号，就一定要使用`[]`。例如：`${user.My-Name}`应当改为`${user["My-Name"]}`。
如果要动态取值时，就可以用`[]`来做，而`.`无法做到动态取值。例如：`${sessionScope.user[data]}`中data 是一个变量。
### 变量
EL表达式存取变量数据的方法很简单，例如：`${username}`。它的意思是取出某一范围中名称为username的变量。因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传""。EL表达式的属性如下：
属性范围在EL中的名称 |  
---|---  
Page | PageScope  
Request | RequestScope  
Session | SessionScope  
Application | ApplicationScope  
JSP表达式语言定义可在表达式中使用的以下文字：
文字 | 文字的值  
---|---  
Boolean | true 和 false  
Integer | 与 Java 类似。可以包含任何整数，例如 24、-45、567  
Floating Point | 与 Java 类似。可以包含任何正的或负的浮点数，例如 -1.8E-45、4.567  
String |
任何由单引号或双引号限定的字符串。对于单引号、双引号和反斜杠，使用反斜杠字符作为转义序列。必须注意，如果在字符串两端使用双引号，则单引号不需要转义。  
Null | null  
### 操作符
JSP表达式语言提供以下操作符，其中大部分是Java中常用的操作符：
术语 | 定义  
---|---  
算术型 | +、-（二元）、*、/、div、%、mod、-（一元）  
逻辑型 | and、&&、or、双管道符、!、not  
关系型 | ==、eq、!=、ne、、gt、=、ge。可以与其他值进行比较，或与布尔型、字符串型、整型或浮点型文字进行比较。  
空 | empty 空操作符是前缀操作，可用于确定值是否为空。  
条件型 | A ?B :C。根据 A 赋值的结果来赋值 B 或 C。  
### 隐式对象
JSP表达式语言定义了一组隐式对象，其中许多对象在 JSP scriplet 和表达式中可用：
术语 | 定义  
---|---  
pageContext | JSP页的上下文，可以用于访问 JSP 隐式对象，如请求、响应、会话、输出、servletContext
等。例如，`${pageContext.response}`为页面的响应对象赋值。  
此外，还提供几个隐式对象，允许对以下对象进行简易访问：
术语 | 定义  
---|---  
param | 将请求参数名称映射到单个字符串参数值（通过调用 ServletRequest.getParameter (String name)
获得）。getParameter (String) 方法返回带有特定名称的参数。表达式`${param . name}`相当于
request.getParameter (name)。  
paramValues | 将请求参数名称映射到一个数值数组（通过调用 ServletRequest.getParameter (String name)
获得）。它与 param 隐式对象非常类似，但它检索一个字符串数组而不是单个值。表达式 `${paramvalues. name}` 相当于
request.getParamterValues(name)。  
header | 将请求头名称映射到单个字符串头值（通过调用 ServletRequest.getHeader(String name) 获得）。表达式
`${header. name}` 相当于 request.getHeader(name)。  
headerValues | 将请求头名称映射到一个数值数组（通过调用 ServletRequest.getHeaders(String)
获得）。它与头隐式对象非常类似。表达式`${headerValues. name}`相当于 request.getHeaderValues(name)。  
cookie | 将 cookie 名称映射到单个 cookie 对象。向服务器发出的客户端请求可以获得一个或多个 cookie。表达式`${cookie.
name .value}`返回带有特定名称的第一个 cookie 值。如果请求包含多个同名的 cookie，则应该使用`${headerValues.
name}`表达式。  
initParam | 将上下文初始化参数名称映射到单个值（通过调用 ServletContext.getInitparameter(String
name) 获得）。  
除了上述两种类型的隐式对象之外，还有些对象允许访问多种范围的变量，如 Web 上下文、会话、请求、页面：
术语 | 定义  
---|---  
pageScope | 将页面范围的变量名称映射到其值。例如，EL 表达式可以使用`${pageScope.objectName}`访问一个 JSP
中页面范围的对象，还可以使用`${pageScope .objectName. attributeName}`访问对象的属性。  
requestScope | 将请求范围的变量名称映射到其值。该对象允许访问请求对象的属性。例如，EL 表达式可以使用`${requestScope.
objectName}`访问一个 JSP 请求范围的对象，还可以使用`${requestScope. objectName.
attributeName}`访问对象的属性。  
sessionScope | 将会话范围的变量名称映射到其值。该对象允许访问会话对象的属性。例如：`${sessionScope. name}`  
applicationScope | 将应用程序范围的变量名称映射到其值。该隐式对象允许访问应用程序范围的对象。  
#### pageContext对象
pageContext对象是JSP中pageContext对象的引用。通过pageContext对象，您可以访问request对象。比如，访问request对象传入的查询字符串，就像这样：
    ${pageContext.request.queryString}
#### Scope对象
pageScope，requestScope，sessionScope，applicationScope变量用来访问存储在各个作用域层次的变量。
举例来说，如果您需要显式访问在applicationScope层的box变量，可以这样来访问：applicationScope.box。
    pageScope.name:${pageScope.name}
    requestScope.name : ${requestScope.name}
    sessionScope.user : ${sessionScope.user}
    applicationScope.user : ${applicationScope.user}
#### param和paramValues对象
param和paramValues对象用来访问参数值，通过使用request.getParameter方法和request.getParameterValues方法。
举例来说，访问一个名为order的参数，可以这样使用表达式：${param.order}，或者${param["order"]}。
接下来的例子表明了如何访问request中的username参数：
    ${param["username"]}
param对象返回单一的字符串，而paramValues对象则返回一个字符串数组。
#### header和headerValues对象
header和headerValues对象用来访问信息头，通过使用request.getHeader()方法和request.getHeaders()方法。
举例来说，要访问一个名为user-agent的信息头，可以这样使用表达式：`${header.user-agent}`，或者`${header["user-agent"]}`。
接下来的例子表明了如何访问user-agent信息头：