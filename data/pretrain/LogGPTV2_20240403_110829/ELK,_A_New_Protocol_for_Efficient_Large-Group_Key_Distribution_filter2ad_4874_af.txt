[SI  G.  Caronni, M. Waldvogel,  D.  Sun,  N.  Weiler,  and 
B. Plattner. The VersaKey framework: Versatile group 
key management.  IEEE Journal on Selected Areas in 
Communications, 17(9), September 1999. 
[9]  Isabella  Chang,  Robert  Engel,  Dilip  Kandlur,  Dim- 
itrios  Pendarakis,  and  Debanjan  Saha.  Key  man- 
agement  for  secure Internet  multicast  using  boolean 
function  minimization  techniques.  INFOCOM  1999, 
September 1998. 
[IO]  C.  Dwork  and  M.  Naor.  Pricing  via  processing  or 
combatting junk  mail.  In  Ernest F.  Brickell,  editor, 
Advances in Cryptology - Cq~pto '92, pages  139-147, 
Berlin,  1992. Springer-Verlag. Lecture Notes in Com- 
puter Science Volume 740. 
[ 1 I]  S. Floyd, V.  Jacobson, S. McCanne,  C.  G.  Liu,  and 
L. Zhang.  A  reliable  multicast  framework  for  light- 
weight sessions and application level framing.  In Pro- 
ceedings of the ACM  SIGCOMM 95, pages  342-356, 
Boston, MA, August  1995. 
[ 121  Oded Goldreich, Shafi Goldwasser, and Silvio Micali. 
How  to  construct  random functions.  Journal  of  the 
ACM, 33(4):792-807,  October 1986. 
[ 131  Li  Gong.  Enclaves:  Enabling  secure  collaboration 
over the Internet. In Proc. 6th USENIX Unix and Net- 
work Security Symposium, 1996. 
[ 141  H. Harney and E. Harder.  Logical  key hierarchy pro- 
tocol. Internet Draft, Internet Engineering Task Force, 
April  1999. Work in progress. 
[ 151  H. Harney and C. Muckenhirn.  Group Key Manage- 
ment  Protocol  (GKMP) Specification  / Architecture. 
Request for Comments RFC-2093 and RFC-2094, In- 
ternet Engineering Task Force, July  1997. 
[I61  Mingyan  Li,  Radha Poovendran, and  C.  Berenstein. 
Optimization  of  key  storage for secure multicast.  In 
35th Annual Conference on Information Sciences and 
Systems  (CISS), Johns  Hopkins  University,  March 
2001. 
[ 171 E J. MacWilliams  and N.J.A. Sloane.  The Theory of 
Error-Correcting Codes. North Holland, Amsterdam, 
1977. 
[ 181  Udi  Manber.  A  simple  scheme to  make  passwords 
based  on  one-way  functions much  harder  to  crack. 
Computers and Security, 15(2): 171-176,1996. 
[ 191  David A. McGrew and Alan T. Sherman.  Key  estab- 
lishment in large dynamic groups using one-way func- 
tion  trees,  May  1998.  http : / /www. cs . umbc . 
edu/"sherman/Papers/itse.ps. 
[20]  R. Merkle. Secure communication over insecure chan- 
nels.  Communications of  the ACM, 21(4):294-299, 
1978. 
[21]  Suvo Mittra.  Iolus:  A framework  for scalable secure 
multicasting. In ACM SIGCOMM, September 1997. 
[22]  Refik Molva and Alain Pannetrat.  Scalable multicast 
security  in dynamic groups.  In Proc. 6th ACM  Con- 
ference  on  Computer and  Communications Security, 
pages 101-1 12, Nov  1999. 
[23]  L.  E.  Moser,  P.  M.  Melliar-Smith,  D.  A.  Agar- 
wal,  R. K. Budhia, and C. A. Lingley-Papadopoulos. 
Totem:  A  fault-tolerant  multicast  group communica- 
tion system.  Communications of the ACM, 39(4):54- 
63, April  1996. 
[24]  NIST.  Advanced  Encryption  Standard  (AES)  de- 
http: //csrc .nist .gov/ 
velopment  effort. 
encryption/aes/, October 2000. 
[25]  OpenSSL.  The  OpenSSL project.  http : / /www. 
openssl . org, 2000. 
[26]  V.  Paxson.  End-to-end  Internet  packet  dynamics. 
IEEE/ACM  Transactions  on  Networking,  7(3):277- 
292, June 1999. 
[27]  In V.  S. Pless and W. Huffman,  editors, Handbook of 
Coding  Theory, volume  1, page 740. Elsevier,  Ams- 
terdam, Netherlands, 1998. 
[28]  M. 0. Rabin. The information dispersal algorithm and 
its applications.  In Sequences:  Combinatorics, Com- 
pression, Security and  Transmission, pages 4 0 W  19. 
Springer-Verlag,  1990. 
[29]  Irving  S. Reed  and  Gustave  Solomon.  Polynomial 
codes over certain finite fields.  Journal of the Society 
for Industrial and Applied  Mathematics,  8:300-304, 
1960. 
[30]  Sanjeev  Setia,  Samir  Koussih,  and  Sushi1  Jajodia. 
Kronos: A scalable group re-keying approach  for se- 
cure multicast.  In  Proceedings of  the IEEE  Sympo- 
sium  on Research in Security and Privacy, Oakland, 
CA, May 2000. 
260 
[31]  M. Steiner, G. Tsudik, and M. Waidner.  Cliques:  A 
new approach to group key agreement. IEEE Transac- 
tions on Parallel  and Distributed  Systems, To appear 
in 2000. 
[32] Wade  Trappe,  Jie  Song,  Radha  Poovendran,  and 
K. J. Ray  Liu:  Key  distribution  for secure multime- 
dia multicast.via data embedding.  In  IEEE ICASSP 
2001, Salt Lake City, Utah, May 2001. 
[33]  Robbert van Renesse, Kenneth P. Birman, and Silvan0 
Maffeis.  Horus: A flexible group communication sys- 
tem. Communications of  the ACM, 39(4):76-83,  April 
1996. 
[34]  D. Wallner, E. Harder, and R. Agee. Key management 
for multicast:.  Issues  and  architectures.  Request  for 
Comments (Informational) 2627, Internet Engineering 
Task Force, June 1999. 
[35]  Debby M. Wallner, Eric J. Harder, and Ryan C. Agee. 
Key Management for Multicast:  Issues and Architec- 
tures.  Technical report, IETF draft, July  1997. 
[36]  C. Wong, M: Gouda, and S. Lam.  Secure group com- 
munications using key  graphs.  Technical Report TR- 
97-23, University  of  Texas at  Austin, Department of 
Computer Sciences, August 1997. 
[37] C.  Wong,  M.  Gouda,  and  S.  Lam.  Secure  group 
In  Proceedings 
communications  using  key  graphs. 
of  the ACM SICCOMM  '98 Conference on Applica- 
tions, Technologies, Architectures,  and Protocols for 
Coniputer  Communication, pages 68-79,  1998.  Ap- 
peared in ACM SIGCOMM  Computer Conimunication 
Review, Vol. 28, No. 4 (Oct.  1998). 
[38]  Chung  Kei  Wong  and  Simon  S. Lam.  Keystone:  A 
group key management service. In International  Con- 
ference on Telecommunications, ICT 2000, 2000. 
[39]  Avishai Wool.  Key management for encrypted broad- 
cast.  In 5th ACM  Conference on Computer and Com- 
munications Security, pages 7-1  6, San Francisco, Cal- 
ifornia, November 1998. 
[40]  X.  Rex  Xu,  Andrew  C. Myers,  Hui  Zhang, and  Raj 
Yavatkar.  Resilient  multicast support for continuous- 
media applications. In NOSSDAV, 1997. 
[41]  M. Yajnik, S. Moon, J. Kurose, and D. Towsley. Mea- 
surement and modelling  of the  temporal dependence 
in packet loss. In IEEE INFOCOM  '99, March  1999. 
[42]  Bennet  Yee  and  Doug  Tygar. 
Secure  coprocessors 
in  electronic commerce applications.  In Proceedings 
of  The First  USENIX  Workshop on  Electronic  Com- 
merce, New York, New York, July  1995. 
[43]  Bennet S. Yee.  Using Secure  Coprocessors. PhD the- 
sis, Carnegie Mellon University,  1994. 
A  Unicast Key Recovery Protocol 
In case the group member did not receive the key update 
message and is in the unlucky part of the key tree, it cannot 
recover the group key from the hint message. In this case, it 
needs to request the keys from the key server.  This request 
protocol  is  straightforward to design.  The most important 
requirement is that the protocol is efficient and scales well. 
In  contrast to  previous work  by  Wong  and  Lam,  we  find 
that  TCP is  not  the  appropriate protocol  for  this  key  re- 
quest protocol  [38].  The reason  is  that  TCP requires one 
round-trip message just  to set up the connection (in  most 
implementations, no data is sent in the initial SYN packet). 
This slows down the request unnecessarily.  An  advantage 
of TCP might be that  the receiver  could keep the  connec- 
tion open for future key requests.  This approach, however, 
does  not  scale to  large  number of  receivers  because  each 
TCP connection requires a considerable amount of state at 
the server.  Therefore, we propose to use a light-weight key 
update protocol  based on UDP, where the receiver achieves 
reliability through timeout and request retransmissions. 
B  Security Analysis 
We  perform  our  security  analysis  in  a  computational 
complexity framework.  Our attacker  model  distinguishes 
between passive and active adversaries.  Passive adversaries 
only eavesdrop on  the group communication (in particular 
they are never group members), whereas active adversaries 
may  be  group members.  For  both  cases,  we  analyze the 
computation complexity for the adversary to derive a group 
key  while  it  is not  a group member.  To clarify  the  subse- 
quent description, we refer to the passive adversary as Eve 
and to the active attacker as Mallory. 
B.l  Security Analysis with Passive Adversary 
We  first  look  at  the  difficulty  of  the  passive  adversary 
(Eve) to compute the group key. We assume that Eve eaves- 
drops all traffic without  loss (receives all data packets of a 
session), but Eve is never a group member and hence does 
not know any  keys  in  the key  tree.  Clearly, an exhaustive 
search attack to find the group key  takes R(2n) operations, 
where n is  the bit length of the group key.  Eve cannot do 
better  than  brute force search  R(2n) possibilities  by  using 
key update messages or hint messages, because she does not 
know any of the keys used to decrypt the key update or any 
of the keys used for the pseudo-random function to compute 
the hints.  Hence the following observation clearly holds: 
261 
Proposition 1.  With overwhelming probabilizjJ, Eve needs 
to perform R(2")  operations to determine the group key by 
exhaustive search. 
B.2  Security Analysis with Active Adversary 
tree Mallory  was in.  Hence, Mallory does not know either 
Kol  nor KO,. But Mallory knows KO, so he only needs to 
brute-force all possibilities of x which are nl +na bits long. 
Hence  the  best  Mallory  can  do  is  to  brute  force 
R(2n1+nz) operations to compute the new group key.  0 
Note  that  even  though  Mallory  now  only  needs  to  try 
R(2"l+"2)  possibilities,  where  n1  + nz  might  be  much 
smaller than n, he cannot simply pre-compute a table with 
R(2n1+nz) entries and use it to derive new group keys later. 
The reason  is that  the new  group key  is computed using  a 
pseudo-random function with  the previous group key as in- 
put  which  keeps changing.  So if  Mallory  wants to  derive 
the new group key when he is not in the group any more, he 
needs to  recompute the table with  R(2n1+nz) entries with 
the latest group key  as the input.  This is the same amount 
of work as computing R(2"l+"Z)  possibilities.  Hence Mal- 
lory does not gain advantage by doing precomputation and 
saving the result for later. 
We now turn our attention to Mallory and we assume that 
he was a group member during some previous time period. 
We analyze his  computation complexity to derive a group 
key while he is not in the group. 
We first look at backward secrecy.  When Mallory joins 
the group and receives all keys on his key path, can he derive 
previous group keys?  Mallory might have recorded earlier 
key update messages, hints and data packets encrypted with 
previous  group  keys,  but  he cannot derive the  group key 
better than brute-force R(2")  possibilities  because he does 
not have any of the decryption keys or the keys used for the 
pseudo-random  function  to  compute the  hints.  Hence we 
obtain the following observation: 
Proposition 2.  With  overwhelming  probability,  Mallory 
needs to perform R( 2")  operations to brute-force any group 
key preceeding the time he joins the group. 
We  now  analyze  forward  secrecy, where  Mallory  tries 
to derive the group keys after he leaves the group.  We as- 
sume that Mallory just left and hence knows all the keys on 
his key path because this scenario gives Mallory the great- 
est advantage.  When Mallory leaves the group, the server 
updates the group key  and the key tree as section 6.1.1 de- 
scribes.  We show that in  this scenario the following obser- 
vation is true: 
Proposition 3.  After Mallory leaves the group, with over- 
whelming probability he needs to pelform R(2n1+nz) oper- 
ations to derive the new group key. 
Argument Sketch.  The new group key is updated by the key 
server according to the description in  section 6.2.  Mallory 
has three ways to derive the new group key:  from the key 
update messages,  from the published  hints, or brute-force 
all  possibilities  in  the  computation  of  generating the  new 
group key. 
The group key is distributed by encryption with the keys 
in  the key  tree that Mallory does not have, as described in 
LKH.  Hence Mallory  cannot  do better  than  trying R(2") 
possibilities.  Similarly,  Mallory  cannot  gain  advantage 
from the  published  hints either  because  he  does not  have 
the keys used in the pseudo-random function computation. 
K'  = PRFp+n)(K~), with 
Note that the new group key K'  is derived as 
(KO) 1  P R F ~ ~ " 2 ) ( K ~ ) ,  
where KOL and 
Kor are the left and right child keys of KO respectively. One 
of them  is already updated depending on which side of  the 
= PRF("+"~) 
K,q 
262