pute in a privacy-preserving way the predicate Equal =
AND(Equal 1, Equal 2, . . . , Equal (cid:96)) in which Equali is de-
ﬁned as follows,
if ∃σ, s.t. wAi = wσ
Ai and wBi = wσ
Bi;
(cid:26) 1,
Equal i =
0, otherwise.
where wAi (respectively wBi) is the ith output-wire label
Bob (respectively Alice) obtained from circuit evaluation.
The basic idea is to implement Equal with a garbled
circuit, which ANDs all (cid:96) wires from (cid:96) Equali circuits. The
circuit Equali can be implemented as shown in Figure 8.
The cost of Equali is 2σ non-free gates (where σ is the
length of a wire label), while the Equal circuit requires 2(cid:96)σ
non-free gates. Thus, its cost does not grow with the length
of f’s inputs nor the f’s circuit size (which can be very
large).
We could execute the Equal circuit with any generic
protocol secure against malicious adversaries. Alternatively,
the basic DualEx protocol can be employed to keep the
overhead low. Note that on average one-bit could be leaked
using the DualEx protocol here, but it is a bit about the
random nonces used as wire labels, hence does not expose
the original private inputs.
Figure 7. Time costs for large scale problems.
the dual execution approach, we also report results from
running the PSI and edit distance applications on larger
problem sizes. The timing results are shown in Figure 7 for
performing private set intersection on two sets of one million
32-bit values each, and for an edit-distance computation
with input DNA sequences (2-bit character) of 2000 and
10000. The performance of DualEx protocols remains very
competitive with semi-honest secure computation protocols
even for large inputs.
VII. ENHANCEMENTS
One problem with the basic DualEx protocol is that it
allows the attacker to learn the output of f (x, y) even when
cheating since the output is revealed before the equality test.
Consequently, this advantage for adversaries could actually
encourage participants to cheat and would be unacceptable
in many scenarios.
In this section, we present two heuristic enhancements
that aim at mitigating the problem. (We leave formal def-
initions and proofs of security for future work.) The ﬁrst
enhancement, called progressive revelation,
is the most
straightforward and guarantees that the adversary has can
only learn one more bit of the output than the honest party.
The second enhancement, we call DualEx-based equality
test, ensures the outputs are revealed only after the equality
check passes. Note that since the two enhancements are
orthogonal, they can be combined to construct a improved
DualEx protocol that beneﬁts from both.
In both enhancements,
to prevent early revelation of
outputs we change the output revelation process in the basic
DualEx protocol by replacing the ﬁnal step in the garbled
circuit sub-protocol (execution step 3 from Figure 3) with a
step that just outputs the wire labels without decoding their
semantic values:
3) P1 outputs W1 that it produced when generating the
1 that it obtains from circuit
circuit, while P2 outputs wv2
evaluation.
This changes the output P2 receives to only include the
output-wire labels (and not the underlying bits to which they
Figure 8. Circuit realization of Equali.
282
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
0 1 2 3 4 5 6 7 PSI (2M) ED (2000x10000) Time (Hours) Semi-honest DualEx (dual-core) B. Progressive Revelation
The goal of this variation is to reveal the output wires to
both parties in a bitwise fashion, until cheating (if there is
any) is detected on one output wire. Hence, if the outputs
match exactly, both parties will receive the full output at
the end of the protocol. If the outputs do not match, both
parties will receive the same matching output bits until the
ﬁrst mismatch and the adversary receives at most a single
additional mismatched output bit.
The idea resembles that of the gradual release protocols
used for exchanging secret keys [3, 6], signing contracts [8],
and secure computation [18]. In our scenario, to reveal the ith
bit of the output, the parties can securely evaluate a circuit
EqualRevi (Figure 9), which tests equality (indicated by
vi) and reveals the output bit (denoted by oi) at the same
time. This circuit looks exactly the same as Equali except
it has an extra oi bit which set to 0 if and only if wAi =
Bi. The vi = 1 bit implies the oi bit is
w0
indeed valid.
Ai and wBi = w0
ACKNOWLEDGMENTS
The authors thank Peter Chapman, Greg Morrisett, Abhi
Shelat, David Wagner, and Samee Zahur for useful com-
ments on this work. This work was supported by grants
from the National Science Foundation, Air Force Ofﬁce
of Scientiﬁc Research, and DARPA. The contents of this
paper, however, do not necessarily reﬂect the views of the
US Government.
REFERENCES
[1] Y. Aumann and Y. Lindell. Security against covert
adversaries: Efﬁcient protocols for realistic adversaries.
Journal of Cryptology, 23(2):281–343, 2010.
[2] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid.
NIST special publication 800-57: Recommendation for
key management — part 1, March 2007.
[3] M. Blum. How to exchange (secret) keys. ACM Trans-
actions on Computer Systems, 1(2):175–193, 1983.
[4] R. Canetti.
Security and composition of multi-
party cryptographic protocols. Journal of Cryptology,
13(1):143–202, 2000.
[5] D. Dachman-Soled, T. Malkin, M. Raykova, and
M. Yung. Efﬁcient robust private set intersection. In 7th
Intl. Conference on Applied Cryptography and Network
Security (ACNS), volume 5536 of LNCS, pages 125–
142. Springer, 2009.
[6] I. Damg˚ard.
Practical and provably secure release
Journal of
of a secret and exchange of signatures.
Cryptology, 8(4):201–222, 1995.
Figure 9. Circuit realization of EqualRevi.
To further limit an adversary’s advantage, we can require
the output-wire labels interpretation process to be done in
an order that is collectively determined by both parties. For
example, let pa and pb denote two random permutations
solely determined by Alice and Bob, respectively. The two
parties will reveal the output bits in the order determined
by the permutation p = pa ⊕ pb. Note that to make sure
each party samples its random permutation independent of
the other’s permutation, pa and pb need to be committed
before they are revealed.
VIII. CONCLUSION
Previous work in secure computation has left an enormous
efﬁciency gap between protocols in the semi-honest and
malicious models. This work demonstrates the potential
of an alternate approach for security against a malicious
adversary, which relaxes the security properties by allowing
a single bit of extra information to leak. This relaxation
allows us to implement privacy-preserving applications with
much stronger security guarantees than semi-honest proto-
cols, but with minimal extra cost. The applications scale
to large inputs on commodity machines, including million-
input private set intersection.
[7] E. De Cristofaro, J. Kim, and G. Tsudik. Linear-
intersection protocols secure
complexity private set
In Advances in Cryptology —
in malicious model.
Asiacrypt 2010, volume 6477 of LNCS, pages 213–
231. Springer, 2010.
[8] S. Even, O. Goldreich, and A. Lempel. A randomized
protocol for signing contracts. Communications of the
ACM, 28(6):637–647, 1985.
[9] M. J. Freedman, K. Nissim, and B. Pinkas. Efﬁcient
private matching and set intersection. In Advances in
Cryptology — Eurocrypt 2004, volume 3027 of LNCS,
pages 1–19. Springer, 2004.
[10] O. Goldreich. Foundations of Cryptography, vol. 2:
Basic Applications. Cambridge University Press, Cam-
bridge, UK, 2004.
[11] O. Goldreich, S. Micali, and A. Wigderson. How to
play any mental game, or a completeness theorem for
protocols with honest majority. In 19th Annual ACM
Symposium on Theory of Computing (STOC), pages
218–229. ACM Press, 1987.
[12] D. Harnik, Y. Ishai, E. Kushilevitz, and J. B. Nielsen.
OT-combiners via secure computation. In 5th Theory of
283
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
Cryptography Conference — TCC 2008, volume 4948
of LNCS, pages 393–411. Springer, 2008.
[13] C. Hazay and Y. Lindell. Efﬁcient protocols for set
intersection and pattern matching with security against
In 5th Theory of
malicious and covert adversaries.
Cryptography Conference — TCC 2008, volume 4948
of LNCS, pages 155–175. Springer, 2008.
[14] W. Henecka, S. K¨ogl, A.-R. Sadeghi, T. Schneider,
and I. Wehrenberg.
tool for automating
secure two-party computations. In 17th ACM Conf. on
Computer and Communications Security (CCS), pages
451–462. ACM Press, 2010.
TASTY:
[15] Y. Huang, D. Evans, and J. Katz.
in-
tersection: Are garbled circuits better than custom
protocols? In Network and Distributed System Security
Symposium (NDSS). The Internet Society, 2012.
Private set
[16] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster
secure two-party computation using garbled circuits.
In 20th USENIX Security Symposium, 2011.
[17] Y. Huang, L. Malka, D. Evans, and J. Katz. Efﬁcient
privacy-preserving biometric identiﬁcation. In Network
and Distributed System Security Symposium (NDSS),
pages 421–434. The Internet Society, 2011.
[18] R. Impagliazzo and M. Yung. Direct minimum-
knowledge computations. In Advances in Cryptology
— Crypto ’87, volume 293 of LNCS, pages 40–51.
Springer, 1988.
[19] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Ex-
tending oblivious transfers efﬁciently. In Advances in
Cryptology — Crypto 2003, volume 2729 of LNCS,
pages 145–161. Springer, 2003.
[20] S. Jarecki and X. Liu. Efﬁcient oblivious pseudoran-
dom function with applications to adaptive OT and
secure computation of set intersection. In 6th Theory of
Cryptography Conference — TCC 2009, volume 5444
of LNCS, pages 577–594. Springer, 2009.
[21] S. Jarecki and X. Liu. Fast secure computation of
In 7th Intl. Conf. on Security and
set intersection.
Cryptography for Networks, volume 6280 of LNCS,
pages 418–435. Springer, 2010.
[22] S. Jarecki and V. Shmatikov. Efﬁcient two-party secure
In Advances in
computation on committed inputs.
Cryptology — Eurocrypt 2007, volume 4515 of LNCS,
pages 97–114. Springer, 2007.
[23] V. Kolesnikov and T. Schneider.
Improved garbled
circuit: Free XOR gates and applications. In 35th Intl.
Colloquium on Automata, Languages, and Program-
ming (ICALP), Part II, volume 5126 of LNCS, pages
486–498. Springer, 2008.
[24] Y. Lindell, E. Oxman, and B. Pinkas. The IPS com-
piler: Optimizations, variants and concrete efﬁciency.
In Advances in Cryptology — Crypto 2011, volume
6841 of LNCS, pages 259–276. Springer, 2011.
[25] Y. Lindell and B. Pinkas. An efﬁcient protocol for
secure two-party computation in the presence of ma-
In Advances in Cryptology —
licious adversaries.
Eurocrypt 2007, volume 4515 of LNCS, pages 52–78.
Springer, 2007.
[26] Y. Lindell and B. Pinkas. A proof of security of
Yao’s protocol for two-party computation. Journal of
Cryptology, 22(2):161–188, 2009.
[27] Y. Lindell and B. Pinkas. Secure two-party compu-
In 8th
tation via cut-and-choose oblivious transfer.
Theory of Cryptography Conference — TCC 2011,
volume 6597 of LNCS, pages 329–346. Springer, 2011.
[28] Y. Lindell, B. Pinkas, and N. Smart.
Implementing
two-party computation efﬁciently with security against
malicious adversaries. In 6th Intl. Conf. on Security and
Cryptography for Networks (SCN ’08), volume 5229 of
LNCS, pages 2–20. Springer, 2008.
[29] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay
In Proc.
— a secure two-party computation system.
13th USENIX Security Symposium, 2004.
[30] P. Mohassel and M. Franklin. Efﬁciency tradeoffs for
malicious two-party computation. In 9th Intl. Confer-
ence on Theory and Practice of Public Key Cryptog-
raphy(PKC 2006), volume 3958 of LNCS, pages 458–
473. Springer, 2006.
[31] M. Naor and B. Pinkas. Efﬁcient oblivious transfer
In ACM-SIAM Symposium on Discrete
protocols.
Algorithms (SODA), 2001.
[32] J. Nielsen,
P. Nordholt,
and
A new approach to practical active-
at
S. Burra.
secure
http://eprint.iacr.org/2011/091.
C. Orlandi,
two-party
computation.
Available
[33] J. B. Nielsen and C. Orlandi. LEGO for two-party
In 6th Theory of Cryptography
secure computation.
Conference — TCC 2009, volume 5444 of LNCS, pages
368–386. Springer, 2009.
[34] B. Pinkas, T. Schneider, N. Smart, and S. Williams.
Secure two-party computation is practical. In Advances
in Cryptology — Asiacrypt 2009, volume 5912 of
LNCS, pages 250–267. Springer, 2009.
[35] A. Shelat and C.-H. Shen. Two-output secure com-
In Advances in
putation with malicious adversaries.
Cryptology — Eurocrypt 2011, volume 6632 of LNCS,
pages 386–405. Springer, 2011.
[36] A. C.-C. Yao. How to generate and exchange secrets. In
27th Annual Symposium on Foundations of Computer
Science (FOCS), pages 162–167. IEEE, 1986.
284
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply.