次使用同一个限定符，多余的限定符将被忽略：
const const const int n = 6; // 与 const int n = 6;相同
有了这个新属性，就可以编写类似下面的代码：
typedef const int zip;
const zip q = 8;
12.5.1 const类型限定符
第4章和第10章中介绍过const。以const关键字声明的对象，其值不能通
过赋值或递增、递减来修改。在ANSI兼容的编译器中，以下代码：
const int nochange;  /* 限定nochange的值不能被修改 */
nochange = 12;    /* 不允许 */
编译器会报错。但是，可以初始化const变量。因此，下面的代码没问
题：
const int nochange = 12; /* 没问题 */
924
该声明让nochange成为只读变量。初始化后，就不能再改变它的值。
可以用const关键字创建不允许修改的数组：
const int days1[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
1.在指针和形参声明中使用const
声明普通变量和数组时使用 const 关键字很简单。指针则复杂一些，因
为要区分是限定指针本身为const还是限定指针指向的值为const。下面的声
明：
const float * pf; /* pf 指向一个float类型的const值 */
创建了 pf 指向的值不能被改变，而 pt 本身的值可以改变。例如，可以
设置该指针指向其他 const值。相比之下，下面的声明：
float * const pt; /* pt 是一个const指针 */
创建的指针pt本身的值不能更改。pt必须指向同一个地址，但是它所指
向的值可以改变。下面的声明：
const float * const ptr;
表明ptr既不能指向别处，它所指向的值也不能改变。
还可以把const放在第3个位置：
float const * pfc; // 与const float * pfc;相同
如注释所示，把const放在类型名之后、*之前，说明该指针不能用于改
变它所指向的值。简而言之， const放在*左侧任意位置，限定了指针指向的
数据不能改变；const放在*的右侧，限定了指针本身不能改变。
const 关键字的常见用法是声明为函数形参的指针。例如，假设有一个
函数要调用 display()显示一个数组的内容。要把数组名作为实际参数传递给
925
该函数，但是数组名是一个地址。该函数可能会更改主调函数中的数据，但
是下面的原型保证了数据不会被更改：
void display(const int array[], int limit);
在函数原型和函数头，形参声明const int array[]与const int * array相同，
所以该声明表明不能更改array指向的数据。
ANSI 
C库遵循这种做法。如果一个指针仅用于给函数访问值，应将其
声明为一个指向const限定类型的指针。如果要用指针更改主调函数中的数
据，就不使用const关键字。例如，ANSI C中的strcat()原型如下：
char *strcat(char * restrict s1, const char * restrict s2);
回忆一下，strcat()函数在第1个字符串的末尾添加第2个字符串的副本。
这更改了第1个字符串，但是未更改第1个字符串。上面的声明体现了这一
点。
2.对全局数据使用const
前面讲过，使用全局变量是一种冒险的方法，因为这样做暴露了数据，
程序的任何部分都能更改数据。如果把数据设置为 const，就可避免这样的
危险，因此用 const 限定符声明全局数据很合理。可以创建const变量、const
数组和const结构（结构是一种复合数据类型，将在下一章介绍）。
然而，在文件间共享const数据要小心。可以采用两个策略。第一，遵
循外部变量的常用规则，即在一个文件中使用定义式声明，在其他文件中使
用引用式声明（用extern关键字）：
/* file1.c -- 定义了一些外部const变量 */
const double PI = 3.14159;
const char * MONTHS[12] = { "January", "February", "March", "April",
"May",
926
"June", "July","August", "September", "October",
"November", "December" };
/* file2.c -- 使用定义在别处的外部const变量 */
extern const double PI;
extern const * MONTHS [];
另一种方案是，把const变量放在一个头文件中，然后在其他文件中包
含该头文件：
/* constant.h --定义了一些外部const变量*/
static const double PI = 3.14159;
static const char * MONTHS[12] ={"January", "February", "March", "April",
"May",
"June", "July","August", "September", "October",
"November", "December"};
/* file1.c --使用定义在别处的外部const变量*/
#include "constant.h"
/* file2.c --使用定义在别处的外部const变量*/
#include "constant.h"
这种方案必须在头文件中用关键字static声明全局const变量。如果去掉
static，那么在file1.c和file2.c中包含constant.h将导致每个文件中都有一个相
同标识符的定义式声明，C标准不允许这样做（然而，有些编译器允许）。
实际上，这种方案相当于给每个文件提供了一个单独的数据副本[1]。由于
927
每个副本只对该文件可见，所以无法用这些数据和其他文件通信。不过没关
系，它们都是完全相同（每个文件都包含相同的头文件）的const数据（声
明时使用了const关键字），这不是问题。
头文件方案的好处是，方便你偷懒，不用惦记着在一个文件中使用定义
式声明，在其他文件中使用引用式声明。所有的文件都只需包含同一个头文
件即可。但它的缺点是，数据是重复的。对于前面的例子而言，这不算什么
问题，但是如果const数据包含庞大的数组，就不能视而不见了。
12.5.2 volatile类型限定符
volatile 限定符告知计算机，代理（而不是变量所在的程序）可以改变
该变量的值。通常，它被用于硬件地址以及在其他程序或同时运行的线程中
共享数据。例如，一个地址上可能储存着当前的时钟时间，无论程序做什
么，地址上的值都随时间的变化而改变。或者一个地址用于接受另一台计算
机传入的信息。
volatile的语法和const一样：
olatile int loc1;/* loc1 是一个易变的位置 */
volatile int * ploc;  /* ploc 是一个指向易变的位置的指针 */
以上代码把loc1声明为volatile变量，把ploc声明为指向volatile变量的指
针。
读者可能认为volatile是个可有可无的概念，为何ANSI委员把volatile关
键字放入标准？原因是它涉及编译器的优化。例如，假设有下面的代码：
vall =x;
/* 一些不使用 x 的代码*/
val2 = x
928
智能的（进行优化的）编译器会注意到以上代码使用了两次 x，但并未
改变它的值。于是编译器把 x的值临时储存在寄存器中，然后在val2需要使
用x时，才从寄存器中（而不是从原始内存位置上）读取x的值，以节约时
间。这个过程被称为高速缓存（caching）。通常，高速缓存是个不错的优化
方案，但是如果一些其他代理在以上两条语句之间改变了x的值，就不能这
样优化了。如果没有volatile关键字，编译器就不知道这种事情是否会发
生。因此，为安全起见，编译器不会进行高速缓存。这是在 ANSI 之前的情
况。现在，如果声明中没有volatile关键字，编译器会假定变量的值在使用
过程中不变，然后再尝试优化代码。
可以同时用const和volatile限定一个值。例如，通常用const把硬件时钟
设置为程序不能更改的变量，但是可以通过代理改变，这时用 volatile。只
能在声明中同时使用这两个限定符，它们的顺序不重要，如下所示：
volatile const int loc;
const volatile int * ploc;
12.5.3 restrict类型限定符
restrict 
关键字允许编译器优化某部分代码以更好地支持计算。它只能
用于指针，表明该指针是访问数据对象的唯一且初始的方式。要弄明白为什
么这样做有用，先看几个例子。考虑下面的代码：
int ar[10];
int * restrict restar = (int *) malloc(10 * sizeof(int));
int * par = ar;
这里，指针restar是访问由malloc()所分配内存的唯一且初始的方式。因
此，可以用restrict关键字限定它。而指针par既不是访问ar数组中数据的初始
方式，也不是唯一方式。所以不用把它设置为restrict。
929
现在考虑下面稍复杂的例子，其中n是int类型：
for (n = 0; n < 10; n++)
{
par[n] += 5;
restar[n] += 5;
ar[n] *= 2;
par[n] += 3;
restar[n] += 3;
}
由于之前声明了 restar 是访问它所指向的数据块的唯一且初始的方式，
编译器可以把涉及 restar的两条语句替换成下面这条语句，效果相同：
restar[n] += 8; /* 可以进行替换 */
但是，如果把与par相关的两条语句替换成下面的语句，将导致计算错
误：
par[n] += 8; / * 给出错误的结果 */
这是因为for循环在par两次访问相同的数据之间，用ar改变了该数据的
值。
在本例中，如果未使用restrict关键字，编译器就必须假设最坏的情况
（即，在两次使用指针之间，其他的标识符可能已经改变了数据）。如果用
了restrict关键字，编译器就可以选择捷径优化计算。
restrict 
限定符还可用于函数形参中的指针。这意味着编译器可以假定
930
在函数体内其他标识符不会修改该指针指向的数据，而且编译器可以尝试对
其优化，使其不做别的用途。例如，C 库有两个函数用于把一个位置上的字
节拷贝到另一个位置。在C99中，这两个函数的原型是：
void * memcpy(void * restrict s1, const void * restrict s2, size_t n);
void * memmove(void * s1, const void * s2, size_t n);
这两个函数都从位置s2把n字节拷贝到位置s1。memcpy()函数要求两个
位置不重叠，但是memove()没有这样的要求。声明s1和s2为restrict说明这两
个指针都是访问相应数据的唯一方式，所以它们不能访问相同块的数据。这
满足了memcpy()无重叠的要求。memmove()函数允许重叠，它在拷贝数据时
不得不更小心，以防在使用数据之前就先覆盖了数据。
restrict 
关键字有两个读者。一个是编译器，该关键字告知编译器可以
自由假定一些优化方案。另一个读者是用户，该关键字告知用户要使用满足
restrict要求的参数。总而言之，编译器不会检查用户是否遵循这一限制，但
是无视它后果自负。
12.5.4 _Atomic类型限定符（C11）
并发程序设计把程序执行分成可以同时执行的多个线程。这给程序设计
带来了新的挑战，包括如何管理访问相同数据的不同线程。C11通过包含可
选的头文件stdatomic.h和threads.h，提供了一些可选的（不是必须实现的）
管理方法。值得注意的是，要通过各种宏函数来访问原子类型。当一个线程
对一个原子类型的对象执行原子操作时，其他线程不能访问该对象。例如，
下面的代码：
int hogs;// 普通声明
hogs = 12;  // 普通赋值
可以替换成：
931
_Atomic int hogs;      // hogs 是一个原子类型的变量
atomic_store(&hogs, 12);  // stdatomic.h中的宏
这里，在hogs中储存12是一个原子过程，其他线程不能访问hogs。
编写这种代码的前提是，编译器要支持这一新特性。
12.5.5 旧关键字的新位置
C99允许把类型限定符和存储类别说明符static放在函数原型和函数头的
形式参数的初始方括号中。对于类型限定符而言，这样做为现有功能提供了
一个替代的语法。例如，下面是旧式语法的声明：
void ofmouth(int * const a1, int * restrict a2, int n); // 以前的风格
该声明表明a1是一个指向int的const指针，这意味着不能更改指针本身，
可以更改指针指向的数据。除此之外，还表明a2是一个restrict指针，如上一
节所述。新的等价语法如下：
void ofmouth(int a1[const], int a2[restrict], int n); // C99允许
根据新标准，在声明函数形参时，指针表示法和数组表示法都可以使用
这两个限定符。
static的情况不同，因为新标准为static引入了一种与以前用法不相关的
新用法。现在，static除了表明静态存储类别变量的作用域或链接外，新的
用法告知编译器如何使用形式参数。例如，考虑下面的原型：
double stick(double ar[static 20]);
static 的这种用法表明，函数调用中的实际参数应该是一个指向数组首
元素的指针，且该数组至少有20个元素。这种用法的目的是让编译器使用这
些信息优化函数的编码。为何给static新增一个完全不同的用法？C 标准委员
会不愿意创建新的关键字，因为这样会让以前用新关键字作为标识符的程序
932
无效。所以，他们会尽量利用现有的关键字，尽量不添加新的关键字。
restrict 
关键字有两个读者。一个是编译器，该关键字告知编译器可以
自由假定一些优化方案。另一个读者是用户，该关键字告知用户要使用满足
restrict要求的参数。
933
12.6 关键概念
C 提供多种管理内存的模型。除了熟悉这些模型外，还要学会如何选择
不同的类别。大多数情况下，最好选择自动变量。如果要使用其他类别，应
该有充分的理由。通常，使用自动变量、函数形参和返回值进行函数间的通
信比使用全局变量安全。但是，保持不变的数据适合用全局变量。
应该尽量理解静态内存、自动内存和动态分配内存的属性。尤其要注
意：静态内存的数量在编译时确定；静态数据在载入程序时被载入内存。在
程序运行时，自动变量被分配或释放，所以自动变量占用的内存数量随着程
序的运行会不断变化。可以把自动内存看作是可重复利用的工作区。动态分
配的内存也会增加和减少，但是这个过程由函数调用控制，不是自动进行
的。
934
12.7 本章小结
内存用于存储程序中的数据，由存储期、作用域和链接表征。存储期可
以是静态的、自动的或动态分配的。如果是静态存储期，在程序开始执行时
分配内存，并在程序运行时都存在。如果是自动存储期，在程序进入变量定
义所在块时分配变量的内存，在程序离开块时释放内存。如果是动态分配存
储期，在调用malloc()（或相关函数）时分配内存，在调用free()函数时释放
内存。
作用域决定程序的哪些部分可以访问某数据。定义在所有函数之外的变
量具有文件作用域，对位于该变量声明之后的所有函数可见。定义在块或作
为函数形参内的变量具有块作用域，只对该块以及它包含的嵌套块可见。
链接描述定义在程序某翻译单元中的变量可被链接的程度。具有块作用
域的变量是局部变量，无链接。具有文件作用域的变量可以是内部链接或外
部链接。内部链接意味着只有其定义所在的文件才能使用该变量。外部链接
意味着其他文件使用也可以使用该变量。
下面是C的5种存储类别（不包括线程的概念）。
自动——在块中不带存储类别说明符或带 auto 存储类别说明符声明的
变量（或作为函数头中的形参）属于自动存储类别，具有自动存储期、块作
用域、无链接。如果未初始化自动变量，它的值是未定义的。
寄存器——在块中带 register 存储类别说明符声明的变量（或作为函数
头中的形参）属于寄存器存储类别，具有自动存储期、块作用域、无链接，
且无法获取其地址。把一个变量声明为寄存器变量即请求编译器将其储存到
访问速度最快的区域。如果未初始化寄存器变量，它的值是未定义的。
静态、无链接——在块中带static存储类别说明符声明的变量属于“静
态、无链接”存储类别，具有静态存储期、块作用域、无链接。只在编译时
被初始化一次。如果未显式初始化，它的字节都被设置为0。
935
静态、外部链接——在所有函数外部且没有使用 static 存储类别说明符
声明的变量属于“静态、外部链接”存储类别，具有静态存储期、文件作用
域、外部链接。只能在编译器被初始化一次。如果未显式初始化，它的字节