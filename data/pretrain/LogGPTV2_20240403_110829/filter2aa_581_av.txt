    "tag":"Mz-VPPyU4RlcuYv1IwIvzw"
}
 JWE Protected Header
The JWE Protected Header is a JSON object that includes the header parameters that 
have to be integrity protected by the AEAD algorithm. The parameters inside the JWE 
Protected Header are applicable to all the recipients of the JWE token. The protected 
parameter in the serialized JSON form represents the base64url-encoded value of the 
JWE Protected Header. There is only one protected element in a JWE token at the root 
level, and any header parameter that we discussed before under the JOSE header can 
also be used under the JWE Protected Header.
 JWE Shared Unprotected Header
The JWE Shared Unprotected Header is a JSON object that includes the header 
parameters that are not integrity protected. The unprotected parameter in the 
serialized JSON form represents the JWE Shared Unprotected Header. There is only one 
unprotected element in a JWE token at the root level, and any header parameter that 
we discussed before under the JOSE header can also be used under the JWE Shared 
Unprotected Header.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
198
 JWE Per-Recipient Unprotected Header
The JWE Per-Recipient Unprotected Header is a JSON object that includes the header 
parameters that are not integrity protected. The parameters inside the JWE Per-Recipient 
Unprotected Header are applicable only to a particular recipient of the JWE token. In the 
JWE token, these header parameters are grouped under the parameter recipients. The 
recipients parameter represents an array of recipients of the JWE token. Each member 
consists of a header parameter and an encryptedkey parameter.
• 
header: The header parameter, which is inside the recipients 
parameter, represents the value of the JWE header elements that 
aren’t protected for integrity by authenticated encryption for each 
recipient.
• 
encryptedkey: The encryptedkey parameter represents the 
base64url-encoded value of the encrypted key. This is the key used to 
encrypt the message payload. The key can be encrypted in different 
ways for each recipient.
Any header parameter that we discussed before under the JOSE header can also be 
used under the JWE Per-Recipient Unprotected Header.
 JWE Initialization Vector
This carries the same meaning as explained under JWE compact serialization 
previously in this chapter. The iv parameter in the JWE token represents the value of the 
initialization vector used for encryption.
 JWE Ciphertext
This carries the same meaning as explained under JWE compact serialization previously 
in this chapter. The ciphertext parameter in the JWE token carries the base64url- 
encoded value of the JWE ciphertext.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
199
 JWE Authentication Tag
This carries the same meaning as explained under JWE compact serialization previously 
in this chapter. The tag parameter in the JWE token carries the base64url-encoded value 
of the JWE Authentication Tag, which is an outcome of the encryption process using an 
AEAD algorithm.
 The Process of Encryption (JSON Serialization)
We have discussed about all the ingredients that are required to build a JWE token 
under JSON serialization. The following discusses the steps involved in building the 
JWE token.
 1. Figure out the key management mode by the algorithm used 
to determine the Content Encryption Key (CEK) value. This 
algorithm is defined by the alg parameter in the JOSE header. 
Under JWE JSON serialization, the JOSE header is built by the 
union of all the parameters defined under the JWE Protected 
Header, JWE Shared Unprotected Header, and Per-Recipient 
Unprotected Header. Once included in the Per-Recipient 
Unprotected Header, the alg parameter can be defined per 
recipient.
 2. Compute the CEK and calculate the JWE Encrypted Key based on 
the key management mode, picked in step 1. The CEK is later used 
to encrypt the JSON payload.
 3. Compute the base64url-encoded value of the JWE Encrypted Key, 
which is produced by step 2. Once again, this is computed per 
recipient, and the resultant value is included in the Per-Recipient 
Unprotected Header parameter, encryptedkey.
 4. Perform steps 1–3 for each recipient of the JWE token. Each 
iteration will produce an element in the recipients JSON array of 
the JWE token.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
200
 5. Generate a random value for the JWE Initialization Vector. 
Irrespective of the serialization technique, the JWE token carries 
the value of the base64url-encoded value of the JWE Initialization 
Vector.
 6. If token compression is needed, the JSON payload in plaintext 
must be compressed following the compression algorithm defined 
under the zip header parameter. The value of the zip header 
parameter can be defined either in the JWE Protected Header or 
JWE Shared Unprotected Header.
 7. Construct the JSON representation of the JWE Protected Header, 
JWE Shared Unprotected Header, and Per-Recipient Unprotected 
Headers.
 8. Compute the base64url-encoded value of the JWE Protected 
Header with UTF-8 encoding. This value is represented by 
the protected element in the serialized JWE token. The JWE 
Protected Header is optional, and if present there can be only 
one header. If no JWE header is present, then the value of the 
protected element will be empty.
 9. Generate a value for the Additional Authenticated Data (AAD) and 
compute the base64url-encoded value of it. This is an optional 
step, and if it’s there, then the base64url-encoded AAD value will 
be used as an input parameter to encrypt the JSON payload, as in 
step 10.
 10. To encrypt the JSON payload, we need the CEK (which we already 
have), the JWE Initialization Vector (which we already have), 
and the Additional Authenticated Data (AAD). Compute ASCII 
value of the encoded JWE Protected Header (step 8) and use it 
as the AAD. In case step 9 is done and then the value of AAD is 
computed as ASCII(encoded JWE Protected Header. BASE64URL-
ENCODE(AAD)).
 11. Encrypt the compressed JSON payload (from step 6) using 
the CEK, the JWE Initialization Vector, and the Additional 
Authenticated Data (AAD from step 10), following the content 
encryption algorithm defined by the enc header parameter.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
201
 12. The algorithm defined by the enc header parameter is an AEAD 
algorithm, and after the encryption process, it produces the 
ciphertext and the Authentication Tag.
 13. Compute the base64url-encoded value of the ciphertext, which is 
produced by step 12.
 14. Compute the base64url-encoded value of the Authentication Tag, 
which is produced by step 12.
Now we have all the elements to build the JWE token under JSON serialization.
Note the XML encryption specification by w3C only talks about encrypting an 
XML payload. if you have to encrypt any content, then first you need to embed that 
within an XML payload and then encrypt. in contrast, the Jwe specification is not 
just limited to JsON. you can encrypt any content with Jwe without wrapping it 
inside a JsON payload.
 Nested JWTs
Both in a JWS token and a JWE token, the payload can be of any content. It can be JSON, 
XML, or anything. In a Nested JWT, the payload must be a JWT itself. In other words, a 
JWT, which is enclosed in another JWS or JWE token, builds a Nested JWT. A Nested JWT 
is used to perform nested signing and encryption. The cty header parameter must be 
present and set to the value JWT, in the case of a Nested JWT. The following lists out the 
steps in building a Nested JWT, which signs a payload first using JWS and then encrypts 
the JWS token using JWE:
 1. Build the JWS token with the payload or the content of your 
choice.
 2. Based on the JWS serialization technique you use, step 1 will 
produce either a JSON object with JSON serialization or a three-
element string where each element is separated out by a period 
(.)—with compact serialization.
 3. Base64url-encode the output from step 2 and use it as the payload 
to be encrypted for the JWE token.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
202
 4. Set the value of the cty header parameter of the JWE JOSE header 
to JWT.
 5. Build the JWE following any of the two serialization techniques 
defined in the JWE specification.
Note sign first and then encrypt is the preferred approach in building a nested 
Jwt, instead of sign and then encrypt. the signature binds the ownership of the 
content to the signer or the token issuer. it is an industry accepted best practice to 
sign the original content, rather than the encrypted content. also, when sign first 
and encrypt the signed payload, the signature itself gets encrypted too, preventing 
an attacker in the middle stripping off the signature. since the signature and all its 
related metadata are encrypted, an attacker cannot derive any details about the 
token issuer looking at the message. when encrypt first and sign the encrypted 
payload, then the signature is visible to anyone and also an attacker can strip it off 
from the message.
JWE VS. JWS
From an application developer’s point of view, it may be quite important to identify whether 
a given message is a Jwe token or a Jws token and start processing based on that. the 
following lists out a few techniques that can be used to differentiate a Jws token from a Jwe 
token:
 1. when compact serialization is used, a Jws token has three base64url-encoded 
elements separated by periods (.), while a Jwe token has five base64url- 
encoded elements separated by periods (.).
 2. when JsON serialization is used, the elements of the JsON object produced 
are different in Jws token and Jwe token. For example, the Jws token has a 
top-level element called payload, which is not in the Jwe token, and the Jwe 
token has a top-level element called ciphertext, which is not in the Jws 
token.
 3. the JOse header of a Jwe token has the enc header parameter, while it is not 
present in the JOse header of a Jws token.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
203
 4. the value of the alg parameter in the JOse header of a Jws token carries a 
digital signature or a MaC algorithm or none, while the same parameter in the 
JOse header of a Jwe token carries a key encryption, key wrapping, direct key 
agreement, key agreement with key wrapping, or direct encryption algorithm.
GENERATING A JWE TOKEN WITH RSA-OAEP AND AES WITH A JSON PAYLOAD
the following Java code generates a Jwe token with rsa-Oaep and aes. you can download 
the complete Java sample as a Maven project from https://github.com/apisecurity/
samples/tree/master/ch08/sample01—and it runs on Java 8+. First you need to 
invoke the method generateKeyPair() and pass the PublicKey(generateKeyPair().
getPublicKey()) into the method buildEncryptedJWT():
// this method generates a key pair and the corresponding public key is used 
// to encrypt the message.
public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
    // instantiate KeyPairGenerate with RSA algorithm.
    KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance("RSA");
    // set the key size to 1024 bits.
    keyGenerator.initialize(1024);
    // generate and return private/public key pair.
    return keyGenerator.genKeyPair();
}
// this method is used to encrypt a JWT claims set using the provided public 
// key.
public static String buildEncryptedJWT(PublicKey publicKey) throws 
JOSEException {
    // build audience restriction list.
    List aud = new ArrayList();
    aud.add("https://app1.foo.com");
    aud.add("https://app2.foo.com");
    Date currentTime = new Date();
    // create a claims set.
    JWTClaimsSet jwtClaims = new JWTClaimsSet.Builder().
                  // set the value of the issuer.
                  issuer("https://apress.com").
                  // set the subject value - JWT belongs to this subject.
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON 
204
                  subject("john").
                  // set values for audience restriction.
                  audience(aud).
                  // expiration time set to 10 minutes.
                   expirationTime(new Date(new Date().getTime() + 1000 ∗  
60 ∗ 10)).
                  // set the valid from time to current time.
                  notBeforeTime(currentTime).
                  // set issued time to current time.
                  issueTime(currentTime).
                  // set a generated UUID as the JWT identifier.
                  jwtID(UUID.randomUUID().toString()).build();
    // create JWE header with RSA-OAEP and AES/GCM.
     JWEHeader jweHeader = new JWEHeader(JWEAlgorithm.RSA_OAEP, 
EncryptionMethod.A128GCM);
    // create encrypter with the RSA public key.
    JWEEncrypter encrypter = new RSAEncrypter((RSAPublicKey) publicKey);
    // create the encrypted JWT with the JWE header and the JWT payload.
    EncryptedJWT encryptedJWT = new EncryptedJWT(jweHeader, jwtClaims);
    // encrypt the JWT.
    encryptedJWT.encrypt(encrypter);
    // serialize into base64-encoded text.
    String jwtInText = encryptedJWT.serialize();
    // print the value of the JWT.
    System.out.println(jwtInText);
    return jwtInText;
}
the following Java code shows how to invoke the previous two methods:
KeyPair keyPair = generateKeyPair();
buildEncryptedJWT(keyPair.getPublic());
to build and run the program, execute the following Maven command from the ch08/
sample01 directory.
\> mvn test -psample01
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
205
Let’s see how to decrypt a Jwt encrypted by rsa-Oaep. you need to know the PrivateKey 
corresponding to the PublicKey used to encrypt the message:
    public static void decryptJWT() throws NoSuchAlgorithmException,
                                JOSEException, ParseException {
    // generate private/public key pair.
    KeyPair keyPair = generateKeyPair();
    // get the private key - used to decrypt the message.
    PrivateKey privateKey = keyPair.getPrivate();
    // get the public key - used to encrypt the message.
    PublicKey publicKey = keyPair.getPublic();
    // get encrypted JWT in base64-encoded text.
    String jwtInText = buildEncryptedJWT(publicKey);
    // create a decrypter.
    JWEDecrypter decrypter = new RSADecrypter((RSAPrivateKey) privateKey);
    // create the encrypted JWT with the base64-encoded text.
    EncryptedJWT encryptedJWT = EncryptedJWT.parse(jwtInText);
    // decrypt the JWT.
    encryptedJWT.decrypt(decrypter);
    // print the value of JOSE header.
    System.out.println("JWE Header:" + encryptedJWT.getHeader());
    // JWE content encryption key.
     System.out.println("JWE Content Encryption Key: " + encryptedJWT.
getEncryptedKey());
    // initialization vector.
    System.out.println("Initialization Vector: " + encryptedJWT.getIV());
    // ciphertext.
    System.out.println("Ciphertext : " + encryptedJWT.getCipherText());
    // authentication tag.
    System.out.println("Authentication Tag: " + encryptedJWT.getAuthTag());
    // print the value of JWT body
    System.out.println("Decrypted Payload: " + encryptedJWT.getPayload());
}
the preceding code produces something similar to the following output:
JWE Header: {"alg":"RSA-OAEP","enc":"A128GCM"}
JWE Content Encryption Key: NbIuAjnNBwmwlbKiIpEzffU1duaQfxJpJaodkxDj
SC2s3tO76ZdUZ6YfPrwSZ6DU8F51pbEw2f2MK_C7kLpgWUl8hMHP7g2_Eh3y
Chapter 8  Message-LeveL seCurity with JsON web eNCryptiON  
206
Th5iK6Agx72o8IPwpD4woY7CVvIB_iJqz-cngZgNAikHjHzOC6JF748MwtgSiiyrI
9BsmU
Initialization Vector: JPPFsk6yimrkohJf
Ciphertext: XF2kAcBrAX_4LSOGejsegoxEfb8kV58yFJSQ0_WOONP5wQ07HG
mMLTyR713ufXwannitR6d2eTDMFe1xkTFfF9ZskYj5qJ36rOvhGGhNqNdGEpsB
YK5wmPiRlk3tbUtd_DulQWEUKHqPc_VszWKFOlLQW5UgMeHndVi3JOZgiwN
gy9bvzacWazK8lTpxSQVf-NrD_zu_qPYJRisvbKI8dudv7ayKoE4mnQW_fUY-U10
AMy-7Bg4WQE4j6dfxMlQGoPOo
Authentication Tag: pZWfYyt2kO-VpHSW7btznA
Decrypted Payload:
{
   "exp":1402116034,
   "sub":"john",
   "nbf":1402115434,
   "aud":["https:\/\/app1.foo.com "," https:\/\/app2.foo.com"],
   "iss":"https:\/\/apress.com",
   "jti":"a1b41dd4-ba4a-4584-b06d-8988e8f995bf",