User: 如何使用Ansible自动化部署和配置多台Linux服务器，包括主机配置、软件安装、服务启动等操作？
Assistant: 以下是使用Ansible自动化部署和配置多台Linux服务器的步骤：

1. 安装Ansible

在一台主控机上，安装Ansible。可以使用以下命令来安装Ansible：

```
sudo apt-get update
sudo apt-get install ansible
```

2. 配置Ansible

在Ansible的配置文件（/etc/ansible/ansible.cfg）中，设置hosts文件的路径。可以使用以下命令来修改配置文件：

```
sudo nano /etc/ansible/ansible.cfg
```

找到`#inventory      = /etc/ansible/hosts`这一行，取消注释并将路径改为自己的hosts文件路径，例如：

```
inventory      = /home/user/hosts
```

保存并退出。

3. 编写hosts文件

在Ansible的hosts文件中，配置所有需要自动化部署和配置的Linux服务器。可以使用以下格式：

```
[websrv]
web1 ansible_host=192.168.1.101 ansible_user=user ansible_ssh_pass=password
web2 ansible_host=192.168.1.102 ansible_user=user ansible_ssh_pass=password
web3 ansible_host=192.168.1.103 ansible_user=user ansible_ssh_pass=password
```

其中，`[websrv]`是主机组的名称，`web1`、`web2`、`web3`是主机的名称，`ansible_host`是主机的IP地址，`ansible_user`是主机的登录用户名，`ansible_ssh_pass`是主机登录的密码。

4. 编写playbook

在Ansible中，使用playbook来对主机进行配置和部署。可以在主控机上，编写一个名为`web-server.yml`的playbook文件，包含主机配置、软件安装、服务启动等操作。例如：

```yaml
- name: Configure web servers
  hosts: websrv
  become: true
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install nginx
      apt:
        name: nginx
        state: present

    - name: Start nginx service
      service:
        name: nginx
        state: started
```

该playbook包括了以下操作：

- 更新软件包缓存
- 安装nginx
- 启动nginx服务

更多的操作可以在playbook中添加。

5. 运行playbook

运行playbook，将主机配置、软件安装、服务启动等操作自动应用到所有的Linux服务器上。在主控机上，使用以下命令运行playbook：

```
ansible-playbook web-server.yml
```

Ansible将自动连接到指定的主机，执行所有定义的任务。

以上就是使用Ansible自动化部署和配置多台Linux服务器的完整过程。