existing threat model. In this section we evaluate Erlay’s security.
10.1 First-spy estimator
One of Erlay’s design goals is to be more robust to timing attacks
from sybils [22, 35]. To evaluate Erlay’s robustness against timing
attacks, we simulated a network of 60,000 nodes and used first-spy
estimator approach to link transactions to nodes of their origin.
With the first-spy estimator an attacker deploys some number of
spy nodes. Each node keeps a local log of timestamped records, each
of which records (1) when the spy first learned about a transaction,
5We restricted the network size to constraint the experiment running time
30,00060,00090,000Nodes in the network (public and private)0246Latency (s)ErlayBTCFlood8162432Connectivity0246810Latency (s)ErlayBTCFlood102030405060708090100Nodes reached (%)0.02.55.0Latency (s)ErlayBTCFloodFigure 17: Comparison of configurations of the Erlay-style protocol along the latency-bandwidth trade-off, as compared to
BTCFlood (which does flooding only and no reconciliation). All points except for BTCFlood perform reconciliation on all
links. Each point varies the choice of the number of peers to flood to that are inbound (out of 8 total), and outbound (out of
100% total). Points with the same inbound/outbound configurations have the same color. We split the points across two plots
for readability.
and (2) from which node the spy learned it. In our setup, at the end
of the experiment the spy nodes aggregate their logs and estimate
that the source node of a transaction is the node which was the very
first one to announce the transaction (to any of the spies). Tables 2
and 3 list the success rates of the first-spy estimator for different
number of spies, which were either private or public nodes.
While Erlay is more susceptible to spying by private nodes (Ta-
bles 2), we believe that this is acceptable for three reasons. (1) The
success rate is below 50% for both protocols, which means that this
deanonymization attack is unreliable, (2) the difference between
the two protocols is at most 10%, and (3), Erlay is materially more
susceptible to spying when there are higher levels of private spying
nodes (30%). At this level, an attack with public spies is a more
reasonable alternative since the attacker must control fewer nodes
to achieve a higher attack success rate.
By contrast, Erlay increases the cost of the deanonymization
attack by public nodes (Table 3): an attacker must control more
long-running public nodes in the network with Erlay than with
BTCFlood to achieve the same attack rate.
We also measured that increasing the connectivity with Erlay
does not change the success rate of first-spy estimation.
First-spy estimation is just one type of timing attack strategy.
Withstanding more sophisticated attacks (e.g., fingerprinting prop-
agation traces) is an open question for future research.
10.2 Stale block rate
One notable security property of PoW-based blockchains is the
stale block rate, which is the fraction of mined blocks that do not
become part of the blockchain because a concurrently mined block
is added instead. Increasing the stale block rate reduces security
of the network [20, 32, 61]. A higher latency of block relay leads
to a higher stale block rate because during the time between the
Private node spies
5%
10%
30%
60%
BTCFlood Erlay
16%
20%
27%
31%
18%
20%
20%
21%
Table 2: Success rate of first-spy estimator with variable
number of private spying nodes in BTCFlood and Erlay.
Public node spies
5%
10%
30%
60%
BTCFlood Erlay
11%
15%
32%
67%
11%
19%
52%
82%
Table 3: Success rate of first-spy estimator with variable
number of public spying nodes in BTCFlood and Erlay.
creation and reception of a block, other miners would mine on the
previous block instead of the latest one.
Compact Block relay [17] is a currently deployed measure in
the Bitcoin P2P stack for reducing block relay latency. Compact
Blocks performance relies on nodes in the network having all the
transactions in the block: in this case a block can be relayed between
two directly connected nodes with just one message (or in 0.5 RTT).
If at least one transaction from the block is missing, three messages
are needed (or 1.5 RTT), because a node receiving the block must
request the missing transactions.
To evaluate the protocols, we measured the round trips required
to relay blocks between two random private nodes (representing
miners) in a network of 54,000 private nodes and 6,000 public nodes.
Flooding-only BTCFlood8, 100%Reconciliation-only0, 0%2,0%4,0%6,0%Erlay8, 0%2,10%2,5%0,20%0,10%0,5%Reconciliation-only0, 0%Erlay8, 0%Erlay8, 0%0,40%4, 0%4, 5%2,0%8,5%6,5%4,5%2,5%0,5%X : Flooding inbound #Y : Flooding outbound %X, Y%LegendX, 5%X, 0%X, 10%X : Flooding inbound #Y : Flooding outbound %X, Y%Legend2, Y%0, Y%4, Y%Flooding-only BTCFlood8, 100%0,10%2,10%4,10%6,10%8,10%4, 10%While it is not clear whether miners run public or private nodes, we
measured the latency between private nodes because it is always
higher.
To understand the best-case behavior (the shortest possible path),
we simulated Compact Block relay of empty blocks, meaning that
every transfer between two peers took 0.5 RTT. Then, we simulated
transaction relay with Erlay and BTCFlood, and ran Compact Blocks
at a random point of time during continuous transaction relay. We
repeated this experiment 50 times. Relaying blocks while using
BTCFlood for transaction relay took on average 2.035 RTTs, and
with Erlay 1.985 RTTs, with a best-case (empty blocks) taking 1.945
RTTs. With higher connectivity, Erlay’s latency further approaches
the best-case.
Erlay helps to reduce block relay latency between two random
private nodes because of the faster transaction relay among public
nodes (which bridge private nodes in the network), public nodes
almost always have the necessary transactions, and relay blocks
within 0.5 RTT. This result indicates that Erlay makes the network
more secure by reducing the stale block rate.
10.3 Other attacks
Eclipse attack. The combination of limited flooding and reconcilia-
tion over every link in the network makes Erlay no more susceptible
to eclipsing than with BTCFlood: unless a node is isolated from
the rest of the network by connecting only to an attacker, a node
would receive all the transactions.
Mining-related attacks. There is no direct relationship be-
tween Erlay and attacks like selfish mining [26]. By making timing
attacks more expensive, Erlay makes it harder to infer the network
topology. Inferring the topology would allow clustering the net-
work by attacking bottlenecks. Clustering the network would then
split mining efforts and introduce many stale blocks until the net-
work clusters recompose. Thus, Erlay indirectly makes the network
stronger.
Black holes. We evaluated Erlay’s latency in a simple adversar-
ial setting. For this we simulated a network in which 10% of the
public nodes are black holes and measured the time for a transaction
to reach all nodes. While it is difficult to outperform the robustness
of BTCFlood, an alternative protocol should not be dramatically
impacted by this attack.
According to our measurements, while the slowdown with BTCFlood
in this setting is 2%, the slowdown with Erlay is 20%. We believe
that this latency increase is acceptable for a batching-based proto-
col. We have ideas for heuristics that might be applied to mitigate
black-hole attacks and make Erlay less susceptible. For example,
a node might avoid reconciling with those outbound connections
that regularly provide the fewest new transactions.
Denial-of-service. Set reconciliation is a fertile ground for DoS
attacks because decoding a sketch is computationally expensive. To
prevent these attacks, in our protocol the node that is interested in
reconciliation (and the one that has to decode the sketch) initiates
reconciliation (Alice, in the example from Section 5). Bob cannot
coerce Alice to perform excessive sketch decoding.
The impact of churn. According to the data we obtained from a
long-running Bitcoin measurement node, 80% of connections to the
node were maintained for at least one day, and 95% of connections
Base cost (MB)
(TX+GETDATA)
Other messages (MB)
Announcement cost (MB)
Latency (s)
BTCFlood Erlay
27
1.1
15
2.05
27
1.06
42
1.85
Table 4: Prototype measurements collected from a 100-node
deployment comparing the latency and bandwidth of the
BTCFlood in the reference implementation against our Er-
lay implementation.
were maintained for at least one hour. This means that only a small
fraction of connections are non-persistent. We believe that the
impact of this low connection churn rate on the efficiency of the
frequent (order of seconds) set reconciliation and the overall Erlay
protocol is negligible in practice.
11 REFERENCE IMPLEMENTATION RESULTS
We implemented Erlay as part of Bitcoin Core. For this we added
584 LOC, not including Minisketch. We used a network of 100 Azure
nodes located in 6 data centers, running a reference implementa-
tion of our protocol integrated in Bitcoin Core node software, to
evaluate Erlay in deployment. We generated and relayed 1000 trans-
actions, all originating from one node with a rate of 7 transactions
per second. We compared the average latency and bandwidth of
Erlay versus Bitcoin’s current implementation. Table 4 summarizes
our results. According to our measurements, Erlay introduced a
latency increase of 0.2 seconds, while saving 40% of the overall
node bandwidth.
As in our simulations, Erlay has a higher latency but lower
bandwidth cost, confirming our original design intent (Fig. 6).
12 DISCUSSION
Reconciliation-only relay. We believe that a reconciliation-only
transaction relay protocol would be inherently susceptible to tim-
ing attacks that could reveal the source of the transaction. Unlike
flooding, reconciliation is inherently bi-directional: an inbound con-
nection for one peer is an outbound connection for another peer.
Delays cannot be applied per-direction but rather per-link. There-
fore, BTCFlood’s diffusion delay cannot be used in reconciliation.
Set difference estimation algorithms. Erlay could use more
sophisticated algorithms to estimate set difference [15, 29]. We
have not yet integrated these algorithms for three reasons: (1) Erlay
already has a low overhead due to over- and under-estimations
(see Section 8.1), (2) those algorithms would require added code
complexity, and (3) they would increase the number of messages in
the protocol and increase bandwidth usage.
Erlay increases latency from 3.15s to 5.75s. Erlay increases
the time to relay an unconfirmed transaction across all nodes, which
is a small fraction of the end-to-end transaction processing (10
minutes). We tuned Erlay to maximize bandwidth savings assuming
that an increase in latency from 3.15s to 5.75s is acceptable. It is
possible to tune Erlay to provide the same latency as BTCFlood
by reconciling more often, but this would save 70% of transaction
relay bandwidth instead of 84%. If we tuned Erlay to provide the
same latency as BTCFlood, we could increase network connectivity
and improve the network security without additional bandwidth
overhead. Section 9 details more results from experiments that tune
the latency-bandwidth trade-off. In practice, there are 2 primary
implications of transaction relay latency increase.
Stale block rate represents the fraction of mined blocks that
become abandoned because of concurrently generated blocks. In
Section 10.2 we explained how the stale block rate correlates with
the security of the network and demonstrated that Erlay reduces
the stale block rate by reducing transaction relay latency among
public nodes.
User experience. If a transaction is accepted in an unconfirmed
state, then the user perceives the 2.6s latency increase. However,
unconfirmed transactions are rarely accepted by users. Instead,
users wait for at least 10 minutes to confirm transactions. Therefore,
we think that Erlay’s 2.6s latency increase insignificantly impacts
the users’ experience.
Compatibility with Dandelion. Dandelion is an alternative
transaction relay protocol introduced to improve the anonymity
and robustness to adversarial observers in Bitcoin [28]. Dandelion
has two phases: stem (propagation across a single link of ten nodes
on average), and fluff (relay using flooding from the last node in the
stem link). Erlay is complimentary with Dandelion: Erlay would
replace the fluff phase in Dandelion, while the stem phase of Dan-
delion would flood through both inbound and outbound links to
preserve the privacy of private nodes.
Backward compatibility. Only about 30% of Bitcoin nodes
run the latest release of Bitcoin Core6. Therefore, Erlay must be
backward compatible. If not all nodes use Erlay, then Erlay may be
activated per-link if both peers support it.
13 RELATED WORK
Prior studies of Bitcoin’s transaction relay focused on information
leakage and other vulnerabilities [28, 54], and did not consider
bandwidth optimization. We believe that our work is the first to
introduce a bandwidth-efficient, low-latency, and robust transaction
relay alternative for Bitcoin. Erlay is designed as a minimal change
to Bitcoin (584 LOC), in contrast with other proposals that optimize
Bitcoin more deeply [25].
Short transaction identifiers. One solution to BTCFlood’s ineffi-
ciency is to use short transaction identifiers. There are two issues
with this solution. First, this only reduces bandwidth cost by a con-
stant factor. In our simulation we found that short identifiers would
reduce redundant traffic from 43% to 10%. But, with higher connec-
tivity, redundancy climbs back up faster than it does with Erlay.
The second issue with short IDs is that they would make the system
vulnerable to collision-related attacks, requiring a new per-node or
per-link secure salting strategy.
Blocksonly setting. Bitcoin Core 0.12 introduced a blocksonly
setting in which a node does not send or receive individual transac-
tions; instead, the node only handles complete blocks. As a result,
blocksonly has no INV message overhead. In the blocksonly case,
nodes will have to relay and receive many transactions at once.
This will increase the maximum node bandwidth requirements and
cause spikes in block content relay and transaction validation.
6https://luke.dashjr.org/programs/bitcoin/files/charts/security.html
Reconciliation alternatives. Prior work has also devised multi-
party set reconciliation [13, 51]. This approach, however, has addi-
tional complexity and additional trust requirements between peers.
We believe that the benefits of such an approach are not substan-
tial enough to justify these limitations. In addition, techniques
based on set reconciliation usually provide bandwidth-efficiency
under the assumptions where most of the state being reconciled is
shared [17, 56].
Network attacks on Bitcoin and connectivity. The security
of the Bitcoin network has been under substantial scrutiny with
many published network-related attacks [10–12, 18, 21, 24, 34, 36,
40, 41, 44, 47, 48, 53]. These attacks attempt to make the network
weaker (e.g., increase the probability of double-spending or denials
of service) or violate user privacy. Many of these attacks rely on
non-mining nodes and assume limited connectivity from victim
nodes. Our work allows Bitcoin nodes to have higher connectivity,
which we believe will make the network more secure.
Prior P2P research. Structured P2P networks are usually based
on Distributed Hash Tables (DHTs), in which every peer is respon-
sible for specific content [46]. In these networks research has ex-
plored the use of topology information to make efficient routing