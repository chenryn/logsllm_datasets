在 buuoj 上看到的这个比赛题目，期间平台关了，就拿了 Dockerfile 本地做了，web 题目感觉还不错
# encode_and_encode [100]
  * 打开靶机，前两个页面都是 html 页面，第三个给了页面源码
  * 源码如下
    not found\n";
        }
      } else {
        $content = 'invalid request';
      }
    // no data exfiltration!!!
    $content = preg_replace('/HarekazeCTF\{.+\}/i', 'HarekazeCTF{&lt;censored&gt;}', $content);
    echo json_encode(['content' => $content]);
  * `file_get_contents('php://input')` 获取 post 的数据，`json_decode($body, true)` 用 json 格式解码 post 的数据，然后 `is_valid($body)` 对 post 数据检验，大概输入的格式如下
  * `is_valid($body)` 对 post 数据检验，导致无法传输 `$banword` 中的关键词，也就无法传输 `flag`，这里在 json 中，可以使用 Unicode 编码绕过，`flag` 就等于 `\u0066\u006c\u0061\u0067`
  * 通过检验后，获取 `page` 对应的文件，并且页面里的内容也要通过 `is_valid` 检验，然后将文件中 `HarekazeCTF{}` 替换为 `HarekazeCTF{&lt;censored&gt;}` ，这样就无法明文读取 flag
  * 这里传入 `/\u0066\u006c\u0061\u0067` 后，由于 `flag` 文件中也包含 flag 关键字，所以返回 `not found` ，这也无法使用 `file://`
  * `file_get_contents` 是可以触发 `php://filter` 的，所以考虑使用伪协议读取，对 `php` 的过滤使用 `Unicode` 绕过即可
  * 可以看出，json 在传输时是 Unicode 编码的
# Avatar Uploader 1 [100]
  * 给了源码，打开靶机，登录之后，是一个文件上传
  * 首先 `config.php` 中定义了一些常量
  * 然后在 `upload.php` 中判断文件大小，并使用 `FILEINFO` 判断上传图片类型，上传图片只能是 png 类型
  * 后面再用 `getimagesize` 判断文件像素大小，并且再进行一次类型判断，如果不是 png 类型就给出 flag
  * 在这两种判断上传图片类型的函数中，有一个很有趣的现象， `FILEINFO` 可以识别 png 图片( 十六进制下 )的第一行，而 `getimagesize` 不可以，代码如下
     0:
            print(flag[0])
            break
# Avatar Uploader 2 [300]
  * 接 `Uploader1` ，这里是找第二个 flag
  * 给的 hint: 
  * `upload.php` 中可以利用的暂时已经利用完了，看一下 `index.php` 吧
  * `index.php` 代码简化大致如下
    isset('flash')) {
      $flash = $session->get('flash');
      $session->unset('flash');
    }
    $avatar = $session->isset('avatar') ? 'uploads/' . $session->get('avatar') : 'default.png' ;
    $session->save();
    include('common.css');
    include($session->get('theme', 'light') . '.css');
    if ($session->isset('name')) {
        echo "Hello".$session->get('name')."";
    }
    if ($flash) {
        echo $flash['type']."";
        echo $flash['message']."";
    }
    if ($session->isset('name')) {
        echo "Please upload"."";
    } else {
        echo "Please sign in"."";
    }
  * 这里的 session 处理机制是自己写的，在 `lib\session.php` 中，首先确认的事情是，登录后 HTTP 头部返回的 `Cookie` 是 `session=******.******` 这种格式的
  * 首先 `__construct` 中，判断 `session` 是否存在 `$_COOKIE` 中，如果存在则以 `.` 分割 `session` ，然后对 `data` 和 `signature` 进行 `verify` 函数认证，认证成功就返回数据的 `json_decode` 的结果
  * `isset` 中判断参数 `$key` 是否在 `data` 中，`get` 中返回 `data` 中 `key` 为参数 `$key` 的数据，`set` 中将 `data` 中 `key` 为参数 `$key` 的数据设置为参数 `$value`，`unset` 中删除 `data` 中 `key` 为参数 `$key` 的数据
  * `save` 中将 `data` 转化为 json 并进行 `urlsafe_base64_encode`，再用 `sign` 对 `data` 进行签名
  * 这样整个 `session.php` 就完了，回到 `index.php`，然后进行的是 `flash` 的判断，找了一下，在 `lib\util.php` 中描述了 `flash` 并且给了调用 `flash` 函数的条件，即 `error` 函数，找了一下，`error` 在 `upload.php` 中，上传失败时调用
  * 做的测试如图，`flash` 将错误信息保存在 `session` 中的
  * 根据给的提示，`password_hash` 函数是存在安全隐患的，它的第一个参数不能超过 72 个字符，这个函数在 `sign` 中被调用，`sign` 被 `save` 调用，`save` 在 `index.php` 中被调用
  * `password_hash` 函数的漏洞就意味着只对前 72 个字符进行签名，只要前 72 个字符相同，那么就会在校验时通过
  * 那么是不是可以登录一次，然后访问 `upload.php` 触发 `error` 函数，这样就能绕过 session 校验，然后对 data 信息进行修改，进而触发其他操作
  * 可以看到，在 `index.php` 中存在一行代码 `include($session->get('theme','light').'.css');` ，session 信息是由我们控制的，那么就可以通过 phar 协议，触发 LFI ，首先要把 phar 文件上传，里面复合一个假的 css 文件，存放一句话，这样就可以在 `include` 时触发 RCE
  * 生成 phar 代码
    startBuffering();
    $phar->addFromString('exp.css', '');
    $phar->setStub($png_header . '');
    $phar->stopBuffering();
  * 本地对这个 phar 做的一个测试
  * 新登录一个用户，上传这个 phar，记录这个 phar 的地址和名字，然后去 `upload.php` 触发一次 `error` ，记录 `data` 和 `signature` ，修改 `data` ，增加 `theme` 键，键值为 phar 协议读取上传的文件，然后生成 session 再去访问 `index.php` 传入命令即可
  * exp.py
    import base64