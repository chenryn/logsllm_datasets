3.1 MIL Program Examples
We introduce some illustrative examples of MIL programs, using
their graph representation. For clarity, we omit conditions when-
ever they are true and visualize only the immediate dependencies
between graph elements.
Consider an ISA instruction that increments the value of regis-
ter r1 by one, i.e., r1:= r1+1. Œe instruction can be translated in
MIL as follows:
(cid:26) t1 ← r1, t2 ← ld R t1, t3 ← t2 + 1, t4 ← st R t1 t3,
t5 ← ld P C , t6 ← t5 + 4, t7 ← st P C t6
(cid:27)
Intuitively, t1 refers to the identiﬁer of target register r1, t2 loads
the current value of register r1, t3 executes the increment, and t4
stores the result of t3 in the register store. Œe translation of an
ISA instruction also updates the program counter to enable the ex-
ecution of the next instruction. In this case, the program counter
is increased by 4, unconditionally. Notice that we omit the pro-
gram counter’s address, since there is only one such resource. We
can graphically represent this set of microinstructions using the
following graph:
t1
⊤ r1
t2
t3
t4
⊤ l d R t1
⊤ t2 + 1
⊤ st R t1 t3
t5
⊤ l d P C
t6
t7
⊤ t5 + 4
⊤ st P C t6
Example 1: r1 := r1+1
In the following we adopt syntactic sugar to use expressions, in
place of names, for the address and value of load and store oper-
ations. Œis can be eliminated by introducing the proper interme-
diary internal assignments. Œis permits to rewrite the previous
example as:
t2
l d R r1
t4
st R r1 t2 + 1
t5
l d P C
t7
st R t5 + 4
Œe translation of multiple ISA instructions results in discon-
nected graphs. Œis reﬂects the fact that inter-instruction depen-
dencies may not be statically identiﬁed due to dynamic references
and must be dynamically resolved by the MIL semantics. When
translating multiple instructions, we use the following convention
for generated names: the name ti j identiﬁes the j-th microinstruc-
tion resulting from the translation of the i-th instruction. Our
convention induces a total (lexicographical) order over names (i.e.,
ti j  t ′ ∧ [c ′′]σ ∧ [t ′′
a ]σ ∈
c ′′?st τ t ′′
{[ta]σ , [t ′
Œe stores that may aﬀect the address of t are the stores that:
(i) have not been discarded, namely they can be executed ([c]σ ) or
may be executed (c(σ )↑), and (ii) the store address in t ′
a may result
in the same address as the load address in ta , namely either they
both evaluate to the same address (σ (t ′
a ) = σ (ta )), or the store ad-
dress is unknown (σ (t ′
a )↑), or the load address is unknown (σ (ta )↑).
Œe active stores of t are the stores that may aﬀect the load ad-
dress computed by ta , and, there are no subsequent stores t ′′ on
the same address as the load address in ta , or on the same address
as the store address in t ′
a . Œis set determines the “minimal” set of
store operations that may aﬀect a load operation from address ta .
Œe deﬁnitions of str-act(σ , t ) and str-may(σ , t ) are naturally ex-
tended to stores t ← c?st τ ta tv . Œese deﬁnitions allow us to
deﬁne the semantics of loads:
[t ← c?ld τ ta]σ =
⊥
([ts ]σ , l )
where l =(cid:26) dl σ (ta )
·
if bn(str-act(σ , t )) = {ts }∧
σ (ta )↓ ∧ σ (ts )↓
otherwise
if ts ∈ C ∧ τ = M
otherwise
A load operation can be executed if the set of active stores con-
sists of a singleton set with bound name ts , i.e., the store causing
ta to be assigned is uniquely determined, and both the address ta
of the load and the address ts of the store can be evaluated in state
σ .
Note that the semantics allows forwarding the result of a store
to another microinstruction before it is commiŠed to memory. In
fact, if the active store is yet to be commiŠed to memory, i.e., ts < C,
it is possible for the store to forward its data to the load, without
causing an interaction with the memory subsystem (i.e., l = ·). Oth-
erwise, the load yields an observation of a data load from address
σ (ta ).
Example 3 illustrates the semantics of loads. Œe program writes
1 into address 1, then writes 2 in 0, overwrites address 1 with 3,
and ﬁnally loads from address 1. We use active stores to dynam-
ically compute the dependencies of load operations. Let σ0 be a
state containing microinstructions as in the example, and having
empty storage. For this state, the active store for the load t42, i.e.,
str-act(σ0, t42), consists of all stores of the example, as depicted by
the solid rectangle. Since none of microinstructions that compute
the addresses have been executed, the address t41 of the load is
5
t11
t21
t31
t41
1
0
1
1
t12
st M t11 1
t22
st M t21 2
t32
st M t31 3
l d M t41
t42
Example 3: *(1):=1; *(0):=2; *(1):=3; *(1);
unknown, hence, we cannot exclude any store from aﬀecting the
address that will be used by t42. Œerefore, the load cannot be ex-
ecuted in σ0. Œis set of active stores will shrink during execution
as more information becomes available through the storage.
Let the storage of σ1 be {t11 7→ 1; t31 7→ 1}, i.e., the result of
executing t11 and t31. Œe active stores str-act(σ1, t42) consist of
microinstructions depicted by the dashed rectangle. Observe that
the store t12 is in str-may(σ1, t42), however there exists a subse-
quent store, namely t32, that overwrites the eﬀects of t12 on the
same memory address. Œerefore, t12 is no longer an active store
and it can safely be discarded.
Let the storage of σ2 be {t11 7→ 1; t31 7→ 1, t41 7→ 1}, i.e., the
result of executing t11, t31 and t41. Œe active stores str-act(σ2, t42)
now consist of the singleton set {t32} as depicted by the doŠed rec-
tangle. Œis is because the address t41 of the load can be computed
in state σ2. Although t22 is still in str-may(σ2, t42), there is a sub-
sequent store, t32, that will certainly aﬀect the address of the load.
Œerefore, t22 is no longer an active store.
Finally, let the storage of σ3 be {t11 7→ 1; t31 7→ 1, t41 7→ 1, t32 7→
3}, i.e., the result of executing t11, t31, t41, and t32. Once str-act has
been reduced to a singleton set ({t32}), and the active-store has
been executed (σ3(t32)↓), the semantics of the load is deﬁned. Œis