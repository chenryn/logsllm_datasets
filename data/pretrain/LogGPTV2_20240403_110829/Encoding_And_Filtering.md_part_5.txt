### 1.2.3.2 Native Browser Filters

#### XSS Filter (Internet Explorer)

**Architecture and Implementation:**
The architecture and implementation of the XSS Filter in Internet Explorer are detailed in a blog post available at:
- [IE 8 XSS Filter Architecture/Implementation](http://blogs.technet.com/b/srd/archive/2008/08/18/ie-8-xss-filter-architecture-implementation.aspx)

**XSS Filter Rules:**
The XSS Filter rules are hardcoded in the `c:\windows\system32\mshtml.dll` library. You can inspect these rules using various tools, including:
- Hex editors like WinHex or Notepad++ with the TextFX plugin
- IDAPro
- MS-DOS commands

**Command to Extract Rules:**
To extract the rules, you can use the following command:
```sh
findstr /C:"sc{r}" \WINDOWS\SYSTEM32\mshtml.dll | find "{"
```
For a more readable version, export the result to a file and use a text editor:
```sh
findstr /C:"sc{r}" \WINDOWS\SYSTEM32\mshtml.dll | find "{" > savepath
```

**Example Rule Extraction:**
Here is an example of an extracted rule from Internet Explorer 11:
- **Original Rule:**
  ```json
  {}
  ```
- **Transformed Rule:**
  ```json
  {[ /+\t\"\'`]{o}n\c\c\c+?[ +\t]*?=.}
  ```

**Filter in Action:**
- **XSS Attack:**
  ```json
  {}
  ```
- **Transformed by Filter:**
  ```json
  {[ /+\t\"\'`]{o}n\c\c\c+?[ +\t]*?=.}
  ```

**Effectiveness:**
The XSS Filter in Internet Explorer has 25 well-constructed rules that are difficult to bypass. Over the years, several bypasses have been discovered, but the latest versions appear to be stronger than previous ones (unless you have a 0-day exploit).

**Enabled Zones:**
The XSS Filter is enabled by default in the Internet, Trusted, and Restricted security zones. However, there is a feature to disable the filter if certain sites depend on reflected values that the filter searches for.

**Opting Out:**
Websites that wish to opt out of this protection can use the HTTP response header:
```http
X-XSS-Protection: 0
```

**Enhanced Protection:**
Later, the IE team added support for a new token in the header:
```http
X-XSS-Protection: 1; mode=block
```
With this token, if a potential reflected XSS attack is detected, the browser will render a simple error page instead of attempting to sanitize the page. A test can be found at:
- [Block Mode Test](http://www.enhanceie.com/test/xss/BlockMode.asp)

**Cross-Browser Support:**
Although the `X-XSS-Protection` header was initially introduced by Internet Explorer, it is now supported by other browsers based on WebKit and Blink, such as Safari.

### XSSAuditor (WebKit/Blink)

**Development and Implementation:**
Following the footsteps of Internet Explorer, researchers developed their own set of client-side XSS filters, known as XSSAuditor. This is enabled by default in browsers such as Google Chrome, Opera, and Safari.

**Approach:**
XSSAuditor adopts a different approach compared to the IE XSS Filter. The authors claim that the new filter design is both effective and highly precise. To achieve this, XSSAuditor is placed between the HTML Parser and the JavaScript engine.

**Comparison:**
- **XSS Filter:**
  - Analyzes and sanitizes the content.
- **XSSAuditor:**
  - Analyzes both inbound and outbound requests.
  - If executable code is found in the parsed HTML data, it stops the script and generates a console alert.

**Bypasses:**
Over the years, multiple bypasses for XSSAuditor have been discovered. A simple search on Google will reveal more information on bypasses than on the filter itself.

### References

- [RFC 3986](http://tools.ietf.org/html/rfc3986#section-2.1)
- [(Please) Stop Using Unsafe Characters in URLs: Character Encoding Chart](http://perishablepress.com/stop-using-unsafe-characters-in-urls/)
- [RFC 2616](https://tools.ietf.org/html/rfc2616)
- [ISO/IEC 8859-1](http://en.wikipedia.org/wiki/ISO/IEC_8859-1)
- [PHP header()](http://www.php.net/header)
- [HttpResponse Class](http://msdn.microsoft.com/en-us/library/system.web.httpresponse)
- [HTML Document Representation: 5.3 Character References](http://www.w3.org/TR/1998/REC-html40-19980424/charset.html#h-5.3)
- [HTML Standard: 12.1.4 Character References](http://www.w3.org/TR/html5/single-page.html#character-references)
- [Character entity references in HTML](http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML)
- [Reddit](http://www.reddit.com/)
- [TinyURL](http://tinyurl.com/)
- [base_convert](http://www.php.net/manual/en/function.base-convert.php)
- [Base64: Implementations and History](http://en.wikipedia.org/wiki/Base64#Implementations_and_history)
- [base64_encode](https://www.php.net/base64_encode)
- [base64_decode](https://www.php.net/base64_decode)
- [WindowOrWorkerGlobalScope.btoa()](https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa)
- [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)](http://www.joelonsoftware.com/articles/Unicode.html)
- [Homoglyph](http://en.wikipedia.org/wiki/Homoglyph)
- [Unicode® Technical Standard #39 - UNICODE SECURITY MECHANISMS](http://www.unicode.org/reports/tr39/)
- [Unicode Utilities: Confusables](http://unicode.org/cldr/utility/confusables.jsp)
- [Homoglyph Attack Generator](http://www.irongeek.com/homoglyph-attack-generator.php)
- [Out of Character: Use of Punycode and Homoglyph Attacks to Obfuscate URLs for Phishing](http://www.irongeek.com/i.php?page=security/out-of-character-use-of-punycode-and-homoglyph-attacks-to-obfuscate-urls-for-phishing)
- [Creative usernames and Spotify account hijacking](http://labs.spotify.com/2013/06/18/creative-usernames/)
- [Unicode Utilities: Description and Index](http://unicode.org/cldr/utility/)
- [Codepoints](http://codepoints.net/)
- [Transformation tools for Unicode text](http://txtn.us/)
- [Unicode Text Converter](http://www.panix.com/~eli/unicode/convert.cgi)
- [OWASP Enterprise Security API](https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API)
- [ModSecurity](http://www.modsecurity.org/)
- [Deterministic finite automaton](http://en.wikipedia.org/wiki/Deterministic_finite_automaton)
- [Nondeterministic finite automaton](http://en.wikipedia.org/wiki/Nondeterministic_finite_automaton)
- [Control character](http://en.wikipedia.org/wiki/Control_character)
- [GitHub: SpiderLabs / ModSecurity Documentation](https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#drop)
- [GitHub: EnableSecurity / wafw00f](https://code.google.com/p/waffit/)
- [File http-waf-fingerprint](http://nmap.org/nsedoc/scripts/http-waf-fingerprint.html)
- [imperva-detect](https://code.google.com/p/imperva-detect/)
- [NoScript Security Suite](https://addons.mozilla.org/en-US/firefox/addon/noscript/)
- [NoScript: Anti-XSS protection](http://noscript.net/features#xss)
- [IE8 Security Part IV: The XSS Filter](http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-iv-the-xss-filter.aspx)
- [IE 8 XSS Filter Architecture / Implementation](http://blogs.technet.com/b/srd/archive/2008/08/18/ie-8-xss-filter-architecture-implementation.aspx)
- [Event 1046 - Cross-Site Scripting Filter: Remediation](http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx#remediation)
- [Regular Expressions Considered Harmful in Client-Side XSS Filters](http://www.adambarth.com/papers/2010/bates-barth-jackson.pdf)
- [The META element](https://www.w3.org/TR/html401/struct/global.html#h-7.4.4.2)
- [Unicode Security Guide](http://websec.github.io/unicode-security-guide/)
- [Comparison of regular expression engines](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines)
- [Regular Expressions Reference Table of Contents](https://www.regular-expressions.info/refflavors.html)
- [Base 36 as senary compression](http://tinyurl.com/jfvqr)

---

**WAPTXv2: Section 1, Module 1 - Caendra Inc. © 2020**