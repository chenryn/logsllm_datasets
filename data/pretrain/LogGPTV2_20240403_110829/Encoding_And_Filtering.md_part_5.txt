engines that support XSS Auditor.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.137
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer)
The architecture and
implementation of XSS Filter
in Internet Explorer is
explained in this blog post.
http://blogs.technet.com/b/srd/archive/2008/08/18/ie-8-xss-filter-architecture- WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.138
implementation.aspx
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer)
The XSS Filter rules are hardcoded in the
c:\windows\system32\mshtml.dll library. We have
multiple ways to inspect them using the following:
• Hex editors like WinHex, or Notepad++ with TextFX
plugin
• IDAPro
• MS-DOS commands!
Faster solution!
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.139
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer)
The command is:
findstr /C:"sc{r}" \WINDOWS\SYSTEM32\mshtml.dll | find "{"
If you want a more "human-readable" version, then export the result to a
file and use a text editor to read the content.
findstr /C:"sc{r}" \WINDOWS\SYSTEM32\mshtml.dll | find "{" > savepath
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.140
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer)
Here are few extracted rules in Internet Explorer 11:
{}
{
is transformed to:
Filter rule
{[ /+\t\"\'`]{o}n\c\c\c+?[ +\t]*?=.}
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.146
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer): Neutering in Action
The XSS attack:
is transformed to:
Filter rules
{]}
{[ /+\t\"\'`]{o}n\c\c\c+?[ +\t]*?=.}
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.147
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer):
The XSS Filter has a few rules, just 25, but are well
constructed and difficult to attack.
Over the years, several bypasses have been discovered;
however, the latest versions 'seem’ stronger than past
versions (unless you have a 0-day ☺).
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.148
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer):
XSS Filter is enabled by default in the Internet, Trusted, and
Restricted security zones, but an interesting feature was
introduced to disable the filter.
The main reason was because some sites may depend on
the reflected values that the filter searches for.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.149
http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx#remediation
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer):
Web sites that chose to opt-out of this protection can use
the HTTP response header:
X-XSS-Protection: 0
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.150
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer):
Later, the IE team added support to a new token in the
header:
X-XSS-Protection
X-XSS-Protection: 1; mode=block
With this token, if a potential reflected XSS attack is
detected, the browser, rather than attempting to sanitize the
page, will render a simple . Here is a simple test.
#
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.151
http://www.enhanceie.com/test/xss/BlockMode.asp
1.2.3.2 Native Browser Filters
XSS Filter (Internet Explorer):
Even if the header was initially introduced by
X-XSS-Protection
Internet Explorer, today other browsers based on WebKit
and Blink support it.
Safari
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.152
1.2.3.2 Native Browser Filters
XSSAuditor (WebKit/Blink)
In the footsteps of Internet Explorer, some researchers
developed their own set of client-side XSS filters, also
known as XSSAuditor.
The implementation is only for the Blink/WebKit rendering
engines. This is enabled by default in browsers such as
Google Chrome, Opera and Safari.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.153
http://www.adambarth.com/papers/2010/bates-barth-jackson.pdf
1.2.3.2 Native Browser Filters
XSSAuditor (WebKit/Blink)
Despite the IE XSS Filter, XSSAuditor adopts a different
approach to the problem. As the authors claims, the new
filter design is both effective and highly precise. To do this,
they placed XSSAuditor in between the HTML Parser and
JS engine.
The image on the following slide will clarify the differences.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.154
1.2.3.2 Native Browser Filters
XSSAuditor (WebKit/Blink): XSS Filter vs XSSAuditor
XSS Filter
XSSAuditor
Images taken from http://www.adambarth.com/papers/2010/bates- WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.155
barth-jackson.pdf
1.2.3.2 Native Browser Filters
XSSAuditor (WebKit/Blink)
The filter analyzes both the inbound requests and the
outbound. If, in the parsed HTML data, it finds executable
code within the response, then it stops the script and
generates a console alert similar to the following:
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.156
1.2.3.2 Native Browser Filters
XSSAuditor (WebKit/Blink)
Over the years, even with XSS Auditor, security researchers
found multiple bypasses…Oh yes, they did!
A simple search on google about returns more
XSS Auditor
information on bypasses than on the filter itself.
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.157
References
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.158
References
RFC 3986
http://tools.ietf.org/html/rfc3986#section-2.1
(Please) Stop Using Unsafe Characters in URLs: Character Encoding Chart
http://perishablepress.com/stop-using-unsafe-characters-in-urls/
RFC 2616
https://tools.ietf.org/html/rfc2616
ISO/IEC 8859-1
http://en.wikipedia.org/wiki/ISO/IEC_8859-1
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.159
References
PHP header()
http://www.php.net/header
HttpResponse Class
http://msdn.microsoft.com/en-us/library/system.web.httpresponse
HTML Document Representation: 5.3 Character References
http://www.w3.org/TR/1998/REC-html40-19980424/charset.html#h-5.3
HTML Standard: 12.1.4 Character References
http://www.w3.org/TR/html5/single-page.html#character-references
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.160
References
Character entity references in HTML
http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_
entity_references_in_HTML
Reddit
http://www.reddit.com/
TinyURL
http://tinyurl.com/
base_convert
http://www.php.net/manual/en/function.base-convert.php
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.161
References
Base64: Implementations and History
http://en.wikipedia.org/wiki/Base64#Implementations_and_history
base64_encode
https://www.php.net/base64_encode
base64_decode
https://www.php.net/base64_decode
WindowOrWorkerGlobalScope.btoa()
https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.162
References
The Absolute Minimum Every Software Developer Absolutely, Positively
Must Know About Unicode and Character Sets (No Excuses!)
http://www.joelonsoftware.com/articles/Unicode.html
Homoglyph
http://en.wikipedia.org/wiki/Homoglyph
Unicode® Technical Standard #39 - UNICODE SECURITY MECHANISMS
http://www.unicode.org/reports/tr39/
Unicode Utilities: Confusables
http://unicode.org/cldr/utility/confusables.jsp
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.163
References
Homoglyph Attack Generator
http://www.irongeek.com/homoglyph-attack-generator.php
Out of Character: Use of Punycode and Homoglyph Attacks to
Obfuscate URLs for Phishing
http://www.irongeek.com/i.php?page=security/out-of-character-use-of-punycode-and-
homoglyph-attacks-to-obfuscate-urls-for-phishing
Creative usernames and Spotify account hijacking
http://labs.spotify.com/2013/06/18/creative-usernames/
Unicode Utilities: Description and Index
http://unicode.org/cldr/utility/
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.164
References
Codepoints
http://codepoints.net/
Transformation tools for Unicode text
http://txtn.us/
Unicode Text Converter
http://www.panix.com/~eli/unicode/convert.cgi
OWASP Enterprise Security API
https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.165
References
ModSecurity
http://www.modsecurity.org/
Deterministic finite automaton
http://en.wikipedia.org/wiki/Deterministic_finite_automaton
Nondeterministic finite automaton
http://en.wikipedia.org/wiki/Nondeterministic_finite_automaton
Control character
http://en.wikipedia.org/wiki/Control_character
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.166
References
GitHub: SpiderLabs / ModSecurity Documentation
https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#drop
GitHub: EnableSecurity / wafw00f
https://code.google.com/p/waffit/
File http-waf-fingerprint
http://nmap.org/nsedoc/scripts/http-waf-fingerprint.html
imperva-detect
https://code.google.com/p/imperva-detect/
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.167
References
NoScript Security Suite
https://addons.mozilla.org/en-US/firefox/addon/noscript/
NoScript: Anti-XSS protection
http://noscript.net/features#xss
IE8 Security Part IV: The XSS Filter
http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-iv-the-xss-filter.aspx
IE 8 XSS Filter Architecture / Implementation
http://blogs.technet.com/b/srd/archive/2008/08/18/ie-8-xss-filter-architecture-
implementation.aspx
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.168
References
Event 1046 - Cross-Site Scripting Filter: Remediation
http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx#remediation
Regular Expressions Considered Harmful in Client-Side XSS Filters
http://www.adambarth.com/papers/2010/bates-barth-jackson.pdf
The META element
https://www.w3.org/TR/html401/struct/global.html#h-7.4.4.2
Unicode Security Guide
http://websec.github.io/unicode-security-guide/
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.169
References
Comparison of regular expression engines
https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines
Regular Expressions Reference Table of Contents
https://www.regular-expressions.info/refflavors.html
Base 36 as senary compression
http://tinyurl.com/jfvqr
WAPTXv2: Section 1, Module 1 -Caendra Inc. © 2020| p.170