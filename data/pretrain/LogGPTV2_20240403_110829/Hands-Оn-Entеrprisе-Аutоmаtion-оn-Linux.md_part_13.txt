owner: root
group: root
mode: '0644'
backup: yes
The role then continues, with the task of installing docker-compose on the VM
image:
- name: Install docker-compose 1.18.0
get_url:
url:
https://github.com/docker/compose/releases/download/1.18.0/docker-c
ompose-Linux-x86_64
dest: /usr/local/bin/docker-compose
mode: 0755
owner: root
group: root
Hence, our role is now complete, though be sure to customize it correctly for your
environment. For example, it is likely a newer version of docker-compose might
be available and this will mean a change to the url parameter of the
preceding get_url module.
The path of the chrony configuration file may vary depending on your
operating system—check this before running the preceding playbook. The
path shown in the example is suitable for a CentOS 7 system like the one
we built earlier.
3. Finally, we will create a file in the top-level directory (where
the roles/ directory was created) called site.yml to call and run this role. This
should contain the following:
---
- name: Run example roles
hosts: all
become: yes
roles:
- filecopyexample
[ 124 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
4. Finally, let's run our example with the ansible-playbook -i hosts
site.yml command and see what happens:
As we can see, the changed statuses tell us that all three of our files were transferred or
downloaded successfully, and by way of example, we can see that it is now possible to
run docker-compose, which was installed during the playbook run (though this would
require Docker to run correctly, which we have not installed as part of this example).
Obviously this example has made a fundamental assumption—that the chrony package
was installed on our example image during the build phase. Although it makes sense to
start with a minimal operating system image for the reasons we have discussed previously,
there is almost certainly going to be a requirement to install a few supplemental packages
on the basic build, and we will explore this in the next section.
[ 125 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Installing packages
We have looked at how to install a standalone binary such as docker-compose in the
previous section—but what if we need to actually install some additional operating system
packages that were not installed in our base image? For example, cloud-init is incredibly
useful in most cloud environments but was not included in our minimal CentOS 7 install
that we performed earlier.
Here, again, Ansible can help—this time, we will define a role to install the packages we
require. We'll reuse the inventory file from the previous section and create a new role
called packageinstall in the same manner that we did before:
1. Now, the preceding example on copying files would work on all Linux
distributions—the only thing you need to be mindful of is where destination files
might life. For example, our CentOS 7 VM image will have the chrony
configuration file installed in /etc/chrony.conf, whilst an Ubuntu 18.04 LTS
server would have it in /etc/chrony/chrony.conf. Apart from this small
change to the dest: parameter of the copy module, the code would remain the
same.
Unfortunately, it gets a little more complex with package installation.
2. Let's suppose we want to install cloud-init and docker on our CentOS 7
example image—the role required to do this might look like this:
---
- name: Install the epel-release package
yum:
name: epel-release
state: present
- name: Install cloud-init and docker
yum:
name: "{{ item }}"
state: present
loop:
- cloud-init
- docker
[ 126 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
3. We must install the EPEL repository first, and then we can install the required
packages. When we run it, the output should look something like this:
If you are using a different Linux distribution, then you need to vary the package manager
accordingly. For example, on distributions that use the apt package manager such as
Debian or Ubuntu, the equivalent Ansible role would look like the following block of code:
---
- name: Install cloud-init and docker
apt:
name: "{{ item }}"
state: present
loop:
- cloud-init
- docker.io
Note the change in module from yum to apt, and the different package name used for the
Docker container service. Other than that, the playbook is almost identical.
We can improve on this further—this different results in the need to maintain two different
roles for two different operating system bases—but what if we could intelligently combine
them into one? Fortunately, the facts that Ansible gathers when it first runs can be used to
identify the operating system and, as such, run the correct code.
[ 127 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
We will repurpose our earlier example code to combine both of these installations into one
Ansible role:
1. The first part of the code is almost identical to the preceding example, except that
we have now specified the when clause to ensure it is only run on Debian- or
Ubuntu-based Linux distributions:
---
- name: Install cloud-init and docker
apt:
name: "{{ item }}"
state: present
loop:
- cloud-init
- docker.io
when: ansible_distribution == 'Debian' or ansible_distribution ==
'Ubuntu'
2. We then add two further tasks that perform the required steps to install Docker
on CentOS or Red Hat Enterprise Linux:
- name: Install the epel-release package
yum:
name: epel-release
state: present
when: ansible_distribution == 'CentOS' or ansible_distribution ==
'Red Hat enterprise Linux'
- name: Install cloud-init and docker
yum:
name: "{{ item }}"
state: present
loop:
- cloud-init
- docker
when: ansible_distribution == 'CentOS' or ansible_distribution ==
'Red Hat enterprise Linux'
[ 128 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Notice again the when clauses under each task—these specific examples are used
to determine whether the tasks should be run depending on the facts that Ansible
obtained during the initial part of the run. Hence, if we now run this role on an
Ubuntu system, we see the following:
3. As you can see, the first task related to apt was run, but the two following ones
based on yum were skipped because the conditions of the when clause were not
met. Now, if we run it on a CentOS 7 target instead, we see this:
[ 129 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
The inverse is now true: the apt task was skipped, but the two yum related tasks were run.
In this way, it is possible to maintain a single role for installing a common set of package
requirements, even when dealing with several different base operating systems. Combining
when clauses with Ansible facts is a very powerful way to ensure the correct behavior of a
single code base across a variety of systems, and hence if your SOE does extend to both
Debian and Red Hat-based systems, you can still maintain code with ease and simplicity.
Once supplemental packages have been installed, they often must be configured for them
to be useful. In the next section, we will explore the use of Ansible in editing configuration
files.
Editing configuration files
So far, all of the configuration work we have performed has been very black and white—we
are either installing something (be that a file or a package), or we could equally and just as
easily delete it (more on this in the section on cleaning up). However, what if something
more subtle is required? Earlier in this chapter, in the section entitled Transferring files into
the image, we replaced the entire chrony.conf file with our own version. This, however,
might be a bit too much brute force—for example, we might only need to change one line in
a file, and replacing the entire file to change one line is a bit heavy-handed, especially when
you consider that the configuration file might get updated in a future package version.
[ 130 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Let's take another common operating system image configuration requirement: SSH
daemon security. By default, CentOS 7 installations like the one we created earlier allow
remote logins from the root account. This is not desirable for security reasons, so the
question is, how do we update the SSH daemon configuration without having to replace
the entire file? Luckily, Ansible has modules for just such a task.
To perform this task, the lineinfile module will come in handy. Consider the following
role, which we'll call securesshd:
---
- name: Disable root logins over SSH
lineinfile:
dest: /etc/ssh/sshd_config
regexp: "^PermitRootLogin"
line: "PermitRootLogin no"
state: present
Here, we are using the lineinfile module to process the /etc/ssh/sshd_config file.
We are telling it to look for lines beginning with PermitRootLogin (this prevents us from
accidentally editing commented-out lines), and then to replace this line
with PermitRootLogin no.
Let's try that against a CentOS 7 test system:
This works just as desired. Regular expressions require a great deal of care though. For
example, the SSH daemon will process configuration lines that contain whitespace at the
beginning of the line. However, our simple regular expression in the preceding code does
not take account of whitespace, and so could easily miss an otherwise valid SSH
configuration directive. To craft regular expressions that take account of all possible
situations and permutations of a file is an art in itself and so caution is most definitely
advised in their creation and use.
[ 131 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Note that, on a live system, you would also need to restart the SSH service
to make this change effective; however, as this is an image that we will
clean up and then shut down for future deployment, there is no need to
do this here.
A halfway house between uploading an entire file and editing an existing one is the use of
templates. Ansible Jinja2 templating is incredibly powerful and very useful where files
might have to have contents that vary with some variable parameter.
Consider again our chrony configuration example from earlier—here, we transferred a
static file with a hardcoded NTP server address. This is fine if your enterprise relies on a
static NTP server (or a set of them), but some will rely on different NTP servers depending
on where the image is to be deployed.
Let's demonstrate this with a new role called templatentp. For this, we will define a
templates directory in roles/templatentp/templates and place into it a file
called chrony.conf.j2 with the following contents:
pool {{ ntpserver }} iburst maxsources 4
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
Notice that the file is almost identical to the previous example, except that we now have an
Ansible variable name in place of the static hostname on the first line of the file.
Let's create the main.yml file for the role as follows:
---
- name: Deploy chrony configuration template
template:
src: templates/chrony.conf.j2
dest: /etc/chrony.conf
owner: root
group: root
mode: '0644'
backup: yes
[ 132 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Notice how similar it is to the copy example. Our site.yml is also only slightly
different—in it, we will define the variable with the NTP server hostname. There are many
places in Ansible where this variable could be defined, and it is left to the user to figure out
the best place for them to define it:
---
- name: Run example roles
hosts: all
become: yes
vars:
ntpserver: time.example.com
roles:
- templatentp
Finally, we can run the playbook and see the results:
In this way, Ansible provides you with powerful tools to not only copy or download entire
configurations into place, but also to manipulate existing ones to suit your environment.
Let's suppose that our image is now complete. We could take this on faith, but good
practice suggests we should always test the result of any build process, especially an
automated one. Thankfully, Ansible can help us to validate the image we have created
according to our requirements, and we will explore this in the next section.
Validating the image build
As well as installing and configuring your image, you might also wish to verify that certain
components that are critical, and that you assume to be present, are actually present. This is
especially true when you download an image that was created by someone else.
[ 133 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
There are many ways to perform this task in Ansible—let's take a simple example. Suppose
you have an archival script that makes use of the bzip2 compression utility to compress
files. This is just a small tool but if you rely on it for certain purposes, your scripts would
break if it was not present. It is also a pertinent example, as the minimal install of CentOS 7
(as we performed earlier) does not actually include it!
How can Ansible solve this problem? There are two approaches we can take. First of all, we
know from our earlier background work on Ansible that most modules are
idempotent—that is, they are designed to achieve a desired state on the target host and not
repeat actions that have already been performed.
Hence, we could have very easily included a role such as this in our configuration
playbook:
---
- name: Ensure bzip2 is installed
yum:
name: bzip2
state: present
When this role is run and bzip2 is not installed, it will perform the installation and return
the result changed. When it detects that bzip2 is installed, it will return ok and perform no
further actions. However, what if we truly want to check for something rather than just
perform an action, perhaps as a post-build step? Later in this book, we'll look at more
detailed ways of auditing systems, but for now, let's further this example with Ansible.
If you were using shell commands, you would check for the presence of bzip2 in one of
two ways, that is, query the RPM database to see whether the bzip2 package is installed or
check for the presence of /bin/bzip2 on the filesystem.
1. Let's look at the latter example in Ansible. The Ansible stat module can be used
to verify the existence of a file. Consider the following code, which we'll create in
a role called checkbzip2 in the usual manner:
---
- name: Check for the existence of bzip2
stat:
path: /bin/bzip2
register: bzip2result
failed_when: bzip2result.stat.exists == false
- name: Display a message if bzip2 exists
debug:
msg: bzip2 installed.
[ 134 ]
Using Ansible to Build Virtual Machine Templates for Deployment Chapter 5
Here, we are using the stat module to tell us about the /bin/bzip2 file (if it
exists). We register the result of the module run in a variable
called bzip2result, and then we define a custom failure condition on the task
that will cause it to fail (and hence fail the entire the playbook run) if the file does
not exist. Note that when a failure condition is encountered, Ansible halts the
entire playbook run, forcing you to address the issue before continuing.
Obviously, this may or may not be the behavior you desire, but it is easy to vary
the failure condition accordingly.
2. Let's take a look at this in action:
As you can see, the debug statement was never run because of the failure
encountered. Hence, we can be absolutely sure when running this role that our
image is going to have bzip2 installed—if it doesn't, our playbook will fail.
3. Once bzip2 is installed, the run looks quite different: