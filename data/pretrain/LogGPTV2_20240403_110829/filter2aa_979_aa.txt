1 
攻击 JavaWeb 应用 
[JavaWeb 安全系列] 
园长 MM 
[2013-07-04] 
第 2 页 
攻击 JavaWeb 应用[1] -JavaEE 基础 
-园长 MM 
注：本节仅让大家简单的了解 Java 一些相关知识，简要介绍了下 JavaWeb 结构和 servlet 容器以及怎么样去快速找到敏
感信息，后面的章节也是建立在此基础上。本人从未从事过网络安全行业，技术不精文中肯定有很多的错误或者不足之
处，欢迎指正，THX！ 
1、JavaEE 基础 
JSP: 全名为 java server page，其根本是一个简化的 Servlet 设计。 
Servlet：Servlet 是一种服务器端的 Java 应用程序，可以生成动态的 Web 页面。 
JavaEE: JavaEE 是 J2EE 新的名称。改名目的是让大家清楚 J2EE 只是 Java 企业应用。 
什么叫 Jsp 什么叫 Java 我真的非常让大家搞清楚！拜托别一上来就来一句：“前几天
我搞了一个 jsp 的服务器，可难吭了”。请大家分清楚什么是 jsp 什么是 JavaEE! 
Java 平台结构图： 
第 3 页 
可以看到 Java 平台非常的庞大，而开发者的分化为： 
列举这两个图的原因就是让你知道你看到的 JSP 不过是冰山一角，Jsp 技术不过是
Java 初级开发人员必备的技术而已。 
我今天要讲的就是 Java 树的最下面的两层了，也是初级工程师需要掌握的东西。 
第 4 页 
Web 请求与相应简要的流程： 
这是一个典型的就是客户端发送一个 HTTP 请求到服务器端，服务器端接收到请求并
处理、响应的一个过程。 
如果请求的是 JSP，tomcat 会把我们的 JSP 编译成 Servlet 也就是一个普通的 Java 类。 
其实 JSP 是 Servlet 的一种特殊形式，每个 JSP 页面就是一个 Servlet 实例。Servlet 又是一
个普通的 Java 类它编译后就是一个普通的 class 文件。 
这是一个普通的 jsp 脚本页面，因为我只用 JSP 来作为展示层仅仅做了简单的后端数据
的页面展示： 
第 5 页 
上图可以非常清晰的看到通常的 Jsp 在项目中的地位并不如我们大多数人所想的那么
重要，甚至是可有可无！因为我们完全可以用其他的东西来代替 JSP 作为前端展示层。  
我们来看一下这个页面编译成 class 后是什么样子： 
你会发现你根本就看不懂这个 class 文件，因为这是字节码文件我们根本就没法看。通
过我们的 TOMCAT 编译后他编程了一个 Java 类文件保存在 Tomcat 的 work 目录下。 
文 件 目 录 ： C:\apache-tomcat-7.0.34\work\Catalina\localhost\ 你 的 项 目 名
\org\apache\jsp 
我们只要打开 index_jsp.java 或者用 jd-gui（Java 反编译工具）打开就行了： 
第 6 页 
有人说这是 Servlet 吗？当然了。 
继承 HttpJspBase 类，该类其实是个 HttpServlet 的子类(jasper 是 tomcat 的 jsp engine)。 
Jsp 有着比 Servlet 更加优越的展现，很多初学 PHP 的人恐怕很难把视图和逻辑分开吧。比
如之前在写 PHPSQL 注入测试的 DEMO： 
第 7 页 
这代码看起来似乎没有什么大的问题，也能正确的跑起来啊会有什么问题呢？原因很简
单这属于典型的展现和业务逻辑没有分开！这和写得烂的 Servlet 差不多！ 
说了这么多，很多人会觉得 Servlet 很抽象。我们还是连创建一个 Servlet 吧： 
创建成功后会自动的往 web.xml 里面写入： 
第 8 页 
其实就是一个映射的 URL 和一个处理映射的类的路径。而我们自动生成的 Java 类精简后大
致是这个样子： 
请求响应输出内容： 
熟悉 PHP 的大神们这里就不做解释了哦。 
第 9 页 
了解了 Jsp、Servlet 我们再来非常简单的看一下 JavaWeb 应用是怎样跑起来的。 
加载 web.xml 的配置然后从配置里面获取各种信息为 WEB 应用启动准备。 
科普：C:\apache-tomcat-7.0.34\webapps\下默认是部署的 Web 项目。webapps 下
的文件夹就是你的项目名了，而项目下的 WebRoot 一般就是网站的根目录了，WebRoot
下的文件夹 WEB-INF 默认是不让 Web 访问的。 
2、如何找到数据源 
大家可能都非常关心数据库连接一般都配置在什么地方呢？ 
答 案 普 遍 是 ： C:\apache-tomcat-7.0.34\webapps\wordpress\WEB-INF 下 的
***.xml 
大多数的 Spring 框架都是配置在 applicationContext 里面的： 
第 10 页 
如果用到 Hibernate 框架那么：WebRoot\WEB-INF\hibernate.cfg.xml 
还有一种变态+SB 的配置方式就是直接卸载源代码里面:  
Tomcat 的数据源（其他的服务器大同小异）： 
目录：C:\apache-tomcat-7.0.34\conf\context.xml 
第 11 页 
Resin 数据源： 
路径：D:\install\Dev\resin-pro-4.0.28\conf\resin.conf 
第 12 页 
其他的配置方式诸如读取如 JEECMS 读取的就是.properties 配置文件，这种方式非常的常
见： 
一般情况下 Java 的数据库配置都在 WEBROOT 下的 WEB-INF 目录下的多数情况在
**.xml、**.properties、**.conf 
初级就弄个最简单的给大家讲下咯。 
第 13 页 
3、Tomcat 基础 
没错，这就是 TOM 猫。楼主跟这只猫打交道已经有好几年了，在 Java 应用当中 TOMCAT
运用的非常的广泛。TOM 猫是一个 Web 应用服务器，也是 Servlet 容器。 
Apache+Tomcat 做负载均衡： 
如何快速的找到 tomcat 的安装路径(以下是解答法克论坛基友的提问): 
1、不管是谁都应该明白的是不管 apache 还是 tomcat 安装的路径都是随意的，所以找不到
路径也是非常正常的。 
2、在你的/etc/httpd/conf/httpd.conf 里面会有一个 LoadModule jk_module 配置用于集成
tomcat 然后找到 JkWorkersFile 也就是 tomcat 的配置，找到.properties 的路径。httpd 里面
也有可能会配置路径如果没有找到那就去 apache2\conf\extra\httpd-vhosts 看下有没有配
置域名绑定。 
3、在第二步的时候找到了 properties 配置文件并读取，找到 workers.tomcat_home 也就是
tomcat 的配置路径了。 
4、得到 tomcat 的路径你还没有成功，域名的具体配置是在 conf 下的 server.xml。 
5、读取 server.xml 不出意外你就可以找到网站的目录了。 
6、如果第五步没有找到那么去 webapps 目录下 ROOT 瞧瞧默认不配置的话网站是部署在
ROOT 下的。 
7、这一点是附加的科普知识爱听则听：数据库如果启用的 tomcat 有可能会采用 tomcat 的
数据源配置未见为 conf 下的 context.xml、server.xml。如果网站有域名绑定那么你可以试
下 ping 域名然后带上端口访问。有可能会出现 tomcat 的登录界面。tomcat 默认是没有配
第 14 页 
置用户登录的，所以当 tomcat-users.xml 下没有相关的用户配置就别在这里浪费时间了。 
8、如果配置未找到那么到网站目录下的 WEB-INF 目录和其下的 classes 目录下找下对应的
properties、xml（一般都是 properties）。 
9、如果你够蛋疼可以读取 WEB.XML 下的 classess 内的源码。 
10、祝你好运。 
4、Resin apache 
APACHE RESIN 做负载均衡，Resin 用来做 JAVAWEB 的支持，APACHE 用于处理
静态和 PHP 请求，RESIN 的速度飞快，RESIN 和 apache 的配合应该是比较完美的吧。 
域名解析： 
apache 的 httpd.conf: 
需要修改：Include conf/extra/httpd-vhosts.conf（一定要把前面的#除掉，否则配置不起作
用） 
普通的域名绑定： 
直接添加到 httpd.conf 
    ServerAdmin PI:EMAIL 
    DocumentRoot E:/XXXX/XXX 
    ServerName beijingcanyinwang.com 
    ErrorLog E:/XXXX/XXX/bssn-error_log 
    CustomLog E:/XXXX/XXX/bssn_log common 
二级域名绑定，需要修改： 
E:\install\apache2\conf\extra\httpd-vhosts.conf 
如： 
     DocumentRoot E:/XXXXXXX/XXX 
     ServerName bbs.beijingcanyinwang.com 
     DirectoryIndex index.html index.php index.htm 
第 15 页 
Resin 的 
请求处理： 
SetHandler caucho-request 
第 16 页 
SetHandler caucho-request 
SetHandler caucho-request 
SetHandler caucho-request 
SetHandler caucho-request 
SetHandler caucho-request 
APACHE 添加对 Resin 的支持： 
LoadModule caucho_module "E:/install/resin-pro-3.1.12/win32/apache-2.2/mod_caucho.
dll" 
然后在末尾加上： 
  ResinConfigServer localhost 6800 
第 17 页 
  CauchoStatus yes 
只有就能让 apache 找到 resin 了。 
PHP 支持问题： 
resin 默认是支持 PHP 的测试 4.0.29 的时候就算你把 PHP 解析的 servlet 配置删了一样解析
PHP，无奈换成了 resin 3.1 在注释掉 PHP 的 servlet 配置就无压力了。 
整合成功后： 
第 18 页 
攻击 JavaWeb 应用[2] - CS 交互安全 
-园长 MM 
注: 
本节意在让大家了解客户端和服务器端的一个交互的过程,我个人不喜欢 xss,对 xss 知之甚少所以只能简要的讲解
下。这一节主要包含 HttpServletRequest、HttpServletResponse、session、cookie、HttpOnly 和 xss,文章是年前几天写
的本应该是有续集的但年后就没什么时间去接着续写了。由于工作并非安全行业，所以写的并不算专业希望大家能够理
解。后面的章节可能会有 Java 里的 SQL 注入、Servlet 容器相关、Java 的框架问题、eclipse 代码审计等。 
1、Request & Response(请求与响应) 
请求和响应在 Web 开发当中没有语言之分不管是 ASP、PHP、ASPX 还是 JAVAEE 也好，
Web 服务的核心应该是一样的。在我看来 Web 开发最为核心也是最为基础的东西就是
Request 和 Response！我们的 Web 应用最终都是面向用户的，而请求和响应完成了客户
端和服务器端的交互。服务器的工作主要是围绕着客户端的请求与响应的。 
如下图我们通过 Tamper data 拦截请求后可以从请求头中清晰的看到发出请求的客户
端请求的地址为：localhost。浏览器为 FireFox，操作系统为 Win7 等信息，这些是客户端的
请求行为，也就是 Request。 
当客户端发送一个 Http 请求到达服务器端之后，服务器端会接受到客户端提交的请求
信息(HttpServletRequest)，然后进行处理并返回处理结果(HttpServletResopnse)。 
下图演示了服务器接收到客户端发送的请求头里面包含的信息： 
第 19 页 
页面输出的内容为： 
host=localhost 
user-agent=Mozilla/5.0 (Windows NT 6.1; rv:18.0) Gecko/20100101 Firefox/18.0 
accept=text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 
accept-language=zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3 
accept-encoding=gzip, deflate 
connection=keep-alive 
请求头信息伪造 XSS 
关于伪造问题我是这样理解的:发送 Http 请求是客户端的主动行为，服务器端通过
ServerSocket 监听并按照 Http 协议去解析客户端的请求行为。所以请求头当中的信息可能
并不一定遵循标准 Http 协议。 
用FireFox 的Tamper Data和Moify Headers（FireFox 扩展中心搜Headers 和Tamper Data
第 20 页 
都能找到） 插件修改下就实现了，请先安装 FireFox 和 Tamper Data： 
点击 Start Tamper 然后请求 Web 页面，会发现请求已经被 Tamper Data 拦截下来了。
选择 Tamper： 
第 21 页 
修改请求头信息： 
Servlet Request 接受到的请求： 