# Cobalt Strike User Manual

## Table of Contents
1. Welcome to Cobalt Strike
   1.1 What is Cobalt Strike?
   1.2 Installation and Updates
      - System Requirements
      - Run the ‘update’ program
   1.3 The Team Server
   1.4 Cobalt Strike Client
   1.5 Distributed and Team Operations
   1.6 Scripting Cobalt Strike
2. User Interface
   2.1 Overview
   2.2 Toolbar
   2.3 Session and Target Visualizations
      - Targets Table
      - Sessions Table
      - Pivot Graph
   2.4 Tabs
   2.5 Consoles
   2.6 Tables
3. Data Management
   3.1 Overview
   3.2 Targets
   3.3 Services
   3.4 Credentials
   3.5 Maintenance
4. Listener and Infrastructure Management
   4.1 Overview
   4.2 Listener Management
   4.3 Cobalt Strike’s Beacon Payload
   4.4 Payload Staging
   4.5 HTTP Beacon and HTTPS Beacon
      - Manual HTTP Proxy Configuration
      - Redirectors
   4.6 DNS Beacon
      - Data Channels
      - Listener Setup
   4.7 SMB Beacon
      - Linking and Unlinking
   4.8 TCP Beacon
      - Connecting and Unlinking
   4.9 External C2
   4.10 Foreign Listeners
   4.11 Infrastructure Consolidation
   4.12 Payload Security Features
5. Getting a Foothold
   5.1 Client-side System Profiler
   5.2 Cobalt Strike Web Services
   5.3 User-driven Attack Packages
      - HTML Application
      - MS Office Macro
      - Payload Generator
      - Windows Executable
      - Windows Executable (S)
   5.4 Hosting Files
   5.5 User-driven Web Drive-by Attacks
      - Java Signed Applet Attack
      - Java Smart Applet Attack
      - Scripted Web Delivery (S)
   5.6 Client-side Exploits
   5.7 Clone a Site
   5.8 Spear Phishing
      - Targets
      - Templates
      - Sending Messages
6. Payload Artifacts and Anti-virus Evasion
   6.1 Philosophy
   6.2 The Artifact Kit
      - The Theory of the Artifact Kit
      - Where Artifact Kit Fails
      - How to use the Artifact Kit
   6.3 The Veil Evasion Framework
   6.4 Java Applet Attacks
   6.5 The Resource Kit
7. Post-Exploitation
   7.1 The Beacon Console
   7.2 The Beacon Menu
   7.3 Asynchronous and Interactive Operations
   7.4 Running Commands
   7.5 Session Passing
   7.6 Alternate Parent Processes
   7.7 Spoof Process Arguments
   7.8 Blocking DLLs in Child Processes
   7.9 Upload and Download Files
   7.10 File Browser
   7.11 File System Commands
   7.12 The Windows Registry
   7.13 Keystrokes and Screenshots
   7.14 Post-Exploitation Jobs
   7.15 The Process Browser
   7.16 Desktop Control
   7.17 Privilege Escalation
      - Elevate with an Exploit
      - Elevate with Known Credentials
      - Get SYSTEM
      - UAC Bypass
      - Privileges
   7.18 Mimikatz
   7.19 Credential and Hash Harvesting
   7.20 Port Scanning
   7.21 Network and Host Enumeration
   7.22 Trust Relationships
      - Kerberos Tickets
   7.23 Lateral Movement
   7.24 Lateral Movement GUI
8. Browser Pivoting
   8.1 Overview
   8.2 Setup
   8.3 Use
   8.4 How it Works
9. Pivoting
   9.1 What is Pivoting
   9.2 SOCKS Proxy
      - Proxychains
      - Metasploit
   9.3 Reverse Port Forward
   9.4 Pivot Listeners
   9.5 Covert VPN
10. SSH Sessions
   10.1 The SSH Client
   10.2 Running Commands
   10.3 Upload and Download Files
   10.4 Peer-to-peer C2
   10.5 SOCKS Pivoting and Reverse Port Forwards
11. Malleable Command and Control
   11.1 Overview
   11.2 Checking for Errors
   11.3 Profile Language
      - Data Transform Language
      - Strings
      - Headers and Parameters
      - Options
   11.4 HTTP Staging
   11.5 A Beacon HTTP Transaction Walk-through
   11.6 HTTP Server Configuration
   11.7 Self-signed SSL Certificates with SSL Beacon
   11.8 Valid SSL Certificates with SSL Beacon
   11.9 Profile Variants
   11.10 Code Signing Certificate
   11.11 Which is more dangerous, Malleable C2 or a swimming pool?
12. Malleable PE, Process Injection, and Post-Exploitation
   12.1 Overview
   12.2 PE and Memory Indicators
      - Cloning PE Headers
      - In-memory Evasion and Obfuscation
   12.3 Process Injection
   12.4 Post-Exploitation Jobs
13. Reporting and Logging
   13.1 Logging
   13.2 Reports
      - Activity Report
      - Hosts Report
      - Indicators of Compromise
      - Sessions Report
      - Social Engineering
      - Tactics, Techniques, and Procedures
   13.3 Custom Logo in Reports
   13.4 Custom Reports
Appendix A. Keyboard Shortcuts

---

## 1. Welcome to Cobalt Strike

### 1.1 What is Cobalt Strike?

Cobalt Strike is a comprehensive platform designed for adversary simulations and red team operations. It enables users to execute targeted attacks and emulate the post-exploitation actions of advanced threat actors. This section provides an overview of the attack process supported by Cobalt Strike's feature set, while the rest of the manual delves into these features in detail.

#### The Offense Problem Set

A well-planned targeted attack begins with reconnaissance. Cobalt Strike’s system profiler is a web application that maps your target’s client-side attack surface. Insights from this reconnaissance help you understand which attack vectors are most likely to succeed on your target.

**Weaponization** involves pairing a post-exploitation payload with a document or exploit that will execute it on the target. Cobalt Strike offers various options to turn common documents into weaponized artifacts and export its post-exploitation payload, Beacon, in multiple formats.

**Delivery** can be achieved using Cobalt Strike’s spear phishing tool, which repurposes saved emails into convincing phishes. 

**Control** of the target network is facilitated by Cobalt Strike’s Beacon. This payload uses an asynchronous “low and slow” communication pattern, similar to advanced threat malware. Beacon can communicate over DNS, HTTP, or HTTPS, and it can navigate through common proxy configurations and call home to multiple hosts to resist blocking.

**Evasion** is crucial throughout the attack. Cobalt Strike’s Malleable Command and Control (C2) language allows you to reprogram Beacon to mimic known malware or blend in with existing traffic, making it harder for defenders to detect and block the payload.

**Pivoting** into the compromised network, discovering hosts, and moving laterally is made easier with Beacon’s automation and peer-to-peer communication over named pipes and TCP sockets. Cobalt Strike is optimized to capture trust relationships and enable lateral movement using captured credentials, password hashes, access tokens, and Kerberos tickets.

**Demonstration of Business Risk** can be achieved using Cobalt Strike’s user-exploitation tools. These tools make it easy to deploy keystroke loggers and screenshot capture tools on compromised systems. Browser pivoting, a unique Cobalt Strike technique, allows you to gain access to websites that your compromised target is logged onto with Internet Explorer, bypassing two-factor authentication.

**Reporting** features in Cobalt Strike help reconstruct the engagement for your client. You can provide network administrators with an activity timeline to find attack indicators in their sensors. Cobalt Strike generates high-quality reports that can be presented as standalone products or used as appendices to your written narrative.

### 1.2 Installation and Updates

Strategic Cyber LLC distributes Cobalt Strike packages as native archives for Windows, Linux, and macOS. To install Cobalt Strike, simply extract the archive onto your operating system.

#### System Requirements

Cobalt Strike requires Oracle Java 1.8, Oracle Java 11, or OpenJDK 11. If you have an anti-virus product on your system, ensure it is disabled before installing Cobalt Strike.

#### Run the ‘update’ Program

The Cobalt Strike distribution package includes the launcher(s) for your system, supporting files, and the updater program. It does not contain the Cobalt Strike program itself. You must run the update program to download the Cobalt Strike product.

Make sure to update both your team server and client software with your license key. Cobalt Strike is generally licensed on a per-user basis, and the team server does not require a separate license.

### 1.3 The Team Server

Cobalt Strike is divided into a client and a server component. The server, known as the team server, controls the Beacon payload and hosts Cobalt Strike’s social engineering features. It also stores data collected by Cobalt Strike and manages logging.

The Cobalt Strike team server must run on a supported Linux system. To start a team server, use the `teamserver` script included with the Cobalt Strike Linux package.

The team server has two mandatory parameters:
1. The externally reachable IP address of the team server.
2. The password your team members will use to connect the Cobalt Strike client to the team server.

There are two optional parameters:
1. A Malleable C2 Profile (discussed in Chapters 11 and 12).
2. A kill date in YYYY-MM-DD format, which embeds a kill date into each Beacon stage generated by the team server.

When the team server starts, it publishes the SHA256 hash of the team server’s SSL certificate. Distribute this hash to your team members. When they connect, their Cobalt Strike client will ask if they recognize this hash before authenticating to the team server, providing protection against man-in-the-middle attacks.

### 1.4 Cobalt Strike Client

The Cobalt Strike client connects to the team server. To start the client, use the launcher included with your platform’s package.

When the Cobalt Strike client starts, you will see a connect dialog. Specify your team server’s address in the Host field. The default port for the team server is 50050. The User field is your nickname on the team server, and the Password field is the shared password for the team server.

If this is your first connection to the team server, Cobalt Strike will ask if you recognize the SHA256 hash of the team server. If you do, press OK, and the Cobalt Strike client will connect to the server. Cobalt Strike will remember this hash for future connections. You can manage these hashes through Cobalt Strike -> Preferences -> Fingerprints.

### 1.5 Distributed and Team Operations

Cobalt Strike can coordinate a distributed red team effort. Stage Cobalt Strike on one or more remote hosts, start your team servers, and have your team connect.

Once connected to a team server, your team can:
- Use the same sessions
- Share hosts, captured data, and downloaded files
- Communicate through a shared event log

The Cobalt Strike client can connect to multiple team servers. Go to Cobalt Strike -> New Connection to initiate a new connection. When connected to multiple servers, a switchbar will appear at the bottom of your Cobalt Strike window, allowing you to switch between active server instances. Each server has its own button, which you can rename to reflect the role of the server during your engagement. This button name will also identify the server in the Cobalt Strike Activity Report.

When connected to multiple servers, Cobalt Strike aggregates listeners from all the servers, enabling you to send a phishing email from one server that references a malicious website hosted on another server. At the end of your engagement, Cobalt Strike’s reporting feature will query all the servers you’re connected to and merge the data to tell a cohesive story.

### 1.6 Scripting Cobalt Strike

Cobalt Strike is scriptable through its Aggressor Script language, the successor to Armitage’s Cortana scripting language. Note that the two languages are not compatible.

---

This revised version aims to provide a clearer, more professional, and structured introduction to Cobalt Strike. The text is now more coherent and easier to follow, with improved formatting and organization.