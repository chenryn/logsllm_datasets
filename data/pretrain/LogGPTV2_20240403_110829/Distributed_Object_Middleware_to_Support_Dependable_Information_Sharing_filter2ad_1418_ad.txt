wait for completion. coordCallback is also used by the
coordinator to communicate protocol progress information
to the application.
The B2BCoordinatorLocal
interface is independent
of both the communication mode and the coordination
protocols executed between coordinators through their
B2BCoordinatorRemote interface.
Implementations of
these interfaces are part of the B2BCoordinator package
provided by the middleware.
We now describe two simple applications that are each
illustrative of a wider class of problem and demonstrate the
adaptability of the middleware to application requirements.
Tic-Tac-Toe is a two-party game in which the players take
turns to modify its shared state according to well-deﬁned,
symmetrically applied rules. Turn-taking access to shared
state is characteristic of other applications such as shared
white boards. The order processing example demonstrates
sharing between two parties according to asymmetric rules.
As described in Section 5.2, it is relatively straightforward
to extend this to involve multiple parties.
5.1. Tic-Tac-Toe application
The aim of a game of Tic-Tac-Toe is to claim a hori-
zontal, vertical or diagonal line of squares before your op-
ponent. Players take turns to play. The rules of the game
are symmetric. For Nought, a vacant square is claimed by
marking it with a zero; Nought cannot mark any square with
a cross; and Nought cannot overwrite an already claimed
square.
Figure 5. Tic-Tac-Toe game
An object that implements the B2BObject interface rep-
resents the state of the game and encapsulates the rules.
Servers representing each player share the object and co-
ordinate the object state. A player communicates a move
to their server using their local application client’s “Save”
operation. The servers validate each proposed move (state
change) via the validateState upcall. A validated
move is retrieved by the application client using its “Load”
operation. Apart from encoding the rules of the game, the
application programmer’s task mainly concerns the instanti-
ation of the B2BObjects infrastructure and provision of the
user interface (the “Load” and “Save” operations are part of
this interface and are not mandated by B2BObjects).
Figure 5 shows an example of the Tic-Tac-Toe game
in progress after the following sequence of moves: Cross
claims middle row, centre square; Nought claims top row,
left square; Cross claims middle row, right square; then
Cross attempts to mark bottom row, centre square with a
zero. The ﬁnal move is an attempt by Cross to gain ad-
vantage by pre-empting Nought’s next move. The state
change is invalid and, as can be seen, is not reﬂected at
Nought’s server. The agreed state of the game has not been
updated and Nought will have evidence of the attempt to
cheat. Cross forfeits the game.
As an alternative to playing the game directly between
two players, it may be desirable to validate moves at a TTP
in order to guarantee that they are encoded and observed
correctly. Figure 6 represents an instance of the game be-
TTP
n
c
n
Nought
c
Cross
Player
x
B2BObject
Invocation
Trusted third party
Application client
Object coordination
Figure 6. Tic-Tac-Toe through a TTP
ing played through a TTP that validates each player’s move
before it is disclosed to their opponent.
5.2. Order processing application
In this application a customer and supplier share the state
of an order. Asymmetric validation rules apply to state
changes. The customer is allowed to add items and the
quantity required to an order but is not allowed to price the
items. The supplier can price items but cannot amend the or-
der in any other way. The customer and supplier each have
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:46 UTC from IEEE Xplore.  Restrictions apply. 
a replica of an order object that implements the B2BObject
interface and the state of each replica is coordinated with
that of its peer. Any attempt by the supplier to both price
an item (a valid action) and to change the quantity required
(an invalid action) will be rejected. Similarly an attempt by
the customer to both add items to an order and to price them
will be rejected.
An alternative instantiation of order processing could in-
volve an approver to sanction the items ordered by the cus-
tomer and a dispatcher to commit to delivery terms. The
order object would then be shared between four parties and
the validation rules modiﬁed to reﬂect their roles.
6. Related work
The problem of fair exchange of information, or items,
of value has received considerable attention recently. A sys-
tem is considered fair if it does not discriminate against a
correctly behaving party. Fair exchange protocols [1, 8, 14]
aim to guarantee fairness during a protocol run or, in the
case of optimistic fair exchange, through an exchange pro-
tocol and associated resolve and abort sub-protocols. All
known fair exchange protocols require either that a TTP is
actively involved or is used to guarantee termination. Pag-
nia et al [11] provide a formal proof of the impossibility
of (strong) fair exchange without a TTP. A distinction can
be made between one-off exchange and information sharing
that is ongoing. It has been shown that relationships that
are characterised by an indeﬁnite series of interactions have
quantiﬁable, and often strong, incentives to co-operative be-
haviour [2]. These incentives even hold between antago-
nists. This insight is relevant to the conﬁguration of mid-
dleware support for evolving interaction styles (hinted at in
Section 2 with respect to Figure 1).
The work of Wichert et al [15] is close to our ap-
proach to systematic generation of non-repudiation evi-
dence. They propose the generation of evidence at invo-
cation of “tagged” methods. They provide non-repudiable
RPC but do not address validation of state changes for in-
formation sharing.
Work in the MAFTIA project on distributed trusted com-
puting services [13] is relevant to our plans to investigate the
deployment of the functions and services provided by the
B2BCoordinator package (see Section 5) at a trusted com-
puting base. MAFTIA’s work on tolerating the corruption
of a proportion of participants in agreement protocols [3] is
relevant to protocol termination through majority voting.
In the area of policy-controlled interaction, Ponder [5] is
of interest because of its uniﬁed approach to the speciﬁca-
tion of both security and management policy for distributed
object systems. It also allows the import of policy across
administrative domains. The work of Minsky et al on Law
Governed Interaction (LGI) [9] provides an infrastructure
for interaction between parties governed by global policy.
Communication between parties is mediated by agents. An
agent enforces agreed policy as it relates to the party on
whose behalf the agent acts. (The agent role is similar, in ef-
fect, to that of trusted agents in the indirect interaction style
of Figure 1b.) Another approach to the automated control
of interactions through agreements between organisations is
IBM’s tpaML language for business-to-business integration
[6]. Their model of long-running conversations, the state of
which is maintained at each party, is similar to the notion
of shared interaction state. Policy-based approaches can be
seen as complementary to B2BObjects. For example, policy
controlling an interaction could be expressed using Ponder,
LGI or tpaML constructs, and the underlying infrastructure
for regulated information sharing could be instantiated us-
ing B2BObjects.
7. Conclusions and future work
We have presented middleware that addresses the re-
quirement for dependable information sharing between or-
ganisations. The middleware presents the abstraction of
shared state and regulates updates to that state. Safety is
guaranteed even in the presence of misbehaving parties. If
all parties behave correctly, liveness is guaranteed despite
a bounded number of temporary failures. The middleware
presents a familiar programming abstraction to the applica-
tion programmer and frees them to concentrate on the busi-
ness logic of applications.
Our state coordination protocol provides strong guaran-
tees with respect to the validity of decisions reached. It is
also efﬁcient in terms of the number of messages required
(  for  parties) and is straightforward to implement.
These characteristics are achieved in the context of stated
assumptions with respect to failures and, in particular, by
not guaranteeing protocol termination when parties misbe-
have. However, the middleware provides persistence both
of valid state and of protocol messages and, therefore, re-
covery is possible in many circumstances. The inability to
terminate is detectable and may be resolved outside of a
protocol run. This extra-protocol resolution will necessar-
ily involve appeal to a third party or parties (as is the case
for all known fair exchange protocols).
If validation de-
pends on the semantics of a state change as interpreted by
any individual party, then it can be argued that no protocol
can guarantee termination (since a decision cannot be made
on the party’s behalf). In which case, a state change can-
not be validated without the participation of all concerned
and ultimately application-level resolution will be required
to compensate for a failure to participate. Thus our proto-
col simply results in earlier invocation of dispute resolution.
Nevertheless, we intend to investigate the impact of relax-
ing failure assumptions (for example: a crashed node not
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:46 UTC from IEEE Xplore.  Restrictions apply. 
recovering) and of providing stronger termination guaran-
tees.
Approaches to guaranteeing termination include: auto-
matic resolution or abort by resorting to majority decision
on state changes; the imposition of deadlines on decision-
making; and the removal of any advantage to the proposer
at the commit stage of a protocol. This last case illus-
trates many of the issues to investigate. At present the pro-
poser acquires an authenticated decision on a proposed state
change before the other members of  e. As noted in
Section 6, there still may be strong incentives for the pro-
poser to conclude the protocol and, in any case, the pro-
poser must produce evidence of the decision to make any
claim for its validity. However, it is not difﬁcult to envis-
age a change to the protocol to overcome the advantage to
the proposer. Following the commit message from k, each
member of Rek would broadcast an authenticator of the
decision to the other members of  e. (Authentication by
a majority of Rek could even be allowed without breaking
the unanimity of the decision sent in the commit message.)
A problem is that this apparently simple change requires
   12 messages in the ﬁnal step (increasing complex-
ity to  2). It is possible to envisage other changes to
the protocol to permit resolution or abort at various stages
and thereby guarantee termination. In all cases, application-
speciﬁc semantics will determine whether a given approach
is appropriate. The ﬂexibility inherent in the B2BObjects
API allows us to experiment with different instantiations of
the middleware that use different coordination protocols and
to investigate conﬁguration of coordination protocols to suit
application requirements. A merit of the current protocol is
that it is an easily understood base for such investigation.
Future work will also include investigation of sup-
port for concurrency control and transactional access to
B2BObjects; and the use of a wider range of communica-
tions mechanisms. For example, to support loosely-coupled
inter-organisational interaction, we intend to provide im-
plementations of the middleware that are based on Mes-
sage Oriented Middleware and on the use of SMTP and
HTTP/SOAP for message delivery.
8. Acknowledgements
This work is part-funded by the UK EPSRC under grant
GR/N35953/01: “Information Co-ordination and Sharing
in Virtual Environments”; by the European Union un-
der Project IST-2001-34069: “TAPAS (Trusted and QoS-
Aware Provision of Application Services)”; and by Hewlett-
Packard. We thank our colleague Paul Ezhilchelvan for use-
ful discussion of this work.
References
[1] N. Asokan. Fairness in Electronic Commerce. Research
Report RZ3027, IBM Zurich Research Lab, 1998.
[2] R. Axelrod. The Evolution of Co-operation. Penguin Books,
1990.
[3] C. Cachin. Distributing Trust on the Internet. In Proc. IEEE
Int. Conf. on Dependable Syst. and Networks (DSN), June
2001.
[4] N. Cook, S. Shrivastava, and S. Wheater. Distributed Ob-
ject Middleware to Support Dependable Information Shar-
ing between Organisations. Technical Report 753, Dept. of
Computing Science, Univ. Newcastle, Apr. 2002.
[5] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The Pon-
der Policy Speciﬁcation Language. In Proc. Int. Workshop
on Policies for Distributed Syst. and Networks (POLICY),
Springer-Verlag LNCS 1995, Bristol, UK, Jan. 2001.
[6] A. Dan, D. Dias, R. Kearney, T. Lau, T. Nguyen, M. Sachs,
and H. Shaikh. Business-to-business integration with tpaML
and a business-to-business protocol framework. IBM Syst. J.,
30(1):68–90, 2001.
[7] D. Dolev and A. Yao. On the Security of Public Key Proto-
cols. IEEE Trans. Inf. Theory, 29(2):198–208, 1983.
[8] S. Ketchpel and H. Garcia-Molina. A sound and complete
J. Dis-
algorithm for distributed commerce transactions.
tributed Computing, 12:13–29, Jan. 1999.
[9] N. Minsky and V. Ungureanu. Law-Governed Interaction:
A Coordination and Control Mechanism for Heterogeneous
Distributed Systems. ACM Trans. Softw. Eng. and Method-
ology, 9(3):273–305, July 2000.
[10] J. Mitchener, A. Pengelly, D. Freestone, and A. Childer-
house. Distributing operational support to transform busi-
ness operations. BT Technology J., 17(2):74–81, Apr. 1999.
[11] H. Pagnia and F. Gärtner. On the impossibility of fair ex-
change without a trusted third party. Technical Report TUD-
BS-1999-02, TU Darmstadt, 1999.
[12] B. Schneier. Applied Cryptography. John Wiley and Sons,
2nd edition, 1996.
[13] P. Veríssimo, N. Neves, C. Cachin, M. Correia, T. Mc-
Cutcheon, B. Pﬁtzmann, B. Randell, M. Schunter, W. Sim-
monds, R. Stroud, M. Waidner, and I. Welch. Service and
Protocol Architecture for the MAFTIA Middleware. De-
liverable D23, EU MAFTIA Project IST-1999-11583, Jan.
2001.
[14] H. Vogt, H. Pagnia, and F. Gärtner. Modular Fair Exchange
Protocols for Electronic Commerce.
In Proc. IEEE An-
nual Comput. Security Applications Conf., Phoenix, Ari-
zona, Dec. 1999.
[15] M. Wichert, D. Ingham, and S. Caughey. Non-repudiation
Evidence Generation for CORBA using XML.
In Proc.
IEEE Annual Comput. Security Applications Conf., Phoenix,
Arizona, Dec. 1999.
[16] J. Zhou and D. Gollmann. Evidence and non-repudiation.
J. Network and Comput. Applications, 20(3):267–281, July
1997.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:46 UTC from IEEE Xplore.  Restrictions apply.