# 二、Docker CLI 和 Dockerfile
在最后一章中，我们在开发设置中设置了 Docker，并运行了第一个容器。在本章中，我们将探索 Docker 命令行界面。在本章的后面，我们将看到如何使用 Dockerfiles 创建我们自己的 Docker 映像，以及如何自动化这个过程。
在本章中，我们将涵盖以下主题:
*   Docker 术语
*   Docker 命令
*   Docker 文件
*   Docker 工作流—拉-用-修改-提交-推工作流
*   自动化构建
# Docker 术语
在我们开始进入 Docker 领域的激动人心的旅程之前，让我们更好地理解将在本书中使用的 Docker 术语。在概念上与虚拟机映像非常相似，Docker 映像是系统的快照。虚拟机映像和 Docker 映像之间的区别在于，虚拟机映像可以有正在运行的服务，而 Docker 映像只是一个文件系统快照，这意味着虽然您可以将映像配置为包含您喜欢的包，但您只能在容器中运行一个命令。不过，不要担心，因为限制是一个命令，而不是一个进程，所以有办法让 Docker 容器做几乎任何虚拟机实例可以做的事情。
Docker 还为 Docker 映像实现了一个类似 Git 的分布式版本管理系统。映像可以存储在本地和远程的存储库中(称为注册表)。功能和术语大量借用了 Git——快照被称为提交，你拉一个映像存储库，你把你的本地映像推到一个存储库，等等。
## Docker 容器
Docker 容器可以与虚拟机的实例相关联。它运行沙盒进程，这些进程与主机共享同一个内核。术语**容器**来源于海运容器的概念。这个想法是，您可以将容器从您的开发环境运送到部署环境，并且无论您在哪里运行它们，在容器中运行的应用都将以相同的方式运行。
下图显示了 AUFS 的图层:
![Docker container](img/4787OS_02_01.jpg)
这在上下文中类似于容器，容器在交付前保持密封，但可以在其间装载、卸载、堆叠和运输。
容器中进程的可见文件系统基于 AUFS(尽管您也可以将容器配置为使用不同的文件系统运行)。AUFS 是一个分层的文件系统。这些层都是只读的，这些层的合并对流程是可见的。但是，如果一个进程对文件系统进行了更改，则会创建一个新的层，表示原始状态和新状态之间的差异。当您使用此容器创建映像时，图层将被保留。因此，可以从现有映像构建新映像，从而创建非常方便的映像分层模型。
## 对接守护程式
`docker`守护进程是管理容器的进程。这很容易与 Docker 客户端混淆，因为相同的二进制文件用于运行两个进程。但是`docker`守护进程需要`root`权限，而客户端不需要。
不幸的是，由于`docker`守护进程以 root 权限运行，它还引入了攻击向量。阅读[https://docs.Docker.com/articles/security/](https://docs.Docker.com/articles/security/)了解更多详情。
## Docker 客户端
Docker 客户端是，它与`docker`守护进程交互来启动或管理容器。Docker 使用 RESTful API 在客户端和守护进程之间进行通信。
### 注
REST 是一种架构风格，由应用于分布式超媒体系统中的组件、连接器和数据元素的一组协调的架构约束组成。简单地说，RESTful 服务通过标准的 HTTP 方法工作，例如`GET`、`POST`、`PUT`和`DELETE`方法。
## Docker 型式
一个 Docker 文件是一个写在**域** **特定** **语言** ( **DSL** )中的文件，其中包含设置 Docker 映像的说明。把它想象成 Docker 的 Makefile 等价物。
## Docker 登记处
这是 Docker 社区发布的所有 Docker 映像的公共存储库。您可以从该注册表中自由拉取图片，但是要推送图片，您需要在[http://hub.docker.com](http://hub.docker.com)注册。Docker 注册中心和 Docker hub 是由 Docker Inc .运营和维护的服务，它们提供无限的免费存储库。您也可以付费购买私有存储库。
# Docker 命令
现在让我们在 Docker 命令行界面上动手吧。我们将看看最常见的命令及其用例。Docker 命令是以 Linux 和 Git 为模型的，所以如果你使用过这两个命令中的任何一个，你会发现自己就像在家里一样使用 Docker。
这里只提到最常用的选项。有关完整的参考，您可以在[https://docs.docker.com/reference/commandline/cli/](https://docs.docker.com/reference/commandline/cli/)查阅官方文件。
## 守护程序命令
如果您通过标准存储库安装了`docker`守护程序，启动`docker`守护程序的命令将被添加到`init`脚本中，以便在启动时作为服务自动启动。否则，您必须首先自己运行`docker`守护程序，客户端命令才能工作。
现在，当启动守护程序时，您可以使用控制**域** **名称** **系统** ( **DNS** )配置、存储驱动程序和容器的执行驱动程序的参数来运行它:
```
$ export DOCKER_HOST="tcp://0.0.0.0:2375"
$ Docker -d -D -e lxc -s btrfs –-dns 8.8.8.8 –-dns-search example.com
```
### 注
只有当您想自己启动守护进程时，您才需要这些。否则，可以用`$ sudo service Docker start`启动`docker`守护进程。对于 OSX 和 Windows，您需要运行[第 1 章](1.html "Chapter 1. Unboxing Docker")、*安装 Docker* 中提到的命令。
下表描述了各种标志:
| 
旗
 | 
说明
 |
| --- | --- |
| 
```
-d
```
 | 这将使 Docker 作为守护程序运行。 |
| 
```
-D
```
 | 这将在调试模式下运行 Docker。 |
| 
```
-e [option]
```
 | 这个是要使用的执行驱动。默认执行驱动是原生的，使用`libcontainer`。 |
| 
```
-s [option]
```
 | 这迫使 Docker 使用不同的存储驱动程序。默认值为“”，Docker 对此使用 AUFS。 |
| 
```
--dns [option(s)]
```
 | 此为所有 Docker 容器设置 DNS 服务器(或多个服务器)。 |
| 
```
--dns-search [option(s)]
```
 | 这将为所有 Docker 容器设置域名系统搜索域。 |
| 
```
-H [option(s)]
```
 | 这个就是要绑定的插座。可以是`tcp://host:port, unix:///path/to/socket, fd://* or fd://socketfd`中的一个或多个。 |
如果多个`docker`守护程序同时运行，客户端将接受`DOCKER_HOST`参数设置的值。你也可以用`-H`标志让它连接到一个特定的守护进程。
考虑这个命令:
```
$ docker -H tcp://0.0.0.0:2375 run -it ubuntu /bin/bash
```
前面的命令与下面的命令相同:
```
$ DOCKER_HOST="tcp://0.0.0.0:2375" docker run -it ubuntu /bin/bash
```
## 版本命令
`version`命令打印出版本信息:
```
$ docker -vDocker version 1.1.1, build bd609d2
```
## 信息命令
`info`命令打印`docker`守护程序配置的详细信息，例如执行驱动程序、正在使用的存储驱动程序等:
```
$ docker info # The author is running it in boot2docker on OSX
Containers: 0
Images: 0
Storage Driver: aufs
 Root Dir: /mnt/sda1/var/lib/docker/aufs
 Dirs: 0
Execution Driver: native-0.2
Kernel Version: 3.15.3-tinycore64
Debug mode (server): true
Debug mode (client): false
Fds: 10
Goroutines: 10
EventsListeners: 0
Init Path: /usr/local/bin/docker
Sockets: [unix:///var/run/docker.sock tcp://0.0.0.0:2375]
```
## 运行命令
运行命令是我们最常使用的命令。它用于运行 Docker 容器:
```
$ docker run [options] IMAGE [command] [args]
```
| 
旗帜
 | 
说明
 |
| --- | --- |
| 
```
-a, --attach=[]
```
 | 将附加到`stdin``stdout`或`stderr`文件(标准输入、输出和错误文件)。). |
| 
```
-d, --detach
```
 | 这个在后台运行容器。 |
| 
```
-i, --interactive
```
 | 这个在交互模式下运行容器(保持`stdin`文件打开)。 |
| 
```
-t, --tty
```
 | 这个分配给一个伪`tty`标志(如果你想连接到容器 Docker，这是必需的)。 |
| 
```
-p, --publish=[]
```
 | 这个向主机(`ip:hostport:containerport`)发布一个容器的港口。 |
| 
```
--rm
```
 | 该在退出时自动移除容器(不能与`-d`标志一起使用)。 |
| 
```
--privileged
```
 | 这给了这个容器额外的权限。 |
| 
```
-v, --volume=[]
```
 | 此绑定坐骑一卷(来自>=`/host:/container`；from docker = > `/container`)。 |
| 
```
--volumes-from=[]
```
 | 这从指定的容器装载体积。 |
| 
```
-w, --workdir=""
```
 | 这个就是容器内部的工作目录。 |
| 
```
--name=""
```
 | 这给容器指定一个名称。 |
| 
```
-h, --hostname=""
```
 | 这个给容器分配一个主机名。 |
| 
```
-u, --user=""
```
 | 这个是容器应该运行的用户名或 UID。 |
| 
```
-e, --env=[]
```
 | 这个设置环境变量。 |
| 
```
--env-file=[]
```
 | 这个从一个新的行分隔文件中读取环境变量。 |
| 
```
--dns=[]
```
 | 这将设置自定义 DNS 服务器。 |
| 
```
--dns-search=[]
```
 | 此设置自定义 DNS 搜索域。 |
| 
```
--link=[]
```
 | 此添加到另一个容器(`name:alias`)的链接。 |
| 
```
-c, --cpu-shares=0