Summary
Introduction 
	Why time series?
Test design 
	About InfluxDB 
	InfluxDB version tested: v1.7.2 
	About Elasticsearch 
	Elasticsearch version tested: v6.5.0 
	Comparison at-a-glance 
	InfluxDB 
	Elasticsearch 
	Overview 
	The dataset 
	Overview of the parameters for the sample dataset
Test methodology 
	Write performance 
	Query performance 
	On-disk storage requirements 
	Testing hardwareTesting hardware 
	User experience comparison 
	Syntax and convenience 
	InfluxDB 
	Elasticsearch 
	Mental models
About InfluxData 
	What is InfluxData?
InfluxDB documentation, downloads & guides What is time series data?
What is a time series database?
 ​3 
​3 
​4 
4 
​4 
​4 
​4 
​4 
​5 
​5 
​5 
​6 
​6 
​6 
7 
​7 
​8 
​10 
​11 
​11 
​11 
​12 
​12 
​14 
​14 
​14 
​15 
​15 
​15 
2​​/  14
Summary​14 
​15 
​15 
​15 
2​​/  14
Summary 
In the course of this benchmarking paper we looked at the performance of InfluxDB and Elasticsearch performance across three vectors: 
●	Data ingest performance - measured in values per second 
●	On-disk storage requirements - measured in Bytes 
●	Mean query response time - measured in millisecondsThe benchmarking tests and resulting data demonstrated that InfluxDB outperformed Elasticsearch across all three tests by a significant margin. Specifically: 
●	InfluxDB outperformed Elasticsearch by ​6.1x​ when it came to data ingestion 
●	InfluxDB outperformed Elasticsearch by up to ​8.2x​ when measuring query performance ●	InfluxDB outperformed Elasticsearch by delivering ​2.5x​ better compressionIt’s also important to note that configuring Elasticsearch wasn’t trivial — it requires up-front decisions about ​​, ​​, and how to work with the ​​. InfluxDB, on the other hand, is ready to use for time series workloads out of the box with no additional configuration. 
IntroductionIn this technical paper, we’ll compare the performance and features of InfluxDB and Elasticsearch for common​​​​workloads, specifically looking at the rates of data ingestion, on-disk data compression, and query performance. This data should prove valuable to developers and architects evaluating the suitability of these technologies for their use case. Specifically, the time series data management use cases involving the building​​​ (Infrastructure Monitoring, Application Monitoring, Cloud Monitoring),​​​, and​​applications.Our goal with this benchmarking test was to create a consistent, up-to-date comparison that reflects the latest developments in both InfluxDB and Elasticsearch. Periodically, we’ll re-run these benchmarks and update this document with our findings. All of the code for these benchmarks is 
 3​​/  14
available on​​​. Feel free to open up issues or pull requests on that repository or if you have any questions, comments, or suggestions.Why time series? 
Time series data has historically been associated with applications in finance. However, as developers and businesses move to instrument more in their servers, applications, network and the physical world, time series is becoming the de facto standard for how to think about storing, retrieving, and mining this data for real-time and historical insight. To learn more about why you should insist on using a purpose-built, time series backend versus attempting to retrofit a document, full-text, or RDBMS to satisfy your use case, check out the “​​” technical paper.Test design 
About InfluxDB 
InfluxDB version tested: v1.7.2 
InfluxDB is an open source time series database written in Go. At its core is a custom-built storage engine called the ​​, which is optimized for time series data. 
Controlled by a custom SQL-like query language named ​​, InfluxDB providesout-of-the-box support for mathematical and statistical functions across time ranges and is perfect for custom monitoring and metrics collection, real-time analytics, plus IoT and sensor data workloads. 
About Elasticsearch 
Elasticsearch version tested: v6.5.0 
Elasticsearch is an open source search server written in Java and built on top of​​​. It provides a distributed, full-text search engine suitable for enterprise workloads. While not a time4​​/  14
series database per se, Elasticsearch employs Lucene’s column indexes, which are used to efficiently aggregate numeric values. Combined with query-time aggregations and the ability to index on timestamp fields (which is also important for storing and retrieving log data), 
Elasticsearch provides the primitives for storing and querying time series data.Please note that this paper does not look at the suitability of InfluxDB for workloads other than those that are time-series-based. InfluxDB is not designed to satisfy full-text search or log management use cases and therefore will not be explored in this paper. For these use cases, we recommend sticking with Elasticsearch or similar full-text search engines. 
Comparison at-a-glanceComparison at-a-glance 
|  | InfluxDB  | Elasticsearch  |
|---|---|---|
| Description  |Database designed for time series, events and metrics data management  |Full-text search engine based on the Apache Lucene project  |
| Website  |https://influxdata.com/  |https://www.elastic.co/  |
| GitHub  |https://github.com/influxdata/influxdb  |https://github.com/elastic/elastics earch  || Documentation  |https://docs.influxdata.com/influxdb/la test/  |https://www.elastic.co/guide/inde x.html  |
| Initial release  |2013  |2010  |
| Latest release  |v1.7.2, November 2018  |v6.5.0, November 2018  |
| License  |Open Source, MIT  |Open Source, Apache  |
| Language  |Go  |Java  |
| Operating Systems  |Linux, OS X  |Linux, OS X, Windows  |
| Data Access APIs  |HTTP Line Protocol, JSON, UDP  |JSON, binary protocol (Java)  || Schema  |Schema-free  |Schema-free  |
 5​​/  14
Overview 
In building a representative benchmark suite, we identified the most commonly evaluated characteristics for working with time series data. As we’ll describe in additional detail below, we looked at performance across three vectors: 
1. 	Data ingest performance - measured in values per second 
2. 	On-disk storage requirements - measured in bytes3. 	Mean query response time - measured in milliseconds 
C O N C L U S I O N : 
InfluxDB outperformed Elasticsearch in write throughput, 
on-disk compression, and query performance. 
Since Elasticsearch is a full-text search server and not intended for time series data out of the box, some ​​ are​​​ for storing these types of metrics. 
In our testing, we found that these changes:●	Didn’t have an impact on write or query performance 
●	Did make a difference in storage requirements 
We’ll cover this impact in more detail in a later section. 
The dataset 
Overview of the parameters for the sample dataset 
| Number of servers  | 100  |
|---|---|
| Values measured per server  |100  |
| Measurement interval  |10s  |