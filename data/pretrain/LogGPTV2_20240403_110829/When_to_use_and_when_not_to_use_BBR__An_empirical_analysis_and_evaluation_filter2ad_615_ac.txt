ure 2(a)), nodes h1 and h2 send iPerf3 traffic to h3 using BBR and
Cubic, respectively. On the link from the router to h3, we add a
20ms network delay and vary the buffer size between 10KB and
100MB. Under each buffer size, the iPerf3 experiment lasts for 60s.
Figure 8(a) shows the results of our Mininet experiments. We see
that the bandwidth share of BBR and Cubic depends on the bottle-
neck buffer size. For a small buffer size (10KB), BBR utilizes 94% of
the network goodput value. When the buffer size is large (10MB),
Cubic utilizes 3× more bandwidth than BBR. Under moderate buffer
sizes (∼ 5MB), BBR and Cubic evenly share the bandwidth.
In terms of retransmissions, we find that BBR has a high retrans-
mission rate when coexisting with Cubic flows in shallow buffers.
Table 1 shows the number of retransmissions for BBR and Cubic
under different buffer sizes in our Mininet experiments. Clearly,
BBR has orders of magnitude higher retransmits than Cubic for
small buffer sizes. For example, under 100KB buffer size, BBR has
134
01020304050Loss Percentage (%) 020406080100Goodput (Mbps) CubicRenoBBRBBR1.1BBR1.501020304050Loss Percentage (%) 0246810Retr Number 104CubicRenoBBRBBR1.1BBR1.5104105106107Buffer (bytes) 02004006008001000Goodput (mbps) BBRCubicTotal104105106107Buffer (bytes) 02004006008001000Goodput (mbps) BBRCubicTotalIMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Yi Cao, Arpit Jain, Kriti Sharma, Aruna Balasubramanian, and Anshul Gandhi
Buffer (bytes) 1e4
BBR Retr#
Cubic Retr#
26746 305029 68741 1324 204 0
908
1145 794 7
1398
3987
0
16
1e5
1e6
5e6
1e6 5e7 1e8
Table 1: Number of retransmissions for BBR and Cubic for
different buffer sizes when they co-exist under the 1Gbps
bandwidth and 20ms RTT Mininet network.
200× more retransmits than Cubic. In deep buffers, BBR’s retrans-
missions drops to zero since its packets in flight (cwnd) is now
much smaller than the buffer capacity.
WAN results: We also conduct fairness experiments in our WAN
network. For configuring the network conditions, we apply the
same Mininet parameters to our WAN testbed. Our WAN results in
Figure 8(b) show a different behavior – even at high buffer sizes,
Cubic’s bandwidth share does not increase, unlike that in Figure 8(a).
This results suggests the existence of a shallow buffer on the WAN
between our router and the receiver h3. In Figure 8(b), the goodput
of BBR and Cubic stabilizes when our router buffer size reaches
20KB; this indicates that the bottleneck buffer in the wild in our
WAN setup is around 20KB. In terms of retransmissions, while we
also see a large number of retransmits for BBR in shallow buffers,
we find that BBR’s retransmits stabilize at around 500 packets/min
as we increase our router buffer size beyond 20KB; this further
confirms the 20KB bottleneck buffer in the wild for our WAN setup.
Reason for using Mininet: While we show similar results in
Section 4.1 for the LAN and Mininet testbeds, Mininet is more
flexible than the LAN testbed in certain scenarios. In Section 4.3,
we use Mininet to create a star topology for the fairness experiment
– a router connecting 3 nodes. This was not possible in our LAN
testbed given we only have two servers connected to a router. Also,
we use Mininet in Section 4.2 and Section 4.3 due to its convenience
and scalability to validate/reinforce our in-the-wild WAN results.
5 RELATED WORK
BBR’s design was first published in a 2016 ACM article [20]. Since
2016, several BBR updates have been given at IETF conferences [7,
9, 21], in addition to internet drafts [3, 22].
Most of the prior work on evaluating the performance of BBR
has focused on BBR’s fairness. Hock et al. [30] study how BBR
coexists with Cubic under shallow and deep buffers. They find that
BBR gets a bigger share of the bandwidth in small buffers while
Cubic gets a larger share in deep buffers. Ma et al. [34] show that the
persistent queue that develops on the bottleneck buffer contributes
to BBR’s unfairness. However, these works either experiment with
very few buffer sizes or only using a single testbed. Our paper not
only analyzes BBR’s fairness for a range of buffer sizes (10KB –
100MB) under multiple testbeds, but also highlights the non-trivial
fairness behavior in our WAN setting (see Section 4.3).
The high loss rate under BBR has been discussed in some recent
papers [30, 32, 37], but these works do not investigate the reasons
(such as the cliff point, see Section 4.2) behind this observation.
There have also been some works that investigate BBR’s perfor-
mance for specific scenarios. Zhong et al. [39] investigate BBR in a
mobile network, and analyze the impact of delayed ACKs on BBR’s
performance. Atxutegi et al. [18] study BBR’s performance in live
mobile networks, and contrast it with TCP NewReno and Cubic.
Our work focuses on BBR performance in different wired settings,
including LAN and WAN, in addition to Mininet.
6 LIMITATIONS AND FUTURE WORK
We now discuss the limitations of our study. First, all of our experi-
mental testbeds, including LAN, Mininet, and WAN, use a simple
dumbbell topology in order to easily control the bottleneck buffer
size. However, the Internet consists of more complicated networks.
For example, BBR has been used in Google’s B4 network as well as
in Youtube video servers [20]. We plan to extend our study to such
real-world scenarios as part of the future work.
Second, our experiments thus far consider at most two concur-
rent TCP flows. Also, since the LAN and the Mininet testbeds are
fully under our control, we deliberately eliminate the irrelevant
(background) traffic in our experiments to focus on the fairness
performance comparison between BBR and Cubic. However, in real
networks, temporary flows can enter and leave the network at dif-
ferent times, which might affect the results. We plan to investigate
the impact of more competing flows in our future work.
Third, this paper primarily focuses on empirical measurements.
We have not investigated how we can use our empirical findings
to optimize the performance of BBR. In our ongoing work, we are
investigating the design flaws of BBR with the eventual goal of
enhancing the design of BBR to improve its performance. Specifi-
cally, we are working on mitigating BBR’s high retransmission and
unfairness issues.
Finally, the key issues revealed by our study, such as cliff points,
high retransmissions, and unfairness, are inherent in the current
version of BBR. It is not entirely obvious whether or not these
issues will persist in future versions of BBR, though there is some
online discussion [9, 10] about addressing unfairness in subsequent
versions of BBR. Nonetheless, the empirical findings and root cause
analysis presented in this paper can help the community to identify
and solve performance issues as BBR continues to evolve.
7 CONCLUSION
Despite the excitement around BBR, there is a dearth of studies that
evaluate the performance of BBR on multiple real-world testbeds
and across a range of parameter settings, especially studies that
investigate why BBR performs the way it does. This paper conducts
over 600 experiments under both emulated and real-world testbeds,
and analyzes the network conditions under which BBR outperforms
contemporary algorithms. Our analysis reveals that it is the relative
difference between the bottleneck buffer size and BDP that typically
dictates when BBR performs well. In fact, this finding also extends
to BBR’s unfair behavior when it coexists with Cubic; however,
in such cases, we find that when BBR performs well, it can be
very unfair to competing flows. In addition, our study reveals the
existence of a “cliff point” in loss rate, beyond which BBR’s goodput
drops abruptly. Our analysis reveals that the pacinд_дain parameter
in BBR is partly to blame for this behavior.
ACKNOWLEDGMENT
This work was supported by NSF grants 1566260, 1717588, 1750109,
and 1909356.
135
2015.
2017.
[3] Delivery Rate Estimation. https://tools.ietf.org/html/draft-cheng-iccrg-delivery-
rate-estimation-00, 2017.
[4] TC Configure Point. https://groups.google.com/d/topic/bbr-dev/8LYkNt17V_8,
[5] BBR Quick Start. https://github.com/google/bbr/blob/master/Documentation/
[6] Mininet - An Instant Virtual Network on your Laptop (or other PC). http:
bbr-quick-start.md, 2018.
//mininet.org/, 2018.
[7] BBR congestion control: IETF 102 Update: BBR Startup. https://datatracker.ietf.
org/meeting/102/materials/slides-102-iccrg-bbr-startup-behavior-01, 2019.
[8] BBR source code. https://git.kernel.org/pub/scm/linux/kernel/git/davem/net-
next.git/tree/net/ipv4/tcp_bbr.c, 2019.
[9] BBR v2: A Model-based Congestion Control: IETF 104 Update. https://datatracker.
ietf.org/meeting/104/materials/slides-104-iccrg-an-update-on-bbr-00, 2019.
[10] BBR v2: A Model-based Congestion Control:
IETF
105 Update.
https://datatracker.ietf.org/meeting/105/materials/slides-105-iccrg-bbr-
v2-a-model-based-congestion-control-00, 2019.
[11] Components of Linux Traffic Control. http://tldp.org/HOWTO/Traffic-Control-
HOWTO/components.html, 2019.
[12] iPerf - The ultimate speed test tool for TCP, UDP and SCTP. https://iperf.fr/iperf-
[13] Machine Learning in Python – scikit-learn. https://scikit-learn.org/stable/index.
doc.php, 2019.
html, 2019.
[14] Token Bucket Filter. https://linux.die.net/man/8/tc-tbf, 2019.
[15] Aggarwal, A., Savage, S., and Anderson, T. Understanding the performance
of tcp pacing.
In Proceedings IEEE INFOCOM 2000. Conference on Computer
Communications. Nineteenth Annual Joint Conference of the IEEE Computer and
Communications Societies (Cat. No. 00CH37064) (2000), vol. 3, IEEE, pp. 1157–1165.
[16] Alizadeh, M., Greenberg, A., Maltz, D. A., Padhye, J., Patel, P., Prabhakar,
B., Sengupta, S., and Sridharan, M. Data center tcp (dctcp). ACM SIGCOMM
computer communication review 41, 4 (2011), 63–74.
[17] Arun, V., and Balakrishnan, H. Copa: Practical delay-based congestion control
for the internet. In 15th {USENIX} Symposium on Networked Systems Design and
Implementation ({NSDI} 18) (2018), pp. 329–342.
[18] Atxutegi, E., Liberal, F., Haile, H. K., Grinnemo, K.-J., Brunstrom, A., and
Arvidsson, A. On the use of tcp bbr in cellular networks. IEEE Communications
Magazine 56, 3 (2018), 172–179.
[19] Brakmo, L. S., O’Malley, S. W., and Peterson, L. L. TCP Vegas: New techniques
for congestion detection and avoidance, vol. 24. ACM, 1994.
[20] Cardwell, N., Cheng, Y., Gunn, C. S., Yeganeh, S. H., and Jacobson, V. Bbr:
Congestion-based congestion control.
[21] Cardwell, N., Cheng, Y., Gunn, C. S., Yeganeh, S. H., Swett, I., Iyengar,
J., Vasiliev, V., and Jacobson, V. Bbr congestion control: Ietf 99 update. In
Presentation in ICCRG at IETF 99th meeting, Jul (2017).
[22] Cardwell, N., Cheng, Y., Yeganeh, S. H., and Jacobson, V. Bbr congestion
control draft-cardwell-iccrg-bbr-congestion-control-00. Google, Inc Std. (2017).
[23] Dempsey, B. J., Liebeherr, J., and Weaver, A. C. On retransmission-based error
control for continuous media traffic in packet-switching networks. Computer
Networks and ISDN Systems 28, 5 (1996), 719–736.
{PCC}:
[24] Dong, M., Li, Q., Zarchy, D., Godfrey, P. B., and Schapira, M.
Re-architecting congestion control for consistent high performance.
In 12th
{USENIX} Symposium on Networked Systems Design and Implementation ({NSDI}
15) (2015), pp. 395–408.
[25] Fall, K., and Floyd, S. Simulation-based comparisons of tahoe, reno and sack
tcp. ACM SIGCOMM Computer Communication Review 26, 3 (1996), 5–21.
avoidance. IEEE/ACM Transactions on networking, 4 (1993), 397–413.
(2011), 96.
[27] Gettys, J. Bufferbloat: Dark buffers in the internet. IEEE Internet Computing, 3
[28] Ha, S., Rhee, I., and Xu, L. Cubic: a new tcp-friendly high-speed tcp variant.
[26] Floyd, S., and Jacobson, V. Random early detection gateways for congestion
ACM SIGOPS operating systems review 42, 5 (2008), 64–74.
pp. 18–23.
[29] Hemminger, S., et al. Network emulation with netem. In Linux conf au (2005),
[30] Hock, M., Bless, R., and Zitterbart, M. Experimental evaluation of bbr con-
gestion control. In 2017 IEEE 25th International Conference on Network Protocols
(ICNP) (2017), IEEE, pp. 1–10.
[31] Huffaker, B., Fomenkov, M., Plummer, D. J., Moore, D., Claffy, K., et al.
Distance metrics in the internet. In Proc. of IEEE international telecommunications
symposium (ITS) (2002).
[32] Hurtig, P., Haile, H., Grinnemo, K.-J., Brunstrom, A., Atxutegi, E., Liberal,
F., and Arvidsson, Å. Impact of tcp bbr on cubic traffic: A mixed workload
evaluation. In 2018 30th International Teletraffic Congress (ITC 30) (2018), vol. 1,
IEEE, pp. 218–226.
When to use and when not to use BBR: An empirical analysis and evaluation study
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
REFERENCES
[1] TCP Small Queues. https://lwn.net/Articles/507065/, 2012.
[2] Fair Queue Traffic Policing. http://man7.org/linux/man-pages/man8/tc-fq.8.html,
[33] Kleinrock, L. Power and deterministic rules of thumb for probabilistic problems
in computer communications. In Proceedings of the International Conference on
Communications (1979), vol. 43, pp. 1–43.
[34] Ma, S., Jiang, J., Wang, W., and Li, B. Towards rtt fairness of congestion-based
congestion control. arXiv preprint arXiv:1706.09115 (2017).
cation (ecn) to ip. Tech. rep., 1998.
[35] Ramakrishnan, K., and Floyd, S. A proposal to add explicit congestion notifi-
[36] Schapira, M., and Winstein, K. Congestion-control throwdown. In Proceedings
of the 16th ACM Workshop on Hot Topics in Networks (2017), ACM, pp. 122–128.
[37] Scholz, D., Jaeger, B., Schwaighofer, L., Raumer, D., Geyer, F., and Carle, G.
Towards a deeper understanding of tcp bbr congestion control. In IFIP Networking
(2018), pp. 109–117.
[38] Yan, F. Y., Ma, J., Hill, G. D., Raghavan, D., Wahby, R. S., Levis, P., and Winstein,
K. Pantheon: the training ground for internet congestion-control research. In 2018
{USENIX} Annual Technical Conference ({USENIX}{ATC} 18) (2018), pp. 731–
743.
[39] Zhong, Z., Hamchaoui, I., Khatoun, R., and Serhrouchni, A. Performance
evaluation of cqic and tcp bbr in mobile network. In 2018 21st Conference on
Innovation in Clouds, Internet and Networks and Workshops (ICIN) (2018), IEEE,
pp. 1–5.
136