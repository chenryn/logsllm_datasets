failed casts without stopping program execution; these records can
be subjected to a security audit at a later point in time.
Hybrid type checking Our cast operation is related to Flana-
gan’s hybrid type checking [26], where calls to the oracle in our
semantics correspond to dynamic type casts. Unlike hybrid type
checking, however, the budgeted semantics permits continuation of
computation even if the cast fails, at the cost of consuming a unit
of budget.
9. CONCLUSION
We have presented a type system and a runtime mechanism that
together precisely enforce progress sensitive information security,
controlling information leakage via progress channels (also known
as termination channels). The system is parameterized on an oracle
that reasons about the termination behavior of loops. We have im-
plemented such an oracle using logical abstract interpretation [14].
To the best of our knowledge, this is the ﬁrst time cutting-edge
static analysis for program termination has been applied to enforce
strong information security properties.
We have extended our system to track at run time information
leakage via progress channels, and restrict such leakage according
to a budget. This provides a continuum of security guarantees be-
tween progress-sensitive and progress-insensitive security: a zero
budget on leakage enforces progress-sensitive security, and an inﬁ-
nite budget enforces progress-insensitive security.
The paper is primarily concerned with providing security guar-
antees for conﬁdentiality: we ensure that progress channels do not
leak conﬁdential information. However, integrity is a well-known
dual of conﬁdentiality, and our results can also provide integrity
guarantees, preventing untrusted input from inﬂuencing the termi-
nation behavior of a program.
Progress-sensitive security provides stronger guarantees than pro-
gress-insensitive security. The additional effort required to provide
these stronger guarantees appears reasonable. We extended the
Jif compiler [35] to track information ﬂow via progress channels,
and analyzed Civitas [18], a remote voting system implemented
in Jif. The termination behavior of all loops detected by the ex-
tended compiler depends only on low-security information and are
amenable to existing termination analyses. We conclude that Civ-
itas (and likely other security-typed programs) appears to satisfy
a stronger security condition than that implied by the standard Jif
type system, and a suitable termination oracle would be able to
show this with little additional programmer effort.
Acknowledgements
We thanks the anonymous reviewers for their helpful comments.
Andrei Sabelfeld provided helpful comments. This research is sup-
ported by the National Science Foundation under Grant No. 1054172
and by the Air Force Research Laboratory.
References
[1] The Z3 Theorem Prover., 2008. Software release,
http://research.microsoft.com/projects/Z3.
[2] A. Askarov and A. Sabelfeld. Localized delimited release:
Combining the what and where dimensions of information
release. In Proc. ACM Workshop on Programming
Languages and Analysis for Security (PLAS), pages 53–60,
June 2007.
[3] A. Askarov and A. Sabelfeld. Gradual release: Unifying
declassiﬁcation, encryption and key release policies. In Proc.
IEEE Symp. on Security and Privacy, pages 207–221, May
2007.
[4] A. Askarov, S. Hunt, A. Sabelfeld, and D. Sands.
Termination-insensitive noninterference leaks more than just
a bit. In ESORICS, pages 333–348, Oct. 2008.
[5] A. Askarov, D. Zhang, and A. C. Myers. Predictive
black-box mitigation of timing channels. In ACM
Conference on Computer and Communications Security,
pages 297–307, 2010.
[6] J. Barnes. High Integrity Software: The SPARK Approach to
Safety and Security. Addison Wesley, Apr. 2003. ISBN
0321136160.
[7] G. Barthe, S. Cavadini, and T. Rezk. Tractable enforcement
of declassiﬁcation policies. In Proc. IEEE Computer
Security Foundations Symposium, June 2008.
[8] J. Berdine, B. Cook, D. Distefano, and P. W. O’Hearn.
Automatic termination proofs for programs with
shape-shifting heaps. In Proceedings of the 18th
international conference on Computer Aided Veriﬁcation,
CAV’06, pages 386–400, Berlin, Heidelberg, 2006.
Springer-Verlag.
[9] A. Blankstein. Analyzing audit trails in the Aeolus security
platform. Master’s thesis, MIT, Cambridge, MA, USA, June
2011.
891[10] G. Boudol. On typing information ﬂow. In Proceedings of
the Second international conference on Theoretical Aspects
of Computing, ICTAC’05, pages 366–380, Berlin,
Heidelberg, 2005. Springer-Verlag.
[11] G. Boudol and I. Castellani. Non-interference for concurrent
programs and thread systems. Theoretical Computer
Science, 281(1):109–130, June 2002.
[12] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R.
Engler. EXE: Automatically generating inputs of death. In
Proceedings of the 13th ACM Conference on Computer and
Communications Security, 2006.
[13] R. Chang, G. Jiang, F. Ivancic, S. Sankaranarayanan, and
V. Shmatikov. Inputs of coma: Static detection of
denial-of-service vulnerabilities. In Proceedings of the IEEE
Computer Security Foundations Symposium, pages 186–199,
Washington, DC, USA, 2009. IEEE Computer Society.
[14] A. Chawdhary, B. Cook, S. Gulwani, M. Sagiv, and H. Yang.
Ranking abstractions. In Proceedings of the Theory and
practice of software, 17th European conference on
Programming languages and systems, ESOP’08/ETAPS’08,
pages 148–162, 2008.
[15] W. Cheng, D. R. K. Ports, D. Schultz, J. Cowling, V. Popic,
A. Blankstein, D. Curtis, L. Shrira, and B. Liskov.
Abstractions for usable information ﬂow control in Aeolus.
In Proceedings of the 2012 USENIX Annual Technical
Conference, Boston, MA, USA, June 2012. USENIX.
[16] S. Chong and A. C. Myers. End-to-end enforcement of
erasure and declassiﬁcation. In Proceedings of the 21st IEEE
Computer Security Foundations Symposium, pages 98–111,
Piscataway, NJ, USA, June 2008. IEEE Press.
[17] M. R. Clarkson and F. B. Schneider. Quantiﬁcation of
integrity. In Proceedings of the 2010 23rd IEEE Computer
Security Foundations Symposium, CSF ’10, pages 28–43,
Washington, DC, USA, 2010. IEEE Computer Society.
[18] M. R. Clarkson, S. Chong, and A. C. Myers. Civitas: Toward
a secure voting system. In Proceedings of the 2008 IEEE
Symposium on Security and Privacy, SP ’08, pages 354–368,
Washington, DC, USA, 2008. IEEE Computer Society.
[19] B. Cook, A. Podelski, and A. Rybalchenko. Termination
proofs for systems code. In Proceedings of the 2006 ACM
SIGPLAN conference on Programming language design and
implementation, PLDI ’06, pages 415–426, New York, NY,
USA, 2006. ACM.
[20] B. Cook, S. Gulwani, T. Lev-Ami, A. Rybalchenko, and
M. Sagiv. Proving conditional termination. In Proceedings
of the 20th international conference on Computer Aided
Veriﬁcation, CAV ’08, pages 328–340, 2008.
[21] B. Cook, A. Podelski, and A. Rybalchenko. Summarization
for termination: no return! Form. Methods Syst. Des., 35(3):
369–387, Dec. 2009.
[22] B. Cook, D. Kroening, P. Rümmer, and C. M. Wintersteiger.
Ranking function synthesis for bit-vector relations. In
Proceedings of the 16th international conference on Tools
and Algorithms for the Construction and Analysis of
Systems, TACAS’10, pages 236–250, 2010.
[23] P. Cousot. Proving program invariance and termination by
parametric abstraction, lagrangian relaxation and
semideﬁnite programming. In R. Cousot, editor, Veriﬁcation,
Model Checking, and Abstract Interpretation, volume 3385
of Lecture Notes in Computer Science, pages 1–24. Springer
Berlin / Heidelberg, 2005.
[24] D. Demange and D. Sands. All Secrets Great and Small. In
Programming Languages and Systems. 18th European
Symposium on Programming, ESOP 2009, number 5502 in
LNCS, pages 207–221. Springer Verlag, 2009.
[25] D. Devriese and F. Piessens. Noninterference through secure
multi-execution. In Security and Privacy (SP), 2010 IEEE
Symposium on, pages 109 –124, may 2010.
[26] C. Flanagan. Hybrid type checking. In Conference record of
the 33rd ACM SIGPLAN-SIGACT symposium on Principles
of programming languages, POPL ’06, pages 245–256, New
York, NY, USA, 2006. ACM.
[27] R. Grabowski and L. Beringer. Noninterference with
dynamic security domains and policies. In 13th Asian
Computing Science Conference, Focusing on Information
Security and Privacy, 2009.
[28] S. Hunt and D. Sands. On ﬂow-sensitive security types. In
Proc. 33rd ACM Symp. on Principles of Programming
Languages (POPL), pages 79–90, Charleston, South
Carolina, USA, Jan. 2006.
[29] V. Kashyap, B. Wiedermann, and B. Hardekopf. Timing- and
termination-sensitive secure information ﬂow: Exploring a
new approach. In Security and Privacy (SP), 2011 IEEE
Symposium on, pages 413 –428, may 2011.
[30] B. Köpf and G. Smith. Vulnerability bounds and leakage
resilience of blinded cryptography under timing attacks. In
2010 IEEE Computer Security Foundations, July 2010.
[31] D. Kroening, N. Sharygina, A. Tsitovich, and C. M.
Wintersteiger. Termination analysis with compositional
transition invariants. In Proceedings of the 22nd
international conference on Computer Aided Veriﬁcation,
CAV’10, pages 89–103, Berlin, Heidelberg, 2010.
Springer-Verlag.
[32] A. Lux and H. Mantel. Declassiﬁcation with explicit
reference points. In 14th European Symposium on Research
in Computer Security, volume 5789 of LNCS, pages 69–85.
Springer, 2009.
[33] J. Magazinius, A. Askarov, and A. Sabelfeld. Decentralized
delimited release. In APLAS, pages 220–237, 2011.
[34] S. Moore, A. Askarov, and S. Chong. Precise enforcement of
progress-sensitive security. Technical Report TR-04-12,
Harvard School of Engineering and Applied Sciences, 2012.
[35] A. C. Myers, L. Zheng, S. Zdancewic, S. Chong, and
N. Nystrom. Jif 3.0: Java information ﬂow. Software release,
http://www.cs.cornell.edu/jif, July 2006.
[36] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature generation of
exploits on commodity software. In Proceedings of the
Network and Distributed System Security Symposium, 2005.
892[37] K. R. O’Neill, M. R. Clarkson, and S. Chong.
Information-ﬂow security for interactive programs. In
Proceedings of the 19th IEEE Computer Security
Foundations Workshop, pages 190–201. IEEE Computer
Society, June 2006.
[38] A. Podelski and A. Rybalchenko. A complete method for the
synthesis of linear ranking functions. In B. Steffen and
G. Levi, editors, Veriﬁcation, Model Checking, and Abstract
Interpretation, volume 2937 of Lecture Notes in Computer
Science, pages 465–486. Springer Berlin / Heidelberg, 2004.
[39] V. Popic. Audit trails in the Aeolus distributed security
platform. Master’s thesis, MIT, Cambridge, MA, USA, Sept.
2010. Also as Technical Report MIT-CSAIL-TR-2010-048.
[40] W. Rafnsson and A. Sabelfeld. Limiting information leakage
in event-based communication. In Proceedings of the ACM
SIGPLAN Sixith Workshop on Programming Languages and
Analysis for Security, June 2011.
[41] W. Rafnsson, D. Hedin, and A. Sabelfeld. Securing
interactive programs. In Proceedings of the 2012 25th IEEE
Computer Security Foundations Symposium, CSF ’12, 2012.
[42] A. Russo and A. Sabelfeld. Dynamic vs. static ﬂow-sensitive
security analysis. In Proceedings of the IEEE Computer
Security Foundations Symposium, 2010.
[43] A. Sabelfeld and A. C. Myers. Language-based
information-ﬂow security. IEEE Journal on Selected Areas
in Communications, 21(1):5–19, Jan. 2003.
[44] A. Sabelfeld and A. C. Myers. A model for delimited
information release. In Proc. International Symp. on
Software Security (ISSS’03), volume 3233 of LNCS, pages
174–191. Springer-Verlag, Oct. 2004.
[45] A. Sabelfeld and A. C. Myers. A model for delimited
release. In Proc. 2003 International Symposium on Software
Security, number 3233 in Lecture Notes in Computer
Science, pages 174–191. Springer-Verlag, 2004.
[46] A. Sabelfeld and D. Sands. Declassiﬁcation: Dimensions
and principles. J. Computer Security, 2009.
[47] V. Simonet. The Flow Caml System: documentation and
user’s manual. Technical Report 0282, Institut National de
Recherche en Informatique et en Automatique (INRIA), July
2003.
[48] G. Smith. A new type system for secure information ﬂow. In
Proc. IEEE Computer Security Foundations Workshop, pages
115–125, June 2001.
[49] G. Smith. Quantifying information ﬂow using min-entropy.
In QEST, pages 159–167, 2011.
[50] G. Smith and R. Alpízar. Nontermination and secure
information ﬂow. Mathematical Structures in Computer
Science (Special Issue on Programming Language
Interference and Dependence), 21:1183–1205, Dec. 2011.
[51] G. Smith and D. Volpano. Secure information ﬂow in a
multi-threaded imperative language. In Proc. ACM Symp. on
Principles of Programming Languages, pages 355–364, Jan.
1998.
[52] F. Spoto, F. Mesnard, and E. Payet. A termination analyzer
for java bytecode based on path-length. ACM Trans.
Program. Lang. Syst., 32(3):8:1–8:70, Mar. 2010.
[53] D. Stefan, A. Russo, P. Buiras, A. Levy, J. C. Mitchell, and
D. Mazières. Addressing covert termination and timing
channels in concurrent information ﬂow systems. In
Proceedings of the 17th ACM SIGPLAN International
Conference on Functional Programming, New York, NY,
USA, June 2012. ACM Press.
[54] N. Swamy, M. Hicks, S. Tse, and S. Zdancewic. Managing
policy updates in security-typed languages. In Proceedings
of the 19th IEEE Computer Security Foundations Workshop,
pages 202–216. IEEE Computer Society, 2006.
[55] D. Volpano and G. Smith. Eliminating covert ﬂows with
minimum typings. In Proc. 10th IEEE Computer Security
Foundations Workshop, pages 156–168, 1997.
[56] D. Volpano, G. Smith, and C. Irvine. A sound type system
for secure ﬂow analysis. Journal of Computer Security, 4(3):
167–187, 1996.
[57] D. Zhang, A. Askarov, and A. C. Myers. Predictive
mitigation of timing channels in interactive systems. In ACM
Conference on Computer and Communications Security,
pages 563–574, 2011.
[58] L. Zheng and A. C. Myers. Dynamic security labels and
noninterference. In Proc. 2nd Workshop on Formal Aspects
in Security and Trust, IFIP TC1 WG1.7. Springer, Aug. 2004.
893