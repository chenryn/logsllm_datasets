---
## Page 154
比萨加盟店
加盟比萨店
对象村比萨店经营有成，击败了竞争者，现在大家都希望对象
村比萨店能够在自家附近有加盟店。身为加盟公司经营者，你
希望确保加盟店营运的质量，所以希望这些店都使用你那些经
过时间考验的代码。
但是区域的差异呢？每家加盟店都可能想要提供不同风味的比
萨（比方说纽约、芝加哥、加州），这受到了开店地点及该地
区比萨美食家口味的影响。
你毒望加显店都能利用你的
其中一家加盟店希望工
代码，好让比萨的流程能一
厂能利造组约风味的比
致不变。
萨：薄饼、美味的酱料
和少量的芝士。
另一家加店希望工厂
能制造芝加哥风味的比
萨，他们的顾客想要厚
饼、重味的替科和大量
Chic
的芝士。
我们已经有一个做法·····
如果利用SimplePizzaFactory，写出三种不同的工厂，分别是NYPizzaFactory、
ChicagoPizzaFactory、CaliforniaPizzaFactory，那么各地加盟店都有适合的工
厂可以使用，这是一种做法。
PDG
让我们来看看会变成什么样子
118
第4章
---
## Page 155
工厂模式
这里创建的工厂，是制造纽
约风味的比萨。
PizzaStore nyStore = new PizzaStore(nyFactory);
然后建立一个比萨店，将组约工厂的引
nyStore.orderPizza("Veggie");
用作为参数。
当我们制造比萨，全得到
组约风味的比萨。
PizzaStore chicagoStore = new PizzaStore(chicagoFactory);
chicagoStore.orderPizza("Veggie");
厂
芝加哥比萨店也类似，先建立一个运加哥
风味工厂，并建立一个比萨店，然后结合
两者。制造出的比萨，就是芝加哥风味的
比萨。
但是你想要多一些质量控制····
在推广SimpleFactory时，你发现加盟店的确是采用你的
我做比萨已经有好几年，所
工厂创建比萨，但是其他部分，却开始采用他们自创的
以想在比萨店的该程中，加
流程：烘烤的做法有些差异、不要切片、使用其他厂商
入自己的“改良”。
的盒子。
再想想这个问题，你真的希望能够建立一个框架，把加
盟店和创建比萨捆绑在一起的同时又保持一定的弹性。
在我们稍早的SimplePizzaFactory代码之前，制作比萨的
代码绑在PizzaStore里，但这么做却没有弹性。那么，该
如何做才能够吃掉比萨又保有比萨呢？（译注：鱼与熊
掌兼得）
一个好的加器店
你“不需要”管他在
比萨中放了什么东西。
你现在的位置
119
---
## Page 156
让子类决定
给比萨店使围的框架
有个做法可让比萨制作活动局限于PizzaStore类，而同时又能让这些加
盟店依然可以自由地制作该区域的风味。
所要做的事情，就是把createPizzaO方法放回到PizzaStore中，不过要把
它设置成“抽象方法”，然后为每个区域风味创建一个PizzaStore的子
类。
首先，看看PizzaStore所做的改变：
现在PixxaStore是抽象的（下面
解释为何如此）。
public abstract class PizzaStore (
public Pizza orderPizza (String type){
Pizza pizza;
现在cteatePixza(）方法从工厂对象中移
PixxaStote
pizza =createPizza(type);
pizza.prepare ();
pizza.bake () ;
pizza.cut () ;
pizza.box ();
这些都没变
return pizza;
现在把工厂对象移到这个
abstract Pizza createPizza(String type);
方法中。
在PixxaStove里，“工厂方法”现
在是抽象的。
现在已经有一个PizzaStore作为超类；让每个域类型（NYPizzaStore、
ChicagoPizzaStore、CaliforniaPizzaStore）都继承这个PizzaStore，每
个子类各自决定如何制造比萨。让我们看看这要如何进行。
120
第4章
---
## Page 157
工厂模式
允许子类做决定
别忘了，PizzaStore已经有一个不错的订单系统，由orderPizza(方法负责处理订单，
而你希望所有加盟店对于订单的处理都能够一致。
各个区域比萨店之间的差异在于他们制作比萨的风味（纽约比萨的饼薄，芝加哥比
萨的饼厚等），我们现在要让createPizza()能够应对这些变化来负责创建正确种类
的比萨。做法是让PizzaStore的各个子类负责定义自己的createPizzaO方法。所以我
们会得到一些PizzaStore具体的子类，每个子类都有自己的比萨变体，而仍然适合
PizzaStore框架，并使用调试好的orderPizzaO方法。
每个子类都金覆盖cteatePixxa(）方法，同时
使用PixxaStore定义的orderPizxa方法。甚至
可以把onderPixxa方法声明成tinal，以防止
PizzaStore
createPizza()
被子类程盖。
orderPizza)
NYStylePlzzaStore
ChicagoStylePizzaStore
类似地，利用延加哥子类，我
如果加器店为腰客提供组约风味
createPizza()
createPizzal)
们得到了带芝加哥原科的
的比梦，就使用NYStylePixxaStote
cteatePixxa(）实现。
因为此类的createPixxa(）方法会建
别忘了：PixxaStore的
立组约风味的比萨。
cteatePixxa(）是一个抽象方法，所
以任何的具体比萨店子类型“必
须”实现这个方法。
public Pizza createPizza（type)（
public Pizza createPizza(type)
if(type.equals("cheese"))（
if（type.equals（cheese²))
pizza-new ChicagoStyleCheesePizza():
)else if (type.equals(pepperoni")
1（uozddad）senbadA）  s
pizza -new ChicagoStylePepperoniPiz-
pizza -new NYStylePepperoniPizza();
za();
)elseif（type.equals（clam)(
]else if（type.equals(clam）（
pizza -new NYStyleClamPizza();
pizza -new ChicagoStyleClamPizza();
)else if(type.equals(veggie")(
)else if（type.equals("veggie)[
pizza -new NYStyleVeggiePizza（);
pizza -new ChicagoStyleVeggiePizza(l;
你现在的位置
121
---
## Page 158
子类如何做决定
我不明白，毕竞PizzaStore的子
类终究只是子类，如何能做决定？在
NYStylePizzaStore类中，并没有希到任
何做决定逻辑的代码呀.
关于这个方面，要从PizzaStore的orderPizza()方法观点来看，此方法在抽象的
PizzaStore内定义，但是只在子类中实现具体类型。
onderPixxa）方法在抽象的PixxaStore内
PizzaStore
而不是在子类中定义。所以此方法并
createPizza0
不知道哪个子类将实际上制作比萨。
orderPizza[]
现在，更进一步地，orderPizza(）方法对Pizza对象做了许多事情（例如：准备、烘
烤、切片、装盒），但由于Pizza对象是抽象的，orderPizzaO并不知道哪些实际的
具体类参与进来了。换句话说，这就是解耦（decouple）！
PizzaStore
pizza = createPizza[];
cretePlizza()
:Dasedaad'ezzid
()ezzigep.o
pizza.bake(];
pizza.cut]:
xoqezzd
onderPixxa(）调用cteatePizza（）取得比萨对象。但究
意金取得哪一种c比萨：这不是orderPizxa（）方法所
能决定的，那么“完竞”是由谁来做决定呢？
当orderPizza(调用createPizza(时，某个比萨店子类将负责创建比萨。做哪一种比
萨呢？当然是由具体的比萨店来决定（例如：NYStylePizzaStore、ChicagoStyle-
PizzaStore)。
NYStylePizzaStore
ChicagoStylePizzaStore
createPizza()
createPizzal]
那么，子类是实时做出这样的决定吗？不是，但从orderPizza(）的角度来看，如果
选择在NYStylePizzaStore订购比萨，就是由这个子类（NYStylePizzaStore）决定。
严格来说，并非由这个子类实际做“决定”，而是由“顾客”决定到哪一家风味
的比萨店才决定了比萨的风味。
122
第4章
---
## Page 159
工厂模式
让我们开一家比萨店吧！
开加盟店有它的好处，可以从PizzaStore免费取得所有的功能。
区域店只需要继承PizzaStore，然后提供createPizza(）方法实现
自己的比萨风味即可。这里将为加盟店处理三个比较重要的比
萨风味。
这是纽约风味：
NYPixxaStore展PixxaStore.所
cteatePixxa（）返一个Pizxa对象
提有orderPizxa(）方法（以及其他
由子类全权页责该实例化哪一个具
的方法）。
体PixzA
我们必须实现createPixxa(）方法，因为
public class NYPizzaStore extends PizzaStore {
在PixzaStore里它是抽象的。
Pizza createPizza(String item){
if (item.equals("cheese")){
return new NYStyleCheesePizza();
}else if (item.equals("veggie")) {
return new NYStyleVeggiePizza();
)else if (item.equals("clam")){
这就是创建具体类的地方。对于
return new NYStyleClamPizza ();
每一种比萨类型，都是创建组约
}else if (item.equals("pepperoni")){
风味。
return new NYStylePepperoniPizza ();
}else return null;
请注象，超类的orderPixxa（）方法，并不知道正
在创建的比萨是哪一种，它只知道这个比萨可
以波准备、被烘烤、被切片、被装盒！
一旦将这个NYPizzaStore类编译成功，不妨尝试订购一两个比
萨。但在这么做之前，下一页先把芝加哥风味以及加州风味的
比萨店建造完成。
你现在的位置
123
---
## Page 160
工厂方法
Sharpenyourpencil
我们已经成功地完成了NYPizzaStore，还剩下实现两个比萨店，就可以开加盟店了。请
把芝加哥和加州的比萨店的实现写在这里：
124
第4章
---
## Page 161
工厂模式
声明一个工厂方法
原本是由一个对象负责所有具体类的实例化，现在通过对PizzaStore做一
些小转变，变成由一群子类来负责实例化。让我们看得更仔细些：
PixxaStore的子类在
public abstract class PizzaStore
cteatePixxa方法中，
处理对象的实例化。
public Pizza orderPizza (String type)(
Pizza pizza;
NYStylePizzaStore
pizza=createPizza（type);
createPizza(
pizza,prepare () ;
ChicagoStylePizzaStore
pizza,bake () ;
pizza.cut ();
createPizza()
pizza.box () ;
return pizza;
现在，实例化比萨的责任被
protected abstract Pizza createPizza(String type);
移到一个“方法”中，此方
法就如同是一个“工厂”
//其他的方法
再靠近一点
工厂方法用来处理对象的创建，并将这样的行为封装在子类
工厂方法可能需要参
中。这样，客户程序中关于超类的代码就和子类对象创建代
数（也可能不需要）
码解耦了。
来指定所要的产品
abstract Product factoryMethod(String type)
个
工厂方法是抽象的，所以
依赖子类来处理对象的
工厂方法必须返回一个产品。
工厂方法将客户（也就是超类中的代
创建。
超类中定义的方法，通常使
码.例如orderPixxa（））和实际创建具
用到工厂方法的返回值。
体户品的代码分隔开来。
你现在的位置》
125
---
## Page 162
订购一个比萨
如何利用比萨工厂方法订购比萨
我喜欢芝加哥风味的深盘比
我喜欢纽约风味的比萨
萨，有着厚饼，和浓浓的芝
就是那种薄脆的饼，有着少
许的芝士，以及很棒的医料。
C
Zoel
Ethan
Ethan需要从组约比萨
店订购比萨
Joel需要从芝加哥比萨
店行购比萨，相同的比
萨订购方法，但不同种
类的比萨！
他们应该如何订购？
）首先，Joel和Ethan需要取得比萨店的实例。Joel需要实例化一个ChicagoPizzaStore，而
Ethan需要一个NYPizzaStore。
②
有了各自的PizzaStore，Joel和Ethan分别调用orderPizza(方法，并传入他们所喜爱的比
萨类型（芝士、素食…….）。
③
orderPizzaO调用createPizzaO创建比萨。其中NYPizzaStore实例化的是纽约风味比萨，
而ChicagoPizzaStore实例化的是芝加哥风味比萨。createPizza(会将创建好的比萨当作
返回值。
4
orderPizza()并不知道真正创建的是哪一种比萨，只知道这是一个比萨，能够被准备、
被烘烤、被切片、被装盒，然后提供给Joel和Ethan。
126
第4章
---
## Page 163
工厂模式
看看如何根据订单生产这些比萨·····
幕
先看看Ethan的订单：首先我们需要一个纽约比萨店：
PizzaStore nyPizzaStore = new NYPizzaStore();
建立一个NYPixx
Stoe的实例
现在有了一个店，可以下订单了：
nyPizzaStore.orderPizza("cheese");
调用nyPixxaStoe实例的
ondenPixxa(）方法（这个方法被定义
"chee
在PizzaStoe中）
orderPizza（）方法于是调用createPizza（）方法：
create
Pizza pizza
= createPizza("cheese");
别忘了，工厂方法cteate-Pixxa(）是在子类中
实现的。在这个例子中，它金返回组约芝士
比萨。
Pizza
最后，比萨必须经过下列的处理才算完成orderPizza()：
pizza.prepare();
pizza.bake();
pizza.cut ();