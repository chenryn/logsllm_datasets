* * *
#### 了解NSE脚本的编写规则
##### Nmap的目录结构
我们只需要简单的了解一下它的结构即可，了解它的目录结构是为了清楚Nse脚本存放的位置。这里有几个注意点：
> 1.编写的脚本的后缀为nse
>
> 2.编写之后的NSE脚本存放在script文件夹内，这样脚本才可以生效
>
> 3.必须使用--script选项进行调用Nse脚本
##### NSE脚本的编写流程
在书写NSE脚本之前我们必须了解它的书写步骤，为了方便大家理解，我把一个NSE脚本的书写分为了四步。
> 1.导入脚本编写所需库
>
> 2.编写脚本描述信息
>
> 3.确定Rule类型
>
> 4.编写Action
可能此时你还有点蒙，没关系，我们看一下图思路就清晰了。
Namp nse 脚本模板结构如图所示：
文章看到这里大家肯定想接下来肯定要开始编写NSE脚本了吧。还不行呢，我们先举个几个栗子来说说四个Rule类型的区别。
##### Rule的四种类型
Rule：用于描述脚本的触发规则，返回值只有true和false两种。返回值决定了后面action对应的函数是否执行，注意：true(执行),flase(不执行)。它有四种类型分别是Prerule，Hostrule,Portrule,Postrule。
下面的几个栗子的环境为：
    1.Window
    2.phpstudy
    3.nmap-7.6
    4.zzcms8.2（对应zzcms.im）
**基础参数扩展**
host | table类型  
---|---  
host.os | 操作系统信息  
host.ip | tagret(目标主机)对应的ip,例如下面的127.0.0.1  
host.name | tagert在命令行对应的名字，例如下面的zzcms.im  
host.targetname | 同上host.name，我个人是这样认为的  
host.directly_connected | 判断目标主机是否与本机在同一个子网  
host.mac_addr | mac地址 （必须是同一子网的设备这个命令才有效）  
**port** | **table类型**  
port.number | 端口号  
port.protocol | 协议  
port.service | 服务 http或https  
port.version | 版本信息  
port.state | 端口状态  
**Prerule**
**Prerule会在Namp没有扫描之前进行触发。**
举个栗子：我们新建一个prerule.nse文件，然后我们把它存放在script文件夹下。只要"RongRi AnQuan NSE script
Prerule test"打印在Namp扫描之前，就可以证明Prerule会在Namp没有扫描之前进行触发。
    -- prerule.nse
    description = [[Prerule test ]]
    ---    -- @usage
    -- nmap --script prerule 
    -- @output
    --    -- Version 0.1
    -- Created 21/3/2018 - v0.1 - created by yumu 
    ---    
    author = "HongRi yumu"
    license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
    categories = {"default","safe"}
    prerule = function(host,port)
       return true
    end
    action = function(host, port)
      return "RongRi AnQuan NSE script Prerule test"
    end
* * *
我们都知道在 **测试阶段** 我们难免会出现错误,那假设我们出现了 **错误**
我们应该如何解决呢。这时我们需要借助Nmap的调试模式进行调试。还是老规矩举个栗子：
**那我这里新建一个preruleDebug.nse文件让它打印系统信息故意让其出错（至于为啥会出错后面会解释），然后调试一下给大家看。我们只需要加上-d选项即可进入调试模式，那一般我这边是-d 3,3代表的是等级，等级越高，越详细。-d 3打印的调试的信息已经足够详细了，所以我习惯选择-d 3.**
    -- preruleDebug.nse
    description = [[prerule test]]
    ---    --@usage
    -- nmap --script preruleDebug -p 80 
    -- @output
    -- Pre-scan script results:
    -- |_prerule: HongRi AnQuan test prerule
    -- Version 0.1
    -- Created 21/3/2018 - v0.1 - created by yumu 
    ---    
    author = "HongRi yumu"
    license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
    categories = {"default","safe"}
    prerule = function(host,port)
       return true
    end 
    action = function(host, port)
        return host.os
    end
错误界面如图所示：
调试模式如图所示:
我们从图中可以看到出错原因是因为 **prerule threw an error!** 看到详细原因是因为 **attempt to index a
nil value (local 'host')** 意思是说host是个无效值。原因是：
**我们知道prerule是在Nmap扫描之前触发脚本的。那也就是说我们是无法在action中打印出操作系统信息。**
好了，到这里大家也应该知道如何调试错误了。
* * *
**听说，对比产生美**
我们都知道对比产生美，那我们在这个错误的模板上改一下规则让它变成hostrule，看看结果如何。
**Hostrule**
**Hostrule会在Namp执行主机发现或探测进行触发。**
举个栗子：新建一个hostrule.nse文件。复制上面preruleDebug.nse的代码，但是做一点改动，就是Rule的类型改为Hostrule。然后运行能否打印我们想要的系统信息(嘻嘻，结果当然是成功打印啦)。
    -- hostrule.nse
    description = [[hostrule test]]
    ---    --@usage
    -- nmap -O --script hostrule  
    -- @output
    -- Host script results:
    -- |     hostrule:
    -- |
    -- |     name: Microsoft Windows 7 or 8.1 R1
    -- |     classes:
    -- |
    -- |         cpe:
    -- |           cpe:/o:microsoft:windows_7
    -- |         osgen: 7
    -- |         vendor: Microsoft
    -- |         osfamily: Windows
    -- |         type: general purpose
    -- |
    -- |         cpe:
    -- |           cpe:/o:microsoft:windows_8.1:r1
    -- |         osgen: 8.1
    -- |         vendor: Microsoft
    -- |         osfamily: Windows
    -- |_        type: general purpose
    -- Version 0.1
    -- Created 21/3/2018 - v0.1 - created by yumu 
    ---    
    author = "HongRi yumu"
    license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
    categories = {"default","safe"}
    hostrule = function(host,port)
       return true
    end 
    action = function(host, port)
        return host.os
    end
**Portrule**
**Portrule会在Namp执行端口扫描时触发脚本。**
举个栗子：新建portrule.nse文件，代码如下，然后我们扫描几个端口然后看看是否在扫描端口的时候打印出“Hongri Anquan
yumu”和host.ip。
    -- portrule.nse
    local stdnse = require "stdnse"
    local table = require "table"
    -- stdnse 标准输出库
    -- table table库
    description = [[portrule test]]
    ---    -- @usage
    -- nmap -p 80,443,3306 --script portrule -p 80 
    -- @output
    -- 80/tcp   open   http
    -- | portrule:
    -- |   127.0.0.1
    -- |_  From: Hongri Anquan yumu
    -- Version 0.1
    -- Created 21/3/2018 - v0.1 - created by yumu 
    ---    
    author = "HongRi yumu"
    license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
    categories = {"default","safe"}
    portrule = function(host,port)
       return port.protocol == "tcp" and port.state == "open"
    end
    --    -- 判断目标端口运行的协议是否为tcp协议并且端口是否开放状态
    -- 当返回true时，执行action函数，反之不执行
    --    
    function action(host,port)
        local table_input = {}