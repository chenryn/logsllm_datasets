### 了解NSE脚本的编写规则

#### Nmap的目录结构
理解Nmap的目录结构有助于我们确定Nse脚本的存放位置。以下是几个关键点：
- 编写的脚本文件扩展名为`.nse`。
- 脚本需存放在`scripts`文件夹内，以便Nmap能够识别并执行它们。
- 使用`--script`选项来调用Nse脚本。

#### NSE脚本的编写流程
在开始编写NSE脚本之前，我们需要熟悉其基本步骤。以下为四步简要说明：
1. **导入所需库**：引入脚本编写所需的库。
2. **编写描述信息**：提供关于脚本功能和使用方法的信息。
3. **定义Rule类型**：设定脚本何时被触发。
4. **编写Action**：定义当Rule条件满足时应执行的操作。

为了帮助大家更好地理解这一过程，下面将通过一个示例来展示这些步骤是如何具体实施的。

#### Rule的四种类型
Rule用于定义脚本何时会被触发，只有当Rule返回`true`时，对应的Action才会被执行。有四种主要类型的Rule：
- **Prerule**：在Nmap开始扫描前触发。
- **Hostrule**：在Nmap进行主机发现或探测时触发。
- **Portrule**：在Nmap进行端口扫描时触发。
- **Postrule**：在所有其他阶段之后触发。

##### 示例环境
- 操作系统：Windows
- 开发环境：phpStudy
- Nmap版本：7.6
- 目标应用：zzcms8.2 (对应域名zzcms.im)

###### 基础参数扩展
| 参数 | 类型 | 描述 |
| --- | --- | --- |
| `host.os` | string | 操作系统信息 |
| `host.ip` | string | 目标主机IP地址 |
| `host.name` | string | 在命令行中指定的目标主机名 |
| `host.targetname` | string | 同`host.name` |
| `host.directly_connected` | boolean | 判断目标主机是否与本地设备位于同一子网 |
| `host.mac_addr` | string | 目标主机MAC地址（仅对同一子网内的设备有效） |

| 端口相关参数 | 类型 | 描述 |
| --- | --- | --- |
| `port.number` | int | 端口号 |
| `port.protocol` | string | 协议类型 |
| `port.service` | string | 服务名称（如HTTP、HTTPS） |
| `port.version` | string | 版本信息 |
| `port.state` | string | 端口状态 |

##### Prerule 示例
创建一个名为`prerule.nse`的文件，并将其放置于`scripts`目录下。此脚本将在Nmap开始扫描之前输出一条消息以验证其触发时机。

```lua
description = [[Prerule test]]
-- @usage nmap --script prerule
-- @output RongRi AnQuan NSE script Prerule test
author = "HongRi yumu"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"default","safe"}

prerule = function(host, port)
   return true
end

action = function(host, port)
  return "RongRi AnQuan NSE script Prerule test"
end
```

如果在测试过程中遇到错误，可以通过启用调试模式（添加`-d`选项）来排查问题。例如，设置`-d 3`可以获取详细的调试信息。

##### Hostrule 示例
将之前的`prerule.nse`稍作修改，使其成为`hostrule.nse`，并在Nmap进行主机发现时打印操作系统信息。

```lua
description = [[Hostrule test]]
-- @usage nmap -O --script hostrule
-- @output Host script results: <OS details>
author = "HongRi yumu"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"default","safe"}

hostrule = function(host, port)
   return true
end

action = function(host, port)
  return host.os
end
```

##### Portrule 示例
最后，创建一个`portrule.nse`文件，在Nmap扫描指定端口时输出一些自定义信息及目标IP地址。

```lua
local stdnse = require "stdnse"
local table = require "table"

description = [[Portrule test]]
-- @usage nmap -p 80,443,3306 --script portrule
-- @output 80/tcp open http | portrule: 127.0.0.1 From: Hongri Anquan yumu
author = "HongRi yumu"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"default","safe"}

portrule = function(host, port)
   return port.protocol == "tcp" and port.state == "open"
end

action = function(host, port)
  local output = {}
  table.insert(output, host.ip)
  table.insert(output, "From: Hongri Anquan yumu")
  return stdnse.format_output(true, output)
end
```

通过以上示例，希望读者能对如何根据不同需求编写NSE脚本有一个更清晰的认识。