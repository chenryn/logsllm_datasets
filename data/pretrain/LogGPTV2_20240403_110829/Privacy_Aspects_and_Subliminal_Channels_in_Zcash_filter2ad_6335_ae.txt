be the set of functions ωkU indexed over the user keys kU in
Trace.
Then he executes
(0/1, M) ← SubliminalVerifier(R, σ , π ,(a1, ..., al), Ω, ξ , aux)
• If the recovered message M = (m1 || m2) (cid:44)⊥, the Subliminal
Verifier associates π to the user U such that, with ωkU ∈ Ω,
ωkU (aux, a1, ..., al) = M.
It is straightforward to see how this construction can be easily
generalized to allow different embedding techniques and other
malicious activities such as transaction data leaks and more.
8.6 Countermeasures
If ω and ξ have some cryptographic properties, even if their defini-
tions become public, in principle it should not be possible without
the auxiliary information aux to distinguish a random proof from
one with a subliminal message embedded. Therefore, as could be
the case for a lightweight wallet scenario, if a user delegates heavy
cryptographic computations to a third-party entity as a Prover,
he cannot know, looking at the generated proof π, if the Prover
embedded a subliminal message or not, no matter what subliminal
channel the Prover might have used.
To eliminate any potentially embedded subliminal message, the
user should further randomize Prover’s proof π = (A, B, C) using,
for example, one of the three proof transformations discussed at
the beginning of the Outer Subliminal Channel Section.
Unfortunately, the most expensive transformation
′ = A˜r
A
′ = B
B
1
˜r · (hδ) ˜s
˜r
′ = A˜s · C
C
is the only one that assures the user to fully disrupt all the (even-
tually) embedded b-bits. Clearly, the computation of this further
transformation should not be delegated to a third-party, since this
could, in turn, use the Outer Subliminal Channel to embed its own
subliminal message.
Alternatively, if two valid proofs π1 and π2 for the same state-
ment are available to the user, it is possible to combine them in a
new valid proof π in a way that would disrupt a subliminal message,
especially if π1 and π2 come from different third-party Provers.
Our construction requires, however, that the user chooses at
least one of the two randomness r , s that third-party Provers should
employ during the proof generation.
From this hypothesis, we therefore assume that the user pos-
sesses two proofs π1 = (A1, B1, C1) and π2 = (A2, B2, C2) for the
same statement (a1, ..., al) generated accordingly to the chosen
randomnesses s1 and s2, respectively.
Then, he computes a new proof π as
π = (A, B, C) =
B1 · B2,
A1 · A2,
(cid:112)
(cid:112)
(cid:32)(cid:112)
(cid:19) s1−s2
4
(cid:33)
(cid:18) A1
A2
C1 · C2 ·
To see that π is still valid, we explicitly write the computations,
as reported in Groth’s original scheme, that generate the group
elements of both proofs π1 and π2:
ˆC = д
A1 = дα +m
A2 = дα +m
ˆB1 = дβ +m
ˆB2 = дβ +m
A = дα +m
ˆB = дβ +m
B1 = hβ +m
B2 = hβ +m
δ
i =0 aivi(x)+s1δ
i =0 aivi(x)+s2δ
i =0 aiui(x)+r1δ
i =0 aiui(x)+r2δ
m
i =l +1 ai (βui (x)+α vi (x)+wi (x))+h(x)t(x)
1 · д
1 · ˆB
2 · д
2 · ˆB
B = hβ +m
(cid:18) A1
(cid:19) s1−s2
C1 = ˆC · A
s1
C2 = ˆC · A
s2
r1
r2
δ
4
i =0 aivi(x)+ s1 +s2
2
δ
i =0 aiui(x)+ r1 +r2
2
A, B, C of π are
i =0 aivi(x)+s1δ
i =0 aivi(x)+s2δ
−r1s1δ
−r2s2δ
Hence, using the above formula, the resulting group elements
i =0 aivi(x)+ s1 +s2
2
(r1−r2)(s1−s2)
4
= д
δ
δ
(r1−r2)(s1−s2)
4
δ
C = ˆC · A
= ˆC · A
s1 +s2
2
s1 +s2
2
· ˆB
· ˆB
r1 +r2
2
r1 +r2
2
· д
· д
A2
− r1s1 +r2s2
2
− r1 +r2
2
δ · д
δ
· s1 +s2
2
If we look closely, we notice that π is a proof for statement(a1, ..., al)
whose elements A, B, C are generated using randomnesses s = s1+s2
2
and r = r1+r2
2
and hence it is valid by construction.
If, on the contrary, π is not accepted as valid but both π1 and
π2 are, it means that at least one between the randomnesses s1
and s2 is not the one that was effectively used during the proofs
generation: the user can easily spot (in a non lightweight setting)
which Prover cheated, recomputing the group elements B1 and B2
from the Common Reference String and checking which of these is
not equal to the one provided in the proofs π1 and π2.
All these considerations imply that, even in a lightweight sce-
nario, a suspicious user has to perform some extra elliptic curve
arithmetic on its own device to prevent embedding of subliminal
messages.
At the same time, to permit users to not blindly trust third-
party Provers, the implementation of a delegated proof generation
mechanism should either admit further randomization of proofs, or
take into consideration the combination of multiple proofs at the
cost of extra |p|−bits of information exchanged between delegated
Provers and the user.
Other than this, Trusted Execution Environments, like SGX,
could help light clients to mitigate trust issues in proof delegation.
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1823A systematic adoption of countermeasures to avoid embedding
of subliminal messages is essential and not limited only to the
prevention of the malicious activities we have seen so far. Unfortu-
nately, subliminal channels pose a potential issue related to Zcash
fungibility: if miners are incentivized by some entity to mine first
transactions with a particular subliminal message embedded and
this fact, in turn, encourage users to consciously embed such mes-
sage to obtain a quicker transaction approval, then this gives rise
to a certain disparity between Zcash coins (more precisely, transac-
tions). Moreover, in this hypothetical scenario, users that refuse to
embed a subliminal message in their transactions, should pay an
higher fee to get the same level of priority, a win-win situation for
miners.
9 THE PEDERSEN SUBLIMINAL CHANNEL
In the Pedersen Commitment scheme, given a cyclic group G of
order p and two random generators д, h of G for which the discrete
logarithm logд(h) is unknown, c is said to be a commitment of
v ∈ Zp for a randomly chosen randomness r ∈ Zp, if c = дvhr .
One of the main reason why the Pedersen Commitment is em-
ployed is because it is additively homomorphic, that is, given any
two commitments c1 = дv1hr1 and c2 = дv2hr2 for values v1 and
v2, respectively, their product c = c1c2 = дv1+v2hr1+r2 is a commit-
ment to the sum v1 + v2 with randomness r1 + r2.
The Pedersen Commitment homomorphic property combined
with the adoption of a binding signature, that binds the note com-
mitment values to the total balancing value, permits the signer to
convince everyone that he is able to open the commitment

i vi, I N −
c = д
j vj,OU T h

i ri, I N −
j rj,OU T
given by the product of all input committed values дvi, I N hri, I N
divided by the product of all shielded output committed values
дvj,OU T hrj,OU T , without revealing any of the vi,I N , vj,OU T . Since,
in turn, c is a commitment to the resulting transparent value change,
this scheme assures at the same time both confidentially and coher-
ence of a shielded transaction.
Note that the randomness makes any commitment for a value v
indistinguishable from a random element in G: this remark suggests
that a Subliminal Signer, or an attacker that controls the Signer
randomness source, using similar techniques we have seen in pre-
vious Sections, could embed a b-bits subliminal message in any
commitments, carefully choosing the randomnesses until the result-
ing committed value satisfies some desired properties related to the
message he wishes to embed. We will refer to this new subliminal
channel to as “Pedersen Subliminal Channel”.
Other than that, if the Signer randomness source is under control
of a malicious party (i.e. it runs a malicious version of the software),
with the knowledge of r, a Subliminal Verifier could partially open a
commitment c of v to дv = ch−r : in Zcash Sapling, v is the number
of Zatoshi corresponding to the current shielded note, that is an
integer in the interval [0, 2.1 · 1015].
Since in our scenario v ranges in this bounded interval and in
practice most transaction have note values that lies in the first part
of such interval, with the partially opened committment дv the
Subliminal Verifier could easily mount a rainbow table attack [18].
Just to give an example, suppose he disposes of 4TB ≈ 8·(4·1012)
bits of storage memory. Since the Jubjub curve has a base field of
381-bits, he can store ≈ 236 compressed elliptic curve points. Thus,
he computes (eventually in parallel) and stores all the elements
дv for v ∈ [0, 236], that is, note values up to ≈ 840 · 108 Zatoshi.
Then, with this table and for note values lower than this bound, it
is straightforward for him to find the discrete logarithm of дv, thus
revealing the shielded value. Optimizations of such rainbow table
are clear and not of interest in this paper.
It remains to find a way for the attacker to make the Subliminal
Verifier aware that a transaction is weak, in the sense that the ran-
domness used during commitment generation is deterministic for
both attacker and Verifier if some auxiliary information is known:
note that, in fact, in our adversary assumptions the attacker (i.e. the
malicious commitment mechanism) could not directly communicate
with the external world once the target is attacked.
To get through this, the attacker could embed in some elements
of the transaction a marker subliminal message, easily recogniz-
able only if some auxiliary information is known, that makes the
Subliminal Verifier aware that the current transaction is weak.
At first glance this seems a stronger assumption about our at-
tacker: he has to control both the randomness source in the com-
mitment scheme and the proof generation process if he wishes to
use, for example, one among the Inner Subliminal Channel or the
Outer one, to embed a subliminal message.
Actually, this extra requirement is not necessary: since all shielded
input/output values are committed and the output values minus
the input values has to be equal to the public balancing value, only
controlling the randomness source of the commitment scheme, the
attacker could embed in only one commitment a marker subliminal
message using the Pedersen Subliminal Channel, hence permitting
the Subliminal Verifier to become aware that the trasaction is weak
and that he can proceed to the full de-committment of the shielded
values; the value of the commitment that embeds the marker mes-
sage can be easily computed from the balancing value, once all
the others commitments are successfully de-comitted using the
rainbow table attack.
10 IMPLEMENTATION RESULTS
We implemented the Inner Subliminal Channel and the Pedersen
Subliminal Channel in the current Zcash official wallet (v. 2.0.5-2)
and we successfully embedded 9 bytes in a fully shielded transaction
with 1 shielded input and 2 shielded outputs (a typical payment
transaction), i.e. 2 bytes in each proof and 1 byte in each com-
mitted value.8 The proof generation time is proportional to the
number of inputs, since each proof is generated independently. We
ran our implementation on a standard Intel(R) Core(TM) i7-3770
CPU 3.40GHz desktop provided with 8.00GB of RAM and running
Ubuntu 16.4 x64.
The proof generation time took on average 3.0087s, compared to
the average time of 2.8412s needed for a random proof generation.
This is just a 6% increase in proof time, barely noticeable even on
8As an example, we used our implementation to generate the following transaction
20ffc99e4e590688b465773ab7034d0055ef7d849d21320c10671253ed0db49c which can
be found on Zcash testnet with a confirmed status. All proof elements A and B and
values commitment have their last byte set to 0x00. The relevant transaction data can
be found in Appendix D.
Session 8C: Blockchain VICCS ’19, November 11–15, 2019, London, United Kingdom1824closely monitored systems and totally undetectable when using
hardware wallets.
Considering that we did not implement any algorithmic opti-
mization, this shows that subliminal channels are a very powerful
and effective mean for tagging transactions and it would be pru-
dent from the user’s perspective to implement countermeasures
described in Sect. 8.6 (for example when using hardware wallets).
11 CONCLUSION
In this paper we have studied two different approaches to transac-
tion tagging and linking in privacy-oriented cryptocurrency Zcash.
The first approach is based on analysis of public blockchain data.
It explores interplay of transparent and hidden transactions, and
shows two new active attacks on user privacy: Danaan-gifts and
Dust attacks. The second approach is based on discovery of sublim-
inal channels in cryptographic primitives used for hidden transac-
tions. These channels can allow malicious prover to embed tagging
information about the user into each transaction, thus invalidat-
ing the purpose of the zk-SNARK information hiding. Finally we
discuss countermeasures against these attacks.
REFERENCES
[1] 2013. Dash. https://www.dash.org/