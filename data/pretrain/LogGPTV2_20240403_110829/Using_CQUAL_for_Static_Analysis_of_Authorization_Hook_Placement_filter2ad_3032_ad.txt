### 4. Identifying and Managing "Safe" Functions

Manually identifying "safe" functions can be a tedious process, but two factors make it more manageable. First, there are relatively few such functions, even though they account for a significant portion of type errors (as shown in Table 2). Second, these functions tend to remain stable across different kernel releases. This stability means that once the "safe" functions are identified, the results can be reused in future kernel releases, with only minor verification needed to ensure that the functions have not changed in ways that affect their intended functionality.

#### Table 2: Error Reduction After Eliminating "Safe" Functions

| Subsystems          | Path Type Errors | Source Type Errors |
|---------------------|------------------|--------------------|
| **File System**     |                  |                    |
| With "Safe" Functions | 73               | 57                 |
| Without "Safe" Functions | 18              | 17                 |
| % Reduction         | 75%              | 70%                |
| **Memory Management** |                |                    |
| With "Safe" Functions | 37               | 31                 |
| Without "Safe" Functions | 14             | 13                 |
| % Reduction         | 62%              | 58%                |
| **Networking**      |                  |                    |
| With "Safe" Functions | 73               | 55                 |
| Without "Safe" Functions | 2              | 2                  |
| % Reduction         | 97%              | 96%                |
| **IPC**             |                  |                    |
| With "Safe" Functions | 49               | 0                  |
| Without "Safe" Functions | 2              | 0                  |
| % Reduction         | 96%              | 0%                 |

Removing "safe" functions reduces the number of type errors by approximately 75% for both path and source type errors. While this is a significant improvement, other methods for reducing false positives are being explored. For example, there may be additional "safe" functions that have not yet been identified. Additionally, there are cases where a variable is assigned from another checked variable, such as in the file system where `dentry` is authorized and `inode` is assigned from `dentry->d_inode`. Unfortunately, CQUAL currently cannot reason that a field extracted from a checked structure is also checked (see Section 5.2). Finally, we have not fully examined kernel-initiated paths that lead to type errors.

### 5. Discussion

#### 5.1 Effectiveness of Our Approach

Despite the extensive nature of static analysis, we were somewhat surprised to find only a few exploitable CQUAL type errors in our analysis. Some of the analyses are relatively new, so more errors may be discovered over time, but the current findings are still surprising.

One of the exploits we did find, a Category 1 TOCTTOU (Time of Check to Time of Use) exploit, is particularly noteworthy. This type of exploit is difficult to detect through runtime analysis because the association between the file descriptor and the file typically does not change, making it hard to uncover with benign program benchmarks. Static analysis, however, clearly revealed the inconsistency.

Another aspect of our approach's effectiveness is its ease of use, as most of the analysis process is automated. It is straightforward to apply the process to a modified kernel or new kernel releases. We tested this by running the tool against Linux version 2.4.18. After downloading the kernel source tree and making a few small changes to the Makefile and two source files (see Section 3.2.1), the rest of the process requires minimal manual effort, except for identifying false positives.

The time required to complete the process is reasonable. Most of the time is spent on kernel builds, as our modified version of GCC collects information on controlled types while compiling the source code. Here are the times for the major steps:

- Three clean kernel builds using our extended GCC: ~30 minutes
- Annotation of the source by Perl scripts: ~1 minute
- CQUAL analysis: ~10 minutes

With an optimized process, the total analysis time could be reduced to 15 minutes or less, making these tools useful for kernel programmers.

#### 5.2 Possible CQUAL Extension

A potential extension to CQUAL would enable us to correctly verify mediation between controlled operations and all security-sensitive operations. The CQUAL team is working on both an interim solution and a general solution [8]. The problem is described below.

Currently, CQUAL treats structures as a collection of fields, with no relationship between a structure and its member fields. For example, in the code below, `var->bar` would not be type-checked even though `var` is. Since structures are extensively used in the kernel, supporting user-defined rules for inferring the types of member fields from the types of structures would greatly enhance the tool.

```c
struct foo {
    int bar;
};
$checked struct foo *var;
```

For instance, in Section 3.2.5, we would want the `inode` extracted from a checked `dentry` to be checked as well. If a `dentry` is unchecked, the `inode` of the `dentry` should also be implicitly unchecked.

Additionally, the current version of CQUAL assigns the same qualifier type to all instances of a structure type. For example, if `bar` is qualified as a checked type, all instances of `foo` would have a checked field for `bar`. We want to assign qualifier types to members on a per-instance basis.

To verify that controlled operations mediate security-sensitive operations, we need any structure field accessed through a checked type to be checked as well. This would allow us to propagate authorizations through the structure completely, enabling us to find any members of a security-sensitive data type that are not accessed through a controlled data type. Note that this approach is not always applicable, depending on the semantics of the qualifications. It would not be appropriate for the type of qualifiers used by Wagner et al. [14].

### 6. Related Work

We are not aware of any other research on static verification of LSM. However, several static analysis tools have been successfully applied to the security domain. We compare some of these works to ours.

- **Wagner et al. [14]**: Used CQUAL to identify format string vulnerabilities. Their work motivated us to apply CQUAL to the more complex problem of LSM verification. The main difference in our usage of CQUAL is the annotation process. In their work, the target code for annotations is well-defined and has a limited number of occurrences, so the annotations are done manually. In our case, the scope of annotated code is much larger, and we use GCC to automatically detect the code to be annotated.
  
- **Engler et al. [7, 1]**: Developed an extension of GCC called xgcc for source analyses, referred to as meta-compilation. A rule language, called metal, is used to express the necessary analysis annotations in a higher-level language. While xgcc could be used for our static analysis, it is not currently available for evaluation. A key difference is that metal rule expressions would need to reference GCC AST structures rather than the source directly.

- **Larochelle et al. [11]**: Enhanced their LCLint tool to detect likely buffer overflows in C programs. LCLint bases static analysis on annotations that restrict the range of values a reference can have. The strength of LCLint is its flow-sensitivity, which makes it more accurate. However, LCLint is inflexible and customized for predefined software bugs. Extending LCLint for LSM verification would require significant effort. CQUAL, on the other hand, is more extensible through user-defined type qualifier lattices.

- **Necula et al. [12]**: Defined the CCured type system, which leverages the fact that most C source is written in a type-safe manner to perform various static checks during compilation. CCured introduces runtime checks for errors that cannot be detected statically. While we agree with this approach, CCured currently does not include authorization hook placement in the types of errors it can find.

- **Koved et al. [10]**: Presented a technique for computing access rights requirements of Java applications using context-sensitive interprocedural data flow analysis. Although their analysis is performed on Java code, similar techniques could be applied to our problem domain.

### 7. Conclusion

This paper presents a novel approach to verifying LSM authorization hook placement using CQUAL, a type-based static analysis tool. With a simple CQUAL lattice configuration and some basic GCC analysis, we were able to verify complete mediation of operations on key kernel data structures. Our results revealed potential security vulnerabilities in the current LSM framework, one of which was demonstrated to be exploitable. We further showed that given authorization requirements, CQUAL can be used to verify complete authorization. Our results demonstrate that combinations of conceptually simple tools can be powerful enough to carry out complex analyses.

Our main challenge is the elimination of false positives. Static analysis generally errs on the conservative side, leading to a large number of type errors initially. However, we have identified techniques for secondary analyses that can eliminate many of these false positives. Extensions to CQUAL are necessary to eliminate some types of false positives, and this is ongoing work.

### 8. Acknowledgments

We would like to thank Jeff Foster from UC Berkeley for his timely responses to our numerous questions on CQUAL and for his suggestions and advice on the early draft of this paper. We also thank the anonymous reviewers for their valuable comments.

### References

[1] K. Ashcraft and D. Engler. Using programmer-written compiler extensions to catch security holes. In Proceedings of the IEEE Symposium on Security and Privacy 2002, May 2002.

[2] M. Bishop and M. Dilger. Checking for race conditions in file accesses. Computing Systems, 9(2):131–152, 1996.

[3] LSM Community. Linux Security Module. Available at http://lsm.immunix.org.

[4] Wirex Corp. Immunix security technology. Available at http://www.immunix.com/Immunix/index.html.

[5] A. Edwards. [PATCH] add lock hook to prevent race, January 2002. Linux Security Modules mailing list at http://mail.wirex.com/pipermail/linux-security-module/2002-January/002570.html.

[6] A. Edwards, T. Jaeger, and X. Zhang. Verifying authorization hook placement for the Linux Security Modules framework. Technical Report 22254, IBM, December 2001.

[7] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking system rules using system-specific, programmer-written compiler extensions. In Proceedings of the Fourth Symposium on Operation System Design and Implementation (OSDI), October 2000.

[8] J. Foster. Personal communication, January 2002.

[9] J. Foster, M. Fahndrich, and A. Aiken. A theory of type qualifiers. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '99), pages 192–203, May 1999.

[10] L. Koved, M. Pistoia, and A. Kershenbaum. Access rights analysis for Java. In Proceedings of the 17th Annual ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA 2002), November 2002. Accepted for publication.

[11] D. Larochelle and D. Evans. Statically detecting likely buffer overflow vulnerabilities. In Proceedings of the Tenth USENIX Security Symposium, pages 177–190, 2001.

[12] G. C. Necula, S. McPeak, and W. Weimer. CCured: Type-safe retrofitting of legacy code. In Proceedings of the 29th ACM Symposium on Principles of Programming Languages (POPL02), January 2002.

[13] NSA. Security-Enhanced Linux (SELinux). Available at http://www.nsa.gov/selinux.

[14] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detecting format string vulnerabilities with type qualifiers. In Proceedings of the Tenth USENIX Security Symposium, pages 201–216, 2001.

### Appendix: List of "Safe" Functions

#### File System

- `put_super`
- `kill_super`
- `clean_inode`
- `iput`
- `file_operations.poll`
- `super_operations.write_super`
- `super_operations.read_inode`
- `super_operations.read_inode2`
- `super_operations.put_inode`
- `super_operations.clear_inode`
- `super_operations.put_super`
- `block_device_operations.release`
- `file_operations.release`
- `shmem_recalc_inode`
- `shmem_get_inode`
- `oom_kill_task`
- `skb_unlink`
- `skb_insert`
- `skb_reserve`

#### Memory Management

- (No specific functions listed)

#### Networking

- (No specific functions listed)

#### IPC

- (No specific functions listed)

#### Source Files

- `fs/super.c`
- `fs/inode.c`
- `include/linux/fs.h`
- `mm/shmem.c`
- `mm/oom_kill.c`
- `include/linux/skbuff.h`