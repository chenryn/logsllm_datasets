Z (2) and abort if the output is False.
Output: P1, P2, and P3 output replicated sharing [X (3)].
Figure 10: A protocol for securely permuting the replicated
sharing of an array.
Theorem 4.2. The protocol ΠShuffle for shuffling the shares obliv-
iously (Figure 10) securely realizes the ideal functionality FShuffle
(Figure 9) with abort, under a single malicious corruption.
Proof. The proof is omitted here and will appear in the full
version of the paper.
5 COMPUTING ON INTERSECTING INDICES
The approach in Section 4.2 fails when the indices are needed
to compute the function f . An attack is possible due to the fact
the F(k, ·) values are computed locally and are not bound to the
input x. For example, a malicious P1 can supply an incorrect triple
([x]A,[d]A, F(k, x′)), causing trouble if x′ is in the intersection and
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2410x is not, or vice versa. We propose two different protocols to perform
f(PSI) on indices. In both, we make use of a shared oblivious PRF
(soPRF). This is a pseudorandom function that allows for distributed
evaluation: the parties, holding secret shares of the PRF key, and
secret shares of the input value, can compute the output of the PRF.
In our first construction, in Figure 11, we use a 3-party soPRF
(3soPRF), but we do so in a non-black box way. That is, the code
of the 3soPRF is embedded inside a larger circuit, and the whole
circuit is evaluated securely in an MPC. In our experiments, we
instantiated the 3soPRF using both AES, and the Naor-Reingold
PRF [31] and found the construction from AES to be more efficent.
In our second protocol (Figure 12), we make black-box use of a
2-party shared oblivious PRF (2soPRF). We instantiated this using
the 2soPRF designed by Gordon et al. [18], which is a shared variant
of the Naor-Reingold PRF. This construction also failed to beat the
non-black box use of AES, but we are hopeful that a more efficient
2soPRF might be found to replace this one, making the construction
in Figure 12 more efficient than the one in Figure 11. It is worth
noting that highly efficient primitives related to oblivious PRFs have
recently been constructed from OT-extension and used in other PSI
protocols [28], so something similar here is quite plausible, though
still unknown.
The difference between protocols that compute a function on
intersection payloads and on intersection indices is how the en-
coded indices are computed. In Figure 11, this is done by a secure
evaluation of a 3soPRF, however, in Figure 12, it is handled differ-
ently. First, P1 and P2 commit their inputs (indices and payloads)
by secret-sharing them as replicated shares. For each index x ∈ X,
P1 computes F(k, x), secret-sharing it, opening it to P3. For the
same input, P2 and P3 compute 2soPRF by using the shared key and
shared data. If all parties follow the protocol honestly, P3 will re-
ceive the same values. If P1 cheats by sending F(k, x′) or P2 cheats
by providing the wrong share for the 2soPRF, P3 will catch them
with high probability. If P3 is malicious, the only thing he can do
is to claim that he receives different encodings, causing all parties
to abort. The same thing happens when the three parties compute
the encoded indices for P2’s inputs. This procedure enforces the
binding between [x] and [F(k, x)] in Figure 12 . The simulation and
security proof for f (PSI) on intersection indices are very similar
to that of protocols in Figure 8, thus we do not list them here.
The protocols in Figures 11 and 12 have linear computational
complexity and linear communication cost. They are asymptoti-
cally better than the merge-compare-shuffle approach [22] that
requires O(n log n) runtime and O(n log n) bandwidth. In concrete
numbers, the AES circuit has 6800 AND gates, thus 2 × 6800 × N
AND gates in total, while the merge-compare-shuffle circuit has
at least 4σ N log(2N) AND gates, where σ is the total length of the
index and the payload in bits, and N is the number of inputs. For
N = 220, the AES circuit will have less AND gates if σ ≥ 162. When
compared with the protocol for computing only on payloads in
Section 4.2, computing on indices is about 5-10X slower in a LAN,
and 11-35X slower in a WAN. We also note that our circuit has a
constant number of rounds, while the merge-compare-shuffle has
O(σ log n) rounds.
Size hiding PSI cardinality: The protocols in Figure 11 can be
modified slightly to give a PSI cardinality protocol that gives output
only to P1 and P2. The intuition is: the PRF key is unknown to
anyone, thus after computing the 3soPRF and shuffling the output
shares, the PRF values can be safely revealed to P1 and P2, instead of
P3. However, this requires some extra steps to ensure that P1 and P2
provide valid inputs, i.e. all items in their set are unique. Otherwise,
a malicious party can include item x in his set twice: if x is not in the
other party’s set, the protocol will compute f (PSI∪{x}). Otherwise,
the honest party will see 3 copies of F(k, x) in the encoded set and
will abort. In both cases, the adversary learns whether x is in the
intersection.
To prevent this, P1 and P2 sort their input locally and secret-
share them as replicated arithmetic shares. They run a 3PC share
conversion circuit to convert the shares to replicated Boolean shares.
Now for each set of input, the parties run 3PC comparison circuit to
verify that they are both in increasing order. After the verification,
the parties execute the remainder of the protocol, using the same
arithmetic shares to ensure input consistency.
It is tempting to try and compute f (PSI) while hiding the size of
the intersection from P3 in a similar manner. However, if we wish
to involve P3 in the 3-party computation of f (Z1), we need to reveal
the intersection size when we choose the circuit representing f .
Without leaking the size of the intersection, P1 and P2 can evaluate
multiple circuits with P3, each with a different size, but, depending
on f , this might require them to execute n circuits. One interesting
direction to explore in future work is the possibility of leaking a
noisy intersection size to P3, preserving differential privacy.
6 EXPERIMENTS AND RESULTS
We implemented all protocols in C/C++ with the use of NTL and
EMP library and tested them with AWS instances (r4.8xlarge). For
the LAN configuration, all the instances are in Northern Virginia
region. For the WAN configuration, we used the instances in North-
ern Virginia, Oregon, and North California. In all protocols, the field
has to be large enough so that the PRP encodings have negligible
collision probability. Let 2−λ be the desired probability for collision
to happen, and let n be the input size. Then the field size needs to
be at least λ + 2 log 2n − 1 = λ + 2 log n + 1 bits.
We focus primarily on f(PSI) and PSI cardinality protocols in
the three-party setting with honest majority. Kamara et al. [26]
computes PSI in this setting, but there is no related work that
computes f(PSI) or PSI cardinality in the 3-party setting. In order
to have a meaningful comparison, we implemented the generic
merge-compare-shuffle protocol using one of the most efficient
three-party protocols with honest majority [1], and compared our
f(PSI) results against this implementation. For the PSI cardinality
(PSI-CA), we compare our results against the merge-compare-add
version. For generic three party protocols, Araki et al. [1] achieves
the best communication cost with 7 bits per AND gate per party,
however, the number of rounds depends on the depth of the circuit.
We note here that the merge-compare-add may be slightly faster
if implemented with ABY3 [29]: instead of doing the addition by a
Boolean circuit (with O(n) AND gates and depth O(log2
n)), using
the ABY3 framework, we could convert the binary shares into arith-
metic shares after the comparison phase, and then perform addition
on the arithmetic shares for free. However, the dominant cost for
the merge-compare-add circuit is the merge step, which requires
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom2411Table 1: Runtime in seconds in LAN/WAN setting and communication cost in megabytes. The best results for f(PSI) are in
blue, those for PSI cardinality are in red, and those for both are in green. In our protocols, we consider the data with variable
bitlength. When bitlength (σ) is not specified, the protocols are independent of the bitlength.
0.89
11.8
-
-
-
0.63
1.33
1.65
0.04
0.04
0.04
0.04
0.04
0.20
0.21
0.20
0.22
0.20
0.04
0.03
0.03
0.03
0.02
0.58
n
PSI-CA
Cristefaro et al [8]
Davidson et al [11]
Circuit + 2D cuckoo hashing [33]
Iterative Separate PSI-CA (σ = 32)
Iterative Combine PSI-CA (σ = 32)
Circuit-based PSI-CA [32]
No-Stash PSI-CA
3PC Merge-Compare-Add [1]
σ = 32
σ = 64
σ = 80
(Our) Polynomial PSI-CA
|PSI| ≈ 0
|PSI| = 0.25n
|PSI| = 0.50n
|PSI| = 0.75n
|PSI| ≈ n
PSI-CA and f(PSI)
(Our) Circuit PSI-CA/f(PSI)
|PSI| ≈ 0
|PSI| = 0.25n
|PSI| = 0.50n
|PSI| = 0.75n
|PSI| ≈ n
(Our) Hybrid PSI-CA/f(PSI)
|PSI| ≈ 0
|PSI| = 0.25n
|PSI| = 0.50n
|PSI| = 0.75n
|PSI| ≈ n
(Our) f(PSI) on indices
f(PSI)
3PC Merge-Compare-Shuffle [1]
σ = 32
σ = 64
σ = 80
2PC Merge-Compare-Shuffle [22]
σ = 32
28
212
216
220
28
LAN
14.4
176
230
2837
2.43
2.22
11.3
9.08
3677
-
122
86.6
1.20
8.49
121
-
-
-
-
-
212
216
WAN
-
-
-
-
11.2
10.1
57.5
45.3
5.91
22.1
1.13
2.15
2.74
0.41
0.45
0.47
0.49
0.50
0.37
0.34
0.30
0.26
0.24
0.37
0.34
0.32
0.29
0.26
2.51
4.45
6.43
7.86
6.9
7.9
8.4
8.8
8.0
2.6
2.0
1.6
1.3
0.8
6.52
5.84
5.58
4.88
3.50
23
4.77
11.4
13.7
35.6
70.2
91.2
138
162
173
182
162
19.4
15.8
11.9
8.00
3.61
130
117
111
98.9
67.9
290