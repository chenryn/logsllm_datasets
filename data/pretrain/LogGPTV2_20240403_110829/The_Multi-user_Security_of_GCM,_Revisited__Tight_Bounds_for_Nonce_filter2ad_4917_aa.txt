# The Multi-user Security of GCM, Revisited: Tight Bounds for Nonce Randomization

**Authors:**
- Viet Tung Hoang
- Stefano Tessaro
- Aishwarya Thiruvengadam

A preliminary version of this paper appeared in the Proceedings of CCS 2018. This is the full version.

## Abstract

Multi-user (mu) security considers large-scale adversaries (e.g., state actors) that, given access to multiple sessions, attempt to compromise at least one. Mu security of authenticated encryption (AE) was explicitly considered in the development of TLS 1.3. This paper revisits the mu security of GCM, which remains the most widely used dedicated AE mode. We provide new concrete security bounds that improve upon previous work by adopting a refined parameterization of adversarial resources, highlighting the impact of (1) nonce re-use across users and (2) re-keying.

As a key application, we provide tight security bounds for the nonce-randomization mechanism adopted in the record protocol of TLS 1.3 as a mitigation against large-scale multi-user attacks. Our bounds offer the first validation of this method. Specifically, we address the main open question posed by Bellare and Tackmann (CRYPTO '16), who only considered restricted attackers that do not attempt to violate integrity and provided non-tight bounds.

**Author Affiliations:**
- **Viet Tung Hoang**: Department of Computer Science, Florida State University, Tallahassee, Florida 32304, USA. Email: tvhoang@cs.fsu.edu. URL: http://www.cs.fsu.edu/~tvhoang/. Supported in part by NSF grants CICI-1738912 and CRII-1755539.
- **Stefano Tessaro**: Department of Computer Science, University of California Santa Barbara, Santa Barbara, California 93106, USA. Email: tessaro@cs.ucsb.edu. URL: http://www.cs.ucsb.edu/~tessaro/. Supported in part by NSF grants CNS-1553758 (CAREER), CNS-1423566, CNS-1719146, CNS-1528178, and IIS-1528041, and by a Sloan Research Fellowship.
- **Aishwarya Thiruvengadam**: Department of Computer Science, University of California Santa Barbara, Santa Barbara, California 93106, USA. Email: aish@cs.ucsb.edu. Supported in part by the Defense Advanced Research Projects Agency (DARPA) and Army Research Office (ARO) under Contract No. W911NF-15-C-0236, and a subcontract No. 2017-002 through Galois.

## Contents
1. Introduction
   1.1 Mu Security and Nonce Randomization
   1.2 Our Results
2. Preliminaries
   2.1 Authenticated Encryption
   2.2 The H-coefficient Technique
3. Multi-security of GCM
   3.1 The CAU Scheme
   3.2 Security of CAU
4. RGCM and the XOR Transform
5. The Concatenation Transform
6. Security with Public Salting
7. References

## 1. Introduction

Authenticated Encryption (AE) is a symmetric encryption scheme that protects both confidentiality and integrity. It is widely used in secure communication protocols such as TLS, IPSec, SSH, WPA-2, SRTP, etc.

In the context of widespread adoption, an emerging concern is the threat posed by large-scale adversaries, such as state actors, who can launch coordinated attacks against a large number \( u \) of sessions (e.g., \( u = 2^{20} \) or \( 2^{30} \)), all using the same cryptographic algorithms with independent keys. The setting of multi-user (mu) security, introduced by Biham [6] in symmetric cryptanalysis and by Bellare, Boldyreva, and Micali [3] in public-key cryptography, deals with such attacks. Specifically, it considers attackers who succeed if they can compromise at least one out of \( u \) sessions (referred to as "users"). Estimating how security degrades as \( u \) grows is a challenging technical problem that affects real-world applications. For example, mitigating mu attacks influenced design choices in the record protocol of TLS 1.3 [20, Appendix E.2], although these choices were adopted without full validation.

### Overview

This paper revisits AE, focusing on the widely adopted Galois Counter-Mode (GCM) scheme [17], in the mu setting. We prove new tight bounds for GCM that improve upon existing ones [5, 13] by considering a fine-grained setting that assumes both (1) a bound \( d \) on the number of users re-using any particular nonce, and (2) a bound \( B \) on the amount of data encrypted by each user.

This allows us to analyze deployment practices for GCM that positively impact mu security. We show that frequent re-keying improves AE mu security. Additionally, we examine how mu security is affected by policies for choosing nonces, such as combining secret pseudorandom values and counters, a technique referred to as nonce randomization. We provide precise tight bounds showing that nonce randomization increases the mu security of AE and apply this insight to GCM-based AE, confirming an intuition initially put forward in the design of TLS 1.3. We also show that nonce selection strategies already in place in TLS 1.2 effectively improve mu security.

Prior to this work, Bellare and Tackmann (BT) [5] were the only ones to rigorously study the specific GCM-based approach adopted by TLS 1.3. However, their analysis is non-tight and only considers adversaries attempting to break confidentiality. Here, we complete the picture with tight bounds and full AE security, resolving their main open question.

### 1.1 Mu Security and Nonce Randomization

We follow the conventional AEAD interface, which allows us to (deterministically) encrypt a plaintext \( M \) with a nonce \( N \) and associated data \( A \) as a ciphertext \( E_K(N, A, M) \). Security holds as long as no two pairs \((M, A)\) are encrypted with the same \( N \). (We will not discuss nonce-misuse resistance [21] in this paper.)

#### The mu security of AE

One question is what is the best we can expect from an AE scheme in terms of its mu security. To this end, BT adapt a well-known generic key-recovery attack by Biham [6] to AEAD. First, fix \( N^* \), \( A^* \), and \( M^* \), and obtain their encryption with respect to \( u \) different users, yielding ciphertexts:
\[ C_i = E_{K_i}(N^*, A^*, M^*) \quad \text{for} \quad i = 1, \ldots, u, \]
where \( K_i \) is the key of the \( i \)-th user. The attacker's goal is to recover at least one of the \( K_i \)'s. To do so, it makes \( p \) key-guesses \( K \) (e.g., random ones), and for each guess, computes \( C = E_K(N^*, A^*, M^*) \). If \( C = C_i \) for some \( i \), then \( K = K_i \). The probability that this attack succeeds is roughly \( u \cdot p / 2^k \), where \( k \) is the key length (e.g., \( k = 128 \) in GCM based on 128-bit AES). Therefore, the effort to succeed is only \( p \approx 2^{k - \log(u)} \).

#### Nonce randomization

The above generic attack is not always as threatening in practice, as in-place policies for choosing nonces limit its impact. Typically, an AE scheme would be invoked with a nonce \( N \) that combines a (usually public) part like a counter, sent along with the ciphertext, and an implicit part, often secret and known by the endpoints (generated as part of a prior handshake). McGrew [15] provides an overview of such methods in an Internet Draft, and we refer to them as "nonce randomization" techniques.

For example, RFC 5288 [22], which describes the GCM ciphersuites for TLS 1.2, mandates nonces whose implicit part is a session-dependent (pseudo)random salt generated during the handshake. Thus, with \( u \) users, each nonce is reused by (on average) \( u / 2^{32} \) users, and in the above attack, each ciphertext \( C \) can be checked against at most \( u / 2^{32} \) ciphertexts (rather than \( u \)), reducing the success probability to roughly \( u \cdot p / 2^{160} \) for a 128-bit key.

An even more effective approach (at least with respect to preventing the above attack) is the use of "unpredictable nonces," as adopted by TLS 1.3 [20] and previously used within the SRTP protocol [1]. Here, a secret random offset mask \( J \) is chosen, and whenever we need to encrypt a message with nonce \( N \), it is encrypted with nonce \( N \oplus J \) instead. BT [5] analyzed this method in the specific case of GCM used by TLS 1.3, casting it as a standalone AE scheme called RGCM. However, their analysis is non-tight and only confirms better-than-average passive (i.e., IND-CPA) security. We stress that integrity is even more fundamental in the mu setting â€“ indeed, while a single session can abort after a failed verification attempt, mu attackers can spread forgery attempts across different users, making uncoordinated attack detection much harder.

We note that, with the exception of the standardization of TLS 1.3 [20, Appendix E.2], the treatment of mu attacks has not been explicitly mentioned as a motivation, even though some of the published motivating work [16] considered key-collision attacks arising from two users having the same key, which are special cases of mu attacks.

### 1.2 Our Results

In this paper, we complete the picture for the security of GCM in the multi-user setting with tight and more refined bounds. These will allow us to give precise bounds when nonce randomization policies are applied to GCM.

#### The d-bounded model and RGCM

We consider the mu version of AE security from [5], which requires indistinguishability from random ciphertexts in the presence of a verification oracle. Additionally, we adopt the model by Bose, Hoang, and Tessaro (BHT) [7], which we refer to as the d-bounded model: it postulates that each nonce can be reused by at most \( d \) users for encryption. More formally, the attacker gets to ask encryption queries of the form \((i, N, A, M)\), which produce an encryption \( E_{K_i}(N, A, M) \) under the key \( K_i \) of the \( i \)-th user. The constraints are that (1) for every \( i \), no two queries with the same \( N \) are asked, and (2) for every \( N \), there are at most \( d \) \( i \)'s for which a query \((i, N, A, M)\) is asked for some \( M, A \). However, its queries to the verification oracle are unrestricted, and take the form \((i, N, A, C)\) and return true if and only if \( C \) is a valid ciphertext under \( K_i \) for \( N \) and \( A \).

The goal is to give security bounds parameterized by \( d \). This model allows us to see a nonce-randomization policy as part of the adversary ensuring a certain \( d \) when picking nonces.

Although we rely on the model proposed by BHT [7], our security goal is different â€“ we consider only nonce-respecting and do not consider misuse-resistance. While there is some conceptual overlap due to the settings, apart from relying on some balls-and-bins lemmas from BHT, our proofs proceed differently.

#### GCM in the d-bounded model

Our main technical result is an analysis of CAU â€“ a generalization of GCM presented by BT â€“ in the d-bounded model, assuming the underlying block cipher is ideal. We show that for every adversary making \( q \) encryption/verification queries, \( p \) ideal-cipher queries, and encrypting/verifying overall \( \sigma \) blocks of data, the advantage of breaking CAUâ€™s AE security is of the order:
\[ \frac{d(p + q) + n(p + q + \sigma)}{2^k} + \frac{\sigma B}{2^n}, \]
where \( k \) and \( n \) are the block cipher key and block length, respectively, and \( B \) is a bound on the number of blocks encrypted per user. We stress that our bound does not depend on the number of users \( u \), which can be as high as \( q \).

In comparison, BT [5] show a bound for the case where \( d \) is unbounded (i.e., \( d = u \)) of the order:
\[ \frac{u(u + p)}{2^k} + \frac{u \sigma^2}{2^n}. \]
This bound was (somewhat implicitly) improved later by [13], essentially improving the second term to \( \frac{\sigma^2}{2^n} \).

#### Why this bound matters

Our bound is interesting for its parameterization:
- It shows that when \( d \) is small, the security increases substantially, enabling an analysis of nonce randomization techniques.
- Even for the \( u = d \) case, the parameterization with \( B \) shows important insights: if we have \( u \) users, all transmitting roughly the same amount of data \( B := \sigma / u \), the term becomes \( \frac{\sigma^2}{u^2 n} \), which is much better than \( \frac{\sigma^2}{2^n} \) as \( u \) grows.
- Users normally re-key, ensuring no session transmits too much data, and thus generally \( B \) can be fixed independently of \( \sigma \). The smaller \( B \) (i.e., we re-key more often), the better. For instance, if \( B = 2^{33} \), \( n = 128 \), then each user/session can encrypt up to \( 2^{40} \) bits = \( 2^{32} \) bytes = 4.3 GB, yet the term becomes \( \frac{\sigma}{2^{95}} \).

#### Nonce randomization methods: Generic transforms

We cast both nonce-randomization schemes discussed above as generic transformations building an AE scheme with longer keys from one with shorter ones. The first one implements unpredictable nonces, as in TLS 1.3 and SRTP, and we refer to it as XN. If the underlying scheme uses a key \( K \) of length \( k \) and nonce length \( r \), the resulting scheme uses a key \( K \parallel J \) of length \( k + r \). If we denote by \( E \) the encryption of the given AE scheme, the encryption \( E^* \) is such that:
\[ E^*(K \parallel J, N, A, M) = E(K, N \oplus J, A, M). \]
Note that XN still has \( r \)-bit nonces. For the specific case where \( E \) comes from GCM, BT refer to this construction as RGCM.

**Note:** We omit lower-order terms and small constant factors.