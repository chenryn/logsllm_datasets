title:The Multi-user Security of GCM, Revisited: Tight Bounds for Nonce
Randomization
author:Viet Tung Hoang and
Stefano Tessaro and
Aishwarya Thiruvengadam
A preliminary version of this paper appears in the Proceedings of CCS 2018. This is the full version.
The Multi-user Security of GCM, Revisited:
Tight Bounds for Nonce Randomization
Viet Tung Hoang1
Stefano Tessaro2
Aishwarya Thiruvengadam3
October 15, 2018
Abstract
Multi-user (mu) security considers large-scale attackers (e.g., state actors) that given ac-
cess to a number of sessions, attempt to compromise at least one of them. Mu security of
authenticated encryption (AE) was explicitly considered in the development of TLS 1.3.
This paper revisits the mu security of GCM, which remains to date the most widely used
dedicated AE mode. We provide new concrete security bounds which improve upon previous
work by adopting a reﬁned parameterization of adversarial resources that highlights the impact
on security of (1) nonce re-use across users and of (2) re-keying.
As one of the main applications, we give tight security bounds for the nonce-randomization
mechanism adopted in the record protocol of TLS 1.3 as a mitigation of large-scale multi-user
attacks. We provide tight security bounds that yield the ﬁrst validation of this method.
In
particular, we solve the main open question of Bellare and Tackmann (CRYPTO ’16), who
only considered restricted attackers which do not attempt to violate integrity, and only gave
non-tight bounds.
1 Department of Computer Science, Florida State University, Tallahassee, Florida 32304, USA. Email:
tvhoang@cs.fsu.edu. URL: http://www.cs.fsu.edu/~tvhoang/. Supported in part by NSF grants CICI-1738912
and CRII-1755539.
2 Department of Computer Science, University of California Santa Barbara, Santa Barbara, California 93106,
USA. Email: tessaro@cs.ucsb.edu. URL: http://www.cs.ucsb.edu/~tessaro/. Supported in part by NSF grants
CNS-1553758 (CAREER), CNS-1423566, CNS-1719146, CNS-1528178, and IIS-1528041, and by a Sloan Research
Fellowship.
3 Department of Computer Science, University of California Santa Barbara, Santa Barbara, California 93106,
USA. Email: aish@cs.ucsb.edu. Supported in part by the Defense Advanced Research Projects Agency (DARPA)
and Army Research Oﬃce (ARO) under Contract No. W911NF-15-C-0236, and a subcontract No. 2017-002 through
Galois.
1
Contents
1 Introduction
1.1 Mu Security and Nonce Randomization . . . . . . . . . . . . . . . . . . . . . . . . .
1.2 Our Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2 Preliminaries
2.1 Authenticated Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 The H-coeﬃcient Technique . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3 Multi-security of GCM
3.1 The CAU Scheme . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2 Security of CAU . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4 RGCM and the XOR transform
5 The Concatenation transform
6 Security with Public Salting
References
3
3
4
6
7
7
8
8
9
17
19
21
22
2
1
Introduction
Authenticated Encryption (AE) is symmetric encryption that protects both conﬁdentiality and
integrity, and is arguably the most widely used primitive in applied cryptography–in particular, it
protects data transmission in most in-use secure communication protocols like TLS, IPSec, SSH,
WPA-2, SRTP, etc.
We consider an emerging concern in the Internet-wide adoption of AE, namely large-scale adver-
saries, like state actors, which can launch coordinated attacks against a large number u of sessions
(e.g., u = 220 or 230), which all use the same cryptographic algorithms with independent keys.
The setting of multi-user (mu) security, introduced by Biham [6] in symmetric cryptanalysis and
by Bellare, Boldyreva, and Micali [3] in public-key cryptography, deals with such attacks. More
precisely, it considers attackers who succeed as long as they can compromise at least one out of u
sessions (referred to as “users”). As made evident in a series of recent works [23, 18, 2, 10, 11, 13, 7],
estimating how security degrades as u grows is a challenging technical problem that aﬀects the real
world: Indeed, the goal of mitigating mu attacks explicitly inﬂuenced design choices in the record
protocol of TLS 1.3 [20, Appendix E.2], which have however been adopted without full validation,
as we explain below.
Overview. This paper revisits AE, and more speciﬁcally the widely adopted Galois Counter-Mode
(GCM) scheme [17], in the mu setting. We prove new tight bounds for GCM which improve upon
existing ones [5, 13] by considering a ﬁne-grained setting that assumes both (1) a bound d on the
number of users re-using any particular nonce, and (2) a bound B on the amount of data encrypted
by each user.
This allows us to analyze some deployment practices for GCM that have a positive impact on mu
security. On the one hand, we show that frequent re-keying improves AE mu security. On the other
hand, we show how mu security is aﬀected by policies adopted to choose nonces, e.g., combining
(secret) pseudorandom values and counters. We refer to such techniques as nonce randomization.
We show, with precise tight bounds, that nonce randomization increases the mu security of AE,
and apply this insight to GCM-based AE, conﬁrming an intuition initially put forward in the design
of TLS 1.3.1 We also show that already in-place nonce selection strategies in TLS 1.2 eﬀectively
improve mu security.
Prior to this work, Bellare and Tackmann (BT) [5] were the only ones to rigorously study the
speciﬁc GCM-based approach adopted by TLS 1.3. As we discuss below, their analysis is non-tight
and only considers adversaries attempting to break conﬁdentiality. Here, we complete the picture
with tight bounds and full AE security, and resolve their main open question.
1.1 Mu Security and Nonce Randomization
Here, we follow the conventional AEAD interface which allows us to (deterministically) encrypt
a plaintext M , with a nonce N and associated data A as a ciphertext EK(N, A, M ). Security is
meant to hold as long as no two pairs (M, A) are encrypted with the same N . (We will not discuss
nonce-misuse resistance [21] in this paper.)
The mu security of AE. One question is what is the best we can expect from an AE scheme
in terms of its mu security. To this end, BT adapt a well-known generic key-recovery attack by
Biham [6] to AEAD. First, ﬁx N∗, A∗ and M∗, and obtain their encryption with respect to u
1As we detail below, such approaches were used before, but never was mu security suggested as an explicit
motivation for nonce randomization before TLS 1.3.
3
diﬀerent users, which yields ciphertexts
Ci = EKi(N∗, A∗, M∗) ,
i = 1, . . . , u ,
where Ki is the key of the i-th user. The attacker’s goal is to recover at least one of the Ki’s.
To do so, it makes p key-guesses K (e.g., random ones), and for each guess, computes C =
EK(N∗, A∗, M∗). If C = Ci for some i, then K = Ki. It is not hard to see that the probabil-
ity that this attack succeeds is roughly u · p/2k, where k is the key-length (e.g., k = 128 in GCM
based on 128-bit AES). Therefore, the eﬀort to succeed is only p ≈ 2k−log(u).
Nonce randomization. The above generic attack is not always as threatening in practice, as
in-place policies for choosing nonces limit its impact. Typically, an AE scheme would be invoked
with a nonce N which combines a (usually public) part like a counter, to be sent along with the
ciphertext, and an implicit part, often secret and already known by the endpoints (this could be
generated as part of a prior handshake). McGrew [15] gives an overview of such methods in an
Internet Draft, and we refer to them as “nonce randomization” techniques.
For example, RFC 5288 [22]–which describes the GCM ciphersuites for TLS 1.2–mandates
nonces whose implicit part is a session-dependent (pseudo)random salt generated as part of the
handshake. Thus, with u users, each nonce is re-used by (on average) u/232 users, and in the above
attack, each ciphertext C can thus be checked against at most u/232 ciphertexts (rather than u),
reducing the success probability to roughly u · p/2160 for a 128-bit key.
An even more eﬀective approach (at least with respect to preventing the above attack) are so-
called “unpredictable nonces”, and this is the approach taken by TLS 1.3 [20] and previously used
within the SRTP protocol [1]. Here, a secret random oﬀset mask J is chosen, and then, whenever we
need to encrypt a message with nonce N , it is encrypted with nonce N ⊕J instead. BT [5] analyzed
this method in the speciﬁc case of GCM used by TLS 1.3, casting it as a standalone AE scheme
called RGCM. They fall short of a full analysis, however, giving merely non-tight bounds that
conﬁrm better-than-average passive (i.e., IND-CPA) security. We stress that integrity is even more
fundamental in the mu setting – indeed, while a single session can abort after a failed veriﬁcation
attempt, mu attackers can spread forgery attempts across diﬀerent users, making uncoordinated
attack detection much harder.
We note that with the exception of the standardization of TLS 1.3 [20, Appendix E.2], the
treatment of mu attacks has not been explicitly mentioned as a motivation, even though some of
the published motivating work [16] considered key-collision attacks arising from two users having
the same key, which are of course special cases of mu attacks.
1.2 Our Results
In this paper, we complete the picture for the security of GCM in the multi-user setting with tight
and more reﬁned bounds. These will allow us to give precise bounds when nonce randomization
policies are applied to GCM.
The d-bounded model and RGCM. Here, we consider the mu version of AE security from [5],
which requires indistinguishability from random ciphertexts in presence of a veriﬁcation oracle. In
addition, we adopt the model by Bose, Hoang, and Tessaro (BHT) [7], which we refer to as the
d-bounded model: it postulates that each nonce can be re-used by at most d users for encryption.
More formally, the attacker gets to ask encryption queries of the form (i, N, A, M ), which produce
an encryption EKi(N, A, M ) under the key Ki of the i-th user. Here, the constraints are that (1)
for every i, no two queries with the same N are asked, and (2) for every N , there are at most d
i’s for which a query (i, N, A, M ) is asked for some M, A. However, its queries to the veriﬁcation
4
oracle are unrestricted, and take the form (i, N, A, C) and return true if and only if C is a valid
ciphertext under Ki for N and A.
The goal is to give security bounds which are parameterized by d. Jumping ahead, this model
allows us to see a nonce-randomization policy as part of the adversary which ensures a certain d
when picking nonces.
Although we rely on the model proposed by BHT [7], we emphasize that our security goal is
diﬀerent - we consider only nonce-respecting and do not consider misuse-resistance. While there
is some conceptual overlap due to the settings, apart from relying on some balls-and-bins lemma
from BHT our proofs proceed diﬀerently.
GCM in the d-bounded model. Our main technical result is an analysis of CAU – a generaliza-
tion of GCM presented by BT – in the d-bounded model, assuming the underlying blockcipher is
ideal. We show that for every adversary making q encryption/veriﬁcation queries, p ideal-cipher
queries, and encrypting/verifying overall σ blocks of data, the advantage of breaking CAU’s AE
security is of the order2
d(p + q) + n(p + q + σ)
2k
+
σB
2n
where k and n are the blockcipher key and block length, respectively, and B is a bound on the
number of blocks encrypted per user. We stress that our bound does not depend on the number of
users u, which can depend on adaptive choice of the adversary, and can be as high as q.
In comparison, BT [5] show a bound for the case where d is unbounded (i.e., d = u) of order3
u(u + p)
2k
+
uσ2
2n
2n only, which is the (tight) single-user bound [12].
This bound was (somewhat implicitly) improved later by [13], essentially improving the second
term to σ2
Why this bound matters. Our bound is interesting for its parameterization:
It shows that
when d is small, the security increases substantially, and this will enable an analysis of nonce
randomization techniques. Even for the u = d case, the parameterization with B shows important
insights: First oﬀ, if we have u users, all transmitting roughly the same amount of data B := σ/u,
the term becomes σ2/(u2n)–much better than σ2/2n as u grows. Moreover, users normally re-key,
ensuring no session transmits too much data, and thus generally B can be ﬁxed independently of
σ–moreover, the smaller (i.e., we re-key more often), the better. If for instance, B = 233, n = 128,
then this allows each user/session to encrypt up to 240 bits = 232 bytes = 4.3 GB, yet the term
becomes σ/295.
Nonce randomization methods: Generic transforms. We cast both nonce-randomization
schemes discussed above as generic transformations building an AE scheme with longer keys from
one with shorter ones. The ﬁrst one implements unpredictable nonces, as in TLS 1.3 and SRTP,
and we refer to it as XN. If the underlying scheme uses a key K of length k and nonce length r,
the resulting scheme uses a key K (cid:107) J of length k + r. If we denote by E the encryption of the given
AE scheme, the encryption E∗ is such that
E∗(K (cid:107) J, N, A, M ) = E(K, N ⊕ J, A, M ) .
Note that XN still has r-bit nonces. For the speciﬁc case where E comes from GCM, BT refer to
this construction as RGCM.
2We omit lower-order terms, and small constant factors.