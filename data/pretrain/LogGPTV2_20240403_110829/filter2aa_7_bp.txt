### ITA软件的核心竞争力

ITA软件的核心是一个由20万行Common Lisp代码组成的程序，其搜索能力远超竞争对手。这些竞争对手依然依赖于大型机时代的编程方法。尽管我没有亲自查看过ITA的源码，但一位在该公司工作的顶尖黑客透露，他们大量使用了宏。这与我的预期相符。

### 使用不常见技术的代价

我承认，选择一种不常见的技术确实存在一些风险。经理们对此表示担忧并非全无道理。然而，由于他们不了解风险的具体来源，往往会高估这些风险。以下是使用不常见语言可能遇到的三个问题：

1. **兼容性问题**：你的程序可能难以与其他语言编写的程序协同工作。
2. **函数库缺乏**：你可能找不到丰富的函数库支持。
3. **招聘困难**：可能难以找到熟悉该语言的程序员。

#### 问题严重性分析

- **兼容性问题**：如果你控制整个系统并拥有所有组件的源码（如ITA的情况），那么你可以自由选择任何语言，并自行解决兼容性问题。服务器端软件尤其适合采用先进技术，因为它们不受客户端环境的限制。例如，Perl和Python等新语言在服务器端应用中流行起来，正是因为这种灵活性。

- **函数库的重要性**：对于某些应用，函数库的质量比语言本身的能力更重要。然而，对于复杂的应用程序，语言本身的强大功能更为关键。选择语言时应根据具体项目的需求来决定。

- **招聘问题**：小规模团队（通常少于10人）更适合开发软件。只要不是完全未知的语言，招聘应该不会成为大问题。此外，使用高级语言可以减少所需的人手，因为这些语言能够提高生产力，并且吸引更聪明的程序员。

### 强大语言的优势

使用强大语言的一个明显优势是代码量减少。例如，Lisp代码通常比C代码短得多。据称，一行Lisp代码相当于20行C代码。这意味着使用Lisp可以显著加快开发速度。如果竞争对手使用C语言需要一年时间完成的功能，ITA可能只需要不到三周。

### 随大流的代价

使用低级语言不仅会增加开发时间，还可能导致项目无法完成。在一个高度竞争的市场中，即使开发速度只相差两三倍，也可能导致你永远处于落后状态。

### 管理者的误区

许多管理者倾向于选择“业界最佳实践”，以避免承担责任。然而，这种做法往往会导致平庸的结果。真正成功的公司会选择最强大的语言来解决最困难的问题，并等待竞争对手因保守而落败。

### 编程能力示例

为了说明不同语言的编程能力差异，考虑以下问题：编写一个生成累加器的函数。在Common Lisp中，这个函数可以这样写：

```lisp
(defun foo (n)
  (lambda (i) (+ n i)))
```

这段代码简洁明了，展示了Lisp的强大抽象能力。

### 结论

综上所述，选择最强大的语言并解决最难的问题是成功的关键。ITA软件公司就是一个典型的例子。如果你想在软件行业取得成功，就应采用你知道的最强大的语言，解决最具挑战性的问题，并耐心等待竞争对手因保守而失败。