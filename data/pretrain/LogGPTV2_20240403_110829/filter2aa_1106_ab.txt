that is not executed will not reveal any vulnerabilities.
The PNG decoder we choose to examine is a small
front-end to libpng 1.2.16 [5]. This library is used by most
open source web browsers for PNG decoding, including
Firefox, Opera, and Safari. In order to obtain code cover-
age information, the library was instrumented with gcov
[7] to record the source lines executed. As a ﬁrst step, the
coverage for opening an empty ﬁle was measured in order
to reveal the general processing and start-up code. Next,
a minimal PNG ﬁle was obtained that contained only the
mandatory chunks, namely IHDR, IDAT, and IEND. The
difference between the coverage of the minimal ﬁle and
the coverage opening an empty ﬁle is considered to be
the minimal amount of code needed to parse a PNG using
libpng. We can conclude that this difference excludes gen-
Analysis of Mutation and Generation-Based Fuzzing
4
  0
  20
  40
  60
  80
  100
sCAL
pCAL
oFFs
tIME
sPLT
pHYs
hIST
bKGD
iTXt
zTXt
tEXt
sRGB
sBIT
iCCP
cHRM gAMA
tRNS
PLTE
Numbers of Lines of Code Needed to Process Chunk Type (%)
Chunk Type
13%
48%
45%
44%
21%
20%
50%
24%
33%
10%
29%
24%
25%
27%
14%
 9%
25%
15%
Figure 4: The number of lines of code required to process each chunk as a percentage of the amount of code required
to process a minimal PNG ﬁle.
eral startup and ﬁle I/O and only measures the coverage
of the required instructions to decode the three mandatory
chunks.
In order to measure the effects of each chunk type on
code coverage, we use generation-based fuzzing to incre-
mentally add new chunk types to the minimal PNG ﬁle
and re-measure code coverage. We used an open-source
generation-based fuzzing tool called SPIKEﬁle [3] to dy-
namically create approximately 1,000 ﬁles for each added
chunk type. Chunks were added one at a time, with the
only exception being the hIST chunk which requires the
PLTE chunk. We conﬁgured SPIKEﬁle to create PNG ﬁle
variations that share the same chunk types and structure,
but differ in chunk type properties and sizes. This varia-
tion provides an insight into how chunk types affect code
coverage.
Figure 4 illustrates the approximate increase of code
required to parse each chunk type as a percentage of the
amount of code required to parse the minimal PNG ﬁle.
Note that due to the nature of the fuzzing, and the fact that
there are often dependencies between different chunks (es-
pecially the IHDR chunk), these numbers represent a lower
bound on the amount of code required for processing each
chunk.
Results show that some chunk types require more code
than others, but all require a signiﬁcant amount of code.
In particular, chunk types that were not represented at all
in the ﬁles collected (iTXt, sPLT, sCAL, and hIST) to-
gether represent 76% more code than is required to pro-
cess the three mandatory chunks in the minimal PNG ﬁle.
This code could not have be covered using mutation-based
fuzzing. To achieve a maximum code coverage, one must
use ﬁles that include all the different chunks types. This
comes at the cost of a signiﬁcant initial effort to com-
pletely understand the ﬁle format.
5
Mutation Versus Generation-based
Fuzzing
We formally compare the code coverage of mutation-based
and generation-based fuzzing techniques. Two different
variations of a mutation-based fuzzer were used. The ﬁrst
takes a known good ﬁle and randomly manipulates bytes
in various chunk types but does update the correspond-
ing CRC. This represents the most basic type of mutation-
based fuzzer as it does not insert new bytes into the ﬁle,
for example, long strings. The second similarly manip-
ulates random bytes, but generates a correct correspond-
Analysis of Mutation and Generation-Based Fuzzing
5
  0
  50
  100
  150
  200
  250
  300
Gen
Mut−CRC−9
Mut−CRC−7
Mut−CRC−5
Mut−9
Mut−7
Mut−5
Increase in Number of Lines of Code Covered (%)
60%
98%
139%
85%
137%
150%
289%
Figure 5: The number of lines of source code covered as a percentage of the amount of code required to decode a
minimal PNG ﬁle.
ing CRC. This assumes some basic knowledge about the
ﬁle type. Our mutation-based fuzzer functions very simi-
larly to the mutation-based fuzzers, FILEfuzz [6] and Not-
SPIKEﬁle [2].
We ran our mutation-based fuzzer starting from three
known good ﬁles.
The ﬁrst ﬁle contains ﬁve different
chunk types that would be the most likely number to ﬁnd
by chance, the second contains seven chunk types that
would be unlikely to ﬁnd by chance, and the last con-
tains nine chunk types that would be extremely unlikely
to ﬁnd by chance. For each of these three starting ﬁles,
200,000 test cases were generated: 100,000 randomly mu-
tated ﬁles, and 100,000 mutated ﬁles with matching CRCs.
For generation-based fuzzing, all of the ﬁles created
for the previous section using SPIKEﬁle were tested. Ad-
ditionally, ﬁles were created that fuzzed some of the non-
data ﬁelds, such as block length, CRC, chunk name, etc.
This resulted in a set of 29,511 test cases that covered all
twenty-one chunk types. The set of test cases was sig-
niﬁcantly smaller than those used by the mutation-based
fuzzer and no randomness was used in the generation of
the generation-based test cases – they are strictly heuristic.
This is a distinct advantage of generation-based fuzzing
techniques.
The comparison of code coverage results are shown in
Figure 5. “Mut” refers to the mutation-based fuzzing tech-
niques, for the ﬁve, seven and nine chunk type test cases,
with and without CRCs. “Gen” refers to the generation-
based test cases. These results conﬁrm the cursory anal-
ysis of the previous sections. The initial ﬁle with ﬁve
chunk types contained the mandatory three chunk types,
plus bKGD and pHYs. Figure 4 estimates that these two
chunks add an additional 55% of code coverage over the
minimal PNG ﬁle. Figure 5 indicates that fuzzing begin-
ning from this initial ﬁle covers 60% more code than the
minimal ﬁle. In this case, Figure 4 serves as a method of
estimating code coverage for the actual fuzzing runs.
Despite the clear difference in fuzzing methods, our
experimental procedure has limitations. Fuzzing is not an
exact science and the results presented are only an indi-
cation of a trend. Code coverage could change signiﬁ-
cantly by varying only a few factors, such as longer run
times, more detailed test cases, etc. However, due to the
fact that applications often contain large sections of code
that will only execute with uncommon inputs, mutation-
based fuzzers will always fair poorly when compared to
generation-based fuzzers. We conﬁrmed this hypothesis
with our PNG experiments. For the PNG ﬁle format, on
average, a mutation-based fuzzer will only cover approx-
imately 24% of the code of a generation-based fuzzer.
6
Conclusions
This paper measures the quantitative differences between
mutation and generation-based fuzzing for the PNG im-
Analysis of Mutation and Generation-Based Fuzzing
6
age ﬁle format and libpng. For this ﬁle format, a mutation-
based fuzzer is at a large disadvantage due to the lack of
diverse ﬁles available for testing. Results indicate that
large sections of code that will not be exercised. A generation-
based approach faired much better. There still exists much
future work, including extending this technique to other
ﬁle formats and decoders and reﬁning the metrics of code
coverage.
References
[1] ALEXA.
Alexa web search platform:
Beta.
https://websearch.alexa.com, 2007.
[2] GREEN, A., AND IDEFENSE LABS. notSPIKEﬁle.
http://labs.idefense.com/software/,
2005.
[3] GREEN, A., AND IDEFENSE LABS.
SPIKEﬁle.
http://labs.idefense.com/software/,
2005.
[4] RANDERS-PEHRSON,
G.
Extensions
to
the
PNG
1.1
speciﬁcation,
version
1.1.0.
http://www.libpng.org/pub/png/spec,
1998.
[5] ROELOFS,
G.
libpng
home
page.
http://www.libpng.org/pub/png, 2007.
[6] SUTTON, M., AND IDEFENSE LABS.
FileFuzz.
http://labs.idefense.com/software/,
2006.
[7] THE GNU PROJECT. gcov – a test coverage pro-
gram. http://gcc.gnu.org/.
[8] VAN SPRUNDEL, I. Fuzzing: Breaking software in
an automated fashion. Talk at: 22nd Chaos Commu-
nication Congress: Private Investigations, 2005.
[9] W3C.
Portable Network Graphics (PNG) Spec-
iﬁcation (Second Edition) Information technol-
ogy – Computer graphics and image process-
ing – Portable Network Graphics (PNG): Func-
tional
speciﬁcation.
ISO/IEC
15948:2003
(E).
http://www.w3.org/TR/PNG, 2003.
[10] WIKIPEDIA. Fuzz testing.
Analysis of Mutation and Generation-Based Fuzzing
7