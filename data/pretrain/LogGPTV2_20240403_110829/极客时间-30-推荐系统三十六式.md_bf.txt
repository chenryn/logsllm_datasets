### 1. 列式数据库所谓列式数据库，是和行式数据库相对应的，这里不讨论数据库的原理，但是可以有一个简单的比喻来理解这两种数据库。你把数据都想象成为矩阵，行是一条一条的记录，例如一个物品是一行，列是记录的各个字段，例如ID 是一列，名称是一列，类似等等。当我们在说行和列的时候，其实是在大脑中有一个抽象的想象，把数据想象成了二维矩阵，但是实际上，数据在计算机中，管你是行式还是列式，都要以一个一维序列的方式存在内存里或者磁盘上。那么有意思的就来了，是按照列的方式把数据变成一维呢，还是按照行的方式把数据变成一维呢，这就是列式数据库和行式数据库的区别。当然实际上数据库比这复杂多了，这只是一个简单形象的说明，有助于你去理解数据的存储方式。列式数据库有个列族的概念，可以对应于关系型数据库中的表，还有一个键空间的概念，对应于关系型数据库中的数据库。众所周知，列式数据库适合批量写入和批量查询，因此常常在推荐系统中有广泛应用。列式数据库当推Cassandra 和 HBase，两者都受 Google 的 BigTable影响，但区别是：Cassandra 是一个去中心化的分布式数据库，而 HBase则是一个有 Master 节点的分布式存储。Cassandra 在数据库的 CAP 理论中可以平滑权衡，而 HBase 则是强一致性，并且Cassandra 读写性能优于 HBase，因此 Cassandra更适合推荐系统，毕竟推荐系统不是业务逻辑导向的，对强一致性要求不那么强烈，这和我在一开始建议"你要建立起不确定思维"是一脉相承的。Cassandra 的数据模型组织形式如下图所示：![](Images/61f74c27fd038a2ca346a3849a19bf5b.png){savepage-src="https://static001.geekbang.org/resource/image/b9/3c/b9b12de5134a6a3c88ba8a97f6a3333c.png"}从这个图可以看出来，可以通过行主键及列名就可以访问到数据矩阵的单元格值。前面也说过，用户和物品的画像数据适合存储在 Cassandra中。也适合存储模型数据，如相似度矩阵，还可以存储离线计算的推荐结果。
### 2. 键值数据库除了列式数据库外，还有一种存储模式，就是键值对内存数据库，这当然首推Redis。Redis 你可以简单理解成是一个网络版的HashMap，但是它存储的值类型比较丰富，有字符串、列表、有序列表、集合、二进制位。并且，Redis 的数据放在了内存中，所以都是闪电般的速度来读取。在推荐系统的以下场景中常常见到 Redis 的身影：1.  消息队列，List 类型的存储可以满足这一需求；2.  优先队列，比如兴趣排序后的信息流，或者相关物品，对此 sorted set    类型的存储可以满足这一需求；3.  模型参数，这是典型的键值对来满足。另外，Redis被人诟病的就是不太高可用，对此已经有一些集群方案，有官方的和非官方的，可以试着加强下Redis 的高可用。
### 3. 非数据库除了数据库外，在推荐系统中还会用到一些非主流但常用的存储方式。第一个就是虚拟内存映射，称为MMAP，这可以看成是一个简陋版的数据库，其原理就是把磁盘上的文件映射到内存中，以解决数据太大不能读入内存，但又想随机读取的矛盾需求。哪些地方可以用到呢？比如你训练的词嵌入向量，或者隐因子模型，当特别大时，可以二进制存在文件中，然后采用虚拟内存映射方式读取。另外一个就是 PMML文件，专门用于保存数据挖掘和部分机器学习模型参数及决策函数的。当模型参数还不足以称之为海量时，PMML是一个很好的部署方法，可以让线上服务在做预测时并不依赖离线时的编程语言，以PMML 协议保存离线训练结果就好。``{=html}
## API除了存储，推荐系统作为一个服务，应该以良好的接口和上有服务之间交互，因此要设计良好的API。API 有两大类，一类数据录入，另一类是推荐服务。数据录入API，可以用于数据采集的埋点，或者其他数据录入。![](Images/c81ec0c5dd8bf062ac0be62901d1b8c1.png){savepage-src="https://static001.geekbang.org/resource/image/6e/15/6e88ceb14c4e28e8e113393f147de615.png"}推荐服务的 API按照推荐场景来设计，则是一种比较常见的方式，下面分别简单说一下 API的样子。
### 1. 猜你喜欢**接口：**/Recommend**输入：**\* UserID -- 个性化推荐的前提\ \* PageID -- 推荐的页面 ID，关系到一些业务策略\ \* FromPage -- 从什么页面来\ \* PositionID -- 页面中的推荐位 ID\ \* Size -- 请求的推荐数量\ \* Offset -- 偏移量，这是用于翻页的**输出：**\* Items -- 推荐列表，通常是数组形式，每一个物品除了有ID，还有展示所需的各类元素\ \* Recommend_id -- 唯一 ID 标识每一次调用，也叫做曝光ID，标识每一次曝光，用于推荐后追踪推荐效果的，很重要\ \* Size -- 本次推荐数量\ \* Page ------ 用于翻页的
### 2. 相关推荐**接口：**/Relative**输入：**\* UserID -- 个性化推荐的前提\ \* PageID -- 推荐的页面 ID，关系到一些业务策略\ \* FromPage -- 从什么页面来\ \* PositionID -- 页面中的推荐位 ID\ \* ItemID -- 需要知道正在浏览哪个物品导致推荐相关物品\ \* Size -- 请求的推荐数量\ \* Offset -- 偏移量，这是用于翻页的**输出：**\* Items -- 推荐列表，通常是数组形式，每一个物品除了有ID，还有展示所需的各类元素\ \* Recommend_ID -- 唯一 ID 标识每一次调用，也叫做曝光ID，标识每一次曝光，用于推荐后追踪推荐效果的，很重要\ \* Size -- 本次推荐数量\ \* Page ------ 用于翻页的