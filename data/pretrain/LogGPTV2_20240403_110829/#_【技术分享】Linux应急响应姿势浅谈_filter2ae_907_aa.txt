# 【技术分享】Linux应急响应姿势浅谈
|
##### 译文声明
本文是翻译文章，文章来源：阿里云先知
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**作者：vinc@阿里云先知**
**一、前记**
无论是甲方还是乙方的同学，应急响应可能都是家常便饭，你可能经常收到如下反馈：
运维同事 –> 服务器上存在 **可疑进程** ，系统资源占用高；
网络同事 –> 监控发现某台服务器 **对外大量发包** ；
….
不要着急，喝一杯82年的美年达压压惊，希望本文可以对你有所帮助。
**二、排查流程**
**0x01 Web服务**
一般如果网络边界做好控制， **通常对外开放的仅是Web服务** ，那么需要先找到Webshell，可以通过如下途径：
**1）检查最近创建的php、jsp文件和上传目录**
例如要查找24小时内被修改的JSP文件：
    > find ./ -mtime 0 -name "*.jsp"
**2）使用Webshell查杀工具**
Windows下D盾等，Linux下河马等。
**3）与测试环境目录做对比**
> diff -r {生产dir} {测试dir}
**4）创建Audit审计规则**
    vim /etc/audit/audit.rules
    -a exclude,always -F msgtype=CONFIG_CHANGE
    -a exit,always -F arch=b64 -F uid=48 -S execve -k webshell
产生日志如下：
    type=SYSCALL msg=audit(1505888691.301:898615): arch=c000003e syscall=59 success=yes exit=0 a0=ca5188 a1=cb5ec8 a2=cb5008 a3=8 items=2 ppid=26159 pid=26160 auid=0 uid=48 gid=48 euid=48 suid=48 fsuid=48 egid=48 sgid=48 fsgid=48 tty=(none) ses=120028 comm="ls" exe="/bin/ls" subj=unconfined_u:system_r:httpd_t:s0 key="webshell"
    type=EXECVE msg=audit(1505888691.301:898615): argc=1 a0="ls"
    type=CWD msg=audit(1505888691.301:898615): cwd="/var/www/html/dvwa"
    type=PATH msg=audit(1505888691.301:898615): item=0 name="/bin/ls" inode=2359385 dev=fd:00 mode=0100755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:bin_t:s0 nametype=NORMAL
    type=PATH msg=audit(1505888691.301:898615): item=1 name=(null) inode=1441842 dev=fd:00 mode=0100755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:ld_so_t:s0 nametype=NORMAL
可以看到所在目录为 **/var/www/html/dvwa**
具体Auditd的使用如下：
**Auditd服务介绍**
Auditd服务是Linux自带的审计系统，用来记录审计信息，从安全的角度可以用于对系统安全事件的监控。
Auditd服务的配置文件位于 **/etc/audit/audit.rules** ，其中每个规则和观察器必须单独在一行中。语法如下：
    -a , 
配置如下：
    task
    每个任务的列表。只有当创建任务时才使用。只有在创建时就已知的字段(比如UID)才可以用在这个列表中。
    entry
    系统调用条目列表。当进入系统调用确定是否应创建审计时使用。
    exit
    系统调用退出列表。当退出系统调用以确定是否应创建审计时使用。
    user
    用户消息过滤器列表。内核在将用户空间事件传递给审计守护进程之前使用这个列表过滤用户空间事件。有效的字段只有uid、auid、gid和pid。
    exclude
    事件类型排除过滤器列表。用于过滤管理员不想看到的事件。用msgtype字段指定您不想记录到日志中的消息。
配置如下：
    never
    不生成审计记录。
    always
    分配审计上下文，总是把它填充在系统调用条目中，总是在系统调用退出时写一个审计记录。如果程序使用了这个系统调用，则开始一个审计记录。
配置如下：
    -S 
    根据名称或数字指定一个系统。要指定所有系统调用，可使用all作为系统调用名称。
    -F ,
    指定一个规则字段。如果为一个规则指定了多个字段，则只有所有字段都为真才能启动一个审计记录。每个规则都必须用-F启动，最多可以指定64个规则。
常用的字段如下：
    pid
    进程ID。
    ppid
    父进程的进程ID。
    uid
    用户ID。
    gid
    组ID。
    msgtype
    消息类型号。只应用在排除过滤器列表上。
    arch
    系统调用的处理器体系结构。指定精确的体系结构，比如i686(可以通过uname -m命令检索)或者指定b32来使用32位系统调用表，或指定b64来使用64位系统调用表。
    ...
**编写测试Java命令监控规则** **** ****
Jboss的启动账户为nobody，添加审计规则
    # grep '-a' /etc/audit/audit.rules 
    -a exclude,always -F msgtype=CONFIG_CHANGE
    -a exit,always -F arch=b32 -F uid=99 -S execve -k webshell
重启服务
    # service auditd restart
    Stopping auditd: [ OK ]
    Starting auditd: [ OK ]
**使用webshell测试：**
**1）菜刀马测试**
菜刀马传递的参数为
    tom=M&z0=GB2312&z1=-c/bin/sh&z2=cd /;whoami;echo [S];pwd;echo [E]
所执行的程序如下：
    else if(Z.equals("M")){String[] c={z1.substring(2),z1.substring(0,2),z2};Process p=Runtime.getRuntime().exec(c);
审计日志如下：
    type=EXECVE msg=audit(1500273887.809:7496): argc=3 a0="/bin/sh" a1="-c" a2=6364202F7765622F70726F6A6563742F7A616F6A69617379732E6A69616E73686539392E636F6D2E636563616F707379732F636563616F707379732F3B77686F616D693B6563686F205B535D3B7077643B6563686F205B455D
**2）jspspy测试**
jspspy传递的参数为
    o=shell&type=command&command=netstat+-antlp&submit=Execute
所执行的程序如下：
    String type = request.getParameter("type");
    if (type.equals("command")) {
    ins.get("vs").invoke(request,response,JSession);
    out.println("");
    out.println("");
    String command = request.getParameter("command");
    if (!Util.isEmpty(command)) {
    Process pro = Runtime.getRuntime().exec(command);
    BufferedReader reader = new BufferedReader(new InputStreamReader(pro.getInputStream()));
    String s = reader.readLine();
审计日志如下：
    type=EXECVE msg=audit(1500273958.180:7500): argc=1 a0="whoami"
OSSEC监控配置
OSSEC本身已经包含了auditd事件的解码规则，例如：
      ^type=
    .......
但是在RULES里面没有找到现成的规则，编辑local_rules.xml，新增
        auditd
        AUDITD messages grouped.
        110000
        EXECVE
        Java execution command
测试
    [root@localhost ossec]# ./bin/ossec-logtest 
    2017/07/17 16:28:26 ossec-testrule: INFO: Reading local decoder file.
    2017/07/17 16:28:26 ossec-testrule: INFO: Started (pid: 9463).
    ossec-testrule: Type one log per line.
    type=EXECVE msg=audit(1500273958.180:7500): argc=1 a0="whoami"
    **Phase 1: Completed pre-decoding.
           full event: 'type=EXECVE msg=audit(1500273958.180:7500): argc=1 a0="whoami"'
           hostname: 'localhost'
           program_name: '(null)'
           log: 'type=EXECVE msg=audit(1500273958.180:7500): argc=1 a0="whoami"'
    **Phase 2: Completed decoding.
           decoder: 'auditd'
    **Phase 3: Completed filtering (rules).
           Rule id: '110001'
           Level: '10'
           Description: 'Java execution command'
    **Alert to be generated.
然后在Agent端添加监控文件
        syslog
        /var/log/audit/audit.log
然后jspspy执行系统命令，可以看到告警如下
    [root@localhost ossec]# tail -f /var/ossec/logs/alerts/alerts.log 
    ** Alert 1500280231.400419: mail  - syslog,auditd,
    2017 Jul 17 16:30:31 (agent-31) 10.110.1.31->/var/log/audit/audit.log
    Rule: 110001 (level 10) -> 'Java execution command'
    type=EXECVE msg=audit(1500280229.507:7665): argc=1 a0="pwd"
这里还需考虑的一个问题是白名单，例如公司的一些站点本身就会调用视频处理的一些功能，也会调用系统命令。所以为了避免误报，需要新增一个白名单功能。
这里我们修改一下local_rules.xml，新增白名单规则，并且放到EXECVE规则上面。
        auditd
        AUDITD messages grouped.
        110000
        whoami|passwd
        Java execution white list
        110000
        EXECVE
        Java execution command
如上所示，执行 **whoami** 和 **cat /etc/passwd** 的时候不会产生告警。
**其他**
如果没有通过上述途径找到Webshell，可以通过Access Log获取一些信息。
**1）扫描特征**
通常日志中会伴随一些其他攻击特征，例如可以用如下语句
    egrep '(select|script|acunetix|sqlmap)' /var/log/httpd/access_log
**2）访问频次**