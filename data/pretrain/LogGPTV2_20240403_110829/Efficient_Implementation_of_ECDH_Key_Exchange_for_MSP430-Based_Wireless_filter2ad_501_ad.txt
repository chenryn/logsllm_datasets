11,949,000
9,100,128
2,604,338
11,949,000
9,100,128
5,121,517
n/a
6,293
3,112
2,266
2,736
1,905
1,952
1,828
n/a
2,559
2,555
12,645,000
10,020,000
8,779,931
6,312,785
5,760,000
5,721,420
1,831,063
1,635,056
12,645,000
10,020,000
8,779,931
6,312,785
5,760,000
5,721,420
4,417,661
3,248,819
25,290,000
20,040,000
17,559,862
12,625,570
11,520,000
11,442,840
6,248,724
4,883,875
23,898,000
18,200,256
7,725,855
No
No
n/a
No
No
Yes
No
Yes
n/a
Yes
Yes
MSP430F1611
n/a
MSP430F1611
MSP430F2618
MSP430F1611
MSP430C11x1
n/a
MSP430F1611
MSP430F1611
MSP430C11x1
MSP430F1611
Table 3: Execution times (in clock cycles) of our ECC software and some previous implementations.
arithmetic for both of our prime ﬁelds. For example, a full
multiplication (including reduction) in our 159-bit ﬁeld has
an execution time of just 1828 clock cycles, which improves
the 160-bit multiplication times in [5] and [26] by 124 and
77 cycles, respectively. An execution time of 1828 cycles
is, to our knowledge, the best result for multiplication in a
prime ﬁeld of about 160 bits ever reported in the literature
and, therefore, represents a new speed record. Squaring in
our 159-bit prime ﬁeld is approximately 18% faster than a
multiplication, whereas the Fermat-based inversion has an
execution time of roughly 147 multiplications. Note that all
ﬁeld operations listed in Table 1 have a regular execution
proﬁle and a constant execution time, independent of the
actual value of the operands, which helps to thwart certain
implementation attacks.
Operation
TE Point Add.
TE Point Dbl.
Mon Point Add.
Mon Point Dbl.
159 bit
14,685
13,263
10,276
8,183
191 bit
19,852
17,514
13,586
10,733
Table 2: Execution time (in clock cycles) of point
addition and point doubling.
We implemented the point arithmetic (i.e. point addition
and doubling) in C, whereby we used Assembly functions
for the ﬁeld operations as subroutines. The execution times
for the Montgomery shape and the twisted Edwards shape
on both curve P159 and P191 are speciﬁed in Table 2. As
expected, the point arithmetic on the Montgomery curve is
faster than that on the twisted Edwards curve, mainly due
to the fact that the diﬀerential point addition/doubling on
a Montgomery curve does not involve the y coordinate. In
summary, the simulation results in Table 2 agree with the
number of ﬁeld multiplications and squarings as analyzed
in Subsection 2.1. A ﬁxed-base scalar multiplication using
the twisted Edwards model of MoTE curve P159 requires
approximately 1.635 · 106 cycles on the MSP430F1611. We
perform a ﬁxed-base scalar multiplication via a ﬁxed-base
comb method with 8 pre-computed multiples of the base
point so that four bits of the scalar can be processed at a
time. A detailed description of this comb method, which is
highly regular and has constant (i.e. operand-independent)
execution time, can be found in [16]. As mentioned at the
outset of this section, the ﬁxed-base scalar multiplication
also includes the conversion of the obtained point from the
twisted Edwards curve to the birationally-equivalent Mont-
gomery curve, on which the second scalar multiplication is
performed. However, since this second scalar multiplication
is variable-base, we use the Montgomery ladder to execute
it in an eﬃcient fashion. Taking curve P159 as example, the
second (i.e. variable-base) scalar multiplication executes in
3.249 · 106 cycles, which means the total computation time
of ephemeral ECDH amounts to 4.884 · 106 cycles.
Table 3 compares our work with previous ECC software
implementations for MSP430 devices in terms of execution
time of a ﬁeld multiplication (second column), a ﬁxed-base
scalar multiplication (third column), a variable-base scalar
multiplication (fourth column), and an ECDH key exchange
(ﬁfth column). Also speciﬁed is whether an implementation
features a regular execution proﬁle (sixth column) and the
speciﬁc device (seventh column). Our implementations on
both curve P159 and curve P191 signiﬁcantly improve the
state-of-the-art; for example, ECDH on curve P159 outper-
forms the best previous implementation (i.e. [5]) by more
than 21.84%. However, it should be taken into account in
this comparison that most of the previous implementations
only considered variable-base scalar multiplication.
5. CONCLUSIONS
We presented a high-speed implementation of ephemeral
ECDH key exchange based on MoTE elliptic curves for the
MSP430 family of microcontrollers. Our software exploits
the birational equivalence between the Montgomery model
and the twisted Edwards model of a MoTE curve with the
goal of maximizing the performance of both ﬁxed-base and
variable-base scalar multiplication. In the case of a MoTE
curve over a 159-bit pseudo-Mersenne prime, a ﬁxed-base
scalar multiplication (using the twisted Edwards form and
eight pre-computed points) takes 1.635 · 106 cycles on an
MSP430F1611, while a variable-base scalar multiplication
on the birationally-equivalent Montgomery curve requires
3.249 · 106 clock cycles. Consequently, both scalar multipli-
cations can be executed in only 4.884· 106 cycles, which sets
a new speed record for the computation of an ephemeral
ECDH key exchange on the MSP430 platform and improves
the previously best result in the literature by 21,84%. We
achieved this performance gain through a careful selection
of curve models and domain parameters, aiming for a good
balance between security and eﬃciency, combined with a
highly-optimized implementation of the low-level ﬁeld and
group arithmetic.
6. ACKNOWLEDGEMENTS
Zhe Liu is supported by the Fonds National de la Recher-
che (FNR) Luxembourg under AFR grant no. 1359142.
Hwajeong Seo is supported by the MSIP (Ministry of Sci-
ence, ICT and Future Planning), Korea, under the ITRC
(Information Technology Research Center) support program
(NIPA-2014-H0301-14-1048) supervised by the NIPA (Na-
tional IT Industry Promotion Agency.
Xinyi Huang is supported by National Natural Science
Foundation of China (61472083, U1405255, 61202450), Fok
Ying Tung Education Foundation (141065), Ph.D. Programs
Foundation of the Ministry of Education of China (2012350
3120001), Program for New Century Excellent Talents in
Fujian University (JA14067), Distinguished Young Scholars
Fund of Department of Education, Fujian Province, China
(JA13062).
7. REFERENCES
[1] I. F. Akyildiz and M. C. Vuran. Wireless Sensor Networks.
John Wiley and Sons, 2010.
[2] D. J. Bernstein. Curve25519: New Diﬃe-Hellman speed
records. In Public Key Cryptography — PKC 2006, vol.
3958 of Lecture Notes in Computer Science, pp. 207–228.
Springer Verlag, 2006.
[3] D. J. Bernstein, P. Birkner, M. Joye, T. Lange, and
C. Peters. Twisted Edwards curves. In Progress in
Cryptology — AFRICACRYPT 2008, vol. 5023 of Lecture
Notes in Computer Science, pp. 389–405. Springer Verlag,
2008.
[4] D. J. Bernstein and T. Lange. SafeCurves: Choosing safe
curves for elliptic-curve cryptography. Avialable online at
http://safecurves.cr.yp.to, 2013.
[5] C. P. Gouvˆea and J. L´opez. Software implementation of
pairing-based cryptography on sensor networks using the
MSP430 microcontroller. In Progress in Cryptology —
INDOCRYPT 2009, vol. 5922 of Lecture Notes in
Computer Science, pp. 248–262. Springer Verlag, 2009.
[6] J. Großsch¨adl. A family of implementation-friendly MoTE
elliptic curves. Technical report TR-LACS-2013-01,
Laboratory of Algorithmics, Cryptology and Security
(LACS), University of Luxembourg, Luxembourg, 2013.
[7] N. Gura, A. Patel, A. S. Wander, H. Eberle, and S. Chang
Shantz. Comparing elliptic curve cryptography and RSA on
8-bit CPUs. In Cryptographic Hardware and Embedded
Systems — CHES 2004, vol. 3156 of Lecture Notes in
Computer Science, pp. 119–132. Springer Verlag, 2004.
[8] D. R. Hankerson, A. J. Menezes, and S. A. Vanstone. Guide
to Elliptic Curve Cryptography. Springer Verlag, 2004.
[9] G. Hinterw¨alder, C. Paar, and W. P. Burleson. Privacy
preserving payments on computational RFID devices with
application in intelligent transportation systems. In Radio
Frequency Identiﬁcation Security and Privacy Issues —
RFIDSec 2012, vol. 7739 of Lecture Notes in Computer
Science, pp. 109–122. Springer Verlag, 2012.
[10] G. Hinterw¨alder, A. Moradi, M. Hutter, P. Schwabe, and
C. Paar. Full-size high-security ECC implementation on
MSP430 microcontrollers. In Progress in Cryptology —
LATINCRYPT 2014, vol. 8895 of Lecture Notes in
Computer Science, pp. 31–47. Springer Verlag, 2015.
[11] H. Hi¸sil, K. K.-H. Wong, G. Carter, and E. Dawson.
Twisted Edwards curves revisited. In Advances in
Cryptology — ASIACRYPT 2008, vol. 5350 of Lecture
Notes in Computer Science, pp. 326–343. Springer Verlag,
2008.
[12] C. Lederer, R. Mader, M. Koschuch, J. Großsch¨adl,
A. Szekely, and S. Tillich. Energy-eﬃcient implementation
of ECDH key exchange for wireless sensor networks. In
Information Security Theory and Practice — WISTP
2009, vol. 5746 of Lecture Notes in Computer Science, pp.
112–127. Springer Verlag, 2009.
[13] A. Liu and P. Ning. TinyECC: A conﬁgurable library for
elliptic curve cryptography in wireless sensor networks. In
Proceedings of the 7th International Conference on
Information Processing in Sensor Networks (IPSN 2008),
pp. 245–256. IEEE Computer Society, 2008.
[14] Z. Liu, J. Großsch¨adl, L. Li, and Q. Xu. Energy-eﬃcient
elliptic curve cryptography for MSP430-based wireless
sensor nodes. Preprint, submitted for publication, 2015.
[15] Z. Liu, J. Großsch¨adl, and D. S. Wong. Low-weight primes
for lightweight elliptic curve cryptography on 8-bit AVR
processors. In Information Security and Cryptology —
INSCRYPT 2013, vol. 8567 of Lecture Notes in Computer
Science, pp. 217–235. Springer Verlag, 2014.
[16] Z. Liu, E. Wenger, and J. Großsch¨adl. MoTE-ECC:
Energy-scalable elliptic curve cryptography for wireless
sensor networks. In Applied Cryptography and Network
Security — ACNS 2014, vol. 8479 of Lecture Notes in
Computer Science, pp. 361–379. Springer Verlag, 2014.
[17] J. Lopez and J. Zhou. Wireless Sensor Network Security.
IOS Press, 2008.
[18] L. Marin, A. J. Jara, and A. F. G´omez-Skarmeta. Shifting
primes: Extension of pseudo-Mersenne primes to optimize
ECC for MSP430-based future Internet of things devices.
In Availability, Reliability and Security for Business,
Enterprise and Health Information Systems, vol. 6908 of
Lecture Notes in Computer Science, pp. 205–219. Springer
Verlag, 2011.
[19] P. L. Montgomery. Speeding the Pollard and elliptic curve
methods of factorization. Mathematics of Computation,
48(177):243–264, Jan. 1987.
[20] C. Pendl, M. Pelnar, and M. Hutter. Elliptic curve
cryptography on the WISP UHF RFID tag. In RFID
Security and Privacy — RFIDSec 2011, vol. 7055 of
Lecture Notes in Computer Science, pp. 32–47. Springer
Verlag, 2012.
[21] H. Seo, Y. Lee, H. Kim, T. Park, and H. Kim. Binary and
prime ﬁeld multiplication for public key cryptography on
embedded microprocessors. Security and Communication
Networks, 7(4):774–787, Apr. 2014.
[22] H. Seo, K.-A. Shim, and H. Kim. Performance enhancement
of TinyECC based on multiplication optimizations. Security
and Communication Networks, 6(2):151–160, Feb. 2013.
[23] P. Szczechowiak, L. B. Oliveira, M. Scott, M. Collier, and
R. Dahab. NanoECC: Testing the limits of elliptic curve
cryptography in sensor networks. In Wireless Sensor
Networks — EWSN 2008, vol. 4913 of Lecture Notes in
Computer Science, pp. 305–320. Springer Verlag, 2008.
[24] Texas Instruments, Inc. MSP430x1xx Family User’s Guide
(Rev. F). Manual, vailable for download at
http://www.ti.com/lit/ug/slau049f/slau049f.pdf, 2006.
[25] H. Wang, B. Sheng, and Q. Li. Elliptic curve
cryptography-based access control in sensor networks.
International Journal of Security and Networks,
1(3–4):127–137, Dec. 2006.
[26] E. Wenger. Hardware architectures for MSP430-based
wireless sensor nodes performing elliptic curve
cryptography. In Applied Cryptography and Network
Security — ACNS 2013, vol. 7954 of Lecture Notes in
Computer Science, pp. 290–306. Springer Verlag, 2013.
[27] E. Wenger and M. Werner. Evaluating 16-bit processors for
elliptic curve cryptography. In Smart Card Research and
Advanced Applications — CARDIS 2011, vol. 7079 of
Lecture Notes in Computer Science, pp. 166–181. Springer
Verlag, 2011.