eval
: This evaluation oracle takes as input a key-
word ω ∈ W and two ciphertext C1 and C2, and re-
turns the result of MR-SHE.Eval(pk, hkω, C1, C2) where
hkω ← MR-SHE.HomKeyGen(pk, sk, ω). Moreover, if
either C1 ∈ D or C2 ∈ D, and the return of this or-
acle is not ⊥ (say C), then this oracle updates D ←
D ∪ {C}.
Next, we deﬁne keyword privacy which guarantees that no
information of keyword is revealed from ciphertexts. As in
the case of data privacy, we need to guarantee that the ho-
momorphic operations do not aﬀect keyword privacy. We
remark that an adversary chooses a plaintext only when the
homomorphic operation is performed to the challenge ci-
phertext (or its related ciphertexts) due to consistency. Oth-
erwise, the adversary always wins the game as follows: the
adversary computes of a ciphertext using ω∗
0 and sends it and
the challenge ciphertext (encrypted by ω∗
b where b ∈ {0, 1})
to the evaluation oracle. If the return is not ⊥, then b = 0
and b = 1 otherwise. Moreover, due to the same reason, the
adversary is not allowed to obtain homomorphic operation
keys of ω∗
1 . That is, if the adversary is allowed to
0 and ω∗
Expkeyword-privacy
0 , ω∗
1 , M ∗, st) ← AO(pk)
MR-SHE,A (κ) :
(pk, sk) ← MR-SHE.KeyGen(1κ); D ← ∅
(ω∗
b $← {0, 1}; C ∗ ← MR-SHE.Enc(pk, ω∗
D ← D ∪ {C ∗} b′ ← AO(C ∗, st)
if b = b′ then return 1
else return 0
b , M ∗)
dec
Here, O is a set of oracles deﬁned as O := {OMR-SHE
·), OMR-SHE
trapdoor (pk, sk, ·),OMR-SHE
OMR-SHE
as follows.
(pk, sk,
(pk, ·, ·),
(pk, ·, ·)}. Each oracle is deﬁned
(pk, ·, ·, ·),O′MR-SHE
(pk, sk, ·, ·), OMR-SHE
revhk
eval
eval
test
OMR-SHE
revhk
: This homomorphic operation key reveal oracle
takes as input a keyword ω ∈ W, and returns hkω ←
MR-SHE.HomKeyGen(pk, sk, ω). We remark that ω∗ is
allowed to be an input of this oracle.
OMR-SHE
dec
: This decryption oracle takes as input a keyword
ω ∈ W and a ciphertext C where C 6∈ D, and outputs
the result of MR-SHE.Dec(pk, sk, ω, C). If ω∗ has been
input to the OMR-SHE
oracle, then this oracle returns
⊥.
revhk
OMR-SHE
trapdoor : This trapdoor oracle takes as input a keyword
ω ∈ W, and returns tω ← MR-SHE.Trapdoor(pk, sk, ω).
We remark that ω∗ is allowed to be an input of this or-
acle.
OMR-SHE
test
: This test oracle takes as input a keyword ω ∈
W and a ciphertext C, and returns the result of MR-SHE.Test
(pk, tω, C) where tω ← MR-SHE.Trapdoor(pk, sk, ω).
We remark that (ω∗, C ∗) is allowed to be an input of
this oracle.
OMR-SHE
eval
: This evaluation oracle takes as input a key-
word ω ∈ W and two ciphertext C1 and C2, and re-
turns the result of MR-SHE.Eval(pk, hkω, C1, C2) where
hkω ← MR-SHE.HomKeyGen(pk, sk, ω). Moreover, if
either C1 ∈ D or C2 ∈ D, and the return of this or-
acle is not ⊥ (say C), then this oracle updates D ←
D ∪ {C}.
We say that MR-SHE is keyword private if the advantage
Advkeyword-privacy
MR-SHE,A (κ) = 1] − 1/2|
is negligible for any PPT adversary A.
MR-SHE,A (κ) := | Pr[Expkeyword-privacy
2203. PROPOSED MR-SHE SCHEME
3.2 Our Construction
3.1 High-level Description
First, we brieﬂy introduce the Gentry IBE scheme [19]
and the KH-IBE scheme [14] which is based on the Gentry
IBE scheme as follows. Let a plaintext M be encrypted by
an identity ID and a randomness s. Then, (c1, c2, c3, c4) =
1g−sID, e(g, g)s, M · e(g, h1)−s, e(g, h2)se(g, h3)sβ) is a ci-
(gs
phertext of the Gentry IBE scheme where β = Γhk(c1, c2, c3)
and Γhk is a target collision resistance (TCR) hash func-
tion. The 4th component, e(g, h2)se(g, h3)sβ, is used for
integrity check for achieving the CCA security. In the KH-
IBE scheme, c4 is modiﬁed to be c4 = e(g, h2)s (which is ex-
plained later) and a new component τ = f (c5) is added to a
ciphertext where c5 = e(g, h3)se(g, h4)sβ, β = Γhk(c1, c2, c3,
c4), and f is a smooth function. The smoothness is in-
troduced for compressing the size of a ciphertext. As in the
Gently IBE, c5 is required for integrity check and for achiev-
ing the CCA security. A decryption key of ID is (rID,i, hID,i)
where hID,i = (hig−rID,i )1/(α−ID) (i = 1, 2, 3, 4) and α is the
master secret key managed by the key generation center.
Then, a part of decryption key ((rID,3, hID,3), (rID,4, hID,4)) is
regarded as a homomorphic operation key since one who
has the key can run the integrity check of a ciphertext,
where τ = f (e(c1, hID,3hδ
) or not, and can
reconstruct a ciphertext after homomorphic operation. In
the meantime, one cannot decrypt the ciphertext since it
requires (rID,1, hID,1). Due to (rID,2, hID,2) and c4, a CCA1
(i.e., lunch-time) security is guaranteed against ones who
have the homomorphic operation key only.
rID,3+rID,4δ
2
ID,4)c
Next, we explain our strategy to construct MR-SHE as
follows. As in the Abdalla et al. construction [2], in our
scheme a keyword is regarded as an identity of the KH-IBE
scheme. In the Abdalla et al. construction a random plain-
text (say R) is encrypted, a decryption key is regarded as a
trapdoor, and the test algorithm returns 1 if the decryption
result of the IBE ciphertext by using the trapdoor is R. So,
R is required to be a part of ciphertext. In the MR-SHE
usage, the corresponding plaintext needs to be hidden. To
overcome this problem, we pointed out the integrity check
can be used for secure searching since this procedure essen-
tially checks whether a ciphertext is valid under a speciﬁc
ID or not. This allows us to run the test algorithm with-
out knowing the corresponding plaintext. So, a homomor-
phic operation key of the KH-IBE scheme is regarded as a
trapdoor, and the integrity check equation of the evaluation
algorithm of KH-IBE is employed to be the test algorithm.
Due to this setting, we can encrypt a plaintext M , and M
is not required to be a part of a ciphertext.
Other problem to be solved is that the corresponding iden-
tity ID is required for the evaluation algorithm of the original
KH-IBE scheme. In our usage, if a keyword ω is required
for evaluation, then, no keyword privacy is guaranteed. For
achieving keyword privacy, we add gω to a homomorphic op-
eration key for evaluating ciphertexts without knowing the
corresponding keyword ω. Then the server that runs the
evaluation algorithm can compute gs
1 gω)−s by
choosing s $← Zp. We emphasize that this modiﬁcation does
not aﬀect anonymity (and other security requirements). We
will explain the reason later.
1g−sω = (g−1
Let G and GT be groups of prime order p, e : G × G → GT
be a bilinear map, W := Zp be the keyword space, M := GT
be the message space, {Γ = Γhk : G4 → {0, 1, . . . , p − 1} |
hk ∈ HK} be a TCR hash family, and f : GT → Y is a
smooth function.
In the KH-IBE scheme and the original Gentry IBE scheme,
assume that there is only one key for each identity due to the
security proofs. So, we also assume that keys {(rω,i, hω,i)}i=1,2,3,4
are generated only once, and each algorithm shares these
keys. For example, {(rω,i, hω,i)}i=1,2,3,4 is the decryption
key and a part of this key, {(rω,i, hω,i)}i=3,4, is the homo-
morphic operation key or the trapdoor. So, our scheme is
stateful. For the sake of simplicity, we give algorithms when
these are run for the ﬁrst time. Our proposed scheme is
given as follows.
MR-SHE.KeyGen(1κ) : Choose hk $← HK, g $← G, h1, h2, h3,
$← G, and α $← Zp, and compute g1 ← gα. Return
h4
pk = (g, g1, h1, h2, h3, h4, hk, f ) and sk = α.
MR-SHE.HomKeyGen(pk, sk, ω) : For i = 3, 4, choose rω,i
$←
Zp and compute hω,i ← (hig−rω,i )1/(α−ω), and return
hkω = (gω, (rω,3, hω,3), (rω,4, hω,4)).
MR-SHE.Trapdoor(pk, sk, ω) : For i = 3, 4, choose rω,i
$←
Zp and compute hω,i ← (hig−rω,i )1/(α−ω), and return
tω = (gω, (rω,3, hω,3), (rω,4, hω,4)).
MR-SHE.Enc(pk, ω, M ) : Choose s $← Zp and compute c1 ←
gs
1g−sω, c2 ← e(g, g)s, c3 ← M · e(g, h1)−s, c4 ←
e(g, h2)s, δ ← Γhk(c1, c2, c3, c4), and c5 ← e(g, h3)se(g, h4)sδ.
Compute τ ← f (c5) and return C = (c1, c2, c3, c4, τ ).
MR-SHE.Test(pk, tω, C) : Parse tω as (gω, (rω,3, hω,3), (rω,4,
hω,4)) and C as (c1, c2, c3, c4, τ ). Compute δ ← Γhk(c1,
c2, c3, c4).
) holds,
then return 1 and 0 otherwise.
If τ = f (e(c1, hω,3hδ
ω,4)crω,3+rω,4δ
2
MR-SHE.Dec(pk, sk, ω, C) : Parse sk = α and C = (c1, c2, c3,
$← Zp and compute
c4, τ ). For i = 1, 2, 3, 4, choose rω,i
hω,i ← (hig−rω,i )1/(α−ω). Compute δ ← Γhk(c1, c2, c3, c4),
4 ← e(c1, hω,2)crω,2
c′
.
If c′
turn M ← c3 · e(c1, hω,1)crω,1
4 6= c4 or τ 6= f (c5) then return ⊥. Otherwise, re-
, and c5 ← e(c1, hω,3hδ
ω,4)crω,3+rω,4δ
.
2
2
2
MR-SHE.Eval(pk, hkω, C1, C2) : Parse hkω as (gω, (rω,3, hω,3),
(rω,4, hω,4)), C1 as (c1,1, c1,2, c1,3, c1,4, τ1), and C2 as
(c2,1, c2,2, c2,3, c2,4, τ2).
Integrity Check: Compute δ1 ← Γhk(c1,1, c1,2, c1,3,
ω,4)crω,3+rω,4δ1
c1,4), c1,5 = e(c1,1, hω,3hδ1
, δ2 ← Γhk(c2,1,
ω,4)crω,3+rω,4δ2
c2,2, c2,3, c2,4), and c2,5 = e(c2,1, hω,3hδ2
.
2,2
If τ1 6= f (c1,5) or τ2 6= f (c2,5) then return ⊥.
1,2
Homomorphic Operation: Choose s $← Zp, and
compute c1 ← c1,1c2,1 · gs
1g−sω, c2 ← c1,2c2,2 · e(g, g)s,
c3 ← c1,3c2,3 · e(g, h1)−s, c4 ← c1,4c2,4 · e(g, h2)s, δ ←
Γhk(c1, c2, c3, c4), c5 ← e(c1, hω,3hδ
, and
τ ← f (c5), and return C = (c1, c2, c3, c4, τ ).
ω,4)crω,3+rω,4δ
2
2210 and ω∗
Here, we explain the reason why our modiﬁcation, adding
gω to a trapdoor and a homomorphic operation key, does not
aﬀect anonymity as follows. In the deﬁnition of anonymity,
an adversary chooses challenge keywords ω∗
1 . Even
though, the adversary cannot distinguish whether the chal-
0 or ω∗
lenge ciphertext is computed by ω∗
1 . That is, the
adversary can compute gω∗
0 and gω∗
1 for the ﬁrst place, and
therefore our modiﬁcation does not aﬀect anonymity. Nev-
ertheless, one may think that the adversary (or the server)
can check whether a trapdoor (or a homomorphic operation
key) is computed by a keyword ω′ or not by checking gω′
is
equal to gω or not. This observation is true. However, the
server can do the same thing even if the server is not allowed
to obtain gω since the server is allowed to search ciphertexts.
First, the server chooses a keyword ω′ and computes a ci-
phertext associated with ω′. Second the server runs the test
algorithm by using a trapdoor sent from the receiver. Fi-
nally, the server knows whether the trapdoor is computed by
ω′ or not from the evaluation result. Since we delegate the
search capability to the server, this information leakage is
acceptable, and theoretically impossible to be handled, even
if searchable encryption secure keyword guessing attacks [29,
16] is employed.
1
1 g−s′ω′
1g−sω, · · · ) and C2 := (gs′
One may have a concern if the evaluation algorithm forcibly
performs the homomorphic operation even though C1 :=
(gs
, · · · ) are encrypted by
using diﬀerent keywords ω and ω′, respectively. In this case,
the ﬁrst component of the ciphertext c1 is represented as
c1 := gs+s′+s′′
g−(s+s′′ω−s′ω′) for some randomness s′′ cho-
sen in the evaluation algorithm. Then c1 can be represented
as c1 = gs+s′+s′′
where ω′′ := −((s + s′)ω +
s′ω′)/(s+s′+s′′) is an unknown keyword. Let a receiver send
a query for ciphertexts associated with ω. Then, it is nat-
ural that the receiver decrypts returned ciphertexts by us-
ing {(rω,i, hω,i)}i=1,2,3,4.4 Then, since an artiﬁcially-mixed
ciphertext is associated with a random keyword ω′′, the de-
cryption algorithm rejects it with overwhelming probability,
and the receiver can recognize whether a mis-operation hap-
pens in the evaluation phase.
g−(s+s′+s′′)ω′′
1
3.3 Security Analysis
Security proofs of following theores are given in the Ap-
pendix.
Theorem 3.1
(Consistency). The proposed MR-SHE
scheme is consistent if f is a smooth function and the dis-
crete logarithm assumption holds.
Theorem 3.2
(Data Privacy). The MR-SHE scheme
is data private if the truncated decision q-ABDHE assump-
tion holds.
Theorem 3.3
(Keyword Privacy). The MR-SHE
scheme is keyword private if the truncated decision q-ABDHE
assumption holds.
One may expect that MR-SHE can be generically con-
structed from anonymous KH-IBE, as in the Abdalla et al.
construction [2]. However, such a construction is not con-
sistent in the sense of provable security. More precisely, in
the proof of the Abdalla et al. construction we can obtain
a decryption key from an adversary of consistency that can
decrypt the challenge ciphertext since a trapdoor is a de-
cryption key. On the other hand, since a trapdoor is just
a part of a decryption key, we do not decrypt the challenge
ciphertext even if the adversary breaks consistency of our
MR-SHE scheme.
It seems some other conditions are re-
quired for a generic construction, and it is an interesting
future work of this paper.
4. EVALUATING MULTIPLE CIPHERTEXTS
BY SINGLE EXECUTION
In the MR-SHE.Eval algorithm, two ciphertexts, C1 and
C2, are input. In this section, we discuss how to evaluate
multiple (i.e., more than two) ciphertexts (C1, C2, . . . , CL)
where L is a polynomial of the security parameter, by single