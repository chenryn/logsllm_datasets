assuming physical faults and there are no details on how the faults
are injected. Based upon the number of faulty vinegar values, they
give the complexities for the attacks. For UOV, 59 Bytes of faulty
vinegar are needed for full key recovery. They also provide the
results for LUOV which are the only fault attack results so far on
LUOV scheme. Due to the large parameter sizes, the results are
not very promising to obtain a practical attack to target real life
deployments. Assuming 171 Bytes and 169 Bytes of faulty vinegar
values for LUOV-8-63-256 and LUOV-8-49-242, the complexities
drop from 2181 and 2192 to 2127 and 2109, respectively.
The authors have not demonstrated the fault attack. In practice,
fixing a large contiguous portion of vinegar values by physical fault
injection or Rowhammer is very hard to achieve if at all possible.
Our attack scenario is different from those presented in exist-
ing works [5, 14, 23, 30]. We are inducing faults in the last stage
of the signing algorithm in the linear transformation T of LUOV
scheme. We have actually verified the assumption, i.e., we imple-
mented an attack that induces bit flips in T . Note that the attack
does not have any control in the position of the bit flips as within T
as assumed by our attack scenario. Also, we have the ability to de-
tect if the bit flip was in T or not. We have practically demonstrated
this model by inducing the bit flips using the Rowhammer attack
and not just assuming the faults as in previous research. To the
best of our knowledge, this is the first work which actually induces
bit flips (faults) through software in post-quantum cryptographic
schemes. The goal here is to make use of the faulty signatures to
track back to the flipped bits and leak the secret bits of T . We do
not need any correct and faulty signature pairs. Rather we are able
to correct the faulty signature by modifying the public signature
values and verifying the modified signatures using signature ver-
ification mechanism as an oracle. Some recovered bits from this
bit-tracing attack are used to decrease the complexity of the solu-
tion of Multivariate Quadratic (MQ) system to a practically solvable
smaller MQ and Multivariate Linear (ML) systems by using a divide
and conquer attack to recover the rest of the private key bits. We
call this hybrid attack as QuantumHammer.
2 BACKGROUND
2.1 Rowhammer Attack
The Rowhammer attack is a software-induced hardware-fault attack
discovered in 2014 by Kim et al. [27]. Data is stored in the form
of bits in the DRAMs in memory cells, composed of capacitors
and transistors. A charged capacitor represents a binary one and
a discharged capacitor a binary zero or vice versa according to
the convention. There is a threshold to decide the value of the bit
according to the voltage level. These cells are placed very close to
each other, generally 64K cells in a row. As capacitors leak charge
over time, they need to be refreshed after a certain time period,
typically after every 64 ms. But if a DRAM row is activated rapidly,
it can affect the neighboring rows due to induction and refresh rate
of 64 ms might not be enough to maintain the state of the capacitor.
This phenomena causes the voltage levels to cross the threshold
which results in bit flips.
As, the DRAM is shared between different processes or virtual
machines, this bit flipping can lead to serious consequences. To
perform a successful Rowhammer attack from an attacker process
to a victim process sharing the same DRAM, the victim has to
be located at one of the vulnerable DRAM rows identified by the
attacker. Therefore, the attacker first identifies the rows vulnerable
to Rowhammer and then free them from the process. Next step is
to either wait for the victim to get that memory space assigned by
the OS or force the victim to be placed at these rows. There are
various techniques in the literature to achieve this, i.e. spraying
[22, 39, 46], grooming [43] and memory-waylaying [21, 31, 47]. The
attack works because the bit flips are highly reproducible, which
means once the attacker has identified a list of bad cells in the
DRAM, she can flip the values of the same cells causing a bit flip
in the victim process. Previous research shows that Rowhammer
attack is applicable in cloud scenarios [10] and heterogeneous FPGA-
CPU platforms[45]. It can be launched remotely over the network
[32, 42]. Rowhammer is even applicable on ECC chips [11] and
DDR4 memories with Target Row Refresh (TRR) mitigations [18].
2.2 Oil and Vinegar Schemes
Consider a system of 𝑚 Multivariate Quadratic (MQ) polynomials
with 𝑛 variables 𝑥1, . . . , 𝑥𝑛
𝑝𝑘(𝑥1, . . . , 𝑥𝑛) =
𝑖 𝑗 · 𝑥𝑖𝑥 𝑗 + 𝑛∑︁
𝑛∑︁
𝑛∑︁
𝑝𝑘
𝑖
· 𝑥𝑖 + 𝑝𝑘
0
(1)
𝑝𝑘
𝑖=1
𝑗=𝑖
𝑖=1
Note that, since we are using boolean equations, we reserved the
exponent for use as an index.
Solving the MQ system is conjectured hard for sufficiently large
𝑚 and 𝑛. The MQ challenge by Yasuda et al. [48] gives a way to
gauge the difficulty of solving real-life MQ instances with moderate
size instances. A multivariate signature scheme may be build around
the MQ system: the coefficients represent the public key P, the
system is solved for the hash of the message, the variable values
that satisfy the equation (the solution to the MQ system) represents
the signature. It is hard to solve this system and find a signature
for a desired message unless we have a trapdoor P = S ◦ F ◦ T ,
where S and T are the secret invertible linear transformations and
F is the secret quadratic map having a special structure given as
𝑃𝑘
1 =
𝑓 𝑘(𝑥1, . . . , 𝑥𝑛) =
· 𝑥𝑖 + 𝛾𝑘
𝛽𝑘
𝑖
(2)
𝑣∑︁
𝑛∑︁
𝑖=1
𝑗=𝑖
𝑖 𝑗 · 𝑥𝑖𝑥 𝑗 + 𝑛∑︁
𝛼𝑘
𝑖=1
𝑖 𝑗, 𝛽𝑘
Here, 𝑛 variables 𝑥1, . . . , 𝑥𝑛 are divided into two parts, 𝑥1, . . . , 𝑥𝑣 as
the vinegar variables and 𝑥𝑣+1, . . . , 𝑥𝑛 as the 𝑚 oil variables where
𝑛 = 𝑣 + 𝑚. The parameters 𝛼𝑘
𝑖 and 𝛾𝑘 are chosen randomly
from a finite field F where 𝑘 ranges from 1 to 𝑚. The specialty of
this structure is that there is no quadratic term with multiplication
of two oil variables. So, if vinegar variables are chosen randomly
and inserted into the system, it collapses to a linear system which
can be easily solved for the remaining oil variables using Gaussian
elimination. Note that, oil variables are public whereas vinegars are
kept secret. The structure of F is then hidden using a secret linear
transformation T . The detailed explanation of the LUOV signature
schemes which utilize this structure is given in Section 2.3.
The first Oil and Vinegar scheme was proposed by Patarin [35]
in 1997 which was broken by Kipnis and Shamir [29] in 1998. The
modified version of the scheme named UOV was then proposed by
Kipnis et al. [28] in 1999. The main difference was to unbalance the
number of oil and vinegar variables by increasing the number of
vinegar variables to render the attack ineffective.
2.3 LUOV
The public keys of UOV are prohibitively large to prevent wide-
scale deployment. This motivated another proposal named LUOV
by Beullens et al. [2]. LUOV was submitted to NIST for the PQC
standardization process and is currently competing in Round 2. One
of the main innovation of LUOV is to reduce the large key sizes
in UOV in the way that keys are generated and stored. Instead of
storing and transferring large public keys every time, LUOV makes
use of the idea that generating the keys whenever needed using a
sponge type hash function and using a private seed for the private
key and public seed and additional 𝑄2 ∈ F𝑚×𝑚(𝑚+1)/2
matrix for
the public key. Here we give a brief description of the LUOV scheme.
A detailed description and supporting documentation can be found
in [3].
2.3.1 Key Generation. process is depicted in Figure 1. Briefly,
𝑝𝑟𝑖𝑣𝑎𝑡𝑒_𝑠𝑒𝑒𝑑 is hashed by a sponge type hash function H generat-
ing 𝑝𝑢𝑏𝑙𝑖𝑐_𝑠𝑒𝑒𝑑 and 𝑣 × 𝑚 private binary secret linear transforma-
tion matrix T . Another hash function G generates public parame-
2 , 𝐿 ∈ F𝑚×𝑛
ters 𝐶 ∈ F𝑚
by hashing the
𝑝𝑢𝑏𝑙𝑖𝑐_𝑠𝑒𝑒𝑑. A 𝑣 ×𝑣 upper triangular matrix 𝑃𝑘
1 and 𝑣 ×𝑚 matrix 𝑃𝑘
2
are generated by 𝑓 𝑖𝑛𝑑𝑃𝑘
2 algorithms respectively using
𝑄1 and an integer counter 𝑘. The details of the algorithms can be
found in [3]. In this work, we do not need the details of generation
of 𝑃𝑘
2 as given fixed
and 𝑄1 ∈ F𝑚×𝑣(𝑣+1)/2+𝑣𝑚
2 , hence, we will consider 𝑃𝑘
1 and 𝑓 𝑖𝑛𝑑𝑃𝑘
1 and 𝑃𝑘
1 and 𝑃𝑘
2
2
2
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)𝑣,𝑚
2
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
𝑡𝛼,𝑗
𝛾=1
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
, 𝑃𝑘
2 =
3 ( 𝑗, 𝑖)
, 𝑖 = 𝑗
, 𝑖 < 𝑗
𝑣∑︁
𝛼=1
𝛼∑︁
𝑙=1
3 (2, 2),
𝑄2(𝑘,𝛽𝑖,𝑗) =
· · ·
· · ·
. . .
· · ·
𝑎𝑘
1,2
𝑎𝑘
2,2
...
0
𝑎𝑘
1,1
0
...
0
1 𝑇 + 𝑇𝑇 𝑃𝑘
𝑏𝑘
1,1
𝑏𝑘
2,1
...
𝑏𝑘
𝑣,1
· · ·
· · ·
. . .
· · ·
𝑏𝑘
1,𝑚
𝑏𝑘
2,𝑚
...
𝑏𝑘
𝑣,𝑚
2 are given as:
𝑏𝑘
1,2
𝑏𝑘
2,2
...
𝑏𝑘
𝑣,2
3 is generated by the formula 𝑃𝑘
3 =
2 where 𝑘 = 1, . . . , 𝑚. Therefore, (𝑖, 𝑗)𝑡ℎ element of
random binary matrices. 𝑃𝑘
1 and 𝑃𝑘
𝑎𝑘
1,𝑣