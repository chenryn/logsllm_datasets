    PV =VG =Fmt =Attr=PSize =PFree
    /dev/sdb1 =new_vg=lvm2=a- =17.14G=17.14G
    /dev/sdc1 =new_vg=lvm2=a- =17.14G=17.09G
    /dev/sdd1 =new_vg=lvm2=a- =17.14G=17.14G
    ```
:::
您可以使用 `lvs`{.literal} 或 `vgs`{.literal} 命令的 `-P`{.literal}
参数显示在其他情况下不会输出中的失败卷的信息。
有关显示参数的完整列表，请查看 `pvs`{.literal}(8)、`vgs`{.literal}(8)和
`lvs`{.literal}(8)man page。
卷组字段可以与物理卷（和物理卷片段）字段或逻辑卷（和逻辑卷片段）字段混合，但是无法混合物理卷和逻辑卷字段。例如：以下命令可显示每行物理卷的输出结果。
``` literallayout
# vgs -o +pv_name
  VG     #PV #LV #SN Attr   VSize  VFree  PV
  new_vg   3   1   0 wz--n- 51.42G 51.37G /dev/sdc1
  new_vg   3   1   0 wz--n- 51.42G 51.37G /dev/sdd1
  new_vg   3   1   0 wz--n- 51.42G 51.37G /dev/sdb1
```
:::
::: section
::: titlepage
# []{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#ref_lvm-object-display-fields-customizing-lvm-display}LVM 对象显示字段 {.title}
:::
这部分提供了一组表，列出您可以使用 `pvs`{.literal}、`vgs`{.literal} 和
`lvs`{.literal} 命令显示的 LVM 对象信息。
为方便起见，字段名称前缀如果与命令的默认名称匹配就可以省略。例如，在
`pvs`{.literal} 命令中，`name`{.literal} 代表
`pv_name`{.literal}，但使用 `vgs`{.literal} 命令时，`name`{.literal}
将解释为 `vg_name`{.literal}。
执行以下命令等同于执行 `pvs -o pv_free`{.literal}。
``` literallayout
# pvs -o free
  PFree
  17.14G
  17.09G
  17.14G
```
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`pvs`{.literal}、`vgs`{.literal} 和 `lvs`{.literal}
输出中的属性字段中的字符数量可能会增加。现有字符字段不会改变位置，但可能会在末尾添加新字段。在编写搜索特定属性字符的脚本时，您应该考虑这一点，根据其相对于字段开头的位置搜索字符，而不是其与字段末尾的相对位置。例如：要在
`lv_attr`{.literal} 字段的起始字节中搜索字符
`p`{.literal}，您可以搜索字符串 \"\^/...​...​..p/\"，但您不应该搜索字符串
\"/\*p\$/\"。
:::
[表 9.1 "pvs
命令显示字段"](#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#tb-table-pvs-fields "表 9.1. pvs 命令显示字段"){.xref}
列出 `pvs`{.literal}
命令的显示参数，以及它在标头显示和描述字段中显示的字段名称。
::: table
[]{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#tb-table-pvs-fields}
**表 9.1. pvs 命令显示字段**
::: table-contents
  参数                            标头      描述
  ------------------------------- --------- ------------------------------------------------------------
  `dev_size`{.literal}            DevSize   创建物理卷的基本设备的大小
  `pe_start`{.literal}            1st PE    在基础设备中调整到第一个物理扩展的起始位置
  `pv_attr`{.literal}             Attr      物理卷状态：(a)llocatable 或 e(x)ported.
  `pv_fmt`{.literal}              Fmt       物理卷的元数据格式（`lvm2`{.literal} 或 `lvm1`{.literal}）
  `pv_free`{.literal}             PFree     物理卷中剩余的可用空间
  `pv_name`{.literal}             PV        物理卷名称
  `pv_pe_alloc_count`{.literal}   Alloc     已使用的物理扩展数目
  `pv_pe_count`{.literal}         PE        物理扩展数目
  `pvseg_size`{.literal}          SSize     物理卷的片段大小
  `pvseg_start`{.literal}         Start     物理卷片段的起始物理扩展
  `pv_size`{.literal}             PSize     物理卷的大小
  `pv_tags`{.literal}             PV 标签   附加到物理卷的 LVM 标签
  `pv_used`{.literal}             Used      目前物理卷中已经使用的空间量
  `pv_uuid`{.literal}             PV UUID   物理卷的 UUID
:::
:::
`pvs`{.literal} 命令默认显示以下字段：
`pv_name`{.literal}、`vg_name`{.literal}、`pv_fmt`{.literal}、`pv_attr`{.literal}、`pv_size`{.literal}、`pv_free`{.literal}。显示会根据
`pv_name`{.literal} 进行排序。
``` literallayout
# pvs
  PV         VG     Fmt  Attr PSize  PFree
  /dev/sdb1  new_vg lvm2 a-   17.14G 17.14G
  /dev/sdc1  new_vg lvm2 a-   17.14G 17.09G
  /dev/sdd1  new_vg lvm2 a-   17.14G 17.13G
```
在 `pvs`{.literal} 命令中使用 `-v`{.literal}
参数会将以下字段添加到默认显示中：
`dev_size`{.literal}、`pv_uuid`{.literal}。
``` literallayout
# pvs -v
    Scanning for physical volume names
  PV         VG     Fmt  Attr PSize  PFree  DevSize PV UUID
  /dev/sdb1  new_vg lvm2 a-   17.14G 17.14G  17.14G onFF2w-1fLC-ughJ-D9eB-M7iv-6XqA-dqGeXY
  /dev/sdc1  new_vg lvm2 a-   17.14G 17.09G  17.14G Joqlch-yWSj-kuEn-IdwM-01S9-XO8M-mcpsVe
  /dev/sdd1  new_vg lvm2 a-   17.14G 17.13G  17.14G yvfvZK-Cf31-j75k-dECm-0RZ3-0dGW-tUqkCS
```
您可以使用 `pvs`{.literal} 命令的 `--segments`{.literal}
参数显示每个物理卷片段的信息。一个片段就是一组扩展。查看片段在想查看逻辑卷是否碎片时很有用。
`pvs --segments`{.literal} 命令默认显示以下字段：
`pv_name`{.literal}、`vg_name`{.literal}、`pv_fmt`{.literal}、`pv_attr`{.literal}、`pv_size`{.literal}、`pv_free`{.literal}、`pvseg_start`{.literal}、`pvseg_size`{.literal}。该显示根据物理卷中的
`pv_name`{.literal} 和 `pvseg_size`{.literal} 进行排序。
``` literallayout
# pvs --segments
  PV         VG         Fmt  Attr PSize  PFree  Start SSize
  /dev/hda2  VolGroup00 lvm2 a-   37.16G 32.00M     0  1172
  /dev/hda2  VolGroup00 lvm2 a-   37.16G 32.00M  1172    16
  /dev/hda2  VolGroup00 lvm2 a-   37.16G 32.00M  1188     1
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G     0    26
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G    26    24
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G    50    26
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G    76    24
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G   100    26
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G   126    24
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G   150    22
  /dev/sda1  vg         lvm2 a-   17.14G 16.75G   172  4217
  /dev/sdb1  vg         lvm2 a-   17.14G 17.14G     0  4389
  /dev/sdc1  vg         lvm2 a-   17.14G 17.14G     0  4389
  /dev/sdd1  vg         lvm2 a-   17.14G 17.14G     0  4389
  /dev/sde1  vg         lvm2 a-   17.14G 17.14G     0  4389
  /dev/sdf1  vg         lvm2 a-   17.14G 17.14G     0  4389
  /dev/sdg1  vg         lvm2 a-   17.14G 17.14G     0  4389
```
您可以使用 `pvs -a`{.literal} 命令查看 LVM
检测到的设备，这些设备尚未初始化为 LVM 物理卷。
``` literallayout
# pvs -a
  PV                             VG     Fmt  Attr PSize  PFree
  /dev/VolGroup00/LogVol01                   --       0      0
  /dev/new_vg/lvol0                          --       0      0
  /dev/ram                                   --       0      0
  /dev/ram0                                  --       0      0
  /dev/ram2                                  --       0      0
  /dev/ram3                                  --       0      0
  /dev/ram4                                  --       0      0
  /dev/ram5                                  --       0      0
  /dev/ram6                                  --       0      0
  /dev/root                                  --       0      0
  /dev/sda                                   --       0      0
  /dev/sdb                                   --       0      0
  /dev/sdb1                      new_vg lvm2 a-   17.14G 17.14G
  /dev/sdc                                   --       0      0
  /dev/sdc1                      new_vg lvm2 a-   17.14G 17.09G
  /dev/sdd                                   --       0      0
  /dev/sdd1                      new_vg lvm2 a-   17.14G 17.14G
```
[表 9.2 "vgs
显示字段"](#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#tb-table-vgs-fields "表 9.2. vgs 显示字段"){.xref}
列出 `vgs`{.literal}
命令的显示参数，以及它在标头显示和描述字段中显示的字段名称。
::: table
[]{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#tb-table-vgs-fields}
**表 9.2. vgs 显示字段**
::: table-contents
  参数                          标头      描述
  ----------------------------- --------- ---------------------------------------------------------------------------------------
  `lv_count`{.literal}          #LV       卷组包含的逻辑卷数
  `max_lv`{.literal}            MaxLV     卷组中最多允许的逻辑卷数目（如果没有限制就是 0）
  `max_pv`{.literal}            MaxPV     卷组中最多允许的物理卷数目（如果没有限制就是 0）
  `pv_count`{.literal}          #PV       定义卷组的物理卷数目
  `snap_count`{.literal}        #SN       卷组包含的快照数
  `vg_attr`{.literal}           Attr      卷组状态：(w)riteable、(r)eadonly、resi(z)able、e(x)ported、(p)artial 和(c)lustered。
  `vg_extent_count`{.literal}   #Ext      卷组中的物理扩展数目
  `vg_extent_size`{.literal}    Ext       卷组中物理扩展的大小
  `vg_fmt`{.literal}            Fmt       卷组的元数据格式（`lvm2`{.literal} 或者 `lvm1`{.literal}）
  `vg_free`{.literal}           vfree     卷组中剩余可用空间大小
  `vg_free_count`{.literal}     Free      卷组中可用物理扩展数目
  `vg_name`{.literal}           VG        卷组名称
  `vg_seqno`{.literal}          seq       代表修正卷组的数
  `vg_size`{.literal}           VSize     卷组大小
  `vg_sysid`{.literal}          SYS ID    LVM1 系统 ID
  `vg_tags`{.literal}           VG Tags   附加到卷组中的 LVM 标签
  `vg_uuid`{.literal}           VG UUID   卷组的 UUID
:::
:::
`vgs`{.literal} 命令默认显示以下字段：
`vg_name`{.literal}、`pv_count`{.literal}、`lv_count`{.literal}、`snap_count`{.literal}、`vg_attr`{.literal}、`vg_size`{.literal}、`vg_free`{.literal}。显示根据
`vg_name`{.literal} 进行排序。
``` literallayout
# vgs
  VG     #PV #LV #SN Attr   VSize  VFree
  new_vg   3   1   1 wz--n- 51.42G 51.36G
```
在 `vgs`{.literal} 命令中使用 `-v`{.literal}
参数会将以下字段添加到默认显示中：
`vg_extent_size`{.literal}、`vg_uuid`{.literal}。
``` literallayout
# vgs -v
    Finding all volume groups
    Finding volume group "new_vg"
  VG     Attr   Ext   #PV #LV #SN VSize  VFree  VG UUID
  new_vg wz--n- 4.00M   3   1   1 51.42G 51.36G jxQJ0a-ZKk0-OpMO-0118-nlwO-wwqd-fD5D32
```
[表 9.3 "LVS
显示字段"](#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#tb-table-lvs-fields "表 9.3. LVS 显示字段"){.xref}
列出 `lvs`{.literal}
命令的显示参数，以及它在标头显示和描述字段中显示的字段名称。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在以后的 Red Hat Enterprise Linux 发行本中，`lvs`{.literal}
命令的输出结果可能会有所不同，以及输出中的附加字段。但是，这些字段的顺序将保持不变，所有附加字段也会在显示的末尾出现。
:::
::: table
[]{#assembly_customizing-lvm-display-configuring-and-managing-logical-volumes.html#tb-table-lvs-fields}
**表 9.3. LVS 显示字段**
::: table-contents
+---------------------------+-----------+---------------------------+
| 参数                      | 标头      | 描述                      |
+:==========================+:==========+:==========================+
| \* `chunksize`{.literal}  | Chunk     | 快照卷的单位大小          |
|                           |           |                           |
| \* `chunk_size`{.literal} |           |                           |
+---------------------------+-----------+---------------------------+
| `copy_percent`{.literal}  | Copy%     | 镜像卷的同步百分比 ;      |
|                           |           | 还在使用                  |
|                           |           | `pv_move`{.literal}       |
|                           |           | 命令移动物理扩展时使用    |
+---------------------------+-----------+---------------------------+
| `devices`{.literal}       | Devices   | 组成逻辑卷的基            |
|                           |           | 本设备：物理卷、逻辑卷以  |
|                           |           | 及启动物理扩展和逻辑扩展  |
+---------------------------+-----------+---------------------------+
| `lv_ancestors`{.literal}  | Ancestors | 对于                      |
|                           |           | 精简池快照，逻辑卷的祖先  |
+---------------------------+-----------+---------------------------+
| `                         | 后代      | 对于                      |
| lv_descendants`{.literal} |           | 精简池快照，逻辑卷的后代  |
+---------------------------+-----------+---------------------------+
| `lv_attr`{.literal}       | Attr      | 逻辑卷的状                |
|                           |           | 态。逻辑卷属性字节如下：  |
|                           |           |                           |
|                           |           | \* Bit 1: 卷类型：        |
|                           |           | (m)irrored, (M)irrored    |
|                           |           | without initial sync,     |
|                           |           | (o)rigin, (O)rigin with   |
|                           |           | merging snapshot, (r)aid, |
|                           |           | ®aid without initial      |
|                           |           | sync, (s)napshot, merging |
|                           |           | (S)napshot, (p)vmove,     |
|                           |           | (v)irtual, mirror or raid |
|                           |           | (i)mage, mirror or raid   |
|                           |           | (I)mage out-of-sync,      |
|                           |           | mirror (l)og device,      |
|                           |           | under (c)onversion, thin  |
|                           |           | (V)olume, (t)hin pool,    |
|                           |           | (T)hin pool data, raid or |
|                           |           | thin pool m(e)tadata or   |
|                           |           | pool metadata spare,      |
|                           |           |                           |
|                           |           | \* bit 2:                 |
|                           |           | Permissions:(w)           |
|                           |           | riteable,(r)ead-only-only |
|                           |           | of non-read-only of       |
|                           |           | non-read-only volume      |
|                           |           |                           |
|                           |           | \* 位                     |
|                           |           | 3：分配策略：(            |
|                           |           | a)nywhere,(c)相邻、(i)her |
|                           |           | ited、c(l)ing、(n)ormal。 |
|                           |           | 如果在修改分配时锁定了卷  |
|                           |           | ，会使用大写，例如在执行  |
|                           |           | `pvmove`{.literal}        |
|                           |           | 命令时。                  |
|                           |           |                           |
|                           |           | \* 位 4：固定(m)inor      |
|                           |           |                           |
|                           |           | \* bit 5:                 |
|                           |           | State:(a)ct               |
|                           |           | ive,(s)uspended,(I)nvalid |
|                           |           | snapshot,                 |
|                           |           | invalid(S)uspended        |
|                           |           | snapshot, snapshot(m)erge |
|                           |           | failed, pause             |
|                           |           | snapshot(M)erge failed,   |
|                           |           | mapping(d)evice           |
|                           |           | 显示没有表                |
|                           |           | ，映射设备带有(i)nactive  |
|                           |           | 表                        |
|                           |           |                           |
|                           |           | \* 位 6：设备(o)pen       |
|                           |           |                           |
|                           |           | \* bit 7: Target          |
|                           |           | type:(m)irror,(r)ai       |
|                           |           | d,(s)napshot,(t)hin,(u)nk |
|                           |           | nown,(v)irtual.这组逻辑卷 |
|                           |           | 同时与同一内核目标相关。  |
|                           |           | 因此，如果它们使用原始的  |
|                           |           | device-mapper mirror      |
|                           |           | 内核驱动程                |
|                           |           | 序，则镜像日志、镜像日志  |
|                           |           | 以及镜像本身会显示(m),而  |
|                           |           | raid 等同于使用 md raid   |
|                           |           | 内核驱动程序。使用原始    |
|                           |           | device-mapper             |
|                           |           | 驱动程序的快照显示为(s    |
|                           |           | )，而使用精简配置驱动程序 |
|                           |           | 的精简卷快照则显示为(t)。 |
|                           |           |                           |
|                           |           | \* 第 8                   |
|                           |           | 位：新分配的              |
|                           |           | 数据块在使用前被(z)eroes  |
|                           |           | 块覆盖。                  |
|                           |           |                           |
|                           |           | \* 第 9                   |
|                           |           | 位：卷健                  |
|                           |           | 康：(p)artial、(r)efresh  |
|                           |           | 需要、(m)ismatches        |
|                           |           | 存在(w)ri                 |
|                           |           | te。(p)图代表系统中缺少一 |