* Dropping a tablespace on the primary conflicts with standby queries using that tablespace for temporary work files.    
  主库删除表空间，备库使用这个表空间产生临时文件。 例如主库删除TBS，备库的一个大的查询需要写临时文件，并且这个临时文件是写到这个表空间的。    
  这种情况非常少见，也很容易规避，新建一个临时表空间不要删除即可。     
* Dropping a database on the primary conflicts with sessions connected to that database on the standby.  
  主库删除数据库，备库刚好连在这个数据库上。    
  这种情况也非常的少见。    
* Application of a vacuum cleanup record from WAL conflicts with standby transactions whose snapshots can still "see" any of the rows to be removed.  
  主库回收dead tuple的REDO，同时备库当前的query snapshot需要看到这些记录。     
  这种情况可以通过参数控制，恢复优先，或查询优先。 可以配置时间窗口。     
  而且这种冲突出现的概率也非常的小，除非用户在备库使用repeatable read，同时是非常大的事务。     
  而通常用户用的都是read committed.    
* Application of a vacuum cleanup record from WAL conflicts with queries accessing the target page on the standby, whether or not the data to be removed is visible.  
  同上，但是当query访问的页就是要清理垃圾的页时，也是有冲突的。      
  这是物理复制与逻辑复制唯一有差别的地方，但是对现实场景来说，这种情况出现的概率也不大。    
PostgreSQL提供了3种解决备库上查询与恢复冲突的办法      
* 在主库配置vacuum_defer_cleanup_age来解决以上最后两种冲突。    
```  
vacuum_defer_cleanup_age = 0   # number of xacts by which cleanup is delayed  
```  
* 在备库配置recovery延迟来解决以上所有冲突，给备库的QUERY设置一个执行窗口     
```  
max_standby_archive_delay = 30s        # max delay before canceling queries  
# when reading WAL from archive;  
# -1 allows indefinite delay  
#   
max_standby_streaming_delay = 30s      # max delay before canceling queries  
# when reading streaming WAL;  
# -1 allows indefinite delay  
```  
* 在备库配置hot_standby_feedback，备库会反馈给主库QUERY情况（可能是快照，而不是QUERY本身）（如果是级联环境，则会反馈给最上层的主库）    
  从而主库知道备库在干什么，在cleanup dead tuple时，会考虑备库的情况，防止冲突。    
```  
hot_standby_feedback = off             # send info from standby to prevent query conflicts  
#   
wal_retrieve_retry_interval = 1s   
```  
很显然UBER没有意识到PostgreSQL防止冲突的手段。    
在备库查询与恢复冲突只会导致apply延迟，并不会堵塞备库接收主库产生的REDO。    
对于PG来说，主备冲突导致的备库apply延迟，理论上不会有逻辑复制在碰到大事务时那么可怕，逻辑复制遇到大事务，导致的延迟是很严重。    
在现实应用场景中，很少有用户担心PG的备库延迟，即使有短暂的冲突，因为是基于块的恢复，恢复速度是很快的，马上就能追平（只要备库的IO能力够好，通常追平是瞬间完成的）。    
逻辑复制，什么情况下查询会堵塞、与恢复冲突？        
* 备库发起一个repeatable read的事务，由于备库不断的恢复，备库的该查询事务有可能因为snapshot too old失败。    
* 主库发起的DDL语句，回放时会与备库的查询冲突，DDL的回放会被完全堵塞。     
* 主库删除一个数据库，回放时如果备库正好连在这个数据库上，产生冲突。    
#### **小结**    
基于物理复制或逻辑复制，只要备库拿来使用，都有可能出现查询与恢复冲突的情况。    
PG对于冲突的处理非常的人性化，你可以选择恢复优先 or 查询优先，设置时间窗口即可。    
同时PG还支持备库的QUERY反馈机制，主库可以根据备库的QUERY，控制垃圾回收的延迟窗口，避免QUERY和垃圾回收的冲突。    
### 5. Difficulty upgrading to newer releases      
#### **uber文章的观点**     
PG的跨版本升级较难，跨版本不支持复制      
#### **本文观点**       
PG的大版本升级的途径非常多，也很方便。      
我这里给出两个方法    
1\. **方法1** , 通过迁移元数据的方式升级，这种升级方式，取决于元数据的大小（即数据结构，函数，视图等元信息）所以不管数据库多大，都能很快的完成升级。    
例如以10万张表，1万个函数，1000个视图为例，这样的元数据大小可能在几十MB的水平。  自动化程度高的话，导出再导入应该可以控制在分钟级别完成。    
关键是它能支持原地升级，也就是说，你不需要再准备一套环境，特别是数据库非常庞大的情况下，再准备一套环境是很恐怖的开销。    
当然，如果企业有环境的话，为了保险，通常的做法是，复制一个备库出来，在备库实现原地升级，然后激活备库转换为主库的角色。     
备库升级结束后，再升级老的主库，由于只动到元数据，所以主备的差异很小，rsync一小部分数据给老的主库，就能让老的主库实现升级，同时将老的主库切换成备库即可。    
简单的几步就完成了主备的大版本升级。    
![screenshot](20160728_01_pic_020.png)    
基于pg_upgrade的大版本升级可以参考我以前写的文章    
http://blog.163.com/digoal@126/blog/static/1638770402014111991023862/    
http://blog.163.com/digoal@126/blog/static/163877040201341981648918/    
2\. **方法2** , 通过逻辑复制增量平滑升级，与MySQL的升级方法一样，也很便利，但是要求一定要准备一个备库环境，如果数据库已经很庞大的话，总的升级时间会比较漫长。    
对于 >= 9.4的版本可以使用PG内置的逻辑复制。      
小于9.4的版本则可以使用londiste3或者slony-I。      
PG跨版本支持复制，而且支持的很好。    
对于>=9.4的版本，可以用基于流的逻辑复制。    
对于<9.4的版本，可以使用londiste3, slony-I。    
## 扩展阅读，用心感受PostgreSQL  
----  
**内核扩展**    
《找对业务G点, 体验酸爽 - PostgreSQL内核扩展指南》    
https://yq.aliyun.com/articles/55981     
《当物流调度遇见PostgreSQL - GIS, 路由, 机器学习 (狮子,女巫,魔衣橱)》    
https://yq.aliyun.com/articles/57857     
《弱水三千,只取一瓢,当图像搜索遇见PostgreSQL (Haar wavelet)》    
https://yq.aliyun.com/articles/58246     
《用PostgreSQL支持含有更新，删除，插入的实时流式计算》    
https://yq.aliyun.com/articles/30985     
《PostgreSQL 内核扩展之 - 管理十亿级3D扫描数据》    
https://yq.aliyun.com/articles/57095     
《PostgreSQL 内核扩展之 - ElasticSearch同步插件》    
https://yq.aliyun.com/articles/56824     
《为了部落 - 如何通过PostgreSQL基因配对，产生优良下一代》    
https://yq.aliyun.com/articles/55869     
《PostgreSQL 结巴分词》    
https://yq.aliyun.com/articles/58007     
《PostgreSQL 如何高效解决 按任意字段分词检索的问题 - case 1》  
https://yq.aliyun.com/articles/58006    
《mongoDB BI 分析利器 - PostgreSQL FDW (MongoDB Connector for BI)》    
https://yq.aliyun.com/articles/57987     
《关键时刻HINT出彩 - PG优化器的参数如何优化、执行计划如何固化》    
https://yq.aliyun.com/articles/57945     
《PostgreSQL Oracle兼容性之 - 锁定执行计划 (Outline system)》    
https://yq.aliyun.com/articles/57999     
《使用PostgreSQL 流复制decode 对接kafka，实现数据跨应用融合》  
http://www.confluent.io/blog/bottled-water-real-time-integration-of-postgresql-and-kafka/    
----  
**场景与优化**    
《PostgreSQL 如何潇洒的处理每天上百TB的数据增量》    
https://yq.aliyun.com/articles/8528    
《PostgreSQL 秒杀场景优化》    
https://yq.aliyun.com/articles/3010    
《PostgreSQL独孤九式搞定物联网》    
https://yq.aliyun.com/articles/52405    
《PostgreSQL 用CPU "硬解码" 提升1倍 数值运算能力 助力金融大数据量计算》    
https://yq.aliyun.com/articles/7482     
《PostgreSQL 百亿数据 秒级响应 正则及模糊查询》    
https://yq.aliyun.com/articles/7444     
《PostgreSQL 1000亿数据量 正则匹配 速度与激情》    
https://yq.aliyun.com/articles/7549     
《PostgreSQL 百亿地理位置数据 近邻查询性能优化》    
https://yq.aliyun.com/articles/2999     
----  
**大数据实践**   
《Greenplum 数据分布黄金法则 - 论分布列与分区的选择》    
https://yq.aliyun.com/articles/57822     
《Greenplum行存与列存的选择以及转换方法》    
https://yq.aliyun.com/articles/59132    
《阿里云ApsaraDB RDS用户 - OLAP最佳实践》    
https://yq.aliyun.com/articles/57778     
《Greenplum 资源隔离的原理与源码分析》    
https://yq.aliyun.com/articles/57763     
《PostgreSQL 多维分析 CASE》    
https://yq.aliyun.com/articles/53750     
《一致性哈希在分布式数据库中的应用探索》    
https://yq.aliyun.com/articles/57954     
《PostgreSQL 9.5新特性 width_bucket 位置插值，展示柱状图》    
https://yq.aliyun.com/articles/2642     
《PostgreSQL 9.5 新特性 高斯（正态）分布和指数分布 数据生成器》    
https://yq.aliyun.com/articles/2639     
《一个简单算法可以帮助物联网,金融 用户 节约98%的数据存储成本》    
https://yq.aliyun.com/articles/18042     
《开源数据库 PostgreSQL 攻克并行计算难题》    
https://yq.aliyun.com/articles/44655     
《PostgreSQL 并行计算 - 助力实时精准营销应用》    
https://yq.aliyun.com/articles/44649     
《PostgreSQL 9.6 并行计算 优化器算法浅析》    
https://yq.aliyun.com/articles/59180    
《PostgreSQL 计算 任意类型 字段之间的线性相关性》    
https://yq.aliyun.com/articles/18038    
《HLL 估值算法在PostgreSQL大数据 估值计算中的应用》    
http://blog.163.com/digoal@126/blog/static/16387704020131264480325/    
http://blog.163.com/digoal@126/blog/static/1638770402013127917876/    
http://blog.163.com/digoal@126/blog/static/16387704020131288553810/    