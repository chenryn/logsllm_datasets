1083
[32] com.android.nfc
1102
[32] com.android.phone
1133
[32] com.android.launcher3
1163
[32]com.android.printspooler
131
[32]/sbin/ueventd
1381
[32] com.android.smspush
1497
[32] /system/bin/mpdiecision --no_sleep --avg_comp
1577
[32] com.android.providers.calendar
1629
[32] com.android.mms
171
[32] /system/bin/logd
1711
[32]com.android.calendar
172
[32]/sbin/healthd
173
[32]/system/bin/lmkd
1736
[32] com.android.deskclock
174
[32]/system/bin/servicemanager
175
[32] /system/bin/vold
176
[32] /system/bin/surfaceflinger
1765
[32] com.android.email
177
[32]/system/bin/rmt_storage
1788
[32] com.android.exchange
185
[32]/system/bin/sh
186
[32]/system/bin/subsystem_ramdump -m -t emmc
1862
[32] /system/bin/dhcpcd -aABDKL -f /system/etc/dhcpcd/dhcpcd.
187
[32]/system/bin/netd
Help
Search
Cancel
OK
Line 1of49
图25-11IDAPro选择附加进程
选择我们想要调试的进程，点击“OK”即可。
---
## Page 947
CTF特训营：技术详解、解题方法与
25.3.1使用IDAPro进行动态调试
947/1144
最后一步，就是开始调试了。如图25-12所示的是一个典型的
IDAPro调试界面，汇编代码区、寄存器区、内存区、模块区等信息
一自了然，在工具栏里可以使用各种按钮执行单步进入、单步跳过等
操作，可以点击汇编代码左侧的蓝色小点下断点，非常容易上手，这
里就不展开介绍了。
需要注意的是，动态调试不能与静态调试割裂开，一定要再打开
一个IDAPro窗口进行静态比对，你会省去很多工作。
25.3.2节将介绍笔者最常用的动态调试工具一—GDB。
---
## Page 948
CTF特训营：技术详解、解题方法与
25.3.1使用IDAPro进行动态调试
948/1144
00
000
9SE
Beach
leady
Headh
359
dead
56
158
90
00
haiaitial
图25-12
IDAPro动态调试
---
## Page 949
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
949/1144
25.3.2使用GDB进行动态调试
GDB是GNU默认的调试器，同时也是笔者最常用的调试器。
GDB作为命令行形式的调试器，虽然功能强大，但是上手还是有一
定难度的，使用者需要对常用的命令有一定了解，初学者也不要气
多学多用，很快就能上手了。
下面我们来讲解一下GDB在Android系统上的调试方法。
目前，编译能够在ARM处理器架构的Android系统上直接运行的
GDB仍然是一个业界难题，虽然有人成功但是其运行效果并不稳
定。因此在实际操作的时候，更多是使用gdbserver进行远程调试。
我们可以从Google的Android源码库AOSP上面下载编译好的
gdbserver，网址是https://android.googlesource.com/platform/prebuilts/
misd，按照网页上的提示，将这个Git仓库克隆下来，你就拥有了覆
盖大多数平台的gdbserver了。
同样，编译好的支持各版本Android系统的GDB也可以从Google
源码库中下载，例如，macOS系统版本的GDB网址是https://
---
## Page 950
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
950/1144
android.googlesource.com/platform/prebuilts/gdb/darwin-x86/,Linux系
统版本的GDB网址是https://android.googlesource.com/platform
prebuilts/gdb/linux-x86/。如果你喜欢自行开发，也可以自己编译GDB
和gdbserver，只是过程略微复杂一些
至此，工具已经齐全，下面正式开始调试吧
第一步，在手机端运行gdbserver。与lDAPro远程调试类似，需
要将gdbserver传到手机端运行起来。gdbserver支持三种启动方式
分别是normal模式、attach模式、multi模式。normal模式，顾名思义
就是普通模式，这种模式主要用于使用gdbserver启动新的程序，并
使代码断在新进程的第一个指令处；attach模式，就是附加模式，该
模式可以附加在指定的进程上，对指定的进程执行调试操作，该模式
也是我们使用最多的模式；multi模式，该模式在启动时并不指定目标
进程，可以使用GDB客户端远程指定，可以理解为将远程的
gdbserver模拟成本地模式。
这里我们假设使用的是attach模式来调试自标进程，自标进程的
pid为888，命令如下：
adbpushgdbserver/data/local/tmp
---
## Page 951
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
951/1144
$adb shell
shell@hammerhead:/$cddata/local/tmp
shell@hammerhead:/data/local/tmp$chmod777gdbserver
从上面的命令可以看出，gdbserver在运行的时候，除了使用命
令“--attach”来指定模式之外，还使用了参数“tcp：31137”来指定
监听端口。gdbserver与IDAPro的远程服务端不同，它没有默认的端
口，需要我们自己指定。这里的端口31137是笔者随意指定的未被占
用的端口。
gdbserver的启动参数还有很多，但是最常用的就是上面这种模
式，其他的参数可以通过gdbserver的帮助手册查看。
第二步，开启端口转发。这里也与IDAPro类似，使用adb开启端
口转发，命令如下：
$adbforward tcp:31137tcp:31137
第三步，开始使用GDB调试。这里，我们运行GDB，然后使用
'targetremote:port”命令来连接远程的调试器。命令如下：
b-qpbs
(gdb)targetremote:31137
---
## Page 952
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
952/1144
Remote debugging using:31137
Reading/data/local/tmp/dumpso from remote target...
warning:File transfers from remote targets can be slow.Useset sysroot” to access
fileslocally instead
Reading/data/local/tmp/dumpsofromremotetarget.
Reading symbols from target:/data/local/tmp/dumpso.(no debugging symbols found)
...done.
Reading/system/bin/linkerfromremotetarget...
Reading/system/bin/linker fromremote target..
Reading symbols from target:/system/bin/linker..Reading /system/bin/.debug/linker
fromremotetarget...
(no debugging symbolsfound)..one.
Oxb6fefa94in_dl_start() from target:/system/bin/linker
(gdb)
提示这样的回显，就说明GDB连接成功，可以开始我们的调试
工作了。这里需要强调的是，使用GDB调试APK时，一般是没有源码
和调试符号的，因为命令行的局限性，不能有一个全局的纵览，一定
要结合IDAPro的静态分析功能来辅助进行。
下面为了更好地帮助大家入门，简单介绍一下GDB的常用命
令，如果是使用x86版GDB的读者，需要注意的是，ARM版的GDB调
试并不支持x86版GDB的所有功能，如果是老手的话则可以跳过本节
的剩余内容了。
1.查看内存
X/FMTADDRESS
---
## Page 953
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
953/1144
x命令用来查看内存。
ADDRESS是一个表达式，这个表达式的最终计算结果需要执行
合法的内存区域。FM什参数用于指明内存的读取格式和输出格式，这
两个格式分别用一个小写字母指定，读取格式有：o（octal)、x(hex)
i(instruction)、c(char)、s(string)、z(hex,左侧补o)，输出格式有：
b(byte)、h(halfword)、w(word)、g(giant、8字节);除了这两种格式
还可以使用数字指明读取的个数。在这里，如果不指明格式和个数
则会按照x/1aw的格式进行输出。
例如如下示例。
×10i$p：读取当前PC指向位置往后的10条汇编指令。
x/5a0x222：读取内存0x222处的5个双字的值
2.查看数据
print/FMT EXP
print命令用来打印变量、字符串、表达式等的值，可简写为p。
---
## Page 954
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
954/1144
FMT参数用于指定输出格式，可以参考x命令；EXP是要输出的
表达式。print接收一个表达式，GDB会根据当前程序运行的数据来计
算这个表达式，表达式可以是当前程序运行中的const常量、变量、
函数等内容。如果是寄存器变量，则需要使用“$寄存器名”的语法
格式，例如”p$r1”。
例如如下示例。
pcount:打印count的值。
pcou1+cou2+cou3：打印表达式值。
3.设置断点
break [LOCATION] [threadTHREADNUM] [if CONDITION]
break命令用来设置断点，可以简写为b。
LOCATION参数用于指定断点的位置，可以是函数名、源代码行
数（如果有）、内存地址等，如果给内存地址下断点，则需要在内存
地址前加星号（*）。
threadTHREADNUM参数用于指定该断点使用于哪个线程，需要
---
## Page 955
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
955/1144
将THREADNUM修改为自标线程号，线程号可以用"threads”命令
查看。
ifCONDITION参数用于设置条件断点，将需要CONDITION设置
为一个表达式，当运行到该断点时，GDB会运行该表达式，如果结
果为真即可触发断点，反之断点将会被跳过。
上面三个参数都不是必须的，如果break命令没有传入参数，那
么GDB默认会在当前汇编语句处添加断点。
4.调试代码
常用的调试命令如下所示。
next：单步跟踪（步过），在有源码的情况下，函数调用会被当
作一条简单语句执行，可简写为n。
step：单步跟踪（步入），在有源码的情况下，函数调用进入被
调用函数体内，可简写为s。
finish：退出函数。
until：在一个循环体内单步跟踪时，这个命令可以运行程序直
到退出循环体，可简写为u。
---
## Page 956
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
956/1144
continue：继续运行程序，可简写为c。
stepi或si，nexti或ni：单步跟踪一条机器指令，一条程序代码可
能由数条机器指令完成，stepi和nexti可以单步执行机器指令。
infoprogram：用于查看程序是否正在运行、进程号、被暂停的
原因等信息。
5.修改变量
有时候我们需要修改寄存器或其他变量的值，例如，修改函数返
回值，可以使用set命令修改变量。
例如如下示例。
set$r0=0修改寄存器r0的值为0
set（unsignedint*)$sp=O修改当前堆顶的值为0
6.查看栈信息
常用的查看栈信息的命令如下所示。
bt命令：可以打印出当前的调用栈，以方便我们回溯。
up、down命令：用于在调用栈的帧之间移动。
---
## Page 957
CTF特训营：技术详解、解题方法与
25.3.2使用GDB进行动态调试
957/1144
frame命令：用于跳转到指定的帧。
好了，基本的GDB命令差不多就是这些，要想了解更多的GDB
命令，一定要熟练使用GDB的帮助功能（输入help命令即可查看），
查看更多关于各个命令的详细信息。
此外，笔者最近也在尝试借助GDB的Python接口开发一款GDB
调试辅助工具，使GDB的操作更加发好。
---
## Page 958
CTF特训营：技术详解、解题方法与
25.3.3使用Frida框架HOOK进程
958/1144
25.3.3使用Frida框架HOOK进程
在25.2节中，我们介绍了Frida框架在Java层中的运用，同样的
Frida框架对Native层的支持也非常好，本节我们将学习如何使用Frida
框架对C/C++HOOK进程。
本节介绍的内容仅涉及Frida框架的服务端代码，忘记Frida三层
结构的读者请抓紧时间回第24章复习。
首先来看一下Frida框架HOOK函数的传入参数和返回值。
我们可以使用Module.findExportByName方法来找到自标函数的
地址，该方法的定义如下：
Module.findExportByName(module|null,exp)
其中，第一个参数填写的是要查找的导出函数所在ib库的名字
（如果不知道lib库的名字则可以填写null）：第二个参数填写的是要查
找的目标函数名，这里需要写成导出表里的全称，不要写成IDAPro
中提供的化简完的格式。
---
## Page 959
CTF特训营：技术详解、解题方法与
25.3.3使用Frida框架HOOK进程
959/1144
该方法返回一个NativePointer对象，该对象代表一个本地地址
可以用该对象的tolnt32(或toString（[radix=16j）方法将地址打印出来
也就是说，使用Module.findExportByName方法可以找到指定的导出
函数的地址，从而对该地址进行HOOK操作。
找到想要HOOK的函数地址后，我们可以使用Interceptor.attach
方法注册HOOK函数，该方法的定义如下：
Interceptor.attach(target,callbacks
其中，第一个参数target是一个NativePointer对象，用于指定需
要HOoK的函数的地址；第二个参数callbacks是一个object对象，该
对象至少需要包含onEnter和onLeave两个回调中的一个，onEnter和
onLeave分别定义如下：
onEnter:function (args)
onEnter表示传入参数的HOOK函数，该函数会在HOOK的目标函
数之前调用，其中，参数args代表传入的参数数组，其本质上是
NativePointer对象的数组，可以用args[0]、args[1]等来访问，可以用
---
## Page 960
CTF特训营：技术详解、解题方法与
25.3.3使用Frida框架HOOK进程
959/1144
该方法返回一个NativePointer对象，该对象代表一个本地地址
可以用该对象的tolnt32(或toString（[radix=16]）方法将地址打印出来。
也就是说，使用Module.findExportByName方法可以找到指定的导出
函数的地址，从而对该地址进行HOOK操作。
找到想要HOOK的函数地址后，我们可以使用Interceptor.attach
方法注册HOOK函数，该方法的定义如下：
Interceptor.attach(target, callbacks
其中，第一个参数target是一个NativePointer对象，用于指定需
要HOoK的函数的地址；第二个参数callbacks是一个object对象，该
对象至少需要包含onEnter和onLeave两个回调中的一个，onEnter和
onLeave分别定义如下：
onEnter:function(args)
onEnter表示传入参数的HOOK函数，该函数会在HOOK的目标函
数之前调用，其中，参数args代表传入的参数数组，其本质上是
NativePointer对象的数组，可以用args[0]、args[1]等来访问，可以用
---
## Page 961
CTF特训营：技术详解、解题方法与
25.3.3使用Frida框架HOOK进程
961/1144
构造新的NativePointer对象可以使用语句"new
NativePointer（s)”，这里的s既可以是数字，也可以是能够转化为数字
的字符串；该语句也可以简化为"ptr（s)”。此外，NativePointer对象
还支持isNull、add、sub、and、or、xor、shr、shl、equals、
compare、tolnt32、toString等方法。
因此，我们自已构造一个NativePointer对象，指向我们想要
HOOK的函数的起始地址。此外，因为32位ARM处理器架构有ARM
和Thumb两种模式，因此当我们手动构造NativePointer对象时，对于