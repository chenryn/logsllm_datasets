how many are of interest, or learn about certain qualities concern-
ing the data held there (subject to the search permissions granted by
the server). Furthermore, even in systems that include document re-
trieval, separating this functionality from query is worthwhile. For
example, the server may be running a paid service, and allow the
user to operate in an initial stage wherein he determines what he
wants, and a bargaining stage wherein they negotiate pricing, be-
fore purchasing the actual content.
Document retrieval poses its own challenge, especially when the
data is not owned by the party retrieving it. In this scenario, re-
turning additional data is a privacy leak for the data owner; at the
same time, revealing the matching documents to the owner is a pri-
vacy leak for the retriever. Thus, the strongest security we would
want to aim for would require us to touch the contents of the entire
database [9]. This is a prohibitively expensive cost for applications
that aim to work in “real time” over a large data set. One way to
avoid this cost is to relax our security deﬁnition and allow leak-
age of the retrieval pattern (i.e. whether separate retrieval attempts
touched the same documents). In the case of data outsourcing, this
amount of privacy leakage easily sufﬁces, since the untrusted server
just searches for and returns the encrypted ﬁles that he stores to the
owner who has the corresponding decryption keys [4, 8, 13]. This
approach, however, is not applicable to the case of data sharing,
where leaking the matching documents to the owner reveals more
than the result pattern: he also knows the content of the documents,
from which he can infer information about the query.
This problem is similar to that addressed by private information
retrieval protocols (PIR) [10, 16, 29], wherein a server holds a set
of items from which a user wishes to retrieve one without revealing
which item he is requesting. It differs slightly in that we wish to
retrieve multiple items (corresponding to the search results). It also
differs in that we require that the selected set be certiﬁed and that
the user does not learn content of documents outside of it. There are
SQRISCClientServerEncryptedDocumentsSearchResultsStorage Re-encryptionDocumentRetrievalRe-encryptionprotocolEncrypted result docsSigned result IDsEncrypted result docsSigned result IDsDecryptionkeysSigned result IDsStorage Reencryption (preprocessing phase)
Inputs:
S : D1, . . . , Dn, keys k1, . . . , kn and k(cid:48)
P : permutation π of length n ;
S, P : (GEN , EN C, DEC) satisfying Deﬁnition 2
Outputs:
S : ⊥; P : EN C k(cid:48)
Protocol:
(Di) for 1 ≤ i ≤ n
1, . . . , k(cid:48)
n;
π(i)
1. S sends to P ci = EN C ki (Di) for 1 ≤ i ≤ n.
2. For each 1 ≤ i ≤ n S and P execute 1-out-of-n OT protocol
that allows P to obtain k(cid:48)(cid:48)
i = k
−1
i
· k(cid:48)
π(i).
3. For each 1 ≤ i ≤ n P computes EN C k(cid:48)(cid:48)
(Di).
(EN C ki (Di)) = EN C k(cid:48)
EN C k
·k(cid:48)
i
π(i)
−1
i
π(i)
(ci) =
1, . . . k(cid:48)
n;
(Di), 1 ≤ i ≤ n;
Document Retrieval
Inputs:
S : keys k(cid:48)
P : permutation π of len n, EN C k(cid:48)
C : query Q;
S, P, C : search scheme EncSearch that returns IDs of matched
documents to P, C.
Outputs:
S : cardinality of the output set EncSearch(Q);
P : IDs of docs matching query Q from EncSearch;
C : the content of the docs matching Q from EncSearch.
Protocol:
π(i)
1. S, P, C run EncSearch for query Q. Let i1, . . . , iL be the IDs
of the matching documents.
2. P
sends
the
with
. . . , EN C k(cid:48)
Sign(π(i1), . . . , π(iL))
encrypted
(DiL ).
π(iL)
documents EN C k(cid:48)
to C together
(Di1 ),
π(i1 )
3. C sends Sign(π(i1), . . . , π(iL)) to S.
veriﬁes
4. S
π(i1), . . . , k(cid:48)
k(cid:48)
Sign(π(i1), . . . , π(iL))
π(iL).
and
returns
5. C decrypts EN C k(cid:48)
(Di1 ), . . . , EN C k(cid:48)
(DiL ) to
π(iL)
obtain the result documents.
π(i1)
Figure 3: Protocol for Document Retrieval
over its underlying search system:
• For each inserted point, we will need to insert into the underlying
search system d lg r terms, where d is the number of dimensions we
are supporting and r is the size of the range of values supported per
dimension.
• For each query, we will need to issue a boolean query using up
2 ) query terms to the underlying search system, where q
to 2d lg( q
is the size of the range being queried.
• The system presents repeatable unique identiﬁers for logarithmi-
cally cut sub-regions across all documents in a single query, and
across multiple queries.
If the underlying private search system
does not guarantee full privacy of its queries, this can increase the
information leakage over what would normally be incurred.
Our basic approach is to represent each ranged dimension as a
binary value. Then, for each one, we create a strata for each digit
Figure 4: Terms used for inserting the value “11” (top).
Boolean query for range “7-14” (bottom).
of the value, and for each strata, divide the range into binary pieces
according to the order of the digit, and assign each piece of each
strata of each dimension a globally unique identiﬁer. To insert a
term to the search index, we insert the identiﬁer of every piece that
contains it (thus one term is inserted per dimension per strata, with a
number of strata logarithmic in the size of the ranges). An example
of inserting the value “11” using 4-bit numbers is hown in Figure 4
(top).
To issue a query, we create a boolean OR query. For each di-
mension, we start at the strata with the largest and least numerous
pieces, and add to the query the largest piece that ﬁts entirely within
the query range. We iterate to lower strata, adding pieces that ﬁt en-
tirely into the range without covering values that are already cov-
ered by existing pieces in the query, and continue, if necessary, to
the lowest strata which contains every individual value in the full
range. We then create an AND query across all of the dimensions,
resulting in a query in conjunctive normal form. An example query
on one dimension is shown in Figure 4 (bottom).
Since every single piece of every strata that contains the repre-
sentative value has been added to the index, this query will return
true if and only if the range query contains it. The worst case query,
is for the query range to straddle the midway point of the full range.
This results in taking 2 lg( q
2 ) query terms per dimension.
THEOREM 1. A contiguous range query on a single dimension
cannot require more than 2 lg( q
2 ) disjunctive terms.
PROOF. We begin with an initial lemma: a contiguous query
cannot require more than two terms in a single strata, one in its
lower half and one in its upper half. Let us assume to the contrary
that it did require two terms within a single bisection of its range.
Then, starting from the uppermost term, the range contains a sub-
range equal to at least four times the size of the elements of the
strata (two in each bisection). Since the strata above uses elements
of twice the size, and there is at least one term within the range that
is not one of the endpoints, that term is a subset of a range from the
upper strata that is contained entirely within this subrange. Thus,
the term representing that range could have been chosen instead to
replace two or more terms representing smaller ranges, a contradic-
tion.
Given that each strata uses ranges twice the size of the strata
beneath it, it is trivial to show via summing that a query cannot
require terms from more than lg(q) − 1 strata. In conjunction with
our lemma, we thus show that a contiguous range query cannot
require more than 2(lg(q) − 1) = 2 lg( q
4.2 Bloom ﬁlter construction
2 ) terms.
If the underlying system is based on Bloom ﬁlters, like SADS,
we can describe the tradeoffs listed in the general construction in
01234567891011121314150-12-34-56-78-910-1112-1314-150-34-78-1112-150-78-1501234567891011121314150-12-34-56-78-910-1112-1314-150-34-78-1112-150-78-15Binary groups in which value "11" belongs to: 1---, 10--, 101- and 1011Binary representation of the range "7-14": 0111 v 10-- v 110- v 1110terms of increased Bloom ﬁlter size. The standard Bloom ﬁlter
equation demands that in order to store n items with a false positive
rate of p, our ﬁlter needs to have size m, show in formula (1). There
are two factors that increase the necessary size of Bloom ﬁlters we
must choose in order to maintain the same false positive rate. First,
for every value inserted, there are now d lg r terms added, giving an
increase in “effective” number of values for purposes of calculating
2 ) queries in
proper sizes. Second, for every query, there are 2d lg( q
CNF, any of which could be a false positive. If we assume in the
worst case that a single false positive from a sub-query will cause
a complete false positive, then we can give an upper bound on the
2 ). Thus, the
multiplicative increase of false positive rate as 2d lg( q
total size of the Bloom ﬁlter to ensure that the false positive rate
does not exceed p is given by formula (2).
q
2
)
(2)
(ln 2)2
m =
−n ln p
(ln 2)2 (1)
m = d lg r
−n ln
p
2d lg(
For practical purposes, this is a very reasonable increase in
size, considering that most range query applications deal with or-
ders of magnitude fewer values per record than exact string match
queries, which may be used to index every single word in a tens-
of-thousands-of-words long document.
An issue of greater concern is the magniﬁcation of existing pri-
vacy concerns, especially if we are using a system like SADS,
which does not guarantee full protection of the result patterns. Be-
cause our construction will query the same sub-regions across mul-
tiple records in a query, and across multiple queries, if the result
privacy is not protected against the server, he may be able to learn
about the values stored within over time. For example, if a server
sees that during a range query, two records had the same posi-
tive result for the same sub-region, it knows that they at the very
least share a value in the same half-region (the largest possible sub-
region).
If over the course of multiple queries it sees those two
documents match for a second sub-region, it then knows that they
at the very least share a value in the same quarter-region. Over time,
and seeing a sufﬁciently varied number of queries, it may learn ex-
actly which documents share speciﬁc values. To prevent this, the
ranged values could be re-indexed regularly based on the frequency
of range queries being issued.
This is partially mitigated in the multi-dimensional case, since
sub-regions of different dimensions cannot be differentiated, lend-
ing some additional obscurity. These are further obscured in sys-
tems like SADS where the ranged queries are interspersed with
other types of queries including straight string matches and boolean
queries. There is nothing to indicate to the holder of these identi-
ﬁers what ranges they correspond to, or even if they are ranges at
all. The quantitative evaluation of this reduction of information
would depend on the nature of the records and their searchable at-
tributes as well as the distribution of the queries that will be sub-
mitted. Therefore, the assessment of the signiﬁcance of this leakage
has to be done with respect to the speciﬁc data that will be used in
the search scheme as well as the expected types of queries.
5. SADS SPECIFIC
5.1 Multiple Hash Functions
The BFs of different documents in the SADS scheme [30] share
the same hash functions, and thus, the same BF indices for identical
keywords. This is exploited by using a bit-slicing storage structure
to improve query time. However, this has clear consequences for
privacy:
• Due to commonality of indices for shared keywords, the search
structures leak information to the IS about the similarity of the cor-
responding documents.
• The false positive rate of a single Bloom ﬁlter — the probability
that a search query is matched incorrectly by it — with n bits, k
hash functions, and m entries is F Psingle = (1 − (1 − 1
n )mk)k.
If the false positive probabilities across different Bloom ﬁlters are
independent, then the expected number of false positive results in a
database with N documents is F Psingle · N. However, in the given
situation, the false positive rates are not independent if documents
share keywords. Let D1 and D2 be two documents where p fraction
of the words in D2 are also in D1 and the query w is a false positive
for the Bloom ﬁlter for D1. The probability of a bit in BFD2 to
be set to 1 is p + (1 − p)(1 − (1 − 1
n )mk)) and therefore the
probability D2 has a false positive (all k search bits of w are set to
1) is (p + (1 − p)(1 − (1 − 1
n )mk)))k, which tends to 1 as p tends
to 1.
We can avoid these issues by using different hash functions for
the Bloom ﬁlters of each document. The BF indices for an entry
would not be derived from its PH-DSAEP+ encryption but instead
from keyed hashes of said encryption.
We implemented the multiple hash functions feature by gen-
erating a group of hash functions using a family of 2-universal
hash functions [26]. In our implementation, we used HMAC over
MD5 and SHA1 (using the document’s ID as key) to generate
BF hash functions, where the i-th hash function was Hi(w) =
H1(w) + (i − 1)H2(w) mod P , where P is a prime, H1(w) is
HMAC(SHA1, ID, w), H2(w) is HMAC(MD5, ID, w) and w is
the encrypted keyword.
5.2 Database Updates
So far we have assumed that the server’s database does not
change.
It is preprocessed once in the beginning and from that
point on the same data is used to answer all queries from the
clients. However, in many practical situations the data of the server
changes dynamically, which should be reﬂected correspondingly