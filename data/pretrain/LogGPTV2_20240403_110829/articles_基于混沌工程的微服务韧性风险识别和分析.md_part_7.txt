order 容器的网络请求传入量(container/orders/Network Input Packets)以及 order 容器内存中缓存的订单数量
(container/orders/MEM Usage),最终影响交易成功的订单数量(service/orders/qps(2xx)).图16展示了上述性能指
标在引入扰动时的具体性能曲线.从上述分析中可以看出,案例研究中得到的因果关系链路一定程度上体现了
从扰动到服务降级的传播过程.
Fig.16 Performance curves of different performance indicators when a disruption was injected
图16 引入系统环境扰动时各性能指标的性能曲线
5 进一步分析与总结
5.1 实验结果的进一步分析
为了进一步验证本文提出的韧性风险的分析方法是否能够有效地分析出目标系统在发生韧性风险时因果
的影响链路,本文分析了案例研究中的多次混沌实验中收集到的系统性能数据,以评估韧性风险影响链路的准
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1249
确度.本文中使用 precision(查准率)和 recall(查全率)作为评估韧性风险影响链路准确度的度量指标.由于本文
提出的分析方法最终输出排序后的多条链路,precision 和 recall 中 TP 的判断标准为输出的前 k 条链路是否命
中被引入的环境扰动,其对应的precision和recall值分别记作precision 和recall.FP(false positive)表示分析方
k k
法输出的前k条链路中没有命中环境扰动;FN(false negative)表示分析方法输出前k条链路中没有命中环境扰
动,但是剩余的链路中命中了环境扰动.为了方便统计韧性风险影响链路是否命中了被引入的环境扰动,本文中
仅分析了直接与系统性能有关的环境扰动所对应的混沌实验数据集(环境扰动包括:将 CPU 利用率提升至
100%(CPUBurnout)、将内存占用率提示至100%(Mem overload)、磁盘IO阻塞(disk I/O block)以及网络传输延
时(network Jam)).
• 通过因果关系搜索算法所构建的因果关系图是否准确?
在第4.3节的实验中,已证明了通过因果关系算法构建的性能指标因果关系图与Sock-Shop的实际服务调
用图基本一致.为模拟验证在服务数较多、调用关系较深情况下的因果搜索算法构建的因果关系图的准确性,
本文通过因果关系模拟工具 tetrad(http://www.phil.cmu.edu/projects/tetrad/)构建出包含不同数量节点和因果关
系边的因果关系图,并在假定的因果关系图上模拟大量数据.因果关系模拟算法将在模拟的数据中寻找变量之
间的因果关系,并将得到的因果关系与假定的因果关系进行比较,统计实际不存在的、存在但未识别的以及方
向识别错误的因果关系边数,以验证算法分析得到的因果关系的准确性.
表 9展示了在不同节点和因果关系边数量下,因果关系搜索算法的准确度.从表 9可以看出:因果搜索算法
能够识别出大部分的因果关系,与实际因果关系的准确度基本高于 90%.对于实际大规模微服务架构系统的验
证,将在本文的后续研究工作中进一步展开.
Table 9 Accuracy of the causality search algorithm under different number of nodes and edges
表9 不同节点和边数量下因果关系搜索算法的准确度
节点数 边数 实际不存在的因果关系边数 未识别的因果关系边数 方向错误的因果关系边数 Precision Recall
10 20 1 0 0 0.95 1
10 30 0 0 0 1 1
15 30 2 5 0 0.92 0.83
15 45 3 8 0 0.93 0.82
20 40 3 10 0 0.91 0.75
20 60 5 9 0 0.91 0.85
30 60 10 12 1 0.81 0.78
30 90 7 11 0 0.92 0.88
50 100 9 15 2 0.88 0.83
50 150 10 12 1 0.92 0.91
• 针对服务韧性设计的因果关系边权重赋值方法是否能够优化对韧性风险的分析过程?
本文中比较了本文提出的因果关系边权重赋值方法和现有文献中使用的因果关系边权重赋值方法所得到
的因果关系链路的准确度,以验证本文提出的针对韧性风险的因果关系边权重赋值方法的有效性,被比较的权
重赋值方法有:
(1) 3σ检测:通过3σ规则判断系统性能是否发生了异常,并将系统性能的时间序列数据转换成仅包含0和
1 的性能异常序列.随后,以性能异常序列计算性能指标之间的皮尔森系统作为因果关系边的权重.该
方法为Microscope[64]中使用的方法.
(2) 阈值关联:为了与 CauseInfer[65]中对离散系统性能指标的因果关系分析方法比较,在本案例研究中,将
为每一类型的系统性能指标设立若干的阈值,并根据阈值将连续的性能指标序列转换成离散序列.随
后,同样使用皮尔森系数为因果关系边构建权重.
(3) 直接关联:按照 CloudRanger[63]中的方法,直接使用两个性能指标数据的皮尔森系数作为因果关系边
的权重.
各因果关系边权重赋值方法在不同类型的环境扰动下对最终输出的因果关系链的准确度的影响见表 10.
从表 10 中可以看出,本文提出的针对系统性能变化的因果关系边权重的赋值方法在分析韧性风险上相对于其
1250 Journal of Software 软件学报 Vol.32, No.5, May 2021
他权值赋予方法有更高的准确性.在 4 种引入的环境扰动中,由于容器网络相关的性能指标曲线与服务性能的
曲线有较高的相似性,识别网络阻塞的准确率相对于其他类型系统扰动更高.在表 10 的实验结果中,基于 3σ检
测的韧性风险影响链路的准确度低于参考文献[64]中故障根因分析的准确度.这是因为基于 3σ的异常检测方
法更适用于寻找时间序列数据中的明显的离群点,而在服务降级发生的过程中,系统性能会较长时间处于性能
较低的状态,无法被识别为异常.
Table 10 Accuracy of causality edge weight assignment methods under different environment disruptions
表10 不同类型系统环境扰动下各因果关系边权重赋值方法的准确率
赋值方法 本文提出的方法 3σ检测(MicroScope) 阈值(CauseInfer) 直接关联(CloudRanger)
准确度
故障类型
precision1 recall1 precision1 recall1 precision1 recall1 precision1 recall1
CPUBurnout 82.38 86.20 39.98 42.00 77.53 81.82 67.87 74.31
MEM overload 89.37 91.23 43.48 44.34 84.56 86.15 79.88 83.22
Disk I/O block 89.39 92.58 43.58 45.52 84.96 89.49 79.91 85.72
Network Jam 94.45 97.22 46.53 48.11 91.67 95.24 89.19 84.52
• 因果关系链路是否能够命中注入的系统环境扰动?
本文中对目标系统的各个服务多次注入了各种类型的系统环境扰动(为了保证各服务和各扰动类型的实
验次数,引入的环境扰动不一定为韧性风险),并验证本文提出的分析方法输出的韧性风险影响链路的准确度.
表11为各个服务在不同环境扰动下的得到的影响链路分别在k=1和k=2情况下的precision和recall值.从表
11 中可以看出:通过本文提出的韧性风险分析方法对于识别案例研究中所注的各类型环境扰动均有较高的准
确度,且得到的韧性风险影响链路在大部分服务下能够保证 80%以上的准确率,仅对 Shipping 服务施加环境扰
动时链路的准确率相对于其他服务较低.这是由于 Shipping 服务仅会被 Order 服务创建完用户订单后被调用,
且不会调用其他服务.故shipping服务的响应时间及成功率不会影响到其他服务,较难产生明显的因果关系.
Table 11 Accuracy of the resilience risk analysis method under different services and disruptions
表11 各服务在不同类型环境扰动下韧性风险分析方法的准确率
Front-end Catalogue User Carts Orders Shipping Payment
CPUBurnout
precision1 100 81.82 91.67 80 92.31 33.33 63.64
precision2 100 81.82 91.67 90 92.31 33.33 63.64
recall1 100 90 91.67 80 100 33.33 77.78
recall2 100 90 91.67 90 100 33.33 77.78
MEM Overload
precision1 100 91.67 100 88.89 100 36.36 75
precision2 100 92.31 100 88.89 100 36.36 75
recall1 100 91.67 100 100 100 36.36 75
recall2 100 92.31 100 100 100 36.36 75
Disk I/O Block
precision1 100 92.31 100 85.71 100 50 66.67
precision2 100 100 100 85.71 100 50 66.67
recall1 100 92.31 100 92.31 100 60 81.82
recall2 100 100 100 92.31 100 60 81.82
Network Jam
precision1 100 100 100 91.67 100 66.67 83.33
precision2 100 100 100 91.67 100 66.67 83.33
recall1 100 100 100 100 100 66.67 100
recall2 100 100 100 100 100 66.67 100
实验结果中,有几次环境扰动并没有被准确地识别.通过对这几次实验的服务性能曲线及分析过程中得到
的因果关系图的分析,发现这几次混沌实验在引入环境扰动后并没有产生明显的服务降级,造成在因果关系图
中引入扰动的性能指标节点的因果关系边权重小于其他性能指标节点的因果关系边权重,故在构建的因果关
系链路中排序较后没有输出.没有产生严重服务降级的系统扰动将不会被识别为韧性风险并进一步分析,因此,