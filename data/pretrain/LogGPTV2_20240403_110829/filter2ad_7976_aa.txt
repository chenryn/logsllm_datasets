**作者：mengchen@知道创宇404实验室**  
**时间：2019年8月1日**  
**英文版本：**
## 1\. 前言
`TYPO3`是一个以`PHP`编写、采用`GNU`通用公共许可证的自由、开源的内容管理系统。
2019年7月16日，`RIPS`的研究团队公开了`Typo3
CMS`的一个关键漏洞[详情](https://blog.ripstech.com/2019/typo3-overriding-the-database/)，`CVE`编号为`CVE-2019-12747`，它允许后台用户执行任意`PHP`代码。
漏洞影响范围：`Typo3 8.x-8.7.26 9.x-9.5.7`。
## 2\. 测试环境简述
    Nginx/1.15.8
    PHP 7.3.1 + xdebug 2.7.2
    MySQL 5.7.27
    Typo3 9.5.7
## 3\. TCA
在进行分析之前，我们需要了解下`Typo3`的`TCA（Table Configuration
Array）`，在`Typo3`的代码中，它表示为`$GLOBALS['TCA']`。
在`Typo3`中，`TCA`算是对于数据库表的定义的扩展，定义了哪些表可以在`Typo3`的后端可以被编辑，主要的功能有
  * 表示表与表之间的关系
  * 定义后端显示的字段和布局
  * 验证字段的方式
这次漏洞的两个利用点分别出在了`CoreEngine`和`FormEngine`这两大结构中，而`TCA`就是这两者之间的桥梁，告诉两个核心结构该如何表现表、字段和关系。
`TCA`的第一层是表名：
    $GLOBALS['TCA']['pages'] = [
        ...
    ];
    $GLOBALS['TCA']['tt_content'] = [
        ...
    ];
其中`pages`和`tt_content`就是数据库中的表。
接下来一层就是一个数组，它定义了如何处理表，
    $GLOBALS['TCA']['pages'] = [
        'ctrl' => [ // 通常包含表的属性
            ....
        ],
        'interface' => [ // 后端接口属性等
            ....
        ],
        'columns' => [
            ....
        ],
        'types' => [
            ....
        ],
        'palettes' => [
            ....
        ],
    ];
在这次分析过程中，只需要了解这么多，更多详细的资料可以查询[官方手册](https://docs.typo3.org/m/typo3/reference-tca/master/en-us/Introduction/Index.html)。
## 4\. 漏洞分析
整个漏洞的利用流程并不是特别复杂，主要需要两个步骤，第一步变量覆盖后导致反序列化的输入可控，第二步构造特殊的反序列化字符串来写`shell`。第二步这个就是老套路了，找个在魔术方法中能写文件的类就行。这个漏洞好玩的地方在于变量覆盖这一步，而且进入两个组件漏洞点的传入方式也有着些许不同，接下来让我们看一看这个漏洞吧。
### 4.1 补丁分析
从Typo3官方的[通告](https://typo3.org/security/advisory/typo3-core-sa-2019-020/)中我们可以知道漏洞影响了两个组件——`Backend & Core API (ext:backend,
ext:core)`，在GitHub上我们可以找到[修复记录](https://github.com/TYPO3/TYPO3.CMS/commit/555e0dd2b28f01a2f242dfefc0f344d10de50b2a?diff=unified)：
![
](https://images.seebug.org/content/images/2019/08/986fb966-5743-41c7-b8fc-7ccc651de599.png-w331s)
很明显，补丁分别禁用了`backend`的`DatabaseLanguageRows.php`和`core`中的`DataHandler.php`中的的反序列化操作。
### 4.2 Backend ext 漏洞点利用过程分析
根据补丁的位置，看下`Backend`组件中的漏洞点。
路径：`typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseLanguageRows.php:37`
    public function addData(array $result)
    {
        if (!empty($result['processedTca']['ctrl']['languageField'])
            && !empty($result['processedTca']['ctrl']['transOrigPointerField'])
        ) {
            $languageField = $result['processedTca']['ctrl']['languageField'];
            $fieldWithUidOfDefaultRecord = $result['processedTca']['ctrl']['transOrigPointerField'];
            if (isset($result['databaseRow'][$languageField]) && $result['databaseRow'][$languageField] > 0
                && isset($result['databaseRow'][$fieldWithUidOfDefaultRecord]) && $result['databaseRow'][$fieldWithUidOfDefaultRecord] > 0
            ) {
                // Default language record of localized record
                $defaultLanguageRow = $this->getRecordWorkspaceOverlay(
                    $result['tableName'],
                    (int)$result['databaseRow'][$fieldWithUidOfDefaultRecord]
                );
                if (empty($defaultLanguageRow)) {
                    throw new DatabaseDefaultLanguageException(
                        'Default language record with id ' . (int)$result['databaseRow'][$fieldWithUidOfDefaultRecord]
                        . ' not found in table ' . $result['tableName'] . ' while editing record ' . $result['databaseRow']['uid'],
                        1438249426
                    );
                }
                $result['defaultLanguageRow'] = $defaultLanguageRow;
                // Unserialize the "original diff source" if given
                if (!empty($result['processedTca']['ctrl']['transOrigDiffSourceField'])
                    && !empty($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']])
                ) {
                    $defaultLanguageKey = $result['tableName'] . ':' . (int)$result['databaseRow']['uid'];
                    $result['defaultLanguageDiffRow'][$defaultLanguageKey] = unserialize($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']]);
                }
                    //省略代码
            }
            //省略代码
        }
        //省略代码
    }
很多类都继承了`FormDataProviderInterface`接口，因此静态分析寻找谁调用的`DatabaseLanguageRows`的`addData`方法根本不现实，但是根据文章中的演示视频，我们可以知道网站中修改`page`这个功能中进入了漏洞点。在`addData`方法加上断点，然后发出一个正常的修改`page`的请求。
当程序断在`DatabaseLanguageRows`的`addData`方法后，我们就可以得到调用链。
![
](https://images.seebug.org/content/images/2019/08/8dddeb3c-894b-4f88-aee2-9e3f5431e4c1.png-w331s)
在`DatabaseLanguageRows`这个`addData`中，只传入了一个`$result`数组，而且进行反序列化操作的目标是`$result['databaseRow']`中的某个值。看命名有可能是从数据库中获得的值，往前分析一下。
进入`OrderedProviderList`的`compile`方法。
路径：`typo3/sysext/backend/Classes/Form/FormDataGroup/OrderedProviderList.php:43`
    public function compile(array $result): array
    {
        $orderingService = GeneralUtility::makeInstance(DependencyOrderingService::class);
        $orderedDataProvider = $orderingService->orderByDependencies($this->providerList, 'before', 'depends');
        foreach ($orderedDataProvider as $providerClassName => $providerConfig) {
            if (isset($providerConfig['disabled']) && $providerConfig['disabled'] === true) {
                // Skip this data provider if disabled by configuration
                continue;
            }
            /** @var FormDataProviderInterface $provider */
            $provider = GeneralUtility::makeInstance($providerClassName);
            if (!$provider instanceof FormDataProviderInterface) {
                throw new \UnexpectedValueException(
                    'Data provider ' . $providerClassName . ' must implement FormDataProviderInterface',
                    1485299408
                );
            }
            $result = $provider->addData($result);
        }
        return $result;
    }
我们可以看到，在`foreach`这个循环中，动态实例化`$this->providerList`中的类，然后调用它的`addData`方法，并将`$result`作为方法的参数。
在调用`DatabaseLanguageRows`之前，调用了如图所示的类的`addData`方法。
![
](https://images.seebug.org/content/images/2019/08/a098344f-9194-4aa8-855a-f9c90b96282a.png-w331s)
经过查询手册以及分析代码，可以知道在`DatabaseEditRow`类中，通过调用`addData`方法，将数据库表中数据读取出来，存储到了`$result['databaseRow']`中。
![
](https://images.seebug.org/content/images/2019/08/2d1daef5-06a7-4f9d-b883-5e543328b3dc.png-w331s)
路径：`typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseEditRow.php:32`
    public function addData(array $result)
    {
        if ($result['command'] !== 'edit' || !empty($result['databaseRow'])) {// 限制功能为`edit`
            return $result;
        }
        $databaseRow = $this->getRecordFromDatabase($result['tableName'], $result['vanillaUid']); // 获取数据库中的记录
        if (!array_key_exists('pid', $databaseRow)) {
            throw new \UnexpectedValueException(
                'Parent record does not have a pid field',
                1437663061
            );
        }
        BackendUtility::fixVersioningPid($result['tableName'], $databaseRow);
        $result['databaseRow'] = $databaseRow;
        return $result;
    }
再后面又调用了`DatabaseRecordOverrideValues`类的`addData`方法。
![
](https://images.seebug.org/content/images/2019/08/e58319cb-7ad3-4d30-8be3-472c52c6173d.png-w331s)
路径：`typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseRecordOverrideValues.php:31`
    public function addData(array $result)
    {
        foreach ($result['overrideValues'] as $fieldName => $fieldValue) {
            if (isset($result['processedTca']['columns'][$fieldName])) {
                $result['databaseRow'][$fieldName] = $fieldValue;
                $result['processedTca']['columns'][$fieldName]['config'] = [
                    'type' => 'hidden',
                    'renderType' => 'hidden',
                ];
            }
        }
        return $result;
    }
在这里，将`$result['overrideValues']`中的键值对存储到了`$result['databaseRow']`中，如果`$result['overrideValues']`可控，那么通过这个类，我们就能控制`$result['databaseRow']`的值了。
再往前，看看`$result`的值是怎么来的。
路径：`typo3/sysext/backend/Classes/Form/FormDataCompiler.php:58`
    public function compile(array $initialData)
    {
        $result = $this->initializeResultArray();
        //省略代码
        foreach ($initialData as $dataKey => $dataValue) {
            // 省略代码...
            $result[$dataKey] = $dataValue;
        }
        $resultKeysBeforeFormDataGroup = array_keys($result);
        $result = $this->formDataGroup->compile($result);
        // 省略代码...
    }
很明显，通过调用`FormDataCompiler`的`compile`方法，将`$initialData`中的数据存储到了`$result`中。
再往前走，来到了`EditDocumentController`类中的`makeEditForm`方法中。
![
](https://images.seebug.org/content/images/2019/08/9412c254-0f73-4e31-9878-f3106a9a1128.png-w331s)
在这里，`$formDataCompilerInput['overrideValues']`获取了`$this->overrideVals[$table]`中的数据。
而`$this->overrideVals`的值是在方法`preInit`中设定的，获取的是通过`POST`传入的表单中的键值对。
![
](https://images.seebug.org/content/images/2019/08/ed691b61-f856-4213-928a-3f054767bab3.png-w331s)
这样一来，在这个请求过程中，进行反序列化的字符串我们就可以控制了。
在表单中提交任意符合数组格式的输入，在后端代码中都会被解析，然后后端根据`TCA`来进行判断并处理。
比如我们在提交表单中新增一个名为`a[b][c][d]`，值为`233`的表单项。
![
](https://images.seebug.org/content/images/2019/08/0bbc59e8-28a6-4a84-b248-4aa98597ba4a.png-w331s)
在编辑表单的控制器`EditDocumentController.php`中下一个断点，提交之后。
![
](https://images.seebug.org/content/images/2019/08/e78f5653-8df3-4267-9398-0f636e063ab1.png-w331s)
可以看到我们传入的键值对在经过`getParsedBody`方法解析后，变成了嵌套的数组，并且没有任何限制。
我们只需要在表单中传入`overrideVals`这一个数组即可。这个数组中的具体的键值对，则需要看进行反序列化时取的`$result['databaseRow']`中的哪一个键值。
    if (isset($result['databaseRow'][$languageField]) && $result['databaseRow'][$languageField] > 0 && isset($result['databaseRow'][$fieldWithUidOfDefaultRecord]) && $result['databaseRow'][$fieldWithUidOfDefaultRecord] > 0) {
        // 省略代码
        if (!empty($result['processedTca']['ctrl']['transOrigDiffSourceField']) && !empty($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']])) {
            $defaultLanguageKey = $result['tableName'] . ':' . (int) $result['databaseRow']['uid'];
            $result['defaultLanguageDiffRow'][$defaultLanguageKey] = unserialize($result['databaseRow'][$result['processedTca']['ctrl']['transOrigDiffSourceField']]);
        }
        //省略代码
    }
要想进入反序列化的点，还需要满足上面的`if`条件，动态调一下就可以知道，在`if`语句中调用的是
    $result['databaseRow']['sys_language_uid']
    $result['databaseRow']['l10n_parent']
后面反序列化中调用的是
    $result['databaseRow']['l10n_diffsource']
因此，我们只需要在传入的表单中增加三个参数即可。
    overrideVals[pages][sys_language_uid] ==> 4
    overrideVals[pages][l10n_parent] ==> 4
    overrideVals[pages][l10n_diffsource] ==> serialized_shell_data