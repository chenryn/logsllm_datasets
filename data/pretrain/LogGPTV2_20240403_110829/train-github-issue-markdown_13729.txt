Good afternoon. When dealing with scientific data, it would be very
advantageous to add units of measure to columns such that a secondary column
name represents the unit. Here is a use case scenario:
  * User imports navigation data from CSV where altitudes may be in meters, latitude/longitude in radians, and heading is in semi-circle. The unit data is in the second row of the file.
  * When importing into a dataframe, the user would specify units=2 for row two.
  * When the user wants to output units to a desired type, it as simple as:  
`df[['latitude','longitude']].units('degrees')`
  * For any data that does not have a unit assigned or wants to convert the stored data to that type, the user can do:  
`df['North_Accel'].units(set='m/s^2'). `
  * This of course leads you to the method of converting units. It would be a series of files by measurement type (distance, volume, speed, force, pressure, temperature, data, etc) and in the files would be a table where the rows and columns equal all available units and the fields would contain the factor. Such that if you look up radians in the row and move across to degrees in the column, the entry would be 180/math.pi (preferred) or just 57.295779513.
  * You could potentially have fun with this when you have a timeseries index or a column with time assuming that you can create new units of measure based on the symbolic math. An example would be that you have distance in feet already and time in minutes and it would calculate out to 'ft/min'. `df['velocity'] = df['distance'].diff()/df['time'].diff()`  
Since that extra feature is not likely to happen, you would have to tack on
the unit types manually to ensure you get what you need.  
`df['velocity'] = (df['distance'].diff()/df['time'].diff()).units('ft/min')`  
However to ensure your imported data can stay be flexable, your script may
need to take precautions by ensuring the output is the desired type  
`df['velocity'] =
(df['distance'].units('ft').diff()/df['time'].units('min').diff()).units('ft/min')`  
That would ensure your source data can be any unit of distance, but would be
converted to 'ft' first before dividing by time in minutes. Then you can send
that series data in 'ft/min' to 'velocity' where it is stored as and set as
'ft/min'.
Thanks!
V/R,  
Frank