314
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:59:55 UTC from IEEE Xplore.  Restrictions apply. 
 Due to space constraints, we show only the True Positive curves for call traces v5, v6, and v7 in Figure 5, Figure 6, and Figure 7 respectively. All the algorithms perform worse with call trace v5 due to same inter-arrival time of SPIT and non-SPIT calls. This makes the time since last call from the same caller and call frequency (features 9 and 16 in Sec. 4.2) much less useful. Another factor is the number of SPIT calls in the call trace is decreased to 45 (compared to 212 in v4) which further lowers the clustering quality and detection accuracy. Figure 8 summarizes the True Positive rates from eMPCK across the four call traces. This basically corresponds to how salient the differences between SPIT calls and non-SPIT calls in the call traces are. In order, the easiest one is v4, followed closely by v6, and then v7. The hardest is v5. In v5, SPIT calls are almost indistinguishable from short-duration non-SPIT calls. We show error-bar (±1 s.t.d.) for eMPCK in Figure 2. They are omitted in the rest of the figures for presentation clarity. The general trend is that the errors diminish with increasing ratio of user feedback. We observe less than ±5% error across the experiments on call traces 4, 6, and 7 when user ratio is set beyond 0.1. For call trace 5, the error is higher (up to±25% at 0.1 ratio).  0.50.60.70.80.911.100.20.40.60.81ratio of calls with feedbackF-Measure Figure 2. Call trace v4 / F-Measure 0.30.40.50.60.70.80.911.100.20.40.60.81ratio of calls with feedbackTrue Positive Rate Figure 3. Call trace v4 / TP 00.20.40.60.800.20.40.60.81ratio of calls with feedbackFalse Positive Rate Figure 4. Call trace 4 / FP 00.20.40.60.8100.20.40.60.81ratio of calls with feedbackTrue Positive Rate Figure 5. Call trace 5 / TP 00.20.40.60.811.200.20.40.60.81ratio of calls with feedbackTrue Positive Rate Figure 6. Call trace 6 / TP 00.20.40.60.8100.20.40.60.81ratio of calls with feedbackTrue Positive Rate Figure 7. Call trace 7 / TP 0.10.20.30.40.50.60.70.80.9100.20.40.60.81ratio of calls with feedbackTrue Positivev4v5v6v7 Figure 8. Compare eMPCK True Positive Rate across call traces 00.20.40.60.8100.20.40.60.81Noise levelTrue Positive Rate Figure 9. TP vs. Noise in User Feedback  00.20.40.60.8100.20.40.60.81Noise levelFalse Positive Rate Figure 10. FP vs. Noise in User Feedback    5.4 Scalability of execution time  In this experiment we compare the running times of MPCK and eMPCK by varying the number of call data points. Call trace v7 is used for this experiment. For MPCK, we apply exact optimizations which do not cause loss of accuracy. For example, the maximally separated points evaluation is re-executed only when the A matrix gets changed. The results are based on code compiled with 978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
315
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:59:55 UTC from IEEE Xplore.  Restrictions apply. 
  MPCK eMPCKv4 6.94 3.98 v5 7.80 7.83 v6 7.81 5.38 v7 6.94 4.7 Average 7.37 5.47 Table 1. Number of iterations to convergence MS VC++ 8.0 with default optimization level running on Windows XP, Intel E6400 2.13 GHz CPU. As Figure 11 shows, MPCK exhibits non-linear growth in the running time as the number of call data points increases (error bars are  ±1 std.). eMPCK, on the other hand, exhibits a linear growth in the running time. Also, MPCK takes significantly longer to run compared with  eMPCK⎯15 times longer for a batch of 400 calls. Looking at the number of iterations that each algorithm takes to converge (Table 1), eMPCK fares better. The running time advantage of eMPCK comes from the lower number of iterations as well as the lower running time of each iteration. The lower number of iterations is explained by eMPCK’s update of Ah’s on the initialized clusters. For call trace v5, the similarity in SPIT and non-SPIT calls renders the Ah initialization ineffective and the number of iterations is roughly equal for both algorithms.  5.5 Effect of noise in user feedback  We evaluated different algorithms with various noise levels in the user feedback. When we say the noise level is c, it means that a fraction c of the user feedback is false, i.e., a SPIT call is reported as non-SPIT and vice-versa. We show the result with call trace 6 for this experiment. The user feedback ratio is fixed at 0.3. Figure 9 shows the true positive rate decreases as the noise level increases. Observing the false positive rates in Figure 10, we conclude that pMPCK is completely unusable through the whole noise level range while the other algorithms are usable at low noise levels. We conclude that pMPCK is usable only for a high proportion of accurate user feedback. Beyond noise level 0.5 eMPCK performance drops below that of MPCK due to our design of the detection predicate (Sec. 4.4.2), namely, considering the cluster that contains more calls marked by the user as SPIT than non-SPIT, to be the SPIT cluster. With noise level above 0.5, the user feedback is wrong more often than right and the negative effect is more pronounced in eMPCK than MPCK, since it did a “better job” of clustering on the user feedback than MPCK. As an example of a usable operating point, consider that at noise levels 0.2 or below, eMPCK has both true positive and true negative above 0.8. 00.5100.51-1-0.500.51ratio of feedbackvolume = -0.319084noise levelTP - FP Figure 12. MPCK (TP – FP) for call trace v6 00.5100.51-1-0.500.51ratio of feedbackvolume = -0.271882noise levelTP - FP Figure 13. eMPCK (TP – FP) for call trace v6 00.5100.51-1-0.500.51ratio of feedbackvolume = -0.371324noise levelTP - FP Figure 14. pMPCK (TP – FP) for call trace v6  5.6 Evaluation with noise and feedback ratio  Here we perform an evaluation of all four proposed algorithms with respect to the four call traces. Our evaluation methodology considers the combined effect of proportion of user feedback and the noise level and the results are shown in Figure 12, Figure 13, and Figure 14. In the 3D plot, the Z-axis corresponds to TP-FP, the difference between True Positive rate and False Positive rate, with respect to each pair of feedback ratio and noise level. Intuitively, if TP-FP is greater than zero, it means the detection gives more correct results than incorrect results and can be regarded as a valid operating point where the detection is useful. Due to page length limitation, we show the 3D plots only for call trace 6. A general trend we can see in the 3D plots is that when fixing the noise level, the TP-FP value climbs to a peak and then goes down when varying the feedback ratio from 0 to 1. There is no sharp breakdown of performance for any of the algorithms. If the user feedback is accurate, then even with low ratio of user feedback, the performance is good for MPCK and eMPCK. The performance of pMPCK on the other hand is acceptable only close to the extreme region 024048072096012000400080001200016000200000100200300400eMPCK Time (ms)MPCK Time (ms)Num of data pointsMPCKeMPCKFigure 11. Running Time 978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
316
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:59:55 UTC from IEEE Xplore.  Restrictions apply. 
 of almost perfect user feedback for almost all calls. To give an overall quantification of the detection quality, we define the volume metric based on the integral (Eq. (6)). In the ideal case where TP-FP is maintained at 1 through the entire range of noise levels and feedback ratio values, the volume will be 0.9. Table 2 shows the volume for each combination of algorithm and call trace. Call trace v5 gives the lowest volume corresponding to the worst performance for all algorithms. Averaged over the entire range, we see that eMPCK performs best followed by eMPCK (Multi Class), MPCK, and pMPCK.  ()1100.1:noise level,  :feedback rationfVolumeTPFPdfdnnf===−∫∫ii (6) TP-FP Volume v4 v5 v6 v7 avg.MPCK 0.048 -0.595 -0.319 -0.388 -0.314 eMPCK (Multi Class) 0.068 -0.590 -0.330 -0.402 -0.314 eMPCK 0.042 -0.577 -0.272 -0.340 -0.287 pMPCK 0.015 -0.596 -0.371 -0.411 -0.341 Table 2. Summary of TP-FP volume comparisons  6. CONCLUSION  In this paper, we proposed a new approach to detect SPIT calls in a VoIP environment. We map each phone call into a data point based on an extendable set of call features, derived from the signaling as well as the media protocols. This converts the problem of SPIT detection into a data classification problem, where a classic solution is the use of clustering. We apply semi-supervised clustering, which allows for the optional use of user feedback for more accurate classification. This corresponds to users’ flagging some calls as SPIT and others as legitimate. We create a new algorithm called eMPCK-Means, based on a previous algorithm called MPCK-Means, which provides linear time performance with the number of calls. eMPCK-Means includes a pre-metrics-update step, which contributes to high (> 90%) detection true positive rates with less than 10% user feedback data points for three of the four call traces used here. We found that it is difficult to attain high detection accuracy based only on features available in the call establishment phase, which would enable a SPIT call to be dropped without the user needing to answer the call. This algorithm pMPCK performs well only with accurate user feedback for a majority of calls.  7. REFERENCES  [1] VOIPSA, "VoIP Threat Taxonomy," 2008. [2] Y. S. Wu, S. Bagchi, S. Garg, and N. Singh, "SCIDIVE: a stateful and cross protocol intrusion detection architecture for voice-over-IP environments," in DSN, 2004, pp. 433-442. [3] H. Sengar, D. Wijesekera, H. Wang, and S. Jajodia, "VoIP Intrusion Detection Through Interacting Protocol State Machines," in DSN, 2006, pp. 393-402. [4] C. J. J. Rosenberg, "RFC 5039 : The Session Initiation Protocol (SIP) and Spam," 2008. [5] D. Shin, J. Ahn, and C. Shim, "Progressive Multi Gray-Leveling: A Voice Spam Protection Algorithm," IEEE Network, vol. 20, pp. 18-24, 2006. [6] M. Bilenko, S. Basu, and R. J. Mooney, "Integrating constraints and metric learning in semi-supervised clustering," in ICML, 2004, pp. 81-88. [7] J. Quittek, S. Niccolini, S. Tartarelli, M. Stiemerling, M. Brunner, and T. Ewald, "Detecting SPIT Calls by Checking Human Communication Patterns," in ICC, 2007, pp. 1979-1984. [8] R. MacIntosh and D. Vinokurov, "Detection and mitigation of spam in IP telephony networks using signaling protocol analysis," in IEEE/Sarnoff Symposium on Advances in Wired and Wireless Communication, 2005, pp. 49-52. [9] P. Kolan and R. Dantu, "Socio-technical defense against voice spamming," ACM Transactions on Autonomous and Adaptive Systems (TAAS), vol. 2, 2007. [10] J. MacQueen, "Some methods for classification and analysis of multivariate observations," in the Fifth Berkeley Symposium on Mathematical Statistics and Probability, 1967, p. 14. [11] P. Haider, U. Brefeld, and T. Scheffer, "Supervised clustering of streaming data for email batch detection," in ICML, 2007, pp. 345-352. [12] M. Sasaki and H. Shinnou, "Spam Detection Using Text Clustering," in International Conference on Cyberworlds, 2005. [13] C. J. C. Burges, "A tutorial on support vector machines for pattern recognition," Data Mining and Knowledge Discovery, vol. 2, pp. 121-167, 1998. [14] G. Druck, C. Pal, A. McCallum, and X. Zhu, "Semi-supervised classification with hybrid generative/discriminative methods," in KDD, 2007, pp. 280-289. [15] K. Bennett and A. Demiriz, "Semi-supervised support vector machines," Advances in Neural Information processing systems, pp. 368-374, 1999. [16] J. Rosenberg, "RFC 3261 - SIP: Session Initiation Protocol," 2002. [17] H. Schulzrinne, "RFC 1889 - RTP: A Transport Protocol for Real-Time Applications," 1996. [18] N. Grira, M. Crucianu, and N. Boujemaa, "Unsupervised and Semi-supervised Clustering: a Brief Survey," A Review of Machine Learning Techniques for Processing Multimedia Content’, Report of the MUSCLE European Network of Excellence (FP6), 2004. [19] T. Finley and T. Joachims, "Supervised clustering with support vector machines," in ICML, 2005, pp. 217-224. [20] voip-info.org, "Asterisk SIP Media Path."