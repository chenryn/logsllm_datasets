heavy-tail distribution, a general case of most networks, while
the attack trace has a uniform distribution for different sized
groups; alludes to a large number of compromised devices
where each of them recursively generates many connections.
Table II summarizes the statistical details of the two datasets.
B. Standard Error and Variance
To verify our analysis, we compare the theoretical and
experimental relative standard errors (Eq. (14)) of RRSE using
0.5 Mb and 2 Mb memory sizes. As shown in Fig. 5, RRSE’s
experimental standard error is better than the theoretical
error for spreaders greater than 1,000 regardless of trafﬁc
distribution and memory usage (i.e., correctness), because
the theoretical error bound is not tight. Here, we note that
RRSE’s estimation is only for medium or high spreaders
(i.e., ≥ 2
5 s). Similar to HLL, RRSE takes advantage of a
linear counting algorithm for low spreader estimation [17].
As shown, we can observe a clear trend where the relative
standard errors of RRSE decrease as the memory increases.
As shown in Fig. 6, RRSE’s accuracy in terms of the absolute
relative error (
) shows a similar trend and is better than
vHLL’s estimations in different scenarios (i.e., lower is better).
Moreover, the variance of RRSE is smaller than vHLL’s with
less memory. Under the attack trafﬁc that contains many
high spreaders, vHLL clearly shows higher estimation errors
than RRSE, especially in the high spread range. Moreover,
vHLL’s estimations, in the low spread range, show a larger
variance than our RRSE. The results suggest that RRSE’s
noise elimination strategy can precisely remove the noise in
the different sized spreader, and performs better than vHLL’s
|fi− ˆfi|
fi
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:21 UTC from IEEE Xplore.  Restrictions apply. 
336
(a) 0.5 Mb with attack trace
(b) 2 Mb with attack trace
(a) 0.5 Mb with attack trace
(b) 2 Mb with attack trace
(c) 0.5 Mb with normal trace
(d) 2 Mb with normal trace
Fig. 5: Comparison: Theoretical and experimental relative
standard error of RRSE varying memory usage, and under
normal and attack scenarios. See Eq. (14) for theoretical error.
strategy that applies a universal noise (value) regardless of
spreaders’ sizes. vHLL’s performance becomes stable when a
larger memory is given. However, RRSE’s estimations achieve
a similar variance but better accuracy compared to vHLL,
as shown in Fig. 6(b). In the normal trafﬁc scenario, vHLL
shows higher estimation errors compared to our RRSE and
achieves a similar performance when a larger memory is
given Fig. 6(b). We note that vHLL shows biased estimations
because the normal trace used in this work is larger than the
vHLL work [27]. Detailed comparisons and discussions will
be given in section IV-D.
C. Attack Trafﬁc Scenario: Witty Worm Trace
We now simulate an attack scenario using the Witty Worm
trace [31] and compare the accuracy of RRSE with two state-
of-the-art schemes, namely vHLL [27] and MCSE [16].
Setup. We varied the memory from 0.5 Mb to 4 Mb for the
three schemes. Since the largest spreader size of the Witty
Worm trace is about 6.8 million (see Table II), RRSE sets
s = 256 and b = 4 to count up to 8.39 million destination IPs
for each source IP (i.e., up to s·2r, r = 2b−1). This parameter
setting means that each source IP (i.e., potential spreader) can
use up to 256 4-bit registers of the global register array, some
of which are shared among different spreaders. For fairness,
vHLL and RRSE use the same conﬁguration. For MCSE, we
set g = 16 and s = 256 for a sufﬁcient counting range, where
g is the number of memory segments and s is the number of
bits used in each segment for each spreader.
Results. Fig. 7∼10 shows the accuracy of RRSE, vHLL,
and MCSE varying the memory from 0.5 Mb to 4 Mb. In
Fig. 7∼10(a)-(c), the x-axis is the actual spreader size (nf )
and the y-axis is the estimated spreader size ( ˆnf ). A guideline
y = x is shown to demonstrate bias and variance. A spreader
is underestimated if below the guideline and overestimated if
above the guideline. As shown, RRSE outperforms vHLL and
(c) 0.5 Mb with normal trace
(d) 2 Mb with normal trace
|fi− ˆfi|
Fig. 6: Experimental results: absolute relative error (
)
of RRSE and vHLL varying memory usage, and under normal
and attack scenarios.
fi
MCSE under an attack scenario when many high spreaders
arrive simultaneously. Moreover, while RRSE’s estimations
are shown to be unbiased with varying memory usage, vHLL
tends to overestimate the spreaders (biased), and the amount
of the overestimation becomes worse when a smaller memory
is given. Our results also show that MCSE has a scalability
issue when the average size of the spreaders is large. We note
that MCSE estimates spreaders around 3 million with 0.5 Mb
of memory and 5 million with 1 Mb of memory, thus the data
points are invisible in Fig. 7(c)∼8(c).
1
fi
|fi− ˆfi|
(cid:3)i=n
To compare the three schemes, we evaluated in our
experiments, we use the average absolute relative error
). As shown in Fig. 7(d)∼10(d),
(AARE= 1
n
RRSE’s AAREs are lower than vHLL’s AARE and MCSE’s
AARE for spreaders with different sizes. We note that AARE
(y-axis) is shown in a log-scale, which means that a small
gap in the AARE value is actually a large estimation gap.
For instance, although AARE of vHLL is slightly higher than
RRSE, the bias of vHLL’s estimations is much larger than
RRSE’s, as shown in Fig. 7(a)-(b).
Analysis. By design, MCSE divides memory into several
small segments and encodes spreaders into each segment
independently. As such, MCSE’s memory is saturated quickly
(i.e., memory efﬁciency), especially when the trafﬁc includes
many high spreaders (e.g., attack trafﬁc). As a result of this
saturation, MCSE fails to provide valid decoding results, as
shown in Fig. 7(d)∼10(d). As we highlighted in our moti-
vation, vHLL calculates a universal noise from the global
m · ˆn) and applies it to all different-sized ﬂows.
average ( s
However, as shown in Fig. 1(a), the universal noise of vHLL
is insufﬁcient to eliminate the actual noise of high spreaders.
That is because (1) the massive high spreaders in the attack
trafﬁc increase the chance of ﬁlling registers with a higher rank
value, especially when the number of registers allocated to
each ﬂow is big (s = 256). Due to the register sharing strategy
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:21 UTC from IEEE Xplore.  Restrictions apply. 
337
(a) RRSE 0.5 Mb
(b) vHLL 0.5 Mb
(c) MCSE 0.5 Mb
(d) 0.5 Mb AARE
Fig. 7: Attack scenario (Witty Worm trace): Accuracy of RRSE, vHLL, and MCSE with 0.5 Mb memory. In (a)-(c), each data
point stands for an individual spreader. The closer the point is to y = x, the more accurate the estimation is. When given 0.5
Mb, most of MCSE’s estimations are greater than 3 million; thus, data points are out of the visible range. In (d), the absolute
average relative error (AARE) varying the spreader size is shown.
(a) RRSE 1 Mb
(b) vHLL 1 Mb
(c) MCSE 1 Mb
(d) 1 Mb AARE
Fig. 8: Attack scenario (Witty Worm trace) with 1 Mb memory.
(a) RRSE 2 Mb
(b) vHLL 2 Mb
(c) MCSE 2 Mb
(d) 2 Mb AARE
Fig. 9: Attack scenario (Witty Worm trace) with 2 Mb memory.
(a) RRSE 4 Mb
(b) vHLL 4 Mb
(c) MCSE 4 Mb
(d) 4 Mb AARE
Fig. 10: Attack scenario (Witty Worm trace) with 4 Mb memory.
and the hash collision, overestimation occurs naturally with
the local point of view of each spreader, of which evidence
can be found in Fig. 7(b)∼10(b). The bias of vHLL becomes
smaller when a larger memory is given (i.e., hash collision
mitigation). (2) Despite the massive number of high spreaders,
the majority of the Witty Worm trafﬁc is still small spreaders
(Fig. 4(a)), which ﬁll most registers with lower rank values.
m · ˆn) is smaller than
As a result, the universal noise (= s
the actual noise of the high spreaders, as shown in Fig. 7(b).
Therefore, we conclude that vHLL’s approach of estimating
a universal noise (i.e., an identical value) is not sufﬁcient to
eliminate the noise when the trafﬁc involves a massive amount
of medium and high spreaders (i.e., attack scenario). Unlike
vHLL that removes an identical noise for all spreaders, RRSE
can remove a different amount of noise for an individual
spreader by recovering a measurement rank register vector
as close as possible to the original vector (i.e.,Local Rank
Distribution Recovery); thus, the noise estimation of RRSE is
more precise than that of vHLL.
D. Normal Trafﬁc Scenario: ISP Trace
To evaluate the performance of the three schemes under a
normal trafﬁc scenario, we repeated the same experiments we
had done earlier but using the ISP trace [32].
Setup. We used the same parameters for three schemes as
in the attack trafﬁc scenario. We note that the number of
spreaders (i.e., source IPs) in the normal trafﬁc scenario is
around 70 times more than the attack trafﬁc. Although the
largest spreader in the normal trafﬁc remains similar to the
attack trafﬁc (i.e., 7.3 million), the average size of spreaders
is much smaller (i.e., 11 versus 9K).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:21 UTC from IEEE Xplore.  Restrictions apply. 
338
(a) RRSE 0.5 Mb
(b) vHLL 0.5 Mb
(c) MCSE 0.5 Mb
(d) 0.5 Mb AARE
Fig. 11: Normal scenario (ISP trace): Accuracy of RRSE, vHLL, and MCSE with 0.5 Mb memory. In (a)-(c), each data point
stands for an individual spreader. The closer the point is to y = x, the more accurate the estimation is. When given 0.5 Mb
memory, most of MCSE’s estimations are greater than 3 million, thus, data points are out of the visible range. In (d), the
absolute average relative error (AARE) varying the spreader size is shown.
(a) RRSE 1 Mb
(b) vHLL 1 Mb
(c) MCSE 1 Mb
(d) 1 Mb AARE
Fig. 12: Normal scenario (ISP trace) with 1 Mb memory.
(a) RRSE 2 Mb
(b) vHLL 2 Mb
(c) MCSE 2 Mb
(d) 2 Mb AARE
Fig. 13: Normal scenario (ISP trace) with 2 Mb memory.
(a) RRSE 4 Mb
(b) vHLL 4 Mb
(c) MCSE 4 Mb
(d) 4 Mb AARE
Fig. 14: Normal scenario (ISP trace) with 4 Mb memory.
Results. Fig. 11∼14 show the accuracy of RRSE, vHLL, and
MCSE varying the memory from 0.5 Mb to 4 Mb. Similar to
the attack scenario, RRSE’s estimation, regardless of memory
usage, is unbiased due to our Local Rank Distribution Recov-
ery function that can precisely estimate and eliminate noise for
each spreader. However, vHLL shows higher overestimation
for high spreaders when smaller memory is given, as shown in
Fig. 11(b)∼14(b). We note that vHLL shows biased estimations
(i.e., overestimation) because the network trace used in this
work is larger than the trace used in vHLL work [27] (see
Table II), while a similar memory is given. For example, our
trace has 11 distinct destination IPs per source IP in average,
whereas vHLL’s trace has only 2 destination IPs per source
IP. Moreover, our trace has 16 million connections in total,
whereas vHLL’s trace has around 3 million connections. To
this end, our experiments show that vHLL’s noise elimination
technology produces biased estimations when measuring dense
network trafﬁc. MCSE starts providing valid decoding results
with 2 Mb memory, although the estimation bias and variance
are larger than RRSE, as shown in Fig 13∼14(c)-(d).
Analysis. Through our analysis, we observed that the relatively
fewer high spreaders in the normal trace mitigated the memory
saturation issue of MCSE compared with the attack scenario.
However, the memory utilization rate remains at a high level,
which results in MCSE’s inaccurate estimation. For vHLL,
the fewer high spreaders in the normal trace mitigated the
overestimation (i.e., noise level) compared to the attack sce-
nario. However, the majority of registers are occupied by small
spreaders, making the estimated universal noise insufﬁcient to
eliminate the actual noise of the medium and high spreaders,
as shown in Fig. 1(b).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:15:21 UTC from IEEE Xplore.  Restrictions apply. 
339
TABLE III: Spreader detection varying threshold. Settings:
attack trace and 2 Mb memory. vHLL’s high FPR and zero
FNR explain its overestimation, which affects benign users.
RRSE
vHLL
MCSE
Threshold
1K
10K
100K
FPR
0.043
0.003
0
FNR
0.028
0.035
0.014
FPR
0.293
0.046
0.001
FNR
0
0
0
FPR
0.01
0.058
0.089
FNR
0.035
0.003
0
TABLE IV: Overhead comparison: encoding and decoding
Encode
Decode
Schemes
RRSE
vHLL
MCSE
RRSE
vHLL
MCSE
Reads
3
1
1
O(s + r)
O(s + m)
O(s.g)
Writes
Hashes
2
3
2
1
2
1
O(s)
O(1)
O(s)
O(1)
O(g2) O(s.g)
Operations
O(1)
O(1)
O(1)
O(s + r)
O(s + m)
O(s.g2)
Summary. RRSE is shown to be more reliable than vHLL and
MCSE with the attack scenario, where the size of spreaders
follows a uniform distribution. Moreover, RRSE shows the
best performance among the three schemes with normal trafﬁc,
where the size of spreaders follows a heavy-tailed distribution.
Therefore, per our results, we conclude that our Local Rank
Distribution Recovery algorithm can precisely eliminate the
amount of noise caused by random memory sharing.
E. Use Case: Spreader Detection with a Threshold
We performed a use case of spreader detection using RRSE,
vHLL, and MCSE with the Witty Worm trace and varied
the detection threshold from 103 to 106. We used 2 Mb