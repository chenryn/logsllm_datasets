 (2 rows)
pg_trgm 近似匹配
 pg_trgm插件
 http://blog.163.com/digoal@126/blog/static/1638770402013416102141801/
 http://www.postgresql.org/docs/9.3/static/pgtrgm.html
 原理
 首先把一个字符串拆分成多个独立的字符串(拆分间隔为非字符如数字空格标点)
 然后再拆分后的独立字符串前加2个空格后加1个空格, 然后把字符串切分成相近的3个字符一组的一些单元.
 两个字符串的相似度匹配和他们被切分成的单元共性有关.
 宽字符的支持需要将数据库collate调整为C以外的值.
 例如, aa b,c首先拆分成独立的字符串(aa , b , c)
 然后在aa前加2个空格, 后面加一个空格
 在b前加2个空格, 后面加一个空格
 在c前加2个空格, 后面加一个空格
 最后这几组字符串进行3个一组的切分
 digoal=# select show_trgm($$aa b,c$$);
 show_trgm
 ---------------------------------------------
 {" a"," b"," c"," aa"," b "," c ","aa "}
 (1 row)
pg_trgm 近似匹配
 宽字符支持
 digoal=# \l
 List of databases
 Name | Owner | Encoding | Collate | Ctype | Access privileges
 -----------+----------+----------+------------+------------+-----------------------
 digoal | postgres | UTF8 | en_US.utf8 | en_US.utf8 |
 postgres | postgres | UTF8 | en_US.utf8 | en_US.utf8 |
 template0 | postgres | UTF8 | en_US.utf8 | en_US.utf8 | =c/postgres +
 | | | | | postgres=CTc/postgres
 template1 | postgres | UTF8 | en_US.utf8 | en_US.utf8 | =c/postgres +
 | | | | | postgres=CTc/postgres
 (4 rows)
 digoal=# select show_trgm('刘德华');
 show_trgm
 ----------------------------------
 {0xb207ac,0xd2efc5,67N,0x6ff95f}
 (1 row)
pg_trgm 近似匹配
 无法使用宽字符的场景
 ^
 digoal=# select show_trgm('你好') collate "zh_CN.utf8";
 show_trgm
 -----------
 {}
 (1 row)
 digoal=# \l
 List of databases
 Name | Owner | Encoding | Collate | Ctype | Access privileges
 -----------+----------+----------+---------+-------+-----------------------
 digoal | postgres | UTF8 | C | C |
练习
 各种索引的合理使用
 全文检索的使用以及中文分词插件的安装和使用
 近似匹配插件pg_trgm的安装和使用
PostgreSQL 查询优化
 了解explian SQL分析工具的使用, 理解explain 的代价计算原理, 并根据数据库硬件环境校准代价因子.
 理解 explain 输出的含义 (如 组合行集 , 节点处理 , 合并连接, 哈希连接 等), 并可以结合explain的输出优化SQL.
EXPLAIN 语法
 EXPLAIN [ ( option [, ...] ) ] statement
 EXPLAIN [ ANALYZE ] [ VERBOSE ] statement
 where option can be one of:
 ANALYZE [ boolean ] -- 执行statement, 得到真实的运行时间以及统计信息
 VERBOSE [ boolean ] -- 输出详细信息
 COSTS [ boolean ] -- 输出cost值, 默认打开
 BUFFERS [ boolean ] -- 输出本次QUERY shared 或 local buffer的信息. 包括命中,未命中,脏, 写
 TIMING [ boolean ] -- 输出时间开销
 FORMAT { TEXT | XML | JSON | YAML } -- 输出格式
 需要特别注意analyze的使用, 会真的的执行SQL, 所以一般不要使用, 特别是DML.
EXPLAIN 输出的含义
 例子讲解
 digoal=# explain (analyze, verbose, costs, buffers, timing) select count(*) from tbl_cost_align;
 QUERY PLAN
 Aggregate (cost=220643.00..220643.01 rows=1 width=0) (actual time=4637.754..4637.754 rows=1 loops=1)
 Output: count(*) -- 这个节点的输出, 聚合, 输出第一行前的开销是220643.00.
 -- 聚合的开销=220643.00 - 195393.00
 Buffers: shared hit=4925 read=89468 -- 这个节点以及下级节点的BUFFER统计项
 -> Seq Scan on postgres.tbl_cost_align (cost=0.00..195393.00 rows=10100000 width=0) (actual time=0.018..3119.291
rows=10100000 loops=1) -- 这个节点的路径(全表扫描)
 -- 0.00表示输出第一行前的成本, 如这里输出第一行前不需要排序为0.00. 后面是这个节点真实的时间.
 Output: id, info, crt_time -- 这个节点输出的列
 Buffers: shared hit=4925 read=89468 -- 这个节点的shared buffer命中4925个page, 从磁盘读取89468个page(如果
shared buffer够大, 第二次执行的时候应该全部hit.)
 Total runtime: 4637.805 ms -- 总的执行时间
 (7 rows)
EXPLAIN 输出的含义
 组合行集例子
 digoal=# explain (analyze, verbose, costs, buffers, timing) select 1 union select 1; -- union去重复, 所以有sort节点
 QUERY PLAN
 Unique (cost=0.05..0.06 rows=2 width=0) (actual time=0.049..0.051 rows=1 loops=1)
 Output: (1)
 Buffers: shared hit=3
 -> Sort (cost=0.05..0.06 rows=2 width=0) (actual time=0.047..0.047 rows=2 loops=1)
 Output: (1)
 Sort Key: (1)
 Sort Method: quicksort Memory: 25kB
 Buffers: shared hit=3
 -> Append (cost=0.00..0.04 rows=2 width=0) (actual time=0.006..0.007 rows=2 loops=1)
 -> Result (cost=0.00..0.01 rows=1 width=0) (actual time=0.003..0.003 rows=1 loops=1)
 Output: 1
 -> Result (cost=0.00..0.01 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
 Output: 1
 Total runtime: 0.136 ms
 (14 rows)
EXPLAIN 输出的含义
 嵌套连接例子
 nested loop join: The right relation is scanned once for every row found in the left relation. This strategy is easy to implement but can be very time
consuming. (However, if the right relation can be scanned with an index scan, this can be a good strategy. It is possible to use values from the
current row of the left relation as keys for the index scan of the right.)
 for tuple in 左表查询 loop
 右表查询(根据左表查询得到的行作为右表查询的条件依次输出最终结果)
 end loop;
 适合右表的关联列发生在唯一键值列或者主键列上的情况.
EXPLAIN 输出的含义
 嵌套连接例子
 digoal=# explain (analyze, verbose, costs, buffers, timing) select f.* from f,p where f.p_id=p.id and f.p_id Index Scan using idx_f_1 on postgres.f (cost=0.29..2.45 rows=9 width=49) (actual time=0.005..0.010 rows=9 loops=1) -- 左表
 Output: f.id, f.p_id, f.info, f.crt_time
 Index Cond: (f.p_id  Index Only Scan using p_pkey on postgres.p (cost=0.29..2.19 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=9) -- 右表
 Output: p.id
 Index Cond: (p.id = f.p_id)
 Heap Fetches: 9
 Buffers: shared hit=27
 Total runtime: 0.072 ms
 (13 rows)
EXPLAIN 输出的含义
 哈希连接例子
 hash join: the right relation is first scanned and loaded into a hash table, using its join attributes as hash keys. Next the left relation is scanned and
the appropriate values of every row found are used as hash keys to locate the matching rows in the table.
 首先右表扫描加载到内存HASH表, hash key为JOIN列.
 然后左表扫描, 并与内存中的HASH表进行关联, 输出最终结果.
EXPLAIN 输出的含义
 哈希连接例子
 digoal=# explain (analyze, verbose, costs, buffers, timing) select f.* from f,p where f.p_id=p.id and f.p_id Seq Scan on postgres.p (cost=0.00..194.00 rows=10000 width=4) (actual time=0.014..2.016 rows=10000 loops=1) -- 左表
 Output: p.id, p.info, p.crt_time
 Buffers: shared hit=94
 -> Hash (cost=2.45..2.45 rows=9 width=49) (actual time=0.017..0.017 rows=9 loops=1)
 Output: f.id, f.p_id, f.info, f.crt_time
 Buckets: 1024 Batches: 1 Memory Usage: 1kB -- 右表加载到内存, hash key是join key f.p_id
 Buffers: shared hit=4
 -> Index Scan using idx_f_1 on postgres.f (cost=0.29..2.45 rows=9 width=49) (actual time=0.005..0.012 rows=9 loops=1) -- 右表
 Output: f.id, f.p_id, f.info, f.crt_time
 Index Cond: (f.p_id  Index Scan using idx_f_1 on postgres.f (cost=0.29..2.45 rows=9 width=49) (actual time=0.005..0.012 rows=9 loops=1)
 Output: f.id, f.p_id, f.info, f.crt_time
 Index Cond: (f.p_id  Index Only Scan using p_pkey on postgres.p (cost=0.29..274.29 rows=10000 width=4) (actual time=0.017..0.022 rows=10 loops=1)
 Output: p.id
 Heap Fetches: 10
 Buffers: shared hit=4
 Total runtime: 0.118 ms
 (13 rows)
EXPLAIN 成本计算
 成本计算相关的参数和系统表或视图
 表或视图
 pg_stats
 pg_class -- 用到relpages和reltuples
 参数
 seq_page_cost -- 全表扫描的单个数据块的代价因子
 random_page_cost -- 索引扫描的单个数据块的代价因子
 cpu_tuple_cost -- 处理每条记录的CPU开销代价因子
 cpu_index_tuple_cost -- 索引扫描时每个索引条目的CPU开销代价因子
 cpu_operator_cost -- 操作符或函数的开销代价因子
EXPLAIN 成本计算
 pg_stats
EXPLAIN 成本计算 - 全表扫描
 例子
 全表扫描的成本计算
 digoal=# explain select * from f;
 QUERY PLAN
 -----------------------------------------------------------
 Seq Scan on f (cost=0.00..12999.00 rows=640000 width=49)
 (1 row)
 Cost是怎么得来的? 全表扫描的成本计算只需要用到pg_class.
 digoal=# select relpages,reltuples from pg_class where relname='f';
 relpages | reltuples
 ----------+-----------
 6599 | 640000
 (1 row)
EXPLAIN 成本计算 - 全表扫描
 digoal=# show seq_page_cost;
 seq_page_cost
 ---------------
 1
 (1 row)
 digoal=# show cpu_tuple_cost;
 cpu_tuple_cost
 ----------------
 0.01
 (1 row)
 COST值 :
 digoal=# select 6599*1+640000*0.01;
 ?column?
 ----------
 12999.00
 (1 row)
EXPLAIN 行数评估
 从柱状图评估行数的例子
 EXPLAIN SELECT * FROM tenk1 WHERE unique1  Bitmap Index Scan on tenk1_unique1 (cost=0.00..23.80 rows=1007 width=0)
 Index Cond: (unique1 < 1000)
 在8.3以及以前版本default_statistics_target默认是10, 也就是10个bucket.
 SELECT histogram_bounds FROM pg_stats
 WHERE tablename='tenk1' AND attname='unique1';