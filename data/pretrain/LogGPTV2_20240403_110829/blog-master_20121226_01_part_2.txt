第六次开始使用generic_plan, 而immutable function在plan时将被结果常量替换.   
```  
digoal=> execute p_test(1);  
 ?column? | immutable_random    
----------+-------------------  
        1 | 0.431490630842745  
(1 row)  
Time: 0.233 ms  
```  
以后再执行这个prepare statement, immutable_random()部分都将得到同样的结果.  
```  
digoal=> execute p_test(1);  
 ?column? | immutable_random    
----------+-------------------  
        1 | 0.431490630842745  
(1 row)  
Time: 0.165 ms  
digoal=> execute p_test(2);  
 ?column? | immutable_random    
----------+-------------------  
        2 | 0.431490630842745  
(1 row)  
Time: 0.273 ms  
digoal=> execute p_test(3);  
 ?column? | immutable_random    
----------+-------------------  
        3 | 0.431490630842745  
(1 row)  
Time: 0.149 ms  
```  
而把immutable_random()改成volatile或者stable后, immutable_random()都将产生不同的结果, 不会发生以上情况.  
因为他们在plan时函数不会被结果替换.  
所以在prepare statement中使用immutable函数, 需要特别注意这个函数到底是不是真的是immutable的.  
## MVCC 注意  
这里要注意的是volatile, stable, immutable这几种函数, 对数据的修改的可见性分两种情况.  
volatile , 调用该函数的SQL对数据的修改, 可见.  
stable, immutable , 调用该函数的SQL对数据的修改, 不可见.  
```  
 STABLE and IMMUTABLE functions use a snapshot established as of the start of the calling query,   
 whereas VOLATILE functions obtain a fresh snapshot at the start of each query they execute.  
```  
例如 :   
创建测试表 :   
```  
digoal=> create table test(id int,info text);  
CREATE TABLE  
Time: 50.356 ms  
digoal=> insert into test select 1,random()::text from generate_series(1,1000);  
INSERT 0 1000  
Time: 5.027 ms  
```  
创建修改函数, 这个函数将在另一个函数中调用, 用来修改ID。  
因为另一个函数是用perform f_mod(int)来修改数据, 所以另外一个函数可以改成volatile, stable, immutable任意.  
```  
digoal=> create or replace function f_mod(i_id int) returns void as $$     
declare  
begin           
  update test set id=i_id+1 where id=i_id;  
end;                    
$$ language plpgsql volatile;  
```  
测试稳定性的函数 :   
```  
digoal=> create or replace function f_test(i_id int) returns bigint as $$  
declare  
  result int8;  
begin  
  perform f_mod(i_id);  
  select count(*) into result from test where id=i_id;  
  return result;  
end;  
$$ language plpgsql volatile;  
```  
当稳定性=volatile时, 修改可以被select count(*) into result from test where id=i_id; 看到 :   
所以更新后结果为0 :   
```  
digoal=> select f_test(1);  
 f_test   
--------  
      0  
(1 row)  
```  
改成stable, 它看到的是SQL开始是的snapshot, 所以对修改不可见, 结果还是1000 :   
```  
digoal=> alter function f_test(int) stable;  
ALTER FUNCTION  
digoal=> select f_test(2);  
 f_test   
--------  
   1000  
(1 row)  
```  
改成immutable, 它看到的是SQL开始是的snapshot, 所以对修改不可见, 结果还是1000 :   
```  
digoal=> alter function f_test(int) immutable;  
ALTER FUNCTION  
digoal=> select f_test(3);  
 f_test   
--------  
   1000  
(1 row)  
```  
还有一种情况是如果修改是来自函数体外部的修改, 那是否可见?  
```  
digoal=> create or replace function f_test(i_id int) returns bigint as $$  
declare  
  result int8;  
begin  
  select count(*) into result from test where id=i_id;    
  return result;  
end;                                                                    
$$ language plpgsql volatile;  
CREATE FUNCTION  
```  
看不到with的修改 :   
```  
digoal=> alter function f_test(int) immutable;  
ALTER FUNCTION  
digoal=> with t1 as (  
digoal(>   update test set id=id+1 where id=4  
digoal(> )  
digoal-> select f_test(4);  
 f_test   
--------  
   1000  
(1 row)  
```  
看不到with的修改 :   
```  
digoal=> alter function f_test(int) stable;  
ALTER FUNCTION  
digoal=> with t1 as (  
  update test set id=id+1 where id=5  
)  
select f_test(5);  
 f_test   
--------  
   1000  
(1 row)  
```  
看不到with的修改 :   
```  
digoal=> alter function f_test(int) volatile;  
ALTER FUNCTION  
digoal=> with t1 as (                          
  update test set id=id+1 where id=6  
)  
select f_test(6);  
 f_test   
--------  
   1000  
(1 row)  
```  
在事务中时, 都能看到本事务在前面做的修改 :   
```  
digoal=> alter function f_test(int) immutable;  
ALTER FUNCTION  
digoal=> begin;  
BEGIN  
digoal=> update test set id=id+1 where id=13;  
UPDATE 1000  
digoal=> select f_test(13);  
 f_test   
--------  
      0  
(1 row)  
digoal=> select f_test(14);  
 f_test   
--------  
   1000  
(1 row)  
digoal=> end;  
COMMIT  
volatile, stable测试略, 同上。  
```  
## 其他  
1\. 查看函数的稳定性 :   
```  
digoal=> select proname,proargtypes,provolatile from pg_proc where proname='f_test';  
 proname | proargtypes | provolatile   
---------+-------------+-------------  
 f_test  |             | i  
 f_test  | 23          | i  
(2 rows)  
```  
i表示immutable, s表示stable, v表示volatile.  
2\. 请按实际情况严格来标记一个函数的稳定性.  
3\. stable函数和immutable函数不能直接调用UPDATE这种修改数据库的SQL语句. 但是通过perform volatile function或者select volatile function还是会修改到数据, 因为PostgreSQL不会有更深层次的检查.  
## 参考  
1\. http://www.postgresql.org/docs/9.2/static/spi-spi-prepare.html  
2\. http://www.postgresql.org/docs/9.2/static/plpgsql-implementation.html  
3\. http://www.postgresql.org/docs/9.2/static/xfunc-volatility.html  
4\. [《函数稳定性讲解 - Thinking PostgreSQL Function's Volatility Categories》](../201106/20110610_01.md)    
5\. [《函数稳定性讲解 - 函数索引思考, pay attention to function index used in PostgreSQL》](../201206/20120626_02.md)  
6\. http://www.postgresql.org/docs/9.2/static/monitoring-stats.html  
7\. [《执行计划选择算法 与 绑定变量 - PostgreSQL prepared statement: SPI_prepare, prepare|execute COMMAND, PL/pgsql STYLE: custom & generic plan cache》](../201212/20121224_01.md)   
8\. http://www.postgresql.org/docs/9.2/static/sql-createfunction.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")