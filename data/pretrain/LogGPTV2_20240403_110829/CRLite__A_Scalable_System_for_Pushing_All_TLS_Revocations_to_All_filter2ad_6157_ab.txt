### Certificate Binding and Validation

**Certificate Binding:**
Leaf certificates, which bind identities (e.g., domain names) to cryptographic keys, are cryptographically signed by a Certificate Authority (CA). This signature forms a chain that may include zero or more intermediate certificates, ultimately terminating at a self-signed root certificate. During the TLS handshake, servers present this chain to clients, who must then validate it.

**Certificate Validation:**
Clients must validate the presented certificates, which involves verifying signatures, checking expiration dates, and other validation steps. In this work, we focus on the challenges of checking for certificate revocations. However, researchers have identified other issues related to certificate validation, such as bugs in popular TLS libraries [8], browsers [49], and non-browser software [29]. These issues have motivated the development of novel certificate validation schemes that leverage advanced cryptographic techniques [17].

### Certificate Transparency

**Concerns with CAs:**
Because any CA can issue a certificate for any domain, there are significant concerns about CAs improperly issuing certificates, especially after a private key compromise [2]. The Certificate Transparency (CT) project addresses these concerns by creating public, auditable, append-only logs of certificates. The idea is that all newly issued certificates will be added to these logs by CAs. Google has encouraged CT adoption through Chrome policies: starting in January 2015, new Extended Validation (EV) certificates were required to include a Signed Certificate Timestamp (SCT) from a well-known CT log [43]. In October 2017, Chrome required all new certificates to contain SCT records [66], and Firefox is also planning to adopt these policies [54].

### Measuring the TLS Ecosystem

**HTTPS Ecosystem Studies:**
As HTTPS has become increasingly important, many studies have empirically examined various aspects of the HTTPS ecosystem. Several studies have broadly investigated certificates on the web [20], [23], [36], with recent work showing that IPv4 scans and CT logs provide broad visibility of valid certificates [73]. Chung et al. [15] examined the hundreds of millions of invalid certificates that linger on the web. Other research has focused on the root certificates trusted by clients [58], [72] and the costs of HTTPS security [56]. Additionally, two studies have specifically examined the security implications of distributing private keys across Content Delivery Networks (CDNs) [48], [11].

### TLS Certificate Revocation

**Revocation Process:**
At any time, the owner of a certificate may request their CA to revoke the certificate, producing a public, cryptographically-verifiable attestation that the certificate should no longer be trusted, even if it has not expired. Common reasons for revocation include weak keys [75], potential private key compromises [76], [19], and erroneous issuance. Revoked certificates can be misused for Man-in-the-Middle (MiTM) or phishing attacks until they expire. Therefore, it is crucial that such certificates be revoked and that clients check for revocations during the TLS handshake.

**Revocation Protocols:**
There are two primary protocols for distributing revocations:

1. **CRLs (Certificate Revocation Lists):**
   - A CRL is a list of serial numbers from revoked certificates, signed by a CA.
   - CAs include a URL in each certificate pointing to the associated CRL.
   - Clients download the CRLs to check if the certificates are revoked.
   - CRLs are signed by the CA to ensure integrity and contain a validity period (up to 10 days [10]).

2. **OCSP (Online Certificate Status Protocol):**
   - OCSP is a web service protocol allowing clients to query a CA for the revocation status of a single certificate.
   - CAs insert a URL into each certificate pointing to the corresponding OCSP responder.
   - OCSP responses are signed by the CA and contain a validity period during which they may be cached.

**Prevalence of Revocation:**
Recent studies show that revocation is prevalent in the web's PKI [49]. Over 99% of valid certificates on the web contain a reachable CRL URL, and 95% include a reachable OCSP responder. Liu et al. [49] observed that 8% of all valid certificates are revoked (6% for valid EV certificates), with many revocations due to Heartbleed [76], [19].

### Revocation Checking

**Client Responsibilities:**
Clients are responsible for checking all leaf and intermediate certificates offered during a TLS handshake for revocations. This can be done by downloading the certificates' CRLs or contacting their OCSP servers. Alternatively, servers can push revocation information to the client via OCSP Stapling, although as of 2015, only 3–5% of certificates on the web were served by hosts that supported stapling [49].

**Practical Challenges:**
Unfortunately, Liu et al. [49] found that browsers do a poor job of checking for revocations. For example, Firefox no longer supports CRLs, while Chrome only issues online requests for EV certificates. No major mobile browsers perform online revocation checks, leaving users vulnerable to MiTM or phishing attacks due to compromised certificates.

**Reasons for Poor Implementation:**
Browser vendors have chosen not to implement thorough revocation checking for several reasons:
- Downloading CRLs and making OCSP requests add delay to HTTPS connections.
- CRLs can be very large (e.g., Apple's CRL is over 76 MB [49]).
- Using OCSP has privacy implications, as OCSP requests allow CAs to observe the domains users browse.
- Although stapling addresses OCSP’s privacy problem, it is vulnerable to downgrade attacks, where an in-network attacker can strip the staple from a certificate, forcing the client to revert to traditional CRL or OCSP checks.

**Stapling and Must-Staple:**
To address stapling downgrade attacks, RFC 7633 defines the OCSP "must-staple" extension, which requires servers to provide a stapled OCSP response during the TLS handshake [34]. Must-Staple effectively addresses latency, privacy, and fail-open issues but only applies to certificates that include the new extension. Upgrading HTTPS servers and browsers is necessary to support this protocol.

**Fail-open vs. Fail-closed:**
No currently-deployed approaches to disseminating revocations push all revocations to clients. Clients must sometimes make external requests to obtain revocation status. If the request fails, clients must decide whether to accept the certificate (fail-open) or reject it (fail-closed). Most systems adopt a fail-open model, accepting the certificate if revocation information cannot be obtained. Browser vendors argue that a fail-closed model would cause unacceptable levels of failures [41], but the fail-open model provides little additional security, as an attacker can block the revocation status request and cause a revoked certificate to be accepted.

**CRLite:**
CRLite aims to sidestep this conundrum by ensuring clients have up-to-date revocation information for all certificates, eliminating the need to choose between availability and security.

**CRLSet and OneCRL:**
To mitigate performance and privacy issues, browser vendors have begun pushing partial lists of certificate revocations directly to users' browsers. Google's CRLSet, introduced in 2013, contains between 14K–25K revocations (depending on the date) [49] and is updated daily. Mozilla's OneCRL, introduced in 2015, includes 357 revoked intermediate certificates [31]. Adam Langley from the Chrome security team has explored using compressed, probabilistic data structures for distributing all revocations, but no browser has adopted this approach yet [39].

### Other Revocation Distribution Schemes

**Alternative Mechanisms:**
Many classic proposals have been made for alternative certificate revocation mechanisms, such as Micali’s Certificate Revocation System [51], multi-certificate revocation [1], revocation trees [38], [55], [52], and combinations of these techniques [28], [25]. Recent work has explored extending certificate transparency initiatives to incorporate revocations [44], [62]. Others have focused on scaling up revocation infrastructure in the face of Byzantine failures [77].

**Perspectives Project:**
The Perspectives project aims to eliminate the need for revocation by relying on multiple, independent observations to determine the veracity of certificates [4]. The assumption is that legitimate certificates will be seen by many users, while fraudulent or stolen certificates will only be seen by a small subset of users under attack. However, the security guarantees are probabilistic, and as of 2016, this initiative has not gained traction.

**Other Approaches:**
Chariton et al. propose distributing revocations through DNS [12], similar to how DANE uses DNS to distribute certificates [35]. Szalachowski et al. propose distributing revocations to middleboxes in the network that observe TLS handshakes and insert up-to-date revocation information [68]. These systems require significant buy-in from CAs and clients. Schulman et al. design a system to distribute revocations through FM radio broadcasts [65], but all clients would need to install FM radio receivers. Proposals like AKI [37], PoliCert [70], ARPKI [3], and PKISN [69] aim to replace the existing PKI with a new hierarchy that avoids centralizing trust, is transparent, and supports seamless revocation. However, these clean-slate proposals necessitate changes to CAs, clients, and, in some cases, certificates.

**CRLite Goals:**
One of our goals is to develop a system that is immediately deployable without requiring changes to CAs and certificates. Interestingly, the authors of PKISN suggest pushing all revocations to clients but do not address the problem of encoding this data in a way that is not prohibitive for clients [69].

### Filter Cascades

**Dissemination of Revocations:**
There has been considerable work on how best to disseminate certificate revocations, involving various data structures, including CRLs, Merkle trees, Bloom filters, and variants thereof [39]. The conclusion is that the trade-offs between timeliness and bandwidth are too great, leading some to suggest eliminating revocation lists altogether [61], [50]. Today's browsers are restricted to a tiny subset of the web's revocations, often checking none at all [49].

**Insight and Design:**
Our insight is that our data structure need not support queries for any arbitrary data item but only for the finite set of unexpired certificates. We describe the design of a Bloom filter cascade, which achieves zero false positives despite being compact. Insertion into a filter cascade begins by creating a first-level Bloom filter (BF1) with the optimal size and number of hash functions to achieve a given false positive rate 0 < p < 1. Elements of R are inserted into BF1. If some data item u is not in BF1, it is definitively not in R, but not vice versa. The set of first-level false positives (FP1) contains the elements of S that also appear in BF1, with |FP1| = p · |S| in expectation.