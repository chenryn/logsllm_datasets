# ShadowMonitor: An Effective In-VM Monitoring Framework with Hardware-Enforced Isolation

**Authors:**  
Bin Shi, Lei Cui, Bo Li, Xudong Liu, Zhiyu Hao, Haiying Shen

**Affiliations:**
- **Bin Shi, Bo Li, Xudong Liu**  
  State Key Laboratory of Software Development Environment, Beihang University, Beijing, China  
  {shibin, libo, liuxd}@act.buaa.edu.cn
- **Lei Cui, Zhiyu Hao**  
  Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China  
  {cuilei, haozhiyu}@iie.ac.cn
- **Haiying Shen**  
  Department of Computer Science, University of Virginia, Charlottesville, USA

**Abstract:**
Virtual machine introspection (VMI) is a powerful technique for enhancing system security in cloud environments. It provides strong isolation between untrusted guest VMs and security tools, ensuring the dependability of these tools even if the guest is compromised. VMI has been widely used for intrusion detection, security monitoring, and tampering forensics. However, existing VMI solutions often suffer from significant performance degradation due to frequent memory address translations and context switches. This limitation restricts their practical use, especially in scenarios requiring fine-grained monitoring.

In this paper, we introduce ShadowMonitor, an efficient VMI framework that enables in-VM monitoring with minimal overhead. ShadowMonitor decomposes the monitoring system into two isolated compartments, each with its own address space. By placing the monitored components in a protected compartment, it ensures the safety of both the monitoring tools and the guests. Additionally, ShadowMonitor uses hardware-enforced instructions to design gates between the compartments, facilitating efficient switching. We have implemented ShadowMonitor on QEMU/KVM, leveraging several hardware virtualization features. Experimental results show that ShadowMonitor can prevent various types of attacks and achieves up to a 10Ã— speedup over existing methods in event monitoring and overall application performance.

**Keywords:** Virtual machine introspection, Monitor, Isolation

## 1. Introduction

With the widespread adoption of cloud computing and virtualization, virtual machine introspection (VMI) has become a critical technique for addressing security risks in virtualized environments. The core idea of VMI is to place security tools in the hypervisor or a trusted VM, allowing them to monitor and protect untrusted VMs from the outside. This approach ensures the dependability and integrity of the security tools, even if the untrusted VM is compromised.

Existing out-of-VM introspection techniques can be categorized into passive and active methods. Passive techniques periodically invoke APIs to check the state of the monitored system, but they fail to detect instantaneous attacks. Active techniques, on the other hand, use an event-driven approach to intercept system events such as process switches, system calls, and interruptions, enabling real-time detection. However, active techniques introduce significant performance overhead due to frequent context switches and software-based virtual address translations.

To address these issues, some studies propose in-VM introspection, where part of the monitoring components are placed inside the monitored VM. While this approach aims to provide the same level of security without significant performance loss, it faces challenges in ensuring the security of the in-VM components. For example, SIM [30] uses separate shadow page tables to isolate the monitor components, but it cannot prevent address translation redirection attacks. Moreover, in-VM introspection lacks the flexibility of dynamic configuration and introduces performance overhead compared to native execution.

To mitigate these problems, we propose ShadowMonitor, a general-purpose framework that leverages hardware features to provide efficient in-VM monitoring and strong isolation. ShadowMonitor decomposes the system into two compartments: a shadow compartment for monitor tools and private data, and a main compartment for the guest OS and user applications. It uses hardware virtualization features to assign each compartment a separate address space and employs specific gates for efficient switching. This eliminates the need for heavyweight operations like VM-exits and VM-enters, allowing memory access at native speed.

We have implemented ShadowMonitor on the QEMU/KVM platform and evaluated it through a series of experiments. The results show that ShadowMonitor can effectively defend against various types of attacks and provides a significant speedup over existing methods.

**Contributions:**
- We propose an efficient in-VM monitoring framework that uses hardware features to isolate security tools from untrusted guests.
- We present solutions for strong isolation, efficient switching, and flexible event monitoring.
- We implement ShadowMonitor on QEMU/KVM and conduct experiments to demonstrate its effectiveness and efficiency.
- We analyze how ShadowMonitor defends against several types of attacks and show that it can detect and prevent malicious behavior.

## 2. Overview

### 2.1 Threat Model

In ShadowMonitor, we assume that the hypervisor is trustworthy, while the guests may be compromised after boot-up. The attackers can compromise the guest OS but cannot break the underlying hypervisor or hardware. The memory region of the interrupt descriptor table (IDT) is considered safe, as it can be protected by setting permission flags in EPT entries and trapping operations on the IDTR register. We also assume that users of ShadowMonitor are trusted. Some attacks, such as VM-escape, DDoS, and side-channel attacks, may still pose a threat, which we will discuss in Section 5.

### 2.2 Basic Idea

The architecture of ShadowMonitor is shown in Figure 1. The system is decomposed into two compartments: the main compartment, which provides the execution environment for the guest OS and user applications, and the shadow compartment, which contains the monitor components. The shadow compartment is invisible to the guest OS, and entry and exit between the compartments are controlled by designated gates.

ShadowMonitor can be deployed as an additional service for single VMs or VM clusters in the cloud. The cloud provider deploys ShadowMonitor, and the VM user can configure it to monitor applications and manage the VM based on the monitoring data. The user can set or remove traps using ShadowMonitor APIs. After a safe guest boot-up, ShadowMonitor follows these steps:
1. The VM user requests the cloud provider to deploy the ShadowMonitor components.
2. The user sets or removes traps in the guest using the provided APIs.
3. When a trap is triggered, the monitor code in the shadow compartment records the event and its context.
4. The data storage module periodically collects and reports the monitoring data to the VM user.

### 2.3 Challenges

Realizing ShadowMonitor involves several challenges:
- **Isolation of Compartments:** Ensuring strong isolation between the main and shadow compartments to protect the security tools.
- **Efficient Switching Between Compartments:** Designing low-overhead gates for frequent switching between compartments.
- **Customized Event Interception at Run-Time:** Providing dynamic and flexible event monitoring to allow users to register or cancel event interceptions at run-time.

**Figure 1: Overview of ShadowMonitor**

```
+-------------------------------------------------------------+
|                     Guest Virtual Machine                   |
| +-------------------+  +-------------------+                |
| | Main Compartment  |  | Shadow Compartment|                |
| |  - Code           |  |  - Monitor Code   |                |
| |  - Trap           |  |  - Monitor Data   |                |
| |  - GATE           |  |  - APP            |                |
| |  - Operating      |  |  - Operating System|               |
| |    System         |  |  - Set or remove  |                |
| |  - Set or remove  |  |    traps          |                |
| |    traps          |  |  - Fetch monitor  |                |
| |  - Fetch monitor  |  |    data           |                |
| |    data           |  |  - Event Register |                |
| |  - Event Register |  |  - Data Storage   |                |
| +-------------------+  +-------------------+                |
| +-------------------+                                    |
| | Hypervisor        |                                    |
| +-------------------+                                    |
| +-------------------+                                    |
| | Hardware          |                                    |
+-------------------------------------------------------------+
```

This figure illustrates the high-level architecture of ShadowMonitor, showing the main and shadow compartments, the gates, and the interaction with the hypervisor and hardware.