title:Post-quantum Key Exchange - A New Hope
author:Erdem Alkim and
L&apos;eo Ducas and
Thomas P&quot;oppelmann and
Peter Schwabe
Post-quantum Key Exchange—A New Hope
Erdem Alkim, Ege University; Léo Ducas, Centrum voor Wiskunde en Informatica;  
Thomas Pöppelmann, Infineon Technologies AG; Peter Schwabe, Radboud University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/alkim
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Post-quantum key exchange – a new hope∗
Department of Mathemathics, Ege University, Turkey
Erdem Alkim
Centrum voor Wiskunde en Informatica, Amsterdam, The Netherlands
Léo Ducas
Thomas Pöppelmann
Inﬁneon Technologies AG, Munich, Germany
Digital Security Group, Radboud University, The Netherlands
Peter Schwabe
Abstract
At IEEE Security & Privacy 2015, Bos, Costello,
Naehrig, and Stebila proposed an instantiation of Peik-
ert’s ring-learning-with-errors–based (Ring-LWE) key-
exchange protocol (PQCrypto 2014), together with an
implementation integrated into OpenSSL, with the af-
ﬁrmed goal of providing post-quantum security for TLS.
In this work we revisit their instantiation and stand-alone
implementation. Speciﬁcally, we propose new param-
eters and a better suited error distribution, analyze the
scheme’s hardness against attacks by quantum comput-
ers in a conservative way, introduce a new and more efﬁ-
cient error-reconciliation mechanism, and propose a de-
fense against backdoors and all-for-the-price-of-one at-
tacks. By these measures and for the same lattice dimen-
sion, we more than double the security parameter, halve
the communication overhead, and speed up computation
by more than a factor of 8 in a portable C implementation
and by more than a factor of 27 in an optimized imple-
mentation targeting current Intel CPUs. These speedups
are achieved with comprehensive protection against tim-
ing attacks.
1
Introduction
The last decade in cryptography has seen the birth of
numerous constructions of cryptosystems based on lat-
tice problems, achieving functionalities that were previ-
ously unreachable (e.g., fully homomorphic cryptogra-
∗This work was initiated while Thomas Pöppelmann was a Ph.D.
student at Ruhr-University Bochum with support from the European
Union H2020 SAFEcrypto project (grant no. 644729). This work has
furthermore been supported by TÜBITAK under 2214-A Doctoral Re-
search Program Grant, by the European Commission through the ICT
program under contract ICT-645622 (PQCRYPTO), and by the Nether-
lands Organisation for Scientiﬁc Research (NWO) through Veni 2013
project 13114 and through a Free Competition Grant. Permanent ID
of this document: 0462d84a3d34b12b75e8f5e4ca032869. Date:
2016-06-28.
phy [38]). But even for the simplest tasks in asymmetric
cryptography, namely public-key encryption, signatures,
and key exchange, lattice-based cryptography offers an
important feature: resistance to all known quantum algo-
rithms. In those times of quantum nervousness [73, 74],
the time has come for the community to deliver and op-
timize concrete schemes, and to get involved in the stan-
dardization of a lattice-based cipher-suite via an open
process.
For encryption and signatures, several competitive
schemes have been proposed; examples are NTRU en-
cryption [50, 83], Ring-LWE encryption [67] as well as
the signature schemes BLISS [31], PASS [48] or the pro-
posal by Bai and Galbraith presented in [8]. To complete
the lattice-based cipher-suite, Bos et al. [20] recently
proposed a concrete instantiation of the key-exchange
scheme of Peikert’s improved version of the original pro-
tocol of Ding, Xie and Lin [52, 77]. Bos et al. proved its
practicality by integrating their implementation as addi-
tional cipher-suite into the transport layer security (TLS)
protocol in OpenSSL. In the following we will refer to
this proposal as BCNS.
Unfortunately,
the performance of BCNS seemed
rather disappointing. We identify two main sources for
this inefﬁciency. First the analysis of the failure probabil-
ity was far from tight, resulting in a very large modulus
q ≈ 232. As a side effect, the security is also signiﬁcantly
lower than what one could achieve with Ring-LWE for
a ring of rank n = 1024. Second the Gaussian sampler,
used to generate the secret parameters, is fairly inefﬁcient
and hard to protect against timing attacks. This second
source of inefﬁciency stems from the fundamental mis-
conception that high-quality Gaussian noise is crucial for
encryption based on LWE1, which has also made various
other implementations [29,79] slower and more complex
than they would have to be.
1This is very different for lattice-based signatures or trapdoors,
where distributions need to be meticulously crafted to prevent any leak
of information on a secret basis.
USENIX Association  
25th USENIX Security Symposium  327
1.1 Contributions
In this work, we propose solutions to the performance
and security issues of the aforementioned BCNS pro-
posal [20]. Our improvements are possible through a
combination of multiple contributions:
• Our ﬁrst contribution is an improved analysis of
the failure probability of the protocol. To push
the scheme even further, inspired by analog error-
correcting codes, we make use of the lattice D4
to allow error reconciliation beyond the original
bounds of [77]. This drastically decreases the mod-
ulus to q = 12289 < 214, which improves both efﬁ-
ciency and security.
• Our second contribution is a more detailed secu-
rity analysis against quantum attacks. We pro-
vide a lower bound on all known (or even pre-
supposed) quantum algorithms solving the shortest-
vector problem (SVP), and deduce the potential per-
formance of a quantum BKZ algorithm. Accord-
ing to this analysis, our improved proposal provides
128 bits of post-quantum security with a comfort-
able margin.
• We furthermore propose to replace the almost-
perfect discrete Gaussian distribution by some-
thing relatively close, but much easier to sample,
and prove that this can only affect the security
marginally.
• We replace the ﬁxed parameter a of the original
scheme by a freshly chosen random one in each key
exchange. This incurs an acceptable overhead but
prevents backdoors embedded in the choice of this
parameter and all-for-the-price-of-one attacks.
• We specify an encoding of polynomials in the
number-theoretic transform (NTT) domain which
allows us to eliminate some of the NTT transfor-
mations inside the protocol computation.
• To demonstrate the applicability and performance
of our design we provide a portable reference im-
plementation written in C and a highly optimized
vectorized implementation that targets recent Intel
CPUs and is compatible with recent AMD CPUs.
We describe an efﬁcient approach to lazy reduction
inside the NTT, which is based on a combination
of Montgomery reductions and short Barrett reduc-
tions.
Availability of software. We place all software de-
scribed in this paper
into the public domain and
make it available online at https://cryptojedi.
2
org/crypto/#newhope and https://github.com/
tpoeppelmann/newhope.
Full version of the paper. The full version of this pa-
per contains various appendices in addition to the ma-
terial presented in this proceedings version. The full
version is available online at https://eprint.iacr.
org/2015/1092/ and at https://cryptojedi.org/
papers/#newhope.
Acknowledgments. We are thankful to Mike Hamburg
and to Paul Crowley for pointing out mistakes in a pre-
vious version of this paper, and we are thankful to Isis
Lovecruft for thoroughly proofreading the paper and for
suggesting the name JARJAR for the low-security variant
of our proposal.
2 Lattice-based key exchange
Let Z be the ring of rational integers. We deﬁne for an
x ∈ R the rounding function (cid:29)x(cid:28) = (cid:29)x + 1
2(cid:27) ∈Z . Let Zq,
for an integer q ≥ 1, denote the quotient ring Z/qZ. We
deﬁne R = Z[X]/(X n + 1) as the ring of integer polyno-
mials modulo X n +1. By Rq = Zq[X]/(X n +1) we mean
the ring of integer polynomials modulo X n + 1 where
each coefﬁcient is reduced modulo q. In case χ is a prob-
ability distribution over R, then x $← χ means the sam-
pling of x ∈ R according to χ. When we write a $← Rq
this means that all coefﬁcients of a are chosen uniformly
at random from Zq. For a probabilistic algorithm A we
denote by y $← A that the output of A is assigned to y
and that A is running with randomly chosen coins. We
recall the discrete Gaussian distribution DZ,σ which is
parametrized by the Gaussian parameter σ ∈ R and de-
ﬁned by assigning a weight proportional to exp(−x2
2σ 2 ) to
all integers x.
2.1 The scheme of Peikert
In this section we brieﬂy revisit the passively secure key-
encapsulation mechanism (KEM) that was proposed by
Peikert [77] and instantiated in [20] (BCNS). Peikert’s
KEM scheme is deﬁned by the algorithms (Setup, Gen,
Encaps, Decaps) and after a successful protocol run both
parties share an ephemeral secret key that can be used to
protect further communication (see Protocol 1).
The KEM scheme by Peikert closely resembles a pre-
viously introduced Ring-LWE encryption scheme [66]
but due to a new error-reconciliation mechanism, one
Rq component of the ciphertext can be replaced by a
more compact element in R2. This efﬁciency gain is
possible due to the observation that it is not necessary
to transmit an explicitly chosen key to establish a secure
328  25th USENIX Security Symposium 
USENIX Association
ephemeral session key. In Peikert’s scheme, the recon-
ciliation just allows both parties to derive the session key
from an approximately agreed pseudorandom ring ele-
ment. For Alice, this ring element is us = ass(cid:31) + e(cid:31)s and
for Bob it is v = bs(cid:31) + e(cid:31)(cid:31) = ass(cid:31) + es(cid:31) + e(cid:31)(cid:31). For a full
explanation of the reconciliation we refer to the original
paper [77] but brieﬂy recall the cross-rounding function
(cid:30)·(cid:28)2 deﬁned as (cid:30)v(cid:28)2 := (cid:27) 4
q · v(cid:26) mod 2 and the random-
ized function dbl(v) := 2v− ¯e for some random ¯e where
2, ¯e = 1 with probability 1
¯e = 0 with probability 1
4, and
4. Let I0 = {0,1, . . . ,(cid:27) q
¯e = −1 with probability 1
2(cid:26)−1},
2(cid:22), . . . ,−1}, and E = [− q
4 , q
I1 = {−(cid:27) q
4 ) then the reconcil-
iation function rec(w,b) is deﬁned as
rec(w,b) =(cid:31)0,
if w ∈ Ib + E ( mod q)
1, otherwise.
If these functions are applied to polynomials this means
they are applied to each of the coefﬁcients separately.
Parameters: q,n, χ
KEM.Setup() :
a $← Rq
Alice (server)
KEM.Gen(a) :
s,e $← χ
b←as + e
KEM.Decaps(s, (u,v(cid:31))) :
µ←rec(2us,v(cid:31))
Bob (client)
KEM.Encaps(a,b) :
s(cid:31),e(cid:31),e(cid:31)(cid:31)
$← χ
b
−→ u←as(cid:31) + e(cid:31)
v←bs(cid:31) + e(cid:31)(cid:31)
¯v $← dbl(v)
u,v(cid:31)
←−− v(cid:31) = (cid:30)¯v(cid:28)2
µ←(cid:27)¯v(cid:26)2
Protocol 1: Peikert’s KEM mechanism.
2.2 The BCNS proposal
In a work by Bos, Costello, Naehrig, and Stebila [20]
(BCNS), Peikert’s KEM [77] was phrased as a key-
exchange protocol (see again Protocol 1), instantiated for
a concrete parameter set, and integrated into OpenSSL
(see Section 8 for a performance comparison). Selection
of parameters was necessary as Peikert’s original work
does not contain concrete parameters and the security as
well as error estimation are based on asymptotics. The
authors of [20] chose a dimension n = 1024, a modu-
lus q = 232 − 1, χ = DZ,σ and the Gaussian parameter
σ = 8/√2π ≈ 3.192. It is claimed that these parameters
provide a classical security level of at least 128 bits con-
sidering the distinguishing attack [62] with distinguish-
ing advantage less than 2−128 and 281.9 bits of security
against an optimistic instantiation of a quantum adver-
sary. The probability of a wrong key being established is
less than 2−217
= 2−131072. The message b sent by Alice
is a ring element and thus requires at least log2(q)n = 32
kbits while Bob’s response (u,r) is a ring element Rq and
an element from R2 and thus requires at least 33 kbits. As
the polynomial a ∈ Rq is shared between all parties this
ring element has to be stored or generated on-the-ﬂy. For
timings of their implementation we refer to Table 2. We
would also like to note that besides its aim for securing
classical TLS, the BCNS protocol has already been pro-
posed as a building block for Tor [84] on top of existing
elliptic-curve infrastructure [41].
2.3 Our proposal: NEWHOPE
In this section we detail our proposal and modiﬁcations
of Peikert’s protocol2. For the same reasons as described
in [20] we opt for an unauthenticated key-exchange pro-
tocol; the protection of stored transcripts against future
decryption using quantum computers is much more ur-