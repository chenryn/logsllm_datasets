### Title: From Thousands of Hours to a Couple of Minutes: Automating Exploit Generation for Arbitrary Types of Kernel Vulnerabilities

Writing an effective exploit for a vulnerability is generally a challenging, time-consuming, and labor-intensive task. To address this issue, automated exploit generation techniques have been developed. However, existing methods often fall short when it comes to crafting exploits, especially for kernel vulnerabilities. This is due to two main reasons:

1. **Contextual Limitations**: Current techniques primarily explore exploitability in the context of a crashing process, whereas generating an exploit for a kernel vulnerability typically requires varying the context of a kernel panic.
2. **Complexity and Scalability**: The program analysis techniques used for exploit generation are often suitable only for simple programs and not for the more complex and scalable operating system (OS) kernel.

In this talk, we will introduce and release a new exploitation framework designed to fully automate the exploitation of kernel vulnerabilities. Our framework leverages kernel fuzzing to diversify the contexts of a kernel panic and then uses symbolic execution to explore exploitability under different conditions. This approach significantly enhances the ability to craft exploits in several ways:

1. **Automated System Call Identification**: It automates the identification of system calls that security analysts need to leverage for vulnerability exploitation.
2. **Security Mitigation Bypassing**: It provides the capability to bypass security mitigations, such as SMAP (Supervisor Mode Access Prevention).
3. **Versatile Exploit Generation**: It allows for the automatic generation of exploits with various objectives, such as privilege escalation or data leakage.
4. **Exploitability Verification**: It enables the generation of exploits even for kernel vulnerabilities where exploitability has not yet been confirmed or verified.

As part of this presentation, we will also release several unpublished working exploits for various kernel vulnerabilities. The vulnerabilities we have tested primarily include Use-After-Free and heap overflow issues. Notably, over 50% of these test cases do not have publicly available working exploits. To illustrate our work, I have already disclosed one working exploit on my personal website (http://ww9210.cn/). This exploit pertains to CVE-2017-15649 and demonstrates the bypassing of SMAP, a feature that has not been publicly exploited before.

By leveraging our new exploitation framework, security analysts can significantly reduce the time and effort required to generate high-quality exploits for kernel vulnerabilities, thereby enhancing their ability to identify and mitigate security risks.