8640
295960
225
0
42
1227
0
5192
6523
0
527
224266
72587
68230
59631
41327
62
4893
14474
4955
4631
265
61
0
6874
63602
1693
1569
87
0
10
169
0
3386
845
0
125
4508
81.36%
76.47%
66.83%
46.32%
0.07%
5.48%
16.22%
5.55%
5.2%
0.30%
0.07%
0.00%
7.7%
71.29%
1.90%
1.76%
0.10%
0.00%
0.01%
0.19%
0.00%
3.80%
0.95%
0.00%
0.14%
5.05%
USAGE OF VARIOUS BROWSER FEATURES ON POPULAR WEB SITES (FEBRUARY 2010). ANALYSIS INCLUDES 89,222 SITES.
Table IV
Sites containing at least one 
Average number of ’s per site
Sites with at least one pair of overlapping frames
Sites with at least one pair of overlapping cross-origin frames
Sites with at least one pair of transparent overlapping frames
Sites with at least one pair of transparent overlapping cross-origin frames
36549 (40.8%)
3.2
5544 (6.2%)
3786 (4.2%)
1616 (1.8%)
1085 (1.2%)
SUMMARY OF DISPLAY LAYOUTS OBSERVED FOR THE TOP 100,000 ALEXA WEB SITES (DECEMBER 2009). 89,483 SITES WERE RENDERED
SUCCESSFULLY AND ARE INCLUDED IN THIS ANALYSIS.
Table V
In addition, we have analyzed the visual layouts of all sites
to determine whether there are dangerous pixel interplays
between windows of different principals (Section II-C3). Our
results are summarized in Table V1. We found that 41% of
sites embed at least one iframe, and the average number of
iframes embedded on a particular page is 3.2. Overlapping
iframes appear to be common — 6.2% of sites contained
1Our display analysis was performed in December 2009, separately from
script engine and network analysis that we performed in February 2010,
causing a slight difference in the number of successfully rendered sites in
Tables V and IV.
at least one overlapping pair of iframes — but only 29%
of these overlaps involved transparent iframes. Most (68%)
overlapping scenarios involve different principals.
The most dangerous situations occur when a transparent
frame is overlaid on top of a frame belonging to a dif-
ferent principal (Section II-C3). We identiﬁed 1,085 sites
(1.2%) that contained at least one pair of transparent, cross-
origin overlapping iframes. We observed that most of these
overlaps involved domains serving ad banners, so the main
site functionality might remain unaffected if the dangerous
transparency is disallowed.
Measurement Criteria
Setting top-level window’s location
Change focus of window
Reading color of hyperlinks
Accessing browser’s history
Use of defaultStatus (write)
Reading user’s Geolocation
Use of resizeTo
Use of defaultStatus (read)
Use of moveTo
Close a window
Access to user’s clipboard
Blur a window
Use of resizeBy
Use of moveBy
Use of outerWidth
Use of outerHeight
Total instances
(count)
Unique sites
Count
Percentage
55759
5221
82587
1910
1576
251
339
528
258
130
24
54
13
4
2
4
2851
2314
1560
721
241
149
134
108
100
86
17
13
8
1
1
1
3.20%
2.59%
1.75%
0.81%
0.27%
0.17%
0.15%
0.12%
0.11%
0.10%
0.02%
0.01%
0.01%
0.00%
0.00%
0.00%
PREVALENCE OF RESOURCES BELONGING TO THE USER PRINCIPAL ON POPULAR WEB SITES. ANALYSIS INCLUDES 89,222 SITES.
Table VI
Summary. We found that interplays between DOM and
cookies have a high compatibility impact, while removing
the interplays between cookies and XMLHttpRequest would
affect only 0.30% of sites. For interplays related to display,
we found that descendant navigation can be disallowed
with no cost, while disallowing overlaps between transparent
cross-origin frames would affect 1.2% of sites.
document.domain completely carries a
substantial
cost (1.9% of sites), browsers can eliminate its impact on
XMLHttpRequest, local storage, and postMessage at a much
lower cost (0.19% of sites total). On the ﬂip side, browser
vendors have to make a much tougher choice (affecting
1.76% of sites) to prevent effective UID inconsistencies
pertaining to cookies.
C. Changing effective Principal ID
In Section II-D, we showed that document.domain is
an unsafe and undesirable part of today’s web, as observed
by others as well [9]. Unfortunately, we found its usage on
the web to be signiﬁcant: 1.9% of sites change their effective
domain via document.domain.
We mentioned certain features which become incoherent
when combined with document.domain. Cookies are
accessed by about 1.76% of the sites after a change in
effective domain, making it difﬁcult to enforce a uniﬁed
effective domain for cookie access (Section II-D1). Only
0.08% of sites use XMLHttpRequest after an effective UID
change (Section II-D2), so it appears possible to make
XMLHttpRequest respect effective domain with little cost.
The same holds true for postMessage — we found no
sites using postMessage after an effective UID change. The
new local storage abstractions are not widespread — only
0.19% of the sites were using localStorage (0.01%
after an effective domain change), and no sites were us-
ing sessionStorage — so we anticipate that origin-
changing weaknesses that we outlined in Section II-D4 can
be removed with little compatibility cost.
while
disallowing
Summary.
Overall,
D. Resources belonging to the user principal
Table VI shows the results of our analysis for the cost of
protecting user-owned resources discussed in Section II-E.
The cost of tightening access control for user resources
appears to be low with the exceptions of link-color access
(1.8%), the focus-changing functions (2.6%), and setting
top-level window location (3.2%).
Interestingly, 149 sites (0.17%) already use the new
Geolocation primitives [12]. This number seems low enough
for browsers to take actions to tighten its access control.
Overall, we found that 12 of the 16 user-principal APIs
we examined can be removed while collectively affecting
only 0.80% of unique sites.
E. Other noteworthy measurements
We measured prevalence of some primitives for cross-
frame and cross-window communication, which are critical
for cross-principal security. Fragment identiﬁer messaging
is most popular, being found at 3.8% of sites. A non-
negligible number (0.95%) of sites have already adopted
postMessage, and all sites use its newer deﬁnition that
requires specifying the target window [13]. Another safer
alternative for cross-domain communication, XDomainRe-
quest, is also being slowly adopted (0.14%).
100
80
60
40
20
F
D
C
0
0
document.domain mutation 
PostMessage 
Frame Identifier Messaging 
defaultStatus (read) 
defaultStatus (write) 
moveTo 
resizeBy 
resizeTo 
location 
blur 
focus 
close 
geolocation 
clipboard 
color 
history
1
10
100
1000
10000
100000
Popularity Ranking (log)
Figure 7. A CDF for prevalence of user-owned resources according to the
ranking of sites that use them.
20000
40000
60000
80000
100000
Sites ranked by popularity
Figure 6. A CDF for prevalence of cross-frame communication mecha-
nisms according to the ranking of sites that use them.
G. Methodology validation using user-driven analysis
Using JavaScript within CSS has long been considered
dangerous [9]. We found this pattern in use on about 5% of
the sites.
F. Correlating unsafe features and site popularity
Next, we consider how the popularity of sites correlates
with prevalence of unsafe features. A policy is more costly
to correct if it is used by very highly ranked sites, since more
people would visit them and encounter broken functionality.
Fortunately, we found that most features do not exhibit
a signiﬁcant popularity bias, behaving uniformly with no
regard to a site’s popularity. Nevertheless, we found some
exceptions. Figure 6 shows a CDF of the usage of various
mechanisms that could be used for cross-frame communica-
tion according to the sites’ ranking. Interestingly, fragment
identiﬁer messaging has little dependence on popularity,
document.domain tends to be used more by higher-
ranked sites, and postMessage is found more on lower-
ranked sites, with very little use in the top 2000 sites. This
went against our hypothesis that higher-ranked, high-proﬁle
sites would likely be written using the latest and safest web
standards. A possible explanation could be that the top sites
are motivated to use features compatible with the largest
number of browsers and client platforms.
As another example, Figure 7 diagrams the prevalence of
resources belonging to the user principal according to the
ranking of the sites that use them (a dot is displayed for
every site using a particular feature). Some features, such
as resizeBy or clipboard access, are only found on very
low-ranked sites and are thus good candidates to remove
with little impact. Only a handful of features appear in the
top 100 sites, where compatibility cost is very high for any
site.
In the previous sections, we examined sites by visiting
their home pages and relying on WebAnalyzer’s heuristics
(see Section III) to simulate a few basic user actions to
invoke additional functionality that may be hidden behind
“splash” home pages. However, our methodology may miss
site functionality that requires user login forms (e.g., on
Facebook), other more sophisticated user event handlers
(e.g., mouse movements), or following many links away
from the home page. In general, it is very difﬁcult, if not
impossible, to simulate user actions that open access to
representative features of an arbitrary site.
To evaluate the limitations of our heuristics-driven ap-
proach, we conducted a user-driven examination of the top
100 Alexa sites. To do this, one of the authors manually
visited these sites with IEWA and used his best judgement
to invoke the site’s representative functionality. For example,
for analyzing Facebook, the author logged into his Facebook
account, browsed through several proﬁles, and invoked sev-
eral applications such as photo viewing or messaging.
We then compared the results obtained through this man-
ual analysis to those obtained using WebAnalyzer for the
same sites. Table VII summarizes the results of our compar-
ison. We observe that the numbers of sites using a particular
feature are mostly comparable, providing conﬁdence that our
heuristic-driven navigation engine in WebAnalyzer works
well
in practice. Some features have higher prevalence
with the user-driven analysis, as expected, but there are
only a couple of outliers. For example, Geolocation was
found on nine sites, all found on multilingual versions of
maps.google.com. In manual analysis, the user invoked
maps on each of the nine versions of the Google site,
where WebAnalyzer randomly picked and followed the link
to Maps on three of these sites. On the other hand, on
several occasions, WebAnalyzer also found features that
were missed by manual analysis, as can be seen in higher
prevalence for features like reading document.domain.
This can happen when WebAnalyzer navigates to a link
that
the user did not examine as part of representative
Measurement Criteria
document.cookie (read)
document.cookie (write)
document.cookie domain usage (read)
document.cookie domain usage (write)
Secure cookies over HTTP
Non-secure cookies over HTTPS
Use of “HttpOnly” cookies
Frequency of duplicate cookies
Use of XMLHttpRequest