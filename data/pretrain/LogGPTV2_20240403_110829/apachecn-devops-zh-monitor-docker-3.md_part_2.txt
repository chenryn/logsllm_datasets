## 文件系统
最后一节给出了文件系统使用的分解。在下面的截图中，`/dev/sda1`是引导分区，`/dev/sda3`是主文件系统，`/dev/mapper/docker-8…`是运行容器的写文件系统的集合:
![Filesystem](img/00021.jpeg)
# 查看容器统计
页面顶部有一个你运行容器的链接；你可以点击链接或者直接进入`http://192.168.33.10:8080/docker/`。页面加载后，您应该会看到所有正在运行的容器的列表，以及 Docker 进程的详细概述，最后是您已经下载的映像的列表。
## 分包商
分包商显示您的容器列表；每个条目都是一个可点击的链接将带您进入一个页面，该页面将为您提供以下详细信息:
*   隔离:
    *   **CPU** :显示容器的 CPU 余量；如果您没有设置任何资源限制，您将看到主机的 CPU 信息
    *   **内存**:显示容器的内存余量；如果您没有设置任何资源限制，您的容器将显示无限制的余量
*   用法:
    *   **概述**:这显示了量表，因此您可以快速查看您离任何资源限制有多近
    *   **流程**:显示您所选容器的流程
    *   **中央处理器**:这显示了中央处理器利用率图表仅隔离到您的容器
    *   **内存**:显示容器的内存利用率
## 驾驶员状态
驱动程序给出了主 Docker 进程的基本统计数据，以及主机内核、主机名和底层操作系统的信息。
它还提供了关于容器和映像总数的信息。您可能会注意到，映像的总数比您预期看到的要大得多；这是因为它将每个文件系统算作一个单独的映像。
### 注
有关 Docker 映像的更多详细信息，请参见位于[https://docs.docker.com/userguide/dockerimg/](https://docs.docker.com/userguide/dockerimg/)的 Docker 用户指南。
它还为您提供了存储配置的详细分类。
## 映像
最后，您会得到一个在主机上可用的 Docker 映像列表。它列出了存储库、标签、大小和创建映像的时间，以及映像的唯一标识。这可以让您知道映像的来源(存储库)、您下载的映像版本(标签)以及映像的大小(大小)。
# 这都太棒了，有什么蹊跷？
所以你可能在想，浏览器中所有这些信息都是非常有用的；能够以易于阅读的格式查看实时性能指标确实是一个优势。
你可能已经注意到了，使用 cAdvisor 的 web 界面的最大缺点是，它只能向你显示一分钟的度量值；你可以很真实地看到信息实时消失。
由于一块玻璃可以实时看到你的容器，所以 cAdvisor 是一个很好的工具；如果你想回顾任何超过一分钟的指标，你就不走运了。
也就是说，除非您配置某个地方来存储您的所有数据；这就是普罗米修斯进来的地方。
# 普罗米修斯
那么什么是普罗米修斯呢？它的开发者描述如下:
> *Prometheus 是一个开源系统的监控和警报工具包，构建于 SoundCloud。自 2012 年成立以来，它已成为在 SoundCloud 上检测新服务的标准，外部使用和贡献不断增加。*
好的，但是这和 cAdvisor 有什么关系呢？嗯，普罗米修斯有一个相当强大的数据库后端，它将导入的数据存储为一系列时间事件。
维基百科对时间序列的描述如下:
> *“时间序列是一系列数据点，通常由在一个时间间隔内进行的连续测量组成。时间序列的例子有海洋潮汐、太阳黑子的计数和道琼斯工业平均指数的每日收盘价。时间序列经常通过线形图绘制*
> 
> [https://en . Wikipedia . org/wiki/time _ series](https://en.wikipedia.org/wiki/Time_series)
默认情况下，cAdvisor 所做的事情之一是在`/metrics`在单个页面上公开它捕获的所有指标；您可以在我们的 cAdvisor 安装中的`http://192.168.33.10:8080/metrics`处看到这一点。每次加载页面时都会更新度量:
![Prometheus](img/00022.jpeg)
正如您在前面的截图中看到的，这只是一个长的原始文本页面。普罗米修斯的工作方式是，您将其配置为以用户定义的时间间隔(比如说每五秒钟)刮擦`/metrics`URL；文本采用普罗米修斯理解的格式，并被摄入普罗米修斯的时间序列数据库。
这意味着，使用普罗米修斯强大的内置查询语言，您可以开始向下钻取您的数据。让我们看看让普罗米修斯开始运转。
## 发射普罗米修斯
像 cAdvisor 一样，有几种方法可以发射普罗米修斯。首先，我们将启动一个容器并注入我们自己的配置文件，以便 Prometheus 知道我们的 cAdvisor 端点在哪里:
```
docker run \
 --detach=true \
 --volume=/monitoring_docker/Chapter03/prometheus.yml:/etc/prometheus/prometheus.yml \
 --publish=9090:9090 \
 --name=prometheus \
prom/prometheus:latest
```
一旦你启动了容器，普罗米修斯将可以通过以下网址访问:`http://192.168.33.10:9090`。当你第一次加载网址时，你会被带到一个状态页面；这给出了普罗米修斯安装的一些基本信息。本页的重要部分是目标列表。这列出了普罗米修斯将用来获取指标的网址；您应该会看到您的 cAdvisor 网址以**健康**状态列出，如下图所示:
![Launching Prometheus](img/00023.jpeg)
另一个信息页面包含以下内容:
*   **运行时间信息**:如果您已经配置了一个端点，这将显示 Prometheus 启动的时间和轮询数据
*   **建造信息**:这里包含了你一直在运行的普罗米修斯版本的详细信息
*   **配置**:这是我们在容器启动时注入到容器中的配置文件的副本
*   **规则**:这是我们注入的任何规则的副本；这些将用于报警
*   **启动标志**:显示所有运行时变量及其值
## 质疑普罗米修斯
由于我们目前只有几个容器启动并运行，让我们启动一个运行 Redis 的容器，这样我们就可以开始查看普罗米修斯内置的查询语言。
我们将使用官方的 Redis 映像，因为我们只是以此为例，所以不需要传递任何用户变量:
```
docker run --name my-redis-server -d redis
```
我们现在有一个名为`my-redis-server`的容器正在运行。cAdvisor 应该已经向 Prometheus 公开了关于容器的指标；让我们继续看看。在普罗米修斯网页界面，转到页面顶部菜单中的**图形**链接。在这里，您将看到一个文本框，您可以在其中输入您的查询。首先，让我们看看 Redis 容器的 CPU 使用情况。
在框中，输入以下内容:
```
container_cpu_usage_seconds_total{job="cadvisor",name="my-redis-server"}
```
然后，点击**执行**后，应该会返回两个结果，列在页面的**控制台**选项卡中。如果你还记得的话，cAdvisor 会记录容器可以访问的每个 CPU 内核的 CPU 使用情况，这就是为什么我们返回了两个值，一个用于“cpu00”，一个用于“cpu01”。点击**图表**链接将显示一段时间内的结果:
![Querying Prometheus](img/00024.jpeg)
正如您在前面的截图中所看到的一样，我们现在可以访问过去 25 分钟的使用情况图表，这大约是我在生成图表之前启动 Redis 实例的时间。
## 仪表盘
此外，当在主应用中使用查询工具创建其中一个图形时，您可以安装一个单独的仪表板应用。这在第二个容器中运行，该容器使用应用编程接口作为数据源连接到您的主普罗米修斯容器。
在启动 Dashboard 容器之前，我们应该初始化一个 SQLite3 数据库来存储我们的配置。为了确保数据库的持久性，我们将在`/tmp/prom/file.sqlite3`中将其存储在主机上:
```
docker run \
 --volume=/tmp/prom:/tmp/prom \
 -e DATABASE_URL=sqlite3:/tmp/prom/file.sqlite3 \
prom/promdash ./bin/rake db:migrate
```
初始化数据库后，我们可以正确启动仪表板应用:
```
docker run \
 --detach=true \
 --volume=/tmp/prom:/tmp/prom \
 -e DATABASE_URL=sqlite3:/tmp/prom/file.sqlite3 \
 --publish=3000:3000  \
 --name=promdash \
prom/promdash
```
应用现在应该可以在`http://192.168.33.10:3000/`访问。我们需要做的第一件事就是设置数据源。为此，单击屏幕顶部**服务器**链接上的，然后单击**新服务器**。在这里，您将被要求提供您的普罗米修斯服务器的详细信息。命名服务器并输入以下网址:
*   **名称**:T0
*   **URL** : `http://192.168.33.10:9090`
*   **服务器类型** : `Prometheus`
一旦你点击**创建服务器**，你会收到一条消息说**服务器已成功创建**。接下来，你需要创建一个`directory`；这是您的仪表板将被存储的地方。
点击顶部菜单中的**仪表盘**链接，然后点击**新目录**，创建一个名为`Test directory`的目录。现在，您可以开始创建仪表板了。点击**新仪表盘**，称之为**我的仪表盘**，放入`Test directory`。一旦点击**创建仪表板**，您将进入预览屏幕。
从这里，您可以使用每个部分右上角的控件构建仪表板。要添加数据，只需在仪表板部分输入您希望看到的查询:
![Dashboard](img/00025.jpeg)
### 注
有关如何创建仪表板的详细信息，请参见位于[http://prometheus.io/docs/visualization/promdash/](http://prometheus.io/docs/visualization/promdash/)的普罗米修斯文档的 **PROMDASH** 部分。
## 接下来的步骤
目前，我们在一个容器中运行普罗米修斯，它的数据存储在同一个容器中。这意味着，如果因为任何原因容器被终止，我们的数据丢失；这也意味着我们不能在不丢失数据的情况下升级。为了解决这个问题，我们可以创建一个数据量容器。
### 注
数据卷容器是一种特殊类型的容器，只作为其他容器的存储而存在。更多详细信息，请参见[上的 Docker](https://docs.docker.com/userguide/dockervolumes/#creating-and-mounting-a-data-volume-container) 用户指南。
首先，让我们确保移除了所有正在运行的普罗米修斯容器:
```
docker stop prometheus&&dockerrm Prometheus
```
接下来，让我们创建一个名为`promdata`的数据容器:
```
docker create \
 --volume=/promdata \
 --name=promdata \
prom/prometheus /bin/true
```
最后，再次启动普罗米修斯，这次使用数据容器:
```
docker run \
 --detach=true \
 --volumes-from promdata \
 --volume=/monitoring_docker/Chapter03/prometheus.yml:/etc/prometheus/prometheus.yml \
 --publish=9090:9090 \
 --name=prometheus \
prom/prometheus
```
这将确保，如果您不得不升级或重新启动您的容器，您已经捕获的指标是安全可靠的。
在本书的这一部分，我们只涉及到使用普罗米修斯的基础知识；关于申请的更多信息，我推荐以下链接作为一个很好的起点:
*   文件:[http://prometheus.io/docs/introduction/overview/](http://prometheus.io/docs/introduction/overview/)
*   推特:[https://twitter.com/PrometheusIO](https://twitter.com/PrometheusIO)
*   项目页面:[https://github.com/prometheus/prometheus](https://github.com/prometheus/prometheus)
*   谷歌集团:https://groups.google.com/forum/#!论坛/普罗米修斯-开发者
# 替代品？
普罗米修斯有一些替代品。一个这样的替代方案是 InfluxDB，它对自己的描述如下:
> *无外部依赖的开源分布式时间序列数据库。*
但是，在撰写本文时，cAdvisor 目前与最新版本的 InfluxDB 不兼容。cAdvisor 的代码库中有补丁；然而，这些还没有进入谷歌维护的 Docker Image。
如需了解更多关于英菲尼克斯数据库及其全新可视化投诉应用 Chronograf 的详细信息，请访问位于[https://influxdb.com/](https://influxdb.com/)的项目网站，如需了解更多关于如何将 cAdvisor 统计数据导出到英菲尼克斯数据库的详细信息，请访问位于[https://github.com/google/cadvisor/tree/master/docs](https://github.com/google/cadvisor/tree/master/docs)的 cAdvisor 的支持文档。
# 总结
在本章中，我们学习了如何将查看容器的实时统计数据从命令行转移到 web 浏览器中。我们探索了一些不同的方法来安装谷歌的 cAdvisor 应用，以及如何使用它的网络界面来监视我们正在运行的容器。我们还学习了如何从 cAdvisor 中获取指标，并使用现代时间序列数据库 Prometheus 存储它们。
我们在本章中介绍的两项主要技术仅公开发布不到 12 个月。在下一章中，我们将研究如何使用一个在 SysAdmins 工具箱中已经存在了 10 多年的监控工具——Zabbix。