以日志易3.0版本为基础，告警执行、告警预览、告警测试执行的过程分别如下：
1.  告警执行过程：
    ![](media/image73.png){width="4.677083333333333in"
    height="1.9625in"}
-   frontend的定时器负责按时调用搜索执行告警配置的搜索查询；
-   如果告警的判断条件满足，告警被触发，将执行结果（即：告警信息）通过http
    > post给yottaweb的listen_alert接口。如果告警的判断条件没满足，告警不触发，结束；
-   yottaweb的listen_alert接口会根据告警信息中包含的执行结果和选用哪个插件等信息调用对应插件handle接口的实现，如果有多个插件均会执行各自的handle。
    2、告警预览过程
![](media/image74.png){width="5.542361111111111in"
height="1.945138888888889in"}
-   某个插件旁的预览按钮点击后，当前的告警的配置和此对应的这一个插件，发送给frontend；
-   frontend调用搜索执行告警配置的搜索查询；
-   无论是否满足告警的判断条件，都将执行结果通过http
    > post给yottaweb的preview_alert接口；
-   preview_alert接口只调用这一个插件的content接口，将结果显示。
    3、告警测试执行过程
![](media/image75.png){width="5.768055555555556in" height="2.04375in"}
-   某个插件旁的测试执行按钮点击后，当前的告警的配置和此对应的这一个插件，发送给frontend；
-   frontend调用搜索执行告警配置的搜索查询；
-   如果满足告警的判断条件，将执行结果通过http
    > post给yottaweb的attemp_alert接口。如果不满足，结束；
-   attemp_alert接口只调用这一个插件的handle接口，执行handle的内容。
### 插件格式
告警插件主要有meta、content、hadle、execute_reply构成，为了更容易使用，增加了init_meta方法和action方法。
#### META
插件里面的meta字典变量对应的是插件的前端的展现样式，通过修改meta,可以直接修改插件的前端的展示样式，范例如下：
META = {
\"name\": \"http_forwarder\",
\"version\": 2,
\"alias\": \"告警转发\",
\"configs\": \[
{
\"name\": \"address\",
\"alias\": \"转发url地址\",
\"placeholder\": \"支持模板语言\",
\"presence\": True,
\"value_type\": \"string\",
\"default_value\":
\"http://127.0.0.1:8080/?alert_name={{alert.name}}&alert.send_time={{alert.send_time}}\",
\"style\": {
\"rows\": 1,
\"cols\": 60
}
},
{
\"name\": \"method\",
\"alias\": \"请求方法\",
\"placeholder\": \"\",
\"presence\": True,
\"value_type\": \"string\",
\"input_type\": \"drop_down\",
\"input_candidate\": \[\"POST\", \"GET\", \"PUT\", \"DELETE\"\],
\"default_value\": \"POST\",
\"style\": {
\"rows\": 1,
\"cols\": 30
}
},
{
\"name\": \"body\",
\"alias\": \"Body内容\",
\"placeholder\":
\"用&连接的参数或json等,{{alert\|safe}}是获取全部告警信息\",
\"presence\": False,
\"value_type\": \"string\",
\"default_value\": \"\"\"{{alert\|safe}}\"\"\",
\"style\": {
\"rows\": 30,
\"cols\": 60
}
}
\]
}
对应前端的截图样式如下：
![](media/image76.png){width="5.768055555555556in"
height="4.793055555555555in"}
#### content
content方法就是普通的python方法。插件的该接口要求此方法的入参形式和返回值都为String。Content函数的返回值是展示在插件点击预览的返回值同时也展示在告警的详情里面，如下是把alert字典转为json样式的字符串返回给前台：
def content(params, alert):
return json.dumps(alert,ensure_ascii=False,indent=4).encode(\"utf-8\",
\"ignore\")
content返回的在前台的展示如下：
![](media/image77.png){width="5.768055555555556in"
height="2.7159722222222222in"}
测试发现，点击详情的时候会去调用告警插件的content方法，也就是说把脚本的content方法的返回结果修改后，该处的值会随着content的修改而发生变化，如把content的返回结果修改为测试修改后，在前台点击详情都会变成测试修改：
![](media/image78.png){width="5.768055555555556in"
height="2.9743055555555555in"}
关于插件预览里面如何看到在告警高级配置里面的图片，首先需要在高级配置里面启用效果插图，在模板里面加上插图的配置，然后在content里面增加读高级配置里面的图片，在模板里面增加插图的配置如下：
![](media/image79.png){width="5.768055555555556in"
height="2.7444444444444445in"}
在content里面增加读图片的方法：
![](media/image80.png){width="5.768055555555556in"
height="3.5631944444444446in"}
在前台点击预览后展示的高级配置的插图：
![](media/image81.png){width="5.768055555555556in"
height="3.8118055555555554in"}
日志里面会打印出生成的高级配置的图片的位置：
![](media/image82.png){width="5.768055555555556in"
height="2.066666666666667in"}
#### handle
handle方法是在插件点击测试运行的时候会调用，该方法无返回值，担任实际的告警触发的动作，可以把实际触发的动作在封装在一个AlertAction类里面，在前台调用的截图如下：
![](media/image83.png){width="5.768055555555556in"
height="2.8430555555555554in"}
该提示只是代表告警插件的handle方法在调用的过程中没有抛出错误，不代表告警执行的动作是否执行成功，需要在日志看接口的返回的具体的信息，该处一般会增加判断
，根据客户的接口的返回结果为成功的时候再显示成功，否则抛出异常，上图就会显示发送失败，如下案例截图：
![](media/image84.png){width="5.768055555555556in"
height="2.611111111111111in"}
#### execute_reply
该方法会把运行过程中输出的日志返回给前端展示，相当于在前台调试插件，通过在最新状态里面选择告警名称，选择操作具体的告警插件可以直接运行，查看插件运行过程中的日志：
![](media/image85.png){width="5.768055555555556in"
height="2.8090277777777777in"}
#### AlertAction
AlertAction类主要是用来封装告警插件在运行的过程中，需要的一些方法，现有三个方法，一个Md5的加密方法，一个初始化META字典的方法，会把META里面的数据封装到一个
init_meta 的字典里面，下面可以直接使用，一个是用于发送post请求的
action_post方法，该方法作为一个测试例子使用，md5方法主要是为了在前台查询历史触发的告警和服务端打印的日志匹配来快速定位日志，如下图会生成一个alert_id,在日志里面也会生成一个一样的alert_id：
![](media/image86.png){width="5.768055555555556in"
height="2.948611111111111in"}
![](media/image87.png){width="5.768055555555556in"
height="1.4965277777777777in"}
### Python模块的安装
由于告警插件可能使用的模块在现有的yottaweb的Python的环境中没有，需要手动安装需要的python模块，安装需要在所有的yottaweb的机器上面安装，提供以下二种方式安装，在线安装和离线安装：
1、在线安装：在一般有网络的环境下，可以直接使用 pip
来安装需要的模块，如下：
pip install cx_oracle
2、离线安装：
步骤一：离线下载安装包安装
-   离线下载安装包(可以使用相同的测试环境进行)：/opt/rizhiyi/parcels/yottaweb/yottaweb/bin/pip
    > install \--download
    /opt/rizhiyi/parcels/yottaweb/yottaweb/bin/datapag/ cx_oracle
-   把下载的安装包cx_Oracle-7.3.0.tar.gz复制到需要安装的机器上
-   离线安装(使用rizhiyi用户进行安装)：
    /opt/rizhiyi/parcels/yottaweb/yottaweb/bin/pip install \--no-index
    \--find-links=/opt/rizhiyi/parcels/yottaweb/yottaweb/bin/datapag/
    cx_oracle
-   安装后可以使用yottaweb的python环境测试：/opt/rizhiyi/parcels/yottaweb/yottaweb/bin/python
-   import cx_Oracle
步骤二：通过复制安装好的安装文件进行安装：
由于python的第三方的模块一般都安装在site-packages目录下，所以可以找一个相同的环境直接安装，安装后把相关的安装包复制到其他机器上去（注意：由于yottaweb是使用rizhiyi用户启的python进程，所以复制安装包要注意文件权限）：
ls -l /opt/rizhiyi/parcels/yottaweb/yottaweb/lib/python2.7/site-packages
\| grep cx_oracle \| xargs -I {} scp -r {} PI:EMAIL:
/opt/rizhiyi/parcels/yottaweb/yottaweb/lib/python2.7/site-packages
为了减少由于日志易版本升级带来的yottaweb的Python的环境的变化，可以在安装的时候把Python的第三方的安装模块放在其他的目录下面，不受yottaweb的升级的影响，然后在插件脚本里面指定安装路径：
import sys
sys.path.append(
r\"/opt/rizhiyi/parcels/yottaweb/yottaweb/lib/python2.7/site-packages\"
)
### 日志标准化
告警插件日志的打印通过python的logging来进行，日志的级别设置为debug和info，debug级别用于插件的调试，会打印各个执行过程中的变量的变化和调用的返回结果，debug级别主要用于观察插件是否正常执行。