Android application and you should not skip it when performing an in-depth assessment.
A number of intercepting proxies are available; however, the most widely used (for a good reason) is Burp Suite
(see http://portswigger.net/burp/). A free version is available that provides basic intercepting, replaying, and
spidering functionality; a paid-for professional version provides a whole suite of functionality that is useful for
assessing web applications.
To start a Burp proxy, open Burp and go to the Proxy tab. Click on the Options sub-tab and add a new listener.
Select the port that you want the proxy to listen on and bind it to all interfaces. The default value is to bind the
proxy to the loopback address 127.0.0.1 only. Binding to the loopback address will not work for proxying an
actual device’s traffic on the same wireless LAN because the port will not be exposed to the wireless interface.
After you have added these options, click OK and tick the checkbox of the newly created proxy in the Running
column. Confirm you have a new listener with this one-liner on your computer:
$ netstat -an | grep 8080
tcp 0 0 0.0.0.0:8080 0.0.0.0:* LISTEN
You now have a listener that you can use as a proxy on your mobile device. This setup presumes that your
computer and Android device are on the same wireless network. Go to Settings Wi-Fi and long-click on your
connected hotspot. The option to modify the network configuration appears. In this activity under Show
Advanced Options is the option to add a proxy. The hostname of the proxy should be the IP address of your
computer and the port the same as the listener. After you save these settings, all web traffic on the device will
make use of your Burp proxy. Remember to allow this port through on your computer’s firewall.
WARNING
On devices prior to Android 4.0, some applications did not make use of the proxy specified on the wireless
network. You can use applications such as Proxydroid (see
https://play.google.com/store/apps/details?id=org .proxydroid&hl=en) to overcome this limitation;
however, root access is required.
To set up a proxy on an emulator, change the proxy of the mobile network Access Point Name (APN). This
option exists in Settings More Wireless & Networks Mobile Networks Access Point Names. Select the default
APN in the list and change its “proxy” parameter to 10.0.2.2 and the “port” parameter to the same as the Burp
listener port to allow the proxying of these apps. Other ways to do this exist, but this one is the most reliable
across all Android versions.
TIP
On an Android emulator the IP address 10.0.2.2 routes to your computer. This means that you can access
any listening ports on your computer by using this IP address on the emulator.
NOTE
Burp does not need to listen on all interfaces when you use the previously described emulator proxying
method. Binding the Burp listener to localhost is acceptable.
Finding HTTP Content
Burp should immediately catch any cleartext web requests that an application uses if you’ve configured the
proxy correctly. Intercepting and modifying content in both directions in a manual and automated fashion is
also possible in Burp. Take some time and get comfortable with Burp, because it is an invaluable tool when
assessing most applications.
Finding HTTPS Content
When proxying an application, you might find that you cannot see any of the web traffic even though you know
that requests are being made. This is probably because they are making use of HTTPS, and proxying it through
Burp is making the SSL validation checks fail. You can most often see these error messages in logcat output
with javax.net.ssl.SSLHandshakeException exceptions shown with messages like “Trust anchor for
certification path not found.” This is because the Burp CA is not trusted on the device.
For testing purposes, you need to install your Burp Certificate Authority (CA) on your device. Do this by going to
the Proxy Options CA Certificate and then exporting the certificate in DER format with a filename of burp.crt.
NOTE
When generating the certificate, naming it with a CRT file extension is important. The Android system will
not recognize the certificate with the default DER extension.
To push this file to the device’s SD card, use ADB as follows:
$ adb push burp.crt /sdcard/
To install the certificate from the SD card, go to Settings Security Install from SD card. An application may also
require that the correct common name is in use on the certificate. To make sure that this is set up properly in
Burp, go to the Proxy Options Edit Certificate tab, which contains a Generate CA-Signed Per-host Certificate
option that should work most of the time. However, if you know the name of the domain it will be accessing you
can enter it manually in the Generate a CA-signed Certificate With a Specific Hostname option. After you get all
of this set up correctly, the application should be proxying HTTPS traffic through Burp.
If you are certain that the application is making use of HTTPS and no amount of configuration is allowing you to
proxy traffic, you may be dealing with an application that implements a form of certificate pinning. This is when
features of the SSL certificate presented by the server are checked for certain attributes or checked against a
stored version of the certificate. This protects against the scenario where a trusted CA on the device has been
compromised and an attacker has issued a fraudulent certificate for the domain used by the application. When
implemented properly, this situation can be difficult to deal with and bypassing it depends on the
implementation. For information on how to defeat SSL certificate pinning in a testing environment, refer to the
“Additional Testing Techniques” section later in this chapter.
SSL Validation Flaws
Sometimes when proxying an application, you will immediately see HTTPS traffic without installing the Burp
CA certificate on the device. How did this happen? This is unfortunately a result of the common trade-off
between security and usability. Developing an application that uses SSL in a development environment tends to
lead developers to using testing certificates that are self-signed or invalid in some other way. This causes
problems and throws errors that do not allow the SSL connection to be established by the application. This
means that many developers look to disable the checking of certificates in the code. You can weaken various
checks in the SSL negotiation process for convenience’ sake; each is presented in the following sections.
HostnameVerifier
The following code disables the check that is performed when matching the expected hostname to the one
presented in the server’s certificate as the Common Name (CN):
final static HostnameVerifier NO_VERIFY = new HostnameVerifier()
{
public boolean verify(String hostname, SSLSession session)
{
return true;
}
};
A built-in HostnameVerifier also performs this task. The same code as our preceding custom implemented code
can be done by using the following built-in HostNameVerifier that always returns true:
HostnameVerifier NO_VERIFY = org.apache.http.conn.ssl.SSLSocketFactory
.ALLOW_ALL_HOSTNAME_VERIFIER;
You can use these HostnameVerifiers in the setHostnameVerifier() method. Here is a possible implementation
that could use these verifiers:
URL url = new URL("https://www.example.com");
HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
conn.setHostnameVerifier(NO_VERIFY);
You can also set it statically for all HttpsURLConnection code inside the entire application by using the following:
HttpsURLConnection.setDefaultHostnameVerifier(NO_VERIFY);
TrustManager
The TrustManager’s job is to ensure that the information provided by the server matches conditions deemed
acceptable to establish a trusted connection. The following code completely nullifies this check:
TrustManager[] trustAllCerts = new TrustManager[] {
new X509TrustManager()
{
public java.security.cert.X509Certificate[] getAcceptedIssuers()
{
return new java.security.cert.X509Certificate[] {};
}
public void checkClientTrusted(X509Certificate[] chain,
String authType) throws CertificateException
{
}
public void checkServerTrusted(X509Certificate[] chain,
String authType) throws CertificateException
{
}
}};
context.init(null, trustAllCerts, new SecureRandom());
All of these solutions have come from development forums and gotten responses like “I could KISS you...except
I won’t. You’ve saved me with this code!” and “Thank you, thank you, thank you.”
The problem with solutions of this nature is that an attacker who is positioned to intercept traffic from an
application could simply replace the certificate with his own, and the application will accept it. The attacker can
then read the contents of the traffic through his malicious proxy as if it were cleartext. Reading the portion of
code of your target application that handles connections to web servers will provide insight into whether they
are performing verification of the certificate or allowing any certificate as shown in the earlier code. You could
also simply attempt to proxy the application blindly and observe what happens.
Sieve uses an HTTPS connection to allow the user to back up its database to an Internet server or retrieve it.
This in itself is not good security practice, as the contents of the database are not encrypted in any way.
However, upon closer inspection of the SSL code, you can see that the developer has completely nullified the
SSL validity checks as well. This was done by using an X509TrustManager that performs no checks at all. The
following snippet shows the offending code from the getNewHttpConnection method in the NetBackupHandler
class:
X509TrustManager local1 = new X509TrustManager()
{
public void checkClientTrusted(X509Certificate[]
paramAnonymousArrayOfX509Certificate,
String paramAnonymousString)
throws CertificateException { }
public void checkServerTrusted(X509Certificate[]
paramAnonymousArrayOfX509Certificate,
String paramAnonymousString)
throws CertificateException { }
public X509Certificate[] getAcceptedIssuers()
{
return null;
}
};
When you use the functionality that invokes this code and requests are made through the Burp proxy, you can
see the HTTPS requests. The traffic displays in Burp even when the Burp CA is not installed on the device. This
means that any network attacker that is able to intercept these requests to the server will be able to retrieve the
contents of the user’s password database. Chapter 8 presents practical attacks against poor SSL validation that
can be performed from a network.
WebViews
A WebView is an embeddable application element that allows web pages to be rendered within an application. It
makes use of web rendering engines for the loading of web pages and provides browser-like functionality. Prior
to Android 4.4 it made use of the WebKit (see https://www.webkit.org/) rendering engine; however, it has
since been changed to use Chromium (see http://www.chromium.org).
The most important difference between handling pages in a web browser or in a WebView is that a WebView still
runs within the context of the application that it is embedded in. Furthermore, a WebView provides a whole host
of hooks that allow the parent application to change its behavior at runtime and catch certain events when
loading pages. You must consider many security aspects when assessing a WebView. The most important aspect
to look at is where a WebView is able to load its content from. Loading cleartext content is the single biggest
mistake that can be made when implementing a WebView, because this opens it up to various forms of abuse
from Man-in-the-Middle (MitM) attacks such as ARP poisoning.
Similarly to native code, ignoring SSL errors when loading content is possible. A callback can be overridden in
the WebViewClient class that handles SSL errors and is named onReceivedSslError. This callback by default
cancels the loading of the page if the SSL certificate failed one of the checks performed on it and was found to be
invalid. Developers may not be able to meet these conditions during development and may choose to override
the check instead. This could look as follows:
@Override
public void onReceivedSslError(WebView view, SslErrorHandler handler,
SslError error)
{
handler.proceed();
}
This code tells the WebViewClient to proceed whenever an SSL error occurs, which completely defeats the point
of having SSL in the first place. This means that the possibility exists to perform a MitM attack against this
application—present a different certificate to it and it would be accepted, effectively allowing the attacker to read
or completely change the content being displayed to the user.
What the attacker’s code would be able to do depends on the configuration of the WebView. To obtain the
configuration for each WebView invoke the following:
WebSettings settings = webView.getWebSettings();
You can also use the WebSettings class to change the configuration of the WebView. Table 7.2 shows the available
settings to change.
Table 7.2 Configuration options available in the WebSettings class that pertain to security
METHOD DEFAULT IMPLICATION OF BEING ENABLED
VALUE
setAllowContent Access true WebView has access to content providers on the
system.
setAllowFileAccess true Allows a WebView to load content from the filesystem
using file:// scheme.
setAllowFileAccessFromFileURLs true (= scheme to access other files on the filesystem.
API 16)
Allows the HTML file that was loaded using file:// to
setAllowUniversalAccessFromFileURLs true (=
API 16)
setJavaScriptEnabled false Allows the WebView to execute JavaScript.
setPluginState (deprecated in API PluginState.OFF Allows the loading of plug-ins (for example, Flash)
18) inside the WebView. This could in some cases even be
used to load a malicious plug-in (see Google Bug
#13678484 aka “Fake ID Vulnerability”).
setSavePassword (deprecated in API true The WebView will save passwords entered.
18)
The most accessible way for an attacker to exploit a WebView is if it is loading cleartext content from the Internet,
because an attacker could make use of traffic interception techniques to modify the responses back from the
server. An attacker could at this point include arbitrary code that renders inside the WebView and has the same
level of access as the original content. This means that what an attacker would be able to do is heavily
dependent on the configuration of the particular WebView.
Other applications on the same device could also exploit a WebView if an application component exposes it in
some way. For instance, if receiving an intent on an exported component causes the instantiation of a WebView
that opens a URL that was provided as an extra in the intent sent by the other application, then a valid code path
exists to attack the WebView. An excellent example of such a scenario is provided at
https://www.securecoding.cert.org/confluence/display/java/. Here is a slightly modified version of this
example:
public class MyBrowser extends Activity
{
@override
public void onCreate(Bundle savedInstanceState)
{
super.onCreate(savedInstanceState);
setContentView(R.layout.main);
WebView webView = (WebView) findViewById(R.id.webview);
WebSettings settings = webView.getSettings();
settings.setJavaScriptEnabled(true);
settings.setAllowUniversalAccessFromFileURLs(true);
String turl = getIntent().getStringExtra("URL");
webView.loadUrl(turl);
}
}
A malicious application could send an intent with an extra containing a URI such as
file:///data/data/com.malicious.app/exploit.html. For this URI to load, the malicious application would
have to make the exploit.html file in its private data directory world readable. This technique would work
because a WebView by default allows the loading of local files. In conjunction with the
setAllowUniversalAccessFromFileURLs option set to true in the code, this scenario allows an attacker to load
malicious code inside this WebView and use it to steal files and transmit them to an Internet server.
A feature of the WebView class that came under heavy scrutiny in 2013 was the ability to add JavaScript interfaces
to a WebView. These interfaces allow the bridging of JavaScript that is loaded inside a WebView to actual Java code
in the application. This allows for a much more feature-rich experience because normal JavaScript loaded from
a website then has the ability to invoke any code specified inside the application. Depending on the permissions
of the application containing the WebView, this could literally be any code the developer wanted; for example,
code that reads all SMS messages or performs recordings from the microphone. This is why looking for such
features when assessing an application that implements a WebView is important. Adding a so-called “bridge”
between JavaScript and Java code can be done using the addJavascriptInterface method on the WebView. Here
is a simple example of implementing a JavaScriptInterface:
/* Java code */
class JavaScriptObj
{
@JavascriptInterface
public String hello()
{
return "I am from Java code";
}
}
webView.addJavascriptInterface(new JavaScriptObj(), "jsvar");
String content = "";
webView.loadData(content, "text/html", null);
The preceding code loads a page that pops up an alert containing the response from the hello() method, thereby
adding a bridge from native Java code into a JavaScript variable named jsvar.
Now consider the scenario where an application allowed the retrieval of SMS messages or the initiation of
phone calls from the bridge. If an attacker could find a way to inject his own code into the WebView, he would be
able to invoke this functionality and abuse these bridged functions for evil purposes. You would have to
determine the impact of exploiting a bridge after reading the relevant code of your target application.
When assessing an application, finding any code that makes use of a WebView is important, especially when it
makes use of a JavaScript bridge. Finding this functionality is as simple as searching for keywords such as
WebView or addJavaScriptInterface inside the application.
CVE-2012-6636—ADDJAVASCRIPTINTERFACE ARBITRARY CODE EXECUTION
When a JavascriptInterface is used to bind a JavaScript variable to a class, not only code from the
exposed class can be executed. Using reflection techniques, public methods from any class could be
executed. If the name of the interface variable is jsvar, then the following code would allow the execution