.sh synopsis
the dynamic linker can be run either indirectly by running some
dynamically linked program or shared object
(in which case no command-line options
to the dynamic linker can be passed and, in the elf case, the dynamic linker
which is stored in the
.b .interp
section of the program is executed) or directly by running:
.pp
.i /lib/ld\-linux.so.*
[options] [program [arguments]]
.sh description
the programs
.b ld.so
and
.b ld\-linux.so*
find and load the shared objects (shared libraries) needed by a program,
prepare the program to run, and then run it.
.pp
linux binaries require dynamic linking (linking at run time)
unless the
.b \-static
option was given to
.br ld (1)
during compilation.
.pp
the program
.b ld.so
handles a.out binaries, a binary format used long ago.
the program
.b ld\-linux.so*
(\fi/lib/ld\-linux.so.1\fp for libc5, \fi/lib/ld\-linux.so.2\fp for glibc2)
handles binaries that are in the more modern elf format.
both programs have the same behavior, and use the same
support files and programs
.rb ( ldd (1),
.br ldconfig (8),
and
.ir /etc/ld.so.conf ).
.pp
when resolving shared object dependencies,
the dynamic linker first inspects each dependency
string to see if it contains a slash (this can occur if
a shared object pathname containing slashes was specified at link time).
if a slash is found, then the dependency string is interpreted as
a (relative or absolute) pathname,
and the shared object is loaded using that pathname.
.pp
if a shared object dependency does not contain a slash,
then it is searched for in the following order:
.ip o 3
using the directories specified in the
dt_rpath dynamic section attribute
of the binary if present and dt_runpath attribute does not exist.
use of dt_rpath is deprecated.
.ip o
using the environment variable
.br ld_library_path ,
unless the executable is being run in secure-execution mode (see below),
in which case this variable is ignored.
.ip o
using the directories specified in the
dt_runpath dynamic section attribute
of the binary if present.
such directories are searched only to
find those objects required by dt_needed (direct dependencies) entries
and do not apply to those objects' children,
which must themselves have their own dt_runpath entries.
this is unlike dt_rpath, which is applied
to searches for all children in the dependency tree.
.ip o
from the cache file
.ir /etc/ld.so.cache ,
which contains a compiled list of candidate shared objects previously found
in the augmented library path.
if, however, the binary was linked with the
.b \-z nodeflib
linker option, shared objects in the default paths are skipped.
shared objects installed in hardware capability directories (see below)
are preferred to other shared objects.
.ip o
in the default path
.ir /lib ,
and then
.ir /usr/lib .
(on some 64-bit architectures, the default paths for 64-bit shared objects are
.ir /lib64 ,
and then
.ir /usr/lib64 .)
if the binary was linked with the
.b \-z nodeflib
linker option, this step is skipped.
.\"
.ss dynamic string tokens
in several places, the dynamic linker expands dynamic string tokens:
.ip o 3
in the environment variables
.br ld_library_path ,
.br ld_preload ,
and
.br ld_audit ,
.ip o 3
inside the values of the dynamic section tags
.br dt_needed ,
.br dt_rpath ,
.br dt_runpath ,
.br dt_audit ,
and
.br dt_depaudit
of elf binaries,
.ip o 3
in the arguments to the
.b ld.so
command line options
.br \-\-audit ,
.br \-\-library\-path ,
and
.b \-\-preload
(see below), and
.ip o 3
in the filename arguments to the
.br dlopen (3)
and
.br dlmopen (3)
functions.
.pp
the substituted tokens are as follows:
.tp
.ir $origin " (or equivalently " ${origin} )
this expands to
the directory containing the program or shared object.
thus, an application located in
.i somedir/app
could be compiled with
.ip
.in +4n
.ex
gcc \-wl,\-rpath,\(aq$origin/../lib\(aq
.ee
.in
.ip
so that it finds an associated shared object in
.i somedir/lib
no matter where
.i somedir
is located in the directory hierarchy.
this facilitates the creation of "turn-key" applications that
do not need to be installed into special directories,
but can instead be unpacked into any directory
and still find their own shared objects.
.tp
.ir $lib " (or equivalently " ${lib} )
this expands to
.i lib
or
.i lib64
depending on the architecture
(e.g., on x86-64, it expands to
.ir lib64
and
on x86-32, it expands to
.ir lib ).
.tp
.ir $platform " (or equivalently " ${platform} )
this expands to a string corresponding to the processor type
of the host system (e.g., "x86_64").
on some architectures, the linux kernel doesn't provide a platform
string to the dynamic linker.
the value of this string is taken from the
.br at_platform
value in the auxiliary vector (see
.br getauxval (3)).
.\" to get an idea of the places that $platform would match,
.\" look at the output of the following:
.\"
.\"     mkdir /tmp/d
.\"     ld_library_path=/tmp/d strace -e open /bin/date 2>&1 | grep /tmp/d
.\"
.\" ld.so lets names be abbreviated, so $o will work for $origin;
.\" don't do this!!
.pp
note that the dynamic string tokens have to be quoted properly when
set from a shell,
to prevent their expansion as shell or environment variables.
.sh options
.tp
.br \-\-argv0 " \fistring\fp (since glibc 2.33)"
set
.i argv[0]
to the value
.i string
before running the program.
.tp
.bi \-\-audit " list"
use objects named in
.i list
as auditors.
the objects in
.i list
are delimited by colons.
.tp
.b \-\-inhibit\-cache
do not use
.ir /etc/ld.so.cache .
.tp
.bi \-\-library\-path " path"
use
.i path
instead of
.b ld_library_path
environment variable setting (see below).
the names
.ir origin ,
.ir lib ,
and
.ir platform
are interpreted as for the
.br ld_library_path
environment variable.
.tp
.bi \-\-inhibit\-rpath " list"
ignore rpath and runpath information in object names in
.ir list .
this option is ignored when running in secure-execution mode (see below).
the objects in
.i list
are delimited by colons or spaces.
.tp
.b \-\-list
list all dependencies and how they are resolved.
.tp
.br \-\-list\-tunables " (since 2.33)"
print the names and values of all tunables,
along with the minimum and maximum allowed values.
.tp
.br \-\-preload " \filist\fp (since glibc 2.30)"
preload the objects specified in
.ir list .
the objects in
.i list
are delimited by colons or spaces.
the objects are preloaded as explained in the description of the
.br ld_preload
environment variable below.
.ip
by contrast with
.br ld_preload ,
the
.br \-\-preload
option provides a way to perform preloading for a single executable
without affecting preloading performed in any child process that executes
a new program.
.tp
.b \-\-verify
verify that program is dynamically linked and this dynamic linker can handle
it.
.sh environment
various environment variables influence the operation of the dynamic linker.
.\"
.ss secure-execution mode
for security reasons,
if the dynamic linker determines that a binary should be
run in secure-execution mode,
the effects of some environment variables are voided or modified,
and furthermore those environment variables are stripped from the environment,
so that the program does not even see the definitions.
some of these environment variables affect the operation of
the dynamic linker itself, and are described below.
other environment variables treated in this way include:
.br gconv_path ,
.br getconf_dir ,
.br hostaliases ,
.br localdomain ,
.br locpath ,
.br malloc_trace ,
.br nis_path ,
.br nlspath ,
.br resolv_host_conf ,
.br res_options ,
.br tmpdir ,
and
.br tzdir .
.pp
a binary is executed in secure-execution mode if the
.b at_secure
entry in the auxiliary vector (see
.br getauxval (3))
has a nonzero value.
this entry may have a nonzero value for various reasons, including:
.ip * 3
the process's real and effective user ids differ,
or the real and effective group ids differ.
this typically occurs as a result of executing
a set-user-id or set-group-id program.
.ip *
a process with a non-root user id executed a binary that
conferred capabilities to the process.
.ip *
a nonzero value may have been set by a linux security module.
.\"
.ss environment variables
among the more important environment variables are the following:
.tp
.br ld_assume_kernel " (since glibc 2.2.3)"
each shared object can inform the dynamic linker of the minimum kernel abi
version that it requires.
(this requirement is encoded in an elf note section that is viewable via
.ir "readelf\ \-n"
as a section labeled
.br nt_gnu_abi_tag .)
at run time,
the dynamic linker determines the abi version of the running kernel and
will reject loading shared objects that specify minimum abi versions
that exceed that abi version.
.ip
.br ld_assume_kernel
can be used to
cause the dynamic linker to assume that it is running on a system with
a different kernel abi version.
for example, the following command line causes the
dynamic linker to assume it is running on linux 2.2.5 when loading
the shared objects required by
.ir myprog :
.ip
.in +4n
.ex
$ \fbld_assume_kernel=2.2.5 ./myprog\fp
.ee
.in
.ip
on systems that provide multiple versions of a shared object
(in different directories in the search path) that have
different minimum kernel abi version requirements,
.br ld_assume_kernel
can be used to select the version of the object that is used
(dependent on the directory search order).
.ip
historically, the most common use of the
.br ld_assume_kernel
feature was to manually select the older
linuxthreads posix threads implementation on systems that provided both
linuxthreads and nptl
(which latter was typically the default on such systems);
see
.br pthreads (7).
.tp
.br ld_bind_now " (since glibc 2.1.1)"
if set to a nonempty string,
causes the dynamic linker to resolve all symbols
at program startup instead of deferring function call resolution to the point
when they are first referenced.
this is useful when using a debugger.
.tp
.b ld_library_path
a list of directories in which to search for
elf libraries at execution time.
the items in the list are separated by either colons or semicolons,
and there is no support for escaping either separator.
a zero-length directory name indicates the current working directory.
.ip
this variable is ignored in secure-execution mode.
.ip
within the pathnames specified in
.br ld_library_path ,
the dynamic linker expands the tokens
.ir $origin ,
.ir $lib ,
and
.ir $platform
(or the versions using curly braces around the names)
as described above in
.ir "dynamic string tokens" .
thus, for example,
the following would cause a library to be searched for in either the
.i lib
or
.i lib64
subdirectory below the directory containing the program to be executed:
.ip
.in +4n
.ex
$ \fbld_library_path=\(aq$origin/$lib\(aq prog\fp
.ee
.in
.ip
(note the use of single quotes, which prevent expansion of
.i $origin
and
.i $lib
as shell variables!)
.tp
.b ld_preload
a list of additional, user-specified, elf shared
objects to be loaded before all others.
this feature can be used to selectively override functions
in other shared objects.
.ip
the items of the list can be separated by spaces or colons,
and there is no support for escaping either separator.
the objects are searched for using the rules given under description.
objects are searched for and added to the link map in the left-to-right
order specified in the list.
.ip
in secure-execution mode,
preload pathnames containing slashes are ignored.
furthermore, shared objects are preloaded only
from the standard search directories and only
if they have set-user-id mode bit enabled (which is not typical).
.ip
within the names specified in the
.br ld_preload
list, the dynamic linker understands the tokens
.ir $origin ,
.ir $lib ,
and
.ir $platform
(or the versions using curly braces around the names)
as described above in
.ir "dynamic string tokens" .
(see also the discussion of quoting under the description of
.br ld_library_path .)
.\" tested with the following:
.\"
.\"	ld_preload='$lib/libmod.so' ld_library_path=. ./prog
.\"
.\" which will preload the libmod.so in 'lib' or 'lib64', using it
.\" in preference to the version in '.'.
.ip
there are various methods of specifying libraries to be preloaded,
and these are handled in the following order:
.rs
.ip (1) 4
the
.br ld_preload
environment variable.
.ip (2)
the
.b \-\-preload
command-line option when invoking the dynamic linker directly.
.ip (3)
the
.i /etc/ld.so.preload
file (described below).
.re
.tp
.br ld_trace_loaded_objects
if set (to any value), causes the program to list its dynamic
dependencies, as if run by
.br ldd (1),
instead of running normally.
.pp
then there are lots of more or less obscure variables,
many obsolete or only for internal use.
.tp
.br ld_audit " (since glibc 2.4)"
a list of user-specified, elf shared objects
to be loaded before all others in a separate linker namespace
(i.e., one that does not intrude upon the normal symbol bindings that
would occur in the process)
these objects can be used to audit the operation of the dynamic linker.
the items in the list are colon-separated,
and there is no support for escaping the separator.
.ip
.b ld_audit
is ignored in secure-execution mode.
.ip
the dynamic linker will notify the audit
shared objects at so-called auditing checkpoints\(emfor example,
loading a new shared object, resolving a symbol,
or calling a symbol from another shared object\(emby
calling an appropriate function within the audit shared object.
for details, see
.br rtld\-audit (7).
the auditing interface is largely compatible with that provided on solaris,
as described in its
.ir "linker and libraries guide" ,
in the chapter
.ir "runtime linker auditing interface" .
.ip
within the names specified in the
.br ld_audit
list, the dynamic linker understands the tokens
.ir $origin ,
.ir $lib ,
and
.ir $platform
(or the versions using curly braces around the names)
as described above in
.ir "dynamic string tokens" .
(see also the discussion of quoting under the description of
.br ld_library_path .)
.ip
since glibc 2.13,
.\" commit 8e9f92e9d5d7737afdacf79b76d98c4c42980508
in secure-execution mode,
names in the audit list that contain slashes are ignored,
and only shared objects in the standard search directories that
have the set-user-id mode bit enabled are loaded.
.tp
.br ld_bind_not " (since glibc 2.1.95)"
if this environment variable is set to a nonempty string,
do not update the got (global offset table) and plt (procedure linkage table)
after resolving a function symbol.
by combining the use of this variable with
.br ld_debug
(with the categories
.ir bindings
and
.ir symbols ),
one can observe all run-time function bindings.
.tp
.br ld_debug " (since glibc 2.1)"
output verbose debugging information about operation of the dynamic linker.
the content of this variable is one of more of the following categories,
separated by colons, commas, or (if the value is quoted) spaces:
.rs
.tp 12
.i help
specifying
.ir help
in the value of this variable does not run the specified program,
and displays a help message about which categories can be specified in this
environment variable.
.tp
.i all
print all debugging information (except
.ir statistics
and
.ir unused ;
see below).
.tp
.i bindings
display information about which definition each symbol is bound to.
.tp
.i files
display progress for input file.
.tp
.i libs
display library search paths.
.tp
.i reloc
display relocation processing.
.tp
.i scopes
display scope information.
.tp
.i statistics
display relocation statistics.
.tp
.i symbols
display search paths for each symbol look-up.
.tp
.i unused
determine unused dsos.
.tp