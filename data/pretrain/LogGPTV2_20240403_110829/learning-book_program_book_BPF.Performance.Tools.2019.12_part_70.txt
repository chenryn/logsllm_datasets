Bcsp[ 26] = *CAP_SYS_TTY_COMFIG”;
Bcap[27] = *CAP_MNOD";
Bcap[28] - *cAr_1EASs*;
ru3sIsx"L1aox"axo。 - 16z1deo8
T0xIx0L1Govavo。 - [0c]deog
dozIasavo。 - Ite1deog
μKIWoY"o"axo。 - Iee1deog
μ00Tsxsavo。 - [c]deog
fKY"ax"aYo。 - Ise1deo8
Bcap[ 36] = *CAP_BL0CK_SUSPEND* ;
favs"Lianaxo。 = [ce1deo8
kprobe:cap_capable
$cap = arg2;
ebxe = atpnes
time ("B:H:S *);
printf(*4=6d 1=6d 4=16s =4d 1=20s 1d^n*, u1d, pid, conm, $cap,
(xtpnes *[deog|deog
END
1
clear (8capl 
1
The program declares a hash for capability number to name lookups. This will need to be updated
to match additions to the kernel.
---
## Page 549
512
Chapter 11 Security
11.2.12
setuids
setuids(8)# is a bpftrace tool to trace privilege escalation syscalls: setuid(2), setresuid(2), and
setfsuid(2). For example:
setuids .bt
Attach.ing 7 probes...
Tracing setuld(2) fanlly syscalls. Hit Ctrl-C to end.
TIME
 PID
COMM
UI
SYSCALLARGS (RET)
sudo
1000
setresuid ruld=-1 euid=1000 suld=-1 (0)
23:39:18 23436
opns
1000
setresuid ruid=] euid=0 suid=-1 (0)
23:39:18 23436
sudo
1000
setresuid ruld=-1 euid=0 suld=-1 (0)
23:39:18 23436
sudo
1000
setresuid ruid=0 euid=-1 suid=-1 (0)
sudo
setresusd ruld=1000 euld=1 suld=1 (0)
23:39:18 23436
 opns
1000
setresuid ruid=] euid=-1 suid=] {0)
23:39:18 23436
sudo
1000
setuid
uid=0 (0)
23:39:18 23437
 opns
0
setresuid ruid=0 euid=0 suid=0 (0)
[.--]
This shows a sudo(8) command that was changing a UID from 1000 to 0 and the various syscalls it 
used to do this. Logins via sshd(8) can also be seen via setuids(8), as they also change the UID.
The columns include:
• UID: The user ID before the setuid callL.
• SYSCALL: The syscall name.
 ARGS: Arguments to the syscall.
● (RET): Return value. For setuid(2) and setresuid(2), this shows whether the call was
successful. For setfsuid(2), it shows the previous UID.
should be low, the overhead of this tool should be negligible.
This works by instrumenting the tracepoints for these syscalls. Since the rate of these syscalls
The source to setuids(8) is:
#1/usx/1ocal/bIn/bpEtrace
BEGIY
7
printf (*Tracing setuid(2) fanlly syscall1s. Hit Ctz1-C to end.\,n*)
printf (*g=8s =6s 416s=6s =9s sn*, *T1ME*,
*PID*,"CONK*,*UID*,"SYSCALL", "ARGS (RET) *);
them setting the uid: login, su, and sshd. I developed this bpftrace version on 26-Feb-2019 for this book,
---
## Page 550
11.2 BPF Tools
513
tracepointisyscalls1sys_enter_setuid,
tracepoint:syscalls:sys_enter_setfsuld
Buid[tld] = u1d;
Bsetuid[tid] = args=>uid;
Bseen [tld] = 1
tracepointisyscallsisys_enter_setresuid
Buid[tid] = uid;
Bruld[tid] = args=>ruid;
Beuid[tid] - args->euid
Bsuld [tld] = args=>suid;
↑ = [pT]oaasg
tracepoint:syscalls:sys_exit_setu1d
/Bseen [tid]/
time(*sB:M:s ") 
printf (*46d s16s l=6d setuld
uld=id (5d) ,n*, pid, con,
Buid [tid]， Bsetuid[tid]。 args->ret]
delete (@seen [tid]): Gelete (Buld[tid]): delete [Bsetuid[tid]):
tracepoint1aysca1ls:sys_exit_setfsuid
/Bseen [℃1d]/
time ("%H: SH: S ") ;
printf (*-(d $-16s $-6d setfsuiduid=d (prevuid=d)\n”, pid, comm,
fuld[tld], Bsetuid[tid], axgs=>ret] 
delete (8seen[tid]: delete (Buid[tid|]1 : delete (Bsetuid[tid] } 
tracepoint:syscalls:sys_exit_se tresuld
/Bseen [tid]/
time(*sB:M:s ") 
printf(*5-Ed s-16s s-6d setresuld ", pld, conn, @uld[tld]1
printf (*ruid=d euid=ld suid=?d (ld] ?.n*, Bruid[t.id] , Beuid [tid] ,
---
## Page 551
514
Chapter 11 Security
Bsuid[tid] 。 args->ret) 
delete (@seen [tid]): Gelete (Buld[tid]) : delete [Bxuid [tld]) :
delete (feuid [tid] 1 delete (Bsuid[ tid]) 
This traces the three syscallentry and exit tracepoints, stashing entry details into maps that can
be fetched and printed on exit.
11.3 BPF One-Liners
These sections show BCC and bpftrace one-liners. Where possible, the same one-liner is implemented
using both BCC and bpftrace.
11.3.1 BCC
Count security audit events for PID 1234:
Trace pluggable authentication moxdule (PAM) session starts:
trace *pan:pan_atart *ss: ls*, azgl, azg2'
Trace kernel module loads:
11.3.2 bpftrace
Count security audit events for PID 1234:
1f(]unoo -[oung]e]ezt =prd/anesx。8-eoexagdg
Trace pluggable authentication module (PAM) session starts:
u\s ss>gutd 1xeswed:oosuedart/nu6xmutT-#99gx/art/n。8eoexado
Btr(arg01。 strlargl)1= *
Trace kernel module loads:
bpftrace -e *tinodulesmodule_load  printf (*load: s^n", str (args=>nanel l; )*
11.3.3 BPF One-Liners Examples
Includling some sample output, as was done for each tool, is also useful for illustrating one-liners.
Here are some selected one-liners with example output.
---
## Page 552
11.4 Summary
515
Counting Security Audit Events
AqT2noss,980tz d-sun0ooung 1
Tracing 263 functions for *security_**... Hit Ctrl-C to end.
C
FUBIC
COUVT
ptidsxsexnoes
1
security_task_alloc
1
security_inode_al1oc
security_d_instantiate
1
secuxl ty_prepare_creds
security_file_al1oc
2
security_Cile_pernlsslon
1.3
securi ty_vm_enough_menory_mm
27
secuzity_ile_loctl
34
Detach.ing-..
This counts occurrences to the Linux Security Moxdule (LSM) hooks for handling and auditing
security events, Each of these hook functions can be traced for more information.
Tracing PAM Session Starts
+ trace *pam:pan_start "is: ts", argl, arg2"
 PID
TID
COMM
FUIC
89555
25568
sshd
pan_staxt
sshd: bgreg9
25641
25641
sudo
pan_start
sudo: bgregg
25646
25646
sudo
xes"ued
sudo: bgreg9
[...]
This shows sshd(8) and sudo(8) beginning a pluggable authentication module (PAM) session for
the bgregg user. Other PAM functions can also be traced to see the final authentication request.
11.4
Summary
BPF can be used for various security uses, including sniffing activity for real-time forensics,
privilege debugging, usage whitelists, and more. This chapter introduces these capabilities and
demonstrates them with some BPF tools.
---
## Page 553
This page intentionally left blank
---
## Page 554
Chapter12
Languages
There are many programming languages, as well as compilers and runtimes to execute them,
dlifferences and will help you find ways to trace any given language.
and the way each language is executed affects how it can be traced. This chapter explains such
Learning Objectives:
Understand compiled language instrumentation (e.g.: C)
Understand JIT compiled language instrumentation (e.g: Java, Node.js)
Understand interpreted language instrumentation (e.g: bash shell)
Trace function calls, arguments, return value, and latency when possible
Trace the user-level stack trace in a given language
Aag e sasn uaq suopequauardu a8en8ue| Suputue8osd Suzueuuns Aq sut8aq radeqo sL
languages as examles: C for comiled languages, Java foraJT-compiled language, and bash shell
scripting for a fully interpreted language. For each, I cover how to find function names (symbols),
function arguments, and how to investigate and trace stack traces. I have included notes for
tracing other languages at the end of this chapter: JavaScript (Node.js), C++, and Golang.
Whatever your language of interest, this chapter should give you a head start in instrumenting it
and understanding the challenges and solutions that have worked for other languages.
12.1
Background
machine code for execution. This isn’t usually an atribute of the language, but rather an attribute
of how the language is implemented.Java, for example, is not a JIT-compiled language: Java is just a
language. The commonly used JVM runtime from OracleJDK or OpenJDK executes Java methods with
JVM itselfis also compiled C++ code, which runs functions such as class loading and garbage collec
a pipeline that moves from interpretation to JTT compilation, but that is an attribute of the JVM. The
tion. In a fully instrumented Java application, you may encounter code that is compiled (C++ JVM
functions), interpreted (Java methods), and JIT compiled (Java methods)and there are differences in
how each should be instrumented. Other languages have separate implementations of compilers and
interpreters, and you need to know which is being used to understand how to trace it.
---
## Page 555
518
3Chapter 12 Languages
Sunu atp s geum *sq pnous uopsanb stg no. °x a8enue aoen o st se no6 g :6jdtus nd
we are currently using to run X, and how does it work? Is it a compiler, JIT compiler, interprete,
animal, vegetable, or mineral?
This section provides general advice for tracing any language with BPF, by classifying language
Some implementations (e.g, the JVM) support multiple techniques.
implementations by how they generate machine code: compiled, JIT compiled, or interpreted
12.1.1 Compiled
Examples of languages that are commonly compiled include C, C++, Golang, Rust, Pascal,
Fortran, and COBOL.
For compiled languages, functions are compiled into machine code and stored in an executable
binary, typically the ELF format, with the following attributes:
•For user-level software, symbol tables are included in the ELF binary file for mapping
addresses to function and object names. These addresses do not move during execution, so
the symbol table can be read at any time for correct mappings. Kernel-level software differs
as it has its own dynamic symbol table in /proc/kallsyms, which can grow as modules are
loaded.
Function arguments and their returm values are stored in registers and stack offsets. Their
location usually follows a standard calling convention for each processor type; however, some
compiled languages (e.g., Golang) use different conventions, and some (e.g., V8 built-ins) use
no convention at all.
The frame pointer register (RBP on x86_64) can be walked to reveal the stack trace, if the
compiler initializes it in function prologues. Compilers often instead reuse it as a general
purpose register (a performance optimization for register-limited processors). A side effect is
that it breaks frame pointer-based stack walking.
10j saqoudy pue auempos [asa[-1asn soj saqoudn Susn *aoen oq Aseo Aensn aue sa8enSuel papduo
kernel-level software. There are numerous examples throughout this book.
When approaching compiled software, check whether the symbol tables are present (e.g., using
nm(1), objcump(1), or readelf(1). If they are not, check whether a debuginfo package is available
for the software, which can provide the missing symbols If that, too, is a dead end, check the
compiler and build software to see why the symbols are missing in the first place: they may be
(t)dus Sugreo noum aremos au agduuooa1 o s xg auo (1)dus Susn paddns
Also check whether frame pointer-based stack walking is working. This is the current default for
walking user-space stacks via BPF, and if it is not working, the software may need to be recom
piled with a compiler flag to honor the frame pointer (e.g, gcc fnoomi tframepo intez).
If this is infeasible, other stack-walking techniques can be explored, such as last branch record
(LBR),* DWARF, user-level ORC, and BTE There is still BPF tooling work needed to make use of
these, discussed in Chapter 2
with =ca11=graph Lbx,
1. There Is not currently support for LBR in BPF or its front ends, but we intend to add it. perf(1) currently supports if
---
## Page 556
12.1Background
519
12.1.2 JIT Compiled
Examples of languages that are commonly JIT compiled include Java, JavaScript, Julia, Net., and
Smalltalk.
JIT compiled languages compile into bytecode, which is then compiled into machine code at
runtime, often with feedback from runtime operation to direct compiler optimization. They have
the following attributes (discussing user level only):
• Because functions are compiled on the fly, there is no pre-built symbol table. The mappings
are usually stored in memory of the JIT runtime, and used for purposes such as printing
exception stacks. These mappings may also change, as the runtime may recompile and
move functions around.
· Function arguments and return values may or may not follow a standard calling convention.
The JTT runtime may or may not honor the frame pointer register, so frame pointer-based
stack walking may work, or it may be broken (in which case you would see the stack trace
ending abruptly with a bogus address). The runtime usually has a way to walk its own stack
for an exception handler to print the stack trace during errors.
Tracing JITT-compiled languages is difficult. There is no symbol table on the binary since it is
dynamic and in memory. Some applications provide supplemental symbol files for the JIT
mappings (/tmp/perf-PID.map); however, these cannot be used with uprobes for two reasons:
1. The compiler may move uprobe-instrumented functions in memory without informing the
kernel. When the instrumentation is no longer needed, the kermel reverts the instructions back
to normal, but it is now writing to the wrong location and will corrupt user-space memory.*
2. uprobes are inode based and require a file location to work, whereas the JIT functions may
be stored in anonymous private mappings.3
Tracing compiled functions may be possible if the runtime provides USDT probes for each
function, although this technique usually incurs high overhead, whether it is enabled or
not. A more efficient approach is to instrument selected points with dynamic USDT. (USDT
and dynamic USDT were introduced in Chapter 2.) USDT probes also provide a solution for
instrumenting function arguments and return values as arguments to those probes.
If stack traces from BPF already work, supplemental symbol files can be used to translate them
into the function names. For a runtime that doesn’t support USDT, this provides one path for
visibility into running JIT functions: stack traces can be collected on syscalls, kernel events, and
via timed profiling, revealing the JTT functions that are running. This may be the easiest way you
can get JIT function visibility to work, and can help solve many problem types.
Ifstack traces do not work, check whether the runtime supports frame pointers with an option
or whether LBR can be used. If these are dead ends, there are a number of other ways to fix
pou o si em auo gom Suaautua queyuis anban eu asag qsnoue saoen xoes
the runtime compiler to preserve the frame pointer. Another is to add USDT probes that use
3 Along with others, 1 have been looking into how to remove this limitastion from the kermel
---
## Page 557
520
0Chapter 12 Languages
the language’s own means of getting the call stack, and providing this as a string argument. Yet
another way is to signal the process from BPF and have a user-space helper write a stack trace to
memory that BPF can read, as Facebook has implemented for hhvm [133]
Java is dliscussed later in this chapter as an example of how these techniques work in practice.
12.1.3 Interpreted
Examples of languages that are commonly interpreted include the bash shell, Perl, Python,
 anogaq aes e se uogeadapu asn uouro eg sa8ensue[ osje ane auaL xqng pue
compilationfor example, Java and JavaScript. The analysis of those staged languages during
their interpretation stage is similar to analysis of languages that use only interpretation.
Interpreted language runtimes do not compile the program functions to machine code but
instead parse and execute the program using their own built-in routines. They have the following
attributes:
The binary symbol table shows interpreter internals but no functions from the user-
 o ds s e e o u ps  ae suo  uod pdns
interpreter implementation and maps to interpreter objects.
•Function arguments and return values are processed by the interpreter. They are likely
passed around by interpreter function calls and may be bundled as interpreter objects and
rather than simple ints and strings.
 If the interpreter itself is compiled to honor the frame pointer, frame pointer stack walking
will work, but it will show only the interpreter internals with no function name context
from the user-supplied program that is running. The program stack is likely known by the
interpreter and printed for exception stacks but stored in a custom data structure.
USDT probes may exist to show the start and end of function calls, with the function name and
arguments as arguments to the USDT probe. For example, the Ruby runtime has built-in USDT
probes in the interpreter. While this provides a way to trace function calls, it can come with high
overhead: it usually means instrumenting all function calls, and then filtering on the name for
the functions of interest. If there is a dynamic USDT library for the language runtime, it can be
ung e ue ue ae saau jo suoung a u uo saqod s osn asu o pasn
tions and then filtering. (See Chapter 2 for an introduction to dynamic USDT.) For example, the
ruby-static-tracing package provides this for Ruby.
If the runtime does not have built-in USDT probes, and no package provides runtime USDT
details such as function names and arguments can be fetched. They may be stored as interpreter
support (such as libstapsdit/libusdt), its interpreter functions can be traced using uprobes and
objects and require some struct navigation to parse.
Stack traces may be very difficult to tease out of the interpreter’s memory. One approach, albeit
one with high overhead, is to trace all function calls and returns in BPF and construct a synthetic
stack for each thread in BPF memory that can be read when needed. As with JIT-compiled
IOS uosno etA Supnpu *uoddns aoen yoes ppe o siem auo aq Aeu auau °sasenue[
probes and the runtime’s own method for fetching a stack (as with ruby's *caller" built-in, or an
dau aoeds-sasn e o eu8is ddg e gtm 1o °(poga uogdaoxa
---
## Page 558
12.1Background 521
12.1.4 BPF Capabilities
The target capabilities for tracing a language with BPF are to answer these questions:
• What functions are called?
 What are the arguments to a function?
•What is the return value of a function? Did it error?
●What is code path (stack trace) that led to any event?
•What is the duration of a function? As a histogram?
euauadu aenue at uo spuadap dd qsm pasamste aq ueo suopsanb asat go Aueu mo
Many language implementations come with custom debuggers that can answer the first four of these
questions easily, so you might wonder why we even need BPF for this. A primary reason is to trace
multiple layers of the software stack in one tool. Instead of examining disk I/O or page faults with