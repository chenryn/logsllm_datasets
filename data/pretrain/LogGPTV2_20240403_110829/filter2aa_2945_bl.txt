If the resource is a file, this could prevent other users from being able to
access that file; if the resource is a database connection, your application
Download from finelybook PI:EMAIL
498
could prevent other users from being able to connect to the same database.
Ideally, you want to free resources as soon as you have finished using them
rather than wait for the application to terminate.
In the next exercise, you will implement the IDisposable interface in the
Calculator class and enable the program to finalize Calculator objects at a
time of its choosing.
Implement the IDisposable interface
1. Display the Calculator.cs file in the Code and Text Editor window.
2. Modify the definition of the Calculator class so that it implements the
IDisposable interface, as shown here in bold:
Click here to view code image
class Calculator : IDisposable
{
    ...
}
3. Add the following method shown in bold, named Dispose, to the end of
the Calculator class. This method is required by the IDisposable
interface:
Click here to view code image
class Calculator : IDisposable
{
    ...
    public void Dispose()
    {
        Console.WriteLine("Calculator being disposed");
    }
}
You would normally add code to the Dispose method that releases the
resources held by the object. There are none in this case and the purpose
of the Console.WriteLine statement in this method is just to let you see
when the Dispose method is run. However, you can see that in a real-
world application, there would likely be some duplication of code
between the destructor and the Dispose method. To remove this
duplication, you would typically place this code in one place and call it
from the other. But because you cannot explicitly invoke a destructor
Download from finelybook PI:EMAIL
499
from the Dispose method, it makes sense instead to call the Dispose
method from the destructor and place the logic that releases resources in
the Dispose method.
4. Modify the destructor so that it calls the Dispose method, as shown in
bold in the following code. (Leave the statement displaying the message
in place in the finalizer so that you can see when it is being run by the
garbage collector).
Click here to view code image
~Calculator()
{
    Console.WriteLine("Calculator being finalized");
    this.Dispose();
}
When you want to destroy a Calculator object in an application, the
Dispose method does not run automatically; your code must either call it
explicitly (with a statement such as calculator.Dispose()) or create the
Calculator object within a using statement. In your program, you will
adopt the latter approach.
5. Display the Program.cs file in the Code and Text Editor window.
Modify the statements in the Main method that create the Calculator
object and call the Divide method, as shown here in bold:
Click here to view code image
static void Main(string[] args)
{
    using (Calculator calculator = new Calculator())
    {
        Console.WriteLine($"120 / 15 = {calculator.Divide(120,
15)}");
    }
    Console.WriteLine("Program finishing");
}
6. On the Debug menu, click Start Without Debugging. Verify that the
program now displays the following series of messages:
Click here to view code image
Calculator being created
120 / 15 = 8
Download from finelybook PI:EMAIL
500
Calculator being disposed
Program finishing
Calculator being finalized
Calculator being disposed
The using statement causes the Dispose method to run before the
statement that displays the “Program finishing” message. However, you
can see that the destructor for the Calculator object still runs when the
application finishes, and it calls the Dispose method again. This is
clearly a waste of processing.
7. In the console window, press the Enter key and return to Visual Studio
2017.
Disposing of the resources held by an object more than once might or
might not be disastrous, but it is definitely not good practice. The
recommended approach to resolving this problem is to add a private Boolean
field to the class to indicate whether the Dispose method has already been
invoked, and then examine this field in the Dispose method.
Prevent an object from being disposed of more than once
1. Display the Calculator.cs file in the Code and Text Editor window.
2. Add a private Boolean field called disposed to the start of the Calculator
class. Initialize the value of this field to false, as shown in bold in the
following code:
Click here to view code image
class Calculator : IDisposable
{
    private bool disposed = false;
    ...
}
The purpose of this field is to track the state of this object and indicate
whether the Dispose method has been invoked.
3. Modify the code in the Dispose method to display the message only if
the disposed field is false. After displaying the message, set the disposed
field to true, as shown here in bold:
Click here to view code image
Download from finelybook PI:EMAIL
501
public void Dispose()
{
    if (!this.disposed)
    {
        Console.WriteLine("Calculator being disposed");
    }
    this.disposed = true;
}
4. On the Debug menu, click Start Without Debugging. Notice that the
program displays the following series of messages:
Click here to view code image
Calculator being created
120 / 15 = 8
Calculator being disposed
Program finishing
Calculator being finalized
The Calculator object is now discarded only once, but the destructor is
still running. Again, this is a waste; there is little point in running a
destructor for an object that has already released its resources.
5. In the console window, press the Enter key and return to Visual Studio
2017.
6. In the Calculator class, add the following statement shown in bold to the
end of the Dispose method:
Click here to view code image
public void Dispose()
{
    if (!this.disposed)
    {
        Console.WriteLine("Calculator being disposed");
    }
    this.disposed = true;
    GC.SuppressFinalize(this);
}
The GC class provides access to the garbage collector, and it
implements several static methods with which you can control some of
the actions it performs. Using the SuppressFinalize method, you can
indicate that the garbage collector should not perform finalization on the
Download from finelybook PI:EMAIL
502
specified object, and this prevents the destructor from running.
Important The GC class exposes several methods with which you
can configure the garbage collector. However, it is usually better to
let the CLR manage the garbage collector itself because you can
seriously impair the performance of your application if you call
these methods injudiciously. You should treat the SuppressFinalize
method with extreme caution because if you fail to dispose of an
object, you run the risk of losing data (if you fail to close a file
correctly, for example, any data buffered in memory but not yet
written to disk could be lost). Call this method only in situations
such as that shown in this exercise, when you know that an object
has already been discarded.
7. On the Debug menu, click Start Without Debugging. Notice that the
program displays the following series of messages:
Click here to view code image
Calculator being created
120 / 15 = 8
Calculator being disposed
Program finishing
You can see that the destructor is no longer running because the
Calculator object has already been disposed of before the program
finishes.
8. In the console window, press the Enter key and return to Visual Studio
2017.
Thread safety and the Dispose method
The example of using the disposed field to prevent an object from being
discarded multiple times works well in most cases, but keep in mind
that you have no control over when the finalizer runs. In the exercises in
Download from finelybook PI:EMAIL
503
this chapter, it has always executed as the program finishes, but this
might not always be the case—it can run anytime after the last reference
to an object has disappeared. So it is possible that the finalizer might
actually be invoked by the garbage collector on its own thread while the
Dispose method is being run, especially if the Dispose method has to do
a significant amount of work. You could reduce the possibility of
resources being released multiple times by moving the statement that
sets the disposed field to true closer to the start of the Dispose method,
but in this case you run the risk of not freeing the resources at all if an
exception occurs after you have set this variable but before you have
released them.
To eliminate the chances of two concurrent threads disposing of the
same resources in the same object simultaneously, you can write your
code in a thread-safe manner by embedding it in a C# lock statement,
like this:
Click here to view code image
public void Dispose()
{
    lock(this)
    {
        if (!disposed)
        {
            Console.WriteLine("Calculator being disposed");
        }
        this.disposed = true;
        GC.SuppressFinalize(this);
    }
}
The purpose of the lock statement is to prevent the same block of
code from being run at the same time on different threads. The
argument to the lock statement (this in the preceding example) should
be a reference to an object. The code between the curly braces defines
the scope of the lock statement. When execution reaches the lock
statement, if the specified object is currently locked, the thread
requesting the lock is blocked, and the code is suspended at this point.
When the thread that currently holds the lock reaches the closing curly
brace of the lock statement, the lock is released, enabling the blocked
thread to acquire the lock itself and continue. However, by the time this
Download from finelybook PI:EMAIL
504
happens, the disposed field will have been set to true, so the second
thread will not attempt to perform the code in the if (!disposed) block.
Using locks in this manner is safe, but it can harm performance. An
alternative approach is to use the strategy described earlier in this
chapter, whereby only the repeated disposal of managed resources is
suppressed. (It is not exception-safe to dispose of managed resources
more than once; you will not compromise the security of your
computer, but you might affect the logical integrity of your application
if you attempt to dispose of a managed object that no longer exists.)
This strategy implements overloaded versions of the Dispose method;
the using statement calls Dispose(), which in turn runs the statement
Dispose(true), while the destructor invokes Dispose(false). Managed
resources are freed only if the parameter to the overloaded version of
the Dispose method is true. For more information, refer back to the
example in the section “Calling the dispose method from a destructor.”
The purpose of the using statement is to ensure that an object is always
discarded, even if an exception occurs while it is being used. In the final
exercise in this chapter, you will verify that this is the case by generating an
exception in the middle of a using block.
Verify that an object is disposed of after an exception
1. Display the Program.cs file in the Code and Text Editor window.
2. Modify the statement that calls the Divide method of the Calculator
object as shown in bold:
Click here to view code image
static void Main(string[] args)
{
    using (Calculator calculator = new Calculator())
    {
        Console.WriteLine($"120 / 0 = {calculator.Divide(120,
0)}");
    }
    Console.WriteLine("Program finishing");
}
Download from finelybook PI:EMAIL
505
The amended statement attempts to divide 120 by 0.
3. On the Debug menu, click Start Without Debugging.
As you might have anticipated, the application throws an unhandled
DivideByZeroException exception.
4. In the GarbageCollectionDemo message box, click Close program.
Note Sometimes the message box displays the Debug option. If
this occurs, ignore it.
5. Verify that the message “Calculator being disposed” appears after the
unhandled exception in the console window after you close the message
box window.
Download from finelybook PI:EMAIL
506
6. In the console window, press the Enter key and return to Visual Studio
2017.
Summary
In this chapter, you saw how the garbage collector works and how the .NET
Framework uses it to dispose of objects and reclaim memory. You learned
how to write a destructor to clean up the resources used by an object when
memory is recycled by the garbage collector. You also saw how to use the
using statement to implement exception-safe disposal of resources and how
to implement the IDisposable interface to support this form of object
disposal.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 15, “Implementing properties to access
fields.”
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Write a destructor
Write a method whose name is the same as the
name of the class and is prefixed with a tilde (~).
The method must not have an access modifier
Download from finelybook PI:EMAIL
507
(such as public) and cannot have any parameters
or return a value. For example:
Click here to view code image
class Example
{
    ~Example()
    {
        ...
    }
}
Call a destructor
You can’t call a destructor. Only the garbage
collector can call a destructor.
Force garbage collection
(not recommended)
Call GC.Collect.
Release a resource at a
known point in time (but
at the risk of resource
leaks if an exception
interrupts the execution)
Write a disposal method (a method that disposes
of a resource) and call it explicitly from the
program. For example:
Click here to view code image
class TextReader
{
    ...
    public virtual void Close()
    {
         ...
    }
}
class Example
{
    void Use()
    {
        TextReader reader = ...;
        // use reader
        reader.Close();
    }
}
Support exception-safe
disposal in a class
Implement the IDisposable interface. For
example:
Click here to view code image
class SafeResource : IDisposable
Download from finelybook PI:EMAIL
508
{
    ...
    public void Dispose()
    {
        // Dispose resources here
    }
}
Implement exception-
safe disposal for an
object that implements
the IDisposable interface
Create the object in a using statement. For
example:
Click here to view code image
using (SafeResource resource = new
SafeResource())
{
    // Use SafeResource here
    ...
}
Download from finelybook PI:EMAIL
509
PART III
Defining extensible types with C#
Parts I and II introduced you to the core syntax of the C# language and
showed you how to build new types by using structures, enumerations, and
classes. You also saw how the common language runtime (CLR) manages the
memory used by variables and objects when a program runs, and you should
now understand the life cycle of C# objects. The chapters in Part III build on
this information, showing you how to use C# to create extensible components
—highly functional data types that you can reuse in many applications.
In Part III, you’ll learn about more advanced features of C#, such as
properties, indexers, generics, and collection classes. You’ll see how you can
build responsive systems by using events and how you can use delegates to
invoke the application logic of one class from another without closely
coupling the classes—a powerful technique that enables you to construct
highly extensible systems. You will also learn about Language-Integrated
Query (LINQ), which enables you to perform complex queries over
collections of objects in a clear and natural manner. And you’ll see how to
overload operators to customize the way in which common C# operators
function over your own classes and structures.
Download from finelybook PI:EMAIL
510
CHAPTER 15
Implementing properties to access
fields
After completing this chapter, you will be able to:
Encapsulate logical fields by using properties.
Control read access to properties by declaring get accessors.
Control write access to properties by declaring set accessors.
Create interfaces that declare properties.
Implement interfaces containing properties by using structures and
classes.
Generate properties automatically based on field definitions.
Use properties to initialize objects.
This chapter looks at how to define and use properties to encapsulate fields
and data in a class. Previous chapters emphasize that you should make the
fields in a class private and provide methods to store values in them and to
retrieve their values. This approach ensures safe and controlled access to
fields, and you can use it to encapsulate additional logic and rules concerning
the values that are permitted. However, the syntax for accessing a field in this
way is unnatural. When you want to read or write a variable, you normally
use an assignment statement, so calling a method to achieve the same effect
on a field (which is, after all, just a variable) feels a little clumsy. Properties
are designed to alleviate this awkwardness.
Download from finelybook PI:EMAIL
511
Implementing encapsulation by using methods
First, let’s recap the original motivation for using methods to hide fields.
Consider the following structure that represents a position on a computer
screen as a pair of coordinates, x and y. Assume that the range of valid values
for the x-coordinate lies between 0 and 1279, and the range of valid values
for the y-coordinate lies between 0 and 1023.
Click here to view code image
struct ScreenPosition
{
    public int X;
    public int Y;
public ScreenPosition(int x, int y)
    {
        this.X = rangeCheckedX(x);
        this.Y = rangeCheckedY(y);
    }