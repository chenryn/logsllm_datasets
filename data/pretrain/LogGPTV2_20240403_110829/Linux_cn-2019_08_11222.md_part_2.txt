我还问过 Stallman 博士，是否有任何 GNU 特定的创新或惯例后来被采纳为 POSIX 标准。他无法回想起具体的例子，但友好地代我向几位开发者发了邮件。
开发者 Giacomo Catenazzi，James Youngman，Eric Blake，Arnold Robbins 和 Joshua Judson Rosen 对以前的 POSIX 迭代以及仍在进行中的 POSIX 迭代做出了回应。POSIX 是一个 “ 活的   living ” 标准，因此会不断被行业专业人士更新和评审，许多从事 GNU 项目的开发人员提出了对 GNU 特性的包含。
为了回顾这些有趣的历史，接下来会罗列一些已经融入 POSIX 的流行的 GNU 特性。
#### Make
一些 GNU **Make** 的特性已经被 POSIX 的 `make` 定义所采用。相关的 [规范](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html) 提供了从现有实现中借来的特性的详细归因。
#### Diff 和 patch
[diff](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/diff.html) 和 [patch](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/patch.html) 命令都直接从这些工具的 GNU 版本中引进了 `-u` 和 `-U` 选项。
#### C 库
POSIX 采用了 GNU C 库 **glibc** 的许多特性。 血统   Lineage 一时已难以追溯，但 James Youngman 如是写道：
> 
> “我非常确定 GCC 首创了许多 ISO C 的特性。例如，**\_Noreturn** 是 C11 中的新特性，但 GCC-1.35 便具有此功能（使用 `volatile` 作为声明函数的修饰符）。另外尽管我不确定，GCC-1.35 支持的可变长度数组似乎与现代 C 中的（ 柔性数组   conformant array ）非常相似。”
> 
> 
> 
Giacomo Catenazzi 援引 Open Group 的 [strftime](https://pubs.opengroup.org/onlinepubs/9699919799/functions/strftime.html) 文章，并指出其归因：“这是基于某版本 GNU libc 的 `strftime()` 的特性。”
Eric Blake 指出，对于 `getline()` 和各种基于语言环境的 `*_l()` 函数，GNU 绝对是这方面的先驱。
Joshua Judson Rosen 补充道，他清楚地记得，在全然不同的操作系统的代码中奇怪地目睹了熟悉的 GNU 式的行为后，对 `getline()` 函数的采用给他留下了深刻的印象。
“等等……那不是 GNU 特有的吗？哦，显然已经不再是了。”
Rosen 向我指出了 [getline 手册页](http://man7.org/linux/man-pages/man3/getline.3.html) 中写道：
> 
> `getline()` 和 `getdelim()` 最初都是 GNU 扩展。在 POSIX.1-2008 中被标准化。
> 
> 
> 
Eric Blake 向我发送了一份其他扩展的列表，这些扩展可能会在下一个 POSIX 修订版中添加（代号为 Issue 8，大约在 2021 年前后）：
* [ppoll](http://austingroupbugs.net/view.php?id=1263)
* [pthread\_cond\_clockwait et al.](http://austingroupbugs.net/view.php?id=1216)
* [posix\_spawn\_file\_actions\_addchdir](http://austingroupbugs.net/view.php?id=1208)
* [getlocalename\_1](http://austingroupbugs.net/view.php?id=1220)
* [reallocarray](http://austingroupbugs.net/view.php?id=1218)
### 关于用户空间的扩展
POSIX 不仅为开发人员定义了函数和特性，还为用户空间定义了标准行为。
#### ls
`-A` 选项会排除来自 `ls` 命令结果中的符号 `.`（代表当前位置）和 `..`（代表上一级目录）。它被 POSIX 2008 采纳。
#### find
`find` 命令是一个 特别的   （    ad hoc    ）  [for 循环](https://opensource.com/article/19/6/how-write-loop-bash) 工具，也是 [ 并行   parallel ](https://opensource.com/article/18/5/gnu-parallel) 处理的出入口。
一些从 GNU 引入到 POSIX 的 便捷操作   conveniences ，包括 `-path` 和 `-perm` 选项。
`-path` 选项帮你过滤与文件系统路径模式匹配的搜索结果，并且从 1996 年（根据 `findutil` 的 Git 仓库中最早的记录）GNU 版本的 `find` 便可使用此选项。James Youngman 指出 [HP-UX](https://www.hpe.com/us/en/servers/hp-ux.html) 也很早就有这个选项，所以究竟是 GNU 还是 HP-UX 做出的这一创新（抑或两者兼而有之）无法考证。
`-perm` 选项帮你按文件权限过滤搜索结果。这在 1996 年 GNU 版本的 `find` 中便已存在，随后被纳入 POSIX 标准 “IEEE Std 1003.1,2004 Edition” 中。
`xargs` 命令是 `findutils` 软件包的一部分，1996 年的时候就有一个 `-p` 选项会将 `xargs` 置于交互模式（用户将被提示是否继续），随后被纳入 POSIX 标准 “IEEE Std 1003.1, 2004 Edition” 中。
#### Awk
GNU awk（即 `/usr/bin` 目录中的 `gawk` 命令，可能也是符号链接 `awk` 的目标地址）的维护者 Arnold Robbins 说道，`gawk` 和 `mawk`（另一个GPL 的 `awk` 实现）允许 `RS`（记录分隔符）是一个正则表达式，即这时 `RS` 的长度会大于 1。这一特性还不是 POSIX 的特性，但有 [迹象表明它即将会是](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html)：
> 
> NUL 在扩展正则表达式中产生的未定义行为允许 GNU `gawk` 程序未来可以扩展以处理二进制数据。
> 
> 
> 使用多字符 RS 值的未指定行为是为了未来可能的扩展，它是基于用于记录分隔符（RS）的扩展正则表达式的。目前的历史实现为采用该字符串的第一个字符而忽略其他字符。
> 
> 
> 
这是一个重大的增强，因为 `RS` 符号定义了记录之间的分隔符。可能是逗号、分号、短划线、或者是任何此类字符，但如果它是字符*序列*，则只会使用第一个字符，除非你使用的是 `gawk` 或 `mawk`。想象一下这种情况，使用省略号（连续的三个点）作为解析 IP 地址文档的分隔记录，只是想获取在每个 IP 地址的每个点处解析的结果。
[mawk](https://invisible-island.net/mawk/) 首先支持这个功能，但是几年来没有维护者，留下来的火把由 `gawk` 接过。（`mawk` 已然获得了一个新的维护者，可以说是大家薪火传承地将这一特性推向共同的预期值。）
### POSIX 规范
总的来说，Giacomo Catenzzi 指出，“……因为 GNU 的实用程序使用广泛，而且许多其他的选项和行为又对标规范。在 shell 的每次更改中，Bash 都会（作为一等公民）被用作比较。” 当某些东西被纳入 POSIX 规范时，无需提及 GNU 或任何其他影响，你可以简单地认为 POSIX 规范会受到许多方面的影响，GNU 只是其中之一。
共识是 POSIX 存在的意义所在。一群技术人员共同努力为了实现共同规范，再分享给数以百计各异的开发人员，经由他们的赋能，从而实现软件的独立性，以及开发人员和用户的自由。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[martin2011qi](https://github.com/martin2011qi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出