};
.ee
.in
.pp
the fields of the
.i perf_event_attr
structure are described in more detail below:
.tp
.i type
this field specifies the overall event type.
it has one of the following values:
.rs
.tp
.b perf_type_hardware
this indicates one of the "generalized" hardware events provided
by the kernel.
see the
.i config
field definition for more details.
.tp
.b perf_type_software
this indicates one of the software-defined events provided by the kernel
(even if no hardware support is available).
.tp
.b perf_type_tracepoint
this indicates a tracepoint
provided by the kernel tracepoint infrastructure.
.tp
.b perf_type_hw_cache
this indicates a hardware cache event.
this has a special encoding, described in the
.i config
field definition.
.tp
.b perf_type_raw
this indicates a "raw" implementation-specific event in the
.ir config " field."
.tp
.br perf_type_breakpoint " (since linux 2.6.33)"
.\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e
this indicates a hardware breakpoint as provided by the cpu.
breakpoints can be read/write accesses to an address as well as
execution of an instruction address.
.tp
dynamic pmu
since linux 2.6.38,
.\" commit 2e80a82a49c4c7eca4e35734380f28298ba5db19
.br perf_event_open ()
can support multiple pmus.
to enable this, a value exported by the kernel can be used in the
.i type
field to indicate which pmu to use.
the value to use can be found in the sysfs filesystem:
there is a subdirectory per pmu instance under
.ir /sys/bus/event_source/devices .
in each subdirectory there is a
.i type
file whose content is an integer that can be used in the
.i type
field.
for instance,
.i /sys/bus/event_source/devices/cpu/type
contains the value for the core cpu pmu, which is usually 4.
.tp
.br kprobe " and " uprobe " (since linux 4.17)"
.\" commit 65074d43fc77bcae32776724b7fa2696923c78e4
.\" commit e12f03d7031a977356e3d7b75a68c2185ff8d155
.\" commit 33ea4b24277b06dbc55d7f5772a46f029600255e
these two dynamic pmus create a kprobe/uprobe and attach it to the
file descriptor generated by perf_event_open.
the kprobe/uprobe will be destroyed on the destruction of the file descriptor.
see fields
.ir kprobe_func ,
.ir uprobe_path ,
.ir kprobe_addr ,
and
.i probe_offset
for more details.
.re
.tp
.i "size"
the size of the
.i perf_event_attr
structure for forward/backward compatibility.
set this using
.i sizeof(struct perf_event_attr)
to allow the kernel to see
the struct size at the time of compilation.
.ip
the related define
.b perf_attr_size_ver0
is set to 64; this was the size of the first published struct.
.b perf_attr_size_ver1
is 72, corresponding to the addition of breakpoints in linux 2.6.33.
.\" commit cb5d76999029ae7a517cb07dfa732c1b5a934fc2
.\" this was added much later when perf_attr_size_ver2 happened
.\" but the actual attr_size had increased in 2.6.33
.b perf_attr_size_ver2
is 80 corresponding to the addition of branch sampling in linux 3.4.
.\" commit cb5d76999029ae7a517cb07dfa732c1b5a934fc2
.b perf_attr_size_ver3
is 96 corresponding to the addition
of
.i sample_regs_user
and
.i sample_stack_user
in linux 3.7.
.\" commit 1659d129ed014b715b0b2120e6fd929bdd33ed03
.b perf_attr_size_ver4
is 104 corresponding to the addition of
.i sample_regs_intr
in linux 3.19.
.\" commit 60e2364e60e86e81bc6377f49779779e6120977f
.b perf_attr_size_ver5
is 112 corresponding to the addition of
.i aux_watermark
in linux 4.1.
.\" commit 1a5941312414c71dece6717da9a0fa1303127afa
.tp
.i "config"
this specifies which event you want, in conjunction with
the
.i type
field.
the
.i config1
and
.i config2
fields are also taken into account in cases where 64 bits is not
enough to fully specify the event.
the encoding of these fields are event dependent.
.ip
there are various ways to set the
.i config
field that are dependent on the value of the previously
described
.i type
field.
what follows are various possible settings for
.i config
separated out by
.ir type .
.ip
if
.i type
is
.br perf_type_hardware ,
we are measuring one of the generalized hardware cpu events.
not all of these are available on all platforms.
set
.i config
to one of the following:
.rs 12
.tp
.b perf_count_hw_cpu_cycles
total cycles.
be wary of what happens during cpu frequency scaling.
.tp
.b perf_count_hw_instructions
retired instructions.
be careful, these can be affected by various
issues, most notably hardware interrupt counts.
.tp
.b perf_count_hw_cache_references
cache accesses.
usually this indicates last level cache accesses but this may
vary depending on your cpu.
this may include prefetches and coherency messages; again this
depends on the design of your cpu.
.tp
.b perf_count_hw_cache_misses
cache misses.
usually this indicates last level cache misses; this is intended to be
used in conjunction with the
.b perf_count_hw_cache_references
event to calculate cache miss rates.
.tp
.b perf_count_hw_branch_instructions
retired branch instructions.
prior to linux 2.6.35, this used
the wrong event on amd processors.
.\" commit f287d332ce835f77a4f5077d2c0ef1e3f9ea42d2
.tp
.b perf_count_hw_branch_misses
mispredicted branch instructions.
.tp
.b perf_count_hw_bus_cycles
bus cycles, which can be different from total cycles.
.tp
.br perf_count_hw_stalled_cycles_frontend " (since linux 3.0)"
.\" commit 8f62242246351b5a4bc0c1f00c0c7003edea128a
stalled cycles during issue.
.tp
.br perf_count_hw_stalled_cycles_backend  " (since linux 3.0)"
.\" commit 8f62242246351b5a4bc0c1f00c0c7003edea128a
stalled cycles during retirement.
.tp
.br perf_count_hw_ref_cpu_cycles  " (since linux 3.3)"
.\" commit c37e17497e01fc0f5d2d6feb5723b210b3ab8890
total cycles; not affected by cpu frequency scaling.
.re
.ip
if
.i type
is
.br perf_type_software ,
we are measuring software events provided by the kernel.
set
.i config
to one of the following:
.rs 12
.tp
.b perf_count_sw_cpu_clock
this reports the cpu clock, a high-resolution per-cpu timer.
.tp
.b perf_count_sw_task_clock
this reports a clock count specific to the task that is running.
.tp
.b perf_count_sw_page_faults
this reports the number of page faults.
.tp
.b perf_count_sw_context_switches
this counts context switches.
until linux 2.6.34, these were all reported as user-space
events, after that they are reported as happening in the kernel.
.\" commit e49a5bd38159dfb1928fd25b173bc9de4bbadb21
.tp
.b perf_count_sw_cpu_migrations
this reports the number of times the process
has migrated to a new cpu.
.tp
.b perf_count_sw_page_faults_min
this counts the number of minor page faults.
these did not require disk i/o to handle.
.tp
.b perf_count_sw_page_faults_maj
this counts the number of major page faults.
these required disk i/o to handle.
.tp
.br perf_count_sw_alignment_faults " (since linux 2.6.33)"
.\" commit f7d7986060b2890fc26db6ab5203efbd33aa2497
this counts the number of alignment faults.
these happen when unaligned memory accesses happen; the kernel
can handle these but it reduces performance.
this happens only on some architectures (never on x86).
.tp
.br perf_count_sw_emulation_faults " (since linux 2.6.33)"
.\" commit f7d7986060b2890fc26db6ab5203efbd33aa2497
this counts the number of emulation faults.
the kernel sometimes traps on unimplemented instructions
and emulates them for user space.
this can negatively impact performance.
.tp
.br perf_count_sw_dummy " (since linux 3.12)"
.\" commit fa0097ee690693006ab1aea6c01ad3c851b65c77
this is a placeholder event that counts nothing.
informational sample record types such as mmap or comm
must be associated with an active event.
this dummy event allows gathering such records without requiring
a counting event.
.re
.pp
.rs
if
.i type
is
.br perf_type_tracepoint ,
then we are measuring kernel tracepoints.
the value to use in
.i config
can be obtained from under debugfs
.i tracing/events/*/*/id
if ftrace is enabled in the kernel.
.re
.pp
.rs
if
.i type
is
.br perf_type_hw_cache ,
then we are measuring a hardware cpu cache event.
to calculate the appropriate
.i config
value, use the following equation:
.rs 4
.pp
.in +4n
.ex
config = (perf_hw_cache_id) |
         (perf_hw_cache_op_id  0."
when an overflow occurs, requested data is recorded
in the mmap buffer.
the
.i sample_type
field controls what data is recorded on each overflow.
.ip
.i sample_freq
can be used if you wish to use frequency rather than period.
in this case, you set the
.i freq
flag.
the kernel will adjust the sampling period
to try and achieve the desired rate.
the rate of adjustment is a
timer tick.
.tp
.i sample_type
the various bits in this field specify which values to include
in the sample.
they will be recorded in a ring-buffer,
which is available to user space using
.br mmap (2).
the order in which the values are saved in the
sample are documented in the mmap layout subsection below;
it is not the
.i "enum perf_event_sample_format"
order.
.rs
.tp
.b perf_sample_ip
records instruction pointer.
.tp
.b perf_sample_tid
records the process and thread ids.
.tp
.b perf_sample_time
records a timestamp.
.tp
.b perf_sample_addr
records an address, if applicable.
.tp
.b perf_sample_read
record counter values for all events in a group, not just the group leader.
.tp
.b perf_sample_callchain
records the callchain (stack backtrace).
.tp
.b perf_sample_id
records a unique id for the opened event's group leader.
.tp
.b perf_sample_cpu
records cpu number.
.tp
.b perf_sample_period
records the current sampling period.
.tp
.b perf_sample_stream_id
records a unique id for the opened event.
unlike
.b perf_sample_id
the actual id is returned, not the group leader.
this id is the same as the one returned by
.br perf_format_id .
.tp
.b perf_sample_raw
records additional data, if applicable.
usually returned by tracepoint events.
.tp
.br perf_sample_branch_stack " (since linux 3.4)"
.\" commit bce38cd53e5ddba9cb6d708c4ef3d04a4016ec7e
this provides a record of recent branches, as provided
by cpu branch sampling hardware (such as intel last branch record).
not all hardware supports this feature.
.ip
see the
.i branch_sample_type
field for how to filter which branches are reported.
.tp
.br perf_sample_regs_user " (since linux 3.7)"
.\" commit 4018994f3d8785275ef0e7391b75c3462c029e56
records the current user-level cpu register state
(the values in the process before the kernel was called).
.tp
.br perf_sample_stack_user " (since linux 3.7)"
.\" commit c5ebcedb566ef17bda7b02686e0d658a7bb42ee7
records the user level stack, allowing stack unwinding.
.tp
.br perf_sample_weight " (since linux 3.10)"
.\" commit c3feedf2aaf9ac8bad6f19f5d21e4ee0b4b87e9c
records a hardware provided weight value that expresses how
costly the sampled event was.
this allows the hardware to highlight expensive events in
a profile.
.tp
.br perf_sample_data_src " (since linux 3.10)"
.\" commit d6be9ad6c960f43800a6f118932bc8a5a4eadcd1
records the data source: where in the memory hierarchy
the data associated with the sampled instruction came from.
this is available only if the underlying hardware
supports this feature.
.tp
.br perf_sample_identifier " (since linux 3.12)"
.\" commit ff3d527cebc1fa3707c617bfe9e74f53fcfb0955
places the
.b sample_id
value in a fixed position in the record,
either at the beginning (for sample events) or at the end
(if a non-sample event).
.ip
this was necessary because a sample stream may have
records from various different event sources with different
.i sample_type
settings.
parsing the event stream properly was not possible because the
format of the record was needed to find
.br sample_id ,
but
the format could not be found without knowing what
event the sample belonged to (causing a circular
dependency).
.ip
the
.b perf_sample_identifier
setting makes the event stream always parsable
by putting
.b sample_id
in a fixed location, even though
it means having duplicate