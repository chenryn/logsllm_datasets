fault injection. By contrast a device which is inserted in the
data path can provide synchronization with the rest of the
system.
the destination by the time an external
injection
is
While
imperative
random fault
for
characterizing the overall behavior of a system, it is also
necessary to place faults in strategic locations for failure
analysis/characterization.
For example, evaluation of a
protocol designed to protect against a particular, rather rare,
or even malicious type of fault requires fault injection to be
synchronized with the data transmitted over the network.
Such synchronization guarantees precise identification of
causes of observed problems. Inserting the fault injector in
the data path enables injection of both random faults and
faults synchronized with the transmitted data. The proposed
fault injector has a complete view of the local state of the
network and can isolate the exact bit to be injected from
surrounding bits. This also allows us to inject the same
fault repeatedly with exact precision.
The disadvantages of using signal
interception to
perform fault injections have stemmed from the inherent
need to place hardware between the DUT and the system.
The delay introduced by inserting hardware in time-
sensitive critical paths has prohibited its use in certain
applications. The device described in this paper can operate
at sufficiently high speeds that
its delay is negligible
compared to the propagation delay induced by the
transmission media when operating on a Myrinet data
stream running at 1.28 Gb/s. This solution overcomes many
of
traditionally associated with signal
interception, and allows us to take full advantage of its
benefits.
the problems
The core logic of the fault injector can be configured to
iterate through any number of faults including:
•  Random faults causing bit flip errors for characterizing
tolerance under SEU
system availability and fault
conditions
•  Low level data-link layer faults (such as control-flow
• 
errors) inaccessible to SWIFI
Faults in control
connectivity pings) used by the network hardware
information (routing information,
3.2. Fault injector architecture and capabilities
The injector was first implemented in VHDL, and the
synthesized hardware was uploaded into an FPGA. With
advances in FPGA technology, it is possible to place the
FPGA in the data path while still meeting timing
constraints. The injector can function on standard interfaces
because commercially available physical
interface chips
(PHYs) are used as transceivers. Two transceivers are
necessary because the transmitted data must be intercepted
on one network segment and retransmitted with the desired
faults inserted on the opposite segment.
The reconfigurable hardware is in the data path, enabling
functionality limited only by the size of the FPGA and the
capabilities of the PHYs. In addition to fault injection, the
device facilitates data monitoring, advanced triggering
mechanisms, and statistics gathering.
Data monitoring. The FPGA can be programmed to keep
the bytes surrounding the fault injection event, thus giving
the user sufficient dynamic state information about
the
environment in which the fault injection was performed.
The capability to recognize packet headers and footers
allows for selective storing of data before and after the
injection. Information that is only accessible on the data-
link layer (e.g., device chatter to set up routing tables) can
also be monitored.
Real-time triggering mechanism. The FPGA uses a local
state-based trigger to look for a particular pattern in the
header of a packet and inject a random fault in the payload
while recalculating the correct CRC value to transmit
immediately before the end-of-frame (EOF) character.
Statistics gathering. The architecture has full access to
the data path, so the FPGA can gather statistics about the
fault injection campaign. For instance, data-link packet data
such as source and destination identifier numbers can be
monitored, with counters incremented for each packet seen
with these identifiers. This can be very useful if a slow
communication link is used.
The key characteristics of
the fault
injector design
include:
•  A large FPGA (the design is scalable from 400k to 1M
gates) allows for flexible design.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:18:26 UTC from IEEE Xplore.  Restrictions apply. 
•  COTS transceivers
internal operation on
standard CMOS levels regardless of voltage levels used
on the network level.
enable
•  The triggering hardware is directly in the network data
path. There it can trigger on specific data patterns seen
on the network in real time.
•  The injector can be reconfigured by an external system
at any time through the RS-232 interface, while the
FPGA is inserted in the network).
3.3. FPGA software design
Figure 1 provides a block diagram of the functional
components of the fault injector. The architecture supports
bi-directional fault injection, in which data can be corrupted
in both “left going” data and “right going” data. Note that
the universal asynchronous receiver/transmitter
(UART)
used to support serial communication channels between the
device and an external system is off-loaded to a separate
chip. This simplifies the design and enables conservation of
I/Os in the FPGA. Entities depicted in Figure 1 perform the
following functions:
information to the injector circuitry. It also generates error
and acknowledgment signals that are interpreted by the
output generator for configuration feedback.
Output generator. The output generator is another FSM
that generates ASCII codes for transmission over the serial
link.
Dual port RAM. Standard RAM architecture is used to
provide storage for the first-in-first-out (FIFO) injector
elements.
FIFO injector. The actual fault injection is performed by
the FIFO injector, which also provides the data path through
the injector. A two-phase operation is required to push data
into and out of a FIFO structure, to perform the compare
operation, and to modify data in the FIFO if either the data
meets injection criteria or a forced injection is desired. On
the first clock cycle (Figure 2), the data is both read and
pushed onto the FIFO stack. If data in the FIFO has been
injected and is ready to be output to the Myrinet network, it
is read and applied to the output circuitry. The incoming
32-bit data stream is also shifted into the compare registers,
whose concurrent logic starts the compare operation. On
the second clock cycle (Figure 3), the result of the compare
operation is available, and if any data needs to be corrupted,
it will be overwritten in the FIFO.
Figure 2: Odd clock operation (FIFO push and pull)
Figure 1: Functional components of the fault injector
SPI (serial peripheral interface). SPI serializes the data
for transmission to the UART and converts the received
data
by the
communications handler.
accessible
form to
parallel
into
be
Communications handler. The communications handler
configures the UART on boot-up and handles any interrupts
coming from the UART or the internal logic. This entity
assembles data in the 16-bit SPI protocol format from 8-bit
ASCII codes received from the output generator. Data in the
payload is stripped from incoming packets and applied to
the command decoder.
Command decoder. The command decoder is a large
finite-state machine (FSM), which receives data from the
communication
configuration
handler
applies
and
Figure 3: Even clock operation (inject data in FIFO)
inputs. All
3.3.1. Injector control
inject circuitry is
programmed into the FPGA [19]. As data is decoded by the
command decoder, configuration information is sent to the
injector. The injector control inputs depicted in Figure 3
allow the user to provide the necessary information to
perform the injections. They have the following functions:
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:18:26 UTC from IEEE Xplore.  Restrictions apply. 
Match mode. The match mode has three states: on, off,
and once. The on state enables the trigger (the Inject Now
signal in Figure 3) to function normally, and the off state
disables the trigger. The once state simply instructs the
compare logic to trigger on the first match it comes across
and to ignore all subsequent matches. This mode is useful if
the user wants to inject only one controlled, synchronous
error and study its effects over a relatively long time or if
the user wants to receive injection environment information
over the slower serial line for analysis while making sure
that no more errors are injected during this time.
Compare data. Incoming data is compared with the
compare data (bit-wise XOR) operation. The trigger line is
asserted if the data bits all match.
Compare mask. The compare mask enables the use of
“don't care” bits. The mask is applied to the result of the
compare data operation. As a consequence, not all bits in
the compare data have to match for the trigger line to be
asserted.
Corrupt mode. Corrupt mode has two options: toggle
and replace. In toggle mode, the bits of the corrupt data
vector are toggled, i.e., errors in the data stream correspond
to the bit positions in logic one of the corrupt data vector.
In replace mode, the correct data is replaced by the data in
the corrupt data vector. This can be done while applying the
corrupt mask vector and allowing only selected bits of the
corrupt data vector to replace the correct data; other bits
pass unchanged.
Corrupt data. Outgoing data is either replaced or toggled
using the corrupt data vector.
Corrupt mask. When the corrupt mode is replace, the
corrupt mask is applied to the outgoing data, allowing
desired bits of the corrupt data vector to replace the correct
data and the remaining bits to pass unchanged.
Inject now. When the inject now signal is asserted, the
current injection configuration is exercised on one 32-bit
segment during the next even clock cycle.
In a typical
injection scenario.
3.3.2. Typical
fault
injection campaign, the user uploads a series of commands
to the Command Decoder via a standard serial interface.
Assume that these commands instruct the Injector Entity to
match the data stream 0x1818 (the victim string), and
replace it with 0x1918. Upon receiving these commands,
the state machine of the Injector notifies the Injector Entity
to begin snooping for the string 0x1818. The network data
arriving at the physical interface are passed to the Injector
Entity where they enter the circular queue shown in Figure
3. Each contiguous 32-bit string is checked to see if it
contained the 16 bits 0x1818.
(By using the mask
commands, we can specify any arbitrary number of bits
between 0 and 32).
If no match is detected, the data exits
the queue and is placed on the opposite physical interface,
where it continues unhindered to its destination. When a
match is found, the state machine instructs the Injector to
insert the previously uploaded replacement data (0x1918) in
the data stream in place of the victim string. This process
can be configured to run only once (on the first match) or it
can be run on every match of the data. Because the injector
the injector can execute different and
is bi-directional,
independent commands on data traveling in different
directions. This grants even more flexibility in designing a
fault injection campaign.
3.4. Hardware design
Figure 4 depicts the PCB layout of the fault injector. The
first task in the hardware design was to determine how
many I/Os would be needed to support
the two target
networks, Myrinet SAN and Fibre Channel. Based on this
the appropriate FPGA package was chosen. Given that the
FPGA will connect to the devices as shown in Figure 4 we
determined I/O requirements for individual devices on the
board,
transceivers
(MyriPHY and FCPHY for Myrinet and Fibre Channel,
respectively), JTAG port (used to load configuration data
into FPGA), and SDRAM.
the two pairs of
including UART,
The external memory is
large enough to hold a
significant amount of network traffic (for later transmission
and analysis) and has the bandwidth to accept at least one of
the target network streams (roughly 1 Gb/s). SDRAM
(synchronous dynamic random access memory) running at
125 MHz was chosen to meet bandwidth, voltage,
complexity, and size requirements. Knowing which and
how many devices were to be supported, the general layout
of the PCB was drawn.
Figure 4: PCB Layout of the Fault Injector
The analysis of design requirements (e.g., provide
enough speed to use the external memory) dictated that a
Xilinx Virtex series FPGA is an ideal device for this
application. Devices of
this class meet our design
constraints because they offer a clock speed up to 200 MHz,
sufficient amount of on-board RAM, a sufficient number of
I/Os, and up to one million system gates.
3.4.1. PCB design. A dedicated PCB was designed and
manufactured to build a prototype of
the proposed
architecture. The complexity imposed by the FPGA forced
the use of a six-layer board, and a dog-bone structure was
used to make it possible to probe pins for shorts or opens
after the hardware components are mounted onto the PCB
(using a process called “reflow”). For this reason, signals
were routed to facilitate testing of the final PCB. More
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:18:26 UTC from IEEE Xplore.  Restrictions apply. 
details on the final hardware design and the design diagrams
can be found in [19].
3.5. Demonstration of the fault injector
A picture of the fully operational hardware fault injector is
presented in Figure 5.
Figure 5: Assembled fault injector