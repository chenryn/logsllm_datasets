# JAVA代码审计系列之反序列化入门(二)
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## JAVA代码审计系列之反序列化入门(二)
## 0x0 系列目录
[Java代码审计之入门篇（一）](https://www.anquanke.com/post/id/197641)
## 0x1 前言
JAVA的反序列化应该是JAVA WEB里面非常重要的一环，笔者就从萌新角度出发，探讨下JAVA反序列化的实现机制和反序列化攻击思路。
* * *
PS.从0到1，由浅入深，跟着笔者，一起推开JAVA反序列的大门。
(阅读此文之前，特别建议读者一定要先掌握JAVA基本编程知识，毕竟跟PHP来说，编程风格还是不太一样的)
## 0x2 java反序列化概念
笔者阅读了不少文章，发现2018年的先知议题中师傅终结的相当精炼易懂(PS.2020年学习师傅们玩剩的东西，tcl)
> 简单说下:
>
>
> 序列化和反序列化是java引入的数据传输存储接口,通过这种机制能够实现数据结构和对象的存储和传输，举一个例子，比如一座高楼，序列化高楼的过程可以理解为将高楼按照一定的规律拆成一块块砖，并做好标志(比如这块砖必须出现在某某位置),然后排列好，反序列化的过程就是将这些排列好的砖头按照规则重建为高楼。
## 0x3 PHP 与 JAVA 的差异
其实我个人觉得没必要深究他们的序列化结构,当然有些tips是可以出现在CTF中的
这些结构采用的编码算法能决定他们的存储容量。
Python、PHP等语言，都有一套流行的序列化算法。
这里我们简单来了解下:
PHP的序列化字符串:
这里直接取我之前写的一篇文章的例子:
    t1 = 't1';
    var_dump($obj);
    echo serialize($obj);
    ?>
可以看到这种是字符流形式的字符串,而Java的是二进制的数据流,导致不能够直观理解原结构，但是这种序列化的好处应该是比较高效，能够在网络中以比较少的数据包传输比较完整的结构。
直接用Eclipse新建一个JAVA Project
    package securityTest;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.ObjectOutputStream;
    public class Test {
        public static void main(String[] args) throws Exception {
            // TODO Auto-generated method stub
            // 这里是字符串对象
            String name = "xq17 study";
            // 序列化过程,后缀的话一般取ser作为写入文件后缀
            FileOutputStream fileOutputStream= new FileOutputStream("name.ser");
            ObjectOutputStream oStream = new ObjectOutputStream(fileOutputStream);
            // 写入序列化对象(序列化函数)
            oStream.writeObject(name);
            System.out.println("Serailized ok!");
        }
    }
这里我们需要掌握的一个基础知识就是:[序列化规范](https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html)
    final static short STREAM_MAGIC = (short)0xaced;
    final static short STREAM_VERSION = 5;
这里可以看到`aced`文件头是java序列化文件的一个特征,这个会有什么用的呢？
下面在漏洞挖掘的部分我们再进行细讨。
## 0x4 JAVA反序列化例子
了解了PHP的序列化过程，那么自然就该过渡到了反序列化这一步了。
在PHP学习中，我们知道魔法方法如`_destruct`函数会在反序列化过程中触发,
那么在JAVA中呢,比较常用的自动触发方法是:`readObject`
我们写一个例子来实验下:
`User`类
    package securityTest;
    import java.io.IOException;
    import java.io.Serializable;
    public class User implements Serializable {
        /**
         * 
         */
        private static final long serialVersionUID = 8593546012716519472L;
        private String name;
        private String age;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        private void readObject(java.io.ObjectInputStream in) throws IOException {
    //        Runtime.getRuntime().exec("/System/Applications/Calculator.app");
            System.out.println("i am readObject");
        }
    }
`serialVersionUID`这个值eclipse会提示你显性声明,可以自定义，也可以用默认生成的值，就是说如果你不声明那么照样也会有默认的值，
这个值是根据`JDK`版本及其你的类结构来生成的，所以你需要使用默认值，要么就不显示声明，要不就写完类再声明。
这个值如果不相同的话,会导致反序列化失败的，因为反序列化过程中会校验这个值,这里因为我们服务端和生成序列化的数据同一环境，所以这个值肯定相同，但是如果在远程环境上，我们就需要注意各种版本问题了，后面我会在踩坑过程与读者分析，这里我们还是抓主线来学习。
下面我们写一个存在反序列漏洞类`VulnTest`
    package securityTest;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.ObjectInput;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    public class VulnTest {
        public static void main(String[] args) throws IOException, ClassNotFoundException {
            // TODO Auto-generated method stub
            User user = new User();
            user.setName("xq17");
            // 序列化写入文件
            FileOutputStream fos = new FileOutputStream("user.ser");
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(user);
            os.close();
            // 序列化读取文件
            FileInputStream fis = new FileInputStream("user.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            System.out.println("开始反序列化");
            User userFromSer = (User) ois.readObject();
            ois.close();
        }
    }
那么除了`readObject`方法之外还有什么方法吗？
为什么`readObject`一定需要设置为`private`?
这里其实我们可以在eclipse直接下一个断点，跟一下相应的源码。
(这里因为我们直接Debug搞的是class字节码文件，所以变量值的话并不会显示)
这里为了减轻阅读难度，笔者省略了一些中间过程，读者可以自行去调试。
先说下入口:
调用该方法的调用栈
我们可以看到这里调用了反射机制,这里我们可以学习一下反射机制的原理及其作用。
> java反射机制可以动态地创建对象并调用其熟悉。
>
> Java 反射主要提供以下功能：
>
>   * 在运行时判断任意一个对象所属的类；
>   * 在运行时构造任意一个类的对象；
>   * 在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；
>   * 在运行时调用任意一个对象的方法
>
一个正常的反射调用流程机制:
>
>     public class test1 {
>     public static void main(String[] args) throws IllegalAccessException,
> InstantiationException, NoSuchMethodException, InvocationTargetException {
>       Class klass = methodClass.class;
>       //创建methodClass的实例
>       Object obj = klass.newInstance();
>       //获取methodClass类的add方法
>       Method method = klass.getMethod("add",int.class,int.class);
>       //调用method对应的方法 => add(1,4)
>       Object result = method.invoke(obj,1,4);
>       System.out.println(result);
>     }
>     }
>     class methodClass {
>     public final int fuck = 3;
>     public int add(int a,int b) {
>       return a+b;
>     }
>     public int sub(int a,int b) {
>       return a+b;
>     }
>     }
>  
>
> 所以说这里想调用动态生成类的方法，应该先获取对象，在获取方法，然后方法进行反射，传入参数，进行调用。
所以我们可以看下他通过反射机制获取的是什么对象？
其实不用调试也知道，肯定是我们序列化的对象`User`
这里可以看到`obj`的获取过程，获取描述然后得到实例。
通过debug我们不难看到,`readObjectMethod`其实就是我们的`User`类的重写的`readObject`方法，所以说这个调用在序列化过程中会自动通过反射机制来触发。
那么我们可以看看这个方法是怎么`getMethod`得来的
当我跟到这里的时候发现这里的判断主要是判断`readObjectMethod`这个类`ObjectStreamClass`的属性是否为空，然后发现这里已经找到我们的方法了，所以这个`getMethod`的过程应该在前面,我们可以重新debug一下。
.assets/image-20200408135619513.png)
最终我们可以看到这个值,是在构造函数的时候就已经被设置好了,并且对方法做出了要求
>   * 返回类型为void(null)
>   * 修饰符不能包含static
>   * 修饰符必须包含private
>
这个class文件的路径是: 在`rt.jar->java.io->ObejectSteamClass`
至于还有没有其他自动触发的方法，我们可以再看看else分支
`readObjectNoData`
这个方法也是可以触发。
至于怎么触发建议可以参考下:
[Serialization中的readObjectNoData](https://blog.csdn.net/fjh658/article/details/6655403)
PS.
或者尝试去继续跟一下源码,这个笔者后期继续深入的时候，再与各位细究其中的原理，目前我们还是先熟悉反序列化漏洞的基础知识，并学会变化利用该漏洞，后续再尝试分析原理，然后去挖掘反序列化链条,这就是一些后话啦，入门系列我们还是以萌新为基础。
(Eclipse 调试相对于 IDEA来说简直就是弟弟,后面的教程笔者就用IDEA来进行debug调试)
## 0x5 漏洞黑盒挖掘入门思路
这里我觉得可以从Weblogic的第一个漏洞开始说起。(Ps.下面作者代指漏洞作者)
1.先grep搜索一下Weblogic有没有用到漏洞库
    root@us-l-breens:/opt/OracleHome# grep -R InvokerTransformer .
    Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar matches
这里当时作者提到了一个小坑点，就是weblogic重命名了`commons-collections.jar`这个jar库,所以我们搜索的时候最好根据关键的函数名来搜索。
2.寻找可以发送序列化字符的entry point(入口点)
当时作者采用的黑盒测试的方法，通过用`wireShark`监听Weblogic的数据流，