951.3ms
49.3MB/s
Overhead
+0.6ms (.5%)
+1.1ms (3.5%)
+53.8ms (6%)
–1.8MB/s (3.5%)
TABLE III.
NETWORK LATENCY FOR HTTP CONNECTION.
For example, in the case of an e-mail application, if the system
has no connectivity to the Internet, the mail will be queued on
the scheduler, and later this scheduler will generate network
trafﬁc when connectivity is re-established. Our experiments
show that Gyrus can handle this situation correctly and allow
the delayed email as a user would expect.
C. Performance
In this section, we present our results of measuring the two
kinds of delay that Gyrus can cause: delay in processing user
input through the keyboard/mouse, and delay in sending out
network trafﬁc. All the experiments presented in this section
are performed on a commodity laptop: a Lenovo Thinkpad-
T520, equipped with a dual-core Intel Core i5 2520m and 8GB
of RAM. The dom-U runs 3 logical cores with 7GB of RAM,
while dom-0 has 1 logical core and 1GB of RAM.
1) Interaction Overhead: In the worst case, on a system
protected by Gyrus, the user will experience the following
delay for every keyboard/mouse input: ﬁrst, the Central Control
will need to query the UI monitor in dom-U to see if this event
signiﬁes the user’s intent to send out something, secondly, the
secure overlay will have to wait for the UI monitor to provide
any information about how this input changes the display. Both
of these will add to the time between the user press a key/click
to mouse to when he/she can see the effect of his/her input on
the secure overlay. To determine if this turn around time for
processing user input under Gyrus is still in acceptable range,
we performed the following study: ﬁrst, we typed a document
without generating any input that signiﬁes an intent to send
out network trafﬁc, and measured the time between the Central
Control ﬁrst observe each input to the time the secure overlay
is updated to reﬂect the input; second, we measured the same
turn around time for mouse events that result in focus change,
resize and movement of the window of a target application.
Finally, we also measured the time needed for the UI monitor
to conﬁrm that an input event signiﬁes user intent to send out
trafﬁc. The results of our experiments are presented in Table II.
To provide some context for interpreting the results, prior
research suggests that acceptable range of such turn around
time for interaction with human is 50-150ms [35]. Thus, our
experiments show that on average case, users can smoothly
interact with a system protected by Gyrus.
Cases
Single Request
Download
KVM
90.72ms
37.40MB/s
Gyrus
94.50ms
35.23MB/s
Overhead
+3.78ms (4%)
–2.17MB/s (5.8%)
TABLE IV.
NETWORK LATENCY FOR HTTPS CONNECTION (WITH
MAN-IN-THE-MIDDLE PROXY).
KVM without Gyrus) for three different cases: 1) the time to
establish an HTTP connection (and we used two test sites), 2)
the time to load a web page with dynamic content, measured
by The Chromium’s Page Benchmark extension [37], 3)
the effective bandwidth of a system, obtained by measuring
the time to download a 550MB disk image from the
Debian repository through HTTP. To measuring the overhead
introduced by our Man-In-The-Middle (MITM) proxy for
HTTPS connections, we did 2 tests: 1) download 15KB of
web-page data from a public website, and 2) download a
32MB ﬁle from a remote HTTPS server. All experiments are
repeated 10 times, and the average results are presented in
Table III & IV.
Comparing the results from a KVM Guest versus Gyrus
running on it, Gyrus only introduces around 1ms of single
response delay,
less than 6% (53.8ms) of delay for web
page loading, and less than 4% overhead on the network
bandwidth, for HTTP connection. For HTTPS, there exists
CPU time overhead from an additional connection per each
session for MITM on establishing, encrypting, and decrypting
the contents. From our experiment, it incurs 4ms of delay on
getting access to a single web-page data, and adds less than
6% of bandwidth overhead on downloading of ﬁle content.
Evaluation results for the network latency shows that Gyrus
has very little overhead, at worst 6% on both bandwidth and
loading a webpage.
VII. FUTURE WORK AND CONCLUSIONS
There are many potentially fruitful areas for future work.
is to simplify the process of supporting a new
The ﬁrst
application by automating the analysis and generation of the UI
and trafﬁc signatures. Extending Gyrus’ output monitoring to
include disk transactions would allow Gyrus to support non-
networked applications such as word processors. Integrating
with a delegated computation veriﬁer would allow Gyrus to
support a broader range of applications. In addition, Gyrus
could verify that the input to a computation veriﬁer is actually
from the user.
Another interesting future direction would be to implement
Gyrus on other platforms. The current design can be adapted
to work in a cloud computing model where the remote host
is an instance in an IaaS cloud. For platforms where it is
hard to deploy our current virtualization-based design (e.g.,
mobile devices), one could explore modifying the threat model
to only defend against malicious applications, assuming that
the underlying operating system is clean. Under this new
threat model, it may be possible to achieve “what you see
is what you send” by implementing a similar defense strategy
as a component inside the platform’s runtime framework (e.g.,
Android Dalvik).
2) Network Latency: We have also measured the network
latency caused by Gyrus (as compared to the system that runs
To conclude, in this paper we introduced the Gyrus frame-
work and showed how it can be used to distinguish between
14
human and malware generated network trafﬁc for a variety of
applications. By combining the secure monitoring of hardware
events with an analysis leveraging the accessibility interface
within dom-U, we linked human input to observed network
trafﬁc and used this information to make security decisions.
Using Gyrus, we demonstrated how to stop malicious activities
that manipulate the host machine to send malicious trafﬁc,
such as spam, social network impersonation attacks, and online
ﬁnancial services fraud. Our evaluation demonstrated that
Gyrus successfully stops modern malware, and our analysis
shows that it would be very challenging for future attacks to
defeat it. Finally, our performance analysis shows that Gyrus
is a viable option for deployment on desktop computers with
regular user interaction. Gyrus ﬁlls an important gap, enabling
security policies that consider user intent in determining the
legitimacy of network trafﬁc.
ACKNOWLEDGMENTS
The authors would like to thank to the anonymous re-
viewers, and our shepherd, Dongyan Xu, for their help and
feedback. This material is based upon work supported in part
by the National Science Foundation under Grants No. CNS-
1017265, CNS-0831300, and CNS-1149051, by the Ofﬁce
of Naval Research under Grant No. N000140911042, by the
Department of Homeland Security under contract No. N66001-
12-C-0133, and by the United States Air Force under Contract
No. FA8650-10-C-7025. Any opinions, ﬁndings, and conclu-
sions or recommendations expressed in this material are those
of the authors and do not necessarily reﬂect the views of the
National Science Foundation, the Ofﬁce of Naval Research,
the Department of Homeland Security, or the United States
Air Force.
REFERENCES
[1] Alexa Internet. Alexa - Top Sites in United States. http://www.alexa.
com/topsites/countries/US.
[2] Android Open Source Project. Dalvik Technical Information. https:
//source.android.com/tech/dalvik/index.html.
[3] Sanjeev Arora and Shmuel Safra. Probabilistic checking of proofs: a
new characterization of np. J. ACM, 45(1):70–122, January 1998.
[4] Kai-Min Chung, Yael Kalai, and Salil Vadhan. Improved delegation of
In Proceedings of
computation using fully homomorphic encryption.
the 30th annual conference on Advances in cryptology, CRYPTO’10,
pages 483–501, Berlin, Heidelberg, 2010. Springer-Verlag.
[5] Patrick Colp, Mihir Nanavati, Jun Zhu, William Aiello, George Coker,
Tim Deegan, Peter Loscocco, and Andrew Warﬁeld. Breaking up
is hard to do: security and functionality in a commodity hypervisor.
In Proceedings of the Twenty-Third ACM Symposium on Operating
Systems Principles, SOSP ’11, pages 189–202, New York, NY, USA,
2011. ACM.
[6] Weidong Cui, Randy H. Katz, and Wai tian Tan. Design and Implemen-
tation of an Extrusion-based Break-In Detector for Personal Computers.
In Proc. of the Annual Computer Security Applications Conference,
2005.
J. Elson and A. Cerpa. RFC 3507 - Internet Content Adaptation Protocol
(ICAP). http://www.ietf.org/rfc/rfc3507.txt.
[7]
[8] Tal Garﬁnkel, Ben Pfaff, Jim Chow, Mendel Rosenblum, and Dan
Boneh. Terra: A Virtual Machine-Based Platform for Trusted Com-
puting.
In Proceedings of ACM Symposium on Operating Systems
Principles (SOSP), 2003.
[9] Tal Garﬁnkel and Mendel Rosenblum. A Virtual Machine Introspection
In Proceedings of the
Based Architecture for Intrusion Detection.
Network and Distributed Systems Security Symposium, 2003.
[10] Rosario Gennaro, Craig Gentry, and Bryan Parno. Non-interactive
veriﬁable computing: outsourcing computation to untrusted workers.
In Proceedings of the 30th annual conference on Advances in cryptol-
ogy, CRYPTO’10, pages 465–482, Berlin, Heidelberg, 2010. Springer-
Verlag.
[11] Craig Gentry. A fully homomorphic encryption scheme. PhD thesis,
Stanford University, 2009. crypto.stanford.edu/craig.
[12] GNOME DEV CENTER. ATK - Accessibility Toolkit.
developer.gnome.org/atk/2.8/.
https://
[13] S. Goldwasser, S. Micali, and C. Rackoff. The knowledge complexity of
interactive proof systems. SIAM J. Comput., 18(1):186–208, February
1989.
[14] Shaﬁ Goldwasser, Yael Tauman Kalai, and Guy N. Rothblum. Dele-
gating computation: interactive proofs for muggles. In Proceedings of
the 40th annual ACM symposium on Theory of computing, STOC ’08,
pages 113–122, New York, NY, USA, 2008. ACM.
[15] Ramakrishna Gummadi, Hari Balakrishnan, Petros Maniatis, and Sylvia
Ratnasamy. Not-a-Bot (NAB): Improving Service Availability in the
Face of Botnet Attacks. In Proceedings of the USENIX Symposium on
Networked Systems Design and Implementation (NSDI), 2009.
[16] Michael Hohmuth, Michael Peter, Hermann Hartig, and Jonathan S.
Shapiro. Reducing TCB size by using untrusted components – small
kernels versus virtual machine monitors. In Proc. of the ACM SIGOPS
European Workshop, 2004.
IMSpector. IMSpector: Instant Messenger Proxy Service. http://www.
imspector.org/wordpress/.
[17]
[18] Xuxian Jiang, Xinyuan Wang, and Dongyan Xu. Stealthy Malware De-
tection Through VMM-Based “Out-of-the-Box” Semantic View Recon-
struction. In Proc. of the ACM Conf. on Computer and Communications
Security, 2007.
[19] Ashlesha Joshi, Samuel T. King, George W. Dunlap, and Peter M.
Chen. Detecting past and present intrusions through vulnerability-
speciﬁc predicates. In Proceedings of ACM Symposium on Operating
Systems Principles (SOSP), pages 1–15, 2005.
[20] Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick,
David Cock, Philip Derrin, Dhammika Elkaduwe, Kai Engelhardt, Rafal
Kolanski, Michael Norrish, Thomas Sewell, Harvey Tuch, and Simon
Winwood. sel4: formal veriﬁcation of an os kernel. In Proceedings of
the ACM SIGOPS 22nd symposium on Operating systems principles,
SOSP ’09, pages 207–220, New York, NY, USA, 2009. ACM.
[21] Mac OSX Developer Center. NSAccessibility Protocol Reference.
https://developer.apple.com/library/mac/#documentation/Cocoa/
Reference/ApplicationKit/Protocols/NSAccessibility Protocol/
Reference/Reference.html.
[22] Stuart E. Madnick and John J. Donovan. Application and Analysis
of The Virtual Machine Approach to Information System Security and
Isolation. In Proc of the Workshop on Virtual Computer Systems, 1973.
[23] Lorenzo Martignoni, Pongsin Poosankam, Matei Zaharia, Jun Han,
Stephen McCamant, Dawn Song, Vern Paxson, Adrian Perrig, Scott
Shenker, and Ion Stoica. Cloud terminal: secure access to sensitive ap-
plications from untrusted systems. In Proceedings of the 2012 USENIX
conference on Annual Technical Conference, USENIX ATC’12, pages
14–14, Berkeley, CA, USA, 2012. USENIX Association.
Jonathan M. McCune, Yanlin Li, Ning Qu, Zongwei Zhou, Anupam
Datta, Virgil Gligor, and Adrian Perrig.
tcb
reduction and attestation. In Proceedings of the 2010 IEEE Symposium
on Security and Privacy, SP ’10, pages 143–158, Washington, DC,
USA, 2010. IEEE Computer Society.
Trustvisor: Efﬁcient
[24]
[25] Microsoft Developer Network.
Inspect.
http://msdn.microsoft.com/
en-us/library/windows/desktop/dd318521(v=vs.85).aspx.
[26] Microsoft Developer Network. UI Automation Overview. http://msdn.
microsoft.com/en-us/library/ms747327.aspx.
[27] Bryan Parno, Jon Howell, Craig Gentry, and Mariana Raykova. Pinoc-
chio: Nearly practical veriﬁable computation. In IEEE Symposium on
Security and Privacy, pages 238–252, 2013.
[28] Pew Internet.
What
Internet Users Do On A Typical Day.
http://www.pewinternet.org/Static-Pages/Trend-Data-(Adults)
/Online-Activities-Daily.aspx.
[29] Pew Internet. What Internet Users Do Online. http://www.pewinternet.
org/Static-Pages/Trend-Data-(Adults)/Online-Activites-Total.aspx.
15
ronments, VEE ’09, pages 121–130, New York, NY, USA, 2009. ACM.
[35] Ben Shneiderman. Designing the User Interface: Strategies for Effective
Human-Computer Interaction. Addison-Wesley, fourth edition, 2005.
[36] Steve Slaven. xautomation. http://hoopajoo.net/projects/xautomation.
Chromium
Projects.
Benchmarking
Extension.
html.
[37] The
http://www.chromium.org/developers/design-documents/extensions/
how-the-extension-system-works/chrome-benchmarking-extension.
[38] Stef Walter. Proxsmtp: An smtp ﬁlter. http://memberwebs.com/stef/
software/proxsmtp/.
[39] Duane Wessels, Henrik Nordstr¨om, Alex Rousskov, Adrian Chadd,
Robert Collins, Guido Serassio, Steven Wilton, and Chemolli Francesco.
Squid: Optimising web delivery. http://www.squid-cache.org/.
[40] Chiachih Wu, Zhi Wang, and Xuxian Jiang. Taming Hosted Hypervisors
with (Mostly) Deprivileged Execution. In Proceedings of the Network
and Distributed System Security Symposium (NDSS), San Diego, CA,
February 2013.
[30] Franziska Roesner, Tadayoshi Kohno, Alexander Moshchuk, Bryan
Parno, Helen J. Wang, and Crispin Cowan. User-Driven Access Control:
Rethinking Permission Granting in Modern Operating Systems.
In
Proceedings of the IEEE Symposium on Security and Privacy, 2012.
[31] Srinath Setty, Richard McPherson, Andrew J. Blumberg, and Michael
Walﬁsh. Making argument systems for outsourced computation practical
(sometimes).
In Proceedings of the Network and Distributed System
Security Symposium (NDSS), 2012.
[32] Srinath Setty, Victor Vu, Nikhil Panpalia, Benjamin Braun, Andrew J.
Blumberg, and Michael Walﬁsh. Taking proof-based veriﬁed computa-
tion a few steps closer to practicality. In In USENIX Security, 2012.
[33] Dave Shackleford. Blind as a Bat? Supporting Packet Decryption
http://www.sans.org/reading room/analysts
for Security Scanning.
program/vss-BlindasaBat.pdf.
[34] Takahiro Shinagawa, Hideki Eiraku, Kouichi Tanimoto, Kazumasa
Omote, Shoichi Hasegawa, Takashi Horie, Manabu Hirano, Kenichi
Kourai, Yoshihiro Oyama, Eiji Kawai, Kenji Kono, Shigeru Chiba,
Yasushi Shinjo, and Kazuhiko Kato. Bitvisor: a thin hypervisor for
enforcing i/o device security.
the 2009 ACM
SIGPLAN/SIGOPS international conference on Virtual execution envi-
In Proceedings of
16