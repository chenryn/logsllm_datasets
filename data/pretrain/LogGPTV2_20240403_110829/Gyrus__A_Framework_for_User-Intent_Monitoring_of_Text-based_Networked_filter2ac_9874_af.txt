### Performance Metrics
- **Latency:** 951.3 ms
- **Bandwidth:** 49.3 MB/s

### Overhead Analysis
- **Latency Overhead:**
  - +0.6 ms (0.5%)
  - +1.1 ms (3.5%)
  - +53.8 ms (6%)
- **Bandwidth Overhead:**
  - -1.8 MB/s (3.5%)

### Table III: Network Latency for HTTP Connection
| Case         | Single Request (ms) | Download Speed (MB/s) |
|--------------|---------------------|-----------------------|
| KVM          | 90.72               | 37.40                 |
| Gyrus        | 94.50               | 35.23                 |
| Overhead     | +3.78 (4%)          | -2.17 (5.8%)          |

### Example: E-Mail Application
In the case of an e-mail application, if the system has no internet connectivity, the mail will be queued by the scheduler. Once connectivity is re-established, the scheduler will generate network traffic to send the queued emails. Our experiments show that Gyrus can handle this situation correctly and allow the delayed email to be sent as expected.

### C. Performance Evaluation
This section presents the results of measuring two types of delays introduced by Gyrus:
1. **User Input Processing Delay:** Delays in processing keyboard and mouse inputs.
2. **Network Traffic Delay:** Delays in sending out network traffic.

**Experimental Setup:**
- **Hardware:** Lenovo Thinkpad T520 with a dual-core Intel Core i5 2520m and 8 GB of RAM.
- **Virtualization Configuration:**
  - **dom-U:** 3 logical cores with 7 GB of RAM.
  - **dom-0:** 1 logical core with 1 GB of RAM.

#### 1. Interaction Overhead
In the worst case, on a system protected by Gyrus, the user will experience the following delays for every keyboard/mouse input:
- The Central Control queries the UI monitor in dom-U to check if the event signifies the user's intent to send something.
- The secure overlay waits for the UI monitor to provide information about how the input changes the display.

To determine if these turnaround times are within acceptable limits, we performed the following study:
- **Keyboard Input:** Typed a document without generating any input that signifies an intent to send network traffic. Measured the time from when the Central Control first observes each input to when the secure overlay updates to reflect the input.
- **Mouse Events:** Measured the turnaround time for mouse events that result in focus change, resize, and movement of the window of a target application.
- **UI Monitor Confirmation:** Measured the time needed for the UI monitor to confirm that an input event signifies the user's intent to send traffic.

**Results:**
- **Table II:** (Refer to Table II for detailed results)
- **Acceptable Range:** Prior research suggests that the acceptable range for such turnaround times is 50-150 ms [35]. Our experiments show that, on average, users can smoothly interact with a system protected by Gyrus.

#### 2. Network Latency
We measured the network latency caused by Gyrus compared to a system running KVM without Gyrus for three different cases:
- **HTTP Connection Establishment:** Time to establish an HTTP connection using two test sites.
- **Web Page Load Time:** Time to load a web page with dynamic content, measured using the Chromium Page Benchmark extension [37].
- **Effective Bandwidth:** Time to download a 550 MB disk image from the Debian repository through HTTP.

**HTTPS Connection Overhead:**
- **Test 1:** Downloaded 15 KB of web-page data from a public website.
- **Test 2:** Downloaded a 32 MB file from a remote HTTPS server.
- **Repetition:** All experiments were repeated 10 times, and the average results are presented in Tables III and IV.

**Comparison:**
- **KVM vs. Gyrus:**
  - **Single Response Delay:** Gyrus introduces around 1 ms of single response delay.
  - **Web Page Loading Delay:** Less than 6% (53.8 ms) delay for web page loading.
  - **Bandwidth Overhead:** Less than 4% overhead on network bandwidth for HTTP connections.
  - **HTTPS Overhead:** Additional CPU time overhead from the Man-In-The-Middle (MITM) proxy for establishing, encrypting, and decrypting contents. This incurs 4 ms of delay for accessing a single web-page data and adds less than 6% of bandwidth overhead for downloading file content.

### VII. Future Work and Conclusions
**Future Work:**
- **Simplification:** Automate the process of supporting new applications by analyzing and generating UI and traffic signatures.
- **Disk Transactions:** Extend Gyrus' output monitoring to include disk transactions, enabling support for non-networked applications like word processors.
- **Delegated Computation Verifier:** Integrate with a delegated computation verifier to support a broader range of applications and verify that the input to the verifier is actually from the user.
- **Platform Adaptation:** Implement Gyrus on other platforms, including cloud computing models and mobile devices, by adapting the threat model to defend against malicious applications while assuming the underlying OS is clean.

**Conclusions:**
- **Gyrus Framework:** We introduced the Gyrus framework, which distinguishes between human and malware-generated network traffic for various applications.
- **Security Decisions:** By combining secure monitoring of hardware events with analysis leveraging the accessibility interface within dom-U, Gyrus links human input to observed network traffic and uses this information to make security decisions.
- **Malware Prevention:** Gyrus successfully stops malicious activities such as spam, social network impersonation attacks, and online financial services fraud.
- **Performance:** Our evaluation shows that Gyrus is a viable option for deployment on desktop computers with regular user interaction, filling an important gap in enabling security policies that consider user intent in determining the legitimacy of network traffic.

### Acknowledgments
The authors would like to thank the anonymous reviewers and our shepherd, Dongyan Xu, for their help and feedback. This work was supported in part by the National Science Foundation, the Office of Naval Research, the Department of Homeland Security, and the United States Air Force.

### References
[References listed here as per the original text]

---

This revised version aims to improve clarity, coherence, and professionalism by structuring the content more logically, providing clear headings, and ensuring that the text is easy to follow.