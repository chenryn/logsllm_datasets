因为主要目的是控制方法，并通过 `newInstance()` 触发恶意代码，所以对于 `接口` 和 `字段` 都可以不需要，直接设置为 `0` 即可：
  * interfaces_count = 0x0000
  * fields_count = 0x0000
### method_count
经测试发现 `static{}` 方法块(``)执行必须要有合法的构造函数 `` 存在，所以直接通过 ``
触发恶意代码即可，除此之外还需要借助一个方法的 `attribute` 部分进行一些脏字符的吞噬(后续解释)，所以类中至少需要 2
个方法，经测试发现：在字节码层面，非抽象类可以不实现抽象父类的抽象方法，所以可以不实现抽象父类 `AbstractTranslet` 的
`transform` 方法，设置 `method_count = 0x0002` 即可
### methods[0]
首先看到 method_info 结构：
    method_info {
        u2             access_flags;                 # 方法的访问标志
        u2             name_index;                   # 方法名索引
        u2             descriptor_index;             # 方法的描述符索引
        u2             attributes_count;             # 方法的属性计数器
        attribute_info attributes[attributes_count]; # 方法的属性集合
    }
根据前面的构造可以看到 `methods[0].access_flags.x1 = 0x06`，根据访问标识表可知当前方法为 `抽象(0x06 & 0x04
!= 0)` 方法，无法包含方法体，所以这也是至少需要存在两个方法的原因，但同时也发现一个问题： **在字节码层面，抽象方法是可以存在于非抽象类中的**
  * `methods[0].access_flags.x2 = 0x01`：因为该方法不会被使用，所以直接给个 ACC_PUBLIC 属性即可
  * `methods[0].name_index(Utf8)`：选择指向了父类抽象方法名 `transferOutputSettings`，实际指向任何合法 `Utf8` 常量均可
  * `methods[0].descriptor_index(Utf8)`：选择指向了 `transferOutputSettings` 方法描述符，实际指向任何合法 `Utf8` 方法描述符均可
`methods[0].attributes_count` 表示当前方法体中 `attribute` 的数量，每个 `attribute`
都有着如下通用格式，根据 `attribute_name_index` 来决定使用的是哪种属性格式(如下表)
    attribute_info {
        u2 attribute_name_index;     # 属性名索引
        u4 attribute_length;         # 属性个数
        u1 info[attribute_length];   # 属性集合
    }
这里主要关注 `Code` 属性，其中存储着方法块中的字节码指令
    Code_attribute {
        u2 attribute_name_index;                     # 属性名索引
        u4 attribute_length;                         # 属性长度
        u2 max_stack;                                # 操作数栈深度的最大值
        u2 max_locals;                               # 局部变量表所需的存储空间
        u4 code_length;                              # 字节码指令的长度
        u1 code[code_length];                        # 存储字节码指令
        u2 exception_table_length;                   # 异常表长度
        {   u2 start_pc;
            u2 end_pc;
            u2 handler_pc;
            u2 catch_type;
        } exception_table[exception_table_length];   # 异常表
        u2 attributes_count;                         # 属性集合计数器
        attribute_info attributes[attributes_count]; # 属性集合
    }
以如下代码为例查看相应的 Code 属性结构
    package org.example;
    public class TestMain {
        public TestMain(){
            try{
                System.out.println("test");
            }catch (Exception e){
            }
        }
    }
可以看到构造函数 `` 中 `attributes_count = 1` 说明只包含一个属性，`attribute_nam_index`
指向常量池 `#10(Utf8) Code`，表示当前为 `Code` 属性，`code_length` 表示字节码指令长度为 `17`，`code`
部分则存储了具体的字节码指令
这里需要注意的是： **如果 attribute_name_index 没有指向合法的属性名，将使用通用格式来进行数据解析** ，因此可以利用这个特性来吞噬
`下一个 double 常量的 tag 标识`，因此这里设定
  * `methods[0].attributes_count = 0x0001`：只需一个属性即可完成吞噬目的
  * `attribute_name_index(Utf8) = 0x0206`：前面已经将 `0x0106` 设置为了 `Class` 类型，所以这里尽量指向更低位的常量池，所以选择使用 `0x0206`，同时需要注意的是 `attribute_name_index` 需指向合法的 `Utf8` 类型常量，所以还需要通过填充的方式确保指向的类型正确
  * `attribute_length = 0x00000005`：属性值设定为 5 并使用 `0xAABBCCDD` 填充满一个 `double` 常量，这样可以刚好可以吞噬掉下一个 `double` 常量的 `tag` 标识，使得下一个 `method[1].access_flags` 可以直接通过 `double` 来进行控制
### methods[1]
接下来看到第二个方法 `methods[1]`，首部这 8 个字节就可直接通过一个 `double` 数值类型进行控制，这里将构造所需的构造函数方法 ``：
  * `access_flags = 0x0001`：需要给与 `PUBLIC` 属性才能通过 `newInstance()` 实例化
  * `name_index`：需要指向 `的 `Utf8` 常量池下标，这里通过` 代码提前添加 `` 常量，否则只有编译到构造函数方法时才会添加该常量
  * `descriptor_index`：需指向 `()V` 的 `Utf8` 常量池下标
  * `attributes_count = 0x0003`：这里将使用 3 个`attribute`构造出合法的方法块：  
attributes[0]：用于吞噬 `double` 常量的 `tag`  
attributes[1]：用于构造 `Code` 属性块  
attributes[2]：用于吞噬后续垃圾字符
### methods[1].attributes[0]
可以看到 `methods[1].attributes[0].attribute_name_index.x1 = 0x06`，因为
`attribute_name_index` 是指向常量池的索引，所以需要常量池需要 `> 1536(0x0600)`，这就是前面
`access_flags.x2 >= 0x06` 的原因
使用同样的方式，通过控制 `attributes[0].attribute_length` 吞噬掉下一个 `double` 常量的 `tag`
这样就可以完全控制 `attributes[1].attribute_name_index`，使其指向 `Utf8 Code` 常量，后续数据将以
`Code_attribute` 结构进行解析
  * `attribute_length` 和 `code_length` 都得在 `code[]` 部分内容确定后进行计算
  * `max_stack = 0x00FF`：操作数栈深度的最大值，数值计算，方法调用等都需要涉及，稍微设置大一些即可
  * `max_locals = 0x0600`：局部变量表所需的存储空间，主要用于存放方法中的局部变量，因为不会涉及使用大量的局部变量，所以`0x0600` 完全够用了
  * `exception_table_length = 0x0000`：异常表长度，经测试发现， **在字节码层面，java.lang.Runtime.exec() 方法调用实际可以不进行异常捕获** ，所以这里也将其设置为 0
  * `attributes_count = 0x0000`：`Code` 属性中的内部属性，用于存储如 `LineNumberTable` 信息，因为不涉及所以将其设置为 0 即可
这里提前看到 `methods[1].attributes[2].attribute_name_index` 字段，因为 `attributes[2]`
的作用也是用于吞噬后续的垃圾字符，所以可以和 `methods[0].attributes[0].attribute_name_index` 一样设置为
`0x0206`，所以 **`code` 尾部需要有 3 个字节是位于 `double` 常量首部的**
### methods[1].code
接着看到最重要的字节码指令构造部分，可以通过 [List of Java bytecode
instructions](https://en.wikipedia.org/wiki/List_of_Java_bytecode_instructions)
获取相关的 Opcode
并非需要每个字节挨个自行进行构造，可以直接编写一个恶意方法，然后提取其中 code 字节码指令部分即可，编写如下代码并获取其字节码指令：
    package org.example;
    import org.apache.xalan.xsltc.DOM;
    import org.apache.xalan.xsltc.TransletException;
    import org.apache.xalan.xsltc.runtime.AbstractTranslet;
    import org.apache.xml.dtm.DTMAxisIterator;
    import org.apache.xml.serializer.SerializationHandler;
    public class Evil extends AbstractTranslet {
        public Evil() {
            try{
                Runtime runtime = Runtime.getRuntime();
                runtime.exec("open -a calculator");
            }catch (Exception e){
            }
        }
        @Override
        public void transform(DOM dom, SerializationHandler[] serializationHandlers) throws TransletException {
        }
        @Override
        public void transform(DOM dom, DTMAxisIterator dtmAxisIterator, SerializationHandler serializationHandler) throws TransletException {
        }
    }
根据上面的字节码指令即可构造出如下代码结构，其中有几点需要注意：
  * 空操作可以使用 `nop(0x00)` 指令
  * 对于 `tag = 6` 所对应的指令 `iconst_6` 需要配对使用 `istore_1` 指令
  * 不使用 `istore_0` 的原因在于， **局部变量表 0 位置存储着`this` 变量引用**
  * 使用 `ldc_w` 替换 `ldc`，可以扩大常量池加载的范围
  * 因为可以不涉及异常表，所以 `goto` 指令可以去除
  * 根据前面的说明，末尾的 `double` 常量需要占用首部 3 个字节
对于 `Methodref` 方法引用类型，可以使用如下方法调用的方式进行添加
但是这里唯一存在问题的是：如何添加 `AbstractTranslet.` 方法引用，这里需要看到
`org.apache.xalan.xsltc.compiler.Stylesheet#translate()` 方法，构造函数总是最后才进行编译，添加的
`AbstractTranslet.` 方法引用总是位于常量池末尾，所以这将导致截断后的常量池中很难包含 `MethodRef:
AbstractTranslet.` 方法引用
然而构造函数 `` 中必须要调用 super() 或 this() 方法，否则会产生如下错误：
通过邮件咨询漏洞作者如何解决这个问题，漏洞作者给出了如下方案：
> JVM 会检查构造函数中 `return` 操作之前是否有调用 `super()` 方法，所以可以通过 `return`
> 前嵌入一个死循环即可解决这个问题
然而在看到邮件之前，找到了另一种解决方案，通过如下代码可提前引入 `AbstractTranslet.` 方法引用：
可通过如下代码进行验证，可以看到 `AbstractTranslet.` 方法引用已经处于一个比较低位的常量池位置
        -->
但是对于 `org.apache.xalan.xsltc.runtime.AbstractTranslet` 类来说，由于是 `抽象类`，按理说不能调用
`new()` 方法进行实例化操作，所以在获取 `AbstractTranslet.` 方法引用这里卡了很久
但是从 `org.apache.xalan.xsltc.compiler.FunctionCall#findConstructors()` 中可以看到，通过
`反射` 的方式获取了构造方法
并且直到添加方法引用之前(`org.apache.xalan.xsltc.compiler.FunctionCall#translate`) 都不会检查
`XSLT 样式表中传入的类` 是否为 `抽象类`，因此通过这种方式解决了 `AbstractTranslet.` 方法引用加载的问题
### methods[1].attributes[2]
同样通过控制 `attribute_length` 长度吞噬掉剩余的垃圾字符，由于需要保留 `ClassFile` 尾部的 `SourceFile`
属性，所以长度设置为：`从 0x12345678 -> 保留尾部 10 个字节(attributes_count +
attributes)`，至此完整的利用就构造好了
    ClassFile {
        ...
        attribute_info attributes[attributes_count];         // 属性表
    }
## 0x07 CheckList
这里总结一下需要检查的一些项：
  1. `#262 (0x0106)` 需要指向 `Class` 引用 `com.sun.org.apache.xalan.internal.lib.ExsltStrings`
  2. 确认 `method[0].attribute_name_index` 指向正确的 `Utf8` 引用
  3. 确认 `access_flags` 位于常量池 `#1794` 项
  4. 确认 `常量池大小` 为 `0x0702` (可以 Debug `org.apache.bcel.classfile.ConstantPool#dump` 方法)
  5. 确认各个所需常量是否指向正确的常量池位置
  6. 确认 `methods[1].attributes[2].attribute_length` 是否为：从 `0x12345678` -> `保留末尾 10 个字节`
## 0x06 - 完整利用
  * gist：https://gist.github.com/thanatoskira/07dd6124f7d8197b48bc9e2ce900937f
  * 注意事项:  
由于文件名也会添加至常量池，为避免影响对其他常量位置造成变动，长度需保证一致(6)，`select -> abcdef`  
运行前最好删除已生成的 `*.class` 文件(文件内容发生变动则不用)
## 参考链接
  * [https://bugs.chromium.org/p/project-zero/issues/detail?id=2290&continueFlag=5f0a104405cabc4e1e6027013da73bfc](https://bugs.chromium.org/p/project-zero/issues/detail?id=2290&continueFlag=5f0a104405cabc4e1e6027013da73bfc)
  * 
  * 
  * 
  * 
* * *