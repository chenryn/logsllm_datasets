[y⊥
1 , . . . , y⊥
n ] and check whether
vy⊥
k = 1G1
k
(5)
n(cid:89)
k=1
where 1G1 is the identity element of G1.
2) Check whether e(pkj, vj) = e(cj, g1) for all j.
3) Output 1 if both checks pass, otherwise output 0.
j
During the reconstruction step, each node j decrypts
its share cj to compute ˜sj ← c1/skj
, and multi-casts ˜sj to
all nodes. A node i upon receiving ˜sj from node j checks
if e(h0, vj) = e(˜sj, g1). Let H be the set of indices of
t + 1 valid decrypted shares ˜sj.
PVSS.Reconstruct(h0, h1,{˜sk}k∈H ) → e(hs
1) Use Lagrange interpolation to compute
0, h1) :
(˜sk)µk =
hµk·p(k)
0
= hp(0)
0
(6)
(cid:89)
where µk =(cid:81)
k∈H
2) Output e(hs
j(cid:54)=k
0, h1).
(cid:89)
k∈H
Figure 2: Description of ΠDBDH.
where (cid:104)·,·(cid:105) is the inner product operation. The PVSS.Verify
step uses Lemma 1.
In Appendix A, we will deﬁne the required properties for
PVSS such as correctness, veriﬁability, and IND1-Secrecy. We
then prove that assuming DBDH hardness, ΠDBDH guarantees
the desired properties.
V. SPURT DESIGN AND OPTIMIZATIONS
In this section, we present the detailed design of SPURT.
SPURT proceeds in epochs and each epoch has four phases.
Each epoch has a designated leader chosen in any deterministic
manner. For concreteness, we assume leaders are chosen in a
round-robin order, i.e., the leader of epoch r, denoted Lr, is
node i = r mod n. We next describe each phase in detail.
Refer to Table II for notations.
A. Commitment Phase
For any given epoch r, let Lr be its leader. Each node i
samples a uniformly random secret si ← Zq and computes
PVSS tuples using the PVSS.Share primitive described in §IV:
vi, ci ← PVSS.Share(si, g1, ski,{pk}j,j=1,2,...,n)
(7)
where vi = {vi,1, . . . , vi,n} and ci = {ci,1, . . . , ci,n}. Node i
also computes πi = {πi,1, . . . , πi,n} where
πi,j = dleq.Prove(g1, vj, pkj, cj, si,j)
where si,j is the share of secret si for node j. Node i then
sends (vi, ci, πi) to Lr.
Note that we use the DDH-based dleq proof here due to its
knowledge soundness property. This ensures that the secrets
chosen by the adversary are independent of the secrets chosen
by the honest nodes.
B. Aggregation Phase
Lr, upon receiving a tuple (vi, ci, πi), ﬁrst validates vi
and ci using PVSS.Verify(g1, vi, ci,{pkj}j=1,2,...,n). Then,
for each j, Lr checks πi,j using dleq.Verify. We remark
that since the leader anyway checks the equality of discrete
logarithm, the leader need not perform step 2) of PVSS.Verify
as this check is redundant with dleq.Verify.
Upon receiving t + 1 such valid tuples, Lr aggregates them
as follows. Let I ⊆ [n] be the set of nodes that send valid
messages during the commitment phase. Lr aggregates the
commitments into ˆv = (ˆv1, ˆv2, . . . , ˆvn), a commitment to the
i∈I pi(·). Lr also aggregates
the encrypted shares into ˆc = (ˆc1, ˆc2, . . . , ˆcn), which would
be encrypted shares for the aggregated secret ˆp(0). Concretely,
for any (cid:96), Lr computes
aggregated polynomial ˆp(·) =(cid:80)
(cid:89)
i∈I
(cid:89)
i∈I
Figure 4 illustrates this step using I = {1, 2, . . . , t + 1} as
an example. Observe that the t + 1 messages received and
validated by Lr can be represented as three matrices. Here on,
we refer to these matrices as the commitment matrix {vi,j},
the ciphertext matrix {ci,j}, and the proof matrix {πi,j}. Let
¯cj, ¯vj and ¯πj be the jth column of the ciphertext, commit-
ment, and proof matrix, respectively. Stated differently, ¯cj is
the set of encryptions sent by nodes in I that are encrypted
under the public key of node j. ¯vj and ¯πj are jth coordinates
of commitments and dleq proofs sent by nodes in I, respec-
tively. Without loss of generality, let I = {1, 2, . . . , t+1}, then
j
j−k are Lagrange coefﬁcients.
ˆv(cid:96) =
vi,(cid:96),
ˆc(cid:96) =
ci,(cid:96)
(8)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
62507
Figure 3: Messages sent during each phase of the SPURT. We describe contents of the
messages i.e., the notations over the arrows in §V.
Figure 4: Aggregation phase at the leader.
¯cj = {c1,j, c2,j, . . . , ct+1,j}, ¯vj = {v1,j, v2,j, . . . , vt+1,j},
and ¯πj = {π1,j, π2,j, . . . , πt+1,j}. As shown in Figure 4, the
aggregation result ˆcj is the product of all elements in ¯cj and
ˆvj is the product of all elements in ¯vj.
Next, Lr computes a cryptographic digest of I(cid:107)ˆv(cid:107)ˆc where
(cid:107) denotes concatenation, i.e., digest = Hash(I(cid:107)ˆv(cid:107)ˆc). As
illustrated in Figure 3, in the agreement phase, only the digest
is sent via SMR. I, ˆv, ˆc themselves and the original PVSS
tuples are sent privately to corresponding nodes.
C. Agreement Phase
Let ht be the height in SMR chosen by Lr. Then, to each
node j, Lr sends (digest, ˆv, ˆc, I, ¯vj, ¯cj, ¯πj, ht) and proposes
digest using the SMR protocol for height ht. Observe that in
the above message, only ¯vj, ¯cj, and ¯πj are recipient speciﬁc
and everything else is common to all nodes. Essentially, the
tuple Lr sends to each node is the full message corresponding
to the digest digest for epoch r and height ht.
Upon receiving (digest, ˆv, ˆc, I, ¯vj, ¯cj, ¯πj, ht) from Lr,
node j validates them by checking:
1) The proposal is safe according to SMR,
2) digest is the cryptographic digest of I(cid:107)ˆv(cid:107)ˆc,
3) Let y⊥ = {y⊥
n } be a randomly chosen code
2 , . . . , y⊥
1 , y⊥
word from the dual code C⊥, then check
ˆvy⊥
k = 1G2.
k
(9)
n(cid:89)
k=1
This check ensures that ˆv is a commitment to a polyno-
mial of degree at most t.
4) Every tuple (vi,j, ci,j, πi,j) ∈ (¯vj, ¯cj, ¯πj) is a valid dleq
5) ˆcj =(cid:81)
proof according to §III-D.
i∈I ci,j and ˆvj =(cid:81)
i∈I vi,j.
If all of
the above checks pass, node j multi-casts
(cid:104)PREPARE, digest, r, ht(cid:105) to all other nodes. If any of the
above checks fails or if j does not receive the required
private information from Lr, j does not send the PREPARE
message in the SMR protocol (cf. §III-E). An honest node,
upon receiving 2t + 1 (cid:104)PREPARE, digest, r, ht(cid:105) messages
multi-casts (cid:104)PRECOMMIT, digest, r, ht(cid:105), and upon receiv-
ing 2t + 1 (cid:104)PRECOMMIT, digest, r, ht(cid:105) messages multi-casts
(cid:104)COMMIT, digest, r, ht(cid:105). Unlike existing SMR, however, upon
receiving 2t + 1 (cid:104)COMMIT, digest, r, ht(cid:105), a node does not
yet decide. Instead, it does the following to ensure nearly
simultaneous decision.
Nearly simultaneous decision. Each node, upon receiv-
ing 2t + 1 (cid:104)COMMIT, digest, r, ht(cid:105) messages multi-casts
(cid:104)FINALIZE, digest, r, ht(cid:105). An honest node also multi-casts
a (cid:104)FINALIZE, digest, r, ht(cid:105) message upon receiving t + 1
(cid:104)FINALIZE, digest, r, ht(cid:105) messages – this step is the Bracha
ampliﬁcation [19] and is crucial to ensure nearly simultaneous
decision (see Lemma 3). Upon receiving 2t + 1 matching
FINALIZE messages, an honest node decides digest.
D. Reconstruction Phase
Whenever an honest node decides on digest,
it starts
the reconstruction phase for that epoch and multi-casts its
decrypted share to all other nodes. In particular, node j sends
(cid:104)RECONSTRUCT, ˜sj, r, ht(cid:105) to all other nodes where ˜sj is its
decrypted share, computed as
(cid:80)
i∈I si,j
˜sj = ˆc
1
skj
j = h
0
(10)
Due to the nearly simultaneous decision property of our
SMR, all honest nodes will decide and start the reconstruction
phase within two message delays.
Each node who receives the correct v, c, I during the
agreement phase, upon receiving ˜sj, validates it using the
pairing-based discrete logarithm equality check in (cf. §III-D)
by checking e(˜sj, g1) = e(h0, ˆvj). We use the pairing-based
discrete logarithm equality proof here because it does not
require the prover to know the witness. This is crucial because,
during the reconstruction phase, each node j can only recover
h
0
i∈I si,j
Let T be the set of nodes from which node i receives valid
˜sj tuples. Upon receiving t + 1 such valid tuples, i.e., when
and not(cid:80)
i∈I si,j.
(cid:80)
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
72508
NearlySimultaneousSMRAgreementPhaseReconstruction PhaseCommitmentPhaseAggregationPhaseOutput LeaderNodeNon-Leader NodeMulti-cast toall NodesPrivate ChannelHashOutput Output Output 0, h1). Recall from §V-A, s = ˆp(0) = (cid:80)
|T| ≥ t + 1, node i outputs the beacon for height ht as
i∈I si. Honest
e(hs
nodes construct hs
0 using the Lagrange interpolation:
(˜sk)µk =
hµk· ˆp(k)
0
= h ˆp(0)
0
(11)
(cid:89)
k∈T
(cid:89)
where µk = (cid:81)
k∈T
j(cid:54)=k
j
j−k are the Lagrange coefﬁcients. Then,
the beacon output for height ht is given as:
oht = e(h ˆp(0)
0
, h1) = e(h0, h1) ˆp(0)
(12)
Each honest node upon reconstructing the beacon output
oht multi-casts (cid:104)BEACON, oht, r, ht(cid:105) to all other nodes. This
last step ensures that honest nodes who did not receive the
original proposal from a malicious leader can recover the
beacon output with the help of others. In particular, upon
receiving t + 1 matching (cid:104)BEACON, oht, r, ht(cid:105) messages, a node
can safely output oht as the beacon output at height ht. This
is because at least one of these BEACON messages is sent by
an honest node and an honest node never sends a BEACON
message for an incorrect output.
E. Optimizations
Pre-aggregating data. Recall from §V-B, during the aggrega-
tion phase, the leader validates a total of O(n2) NIZK proofs.
Moreover,
the leader aggregates polynomial commitments
from t + 1 nodes. As a result, the leader performs O(n2) com-
putation while other nodes each perform O(n) computation.
For a large n, the leader will become a bottleneck.
SPURT alleviates this by having leaders pre-compute. In
particular, at any epoch r, every node sends their PVSS shares
for epoch r + τ to Lr+τ . Here, τ is a system parameter.
Since the leader selection rule in SPURT is deterministic,
Lr+τ is ﬁxed and known to all nodes in advance. Lr+τ ,
upon receiving the shares for epoch r + τ, immediately starts
aggregating them, and sends the aggregated messages and the
private messages to each node. By doing so, SPURT amortizes
the leader’s higher computation and communication workloads
across τ epochs. As a result, during epoch r + τ, the leader
has a comparable workload to non-leader nodes.
Multi-exponentiation. We further reduce the computation
cost using the multi-exponentiation technique [57]. For any
given group G, let g = [g1, g2,··· , gm] be a vector of m
elements in G, and let a = [a1, a2,··· , am] be a vector of
m scalars in Zq. Given a and g, the multi-exponentiation
technique computes more efﬁciently:
gak
k
(13)
k=1
In SPURT, nodes need to compute an expression of this
form to: (i) validate the polynomial commitments sent during
commitment phase; (ii) validate the aggregated polynomial
sent by the leader; and (iii) compute the beacon output from
reconstruction shares.
VI. ANALYSIS OF SPURT
In this section, we prove that SPURT is unpredictable, bias-
resistant, available and publicly veriﬁable. We also analyze the
computation and communication complexity of SPURT.
A. Unpredictability and Bias-Resistance
Lemma 2. If an honest node decides digest in epoch r, then
0, h1) for some a ∈ Zq at epoch
every honest node outputs e(ha
r and a = ˆp(0).
honest nodes is merely(cid:0)2t+1
Proof. If an honest node decides digest,
there must be
2t + 1 PREPARE, PRECOMMIT, COMMIT, and FINALIZE mes-
sages (cf. §V-C). t + 1 of these must come from honest nodes.
From §V-C, an honest node sends a PREPARE message only if
it receives from Lr a private message that passes the check in
equation (9). Here on, we will refer to honest nodes that sent
PREPARE messages as sender nodes.
This means, except for negligible probability, the degree of
ˆp(·) is at most t. This is because any polynomial of degree
greater than t passes the check in equation (9) with probability
only 1/q; hence, the probability that it passes the check at t+1
q , which is negligible.
By the security guarantees of dleq, every honest sender node
j holds hskj· ˆp(j)
. It can then compute the decrypted share
h ˆp(j)
. This implies that during the reconstruction phase, each
0
sender node will multi-cast valid decrypted shares and will be
able to validate the decrypted shares they receive.
0 for some a ∈ Zq
by combining t + 1 valid decrypted shares. Then, for every
for some aj ∈ Zq that i receives
decrypted share ˜sj = haj
0
during the reconstruction phase, i accepts ˜sj only if the
discrete log equality check e(˜sj, g1) = e(h0, ˆvj) is successful.
A successful equality check implies aj = ˆp(j) as
Say an honest sender i outputs ha
(cid:1) 1
qt+1 ≤ 1
t+1
0
e(h0, ˆvj) = e(h0, g1) ˆp(j) = e(h ˆp(j)
0
, g1)
(14)
Since equation (14) holds for every valid decrypted shares,
upon Lagrange interpolation in the exponent using these
decrypted shares, node i will compute h ˆp(0)
and recover the
beacon output oht = e(h ˆp(0)
Upon recovering the beacon output oht, each sender will
multi-cast (cid:104)BEACON, oht, r, ht(cid:105) to every node. Since there are
at least t + 1 of them, every node will receive at least t + 1
identical BEACON messages with oht in it. Furthermore, since
honest nodes only send BEACON messages for correct beacon
output, only oht will occur more that t times.
, h1) .
0
0
We capture unpredictability and bias-resistance of SPURT
with the Indistinguishability game below. Brieﬂy, before any
honest node starts the reconstruction phase of an epoch, the
beacon output should remain indistinguishable from a random
element from a large set. This holds even after honest nodes
decide on digest, which ﬁnalizes the beacon output for that
epoch. Note that Indistinguishability alone is not sufﬁcient for
Deﬁnition 1. We also need to show that honest nodes learn
the beacon output within a small constant delay from the time
the adversary learns the beacon output.
m(cid:89)
g(cid:48) =
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:22 UTC from IEEE Xplore.  Restrictions apply. 
82509
and sends all public information to A.
sends the identities of the corrupt nodes to C.
sends the corresponding public keys to A.
Deﬁnition 3. (Indistinguishability) SPURT guarantees Indis-
tinguishability if for any PPT adversary A corrupting at most t
parties, in each epoch of SPURT, A has a negligible advantage