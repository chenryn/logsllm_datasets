title:PRIME: private RSA infrastructure for memory-less encryption
author:Behrad Garmany and
Tilo M&quot;uller
Private RSA Infrastructure for Memory-less Encryption
PRIME:
Behrad Garmany
Horst Goertz Institute for IT-Security
Ruhr-University Bochum, Germany
PI:EMAIL
Tilo Müller
Friedrich-Alexander University
Erlangen-Nuremberg, Germany
PI:EMAIL
ABSTRACT
Cold boot attacks exploit the fact that data in RAM gradu-
ally fades away over time, rather than being lost immediately
when power is cycled oﬀ. An attacker can gain access to
all memory contents by a restart or short power-down of
the system, a so called cold boot. Consequently, sensitive
data in RAM like cryptographic keys are exposed to attack-
ers with physical access. Research in recent years found
software-based solutions to the cold boot problem in terms
of CPU-bound or memory-less encryption. To date, however,
the focus has been set on symmetric ciphers, particularly
concerning disk encryption systems. Contrary to that, the
work in hand aims to close the gap to asymmetric ciphers.
With PRIME, we present a cold boot resistant infrastructure
for private RSA operations. All private RSA parameters
reside symmetrically encrypted in RAM and are decrypted
only within CPU registers. The modular exponentiation
algorithm for RSA is implemented entirely on the CPU, such
that no sensitive state of RSA ever goes to RAM.
Categories and Subject Descriptors
E.3 [Data]: Data Encryption; D.4.6 [Software]: Operating
Systems—Security and Protection
General Terms
Security
Keywords
RSA, Cold Boot Attack, CPU-bound Encryption
1.
INTRODUCTION
Even after three decades of its existence, the RSA cryp-
tosystem is still considered to be cryptographically secure.
However, research done by Halderman et al. [14] disclosed
a serious side channel threat against all software-based en-
cryption systems, including RSA. In their renowned paper
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee. Request permissions from Permissions@acm.org.
ACSAC ’13 Dec. 9-13, 2013, New Orleans, Louisiana USA
Copyright 2013 ACM 978-1-4503-2015-3/13/12 ...$15.00.
http://dx.doi.org/10.1145/2523649.2523656
Cold Boot Attacks on Encryption Keys, Halderman et al.
showed that an attacker can exploit the remanence eﬀect
of RAM [13] by cold booting the target system and loading
a custom OS kernel that retrieves what is left in memory.
Cold booting a device can be done by pressing the reset
button or quickly cycling the power oﬀ and on; loading a
malicious OS kernel can be done by booting a USB ﬂash
drive, or alternatively by replugging RAM chips physically
into another PC. This concept can be reproduced by existing
tools, and it is its easy practical execution that causes cold
boot attacks to be a generic and serious threat.
Cold boot attacks expose sensitive key material to an
attacker only if he or she gains physical access to a machine
that is running. However, mobile devices like laptops and
smartphones are frequently lost while they are running (or
being in standby mode). Hence, mobile systems used for
signing and decrypting emails are likely to disclose RSA
private keys via RAM. Above all, stationary SSL servers can
be subjected to internal attackers, or to lawful search and
seizure, disclosing RSA keys and certiﬁcates via RAM that
concern even thousands of end-users.
1.1 Contributions
To overcome the threat of cold boot attacks against private
RSA keys, we present PRIME – a Private RSA Infrastructure
for Memory-less Encryption. Our contributions are:
• With PRIME, we give a CPU-bound or memory-less
encryption system for RSA. Memory-less encryption is
a widely known method to protect symmetric ciphers
against cold boot attacks [19, 26, 31, 27]. However, due
to the higher memory footprint of RSA as compared
to symmetric ciphers, it has not been clear yet if such
an implementation is feasible for RSA.
• Known CPU-bound encryption systems store keys of
up to 256 bits inside debug registers of modern 64-bit
CPUs. With PRIME, however, we want to support
RSA-2048 but cannot store 2048 bits persistently inside
the CPU. As a consequence, we store RSA private
keys symmetrically encrypted in RAM and decrypt
them within Intel’s AVX [17] multimedia register set
by means of AES-NI.
• Modular exponentiation of big numbers that runs en-
tirely on the microprocessor was never implemented
before. Eventually, we solved this task by an optimized
variant of Montgomery’s method [25] in assembly lan-
guage, and by holding some intermediate values of RSA
149
in RAM. Everything we hold in RAM is either provably
non-critical, or gets symmetrically encrypted.
• Memory-less encryption must be run in kernel mode
to avoid side eﬀects like context switching that move
registers into RAM. Therefore, we provide PRIME as
a patch for the Linux kernel (version 3.0 and later).
To prove the applicability of our approach, we patched
the PolarSSL library and ran a web server on top of
PolarSSL performing TLS handshakes by means of
PRIME.
• Last, we present a usability and a security analysis
of PRIME. We argue that no sensitive data of RSA
leaks into RAM by running PRIME inside a virtual
machine and observing its memory from outside. As
a drawback, PRIME performs about 10 times slower
than conventional RSA implementations. Despite this
drawback, our prototype can be used for clients and
high security servers with low or medium load.
PRIME focuses on private RSA operations. Public RSA
operations are not critical and not supported by our imple-
mentation.
1.2 Related Work and Motivation
Attacks based on the data remanence of RAM have a long
tradition, and the fact that especially keys are unsafe has
been known for years. In 1996, Anderson and Kuhn [2] were
the ﬁrst to propose attacks that exploit the remanence eﬀect.
Gutmann [13] extended those issues in 2001 and provided
a more technical insight into the eﬀect. He suggested not
to store cryptographic parameters for long time periods in
RAM. This became crucial in 2008, when Halderman et
al. [14] showed that with the right tools, the remanence eﬀect
can easily be exploited to recover encryption keys on common
PCs. Halderman et al. put a focus on breaking disk encryp-
tion by recovering symmetric keys, but they also provided
tools to recover RSA keys. In 2006, Klein demonstrated [20]
that RSA keys can be traced in memory. He wrote a plugin
for the IDA debugger which retrieves RSA keys from RAM.
Since often only partial data can be retrieved with a cold
boot attack—due to the decay of bits in memory—some
research has focused on retrieving cryptographic keys in
the presence of errors. Halderman et al. introduced an er-
ror correcting algorithm that recovers noisy AES and RSA
keys. They show that RSA keys can be reconstructed with
6% corruption of arbitrary bits of the key. Heninger and
Shachman [15] later introduced a powerful algorithm, which
can reconstruct RSA keys with even more corruption of the
key. Obviously, these ﬁndings make cold boot attacks attrac-
tive in practice. Interestingly, a rather diﬀerent approach
than using the remanence eﬀect to attack keys is achieved
with TARDIS by Rahmati et al. [30]. In TARDIS, the rema-
nence eﬀect is used to estimate periods of time which can be
used for cryptographic protocols on battery-less embedded
devices.
In the recent past, many researchers focused on software-
based solutions to protect symmetric keys of AES-based
disk encryption systems. One contribution to this ﬁeld is
the project TRESOR by M¨uller, Freiling, and Dewald [26].
TRESOR is a Linux kernel patch that holds cryptographic
keys inside debug registers of a CPU. The same authors
later introduced TreVisor [27] which goes into the hyper-
visor layer to add the functionalities of TRESOR, yielding
150
an OS-independent solution. An alternative system called
Loop Amnesia [31] by Simmons saves the key inside ma-
chine speciﬁc registers (MSRs). A rather diﬀerent approach
than storing keys in registers is the Frozen Cache project by
Pabel [19] which utilizes CPU caches as key storage. How-
ever, this approach can hardly be implemented in practice
because CPU caches are designed to act transparently, and
thus cannot be controlled well by system programmers.
We also found a related solution for the protection of
asymmetric keys. Parker and Xu [28] obfuscate the private
key of RSA in RAM and de-obfuscate it in SSE registers
of modern x86 CPUs. However, the authors also mention
that they cannot prove the security of their system as they
obfuscate the key in RAM rather than encrypting it or hold-
ing it outside RAM. An attacker who thoroughly studies the
obfuscation algorithm would likely be able to reconstruct the
key. The lack of research done on the asymmetric ﬁeld as
compared to symmetric ciphers might be due to the fact that
utilizing RSA hardware is a general trend. Trusted platform
modules (TPMs) are strong and low cost hardware options,
and SSL accelerators provide high performance as well as
key protection for high-end applications.
Nevertheless, a software-based solution like PRIME is an
interesting approach from an academic point of view, which
not only has the advantage of reduced costs but also provides
ﬂexibility in adapting, extending and improving a system
without exchanging hardware.
1.3 Outline
The remainder of this paper is organized as follows: In
Section 2, we brieﬂy give necessary background information
on the RSA cryptosystem and on AVX. In Section 3, we focus
on the design and implementation of PRIME. We describe
a variant of Montgomery’s method that we implemented
for modular exponentiation. In Section 4, we evaluate our
implementation regarding its usability and security. Finally,
in Section 5, we ﬁnish up with a discussion about limitations
and future works.
2. BACKGROUND INFORMATION
In the following we give a brief review of the RSA public-
key cryptosystem (Section 2.1) and AVX (Section 2.2).
2.1 The RSA Cryptosystem
RSA uses two exponents, e and d, where e is public and d
is private. Assume that we have two entities Alice and Bob.
Alice wants to send Bob a message over an insecure channel.
She calculates the ciphertext C = M e mod n, where n is
the product of two large prime numbers generated during
the key generation process listed in Figure 1. To retrieve
the plaintext, Bob calculates P = C d mod n. So encryption
and decryption requires modular exponentiation. Modular
exponentiation that involves the private exponent is also
called the private RSA operation.
The idea of RSA is that multiplying two primes is feasible
in polynomial time but calculating its inverse operation, i.e.,
factorization, is a hard problem. If the exponent d is known,
the ciphertext can easily be decrypted in polynomial time.
Given only the public modulus n and the public exponent
e, an adversary must be able to compute the e-th root of
C mod n in order to break the cipher, which is also known
as the RSA problem. Without knowing the factorization of
n, there is no known eﬃcient algorithm that can launch an
attack. So the function that maps x to xe mod n, which
Alice uses to encrypt messages, is a one-way function with a
trapdoor (exponent d) known only to Bob.
The security of RSA rests in large part on the idea that
the modulus is so big that it is infeasible to factor it. If an
adversary can factor the modulus n, he or she can obtain
the prime numbers p and q, and hence can calculate φ(n) =
(p − 1)(q − 1). With φ(n) and the public exponent e, the
adversary can then compute d with the extended Euclidean
algorithm [21]. So if factoring large numbers is easy, then
breaking RSA is easy. The other direction is an open problem.
Note that this speciﬁc textbook description of RSA is not
secure. RSA implementations require padding schemes to be
secure.
1. Select large prime numbers p and q with p (cid:5)= q.
2. Compute n = p · q.
3. Choose e that is relatively prime to φ(n).
4. The pair (n, e) is published as the public key.
5. Compute d = e−1 mod φ(n).
6. The private key is d.
Figure 1: RSA key generation.
2.2 Advanced Vector Extensions
Today, video games have become an integral part of many
lives of a growing community. For the continuing need of per-
formance with respect to visual processing and gaming, Intel
developed the Advanced Vector Extensions (AVX) [24]. AVX
is available since Intel’s Sandy Bridge processors, shipped in
Q1 2011. Besides gaming, these multimedia extensions can
be utilized by scientiﬁc applications and cryptography.
AVX introduces new instructions and a set of new registers.
Contrary to 32-bit and 64-bit general purpose registers, AVX
registers are 256 bits wide. There are sixteen 256-bit registers
(denoted by YMM0 to YMM15) [17], providing a storage of
16 × 256 = 4 kilobits in total. Technically, the SSE registers
(denoted by XMM0 to XMM15) were extended such that
AVX and SSE registers overlap. Hence, we cannot beneﬁt
from both register sets. Nevertheless, 4 kilobits is enough
to implement modular exponentiation of big integers solely
on the CPU. Basically, we make use of these registers as a
surrogate stack or heap, since we do not want to use RAM.
Note that AVX2, which ﬁrst became available on Intel
Haswell CPUs in Q2 2013, does not increase the register
size or number of registers further. AVX2 only extends the
AVX instructions, such that our algorithm is not expected
to beneﬁt much from this advancement.
With AVX-512 Intel doubles both the register size and
number of registers. Our approach will truly beneﬁt from
this architectural advancement. However, AVX-512 will ﬁrst
be supported by Intel with the Knights Landing processors.
To date, there is no release date given.
3. DESIGN AND IMPLEMENTATION
The idea to use memory-less encryption for cold boot re-
sistance is not new and has been successfully applied on
symmetric ciphers before, particularly for disk encryption.
TRESOR [26] is a Linux kernel patch designed to avoid RAM
entirely such that all intermediate values of AES are com-
puted within CPU registers only. We were inspired by this
solution and learned from it, mainly regarding Linux kernel
integration. For the CPU-bound encryption algorithm itself,
however, RSA considerably raises the challenge compared
to AES, due to its enormous key and block sizes. As stated
above, the current RSA standard demands a key of 2048
bits, and this is the size we support in PRIME. Doing arith-
metics with 2048-bit RSA numbers, in particular modular
exponentiation, requires a lot memory.
We compute private RSA operations without leaking any
sensitive information into RAM by means of Montgomery’s
method, as we explain in Section 3.1. To overcome side eﬀects
such as context switching, we run this algorithm inside kernel
mode, as we explain in Section 3.2. Finally, in Section 3.3,
we provide an overall view of our PRIME infrastructure.
3.1 Memory-less RSA Algorithm
In an early prototype implementation of PRIME, we man-
aged to run RSA solely on the microprocessor by using a
modiﬁed variant of the modular exponentiation algorithm
proposed by Blakely in 1983 [6]. We combined Blakely’s
method with the Chinese reminder theorem (CRT) [22] to
speed up our implementation, but after all we reached an
encryption speed that was about 1,000 times worse than that
of OpenSSL. The enormous loss in performance was mainly
owed to the lack in memory. Considering only CPU registers
as a safe storage for RSA values is not a trivial task, and
we had to introduce costly workarounds by re-computing
intermediate values.
This performance drawback forced us to think about an-
other approach. In 1985, Montgomery introduced an eﬃcient
algorithm for modular exponentiation [25]. This algorithm
turned out to be more suitable for our purpose, i.e., more
suitable as a basis for a CPU-bound encryption. With the
help of Montgomery’s method, we were able to decrease the
performance drawback of PRIME down to factor 10.
Another improvement we introduced together with Mont-
gomery’s method was to relax our security policy slightly,
meaning that we now store well-chosen intermediate values
of RSA in RAM. Note that adversaries cannot observe RAM
contents over a period of time, but that they can—due to
the nature of cold boot attacks—retrieve only static RAM
images at a certain point in time. We take advantage of this
fact carefully and store some values in RAM brieﬂy. These