moved) with a probability that, for ﬁxed χ, can be decreased
by increasing the size of F [16].
6.3 Protocol Description
Our PCR protocol is detailed in Fig. 5. Fig. 5a shows the
message ﬂow, which conforms with the protocol’s use in our
algorithm of Sec. 5, and Fig. 5b shows the procedures. In this
protocol, the target R has a public-key pair (cid:104)pk,sk(cid:105) for the
encryption scheme deﬁned in Sec. 6.2 and a cuckoo ﬁlter X.
In the context of Sec. 5, X holds the password hashes (for k
honeywords and one user-chosen password) for an account.
pcrQueryGenpk simply encrypts each element of the cuckoo
ﬁlter individually and returns this matrix Y as the PCR query.
R sends pk and Y to the monitor S in message m1.
S has an input e—which is the hash of a password entered
in a failed login attempt, in the algorithm of Sec. 5—and
invokes pcrRespGenpk(e,Y) to produce a response (cid:104)Z,Z(cid:48)(cid:105).
pcrRespGen ﬁrst generates a 2× β matrix Q with 1 at the
indices i1 and i2 in the ﬁrst and second rows, respectively
(lines s2–s4), and 0 elsewhere, and a 2× χ matrix F that con-
tains encryptions of −fp(e) (lines s5–s6). Referring to line s8,
the operation Q∗pk Y thus produces the two buckets (rows)
of Y that could include a ciphertext of fp(e) (ignoring col-
+pk F produces a matrix where
lisions in fp), and
Q∗pk Y
(cid:16)
(cid:17)
R((cid:104)pk,sk(cid:105),X)
Y ← pcrQueryGenpk(X)
S (e)
−−−−−−−−−−−−−−−−−−−−−−−→
m1.
(cid:104)pk,Y(cid:105)
(cid:104)Z,Z(cid:48)(cid:105) ← pcrRespGenpk(e,Y)
(cid:104)Z,Z(cid:48)(cid:105)
,(cid:104)Z,Z(cid:48)(cid:105))
←−−−−−−−−−−−−−−−−−−−−−−−
m2.
pcrRevealsk(e(cid:48)
return arg
e(cid:48)∈X
(a) Message ﬂow
abort if X (cid:60) (Zr)β×χ
pcrQueryGenpk(X):
r1.
r2. ∀i ∈ [β], j ∈ [χ] : (Y)i, j ← Encpk((X)i, j)
r3.
return Y
if (cid:104)i, j(cid:105) ∈ {(cid:104)1,i1(cid:105),(cid:104)2,i2(cid:105)}
otherwise
(cid:40) 1
i1 ← hash(e)
i2 ← hash(e)⊕ hash(fp(e))
pcrRespGenpk(e,Y):
s1. abort if Y (cid:60) (Cpk)β×χ
s2.
s3.
s4. ∀i ∈ [2], j ∈ [β] :
(Q)i, j ←
(cid:16)(cid:16)
0
f ← Encpk(−fp(e))
s5.
s6. ∀i ∈ [2], j ∈ [χ] : (F)i, j ← f
(cid:17)
(cid:17)
s7. ∀i ∈ [2], j ∈ [χ] : (M)i, j
$← Zr \{0}
s8. Z ← M◦pk
Q∗pk Y
+pk F
f (cid:48) ← Encpk(fp(cid:48)(e))
s9.
s10. ∀i ∈ [2], j ∈ [χ] : (F(cid:48))i, j ← f (cid:48)
(cid:17)
s11. ∀i ∈ [2], j ∈ [χ] : (M(cid:48))i, j
$← Zr
M(cid:48) ◦pk Z
+pk F(cid:48)
s13. return (cid:104)Z,Z(cid:48)(cid:105)
pcrRevealsk(e(cid:48),(cid:104)Z,Z(cid:48)(cid:105)):
r4.
r5.
s12. Z(cid:48) ←(cid:16)
return false if Z (cid:60) (Cpk)2×χ ∨ Z(cid:48) (cid:60) (Cpk)2×χ
(cid:104)ˆi, ˆj(cid:105) ← arg
(cid:104)i, j(cid:105)
return false if (cid:104)ˆi, ˆj(cid:105) = (cid:104)⊥,⊥(cid:105)
return isEqsk(fp(cid:48)(e(cid:48)),(Z(cid:48))ˆi, ˆj)
isEqsk(0,(Z)i, j)
r6.
r7.
(b) Procedures
Figure 5: Private Containment Retrieval protocol, with matri-
ces X ∈ (Zr)β×χ; Y ∈ (Cpk)β×χ; Q ∈ (Zr)2×β; M,M(cid:48) ∈ (Zr)2×χ;
F,F(cid:48),Z,Z(cid:48) ∈ (Cpk)2×χ.
that ciphertext (if any) has been changed to a ciphertext of
0. This ciphertext of 0 remains after multiplying this matrix
component-wise by the random matrix M to produce Z. The
USENIX Association
30th USENIX Security Symposium    849
remaining steps (lines s9–s12) simply rerandomize Z and
transform this ciphertext of 0 to a ciphertext of fp(cid:48)(e) in Z(cid:48),
for a ﬁngerprint function fp(cid:48) : {0,1}∗ → F that is “unrelated”
to fp. (We will model fp(cid:48) as a random oracle [4] for the secu-
rity argument in Sec. 6.4.) Rerandomization using M(cid:48) in the
creation of Z(cid:48) is essential to protect the privacy of e if e (cid:60) X,
since without rerandomizing, the component-wise diﬀerences
of the plaintexts of Z and Z(cid:48) would reveal fp(cid:48)(e) to R.
c2
(cid:35)
(cid:35)
(cid:35)
+pk
c2
(cid:35)
d=
c1
c2
∗pk
+pk F
Encpk(e)
0 1 0
For (an artiﬁcially small) example, suppose β = 3, χ = 1, and
that the monitor S invokes pcrRespGenpk(e,Y) where i1 =
hash(e) = 3 and i2 = hash(e)⊕ hash(fp(e)) = 2. Furthermore,
(cid:35)
suppose that (X)i1,1
d= Encpk(e). Then,
(cid:34) Encpk(e)
(cid:34) 0 0 1
 d=
(cid:34)
(cid:34) Encpk(−e)
Encpk(−e)
(cid:17)
(cid:17)
Encpk(m2 − e)
and so
Q∗pk Y
d=
where c2 ∈ Cpk(m2). Assuming m2 (cid:44) e, we then have
Q∗pk Y d=
(cid:17)
(cid:16)
(cid:34) Encpk(e)
(cid:16)(cid:16)
(cid:34) m3
(cid:35)
(cid:34)
Q∗pk Y
◦pk
(cid:16)
(cid:17)
$← Zr \{0} and so m5 (cid:44) 0. Finally,
(cid:32)(cid:34) m6
(cid:35)
(cid:34) Encpk(0)
M(cid:48) ◦pk Z
+pk F(cid:48)
(cid:35)
(cid:34) Encpk(fp(cid:48)(e))
◦pk
+pk F
Encpk(0)
Z d= M◦pk
Z(cid:48) d=
d=
(cid:34) Encpk(fp(cid:48)(e))
(cid:34) Encpk(0)
Encpk(0)
Encpk(m2 − e)
Encpk(fp(cid:48)(e))
(cid:35)
(cid:35)
where m3,m4
Encpk(m5)
Encpk(m5)
(cid:35)(cid:33)
d=
m4
(cid:35)
d=
m7
d=
Encpk(m8)
$← Zr and so m8 is uniformly random in Zr.
where m6,m7
Given this structure of (cid:104)Z,Z(cid:48)(cid:105), pcrRevealsk(e(cid:48),(cid:104)Z,Z(cid:48)(cid:105))
must simply ﬁnd the location (cid:104)ˆi, ˆj(cid:105) where Z holds a cipher-
text of 0 (line r5) and, unless there is none (line r6), return
whether the corresponding location in Z(cid:48) is a ciphertext of
fp(cid:48)(e(cid:48)) (line r7).
+pk
6.4 Security
The use of this protocol to achieve the security arguments of
Sec. 5.4 depends on the PCR protocol achieving certain key
properties. We present these properties below.
Security against a malicious monitor: When the target R is
not breached, our primary goals are twofold. First, we need
to show that monitoring requests do not weaken the secu-
rity of R’s accounts or, in other words, that the request Y
does not leak information about X (except its size). This is
straightforward, however, since in this protocol S observes
only ciphertexts Y and the public key pk with which these
ciphertexts were created. (The target R need not, and should
not, divulge the result of the protocol to the monitor S .) As
such, the privacy of X reduces trivially to the IND-CPA secu-
rity [3] of the encryption scheme.
The second property that we require of this protocol is that
a malicious monitor be unable to induce the target to evalu-
ate pcrRevealsk(e(cid:48),(cid:104)Z,Z(cid:48)(cid:105)) to true for any e(cid:48) ∈ X unless the
monitor knows e(cid:48). That is, in the context of Sec. 5, we want
to ensure that the monitor must have received (a password
that hashes to) e(cid:48) in a login attempt, as otherwise the monitor
might cause the target to falsely detect its own breach. This
is straightforward to argue in the random oracle model [4],
however, since if fp(cid:48) is modeled as a random oracle, then to
create a ciphertext (Z(cid:48))i, j ∈ Cpk(fp(cid:48)(e(cid:48))) with non-negligible
probability in the output length of fp(cid:48), S must invoke the fp(cid:48)
oracle with e(cid:48) and so must “know” it.
Security against a malicious target: Though our threat
model in Sec. 5.1 does not permit a malicious target for the
purposes of designing an algorithm for it to detect its own
breach, a monitor will participate in this protocol only if doing
so does not impinge on the security of its own accounts, even
in the case where the target is malicious. The security of the
monitor’s account a is preserved since if the monitor correctly
computes pcrRespGenpk(e,Y), then the output (cid:104)Z,Z(cid:48)(cid:105) car-
ries information about e only if some (Y)i, j ∈ Cpk(fp(e)), i.e.,
only if the target already enumerated this password among the
k +1 in Y (ignoring collisions in fp). That is, even a malicious
target learns nothing about e from the response computed
by an honest monitor unless the target already guessed e (or
more precisely, fp(e)).
This reasoning requires that pk is a valid public key for
the cryptosystem, and so implicit in the algorithm description
in Fig. 5 is that the monitor veriﬁes this. This veriﬁcation is
trivial for the cryptosystem with which we instantiate this
protocol in Sec. 6.5.
Proposition 1. Given (cid:104)pk,Y(cid:105) and e where (Y)i, j (cid:60) Cpk(fp(e))
for each i ∈ [β], j ∈ [χ], if the monitor correctly computes
(cid:104)Z,Z(cid:48)(cid:105) ← pcrRespGenpk(e,Y), then
P(cid:16)
(Z)i, j ∈ Cpk(m)∧(cid:0)Z(cid:48)(cid:1)
(cid:17)
1
=
r(r− 1)
(cid:17)
(cid:17)
for any i ∈ [2], j ∈ [χ], m ∈ Zr \{0}, and m(cid:48) ∈ Zr.
Proof. Since each (Y)i, j (cid:60) Cpk(fp(e)) by assumption, the con-
(cid:16)(cid:16)
(cid:60) Cpk(fp(e)) and
structions of Q and F imply that
(cid:60) Cpk(0) for any i ∈ [2], j ∈ [χ]. Then,
Q∗pk Y
(cid:17)(cid:17)
so
since (M)i, j is independently and uniformly distributed in
Zr \{0}, it follows that (Z)i, j =
∈
Cpk(m) for m distributed uniformly in Zr \{0}, as well. Fi-
nally, since (M(cid:48))i, j is independently and uniformly distributed
Q∗pk Y
(cid:16)(cid:16)
Q∗pk Y
M◦pk
+pk F
+pk F
(cid:17)
(cid:16)
i, j
i, j
i, j
i, j ∈ Cpk(m(cid:48))
(cid:17)
(cid:16)
850    30th USENIX Security Symposium
USENIX Association
(cid:16)(cid:16)
(cid:17)
M(cid:48) ◦pk Z
in Zr, we know that
distributed uniformly in Zr.
+pk F(cid:48)(cid:17)
∈ Cpk(m(cid:48)) for m(cid:48)
(cid:3)
i, j
The proposition above shows that the plaintexts in the
response are uniformly distributed if (Y)i, j (cid:60) Cpk(fp(e)). The
following proposition also points out that the ciphertexts are
uniformly distributed.
)