为什么呢?   
假设每天投入100元, 按日计息, 一笔钱存1年的年化收益为5%.    
1年后实际得到的利息为:     
```  
postgres=# select sum(500), -- 总投入   
sum(500)*0.05,   -- 第一天就全部存入的年化收益   
sum(500*0.05*(during/365.0))  -- 每天定投的年化收益   
from generate_series(1,365) as during;  
  sum   | ?column? |             sum               
--------+----------+-----------------------------  
 182500 |  9125.00 | 4575.0000000000000000000000  
(1 row)  
```  
得到结果:  
- 1年共投入 182500  
- 如果第一天一次性投入 182500, 那么利息是 9125  
- 如果是每天投入 500, 那么利息是 4575  
```  
postgres=# select 9125.00/4575.0;   
      ?column?        
--------------------  
 1.9945355191256831  
(1 row)  
```  
所以, 定投的实际年化利息目标大概应该设置为一把梭哈的一半左右.    
定投的止盈点正确计算方法   
例如你期望的年化收益是10%, 那么按本文提供的算法, 定投的止盈点应该设置为5%就卖出.    
如果再考虑复利, 那么止盈点是动态变化的, 例如未考虑复利的止盈点是5%, 那么考虑复利则和持有年限有关.   
```
postgres=# select (1.05^5 - 1)/5;
        ?column?        
------------------------
 0.05525631250000000000  -- 持有5年, 考虑复利止盈点 ~= 5.5% 
(1 row)
postgres=# select (1.05^10 - 1)/10;
        ?column?        
------------------------
 0.06288946267774414000  -- 持有10年, 考虑复利止盈点 ~= 6.3% 
(1 row)
```
## 附录: 一键部署 PolarDB     
安装docker环境, 参考:     
- [《MacOS PolarDB-X 数据库快速部署指南》](../202208/20220810_01.md)      
一键部署 PolarDB, 参考:     
- https://apsaradb.github.io/PolarDB-for-PostgreSQL/zh/    
随便选一种(单节点实例、多节点实例、HTAP 实例)进行部署, 例如:     
HTAP 实例    
```    
# 拉取 HTAP PolarDB 镜像    
docker pull polardb/polardb_pg_local_instance:htap    
# 创建运行并进入容器    
docker run -it --cap-add=SYS_PTRACE --privileged=true --name polardb_pg_htap polardb/polardb_pg_local_instance:htap bash    
# 测试实例可用性     
psql -h 127.0.0.1 -c 'select version();'    
            version    
--------------------------------    
 PostgreSQL 11.9 (POLARDB 11.9)    
(1 row)    
```    
退出容器后, 如何再次进入容器?      
```    
IT-C02YW2EFLVDL:~ digoal$ docker ps -a    
CONTAINER ID   IMAGE                                    COMMAND                  CREATED         STATUS                     PORTS     NAMES    
dd43b032b95e   polardb/polardb_pg_local_instance:htap   "/bin/sh -c '~/tmp_b…"   7 minutes ago   Exited (1) 3 minutes ago             polardb_pg_htap    
IT-C02YW2EFLVDL:~ digoal$ docker start dd43b032b95e    
dd43b032b95e    
```    
```    
IT-C02YW2EFLVDL:~ digoal$ docker exec -it dd43b032b95e bash    
[postgres@dd43b032b95e ~]$ psql -h 127.0.0.1    
psql (11.9)    
Type "help" for help.    
postgres=# \q    
```    
其他参考`docker --help`    
列出容器    
```    
IT-C02YW2EFLVDL:~ digoal$ docker ps -a    
CONTAINER ID   IMAGE                                    COMMAND                  CREATED         STATUS         PORTS     NAMES    
dd43b032b95e   polardb/polardb_pg_local_instance:htap   "/bin/sh -c '~/tmp_b…"   8 minutes ago   Up 2 seconds             polardb_pg_htap    
```    
停止容器    
```    
docker stop ...    
  stop        Stop one or more running containers    
```    
删除容器    
```    
docker rm ...    
  rm          Remove one or more containers    
docker rm dd43b032b95e    
```    
列出镜像    
```    
docker images     
  images      List images    
IT-C02YW2EFLVDL:~ digoal$ docker images    
REPOSITORY                          TAG       IMAGE ID       CREATED        SIZE    
polardb/polardb_pg_local_instance   htap      a05bfc3b1310   3 weeks ago    11.5GB    
polardbx/galaxyengine               latest    6c7171b141d6   2 months ago   2.11GB    
polardbx/galaxysql                  latest    1a9a92c774dc   2 months ago   1.14GB    
polardbx/galaxycdc                  latest    a7b7d468cd34   2 months ago   905MB    
polardbx/xstore-tools               latest    d89e74573646   3 months ago   2.69MB    
polardbx/polardbx-init              latest    b3637901782a   3 months ago   6.59MB    
```    
删除镜像    
```    
docker rmi ...     
  rmi         Remove one or more images    
IT-C02YW2EFLVDL:~ digoal$ docker rmi 6c7171b141d6    
Untagged: polardbx/galaxyengine:latest    
Untagged: polardbx/galaxyengine@sha256:135530a3848fec0663555decf6d40de4b9b6288e59f0ce9f8fafc88103ee4b53    
Deleted: sha256:6c7171b141d689c4f2cb85bec056e8efa281f7d0c13d5f6ec8786fdfe0b2dacc    
Deleted: sha256:eb01d41966798251e6cf87030021b9430e39be92152d1b699b862ce7ffd392b6    
Deleted: sha256:d3d01e57b3ff262d299d2fc86ee4e6243464aace5f0bb127529ec0b7cf36bcc1    
Deleted: sha256:48292444284d3251871963192eb99ff82e3929af68426b43edf7bfc4dae1580d    
Deleted: sha256:6ca882a31a79adbdf39412feee05487de45617f70711389b94145eb1475b2146    
```    
可以写个简单的脚本方便平时启停polardb, (注意ID修改为你自己的容器ID).   
```
vi ~/polardb
#!/bin/bash
case "$1" in
  start)
    docker start 1373488a35ab
    sleep 3
    docker exec -ti 1373488a35ab bash
    ;;
  stop)
    docker stop 1373488a35ab
    sleep 3
    docker ps -a
    ;;
  *)
    echo "polardb start|stop"
    ;;
esac
chmod 500 ~/polardb
参考:
https://www.jianshu.com/p/d3cd36c97abc  
```
## 脚本
```
大家好, 我是德哥, 一位阿里云PolarDB开源数据库爱好者, 同时也是一名投资理财入门砖家.  
阿里云的小伙伴肯定知道癫总非常喜欢说的: 有数据说数据, 没数据说案例, 没案例讲逻辑. 这是非常典型的哲科思维, 拆成3个部分就是: 观点, 逻辑推导过程, 和数据证明.  
哲科思维的本质是假设和证明，假设指的是不证自明的公理, 证明指从公理开始经过严密的逻辑推导得出结论即: 命题.  
反之, 如果要推翻一个命题, 可以去找到其逻辑漏洞, 例如根基假设的错误性或时空局限性. 也可以用反面的数据或案例对其进行证伪.  
作为一名数据库爱好者, 数据库就是我们的日常百宝箱, 今天我将用PolarDB数据库来证明一个很多投资者都非常关心的命题: “巴菲特的投资理念: 长期定投”  
根据哲科思维模型, 在证明之前, 首先让我们一起来分析一下“巴菲特的投资理念: 长期定投”背后的理论支撑:  
1、首先是代际转移理论: 资源(生产资料、生产力)有限, 但是我们整个社区都假设并坚信通过未来的科技进步将获得更高的资源利用能力、生产效率, 或者有能力利用原来不能利用的资源; 例如砍伐树木, 石油、煤炭的过度开采虽然会造成环境破坏, 但是我们相信未来的科技进步会找到新的能源, 并填补过度开采造成的破坏, 例如太阳能、风能、地热、水、核能的利用. (代际转移理论和递弱代偿理论异曲同工)。  
第1点支撑了长期投资的价值, 钱放着不动是静止的, 投资则使钱进入了社会生产和消费的循环, 就有可能获得收益.  
2、第二是经济周期, 以及宏观调控手段. 维持适度的通胀, 有利于刺激消费, 推动经济的发展. 需要刺激经济发展的时候通常还会降低商业银行在央行的存款准备金率, 让商业银行可以贷出去更多钱, 使整个市场的货币总量增加, 可能引起通胀. (参考阅读: 金融简史、逃不开的经济周期.).  
3、第三是数学支撑: 即微笑曲线, 例如非定投的模式买入价格为1, 如果要赚钱, 卖出价格必须大于1. 而定投的话, 第一笔定投可能是1, 但是后面可能有买到了0.9的价格, 下跌后又回到1, 此时卖出, 一样能盈利, 价格波动曲线就像笑脸, 所以经常被称为微笑曲线. 所谓的长期, 后面会有数据来分析, 到底有多长?  