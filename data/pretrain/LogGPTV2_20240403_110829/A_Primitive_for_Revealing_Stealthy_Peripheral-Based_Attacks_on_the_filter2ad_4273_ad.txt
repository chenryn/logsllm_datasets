exact point in time when BARM must tolerate −T transactions.
(cid:5)(cid:2)
(cid:1)(cid:1)(cid:2)(cid:3)(cid:4)
(cid:6)(cid:2)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:3)(cid:12)(cid:1)(cid:10)(cid:9)(cid:3)(cid:13)(cid:14)(cid:15)(cid:3)(cid:16)(cid:11)(cid:11)(cid:1)(cid:17)(cid:18)(cid:9)(cid:15)
(cid:7)(cid:2)
Fig. 6. Tolerance Value T : If the attacker can predict the very exact moment where
BARM determines T too little bus transactions, an attack with 2T bus transactions
could theoretically executed stealthily.
Identifying and Disabling the Malicious Peripheral: If AT a > 0 BARM
has detected a DMA-based attack originating from a platform peripheral. It is
already of great value to know that such an attack is executed. A simple defense
policy that can be applied to stop an attack is to remove bus master capabilities
using the BME bit (see Section 4.1) of all non-trusted bus masters. On the one
hand, this policy will most probably stop certain platform functionalities from
working. On the other hand, it is reasonably to put a system, which has been
compromised via such a targeted attack, out of operation to examine it.
When stopping the non-trusted bus masters BARM places a notiﬁcation for
the user on the platform’s screen. AT a does not include any information about
what platform peripheral is performing the attack. To include that information
in the notiﬁcation message, we implemented a simple peripheral test that identi-
ﬁes the attacking peripheral. When the DMA attack is still scanning for valuable
data, we unset the BME bits of the non-trusted bus masters one after another
to reveal the attacking peripheral. After the bit is unset, BARM checks if the
additional bus activity vanished. If so, the attacking peripheral is identiﬁed and
the peripheral name is added to the attack notiﬁcation message. If BARM still
detects additional bus activity the BME bit of the wrong peripheral is set again.
Revealing Stealthy Peripheral-Based Attacks on Main Memory
13
The OS must not trigger any I/O tasks during the peripheral test. Our evaluation
reveals that our test is performed in a few milliseconds, see Section 5. It is
required that the attack is a bit longer active than our peripheral test. Otherwise,
it cannot be guaranteed that our test identiﬁes the attacking peripheral. The
DMA attack on a Linux system described in [4] needs between 1000 ms and
30,000 ms to scan the memory. Our evaluation demonstrates that BARM can
detect and stop a DMA attack much faster.
5 Evaluation of the Detection Model Implementation
We evaluated BARM, which is implemented as a Linux kernel module. First, we
conducted tests to determine a useful tolerance value T . In the main part of this
section, we present the performance overhead evaluation results of our solution.
We demonstrate that the overhead caused by BARM is negligible. Finally, we
conducted some experiments to evaluate how BARM behaves during an attack.
5.1 Tolerance Value T
We performed several diﬀerent tests to detemine a useful tolerance value. We
repeated each test 100 times. Several diﬀerent tests means, we evaluated BARM
with diﬀerent PMU value sampling intervals (32 ms, 128 ms, 512 ms, 1024 ms,
2048 ms), number of CPU cores (1 − 4 cores), RAM size (2 GB, 4 GB, 6 GB,
8 GB), platforms (Intel Q35 Desktop / Lenovo Thinkpads: T400, X200, X61s),
as well as minimum (powersave) and maximun (performance) CPU frequency to
check the impact for T .
Furthermore, we evaluated BARM with a CPU and with a memory stress
test. CPU stress test means, running the sha1sum command on a 100 MB test
ﬁle 100 times in parallel to ensure that the CPU utilization is 100 %. For the
memory stress test, we copied the 100 MB test ﬁle 2000 times from a main
memory location to another.
Our platforms had the following conﬁgurations: Q35 – Intel Core 2 Quad CPU
PI:EMAIL with 4 GB RAM, T400 – Intel Core 2 Duo CPU PI:EMAIL
with 4 GB RAM, X200 – Intel Core 2 Duo CPU PI:EMAIL with 4 GB
RAM, and X61s – Intel Core 2 Duo CPU PI:EMAIL with 2 GB RAM.
We used a sampling interval of 32 ms, 1 core, 4 GB RAM, the Q35 platform,
and the maximum CPU frequency as basic evaluation conﬁguration. We only
changed one of those properties per test. The results are summarized in Figure 7.
Note, to determine T we considered up to ﬁve bus masters (1 – 2 CPU, 1
UHCI, 1 ﬁngerprint reader, and 1 ME bus master). We used the SliTaz Linux
distribution (http://www.slitaz.org/) that allowed us to completely run the
Linux operating system from RAM. As a result we were able to selectively acti-
vate and deactivate diﬀerent components as the harddisk controller bus master.
The overall test results reveal a worst case discrepancy between measured
and expected bus transactions of 19 (absolute value). This result conﬁrms that
the measurement and evaluation of bus activity yields reliable values, i. e., values
14
P. Stewin
without hardly any ﬂuctuations. Nonetheless, to be on the safe side we work with
a tolerance value T = 50 when we evaluate BARM with a stealthy DMA-based
keystroke logger, see Section 5.3.
(cid:4)(cid:3)
(cid:5)
(cid:3)
(cid:1)(cid:5)
(cid:1)(cid:4)(cid:3)
(cid:1)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:3)
(cid:9)
(cid:2)
(cid:11)
(cid:10)
(cid:4)
(cid:9)
(cid:8)
(cid:7)
(cid:6)
(cid:5)
(cid:4)
(cid:3)
(cid:2)
(cid:1)
(cid:17)
(cid:16)
(cid:11)
(cid:5)
(cid:6)
(cid:15)
(cid:14)
(cid:13)
(cid:12)
(cid:6)(cid:2) (cid:4)(cid:2)(cid:7) (cid:5)(cid:4)(cid:2)(cid:4)(cid:3)(cid:2)(cid:8)(cid:2)(cid:3)(cid:8)(cid:7)
(cid:21)(cid:8)(cid:14)(cid:7)(cid:22)(cid:2)(cid:9)(cid:23)(cid:11)(cid:24)(cid:9)(cid:20)(cid:6)(cid:5)(cid:25)(cid:8)(cid:22)(cid:11)(cid:2)(cid:9)(cid:11)(cid:14)(cid:3)
(cid:8)(cid:9)(cid:10)
(cid:3)
(cid:9)
(cid:16)
(cid:2)
(cid:20)
(cid:4)
(cid:8)
(cid:3)
(cid:9)
(cid:8)
(cid:5)
(cid:19)
(cid:11)
(cid:3)
(cid:13)
(cid:18)
(cid:3)
(cid:9)
(cid:16)
(cid:2)
(cid:20)
(cid:4)
(cid:8)
(cid:3)
(cid:9)
(cid:8)
(cid:5)
(cid:19)
(cid:11)
(cid:3)
(cid:13)
(cid:18)
(cid:4)(cid:3)
(cid:5)
(cid:3)
(cid:1)(cid:5)
(cid:1)(cid:4)(cid:3)
(cid:1)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:3)
(cid:4)(cid:3)
(cid:5)
(cid:3)
(cid:1)(cid:5)
(cid:1)(cid:4)(cid:3)
(cid:1)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:3)
(cid:9)
(cid:2)
(cid:11)
(cid:10)
(cid:4)
(cid:9)
(cid:8)
(cid:7)
(cid:6)
(cid:5)
(cid:4)
(cid:3)
(cid:2)
(cid:1)
(cid:17)
(cid:16)
(cid:11)
(cid:5)
(cid:6)
(cid:15)
(cid:14)
(cid:13)
(cid:12)
(cid:9)(cid:10)(cid:11)
(cid:9)
(cid:2)
(cid:11)
(cid:10)
(cid:4)
(cid:9)
(cid:8)
(cid:7)
(cid:6)
(cid:5)
(cid:4)
(cid:3)
(cid:2)
(cid:1)
(cid:17)
(cid:16)
(cid:11)
(cid:5)
(cid:6)
(cid:15)
(cid:14)
(cid:13)
(cid:12)
(cid:9)(cid:10)(cid:11)
(cid:3)
(cid:9)
(cid:16)
(cid:2)
(cid:20)
(cid:4)
(cid:8)
(cid:3)
(cid:9)
(cid:8)
(cid:5)
(cid:19)
(cid:11)
(cid:3)
(cid:13)
(cid:18)
(cid:3)
(cid:9)
(cid:16)
(cid:2)
(cid:20)
(cid:4)
(cid:8)
(cid:3)
(cid:9)
(cid:8)
(cid:5)
(cid:19)
(cid:11)
(cid:3)
(cid:13)
(cid:18)
(cid:4)(cid:3)
(cid:5)
(cid:3)
(cid:1)(cid:5)
(cid:1)(cid:4)(cid:3)
(cid:1)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:3)
(cid:4)(cid:3)
(cid:5)
(cid:3)
(cid:1)(cid:5)
(cid:1)(cid:4)(cid:3)
(cid:1)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:3)
(cid:4)
(cid:2)
(cid:6)