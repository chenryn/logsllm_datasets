### Exact Point in Time When BARM Must Tolerate -T Transactions

**Figure 6. Tolerance Value T:**
If an attacker can predict the exact moment when BARM determines that the number of bus transactions is too low, they could theoretically execute an attack with 2T bus transactions stealthily.

### Identifying and Disabling the Malicious Peripheral
When \( AT_a > 0 \), BARM has detected a DMA-based attack originating from a platform peripheral. Knowing that such an attack is being executed is already valuable. A simple defense policy to stop the attack is to remove bus master capabilities using the BME bit (see Section 4.1) for all non-trusted bus masters. While this may disrupt certain platform functionalities, it is reasonable to take a compromised system out of operation for examination.

When stopping the non-trusted bus masters, BARM displays a notification on the platform's screen. The notification does not include information about which peripheral is performing the attack. To include this information, we implemented a simple peripheral test. During the test, BARM unsets the BME bits of the non-trusted bus masters one by one to identify the attacking peripheral. If the additional bus activity ceases after unsetting a BME bit, the attacking peripheral is identified, and its name is added to the notification message. If BARM still detects additional bus activity, the BME bit of the wrong peripheral is reset.

**Note:** The operating system must not trigger any I/O tasks during the peripheral test. Our evaluation shows that the test is completed in a few milliseconds (see Section 5). It is necessary for the attack to be active slightly longer than our peripheral test to ensure accurate identification. The DMA attack on a Linux system described in [4] takes between 1000 ms and 30,000 ms to scan memory. Our evaluation demonstrates that BARM can detect and stop a DMA attack much faster.

### 5. Evaluation of the Detection Model Implementation
We evaluated BARM, implemented as a Linux kernel module. First, we conducted tests to determine a useful tolerance value \( T \). In the main part of this section, we present the performance overhead evaluation results, demonstrating that the overhead caused by BARM is negligible. Finally, we conducted experiments to evaluate BARM's behavior during an attack.

#### 5.1 Tolerance Value \( T \)
We performed several tests to determine a useful tolerance value, repeating each test 100 times. These tests included different PMU value sampling intervals (32 ms, 128 ms, 512 ms, 1024 ms, 2048 ms), number of CPU cores (1-4 cores), RAM sizes (2 GB, 4 GB, 6 GB, 8 GB), platforms (Intel Q35 Desktop / Lenovo Thinkpads: T400, X200, X61s), and minimum (powersave) and maximum (performance) CPU frequencies to assess the impact on \( T \).

Additionally, we evaluated BARM under CPU and memory stress tests. For the CPU stress test, we ran the `sha1sum` command on a 100 MB test file 100 times in parallel to achieve 100% CPU utilization. For the memory stress test, we copied the 100 MB test file 2000 times from one main memory location to another.

Our test platforms had the following configurations:
- Q35: Intel Core 2 Quad CPU PI:EMAIL with 4 GB RAM
- T400: Intel Core 2 Duo CPU PI:EMAIL with 4 GB RAM
- X200: Intel Core 2 Duo CPU PI:EMAIL with 4 GB RAM
- X61s: Intel Core 2 Duo CPU PI:EMAIL with 2 GB RAM

We used a basic evaluation configuration with a sampling interval of 32 ms, 1 core, 4 GB RAM, the Q35 platform, and the maximum CPU frequency. We changed only one property per test. The results are summarized in Figure 7.

To determine \( T \), we considered up to five bus masters (1-2 CPUs, 1 UHCI, 1 fingerprint reader, and 1 ME bus master). We used the SliTaz Linux distribution (http://www.slitaz.org/), which allowed us to run the Linux operating system entirely from RAM, enabling selective activation and deactivation of different components like the hard disk controller bus master.

The overall test results revealed a worst-case discrepancy between measured and expected bus transactions of 19 (absolute value). This confirms that the measurement and evaluation of bus activity yield reliable values with minimal fluctuations. To be safe, we use a tolerance value \( T = 50 \) when evaluating BARM with a stealthy DMA-based keystroke logger (see Section 5.3).

This comprehensive evaluation ensures that BARM can effectively detect and mitigate DMA-based attacks while maintaining minimal performance overhead.