# Presentation: Hijacking Legitimate Applications with a Minimal Footprint

## Speaker: Wietze Beukema (@wietze)
### Event: D3FC0N, August 2022
### Role: Sr. Threat Hunter on CrowdStrike’s OverWatch Elite Team
### Location: London, UK
### Previous Presentations: BSides London, MITRE ATT&CK EU Community, SANS DFIR

---

## Introduction
**Hello World, Who Dis?**

- **@Wietze**
- **D3F C0N**

---

## DLL Hijacking
**Tricking a legitimate/trusted application into loading an arbitrary DLL**

- **Legitimate DLLs**
- **Trusted Program**
- **Evil DLL**

### Common Types of DLL Hijacking
1. **DLL Side-Loading**
   - Move the vulnerable EXE and place it next to a malicious DLL.
2. **DLL Search Order Hijacking**
   - Place a malicious DLL in a folder that is searched before the legitimate DLL.
3. **DLL Substitution**
   - Replace the original DLL with a malicious one.

### Less Common Types of DLL Hijacking
1. **Phantom DLL Hijacking**
   - Create a malicious DLL in a location that is searched for but does not normally exist.
2. **WinSXS Hijacking**
   - Manipulate the Windows Side-by-Side infrastructure.
3. **Input-Based Hijacking**
   - Manipulate the command line, Windows Registry, etc.

### Characteristics
- **Well Documented**
- **Well Researched**
- **Well Detected**

---

## Variables
- **Dynamic variables used by running programs**
- **Usage:**
  - Command shells (e.g., `%VAR%` on Windows, `$VAR` on Unix)
  - Regular processes (e.g., `getenv("VAR")` in C)
- **Typically stored as ASCII strings**

### Environment Variables: A Brief History
- **1978**: Version 7 Unix introduces environment variables.
- **1982**: PS DOS 2.0 introduces environment variables.
- **1992**: Windows 3.1 introduces the Windows Registry.
- **1997**: Security researcher highlights issues with `%PATH%` in WinNT.
- **1999**: First-ever issued CVEs contain PrivEsc via `%PATH%`.

### Storage and Scope
- **All variable keys and values are stored in a single string**
- **Up to 32,767 (2^15-1) characters in total**
- **(Semi-) Persistent variables are stored in:**
  - **All Users**: `HKLM\System\CurrentControlSet\Control\Session Manager\Environment`
  - **Current User**: `HKCU\Environment`
  - **Current Session**: `HKCU\Volatile Environment`
  - **Process**: Process Environment Block (PEB)

### Process Environment Block (PEB)
- **InheritedAddressSpace**
- **ReadImageFileExecOptions**
- **BeingDebugged**
- **SpareBool**
- **Mutant**
- **Ldr**
- **ProcessParameters**
- **SubSystemData**
- **ProcessHeap**
- **...**

### Example: PowerShell
- **Normal Run**: `%SystemRoot%\System32\mswsock.dll`
- **Manipulated Run**: `C:\Temp\Evil\System32\mswsock.dll`

### Advantages
- **Run your code via pre-existing, legitimate software**
- **No custom command lines, special process operations, etc.**
- **No registry footprint**
- **EDR rarely analyzes process-level environment variables**
- **Supported by scripting languages including PowerShell, VBScript, JScript**

### Comparison with Other Techniques
- **DLL Side-loading**: Requires bringing/moving executable.
- **DLL Search Order Hijacking**: Limited options or requires bringing executable.
- **DLL substitution**: May require elevated rights.
- **Input-based DLL hijacking**: Detectable via command line and known Registry locations.

### Environment Variable-Based Hijacking
- **Uses pre-existing applications**
- **Does not require elevated rights**
- **Does not require special command-line arguments**
- **Many candidates**
- **Only footprint: planting of the DLL**

### Finding Vulnerable Executables
- **Take all DLLs in e.g., `C:\Windows\System32`**
- **Create implants for each of them, creating a fingerprint file when loaded**
- **Take all EXEs in e.g., `C:\Windows\System32`**
- **Run them with certain environment variables pointed to implants folder**
- **Check fingerprint files**

### Challenges
- **Stability**: We don’t fully know the role of the DLL in the vulnerable program.
- **Execution flow**: We don’t fully control the execution flow of the vulnerable program.

### Solutions
- **Function Redirection (‘DLL Proxying’)**: Create a DLL with dummy functions for expected export names.
- **Resource Cloning**: Clone resources from the original DLL.

### Mass Generate DLL Implants
- **Mass Test Vulnerable Executables**
- **Releasing Today: Framework for mass compiling DLLs for DLL Hijacking**
  - **With export function redirection**
  - **With resource cloning**
  - **Using MinGW (i.e., cross-platform support)**
  - **GitHub Repository: https://github.com/wietze/**

### Findings
- **Tested on Windows 11 (21H2)**
  - **82 executables**
  - **91 unique DLLs**
  - **Nearly 398 combinations**

### Further Implications
- **Persistence**: When a process is created, we should be able to set the environment variable.
- **Privilege Escalation**: ‘Stealthy’ way to get SYSTEM.
- **UAC Bypass**: By design, a child process that is run with a higher integrity level will not inherit its parent’s environment variables.

### Future
- **Hijack Libs Project**
  - **Curated list of DLL hijacking candidates**
  - **Environment Variable, Side-Loading, Phantom, Search Order Hijacking**
  - **Open source, community-driven**
  - **Now live: hijacklibs.net**

### Releasing Today: Hijack Libs
- **For each DLL:**
  - **Breakdown of applicable DLL Hijacking types**
  - **Overview of expected DLL locations**
  - **Overview of vulnerable EXEs**
  - **Detection logic (Sigma)**
- **Website: https://hijacklibs.net**

### Conclusion
- **Community, unite!**
- **Feedback? DMs open: @Wietze**
- **Website: https://www.hijacklibs.net**

---

**Thank You!**