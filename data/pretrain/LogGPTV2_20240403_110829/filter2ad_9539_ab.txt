        length = buffer.Length;
    }
    // We need to encode if the page has EnableViewStateMac or we got passed in some mac key string
    else if ((_page != null && _page.EnableViewStateMac) || _macKeyBytes != null) {
        buffer = MachineKeySection.GetEncodedData(buffer, GetMacKeyModifier(), 0, ref length);
    }
这里有两个重要标志位， _page.RequiresViewStateEncryptionInternal 和
_page.EnableViewStateMac。这两个标志位决定了序列化的Binary数据 是进入
**MachineKeySection.EncryptOrDecryptData()** 函数还是
**MachineKeySection.GetEncodedData()** 函数。
其中EncryptOrDecryptData() 函数用于加密以及可选择的进行签名(校验)，而GetEncodedData()
则只用于签名(校验)。稍后我们再具体分析这两个函数，我们先来研究一下这两个标志位。
这两个标志位决定了服务端产生的ViewState采取了什么安全措施。这与之前所描述的web.config 中的EnableViewStateMac 和
viewStateEncryptionMode的作用一致。
_page.RequiresViewStateEncryptionInternal 来自这里：
    internal bool RequiresViewStateEncryptionInternal {
        get {
            return ViewStateEncryptionMode == ViewStateEncryptionMode.Always ||
                   _viewStateEncryptionRequested && ViewStateEncryptionMode == ViewStateEncryptionMode.Auto;
        }
    }
其中的ViewStateEncryptionMode 应当是直接来自web.config。所以是否进入
MachineKeySection.EncryptOrDecryptData 取决于web.config
里的配置。（注意，进入该函数不仅会进行加密，也会进行签名）。
_page.EnableViewStateMac 来自这里：
    public bool EnableViewStateMac {
        get { return _enableViewStateMac; }
        set {
            // DevDiv #461378: EnableViewStateMac=false can lead to remote code execution, so we
            // have an mechanism that forces this to keep its default value of 'true'. We only
            // allow actually setting the value if this enforcement mechanism is inactive.
            if (!EnableViewStateMacRegistryHelper.EnforceViewStateMac) {
                _enableViewStateMac = value;
            }
        }
    }
对应字段 _enableViewStateMac 在Page类的初始化函数中被设置为默认值 true:
    public Page() {
        _page = this;   // Set the page to ourselves
        _enableViewStateMac = EnableViewStateMacDefault;
        ...
    }
于是 _enableViewStateMac 是否被修改就取决于
EnableViewStateMacRegistryHelper.EnforceViewStateMac。
查看 EnableViewStateMacRegistryHelper 类，其为EnforceViewStateMac 做了如下注释：
    // Returns 'true' if the EnableViewStateMac patch (DevDiv #461378) is enabled,
    // meaning that we always enforce EnableViewStateMac=true. Returns 'false' if
    // the patch hasn't been activated on this machine.
    public static readonly bool EnforceViewStateMac;
也就是说：在启用EnableViewStateMac补丁的情况下，EnforceViewStateMac 返回true，这表示
前面的EnableViewStateMac 标志位会始终保持其默认值true。
在EnableViewStateMacRegistryHelper 类的初始化函数中，进一步表明了是依据什么修改 EnforceViewStateMac的：
    static EnableViewStateMacRegistryHelper() {
        // If the reg key is applied, change the default values.
        bool regKeyIsActive = IsMacEnforcementEnabledViaRegistry();
        if (regKeyIsActive) {
            EnforceViewStateMac = true;
            SuppressMacValidationErrorsFromCrossPagePostbacks = true;
        }
        // Override the defaults with what the developer specified.
        if (AppSettings.AllowInsecureDeserialization.HasValue) {
            EnforceViewStateMac = !AppSettings.AllowInsecureDeserialization.Value;
            // Exception: MAC errors from cross-page postbacks should be suppressed
            // if either the  switch is set or the reg key is set.
            SuppressMacValidationErrorsFromCrossPagePostbacks |= !AppSettings.AllowInsecureDeserialization.Value;
        }
        ...
可以看到EnforceViewStateMac 在两种情况下被修改：
  * 依据 IsMacEnforcementEnabledViaRegistry() 函数
该函数是从注册表里取值，如果该表项为0，则表示禁用EnableViewStateMac 补丁。
    private static bool IsMacEnforcementEnabledViaRegistry() {
        try {
            string keyName = String.Format(CultureInfo.InvariantCulture, @"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v{0}", Environment.Version.ToString(3));
            int rawValue = (int)Registry.GetValue(keyName, "AspNetEnforceViewStateMac", defaultValue: 0 /* disabled by default */);
            return (rawValue != 0);
        }
        catch {
            // If we cannot read the registry for any reason, fail safe and assume enforcement is enabled.
            return true;
        }
    }
  * 依据 AppSettings.AllowInsecureDeserialization.HasValue
该值应当是来自于web.config 中的危险设置:
    …
总结来说，ViewStateMac 默认强制开启，要想关闭该功能，必须通过注册表或者在web.config 里进行危险设置的方式禁用
EnableViewStateMac 补丁才能实现。
#### 4.2 Deserialize 流程
查看 Deserialize 函数的代码：
    private object Deserialize(string inputString, Purpose purpose) {
        if (String.IsNullOrEmpty(inputString)) {
            throw new ArgumentNullException("inputString");
        }
        byte[] inputBytes = Convert.FromBase64String(inputString);
        int length = inputBytes.Length;
    #if !FEATURE_PAL // FEATURE_PAL does not enable cryptography
        try {
            if (AspNetCryptoServiceProvider.Instance.IsDefaultProvider && !_forceLegacyCryptography) {
                // If we're configured to use the new crypto providers, call into them if encryption or signing (or both) is requested.
                ...
            }
            else {
                // Otherwise go through legacy crypto mechanisms
    #pragma warning disable 618 // calling obsolete methods
                if (_page != null && _page.ContainsEncryptedViewState) {
                    inputBytes = MachineKeySection.EncryptOrDecryptData(false, inputBytes, GetMacKeyModifier(), 0, length);
                    length = inputBytes.Length;
                }
                // We need to decode if the page has EnableViewStateMac or we got passed in some mac key string
                else if ((_page != null && _page.EnableViewStateMac) || _macKeyBytes != null) {
                    inputBytes = MachineKeySection.GetDecodedData(inputBytes, GetMacKeyModifier(), 0, length, ref length);
                }
    #pragma warning restore 618 // calling obsolete methods
            }
        }
        catch {
            // MSRC 10405: Don't propagate inner exceptions, as they may contain sensitive cryptographic information.
            PerfCounters.IncrementCounter(AppPerfCounter.VIEWSTATE_MAC_FAIL);
            ViewStateException.ThrowMacValidationError(null, inputString);
        }
    #endif // !FEATURE_PAL
        object result = null;
        MemoryStream objectStream = GetMemoryStream();
        try {
            objectStream.Write(inputBytes, 0, length);
            objectStream.Position = 0;
            result = Deserialize(objectStream);
        }
        finally {
            ReleaseMemoryStream(objectStream);
        }
        return result;
    }
重点仍然是里面的else分支：
    else {
        // Otherwise go through legacy crypto mechanisms
        if (_page != null && _page.ContainsEncryptedViewState) {
            inputBytes = MachineKeySection.EncryptOrDecryptData(false, inputBytes, GetMacKeyModifier(), 0, length);
            length = inputBytes.Length;
        }
        // We need to decode if the page has EnableViewStateMac or we got passed in some mac key string
        else if ((_page != null && _page.EnableViewStateMac) || _macKeyBytes != null) {
            inputBytes = MachineKeySection.GetDecodedData(inputBytes, GetMacKeyModifier(), 0, length, ref length);
        }
    }
这里出现了一个新的标志位 _page.ContainsEncryptedViewState
用于决定是否进入MachineKeySection.EncryptOrDecryptData()
函数进行解密，查看ContainsEncryptedViewState 的来历：
    if (_requestValueCollection != null) {
         // Determine if viewstate was encrypted.
         if (_requestValueCollection[ViewStateEncryptionID] != null) {
             ContainsEncryptedViewState = true;
         }
        ...
注释表明，该标志确实用于判断接收到的viewstate 是否被加密。查看dnspy逆向的结果，你会更清晰：
这 "__VIEWSTATEENCRYPTED" 很像是request 里提交的字段啊，查找一下，确实如此。
查看开启加密后的 request 请求，确实有这样一个无值的字段：
所以，ASP.NET在解析ViewState时，并不是根据web.config来判断 ViewState
是否加密，而是通过request里是否有__VIEWSTATEENCRYPTED 字段进行判断。换句话说，即使我们在web.config 里设置
Always 解密，服务端仍然会被动解析只有签名的ViewState。（ 我在 YsoSerial.NET 工具
ViewState插件作者的博客里看到，.net 4.5 之后需要加密算法和密钥。但是我不明白为什么，在实际测试中似乎也不需要。）
### 5\. GetEncodedData 签名函数
GetEncodedData() 函数用于对序列化后的Binary数据进行签名，用于完整性校验。查看其代码(.NET 4.8):
    // NOTE: When encoding the data, this method *may* return the same reference to the input "buf" parameter
    // with the hash appended in the end if there's enough space.  The "length" parameter would also be
    // appropriately adjusted in those cases.  This is an optimization to prevent unnecessary copying of
    // buffers.
    [Obsolete(OBSOLETE_CRYPTO_API_MESSAGE)]
    internal static byte[] GetEncodedData(byte[] buf, byte[] modifier, int start, ref int length)
    {
        EnsureConfig();
        byte[] bHash = HashData(buf, modifier, start, length);
        byte[] returnBuffer;
        if (buf.Length - start - length >= bHash.Length)
        {
            // Append hash to end of buffer if there's space
            Buffer.BlockCopy(bHash, 0, buf, start + length, bHash.Length);
            returnBuffer = buf;
        }
        else
        {
            returnBuffer = new byte[length + bHash.Length];
            Buffer.BlockCopy(buf, start, returnBuffer, 0, length);
            Buffer.BlockCopy(bHash, 0, returnBuffer, length, bHash.Length);
            start = 0;
        }
        length += bHash.Length;
        if (s_config.Validation == MachineKeyValidation.TripleDES || s_config.Validation == MachineKeyValidation.AES) {
            returnBuffer = EncryptOrDecryptData(true, returnBuffer, modifier, start, length, true);
            length = returnBuffer.Length;
        }
        return returnBuffer;
    }
大致流程：