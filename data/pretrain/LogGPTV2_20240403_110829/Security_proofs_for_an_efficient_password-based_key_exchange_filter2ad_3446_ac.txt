(cid:1)Rule U2(4) – Look for (pw ,∗, ⊥,E , Y (cid:8)) ∈ ΛE .
If the record is found, deﬁne Encrypt4 as true
and abort the game. Otherwise, compute Y =
Dpw (Y (cid:8)) and KU = Y θ.
The two games G4 and G3 are perfectly indistinguishable
unless event Encrypt4 occurs:
| Pr[S4] − Pr[S3]| ≤ Pr[Encrypt4].
(5)
Game G5: We deﬁne game G5 by aborting the execu-
tions wherein the adversary may have been lucky in guessing
the authenticator (that is, without asking the corresponding
hash query). We reach this aim by modifying the way the
server processes the queries:
(cid:1)
(cid:1)Rule S2(5) – Check whether H = H
, where
= H1(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS). If the equality does
(cid:1)
H
hold, check if (1, U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS, H) ∈ ΛA or
((U, X), (S, Y (cid:8)), H) ∈ ΛΨ.
If these two latter
tests fail, then reject the authenticator: termi-
nate, without accepting.
If this rule does not
make the server to terminate, the server accepts
and moves on.
This rule ensures that all accepted authenticators will come
from either the simulator, or an adversary that has cor-
rectly decrypted Y (cid:8) into Y , (computed KS) and asked the
query to the oracle H1. The two games G5 and G4 are
For a hash-query Hi(q) (with i ∈ {0, 1, 2, 3}), such that a record (i, q, r) appears in ΛH, the answer is r. Otherwise
the answer r is deﬁned according to the following rule:
(cid:1)Rule H(1) – Choose a random element r ∈ {0, 1}(cid:9)i .
The record (i, q, r) is added to ΛH. If the query is directly asked by the adversary, one adds (i, q, r) to ΛA.
For an encryption-query Ek(Z), such that a record (k, Z,∗, ∗, Z(cid:8)) appears in ΛE , the answer is Z(cid:8). Otherwise the
answer Z(cid:8) is deﬁned according to the following rule:
(cid:1)Rule E (1) – Choose a random element Z(cid:8) ∈ ¯G.
Then one adds the record (k, Z,⊥,E , Z(cid:8)) to ΛE .
For a decryption-query Dk(Z(cid:8)), such that a record (k, Z, ∗,∗, Z(cid:8)) appears in ΛE , the answer is Z. Otherwise, one
applies the following rule to obtain the answer Z:
(cid:1)Rule D(1) – Choose a random element ϕ ∈ Z
(k, Z, ϕ,D, Z(cid:8)) to ΛE .
(cid:8)
q , compute the answer Z = gϕ and add the record
We answer to the Send-queries to the client as follows:
• A Send(U i, Start)-query is processed according to the following rule:
(cid:1)Rule U1(1) – Choose a random exponent θ ∈ Z
q and compute X = gθ.
(cid:8)
Then the query is answered with U, X, and the client instance goes to an expecting state.
• If the client instance U i is in an expecting state, a query Send(U i, (S, Y (cid:8))) is processed by computing the
session key and producing an authenticator. We apply the following rules:
(cid:1)Rule U2(1) – Compute Y = Dpw (Y (cid:8)) and KU = Y θ.
(cid:1)Rule U3(1) – Compute the authenticator Auth = H1(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KU ) and the session key
skU = H0(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KU ).
Finally the query is answered with Auth, the client instance accepts and terminates. Our simulation also
adds ((U, X), (S, Y (cid:8)), Auth) to ΛΨ. The variable ΛΨ keeps track of the exchanged messages.
We answer to the Send-queries to the server as follows:
• A Send(Sj, (U, X))-query is processed according to the following rule:
(cid:1)Rule S1(1) – Choose a random exponent ϕ ∈ Z
q , compute Y = gϕ, Y (cid:8) = Epw (Y ) and KS = X ϕ.
(cid:8)
Finally, the query is answered with S, Y (cid:8) and the server instance goes to an expecting state.
• If the server instance Sj is in an expecting state, a query Send(Sj , H) is processed according to the following
rules:
(cid:1)Rule S2(1) – Compute H
does not hold, the server instance terminates without accepting.
= H1(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS), and check whether H = H
(cid:1)
(cid:1)
. If the equality
If equality holds, the server instance accepts and goes on, applying the following rule:
(cid:1)Rule S3(1) – Compute the session key skS = H0(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS).
Finally, the server instance terminates.
(U, X) ←
An Execute(U i, Sj)-query is processed using successively the simulations of the Send-queries:
Send(U i, Start), (S, Y (cid:8)) ← Send(Sj, (U, X)) and Auth ← Send(U i, (S, Y (cid:8))), and outputting the transcript
((U, X), (S, Y (cid:8)), Auth).
A Reveal(I)-query returns the session key (skU or skS) computed by the instance I (if the latter has accepted).
A Test(I)-query ﬁrst gets sk from Reveal(I), and ﬂips a coin b. If b = 1, we return the value of the session key
sk, otherwise we return a random value drawn from {0, 1}(cid:9)0 .
Figure 2: Simulations
perfectly indistinguishable unless the server rejects a valid
authenticator. Since Y did not appear in a previous session
(since the Game G3), this happens only if the authenticator
had been correctly guessed by the adversary without asking
H1(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS):
| Pr[Encrypt5] − Pr[Encrypt4]| ≤ qs
2(cid:9)1
| Pr[S5] − Pr[S4]| ≤ qs
2(cid:9)1 .
(6)
Game G6: We deﬁne game G6 by aborting the executions
wherein the adversary may have guessed the password (that
is the adversary has correctly decrypted Y (cid:8) into Y ) and
then used it to build and send a valid authenticator to the
server. We reach this aim by modifying the way the server
processes the queries:
(cid:1)Rule S2(6) – Check if ((U, X), (S, Y (cid:8)), H) ∈
ΛΨ. If this is not the case, then reject the authen-
ticator: terminate, without accepting. Check if
(1, U(cid:18)S(cid:18)X(cid:18)Y (cid:18)∗, H) ∈ ΛA. If this is the case, we
deﬁne the event Auth(cid:1)
6 to be true, and abort the
game.
This rule ensures that all accepted authenticators come from
the simulator. The two games G6 and G5 are perfectly
indistinguishable unless either (1, U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS, H) ∈ ΛA
or (1, U(cid:18)S(cid:18)X(cid:18)Y (cid:18)∗, H) ∈ ΛA, which both lead to Auth(cid:1)
6 to
be true:
| Pr[Encrypt6] − Pr[Encrypt5] | ≤ Pr[Auth(cid:1)
6]
| Pr[S6] − Pr[S5] | ≤ Pr[Auth(cid:1)
6].
(7)
Game G7:
In this game, we do no compute the
authenticator Auth and the session key sk using the oracles
H0 and H1, but using the private oracles H2 and H3 so that
the values Auth and sk are completely independent from H0
and H1, but also Y , pw and any of KU or KS. We reach
this aim by using the following rules:
(cid:1)Rule U3(7) – Compute the session key skU =
H2(U(cid:18)S(cid:18)X(cid:18)Y (cid:8)) and the authenticator Auth =
H3(U(cid:18)S(cid:18)X(cid:18)Y (cid:8)).
(cid:1)Rule S3(7) – Compute the session key skS =
H2(U(cid:18)S(cid:18)X(cid:18)Y (cid:8)).
Since we do no longer need to compute the values KU and
KS, we can also simplify the way client and server process
the queries:
(cid:1)Rule U2(7) – Look for a record (pw ,∗,⊥,E , Y (cid:8))
in ΛE . If the record is found, we deﬁne Encrypt7
as true and abort the game.
(cid:1)Rule S1(7) – Choose a random Y (cid:8) ∈ ¯G.
If
(∗, Y (cid:8)) ∈ ΛS, one aborts the game, otherwise
adds the record (j, Y (cid:8)) to ΛS. Then, compute
Y = Dpw (Y (cid:8)).
The games G7 and G6 are indistinguishable unless the
following event AskH occurs: A queries the hash functions
H0 or H1 on U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KU or on U(cid:18)S(cid:18)X(cid:18)Y (cid:18)KS, that is
on the common value U(cid:18)S(cid:18)X(cid:18)Y (cid:18)CDH(X, Y ):
| Pr[Encrypt7] − Pr[Encrypt6]| ≤ Pr[AskH7]
˛˛ ≤ Pr[AskH7].
| Pr[S7] − Pr[S6]| ≤ Pr[AskH7]
7] − Pr[Auth(cid:1)
6]
˛˛ Pr[Auth(cid:1)
(8)
Lemma 1. The probabilities of the events S7, Encrypt7,
7 in game G7 can be upper-bounded by the following
and Auth(cid:1)
values:
Pr[S7] =
1
2
Pr[Encrypt7] ≤ qs
2N
Pr[Auth(cid:1)
7] ≤ qs
2N
.
(9)
Proof. The formal proof of this lemma can be found in
the Appendix A. The main idea in simulating this game
is to choose the password pw at the end of the game. The
password pw is in fact only needed to determine whether the
events Encrypt7 or Auth(cid:1)
7 have occurred, and it turns out that
determining whether these events have occurred can be post-
poned until the time limit has been reached or the adversary
has asked qs queries. The probabilities of Encrypt7 or Auth(cid:1)
7
can then be easily upper-bounded since no information, in
the information theoretical sense, about the password pw is
known by the adversary along this simulation.
Game G8:
In this game, we simulate the executions us-
ing the random self-reducibility of the Diﬃe-Hellman prob-
lem, given one CDH instance (A, B). We do not need to
known the values of θ and ϕ, since the values KU or KS
are no longer needed to compute the authenticator and the
session keys:
(cid:1)Rule U1(8) – Choose a random element α ∈
(cid:8)
q , and compute X = Aα. Also add the record
Z
(α, X) to ΛA.
(cid:1)Rule D(8) – Choose a random element β ∈ Z
(cid:8)
q,
and compute the answer Z = Bβ. Also add the
record (β, Z) to ΛB. If (∗, Z,∗, ∗, Z(cid:8)) ∈ ΛE then
we abort the game; otherwise we add the record
(k, Z,⊥,D, Z(cid:8)) to ΛE .
Pr[AskH8] = Pr[AskH7].
(10)
Remember that AskH8 means that the adversary A had
queried the random oracles H0 or H1 on U(cid:18)S(cid:18)X(cid:18)Y (cid:18)Z,
where Z = CDH(X, Y ). By picking randomly in the ΛA-list
we can get the Diﬃe-Hellman secret value with probability
1/qh. This is a triple (X, Y, CDH(X, Y )). We can then sim-
ply look in the lists ΛA and ΛB to ﬁnd the values α and β
such that X = Aα and Y = Bβ:
CDH(X, Y ) = CDH(A
α
β
, B
) = CDH(A, B)
αβ
.
Thus:
Pr[AskH8] ≤ qhSucccdh
G (t
(cid:1)
).
(11)
This concludes the proofs (the details of the computations
can be found in the Appendix B. Simply note that qE is
the size of ΛE , which contains all the encryption/decryption
queries directly asked by the adversary, but also all the
decryption queries made by our simulation: at most one
per Send-query (direct or through Execute-queries), which
makes qE ≤ qe + qs + qp. Similarly, qS is the number of
involved server instances, and thus qS ≤ qs + qp. Fur-
(cid:1) ≤
thermore, one can easily see that in this last game, t
t + (qs + qp + qe + 1) · τG.
3.3 Unilateral Authentication
The following theorem shows that the OEKE protocol fur-
thermore ensures authentication from client to server, in the
sense that a server instance will never accept an authenti-
cator that has not actually been sent by the correspond-
ing/expected client instance with probability signiﬁcantly
greater than qs/N .
Theorem 2. Let us consider the OEKE protocol, where
SK is the session-key space and Password a ﬁnite dictionary
of size N equipped with the uniform distribution. Let A be
an adversary against the AKE security of OEKE within a
time bound t, with less than qs interactions with the parties
and qp passive eavesdroppings, and, asking qh hash-queries
and qe encryption/decryption queries. Then we have
Advc−auth
oeke
(A) ≤ 3
2
+
× qs
N
+ 3qh × Succcdh
G (t
(cid:1)
)
(2qe + 3qs + 3qp)2
2(q − 1)
+
q2
h + 4qs
2(cid:9)1+1
.
(cid:1) ≤ t + (qs + qp + qe + 1)τG, with τG denoting the
where t
computational time for an exponentiation in G. (Recall that
q is the order of G.)
Proof. The proof is similar to the previous one. But one
can ﬁnd more details in the full version [13].
4. APPLICATIONS
We describe some applications of our security results. We
ﬁrst show that some of the AuthA modes of operations [4]
proposed to the IEEE P1363 Standard working group en-
compass particular cases of OEKE. Then, we make the ideal-
cipher model more concrete.
4.1 Veriﬁer-based Key Exchange
The AuthA protocol standardized by the IEEE organiza-
tion is slightly diﬀerent from our protocol since client and
server do not share a password pw . The AuthA has an added
mechanism preventing an adversary corrupting the password
table of a server from impersonating a client at once. The
AuthA protocol takes advantage of the asymmetric cryptog-
raphy principles when generating the passwords hold by the
client and the server. The client holds a derived password
pwU = H(cid:1)
(U(cid:18)S(cid:18)PW) (where PW is the actual password,
(cid:8)
and pwU has the same entropy but in Z
q ) and the server
holds a value pwS derived from the latter password as fol-
lows pwS = gpwU . It has the same entropy as PW too. It is
then straightforward to modify our protocol to make use of
these values pwU and pwS rather than just the shared pass-
word pw (see Figure 3): pwS plays the role of the common
password, and
H0(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)Z) ← H(H(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)Z)(cid:18)0)
H1(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)Z) ← H(H(U(cid:18)S(cid:18)X(cid:18)Y (cid:18)Z)(cid:18)Y
pwU ).
achieve mutual-authentication; the server sends out the ﬁrst
protocol ﬂow. These diﬀerent ways have already been de-