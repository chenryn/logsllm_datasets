-p use physical addressing (io.va=0)
-q quiet mode (disable colors, reduce output)
-r output in radare commands
-s compute text distance
-ss compute text distance (using levenstein algorithm)
-S [name] sort code diff (name, namelen, addr, size, type, di
st) (only for -C or -g)
-t [0-100] set threshold for code diff (default is 70%)
-x show two column hexdump diffing
-u unified output (---+++)
-U unified output using system 'diff'
-v show version information
-V be verbose (current only for -s)
-z diff on extracted strings
radiff2 是一个基于偏移的比较工具。
222
2.2.1 radare2
重要参数：
-s ：计算文本距离并得到相似度。
－AC ：这两个参数通常一起使用，从函数的角度进行比较。
-g ：得到给定的符号或两个偏移的图像对比。
如： radiff2 -g main a.out b.out | xdot - （需要安装xdot）
-c ：计算不同点的数量。
rafind2
$ rafind2 -h
Usage: rafind2 [-mXnzZhv] [-a align] [-b sz] [-f/t from/to] [-[m
|s|S|e] str] [-x hex] file ..
-a [align] only accept aligned hits
-b [size] set block size
-e [regex] search for regular expression string matches
-f [from] start searching from address 'from'
-h show this help
-m magic search, file-type carver
-M [str] set a binary mask to be applied on keywords
-n do not stop on read errors
-r print using radare commands
-s [str] search for a specific string (can be used multiple t
imes)
-S [str] search for a specific wide string (can be used multi
ple times)
-t [to] stop search at address 'to'
-v print version and exit
-x [hex] search for hexpair string (909090) (can be used mult
iple times)
-X show hexdump of search results
-z search for zero-terminated strings
-Z show string found on each search hit
rafind2 用于在二进制文件中查找字符模式。
重要参数：
-s ：查找特定字符串。
223
2.2.1 radare2
-e ：使用正则匹配。
-z ：搜索以 \0 结束的字符串。
-x ：查找十六进制字符串。
ragg2
224
2.2.1 radare2
$ ragg2 -h
Usage: ragg2 [-FOLsrxhvz] [-a arch] [-b bits] [-k os] [-o file]
[-I path]
[-i sc] [-e enc] [-B hex] [-c k=v] [-C file] [-p pa
d] [-q off]
[-q off] [-dDw off:hex] file|f.asm|-
-a [arch] select architecture (x86, mips, arm)
-b [bits] register size (32, 64, ..)
-B [hexpairs] append some hexpair bytes
-c [k=v] set configuration options
-C [file] append contents of file
-d [off:dword] patch dword (4 bytes) at given offset
-D [off:qword] patch qword (8 bytes) at given offset
-e [encoder] use specific encoder. see -L
-f [format] output format (raw, pe, elf, mach0)
-F output native format (osx=mach0, linux=elf, ..)
-h show this help
-i [shellcode] include shellcode plugin, uses options. see -L
-I [path] add include path
-k [os] operating system's kernel (linux,bsd,osx,w32)
-L list all plugins (shellcodes and encoders)
-n [dword] append 32bit number (4 bytes)
-N [dword] append 64bit number (8 bytes)
-o [file] output file
-O use default output file (filename without exten
sion or a.out)
-p [padding] add padding after compilation (padding=n10s32)
ntas : begin nop, trap, 'a', sequence
NTAS : same as above, but at the end
-P [size] prepend debruijn pattern
-q [fragment] debruijn pattern offset
-r show raw bytes instead of hexpairs
-s show assembler
-v show version
-w [off:hex] patch hexpairs at given offset
-x execute
-z output in C string syntax
225
2.2.1 radare2
ragg2 可以将高级语言编写的简单程序编译成 x86、x86-64 或 ARM 的二进制文
件。
重要参数：
-a ：设置体系结构。
-b ：设置体系结构位数(32/64)。
-P ：生成某种模式的字符串，常用于输入到某程序中并寻找溢出点。
-r ：使用原始字符而不是十六进制对。
ragg2 -P 50 -r`
-i ：生成指定的 shellcode。查看 -L 。
ragg2 -a x86 -b 32 -i exec
-e ：使用指定的编码器。查看 -L 。
rarun2
$ rarun2 -h
Usage: rarun2 -v|-t|script.rr2 [directive ..]
program=/bin/ls
arg1=/bin
# arg2=hello
# arg3="hello\nworld"
# arg4=:048490184058104849
# arg5=:!ragg2 -p n50 -d 10:0x8048123
# arg6=@arg.txt
# arg7=@300@ABCD # 300 chars filled with ABCD pattern
# system=r2 -
# aslr=no
setenv=FOO=BAR
# unsetenv=FOO
# clearenv=true
# envfile=environ.txt
timeout=3
# timeoutsig=SIGTERM # or 15
# connect=localhost:8080
# listen=8080
# pty=false
# fork=true
# bits=32
226
2.2.1 radare2
# pid=0
# pidfile=/tmp/foo.pid
# #sleep=0
# #maxfd=0
# #execve=false
# #maxproc=0
# #maxstack=0
# #core=false
# #stdio=blah.txt
# #stderr=foo.txt
# stdout=foo.txt
# stdin=input.txt # or !program to redirect input to another pro
gram
# input=input.txt
# chdir=/
# chroot=/mnt/chroot
# libpath=$PWD:/tmp/lib
# r2preload=yes
# preload=/lib/libfoo.so
# setuid=2000
# seteuid=2000
# setgid=2001
# setegid=2001
# nice=5
rarun2 是一个可以使用不同环境、参数、标准输入、权限和文件描述符的启动器。
常用的参数设置：
program
arg1 , arg2 ,...
setenv
stdin , stdout
例子：
rarun2 program=a.out arg1=$(ragg2 -P 300 -r)
rarun2 program=a.out stdin=$(python a.py)
rax2
227
2.2.1 radare2
$ rax2 -h
Usage: rax2 [options] [expr ...]
=[base] ; rax2 =10 0x46 -> output in base 10
int -> hex ; rax2 10
hex -> int ; rax2 0xa
-int -> hex ; rax2 -77
-hex -> int ; rax2 0xffffffb3
int -> bin ; rax2 b30
int -> ternary ; rax2 t42
bin -> int ; rax2 1010d
float -> hex ; rax2 3.33f
hex -> float ; rax2 Fx40551ed8
oct -> hex ; rax2 35o
hex -> oct ; rax2 Ox12 (O is a letter)
bin -> hex ; rax2 1100011b
hex -> bin ; rax2 Bx63
hex -> ternary ; rax2 Tx23
raw -> hex ; rax2 -S  raw ; rax2 -s 414141
-b bin -> str ; rax2 -b 01000101 01110110
-B str -> bin ; rax2 -B hello
-d force integer ; rax2 -d 3 -> 3 instead of 0x3
-e swap endianness ; rax2 -e 0x33
-D base64 decode ;
-E base64 encode ;
-f floating point ; rax2 -f 6.3+2.1
-F stdin slurp C hex ; rax2 -F  36
-K randomart ; rax2 -K 0x34 1020304050
-n binary number ; rax2 -n 0x1234 # 34120000
-N binary number ; rax2 -N 0x1234 # \x34\x12\x00\x00
-r r2 style output ; rax2 -r 0x1234
-s hexstr -> raw ; rax2 -s 43 4a 50
-S raw -> hexstr ; rax2 -S  ls.hex
-t tstamp -> str ; rax2 -t 1234567890
-x hash string ; rax2 -x linux osx
-u units ; rax2 -u 389289238 # 317.0M
-w signed word ; rax2 -w 16 0xffff
228
2.2.1 radare2
-v version ; rax2 -v
rax2 是一个格式转换工具，在二进制、八进制、十六进制数字和字符串之间进行转
换。
重要参数：
-e ：交换字节顺序
-s ：十六进制->字符
-S ：字符->十六进制
-D , -E ：base64 解码和编码
交互式使用方法
当我们进入到 Radare2 的交互式界面后，就可以使用交互式命令进行操作。
输入 ? 可以获得帮助信息，由于命令太多，我们只会重点介绍一些常用命令：
[0x00000000]> ?
Usage: [.][times][cmd][~grep][@[@iter]addr!size][|>pipe] ; ...
Append '?' to any char command to get detailed help
Prefix with number to repeat command N times (f.ex: 3x)
|%var =valueAlias for 'env' command
| *[?] off[=[0x]value] Pointer read/write data/values (see ?v
, wx, wv)
| (macro arg0 arg1) Manage scripting macros
| .[?] [-|(m)|f|!sh|cmd] Define macro or load r2, cparse or rla
ng file
| =[?] [cmd] Send/Listen for Remote Commands (rap:/
/, http://, )
| /[?] Search for bytes, regexps, patterns, .
.
| ![?] [cmd] Run given command as in system(3)
| #[?] !lang [..] Hashbang to run an rlang script
| a[?] Analysis commands
| b[?] Display or change the block size
| c[?] [arg] Compare block with given data
| C[?] Code metadata (comments, format, hints
, ..)
229
2.2.1 radare2
| d[?] Debugger commands
| e[?] [a[=b]] List/get/set config evaluable vars
| f[?] [name][sz][at] Add flag at current address
| g[?] [arg] Generate shellcodes with r_egg
| i[?] [file] Get info about opened file from r_bin
| k[?] [sdb-query] Run sdb-query. see k? for help, 'k *',
'k **' ...
| L[?] [-] [plugin] list, unload load r2 plugins
| m[?] Mountpoints commands
| o[?] [file] ([offset]) Open file at optional address
| p[?] [len] Print current block with format and le
ngth
| P[?] Project management utilities
| q[?] [ret] Quit program with a return value
| r[?] [len] Resize file
| s[?] [addr] Seek to address (also for '0x', '0x1'
== 's 0x1')
| S[?] Io section manipulation information
| t[?] Types, noreturn, signatures, C parser
and more
| T[?] [-] [num|msg] Text log utility
| u[?] uname/undo seek/write
| V Enter visual mode (V! = panels, VV = f
cngraph, VVV = callgraph)
| w[?] [str] Multiple write operations
| x[?] [len] Alias for 'px' (print hexadecimal)
| y[?] [len] [[[@]addr Yank/paste bytes from/to memory
| z[?] Zignatures management
| ?[??][expr] Help or evaluate math expression
| ?$? Show available '$' variables and alias
es
| ?@? Misc help for '@' (seek), '~' (grep) (
see ~??)
| ?:? List and manage core plugins
于是我们知道了 Radare2 交互命令的一般格式，如下所示：
[.][times][cmd][~grep][@[@iter]addr!size][|>pipe] ; ...
230
2.2.1 radare2
如果你对 *nix shell, sed, awk 等比较熟悉的话，也可以帮助你很快掌握 radare2 命
令。
在任意字符命令后面加上 ? 可以获得关于该命令更多的细节。如
a? 、 p? 、 !? 、 @? 。
当命令以数字开头时表示重复运行的次数。如 3x 。
! 单独使用可以显示命令使用历史记录。
; 是命令分隔符，可以在一行上运行多个命令。如 px 10; pd 20 。
.. 重复运行上一条命令，使用回车键也一样。
/ 用于在文件中进行搜索操作。