## Feature Request
Now, when a user executes an `insert into on duplicate key update` statement
on a sharding key, an exception will be thrown.
    /**
     * Sharding insert statement validator.
     */
    @RequiredArgsConstructor
    public final class ShardingInsertStatementValidator extends ShardingDMLStatementValidator {
        private final ShardingConditions shardingConditions;
        @Override
        public void preValidate(final ShardingRule shardingRule, final SQLStatementContext sqlStatementContext,
                                final List parameters, final ShardingSphereSchema schema) {
            if (null == ((InsertStatementContext) sqlStatementContext).getInsertSelectContext()) {
                validateMultipleTable(shardingRule, sqlStatementContext);
            }
            InsertStatement sqlStatement = sqlStatementContext.getSqlStatement();
            Optional onDuplicateKeyColumnsSegment = InsertStatementHandler.getOnDuplicateKeyColumnsSegment(sqlStatement);
            String tableName = sqlStatement.getTable().getTableName().getIdentifier().getValue();
            if (onDuplicateKeyColumnsSegment.isPresent() && isUpdateShardingKey(shardingRule, onDuplicateKeyColumnsSegment.get(), tableName)) {
                throw new ShardingSphereException("INSERT INTO ... ON DUPLICATE KEY UPDATE can not support update for sharding column.");
            }
            Optional insertSelectSegment = sqlStatement.getInsertSelect();
            if (insertSelectSegment.isPresent() && isContainsKeyGenerateStrategy(shardingRule, tableName)
                    && !isContainsKeyGenerateColumn(shardingRule, sqlStatement.getColumns(), tableName)) {
                throw new ShardingSphereException("INSERT INTO ... SELECT can not support applying keyGenerator to absent generateKeyColumn.");
            }
            TablesContext tablesContext = sqlStatementContext.getTablesContext();
            if (insertSelectSegment.isPresent() && !isAllSameTables(tablesContext.getTableNames()) && !shardingRule.isAllBindingTables(tablesContext.getTableNames())) {
                throw new ShardingSphereException("The table inserted and the table selected must be the same or bind tables.");
            }
        }
But if the routing results before and after the update have not changed, then
we should support this type of `insert into on duplicate key update`
statement.
### Is your feature request related to a problem?
No
### Describe the feature you would like.