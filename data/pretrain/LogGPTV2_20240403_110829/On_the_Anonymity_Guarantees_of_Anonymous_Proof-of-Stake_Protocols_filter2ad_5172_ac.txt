a block Bk, then it adds all the transaction in its view and
adds it to the block. An example blockchain is represented
at the bottom. All the transactions are encrypted; however, an
adversary can identify transactions produced by itself. Thus,
while all encrypted transactions are represented in black, an
adversarial transaction is represented in red. In the example,
the adversary sends the red transaction at time t to a party
P but due to a network delay (which may be imposed by the
adversary), all other parties receive the transaction only at time
t + ∆. Thus, if party P is elected at time t ≤ tk < t + ∆,
then it adds the red transaction in block Bk. Note that we still
respect the threat model of Crypsinous and do not assume
that the block interval is less than the network delay. For our
attack to succeed we only require that a block be produced
by P between time t and t + ∆. The adversary can identify
that the lottery winner was P since (i) it can identify its own
transaction in Bk, and (ii) the time slot at which the block
was mined is available in the clear. For any other party, if
they are elected in this time frame, Bk will not contain the red
transaction. The attacker uses this information to distinguish
between P and other parties. In the next sections we formalize
this attack, by showing an adversary that can violate the UC-
security guarantees of Crypsinous*.
A. Universal Composability in Brief
Before we formally present the attack we present a quick
primer on universal composability (UC) [29]. In UC security
we consider the execution of the protocol in a special setting
involving an environment machine Z, in addition to the honest
parties and adversary. In UC,
ideal and real models are
considered where a trusted party carries out the computation
in the ideal model while the actual protocol runs in the real
model. The trusted party is also called the ideal functionality.
For example the ideal functionality GPL of [8] is a trusted party
maintaining an ideal private ledger. In the UC setting, there is a
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1822
View of PView of all other honest partiesSRRtt+1t+2t+Δt+2Δtt+1t+2t+Δt+2ΔBkBk-1Bk+1tk-1tktk+1Encrypted txnEncrypted txnsent by adversarytime slotsglobal environment (the distinguisher) that chooses the inputs
for the honest parties, and interacts with an adversary who is
the party that participates in the protocol on behalf of dishonest
parties. At the end of the protocol execution, the environment
receives the output of the honest parties as well as the output
of the adversary which one can assume to contain the entire
transcript of the protocol. When the environment activates the
honest parties and the adversary, it does not know whether the
parties and the adversary are running the real protocol –they
are in the real world, or they are simply interacting with the
trusted ideal functionality, in which case the adversary is not
interacting with any honest party, but is simply “simulating”
to engage in the protocol. In the ideal world the adversary is
therefore called simulator, that we denote by S.
In the UC-setting, we say that a protocol securely realizes
an ideal functionality, if there exist no environment that can
distinguish whether the output he received comes from a real
execution of the protocol between the honest parties and a real
adversary A, or from a simulated execution of the protocol
produced by the simulator, where the honest parties only
forward date to and from the ideal functionality.
The transcript of the ideal world execution is denoted
IDEALF ,S,Z (λ, z) and the transcript of the real world exe-
cution is denoted REALΠ,A,Z (λ, z). A protocol is secure if
the ideal world transcript and the real world transcripts are
indistinguishable. That is, {IDEALF ,S,Z (λ, z}λ∈N,z∈{0,1}∗ ≡
{REALΠ,A,Z (λ, z)}λ∈N,z∈{0,1}∗.
B. Formal Attack to UC-security
According to the deﬁnition of UC-security as shown in the
previous section a protocol is secure if an environment is
unable to distinguish between a real world execution and an
ideal world execution. Therefore in Crypsinous*, to formally
show an attack, we show an environment Z that causes
every simulator S interacting with G∗
PL (i.e., GPL without
leakage) in the ideal world, to generate a transcript (denoted
by IDEALG∗
PL,S,Z) that is distinguishable from the transcript
the real world adversary A generates when executing the
actual protocol Crypsinous* in the real world where it still
has access to the ideal functionalities F ∆
ABC (an anonymous
broadcast functionality, presented in Fig 13) and FNIZK (a zero
knowledge functionality). We denote this real-world execu-
tion as REALCrypsinous*,A,Z. Towards showing this, we should
ﬁrst explain the ideal functionalities G∗
ABC,FNIZK,
describe the entire protocol Crypsinous* and then show how
the simulator S interacts with GPL and how A interacts with
ABC, FNIZK. In the following, we will report
the protocol and F ∆
relevant parts of G∗
PL and the protocol which are sufﬁcient to
provide a gist of the attack. The reader can consult [8] for the
full speciﬁcation.
Abridged Version of the Ideal functionality G∗
PL without
leakage The ideal functionality G∗
PL is shown in Figure 2.
In the actual GPL functionality, the simulator could read the
honest inputs to the functionality, denoted - I TH and know
which party was activated with the MAINTAIN-LEDGER com-
mand. In G∗
PL we hide this information. But we cannot simply
PL and F ∆
omit this information from I TH, then the simulator would have
no idea if this was a party that would win the leader election
in the real world or not. And thus the simulation is trivially
impossible. To this end, we have the G∗
PL functionality add
a bit b that indicates if a party would win, along with the
honest input command. The bit b is set if the party is eligible
to participate according to the selection function (denoted φ).
Thus the simulator does not learn the identity of the party, but
does learn if the party that sent this input would win in the
real world or not.
Abridged ledger functionality with no leakage G∗
PL
The functionality manages a ﬁxed ledger state
state, a buffer of unconﬁrmed transactions buﬀer,
a sequence of honest input I TH, and a ptrP for each
party P indicating its local state, i.e., the length of
the preﬁx of state which is visible to P . (cid:126)ptr is used
to refer to a vector of all parties’ local state pointers.
αP is the relative stake of the party P and φf is the
slot leader assignment function.
Honest party interaction
Upon receiving an input I from a party P at time τ
1) (Extend chain) If I is a MAINTAIN-LEDGER
command, determine stake of P and toss a coin
b that outputs 1 with probability φf (αP ).
Update I TH = I TH(cid:107)(I, b, τ )
2) (Add transaction) If I is a SUBMIT transaction
tx, add tx to the buﬀer. The blinded version of
tx hides the recipient and the amount, but the
sender of the transaction S is revealed to A.
I TH is updated as I TH = I TH(cid:107)(I, blind(tx), τ )
and send blind(tx) to A
3) (Read chain) If I is a READ command then it
receives a blinded version of the state, tailored
for P , that is stateP . (The adversary can set
this state). The blinded version ensures that P
can only use transactions that are meant for
itself.
Adversarial interaction
1) (Read) Upon receiving a READ command from
the adversary send back the blinded
transactions and a blinded version of I TH.
3) The adversary proposes a new block
2) (Delay) The adversary sends (SETSLACK, (cid:126)ptr)
and the ledger updates the pointer for each P .
NEXT-BLOCK. GPL updates the state with this
block if the block is valid, else it updates the
state with a default block.
Figure 2.
functionality of [8].
Informal description of the modiﬁed ledger
Relevant Protocols from Crypsinous We focus only on the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1823
implementation of MAINTAIN-LEDGER command that allows a
party P to extend the ledger.
is
in
as
executed
MAINTAIN-LEDGER
ABC hybrid world (see Fig 13),
Protocol
in Figure 3. We describe the protocol
ΠMAINTAIN-LEDGER
in a F ∆
i.e. assuming an
anonymous network is available. At a high-level, each party
retrieves the latest chains and transactions from the network,
by sending FETCH to the functionality F ∆
ABC. This is its local
view. It then checks if is is eligible to extend the chain, and
if so, picks the longest local valid chain (see [2]) and extends
it with its block.
Abridged Protocol ΠMAINTAIN-LEDGER
We represent a chain using C. To each user is
associated a buﬀer and a Cloc. st is used to denote
the transaction part of a block.
1) Execute FetchInformation - Send FETCH to
F ∆
ABC and receive chains C1 . . .CM and
transactions (tx1 . . . txk). Pick the longest valid
chain Cloc.
Add (tx1 . . . txk) to buﬀer.
2) Run StakingProcedure(buﬀer,Cloc) as follows:
Check if eligible, by evaluating φf (αP ) and an
AVRF. If eligible:
a) For each tx ∈ buﬀer, add the valid tx to st.
b) Create a zero knowledge proof π proving
c) Create a block B ← (π, st) and extend local
d) Send (SEND,Cloc) to F ∆
that the party is eligible.
chain Cloc ← Cloc(cid:107)B
ABC
Figure 3. Ledger Maintenance Protocol
Attack: no UC-simulator exists if G∗
PL does not leak the
identity of the block proposer. We now show an environment
that is able to set up the inputs to the parties, and network
delay, that can easily distinguish the ideal world from the real
world.
The environment Z creates three parties P1, P2 and P3 and
registers them to the system, with a certain stake distribution
say D. Z also initializes the buffer for each of the parties
as buﬀer1 = buﬀer2 = buﬀer3 = φ. Once the parties are
initialized, Z proceeds as in Fig 4
The real world execution REALA,Crypsinous*
In the real
world executions, command MAINTAIN-LEDGER is instantiated
with protocol ΠMAINTAIN-LEDGER. As shown in Figure 3, in this
protocol, each party Pi would ﬁrst fetch the most updated view
from the network by sending FETCH to F ∆
ABC and update their
buﬀeri accordingly. Then, it checks if it is eligible, and if so
extends the chain with transactions in buﬀeri. Assume that Z
activates the players with stake distribution D1 = (P1, 0.001$),
(P2, 0.001$), (P3, 1$)). In this case, P3 is the only party
who might be eligible to extend the chain. Since the delay
for parties P1 and P2 is set as immediate delivery ((P1, 0),
(P2, 0), (P3, ∆)), both parties will have tx∗ in their buffer,
whereas P3 will not. P3 does not include tx∗ in C∗ hence Z
will output 1 with probability equal to the probability of P3
winning the leader election. We assume an eligible party would
proceed with computing a block right away. Now because of
the stake distribution we can say P r[P3 = leader] ≈ 1. Hence,
P r[Z → 1|REALA,Crypsinous*] = P r[P3 = leader] ≈ 1.
Environment Z
1) Activate the players P1, P2, P3 with stake
distribution D1 = (P1, 0.001$), (P2, 0.001$),
(P3, 1$)).
2) Let parties P1, P2, P3 make transactions for
tiny transfers (e.g., 0.000001 units) in order to
populate the chain without altering their stake.
3) For each slot let all parties query
MAINTAIN-LEDGER and populate the blockchain
accordingly. For each SEND, sent to F ∆
ABC, the
transaction is added to the buffers of P1, P2
and P3.
4) At a certain slot sl
∗, let the buffers of the
parties be buﬀer1 = buﬀer2 = buﬀer3 = buﬀer.
At this point, instruct P1 to make a transaction
tx∗ addressed to P2. P1 sends (SEND, tx∗) to
F ∆
ABC. Instruct the adversary A to set the
following vector of delays to F ∆
(P2, 0), (P3, ∆))
+ ∆, all parties are instructed to
perform MAINTAIN-LEDGER. Let C∗ be the
chain sent to F ∆
ABC : ((P1, 0),
∗
ABC.
6) Decision: If C∗ does not include tx∗, output 1.
5) In slot sl
Else output 0.
Figure 4. The distinguishing environment
Now, consider the
The ideal world execution IDEALS,G∗
ideal world.
PL
In the ideal world Z instructs each Pi
PL. G∗
to invoke
MAINTAIN-LEDGER. Each Pi sends I = MAINTAIN-LEDGER
to G∗
PL updates I TH and sends I to the simulator S.
The simulator will prepare the block by following protocol
ΠMAINTAIN-LEDGER but leveraging the fact that it can simulate
the behaviour of FNIZK and F ∆
ABC. By simulating the net-
work functionality F ∆
ABC the simulator is able to learn the
transactions that are sent over the network by the real world
parties. Moreover S learns the delays that the environment Z
instructed the real world adversary to set.
At slot sl∗, the simulator learns that a party has been elected
and attempts to run ΠMAINTAIN-LEDGER. The ﬁrst step is to retrieve
the information from F ∆
ABC. In this case, S learns the delay
conﬁguration ((P1, 0), (P2, 0), (P3, ∆)) and computes the
buffers for each party, where buﬀer3 does not include tx∗.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:16:55 UTC from IEEE Xplore.  Restrictions apply. 
1824
Since the simulator only knows the buffers of each party and
that one of the three parties has won the selection, but not
which one. To create C∗ the simulator will be required to pick
one of these buffers. Note that S does not know the distribution
of the stake, so it needs to make a decision according to its
own strategy. However, ﬁx any strategy for choosing the block
proposer, one can show an environment that chooses different
stake distributions, that would nullify that strategy.
the
Thus
advantage
Hence, the probability of simulating this attack corresponds
to the probability p of guessing the party that is eligible to
extend the chain. Hence, P r[Z → 1|IDEALS,G∗
environment Z in
distinguishing between the two worlds is (1 − p)
(cid:54)=
(cid:54)≡
{IDEALF ,S,Z (λ, z}λ∈N,z∈{0,1}∗
negl (n)
{REALΠ,A,Z (λ, z)}λ∈N,z∈{0,1}∗. Since UC security demands
that there should be a single simulator that works for any
environment and input distribution,
is
insecure.
the above protocol