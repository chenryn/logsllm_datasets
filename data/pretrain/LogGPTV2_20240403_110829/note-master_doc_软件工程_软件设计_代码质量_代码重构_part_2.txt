class Customer {
  get plan() {return this._plan;}
  get discountRate() {return this.plan.discountRate;}
}
```
- 搬移语句到函数
使用这个方法将分散的逻辑聚合到函数里面，方便理解修改
```js
result.push(`title: ${person.photo.title}`); 
result.concat(photoData(person.photo));
function photoData(aPhoto) { 
 return [
  `location: ${aPhoto.location}`,
  `date: ${aPhoto.date.toDateString()}`,
 ];
}
```
↓
```js
result.concat(photoData(person.photo));
function photoData(aPhoto) { 
 return [
  `title: ${aPhoto.title}`,
  `location: ${aPhoto.location}`,
  `date: ${aPhoto.date.toDateString()}`,
 ];
}
```
- 搬移语句到调用者
上述的反向操作
对于代码演进，函数某些代码职责发生变化，将它们移除出去
- 以函数调用取代内联代码
一些函数的函数名就拥有足够的表达能力
```js
let appliesToMass = false; 
for(const s of states) {
  if (s === "MA") appliesToMass = true;
}
```
↓
```js
appliesToMass = states.includes("MA");
```
- 移动语句
让存在关联的东西一起出现，可以使代码更容易理解
```js
const pricingPlan = retrievePricingPlan(); 
const order = retreiveOrder();
let charge;
const chargePerUnit = pricingPlan.unit;
```
↓
```js
const pricingPlan = retrievePricingPlan(); 
const chargePerUnit = pricingPlan.unit; 
const order = retreiveOrder();
let charge;
```
- 拆分循环
对一个循环做了多件事的代码，拆分它，使各段代码职责更加明确
虽然这样可能会对性能造成一些损失
```js
let averageAge = 0;
let totalSalary = 0;
for (const p of people) {
 averageAge += p.age;
 totalSalary += p.salary;
}
averageAge = averageAge / people.length;
```
↓
```js
let totalSalary = 0;
for (const p of people) { 
 totalSalary += p.salary;
}
let averageAge = 0;
for (const p of people) {
 averageAge += p.age;
}
averageAge = averageAge / people.length;
```
- 以管代取代循环
一些逻辑如果采用管道编写，可读性会更强
```js
const names = [];
for (const i of input) {
  if (i.job === "programmer") 
    names.push(i.name);
}
```
↓
```js
const names = input
  .filter(i => i.job === "programmer")
  .map(i => i.name);
```
- 移除死代码
移除那些永远不会允许的代码
### 重新组织数据
- 拆分变量
如果一个变量被用于多种用途，很明显违反了单一职责原则，这样的代码会造成理解上的困难
```js
let temp = 2 * (height + width); 
console.log(temp);
temp = height * width; 
console.log(temp);
```
↓
```js
const perimeter = 2 * (height + width); 
console.log(perimeter);
const area = height * width; 
console.log(area);
```
- 字段改名
对于命名不够良好的字段进行改名
- 以查询取代派生变量
使用查询封装变量是消除可变数据的第一步
```js
get discountedTotal() {return this._discountedTotal;} 
set discount(aNumber) {
 const old = this._discount; 
 this._discount = aNumber; 
 this._discountedTotal += old - aNumber;
}
```
↓
```js
get discountedTotal() {return this._baseTotal - this._discount;} 
set discount(aNumber) {this._discount = aNumber;}
```
- 将引用对象改为值对象
如果非一定需要引用对象，使用值对象不可变的特性能避免很多问题
- 将值对象改为引用对象
如果一个对象需要在多个地方做更新，值对象就不适合了，需要改为引用
### 简化条件逻辑
- 分解条件表达式
使用函数封装条件逻辑，提升代码的可理解性
```js
if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd)) 
 charge = quantity * plan.summerRate;
else
 charge = quantity * plan.regularRate + plan.regularServiceCharge;
```
↓
```js
if (summer())
 charge = summerCharge(); 
else
 charge = regularCharge();
```
- 合并条件表达式
一些条件的返回值都相等，就将它们封装到同一个函数逻辑里面
```js
if (anEmployee.seniority  12) return 0;
if (anEmployee.isPartTime) return 0;
```
↓
```js
if (isNotEligibleForDisability()) return 0; 
function isNotEligibleForDisability() {
 return ((anEmployee.seniority  12)
     || (anEmployee.isPartTime));
}
```
- 以卫语句取代嵌套条件表达式
有时候单一出口原则，似乎不是那么重要
```js
function getPayAmount() { 
 let result;
 if (isDead)
  result = deadAmount(); 
 else {
  if (isSeparated)
   result = separatedAmount(); 
  else {
   if (isRetired)
    result = retiredAmount(); 
   else
    result = normalPayAmount();
  }
 }
 return result;
}
```
↓
```js
function getPayAmount() {
 if (isDead) return deadAmount();
 if (isSeparated) return separatedAmount(); 
 if (isRetired) return retiredAmount(); 
 return normalPayAmount();
}
```
- 以多态取代条件表达式
如果发现一些行为适合用多态取代，试试这样重构它
```js
switch (bird.type) {
 case 'EuropeanSwallow': 
  return "average";
 case 'AfricanSwallow':
  return (bird.numberOfCoconuts > 2) ? "tired" : "average"; 
 case 'NorwegianBlueParrot':
  return (bird.voltage > 100) ? "scorched" : "beautiful"; 
 default:
  return "unknown";
```
↓
```js
class EuropeanSwallow { 
 get plumage() {
  return "average";
 }
class AfricanSwallow { 
 get plumage() {
   return (this.numberOfCoconuts > 2) ? "tired" : "average";
 }
class NorwegianBlueParrot { 
 get plumage() {
   return (this.voltage > 100) ? "scorched" : "beautiful";
}
```
- 引入特例
所谓特例，就是满足这个类的行为，但却表达了特例的含义
```js
if (aCustomer === "unknown") customerName = "occupant";
```
↓
```js
class UnknownCustomer {
    get name() {return "occupant";}
```
- 引入断言
断言提供了一种对系统当前状态的假设，对调试以及阅读很有帮助
```js
if (this.discountRate)
  base = base - (this.discountRate * base);
```
↓
```js
assert(this.discountRate>= 0); 
if (this.discountRate)
  base = base - (this.discountRate * base);
```
### 重构API
- 查询函数和修改函数分离
对于无副作用的函数，有助于测试
```js
function getTotalOutstandingAndSendBill() {
  const result = customer.invoices.reduce((total, each) => each.amount + total, 0);
  sendBill();
  return result;
}
```
↓
```js
function totalOutstanding() {
  return customer.invoices.reduce((total, each) => each.amount + total, 0);
}
function sendBill() { 
  emailGateway.send(formatBill(customer));
}
```
- 函数参数化
本质还是消除重复，将函数名字中的参数提取到参数列表中
```js
function tenPercentRaise(aPerson) { 
  aPerson.salary = aPerson.salary.multiply(1.1);
}
function fivePercentRaise(aPerson) { 
  aPerson.salary = aPerson.salary.multiply(1.05);
}
```
↓
```js
function raise(aPerson, factor) {
  aPerson.salary = aPerson.salary.multiply(1 + factor);
}
```
- 移除标记参数
标记参数的存在会增加理解接口调用的难度
```js
function setDimension(name, value) { 
 if (name === "height") {
  this._height = value; 
  return;
 }
 if (name === "width") { 
  this._width = value; 
  return;
 }
}
```
↓
```js
function setHeight(value) {this._height = value;} 
function setWidth (value) {this._width = value;}
```
- 保持对象完整
传递整个对象能更好地应对未来的变化
```js
const low = aRoom.daysTempRange.low; 
const high = aRoom.daysTempRange.high; 
if (aPlan.withinRange(low, high))
```
↓
```js
if (aPlan.withinRange(aRoom.daysTempRange))
```
- 以查询取代参数
参数列表尽量避免重复，参数列表越短越容易理解
```js
availableVacation(anEmployee, anEmployee.grade); 
function availableVacation(anEmployee, grade) {}
```
↓
```js
availableVacation(anEmployee)
function availableVacation(anEmployee) {}
```
- 以参数取代查询
上述操作的反向重构，如果不想函数依赖某个元素，那就使用这个方式
- 移除设值函数
取消设值函数，代表着数据不应该被修改的意图
```js
class Person {
  get name() {...}
  set name(aString) {...}