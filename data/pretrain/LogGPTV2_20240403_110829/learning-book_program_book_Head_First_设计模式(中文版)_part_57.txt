态代理，在儿页前有这个API的概况。Java会
为我们创建两个代理，我们只需要提供
handler来处理代理转来的方法。
步骤一：
创建两个InvocationHandler。
InvocationHandler实现了代理的行为，正如
你将看到的，Java负责创建真实代理类和对
象。我们只需提供在方法调用发生时知道
我们需要两个
做什么的handler。
这个。
步骤二：
我们在运行时创
写代码创建动态代理。
建代理本身。
我们需要写一些代码产生代理类，并实例
化它。等一下你就会看到这些代码。
步骤三：
Proxy
OwnerinvocationHandler
request)
invoke)
利用适当的代理包装任何PersonBean对象。
当我们需要使用PersonBean对象时，如果不是顾
客自己（在这种情况下，称为“拥有者”），就
当顾客正在看他自己的6ean时。
是另一个顾客正在检查的服务使用者（在这种情
当顾客正在看另一个人的bean时。
况下，我们叫它“非拥有者”）。
L
不管是哪一种情况，我们都为PersonBean创建适合
Proxy
NonOwnerl
的代理。
request()
(ayosu)
你现在的位置》
479
---
## Page 516
创建调用处理器
步骤一：创建InvocationHandler
我们知道需要写两个InvocationHandler（调用处理器），其中一个给拥有者使用，另一个给非拥有者
使用。究竞什么是InvocationHandler呢？你可以这么想：当代理的方法被调用时，代理就会把这个调
用转发给InvocationHandler，但是这并不是通过调用InvocationHandler的相应方法做到的。那么，是
如何做到的？让我们看看InvocationHandler的接口：
>
OwnerlnvocationHandler
invoke()
这里只有一个名为invoke（)的方法，不管代理被调用的是何种方法，处理器被调用的一定是
invoke0方法。让我们看看这是如何工作的：
假设proxy的setHotOrNotRating（）方法被调
用。
②
proxy会接着调用
InvocationHandler
proxy.setHotOrNotRating(9);
的invoke()方法。
invoke(Objectproxy，Method method，Object[]args)
Method类是rellectionAPJ的一部分
调用RealSubject方法的代
利用它的setName（）方法，我们就可
③handler决定要如何处
置这个请求，可能会
码。
以知道proxy被调用的方法是什么。
转发给RealSubject。
handler到底是如何决定
的呢？等一下你就知道
return method.invoke(person,
args)
个
了。
我们调用原始proxy被调用的方
这是被调用的
使用原始的
法。这个对象在调用时被传给
对象。
变量。
我们。只不过加载调用的是真
正的主题（person）。
480
第11章
---
## Page 517
代理模式
继续创建lnvocationHandler......
当proxy调用invokeO时，要如何应对？通常，你会先检查该方法是否
来自proxy，并基于该方法的名称和变量做决定。现在我们就来实现
OwnerlnvocationHandler，以了解工作机制
JnwocationHandlet是java,lang.
ellect包的一部分，所以我们常
要impott它。
所有调用处理器都实现
JnvocationHandler
import java.lang.reflect. *;
我们将person传入构造器
public class OwnerInvocationHandler implements InvocationHandler (
并保持它的引用。
PersonBean person;
public OwnerInvocationHandler (PersonBean person)
每次proxy的方法被调用，就
this.person = person;
金导政proxy调用此方法。
public Object invoke(Object proxy, Method method, Object[] args)
throws IllegalAccessException (
try
如果方法是一个settet，
我
if (method.getName ().startsWith("get"))
们就调用person内的方法。
return method.invoke (person, args);
}else if （method.getName().equals("setHotOrNotRating")){
throw new IllegalAccessException();
K
}else if (method.getName().startsWith("set"))
否则，如果方法是
return method.invoke (person, args);
setHotOtNotRating）.我们就
！
地出llesalAccessException表
)catch (InvocationTargetException e){
示不允许。
e.printStackTrace ();
return null;
如果真正主题批出
因为我们是拥有老，所以任何
异常的话，就金执
其他set方法都可以，
真正主题上调用它。
我们就在
行这里。
如果诵用其他的方法，
律不理，返图null。
你现在的位置
481
---
## Page 518
创建你自己的lnvocationHandler.....
NonOwnerInvocationHandler工作的方式除了它允许调用setHotOrNotRatingO和不允许调
练习
用其他set方法之外，与OwnerInvocationHandler是很相似的。请写出NonOwnerInvocatio
nHandler的代码：
482
第11章
---
## Page 519
代理模式
步骤二：创建Proxy类并实例
化Proxy对象
现在，只剩下创建动态Proxy类，并实例化Proxy对象了。让我们开始编写一个以PersonBean为参数，并
知道如何为PersonBean对象创建拥有者代理的方法。也就是说，我们要创建一个代理，将它的方法调用
转发给OwnerlnvocationHandler。代码如下：
此方法常要一个peiso对象作为参数，然后返回它
的代理，因为代理和主延有相同的接口，所以我们
此代码创建了代理，这个
返图一个PersonBean。
代研有点五，所以要小心
查看它。
我们利用Ptoxy类的静态
newProxynstance方法创建
PersonBean getOwnerProxy (PersonBean person){
代理·
L
return (PersonBean) Proxy.newProxyInstance(
将personBean的类载入器当做
person.getClass () .getClassLoader (),
person.getClass () .getInterfaces (),
参数..
new OwnerInvocationHandler (person));
代理需要实现的接
将person传入调用处理器的构造器中。如果你回到
调用处理器（在这里是
几页前，就会发现这正是处理器能够访问真实主题
OwnernvocationHandler)
的原因。
Sharpenyourpencil
虽然有一点复杂，但是创建动态代理所需要的代码其实很短。请你写下
getNonOwnerProxyO，该方法会返回NonOwnerlnvocationHandler的代理：
更进一步：你能够写下getProxy(方法，参数是handler和person，
返回值是使用此handler的代理吗？
你现在的位置，
483
---
## Page 520
找到你的配对
测试配对服务
现在我们就来试试配对服务，看看代理如何控制对setter方法的访问。
main(创建测试程序对象
public class MatchMakingTestDrive f
调用其dnive（）方法开始测试。
//这里有实例变量
public static void main(String[] args) {
MatchMakingTestDrive test = new MatchMakingTestDrive () ;
test.drive () ;
构造器初始化配对服务人员
数据库。
public MatchMakingTestDrive ()
initializeDatabase () ;
从数据库中取出一
个人。
public void drive ()(
PersonBean joe = getPersonFromDatabase("Joe Javabean");
……然后创建一个换
PersonBean ownerProxy = getOwnerProxy(joe);
有者代理。
System.out.println(*Name is " + ownerProxy.getName());
ownerProxy.setInterests("bowling, Go") ;
调用setter。
System.out.println("Interests set from owner proxy");
然后调用setter。
try{
ownerProxy.setHotOrNotRating(10);
试着改变评分。
）catch （Exception e){
个
System.out.println("Can't set rating from owner proxy");
这应该是行不通的！
System.out.println("Rating is "+ ownerProxy.getHotOrNotRating());
创建一个非拥有者
PersonBean nonOwnerProxy = getNonOwnerProxy(joe);
>
代理。
System.out.println("Name is "+ nonOwnerProxy.getName ());
try{
...用settet。
nonOwnerProxy.setInterests("bowling, Go");
跟着调用setter。
}catch （Exception e)(
System.out.println("Can't set interests from non owner proxy");
}
这应该是行不通的！
nonOwnerProxy.setHotOrNotRating(3);
System.out.printin("Rating set from non owner proxy");
x
试着设置评分。
//这里还有其他的方法，像getOwnerProxy和getNonOwnerProxy
个
这应该行得通！
484
第11章
---
## Page 521
代理模式
执行结果
8java MatchMakingTestDrive
Name is Joe Javabean
我们的OwnerProxy元许
Interests set from owner proxy
setter和setter，但不元许改变
HotONot评分
Can't set rating from owner proxy
Rating is7
我们的NonOwerProxy只元许
Name is Joe Javabean
setter和改变HotOrNot评分，但不
元许setter。
Can't set interests from non owner proxy
Rating set from non owner proxy
Rating is5
PDG
你现在的位置
485
---
## Page 522
代理问答
DumbQuestions
问：
有没有办法知道某个类
句：
你为什么使用skeleton？
在哪里？是不是指在运行时才将它实
是不是代理类呢？
我以为我们早在Java1.2就已经摆脱
例化并和handler联系起来？
答：可以。代理类有一个静
skeleton了。
态方法，叫做isProxyClass(）。此方法
答：
不是的。动态代理之所
的返回值如果为true，表示这是一个
含：
你说的没错，我们不
以被称为动态，是因为运行时才将它
动态代理类。除此之外，代理类还会
需要真的产生skeleton，因为Java
的类创建出来。代码开始执行时，还
实现特定的某些接口。
1.2的RMI可以利用reflectionAPI直接
没有proxy类，它是根据需要从你传
问：
将客户调用分派给远程服务。尽管如
入的接口集创建的。
对于我能传入new-
此，我们还是希望呈现skeleton，因
Proxyinstance（）的接口类型，有没
为这可以帮助你从概念上理解内部的
有什么限制？
机制。
看起来像一个很奇怪的proxy。它没
答：
问：
有实现所代理的类的任何方法。
是有一些限制。首先，
我听说，在Java5，甚
我们总是传给newProxylnstance（）一
至连stub都不需要产生了，这是真
个接口数组，此数组内只能有接口，
的吗？
Handler根本就不是proxy，它只是一
不能有类。如果接口不是public，就
个帮助proxy的类，proxy会把调用转
必须属于同一个package，不同的接
合：
是真的。Java5的RMI和
发给它处理。Proxy本身是利用静态口内，不可以有名称和参数完全一
动态代理搭配使用、动态代理动态产
的Proxy.newProxyInstance(）方法在运
样的方法。还有一些比较细微的限
生stub、选程对象的stub是java.lang.
行时动态地创建的。
制，你应该好好研读一下javadoc的
reflect.Proxy实例（连同一个调用处
文件。
理器），它是自动产生的，来处理所
有把客户的本地调用变成远程调用的
细节。所以，你不再需要使用rmic
客户和远程对象沟通的一切都在幕后
处理掉了。
486
第11章
---
## Page 523
代理模式
连连福
请将下列模式和描述配对：
模式
描述
包装另一个对象，并提
装饰者
供不同的接口。
包装另一个对象，并
外观
提供额外的行为。
代理
包装另一个对象，并
控制对它的访问。
包装许多对象以简化
适配器
它们的接。
你现在的位置
487
---
## Page 524
代理动物园