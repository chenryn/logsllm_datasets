### Code Analysis and Explanation

In the provided code, there are two key points of interest beyond the statement that accesses the indexer:

1. **String.IsNullOrEmpty Method:**
   - The `String.IsNullOrEmpty` method is used to check if a string is either null or empty.
   - This method is preferred for validating whether a string contains a valid value.
   - It returns `true` if the string is null or empty; otherwise, it returns `false`.

2. **Ternary Operator (?:):**
   - The ternary operator `? :` is used in the statement that populates the `Text` property of the `phone-Number` text box.
   - This operator acts as an inline `if...else` statement.
   - In the given code, if `String.IsNullOrEmpty(personsPhoneNumber.Text)` is `true`, the text "Not Found" is displayed on the form. Otherwise, the value from the `Text` property of the `personsPhoneNumber` variable is displayed.

### Implementation of `findByPhoneNumberClick` Method

1. **Locate the `findByPhoneNumberClick` Method:**
   - Find the `findByPhoneNumberClick` method in the `MainPage.xaml.cs` file. It is located below the `findByNameClick` method.

2. **Method Description:**
   - The `findByPhoneNumberClick` method is triggered when the "Find By Phone Number" button is clicked.
   - Currently, the method is empty except for a `// TODO:` comment. You need to implement it as follows:

3. **Implementation Steps:**
   - **a.** Read the value of the `Text` property from the `phoneNumber` text box. This value is a string containing the phone number entered by the user.
   - **b.** If the string is not empty, use the indexer to search for the name corresponding to the phone number in the `PhoneBook`.
   - **c.** Write the `Text` property of the `Name` structure returned by the indexer to the `name` text box on the form.

4. **Completed Method:**
   ```csharp
   private void findByPhoneNumberClick(object sender, RoutedEventArgs e)
   {
       string text = phoneNumber.Text;
       if (!String.IsNullOrEmpty(text))
       {
           PhoneNumber personsPhoneNumber = new PhoneNumber(text);
           Name personsName = this.phoneBook[personsPhoneNumber];
           name.Text = String.IsNullOrEmpty(personsName.Text) ? "Not Found" : personsName.Text;
       }
   }
   ```

### Testing the Application

1. **Build the Solution:**
   - On the Build menu, click "Build Solution" and correct any errors that occur.

2. **Start Debugging:**
   - On the Debug menu, click "Start Debugging."

3. **Add Entries:**
   - Type your name and phone number in the appropriate text boxes.
   - Expand the command bar and click "Add" (you can expand the command bar by clicking the ellipsis).
   - When you click "Add," the `Add` method stores the information in the phone book and clears the text boxes for the next search.

4. **Repeat Additions:**
   - Repeat the previous step several times with different names and phone numbers to populate the phone book.
   - Note that the application does not check for duplicate entries, so ensure you provide unique names and phone numbers for clarity.

5. **Find by Name:**
   - Type a name you used in the previous step into the `Name` box and click "Find By Name."
   - The corresponding phone number will be retrieved from the phone book and displayed in the `Phone Number` text box.

6. **Find by Phone Number:**
   - Type a phone number for a different contact in the `Phone Number` box and click "Find By Phone Number."
   - The corresponding contact name will be retrieved from the phone book and displayed in the `Name` box.

7. **Test Non-Existent Entry:**
   - Type a name that was not entered in the phone book into the `Name` box and click "Find By Name."
   - The `Phone Number` box will display the message "Not Found."

8. **Close the Form:**
   - Close the form and return to Visual Studio 2017.

### Summary

In this chapter, you learned how to use indexers to provide array-like access to data in a class. You created indexers that can take an index and return the corresponding value using the `get` accessor, and you used the `set` accessor to populate values in the indexer.

### Next Steps

- **Continue to the Next Chapter:**
  - If you want to continue to the next chapter, keep Visual Studio 2017 running and proceed to Chapter 17, "Introducing generics."
- **Exit Visual Studio 2017:**
  - If you want to exit Visual Studio 2017 now, go to the File menu, click "Exit." If a Save dialog box appears, click "Yes" to save the project.

### Quick Reference

- **Specify an Integer Value Using Binary or Hexadecimal Notation:**
  - Use the `0b0` (for binary values) or `0x0` (for hexadecimal values) prefixes. Include `_` separators for readability.
  - Example:
    ```csharp
    uint moreBinData = 0b0_11110000_01011010_11001100_00001111;
    uint moreHexData = 0x0_F0_5A_CC_0F;
    ```

- **Display an Integer Value as Its Binary or Hexadecimal Representation:**
  - Use the `Convert.ToString` method and specify `2` (for binary) or `16` (for hexadecimal) as the number base.
  - Example:
    ```csharp
    uint moreHexData = 0x0_F0_5A_CC_0F;
    Console.WriteLine($"{Convert.ToString(moreHexData, 2)}");
    // displays 11110000010110101100110000001111
    ```

- **Create an Indexer for a Class or Structure:**
  - Declare the type of the indexer, followed by the `this` keyword, and then the indexer arguments in square brackets.
  - Example:
    ```csharp
    struct RawInt
    {
        public bool this[int index]
        {
            get { ... }
            set { ... }
        }
    }
    ```

- **Define an Indexer in an Interface:**
  - Define an indexer with the `get` and/or `set` keywords.
  - Example:
    ```csharp
    interface IRawInt
    {
        bool this[int index] { get; set; }
    }
    ```

- **Implement an Interface Indexer in a Class or Structure:**
  - In the class or structure that implements the interface, define the indexer and implement the accessors.
  - Example:
    ```csharp
    struct RawInt : IRawInt
    {
        public bool this[int index]
        {
            get { ... }
            set { ... }
        }
    }
    ```

- **Implement an Indexer Defined by an Interface Using Explicit Interface Implementation:**
  - In the class or structure that implements the interface, specify the interface but do not specify the indexer accessibility.
  - Example:
    ```csharp
    struct RawInt : IRawInt
    {
        bool IRawInt.this[int index]
        {
            get { ... }
            set { ... }
        }
    }
    ```

### Chapter 17: Introducing Generics

#### Objectives
- Explain the purpose of generics.
- Define a type-safe class using generics.
- Create instances of a generic class based on types specified as type parameters.
- Implement a generic interface.
- Define a generic method that implements an algorithm independent of the type of data it operates on.

#### Problem: Misusing the `object` Type

To understand generics, consider the problem they solve. Suppose you need to model a first-in, first-out (FIFO) structure like a queue. A class like the following can be created:

```csharp
class Queue
{
    private const int DEFAULTQUEUESIZE = 100;
    private int[] data;
    private int head = 0, tail = 0;
    private int numElements = 0;

    public Queue()
    {
        this.data = new int[DEFAULTQUEUESIZE];
    }

    public Queue(int size)
    {
        if (size > 0)
        {
            this.data = new int[size];
        }
        else
        {
            throw new ArgumentOutOfRangeException("size", "Must be greater than zero");
        }
    }

    public void Enqueue(int item)
    {
        if (this.numElements == this.data.Length)
        {
            throw new Exception("Queue full");
        }
        this.data[this.head] = item;
        this.head++;
        this.head %= this.data.Length;
        this.numElements++;
    }

    public int Dequeue()
    {
        if (this.numElements == 0)
        {
            throw new Exception("Queue empty");
        }
        int queueItem = this.data[this.tail];
        this.tail++;
        this.tail %= this.data.Length;
        this.numElements--;
        return queueItem;
    }
}
```

This class uses an array to provide a circular buffer for holding the data. The size of the array is specified by the constructor. An application uses the `Enqueue` method to add an item to the queue and the `Dequeue` method to pull an item from the queue. The `head` and `tail` fields track where to insert and retrieve items, and `numElements` indicates the number of items in the array.

However, this implementation is limited to queues of `int` values. To create queues of other types, such as `string`, `float`, or custom classes like `Circle`, `Horse`, or `Whale`, you can modify the class to use the `object` type:

```csharp
class Queue
{
    ...
    private object[] data;
    ...
    public Queue()
    {
        this.data = new object[DEFAULTQUEUESIZE];
    }
    public Queue(int size)
    {
        ...
        this.data = new object[size];
        ...
    }
    public void Enqueue(object item)
    {
        ...
    }
    public object Dequeue()
    {
        ...
        object queueItem = this.data[this.tail];
        ...
        return queueItem;
    }
}
```

While this allows for more flexibility, it requires explicit casting and can lead to runtime errors if the wrong type is dequeued. Additionally, it incurs performance overhead due to boxing and unboxing of value types.

#### Generics Solution

C# provides generics to address these issues. Generics allow you to create type-safe, flexible, and efficient classes and methods. A generic class is defined with a type parameter, which is a placeholder for a specific type.

Example of a generic `Queue` class:

```csharp
class Queue<T>
{
    private const int DEFAULTQUEUESIZE = 100;
    private T[] data;
    private int head = 0, tail = 0;
    private int numElements = 0;

    public Queue()
    {
        this.data = new T[DEFAULTQUEUESIZE];
    }

    public Queue(int size)
    {
        if (size > 0)
        {
            this.data = new T[size];
        }
        else
        {
            throw new ArgumentOutOfRangeException("size", "Must be greater than zero");
        }
    }

    public void Enqueue(T item)
    {
        if (this.numElements == this.data.Length)
        {
            throw new Exception("Queue full");
        }
        this.data[this.head] = item;
        this.head++;
        this.head %= this.data.Length;
        this.numElements++;
    }

    public T Dequeue()
    {
        if (this.numElements == 0)
        {
            throw new Exception("Queue empty");
        }
        T queueItem = this.data[this.tail];
        this.tail++;
        this.tail %= this.data.Length;
        this.numElements--;
        return queueItem;
    }
}
```

In this generic `Queue` class, `T` is a type parameter. When you instantiate the `Queue` class, you specify the type to be used, such as `Queue<int>`, `Queue<string>`, or `Queue<Circle>`.

This approach eliminates the need for casting, improves type safety, reduces boxing and unboxing, and makes it easier to create generalized classes and methods.