observe that all 2000 outputs generated in the ﬁrst reset are
found in some combination of the following 9 trials. This
security vulnerability has been reported to Microsoft.
Our experiments on FreeBSD and Windows were very
limited, but are sufﬁcient to demonstrate that the problem of
RNG reset vulnerabilities extends beyond the Linux RNGs.
B. Reset vulnerabilities (GRI)
As described in Section II, the output of the GRI RNG
depends only on the state values HV and secret S and the
inputs cycle counter, jifﬁes and PID (CC, J, P ). Across
multiple resets from the same snapshot, it’s very plausible
for the same process (with same PID P ) to be the ﬁrst to
request an output. So the only new information after a snap-
shot resumption is the cycle counter value. For a virtualized
cycle counter, in which the cycle counter value will always
start from the same value (stored in the snapshot), we might
expect reset vulnerabilities. In fact we observe no repeated
values output by GRI across any of its invocations in any of
the 50 resets on VMware that we performed. This can likely
be attributed to small variations in timing between snapshot
resumption and the ﬁrst call to GRI. For 10,000 Xen resets,
with the non-virtualized RDTSC, we did not see any repeats
as well.
C. Snapshot Compromise Vulnerabilities
If a snapshot is disclosed to an attacker, then one must
assume that all of the memory contents are available to them.
Not only is there likely to be data in memory of immediate
damage to an unwitting future user of the snapshot (e.g.,
secret keys cached in memory), but
the RNG state is
exposed. While we can’t hope to prevent cached secret keys
from leaking, we might hope that the RNG recovers from
this state compromise when later run from the snapshot. As
we saw above, predicting future /dev/(u)random in various
situations is trivial since the attacker can often just run the
snapshot (on similar hardware). When not in these situations,
however, and for GRI, we would like to estimate the the
complexity of using the compromised state to attempt to
predict outputs generated after a later snapshot resumption.
We use the same methodology as used above with Xen,
with the workload that reads from /dev/urandom repeatedly
after snapshot resumption. We then use our methodology
from Section IV to give lower-bound estimates on the com-
plexity of predicting the very ﬁrst few outputs to /dev/uran-
dom or GRI.
Figure 7 shows our estimated attack complexity after
reset. The complexity estimates for the /dev/urandom outputs
are much smaller than for their boot
time counterparts
(Figure 5 in Section IV). The security of the GRI outputs
is similar to boot because GRI security under our model
is driven only by the cumulative uncertainty of the cycle
counters from each output request. However, /dev/urandom
outputs have security dominated by the input sequence
length (cid:4)i. There are far fewer inputs during a resump-
tion than at boot. This suggests possible vulnerability to
prediction attacks, but for brevity we do not pursue them
further having already shown above that repeats give rise to
predictable outputs.
569
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
/dev/(u)random
Ti
κi
0
20
27
27
0.7 ms
1.4 ms
4.1 ms
7.1 ms
(cid:2)i
2
2
2
2
i
1
2
5
10
GRI
Ti
21 s
21 s
21 s
21 s
κi
22
33
66
105
The minimum estimated complexity κi to predict the ﬁrst
Figure 7.
few outputs of /dev/(u)random and GRI after a Xen guest is reset from a
snapshot. Ti is the time that output i is generated (relative to resumption);
(cid:2)i is the median sequence length.
VI. THE WHIRLWIND RNG
In this section we detail
the Whirlwind RNG, which
provides a simpler, faster, and more secure randomness
service. While our measurement study focused primarily
on virtual environments, the design of Whirlwind seeks to
provide security for a variety of settings and in general be
a drop-in replacement for both /dev/(u)random and GRI. As
such, we must handle a variety of goals:
• Simplicity: The current /dev/(u)random design is com-
plex, requiring signiﬁcant effort to understand and audit
its design and implementation (with 1041 lines of
code) [11]. In contrast, Whirlwind targets simplicity and
requires 676 lines of code.
• Virtualization security: Unlike all prior RNG designs
we are aware of, Whirlwind is explicitly designed to
provide security even in virtualized environments that
might entail VM snapshot and image reuse.
• Fast entropy addition: Whirlwind uses a simple en-
tropy gathering function designed to be fast, usually
it requires only 0.5 μs on our 2.67 GHz platform,
though 1/8 of the invocations it computes a single SHA-
512 compression. Despite using a slower hash function
(SHA-512), we show it to be about as fast as entropy
addition in the current /dev/(u)random. Whirlwind uses
per-CPU input buffers to reduce lock contention and
permit the amount of buffered inputs to scale with the
number of CPUs.
• Cryptographically sound: We propose a new design for
the cryptographic core of Whirlwind, inspired by the
recent work of [6]. Whirlwind dispenses with the linear
feedback shift registers of Linux /dev/(u)random, and
achieves the robustness security goal detailed in [6].
• Immediately deployable: The basic Whirlwind design
is a drop-in replacement for Linux /dev/(u)random, and
requires no hypervisor support.
A. Whirlwind design
Figure 8 depicts the main components of Whirlwind. It
uses two entropy pools, a fast pool and a slow pool, as done
in FreeBSD’s Yarrow RNG [13]. The fast pool consists of a
per-CPU input buffer If ast and a single (global) seed value
Sf ast for the fast pool. The slow pool consists of a per-
CPU input buffer Islow, a private (internal) seed S(cid:2)
slow, and
Input
d
Sf ast
If ast
Islow
S(cid:2)
slow
h
h
p
Sslow
Block diagram of the Whirlwind RNG. Every dth input is
Figure 8.
directed to the slow pool, and after p updates it is for use in output
generation. Here h is the SHA-512 compression function.
a public seed Sslow. In our implementation all input buffers
are 1024 bits in size which corresponds to one full message
block for SHA-512. All three seeds in our implementation
are 512 bits, which represents a chaining value for SHA-512.
We denote the SHA-512 compression function by h and the
SHA-512 hash function by H. Let n be the number of bits
of output for both h and H. We initialize the seeds values
as: Sf ast ← h(IV, 1) and Sf ast ← h(IV, 2) where IV is
the SHA-512 initialization vector and 1 and 2 are encoded
in some unambiguous manner [25].
Inputs are written to the fast pool If ast by default and
every dth input is diverted to the slow pool Islow. In our
implementation d = 10 which ensures that the fast pool
receives the majority of inputs and thus changes rapidly
even in low-entropy conditions. Each input is 128-bits and
consists of the input source’s unique identiﬁer (created by
the GCC macro __COUNTER__ and encoded using 32 bits),
the lower 32 bits of the cycle counter (or jifﬁes on platforms
without a valid cycle counter), and 64 bits of optional,
source-provided information. Input buffers are per-CPU,
obviating the need for locking to process most inputs. We
denote the macro used for adding inputs by ww add input().
When an input pool is full (after 8 inputs are written
to a pool), a SHA-512 compression function application
is performed, with the chaining variable equal to the pool
seed value Sf ast or S(cid:2)
slow and the message block equal to
the input pool. The result becomes the new seed for that
pool. Locks are used to ensure that the compression function
is computed atomically. Thus, Whirlwind is computing a
hash over the sequence of inputs in an online fashion. This
ensures the robustness security property introduced by Dodis
et al. [6] and which they showed Linux’s /dev/(u)random
fails to achieve. Robustness requires (informally speaking)
that no matter where entropy resides in the sequence of
inputs to the RNG the RNG outputs always beneﬁt from
the added entropy.
In the case of the slow pool, the internal seed S(cid:2)
slow is
used as the hash chaining value and upon every pth hash the
internal seed S(cid:2)
slow is copied to the public seed Sslow. This
ensures that the slow pool represents a multiple of p times as
570
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 ww generate bytes(b)
s1 ← Sf ast
s2 ← Sslow
t ← (cid:8)8b/n(cid:9)
ctr ← atomic inc(Ctr, t) − t
hw ← read hw random()
ww add input()
for i = 0 to t do
end for
ww add input()
Sf ast ← h(Sf ast, 01024)
return ﬁrst b bytes of output
CC ← get cycle counter()
output[i] ← H(3 || s1 || s2 || (ctr + i) || CC || P || hw )
Routine for generating b bytes of output from the Whirlwind RNG. The
variable Ctr is a global output counter.
many inputs as the fast pool. In our implementation p = 50,
which, combined with d = 10, means the public slow seed
is updated every 500 inputs.
Consumers within the kernel request random values from
Whirlwind using get random int() or get random bytes().
From user mode, processes read random values via the exist-
ing /dev/random or /dev/urandom read interfaces. Whirlwind
handles all such requests in the same manner and, in par-
ticular, we have completely removed the GRI RNG and we
do not differentiate between /dev/random and /dev/urandom.
The current implementation does not support writing to the
RNG from user-level processes, though it would be easy to
add.
Algorithm 1 describes output generation in pseudocode.
When Whirlwind receives an output request for b bytes,
the RNG ﬁrst copies the slow and fast pool seeds from
static (global) memory into local memory on the stack.
Whirlwind then prepares a response by computing a SHA-
512 hash over the concatenation of: (1) the local copy of
the slow pool seed; (2) the local copy of the fast pool
seed; (3) a 64-bit request counter Ctr; (4) the current cycle
counter CC; and (5) 64-bits read from a CPU hardware
RNG (e.g., RDRAND), if available. The request counter
Ctr is atomically pre-incremented for the number of blocks
requested (to reserve counter values for output generation)
and is incremented locally for each block of output. This
ensures that even if concurrent requests have identical values
(seeds, P, CC) the outputs are guaranteed to be unique. Two
inputs are fed back into the RNG for each output requested.
Finally, a single application of h is used to ensure forward
security.
Initializing Whirlwind. We also include one special mech-
anism for quickly initializing (or refreshing) the entropy of
Whirlwind, which is needed to prevent a boot-time entropy
hole (like the ones in the legacy RNG, see Section IV) and
to recover from a VM reset. For boot time, we would have
liked to use the recent suggestion of Mowery et al. [23]
Algorithm 2 ww bootstrap()
for i ← 0 to (cid:2) do
CC ← get cycle counter()
ww add input()
k ← CC mod (cid:2)max
for j ← 0 to k do
end for
a ← (j/(CC + 1)) − (a ∗ i)
end for
The Whirlwind entropy bootstrapping mechanism used during boot and
snapshot resumption. The values (cid:2) and (cid:2)max are conﬁgured parameters
(default 100, 1024).
to quickly generate entropy in the initial stages of boot via
timing of functions in the kernel init function. Unfortunately,
this is not fast enough for us, since we observe reads to the
RNG early in init. We therefore use an approach based on
timing of instructions that may take a variable number of
cycles, which has been suggested and used previously [1,24].
This provides nondeterminism (by way of contention and
races within the CPU state), as shown in prior studies [20].
Pseudocode is shown in Algorithm 2. In our implementation
we have (cid:4) = 100 and (cid:4)max = 1024.
Whirlwind calls this entropy timing loop before the ﬁrst
use of the RNG during boot, and at the start of resumption
from a snapshot. The latter takes advantage of Xen’s resume
callback, which is a virtual interrupt delivered to the guest
OS when it ﬁrst starts following a snapshot resumption.
Similar facilities exist in other hypervisors.
Entropy sources.
It is easy to add entropy sources to
Whirlwind, by simply inserting ww add input() in appropri-
ate places. This requires no understanding of RNG internals
(such as the role of entropy estimates), unlike in the existing
Linux /dev/(u)random. In terms of performance, submitting
an input to the RNG is fast, but may still require a single
SHA-512 compression function call on the critical path.
While we expect that, in deployment, Whirlwind might use
a wider set of entropy sources, for comparison purposes, we
restrict our experiments here to use only the same set of en-
tropy sources as used by the current /dev/(u)random imple-
mentation in Linux as well as those called in ww bootstrap()
and ww generate bytes().
Hypervisor-provided entropy. As we show below, the
already-mentioned software-based sources are already sufﬁ-
cient to provide security during boots and resets. Some users
may nevertheless desire (for defense-in-depth) support for
the Xen management Dom0 VM (also running Whirlwind)
to provide an additional entropy source for a guest VM’s
Whirlwind RNG. In current practice, host-to-guest entropy
injection is facilitated via virtual hardware RNGs, that then
are fed into the Linux /dev/(u)random by way of a user-level
daemon (rngd). Unlike these systems, we will ensure host-
provided entropy is inserted into Whirlwind immediately
after a VM resumption, before any outputs are generated.
571
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
To do so, we pass additional entropy with the Xenstore
facility in Xen, which uses shared memory pages between
Dom0 (the management VM) and the guest VM to provide a
hierarchical key-value store. We modiﬁed Dom0 to read 128
bytes from /dev/urandom and write the value to Xenstore.
During a resume callback, Whirlwind detects that a reset
occurred, reads the value from Xenstore and adds the value
to the RNG via repeated input events. All this requires less
than 30 lines of modiﬁcation to Xen’s operation library
libxl. The entire operation requires 75 ms on average, and
the rareness of the operation (once per resumption) makes
this tolerable.
Other instantiations. For concreteness, we chose several
suggested values of (sometimes implicit) parameters, but it
is easy to modify the Whirlwind implementation to support
different choices. For instance, instead of letting h be the
SHA-512 compression function, one could use the full
SHA-512 (or some other secure hash, such as SHA-3),
which leads to the RNG computing a hash chain. The
approach detailed is faster because it reduces the number of