# []{#configuring-policy-based-routing-to-define-alternative-routes_configuring-and-managing-networking.html#configuring-policy-based-routing-to-define-alternative-routes_configuring-and-managing-networking}第 22 章 配置基于策略的路由以定义其他路由 {.title}
:::
默认情况下，RHEL
中的内核决定使用路由表根据目标地址转发网络数据包。基于策略的路由允许您配置复杂的路由场景。例如，您可以根据各种条件路由数据包，如源地址、数据包元数据或协议。
本节论述了如何使用 NetworkManager 配置基于策略的路由。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在使用 NetworkManager 的系统中，只有 `nmcli`{.literal}
工具支持设置路由规则，并将路由分配到特定表。
:::
::: section
::: titlepage
# []{#configuring-policy-based-routing-to-define-alternative-routes_configuring-and-managing-networking.html#routing-traffic-from-a-specific-subnet-to-a-different-default-gateway-using-networkmanager_configuring-policy-based-routing-to-define-alternative-routes}使用 NetworkManager 将特定子网的流量路由到不同的默认网关 {.title}
:::
本节论述了如何将 RHEL 配置为默认路由将所有流量路由到互联网供应商 A
的路由器。使用基于策略的路由，RHEL
会将从内部工作站子网接收的流量路由到供应商 B。
该流程假设以下网络拓扑：
[![policy based
routing](images/policy-based-routing.png)]{.inlinemediaobject}
::: itemizedlist
**先决条件**
-   系统使用 `NetworkManager`{.literal} 配置网络，这是默认设置。
-   要在流程中设置的 RHEL 路由器有四个网络接口：
    ::: itemizedlist
    -   `enp7s0`{.literal} 接口连接到供应商 A 的网络。提供商网络中的网关
        IP 为 `198.51.100.2`{.literal}，网络使用了 `/30`{.literal}
        网络掩码。
    -   `enp1s0`{.literal} 接口连接到供应商 B 的网络。提供商网络中的网关
        IP 是 `192.0.2.2`{.literal}，网络使用 `/30`{.literal} 网络掩码。
    -   `enp8s0`{.literal} 接口连接到带有内部工作站的
        `10.0.0.0/24`{.literal} 子网。
    -   `enp9s0`{.literal} 接口与公司服务器的 `203.0.113.0/24`{.literal}
        子网相连。
    :::
-   内部工作站子网中的主机使用 `10.0.0.1`{.literal}
    作为默认网关。在此过程中，您可以将这个 IP 地址分配给路由器的
    `enp8s0`{.literal} 网络接口。
-   服务器子网中的主机使用 `203.0.113.1`{.literal}
    作为默认网关。在此过程中，您可以将这个 IP 地址分配给路由器的
    `enp9s0`{.literal} 网络接口。
-   `firewalld`{.literal} 服务已启用并激活。
:::
::: orderedlist
**步骤**
1.  将网络接口配置为供应商 A:
    ``` literallayout
    # nmcli connection add type ethernet con-name Provider-A ifname enp7s0 ipv4.method manual ipv4.addresses 198.51.100.1/30 ipv4.gateway 198.51.100.2 ipv4.dns 198.51.100.200 connection.zone external
    ```
    `nmcli connection add`{.literal} 命令创建 NetworkManager
    连接配置集。以下列表描述了该命令的选项：
    ::: itemizedlist
    -   ` 类型`{.literal} 以太网``{=html}
        ：定义连接类型是以太网。
    -   `con-name`{.literal} `connection_name`{.literal}
        ：设置配置集的名称。使用有意义的名称以避免混淆。
    -   `ifname`{.literal} `network_device`{.literal} ：设置网络接口。
    -   `ipv4.method`{.literal} `manual`{.literal}: 启用来配置静态 IP
        地址。
    -   `ipv4.addresses`{.literal} `IP_address/subnet_mask`{.literal}
        ：设置 IPv4 地址和子网掩码。
    -   `ipv4.gateway`{.literal} `IP_address`{.literal}
        ：设置默认网关地址。
    -   `ipv4.dns`{.literal} `IP_of_DNS_server`{.literal} ：设置 DNS
        服务器的 IPv4 地址。
    -   `connection.zone`{.literal} `firewalld_zone`{.literal}
        ：将网络接口分配给定义的 `firewalld`{.literal}
        区域。请注意，`firewalld`{.literal} 会自动启用分配给
        `外部`{.literal} 区的接口的伪装。
    :::
2.  将网络接口配置为供应商 B:
    ``` literallayout
    # nmcli connection add type ethernet con-name Provider-B ifname enp1s0 ipv4.method manual ipv4.addresses 192.0.2.1/30 ipv4.routes "0.0.0.0/0 192.0.2.2 table=5000" connection.zone external
    ```
    此命令使用 `ipv4.routes`{.literal} 参数而不是
    `ipv4.gateway`{.literal}
    来设置默认网关。这需要为这个连接分配默认网关到不同于默认值的路由表(`5000`{.literal})。当连接被激活时，NetworkManager
    会自动创建这个新的路由表。
3.  将网络接口配置为内部工作站子网：
    ``` literallayout
    # nmcli connection add type ethernet con-name Internal-Workstations ifname enp8s0 ipv4.method manual ipv4.addresses 10.0.0.1/24 ipv4.routes "10.0.0.0/24 table=5000" ipv4.routing-rules "priority 5 from 10.0.0.0/24 table 5000" connection.zone trusted
    ```
    此命令使用 `ipv4.routes`{.literal} 参数将静态路由添加到路由表，其 ID
    为 `5000`{.literal}。`10.0.0.0/24`{.literal}
    子网的这个静态路由使用本地网络接口的 IP 地址到供应商
    B(`192.0.2.1`{.literal})作为下一个跃点。
    另外，命令使用 `ipv4.routing-rules`{.literal} 参数添加带有优先级
    `5`{.literal} 的路由规则，该规则将来自 `10.0.0.0/24`{.literal}
    子网的流量路由到表 `5000`{.literal}。低的值具有更高的优先级。
    请注意，`ipv4.routing-rules`{.literal} 参数的语法与
    `ip rule add`{.literal} 命令中的语法相同，但
    `ipv4.routing-rules`{.literal} 总是需要指定优先级。
4.  将网络接口配置为服务器子网：
    ``` literallayout
    # nmcli connection add type ethernet con-name Servers ifname enp9s0 ipv4.method manual ipv4.addresses 203.0.113.1/24 connection.zone trusted
    ```
:::
::: orderedlist
**验证步骤**
1.  在内部工作站子网的 RHEL 主机上：
    ::: orderedlist
    1.  安装 `traceroute`{.literal} 软件包：
        ``` literallayout
        # dnf install traceroute
        ```
    2.  使用 `traceroute`{.literal} 工具显示到互联网主机的路由：
        ``` literallayout
        # traceroute redhat.com
        traceroute to redhat.com (209.132.183.105), 30 hops max, 60 byte packets
         1  10.0.0.1 (10.0.0.1)     0.337 ms  0.260 ms  0.223 ms
         2  192.0.2.1 (192.0.2.1)   0.884 ms  1.066 ms  1.248 ms
         ...
        ```
        命令的输出显示路由器通过 `192.0.2.1`{.literal}
        发送数据包，即供应商 B 的网络。
    :::
2.  在服务器子网的 RHEL 主机上：
    ::: orderedlist
    1.  安装 `traceroute`{.literal} 软件包：
        ``` literallayout
        # dnf install traceroute
        ```
    2.  使用 `traceroute`{.literal} 工具显示到互联网主机的路由：
        ``` literallayout
        # traceroute redhat.com
        traceroute to redhat.com (209.132.183.105), 30 hops max, 60 byte packets
         1  203.0.113.1 (203.0.113.1)    2.179 ms  2.073 ms  1.944 ms
         2  198.51.100.2 (198.51.100.2)  1.868 ms  1.798 ms  1.549 ms
         ...
        ```
        命令的输出显示路由器通过 `198.51.100.2`{.literal}
        发送数据包，即供应商 A 的网络。
    :::
:::
::: title
**故障排除步骤**
:::
在 RHEL 路由器中：
::: orderedlist
1.  显示规则列表：
    ``` literallayout
    # ip rule list
    0:	from all lookup local
    5:	from 10.0.0.0/24 lookup 5000
    32766:	from all lookup main
    32767:	from all lookup default
    ```
    默认情况下，RHEL 包含表 `local`{.literal}、`main`{.literal} 和
    `default`{.literal} 的规则。
2.  显示表 `5000`{.literal} 中的路由：
    ``` literallayout
    # ip route list table 5000
    0.0.0.0/0 via 192.0.2.2 dev enp1s0 proto static metric 100
    10.0.0.0/24 dev enp8s0 proto static scope link src 192.0.2.1 metric 102
    ```
3.  显示接口和防火墙区：
    ``` literallayout
    # firewall-cmd --get-active-zones
    external
      interfaces: enp1s0 enp7s0
    trusted
      interfaces: enp8s0 enp9s0
    ```
4.  验证 `外部`{.literal} 区是否启用了伪装：
    ``` literallayout
    # firewall-cmd --info-zone=external
    external (active)
      target: default
      icmp-block-inversion: no
      interfaces: enp1s0 enp7s0
      sources:
      services: ssh
      ports:
      protocols:
      masquerade: yes
      ...
    ```
:::
::: itemizedlist
**其他资源**
-   `nm- settings(5)`{.literal} man page 中的 IPv4``{=html}
    设置部分
-   `nm-settings(5)`{.literal} man page 中的
    `Connection settings`{.literal} 部分
-   `nmcli(1)`{.literal} man page 中的
    `Connection management 命令`{.literal} 部分
-   [是否可以在 RHEL 中使用 NetworkManager
    设置基于策略的路由？](https://access.redhat.com/solutions/1257153){.link}
:::
:::
:::
[]{#creating-a-dummy-interface_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#creating-a-dummy-interface_configuring-and-managing-networking.html#creating-a-dummy-interface_configuring-and-managing-networking}第 23 章 创建 dummy 接口 {.title}
:::
作为 Red Hat Enterprise Linux 用户，您可以创建并使用 dummy
网络接口进行调试和测试。dummy
接口提供了一个设备来路由数据包而无需实际传送数据包。它可让您创建使用网络管理器（NetworkManager）管理的其他回送设备，使不活跃
SLIP（Serial Line Internet Protocol）地址类似本地程序的实际地址。
::: section
::: titlepage
# []{#creating-a-dummy-interface_configuring-and-managing-networking.html#creating-a-dummy-interface-with-both-an-ipv4-and-ipv6-address-using-nmcli_creating-a-dummy-interface}使用 nmcli 使用 IPv4 和 IPv6 地址创建 dummy 接口 {.title}
:::
您可以创建带有各种设置的 dummy 接口。这个步骤描述了如何使用 IPv4 和 IPv6
地址创建 dummy 接口。创建 dummy 接口后，NetworkManager
会自动将其分配给默认的 `公共`{.literal} 防火墙区。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要配置没有 IPv4 或 IPv6 地址的 dummy 接口，请将 `ipv4.method`{.literal}
和 `ipv6.method`{.literal} 参数设置为 `禁用`{.literal}。否则，IP
自动配置失败，NetworkManager 会取消激活连接并删除 dummy 设备。
:::
::: orderedlist
**流程**
1.  要创建一个名为 [*dummy0*]{.emphasis} 的、带有静态 IPv4 和 IPv6
    地址的 dummy 接口，请输入：
    ``` literallayout
    # nmcli connection add type dummy ifname dummy0 ipv4.method manual ipv4.addresses 192.0.2.1/24 ipv6.method manual ipv6.addresses 2001:db8:2::1/64
    ```
2.  可选： 要查看 dummy 接口，请输入：
    ``` literallayout
    # nmcli connection show
    NAME            UUID                                  TYPE      DEVICE
    enp1s0          db1060e9-c164-476f-b2b5-caec62dc1b05  ethernet    ens3
    dummy-dummy0    aaf6eb56-73e5-4746-9037-eed42caa8a65  dummy    dummy0
    ```
:::
::: itemizedlist
**其它资源**
-   nm-settings(5) man page
:::
:::
:::
[]{#assembly_using-nmstate-autoconf-to-automatically-configure-the-network-state-using-lldp_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_using-nmstate-autoconf-to-automatically-configure-the-network-state-using-lldp_configuring-and-managing-networking.html#assembly_using-nmstate-autoconf-to-automatically-configure-the-network-state-using-lldp_configuring-and-managing-networking}第 24 章 使用 nmstate-autoconf 使用 LLDP 自动配置网络状态 {.title}
:::
网络设备可以使用 Link Layer Discovery Protocol(LLDP)在 LAN
中公告其身份、功能和邻居。`nmstate-autoconf`{.literal}
实用程序可使用这些信息来自动配置本地网络接口。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`nmstate-autoconf`{.literal}
工具仅作为技术预览提供。红帽产品服务级别协议（SLA）不支持技术预览功能，且其功能可能并不完善，因此红帽不建议在生产环境中使用它们。这些预览可让用户早期访问将来的产品功能，让用户在开发过程中测试并提供反馈意见。
如需有关
[技术预览功能支持范围](https://access.redhat.com/support/offerings/techpreview){.link}
的信息，请参阅红帽客户门户网站中的技术预览功能支持范围。
:::
::: section
::: titlepage
# []{#assembly_using-nmstate-autoconf-to-automatically-configure-the-network-state-using-lldp_configuring-and-managing-networking.html#proc_using-nmstate-autoconf-to-automatically-configure-network-interfaces_assembly_using-nmstate-autoconf-to-automatically-configure-the-network-state-using-lldp}使用 nmstate-autoconf 自动配置网络接口 {.title}
:::
`nmstate-autoconf`{.literal} 实用程序使用 LLDP
来识别连接到交换机配置本地设备的 VLAN 设置。
此流程假设以下场景，交换机使用 LLDP 广播 VLAN 设置：
::: itemizedlist
-   RHEL 服务器的 `enp1s0`{.literal} 和 `enp2s0`{.literal}
    接口连接到交换机配置 VLAN ID `100`{.literal} 和 VLAN 名称
    `prod-net`{.literal} 的端口。
-   RHEL 服务器的 `enp3s0`{.literal} 接口连接到使用 VLAN ID
    `200`{.literal} 和 VLAN 名称 `mgmt-net`{.literal} 配置的交换机端口。
:::
然后，`nmstate-autoconf`{.literal}
工具使用此信息在服务器上创建以下接口：
::: itemizedlist
-   `bond100`{.literal} - 带有 `enp1s0`{.literal} 和 `enp2s0`{.literal}
    的绑定接口，作为端口。
-   `prod-net`{.literal} - `bond100`{.literal} 顶部的 VLAN 接口，VLAN ID
    为 `100`{.literal}。
-   `mgmt-net`{.literal} - `enp3s0`{.literal} 上带有 VLAN ID
    `200`{.literal}的 VLAN 接口