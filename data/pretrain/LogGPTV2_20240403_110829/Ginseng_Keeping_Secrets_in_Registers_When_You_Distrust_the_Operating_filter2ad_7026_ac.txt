two arguments o f hmac sha1
( r e g v e c ) :
( d y n d s t ) :
site. In the second pass, the allocator allocates registers for
insensitive variables by referencing the table and excluding
sensitive registers.
2) Protecting sensitive registers at a call site: In a function
call,
the caller and callee collaboratively save the caller’s
context in the stack following the calling convention. It is a
compiler’s responsibility to insert the code that saves/restores
the context. When a function call is made within a sensitive
function, Ginseng’s compiler must save/restore sensitive reg-
isters only using the secure stack. That is, it emits instructions
sending a request to GService through the secure APIs to be
described in IV-A. Protecting sensitive registers at a call site
is analogous to protecting them on an exception (IV-C1). Both
have to save and restore the content of sensitive registers only
using the secure stack. The difference is that the timing of an
exception is unknown at compile time; thus, GService must
intercept exceptions at runtime to protect sensitive registers.
The request sent to GService at a call site contains the
call site identiﬁer and information about sensitive registers
and sensitive parameters of the callee. The identiﬁer helps
GService match the data saved in the secure stack with the
corresponding call site. It is uniquely assigned to each call
site by the compiler, `a la AppInsight [53]. The compiler refers
to the sensitivity table (III-C1) and inserts code to save all
sensitive registers to the secure stack. It also decides which
sensitive registers should be moved to registers for parameter
passing according to the calling convention, i.e., x0-x7 in
AArch64.
One may wonder if a compromised Normal world entity
could exploit the call site identiﬁer to retrieve and modify
sensitive data from the secure stack. GService addresses this
by ensuring the code integrity of sensitive functions and that
the request comes from a sensitive function, by checking the
return address of the request saved in the exception link register
(or the stack in x86). We will elaborate this in IV-C2.
5
x15x14x13x12TimeLose sensitivityReuse for another sensitive variableInsensitiveSensitiveRegisterTABLE II.
GINSENG SECURE API
API
# exposed to the Ginseng compiler
s_writeMoveV (id_top, id_btm, reg_vec, dyn_dst)
s_readV
s_entry
s_exit
# exposed to developers
s_read
(id_top, id_btm, reg_idx)
s_write (id_top, id_btm, reg_idx)
(id_top, id_btm, reg_vec)
(id_top, id_btm)
(id_top, id_btm)
Description
hides and restores sensitive data at a call site. The compiler assigns a unique identiﬁer to each
call site and encodes the hide/move information in the third parameter. dyn_dst is used for
CFI and indicates whether the next branch instruction is for a function pointer.
s_entry() checks code integrity. s_exit() sanitizes sensitive data from registers. The
compiler assigns a unique identiﬁer to each sensitive function.
read and write a datum from and to GService. A 128-bit unique identiﬁer (id_top and
id_btm) speciﬁes the datum to be read or written. The third parameter reg_idx decided
by the Ginseng compiler speciﬁes the source or target register.
Example: To call printf() with no sensitive parameter
(line 23 of Figure 2), the compiler decides to hide all sensitive
registers, x15 and x14 holding key_top and key_bottom.
To call hmac_sha1() with two sensitive parameters (line 16),
the compiler decides to move x15 and x14 to x0 and x1,
respectively. Once the compiler makes the register hide/move
decision, it encodes the decision into the request to be sent to
GService. Figure 4 is an example where the Ginseng compiler
inserts a call to GService (s_writeMoveV()) and decides its
arguments before calling hmac_sha1(). In line 4-13, the com-
piler inserts mov[k] instructions for the call site identiﬁer. In
line 17, the encoded information, 0x2021_0000_0000_0000,
tells GService to move x15 to x0 and x14 to x1.
IV. RUNTIME PROTECTION
The static protection by the Ginseng compiler is necessary
but not sufﬁcient to protect sensitive variables in the Normal
world. A compromised OS may modify a sensitive function
to dump sensitive registers to memory, e.g., via code injection
attacks. It can also access the stack when sensitive registers
are saved to the stack as part of the execution context upon an
exception such as a page fault or interrupt. When a sensitive
function passes sensitive data to a callee, the OS may redirect
the branching to a compromised function by compromising the
control ﬂow.
We now describe Ginseng’s runtime protection against such
accesses. The runtime protection heavily relies on GService,
a passive, app-independent piece of software in the Secure
world. GService ensures the code integrity, data conﬁdentiality
and control-ﬂow integrity (CFI). It does so only for sensitive
functions to minimize overhead. It also modiﬁes the kernel
at three points, when booting, when modifying the kernel
page table, and when handling an exception. Since we do
not trust the OS, the kernel may overwrite the modiﬁcations.
However, when any of these modiﬁcations is disabled, the
kernel will inﬁnitely trigger data aborts trying to modify read-
only memory, thus ensuring sensitive data are always safe.
A. Ginseng internals
GService does not have any app logic. Instead, it tracks
the execution of each sensitive function and provides a secure
stack abstraction for each so that content of sensitive registers
is encrypted before entering the memory. It exports a set of
APIs for the Ginseng compiler (and developer) to insert into
the app to track the execution of sensitive functions and to use
their secure stacks properly.
Function Control Block (fCB):
GService maintains a
per-function data structure, called fCB, in the Secure world,
to trace a sensitive function’s execution. When accessing the
secure stack, the service uses the trace to check a sensitive
function’s integrity and what registers can be sensitive on an
exception (IV-C). GService allocates an fCB instance from
a slab allocator when a sensitive function is ﬁrst executed
(IV-B). It adopts the least recently used (LRU) replacement
policy when the allocator runs low on memory. The instance
contains the information on physical memory address, code
measurement, and a list of sensitive registers for the function.
To trace execution of a sensitive function, the compiler-inserted
code invokes GService at every entry point to a sensitive
function, i.e., beginning of the function and returning from
a callee.
Secure Stack: GService provides a secure stack abstraction
for a sensitive function to save sensitive registers upon context
switch such as a function call and exception. The secure stack
is actually in the Normal world memory but its content is
encrypted by GService. GService exposes two APIs for the
compiler to encrypt/push and pop/decrypt data to and from
the secure stack, respectively.
Secure APIs: The two APIs mentioned above to operate on
the secure stack must bypass the OS. In the ARM architecture,
Ginseng utilizes security violation to bypass the OS. A security
violation occurs when a Normal world program accesses the
Secure world memory. The processor can handle the violation
in three different ways: ignoring the violation, raising an ex-
ternal abort (EA) in the Normal world, or raising an EA in the
Secure world (EL3). We conﬁgure the system to raise an EA in
the Secure world (EL3) by setting the external abort bit of the
secure conﬁguration register (SCR_EL3.EA). Thus, whenever
an app attempts to access the Secure world memory, GService
in the Secure world directly catches it and banishes the OS
(in the Normal world) from the communication. GService
allocates a unique Secure world memory address for each
secure API.
Table II summarizes the three pairs of secure APIs sup-
ported by Ginseng. They are implemented as a library that
will be linked with the app at compile time. The ﬁrst pair
are used by the compiler for accessing the secure stack. The
second pair are used by the compiler to check the code
integrity of a sensitive function at its entry point and to sanitize
the function’s sensitive data from registers at its exit point,
respectively. The last pair are used by app developers to read
and write sensitive data from and to the Secure world. We
note that the compiler cannot use call-by-value scheme and
pass the address of a sensitive variable because the variable is
essentially a register without an address. Instead, the Ginseng
compiler ﬁnds out the index of a sensitive register from the
sensitivity table (III-C1) and passes the index. For example,
6
when the compiler works on run() in Figure 2, it knows that
x15 and x14 are used for key_top and key_bottom. Thus,
it passes 15 and 14 as the third argument of s_read() in
line 31-32.
B. Code integrity of a sensitive function
Without code integrity,
the OS can modify a sensitive
function to access its sensitive data. Ginseng preserves code
integrity by hiding the code pages of sensitive functions from
the kernel with two complementary techniques.
First, we deprive the kernel of its capability of modifying
its page table. At boot time, we make the kernel page table
read-only. We modify the kernel so that when it needs to
modify its page table, the kernel sends a request to GService
via a higher privilege call, secure monitor call in ARM or
hypervisor call in x86. For example, we modify set_pte()
to send a request for setting the attributes of a page table
entry. When GService receives the request, it changes the page
table only when the modiﬁcation would not result in mapping
the sensitive function’s code pages. This technique, assuming
secure boot [1], [2], has been used in prior work [4], [6], [25].
It treats the kernel and app page tables in the same way so
that it can monitor all physical-to-virtual mappings and avoid
double mapping [4] to a sensitive function. We note that secure
boot does not reduce the attack surface of the OS; nor does it
deal with kernel modules loaded after boot, which is allowed
by Ginseng’s threat model.
We also forbid the kernel from overwriting its page table
base register so that it cannot swap the table with a com-
promised one that the kernel can modify. To do so, we trap
writes to the register to GService. On the ARM architecture,
we ﬁrst trap a write to the hypervisor mode (EL2) and then
immediately forward the control to GService in EL3. In a
way, EL2 functions as a relay to EL3, even when there is no
hypervisor. Our benchmark shows the overhead for this trap is
not only small (1.8 K cycles on ARM), but also occurs only
once per booting.
Ginseng’s approach to prevent
the page table swap is
different from prior work because of its uniquely powerful
threat model, with the least restriction on attackers to the best
of our knowledge. Prior work [4], [6], [25] statically removes
the instruction modifying the kernel page table base register
from the kernel
image; and disables support for loadable
kernel modules or does runtime veriﬁcation on loadable kernel
modules. However, with Ginseng’s threat model, these are not
enough. In our threat model, a user-installed root-privileged
app can load a kernel module with instructions modifying the
base register for kernel page table. Thus, Ginseng traps the
instructions at runtime, instead of removing them statically.
Second, at a sensitive function’s entry point, GService
hides sensitive function code pages from the kernel and checks
code integrity, invoked by s_entry() inserted by the Ginseng
compiler. GService ﬁrst walks the kernel page table to ensure
no mapping to the function’s code pages. During the page
table walk, other page table modiﬁcation requests from the
kernel are delayed to avoid TOCTOU attacks. Then, GService
hashes the function code and compares it with one that the
compiler supplies and signs. Only after both checks pass,
GService allocates and initializes an fCB instance for the
Exception Routing: GService intercepts all exceptions when
Figure 5.
sensitive data in registers. The service uses the secure stack to hide potentially
sensitive registers. After the OS handles an exception, the service restores the
data and resumes the function.
function. We note that the page table walk, code hashing, and
fCB initialization only happen when a sensitive function is
invoked for the ﬁrst time. Therefore, the overhead occurs only
once for each function.
C. Data conﬁdentiality
Statically allocating sensitive data to registers is not enough
for data conﬁdentiality. In the event of an exception or a
function call, sensitive registers must be saved to the memory
as a part of execution context. Ginseng’s secure stack provides
storage for sensitive registers, encrypted in the Normal world
memory.
1) Exceptions within a sensitive function: When a CPU
core is executing a sensitive function, an exception may transit
the core into the kernel mode and save sensitive registers to
the memory. GService intercepts all exceptions using dynamic
trapping as shown in 1 in Figure 5. Before handing exception
handling to the OS, GService must save the sensitive registers
to the secure stack ( 2 ). Once the exception is handled by the
OS, it must restore these registers and resume the interrupted
function ( 3 - 5 ). To achieve the above, GService must do three
things.
First, when an exception occurs, GService must intervene
before the OS handles it ( 1 ). Ginseng achieves this with a
technique called dynamic trapping. In Ginseng, sensitive data
can enter registers only via two secure APIs: s_readV() or
s_read(). When either one of them is invoked, GService
inserts the higher privilege call to the beginning of all excep-
tion vectors so an exception will immediately invoke GService.
Dynamic trapping is a runtime modiﬁcation on the kernel code
in the memory but requires a source code change to reserve
room for the higher privilege call. We insert the NOP instruction
at the beginning of the exception vector source code in order to
reserve the room. When the compiler or a developer uses the
secure API to load sensitive data, GService replaces it with the
Secure Monitor Call instruction, i.e., SMC. The replacement is
possible because all instructions have the same length, 32 bits,
in AArch64. In the x86 architecture, due to the variable length
of instructions, one can reserve the room for the hypervisor
call by inserting a three-byte NOP instruction [34], NOP DWORD
ptr [RAX], into the vectors. GService avoids unnecessary
trapping by removing the replacement when sensitive data
7
Exception HandlerDynamic TrappingRich Operating SystemKernel ModeHigher PrivilegeMode•Save context•Return to s_readV()•Restore context•ResumeGinseng ServiceSensitive Data and FunctionGinseng Librarys_readV()ResumeExceptionUser ModeApp12345Secure WorldNormal Worlds e n s i t i v e d a t a
f i r s t
two arguments ∗/
( r e g v e c ) :
s e n s i t i v e d a t a h i d e / move e n c o d i n g
x 2 , # 0x210000000000
l s l #48
x 2 , # 0x2030,
x15 and x13 have
x14 i s a f u n c t i o n p o i n t e r
1 / /
2 / /
3
4 /∗ o m i t t e d : p r e p a r i n g t h e
5
6 / / 3rd argument
7 / /
8 mov
9 movk
10
11 / / 4 t h argument
12 orr
13 bl
14
15 / / b r a n c h i n g t o a f u n c t i o n p o i n t e r
16 bl r
Figure 6. Disassembled CFI Example: the compiler makes the callee’s address
in x14 sensitive and sets x3 to indicate that the next branch instruction for
a function pointer. GService checks the callee’s integrity when servicing
s_writeMoveV().
x 3 , x z r , # 0x1
401ee4 
( d y n d s t ) :
x14
leave registers, i.e., when s_exit() or s_readWriteV() is
invoked.
Second, GService must save sensitive registers to the secure
stack and then return to the OS’ exception handler ( 2 ).
However, at runtime, GService only knows which registers
are potentially sensitive based on the function’s fCB. This is
because the service does not have the sensitivity table (III-C1)
used at compile time. Thus, the service saves all of potentially
sensitive registers in the secure stack.
Finally, once the OS serves the exception, the control must
be handed back to the app after restoring the sensitive data
from the secure stack ( 3 - 5 ). For this, we change the return
address twice to redirect the control ﬂow. At 2 , GService
saves the return address and replaces it with s_readV()’s
address. This makes the kernel return to s_readV()( 3 ), not