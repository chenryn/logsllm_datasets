## 🐛 Bug
Unmatched behavior of numpy and pytorch on indexing with a list of bool value.
## To Reproduce
    import torch
    x = torch.randn(3,4)
    print(x[[True,False,True]])
    print(x.numpy()[[True, False, True]])
With output
    >>> import torch
    >>> x = torch.randn(3,4)
    >>> x[[True,False,True]]
    tensor([[ 0.9176,  0.6378,  1.1367, -1.3373],
            [ 0.4389,  0.2105, -0.7689, -0.5038],
            [ 0.9176,  0.6378,  1.1367, -1.3373]])
    >>> x.numpy()[[True, False, True]]
    array([[ 0.43885437,  0.21049356, -0.76887   , -0.5038339 ],
           [-0.7998242 ,  0.7215161 ,  0.5523575 , -1.6851963 ]],
          dtype=float32)
## Expected behavior
pytorch should behave the same as tensor.
In fact, indexing with byte tensor works:  
`x[torch.Tensor([True,False,True]).byte()]` works
## Environment
Collecting environment information...  
PyTorch version: 1.0.0a0+7df6650  
Is debug build: No  
CUDA used to build PyTorch: 9.0.176
OS: Ubuntu 16.04.3 LTS  
GCC version: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609  
CMake version: version 3.12.0
Python version: 3.6  
Is CUDA available: Yes  
CUDA runtime version: 9.0.176  
GPU models and configuration:  
GPU 0: Tesla K40c  
GPU 1: Tesla K40c
Nvidia driver version: 390.25  
cuDNN version: Probably one of the following:  
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.0.5  
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a
Versions of relevant libraries:  
[pip] numpy (1.15.0)  
[pip] numpydoc (0.7.0)  
[pip] torch (1.0.0a0+7df6650)  
[pip] torchtext (0.2.1)  
[pip] torchvision (0.2.1)  
[conda] magma-cuda90 2.3.0 1 pytorch  
[conda] torch 0.5.0a0+6f6a1f2  
[conda] torch 0.5.0a0+c425d03  
[conda] torch 0.5.0a0+d2f98fc  
[conda] torch 0.5.0a0+2f311be  
[conda] torch 1.0.0a0+7df6650  
[conda] torchtext 0.2.1  
[conda] torchvision 0.2.1