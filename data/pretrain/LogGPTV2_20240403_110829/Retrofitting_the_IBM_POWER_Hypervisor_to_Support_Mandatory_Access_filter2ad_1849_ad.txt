(LPAR)
LPAR
Hosting
LPAR
(VIOS)
Power
Hypervisor
Service
Processor
(SP)
Dispatchable
ACM
PLIC
Dedicated IO
Storage + Network
Virtual I/O
Shared IO
Storage + Network
Run-time
Security
Hooks
Hardware
Management
Console 
(HMC)
ACM (Access Control Module): Policy Decision Point
Security Hook: Policy Enforcement Point
Figure 4. Initial PHYP MAC Design 
our 
this 
resources.  Consequently, 
Once  we  decided  that  MAC  enforcement  should 
reside  on  the  PHYP  platform,  we  thought  that  the 
straightforward  approach  would  be  to  enforce  the 
policy  at  run-time  when  LPARs  bind  to  resources  or 
access 
initial 
implementation  placed  the  ACM  and  security  hooks 
directly  into  PLIC,  see  Figure  4.  Performing  access 
control  decisions  at  resource  binding  or  access  time 
minimizes  the  code  path  between  the  time  of  access 
check  and  the  time  of  resource  access.  Thus,  this 
implementation depends on less code for correctness. It 
also  allows  for  revocation  and  re-labeling  through 
callbacks.  However, 
is 
characterized  by  having  security  hooks  distributed 
throughout many  PLIC  modules  and  leads  to  a  more 
intrusive  implementation.  The  sensitivity  of  PLIC  on 
platform  performance  and  the  intrusiveness  of  this 
solution led to rejection of this approach. 
implementation 
Our  current  implementation,  discussed  in  Section 
3.1,  instruments  Dispatchable  PHYP  with  the  ACM 
and security hooks. It centralizes policy processing and 
decisions into one module, incurs no runtime cost, and 
does not impact PLIC. This approach is driven by our 
observation that the runtime setup is confined through 
the  configuration  settings  in  PHYP.  However,  this 
approach  does  not  support  automatic  revocation  of 
resource access based on re-labeling.  
Our final lesson was that non-security people have 
difficulties  in  understanding  a  security  policy  when 
security  labels  are  defined  in  terms  of  types  and  set 
operations.  Using  the  color  metaphor  for  a  security 
label provided a good way to visualize the concept to 
non-security  people.  Additionally,  using  the  same 
types in both STE and CHW policies further simplified 
the understanding the MAC policy. 
6. Future Work 
a 
Future  work  includes  extending  MAC  support  to 
PHYP  management  applications  and  making  the 
VIOSs (hosting LPARs) MAC aware. 
 Supporting  MAC  on  the  PHYP  platform  requires 
adding  MAC  enablement  features  into  the  PHYP 
management applications, including the HMC and the 
Integrated  Virtualization  manager  (IVM)  [11].  IVM 
runs  on  the  VIOS  and  provides  a  subset  of  HMC 
management  features.  The  HMC  and  IVM  must  be 
extended  to  create  a  MAC  policy,  assign  labels  to 
LPARs  and  resources,  and  load  and  update  MAC 
policy into Dispatchable PHYP.  
Additionally,  the  management  applications  can 
support safe object reuse by requiring the backup and 
cleaning of (virtual) storage resources before they can 
be  re-labeled  and  re-used  for  a  different  workload. 
Similarly, removing a label from a resource can trigger 
a  process  that  ensures  that  the  resource  is  backed-up 
and cleaned. 
To  be  able  to  scale  the  authorization  required  to 
manage  the  MAC  PHYP  platform,  we  intend  to 
separate  administrative  duties  in  the  management 
applications.  Platform  management  can  be  divided 
between 
and  non-security 
security  officer  would  be 
administrators.  The 
responsible for setting the security policy and labeling 
LPARs and resources. The non-security administrator 
would  be  responsible  for  performing  non-security 
management tasks on the platform. 
security  officer 
Finally,  VIOSs  that  are  multi-STE  typed  must  be 
MAC  aware,  since  they  need  to  enforce  the  MAC 
policy  on virtual resources exported to client LPARs. 
We plan to include hooks into the VIOS to implement 
the access controls required to enforce the policy. 
7. Related Work 
Hypervisors  can  be  divided  into  two  categories: 
isolation  and  sharing  hypervisors  [14].  Isolation 
hypervisors  do  not  allow  the  sharing  of  resources 
between LPARs. Rushby [23] formalizes the necessary 
conditions  for  ensuing  isolation  among  users  on  a 
single  machine.  Kelem  and  Feiertag  [17]  extend 
Rushby’s  separation  model  to  VMs  executing  on  the 
same  platform.    An  example  of  a  separation  model 
implementation  is  NetTop  [19],  which  isolates  VMs 
based  on  their  sensitivity  levels  on  a  platform,  but 
allows VMs to connect to networks. Another example 
of  a  pure  isolation  hypervisor  is  the  IBM  PR/SM 
system [6]. 
to 
Our work falls in the sharing hypervisor2 category. 
The  Xen  hypervisor’s  sHype  MAC  implementation 
[24] for para-virtualized VMs is closely related to our 
work.  Although  Xen’s  and  PHYP’s  MAC  realization 
provide  the  same  type  of  policy  enforcement,  their 
implementations  differ  considerably.  Xen’s  and 
PHYP’s  configuration  and  deployment  schemes 
employ  different  approaches  for  implementing  MAC. 
MAC  enforcement  for  Xen  must  be  performed  partly 
in the interrupt driven hypervisor layer during runtime. 
In  contrast,  PHYP’s  MAC  enforcement  is  performed 
during configuration time only. Ultimately, we want to 
support  MAC  enforcement  across  multiple  PHYP 
platforms; the solution presented in [18] for sHype on 
Xen applies to sHype on PHYP as well. 
large  and 
intrusive  changes 
Other  sharing  hypervisors  with  security  kernels 
include  VAX  VMM  [15]  and  KVM/370  [9].  Both 
VAX VMM and KVM/370 were developed  for high-
assurance and required implementing a new hypervisor 
or 
the  existing 
hypervisor  to  achieve  their  security  goals.  They 
provide multi-level security models. Our sHype MAC 
retrofit  for  PHYP  is  non-intrusive  and  aims  at  the 
assurance  that  the  base  hypervisor  is  designed  for 
(usually  enterprise-level  assurance)  and  provides  a 
simple security policy model that is easy to understand 
for 
environments. 
Additionally,  the  sHype  security  checks  in  PHYP  do 
not 
they  are 
performed at configuration time. 
incur  any  runtime  overhead  since 
in  virtualized 
administrators 
Further, security enhancements to Multics [25] are 
related to  our work. The authors describe how users’ 
access  to  classified  information  at  the  OS  layer  is 
controlled  by  using  a  restricted  multi-level  security 
mode. In contrast, we restrict VM access to resources 
at  the  hypervisor  layer  using  a  simple  and  platform-
independent  policy  model.  We  note  that  the  Multics 
enhancement  work  also  describes  administrative  and 
physical safeguards (e.g., separation of administrative 
duties, secure terminal) which are applicable to PHYP 
management applications.  
8. Conclusion 
In  this  paper,  we  show  how  the  sHype  mandatory 
access control architecture can be implemented for the 
commercial-grade  PHYP  hypervisor  with  minimal 
impact on the code base and performance. We consider 
the  limitations  and  tradeoffs  of  our  approach  with 
respect to meeting the three fundamental principles of 
the reference monitor. One key observation is that the 
reference monitor introduced in the early seventies still 
remains  relevant 
to 
2 Of course, the original sharing hypervisor is the CP-67/CMS [22]. 
today  for  mediating  access 
229229
resources.  Another result  of  our  work  is  that  we  can 
provide  simple  and  robust  protection  statements  to 
customers about their workloads using simple security 
polices.  This  has 
the 
management and harden the security of the platforms. 
9. Acknowledgements 
the  potential 
to  simplify 
The authors would like to thank the IBM POWER 
Design and Development Team for providing access to 
PHYP  information  and  platforms.  In  particular,  we 
want  to  thank  Bill  Armstrong,  Pete  Heyrman,  Bryan 
Logan, Kyle Lucke, Amartey Pearson, David Larson, 
and  David  Engebretsen  for  their  generous  assistance. 
We  would  also  like  to  thank  Paul  Karger  for  his 
comments on previous MAC work on hypervisors. 
10. References 
[1]  J.  P.  Anderson.  Computer  Security  Technology 
Planning  Study.  ESD-TR-73-51,  Vols.  I  and  II,  Air 
Force  Electronic  Division  Systems,  Hanscom  AFB, 
Bedford, MA, Oct. 1972. 
[2]  W.  J.  Armstrong,  R.  L.  Arndt,  D.  C.  Boutcher,  R.  G. 
Kovacs, D. Larson, K. A. Lucke, N. Nayar, and R. C. 
Swanberg.  Advanced  Virtualization  Capabilities  of 
POWER5  Systems.  IBM  Journal  of  Research  and 
Development, Vol. 49, No. 4/5, July/Sept. 2005. 
[3]  B. Armstrong, S. Bade, D. Boutcher, C. DeRobertis, T. 
Mathews,  and  A.  McLaughlin.  LPAR  Security  on 
POWER5  Processor-based  Systems,  Sept.  2007.  URL: 
http://www.ibm.com/systems/p/hardware/whitepapers/l
par_security.pdf. 
[4]  W. E. Boebert and R. Y. Kain. A Practical Alternative 
to Hierarchical Integrity Policies. 8th National Computer 
Security Conference, 1985. 
[5]  D.  F.  C.  Brewer  and  M.  J.  Nash.  The  Chinese  Wall 
Security Policy.  In Proc. IEEE Symposium on Security 
and Privacy, pp. 206-214, May 1989. 
[6]  Certification  Report  for  Processor  Resource/System 
Manger (PR/SM) for the IBM eServer zSeries 900, BSI-
DSZ-CC-0179-2003,  Bundesamt  fur  Sicherheit  in  der 
Informationstechnik,  Bonn,  Germany,  7  Feb.  2003. 
URL:http://www.commoncriteriaportal.org/public/files/
epfiles/0179a.pdf. 
[7]  Common  Criteria  Evaluation  and  Validation  Scheme. 
URL:http://niap.bahialab.com/cc-
scheme/in_evaluation.cfm. 
[8]  Department  of  Defense.  Trusted  Computer  System 
Evaluation Criteria (Orange Book), DoD 5200.28-STD, 
1985. 
[9]  B. D. Gold, R. R. Linde, and P. F. Cudney. KVM/370 in 
Retrospect. In Proc. IEEE Symposium on Security and 
Privacy, 1984.  
[10] IBM  Research.  The  Research  Hypervisor  –  A  Multi-
Platform,  Multi-Purpose  Research  Hypervisor. 
URL:http://www.research.ibm.com/hypervisor. 
[11] Integrated  Virtualization  Manager  on  IBM  System  p5, 
Dec. 
URL: 
http://www.redbooks.ibm.com/redpapers/pdfs/redp4061
.pdf. 
2006. 
[12] Kernel 
Based 
Virtual 
Machine. 
URL:http://kvm.qumranet.com/kvmwiki. 
21st 
2006, 
[13] T. Jaeger, R. Sailer, and Y. Sreenivasan. Managing the 
Risk  of  Covert  Information  Flows  in  Virtual  Machine 
Systems. In ACM Symposium on Access Control Models 
and Technologies (SACMAT), France, June 2007.  
[14] P.  A.  Karger.  Multi-Level  Security  Requirements  for 
Security 
Hypervisors. 
Applications Conference (ACSAC), Dec. 2005. 
Annual  Computer 
[15] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, 
and  C.  E.  Kahn.  A  Retrospective  on  the  VAX  VMM 
Security  Kernel.  In  IEEE  Transaction  on  Software 
Engineering, November 1991. 
[16] Power.org  Standard  for  Power  Architecture  Platform 
Requirements  (Workstation,  Server),  Version  2.0,  28 
August. 
URL: 
http://www.power.org/members/developers/specs/PAPR
_Version_2.0_28August06.pdf.  
Power.org. 
[17] N. L. Kelem and R. J. Feiertag. A Separation Model for 
Virtual  Machine  Monitors.  In  Proc.  IEEE  Symposium 
on Security and Privacy, 1991. 
[18] J. M. McCune, T. Jaeger, S. Berger, R. Caceres, and R. 
Sailer.  Shamon:  A  System  for  Distributed  Mandatory 
Access  Control.  22nd  Annual  Computer  Security 
Applications Conference (ACSAC), Dec. 2006. 
[19] R.  Meushaw  and  D.  Simard.  NetTop-Commercial 
Technology  in  High  Assurance  Applications.  National 
Security Agency Tech Trend Notes, Fall 2000. 
[20] M.  Nguyen  and  R.  Barker.  IBM  pSeries  Hardware 
Paper. 
Management  Console 
URL:http://www.ibm.com/servers/eserver/pseries/hard
ware/whitepapers/hmc_security.pdf. 
Security  White 
[21] B. D. Payne, R. Sailer, R. Caceres, Ron Perez, and W. 
Lee. A Layered Approach to Simplified Access Control 
in Virtualized Systems. Operating Systems Review, Vol. 
41, No. 3, July 2007. 
[22] R.  A.  Meyer  and  L.  H.  Seawright.  A  Virtual Machine 
Time-Sharing  System.    IBM  Systems  Journal,  Vol.  9, 
No. 3, Sept. 1970. 
[23] J.  Rushby.  Proof  of  Separability-A  verification 
technique  for  a  class  of  security  kernels.  In  Proc.  5th 
International Symposium on Programming, vol. 137 of 
Lecture  Notes  in  Computer  Science,  pp  352-367, 
Springer-Verlag, 1982. 
[24] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. 
Berger, J. Griffin, and L. Van Doorn. Building a MAC-
Based  Security  Architecture  for  the  Xen  Opensource 
Hypervisor. 21st Annual Computer Security Applications 
Conference (ACSAC), Dec. 2005. 
[25] J.  Whitmore,  A  Bensoussan,  P.  Green,  D.  Hunt,  A. 
Kobziar,  and  J.  Stern.  Design  for  MULTICS  Security 
Enhancements,  ESD-TR-74-176,  Electronic  Systems 
Division, Hanscom AFB, MA, Dec. 1973. 
URL:http://xenbits.xensource.com/xen-
[26] XenSource. 
unstable.hg. 
230230