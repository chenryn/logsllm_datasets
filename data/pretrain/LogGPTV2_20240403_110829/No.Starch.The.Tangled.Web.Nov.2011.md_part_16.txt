object. The following example illustrates a correct use of this syntax and will
display a simple prompt:
var impromptu_object = {
"given_name" : "John",
"family_name" : "Smith",
"lucky_numbers" : [ 11630, 12067, 12407, 12887 ]
};
// This will display "John".
alert(impromptu_object.given_name);
In contrast to the unambiguous serializations of numbers, strings, or
arrays, the overloading of the curly bracket means that JSON blocks will not
be recognized properly when used as a standalone statement. This may seem
insignificant, but it is an advantage: It prevents any server-supplied responses
that comply with this syntax from being meaningfully included across domains
via .* The listing that follows will cause a syntax error, ostensibly
* Unlike most other content inclusion schemes available to scripts (such as XMLHttpRequest),
 is not subject to the cross-domain security restrictions outlined in Chapter 9.
Therefore, the mechanism is a security risk whenever ambient authority credentials, such as
cookies, are used by the server to dynamically generate user-specific JavaScript code. This class
of vulnerabilities is unimaginatively referred to as cross-site script inclusion, or XSSI.
104 Chapter 6
due to an illegal quote () in what the interpreter attempts to treat as a code
label,* and will have no measurable side effects:
NOTE The inability to include JSON via  is an interesting property, but it is
also a fragile one. In particular, wrapping the response in parentheses or square brack-
ets, or removing quotes around the labels, will render the syntax readily executable in a
standalone block, which may have observable side effects. Given the rapidly evolving
syntax of JavaScript, it is not wise to bank on this particular code layout always caus-
ing a parsing error in the years to come. That said, in many noncritical uses, this level
of assurance will be good enough to rely on as a simple security mechanism.
Once retrieved through a channel such as XMLHttpRequest, the JSON
serialization can be quickly and effortlessly converted to an in-memory object
using the JSON.parse(...) function in all common browsers, other than Internet
Explorer. Unfortunately, for purposes of compatibility with Internet Explorer,
and sometimes just out of custom, many developers resort to an equally fast
yet far more dangerous hack:
var parsed_object = eval("(" + json_text + ")");
The problem with this syntax is that the eval(...) function used to com-
pute the “value” of a JSON expression permits not only pure JSON inputs but
any other well-formed JavaScript syntax to appear in the string. This can have
undesirable, global side effects. For example, the function call embedded in
this faux JSON response will execute:
{ "given_name": alert("Hi mom!") }
This behavior creates an additional burden on web developers to accept
JSON payloads only from trusted sources and always to correctly escape feeds
produced by their own server-side code. Predictably, failure to do so has con-
tributed a fair number of application-level security bugs.
NOTE The difficulty of getting eval(...) right is embodied by the JSON specification (RFC
4627) itself: The allegedly secure parser implementation included in that document
unintentionally permits rogue JSON responses to freely increment or decrement any pro-
gram variables that happen to consist solely of the letters “a”, “e”, “f”, “l”, “n”, “r”,
* Somewhat unexpectedly, JavaScript supports C-style labeled statements, such as my_label:
alert(“Hi mom!”). This is interesting because for philosophical reasons, the language has no
support for goto and, therefore, such a label can’t be meaningfully referenced in most cases.
Browser-Side Scripts 105
“s”, “t”, “u”, plus digits; that’s enough to spell “unsafe” and about 1,000 other com-
mon English words. The faulty regular expression legitimized in this RFC appears all
over the Internet and will continue to do so.
Thanks to their ease of use, JSON serializations are ubiquitous in server-
to-client communications across all modern web applications. The format is
rivaled only by other, less secure string or array serializations and by JSONP.*
All of these schemes are incompatible with JSON.parse(...), however, and must
rely on unsafe eval(...) to be converted to in-memory data. The other prop-
erty of these formats is that, unlike proper JSON, they will parse properly
when loaded with  on a third-party page. This property is advan-
tageous in some rare cases, but mostly it just constitutes an unobvious risk. For
example, consider that even though loading an array serialization via a 
tag normally has no measurable side effects, an attacker could, at least until
recent improvements, modify the setters on an Array prototype to retrieve the
supplied data. A common but often insufficient practice of prefixing a response
with a while(1); loop to prevent this attack can backfire in interesting ways if
you recall the possibility of endless loops terminating in JavaScript.
E4X and Other Syntax Extensions
Like HTML, JavaScript is quickly evolving. Some of the changes made to it
over the years have been fairly radical and may end up turning text formats
that were previously rejected by the parser into a valid JavaScript code. This,
in turn, may lead to unexpected data disclosure, especially in conjunction
with the extensive code and object inspection and modification capabilities
discussed earlier in this chapter—and the ability to use  to load
cross-domain code.
One of the more notable examples of this trend is ECMAScript for XML
(E4X),5 a completely unnecessary but elegant plan to incorporate XML syn-
tax directly into JavaScript as an alternative to JSON-style serializations. In
any E4X-compatible engine, such as Firefox, the following two snippets of
code would be roughly equivalent:
// Normal object serialization
var my_object = { "user": {
"given_name": "John",
"family_name": "Smith",
"id": make_up_value()
} };
// E4X serialization
var my_object = 
John
Smith
{ make_up_value() }
;
* JSONP literally means “JSON with padding” and stands for JSON serialization wrapped in some
supplementary code that turns it into a valid, standalone JavaScript statement for convenience.
Common examples may include a function call (e.g., callback_function({ ...JSON data... })) or a
variable assignment (var return_value = { ...JSON data... }).
106 Chapter 6
The unexpected consequence of E4X is that, under this regime, any well-
formed XML document suddenly becomes a valid  target that
will parse as an expression-as-statement block. Moreover, if an attacker can
strategically place “{” and “}” characters on an included page, or alter the set-
ters for the right object prototype, the attacker may be able to extract user-
specific text displayed in an unrelated document. The following example
illustrates the risk:
...
{ steal_stuff( attacker-supplied string
...
User-specific secrets here
...
) } attacker-supplied string
...
To their credit, after several years of living with the flaw, Firefox develop-
ers decided to disallow any E4X statements that span the entirety of any
parsed script, partly closing this loophole. Nevertheless, the fluidity of the
language is evident, and it casts some doubt on the robustness of using of
JSON responses as a defense against cross-domain script inclusion. The
moment a third meaning is given to the “{” symbol or quotes-as-labels start
having a purpose, the security of this server-to-client data exchange format
will be substantially degraded. Be sure to plan ahead.
Standard Object Hierarchy
The JavaScript execution environment is structured around an implicit root
object, which is used as the default namespace for all global variables and func-
tions created by the program. In addition to a handful of language-mandated
built-ins, this namespace is prepopulated with a hierarchy of functions that
implement input and output capabilities in the browser environment. These
capabilities include manipulating browser windows (open(...), close(), moveTo(...),
resizeTo(...), focus(), blur(), and such); configuring JavaScript timers (setTimeout(...),
setInterval(...), and so on); displaying various UI prompts (alert(...), prompt(...),
print(...)); and performing a variety of other vendor-specific and frequently
risky functions, such as accessing the system clipboard, creating bookmarks,
or changing the home page.
The top-level object also provides JavaScript references to root objects
belonging to related contexts, including the parent frame (parent), the top-
level document in the current browser window (top), the window that created
the current one (opener), and all subframes of the current document (frames[]).
Several circular references to the current root object itself are also included—
say, window and self. In browsers other than Firefox, elements with specified
id or name parameters will be automatically registered in this namespace, too,
permitting syntax such as this:
...
Browser-Side Scripts 107
Thankfully, in case of any name conflicts with JavaScript variables or built-
ins, id data will not be given precedence, largely avoiding any possible inter-
ference between otherwise sanitized, user-supplied markup and in-document
scripts.
The remainder of the top-level hierarchy consists primarily of a couple
of distinguished children objects that group browser API features by theme:
location object
This is a collection of properties and methods that allow the program to
read the URL of the current document or initiate navigation to a new
one. This last action, in most cases, is lethal to the caller: The current
scripting context will be destroyed and replaced with a new one shortly
thereafter. Updating just the fragment identifier (location.hash) is an
exception to this rule, as explained in Chapter 2.
Note that when using location.* data to construct new strings (HTML
and JavaScript code in particular), it is unsafe to assume that it is escaped
in any specific way. Internet Explorer will keep angle brackets as is in
thelocation.search property (which corresponds to the URL query string).
Chrome, on the other hand, will escape them, but it will glance over dou-
ble quotes (") or backslashes. Most browsers also do not apply any escap-
ing to the fragment ID.
history object
This hierarchy provides several infrequently used methods for moving
through the per-window browsing history, in a manner similar to clicking
the “back” and “forward” buttons in the browser UI. It is not possible to
directly examine any of the previously visited URLs; the only option is to
navigate to the history blindly by providing numerical offsets, such as
history.go(-2). (Some recent additions to this hierarchy will be discussed in
Chapter 17.)
screen object
A basic API for examining the dimensions of the screen and the browser
window, monitor DPI, color depth, and so on. This is offered to help web-
sites optimize the presentation of a page for a particular display device.
navigator object
An interface for querying the browser version, the underlying operating
system, and the list of installed plug-ins.
document object
By far the most complex of the hierarchies, this is a doorway to the Docu-
ment Object Model6 of the current page; we will have a look at this model
in the following section. A couple of functions not related to document
structure also appear under the document hierarchy, usually due to arbi-
trary design decisions. Examples include document.cookie for manipulating
cookies, document.write(...) for appending HTML to the current page, and
document.execCommand(...) for performing certain WYSIWYG editing tasks.
108 Chapter 6
NOTE Interestingly, the information available through the navigator and screen objects is
sufficient to uniquely fingerprint many users with a high degree of confidence. This
long-known property is emphatically demonstrated by Panopticlick, a project of the
Electronic Frontier Foundation: https://panopticlick.eff.org/.
Several other language-mandated objects offer simple string-processing
or arithmetic capabilities. For example, Math.random() implements an
unsafe, predictable pseudo-random number generator (a safe PRNG alter-
native is unfortunately not available at this time in most browsers*), while
String.fromCharCode() can be used to convert numerical values into Unicode
strings. In privileged execution contexts, which are not reachable by normal
web applications, a fair number of other task-specific objects will also appear.
NOTE When accessing any of the browser-supplied objects, it is important to remember that
while JavaScript does not use NUL-terminated ASCIZ strings, the underlying browser
(written in C or C++) sometimes will. Therefore, the outcomes of assigning NUL-
containing strings to various DOM properties, or supplying them to native functions,
may be unpredictable and inconsistent. Almost all browsers truncate assignments to
location.* at NUL, but only some engines will do the same when dealing with DOM
*.innerHTML.
The Document Object Model
The Document Object Model, accessible through the document hierarchy,
provides a structured, in-memory representation of the current document as
mapped out by the HTML parser. The resulting object tree exposes all HTML
elements on the page, their tag-specific methods and properties, and the asso-
ciated CSS data. This representation, not the original HTML source, is used
by the browser to render and update the currently displayed document.
JavaScript can access the DOM in a very straightforward way, similarly to
any normal objects. For example, the following snippet will go to the fifth tag
within the document’s  block, look up the first nested subtag, and set
that element’s CSS color to red:
document.body.children[4].children[0].style.color = "red";
To avoid having to waddle through the DOM tree in order to get to a
particular deeply nested element, the browser provides several document-
wide lookup functions, such as getElementById(...) and getElementsByTagName(...),
as well as partly redundant grouping mechanisms such as frames[], images[],
or forms[]. These features permit syntax such as the following two lines of
code, both of which directly reference an element no matter where in the
document hierarchy it happens to appear:
document.getElementsByTagName("input")[2].value = "Hi mom!";
document.images[7].src = "/example.jpg";
* There are a recently added window.crypto.getRandomValues(...) API in Chrome and a currently
nonoperational window.crypto.random(...) API in Firefox.
Browser-Side Scripts 109
For legacy reasons, the names of certain HTML elements (, ,
, , and ) are also directly mapped to the document
namespace, as illustrated in the following snippet:
Unlike in the more reasonable case of name and id mapping in the global
namespace (see previous section), such document entries may clobber built-in
functions and objects such as getElementById or body. Therefore, permitting
user-specified tag names, for example for the purpose of constructing forms,
can be unsafe.
In addition to providing access to an abstract representation of the
document, many DOM nodes may expose properties such as innerHTML and
outerHTML, which permit a portion of the document tree to be read back as a
well-formed, serialized HTML string. Interestingly, the same property can be
written to in order to replace any portion of the DOM tree with the result of
parsing a script-supplied snippet of HTML. One example of that last use is this:
document.getElementById("output").innerHTML = "Hi mom!";
Every assignment to innerHTML must involve a well-formed and self-
contained block of HTML that does not alter the document hierarchy outside
the substituted fragment. If this condition is not met, the input will be coerced
to a well-formed syntax before the substitution takes place. Therefore, the
following example will not work as expected; that is, it will not display “Hi
mom!” in bold and will not put the remainder of the document in italics:
some_element.innerHTML = "Hi";
some_element.innerHTML += " mom!";
Instead, each of these two assignments will be processed and corrected
individually, resulting in a behavior equivalent to this:
some_element.innerHTML = "Hi mom!";
It is important to note that the innerHTML mechanism should be used
with extreme caution. In addition to being inherently prone to markup injec-
tion if proper HTML escaping is not observed, browser implementations of
the DOM-to-HTML serialization algorithms are often imperfect. A recent
(now fixed) example of such a problem in WebKit7 is illustrated here:
&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt;
110 Chapter 6
Because of the confusion over the semantics of , this seemingly
unambiguous input markup, when parsed to a DOM tree and then accessed
through innerHTML, would be incorrectly read back as:
In such a situation, even performing a no-op assignment of this serializa-
tion (such as some_element.innerHTML += "") would lead to unexpected script
injection. Similar problems tend to plague other browsers, too. For example,
Internet Explorer developers working on the innerHTML code were unaware
that MSHTML recognizes backticks (`) as quote characters and so ended up
handling them incorrectly. In their implementation, the following markup:
would be reserialized as this: