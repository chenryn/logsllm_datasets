## DuckDB 0.9.2 TPC-DS 测试      
### 作者                                    
digoal                                    
### 日期                                    
2023-12-01                                  
### 标签                                    
PostgreSQL , DuckDB , tpc-ds                   
----                                    
## 背景      
duckdb 内置tpcds, tpch模块, 可以快速生成数据, 生产测试SQL, 快速测试.     
如果你有其他数据库产品需要测试, 可以直接使用duckdb来生成测试数据和SQL, 横向对比.     
- [《DuckDB 采用外部 parquet 格式存储 - tpch 测试 - in_memory VS in_parquet》](../202209/20220901_05.md)    
- [《DuckDB vs PostgreSQL TPC-H 测试》](../202208/20220829_01.md)    
- [《DuckDB TPC-H 测试》](../202208/20220828_01.md)    
步骤如下    
- 安装tpch/tpcds extension    
- 加载extension    
- 生成数据    
- 导出query    
- 打开结果重定向、时间、profiling、等配置    
- 执行query, 导出执行结果    
- 查看profile结果, 执行结果.     
详情    
https://duckdb.org/docs/extensions/tpcds.html  
安装、加载extension    
```  
D install 'tpcds';    
D load 'tpcds';    
```  
生成数据    
```  
D CALL dsdgen(sf=1);  
```  
导出tpcds SQL:   
```  
D copy (select query as " " from tpcds_queries()) to 'tpcds.sql' with (quote '');   
```  
查看sql内容, 一共99条  
- https://www.tpc.org/tpcds/  
```  
cat tpcds.sql  
WITH customer_total_return AS  
  (SELECT sr_customer_sk AS ctr_customer_sk,  
          sr_store_sk AS ctr_store_sk,  
          sum(sr_return_amt) AS ctr_total_return  
   FROM store_returns,  
        date_dim  
   WHERE sr_returned_date_sk = d_date_sk  
     AND d_year = 2000  
   GROUP BY sr_customer_sk,  
            sr_store_sk)  
SELECT c_customer_id  
FROM customer_total_return ctr1,  
     store,  
     customer  
WHERE ctr1.ctr_total_return >  
    (SELECT avg(ctr_total_return)*1.2  
     FROM customer_total_return ctr2  
     WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk)  
  AND s_store_sk = ctr1.ctr_store_sk  
  AND s_state = 'TN'  
  AND ctr1.ctr_customer_sk = c_customer_sk  
ORDER BY c_customer_id  
LIMIT 100;  
...  
```  
按sql编号(1~99)执行测试  
```  
D .timer on  
D PRAGMA tpcds(8);  
┌──────────────┬────────────────────┐  
│ s_store_name │ sum(ss_net_profit) │  
│   varchar    │   decimal(38,2)    │  
├──────────────┼────────────────────┤  
│ able         │       -10354620.18 │  
│ ation        │       -10576395.52 │  
│ bar          │       -10625236.01 │  
│ ese          │       -10076698.16 │  
│ ought        │       -10994052.78 │  
└──────────────┴────────────────────┘  
Run Time (s): real 0.035 user 0.074382 sys 0.004634  
```  
使用刚才导出的tpcds.sql, 测试性能  
配置profile, 输出重定向等.    
```  
D PRAGMA enable_profiling='QUERY_TREE_OPTIMIZER';    
D PRAGMA explain_output='all';    
D PRAGMA profiling_mode='detailed';    
D PRAGMA profile_output='tpcds.profile';    
D .timer on    
```  
将执行结果重定向到my_results.txt    
```  
D .output my_results.txt    
```  
执行SQL, 每一条的耗时看real, 单位秒.  我这里使用的机器是`MacBook Pro (15-inch, 2018) 2.2 GHz 六核Intel Core i7 , 32G 2400MHz` 下面的docker容器(资源限制8GB, 6C, 0 SWAP)    
```  
D .read tpcds.sql    
Run Time (s): real 0.045 user 0.102511 sys 0.005212  
Run Time (s): real 0.093 user 0.357725 sys 0.009345  
Run Time (s): real 0.011 user 0.024834 sys 0.005110  
Run Time (s): real 0.345 user 1.253968 sys 0.124454  
Run Time (s): real 0.049 user 0.120580 sys 0.024272  
Run Time (s): real 0.021 user 0.063336 sys 0.003390  
Run Time (s): real 0.059 user 0.201122 sys 0.010204  
Run Time (s): real 0.025 user 0.059354 sys 0.004384  
Run Time (s): real 0.131 user 0.371283 sys 0.002992  
Run Time (s): real 0.046 user 0.173898 sys 0.003287  
Run Time (s): real 0.225 user 0.636656 sys 0.051982  
Run Time (s): real 0.014 user 0.034692 sys 0.002332  
Run Time (s): real 0.038 user 0.173474 sys 0.002123  
Run Time (s): real 0.278 user 1.037221 sys 0.140083  
Run Time (s): real 0.034 user 0.129587 sys 0.002064  
Run Time (s): real 0.037 user 0.096894 sys 0.012613  
Run Time (s): real 0.049 user 0.177654 sys 0.007142  
Run Time (s): real 0.064 user 0.196052 sys 0.007506  
Run Time (s): real 0.170 user 0.427845 sys 0.030514  
Run Time (s): real 0.017 user 0.043945 sys 0.001574  
Run Time (s): real 0.022 user 0.071809 sys 0.001300  
Run Time (s): real 0.326 user 1.614572 sys 0.060703  
Run Time (s): real 0.482 user 2.400375 sys 0.174530  
Run Time (s): real 0.051 user 0.134917 sys 0.009525  
Run Time (s): real 0.029 user 0.091872 sys 0.002064  
Run Time (s): real 0.040 user 0.125914 sys 0.008500  
Run Time (s): real 0.123 user 0.526933 sys 0.035607  
Run Time (s): real 0.058 user 0.298473 sys 0.003460  
Run Time (s): real 0.034 user 0.105500 sys 0.003202  
Run Time (s): real 0.030 user 0.063444 sys 0.003466  
Run Time (s): real 0.078 user 0.255402 sys 0.029586  
Run Time (s): real 0.008 user 0.021511 sys 0.001074  
Run Time (s): real 0.019 user 0.047749 sys 0.001191  
Run Time (s): real 0.026 user 0.069697 sys 0.001201  
Run Time (s): real 0.077 user 0.284389 sys 0.033933  
Run Time (s): real 0.141 user 0.475610 sys 0.044567  
Run Time (s): real 0.031 user 0.157093 sys 0.002996  
Run Time (s): real 0.050 user 0.199169 sys 0.005099  
Run Time (s): real 0.056 user 0.191889 sys 0.003279  
Run Time (s): real 0.031 user 0.098717 sys 0.011701  
Run Time (s): real 0.015 user 0.020655 sys 0.002227  
Run Time (s): real 0.010 user 0.030898 sys 0.003248  
Run Time (s): real 0.026 user 0.119584 sys 0.002149  
Run Time (s): real 0.042 user 0.179673 sys 0.021623  
Run Time (s): real 0.030 user 0.056407 sys 0.003384  
Run Time (s): real 0.050 user 0.112786 sys 0.017813  
Run Time (s): real 0.413 user 1.810031 sys 0.232826  
Run Time (s): real 0.040 user 0.183546 sys 0.004902  
Run Time (s): real 0.035 user 0.111519 sys 0.007789  