Approach. We determine both parameters with a code review
and verify them with practical experiments, using a Wi-Fi
connection. For this, we assume that the OS uses the same
settings for Wi-Fi as for mobile connections. Exemplarily,
we determine the refelection rates for three Android devices
(Huawei P10 (Android 7.0), Samsung S6 (Android 7.0) and LG
Nexus 5 (Android 5.1)) and for one iPhone XR (iOS 12.2).
For
testing the unreachable reﬂection rate, we use
scapy [36] to send a packet with an unsupported transport-
layer protocol (CHAOS (0x10)) to the device. As payload, we
use a running sequence number followed by a 500 B string.
We sniff the incoming (reﬂected) packets and determine the
rate by matching the sequence numbers of the packets we sent
in comparison to the received reﬂected packets. We use a ﬁxed
delay between outgoing packets of 10 ms. This delay resembles
the maximum rate for incoming packets and was chosen based
on a realistic round trip time for an Internet connection [47].
Android. All Android devices show the same behavior, as they
use the same Linux IP stack with no rate or size limiting for
the ping reﬂection1. This differs for the unreachable reﬂection,
where we found that the ICMP stack reﬂects the minimum
Maximum Transmission Unit (MTU). In those cases, the IPv4
stack reﬂects 548 B and the IPv6 stack 1236 B of the original
packets (excluding corresponding headers).
Further, Linux limits the rate for outgoing ICMP messages
for the unreachable reﬂection with a global ratelimit and an
additional peer ratelimit; where a peer is deﬁned by the source
IP address. While the global limit allows one message per 1 ms
(default), the peer ratelimit triggers earlier and only allows one
outgoing message each 1000 ms for one particular peer. This is
with one exception; the peer rate limiting allows a burst for the
ﬁrst six messages. As the peer ratelimit is the stricter limit, we
distinguish two cases in our experiments. In the ﬁrst test, we
keep the same source IP for all unsupported protocol messages.
In the second case, we change the source address for every six
packets. Figure 10 shows the results of the ICMPv4 response
rate for both cases. The ﬁrst case shows that the rate limiting
is triggered after six packets and only one packet is reﬂected
each 1000 ms (constant source IP). In contrast, alternating the
source IP address does not trigger the peer ratelimit and the
reﬂection remains stable at 100 % over time. As the multi-peer
reﬂection allows to perform full-rate encryption, we continue
using it in the following experiments.
1Note that the MTU of the transmitting interface limited the experiment.
The MTU was set to 1500 B, which allows 1452 B of ICMP echo request
payload without IP fragmentation.
Fig. 10. Unreachable reﬂection rate in case of a ﬁx source IP address (single-
peer) and for alternating source IP addresses (multi-peer).
iOS. Apple’s mobile operating system uses the Darwin kernel
and again, the ping reﬂection is neither limited by size nor
rate. However, iOS does not support the unreachable reﬂection
for IPv4 packets. For IPv6, iOS reﬂects the minimum MTU,
resulting in 1236 B of payload without any rate limiting. This
means that the IMP4GT attack on iOS is not possible for IPv4,
but can be conducted without limitation for IPv6.
B. ICMP Firewall/NAT Rules
IMP4GT requires that the provider’s ﬁrewall/NAT allows
sending certain ICMP messages to the attacker’s decryp-
tion server. We exemplary examine the local providers’ ﬁre-
wall/NAT policy. In particular, we test whether the ﬁrewall
is open for three outgoing ICMP messages; ICMP protocol
unsupported (type = 3/code = 2), ICMP echo reply (type =
0/code = 0), and ICMP echo request (type = 8/code = 0).
Again, we test this for IPv4 and IPv6, i. e., ICMPv4 and
ICMPv6. We again use scapy to craft a message and send
it to our server, where we monitor the incoming packets.
We tested three providers in western Europe. The results
indicate that none of the providers allow the ICMP message
protocol unreachable, but all providers allow the echo request
and echo reply message. This behavior inﬂuences the IMP4GT
attack as follows: When the IP stack reﬂects the packet with the
ICMP protocol unreachable message, this packet is dropped at
the ﬁrewall. However, when the attacker updates the protocol
type of the ICMP message to an echo request or echo reply,
it passes the ﬁrewall. We already considered this ﬁrewall
behavior when describing the IMP4GT attack in Section III. In
particular, we change the ICMP message in step B(cid:13) (4) of the
preparation phase, in step (4) during the downlink decryption
for the uplink variant, and in step (2) for the uplink decryption
in the downlink variant.
C. Conclusion
While the ping reﬂection is not limited in size nor rate
for Android or iOS,
the unreachable reﬂection is limited.
During our tests, we found that Android limits the unreachable
reﬂection in length and rate, inﬂuencing the performance of the
downlink decryption (uplink IMP4GT). In particular, downlink
packets are not allowed to exceed the minimum MTU. Android
also limits the reﬂection rate for a speciﬁc peer; the multi-peer
reﬂection technique enables us to decrypt downlink packets
with the full rate. iOS does not support the IPv4 unreachable
reﬂection but supports the IPv6 reﬂection with full-rate. By
now, major operators in the USA and Japan deploy IPv6 in
their mobile network [26], allowing an impersonation with iOS
in those networks.
9
0.000.250.500.751.000204060TimeReflection Ratemulti−peersingle−peerV. END-TO-END IMP4GT ATTACK
We demonstrate the practical feasibility of the IMP4GT
attacks by conducting full end-to-end uplink and downlink
impersonations in a commercial network.
For the uplink impersonation, we show that an attacker
can access a service site2 of the provider without any user
interaction. We choose this targeted website, as it demonstrates
the possible consequences of an impersonation attack. In the
usual case, those service websites are only accessible by the
user and contain personalized content such as phone number
or consumed data volume. Further, such service sites allow
users to manage their account, access the used data volume,
and book new data plans or TV streaming. Accessing such
service website can be, therefore, a privacy threat and can
also have fraud implications. For the downlink impersonation,
we demonstrate that an attacker can establish a direct TCP
connection to an app running on the victim’s phone. By doing
so, we show that an attacker can bypass the provider’s ﬁrewall
mechanism, and the phone is open to any incoming connection.
Such an attack is a stepping stone for further attacks, such as
malware deployment.
We ﬁrst describe an additional implementation tweak that
allows us to conduct the attack smoothly without any modiﬁ-
cation of the UE. Later we present our experimental setup and
the results for the uplink and downlink impersonation.
A. Filtering Background Trafﬁc
We demonstrate the attack without any user interaction;
i. e., we begin the attack by redirecting the ﬁrst DNS request
of the Android Internet connectivity check. If this connectivity
check is successful, plenty of other Android services use the
Internet connection to connect to their home server. Those
connections run in parallel to the attack and hence interfere
with the state machine of our implementation. We, therefore,
implemented a ﬁlter mechanism at the relay that drops all
unexpected packets during the attack. The ﬁltering mechanism
is solely based on the packet lengths and match the assumption
of our attacker model. Accordingly, the ﬁlter terminates all
connections running in parallel to the attack, and the attack is
conducted free of any background noise. After the attack, the
ﬁltering is switched off, and a regular Internet connection is
guaranteed.
B. Setup
We use the following components for our experiments:
UE: We use an unmodiﬁed LG Nexus 5 running Android
5.1 with a commercial SIM card. For a stable radio connection
to the relay, we place the phone in a shielding box and
enable ﬂight mode. Finally, we connect the phone to the PC
for controlling it, extract the session key, and record traces
with ADB (Android Debug Bridge) and SCAT [45]. For the
downlink impersonation, we further implement an app that
listens for TCP connections and prints the contents of incoming
messages.
Malicious Relay: Our malicious relay consists of two
Ettus USRP B210 (about 2600 $) with relay software based
2pass.telekom.de for T-Mobile Germany or ma.web2go.com for
T-Mobile USA
interface on the operating systems such that
on the srsLTE 18.03 stack [17], [1]. One USRP sets up a fake
eNodeB towards the UE, while the other USRP emulates the
UE towards the commercial network. The relay implements
a virtual
the
attacker can use any IP-based application. For the uplink
impersonation, we use curl on top of the virtual interface
to access the service site. For the downlink impersonation,
we use netcat on top of the virtual interface to establish a
connection to the installed App.
Commercial eNodeB and Network: We connect to a
commercial network using a SIM card.
Attacker’s Entities: We use a virtual Ubuntu 16.04 server
in the AWS cloud running the attacker’s Internet entities. For
the DNS server, we use a modiﬁed version of dnsmasq [32].
We build all other entities with Python, including the TCP
the plaintext generation server, and the decryption
proxy,
server. For the TCP proxy, we point
the IP address to
the domain connectivity.android.com. The plaintext
generation server is based on the UDP socket class of Python.
The decryption server is built with scapy [36] and listens
permanently for ICMP packets. It is reachable via two IP
addresses: one IP address is solely used for the attack trafﬁc
and matches the requirements of the IP address of the ALTER
attack [40]. The second IP address is used for the control
connection between the Internet entities and LTE relay.
Target HTTP Server: To demonstrate that the attacker can
access a website on behalf of the victim, we choose to access
a service site of the local provider that is only accessible by
the victim. On this service site, the user can manage his/her
account, for example, to see the used data volume or select a
new data plan.
C. Results
We conduct the uplink and downlink impersonation in two
separate experiments. As the procedure and results do not
differ until the attack phase, we ﬁrst describe the common
preparation phase and later both attacks separately.
We instruct the UE to disable ﬂight mode, which triggers
the LTE attach procedure. Then, the UE connects to our relay
up to layer two. The relay relays all messages above layer two;
in particular, the control data, including the AKA procedure.
When the LTE attach procedure is ﬁnished and the data
connection is activated, the baseband notiﬁes the OS about an
existing Internet connection. To check the Internet connection,
Android automatically connects to the connectivity service that
triggers two DNS requests (AAAA for IPv6 and an A for IPv4)
for the domain connectivity.android.com. The relay
intercepts both requests and redirects them to the malicious
DNS server. The DNS server performs the DNS spooﬁng
attack and thus redirects the following HTTP connection
to the TCP proxy. In this phase, the relay and the proxy
forward all data, until the TCP connection is closed. A ﬁrst
injected packet starts the internal information retrieval, and the
decryption server receives the internal information. A second
injected packet introduces the establishment to the connection
keystream generation server. Until this point, the uplink and
downlink impersonation are similar in their procedure. We now
describe the results of the uplink impersonation and later of
the downlink variant.
10
1) Uplink IMP4GT: As soon as the plaintext generation
server receives the ﬁrst packet, we start with the attack phase
of the uplink impersonation. The ﬁrst packet is an uplink
TCP SYN packet addressed to the server of the service site.
Therefore,
the plaintext generation server sends a known-
plaintext packet, and the relay modiﬁes this packet for the
encryption of the uplink TCP SYN packet. The TCP handshake
and the HTTP request and response follow. A downlink packet
strictly follows an uplink packet, because we disabled the TCP
scale option and the limiting of TCP window to 500 B on the
attacker’s relay. This option requires the relay to acknowledge
each TCP downlink packet before the target HTTP server sends
a new downlink packet. In total, we sent 18 TCP uplink packets
and received 16 packets to download the plain HTML site
(5.6 kB), which took 4 sec with a bitrate of 11.2 kbit/ sec.
The latency between one uplink packet and receiving the
corresponding downlink packet is in average 0.183 sec. Finally,
we access the service site without any user interaction and fully
impersonate the victim against the network.
2) Downlink IMP4GT: Again, we start with downlink
impersonation, immediately after the preparation phase. The
ﬁrst downlink packet is changed to the TCP SYN packet
and followed by an uplink TCP SYN-ACK packet which is
decrypted. As payload, we send a character array of 22 B to the
self-written App, which is successfully displayed. Additionally,
we changed the source address to 8.8.8.8 and thus hid
the identity of the actual server. In total, we sent downlink
ﬁve packets and received the acknowledgments accordingly.
Consequently, we demonstrated that an attacker can bypass
any ﬁrewall mechanism of the provider, guaranteeing direct
network access to the victim’s phone.
VI. DISCUSSION
During the attach procedure, LTE establishes mutual au-
thentication with a provably secure AKA protocol. By itself,
IMP4GT does not attack this AKA protocol and when the AKA
is performed, both communication parties are authenticated on
the control plane. Even relaying the messages transparently
with the relay would not be problematic if the chosen se-
curity measures were secure against manipulation. However,
this is not the case for the user plane due to the lack of
integrity protection. Consequently, IMP4GT exploits the lack of
integrity protection in combination with the IP stack behavior,
effectively enabling an attacker to impersonate the respective
party. IMP4GT breaks mutual authentication only on the user
plane. In this section, we ﬁrst discuss the implications of our
attack for providers, juridical entities, and users. We assess its
real-world applicability, present possible countermeasures, and
describe the state of integrity protection in the 5G speciﬁcation.
A. Implications
Providers rely on mutual authentication for several use
cases, such as billing and authorization. One essential require-
ment for providers is the correct billing of the customers.
Furthermore, certain services are only accessible by the authen-
ticated identity, like service websites. Such authentication is
performed through header enrichment, which uses only the IP
address. Additionally, some providers support third-party PDN
networks that are only accessible with APN settings and the
correct authentication. IMP4GT undermines user authentication