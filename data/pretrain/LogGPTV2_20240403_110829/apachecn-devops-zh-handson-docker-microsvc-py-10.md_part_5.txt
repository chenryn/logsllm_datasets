      configMap:
        name: grafana-config
    - name: volume-dashboard
      configMap:
        name: grafana-dashboard
```
`volume-config`卷共享一个配置 Grafana 的文件。`volume-dashboard`卷增加了一个仪表盘。后者挂载一个包含两个文件的目录。两个安装都在 Grafana 期望配置文件的默认位置。
`volume-config`卷将数据源设置在 Grafana 将接收数据的地方进行绘图:
```
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: example
data:
  prometheus.yaml: |
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-service
        access: proxy
        isDefault: true
```
数据来自`http://prometheus-service`，指向我们之前配置的普罗米修斯服务。
`volume-dashboard`定义两个文件，`dashboard.yaml`和`dashboard.json`:
```
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard
  namespace: example
data:
  dashboard.yaml: |
    apiVersion: 1
    providers:
    - name: 'Example'
      orgId: 1
      folder: ''
      type: file
      editable: true
      options:
        path: /etc/grafana/provisioning/dashboards
  dashboard.json: |-
```
`dashboard.yaml`是一个简单的文件，指向我们可以找到描述系统可用仪表盘的 JSON 文件的目录。我们指向同一个目录，用一个卷装载所有内容。
`dashboard.json` is redacted here to save space; check out this book's GitHub repository for the data.
`dashboard.json`以 JSON 格式描述仪表板。这个文件可以通过 Grafana UI 自动生成。添加更多`.json`文件将创建新的仪表板。
# 格拉凡·ui
通过访问`http://grafana.example.local`并使用您的登录/密码详细信息，即`admin/admin`(默认值)，您可以访问 Grafana UI:
![](img/e0ed3527-9a22-4a49-8356-5e58795741ac.png)
从那里，您可以查看仪表板，该仪表板位于左侧中央栏中:
![](img/15311ba9-bf88-4c0c-8b8b-15a29b88edf3.png)
这捕获了对 Flask 的调用，无论是在数字方面还是在 *95 第个*百分位时间方面。每个单独的图表都可以编辑，这样我们就可以看到制作它的配方:
![](img/bfba98e1-1532-46a9-8bbd-126745e3ee24.png)
左侧的图标允许我们更改系统中运行的查询，更改可视化(单位、颜色、条或线、绘图的比例等)，添加名称等常规信息，以及创建警报。
The Grafana UI allows us to experiment and so is highly interactive. Take some time to try out the different options and learn how to present the data.
查询部分允许我们添加和显示普罗米修斯的度量。注意默认附近的普罗米修斯标志，这是数据源。
每个查询都有一个从普罗米修斯提取数据的度量部分。
# 质疑普罗米修斯
普罗米修斯有自己的查询语言，叫做 PromQL。这种语言很强大，但也有一些独特之处。
The Grafana UI helps by autocompleting the query, which makes it easy for us to search for metric names. You can experiment directly in the dashboard, but there's a page on Grafana called Explore that allows you to make queries out of any dashboard and has some nice tips, including basic elements. This is denoted by a compass icon in the left sidebar.
首先要记住的是理解普罗米修斯的度量标准。考虑到它的抽样方法，大多数都是单调递增的。这意味着绘制指标将显示一条向上和向上的线。
要获得一段时间内数值变化的速率，需要使用`rate`:
```
rate(flask_http_request_duration_seconds_count[5m])
```
这平均每秒生成请求，移动窗口为`5`分钟。可以使用`sum`和`by`进一步汇总费率:
```
sum(rate(flask_http_request_duration_seconds_count[5m])) by (path)
```
计算次数可以用`avg`代替。您也可以按多个标签分组:
```
avg(rate(flask_http_request_duration_seconds_bucket[5m])) by (method, path)
```
但是，您也可以设置分位数，就像我们可以在图形中设置分位数一样。我们乘以 100 得到以毫秒而不是秒为单位的时间，并通过`method`和`path`分组。现在，`le`是一个自动创建的特殊标签，将数据分成多个桶。`histogram_quantile`函数用它来计算分位数:
```
histogram_quantile(0.95, sum(rate(flask_http_request_duration_seconds_bucket[5m])) by (method, path, le)) * 1000
```
可以过滤指标，以便只显示特定的标签。它们也可以用于不同的功能，如除法、乘法等。
Prometheus queries can be a bit long and complicated when we're trying to display the result of several metrics, such as the percentage of successful requests over the total. Be sure to test that the result is what you expect it to be and allocate time to tweak the requests, later.
如果您想了解更多信息，请务必查看普罗米修斯文档:[https://Prometheus . io/docs/Prometheus/latest/query/basic/](https://prometheus.io/docs/prometheus/latest/querying/basics/)。
# 更新仪表板
仪表板可以交互更改和保存，但是在我们的 Kubernetes 配置中，我们将包含文件的卷设置为非持久的。因此，重新启动 Grafana 将放弃任何更改，并重新应用`Chapter10/kubernetes/metrics/grafana.yaml`文件中`volume-dashboard`中定义的配置。
这实际上是一件好事，因为我们应用相同的 GitOps 原则将完整的配置存储在 Git 源代码控制下的存储库中。
但是可以看到，`grafana.yaml`文件中包含的仪表盘的完整 JSON 描述非常长，给定了参数的数量和手动更改的难度。
最好的方法是交互式地更改仪表板，然后使用菜单顶部的共享文件按钮将其导出到 JSON 文件中。然后，可以将 JSON 文件添加到配置中:
![](img/e3802571-88e1-4692-85bb-4560de9d23ea.png)
然后可以重新部署格拉夫纳吊舱，并将保存的更改包含在仪表板中。然后可以通过通常的过程在 Git 中更新 Kubernetes 配置。
一定要探索仪表板的所有可能性，包括设置变量的选项，以便您可以使用同一个仪表板来监控不同的应用或环境以及不同种类的可视化工具。有关更多信息，请参见完整的 Grafana 文档:[https://grafana.com/docs/reference/](https://grafana.com/docs/reference/)。
有了可用的指标，我们就可以使用它们来主动了解系统并预测任何问题。
# 积极主动
指标显示了整个集群状态的汇总视图。它们允许我们检测趋势问题，但是很难找到一个虚假的错误。
不过，不要低估他们。它们对于成功的监控至关重要，因为它们告诉我们系统是否健康。在一些公司中，最关键的指标会突出显示在墙上的屏幕上，这样运营团队就可以随时看到它们，并迅速做出反应。
为系统中的指标找到适当的平衡不是一项简单的任务，需要时间和反复试验。不过，在线服务有四个指标总是很重要。这些措施如下:
*   **延迟**:系统响应一个请求需要多少毫秒。
Depending on the times, a different time unit, such as seconds or microseconds, can be used. From my experience, milliseconds is adequate since most of the requests in a web application system should take between 50 ms and 1 second to respond. Here, a system that takes 50 ms is too slow and one that takes 1 second is a very performant one.
*   **流量**:单位时间内流经系统的请求数，即每秒或每分钟的请求数。
*   **错误**:收到的返回错误的请求的百分比。
*   **饱和**:集群的容量是否有足够的余量。这包括硬盘空间、内存等元素。例如，有 20%的可用内存。
To measure saturation, remember to install the available exporters that will collect most of the hardware information (memory, hard disk space, and so on) automatically. If you use a cloud provider, normally, they expose their own set of related metrics as well, for example, CloudWatch for AWS.
这些指标可以在谷歌 SRE 书中找到，作为*四个黄金信号*，并被认为是成功监控的最重要的高级元素。
# 发信号
当度量出现问题时，应该生成自动警报。普罗米修斯有一个内置的警报系统，当一个定义的指标满足定义的条件时就会触发。
Check out the Prometheus documentation on alerting for more information: [https://prometheus.io/docs/alerting/overview/](https://prometheus.io/docs/alerting/overview/).
普罗米修斯的警报管理器可以执行某些操作，例如根据规则发送电子邮件以获得通知。该系统可以连接到 OpsGenie([https://www.opsgenie.com](https://www.opsgenie.com))等集成事件解决方案，以生成各种警报和通知，如电子邮件、短信、电话等。
日志也可以用来创建警报。有一些工具允许我们在`ERROR`升起时创建一个条目，比如**哨兵**。这使我们能够检测问题并主动修复它们，即使集群的运行状况没有受到损害。
一些处理日志的商业工具，如 Loggly，允许我们从日志本身导出指标，根据日志的种类绘制图表，或者从中提取值并将其用作值。虽然不如普罗米修斯这样的系统完整，但它们可以监控一些值。它们还允许我们在达到阈值时发出通知。
The monitoring space is full of products, both free and paid, that can help us to handle this. While it's possible to create a completely in-house monitoring system, being able to analyze whether commercial cloud tools will be of help is crucial. The level of features and their integration with useful tools such as external alerting systems will be difficult to replicate and maintain.
警报也是一个持续的过程。一些元素将会被发现，并且必须创建新的警报。一定要投入时间，让一切都按预期进行。当系统不健康时，将使用日志和指标，在这些时刻，时间是至关重要的。您不想猜测日志，因为主机参数配置不正确。
# 做好准备
同样，除非恢复过程已经过测试并且正在运行，否则备份是没有用的，在检查监控系统是否正在产生有用的信息时要积极主动。
特别是，尝试标准化日志，以便对包含哪些信息以及如何构建有一个良好的预期。不同的系统可能会产生不同的日志，但最好让所有微服务的日志都采用相同的格式。仔细检查是否正确记录了任何参数，如客户端引用或主机。
这同样适用于指标。当您跟踪问题时，拥有一套每个人都了解的指标和仪表板将节省大量时间。
# 摘要
在本章中，我们学习了如何使用日志和指标，以及如何使用`syslog`协议设置日志并将其发送到集中的容器。我们描述了如何向不同的应用添加日志，如何包含请求标识，以及如何从不同的微服务中生成定制日志。然后，我们学习了如何定义策略来确保日志在生产中有用。
我们还描述了如何在所有微服务中设置标准和定制的普罗米修斯指标。我们启动了一台普罗米修斯服务器，并对其进行了配置，使其能够从我们的服务中收集指标。我们启动了一个 Grafana 服务，这样我们就可以绘制指标并创建仪表板，这样我们就可以显示集群和正在运行的不同服务的状态。
然后，我们向您介绍了普罗米修斯的警报系统，以及如何使用它来通知我们问题。请记住，有一些商业服务可以帮助您处理日志、指标和警报。分析您的选项，因为它们可以为您节省大量维护成本方面的时间和金钱。
在下一章中，我们将学习如何管理影响几个微服务的变化和依赖关系，以及如何处理配置和机密。
# 问题
1.  系统的可观测性是什么？
2.  日志中有哪些不同的严重级别？
3.  度量标准用于什么？
4.  为什么需要在日志中添加请求标识？
5.  普罗米修斯中有哪些可用的度量标准？
6.  指标中的第 75 百分位是什么，它与平均值有什么不同？
7.  四大黄金信号是什么？
# 进一步阅读
通过阅读*监控 Docker*([https://www . packtpub . com/虚拟化与云/监控-docker](https://www.packtpub.com/virtualization-and-cloud/monitoring-docker) ，可以了解更多关于使用不同工具和技术进行监控的信息。要了解更多关于普罗米修斯和格拉夫纳的信息，包括如何设置警报，请阅读*用普罗米修斯进行基础设施实践监控*([https://www . packtpub . com/虚拟化和云/手动-基础设施-监控-普罗米修斯](https://www.packtpub.com/virtualization-and-cloud/hands-infrastructure-monitoring-prometheus))。
监控只是成功可靠地运行服务的起点。要了解如何成功改善您的运营，请查看*真实世界 SRE*([https://www.packtpub.com/web-development/real-world-sre](https://www.packtpub.com/web-development/real-world-sre))。