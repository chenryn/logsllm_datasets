{
int a, b;
a = open(“foo”, O RDONLY);
b = open(“bar”, O RDONLY);
. . .
close(a);
close(b);
}
(b) An example of a program motivating the utility
of pattern variables. By using the pattern variable to
match up each open call to its corresponding close call,
we can accurately track the state of each ﬁle descriptor.
Figure 6: An example showing the use of pattern
variables
Figure 8: A simpliﬁed FSA describing process priv-
ilege in Linux 2.4.17
FSA M with the PDA P using standard techniques [13,
Theorem 6.5]. This results in a new PDA, called the com-
posite PDA, which accepts the language L(M ) ∩ L(P ). The
initial conﬁguration of the composite PDA represents the
snapshot when the program starts, where the state of the
PDA is the initial state of the security model and the stack
of the PDA only contains the entry point of the program.
By using model checking techniques, MOPS can determine
if any risky state is reachable within the composite PDA.
If this is the case, then MOPS has found a potential secu-
rity violation and outputs an execution path in the program
that causes this violation. For example, MOPS ﬁnds that
the path in Figure 7 from the program in Figure 4 violates
the security property in Figure 3(a).
Furthermore, MOPS can determine, for each statement in
a program, all the states in an FSA that the statement can
be executed in. For example, if the FSA contains a priv-
ileged and an unprivileged state, MOPS tells which state-
ment may be executed in the privileged state. If this does
not meet a programmer’s expectation, a vulnerability is
likely. We speculate that this additional functionality may
be very useful when auditing security-critical programs by
hand.
4. MODELING OPERATING SYSTEMS SE-
MANTICS
Since a security model is an abstract representation of
the security operations in an operating system, we need to
understand the semantics of the security operations precisely
to construct an accurate security model. This, however, is
often diﬃcult because the semantics of security operations
is subtle and varies among diﬀerent operating systems (such
as diﬀerent ﬂavors of the Unix system). Moreover, their
documentation is sometimes incomplete or incorrect [8].
We advocate relying on the kernel code for the construc-
tion of security models, since the kernel code determines the
semantics of the security operations. We adopt a two step
process:
in the ﬁrst step, ﬁnd out all the kernel variables
that aﬀect the security operations and then determine the
states in the FSA based on these kernel variables; in the
second step, determine the transitions among these states
in the FSA. The ﬁrst step can usually be done by hand, but
manually doing the second step is often laborious and error
prone because of the large number of transitions. We tackle
this problem by writing a state-space explorer that exhaus-
tively executes all the security operations on the operating
system and automatically creates all the transitions in the
security model.
To illustrate this process, we will show how to build a
security model that describes the transition of privilege in a
process in Linux 2.4.17. Further details may be found in a
companion paper [8].
4.1 A simple model
Since the privilege of a process is carried in its euid, we
start with a simple model with two states: the privileged
state priv representing when the euid is zero and the un-
privileged state unpriv representing when the euid is non-
zero, as shown in Figure 8. The call seteuid(0) causes a
transition from unpriv to priv and any call to seteuid with
a non-zero argument, denoted by seteuid(!0), causes a re-
verse transition. Furthermore, the euid can also be changed
by the setuid, setreuid, and setresuid system calls, so they
are also added into the model (not shown in Figure 8 for
legibility). We will refer to these system calls that modify
the user IDs of a process as the uid-setting system calls.
4.2 Improving the model
The above simple model, however, is inaccurate. The be-
havior of the uid-setting system calls depends not only on
the euid but also on the ruid and suid [8]. Therefore, we
extend the model to consider all the three user IDs. The
range of values in each user ID determines the number of
states in the model. Typically, a process switches its user
IDs between root, whose user ID is zero, and a non-root
user, whose user ID is non-zero.
In this case, the model
needs eight states to describe all possible combinations of
the values in the three user IDs.
In addition, there is an
error state, which represents a failed system call. This re-
sulting model is shown in Figure 9. For legibility, all input
symbols (system calls) on the transitions are omitted.
To verify if the states in this model are complete, we need
to ﬁnd out if other kernel variables besides the ruid, euid,
and suid of a process can aﬀect the behavior of the uid-
setting system calls. A search through the kernel ﬁnds that
the eﬀective capability (cap eﬀective), the permitted capa-
bility (cap permitted ), and the variable keep capabilities of
closedopenx=open( )close(x)otherotherunprivprivseteuid(0)seteuid(!0)otherotherFunction
Program Point
Statement
main
main
drop privilege
drop privilege
main
m0:
m1:
d0:
d1:
m2:
do something with privilege();
drop privilege();
if ((passwd = getpwuid(getuid())) == NULL)
return; // but forget to drop privilege!
execl(“/bin/sh”, “/bin/sh”, NULL); // risky system call
Figure 7: An execution path that causes a security violation, from the program in Figure 4.
jmp buf env;
void signalhandler()
{
seteuid(0);
logwtmp(message, ””, ””);
longjmp(env, 1);
}
int main()
{
// drop privilege
seteuid(getuid());
...
setjmp(env);
// do something potentially risky
...
}
Figure 9: A reﬁned view of the Linux 2.4.17 process
privilege model, capturing the ruid, euid, and suid.
a process are also relevant. Like the ruid, euid, and suid,
they are also per-process variables. We add cap eﬀective
and cap permitted into the state space, each of which is rep-
resented as a binary value. We ignore keep capabilities be-
cause few programs modify it and we let MOPS warn about
such programs.
4.3 Determining Transitions
Having determined the states in the security model, the
next step is to create transitions in the model. However, it
would be too laborious and error prone to create the huge
number of transitions in Figure 9 and Figure 10. Instead,
we write a state-space explorer that creates the transitions
automatically. From each state in the FSA, the explorer
determines all the outgoing transitions from this state by
making all the uid-setting system calls from this state and
examining the state transitions resulting from the calls. A
proof of correctness of this approach and other details may
be found elsewhere [8].
5. APPLICATIONS
5.1 Checking Privilege Flow in Non-local Con-
trol Flow
5.1.1 Problem
Figure 11: A program with a security vulnerability
caused by longjmp carrying privilege to the call site
of setjmp, where privilege should have been dropped
POSIX allows a program to do a non-local jump by call-
ing longjmp, in which the program jumps to the stack con-
text saved by a previous setjmp call. Since non-local jumps
are not in the Control Flow Graph of the program, most
program analysis tools cannot analyze them. However, non-
local jumps are prone to security vulnerabilities since they
may cause unexpected control ﬂow. For example, the pro-
gram in Figure 11 starts with privilege. Then, it drops priv-
ilege (by calling seteuid(getuid())) before doing potentially
risky operations in the function main. However, if the pro-
gram subsequently receives a signal, the longjmp call in the
function signalhandler will cause the program to jump into
the function main (immediately after the call site of setjmp)
with the privilege obtained in signalhandler. Thereafter,
the program will execute potentially risky operations in the
function main with privilege.
5.1.2 Temporal Safety Property
To prevent a longjmp call from carrying privilege to the
call site of a setjmp where privilege should have been dropped,
we propose the following temporal safety property:
Property 4: the privilege of a process when it
calls longjmp must match its privilege when it
calls setjmp.
Obviously, an FSA describing this property should have two
dimensions: one dimension records the privilege of the pro-
cess when it last called setjmp, and the other records its
ruid=0,euid!=0,suid=0ruid=0,euid=0,suid=0ruid!=0,euid!=0,suid!=0ruid=0,euid!=0,suid!=0ruid!=0,euid=0,suid=0ruid=0,euid=0,suid!=0ruid!=0,euid=0,suid!=0ruid!=0,euid!=0,suid=0ERRORFigure 10: A further reﬁned model of process privilege in Linux 2.4.17, this time capturing all of the ruid,
euid, suid, eﬀective and permitted capabilities.
current privilege. The states in the FSA whose privileges in
the two dimensions are diﬀerent represent violation of this
property. Formally, let F be the FSA describing the tran-
sition of privilege in a process (constructed in Section 4)
and let S be the set of states in F . We derive an FSA
G that describes the above property. The states in G are
S × (S ∪ {⊥}) ∪ {ERROR}, where × denotes the Cartesian
product and ⊥ represents the uninitialized state (the setjmp
buﬀer is in the uninitialized state before the ﬁrst setjmp is
called). Use the following rules to add transitions to G.
• For every transition u i→ v in F and every state s ∈
(S ∪ {⊥}), add a transition (u, s) i→ (v, s) to G .
• For every state s ∈ S and t ∈ (S ∪ {⊥}), add a transi-
tion (s, t)
setjmp(env)
−→ (s, s) to G.
• For every state s ∈ S and t ∈ (S ∪{⊥}) and s 6= t, add
ERROR to G where the
a transition (s, t)
state ERROR indicates violation of the property.
longjmp(env, *)
−→
• For every state s ∈ S, add a transition
(s, s)
longjmp(env, *)
−→
(s, s) to G.
5.1.3 Implementation
We used the above security model to ﬁnd a known secu-
rity vulnerability in wu-ftpd version 2.4 [6]. The vulnerabil-
ity is similar to the one in Figure 11, except that seteuid(0)
and longjmp(env) are called in the handlers for the signals
SIGPIPE and SIGURG respectively. Therefore, by sending
the signal SIGURG immediately after the signal SIGPIPE
to a wu-ftpd process, an attacker can cause the process to
call seteuid(0) in the handler of the signal SIGPIPE to gain
privilege, and then to call longjmp(env) in the handler of
the signal SIGURG to return to the call site of setjmp(env)
in the function main. Thereafter, wu-ftpd will execute with
root privilege, which results in giving the attacker root priv-
ilege.
Since this vulnerability involves signal handling which is
not part of the control ﬂow of a program and which most
program analysis tools, including MOPS, are unable to han-
dle, at present we need to manually insert the control ﬂow of
signal handling into the program. A naive approach would
be to non-deterministically add a call to a signal handler
after every statement in the program wherever the signal is
enabled. This is too laborious. Fortunately, there is a better
approach. We observe that it is suﬃcient to add such calls
only after the statements that may trigger state changes
in the FSA. Since only the uid-setting system calls and the
setjmp call may trigger transitions in the above FSA, we only
need to non-deterministically add a call to a signal handler
after the uid-setting system calls and the setjmp call in the
program wherever the signal is enabled. This substantially
reduces the number of calls added to the program. The need
to modify the program by hand is a repairable limitation of
our current implementation, not a fundamental limitation
of the approach. It would be straightforward to extend the
control ﬂow analysis to add transitions for signal handlers as
needed automatically, and we hope to add this to a future
version of MOPS.
Since longjmp(env, * ) causes a program to jump to the