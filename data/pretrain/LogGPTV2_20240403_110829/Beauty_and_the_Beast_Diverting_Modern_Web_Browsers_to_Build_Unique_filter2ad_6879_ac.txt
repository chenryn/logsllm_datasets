1
l
h
s
a
F
o
N
h
s
a
F
l
% 0
20
40
60
80
100
% 0
20
40
60
80
100
Fig. 6. Comparison of anonymity set sizes on the user-agent between Chrome
and Firefox on mobile devices
Fig. 7. Comparison of anonymity set sizes between devices with and without
Flash
We saw in the previous section that user-agents can give
really discriminating information on the user’s device. Some
smarpthones running Android give the exact model and
ﬁrmware version of their phone. Looking at Figure 6, user
agents from the Chrome mobile browser are ten times more
unique than user agents from the Firefox browser (40% against
less than 4%). This can be explained by the fact that the
Chrome browser is the default browser on Android and it
is automatically installed on every devices. When a phone
manufacturer builds its tailored ﬁrmware to be delivered to its
clients, the embedded Chrome browser has a user-agent with
information on the corresponding phone model and Android
version. On the other side, Firefox which can be downloaded
from the Google Play Store does not contain this type of
information because the store only offers a generic version
for every Android mobile and it does not change its user-
agent during its installation. Firefox indirectly provides a much
better protection against ﬁngerprint tracking by not disclosing
device-related information.
You can ﬁnd below two ﬁngerprints collected from the same
device but with a different browser: the ﬁrst with Chrome, the
second with Firefox.
Mozilla/5.0 (Linux; Android 4.4.4; D5803
Build/23.0.1.A.5.77) AppleWebKit
/537.36 (KHTML, like Gecko) Chrome
/39.0.2171.93 Mobile Safari/537.36
Mozilla/5.0 (Android; Mobile; rv:34.0)
Gecko/34.0 Firefox/34.0
V. ASSESSING THE ROBUSTNESS OF FINGERPRINTING
AGAINST POSSIBLE TECHNICAL EVOLUTIONS
Web technologies evolve very fast, and we have seen in
previous sections that some recent evolutions limit ﬁngerprint-
based identiﬁcation (e.g., no Flash on mobile devices), while
others open the door to increased identiﬁcation (e.g., WebGL
reveals ﬁne grained information about the GPU).
In this section, we explore 6 potential evolutions that web
technology providers (browsers and app developers, standard-
ization organizations) could set up. We demonstrate that they
would limit
the effectiveness of browser ﬁngerprinting by
simulating their impact on our dataset. The ﬁrst two scenarios
are based on current trends in web technologies, while the
others are more speculative and based on the observations
made in previous sections. It should be noted that we do not
estimate the impact of scenarios no4 and 5 since we can hardly
predict which attributes would be affected and how. We also
treat scenario no6 separately, due to its extreme nature.
Scenario no1 - The deﬁnitive disappearance of Flash
The Flash plugin is progressively disappearing. It has been
deprecated on all smartphones, tablets and mobile devices used
to browse the web. On laptop and desktop browsers, Flash’s
security ﬂaws have progressively created mistrust in its users.
Click-to-play is becoming standard on most browsers. In the
meantime, the number of web applications that replace Flash
with JavaScript and HTML5 is also growing. These phenom-
ena let us plausibly foresee the deﬁnitive disappearance of
Flash.
Interestingly, Flash is still present in 80% of our Desktop
ﬁngerprints. Among these cases, 71.7% have it activated,
26.3% are using click-to-play protections, and 2.0% block
Flash, likely by a browser extension.
Impact of scenario no1: Figure 7 shows the impact of the
Flash plugin on ﬁngerprint uniqueness. The “No Flash” bar
shows statistics over our complete dataset (for the 60,617
ﬁngerprints that have Flash, we simulate its absence by re-
moving the attributes obtained through Flash). The “Flash”
bar is computed with the subset of ﬁngerprints that have Flash,
since it is not possible to simulate the presence of Flash on
ﬁngerprints that don’t have it. We uniquely identify 95% of
the browsers that have Flash, while this is reduced to 88%
for those without Flash. The sizes of the anonymity sets are
notably small, with less than 0.6% of the ﬁngerprints in a
set of size 50 or greater. These numbers conﬁrm that browser
ﬁngerprinting in a Flash-less future is certainly possible, and
that the wealth of ﬁngerprintable attributes compensates for
the lack of access to Flash speciﬁc attributes.
Scenario no2 - The end of browser plugins
In 2013, Google decided to stop supporting NPAPI plugins
in Chrome and to rely exclusively on the technology embedded
886886
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
0
1
.
8
0
.
6
0
.
4
0
.
2
0
.
i
s
n
g
u
p
l
f
o
y
p
o
r
t
n
e
d
e
z
i
l
a
m
r
o
N
0
0
.
Chrome 43 (May'15)
Chrome 41 (Mar'15)
Chrome 39 (Nov'14)
Chrome 40 (Jan'15)
Chrome 47 (Dec'15)
Chrome 46 (Oct'15)
Chrome 42 (Apr'15)
Chrome 45 (Sep'15)
Chrome 44 (Jul'15)
Firefox 40 (Aug'15)
Firefox 42 (Nov'15)
Firefox 43 (Dec'15)
Firefox 41 (Sep'15)
Browser
Fig. 8. Evolution of the normalized entropy of plugins for different browsers
on desktop computers
in modern browsers and the functionalities offered by HTML5
and JavaScript
to let developers extend the browser [14].
This has forced developers to migrate old plugins to newer
alternatives [15] or to drop their support. Nevertheless, since
its enforcement, it has the advantage of drastically reducing
the entropy of the list of plugins. In 2015, version 42 of
Chrome deprecated the support of NPAPI plugins by default
and version 45 permanently removed their support.
This radical evolution, and the absence of plugins on mobile
platforms,
lets us foresee a more global evolution where
browsers no longer provide a plugin-based architecture. Yet,
this is challenging because plugins currently still provide a
large number of features (as discussed in section II-B, we
observed 2,458 different plugins in our dataset). Mozilla had
plans to hide unpopular plugins with a whitelist [16] but they
did not ﬁnd a satisfying working solution that would not break
websites or functionality. In October 2015, they announced the
removal of NPAPI support by the end of 2016 [17].
Impact of scenario no2: To estimate the impact of this
scenario, we look at the entropy of plugins for Chrome since
Google decided to deprecate the support of NPAPI plugins.
Figure 8 shows the evolution of the normalized entropy of
plugins for the stable releases of Chrome since the launch
of the AmIUnique website. The last 4 stable versions of
Firefox were added for comparison. Up to version 42, the
normalized entropy of the list of plugins was above 0.8. Since
the release of version 42, the entropy of the list of plugins
has dropped below 0.5. This improvement is signiﬁcant and
the effects are getting bigger with the release of version 45
where the NPAPI support is permanently dropped (the entropy
is not at zero since there are small differences in the plugin
NPAPI support
Enabled
Disabled
Removed
list between operating systems). Removing plugin support
deﬁnitely impacts desktop ﬁngerprints and it seems that their
use in browser ﬁngerprinting is becoming limited.
Scenario no3 - Adherence to the standard HTTP headers
A major source of information for browser ﬁngerprinting
comes from application and system developers that add ar-
bitrary information in headers by either modifying existing
headers (e.g., the user-agent) or by adding new ones. Yet,
the Internet Engineering Task Force (IETF) has standardized
a list of ﬁelds for HTTP headers. The current diversity in
the contents of the user-agent ﬁeld results from a very long
history of the ‘browser wars’, but could be standardized today.
This scenario explores the possibility that technology providers
converge on a standard set of HTTP header ﬁelds, and that they
follow the standard.
Impact of scenario no3: To estimate the impact of adherence
to standard HTTP headers, we simulate the fact that they are
all the same in our dataset. On desktops, the improvement is
moderate with a decrease of exactly 8% from 90% to 82%
in overall uniqueness. However, on mobile ﬁngerprints, we
can observe a drop of 21% from 81% to 60%. This illustrates
the importance of headers, and especially the user-agent, for
mobile ﬁngerprinting and the fact that generic user-agents are
essential for privacy.
Combining scenarios no1-2-3: The biggest surprise of this
analysis comes from combining the 3 scenarios. For mobile
devices the results are signiﬁcant but not overwhelming, the
number of unique ﬁngerprints drops by 22%. However for
desktop devices, the percentage drops by a staggering 36%,
from 90% to 54%. This means that if plugins disappear and
if user-agents become generic, only one ﬁngerprint out of two
would be uniquely identiﬁable using our collected attributes,
which is a very signiﬁcant improvement to privacy over the
current state of browser ﬁngerprinting.
Scenario no4 - Reduce the surface of HTML APIs
The potential disappearance of Flash and plugins will oc-
cur only if developers ﬁnd suitable replacements with rich
HTML and JavaScript features. Consequently, HTML APIs
keep growing, providing access to an increasing number of
information about the browser and its environment. As we
saw in section III, the WebGL and canvas elements provide
important information for identiﬁcation. There are potentially
many more APIs that leak identifying information.
Setting the best trade-off between rich features and privacy
is a critical and difﬁcult choice when setting up new APIs.
Developers debate extensively on this kind of trade-off [18].
Yet, it is possible to foresee that future API developments,
combined with informed studies about privacy such as the
recent work by Olejnik and colleagues [19], will
lead to
reduced APIs that still provide rich features.
Scenario no5 - Increase common default content
This scenario explores the possibility that browser or plat-
form developers increase the amount of default elements,
887887
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
Size of the anonymity sets
>50
2−50
1
Complete fingerprint
S
J
o
N
S
J
% 0
20
40
60
80
100
Fig. 9. Comparison of anonymity set sizes on the complete ﬁngerprint
between devices with and without JavaScript
which would be the only ones exposed publicly. For example,
we could envision a whitelist of fonts that are authorized to be
disclosed by the browser, as suggested by Fiﬁeld and Egelman
[20]. Such a list would contain the default fonts provided by
an operating system. This whitelist of fonts would also include
a default encoding for emojis that is common to all versions
of the operating system, or even common to all platforms.
This evolution would aim at reducing the amount of infor-
mation disclosed to external servers. Yet, it should not prevent
the users from adding new fonts or new emoji renderings.
These customization decisions should be allowed without
increasing the risks for privacy.
Scenario no6 - The end of JavaScript
This last scenario explores the eventuality of coming back
to a more static web, without JavaScript. This is the most
unlikely today, as it would drastically reduce the dynamicity
and comfort of browsing. Yet, there are currently millions of
users who have installed the NoScript extension, which gives
control to users on which websites JavaScript is allowed to run.
We believe that it makes sense to explore the impact of such an
evolution on identiﬁcation through ﬁngerprinting. Currently by
disabling JavaScript, some sites do not render at all or render
improperly, while most popular sites lose functionality even if
properly rendered.
Figure 9 shows the impact of the unlikely return to a
more static web. The presence of JavaScript in today’s web
helps make 89.4% of browsers uniquely identiﬁable, while
removing JavaScript reduces the rate down to 29% on our
dataset. This percentage could be even lower if user-agents
become generic, as stated in scenario no3. In that case, only
7% of ﬁngerprints would be unique. The privacy beneﬁts are
undoubtedly signiﬁcant but the cost to developers and to the
users’ comfort would be very high.
Conclusion
Here we have quantiﬁed the impact of possible technology
evolution scenarii. While some of them could become reality
in the not-so-distant future, others are less plausible. Yet, we
demonstrate that they can beneﬁt privacy with a limited impact
on the beauty of current web browsing.
It is important to notice that tools already exist that can
mitigate browser ﬁngerprinting in similar ways as the scenarii
discussed in this section. Ad and script blockers, like Ghostery
[21] or Privacy Badger [22], prevent known ﬁngerprinting
scripts from being executed in the browser. The NoScript [23]
extension blocks the execution of unwanted JavaScript scripts,
which is a direct reﬂection of scenario no6. The Tor browser
team has modiﬁed Firefox to create a large range of defenses
against browser ﬁngerprinting [24]: from the complete removal
of plugins to canvas image extraction blocking, their most
recent addition being a defense against font enumeration by
bundling a set of default fonts with the browser [25]. This
protection illustrates scenario no5 where the set of exposed
fonts is greatly reduced.
VI. RELATED WORK
We distinguish three main areas of the literature on browser
ﬁngerprinting: analysis of client-side diversity, analysis of
ﬁngerprinting adoption on the web and server-side scripts,
and advanced solutions to collect additional ﬁngerprintable
attributes. While our work is mostly related to the ﬁrst
category of work, we discuss the other two since they have
inspired some of the ﬁngerprinting techniques included in
AmIUnique.org.
Client-side diversity: The work by Peter Eckersley is
closely related to our study. In 2010 he launched the Panop-
ticlick website, aimed at collecting device-speciﬁc information
via a script that runs in the browser [7]. The script created
browser ﬁngerprints by collecting 10 different attributes that
characterized the browser and its execution platform. He
observed that 83% of visitors had instantaneously recognizable
ﬁngerprints, and this number rose to 94% for browsers that
had the Flash or Java plugins enabled. He showed that the
list of fonts (collected through the Flash API) and the list of
plugins (collected through the JavaScript API) were the most
distinguishable attributes.
The key novelties of our work with respect to Eckersley’s
study are as follow: the ﬁngerprints we collect are richer and
exploit some of the most recent web technologies (section
III shows the essential role of canvas ﬁngerprinting); Eck-
ersley did not analyze mobile ﬁngerprints separately from
the others, while we perform a detailed analysis of how
ﬁngerprinting behaves for browsers on mobile devices; we
assess the effectiveness of browser ﬁngerprinting against dif-
ferent
technological evolution scenarios. It should also be
noted that the technological changes to the web since 2010
(e.g., the deprecation of the Netscape Plugin API, the steady
disappearance of Flash, the arrival of HTML5) have strongly
impacted browser ﬁngerprinting, changing the importance of
various ﬁngerprintable attributes.
Very few other works have investigated the behavior of
ﬁngerprinting algorithms on client browsers. Yen et al. ana-
lyzed month-long datasets from Hotmail and Bing [26]. They
combined the user-agent with the IP address, and succeeded
in tracing back to a single host with 80% precision. While
this work is also about ﬁngerprinting, it has a much narrower
888888
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
focus than ours (they consider only the user agent) and they
do not consider the robustness of their approach, e.g., against
agent spoofers. Spooren et al. recently analyzed 59 mobile
device ﬁngerprints [27] and concluded that “the ﬁngerprints
taken from mobile devices are far from unique". Our ﬁndings
on mobile diversity are quite different (cf. section IV): 81%
of our 13,105 mobile ﬁngerprints are unique. We see two
possibles reasons for the different conclusions: the scale effect
(our dataset is two orders of magnitude larger that Spooren’s);
Spooren et al. do not consider canvas ﬁngerprinting, while
we demonstrate that the canvas test is essential to distinguish
mobile ﬁngerprints. Finally, Boda et al. [28] showed that cross-
browser ﬁngerprinting was feasible if enough data on the
underlying operating system was collected. With our study,
we did not explore this possibility since we do not know with
certainty when two different ﬁngerprints are from the same
device but different browsers.
Adoption of ﬁngerprinting on the web and server-side
scripts: Some radically different works investigate the extent
to which browser ﬁngerprinting is adopted by web sites in the
wild. Although these works investigate the same phenomenon
as we do, the perspective is completely different, as are the
conclusions and lessons learnt.
Nikiforakis et al. [1] analyzed the ﬁngerprinting scripts of
three popular commercial companies. They concluded that
user-privacy was on “the losing side" and that commercial
scripts used intrusive techniques to get the most data out of
every browser.
FPDetective [2] was the ﬁrst study about the adoption of
browser ﬁngerprinting on the web. Crawling the million most
popular websites, they demonstrated the wide adoption of
ﬁngerprinting, and that ﬁngerprinters completely disregard the
user’s Do Not Track preference. The same authors showed that
5.5% of the top 100,000 sites actively ran canvas ﬁngerprinting
scripts on their home pages [6].
New techniques for richer ﬁngerprints: Several works have
deﬁned different ways to ﬁngerprint devices or browsers in
order to better differentiate them. Mowery and Schacham
worked on the HTML canvas and WebGL elements [4], Mow-
ery et al. on benchmarking the performance of core JavaScript
operations [29], Mulazzani et al. checked the conformance
of the browsers’ JavaScript engines to the ECMAScript stan-
dard [30], Fiﬁeld et al. measured the onscreen dimensions of
font glyphs [20], and Olejnik et al. used the HTML5 Battery
Status API for ﬁngerprinting purposes [19].
We kept only the work of Mowery and Schacha [4] in our
script because canvas and WebGL tests are light and can be
run in a matter of milliseconds. The other approaches take
either too much time (e.g. more than 3 minutes to test the
performance of JavaScript operations [29]), were too fragile
(e.g., the battery API elements [19]), or did not add any valu-
able information to the pool of attributes that we already had
(e.g. [20], [30]). We note that in general, new ﬁngerprinting
techniques are complementary to our work because they can
be used as new distinguishing attributes in the ﬁngerprinting
algorithm, allowing for better precision in uniquely identifying
browsers.
VII. CONCLUSION
In this work we analyzed 118,934 browser ﬁngerprints col-
lected through the AmIUnique.org web site. Our work focuses
on the impact evolutions in modern web technology have had
on the ability to uniquely identify devices through browser
ﬁngerprinting. We argue that modern web technologies provide
a much improved user experience, albeit to the detriment of
privacy.
The key insights from our study are as follows. First, our
observations conﬁrm the results of previous studies on the ease
of ﬁngerprinting in today’s ecosystem [6], [31]. Second, we
provide novel insights about the impact of the most recent
browser APIs, including the ﬁrst large-scale analysis of the
HTML5 canvas on ﬁngerprinting, as well as the inﬂuence of
recent trends, such as the decreasing presence of Flash and
other plugins on the web.
We also provide the ﬁrst extensive analysis of ﬁngerprints
collected from mobile devices: 81% of the mobile ﬁngerprints
in our dataset are unique. We show that HTTP headers and
HTML5 canvas ﬁngerprinting play an essential role in identi-
fying browsers on these devices. Furthermore, in the absence
of the Flash plugin to provide the list of fonts, there is no
longer any major discriminating attributes, thus identiﬁcation
is based on the collection of many lesser attributes that appear
harmless by themselves, but when aggregated lead to unique
ﬁngerprints.
Our dataset, and the associated observations, allow us to
evaluate the impact of possible evolutions in web technologies
on browser ﬁngerprinting. We show that certain scenarios
would limit the detriment these technologies have on privacy,
while preserving the current
trend towards an ever more
dynamic and rich web. Having generic HTTP headers and
removing browser plugins could reduce ﬁngerprint uniqueness
in desktops by a strong 36%.
ACKNOWLEDGMENT
The authors would like to thank Nick Nikiforakis and
Gildas Avoine for providing insightful feedback while writing
this paper. We also want to thank our shepherd Adrienne
Porter Felt and the anonymous reviewers for their valuable
comments. This work is partially supported by the EU FP7-
ICT-2011-9 No. 600654 DIVERSIFY and the CNRS INS2I
JCJC 2016 FPDefendor projects.
REFERENCES
[1] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and
G. Vigna, “Cookieless monster: Exploring the ecosystem of web-based
device ﬁngerprinting,” in Proc. of the Symp. on Security and Privacy,
2013, pp. 541–555.
[2] G. Acar, M. Juarez, N. Nikiforakis, C. Diaz, S. Gürses, F. Piessens, and
B. Preneel, “Fpdetective: dusting the web for ﬁngerprinters,” in Proc.
of the Conf. on Computer & Communications Security (CCS). ACM,
2013, pp. 1129–1140.
http://www.google.com/policies/privacy/
[3] “Google
Policy,”
archive/20150501-20150605/.
Privacy
[4] K. Mowery and H. Shacham, “Pixel perfect: Fingerprinting canvas in
IEEE
HTML5,” in Proceedings of W2SP 2012, M. Fredrikson, Ed.
Computer Society, May 2012.
889889
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:14:16 UTC from IEEE Xplore.  Restrictions apply. 
[11] “ANGLE: Almost Native Graphics Layer Engine,” https://chromium.
[12] “Masking Agent extension for Firefox,” https://addons.mozilla.org/
latest/1.0/.
googlesource.com/angle/angle.
ﬁrefox/addon/masking-agent/.
[5] “Mobile internet usage soars by 67%,” http://gs.statcounter.com/press/
mobile-internet-usage-soars-by-67-perc.
[6] G. Acar, C. Eubank, S. Englehardt, M. Juarez, A. Narayanan, and
C. Diaz, “The web never forgets: Persistent tracking mechanisms in
the wild,” in Proceedings of the 21st ACM Conference on Computer
and Communications Security (CCS 2014). ACM, 2014.
[7] P. Eckersley, “How unique is your web browser?” in Proceedings of
the 10th International Conference on Privacy Enhancing Technologies,