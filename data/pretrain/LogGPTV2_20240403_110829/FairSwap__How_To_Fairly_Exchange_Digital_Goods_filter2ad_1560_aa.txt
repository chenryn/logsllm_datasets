title:FairSwap: How To Fairly Exchange Digital Goods
author:Stefan Dziembowski and
Lisa Eckey and
Sebastian Faust
FairSwap: How to fairly exchange digital goods
Stefan Dziembowski∗1, Lisa Eckey†2 and Sebastian Faust†2
1Institute of Informatics, University of Warsaw
2Department of Computer Science, TU Darmstadt
Abstract
We introduce FairSwap – an eﬃcient protocol for fair exchange of digital goods using smart
contracts. A fair exchange protocol allows a sender S to sell a digital commodity x for a ﬁxed
price p to a receiver R. The protocol is said to be secure if R only pays if he receives the correct
x. Our solution guarantees fairness by relying on smart contracts executed over decentralized
cryptocurrencies, where the contract takes the role of an external judge that completes the
exchange in case of disagreement. While in the past there have been several proposals for
building fair exchange protocols over cryptocurrencies, our solution has two distinctive features
that makes it particular attractive when users deal with large commodities. These advantages
are: (1) minimizing the cost for running the smart contract on the blockchain, and (2) avoiding
expensive cryptographic tools such as zero-knowledge proofs. In addition to our new protocols,
we provide formal security deﬁnitions for smart contract based fair exchange, and prove security
of our construction. Finally, we illustrate several applications of our basic protocol and evaluate
practicality of our approach via a prototype implementation for fairly selling large ﬁles over the
cryptocurrency Ethereum.
Introduction
1
Consider a setting where a receiver R wishes to buy a digital commodity x from a sender S. The
receiver is willing to pay price p for x if it satisﬁes some predicate φ, i.e., if φ(x) = 1. For instance,
x may be a ﬁle (e.g., some movie) and φ outputs 1 if hashing x results into some ﬁxed value h (i.e.,
H(x) = h). Suppose that the parties wish to execute the exchange over the Internet, where R and
S do not trust each other. A fundamental problem that arises in this setting is how to guarantee
that the exchange is executed in a fair way. That is, how can we make sure that S receives the
payment when he delivers x to R such that φ(x) = 1; and similarly, how can we guarantee that
R only needs to pay the money if x is indeed correct. Unfortunately, it has been shown that
without further assumptions it is impossible to design protocols that guarantee such strong fairness
properties [39]. A simple way to circumvent this impossibility is to introduce a trusted middleman
– in practice often referred to as an escrow service [32] – which waits to receive the money from R
and the commodity x from S, and only executes the exchange if φ(x) = 1 is satisﬁed. Unfortunately
∗
This work has been co-funded by the Foundation for Polish Science grant TEAM/2016-1/4 founded within the
UE 2014-2020 Smart Growth Operational Program
†
This work has been co-funded by the DFG as part of project S7 within the CRC 1119 CROSSING and by the
Emmy Noether Program FA 1320/1-1
1
such fully trusted middleman are often not available (e.g., there are countless examples of so-called
“bogus” escrow services), or if available, this serive is very costly.
A promising alternative for implementing escrow services over the Internet is oﬀered by decen-
tralized cryptographic currencies. Cryptocurrencies replace the trusted middleman by a distributed
network, where so-called miners maintain a shared data structure – the blockchain – storing the
transactions of the system. In addition to simple payments many cryptocurrencies oﬀer more com-
plex transactions, often referred to as smart contracts, that allow users to carry out payments
depending on the execution of a program. Using smart contracts one can easily design a straight-
forward solution for the problem of securely selling digital goods over the Internet. In an initial step
the two parties R and S set up a contract, where R blocks p coins in the underlying cryptocurrency
which guarantees the payment if S (within some time frame) sends a witness x to the contract such
that φ(x) = 1. Once the contract is deployed on the network, either S can trigger the payment of
p coins by publishing x to the contract, or R can get his coins back after the timeout has passed.
The underlying consensus mechanism of the cryptocurrency guarantees that the money transfer is
only executed if the conditions are met, i.e., if x satisﬁes the predicate φ, or the refund is valid.
While the above smart contract example achieves fairness from the point of view of S and R, it
has an important drawback if x is large. Since in cryptocurrencies users pay fees to the miners for
every step of executing a smart contract, storing and computing complex instructions results into
high costs due to fees. For instance, in the cryptocurrency Ethereum, which oﬀers rich support
for smart contracts, the amount of gas (the currency unit used in Ethereum to pay fees) paid for
executing the smart contract strongly depends on two factors: (a) the complexity of the program φ
and (b) the size of x. Concretely, for storing a value x of size 1 MB in Ethereum the parties would
need to pay more than USD 500 in transaction fees1.
An appealing solution to the above problem called zero knowledge contingent payments (ZKCP)
has been proposed in [45]. ZKCP protocols use zero knowledge proofs [23], which guarantee that
a prover can convince a veriﬁer of the correctness of a statement, e.g., φ(x) = 1, without revealing
the witness x to the veriﬁer. More precisely a ZKCP protocol between S and R works as follows:
First, S encrypts x with key k. Moreover, it computes a commitment c = H(k) (where H is
a hash function) and a zero knowledge proof showing that computation of the ciphertext and
the commitment was indeed done with a witness x which satisﬁes φ(x) = 1. Next, S sends the
ciphertext, the hash and the zero knowledge proof to R, who veriﬁes the correctness of the zero
knowledge proof, and deploys a smart contract that pays p coins to S when the key is published.
All the contract needs to do is then to verify that h = H(k). It can be shown that if the underlying
cryptographic primitives are secure, then the ZKCP smart contract scheme realizes a fair exchange
protocol.
From a ﬁnancial point of view the ZKCP protocol is very cheap as it only requires the contract
to evaluate a hash function on a short input (the key). However, using the ZKCP unfortunately
puts signiﬁcant computational burden on the players R and S. Indeed, despite impressive progress
on developing eﬃcient zero knowledge proof system over the last few years, current state-of-the-art
schemes [19, 9, 40, 22] are still rather ineﬃcient if either φ gets complex, or the witness x becomes
large. Hence, an important question is whether we can design smart contract based protocols for
fair exchange, which combine the beneﬁts of both approaches. That is, the main goal of this work
is:
1. Design simple smart contracts that can be executed with low fees.
1Considering an exchange rate of 500 USD/Eth and a gas price of 3 Gwei.
2
2. Put low computational burdens on the players by avoiding the use of heavy zero-knowledge
proof systems.
In this work we develop a novel solution that achieves both goals simultaneously and enables eﬃcient
general fair exchange of digital commodities at low costs.
1.1 Our contribution
Eﬃcient fair exchange. Our main contribution is a novel protocol for carrying out fair exchange
by relying on smart contracts while avoiding costly zero-knowledge proofs. Our protocol works for
arbitrary predicate functions φ and witnesses x of large size. Concretely, we model φ as a circuit
with m gates taking as input a witness x = (x1, . . . , xn), where each xi is represented as a bit string
of length λ. We require that the gates of the circuit represent operations from some set of allowed
operations Γ. The main distinctive feature of our construction is its eﬃciency. Concretely, for a
circuit of size m our smart contract has asymptotic complexity of O(log(m)), where the hidden
constants in the asymptotic notation are small. In addition to small costs, the protocols that R and
S execute are very eﬃcient and avoid the use of expensive zero knowledge proofs. More precisely,
in addition to evaluating φ the parties only have to compute O(m) hash values.
Proof of misbehavior. Our construction is based on the following observation. While for large
circuits φ and witnesses x proving that S behaves correctly is very costly, it is much cheaper to
instead prove that S behaved incorrectly. As we show such a proof of misbehavior can be short and
its veriﬁcation involves only a small number of cryptographic operations. The proof can eﬃciently
be veriﬁed by the underlying smart contract, which upon receiving such a proof penalizes the
sender for cheating. At a technical level, we rely on ideas originally proposed in the context of
multiserver delegation of computation [18], but several technical challenges need to be addressed to
apply this idea in our setting. In particular, our construction is non-interactive and involves only
two parties (the sender and the receiver). Moreover, we have to provide privacy that guarantees
that the witness stays hidden until the receiver has committed coins into the contract for paying
the sender. We give a detailed description of our construction in Section 4.
Deﬁnitions and security analysis. A second contribution of our work is to provide a formal-
ization of contract-based or coin aided fair exchange protocols. To this end, we follow the universal
composability framework of Canetti [16] and develop a new ideal functionality that formally cap-
tures the security properties one would expect from a fair exchange protocol. Our model deviates
in two ways from the standard UC modeling. First, we take into account that protocol messages,
which relate to blockchain transactions, may take up to time ∆ to be processed due to the mining
process. To integrate these delays in our model, we let the adversary decide the exact duration of
a round, which can last at most time ∆. The second diﬀerence that is special to our modeling is
that we need to deal with coins. We deviate from earlier works by Bentov and Kumaresan [10],
who also model coins in a UC-like model, by introducing a global ideal functionality called ledger
L. The ledger functionality ensures that coins cannot be double spent and users cannot create new
money. In addition to providing a formal model, we also carry out a full security analysis of our
construction in the global random oracle model [17].
3
Applications. An appealing use case for our fair exchange protocol is selling ﬁles over the In-
ternet. Such ﬁle sharing protocols allow exchanging, e.g., software (like Linux, LATEX, Microsoft
Windows 10 updates [35]), archived Internet data [4], public governmental databases [44], scientiﬁc
data [34, 33], and movies [38], and are widely used in the Internet. In Section 5 we describe a
protocol, which allows a receiver to buy a large ﬁle x that matches with a particular hash value h.
Notice that in this application x may be many gigabytes large, but using our construction and the
proofs of misbehavior, we can reduce the data that has to be processed by the smart contract to a
few 100 bytes, while still guaranteeing fairness of the ﬁle exchange.
While our original motivation is to design eﬃcient protocols for fair exchange, we emphasize that
our work has also other interesting applications in the context of cryptocurrencies. In particular,
we observe that our protocol oﬀers an eﬃcient and low-cost construction for realizing the “claim-
or-refund” functionality of [10]. Claim-or-refund is used to design fair protocols for multiparty
computation and works as follows.
In an initial preparation phase a receiver can deposit some
coins p and a function φ into the contract. This preparation phase is followed by two stages. First,
in the claim phase, a party can claim the reward p by publishing an x such that φ(x) = 1. Finally,
in the refund phase the receiver can refund its p coins if nobody has claimed the reward yet. It
is easy to see that the above describes the fair exchange setting, where the reward corresponds to
the price paid for receiving x. Bentov and Kumaresan argue that claim-or-refund can be realized
with smart contracts, however, a naive implementation will result into large costs from fees when
φ is complex or x is large. Using our protocol claim-or-refund can be realized at signiﬁcantly lower
costs.
Extensions. A ﬁrst extension that we consider is to integrate penalties into our protocol to
mitigate the risk of denial of service attacks by the sender. This is realized by also letting the
sender S lock q coins into the contract, which will go to the receiver R if S is caught cheating.
Such ﬁnancial penalties allow us to deal with the costs and fees for R, which naturally occur in
smart contract based protocols. Concretely, we want that when S is caught cheating, e.g., by
sending a wrong ﬁle, R gets compensated for its costs of interacting with the contract (e.g., for the
initial contract deployment) but also for the time where he blocked the p coins (collateral costs).
This addition enforces honest behavior of rational senders.
To further reduce the costs of our construction, we discuss how we can run it inside oﬀ-chain
state channels (see, e.g., [2, 36]), when sender and receiver wish to execute multiple recurring fair
exchanges. To illustrate this setting consider a sender that wishes to sell t commodities to a receiver.
In our original protocol from above this use case results into O(t) interactions with the contract
running on the blockchain. In contrast using state channels the parties can use the contract multiple
times without requiring interaction with the blockchain, thereby signiﬁcantly reducing costs of our
construction. Once the state channel is open, the users can execute multiple fair exchanges between
each other, and in the optimistic case only need to interact with the blockchain during opening and
closing. This allows us to amortize the on-chain costs over multiple fair exchange executions.
Implementation. Besides our conceptual contributions, we also provide a proof-of-concept im-
plementation of our contract (c.f. github.com/lEthDev/FairSwap).
In our implementation we
focus on the ﬁle sale application mentioned above and discuss the advantages of contracts special-
ized for this application in comparison to the general construction. Additionally, we benchmark the
costs for deploying this contract and running our protocol over Ethereum. For more information
4
on the details of the implementation we refer the reader to Section 5.
1.2 Related work
As mentioned above, the ZKCP protocols were introduced in [45]. Their ﬁrst implementation
(for selling solutions of Sudoku puzzles) was presented in [12], and was subsequently broken by
Campanelli et al. [15]. The weakness discovered in [15] concerns all the ZKCP protocols that use
NIZKs protocols [11] where the veriﬁer generates the common reference string. The authors of
[15] present a ﬁx to this problem using a tool called Subversion-NIZK [8]. They also extend the
concept of ZKCP to protocols for paying for service (i.e.: not only for static data). ZKCP protocols
for cryptocurrencies that do not support contracts or scripts in the transactions were constructed
in [7].
Fair exchange is a well studied research problem.
It has been shown that without further
assumptions fair exchange cannot be achieved without a Trusted Third Party (TTP) [39, 46, 24].
To circumvent this impossibility, research has studied weaker security models – most notably, the
optimistic model in, which a TTP is consulted only in case one party deviates from the expected
behavior [5, 13]. One may view smart-contract based solutions as a variant of optimistic protocols,
where the smart contract takes the role of the TTP. In particular [32] considers a similar use case
(ﬁle sharing), but the security guarantees it achieves are very diﬀerent from our work: (a) the arbiter
uses a cut-and-choose approach and hence for a corrupted ﬁle the probability of not detecting a
cheater is non-negligible (and in fact quite high for some cases, see citation [13] in [32]); (b) due to
the cut-and-choose the workload of the arbiter is large, resulting into high fees in a smart contract
setting. In contrast our solution only has a negligible error rate, and the ﬁnancial costs are small.
We also stress that the cost model of an arbiter and a smart contract is very diﬀerent.
Very recently, there has been a large body of work on using cryptocurrencies such as Bitcoin
to achieve fairness in cryptographic protocols (see, e.g.,
[3, 10, 30, 31, 28] and many more). As
already discussed we emphasize that our protocol can be used to further reduce on-chain complexity
of these protocols by providing an eﬃcient realization of the claim-or-refund functionality that is
heavily used in the protocols constructed in these works.
Finally, we point out that the concept of “proofs of misbehavior” used in our construction are
a frequently applied technique in practical smart contract based protocols. One notable example
is the scalability solution called TrueBit, developed by Teutsch and Reitwießner [43]. The idea is
to outsource the potentially resource intensive process of ﬁnding solutions for complicated compu-
tational puzzles. The system consists of provers, veriﬁers and judges where the provers are paid
for solving computationally hard tasks. Since the provers have the ability to lie about their results
and still claim the money, they are punished whenever a misbehavior is detected. This detection
is done by the veriﬁers, which are rewarded whenever they ﬁnd bugs in the solution of the provers.
Again, the veriﬁers have the ability to lie about their results to get money, which is why there exist
the judges. A judge is a computationally bounded, trusted entity backed by the blockchain security
and can be implemented as a smart contract. This setting is similar to ours since we also rely on
the cryptocurrency and its smart contracts to judge a dispute between two parties by verifying
only a single operation instead of running complex computation oﬀ-chain. The main diﬀerence
is that their protocol requires all provers to publish their solutions and interact with the veriﬁer
and judge in case they are challenged. In our case we need the veriﬁcation of misbehavior to be
non-interactive and the result of the computation should stay secret to outside observers. These
restrictions add additional overhead to our protocol in comparison to a simple protocol which only
5
helps to resolve disputes.
Finally, with respect to TrueBit we point out that its current whitepaper [43] provides only
very little details on how such proofs are created at a technical level and no formal security analysis
is provided. Hence, one may view our construction of the subroutines Encode, Extract and Judge
described in Section 4 as a building block for TrueBit, and our formal security analysis as a ﬁrst
step in formally analyzing the TrueBit system.
2 Preliminaries
Notation.
In this section we present the notation, cryptographic building blocks, and the formal
abstraction of circuits, which we will use in our schemes. For further details the reader may also
consult Appendix B. By writing [n] we refer to the set of natural numbers {1, . . . , n}. We say
that two distribution ensembles X = {X(n)} and Y = {Y (n)} with n ∈ {0, 1}∗ are computationally
indistinguishable (denoted as X ≈c Y) if every probabilistic poly-time (ppt) algorithm Z cannot
distinguish X and Y except with negligible probability. In the following all parties are modeled as
probabilistic poly-time (ppt) Turing machines and we will often omit to explicitly mention it.
Cryptographic building blocks. The main cryptographic primitive used by our scheme are
cryptographic hash functions. A hash function H : {0, 1}∗ → {0, 1}µ maps stings of arbitrary
length to binary strings of a ﬁxed length µ. We require that the hash function H satisﬁes standard
security guarantees such as collision resistance for suﬃciently large µ. While in practice collision
resistant hash functions can be instantiated with constructions such as SHA3, for our security
analysis, we will assume that H is modeled as a global random oracle H [14]. We refer the reader
to Appendix A for further details on the global random oracle model.
A commitment scheme for input values x ∈ {0, 1}∗ is a pair of algorithms (Commit, Open),
where the (probabilistic) algorithm Commit(x) outputs a commitment c and an opening value d,
and the algorithm Open(c, d, x) = {0, 1} outputs 1 for a valid commitment (c, d) ← Commit(x).
Cryptographically secure commitment schemes have to satisfy the hiding and binding properties.
Hiding guarantees that for any two messages x, x(cid:48) and (c, d) = Commit(x) and (c(cid:48), d(cid:48)) = Commit(x(cid:48)),
we have that c ≈c c(cid:48). The binding property requires that it is computationally hard to ﬁnd a triple
(c, d, d(cid:48)) such that Open(c, d, x) = 1 and Open(c, d(cid:48), x(cid:48)) = 1 with x (cid:54)= x(cid:48).
The symmetric encryption scheme used in this paper needs to satisfy indistinguishability under
chosen plaintext attacks (IND-CPA security). This means that for any ppt adversary that chooses
two messages x0, x1 and learns c = Enc(k, xb) for a randomly chosen b, it must be impossible to
guess b correctly except with negligible advantage.
We will also use a standard notion of Merkle trees. A Merkle tree of elements x1, . . . , xn ∈ {0, 1}∗
(where for simplicity n is an integer power of 2) is a labeled binary tree M = Mtree(x1, . . . , xn)
with the ith leaf labeled by xi. Moreover, a label vj of every non-leaf node Vj is the hash of the
labels vl
j and vr
j )). We call Vj
the parent of vl
j and vice versa. A Merkle tree of n elements
x1, . . . , xn is created with the Mtree algorithm (c.f. Algorithm 1).
j of its two child nodes V l
j and vr
j is a sibling of vr
j . We say vl
j and V r