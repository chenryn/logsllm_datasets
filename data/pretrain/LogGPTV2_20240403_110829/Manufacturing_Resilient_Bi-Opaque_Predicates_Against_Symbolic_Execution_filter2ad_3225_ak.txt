engine and then employs the traces to simplify the obfuscated
control-ﬂow graph. Their work is based on an enhanced
symbolic execution engine (i.e., ConcoLynx [6]). However,
the tool is not available for public evaluation.
Besides, there are several other investigations that attack
obfuscated software with symbolic execution techniques, such
as [30]–[32]. Because the underlying techniques are similar,
we do not discuss each of them in detail.
B. Comparison with Existing Opaque Predicates
Before this work, Wang et al. [3] have conducted another
investigation that has a similar purpose with us. They
propose to compose resilient opaque predicates by attacking
the weakness of symbolic execution in handling loops.
Speciﬁcally,
they create opaque predicates with unsolved
conjectures, which is a form of looped codes. A common
characteristic of such unsolved conjectures is that they would
eventually exit the loops with some convergence properties.
For example, the Collatz conjecture takes an input x ∈ N+,
and iteratively calculates x = x/2 if x is even, otherwise
calculates x = 3x + 1. No matter what value x has bee
initialized with, the loop always terminates with x equals
to 1. Besides, there are other predicates that maybe secure
against symbolic execution, such as the opaque predicate with
one-way function [33], and the predicate involving dynamic
updated objects [22]. Note that all such opaque predicates
are secure because they attack some weakness of symbolic
execution. Such approaches also comply with our framework,
and we may extend our template repository with them.
In a word, our work is different from previous work
in that our framework is more general. We emphasize the
importance of employing symbolic variables rather
than
leveraging speciﬁc tricks. In other words, we highlight the
common properties for an opaque predicate to be secure
against symbolic execution.
In this section, we ﬁrst survey the recent achievement of
software deobfuscation with symbolic execution techniques,
which illustrates the importance of our research problem; then
we elaborate the novelty of our research by comparing our
work with existing opaque predicates which might also be
resilient to symbolic execution.
VI. CONCLUSION
To conclude,
this work studies the security issue of
opaque predicates with respect to symbolic execution-based
attacks. We have proposed a novel idea of symbolic opaque
predicates and demonstrated a general framework to compose
such predicates. A novel characteristic of symbolic opaque
676
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply. 
predicates is the bi-opaque property, which can incur either
false negative or false positive issues to symbolic execution-
based attackers. To demonstrate the usability of our approach,
we have implemented a prototype obfuscation tool based
on Obfuscator-LLVM and conducted real-world experiments.
We have evaluated the resilience, stealth, and cost of some
symbolic opaque predicates. Evaluation results show that
symbolic opaque predicates exhibit good resistance against
prevalent symbolic execution engines. Some opaque predicate
examples are also stealthy and efﬁcient. Therefore, symbolic
opaque predicates should serves as a promising idea for
practical obfuscation tools to improve their resistance against
symbolic execution-based attacks.
ACKNOWLEDGMENTS
This work was substantially supported by the the Na-
tional Basic Research Program of China (973 Project No.
2014CB347701), National Natural Science Foundation of
China (Project Nos. 61672164 and 61332010), the Research
Grants Council of the Hong Kong Special Administrative
Region, China (No. CUHK 14234416 of the General Research
Fund), and Microsoft Research Asia via 2018 MSRA Collab-
orative Research Award. Yu Kang is the corresponding author.
REFERENCES
[1] C. Collberg, C. Thomborson, and D. Low, “A taxonomy of obfuscating
transformations,” Department of Computer Science, The University of
Auckland, New Zealand, Tech. Rep., 1997.
[2] P. Junod, J. Rinaldini, J. Wehrli, and J. Michielin, “Obfuscator-llvm:
Software protection for the masses,” 2015.
[3] Z. Wang, J. Ming, C. Jia, and D. Gao, “Linear obfuscation to combat
symbolic execution,” in ESORICS. Springer, 2011.
[4] S. Schrittwieser, S. Katzenbeisser, J. Kinder, G. Merzdovnik, and
E. Weippl, “Protecting software through obfuscation: Can it keep pace
with progress in code analysis?” ACM Computing Surveys (CSUR),
2016.
[5] J. Ming, D. Xu, L. Wang, and D. Wu, “Loop: Logic-oriented opaque
predicate detection in obfuscated binary code,” in Proc. of the 22nd
ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2015.
[6] B. Yadegari and S. Debray, “Symbolic execution of obfuscated code,”
the 22nd ACM SIGSAC Conference on Computer and
in Proc. of
Communications Security (CCS), 2015.
[7] X. Hui, Z. Yangfan, K. Yu, and R. L. Michael, “Concolic execution
on small-size binaries: Challenges and empirical study,” in Proc. of the
47th IEEE/IFIP International Conference on Dependable Systems &
Networks (DSN), 2017.
[8] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “Bap: A binary
analysis platform,” in Proc. of the International Conference on Computer
Aided Veriﬁcation. Springer, 2011.
[9] F. Saudel and J. Salwan, “Triton: a dynamic symbolic execution
framework,” in SSTIC, 2015.
[10] Y. Shoshitaishvili and et al., “Sok: (state of) the art of war: Offensive
techniques in binary analysis,” in Proc. of the IEEE Symposium on
Security and Privacy (S&P), 2016.
[11] T. Ogiso, Y. Sakabe, M. Soshi, and A. Miyaji, “Software obfuscation
on a theoretical basis and its implementation,” IEICE Trans. on
Fundamentals of Electronics, Communications and Computer Sciences,
2003.
[12] G. Myles and C. Collberg, “Software watermarking via opaque
predicates: Implementation, analysis, and attacks,” Electronic Commerce
Research, vol. 6, no. 2, pp. 155–171, 2006.
[13] J.-M. Borello and L. M´e, “Code obfuscation techniques for metamorphic
viruses,” Journal in Computer Virology, vol. 4, no. 3, pp. 211–220, 2008.
[14] “CVC4,” http://cvc4.cs.stanford.edu/web/, 2017.
[15] C. Barrett, A. Stump, and C. Tinelli, “The SMT-LIB Standard: Version
2.0,” in Proc. of the 8th International Workshop on Satisﬁability Modulo
Theories, 2010.
[16] V. Ganesh and D. L. Dill, “A decision procedure for bit-vectors and
arrays,” in Proc. of the International Conference on Computer Aided
Veriﬁcation. Springer, 2007.
[17] L. De Moura and N. Bjørner, “Z3: An efﬁcient smt solver,” in Proc.
the International Conference on Tools and Algorithms for the
of
Construction and Analysis of Systems. Springer, 2008.
[18] C. A. R. Hoare, “An axiomatic basis for computer programming,”
Communications of the ACM, 1969.
[19] W. Landi and B. G. Ryder, “Pointer-induced aliasing: A problem
classiﬁcation,” in Proc. of the 18th ACM SIGPLAN-SIGACT symposium
on Principles of programming languages, 1991.
[20] D. Goldberg, “What every computer scientist should know about
ﬂoating-point arithmetic,” ACM Computing Surveys (CSUR), vol. 23,
no. 1, pp. 5–48, 1991.
[21] B. Botella, A. Gotlieb, and C. Michel, “Symbolic execution of ﬂoating-
point computations,” Software Testing, Veriﬁcation and Reliability,
vol. 16, no. 2, pp. 97–121, 2006.
[22] C. Collberg, C. Thomborson, and D. Low, “Manufacturing cheap,
resilient, and stealthy opaque constructs,” in Proc. of the 25th ACM
SIGPLAN-SIGACT symposium on Principles of programming languages,
1998.
[23] C. Lattner and V. Adve, “Llvm: A compilation framework for lifelong
program analysis & transformation,” in Proc. of the IEEE International
Symposium on Code Generation and Optimization, 2004.
[24] C. Cadar, D. Dunbar, and D. R. Engler, “Klee: Unassisted and automatic
generation of high-coverage tests for complex systems programs,” in
Proc. of the 8th USENIX Conference on Operating Systems Design and
Implementation (OSDI), 2008.
[25] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing
mayhem on binary code,” in Proc. of the 2012 IEEE Symposium on
Security and Privacy, 2012.
[26] P. Wang, S. Wang, J. Ming, Y. Jiang, and D. Wu, “Translingual
obfuscation,” in Proc. of the IEEE European Symposium on Security
and Privacy (Euro S&P), 2016.
[27] P. Khodamoradi, M. Fazlali, F. Mardukhi, and M. Nosrati, “Heuristic
metamorphic malware detection based on statistics of assembly
instructions using classiﬁcation algorithms,” in Proc. of the 18th CSI
International Symposium on Computer Architecture and Digital Systems
(CADS).
IEEE, 2015.
[28] B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray, “A generic
approach to automatic deobfuscation of executable code,” in Proc. of
the 2015 IEEE Symposium on Security and Privacy (S&P), 2015.
[29] D. Xu, J. Ming, and D. Wu, “Cryptographic function detection in
obfuscated binaries via bit-precise symbolic loop mapping,” in Proc.
of the 38th IEEE Symposium on Security and Privacy (S&P), 2017.
[30] Y. Guillot and A. Gazet, “Automatic binary deobfuscation,” Journal in
computer virology, vol. 6, no. 3, pp. 261–276, 2010.
[31] F. Biondi, S. Josse, A. Legay, and T. Sirvent, “Effectiveness of synthesis
in concolic deobfuscation,” 2015.
[32] S. Banescu, M. Ochoa, and A. Pretschner, “A framework for measuring
software obfuscation resilience against automated attacks,” in Proc. of
the 1st IEEE/ACM International Workshop on Software Protection, 2015.
[33] M. I. Sharif, A. Lanzi, J. T. Gifﬁn, and W. Lee, “Impeding malware
analysis using conditional code obfuscation,” in Proc. of the 15th Annual
Network and Distributed System Security Symposium (NDSS), 2008.
677
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply.