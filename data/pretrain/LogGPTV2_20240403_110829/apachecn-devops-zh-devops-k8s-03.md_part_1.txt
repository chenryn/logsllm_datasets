# 三、Kubernetes 入门
我们已经了解了容器可以给我们带来的好处，但是如果我们需要扩展我们的服务以满足业务需求呢？有没有一种方法可以跨多台机器构建服务，而无需处理繁琐的网络和存储设置？此外，是否有任何其他简单的方法来按照不同的服务周期管理和推出我们的微服务？Kubernetes 就是这样出场的。在本章中，我们将学习:
*   不可思议的概念
*   库比特组件
*   Kubernetes 资源及其配置文件
*   如何启动 Kubernetes 的 kiosk 应用
# 对立方结构的认识
Kubernetes 是一个跨多个主机管理应用容器的平台。它为面向容器的应用提供了许多管理功能，例如自动扩展、滚动部署、计算资源和卷管理。与容器的性质相同，它被设计为在任何地方运行，因此我们能够在裸机、数据中心、公共云甚至混合云上运行它。
Kubernetes 考虑了应用容器的大部分操作需求。重点是:
*   容器部署
*   持久存储
*   容器健康监测
*   计算资源管理
*   自动缩放
*   按集群联盟划分的高可用性
Kubernetes 是微服务的完美搭配。使用 Kubernetes，我们可以创建一个`Deployment`来展开、翻转或回滚选定的容器([第 7 章](07.html#4REBM0-6c8359cae3d4492eb9973d94ec3e4f1e)、*连续交付*)。容器被认为是短暂的。我们可以将卷装入容器中，以便在单个主机环境中保存数据。在集群世界中，容器可能被安排在任何主机上运行。我们如何让卷装载无缝地作为永久存储工作？Kubernetes **卷**和**持久卷**的引入解决了这个问题([第 4 章](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e)，*使用存储和资源*)。容器的寿命可能很短。当它们超过资源限制时，随时可能被杀死或停止，我们如何确保我们的服务始终服务于一定数量的容器？**复制控制器**或**在 Kubernetes 中复制设置**将确保一定数量的容器组可用。Kubernetes 甚至支持**活跃度探测器**来帮助您定义应用运行状况。为了更好的资源管理，我们还可以定义 Kubernetes 节点上的最大容量和每组容器的资源限制(也称为 **pod** )。Kubernetes 调度器将选择一个满足资源标准的节点来运行容器。我们将在[第 4 章](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e)、*使用存储和资源*中了解这一点。Kubernetes 提供了一个可选的水平 Pod 自动缩放功能。有了这个特性，我们可以通过资源或自定义指标水平扩展 pod。对于那些高级读者来说，Kubernetes 的设计具有高可用性( **HA** )。我们能够创建多个主节点来防止单点故障。
# 库比特组件
Kubernetes 包括两个主要玩家:
*   **大师**:大师是 Kubernetes 的心脏，控制和调度集群中的所有活动
*   **节点**:节点是运行我们容器的工人
# 主组件
主服务器包括应用编程接口服务器、控制器管理器、调度器等。所有组件都可以通过集群在不同的主机上运行。然而，从学习的角度来看，我们将使所有组件在同一个节点上运行。
![](img/00032.jpeg)
Master components
# API 服务器（多维数据集 API 服务器）
应用编程接口服务器提供了一个 HTTP/HTTPS 服务器，它为 Kubernetes 主服务器中的所有组件提供了一个 RESTful 应用编程接口。例如，我们可以获取资源状态，如 pod、POST 来创建一个新的资源，也可以观察一个资源。API 服务器读取并更新 etcd，这是 Kubernetes 的后端数据存储。
# 控制器管理器
控制器管理器控制集群中许多不同的东西。复制控制器管理器确保所有复制控制器在所需的容器数量上运行。当节点关闭时，节点控制器管理器会做出响应，然后它会驱逐 PODS。端点控制器用于关联服务和 pods 之间的关系。服务帐户和令牌控制器用于控制默认帐户和应用编程接口访问令牌。
# 和 cd
etcd 是一个开源分布式键值存储([https://coreos.com/etcd](https://coreos.com/etcd))。Kubernetes 在这里存储了所有的 RESTful API 对象。etcd 负责存储和复制数据。
# 调度程序
调度器根据节点上的资源容量或资源利用率的平衡来决定哪个节点适合 pods 运行。它还考虑将同一组中的 PODS 分散到不同的节点。
# 节点组件
需要在每个节点上配置和运行节点组件，节点组件向主节点报告 pod 的运行时状态。
![](img/00033.jpeg)
Node components
# 忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈
Kubelet 是节点中的一个主要进程，它定期向 kube-apiserver 报告节点活动，例如 pod 运行状况、节点运行状况和活跃度探测。如上图所示，它通过容器运行时运行容器，如 Docker 或 rkt。
# 代理（多维数据集代理）
代理处理 pod 负载平衡器(也称为**服务**)和 pod 之间的路由，它还提供从外部到服务的路由。有两种代理模式，userspace 和 iptables。用户空间模式通过切换内核空间和用户空间来产生大量开销。另一方面，Iptables 模式是最新的默认代理模式。它改变了 Linux 中的 iptables **NAT** ，实现了跨所有容器路由 TCP 和 UDP 数据包。
# Docker
如[第 2 章](02.html#1CQAE0-6c8359cae3d4492eb9973d94ec3e4f1e)、 *DevOps 带容器*所述，Docker 是一个容器实现。Kubernetes 使用 Docker 作为默认的容器引擎。
# Kubernetes 主节点和节点之间的交互
下图中，客户端使用 **kubectl** 向 API 服务器发送请求；API 服务器响应请求，从 etcd 中推送和提取对象信息。调度程序确定应该分配哪个节点来执行任务(例如，运行单元)。**控制器管理器**监控正在运行的任务，并在出现任何不希望的状态时做出响应。另一方面， **API 服务器**通过 kubelet 从 pods 获取日志，也是其他主组件之间的中枢。
![](img/00034.jpeg)
Interaction between master and nodes
# Kubernetes 入门
在本节中，我们将学习如何在开始时设置一个小型单节点集群。然后我们将学习如何通过它的命令行工具 Kubernetes 进行交互。我们将遍历所有重要的 Kubernetes API 对象及其 YAML 格式的表达式，这是 kubectl 的输入，然后 kubectl 将相应地向 API 服务器发送请求。
# 准备环境
最简单的启动方式是运行 minikube([https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube))，这是一个在本地单个节点上运行 Kubernetes 的工具。它支持在 Windows、Linux 和 macOS 上运行。在下面的例子中，我们将在 macOS 上运行。Minikube 将启动一个安装了 Kubernetes 的虚拟机。然后我们将能够通过 kubectl 与它进行交互。
请注意，minikube 不适合生产或任何高负载环境。它的单节点特性有一些限制。我们将在[第 9 章](09.html#6NGV40-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes 在 AWS* 和[第 10 章](10.html#7BHQU0-6c8359cae3d4492eb9973d94ec3e4f1e)、 *Kubernetes 在 GCP* 中学习如何运行真正的集群。
在安装 minikube 之前，我们必须先安装家酿([https://brew.sh/](https://brew.sh/))和 VirtualBox([https://www.virtualbox.org/](https://www.virtualbox.org/))。自制程序是 macOS 中一个有用的包管理器。我们可以通过`/usr/bin/ruby -e "$(curl -fsSL [https://raw.githubusercontent.com/Homebrew/install/master/install)](https://raw.githubusercontent.com/Homebrew/install/master/install))"`命令轻松安装家酿，从甲骨文网站下载 VirtualBox 点击安装。
那就该开始了！我们可以通过`brew cask install minikube`安装 minikube:
```
// install minikube
# brew cask install minikube
==> Tapping caskroom/cask
==> Linking Binary 'minikube-darwin-amd64' to '/usr/local/bin/minikube'.
...
minikube was successfully installed!
```
安装 minikube 后，我们现在可以启动集群:
```
// start the cluster
# minikube start
Starting local Kubernetes v1.6.4 cluster...
Starting VM...
Moving files into cluster...
Setting up certs...
Starting cluster components...
Connecting to cluster...
Setting up kubeconfig...
Kubectl is now configured to use the cluster.
```
这将在本地启动一个 Kubernetes 集群。撰写本文时，最新版本为`v.1.6.4` minikube。继续在 VirtualBox 中启动名为 minikube 的虚拟机。然后将设置`kubeconfig`，这是一个配置文件，用于定义集群的上下文和身份验证设置。
借助`kubeconfig`，我们可以通过`kubectl`命令切换到不同的集群。我们可以使用`kubectl config view`命令查看`kubeconfig`中的当前设置:
```
apiVersion: v1
# cluster and certificate information
clusters:
- cluster:
 certificate-authority-data: REDACTED
 server: https://35.186.182.157
 name: gke_devops_cluster
- cluster:
 certificate-authority: /Users/chloelee/.minikube/ca.crt
 server: https://192.168.99.100:8443
 name: minikube
# context is the combination of cluster, user and namespace
contexts:
- context:
 cluster: gke_devops_cluster
 user: gke_devops_cluster
 name: gke_devops_cluster
- context:
 cluster: minikube
 user: minikube
 name: minikube
current-context: minikube
kind: Config
preferences: {}
# user information
users:
- name: gke_devops_cluster
user:
 auth-provider:
 config:
 access-token: xxxx
 cmd-args: config config-helper --format=json
 cmd-path: /Users/chloelee/Downloads/google-cloud-sdk/bin/gcloud
 expiry: 2017-06-08T03:51:11Z
 expiry-key: '{.credential.token_expiry}'
 token-key: '{.credential.access_token}'
 name: gcp
# namespace info
- name: minikube
user:
 client-certificate: /Users/chloelee/.minikube/apiserver.crt
 client-key: /Users/chloelee/.minikube/apiserver.key
```
这里我们知道我们当前使用的 minikube 上下文具有相同的集群和用户名称。上下文是身份验证信息和集群连接信息的组合。如果有多个上下文，可以使用`kubectl config use-context $context`强制切换上下文。
最后，我们需要在 minikube 中启用`kube-dns`插件。`kube-dns`是 Kuberentes 中的一项 DNS 服务:
```
// enable kube-dns addon
# minikube addons enable kube-dns
kube-dns was successfully enabled
```
# 库布特雷
`kubectl`是控制 Kubernetes 集群管理器的命令。最常见的用法是检查集群的版本:
```
// check Kubernetes version
# kubectl version
Client Version: version.Info{Major:"1", Minor:"6", GitVersion:"v1.6.2", GitCommit:"477efc3cbe6a7effca06bd1452fa356e2201e1ee", GitTreeState:"clean", BuildDate:"2017-04-19T20:33:11Z", GoVersion:"go1.7.5", Compiler:"gc", Platform:"darwin/amd64"}
Server Version: version.Info{Major:"1", Minor:"6", GitVersion:"v1.6.4", GitCommit:"d6f433224538d4f9ca2f7ae19b252e6fcb66a3ae", GitTreeState:"clean", BuildDate:"2017-05-30T22:03:41Z", GoVersion:"go1.7.3", Compiler:"gc", Platform:"linux/amd64"} 
```
然后我们知道我们的服务器版本是最新的，这是在撰写本文时的最新版本——版本 1.6.4。`kubectl`的一般语法是:
```
kubectl [command] [type] [name] [flags] 
```
`command`表示要执行的操作。如果您只需在终端中键入`kubectl help`，它将显示支持的命令。`type`指资源类型。我们将在下一节学习主要的资源类型。`name`是我们给资源命名的方式。一路上有清晰的信息性命名总是一种好的做法。对于`flags`，如果你输入`kubectl options`，它会显示所有你可以传递的旗帜。
`kubectl`派上了用场，我们可以随时添加`--help`来获取特定命令的更多详细信息。例如:
```
// show detailed info for logs command 
kubectl logs --help 
Print the logs for a container in a pod or specified resource. If the pod has only one container, the container name is 
optional. 
Aliases: 
logs, log 
Examples: 
  # Return snapshot logs from pod nginx with only one container 
  kubectl logs nginx 
  # Return snapshot logs for the pods defined by label   
  app=nginx 
  kubectl logs -lapp=nginx 
  # Return snapshot of previous terminated ruby container logs   
  from pod web-1 
  kubectl logs -p -c ruby web-1 
... 
```
然后我们在`kubectl logs`命令中获得完全支持的选项。
# Kubernetes 资源公司
Kubernetes 对象是集群中的条目，存储在 etcd 中。它们代表集群的期望状态。当我们创建一个对象时，我们通过 kubectl 或 RESTful API 将请求发送到 API 服务器。应用编程接口服务器将状态存储到 etcd 中，并与其他主组件交互，以确保对象存在。Kubernetes 根据不同的团队、用途、项目或环境，使用名称空间来虚拟隔离对象。每个对象都有自己的名称和唯一的标识。Kubernetes 还支持标签和注释，让我们标记我们的对象。标签尤其可以用来将对象组合在一起。
# 永恒的物体
对象规范描述了 Kubernetes 对象的期望状态。大多数情况下，我们编写一个对象规范，并通过 kubectl 将规范发送到应用编程接口服务器。Kubernetes 将尝试实现所需的状态并更新对象状态。
对象规格可以用 YAML([http://www.yaml.org/](http://www.yaml.org/))或 JSON([http://www.json.org/](http://www.json.org/)[)](http://www.json.org/))编写。YAML 在 Kubernetes 世界更常见。我们将在本书的其余部分使用 YAML 格式来编写对象规格。以下代码块显示了 YAML 格式的规范片段:
```
apiVersion: Kubernetes API version 
kind: object type 
metadata:  
  spec metadata, i.e. namespace, name, labels and annotations 
spec: 
  the spec of Kubernetes object 
```
# 命名空间
Kubernetes 命名空间被认为是多个虚拟集群的隔离。不同命名空间中的对象彼此不可见。当不同的团队或项目共享同一个集群时，这很有用。大多数资源都在一个命名空间下(也称为 namespace resources)；但是，一些通用资源，如节点或名称空间本身，不属于任何名称空间。默认情况下，Kubernetes 有三个名称空间:
*   系统默认值
*   立方体系统
*   kube-public
如果不显式地将命名空间分配给 namespace 资源，它将位于当前上下文下的命名空间中。如果我们从不添加新的命名空间，将使用默认的命名空间。
Kube-system 命名空间由 Kubernetes 系统创建的对象使用，如 addon，它是实现集群功能的 pods 或服务，如 dashboard。Kube-public 命名空间是在 Kubernetes 1.6 中新引入的，它由测试版控制器管理器(BootstrapSigner[https://kubernetes.io/docs/admin/bootstrap-tokens](https://kubernetes.io/docs/admin/bootstrap-tokens)使用，将签名的集群位置信息放入`kube-public`命名空间中，因此该信息可以被经过身份验证/未经身份验证的用户看到。
在以下部分中，所有命名空间资源都将位于默认命名空间中。命名空间对于资源管理和角色也非常重要。我们将在[第 8 章](08.html#5J99O0-6c8359cae3d4492eb9973d94ec3e4f1e)、*集群管理*中介绍更多。
# 名字
Kubernetes 中的每个对象都有自己的名称。一个资源中的对象名在同一命名空间中唯一标识。Kubernetes 使用对象名作为到 API Server 的资源 URL 的一部分，因此它必须是字母数字字符的小写组合，破折号和点，少于 254 个字符。除了对象名，Kubernetes 还为每个对象分配一个唯一的标识(UID)，以区分相似实体的历史出现。
# 标签和选择器
标签是一组键/对值，用于附加到对象。标签旨在为对象指定有意义的标识信息。常见用法是微服务名称、层、环境和软件版本。用户可以定义有意义的标签，这些标签可以在以后与选择器一起使用。对象规范中的标签语法为:
```
labels: 
  $key1: $value1 
  $key2: $value2 
```
标签选择器与标签一起用于过滤对象集。用逗号分隔，多个需求将由`AND`逻辑运算符连接。有两种过滤方式:
*   基于平等的要求
*   基于集合的需求
基于平等的需求支持`=`、`==`、`!=`的操作。例如，如果选择器是`chapter=2,version!=0.1`，结果将是**对象 C** 。如果要求是`version=0.1`，结果将是**对象 A****对象 B** 。如果我们在支持的对象规范中编写需求，它将如下所示:
```
selector: 
  $key1: $value1 
```
![](img/00035.jpeg)
Selector example
基于集合的需求支持`in`、`notin`和`exists`(仅适用于按键)。比如需求为`chapter in (3, 4),version`，则返回对象 A。如果要求是`version notin (0.2), !author_info`，结果将是**对象 A** 和**对象 B** 。如果我们编写支持基于集合的需求的对象规范，下面是一个例子:
```
selector: 
  matchLabels:  
    $key1: $value1 
  matchExpressions: 
{key: $key2, operator: In, values: [$value1, $value2]} 
```
`matchLabels`和`matchExpressions`的要求结合在一起。这意味着过滤后的对象需要在两个需求上都是真实的。
我们将在本章中学习复制控制器、服务、复制集和部署。
# 注释
注释是一组用户指定的键/值对，用于指定非标识性元数据。例如，对于普通标记等注释行为，用户可以向注释添加时间戳、提交哈希或内部版本号。一些 kubectl 命令支持`--record`选项来记录对注释对象进行更改的命令。注释的另一个用例是存储配置，如 Kubernetes Deployments([https://Kubernetes . io/docs/concepts/workloads/controller/deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment))或 Critical Add-On pods([https://coreos . com/Kubernetes/docs/latest/deploy-addons . html](https://coreos.com/kubernetes/docs/latest/deploy-addons.html))。元数据部分的注释语法如下:
```
annotations: 