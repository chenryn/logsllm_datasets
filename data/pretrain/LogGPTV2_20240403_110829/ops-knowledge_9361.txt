User: Coming from an enterprise systems background (think Java and Windows) - I'm surprised at the popularity of python as a prototyping language and am trying to put my finger on the precise reason for this. Examples include being listed as one of the four languages Google uses. Possible reasons include:

enables rapid systems application prototyping using of c++ libraries using swig wrappers
built to a well defined language specification
innovative features at the syntax level enabling high level of expressiveness
highly flexible web frameworks built long before other languages (django)

The questions is what makes it so popular/highly regarded, but to give some balance I'm going to give some reasons it might not be popular:

less tool support
less enterprise support (ie a vendor helpdesk)
lower performance
BDFL not caring about backward compatibility in version upgrades

Or was it just the best at a particular point in time (about 8 years ago) and other languages and frameworks have since caught up?
Assistant: I started twelve years ago to replace my Perl scripts -- and the new ones were shorter and way more readable. So, readability and the gentle learning curve was the main reason to use it.
After version 2, the language has got more and more flexible, and with it my programming needs and I got used to do metaprogramming without even noticing.
To see what I mean, have a look at the examples in SQLAlchemy's documentation.
You point to lack of tools -- but the last time I've seen a code generator has been ... I guess 10 years ago, and it was a bad idea even at the time, because you just don't need it.
The development team cares a lot about compatibility -- they ponder for years before introducing new syntax. Only mature modules go in the standard library, and python 3 has been discussed for ages. On top of the porting facilities, there is now a moratorium -- no new features to the language for at least two years.
As for performance - since I don't have to think about which methods throws which exception or having explicit interfaces for everything, and I have a lot more design patterns embedded in the language.. well, I am free to experiment with the architecture and optimize where it makes sense. Most of the time, for me, it's the network or the DB.