一个对“理想的”、无错的场景的测试。
例7-7：测试RoomDiscoverer
voidRoomDiscovererTest:testDiscoverRoomsO
/Set up the responses
itemsResponses["wonderland.lit"]=0
DiscoItems("pubsub.wonderland.lit","rooms.wonderland.lit");
infoResponses["pubsub.wonderland.lit"]=
Discolnfo("http://jabber.org/protocol/pubsub");
itemsResponses["pubsub.wonderland.lit"]=
Discoltems("PI:EMAIL","croquet@pubsub.wonderlan
d.lit");
infoResponses["rooms.wonderland.lit"]=
itemsResponses["rooms.wonderland.lit"]=
Discoltems("PI:EMAIL","croquet@rooms.wonderlan
d.lit");
/Set uproom discoverer
RoomDiscoverer discoverer(channel);
/Execute room discovery
discoverer.discoverRoomsO;
 //Test results
1914
---
## Page 1916
ASSERT(discoverer.isFinishedO);
StringList rooms=discoverer.getDiscoveredRoomsO);
ASSERT_EQUAL(2,rooms.sizeO));
ASSERT(rooms.contains("PI:EMAIL"));
0标明这是一个对顶级域wonderland.lit的discoitems请求的响应。本
例中，返回了两个项目：pubsub和rooms。
①标明这是一个对pubsub服务的discoinfo请求的响应。本例中，响
应了PubSub协议的名字空间。
③标明属于pubsub服务的项目。它们用于测试是否RoomDiscoverer没
有获得来自于非多人聊关室服务的项目。
④响应该rooms服务支持多人聊天室。
③标明该多人聊天室的项目列表（即房间）。
这个测试指明了对发送给特定JID的discoinfo和discoitems查询应该
发送何种响应。接着RoomDiscoverer（负责发现房间的类）开始工
作，此后，测试检查是否的确找到了两个多人聊天室房间（并且没
有意外包括PubSub服务项目）。这个测试不仅简单，而且它所使用
的辅助方法（包括结构的建立和拆除）也很简单，如例7-8所示。
例7-8：建立RoomDiscovererTest结构
void RoomDiscovererTest:setUpO
channel=newMockIQChannelO;
1915
---
## Page 1917
channel->onSendIQ.connect(bind(&
RoomDiscovererTest:respondToIQ,this,_1));0
void RoomDiscovererTest:tearDownO
delete channel;
void RoomDiscovererTest:respondToIQ(const IQ&iq)
ASSERT(iq.getTypeO==IQ:Get);
if(iq.getPayloadO){
ItemsResponseMap:const_iterator
response=itemsResponses.fnd(iq.getToO);
ASSERT(response!=itemsResponses.endO);
channel- >onIQReceived(iq.createResponse(new DiscoItems(response->
second));
else if(iq.getPayloadO){
InfoResponseMap:const_iterator response=infoResponses.fnd(iq.getToO);
ASSERT(response!=infoResponses.endO);
channel- >onIQReceived(iq.createResponse(new Discolnfo(response->
second));
else{
FAIL("Unexpected IQ");
1916
---
## Page 1918
0当一个IQ发送以后，传递给respondToIQ来响应，
在本节中，我展示了如何在更复杂的多级协议上应用前面介绍的高
层次测试方法。因为这些测试不会被低层协议表示的细节所影响，
所以它们能专注于测试协议的实际逻辑，允许在增加测试数量的同
时义不降低协议测试套件的魅力。
会话初始化测试
前面几节讨论了单级和多级请求/响应协议以后，我们已经涵盖了大
部分的XMPP协议了。尽管对这些协议的测试层次已经相当高了，有
些协议还是太复杂以致即使在这个“抽象的"载荷层次测试还是会影
响测试的美观。这些协议通常有一个复杂的状态转换图，而且在转
换过程当中可能还要求有用户输入。因此，我们介绍一种更高层次
的测试：场景测试（scenariotesting）。
会话初始化（sessioninitialization）是XMPP中最复杂的协议之一。
IM客户端的会话初始化过程包括建立到服务器的连接；协商连接参
数（例如，使用流压缩以节省带宽，加密流以提供更好的安全性
等）：最后与服务器进行认证（通常包括发送用户名和密码到服务
器）。哪些参数需要与服务器协商取决于客户端与服务器所支持的
功能，以及客户端用户的选择。例如，服务器可能不支持流加密；
依据用户是否要求在加密连接上进行通信，客户端应该报错，或者
转而使用非加密连接。
测试会话初始化的所有可能的代码路径要求有一个简明的方法来描
述一个会话初始化场景。例7-9显示了这样的一个场景测试，其中客
户端对连接进行了加密。通过引人帮助方法来描述客户端应该发送
什么和服务器应该响应什么，我们可以清楚地看到这个加密场景是
如何进行的。建立错误条件（如服务器不支持加密）场景很简单
（如例7-10所示），甚至测试客户端对失效网络连接的反应也是很
简单的（如例7-11所示）。并且，创建这些帮助方法不需要那么多
的代码，因为它们只包含对载荷设定预期值和响应，这些可以在与
前面小节中相同的层次完成。
1917
---
## Page 1919
例7-9：测试会话加密协商
void SessionTest:testStart_EncryptO
Session*session=createSession("PI:EMAIL/RabbitHole");
session->setEncryptConnection(Session:EncryptWhenAvailable);
session->start);
sessionOpensConnectionO);
serverAcceptsConnection();
sessionSendsStreamStartO;0
serverSendsStreamStartO;?
serverSendsStreamFeaturesWithStartTLSO;?
sessionSendsStartTLSO;
serverSendsTLSProceedO);
ASSERT(session- >isNegotiatingTLSO);
completeTLSHandshakeO);
sessionSendsStreamStartO;/*(*)Immediately after thehandshake,the
stream is reset,and the stream header is resent in an encrypted form.*/
serverSendsStreamStartO;
ASSERT(session- >isConnectedO);
ASSERT(session->isEncryptedO);
1918
---
## Page 1920
0在向流上发送XML元素之前，客户端发送一个开端标签
来初始化这个流。所有后续的元素都是这个元素的子元素。当连接
关闭的时候，发送一个结束标签。
·与客户端类似，服务器也通过发送一个标签来开始一个
流。
③发送开端流标签时，服务器立即发送所有它所支持的服务的列
表。在本例中，它宣布支持流加密（使用StartTLS）。
④客户端发送一个元素来请求服务器加密连接。
服务器响应一个元素，表明TLS协商（或称握手）可
以开始了。
假装一个成功的TLS握手。
例7-10：测试因服务器不支持加密而导致的会话失败
voidSessionTest:testStart_ForceEncyptWithoutServerSupportO
Session*session=createSession("alice(@wonderland.lit/RabbitHole");
session->startO;
sessionOpensConnectionO;
serverAcceptsConnection();
sessionSendsStreamStartO;
serverSendsStreamStartO;
serverSendsStreamFeatures WithoutStartTLSO;
ASSERT(session->hasErrorO);
1919
---
## Page 1921
例7-11：测试因连接失败而导致的会话失败
voidSession'Test:testStart_FailingConnectionO
Session*session=createSession("PI:EMAIL/RabbitHole");
session->start();
sessionOpensConnectionO;
serverAcceptsConnectionO);
sessionSendsStreamStartO;
serverSendsStreamStartO;
closeConnectionO;
ASSERT(session->hasErrorO);
使用基于场景的测试，我们有可能测试这一类最复杂的协议，涵盖
所有边缘案例。尽管这些协议中每一步的许多边缘案例可以隔离开
来单独测试，但我们仍然需要使用场景来测试协议各级之间的交
互。
自动化的交互性测试
通过使用单元测试在隔离环境（没有与XMPP服务器的真实网络连
接）中测试我们的协议，我们已经能够测试协议的所有边缘案例，
同时保持测试清爽、简单、快速、可靠。然而，XMPP客户端程序并
不工作于隔离环境中：它的目的是真正地连接到一个真实的XMIPP服
务器并与真实的客户端通信。在真实世界中测试XMPP客户端是很重
要的，原因如下。第一，它允许你在一个比本地单元测试更广阔的
范围内测试应用程序的功能，确保所有组件正确地协同工作。第
二，通过与其他的XMPP协议实现通信，你可以测试你对协议规范的
解释是否正确。最后，通过与许多不同的XMPP实现一起测试你的客
1920
---
## Page 1922
户端软件，你能保证其与大量XMIPP软件的交互能力。除非你只为一
种特定的服务器开发专用的客户端，在一个如XMPP这样开放的、混
合的网络中与其他客户端和服务器的交互性测试是非常重要的。
因为IM客户端是用户界面驱动的，两个客户端之间的交互性测试通
常手动完成：启动两个客户端，连接到服务器，操作从一个客户端
的用户界面触发，检查另一个客户机以确定它是否对该操作做出了
正确响应。对用户界面驱动的功能进行完全自动化的测试非常困
难。
相对来说，测试客户端到服务器的交互性比测试客户端到客户端通