title:Predicting and tracking internet path changes
author:&apos;Italo Cunha and
Renata Teixeira and
Darryl Veitch and
Christophe Diot
Predicting and Tracking Internet Path Changes
Ítalo Cunha†‡
Renata Teixeira(cid:2)‡
†Technicolor
(cid:2)CNRS
(cid:3)Dept. of Electrical and Electronic Eng., University of Melbourne
‡UPMC Sorbonne Universités
Darryl Veitch(cid:3)
Christophe Diot†
{italo.cunha, christophe.diot}@technicolor.com PI:EMAIL PI:EMAIL
ABSTRACT
This paper investigates to what extent it is possible to use trace-
route-style probing for accurately tracking Internet path changes.
When the number of paths is large, the usual traceroute based
approach misses many path changes because it probes all paths
equally. Based on empirical observations, we argue that monitors
can optimize probing according to the likelihood of path changes.
We design a simple predictor of path changes using a nearest-
neighbor model. Although predicting path changes is not very ac-
curate, we show that it can be used to improve probe targeting. Our
path tracking method, called DTRACK, detects up to two times more
path changes than traditional probing, with lower detection delay,
as well as providing complete load-balancer information.
Categories and Subject Descriptors
C.2.3 [Computer Systems Organization]: Computer Communi-
cation Networks—Network Operations—Network Monitoring;
C.4 [Computer Systems Organization]: Performance of Sys-
tems—Measurement Techniques
General Terms
Design, Experimentation, Measurement
Keywords
Topology Mapping, Tracking, Prediction, Path Changes
1.
INTRODUCTION
Systems that detect Internet faults [9, 15] or preﬁx hijacks [34]
require frequent measurements of Internet paths, often taken with
traceroute. Topology mapping techniques periodically issue trace-
routes and then combine observed links into a topology [14,17,25].
Content distribution networks continuously monitor paths and their
properties to select the “best” content server for user requests [10].
Similarly, overlay networks monitor IP paths to select the best over-
lay routing [1]. In all these examples, a source host issues trace-
routes to a large number of destinations with the hope of tracking
paths as they change.
(cid:3)The work was done while Darryl Veitch was visiting Technicolor.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
Copyright 2011 ACM 978-1-4503-0797-0/11/08 ...$10.00.
The classical approach of probing all paths equally, however,
has practical limits. First, sources have a limited probing capacity
(constrained by source link capacity and CPU utilization), which
prevents them from issuing traceroutes frequently enough to ob-
serve changes on all paths. Second, Internet paths are often sta-
ble [8, 12, 24], so probing all paths at the same frequency wastes
probes on paths that are not changing while missing changes in
other paths. Finally, many paths today traverse routers that perform
load balancing [2]. Load balancing creates multiple simultaneous
paths from a source to a given destination. Ignoring load balancing
leads to traceroute errors and misinterpretation of path changes [8].
Accurately discovering all paths under load balancing, however, re-
quires even more probes [31].
This paper shows that a monitor can optimize probing to track
path changes more efﬁciently than classical probing given the same
probing capacity. We develop DTRACK, a system that separates the
tracking of path changes into two tasks: path change detection and
path remapping. DTRACK only remaps (measures again the hops
of) a path once a change is detected. Path remapping uses Paris
traceroute’s multipath detection algorithm (MDA) [31], because it
accurately discovers all paths under load balancing. The key nov-
elty of this paper is to design a probing strategy that predicts the
paths that are more likely to change and adapts the probing fre-
quency accordingly. We make two main contributions:
Investigate the predictability of path changes. We use trace-
route measurements from 70 PlanetLab nodes to train models of
path changes. We use RuleFit [13], a supervised machine learning
technique, to identify the features that help predict path changes
and to act as a benchmark (Sec. 3). RuleFit is too complex to be
used online. Hence, we develop a model to predict path changes,
called NN4, based on the K nearest-neighbor scheme, which can
be implemented efﬁciently and is as accurate as RuleFit (Sec. 4).
We ﬁnd that prediction is difﬁcult. Even though NN4 is not highly
accurate, it is effective for tracking path changes, as it can predict
paths that are more likely to change in the short term.
A probing strategy to track path changes.
(Sec. 5) DTRACK
adapts path sampling rates to minimize the number of missed
changes based on NN4’s predictions. For each path, it sends a sin-
gle probe per sample in a temporally striped form of traceroute.
We evaluate DTRACK with trace-driven simulations and show that,
for the probing budget used by DIMES [25], DTRACK misses 73%
fewer path changes than the state-of-the-art approach and detects
93% of the path changes in the traces.
DTRACK tracks path changes more accurately than previous
techniques. A closer look at path changes should enable research
on the ﬁne-grained dynamics of Internet topology as well as ensure
that failure detection systems, content distribution, and overlay net-
works have up-to-date information on network paths.
1222. DEFINITIONS, DATA, AND METRICS
In this section we deﬁne key underlying concepts and present
the dataset we use. We establish the low-level path prediction goals
which underlie our approach to path tracking, and then present a
spectrum of candidate path features to be exploited to that end.
2.1 Virtual paths and routes
Following Paxson [24], we use virtual path to refer to the con-
nectivity between a ﬁxed source (here a monitor) and a destination
d. At any given time, a virtual path is realized by a route which we
call the current route. Since routing changes occur, a virtual path
can be thought of as a continuous time process P (t) which jumps
between different routes over time.
A route can be simple, consisting of a sequence of IP interfaces
from the monitor toward d, or branched, when one or more load
balancing routers are present, giving rise to multiple overlapping
sequences (branched routes are called “multi-paths” in [31]). A
route can be a sequence that terminates before reaching d. This
can occur due to routing changes (e.g., transient loops), or the ab-
sence of a complete route to the destination. By route length we
mean the length of its longest sequence, and we deﬁne the edit
distance between two routes as the minimum number of interface
insertions, deletions, and substitutions needed to make the IP in-
terface sequences of each route identical. In the same way we can
deﬁne AS length and AS edit distance for a general route.
Let a virtual path P be realized by route r at time t, i.e., P (t) =
r. Suppose that the path will next jump to a new route at time td,
and last jumped to the current route r at time tb. Then the age of
this instance of route r is A(r) = t − tb, its residual life is L(r) =
td−t, and its duration is D(r) = A(r)+L(r) = td−tb. Typically,
as we have just done, we will write A(r) instead of A(P (t)), and
so on, when the context makes the virtual path, time instant, and
hence route instance, clear.
In practice we measure virtual paths only at discrete times, re-
sulting effectively in a sampling of the process P (t). A change can
be detected whenever two consecutive path measurements differ,
however the full details of the evolution of the virtual path between
these samples is unknown, and many changes may be missed. Un-
less stated otherwise, by (virtual) path change we mean a change
observed in this way. The change is deemed to have occurred at
the time of the second measurement. Hence, the measured age of
a route instance is always zero when it is ﬁrst observed. This con-
servative approach underestimates route age with an error smaller
than the inter-measurement period.
2.2 Dataset
For our purposes, an ideal dataset would be a complete record
of the evolution of virtual paths, together with all sequences of IP
interfaces for each constituent route. Real world traces are limited
both in the frequency at which each virtual path can be sampled,
and the accuracy and completeness of the routing information ob-
tained at each sample. In particular, the identiﬁcation of the mul-
tiple IP interface sequences for branched routes requires a lot of
probes [31] and takes time, reducing the frequency at which we can
measure virtual paths. For this identiﬁcation we use Paris trace-
route’s Multipath Detection Algorithm (MDA) [31]. MDA pro-
vides strong statistical guarantees for complete route discovery in
the presence of an unknown number of load balancers. It is there-
fore ideal for reliable change detection, but is conservative and can
be expensive in probe use (see Sec. 5.4).
We address the above limitations by using traces collected with
FastMapping [8]. FastMapping measures virtual paths with a
modiﬁed version of Paris traceroute [2] that sends a single probe
per hop. Whenever a new IP interface is seen, FastMapping re-
measures the route using MDA. In this way, the frequency at which
it searches for path changes is high, but when a change is detected,
the new route is mapped out thoroughly.
We use a publicly-available dataset collected from 70 PlanetLab
hosts during 5 weeks starting September 1st, 2010 [8]. Each mon-
itor selects 1,000 destinations at random from a list of 34,820 ran-
domly chosen reachable destinations. Each virtual path is measured
every 4.4 minutes on average. We complement the dataset with IP-
to-AS maps built from Team Cymru1 and UCLA’s IRL [23]. Al-
though almost all monitors are connected to academic networks,
the destinations are not. As such, this dataset traverses 7,842 ASes
and covers 97% of large ASes [23].
We lack ground truth about path changes and the FastMapping
dataset may miss changes; however, all changes the dataset cap-
tures are real. Fig. 1 shows the distribution of all route durations in
the dataset. It is similar to Paxson’s ﬁndings that most routes are
short-lived: 60% of routes have durations under one hour.
2.3 Prediction goals and error metrics
We study three kinds of prediction: (i) prediction ˆL(r) of the
residual lifetime L(r) of a route r = P (t) of some path observed
at time t, (ii) prediction ˆNδ(P ) of the number of changes in the
path occurring in the time interval [t, t + δ], and (iii) prediction,
via an indicator function ˆIδ(r), of whether the current route will
change in the interval [t, t + δ] (Iδ(r) = 1), or not (Iδ(r) = 0).
In the case of residual lifetime, we measure the relative pre-
diction error EL(r) = ( ˆL(r) − L(r))/L(r). This takes val-
ues in [−1,∞), with EL(r) = 0 corresponding to a perfect
prediction. For ˆNδ, we measure the absolute error ENδ (P ) =
ˆNδ(P ) − Nδ(P ) because the relative prediction error is undeﬁned
whenever Nδ(P ) = 0. For ˆIδ, we measure the error EIδ , the
fraction of time ˆIδ(r) (cid:3)= Iδ(r). This takes values in [0, 1], with
EIδ = 0.5 corresponding to a random predictor.
2.4 Virtual path features
A virtual path predictor needs to determine and exploit those fea-
tures of the path and its history that carry the most information
about change patterns.
Paxson characterized virtual path stability using the notions of
route persistence, which is essentially route duration D(r), and
route prevalence [24], the proportion of time a given route is ac-
tive.
In the context of prediction, where only metrics derivable
from past data are available, these two measures translate to the
following two features of the route r which is current at time t: (i)
the route age A(r), and (ii) the (past) prevalence, the fraction of
time r was active over the window [t − τ, t]. We set the timescale
τ to τ = ∞ to indicate a window starting at the beginning of the
dataset.
Route age and prevalence are important prediction features. A
ﬁrst idea of their utility is given in Figs. 2(a) and 2(b) respectively,
where the median, 25th, and 75th percentiles of route residual life-
times are given as a function of the respective features (these were
computed based on periodic sampling of all virtual paths in the
dataset with period ﬁve minutes). In Fig. 2(a) for example we ob-
serve that younger routes have shorter residual lifetimes than older
routes, a possible basis for prediction. Similarly, Fig. 2(b) shows
that when prevalence is measured over a timescale of τ = 1 day,
routes with lower prevalence are more likely to die young.
Although route age and prevalence are each useful for predic-
tion, they are not sufﬁcient, as shown by the high variability in the
1http://www.team-cymru.org/Services/ip-to-asn.html
123s
e
t
u
o
R
f
o
n
o
i
t
c
a
r
F
e
v
i
t
l
a
u
m
u
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0.1
 1
 10
 100
Route Duration (hours)
)
s
r
u
o
h
(
e
m
i
i
t
e
f
i
L
l
a
u
d
s
e
R
e
t
u
o
R
 120
 100
(a)
 80
 60
 40
 20
 0
75th percentile
Median
25th percentile
 0
 5
 10
 15
 20
Route Age (hours)
)
s
r
u
o
h
(
e
m
i
i
t
e
f
i
L
l
a
u
d
s
e
R
e
t
u
o
R
 120
 100
 80
 60
 40
 20
 0
 0
(b)
75th percentile
Median
25th percentile
 0.4
 0.2
 0.8
Route Prevalence (τ = 1 day)
 0.6
 1
Figure 1: Distribution of all route durations
in the dataset.
Figure 2: Relationship between virtual path features and residual lifetime:
residual lifetime as a function of (a) route age and (b) route prevalence.
data (wide spread of the percentiles in Figs. 2(a) and 2(b)). To do
better, additional features are needed. Our aim here is to deﬁne
a spectrum of features broad enough to capture essentially all in-
formation computable from the dataset which may have predictive
value. We do not know at this point which features are the impor-
tant ones, nor how to combine them to make accurate predictions.
This is a task we address in Sec. 3.
We do not attempt to exploit spatial dependencies in this paper
for prediction, although they clearly exist. For example, changes
in routing tables impact multiple paths at roughly the same time.
The reason is that including spatial network information in Rule-
Fit requires one predictive feature per link in the network, which is
computationally prohibitive. However, we can exploit spatial de-
pendencies to improve path tracking efﬁciency through the probing
scheme, as we detail in Sec. 5.3.
Table 1 partitions all possible features into four categories:
(i) Current route – characterize the current route and its state;
(ii) Last change – capture any nearest neighbor interactions;
(iii) Timescale-based – metrics measured over a given timescale;
(iv) Event-based – metrics deﬁned in ‘event-time’. We use this
scheme only as a framework to guide the selection of individ-
ual features. We aim to capture inherently different kinds of in-
formation and measures both of average behavior and variability.
Only features that are computable based on the information in the
dataset, together with available side-information (we use IP-to-AS
maps), are allowed.
The last four features in the Timescale-based category allow us
to identify virtual paths that are highly unstable and change repeat-
edly, as observed by previous work [22, 24, 30]. The features in the
Event-based category may involve time but are not deﬁned based
on a preselected timescale. Instead, they try to capture patterns of
changes in the past, like oscillation between two routes. For com-
putational reasons we limit ourselves to looking up to the 5 most
recent virtual path changes.
In most of the cases this is already
sufﬁcient to reach the beginning of the dataset.
Feature properties. Paths in the FastMapping dataset are sta-