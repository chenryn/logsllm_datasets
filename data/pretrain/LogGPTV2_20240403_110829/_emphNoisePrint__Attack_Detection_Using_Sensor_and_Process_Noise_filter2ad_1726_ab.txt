This is an important intuition behind the idea of NoisePrint as
it can be seen that the residual vector obtained from the system
model, is a function of process and sensor noise. Using system
model and system state estimates it is possible to extract the sensor
and process noise. Once we have obtained these residual vectors
capturing sensor and process noise characteristics of the given ICS,
we can proceed with pattern recognition techniques (e.g. machine
learning) to fingerprint the given sensor and process.
2.3.2 Design of NoisePrint. Figure 3 shows the steps involved
in composing a sensor and process noise fingerprint. The proposed
scheme begins with data collection and then divides data into
smaller chunks to extract a set of time domain and frequency do-
main features. Features are combined and labeled with a sensor ID.
A machine learning algorithm is used for sensor classification.
3
Session 12: Physical Attacks and DefenseASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea485Table 1: List of features used. Vector x is time domain data
from the sensor for N elements in the data chunk. Vector y is
the frequency domain feature of sensor data. yf is the vector
of bin frequencies and ym is the magnitude of the frequency
coefficients.
Feature
Mean
Std-Dev
Mean Avg. Dev
Skewness
Kurtosis
Spec. Std-Dev
Spec. Centroid
DC Component
σ =
D ¯x = 1
N
γ = 1
N
β = 1
N
N
(cid:113) 1
N−1N
Description
¯x = 1
N
i =1 xi
N
N
i =1(xi − ¯xi)2
N
i =1 |xi − ¯x|
(cid:114)N
i =1( xi− ¯x
σ )3
i =1( xi− ¯x
σ )4 − 3
N
N
i =1(yf (i)2)∗ym(i)
N
i =1 ym(i)
i =1(yf (i))∗ym(i)
i =1 ym(i)
ym(0)
σs =
Cs =
Residual Collection: The next step after obtaining a system model
for an ICS is to calculate the residual vector as explained in previ-
ous section. Residual is collected for different types of industrial
sensors present in SWaT and WADI testbeds.We collect residual
for the level sensors in SWaT testbed and a multitude of sensors in
WADI testbed. The objective of residual collection step is to extract
sensor and process noise by analyzing the residual vector. When
the plant is running, an error in sensor reading is a combination of
sensor noise and process noise (water sloshing etc.). The collected
residual is analyzed, in time and frequency domains, to examine
the noise patterns, which are found to follow Gaussian distribu-
tion. Sensors and processes are profiled using variance and other
statistical features in the noise vector. The experiment is run, to
obtain sensor and process profile, so that it can be used for later
testing. A machine learning algorithm is used to profile sensors
from fresh readings (test-data). Noise fingerprints can be generated
over time or at the commissioning phase of the plant. Since these
noise fingerprints are extracted from the system model, it does not
matter if the process is dynamic or static.
Feature Extraction: Data is collected from sensors at a sampling
rate of one second. Since data is collected over time, we can use
raw data to extract time domain features. We used the Fast Fourier
Transform (FFT) algorithm [55] to convert data to frequency domain
and extract the spectral features. In total, as in Table 1, eight features
are used to construct the fingerprint.
Data Chunking: After residual collection, the next step is to create
chunks of dataset. In following sections, it will be seen that we have
performed experiments on a dataset collected over 14 days in WADI
testbed. An important purpose of data chunking is to find out, how
much is the sample size to train a well-performing machine learning
model? and How much data is required to make a decision about
presence or absence of an attacker? The whole residual dataset (total
calculate the feature set  for each data chunk i. For each
sensor, we have m sets of features i∈[1,m]. For n sensors
of N readings) is divided into m chunks (each chunk of(cid:4) N
(cid:5)), we
m
Figure 3: NoisePrint Framework.
(cid:4) N
we can use n × m sets of features to train the multi-class SVM. We
use supervised learning method for sensor identification which
has two phases– training and testing. For both phases, we create
chunks in a similar way as explained above.
Size of Training and Testing Dataset: It is found empirically
that 2-class SVM produced highest accuracy for the chunk size of
(cid:5) = 120. For a total of m feature sets for each sensor, at first we
m
used half ( m2 ) for training and half ( m2 ) for testing. To analyze the
accuracy of the classifier for smaller feature sets during training
phase, we began to reduce number of feature sets starting with
m2 . Classification is then carried out for the following correspond-
ing range of feature sets for Training : { m2 , m3 , m4 , m5 , m10}, and for
Testing : { m2 ,
9m10 }, respectively. In section 5, empiri-
cal results are presented for such feature sets and the one with best
performance is chosen, for further analysis of the proposed scheme.
For the classifier we have used a multi-class SVM library [14], as
briefly described in Appendix C.
2m3 ,
3m4 ,
4m5 ,
3 ATTACKER AND ATTACK MODEL
In this work, we consider specific cyber and physical attacks on
sensor measurements in an ICS, as shown in Figure 2. First, we lay
down our assumptions about the attacker, followed by justification
for such assumptions. In this section, we introduce the types of
attacks launched on our secure water treatment testbed (SWaT). Es-
sentially, the attacker model encompasses the attacker’s intentions
and its capabilities. The attacker may choose its goals from a set of
intentions [50], including performance degradation, disturbing a
physical property of the system, or damaging a component. In our
experiments, three classes of attacks from literature [5, 11, 34, 37]
are designed and executed.
3.1 Attacker Model
Assumptions on Attacker: It is assumed that the attacker has
access to yk,i = Ci xk +ηk,i (i.e., the opponent has access to ith sen-
sor measurements). Also, the attacker knows the system dynamics,
the state space matrices, the control inputs and outputs, and the
implemented detection procedure. An attacker can not arbitrarily
change sensor measurements by learning and adding the sensor
and process noise to a modified sensor value. We do not consider
replay attack in this article because noise profile for process and
sensor is preserved during a replay attack.
4
   DataCollector  ResidualCalculation  Feature Extraction   SensorAnnotation         ML Model Training        MLModel TestingSensor IDPredictionBest ModelSession 12: Physical Attacks and DefenseASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea486We consider a strong adversary who is able to launch cyber and
physical attacks. In an ICS, sensors, actuators, and PLCs commu-
nicate with each other via communication networks. An attacker
can compromise these communication links in a classic Man-in-
The-Middle (MiTM) attack [2, 9, 52], for example, by breaking into
the link between sensors and PLCs. Besides false data injection in
sensor readings via cyber domain, an adversary can also physically
tamper a sensor, to drive a CPS into an unstable state. Therefore,
we need to authenticate sensor measurements, which are transmit-
ted to a controller. A malicious insider is an attacker with physical
access to the plant and thus to its devices such as level sensors.
However, an attacker who can physically replace or tamper sensors
may not necessarily be an insider, because critical infrastructures,
e.g., for water and power, are generally distributed across large ar-
eas [21, 51]. An outsider, e.g., end user, can also carry out a physical
attack on sensors such as smart energy monitors.
3.2 Attack Scenarios
Data Injection Attacks: For data injection attacks, it is considered
that an attacker injects or modifies the real sensor measurement.
In general for a complex CPS there can be many possible attack
scenarios. We consider a simple bias attack to show a comparison
between reference and proposed methods. However zero-alarm
attack is a worst case scenario for a model based attack detection
methods employing a threshold based detector and exposes the
limits of such detectors while NoisePrint can detect those attacks.
In our experiments, we consider the following two types of data
injection attacks:
• Bias Injection Attack: First, a failure-like attack is designed.
The attacker’s goal is to deceive the control system by send-
ing incorrect sensor measurements. In this scenario, the level
sensor measurements are increased while the actual tank
level is invariant. This makes the controller think that the
attacked values are true sensor readings, and hence, the wa-
ter pump keeps working until the tank is empty and cause
the pump to burn out. The attack vector can be defined as,
(7)
¯yk = yk + δk ,
where δk is the bias injected by the attacker.
• Zero-Alarm Attack for Statistical Detectors: This attack is de-
signed so as not to be detected by statistical detectors e.g.
Bad-Data or CUmmulative SUM (CUSUM) change detectors.
We implemented these two detectors in SWaT testbed to
compare the performance of the proposed NoisePrint with
these reference schemes. An attack is detected by analyzing
the statistics of the residual vector based on certain thresh-
olds. Design of such attacks is presented in section 5, after
giving a brief description of these statistical detectors and
how it works. Essentially an attacker chooses attack vector
δk in (7) in a way that it stays stealthy against statistical
detectors. In literature [5, 37] impact of such attacks has
already been studied. We call these attacks as zero-alarm as
the statistical detectors will not raise any alarms even the
system was under attack, enabling the attacker to conceal
its data injection while still impacting the system.
Figure 4: Experimentation setup in SWaT testbed. LIT rep-
resents a level sensor in tank T, along with flow meters FIT
and pump P.
3.3 Attack Execution
Cyber Domain: Data traffic from sensors to PLCs is intercepted
in a Man-in-The-Middle (MiTM) manner and packets are inspected
to change the payload (sensor measurement). Depending on the
attacker’s strategy, a false reading is injected to either execute a
bias injection attack or a zero-alarm attack.
Physical Domain: Sensor measurements can be spoofed in phys-
ical domain by bringing a malicious device near the sensing en-
vironment [47]. Hence both bias injection attack and zero-alarm
attack can be executed in the physical domain. An attacker with the
physical access to the plant can physically tamper with the sensors.
It is demonstrated in the evaluation section that the sensor noise is
a function of hardware characteristics of the device and possesses
a unique fingerprint. Therefore, any physical tampering will result
in the deviation from the reference noise pattern.
4 EXPERIMENTATION SETUP
The experiments are carried out in a state-of-the-art water treat-
ment and distribution facility [6, 31]. The proposed method is tested
on these two testbeds to demonstrate its viability on different cyber
physical systems. To further diversify the study, system model for
a portion of SWaT testbed is obtained using laws of Physics and
system model for WADI is produced using sub-space system identi-
fication technique [40]. We executed attacks on the water storage
tanks (via level sensors therein) in two different stages of SWaT
testbed. For sensor identification based on the system model, we
collected data from WADI testbed and used the proposed method
to identify a sensor against adversarial physical manipulations of a
sensor. we give a detailed explanation of both testbeds in Appen-
dix D, for an interested reader.
4.1 SWaT Two-Tank System Model
We performed sensor spoofing attacks on two different processes
(water tanks), as a Man-in-The-Middle (MiTM) manner [52] in SWaT
testbed [31]. In Figure 4 an illustration of the two stages used in
experiment are shown.
The intuition behind this step in the proposed scheme, is that
if a system model is carefully designed by considering physical
principles and system dynamics, we can calculate residual vector
for NoisePrint. It could detect the fault or raise an alarm if there is
an anomaly in noise dynamics of the system. A joint model for both
tanks is derived [44] to demonstrate a system wide scalability of
5
Session 12: Physical Attacks and DefenseASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea487(cid:40)
the proposed scheme. The rate of change for water level in a tank
is equal to the difference between water flowing in and flowing
out over time. Inflow and outflow rates are controlled by actuator
actions. We can represent this flow of fluid using mass-balance
equation such as,
= Qin − Qout
dV
dt
= Qin − Qout
A
dh
dt
since V = A × h,
(8)
where V represents the volume of the tank, A is the cross-sectional
area of the tank, and h is the height of the water inside the tank,
(8) provides a linear equation, the term [Qin − Qout] is the water
flow which depends upon the PLC control actions. Let us consider
water level in the tank as state of the system. Discretization leaves
us with the following system of state space difference equations,
xk +1 = xk + uk + vk ,
yk = xk + ηk ,
(9)
where uk is the PLC control action and yk is the sensor measure-
ment driven by noise ηk. Since we have the system model now,
we can use Kalman filter to estimate the state of the system. We