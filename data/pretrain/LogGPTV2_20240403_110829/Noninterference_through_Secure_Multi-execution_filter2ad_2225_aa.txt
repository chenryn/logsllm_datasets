title:Noninterference through Secure Multi-execution
author:Dominique Devriese and
Frank Piessens
2010 IEEE Symposium on Security and Privacy
Noninterference Through Secure Multi-Execution
Dominique Devriese
DistriNet Research Group, KULeuven
E-mail: PI:EMAIL
Frank Piessens
DistriNet Research Group, KULeuven
E-mail: PI:EMAIL
However, while progress in both static and dynamic
approaches has been impressive, there are fundamental
limits on what can be achieved with a combination
of static analysis and execution monitoring. It is easy
to show that noninterference (the absence of infor-
mation ﬂow from public inputs to secret outputs) is
undecidable statically, and it has been shown that
execution monitoring can not enforce noninterference
precisely [9].
Abstract—A program is deﬁned to be noninterferent if
its outputs cannot be inﬂuenced by inputs at a higher
security level than their own. Various researchers have
demonstrated how this property (or closely related proper-
ties) can be achieved through information ﬂow analysis,
using either a static analysis (with a type system or
otherwise), or using a dynamic monitoring system.
We propose an alternative approach, based on a tech-
nique we call secure multi-execution. The main idea is to
execute a program multiple times, once for each security
level, using special rules for I/O operations. Outputs are
only produced in the execution linked to their security
level. Inputs are replaced by default inputs except in
executions linked to their security level or higher. Input
side eﬀects are supported by making higher-security-level
executions reuse inputs obtained in lower-security-level
threads.
We show that this approach is interesting from both a
theoretical and practical viewpoint. Theoretically, we prove
for a simple deterministic language with I/O operations,
that this approach guarantees complete soundness (even
for the timing and termination covert channels), as well
as good precision (identical I/O for terminating runs of
termination-sensitively noninterferent programs).
On the practical side, we present an experiment imple-
menting secure multi-execution in the mainstream Spider-
monkey Javascript engine, exploiting parallelism on a cur-
rent multi-core computer. Benchmark results of execution
time and memory for the Google Chrome v8 Benchmark
suite show that the approach is practical for a mainstream
browser setting. Certain programs are even executed faster
under secure multi-execution than under the standard
execution.
We discuss challenges and propose possible solutions for
implementing the technique in a real browser, in particular
handling the DOM tree and browser callback functions.
Finally, we discuss how secure multi-execution can be
extended to handle language features like exceptions,
concurrency or nondeterminism.
I. Introduction
The identiﬁcation and suppression of illegal infor-
mation ﬂows in software programs has been an active
research topic for several decades. Roughly speaking,
existing approaches can be classiﬁed as static tech-
niques based on type systems [1]–[3], abstract interpre-
tation [4] or other static analysis methods [5], dynamic
techniques based on execution monitoring [6], [7], or
combinations of static and dynamic techniques [8].
1081-6011/10 $26.00 © 2010 IEEE
DOI 10.1109/SP.2010.15
109
In this paper, we propose a novel approach based
on a technique we call secure multi-execution. The main
idea is to execute a program multiple times, once
for each security level, using special rules for I/O
operations. Outputs on a given output channel are only
produced in the execution linked to the security level
assigned to this output channel. Inputs from a given
input channel are replaced by default inputs except
in executions linked to a security level higher than
or equal to the level of this input channel. Input side
eﬀects are supported by making higher-security-level
executions reuse inputs obtained in lower-security-
level threads.
Secure multi-execution has strong advantages. First,
it is sound: any program is noninterferent under secure
multi-execution. This is relatively easy to see: an exe-
cution at a given security level can only output at that
level, and never even see inputs from a higher level.
So outputs could not possibly depend on inputs from
higher levels. Second, secure multi-execution is precise:
if a program is (termination-sensitively) noninterferent
under normal execution, then its behaviour under a
terminating normal execution and under secure multi-
execution are the same. As discussed above, techniques
based on static analysis and/or execution monitoring
can not achieve both soundness and precision. We
believe our enforcement mechanism is the ﬁrst one that
is both provably sound and precise in the sense that the
enforcement mechanism is transparent for terminat-
ing runs of every termination-sensitively noninterferent
program (a notion we will deﬁne later).
One obvious disadvantage of multi-execution is its
cost in terms of CPU time and memory use. However,
we argue in this paper for the practicality of the
approach in at least one important application area:
Javascript web applications. We have implemented
secure multi-execution in the mainstream Spidermon-
key Javascript interpreter [10], and we show using
the Google Chrome v8 benchmarks [11] that memory
costs and CPU time costs can be traded oﬀ against
each other. More surprisingly, we show that secure
multi-execution can actually be faster than standard
execution. This is due to the fact that Javascript is a
sequential language and hence necessarily serialises
all I/O operations. Parallel multi-execution provides
more opportunity for I/O parallelism, and this can lead
to a faster execution time. One could say that secure
multi-execution uses the noninterference property of a
program to automatically parallelise the program.
In summary, this paper makes the following contri-
butions:
• We propose secure multi-execution as a new enforce-
ment mechanism for noninterference. We propose
rules for correctly handling a generic form of I/O.
• We formally prove soundness and precision of
secure multi-execution for a small model language
with I/O operations.
• We present experimental benchmark results for
multi-execution implemented in a mainstream
Javascript engine. This makes
secure multi-
execution to our knowledge the ﬁrst provably
sound dynamic noninterference-enforcing tech-
nique for which benchmark results are available.
• We argue for the practicality of multi-execution in
a mainstream browser setting, based on our bench-
mark results and outlines of proposed solutions
for handling the DOM tree and browser callbacks.
The remainder of this paper is structured as follows.
First, in Section II we give a motivation and informal
overview of our approach. Next, in Section III we
provide a formal model, and we prove soundness and
precision in Section IV. Section V then reports on our
implementation and the experiments we performed. In
Sections VI, VII and VIII we discuss further extensions,
related work and oﬀer a conclusion.
II. Informal overview
A. Information Flow Analysis
Imagine the following Javascript code is running in
a typical web-based e-mail client.
1 var text = document.getElementById
2
(’email-input’).text;
3 var abc = 0;
4 if(text.indexOf(’abc’)!=-1) { abc = 1 };
5 var url = ’http://example.com/img.jpg’
6
7 document.getElementById(’banner-img’)
+ ’?t=’ + escape(text) + abc;
8
.src = url;
110
Note that setting the src property of an img element
will trigger an HTTP request to the url set. Clearly,
this code represents an important breach of privacy.
The owners of the example.com domain can obtain
the body of any e-mail a user sends. This type of
code could have been injected through a cross-site
scripting (XSS) attack, or hidden in an ad included by
the web-mail server into the application. Many authors
have discussed this vulnerability in current browsers,
and various countermeasures have been studied in the
research literature [7], [12]–[14].
be
an
input
at
inputs
and
example,
For
A ﬁrst
outputs
the
as
conﬁdential).
step at analysing the above program
into
classify
levels.
expression
is
to
security
“document.getElementById(’email-input’).text”
could
seen
level H (high,
“document.getElementById(’banner-img’).src”
could be seen as an output at security level L
(low, public). The example above exhibits a ﬂow of
information from a H input into a L output. Note that
in this classiﬁcation, it is important to ensure that no
input or output can aﬀect subsequent inputs that are
not on higher or equal security levels.
security
expression
The
Countermeasures are often shown to be eﬀective at
eliminating these unacceptable ﬂows by showing that
they guarantee a property called noninterference, which
comes in diﬀerent variants. Termination-insensitive non-
interference is a common variant, guaranteeing that two
terminating executions of a program produce output
that agrees on public data when started with input
that agrees on public data. The assumption behind
this notion is that information is only disclosed by the
program when it terminates.
Termination-insensitive noninterference forbids two
types of information ﬂow, both of which are present
in the example above. The variable text which is sent
to the L output, was assigned data directly coming
from the H input. This type of information ﬂow is
commonly referred to as an explicit ﬂow. The variable
abc was not directly assigned data from the H input,
but it was assigned a value in a conditional branch
on a condition involving H variables. This type of
information ﬂow is called an implicit ﬂow. A program
cannot be termination-insensitively noninterferent if
these types of ﬂows are present.
This variant of noninterference can thus already oﬀer
some protection, but there are still ways to bypass it
using what are generally called covert channels. Fig-
ure 1 shows two programs exploiting respectively the
timing and termination covert channels. Using either
program, an attacker can get hold of the value of the
variable abc above.
1 function time(f) {
var t = new Date().getTime();
f();
return new Date().getTime() - t;
4
5 }
6 function f() {
if(abc != 0) {
2
3
7
8
for(var i = 0; i  10) {
abcLo = 1;
13
14 }
(a) Exploiting the timing covert channel.
1 while(abc == 0) {}
2 img.url = ’http://example.com/img.jpg’;
2
2
1 var text = document.getElementById
(’email-input’).text undefined;
3 var abc = 0;
4 if(text.indexOf(’abc’)!=-1) { abc = 1 };
5 var url = ’http://example.com/img.jpg’
+ ’?t=’ + escape(text) + abc;
6
7 document.getElementById(’banner-img’)
8
.src = url;
(a) Execution at L security level.
1 var text = document.getElementById
(’email-input’).text;
3 var abc = 0;
4 if(text.indexOf(’abc’)!=-1) { abc = 1 };
5 var url = ’http://example.com/img.jpg’
+ ’?t=’ + escape(text) + abc;
6
7 document.getElementById(’banner-img’)
8
.src = url;
(b) Exploiting the termination covert channel.
(b) Execution at H security level.
Figure 1. Bypassing information ﬂow analysis using covert chan-
nels.
Figure 2. Multi-Execution of example Javascript program from
Section II-A.
Using secure multi-execution, we can close the tim-
ing and termination covert channels as well. We guar-
antee a stronger notion, which we call timing- and
termination-sensitive noninterference. This stronger no-
tion states that after any number of execution steps, two
executions of a program will have produced output
which agrees on public data when run with input that
agrees on public data.
B. Secure Multi-Execution
is
its name
suggests,
As
replaced by the
lower security levels.
secure multi-execution
will execute a program multiple times, once for
each security level. Statements producing externally
observable output are only executed in the execution
linked to their security level. Input at high security
Javascript undeﬁned
levels
value in executions at
In
Figure 2a and 2b, we illustrate how the example
Javascript program from Section II-A would be
executed on respectively the L and H security
level. Recall that we had associated the expressions
“document.getElementById(’email-input’).text”
and “document.getElementById(’banner-img’).src”
respectively to the H and L security levels.
Modiﬁcations to the behaviour of input and output
statements are indicated by crossing them out and,
if necessary, putting a replacement expression on the
side.
It is clear how multi-execution ensures noninterfer-
ence. Output statements are only executed from an
execution at the associated security level, and this ex-
ecution simply does not get access to the actual values
of inputs at higher security levels. Even the timing and
termination covert channels are thus easily blocked.
Because the program is executed once for every se-
curity level, all input and output statements are still
executed and the eﬀects of noninterferent programs
should not be modiﬁed. An interesting question is
how multi-execution will handle interferent programs.
A partial answer is that it will always execute them
in a noninterferent way, modifying their behaviour if
necessary to ensure this. We discuss this further in
Section VI-B.
Contrary to what the illustration in Figure 2 sug-
gests, both in our formal work in Sections III and
IV and in our experiment described in Section V,
we do not implement secure multi-execution through
program transformation. Instead, we run multiple exe-
cutions in parallel, using a scheduler to determine the
interleaving. We intercept input and output commands
and execute them according to the rules we described,
depending on the security level of the execution they
are called from.
C. Input Side Eﬀects
One problem that still remains is how multi-
execution will handle inputs with side eﬀects. For
example, the following program uses the commonly
supported browser window.confirm method:
111
1 var r = window.confirm("Are you sure?");
If we execute this program at multiple security
levels, each higher than the one associated to the
window.confirm input, then the user will need to reply
multiple times to the question.
To solve this problem, we assume that each such
input will correspond to exactly one identical input
in the execution at the input’s own security level. We
will show in the formal derivations in Section IV that
for terminating runs of termination-sensitively non-
interferent programs, this assumption holds. We can
therefore let the executions at higher levels wait for the
execution at the lower level and reuse the input value
collected there. In fact, this solution also solves the
problem of exposing timing and termination channels
related to the side eﬀects of the input function.
Note, ﬁnally, that our inputs with side eﬀects are in
fact a more general concept than outputs. The outputs
we will consider are limited to producing a certain side
eﬀect in the outside world and cannot return a result
to the program. A statement producing both an eﬀect
in the outside world and returning a result must in
fact be treated as an input statement, and its eﬀects as
side eﬀects of producing the result.
D. Scheduling and Expected Performance
The basic idea of secure multi-execution is executing
a program one time per security level. Clearly, this is
not a cheap approach in terms of performance. First
intuition would suggest that both execution time and
memory usage would be multiplied by the number
of security levels. In Section V, we provide detailed
measurements of both execution time and memory
usage in an experimental implementation of secure
multi-execution in a Javascript engine. In this section,
we already discuss some results informally.
The impact of secure multi-execution on execution
time and memory usage depends heavily on the choice
of a scheduling strategy for the diﬀerent executions.
The choice of a scheduling strategy is free, except for
two important remarks. First, as we discussed above,
high security executions need to wait for low security