title:FIRMA: Malware Clustering and Network Signature Generation with
Mixed Network Behaviors
author:M. Zubair Rafique and
Juan Caballero
FIRMA: Malware Clustering and Network Signature
Generation with Mixed Network Behaviors
M. Zubair Raﬁque and Juan Caballero
{zubair.rafique,juan.caballero}@imdea.org
IMDEA Software Institute
Abstract. The ever-increasing number of malware families and polymorphic
variants creates a pressing need for automatic tools to cluster the collected mal-
ware into families and generate behavioral signatures for their detection. Among
these, network trafﬁc is a powerful behavioral signature and network signatures
are widely used by network administrators. In this paper we present FIRMA,
a tool that given a large pool of network trafﬁc obtained by executing unlabeled
malware binaries, generates a clustering of the malware binaries into families and
a set of network signatures for each family. Compared with prior tools, FIRMA
produces network signatures for each of the network behaviors of a family, re-
gardless of the type of trafﬁc the malware uses (e.g., HTTP, IRC, SMTP, TCP,
UDP). We have implemented FIRMA and evaluated it on two recent datasets
comprising nearly 16,000 unique malware binaries. Our results show that FIRMA’s
clustering has very high precision (100% on a labeled dataset) and recall (97.7%).
We compare FIRMA’s signatures with manually generated ones, showing that
they are as good (often better), while generated in a fraction of the time.
Keywords: Network Signatures, Malware Clustering, Signature Generation
1
Introduction
Malware analysts face the challenge of detecting and classifying an ever-growing num-
ber of malware families and a ﬂood of polymorphic variants. While this problem has
been observed for years it is only getting worse as malware packing rates keep increas-
ing [14, 24] and malware operations become easier to launch thanks to services that
enable outsourcing key steps such as malware creation and distribution [5, 12].
Behavioral signatures detect polymorphic variants by capturing behaviors speciﬁc
to a malware family and stable across its variants [4, 19, 26]. To build behavioral signa-
tures, defenders collect large numbers of unlabeled malware using honeyclients, honey-
pots, spam traps, and malware analysis services [2]. Classifying those malware binaries
into families is important not only for understanding the malware landscape, but also
for generating behavioral signatures speciﬁc to a family, as it is very difﬁcult to ﬁnd
behaviors common to all malware samples.
A powerful behavioral signature is network trafﬁc because the large majority of mal-
ware families require network communication to receive commands, perform nefarious
activities (e.g., clickfraud, spam, data exﬁltration, DoS), and notify controllers on the
results. Network signatures are widely used by administrators for detecting malware-
infected hosts in their networks, and for identifying remote malicious servers for abuse
2
reporting and takedown. They are easier to deploy than host-based signatures, requiring
a signature-matching IDS at a vantage network point rather than virtual environments
at every end host [19, 42].
In this work we propose FIRMA, a tool that given a large number of network traces
obtained by executing unlabeled malware samples produces: (1) a clustering of the
malware samples into families, and (2) a set of network signatures for each family
cluster. Each signature in the set for a family captures a different network behavior of
the family. This is important because a malware family may use multiple C&C protocols
(e.g., one binary and another HTTP-based), a C&C protocol and another protocol for
malicious activities (e.g., SMTP for sending spam), or multiple messages in the same
protocol with different structure and content. Generating a single signature for each
family combining different behaviors would lead to signatures with high false positives.
FIRMA offers a combined solution for the problems of automatic malware cluster-
ing and signature generation. The only prior work we are aware of offering a combined
solution to these problems is by Perdisci et al. [26]. However, their approach exclusively
deals with HTTP trafﬁc and generates signatures that cover only the HTTP method and
the HTTP URL. In contrast, FIRMA analyzes, and generates signatures for, all trafﬁc
sent by the malware, regardless of protocol and ﬁeld. This is fundamental because 20–
45% of the signatures FIRMA generates are for non-HTTP trafﬁc. In our largest dataset,
34% of the malware families have no characteristic HTTP trafﬁc and for another 44%
of the families the HTTP signatures generated by FIRMA contain tokens outside the
HTTP method and URL (i.e., in headers or the body). Our performance results also
indicate that FIRMA is at least 4.5 times faster than the tool in [26].
While there exists a wealth of research in automatic signature generation for worm
detection [18,20,22,25,32] these works focus on a single worm and a single network be-
havior, i.e., the protocol interactions needed to exploit a vulnerability used for propaga-
tion. They generate a single signature for the worm and can only handle small amounts
of noise in the worm trafﬁc [22], not a pool of malicious trafﬁc generated by a large
number of unlabeled binaries from different families and with multiple network behav-
iors. In addition, they rely on worm trafﬁc containing invariants needed to exploit the
vulnerability [25], while malware C&C trafﬁc is not constrained in that way. There are
also other works on malware clustering using network trafﬁc, but those do not address
network signature generation [13] or generate network signatures manually [5, 12].
For matching the network signatures, FIRMA outputs the produced signatures in
the syntax used by 2 popular signature-matching IDSes: Snort [33] and Suricata [34].
This enables one entity to produce signatures, which are then distributed to many other
entities using these IDSes. There is no need to deploy a new signature matching compo-
nent. This model is widely used in the industry, e.g., with the Sourceﬁre and Emerging
Threats rule sets1. However, those rule sets are largely produced manually.
We evaluate FIRMA on two recently collected malware datasets, comprising nearly
16,000 malware binaries. The largest of these datasets is publicly available as part of the
MALICIA project and has the malware binaries labeled [23,24]. Using those labels we
show that FIRMA achieves perfect precision and 97.7% recall on its malware clustering,
and a F-Measure of 98.8%. On live trafﬁc, the generated signatures achieve a low false
1 http://www.emergingthreats.net/, http://www.sourceﬁre.com/
3
Fig. 1. An example signature ﬁle produced by FIRMA.
positive rate of 0.00001%. In addition, we have access to manually generated network
signatures for the malware in that dataset, produced as part of [24]. We use those to
demonstrate that the signatures automatically generated by FIRMA are as good (and
often better) than the signatures manually generated by analysts, and are generated in a
fraction of the time.
To facilitate future research and enable other groups to compare their results to ours,
we are releasing a new version of the MALICIA dataset that adds FIRMA’s clustering
results, and both the manually generated signatures and the ones produced by FIRMA.
2 Overview and Problem Deﬁnition
FIRMA takes as input a set of network traces obtained by running unlabeled malware
binaries in a contained environment. It outputs: (1) a clusters ﬁle with a partition of the
malware binaries that produced the network traces into family clusters, (2) a signature
ﬁle with network signatures annotated with the family cluster they correspond to, and
(3) an endpoints ﬁle with the C&C domains and IP addresses that the malware binaries
in each family cluster contacted across the input network traces.
A fundamental characteristic of FIRMA is that a family cluster has an associated
signature set where each signature captures a different network behavior of the family.
Figure 1 shows an example signature ﬁle produced by FIRMA. It contains two family
clusters, each of them with two signatures. The malware binaries in the ﬁrst family clus-
ter use a C&C protocol built on top of HTTP POST messages as well as SMTP trafﬁc
for testing whether the infected host can spam. The second family cluster (correspond-
ing to the zeroaccess family [39]) shows an HTTP C&C that uses a GET message and
a separate UDP-based C&C protocol on ports 16464 and 16471.
Both families exhibit two very different network behaviors that should not be com-
bined, otherwise the resulting signature would be too general and cause many false
positives. To avoid this, we propose a novel design for FIRMA in which (at 10,000
feet) the trafﬁc in the network traces is ﬁrst partitioned into trafﬁc clusters using fea-
tures that identify similar trafﬁc, then signatures are created for each trafﬁc cluster, and
ﬁnally a sequence of steps merges similar signatures and groups signatures for the same
family into signature clusters. Importantly, through the whole process FIRMA tracks
which malware binaries belong to which cluster.
Other salient features of FIRMA are that it is not limited to a speciﬁc type of trafﬁc
(e.g., HTTP) or speciﬁc ﬁelds (e.g., HTTP Method, URL), and that it is protocol-aware.
The ﬁrst is important because malware can use any type of C&C trafﬁc. For example,
 alert tcp any any -> any [80,8080] (msg:"Cluster:1"; sid:0001; content:"POST"; http_method; content:"Accept-Encoding: gzip,deflate|0d0a|";)alert tcp any any -> any [25] (msg:"Cluster:1"; sid:0002; content:"EHLO"; content:"localhost";)#Cluster: 1#Cluster: 1alert tcp any any -> any [80] (msg:"Cluster:2"; sid:0003; content:"GET"; http_method; content:"/counter.img"; http_uri; content:"digits="; http_uri; content:"siteId="; http_uri; content:"theme="; http_uri; content:"User-Agent: Opera/9 (Windows NT 5.1|3b| |3b| x86)|0d0a|";) alert udp any any -> any [16464,16471] (msg:"Cluster:2"; sid:0004; dsize:16; content:"|28948dabc9c0d199|";)#Cluster: 2#Cluster: 2transportendpointsmetadatapayload4
it may build a C&C protocol directly on top of a transport protocol (e.g., TCP or UDP)
or on top of an application protocol (e.g., HTTP or IRC). Also, because any part of
a message may contain the distinctive content that enables building a signature. For
example, the ﬁrst signature in Figure 1 captures a typo that the malware author made
in a custom Accept-Encoding HTTP header: there is no space after the comma in the
“gzip,deﬂate” value, which does not happen in benign trafﬁc.
FIRMA performs a protocol-aware trafﬁc clustering and signature generation. If
the C&C trafﬁc uses a known application protocol such as HTTP, IRC, or SMTP the
trafﬁc is parsed into ﬁelds and the signatures capture that a token may be speciﬁc to a
ﬁeld and should only be matched on that ﬁeld. We have designed FIRMA to leverage
increasing protocol support in off-the-self IDSes. For example, both Snort and Suricata
partially parse HTTP requests and provide modiﬁers (e.g., http method, http uri,
http header) to indicate that matching should happen on the HTTP method, URL,
or headers buffers, rather than on the full packet buffer.
Benign trafﬁc pool. In addition to the network traces, FIRMA also takes as input a
pool of benign trafﬁc used to identify benign domains and content that should not be
included in the signatures. Our benign pool comprises four traces: two of HTTP and
HTTPS trafﬁc produced by visiting the top Alexa sites2. and another two with all trafﬁc
seen at the personal computers of two volunteers for 2 days. The latter comprise a vari-
ety of TCP and UDP trafﬁc including SMTP and IRC. We examine the computers with
commercial AV software to verify they are clean throughout the collection. As signa-
tures are typically shared among administrators, it is difﬁcult to generate a benign trafﬁc
pool that is representative of the trafﬁc in the different networks where the signatures
may be deployed. Thus, FIRMA enhances the benign trafﬁc pool with 3 whitelists: the
Alexa list of most visited domains, a list of HTTP User-Agent strings used by benign
software3, and a list of protocol keywords extracted from Internet standards.
2.1 Network Signatures
One important design goal of FIRMA is to generate network signatures that can be
matched by the open source signature-matching IDSes Snort [33] and Suricata [34].
This decision inﬂuences the type of signatures that FIRMA generates. As a newer IDS,
Suricata decided to be compatible with the popular Snort signatures, so its syntax is a
superset of the one used by Snort. These network signatures comprise 4 parts (bottom
of Figure 1): carrier protocol, endpoints, payload signature, and metadata.
The carrier protocol can be TCP, UDP, ICMP, or IP for Snort. Suricata in addi-
tion supports some application protocols such as HTTP, SMTP, SSL, and IRC. FIRMA
currently generates protocol-aware signatures for HTTP, SMTP, and IRC and raw sig-
natures for other TCP and UDP trafﬁc. The metadata stores additional information such
as a unique signature identiﬁer (sid) and the message to display when the signature is
matched (msg), which FIRMA sets to the family cluster that the signature belongs to.
The endpoints capture source and destination IPs and ports. FIRMA sets only the
destination ports and uses a wildcard (e.g., any) for the rest. The list of C&C domains
2 http://www.alexa.com/topsites/
3 http://www.useragentstring.com/
5
Fig. 2. Architecture overview.
and IP addresses contacted by each family is output into a separate endpoints ﬁle, so
that signatures match trafﬁc involving servers not observed in the input network traces.
The payload signature captures content invariants, which often exist even in obfus-
cated or encrypted C&C protocols, as malware often fails to use robust cryptographic
algorithms and random initialization vectors. For example, the last signature in Fig-
ure 1 captures an obfuscated 16-byte UDP packet with 8 distinctive bytes in its payload
(represented as a hexadecimal string). However, while worm trafﬁc has been shown to
contain such invariants due to the requirements to exploit a vulnerability [7], C&C pro-
tocols are not constrained in this way and can potentially be fully polymorphic [30].
While FIRMA cannot generate payload signatures for fully polymorphic trafﬁc, it en-
ables to quickly identify those families and queue them for further analysis.
While many types of payload signatures have been proposed, most signature-based
IDSes like Snort and Suricata only support 3 types: token sets, token subsequences,
and regular expressions. These 3 types can be applied on the buffer holding the full
packet or on smaller ﬁeld buffers that the IDS may parse (i.e., protocol-aware). Proba-
bilistic signatures [25, 29] and Turing-complete signatures used to decrypt obfuscated
payloads [30] are not supported and require deploying a dedicated matching engine.
FIRMA builds protocol-aware token-set payload signatures. A token set is an un-
ordered set of binary strings (i.e., tokens) that matches the content of a buffer if all
tokens in the signature appear in the buffer, in any order. The more tokens and the
longer each token the more speciﬁc the signature, but longer tokens are preferable, i.e.,
a 3-byte token is more speciﬁc than 3 one-byte tokens. Token subsequences are more
speciﬁc because they impose an ordering on the set of tokens. This is problematic with
protocols such as HTTP where reordering some ﬁelds does not affect the semantics of
the message, allowing the attacker to easily evade the signature. Regular expressions
are more expressive than token sets and token subsequences and can be used to repre-
sent both, but are more expensive to match. They also impose an ordering constraint
introducing similar issues as token subsequences.
Signature lifetime. Network signatures have a lifetime and need to be updated over
time. The endpoint information is typically short-lived and of limited value for online
detection. However, it is useful for clustering as we observe malware executables of