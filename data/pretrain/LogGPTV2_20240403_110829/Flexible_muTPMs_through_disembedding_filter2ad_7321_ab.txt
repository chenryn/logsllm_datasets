• Root of Trust for Measurement (RTM) by measuring
the identity of the externalized code when it is loaded
in the µTPM environment and recording this measure-
ment in a Firmware Conﬁguration Register (FCR) (see
Section 3.3); and
• Root of Trust for Reporting (RTR) by signing the con-
tent of the FCR with its Hardware Endorsement Key
(HEK) (see Section 3.4).
The communication interface of the µTPM architecture is
also diﬀerent. A standard TPM has one I/O port to transfer
data to the rest of the platform; e.g., the Low Pin Count bus
in case of the PC platform. The µTPM has a second I/O
port to manage the processes and load program code. We
denote the port to transfer data with IO3 and the control
port with XIO. In a real implementation both (logical) ports
probably use the same physical bus.
Alternative implementation.
We envision the FTE to be implemented as dedicated
hardware, but its functionality can also be realized with
a basic operating system.
In this case, ROM memory is
needed to reliably store the operating system and (ideally)
the microcontroller provides two protection rings, i.e., user
and supervisor mode. This approach is similar to JavaCard-
based smartcards, which allow the deployment of multiple
applets on a single card.
3Optionally this port supports locality.
CRTMHostNVMµCµTPMjCjpIDFCRCiiNVMµTSSRAMFTEXIOIOkAuthHEK118Figure 2: Life cycle of a µTPM process. After its
creation, the process goes into a measuring state to
calculate the ﬁrmware identity C and authenticate
the individual ﬁrmware commands. Afterwards, the
process only executes authenticated microcode. De-
pending on the code measurement scheme, the pro-
cess can go back in measuring mode to authenticate
additional commands; however this is optional. The
selection and deselection commands allow over con-
text switches.
3.2 Process management
The µTPM architecture supports multiple execution con-
texts, which we call processes. A process typically corre-
sponds with the implementation of one TPM, but as argued
before, it could also be another – arbitrary – security crit-
ical task. Scheduling of the processes is done outside the
µTPM: the µTPM Support Stack (µTSS) has to indicate
which process the µTPM should run. Note though that
TPM commands are atomic. To keep the scheduling simple,
process switches are not allowed while the TPM is execut-
ing a command. This may block operation for a while if one
process is executing a computationally heavy task, such as
RSA key generation, or completely block the µTPM if the
code running in it is blocking (e.g., inﬁnite loop). However,
those events are either rare or suggest that something has
gone massively wrong already, while the ability to switch
contexts at arbitrary times would lead to greatly increased
complexity.
3.2.1 Process life cycle
The µTPM processes can be managed with the following
commands over the XIO interface:
• CreateProcess(s) creates a new execution context with
a NVM size of s and returns a process identiﬁer pID4.
If the desired amount of NVM cannot be allocated,
an error code is returned, indicating the amount of
memory the process can get. Note that a process, once
created, is only destroyed by the corresponding µTPM
command, but survives platform reboots.
• SelectProcess(pID) switches context to the process pID.
This especially implies that on the XIO interface, only
microcode with the corresponding code identity are
accepted (see Section 3.3).
4Alternatively, the command can have the pID as parameter.
If the process number is no longer available, an error code is
returned; the µTSS can decide to delete the process in order
to claim a desired pID.
Figure 3: Memory layout of a process. The volatile
memory is divided into a dynamic part that is over-
written when the microcode of a diﬀerent TPM com-
mand is loaded, and a static segment that is cleared
when the process is deselected.
• DeselectProcess() temporarily stops the currently se-
lected process. This involves clearing its volatile mem-
ory.
• DeleteProcess() permanently stops the currently se-
lected process. This involves clearing its volatile and
non-volatile memory and deleting the associated pro-
cess descriptor.
• ListProcesses() outputs the list of all processes, i.e., the
process identiﬁer, FCR and NVM size. This allows the
user to identify unwanted µTPM usage, or processes
that use up too much memory.
The process life cycle is summarized in Figure 2. After
the creation of a process, a measurement of the process’
code base is made, and the code identity is stored in the
FCR. Next, the process can be selected to actually run the
previously measured code. The mechanisms to measure and
execute code in a selected process will be described in Sec-
tion 3.3.
Remark that that the execution of code is blocking; the
process can only be stopped by a platform reset or with
DeleteProcess, which deletes its volatile as well as persistent
state.
3.2.2 Memory management
In order to minimize the hardware resources of the µTPM,
the size of the RAM and NVM memory should be kept small.
Therefore, only the code and data of the running process
are stored in the volatile RAM. We assume that the µTPM
has suﬃcient internal NVM and hence that each process has
exclusive access to a dedicated part of this memory5. In Sec-
tion 5 we alleviate this requirement by (partly) externalizing
the NVM.
Non-volatile memory.
The FTE provides rudimentary virtual memory manage-
ment for the NVM by mapping logical addresses to physical
addresses. This ensures strict process isolation, as processes
cannot access the physical NVM directly (see Figure 3). For
each process, the FTE stores a base address b and the size s
5If desired, a mechanism to share NVM between diﬀerent
processes could be provided. However, this adds complexity
to the FTE.
DELETEDSELECTEDEXECUTINGDESELECTEDCREATEDMEASURINGMEASUREDSelectProcessDeselectProcessSelectProcessLoadLibraryCreateProcessDeleteProcessAuthenticateAuthenticateﬁnishedExecuteNVMphysical memoryRAMstaticdynamicpersistent statevirtual memoryvirtual memorylibraryscratchpadTPM commandarbitary codevolatile statepersistent statevolatile stateprocessiprocessj119of its non-volatile memory. When a process wants to access
the virtual NVM address l, the address gets mapped to the
physical address b + l on the condition that l ≤ s. The NVM
size and management allows an implementation to compro-
mise on complexity and eﬃciency. A low-end µTPM may
for example restrict NVM usage to a constant size which is
a power of two, which means that the address translation
can be implemented eﬃciently without an adder circuit.
Volatile memory.
The volatile memory is directly accessible by the running
process, without intervention of the FTE. Conceptually we
divide the volatile RAM of the process into two segments.
The static part contains code and data that is shared be-
tween diﬀerent commands belonging to one particular pro-
cess, i.e., operational RAM (such as a loaded key from the
original TPM) and shared library code. The dynamic part
contains the current command to be executed, as well as
all data only needed temporarily for this execution. The
static part has to be loaded into RAM once the process
is activated – i.e., immediately after the process selection
command. The dynamic part is loaded into RAM when a
particular command is loaded with the Execute command,
which will be described in Section 3.3.
3.2.3 Library support
To minimize the implementation size of each command,
the µTPM could include a library for standard cryptographic
operations. In addition, it is possible to load specialized li-
braries into the static volatile memory (see Figure 3) that
allow for optimizing the size of the individual code blocks.
Those libraries are uploaded after a process is selected (with
the LoadLibrary command, which will also be explained in
Section 3.3), and stay in memory until the next context
switch.
3.2.4 Context switch
During a context switch, the physical RAM memory is au-
tomatically cleared and overwritten. This guarantees that
no secrets leak between processes. The shared library code
and the dynamic memory segment are reloaded externally
by the µTSS. However, the process needs to temporally store
its volatile state to the non-volatile memory before it is
suspended, and restore the state afterwards on resumption.
This can be done in diﬀerent ways.
• The memory management unit of the FTE implements
swapping. This however adds extra complexity to the
µTPM and hence contradicts the principle of a mini-
mal trusted computing base (TCB).
• Each process has an exit and entry routine, i.e., code
that is executed before the µTPM switches to a new
process, and code that is executed immediately after
the process is selected. This code is registered with
the FTE during the process creation. This concept is
similar to JavaCard applets, which have a select and
deselect method.
• The process itself is responsible for the storage of sen-
sitive state information. The current TCG speciﬁca-
tion has commands to suspend and resume the TPM,
normally used for power saving of the platform: the
TPM SaveState command stores the volatile state (e.g.,
content of PCR) in NVM and TPM Startup restores
this information. The µTSS has to invoke the correct
command before and after the selection of a process.
We opt for the latter approach as this requires minimal sup-
port by the µTPM.
3.3 Code integrity measurement
Signature-based measurement
The integrity of all external code executed on the µTPM is
measured by the Firmware Trust Engine. In this aspect, our
architecture diﬀers from XµP proposal that only executes
code authorized by the device manufacturer. We propose
two schemes to measure the integrity of code.
3.3.1
A ﬁrst option is to sign the code of every TPM command
individually. Consequently, the complete TPM ﬁrmware can
be represented as a list of executable codes ci, and associated
digital signatures σi:
{pk,{σ0, c0},{σ1, c1}, . . . ,{σn, cn}} with σi = signsk(ci)
We assume that the signature key sk is the same for all
commands ci. The hash of the corresponding public key is
used as the code’s identity:
C = H(pk)
It might occur that the main TPM functionality is produced
by one entity (e.g., a current TPM vendor), but extensions
are added by a diﬀerent entity (e.g., government agency).
In this situation the second entity has to sign the extensions
as well as the original code with its own signature key.
Veriﬁcation of digital signatures imposes a considerable
computational and communication overhead. Therefore, the
µTPM veriﬁes the signature on every TPM command once
and calculate a MAC for subsequent veriﬁcations. The MAC
key k is derived from the ﬁrmware identity and a device
speciﬁc secret key kAuth:
k = HkAuth (C) = HkAuth (H(pk))
This enables the µTSS to transform the signed TPM com-
mands into MACed executables:
{{µ0, c0},{µ1, c1}, . . . ,{µn, cn}} with µi = Hk(ci)
The µTPM provides the following commands over the XIO
port:
• AssociateKey(pk) loads the public key pk in volatile
memory and stores C = H(pk) in the Firmware Con-
ﬁguration Register. This command has to be invoked
after the process creation.
• Authenticate(σ, c) loads the process code c in the dy-
namic RAM segment and veriﬁes its signature σ. If the
veriﬁcation is successful, the µTPM returns a MAC on
the code c: µ = Hk(c) with k = HkAuth (C).
• Execute(µ, c) loads the process code c in the dynamic
memory segment, and veriﬁes the MAC µ. If the ver-
iﬁcation is successful, the code c is executed.
• LoadLibrary(µ, l) loads the library code l in the dynamic
RAM segment, and veriﬁes the MAC µ. If the veriﬁ-
cation is successful, the library l is copied to the static
memory segment of the process.
120The ﬁrst time that the Authenticate command is executed,
a ﬂag is set to prevent the invocation of AssociateKey. If the
µTSS wants to associate a diﬀerent key with the process,
the existing process must be stopped and a new one must be
created, with DeleteProcess and CreateProcess respectively.
Using this approach, it is possible to add or replace com-
mands without changing the ﬁrmware identity, provided that
the code manufacturer signs the new commands (and the
µTSS authenticates them with Authenticate). This needs
to be done carefully though, as mixing diﬀerent versions of
commands can lead to security problems. It is thus recom-
mended to change the code identity (i.e., diﬀerent sk and
pk) if major updates are performed, and replace the entire
code base. This is equivalent with the creation of a new
TPM and consequently existing keys have to be migrated
with the migration or maintenance functionality6. It would
be possible to build in some versioning support as well, but
this appears to add unnecessary complexity to the system.
3.3.2 Binary measurement
The hash of the complete TPM ﬁrmware can also be used
to identify the code:
C = H(c0, c1, . . . , cn)
Note that the order in which the TPM commands are mea-
sured, determines the resulting hash. Alternatively, the
measurement could be computed like the TCG PCR exten-
sion operation:
C = H(H(H(0, c0), . . .), cn)
During a measurement step, the µTSS provides the µTPM
with the whole ﬁrmware image by sequentially loading the
code fragments ci. Each time a new command is loaded, the
FTE updates the FCR and returns a MAC on the code. This
time, the MAC key k is derived from the process identiﬁer
pID and the µTPM secret key kAuth:
HkAuth (pID)
After this initialization, the µTPM will only execute the
MACed code.
The µTPM provides the following commands over the XIO
port:
• Authenticate(c) loads the process code c in RAM, up-
dates the FCR and returns a MAC on the code c:
µ = Hk(c) with k = HkAuth (pID).
• Execute(µ, c) loads the process code c in the dynamic
RAM segment, and veriﬁes its MAC µ. If the veriﬁca-
tion is successful, the code c is executed.
• LoadLibrary(µ, l) loads the library code l in the dynamic
memory segment, and veriﬁes its MAC µ. If the veri-
ﬁcation is successful, the code l is copied to the static
memory segment.
The ﬁrst time that LoadLibrary or Execute is executed, a
ﬂag is set to disallow new invocations of Authenticate. If the
µTSS wants to authenticate additional code at a later stage,
6This complies with the TPM speciﬁcation, which states
that “When a ﬁeld upgrade occurs, it is always suﬃcient to
put the TPM into the same state as a successfully executed
TPM RevokeTrust.”
a new process must be created and the complete code base
must be measured again.
If this method of authentication is chosen, users are free
to select any subset of commands to be integrated into a
process. Though it is not possible to add new commands
while maintaining access to the process memory – otherwise,
a TPM could be attested as a good code base, and later
commands are added to read out critical keys.
3.4 Code integrity reporting
The FTE guarantees that a process only executes authen-
ticated code and that processes run isolated from each other.
Therefore, the secrets stored by a TPM (e.g., SRK, mono-
tonic counters, owner credential, etc.) stay conﬁdential. The
TPM process can generate its own Endorsement Key (EK),
but a mechanism is desired to link this key to the µTPM
hardware and the ﬁrmware identity C. Otherwise remote
parties cannot distinguish between a hardware TPM and a
software emulator [14].
For this reason, every µTPM ships with a unique asym-
metric key pair called Hardware Endorsement Key. Dur-