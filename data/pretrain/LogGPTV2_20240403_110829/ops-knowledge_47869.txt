I understand you have a Python script running as a daemon process and you want to control its start and stop operations via a web page using a PHP script. You've encountered an error related to permissions when trying to import the `MySQLdb` module in your Python script. Here is a more detailed and professional way to address your issue:

### Problem Description
Your Python script, which runs as a daemon, is encountering a `pkg_resources.ExtractionError` when trying to import the `MySQLdb` module. The error indicates that the user running the script does not have write access to the Python egg cache directory (defaulted to `//.python-eggs`).

### Solution

1. **Set the `PYTHON_EGG_CACHE` Environment Variable:**
   You can set the `PYTHON_EGG_CACHE` environment variable to point to a directory where the user running the PHP script has write access. This can be done in your PHP script before executing the Python script.

   ```php
   <?php
   // Set the PYTHON_EGG_CACHE environment variable
   putenv('PYTHON_EGG_CACHE=/path/to/writable/directory');

   // Start or stop the Python daemon
   $command = 'python /path/to/your/daemon.py';
   exec($command, $output, $return_var);

   if ($return_var === 0) {
       echo "Daemon started successfully.";
   } else {
       echo "Failed to start daemon. Error: " . implode("\n", $output);
   }
   ?>
   ```

2. **Ensure Proper Permissions:**
   Make sure that the directory specified in the `PYTHON_EGG_CACHE` environment variable has the appropriate write permissions for the user running the PHP script. You can set the permissions using the following command:

   ```sh
   sudo chown -R www-data:www-data /path/to/writable/directory
   sudo chmod -R 755 /path/to/writable/directory
   ```

   Replace `www-data` with the user under which your web server (e.g., Apache, Nginx) is running.

3. **Alternative Approach: Use a Service Manager:**
   Instead of directly managing the daemon with PHP, consider using a service manager like `systemd` to manage the Python daemon. This approach is more robust and secure.

   - Create a `systemd` service file for your Python daemon:

     ```ini
     [Unit]
     Description=My Python Daemon
     After=network.target

     [Service]
     User=your-user
     WorkingDirectory=/path/to/your/daemon
     ExecStart=/usr/bin/python3 /path/to/your/daemon.py
     Restart=always

     [Install]
     WantedBy=multi-user.target
     ```

   - Save this file as `/etc/systemd/system/my_daemon.service`.

   - Reload the `systemd` daemon and enable the service:

     ```sh
     sudo systemctl daemon-reload
     sudo systemctl enable my_daemon
     ```

   - Use `systemctl` commands to start, stop, and check the status of your daemon:

     ```sh
     sudo systemctl start my_daemon
     sudo systemctl stop my_daemon
     sudo systemctl status my_daemon
     ```

   - In your PHP script, use `exec` to call these `systemctl` commands:

     ```php
     <?php
     $action = $_GET['action']; // e.g., 'start', 'stop', 'status'

     $command = "sudo systemctl $action my_daemon";
     exec($command, $output, $return_var);

     if ($return_var === 0) {
         echo "Daemon $actioned successfully.";
     } else {
         echo "Failed to $action daemon. Error: " . implode("\n", $output);
     }
     ?>
     ```

### Conclusion
By setting the `PYTHON_EGG_CACHE` environment variable and ensuring proper permissions, you can resolve the permission issues. Alternatively, using a service manager like `systemd` provides a more reliable and secure way to manage your Python daemon.