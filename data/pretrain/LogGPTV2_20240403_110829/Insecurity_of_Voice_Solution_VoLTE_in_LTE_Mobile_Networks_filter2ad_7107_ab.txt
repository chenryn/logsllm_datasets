V1: Lack of Access Control at Phone Software & Hardware
Access control on the control plane is to ensure its exclusive use
by authentic VoLTE signals. However, we discover that the device
lacks bullet-proof access control to the VoLTE control plane. Fig-
ure 3 shows the current practice on the mobile device. We also plot
the one for the CS voice for comparisons.
3184G 
Gateway
Host
@Internet
4G 
Gateway
IMS 
Core
4G 
Gateway
IMS 
Core
Host
@Internet
EPS Bearer Activation
Data-Service Bearer
IP_PS
(*.*.280a.*)
During 
Data
Src= IP_PS, Dest = Host
Data-Service Bearer
Data Service
IP_VoLTE
(*.*.406.*)
During 
Call
EPS Bearer Activation
Signaling Bearer
Src= IP_VoLTE, Dest = IMS
Signaling Bearer
Voice Bearer
VoLTE 
Signaling
Voice
IP_VoLTE
(*.*.406.*)
(I)
During 
Data
(II)
Signaling Bearer
Src= IP_VoLTE, Dest = Host
Data Service
Src= IP1_VoLTE, Dest = IP2_VoLTE
Data 
(a) Benign PS data
(b) Benign VoLTE
(c) PS data via VoLTE signaling in cases of (I) mobile-to-
Internet and (II) mobile-to-mobile
Figure 2: Typical procedures for (a) PS data service, (b) benign VoLTE and (c) PS data via VoLTE signaling.
CS Call
VoLTE
    R
a
d
i
o
I
n
t
e
r
f
a
c
e
L
a
y
e
r
net
ip_route
if_inet
IP
s
o
c
k
e
t
A
P
P
O
S
SW
HW
C
H
I
P
S
E
T
Control Plane
Data Plane
Voice traffic codec
Intended C-plane path
Intended D-plane path
Unintended traffic path
VoLTE Interface
4G Gateway
IMS 
CS Call Server
Figure 3: VoLTE Access control on the device side.
There are two options for access control at the phone: hard-
ware (i.e., 4G/3G chipset) and software (i.e., OS and apps) based.
For CS calls, all signals are handled within the chipset, never ex-
posed to OS and apps. There is no easy way to hijack them un-
less the hardware is compromised or special debugging mode is
invoked by developers.
In contrast, the VoLTE signaling access
is exposed to the mobile OS, where a network interface, called
VoLTE interface, is created for VoLTE only. There are a variety
of reasons to take the software approach: VoLTE adopts the Inter-
net protocols (IP and SIP) that are well supported in the OS (e.g.,
android.net.sip.* library); the software scheme offers high
ﬂexibility (e.g., easy upgrades) and rich information for the OS and
apps to optimize performance. By design, only genuine signals can
traverse the VoLTE interface and enter the underlying chipset.
However, the VoLTE interface has not been hardened against
non-authorized access. Other unprivileged apps can easily obtain
the VoLTE interface information, as they do to the mobile data in-
terface (see Figure 4 (left) for a two-interface example where IPv6
is used). In fact, information can be directly retrieved from the net
settings in the OS. For example, the IP address is obtained from
/proc/net/if_inet6, and the signaling server’s IP address
from the routing table (/proc/net/ipv6_route). Moreover,
it is feasible for the adversary to inject non-VoLTE data packets
(the red dashed lines in Figure 3). The attacker without root privi-
lege can specify its destination to any of the VoLTE-related servers.
Given the default routing table with rules to them, unprivileged
apps may inject packets into the VoLTE signaling bearer, and such
packets are routed to those VoLTE servers. With root privilege, the
adversary can add a routing rule to any destination for the VoLTE
interface. He is thus able to inject packets to any target via the
signaling bearer.
Note that we test all three popular types of trafﬁc in the empirical
studies of this section: UDP, TCP, and ICMP. The exposed vulner-
abilities may only exist for certain protocols and ports. We use one
type of trafﬁc to show the feasibility of each vulnerability. All the
other types of trafﬁc are considered to have similar results if not
explicitly speciﬁed.
Empirical validation. We conﬁrm the above vulnerability through
the following tests. First, an unprivileged app can obtain the inter-
face for the VoLTE signaling bearer (rmnet1), as well as the one
for PS data (rmnet0). We learn that rmnet1 belongs to VoLTE
because it appears/disappears when VoLTE is enabled/disabled. Fig-
ures 4 (left) and 5 (left) show the snapshots at two mobile phones
in OP-I, captured by Network Info II, an Android app [3]. In both
operators, IPv6 is used. IP addresses for both interfaces are differ-
ent. Note that the roles of rmnet0 and rmnet1 may be swapped.
We can infer them based on the routing table. The one assigned to
the default routing rule is for the PS data service, and the other is
for VoLTE. Second, we validate that the unprivileged applications
are able to inject non-VoLTE trafﬁc into the signaling bearer via
the VoLTE interface. The test works as follows. We send a UDP
packet with Hop Limit being set to 1, to the VoLTE signaling server
and then receive an ICMP packet from the VoLTE gateway via the
VoLTE interface. It is from the gateway because this IP address
differs from that serving PS data services. This implies that this
UDP packet is indeed sent through the signaling bearer, out of the
phone.
Causes and lessons. We further examine why neither software
nor hardware at the phone provides proper access control for the
VoLTE signaling bearer. In general, the OS employs permission
control or uses execution container to protect network access (e.g.,
WiFi). However, it does not invoke system permission control
for VoLTE. This is possibly because no corresponding mechanism
in the OS distinguishes the network interface dedicated to VoLTE
from that for the Internet data access. From the OS standpoint,
accessing to both interfaces is identical, without any extra require-
ment from the underlying chipset. On the hardware side, the current
practice fully relies on the software protection, and always trusts
the trafﬁc coming from the software’s VoLTE interface. Concerted
effort in both software and hardware to protect the VoLTE access is
missing, when the chipset opens up the access to the OS.
V2: Imprudent Routing and Forwarding in the Network
The next weakness lies on the network side in its routing and
packet forwarding. It leads to two unexpected consequences. First,
trafﬁc carried through the VoLTE signaling bearer is not veriﬁed at
runtime. Non-authentic control packets can be forwarded by the
network. Without runtime ﬁltering, the packets not destined to the
319..
..
..
..
Destination
Protocol  Info
IP_GoogleDNS
IP_SignalingServer
IP_VoLTE 
Source
2607:fb90:    fd00:976a:c206:1801::7 SIP/SDP INVITE
fd00:976a:    2607:fb90:407:               SIP/SDP Status 183
2607:fb90:    2001:4860:4860::8888   ICMPv6  Echo request
2001:4860:   2607:fb90:407:               ICMPv6  Echo reply
2607:fb90:    2001:4860:4860::8888   ICMPv6  Echo request
2001:4860:   2607:fb90:407:               ICMPv6  Echo reply
(b) Mobile-to-Internet (Google DNS server)
...
...
...
...
...
..
....
..
(a) Two interfaces
Figure 4: An example of Mobile-to-Internet data service via the
VoLTE signaling interface (rmnet1).
Protocol
Destination
Mobile 2: IP_VoLTE, IP_Data 
Mobile 1: IP_VoLTE 
Source
2607:fb90:407:      2607:fb90:406:      ICMPv6  Echo request
2607:fb90:406:      2607:fb90:407:      ICMPv6  Echo reply
2607:fb90:407:      2607:fb90:406:      ICMPv6  Echo request
2607:fb90:407:      2607:fb90:280a:    ICMPv6  Echo request
2607:fb90:280a:    2607:fb90:407:      ICMPv6  Echo reply
2607:fb90:407:      2607:fb90:280a:    ICMPv6  Echo request
Info
...
...
...
...
...
..
...
...
...
...
...
...
..
...
..
...
...
(b) Mobile-to-Mobile (M1 → M2)
..
(a) M2’s interfaces
Figure 5: An example of Mobile-to-Mobile data service from
the VoLTE signaling interface (rmnet1) of Mobile 1 to Mo-
bile 2. Both VoLTE-to-VoLTE (rmnet1) and VoLTE-to-DATA
(rmnet0) are supported.
VoLTE servers in the IMS core, can sneak in through the VoLTE
bearer.
Second, routing rules within mobile networks are prone to abuse.
VoLTE phones need to exchange signaling messages with each other
via the VoLTE signaling server. When the routing rule toward each
phone exists for the signaling bearer at the 4G gateway, phones can
communicate with each other without reaching the signaling server.
It thus enables direct, Mobile-to-Mobile communication. Mean-
while, it also opens the door to non-VoLTE Mobile-to-Mobile data
communication. It is likely that routing rules to the rest of the Inter-
net exist; this facilitates the Mobile-to-Internet data access through
the VoLTE signaling bearer.
Empirical validation.
used to perform both (i) Mobile-to-Internet and (ii) Mobile-to-Mobile
data service (Figure 2c). The former is only feasible in OP-I, whereas
the latter works for both.
The VoLTE signaling bearer can be mis-
(i) Mobile-to-Internet: We observe message exchange between
the phone and an external server through the VoLTE interface. We
ﬁrst uses rmnet1 to ping a Google public DNS server (its ad-
dress is 2001:4860:4860::8888). Figure 4b shows partial
packet traces collected via a tcpdump-like trafﬁc sniffer, Shark [4].
The ﬁrst two SIP messages indicate that the rmnet1 interface is
indeed used for VoLTE signaling. The following ping request and
reply exchanged between the phone and the Google DNS server
reveal that, it is viable to exploit the VoLTE signaling bearer to de-
liver normal data trafﬁc. Both inbound (downlink) and outbound
(uplink) data transfers are feasible. We also deploy an IPv6 server
outside the mobile network and repeat the test, and similar results
are observed.
(ii) Mobile-to-Mobile: We ﬁnd that VoLTE can be exploited to
directly communicate with another mobile device belonging to the
same carrier. We send ICMP Echo Requests from the VoLTE inter-
face of one phone (Mobile 1) to another phone (Mobile 2) via its
VoLTE and data-service interfaces (see both interfaces in the left
plot of Figure 5). The right plot shows Mobile 1 receives ICMP
Echo Reply packets in both VoLTE-to-VoLTE and VoLTE-to-Data
cases in OP-I. This conﬁrms that both forms of Mobile-to-Mobile
communication are feasible in OP-I. We ﬁnd that OP-II supports
only the VoLTE-to-VoLTE option for Mobile-to-Mobile communi-
cation, but permits only UDP trafﬁc instead of ICMP. This implies
that more defenses are implemented in the core network of OP-II,
but they are still insufﬁcient to guard against the VoLTE exploit.
We also examine the feasibility of protocol variants. Both UDP
and ICMP work for OP-I, whereas only UDP is allowed for OP-
II. The slight difference is that some, but not all UDP ports work
in OP-I whereas almost all the ports can work in OP-II. In OP-I,
the viable UDP port varies in the tests and requires pre-scanning.
This divergence reﬂects the operator’s freedom in making their own
policy and implementation. However, TCP is not allowed for both
carriers in any case. Later, we will demonstrate that the attack is
always viable as long as at least one protocol is allowed to traverse
the core network over VoLTE signaling. Any real trafﬁc (TCP or
UDP) can be encapsulated in ICMP/UDP tunneling.
Causes and lessons.
The operator does not properly regulate
routing and packet forwarding for the VoLTE signaling bearer. On
the network side, the carrier does not enforce access protection for
VoLTE, similar to CS voice calls and normal PS data. Once this
bearer is allocated for the VoLTE control plane, the network re-
lies on the phone to forward authentic signaling messages (unfor-
tunately, it is not guaranteed). This imprudent practice ignores the
distinction of VoLTE from CS calls and normal PS data (see V3
and V4 exploits later). Packets carried by the signaling bearer from
the phone, should only reach the VoLTE signaling server, but not
another phone or an Internet host, and vice versa.
3.2 Exploiting VoLTE for Free Data Access
Taking charging into account makes the unintended data access
more threatening. The practice is that data/voice billing has never
taken VoLTE signaling messages into account (V3). If the trafﬁc
is delivered through the signaling bearer, it is free of charge. This
remains valid regardless of whether the trafﬁc is destined to the
signaling server or not.
V3: Abusing No Billing of VoLTE Signaling
VoLTE control signals are free of charge. Any packets via VoLTE
signaling bearer are free, no matter whether their destination is
the VoLTE signaling server or not. Therefore, such unintended
data transfer is treated as VoLTE signaling and bypasses the billing
mechanism for normal PS data access. Typically, mobile data ac-
cess is charged based on volume (i.e., the number of delivered
bytes).
It is not surprising for operators to make VoLTE signaling deliv-
ery exempted from charging. Since VoLTE continues to offer call
service, it is natural to adopt the time-based charging, following the
common practice for traditional CS voice. Consequently, only the
call duration on the data plane is collected for billing. VoLTE con-
trol messages are used to facilitate voice calls and should be free of
charge. Moreover, some signals are even exchanged before the call
is established, for example, SIP-INVITE, SIP-INVITE-OK,
SIP-INVITE-ACK messages are used to set up a call. However,
the practice to supply free VoLTE signaling does have loopholes.
The operators does not enforce that all packets going through the
VoLTE signaling bearer are indeed control messages. Even worse,
there is no effective mechanism to limit the trafﬁc volume going
through it. As a result, this can be readily abused to make “free”
data service.
Empirical validation. We ﬁrst show that genuine signaling mes-
sages (through rmnet1) are free of charge. We generate excessive
320QCI
Priority
1
2
. . .
5
9
2
4
. . .
1