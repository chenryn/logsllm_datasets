           const Callable& slow_case_continuation,
           ForEachDirection direction = ForEachDirection::kForward) {
    -    Label non_array(this), slow(this, {&k_, &a_, &to_}),
    -        array_changes(this, {&k_, &a_, &to_});
    +    Label non_array(this), array_changes(this, {&k_, &a_, &to_});
         // TODO(danno): Seriously? Do we really need to throw the exact error
         // message on null and undefined so that the webkit tests pass?
    @@ -336,11 +373,11 @@
           k_.Bind(NumberDec(len()));
         }
    -    a_.Bind(generator(this));
    +    generator(this);
    -    HandleFastElements(processor, action, &slow, direction);
    +    HandleFastElements(processor, action, &fully_spec_compliant_, direction);
    -    BIND(&slow);
    +    BIND(&fully_spec_compliant_);
         Node* result =
             CallStub(slow_case_continuation, context(), receiver(), callbackfn(),
    @@ -440,7 +477,7 @@
         } else {
           k_.Bind(NumberDec(len()));
         }
    -    a_.Bind(generator(this));
    +    generator(this);
         Node* elements_type = LoadInstanceType(LoadElements(o_));
         Switch(elements_type, &unexpected_instance_type, instance_types.data(),
                label_ptrs.data(), labels.size());
    @@ -690,6 +727,7 @@
       Variable k_;
       Variable a_;
       Variable to_;
    +  Label fully_spec_compliant_;
     };
     TF_BUILTIN(FastArrayPush, CodeStubAssembler) {
    @@ -1168,7 +1206,7 @@
                                                 len, to);
       GenerateIteratingArrayBuiltinLoopContinuation(
    -      &ArrayBuiltinCodeStubAssembler::MapProcessor,
    +      &ArrayBuiltinCodeStubAssembler::SpecCompliantMapProcessor,
           &ArrayBuiltinCodeStubAssembler::NullPostLoopAction);
     }
    @@ -1187,7 +1225,7 @@
       GenerateIteratingArrayBuiltinBody(
           "Array.prototype.map", &ArrayBuiltinCodeStubAssembler::MapResultGenerator,
    -      &ArrayBuiltinCodeStubAssembler::MapProcessor,
    +      &ArrayBuiltinCodeStubAssembler::FastMapProcessor,
           &ArrayBuiltinCodeStubAssembler::NullPostLoopAction,
           Builtins::CallableFor(isolate(), Builtins::kArrayMapLoopContinuation));
     }
    diff --git a/src/code-stub-assembler.h b/src/code-stub-assembler.h
    index dbdd5f0..ba35e25 100644
    --- a/src/code-stub-assembler.h
    +++ b/src/code-stub-assembler.h
    @@ -51,7 +51,8 @@
       V(Tuple2Map, Tuple2Map)                             \
       V(Tuple3Map, Tuple3Map)                             \
       V(UndefinedValue, Undefined)                        \
    -  V(WeakCellMap, WeakCellMap)
    +  V(WeakCellMap, WeakCellMap)                         \
    +  V(SpeciesProtector, SpeciesProtector)
     // Provides JavaScript-specific "macro-assembler" functionality on top of the
     // CodeAssembler. By factoring the JavaScript-isms out of the CodeAssembler,
    diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
    index 60fc9e6..25bc972 100644
    --- a/test/mjsunit/mjsunit.status
    +++ b/test/mjsunit/mjsunit.status
    @@ -65,6 +65,7 @@
       # Too slow in debug mode for validation of elements.
       'regress/regress-430201': [PASS, ['mode == debug', SKIP]],
       'regress/regress-430201b': [PASS, ['mode == debug', SKIP]],
    +  'regress/regress-716044': [PASS, ['mode == debug', SKIP]],
       ##############################################################################
       # Too slow in debug mode for GC stress mode.
    diff --git a/test/mjsunit/regress/regress-716044.js b/test/mjsunit/regress/regress-716044.js
    new file mode 100644
    index 0000000..264424c
    --- /dev/null
    +++ b/test/mjsunit/regress/regress-716044.js
    @@ -0,0 +1,25 @@
    +// Copyright 2017 the V8 project authors. All rights reserved.
    +// Use of this source code is governed by a BSD-style license that can be
    +// found in the LICENSE file.
    +
    +// Flags: --verify-heap
    +
    +class Array1 extends Array {
    +  constructor(len) {
    +      super(1);
    +    }
    +};
    +
    +class MyArray extends Array {
    +  static get [Symbol.species]() {
    +      return Array1;
    +    }
    +}
    +
    +a = new MyArray();
    +
    +for (var i = 0; i factory()->length_string());
        merged_length.Bind(
            CallStub(CodeFactory::ToLength(isolate()), context(), len_property));
        Goto(&has_length);
        BIND(&has_length);
        //len值为原数组的长度
        len_ = merged_length.value();
        // 5. If IsCallable(callbackfn) is false, throw a TypeError exception.
        Label type_exception(this, Label::kDeferred);
        Label done(this);
        GotoIf(TaggedIsSmi(callbackfn()), &type_exception);
        Branch(IsCallableMap(LoadMap(callbackfn())), &done, &type_exception);
        BIND(&throw_null_undefined_exception);
        {
          CallRuntime(
              Runtime::kThrowTypeError, context(),
              SmiConstant(MessageTemplate::kCalledOnNullOrUndefined),
              HeapConstant(isolate()->factory()->NewStringFromAsciiChecked(name)));
          Unreachable();
        }
        BIND(&type_exception);
        {
          CallRuntime(Runtime::kThrowTypeError, context(),
                      SmiConstant(MessageTemplate::kCalledNonCallable),
                      callbackfn());
          Unreachable();
        }
        BIND(&done);
        // 6. If thisArg was supplied, let T be thisArg; else let T be undefined.
        // [Already done by the arguments adapter]
        if (direction == ForEachDirection::kForward) {
          // 7. Let k be 0.
          k_.Bind(SmiConstant(0));
        } else {
          k_.Bind(NumberDec(len()));
        }
        //调用MapResultGenerator函数创建用于保存结果的数组
        a_.Bind(generator(this));
        HandleFastElements(processor, action, &slow, direction);
        BIND(&slow);
       //调用映射函数生成映射，并将结果保存到a_中
        Node* result =
            CallStub(slow_case_continuation, context(), receiver(), callbackfn(),
                     this_arg(), a_.value(), o(), k_.value(), len(), to_.value());
        ReturnFromBuiltin(result);
      }
而`MapResultGenerator`函数调用了`ArraySpeciesCreate`，继续跟踪
      Node* MapResultGenerator() {
        // 5. Let A be ? ArraySpeciesCreate(O, len).
        return ArraySpeciesCreate(context(), o(), len_);
      }
而`ArraySpeciesCreate`函数如下
    Node* CodeStubAssembler::ArraySpeciesCreate(Node* context, Node* originalArray,
                                                Node* len) {
      // TODO(mvstanton): Install a fast path as well, which avoids the runtime
      // call.
      Node* constructor =
          CallRuntime(Runtime::kArraySpeciesConstructor, context, originalArray);
      return ConstructJS(CodeFactory::Construct(isolate()), context, constructor,
                         len);
    }
回调了js层的SpeciesConstructor函数，目的是为了调用合适的构造函数，比如如下
    class MyArray extends Array {
      static get [Symbol.species]() {
          return Array;
      }
    }
    a = new MyArray(1.1,2.2);
    var b = a.map(function(x) {return x+1});
    %DebugPrint(b);
其中
      static get [Symbol.species]()
是固定写法，该函数返回一个类型，那么下一步回调结束，程序就会从Array类里调用构造函数，从而创建了一个Array的对象，假如代码改为如下
    class Array1 extends Array {
      constructor(len) {
          print("len=" + len);
          super(len);
        }
    };
    class MyArray extends Array {
      static get [Symbol.species]() {
          return Array1;
      }
    }
    a = new MyArray(1.1,2.2);
    var b = a.map(function(x) {return x+1});
    %DebugPrint(b);
由于`static get
[Symbol.species]()`返回了Array1，因此map时会从Array1里调用构造函数，此时，我们可以控制`super()`函数里的参数，如下
    lass Array1 extends Array {
      constructor(len) {
          super(1);