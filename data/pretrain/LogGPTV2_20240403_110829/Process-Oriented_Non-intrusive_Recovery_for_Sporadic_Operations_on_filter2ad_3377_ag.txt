the method is hence in a user guided manner. This recovery strategy is used at runtime of cloud 
web  service  applications.  The  logic  is  designed  during  the  design  phase  of  cloud  web  service 
applications  (J.  Simmonds,  et  al.,  2010).  One  challenge  for  this  recovery  strategy  is  how  to 
increase the efficiency of the methodology used for generating the recovery plans for operators 
to make the final selection (M. Fu, et al., 2014). 
Limitations: The first limitation with user guided recovery for cloud based web services is that 
they  are  usually  designed  for  the  normal  activities  of  cloud  applications  rather  than  sporadic 
operations on cloud (J. Simmonds, et al., 2010). User guided recovery has more benefits if it is 
applied  on  the  cases  where  the  system  scale  is  very  large  and  the  recovery  configurations  are 
35 
complicated. The problem we target in this research is at a different level related to the external 
sporadic operations on cloud-hosted applications (M. Fu, et al., 2013). Considering the fact that 
an automated sporadic operation implemented by scripts is also regarded as a special software 
application, user guided recovery is still applicable for sporadic operations on cloud. The second 
limitation with user guided recovery lies in the fact that the execution of the generated recovery 
plans  is  not  fully  automated  and  it  relies  on  the  operators  to  manually  select  the  optimal 
recovery  plan  to  execute.  If the  operators just accidentally  select  a recovery  plan  which is  not 
the  optimal  one,  or  if  they  even  do  not  have  enough  expert  knowledge  to  make  the  correct 
selection, the recovery for the cloud based web services may end up with failure. Although such 
situations have a low occurrence probability, they should still be avoided if possible. Actually, 
such  situations  could  have  been  avoided  if  the  recovery  plan  selection  procedure  is  fully 
automated.  Moreover,  when  it  comes  to  manual  selection  of  the  optimal  recovery  plan,  there 
will be a problem with  recovery scalability of user guided recovery if the operators spend too 
much time selecting the optimal recovery action, especially when the system scale is large. The 
third limitation with user guided recovery lies in the selection criteria used by the operators to 
select  the  optimal  recovery  plan.  The  operators  make  the  selection  largely  based  on  the 
estimated MTTR (Mean Time to Recover) of each recovery plan, and they usually do not take 
other criteria into consideration, such as negative impact on the system caused by recovery (risk 
of  recovery)  and  any  monetary  cost  incurred  by  recovery.  But  both  of  these  two  criteria  have 
been considered by our proposed recovery method (POD-Recovery) (M. Fu, et al., 2015; M. Fu, 
et al., 2016).  
2.2.11  BPEL (Business Process Execution Language) Recovery in Cloud Computing 
Business  Process  Execution  Language  (BPEL)  (J.  Simmonds  and  M.  Chechik,  2010)  is  a 
protocol for specifying the logic of business processes, e.g. shipping goods to overseas from a 
local store. It requires a BPEL engine to execute BPEL scripts, and error recovery mechanisms 
are specified as recovery blocks in the BPEL scripts (E. Juhnke, et al., 2009; J. Simmonds and 
M. Chechik, 2010). The recovery block is usually specified in the form of a Compensation node, 
where the recovery flow in case of an error is provided (E. Juhnke, et al., 2009; J. Simmonds 
and M. Chechik, 2010). Normally, recovery blocks are manually specified and installed by the 
engineers  or  operators,  and  hence  BPEL  recovery  can  also  be  considered  as  a  type  of  user 
guided recovery. Recovery methods like BPEL recovery mechanisms (E. Juhnke, et al., 2009; J. 
Simmonds  and  M.  Chechik,  2010)  usually  deal  with  normal  activities  of  cloud  systems.  An 
example  of  normal  activities  can  be  the  transaction workflow  of  an  e-commerce  website.  The 
main  challenge  of  BPEL  recovery  is  that  sometimes  certain  errors  are  not  recoverable.  For 
example, when the purchased goods have been delivered to the wrong destination, this kind of 
36 
error cannot be recovered from because the goods are impossible to be called back, especially if 
the  goods  have  been  unexpectedly  consumed  by  the  receivers  (E.  Juhnke,  et  al.,  2009;  J. 
Simmonds and M. Chechik, 2010). 
Limitations: If we treat sporadic operations on cloud as business processes, BPEL recovery is 
to some extent applicable for the recovery of sporadic operations on cloud. When applying the 
BPEL recovery mechanism on sporadic operations on cloud, one limitation is that it needs the 
BPEL  engine  to  run,  which  is  impractical  for  sporadic  operations  on  cloud  (E.  Juhnke,  et  al., 
2009;  J.  Simmonds  and  M.  Chechik,  2010).  Moreover,  BPEL  recovery  has  limited  recovery 
patterns  (e.g.  compensation)  and  it  is  hard  to  recover  for  various  failure  scenarios  within 
sporadic  operations  on  cloud  (M.  Fu,  et  al.,  2014;  M.  Fu,  et  al.,  2016).  Additionally,  BPEL 
recovery  specifications  are  a  type  of  static  recovery  plan  articulated  before  the  logic  of  the 
recovery is executed at runtime (E. Juhnke, et al., 2009; J. Simmonds and M. Chechik, 2010). 
Compared to BPEL recovery, our proposed recovery service is focused on sporadic operations 
of cloud systems and it is intended for runtime recovery. 
2.3  Taxonomy of Existing Cloud Recovery Methods 
A  recovery  mechanism  for  cloud  sporadic  operations  may  need  to  integrate  a  wide  range  of 
cloud  recovery  strategies  (M.  Fu,  et  al.,  2014).  In  order  to  propose  a  fine-grained  recovery 
methodology  for  sporadic operations  on  cloud,  and  in  order  to  clarify  which  of  those  existing 
cloud  recovery  methods  are  more  closely  related  to  our  proposed  recovery  methodology,  we 
present  a  taxonomy  for  the  above  mentioned  existing  cloud  recovery  methods.  As  such,  the 
main  purpose  of  figuring  out  the  taxonomy  is  to  identify  which  existing  cloud  recovery 
strategies  are  directly  applicable  for sporadic  operations  on cloud.  Hence, the  taxonomy  has  a 
benefit: it helps to identify which existing cloud recovery strategies should be  the focus of our 
research.  Another  benefit of  the taxonomy  is  that  it is  reasonably  able to  provide  some  useful 
insights for the other parties which also conduct research activities on cloud recovery (M. Fu, et 
al., 2014). 
Some  cloud  recovery  methods  are  designed  for  normal  activities  (e.g.  cloud  applications 
workflow) (J. Behl, et al., 2012). For example,  the  virtual machine replication mechanism can 
be  employed  to  recover  from  errors  in  cloud  applications  by  switching  from  an  erroneous 
machine to its backup  (H. A. Lagar-Cavilla, et al., 2009). This mechanism takes effect during 
the  runtime  of  cloud  applications  and it  is  intended  for  normal  activities  runtime  phase.  Other 
cloud recovery methods for normal activities, e.g. the fault-tolerance design, are implemented in 
the design phase of cloud applications (A. Colesa, et al., 2010). In addition to recovery methods 
for  normal  activities  on  cloud,  there  are  recovery  methods  for  sporadic  operations  (sporadic 
37 
activities) on cloud (e.g. the upgrade operation on cloud applications) (J. Behl, et al., 2012). For 
a particular sporadic activity, such as upgrade, it can be conducted either manually or with the 
assistance of automation scripts such as Chef (OpsCode, 2016; S. Nelson-Smith, 2011). When 
cloud  operators  are  conducting  the  sporadic  activities  either  manually  or  automatically,  cloud 
recovery strategies such as process-oriented recovery methods (I. Weber, et al., 2013; M. Fu et 
al.,  2013;  M.  Fu  et  al.,  2014)  can  be  employed  if  runtime  errors  happen.  These  recovery 
strategies  are  intended  for  sporadic  activities  during  runtime  phase.  When  operators  are 
designing  the  scripts  for  sporadic  activities,  they  may  utilize  script  mini  tests  to  test  the 
availability of the scripts or they may design exception handlers to handle the potential errors (S. 
Nelson-Smith,  2011).  These  recovery  strategies  are  intended  for  sporadic  activities  during 
design phase.  
The categories we have identified – normal activities vs. sporadic activities and design time vs. 
runtime constitute the axes for the taxonomy (M. Fu et al., 2014). In the following sections, we 
discuss how to figure out the classification results for the taxonomy of cloud recovery strategies 
in a systematic way. 
2.3.1  Methodology of Establishing the Taxonomy 
We establish the taxonomy of existing cloud recovery strategies by a systematic approach which 
consists of three steps (M. Fu, et al., 2014). The first step is to define the issues to be addressed 
for figuring out the taxonomy based on analysing the purpose of the taxonomy. The second step 
is  to  extract  the  data  of  existing  cloud  recovery  strategies  from  the  literature  by  summarizing 
existing recovery methods. The third step is to analyse the data to figure out the taxonomy by 
categorizing the cloud recovery strategies into different categories.  
A.  Defining Issues to Address for Taxonomy 
The research goal is to provide taxonomy for existing cloud recovery strategies for the purpose 
of  facilitating  the  research  on  recoverability  for  sporadic  operations  on  cloud  applications.  As 
has  been  discussed  previously,  cloud  applications  have  different  varieties  of  activities  (i.e. 
sporadic activities and normal activities), and those activities have different life cycle phases (L. 
Bass,  I.  Weber  and  L.  Zhu,  2015).  The  taxonomy  reflects  these  activities  and  their  life  cycle 
phases. As such, we have defined the below three issues to be addressed (M. Fu, et al., 2014): 
1) What are the existing cloud recovery strategies? 
2) What types of activities of cloud applications are those recovery methods applicable for? 
3) What phases in the life cycle of the activities are those recovery methods applicable for? 
38 
B.  Literature Review and Extracting Data 
To address the first issue (question 1), we reviewed existing cloud recovery strategies from the 
literature. Based on our literature review, we extracted the data of several recovery strategies for 
cloud. Those recovery strategies include: rollback recovery in cloud, disaster recovery in cloud, 
virtual  machine  replication  in  cloud,  fault-tolerance  in  cloud,  recovery  for  cloud  internal 
protocols,  test  driven  scripts  in  cloud  operations,  exception  handling  in  cloud  operations, 
recovery  for  cloud  operations  as  transactions,  cloud  operations  undo  framework,  user  guided 
recovery for cloud web service applications and BPEL (Business Process Execution Language) 
recovery in cloud computing.  
C.  Analysing Data and Making Taxonomy 
To  address  the  second  issue  (question  2),  we  analysed  the  activity  types  (normal  activities  or 
sporadic activities) and what recovery methods are designed for each type of activity. Normal 
activities  are  the  activities  of  cloud  applications  themselves,  such  as  application  workflow  (J. 
Behl, et al., 2012). Among the recovery strategies for normal activities, some strategies perform 
recovery  on  the  infrastructure  level  and  some  methods  on  the  application  level.  Sporadic 
activities  are  the  consumer-initiated  sporadic  operations  on  cloud  applications  such  as 
deployment  and  upgrade  (J.  Behl,  et  al.,  2012;  M.  Fu,  et  al.,  2014).  Among  the  recovery 
strategies  for  sporadic  activities,  some  strategies  perform  recovery  on  the  infrastructure  level 
and  some  methods  on  the  application  level.  The  two  types  of  activities,  which  are  normal 
activities and sporadic activities, can be one dimension for the classification of cloud recovery 
strategies. 
To  address  the  third  issue  (question  3),  we  analysed  the  phases  of  the  life  cycle  the  existing 
cloud  recovery  methods  are  applicable  for  and  which  existing  cloud  recovery  methods  are 
designed  for  which  life  cycle  phase.  We  did  this  for  both  normal  activities  and  sporadic 
activities. A life  cycle for an application or a script contains several phases:  the design phase, 
the runtime phase, the downtime phase, and the off-service phase (J. Behl, et al., 2012). Some of 
the  cloud  recovery  strategies  are  applicable  for  normal  activities  design  phase  or  sporadic 
activities  design  phase,  and  some  of  the  cloud  recovery  strategies  are  intended  for  normal 
activities runtime phase or sporadic activities runtime phase. For the other life cycle phases such 
as the downtime phase or the off-service phase, they are out of the scope of the taxonomy and 
we didn’t show the existing cloud recovery methods under them. Hence, the two phases which 
are the design phase and the runtime phase can be put as another dimension for the classification 
of existing cloud recovery strategies. 
39 
If  we  organize  these  two  dimensions  as  a  two-dimension  coordinate  chart,  they  form  the 
coordinate chart in Fig. 7. Now the problem is to figure out what recovery strategies should be 
placed into each of the four blocks of the coordinate chart. 
Fig. 7.  Coordinate Chart for Dimensions in Taxonomy. 
2.3.2  Literature Data Analysis & Taxonomy 
We  organize  existing  cloud  recovery  strategies  into  Table  2.  In  this  table,  recovery  strategies 
and examples of each recovery strategy are provided. 
Table 2.  Existing Cloud Recovery Strategies 
Recovery Strategies 
Examples 
Cloud Applications Rollback 
Disaster Recovery 
Checkpoint based rollback (E. N. M. Elnozahy, et al., 2002) 
Log based rollback (E. N. M. Elnozahy, et al., 2002) 
Geographical redundancy (M. Pokharel, et al., 2010) 
Cloud storage replication (J. Zhang and N. Zhang, 2011) 
Virtual Machine Replication 
Remus (B. Cully, et al., 2008) 
Fault-Tolerance 
Recovery for Cloud Internal 
Protocols 
Recovery block (B. Randell, et al., 1995) 
N-version programming (A. Avizienis, 1995) 
Parallel (Z. B. Zheng, et al., 2010) 
FTCloud (Z. B. Zheng, et al., 2010) 
FATE&DESTINI (H. S. Gunawi, et al., 2011) 
Test Driven Scripts 
Chef mini tests (S. Nelson-Smith, 2011) 
Cloud Operations Exception 
Handling 
Scripts exception handling (OpsCode, 2016) 
Cloud  management tool exception handling (Asgard, 2013) 
Recovery for Cloud 
Operations as Transactions 
Forward recovery (C. Colombo and G. J. Pace, 2011) 
Backward recovery (C. Colombo and G. J. Pace, 2011) 
Recovery for Cloud 
Operations as Processes 
Cloud operations undo framework (I. Weber, et al., 2013) 
BPEL recovery for cloud operations (E. Juhnke, et al., 2009) 
User Guided Recovery for 
Cloud Applications 
Manual selection of recovery plans (J. Simmonds, et al., 2010) 
BPEL recovery for cloud applications (E. Juhnke, et al., 2009) 
40 
Fig.  8  shows  the  four  categories  we  are  using.  Cloud  applications  have  normal  activities  and 
sporadic  activities.  Both  normal  and  sporadic  activities  have  design  phase  and  runtime  phase. 
Normal  activities  for  cloud  applications  include  applications  workflow  and  internal  processes 
and execution flow within certain system architecture. Sporadic activities for cloud applications 
include  deployment,  upgrade,  reconfiguration,  migration,  etc.  Our  four  categories  for  the 
classification  of  cloud  recovery  strategies  are:  1)  Recovery  for  Normal  Activities  in  Design 
Phase;  2)  Recovery  for  Normal  Activities  in  Runtime  Phase;  3)  Recovery  for  Sporadic 
Activities in Design Phase; 4) Recovery for Sporadic Activities in Runtime Phase.  
Fig. 8.  Cloud Activities and Life Cycle Phases. 
A.  Recovery for Normal Activities in Design Phase 
Normal  activities  involve  two  levels:  the  application  level  which  means  the  aspects  related  to 
cloud  applications  execution  (e.g.  the  execution  of  the  program  within  a  component  of  cloud 
system),  and  the  infrastructure  level  which  means  the  aspects  related  to  cloud  datacentre 
components  structure.  In  the  existing  cloud  recovery  strategies,  fault-tolerance  design,  virtual 
machine  replication  design,  recovery  design  for  cloud  internal  protocols  and  user  guided 
recovery  design  can  be  implemented  in  the  design  phase  of  application  level  cloud  normal 
activities.  Hence,  these  four  recovery  strategies  are  included  into  the  recovery  strategies  for 
application  level  normal  activities  in  design  phase.  Also,  virtual  machine  replication  design, 
disaster  recovery  design  as  well  as  fault-tolerance  design  can  be  implemented  in  the  design 
phase of infrastructure level cloud normal activities. Hence, they are included into the recovery 
strategies for infrastructure level normal activities in design phase. 
B.  Recovery for Normal Activities in Runtime Phase 
In  all  the  existing  cloud recovery  strategies,  cloud  application  rollback,  fault-tolerance,  virtual 
machine  replication,  recovery  for  cloud  internal  protocols  and  user  guided  recovery  for  cloud 
web  applications  take  effect  in  the  runtime  phase  of  application  level  cloud  normal  activities. 
Hence,  they  are  included  into  the  recovery  strategies  for  application  level  normal  activities  in 
41 
runtime  phase.  Also,  virtual  machine  replication,  disaster  recovery  and  fault-tolerance  take 
effect  in  the  runtime  phase  of  infrastructure  level  cloud  normal  activities.  Hence,  they  are 
included into the recovery strategies for infrastructure level normal activities in runtime phase. 
C.  Recovery for Sporadic Activities in Design Phase 
Sporadic  activities  also  involve  two  levels:  the  application  level  which  means  the  sporadic 
activities on the applications inside virtual machines (e.g. installing Tomcat in a machine), and 
the infrastructure level which means the sporadic  activities on the infrastructure of cloud (e.g. 
upgrade a machine by using new AMI). In all the existing recovery strategies, test driven scripts 
can  be  prepared  and  conducted  in  a  test  bed  during  the  design  phase  of  application  level 
sporadic  activities.  And  script  exception  handling  design,  recovery  design  for  operations  as 
transactions  and  recovery  design  for  cloud  operations  as  processes can  be implemented  in  the 
design  phase  of  application  level  sporadic  activities.  Hence,  these  four  recovery  strategies  are 
included  into  the  recovery  strategies  for  application  level  sporadic  activities  in  design  phase. 
Also,  cloud  operation  exceptions  handling  design,  recovery  design  for  cloud  operations  as 
transactions  and  recovery  design  for  cloud  operations  as  processes can  be implemented  in  the 
design  phase  of  infrastructure  level  sporadic  activities.  Hence,  they  are  included  into  the 
recovery strategies for infrastructure level sporadic activities in design phase. 
D.  Recovery for Sporadic Activities in Runtime Phase 
In all the existing recovery strategies, recovery for cloud operations as transactions, recovery for 
cloud  operations  as  processes  and  script  exception  handling  are  implemented  in  the  runtime 
phase of application level sporadic activities. Hence, these three recovery strategies are included 
into the recovery strategies for application level sporadic activities in runtime phase. Also, cloud 
operation  exceptions  handling,  recovery  for  cloud  operations  as  transactions  and  recovery  for 
cloud  operations  as  processes  are  implemented  in  the  runtime  phase  of  infrastructure  level 
sporadic activities. Hence, they are included into the recovery strategies for infrastructure level 
sporadic activities in runtime phase. 
Based  on  the  above  data  analysis,  we  can  classify  the  existing  cloud  recovery  strategies  into 
eight  groups  as  shown  in  Fig.  9.  Since  in  this  diagram  the  normal  activities  are  divided  into 
application  level  and  infrastructure  level,  we  would  like  to  call  this  diagram  level  1 
classification diagram. 
42 
Fig. 9.  Level 1 Classification for Cloud Recovery Methods. 
Then,  by  combining  application  level  and  infrastructure  level  in  both  normal  activities  and 
sporadic activities for both design phase and runtime phase, we get the level 2 classification as 
shown in Fig. 10. And this serves as the final taxonomy for cloud recovery strategies. For our 
proposed recovery approach in this thesis, the category of “Recovery for Sporadic Activities in 
Runtime Phase” is the major one to be investigated (M. Fu, et al., 2014). 
Fig. 10.  Level 2 Classification for Cloud Recovery Methods. 
43 
Chapter 3.  Research Problem Definition 
In this chapter, a motivating example  is first presented using Asgard rolling upgrade operation 
(section  3.1).  Failures  in  the  operation  are  handled  by  the  built-in  error  handling  mechanism 
provided  by  Asgard.  We  study  the  recoverability  of  the  built-in  error  handling  mechanism  of 
Asgard and report how it handles operational errors and failures in Asgard. Section 3.2 provides 
a  discussion  on  the  differences  between  non-intrusive  recovery  and  intrusive  recovery.  In 
section 3.3, the research goals are defined. In order to achieve the research goals, we determine 
the  research  questions  and  present  them  in  section  3.4.  In  section  3.5,  we  define  the  recovery 
requirements  for  our  proposed  recovery  methodology.  In  section  3.6,  we  discuss  the  research 
challenges. 
3.1 Motivating Example 
Asgard  Rolling  Upgrade.  We  use  Asgard rolling  upgrade  operation  as  a  motivating  example 
and we present what is rolling upgrade on cloud. Rolling upgrade is specifically discussed here 
because  it  is  relatively  more  frequently  performed  compared  to  other  sporadic  operations. 
Moreover,  the  operational  steps  of  rolling  upgrade  span  a  number  of  cloud  resources  (e.g. 
instances, ASG, ELB, etc.) and require multiple cloud APIs (e.g. Create Launch Configuration, 
Update Auto Scaling Group, Launch Instances, Register Instances with ELB, etc.). Hence, the 
rolling upgrade operation is the most typical and representative sporadic operation on cloud and 
it builds up our motivation scope.  
Fig. 11.  Asgard Rolling Upgrade Operation.  