like the following:
https://wahh-app.com/scripts/..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af../
winnt/system32/cmd.exe?/c+dir+c:\
In the second vulnerability, an attacker could supply double-encoded forms
of the dot-dot-slash sequence, such as ..%255c. Again, this expression did not
match IIS’s fi lters, but the later processing performed a superfl uous decode of
the input, thereby converting it back to a literal traversal sequence. This enabled
an alternative attack with URLs like the following:
https://wahh-app.com/scripts/..%255c..%255c..%255c..%255c..%255c..
%255cwinnt/system32/cmd.exe?/c+dir+c:\
cc1188..iinndddd 669911 88//1199//22001111 1122::1177::5544 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 692
692 Chapter 18 n Attacking the Application Server
Further details on these vulnerabilities can be found here:
n www.microsoft.com/technet/security/bulletin/MS00-078.mspx
n www.microsoft.com/technet/security/bulletin/MS01-026.mspx
Nine Years Later
The enduring signifi cance of encoding and canonicalization vulnerabilities in
web server software can be seen in the reemergence of a similar IIS vulnerability,
this time in WebDAV, in 2009. A fi le protected by IIS could be downloaded by
inserting a rogue %c0%af string into the URL. IIS grants access to this resource
because it does not appear to be a request for the protected fi le. But the rogue
string is later stripped from the request:
GET /prote%c0%afcted/protected.zip HTTP/1.1
Translate: f
Connection: close
Host: wahh-app.net
The Translate: f header ensures that this request is handled by the WebDAV
extension. The same attack can be carried out directly within a WebDAV request
using the following:
PROPFIND /protec%c0%afted/ HTTP/1.1
Host: wahh-app.net
User-Agent: neo/0.12.2
Connection: TE
TE: trailers
Depth: 1
Content-Length: 288
Content-Type: application/xml
For more information, see www.securityfocus.com/bid/34993/.
Oracle PL/SQL Exclusion List Bypasses
Recall the dangerous default functionality that was accessible via Oracle’s PL/
SQL gateway. To address this issue, Oracle created the PL/SQL Exclusion List,
cc1188..iinndddd 669922 88//1199//22001111 1122::1177::5544 PPMM
92 Stuttard c18.indd V2 - 07/28/2011 Page 693
Chapter 18 n Attacking the Application Server 693
which blocks access to packages whose names begin with certain expressions,
such as OWA and SYS.
Between 2001 and 2007, David Litchfi eld discovered a series of bypasses to the
PL/SQL Exclusion List . In the fi rst vulnerability, the fi lter can be bypassed by
placing whitespace (such as a newline, space, or tab) before the package name:
https://wahh-app.com/pls/dad/%0ASYS.package.procedure
This bypasses the fi lter, and the back-end database ignores the whitespace,
causing the dangerous package to be executed.
In the second vulnerability, the fi lter can be bypassed by replacing the letter
Y with %FF, which represents the ÿ character:
https://wahh-app.com/pls/dad/S%FFS.package.procedure
This bypasses the fi lter, and the back-end database canonicalizes the character
back to a standard Y, thereby invoking the dangerous package.
In the third vulnerability, the fi lter can be bypassed by enclosing a blocked
expression in double quotation marks:
https://wahh-app.com/pls/dad/”SYS”.package.procedure
This bypasses the fi lter, and the back-end database tolerates quoted package
names, meaning that the dangerous package is invoked.
In the fourth vulnerability, the fi lter can be bypassed by using angle brackets
to place a programming goto label before the blocked expression:
https://wahh-app.com/pls/dad/>SYS.package.procedure
This bypasses the fi lter. The back-end database ignores the goto label and
executes the dangerous package.
Each of these different vulnerabilities arises because the front-end fi ltering is
performed by one component on the basis of simple text-based pattern matching.
The subsequent processing is performed by a different component that follows
its own rules to interpret the syntactic and semantic signifi cance of the input.
Any differences between the two sets of rules may present an opportunity for
an attacker to supply input that does not match the patterns used in the fi lter
but that the database interprets in such a way that the attacker’s desired package
is invoked. Because the Oracle database is so functional, there is ample room
for differences of this kind to arise.
More information about these vulnerabilities can be found here:
n www.securityfocus.com/archive/1/423819/100/0/threaded
n TheOracleHacker’sHandbook by David Litchfi eld (Wiley, 2007)
cc1188..iinndddd 669933 88//1199//22001111 1122::1177::5555 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 694
694 Chapter 18 n Attacking the Application Server
Seven Years Later
An issue was discovered in 2008 within the Portal Server (part of the Oracle
Application Server). An attacker with a session ID cookie value ending in %0A
would be able to bypass the default Basic Authentication check.
Finding Web Server Flaws
If you are lucky, the web server you are targeting may contain some of the actual
vulnerabilities described in this chapter. More likely, however, it will have been
patched to a more recent level, and you will need to search for something fairly
current or brand new with which to attack the server.
A good starting point when looking for vulnerabilities in an off-the-shelf
product such as a web server is to use an automated scanning tool. Unlike web
applications, which are usually custom-built, almost all web server deployments
use third-party software that has been installed and confi gured in the same
way that countless other people have done before. In this situation, automated
scanners can be quite effective at quickly locating low-hanging fruit by send-
ing huge numbers of crafted requests and monitoring for signatures indicating
the presence of known vulnerabilities. Nessus is an excellent free vulnerability
scanner, and various commercial alternatives are available.
In addition to running scanning tools, you should always perform your own
research on the software you are attacking. Consult resources such as Security
Focus, OSVDB, and the mailing lists Bugtraq and Full Disclosure to fi nd details
of any recently discovered vulnerabilities that may not have been fi xed on your
target. Always check the Exploit Database and Metasploit to see if someone
has done the work for you and created the corresponding exploit as well. The
following URLs should help:
n www.exploit-db.com
n www.metasploit.com/
n www.grok.org.uk/full-disclosure/
n http://osvdb.org/search/advsearch
You should be aware that some web application products include an open source
web server such as Apache or Jetty as part of their installation. Security updates
to these bundled servers may be applied more slowly because administrators
may view the server as part of the installed application, rather than as part of the
infrastructure they are responsible for. Applying a direct update rather than wait-
ing for the application vendor’s patch is also likely to invalidate support contracts.
Therefore, performing some manual testing and research on the software may
be highly effective in identifying defects that an automated scanner may miss.
If possible, you should consider performing a local installation of the software
you are attacking, and carry out your own testing to fi nd new vulnerabilities
that have not been discovered or widely circulated.
cc1188..iinndddd 669944 88//1199//22001111 1122::1177::5555 PPMM
94 Stuttard c18.indd V2 - 07/28/2011 Page 695
Chapter 18 n Attacking the Application Server 695
Securing Web Server Software
To some extent, an organization deploying a third-party web server product
inevitably places its fate in the hands of the software vendor. Nevertheless, a
security-conscious organization can do a lot to protect itself against the kind
of software vulnerabilities described in this chapter.
Choose Software with a Good Track Record
Not all software products and vendors are created equal. Taking a look at the
recent history of different server products reveals some marked differences
in the quantity of serious vulnerabilities found, the time taken by vendors to
resolve them, and the resilience of the released fi xes to subsequent testing by
researchers. Before choosing which web server software to deploy, you should
investigate these differences and consider how your organization would have
fared in recent years if it had used each kind of software you are considering.
Apply Vendor Patches
Any decent software vendor must release security updates periodically. Sometimes
these address issues that the vendor itself discovered in-house. In other cases,
the problems were reported by an independent researcher, who may or may
not have kept the information to herself. Other vulnerabilities are brought to
the vendor’s attention because they are being actively exploited in the wild. But
in every case, as soon as a patch is released, any decent reverse engineer can
quickly pinpoint the issue it addresses, enabling attackers to develop exploits
for the problem. Wherever feasible, therefore, security fi xes should be applied
as soon as possible after they are made available.
Perform Security Hardening
Most web servers have numerous confi gurable options controlling what functionality
is enabled and how it behaves. If unused functionality, such as default ISAPI exten-
sions, is left enabled, your server is at increased risk of attack if new vulnerabilities
are discovered within that functionality. You should consult hardening guides
specifi c to the software you are using, but here are some generic steps to consider:
n Disable any built-in functionality that is not required, and confi gure the
remaining functionality to behave as restrictively as possible, consistent
with your business requirements. This may include removing mapped
fi le extensions, web server modules, and database components. You can
use tools such as IIS Lockdown to facilitate this task.
n If the application itself is composed of any additional custom-written
server extensions developed in native code, consider whether these can be
cc1188..iinndddd 669955 88//1199//22001111 1122::1177::5555 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 696
696 Chapter 18 n Attacking the Application Server
rewritten using managed code. If they can’t, ensure that additional input
validation is performed by your managed-code environment before it is
passed to these functions.
n Many functions and resources that you need to retain can often be renamed
from their default values to present an additional barrier to exploitation. Even
if a skilled attacker may still be able to discover the new name, this obscu-
rity measure defends against less-skilled attackers and automated worms.
n Apply the principle of least privilege throughout the technology stack. For
example, container security can cut down the attack surface presented to
a standard application user. The web server process should be confi gured
to use the least powerful operating system account possible. On UNIX-
based systems, a chrooted environment can be used to further contain
the impact of any compromise.
Monitor for New Vulnerabilities
Someone in your organization should be assigned to monitor resources such
as Bugtraq and Full Disclosure for announcements and discussions about new
vulnerabilities in the software you are using. You can also subscribe to various
private services to receive early notifi cation of known vulnerabilities in soft-
ware that have not yet been publicly disclosed. Often, if you know the technical
details of a vulnerability, you can implement an effective work-around pending
release of a full fi x by the vendor.
Use Defense-in-Depth
You should always implement layers of protection to mitigate the impact of a
security breach within any component of your infrastructure. You can take vari-
ous steps to help localize the impact of a successful attack on your web server.
Even in the event of a complete compromise, these may give you suffi cient time
to respond to the incident before any signifi cant data loss occurs:
n You can impose restrictions on the web server’s capabilities from other,
autonomous components of the application. For example, the database
account used by the application can be given only INSERT access to the tables
used to store audit logs. This means that an attacker who compromises the
web server cannot delete any log entries that have already been created.
n You can impose strict network-level fi lters on traffi c to and from the web
server.
n You can use an intrusion detection system to identify any anomalous
network activity that may indicate that a breach has occurred. After com-
promising a web server, many attackers immediately attempt to create
cc1188..iinndddd 669966 88//1199//22001111 1122::1177::5555 PPMM
96 Stuttard c18.indd V2 - 07/28/2011 Page 697
Chapter 18 n Attacking the Application Server 697
a reverse connection to the Internet or scan for other hosts on the DMZ
network. An effective IDS will notify you of these events in real time,
enabling you to take measures to arrest the attack.
Web Application Firewalls
Many applications are protected by an external component residing either on
the same host as the application or on a network-based device. These can be
categorized as performing either intrusion prevention (application fi rewalls) or
detection (such as conventional intrusion detection systems). Due to similarities
in how these devices identify attacks, we will treat them fairly interchangeably.
Although many would argue that having these is better than nothing at all, in
many cases they may create a false sense of security in the belief that an extra
layer of defense implies an automatic improvement of the defensive posture.
Such a system is unlikely to lower the security and may be able to stop a clearly
defi ned attack such as an Internet worm, but in other cases it may not be improv-
ing security as much as is sometimes believed.
Immediately it can be noted that unless such defenses employ heavily custom-
ized rules, they do not protect against any of the vulnerabilities discussed in
Chapters 4 through 8 and have no practical use in defending potential fl aws in
business logic (Chapter 11). They also have no role to play in defending against
some specifi c attacks such as DOM-based XSS (Chapter 12). For the remaining
vulnerabilities where a potential attack pattern may be exhibited, several points
often diminish the usefulness of a web application fi rewall:
n If the fi rewall follows HTTP specifi cations too closely, it may make
assumptions about how the application server will handle the request.
Conversely, fi rewall or IDS devices that have their origins in network-
layer defenses often do not understand the details of certain HTTP
transmission methods.
n The application server itself may modify user input by decoding it, add-
ing escape characters, or fi ltering out specifi c strings in the course of
serving a request after it has passed the fi rewall. Many of the attack steps
described in previous chapters are aimed at bypassing input validation, and
application-layer fi rewalls can be susceptible to the same types of attacks.
n Many fi rewalls and IDSs alert based on specifi c common attack pay-
loads, not on the general exploitation of a vulnerability. If an attacker
can retrieve an arbitrary fi le from the fi lesystem, a request for /manager/
viewtempl?loc=/etc/passwd is likely to be blocked, whereas a request
to /manager/viewtempl?loc=/var/log/syslog would not be termed an
attack, even though its contents may be more useful to an attacker.
cc1188..iinndddd 669977 88//1199//22001111 1122::1177::5555 PPMM
Stuttard c18.indd V2 - 07/28/2011 Page 698
698 Chapter 18 n Attacking the Application Server
At a high level, we do not need to distinguish between a global input vali-
dation fi lter, host-based agent, or network-based web application fi rewall. The
following steps apply to all in equal measure.
HACK STEPS
The presence of a web application fi rewall can be deduced using the following
steps:
1. Submit an arbitrary parameter name to the application with a clear attack
payload in the value, ideally somewhere the application includes the
name and/or value in the response. If the application blocks the attack,
this is probably due to an external defense.
2. If a variable can be submitted that is returned in a server response, sub-
mit a range of fuzz strings and encoded variants to identify the behavior
of the application defenses to user input.
3. Confirm this behavior by performing the same attacks on variables within
the application.
You can try the following strings to attempt to bypass a web application
fi rewall:
1. For all fuzzing strings and requests, use benign strings for payloads that
are unlikely to exist in a standard signature database. Giving examples of
these is, by definition, not possible. But you should avoid using
/etc/passwd or /windows/system32/config/sam as payloads for file
retrieval. Also avoid using terms such as  in an XSS attack and
usingalert() or xss as XSS payloads.
2. If a particular request is blocked, try submitting the same parameter in a
different location or context. For instance, submit the same parameter
in the URL in a GET request, within the body of a POST request, and within
the URL in a POST request.
3. On ASP.NET, also try submitting the parameter as a cookie. The API
Request.Params[“foo”] retrieves the value of a cookie named foo if
the parameter foo is not found in the query string or message body.
4. Review all the other methods of introducing user input provided in
Chapter 4, choosing any that are unprotected.
5. Determine locations where user input is (or can be) submitted in a nonstan-
dard format such as serialization or encoding. If none are available, build
the attack string by concatenation and/or by spanning it across multiple
variables. (Note that if the target is ASP.NET, you may be able to use HPP to
concatenate the attack using multiple specifications of the same variable.)
Many organizations that deploy web application fi rewalls or IDSs do not have
them specifi cally tested according to a methodology like the one described in this
section. As a result, it is often worth persevering in an attack against such devices.
cc1188..iinndddd 669988 88//1199//22001111 1122::1177::5566 PPMM
98 Stuttard c18.indd V2 - 07/28/2011 Page 699