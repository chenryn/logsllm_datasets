# Data Exfiltration in the Face of CSP

**Authors:**
- Steven Van Acker
- Daniel Hausknecht
- Andrei Sabelfeld

## Abstract
Cross-Site Scripting (XSS) attacks continue to pose a significant threat to web security. Content Security Policy (CSP), supported by most modern browsers, aims to mitigate XSS by restricting the features and communication capabilities of code on a web page. This paper examines the problem of data exfiltration in the context of CSP. We highlight the disagreement within the security community regarding CSP's role in preventing data leaks. As a result of this discord, we identify insecurities in existing protection mechanisms that are based on flawed assumptions about CSP. To illustrate the practical impact, we conduct a systematic case study of data exfiltration via DNS and resource prefetching in the presence of CSP. Our analysis of popular browsers shows that it is often possible to exfiltrate data through both methods, even with CSP in place. Additionally, we perform a large-scale crawl of the top 10,000 Alexa domains to assess the coexistence of CSP and prefetching. Finally, we discuss potential solutions to control data exfiltration and propose measures ranging from immediate client-side fixes to prefetching-aware extensions of CSP.

### CCS Concepts
- **Security and Privacy:** Browser security, Web protocol security, Web application security

### Keywords
- Content Security Policy (CSP)
- Data exfiltration
- DNS prefetching
- Resource prefetching
- Large-scale study
- Web browser

## 1. Introduction
Cross-Site Scripting (XSS) attacks remain a prevalent threat to web security. According to the OWASP Top 10 of 2013, content injection and XSS flaws are among the most common security risks in web applications. While XSS can compromise both confidentiality and integrity, this paper focuses on protecting confidentiality, specifically the exfiltration of sensitive information such as personal data, cookies, session tokens, and capability-bearing URLs.

### 1.1 XSS in a Nutshell
XSS attacks typically involve two key steps: injection and exfiltration. The following example illustrates a typical XSS attack:

```html
http://v.com/?name=<script>(new Image()).src="http://evil.com/?" + document.cookie</script>
```

In this scenario, an attacker injects JavaScript into a web page through the "name" URL parameter. When the script executes, it creates an image element with a source URL that includes the web page's cookie. The browser sends the request to the attacker-controlled domain, thereby leaking the cookie.

This example demonstrates the injection (via the "name" URL parameter) and exfiltration (via the image URL) components of XSS. Common mitigation techniques against injection include data sanitization and encoding performed by the server to prevent JavaScript from being injected into HTML.

### 1.2 Focus on Data Exfiltration
Preventing data exfiltration is crucial in several scenarios. It serves as a "last line of defense" when other mechanisms fail to prevent injection in trusted code. It is also essential when sandboxing untrusted JavaScript, where the goal is to incorporate functionality without trusting the code to leak sensitive information.

### 1.3 Content Security Policy (CSP)
CSP is a widely adopted client-side countermeasure against content injection and XSS. It is set up by the server and enforced by the browser to restrict the functionality and communication features of code on the web page. CSP is standardized by the World Wide Web Consortium (W3C) and supported by major web browsers. Efforts to promote CSP adoption are ongoing, with large companies like Google, Facebook, and Twitter leading the way.

CSP mitigates content injection by, for example, disallowing inline scripting by default. In the above example, the injected JavaScript would be prevented from executing under CSP because it appears as inline code. Additionally, CSP allows developers to restrict the sources from which resources can be loaded, making it harder for attackers to exfiltrate data even if they manage to execute code.

### 1.4 Discord on CSP and Data Exfiltration
Despite CSP's promise, there is a significant disagreement in the security community about whether CSP is designed to prevent data exfiltration. The CSP specification only hints at data exfiltration in specific cases, while the original paper introducing CSP explicitly states its intention to prevent data exfiltration. This vagueness has led to misunderstandings, with some researchers assuming CSP prevents data exfiltration and others arguing it does not.

Given the implications of this discord, it is crucial to address it. This paper provides a detailed account of the two views and investigates data exfiltration via DNS and resource prefetching, which are not covered by CSP. We demonstrate that these methods can be used to exfiltrate data, even with the strongest CSP policies in place.

## 2. Data Exfiltration and CSP
### 2.1 Content Security Policy (CSP)
CSP whitelists sources from which a web application can request content, using directives to distinguish between different resource types. For example, the following policy allows resources only from the requested domain and images only from `http://example.com`:

```plaintext
default-src 'self';
img-src http://example.com;
```

CSP disables the `eval()` function and inline scripting by default. CSP 1.1 introduces mechanisms to selectively allow inline scripts based on nonces or hash values. Newer versions refine the policy definition language with additional directives. However, none of the CSP standards cover DNS resolution, making our case study independent of the CSP version.

### 2.2 Discord on Data Exfiltration and CSP
The CSP specification makes a single mention of data exfiltration in the non-normative usage description of the `connect-src` directive. This vagueness has led to a significant disagreement in the academic and practitioner communities about whether CSP can prevent data exfiltration.

The original CSP paper by Mozilla researchers explicitly states the intention to prevent data exfiltration. However, web security experts disagree on whether CSP should protect against data exfiltration. Some argue that stopping data exfiltration is not a goal of CSP, while others believe it is reasonable to aim for some forms of exfiltration prevention.

Academic literature further highlights this discord. For example, Akhawe et al. warn that CSP should not be relied upon to defend against data exfiltration, while other works imply that CSP is intended to mitigate exfiltration. This vagueness has led to defensive frameworks built on partly unfounded assumptions, putting the security community at risk.

To illustrate the practical impact, we investigate data exfiltration via DNS and resource prefetching, which are not covered by CSP.

## 3. Background
### 3.1 Domain Name Service (DNS)
DNS is a crucial part of the web and internet infrastructure, resolving human-readable domain names to numeric IP addresses. The basic architecture of DNS is a distributed database with a hierarchical tree structure. Clients query DNS servers to resolve domain names, as illustrated in Figure 1.

[Figure 1: Recursive and iterative DNS resolution of www.example.com.]

### 3.2 Resource Prefetching
Resource prefetching is a technique used by browsers to preemptively retrieve and cache resources from web servers. This can improve performance but can also be exploited for data exfiltration.

## 4. Case Study: Prefetching in the Face of CSP
We examine how DNS and resource prefetching can be used to exfiltrate data, even with the strictest CSP policies in place. For example, the following code can exfiltrate a cookie using automatic DNS prefetching, despite a strict CSP policy:

```javascript
document.write("<link rel='dns-prefetch' href='http://evil.com/?cookie=" + document.cookie + "'>");
```

Additionally, we demonstrate that various types of resource prefetching can be used to exfiltrate data, allowing attackers to establish a two-way communication channel with the JavaScript environment of a supposedly isolated web page.

Our analysis of popular desktop and mobile browsers shows that all tested browsers are vulnerable to these attacks, with one browser allowing it conditionally. Although previous work has noted data leaks through prefetching, we provide a systematic study of the entire class of prefetching attacks, analyze various browser implementations, and propose countermeasures.

## 5. Contributions
- **Highlighting Discord:** Bringing attention to the key design-level discord on whether CSP is fit for data exfiltration prevention.
- **Systematization of Attacks:** Providing a comprehensive analysis of DNS and resource prefetching as data exfiltration techniques.
- **Browser Vulnerability Study:** Conducting a study of popular browsers to determine their vulnerability to these attacks.
- **Measurement of Prevalence:** Measuring the prevalence of DNS and resource prefetching in combination with CSP on the top 10,000 Alexa domains.
- **Proposed Countermeasures:** Proposing solutions to control data exfiltration, including specific fixes and a prefetching-aware extension to CSP.

## 6. Conclusion
This paper addresses the critical issue of data exfiltration in the context of CSP, highlighting the discord in the security community and the practical vulnerabilities in current browser implementations. By providing a systematic study and proposing countermeasures, we aim to advance the state of the art in web security and contribute to the ongoing efforts to enhance CSP.