CobaltStrike  
0x00  
C2
@L.N
TeamServerCS
TeamServer
CobaltStrike 4.3 DoS
C2
0x01 + 
1.  
 teamserver   50050 
java -XX:ParallelGCThreads=4 -Dcobaltstrike.server_port=55555 -Dcobaltstrike.ser
ver_bindto=0.0.0.0 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl
.keyStorePassword=123456 -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpa
th cobaltstrike.jar -Duser.language=en -javaagent:CSAgent.jar=3a4425490f389aeec3
12bdd758ad2b99 server.TeamServer $*
2.  
# Outlook
keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey
 -keyalg RSA -alias cobaltstrike -dname "CN=Outlook.live.com, OU=Microsoft Corporation
# 360
keytool -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -
keyalg RSA -alias 360.com -dname "CN=US, OU=360.com, O=Sofaware, L=Somewhere, ST
=Cyberspace, C=CN"
# baidu
keytool -keystore cobaltStrike.store -storepass 123456 -keypass 123456 -genkey -
keyalg RSA -alias baidu.com -dname "CN=ZhongGuo, OU=CC, O=CCSEC, L=BeiJing, ST=C
haoYang, C=CN"
# 
keytool -importkeystore -srckeystore cobaltstrike.store -destkeystore cobaltstri
ke.store -deststoretype pkcs12
PS: 
3. HTTPS 
3.1  Let's Encrypt  
 HTTPsC2DoneRight.sh  HTTPS  @
  func_install_letsencrypt  
func_install_letsencrypt(){   
echo '[Starting] cloning into letsencrypt!'   
# git clone https://github.com/certbot/certbot /opt/letsencrypt   
echo '[Success] letsencrypt is built!'   
# cd /opt/letsencrypt   
echo '[Starting] to build letsencrypt cert!'   
certbot --apache -d $domain -n --register-unsafely-without-email --agree-tos
if [ -e /etc/letsencrypt/live/$domain/fullchain.pem ]; then
    echo '[Success] letsencrypt certs are built!'   
else     
    echo "[ERROR] letsencrypt certs failed to build.  Check that DNS A recor
d is properly configured f    
    exit 1   
fi 
} 
sudo apt install -y git lsof snap
sudo snap install core; sudo snap refresh core
sudo apt remove certbot
sudo snap install certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
wget https://raw.githubusercontent.com/killswitch-GUI/CobaltStrike-ToolKit/maste
r/HTTPsC2DoneRight.sh && chmod +x HTTPsC2DoneRight.sh
 amazon.profile  domain.store 
amazon.profile  teamserver  
cobaltstrike.store  domain.store
3.2  cloudflare  
pemkey.pemchain.pem
cobaltstrike 
1. domain.store 
openssl pkcs12 -export -in /api.domain.com/chain.pem -inkey /api.xxx.com/key.pem
 -out api.domain.com.p12 -name api.domain.com -passout pass:123456
keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore 
api.domain.com -srckeystore api.domain.com.p12 -srcstoretype PKCS12 -srcstorepas
s 123456 -alias api.domain.com
2.  teamserver   cobaltstrike.store  api.domain.com.store
3. c2.profile  https 
https-certificate {
     set keystore "api.domain.com.store";
     set password "123456";
}
3.3  "zerossl" "letsencrypt" "buypass" "sslcom"  
1.  https://secure.ssl.com/users/new 
2.  acme.sh 
# RSA
acme.sh --register-account --server sslcom -m PI:EMAIL --eab-kid 7
a7xxxxxx7e1 --eab-hmac-key h
# ECC
acme.sh --register-account --server sslcom -m PI:EMAIL --eab-kid 7
a7xxxxxx7e1 --eab-hmac-key hEAxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxGzs --ecc
# sslcom
acme.sh --issue --dns dns_cf -d sslcom-demo.scotthelme.co.uk --force --keylength
 ec-256 --server sslcom
#!/bin/bash
#!/bin/bash
set -e
SERVERS=("zerossl" "letsencrypt" "buypass" "sslcom")
/home/scott/acme.sh/acme.sh --issue --dns dns_cf -d homeassistant.scotthelme.co.
uk --force --keylength ec-256 --server $(shuf -n1 -e "${SERVERS[@]}")
 3.2 
0x02  C2 Profiles  
1. github C2 Profile
Awesome-CobaltStrikeC2 Profile malleable-c2
jquery-c2.4.3.profilejquery
2. Malleable-C2-Randomizer
4 C2 Profile 
 4.3/4.4) 
python malleable-c2-randomizer.py -profile Sample\ Templates/pandora.profile -no
test
 payload  spawn  post-ex  spawn 
mstsc.exe 
post-ex {
    set spawnto_x86 "%windir%\\syswow64\\mstsc.exe";
    set spawnto_x64 "%windir%\\sysnative\\mstsc.exe";
}
PS:  @  CloudFront  Cobalt Strike 
 C2 Profile ()
3. random_c2_profile
cs4.4
python random_c2profile.py
https
4. SourcePoint
yaml
5. C2 v1.0 ()
 link:
https://www.red-team.cn/index.php?tools
0x03  CobaltStrike Stage URI  
Beacon Staging ServerPayload
payloadstagerpayloadBeacon staging server
stagestageURLchecksum8
c2 profilehttp-stagestage beacon
(false)checksum8
1. iptables 
IPlistener
# 47.xx.xx.xx443
iptables -I INPUT -p tcp --dport 443 -j DROP 
iptables -I INPUT -s 47.xx.xx.xx -ptcp --dport 443 -j ACCEPT
listener HTTPS Port(bind) target
stager
iptables -A INPUT -s 127.0.0.1 -p tcp --dport 4443 -j ACCEPT
iptables -A INPUT -p tcp --dport 4443 -j DROP
iptablesiptablse-save
iptables-save > /etc/iptables.rules
 /etc/network/interfaces  
pre-up iptables-restore > amazon.profile
  echo 'https-certificate {' >> amazon.profile
  echo   set keystore \"$domainStore\"\; >> amazon.profile
  echo   set password \"$password\"\; >> amazon.profile
  echo '}' >> amazon.profile
  echo '[Success] amazon.profile updated with HTTPs settings.'
}
# Menu Case Statement
case $1 in
  *)
  func_check_env
  func_check_tools
  func_build_pkcs
  func_build_c2
  ;;
esac
profile
./teamserver 192.168.142.1 123456 amazon.profile
 listener  cloudflare 
cdn 
#!/bin/bash
# IPv4HTTP/S
iptables -I INPUT -p tcp –dport 80 -j DROP
iptables -I INPUT -p tcp –dport 443 -j DROP
# Cloudflare CDN IPv4HTTP/S
for i in `curl https://www.cloudflare.com/ips-v4`; do iptables -I INPUT -s $i -p
 tcp –dport 80 -j ACCEPT; done
for i in `curl https://www.cloudflare.com/ips-v4`; do iptables -I INPUT -s $i -p
 tcp –dport 443 -j ACCEPT; done
# IPv6HTTP/S
ip6tables -I INPUT -p tcp –dport 80 -j DROP
ip6tables -I INPUT -p tcp –dport 443 -j DROP
# Cloudflare CDN IPv6HTTP/S
for i in `curl https://www.cloudflare.com/ips-v6`; do ip6tables -I INPUT -s $i -
p tcp –dport 80 -j ACCEPT; done
for i in `curl https://www.cloudflare.com/ips-v6`; do ip6tables -I INPUT -s $i -
p tcp –dport 443 -j ACCEPT; done
# iptables
iptables-save
ip6tables-save
Cloudflare 
HTTP
80,8080,8880,2052,2082,2086,2095
HTTPS
443,2053,2083,2087,2096,8443
 teamserver (: 54321)iptables
localhost (: 54321)VPN(: OPENVPN)
teamserver VPN
0x05 server 
JA3/S & JARM
teamserver
C2
:
teamserver 192.168.146.1 proxy server 192.168.146.3 target 192.168.146.5
1.  
listener
sudo apt install socat
socat TCP4-LISTEN:80,fork TCP4:192.168.146.1:80 &
socat TCP4-LISTEN:443,fork TCP4:192.168.146.1:443 &
...
#  netstat -pantu | grep socat kill PID 
listenerIP
2.  apache/nginx 
 : 1.
https://kosakd.top/2021/05/05/CobaltStrike%E6%95%99%E7%A8%8B/ 2.
3. RedWarden 
RedWardenCobalt Strike C2
CobaltStrikeMalleable
EDR
RedWardenHTTP/HTTPSC2 HTTP
TeamserverApache2mod_rewrite
.htaccess
RedWardenC2IR/AV/EDRs/
Apache2+mod_rewrite
TCP
/
0x01
pem
mkdir -p ~/ssl/demoCA/{certs,newcerts,crl,private}
cd ~/ssl/demoCA
touch index.txt
echo "01" > serial
sudo cp /etc/ssl/openssl.cnf ~/ssl/openssl.cnf
vi ~/ssl/openssl.cnf
cd ~/ssl/
openssl req -new -x509 -newkey rsa:4096 -keyout cakey.key -out cacert.crt -confi
g openssl.cnf -days 365
# 
openssl rsa -noout -text -in cakey.key
# 
openssl x509 -noout -text -in cacert.crt
RedWarden
#
# SSL certificate CAcert (pem, crt, cert) and private key CAkey
#
ssl_cacert: /home/kali/ssl/cacert.crt
ssl_cakey: /home/kali/ssl/cakey.key
profile https://www.red-
team.cn/index.php?tools
profile: test.profile
port:
  - 8443/https
teamservercobaltstrikelistener
teamserver_url: 
  - https://192.168.146.1:443
drop_action: redirect
action_url: 
  - https://outlook.live.com/
outlookprofile
outlookoutlook
artfact