08053480  2e 30 2e 31 31 00 00 00  00 00 00 00 00 00 00 00
08053490  47 45 54 00 00 00 00 00  2f 00 00 00 00 00 00 00
080534a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  
*
08053910  00 00 00 00 00 00 00 00  57 67 65 74 2f 31 2e 31
08053920  30 2e 32 00 00 00 00 00  00 00 00 00 00 00 00 00 
08053930  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
*
08053990  00 00 00 00 00 00 00 00  c8 00 00 00 00 00 00 00 
080539a0  00 00 00 00 00 00 00 00  00 00 43 6c 6f 73 65 00
080539b0  00 00 00 00 00 00 00 00  00 00 00 00 52 00 00 00
080539c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
*
08053a90  48 54 54 50 2f 31 2e 30  00 00 00 00 00 00 00 00 
08053aa0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
*
08053b20  74 65 78 74 2f 68 74 6d  6c 00 00 00 00 00 00 00 
08053b30  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
*
08063ba0  01 00 01 00 01 00 00 00  00 00 00 00 00 00 00 00
08063bb0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
*
...
Figure 3. Part of a memory dump from null(cid:173)httpd
a sockaddr structure. The last ﬁeld (with offset +40)
denotes another heap structure whose allocation site is
0x0804ddfb. Transitively, our method reconstructs the
entire hierarchy.
The extraction of IP addresses is translated into a
traversal over the view to identify those with the IP ad-
dress semantic tags. Along the path 08050260 →
08052170 → 7e9200...0 → 0x0b0000a ,
a variable with the sin addr type can be identiﬁed,
which stores the client IP. The same IP can also be iden-
tiﬁed along the path 08050260 → 08052170 →
08052a58 → 10.0.0.11 , with the ﬁeld offset
+2596. The ﬁeld has the ip addr str t tag, which is
resolved at the return of a call to inet ntoa(). RE-
WARDS is able to isolate the server IP 10.0.0.4 as a
string along the path 08050260 → 08051170 →
10.0.0.4 with the ﬁeld offset +1172.
Interestingly,
this ﬁeld does not have a semantic tag related to an IP
address. The reason is that the ﬁeld is simply a part of the
request string (the host ﬁeld in HTTP Request Message),
but it is not used in any type sinks that can resolve it as an IP.
However, isolating the string also allows a human inspector
to extract it as an IP.
To validate our result, we present in Figure 4(b) the
corresponding symbolic deﬁnitions extracted from the
source for comparison.
Fields that are underlined are
used during execution. In particular, struct CONNECTION
corresponds to the abstraction struct 0x0804dd4f
(node 08052170 ) and struct CONNDATA corresponds
to struct 0x0804ddfb (node 08052a58 ). Observe
that all ﬁelds of CONNECTION are precisely derived, except
the pointer PostData, which is represented as an unused
array in the inferred deﬁnition because the ﬁeld is not used
during execution. For the CONNDATA structure, all the
exercised ﬁelds are extracted and correctly typed. Recall
that we consider a ﬁeld is correctly typed if its offset is
correctly identiﬁed and its composition bytes are either
correctly typed or unused.
5.1.2 Typing Dead Memory
In this case, we demonstrate how to type dead memory,
i.e., memory regions containing dead variables, using the
slapper worm bot-master program. Slapper worm relies on
P2P communications. The bot-master uses a program called
pudclient to control the P2P botnet, such as launching
TCP-ﬂood, UDP-ﬂood, and DNS-ﬂood attacks. Our goal is
to extract evidence from a memory dump of pudclient
from the attacker’s machine.
Our experiment has two scenes: the investigator’s scene
and the attacker’s scene. More speciﬁcally,
• Scene I: In the lab, the investigator runs the bot-master
program pudclient to communicate with slapper
bots to derive the data structures of pudclient.
• Scene II: In the wild, the attacker runs pudclient to
control real slapper bots.
In Scene I, we run a number of slapper worm in-
stances in a contained environment (at IP addresses rang-
ing from 10.0.0.1 - 10.0.1.255). Then we launch
pudclient with REWARDS and issue a series of
commands such as listing the compromised hosts, and
launching the UDPFlood, TCPFlood, and DNSFlood at-
tacks. REWARDS extracts the data structure deﬁnitions for
pudclient. Then in Scene II, we run pudclient again
without REWARDS. Indeed, the attacker’s machine does
not have any forensics tool running. Emulating the attacker,
we issue some commands and then hibernate the machine.
We then get the memory image of pudclient and use the
data structure information derived in Scene I to investigate
the image.
08050260
struct _0x0804dd4f *
08052170
+0(cid:9)pthread_t
+4(cid:9)int
b7fe5bb0
b7fe5bb0
+8(cid:9)socket
00000005
+12(cid:9)struct sockaddr
7e920002 0b00000a 0...0
+28(cid:9)time_t
+32(cid:9)time_t
+36(cid:9)unused [4]
+40(cid:9)struct _0x0804ddfb *
4aafb0c7
4aafb0c7
00000000
08052a58
sin_family
sin_port
sin_addr
sin_zero
+0(cid:9)char [11]
+11(cid:9)unused [1161]
+1172(cid:9)char [9]
+1181(cid:9)unused [247]
+1428(cid:9)char [9]
+1437(cid:9)unused [1159]
+2596(cid:9)ip_addr_str_t
+2606(cid:9)unused [10]
+2616(cid:9)char [4]
0002
7e92
0b00000a
0...0
Keep−Alive
0...0
10.0.0.4
0...0
HTTP/1.0
0...0
10.0.0.11
0...0
GET
+2620(cid:9)unused [4]
00000000
+2624(cid:9)char [2]
+2626(cid:9)unused [1150]
/
0...0
+3776(cid:9)char [12]
Wget/1.10.2
+3788(cid:9)unused [116]
+3904(cid:9)short int
+3906(cid:9)unused [16]
+3922(cid:9)char [6]
+3928(cid:9)unused [12]
+3940(cid:9)int
+3944(cid:9)unused [208]
+4152(cid:9)char [9]
+4161(cid:9)unused [135]
+4296(cid:9)char [10]
+4306(cid:9)unused [65654]
+69960(cid:9)(cid:9)short int
+69962(cid:9)(cid:9)short int
+69964(cid:9)(cid:9)short int
+69966(cid:9)(cid:9)unused [8192]
0...0
00c8
0...0
Close
0...0
00000052
0...0
HTTP/1.0
0...0
text/html
0...0
0001
0001
0001
0...0
    180 typedef struct {
181     pthread_t handle;
182     unsigned long int id;
183     short int socket;
184     struct sockaddr_in ClientAddr;
185     time_t ctime; // Creation time
186     time_t atime; // Last Access time
    187     char *PostData;
188     CONNDATA *dat;
    189 } CONNECTION; 
206 CONNECTION *conn;  //matched the root node
    143 typedef struct {
    144     // incoming data
145     char in_Connection[16];
    146     int  in_ContentLength;
    147     char in_ContentType[128];
    148     char in_Cookie[1024];
149     char in_Host[64];
    150     char in_IfModifiedSince[64];
    151     char in_PathInfo[128];
152     char in_Protocol[16];
    153     char in_QueryString[1024];
    154     char in_Referer[128];
155     char in_RemoteAddr[16];
    156     int  in_RemotePort;
157     char in_RequestMethod[8];
158     char in_RequestURI[1024];
    159     char in_ScriptName[128];
160     char in_UserAgent[128];
    161     // outgoing data
162     short int out_status;
    163     char out_CacheControl[16];
164     char out_Connection[16];
165     int  out_ContentLength;
    166     char out_Date[64];
    167     char out_Expires[64];
    168     char out_LastModified[64];
    169     char out_Pragma[16];
170     char out_Protocol[16];
    171     char out_Server[128];
172     char out_ContentType[128];
    173     char out_ReplyData[MAX_REPLYSIZE];
174     short int out_headdone;
175     short int out_bodydone;
176     short int out_flushed;
    177     // user data
    178     char envbuf[8192];
    179 } CONNDATA;
(a) Hierarchical view from REWARDS
(b) Data structure deﬁnition
Figure 4. Comparison between the REWARDS(cid:173)derived hierarchical view and source code deﬁnition
bfffd140  05 00 00 00 6b 00 00 00  69 00 00 00 00 00 00 00
bfffd150  00 00 00 00 38 ea ff bf  00 00 00 00 00 00 00 01
bfffd160  2c 00 00 00 67 45 8b 6b  0e 00 00 00 00 00 00 00
bfffd170  0a 00 00 63 0f 27 00 00  9f 86 01 00 9f 86 01 00
bfffd180  1c ea ff bf 10 ea ff bf  6a f2 b2 4a 7a 4a 0e 00
bfffd190  22 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
bfffd1a0  6a f2 b2 4a 7a 4a 0e 00  f2 f3 8d 8c 00 00 00 00
bfffd1b0  00 00 00 00 00 00 00 00  01 00 00 00 02 00 00 00
bfffd1c0  64 6e 73 66 6c 6f 6f 64  00 00 00 00 00 00 00 00
bfffd1d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
*
bfffd5c0  c0 d1 ff bf 00 00 00 00  02 ca 04 08 00 00 00 00
bfffd5d0  00 00 00 00 00 00 00 00  02 ca 04 08 02 ca 04 08
bfffd5e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
bfffd5f0  00 00 00 00 00 00 00 00  00 00 00 00 04 d6 ff bf
bfffd600  64 6e 73 66 6c 6f 6f 64  00 00 00 00 00 00 00 00
bfffd610  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
*
bfffe5b0  00 00 00 00 00 00 00 00  0e 00 00 00 00 00 00 00 
bfffe5c0  00 00 00 00 02 00 4e 34  0a 00 00 0b 00 00 00 00 
bfffe5d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
bfffe5e0  00 00 00 00 00 00 00 00  00 00 00 00 e0 f5 ff bf
bfffe5f0  a0 2d 05 08 e0 f5 ff bf  a0 13 05 08 00 00 00 00 
bfffe600  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00
*
bfffea00  00 00 00 00 00 00 00 00  00 00 00 00 10 ea ff bf 
bfffea10  01 00 00 00 00 00 00 00  e5 de f2 49 46 00 00 00 
bfffea20  67 45 8b 6b 10 00 00 00  e8 be e6 71 0a 00 00 34
bfffea30  0a 00 01 33 0a 00 00 0b 0a 00 00 04 00 00 00 00 
bfffea40  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
*
...
bffff5c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
bffff5d0  01 00 00 00 80 00 00 00  80 00 00 00 ff f7 ff bf
bffff5e0  00 00 00 00 00 00 00 00  f3 f7 ff bf 67 45 8b 6b 
bffff5f0  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 
bffff600  01 00 00 00 c0 f6 ff bf  28 f6 ff bf fb c7 04 08
bffff610  02 00 00 00 dc 3a 1f b6  d4 df 04 08 dc 3a 1f b6 
bffff620  00 00 00 00 dc 3a 1f b6  88 f6 ff bf a2 de 0d b6
bffff630  02 00 00 00 b4 f6 ff bf  c0 f6 ff bf f6 5b ff b7 
Figure 5. Memory dump for Slapper worm control program when exiting the control interface
We construct the hierarchical view and try to identify IP
addresses from the view. However, the hierarchical view
can only map the memory locations that are alive, namely
they are reachable from global and stack (pointer) variables.
Here, we take an extra step to type the dead (unreachable)
data. As described in Section 3.5, our technique scans
the stack space lower than the current (the lowest and
live) activation record and looks for values that are in the
range of the code section, as they are very likely return
addresses. Four such values are identiﬁed. One example
and its memory context is shown in Figure 5.
In this
memory dump snippet, the return address, as underlined,
is located at address 0xbffff62c. Our technique further
identiﬁes that the corresponding function invocation is to
0x0804a708. Hence, we use the data structure deﬁnition
of fun 0x0804a708 to type the activation record. The
deﬁnition and the typed values are shown in Table 3.
Observe that a number of IPs (ﬁelds with ip addr t) are
identiﬁed. We also spot the bot command “dnsflood”
at -9324 and -8236. Note that these two ﬁelds have the
input t tag as part of their derived deﬁnition, indicating
they hold values from input.
5.2 Vulnerability Fuzz
It is a challenging task to detect and conﬁrm vulner-
abilities in a given binary without symbolic information.
Previously in [26], we have proposed a dynamic analysis
approach that can decide if a vulnerability suspect is true
positive by generating a concrete exploit. The basic idea
is to ﬁrst use existing static tools to identify vulnerability
candidates, which are often of large quantity; then benign
executions are mutated to generate exploits. Mutations
are directed by dynamic information called input lineage,
which denotes the set of input elements that is used to
compute a value at a given execution point, usually a
vulnerability candidate. Vulnerability-speciﬁc patterns are
followed during mutation. One example pattern is to
exponentially expand an input string in the lineage of a
candidate buffer with the goal of generating an overﬂow
exploit. In that project, we had difﬁculty ﬁnding publicly
available, binary-level vulnerability detectors to use as the
front end. REWARDS helps address this issue by deriving
both variable syntax and semantics from a subject binary.
Next, we present our experience of using REWARDS to
identify vulnerability suspects and then using our prior
system (a fuzzer) to conﬁrm them.
For this study, we design a static vulnerability suspect
detector that relies on the variable type information derived
by REWARDS. The result of the detector is passed to our
lineage-based fuzzer to generate exploits. In the following,
we present how REWARDS helps identify various types of
vulnerability suspects.
• Buffer overﬂow vulnerability.
Buffer overﬂows
could happen in three different places: stack, heap,
and global areas. As such, we deﬁne three types of
buffer overﬂow vulnerability patterns. Speciﬁcally,
for stack overﬂow, if a stack layout contains a buffer
and its content comes from user input, we consider
it a suspect. Note that this can be easily facilitated
by REWARDS’s typing algorithm: A semantics tag
input t is deﬁned to indicate that a variable re-
ceives its value from external input. The tag is only
susceptible to the forward ﬂow but not the backward
ﬂow.
In the stack layout derived by REWARDS, if
a buffer’s type set contains an input t tag, it is
considered vulnerable. For heap overﬂow, we consider
two cases: one is to exploit heap management data
structure outside the user-allocated heap chunk; and
the other is to exploit user-deﬁned function pointers
inside the heap chunk. Detecting the former case is
simply to check if a heap structure contains a buffer
Offset
-9432
-9428
-9420
-9416
-9412
-9408
-9404
-9300
-9396
-9392
-9388
-9384
-9376
-9368
-9352
-9348
-9344
-9332
-9328
Type
void*
char*
int
int
int
int
ip addr t
port t
int
int
void*
void*
timeval.tv sec