# Return the wrapper so this can be used as a decorator via partial()
return self.storage.get(food)
if kwargs.get('username') !='admin':
raise Exception("This user is not allowed to get food")
pass
本电子书仅限学习交流使用，请勿用于商业用途
**kwargs):
创建装饰器很不方便，所以 functools 提供了名为
7.1创建装饰器
7
---
## Page 105
熊猫爱中国www.xiongmaoi.com
示例7.5Python2的方法
了什么。在Python 2中情况如示例7.5 所示，在 Python3中情况如示例7.6所示。
道方法背后的运行机制。
这意味着我们的装饰器不必检查参数 username 是基于位置的参数还是关键字参数，而只
需在字典中查找即可。
示例7.4使用 inspect 获取函数参数
7.2
98
方法是指作为类属性保存的函数。让我们来看一下当直接访问这样一个属性时到底发生
>>>class Pizza(object):
在此之前你可能已经写过很多方法但从未多想，但为了理解装饰器的行为，你就需要知
def get_food(username, type='chocolate'):
@check_is_admin
def check_is_admin(f):
import inspect
import functools
第7章方法和装饰器
Python中方法的运行机制
return type t" nom nom nom!"
return wrapper
@functools.wraps(f)
definit(self,size):
return f(*args,
if func_args.get('username') != 'admin':
func_args = inspect.getcallargs(f, *args, **kwargs)
def get_size(self):
self.size = size
return self.size
 raise Exception("This user is not allowed to get food")
本电子书仅限学习交流使用，请勿用于商业用途
**kwargs)
---
## Page 106
熊猫爱中国www.xiongmaoi.com
熊图调用它的话，Python会抛出错误（在Python2中情况如示例7.7所示，在Python3中情况
以传入任何对象，只要它包含方法期望的属性：
必需的 self 参数。这使得 Python3更加灵活，不仅可以向方法传入该类的任意实例，还可
示例7.8在 Python 3 中调用未绑定的 get_size
first argument (got nothing instead)
示例7.7在Python 2 中调用未绑定的 get_size
如示例7.8所示）。
示例7.6Python3的方法
Python2中拒绝该方法调用是因为它是未绑定的。Python3允许调用，但会提示未提供
TypeError: get _size() missing 1 required positional argument: 'self'
Traceback （most recent call last):
>>>Pizza.get_size()
TypeError: unbound method get_size() must be called with Pizza instance as
Traceback (most recent call last):
>>>Pizza.get_size()
两种情况的本质是一样的：get_size是一个并未关联到任何特定对象的函数，如果试
Python3中已经完全删除了未绑定方法这个概念，它会提示 get_size 是一个函数。
Python 2 会提示 get_size 属性是类 Pizza 的一个未绑定方法。
File""，line1，in 
File “"，line1,in
>>>Pizza.get_size
>>> class Pizza(object):
>>> Pizza.get_size
def get_size(self):
return self.size
self.size = size
本电子书仅限学习交流使用，请勿用于商业用途
7.2
Python 中方法的运行机制
6
---
## Page 107
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
示例7.10@staticmethod的用法
7.3
但是想知道它被绑定到了哪个对象，可以查看方法的_self_属性：
自动设置为 Pizza 的实例。下面是一个更好的例子：
示例7.9调用绑定的 get_size
参数，如示例7.9所示。
任何 Pizza 访问 get_size 方法，进一步说，Python 会自动将对象本身传给方法的 self
100
class Pizza(object):
静态方法是属于类的方法，但实际上并非运行在类的实例上。具体见示例7.10.
显然，仍然可以保持对对象的引用，并随时在需要的时候访问它。
>>> m == m._self.get_size
.(=>>m()
>>> m = Pizza(42) .get_size
不出所料，不需要传入任何参数给 get_size，因为它是绑定方法：它的 self 参数会
>>> Pizza(42) .get_size()
>>> Pizza(42) .get_size
所以 Python 通过将类的方法绑定给实例为我们完成了后续工作。换句话说，可以通过
尽管不太方便，但它能运行：每次调用类的一个方法都要对该类进行引用。
42
>>> Pizza.get_size(Pizza(42))
True
42
静态方法
第7章方法和装饰器
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 108
熊猫爱中国www.xiongmaoi.com
7.4
数但不会真地使用它。装饰器@staticmethod 提供了以下几种功能。
>
>>> Pizza.get_radius
>>>class Pizza(object):
类方法是直接绑定到类而非它的实例的方法：
·可以在子类中覆盖静态方法。如果使用一个定义在顶层模块中的
·Python 不必为我们创建的每个 Pizza 对象实例化一个绑定方法。绑定方法也是对
如果愿意的话，可以像非静态方法那样写 mix_ingredients，它会接收 self 作为参
类方法
况下将无法修改对披萨材料的混合方式。
mix_ingredients 函数，那么一个继承自 Pizza 的子类在不重写cook 方法的情
状态。
True
>>> Pizza().mix_ingredients is Pizza().mix_ingredients
True
>>> Pizza().mix_ingredients is Pizza.mix_ingredients
False
>>>Pizza().cookisPizza().cook
象，创建它们是有开销的。使用静态方法可以避免这种开销：
def cook(self):
def mix_ingredients(x, y):
@staticmethod
def get_radius(cls):
radius=42
return x + y
@classmethod
return cls.radius
本电子书仅限学习交流使用，请勿用于商业用途
7.4
类方法
101
---
## Page 109
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
会引发异常。
法类似这样：
15
可用的材料做成的全新Pizza。
Pizza.from_fridge(myfridge)这样调用这个方法，它会返回一个根据 myfridge 中
需要使用这个工厂。
代替，则不得不在方法中硬编码类名 Pizza，使所有继承自 Pizza 的类都无法根据它们的
数将是类本身。（记住，类也是对象。）
102
在这个例子中，提供了工厂方法 from_fridge，可以传入一个Fridge 对象。如果像
类方法对于创建工厂方法最有用，即以特定方式实例化对象。如果用@staticmethod
然而，如果选择访问这个方法，它总是会被绑定在它所附着的类上，而且它的第一个参
任何继承自 Pizza 类的子类都需要实现并重写 get_radius 方法，否则调用这个方法
class Pizza(object):
class Pizza(object):
42
>>>Pizza.get_radius()
>>> Pizza.get_radius is Pizza() .get_radius
>>> Pizza().get_radius
True
抽象方法
第7章
def get_radius():
@staticmethod
def from_fridge(cls, fridge):
@classmethod
def init(self, ingredients):
raise NotImplementedError
 self.ingredients = ingredients
方法和装饰器
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 110
熊猫爱中国www.xiongmaoi.com
元类（metaclass）的声明在Python2和Python3之间产生了变化，因此前面的例子只适用
注意
方法的子类，会得到TypeError:
示例7.12使用 abc 实现抽象方法
于Python2。
法，在试图实例化一个包含抽象方法的对象时会得到警告提示，如示例7.12所示。
示例7.11实现一个抽象方法·
所示。
实现 get_radius 方法，那么只有在运行时调用这个方法时才会抛出错误，如示例 7.11
TypeError: Can't instantiate abstract class BasePizza with abstract methods
Traceback (most recent call last):
>>>BasePizza()
当使用 abc 以及它的特殊类时,如果试图实例化 BasePizza 或其未重写 get_radius
get_radius
o>t>
class BasePizza(object):
如果使用Python内置的abc 模块（http://docs.python.org/2/library/abc.html）实现抽象方
NotImplementedError
Traceback (most recent call last):
>>> Pizza().get_radius ()
File "", line 3, in get_radius
File "", line l, in 
def get_radius(self):
@abc.abstractmethod
"""Method that should do something."...
= abc.ABCMeta
本电子书仅限学习交流使用，请勿用于商业用途
7.5抽象方法
103
---
## Page 111
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
这包括将它们作为类方法或静态方法进行实现：
7.6混合使用静态方法、类方法和抽象方法
行扩展。
104
class DietPizza(BasePizza):
class BasePizza(object):
这里可以任意定义Calzone 的方法，只要仍然支持在基类 BasePizza 中定义的接口。
抽象方法的原型并非一成不变。在实际实现方法的时候，可以根据需要对方法的参数进
import abc
class Calzone(BasePizza):
class BasePizza(object):
这些装饰器各有各的用处，但有时可能会需要同时使用。下面介绍一些相关的小技巧。
import abc
第7章方法和装饰器
def get_ingredients():
@staticmethod
def get_ingredients(self):
@abc.abstractmethod
def get_ingredients(self, with_egg=False):
def get_ingredients(self):
@abc.abstractmethod
return None
return self.ingredients + [egg]
egg = Egg() if with _egg else None
本电子书仅限学习交流使用，请勿用于商业用途
=abc.ABCMeta
=abc.ABCMeta
---
## Page 112
熊猫爱中国www.xiongmaoi.com
熊猫爱
示例7.14通过抽象方法使用 super（）
如示例7.14所示。
中完全没问题！不同于Java，Python 中可以在抽象方法中放入代码并使用 super（）调用它，