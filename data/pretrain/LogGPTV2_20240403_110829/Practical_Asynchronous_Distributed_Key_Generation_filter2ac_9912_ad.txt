2523
Let pi(·) be the degree-t polynomial where
pi(x) = si + ai,1x + ai,2x2 + . . . + ai,txt
(2)
where ai,k ← Zq are chosen at random. Due to the
completeness property of ACSS, once the ith ACSS instance
terminates, all honest nodes output an evaluation point
on pi(·). Each node additionally outputs vi, the Feldman
commitment of pi(·)
vi = [gsi, gai,1, gai,2, . . . , gai,t]
(3)
B. Key Set Proposal Phase
During the key set proposal phase, each node i maintains
a set T (cid:48)
i of terminated ACSS instances (lines 11-15). In
particular, whenever the jth ACSS terminates at node i,
node i adds the index j to the set T (cid:48)
i (line 15), and add
its share sj,i = pj(i) (of the secret chosen by node j) to the
set Si (line 14). Let Ti be the ﬁrst t + 1 ACSS instances that
terminate at node i. Node i starts a RBC to broadcast Ti to
all other nodes (lines 16-18). Intuitively, Ti is the proposal
from node i for the set of nodes whose secrets are to be
aggregated for the ﬁnal secret key z.
to note here is that each node i
participates in the jth RBC only after Tj ⊆ T (cid:48)
i (line 19),
i.e., when all
the ACSS instances speciﬁed in Tj have
terminated at node i. Hence, if RBC(Tj) terminates, then at
least t + 1 honest nodes vouch that every ACSS instance in
Tj has terminated. Thus, due to the Completeness property
of ACSS, for every k ∈ Tj, the kth ACSS instance will
eventually terminate at all honest nodes, and every honest
node will eventually receive a valid share of the secret sk.
C. Agreement Phase
One crucial point
During the agreement phase, nodes try to agree on a
subset of valid key set proposals. We then use the union
of elements in these key set proposals to derive the ﬁnal
secret key. As described before, the key set proposal Ti by
node i is valid if every ACSS instance in Ti has terminated.
To agree on a subset of key set proposals, nodes start n
concurrent ABA instances, where the jth ABA instance
seeks to decide whether or not the jth key set proposal is
valid. Node i inputs 1 to the jth ABA instance if the jth key
set proposal RBC successfully terminated at node i (lines
21-24). Moreover, if any shared randomness is required for
the jth ABA instance, nodes use Tj to generate the shared
randomness. More speciﬁcally, let uj be the following value
(cid:88)
k∈Tj
uj =
sk
(4)
25-26). Node i’s share of uj is ui,j =(cid:80)
Then, during the jth ABA instance, whenever a common
coin is needed, nodes use the Difﬁe-Hellman threshold coin-
tossing protocol due to [12] with shared secret key uj (lines
sk,i. We can
then use the Homomorphic-Partial-Commitment property of
k∈Tj
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:29 UTC from IEEE Xplore.  Restrictions apply. 
our ACSS to allow each node to locally compute guj and
gui,j for all i and j to ﬁnish the coin tossing setup.
As mentioned in challenge 2 of §II, if the jth node is
malicious and does not reliably broadcast a key set, nodes
will not have access to shared randomness in the jth ABA.
Fortunately, in this case, all honest nodes will input 0 to
that ABA, and that ABA will terminate without using a
common coin due to the Good-Case-Coin-Free property. For
the bivalent case where honest nodes input different values
to an ABA, at least one honest node inputs 1 to the ABA.
It implies that at least one honest node has received the
intermediate key set. By the Completeness of ACSS and
Totality of RBC, all honest nodes will eventually receive
the intermediate key set as well.
Finally, to ensure that not all ABAs terminate with 0, we
will use the elegant idea from Ben-Or et al. [8]. Brieﬂy, each
honest node inputs 1 to all ABAs whose key set proposal
phase terminates successfully and refrains from inputting 0
to any ABA until at least one ABA terminates with 1 (lines
29-31). Once an ABA terminates with 1, every node inputs 0
to all the remaining ABAs for which it has not input anything
yet. Using an analysis similar to Ben-Or et al. [8], we show
in Lemma 1 that at least one ABA will terminate with 1.
D. Key Derivation Phase
If the jth ABA terminates with 1, we say the jth key
set proposal is accepted. Let T be the set of nodes that are
included in at least one accepted key set proposal (lines 29-
30). Note that |T|≥ t + 1. We then use T to derive the ﬁnal
ADKG secret key z as
(5)
j∈T
i locally computes hzi where zi = (cid:80)
To compute the ﬁnal ADKG public key hz, each node
j∈T sj,i is its share
of the secret key z. Each node i also computes a NIZK
proof πi that logg gzi = logh hzi (line 43). Here logg and
logh denotes the discrete logarithm with base g and h,
respectively. We use the non-interactive variant of Chaum-
Pedersen’s protocol [16] for this purpose. Note that, for any
given i, due to Homomorphic-Partial-Commitment of our
ACSS, all honest nodes can compute gzi using the partial
commitments of each ACSS instance included in T .
Finally, each node i sends (cid:104)KEY, hzi, πi(cid:105) to all other nodes.
Upon receiving (cid:96) valid (cid:104)KEY, hzi, πi(cid:105) messages, a node can
compute the public key hz and the threshold public keys hzj
for each j ∈ [n] using Lagrange interpolation (line 49-51).
(cid:88)
z =
sj
Lemma 1. Algorithm 1 terminates at all honest nodes, and
all honest nodes output the same set of nodes whose inputs
are to be included in the ﬁnal secret key.
Proof: Since n− t ≥ 2t + 1, it is easy to see that every
ACSS and RBC initiated by an honest node will terminate
at all nodes. Now we show that all ABA instances terminate
and at least one ABA instance terminates with 1.
We ﬁrst argue that at least one ABA instance eventually
terminates with 1, and every honest node eventually inputs
to every ABA. The key set proposal RBC of all honest
nodes will eventually terminate at all honest nodes. Hence,
all honest nodes will input 1 to the corresponding ABA
instances unless they have already input 0 to some ABA.
Consider the ﬁrst ABA instance to which all honest nodes
input a value. If all honest nodes input 1, then this ABA
terminates with 1 due to the Validity of ABA. Otherwise,
if some honest node inputs 0 to this ABA, according to
Algorithm 1, some other ABA has already terminated with 1.
Hence, at least one ABA instance in terminates with 1. Then,
all honest nodes input 0 to the rest of the ABA instances if
they have not input any value already.
Now we show all ABA instances terminate. If all honest
nodes input 0 to an ABA, then this ABA terminates due
to the Good-Case-Coin-Free property of Crain’s ABA [17].
Otherwise, if at least one honest node inputs 1, then due
to Totality of RBC and Completeness of ACSS, eventually
every honest node will have the key set to generate shared
randomness. Hence, the ABA will eventually terminate.
Lemma 2 (Correctness C1 and C2). All subsets of t + 1
shares of honest nodes deﬁne the unique secret key z.
Furthermore, all honest nodes output the same public key
y = hz.
most t. Deﬁne ˆp(·) to be(cid:80)
Proof: Lemma 1 implies that all honest nodes agree
on and output T . The Completeness of ACSS ensures that
every k ∈ T corresponds to a polynomial pk(·) of degree at
k∈T pk(x). Then, z = ˆp(0), and
for node j, its share of z is zj = ˆp(j). This implies every
set of (at least) t + 1 valid shares {j, zj} interpolates to the
unique polynomial ˆp(·).
Next, we show that honest nodes can tell apart correct
shares from incorrect ones. First, for each share zj, the value
gzj can be computed from output of the sharing phase:
(cid:80)
(cid:89)
i∈T
(cid:89)
t+1(cid:89)
i∈T
k=0
gzj = g
i∈T si,j =
gsi,j =
vjk
i,k
(6)
A. Correctness
V. ANALYSIS
To argue Correctness, we will ﬁrst argue that our ADKG
protocol
terminates at all honest nodes, and that upon
termination, all honest nodes agree on the set of nodes whose
inputs are included in the ﬁnal secret key.
where vi,k is the kth element of vi and the last equality
follows from the Homomorphic-Partial-Commitment prop-
erty of the ACSS scheme. With gzj , when a node receives
j , πj(cid:105) from node j, it can check whether zj = z(cid:48)
(cid:104)KEY, hz(cid:48)
j
due to the Soundness property of the equality of discrete
logarithm NIZK proof πj.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:29 UTC from IEEE Xplore.  Restrictions apply. 
7
2524
k∈T sk.
1) For each honest node i ∈ H, S samples a uniformly secret
si ∈ Zq. Follow the protocol for every honest node till
(including) the agreement phase.
2) Let T be the set of ABA instances that terminates with
1. Let s =(cid:80)
k∈T sk,j
get the share sk,j. Then zj =(cid:80)
3) Let z1, z2, . . . , zt be the shares of s held by the malicious
nodes. S then extracts z1, z2, . . . , zt as follows.
- For each honest node in k ∈ T , S already knows the
corresponding shares held by malicious nodes. Let sk,i
be the share of adversarial node i.
- For each malicious node k ∈ T , S uses n − t
shares received during sharing phase to reconstruct the
polynomial pk(·). Evaluate pk(j) for each j ∈ [t] to
4) Let ˆp(·) be a degree-t polynomial such that ˆp(0) = z
and ˆp(j) = zj for each j ∈ [t]. Compute h ˆp(i) for each
i ∈ [n]. For each i = [t+1, n] use Lagrange interpolation
in the exponent to compute h ˆp(i).
5) For each i ∈ [t + 1, n], generate NIZK proof πi for
equality of discrete logarithm of false statements that
logg gzi = logh h ˆp(i). S uses the simulator of Chaum-
Pedersen’s protocol as described in Appendix C.
6) For each honest node i, let πi be the generated NIZK
proof. S sends (cid:104)KEY, h ˆp(i), πi(cid:105) to all nodes on behalf of
node i.
Figure 2: Description of the ADKG secrecy simulator S.
Thus, upon receiving (cid:96) valid KEY messages, each node
interpolates them in the exponent to compute hz.
Lemma 3 (Correctness C3). Assuming hardness of Deci-
sional Difﬁe-Hellman, the secret key z is computationally
indistinguishable from a uniformly random element in Zq.
We will prove Lemma 3 when we prove the Secrecy of
our ADKG protocol.
Lemma 4 (Correctness C4). All honest nodes agree on and
output the threshold public keys of all nodes. The threshold
public key of node j is yj = hzj .
Proof: From Lemma 2, for each j, every node can
compute gzj as in equation (6). Also, during the key
derivation phase, each node will eventually receive (cid:96) valid
(cid:104)KEY, hzj , πj(cid:105) and can efﬁciently validate them. Upon re-
ceiving (cid:96) valid hzj nodes interpolate in the exponent to
compute hzk for the remaining nodes.
B. Secrecy
We prove Secrecy using simulatability. In particular, we
prove that for every probabilistic polynomial-time (PPT)
static adversary A that corrupts up to t nodes, there exists
a PPT simulator S that takes as input a uniformly random
element y ∈ G and produces a view that is indistinguishable
from A’s view of a run of the ADKG protocol that outputs y
as its public key. We assume a static adversary who picks the
set of nodes to corrupt upfront. Without loss of generality, let
[t] be the set of nodes A corrupts, and let pk1, pk2, . . . , pkt
be their public keys.
Lemma 5 (Secrecy S1). Assuming hardness of Decisional
Difﬁe-Hellman (DDH), a PPT adversary A that corrupts up
to t nodes learns no information about the secret z beyond
what is revealed from the public key y = hz.
We describe the simulator S in Figure 2 and summarize
it below. Upon input h and the ADKG public key y, the
simulator ﬁrst simulates the sharing phase of our ADKG.
For each honest node i, S samples a uniformly random
secret si and secret shares it among all nodes using ACSS.
S then runs the key set proposal and agreement phase for
each honest node as per our protocol.
Once all n ABA instances terminate at any honest node,
S sets T to be the set of nodes chosen for the ﬁnal secret
key, and s to be the accumulated secret:
s =
sk
(7)
(cid:88)
i∈T
Let z1, z2, . . . , zt be shares of s held by adversarial nodes.
Then, S extracts them as follows. For each honest node
i ∈ T , S already knows shares of si held by adversarial
nodes. For all adversarial nodes j ∈ T , due to Completeness
of ACSS, S already knows n−t shares of sj. Thus, S can re-
construct the polynomial pj(·) and evaluates it at 1, 2, . . . , t
to recover the corresponding shares. Once S recovers all
the individual shares for all polynomials corresponding to
all k ∈ T , S sums them up to get z1, z2, . . . , zt.
Let p(·) be the aggregated polynomial such that p(0) = s
and p(j) = zj for j ∈ [n]. Let ˆp(·) be a degree-t polynomial
such that ˆp(0) = z = logh y and ˆp(j) = p(j) for each
j ∈ [t]. Note that S needs to ensure that the ADKG public
key is h ˆp(0). However, the aggregated secret is p(0). The S
addresses this issues by deviating from the speciﬁed protocol
in the following manner.
S ﬁrst computes h ˆp(i) for i ∈ [n]. For each j ∈ [t], S uses
zj to compute h ˆp(j). Then, for each remaining j ∈ [t+1, n],
S uses Lagrange interpolation in the exponent to compute
h ˆp(i) as follows.
t(cid:89)
h ˆp(i) =
hγj· ˆp(j)
(8)
j=0
where γj’s are the appropriate Lagrange coefﬁcients. Then,
for each honest node j, i.e., for j ∈ [t + 1, n], S computes
the NIZK proof πj for equality of the discrete logarithm
logg gp(j) = logh h ˆp(j) for each j ∈ [t + 1, n]. S uses the
perfect zero-knowledge simulator of the Chaum-Pedersen
protocol to generate πj. Note that S here generates a proof of
false statement. We provide more details on how S generates
such a proof in Appendix C.
We next argue that if a PPT adversary A can distinguish
the simulated view generated by S from its view in a real
then we can use A to build
execution of the protocol,
8
2525
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:29 UTC from IEEE Xplore.  Restrictions apply. 
a uniformly random ri ∈ Zq.
Given a DDH tuple (g, ga, gb, o) such that o is either gab or
gr for some random r ∈ Zq, our distinguisher simulates the
view of A as follows. We write gb as h.
1) For each honest node i, i.e., for each i ∈ [t+1, n], sample
2) Implicitly set a + ri as the ACSS secret of node i ∈
[t + 1, n] and run sharing, key set proposal phase of
our ADKG protocol. In particular, for node i, sample
uniformly random ai,j ∈ Zq for each j ∈ [t]. Let pi(·)
be a degree-t polynomial such that pi(0) = a + ri and
also pi(j) = ai,j for each j ∈ [t].
3) Compute the Feldman polynomial commitment to pi(·)
as follows.
- Let vi,j = gai,j for each j ∈ [t]. Set vi,0 = ga+ri.
- Use Lagrange interpolation to compute vi,j for each
j ∈ [t + 1, n], i.e.,
t(cid:89)
k=0
vi,j =
gγkai,k
here γj,k =(cid:81)
j−l
j−k is the kth Lagrange coefﬁcient.
- For each j ∈ [t], use pi(j) as the secret share of node
j for the secret a + ri.
j(cid:54)=k
- Run the ACSS step for every honest dealer.
4) For any honest node i, let Ti be the intermediate key
set proposed by node i. D uses the NIZK simulator
of equality of discrete logarithm protocol for generating
required proofs during the coin-tossing protocol for the
ith ABA instance.
5) D waits till all ABA instances terminate at any honest
nodes. Also, let T be chosen at the end of the agreement