一、概述 
最近需要逆深信服的 Easyconnect.apk，无壳但有混淆，so 层抛弃整个系统通信框架，
使用自编译的 openssl 为后续与服务器通信（图片均已厚码处理）。感谢看雪高研。有什
么错误还请师傅指出。 
二、连接服务器请求分析 
连接服务器时，会发送先后两个请求，下面先看第一个： 
先使用脚本 hook onclik 点击事件，得到所实现的 ConnectActivity： 
[WatchEvent] onClick: com.sangfor.vpn.client.phone.ConnectActivity 
跟入 o(): 
o()中调用 showDialog(10)显示对话框后，再新建 cb 对象，并新建异步任务： 
任务中调用了 cb 对象的 a(): 
继续跟进 b()方法，其中 arg2 为 url： 
url 经过判断后，进入 ConnectActivity 的 a()方法，在该方法中设置好相应参数后调用 l()方
法： 
L()方法中拼接 url 新建异步任务： 
其中在任务中 doInBackground()调用了 ConnectActivity.a()方法： 
在 A()中主要调用了 HttpConnect.requestStringWithURL(): 
继续跟入最终调用了 httprequest()的 native 方法: 
根据后续的分析 arg1 为 url，arg2 为 TWFID 等 cookie 信息，agr3 为传输的内容，arg4 为是
否为 post 提交，arg5 后续加密验证方式，arg6 为 http 版本 
接着在 onPostExecute 发送第二个请求给服务器： 
跟入其 a()方法，同样调用了 ConnectActivity.a()方法： 
进行跟入 b()，可见在函数新建了线程，跟入其线程函数： 
注
意
这
里
v2.put(“mobileid,u.f().b()”)
把
mobileid
一
起
发
给
服
务
器
https://ip:port/por/login_auth.csp?dev=android-phone&language=zh_CN 
最后调用 httpRequest()发送给服务器的数据包，： 
在发第二个请求包时，会先获取到内存中的 mobileid，V2 为 hashmap，在调用 httpRequest
前压入了值，跟入 b():： 
B()返回 f 的值，查找引用： 
可见 f 为 nDeprecatedEncryptMobileId()调用后的结果返回给 a()执行后的值 
跟入 A()，可见函数主要对传入参数进行 md5： 
故我们 hook 住 nDeprecatedEncryptMobileId 函数得到其 mobileid 和返回值： 
("27b3d55fdc6e0c60") 
"P\u0004\u0006\u0006QSQ\u0005R\u0006\u0006\u0006\u0006S\u0004\u0007" 
我们回头看看 mobileid 是如何产生的，可见是先从 map 中取出： 
查找引用找到相关赋值的地方，跟入 c()： 
找到其 this.g 赋值，可见先调用了 e()进行判断是否有 telephony 模块： 
如果有则调用 getDeviceId(): 
三、登录请求分析 
接着就是登录请求的数据包，我们通过上面找到发包的函数，先进行 hook： 
注意第二个数据包的响应包含xxxxxxxxxxx，该值会先保存在 cookie 中在
登录时一同发送： 
Ver 为当前软件版本 
mobileid 是 md5 后的值，固定的 
TWFID 是第二个请求服务器后返回的值，后续保存在 cooike 中。 
MOBILETWFID 与 TWFID 一样 
svpn_password 用户名 
svpn_name 密码 
我们跟入函数所在 so，经观察 so 中自编译 openssl 库，但符号还在： 
直接上脚本 hook libc，因为 so 中自编译 openssl 库，直接调用 libc 的 write 和 read，不走
libssl 的 ssl_write/bio_wriet 和 ssl_read/bio_read，所以 hook libc 只能捉到对应的密文： 
我们可以 hook libhttps.so 的 SSL_write()和 SSL_read()即可得到 SSL 处理前的明文： 
这是连接服务是所发送的第一个请求及其响应的数据： 
这是连接服务是所发送的第二个请求及其响应的数据： 
这是用户登录时所发送的用户名及数据给服务器的请求及其响应： 
我们可以构造 mobileid 后请求服务器 https://ip:port/por/login_auth.csp 得到后续 TWFID，
使用 frida 主动调用 httpRequest 并传入 TWFID 访问 https://ip:port/por/login_psw.csp 进行
爆破。