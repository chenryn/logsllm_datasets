type rand_t = polynomial,
op share (r : rand_t) (s : secret_t) =
map (fun x => (x,eval x r)) p_id_set.
op reconstruct (ss : (p_id_t * share_t) list) =
Some (interpolate CyclicGroup.FD.F.zero ss).
...
end ShamirSecretSharingScheme.
Fig. 8: Shamir secret sharing scheme
The next step was to specify a concrete commitment scheme. Because we were interested in exploring the
homomorphic properties of commitments, we chose to implement Pedersen’s commitment scheme, reproduced
in Figure 9.
12
Shamir’sSecretPedersen’sCommitmentSchemeSharingSchemeShamir’sVeriﬁableSecretSharingSchemeUF-SECHonest-but-curiousVeriﬁable(1)(2)(1),(2)(1)(2)theory PedersenCommitmentScheme.
...
op multiplicator (l : group list) : group =
foldr (CyclicGroup.( * )) g1 l.
clone import CommitmentScheme as PedersenCS with
type rand_t = polynomial * polynomial,
type msg_t = t * t,
type commit_t = t * ((int * group) list),
op commit (r : rand_t) (m : msg_t) =
let (rs,rc) = r in let (m,sh) = m in
let rz = zip rs rc in
(eval m r, map (fun x => ((fst x).‘expo, g^(fst x).‘coef * h^(snd x).‘coef)) rz),
op verify (m : msg_t) (c : commit_t) : bool =
let (c, gsh) = c in
let (m,sh) = m in
g^sh*h^c = multiplicator (map (fun x => snd x ^ (m ^ fst x)) gsh).
...
end PedersenCommitmentScheme.
Fig. 9: Pedersen commitment scheme
Finally, we can instantiate the abstract veriﬁable secret sharing construction using the concrete passively
secure secret sharing scheme (ShamirSS, inside theory ShamirSecretSharingScheme) and the concrete unforgeable
commitment scheme (PedersenCS, inside theory PedersenCommitmentScheme). This instantiation step is
actually very simple and can be done with very little overhead. An EasyCrypt implementation of the veriﬁable
secret sharing version of Shamir’s secret sharing scheme can then be obtained simply by plugging ShamirSS
and PedersenCS to the abstract veriﬁable secret sharing construction.
PSS with dishonest majority We also implemented a proactive (gradual) secret sharing scheme [32,35] which
is secure against a dishonest majority of mixed adversaries - detailed in Section 4 - where we use it for
an example-driven presentation of how the EasyCrypt extraction tool works. Formalization and extracted
executables of this scheme can be of independent interest beside the BGW-based MPC part.
3.3 MPC Protocols in EasyCrypt
We divide the MPC sub-protocols we speciﬁed into two main categories: 1. arithmetic protocols, used to
perform actual circuit computation; these are the addition (add) and multiplication (mul) protocols; and
2. ”security” protocols, used to ensure proactive security throughout the evaluation of the circuit; protocols
refresh and recover will be used in this context.
The circuit to be executed will be composed of a series of addition and multiplication protocols, interpolating
with refresh and recover in order to maintain the evaluation secure. Informally, we want protocols add and
mul to achieve privacy, meaning that we will only want for the communication traces and output shares
of these protocols to leak no information about the input shares involved in the protocol. Afterwards, an
execution of refresh would re-randomize the outputs. We call such security notion random. Lastly, recover can
be used in order to prevent an adversary from potentially corrupting all nodes of the system. We say protocol
recover achieves proactive security. All the afore mentioned security notions consider malicious adversaries.
This high-level description is summarized in Figure 10, where we depict our abstract modular framework
for MPC protocols. This architecture leverages the security deﬁnitions found in other simular tools such as
Sharemind [22,23] or [5]. Nevertheless, these two works only consider passive security, while our evaluator
provides proactive security.
13
Fig. 10: MPC abstract framework. Protocols can realize three functionalities - deterministic, random and
proactive. Smaller protocols can also be composed in order to achieve stronger security guarantees.
Abstract MPC At the base of our MPC abstract framework lies the abstraction of an MPC protocol (Figure 11).
The abstraction deﬁnes an operator prot which models the functional behaviour of the protocol, with parties
entering the protocol with their inputs and randomness information and ending with some output. In a
possible instantiation, one could specify individual party operations that can then be called inside prot
operator, which would model communication.
theory AbstractProtocol.
type p_id_t. (* Party identifier *)
op p_id_set : p_id_t list. (* Set of parties involved *)
type input_t. (* Party input *)
type inputs_t = (p_id_t * input_t option) list. (* Set of party inputs *)
type output_t. (* Party output *)
type outputs_t = (p_id_t * output_t option) list. (* Set of party outputs *)
type rand_t. (* Party randomness *)
type rands_t = (p_id_t * rand_t option) list. (* Set of party randomness *)
type conv_t. (* Party "conversation" *)
type convs_t = (p_id_t * conv_t option) list. (* Set of party "conversations" *)
(* Executes the protocol *)
op prot : rands_t -> inputs_t -> (convs_t * outputs_t).
end AbstractProtocol.
Fig. 11: Abstract MPC protocol
The proposed abstraction not only ﬁts complete instantiations of protocols but also allows one to split the
same protocol into multiple smaller protocols and then compose them into a bigger protocol. For example,
the refresh protocol can be written as a composition of a protocol where every party shares the value 0
(zero), a protocol where every party sends to each other the corresponding shares and a protocol where
every party adds the received shares to the current share. This approach is actually ideal when reasoning
14
RandomFunctionalityProtocolDeterministicFunctionalityProtocolProtocolProactiveFunctionalityProtocolProtocolProtocol(1)(2)(3)(4)about the security of a protocol against malicious adversaries. Intuitively, one can prove the desirable level of
security for the individual protocols and, subsequently, derive the security of the composed protocol using
the composition lemmas that we describe with more detail later in this section. Note that this approach
contemplates possible misbehaviors in the middle of the protocol execution, which is a desirable property for
malicious secure protocols and, probably, the most challenging aspect to model.
In our evaluator, MPC protocols may realize three types of functionalities. Similarly to the protocol
abstraction, we deﬁne functionalities that will execute in one block and functionalities that will execute
by phases. In the private functionality, protocols must realize some arithmetic operation. Intuitively, this
functionality receives unshared inputs and computes the arithmetic operation over raw inputs instead of
over shared values. Regarding random functionality, protocola must re-randomize the input shares. In short,
executing the protocol must output a result indistinguishable from freshly sharing a secret after reconstructing
it. Finally, in the proactive functionality, protocols must recover a corrupted party to a non-corrupted state.
Informally, recovering parties should receive new shares that would invalidate the previous ones. EasyCrypt
snippets for the three functionalities can be found in the extended version of this paper.
These functionalities are tied to a speciﬁc Real ∼ Ideal security experiences. For private and random
security, our security experiencies are extensions to the malicious setting of the ones deﬁned in [22,5], while
for proactive security we use the ones formally deﬁned in [35]. Likewise, we deﬁne three diﬀerent types of
simulators. This is due to the fact that simulators will have diﬀerent goals, according to the security asset.
We modeled the security deﬁnitions by means of EasyCrypt modules in the following way. An environment
Z will try to distinguish between a real execution of the protocol or the simulated one. In order to do so, Z
can ask an adversary A to execute either the protocol or to simulate it (behaviour deﬁned by some bit b).
Since we are interested in malicious adversaries, this adversary will be grant access to oracles (that are to be
executed at the end of every protocol stage):
– corrupt - getting access to party
– corruptInput - modify some corrupted party phase input
– abort - remove some party from the protocol
At the end, A will provide Z with information (depending on the security deﬁntion) that Z will use to make
its guess. We refer the reader to Appendix C for a complete view of the security deﬁnitions representation.
The functionalities, security experiences and simulators described above deﬁne security for individual
protocols but not for the entire evaluator. Intuitively, we want the overall evaluator to be a composition of
smaller protocols for which it is simpler to prove security. Subsequently, we want to derive security for the
entire system by relying on composition lemmas surrounding the MPC protocols. Informally, we want to
evaluate a sequence of addition and multiplication protocols, keeping the evaluation private. The circuit will
then reach a refresh or a recover protocol, and will assume the security each protocol provides. We thus need
three composition lemmas:
1. The composition of two private protocol yields a private protocol.
2. The composition of a private protocol with a random protocol yields a random protocol.
3. The composition of a random protocol with a proactive protocol yields a proactive protocol.
To ﬁnish this subsection, we highlight how EasyCrypt can be used in order to deﬁne the composition of a
private and a random protocols and how to specify its security.
Figure 12 details the speciﬁcation of the composed protocol Π = π2 ◦ π1. The structure is simple. Each
party i involved in protocol Π will input two shares xi and yi of the values x and y, respectively, and will end
the execution of Π with one share zi of some value z, that will be the randomized result of the arithmetic
operation realized by protocol π1. Inputs xi and yi are also the inputs of protocol π1, whereas the the input
of π2 will be the output of π1.
The security of the composed protocol can now be reduced to the security of the two protocols. The
interesting aspect about this proof is that it can be performed in an abstract and modular way. Consequently,
in future instantiations, the only concern will be proving security for the small components of a bigger protocol,
since the composition lemmas can be applied. The reason why the proof can be modular is because the
15
composed simulator and functionalities do not need to be restricted to any particular behavior or description
but can simply be deﬁned as the sequential execution of S1 and S2 and F1 and F2. Figure 12 demonstrates
the security set up for the composed protocol Π.
The intuition behind the security proof is that every real execution of a protocol can be replaced by the
ideal one. At the end, instead of executing the two protocols sequentially, the security experience will be
executing the two simulators sequentially, therefore connecting the real and ideal worlds.
theory RandomAfterPrivateComposition.
...
clone import AbstractProtocol as P1.
clone import PrivateProtocolSecurity as P1PrivSec with
theory AbstractProtocol  []
with r = RNRP rs => share rs F.zero,
op nrpstage2 pid i ss =
foldr (fun (x : share_t) (acc : share_t) =>
if verify (pid, fst x) (snd x) then
AdditionProtocol.pexec (x,acc)
else acc) i ss,
op rparty pid r ss =
with r = RRP rc =>
let o = interpolate pid (map (fun pidsh => (fst pidsh, fst (snd pidsh))) ss) in
let c = commit rc (pid,o) in (o,c)
with r = RNRP _ => (witness, witness),
op prot rs iss =
let rp = fst (snd (head witness iss)) in
let nrp = rem rp p_id_set in
let iss = map (fun pidi => let (pid,i) = pidi in (pid, snd i)) iss in
let pst1 = map (fun pid => (pid, nrpstage1 (oget (assoc rs pid)))) nrp in
let cs = map (fun pid => (pid, map (fun ss => snd ss) (oget (assoc pst1 pid)))) nrp in
let sss = map (fun pid => (pid, map (fun idss => oget (assoc (snd idss) pid)) pst1)) nrp in
let os = map (fun pid => (pid, nrpstage2 pid (oget (assoc iss pid)) (oget (assoc sss pid))))
nrp in
let cs = map (fun pid => (pid, oget (assoc cs pid) ++ (oget (assoc sss pid)))) nrp in
let orp = rparty rp (oget (assoc rs rp)) os in
let crp = map (fun x => snd x) os in
Some ((rp, crp) :: cs, (rp, orp) :: os).
end RecoverProtocol.
Fig. 14: Recover protocol
are conceptually easy. Sharing outputs three shares, where two are randomly generated and the other one
is obtaining by subtracting the secret by the two random shares. The secret can be easily reconstructed