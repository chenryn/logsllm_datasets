mappings = {
  global = {
    org_capture = ';c',
    },
  capture = {
    org_capture_finalize = ';w',
    org_capture_refile = ';r',
    org_capture_kill = ';q',
  },
}
```
### Configure the capture templates
Capture lets you define different templates for the different inputs. Each template has the next elements:
* Keybinding: Keys to press to activate the template
* Description: What to show in the capture menu to describe the template
* Template: The actual template of the capture, look below to see how to create them.
* Target: The place where the captured element will be inserted to. For example `~/org/todo.org`. If you don't define it it will go to the file configured in `org_default_notes_file`.
* Headline: An [optional headline](https://github.com/nvim-orgmode/orgmode/issues/196) of the Target file to insert the element. 
For example:
```lua
org_capture_templates = {
  t = { description = 'Task', template = '* TODO %?\n  %u' }
}
```
For the template you can use the next variables:
- `%?: `Default cursor position when template is opened
- `%t`: Prints current date (Example: ``)
- `%T`: Prints current date and time (Example: ``)
- `%u`: Prints current date in inactive format (Example: `[2021-06-10 Thu]`)
- `%U`: Prints current date and time in inactive format (Example: `[2021-06-10 Thu 12:30]`)
- `%`: Insert current date/time formatted according to lua date format (Example: `%` produces `2021-07-02 Friday`)
- `%x`: Insert content of the clipboard via the "+" register (see `:help clipboard`)
- `%^{PROMPT|DEFAULT|COMPLETION...}`: Prompt for input, if completion is provided an `:h inputlist` will be used
- `%(EXP)`: Runs the given lua code and inserts the result. NOTE: this will internally pass the content to the lua `load()` function. So the body inside `%()` should be the body of a function that returns a string.
- `%f`: Prints the file of the buffer capture was called from.
- `%F`: Like `%f` but inserts the full path.
- `%n`: Inserts the current `$USER`
- `%a`: File and line number from where capture was initiated (Example: `[[file:/home/user/projects/myfile.txt +2]]`)
For example:
```lua
{ 
  T = {
    description = 'Todo',
    template = '* TODO %?\n %u',
    target = '~/org/todo.org'
  },
  j = {
    description = 'Journal',
    template = '\n*** %\n**** %U\n\n%?',
    target = '~/sync/org/journal.org'
  },
  -- Nested key example:
  e =  'Event',
  er = {
    description = 'recurring',
    template = '** %?\n %T',
    target = '~/org/calendar.org',
    headline = 'recurring'
  },
  eo = {
    description = 'one-time',
    template = '** %?\n %T',
    target = '~/org/calendar.org',
    headline = 'one-time'
  },
  -- Example using a lua function
  r = {
    description = "Repo URL",
    template = "* [[%x][%(return string.match('%x', '([^/]+)$'))]]%?",
    target = "~/org/repos.org",
  }
}
```
### Use capture
## The orgmode repository file organization
How to structure the different orgmode files is something that has always confused me, each one does it's own way, and there are no good posts on why one structure is better than other, people just state what they do.
I've started with a typical [gtd](gtd.md) structure with a directory for the `todo` another for the `calendar` then another for the `references`. In the `todo` I had a file for personal stuff, another for each of my work clients, and the `someday.org`. Soon making the internal links was cumbersome so I decided to merge the personal `todo.org` and the `someday.org` into the same file and use folds to hide uninteresting parts of the file. The reality is that I feel that orgmode is less responsive and that I often feel lost in the file. 
I'm now more into the idea of having files per project in a flat structure and use an index.org file to give it some sense in the same way I do with the mkdocs repositories. Then I'd use internal links in the todo.org file to organize the priorities of what to do next.
Benefits:
- As we're using a flat structure at file level, the links between the files are less cumbersome `file:./project.org::*heading`. We only need to have unique easy to remember names for the files, instead of having to think on which directory was the file I want to make the link to. The all in one file structure makes links even easier, just `*heading`, but the disadvantages make it not worth it.
- You have the liberty to have a generic link like `Work on project` or if you want to fine grain it, link the specific task of the project
- The todo file will get smaller.
- It has been the natural evolution of other knowledge repositories such as blue
Cons:
- Filenames must be unique. It hasn't been a problem in blue.
- Blue won't be flattened into Vida as it's it's own knowledge repository
## Synchronizations
### Synchronize with other orgmode repositories
I use orgmode both at the laptop and the mobile, I want to syncronize some files between both with the next requisites:
- The files should be available on the devices when I'm not at home
- The synchronization will be done only on the local network
- The synchronization mechanism will only be able to see the files that need to be synched. 
- Different files can be synced to different devices. If I have three devices (laptop, mobile, tablet) I want to sync all mobile files to the laptop but just some to the tablet).
Right now I'm already using [syncthing](syncthing.md) to sync files between the mobile and my server, so it's tempting to use it also to solve this issue. So the first approach is to spawn a syncthing docker at the laptop that connects with the server to sync the files whenever I'm at home. 
#### Mount the whole orgmode repository with syncthing
I could mount the whole orgmode directory and use the [ignore patterns of syncthing](https://willschenk.com/howto/2020/using_syncthing/), but that will make syncthing see more files than I want even though it won't sync them to the other devices. The ideal scenario is where syncthing only sees the files that needs to sync, so that in case of a vulnerability only a subset of the files is leaked.
#### Mount a specific directory to sync
An alternative would be to have a `.mobile` directory at the orgmode repository where the files that need to be synced will live. The problem is that it would break the logical structure of the repository and it would make difficult to make internal links between files as you need to remember or need to search if the file is in the usual place or in the mobile directory. To avoid this we could use hard links. Soft links don't work well because:
- If you have the file in the org repo and do the soft link in the mobile directory, syncthing won't know what to do with it
- If you have the file in the mobile repo and do a hard link in the repository it wont work because syncthing overwrites the file when updating from a remote thus breaking the hard links
- If you have the file in the mobile repo and do the soft link in the repository, nvim-orgmode sometimes behaves weirdly with the symlinks, try moving the files and recreating the links to a different path. For example I discovered that all links that pointed to a directory which contained the `nas` string didn't work, the rest did. Super weird.
If we use this workflow, we'd need to manually create the links each time a new file is created that needs to be linked.
This is also a good solution for the different authorization syncs as you can only have one syncthing directory per Linux directory so if you want different authorization for different devices you won't be able to do this unless you create a specific directory for that share. For example if I want to have only one file shared to the tablet I'd need a tablet directory.
#### Select which files to mount on the docker command
We could also select which files to mount on the syncthing docker of the laptop. I find this to be an ugly solution because we'd first need to mount a directory so that syncthing can write it's internal data and then map each of the files we want to sync. So each time a new file is added, we need to change the docker command... Unpleasant.
#### Use the org-orgzly script
Another solution would be to use [org-orgzly script](https://codeberg.org/anoduck/org-orgzly) to parse a chosen org file or files, check if an entry meets required parameters, and if it does, write the entry in a new file located inside the directory you desire to sync with orgzly. In theory it may work but I feel it's too Dropbox focused.
#### Conclusion on the synchronization
The best solution for me is to [Mount a specific directory to sync](#mount-a-specific-directory-to-sync).
### Synchronize with external calendars
You may want to synchronize your calendar entries with external ones shared with other people, such as nextcloud calendar or google.
The orgmode docs have a tutorial to [sync with google](https://orgmode.org/worg/org-tutorials/org-google-sync.html) and suggests some orgmode packages that do that, sadly it won't work with `nvim-orgmode`. We'll need to go the "ugly way" by:
* Downloading external calendar events to ics with [`vdirsyncer`](vdirsyncer.md).
* [Importing the ics to orgmode](#importing-the-ics-to-orgmode)
* Editing the events in orgmode
* [Exporting from orgmode to ics](#exporting-from-orgmode-to-ics)
* Uploading then changes to the external calendar events with [`vdirsyncer`](vdirsyncer.md).
#### Importing the ics to orgmode
There are many tools that do this:
* [`ical2orgpy`](https://github.com/ical2org-py/ical2org.py) 
* [`ical2org` in go](https://github.com/rjhorniii/ical2org)
They import an `ics` file
#### Exporting from orgmode to ics
## Other interesting features
Some interesting features for the future are:
* [Effort estimates](https://orgmode.org/manual/Effort-Estimates.html)
* [Clocking](https://orgmode.org/manual/Clocking-Work-Time.html)
# Troubleshooting
## Create an issue in the orgmode repository
- [Create a new issue](https://github.com/nvim-orgmode/orgmode/issues/new/choose)
- Create the `minimal_init.lua` file from [this file](https://github.com/nvim-orgmode/orgmode/blob/master/scripts/minimal_init.lua)
  ```lua
  vim.cmd([[set runtimepath=$VIMRUNTIME]])
  vim.cmd([[set packpath=/tmp/nvim/site]])
  local package_root = '/tmp/nvim/site/pack'
  local install_path = package_root .. '/packer/start/packer.nvim'
  local function load_plugins()
    require('packer').startup({
      {
        'wbthomason/packer.nvim',
        { 'nvim-treesitter/nvim-treesitter' },
        { 'kristijanhusak/orgmode.nvim', branch = 'master' },
      },
      config = {
        package_root = package_root,
        compile_path = install_path .. '/plugin/packer_compiled.lua',
      },
    })
  end
  _G.load_config = function()
    require('orgmode').setup_ts_grammar()
    require('nvim-treesitter.configs').setup({
      highlight = {
        enable = true,
        additional_vim_regex_highlighting = { 'org' },
      },
    })
    vim.cmd([[packadd nvim-treesitter]])
    vim.cmd([[runtime plugin/nvim-treesitter.lua]])
    vim.cmd([[TSUpdateSync org]])
    -- Close packer after install
    if vim.bo.filetype == 'packer' then
      vim.api.nvim_win_close(0, true)
    end
    require('orgmode').setup({
      org_agenda_files = {
        './*'
      }
    }
    )
    -- Reload current file if it's org file to reload tree-sitter
    if vim.bo.filetype == 'org' then
      vim.cmd([[edit!]])
    end
  end
  if vim.fn.isdirectory(install_path) == 0 then
    vim.fn.system({ 'git', 'clone', 'https://github.com/wbthomason/packer.nvim', install_path })
    load_plugins()
    require('packer').sync()
    vim.cmd([[autocmd User PackerCompileDone ++once lua load_config()]])
  else
    load_plugins()
    load_config()
  end
  ```
- Add the leader configuration at the top of the file `vim.g.mapleader = ' '`
- Open it with `nvim -u minimal_init.lua`
## Sometimes  doesn't work
Close the terminal and open a new one (pooooltergeist!).
## Narrow/Widen to subtree
It's [not yet supported](https://github.com/nvim-orgmode/orgmode/issues/200) to focus or zoom on one task.
## Attempt to index local 'src_file' (a nil value) using telescope orgmode
This happens when not all the files are loaded in the telescope cache. You just need to wait until they are. 
I've made some tests and it takes more time to load many small files than few big ones.
Take care then on what files you add to your `org_agenda_files`. For example you can take the next precautions:
- When adding a wildcard, use `*.org` not to load the `*.org_archive` files into the ones to process. Or [save your archive files elsewhere](#archiving).
# Comparison with Markdown
What I like of Org mode over Markdown:
* The whole interface to interact with the elements of the document through key bindings:
  * Move elements around.
  * Create elements
* The TODO system is awesome
* The Agenda system
* How it handles checkboxes <3
* Easy navigation between references in the document
* Archiving feature
* Refiling feature
* `#` is used for comments.
* Create internal document links is easier, you can just copy and paste the heading similar to `[[*This is the heading]]` on markdown you need to edit it to `[](#this-is-the-heading)`.
What I like of markdown over Org mode:
* The syntax of the headings `## Title` better than `** Title`. Although it makes sense to have `#` for comments.
* The syntax of the links: `[reference](link)` is prettier to read and write than `[[link][reference]]`, although this can be improved if only the reference is shown by your editor (nvim-orgmode doesn't do his yet)
# Interesting things to investigate
- [org-bullets.nvim](https://github.com/akinsho/org-bullets.nvim): Show org mode bullets as UTF-8 characters.
- [headlines.nvim](https://github.com/lukas-reineke/headlines.nvim): Add few highlight options for code blocks and headlines.
- [Sniprun](https://github.com/michaelb/sniprun): A neovim plugin to run lines/blocs of code (independently of the rest of the file), supporting multiples languages.
# References
* [Source](https://github.com/nvim-orgmode/orgmode)
* [Docs](https://nvim-orgmode.github.io/)
* [Developer docs](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md#org_export)
* [List of supported commands](https://github.com/nvim-orgmode/orgmode/wiki/Feature-Completeness#nvim-org-commands-not-in-emacs)
* [Python library: Org-rw](https://github.com/kenkeiras/org-rw)
* [List of plugins](https://github.com/topics/orgmode-nvim)