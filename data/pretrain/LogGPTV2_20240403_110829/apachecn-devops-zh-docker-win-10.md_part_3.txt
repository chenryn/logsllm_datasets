我在 Jenkins 中创建了一个自由式作业来运行构建，并为源代码管理配置了 Git。配置 Git 很简单—我使用的存储库 URL 与我笔记本电脑上的 Git 存储库相同，我选择了 Gogs 凭据，这样 Jenkins 就可以访问它们:
![](img/3830a303-627f-4ede-bf31-101c321f60ff.png)
Jenkins is running in a Docker container, and Gogs is running in a container on the same Docker network. I'm using the hostname `gogs`, which is the container name, so that Jenkins can reach the Git server. On my laptop, I've add `gogs` as an entry in my hosts file, so I can use the same repository URL in development and on the CI server.
Jenkins 支持多种类型的构建触发器。在这种情况下，我将按照设定的时间表轮询 Git 服务器。我使用`H/5 * * * *`作为日程频率，这意味着 Jenkins 将每五分钟检查一次存储库。如果自上次构建以来有任何新的提交，Jenkins 将运行该作业。
这就是我需要的所有作业配置，所有构建步骤现在都将使用 Docker 容器运行。
# 使用詹金斯的 Docker 构建解决方案
构建步骤使用 PowerShell，运行简单的脚本，这样就不需要依赖更复杂的 Jenkins 插件。有一些 Docker 特有的插件可以完成几项任务，比如构建映像并将它们推送到注册表，但是我可以通过基本的 PowerShell 步骤和 Docker CLI 完成我需要的一切。第一步构建所有映像:
```
cd .\ch10\ch10-nerd-dinner
docker image build -t dockeronwindows/ch10-nerd-dinner-db:2e `
                   -f .\docker\nerd-dinner-db\Dockerfile .
docker image build -t dockeronwindows/ch10-nerd-dinner-index-handler:2e `
                   -f .\docker\nerd-dinner-index-handler\Dockerfile .
docker image build -t dockeronwindows/ch10-nerd-dinner-save-handler:2e `
                   -f .\docker\nerd-dinner-save-handler\Dockerfile .
...
```
将`docker-compose build`与覆盖文件一起使用会好得多，但是 Docker Compose CLI 有一个突出的问题，这意味着它不能正确处理容器内的命名管道。当这个问题在未来的 Compose 版本中得到解决时，构建步骤将会更简单。
Docker Compose is open source, and you can check on the status of this issue on GitHub here: [https://github.com/docker/compose/issues/5934](https://github.com/docker/compose/issues/5934).
Docker 使用多阶段 Docker 文件构建映像，构建的每个步骤都在临时 Docker 容器中执行。Jenkins 本身是在一个容器中运行的，它在映像中提供了 Docker CLI。我不必在构建服务器上安装 Visual Studio，甚至不必安装。. NET 框架或.NET 核心软件开发工具包。所有的先决条件都在 Docker 映像中，所以 Jenkins 构建只需要源代码和 Docker。
# 运行并验证解决方案
Jenkins 中的下一个构建步骤将在本地部署解决方案，在 Docker 容器中运行，并验证构建是否正常工作。这一步是另一个 PowerShell 脚本，首先使用`docker container run`命令部署应用:
```
docker container run -d `
 --label ci `
 --name nerd-dinner-db `
 dockeronwindows/ch10-nerd-dinner-db:2e;
docker container run -d `
 --label ci `
 -l "traefik.frontend.rule=Host:nerd-dinner-test;PathPrefix:/" `
 -l "traefik.frontend.priority=1" `
 -e "HomePage:Enabled=false" `
 -e "DinnerApi:Enabled=false" `
 dockeronwindows/ch10-nerd-dinner-web:2e; ... 
```
在构建中使用 Docker CLI 优于 Compose 的一个优点是，我可以按照特定的顺序创建容器，这为像 NerdDinner 网站这样的慢启动应用提供了更多的时间，以便在测试它们之前做好准备。我还在所有容器上添加了一个标签`ci`，以后我可以用它来清理所有的测试容器，而不用移除任何其他容器。
完成此步骤后，所有容器都应该运行。在运行端到端测试套件(这可能是一个漫长的操作)之前，我在构建中还有另一个 PowerShell 步骤，它运行一个简单的验证测试来确保应用响应:
```
Invoke-WebRequest -UseBasicParsing http://nerd-dinner-test
```
Remember that these commands are running inside the Jenkins container, which means it can access other containers by name. I don't need to publish specific ports or inspect containers to get their IP addresses. The script starts the Traefik container with the name `nerd-dinner-test`, and all the frontend containers use that same hostname in their Traefik rules. The Jenkins job can access that URL and the app will respond if the build has been successful.
此时，应用已经由最新的源代码构建，并且都在容器中启动和运行。我已经验证了主页是可访问的，这证明该网站正在工作。构建步骤都是控制台命令，因此输出将被写入 Jenkins 中的作业日志。对于每个构建，您将看到所有输出，包括以下内容:
*   执行 Dockerfile 命令的 Docker
*   编译应用的步骤
*   Docker 启动应用容器
*   向应用发出 web 请求的 PowerShell
`Invoke-WebRequest` cmdlet 是一个简单的构建验证测试。如果构建或部署失败，它会给出一个错误，但是，如果它成功了，这仍然不意味着应用工作正常。为了对构建更有信心，我在下一个构建步骤中运行端到端集成测试。
# 在 Docker 中运行端到端测试
在本章中，我还向 NerdDinner 解决方案添加了另一个组件，它是一个测试项目，使用模拟浏览器与 web 应用进行交互。浏览器向端点发送 HTTP 请求，端点实际上是一个容器，并断言响应包含正确的内容。
`NerdDinner.EndToEndTests`项目使用 SpecFlow 来定义特性测试，陈述解决方案的预期行为。SpecFlow 测试是使用 Selenium 和 SimpleBrowser 执行的，Selenium 自动执行浏览器测试，SimpleBrowser 呈现无头浏览器。这些是可以从控制台运行的 web 测试，因此不需要 UI 组件，测试可以在 Docker 容器中执行。
如果这听起来像是要添加到您的测试基础设施中的大量技术，那么这实际上是执行应用的完全集成测试的一种非常简洁的方式，它是在使用人类语言的简单场景中指定的:
```
Feature: Nerd Dinner Homepage
    As a Nerd Dinner user
    I want to see a modern responsive homepage
    So that I'm encouraged to engage with the app
Scenario: Visit homepage
    Given I navigate to the app at "http://nerd-dinner-test"
    When I see the homepage 
    Then the heading should contain "Nerd Dinner 2.0!"
```
我有一个 Dockerfile 将测试项目构建到`dockeronwindows/ch10-nerd-dinner-e2e-tests:2e`映像中。它使用多阶段构建来编译测试项目，然后打包测试程序集。构建的最后阶段使用 Docker Hub 上安装了 NUnit Console Runner 的映像，因此它能够通过控制台运行端到端测试。当容器启动时，Dockerfile 设置一条`CMD`指令来运行所有测试:
```
FROM sixeyed/nunit:3.9.0-windowsservercore-ltsc2019
WORKDIR /e2e-tests
CMD nunit3-console NerdDinner.EndToEndTests.dll
COPY --from=builder C:\e2e-tests .
```
我可以从这个映像运行一个容器，它将启动测试套件，连接到`http://nerd-dinner-test`并断言响应中的内容包含预期的头文本。这个简单的测试实际上验证了我的新主页容器和反向代理容器都在运行，它们可以在 Docker 网络上相互访问，并且代理规则设置正确。
I only have one scenario in my tests, but because the whole stack is running in containers, it's very easy to write a suite of high-value tests that execute the key features of the app. I could build a custom database image with known test data and write simple scenarios to verify the user-login, list-dinner, and create-dinner workflows. I could even query the SQL Server container in the test assertions to make sure that new data is inserted.
詹金斯构建的下一步运行这些端到端测试。同样，这是一个简单的 PowerShell 脚本，构建端到端的 Docker 映像，然后运行一个容器。测试容器将在与应用相同的 Docker 网络中执行，因此无头浏览器可以使用 URL 中的容器名称访问 web 应用:
```
cd .\ch10\ch10-nerd-dinner
docker image build `
  -t dockeronwindows/ch10-nerd-dinner-e2e-tests:2e `
  -f .\docker\nerd-dinner-e2e-tests\Dockerfile .
$e2eId = docker container run -d dockeronwindows/ch10-nerd-dinner-e2e-tests:2e
```
NUnit 生成一个包含测试结果的 XML 文件，将其添加到 Jenkins 工作区会很有用，这样在移除所有容器后，就可以在 Jenkins UI 中查看它了。PowerShell 步骤使用`docker container cp`将该文件从容器复制到 Jenkins 工作区的当前目录中，使用从运行命令中存储的容器 ID:
```
docker container cp "$($e2eId):C:\e2e-tests\TestResult.xml" .
```
在这一步中还有一些额外的 PowerShell 来从该文件中读取 XML 并确定测试是否通过(您可以在本章的源文件夹中的`ci\04_test.ps1`文件中找到完整的脚本)。当它完成时，NUnit 的输出会回显到 Jenkins 日志中:
```
[ch10-nerd-dinner] $ powershell.exe ...
30bc931ca3941b3357e3b991ccbb4eaf71af03d6c83d95ca6ca06faeb8e46a33
*** E2E test results:
type          : Assembly
id            : 0-1002
name          : NerdDinner.EndToEndTests.dll
fullname      : NerdDinner.EndToEndTests.dll
runstate      : Runnable
testcasecount : 1
result        : Passed
start-time    : 2019-02-19 20:48:09Z
end-time      : 2019-02-19 20:48:10Z
duration      : 1.305796
total         : 1
passed        : 1
failed        : 0
warnings      : 0
inconclusive  : 0
skipped       : 0
asserts       : 2
*** Overall: Passed
```
测试完成后，数据库容器和所有其他应用容器将在测试步骤的最后部分被移除。这将使用`docker container ls`命令列出所有带有`ci`标签的容器的标识，这些容器是由该作业创建的，然后强制移除它们:
```