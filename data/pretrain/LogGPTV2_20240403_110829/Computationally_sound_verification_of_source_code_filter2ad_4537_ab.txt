### Computational Soundness for Sealing-Based Libraries

We present a computational soundness result for the sealing-based library. The key advantage of this result is that programs utilizing \(\sigma_S\) can be analyzed using the F7 type-checker, as the library itself is type-checked with polymorphic typing annotations. 

#### Specifics and Generalizability
This part of our paper focuses specifically on encryptions and signatures. However, we believe the proof can be extended to other cryptographic primitives on a case-by-case basis. Our proof also provides additional justification for the use of seals: we reduce security with respect to seals to a term-based abstraction, which is simpler because it does not rely on shared state.

#### Limitations and Restrictions

**Security Properties**
- We only consider safety properties (described by authorization policies) that are efficiently decidable. This means that for any given trace, it is efficiently decidable whether the safety property is fulfilled.
- The restriction to safety properties (as opposed to liveness properties) and the requirement for efficient decidability are standard in computational soundness results.
- Computational soundness results for properties based on observational equivalence exist [24], and applying these to RCF would be an interesting extension to our work.

**Protocol Conditions**
- We impose certain conditions on our protocols, most notably, prohibiting the encryption or transmission of secret keys. This also avoids key-cycles.
- These conditions are standard in computational soundness results and, if removed from those, they can also be removed from our result.

**Authorization Policies**
- Cryptographic operations (such as encryptions) may not appear in the formulae used to express authorization properties. This is because statements like \(\exists xyz. c = \text{enc}(x, y, z)\) do not have a sensible computational interpretation.
- Our treatment is generic, so even "harmless" primitives like pairs are excluded from authorization policies. Allowing them would complicate our treatment, but we believe disallowing these constructors in authorization policies is not a significant restriction.
- Authorization policies typically define high-level rules, such as "if P has paid for x, then P may download x." Statements about the actual format of messages (e.g., "m is a pair") will only be used during symbolic verification, e.g., as part of a refinement type. We do not impose restrictions on symbolic verification techniques; arbitrary formulae can be used there as long as they do not appear in the final authorization policy.

**Network Channels**
- We assume a single public network channel (i.e., a single channel to the adversary). This simplification can be easily extended to multiple channels, or one might emulate several channels by adding headers to all messages sent over the public channel.

**Assumptions and Assertions in Libraries**
- One cannot add assumptions and assertions (i.e., authorization policies) directly in the code of the symbolic libraries. However, this is not a significant restriction, as one can use a wrapper library to add these assumptions and assertions.

#### Alternative Approaches

**Using CryptoVerif**
- Instead of performing a symbolic security verification followed by a computational soundness result, one could analyze the security directly in the computational setting using tools like CryptoVerif [21].
- While CryptoVerif can handle some features of RCF, many aspects such as recursion, authorization policies in first-order logic, and concurrency are beyond its capabilities. Additionally, proving the encoding of RCF into CryptoVerif preserves all required security properties might be as complex as the proofs in this paper.

**Reducing to the Applied π-Calculus**
- Another approach would be to embed F# into the applied π-calculus and leverage the computational soundness result established in [7]. However, this embedding would require encoding data structures, recursion, the sealing mechanism, and assertions/assumptions, including the entire FOL/F logic. The correctness of the encoding would need to be proven both symbolically and with respect to the computational semantics.

**Removing Equality Tests on Lambda-Expressions**
- A significant technical challenge in our proofs arises from RCF's ability to perform syntactic equality tests on lambda-abstractions. Removing these tests is not straightforward:
  - Changing the semantics of RCF would make our results incompatible with existing tools like the F7 framework.
  - A syntactic restriction to disallow comparisons of lambda-abstractions is not feasible, as the variables instantiated with lambda-abstractions become clear only at runtime.

### Related Work

The problem of computational soundness was first addressed by Abadi and Rogaway [5] for passive adversaries and symmetric encryption. Subsequent works extended the protocol language and security properties to handle active attacks [13, 11, 12, 10, 41, 35, 38, 32, 7]. Recent works have also focused on computational soundness in the sense of observational equivalence of cryptographic realizations of processes [6, 24, 23]. None of these works tackle the computational soundness of protocol implementations.

Concurrently with the announcement of this work at FCC 2009, [27] reported independent work in progress on a type system for RCF that entails computational soundness.

### Notation

Given a term \(t\), we write \(t\{t'/x\}\) for the result of substituting all free occurrences of \(x\) by \(t'\). We assume that substitutions are capture-avoiding, i.e., bound names are renamed when necessary. We write \(\vec{t}\) for a list \(t_1, \ldots, t_n\) where the length \(n\) of the list is left implicit. Given sets \(P, C\) of logical formulae, we write \(P \vdash C\) if and only if for all \(F \in C\), \(F\) is entailed by \(P\).

### RCF (REVIEW)

This section outlines the Refined Concurrent FPC [16], a simple core calculus extending the Fixed Point Calculus [30] with refinement types and concurrency. Although very simple, this calculus is expressive enough to encode a large part of F# [16].

#### Syntax and Semantics

The set of values includes names, variables, unit, functions, pairs, and type constructors (Figure 2). Names are generated at runtime and used as channel identifiers, while variables are placeholders for values. Unit, functions, and pairs are standard. We extend the syntax to include an arbitrary set of constructors.

Conditionals are encoded using the following syntactic sugar:
- `true := inl()`
- `false := inr()`
- `if M = N then A else B` abbreviates `match M = N with inl x then A else B` for some fresh \(x\).

An expression represents a concurrent computation that may reduce to a value or diverge. The semantics of expressions is defined by a structural equivalence relation \(\equiv\) and a reduction relation \(\rightarrow\). Values are irreducible. The semantics of function applications, conditionals, let commands, pair splits, and constructor matches is standard.

The restriction \(\nu a.A\) generates a globally fresh channel \(a\) that can only be used in \(A\). The expression \(A \mid B\) evaluates \(A\) and \(B\) in parallel, returning the result of \(B\) (the result of \(A\) is discarded). The expression \(a!M\) outputs \(M\) on channel \(a\) and reduces to the unit value \(()\). The evaluation of \(a?\) blocks until a message \(M\) is available on channel \(a\), removes \(M\) from the channel, and returns \(M\).

The expressions `assume F` and `assert F` represent logical assumptions and assertions for modeling security policies. The intended meaning is that at any point in the execution, the assertions are entailed by the assumptions. The formulae \(F\) are specified in FOL/F [16], a variant of first-order logic.

RCF expressions can be transformed by structural equivalence into a normal form called a structure, consisting of a sequence of restrictions followed by a parallel composition of assumptions, outputs, and lets. These assumptions and assertions ready to be reduced are called active. An expression is safe if all active assertions are entailed by the active assumptions.

**Definition 1 (→-safety)**: A structure \(S\) is statically safe if \(P \vdash C\), where \(P\) are the active assumptions and \(C\) the active assertions of \(S\). An expression \(A\) is →-safe if for all structures \(S\) such that \(A \rightarrow^* S\), \(S\) is statically safe.

When reasoning about cryptographic protocol implementations, we are interested in the safety of programs executed in parallel with an arbitrary attacker. This property is called robust safety.

**Definition 2 (Opponents and robust →-safety)**: An expression \(O\) is an opponent if and only if \(O\) is closed and contains no assertions. A closed expression \(A\) is robustly →-safe if and only if the application \(O A\) is →-safe for all opponents \(O\).

Robust →-safety is the same as the robust safety defined in [16] and can be automatically verified using the F7 type checker.

### CoSP Framework (REVIEW)

The computational soundness proof developed in this paper follows CoSP [7], a general framework for conducting computational soundness proofs of symbolic cryptography and for embedding these proofs into process calculi. CoSP enables proving computational soundness results in a conceptually modular and generic way: every computational soundness proof for a cryptographic abstraction phrased in CoSP automatically holds for all embedded calculi, and the process of embedding process calculi is conceptually decoupled from computational soundness proofs.

CoSP provides a general symbolic model for expressing cryptographic abstractions. We introduce some central concepts such as constructors, destructors, and deduction relations.

**Definition 3 (CoSP terms)**: A constructor \(f\) is a symbol with a (possibly zero) arity. We write \(f/n \in C\) to denote that \(C\) contains a constructor \(f\) with arity \(n\). A nonce \(n\) is a symbol with zero arity. A message type \(T\) over \(C\) and \(N\) is a set of terms over constructors \(C\) and nonces \(N\). A destructor \(d\) of arity \(n\), written \(d/n\), over a message type \(T\) is a partial map \(T^n \rightarrow T\). If \(d\) is undefined on \(t_1, \ldots, t_n\), we say that \(d(t_1, \ldots, t_n)\) is undefined.