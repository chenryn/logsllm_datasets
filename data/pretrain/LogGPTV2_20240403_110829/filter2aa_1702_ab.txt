List the terms (tokens) that trigger further examination, their default risk level, and the
default warning (including the CWE identiﬁer(s), if applicable), all tab-separated. The terms
are primarily names of potentially-dangerous functions. Note that the reported risk level and
warning for some speciﬁc code may be different than the default, depending on how the term
is used. Combine with −D if you do not want the usual header. Flawﬁnder version 1.29
changed the separator from spaces to tabs, and added the default warning ﬁeld.
Selecting Input Data
−−allowlink
Allow the use of symbolic links; normally symbolic links are skipped. Don’t use this option
if you’re analyzing code by others; attackers could do many things to cause problems for an
analysis with this option enabled. For example, an attacker could insert symbolic links to
ﬁles such as /etc/passwd (leaking information about the ﬁle) or create a circular loop, which
would cause ﬂawﬁnder to run ‘‘forever’’. Another problem with enabling this option is that
if the same ﬁle is referenced multiple times using symbolic links, it will be analyzed multi-
ple times (and thus reported multiple times). Note that ﬂawﬁnder already includes some
protection against symbolic links to special ﬁle types such as device ﬁle types (e.g.,
/dev/zero or C:\mystuff\com1). Note that for ﬂawﬁnder version 1.01 and before, this was
the default.
−−followdotdir
Enter directories whose names begin with ".". Normally such directories are ignored, since
they normally include version control private data (such as .git/ or .svn/), build metadata
(such as .makepp), conﬁguration information, and so on.
−−nolink
Ignored. Historically this disabled following symbolic links; this behavior is now the
default.
−−patch=patchﬁle
−P patchﬁle
Examine the selected ﬁles or directories, but only report hits in lines that are added or modi-
ﬁed as described in the given patch ﬁle. The patch ﬁle must be in a recognized uniﬁed diff
format (e.g., the output of GNU "diff -u old new", "svn diff", or "git diff [commit]").
Flawﬁnder assumes that the patch has already been applied to the ﬁles. The patch ﬁle can
also include changes to irrelevant ﬁles (they will simply be ignored). The line numbers
given in the patch ﬁle are used to determine which lines were changed, so if you have modi-
ﬁed the ﬁles since the patch ﬁle was created, regenerate the patch ﬁle ﬁrst. Beware that the
ﬁle names of the new ﬁles given in the patch ﬁle must match exactly, including upper/lower
case, path preﬁx, and directory separator (\ vs. /). Only uniﬁed diff format is accepted (GNU
diff, svn diff, and git diff output is okay); if you have a different format, again regenerate it
ﬁrst. Only hits that occur on resultant changed lines, or immediately above and below them,
are reported. This option implies −−neverignore. Warning: Do not pass a patch ﬁle without
the −P, because ﬂawﬁnder will then try to treat the ﬁle as a source ﬁle. This will often work,
but the line numbers will be relative to the beginning of the patch ﬁle, not the positions in
the source code. Note that you must also provide the actual ﬁles to analyze, and not just the
patch ﬁle; when using −P ﬁles are only reported if they are both listed in the patch and also
listed (directly or indirectly) in the list of ﬁles to analyze.
Selecting Hits to Display
−−inputs
−I
Show only functions that obtain data from outside the program; this also sets minlevel to 0.
Flawﬁnder 
26 Aug 2017
4
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
−−minlevel=X
-m X
Set minimum risk level to X for inclusion in hitlist. This can be from 0 (‘‘no risk’’) to 5 (‘‘maxi-
mum risk’’); the default is 1.
−−falsepositive
−F
Do not include hits that are likely to be false positives. Currently, this means that function names
are ignored if they’re not followed by "(", and that declarations of character arrays aren’t noted.
Thus, if you have use a variable named "access" everywhere, this will eliminate references to this
ordinary variable. This isn’t the default, because this also increases the likelihood of missing
important hits; in particular, function names in #deﬁne clauses and calls through function pointers
will be missed.
−−neverignore
-n
Never ignore security issues, even if they hav e an ‘‘ignore’’ directive in a comment.
−−regexp=PA TTERN
-e PA TTERN
Only report hits with text that matches the regular expression pattern PATTERN. For example, to
only report hits containing the text "CWE-120", use ‘‘−−regex CWE-120’’. These option ﬂag
names are the same as grep.
Selecting Output Format
−−columns
−C
Show the column number (as well as the ﬁle name and line number) of each hit; this is
shown after the line number by adding a colon and the column number in the line (the ﬁrst
character in a line is column number 1). This is useful for editors that can jump to speciﬁc
columns, or for integrating with other tools (such as those to further ﬁlter out false posi-
tives).
−−context
−c
Show context, i.e., the line having the "hit"/potential ﬂaw. By default the line is shown
immediately after the warning.
−−csv
Generate output in comma-separated-value (CSV) format. This is the recommended format
for sending to other tools for processing. It will always generate a header row, followed by 0
or more data rows (one data row for each hit). Selecting this option automatically enables
−−quiet and −−dataonly. The headers are mostly self-explanatory. "File" is the ﬁlename,
"Line" is the line number, "Column" is the column (starting from 1), "Level" is the risk level
(0-5, 5 is riskiest), "Category" is the general ﬂawﬁnder category, "Name" is the name of the
triggering rule, "Warning" is text explaining why it is a hit (ﬁnding), "Suggestion" is text
suggesting how it might be ﬁxed, "Note" is other explanatory notes, "CWEs" is the list of
one or more CWEs, "Context" is the source code line triggering the hit, and "Fingerprint" is
the SHA-256 hash of the context once its leading and trailing whitespace have been removed
(the ﬁngerprint may help detect and eliminate later duplications). If you use Python3, the
hash is of the context when encoded as UTF-8.
−−dataonly
Flawﬁnder 
26 Aug 2017
5
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
−D
Don’t display the header and footer. Use this along with −−quiet to see just the data itself.
−−html
−H
Format the output as HTML instead of as simple text.
−−immediate
-i
Immediately display hits (don’t just wait until the end).
−−singleline
-S
Display as single line of text output for each hit. Useful for interacting with compilation
tools.
−−omittime
Omit timing information. This is useful for regression tests of ﬂawﬁnder itself, so that the
output doesn’t vary depending on how long the analysis takes.
−−quiet
−Q
Don’t display status information (i.e., which ﬁles are being examined) while the analysis is
going on.
Hitlist Management
−−savehitlist=F
Save all resulting hits (the "hitlist") to F.
−−loadhitlist=F
Load the hitlist from F instead of analyzing source programs. Warning: Do not load hitlists
from untrusted sources (for security reasons). These are internally implemented using
Python’s "pickle" facility, which trusts the input. Note that stored hitlists often cannot be
read when using an older version of Python, in particular, if sav ehitlist was used but
ﬂawﬁnder was run using Python 3, the hitlist can’t be loaded by running ﬂawﬁnder with
Python 2.
−−diffhitlist=F
Show only hits (loaded or analyzed) not in F. F was presumably created previously using
−−savehitlist. Warning: Do not diff hitlists from untrusted sources (for security reasons). If
the −−loadhitlist option is not provided, this will show the hits in the analyzed source code
ﬁles that were not previously stored in F. If used along with −−loadhitlist, this will show the
hits in the loaded hitlist not in F. The difference algorithm is conservative; hits are only con-
sidered the ‘‘same’’ if they hav e the same ﬁlename, line number, column position, function
name, and risk level.
Character Encoding
Flawﬁnder presumes that the character encoding your system uses is also the character encoding used by
your source ﬁles. Even if this isn’t correct, if you run ﬂawﬁnder with Python 2 these non-conformities
often do not impact processing in practice.
However, if you run ﬂawﬁnder with Python 3, this can be a problem. Python 3 wants the world to always
use encodings perfectly correctly, everywhere, even though the world often doesn’t care what Python 3
wants. This is a problem even if the non-conforming text is in comments or strings (where it often doesn’t
Flawﬁnder 
26 Aug 2017
6
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
matter). Python 3 fails to provide useful built-ins to deal with the messiness of the real world, so it’s non-
trivial to deal with this problem without depending on external libraries (which we’re trying to avoid).
A symptom of this problem is if you run ﬂawﬁnder and you see an error message like this:
UnicodeDecodeError: ’utf-8’ codec can’t decode byte ... in position ...: invalid continuation byte
If this happens to you, there are several options.
The ﬁrst option is to convert the encoding of the ﬁles to be analyzed so that it’s a single encoding (usually
the system encoding). For example, the program "iconv" can be used to convert encodings. This works
well if some ﬁles have one encoding, and some have another, but they are consistent within a single ﬁle. If
the ﬁles have encoding errors, you’ll have to ﬁx them. I strongly recommend using the UTF-8 encoding for
any source code; if you do that, many problems disappear.
The second option is to tell ﬂawﬁnder what the encoding of the ﬁles is. E.G., you can set the LANG envi-
ronment variable. You can set PYTHONIOENCODING to the encoding you want your output to be in, if
that’s different. This in theory would work well, but I haven’t had much success with this.
The third option is to run ﬂawﬁnder using Python 2 instead of Python 3. E.g., "python2 ﬂawﬁnder ...".
EXAMPLES
Here are various examples of how to inv oke ﬂawﬁnder. The ﬁrst examples show various simple command-