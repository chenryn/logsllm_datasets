### Oyente Limitations
Oyente is neither sound nor complete, and it reports a high false alarm rate for three out of its four bug classes. Additionally, it times out or provides no result for 711 contracts (46.7%) in our dataset. These findings are consistent with their published dataset, where nearly half of the tests yielded no results [33].

### Discussion on ZEUS
ZEUS classifies a contract as either safe or unsafe, indicating whether a contract is vulnerable in principle. An unsafe result does not guarantee an immediate exploit. For instance, several contracts are marked as unsafe due to potential integer overflow because they lack bounds checks. Although theoretically vulnerable, these contracts may not be immediately exploitable, such as when payouts use `uint256` for calculations. Similarly, contracts using timestamps for control flow may not be immediately affected, but a specific timestamp value could lead to an Ether flow issue during a `send` invocation.

### Fairness Evaluation
We selected representative contracts from the four classes (as per § VI-A) and applied contract-specific properties along with a common fairness policy across all contracts.

1. **DAO: CrowdFundDao [9]**
   - **Implementation**: A DAO scheme allowing investors to choose when to pay and withdraw funds.
   - **Policies**:
     - Blacklisted developers cannot participate.
     - Investments must exceed a threshold limit.
   - **Observation**: ZEUS determined that none of these checks were encoded in the contract.

2. **Game: DiceRoll [10]**
   - **Implementation**: A dice game where players join by placing a bet.
   - **Policy**: The number of dice rolls per player must be limited.
   - **Observation**: The game did not cap the number of dice rolls per user.

3. **Token: StandardToken [42]**
   - **Implementation**: Used for financial transactions.
   - **Policy**: Consider overflows on the receiver side during token transfers.
   - **Observation**: Some contracts, such as Campaign [5], do not consider overflows at the recipient.

4. **Wallet: Wallet [49]**
   - **Implementation**: Provides functionalities including a daily withdrawal limit.
   - **Policies**:
     - Users cannot send money to themselves.
     - There is a limit on the amount transferred per transaction.
   - **Observation**: Both policies reported violations.

5. **Common Policy: Selfdestruct**
   - **Policy**: The `selfdestruct` function should only be invoked by the owner.
   - **Observation**: 284 out of 1524 contracts used this construct, with about 5.6% reporting a violation without any false alarms.

### Performance Analysis
#### Instruction Overhead
ZEUS's Solidity to LLVM bitcode translator introduces checks for various bugs described in § III-A and § III-C. Figure 16a shows a CDF of the instruction overhead due to additional LLVM bitcode LOC introduced per contract. ZEUS introduces less than 50 LOC for 97% of contracts across five of the seven bug classes. For integer overflow/underflow, ZEUS’s checks account for less than 200 LOC in 95% of the contracts. However, detecting transaction order dependence incurs the highest overhead, with 20% of contracts requiring over 500 LOC for the required checks.

#### Verification Complexity
We measured the verification complexity by determining the number of rules generated and their depth per contract across the seven bug classes. Figures 16b and 16c plot the results. We observed that 75% of contracts generate fewer than 50 rules with a depth of around 700. Overall, integer overflow generates the most constraint rules and depth, with a maximum of 1035 rules and a depth of 277,345. This behavior aligns with our observation that contracts have significant arithmetic operations (see Fig. 15d).

#### Verification Time
We determined ZEUS’s verification time for each unique contract in our dataset and compared it with Oyente. Figure 16d plots the CDF of the results. ZEUS takes a minute or less to verify 97% of contracts (indicated by the vertical line). Only 44 out of 1524 contracts timed out or gave no result for one or more bug classes. In contrast, Oyente returned results for only 40% of contracts within one minute and provided no result or timeouts (even after 30 minutes) for about 43% of contracts.

### Case Studies
We demonstrate ZEUS’s versatility with other blockchain platforms and verification engines. First, we ported a popular Solidity contract to Fabric [24]. Second, we used SMACK [72] to verify fairness policies for the said contract.

#### Simple Dice [39]
- **Description**: A multi-player gambling contract where players place a minimum deposit (along with a fee) to play. Players have a 25% chance of winning the entire balance, and every 40th player wins the jackpot. The fee and deposit rate can only be changed by the owner and is publicly visible.
- **Policies**:
  - A minimum deposit is required to play.
  - Every 40th player wins the jackpot.
  - Only the owner can change the deposit and fee rate.
  - The owner cannot participate in the game.
  - Every player must have an equal chance of winning the jackpot.

##### Fabric
- **Porting**: We ported the Simple Dice contract to GO and linked it against Fabric’s mock-stub [25]. Since Seahorn does not support strings, we modified the mock-stub to take integers as input. We manually edited the GO code to place the correct assertions along the required program paths and then verified the policies using Seahorn.

##### SMACK
- **Modifications**:
  - Ported the Solidity to LLVM bitcode translator to work with 64 bytes.
  - Used different APIs for integer domain modeling.
  - Modified the APIs for verifier invocation.
- **Verification**: With our SMACK-compatible ZEUS, we verified the five fairness policies for Simple Dice.

Our experiences with both Fabric and SMACK suggest that it is easy to extend ZEUS to other blockchain platforms and verifiers with minor changes.

### Related Work
#### Smart Contract Bug Detection
We compare ZEUS with related work in smart contract bug detection, including Oyente [68], Bhargavan et al. [54], and Why3 [22], [50], which we have discussed earlier. Delmolino et al. [58] document several classes of mistakes in developing contracts, suggest ways to mitigate these errors, and advocate best practices for programming smart contracts. In contrast, ZEUS presents a formal verification framework for smart contracts that enables users to build and verify correctness and fairness policies.

#### Policy Specification
Naccio [60], PoET/Pslang [59], and Polymer [53] enable policy specification for security properties. Like prior work, ZEUS ensures that the verification policy is defined separately from the main application, making it easier to understand, verify, and modify the security policy. XACML [51] defines a declarative, fine-grained, attribute-based access control policy language that inspired ZEUS’s syntax for policy declaration.

### Conclusion
We present the design and implementation of ZEUS, a framework for analyzing safety properties of smart contracts. ZEUS leverages abstract interpretation and symbolic model checking, along with the power of CHCs to quickly ascertain verification conditions. We built the first Solidity to LLVM bitcode translator to automatically insert verification conditions given a policy specification. Our evaluation with over 22.4K Solidity smart contracts indicates that about 94.6% of them (with a net worth of more than $0.5 billion) are vulnerable. ZEUS is sound (with zero false negatives) and significantly outperforms Oyente for contracts in our dataset, with a low false positive rate and an order of magnitude improvement in verification time.

### Acknowledgments
We thank the anonymous reviewers for their valuable comments and Prasad Naldurg for his feedback on an earlier draft of the paper.

### References
[References listed here as provided in the original text]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of your original text.