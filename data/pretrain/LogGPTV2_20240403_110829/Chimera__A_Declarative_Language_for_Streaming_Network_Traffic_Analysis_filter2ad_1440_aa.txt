title:Chimera: A Declarative Language for Streaming Network Traffic Analysis
author:Kevin Borders and
Jonathan Springer and
Matthew Burnside
Chimera: A Declarative Language for Streaming Network Trafﬁc Analysis
Kevin Borders
National Security Agency
PI:EMAIL
Jonathan Springer
Reservoir Labs
PI:EMAIL
Matthew Burnside
National Security Agency
PI:EMAIL
Abstract
Intrusion detection systems play a vital role in network
security. Central to these systems is the language used to
express policies. Ideally, this language should be pow-
erful, implementation-agnostic, and cross-platform. Un-
fortunately, today’s popular intrusion detection systems
fall short of this goal. Each has their own policy lan-
guage in which expressing complicated logic requires
implementation-speciﬁc code. Database systems have
adapted SQL to handle streaming data, but have yet to
achieve the efﬁciency and ﬂexibility required for com-
plex intrusion detection tasks.
In this paper, we introduce Chimera, a declara-
tive query language for network trafﬁc processing that
bridges the gap between powerful intrusion detection
systems and a simple, platform-independent SQL syn-
tax. Chimera extends streaming SQL languages to better
handle network trafﬁc by adding structured data types,
ﬁrst-class functions, and dynamic window boundaries.
We show how these constructs can be applied to real-
world scenarios, such as side-jacking detection and DNS
feature extraction. Finally, we describe the implementa-
tion and evaluation of a compiler that translates Chimera
queries into low-level code for the Bro event language.
1 Introduction
Intrusion detection systems (IDSs) continue to play an
essential role in network security. One critical aspect of
IDS design is how users express analytic tasks. In partic-
ular, policy should be separate from the mechanism [21].
This leads to simpler policies that are easier to write and
easier to share because they have fewer implementation
constraints. Separation also increases interoperability,
which moves us closer to the goal of having a standard-
ized language for network trafﬁc analysis.
Unfortunately, current IDSs only partially separate
policy from mechanism. They each have their own
domain-speciﬁc languages, which are incompatible with
one other. Snort uses a declarative rule language for
deﬁning signatures [23], which is limited in its ability
to express stateful analytics. Bro [21] offers a more pow-
erful (Turing complete) event language, but complex op-
erations require procedural programming and direct in-
teraction with data structures, which is cumbersome and
leads to dependency between policy and mechanism.
Database systems have been attacking this problem
from the opposite end. SQL is a powerful, declarative,
standard language, and recent work has extended it to
support streaming queries [1, 3, 19]. While these systems
are typically too slow to serve as an IDS, Gigascope [7]
adopts a more limited SQL-based language and has suc-
cessfully applied it to packet processing. Unfortunately,
Gigascope cannot express many of the complex analytic
tasks that are possible in Bro.
In this paper, we introduce Chimera, a declara-
tive query language for network trafﬁc processing that
bridges the gap between powerful intrusion detection
platforms and simple, implementation-agnostic queries.
The goal is to provide an SQL-like syntax while main-
taining as much expressive power as possible, and with-
out signiﬁcantly impacting performance. We achieve this
goal by implementing Chimera as an independent lan-
guage that is compiled down into low-level policies for
other platforms. For this paper, we have written a com-
piler1 that translates Chimera queries into the Bro event
language [21].
Chimera is similar to streaming SQL languages, but
has some additional features that make it better-suited for
handling network trafﬁc. First, it supports structured data
types (lists and maps). This allows rows to more closely
reﬂect the structure of application-layer protocols, al-
most all of which contain structured data. Chimera also
makes dealing with these types easier by introducing a
SPLIT operator to break up lists into multiple rows, as
well as ﬁrst-class functions that can be applied to data
structures. Chimera also improves upon streaming SQL
by introducing dynamic windows. Instead of enforcing
strict window speciﬁcations at the table level, such as
“range 60 minutes, slide 1 minute", Chimera allows win-
dow boundary computation using dynamic expressions,
1Visit http://www.chimera-query.org for more information about
obtaining the Chimera compiler source code.
such as “UNTIL count() > 10". This makes it possible to
output aggregate results as soon as they are ready, which
is extremely important for intrusion prevention and ac-
tive response scenarios.
We motivate the design of Chimera by examining real-
world scenarios where detection requires complex state
tracking that is unavailable in a simple system like Snort
[23]. We look at existing work on detecting side-jacking
– an attack that steals a session ID from an HTTP cookie
[22] – and on ﬁnding malicious domains with the EX-
POSURE system [5]. We also consider two examples
of detecting DNS tunnels and identifying spam/phishing
servers. After describing the Chimera syntax, we present
example queries for these scenarios. When compared to
a previous Bro implementation [22], the query for side-
jacking demonstrates how analytics in the Chimera lan-
guage are very concise. The Chimera queries for extract-
ing features used by EXPOSURE [5] led us to identify
ambiguities in the original text, highlighting the need for
a standard network trafﬁc analysis language.
In ﬁnal part of the paper, we describe and evaluate the
implementation of a Chimera to Bro compiler. The com-
piler operates in two main stages: (1) it translates queries
into a relational algebra, and (2) it generates Bro event
language code. We compared the compiler’s output to
hand-optimized code for a number of queries by running
each side by side on real network trafﬁc. In the worst-
case example, compiled code was 3% slower than hand-
written code due to extra copying and event handlers. We
plan to add optimizations to minimize these issue in the
future, but our experiments show that the compiler gener-
ates code that with almost the same performance as hand-
written code even it is current form.
The rest of the paper is laid out as follows. Section
2 motivates our work with examples of stateful analyt-
ics. Section 3 describes the Chimera language. Section
4 presents Chimera queries for example scenarios. Sec-
tion 5 describes the Bro compiler. Section 6 evaluates
teh compiler and discusses future optimizations. Finally,
section 7 covers related work and section 8 concludes.
2 Motivation: Stateful Network Analytics
As attacks continue to increase in sophistication, so
must analytics that detect them. Over time it is becom-
ing more and more difﬁcult to characterize malicious be-
havior with simple Snort rules [23]. As a result, many
administrators rely on systems like Bro [21] that are able
to perform stateful analysis on high-level protocol ﬁelds,
rather than being constrained to individual packet or ﬂow
analysis.
This section outlines a number of scenarios in which
simple ﬁltering is not enough. The rest of the paper then
uses these scenarios to motivate the Chimera language
and its design. Keep in mind that the analytic techniques
presented in this section are not necessarily bulletproof,
or even practical in all situations. The point is not to
assess the quality of analytics, but to provide examples
of logical constructs that we would like to express in the
Chimera language.
2.1 Sidejacking
Sidejacking is a term used to describe the attack where a
hacker steals a session token from an unencrypted HTTP
cookie and then impersonates the legitimate user. This
attack is easy to pull off in a coffee-shop environment
where there is a public wireless network. Countermea-
sures include use of HTTPS, and are discussed in work
by Riley et al. [22].
Sidejacking can also be detected by monitoring net-
work trafﬁc. An implementation of sidejacking detec-
tion has been written for Bro [26]. This script works in
the following way:
1. Group incoming HTTP requests by session ID in
cookie.
2. When a new request arrives, are the client IP and
User-Agent the same?
3. If not, then report sidejacking.
As you can see, the analytic logic is straightforward,
but implementation requires non-trivial maintenance of
client state on a per-cookie basis.
2.2 Malicious Domains
A recent research project called EXPOSURE introduced
a set of sixteen features for detecting malicious domain
names [5]. Some of these features could operate on a
single domain name, such as the percentage of numerical
characters. Many of the features, however, require state
tracking across multiple DNS packets. In this paper, we
examine some of EXPOSURE’s stateful features. In par-
ticular, we will focus on a subset of the DNS answer- and
TTL-based features:
• Number of distinct IP addresses per domain name
• Number of domains that share the same IP address
• Average TTL value
• Number of TTL value changes
These features all require parsing the DNS protocol.
They also require per-domain state tracking, and the sec-
ond feature needs additional per-IP state tracking.
The authors of EXPOSURE also identify time-based
features that we do not discuss here. It would be possi-
ble to adapt the change point detection (CPD) algorithms
used by EXPOSURE to run in the Chimera framework.
However, describing the implementation of complex al-
gorithms in a streaming model is outside of the scope of
this work, and is orthogonal to the design of Chimera.
2.3 DNS Tunnels
The DNS protocol is designed to resolve information
about domain names. However, it can also be used for
covert communication by storing data in the requested
domain name (e.g., .hacker.com) and
sending data back to the client inside of the IP address
ﬁeld. While this is a low-bandwidth channel, the ubiq-
uity of the DNS protocol makes it likely to bypass ﬁre-
walls even in restricted networks.
There are many ways to detect DNS tunnels, but we
will discuss a particular method here because it high-
lights an interesting analytic technique. In this method,
the following steps are taken to ﬁnd DNS tunnels:
1. Keep track of all DNS response A records, indexing
by the A record IP address.
2. For 24 hours after a new MTA is seen, count the
number of distinct recipients in messages that tra-
verse that MTA.
3. If the count for a new MTA exceeds a threshold,
then report phishing/spam.
Though the description of this analytic is concise,
implementing it requires a few complicated operations.
First, there must be a data structure, such as a Bloom ﬁl-
ter, that keeps track of whether each MTA has been seen
before. That structure must have at least two windows so
that it does not start emitting old values after each time
it is purged. The next challenge is that the MTA path is
stored in multiple headers within each SMTP message.
2. When a packet is seen going to an IP address, re-
move the corresponding DNS response record.
3. If no packet is ever sent to the A record IP (within
a window), increment a counter for the client and
server IP addresses from the DNS message.
4. Report tunneling for clients or servers that exceed a
threshold of orphaned responses.
This analysis logic is again very straightforward.
It
assumes that IP address values in DNS responses from
tunnels will not actually be used as IP addresses, so most
of them will never see follow-up packets. Counting a
threshold will eliminate false positives from command-
line DNS look-ups (e.g., using the nslookup UNIX com-
mand) that do not have ensuing connections.
2.4 Phishing/Spam Detection
A lot of research has gone into phishing and spam detec-
tion. Some approaches look at message contents, while
others look at aggregate measurements like e-mail vol-
ume and rate of sending. Here, we will consider a de-
tector that looks for new mail transfer agents (MTAs)
through which e-mail is sent to a large number of dis-
tinct recipients. The analysis happens as follows:
1. Identify SMTP messages that have a “new" MTA in
their path.
Checking whether each MTA on the path is new either
requires applying a function to each value or splitting up
the SMTP message into one tuple for each MTA. When
new SMTP messages arrive, checking to see if one of
the MTAs is new within the past 24 hours again requires
splitting the tuple prior to a join operation.
3 The Chimera Language
3.1 Query Syntax
The highest level element in the Chimera language is
a query statement. Since Chimera operates passively,
the only type of query allowed right now is SELECT.
Chimera also includes a CREATE VIEW statement,
which is effectively a macro that can be used in place of
sub-queries. The syntax for a Chimera SELECT query is
very similar to SQL, and can be seen in Figure 1. Many
elements are shared and behave the same way, includ-
ing the FROM, WHERE, and UNION. The input and
output speciﬁcations are a bit different. Explicit data
sources are allowed in the query, including a ﬁle (PCAP
or user-deﬁned CSV), network interface, or list of ﬁle
names from standard input (the default). Similarly, out-
put will be sent to standard output unless a ﬁle is speci-
ﬁed. Chimera begins to differ more signiﬁcantly for the
GROUP BY and JOIN operations, as well as the newly
introduced SPLIT, which we discuss next. It also sup-
ports an expression syntax with different data and func-
tion types, which are described in sections 3.2 and 3.4.
3.1.1 GROUP BY
The Chimera language diverges from SQL and tra-
ditional streaming database in its semantics for the
GROUP BY clause. To support streaming, we have
added a TABLESIZE parameter and the UNTIL keyword
with an optional GLOBAL parameter and a Boolean ex-
pression. TABLESIZE speciﬁes the maximum number
of items to hold before discarding old values. (Chimera
does not yet implement more intelligent QoS or load
shedding like Aurora [1], but TABLESIZE effectively
enables memory limits.) The UNTIL condition deter-
mines when GROUP BY will generate output. It may
contain aggregate functions, such as count or average.
If GLOBAL is speciﬁed, then the aggregate functions are
evaluated with a single global state object, instead of sep-
arately for each key. In this case, GROUP BY will output
everything in the table when the UNTIL expression be-
comes true. This is similar to window-based grouping in
traditional streaming databases. If GLOBAL is omitted,
then each item in the GROUP BY table will be evaluated
and ﬂushed independently. This allows implementation
of partitioned windows, which are described by Arasu et
al. [3].
hselect_queryi ::=
[SOURCE {STDIN | FILE hfnamei | INTERFACE hifi}]
hselect_bodyi
[INTO {STDOUT | FILE hfnamei}]
hcreate_viewi ::=
hselect_bodyi ::=
[, hexpri [AS haliasi]]* }
CREATE VIEW haliasi AS hselect_bodyi
SELECT {* | hexpri [AS haliasi]
FROM htable_refi
[WHERE hbool_expri]
[GROUP BY hexpri [, hexpri]*
UNTIL [GLOBAL] hbool_expri
[TABLESIZE hrow_counti]
[HAVING hbool_expri]
[ORDER BY hexpri [, hexpri]* [ASC | DESC]
[LIMIT hrow_counti]]]
htable_refi ::=
[UNION hselect_bodyi]