to inform us about their A/V product and had to enter installation
mode to deal with updates. The next highest in the reboot group is
11.
The general response to CodeShield was positive. On a scale of
1-10, where 1 is Strongly Disagree, 5 is Neutral and 10 is Strongly
Agree, participants in both groups rated their system as usable. The
mean of the reboot group was 7.26, and switch group was 8. Partic-
ipants were generally indifferent about whether or not they would
like to continue using CodeShield, with responses close to Neutral.
And we have already mentioned, 7 of the 35 users (20%) continue
to use CodeShield at least 3 months after the study has completed.
One of the goals of CodeShield was to create a security mecha-
nism that was closer to the users’ mental model. The reason is that
if users understand what they are doing, and can map that to a sim-
ple security decision, then they are less likely to make dangerous
mistakes. Although not fully answered by our study, we believe
that the answer to the question “I understand the design rationale
of CodeShield”, group averages around 8-8.5, shows that there is a
general understanding and acceptance for the model presented by
CodeShield.
For all the survey questions the responses were generally posi-
tive, with the responses from the reboot group slightly less positive
then the switch group across all questions. We believe this is a re-
ﬂection of the overhead in entering installation mode for the reboot
group, but due to the size of the study there are no real statistically
signiﬁcant results to report.
One of the most interesting observations is that the reboot group
entered the installation mode signiﬁcantly fewer number of times
than the switch group. The average number of times the reboot only
participants entered installation mode was 5.25, whereas the aver-
age among the switch group was 16.66. The difference in the me-
dian, which is less affected by one or two outliers, is even more pro-
nounced: 3.5 for the reboot group and 17 for the switch group. We
also observe that in both groups, about 20% of installation modes
286
Reboot Group
Switch Group
Survey Question Range 1-10
Q1: The system was usable with CodeShield installed.
Q2: I would continue to use CodeShield after the study if that was an option
Q3: I felt like the extra work to get into installation mode was worthwhile
Q4: I understand the design rationale of CodeShield
Q5: I was surprised about the things that were blocked.
Q6: I would like Windows to have the features provided by CodeShield
Q7: I want to control what new programs can be run on my system
Q8: I would recommend CodeShield to friends and family
Use Statistics
S1: Average Days Between Installation
S2: Total Installation Mode Switches
S3: Useful Installation Mode Switches
S4: Unique Digital Signatures on System
S5: Total Reboots
File Statistics
S6: Unique Files WhiteListed due to Signatures
S7: Unique Files WhiteListed due to Trusted Installer
S8: Unique Files WhiteListed due to Installation Mode
7.25
4.8
4.7
8.65
6.35
5.85
7.85
5.7
Median Mean
7.5
4.5
5
9
7
5.5
8
5.5
Median Mean
17.68
12.15
5.25
3.5
3.5
4.25
73.15
72
36.5
44.05
Median Mean
345.5
232.5
183
394
207
248
9
5
7
8
5
8
9
6
8
5.2
6.46
8.06
5.8
7.2
8.67
6.27
StDev Median Mean
2.35
3.01
2.61
1.46
2.70
2.25
1.46
2.49
StDev Median Mean
13.48
6.48
4.21
19.15
25.14
StDev Median Mean
186
94
352
9.98
16.66
13.13
82.53
64.8
3.24
17
13
84
62
509
230
827
509
218
769
StDev
1.85
2.95
2.29
1.90
3.29
2.30
1.44
1.94
StDev
13.55
12.10
11
26.26
51.23
StDev
333
115
690
Table 3: This table breaks down several data points about behavior of users in the Reboot Group and the Switch Group. The ﬁrst
part reveals ﬁnal survey questions and statistics for the responses. Next are statistics regarding frequency of entering installation
mode and number of digital signatures on each machine. And ﬁnally there are general statistics about how often code entered the
whitelist and for what reason.
see no programs added to the whitelist; hence they are unnecessary.
We also note that although the mean switches to installation
mode for each group are far apart, the gap between the degree of
acceptance of CodeShield is smaller. On all questions reﬂecting
satisfaction with CodeShield, the average of the reboot group were
close to but slightly lower than those of the switch group.
Our interpretation for these results is that it is likely that most
of the entries into installation mode for the switch group are un-
necessary, meaning that the system will continue to function ﬁne
without them. In fact, most users can use their computer with very
sparse usage of the installation mode. However, because currently
CodeShield shows notiﬁcations for blocking or every dll, when a
user sees that something is blocked while doing a legitimate action,
the user enters installation mode to allow it. When directly switch-
ing to the installation mode is an option, the user is more likely to
enter installation mode. For the reboot group, the user is less likely
to actually enter the installation mode due the inconvenience; how-
ever, this may cause the user to somewhat dislike CodeShield.
We believe that these results conﬁrmed our conjecture that a
level of inconvenience for entering the installation mode is both
necessary and beneﬁcial. However, we should reﬁne CodeShield
to avoid making users feel that they need to enter the installation
mode. For example, we should avoid repeated notiﬁcations when
multiple DLLs are blocked for the same process.
The mean number of trusted certiﬁcates on each machine was
77, indicating many software vendors are signing their code. Even
more interesting is the fact that 798 unique certiﬁcates existed on
all 35 machines participating in the study. 345 appeared on 2 or
more machines. That leaves 453 certiﬁcates that appeared on a
single machine. This highlights the diversity of software installed.
This is also the reason that we believe a Personalized Application
Whitelisting approach is advantageous to a global approach.
Our data also included how many times each machine reboots
during the study, and this reboot count is dominated by those un-
related to CodeShield. In the reboot group the average was around
44 times in the 42 day study, and the switch group surprisingly had
more reboots, average of 65 (and a higher standard deviation), even
though this group wasn’t being made to reboot by CodeShield. We
found these numbers unexpectedly high, as our perception is that
most people merely close the laptop lid for the night. This ﬁnding
means that the attack of injecting malicious code only in memory
has only a short-term control over a system. This also suggests that
the few additional reboots required by CodeShield could be accept-
able.
8. CONCLUSION AND FUTURE WORK
We have demonstrated CodeShield as a practical system for non-
technical users to protect themselves from a variety of threats.
CodeShield detects and mark new data as it is added to disk, and
blocks any new content from being executed unless it has been
added to the systems personalized application whitelist. The sys-
tem also provides the user with a more intuitive model to under-
stand what they are currently doing on their system, namely in-
stead of ﬁne grained decisions about speciﬁc applications they can
merely decide “whether to install new software now.” If they de-
cide that is what they are trying to do, then they will put forth the
effort to install new software. If they decide that they are not in-
stalling new software then they do not have to do anything and the
execution will be stopped, keeping the system in its current state.
The results of our user study suggest that these installation events
are infrequent for most users, so even though installation now in-
curs an additional effort, that this is justiﬁed in order to achieve a
more secure system.
The types of attacks that CodeShield will prevent are of criti-
cal importance to both average home users as well organizations.
Anything that tries to add an executable in a stealthy way, such as
drive-by downloads, malicious documents or compromised exter-
nal media, will be blocked since the execution of the new binary
will be stopped. Social engineering attacks which exploit the user
will be harder as well because the perceived inconvenience should
outweigh the potential beneﬁt, but also because techniques which
try to confuse the user will also be more likely to fail because our
default is to deny. CodeShield has been tested on several different
types of attacks and all were stopped.
287
9. ACKNOWLEDGMENTS
This work was supported in part by Army Research Ofﬁce un-
der the grant “Towards a Scientiﬁc Basis for User Centric Security
Design". Work by C. Gates and N. Li were also supported by the
National Science Foundation under Grant No. 0905442.
References
[1] A. Apvrille, D. Gordon, S. Hallyn, M. Pourzandi, and
V. Roy. Digsig: Runtime authentication of binaries at kernel
level. In Proceedings of the 18th USENIX conference on
System administration, pages 59–66, Berkeley, CA, USA,
2004. USENIX Association.
[2] BIT9. Bit9 parity suite: Adaptive application whitelisting.
http://www.bit9.com/products/
bit9-parity-suite.php.
[3] J. C. Brustoloni and R. Villamarín-Salomón. Improving
security decisions with polymorphic and audited dialogs. In
SOUPS, pages 76–85, 2007.
[4] K. R. Butler, S. McLaughlin, and P. D. McDaniel.
Rootkit-resistant disks. In CCS ’08, pages 403–416, New
York, NY, USA, 2008. ACM.
[5] M. Corporation. Kernel data and ﬁltering support for vista
sp1 / windows server 2008. MSDN.
[6] L. F. Cranor. A framework for reasoning about the human in
the loop. In Proceedings of the 1st Conference on Usability,
Psychology, and Security, pages 1:1–1:15, Berkeley, CA,
USA, 2008. USENIX Association.
[7] D. Erickson, M. Casado, and N. McKeown. The
effectiveness of whitelisting: a user-study. In Conference on
Email and Anti-Spam, 2008.
[8] B. Fathi. Engineering windows 7, October 2008. MSDN
blog on User Account Control.
[9] S. Furnell, A. Jusoh, and D. Katsabas. The challenges of
understanding and using security: A survey of end-users.
Computers & Security, 25(1):27–35, 2006.
[10] J. Jang, D. Brumley, and S. Venkataraman. Bitshred: feature
hashing malware for scalable triage and semantic analysis.
In Proceedings of the 18th ACM conference on Computer
and communications security, CCS ’11, pages 309–320,
New York, NY, USA, 2011. ACM.
[11] G. H. Kim and E. H. Spafford. The design and
implementation of tripwire: a ﬁle system integrity checker.
In Proceedings of the 2nd ACM Conference on Computer
and communications security, CCS ’94, pages 18–29, New
York, NY, USA, 1994. ACM.
[12] M. Labs. Mcafee threats report: Third quarter 2011, Nov.
2011. White paper from McAfee.
[13] N. Leavitt. Internet security under attack: The undermining
of digital certiﬁcates. Computer, 44:17–20, 2011.
[14] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. Blade: an
attack-agnostic approach for preventing drive-by malware
infections. In ACMCCS ’10, pages 440–450, New York, NY,
USA, 2010. ACM.
[15] McAfee. Application control. http://www.mcafee.
com/us/products/application-control.aspx.
[16] Microsoft. Applocker. http://technet.microsoft.
com/en-us/library/dd548340.
[17] Y. Miretskiy, A. Das, C. P. Wright, and E. Zadok. AVFS: An
on-access anti-virus ﬁle system. In Proceedings of the 13th
USENIX Security Symposium (Security 2004), pages 73–88,
San Diego, CA, August 2004. USENIX Association.
[18] S. Motiee, K. Hawkey, and K. Beznosov. Do windows users
follow the principle of least privilege?: investigating user
account control practices. In SOUPS, 2010.
[19] J. Oberheide, E. Cooke, and F. Jahanian. CloudAV:
N-Version Antivirus in the Network Cloud. In Proceedings
of the 17th USENIX Security Symposium, San Jose, CA, July
2008.
[20] F. Raja, K. Hawkey, P. Jaferian, K. Beznosov, and K. S.
Booth. It’s too complicated, so I turned it off!: expectations,
perceptions, and misconceptions of personal ﬁrewalls. In
SafeConﬁg ’10, pages 53–62, New York, NY, USA, 2010.
ACM.
[21] R. Shein. Chapter 1: Whitelisting for Endpoint Defense,
pages 3–14. Auerbach Publications, 2011.
[22] R. Shein, H. F. Tipton, and M. Krause. Information Security
Management Handbook, Sixth Edition, Volume 5. Auerbach
Publications, 2011.
[23] S. Sheng, B. Magnien, P. Kumaraguru, A. Acquisti, L. F.
Cranor, J. I. Hong, and E. Nunge. Anti-phishing phil: the
design and evaluation of a game that teaches people not to
fall for phish. In SOUPS, pages 88–99, 2007.
[24] O. Sukwong, H. S. Kim, and J. C. Hoe. Commercial
antivirus software effectiveness: An empirical study. IEEE
Computer, 44(3):63–70, 2011.
[25] R. Villamarín-Salomón and J. C. Brustoloni. Using
reinforcement to strengthen users’ secure behaviors. In CHI,
pages 363–372, 2010.
[26] Y. Wang, R. Agrawal, and B.-Y. Choi. Light weight
anti-phishing with user whitelisting in a web browser. In
Proceedings of IEEE Region 5 Conference, pages 1–4, Apr.
2008.
[27] R. Wash. Folk models of home computer security. In SOUPS
’10, pages 11:1–11:16, New York, NY, USA, 2010. ACM.
[28] Y. Wu and R. H. C. Yap. Towards a binary integrity system
for windows. In ASIACCS ’11, pages 503–507, New York,
NY, USA, 2011. ACM.
[29] G. Wurster and P. C. van Oorschot. Self-signed executables:
restricting replacement of program binaries by malware. In
Proceedings of the 2nd USENIX workshop on Hot topics in
security, pages 8:1–8:5, Berkeley, CA, USA, 2007. USENIX
Association.
[30] H. Xia and J. C. Brustoloni. Hardening web browsers against
man-in-the-middle and eavesdropping attacks. In WWW,
pages 489–498, 2005.
288