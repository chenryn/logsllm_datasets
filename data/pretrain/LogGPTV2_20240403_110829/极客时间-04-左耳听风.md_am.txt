# 非监督式学习对于非监督式学习，也就是说，数据是没有被标注过的，所以相关的机器学习算法需要找到这些数据中的共性。因为大量的数据是没有被标识过的，所以这种学习方式可以让大量未标识的数据能够更有价值。而且，非监督式的学习，可以为我们找到人类很难发现的数据里的规律或模型。所以，也有人将这种学习称为"特征点学习"。其可以让我们自动地为数据进行分类，并找到分类的模型。一般来说，非监督式学习会应用在一些交易型的数据中。比如，有一堆的用户购买数据，但是对于人类来说，我们很难找到用户属性和购买商品类型之间的关系，而非监督式学习算法可以帮助我们找到他们之间的关系。比如，一个在某一年龄段区间的女生购买了某种肥皂，有可能说明这个女生在怀孕期，或是某人购买儿童用品，有可能说明这个人的关系链中有孩子，等等。于是这些信息会被用作一些所谓的精准市场营销活动，从而可以增加商品销量。我们这么来说吧，监督式学习是在被告诉过正确的答案之后的学习，而非监督式学习是在没有被告诉正确答案时的学习，所以说，非监督式的学习是在大量的非常混乱的数据中找寻一些潜在的关系，这个成本也比较高。这种非监督式学习也会经常被用来检测一些不正常的事情发生，比如信用卡的诈骗或是盗刷。也有被用在推荐系统中，比如买了这个商品的人又买了别的什么东西，或是如果某个人喜欢某篇文章、某个音乐、某个餐馆，那么可能他会喜欢某款车、某个明星，或某个地方。在监督式的学习的算法下，我们可以用一组"狗"的照片来确定某个照片中的物体是不是狗。而在非监督式的学习算法下，我们可以通过一个照片来找到与其相似事物的照片。这两种学习方式都有各自适用的场景。
# 如何找到数据的规律和关联机器学习基本就是在已知的样本数据中寻找数据的规律，在未知的数据中找数据的关系。所以，这就需要一定的数学知识了，但对于刚入门的人来说，学好高数、线性代数、概率论、数据建模等大学本科的数学知识应该就够用了。以前上大学时，总觉得这些知识没什么用处，原来只不过是自己太low，还没有从事会运用到这些知识的工作。总之，机器学习中的基本方法论是这样的。1.  要找到数据中的规律，你需要找到数据中的特征点。2.  把特征点抽象成数学中的向量，也就是所谓的坐标轴。一个复杂的学习可能会有成十上百的坐标轴。3.  抽象成数学向量后，就可以通过某种数学公式来表达这类数据（就像 y=ax+b    是直线的公式），这就是数据建模。这个数据公式就是我们找出来的规律。通过这个规律，我们才可能关联类似的数据。当然，也有更为简单粗暴的玩法。1.  把数据中的特征点抽象成数学中的向量。2.  每个向量一个权重。3.  写个算法来找各个向量的权重是什么。有人把这个事叫"数据搅拌机"。据说，这种简单粗暴的方式超过了那些所谓的明确的数学公式或规则。这种"土办法"有时候会比高大上的数学更有效，哈哈。关于机器学习这个事，你可以读一读 [Machine Learning isFun!](https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471)这篇文章，以及它的[中文翻译版](https://zhuanlan.zhihu.com/p/24339995)。
# 相关算法对于监督式学习，有如下经典算法。1.  决策树（Decision Tree）。比如自动化放贷、风控。2.  朴素贝叶斯分类（Naive Bayesian    classification）。可以用于判断垃圾邮件，对新闻的类别进行分类，比如科技、政治、运动，判断文本表达的感情是积极的还是消极的，以及人脸识别等。3.  最小二乘法（Ordinary Least Squares Regression）。算是一种线性回归。4.  逻辑回归（Logisitic    Regression）。一种强大的统计学方法，可以用一个或多个变量来表示一个二项式结果。它可以用于信用评分、计算营销活动的成功率、预测某个产品的收入等。5.  支持向量机（Support Vector    Machine，SVM）。可以用于基于图像的性别检测，图像分类等。6.  集成方法（Ensemble    methods）。通过构建一组分类器，然后根据它们的预测结果进行加权投票来对新的数据点进行分类。原始的集成方法是贝叶斯平均，但是最近的算法包括纠错输出编码、Bagging    和 Boosting。对于非监督式的学习，有如下经典算法。1.  聚类算法（Clustering    Algorithms）。聚类算法有很多，目标是给数据分类。2.  主成分分析（Principal Component Analysis，PCA）。PCA    的一些应用包括压缩、简化数据，便于学习和可视化等。3.  奇异值分解（Singular Value Decomposition，SVD）。实际上，PCA 是 SVD    的一个简单应用。在计算机视觉中，第一个人脸识别算法使用 PCA 和 SVD    来将面部表示为"特征面"的线性组合，进行降维，然后通过简单的方法将面部匹配到身份。虽然现代方法更复杂，但很多方面仍然依赖于类似的技术。4.  独立成分分析（Independent Component Analysis，ICA）。ICA    是一种统计技术，主要用于揭示随机变量、测量值或信号集中的隐藏因素。上面的这些相关算法来源自博文《[The 10 Algorithms Machine LearningEngineers Need toKnow](https://www.kdnuggets.com/2016/08/10-algorithms-machine-learning-engineers.html)》。
# 相关推荐学习机器学习有几个课是必须要上的，具体如下。-   吴恩达教授（Andrew Ng）在 [Coursera    上的机器学习课程](https://www.coursera.org/learn/machine-learning)非常棒。我强烈建议从此入手。对于任何拥有计算机科学学位的人，或是还能记住一点点数学的人来说，都非常容易入门。这个斯坦福大学的课程后面是有作业的，请尽量拿满分。另外，[网易公开课上也有该课程](http://open.163.com/special/opencourse/machinelearning.html)。-   卡内基梅隆大学计算机科学学院汤姆·米切尔（Tom    Mitchell）教授的机器学习课程，这里有[英文原版视频和课件    PDF](http://www.cs.cmu.edu/~tom/10701_sp11/lectures.shtml)    。汤姆·米切尔是全球 AI    界顶级大牛，在机器学习、人工智能、认知神经科学等领域都有建树，撰写了机器学习方面最早的教科书之一[《机器学习》](http://item.jd.com/10131321.html)，被誉为入门必读图书。-   加利福尼亚理工学院亚瑟·阿布·穆斯塔法（Yaser Abu-Mostafa）教授的    [Learning from Data 系列课程](http://work.caltech.edu/lectures.html)    。本课程涵盖机器学习的基本理论和算法，并将理论与实践相结合，更具实践指导意义，适合进阶。除了上述的那些课程外，下面这些资源也很不错。-   YouTube 上的 Google Developers 的 [Machine Learning Recipes with    Josh    Gordon](https://www.youtube.com/playlist?list=PLOU2XLYxmsIIuiBfYad6rFYQU_jL2ryal)    。这 9 集视频，每集不到 10 分钟，从 Hello World 讲到如何使用    TensorFlow，值得一看。-   还有 [Practical Machine Learning Tutorial with Python    Introduction](https://pythonprogramming.net/machine-learning-tutorial-python-introduction/)    上面一系列的用 Python 带着你玩 Machine Learning 的教程。-   Medium 上的 [Machine Learning -    101](https://medium.com/machine-learning-101)    讲述了好多我们上面提到过的经典算法。-   还有，Medium 上的 [Machine Learning for    Humans](https://medium.com/machine-learning-for-humans)，不仅提供了入门指导，更介绍了各种优质的学习资源。-   [杰森·布朗利（Jason    Brownlee）博士的博客](https://machinelearningmastery.com/blog/)    也是非常值得一读，其中好多的 "How-To"，会让你有很多的收获。-   [i am trask](http://iamtrask.github.io) 也是一个很不错的博客。-   关于 Deep Learning 中神经网络的学习，推荐 YouTube 介绍视频 [Neural    Networks](https://www.youtube.com/playlist?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi)。-   用 Python 做自然语言处理[Natural Language Processing with    Python](http://www.nltk.org/book/)。-   以及 GitHub 上的 [Machine Learning 和 Deep    Learning](https://github.com/ujjwalkarn/Machine-Learning-Tutorials)    的相关教程列表。此外，还有一些值得翻阅的图书。-   [《机器学习》](https://cs.nju.edu.cn/zhouzh/zhouzh.files/publication/MLbook2016.htm)，南京大学周志华教授著。它是一本机器学习方面的入门级教科书，适合本科三年级以上的学生学习。这本书如同一张地图一般，让你能"观其大略"，了解机器学习的各个种类、各个学派，其覆盖面与同类英文书籍相较不遑多让。-   [A Course In Machine    Learning](http://ciml.info/)，马里兰大学哈尔·道姆（Hal Daumé    III）副教授著。    这本书讲述了几种经典机器学习算法，包括决策树、感知器神经元、kNN    算法、K-means    聚类算法、各种线性模型（包括对梯度下降、支持向量机等的介绍）、概率建模、神经网络、非监督学习等很多主题，还讲了各种算法使用时的经验技巧，适合初学者学习。此外，官网还提供了免费电子版。-   [Deep    Learning](http://www.deeplearningbook.org/)，麻省理工学院伊恩·古德费洛（Ian    Goodfellow）、友华·本吉奥（Yoshua Benjio）和亚伦·考维尔（Aaron    Courville）著。这本书是深度学习专题的经典图书。它从历史的角度，将读者带进深度学习的世界。深度学习使用多层的（深度的）神经元网络，通过梯度下降算法来实现机器学习，对于监督式和非监督式学习都有大量应用。如果读者对该领域有兴趣，可以深入阅读本书。本书官网提供免费电子版，但不提供下载。实体书（英文原版或中文翻译版）可以在网上买到。-   [Reinforcement    Learning](http://www.freetechbooks.com/reinforcement-learning-an-introduction-second-edition-draft-t1282.html)，安德鲁·巴托（Andrew    G.Barto）和理查德·萨顿（Richard S.    Sutton）著。这本书是强化学习（Reinforcement    Learning）方面的入门书。它覆盖了马尔可夫决策过程（MDP）、Q-Learning、Sarsa、TD-Lamda    等方面。这本书的作者是强化学习方面的创始人之一。强化学习（结合深度学习）在围棋程序    AlphaGo 和自动驾驶等方面都有着重要的应用。-   [Pattern Recognition and Machine    Learning](https://www.amazon.com/Pattern-Recognition-Learning-Information-Statistics/dp/0387310738)    ，微软剑桥研究院克里斯托夫·比肖普（Christoph M.    Bishop）著。这本书讲述了模式识别的技术，包括机器学习在模式识别中的应用。模式识别在图像识别、自然语言处理、控制论等多个领域都有应用。日常生活中扫描仪的    OCR、平板或手机的手写输入等都属于该领域的研究。好了，今天推荐的内容就这些。我目前也在学习中，希望能够跟你一起交流探讨，也期望能得到你的指教和帮助。![](Images/1c1e992cf41f5294df097aabed82f9e4.png){savepage-src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg"}
# 15 \| 时间管理：同扭曲时间的事儿抗争我一直说，时间是人生中最宝贵的财富，今天我就来跟你聊聊时间管理方面的话题。关于时间管理，我以前在外企工作时，受过一个专门的培训，后来我也在工作中总结过自己的方式。时间管理是非常重要的，因为时间过得实在是太快了，快得让你有点受不了，而看似忙碌的我们似乎在这一年中也没有做太多事，尤其是让自己能成长的事情。有那么一句话是这么说，老天很公平，给了所有人同样多的时间，而有的人能够把时间用好，有的人则没有把时间用好。日积月累，人和人的差距就越来越大了。之前的文章和你讲过，我在工作强度很大的情况下，依然可以找到时间来学习和提升自己，主要是我自己很渴望学习。今天我就想和你聊一下，除了自己对某件事情的热情外，我们还有什么方法可以管理好自己的时间。不过，说实话，在安排时间方面，我成长于一个相对于今天算是比较好的环境，举几个例子。-   那个年代，没有智能手机，工作中也不用实时聊天工具。而现在，很多公司都会有若干个聊天群，所有人都可以把信息发给所有的人，而不管这个事是否与你相关。但这些信息无法像邮件那样根据邮件标题聚合，或是通过设置规则自动分类......于是你工作在了一个信息杂乱无章的环境里，而且还在不断地被人打扰，不断地被人打断。-   那个年代，别人要来找我开会，需要先给我发会议邀请，而且发会议邀请的时候，会找我日历上空闲的时间段来确定会议时间。所以，我可以把很多工作安排在我的日历上，通过邮箱（Outlook    或是 Gmail    都有这样的功能）共享出去。这样，别人都会自觉地绕开我有安排的时间段来找我。    而今天，我看到很多公司直接在微信上联系。你要是回复慢了，电话直接打过来，直接叫你去开会。不像我那个年代，老板临时给员工开会也要问一下员工有没有时间，但现在的工作环境连问都不问，直接一句，你来一下。-   那个年代，我们喜欢有计划地安排工作，然后按此执行。还记得在路透工作的时候，管理者们都说，你工作时如果有    70% 的时间能花在项目开发上，算是很高效了，一般来说，正常值也就是 50%    左右。在亚马逊的时候，每次开会都会把会议中要讨论的事打印出来，前 10    分钟大家都在读文档，然后直接讨论，所以基本上会议都保持在半小时左右。    这可能是外企的好处吧，从上到下都知道时间管理是很重要的事，所以，从管理层到执行层都会想方设法帮助程序员专注地做好开发工作。包括尽可能的不开会，不开长会，需求和设计都是要论证很久才会决定做不做，项目管理会帮你把你处理额外工作的时间也算进去，还会把你在学习上花的时间也计算进去。所以，时间在整个组织上能够被有效地管理和安排着。完全不像今天国内的互联网公司。    所以，我以前管理自己的时间还是比较容易的，然而，现在人的工作环境的确是非常不利于管理。不过，我还是想在这里谈一下如何管理自己的时间，希望对你有帮助。    ``{=html}