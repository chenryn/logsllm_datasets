口在主从服务器进行命令传播期间，从服务器需要向主服务器发送REPLICATIONACK
 REDIS_FORCE_AOF 标志强制服务器将当前执行的命令写人到AOF 文件里面,
口 REDIS_ASKING 标志表示客户端向集群节点（运行在集群模式下的服务器）发送了
REDIS_CLOSE_AFTER_REPLY 标志表示有用户对这个客户端执行了CLIENTKILL
口B
口 REDIS_DIRTY_CAS 标志表示事务使用WATCH命令监视的数据库键已经被修改
通常情况下，Redis 只会将那些对数据库进行了修改的命令写入到 AOF 文件，并复
 REDIS_MULTI标志表示客户端正在执行事务。
MASTER_FORCE_REPLY标志，否则发送操作会被拒绝执行。
命令，在发送这个命令之前，从服务器必须打开主服务器对应的客户端的 REDIS_
命令会使客户端打开 REDIS_FORCE_AOF 标志和 REDIS_FORCE_REPL 标志。
执行PUBSUB 命令会使客户端打开 REDIS_FORCE_AOF 标志，执行 SCRIPT LOAD
REDIS_FORCE_REPL标志强制主服务器将当前执行的命令复制给所有从服务器。
ASKING命令。
客户端积存在输出缓冲区中的所有内容发送给客户端，然后关闭客户端。
命令，或者客户端发送给服务器的命令请求中包含了错误的协议内容。服务器会将
客户端。
受到这个客户端影响。积存在输出缓冲区中的所有内容会直接被释放，不会返回给
服务器会在下一次执行serverCron函数时关闭这个客户端，以免服务器的稳定性
REDIS_CLOSE_ASAP标志表示客户端的输出缓冲区大小超出了服务器允许的范围，
然会执行失败。这两个标志只能在客户端打开了REDIS_MULTI标志的情况下使用。
示事务的安全性已经被破坏，只要这两个标记中的任意一个被打开，EXEC命令必
REDIS_DIRTY_EXEC标志表示事务在命令人队时出现了错误，以上两个标志都表
志已经打开的情况下使用。
态中脱离出来，不再阻塞。REDIS_UNBLOCKED 标志只能在 REDIS_BLOCKED 标
 PUBSUB 命令和 SCRIPT LOAD 命令的特殊性 
---
## Page 171
1GB，否则服务器将关闭这个客户端。
13.1.4输入缓冲区
有从服务器。
本，服务器需要使用 REDIS_FORCE_REPL 标志，强制将 SCRIPT LOAD 命令复制给所
AOF文件时，服务器可以产生相同的副作用。
需要使用 REDIS_FORCE_AOF 标志，强制将这个命令写入AOF文件，使得将来在载入
令没有修改数据库，但它修改了服务器状态，所以它是一个带有副作用的命令，服务器
输人缓冲区的大小会根据输人内容动态地缩小或者扩大，但它的最大大小不能超过
图 13-4展示了这个 SDS 值以及 querybuf 属性的样子。
那么客户端状态的 querybuf 属性将是一个包含以下内容的 SDS 值：
举个例子，如果客户端向服务器发送了以下命令请求：
客户端状态的输人缓冲区用于保存客户端发送的命令请求：
*3\r\ns3\rnSET\r\n$3\r\nkey\r\n$5\r\nvalue\r\n
SET key value
) redisClient;
typedef struct redisclient ↑
#这是专门用于执行Lua 脚本包含的 Redis 命令的伪客户端
REDIS_SLAVE I REDIS_PRE_PSYNC
客户端是一个从服务器，并且版本低于 Redis 2.8
客户端正在执行事务，但事务的安全性已被破坏
REDIS_BLOCKED
#客户端正在被列表命令阻塞
REDIS_MASTER
客户端是一个主服务器
以下是一些flags属性的例子:
另外，为了让主服务器和从服务器都可以正确地载入 SCRIPT LOAD 命令指定的脚
!..·
sds querybuf;
!.·.
第13章客户端·167
---
## Page 172
168·第二部分单机数据库的实现
字"SET"本身也是一个参数。
的 argv 属性和 argc 属性。
行的命令，而之后的其他项则是传给命令的参数。
状态的 argv 属性和 argc 属性:
将对命令请求的内容进行分析，并将得出的命令参数以及命令参数的个数分别保存到客户端
13.1.5命令与命令参数
举个例子，对于图 13-4 所示的 querybuf 属性来说，服务器将分析并创建图 13-5 所示
在服务器将客户端发送的命令请求保存到客户端状态的 guerybuf 属性之后，服务器
注意，在图13-5 展示的客户端状态中，argc 属性的值为 3，而不是2，因为命令的名
argc属性则负责记录argv数组的长度。
argv属性是一个数组，数组中的每个项都是一个字符串对象，其中 argv［0］是要执
typedef struct redisclient
redisClient
 redisClient;
querybuf
!...
!!...
int argc;
robj **argv;
redisclient
argc
argv
m
·
free
 sdshdr
buf
图13-5argv 属性和 argc 属性示例
图13-4
argv[0]
"SET"
querybuf 属性示例
stringobjectstringobject
 argv[1]
"key"
 argv[1]
"value"
---
## Page 173
13.1.7输出缓冲区
"set"、或者"SeT"等等，查找的结果都是相同的。
针指向目标 redisCommand 结构的整个过程。
属性中保存的命令参数信息，调用命令实现函数，执行客户端指定的命令。
针指向这个结构：
redisCommand 结构时，它会将客户端状态的cmd 指
信息。
现函数、命令的标志、命令应该给定的参数个数、命令的总执行次数和总消耗时长等统计
了命令的名字，字典的值是命令所对应的redisCommand 结构，这个结构保存了命令的实
argv［0］的值，在命令表中查找命令所对应的命令实现函数。
13.1.6
图13-7演示了服务器在 argv［0］为“SET"时，查找命令表并将客户端状态的 cmd 指
当程序在命令表中成功找到argv[0］所对应的
图13-6展示了一个命令表示例，该表是一个字典，字典的键是一个 SDS 结构，保存
当服务器从协议内容中分析并得出 argv 属性和 argc 属性的值之后，服务器将根据项
执行命令所得的命令回复会被保存在客户端状态的输出缓冲区里面，每个客户端都有两
针对命令表的查找操作不区分输人字母的大小写，所以无论argv［0］是"SET"、
之后，服务器就可以使用 cmd 属性所指向的 redisCommand 结构，以及 argv、argc
typedef struct redisClient {
redisClient;
!...
struct redisCommand *cmd;
命令的实现函数
图13-7
"rpush"
"get"
"set"
dict
·
查找命令并设置cmd 属性
redisCommand
 redisCommand
 redisCommand
"rpush"
"get"
"set"
2)设置
dict
图13-6命令表
redisClient
第13章客户端·169
redisCommand
redisCommand
redisCommand
cmd
···
---
## Page 174
170·第二部分单机数据库的实现
复，而不必受到固定大小缓冲区 16 KB 大小的限制。
器就会开始使用可变大小缓冲区。
的默认大小为16KB。
则记录了 buf 数组目前已使用的字节数量。
个输出缓冲区可用，一个缓冲区的大小是固定的，另一个缓冲区的大小是可变的：
一个或多个字符串对象组成：
REDIS_REPLY_CHUNK_BYTES 常量目前的默认值为16*1024，也即是说，buf 数组
可变大小缓冲区由 reply 链表和
 固定大小的缓冲区用于保存那些长度比较小的回复，比如 OK、简短的字符串值、整
图 13-9 展示了一个包含三个字符串对象的reply链表。
通过使用链表来连接多个字符申对象，服务器可以为客户端保存一个非常长的命令回
typedef struct redisclient
当 buf 数组的空间已经用完，
图13-8展示了--个使用固定大小缓冲区来保存返回值+OK\r\n的例子。
buf是一个大小为 REDIS_REPLY_CHUNK_BYTES 字节的字节数组，而 bufpos 属性
typedef struct redisClient {
客户端的固定大小缓冲区由 buf 和 bufpos 两个属性组成：
口可变大小的缓冲区用于保存那些长度比较大的回复，比如一个非常长的字符申值,
} redisClient;
 redisClient;
数值、错误回复等等。
一个由很多项组成的列表，一个包含了很多元素的集合等等。
list *reply;
!...
int bufpos;
char buf[REDIS_REPLY_CHUNK_BYTES];
redisClient
reply
Stringobject
图 13-9可变大小缓冲区示例
，或者回复因为太大而没办法放进 buf 数组里面时，服务
redisClient
Stringobject
bufpos
buf
:
图13-8固定大小缓冲区示例
+oo
stringobject
---
## Page 175
13.1.9
说明。
会拒绝执行客户端发送的命令请求。
身份验证功能的话，那么即使 authenticated属性的值为O（这是默认值），服务器也不
求了：
的值就会从0变为1，如图13-11所示，这时客户端就可以像往常一样向服务器发送命令请
之外，客户端发送的所有其他命令都会被服务器拒绝执行：
属性将如图13-10所示。
的值为1，那么表示客户端已经通过了身份验证。
13.1.8
关于服务器身份验证的更多信息可以参考示例配置文件对 requirepass 选项的相关
当客户端authenticated属性的值为O时，除了AUTH命令
举个例子，对于一个尚未进行身份验证的客户端来说，客户端状态的 authenticated
最后，客户端还有几个和时间有关的属性：
authenticated 属性仅在服务器启用了身份验证功能时使用。如果服务器没有启用
redis> SET msg "hello world"
#authenticated 属性的值从 o 变为 1
当客户端通过AUTH命令成功进行身份验证之后，客户端状态 authenticated 属性
PONG
redis> PING
redis> SET msg "hello world"
(error) NoAUTH Authentication required.
如果 authenticated 的值为O，那么表示客户端未通过身份验证；如果 authenticated
typedef struct redisClient ↑
客户端状态的 authenticated 属性用于记录客户端是否通过了身份验证：
redis> PING
 redisClient;
!.··
int authenticated;
时间
身份验证
图13-11已经通过身
图13-10未验证身份
第13章客户端171
份验证的客户端状态
时的客户端状态
authenticated
 redisClient
authenticated
redisClient
---
## Page 176
172·第二部分单机数据库的实现
末尾，如图13-12所示，其中用虚线包围的就是服务器为c3新创建的客户端状态。
客户端创建相应的客户端状态，并将这个新的客户端状态添加到服务器状态结构clients
connect函数连接到服务器时，服务器就会调用连接事件处理器（在第12章有介绍），为
13.2.1创建普通客户端
客户端的方法。
（soft limit）的时间，稍后介绍输出缓冲区大小限制的时候会详细说明这个属性的作用。
端与服务器最后一次进行互动以来，已经过去了多少秒，CLIENT list 命令的idle 域记录
这里的互动可以是客户端向服务器发送命令请求，也可以是服务器向客户端发送命令回复。
接了多少秒，CLIENT list命令的 age 域记录了这个秒数：
客户端c3连接到服务器之后，服务器会将c3所对应的客户端状态添加到clients 链表的
链表的末尾。
13.2
了这个秒数：
举个例子，假设当前有c1和c2两个普通客户端正在连接服务器，那么当一个新的普通
如果客户端是通过网络连接与服务器进行连接的普通客户端，那么在客户端使用
服务器使用不同的方式来创建和关闭不同类型的客户端，本节将介绍服务器创建和关闭
lastinteraction属性可以用来计算客户端的空转（idle）时间，也即是，距离客户
obuf_soft_limit_reached_time 属性记录了输出缓冲区第一次到达软性限制
lastinteraction 属性记录了客户端与服务器最后一次进行互动（interaction）的时间，
typedef struct redisClient 
redis> CLIENT list
redis> CLIENT list
1 redisClient;
客户端的创建与关闭
time_t obuf_soft_limit_reached_time;
time_t lastinteraction;
time_t ctime;
!.·
---
## Page 177
的输出缓冲区的大小，并在缓冲区的大小超出范围时，执行相应的限制操作。
组成，理论上来说，这个缓冲区可以保存任意长的命令回复。
13.2.2关闭普通客户端
但是，为了避免客户端的回复过大，占用过多的服务器资源，服务器会时刻检查客户端
口 软性限制（sof limit）：如果输出缓冲区的大小超过了软性限制所设置的大小，但
口 硬性限制（hard limit）：如果输出缓冲区的大小超过了硬性限制所设置的大小，那
服务器使用两种模式来限制客户端输出缓冲区的大小：
前面介绍输出缓冲区的时候提到过，可变大小缓冲区由一个链表和任意多个字符申对象
口 如果要发送给客户端的命令回复的大小超过了输出缓冲区的限制大小，那么这个客
口如果用户为服务器设置了timeout 配置选项，那么当客户端的空转时间超过
口如果客户端成为了CLIENTKILL命令的目标，那么它也会被关闭。
口如果客户端向服务器发送了带有不符合协议格式的命令请求，那么这个客户端也会
口如果客户端进程退出或者被杀死，那么客户端与服务器之间的网络连接将被关闭，
一个普通客户端可以因为多种原因而被关闭：
么服务器立即关闭客户端。
那么这个客户端会被服务器关闭。
户端会被服务器关闭。
被服务器关闭。
从而造成客户端被关闭。
之内，不再超出软性限制，那么客户端就不会被关闭，并且obuf_soft_limit_
定的时长，那么服务器将关闭客户端；相反地，如果输出缓冲区的大小在指定时间
视客户端，如果输出缓冲区的大小一直超出软性限制，并且持续时间超过服务器设
reached_time 属性记录下客户端到达软性限制的起始时间；之后服务器会继续监
还没超过硬性限制，那么服务器将使用客户端状态结构的obuf_soft_limit_
转时间超过了timeout选项的值，客户端也不会被服务器关闭。
志），或者正在执行SUBSCRIBE、PSUBSCRIBE等订阅命令，那么即使客户端的空
REDIS_SLAVE 标志），正在被BLPOP等命令阻塞（打开了REDIS_BLOCKED 标
况：如果客户端是主服务器（打开了REDIS_MASTER 标志），从服务器（打开了
timeout 选项设置的值时，客户端将被关闭。不过timeout 选项有一些例外情
redisServer
clients
图13-12服务器状态结构的clients 链表
sC1i2
第13章客户
端 
·173
---
## Page 178
174·第二部分单机数据库的实现
13.3重点回顾