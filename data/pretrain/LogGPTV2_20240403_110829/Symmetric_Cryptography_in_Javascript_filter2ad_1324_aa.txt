title:Symmetric Cryptography in Javascript
author:Emily Stark and
Michael Hamburg and
Dan Boneh
2009 Annual Computer Security Applications Conference
Symmetric Cryptography in Javascript
Emily Stark, Michael Hamburg, Dan Boneh
Computer Science Department
Stanford University
Stanford, CA
estark, mhamburg, PI:EMAIL
Abstract—We take a systematic approach to developing
a symmetric cryptography library in Javascript. We study
various strategies for optimizing the code for the Javascript
interpreter, and observe that traditional crypto optimization
techniques do not apply when implemented in Javascript. We
propose a number of optimizations that reduce both running
time and code size. Our optimized library is about four
times faster and 12% smaller than the fastest and smallest
existing symmetric Javascript encryption libraries. On Internet
Explorer 8, our library is about 11 times faster than the fastest
previously existing code. In addition, we show that certain
symmetric systems that are faster than AES when implemented
in native x86 code, are in fact much slower than AES when
implemented in Javascript. As a result, the choice of ciphers
for a Javascript crypto library may be substantially different
from the choice of ciphers when implementing crypto natively.
Finally, we study the problem of generating strong randomness
in Javascript and give extensive measurements validating our
techniques.
Keywords-Javascript; cryptography; optimization;
Project homepage:
http://crypto.stanford.edu/sjcl
I. INTRODUCTION
In some applications client-side encryption is needed
before data is uploaded to a server cloud. Since the web
browser is becoming the universal tool for interacting with
remote servers, it is natural to ask whether existing browsers
can perform encryption without installing additional client-
side software. We found ﬁve Javascript encryption li-
braries [1]–[5], suggesting that there is considerable interest
in encrypting data in the browser.
Websites that need client-side encryption will link to a
Javascript crypto library and call the library from Javascript
on the client. Clearly the site is trusted to link to correct
encryption code; if the site links to bogus encryption code
then encryption will provide no security at all. Nevertheless,
there are several real-world settings where server-provided
encryption code is adequate. First, when client-side software
installation is prohibited, server-provided encryption code is
the only option. Second, there are many cases where the
server stores private user data, but does not want to see
the data in the clear. The Mozilla Weave project [6] is a
good example. Weave is a browser extension that stores all
browser state (including passwords and history) in a Mozilla
cloud so that the state is automatically available to the user
on any browser. Weave uses Javascript to encrypt all browser
state on the client before sending it to the cloud. Here
Mozilla encrypts the data to avoid the liability of having
browser state in cleartext on its servers. Other examples
come up in healthcare and ﬁnance where the cloud manages
access to the data, but is forbidden from viewing that data
in the clear. It is to the server’s advantage that the data be
properly encrypted by the client. In cryptographic terms the
server is an “honest but curious” adversary.
Another reason for studying crypto in Javascript is its
use in desktop applications. Firefox extensions, for example,
are written in Javascript. Both Adobe Air and Mozilla
Prism are full-ﬂedged environments for developing desktop
applications in variants of Javascript.
Javascript crypto is also used in mashups to provide
secure cross-origin messaging using fragment identiﬁers [7].
While this mechanism is being replaced by postMessage,
several systems still use the older
identiﬁer
method [7].
fragment
The discussion above suggests that a Javascript crypto li-
brary can be quite useful. Many of the existing libraries [1]–
[5] are implemented for a speciﬁc task, and would not
be suitable as a general-purpose library. Moreover, several
implementations are not tuned to the speciﬁc characteristics
of Javascript
interpreters and are therefore unnecessarily
slow.
Our contribution. We set out to build a general purpose
symmetric crypto library in Javascript that exports a clean
interface and is highly optimized. Since the Javascript library
is downloaded to the browser, we want
to reduce both
library code size and running time. We make a number of
contributions towards this goal:
(cid:129) First, we observe that traditional techniques for opti-
mizing AES, which involve hard-coding or computing
various lookup tables, result in either large code size
or loss of speed. All the existing Javascript implemen-
tations use one of these methods. We identiﬁed a third
alternative, speciﬁc to Javascript, that keeps the code
size small and improves performance.
(cid:129) Second, our experiments show that certain optimiza-
tions that work well for native x86 code work poorly
in Javascript. For example, a classic optimization tech-
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.42
373
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:39 UTC from IEEE Xplore.  Restrictions apply. 
nique for AES called bitslicing [8] performs very poorly
in Javascript. We therefore abandoned this approach.
(cid:129) Third, we found that Javascript affects the choice of
ciphers. Some ciphers that are considerably faster than
AES in native x86 are signiﬁcantly slower than AES in
Javascript. Hence, the choice of ciphers for a Javascript
library can be very different from the choice for a
native x86 library. We provide detailed measurements
in Section V.
We hope these lessons in optimizing the code will help other
Javascript crypto developers and JIT designers.
Our experiments in Section V show that in most browsers
our code is at
least four times faster than the fastest
implementation currently available. In Internet Explorer 8
our code is 11 times faster than the fastest current imple-
mentation. Our code is also 12% smaller than the smallest
implementation currently available. Despite our performance
improvements, the running times are still far worse than
native code. Even in Google Chrome, the fastest browser
we measured, our code runs about 46 times slower than
OpenSSL’s native x86 implementation.
Another difﬁcult issue, speciﬁc to Javascript, is the ques-
tion of cryptographic randomness needed for encryption.
While browsers provide a Math.random method, it is not
guaranteed to provide strong (unpredictable) randomness.
In Firefox and Chrome, for example, Math.random is
not cryptographically strong. How do we generate crypto-
graphic randomness in Javascript? Standard methods (e.g.
RFC 4086) use disk access times and scheduler non-
determinism, among other things. These work poorly in
Javascript since browsers are single-threaded and Javascript
in the browser has no direct access to the disk. We discuss
this problem and various solutions in detail in Section IV.
One option is to rely on the user to provide randomness
via mouse movements or keyboard input. We present in
Section IV the results of a user study that measures the
amount of entropy generated by tracking mouse movements
as users interact with various web pages. This entropy
collection method is transparent to the user.
We note that Google recently introduced Native Client
(NaCl) technology [9], which enables a remote site to send
x86 code to the browser and have the code execute on the
CPU. In many years, once NaCl is deployed universally,
there will be less need for Javascript crypto. Until then,
Javascript crypto will continue to be of interest.
II. BACKGROUND
Symmetric cryptography is primarily used for data in-
tegrity and conﬁdentiality. Other applications, such as user
authentication, can be built from these primitives. Therefore,
we focus on building primitives that provide integrity and
conﬁdentiality with integrity. We made the following design
decisions early on:
(cid:129) We experimented with data integrity using HMAC-
SHA-256 and discovered that SHA-256 is considerably
slower than AES in Javascript. This holds across all
mainstream browsers (see Section V). Consequently,
we abandoned SHA-256 for integrity and instead fo-
cused only on AES-based integrity methods such as
AES-CMAC [10]. It is worth noting that for native x86
code (OpenSSL), SHA-256 is about 10% slower than
AES-128, but in Javascript (Chrome) it is about 5 times
slower than AES-128.
(cid:129) We also implemented modes that provide both conﬁ-
dentiality and integrity, speciﬁcally the OCB [11] and
CCM [12] modes. These modes take as input a key, a
message and a nonce. The nonce must never be reused
for a given key. Once the nonce is speciﬁed, encryption
is deterministic. In some applications, the developer
using the library will want to specify the nonce (for
example, if the nonce is a packet counter). In others,
the developer will want to ignore the nonce and have
the library choose it at random for every message.
We support both methods by using our Javascript
randomness library to choose a random nonce when
needed.
III. FAST AND SMALL AES IN JAVASCRIPT
The AES block cipher [13] consists of a sequence of
rounds. In each round one evaluates mixing functions and a
256-byte lookup table called an S-box. The S-box itself can
be computed using very little code.
A. Maximizing precomputation
Implementations of AES typically choose one of two
techniques for evaluating the mixing functions and the S-
box. The ﬁrst approach is to compute the mixing function
and S-box as needed during encryption. This keeps the code
small, but increases the running time. The second approach
is to precompute both the S-box and mixing functions and
store the precomputed tables in the code. This speeds up
encryption and decryption times, but
increases the code
size. For example, the OpenSSL implementation contains
some 8KB of hard-coded tables. This is negligible for local
use, but would ﬁll multiple packets over a typical network.
Furthermore, when embedded in C code, the tables take up
24KB in source form, and even after compression they are
over 10KB.
Existing Javascript implementations avoid storing look-
up tables for the mixing function so as not to increase the
library size. Instead they only hardcode the 256-entry S-
box, and sometimes log tables for ﬁnite-ﬁeld multiplication.
Omitting the round transformation tables comes at a cost to
performance, since round transformations must be computed
rather than looked up. Hardcoding the round transformation
tables would add signiﬁcantly to code size.
374
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:39 UTC from IEEE Xplore.  Restrictions apply. 
Our approach. In our Javascript implementation we pro-
pose a different approach that keeps the code small and
speeds up encryption/decryption. Instead of embedding ta-
bles in the code, our library contains code that precomputes
all tables on the browser before encryption or decryption
begins. Since code to precompute the tables is much smaller
than the tables themselves, we keep the library size small.
We reap the beneﬁts of precomputed tables by quickly
building the tables on the browser before the ﬁrst encryption.
The only values we hardcode are the 10 round constants,
which are 28 bytes total.
Precomputing the tables takes about 0.8ms on Google
Chrome and about 8ms on Internet Explorer 8. Because this
saves several KB of code, it is nearly as fast to precompute
the AES tables as it would be to load them from disk.
Moreover, computing the tables in the browser is far faster
than downloading them over the network.
When encrypting a short message, say a single AES block,
it may seem that precomputing the AES tables is a waste
and that we should instead compute the tables on the ﬂy
as needed. We argue that, for three reasons, precomputation
is always a good idea, regardless of the message length.
First, using different code for short messages would increase
the code size. Second, the structure of the S-box makes
it so that precomputing the entire S-box at once is faster
than computing each entry individually. Because encrypting
a single block with a 128-bit key requires 160 S-box
evaluations, precomputing the entire S-box is faster than
encrypting a single block without it. Third, computing the
S-box on the ﬂy exposes us unnecessarily to a timing attack.
Our library always precomputes the AES tables the ﬁrst
time encrypt is called.
B. Loop unrolling
to which we should unroll
While developing our AES implementation, we consid-
ered the extent
loops. In C
implementations of AES, such as OpenSSL [14], there is
little reason not to unroll loops, but in Javascript, unrolling
loops results in an undesirable increase in code size. We
experimented with three levels of unrolling in our core AES
implementation:
1) Leaving all loops rolled, the technique used by most
Javascript AES implementations.
2) Unrolling short loops (four or fewer iterations), in
hopes of increasing performance at a low cost to code
size.
3) Unrolling the main round transformation loops (10-14
iterations per block), the technique used by OpenSSL.
In our experiments, unrolling short loops had little effect
on performance. Unrolling the round function increased
speed signiﬁcantly on some browsers but at the cost of a 55%
increase in code size. We also noted that the performance
increase was most notable in browsers with older Javascript
interpreters; unrolling sped up the implementation by 50-
75% in Internet Explorer 8 and Firefox 3.0, but only by
roughly 20% in Chrome and actually slowed down encryp-
tion in Safari 4 and Firefox 3.5. As Javascript interpreters
advance to JIT compilation, the slower but smaller imple-
mentation with no unrolled loops will be the better choice.
Unrolling short loops in our OCB-mode code increased
speed by roughly 5% in Chrome and 12% in Firefox 3.5 at
the cost of a 12% increase in code size.
C. Bitslicing
Bitslicing is an optimization technique where encryptions
are broken down into logical bit operations that are then
computed in parallel. Bitslicing can signiﬁcantly increase
performance of symmetric ciphers, particularly AES [8],
[15], [16]. In particular, [16] claims to be the fastest AES
implementation to date.
Bitslicing is ineffective in Javascript. It decreases perfor-
mance in most browsers for two reasons. First and foremost,
bitslicing works best when we have access to a wide words,
as in 128-bit SIMD in native x86. In Javascript we only have
access to 32-bit-wide operations, making bitslicing far less
effective. Second, Javascript JITs seem to perform poorly
with large numbers of local variables, which would be hard
to avoid.
The bitsliced implementation proposed in [8] uses 132
gates for the SubBytes function alone, which corresponds
to 16 S-box table lookups. The times for bitwise operations
and table lookups can be found in Table I, which suggests
that bitslicing (132 bitwise operations) would be slower than
a conventional AES implementation (16 table lookups) in all
browsers except Firefox 3.5 beta, even if register spilling is
not an issue.
D. Unifying encryption and decryption functions
In another effort to reduce code size, we combined the
encryption and decryption functions of the AES core by
using different lookup tables depending on whether or not
the programmer set a decrypt ﬂag. For our standard
implementation, this decreased the code size by 14%.
IV. RANDOMNESS IN JAVASCRIPT
All cryptography libraries need a strong random number
generator, both to guarantee that nonces do not repeat and to
enable the user to generate random challenges, secret keys,
etc. If any high-quality source of randomness is available,
we can extend it indeﬁnitely using a cryptographic pseudo-
random number generator (PRNG). We considered several
sources of entropy; each has advantages and disadvantages.
We need two types of entropy for cryptography. To
generate secret keys, we require that the attacker cannot
predict the entropy pool. To generate nonces, we only require
that the PRNG’s output not repeat, so it will sufﬁce that
the attacker cannot control the entropy pool. Because the
375
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:39 UTC from IEEE Xplore.  Restrictions apply. 
TIMINGS FOR BITWISE OPERATIONS AND TABLE LOOKUPS ACROSS BROWSERS.
Table I
Chrome
IE 8b
Safari 4
Firefox 3.0
Firefox 3.5b5
Time (ns)
Fastest bitwise operation
Table lookup
132 bitwise operations
16 table lookups
1.76
1.81
232
29
35.4
32.9
4673
526
10.1
10.7
1333
172
4.96
4.48
655
72
1.55
23.80
205
381
attacker can predict more measurements than it can control,
the random number generator can provide nonces more
quickly than it can provide secret keys.
A. Explicit random number generators
Javascript exposes a random number generator as
Math.random. Unfortunately, except in Safari on Win-
dows (and Safari on Mac after revision 39510), this function
is not cryptographically strong, and determining its strength
would rely on potentially brittle browser version detection
code in Javascript. Firefox and Internet Explorer use linear
congruential generators, and so does Chrome (even though
Chrome is based on WebKit,