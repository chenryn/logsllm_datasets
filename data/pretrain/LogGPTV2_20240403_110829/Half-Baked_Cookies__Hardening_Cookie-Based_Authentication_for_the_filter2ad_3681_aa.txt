title:Half-Baked Cookies: Hardening Cookie-Based Authentication for the
Modern Web
author:Yogesh Mundada and
Nick Feamster and
Balachander Krishnamurthy
Half-Baked Cookies:
Client Authentication on the Modern Web
Yogesh Mundada1, Nick Feamster1, Balachander Krishnamurthy2, Saikat Guha3, and Dave Levin4
1School of Computer Science, Georgia Tech
2AT&T Labs – Research
3MSR India
4University of Maryland
Abstract
Modern websites set multiple authentication cookies during
the login process to allow users to remain authenticated over
the duration of a web session. Web applications use cookie-
based authentication to provide different levels of access and
authorization; the complexity of websites’ code and various
combinations of authentication cookies that allow such access
introduce potentially serious vulnerabilities. For example, an
on-path attacker can trick a victim’s browser into revealing in-
secure authentication cookies for any site, even if the site itself
is always accessed over HTTPS. Analyzing the susceptibility
of websites to such attacks ﬁrst requires a way to identify a
website’s authentication cookies. We developed an algorithm
to determine the set of cookies that serve as authentication
cookies for a particular site. Using this algorithm, which we
implemented as a Chrome extension, we tested 45 websites
and found that an attacker can gain access to a user’s sensitive
information on sites such as GoDaddy, Yahoo Search, Com-
cast, LiveJournal, stumbleupon, and Netﬂix. In cases where
these sites cannot enable site-wide HTTPS, we offer recom-
mendations for using authentication cookies that reduce the
likelihood of attack. Based on these recommendations, we
develop a tool, Newton, that website administrators can use
to audit the security of a site’s cookie-based authentication
and users can run to identify vulnerabilities at runtime.
1
The web’s core protocol, the Hypertext Transfer Protocol
(HTTP), is inherently stateless; to manage higher-level appli-
cation state, web applications commonly store information
about user sessions in “cookies”; each website sets a collec-
tion of cookies on a user’s local machine, which the user’s
browser sends to the server hosting the website on each sub-
sequent request. Cookie contents are diverse and may contain
information ranging from user preferences (e.g., does the user
prefer a white or black background) to locality (e.g., what lan-
guage the site should be rendered in) to transaction state (e.g.,
what is currently contained in a user’s shopping cart). Addi-
Introduction
tionally, many websites use cookies to authenticate users to a
website, and various cookies may also indicate to the server
whether or not a user is currently logged into the website.
Customarily, a user may initially log into a website using
a username and password. To prevent the user from having
to re-enter these credentials in subsequent interaction with
the website, the server typically sets authentication cookies
(auth-cookies), which the browser automatically returns with
each subsequent HTTP request until the user’s session expires.
The web server hosting the sit checks these auth-cookies to
determine whether any particular HTTP request is authorized
to perform the operation associated with that request (e.g.,
access a particular webpage, add an item to a shopping card,
obtain personal proﬁle details). Thus, once a user initially
authenticates to a web server, the auth-cookies are a critical
security linchpin: In many cases, access to these auth-cookies
gives an attacker complete control over a user’s account.
Individual cookies contain attributes such as secure
(which prevents snooping cookies over insecure connections)
and HTTPonly (which prevents cookie theft via cross-site
scripting), but, the complexity of modern websites and ser-
vices makes it difﬁcult to secure all of these cookies. Popular
websites sometimes have incorrect security settings on auth-
cookies; for example, in May 2014, the incorrect security
settings of WordPress’s auth-cookies left users vulnerable to
session hijacking attacks [2]. Although the public is becom-
ing increasingly aware of these types of vulnerabilities, our
results show that they remain prevalent in practice.
In the past, web applications were simple and would use
only a few auth-cookies (in most cases, only one) to con-
trol access to the account. Researchers already have pub-
lished recommendations to make web sessions secure in these
cases [13]. Yet, modern web applications are signiﬁcantly
more complex. These applications often have millions of
lines of code and reuse legacy code from other components;
they are designed and implemented by large teams of devel-
opers are frequently modiﬁed. Moreover, today’s web sites
and applications are multi-faceted, and “login” or “authenti-
1
cation” is no longer strictly binary: For example, a user may
have different authorization or access to different parts of a
web site (e.g., a user might have the ability to view account
balances but not to execute trades, or add items to a shopping
cart but not purchase items or ship to a different address).
The complex nature of authorization for modern web appli-
cations makes it increasingly common for these applications
to use multiple authentication cookies, the combination of
which determine the user’s login status or ability to access
different parts of a web site. More than half of the 45 sites
that we analyzed set more than 20 cookies, and more than ten
of these sites use multiple authentication cookies. Websites
use multiple authentication cookies for several reasons: Some
portions of a website may be loaded over HTTPS, while other
portions of a site may be loaded over cleartext HTTP; a user
on the same site may operate under different roles (e.g., ad-
ministrator, user, site owner, moderator); a site may have
many different services or “properties” under the same do-
main; and ﬁnally, the cookies that a site uses to authenticate a
user may change regularly. For example, Google has multiple
applications including mail, search, and calendar; we ﬁnd
that each of these offerings uses different combinations of
authentication cookies. Sometimes, the combinations change
regularly: for example, the authentication cookies for Gmail
have already changed three times since December 2013.
The evolving nature of authentication cookies in modern
web applications begs for a re-appraisal of the use of auth-
cookies for web authentication and the potential vulnerabili-
ties that their misuse may induce on real sites. In light of mod-
ern web applications and websites, we must also develop new
recommendations for best practices when using auth-cookies
to authenticate users on modern websites. The misuse of au-
thentication cookies in a web application’s design can result
in unintended security vulnerabilities, particularly in certain
settings where a user may also be vulnerable to trafﬁc snoop-
ing or cross-site scripting vulnerabilities. Because different
parts of the application can be accessed over HTTP (non-
conﬁdential content), or HTTPS (conﬁdential content), a web
application developer may not set the secure attribute on
some authentication cookies if they would be sent on normal
HTTP connection. Each such decision of whether to set the
secure ﬂag on an auth-cookie may be correct individually,
but due to complex access control code paths, an attacker may
be able to gain access to privileged information with access
to only a subset of cookies whose secure attribute is not
set. In scenarios where an intermediary is on-path (e.g., any
open WiFi network, such as a coffee shop, airport, or even a
friend’s house), an attacker might gain access to all cookies
whose secure attribute is not set. In these settings, for many
web sites, we demonstrate that an on-path entity can gain all
of the information needed to compromise a user’s account for
a given web application.
Before deploying a web application, a web administrator
should assess and eradicate the vulnerabilities that result from
cookie-based web authentication. Similarly, users can receive
warnings when a web session is vulnerable to auth-cookie
hijacking. Both cases require identifying the auth-cookie com-
bination that authorizes a user to perform a speciﬁc operation
on a site and auditing those auth-cookies for vulnerabilities.
Although it might appear simple for an application developer
or website administrator to simply check the source code of
an application for such vulnerabilities, tracing all possible ex-
ecution paths through complex web applications that set many
cookies is a challenging problem in and of itself. We treat the
web application as a black box, which makes our approach
applicable for both website administrators and users.
The naïve approach to determining the speciﬁc combina-
tion of cookies that determines a user’s authorization to per-
form some action is combinatorial. We develop an algorithm
to reduce the time for computing the authentication cookies
for a site to polynomial time and incorporate this algorithm
into a tool, Newton, which helps website administrators audit
their sites for potential vulnerabilities.
This paper presents the following contributions:
• We develop an algorithm to discover the auth-cookie
combinations that will authenticate a user to any service
on a website. Our algorithm also derives the unique auth-
cookie combinations that allow a user to access different
sub-services (or “properties”) on the same website. We
show how using this algorithm helps us identify the auth-
cookies combinations in practical time.
• We implemented the algorithm to discover auth-cookies
for a site as a Chrome browser extension, Newton. The
tool treats each web application as a black box and op-
erates without any prior or privileged knowledge about
either the website or the user. Administrators can use
Newton to run security audits on installed Web applica-
tions (whether or not they have source-code access), and
users can avoid or curtail interaction with sites that are
vulnerable to session hijacking.
• Using Newton, we analyzed combinations of auth-
cookies to audit 45 websites; we found 29 sites where
the use of auth-cookies is insecure in some way. Many
of these vulnerabilities arise because of logic errors in
how the application handles auth-cookies. For example,
on 18 different websites, the web application does not in-
validate old auth-cookies when the user logs out, leaving
the user vulnerable to replay attacks.
• We analyze the vulnerabilities we discovered to develop
speciﬁc recommendations for designing more secure
client authentication mechanisms using auth-cookies.
The rest of the paper is organized as follows. Section 2 pro-
vides background on Web cookies and cookie-based authen-
tication. Section 3 discusses our speciﬁc goals to make our
solution scalable for large number of users and sites and the
challenges we faced in doing so. Section 4 details our solution
and our insight to reduce the effort in verifying the search
space. In Section 5, we describe implementation challenges
to make the solution deployable across many users. Section 6
presents the auth-cookie combinations that we automatically
2
Figure 1 shows the process where a user Bob requests a
service on a.com to login andza access a resource. After
Bob has logged in, the site sets the sess-id, locale, and
priv-sess-id cookies. The locale cookie has a match
rule with domain and path attributes that match any requested
URLs on a.com. Thus, the browser will send this cookie
with any HTTP request that the browser sends to a.com. On
the other hand, the sess-id cookie has a domain match part
equal to .myaccount.a.com, and thus is only returned
with requests for myaccount.a.com or any subdomain
(e.g.,
search.services.myaccount.a.com).
Since both cookies’ path match attributes
are /
The more restricted
the cookies match all paths.
priv-sess-id cookie will match against
the exact
domain private.myaccount.com and paths such as
/ccn or /ccn/card1.
Each cookie also has two boolean attributes, HttpOnly
and Secure, which further restricts a web site’s ability to
access a particular cookie. A web application’s Javascript
code, which runs in a user’s browser, can read, write, and
delete cookies created by the same domain [5].
If the
cookie’s HttpOnly ﬂag is set to true, however, then even
Javascript from the same domain cannot read that cookie. The
HttpOnly mechanism thwarts potential XSS exploits for
the site from pretending to have originated from the targeted
site, reading its sensitive cookies and leaking them to an at-
tacker. Cookies also have a Secure attribute; if this attribute
is set, then the browser will only return the cookie over an SS-
L/TLS channel. After a cookie’s expiry date, the browser will
automatically purge the cookie from the cookiestore. If the
web server does not set an expiry date on a cookie, then the
cookies is a session cookie, which the browser will automati-
cally deleted when the user quits the web browser application.
In practice, most users rarely terminate their web browsers,
so session cookies can persist for long periods of time.
2.2 Authentication Cookies (“Auth-Cookies”)
A web server typically sets authentication cookies (“auth-
cookies”) when a user initially authenticates to the web server
(e.g., with a username and password). These cookies allow
a user to perform various privileged operations on a site; dif-
ferent combinations of auth-cookies may authorize different
actions on a website. For example, in Figure 1, sess-id is
an auth-cookie that allows the user to access proﬁle informa-
tion, whereas cookie priv-sess-id allows access to more
sensitive information, such as a credit card number. Auth-
cookies also ensure that a user’s session remains continuous
in case connectivity is interrupted (e.g., due to termination of
a TCP session or a change in the user’s IP address). Because
these cookies allow the user to perform various operations
without re-entering credentials, they are extremely valuable
to attackers.
Figure 1: The general operation of Web cookies.
discovered for major services. Section 7 discusses both the
limitations of our approach and avenues for future work. Sec-
tion 8 discusses related work, and Section 9 concludes.
2 Background
We present general background on web cookie operation and
how different cookie attribute settings can affect the security
of web client authentication. We then describe authentication
cookies and scenarios where these cookies might be stolen
or otherwise compromised. Finally, we present an overview
of an algorithm to determine which cookies on a website
correspond to the user’s authentication cookies.
2.1 General Web Cookie Operation
An HTTP cookie is the state management mechanism that
HTTP has used since its initial design. A cookie has proper-
ties such as name, value, ﬂags, expiration data, and a match
rule. A match rule has a domain and path components. The
web server when sets cookies and the respective values for
each cookie in HTTP responses using the Set-Cookie di-
rective. Whenever a browser makes an HTTP request to a
URL, the browser ﬁrst compares that URL against all present
cookies’ match rules for that domain. The browser will then
automatically send those cookies whose match rules evalu-
ate to true for that URL. To determine whether a cookie’s
match rule is satisﬁed, the browser ﬁrst compares the domain
name in the match rule with the domain in the URL of the
HTTP request. If the domain of the cookie starts with “.”,
then any subdomain of the subsequent domain will match;
otherwise, the cookie only matches if the domain name of
the URL exactly matches the domain in the cookie. If the
domain matches, then the browser evaluates whether the path
speciﬁed in the cookie matches the path in the URL; if a
match exists for both the domain and path attributes, then the
browser returns the cookie with the HTTP request.
3
to retrieve the image. At this point, the user’s browser would
send the sess-id with this request in plaintext.
Compromised third-party Javascript.
Javascript that a
webmaster hosts on a webpage has full permissions and ac-
cess to cookies for that domain unless the cookies have the
HttpOnly attribute set. In these cases, if auth-cookies do
not have this attribute set, an attacker may be able to read
the cookies for that domain. This scenario may arise in cases
when a webmaster includes Javascript from an untrusted or
third-party developer (e.g., site owners sometimes include
Javascript for purposes of tracking, analytics, or function-
ality); in other cases, the site that hosts a webpage may be
compromised, allowing third parties to include Javascript
on the host page. Another signiﬁcant problem is fetching