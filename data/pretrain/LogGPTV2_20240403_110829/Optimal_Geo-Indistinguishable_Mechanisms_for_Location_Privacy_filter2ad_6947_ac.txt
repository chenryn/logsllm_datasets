privacy, but those corresponding to 
δ dG-privacy instead,
that is, |X| constraints for each edge of G:
Minimize:
πxkxzdQ(x, z)
x,z∈X
Subject to: kxz ≤ e

δ dG(x,x(cid:48))kx(cid:48)z
z ∈ X , (x, x
(cid:88)
(cid:88)
kxz = 1
x∈X
kxz ≥ 0
) ∈ E
(cid:48)
x ∈ X
x, z ∈ X
Since the resulting mechanism is 
δ dG-private, by Propo-
sition 1 it must also be dX -private. However, the number of
δ dG-privacy is now |E||X|. More-
constraints in induced by 
over, as discussed in the next section, for any δ > 1 there is
|X|
an algorithm that generates a δ-spanner with O(
δ−1 ) edges,
which means that, ﬁxing δ, the total number of constraints
of the linear program is O(|X|2).
It is worth noting that although dX -privacy is guaran-
teed, optimality is lost: the obtained mechanism is 
δ dG-
OptQL(π, dQ) but not necessarily dX -OptQL(π, dQ), since
the set of 
δ dG-private mechanisms is a subset of the set of
dX -private mechanisms. The QL of the obtained mecha-
nism will now depend on the dilation δ of the spanner: the
smaller δ is, the closer the QL of the mechanism will be from
the optimal one. However, if δ is too small then the num-
ber of edges of the spanner will be large, and therefore the
number of constraints in the linear program will increase.
In fact, when δ = 1 the mechanism obtained is also dX -
OptQL(π, dQ) (since dG and dX coincide), but the amount
of constraints is in general O(|X|3). In consequence, there
is a tradeoﬀ between the accuracy of the approximation and
the number of constraints in linear program.
3.3 An algorithm to construct a δ-spanner
The previous approach requires to compute a spanner for
X . Moreover, given a dilation factor δ, we are interested in
generating a δ-spanner with a reasonably small number of
edges. In this section we describe a simple greedy algorithm
to get a δ-spanner of X , presented in [16]. This procedure
(described in Algorithm 1) is a generalization of Kruskal’s
minimum spanning tree algorithm.
(a)(b)255Algorithm 1 Algorithm to get a δ-spanner of X
1: procedure GetSpanner(X , dX , δ)
2:
3:
4:
E := ∅
G := (X , E)
for all (x, x(cid:48)) ∈ (X × X ) do
(cid:46) taken in increasing
if dG(x, x(cid:48)) > δdX (x, x(cid:48)) then
E := E ∪ {(x, x(cid:48))}
order wrt dX
5:
6:
7:
8:
9:
10: end procedure
end for
return G
end if
The idea of the algorithm is the following: we start with
a spanner with an empty set of edges (lines 2-3).
In the
main loop we consider all possible edges (that is, all pairs of
locations) in increasing order with respect to the distance
function dX (lines 4-8), and if the weight of a minimum
path between the two corresponding locations in the current
graph is bigger than δ times the distance between them, we
add the edge to the spanner. By construction, at the end of
the procedure, graph G is a δ-spanner of X .
A crucial result presented in [16] is that, in the case where
X is a set of points in the Euclidean plane, the degree of each
node in the generated spanner only depends on the dilation
factor:
Theorem 1. Let δ > 1. If G is a δ-spanner for X ⊆ R2,
with the Euclidean distance d2 as metric, then the degree
of each node in the spanner constructed by Algorithm 1 is
O( 1
δ−1 ).
This result is useful to estimate the total number of edges
in the spanner, since our goal is to generate a sparse spanner,
i.e. a spanner with O(|X|) edges.
Considering the running time of the algorithm, since the
main loop requires all pair of regions to be sorted increas-
ingly by distance, we need to perform this sorting before the
loop. This step takes O(|X|2 log |X|). The main loop per-
forms a minimum-path calculation in each step, with |X|2
If we use, for instance, Dijkstra’s algorithm,
total steps.
each of these operations can be done in O(|E| +|X| log |X|).
If we select δ so that the ﬁnal amount of edges in the span-
|E| = O(|X|), we can conclude that the
ner is linear, i.e.
total running time of the main loop is O(|X|3 log |X|). This
turns out to be also the complexity of the whole algorithm.
A common problem in the theory of spanners is the follow-
ing: given a set of points X ⊆ R2 and a maximum amount
of edges m, the goal is to ﬁnd the spanner with minimum
dilation with at most m edges. This has been proven to be
NP-Hard ([18]). In our case, we are interested in the analog
of this problem: given a maximum tolerable dilation factor
δ, we want to ﬁnd a δ-spanner with minimum amount of
edges. However, we can see that the ﬁrst problem can be
expressed in terms of the second (for instance, with a binary
search on the dilation factor), which means that the second
problems must be at least NP-Hard as well.
3.4 AdvError of the obtained mechanism
As discussed in 2.1, the privacy of a location obfusca-
tion mechanism can be expressed in terms of AdvError
for an adversary metric dA. In [8], the problem of optimiz-
ing privacy for a given QL constraint is studied, providing
a method to obtain a q-OptPriv(π, dA, dQ) mechanism for
any q, π, dQ, dA.
In our case, we optimize QL for a given privacy con-
straint, constructing a dX -OptQL(π, dQ) mechanism. We
now show that, if dQ and dA coincide, the mechanism gener-
ated by any of the two optimization problems of the previous
sections is also q-OptPriv(π, dQ, dQ).
AdvError corresponds to an adversary’s remapping H
that minimizes his expected error with respect to the metric
dA and his prior knowledge π. A crucial observation is that
dX -privacy is closed under remapping.
Lemma 1. Let K be a dX -private mechanism, and let H
be a remapping. Then KH is dX -private.
Now let K be a dX -OptQL(π, dQ) mechanism and H a
remapping. Since KH is dX -private (Lemma 1) and K is
optimal among all such mechanisms, we have that:
QL(K, π, dQ) ≤ QL(KH, π, dQ) ∀H
As a consequence, assuming that dQ and dA coincide, the ad-
versary minimizes his expected error by applying no remap-
ping at all (i.e. the identity remapping), which means that
AdvError(K, π, dQ) = QL(K, π, dQ) and therefore K must
be q-OptPriv(π, dQ, dQ).
Theorem 2. If a mechanism K is dX -OptQL(π, dQ) then
it is also q-OptPriv(π, dQ, dQ) for q = QL(K, π, dQ).
It is important to note that Theorem 2 holds for any
metric dX . This means that both mechanisms obtained as
result of the optimization problems presented in Sections
3.1 and 3.2 are q-OptPriv(π, dQ, dQ) – since they are dX -
δ dG-OptQL(π, dQ) respectively – how-
OptQL(π, dQ) and 
ever for a diﬀerent value of q.
In fact, in contrast to the
method of [8] in which the quality bound q is given as
a parameter, our method optimizes the QL given a pri-
vacy bound. Hence, the resulting mechanism will be q-
OptPriv(π, dQ, dQ), but for a q that is not known in ad-
vance and will depend on the privacy constraint  and the
dilation factor δ. The greater the  is (i.e. the higher the
privacy), or the lower the δ is (i.e. the better the approxima-
tion), the lower the quality loss q of the obtained mechanism
will be.
Finally, we must remark that this result only holds in the
case where the metrics dQ, dA coincide. If the metrics diﬀer,
e.g. the quality is measured in terms of the Euclidean dis-
tance (the user is interested in accuracy) but the adversary
uses the binary distance (he is only interested in the exact
location), then this property will no longer be true.
3.5 Practical considerations
We conclude this section with a discussion on the prac-
tical applicability of location obfuscation. First, it should
be noted that, although constructing an optimal mechanism
is computationally demanding, once the matrix K is com-
puted, obfuscating a location x only involves drawing a re-
ported location from the distribution K(x) which is compu-
tationally trivial. Moreover, although obfuscation is meant
to happen on the user’s smartphone, computing the mech-
anism can be oﬄoaded to an external server and even par-
allelized. The user only needs to transmit π, dX , dQ (which
are considered public) and receive K, and the computation
256Figure 2: (a) Division of the map of Beijing into
regions of size 0.658 x 0.712 km. The density of each
region represents its “score”, that is, how frequently
users visit it. (b) The 50 selected regions. These
regions are the ones with highest density between
the whole set of regions.
only needs to be performed occasionally, to adapt to changes
in the user proﬁle.
Second, an important feature of obfuscation mechanisms
is that they require no cooperation from the service provider,
who simply receives a location and has no way of knowing
whether it is real or not. Obfuscation can happen on the
user’s device, at the operating system or browser level, which
is crucial since the user has strong incentives to apply it
while the service provider does not. The user’s device could
also perform ﬁltering of the results, as described in [9].
Finally, we argue that the common idea that users of LBSs
are willing to give up their privacy is misleading: the only
alternative oﬀered is not to use the service. The usage of
browser extensions such as “Location Guard” [19] shows that
users do care about their privacy and that obfuscation can be
a practical approach for using existing services in a privacy
friendly way.
4. EVALUATION
In this section we evaluate the technique for constructing
optimal mechanisms described in the previous sections. We
perform two kinds of evaluation: ﬁrst, a comparison with
other mechanisms, namely the one of Shokri et al. and the
Planar Laplace mechanism. Second, a performance evalua-
tion of the spanner approximation technique.
The comparison with other mechanisms is performed with
respect to both privacy and quality loss. For privacy, the
main motivation is to evaluate the mechanisms’ privacy un-
der diﬀerent priors, and in particular under priors diﬀerent
than the one they were constructed with. Following the
motivating scenario of the introduction, we consider that a
user’s proﬁle can vary substantially between diﬀerent time
periods of the day, and simply by taking into account the
time of a query, the adversary can obtain a much more infor-
mative prior which leads to a lower privacy. For the purposes
of the evaluation, we consider priors corresponding to four
diﬀerent time periods: the full day, the morning (7am to
noon), afternoon (noon to 7pm) and night (7pm to 7am).
Then we construct the mechanisms using the full day prior
and compare their privacy for all time periods.
We perform our evaluation on two widely used datasets:
GeoLife [20, 21, 22] and T-Drive [23, 24]. The results of Ge-
oLife are presented in detail in the following sections, while,
Figure 3: Boxplot of the location privacy provided
by the three diﬀerent mechanisms under considered
priors. The OptQL mechanism was constructed with
 = 1.07 and δ = 1.05.
due to space restrictions, those of T-Drive (which are in gen-
eral similar) are summarized in Section 4.4.
4.1 The GeoLife dataset
The GeoLife GPS Trajectories dataset contains 17621 traces
from 182 users, moving mainly in the north-west of Beijing,
China, in a period of over ﬁve years (from April 2007 to
August 2012). The traces show users performing routinary
tasks (like going to and from work), and also traveling, shop-
ping, and doing other kinds of entertainment or unusual ac-
tivities. Besides, the traces were logged by users using diﬀer-
ent means of transportation, like walking, public transport
or bike. More than 90% of the traces were logged in a dense
representation, meaning that the individual points in the
trace were reported every 1-5 seconds or every 5-10 meters.
Since user behaviour changes over time, and the mechanism
should be occasionally reconstructed, we restrict each user’s
traces to a 90 days period, and in particular to the one with
the greatest number of recorded traces, so that the prior is
as informative as possible.
4.2 Mechanism comparison wrt privacy and
quality loss
For the evaluation, we divide the map of Beijing into a
grid of regions 0.658 km wide and 0.712 km high, displayed
in Figure 2a. To avoid users for which little information is
available, we only keep those having at least 20 recorded
points within the grid area for each one of the time periods.
Whenever we count points, those falling within the same
grid region during the same hour are counted only once, to
prevent traces with a huge number of points in the same
region (e.g. the user’s home) from completely skewing the
results. After this ﬁltering, we end up with 116 users (64%
of the total 182).
We then proceed to calculate the 50 “most popular” re-
gions of the grid as follows: for each user, we select the 30
regions in which he spends the greatest amount of time. A
region’s “score” is the number of users that have it in their
30 highest ranked ones. Then we select the 50 regions with
the highest score.
Figure 2a shows the division of the map into regions, with
the opacity representing the score of each of them, while
Figure 2b shows the 50 regions with highest score. We can
(a)(b)All dayMorningAfternoonNight0.20.30.40.50.60.70.80.91.01.11.2Location privacy (km)OptQLOptPrivPL257a privacy constraint (cid:48) (in general diﬀerent from ) such that
the QL of this mechanism is also q. We call this mechanism