title:Dynamic searchable symmetric encryption
author:Seny Kamara and
Charalampos Papamanthou and
Tom Roeder
Dynamic Searchable Symmetric Encryption
Seny Kamara
Charalampos Papamanthou∗
Tom Roeder
Microsoft Research
PI:EMAIL
UC Berkeley
PI:EMAIL
Microsoft Research
PI:EMAIL
ABSTRACT
Searchable symmetric encryption (SSE) allows a client to
encrypt its data in such a way that this data can still be
searched. The most immediate application of SSE is to cloud
storage, where it enables a client to securely outsource its
data to an untrusted cloud provider without sacriﬁcing the
ability to search over it.
SSE has been the focus of active research and a multitude
of schemes that achieve various levels of security and eﬃ-
ciency have been proposed. Any practical SSE scheme, how-
ever, should (at a minimum) satisfy the following proper-
ties: sublinear search time, security against adaptive chosen-
keyword attacks, compact indexes and the ability to add and
delete ﬁles eﬃciently. Unfortunately, none of the previously-
known SSE constructions achieve all these properties at the
same time. This severely limits the practical value of SSE
and decreases its chance of deployment in real-world cloud
storage systems.
To address this, we propose the ﬁrst SSE scheme to satisfy
all the properties outlined above. Our construction extends
the inverted index approach (Curtmola et al., CCS 2006 ) in
several non-trivial ways and introduces new techniques for
the design of SSE. In addition, we implement our scheme
and conduct a performance evaluation, showing that our
approach is highly eﬃcient and ready for deployment.
Categories and Subject Descriptors
E.3 [Data Encryption]; E.5 [Files]: Sorting/searching;
H.3.3 [Information Storage and Retrieval]: Informa-
tion Storage and Retrieval
General Terms
Algorithms, Security, Theory
∗Work done at Microsoft Research.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
Keywords
Searchable symmetric encryption, cloud computing, cloud
storage
1.
INTRODUCTION
Searchable symmetric encryption (SSE) allows a client to
encrypt data in such a way that it can later generate search
tokens to send as queries to a storage server. Given a token,
the server can search over the encrypted data and return
the appropriate encrypted ﬁles. Informally, a SSE scheme
is secure if: (1) the ciphertext alone reveals no information
about the data; (2) the ciphertext together with a search
token reveals at most the result of the search; (3) search
tokens can only be generated using the secret key.
The most immediate application of SSE is to the design
of searchable cryptographic cloud storage systems (see [19]
for a discussion) which can provide end-to-end security for
cloud storage systems without sacriﬁcing utility. Other ap-
plications include the design of graph encryption schemes
and controlled disclosure mechanisms [6].
In an index-based SSE scheme [15, 5, 8, 23, 6] the encryp-
tion algorithm takes as input an index δ and a sequence of
n ﬁles f = (f1, . . . , fn) and outputs an encrypted index γ
and a sequence of n ciphertexts c = (c1, . . . , cn). All known
constructions [15, 5, 8, 23, 6] can encrypt the ﬁles f using
any symmetric encryption scheme, i.e., the ﬁle encryption
does not depend on any unusual properties of the encryp-
tion scheme.
To search for a keyword w, the client generates a search
token τw and given τw, γ and c, the server can ﬁnd the iden-
tiﬁers Iw of the ﬁles that contain w. From these identiﬁers it
can recover the appropriate ciphertexts cw.1 Notice that the
provider learns some limited information about the client’s
query. In particular, it knows that whatever keyword is be-
ing searched for is contained in the ﬁles encrypted as cw.
There are ways to hide even this information, most notably
using the work of Goldreich and Ostrovsky [16] on oblivious
RAMs, but such an approach leads to ineﬃcient schemes.
Previous work. The problem of searching on symmet-
rically encrypted data can be solved in its full generality
using the work of Goldreich and Ostrovsky [16] on oblivi-
ous RAMs. Unfortunately, this approach requires interac-
tion and has a high overhead. Searchable encryption was
ﬁrst considered explicitly by Song, Wagner and Perrig in
1This is the structure-only formulation of SSE. We refer the
reader to [6] for a discussion of other SSE formulations in
the more general setting of structured encryption.
965Scheme
SWP00 [22]
Z-IDX [15]
CM05 [5]
SSE-1 [8]
SSE-2 [8]
vSDHJ10 [23]
CK10 [6]
KO12 [21]
this paper
static
dynamic
static
static
static
dynamic
static
static
UC
dynamic
CKA2
Dynamism Security
Search time
Index size
O(|f |)
O(#f )
O(#f )
O(#fw)
O(#f )
CPA
CKA1
CKA1
CKA1
CKA2
CKA2 O(log #W )
CKA2
O(#fw)
O(#f )
O(#fw)
N/A
O(#f )
O(#f · #W )
O(Pw #fw + #W )
O(#f · #W )
O(#W · mf )
O(#W · mf )
O(#W · #f )
O(Pw #fw + #W )
Table 1: Comparison of several SSE schemes. Search time is per keyword w and update time is per ﬁle f . f
is the ﬁle collection, |f | is its bit length, #f is the number of ﬁles in f , #fw is the number of ﬁles that contain
the keyword w, #W is the size of the keyword space and mf is the maximum (over keywords) number of ﬁles
in which a keyword appears.
[22], where they give a non-interactive solution that achieves
search time that is linear in the length of the ﬁle collection.
Formal security notions for SSE have evolved over time.
The ﬁrst notion, security against chosen-keyword attacks
(CKA1) [15, 5, 8], guarantees that: (1) the encrypted in-
dex γ and the ciphertexts c do not reveal any information
about f other than the number of ﬁles n and their length;
and (2) the encrypted index γ and a token τw reveal at
most the outcome of the search Iw.
It was observed in
[8], however, that CKA1-security only provides security if
the search queries are independent of (γ, c) and of previous
search results. To address this, the stronger notion of adap-
tive security against chosen-keyword attacks (CKA2) was
proposed [8]. Recently, Kurosawa and Ohtaki put forth the
even stronger notion of universally composable (UC) SSE
[21] that, roughly speaking, guarantees security even when
the scheme is used in arbitrary environments (e.g., when
composed with itself and/or other cryptographic protocols
and primitives).
While there are several CKA2-secure SSE schemes [8, 23,
6, 21], they all have limitations from a practical point of
view.
In particular, the constructions of [8] and [21] re-
quire O(#f ) time to search, where #f denotes the number
of ﬁles in the collection. While the construction from [6]
is asymptotically optimal and eﬃcient in practice, the en-
crypted index can be very large. In addition, none of these
three schemes are explicitly dynamic; that is, one cannot add
or remove ﬁles without either re-indexing the entire data col-
lection or making use of generic and relatively expensive dy-
namization techniques like the one used in [8]. As far as we
know, the only SSE construction that is CKA2-secure and
(explicitly) dynamic was proposed by van Liesdonk, Sedghi,
Doumen, Hartel and Jonker [23].
In their scheme, search
is logarithmic in the number of keywords which, for prac-
tical purposes, is likely to be eﬃcient enough. The main
limitations of the scheme, however, are that the size of the
encrypted index is relatively large (roughly the same as the
scheme from [6]).
Another line of work uses deterministic encryption [2, 1]
to enable search on encrypted data with existing database
and search techniques. This approach diﬀers from SSE as it
only provides security for data and queries that have high
entropy. Starting with the work of Boneh, Di Crescenzo,
Ostrovsky and Persiano [4], searchable encryption has also
been considered in the public-key setting.
Table 1 summarizes the diﬀerences between our scheme
and others that have appeared in the literature.
Our contributions. In this work, we focus on the prob-
lem of constructing practical SSE schemes for the purpose
of designing practical searchable cryptographic cloud stor-
age systems [19]. We make the following contributions:
1. We present a formal security deﬁnition for dynamic
SSE. In particular, our deﬁnition captures a strong
notion of security for SSE, which is adaptive security
against chosen-keyword attacks (CKA2) [8].
2. We construct the ﬁrst SSE scheme that is dynamic,
CKA2-secure and achieves optimal search time. We
note that, unlike previously known schemes [22, 15, 5,
8, 6], our construction is secure in the random oracle
model.
3. We describe the ﬁrst implementation and evaluation of
an SSE scheme based on the inverted index approach
of [8]. Our implementation shows that this type of SSE
scheme can be extremely eﬃcient.
4. We conduct a performance evaluation of our scheme
that shows the incremental cost of adding conﬁden-
tiality to a (searchable) cloud storage system.
2. PRELIMINARIES AND NOTATION
The set of all binary strings of length n is denoted as
{0, 1}n, and the set of all ﬁnite binary strings as {0, 1}∗.
The notation [n] represents the set of integers {1, . . . , n}.
We write x ← χ to represent an element x being sampled
from a distribution χ, and x $← X to represent an element
x being sampled uniformly at random from a set X. The
output x of a probabilistic algorithm A is denoted by x ← A
and that of a deterministic algorithm B by x := B. Given
a sequence of elements v we refer to its ith element either
as vi or v[i] and to its total number of elements as #v. If
S is a set then #S refers to its cardinality. W denotes the
universe of words. If f = (w1, . . . , wm) ∈ W m is a ﬁle, then
#f denotes its total number of words and |f | is its bit length.
Also, ¯f is the ﬁle that results from removing all duplicates
from f (i.e., ¯f contains only the unique words in f sequenced
according to the order in which they ﬁrst appear in f ). If
s is a string then |s| refers to its bit length. We denote the
concatenation of n strings s1, . . . , sn by hs1, . . . , sni.
966We use various data structures including linked lists, ar-
rays and dictionaries. If L is a list then #L denotes its total
number of nodes. If A is an array then #A is its total num-
ber of cells, A[i] is the value stored at location i ∈ [#A] and
A[i] := v denotes the operation that stores v at location i
in A. A dictionary (also known as a key-value store or asso-
ciative array) is a data structure that stores key-value pairs
(s, v). If the pair (s, v) is in T, then T[s] is the value v as-
sociated with s. T[s] := v denotes the operation that stores
the value v under search key s in T and #T is the number
of pairs in T. We sometimes write s ∈ T to mean that there
exists some pair in T with search key s.
Throughout, k ∈ N will denote the security parameter
and we will assume all algorithms take k implicitly as in-
put. A function ν : N → N is negligible in k if for every
positive polynomial p(·) and all suﬃciently large k, ν(k) <
1/p(k). We write f (k) = poly(k) to mean that there ex-
ists a polynomial p(·) such that f (k) ≤ p(k) for all suﬃ-
ciently large k ∈ N; and we similarly write f (k) = negl(k)
to mean that there exists a negligible function ν(·) such
that f (k) ≤ ν(k) for all suﬃciently large k. Two distri-
bution ensembles χ and χ′ are computationally indistin-
guishable if for all probabilistic polynomial-time (PPT) dis-
tinguishers D, |Pr [ D(χ) = 1 ] − Pr [ D(χ′) = 1 ]| ≤ negl(k).
Basic cryptographic primitives. A private-key encryp-
tion scheme is a set of three polynomial-time algorithms
SKE = (Gen, Enc, Dec) such that Gen is a probabilistic al-
gorithm that takes a security parameter k and returns a
secret key K; Enc is a probabilistic algorithm takes a key K
and a message m and returns a ciphertext c; Dec is a de-
terministic algorithm that takes a key K and a ciphertext c
and returns m if K was the key under which c was produced.
Informally, a private-key encryption scheme is CPA-secure
if the ciphertexts it outputs do not reveal any partial infor-
mation about the plaintext even to an adversary that can
adaptively query an encryption oracle.
In addition to encryption schemes, we also make use of
pseudo-random functions (PRF) and permutations (PRP),
which are polynomial-time computable functions that can-
not be distinguished from random functions by any proba-
bilistic polynomial-time adversary. We refer the reader to
[20] for formal deﬁnitions of CPA-security, PRFs and PRPs.
3. DEFINITIONS
Recall from §1 that searchable encryption allows a client
to encrypt data in such a way that it can later generate
search tokens to send as queries to a storage server. Given a
search token, the server can search over the encrypted data