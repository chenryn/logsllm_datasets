tp5
.
--------------------------------------------------
('this is a string', [1, 2, 3, 4], ('more tuples',
1.0, 2.3, 4.5), 'this is yet another string')
不过另一方面, pickle 不能处理 code 对象(可以参阅 copy_reg 模块来完成
这个).
默认情况下, pickle 使用急于文本的格式. 你也可以使用二进制格式, 这样数
字和二进制字符串就会以紧密的格式储存, 这样文件就会更小点. 如 Example
4-12 所示.
4.6.0.2. Example 4-12. 使用 pickle 模块的二进制模式
File: pickle-example-2.py
import pickle
import math
value = (
"this is a long string" * 100,
[1.2345678, 2.3456789, 3.4567890] * 100
)
# text mode
data = pickle.dumps(value)
print type(data), len(data), pickle.loads(data) == value
# binary mode
data = pickle.dumps(value, 1)
print type(data), len(data), pickle.loads(data) == value
4.7. cPickle 模块
(可选, 注意大小写) cPickle 模块是针对 pickle 模块的一个更快的实现. 如
Example 4-13 所示.
4.7.0.1. Example 4-13. 使用 cPickle 模块
File: cpickle-example-1.py
try:
import cPickle
pickle = cPickle
except ImportError:
import pickle
4.8. copy_reg 模块
你可以使用 copy_reg 模块注册你自己的扩展类型. 这样 pickle 和 copy 模
块就会知道如何处理非标准类型.
例如, 标准的 pickle 实现不能用来处理 Python code 对象, 如下所示:
File: copy-reg-example-1.py
import pickle
CODE = """
print 'good evening'
"""
code = compile(CODE, "", "exec")
exec code
exec pickle.loads(pickle.dumps(code))
good evening
Traceback (innermost last):
...
pickle.PicklingError: can't pickle 'code' objects
我们可以注册一个 code 对象处理器来完成目标. 处理器应包含两个部分: 一
个 pickler , 接受 code 对象并返回一个只包含简单数据类型的元组, 以及一
个 unpickler , 作用相反, 接受这样的元组作为参数. 如 Example 4-14 所示.
4.8.0.1. Example 4-14. 使用 copy_reg 模块实现 code 对象的 pickle 操作
File: copy-reg-example-2.py
import copy_reg
import pickle, marshal, types
#
# register a pickle handler for code objects
def code_unpickler(data):
return marshal.loads(data)
def code_pickler(code):
return code_unpickler, (marshal.dumps(code),)
copy_reg.pickle(types.CodeType, code_pickler, code_unpickler)
#
# try it out
CODE = """
print "suppose he's got a pointed stick"
"""
code = compile(CODE, "", "exec")
exec code
exec pickle.loads(pickle.dumps(code))
suppose he's got a pointed stick
suppose he's got a pointed stick
如果你是在网络中传输 pickle 后的数据, 那么请确保自定义的 unpickler 在
数据接收端也是可用的.
Example 4-15 展示了如何实现 pickle 一个打开的文件对象.
4.8.0.2. Example 4-15. 使用 copy_reg 模块实现文件对象的 pickle 操作
File: copy-reg-example-3.py
import copy_reg
import pickle, types
import StringIO
#
# register a pickle handler for file objects
def file_unpickler(position, data):
file = StringIO.StringIO(data)
file.seek(position)
return file
def file_pickler(code):
position = file.tell()
file.seek(0)
data = file.read()
file.seek(position)
return file_unpickler, (position, data)
copy_reg.pickle(types.FileType, file_pickler, file_unpickler)
#
# try it out
file = open("samples/sample.txt", "rb")
print file.read(120),
print "",
print pickle.loads(pickle.dumps(file)).read()
We will perhaps eventually be writing only small
modules, which are identified by name as they are
used to build larger  ones, so that devices like
indentation, rather than delimiters, might become
feasible for expressing local structure in the
source language.
-- Donald E. Knuth, December 1974
4.9. pprint 模块
pprint 模块( pretty printer )用于打印 Python 数据结构. 当你在命令行下
打印特定数据结构时你会发现它很有用(输出格式比较整齐, 便于阅读).
4.9.0.1. Example 4-16. 使用 pprint 模块
File: pprint-example-1.py
import pprint
data = (
"this is a string", [1, 2, 3, 4], ("more tuples",
1.0, 2.3, 4.5), "this is yet another string"
)
pprint.pprint(data)
('this is a string',
[1, 2, 3, 4],
('more tuples', 1.0, 2.3, 4.5),
'this is yet another string')
4.10. repr 模块
repr 模块提供了内建 repr 函数的另个版本. 它限制了很多(字符串长度, 递
归等). Example 4-17 展示了如何使用该模块.
4.10.0.1. Example 4-17. 使用 repr 模块
File: repr-example-1.py
# note: this overrides the built-in 'repr' function
from repr import repr
# an annoyingly recursive data structure
data = (
"X" * 100000,
)
data = [data]
data.append(data)
print repr(data)
[('XXXXXXXXXXXX...XXXXXXXXXXXXX',), [('XXXXXXXXXXXX...XXXXXXXXXX
XXX',), [('XXXXXXXXXXXX...XXXXXXXXXXXXX',), [('XXXXXXXXXXXX...XX
XXXXXXXXXXX',), [('XXXXXXXXXXXX...XXXXXXXXXXXXX',), [(...), [...
]]]]]]]
4.11. base64 模块
base64 编码体系用于将任意二进制数据转换为纯文本. 它将一个 3 字节的二
进制字节组转换为 4 个文本字符组储存, 而且规定只允许以下集合中的字符出
现:
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
0123456789+/
另外, = 用于填充数据流的末尾.
Example 4-18 展示了如何使用 encode 和 decode 函数操作文件对象.
4.11.0.1. Example 4-18. 使用 base64 模块编码文件
File: base64-example-1.py
import base64
MESSAGE = "life of brian"
file = open("out.txt", "w")
file.write(MESSAGE)
file.close()
base64.encode(open("out.txt"), open("out.b64", "w"))
base64.decode(open("out.b64"), open("out.txt", "w"))
print "original:", repr(MESSAGE)
print "encoded message:", repr(open("out.b64").read())
print "decoded message:", repr(open("out.txt").read())
original: 'life of brian'
encoded message: 'bGlmZSBvZiBicmlhbg==\012'
decoded message: 'life of brian'
Example 4-19 展示了如何使用 encodestring 和 decodestring 函数在字符串
间转换. 它们是 encode 和 decode 函数的顶层封装. 使用 StringIO 对象处
理输入和输出.
4.11.0.2. Example 4-19. 使用 base64 模块编码字符串
File: base64-example-2.py
import base64
MESSAGE = "life of brian"
data = base64.encodestring(MESSAGE)
original_data = base64.decodestring(data)
print "original:", repr(MESSAGE)
print "encoded data:", repr(data)
print "decoded data:", repr(original_data)
original: 'life of brian'
encoded data: 'bGlmZSBvZiBicmlhbg==\012'
decoded data: 'life of brian'
Example 4-20 展示了如何将用户名和密码转换为 HTTP 基本身份验证字符串.
4.11.0.3. Example 4-20. 使用 base64 模块做基本验证
File: base64-example-3.py
import base64
def getbasic(user, password):
# basic authentication (according to HTTP)
return base64.encodestring(user + ":" + password)
print getbasic("Aladdin", "open sesame")
'QWxhZGRpbjpvcGVuIHNlc2FtZQ=='
最后, Example 4-21 展示了一个实用小工具, 它可以把 GIF 格式转换为
Python 脚本, 便于使用 Tkinter 库.
4.11.0.4. Example 4-21. 使用 base64 为 Tkinter 封装 GIF 格式
File: base64-example-4.py
import base64, sys
if not sys.argv[1:]:
print "Usage: gif2tk.py giffile >pyfile"
sys.exit(1)
data = open(sys.argv[1], "rb").read()
if data[:4] != "GIF8":
print sys.argv[1], "is not a GIF file"
sys.exit(1)
print '# generated from', sys.argv[1], 'by gif2tk.py'
print
print 'from Tkinter import PhotoImage'
print
print 'image = PhotoImage(data="""'
print base64.encodestring(data),
print '""")'
# generated from samples/sample.gif by gif2tk.py
from Tkinter import PhotoImage
image = PhotoImage(data="""
R0lGODlhoAB4APcAAAAAAIAAAACAAICAAAAAgIAAgACAgICAgAQEBIwEBIyMBJRUlISE
/LRUBAQE
...
AjmQBFmQBnmQCJmQCrmQDNmQDvmQEBmREnkRAQEAOw==
""")
4.12. binhex 模块
binhex 模块用于到 Macintosh BinHex 格式的相互转化. 如 Example 4-22 所
示.
4.12.0.1. Example 4-22. 使用 binhex 模块
File: binhex-example-1.py
import binhex
import sys
infile = "samples/sample.jpg"
binhex.binhex(infile, sys.stdout)
(This file must be converted with BinHex 4.0)
:#R0KEA"XC5jUF'F!2j!)!*!%%TS!N!4RdrrBrq!!%%T'58B!!3%!!!%!!3!!rpX
!3`!)"JB("J8)"`F(#3N)#J`8$3`,#``C%K-2&"dD(aiG'K`F)#3Z*b!L,#-F(#J
h+5``-63d0"mR16di-M`Z-c3brpX!3`%*#3N-#``B$3dB-L%F)6+3-[r!!"%)!)!
!J!-")J!#%3%$%3(ra!!I!!!""3'3"J#3#!%#!`3&"JF)#3S,rm3!Y4!!!J%$!`)
%!`8&"!3!!!&p!3)$!!34"4)K-8%'%e&K"b*a&$+"ND%))d+a`495dI!N-f*bJJN
该模块有两个函数 binhex 和 hexbin .
4.13. quopri 模块
quopri 模块基于 MIME 标准实现了引用的可打印编码( quoted printable
encoding ).
这样的编码可以将不包含或只包含一部分U.S. ASCII 文本的信息, 例如大多欧
洲语言, 中文, 转换为只包含 U.S. ASCII 的信息. 在一些老式的 mail 代理
中你会发现这很有用, 因为它们一般不支持特殊. 如 Example 4-23 所示.
4.13.0.1. Example 4-23. 使用 quopri 模块
File: quopri-example-1.py
import quopri
import StringIO
# helpers (the quopri module only supports file-to-file conversion)
def encodestring(instring, tabs=0):
outfile = StringIO.StringIO()
quopri.encode(StringIO.StringIO(instring), outfile, tabs)
return outfile.getvalue()
def decodestring(instring):
outfile = StringIO.StringIO()
quopri.decode(StringIO.StringIO(instring), outfile)
return outfile.getvalue()
#
# try it out
MESSAGE = "? i ?a ? e ?!"
encoded_message = encodestring(MESSAGE)
decoded_message = decodestring(encoded_message)
print "original:", MESSAGE
print "encoded message:", repr(encoded_message)
print "decoded message:", decoded_message
original: ? i ?a ? e ?!
encoded message: '=E5 i =E5a =E4 e =F6!\012'
decoded message: ? i ?a ? e ?!
如 Example 4-23 所示, 非 U.S. 字符通过等号 (= ) 附加两个十六进制字符来
表示. 这里需要注意等号也是使用这样的方式( "=3D " )来表示的, 以及换行符
( "=20 " ). 其他字符不会被改变. 所以如果你没有用太多的怪异字符的话, 编
码后字符串依然可读性很好.
(Europeans generally hate this encoding and strongly believe that certain
U.S. programmers deserve to be slapped in the head with a huge great fish
to the jolly music of Edward German....)
4.14. uu 模块
uu 编码体系用于将任意二进制数据转换为普通文本格式. 该格式在新闻组中很
流行, 但逐渐被 base64 编码取代.
uu 编码将每个 3 字节( 24 位)的数据组转换为 4 个可打印字符(每个字符 6
位), 使用从 chr(32) (空格) 到 chr(95) 的字符. uu 编码通常会使数据大小
增加 40% .
一个编码后的数据流以一个新行开始, 它包含文件的权限( Unix 格式)和文件
名, 以 end 行结尾:
begin 666 sample.jpg
M_]C_X 02D9)1@ ! 0 0 ! #_VP!# @&!@", repr(data)
data = binascii.b2a_uu(text)
text = binascii.a2b_uu(data)
print text, "", repr(data)
data = binascii.b2a_hqx(text)
text = binascii.a2b_hqx(data)[0]
print text, "", repr(data)
# 2.0 and newer
data = binascii.b2a_hex(text)
text = binascii.a2b_hex(data)
print text, "", repr(data)
hello, mrs teal  'aGVsbG8sIG1ycyB0ZWFs\012'
hello, mrs teal  '/:&5L;&\\L(&UR 'D\'9XE\'mX)\'ebFb"dC@&X'
hello, mrs teal  '68656c6c6f2c206d7273207465616c'
5. 文件格式
5.1. 概览
本章将描述用于处理不同文件格式的模块.
5.1.1. Markup 语言
Python 提供了一些用于处理可扩展标记语言( Extensible Markup Language ,
XML ) 和超文本标记语言( Hypertext Markup Language , HTML )的扩展. Python