如今发生的 AI 的兴起，因为我们有足够的基础数据IBM 的一份报告，"2017
年十大主要营销趋势"，我们每天创建 2.5 万亿字节的数据，而今天 90%
的数据大多是在过去两年中就创建的。这相当于一千万张蓝光光盘，如果堆叠起来，其高将相当于四座埃菲尔铁塔。来自大数据计划，也有了廉价的
GPUNvidia GeForce GPU 卡最初增加的 GigaFlop
（GFLOP）/功能的游戏需要良好的图形性能，以满足图像处理渲染的海量计算。GPU
在 2004 年左右的 GFLOP/s 方面超过了 CPU，而今天最好的图形卡比 5000
GFLOP/s 快得多，而 CPU 只能达到 1000 GFLOP/s
左右的速度。驱动的机器学习算法。
此外，深度学习的令人惊讶的是它是多么简单。在过去的十年里，没有人怀疑我们会在机器感知问题上取得这些令人难以置信的结果。现在，事实证明，您所需要的只是*足够大*的参数模型，这些模型在*足够多*的示例中经过梯度下降法的训练。
> 并不复杂，只是很多。
>
> Richard Feynman，在1972年的采访，从不同的角度看待世界
因此，这给了我们一个相当好的想法，为什么我们现在可以很容易的实现深度学习，
接下来，我们将探讨三种不同的机器学习技术：*决策树*、*神经网络*和*长期短期内存*网络。
 决策树
:   使用类似树状的决策图或模型及其可能的后果（包括机会-事件结果、资源成本和效用）的决策支持工具。
 长短期内存（LSTM）网络
:   非常适合从经验中学习，在未知大小和重要事件之间的约束下对时间序列进行分类、处理和预测。
神经网络
:   开始有点复杂，所以让我们花点时间分别深入探讨它们。 
# 什么是神经网络？
  在本节中，我们将通过简要介绍神经网络的基础知识，深度学习技巧以及如何将它们应用于实际数据问题来尝试回答这个问题。
## 神经元和神经网络
 不幸的是，我们不可能让 SRE 直接进入深度学习相关的
Python，而不首先谈论一点神经网络，以了解基础的开发理论。
神经网络由*人工神经元*组成。人工神经元只是一个数学函数，它被认为是生物神经元的模型。它接收一个或多个输入，并求和以生成输出。激活函数通常有
sigmoid
或步进函数的形状，但也可以采取其他函数的形式。[#biological_neuron_and_an_artificial_neuro](#biological_neuron_and_an_artificial_neuro)证明了这种关系。
![生物神经元和人工神经元](media/rId39.png){width="4.809734251968504in"
height="3.097344706911636in"}
生物神经元和人造神经元。
我们可以通过使用一个简单的 Python
函数来实现人工神经元，该函数又将分组到层中，从而创建神经网络。我们直接与其中一些层（如输入层和输出层）交互，而有些图层是隐藏层，如[#example_of_a\_neural_network_with_two_hidd](#example_of_a_neural_network_with_two_hidd)所示。
![具有两个隐藏层的神经网络示例。](media/rId40.png){width="4.713333333333333in"
height="3.466666666666667in"}
具有两个隐藏层的神经网络示例
## 应该如何以及何时应用神经网络？
 以下检查表将帮助您开始使用神经网络对数据执行机器学习任务：
1.  在应用神经网络之前，了解传统算法是否正常工作。
2.  检查神经网络是否可以解决问题。
3.  为该神经网络体系结构选择库或语言。
4.  格式化和批处理数据，以便使用。
5.  增加样本数据量，从而更好地训练。
6.  将待处理数据发送到神经网络。
7.  在培训期间验证并使用测试数据进行改进。
8.  测试你的模型并保存以供将来使用。
在我们决定我们确实使用神经网络或其他机器学习模型后，我们需要获取原始数据，这些数据在大多数时候都是非结构化的。清理和构建数据将是流程的最大部分，而构建模型、测试和预测将是该过程的最后一部分。
请记住，神经网络需要清晰、翔实的数据（主要是大数据）来训练。提供的数据越多，你的模型运行效果越好。另外你需要有一个合适的神经网络类型来解决这个问题。每个问题都有自己的要求。因此，数据定义了处理问题的方式。例如，如果问题是序列生成， 则*循环神经网络*更合适。但是，如果这是一个与图像相关的问题，你最好使用 *卷积神经网络*。最后但不容忽视的一点，运行深度神经网络模型可以有大量的硬件要求。神经网络可以追溯到很久以前，但由于计算资源更好、更便宜、功能更强大，它们现在更被人们所接受。如果你想用神经网络解决现实生活中的问题，准备好花钱采购计算能力！
最后别忘了，有时甚至可以确定，解决问题的最佳方法就是应用简单的统计信息，甚至应用常见的工程数据结构和算法。所以，不要急于应用机器学习；首先仔细分析问题和数据。
## 我们可以使用哪些类型的数据？
 有很多数据集，我们可以使用它。有些算是我们在 SRE
视野中常见的内容；其他数据可能更通用，或来自非常罕见的来源。花点时间想想你有什么，你需要组装什么，另外到底有多少数据。不要忘记，你拥有的数据越多，就能获得更好的结果。以下是最常见的来源：
机器数据
:   包括应用程序创建的日志消息、由基础结构捕获的数据以及工具生成的警报。
流量数据
:   不同系统之间的网络通信。
代理数据
:   从探针捕获的数据和来自技术堆栈的采样数据。代码诊断工具通常生成此数据，并常被开发和
    QA 团队使用。
合成数据
:   从综合事务和服务检查。
人类情绪数据
:   人类通信的编码数据，通常以支持请求单和社交媒体信息的形式进行，可以用来捕捉感知和情绪数据。
# 实用机器学习
在本节中，我们使用一些工具，并深入探讨一些可以应用于 SRE 的实际示例。
## 神经网络的热门库
 机器学习库的受欢迎程度，如[如#recent_github_popularity_metrics_left_par](#recent_github_popularity_metrics_left_par)所示，随着时间的变化而演变。
![最近机器学习库的 GitHub
流行指标（包含分支）。](media/rId45.png){width="4.173912948381452in"
height="3.0401334208223973in"}
机器学习库的最近 GitHub 流行指标（包含分支）
热门库包括：
-   [TensorFlow](https://www.tensorflow.org)
-   [Keras](https://keras.io)
-   [Caffe](http://caffe.berkeleyvision.org)
-   [SkLearn](http://scikit-learn.org)
-   [Theano](http://www.deeplearning.net/software/theano)
-   [Torch](http://torch.ch)
在本次调查过程中，我们涵盖了以上所有的库，但在本章中，我主要关注 Keras
和 TensorFlow。  
## 实用机器学习示例
 好了，现在让我们来看一些基本的针对 SRE
的机器学习案例，这样你就会明白开始是多么容易。
### 安装 Python、IPython 和 Jupyter 笔记本
    对于本实用指南，需要从[python.org](https://www.python.org/)安装
Python，然后运行`pip`命令， 如此处所示（在Python 2.7.9 及更高版本或 3.4
及更高版本上默认已安装 pip）：
    pip install --upgrade pip
我还建议你在继续测试时使用 IPython 和 Jupyter
笔记本，以便将工作保存在文件中：
    pip install jupyter
       jupyter notebook
现在，通过在浏览器页面上打开一个[*http://localhost:8888*](http://localhost:8888)链接来启动一个新的笔记本，来检查你的安装，如[#creating_a\_new_notebook](#creating_a_new_notebook)所示。[#jupyter_notebook_solving_the_fibonacci_se](#jupyter_notebook_solving_the_fibonacci_se)显示一个
Jupyter 笔记本，用于计算斐波那契序列。
![创建新笔记本。](media/rId56.png){width="2.4466666666666668in"
height="2.1266666666666665in"}
创建新笔记本
![解决斐波那契序列的 Jupyter
笔记本。](media/rId57.png){width="4.819094488188976in"
height="2.874371172353456in"}
解决斐波那契序列的 Jupyter 笔记本
### 决策树
  为了给出具体的例子，现在让我们看一些演示。第一个使用简单的*决策树*，根据我们针对当前
CPU、RAM
和过去六小时存储使用百分比情况的示例数据来确定服务器是否正常运行。这些算法始终影响机器学习的一个广泛领域，并用于分类和回归。在这种分析中，我们可以使用决策树直观地
、显式地表示决策和决策。模型在决策时遵循树的分支结构，并经常用于数据挖掘，以实现特定目标。
首先，需要从命令行安装 NumPy、SciPy 和 scikit-learn：
    pip install numpy scipy scikit-learn graphviz
在笔记本中运行以下 Python 代码，我们将训练决策树：
    from sklearn import tree
    import graphviz
    # training data:
    # Status,CPU,RAM,STORAGE
    data = [
     ['healthy',45, 32, 65],
     ['unhealthy', 87, 67, 100],
     ['unhealthy', 100, 1, 1],
     ['unhealthy', 76, 70, 90],
     ['unhealthy', 1, 1, 100],
     ['unhealthy', 31, 100, 50],
     ['healthy', 12, 65, 39],
     ['healthy', 20, 10, 46],
     ['unhealthy', 100, 50, 50],
     ['healthy', 34, 70, 37],
     ['healthy', 1, 50, 50],
     ['unhealthy', 50, 50, 100],
     ['healthy', 50, 1, 50],
     ['unhealthy', 1, 100, 1],
     ['healthy', 50, 50, 1],
     ['healthy', 53, 53, 80],
    ]
    metrics = [row[1:] for row in data]
    states = [row[0] for row in data]