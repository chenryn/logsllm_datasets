近2年来，安全大赛覆盖的内容越多越多涉及新技术、新业务，如工控、物联网、无线攻防、移动安全、区块链等，大部分选手对此比较陌生。本次技能大赛的精英赛是由CTF个人赛排名靠前的优胜选手参加，其中涉及较多新技术安全内容，整体解题率较低。为熟悉新技术安全的解题思路，对相关初学者的学习有所助益，特整理编写此文。
# easyAPK
直接反编译很容易找到java代码
    public static String reChange(String str) {
            char[] charArray = str.toCharArray();
            int length = charArray.length;
            for (int i = 0; i =0:
            if(maze[i][j-1] == '0'):
                ress+='a'
                visit(i,j-1)
        if i-1>=0:
            if(maze[i-1][j] == '0'):
                ress+='w'
                visit(i-1,j)  
        maze[i][j] ='0'
    maze=[]
    f='''1011111111
    1000000001
    1111111101
    1000000001
    1011111111
    1010001111
    1010100111
    1010110011
    1000111001
    1111111101'''
    for line in f.split('\n'):
        mazeline=line
        maze.append(list(mazeline))
    sx=len(maze)
    sy=sx
    print "The Result:"
    visit(startI,startJ)
    print ress
    #sdddddddssaaaaaaasssssddwwwddsdsdsds
程序为arm aarch64的程序，直接无法运行，需要安装aarch64运行库
    apt-get install qemu-user
    apt-get install libc6-arm64-gnu
    apt-get install gcc-arm-linux-gnueabi
    apt-get install gcc-aarch64-linux-gnu
    sudo ln -s /usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1 /lib/
    export LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib/
输入即可got flag
    ~/temp$ ./bin
    sdddddddssaaaaaaasssssddwwwddsdsdsds
    flag is=flag{405A5934322E2091C987E7586B544292}
# RootKit取证
题目为linux内存取证，由于vol.py默认只支持windows系列操作系统的内存取证，首先将题目提供的ubuntu1604.zip拷贝到%volatility_dir%/volatility\plugins\linux目录中
再使用`python vol.py --info`  
就可以看到profile中添加了一行支持Ubuntu16.04
    Profiles
    --------    Linuxubuntu1604x64    - A Profile for Linux ubuntu1604 x64
过滤查看一下vol.py支持的linux指令
    >python vol.py --info|findstr linux
    Volatility Foundation Volatility Framework 2.6
    linux_apihooks             - Checks for userland apihooks
    linux_arp                  - Print the ARP table
    linux_aslr_shift           - Automatically detect the Linux ASLR shift
    linux_banner               - Prints the Linux banner information
    linux_bash                 - Recover bash history from bash process memory
    linux_bash_env             - Recover a process' dynamic environment variables
    linux_bash_hash            - Recover bash hash table from bash process memory
    linux_check_afinfo         - Verifies the operation function pointers of network protocols
    linux_check_creds          - Checks if any processes are sharing credential structures
    linux_check_evt_arm        - Checks the Exception Vector Table to look for syscall table hooking
    linux_check_fop            - Check file operation structures for rootkit modifications
    linux_check_idt            - Checks if the IDT has been altered
    linux_check_inline_kernel  - Check for inline kernel hooks
    linux_check_modules        - Compares module list to sysfs info, if available
    linux_check_syscall        - Checks if the system call table has been altered
    linux_check_syscall_arm    - Checks if the system call table has been altered
    linux_check_tty            - Checks tty devices for hooks
    linux_cpuinfo              - Prints info about each active processor
    linux_dentry_cache         - Gather files from the dentry cache