1126 KB 7865 ms 2207 ms
1351 KB 4015 ms 1498 ms
1652 KB 2408 ms 1039 ms
2203 KB 1886 ms 883 ms
Table 2: Performance of our NIZKPoK. Parameters of all schemes were set to achieve 128-bit
quantum security, as discussed in the text. |σ| is the proof size; ttotal is the total computation time;
tonline is the online time.
Zero-knowledge of the resulting non-interactive proof system (in the random-oracle model) fol-
lows immediately from the fact that the 3-round interactive protocol is honest-veriﬁer zero knowl-
edge. Soundness—or, equivalently, the fact that the proof system is a proof of knowledge—can
be proved using standard results about the Fiat-Shamir transform [42]. Directly applying those
results unfortunately results in a relatively loose concrete-security bound due to use of the “forking
lemma.” We discuss later how we can obtain a better concrete-security reduction.
Security against quantum algorithms. The preceding analysis assumes a classical attacker. We
are not aware of any quantum attacks on our NIZKPoK that perform better than classical attacks,
other than for quantum attacks on the underlying primitives (e.g., preimage attacks using Grover’s
algorithm, or better collision-ﬁnding attacks) that can be handled by simply increasing parameters.
It is in this sense that we claim “post-quantum” security for our NIZKPoK. Nevertheless, we
note that there are no known proofs of security for the Fiat-Shamir transform against quantum
adversaries, except in some special cases [46, 18].
It is possible to apply Unruh’s transformation [45] to our 3-round proof to obtain a non-
interactive scheme with provable security against quantum attacks (in the quantum random-oracle
model); this was done in the Picnic submission [15]. We are currently exploring the impact of this
on the eﬃciency of our scheme.
Implementation optimizations. One potential source of overhead in our scheme is the large
number of parties in the underlying MPC protocol. To reduce the impact of this, we utilize bit-
level parallelization by packing all parties’ shares into one word. This is eﬃcient because most of
the computations on parties’ shares are identical, and therefore SIMD-friendly. This optimization
works regardless of the topology of the circuit C.
Note, however, that each party’s share is generated from a diﬀerent seed, and so that step
is not compatible with bit-packing. To address this, our implementation uses eﬃcient bit-matrix
transposition based on SSE instructions [47, 34]: namely, we ﬁrst generate a matrix of random
bits contiguously aligned in memory, where each row is generated from one random seed, and then
apply bit-level matrix transposition such that each column is a word containing one share of each
party. Now, operating on shares of all parties takes only one instruction.
Our MPC protocol is designed in the preprocessing model. We can leverage this feature in our
resulting proof system so as to allow the prover to perform most of its computation in an oﬄine
phase before the witness is known: speciﬁcally, the prover can compute h (cf. Figure 2) without
knowledge of w. Note that for other MPC-in-the-head proof systems where the underlying MPC
protocol does not use preprocessing, most of the prover’s computation cannot be done before the
13
witness is known because the prover cannot begin emulating the MPC protocol without knowing
the witness.
Improved commitments. In our protocol we use a commitment scheme to hide the states of
the parties following the preprocessing phase. If we are willing to model H as a random oracle,
we can streamline things by observing that all committed values have min-entropy at least κ
(see further discussion below) and can thus be committed by direct evaluation of H (i.e., we
may set comj,i := H(statej,i)). For the same reason, we can also omit rj. These optimizations
reduce communication since no additional randomness is needed for decommitment. We use these
optimizations for the performance results reported in this paper.
We stress that implementing commitments in this way is no longer zero knowledge: in particular,
it is possible to verify a guess for w given n− 1 of the parties’ states, a deterministic commitment to
the remaining party’s state, and the transcript of the online execution of the protocol. Nevertheless,
for our primary application to signatures (where w is hard for the attacker to compute), this form
of commitment suﬃces.
Interestingly, we observe that once commitments are done in this way, then it is possible to
extract (with high probability) a valid witness w from a successful forgery without any rewinding
at all; by avoiding the forking lemma, we thus obtain a tighter security reduction. In a bit more
(Recall G is the
detail: consider some attacker A making qG queries to the hash function G.
hash used for the Fiat-Shamir transform.) Each time A makes a query of the form G(h∗), where
h∗ represents a ﬁrst-round message in the 3-round protocol, the previous H-queries made by A
deﬁne3 values corresponding to M executions of the entire protocol Π (i.e., both the preprocessing
phase and the online phase). If any of those M executions is “correct,” then that execution deﬁnes
a value w such that C(w) = 1, i.e., a witness is extracted. Otherwise, the probability that the
response to that G-query allows A to generate a valid proof is bounded by (M, n, τ ). The overall
probability that A can generate a valid proof, yet a witness cannot be extracted, is thus dominated
by qG · (M, n, τ ). (A full analysis would also take into account the negligible-probability events
from footnote 3. Details will be given in the full version.) Chase et al. do not claim tight security
for the non-interactive version of ZKB++, and this observation is, to the best of our knowledge,
new to our work.
Computation/communication trade oﬀ. In Table 2 we show the proof size and running time
of the prover for circuits of various sizes.
(A comparison to prior work is given below.) For
computation time, we show both the total time (ttotal) to compute a proof, as well as the online
time (tonline), assuming all witness-independent work is done by the prover during an oﬄine phase.
The running time of the veriﬁer is always roughly the same as the (total) running time of the prover,
and so we do not report it. In all cases we set the parameters of the protocols so as to achieve 128-
bit security against known quantum attacks; in particular, we use SHA-256 as the hash function
and AES-256 for pseudorandom number generation, and set M, n, τ so that (M, n, τ ) ≤ 2−256.
Interestingly, our protocol oﬀers the ability to trade oﬀ communication and computation by
varying n. We show the eﬀect of this in Table 2. By increasing n from 8 to 64, we can reduce the
proof size almost by half; however, this results in a 4× slowdown in the computation. Nevertheless,
there may be applications that prefer to optimize proof length vs. computation time, or vice versa.
3It is possible that A has not made H-queries deﬁning those values, but in that case it is easy to see that the
probability A is able to use the response from the G-query to generate a valid proof is negligible. Alternately, a hash
collision would mean that the values are ill-deﬁned; such collisions occur with negligible probability.
14
Figure 3: Proof size of ZKB++, Ligero, and our protocols. Observe that our protocol yields the
smallest proof size for circuits containing ≈300–100,000 AND gates.
Scheme
Gen
Sign
Vrfy
|σ|
This paper (n = 64) 38.5 KB 0.01 ms 129 ms 129 ms
This paper (n = 16) 45.9 KB 0.01 ms 28 ms
28 ms
|sk|
32 B
32 B
|pk|
64 B
64 B
64 B
Assumption
random-oracle model
random-oracle model
random-oracle model
ZKB++ [16]
118.5 KB 0.01 ms 25 ms
17 ms
32 B
SPHINCS-256 [9]
41 KB 0.82 ms 13 ms 0.58 ms 1088 B 1056 B collision-resistant hashing
Table 3: Performance of signature schemes with 128-bit quantum security. We report times for key
generation, signing, and veriﬁcation, as well as the lengths of the signature σ, private key sk, and
public key pk.
Comparison to prior work. We compare the performance of our scheme to the most relevant
prior work, namely, ZKB++ and Ligero. As in those works, we view the size of the resulting proofs
as the primary metric of interest and so focus on that.
At the time of this writing, neither ZKB++ nor Ligero is available as an open-source implemen-
tation: ZKB++ (and Picnic) is only available as a signature scheme rather than as a full-ﬂedged
NIZKPoK, and code for Ligero is not available. We calculate communication complexity based on
equations provided in the original papers [16, 4], but are unable to report on the computational
time required by the other protocols.
For a circuit having |C| AND gates, the proofs in our NIZKPoK have length O(κ · |C|/ log n)
whereas those in ZKB++ have length O(κ · |C|). Since in our scheme n can vary (in contrast to
ZKB++ which ﬁxes n = 3), we can obtain asymptotically shorter proofs. More importantly, as
discussed below, we obtain concretely shorter proofs than in ZKB++ for medium-size circuits even
15
103104105106NumberofANDGates(|C|)101102103104ProofSize(KB)LigeroZKB++Ours,n=16Ours,n=64(cid:112)
when we ﬁx n ∈ {16, 64} as we do in our experiments.
The communication complexity of our scheme is asymptotically worse than that of Ligero,
which has proofs of size O(κ ·
|C| log |C|). However, the computational complexity of the prover
in Ligero is O(|C| log2 |C|), which is signiﬁcant for large circuits. In contrast, the computational
complexity of the prover in our protocol (after applying all the optimizations described in the text)
is O(|C|). Concretely, we note that in our protocol all operations can use hardware acceleration,
whereas Ligero requires ﬁeld operations that are expected to be much slower.
Notwithstanding the fact that the communication complexity in Ligero is asymptotically better
than in ours, there is a range of circuit sizes for which the concrete communication of our protocol
is best. This is demonstrated in Figure 3, where we plot the communication complexity of ZKB++,
Ligero4, and our protocol (for two diﬀerent values of n) as the circuit size varies, for a ﬁxed input
length |w| = 256. (In all cases, parameters were set so as to achieve 128-bit quantum security.)
Figure 3 shows that for very small circuits (below ≈ 300 AND gates), ZKB++ oﬀers the lowest
communication complexity; for very large circuits (above ≈ 100, 000 AND gates), Ligero is best.
But in the range of 300–100,000 AND gates, our protocol outperforms both of those. This range
captures many circuits of cryptographic interest, including those used in our signature scheme and
the more advanced schemes introduced in Section 4.
3.2 A Post-Quantum Signature Scheme
As in the work of Chase et al. [16, 15], we can use our NIZKPoK to obtain a signature scheme
whose security is based on symmetric-key primitives only. Speciﬁcally, the private key is a uniform
value k ∈ {0, 1}κ; the public key is y := PRFk(0κ), where PRF is a block cipher; and a signature
is an NIZKPoK of k, where the message being signed is included as input to the hash function G
used to compute the challenge. For 128-bit quantum security, we use a block cipher with 256-bit
key and block length.
We implemented the resulting signature scheme, instantiating PRF with the LowMC block
cipher [3] that was designed to be eﬃcient for MPC applications. Our implementation was meant
to enable an “apples-to-apples” comparison to the signature scheme of Chase et al. [16] at a 128-bit
quantum security level. In particular, we use the same hash function, pseudorandom generator,
and instantiation of PRF as they do.
In Table 3 we display the performance of our scheme and compare it to other post-quantum
signatures based on symmetric-key primitives. Performance numbers for the ZKB++ signature
scheme were obtained from a most recent technical report [41] that is slightly better than what
is reported in [16].5 For our scheme, we report performance for n = 16 and n = 64. We ﬁnd
that both versions of our scheme achieve better signature length compared to the scheme of Chase
et al., with an improvement of 2.6–3×. The running time of our scheme is comparable to their
scheme when n = 16. When n = 64, our running time is noticeably worse, but nevertheless still
practical. Interestingly, the signature length of our scheme is even competitive with hash-based
signature schemes (not constructed using NIZKPoKs); in particular, when n = 64 our signatures
are 6% shorter than those of SPHINCS-256 [9].
4Numbers for Ligero are conservative estimates; their paper only considers 40-bit security in an interactive setting.
5We take the numbers for the version of their scheme using the same LowMC circuit we use.
16
4 Constructing Ring and Group Signatures
To highlight the ﬂexibility and power of our NIZKPoK, we also use it to build eﬃcient ring/group
signatures based on symmetric-key primitives alone.6 To the best of our knowledge, the resulting
schemes are the most eﬃcient constructions of these primitives that can claim to oﬀer post-quantum
security.
4.1 Ring Signatures
Ring signatures were introduced by Rivest, Shamir, and Tauman [44]. Roughly, they allow a user
to adaptively deﬁne a ring R of users (of which it is a member), and then generate a signature
that can be veriﬁed as having been generated by some user in that ring (without revealing precisely
which one). Importantly, this can be done without the involvement of the other users in the ring.
Formally, a ring signature scheme consists of three probabilistic polynomial-time algorithms
(Gen, Sign, Vrfy) deﬁned as follows:
• The key-generation algorithm Gen takes as input the security parameter κ and generates
public key pk and associated private key sk.
• The signing algorithm Sign takes as input a set (or “ring”) R = {pki} of distinct public keys,
a secret key sk corresponding to one of the public keys in R, and a message M . It outputs a
signature σ.
• The veriﬁcation algorithm Vrfy takes as input a ring R of distinct public keys, a message M ,
and a signature σ. It outputs a single bit indicating acceptance or rejection.
Correctness requires that for any collection of keys {(pki, ski)}i∈[(cid:96)] output by Gen, any message M ,
and any j ∈ [(cid:96)], we have
Vrfy({pki}, M, Sign({pki}, skj, M )) = 1.
Ring signatures have two security requirements: unforgeability and anonymity. We present formal
deﬁnitions below, following Bender et al. [8].
Unforgeability. Intuitively, unforgeability means that an adversary not in R should not be able
to generate a valid signature σ on a message M relative to a ring R unless some honest user in R
had previously signed M (relative to the same ring) [8, Deﬁnition 8].
Deﬁnition 4.1. Ring signature scheme (Gen, Sign, Vrfy) is unforgeable if, for any ppt adversary