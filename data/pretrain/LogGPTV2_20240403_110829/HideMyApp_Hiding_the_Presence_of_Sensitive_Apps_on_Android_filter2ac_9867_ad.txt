USENIX Association
28th USENIX Security Symposium    719
Figure 1: Overview of the HMA architecture. Nosy apps only learn the generic names of the container apps.
Note that for the sake of simplicity, here we only present
a solution that protects mandatory features of Android apps.
A malicious app might try to ﬁngerprint sensitive apps based
on, for instance, the runtime information produced by their
container apps. We discuss this in Section 9.
HMA User-Level Virtualization. To launch the APK of a
sensitive app without installing it, its container app generates
a randomly named child-process in which the APK will run,
i.e., the APK is executed under the same UID as its container
app. Thereafter, the container app loads the APK dynamically
at runtime, and it intercepts and proxies the interactions be-
tween the sensitive app and the underlying system (the OS
and the app framework). To do so, we rely on an open-source
lib for app-virtualization called DroidPlugin [8].
8.3 HMA Operations
In this section, we detail the procedure followed by a user
when she (un)installs, updates, or uses sensitive apps.
App Installation. To install a sensitive app, the user opens
her HMA Manager app to retrieve the set of apps provided by
the HMA App Store. Once she selects a sensitive app, the
HMA Manager app sends to the HMA App Store an installa-
tion request consisting of the name of the sensitive app and
her desired generic package name for the container app. The
HMA App Store correspondingly ﬁnds in its database or cre-
ates a container app, and it sends the container app, together
with the original label and icon of the sensitive app, to the
HMA Manager. The HMA Manager prompts the user for her
conﬁrmation about the installation. Once the user accepts, the
installation occurs as in standard app installation on Android.
Also, the HMA Manager saves, in its private directory, a record
of the package name of the container app and the package
name, the original icon and the label of the sensitive app.
App Launch. To launch a sensitive app, the user opens her
HMA Manager app to be shown with the set of container apps
installed on her phone. Using the information stored in its
database about the mappings between container apps and
sensitive apps (Section 8.3), the HMA Manager displays to
the user the container apps with the original labels and icons
of the corresponding sensitive apps. Therefore, the user can
easily identify and select her sensitive apps.
The ﬁrst time a container app runs, it needs to obtain the
sensitive APK from the HMA App Store; then it stores the
APK in its private directory. This incurs some delays to the
ﬁrst launch of the sensitive app. However, it is needed to
prevent the sensitive app from being ﬁngerprinted: If the sen-
sitive APK was included in the resources or assets folders
of its container app so that the container app could copy and
store the APK in its private directory at installation time, a
nosy app would be able to obtain the sensitive APK. Recall,
any app can obtain the resources and assets of other apps (Sec-
tion 4). Also, Android does not permit apps to automatically
start their background services upon installation.
At runtime, the container app dynamically loads the sensi-
tive APK. Thereafter, it intercepts and proxies API calls and
system calls between the sensitive app and the underlying
system. If the version of the Android OS is at least 6.0, per-
missions requested by the sensitive app will be prompted by
its container app at runtime. Thus, they will be shown with
the generic package name of the container app. This, how-
ever, does not affect the comprehensibility of the permission
requests, as shown by our user study (Section 10.6). Addi-
tionally, when an app sends an implicit intent with an action
supported by the sensitive app, the operating system will show
the sensitive app as an option for the user to choose to handle
the requested action. This introduces a usability problem: the
icon of the sensitive app presented to the user is a generic
icon. This, however, can be solved by using the direct share
targets feature in Android – a feature that enable apps to show
ﬁner-grained internal content in the chooser dialog window.27
App Update. When a sensitive app on the HMA App Store
has an update, for each predeﬁned generic container-app
package name, the HMA App Store generates a correspond-
ing container app for the updated sensitive app. This step
is needed, because the conﬁguration ﬁle of the container
app needs to be updated w.r.t. the updates introduced by the
sensitive app. The HMA App Store then sends a push no-
tiﬁcation to all HMA Manager clients to notify them about
the update. If a user has the sensitive app on her phone, her
HMA Manager sends the package name of its existing con-
tainer app to the HMA App Store. In return, it receives the cor-
responding updated container app from the HMA App Store.
It then prompts the user to conﬁrm the installation. Once the
user accepts, the updated container app is installed, similarly
720    28th USENIX Security Symposium
USENIX Association
HMA App Store(1) Request mHealthapp (2) A container app for mHealthAPK App-3App-1App-2Nosy App 2Nosy App 1Third-party serversHMA ManagerPlay StoreList of installed apps:-Nosy App 1-Nosy-App 2-Play Store-HMA Manager-App-1-App-2-App-3to the standard app-update procedure on Android.
App Uninstallation. To uninstall a sensitive app, the user
opens her HMA Manager app to be shown with the set of
her container apps. Once she selects the container app, the
HMA Manager prompts her to conﬁrm the uninstallation.
Thereafter, the uninstallation occurs similarly to the standard
app-uninstallation procedure on Android.
9 Privacy and Security Analysis
Here, we present an analysis of HMA to show that it effectively
achieves its privacy and security goals w.r.t. different capa-
bilities of the nosy apps (i.e., their granted permissions and
privileges) as shown in Table 1.
9.1 Privacy
Nosy Apps without Permissions. HMA effectively protects,
by default, the core attributes of sensitive apps. First, a nosy
app cannot obtain the package name of a sensitive app, be-
cause the sensitive app is never registered on the system;
instead, its container app with a generic package name is in-
stalled. Second, the resources, shared libraries, developers’
signatures and developers’ signing certiﬁcates of the sensitive
app cannot be learnt by the nosy app, because they are not
declared or included in the container-app’s APK; instead they
are dynamically loaded from the sensitive APK at runtime.
Third, the nosy app cannot learn the components’ names of
the sensitive app, because these names are randomized. To
prevent ﬁngerprinting attacks based on the number of com-
ponents declared in the container app, the HMA App Store
adds dummy random components during the generation of
the container app such that all the container apps declare the
same number of components.
A nosy app might try to ﬁngerprint sensitive apps by using
the sets of permissions declared by their container apps. This
can be mitigated if all container apps declare a union of per-
missions requested by sensitive apps in the HMA App Store.
Note that for devices with Android 6 or later, the container
app requests at runtime only the permissions needed by its
sensitive app, and users can grant or decline these requests.
This makes it difﬁcult for nosy apps to ﬁngerprint a sensitive
app using the set of permissions granted to its container app.
HMA needs collaboration from app developers to prevent
ﬁngerprinting attacks based on the customized conﬁgurations
of some sensitive apps, e.g., themes and screen settings. The
HMA App Store can deﬁne a guideline for app developers to
follow such that all apps have the same conﬁgurations. This
will affect the look and feel of the sensitive apps, but it is a
trade-off between usability and privacy. Note that the same
approach has been used in other deployed systems, e.g., in
the Tor browser where all the versions have the same default
window size and user-agent strings.28 To facilitate guideline
compliance, the HMA App Store can also provide developers
with IDE plugins to help them write guideline-compliant
code; such an approach has been proposed in existing work
(e.g., [43] and [31]).
App developers might want to use custom features, such
as custom permissions, custom actions for the intent ﬁlters of
their apps’ components. These features, however, can be used
to ﬁngerprint their sensitive apps, hence should not be used
by app developers. An app might want to support a content
provider for sharing data between its components or for shar-
ing data with other apps. HMA can support the former case; the
container apps do not need to declare the content provider in
its manifest ﬁle, but it handles the requests from the compo-
nents of the sensitive apps internally. HMA, however, cannot
support the case of sensitive apps using content providers to
share data with other apps. This is because in order to do so,
the container apps need to declare the URIs of their content
providers in their manifest ﬁles, and these URIs can uniquely
identify apps. These are limitations of HMA, however, from
our analysis, only a small number of apps is affected by these
limitations (Section 10.5).
Nosy Apps with Permissions. A nosy app can ﬁngerprint
sensitive apps based on their use of the external storage (SD
card), e.g., unique directories and ﬁles. To prevent this, con-
tainer apps can intercept and translate calls from sensitive
apps associated with the creation or access of ﬁles in external
storage. However, note that apps are not recommended to store
data there, especially mHealth apps. To prevent an app with
VPN capabilities from ﬁngerprinting sensitive apps based on
the IP addresses in the header of the IP packages, the sensi-
tive apps can relay their trafﬁc through the HMA App Store
servers; this protection is provided at the cost of additional
communication delays for the apps and it requires collabora-
tion with app developers.
A malicious app cannot ﬁngerprint a sensitive app by using
the list of running processes, because the sensitive app runs
inside the child process of its container app with a random
name. To prevent malicious apps from abusing its special
permissions to ﬁngerprint sensitive apps using their runtime
statistics, e.g., resources consumed by their container apps,
the container apps can randomly generate dummy data to
obfuscate the usage statistics of sensitive apps. Note that this
does not require changes to the sensitive apps. In future work,
we will evaluate techniques against these side-channel attacks
such as [52] and [26]. HMA cannot prevent malicious apps,
with permission to accessibility services, from ﬁngerprinting
sensitive apps. Accessibility services enable access to apps’
unique layout information, and it is not practical to require
all sensitive apps to use a generic layout. However, Google
currently bans the use of accessibility services for purposes
not related to helping users with disabilities.29 Users should
grant this permission only to apps they trust.
Nosy Apps with Default App Privileges. Recall, HMA, by
default, hides the package name of the sensitive apps. To pre-
USENIX Association
28th USENIX Security Symposium    721
vent nosy apps from ﬁngerprinting sensitive apps by using
their UI states, the container apps can also obfuscate the UI
states by overlaying transparent frames on the real screens of
the sensitive apps. Similarly to the case of other runtime statis-
tics discussed above, the container apps can also randomly
generate dummy data to obfuscate the memory footprints and
power consumptions of the sensitive apps.
Malicious Apps with the Debugging Privilege (adb). Re-
call, HMA protects the package name and the process names
of the sensitive apps by default. Also recall, the container
apps can randomize runtime statistics of the container apps.
In addition, the paths to the APK ﬁles of the container apps
do not reveal any information about the sensitive apps. Also,
the malicious app cannot retrieve the APK ﬁles of the sen-
sitive apps, because the APKs are stored inside the private
directories of their container apps.
To prevent advanced attacks by malicious apps, e.g., ﬁn-
gerprinting sensitive apps by reading the log of the phone,
HMA requires collaboration from app developers. Developers
should not write identifying information about their sensitive
apps to the log. Apps with adb privilege can take screenshots
of the phone and infer apps’ names from the screenshots.
HMA cannot prevent this attack. However, note that this at-
tack requires the malicious app to do extra and error-prone
operations (e.g., image processing) to identify sensitive apps.
9.2 Security
By using user-level virtualization techniques to launch an
APK, HMA does not require users to modify the OS of the
phone. The Android’s app-isolation security model is also
preserved, because each APK runs inside the context of its
container app. Thus, it is executed in a process under the same
UID as its container app, and it uses the private data direc-
tory of its container app. Similarly to other third-party stores
(e.g., Amazon or F-Droid), HMA requires users to enable the
“allow apps from unknown sources" setting on their phones.
However, apps installed from these sources are still scanned
and checked by Android security services for malware [10].
Also, recently, this setting was converted to a per-app per-
mission [19]. As a result, granting the HMA Manager app the
permission to install apps from unknown sources will not give
other apps on the phone the same permission.
As on the Google Play Store, with HMA, app developers reg-
ister their public keys on the HMA App Store, and sign their
apps before they submit to the HMA App Store. Moreover,
the HMA App Store signs the container apps that it generates
to vouch for the integrity of the container apps and the sen-
sitive apps. This mechanism, however, introduces a security
issue for sensitive apps: Apps from different developers are
signed by the same private key of the HMA App Store, hence
a dishonest app developer might exploit this same-signature
property to access signature-protected components of other
apps.30 Note that requesting or declaring signature-protection
permissions will facilitate ﬁngerprinting of sensitive apps,
hence HMA does not support this feature. As a result, this
attack is not possible in HMA. Also note that few apps use
signature-protected permissions (see Section 10.5). In future
work, we will explore mechanisms for enabling container
apps to verify the signatures of sensitive apps at runtime, in
order to prevent unauthorized access to signature-protected
components of their sensitive apps.
HMA container apps prompt users only for permissions re-
quested by sensitive apps. To relax the trust assumptions on
the HMA App Store and HMA Manager, the HMA App Store
can provide an API so that anyone can implement her own
HMA Manager app, or the HMA Manager app can be open-
source, i.e., anyone can audit the app and check if it follows
the protocols as prescribed. Therefore, assuming that the meta-
data of the network and the lower communication layers can-
not be used to identify users, e.g., by using a proxy or Tor, the
HMA App Store cannot link a set of sensitive apps to a user.
10 Evaluation
To evaluate HMA, we used a real dataset of free and paid
mHealth apps on the Google Play Store. We looked into three
evaluation criteria: (1) overhead experienced by mHealth apps,
(2) HMA runtime robustness and its compatibility with mHealth
apps, and (3) HMA usability.
10.1 Dataset
We selected 50 apps from the medical category on the Google
Play Store, of which 42 apps are free and 8 apps are not. To
have a signiﬁcant and diverse dataset, we selected apps based
on their popularity (more than 1000 downloads), their medi-
cal specialization, and their supported functionality. From the
50 apps, we ﬁltered out apps that make calls to APIs that we
did not support in our prototype implementations, including
Google Mobile Services (GMS), Google Cloud Messaging
(GCM) and Google Play Services APIs. Note that these ser-
vices could be supported, similarly to other services, at the
cost of additional engineering efforts. We also ﬁltered out
apps that use Facebook SDKs, because such SDKs often use
custom layouts that are not yet supported by the user-level vir-
tualization lib that HMA uses. Exploring the interaction mecha-
nisms between custom layouts with the Android framework
is an avenue for future work.
After ﬁltering, we obtained a set of 30 apps (24 free
apps and 6 paid apps, see Appendix B of our techni-
cal report at [44]) for 15 medical conditions. Also, these
apps support features that are crucial for mHealth apps,
e.g., a Bluetooth connection with external medical devices
(e.g., Beurer HealthManager app [4]) and an internet con-
nection (e.g., Cancer.Net app [5]).
722    28th USENIX Security Symposium
USENIX Association
10.2
Implementation Details
10.3.2 App Launch
Our prototype features the main components of HMA, in-
cluding the HMA App Store and the HMA Manager app. To
measure the operational delay introduced by HMA, we imple-
mented a proof-of-concept HMA App Store on a computer
(Intel Core i7, 3GHz, 16 GB RAM) with MacOS Sierra. Our
HMA App Store dynamically generated container apps from
APKs and relied on an open-source lib called DroidPlugin [8]
for user-level virtualization. Our prototype container apps dy-
namically loaded the apps’ classes and resources from the
mHealth APKs and supported the interception and proxy of
API calls commonly used by mHealth apps, e.g., APIs related
to Bluetooth connections and SQLite databases.
10.3 Performance Overhead
In this section, we present the delays introduced by HMA to
sensitive apps during app-installation and app-launch op-
erations.31 For the evaluation of delays added by the user-
level virtualization to commonly used API methods and sys-
tem calls at runtime, we refer the readers to existing work,