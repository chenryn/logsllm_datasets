Lyft 如何配置和操作 Envoy
也随着时间的推移而演变。最初，所有配置都是手写的，并通过最终一致的部署过程和使用
Salt 与二进制文件一起部署。随着时间的推移，又切换到模板化，并使用 Python
和 Jinja 部分机器生成的配置。在撰写本文时，Lyft（和大多数 Envoy
的其他用户）正在转向一个完全集中的配置系统，该系统由一组完整的*发现* API
提供支持。
在 Lyft 部署 Envoy
的最终结果是：*开发人员在构建应用程序时不再考虑网络*。当网络问题发生时，开发人员拥有工具来帮助快速发现和修复问题。部署在
Lyft
的网络组件提高了开发人员的工作效率，提高了总体成功率，并减少了发生事故期间的平均恢复时间
（MTTR）。
## Lyft 运营的 Envoy
   正如我已经描述的那样，无论好坏，Lyft 都没有类似 SRE
的职称。相反，所有开发人员都应该兼任可靠性工程师。我领导 Lyft
的网络团队，除了开发Envoy，我们也维护它。虽然我对 DevOps
文化的出现总是有强烈的意见（超出了本章的范围），对于像 Envoy
这样的系统组件，我认为让系统的开发人员也负责维护是一个无需多说的选择，只有这样才能确保服务网络真正实现了所谓的透明网络。在以下小节中，我简要总结了这方面的一些更有趣的知识。
### 运维的经验
自动创建默认仪表板、跟踪、日志和警报
:    在 Lyft，我们为每个服务创建了软件仪表面板，包括与 Envoy
    相关的统计信息、日志记录和跟踪。根据这些数据，我们会自动为每个服务创建警报。这将为每个服务创建一个操作基线，从而更容易深入了解并开始调试问题。此外，我们有一个服务到服务的仪表板，允许用户从下拉列表中选择出口和入口服务，并立即查看该跃点的相关统计信息。最后，我们有一个"全局"Envoy
    仪表板，该仪表板将服务网格范围的统计信息聚合到一个位置，并允许对全系统运行状况进行细微的检查。
文档
:    我不能说明文档的重要程度以及我们在行业内投资的程度。 在DevOps
    环境中，文档尤其重要；虽然我们希望所有开发人员都是可靠性工程师，但实际上，该领域的知识基础差异很大。我的团队花费了大量时间来帮助调试系统范围的问题，如果没有我们可以指向开发人员的高质量文档，我们就会精力透支。这主要相当于一整套关于
    Lyft 特定的仪表板、警报、参考步骤、常见问题解答、配置指南等内部
    Envoy 文档，这些文档比公共 Envoy
    文档更具体，更易于没有网络经验的开发人员访问。
模板化配置生成
:   Envoy 配置极其复杂。我们允许 Lyft
    的开发团队通过网络团队控制的模板灵活地仅更改其中的一小部分。这允许大多数系统保持一致性，从而更容易理解汇总，同时仍允许在适当情况下实现本地灵活性（例如每个服务的自定义熔断配置）。
热重启，便于更新和回滚
:   与许多组织一样，Lyft 目前无法访问生产中的不可变容器部署系统。Envoy
    使具有强大的"热重启"功能，这意味着它可以完全重新启动，包括配置和二进制，而不会放弃任何连接。这使我们能够快速轻松地发布更新或回滚。
管理节点上调试的终结点
:   Envoy
    提供了一套强大的地方管理终结点，这些终端设计为可人阅读且易于交互。尽管实现无需登录主机并查看某些内容是很好的，但实际上可靠性工程师始终这样做，而且轻松访问运行时信息对于敏捷性运维来说至关重要。
### 开发方面的经验
分离的边三轮部署过程
:    为了真正实现边三轮代理模型在开发敏捷性方面的优势，我们允许 Envoy
    通过独立于每个应用程序的过渡环境、试错环境和生产环境进行完全部署。这使我们能够独立于应用程序部署过程推出新功能、修补程序和调试工具。
### 技术上的经验
地址解析协议（ARP）表
:   我为什么要提出ARP？这是我们在 Lyft 部署 Envoy
    时遇到的最有趣的错误，任何大型服务网格部署都需要注意。ARP 是 IP
    地址转换为下一跃点 MAC 地址（L3 到 L2）的过程。内核包含 ARP
    缓存，用于存储最近使用的映射。通常，此缓存的任何抖动都会导致可怕的性能，因为在刷新缓存条目时需要重复进行重新解析。内核缓存大小通常默认为相对较小的值，该值针对传统的基于
    IP 的网络进行优化，其中节点与它交谈的直接 L2
    邻居数量较小。*对于服务网格来说，这不一定是如此！*一些现代网络设计利用大型和扁平的
    L3 IP
    子网。在这些设计中，如果主机可以与子网中的任何其他主机通信（特别是不使用中间负载均衡器），则邻居的数量可能很大。在
    Lyft，我们必须增加每个节点 ARP 缓存的默认大小，以考虑此实际情况。在
    Linux 上，这涉及到调整内核参数，如
    `net.ipv4.neigh.default.gc_thresh1`
    （和其他相关值）。其他操作系统具有类似的设置。
文件描述符限制
:   与 ARP
    表大小有些相关，允许边三轮代理创建大量文件描述符也很重要，因为代理最终将创建大量网格连接。此外，在一次糟糕的生产环境故障中，Envoy
    将创建文件描述符的失败视为与内存不足（OOM）条件相同：一个致命的崩溃错误。在运行时，用尽允许的文件描述符的数量可能很难诊断。使条件（如果配置正确，应该永远不会发生）导致对严重问题的可见性更高，并最终提高可靠性。
总体而言，由于专注于增量交付，操作简便性以及我们刚才讨论的要点，通过
Envoy 在 Lyft 的服务网络的部署和运营相对平稳。    
# 服务网格的未来
在未来 5 到 10
年内，边三轮代理和管理系统的服务网格的开发领域将看到软件供应商和大型云服务供应商的大量投资。因为它们给应用程序开发人员和可靠性工程师带来的好处是巨大的：工程师使用并运行在正常运行的服务网格之上的微服务后，他们不太可能想要在没有代理的情况下再次部署应用程序。不必自己动手开发的好处是显而易见的。  
# 延伸阅读
-   [Envoy proxy](https://www.envoyproxy.io/)
-   ["Service mesh data plane vs. control
    plane"](https://medium.com/@mattklein123/service-mesh-data-plane-vs-control-plane-2774e720f7fc)
-   [Istio service mesh](https://istio.io/)
-   ["Lyft's Envoy
    dashboards"](https://blog.envoyproxy.io/lyfts-envoy-dashboards-5c91738816b1?gi=8f2449271a3d)
-   ["The universal data plane
    API"](https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a)
-   ["Microservices Patterns With Envoy Sidecar Proxy: The
    series"](http://blog.christianposta.com/microservices/00-microservices-patterns-with-envoy-proxy-series/)
-   ["Introduction to modern network load balancing and
    proxying"](https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236)
-   ["Embracing eventual consistency in SoA
    networking"](https://blog.envoyproxy.io/embracing-eventual-consistency-in-soa-networking-32a5ee5d443d)
# 编者介绍
马特·克莱因是 Lyft 的软件工程师，也是 Envoy 的创造者。Matt
在各种公司中从事操作系统、虚拟化、分布式系统和网络工作超过 15
年，专注于使系统易于维护。一些亮点包括领导 Twitter 的 C++
L7边缘代理的开发，以及亚马逊 EC2 中高性能计算和网络的发展。