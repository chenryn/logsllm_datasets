# HITCON 101 Sharing: SELinux - From Unfamiliar to Proficient

## About Me
**王禹轩 (Bighead)**
- **中央大学 Advanced Defense Lab**
  - 打胖
- **工研院 Intern**
  - Whitelist 1.0 PoC
  - Hypervisor-based Whitelist (page verification)
  - SELinux

## SELinux Top Search: Methods to Disable SELinux
1. `setenforce 0`
2. Edit `/etc/selinux/config`:
   - `SELINUX = permissive` or `disable`
3. Delete policy
4. Remove the boot argument: `security=selinux selinux=1`
5. Do NOT use default SELinux-enabled distributions (e.g., CentOS)

## SELinux Empowerment
SELinux provides you with the power to control it. Don't be afraid of SELinux!

### Resources for Learning SELinux
- 60-page survey paper
- 400-page SELinux Notebook
- Makefile survey
- Policy Set survey
- Powerful mentor

### Trust in SELinux
- Reference: Santa Claus PNG Transparent Image - PngPix
- Trust Evil Santa Claus!?
- Futurama: Robot Santa Claus

## Why Access Control?
- **Goal**: Protect data and resources from unauthorized use.
  - **Confidentiality (or secrecy)**: Related to the disclosure of information.
  - **Integrity**: Related to the modification of information.
  - **Availability**: Related to the denial of access to information.
- Reference: Security Awareness Posters

## Access Control Basic Terminology
- **Subject**: Active entity – user or process.
- **Object**: Passive entity – file or resource.
- **Access operations**: read, write, etc.

### Access Control is Challenging Because
- Access control requirements are domain-specific.
  - Generic approaches over-generalize.
- Access control requirements can change.
  - Anyone could be an administrator.
- Reference: https://profile.cheezburger.com/imaguid/

## Basic Concepts of Different Access Control Policies
- **Discretionary Access Control (DAC)**: Policies control access based on the identity of the requestor and access rules stating what requestors are (or are not) allowed to do.
- **Mandatory Access Control (MAC)**: Policies control access based on mandated regulations determined by a central authority.

### DAC: Access Matrix Model
| Subject | File 1 | File 2 | File 3 | Program 1 |
|---------|--------|--------|--------|-----------|
| Alice   | own    | read   | write  | read      |
| Bob     | read   | read   | write  | execute   |
| Charlie | read   | execute| read   |           |

### DAC Weaknesses
- **Scenario**: Bob owns a secret file. Bob can read it, but Daniel cannot.
- **Trojan Horse**: Software containing hidden code that performs illegitimate functions unknown to the caller.
- **Example**:
  - Bob invokes an application (e.g., calendar).
  - The application reads contacts and writes stolen code.
  - Malicious code steals the secret file content.
  - The stolen file is now owned by Daniel.

### MAC: Behavior-Based Control
- **Policies control access based on mandated regulations determined by a central authority.**
- **Example**:
  - User: Bob
  - Application Process: Calendar (calendar_t)
  - Central Authority Rule: 
    - `calendar_t` cannot read `secret_t`.
    - `calendar_t` can read but not write `stolen_t`.

### How MAC Fixes DAC Weaknesses
- **Scenario**: Bob invokes the calendar application.
- **Outcome**: The malicious code fails to write the stolen file because `calendar_t` does not have write permission on `stolen_t`.

## Different MAC Mechanisms
- **AppArmor**
  - Path-based system: No need for extended attributes.
  - Per-program profile: Describes what the program can do.
  - Concept of different subject domains: Create a hard link, rename the program, and create a new profile.
- **Smack (Simplified Mandatory Access Control Kernel)**
  - Label-based: Filesystem should support extended attributes.
  - Default rules are fixed in the kernel.
- **SELinux**
  - Label-based: Filesystem should support extended attributes.
  - Finer granularity.
  - Supports different MAC models: Type Enforcement, MCS, MLS, RBAC.
  - Hard to learn.

### Comparison: SELinux, Smack, AppArmor
| Name    | Type | Granularity (Hook Point) | Extended Attribute | Separation of Policy and Mechanism |
|---------|------|--------------------------|--------------------|------------------------------------|
| SELinux | MAC  | 176                      | Yes                | Yes                                |
| Smack   | MAC  | 114                      | Yes                | Partial                            |
| AppArmor| MAC  | 62                       | No                 | Yes                                |

## SELinux Concepts
- **Label Format**: `User:Role:Type:Range`
- **Modes**:
  - Enforce
  - Permissive
  - Disable

### Type Enforcement (TE)
- Primary mechanism of access control used in the targeted policy.

### Multi-Category Security (MCS)
- An extension of Multi-Level Security (MLS).

### Multi-Level Security (MLS)
- Not commonly used and often hidden in the default targeted policy.

## SELinux Management Tools
- **Enable SELinux First!**
- **Get SELinux Context (Label)**
  - `ls -Z` (get file SELinux context)
  - `ps Z` (get process SELinux context)
  - `seinfo -t` (lists all contexts currently in use on your system)
- **Relabel File Type Using Setfiles**
  - `File_contexts`: Used by file labeling utilities.
  - `semanage fcontext --add --type httpd_sys_content_t "/var/www(/.*)?"`
  - `setfiles file_contexts /var/www`
- **Change File Label & Check Policy**
  - `chcon --type bin_t test.c`
  - `runcon -t kernel_t /bin/bash`
  - `sesearch --allow --source kernel_t --target proc_t`
- **Boolean**
  - List Boolean: `getsebool -a`
  - Set Boolean: `setsebool BooleanName (1 or 0)`

## Troubleshooting: Audit Messages
- **Example**:
  - `avc: denied { relabelto } for pid=1382 comm="chcon" name="test.c" dev="sda1" ino=418253 scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:object_r:unconfined_t:s0 tclass=file`
  - `dmesg | grep avc | audit2allow -M test`
  - Generate `test.pp`, use `semodule -i test.pp` to install the policy module.

## SELinux Architecture
- **LSM Hook and SELinux Security Server**
  - System Call Interface
  - Entry Points
  - Security Server with Central Policy
  - Access Hooks
  - Security-sensitive Operations
  - Authorize Request?
  - Reference: http://web.eecs.umich.edu/~aprakash/security/handouts/AccessModel_040112_v2.ppt

### SELinux-aware Applications
- **Levels of SELinux Awareness**:
  1. Unaware (e.g., `rm`)
  2. Aware, but not necessary (e.g., `ls`, `ps`)
  3. Access Securityfs without checking special class (e.g., `getenforce`)
  4. In addition to accessing Securityfs, check permissions in special classes (e.g., `systemd`, `init`, `setenforce`)

### Building SELinux Policy
- **Monolithic Base Policy Module**
  - Built using three files: `.te`, `.if`, `.fc`
- **Policy Build Sequence**
  - Kernel Policy Language
  - Policy Set (written with M4 macro language)
  - Macro Expansion
  - Checkpolicy or Checkmodule
  - Secure Boot
  - Reference: https://developer.ibm.com/articles/protect-system-firmware-openpower/

## Access Control and Integrity
- **Access Control**: SELinux
- **Integrity**: IMA/EVM

## Contact Our Team
- pchang9
- The 9th Generation
- pchang
- Yi-Ting
- 大头

## Q&A and SELinux Demo
- SELinux enforce mode
- SELinux permissive mode
- Busybox (Embedded System)
- Ubuntu
- Limit specific folder access to only designated programs
- Protect specific programs from being killed by anyone
- SELinux enforce mode on Raspberry Pi 3 Model B+