requires the knowledge of all legitimate control-ﬂow hashes,
which are impossible to completely pre-compute due to the
unbounded number of code paths in regular programs (i.e.,
the path explosion problem). In comparison, OAT uses a
new hybrid scheme for attesting control-ﬂows, which allows
deterministic and fast veriﬁcation. Moreover, OAT veriﬁes
Critical Variable Integrity and can detect data-only attacks,
which C-FLAT and other previous works cannot.
Online CFI Enforcement: Although control-ﬂow attestation
has not been well investigated, CFI enforcement is a topic
that has attracted a rich body of works since its debut [1]. A
common goal shared by many CFI enforcement methods such
as [58], [49], [63], [48], [17], [18] is to ﬁnd a practical trade-off
between runtime overhead and the level of precision. Previous
works such as [65], [64] also introduced CFI enforcement
to COTS or legacy binaries. CPI [41] prevents control ﬂow
hijacking by protecting code pointers in safe regions. These
work made CFI increasingly practical for adoption in the
real world and serves as an effective software exploitation
prevention mechanism.
However, enforcing ﬁne-grained CFI and backward-edge
integrity can be still too heavy or impractical for embedded
devices, mostly because of the limited CPU and storage
on such devices. Apart from less demanding on hardware
resources, OEI attestation has another advantage over online
CFI enforcement: it allows remote veriﬁers to reconstruct the
exact code paths executed during an operation, which enables
full CFI checking (as opposed to a reduced or coarse-grained
version) as well as other postmortem security analysis.
Moreover, CFI enforcement is not enough when it comes to
data-only attacks, such as control-ﬂow bending, data-oriented
programming, etc. [14], [10], [33], [32]. But these attacks do
violate OEI and can be detected by OAT.
Runtime Data Protection: A series of work addressed the
problem of program data corruption via dynamic bounds
checking [20], [46], [19] and temporal safety [47]. DFI [13]
and WIT [3] took a different approach. They use static analysis
to derive a policy table specifying which memory addresses
each instruction can write to. They instrument all memory-
access instructions to ensure the policy is not violated during
runtime. Although effective at preventing data corruption,
these techniques tend to incur high runtime overhead due to
the need to intercept and check a large number of memory
accesses. We refer to this line of work as address-based
checking. In contrast, we deﬁne Critical Variable Integrity and
use the new Value-based Deﬁne-Use Check to verify CVI. Our
check is selective (i.e., it only applies to critical variables) and
lightweight. It is value-based and does not require complex
policies or extensive instrumentation. The CVI veriﬁcation and
the control-ﬂow attestation mutually compensate each other,
forming the basis for OEI veriﬁcation.
DataShield[11] applies selective protection to sensitive data.
Their deﬁnition of sensitive data is type-based and also needs
programmer annotation. It relies on a protected memory
region to isolate the sensitive data and performs address-
based checking. In comparison, our critical variable annotation
is more ﬂexible and partly automated. Instead of creating
designated safe memory regions, which can be unaffordable
or unsupported on embedded devices, we perform lightweight
value-based checks. Unlike DataShield, OEI does not concern
data conﬁdentiality.
X. CONCLUSION
We tackle the open problem that IoT backends are unable to
remotely detect advanced attacks targeting IoT devices. These
attacks compromise control-ﬂow or critical data of a device,
and in turn, manipulate IoT backends. We propose OEI,
a new security property for remotely attesting the integrity
of operations performed by embedded devices. OEI entails
operation-scoped CFI and Critical Variable Integrity.
We present an end-to-end system called OAT that realizes
OEI attestation on ARM-based bare-metal embedded devices.
OAT solves two research challenges associated with attesting
dynamic control and data properties: incomplete veriﬁcation of
CFI and heavy data integrity checking. First, OAT combines
forward-edge traces and backward-edge hashes as control-ﬂow
measurements. It allows fast and complete control-ﬂow ver-
iﬁcation and reconstruction while keeping the measurements
compact. Second, OAT enforces selective value-based variable
integrity checking. The mechanism is lightweight thanks to the
signiﬁcantly reduced instrumentation. It enables the detection
of data-only attacks for the ﬁrst time on embedded devices. It
allows IoT backends to establish trust on incoming data and
requests from IoT devices.
13
REFERENCES
[1] Mart´ın Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. Control-
ﬂow integrity. In Proceedings of the 12th ACM conference on Computer
and communications security, pages 340–353. ACM, 2005.
[2] Tigist Abera, N. Asokan, Lucas Davi, Jan-Erik Ekberg, Thomas Nyman,
Andrew Paverd, Ahmad-Reza Sadeghi, and Gene Tsudik.
C-ﬂat:
Control-ﬂow attestation for embedded systems software. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communica-
tions Security, CCS ’16, pages 743–754, New York, NY, USA, 2016.
ACM.
[3] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa, and
Miguel Castro. Preventing memory error exploits with wit. In Security
and Privacy, 2008. SP 2008. IEEE Symposium on, pages 263–277. IEEE,
2008.
[4] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A secure and reliable
bootstrap architecture. In Proceedings of the 1997 IEEE Symposium on
Security and Privacy, SP ’97, pages 65–, Washington, DC, USA, 1997.
IEEE Computer Society.
[5] Frederik Armknecht, Ahmad-Reza Sadeghi, Steffen Schulz, and Chris-
tian Wachsmann. A security framework for the analysis and design
In Proceedings of the 2013 ACM SIGSAC
of software attestation.
Conference on Computer &#38; Communications Security, CCS ’13,
pages 1–12, New York, NY, USA, 2013. ACM.
[6] N. Asokan, Ferdinand Brasser, Ahmad Ibrahim, Ahmad-Reza Sadeghi,
Matthias Schunter, Gene Tsudik, and Christian Wachsmann. Seda:
Scalable embedded device attestation. In Proceedings of the 22Nd ACM
SIGSAC Conference on Computer and Communications Security, CCS
’15, pages 964–975, New York, NY, USA, 2015. ACM.
[7] BLAKE2. Blake2 fast secure hashing. https://blake2.net/, 2019.
[8] Erik Buchanan, Ryan Roemer, Hovav Shacham, and Stefan Savage.
When good instructions go bad: Generalizing return-oriented program-
ming to risc. In Proceedings of the 15th ACM conference on Computer
and communications security, pages 27–38. ACM, 2008.
[9] Capstone. Capstone disassembly framework.
https://www.capstone-
engine.org/.
[10] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and
Thomas R Gross. Control-ﬂow bending: On the effectiveness of control-
ﬂow integrity. In USENIX Security Symposium, pages 161–176, 2015.
[11] Scott A Carr and Mathias Payer. Datashield: Conﬁgurable data con-
In Proceedings of the 2017 ACM on Asia
ﬁdentiality and integrity.
Conference on Computer and Communications Security, pages 193–204.
ACM, 2017.
[12] Claude Castelluccia, Aur´elien Francillon, Daniele Perito, and Claudio
Soriente. On the difﬁculty of software-based attestation of embedded
devices. In Proceedings of the 16th ACM Conference on Computer and
Communications Security, CCS ’09, pages 400–409, New York, NY,
USA, 2009. ACM.
[13] Miguel Castro, Manuel Costa, and Tim Harris. Securing software by
enforcing data-ﬂow integrity. In Proceedings of the 7th Symposium on
Operating Systems Design and Implementation, OSDI ’06, pages 147–
160, Berkeley, CA, USA, 2006. USENIX Association.
[14] Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravishankar K.
In Proceedings
Iyer. Non-control-data attacks are realistic threats.
of the 14th Conference on USENIX Security Symposium - Volume 14,
SSYM’05, pages 12–12, Berkeley, CA, USA, 2005. USENIX Associa-
tion.
[15] Shuo Chen, Jun Xu, Emre Can Sezer, Prachi Gauriar, and Ravishankar K
Iyer. Non-control-data attacks are realistic threats. In USENIX Security
Symposium, volume 14, 2005.
[16] Abraham A Clements, Naif Saleh Almakhdhub, Khaled S Saab, Prashast
Srivastava, Jinkyu Koo, Saurabh Bagchi, and Mathias Payer. Protecting
bare-metal embedded systems with privilege overlays. In IEEE Symp.
on Security and Privacy. IEEE, 2017.
[17] John Criswell, Nathan Dautenhahn, and Vikram Adve. Kcoﬁ: Complete
control-ﬂow integrity for commodity operating system kernels.
In
Security and Privacy (SP), 2014 IEEE Symposium on, pages 292–307.
IEEE, 2014.
[18] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer,
Thorsten Holz, Ralf Hund, Stefan N¨urnberger, and Ahmad-Reza
Sadeghi. Mocﬁ: A framework to mitigate control-ﬂow attacks on
smartphones. In NDSS, volume 26, pages 27–40, 2012.
[19] Joe Devietti, Colin Blundell, Milo MK Martin, and Steve Zdancewic.
Hardbound: architectural support for spatial safety of the c programming
14
[28] Github. Rover Controller. http://github.com/Gwaltrip/RoverPi/tree/master/tcpRover.
[29] GlobalPlatform.
GlobalPlatform
Speciﬁcations.
TEE
https://www.globalplatform.org/speciﬁcationsdevice.asp.
[30] Andy Greenberg. Hacker says he can hijack a $35 k police drone a mile
rc/tree/pi2.
away, 2016.
language. In ACM SIGARCH Computer Architecture News, volume 36,
pages 103–114. ACM, 2008.
[20] Dinakar Dhurjati and Vikram Adve.
Backwards-compatible array
bounds checking for c with very low overhead. In Proceedings of the
28th international conference on Software engineering, pages 162–171.
ACM, 2006.
[21] Karim Eldefrawy, Aur´elien Francillon, Daniele Perito, and Gene Tsudik.
SMART: Secure and Minimal Architecture for (Establishing a Dynamic)
In NDSS 2012, 19th Annual Network and Distributed
Root of Trust.
System Security Symposium, February 5-8, San Diego, USA, San Diego,
UNITED STATES, 02 2012.
[22] Nicolas Falliere, Liam O Murchu, and Eric Chien. W32. stuxnet dossier.
White paper, Symantec Corp., Security Response, 5(6), 2011.
[23] FDA. Cybersecurity vulnerabilities identiﬁed in implantable cardiac
pacemaker, August 2017.
[24] Xinyang Ge, Weidong Cui, and Trent Jaeger. Grifﬁn: Guarding control
ﬂows using intel processor trace. ACM SIGOPS Operating Systems
Review, 51(2):585–598, 2017.
[25] Github. House Alarm System. https://github.com/ddrazir/alarm4pi.
[26] Github. Light Controller. https://github.com/Barro/light-controller.
[27] Github. Remote Movement Controller.
https://github.com/bskari/pi-
[31] Grant Ho, Derek Leung, Pratyush Mishra, Ashkan Hosseini, Dawn Song,
and David Wagner. Smart locks: Lessons for securing commodity
In Proceedings of the 11th ACM on Asia
internet of things devices.
Conference on Computer and Communications Security, pages 461–472.
ACM, 2016.
[32] Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, and
Zhenkai Liang. Automatic generation of data-oriented exploits.
In
Proceedings of the 24th USENIX Conference on Security Symposium,
SEC’15, pages 177–192, Berkeley, CA, USA, 2015. USENIX Associa-
tion.
[33] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek
Saxena, and Zhenkai Liang. Data-oriented programming: On the
In Security and Privacy
expressiveness of non-control data attacks.
(SP), 2016 IEEE Symposium on, pages 969–986. IEEE, 2016.
[34] Troy Hunt. Controlling vehicle features of nissan leafs across the
globe via vulnerable apis. https://www.troyhunt.com/controlling-vehicle-
features-of-nissan/, February 2016.
[35] Ahmad Ibrahim, Ahmad-Reza Sadeghi, Gene Tsudik, and Shaza
Zeitouni. Darpa: Device attestation resilient to physical attacks.
In
Proceedings of the 9th ACM Conference on Security &#38; Privacy in
Wireless and Mobile Networks, WiSec ’16, pages 171–182, New York,
NY, USA, 2016. ACM.
[36] Chongkyung Kil, Emre C. Sezer, Ahmed M. Azab, Peng Ning, and
Xiaolan Zhang. Remote attestation to dynamic system properties:
Towards providing complete system integrity evidence. Dependable
Systems & Networks, 2009., 2009.
[37] Chung Hwan Kim, Taegyu Kim, Hongjun Choi, Zhongshu Gu, By-
oungyoung Lee, Xiangyu Zhang, and Dongyan Xu. Securing real-time
microcontroller systems through customized memory view switching. In
NDSS, 2018.
[38] Joonho Kong, Farinaz Koushanfar, Praveen K. Pendyala, Ahmad-Reza
Sadeghi, and Christian Wachsmann. PUFatt: Embedded Platform Attes-
tation Based on Novel Processor-Based PUFs. In DAC, page 6. ACM,
2014.
[39] Tim Kornau. Return oriented programming for the ARM architecture.
PhD thesis, Masters thesis, Ruhr-Universit¨at Bochum, 2010.
[40] Brian Krebs.
Reaper: Calm before
the
iot
security storm.
https://krebsonsecurity.com/2017/10/reaper-calm-before-the-iot-
security-storm/, October 2017.
[41] Volodymyr Kuznetsov, L´aszl´o Szekeres, Mathias Payer, George Candea,
In Proceedings
R. Sekar, and Dawn Song. Code-pointer integrity.
of the 11th USENIX Conference on Operating Systems Design and
Implementation, OSDI’14, pages 147–163, Berkeley, CA, USA, 2014.
USENIX Association.
[42] Keen Security Lab.
New car hacking research: Tesla motors.
http://keenlab.tencent.com/en/2017/07/27/New-Car-Hacking-Research-
2017-Remote-Attack-Tesla-Motors-Again/, 2017.
[43] Chris Lattner and Vikram Adve. LLVM: A Compilation Framework for
In Proceedings of the
Lifelong Program Analysis & Transformation.
2004 International Symposium on Code Generation and Optimization
(CGO’04), Palo Alto, California, Mar 2004.
[44] Yanlin Li, Jonathan M. McCune, and Adrian Perrig. VIPER: verifying
the integrity of peripherals’ ﬁrmware. In Proceedings of the 18th ACM
Conference on Computer and Communications Security, CCS 2011,
Chicago, Illinois, USA, October 17-21, 2011, pages 3–16, 2011.
[45] Linaro. OP-TEE. https://www.op-tee.org.
[46] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve
Zdancewic. Softbound: Highly compatible and complete spatial memory
safety for c. ACM Sigplan Notices, 44(6):245–258, 2009.
[47] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve
In ACM
Zdancewic. Cets: compiler enforced temporal safety for c.
Sigplan Notices, volume 45, pages 31–40. ACM, 2010.
[48] Ben Niu and Gang Tan. Monitor integrity protection with space
efﬁciency and separate compilation. In Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security, pages
199–210. ACM, 2013.
[49] Ben Niu and Gang Tan. Per-input control-ﬂow integrity. In Proceedings
of the 22Nd ACM SIGSAC Conference on Computer and Communica-
tions Security, CCS ’15, pages 914–926, New York, NY, USA, 2015.
ACM.
[50] Bryan Parno, Jonathan M. McCune, and Adrian Perrig. Bootstrapping
trust in commodity computers. In Proceedings of the 2010 IEEE Sym-
posium on Security and Privacy, SP ’10, pages 414–429, Washington,
DC, USA, 2010. IEEE Computer Society.
[51] D. Quarta, M. Pogliani, M. Polino, F. Maggi, A. M. Zanchettin, and
S. Zanero. An experimental security analysis of an industrial robot
In 2017 IEEE Symposium on Security and Privacy (SP),
controller.
pages 268–286, May 2017.
[52] Rapid7.
Multiple vulnerabilities
in animas onetouch ping in-
https://blog.rapid7.com/2016/10/04/r7-2016-07-multiple-