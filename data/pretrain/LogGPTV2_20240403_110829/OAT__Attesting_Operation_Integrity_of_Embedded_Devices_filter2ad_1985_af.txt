### Knowledge of Legitimate Control-Flow Hashes

The complete pre-computation of all legitimate control-flow hashes is infeasible due to the unbounded number of code paths in regular programs, a problem known as path explosion. In contrast, OAT (Operation Attestation) employs a novel hybrid scheme for attesting control-flows, enabling deterministic and fast verification. Additionally, OAT verifies Critical Variable Integrity (CVI) and can detect data-only attacks, which C-FLAT and other previous works cannot.

### Online Control-Flow Integrity (CFI) Enforcement

While control-flow attestation remains underexplored, CFI enforcement has been extensively studied since its introduction [1]. Many CFI enforcement methods, such as [58], [49], [63], [48], [17], and [18], aim to find a practical balance between runtime overhead and precision. Works like [65] and [64] have also extended CFI enforcement to commercial off-the-shelf (COTS) or legacy binaries. CPI [41] prevents control flow hijacking by protecting code pointers in safe regions. These advancements have made CFI increasingly practical and serve as effective mechanisms for preventing software exploitation.

However, enforcing fine-grained CFI and backward-edge integrity on embedded devices can be too resource-intensive, primarily due to limited CPU and storage. Besides being less demanding on hardware resources, OEI (Operation Execution Integrity) attestation offers another advantage over online CFI enforcement: it allows remote verifiers to reconstruct the exact code paths executed during an operation, enabling full CFI checking and postmortem security analysis. Furthermore, CFI enforcement alone is insufficient against data-only attacks, such as control-flow bending and data-oriented programming [14], [10], [33], [32]. These attacks, however, violate OEI and can be detected by OAT.

### Runtime Data Protection

Several works have addressed program data corruption through dynamic bounds checking [20], [46], [19] and temporal safety [47]. DFI [13] and WIT [3] use static analysis to derive a policy table specifying which memory addresses each instruction can write to, instrumenting all memory-access instructions to ensure the policy is not violated during runtime. Although effective at preventing data corruption, these techniques often incur high runtime overhead due to the need to intercept and check numerous memory accesses. We refer to this approach as address-based checking.

In contrast, we define Critical Variable Integrity (CVI) and use a new Value-based Define-Use Check to verify CVI. This check is selective, applying only to critical variables, and is lightweight. It is value-based and does not require complex policies or extensive instrumentation. The mutual compensation between CVI verification and control-flow attestation forms the basis for OEI verification.

DataShield [11] applies selective protection to sensitive data, with a type-based definition that requires programmer annotation. It relies on a protected memory region to isolate sensitive data and performs address-based checking. Our critical variable annotation is more flexible and partly automated, performing lightweight value-based checks without creating designated safe memory regions, which may be unaffordable or unsupported on embedded devices. Unlike DataShield, OEI does not focus on data confidentiality.

### Conclusion

We address the open problem of IoT backends being unable to remotely detect advanced attacks targeting IoT devices. These attacks compromise the control-flow or critical data of a device, thereby manipulating IoT backends. We propose OEI, a new security property for remotely attesting the integrity of operations performed by embedded devices. OEI encompasses operation-scoped CFI and Critical Variable Integrity.

We present OAT, an end-to-end system that realizes OEI attestation on ARM-based bare-metal embedded devices. OAT solves two research challenges associated with attesting dynamic control and data properties: incomplete verification of CFI and heavy data integrity checking. First, OAT combines forward-edge traces and backward-edge hashes as control-flow measurements, allowing fast and complete control-flow verification and reconstruction while keeping the measurements compact. Second, OAT enforces selective value-based variable integrity checking, which is lightweight due to significantly reduced instrumentation. This mechanism enables the detection of data-only attacks for the first time on embedded devices, allowing IoT backends to establish trust in incoming data and requests from IoT devices.

### References

[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. Control-Flow Integrity. In Proceedings of the 12th ACM conference on Computer and communications security, pages 340–353. ACM, 2005.

[2] Tigist Abera, N. Asokan, Lucas Davi, Jan-Erik Ekberg, Thomas Nyman, Andrew Paverd, Ahmad-Reza Sadeghi, and Gene Tsudik. C-FLAT: Control-Flow Attestation for Embedded Systems Software. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS '16, pages 743–754, New York, NY, USA, 2016. ACM.

[3] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa, and Miguel Castro. Preventing Memory Error Exploits with WIT. In Security and Privacy, 2008. SP 2008. IEEE Symposium on, pages 263–277. IEEE, 2008.

... (Additional references follow the same format)

[41] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R. Sekar, and Dawn Song. Code-Pointer Integrity. In Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation, OSDI'14, pages 147–163, Berkeley, CA, USA, 2014. USENIX Association.

... (Additional references follow the same format)