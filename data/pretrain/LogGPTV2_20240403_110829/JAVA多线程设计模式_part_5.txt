实例
vaittl:
实例
实例
（线程
的休息室）
Yait
---
## Page 48
wait set.
notify方法-
一个如下的语句：
则从 obj 的 wait set 里的线程中挑出 1个，唤醒这个线程。被唤醒的线程便退出
这个过程的图示如图I1-16~11-19所示。
obj.notify();
使用notify（通知）方法时，可从 wait set 里抓出1个线程。假设现在已经执行
图 Il-17线程A退出 wat set，打算继续进行 wait 的下一个操作；
线程B
线程A
线程B*
图I1-16获取锁定的线程B开始执行notify方法
-从waitset拿出线程
但刚才执行notify的线程B还握着锁定不放
"-it();
实例
实例
方法
Introduction
Java语言的线程
---
## Page 49
补充说明：notify如何选择线程
补充说明：notify后的线程
（也是规则）。
最好不要写成会因所选线程而有所变动。
或是另以其他方式选择，则依Java 处理系统而异。因此在写程序时，程序属性
注明此时该选择哪一个线程。究竟是选择等待线程列表中的第一个、随机选择
的锁定（见图11-17)。
的那一刻，执行motify的线程还握着锁定不放，所以其他线程无法获取该实例
假设执行 notify 方法时，wait set 里正在等候的线程不只1个。规格里并没有
被notify 唤醒的线程并不是在 notify 的一瞬间重新开始执行。因为在 notify
线程必须有欲调用的实例的锁定，才能执行 notify 方法，这点跟 wai方法一样
图1-19已经退出 wait sel 的线程A获取锁定，进行wait 的下－个操作
图I1-18刚才执行过notify的线程 B开始释放锁定
线程B
线程A
其例
线程
---
## Page 50
只唤醒丨个线程，而 notityAll则是唤醒所有线程。两者的差别就只有这里。
notifyAll 方法
图11-20、图I1-21是实例比较 notify方法跟 notifyAll方法两者操作的差异。notify
故这个语句所在的方法的实例（this）的wait set里的线程会全部放出来。
this.notifyAll()
则其意义同：
则会唤醒所有留在实例obj 的 wait set 里的线程。
notifyAil();
若实例方法写成：
obj.notifyAll();
假设现在的情况是：
使用notifyAl（通知全体）方法时，会将所有在 wait set里苦等的线程都拿出
图I1-21notifyAll 方法是唤醒所有线程，让它们全部退出 wait set
图 11-20
notify 方法只唤醒1个线程，然后该线程退出 wait set
一从waitset拿出所有线程
实例
e EAt
walt #elt
Introduction 1
..-
 aop
Java 语言的线程
8
---
## Page 51
notifyAll才会是Object类的方法。
会比说它们是对线程的操作更贴切。由于所有实例都会有waitset，所以 wail、notify、
wait、notify、notifyAll是 Object 类的方法
挡。要等到刚才执行 notifyAll 方法的线程释放出锁定之后，其中1 名幸运儿才能
现在是在谁手中呢？没错，锁定就是在刚才执行 notifyAll方法的线程手里。因此
notifyAll方法。
的方法。
补充说明：该用notify方法还是notifyAll方法？
实际执行。
即使所有线程都已经退出 wait set，但它们仍然在去获取锁定的状态下，还是有阻
补充说明：要是没有锁定呢？
练习问题5-8再讨论。
notifyAll 应该比较稳扎稳打。选择 notify 时所派生问题的案例则留在第5 章的
说来，选择motifyAll所写出来的程序代码会比选择notify 可靠。
略胜一筹。
选择有点难。
选择 notify 的话，因为要唤醒的线程比较少，程序处理速度当然比 notifyAl
notify 方法和 notifyAll 方法两者非常相似，到底该用哪－个？老实说，这个
IllegalMonitorStateException.
但选择 notify 时，若这部分处理得不好，可能会有程序挂掉的危险性。一般
若没有锁定的线程去调用 wait,notify或 notifyAll 时，便会抛出异常 java.lang.
被唤醒的线程便开始去获取刚才进入wait时释放掉的锁定，那么，这个锁定
跟wait 方法和 notify 方法--样，线程必须获取欲调用实例的锁定，才能调用
wait、notify、notifyAll 都是 java.lang 的 Object 类的方法，不是 Thread 类固有
换句话说，把 wait、notify、notifyAll三者均解释为对实例的 wait set 的操作，
●obj.notify（）是从 obj 的 wait set 里唤醒1个线程；
●obj.wait(）是把现在的线程放到obj 的 wait set;
请各位再回想一Fwait、motify、notifyAll的作用：
除非你能确定程序员对程序代码的意义和能力限度一清二楚，否则选择
）obj.notifyAll（）是唤醒所有在obj 的wait set里的线程。
---
## Page 52
4月号专栏。
另行详细说明。
补充说明：wait、notify、notifyAll也是Thread类的方法
线程的状态移转
类是Java 所有类的祖先类，所以 wait、notify、notifyAll也是Thrcad类的方法。
以上状态移转图的制作是参考附录E【Lea）【JIS）（Holub00）及“Java World”杂志2002午
有关wait、notify 和notifyAli的使用方法，留待Guarded Suspension（第3章）
wait、notify 和 notifyAll三者确实不是 Thread 类固有的方法。不过，因为 Object
现在将线程的状态移转图
可执行状态
结束状态
初始状态
执行巾
结束
开始
垃圾收集
产生实例
调度
图11-22线程的状态移转图
整理如下（见图11-22），请各位读者参考。
Thread sleep方法
blocking L0 
针对未锁定对象的
wait方法
阻挡中(entry
(wait set里)
set*里)
slcep中
[OHI4L!
Introduction 1
!
1
Java语言的线程
取得锁定
1/0完成等
.到期
interrupt方法
---
## Page 53
答部分在本书附录A，
9
重点回顾
请别太拘泥于表现方式。
动语气写成“被阻挡”比较好。
部分读者可能有不同看法，或许认为既然它是因外在因素而停止，应该以被
推进。这个状态称为“线程A有阻挡”
本书称这个状态为“有阻挡”，
跟线程有关的其他话题
请各位尝试作咎下列的练习问题，即可知道自己是否已确实理解本章内容。解
·线程的启动
●何谓线程
各位在本章学习到的Java语言的线程相关内容如下：
有时候，线程会因为某种因素而无法继续进行下去。
·线程的协调
·取消线程处理的中断
以下跟线程有关的话题会在相关章节继续说明：
线程的共享互斤
线程的暂时停止
等候线程结束
(setPriority、 getPriority)
线程的优先级
帐←
(Interrupt、isInterrupted、 interrupted、InterruptedException)
+.
(join)
→第5章
第5章、第10章、
，不过请不要直接翻过去看解答，先自己好好想一想璧。
不过“有阻挡”跟“被阻挡”两者意思相同
。例如，当线程A欲执行
---
## Page 54
若启动下列程序时，则屏幕上会输出1000个*记号后，再输出1000个+记号（见
，“（）
请详阅下列的文章叙述，若叙述止确打○，
练习问题
public class PrintThread extends Thread {
public class Main ↑
图11-23）。请问：为仆么输出结果不是*和+交错混杂呢？
问题11-3（线程的操作）
GooNdi!ce!
或
GoNiod!ce!
以单学为单位，而不会交错字母排列呢？例如：
问题11-2（共享互斥）
问题11-1（基本知识）
解答请见附录A
List i1-11
List 1-10
（10）notifyAll方法就是java.lang.Object类的实例方法。
（9）调用 wait 的语句一定要写在 sychronized方法中才行。
（6）执行 sleep 方法后，在指定的时间内所有的线程都会暂停执行。
（3）Runnable接口中声明有 start 方法与 run 方法。
（2）Thread类的run 方法被调用出来后，就会启动新的线程。
（1）Java的程序中，最少会执行一个线程。
8）
7)
5）
（4）有时候多个线程都可以调用出同一个实例的方法
private String message;
public static void main(stringll args) {
执行 sleep 方法后，该线程只有在指定的时间内才会进入 wait set。
有时候多个线程都可以调用出同一个Thread类的实例（Instance）的方法，
某个线程在执行 synchronized方法时，其他的所有线程都会停止执行。
new PrintThread("+").run();
new PrintThread("*").run();
输出指定字符串的 PrintThread 类（PrintThread.java)
哪里有问题？（Main.java）
若不正确则打×，
Introduction 1
Java语言的线程
丝
---
## Page 55
8
网List I1-12是沿H本章的Bank类（List I1-9），
public class Bank 1
可能性。
若有1个以上的线程在使用这个银行（Bank类）时，则可用余额会变成负数的
加1个 check方法，这样当可用余额变成负数时就会显示警告消息。试验证：
问题11-4（测知异常）
List #1.12
public Bank(String name, int money) {
 private int moneyi
private String name;
public void runt)(
 public PrintThread(String message) I
+++++++++++++++++++-+++++++++++++++++++++++++++
+++++++++++++++++++++++-+++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++
±
++++++++++++++++++-++++++++++++++++++++++++++++
***********************************************
*********************************
***********************************************
****************************
********************
******************
*********************
***********************************************
+++++++++++++++++++++++++++++++++++++++++
this.message = messager
for （int i= 0; i = m) {
name;
Introduction 1
=" + money);
Java 语言的线程
---
## Page 57
假设现在如 List I1-13－-样声明 Something 类，变量x、y则表示 Something类
public class Something ↑
打○；若该组合不允许1个以上的线程同时执行，则打×。
的不同实例。请详阅下面的组合，若该组合可供1个以上的线程同时执行，则
问题11-6（共享互斥）
(10) Something.cSyncAO;
(1) x.iAO;
List I1-13
（7）
（4）
public static
public static
public static
public static
public
public
public
public
 y.iSyncBO;
x.iSyncAO;
x.iSyncAO);
x.iSyncAO;
x.iAO;
Something.cSyncA();
T
LT
Something 类
synchronized
synchronized
 synchronized
 synchronized
(11) Something.cSyncAO;
(8) x.iSyncAO;
(5) x.iSyncAO;
(2) x.iAO;
void iB) [}
Something.cA();
x.iSyncBO;
void iA() [l
x.iBO;
 Something.cSyncBO:
山