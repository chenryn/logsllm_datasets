# 优化后的文本

## 引言
本文将对 ENDBOX 在不同重定向方法下的平均 ping 往返时间 (RTT) 进行详细分析，并进一步探讨其在流量重定向、加密流量处理和吞吐量方面的性能。

## 平均 Ping RTT 分析
图 7 展示了不同重定向方法下的平均 ping RTT。具体包括：
1. **无重定向**：无中间盒或 VPN。
2. **本地重定向**：通过 OpenVPN+Click 的 VPN 和服务器端中间盒。
3. **ENDBOX 重定向**：通过 ENDBOX 中间盒。
4. **云重定向**：通过 AWS 不同区域的 EC2 实例中的中间盒，同样使用 OpenVPN+Click。

结果表明，根据云提供商选择的位置，延迟开销范围在 61% 到 1773% 之间，而 ENDBOX 的延迟开销仅为 6%。

## 加密流量处理
如第三节所述，ENDBOX 能够透明地解密 TLS 流量。我们通过让 HTTPS 客户端从 Web 服务器获取不同大小的静态网页来测量这一功能的开销。客户端配置如下：
1. **ENDBOX + 自定义 OpenSSL + Click 解密**。
2. **ENDBOX + 自定义 OpenSSL + 无解密**。
3. **ENDBOX + 系统 OpenSSL + 无解密**。

表 I 显示了 HTTPS GET 请求的延迟结果。结果显示，自定义 OpenSSL 和流量解密引入的开销小于 8%。开销主要来源于 ENDBOX 自定义 OpenSSL 将密钥转发到 enclave 和实际解密过程。

| 响应大小 | ENDBOX (带解密) | ENDBOX (不带解密) | 普通 OpenSSL |
|----------|-----------------|------------------|--------------|
| 4 KB     | 1.08 ms         | 1.04 ms          | 1.00 ms      |
| 16 KB    | 1.34 ms         | 1.29 ms          | 1.26 ms      |
| 32 KB    | 1.78 ms         | 1.75 ms          | 1.70 ms      |

## 吞吐量分析
除了网络延迟外，吞吐量也是影响用户体验的重要参数。所有这些测量都在两台 A 类机器上进行。

### 数据包大小
我们测量了不同配置下从 256 字节到 64 千字节的数据包的最大吞吐量。比较了以下四种设置：
1. **普通 OpenVPN**。
2. **OpenVPN+Click**：相同版本的 OpenVPN 附加了一个服务器端 Click 实例。
3. **ENDBOX 模拟模式**。
4. **ENDBOX 硬件模式**。

图 8 显示了结果。随着负载大小的增加，所有配置的吞吐量都增加。ENDBOX 在模拟模式下的性能开销在 2% 到 13% 之间。使用实际 SGX 指令（硬件模式）增加了开销，在最坏情况下，小数据包的开销为 39%，大数据包的开销仅为 16%。这是因为较大的数据包允许更高的吞吐量且减少了 enclave 切换次数。此外，服务器端 Click 实例的平均性能损失为 26%，根据数据包大小的不同，值在 5% 到 29% 之间变化。对于大数据包，服务器端 Click 实例的吞吐量比普通 OpenVPN 低约三分之一。

### 中间盒功能
图 9 显示了传统中间盒设置与 ENDBOX 在不同中间盒功能下的平均最大吞吐量。我们评估了 §V-B 中介绍的所有中间盒功能，使用一台客户端机器和中等大小的数据包（1500 字节）。

以 NOP 作为基线，我们观察到 OpenVPN+Click 的 Click 配置影响较小：在 DDoS 防护用例中最坏的情况下，吞吐量从 764 Mbps 下降到 662 Mbps，下降了 13%。ENDBOX 在 NOP、LB 和 FW 用例中的开销约为 30%，而在计算密集型 IDPS 和 DDoS 用例中的开销为 39%。请注意，对于更大的数据包，这种开销会更低，如图 8 所示。

### 总结
结果表明，ENDBOX 对于大数据包在 NOP 用例中的吞吐量开销仅为 16%。对于中等大小的数据包，轻量级中间盒功能的开销为 30%，特定计算密集型用例的开销为 39%。正如预期的那样，ENDBOX 的吞吐量随数据包大小的增加而增加。此外，ENDBOX 对 HTTP 页面加载时间的延迟没有明显影响。因此，从性能角度来看，ENDBOX 是现有中间盒部署的一个可行替代方案。

## 可扩展性
在评估了 ENDBOX 的用户面临属性（如延迟和吞吐量）之后，我们还评估了其可扩展性，这对于运营商来说非常重要。因此，我们测量了服务器端的吞吐量和 CPU 使用率。吞吐量是聚合所有由 OpenVPN 服务器设置的虚拟接口，每个客户端一个。CPU 使用率适用于所有核心，即 100% 表示所有核心完全利用。

可扩展性测量使用五台 A 类机器执行多个 ENDBOX 客户端，以及两台 B 类机器运行 ENDBOX 服务器或 iperf 服务器。我们比较了以下四种设置：
1. **普通 OpenVPN 无中间盒功能** 作为基线。
2. **ENDBOX 硬件模式**。
3. **服务器端普通 Click 无加密**。
4. **OpenVPN+Click**：多个服务器端普通 Click 实例附加到 OpenVPN 服务器。

在这些实验中，每个客户端生成 200 Mbps 的工作负载。对于 (i)、(iii) 和 (iv)，我们为每个客户端使用一个 OpenVPN 服务器实例，因为 OpenVPN 不支持多线程。

首先，我们评估了使用转发器作为中间盒功能 (NOP) 的可扩展性。图 10a 显示的结果表明，普通 OpenVPN 和 ENDBOX 在几乎相同的 CPU 使用率下达到了相同的吞吐量 6.5 Gbps。这表明客户端执行中间盒对服务器端的吞吐量或 CPU 使用率没有影响。对于 OpenVPN+Click，瓶颈在于 CPU，因为它比 ENDBOX 更早达到满负荷，因为 Click 需要大量的周期。相比之下，普通 Click 的吞吐量限制在 5.5 Gbps，因为 Click 进程无法处理更多的数据包。最后，我们的测量报告 OpenVPN+Click 的吞吐量甚至更低，为 2.5 Gbps，并且随着客户端数量的增加而持续下降，因为 OpenVPN+Click 受限于服务器的 CPU。

### 用例评估
我们对 §V-B 中介绍的五个用例进行了相同的测量。在图 10b 中，我们使用前一测量中的 OpenVPN+Click 和 ENDBOX 结果作为基线，并展示了 ENDBOX 在应用不同中间盒配置时如何随客户端数量扩展。当网络流量加解密完全利用 VPN 服务器（在我们的机器上有 40 个客户端时）时，它成为 ENDBOX 的瓶颈：我们观察到所有用例的最大吞吐量为 6.5 Gbps。由于中间盒功能在服务器端执行，OpenVPN+Click 在 30 个客户端时达到此限制，最大吞吐量为 2.5 Gbps（FW 和 LB 用例）。计算密集型 IDPS 和 DDoS 中间盒功能仅实现了 1.7 Gbps 的吞吐量。

我们的评估表明，ENDBOX 与客户端数量呈线性扩展。此外，对于 60 个客户端，ENDBOX 在所有用例中实现了 2.6 倍的更高吞吐量，而在 IDPS 和 DDoS 计算密集型工作负载中实现了 3.8 倍的更高吞吐量。这不是 ENDBOX 的普遍限制——这是由于我们的评估设置导致的计算密集型任务造成的。

## 结论
综上所述，ENDBOX 在大数据包 NOP 用例中的吞吐量开销仅为 16%。对于中等大小的数据包，轻量级中间盒功能的开销为 30%，特定计算密集型用例的开销为 39%。ENDBOX 的吞吐量随数据包大小的增加而增加，并且对 HTTP 页面加载时间的延迟没有明显影响。因此，从性能角度来看，ENDBOX 是现有中间盒部署的一个可行替代方案。