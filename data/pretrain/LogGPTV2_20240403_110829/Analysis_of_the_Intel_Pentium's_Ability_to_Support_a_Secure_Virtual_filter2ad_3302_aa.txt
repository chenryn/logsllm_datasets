title:Analysis of the Intel Pentium's Ability to Support a Secure Virtual
Machine Monitor
author:John Scott Robin and
Cynthia E. Irvine
USENIX Association
Proceedings of the
9th USENIX Security Symposium
Denver, Colorado, USA
August 14 –17, 2000
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
© 2000 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Analysis of the Intel Pentium’s Ability to Support a
Secure Virtual Machine Monitor
John Scott Robin
U.S. Air Force
scott robin @hotmail.com
Cynthia E. Irvine (cid:3)
Naval Postgraduate School
PI:EMAIL
http://cisr.nps.navy.mil
Abstract
A virtual machine monitor (VMM) allows multiple op-
erating systems to run concurrently on virtual machines
(VMs) on a single hardware platform. Each VM can
be treated as an independent operating system platform.
A secure VMM would enforce an overarching security
policy on its VMs.
The potential beneﬁts of a secure VMM for PCs in-
clude: a more secure environment, familiar COTS op-
erating systems and applications, and enormous savings
resulting from the elimination of the need for separate
platforms when both high assurance policy enforcement,
and COTS software are required.
This paper addresses the problem of implementing se-
cure VMMs on the Intel Pentium architecture. The re-
quirements for various types of VMMs are reviewed. We
report an analysis of the virtualizability of all of the ap-
proximately 250 instructions of the Intel Pentium plat-
form and address its ability to support a VMM. Cur-
rent “virtualization” techniques for the Intel Pentium ar-
chitecture are examined and several security problems
are identiﬁed. An approach to providing a virtualizable
hardware base for a highly secure VMM is discussed.
1 Introduction
A virtual machine monitor (VMM) is software for a
computer system that creates efﬁcient, isolated program-
ming environments that are “duplicates” which provide
users with the appearance of direct access to the real ma-
chine environment. These duplicates are referred to as
virtual machines. Goldberg [12] deﬁnes a virtual ma-
chine (VM) as: “a hardware-software duplicate of a real
existing computer system in which a statistically dom-
inant subset of the virtual processor’s instructions exe-
cute on the host processor in native mode”. A VMM
(cid:3)The opinions in this paper are those of the authors and should not
be construed to reﬂect those of their employers.
manages the real resources of the computer system, ex-
porting them to virtual machines.
A VMM offers a number of beneﬁts not found in con-
ventional multiprogramming systems.
1.1 VMM Beneﬁts
First, virtual machine monitors normally allow a sys-
tem manager to conﬁgure the environment in which a
VM will run. VM conﬁgurations can be different from
those of the real machine. For example, a real machine
might have 32MB of memory, but a virtual machine
might have only 8 MB. This would allow a developer
to test an application on a machine with only 8 MB of
memory without having to construct a hardware version
of that real machine.
Second, virtual machine monitors allow concurrent
execution of different operating systems on the same
hardware. Users can run any operating system and ap-
plications designed to run on the real processor archi-
tecture. Thus application development for different op-
erating systems is easier. A developer can easily test
applications on many operating systems simultaneously
while running on the same base platform.
Third, virtual machine monitors allow users to isolate
untrusted applications of unknown quality. For ex-
ample, a program downloaded from the Internet could
be tested in a VM. If the program contained a virus, the
virus would be isolated to that VM. A secure VMM will
ensure that other high integrity VMs and their applica-
tions and data are protected from corruption.
Fourth, virtual machine monitors can be used to up-
grade operating system software to a different version
without losing the ability to run the older “legacy” op-
erating system and its applications. The legacy software
can run in a virtual machine exactly as it did previously
on the real machine, while the new version of the oper-
ating system runs in a separate virtual machine.
Finally, VMMs can be used to construct system soft-
ware for scalable computers that have anywhere from
10 to 100 processors. VMMs can facilitate the develop-
ment of functional and reliable system software for these
computers.
Using a VMM, an additional software layer can be in-
serted between the hardware and multiple operating sys-
tems. This VMM layer would allow multiple copies of
an operating system to run on the same scalable com-
puter. The VMM also allows these operating systems to
share resources with each other. This solution has most
of the features of an operating system custom-built for
a scalable machine, but with lower development costs
and reduced complexity. Disco, developed for the Stan-
ford FLASH shared-memory multi-processor [8] is an
example of this solution. It uses different commercial
operating systems to provide high-performance system
software.
1.2 VMM Characteristics and Layers
A VMM has three characteristics [28]. First, a VMM
provides an execution environment almost identical to
the original machine; any program executed on a VM
should run the same as it would on an unvirtualized ma-
chine. Exceptions to this rule result from differences in
system resource availability, timing dependencies, and
attached I/O devices. If resource availability, e.g. phys-
ical memory, is different, the program will perform dif-
ferently. Timing dependencies may lose their validity
because a VMM may intervene and execute a different
set of instructions when certain instructions are executed
by a VM. Finally, if the VM is not conﬁgured with all of
the peripheral devices required by the real machine, ap-
plication behavior will differ.
Second, a VMM must be in control of real system re-
sources. No program running on a VMM can access any
resource not explicitly allocated to it by the VMM. Also
the VMM can regain control of previously allocated re-
sources.
Efﬁciency is the third VMM characteristic. A large
percentage of the virtual processor’s instructions must be
executed by the machine’s real processor, without VMM
intervention. Instructions which cannot be executed di-
rectly by the real processor are interpreted by the VMM.
Some virtual machines exhibit the recursion property: it
is possible to run a VMM inside of a VM, producing a
new level of virtual machines. The real machine is nor-
mally called Level 0. A VMM running on Level 0 is said
to be Level 1, etc.
1.3 VMM Logical Modules
to call when a trap occurs. The second type of module
is the allocator. If a VM tries to execute a privileged in-
struction that would change the resources of the VM’s
environment, the VM will trap to the VMM dispatcher.
The dispatcher will handle the trap by invoking the al-
locator that performs the requested resource allocation
according to VMM policy. A VMM has only one allo-
cator module, however, it accounts for most of the com-
plexity of the VMM. It decides which system resources
to provide to each VM, ensuring that two different VM’s
do not get the same resource. The ﬁnal module type is
the interpreter. For each privileged instruction, the dis-
patcher will call an interpreter module to simulate the
effect of that instruction. This prevents VMs from see-
ing the actual state of the real hardware. Instead they see
only their virtual machine state.
1.4 Attractions of a Secure VMM
An isolated VM constrained by an overarching security
policy enforced by the underlying secure VMM is attrac-
tive. Also, VMM technology provides stronger isolation
of virtual machines than found in conventional multipro-
gramming environments [21]. Within a constrained VM,
legacy operating systems and applications are executed
unmodiﬁed and are easily upgraded and replaced even
within the context of rapidly evolving software product
lifecycles.
In the past, some virtual machine monitors, such as
the SDC KVM/370 [11, 9, 33, 10] and the DEC VAX
SVS [17], have been used to separate mandatory secu-
rity classes. A secure VMM for the Intel Pentium1 pro-
cessor architecture would be very desirable because a
single machine could be used to implement critical secu-
rity policies while also running popular Win32 operating
systems and applications.
Although the x86 processor family has been used as
the base for many highly secure systems [23, 27, 26, 25,
24], it has not been considered as a VMM base. Recent
increased interest in VMM technology suggests that a
popular hardware base for a new generation of VMMs
would be highly attractive. Before embarking on such a
venture, its feasibility must be carefully examined. This
paper presents an analysis to determine whether the Intel
Pentium architecture can support a highly secure VMM
without sacriﬁcing user convenience.
A VMM normally has three generic modules: dis-
patcher, allocator, and interpreter. A jump to the dis-
patcher is placed in every location to which the machine
traps. The dispatcher then decides which of its modules
1Throughout this paper, the term “Intel Pentium architecture” will
refer to the architecture of the following processors, which are all
trademarks of the Intel Corporation: Intel Pentium, Intel Pentium Pro,
Intel Pentium with MMX Technology, Intel Pentium II and Intel Pen-
tium III.
1.5 Paper Organization
The rest of this paper is organized as follows: Sec-
tion 2 discusses the three different types of VMMs and
their hardware requirements. Section 3 is an analysis of
the Intel Pentium architecture with respect to the VMM
hardware requirements described in Section 2. Section
4 asks if a VMM designed for the Intel Pentium archi-
tecture can be secure. Finally, Section 5 presents our
conclusions and future research.
Type I VMM runs on a bare machine. It is an operat-
ing system with virtualization mechanisms. It performs
the scheduling and allocation of the system’s resources.
A Type II VMM runs as an application. The operating
system that controls the real hardware of the machine is
called the “host OS.” The host OS does not need or use
any part of the virtualization environment. Every OS
that is run in the Type II virtual environment is called a
“guest OS.” In a Type II VMM, the host operating sys-
tem provides resource allocation and a standard execu-
tion environment to each guest OS.
2 VMM Requirements
2.2 Execution of Privileged Instructions
This section discusses each type of VMM including the
Type I VMM, Type II VMM, and Hybrid VMM. It will
also cover the architectural features required for the suc-
cessful implementation for each VMM type.
2.1 Virtual Machine Monitors Types
An operating system consists of instructions to be exe-
cuted on a hardware processor. When an operating sys-
tem is virtualized, some portion, ranging from none to
all, of the instructions may be executed by underlying
software. The amount of software and hardware exe-
cution of processor instructions determines if one has a
complete software interpreter machine (CSIM), hybrid
VM (HVM), VMM, or a real machine. Each of these
different types of machines provides a normal machine
environment, meaning that processor instructions can be
executed on them, viz. a VMM can host an operating
system. However, they differ in the way that the ma-
chine environment actually executes the processor in-
structions. A real machine uses only direct execution:
the processor executes every instruction of the program
directly. A CSIM uses only software interpretation: a
software program emulates every processor instruction.
There has been a recent resurgence of interest in CSIM
architectures [3, 18]. A VMM requires that a “statis-
tically dominant subset” of the virtual processor’s in-
structions be executed on the real processor [12]. Per-
formance will be effected by the size of the subset.
VMMs primarily use direct execution, with occasional
traps to software. As a result, the performance of VMMs
is better than CSIMs and HVMs. An HVM is a VMM
that uses software interpretation on all privileged in-
structions. HVMs are possible on a larger class of sys-
tems than VMMs. The deﬁnition of a VMM does not
specify how the VMM gains control of the machine to
interpret instructions that cannot be directly executed on
the processor. As a result, there are two different types
of VMMs that can create a virtual machine environment.
These types are referred as Type I and Type II [12]. A
When executing in a virtual machine, some processor
instructions can not be executed directly on the proces-
sor. These instructions would interfere with the state of
the underlying VMM or host OS and are called sensitive
instructions. The key to implementing a VMM is to pre-
vent the direct execution of sensitive instructions. Some
sensitive instructions in the Intel Pentium architecture
are privileged, meaning that if they are not executed at
most privileged hardware domain, they will cause a gen-
eral protection exception. Normally, a VMM is executed
in privileged mode and a VM is run in user mode; when
privileged instructions are executed in a VM, they cause
a trap to the VMM. If all sensitive instructions of a pro-
cessor are privileged, the processor is considered to be
“virtualizable:” then, when executed in user mode, all
sensitive instructions will trap to the VMM. After trap-
ping, the VMM will execute code to emulate the proper
behavior of the privileged instruction for the virtual ma-
chine. However, if sensitive, non-privileged instructions
exist, it may be necessary for the VMM to examine all
instructions before execution to force a trap to the VMM
when a sensitive, non-privileged instruction is encoun-
tered.
The most severe performance penalty occurs when run-
ning a complete software interpreter machine (CSIM) on
the same hardware. A CSIM emulates every instruction
of the real processor. It does not meet Goldberg’s deﬁni-
tion [12] of a virtual machine because it does not execute
any of the instructions directly on the real processor.
The following sections summarize Goldberg’s analy-
sis of processor requirements for the types of VMMs he
identiﬁed.
2.3 Type I VMM
A Type I VMM runs directly on the machine hardware.
It is an operating system or kernel that has mechanisms
to support virtual machines. It must perform scheduling
and resource allocation for all virtual machines in the
system and requires drivers for hardware peripherals.
To support a Type I VMM, a processor must meet three
virtualization requirements:
Requirement 1 The method of executing non-
privileged instructions must be roughly equivalent in
both privileged and user mode. For example, a processor
cannot use an additional bit in an instruction word or in
the address portion of an instruction when in privileged
mode.
Requirement 2 There must be a method such as a pro-
tection system or an address translation system to protect
the real system and any other VMs from the active VM.
Requirement 3 There must be a way to automatically
signal the VMM when a VM attempts to execute a sen-
sitive instruction. It must also be possible for the VMM
to simulate the effect of the instruction.
Sensitive instructions include:
Requirement 3A Instructions that attempt to change
or reference the mode of the VM or the state of the ma-
chine.
Requirement 3B Instructions that read or change sen-