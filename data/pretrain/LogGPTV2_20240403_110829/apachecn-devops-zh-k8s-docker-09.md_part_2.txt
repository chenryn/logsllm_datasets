    ```
4.  通过使用`kubectl`部署清单来创建入口规则。由于我们将名称空间值添加到了清单中，我们确实需要将`-n`添加到 kubectl 命令中:
    ```
    kubectl create -f insecure-dashboard.yaml
    ```
5.  一旦入口被创建，打开浏览器，使用入口规则`host`部分中指定的 Nip.io 名称进入您的机密仪表板。
6.  You will see an authentication screen that asks for a token or a Kubeconfig file, but since we enabled the option to skip the login when we edited the dashboard, you can simply skip the login by clicking on **Skip**:
    ![Figure 9.3 – Kubernetes Dashboard with login disabled ](img/Fig_9.3_B15514.jpg)
    图 9.3–禁用登录的 Kubernetes 仪表板
7.  Once in the dashboard, the default service account doesn't have access to anything:
    ![Figure 9.4 – Kubernetes Dashboard with the default service account ](img/Fig_9.4_B15514.jpg)
    图 9.4–带有默认服务帐户的 Kubernetes 仪表板
    到目前为止，这看起来还不算太糟。你会看到*访问被禁止*的错误，所以现在仪表盘不允许你做任何伤害。不幸的是，许多人走到这一步，采取额外的步骤来更改默认服务帐户在群集上的权限。
8.  Right now, the service account isn't authorized for access to the cluster, so change that by creating a new `ClusterRoleBinding` to the cluster-admin `ClusterRole`.
    创建一个名为`dashboard-role.yaml`的新文件，内容如下:
    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: secret-dashboard-cluster-admin
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - apiGroup: ""
      kind: ServiceAccount
      namespace: kubernetes-dashboard
      name: kubernetes-dashboard
    ```
9.  使用`kubectl` :
    ```
    kubectl create -f dashboard-role.yaml
    ```
    创建新的`ClusterRoleBinding`
恭喜你！机密仪表板现在可供任何想使用它的人使用！
现在，你可能在想*“谁能找到我的仪表盘？他们需要知道网址，我不会告诉任何人它是什么。”*你感到安全，因为没有人知道你仪表板的网址或 IP 地址。这种被称为默默无闻的安全，被普遍认为是保护系统的一种可怕的方法。
让我们来看一个场景，有人可能会在您不知情的情况下利用仪表板。
你是一个红迪粉丝，有一天你看到一个红迪帖子，标题是*这是一个保护你的 Kubernetes 仪表盘*的好工具。这个帖子似乎是合法的，你很兴奋能测试这个新工具。看完帖子后，你会看到底部的实用程序链接和运行它的命令:你可以从[https://raw . githubusercontent . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/master/chapter 9/kubectl-secure-my-dashboard . go](https://raw.githubusercontent.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/master/chapter9/kubectl-secure-my-dashboard.go)试试看！
要充分体验这个例子，您可以通过从`chapter9`目录中的克隆存储库中执行以下命令，在您的 KinD 集群上运行该工具。请务必更改仪表板入口主机的网址:
```
go run kubectl-secure-my-dashboard.go https://k8s-secret-dashboard.apps.192-168-2-129.nip.io
Running analysis on https://k8s-secret-dashboard.apps.192-168-2-129.nip.io
Your dashboard has been secured!
```
现在，让我们来回顾一下刚刚发生的事情。打开浏览器，转到您的机密仪表板站点，查看已更改的内容:
![Figure 9.5 – Kubernetes Dashboard showing malware deployed ](img/Fig_9.5_B15514.jpg)
图 9.5–Kubernetes 仪表板显示部署的恶意软件
看来我们的强化插件是部署比特币矿工的诡计。真没礼貌！
既然您已经看到了不安全的仪表板是多么容易被利用，那么就使用 kubectl 删除部署。
虽然可以通过使用批准的映像对注册表进行预授权来减轻这种攻击(当 [*第 11 章*](11.html#_idTextAnchor272)*使用开放策略管理器扩展安全性】*中涵盖`OpenPolicyAgent`时，将涵盖该主题)，但此时安全性是被动的，试图响应而不是阻止威胁。使用准入控制器也不会阻止某人从你的仪表板中提取机密。
虽然这是不安全地访问仪表板的最简单的方法，但这不是唯一的方法。kubectl 实用程序包括两个功能，可以使访问仪表板变得容易。端口转发实用程序通常用于创建到集群内部 pod 的隧道。该实用程序创建一个到您的 pod 上的特定端口的 TCP 流，使您的本地主机(或更多，如果您想要的话)可以访问它。这仍然会绕过仪表板中的认证，要求仪表板的服务帐户可以通过 RBAC 进行访问，以执行任何需要的任务。虽然用户必须拥有 RBAC 授权才能转发到 pod，但这将通过两种攻击方式打开控制面板:
*   **外部**:用户本地工作站上运行的任何脚本都可以访问转发的网络隧道。
*   **内部**:任何位于集群内部的吊舱都可以访问仪表板吊舱。
对于内部访问，可以使用网络策略来限制哪些名称空间和 Pods 可以访问仪表板的 API。首先使用网络策略是一个好主意，但在这种情况下这是一个单点故障。一个错误配置的策略将打开仪表板进行攻击。
来自外部的威胁可能会以您决定运行的脚本(或您使用的其他工具)的形式出现。Web 浏览器无法从本地系统之外的页面访问通过端口转发打开的端口，但是任何运行在工作站上的脚本都可以。例如，虽然您可以通过打开浏览器并直接转到端口来访问端口转发的主机，但是从远程站点加载的带有恶意 JavaScript 的网页无法打开与本地主机的连接。尝试对转发的端口运行本节前面的强化脚本，将会出现相同的结果，这是您的基础架构上不需要的 pod。
提供访问的另一种技术是使用 API 服务器的集成代理实用程序。运行`kubectl proxy`创建一个到 API 服务器的本地网络隧道，然后可以用来将 HTTP 请求代理到任何 pod，包括仪表板。这与`kubectl port-forward`有着相同的缺点，并且会使你的集群容易受到本地运行的任何脚本的攻击。
这些方法的共同点是它们的安全性都有一个单点故障。即使有适当的缓解措施来限制可以部署哪些映像，不安全的仪表板仍然可以用于访问机密对象、删除部署，甚至通过集成到仪表板中的终端远程进入 Pods。
探索了如何绕过仪表板上的所有认证及其含义后，接下来我们将了解如何在不部署额外基础架构的情况下向仪表板提供令牌。
## 使用令牌登录
用户可以将令牌或 kubectl 配置文件上传到仪表板作为登录，以避免机密仪表板的危险。如前所述，仪表板将获取用户的承载令牌，并将其用于对应用编程接口服务器的所有请求。虽然这似乎解决了给仪表板自己的特权服务帐户的问题，但它也带来了自己的问题。仪表板不是 kubectl，不知道如何在令牌过期时刷新令牌。这意味着令牌需要相当长的寿命才能有用。这将需要要么创建可以使用的服务帐户，要么延长您的 OpenID Connect `id_tokens`的寿命。这两个选项都将通过利用 OpenID Connect 进行认证来抵消大部分安全性。
到目前为止，我们只关注了部署仪表板的错误方式。虽然理解这一点很重要，但正确的方法是什么？在下一节中，我们将详细介绍使用反向代理部署仪表板的正确方法。
# 使用反向代理部署仪表板
代理是 Kubernetes 中常见的模式。Kubernetes 集群中的每一层都有代理。Kubernetes 上的大多数服务网格实现也使用代理模式，创建将拦截请求的侧车。这里描述的反向代理和这些代理的区别在于它们的意图。微服务代理通常不携带会话，而 web 应用需要会话来管理状态。
下图显示了带有反向代理的 Kubernetes 仪表板的体系结构:
![Figure 9.6 – Kubernetes Dashboard with a reverse proxy ](img/Fig_9.6_B15514.jpg)
图 9.6–带反向代理的 Kubernetes 仪表板
*图 9.6* 所示的反向代理执行三个角色:
*   **认证**:反向代理拦截未经认证的请求(或陈旧会话)，并使用 OpenID Connect 身份提供程序触发认证过程，以对用户进行认证。
*   **会话管理** : Kubernetes 的仪表盘是一个面向用户的应用。它应该具有支持会话超时和撤销的典型控制。警惕将所有会话数据存储在 cookie 中的反向代理。这些方法很难撤销。