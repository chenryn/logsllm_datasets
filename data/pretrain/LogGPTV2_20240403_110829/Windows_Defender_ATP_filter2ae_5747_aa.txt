# 如何规避Windows Defender ATP
|
##### 译文声明
本文是翻译文章，文章原作者 b4rtik，文章来源：b4rtik.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
几星期之前，我和[uf0](https://twitter.com/matteomalvica)花了点时间研究了一下Windows Defender
ATP的凭据防窃取功能，官方说明中有一段话引起了我们的注意：
>
> （ATP）采用了一种统计学方法来检测凭据窃取行为。回顾已有的多款工具，我们发现凭据窃取行为与`lsass.exe`进程内存的读取次数及读取数据量密切相关，非常有可能正确预测。
我们准备从Ring3开始研究，然而即便我们找到了能够规避这种控制策略的方法，也没有在`NtReadVirtualMemory`中看到任何hook。因此我们决定研究一下`NtReadVirtualMemory`内部的工作原理。
## 0x01 Dumpert vs ATP
[Dumpert](https://github.com/outflanknl/Dumpert)是用来转储lsass进程内存的一款工具，该工具直接使用syscall，没有hook原生API，从而实现AV及EDR控制策略的规避。虽然这种方法对基于API
hook的检测机制非常有效，但依然无法规避MDATP的检测。
在[uf0](https://twitter.com/matteomalvica)小伙伴的帮助下，我们研究了MDATP的逻辑，发现了在用户模式下的一种方法，可以规避之前ATP对`PssCaptureSnapshot`
API利用技术的防护。在研究过程中，至少在用户模式下我们没有找到ATP设置的任何hook或者其他痕迹。因此有理由推测ATP是在Ring0检测恶意行为。
## 0x02 ReadVirtualMemory
Dumpert这款工具基于`MiniDumpWriteDump`函数构建，而该函数又基于`NtReadVirtualMemory`。因此即使没有hook，这款工具实际执行的代码如下所示：
    0:002> uf ntdll!NtReadVirtualMemory
    ntdll!NtReadVirtualMemory:
    00007fff`11e5c890 4c8bd1          mov     r10,rcx
    00007fff`11e5c893 b83f000000      mov     eax,3Fh
    00007fff`11e5c898 f604250803fe7f01 test    byte ptr [SharedUserData+0x308 (00000000`7ffe0308)],1
    00007fff`11e5c8a0 7503            jne     ntdll!NtReadVirtualMemory+0x15 (00007fff`11e5c8a5)  Branch
    ntdll!NtReadVirtualMemory+0x12:
    00007fff`11e5c8a2 0f05            syscall
    00007fff`11e5c8a4 c3              ret
    ntdll!NtReadVirtualMemory+0x15:
    00007fff`11e5c8a5 cd2e            int     2Eh
    00007fff`11e5c8a7 c3              ret
syscall将上下文环境从用户模式转移到内核模式。如果我们深入分析`nt!NtReadVirtualMemory`的实现，会发现其内部会调用另一个函数：`nt!MiReadWriteVirtualMemory`。
    lkd> uf nt!NtReadVirtualMemory
    nt!NtReadVirtualMemory:
    fffff801`25a22a80 4883ec38        sub     rsp,38h
    fffff801`25a22a84 488b442460      mov     rax,qword ptr [rsp+60h]
    fffff801`25a22a89 c744242810000000 mov     dword ptr [rsp+28h],10h
    fffff801`25a22a91 4889442420      mov     qword ptr [rsp+20h],rax
    fffff801`25a22a96 e815000000      call    nt!MiReadWriteVirtualMemory (fffff801`25a22ab0)
    fffff801`25a22a9b 4883c438        add     rsp,38h
    fffff801`25a22a9f c3              ret
在最近的Windows版本中，系统在读取目标内存之前内核首先会检查函数调用是否来自于用户模式，以避免该调用读取受保护进程或者内核地址空间。如下所示，除了这些检查操作外，系统还会调用`nt!EtwTiLogReadWriteVm`。因此，为了记录该事件，ATP会使用Etw来记录`nt!NtReadVirtualMemory`。
    lkd> uf nt!MiReadWriteVirtualMemory
    .
    .
    .
    nt!MiReadWriteVirtualMemory+0x1ce:
    fffff801`25a22c7e 48897c2428      mov     qword ptr [rsp+28h],rdi
    fffff801`25a22c83 4c89642420      mov     qword ptr [rsp+20h],r12
    fffff801`25a22c88 448bca          mov     r9d,edx
    fffff801`25a22c8b 4d8bc6          mov     r8,r14
    fffff801`25a22c8e 498bd2          mov     rdx,r10
    fffff801`25a22c91 8bce            mov     ecx,esi
    fffff801`25a22c93 ebe8e8f70200      call    nt!EtwTiLogReadWriteVm (fffff801`25a52480)
    fffff801`25a22c98 eb90            jmp     nt!MiReadWriteVirtualMemory+0x17a (fffff801`25a22c2a) 
    .
    .
    .
    lkd> uf nt!EtwTiLogReadWriteVm
    nt!EtwTiLogReadWriteVm:
    fffff801`25a52480 48895c2420      mov     qword ptr [rsp+20h],rbx
    fffff801`25a52485 894c2408        mov     dword ptr [rsp+8],ecx
    fffff801`25a52489 55              push    rbp
    fffff801`25a5248a 56              push    rsi
    fffff801`25a5248b 57              push    rdi
    .
    .
    nt!EtwTiLogReadWriteVm+0x175667:
    .
    .
    .
    fffff801`25bc7b4d e8161796ff      call    nt!EtwpTiFillProcessIdentity (fffff801`25529268)
    fffff801`25bc7b52 4403c8          add     r9d,eax
    fffff801`25bc7b55 488d8db0000000  lea     rcx,[rbp+0B0h]
    fffff801`25bc7b5c 418bc1          mov     eax,r9d
    fffff801`25bc7b5f ba08000000      mov     edx,8
    fffff801`25bc7b64 4803c0          add     rax,rax
    fffff801`25bc7b67 41ffc1          inc     r9d
    fffff801`25bc7b6a 4533c0          xor     r8d,r8d
    fffff801`25bc7b6d 8364c44c00      and     dword ptr [rsp+rax*8+4Ch],0
    fffff801`25bc7b72 48894cc440      mov     qword ptr [rsp+rax*8+40h],rcx
    fffff801`25bc7b77 488d8db8000000  lea     rcx,[rbp+0B8h]
    fffff801`25bc7b7e 8954c448        mov     dword ptr [rsp+rax*8+48h],edx
    fffff801`25bc7b82 418bc1          mov     eax,r9d
    fffff801`25bc7b85 4803c0          add     rax,rax
    fffff801`25bc7b88 8364c44c00      and     dword ptr [rsp+rax*8+4Ch],0
    fffff801`25bc7b8d 48894cc440      mov     qword ptr [rsp+rax*8+40h],rcx
    fffff801`25bc7b92 41ffc1          inc     r9d
    fffff801`25bc7b95 488b0de4d0c6ff  mov     rcx,qword ptr [nt!EtwThreatIntProvRegHandle (fffff801`25834c80)]