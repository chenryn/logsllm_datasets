7、查询单个parquet文件的数据    
```    
SELECT * FROM 'test.parquet' limit 10;    
D SELECT * FROM 'test.parquet' limit 10;    
| column0 |             column1              |    
|---------|----------------------------------|    
| 1       | 4e87f07aebd72c8dee6dd1e38c81c117 |    
| 2       | c6593071f52d1fc6b209328f44947783 |    
| 3       | 7a0381740c4316beca3277ad803086d9 |    
| 4       | bb42349afadc86a9b984649a26d64083 |    
| 5       | b1135634112bf4aadfeb2992216ea60a |    
| 6       | 86bf92735799e74ea9d397eccdd0c7c8 |    
| 7       | 9ca0ea5e9e0651024592066fdf7288fb |    
| 8       | 247bab9a54195564744bcf229a6061fd |    
| 9       | e11d4ff8845a329b17f52f419b32d2f2 |    
| 10      | 5d6185e29ff76ee5d7261bcf638146a5 |    
```    
8、查询多个parquet文件的数据 (当数据结构(定义)一致时, 支持多个文件读.)     
DuckDB can also read a series of Parquet files and treat them as if they were a single table. Note that this only works if the Parquet files have the same schema. You can specify which Parquet files you want to read using a list parameter, glob pattern matching syntax, or a combination of both.    
```    
-- read 3 parquet files and treat them as a single table    
SELECT * FROM read_parquet(['file1.parquet', 'file2.parquet', 'file3.parquet']);    
```    
Wildcard	| Description    
---|---    
`*`	| matches any number of any characters (including none)    
`?`	| matches any single character    
`[abc]`| 	matches one character given in the bracket    
`[a-z]`| 	matches one character from the range given in the bracket    
```    
-- read all files that match the glob pattern    
SELECT * FROM read_parquet('test/*.parquet');    
-- Read all parquet files from 2 specific folders    
SELECT * FROM read_parquet(['folder1/*.parquet','folder2/*.parquet']);    
```    
9、将parquet的数据插入本地表    
```    
-- insert the data from the parquet file in the table    
INSERT INTO people SELECT * FROM read_parquet('test.parquet');    
-- create a table directly from a parquet file    
CREATE TABLE people AS SELECT * FROM read_parquet('test.parquet');    
-- or  
COPY tbl FROM 'input.parquet' (FORMAT PARQUET);   
```    
10、创建parquet文件视图    
```    
-- create a view over the parquet file    
CREATE VIEW people AS SELECT * FROM read_parquet('test.parquet');    
-- query the parquet file    
SELECT * FROM people;    
```    
11、查看执行计划(观察filter和projections下推)    
```    
D explain SELECT * FROM 'test.parquet' limit 10;    
┌─────────────────────────────┐    
│┌───────────────────────────┐│    
││       Physical Plan       ││    
│└───────────────────────────┘│    
└─────────────────────────────┘    
┌───────────────────────────┐    
│           LIMIT           │    
└─────────────┬─────────────┘                                 
┌─────────────┴─────────────┐    
│        PARQUET_SCAN       │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│          column0          │    
│          column1          │    
└───────────────────────────┘                                 
D explain SELECT column1 FROM 'test.parquet' limit 10;    
┌─────────────────────────────┐    
│┌───────────────────────────┐│    
││       Physical Plan       ││    
│└───────────────────────────┘│    
└─────────────────────────────┘    
┌───────────────────────────┐    
│           LIMIT           │    
└─────────────┬─────────────┘                                 
┌─────────────┴─────────────┐    
│        PARQUET_SCAN       │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│          column1          │    
└───────────────────────────┘     
D explain SELECT column1 FROM 'test.parquet' where column1='test';    
┌─────────────────────────────┐    
│┌───────────────────────────┐│    
││       Physical Plan       ││    
│└───────────────────────────┘│    
└─────────────────────────────┘    
┌───────────────────────────┐    
│        EMPTY_RESULT       │    
└───────────────────────────┘                                 
D explain SELECT column1 FROM 'test.parquet' where column1='b1135634112bf4aadfeb2992216ea60a';    
┌─────────────────────────────┐    
│┌───────────────────────────┐│    
││       Physical Plan       ││    
│└───────────────────────────┘│    
└─────────────────────────────┘    
┌───────────────────────────┐    
│        PARQUET_SCAN       │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│          column1          │    
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │    
│      Filters: column1     │    
│=b1135634112bf4aadfeb2...  │    
│     column1 IS NOT NULL   │    
└───────────────────────────┘      
```    
## 参考    
- https://duckdb.org/docs/data/parquet    
- https://duckdb.org/docs/sql/statements/export    
- https://duckdb.org/docs/sql/statements/copy.html  
- https://duckdb.org/docs/data/csv  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")