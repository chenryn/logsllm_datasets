5
5
Phase 1. In this phase, adversary A issues a series of queries
subject to the restrictions of the Type I IND-CPRE-CCA
game. B answers these queries for A as follows:
$← Z∗
• Uncorrupted key generation query (cid:104)i(cid:105): Algorithm B
q . Next, as in Coron (cid:44)a´rs proof tech-
ﬁrst picks xi
nique [12], it ﬂips a biased coin coini ∈ {0, 1} that
yields 0 with probability θ and 1 with probability 1−θ.
If coini = 0, deﬁne pki = (Pi, Qi) = (ga2xi , g
) =
((g(a2))xi , g
((ga)xi , (ga)
and adds the tuple (pki, xi, coini) to the K list.
xi ); else deﬁne pki = (Pi, Qi) = (gaxi , g
xi ). Finally, it returns pki to adversary A
a2xi
1
1
axi
1
u
u
1
• Corrupted key generation query (cid:104)j(cid:105): Algorithm B ﬁrst
q and deﬁnes pkj = (Pj, Qj) = (gxj ,`g(a2)´u/xj )
picks xj
and coinj = ‘−’. Next, it adds the tuple (pkj, xj, coinj)
to the K list and returns (pkj, xj) to adversary A.
$← Z∗
) =
• Partial re-encryption key query (cid:104)pki, pkj(cid:105): B ﬁrst parses
pkj as (Pj, Qj), and recovers tuples (pki, xi, coini) and
(pkj, xj, coinj) from the K list. Next, it constructs the
partial re-encryption key rki,j for adversary A accord-
ing to the following situations:
2. Issue a condition key query (cid:104)pki, w(cid:48)(cid:105) to obtain the
condition key cki,w(cid:48) .
1
3. Finally, generate the re-encrypted ciphertext ac-
cording to the following two cases:
– coini = 0 ∧ coinj = ‘−’: search whether there
exists a tuple (m, r(cid:48), w, r) ∈ H list
such that
1 = A and w = w(cid:48). If yes, compute B(cid:48) =
gr
j ), C(cid:48) = C ⊕ H4(e(A, cki,w(cid:48) )), and re-
e(g, P r
turn CTj = (B(cid:48), C(cid:48)) as the re-encrypted ci-
phertext to A; otherwise return ⊥.
– Otherwise: Algorithm B ﬁrst constructs the
partial re-encryption key rki,j as in the par-
tial re-encryption key queries, and then runs
algorithm ReEncrypt(CTi, rki,j, cki,w(cid:48) ), and ﬁ-
nally returns the resulting re-encrypted ci-
phertext CTj to A.
• Decryption query (cid:104)pki, (w(cid:48), CT)(cid:105) or (cid:104)pki, CT(cid:105): Algo-
rithm B parses pki as pki = (Pi, Qi) and then recov-
ers tuple (pki, xi, coini) from the K list. If coini = ‘−’
(meaning ski = xi), algorithm B decrypts the cipher-
text using xi and returns the plaintext to A. Other-
wise, it proceeds as follows.
1. Parse CT as CT = (A, B, C, D) or CT = (B, C).
When CT = (A, B, C, D), work as follows: if Eq.
(2) does not hold, return ⊥, else construct the
condition key cki,w(cid:48) as in the condition key query,
and deﬁne C = C ⊕ H4(e(A, cki,w(cid:48) )).
exist tuples (m, r(cid:48), w, r) ∈ H list
such that
to see whether there
and (U, β) ∈ H list
2. Search lists H list
and H list
1
2
1
2
(cid:48)
i = B, β⊕(m(cid:107)r
, P r
w = w
If yes, return m to A. Otherwise, return ⊥.
) = C and U = e(g, g)r.
(cid:48)
Challenge. When A decides that Phase 1 is over, it out-
puts a target public key pki∗ , a condition w∗ and two equal-
length messages m0, m1 ∈ {0, 1}l0 . Algorithm B responds
as follows:
1. Recover tuple (pki∗ , x∗, coin∗) from the K list. If coin∗ (cid:54)=
0, output “failure” and abort. Otherwise (meaning
ski∗ = a2x∗), algorithm B continues to execute the
following steps.
$← Z∗
$← {0, 1}l0+l1 , and deﬁne A∗ =
2. Pick y∗
q , C∗
, B = gbx∗y∗
guby∗
, D∗ = gby∗(α1H5(A∗,B∗,C∗)+α2).
3. Construct the condition key cki∗,w∗ as in the condition
key query.
4. Pick a random bit δ $← {0, 1}, r(cid:48) $← {0, 1}l1 . Implic-
by∗
itly deﬁne H1(mδ, r(cid:48), w∗) = by∗
a2 ) =
C∗ ⊕ (mδ(cid:107)r(cid:48))⊕ H4(e(A∗, cki∗,w∗ )) (note that B knows
neither by∗
a2 and H2(e(g, g)
by∗
a2 ).
5. Return CT∗ = (A∗, B∗, C∗, D∗) as the challenged ci-
a2 nor e(g, g)
phertext to adversary A.
Note that by the construction given above, if let r∗ (cid:44) by∗
a2 ,
we can see that the challenged ciphertext CT∗ has the same
distribution as the real one, since H2 acts as a random oracle,
and
B simply outputs rki,j = P 1/xi
– If coini = ‘−’, it means that ski = xi. Algorithm
– If (coini = 1∧ coinj = 0), it means that ski = axi
and skj = a2xj. B returns rki,j = (ga)
xj
xi . Note
that this is a valid partial re-encryption key since
.
j
xj
xi = g
a2xj
axi = P
1
ski
j
(ga)
algorithm B returns rki,j = gxj /xi .
– If (coini = 1∧coinj = 1) or (coini = 0∧coinj = 0),
– If (coini = 1 ∧ coinj = ‘−’) or (coini = 0 ∧ coinj =
.
“
g1/a”xj /xi
.
1), B returns rki,j =
– If (coini = 0 ∧ coinj = ‘−’), B outputs “failure”
and aborts.
• Condition key query (cid:104)pki, w(cid:105): Algorithm B ﬁrst re-
covers tuple (pki, xi, coini) from the K list and tuple
(w, pki, s, S) from the H list
. Next, it constructs the
condition key cki,w for adversary A according to the
following cases:
3
– If coini = ‘−’, it means that ski = xi: Algorithm
B responds with cki,w = S1/xi .
– If coini = 1, it means that ski = axi: Algorithm
B responds with cki,w = gs/xi . Note that this is
as
axi =
indeed a valid condition key, since g
(gas)
– If coini = 0, it means that ski = a2xi: B responds
. Note that this is indeed
g1/a”s/xi
1
axi = H(w, pki)
with cki,w =
s
xi = g
1
ski .
“
“
g1/a” s
xi = g
as
a2xi =
a valid condition key, since
1
(gas)
a2xi = H(w, pki)
1
ski .
• Re-encryption query (cid:104)pki, pkj, (w(cid:48), CTi)(cid:105): Algorithm
B parses CTi as CTi = (A, B, C, D). If Eq. (2) does
not hold, it outputs ⊥; otherwise, it works as follows:
1. Recover tuples (pki, xi, coini) and (pkj, xj, coinj)
from the K list.
∗
A
∗
C
∗
D
(cid:48)
∗
B
=`g(a2u)´ by∗
∗ ⊕`(mδ(cid:107)r
= `C
= guby∗
= C
a2 ) ⊕`(mδ(cid:107)r
∗ ⊕ (mδ(cid:107)r
(cid:48)
by∗
= H2(e(g, g)
= H2(e(g, g)r∗
= gby∗(α1H5(A∗,B∗,C∗)+α2) =
) ⊕ (mδ(cid:107)r
= gbx∗y∗
a2 = P r∗
i∗ ,
, cki∗,w∗ )´,
a2 = gr∗
1 ,
) ⊕ H4(e(A
∗
) ⊕ H4(e(A
∗
(cid:48)
) ⊕ H4(e(Qi∗ , H3(w
=`ga2x∗´ by∗
, cki∗,w∗ )´ ⊕`(mδ(cid:107)r
, cki∗,w∗ )´ ⊕`(mδ(cid:107)r
)´
ga2α1H5(A∗,B∗,C∗)ga2α2” by∗
“
The simulation of the decryption oracle is perfect, with the
exception that simulation errors may occur in rejecting some
valid ciphertexts. However, these errors are not signiﬁcant as
) ⊕ H4(e(A
∗
shown below: Suppose a ciphertext CT has been queried to
the decryption oracle. Even if CT is a valid ciphertext, there
) ⊕ H4(e(Qi∗ , H3(w
(cid:48)
is a possibility that CT can be produced without querying
e(g, g)r to H2, where r = H1(m, r(cid:48), w). Let Valid be an
, pki∗ )r∗
event that CT is valid. Let AskH2 and AskH1 respectively
be events that e(g, g)r has been queried to H2 and (m, r(cid:48), w)
),
has been queried to H1. We then have
Pr[Valid|¬AskH2] ≤ Pr[Valid ∧ AskH1|¬AskH2] + Pr[Valid ∧ ¬AskH1|¬AskH2]
=
≤ Pr[AskH1|¬AskH2] + Pr[Valid|¬AskH1 ∧ ¬AskH2] ≤ qH1
) ⊕ H4(e(Qi∗ , H3(w
∗
)´
”r∗
f H5(A∗,B∗,C∗)f1
∗
, pki∗ )r∗
, pki∗ )r∗
“
a2
∗
.
(cid:48)
(cid:48)
Phase 2. A continues to issue the rest of queries as in Phase
1, with the restrictions described in the Type I IND-CPRE-
CCA game. Algorithm B responds to these queries as in
Phase 1.
Guees. Eventually, adversary A returns a guess δ(cid:48) ∈ {0, 1}
to B. Algorithm B randomly picks a tuple (U, β) from the
list H list
as the solution to the given
3-QBDH instance.
, and outputs U 1/y∗
2
by∗
a2
Analysis. Now let’s analyze the simulation. The main idea
of the analysis is borrowed from [9]. We ﬁrst evaluate the
simulations of the random oracles. From the constructions
of H3, H4 and H5, it is clear that the simulations of these
oracles are perfect. As long as adversary A does not query
(mδ, r(cid:48), w∗) to H1 nor e(g, g)
to H2, where δ and r(cid:48) are
chosen by B in the Challenge phase, the simulations of H1
and H2 are perfect. By AskH∗
1 we denote the event that
(mδ, r(cid:48), w∗) has been queried to H1. Also, by AskH∗
2 we
by∗
a2 has been queried to H2.
denote the event that e(g, g)
As argued before, the challenged ciphertext provided for A is
identically distributed as the real one from the construction.
From the description of the simulation, it can be seen that
the responses to A’s uncorrupted key generation queries,
corrupted key generation queries, condition key queries are
also perfect.
Next, we analyze the simulation of the partial re-encryption
key oracle and the Challenge phase. Obviously, if B does not
abort during the simulation of the partial re-encryption key
queries, the response to A’s partial re-encryption key queries
is perfect. Similarly, if B does not abort in the Challenge
phase, the Challenge phase is also perfect. Let Abort denote
the event of B’s aborting during the whole simulation. Then
we have Pr[¬Abort] ≥ θqrk (1 − θ), which is maximized at
. Using θopt, the probability Pr[¬Abort] is at
θopt = qrk
1+qrk
least
e(1+qrk) .