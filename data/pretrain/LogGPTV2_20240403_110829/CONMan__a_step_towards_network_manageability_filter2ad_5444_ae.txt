# Table 5: Commands and State Variables in Today’s (T) and CONMan (C) Scripts

Table 5 provides a comparison of commands and state variables used in current (T) and CONMan (C) scripts. The table and the scripts are color- and font-coded for clarity; for example, the first occurrence of a "Generic Command" in each script is highlighted in red and italics.

## Protocol Parameters
While we acknowledge that these metrics are quite coarse, we see this as an important, albeit naive, step towards quantifying the benefits of using management applications to generate CONMan primitives instead of device-level configurations.

## Related Work

### Network Management Tools
There is a vast body of work on network management. On the commercial side, SNMPLink [31] lists many existing tools, ranging from low-end tools like packet analyzers (e.g., Wireshark [47]), traffic monitors (e.g., MRTG [35]), and SNMP agents (e.g., ITM [7]) to high-end managers like HP OpenView [43].

### Zeroconf and Similar Efforts
Zeroconf [51] and similar initiatives like UPnP [46] and DLNA [50] enable local communication in networks of limited scale without any configuration [15]. While CONMan is more general, it does not address ad-hoc networks. With CONMan, the human manager still needs to specify a high-level configuration goal. However, CONMan could benefit from some Zeroconf features, such as address auto-configuration using link-local addresses.

### Policy-Based Management
Policy-based management [16] aims to reduce the intricate knowledge required by human managers by allowing the management of QoS [2, 32] and security [37] based on high-level policies. There are efforts in both research [48] and industry [42–45] with similar goals. Despite these steps, some entity still needs to map these policies to individual device configurations, which has been a significant impediment to the adoption of policy-based networking [17].

### Protocol Implementation
CONMan does not dictate how data-plane protocols should be implemented. However, there is extensive literature on protocol implementation, including abstractions [1], specification languages (Estelle, LOTOS, SDL [38]), implementation languages [10, 24, 25], and modularization (Click [19], [5]). The 4D proposal [14] recognizes the complexity of the Internet's control and management plane and argues for restructuring them. We were motivated, among other things, by 4D’s discovery plane.

### Recent Research
Recent studies have detailed the reasons for outages and anomalies in IP backbones [22, 27], Internet services [28], and BGP routing [11, 26]. These studies point to configuration errors as a major culprit. CONMan can reduce these errors, particularly those impacting data plane operation. Additionally, CONMan can simplify the cross-layer database and interface proposed in [20] and may provide the basis for the Knowledge Plane objectives outlined by Clark et al. [9].

## Example Configuration

### Current Configuration (Cisco CatOS)
```plaintext
# put module0 port 9 into VLAN22
set vlan 22 name C1 mtu 1504
set vlan 22 gigabitethernet0/9
# ensure module 0 port 7 is access port
interface gigabitethernet0/7
switchport access vlan 22
switchport mode dot1q-tunnel
exit
vlan dot1q tag native
end
```

### CONMan Configuration
```plaintext
P1 = create (pipe, , , , )
P2 = create (pipe, , , , )
create (switch, , [P0, Tagged ⇒ P1])
create (switch, , [P1 ⇒ P0])
create (switch, , P1, P2)
create (switch, , P2, P4)
```

## Discussion and Future Work

In this paper, we presented a network architecture amenable to management. The implementation of a few protocols according to the CONMan model and their use in VPN configuration scenarios shows that the approach is worth considering. Although it is too early to claim that the abstraction presented here suffices for all data plane protocols and tasks beyond basic configuration, we do not envision the module abstraction expanding much beyond its current state.

### Scalability
This paper tests the extent to which management interfaces can be made protocol-agnostic but does not address scalability and robustness concerns. An important concern is the amount of traffic and processing load imposed on the NM, especially due to changes in high-level goals or the network itself. While our current implementation is restricted to lower layer modules and mostly static configuration tasks, scaling would be more challenging if CONMan were to account for applications as well. For many tasks, the NM can use existing control protocols. CONMan would also benefit from proposals to improve the scalability of automated agents within the SNMP framework [13, 23, 30].

### Multiple NMs
Our current attempt has focused on a single NM managing a given network. However, multiple NMs may exist. Primary and secondary NMs will be needed for robustness. We can also imagine multiple simultaneously operating NMs. One reason for this might be that NMs do specialized jobs, such as one being responsible for tunnel creation while another monitors for security violations. Another reason might be that NMs are administratively nested, such as a high-level NM creating VLANs, with each VLAN having its own NM.

### Management Channel
The aforementioned possibilities present challenges such as the need for scoped management channels, extending the management channel beyond a single domain, and the possibility of conflicting configurations. The notion of a management channel needs more thought. We aim to keep the management channel as simple as possible to avoid the problem of managing the management channel. Higher-level management tasks should rely on the data-plane for communication.

### Future Work
- **Scalability**: Evaluate the scalability and robustness of the proposed approach.
- **Multiple NMs**: Explore the use of multiple NMs for specialized jobs and administrative nesting.
- **Management Channel**: Develop a more robust and scalable management channel.
- **User-Side Goals**: Evaluate other high-level goals and their impact on the algorithmic complexity of the NM.
- **Deployment**: Address the deployment of CONMan, considering the trade-offs between short-term complexity and long-term simplicity.

## Acknowledgements
We would like to thank our shepherd, David Maltz, and the anonymous reviewers for their useful feedback. This work was partially supported by NSF Grants 0338750 and 0626978.

## References
[References listed as in the original text]

This version of the text is more structured, clear, and professional, with improved readability and coherence.