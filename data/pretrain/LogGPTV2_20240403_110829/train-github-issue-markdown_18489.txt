EDIT: Summary: `B = A; (t->B()).(spzeros(10))` constructs a sparse vector of
type `Any`, while `(t->A()).(spzeros(10))` constructs correctly a sparse array
of type `A`
I hope this is not a duplicate.
    julia> struct A end
    julia> function test(x)
               B = A
               (t->B()).(x)
           end
    julia> test(zeros(1))
    1-element Array{A,1}:
     A()
all seems ok. However,
    julia> using SparseArrays
    julia> test(spzeros(1))
    1-element SparseVector{Any,Int64} with 1 stored entry:
      [1]  =  A()
So the eltype could not be infered. Note that
    julia> (t->A()).(spzeros(1))
    1-element SparseVector{A,Int64} with 1 stored entry:
      [1]  =  A()
has no problem whatsoever