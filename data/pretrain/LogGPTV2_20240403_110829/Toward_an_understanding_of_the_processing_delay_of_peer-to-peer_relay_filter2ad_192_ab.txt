threads, device I/O requests, and the foreground tasks, first.
c. Sample Filtering based on IPID
Although we can calculate the processing delay of a relayed
packet by simply subtracting the DDT from the ART in a
LAN-scenario like Fig. 1, the result will be less accurate if
the relay node is on the Internet because of network delays.
The problem is that, in the Internet scenario, both DDT and
ART are subject to network dynamics and network delays
independently. Thus, the result of subtracting DDT from ART
will be affected by the network delays of the relay packet and
ack packet, and deviate from the true processing delays at the
relay node.
We cope with network variabilities by filtering out packets
that lead to inaccurate processing delay estimates based on the
IPID field. We call this the IPID filtering method. Since the
IPID field is strictly increasing for IP packets generated by
a computer, we use the information to determine the release
order of packets from the relay node. The rationale of our IPID
filtering method is as follows: "If a set of packets sent by a
node are reordered in the network, then at least one of them
1-4244-2398-9/08/$20.00 ©2008 IEEE
412
DSN 2008: Chen & Lou
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
must have experienced unusual network delays and should be
filtered out."
As we do not have direct access to every relay node on
the Internet, the following rules are employed to determine
the packet ordering at
the node. 1) For packets from the
source host, we detect whether they arrive at the relay node
sequentially by analyzing the IPIDs of their corresponding ack
packets. A smaller IPID in an ack packet indicates that its
corresponding source packet arrived at the relay node earlier,
and vice versa. 2) For packets from the relay node, we detect
the sequence they departed the relay node by their IPIDs.
Fig. 3 illustrates three possible packet-reordering scenarios.
Note that this is not an exhaustive listing of possible reordering
cases. For example, a relay packet for a source packet x may
exchange its order with an ack packet for a source packet y,
which forms another category of reordering. Any occurrence
of packet sequence rearrangement indicates that at least one
packet is experiencing unusual network delays. Suppose a
source packet i
that departed from the source host at time
ts,i elicits an ack packet with IPID idack,i and a relay packet
with IPID idr,i' which arrive at their destinations at time tack,i
and t r ,i respectively. We detect packets with unusual network
delays as follows:
1) For all source packets, we obtain a sequence {ts, idack }
sorted by ts. We then apply the longest increasing sub(cid:173)
sequence (LIS) algorithm [24] to the {idack} sequence,
I Dack' and obtain its longest increasing subsequence L.
The set {L} denotes the IPIDs of the packets that keep
order with each other in the network. Thus, we remove
the packets with IPIDs in the set {IDack - L }, because
they are the packets with unusual delays that lead to
inaccurate processing delay estimates.
2) We combine {idack' tack} and {idr,tr} as a sequence,
and sort them by the first element. Then, we apply the
LIS algorithm to the sequence formed by the second
element,
increasing
subsequence L. Once again,
the packets with IPIDs
in the set {IP I Dack, r
- L} are those that experience
unusual network delays and should be removed.
I Dack,r, and obtain the longest
After removing packets with inconsistent network delays
(i.e., compared to the remaining packets), the estimated pro(cid:173)
cessing delays will be all greater than zero, as the DDT must
be longer than the ART for a source packet. Also, the error of a
processing delay estimate will be bounded by the interarrival
times of the packets surrounding pairs comprised of an ack
packet and a relay packet.
D. Accuracy Evaluation
We verify the effectiveness of the proposed processing delay
inference methods with a series of experiments. The network
setup of the experiments is identical
to that described in
Section III-B 1 and shown in Fig. 1. However, this experiment
described here is much more realistic because it takes account
of network delay variability and packet reordering. We use
a trace-driven approach to emulate the network dynamics.
The network delay of each packet is sequentially assigned
a measured ART from the set of Internet traces described
Receive~
Fig. 3.
Some common network reordering scenarios
o 100 200 300 400 500 600 700
(a) Real processing delay (ms)
I
I
I
100 200 300 400 500 600 700
(b) Real processing delay (ms)
Fig. 4.
estimates vs. the real processing delays.
The average and maximum absolute errors of processing delay
in Section IV. This introduces a great deal of randomness
into the network delay of each packet, thus simply subtracting
ART from DDT might even derive a negative processing delay
estimate.
We run the experiment for 500 flows, each of which lasts for
10 minutes. We first evaluate the performance of both methods
by the average and maximum of the absolute estimation errors,
which are computed by IReal PD - Estimated PDI. Fig. 4
shows the absolute errors of the estimated processing delays
versus the real delays. We observe that the average absolute
errors are only 4 ms and 3 ms for the basic method and the
IPID filtering method respectively, so the difference between
the two methods is not significant. However, the benefit of the
IPID filtering is significant in terms of the maximum absolute
errors, e.g., the error reduces by 20 ms with IPID filtering,
while the real processing delays are around 200 ms.
IV. LARGE-SCALE MEASUREMENT
In this section, we describe how we measure the processing
delays of relayed packets for a large set of Internet relay
hosts, after which we begin with a description of our trace
collection procedures and a summary of the traces. We then
discuss the anomalous behavior patterns identified and their
causes. The section concludes with an accuracy assessment
1-4244-2398-9/08/$20.00 ©2008 IEEE
413
DSN 2008: Chen &Lou
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
of the estimated processing delays derived from the Internet
measurements.
A. Trace Collection Methodology
"" ....
Traffic Monitor
....
Our trace collection platform is based on Skype for several
Receiver
reasons.
• Skype is enormously popular and it has a very large
installation base. There can be 50 million users online and
200 thousand super nodes in use at anyone time [8]. As
these super nodes are capable of relaying voice calls for
regular nodes, we take them our measurement subjects.
The large number of super nodes form a virtually unlim(cid:173)
ited candidate list of relay nodes for our measurement.
• Skype is robust in terms of establishing network connec(cid:173)
tions because, if a caller host cannot reach the callee host
or vice versa, Skype will find a super node to bridge the
voice transmission for the two parties.
• When a relay node currently in use becomes unavailable
to the caller or callee, Skype can always find an alternate
relay node to replace the original one. Because of these
capabilities, we can force Skype to pick an alternate super
node for relaying a VoIP call whenever necessary, without
worrying about running out of candidate relay nodes.
The trace collection mechanism comprises three commodity
PCs deployed as shown in Fig. 5. One serves as the VoIP
caller, one serves as the callee, and the third is a monitor that
collects information about the traffic of both call parties. The
collection procedures are as follows:
1) When the measurement program is initialized, we block
the caller from directly reaching the callee with a firewall
program ipfw.
2) The caller initiates a VoIP call to the callee (via the
callee's Skype name). Because of the firewall setting,
the caller will be connected to the callee host via one
of its super nodes.
3) If a VoIP call is established, we know that Skype has
found a super node to relay voice packets between the
caller and the callee.
Occasionally, after a few retries, a VoIP call cannot
be established because the caller fails to find a usable
relay node from the candidate list. In this case, our
daemon will restart the Skype program and re-attempt to
establish a VoIP call. The Skype program will retrieve
a new list of super nodes from the central server at the
startup, so further VoIP calls should be successful.
Also, we sometimes find that voice packets from the
caller to callee and vice versa are relayed through
different super nodes. In this case, we simply drop the
call, block both relay nodes, and re-dial.
4) To simulate a conversation, a WAY file comprised of all
the English recordings in the Open Speech Repository2
is played continuously for both parties during a call.
5) After a call has lasted 10 minutes, we block the current
relay node at the caller by i Pf wand terminate the call.
We then wait for 30 seconds before re-iterating the loop
from Step 2.
Fig. 5. Network setup for measuring processing delays at any relay node on
the Internet.
Fig. 6.
Geographical locations of observed relay nodes in our trace.
We ran the trace collection procedures over a two-month
period during April 9th and April 20th in 2007 and collected
1, 115 calls, which are summarized in Table I. The observed
relay nodes are spread over the world, as shown in Fig. 6. On
average, each call lasted 10 minutes and had an average packet
rate of 32 pkt/sec. The overall average ack response time was
203 ms, while the average data delivery time was 212 ms.
The difference between the ART and the DDT shows that,
on average, forwarding a relay packet takes 9 ms longer than
generating a TCP ack packet at a relay node. This observation
strongly supports our conjecture that the processing delays at
relay nodes are not negligible and are therefore worthy of our
attention.
B. PD Estimation Results
We apply the IPID filtering method to the collected traces
and compute the processing delays at each relay node. A sum(cid:173)
mary of the processing delay estimates is given in Table II. On
average, each call contains 15,739 processing delay estimates,
which corresponds to 26 samples per second. To gain a general
idea of the processing delay estimates, the average processing
delay is 5 ms, and the maximum processing delay is 239 ms,
which leads to a large maximum-to-mean ratio of 48.
C. PD Estimation Accuracy Assessment
Even though we evaluated the accuracy of our processing
delay inference scheme in Section III-D, we now provide
further accuracy checks of the estimated processing delays
of Internet relay nodes. We focus on large processing delay
estimates, as they have more impact on the application perfor(cid:173)
mance.
• Out of 21,418, 790 samples that we collected, 88% led
to positive PD estimates. This statistic manifests that a
DDT longer than an ART is not just a coincidence, but
a consequence of the delay incurred at the relay node.
• The standard deviation of PD estimates is 7 ms on
average, which is not large compared to the high PDs,
say 20 ms or even 50 ms, we focus on.
2http://www.voiptroubleshooter.com/open_speech/
1-4244-2398-9/08/$20.00 ©2008 IEEE
414
DSN 2008: Chen &Lou
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
TABLE I
SUMMARY OF COLLECTED TRACES
SUMMARY OF ESTIMATED PROCESSING DELAYS
TABLE II
# Samp.
15,739 per call
Samp. dens.
26 samp. / sec
PD (Avg / Max / SD)
5 ms / 239 ms / 7 ms
• If the PD estimates are accurate, they should be highly
correlated with the IPID differences between each pair
comprised of an ack packet and a relay packet, assuming
that the IPIDs increase at a steady rate on a host. We find
that the correlation between PDs and IPID differences
has a mean of 0.62 and a standard deviation of 0.16
on average. In addition,
the large PD samples should
be associated with large IPID differences for accurate
estimation. We find that among the top 5% of PD
estimates, on average, 48% are associated with the top
5% of IPID differences.
• If the PD estimates are accurate, they should be uncor(cid:173)
related with the ack response times. We find that the
correlation between PDs and ack response times is merely
-0.01 on average, which indicates the large PD estimates
are not simply due to shorter ack response times.
• The IPID filtering method may fail
to detect unusual
network delays if there is a low density of packets
surrounding a PD sample. To verify this possibility, we
define the maximum allowed delay time of a PD estimate,
where packet reordering cannot be detected by IPID
filtering, as a "PD error range." We find that the top 5%
of PD estimates associate with the top 65% of PD error
ranges, and the top 20% of PD estimates associate with
the top 56% of PD error ranges. Also, the correlation
coefficient between the PD estimates and PD error ranges
is only 0.08 on average. These observations strongly
suggest that PD estimates, especially large ones, are not
a consequence of low-density surrounding packets.
We use the above tests to confirm the estimation accuracy of
the processing delays in our large-scale measurement. Having
verified the validity of the estimated processing delays, we
further analyze the characteristics of processing delays at relay
nodes and their impact on VolP quality in subsequent sections.
V. PROCESSING DELAY CHARACTERIZATION
In this section, we analyze the relay node processing delays
obtained from the Internet measurement (Section IV). We
begin with a classification of the observed processing delays,
and the possible causes of each type of delay, and then
analyze the effect of packet size on processing delays. Finally,
we characterize the stability of the processing delays and
investigate the relationship between delay stability and host
activity.
A. Classification of Processing Delays
Since processing delays at a relay node are closely related
to the workload on the node, we can consider a pattern of
o
(a) Mean processing delay (ms)
10
15
5
20
100
o
500
(b) Maximum processing delay (ms)
400
200
300
o
150
(c) Maximum I mean processing delay
100
50
Fig. 7.
The distributions of (a) average processing delays (b) maximum
processing delays (C) the ratio of the maximum processing delay versus the
average processing delay in a call.
processing delays as an indication of the workload structure.
We find that the processing delay patterns can be classified
into five categories, as shown in Fig. 14. The categories and
the possible causes of each type of delay are as follows:
• Typical: This type of processing delay is the most com(cid:173)
mon. The variation of PDs is small and their magnitude
is rarely higher than 20 ms, which implies that the relay
node is lightly-loaded and the computer is not in use.
• Variable: PDs are stable most of time, but they occa(cid:173)
sionally exhibit very different behavior. For example, the
PDs of Call 561 are relatively high during the 250-450
ms period, which is likely due to a person using the
computer, or an application with a time-varying workload
is running.