of n nodes sends O(n) bits per round, minimizes latency
(∆NET is small) as message are not relayed over multiple
hops, and is practical as long as the number of nodes n is
reasonably small.
the leader of the current round,
initiates the spreading of
the information (yr, πr) by sending it to a random subset
of nodes. All nodes which have received a valid message
continue to forward the message to another subset of nodes
until all nodes are eventually informed with high probability.9
As messages are forwarded over multiple hops,
typically
logarithmically many, latency increases compared to the prior
approach (∆NET is higher). However,
the communication
complexity is signiﬁcantly reduced to (at least) O(n log n) in
total or O(log n) per node respectively. We refer to the works
of Demers et al. [21], Karp et al. [30], and the large body of
subsequent work for further details on gossip protocols.
These approaches are provided exemplary as an optimiza-
tion of the dissemination layer is not
the main focus of
this work. Our security proofs presented in Section VI are
agnostic to the selected information dissemination approach.
Any optimization, which can reliably disseminate our small
and inherently veriﬁable message (yr, πr) in every round,
is suitable. The choice of the approach largely depends on
the intended application scenario. As a general guideline, we
consider that reliable broadcast is best suited if the num-
ber of participants n is small, as it minimizes latency and
is straightforward to implement. The larger the number of
participants n, the more appropriate gossip-based approaches
become. Additionally, we note that one may actually use
all available network bandwidth in favor of a lower latency
instead of minimizing the communication costs to achieve
best possible performance in practice. Either way, an expected
higher latency ∆NET can be compensated by increasing the
∆VDF parameter, which deﬁnes the number of iterations T
for the used VDFs.
2) Gossip protocol: If n is large, one can use gossip/rumor
in our case
spreading protocols instead. Here, one node,
9For the case of RandRunner, the unlikely delivery failures a probabilistic
gossip protocol may produce are not a problem, as the transmitted values are
eventually obtained via evaluation of the VDFs after at most ∆VDF time.
8
VI. SECURITY GUARANTEES
A. Liveness
Intuitively, a distributed protocol achieves the liveness
property if an adversary cannot prevent the protocol from
making progress. A stronger form of liveness, speciﬁcally
in the context of random beacon protocols, is the property
of guaranteed output delivery [16], [42]. A protocol which
achieves this property additionally ensures that the adversary
can not even prevent the protocol from producing a fresh
output in each round. As this stronger form of liveness is
also closely related to the bias-resistance property (see Sec-
tion VI-B), it is crucial for a randomness beacon protocol
such as RandRunner which targets the continuous provision of
random numbers. As we outline in the following, our protocol
achieves liveness and its stronger form of guaranteed output
delivery, independent of the adversary’s actions and network
conditions.
Theorem 2. (Liveness & Guaranteed Output Delivery) Each
correct node which has completed some round r ≥ 0, com-
pletes round r + 1 and outputs a new random beacon Rr+1
within at most ∆VDF seconds.
Proof: Round r = 0 is completed by all nodes as soon as
the protocol setup is ﬁnished and the initial random beacon R0
becomes available. For all other rounds r ≥ 1, each node can
non-interactively derive the unique round leader (cid:96)r using the
speciﬁed leader selection algorithm and use the hash function
Hin to derive the input xr for (cid:96)r’s VDF. With the Eval
function, each node can further compute the result (yr, πr) of
the VDF within ∆VDF seconds. Finally, Hout is used to map
yr to Rr. Since both the time required to compute the leader
selection algorithm and the hash functions are negligible, each
node can output Rr within ∆VDF seconds after it completed
the previous round.
B. Bias-Resistance
Bias-resistance ensures that an adversary cannot manipulate
the produced random beacon values to its advantage. Ideally,
a protocol fully prevents that an adversary can inﬂuence
the distribution of the produced outputs. As adversaries can
even beneﬁt from just withholding produced results after they
become available to them, the strongest form of bias-resistance
can only be achieved by protocols which also guarantee that
an output is produced in every round.
Theorem 3. (Bias-Resistance) For any round r ≥ 1, the output
Rr can not be inﬂuenced in any way after the protocol setup
is completed.
Proof: As discussed in the section on liveness, the result
of round Rr is derived from Rr−1 by mapping Rr−1 to a
value xr from the input space of the leader’s VDF, computing
the leader’s VDF to obtain (yr, πr), and ﬁnally mapping yr to
Rr. The mapping steps just use (deterministic) hash functions
and are thus not prone to any manipulation by the adversary.
The VDF is computed using either the Eval or TrapdoorEval
algorithm. Due to the strong uniqueness property of the VDF
the obtained result yr is equal, no matter which of the two
algorithms is used. Also, in case an adversarial leader sends
out some invalid message (y(cid:48)r, π(cid:48)r), all correct nodes check the
values using the Verify algorithm and only accept a single
unique output per input. Consequently, also the VDF step is
deterministic and fully veriﬁable, and the full derivation step
from Rr−1 to Rr cannot be inﬂuenced by the adversary in
any way. As the setup of the protocol is executed and veriﬁed
before the ﬁrst input R0 becomes available, and each step is
shown to be deterministic, bias-resistance is ensured during
the entire execution of the protocol.
C. Public-Veriﬁability
In order to verify the correctness of a random beacon output
Rr, a (third-party) veriﬁer needs a transcript of the protocol’s
execution. A valid transcript can be provided by any correct
party and consists of
1)
2)
3)
the public parameters P of all protocol participants,
the initial random beacon value R0, and
the round’s VDF output (ys, πs) for all s ∈
{1, 2, ..., r}.
The setup of the protocol can be publicly veriﬁed, as
speciﬁed in Section V-A. The same is true for each step in
the protocol execution: As seen in the proofs for liveness
and bias-resistance, the random beacon output Rr of every
round r ≥ 1 is derived cryptographically from the previous
output Rr−1. The only primitives used are cryptographic hash
functions for mapping in- and outputs, and trapdoor VDFs with
strong uniqueness. In order (for a third party) to verify the
correctness of a protocol output Rr, given Rr−1, the involved
hash functions are recomputed and the correctness of the
VDF computation is checked by using the Verify algorithm.
Essentially, a third party just follows the protocol as described
for a participant i in Algorithm 1, leaving out the evaluation
and communication steps.
Regarding computation complexity, the veriﬁcation of each
round r requires the execution of two hash functions and one
Verify algorithm. The costs for the hash functions are negli-
gible, and also the Verify algorithm is efﬁcient as it requires
only around three exponentiations for typical parameters of the
VDF [39]. Furthermore, the veriﬁcation complexity does not
depend on the number of parties executing the protocol.
D. Unpredictability
Unpredictability describes a security guarantee which en-
sures that the adversary’s ability to predict future protocol
outputs is bounded. Depending on the particular protocol, this
bound can be absolute or probabilistic. An absolute bound
ensures that, for some ﬁxed d ≥ 1, the adversary cannot
obtain the protocol output of round r + d, when correct
nodes only know the outputs up to round r. A probabilistic
bound guarantees that the likelihood that the adversary can
successfully predict d future protocol outputs drops exponen-
tially as d increases linearly. For our protocol the achieved
bound depends on the chosen leader selection method. In the
following, we prove that the round-robin variant (RandRunner-
RR) ensures an absolute unpredictability bound of d = f · α
(see Theorem 4), whereas our stochastic simulations show
that random sampling of leaders (RandRunner-RS) guarantees
that predicting future values becomes exponentially less likely
when d increases.
9
1) The adversary’s strategy: In a leader-based protocol like
RandRunner, the adversary can always predict future random
beacon outputs to some extent. This is possible because in
every round the corresponding leader knows the output before
sending it to the other parties. In our case, an adversarial leader
can compute the round’s output by evaluating its VDF using
the trapdoor. Clearly, this is faster compared to correct nodes,
which only obtain such outputs after the adversary chooses
to broadcast them, or if they compute the VDF without the
trapdoor, which takes ∆VDF seconds. In order to extend this
advantage to multiple rounds, the adversary must withhold the
output of the VDF on purpose. In case the adversary is lucky,
and continues this strategy of withholding its outputs, the
adversary increases its advantage (i.e., the number of outputs
it knows before the correct nodes do) as long as a continuous
sequence of adversarial nodes are selected as leaders. However,
due to the randomized leader selection, long sequences of this
kind quickly become unlikely. As soon as an honest node is
selected as leader, the adversary’s advantage decreases as the
adversary is not in possession of the trapdoor for an honest
node’s VDF and consequently has to spend ∆VDF /α time to
predict one additional step. We recall that α ≥ 1 denotes the
adversary’s VDF computation speed relative to correct nodes.
An α value of 1.5, for example, means that we assume that
the adversary can compute VDFs up to 50% faster. In the
meantime, the honest nodes work on reducing the adversary
advantage. For each round in which the adversary was selected
as leader, honest nodes have to spend ∆VDF time to catch
up one step. As soon as all adversarial leaders’ outputs have
been computed (and a correct
leader is selected again) it
takes them only ∆NET seconds to compute and distribute
a new random beacon output, thus quickly diminishing the
adversary’s advantage.
2) A ﬁrst glance at RandRunner’s unpredictability bounds:
Rounds with an adversarial leader beneﬁt the adversary in
terms of its ability to predict future protocol outputs, whereas
rounds with a correct leader beneﬁt the honest nodes. This
rather natural phenomenon can be observed in our stochastic
simulations and constitutes the basis for the security proof
of Theorem 4. However, as it is so fundamental, we want
to provide further insights into why this is indeed the case:
In each round r, we either have an adversarial or correct
leader. In case the leader is adversarial, the adversary can
immediately predict the outcome Rr of round r using the
leader’s trapdoor for the evaluation of the VDF. The correct
node may be delayed by up to ∆VDF seconds before they learn
Rr if the adversary does not broadcast the round’s VDF output
and proof as speciﬁed by the protocol. Clearly, following the
strategy of withholding this information the adversary gains a
(temporary) advantage in its ability to predict future protocol
outputs. In the other case, i.e., in rounds with an honest leader,
all honest nodes advance by one round within ∆NET time,
whereas the adversary can only advance to the next round after
it received the round’s output from the leader or obtained the
result by computing the leader’s VDF without the trapdoor.
If the adversary cannot ﬁnish this computation before the
message from the leader is received, all honest nodes catch up
and all the adversary’s advantage in diminished. Otherwise, the
adversary loses some of its advantage as it takes the adversary
∆VDF /α time to proceed to the next round, whereas the honest
nodes require at most ∆NET  f + f · α .
(9)
For the case that the adversary and the honest nodes can
compute VDFs at the same speed, i.e., α = 1, this is reduced
to a standard majority assumption n > 2f. In case the
adversary can compute VDFs faster (α > 1), the fraction
of honest nodes compared to adversarial mode must increase
accordingly. In cases where ∆NET > 0 and ∆VDF (cid:29) ∆NET ,
the simpliﬁed bound provided by the above inequality for the
∆NET = 0 case closely resembles the general bound we prove
in Theorem 4. This more precise bound carefully considers
the interplay between the network delay ∆NET and the VDF
computation time ∆VDF .
3) Unpredictability for RandRunner-RR: If we use (ran-
domized) round-robin as the leader selection method, our
protocol achieves an absolute unpredictability bound of d =
f · α rounds for all conﬁgurations which satisfy the following
inequality:
(cid:18)
(cid:19)
f · α ≤ (n − f ) ·
1 − ∆NET · α
∆VDF
or, equivalently:
n ≥ f +
f · α
1 − ∆NET·α
∆VDF
.
(10)
(11)
To simplify the formulation of the following statements show-
ing this claim, we formally deﬁne two intuitive terms: the kth
period of rounds and the adversary’s advantage:
Deﬁnition 4. For every natural number k, the kth period of
rounds of the protocol is deﬁned by the n consecutive rounds
(k − 1)n + 1, (k − 1)n + 2, ..., kn.
For example if n = 5, rounds 1 to 5 form the 1st period
of rounds (k = 1), rounds 6 to 10 the 2nd period (k = 2) and
so on.
Deﬁnition 5. The adversary has advantage v ≥ 0 with respect
to round r if and only if the following two conditions hold:
1)
2)
Some correct node knows the protocol output of round
r, but no correct node knows the output of round r+1.
The adversary knows the protocol output of round
r + v, but not of round r + v + 1.
In our proof of Theorem 4, we will show by induction
on k that there is no kth period of rounds of the protocol in
which the advantage of the adversary with respect to any round
exceeds f · α. We start by showing the following Lemma 2,
which will help us to establish the induction base.
Lemma 2. For all protocol conﬁgurations which fulﬁll In-
equality 10, the following holds: If the adversary has advan-
tage 0 with respect to some round r, its advantage with respect
to the rounds r + 1, r + 2, . . . , r + n is at most f · α.
10
Proof: We start by ﬁrst considering rounds with a correct
leader. In this case, the time required for the adversary to
predict a protocol output is bounded by the VDF computation
time of ∆VDF /α, whereas the correct nodes advance to the
next round within ∆NET seconds. Since ∆NET ≤ ∆VDF /α
holds for all protocol conﬁgurations fulﬁlling Inequality 10,
the number of rounds the adversary can predict never increases
during periods with honest leaders. Consequently, to obtain an