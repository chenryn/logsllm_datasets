# Firmware SLAP: Automating Discovery of Exploitable Vulnerabilities in Firmware

**Christopher Roberts**

## About Me
- Researcher at REDLattice Inc.
- Specializes in identifying vulnerabilities in embedded systems
- Expertise in program analysis
- Active participant in Capture The Flag (CTF) competitions

## Background on Exploitable Bugs

### DARPA Cyber Grand Challenge
- **Automated Cyber Reasoning Systems:**
  - Identify vulnerabilities
  - Exploit vulnerabilities
  - Patch vulnerabilities
  - Generate full exploits and proof-of-concepts automatically

## Preventing Bugs Automatically

### Source Level Protections
- **LLVMâ€™s Clang Static Analyzers** (Conditional)
- **Compile Time Protections:**
  - Non-executable stack (Conditional)
  - Stack canaries
  - RELRO
  - _FORTIFY_SOURCE
- **Operating System Protections:**
  - Address Space Layout Randomization (ASLR)

## Exploit Mitigations in Embedded Devices
- **Exploit Mitigation Techniques:**
  - Non-executable stack
  - Stack canaries
  - RELRO
  - _FORTIFY_SOURCE
  - ASLR

## Case Study: Almond 3
- **Vulnerabilities Identified:**
  - CVE-2019-13087
  - CVE-2019-13088
  - CVE-2019-13089
  - CVE-2019-13090
  - CVE-2019-13091
  - CVE-2019-13092

## Concolic Analysis
- **Combination of Symbolic and Concrete Analysis:**
  - Highly effective for finding specific inputs to trigger code paths
  - Utilized the `angr` framework for concolic analysis and control flow graph (CFG) analysis
  - Achieved third place in the Cyber Grand Challenge using these techniques

### Building Real Inputs from Symbolic Data
- **Symbolic Variable Example:**
  - `get_user_input()`
  - Constraints: `x >= 200` and `x < 250`
  - Theorem prover outputs: `x = 231`, `x = 217`, `x = 249`, etc.

### Limitations of Concolic Analysis
- **Memory Usage:**
  - Large codebases and binaries can exhaust system resources
  - Angr's exhaustive path exploration is resource-intensive
  - Embedded firmware often exceeds typical memory limits

### Overcoming Challenges
- **Underconstraining Concolic Analysis:**
  - Treat hardware peripherals and NVRAM as symbolic variables
  - Skip initialization steps to save time and resources
  - Use Ghidra to generate function prototypes for angr analysis

## Modeling Functions
- **Finding Bugs in Binaries:**
  - Recover function prototypes using Ghidra
  - Create angr program states with symbolic arguments
  - Run analyses in parallel for efficiency

### Function Similarity
- **Binary Diffing Tools:**
  - Bindiff and diaphora
  - Heuristics include basic block count, edges, and function references
  - Tied to IDA Pro, limiting their use to one-off comparisons

### Clustering
- **Understanding Similarity:**
  - Extract features such as string references, data references, and function arguments
  - Use tools like Ghidra, Radare2, or Binary Ninja for feature extraction

### K-Means Clustering
- **Process:**
  - Extract features
  - Initialize random cluster centers
  - Categorize points based on distance (Euclidean or cosine)
  - Recalculate cluster centers
  - Repeat until convergence

### Supervised and Semi-Supervised Clustering
- **Supervised Clustering:**
  - Uses known values to cluster data
  - Ideal if all functions are labeled as vulnerable or benign
- **Semi-Supervised Clustering:**
  - Uses some known values
  - Leverages public CVE information to identify potentially vulnerable functions

### Feature Selection
- **Ghidra Headless Plugin:**
  - Dumps function information
  - Normalizes data and converts references to binary (0/1)
  - Chi-squared test to filter out irrelevant features

## Data Mining and Concolic Analysis
- **Demo:**
  - CVE-2019-13087
  - Cluster scoring (Silhouette score) to optimize cluster count
  - Separates functions into clusters based on similar tasks

## Workflow
1. **Extract Function Prototypes from Binaries**
2. **Build and Run angr Analysis Jobs**
3. **Export Data to JSON and Load into Elasticsearch and Kibana**
4. **Visualize Vulnerability Results**

## Mitigations
- **Recommendations:**
  - Implement compile-time protections
  - Enable ASLR in the operating system
  - Upgrade to more secure hardware
  - Increase automation in checking embedded systems
  - Do not blindly trust third-party embedded systems

## Releasing
- **Firmware SLAP:**
  - The tool behind the demos
  - Ghidra function dumping plugin
  - Cleaned-up Proof-of-Concepts (PoCs)
  - CVE-2019-13087 to CVE-2019-13092
- **Code Repository:**
  - [GitHub](https://github.com/ChrisTheCoolHut/Firmware_Slap)
- **Contact:**
  - @0x01_chris