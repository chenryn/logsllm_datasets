(cid:5)(cid:2)(cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:19) satisfies the tree as much as possible and 
(cid:6)(cid:2)(cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:19) forwards the partially satisfied tree to 
(cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:20).
Bloom filter in Fig 3 and finds that Attribute 190 
does not exist in the user’s attribute set, but the 
replaces the satisfied node or subtree with a value.
(cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:19)
Sender
Value = (cid:13)(cid:24)(cid:14)(cid:1)(cid:14)(cid:25)(cid:22)(cid:23)
Satisfied
1/2
Satisfied
Value
Satisfied
2/2
Satisfied
1/1
1/1
Satisfied
(cid:1)
Value
Satisfied
Satisfied
Not exist
(cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:20)finds that it can satisfy the tree. 
So it finally recovers the value at root 
node R and forwards the value with the 
ciphertext to the receiver.
The receiver 
recovers the 
plaintext using the 
received value 
and ciphertext. 
: satisfied node
: node that cannot be satisfied for sure
Receiver
(cid:11)(cid:15)(cid:16)(cid:18)(cid:12)(cid:20)
Figure 4: A transformation example: attributes set[1,100] is outsourced to Cloud1, [101, 160] to Cloud2, and [162,200] to
Cloud3.
5. SECURITY ANALYSIS AND
PERFORMANCE EVALUATION
In this section, we ﬁrst analyze the security features of
the proposed multi-cloud ABE schemes, and then explain
our implementation of the two schemes on Amazon EC2
and Microsoft Azure.
5.1 Security Analysis
Data Privacy. The sender does not want the clouds or
other unauthorized parties to access the message it sends to
a target group of users. From the decryption algorithms in
Section 3.2 and Section 4.2, we see that an adversary needs
to be able to cancel out e(g, g)αs from the ciphertext #C to
recover the plaintext message. In doing so, he needs to be
able to compute the pairing value over C from the ciphertext
and D from the transformation key, respectively, to cancel
out the secret e(g, g)rs. The security of the pairing operation
ensures that an unauthorized party without knowing the
correct r and s cannot recover this secret. Meanwhile, since
the paring value is blinded by the private key t in our scheme,
it is impossible for a cloud to recover the plaintext, even
though it has access to e(g, g)rs.
Attribute Privacy. To reduce the computational cost at
the devices, the operation of matching the attributes to the
access structure is outsourced to the cloud. As the attributes
of the user are disclosed to the cloud, it introduces a seri-
ous privacy concern, especially when the attributes contain
sensitive information about the user. One may argue that
in real-world, attributes delegated to the clouds are repre-
sented in the form of a hash value, instead of the meaningful
raw text, and thus incurs less privacy risk. Actually, a ma-
licious cloud can still launch the dictionary attack to check
every possible word against the hash value. Therefore, the
attribute privacy is considered unprotected in all the exist-
ing outsourced ABE schemes using a single cloud.
In our multi-cloud schemes, each cloud server is only in
charge of a part of attributes, so that no single cloud can
learn the complete set of attributes of a user. This signiﬁ-
cantly reduces the privacy leakage caused by the attribute-
based inference attacks due to outsourced decryption. To
formally assess the improved protection to attribute privacy
in our multi-cloud schemes, we deﬁne accuracy as a mea-
36
sure of the degree of knowledge about a user, and compare
with the outsourced ABE schemes using a single cloud. The
higher the accuracy, the more the cloud knows about a user.
Accuracy =
T P + T N
T P + F P + T N + F N
where TP, FP, TN, FN represent true positive, false posi-
tive, true negative, and false negative, respectively. Speciﬁ-
cally, TP denotes the number of attributes that the cloud is
certain that a user has, and TN denotes the number of at-
tributes that the cloud is certain that a user does not have.
From the deﬁnition, we see that the lower bound of accuracy
is 0.5, when the cloud has no knowledge about a user and
thus can only guess with a probability of 0.5.
Assume the universal attribute set is N , a user’s attribute
set is S, and the number of clouds is m. In the single-cloud
outsourced ABE, the accuracy achieves its upper bound,
(|S| + |N − S|)/|N| = 1, since the cloud clearly knows that
the user owns |S| attributes and does not own the remaining
|N − S| attributes.
In the parallel-cloud scheme, each cloud server works in-
dependently from other clouds. It knows only the attributes
outsourced to itself, i.e., |S|/m attributes. For the remain-
ing attributes, it can only guess with a probability of 0.5.
So, the accuracy is at most (|S|/m + 0.5(|N|−| S|/m))/|N|.
In a setting that |N| = 200,|S| = 100, m = 5, the accu-
racy is 0.55. Obviously, the parallel-cloud scheme improves
attribute privacy signiﬁcantly compared to the single-cloud
outsourced ABE.
In the chain-cloud scheme, for the sake of eﬃciency, each
cloud stores a Bloom ﬁlter to check if the access policy has
a chance of being satisﬁed by the subsequent clouds. This
incurs attribute privacy leakage. However, the degree of
leakage is controllable by the user by carefully selecting the
cloud and determining its position in the cloud chain. This
is because the cloud which is closer to the tail of the chain
cannot test the membership of any attribute in the clouds
that are closer to the head of the chain. Moreover, the user
can further adjust the false positives caused by the Bloom
ﬁlter by adding noise, changing its size and the number of
hash functions. In an extreme case, to prevent a cloud from
inferring the attributes in other clouds from the Bloom ﬁlter,
all positions in a Bloom ﬁlter need to be set to 1. With
these noise bits, the cloud forwards all the messages that are
not satisﬁed so far, which is actually equivalent to disabling
the Bloom ﬁlter. As a result, each cloud knows only the
attributes it holds.
To measure the accuracy, we need to set pF P , which is the
probability of false positive of the Bloom ﬁlter, and compute:
|S|
m + |N − S|∗ (1 − pF P ) + 0.5(|N|− |S|
m −| N − S|∗ (1 − pF P ))
|N|
where the ﬁst part of the numerator is the true positives of
attributes that are outsourced to the cloud, the second part
is the true negatives that the cloud gets from the Bloom
ﬁlter, and the third part is the correct guess of the remaining
attributes with the probability of 0.5.
Let us set pF P to 0.6, for example, the accuracy on the ﬁst
cloud of the chain, who knows the most information about
a user, is 0.65. We see that the cloud gets more accurate
information about a user from the chain-cloud scheme than
the parallel-cloud scheme. When the probability of false
positive is set to 1, it becomes equal to that in the parallel-
cloud scheme.
Access Policy Privacy.
In the single-cloud outsourced
ABE, a cloud server can see the complete access policy and
further infer the underlying message. In our parallel-cloud
scheme, since an access policy is divided into multiple pieces,
each cloud knows only a part of the policy. In the chain-
cloud scheme, to support the ﬂexible system structure and
the complete expressiveness of the access policy, the access
structure is distributed over the chain. Any cloud in the
chain has no knowledge about the attributes in previous
clouds, since the attributes that are satisﬁed in previous
clouds have been replaced with node values, which looks
like a random value. Therefore, a cloud that is closer to the
tail sees less about access structure. Besides, the chain is
organized in a way that more trusted clouds are placed at
the beginning positions, thus it is reasonable to assume that
allowing them to see a more access structure will not cause
severe privacy leakage.
Collusion Resistance. A major challenge to construct
a secure ABE scheme is to prevent colluding users so that
they cannot combine their attributes to satisfy an access pol-
icy, which they cannot decrypt individually. Our proposed
schemes are resistant to the colluding attacks. Similar as
the original CP-ABE design, we select a random r for each
user in the key generation algorithm, which results in dis-
tinct values for diﬀerent users when recovered by the secret
sharing scheme.
Veriﬁability. Some messages from the sender may include
critical content, such as control commands, and thus the cor-
rectness veriﬁcation of the transformation is very important.
We use the public-key signature scheme in both schemes
to enable end-to-end veriﬁcation. Since the private key for
singing the message is only known to the sender, no cloud
nor adversary can forge a valid signature.
Another challenge is to verify the completeness of the
transformation. A cloud may accidentally fail in match-
ing an access policy to the attributes, due to system errors
or intentional misbehavior. To verify the completeness, the
sender and the receiver need to share a common knowledge
about how many messages are transmitted. We adopt a
stateful veriﬁcation scheme for completeness, which main-
tains a continuously increasing counter for the messages that
37
Scheme
CP-ABE
Parallel-cloud CP-ABE E2 + 2M2
Chain-cloud CP-ABE
E2 + (m+2)M2
Complexity of decryption
(2n+1)P + 2M2
Table 1: Comparison of asymptotic complexity of decryption
operation of diﬀerent scheme.
are encrypted under a speciﬁc access policy A as the shared
knowledge. Since the counter is also signed by the sender,
the receiver can trust it to verify if any message is acciden-
tally or maliciously discarded. However, this completeness
veriﬁcation still has limitations. If a malicious cloud never
forwards a message under a speciﬁc access structure, which
should have been satisﬁed by the receiver, the receiver can-
not build the shared knowledge and know the existence of
a message without interacting with the sender. A simple
yet eﬀective countermeasure for the parallel-cloud scheme is
that the sender sends the complete access policy A instead
of a part Ai to each cloud and the cloud forwards it to the
receiver. The parallel-cloud scheme introduces redundancy
for completeness veriﬁcation. As long as at least one cloud is
honest, the receiver can verify if she matches the access pol-
icy, and determines if a malicious cloud exists. The receiver
can aﬀord such lightweight matching operation as it only
needs to compare if two attributes are identical. However,
the drawback of this countermeasure is that the cloud knows
the complete access policy, which may cause privacy leakage.
We argue that this is a reasonable price to pay, considering
the criticalness of the completeness. Moreover, completeness
veriﬁcation remains a challenging task for the chain-cloud
scheme. Since only the last cloud successfully satisfying the
access policy will forward the message to the receiver, it does
not provide redundancy as the parallel-cloud scheme does.
In fact, the completeness veriﬁcation is still a challenging
task even for the general outsourcing applications such as
searchable encryption, which involves only one cloud. To
the best of our knowledge, only accumulator [24] can pro-
vide the completeness veriﬁcation at a very high cost, and
there is no known solution for outsourced ABE scheme. We
consider completeness veriﬁcation for the chain-cloud out-
sourced ABE scheme an open problem for our future work.
5.2 Performance Evaluation
We implement the proposed parallel-cloud and chain-cloud
outsourced ABE schemes in real-world clouds, i.e., Amazon
EC2 and Microsoft Azure, and compare the performance
of our schemes with the one of the original CP-ABE [4] in
terms of asymptotic complexity and the experimental per-
formance.
Since we do not make changes to the encryption algorithm,
and the partial decryption is delegated to the cloud which is
assumed to have unlimited computation capability, we focus
on the comparison of the overhead at the recipient devices.
Note that in the implementation, a message itself is actually
encrypted using AES keys, which has ﬁxed computational
overhead. So, we only evaluate the overhead introduced by
the ABE operations.
Table 1 compares the asymptotic complexity of the three
schemes, where P denotes the paring operation, E2 denotes
the group exponentiation, M2 denotes the group multipli-
cation in G2, n denotes the number of attributes in the ac-
CP-ABE OP-CP-ABE OC-CP-ABE
2 clouds
5 clouds
1444
1444
830
732
1620
1931
Table 2: Comparison of the delay between the sending time
and the receiving time in the 2-cloud and 5-cloud settings
with 60 attributes in the access policy.
cess policy, and m denotes the number of clouds used in