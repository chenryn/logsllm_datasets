gram crash.
We have developed the binary rewriting tool that trans-
forms an Executable and Linking Format (ELF) [27] exe-
cutable ﬁle into a new one that has a different layout. Our
tool allows users to choose any values between 1 and 700K
for different offsets for static code and data randomization.
The given values are then multiplied by virtual memory
page size (usually 4096). Consequently, users can freely de-
cide the starting addresses of the code and data segments in
the entire user memory space. (Currently on a default Linux
system, user space has 3GB of virtual address space.) Our
tool also allows users to change the order of the code and
data segments. The default linker always places the data
segment after the code segment. Therefore, an attacker can
guess the target program layout once he has found certain
offset values and the starting address of the code segment.
By changing the order of code and data segments, it is more
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006difﬁcult to guess correct program layout.
Rewriting ELF executable ﬁles and making it run exactly
as before is non-trivial. There are several challenges during
the binary rewriting process, which result in the following
questions:
• What parts of an ELF executable ﬁle need rewriting?
• How to ﬁnd the correct locations of those parts and
rewrite them?
• How those parts are connected or affect each other at
run time? (How functions and variables are referred at
run time?)
The ﬁrst challenge requires that we understand the ELF
executable ﬁle format and how the linker and the loader
create the program memory layout. Currently, an ELF ex-
ecutable ﬁle can have totally 45 sections according to the
speciﬁcation. Each section has its own identiﬁer called sec-
tion header which speciﬁes the content of the section and
how to access the elements in the section. We found that
a total of 13 sections are related to program memory lay-
out. These sections include information about the symbols,
dynamic linking, relocation of code and data objects, and
other data that are critical to program execution. Table 1
presents the detailed information about the 13 sections1. We
also found that both the ELF header and the program header
need to be modiﬁed since they contain an entry point to start
the program, the name of the dynamic loader, instructions
on what portions of the ﬁle are to be loaded, and the permis-
sions of the sections of memory (for example, code segment
is read-only). Such information has to be changed once our
tool permutes the static code and data segments. (A detailed
explanation of rewriting the headers will be discussed later
in this section.)
Section Name
.got
.plt
.got.plt
.rodata
.symtab
.dynsym
.dynamic
.rel.dyn
.rel.plt
.rel.init
.rel.text
.rel.data
.rel.ﬁni
Semantics
global offset table
procedure linkage table
read-only portion of the global offset table
read-only data
symbol table
dynamic linking symbol table
dynamic linking information
relocation information for dynamic linking
relocation information for .plt segment
relocation information for .init segment
relocation information for .text segment
relocation information for .data segment
relocation information for .ﬁni segment
Section Type
SHT PROGBITS
SHT PROGBITS
SHT PROGBITS
SHT PROGBITS
SHT SYMTAB
SHT DYNSYM
SHT DYNAMIC
SHT REL
SHT REL
SHT REL
SHT REL
SHT REL
SHT REL
Table 1. ELF sections to change
The next challenge lies in the method to ﬁnd out cor-
rect locations of the elements in an ELF executable ﬁle. We
1Further information about the sections and the ELF speciﬁcations can
be obtained from a number of sources including [27, 28]
acquire this information by looking up the symbol table sec-
tion. The symbol table holds the information that the linker
needs to bind multiple object ﬁles into a ﬁnal executable
ﬁle. An entry of the symbol table holds the following in-
formation: symbol name, binding (linkage scope: local or
global), visibility (scope to other ﬁles: hidden, protected, or
internal), and the virtual address of the symbol. Since every
element has its own symbol name, we can get the virtual
address of the symbol by looking up its name in the symbol
table.
The last challenge is to ﬁnd out how elements in an
ELF ﬁle refer to each other at run time and how to ﬁnd out
such references. Searching all such references (where it is
deﬁned and where it is used) in a binary ﬁle is a daunting
task without additional information. We found that we
can obtain such references by using a linker option (-q,
or -emit-relocs). This option produces relocation sections
that include information about where the functions and
variables are used in the program. Now we can gather all
cross-reference information from the following sections:
global offset table (.got), procedure linkage table (.plt),
relocation data (.rel.data), and relocation text (.rel.text).
The global offset table includes pointers to all of the static
data in the program and the procedure linkage table stores
pointers to all of the static code objects (functions) in
the program. Therefore, these two sections provide the
information about where the functions and variables are
located in the program. Relocation sections such as .rel.text
and .rel.data provide information about where the functions
and variables are used in the program.
The rewriting process (user level permutation) comprises
two major phases: 1) Coarse-grained permutation, and 2)
Fine-grained permutation.
Coarse-grained Permutation The goal of the coarse-
grained permutation is to shift code and data segments ac-
cording to the given offset values from the user. Chang-
ing the order of code and data segments is also executed in
this phase. To achieve the goal, the rewriting process goes
through three stages: 1) ELF header rewriting, 2) Program
header rewriting, and 3) Section rewriting.
Our tool ﬁrst reads the ELF header to check if the target
ﬁle is an ELF ﬁle. This can be done by reading the ﬁrst four
bytes of the ﬁle. If the ﬁle is an ELF object ﬁle, it should in-
clude the magic number in the e ident member identifying
itself as an ELF object format ﬁle. The tool then checks the
sizes of the code and data segments to validate the given off-
set sizes from the user can ﬁt into the user memory address
space that are allowed in the Linux memory management
scheme. Retrieving the location of the string table is then
done. The string table holds information that represents all
symbols, including section names referred in the program.
Since each section header’s sh name member only holds an
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006index to the string table, we need the string table during the
entire rewriting process to look up the symbol name accord-
ing to its index. The tool then rewrites the program entry
point (e entry), which is the virtual address where the sys-
tem ﬁrst transfers control to start the program, according to
the offset value of the code segment.
Once we modiﬁed the ELF header, we need to change
two entries in the program header: p vaddr and p paddr.
They hold the virtual/physical addresses of the code and
data segments that the loader needs to know for creating the
program memory layout. Our tool modiﬁes the p vaddr and
p paddr values of the code and data segments according to
the given offset values for the code and data segments.
Section rewriting is the most important stage in the
coarse-grained permutation process to ensure a newly gen-
erated ELF ﬁle runs without any side effects (i.e., broken
references). Since each section has different semantics and
holds speciﬁc information, we need to know how to han-
dle different sections and their entries. To take the case of
symbol table section (.symtab), it holds all symbols used in
both code and data segments. Therefore, if a symbol table
entry refers a function in the code segment, we need to add
the code segment offset value to the symbol’s address value.
Similarly, if an entry refers to a global variable in the data
segment, we need to add the data segment’s offset value.
Some sections require further understanding of how an
ELF executable works during the run time to rewrite the
program correctly. According to the ELF speciﬁcation,
some sections implicitly refer to other sections during the
run time to resolve the symbol’s actual address. For exam-
ple, procedure linkage table (PLT) section contains a jump
table used when the program calls functions during the run
time. Since procedure linkage table entries store addresses
pointing to the entries in the global offset table (GOT) to
resolve actual addresses of the functions, we need to mod-
ify both PLT and GOT section entries together. Figure 1
shows the randomization example of the PLT and the GOT
sections. A PLT entry at 0x804829c in ﬁgure 1(a) points
the GOT entry that holds the jump address (0x80482a2). In
ﬁgure 1(b), the procedure linkage table entry, related global
offset table entry, and actual content of the GOT entry are
modiﬁed after the randomization.
We also need to modify relocation sections since they
hold information about where the functions and variables
are referred to in the program. Rewriting entries in the relo-
cation sections is done in a similar way ﬁgure 1.
Fine-grained Permutation The goal of ﬁne-grained per-
mutation is to randomly change the order of functions and
variables within the code and data segments. By doing so,
it brings additional protection against de-randomization at-
tacks.
Fine-grained permutation comprises three stages: 1) In-
formation Gathering, 2) Random Sequence Generation, and
(a) Before permutation
(b) After permutation
Figure 1. PLT and GOT sections permutation
3) Entry Rewriting. The following information is gath-
ered for the ﬁne-grained permutation: section size, section’s
starting address, section’s offset, total number of entries,
the original order of entries, each entry’s size, and each en-
try’s starting address. The program header provides most
of the information except for each entry’s size and the en-
try’s starting address. We can get each entry’s starting ad-
dress from the symbol table and calculate the entry’s size
by subtracting the address value of the current entry from
the address of the next entry according to the original order
of the entries. We store the gathered information in the data
structure for later use.
We need to generate a randomized integer sequence to
shufﬂe the functions and variables. To increase the ran-
domness, we generate two separate randomized integer se-
quences for each code and data segment. We exploit the ran-
dom() function and related functions provided by Linux op-
erating system to generate the random sequences. The max-
imum number in the randomized sequence for code(data)
segment is the same as the total number of entries of code
(data) segment.
Entry rewriting is the last stage of ﬁne-grained permuta-
tion. First, we rewrite the functions and variables accord-
ing to the randomized sequences in a separate memory re-
gion. We then take out the original portions of the code and
data segments from the ELF ﬁle and replace them with re-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Figure 2. Normal process memory layout
arranged ones. Finally, we modify all the cross-references
among functions and data objects. We change the relocation
sections as shown in the coarse-grained permutation. We
also modify offset values of all local function calls in the
code segment. Local functions can only be called within
the local scope (within the same ﬁle) and they are called
by relative-offset from the current program counter (PC).
For example, if the current PC is 0x8048000 and the local
function is located at 0x8049000, then the offset used in the
calling instruction is 0x1000. We also change .rodata sec-
tion that stores read-only (static) data objects, since control
ﬂow instructions (e.g., jmp or call) may refer to the values
of the objects in the .rodata section to transfer the current
control of the program.
Note that the protection scheme of ﬁne-grained permu-
tation is mainly dependent on the number of variables or
functions in the program. If a program has few functions
or global variables, the ﬁne-grained permutation does not
add strong protection on the code and data segments. How-
ever, if a program has a large number of functions and/or
variables (e.g., Apache has over 900 variables), ﬁne-grained
permutation makes it difﬁcult to guess correct locations of
functions and variables.
3.2 Kernel Level Address Permutation
We build the ASLP kernel [32] for the popular 32-bit
x86 CPU with Linux 2.4.31 kernel. Each process has its
own virtual 32-bit address space ranging sequentially from
0 byte to 4 GB as shown in Figure 2. A program code
segment starts from 0x8048000, which is approximately
128MB from the beginning of the address space. All data
variables initialized by the user are placed in the data seg-
ment, and uninitialized data is stored in the bss segment.
Shared libraries are placed in the dynamically shared ob-
jects (DSO) segments. The heap and the stack segments
grow according to the user’s request.
ASLP does not permute the top 1 GB of virtual address
space (kernel space) since moving this region would re-
quire complex access control check on each memory access
which introduces additional performance overhead. As a re-
sult, there are three regions for permutation: the user-mode
stack, brk()-managed heap, and mmap allocations.
The User Stack The location of the user stack is deter-
mined and randomized during process creation. In the early
stage of process creation, the kernel builds a data structure
to hold process arguments and environment variables. This
data structure is not yet allocated in the process memory,
but rather it is prepared for the process in the kernel space
memory. In this structure, the stack pointer is deﬁned. This
pointer is merely an offset into the ﬁrst page of the soon-to-
be stack region. We subtract a random amount between 0
and 4 KB from the stack pointer, thereby introducing ran-
domization in low-order bits.
In the later stages of process creation, the same data