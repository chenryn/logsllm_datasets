of syscalls on the resource). Hence, for each resource, C2SR
captures syscalls on the resource to reconstruct resource states
and contents. Note that C2SR assumes conservatively that any
syscalls may change the internal state.
are 4 requests (Lines 2, 4, 6, and 8) and 4 corresponding
responses (Lines 3, 5, 7, and 9 respectively). Note that each
response is dependent on itself and previous requests. For
instance, the response at line 3 depends on the request at
line 2. Moreover, while the requests at lines 5 and 9 are
identical, the responses are different because the server’s
internal state was changed by the request at line 6 which
added a new item. To this end, we devise an automaton as
shown in Fig. 7-(b). Every request is a transition condition
(Fig. 7-(d)), leading to a new resource state (Fig. 7-(c)). It
also shows content of the resource on each state.
3) Timing-Dependent: If an access result (i.e., syscall’s re-
turn) to a resource is dependent on the time of the access, it is a
timing-dependent resource. For instance, clock gettime()
returns the current time and read() on a random device (e.g.,
“/dev/random”) returns different values on every access, both
depending on the time of invocation.
• Reconstruction: As the contents of timing-dependent re-
sources do not depend on their internal states (i.e., access
history), the reconstruction approaches for random-access and
sequential-access resources are not applicable. In existing
record-and-replay approaches, timing-dependent resource ac-
cesses are faithfully replayed with its strict order. However,
syscalls on timing-dependent resources can be different across
runs because C2SR allows user-interactions and partial execu-
tion reconstruction. In other words, a reconstructed execution
may have additional/missing syscalls, making it challenging to
apply the same method as the existing techniques do.
– Our Approach: Timeline Reconstruction. C2SR recon-
structs contents of timing-dependent resources by projecting
timing-dependent resource accesses into a timeline that
is
reconstructed from the recorded execution’s timing informa-
tion (i.e., timestamps of syscalls). The intuition of timeline
reconstruction is that we record timestamps of all syscalls to
abstract the ideal timings of the syscalls, including the timing-
dependent syscalls, which we call “timeline.” Then, we project
the ideal timeline by ﬁtting (e.g., shrinking/stretching) the
timeline into the reconstructed execution context. Speciﬁcally,
it infers two timelines, a timeline for the recorded execution
and another timeline for the reconstructed execution. Then, it
projects the recorded timeline to the reconstructed timeline.
C2SR leverages the projection to identify proper values for
syscalls on timing-dependent resources.
Fig. 7. Reconstruction of sequential-access resource.
– Example: Fig. 7-(a) presents a syscall trace of a recorded
execution that connects a website, www.example.com. There
Fig. 8. Example of Timeline Reconstruction.
8
00102030407 = open('./file', );..."A"*20 = read(7,  );40 = lseek(7, 40, SEEK_SET);"B"*10 = read(7,  );12345AAAAAAAAAAAAAAAAAAAA....................BBBBBBBBBB(a) Syscall Trace(b) Reconstructed file012345678912 = connect("www.example.com",...);... = send(12, "GET /index.html ...")"<!-- index.html ..." = recv(12, ...)... = send(12, "GET /getitem.php...")"<!-- Item: 10 ..." = recv(12, ...)... = send(12, "GET /additem.php?add=1…")"<!--Success ..." = recv(12, ...)... = send(12, "GET /getitem.php...")"<!-- Item: 11 ..." = recv(12, ...)123456789(a) System calls (c) Resource State TableSATABTBCTCDTD...ABCD<!-- index.html ...<!-- Item: 10 ...<!-- Success ...<!-- Item: 11 ......(b) Reconstructed Network: AutomatonStateContents(d) State Transition Condition TableTATBTCTDsend(“GET /index.html ...”)send(“GET /getitem.php ...”)send(“GET /additem.php?add=1 ...”)send(“GET /getitem.php ...”)TransitionConditionSASBSCt1t2t3TZ0TZ1TZ2TZ3(a) RecordedExecutionSASBSCt1t2t3(c) Timeline(d) Reconstructed Execution(f) Timeline(Projected)TZ0TZ1TZ2TZ3(b) Time ΔTΔ1TΔ2TΔ3(e) Time Δ(Projected)TΔ3TΔ1TΔ2StLegendNon-timing dependent syscallTiming dependent syscallTZnTime ZoneTΔnTime Δ– Concepts: We introduce three concepts, Time ∆, Time Zone,
and Timeline, to explain how we project a timeline from a
recorded execution to a reconstructed execution.
First, Time∆ (or T∆) is a distance between a timing-
dependent syscall and its immediately previous syscall. For
example, in Fig. 8-(a), T∆1 is computed by subtracting times-
tamps between t1 and SA (the syscall right before t1).
Second, a time zone is a timespan between two consecutive
timing dependent syscalls. In Fig. 8-(c), time zones are anno-
tated inside the timeline as T Zn. Given two consecutive timing
dependent syscalls tn and tn+1, a time zone T Zn represents
the timespan between tn and tn+1. For instance, in Fig. 8-
(c), T Z1 is the timespan between the two timing dependent
syscalls t1 and t2 .
Third, a timeline is a sequence of time zones, obtained from
an execution trace by analyzing timing dependent syscalls.
Intuitively, a timeline (and time zones) provides a guideline
for which time zone a syscall belongs. For example, in Fig. 8-
(c), for t1 , the closest time zone is T Z1, if we use the starting
of the timezone to attribute. Similarly, the closest time zones
for t2 and t3 are T Z2 and T Z3, respectively.
– Timeline Projection: Given T∆ values and a timeline
computed from a recorded execution, we project the timeline
into a reconstructed execution. We ﬁrst identify non-timing
dependent syscalls. Recall
is calculated by
subtracting timestamps of ti and the ti’s immediately previous
syscall. During projection, we ﬁnd corresponding non-timing
dependent syscalls. For each of them, we apply the T∆i
computed from the recorded execution, to determine when a
time zone T Zi should start.
that each T∆i
E. C2SR Execution Reconstructor
C2SR’s runtime modules intercept syscall invocations dur-
ing the reconstructed execution. When the execution tries
to access resources that were reconstructed, C2SR emulates
the resource accesses using the reconstructed resource states,
contents, and timeline. However, it is possible to have a wrong
timeline projection. Speciﬁcally, with the current method, if
there are additional syscalls or syscalls in a reconstructed
execution happen faster than its recorded execution, our time-
line projection may fail due to additional syscalls (caused by
user-interactions and non-determinism). Hence, we propose
Timeline Projection Adjustment (TPA) to handle such failures.
Timeline Projection Adjustment (TPA). When the timeline
projection is failed (leading to a failure in execution recon-
struction), C2SR tries to adjust the timeline projection. It
aims to ﬁnd a new timeline with the adjustment that can lead
to a successful reconstruction. Speciﬁcally, for each syscall
on a timing-dependent resource in a trace, C2SR tries to
ﬁnd another appropriate time zone. Note that searching for
all appropriate timelines can be practically infeasible due
to the large searching space (e.g., with n time zones and
m syscalls on timing resources, there exist mn projections).
Hence, we start ﬁnding alternative timeline projections from
the time zones that are close to the execution failure (i.e.,
where the execution failed). Then, we search the alternatives
in a backward direction.
– Example: Fig. 8-(f) shows an example. The beginning
of T Z1 is computed by adding the timestamp of SA and
T ∆1. Similarly, T Z2 and T Z3 are obtained by computing
the timestamp of SB + T ∆2 and T ∆3, respectively.
Fig. 8-(f),
the projected timeline provides a correct
guidance for the reconstructed execution. Observe that the
syscalls between Fig. 8-(a) and Fig. 8-(d) happen in a
different speed. In particular, syscalls in the reconstructed
execution happen slower than the recorded execution. With
the timeline projection, for all
in the
reconstructed execution, their closest projected time zones
are T Z1, T Z2, and T Z3, respectively. This essentially
means that we correctly provide the same recorded values
for t1 , t2 , and t3 .
t2 , and t3
t1 ,
Summary. C2SR reconstructs contents of resources ac-
cording to the logical structure of resources (i.e., how
the resources should be accessed and what values should
be expected). We analyze all existing Linux/Unix syscalls
and categorized their target resources into three differ-
ent
types: random-access, sequential-access, and timing-
dependent. C2SR aims to reproduce consistent resource
accesses with respect to the accesses during recording. C2SR
detects failures in reconstructed executions by monitoring
accesses to undeﬁned resources, content, and early execution
termination (e.g., caused by software faults).
Fig. 9. Running example of Timeline Projection Adjustment (TPA).
We use an example of reconstructing an HTTPS webpage
loading in Firefox to show how the timeline projection adjust-
ment (TPA) works. Fig. 9-(a) and Fig. 9-(b) show syscalls
9
SASBSCtR2tR4tR5(a) RecordedExecutionSASBSCt4t5(b) Reconstructed ExecutiontR3tR1t2t3t1t1t2t3t4t5TZ10.2250.2450.7452.8553.565TZ20.7750.3050.1952.3053.015TZ32.3051.8351.3350.7751.485TZ43.0252.5552.0550.0550.765TZ53.7453.2752.7750.6550.045(e) Distances between Time Zones and Syscallson Timing Dependent Resources (Darker background indicates larger distance values)TZ0TZ1TZ2TZ3TZ4TZ5(c) Timeline(Projected)(d) Timestamps of timing dependent syscalls(t1~t5) and Time Zones (TZ1~TZ5)(Values in milliseconds) t1t2t3t4t5Ground TruthTZ1(3.58)N/A (Any)TZ2(4.13)TZ3(5.66)TZ5(7.1)First AttemptTZ1(3.58)TZ1(3.58)TZ2(4.13)TZ4(6.38)TZ5(7.1)Second AttemptTZ1(3.58)TZ1(3.58)TZ2(4.13)TZ5(7.1)TZ5(7.1)Third AttemptTZ1(3.58)TZ1(3.58)TZ2(4.13)TZ4(6.38)TZ4(6.38)Forth AttemptTZ1(3.58)TZ1(3.58)TZ2(4.13)TZ3(5.66)TZ5(7.1)(f) Timeline Projections and Adjustments(Red background indicates the root cause of the failure)LegendStNon-timing dependent syscallTiming dependent syscalltNon essential Timing dependent syscallt1t2t3t4t5TZ1TZ2TZ3TZ4TZ53.3553.8254.3256.4357.1453.584.135.666.387.1from a recorded execution and its reconstructed execution
respectively. tR1∼R5 and t1∼5 are syscalls on timing-dependent
resources (i.e., time()), and SA∼C are syscalls on non-timing-
dependent resources. To facilitate the discussion, we assume
that all tx are time() and all Sx are send() where x is an
integer. The trace is generated by an execution that establishes
an SSL connection. In the recorded execution, tR1, tR2, tR3,
and tR5 are providing seed values for the SSL session key
creation. In the reconstructed execution, t1, t3, t4, and t5 are
the corresponding syscalls for seed values. Providing correct
seed values is important, otherwise it will create a wrong
SSL session key, causing a failed execution reconstruction.
The wrong SSL key typically causes an early exit of the
reconstructed execution. t with a red border (i.e., tR4 and t2)
is a syscall that is not critical to the execution (i.e., not relevant
to the SSL keys), meaning that not providing a correct value
for it does not cause an execution failure. In our case, it is a
call from JavaScript library to measure its performance.
This example includes two scenarios: the reconstructed
execution has an additional syscall and a missing syscall com-
pared to the recorded execution. First, observe that between
SA and SB, the recorded execution has two syscalls while
the reconstructed execution has three. There is an additional
syscall t2. Second, between SB and SC, the recorded execution
has three syscalls while the reconstructed execution has two,
missing a syscall tR4. Note that those additional syscalls are
non-essential. However, due to those differences, it is chal-
lenging to ﬁnd corresponding syscalls between the recorded
and reconstructed executions. Fig. 8-(d) shows timestamps of
syscalls on timing-dependent resources in the reconstructed
execution and the projected time zones (Fig. 8-(c)). Fig. 8-(e)
presents distances between time zones and syscalls that will
be used to ﬁnd alternative timeline projections.
– Timeline Projection Adjustment Example: Fig. 8-(f) shows
a table that summarizes how C2SR ﬁnds a working alter-
native timeline projection, when a reconstructed execution
fails. Speciﬁcally,
the ﬁrst row shows the ground-truth,
meaning that with the assignments (i.e., t1=T Z1, t2= any
values, t3=T Z2, t4=T Z3, and t5=T Z5), the reconstructed
execution will succeed. However, the ﬁrst timeline projec-
tion has a different timeline projection from the ground-
truth. Speciﬁcally, the ﬁrst timeline assigns time zones that
are closest to the syscalls. Observe that T Z4 is the closest
time zone to t4 as shown in Fig. 8-(e), while the correct time
zone for t4 is T Z3. In the following paragraphs, we show
how C2SR automatically ﬁnds the correct timeline (i.e., the
correct time zone assignments).
1) First Attempt: For the initial assignment, t1, t2, t3, t4,
and t5 are assigned to the time zone T Z1, T Z1, T Z2, T Z4,
and T Z5 respectively as these time zones are the closest
ones to each of the syscalls. It fails at SC as T Z4 is assigned
to t4 while the desired time zone for t4 is T Z3.
2) Second Attempt: C2SR looks for a different timeline
from the failure in a reverse direction. Speciﬁcally, we
ﬁrst look at syscalls after the last successful syscall, SB.
Given the t4 and t5, we essentially try the second smallest
combination of distances from Fig. 8-(e). As the assignments
of t4 = T Z5 and t5 = T Z5 results in the second smallest
distance (0.7 = 0.655+0.045), we try the new timeline. The
second trial fails again.
3) Third Attempt: We ﬁnd another time zone assignments
between t4 and t5. There are two assignments that lead to the
third smallest distance. First, (t4 = T Z4, t5 = T Z4) results
in 0.82 (= 0.055+0.765) and (t4 = T Z3, t5 = T Z5) leads to
0.82 (= 0.775+0.045). We ﬁrst try t4 = T Z4 and t5 = T Z4.
However, it fails too.
4) Fourth Attempt: We try the other assignment: t4 = T Z3
and t5 = T Z5. This trial is successful.
Summary. Timeline Projection Adjustment (TPA) handles
failed reconstructed executions due to incorrect
timeline
projections. It systematically searches alternative timelines
that can lead to a successful reconstruction based on the
distances between projected time zones and syscalls on
timing dependent resources.
V. EVALUATION
Our prototype of C2SR, including recorder and resource
reconstructor, is written in C++ (11,045 SLOC). We leverage
the LD PRELOAD environment variable to intercept
library
calls that invoke syscalls. Our resource reconstructor is also
written in C++ (2,871 SLOC). Experiments are on a machine
with Intel i7-4770 3.4GHz CPU (4 cores), 16GB RAM, 512GB
SSD, and LinuxMint 19.2 (64-bit).
Program Selection. We use a total of 26 diverse programs to
evaluate different aspects of C2SR. For each experiment, we
choose a different set of programs. We explain how and why
we choose the programs as follows.
1) For Runtime Overhead of Recorder (§ V-A): We use
SPEC CPU2017 Integer (10 programs), 5 web browsers (Fire-
fox, Arora, Midori, Qupzilla, and Opera) for running two
JS/DOM benchmarks (Octane [78] and Speedometer [90]), and
three web servers (Apache, Nginx, Lighttpd) to measure the
runtime performance of serving HTTP(s) requests. We choose
SPEC CPU2017 as it is the standard performance evaluation
suite, while we are aware of that they do not invoke syscalls
extensively, resulting in favorable (and possibly misleading)
evaluation results. We omit SPEC CPU2017 Floating Point
benchmarks due to the same reason as they have almost no
syscalls. Instead, we run more realistic workloads: JS/DOM
benchmarks on web browsers and 3 popular web servers that
represent server-side applications. Moreover, we use 8 client
applications including web browsers, email client, and mes-
sengers to measure the performance during the initialization
of the processes (when programs invoke syscall intensively).
2) For Space Overhead of Recorder (§ V-B): To understand
space overhead of C2SR in realistic settings, we choose
6 representative programs that are popular and commonly
targeted by advanced cyberattackers (e.g., common targets
for phishing). It includes a web browser (Firefox), an email
client (Thunderbirds), instant messengers (Skype and Yakyak),
and web servers (Apache and nginx). We did not use SPEC
CPU2017 as they do not invoke syscalls extensively, leading
to a low space overhead. Other programs (e.g., other browsers
and FTP/IRC clients and servers) are not selected as they incur
less space overhead than the chosen programs.
3) For Efﬁciency of Partial Execution Reconstruction
(§ V-C): We use 5 web browsers and 5 server programs (3
10
web servers, 1 IRC server, and 1 FTP server). We select
web browsers as they are long-running programs and support
concurrent autonomous tasks (e.g., browser tabs) that C2SR
primarily targets. Server programs are long-running programs
where each request is independent from others.
Runtime Overhead of the Post-processing. In § III, C2SR
has an ofﬂine post-processing phase. Note that it merely slices
the traces based on resources, and it is not a particularly
expensive process, with costs growing linearly with the trace
size. It is a one-time effort for each recording. During our
evaluation, no post-processing tasks take more than a minute.
A. Runtime Overhead
SPEC CPU2017. Fig. 10 shows normalized runtime overhead
on SPEC CPU2017 Integer programs for recording and execu-
tion reconstruction with the reference inputs. The ﬁrst 10 bar
graphs present recording overhead while the last 10 bar graphs