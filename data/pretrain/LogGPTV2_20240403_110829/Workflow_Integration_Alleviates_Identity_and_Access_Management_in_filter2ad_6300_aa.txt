title:Workflow Integration Alleviates Identity and Access Management in
Serverless Computing
author:Arnav Sankaran and
Pubali Datta and
Adam Bates
Workflow Integration Alleviates
Identity and Access Management in Serverless Computing
Arnav Sankaran
University
of Illinois at Urbana-Champaign
PI:EMAIL
Pubali Datta
University
Adam Bates
University
of Illinois at Urbana-Champaign
of Illinois at Urbana-Champaign
PI:EMAIL
PI:EMAIL
ABSTRACT
As serverless computing continues to revolutionize the design and
deployment of web services, it has become an increasingly attractive
target to attackers. These adversaries are developing novel tactics for
circumventing the ephemeral nature of serverless functions, exploit-
ing container reuse optimizations and achieving lateral movement
by “living off the land” provided by legitimate serverless workflows.
Unfortunately, the traditional security controls currently offered by
cloud providers are inadequate to counter these new threats.
In this work, we propose will.iam,1 a workflow-aware access
control model and reference monitor that satisfies the functional
requirements of the serverless computing paradigm. will.iam en-
codes the protection state of a serverless application as a permissions
graph that describes the permissible transitions of its workflows, as-
sociating web requests with a permissions set at the point of ingress
according to a graph-based labeling state. By proactively enforcing
the permissions requirementsof downstream workflow components,
will.iam is able to avoid the costs of partially processing unautho-
rizedrequestsandreducetheattacksurfaceoftheapplication.Weim-
plement the will.iam framework in Go and evaluate its performance
ascomparedtorecentrelatedworkagainstthewell-establishedNord-
strom “Hello, Retail!” application. We demonstrate that will.iam im-
poses minimal burden to requests, averaging 0.51% overhead across
representative workflows, but dramatically improves performance
when handling unauthorized requests (e.g., DDoS attacks) as com-
pared to past solutions. will.iam thus demonstrates an effective and
practical alternative for authorization in the serverless paradigm.
CCS CONCEPTS
• Security and privacy → Distributed systems security; Infor-
mation flow control; Access control.
KEYWORDS
Serverless Computing; Access Control; Information Flow Control
1will.iam is short for workflow integration alleviates identity and access management.
IAM is the role-based access control system offered by Amazon Web Services.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427665
ACM Reference Format:
Arnav Sankaran, Pubali Datta, and Adam Bates. 2020. Workflow Integra-
tion Alleviates Identity and Access Management in Serverless Comput-
ing. In Annual Computer Security Applications Conference (ACSAC 2020),
December 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3427228.3427665
1 INTRODUCTION
Projected to exceed $8 billion per year by 2021 [7], serverless com-
puting has experienced rapid growth and is expected to become
the dominant pattern for cloud computing [63]. Also known by
Function-as-a-Service (FaaS), serverless computing abstracts away
the need to manage not only physical hardware but also the need
to manage the life cycle of virtual machines; in serverless, the cus-
tomer is no longer responsible for launching or tearing down virtual
machines, provisioning virtual computer clusters, or management
of software below the application level. This is achieved through the
decomposition of applications into small discrete functions, stateless
microservices that can be orchestrated into high-level workflows. As
a result, developers can focus on the core logic of their application,
eliminating the burdens of infrastructure management [73] while
enabling rapid prototyping of services [12].
While serverless is often credited as being intrinsically more se-
cure than prior cloud paradigms [83], in actuality most common
cloud and web insecurities continue to fester [15]. A large-scale anal-
ysis of open-source serverless projects revealed that upwards of 20%
containedcriticalvulnerabilitiesormisconfigurations[1].Numerous
event injection techniques have been demonstrated [2, 6, 10, 71], and
challengesrelatedtocross-tenantside-channelsremainintheecosys-
tem [76, 92]. Even though these vulnerabilities were still present,
for a time it was thought that it would be far more difficult to ex-
ploit them due to the stateless and ephemeral nature of serverless
functions. Unfortunately, attackers have proven more than capable
of surmounting these obstacles. For example, they have exploited
the ubiquitously employed “warm container” reuse optimization,
the practice of caching the containers of recently invoked functions
in server memory, to transport toolkits into the application and
establish quasi-persistence [64].
The primary mechanisms made available by cloud providers
for mitigating these threats are role-based access controls (RBAC),
known as Identity and Access Management (IAM) roles in the pop-
ular Amazon Lambda service [38]. Using IAM, cloud customers can
statically assign each function to a role that is associated with a set
of permissions for accessing other functions, datastores, or the open
Internet. Accepting the reality that exploitable vulnerabilities will
continue to exist in the serverless landscape, strict IAM roles can be
configured such that functions are restricted to communicating only
ACSAC 2020, December 7–11, 2020, Austin, USA
Arnav Sankaran, Pubali Datta, and Adam Bates
with those components necessary to fulfill their task, thus reducing
overprivilege. Unfortunately, there is already ample evidence that
staticRBACaloneisinsufficient;notonlyareIAMrolesoftenmiscon-
figured [4, 19], but even when correctly defined, attackers are able to
leveragelegitimatefunctiontransitionstomovelaterallythroughthe
application in advancement of their goals [10, 64, 71]. Fundamentally,
this attack is the result of a mismatch of abstractions – application
developers express program logic in the form of inter-function work-
flows, yet authorization is performed only within the context of
individual function transitions. As a result, attack opportunities are
not bound by the end-to-end workflows specified by the developer.
In this work, we reconceptualize IAM roles as dynamic, efficient,
and workflow-sensitive. We present will.iam, an access control
framework that, rather than (or in addition to) assigning static per-
missions to functions, performs authentication and role assignment
to web requests at their point of ingress. Carrying this role assign-
ment forward from function to function allows will.iam to bound
attackers to the permissions associated with a legitimate workflow,
dramatically reducing the attack surface of the serverless applica-
tion. will.iam security policies are defined as a directed graph rep-
resentation of the application’s workflows, with the terminal nodes
of the graph encoding permission requirements for traversing the
workflow. As end-to-end determination of permissions for an entire
workflow can frequently be pre-computed at the point of ingress,
we extend will.iam with a proactive authorization mechanism that
rejects requests that cannot satisfy downstream permission require-
ments. Thus, will.iam provides an intuitive extension to IAM-style
RBAC that satisfies the unique functional requirements of serverless
application security.
In this work, we make the following contributions:
• Workflow-sensitive Access Control. We present the design of a
novel access control model for serverless computing that me-
diates inter-function information flow as requests are processed.
Our approach follows the same design principles as serverless
applications, while simultaneously integrating with the notion of
IAM-style role-based access controls, thus avoiding the need for a
dramatic reconceptualization of security on cloud platforms.
• The will.iam framework. We implement our access control model
for the popular OpenFaaS serverless platform.2 As a case study
on the efficacy of our approach, we define and analyze a complete
security policy for the canonical “Hello, Retail!” reference appli-
cation [88]. Our code, policies, and datasets will be made publicly
available upon publication.
• Performance Evaluation. We rigorously evaluate the performance
of will.iam as compared to vanilla OpenFaaS as well as two base-
line access control systems from related work (Trapeze [36], Valve
[47]). We demonstrate that will.iam has much less overhead
compared to Trapeze and Valve, with an average workload over-
head of just 0.51% compared to vanilla OpenFaaS; further, our
performance optimization for proactive authorization of requests
reduces wasted computation by 22% when considering a traffic
profile comprised of 30% unauthorized requests.
2 BACKGROUND
Commercialized cloud computing began in 2006 with Amazon first
releasing Elastic Compute Cloud (EC2) [37] and provided enterprises
access to unlimited backend infrastructure without the burden of
managing it. More recently, serverless computing platforms have
emerged to further abstract away the need to manage the software
stack (virtual machine provisioning, operating system and network-
ing layer patches and upgrades) running below the application layer.
Thus, serverless computing has enabled cloud tenants to focus on
developing the business logic of their applications while the cloud
provider handles load-balancing, auto-scaling of resources and other
management tasks. The tenants are billed according to the resource
usage (CPU, memory and network) when their functions are exe-
cuted.
Serverless application developers implement the business logic as
a set of functions that can be chained together to form task-specific
workflows. These functions often read or write private data stored
in the cloud infrastructure in order to achieve their operational goal
(e.g. serverless data analytics applications [86]). This necessitates
a robust access control mechanism in the serverless platforms to
determine if a function invocation request is properly authenticated
and has the required permissions to access a piece of data. Cloud
platforms offer access control techniques [44, 85] as part of cloud
services (e.g., AWS Identity and Access Management (IAM) [25])
provided by them. Cloud providers generally implement traditional
role-based access control (RBAC) [49] and attribute-based access
control (ABAC) [58] methods in their IAM services [31].3 In server-
less platforms, roles are attached to the functions allowing them to
access other cloud resources (e.g., invoke other functions, access
datastores) according to the access policy and permissions attached
to the role. The roles and permissions should be defined to grant the
least privilege to a function required for its operations.
For a traditional monolithic application deployed on the cloud,
a single IAM authentication per request suffices to verify the entire
application’s adherence to the access policy. However, to enforce the
same level of security in a serverless setting, each component func-
tion of the serverless application will need to perform authentication
and authorization for every request. This quickly becomes infeasible
in a serverless scenario, where a high throughput production-level
application consists of numerous atomic functions each of them re-
quiring various permissions to perform specific data operations. This
leads to increased complexity of IAM policies, additional network
latency for authentication, and high billing cost [33] for the cloud
tenants. The resulting complex policies are often festered with mis-
configurations [4, 19] and create greater opportunity for attackers.
Moreover, attackers can even leverage legitimate function transi-
tions to move laterally through the application [10, 64, 71] since each
function activation is authorized in isolation, without considering
the historic context (i.e. the series of function activations and per-
missions acquired in the workflow starting at the point of entry) of
the current request. Currently, the static function-level IAM policies
in serverless platforms do not offer an ideal security-performance
trade-off for the tenants.
2https://www.openfaas.com/
3For the remainder of this paper, we will use IAM as a generic term to describe
role-based access controls assigned to functions in serverless clouds.
Workflow Integration Alleviates Identity and Access Management in Serverless Computing
ACSAC 2020, December 7–11, 2020, Austin, USA
Figure 1: A reference architecture of serverless application Hello, Retail!.
Workflow
f1(WD1)
f2(WD3)→
f3(RD1)→f4(WD1)→f5
f6(WD2)→f7 →f8(WD1)
f9 →f10(RD2 ;RD3)→
f11(RD3)→f12(RD4)→f13
f10(RD2 ;RD3)
Table 1: Summary of primary Hello, Retail! workflows, as
presented in Figure 1.
Description
Registration of a
photographer in photographer registry
Creation of a product in
the catalog and assign a photographer
to submit a photo of the product
Receive photo from photographer
and update assignment status
Purchasing
a product listed in the catalog
Catalog browsing
3 MOTIVATION
In this section we describe the limitations of existing IAM policies
in the context of serverless computing with an example application,
Hello, Retail! [88], an open-source event-driven retail application
from Nordstrom Technology. A simplified conceptual architectural
diagram of Hello, Retail! is shown in Figure 1.
The application consists of two types of resources: serverless
functions and datastores. The functions can be triggered by explicit
HTTP requests to an API gateway, other functions, or data store
events (e.g., creation of a new object in a datastore). The functions
which expose public REST endpoints through the API gateway are
designated Application Ingress Points and can be invoked through
HTTP requests originating from the open Internet. The other func-
tions should only be invoked from another function or a data store
event. For example, f1, f2, f6, f9 and f10 are the application ingress
points in this scenario. The internal function f3 can only be executed
with necessary permissions, which are associated with the IAM role
assigned to f2, and thus cannot be invoked directly through HTTP.
Function f7 is invoked by new object creation in datastore D2 and
is the only function in Figure 1 that has a datastore event trigger.
The functions communicate with datastores D1, D2, D3 and D4 with
appropriate permissions in order to complete their tasks.
The ingress points mark the beginning of different workflows in
the application. The five primary workflows are described in Table
1. The → denotes a function invocation. Required datastore commu-