实验中根因定位失败的几次环境扰动不会影响本文提出的韧性风险识别和分析方法.
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1251
• 混沌实验数据集中性能指标的数量以及数据条数是否会对韧性风险分析方法产生影响?
为了分析混沌实验数据集中性能指标的数量及数据条数对韧性风险分析方法的影响,实验中分别统计了
在较少性能指标(20个)情况下和以50个性能指标为增量,在50/100/150个性能指标情况下的系统资源消耗,并
分别以25/50/250的梯度递增地统计了不同数据条数下韧性风险分析方法的系统资源消耗.表12为不同性能指
标和数据条数下韧性风险分析方法对系统上的资源消耗,从表12中可以看出:本文提出的韧性风险分析方法能
够在较短的时间内分析出混沌实验数据集中的因果关系链,且消耗较少的 CPU 和内存资源.相对于数据条数,
混沌实验数据集中的性能指标数量对分析所花费时间有着更明显的影响.如何在保证算法准确度的同时降低
计算时间,将是本文的后续研究目标之一.
Table 12 System resource consumption of the resilience risk analysis method under different data length
表12 不同数据量下韧性风险分析方法的系统资源消耗
性能指标数量 20 50 100 150
资源消耗
数据条数 Time CPU MEM Time CPU MEM Time CPU MEM Time CPU MEM
(s) (%) (MB) (s) (%) (MB) (s) (%) (MB) (s) (%) (MB)
25 4.36 7.92 17.92 10.46 7.94 34.19 15.18 7.39 33.86 34.01 9.56 37.12
50 4.38 7.72 18.71 12.55 8.89 36.65 25.41 7.36 35.77 35.52 8.41 36.00
100 4.50 7.49 18.93 17.42 7.42 35.47 32.61 7.49 37.68 44.05 7.26 38.47
150 4.36 8.99 19.17 16.71 7.53 39.45 31.07 8.72 38.51 46.52 7.23 41.46
200 4.49 7.02 19.06 17.79 7.45 38.09 32.71 7.92 40.56 46.85 8.48 42.99
250 4.38 7.67 19.66 18.81 8.09 37.90 35.74 8.95 39.73 50.42 8.12 45.59
500 4.5 7.44 19.68 20.11 8.92 39.90 35.69 8.48 41.43 53.31 8.02 46.06
750 4.40 7.99 20.12 20.43 8.01 39.84 37.88 8.43 44.33 55.03 7.98 46.09
1 000 4.40 7.13 21.96 20.53 8.37 40.94 40.95 7.21 43.40 55.19 8.58 45.02
1 500 4.43 7.23 21.89 21.05 8.16 44.23 43.39 8.78 44.99 77.79 7.34 46.29
2 000 4.45 7.37 22.07 27.19 8.85 42.27 46.09 8.45 46.83 67.01 8.47 45.07
图 17 为不同数据条数下,韧性风险影响链路的 Precision 和 Recall 值(k=1).当混沌实验数据集的数据量较
小时,由于在因果关系图的构建过程中识别到的因果关系边数量变少,导致了链路的准确度降低;而当数据集的
数据条数达到一定数量(本案例中为200条数据)后,链路的准确度能保持在80%以上并处于一个相对稳定的状
态.由此可见,本文提出的韧性风险分析方法仅需相对较少的数据条数即可保证算法的准确度.
Fig.17 Influence of data length on resilience risk analysis accuracy
图17 数据条数对韧性风险分析方法准确度的影响
5.2 总 结
本文着手于解决微服务架构系统中韧性风险的度量、识别以及分析问题.基于MRMM模型,并结合混沌工
程的实践方法,本文提出了针对微服务架构系统的韧性风险识别方法,以识别出严重影响系统服务性能的韧性
风险,大幅地减少了韧性风险识别过程中的人力与时间成本.对识别出的韧性风险,本文提出了基于因果搜索算
1252 Journal of Software 软件学报 Vol.32, No.5, May 2021
法的分析方法,最终得到由系统性能指标构成的韧性风险影响链路以供运维人员参考.最后,本文在开源微服务
系统 Sock-Shop 上的案例研究也证明了本文提出的韧性风险识别和分析方法能够在微服务架构系统中识别出
潜在的韧性风险,并得到具有一定准确性的韧性风险影响链路.
本文需要进一步开展相关研究工作包括以下几个方面.
(1) 混沌实验设计的优化.目前,在混沌实验中引入系统环境扰动纯粹以随机的方式生成.而在本文的案
例研究中可以看出,这种方式生成的系统环境扰动是韧性风险的概率并不是很高.如何利用前一次系
统迭代中混沌实验的结果以及系统实际运行过程中发现的韧性风险,改进混沌实验中系统环境扰动
的生成方式以提高发现韧性风险的概率?如何有效地组合多种不同的系统环境扰动,观察多种扰动对
微服务架构系统的共同作用?均是本文后续研究中着手解决的问题.
(2) 韧性风险分析方法的优化.本文中分析得到的因果关系分析链路是以系统性能指标的上升下降变化
作为分析基础.而在实际的系统服务降级过程中,异常事件、人为操作等均会导致系统性能指标的变
化.如何有效地将异常检测、系统日志挖掘等技术融入韧性风险分析过程中,是本文在提出韧性风险
分析方法之后的研究目标.此外,现已有一些文献[79]使用系统挖掘工具(如 sysdig),在避免额外开发的
情况下捕获服务之间的调用关系,如何在微服务架构系统中挖掘服务调用关系并利用其优化韧性风
险分析方法的分析效率和准确度,也是本文待研究的问题之一.
References:
[1] Lewis J, Fowler M. Microservices: A definition of this new architectural term. 2014. https://martinfowler.com/articles/
microservices.html
[2] Balalaie A, Heydarnoori A, Jamshidi P. Microservices architecture enables devops: Migration to a cloud-native architecture. IEEE
Software, 2016,33(3):42−52. [doi: 10.1109/MS.2016.64]
[3] Mauro T. Adopting microservices at netflix: Lessons for architectural design. 2015. https://www.nginx.com/blog/adopting-
microservices-at-netflix-lessons-for-team-and-process-design/
[4] Ihde S. InfoQ—From a monolith to microservices + REST: The evolution of LinkedIn’s service architecture. 2015. https://www.
infoq.com/presentations/linkedin-microservices-urn/
[5] Calçado P. Building products at soundcloud—Part III: Microservices in scala and finagle. SoundCloud Limited, 2014. https://
developers.soundcloud.com/blog/building-products-at-soundcloud-part-3-microservices-in-scala-and-finagle
[6] Dragoni N, Giallorenzo S, Lafuente AL, et al. Microservices: Yesterday, today, and tomorrow. In: Proc. of the Present and Ulterior
Software Engineering. Cham: Springer-Verlag, 2017. 195−216. [doi: 10.1007/978-3-319-67425-4\_12]
[7] Gunawi HS, Hao M, Suminto RO, et al. Why does the cloud stop computing? Lessons from hundreds of service outages. In: Proc.
of the 7th ACM Symp. on Cloud Computing. New York: ACM, 2016. 1−16. [doi: 10.1145/2987550.2987583]
[8] ISO/IEC 25010: 2011, Systems and Software Engineering—Systems and Software Quality Requirements and Evaluation
(SQuaRE)—System and Software Quality Models. Int’l Standards Organization, 2011. https://www.iso.org/standard/35733.html
[9] Gunawi HS, Hao M, Leesatapornwongsa T, et al. What bugs live in the cloud? A study of 3000+ issues in cloud systems. In: Proc.
of the ACM Symp. on Cloud Computing. New York: ACM, 2014. 7:1−7:14. [doi: 10.1145/2670979.2670986]
[10] Newman S. Building Microservices: Designing Fine-grained Systems. New York: O’Reilly Media, Inc., 2015.
[11] Nadareishvili I, Mitra R, McLarty M, et al. Microservice Architecture: Aligning Principles, Practices, and Culture. New York:
O’Reilly Media, Inc., 2016.
[12] Nygard MT. Release It! Design and Deploy Production-ready Software. 2nd ed., United States: Pragmatic Bookshelf, 2018.
[13] Windle G, Bennett KM, Noyes J. A methodological review of resilience measurement scales. Health and quality of life outcomes,
2011,9(1):Article No.8. [doi: 10.1186/1477-7525-9-8]
[14] Yin K, Du Q, Wang W, et al. On representing resilience requirements of microservice architecture systems. arXiv Preprint arXiv:
1909.13096, 2019.
[15] Boehm B. Software risk management. In: Proc. of the European Software Engineering Conf. Berlin, Heidelberg: Springer-Verlag,
1989. 1−19. [doi: 10.1007/3-540-51635-2_29]
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1253
[16] Holling CS. Resilience and stability of ecological systems. Annual Review of Ecology and Systematics, 1973,4(1):1−23. [doi: 10.
1146/annurev.es.04.110173.000245]
[17] Hosseini S, Barker K, Ramirez-Marquez JE. A review of definitions and measures of system resilience. Reliability Engineering &
System Safety, 2016,145(2016):47−61. [doi: 10.1016/j.ress.2015.08.006]
[18] Xue X, Wang L, Yang RJ. Exploring the science of resilience: Critical review and bibliometric analysis. Natural Hazards, 2018,
90(1):477−510. [doi: 10.1007/s11069-017-3040-y]
[19] Laprie JC. Dependability: Basic Concepts and Terminology. Vienna: Springer-Verlag, 1992. [doi: 10.1007/978-3-7091-9170-5]
[20] Laprie JC. From dependability to resilience. In: Proc. of the 38th IEEE/IFIP Int’l Conf. on Dependable Systems and Networks. Los
Alamitos: IEEE Computer Society, 2008. G8−G9.
[21] Wolter K, Avritzer A, Vieira M, Van Moorsel A, eds. Resilience Assessment and Evaluation of Computing Systems. Berlin,
London: Springer-Verlag, 2012. [doi: 10.1007/978-3-642-29032-9]
[22] Trivedi KS, Kim DS, Ghosh R. Resilience in computer systems and networks. In: Proc. of the 2009 Int’l Conf. on Computer-aided
Design. New York: ACM, 2009. 74−77. [doi: 10.1145/1687399.1687415]
[23] Bishop M, Carvalho M, Ford R, et al. Resilience is more than availability. In: Proc. of the 2011 New Security Paradigms Workshop.
New York: ACM, 2011. 95−104. [doi: 10.1145/2073276.2073286]
[24] Diez O, Silva A. Resilience of cloud computing in critical systems. Quality and Reliability Engineering Int’l,
2014,30(3):397−412. [doi: 10.1002/qre.1579]
[25] Wolff E. Microservices: Flexible Software Architecture. Boston: Addison-Wesley Professional, 2016.
[26] Toffetti G, Brunner S, Blöchlinger M, et al. An architecture for self-managing microservices. In: Proc. of the 1st Int’l Workshop on
Automated Incident Management in Cloud. New York: ACM, 2015. 19−24. [doi: 10.1145/2747470.2747474]
[27] Rusek M, Dwornicki G, Orłowski A. A decentralized system for load balancing of containerized microservices in the cloud. In:
Proc. of the Int’l Conf. on Systems Science. Cham: Springer-Verlag, 2016. 142−152. [doi: 10.1007/978-3-319-48944-5_14]
[28] Soenen T, Tavernier W, Colle D, et al. Optimising microservice-based reliable NFV management & orchestration architectures. In:
Proc. of the 2017 9th Int’l Workshop on Resilient Networks Design and Modeling (RNDM). Piscataway: IEEE, 2017. 1−7. [doi: