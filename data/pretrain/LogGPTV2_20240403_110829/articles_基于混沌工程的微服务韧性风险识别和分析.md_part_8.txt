### 优化后的文本

#### 摘要
实验中根因定位失败的几次环境扰动不会影响本文提出的韧性风险识别和分析方法。本文基于混沌工程，提出了一种微服务架构系统的韧性风险识别和分析方法，旨在减少韧性风险识别过程中的人力与时间成本，并提供系统性能指标构成的韧性风险影响链路以供运维人员参考。

#### 引言
为了评估混沌实验数据集中性能指标的数量及数据条数对韧性风险分析方法的影响，本研究进行了详细的实验。实验分别统计了在不同数量的性能指标（20、50、100、150个）和不同数据条数（25、50、250等）情况下的系统资源消耗。表12展示了不同性能指标和数据条数下韧性风险分析方法对系统资源的消耗情况。

**表12 不同数据量下韧性风险分析方法的系统资源消耗**

| 性能指标数量 | 20     | 50      | 100      | 150      |
|--------------|--------|---------|----------|----------|
| 数据条数     | Time (s) | CPU (%) | MEM (MB) | Time (s) | CPU (%) | MEM (MB) | Time (s) | CPU (%) | MEM (MB) | Time (s) | CPU (%) | MEM (MB) |
| 25           | 4.36   | 7.92    | 17.92    | 10.46    | 7.94    | 34.19    | 15.18    | 7.39    | 33.86    | 34.01    | 9.56    | 37.12    |
| 50           | 4.38   | 7.72    | 18.71    | 12.55    | 8.89    | 36.65    | 25.41    | 7.36    | 35.77    | 35.52    | 8.41    | 36.00    |
| 100          | 4.50   | 7.49    | 18.93    | 17.42    | 7.42    | 35.47    | 32.61    | 7.49    | 37.68    | 44.05    | 7.26    | 38.47    |
| 150          | 4.36   | 8.99    | 19.17    | 16.71    | 7.53    | 39.45    | 31.07    | 8.72    | 38.51    | 46.52    | 7.23    | 41.46    |
| 200          | 4.49   | 7.02    | 19.06    | 17.79    | 7.45    | 38.09    | 32.71    | 7.92    | 40.56    | 46.85    | 8.48    | 42.99    |
| 250          | 4.38   | 7.67    | 19.66    | 18.81    | 8.09    | 37.90    | 35.74    | 8.95    | 39.73    | 50.42    | 8.12    | 45.59    |
| 500          | 4.50   | 7.44    | 19.68    | 20.11    | 8.92    | 39.90    | 35.69    | 8.48    | 41.43    | 53.31    | 8.02    | 46.06    |
| 750          | 4.40   | 7.99    | 20.12    | 20.43    | 8.01    | 39.84    | 37.88    | 8.43    | 44.33    | 55.03    | 7.98    | 46.09    |
| 1000         | 4.40   | 7.13    | 21.96    | 20.53    | 8.37    | 40.94    | 40.95    | 7.21    | 43.40    | 55.19    | 8.58    | 45.02    |
| 1500         | 4.43   | 7.23    | 21.89    | 21.05    | 8.16    | 44.23    | 43.39    | 8.78    | 44.99    | 77.79    | 7.34    | 46.29    |
| 2000         | 4.45   | 7.37    | 22.07    | 27.19    | 8.85    | 42.27    | 46.09    | 8.45    | 46.83    | 67.01    | 8.47    | 45.07    |

从表12可以看出，本文提出的韧性风险分析方法能够在较短时间内分析出混沌实验数据集中的因果关系链，并且消耗较少的CPU和内存资源。相对于数据条数，性能指标数量对分析所花费的时间有着更明显的影响。如何在保证算法准确度的同时降低计算时间，将是后续研究的目标之一。

**图17 数据条数对韧性风险分析方法准确度的影响**

当混沌实验数据集的数据量较小时，由于在因果关系图构建过程中识别到的因果关系边数量减少，导致链路的准确度降低。然而，当数据条数达到一定数量（例如200条数据）后，链路的准确度能够保持在80%以上并处于相对稳定状态。这表明本文提出的韧性风险分析方法仅需相对较少的数据条数即可保证算法的准确度。

#### 结论
本文提出了针对微服务架构系统的韧性风险识别和分析方法，通过基于MRMM模型和混沌工程实践，显著减少了韧性风险识别过程中的人力与时间成本。实验结果表明，该方法能够在开源微服务系统Sock-Shop上有效识别潜在的韧性风险，并得到具有一定准确性的韧性风险影响链路。

#### 未来工作
本文需要进一步开展的相关研究工作包括：
1. **混沌实验设计的优化**：目前，混沌实验中引入系统环境扰动的方式是随机生成的。如何利用前一次系统迭代中混沌实验的结果以及系统实际运行过程中发现的韧性风险，改进混沌实验中系统环境扰动的生成方式以提高发现韧性风险的概率？如何有效地组合多种不同的系统环境扰动，观察多种扰动对微服务架构系统的共同作用？
2. **韧性风险分析方法的优化**：本文中分析得到的因果关系链路是以系统性能指标的变化为基础。如何有效地将异常检测、系统日志挖掘等技术融入韧性风险分析过程中，是后续研究的目标之一。此外，如何在微服务架构系统中挖掘服务调用关系并利用其优化韧性风险分析方法的效率和准确度，也是待研究的问题之一。

#### 参考文献
[1] Lewis J, Fowler M. Microservices: A definition of this new architectural term. 2014. https://martinfowler.com/articles/microservices.html
[2] Balalaie A, Heydarnoori A, Jamshidi P. Microservices architecture enables devops: Migration to a cloud-native architecture. IEEE Software, 2016,33(3):42−52. [doi: 10.1109/MS.2016.64]
[3] Mauro T. Adopting microservices at netflix: Lessons for architectural design. 2015. https://www.nginx.com/blog/adopting-microservices-at-netflix-lessons-for-team-and-process-design/
[4] Ihde S. InfoQ—From a monolith to microservices + REST: The evolution of LinkedIn’s service architecture. 2015. https://www.infoq.com/presentations/linkedin-microservices-urn/
[5] Calçado P. Building products at soundcloud—Part III: Microservices in scala and finagle. SoundCloud Limited, 2014. https://developers.soundcloud.com/blog/building-products-at-soundcloud-part-3-microservices-in-scala-and-finagle
[6] Dragoni N, Giallorenzo S, Lafuente AL, et al. Microservices: Yesterday, today, and tomorrow. In: Proc. of the Present and Ulterior Software Engineering. Cham: Springer-Verlag, 2017. 195−216. [doi: 10.1007/978-3-319-67425-4_12]
[7] Gunawi HS, Hao M, Suminto RO, et al. Why does the cloud stop computing? Lessons from hundreds of service outages. In: Proc. of the 7th ACM Symp. on Cloud Computing. New York: ACM, 2016. 1−16. [doi: 10.1145/2987550.2987583]
[8] ISO/IEC 25010: 2011, Systems and Software Engineering—Systems and Software Quality Requirements and Evaluation (SQuaRE)—System and Software Quality Models. Int’l Standards Organization, 2011. https://www.iso.org/standard/35733.html
[9] Gunawi HS, Hao M, Leesatapornwongsa T, et al. What bugs live in the cloud? A study of 3000+ issues in cloud systems. In: Proc. of the ACM Symp. on Cloud Computing. New York: ACM, 2014. 7:1−7:14. [doi: 10.1145/2670979.2670986]
[10] Newman S. Building Microservices: Designing Fine-grained Systems. New York: O’Reilly Media, Inc., 2015.
[11] Nadareishvili I, Mitra R, McLarty M, et al. Microservice Architecture: Aligning Principles, Practices, and Culture. New York: O’Reilly Media, Inc., 2016.
[12] Nygard MT. Release It! Design and Deploy Production-ready Software. 2nd ed., United States: Pragmatic Bookshelf, 2018.
[13] Windle G, Bennett KM, Noyes J. A methodological review of resilience measurement scales. Health and quality of life outcomes, 2011,9(1):Article No.8. [doi: 10.1186/1477-7525-9-8]
[14] Yin K, Du Q, Wang W, et al. On representing resilience requirements of microservice architecture systems. arXiv Preprint arXiv: 1909.13096, 2019.
[15] Boehm B. Software risk management. In: Proc. of the European Software Engineering Conf. Berlin, Heidelberg: Springer-Verlag, 1989. 1−19. [doi: 10.1007/3-540-51635-2_29]
[16] Holling CS. Resilience and stability of ecological systems. Annual Review of Ecology and Systematics, 1973,4(1):1−23. [doi: 10.1146/annurev.es.04.110173.000245]
[17] Hosseini S, Barker K, Ramirez-Marquez JE. A review of definitions and measures of system resilience. Reliability Engineering & System Safety, 2016,145(2016):47−61. [doi: 10.1016/j.ress.2015.08.006]
[18] Xue X, Wang L, Yang RJ. Exploring the science of resilience: Critical review and bibliometric analysis. Natural Hazards, 2018,90(1):477−510. [doi: 10.1007/s11069-017-3040-y]
[19] Laprie JC. Dependability: Basic Concepts and Terminology. Vienna: Springer-Verlag, 1992. [doi: 10.1007/978-3-7091-9170-5]
[20] Laprie JC. From dependability to resilience. In: Proc. of the 38th IEEE/IFIP Int’l Conf. on Dependable Systems and Networks. Los Alamitos: IEEE Computer Society, 2008. G8−G9.
[21] Wolter K, Avritzer A, Vieira M, Van Moorsel A, eds. Resilience Assessment and Evaluation of Computing Systems. Berlin, London: Springer-Verlag, 2012. [doi: 10.1007/978-3-642-29032-9]
[22] Trivedi KS, Kim DS, Ghosh R. Resilience in computer systems and networks. In: Proc. of the 2009 Int’l Conf. on Computer-aided Design. New York: ACM, 2009. 74−77. [doi: 10.1145/1687399.1687415]
[23] Bishop M, Carvalho M, Ford R, et al. Resilience is more than availability. In: Proc. of the 2011 New Security Paradigms Workshop. New York: ACM, 2011. 95−104. [doi: 10.1145/2073276.2073286]
[24] Diez O, Silva A. Resilience of cloud computing in critical systems. Quality and Reliability Engineering Int’l, 2014,30(3):397−412. [doi: 10.1002/qre.1579]
[25] Wolff E. Microservices: Flexible Software Architecture. Boston: Addison-Wesley Professional, 2016.
[26] Toffetti G, Brunner S, Blöchlinger M, et al. An architecture for self-managing microservices. In: Proc. of the 1st Int’l Workshop on Automated Incident Management in Cloud. New York: ACM, 2015. 19−24. [doi: 10.1145/2747470.2747474]
[27] Rusek M, Dwornicki G, Orłowski A. A decentralized system for load balancing of containerized microservices in the cloud. In: Proc. of the Int’l Conf. on Systems Science. Cham: Springer-Verlag, 2016. 142−152. [doi: 10.1007/978-3-319-48944-5_14]
[28] Soenen T, Tavernier W, Colle D, et al. Optimising microservice-based reliable NFV management & orchestration architectures. In: Proc. of the 2017 9th Int’l Workshop on Resilient Networks Design and Modeling (RNDM). Piscataway: IEEE, 2017. 1−7. [doi: