---
## Page 25
第1章什么是SQL注入
条件的记录：
//在PHP中动态构造SQL语句的字符串
//在.NET中动态构造SQL语句的字符串
request.getParameter (*input*) + = * ";
像上面那样构造动态SQL语句的问题是：如果在将输入传递给动态创建的语句之前，未
对代码进行验证或编码，那么攻击者会将SQL语句作为输入提供给应用并将SQL语句传递给
数据库加以执行。下面是使用上述代码构造的SQL语句：
1.转义字符处理不当
SQL数据库将单引号字符解析成代码与数据间的分界线：单引号外面的内容均是需要运
行的代码，而用单引号引起来的内容均是数据。因此，只需简单地在URL或Web页面（或应用）
的字段中输入一个单引号，就能快速识别出Web站点是否会受到SQL注入攻击。下面是一个
非常简单的应用的源代码，它将用户输入直接传递给动态创建的SQL语句：
//构造动态SQL语句
//执行SQL语甸
Sresult = mysql_query ($SQL) ;
//检查从数据库返回了多少条记录
Sxowcount = mysql_num_rows ($result) ;
//选代返回的记录集
f = ROIS
while ($db_field = mysql_fetch_assoc (Sresult))(
if (Srow *;
$row++}
1
如果将一个单引号字符作为该程序的输入，那么可能会出现下列错误中的一种。具体出现
何种错误取决于很多环境因素，比如编程语言、使用的数据库以及采用的保护和防御技术：
Warning: mysql_tetch_assoc (): supplied argument 1s not a valid MySQL
result resource
我们还可能会收到下列错误，这些错误提供了关于如何构造SQL语句的有用信息：
You have an error in your SQL syntax; check the manual that corresponds
to your MySQL server version for the right syntax to use near ''vALUE'*
出现该错误是因为单引号字符被解析成了字符串分隔符。运行时执行的SQL查询在语法上
11
---
## Page 26
SQL注入攻击与防御（第2版）
存在错误（它包含多个字符串分隔符），所以数据库抛出异常。SQL数据库将单引号字符看作特
殊字符（字符串分隔符）。在SQL注入攻击中，攻击者使用该字符“转义”开发人员的查询以
便构造自已的查询并加以执行。
单引号字符并不是唯一的转义字符。比如在Oracle中，空格（）、双竖线（D、逗号()、点
号（)、（*/）以及双引号字符（"）均具有特殊含义。例如：
-管道字符[1]用于为一个值追加一个函数
一-函数将被执行，函数的结果将转换并与前面的值连接
http: //www.victim,com/id=1 11 ut1_inaddr.get_host_address (1oca1) -*
--星号后跟一个正斜线，用于结束注释或Oracle中的优化提示
http:/ /www victim. com/hint=*/ from dua1-
无论是进行攻击还是防御，熟悉数据库的各种特性都是非常重要的。例如在SAPMAXDB
（SAPDB）中，开始定界符是由一个小于符号和一个感叹号组成的：
http://wwr.victim,com/id=1 union select operating system from sysinfo.
version-=#;
f++MOxS
MySQL提供了一个名为LOAD_FILE的函数，它能够读取文件并将文件内容作为字符串
返回。要使用该函数，必须保证读取的文件位于数据库服务器主机上，然后将文件的完整路径
12
---
## Page 27
第1章什么是SQL注入
作为输入参数传递给函数。调用该函数的用户还必须拥有FILE权限。如果将下列语句作为输
入，那么攻击者便会读取/etc/passwd文件中的内容，该文件中包含系统用户的属性和用户名：
1 UNION ALL SELECT LOAD_FILE (* /etc/passvd′) -*
MySQL还包含一个内置命令，可使用该命令来创建系统文件并进行写操作。还可使用下
列命令向Web根目录写入一个Web shell以便安装一个可远程交互访间的Web shell：
1 UNION SELECT "" INTO OUTFILE
" /var/wwr/htm1/victim.com/cmd-php" -
要想执行LOAD_FILE和SELECTINTOOUTFILE命令，易受攻击应用所使用的MySQL
用户就必须拥有FILE权限(FILE是一种管理员权限)。例如，root用户在默认情况下拥有该权限。
攻击者的输入直接被解析成了SQL语法，所以攻击者没必要使用单引号字符来转义查询。
下列代码更加清晰地说明了构造的SQL语句：
SELECT * FROM TABLE
WHERE
USERID - 1 UNION ALL SELECT LOAD_FILE (*/etc/pa8swd')
3.查询语句组装不当
有时需要使用动态SQL语句对某些复杂的应用进行编码，因为在程序开发阶段可能还不
知道要查询的表或字段（或者还不存在)。比如与大型数据库交互的应用，这些数据库在定期创
建的表中存储数据。还可以虚构一个应用，它返回员工的时间安排数据。将每个员工的时间安
排数据以包含当月的数据格式（比如2008年1月，其格式为employee_employee-id_01012008)
输入到新的表中。Web开发人员应该根据查询执行时的日期来动态创建查询语句。
下面是一个非常简单的应用的源代码，它将用户输入直接传递给动态创建的SQL语句，
该例说明了上述问题。脚本使用应用产生的值作为输入，输入是一个表名加三个列名，之后显
示员工信息。该程序允许用户选择他希望返回的数据。例如，用户可以选择一个员工并查看其
工作明细、日工资或当月的效能图。由于应用已经产生了输入，因而开发人员会信任该数据。
不过，该数据仍可被用户控制，因为它是通过GET请求提交的。攻击者可使用自己的表和字
段数据来替换应用产生的值。
//构造动态SQL语句
SSQL - *SELECT". $_GET["column1"] . ",". $_GET["column2"] . ",".
$_GET[*column3*] . “FROM". S_GET[table"] ;
//执行SQL语句
(TOss)xonbbsAu -Tnsexs
//检查从数据库返回了多少条记录
$rowcount = mysql_num_rows ($result);
//选代返回的记录集
while ($db_field = mysql_fetch_assoc ($result))(
$row = 1;
if($row *;
xo++
13
---
## Page 28
SQL注入攻击与防御（第2版）
如果攻击者操纵 HTTP请求并使用值users 替换表名，使用uscr、password 和 Super_priv字
段替换应用产生的列名，那么他便可以显示系统中数据库用户的用户名和口令。下面是他在使用
应用时构造的 URL：http://www.victim.com/user_details.php?tableusers&column1=user&column2
password&column3=Super_priv。
如果注入成功，那么将会返回下列数据而非时间安排数据。虽然这是一个计划好的例子，
但现实中很多应用都是以这种方式构建的。我已经不止一次碰到过类似的情况。
Iuser
1 passvord
ISuper_priv
00x 1
F 
1sq1injection I *2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19 1 N
peuno 1
1*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19
1N
4.错误处理不当
错误处理不当会为Web站点带来很多安全方面的问题。最常见的问题是将详细的内部错
误消息（如数据库转储、错误代码等）显示给用户或攻击者。这些错误消息会泄露从来都不应该
显示的实现细节。这些细节会为攻击者提供与网站潜在缺陷相关的重要线索。例如，攻击者可
利用详细的数据库错误消息来提取信息，从面知道如何修改或构造注入以邀开开发人员的查
询，并得知如何操纵数据库以使取出附加数据的信息，或者在某些情况下转储数据库（Microsof
SQLServer)中所有数据的信息。
下面是一个简单的使用C#语言编写的ASPNET应用示例，它使用MicrosoftSQLServer
一个用户标识符时，脚本会动态产生并执行一条SQL语句：
//创建一条Select 语句，查询id值与Value属性相匹配的记录
string SQL;
//定义ADO.NET对象
01eDbConnection con = ne￥ OleDbConnection (connectionString) ;
OleDbCommand cmd = nev OleDbCommand (SQL, con) /
OleDbDataReader reader;
//尝试打开数据库并读取信息
try
1
con.Open () ;
reader = cmd.ExecuteReader () :
reader.Read () ;
1blResults,Text = "" + reader["LastName*];
14
---
## Page 29
第1章什么是SQL注入
1b1Results,Text += " ," + reader["FirstName"] + *#;
+[a11xopex +I。-+xa*stnsogtqT
reader .Close () ;
catch (Exception err)
lblResults.Text = "Error getting data. " ;
1blResults,Text += err.Message;
fina11y
con.Close () ;
信息量非常大的SQL错误消息来获取数据库中的值。例如，如果攻击者输入下列查询，那么
执行SQL语句时会显示信息量非常大的SQL错误消息，其中包含了Web应用所使用的RDBMS
版本：
'and 1 in  (SELECT @@version)-
显然这行代码确实捕获了错误条件，但它并未提供自定义的通用错误消息。相反，攻击者
可以通过操纵应用和错误消息来获取信息。第4章会详细介绍攻击者使用、滥用该技术的过程
及场景。下面是返回的错误信息：
Microsoft OLE DB Provider for ODBC Drivers error *80040e07'
[ Microsoft][ODBC SQL Server Driver][SQL Server]Syntax error converting
the nvarchar value 'Microsoft SQL Server 2000 - 8.00.534 (Intel x86)
Nov 19 2001 13:23:50 Copyright (c) 1988-2000 Microsoft Corporation
Enterprise Edition on Windows NT 5.0 (Build 2195: Service Pack 3)* to a
column of data type int.
5.多个提交处理不当
白名单（white listing）是一种除了白名单中的字符外，禁止使用其他字符的技术。用于验证
输入的白名单方法是指为特定输入创建一个允许使用的字符列表，这样列表外的其他字符均会
遭到拒绝。建议使用与黑名单(black list)正好相反的白名单方法。黑名单(black listing)是一种除
了黑名单中的字符外，其他字符均允许使用的技术。用于验证输入的黑名单方法是指创建能被
恶意使用的所有字符及其相关编码的列表并禁止将它们作为输入。现实中存在非常多的攻击类
型，它们能够以多种方式呈现，要想有效维护这样一个列表是一项非常繁重的任务。使用不可
接受字符列表的潜在风险是：定义列表时很可能会忽视某个不可接受的字符或者忘记该字符一
种或多种可选的表示方式。
大型Web开发项目会出现这样的问题：有些开发人员会遵循这些建议并对输入进行验证，
面其他开发人员则不以为然。对于开发人员、团队甚至公司来说，彼此独立工作的情形并不少
见，很难保证项目中的每个人都遵循相同的标准。例如，在评估应用的过程中，经常会发现几
乎所有输入均进行了验证，但坚持找下去的话，就会发现某个被开发人员忘记验证的输入。
应用程序开发人员还倾向于围绕用户来设计应用，他们尽可能使用预期的处理流程来引导
15
---
## Page 30
SQL注入攻击与防御（第2版）
用户，认为用户将遵循他们已经设计好的逻辑顺序。例如，当用户已到达一系列表单中的第三
个表单时，他们会期望用户肯定已完成了第一个和第二个表单。但实际上，借助直接的URL
乱序来请求资源，能够非常容易地避开预期的数据流程。以下面这个简单的应用为例：
//处理表单1
//参数是否是一个字符串？
if (is_string($_GET["pazam")))(
//获取字符申的长度并检查是否在指定的范围内？
if (strlen($_GET[“param*]) < $max) (
//将字符申传递给一个外部校验函数