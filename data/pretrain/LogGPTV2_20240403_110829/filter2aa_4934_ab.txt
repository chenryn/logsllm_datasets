## 执行语句
这里部分参考http://blog.csdn.net/wizardforcel/article/details/54730253。
### Dalvik指令格式
在介绍 smali 语法中的指令之前，我们先来看看 Dalvik 指令的基本格式。
Dalvik 中指令的格式主要包含两个方面：位描述，格式ID。目前 Dalvik 中基本上所有的指令如下图所示，其中第一列给出了指令按照位进行描述的格式，第二列是格式化 ID ，第三列表示相应的句法，第四列对其进行说明。
#### 位描述
在位描述中，Davik 中的每一类指令一般由如下的元素构成
- 一个op，8位指令码
- 若干个字符，每一个字符表示4位
- 若干个 `|` ，进行分割，方便阅读。
- 若干个 $\varnothing$ ，同样也是4个字符，表示该部分位为0。
此外，在上面的展现形式种，指令由一个或者多个空格分割的 16 位的 word 组成，其中每一个 word 可以包含上述的几个元素。
举个例子，指令 `B|A|op CCCC` 包含2个 word，一共 32 位。其中，第一个字的低 8 位是操作码，中间 4 位是A，高4位是B。第二个字是单独的16位的数值。
#### 格式ID
但是，正如表格里所展现的
这样的一种指令格式，根据ID的不同，仍然可以表示不同的指令含义。
一般来说，格式ID由若干个字符组成，一般来说包含3个字符
- 第一个数字表示word的数量
- 第二个
    - 数字的话，表示指令包含的寄存器的最大数量（这是因为有些指令可以包含不定个数的寄存器）
    - r的话，表示使用了一定范围内的寄存器(range)。
- 第三个字符表示指令使用到的额外数据的类型。如下表
  | Mnemonic | Bit Sizes | Meaning                                  |
  | -------- | --------- | ---------------------------------------- |
  | b        | 8         | immediate signed byte                    |
  | c        | 16, 32    | constant pool index                      |
  | f        | 16        | interface constants (only used in statically linked formats) |
  | h        | 16        | immediate signed hat (high-order bits of a 32- or 64-bit value; low-order bits are all `0`) |
  | i        | 32        | immediate signed int, or 32-bit float    |
  | l        | 64        | immediate signed long, or 64-bit double  |
  | m        | 16        | method constants (only used in statically linked formats) |
  | n        | 4         | immediate signed nibble                  |
  | s        | 16        | immediate signed short                   |
  | t        | 8, 16, 32 | branch target                            |
  | x        | 0         | no additional data                       |
- 如果存在第四个字符的话
  - s表示采用静态链接
  - i表示指令应该被内联处理。
#### 句法
其基本要求如下
- 指令以操作码op开始，后面直接跟上一个或者多个参数，参数间以逗号分隔。
- 指令的参数从指令第一部分开始，op位于低8位，高8位可以是一个8位的参数，也可以是两个4位的参数，还可以为空。如果指令超过16位，则后面部分依次作为参数。
- 参数`Vx`表示寄存器，如v0、v1等。这里之所以采用v而不用r是为了避免与实现该虚拟机架构的机器架构中的寄存器命名产生冲突。
- 参数 `#+X` 表示常量数字。
- 参数 `+X` 表示相对指令的地址偏移。
- 参数 `kind@X`  表示常量池索引值，其中kind表示常量池类型，可以是以下四种类型
    - string，字符串常量池索引
    - type，类型常量池索引
    - field，字段常量池索引
    - meth，方法常量池索引
以指令 `op vAA, type@BBBB` 为例，指令使用了1个寄存器vAA，一个32位的类型常量池索引。
### 指令特点
Dalvik指令在调用规范上大致模仿常见的架构和 C 样式的调用规范，如下
- 参数顺序为 Dest-then-source 。
- 利用后缀用来表明运算类型，从而消除歧义：
    - 正常的32 位运算不标记。
    - 正常地64 位运算以 `-wide` 为后缀。
    - 特定类型的运算码以其类型（或简单缩写）为后缀，这些类型包括：`-boolean`、`-byte`、`-char`、`-short`、`-int`、`-long`、`-float`、`-double`、`-object`、`-string`、`-class` 和 `-void`。
- 利用运算码部分后缀区分具有不同指令样式或者或选项的相同运算，这些后缀与主要名称之间以 `/` 分开，主要目的是使生成和解析可执行文件的代码中存在与静态常量的一对一映射关系，以便于降低让读者感到模糊不清的可能性。
  例如，在指令`move-wide/from16 vAA, vBBBB` 中
  - `move`为基础运算码，表示这是基本运算，用来移动寄存器的值。
  - `wide`为名称后缀，表示指令对64 位数据进行运算。
  - `from16`为运算码后缀，表示源为一个 16 位寄存器的引用变量。
  - `vAA`为目的寄存器，取值范围为 `v0` - `v255`。
  - `vBBBB`为源寄存器，取值范围为 `v0` - `v65535`。
### 具体指令
这里，我们具体介绍依次每一条指令的含义，并尽可能地对其进行分类。
#### 空指令
nop指令，无任何操作，一般用于对齐代码。
#### 数据定义指令
| op&id  | 语法                                       | 参数                                       | 说明                                       |
| ------ | ---------------------------------------- | ---------------------------------------- | ---------------------------------------- |
| 2 11n  | const/4 vA, #+B                          | `A:` 目标寄存器（4 位）           `B:` 有符号整数（4 位） | 将给定的值（符号扩展为 32 位）移到指定的寄存器中。              |
| 13 21s | const/16 vAA, #+BBBB                     | `A:` 目标寄存器（8 位）           `B:` 有符号整数（16 位） | 将给定的值（符号扩展为 32 位）移到指定的寄存器中。              |
| 14 31i | const vAA, #+BBBBBBBB                    | `A:` 目标寄存器（8 位）           `B:` 任意 32 位常量 | 将给定的值移到指定的寄存器中。                          |
| 15 21h | const/high16 vAA, #+BBBB0000             | `A:` 目标寄存器（8 位）           `B:` 有符号整数（16 位） | 将给定的值（右零扩展为 32 位）移到指定的寄存器中。              |
| 16 21s | const-wide/16 vAA, #+BBBB                | `A:` 目标寄存器（8 位）           `B:` 有符号整数（16 位） | 将给定的值（符号扩展为 64 位）移到指定的寄存器对中。             |
| 17 31i | const-wide/32 vAA, #+BBBBBBBB            | `A:` 目标寄存器（8 位）            `B:` 有符号整数（32 位） | 将给定的值（符号扩展为 64 位）移到指定的寄存器对中。             |
| 18 51l | const-wide vAA, #+BBBBBBBBBBBBBBBB       | `A:` 目标寄存器（8 位）           `B:` 任意双字宽度（64 位）常量 | 将给定的值移到指定的寄存器对中。                         |
| 19 21h | const-wide/high16 vAA, #+BBBB000000000000 | `A:` 目标寄存器（8 位）           `B:` 有符号整数（16 位） | 将给定的值（右零扩展为 64 位）移到指定的寄存器对中。             |
| 1a 21c | const-string vAA, string@BBBB            | `A:` 目标寄存器（8 位）           `B:` 字符串索引     | 将给定的字符串引用赋值给指定的寄存器中。                     |
| 1b 31c | const-string/jumbo vAA, string@BBBBBBBB  | `A:` 目标寄存器（8 位）            `B:` 字符串索引    | 将给定字符串引用（较大）赋值到指定的寄存器中。                  |
| 1c 21c | const-class vAA, type@BBBB               | `A:` 目标寄存器（8 位）           `B:` 类型索引      | 将给定类引用赋值到指定的寄存器中。如果指定的类型是原始类型，则将存储对原始类型的退化类的引用。 |
举个例子，如果java代码如下
```java
boolean z = true;
z = false;
byte b = 1;
short s = 2;
int i = 3;
long l = 4;
float f = 0.1f;
double d = 0.2;
String str = "test";
Class c = Object.class;
```
那么编译之后得到的代码如下
```smali
const/4 v10, 0x1
const/4 v10, 0x0
const/4 v0, 0x1
const/4 v8, 0x2
const/4 v5, 0x3
const-wide/16 v6, 0x4
const v4, 0x3dcccccd    # 0.1f
const-wide v2, 0x3fc999999999999aL    # 0.2
const-string v9, "test"
const-class v1, Ljava/lang/Object;
```
可以看出，根据数据类型大小的不同，会采用不同的语法。此外，我们可以看到float的字面值是0x3dcccccd，这其实就是0.1。关于浮点数在计算机中的存在形式，请自行网上搜索。此外，一般来说，smali会自动帮我们将string的id转换为其真正的字符串。
#### 数据移动
数据移动指令主要是将数据从一个寄存器或者内存中移动到另一处。
| op&id  | 语法                            | 参数                                  | 说明                              |
| ------ | ----------------------------- | :---------------------------------- | ------------------------------- |
| 01 12x | move vA, vB                   | `A:` 目标寄存器（4 位）`B:` 源寄存器（4 位）       | vA=vB                           |
| 02 22x | move/from16 vAA, vBBBB        | `A:` 目标寄存器（8 位）`B:` 源寄存器（16 位）      | vAA=vBBBB                       |
| 03 32x | move/16 vAAAA, vBBBB          | `A:` 目标寄存器（16 位）`B:` 源寄存器（16 位）     | vAAAA=VBBBB                     |
| 04 12x | move-wide vA, vB              | `A:` 目标寄存器对（4 位）`B:` 源寄存器对（4 位）     | vA，v(A+1)=vB，V(B+1)             |
| 05 22x | move-wide/from16 vAA, vBBBB   | `A:` 目标寄存器对（8 位）`B:` 源寄存器对(16 bit)  | vAA，v(AA+1)=vBBBB，V(BBBB+1)     |
| 06 32x | move-wide/16 vAAAA, vBBBB     | `A:` 目标寄存器对（16 位）`B:` 源寄存器对(16 bit) | vAAAA，v(AAAA+1)=vBBBB，V(BBBB+1) |
| 07 12x | move-object vA, vB            | `A:` 目标寄存器（4 位）`B:` 源寄存器（4 位）       | 对象引用赋值，vA=vB                    |
| 08 22x | move-object/from16 vAA, vBBBB | `A:` 目标寄存器（8 位）`B:` 源寄存器（16 位）      | 对象引用赋值，vAA=vBBBB                |
| 09 32x | move-object/16 vAAAA, vBBBB   | `A:` 目标寄存器（16 位）`B:` 源寄存器（16 位）     | 对象引用赋值，vAAAA=vBBBB              |
| 0a 11x | move-result vAA               | `A:` 目标寄存器（8 位）                     | 将函数调用返回值放到VAA寄存器中。              |
| 0b 11x | move-result-wide vAA          | `A:` 目标寄存器对（8 位）                    | 将函数调用返回值放到VAA寄存器中。              |
| 0c 11x | move-result-object vAA        | `A:` 目标寄存器（8 位）                     | 将函数调用返回对象引用VAA寄存器中。             |
| 0d 11x | move-exception vAA            | `A:` 目标寄存器（8 位）                     | 将捕获的异常保存到给定寄存器中。                |
其中，`move`系列指令以及`move-result` 用于处理小于等于 32 位的基本类型。
`move-wide`系列指令和`move-result-wide`用于处理64位类型，包括`long`和`double`类型。
`move-object`系列指令和`move-result-object`用于处理对象引用。
此外，后缀（`/from16`、`/16`）只影响字节码的位数和寄存器的范围，不影响指令的逻辑。
#### 数据转换指令
数据转换指令主要是将一种数据类型转换为另一种数据类型。目前已有的指令如下
| **指令**          | **说明**            |
| --------------- | ----------------- |
| neg-int         | 对整型数求补            |
| not-int         | 对整型数求反            |
| neg-long        | 对长整型数求补           |
| not-long        | 对长整型数求反           |
| neg-float       | 对单精度浮点型数求补        |
| neg-double      | 对双精度浮点型数求补        |
| int-to-long     | 将整型数转换为长整型        |
| int-to-float    | 将整型数转换为单精度浮点型数    |
| int-to-dobule   | 将整型数转换为双精度浮点数     |
| long-to-int     | 将长整型数转换为整型        |
| long-to-float   | 将长整型数转换为单精度浮点型    |
| long-to-double  | 将长整型数转换为双精度浮点型    |
| float-to-int    | 将单精度浮点数转换为整型      |
| float-to-long   | 将单精度浮点数转换为长整型数    |
| float-to-double | 将单精度浮点数转换为双精度浮点型数 |
| double-to-int   | 将双精度浮点数转换为整型      |
| double-to-long  | 将双精度浮点数转换为长整型     |
| double-to-float | 将双精度浮点数转换为单精度浮点型  |
| int-to-byte     | 将整型转换为字节型         |
| int-to-char     | 将整型转换为字符型         |
| int-to-short    | 将整型转换为短整型         |
举个例子`int-to-short v0,v1` 即将寄存器v1的值强制转换为short类型，并放入v0中。
#### 数学运算指令
数学算指令包括算术运算指令与逻辑运算指令。其中，算术运算指令包括加，减，乘，除，模，移位等运算，逻辑运算指令主要进行数值间与，或，非，抑或等运算。
数据运算指令有以下四类，其中运算符为binop。
| **指令**                     | **说明**                         |
| -------------------------- | ------------------------------ |
| binop vAA, vBB, vCC        | 将vBB寄存器与vCC寄存器进行运算，结果保存到vAA寄存器 |
| binop/2addr vA, vB         | 将vA寄存器与vB寄存器进行运算，结果保存到vA寄存器    |
| binop/lit16 vA, vB, #+CCCC | 将vB寄存器与常量 CCCC进行运算，结果保存到vA寄存器  |
| binop/lit8 vAA, vBB, #+CC  | 将vBB寄存器与常量CC进行运算，结果保存到vAA寄存器   |
后面3类指令比第1类指令分别多出了2addr，lit16，lit8后缀。但是，对于基础字节码相同的指令来说，其执行的运算操作是类似的。所以这里我们主要介绍第一类指令。除此之外，根据数据的类型不同会在基础字节码后面加上数据类型后缀，如`-int` 或 `-long` 分别表示操作的数据类型为整型与长整型。第一类指令的运算类型如下
| 运算类型      | **说明**             |
| --------- | ------------------ |
| add-type  | vBB + vCC          |
| sub-type  | vBB - vCC          |
| mul-type  | vBB * vCC          |
| div-type  | vBB / vCC          |
| rem-type  | vBB % vCC          |
| and-type  | vBB & vCC          |
| or-type   | vBB \| vCC         |
| xor-type  | vBB ^ vCC          |
| shl-type  | vBB > vCC，有符号数右移  |
| ushr-type | vBB >>> vCC，无符号数右移 |
其中基础字节码后面的-type可以是-int，-long， -float，-double。
举个例子，java源码为
```java
int a = 5, b = 2;
a += b;
a -= b;
a *= b;
a /= b;
a %= b;
a &= b;
a |= b;
a ^= b;
a >= b;
a >>>= b;
```
其对应的smali为
```smali
const/4 v0, 0x5
const/4 v1, 0x2
add-int/2addr v0, v1
sub-int/2addr v0, v1
mul-int/2addr v0, v1