synchronized code blocks are frequently used in the SS.
Lock-Sufﬁxed Method. Another observation on the current An-
droid SS design is that lots of mission critical methods are suf-
ﬁxed with “Locked” and other key strings (e.g., “LP”, “LI”, “Lw”
and etc.). After further analysis, we ﬁnd that these sufﬁxes are
used to remind system developers that the corresponding meth-
ods can only be invoked from a thread holding a particular lock
to guarantee the atomicity of corresponding computations. For
instance, the processStartTimedOutLocked() method in the Activ-
ityManagerService.class is such a method with the “Locked” suf-
ﬁx. We ﬁnd that this method is only invoked when being wrapped
in synchronized(AMS){..processStartTimedOutLocked ()..}
structure. For any thread to call this method, it must ﬁrst hold the
monitor lock, (i.e., AMS.this object), which exclusively prevents
other threads from executing the critical sections guarded by the
AMS.this lock. The similar design pattern (i.e., syntax reminder) is
used all over other system services.
2.3 System Server Problem Overview
Android developers use the common design patterns (e.g., syn-
chronized locks) in Java to neatly fulﬁll multi-threaded concur-
rency control requirements. However, without a more careful de-
sign, it might cause unexpected consequences in systems.
Denial-of-Service. The column 3 in Table 1 shows the fraction
of critical sections (CSs) guarded by the primary lock in each sys-
tem service. Because within each service only one primary moni-
tor lock is used to guard a large portion (783/970, 80%) of critical
sections, the current CC design is easy to raise a potential Denial-
of-Service (DoS) problem. Since a very small portion of critical
sections (CSs) are protected by other locks, which are not mon-
itored by the watchdog thread, once one of these monitor locks
is held by a thread, a large part of the CSs guarded by the same
primary lock cannot be entered. Since the SS provides almost all
critical services to the whole Android system, any app can easily
request these system services through the Binder IPC (e.g., call the
Android APIs). These client-side requests can eventually trigger
the executions on some of the CSs (i.e., synchronized blocks) or
atomic critical methods in the SS. Since the inputs for these APIs
are provided by third party apps, a malicious app may invoke a CS
(or a method) with high computational complexity to cause a long
holding of the relevant service lock, effectively starving the targeted
system service. For instance, when the malicious app invokes the
registerReceiver API stub, the corresponding CS (or method) in
the server side implementation (i.e., AMS.registerReceiver()) is ex-
ecuted. During its execution, the AMS.this lock will be held, which
prevents other threads of the SS from entering any other CSs in the
AMS. During the starvation, the targeted system services become
irresponsive, so we call this consequence ss_freezing.
Single-point-of-failure in the SS. After further analysis of these
services, we ﬁnd that the primary locks used to guard critical sec-
tions (80%) in these system services are monitored by a separate
thread in the SS, called watchdog. This thread is used to recover the
system from any deadlock, starvation and other failure situations.
The ﬁrst column in Table 1 shows that the number of services mon-
itored by the watchdog increases from three (in Android 1.5) to ten
(in Android 5.1). This indicates that more and more complicated
system services are added into the main branch of Google Android
code-base. Note that other vendors can add more system services
into the SS, which makes it more likely to be attacked.
The high level idea of this watchdog design is similar to the tradi-
tional watchdog idea in the Linux and Choices OSes [29, 30]. It sets
timer-based monitors for various critical system components and
kills the corresponding services when its timer expires. Similarly,
the Android watchdog is initiated as a singleton thread inside the
SS process, which is designed to be simple and reliable. Whenever
a watchdog-monitored system service starts, it adds a new monitor
into the global list for the watchdog thread. The watchdog creates
one HeartbeatHandler instance (also called HandlerChecker in
some OS versions) to proactively check the status (heartbeat) of
different critical system services by requesting the primary moni-
tor locks of system services (e.g., AMS.this for activitymanager).
monitor(){synchronized(AMS .this){}} is the pattern of this
monitoring method for performing the heartbeat checks. Once any
one of the monitor locks cannot be acquired in a preset period (e.g.,
1 minute), the watchdog considers that the corresponding system
service is in the starving/deadlock situation. However, we ﬁnd that,
instead of killing the relevant service thread, it kills the whole SS
and forces the Android userspace (e.g., the zygote, the SS and other
processes) to be rebooted. This seemingly normal design can cause
another consequence: an app can potentially control the watch-
dog bite on the whole SS process. For instance, the app can invoke
some speciﬁc RPC into the critical sections to cause the ss_freeze
effect for a long period, so as to raise a false alert to the watchdog
thread. Since the System Server can be controlled to be shut down,
we name this attack consequence SS_shutdown.
We come to a hypothesis that these consequences reveal a gen-
eral ﬂaw in Android, which is rooted in the fundamental design of
the SS, the core of Android. We name this class of vulnerability An-
droid Stroke Vulnerability (ASV), when being exploited, the normal
service-request ﬂows within the system services are blocked. This
eventually causes the shutdown of the SS and a userspace reboot.
Similarly, the effect of brain strokes block the blood ﬂow.
1238Figure 1: The ASV-Hunter framework
3. HUNTING ASVS
To help further validate our hypothesis about the vulnerable sys-
tem server (SS) in Android and explore unknown ASVs in its sys-
tem services, we design an ASV-Hunter.
3.1 ASV-Hunter Design Logic
Due to the large set of APIs from the platform SDKs and the
huge code-base of the Android system services, one can hardly test
every method of the SS comprehensively. Therefore, we consider
the key for efﬁcient ASV hunting is to distill a set of high-risk meth-
ods in various system services. Based on our earlier observation, a
general way to exploit the ASVs is to trigger one of the system ser-
vices to execute a complicated method with critical code sections.
This causes the monitor lock to be held for a long period. As a re-
sult, other threads that need to acquire the same monitor lock will
be starved (referred to as SS_freezing). Eventually, this long period
(30s-60s) of resource starvation can cause a watchdog bite on the
whole SS (SS_shutdown). We call the methods that can cause the
SS_freezing or SS_shutdown as risky methods.
To sift out a set of candidate-risky methods in different sys-
tem services and better assist further analysis, we design the ASV-
Hunter, which consists of four components: 1) a lightweight but
efﬁcient static code analyzer to construct the control-ﬂow graphs
(CFGs) and call graphs for each system service in the SS, 2) a
candidate-risky-method sifter to sift out the potentially risky meth-
ods and provide more targeted analysis, 3) a triggering-point ana-
lyzer to identify a set of triggering methods that may invoke the exe-
cution of corresponding candidate-risky methods, and 4) a candidate-
risky-method tester to test whether the candidate-risky method is
actually triggerable. Once a candidate-risky method is tested to be
triggerable from the triggering point method, it will be reported to
the security analysts for further analysis and stress testing.
3.1.1 Analyze the Android System Server Bytecode
To perform a detailed analysis on the System Server (SS) of An-
droid, we extract the relevant Jar ﬁles from the compiled Android
AOSP source code of v5.0.0, the Lollipop. We then preprocess
all the compiled Java bytecode (.class ﬁles) of the system services
implementation. During the preprocessing, we ﬁnd that the SS con-
tains 1,570 class ﬁles, 10,812 methods, 993,782 lines of bytecode
instructions, and 70,204 method invocations. To fully analyze all
the critical system services in the SS, we design an efﬁcient static
code analyzer.
It ﬁrst takes the decompiled Java bytecode ﬁles
of the system services as inputs and uses the Soot [17] analysis
framework to translate the Java bytecode instructions into an inter-
mediary representation (IR), namely the Jimple IR. With the sup-
port of Soot, we construct the method-level CFGs efﬁciently for
each .class ﬁle, which takes less than an hour on a Ubuntu machine
with 4G RAM and an Intel Core i5 processor. Second, we generate
the call graphs based on an existing tool [24] for the whole An-
droid framework, which takes about 4 hours. Building the method
level CFGs and the whole call graphs is a one-time effort. Third,
we stitch the CFGs with the edges in the constructed call graphs
Sift Out Methods for Analysis
(i.e., adding invocation edges between callers and callees in the
corresponding CFG nodes) for all services. As a result, we have a
comprehensive approximation of how these system services inter-
act with each other and all the potential control ﬂows within each
service. This helps us further measure the complexity of differ-
ent candidate-risky methods in the corresponding services and as-
sist our triggering-points analysis. The generated graphs also help
us easily identify some attack scenarios (described in Section 4),
which cause various damages in Android.
3.1.2
To cost-effectively identify and analyze the candidate-risky meth-
ods in the SS that lead to the ASVs, we design a candidate-risky-
method sifter to identify a set of highly-exploitable methods in
various system services. The sifting criteria for each candidate-
risky method are as follows: 1) if a method contains more com-
plicated control ﬂow structures (e.g., loop structures), it is more
likely to cause starvation; 2) if a method contains synchronized
blocks that contain more bytecode instructions, it is more risky to
cause ASV; 3) if a method calls more other methods (with more
invoke-direct/.../static instructions) or 4) appears in the call-sites
of other methods more frequently, it has a higher chance to cause
problems; 5) if it is a lock-sufﬁxed method, it is considered risky,
as this method can only be called in critical code blocks (i.e., one
of its caller methods in the call stack should contain a synchro-
nized block, which is wrapped with monitorenter/monitorexit op-
code pair); 6) if the method is called while holding a lock that is
monitored by the watchdog thread, it is more risky as it can poten-
tially cause the SS_shutdown consequence. All the criteria are en-
coded as a RiskMethodVector. The ﬁrst four numerical ﬁelds in the
vector measure the complexity of each method, which is relevant to
the SS_freezing consequence. Also, the last two ﬁelds are boolean
values, which are relevant to the SS_freezing and the SS_shutdown.
Based on these criteria, we design Algorithm 1 (in Appendix A)
to collect relevant information for all methods in the system ser-
vices. First, our static code analyzer returns the stitched CFGs;
then, we set the system-service method under analysis as the en-
try node for a depth ﬁrst search (DFS). We design an approach to
efﬁciently compute the number of loops for each method. Dur-
ing this DFS process, we also count the number of synchronized
code blocks and collect the number of invoke instructions and other
relevant information, so that all the ﬁelds in the RiskMethodVec-
tor are ﬁlled. This whole process results in a vector database for
all the methods in the SS, which enables us to sift out candidate
risky methods gradually. Speciﬁcally, in the ﬁrst batch, we issue
strict queries to the database. The last strict query that we used
is [(δ > 1) ∧ (γ > 40) ∧ (σ > 3) ∧ ( > 3) ∧ true ∧ true],
which tries to match and return all the candidate-risky methods
that each contains at least 2 loops, has more than 40 instructions
in critical sections, contains at least 4 invoke-opcodes, appears at
least 4 times in the callsites, is a locked sufﬁxed method, and is
guarded by a monitor lock checked by the watchdog thread. The
ﬁrst batch of queries return totally 171 methods from system ser-
Sta$c	
  Code	
  Analyzer	
  New	
  ASVs	
  Poten$al	
  Risky	
  Methods	
  System	
  Services	
  .class	
  Files	
  Control	
  Flow	
  Graphs	
  and	
  Call	
  Graphs	
  Candidate	
  Risky	
  Method	
  SiAer	
  Triggering-­‐Point	
  Analyzer	
  Triggering	
  Points	
  for	
  risky	
  methods	
  Android	
  Source	
  Code	
  Risky	
  Method	
  Tester	
  Preprocessor	
  New	
  ASVs	
  1239Table 2: 4 Android devices used in the dynamic testing
Device Name
Nexus 7 Tablet
Nexus 4 Phone
Samsung S4
Samsung Ns
OS/Kernel v
5.0.2L/3.4.0
5.0.0L/3.4.0
4.3JB/3.4.0
4.0.4/3.0.36
CPU core/speed
Quad/1.3kMHz
Quad/1.5kMHz
Quad/1.6kMHz
Single/1kMHz
RAM
1G
2G
2G
0.5G
points for 1,677 (out of 2,154 (171 plus 1,983)) candidate-risky
methods.
3.1.4 Candidate-Risky Method Testing
We perform dynamic testing to further evaluate the 1,677 re-
turned candidate-risky methods with triggering points. To conﬁrm
that the candidate-risky methods can indeed be triggered through
Binder IPC/RPC calls from an app, we instrument the Android
Binder IPC mechanism. Most of the remote procedure calls from
an app to the SS in Android are handled by the Binder IPC/RPC
mechanism. When a process invokes an RPC, our instrumentation
call will generate a speciﬁc calling ID, which will be included in
the Binder transaction data (i.e., parcel object). The whole par-
cel will be sent to the remote binder thread that actually executes
the candidate-risky method. All the operations performed by the
binder thread are logged with the calling ID, so that our further
analysis can easily map the invocation of risky methods with the
corresponding calling process based on the testing logs. This helps
automatically conﬁrm the candidate risky methods are indeed trig-
gerable.
With this binder instrumentation scheme, we then generate test
cases to analyze the candidate risky methods in two phases. First,
we run a conﬁgured test case to check if the corresponding risky
method can be triggered by analyzing the testing logs. Our test-
ing case is based on a normal Android app, so that the test units
are directly reusable to construct proof-of-concept (PoC) attacks.
The testing app template contains one normal main activity com-
ponent (needed for most Android apps). The main activity sends in-
tents to initiate different tasks at a number of IntentService compo-
nents (for the execution of long running tasks) as test units. Within
each IntentService, we test the reported risky methods by invoking
the triggering-point to trigger the corresponding risky method. We
write a parser with the antlr framework [6] to customize the In-
tentService components, so that security analysts only have to load