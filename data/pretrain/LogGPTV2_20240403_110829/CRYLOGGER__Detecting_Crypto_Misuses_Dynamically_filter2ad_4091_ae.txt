V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O
FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè‚óè
VXEVHWV
W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O



FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG


‚óè
‚óè
‚óè
‚óè
VXEVHWV
(Part 2) Comparison of CRYLOGGER and CryptoGuard [6] on 150 Android apps. Each graph is an upset plot [53]. The horizontal bars indicate the
Fig. 5.
number of apps Ô¨Çagged as vulnerable by CryptoGuard and CRYLOGGER (that is run with 10k, 30k and 50k stimuli). The vertical bars indicate the number of
apps Ô¨Çagged as vulnerable by a possible intersection of the four approaches (the three largest, non-empty intersections are reported). For example, for R-22: 35 apps
are considered vulnerable by all approaches, 34 apps are Ô¨Çagged as vulnerable by CryptoGuard, but not by CRYLOGGER, and Ô¨Ånally 24 apps are considered
vulnerable by CRYLOGGER only. The vertical bars distinguish the false positives (fp) obtained by reverse engineering and the true positives (tp) for CryptoGuard.
be helpful in detecting misuses in Android apps. By combining
CRYLOGGER with powerful static tools such as CryptoGuard,
it is possible to detect crypto misuses effectively. We can also
observe that it is sufÔ¨Åcient to conÔ¨Ågure CRYLOGGER to use
30k random UI events to trigger most of the crypto misuses.
We performed the same experiments on the rules that are not
supported by CryptoGuard (see Fig. 9 in the appendices).
B. Android Apps: Execution Time
We measured the average execution time required by the
3 conÔ¨Ågurations of CRYLOGGER and by CryptoGuard to
analyze the 150 apps used for the comparison. We obtained
that CRYLOGGER10 requires on average 146.4 seconds per
app, CRYLOGGER30 takes 287.4 seconds, and CRYLOGGER50
takes 751.7 seconds to perform dynamic analysis. CryptoGuard
requires 287.6 seconds. Other static tools are usually much
slower. For example, the authors of CryptoLint [5] reported that
22.2% of the apps they analyzed did not terminate in 30 minutes
and 6.5% ran out of memory. This shows that the execution
time of CRYLOGGER is comparable to the time required by
CryptoGuard, conÔ¨Årming that both approaches are scalable.
C. Android Apps: Coverage
We measured the line coverage, the method coverage and
the class coverage of the apps analyzed with the three conÔ¨Åg-
urations of CRYLOGGER. We used ACVTool [55] to obtain
this information. To calculate the coverage, we considered only
the Ô¨Åles that are included in the main packages of the apps,
while excluding the Ô¨Åles that belong to the third-party libraries
because they can contain code not callable from the apps. The
average line coverage for CRYLOGGER10, CRYLOGGER30, and
CRYLOGGER50 are 22.8%, 25.3%, and 25.4%, respectively.
The average method coverage are 25.4%, 27.9%, and 27.9%,
respectively. The average class coverage are 32.8%, 35.4%, and
35.7%, respectively. The coverage is relatively low and there are
many lines of code that Monkey could not explore (‚àº 75%).
These results are not surprising because Monkey generates
completely random UI events [39]. However, this shows that
even if the coverage is low, CRYLOGGER can detect misuses as
the crypto APIs are easily triggerable with random events.
D. Android Apps: False Positives
Fig. 4 and 5 show that CryptoGuard can produce many false
positives, especially for rules R-22 (false positives: 22.5%), R-24
(59.3%), R-25 (57.1%) and R-26 (27.2%). In Fig. 11 we report
two concrete examples of false positives that we found. The
Ô¨Årst example is for rule R-22. We found that many apps were
Ô¨Çagged as vulnerable by CryptoGuard because they include the
Java class HttpTesting. While violating rule R-22 due to the
use of HTTP instead of HTTPS, this class is meant to be used
for testing and it is not instantiated at runtime by any of the
apps we analyzed. Similarly, for rule R-24, many apps were
Ô¨Çagged because they contain the Java class AdjustFactory10.
The function reported in the second example of Fig. 11 is used
10The code is available at https://github.com/adjust/android sdk.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1981
FU\SWRJXDUG
FU\ORJJHU
WS

WS

WQ

WQ

IS

IQ

IQ




IS
IQ
WQ
WS


Fig. 6. Comparison of CRYLOGGER and CryptoGuard [6] on the CryptoAPI-
Bench*. We report the number of false positives (fp), false negatives (fn), true
positives (tp) and true negatives (tn). ‚ÄúTrue positive‚Äù: there is a crypto misuse
that is caught. ‚ÄúTrue negative‚Äù: there is not a crypto misuse and it is not caught.
only for testing, as its name suggests, and it is never called at
runtime by any of the apps that we analyzed. This function was
Ô¨Çagged as vulnerable by CryptoGuard.
E. CryptoAPI-Bench: Results
We compared CRYLOGGER against CryptoGuard by using the
CryptoAPI-Bench [26]11, a set of Java benchmarks that include
crypto misuses. The CryptoAPI-Bench has been proposed to
compare CryptoGuard and other static approaches. Therefore,
(1) the code is not directly executable, (2) it lacks test cases that
are useful for dynamic approaches, and (3) it misses test cases
for the rules that are not supported by CryptoGuard. We extended
the CryptoAPI-Bench such that (1) the code can be analyzed by
static approaches as well as executed by dynamic approaches,
(2) we added new test cases that are challenging for dynamic
approaches, and (3) we included new test cases for the rules
supported by CRYLOGGER, but not by CryptoGuard. In this
section, we discuss the result of the comparison on the modiÔ¨Åed
CryptoAPI-Bench that we call CryptoAPI-Bench*. For fairness,
we consider the rules that are supported by both CRYLOGGER
and CryptoGuard. For fairness, we also report the results on the
original CryptoAPI-Bench in Fig. 12 (in the appendices).
CryptoAPI-Bench contains six types of tests: (1) basic: the
crypto misuse is in the function main; (2) miscellaneous:
similar to basic, but the parameters for the API calls are saved
in data structures or go through data type conversions; (3)
interprocedural: the misuse is in a function that is called by
main with 2 or 3 levels of indirection; (4) path sensitive: the
crypto misuse is in a branch that is always evaluated to true at
runtime; (5) Ô¨Åeld sensitive: the misuse is in a member function
and the relevant parameters are saved in the Ô¨Åeld of a class; (6)
multiple classes: the relevant parameters of a misuse are passed
from a class to another class to reach the API call. We report
an example of each test in Fig. 10 (in the appendices). Some of
these tests are challenging for a static tool, but they are all the
same from a dynamic tool perspective. Therefore, we decided to
add the following type of test: (7) argument sensitive: the misuse
is triggered only if a speciÔ¨Åc value is passed as input to main.
Fig. 6 shows the results of the comparison of CRYLOGGER
and CryptoGuard. The bars show the number of true positives
(tp), true negatives (tn), false positives (fp) and false negatives
(fn). In CryptoAPI-Bench* there are 198 tests in total, 157 true
positive tests, i.e., tests in which there is a crypto misuse, and
11https://github.com/CryptoGuardOSS/cryptoapi-bench, commit: ace0945.
41 true negative tests, i.e., tests in which there are no misuses.
CRYLOGGER cannot produce any false positives, but it produces
19 false negatives, all for the tests that are argument sensitive.
CryptoGuard produces both false positives and false negatives.
The false positives are caused by tests that are path sensitive,
and interprocedural tests. The false negatives are caused by the
reÔ¨Ånements that are applied by CryptoGuard [6], interprocedural
tests, and tests that are path sensitive. These results conÔ¨Årm that
static tools can be complemented with CRYLOGGER to expose
more misuses as well as reduce the number of false positives.
IX. RESULTS: VULNERABILITIES IN ANDROID
We run CRYLOGGER on the 1780 apps downloaded from
the Google Play Store (Section VII). We stimulated the apps
with 30k random events as this was a good compromise between
running time and number of vulnerabilities found in a subset
of these apps (Section VIII). The experiments took roughly 10
days to run on an emulator running Android 9.0.0 r36, to which
we allocated 6 cores (Intel Xeon E5-2650) and 16 GB of RAM.
Fig. 7 reports the results of the analysis. The graph reports
the total number of apps that violate the 26 crypto rules checked
by CRYLOGGER. A very high number of apps use broken hash
algorithms (R-01, 99.1%) and unsafe random generator (R-18,
99.7%). These results are more alarming than the ones that
were obtained statically in [6], 85.3% and 84.0%, respectively.
CRYLOGGER, similarly to static tools, cannot determine exactly
how hash functions or random numbers are used in the apps by
using rules R-01 and R-18 only. While for R-01 it is challenging
to determine how hash functions are actually used, for R-18
we can check if non-truly random numbers are used as values
for keys and initialization vectors with R-06 and R-08. These
rules are not supported by static tools and they give more precise
information about the use of non-truly random numbers. We
decided to keep rule R-18 to compare CRYLOGGER against
other static tools, but we suggest using rules R-06 and rule R-
08 for a more precise analysis. Other more subtle uses of hash
functions can produce false positives, e.g., when broken hash
functions are used with non-sensitive data or when the property
of collision resistant is not required. For other rules, e.g., R-
03, R-13, and R-22, we obtained results more similar to [6]. A
surprising number of apps reuse the same (key, IV) pairs (R-09,
31.3%), which was never reported before. Many apps also use
badly-generated keys (R-06, 36.1%), badly-generated IVs (R-
08, 6.6%), and reuse salts for different purposes (R-12, 6.6%),
which are rules that were not checked by other tools before. For
rule R-01 we found that 99.0% of the apps that violate R-01 use
SHA1 and 99.7% use MD5 as message digest algorithm. For R-
02, we found that 81.0% of the apps that use broken symmetric
algorithms use DES, while 16.7% still use BlowÔ¨Åsh. We found
that 82.8% of the apps that violate R-13 use ‚â§ 3 iterations for
key derivation, which is much lower compared to the suggested
value (1000). For R-14 and R-15 we found that 27.1% of the
apps use ‚Äúchangeit‚Äù as password, while 8.5% use ‚Äúdontcare‚Äù.
For RSA, we saw that 97.7% use 1024 bits as key size (2048 is
the suggested value). These results conÔ¨Årm what was obtained
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1982






O
V
S
S
D

H
E
D
U
H
Q
X
Y


O

































































5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠
√≠


















































Fig. 7. Number of vulnerable Android apps for each crypto rule. We analyzed
1780 Android apps with CRYLOGGER conÔ¨Ågured to generate 30k random
events with Monkey. We downloaded the apps from the ofÔ¨Åcial Google Play
Store. The dataset of apps was collected between September and October 2019.
in previous works by using static analysis [5], [6] and show that
CRYLOGGER can analyze a large number of apps automatically.
A. Disclosure of Vulnerabilities
We contacted 306 developers of Android apps and libraries to
disclose the vulnerabilities reported in Fig. 7. We respected the
disclosure policies of the companies we contacted. Starting from
the apps that violate 18 rules (the highest number of violations in
our dataset), we contacted all the apps with ‚â• 9 rule violations.
All the apps are popular: they have from hundreds of thousands
of downloads to more than 100 millions. Unfortunately, only
18 developers answered our Ô¨Årst email of request and only 8
of them followed back with us multiple times providing useful
feedback on our Ô¨Åndings. We also contacted 6 developers of
popular Android libraries and received answers from 2 of them.
The characteristics of the 8 apps and 2 libraries for which we
received feedback are reported in the Ô¨Årst table from the left of
Fig. 8. We preferred to anonymize the apps and libraries because
(i) we do not want to associate the feedback we received to the
company of the app or its employers, and (ii) we consider some
of the attacks possible although developers considered them
out-of-scope because they require privilege escalation.
Apps A-01, A-04, and A-07 violate rule R-01. Their developers
told us that MD5 or SHA1 are used for hashing non-sensitive
values. App A-01 violates also rules R-02 (DES) and R-03: the
developers justiÔ¨Åed the use of broken algorithms saying that
they do not pose concrete risks to their users. A-01, A-05, and
A-07 violate rules related to poor encryption parameters, such as
constant keys (R-05, R-06), IVs (R-07, R-08) and salts (R-10).
The developers adopted poor encryption practices to encrypt data
that are stored locally on the smartphone. They consider these
issues outside of their threat model since privilege escalation
attacks are required to exploit them. A-03 uses repeating (key,
IV) pairs (R-09): the developers agreed that it is a real issue
and they plan to Ô¨Åx it. They reused the same pairs because they
experienced app crashing when using fresh pairs. A-02, A-05,
A-06, and A-08 use constant passwords (R-16, R-23) to encrypt
data. The developers do not plan to Ô¨Åx these problems because a
privilege escalation attack is necessary to access the data. The
developers of A-01, A-04 and A-05 told us that using a short