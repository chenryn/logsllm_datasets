function remove_n
ne_by_uid(id,
i, f)
1·1
for (i in name) {
split (name[1], f. *:*)
if (f[3] == d) (
delete name[i]
break
www.TopSage.com
---
## Page 339
扩展实例：合并用户数据库
327
程序的运行，是将每一输人行的副本保存在两个数组里，第一个数组以username为索
引、第二个则以UID编号为索引。第一次看到一条记录时，username与UID编号都不
会存储到任何一个数组里，所以此行的副本会存储在这两者里。
当看到完全重复（username与UID是相同一致）的记录时，不作任何事，因为我们已经
有这个信息了，如果usermame已看到过而UID是新的，则两条记录都会写进dupusers
文件里，且uid数组里的第一条记录副本会被到除，因为我们不再需要它了。类似的逻
辑也应用在UID之前已看到过，但username不相符的记录上。
执行END规则时，所有留在name数组里的记录表示的是唯一的记录，它们会被写到
uniquel文件里，然后再关闭所有文件。
remove_uid_by_name() 与remove_name_by_uid()是 awk 函数,awk 里的用户定义
函数在9.8节里已作过介绍。这两个函数的功能是分别自uid与name数组中，删除不
再需要的信息。
执行建立这些文件的程序：
awk -f splitout.awk merge1
11.3.2管理UID
现在，我们已有分类的用户了，下一项任务，就是建立使用中的UID编号列表：
spt-anbtum  0; i++)
uidlist[i] = id
totalids - i
for (i =-2; i > old-new-list
else
echo $0: out of sync: $user and Suser2 >&2
fi
exit 1
else
echo $0: no duplicate for Suser >&2
exit 1
done  unique2
fi
IPS=$old_ifs
我们使用Shell的read命令，自dupusers读取每一组行，传送最终密码文件记录予
unique2。同时，将想要的输出传至新文件old-new-1ist。这里必须使用>>运算
符，因为我们是使用循环，每次加人一条新记录，为确保该文件为全新状态，在进人循
环主体之前先作删除操作。
设置IFS为：，可以让密码文件行的读取更容易，它能够正确地处理每条以曾号隔开的
字段。IFS的原始值存储在old_ifs内，并在循环之后被恢复（我们当然可以直接使
用IFS=：read...的方式，但这么微我们在处理两个read语句时就得更小心了）。
类似的程序代码也可应用于UID编号相同、username不同的用户。这里我们一样选择简
化：给所有这样的用户一个全新的、未使用的UID编号。（也就是说，让每组里的第一
www.TopSage.com
---
## Page 342
330
第11章
个用户保持原有的UID编号：然而这需要只变更第二个用户所在的系统里的文件所有
权。在现实情况下，这么做的确比较好）。
(eptdnp >[- on)$=qunoo
计算所有重复的1d
如景POSIXsh里有数组，请这么用：
set -- S(newuids.sh -c Scount umique-ids)
while read user passwd uid gid fullname homedir Shel1
1=SdI
do
nevuid+$1
shift
echo *Suser:$passwd:$newuid:$gid:Sful1name:$homedir:SShe11*
printf *ts\tts\tts\n* Suser Suid Snewuid >> old-new-1ist
done  unique3
IFS=$old_ifs
为了更方便拥有所有新的UID编号，我们通过set与命令替换功能，将它们放置在位置
参数中。然后通过从S1开始指定，可自循环中将每个新UID取出，并使用shift将下
一个替换。完成时，我们将拥有三个新的输出文件：
S cat unigue2
提有两个UID的用户
ben:x:301:10:Ben Frank1in:/home/ben:/bin/bash
jhancock:x:300:10:John Hancock:/home/Jhancock:/bln/bash
S cat unigue3
取得新UID的用户
tj:x:5:10:Thomas Jefferson:/home/tJ:/bin/bash
abe :x:4: 10:Honest Abe Linco1n: /home/abe:/bin/bash
dorothy:x:6:10:Dorothy Gale1/home/dorothy:/bin/bash
toto:x:7:10:Toto Gale:/home/toto:/bin/bash
$ cat old-nev-list
用户-old-new 列表
201
301
jhancock
200
300
abe
105
4
见下个段落说明
tj
105
5
Gorothy 110
":*
0301
110
最后的密码文件乃由三个unique？文件合并而成。虽然cat可完成此工作，不过以UID
编号序合并它们会是比较好的方式：
pzonsed·reuy<[cctlenbgunu-1- C x- .2o9
通配字符unique[123]展开为三个文件名unique1、unique2以及unique3。以下为
排序的最后结果：
S cat final-password
root:x:0:0:root1/root:/bin/bash
www.TopSage.com
---
## Page 343
扩展实例：合并用户数据库
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/no1ogin
com
adm:x:3:4:adm:/var/adm:/sbin/no1ogin-
abe:x:4:10:Honest Abe Lincoln:/home/abe:/bin/bash
dorothy:x:6:10:Dorothy Gale:/home/dorothy;/bin/bash
tj:x:5:10:Thomas Jefferson:/home/tj:/bin/bash
camus:x:112:10:A1bert Camus:/home/camus:/bin/bash
toto:x:7:10:Toto Gale:/home/toto:/bin/bash
5hancock:x:300:10:John Hancock:/home/Shancock: /bin/bash
george:x:1100:10:George Washington:/home/george:/bin/bash
ben:x:301:10:Ben Frank1in:/home/ben: /bin/bash
betay:x:1110:10:Betsy Ross:/home/betsy:/bin/bash
tolstoy:x:2076:10:Leo To1stoy:/home/to1stoy:/bin/bash
11.4
改变文件所有权
乍看之下，改变文件所有权很简单，只要提供username与新UID编号列表，我们应该
能编写一个像下面这样的循环（需以root权限执行）：
while read user old new
-11
do
cd /home/$user
改变用户目录
done < old-new-1ist
chowm -R $new .
递归地改变所有权，见chowm（1）
这个程序的想法是：改变用户的根目录，并递归执行chown，将所有文件、目录都改成
新的UID编号。不过，这是不够的！用户的文件有可能放在根目录以外的地方。举例来
说，有两个用户ben与jhancock，它们共同参与一个项目，置于/home/ben/
Geclaration下:
$ed/bome/ben/declaration
S ls -1 draft*
1′1
-r-r----
1 jhancock fathers
1  ben
fathers
2102 Jul316:00 draft10
----.
2191 Ju1 3 17:09 draft.final
如果我们只是作递归的chown处理，两个文件最后都会属于ben，而jhancock在大文
件系统重组织（GreatFilesystemRcorganization）过后，不会高兴把每日的工作归功给
ben 的。
不过更精的情况应该是：用户拥有的文件，放在根目录之外的地方。/tmp就是一个明
显的例子，不过还有源代码管理系统，像CVS也会有这种情况。CVS针对项目存储主
文件（masterfiles）在软件库内，通常这个地方不会是任何人的根目录，且多半是在系
统目录的某一处。软件库的原始文件属于多位用户。这些文件的所有权也应该作更改。
这样，确保所有文件在每个地方都被正确更改的唯一方式，便是使用find，从根目录开
始微。完成此目标最显而易见的方式就是在find里执行chowm，像这样：
www.TopSage.com
---
## Page 344
332
第11章
find / -user Suser -exec chown $newuid *{1* \1
这么做会执行彻底的文件查找，检查系统里每一个文件与目录，看是否有属于Suser用
户的东西，find会针对每个相符的文件与目录执行chown，将所有权改为$newuid里
的UID（find命令在10.4.3节有说明，-exec选项会针对每一个与条件比对相符的文
件执行接下来的所有参数，直至分号为止，find命令里的（）意指替换找到的文件名称
至命令中）。不过，这种使用find的代价很高，因为它会针对每一个文件或目录，建立
一个新的chown进程。因此，我们结合find与xargs：