thus a way to dynamically change a program’s execution flow.
3
Communication Functionalities. Industrial robots require com-
munication functionalities to interface with external networks and
systems. Some examples include receiving real-time position coor-
dinates by an external program, interacting with a vision system
that provides geometrical information on the position of the work
piece, and sending feedback to external systems for logging.
All the surveyed languages provide some form of networking
capabilities, either out of the box or as language extension (e.g., for
RAPID, sockets are included in a optional package; for KRL, they
are available in the KUKA.Ethernet KRL add-on; for KAREL, they
are a language extension and not part of the core language).
Although sockets in IRPLs often work as in general-purpose
programming languages, some IRPLs have noticeable differences.
In KUKA’s KRL, sockets define a “typed” interface such that the
program can only exchange XML or typed binary data; in MELFA’s
BASIC and Kawasaki AS, the definition of the socket parameters
(e.g., IP address, port) is performed out of band, by manually config-
uring the robot’s parameters, and cannot be changed by a program.
All the surveyed vendors provide at least one way to exchange
data over serial ports and fieldbuses, as it is a basic means of factory
floor integration. Although our technical analysis does not focus
on these non-IP networking systems, these are still direct channels
connected to external devices, which are not necessarily trusted:
Therefore, this attack vector should be the subject of future scrutiny.
2.2 Research Challenges and Goals
The primitives of Table 1 are not, by themselves, a security issue,
and we do not aim to call out vendors for providing them: There
are ways to use them securely, and their availability is a signal of
the complexity and maturity reached by industrial robotics.
However, the security impact of these primitives has not been
studied yet. Our previous research [18] found a path traversal vul-
nerability in a real-world program: A web server written in ABB’s
RAPID. This vulnerability allows attackers to access (sensitive) files
outside of the root directory served by the application. This case mo-
tivated us to investigate potential insecure uses of such primitives,
and to develop a IRPL-specific program analysis tool to support
vulnerability discovery, as well as detection of malicious function-
alities. Our goal is to bring this to the attention of the security and
robotics communities, and raise awareness to the vendors.
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
M. Pogliani et al.
2.3 Attack Scenarios
With the sole purpose of providing context for the remainder of
the paper, we hereby provide three attack scenarios, in which an
adversary may abuse the security-sensitive primitives of Table 1. We
remark that these scenarios are fictitious, although in our opinion
useful to showcase the risks of a misuse of IRPL primitives.
Table 2: Sources of untrustworthy data (i.e., sensitive
sources) – Section 3.1
Type
File
Inbound Commu-
nication (network,
serial, fieldbus)
Teach
(i.e., UI forms)
Pendant
Use
Intended
Case
Static data from con-
figuration files
Dynamic real-time
data
Attacker
Model
Contractor
Untrusted networks
or endpoints
Operator-supplied
data
Insider
All the programs marked as “External move”, “Remote control,”
and “Integration server” in Table 54 contain instances of such vul-
nerability, which would allow an attacker to arbitrarily control the
robot’s movements.
Scenario 3: Persistent Information Stealing. Let’s assume that
a robot runs a task program written by a system integrator. The
system integrator is either compromised, or the task program is
fetched from a misconfigured or vulnerable storage (e.g., FTP). At
a first glance, we may say that in such scenario an attacker could
straightforwardly replace the task program to change the automa-
tion of the robot. However such a drastic approach may be noticed.
If the task program is written in any of the IRPLs (listed in Table 1)
that supports dynamic code loading and networking primitives, the
adversary has the opportunity to run a stealthier attack. They may
slightly alter the source code of the task program to include a
network communication routine that fetches code from outside (or
from a hidden file), and then use dynamic loading to run it as part
of the normal automation loop.
Although there are different strategies to implement such attack,
in Table 4 we show how our analyzer can be configured to detect
the code patterns of one example implementation.
3 Unsafe Programming Patterns
We now detail more technically how some IRPL primitives become
sources of untrusted data, while some others can result into vulner-
able uses of such untrusted data. We also show how some primitives
can be abused for malicious purposes, e.g., to develop malware writ-
ten in IRPLs. In our threat model, the attacker can plant a malicious
task program into the robot. As exemplified in Section 2.3, this can
happen in various ways and locations of the software supply chain.
A detailed investigation on the initial entry points is beyond the
scope of this work: We focus exclusively on the IRPLs’ capabilities.
3.1 Sources of Untrustworthy Data
We consider a source of untrustworthy data any avenue where a
task program written in a IRPL receives and processes data coming
from the external world. Particularly, as summarized in Table 2, task
programs receive inputs from files, communication mechanisms
(e.g., network, serial communication, fieldbuses), and the teach
4Excluding those with 0 (zero) patterns.
4
Industrial software—including task programs for robots—do not
always provide authentication or encryption, because they assume
a closed and trusted environment. However, with the increased inte-
gration of the factory floor with external services, such assumption
is becoming less realistic, and arguably not future proof. Moreover,
recent advanced attacks have already shown capability to propa-
gate down to the factory floor, sometimes even up to the safety
system (e.g., see Trisis or Xenotime in [24]).
Scenario 1: Unauthorized Data Access. Let’s consider a task pro-
gram that writes in a log file the coordinates of the paths followed
by the robotic arm during its operation. Such log file is used for
auditing, calibration, and quality assurance (e.g., root-cause analy-
sis of defective products), and may contain sensitive information
like intellectual property (i.e., how a product is built). Also, the task
program opens a network socket because an external agent needs
to retrieve the log files for post-processing and archival purposes.
Let’s now assume that an attacker has compromised a machine
within the same network of the robot. As a first step, the attacker
may try to impersonate the agent (e.g. through ARP spoofing),
connect to the socket, and exfiltrate the log.
Then, the attacker may want to move laterally, by planting mal-
ware in the robot’s machine and remaining persistent. However,
the login console (e.g., telnet) is password protected and does not
contain known vulnerabilities. However, the attacker understands
that the task program that keeps the socket open is affected by a
path-traversal vulnerability: The application trusts that any request
coming from the agent will contain a legitimate file path relative to
the directory where the log files are stored. The attacker may be
able to exploit this vulnerability to access the file containing authen-
tication secrets, and use that to finally access the target machine
via login console and compromise the robot’s machine.
The first program listed in Table 5 contains an instance of such
vulnerability, which our analyzer was able to automatically detect.
Scenario 2: Task Flow Alteration. Let’s consider a task program
that receives a stream of coordinates via a socket. This is often
the case for real-time external control task programs, which allow
robots to be controlled by other endpoints.
Like in Scenario 1, let’s assume an attacker within the same net-
work of the robot’s machine, yet with no access to it. The attacker
wants to disrupt the robot’s operation, to alter its execution flow,
causing damage and impacting on the safety of the manufacturing
station. There is proper network-level protection (IP and MAC fil-
tering), which ensures that the robot receives coordinates only from
the designated controller. However, the task program is affected by
an input-validation vulnerability: Any received coordinate value is
automatically trusted. Therefore, an attacker able to impersonate
the controller can send arbitrary coordinates, and the robot will
just act accordingly and potentially cause damage.
Detecting Insecure Code Patterns in Industrial Robot Programs
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
Table 3: Vulnerable uses of untrustworthy data (i.e., in sen-
sitive sinks) – Section 3.2
Type
Movement
Use
Intended
Case
Programmatically
manoeuvre
the
robot
Read arbitrary files Data exfiltration
Attacker Goal
(Example)
Unintended robot
movement
File Handling
File Modification Write configuration
Call by Name
parametric
Write
and generic code
Implant a backdoor
Divert the control
flow
pendant’s user interface. Such (untrusted) input, if not correctly
handled by the program, can be abused by an attacker. For example,
data files could be tampered with by malicious third-parties like
contractors; inbound communication data could originate from
compromised networks and endpoints; and user interfaces could
be manipulated through the physical attack surface by an insider.
3.2 Vulnerable Uses of Untrustworthy Data
Untrustworthy data can be used in various patterns that result into
software vulnerabilities. Particularly, we distinguish four broad
categories of “sensitive sinks.” These functions, when called with
parameters derived from (tainted with) untrustworthy data, lead to
taint-style vulnerabilities, as summarized in Table 3.
3.2.1 Movement Commands The tainted data (received from a sen-
sitive source) is used to control the robot’s trajectory. This pattern is
widely used as a way to control or influence the robot’s movement
from an external program, even in near real-time: Indeed, it is sup-
ported out of the box by some vendors. For example, Mitsubishi’s
MELFA robots provide the Mxt (move external) instruction, which
automatically listens for UDP packets containing information about
the robot position, and which is intended as a way to perform real-
time control of the robot. Similarly, ABB provides the Robotware
Externally Guided Motion option, which allows an external device
to perform direct motion control.
Example. A popular implementation of this pattern are adapters
the for third party middleware such as ROS5, in particular the
project ROS-Industrial6, which extends ROS to support industrial
robots, and became the reference open-source platform for indus-
trial robotics [3]. To use ROS with an industrial robot, one has to
rely to its interface; in many cases, the robot-side interface is a task
program which listens on a network port, accepting commands that
will be directly translated to the robot’s movement and returning
information about the robot’s status over the network.
In all of the task programs that we examined, we found no authen-
tication nor validation on the movement coordinates: An attacker
who can send data on the network is able to issue any movement
command, possibly moving the robot outside its normal operating
range. Listing 1 shows an example written in KUKA’s KRL.
5Robot Operating System, a popular robotic research platform: https://ros.org
6https://rosindustrial.org
File and Configuration Handling Tainted data received from
3.2.2
a sensitive source such as a network socket is used as part of the file-
name parameter of a “file open” or “configuration open” instruction,
without validation. In this case, a network attacker can control the
name of the (configuration) file to be opened and read, leading to
the disclosure of sensitive information (e.g., secret files, intellectual
property) or to the overwrite of sensitive configuration files. If the
robot controller implements a structured file system (e.g., COMAU,
ABB, KUKA) rather than a flat one, this issue may lead to the classic
directory traversal vulnerability. Note that the extent of file-system
access granted to the attacker may be limited by OS-level isolation
functionalities, similarly to the “chroot” mechanism in Unix.
Example. In previous research [18], we found a real case of vul-
nerable application for industrial robots, which was made available
through ABB’s RobotApps platform7. The application runs as a
web server providing static and dynamic pages. This application
is affected by a directory traversal vulnerability allowing access to
arbitrary files, including the system’s configuration: An attacker is
able to reach secret targeted files, including sensitive configuraton,
via a well-formed HTTP request (e.g., ../../secret.txt). Listing
Listing 2 presents an example of vulnerable webserver in RAPID
with a directory traversal vulnerability.
File and Configuration Modification Functions Orthogonal
3.2.3
to file handling functions, untrustworthy data may be used as the
7As a result of a disclosure to ABB, this program is no longer publicly available.
DEF external_movement()
DECL axis pos_cmd
eki_init("ExiHwInterface")
eki_open("EkiHwInterface")
LOOP
eki_getreal("EkiHwInterface", "RobotCommand/Pos/#A1", pos_cmd.a1)
eki_getreal("EkiHwInterface", "RobotCommand/Pos/#A2", pos_cmd.a2)
eki_getreal("EkiHwInterface", "RobotCommand/Pos/#A3", pos_cmd.a3)
eki_getreal("EkiHwInterface", "RobotCommand/Pos/#A4", pos_cmd.a4)
eki_getreal("EkiHwInterface", "RobotCommand/Pos/#A5", pos_cmd.a5)
eki_getreal("EkiHwInterface", "RobotCommand/Pos/#A6", pos_cmd.a6)
PTP joint_pos_cmd
ENDLOOP
END
Listing 1: Vulnerable socket-controlled movement (KRL).
MODULE VulnWebServer
PROC main()
SocketCreate server;
SocketBind server, '0.0.0.0', 1234;
SocketListen server;
SocketAccept server, sock;
WHILE true DO
SocketReceive sock, \RawData:=data;
fileName := ParseCommand(data);
Open fileName, res;
ReadAndSendFile(\file:=res, \socket:=sock);
ENDWHILE
ENDPROC
ENDMODULE
Listing 2: Path traversal vulnerability. (RAPID)
5
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
M. Pogliani et al.
MODULE VulnCodeLoader
PROC main()
MODULE Dropper
PROC main_loop()
SocketCreate server_socket;
SocketBind server_socket,"0.0.0.0", 1234;
SocketListen server_socket;
WHILE loop DO
SocketAccept server_socket, client_socket;
SocketReceive client_socket \Str:=data;
function_name:=ParseFunction(data);
%function_name%;
! call procedure by name
WaitRob\ZeroSpeed;
SocketSend client_socket\Str:="R move completed";
SocketClose client_socket;
ENDWHILE
ENDPROC
ENDMODULE
Listing 3: Vulnerable code loader. (RAPID)
content to be written in configuration files, or passed as parame-
ter to configuration setting functions. If the data is not sanitized
(e.g., checked against a white list, or against an acceptable range),
an attacker may overwrite configuration values in an unexpected