# 【CTF 攻略】第14届全国大学生信息安全与对抗技术竞赛（ISCC 2017） Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**竞赛入口： **
****
作者：[Wfox ](http://bobao.360.cn/member/contribute?uid=116029976)
预估稿费：500RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**  
**
**竞赛简介**
信息安全已涉及到国家政治、经济、文化、社会和生态文明的建设，信息系统越发展到它的高级阶段，人们对其依赖性就越强，从某种程度上讲其越容易遭受攻击，遭受攻击的后果越严重。“网络安全和信息化是一体之两翼、驱动之双轮。没有网络安全就没有国家安全。”信息是社会发展的重要战略资源，国际上围绕信息的获取、使用和控制的斗争愈演愈烈，信息安全成为维护国家安全和社会稳定的一个焦点，各国都给以极大的关注和投入，优先发展信息安全产业。信息安全保障能力是综合国力、经济竞争实力和生存能力的重要组成部分，是世纪之交世界各国奋力攀登的至高点。
信息安全与对抗技术竞赛（ISCC：Information Security and Countermeasures
Contest），于2004年首次举办，2017年为第14届。经过多年的发展，ISCC已发展成为一项具有较高影响力的技术竞赛。
竞赛将不断追求卓越，为培养高素质信息安全对抗专业人才做出贡献。欢迎从事信息安全行业或者对信息安全感兴趣的人士参与到ISCC竞赛中来。
**  
**
**题解部分：Basic、Web、Misc、Mobile、Reverse、Pwn**
**Basic**
**0x01 Wheel Cipher**
提示是二战时期的密码，然后看观察下题目发现是轮盘密码
附上脚本
**0x02 公邮密码**
下载文件得到压缩包，其中pw WINDoWsSEViCEss.txt文件为空，而公邮密码.zip文件需要解压密码，刚开始还以为pw
WINDoWsSEViCEss.txt的文件被加密，后来才发现不是。用Winhex打开，没找到压缩包密码。就猜测可能是要爆破压缩包密码，把压缩包用Ziperello跑一下，得到密码为BIT，输入密码解压，得到Base64编码的字符串RmxhZzp7THkzMTkuaTVkMWYqaUN1bHQhfQ==，base64解码得到flag。
**0x03 说我作弊，需要证据**
下载后得到数据包文件，丢到wireshark里分析，Follow stream后发现一堆base64加密后的字符串
这题找到了原题
，直接运行脚本就拿到flag
**0x04 你猜猜。。**
复制字符串到winhex里粘贴，得到一个加密的zip压缩包
使用工具爆破压缩包，得到解压密码为123456，解压得到flag.txt
**0x05 神秘图片**
binwalk分析一个图片，发现有两张，用命令分离一下出来，然后是一个猪圈密码，解密出来即可
分离图片的一些trick 见 
**0x06 告诉你个秘密**
    636A56355279427363446C4A49454A7154534230526D6843
    56445A31614342354E326C4B4946467A5769426961453067
将两串字符串进行16进制解密
    cjV5RyBscDlJIEJqTSB0RmhC
    VDZ1aCB5N2lKIFFzWiBiaE0g
用base64解密得到
    r5yG lp9I BjM tFhB T6uh
    y7iJ QsZ bhM
得到一串似乎毫无规律的字符串，但仔细看还是可以知道是键盘密码，在自己键盘上比划下就知道了,最终得到
    tongyuan
加上flag格式提交即可
**0x07 PHP_encrypt_1**
题目的加密算法如下：
提示题目提示可知加密算法是可逆的，就直接google了下相应的加密算法，找到几乎一样的PHP加解密算法的实现，链接地址为：http://www.ctolib.com/topics-25812.html
**0x08 二维码**
扫描二维码，得到提示信息，flag是路由器的密码，通过binwalk分析图片发现有一个压缩包，使用binwalk -e 自动分离得到后发现需要密码,用
ziperello 爆破个八位数字，密码就出来了 , 然后得到一个cap的握手包，Kali Linux下使用aircrack-ng来跑包
    aircrack -ng C8-E7-D8-E8-E5- 88_handshake.cap -w fuzz.txt
fuzz.txt 是自己写的一个生成字典的脚本
最后跑出flag为 ： ISCC16BA
**Web**
**0x01 Web签到题，来和我换flag啊！**
POST提交hiddenflag=f1ag&flag=f1ag&FLAG=f1ag 得到flag
**0x02 WelcomeToMySQL**
这里可以上传php文件，但不允许.php .phtml后缀的件，上传个php5文件或者pht文件上去
写一个读取数据库的php，上传执行就得到flag
**0x03 where is your flag**
首先是猜get参数，访问/?id=1，返回了******flag is in
flag。访问/?id=2，页面返回空白，说明这个get参数是有用的。访问/?id=1%df%27出现了报错，说明存在宽字节注入
最后用注入工具盲注出flag
**0x04 我们一起来日站**
访问robots.txt，得到后台地址
打开后台之后提示查找后台页面，扫了一下找到admin.php
Password处存在注入，输入 'or+''=' ，得到flag
**0x05 自相矛盾**
这里用到了PHP弱类型的一个特性，之前比赛出过，我就不介绍了。
构造iscc={"bar1":"2017a","bar2":[[1],1,2,3,0]}&cat[0]=00isccctf2017&cat[1][]=1111&dog=%00，得到flag
**0x06 I have jpg,i upload a txt.**
这个题目的大概步骤是：上传文件 -> 输入文件名和重命名后的后缀 -> 随机产生文件名，并修改后缀
但是这里会检查文件内容，如果检测到php标签特征，就die
这里会将$re序列化成数组(后缀+数字)，然后读取文件名.txt，写入一个新的txt文件
这个可以构造一个数组，绕过$key==0，达到二次写入内容
这里找到了构造payload的方法，但是经过测试发现，这个KaIsA不是一般的凯撒密码，规律是大写字母+6、小写字母-6
根据规律写了个php脚本
先把 '1150772368','2'=>'404246424') 生成凯撒加密的字符串
经过二次写入成功把<?组在一起
再构造数组array('php','1450552711')
重命名成了php文件，再用burp请求就拿到了flag (不然就被Location带跑了)
**0x07 Simple sqli**
这道题的解法出乎出题人的意料吧。其实正确的题解应该是通过反序列化来解的。没想到超时不管用23333
**Misc**
**0x01 Misc-02**
打开显示文件损坏
这时想到docx是可以当做压缩包打开的，解压 眼见非实.docx
题目过去挺久了有点忘，flag应该是在/word/document.xml
**0x02 Misc-03**
分析流量包得到
其中大部分都是ftp协议，找到RETR即下载文件的数据包，把key.txt，pri.txt这些文件都导出来，最后用openssl解密拿到flag
**0x03 Misc-04**
开Disco.wav文件将其放到最大，发现前面几秒很有规律
我们以高的为1，低的为0得到flag的二进制
    110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101
转为ASCII，莫斯密码解密，得到flag
**0x04 数独游戏**
我们发现这些图片很像二维码并且刚好可以构成一个正方形，正好符合二维码的特征
将有数字的格子涂黑，得到一张二维码，这里我就不用PS了，太累了，写了个脚本把二维码生成出来
但是三个二维码定位点好像位置跑偏了，这里将这个三个点置换一下
最后得到一张可以扫描的二维码
将扫出的结果多层base64解码就拿到flag
**0x05 再见李华**
这道题想了好几个小时才做出来，脑洞有点大。
图片给了一个md5值，正好16位，拿到网上解密一下，发现无法解密，而图片中所给的md5值后面隐约还有几个字符，猜测是不是要爆破md5值后面的那些不可见的部分，下意识难度比较大，就又仔细看了下题目的提示：
“请输入密码，不少于1000个字”,貌似get到重点了，1000个字的密码？Excuse me？
突然有了新的思路，不会是给乔帮主回一封信，信的内容不少于1000个字，然后信的署名写上LiHua吧，不过很快就否定了这个想法，Email地址都没有，发给谁啊。
再次看提示，很快注意到了1000这个数字，正好是四位，会不会是四位未知字符再加上LiHua这个字符串就是压缩包的解压密码，说干就干：
根据提示猜测密码为????LiHua
使用ARCHPR这个神器，攻击类型选择掩码,因为题目提示没有任何特殊字符，因此暴力范围选项设置为勾选：所有大写拉丁文，所有小写拉丁文，所有数字，掩码设置为????LiHua，秒破密码
解压文件，拿到flag。
然后感觉貌似哪儿不太对劲，给的md5值没用上，于是尝试将15CCLiHua进行md5加密得到：1a4fb3fb5ee1230710f97e8fa2716916，其前16位正好是所给图片中的值，这时候才意识到是要爆破md5值的，感觉这道题目像是出现了非预期解法。
**Mobile**
**0x01 简单到不行**
下载apk文件 接着 解压APK，找到关键的so库
利用ida进行分析
找到了主要验证算法 所以只要还原出算法就可以了
运行一下
Base64解密即可得到flag
**0x02 突破！征服!**
先进行反编译apk
发现Check函数在动态链接库里定义，我们把apk里的库解压出来 得到so
因为so文件进行加了壳导致无法直接进行静态分析
所以进行ida动态分析
这里需要注意 在ida附加上去后 在设置中启用加载库时挂起
继续运行，在输入框里随便输入点东西，点确定（随便输点东西这点很重要，什么都不输就点确定会使应用崩溃，刚开始不知道，搞得我以为这应用用了什么高超的反调试技巧呢）
不出意外，点击确定后应用就会被挂起，ida可能会弹窗
我们选择直接点OK忽略它，当然也可以手动指定libtutu的路径
程序断在了linker，linker完成了tutu的去壳，我们把linker的部分全部步过过去
Linker跑完后用快捷键Ctrl + S查找tutu的起始地址，用起始地址+check函数的偏移量得到check的位置，跳转过去
可以看到可已经去掉了，现在我们可以dump内存，进行静态分析，也可以继续进行动态分析，这里我们选择继续动态分析。
分析之前我们先去把antiDebug函数处理一下
在hex view窗口中右键-edit可以对内存进行编辑，再次右键apply change可以保存跟改。设置hex view与IDA
view同步，可以方便的将指令和内存位置对应起来。
对check函数使用F5大法，发现有一部分是unknow的，这是ida的误识别，手动将那些区域指定为code类型即可
可以看到，check函数的核心是一个aes-128-ecb加密算法，万能的谷歌告诉我这是一个对称加密算法。主要流程：将输入的Java字符串转换为C风格字符串，加载密钥、密文，对输入的文字使用aes-128-ecb加密，和密文进行对比。
既然这是一个对称加密算法，那么我们把密文和密钥拿出来解密就可以得到flag了。
FLAG ：6ae379eaf3ccdad5
**0x03 再来一次**
将apk解包，查看主函数代码
再看了一下assets文件夹里，有个bfsprotect.jar，猜测软件加了壳，所以上神器，dump dex出来
这里祭出脱壳神器DexExtractor
相关链接：[http://www.wjdiankong.cn/apk脱壳圣战之-如何脱掉梆梆加固的保护壳/](http://www.wjdiankong.cn/apk%E8%84%B1%E5%A3%B3%E5%9C%A3%E6%88%98%E4%B9%8B-%E5%A6%82%E4%BD%95%E8%84%B1%E6%8E%89%E6%A2%86%E6%A2%86%E5%8A%A0%E5%9B%BA%E7%9A%84%E4%BF%9D%E6%8A%A4%E5%A3%B3/)
因为CrackThree默认没有任何权限，所以要给应用添加SD卡读写权限，后续才能将dex写到SD卡。
用apktool将CrackThree.apk解压，编辑AndroidManifest.xml，添加SD卡权限
apktool b 将目录打包成apk文件，签名之后拖到虚拟机里安装。
下载DexExtractor的镜像，替换system.img。然后开机，打开CreckThree，壳就已经脱了，dex已经解到/sdcard上
将dex文件拷出来，利用Decode.jar将dex解密
最后用jadx打开解出来的文件，得到Flag
**Reverse**
**0x01 Reverse01**
IDA 看main
我们发现程序的验证有两部分：
一个是
另一个是
第一个验证：
分两部分，一个是验证 l1nux ，一个是 验证crack
第二部分验证：
第一个判断：
看出来 a[0]=73,推出a[4]=33
第二个判断：
    a[1]=76 ; a[2]+a[3]=137 ;a[3]=70
    73,76,67,70,33==ILCF!
题目要求三个_连起来， flag{l1nux_crack_ILCF!}
**0x02 Reverse02**
拿到题目以后看整体逻辑：
我们发现是在test 里面处理判断：
上面有好多奇怪的数字，直接gdb 看一下 ，并且在ida中做好标记
这句在说以大括号结尾
其中这三句告诉我们，a[7]= a[10]= a[13]=’.’
这句是 a[5]=v5[5]=’1’ a[6]=v5[6]=’t’
这句是 a[8]=v6[0]=’i’ a[9]=v6[1]=’s’
下面的原理相同，找出每个地方对应的，最后得出：
flag{1t.is.5O.easy}
**0x03 Reverse03**
拿到程序以后，我们先看程序的结构：
通过看上面的函数，得到输入的数据来自注册表，于是我们新建注册表项：
程序的判断：
这里面有个wcstok函数，用于分割字符