                if type(utxo['id']) == type(u''): utxo['id'] = str(utxo['id'])
                if type(utxo['addr']) == type(u''): utxo['addr'] = str(utxo['addr'])
                if type(utxo['id']) != type(''): raise Exception("unknown type of id of output utxo")
                if utxo['id'] in new_utxo_ids: raise Exception("output utxo of same id({}) already exists.".format(utxo['id']))
                new_utxo_ids.add(utxo['id'])
                if type(utxo['amount']) != type(1): raise Exception("unknown type of amount of output utxo")
                if utxo['amount']  tot_input:
                raise Exception("You don't have enough amount of DDCoins in the input utxo! {}/{}".format(tot_input, tot_output))
            tx['hash'] = hash_tx(tx)
        block = create_block(block['prev'], block['nonce'], block['transactions'])
        block_hash = int(block['hash'], 16)
        if block_hash > difficulty: raise Exception('Please provide a valid Proof-of-Work')
        block['height'] = tail['height']+1
        if len(session['blocks']) > 50: raise Exception('The blockchain is too long. Use ./reset to reset the blockchain')
        if block['hash'] in session['blocks']: raise Exception('A same block is already in the blockchain')
        session['blocks'][block['hash']] = block
        session.modified = True
    def init():
        if 'blocks' not in session:
            session['blocks'] = {}
            session['your_diamonds'] = 0
            # First, the bank issued some DDCoins ...
            total_currency_issued = create_output_utxo(bank_address, 1000000)
            genesis_transaction = create_tx([], [total_currency_issued]) # create DDCoins from nothing
            genesis_block = create_block(EMPTY_HASH, 'The Times 03/Jan/2009 Chancellor on brink of second bailout for bank', [genesis_transaction])
            session['genesis_block_hash'] = genesis_block['hash']
            genesis_block['height'] = 0
            session['blocks'][genesis_block['hash']] = genesis_block
            # Then, the bank was hacked by the hacker ...
            handout = create_output_utxo(hacker_address, 999999)
            reserved = create_output_utxo(bank_address, 1)
            transferred = create_tx([total_currency_issued['id']], [handout, reserved], bank_privkey)
            second_block = create_block(genesis_block['hash'], 'HAHA, I AM THE BANK NOW!', [transferred])
            append_block(second_block)
            # Can you buy 2 diamonds using all DDCoins?
            third_block = create_block(second_block['hash'], 'a empty block', [])
            append_block(third_block)
    def get_balance_of_all():
        init()
        tail = find_blockchain_tail()
        utxos = calculate_utxo(tail)
        return calculate_balance(utxos), utxos, tail
    @app.route(url_prefix+'/')
    def homepage():
        announcement = 'Announcement: The server has been restarted at 21:45 04/17. All blockchain have been reset. '
        balance, utxos, _ = get_balance_of_all()
        genesis_block_info = 'hash of genesis block: ' + session['genesis_block_hash']
        addr_info = 'the bank\'s addr: ' + bank_address + ', the hacker\'s addr: ' + hacker_address + ', the shop\'s addr: ' + shop_address
        balance_info = 'Balance of all addresses: ' + json.dumps(balance)
        utxo_info = 'All utxos: ' + json.dumps(utxos)
        blockchain_info = 'Blockchain Explorer: ' + json.dumps(session['blocks'])
        view_source_code_link = "View source code"
        return announcement+('\r\n\r\n'.join([view_source_code_link, genesis_block_info, addr_info, balance_info, utxo_info, blockchain_info]))
    @app.route(url_prefix+'/flag')
    def getFlag():
        init()
        if session['your_diamonds'] >= 2: return FLAG()
        return 'To get the flag, you should buy 2 diamonds from the shop. You have {} diamonds now. To buy a diamond, transfer 1000000 DDCoins to '.format(session['your_diamonds']) + shop_address
    def find_enough_utxos(utxos, addr_from, amount):
        collected = []
        for utxo in utxos.values():
            if utxo['addr'] == addr_from:
                amount -= utxo['amount']
                collected.append(utxo['id'])
            if amount ')
    def free_ddcoin(address):
        balance, utxos, tail = get_balance_of_all()
        if balance[bank_address] == 0: return 'The bank has no money now.'
        try:
            address = str(address)
            addr_to_pubkey(address) # to check if it is a valid address
            transferred = transfer(utxos, bank_address, address, balance[bank_address], bank_privkey)
            new_block = create_block(tail['hash'], 'b@cKd00R tr1993ReD', [transferred])
            append_block(new_block)
            return str(balance[bank_address]) + ' DDCoins are successfully sent to ' + address
        except Exception, e:
            return 'ERROR: ' + str(e)
    DIFFICULTY = int('00000' + 'f' * 59, 16)
    @app.route(url_prefix+'/create_transaction', methods=['POST'])
    def create_tx_and_check_shop_balance():
        init()
        try:
            block = json.loads(request.data)
            append_block(block, DIFFICULTY)
            msg = 'transaction finished.'
        except Exception, e:
            return str(e)
        balance, utxos, tail = get_balance_of_all()
        if balance[shop_address] == 1000000:
            # when 1000000 DDCoins are received, the shop will give you a diamond
            session['your_diamonds'] += 1
            # and immediately the shop will store the money somewhere safe.
            transferred = transfer(utxos, shop_address, shop_wallet_address, balance[shop_address], shop_privkey)
            new_block = create_block(tail['hash'], 'save the DDCoins in a cold wallet', [transferred])
            append_block(new_block)
            msg += ' You receive a diamond.'
        return msg
    # if you mess up the blockchain, use this to reset the blockchain.
    @app.route(url_prefix+'/reset')
    def reset_blockchain():
        if 'blocks' in session: del session['blocks']
        if 'genesis_block_hash' in session: del session['genesis_block_hash']
        return 'reset.'
    @app.route(url_prefix+'/source_code')
    def show_source_code():
        source = open('serve.py', 'r')
        html = ''
        for line in source:
            html += line.replace('&','&amp;').replace('\t', '&nbsp;'*4).replace(' ','&nbsp;').replace('','&gt;').replace('\n', '')
        source.close()
        return html
    if __name__ == '__main__':
        app.run(debug=False, host='0.0.0.0')
其余函数功能：
addr_to_pubkey：检查地址有效性
pubkey_to_address：生成钱包地址
gen_addr_key_pair：生成钱包地址
create_output_utxo：创建一个utxo
create_tx：创建一个tx
create_block：创建一个block
find_blockchain_tail：查询最后一个block
calculate_utxo：得到所有utxo
calculate_balance：计算钱包的余额
verify_utxo_signature：验证utxo签名
append_block：添加块
init：初始化函数
get_balance_of_all：得到所有block，所有地址和utxo
homepage：web主页
getFlag：flag获取页面
EXP: 重命名源代码为btc.py
    # -*- encoding: utf-8 -*-    
    import btc, rsa, uuid, json, copy
    #创世块的hash
    genies_hash = "92875ca628cd0890020f6a74f3011b611db814f30300f729f20b5a88c49e3e44"
    #黑客转账999999,所用的input和签名
    input,signature = ("9018b356-cb1d-44c9-ab4e-bf15a8b2f95c","161ae7eac89f71d50d1019d21288dce23cae6cbb587998df9010e3ff3c80ee8e4c06bd70555604be85ca0869136b3966")
    #商店地址
    shop_address = "b81ff6d961082076f3801190a731958aec88053e8191258b0ad9399eeecd8306924d2d2a047b5ec1ed8332bf7a53e735"
    txout_id = str(uuid.uuid4())
    #工作量证明
    def pow(b, difficulty, msg=""):
        nonce = 0
        while nonce