andmergejoinoperatorsrespectively.) Also,thebestjoinpathfor n n−1 1
calchildrelationsandpartitioningconditionsofJ andJ form
S  T withaninterestingorderonS.aistheunionofthechild- n−1 1
the input to J ’s matching phase (Section 4). The output of the
joinpaths(S ∪S )MJ(T ∪T )and(S ∪S )MJT . n
12 13 1 2 22 23 3 matchingphaseformstheinputtoJ ’sclusteringphase(Section
However,itcanstillbethecasethattheoptimalplanforQ is n
1 5)which,inturn,outputsJ ’slogicalchildjoins. Notethatboth
plan Q P shown in Figure 3. Note that Q P contains (S ∪ n
1 2 1 2 12 thematchingandclusteringphasesworkatthelogicallevel,inde-
S )MJ(T ∪T ): theinterestingorderonS.ainthischildjoin
13 1 2 pendentofphysicalplans(paths).
ledtoabetteroverallplan. However,theinterestingorderonS.a
The logical relations are the entities for which the best paths
wasnotusefulinthecaseofthesecondchildjoinofS  T, so
foundsofarduringtheenumerationprocessareretained.Thelog-
(S ∪S )MJT isnotusedinQ P .Simplyaddinginteresting
22 23 3 1 2 icalchildjoinsbehaveinthesamewayastheirparentjoins,retain-
partitionsalongsideinterestingorderstoabottom-upoptimizerwill
ingthebestpathsforeachinterestingorderandthebestunordered
notenableittofindtheoptimalplanQ P .
1 2 path. Hence,thenumberofpathsretainedislinearinthenumber
TheoptimizerwasnotabletogenerateplanQ P intheabove
1 2 ofchildjoinsperparentjoin(insteadofexponentialasinthecase
example because it did not consider interesting orders indepen-
whenpartitionsaretreatedasphysicalproperties). Theoptimizer
dently for each child join. Instead, the optimizer considered in-
considers all child-join paths with interesting orders during path
terestingordersandinterestingpartitionsattheleveloftheparent
creationforhigherchildjoins,whileensuringtheproperty:
tables (R, S, T) and joins of parent tables (R  S, R  T,
Property3. Pathswithinterestingordersforasinglechildjoincan
Name Features
beusedlaterupthelattice,independentfromallotherchildjoins
ofthesameparentrelation.  Basic Per-tablepartitionpruningonly(likeMySQLandPost-
greSQL).OurevaluationusesthePostgreSQL8.3.7op-
Suppose,theoptimizerisconsideringjoiningST withRtocreate timizerastheBasicoptimizer
paths for RST. The output of the clustering phase will produce Intermediate Per-tablepartitionpruningandone-to-onepartition-wise
the two child-join pairs (S S T T ,R ) and (S S T ,R ). joins(likeOracleandSQLServer).TheIntermediateop-
12 13 1 2 1 22 23 3 2
Joinpathsforthesetwochildjoinswillbecreatedandcostedin- timizerisimplementedasavariantoftheAdvancedop-
timizerthatchecksforandcreatesone-to-onepartition-
dependentlyfromeachother, usinganypathswithinterestingor-
wisejoinpairsinplaceoftheregularmatchingandclus-
dersandjoinoperatorsthatareavailable. Thebestjoinpathsfor
teringphases
((S 12 ∪S 13)  (T 1 ∪T 2))  R 1 and((S 22 ∪S 23)  T 3)  Advanced Per-tablepartitionpruningandallthejoinoptimizations
R 2) will be retained in the logical relations R 1S 12S 13T 1T 2 and forpartitionedtablesasdescribedinthepaper
R S S T respectively(seeFigure8).
2 22 23 3
Table2:Optimizercategoriesconsideredintheevaluation
Foreachparentrelation, thepathrepresentingtheunionofthe
best child-join paths is created only at the end of each enumera-
7. EXTENDINGOURTECHNIQUESTO
tionlevel3 anditisretainedonlyifitisthebestpath. Hence,the
PARALLELDATABASESYSTEMS
optimizer will consider all join orders for each child join before
creatingtheunion,leadingtothefollowingproperty: WhilethispaperfocusesoncentralizedDBMSs,ourworkisalso
Property4. Theoptimizerwillconsiderplanswheredifferentchild usefulinparallelDBMSslikeAsternCluster[3],Teradata[22],and
joins of the same parent relation can have different join orders HadoopDB[1]whichtrytopartitiontablessuchthatmostqueries
and/orjoinoperators.  intheworkloadneedintra-nodeprocessingonly. Acommondata
placementstrategyinparallelDBMSsistousehashpartitioningto
Wehavealreadyseenhowtheoptimizercreatedjoinpaths((S ∪
12
distributetuplesinatableamongthenodesN ,...,N ,andthen
S )  (T ∪T ))  R and((S ∪S )  T )  R when 1 k
13 1 2 1 22 23 3 2
userange/listpartitioningofthetupleswithineachnode.Ourtech-
joiningST withR. Later,theoptimizerwillconsiderjoiningRS
niquesextendtothissetting:iftwojoiningtablesRandShavethe
withT,creatingjoinpathsfor(R  (S ∪S ))  (T ∪T )
1 12 13 1 2
samehashpartitioningfunctionandthesamenumberofpartitions,
and(R  (S ∪S ))  T . Itispossiblethatthebestjoin
2 22 23 3
thenapartition-wisejoinR S iscreatedforeachnodeN .Ifa
path for ((S ∪S )  (T ∪T ))  R is better than that i i i
12 13 1 2 1
secondaryrange/listpartitioninghasbeenusedtofurtherpartition
for(R  (S ∪S ))  (T ∪T ),whiletheoppositeoccurs
1 12 13 1 2
R andS atanindividualnode,thenourtechniquescanbeapplied
between((S ∪S )T )R and(R (S ∪S ))T ; i i
22 23 3 2 2 22 23 3
directlytoproducechildjoinsforR S .
whichleadstotheplanQ P inFigure3. i i
1 2
Anotherdataplacementstrategypopularindatawarehousesis
Property5. Optimalityguarantee: Bytreatingpartitioningasa
toreplicatethedimensiontablesonallnodes,whilethefacttable
logicalproperty,ourbottom-upoptimizerwillfindtheoptimalplan
ispartitionedacrossthenodes. Thefact-tablepartitionaswellas
intheextendedplanspace. 
thedimensiontablesmaybefurtherpartitionedoneachnode, so
This property is a direct consequence of Properties 3 and 4. We ourtechniquescanbeusedtocreatechildjoinsateachnode. In
have extended the plan space to include plans containing unions suchsettings, multi-dimensionalpartitioningofthefacttablecan
ofchildjoins. Eachchildjoinisenumeratedduringthetraditional improvequeryperformancesignificantlyasweshowinSection8.
bottom-upoptimizationprocessinthesamewayasitsparent;the
8. EXPERIMENTALEVALUATION
pathsarebuiltbottom-up,interestingordersaretakenintoconsid-
Thepurposeofthissectionistoevaluatetheeffectivenessandef-
eration, and the best paths are retained. Since each child join is
ficiencyofouroptimizationtechniquesacrossawiderangeoffac-
optimizedindependently,thetopmostunionofthebestchild-join
torsthataffecttablepartitioning. Wehaveprototypedallourtech-
pathsistheoptimalunionofthechildjoins.Finally,recallthatthe
niques in the PostgreSQL 8.3.7 optimizer. All experiments were
unionofthebestchild-joinpathsiscreatedattheendofeachenu-
runonAmazonEC2nodesofm1.largetype.Eachnodehas7.5GB
merationlevelandretainedonlyifitisthebestplanforitsparent
RAM,dual-core2GHzCPU,and850GBofstorage. Weusedthe
join. Therefore,thefullextendedplanspaceisconsideredandthe
TPC-Hbenchmarkwithscalefactorsrangingfrom10to40,with
optimizer will be able to find the optimal plan (given the current
30beingthedefaultscale. FollowingdirectionsfromtheTPC-H
databaseconfiguration,costmodel,andphysicaldesign).
StandardSpecifications[23],wepartitionedtablesonlyonprimary
Traditionally,grouping(andaggregation)operatorsareaddedon
key, foreign key, and/or date columns. We present experimental
topofthephysicaljointreesproducedbythebottom-upenumera-
resultsforarepresentativesetof10outofthe22TPC-Hqueries,
tionprocess[19]. Inthiscase,interestingpartitionsareusefulfor
rangingfrom2-wayuptothemaximumpossible8-wayjoins. All
pushingthegroupingbelowtheunionofthechildjoins,inanat-
resultspresentedareaveragedoverthreequeryexecutions.
tempttocreatelessexpensiveexecutionpaths.Withourapproach,
pathswithinterestingpartitionsonthegroupingattributescanbe 8.1 ExperimentalSetup
constructed at the top node of the enumeration lattice, and used Themostimportantfactoraffectingqueryperformanceoverpar-
lateronwhileconsideringthegroupingoperator. titionedtablesisthepartitioningschemethatdetermineswhichta-
Treating partitions as a property of the logical relations allows blesarepartitionedandonwhichattribute.Weidentifiedtwocases
foracleanseparationbetweentheenumerationprocessofthelog- thatariseinpractice:
ical relations and the construction of the physical plans. Hence, 1. TheDBAhasfullcontrolinselectinganddeployingtheparti-
our algorithms are applicable to any database system that uses a tioningschemetomaximizequery-processingefficiency.
bottom-upoptimizer.Moreover,theycanbeadaptedfornon-database 2. The partitioning scheme is forced either partially or fully by
dataprocessingsystemslikeSCOPEandHivethatoffersupportfor practicalreasonsbeyondquery-processingefficiency.
tablepartitioningandjoins. Forevaluationpurposes,wecategorizedqueryoptimizersintothree
3Enumerationlevelnreferstothelogicalrelationsrepresentingall categories—Basic,Intermediate,andAdvanced—basedonhowthey
possiblen-wayjoins. exploit partitioning information to perform optimization. Details
Figure9:(a)Executiontimes,(b)Optimizationtimes,(c)MemoryusageforTPC-HqueriesoverPS-J
Figure10:(a)Executiontimes,(b)Optimizationtimes,(c)MemoryusageforTPC-Hqueries5and8overthreepartitioningschemes
Partition Table Partitioning Numberof thethreequeryoptimizersforthetenTPC-Hqueriesrunningonthe
Scheme Attributes Partitions
database with the PS-J scheme. The Intermediate and Advanced
PS-P orders o_orderdate 28
optimizers are able to generate a better plan than the Basic opti-
lineitem l_shipdate 85
mizerforallqueries, providinguptoanorderofmagnitudeben-
PS-J orders o_orderkey 48
efit for some of them. Note that the Intermediate and Advanced
lineitem l_orderkey 48
partsupp ps_partkey 12 optimizers produce the same plan in all cases, since one-to-one
part p_partkey 12 partition-wisejoinsaretheonlyjoinoptimizationoptionforboth
PS-B orders o_orderkey,o_orderdate 72 optimizersforthePS-Jscheme.
lineitem l_orderkey,l_shipdate 120 Figure9(b)presentsthecorrespondingoptimizationtimesforthe
partsupp ps_partkey 12
queries. TheIntermediateoptimizerintroducessomeoverheadon
part p_partkey 6
optimizationtime—averageof17%andworstcaseof21%dueto
PS-C orders o_orderkey,o_orderdate 36
lineitem l_orderkey,l_shipdate 168 thecreationofchild-joinpaths—comparedtoBasic.Theadditional
partsupp ps_partkey 30 overheadintroducedbytheAdvancedoptimizeroverIntermediate
part p_partkey 6 isonaveragelessthan3%. Thisoverheadisduetothematching
customer c_custkey 6 andclusteringalgorithms. Overall, theoptimizationoverheadin-
troduced by Advanced is low, and is most definitely gained back
Table3:PartitioningschemesforTPC-H
duringexecutionaswecanseebycomparingthey-axesofFigures
9(a) and 9(b) (execution time is in minutes whereas optimization
aregiveninTable2. Wecomparetheoptimizersonthreemetrics
timeisinmilliseconds). ThememoryoverheadsshowninFigure
usedtoevaluateoptimizers[12]: (i)queryexecutiontime,(ii)op-
9(c)followthesametrend:averagememoryoverheadofAdvanced
timizationtime,and(iii)optimizer’smemoryusage.
overBasicisaround7%,andtheworstcaseis10%.
Queryperformanceisrelateddirectlytotheoptimizercapabil-
8.2 ResultsfromDBA-ControlledSchemes
itiesandthepartitioningschemeusedinthedatabase. Figure10
Given the capabilities of the query optimizer, the DBA has a showstheperformanceresultsforTPC-Hqueries5and8forthe
spectrumofchoicesregardingthepartitioningscheme[26].Inone threeoptimizersoverdatabaseswithdifferentpartitioningschemes.
extreme,theDBAcanpartitiontablesbasedonattributesappearing (Resultsforotherqueriesaresimilar.) Sinceadatabaseusingthe
infilterconditionsinordertotakemaximumadvantageofpartition PS-Pschemeonlyallowsforpartitionpruning, allthreeoptimiz-
pruning. Attheotherextreme,theDBAcanpartitiontablesbased ers behave in an identical manner. A PS-J scheme on the other
onjoiningattributesinordertotakemaximumadvantageofone- hand,doesnotallowforanypartitionpruningsincejoinattributes
to-onepartition-wisejoins; assumingtheoptimizersupportssuch donotappearinfilterconditionsinthequeries. Hence,theBasic
joins(liketheIntermediateoptimizerinTable2). Inaddition,our optimizerperformspoorlyinmanycases,whereastheIntermediate
techniquesnowenablethecreationofmultidimensionalpartitions andAdvancedoptimizerstakeadvantageofpartition-wisejoinsto
totakeadvantageofbothpartitionpruningandpartition-wisejoins. producebetterplanswithverylowoverhead.
Wewillrefertothethreeaboveschemesaspartitioningschemes ThepresenceofmultidimensionalpartitionsinaPS-Bscheme
respectivelyforpruning(PS-P),forjoins(PS-J),andforboth(PS- prevents the Intermediate optimizer from generating any one-to-
B).Table3listsallpartitioningschemesusedinourevaluation. one partition-wise joins, but it can still perform partition pruning
Figure9(a)showstheexecutiontimesfortheplansselectedby