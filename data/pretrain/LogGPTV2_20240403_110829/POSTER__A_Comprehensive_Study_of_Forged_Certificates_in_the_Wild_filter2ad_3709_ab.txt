### SSL Man-in-the-Middle Attack and Detection Methods

#### Introduction
Even in selective cases, attackers can modify transmitted data. Figure 2 illustrates an SSL man-in-the-middle (MITM) attack using a forged certificate between a browser and an HTTPS server. Below, we outline the basic steps of a generic SSL MITM attack:

1. **Insertion into the Transport Path:**
   The attacker first inserts itself into the communication path between the client and the server. This can be achieved by setting up a malicious WiFi hotspot or by exploiting vulnerabilities such as ARP poisoning, DNS spoofing, or BGP hijacking on trusted networks. The attacker may also configure itself as the client's proxy server by exploiting auto-configuration protocols like PAC/WPAD. At this stage, the attacker controls the client's traffic and acts as a relay between the client and the server.

2. **Detection and Impersonation:**
   When the attacker detects an SSL `ClientHello` message from the client, it determines that the client is initiating an SSL connection. The attacker then impersonates the victim server and establishes an SSL connection with the client using a forged SSL certificate.

3. **Parallel Connection to the Legitimate Server:**
   Simultaneously, the attacker creates a separate SSL connection to the legitimate server, impersonating the client. Once both SSL connections are established, the attacker relays all encrypted messages between the client and the server.

#### Existing Detection Techniques

**Web Tripwires:**
- **Description:** Web Tripwires [24] uses client-side JavaScript code to detect in-flight modifications to web pages.
- **Findings:** In a study of 50,000 unique IP addresses, over 1% observed altered web pages. About 70% of these modifications were caused by user-installed software injecting unwanted JavaScript. Some ISPs and enterprise firewalls were also found to inject ads or compress traffic. Additionally, three instances of client-side malware modifying web pages were identified.
- **Limitations:** Web Tripwires does not detect passive eavesdropping or SSL MITM attacks. It is designed for unencrypted web traffic.

**Content Security Policy (CSP):**
- **Description:** CSP [29] allows websites to restrict browsers to load content only from trusted sources and report violations back to the server.
- **Functionality:** CSP can detect untrusted scripts injected into protected pages and report them to the website.
- **Limitations:** Like Web Tripwires, CSP does not detect eavesdropping on SSL connections.

**Browser Plugins:**
- **Description:** Browser plugins, such as Java and Flash Player, provide more network capabilities than JavaScript, including opening raw network sockets and performing DNS requests.
- **Examples:**
  - **Illuminati [25]:** Used Java applets to identify whether clients were connecting through proxies or NAT devices.
  - **Jackson et al. [26, 27]:** Conducted studies using Java and Flash Player to find web proxy vulnerabilities, including multi-pin DNS rebinding and cache poisoning.
  - **ICSI Netalyzer [28]:** Used a signed Java applet to perform extensive tests on the client’s network connectivity, such as detecting DNS manipulations.
- **Limitations:** These methods require additional software or browser extensions, which may not be feasible for large-scale deployment.

#### New SSL Tamper Detection Method

In Section II-D, we discussed existing techniques for websites to detect network tampering. However, none of these methods (without browser modifications) effectively detect SSL MITM attacks. In this section, we present a new method for detecting SSL MITM attacks from the website’s perspective without modifying current browsers.

**Threat Model:**
- **Active Network Attacker:** The attacker has control over the victim’s network connection but not the website. The goal is to read encrypted messages between the client and the HTTPS website. The attacker may use a trusted or untrusted certificate.
- **Local Attacker:** A piece of software running on the client that can modify the trusted CA store and manipulate network connections. Such local attackers are stronger and not within the scope of SSL protocol protection.

**Design:**
- **Challenges:** Websites cannot distinguish a legitimate client from an attacker via the SSL handshake. To detect interception, we observe the server’s certificate from the client’s perspective. If the client receives a server certificate that does not match the website’s legitimate certificate, it indicates tampering.
- **Implementation:**
  - **Client-Side Applet:** We developed a JavaScript code snippet to observe SSL certificates, but current browser APIs do not allow direct access. Instead, we used browser plugins (Flash Player and Java) to implement a client-side applet.
  - **Flash Player Applet:**
    - **Socket Connection:** The SWF applet opens a socket connection to the HTTPS server, performs an SSL handshake, records the handshake, and reports the certificate chain to our logging servers.
    - **Socket Policy File:** A valid socket policy file must be served at the HTTPS server to permit socket access.
    - **SSL Handshake:** The applet initiates an SSL handshake, records the `ServerHello` and `Certificate` messages, and sends the recorded data to the log server.
  - **Java Applet:**
    - **Socket Access:** Java applets can create socket connections without additional access requests but are blocked by default on some platforms.
    - **User Interaction:** Running a Java applet may require user interaction, which is too obtrusive for our experiment.

**Lenient Certificate Extraction:**
- **Extraction Process:** We implemented the SSL handshake process and extracted certificates from the raw byte dump of the SSL handshake. We parsed the SSL messages leniently to handle slight deviations from the standards, which could be due to transmission errors or software errors in intercepting proxies.
- **Post-Processing:** We sent the raw bytes to our log servers for post-processing, preserving the SSL handshake bytes for further investigation.

**Implementation:**
- **Applet Deployment:** We deployed the SWF file (2.1 KB) and Java applet (2.5 KB) on Facebook’s servers, sampling a small portion of total connections. The applets are programmed to load after the original web page to avoid affecting loading time.

By leveraging these techniques, we aim to detect SSL MITM attacks in real-world scenarios from a website’s perspective without requiring browser modifications.