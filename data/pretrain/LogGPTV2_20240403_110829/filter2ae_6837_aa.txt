**作者：天融信阿尔法实验室  
原文链接：**
## 前言
安全研究员`vakzz`于4月7日在hackerone上提交了一个关于gitlab的[RCE漏洞](https://hackerone.com/reports/1154542
"hackerone gitlab
rce")，在当时并没有提及是否需要登录gitlab进行授权利用，在10月25日该漏洞被国外安全公司通过日志分析发现未授权的[在野利用](https://security.humanativaspa.it/gitlab-ce-cve-2021-22205-in-the-wild/
"gitlab在野利用")，并发现了新的利用方式。根据官方[漏洞通告](https://about.gitlab.com/releases/2021/04/14/security-release-gitlab-13-10-3-released/ "官方漏洞通告")页面得知安全的版本为13.10.3、13.9.6 和
13.8.8。我将分篇深入分析该漏洞的形成以及触发和利用。 **本篇将复现分析携带恶意文件的请求是如何通过gitlab传递到exiftool进行解析的**
，接下来将分析exiftool漏洞的原理和最后的触发利用。预计会有两到三篇。希望读者能读有所得，从中收获到自己独特的见解。在本篇文章的编写中要感谢[@chybeta](https://t.zsxq.com/VFmuJAy
"CVE-2021-22205 Gitlab 前台RCE 分析之
0、1、2")和[@rebirthwyw](https://blog.rebirthwyw.top/2021/11/01/analysis-of-CVE-2021-22205-pre-auth-part/ "analysis of CVE-2021-22205 pre-auth
part")两位师傅和团队内的师傅给予的帮助，他们的文章和指点给予了我许多好的思路。
## gitlab介绍
GitLab是由GitLabInc.开发，使用MIT许可证的基于网络的Git仓库管理工具，且具有wiki和issue跟踪功能。使用Git作为代码管理工具，并在此基础上搭建起来的web服务。
GitLab由乌克兰程序员DmitriyZaporozhets和ValerySizov开发。后端框架采用的是Ruby on Rails，它使用
**Ruby语言** 写成。后来，一些部分用 **Go语言** 重写。gitlab-ce即为社区免费版，gitlab-ee为企业收费版。下面附上两张GitLab的单机部署架构图介绍其相应组件。
可以看到在gitlab的组成中包含的各种组件，可以通过两个关键入口访问，分别是HTTP/HTTPS(TCP 80,443)和SSH(TCP
22)，请求通过nginx转发到Workhorse，然后Workhorse和Puma进行交互，这里我们着重介绍下通过Web访问的组件GitLab
Workhorse。
> Puma 是一个用于 Ruby 应用程序的简单、快速、多线程和高度并发的 HTTP 1.1 服务器，用于提供GitLab网页和API。从 GitLab
> 13.0 开始，Puma成为了默认的Web服务器，替代了之前的Unicorn。而在GitLab 14.0中，Unicorn 从Linux
> 包中删除，只有Puma可用。
## GitLab Workhorse介绍
GitLab
Workhorse是一个使用go语言编写的敏捷反向代理。在[gitlab_features](https://gitlab.com/gitlab-org/gitlab/-/blob/master/workhorse/doc/architecture/gitlab_features.md
"Workhorse的作用")说明中可以总结大概的内容为，它会处理一些大的HTTP请求，比如 **文件上传** 、文件下载、Git
push/pull和Git包下载。其它请求会反向代理到GitLab
Rails应用。可以在[GitLab](https://gitlab.com/gitlab-org/gitlab/
"GitLab源码")的项目路径`lib/support/nginx/gitlab`中的nginx配置文件内看到其将请求转发给了GitLab
Workhorse。默认采用了unix socket进行交互。
这篇文档还写到，GitLab Workhorse在实现上会起到以下作用： \- 理论上所有向gitlab-Rails的请求首先通过上游代理，例如 NGINX
或 Apache，然后将到达gitlab-Workhorse。 \- workhorse 能处理一些无需调用 Rails 组件的请求，例如静态的
js/css 资源文件，如以下的路由注册：
    u.route(
        "", `^/assets/`,//匹配路由
      //处理静态文件
        static.ServeExisting(
        u.URLPrefix,
        staticpages.CacheExpireMax,
        assetsNotFoundHandler,
        ),
        withoutTracing(), // Tracing on assets is very noisy
    )
  * workhorse能修改Rails组件发来的响应。例如：假设你的Rails组件使用`send_file` ，那么gitlab-workhorse将会打开磁盘中的文件然后把文件内容作为响应体返回给客户端。
  * gitlab-workhorse能接管向Rails组件询问操作权限后的请求，例如处理`git clone`之前得确认当前客户的权限，在向Rails组件询问确认后workhorse将继续接管`git clone`的请求，如以下的路由注册：
    u.route("GET", gitProjectPattern+`info/refs\z`, git.GetInfoRefsHandler(api)),
    u.route("POST", gitProjectPattern+`git-upload-pack\z`, contentEncodingHandler(git.UploadPack(api)), withMatcher(isContentType("application/x-git-upload-pack-request"))),
    u.route("POST", gitProjectPattern+`git-receive-pack\z`, contentEncodingHandler(git.ReceivePack(api)), withMatcher(isContentType("application/x-git-receive-pack-request"))),
    u.route("PUT", gitProjectPattern+`gitlab-lfs/objects/([0-9a-f]{64})/([0-9]+)\z`, lfs.PutStore(api, signingProxy, preparers.lfs), withMatcher(isContentType("application/octet-stream")))
  * workhorse 能修改发送给 Rails 组件之前的请求信息。例如：当处理 Git LFS 上传时，workhorse 首先向 Rails 组件询问当前用户是否有执行权限，然后它将请求体储存在一个临时文件里，接着它将修改过后的包含此临时文件路径的请求体发送给 Rails 组件。
  * workhorse 能管理与 Rails 组件通信的长时间存活的websocket连接，代码如下：
    // Terminal websocket
    u.wsRoute(projectPattern+`-/environments/[0-9]+/terminal.ws\z`, channel.Handler(api)),
    u.wsRoute(projectPattern+`-/jobs/[0-9]+/terminal.ws\z`, channel.Handler(api)),
使用`ps -aux | grep "workhorse"`命令可以看到gitlab-workhorse的默认启动参数
## go语言前置知识
我会简要介绍一下漏洞涉及的相关语言前置知识，这样才能够更深入的理解该漏洞，并将相关知识点串联起来，达到举一反三。
> 函数、方法和接口
在golang中函数和方法的定义是不同的，看下面一段代码
    package main
    //Person接口
    type Person interface{
        isAdult() bool
    }
    //Boy结构体
    type Boy struct {
        Name string
        Age  int
    }
    //函数
    func NewBoy(name string, age int) *Boy {
        return &Boy{
            Name: name,
            Age:  age,
        }
    }
    //方法
    func (p *Boy) isAdult() bool {
        return p.Age > 18
    }
    func main() {
        //结构体调用
        b := NewBoy("Star", 18)
        println(b.isAdult())
        //将接口赋值b,使用接口调用
        var p Person = b
        println(p.isAdult())//false
    }
其中`NewBoy`为函数，`isAdult`为方法。他们的区别是方法在func后面多了一个接收者参数，这个接受者可以是一个结构体或者接口，你可以把他当做某一个"类"，而`isAdult`就是实现了该类的方法。
通过`&`取地址操作可以将一个结构体实例化，相当于`new`，可以看到在`NewBoy`中函数封装了这种操作。在main函数中通过调用`NewBoy`函数实例化Boy结构体，并调用了其方法`isAdult`。
关于接口的实现在Go语言中是隐式的。两个类型之间的实现关系不需要在代码中显式地表示出来。Go语言中没有类似于implements 的关键字。
Go编译器将自动在需要的时候检查两个类型之间的实现关系。 **在类型中添加与接口签名一致的方法就可以实现该方法。**
如`isAdult`的参数和返回值均与接口`Person`中的方法一致。所以在main函数中可以直接将定义的接口`p`赋值为实例结构体`b`。并进行调用。
> net/http
在golang中可以通过几行代码轻松实现一个http服务
    package main
    import (
         "net/http"
         "fmt"
    )
    func main() {
        http.HandleFunc("/", h)
        http.ListenAndServe(":2333",nil)
    }
    func h(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintln(w, "hello world")
    }
其中的`http.HandleFunc()`是一个注册函数，用于注册路由。具体实现为绑定路径`/`和处理函数`h`的对应关系，函数`h`的类型是`(w
http.ResponseWriter, r
*http.Request)`。而`ListenAndServe()`函数封装了底层TCP通信的实现逻辑进行连接监听。第二个参数用于全局请求处理。如果没有传入自定义的handler。则会使用默认的`DefaultServeMux`对象处理请求最后到达`h`处理函数。
    type Handler interface {
        ServeHTTP(ResponseWriter, *Request)
    }
在go中的任何结构体，只要实现了上方的`ServeHTTP`方法，也就是实现了`Handler`接口，并进行了路由注册。内部就会调用其ServeHTTP方法处理请求并返回响应。但是我们看到函数`h`并不是一个结构体方法，为什么可以处理请求呢？原来在`http.HandleFunc()`函数调用后，内部还会调用`HandlerFunc(func(ResponseWriter,
*Request))`将传入的函数`h`转换为一个具有ServeHTTP方法的handler。
具体定义如下。`HandlerFunc`为一个函数类型，类型为`func(ResponseWriter,
*Request)`。这个类型有一个方法为`ServeHTTP`，实现了这个方法就实现了Handler接口，`HandlerFunc`就成了一个Handler。上方的调用就是类型转换。
    type HandlerFunc func(ResponseWriter, *Request)
    // ServeHTTP calls f(w, r).
    func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
        f(w, r)
    }
当调用其ServeHTTP方法时就会调用函数`h`本身。
> 中间件
框架中还有一个重要的功能是中间件，所谓中间件，就是连接上下级不同功能的函数或者软件。通常就是包裹函数为其提供和添加一些功能或行为。前文的`HandlerFunc`就能把签名为`func(w
http.ResponseWriter, r *http.Reqeust)`的函数`h`转换成handler。这个函数也算是中间件。
了解实现概念，在具有相关基础知识前提下就可以尝试着手动进行实践，达到学以致用，融会贯通。下面就来动手实现两个中间件`LogMiddleware`和`AuthMiddleware`，一个用于日志记录的，一个用于权限校验。可以使用两种写法。
\- 写法一
```go package main
import ( "log" "net/http" "time" "encoding/json" )
//权限认证中间件 type AuthMiddleware struct { Next http.Handler }
//日志记录中间件 type LogMiddleware struct { Next http.Handler //这里为AuthMiddleware }
//返回信息结构体 type Company struct { ID int Name string Country string }
//权限认证请求处理 func (am _AuthMiddleware) ServeHTTP(w http.ResponseWriter, r_
http.Request) { //如果没有嵌套中间件则使用默认的DefaultServeMux if am.Next == nil { am.Next =
http.DefaultServeMux }
    //判断Authorization头是否不为空
    auth := r.Header.Get("Authorization")
    if auth != "" {
        am.Next.ServeHTTP(w, r)
    }else{
        //返回401
        w.WriteHeader(http.StatusUnauthorized)
    }
}
//日志请求处理 func (am _LogMiddleware) ServeHTTP(w http.ResponseWriter, r_
http.Request) { if am.Next == nil { am.Next = http.DefaultServeMux }
    start := time.Now()
    //打印请求路径
    log.Printf("Started %s %s", r.Method, r.URL.Path)
    //调用嵌套的中间件，这里为AuthMiddleware
    am.Next.ServeHTTP(w, r)
    //打印请求耗时
    log.Printf("Comleted %s in %v", r.URL.Path, time.Since(start))
}
func main() { //注册路由 http.HandleFunc("/user", func(w http.ResponseWriter, r
*http.Request) { //实例化结构体返回json格式数据 c := &Company{ ID:123, Name:"TopSec",
Country: "CN", } enc := json.NewEncoder(w) enc.Encode(c) })
    //监听端口绑定自定义中间件
    http.ListenAndServe(":8000",&LogMiddleware{
        Next:new(AuthMiddleware),
    })
}
    上方代码中手动声明了两个结构体`AuthMiddleware`和`LogMiddleware`，实现了handler接口的`ServeHTTP`方法。在`ListenAndServe`中通过传入结构体变量嵌套绑定了这两个中间件。
    当收到请求时会首先调用`LogMiddleware`中的`ServeHTTP`方法进行日志打印，其后调用`AuthMiddleware`中的`ServeHTTP`方法进行权限认证，最后匹配路由`/user`，调用转换好的handler处理器返回JSON数据，如下图。
    当权限认证失败会返回401状态码。
    - 写法二
    ```go
    package main
    import (
        "log"
        "net/http"
        "time"
        "encoding/json"
    )
    //返回信息
    type Company struct {
        ID int
        Name string
        Country string
    }
    //权限认证中间件
    func AuthHandler(next http.Handler) http.Handler {
        //这里使用HandlerFunc将函数包装成了httpHandler并返回给LogHandler的next
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request){
        //如果没有嵌套中间件则使用默认的DefaultServeMux
        if next == nil {
            next = http.DefaultServeMux
        }
        //判断Authorization头是否不为空
        auth := r.Header.Get("Authorization")
        if auth != "" {
            next.ServeHTTP(w, r)
        }else{
            //返回401