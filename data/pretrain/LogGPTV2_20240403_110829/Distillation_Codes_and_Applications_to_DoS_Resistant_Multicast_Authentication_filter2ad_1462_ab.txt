h5,6
h1
h2
h3
h4
h5
h6
h7
h7,8
h8
s 1
s 2
s 3
s 4
s 5
s 6
s 7
s 8
Figure 1. Merkle Hash Trees.
Each leaf node hi is calculated by taking the hash of
the corresponding data item si, and each internal node
is computed by taking the hash of the concatenation
of its two children. The shaded nodes h 4, h1,2, and
h5,8 form a veriﬁcation sequence of s 3. Given the leaf
element s3 and its veriﬁcation sequence, one can re-
construct and verify the root value h 1,8 by computing
h(h(h1,2, h(h(s3), h4)), h5,8).
hi = h(si), as leaves. Each internal node of the tree is the
hash of the concatenation of its two children, as in Fig-
ure 1.
Merkle hash trees have several nice properties. Each
internal node hi,j can be viewed as a hash digest of the
data items si, si+1, . . . , sj, and the root of the tree can be
viewed as the hash of the whole set S. If the veriﬁer can
verify the authenticity of the root value, for example with
a signature, and has all of the data items over which the
tree was constructed (and the corresponding positions),
she can verify the authenticity of every data item by re-
constructing the hash tree and comparing the computed
root value with the authenticated root value.
However, the data items are not individually veriﬁable;
to recalculate the root value, the entire set S is needed. To
make each si individually veriﬁable, it must be augmented
with additional veriﬁcation information. Given an item s,
a veriﬁer can recalculate the root of the tree if it also has
the “sibling” nodes on the path from h(s) to the root of
the tree. We refer to this sequence of nodes as the ver-
iﬁcation sequence of s. For example, in Figure 1, given
element s3 and its veriﬁcation sequence (h4, h1,2, h5,8)
(the shaded nodes), one can reconstruct and verify the root
value h1,8 by computing h(h(h1,2, h(h(s3), h4)), h5,8).
In general, each veriﬁcation sequence requires θ(log(n))
space, and the associated root value can be reconstructed
with θ(log(n)) hash operations.
3. Distillation Codes
We need a new coding scheme to address polluted era-
sure channels. We deﬁne
may adequately address one or two of these problems, but
until there is a signature scheme with short signatures that
are fast to generate and verify with a short public key, dig-
itally signing every symbol is not an option.
DISTILLATION CODING:
An (n, t) distillation code encodes a message D into a
set of n symbols S = {s1, s2, . . . , sn} and transmits
them over a polluted erasure channel. The code should
satisfy the following properties:
Authenticity The distillation decoder should never
output an invalid reconstruction.
Correctness Suppose for some valid D, T contains at
least n − t valid symbols of D. Then execution
of the distillation decoder on T will output a valid
reconstruction.
We ﬁrst present and analyze three naive distillation codes.
Error correcting codes A third approach is to use error
correcting codes (ECC). An (n, t) ECC encodes D into n
symbols such that the decoder can recover D in the pres-
ence of a altered and e erased symbols if 2a+ e ≤ t. ECC
views invalid symbols simply as errors. This approach has
several problems: ECC encoding produces longer sym-
bols and ECC decoding is slower than in pure erasure
codes. More seriously, ECC is vulnerable to pollution at-
tacks. Consider an attack similar to the one presented in
Section 2.4, where the decoder has multiple choices for
the symbol to use at a particular position of the input to
the decoding algorithm. If the number of positions with
multiple choices is ≥ t
2 , then ECC decoding will require
exponential time as well.
3.1. Three strawman schemes
3.2. Our approach
Decode all possibilities One simple distillation coding
scheme is to modify an erasure decoder to try all possible
combinations of n − t symbols and apply VALIDATE(·) to
each reconstruction to identify a valid one. If the decoder
receives at least n − t valid symbols of some valid D,
then eventually it will use a combination containing only
valid symbols of D and output a valid reconstruction. This
approach has a serious problem: an exponential number of
executions of the decoding algorithm are required in the
worst case before a valid reconstruction is found.
Digitally sign every symbol A second approach is to
use a conventional erasure code and digitally sign each
symbol. The decoder authenticates each received sym-
bol and uses only valid symbols in the decoding process.
However, all known signature schemes have at least one
of following problems: (1) In most signature schemes,
generating signatures is expensive. Digitally signing ev-
ery symbol will overwhelm the computational resources
of the encoder for even modest values of n. (2) Signature
veriﬁcation can also be expensive. Since, every injected
invalid symbol requires an additional signature veriﬁca-
tion by the decoder, this creates a potential DoS attack.
(3) Some digital signatures are large (e.g., 128 bytes for
RSA-1024). When the symbol size is relatively small,
including a large signature with every symbol is undesir-
able. (4) Some one-time signature schemes have relatively
small signatures and feature fast signature generation and
veriﬁcation. However, to enable multiple signatures, the
fastest variants require large public keys which are im-
practical to distribute [24, 30]. Some signature schemes
In this section, we introduce an efﬁcient construction
of distillation codes. Before presenting the details of our
construction, we review why the strawman schemes are
impractical and motivate how we address their shortcom-
ings.
Since adversaries can pollute the channel, decoders
must verify the authenticity of reconstructions. The sec-
ond straw man approach guarantees the decoder uses only
valid symbols in the decoding process, but under attack,
verifying every symbol overwhelms the receiver. To re-
duce the number of signature veriﬁcations required to ob-
tain a valid reconstruction, we authenticate the reconstruc-
tions rather than the symbols. We partition the symbols in
a way that distills the valid symbols from the invalid ones,
and then decode each of the partitions and authenticate
the resulting reconstructions. Since we only consider par-
titions with at least n− t symbols, adversaries must inject
at least n− t symbols to cause an additional decoding and
veriﬁcation operation. If the decoder receives m symbols,
n−t(cid:7) decoding and veriﬁcation
then it executes at most (cid:6) m
operations to recover the valid reconstruction.
Partitioning the symbols Suppose, given a set T con-
taining both valid and invalid symbols, the decoder can
run an algorithm PARTITION SYMBOLS that partitions
the symbols into Q = {Q1, Q2, . . . , Qk} satisfying the
following property:
Deﬁnition 1. [Distillation Property] Let T be a set con-
taining invalid and valid symbols. A set of partitions
Q = {Q1, Q2, . . . , Qk} of T satisﬁes the Distillation
Property if the following holds: if D = {D : D is valid
and ∃t ∈ T such that t is a valid symbol of D}, then for
all D ∈ D, one partition contains exactly all the valid
symbols of D.
The distillation decoder can then erasure decode each
Qi to obtain a set of candidate reconstructions. Assum-
ing that for some valid D, at least n − t valid symbols
of D were received by the decoder, at least one of these
candidates will be valid and can be found by running
VALIDATE(·).
The complete speciﬁcation for efﬁcient distillation de-
coding is shown in Figure 3. What remains are: (1) an en-
coding algorithm which enables the decoder to partition
the symbols, and (2) an efﬁcient construction of PARTI-
TION SYMBOLS. We describe both in the next section.
3.3. Distillation encoding using one-way accumu-
lators
In this section, we present our implementations of distil-
lation encoding and the algorithm PARTITION SYMBOLS.
In both constructions we make use of one-way accumula-
tors.
3.3.1 One-way accumulators
Our construction of PARTITION SYMBOLS relies on a
secure set membership operation. We have a set T =
{t1, t2, . . . , tm} of received symbols and want to parti-
tion T into Q = {Q1, Q2, . . . , Qk} which satisﬁes the
Distillation Property. Note that to do this we do not need
to determine if a given symbol is valid. Instead, given a
valid symbol t of some D ∈ D and a set of symbols Q,
we would like to determine that t ∈ Q if Q is a set of
valid symbols of D and t /∈ Q otherwise. If t is an invalid
symbol and Q is a set of valid symbols, we would like to
determine t /∈ Q.
We build a secure set membership operation by using
one-way accumulators [4, 8, 9, 12, 20, 32]. One-way ac-
cumulators combine a set of inputs into a single value
called an accumulator. Using auxiliary witness informa-
tion, one can authenticate an element as a member of the
set. One-way accumulator schemes typically include three
functions:1
Accumulate(S) → a
Witness(s, S) → w
Verify(s, w, a) → b
Accumulate(·) takes a set S of values as input and out-
puts its accumulator a. Witness(·,·) takes an s ∈ S and
1For a more rigorous treatment of one-way accumulators, refer to
Benaloh and Mare [8] or Baric and Pﬁtzmann [4].
the set S and produces a witness w for s. Verify(·,·,·)
takes as input a conjectured element s of S, its wit-
ness w, and an accumulator a of S, and outputs b ∈
{true, false}. If b = true, we determine s ∈ S. Other-
wise s /∈ S.
It must be hard to forge elements of S. That is,
it must be hard to ﬁnd an s(cid:1) /∈ S and w(cid:1)
such that
Verify(s(cid:1), w(cid:1), Accumulate(S)) = true, even if the at-
tacker has seen other valid (s, w) pairs and a.
In many accumulator schemes, one can recover the ac-
cumulator a = Accumulate(S) of a set S given an ele-
ment s ∈ S and its witness w. Let this process be repre-
sented by the function
Recover(s, w) → a.
When Recover(·,·) exists for an accumulator scheme,
Verify(·,·,·) is typically implemented by verifying that
Recover(s, w) = a. In our instantiation of PARTITION
SYMBOLS, we rely on the Recover(·,·) function and use
it in a special way. In particular, with Recover(·,·) a veri-
ﬁer does not need to know the accumulator a to determine
if two elements si and sj belong to the same set. It only
needs to verify that Recover(si, wi) = Recover(sj, wj).
For the sake of brevity, we say that s and w has accumu-
lator value a if Recover(s, w) = a.
3.3.2 Implementing DISTILLATION ENCODE and
PARTITION SYMBOLS
To resist pollution attacks, the distillation encoder must
enable the decoder to distill the valid symbols of an era-
sure encoding from a larger set of invalid ones. Our en-
coding algorithm accomplishes this by accumulating the
set of valid symbols and then augmenting each symbol
with its witness. The full description of DISTILLATION
ENCODE is given in Figure 2.
We can now use the Recover(·,·) algorithm of the
one-way accumulator to implement PARTITION SYM-
BOLS. Recover(·,·) is evaluated for each received sym-
bol/witness pair, and symbols with the same accumulator
value are put in the same partition. The full speciﬁcation
of PARTITION SYMBOLS is given in Figure 4. For an ad-
versary to cause an invalid symbol to be placed in the same
partition as the valid symbols implies that she is able to
break the one-way accumulator scheme, i.e., she is able to
forge an element of the set protected by the accumulator.
3.3.3 Merkle hash trees as a one-way accumulator
Merkle hash trees [17] are attractive one-way accumula-
tors for distillation codes.2 When Merkle hash trees serve
2There are several one-way accumulator schemes [4, 8, 9, 12, 32]
based on exponentiation modulo an RSA modulus and the (strong) RSA
DISTILLATION ENCODE:
Input: A message D.
Output: An (n, t) distillation encoding of D, represented as a set S = {s 1, s2, . . . , sn}.
1. Let D(cid:1) = TAG(D).
2. Construct an (n, t) erasure encoding (ERASURE ENCODE(·)) of D (cid:1)
. Let S(cid:1) = {s(cid:1)
resulting symbols.
, s(cid:1)
2
, . . . , s(cid:1)
n} be the
1
3. Construct an augmented set of symbols S = {s 1, s2, . . . , sn} where si = (s(cid:1)
i, wi) and wi =
Witness(s(cid:1)
i, S(cid:1)). Output S.
Figure 2. Our algorithm for distillation encoding.
DISTILLATION DECODE:
Input: A set T = {t1, t2, . . . , tm} containing valid and invalid symbols.
Output: A valid reconstruction or ERROR.
1. Invoke PARTITION SYMBOLS on T , resulting in partitions Q 1, Q2, . . . , Qk.
2. Throw away all partitions containing less than n − t symbols. Let Q 1, Q2, . . . , Q(cid:1) be the remaining
3.
partitions.
(a) For all Qi, replace each s = (s(cid:1), w) in Qi with s(cid:1)
(b) Execute the erasure decoding algorithm (ERASURE DECODE(·)) on each Q i, resulting in candidate
(i.e., strip off witness information).
reconstructions R1, R2, . . . , R(cid:1).
4. Run VALIDATE on each of R1, R2, . . . , R(cid:1). Let V = {Ri : VALIDATE(Ri) = true}. If V = ∅, output
ERROR. Otherwise, randomly select an Ri from V and output STRIP(Ri).
Figure 3. Our algorithm for distillation decoding.
PARTITION SYMBOLS:
Input: A set T = {t1, t2, . . . , tm} containing valid and invalid symbols, each augmented with witnesses.
Valid symbols are from an (n, t) distillation encoding of D.
Output: A set of partitions Q = {Q1, Q2, . . . , Qk} of T satisfying the Distillation Property.
1. Initialize Q to the empty list. Let A be a list of accumulator values, initialized to be empty.
2. For i = 1 to m do
(a) For each ti = (si, wi), calculate a = Recover(si, wi).
(b) If a /∈ A, add a to the end of A and add {(s i, wi)} to the end of Q. Otherwise, there exists an
accumulator aj in A such that a = aj. Add (si, wi) to Qj.
3. Output Q.
Figure 4. Implementation of PARTITION SYMBOLS, using one-way accumulators.
as one-way accumulators [12, 17, 32], the size of wit-
nesses grows logarithmically with the size of the accu-
mulated set. This is not a serious problem since Merkle
hash trees rely only on cryptographic hash functions, and
the accumulator and witness generation and recovery al-
gorithms are fast and efﬁcient.
Given a set S = {s1, s2, . . . , sn}, we implement the
one-way accumulator operations as follows:
Accumulate(S) → h1,n
Witness(s, S) → v
Recover(s, v) → h(cid:1)
1,n
The accumulator value h1,n is the root value of a Merkle
hash tree constructed over S as described in Section 2.6.
The witness of an element s is the veriﬁcation sequence v
of s in the same hash tree. Recover(s, v) is implemented
by reconstructing the candidate root h(cid:1)
1,n of the hash tree
using s and its veriﬁcation sequence v. Given an authen-
ticated accumulator value h1,n, Verify(s, v, h1,n) is im-
plemented by verifying h(cid:1)
1,n = h1,n. Using Merkle hash
trees, Accumulate(·) has running time θ(n), and the other
operations have running time θ(log(n)).
Even without an authenticated root, given the corre-
sponding veriﬁcation sequences vi and vj, we can ver-
ify that two elements si and sj are elements of the same
set by checking that Recover(si, vi) = Recover(sj, vj).
This is exactly the property needed to implement Step 2
in PARTITION SYMBOLS. Although the decoder cannot
determine if an accumulator value is authentic until DIS-
TILLATION DECODE has completed, Recover(·,·) allows
PARTITION SYMBOLS to create a partitions of valid sym-
bols which contain no invalid ones.
3.4. Security analysis: Pollution resistance of dis-
tillation codes
We prove three security properties of distillation codes:
Authenticity If (TAG(·),VALIDATE(·)) guarantee authen-
ticity, then distillation codes also guarantee authen-
ticity. This means that DISTILLATION DECODE will
never output invalid reconstructions.
Correctness Suppose VALIDATE(D) = true for all valid
D, and (TAG(·),VALIDATE(·)) guarantee authentic-
ity. If for some valid D, T contains at least n−t valid
assumption. However, the size of the accumulator and witness are on
the order of the RSA modulus, and the computation required to generate
witnesses and verify elements is roughly equivalent to signature genera-
tion and veriﬁcation. We have already argued that this level of overhead
is infeasible.
Nyberg [20] proposed a one-way accumulator scheme using only
hashing and pseudorandom number generation based on Bloom ﬁlters.
The main drawback of Nyberg’s scheme is that the accumulator value
must be on the order of several thousand bytes.
symbols of D, then the execution of DISTILLATION
DECODE on T will output a valid reconstruction.
DoS-resistance Distillation codes efﬁciently satisfy the
above properties in the presence of medium band-
width pollution attacks (up to an attack factor of ten).
3.4.1 Authenticity
The authenticity property is that if (TAG(·),VALIDATE(·))
guarantee message authenticity, then DISTILLATION DE-
CODE will never output invalid reconstructions. This im-
plies that if DISTILLATION DECODE outputs R, then R
was encoded and sent by the legitimate encoder. We prove
this property in Appendix A.
3.4.2 Correctness
To prove the correctness property, we must show that if
for some valid D, T contains at least n − t valid symbols
of D, then the execution of DISTILLATION DECODE on
T will output a valid reconstruction.
Theorem 1. Assume (TAG(·),VALIDATE(·)) guarantees
authenticity of reconstructions, VALIDATE(D) = true for
all valid D, and the underlying one-way accumulator in
DISTILLATION DECODE resists element forgery. Suppose
T contains at least n−t valid symbols of D for some valid
D. Then the execution of DISTILLATION DECODE on T
will output a valid reconstruction.
Proof. Let Q = {Q1, . . . , Qk} be the set of partitioned
symbols resulting from Step 1 of DISTILLATION DE-