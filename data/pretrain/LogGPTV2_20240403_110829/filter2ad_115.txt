title:Sampling and Large Flow Detection in SDN
author:Yehuda Afek and
Anat Bremler-Barr and
Shir Landau Feibish and
Liron Schiff
Sampling and Large Flow Detection in SDN
Yehuda Afek*
PI:EMAIL
Anat Bremler-Barr†
PI:EMAIL
Liron Schiff*
schifﬂPI:EMAIL
Shir Landau Feibish*
PI:EMAIL
*Blavatnik School of Computer Science
Tel-Aviv University
Tel-Aviv, Israel
†Computer Science Department
Interdisciplinary Center
Herzliya, Israel
CCS Concepts
•Networks → Programmable networks; Network monitoring;
Network measurement;
Keywords
Network monitoring; Software Deﬁned Networks; Heavy Hitters
1.
INTRODUCTION
We present techniques for trafﬁc sampling and large ﬂows detec-
tion in SDN with Openﬂow. In many cases, in order to efﬁciently
compute high speed trafﬁc statistics, sampling is needed. While
SDN switches are very efﬁcient and considerably simpler to man-
age than existing routers and switches, they don’t offer direct means
for sampling and detection of large ﬂows. Both of these capabilities
are important for various basic network applications. For example,
trafﬁc monitoring is such an application, which is a key ability in
providing QoS, capacity planning and efﬁcient trafﬁc engineering.
Additional applications which make use of sampling and large ﬂow
detection are applications that depend on network visibility, such as
security (DDoS and others), anomaly detection, DPI and billing.
Trafﬁc visibility, and speciﬁcally measurements and monitoring
in IP networks has become a very difﬁcult task due to the over-
whelming amounts of trafﬁc and ﬂows. One of the earliest network
measurements tools was Cisco Netﬂow [1], which allowed IP ﬂow
level measurement. Netﬂow provided a variety of monitoring capa-
bilities yet suffered from high processing and collection overheads,
which were partially decreased using sampling in the variant Sam-
pled Netﬂow, yet this variant provided reduced accuracy caused
This research was supported by European Research Council
(ERC) Starting Grant no. 259085, and the Neptune Consortium,
administered by the Ofﬁce of the Chief Scientist of the Israeli min-
istry of Industry, Trade, and Labor, and the Ministry of Science and
Technology, Israel.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
SIGCOMM ’15 August 17-21, 2015, London, United Kingdom
c(cid:13) 2015 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-3542-3/15/08.
DOI: http://dx.doi.org/10.1145/2785956.2790009
by the straightforward use of sampling. In [2] Estan and Vargh-
ese signiﬁcantly improve the accuracy of the sampling process by
introducing the Sample and Hold algorithm which provides better
accuracy while reducing the processing and collection overhead.
In order to increase the availability of monitoring, and follow-
ing the SDN trend, we explore ways to implement this with the
widespread OpenFlow standard for SDN switches. OpenFlow swit-
ches provide counters of the number of bytes and packets per ﬂow
entry, yet trafﬁc measurement remains a difﬁcult task in SDN for
two reasons. The ﬁrst is the hardware (usually Ternary Content Ad-
dressable Memories (TCAMs)) constraints which limit the number
of ﬂows which the switch can maintain and follow. The second
is the limited number of updates which the switch can process per
second, which can therefore limit the amount of updates that the
controller will make to the ﬂow table. The algorithms provided
herein overcome these limitations by providing efﬁcient building
blocks for sampling and large ﬂow detection which can be used by
various monitoring applications.
1.1 Our Contribution
First, we present various OpenFlow based methods to sample
packets that traverse an SDN switch. These methods are immune to
various cyber attacks and are based on Open-Flow 1.3 capabilities.
Second, we make use of the sampling mechanisms for the develop-
ment of an efﬁcient method to detect large ﬂows. The techniques
presented are both ﬂow-table size and switch-controller communi-
cation efﬁcient.
2. TRAFFIC SAMPLING
2.1 Packet Sampling
In Packet Sampling we select each packet in a stream of packets
traversing the switch with probability p, 0 ≤ p ≤ 1, and send them
to a receiver that can be the controller or some middlebox (monitor-
ing box). We present three basic approaches for packet sampling,
each using different OpenFlow 1.3 optional features which are sup-
ported by existing software and hardware switches.
2.2 Pseudo Byte Sampling
In Pseudo Byte Sampling we select each byte in a stream of pack-
ets traversing the switch with probability p, 0 ≤ p ≤ 1, and send the
packet containing the sampled byte to a receiver. We present op-
timized techniques for pseudo-byte sampling, in which we assume
that packet size is accessible and can be matched in the OpenFlow
pipeline, using the Experimenter extension or any other way. It is
expected that with upcoming new OpenFlow and alike SDN archi-
345tectures, such as [3] more header ﬁelds could be natively matched
by the ﬂow tables.
2.3 Evaluation
We evaluate the performance of our sampling schemes by con-
sidering the resulting sampled ﬂow size distributions compared to
real ﬂow size distribution. Figure 1 shows the three packet sam-
pling methods achieve similar distributions, and closely approxi-
mate the real (exact) distribution.
Figure 1: Flow size CDF under
three sampling schemes and the
exact (not sampled) trafﬁc CDF.
3. HEAVY FLOWS DETECTION
A Heavy ﬂow in a stream of packets S, is a ﬂow which takes up
more than T percent of the trafﬁc (i.e., packets) in the stream. Fun-
damental counter based algorithms for ﬁnding Heavy Hitters (or
ﬂows) such as that of Metwally et. al. [4], cannot be directly imple-
mented in the SDN framework since in the worst case they would
require rule changes for every packet that traverses the switch. A
different approach is therefore needed.
First we consider a naive solution which we name Sample&HH,
that samples packets in the switch and then sends all sampled pack-
ets to the controller. The controller computes the heavy ﬂows using
a heavy hitters algorithm. However, as can be seen in Figure 3a
(and other works [2]), relying solely on the samples is not accurate
enough. Next we consider a solution based on the Sample&Hold
paradigm of [2] which was devised for identifying elephant ﬂows in
trafﬁc of classic IP networks. Sample&Hold achieves very accurate
results by using sampling together with accurate in-band counters
for sampled ﬂows, yet the high amount of counters and the rate of
installing them make Sample&Hold incompatible with SDN switch
architecture. Therefore we only consider it as a reference point to
evaluate our algorithm.
To deal with the problems of the above solutions, we present
our Sample&Pick algorithm. Sample&Pick uses sampling to iden-
tify ﬂows that are suspicious of being heavy. For these suspicious
ﬂows a special rule is placed in the switch ﬂow table providing ex-
act counters for the suspicious ﬂows. The Sample&Pick algorithm
considers both the bounded rule space in the switch as well as the
time it takes for the controller to install a rule in the switch. There-
fore we use two separate thresholds, one for determining which
ﬂows are heavy and a second lower threshold for detecting poten-
tially large ﬂows. This lower threshold allows us to install a rule in
the switch early enough to get an accurate count of the large ﬂows,
yet we do not install rules for too many ﬂows that will remain small.
Our algorithm operates as follows: in the ﬁrst step we sample
the ﬂows going through the switch using one of the sampling tech-
niques mentioned. As can be seen in Fig. 2, these samples are sent
to the controller, that feeds them as input to a heavy hitters compu-
tation module in order to identify the suspicious heavy ﬂows (steps
2 and 3). Once a ﬂow’s counter in the heavy hitters module has
passed some predeﬁned threshold t, a rule is inserted in the switch
to maintain an exact packet counter for that ﬂow (steps 4 and 5).
This counter is polled by the controller at ﬁxed intervals and stored
in the controller (steps 6 and 7). Finally the last step increments the
counters that are processed by the Heavy Hitters module to main-
tain correct counters of non-sampled ﬂows.
Figure 2: Sample&Pick overview
(a) False negative errors, shown by
the ratio between the Heavy Hitter
(HH) ﬂows missed to the total num-
ber of HH ﬂows.
(b) Rate of PacketIn messages (sam-
ples) from switch to controller.
In
Sample&Hold, sampling is switch-
contained.
Figure 3: Heavy Flow Detection test results
3.1 Evaluation
solutions described above Sample&Hold and Sample&HH.
We compare our Sample&Pick algorithm to the two additional
Testing shows: Considering a line rate of 2 · 104 pps, it takes
the scheme about 107 packets to stabilize (Figure 3a). Further-
more, the controller in Sample&Pick processes approximately half
the samples than in Sample&HH (Figure 3b), due to the fact that
Sample&HH has no counters in the switch so all trafﬁc is sampled,
whereas Sample&Pick uses switch counters for heavy ﬂows; Pa-
rameters used: T = 10−3, p = 0.5· 10−2, t = T /2 = 10−3/2.
4. CONCLUSIONS AND FUTURE WORK
We have presented techniques for sampling and large ﬂow detec-
tion in SDN. Our sampling techniques are unique in that they are
simple and remain within the conﬁnements of the OpenFlow stan-
dard. Our algorithmdetects large ﬂows with a relatively small error
rate while minimizing the computation overhead in the switch and
requiring little controller-switch communication.
5. REFERENCES
[1] [Online]. Available: http://www.cisco.com/c/en/us/tech/
quality-of-service-qos/netﬂow/index.html
[2] C. Estan and G. Varghese, “New directions in trafﬁc
measurement and accounting: Focusing on the elephants,
ignoring the mice,” ACM Trans. Comput. Syst., vol. 21, no. 3,
pp. 270–313, 2003.
[3] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown,
J. Rexford, C. Schlesinger, D. Talayco, A. Vahdat,
G. Varghese, and D. Walker, “P4: programming
protocol-independent packet processors,” Computer
Communication Review, vol. 44, no. 3, pp. 87–95, 2014.
[4] A. Metwally, D. Agrawal, and A. El Abbadi, “Efﬁcient
computation of frequent and top-k elements in data streams,”
in ICDT, ser. Lecture Notes in Computer Science, T. Eiter and
L. Libkin, Eds., vol. 3363. Springer, 2005, pp. 398–412.
346