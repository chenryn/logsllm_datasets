# 目录

**Android 渗透测试学习手册 中文版 1.1**

- 第一章 Android 安全入门 1.2
- 第二章 准备实验环境 1.3
- 第三章 Android 应用的逆向和审计 1.4
- 第四章 对 Android 设备进行流量分析 1.5
- 第五章 Android 取证 1.6
- 第六章 玩转 SQLite 1.7
- 第七章 不太知名的 Android 漏洞 1.8
- 第八章 ARM 利用 1.9
- 第九章 编写渗透测试报告 1.10

## Android 渗透测试学习手册 中文版

- **原书**: Learning Pentesting for Android Devices
- **译者**: 飞龙
- **在线阅读**
- **格式**: PDF, EPUB, MOBI
- **代码仓库**
- **赞助我**
- **协议**: CC BY-NC-SA 4.0

## 第一章 Android 安全入门

### 作者: Aditya Gupta
### 译者: 飞龙
### 协议: CC BY-NC-SA 4.0

Android 是当今最流行的智能手机操作系统之一。随着其普及程度的增加，它也带来了许多安全风险，这些风险可能被引入到应用程序中，从而威胁到用户的安全。本书将以方法论和循序渐进的方式讨论 Android 应用程序安全性和渗透测试的各个方面。

本章的目标是为读者打下 Android 安全的基础，以便在后续章节中更好地理解和应用相关知识。

#### 1.1 Android 简介

自谷歌于 2005 年收购 Android 以来，谷歌一直在不断开发和完善这一系统。特别是在过去九年里，Android 在安全性方面有了显著改进。如今，Android 已成为全球最广泛使用的智能手机平台之一，这得益于 LG、三星、索尼和 HTC 等不同手机制造商的支持。Android 的后续版本中引入了许多新概念，如 Google Bouncer 和 Google App Verifier。我们将在本章逐一介绍这些概念。

从架构上看，Android 被分为四个不同的层。最底层是 Linux 内核，经过修改以适应移动环境并提高性能。Linux 内核还负责与所有硬件组件交互，并包含大多数硬件驱动程序。此外，它还负责 Android 中的大部分安全功能。由于 Android 基于 Linux 平台，因此开发者可以轻松地将 Android 移植到其他平台和架构。Android 还提供了一个硬件抽象层（HAL），供开发者在 Android 平台栈和他们希望移植的硬件之间创建软件钩子。

在 Linux 内核之上是一个层级，包含一些最重要和有用的库：

- **Surface Manager**: 管理窗口和屏幕。
- **媒体框架**: 允许使用各种编解码器来播放和录制不同的媒体文件。
- **SQLite**: 一个轻量级的 SQL 版本，用于数据库管理。
- **WebKit**: 浏览器渲染引擎。
- **OpenGL**: 用于在屏幕上正确显示 2D 和 3D 内容。

以下是来自 Android 开发者网站的 Android 架构图示：

![Android 架构](https://developer.android.com/images/graphics/architecture.png)

Android 中的库主要用 C 和 C++ 编写，其中许多是从 Linux 移植过来的。与 Linux 相比，Android 的一个主要区别是没有 libc 库，而是使用名为 bionic 的库，这是一个专为 Android 优化的 libc 版本。

在同一层级，还有来自 Android 运行时（Dalvik 虚拟机和核心库）的组件。我们将在本书的后续部分详细讨论 Dalvik 虚拟机。

在这一层之上，是应用程序框架层，支持应用程序执行不同类型的任务。大多数开发者创建的应用程序只与第一层和最顶层的应用程序交互。该架构设计使得每一层都能支持上一层的功能。

早期版本的 Android（<4.0）基于 Linux 内核 2.6.x，而较新版本则基于内核 3.x。不同 Android 版本及其所使用的 Linux 内核列表如下所示：

| Android 版本 | Linux 内核 |
|--------------|------------|
| <4.0         | 2.6.x      |
| >=4.0        | 3.x        |

Android 中的所有应用程序都在虚拟环境下运行，称为 Dalvik 虚拟机（DVM）。需要注意的是，从 Android 4.4 版本开始，还有一个新的运行时环境称为 Android 运行时（ART），用户可以在 DVM 和 ART 之间自由切换。然而，本书将主要关注 Dalvik 虚拟机实现。

Dalvik 虚拟机类似于 Java 虚拟机（JVM），但它是基于寄存器的而不是基于堆栈的。每个运行的应用程序都将在自己的 Dalvik 虚拟机实例下运行。例如，如果我们运行三个不同的应用程序，将有三个不同的虚拟实例。尽管 Dalvik 虚拟机为应用程序创建了一个虚拟环境，但它不应与安全容器或安全环境混淆。DVM 的主要目的是提高性能，而不是增强安全性。

Dalvik 虚拟机执行一种名为 .dex 或 Dalvik 可执行文件的文件格式。我们将在后续章节中进一步探讨 .dex 文件格式。现在，让我们继续通过 adb 与 Android 设备进行交互，并深入分析其体系结构。

#### 1.2 深入了解 Android

如果你拥有 Android 设备或正在运行 Android 模拟器，则可以使用 Android SDK 提供的工具（adb）。我们将在第二章详细讨论 adb。现在，我们将仅设置 SDK 并准备好使用它。

一旦设备通过 USB 连接，我们可以在终端中输入 `adb devices`，这将显示已连接设备的序列号列表。请确保已在设备设置中启用了 USB 调试功能。

```sh
$ adb devices
List of devices attached
emulator-5554 device
```

提示：你可以从 [Packt Publishing](http://www.packtpub.com) 下载你购买的所有 Packt 图书的示例代码文件。如果你在其他地方购买此书，则可以访问 [Packt Support](http://www.packtpub.com/support) 以将文件直接发送给你。

Android 基于 Linux 内核，因此大多数 Linux 命令也可以在 Android 上通过 `adb shell` 完美运行。`adb shell` 为你提供了与设备的 shell 直接交互的能力，你可以在其中执行命令、操作和分析设备中的信息。要进入 shell，只需键入以下命令：

```sh
$ adb shell
```

一旦我们在 shell 中，可以运行 `ps` 命令来列出当前正在运行的进程：

```sh
shell@android:/ $ ps
USER       PID   PPID  VSIZE  RSS     WCHAN    PC         NAME
root         1       0  8392  1044   ffffffff 00000000 S /init
radio       25       2  4652  4280   ffffffff 00000000 S /system/bin/rild
app_12345  12345  1    10000  2000   ffffffff 00000000 S com.example.app
```

如你所见，`ps` 命令将列出当前在 Android 系统中运行的所有进程。第一列指定了用户名。我们可以看到各种用户名，如 `system`、`root`、`radio` 和一系列以 `app_` 开头的用户名。以 `system` 名称运行的进程由系统拥有，`root` 作为根进程运行，`radio` 与电话和无线电相关的进程，`app_` 进程是用户已下载并安装在设备上且当前正在运行的应用程序。就像在 Linux 中用户标识了当前登录系统的唯一用户一样，在 Android 中，用户标识了在自己环境中运行的应用/进程。

Android 安全模型的核心是 Linux 特权分离。每次在 Android 设备中启动新应用程序时，都会为其分配唯一的用户 ID（UID），该 UID 将属于某些预定义的组。

与 Linux 类似，用作命令的所有二进制文件都位于 `/system/bin` 和 `/system/xbin`。此外，我们从 Play 商店或其他来源安装的应用程序数据将位于 `/data/data`，而其原始安装文件（即 `.apk`）将存储在 `/data/app`。此外，还有一些需要从 Play 商店购买而不是免费下载的应用程序，这些应用程序将存储在 `/data/app-private/`。

Android 安装包（APK）是 Android 应用程序的默认扩展名，它只是一个归档文件，包含应用程序的所有必需文件和文件夹。我们将在后续章节中对 `.apk` 文件进行逆向工程。

现在，让我们访问 `/data/data`，看看里面有什么。需要注意的一点是，为了在真实设备上实现，设备需要 root 并且必须处于 su 模式：

```sh
# cd /data/data
# ls
com.aditya.facebookapp
com.aditya.spinnermenu
com.aditya.zeropermission
com.afe.socketapp
com.android.backupconfirm
com.android.browser
com.android.calculator2
com.android.calendar
com.android.camera
com.android.certinstaller
com.android.classic
com.android.contacts
com.android.customlocale2
```

在这里，我们可以看到，例如 `com.aditya.facebookapp` 是单独的应用程序文件夹。这些文件夹名称指定各个应用程序的包名称。包名称是应用程序在 Play 商店和设备上的唯一标识符。例如，可能存在多个具有相同名称的相机应用或计算器应用。因此，为了唯一地标识不同的应用，使用包名称约定而不是常规应用名称。

如果我们进入任何应用程序文件夹，会看到不同的子文件夹，例如 `files`、`databases` 和 `cache`，我们将在第三章“逆向和审计 Android 应用程序”中进一步查看。

```sh
shell@android:/data/data/de.trier.infsec.koch.droidsheep # ls
cache
databases
files
lib
```

这里需要注意的一个重要事项是，如果手机已经 root，我们可以修改文件系统中的任何文件。获取 root 权限意味着我们可以完全访问和控制整个设备，这意味着我们可以查看和修改任何我们想要的文件。

最常见的安全保护之一是模式锁定或 PIN 锁，它默认存在于所有 Android 手机中。你可以通过访问 `Settings | Security | Screen Lock` 来配置自己的模式。一旦我们设置了密码或模式锁定，现在将手机通过 USB 连接到我们的系统。密码锁的密钥或模式锁的数据以 `password.key` 或 `gesture.key` 存储在 `/data/system`。注意，如果设备被锁定并且 USB 调试被打开，你需要一个自定义引导加载程序来打开 USB 调试。整个过程超出了本书的范围。要了解更多关于 Android 的信息，请参阅 Thomas Cannon 在 Defcon 上的演示。

因为破解密码/模式将更加困难，并且需要暴力破解（我们将看到如何解密实际数据），我们将简单地继续并删除该文件，这将从我们的手机中删除模式保护：

```sh
shell@android:/data # cd /data/system
shell@android:/data/system # rm gesture.key
```

所以，我们可以看到，一旦手机被 root，几乎任何事情都可以通过手机、一根 USB 电缆和一个系统来完成。我们将在本书的后续章节中更多地了解基于 USB 的利用。

#### 1.3 沙箱和权限模型

为了理解 Android 沙箱，让我们举一个例子，如下图所示：

![Android 沙箱](https://developer.android.com/images/sandbox.png)

如前所述，Android 中的每个应用程序都在其自己的 Dalvik 虚拟机实例中运行。这就是为什么无论何时任何应用程序在我们的设备中崩溃，它只是显示强制关闭或等待选项，但其他应用程序继续顺利运行。此外，由于每个应用程序都在其自己的实例中运行，除非内容提供者另有规定，否则将无法访问其他应用程序的数据。

Android 使用细粒度的权限模型，要求应用程序在编译最终应用程序包之前预定义权限。你可能会注意到，每次从 Play 商店或其他来源下载应用程序时，它会在安装过程中显示一个权限屏幕，类似于以下屏幕截图：

![权限屏幕](https://developer.android.com/images/permissions-screen.png)

此权限屏幕显示应用程序可以通过手机执行的所有任务的列表，例如发送短信、访问互联网和访问摄像头。请求多于所需的权限会使应用程序成为恶意软件作者更具吸引力的目标。

Android 应用程序开发人员必须在开发应用程序时在名为 `AndroidManifest.xml` 的文件中指定所有这些权限。此文件包含各种应用程序相关信息的列表，例如运行程序所需的最低 Android 版本、包名称、活动列表（应用程序可见的界面）、服务（应用程序的后台进程）和权限。如果应用程序开发人员未能在 `AndroidManifest.xml` 文件中指定权限，并仍在应用程序中使用它，则应用程序将崩溃，并在用户运行它时显示强制关闭消息。