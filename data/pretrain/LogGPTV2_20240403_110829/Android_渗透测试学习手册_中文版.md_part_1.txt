目录
Android 渗透测试学习手册 中文版 1.1
第一章 Android 安全入门 1.2
第二章 准备实验环境 1.3
第三章 Android 应用的逆向和审计 1.4
第四章 对 Android 设备进行流量分析 1.5
第五章 Android 取证 1.6
第六章 玩转 SQLite 1.7
第七章 不太知名的 Android 漏洞 1.8
第八章 ARM 利用 1.9
第九章 编写渗透测试报告 1.10
2
Android 渗透测试学习手册 中文版
Android 渗透测试学习手册 中文版
原书：Learning Pentesting for Android Devices
译者：飞龙
在线阅读
PDF格式
EPUB格式
MOBI格式
代码仓库
赞助我
协议
CC BY-NC-SA 4.0
3
第一章 Android 安全入门
第一章 Android 安全入门
作者：Aditya Gupta
译者：飞龙
协议：CC BY-NC-SA 4.0
Android 是当今最流行的智能手机操作系统之一。 随着人气的增加，它存在很多安全风险，
这些风险不可避免地被引入到应用程序中，使得用户本身受到威胁。 我们将在本书中以方法
论和循序渐进的方式来讨论 Android 应用程序安全性和渗透测试的各个方面。
本章的目标是为 Android 安全打下基础，以便在以后的章节中使用。
1.1 Android 简介
自从 Android 被谷歌收购（2005 年），谷歌已经完成了整个开发，在过去的 9 年里，尤其是
在安全方面，有很多变化。 现在，它是世界上最广泛使用的智能手机平台，特别是由于不同
的手机制造商，如 LG，三星，索尼和 HTC 的支持。 Android 的后续版本中引入了许多新概
念，例如 Google Bouncer 和 Google App Verifier。 我们将在本章逐一介绍它们。
如果我们看看 Android 的架构，如下图所示，我们将看到它被分为四个不同的层。 在它的底
部是 Linux 内核，它已被修改来在移动环境中获得更好的性能。 Linux 内核还必须与所有硬件
组件交互，因此也包含大多数硬件驱动程序。 此外，它负责 Android 中存在的大多数安全功
能。 由于 Android 基于 Linux 平台，它还使开发人员易于将 Android 移植到其他平台和架
构。 Android 还提供了一个硬件抽象层，供开发人员在 Android 平台栈和他们想要移植的硬
件之间创建软件钩子。
在 Linux 内核之上是一个层级，包含一些最重要和有用的库，如下所示：
Surface Manager：管理窗口和屏幕 媒体框架：这允许使用各种类型的编解码器来播放和记
录不同的媒体 SQLite：这是一个较轻的 SQL 版本，用于数据库管理 WebKit：这是浏览器渲
染引擎 OpenGL：用于在屏幕上正确显示 2D 和 3D 内容
以下是来自 Android 开发人员网站的 Android 架构的图形表示：
4
第一章 Android 安全入门
Android 中的库是用 C 和 C++ 编写的，其中大多数是从 Linux 移植的。 与 Linux 相比，
Android 中的一个主要区别是，在这里没有 libc 库，它用于 Linux 中的大多数任务。 相反，
Android 有自己的称为 bionic 的库，我们可以认为它是一个剥离和修改后的，用于 Android
的 libc 版本。
在同一层级，还有来自 Android 运行时 -- Dalvik 虚拟机和核心库的组件。 我们将在本书的下
一部分中讨论关于 Dalvik 虚拟机的很多内容。
在这个层之上，有应用程序框架层，它支持应用程序执行不同类型的任务。
此外，开发人员创建的大多数应用程序只与第一层和最顶层的应用程序交互。 该架构以一种
方式设计，在每个时间点，底层都支持上面的层级。
早期版本的 Android（<4.0）基于 Linux 内核 2.6.x，而较新版本基于内核 3.x. 不同的
Android 版本和他们使用的 Linux 内核的列表规定如下：
5
第一章 Android 安全入门
Android 中的所有应用程序都在虚拟环境下运行，这称为 Dalvik 虚拟机（DVM）。 这里需要
注意的一点是，从 Android 4.4 版本开始，还有另一个运行时称为 Android 运行时（ART），
用户可以在 DVM 和 ART 运行时环境之间自由切换。
然而，对于这本书，我们将只关注 Dalvik 虚拟机实现。 它类似于 Java 虚拟机（JVM），除
了基于寄存器的特性，而不是基于堆栈的特性。 因此，运行的每个应用程序都将在自己的
Dalvik 虚拟机实例下运行。 因此，如果我们运行三个不同的应用程序，将有三个不同的虚拟
实例。 现在，这里的重点是，即使它为应用程序创建一个虚拟环境来运行，它不应该与安全
容器或安全环境混淆。 DVM 的主要焦点是与性能相关，而不是与安全性相关。
Dalvik 虚拟机执行一个名为 .dex 或 Dalvik 可执行文件的文件格式。 我们将进一步查
看 .dex 文件格式，并将在下面的章节中进行分析。 现在让我们继续与 adb 进行交互，并更
深入地分析 Android 设备及其体系结构。
1.2 深入了解 Android
如果你有 Android 设备或正在运行Android模拟器，则可以使用 Android SDK 本身提供的工具
（称为 adb）。 我们将在第二章详细讨论 adb。 现在，我们将只设置 SDK，我们已经准备好
了。
一旦设备通过 USB 连接，我们可以在我们的终端中输入 adb，这将显示所连接设备的序列号
列表。 请确保你已在设备设置中启用了 USB 调试功能。
$ adb devices
List of devices attached
emulator-5554 device
提示
下载示例代码
你可以从 http://www.packtpub.com 下载你从帐户中购买的所有 Packt 图书的示例代码文
件。 如果你在其他地方购买此书，则可以访问 并注册
http://www.packtpub.com/support
以将文件直接发送给你。
现在，如我们之前所见，Android 是基于 Linux 内核的，所以大多数 Linux 命令在 Android 上
也可以通过 adb shell 完美运行。 adb shell 为你提供与设备的 shell 直接交互，你可以在其中
执行命令和执行操作以及分析设备中存在的信息。 为了执行 shell，只需要键入以下命令：
adb shell.
一旦我们在 shell 中，我们可以运行 ps 为了列出正在运行的进程：
6
第一章 Android 安全入门
如你所见， ps 将列出当前在 Android 系统中运行的所有进程。 如果仔细看，第一列制定了
用户名。 在这里我们可以看到各种用户名，如 ， ， 和一系列以 开
system root radio app_
头的用户名。 正如你可能已经猜到的，以 名称运行的进程由系统拥有， 作为根
system root
进程运行， 是与电话和无线电相关的进程， 进程是用户已下载的所有应用程序，
radio app_
安装在他们的设备上并且当前正在运行。 因此，就像在 Linux 中用户确定了当前登录到系统
的唯一用户一样，在 Android 中，用户标识了在自己的环境中运行的应用/进程。
所以，Android 安全模型的核心是 Linux 特权分离。 每次在 Android 设备中启动新应用程序
时，都会为其分配唯一的用户 ID（UID），该用户 ID 将之后会属于某些其他预定义组。
与 Linux 类似，用作命令的所有二进制文件都位于 /system/bin 和 /system /xbin 。 此外，我
们从 Play 商店或任何其他来源安装的应用程序数据将位于 /data/data ，而其原始安装文件
（即 .apk ）将存储在 /data/app 。 此外，还有一些应用程序需要从 Play 商店购买，而不是
只是免费下载。 这些应用程序将存储在 。
/data/app-private/
Android 安装包（APK）是 Android 应用程序的默认扩展名，它只是一个归档文件，包含应用
程序的所有必需文件和文件夹。 我们在后面的章节中将继续对 文件进行逆向工程。
.apk
现在，让我们访问 ，看看里面有什么。 这里需要注意的一点是，为了在真实设备
/data/data
上实现，设备需要 root 并且必须处于 su 模式：
# cd /data/data
# ls
com.aditya.facebookapp
com.aditya.spinnermenu
com.aditya.zeropermission
com.afe.socketapp
com.android.backupconfirm
com.android.browser
com.android.calculator2
com.android.calendar
com.android.camera
com.android.certinstaller
com.android.classic
com.android.contacts
com.android.customlocale2
7
第一章 Android 安全入门
所以，我们可以在这里看到，例如， ，是单独的应用程序文件夹。
com.aditya.facebookapp
现在，你可能会想知道为什么它是用点分隔的单词风格，而不是常见的文件夹名称，
如 或 。 因此，这些文件夹名称指定各个应用程序的软件包名称。 软
FacebookApp CameraApp
件包名称是应用程序在 Play 商店和设备上标识的唯一标识符。 例如，可能存在具有相同名称
的多个相机应用或计算器应用。 因此，为了唯一地标识不同的应用，使用包名称约定而不是
常规应用名称。
如果我们进入任何应用程序文件夹，我们会看到不同的子文件夹，例如文件（ ），数
files
据库（ databases ）和缓存（ cache ），稍后我们将在第 3 章“逆向和审计 Android 应用程
序”中查看。
shell@android:/data/data/de.trier.infsec.koch.droidsheep # ls
cache
databases
files
lib
shell@android:/data/data/de.trier.infsec.koch.droidsheep #
这里需要注意的一个重要的事情是，如果手机已经 root，我们可以修改文件系统中的任何文
件。 对设备获取 root 意味着我们可以完全访问和控制整个设备，这意味着我们可以看到以及
修改任何我们想要的文件。
最常见的安全保护之一是大多数人都想到的是模式锁定或 pin 锁，它默认存在于所有Android
手机。 你可以通过访问 来配置自己的模式。
Settings | Security | Screen Lock
一旦我们设置了密码或模式锁定，我们现在将继续，将手机与 USB 连接到我们的系统。 现
在，密码锁的密钥或模式锁的模式数据以名称 或 存储
password.key gesture.key
在 /data/system 。 注意，如果设备被锁定，并且 USB 调试被打开，你需要一个自定义引导
加载程序来打开 USB 调试。 整个过程超出了本书的范围。 要了解有关 Android 的更多信
息，请参阅 Thomas Cannon Digging 的 Defcon 演示。
因为破解密码/模式将更加艰难，并且需要暴力（我们将看到如何解密实际数据），我们将简
单地继续并删除该文件，这将从我们手机中删除模式保护 ：
shell@android:/data # cd /data/system
shell@android:/data/system # rm gesture.key
所以，我们可以看到，一旦手机被 root ，几乎任何东西都可以只用手机、一根USB电缆和一
个系统来完成。 我们将在本书的后续章节中更多地了解基于 USB 的利用。
1.3 沙箱和权限模型
为了理解 Android 沙箱，让我们举一个例子，如下图：
8
第一章 Android 安全入门
如前图所示和前面所讨论的，Android 中的每个应用程序都在其自己的 Dalvik 虚拟机实例中
运行。 这就是为什么，无论何时任何应用程序在我们的设备中崩溃，它只是显示强制关闭或
等待选项，但其他应用程序继续顺利运行。 此外，由于每个应用程序都在其自己的实例中运
行，因此除非内容提供者另有规定，否则将无法访问其他应用程序的数据。
Android 使用细粒度的权限模型，这需要应用程序在编译最终应用程序包之前预定义权限。
你必须注意到，每次从 Play 商店或任何其他来源下载应用程序时，它会在安装过程中显示一
个权限屏幕，它类似于以下屏幕截图：
9
第一章 Android 安全入门
此权限屏幕显示应用程序可以通过手机执行的所有任务的列表，例如发送短信，访问互联网
和访问摄像头。 请求多于所需的权限使应用程序成为恶意软件作者的更具吸引力的目标。
Android 应用程序开发人员必须在开发应用程序时在名为 AndroidManifest.xml 的文件中指定
所有这些权限。 此文件包含各种应用程序相关信息的列表，例如运行程序所需的最低
Android 版本，程序包名称，活动列表（应用程序可见的应用程序中的界面），服务（应用程
序的后台进程） ，和权限。 如果应用程序开发人员未能在 文件中指定
AndroidManifest.xml
权限，并仍在应用程序中使用它，则应用程序将崩溃，并在用户运行它时显示强制关闭消
息。