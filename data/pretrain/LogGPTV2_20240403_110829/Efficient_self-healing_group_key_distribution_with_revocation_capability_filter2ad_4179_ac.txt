capability, t-wise forward secrecy and t-wise backward secrecy, as
shown in Theorems 2 and 3.
THEOREM 2.
Scheme 2 is an unconditionally secure, self-
healing session key distribution scheme with m log q-bit privacy
and t-revocation capability.
PROOF. We need to prove that Scheme 2 satisﬁes all the condi-
tions listed in Deﬁnition 2.
1. (a) Session key recovery is described in step 3 of Scheme 2.
Thus, H(Kj|Bj , Si) = H(Kj|zi,j) = 0.
(b) For any B ⊆ {U1, ..., Un}, |B| ≤ t, and any non-
revoked member Uv /∈ B, we show that the coalition of B
knows nothing about Sv. First, we have {hj,i(v) = Pj,i(v)−
gj(v)pi(v)}i≤j, {hj,i+1(v) = Qj,i(v) − gj(v)qi(v)}i≥j,
{pi(v) + qi(v) = Ki}i=1,...,m. Since all Pj,i(v), Qj,i(v),
Ki and gj(v) are known values after the broadcast of all
{B1, ..., Bm}, we have
(cid:8)
i(x) + q
H(Sv|{Si(cid:1)}Ui(cid:1) ∈B,B1, ..., Bm)
= H({hj,i(v)}j=1,...,m,i=1,...,m+1|{Si(cid:1)}Ui(cid:1) ∈B,B1, ..., Bm)
= H({pi(v), qi(v)}i=1,...,m|{Si(cid:1)}Ui(cid:1) ∈B,B1, ..., Bm)
= H({pi(v)}i=1,...,m|{Si(cid:1)}Ui(cid:1)∈B,B1, ..., Bm)
Second, we randomly pick all {p
i(v)}i=1,...,m. Because the
(cid:8)
coalition of B knows at most t points on each {pi(x)}i=1,...,m,
i(x)}i=1,...,m based on Lagrange inter-
we can construct {p
(cid:8)
polation on these points. Thus, we construct {q
i(x) = Ki −
(cid:8)
i(x)}i=1,...,m, {h
j,i(x) = Pj,i(x) − gj(x)p
i(x)}i≤j and
(cid:8)
(cid:8)
(cid:8)
p
{h
i(x)}i≥j. We can easily
j,i+1(x) = Qj,i(x) − gj(x)q
(cid:8)
(cid:8)
verify that the following constraints, which are all the knowl-
edge that the coalition of B knows.
i(x) = Ki}i=1,...,m
(i) {p
(cid:8)
(ii) {gj (x)p
j,i(x) = Pj,i(x)}i≤j
(cid:8)
(cid:8)
i(x) + h
(iii) {gj (x)q
j,i+1(x) = Qj,i(x)}i≥j
(cid:8)
(cid:8)
i(x) + h
(iv) ∀Ui(cid:1) ∈ B, {h
(cid:8)
(cid:8)
(cid:8)
) = hj,i(i
j,i(i
Since {p
H({pi(v)}i=1,...,m|{Si(cid:1)}Ui(cid:1) ∈B,B1, ..., Bm)
= H({pi(v)}i=1,...,m).
Thus, H(Sv|{Si(cid:1)}Ui(cid:1) ∈B, B1, ..., Bm) =H({pi(v)}i=1,...,m)
= m log q.
(c) Since {pi(x)}i=1,...,m and {hj,i(x)}1≤i≤m,1≤j≤m+1 are
all randomly picked, zi,j = {p1(i), ..., pj(i), qj(i), ...,
qm(i)} cannot be determined only by broadcast messages or
personal keys. It follows that H(zi,j|B1, ..., Bm) = H(zi,j)
= H(zi,j|S1, ..., Sn).
i(v)}i=1,...,m are picked randomly, we have
(cid:8)
)}j=1,...,m,i=1,...,m+1.
j − q
(cid:8)
2. Assume a collection R of t revoked group members col-
lude. The coalition of R knows at most t points on qj(x)
and nothing on pj(x) before the broadcast of Bj. Based
on Lagrange interpolation, we randomly construct a poly-
(cid:8)
nomial q
j (x) from these t points. Then we randomly pick
(cid:8)
(cid:8)
(cid:8)
(cid:8)
j (x) and h
j, and construct p
K
j (x) = K
j,j(x) =
Pj,j(x)−gj(x)p
j(x). After the broadcast of Bj, we can ver-
(cid:8)
j,j(x) = Pj,j(x). Moreover, for any
(cid:8)
(cid:8)
ify that gj(x)p
j(x) + h
Ui(cid:1) ∈ R, q
(cid:8)
(cid:8)
(cid:8)
(cid:8)
j (x)).
) (from the construction of q
j (i
) = qj (i
) = Pj,j(i
) − gj(i
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
(cid:8)
) = 0, h
Since gj(i
j(x) =
j,j(i
Pj,j(i
(cid:8)
(cid:8)
). In addition, since K
j is randomly cho-
sen, any value is possible from what the coalition knows
about Kj. Thus, H(Kj|B1, ..., Bj ,{Si(cid:1)}Ui(cid:1) ∈R) = H(Kj).
3. (a) From step 3 of Scheme 2, for any Ui that is a member in
sessions j1 and j2 (1 ≤ j1 < j < j2 ≤ m), Ui can recover
{p1(i), ..., pj1 (i), qj1 (i), ..., qj (i), ..., qm(i)} and {p1(i), ...,
pj(i), ... , pj2 (i), qj2 (i), ..., qm(i)}, and recover Kj by com-
puting Kj = pj(i) + qj (i). Thus, H(Kj|zi,j1 , zi,j2 ) = 0.
(b) For any disjoint subsets B, C ⊂ {U1, ..., Un}, where
|B∪C| ≤ t and 1 ≤ j1 < j < j2 ≤ m, {zi(cid:1),j}Ui(cid:1) ∈B,1≤j≤j1
(cid:8)
) = hj,j(i
)p
contains {qj (i)}Ui∈B, and the set {zi(cid:1),j}Ui(cid:1) ∈C,m≥j≥j2 con-
tains {pj(i)}Ui∈C. Thus, for session j, the coalition B ∪ C
knows at most |B| points on qj(x) and |C| points on pj(x).
Because pj(x), qj (x) are two t-degree polynomials and |B∪
C| ≤ t, the coalition of B ∪ C cannot recover Kj. That
is, H(Kj|{zi(cid:1),j}Ui(cid:1) ∈B,1≤j≤j1 ∪ {zi(cid:1),j}Ui(cid:1) ∈C,m≥j≥j2 ) =
(cid:1)
H(Kj).
THEOREM 3. Scheme 2 has the properties of t-wise forward
secrecy and t-wise backward secrecy.
The storage requirement in Scheme 2 comes from two parts.
First, at the setup step, each group member is required to store the
personal secret, which occupies m(m + 1) log q memory space.
(Note that the group members that join later need to store less
data.) Second, after receiving the session key distribution message
in session j, each group member Uv need store the session key Kj
and {q
j (v)}j(cid:1)∈{j+1,...,m}. The latter is necessary to recover fu-
(cid:8)
ture lost session keys. This takes at most m log q memory space.
Hence, the total storage overhead in each group member is at most
m(m + 2) log q.
The broadcast message in step 2 consists of the set of IDs of
all revoked group members and (m + 1) 2t-degree polynomials.
Since we only require the uniqueness of the ID of a particular group
member, the member IDs can be picked from a much smaller ﬁnite
set than Fq. Further considering that the number of revoked IDs
will never be greater than t, we can omit the overhead for stor-
ing or broadcasting the revoked member IDs. Thus, the broadcast
message size can be simpliﬁed to (m + 1)(2t + 1) log q, which al-
most reaches the lower bound max{t2 log q, mt log q} presented
in [27].
3.3 Reducing Storage Requirement
In Scheme 2, the storage overhead in each group member is
O(m2 log q). The majority of this storage overhead comes from
the personal secret that each group member has to keep, which is
determined by the number of masking polynomials.
By carefully evaluating the broadcast messages in scheme 2, we
note that each pi(x) is masked by different masking polynomials
(i.e., {hj,i(x)}j=i,...,m) in different sessions. Though having mul-
tiple masking polynomials seems to make it more difﬁcult to attack,
it does not contribute to the security of this scheme.
Indeed, having one masking polynomial for each pi(x) is sufﬁ-
cient to protect pi(x) and its shares in our scheme. In Scheme 2,
the purpose of the broadcast polynomial gj(x)pi(x) + hj,i(x) is to
make sure that all non-revoked members in session j can recover
one share on pi(x), but all revoked members cannot. Consider a
given pi(x). The members who are valid in session i but revoked
after session i are expected to compute their shares on pi(x). (Even
if such revoked members may lose the broadcast message in ses-
sion i, they can still recover the corresponding key and shares if
they somehow get a copy of that message later.) Therefore, it is
unnecessary to protect the same pi(x) multiple times with different
masking polynomials. In other words, once a broadcast polynomial
gi(x)pi(x) + hi,i(x) is constructed in session i, the group manager
may reuse it for the remaining sessions. This implies that we need
only one masking polynomial for each pi(x). As a result, the total
number of masking polynomials for {pi(x)}i=1,...,m, and thus the
number of personal shares that each group member has to keep are
both reduced.
Similarly, the number of masking polynomials for each qi(x)
can also be reduced. First, in Scheme 2, the members that join
in or before session i are expected to compute all their shares on
qi(x), ..., qm(x). Thus, we can reuse the masking polynomials as
discussed earlier. Second, it is easier to prevent later added group
members from accessing shares of earlier qi(x), since the group
manager already knows which group members to deal with. In par-
ticular, the group manager doesn’t need to use any revoking poly-
nomial, but just need to keep the shares of the masking polynomials
for {pi(x)}i=1,...,j away from the group members added after ses-
sion j. Thus, the broadcast polynomial in Scheme 2, {gj (x)qi(x)+
hj,i+1(x)}i=j,...,m, can be replaced with {qi(x) + fi(x)}i=j,...,m,
where {fi(x)}i=j,...,m} is a set of random t-degree polynomials.
Based on the above discussion, we propose Scheme 3 to re-
duce the storage requirement in each member from O(m2 log q)
in Scheme 2 to O(m log q).
SCHEME 3. Improved self-healing session key distribution
scheme with t-revocation capability.
1. Setup: The group manager randomly picks m 2t-degree mask-
ing polynomials, {hi(x)}i=1,...,m, and m t-degree polyno-
mials, {fi(x)}i=1,...,m, from Fq[x]. Each Uv gets its per-
sonal secret, Sv = {hi(v), fi(v)}i=1,...,m, from the group
manager via the secure communication channel. The group
manager also picks m random session keys, {Ki}i=1,...,m ⊂
Fq and m random t-degree polynomials p1(x), ..., pm(x)
from Fq[x]. For each pi(x), the group manager constructs
qi(x) = Ki − pi(x).
2. Broadcast: In the jth session key distribution, given the sets
of revoked member IDs for sessions in and before session j,
Ri = {r1, r2, ..., rwi}i=1,...,j, where |Ri| = wi ≤ t for
i = 1, ..., j, the group manager broadcasts the following
message:
Bj={Ri}i=1,...,j ∪{Pi(x) = gi(x)pi(x) + hi(x)}i=1,...,j
∪{Qi(x) = qi(x) + fi(x)}i=j,...,m,
where gi(x) = (x − r1)(x − r2)...(x − rwi ), 1 ≤ i ≤ j.
3. Session key and shares recovery: When a non-revoked group
member Uv receives the jth session key distribution mes-
sage, it evaluates {Pi(x)}i=1,...,j and {Qi(x)}i=j,...,m at
point v, recovers the shares {p1(v), ..., pj(v)} as well as
{qj (v), ..., qm(v)}, and then computes the current session
key Kj = pj(v)+qj (v). It ﬁnally stores the items in {p1(v),
..., pj−1(v), Kj , qj+1(v), ..., qm(v)} that it does not have.
4. Add group members: When the group manager adds a group
member starting from session j, it picks an unused ID v ∈
Fq, computes all {hi(v)}i=j,...,m and {fi(v)}i=j,...,m, and
gives {v, {hi(v)}i=j,...,m,{fi(v)}i=j,...,m} to this group
member via the secure communication channel between them.
Though Scheme 3 requires less storage than Scheme 2, it still
retains the nice security properties such as unconditional security
and t-wise forward and backward secrecy, as shown in Theorems 4
and 5.
THEOREM 4.
Scheme 3 is an unconditionally secure, self-
healing session key distribution scheme with m log q-bit privacy
and t-revocation capability.
THEOREM 5. Scheme 3 has the properties of t-wise forward
secrecy and t-wise backward secrecy.
During the setup stage, each group member needs to store one
share of each of the masking polynomials, which totally occupy
2m log q space. Moreover, in order to recover from message loss,
each member needs to store one share (out of the two shares) of