        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
```
`NetworkPolicy`政策被命名为`test-network-policy`。这里列出了网络策略规范中值得一提的几个关键属性，以帮助您了解限制是什么:
*   `podSelector`:基于 Pod 标签的策略适用的一组 Pod。
*   `Ingress`: Ingress rules that apply to the Pods specified in the top-level `podSelector`. The different elements under `Ingress` are discussed as follows:
    - `ipBlock`:允许与入口源通信的 IP CIDR 范围
    - `namespaceSelector`:基于名称空间标签允许作为入口源的名称空间
    - `podSelector`:根据 Pod 标签允许作为入口源的 Pod
    - `ports`:应该允许所有 Pod 与之通信的端口和协议
*   `egress`: Egress rules that apply to the Pods specified in the top-level `podSelector`. The different elements under `Ingress` are discussed as follows:
    - `ipBlock`:允许作为出口目的地通信的 IP CIDR 范围
    - `namespaceSelector`:基于名称空间标签允许作为出口目的地的名称空间
    - `podSelector`:根据 Pod 标签允许作为出口目的地的 Pod
    - `ports`:所有 Pods 都应该被允许与之通信的目标端口和协议
通常，`ipBlock`用于指定在 Kubernetes 集群中允许微服务交互的外部 IP 块，而名称空间选择器和 Pod 选择器用于限制同一 Kubernetes 集群中微服务之间的网络通信。
为了从网络方面加强微服务的信任边界，您可能希望从外部指定允许的`ipBlock`或者从特定的名称空间指定允许的微服务。下面是另一个通过使用`namespaceSelector`和`podSelector`来限制某些 Pods 和名称空间的入口源的示例:
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-good
spec:
  podSelector:
    matchLabels:
      app: web
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          from: good
      podSelector:
        matchLabels:
          from: good
```
注意`podSelector`属性前面没有`-`。这意味着入口源只能是标签为的 pods，名称空间中的标签为`from: good`的 pods。该网络策略通过默认命名空间中的标签`app: web`保护 Pods:
![Figure 5.1 – Network policy restricting incoming traffic by Pod and namespace labels ](img/B15566_05_001.jpg)
图 5.1–通过 Pod 和命名空间标签限制传入流量的网络策略
在上图中，`good`命名空间有标签`from: good`，而`bad`命名空间有标签`from: bad`。它说明了只有名称空间中标签为`from: good`的 Pods 才能访问默认名称空间中的`nginx-web`服务。其他 Pods，无论它们是来自`good`命名空间但没有标签`from: good`还是来自其他命名空间，都不能让访问默认命名空间中的`nginx-web`服务。
# 总结
在本章中，我们讨论了安全边界的重要性。了解 Kubernetes 生态系统中的安全域和安全边界有助于管理员了解攻击的爆炸半径，并制定缓解策略来限制攻击事件造成的损害。了解 Kubernetes 实体是强化安全边界的起点。下一步是了解使用 Linux 名称空间和功能构建到系统层的安全边界。最后但并非最不重要的一点是，理解网络策略的力量对于将安全细分构建到微服务中也至关重要。
完成本章后，您应该掌握安全域和安全边界的概念。您还应该知道安全域、Kubernetes 中的公共实体，以及在 Kubernetes 实体内部或周围构建的安全边界。您应该知道使用内置安全功能(如 PodSecurityPolicy 和 NetworkPolicy)来强化安全边界和仔细配置工作负载的安全上下文的重要性。
在下一章中，我们将讨论如何保护 Kubernetes 组件。特别是，有一些配置细节需要注意。
# 问题
1.  Kubernetes 中有哪些安全域？
2.  你与哪些常见的 Kubernetes 实体交互？
3.  如何限制 Kubernetes 用户访问特定命名空间中的对象？
4.  启用 hostPID 对 pod 意味着什么？
5.  尝试配置一个网络策略来保护您的服务，该策略只允许特定的 Pods 作为入口源。
# 进一步参考
*   Kubernetes 网络策略:[https://kubernetes . io/docs/concepts/service-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
*   CVE-2018-18264:[https://groups . Google . com/forum/#！search in/kubrines-announce/CVE-2018-18264% 7 csort:date/kubrines-announce/ybrff 5 nmvfi/郭 60 kilcaaj](https://groups.google.com/forum/#!searchin/kubernetes-announce/CVE-2018-18264%7Csort:date/kubernetes-announce/yBrFf5nmvfI/gUO60KIlCAAJ)
*   CVE-2018-1002105:[https://groups . Google . com/forum/#！主题/立方结构-公告/GVllWCg6L88](https://groups.google.com/forum/#!topic/kubernetes-announce/GVllWCg6L88)