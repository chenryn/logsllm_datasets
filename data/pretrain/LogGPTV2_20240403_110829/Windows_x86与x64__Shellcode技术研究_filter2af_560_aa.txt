# Windows(x86与x64) Shellcode技术研究
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
最近研究Windows x64
Shellcode技术，发现关于Shellcode技术相关文章比较杂而且有的存在错误，所以写下这篇文档。此文档主要是通过阅读吸收参考文献，进行总结。第一次使用markdown，如有格式错误、图片不清勿怪。  
Windows下的32位与64位的Shellcode编写基本原理和过程是一致的，只是在寄存器、堆栈平衡与函数参数传递等方面存在不同。一般情况下，Shellcode是由汇编代码编写，并转换成二进制机器码，其内容和长度经常会受到苛刻的限制，所以与普通的汇编程序开发不同。  
如图1所示，Shellcode开发流程分为6个步骤:  
 **(1).定位kernel32.dll 基址**  
所有Windows程序都会加载ntdll.dll和kernel32.dll，通过kernel32.dll中的LoadLibrary和GetProcAddress加载其他DLL与获取其他函数地址。  
 **(2).定位GetProcAddress函数的地址(不是必需的)**  
GetProcAddress函数位于kernel32.dll，其功能为获取DLL中的函数地址。  
 **(3).定位LoadLibrary函数的地址**  
LoadLibrary函数位于kernel32.dll，用于加载DLL。  
 **(4)加载DLL获取基址**  
通过调用LoadLibrary函数，获取DLL基地址(如user32.dll)。  
 **(5).获取其他函数地址**  
获取加载的DLL中的函数地址。  
 **(6).函数调用**  
根据函数地址，通过call指令调用函数。
## 一、 定位Kernel32.dll基址
每个程序都会加载kernel32.dll，所以可以在进程环境信息(PEB)中获取kernel32.dll基址。下面分别介绍Windows
x86和x64定位kernel32.dll基址方法。
###  1.1 Windows x86定位kernel32基址
如图1-1所示，x86定位kernel32.dll的过程可以分为：定位TEB与
PEB、定位Ldr、定位LDR_DATA_TABLE_ENTRY与确定kernel32.dll基址等4个步骤，下面一一详述：
**(1).定位TEB与PEB**
TEB（Thread Environment
Block，线程环境块）中保存频繁使用的线程相关的数据。进程中的每个线程都有自己的一个TEB。一个进程的所有TEB都以堆栈的方式，存放在从0x7FFDE000开始的线性内存中，图1-2描述的是TEB结构体的详细信息。如图1-3所示，PEB（Process
Environment Block，进程环境块）存放进程信息，每个进程都有自己的PEB信息。进程环境块的地址在0x7FFDF000处。但是从Windows
xp SP2中就引入了TEB与PEB随机化技术，TEB与PEB的基址不再固定。  
虽然PEB和TEB的基址具有一定的随机性，可以通过FS寄存器可以获取TEB的基址。很多文档中提到FS中存储TEB基址，实际并不是这样。在FS存储的是TEB在GDT(Global
Descriptor Table)中的序号，通过GDT获取TEB的基址。如图1-2所示，PEB结构体在TEB偏移0x30处，即FS:[0x30]。  
 **(2).定位Ldr**
如图1-3所示，在PEB偏移0x00c处是Ldr，Ldr的类型为PEB_LDR_DATA结构体指针。Ldr的作用是存储进程已加载的模块(Module)信息。Module是指PE格式的可执行映像，包括EXE映像和DLL映像。如图1-4所示，Ldr通过3个队列存储进程加载的Module信息，即InLoadOrderModuleList、InMemoryOrderModuleList、和InInitializationOrderModuleList。前两个模块队列都是模块加载队列，第三个是模块初始化队列。前两个模块队列的不同之处在于排列的次序，一个是按装入的先后，一个是按装入的位置。  
 **(3).定位LDR_DATA_TABLE_ENTRY**
每当为本进程装入一个模块时，就要为其分配、创建一个LDR_DATA_TABLE_ENTRY数据结构，并将其挂入InLoadOrderModuleList和InMemoryOrderModuleList，完成对这个模块的动态连接以后，就把它挂入InInitializationOrderModuleList队列，以便依次调用模块的初始化函数。由此可见进程加载的每个模块都会有一个LDR_DATA_TABLE_ENTRY，其作用为存储模块的基本信息。如图1-5所示，DLL基址(DLLBase)在偏移0x18处。  
Ldr中的3个字段InLoadOrderModuleList、InMemoryOrderModuleList、和InInitializationOrderModuleList是这3个队列的起始位置，它们分别指向LDR_DATA_TABLE_ENTRY
结构体上的InLoadOrderModuleLinks、InMemoryOrderModuleLinks、和InInitializationOrderModuleLinks字段。如图1-5所示，在LDR_DATA_TABLE_ENTRY中可以通过相对偏移计算处DLLBase的地址。
**(4).确定kernel32.dll基址**
由Ldr中的3个List字段可以获得LDR_DATA_TABLE_ENTRY中3个Links的地址，通过相对偏移计算出DLLBase，自此只是计算出进程加载的第一个Module的基址。那么如何获取其他的Module的基址呢？这3个List的字段是List_Entry类型的指针，如图1-6所示，List_Entry中有两个List_Entry类型的指针，由此可见Ldr中的3个List是双向链表，那么如何获取到所有Module的基址就很明确了。  
如图1-1所示，Module A的3个Links结构体的Flink指针分别指向Module B
的3个Links字段的地址，同理可以获取所有Module的Links字段的地址，从而计算出Module的基址。  
其实通过LDR_DATA_TABLE_ENTRY中的3个Links字段的任一个都可以计算出Module的基址，那么该如何选择呢？下面先分析一段代码：
代码1-1是Windows XP下Shellcode最通用的获得kernel32基址代码，但是无法在Windows
7和以上版本正常运行，因此大大降低了其通用性。通过在Windows 7和Windows
XP中遍历InLoadOrderModuleList、InMemoryOrderModuleList、和InInitializationOrderModuleList这3个队列，可以得到如图1-7的结果。Windows7和XP的不同在于：InInitializationOrderModuleList
(图中的List3)中的kernel32.dll和kernelbase.dll的次序不同，导致Windows
XP的Shellcode无法在Windows7中正常运行。Windows
XP中选择InInitializationOrderModuleList队列的原因是kerneldll.32位于第二项，而其他两个队列中都是位于第三项。因此代码1-1只要在第4行之后加一次寻址操作即可在Windows
7中正常运行。如果使用队列nLoadOrderModuleList和InMemoryOrderModuleList就能同时兼容Windows XP和7 。  
为什么在之前通用的shellcode的代码中不采用nLoadOrderModuleList和InMemoryOrderModuleList以提高普适性？主要是因为前2个List不适用于Windows
2000。  
如代码1-2所示，综上所述可以得出适用于Windows XP和Windows7的代码汇编代码。
为了提高代码的通用性，可以不依赖于各个Windows各个版本的InLoadOrderModuleList等3个List中的kernel32.dll的位置，可以在遍历List时判断DLL的名称从而确定当前Module是否为kernel32.dll。如代码1-3所示，获取InInitializationOrderModuleList地址后，通过偏移计算出DLL基址，然后在DLL导出表中找到DLL名称字符串地址并与kernel32.dll比较，直至匹配成功。如何寻找DLL导出表以及导出表的结构会在第二章详细介绍。只要Windows的PE文件结构不改变，该代码均可通用。这样虽然提高了通用性，但是Shellcode的长度也增大了。  
###  1.2 Windows x64定位kernel32基址
Windows x64获取kernel32基址的基本原理与方法是一致的，存在的区别具体如下：
**(1).指向TEB在GDT的序号不再是FS寄存器，改为GS寄存器。**
如图1-8所示，GS寄存器指向TEB在GDT中的序号，PEB在TEB偏移0x60处，即GS:[0x60]  
 **(2).TEB、PEB、Ldr与LDR_DATA_TABLE_ENTRY的偏移量有所不同。**
如图1-9所示，Ldr在PEB偏移0x18处。如图1-10所示，3个队列指针在Ldr中的偏移量分别为：0x10、0x20与0x30。在LDR_DATA_TABLE_ENTRY中3个队列节点指针偏移量分别为：0x0、0x10与0x20，DLL基址(DllBase)位于偏移0x30处。其中InMemoryOrderModuleLinks与DllBase的相对偏移量为0x20。  
通过上述分析，可以得出在Windows x64下通用的定位kernel32基址的代码如代码1-4所示。  
## 二、定位函数
###  2.1 Windows x86定位函数
Shellcode一般情况下是运行在其他进程中，无法确定所需函数的DLL是否已经加载到内存。受ASLR（地址空间布局随机化）机制的影响，系统不会每次都把DLL文件加载到相同地址上。而且DLL文件可能随着Windows每次新发布的更新而发生变化，所以不能依赖DLL文件中某个特定的偏移。开发Shellcode需要把DLL加载到内存，然后根据DLL基址获取函数地址。  
加载DLL文件需要kernel32.dll中的LoadLibrary函数；获取目标函数地址可以通过函数名匹配与kernel32.dll中的GetProcAddress函数两种方法。由此可知：一是kernel32.dll基址是定位函数的基础；二是由kernel32.dll基址获取LoadLibrary与GetProcAddress函数地址和由加载的DLL基址获取其他函数的原理是一致的，总结为由DLL基址定位函数地址。所以本节需要解决的核心问题是：如何由DLL的基址获取函数地址。  
如图2-1所示，在DLL基址处是DOS头，在偏移0x03c处是e_lfanew字段，该字段存储的是NT头的偏移。如图2-2所示，在NT头偏移0x018处存储的是NT可选头结构体(OptionalHeader)。  
如图2-3所示，在NT可选头的偏移0x060处存储的是DataDirectory数组。该数组的第一个成员DataDirectory[0]位PE文件的导出表信息(EXPORT
Directory)，包括导出表的地址和大小(如图2-4)。  
如图2-5所示，PE导出表中包含多个导出函数列表，NumberOfFunctions为DLL中导出函数的总数，NumberOfNames为具有函数名称的导出函数的总数，函数既可以用函数名方式导出，也可以用序号方式导出。下面详细介绍AddressOfFunctions、AddressOfNames与AddressOfNameOrdinals
3个列表。
**(1).AddressOfFunctions**