uration is set to use MODP 1536, initial queue size will be
(MODP 1024=4, MODP 1536=2, nonce=12). At initial
startup time, the system completely ﬁlls all the queues to
capacity and then sets a timer that ﬁres every second to
reﬁll the queues if any values have been used.9 If a nonce
or a DH key is ever requested when the queue is empty,
then a fresh value is generated on the ﬂy.
9Note: only one value is generated per second, so if several values
are used, it takes some time to reﬁll the queue.
Importantly, the queues are ﬁlled in priority order with
nonces being the highest priority followed by the groups
in descending order of cryptographic strength (ECP 384
down to MODP 768). This means that in many (but not
all) cases, the nonce for a given connection will precede
the keys for that connection in the random number se-
quence.
Figure 1 shows a (somewhat idealized) sequence of
generated values10, with the numbers indicating the order
in which they were generated before and after an IKE
DH exchange. Figure 1a shows the situation after startup:
The ﬁrst four values are used to ﬁll the nonce queue and
the next two values are used to generate the DH shares.
Thus, when the exchange happens, it uses value 1 for
the nonce and value 5 for the key, allowing the attacker
to derive the Dual EC state from value 1 and then com-
pute forward to ﬁnd the DH private key. After a single
DH exchange, which requires DH key and one nonce,
the state is as shown in Figure 1b, with the new values
shaded. Note that the next-in-line values continue to have
the property that the nonce was generated before the DH
share. Because nonce computation is prioritized over key
generation, in this simple conﬁguration where you have
a single DH group that is used for every handshake, then
as long as handshakes are done reasonably slowly (giving
the background task enough time to ﬁll the queue) the
nonce used for a given handshake will always have been
generated prior to the DH key for that handshake. Of
course, if a large number exchanges are run in succes-
sion (i.e., outpacing the background task) it is possible to
exhaust both queues entirely, at which point the request
for a key or nonce will cause the value to be generated
immediately, resulting in the DH being computed before
the nonce.
5.4 Non-DH Phase 2 Exchanges
As noted above, the phase 2 exchange need not include
a new DH exchange; implementations can simply do a
nonce exchange and generate fresh keys (although Ju-
niper’s documentation recommends doing DH for phase
2 as well) [18, Page 72]. In this case, IKE will consume
an additional nonce from the nonce queue but not a new
DH key from the DH key queue. In the case where end-
points do a single phase 1 exchange and then a phase 2
exchange, with only the former doing DH, then setting
up a VPN connection setup consumes two nonces and
10For simplicity, we represent multiple consecutive invocations of the
RNG as a single value and ignore invocations of the RNG for non-IKE
purposes. In addition, because the queues are reﬁlled asynchronously
with respect to the IKE exchanges, there is a race condition between
values being consumed and being refreshed. The pattern shown here and
below is the result of assuming that the timer ﬁres between handshakes.
If it ﬁres more frequently (i.e., between each DH and nonce encoding),
then the nonces become even and the DH shares become odd. Mixed
patterns are also possible.
6
(a) At system startup
(b) After a DH exchange
Figure 1: Nonce queue behavior during an IKE handshake. Numbers indicate generation order, and values generated after the
handshake are highlighted. During a DH exchange, outputs 1 and 5 are used as the nonce and key, advancing the queue, and new
outputs are generated to ﬁll the end of the queue.
one DH key. However, because the nonce queue is twice
as large as the DH queue, as long as the reﬁll timer ﬁres
reasonably often with respect to the handshakes it is not
possible to exhaust the nonce queue (thus causing a fresh
PRNG value to be generated) while there is still a stale
DH value in the DH queue. Note that if the nonce and
DH queues were the same size, then non-DH phase 2
exchanges would frequently cause keys to be stale with
respect to the nonce.
In addition, if multiple non-DH phase 2 exchanges are
done within a single phase 1 exchange, then it is possible
to empty the nonce queue while there are still values in the
DH queue. In this case, it will only be possible to decrypt
connections established using those values if the attacker
has recorded previous nonces, rather than decrypting a
connection in isolation. Similarly, the current nonces
could be used to decrypt future connections but not the
connections they are transmitted with.
5.5 Multiple Groups
In addition, if the device is conﬁgured to use multiple
groups, then it is possible to have the shares for one group
become stale with respect to the nonces queue, as shown
in Figure 2, which shows the result of eight MODP 2048
exchanges on the queues. The shaded MODP 1024 values
were all generated before any of the remaining nonces. If
the attacker starts listening at this point and observes a
MODP 1024 exchange, he will not be able to decrypt it.
5.6 Recovering trafﬁc keys
As described above, IKE comes in two versions (IKEv1
and IKEv2) which are slightly different. Furthermore,
each version uses a somewhat unusual two-phase ap-
proach to protecting trafﬁc. In this section, we describe
the phases and the authentication modes that determine
whether or not protected trafﬁc can be passively de-
crypted.
IKEv1, phase 1.
IKEv1 deﬁnes four authentication
modes for phase 1: digital signatures, two modes using
public-key encryption, and preshared keys [15, Section 5].
Figure 2: Queue state after 8 MODP 2048 exchanges. Numbers
indicate generation order, and stale values are highlighted. If
several connections have been made to the same DH group, the
other DH group can grow stale as all nonces that were generated
before those keys are used up.
Although the details vary, each mode computes a shared
secret, SKEYID derived from secret values (e.g., nonces
and Difﬁe–Hellman keys) exchanged in the handshake.
Next, the encryption keying material, SKEYIDe is derived
from SKEYID and ﬁnally the trafﬁc keys used to protect
phase 2 are derived from that in an algorithm-speciﬁc
manner. Authentication keying material is derived in a
similar fashion, but since an adversary is primarily con-
cerned with decryption rather than authentication, we
omit discussion of authentication below except as it re-
lates to decryption.
• Authentication with digital signatures.
In this
mode, the initiator and responder nonces and DH
public keys are exchanged in the clear. Starting with
the responder’s nonce, an attacker who can recover
the responder’s DH private key has all of the material
necessary to compute SKEYID and thus trafﬁc keys.
• Authentication with public key encryption.
IKEv1 deﬁnes two public-key encryption modes for
authentication. The revised mode uses half the num-
ber of public-key encryptions and decryptions the
other mode uses, but are otherwise similar. In these
modes, the DH public keys are exchanged in the clear
but each peer encrypts its nonce using the other’s
7
1234Nonces56MODP10242347Nonces68MODP102413151719Nonces2628MODP20481112MODP102421232527public key. These modes require the initiator to know
the responder’s public key prior to the handshake.
Each peer decrypts the other’s nonce and computes
SKEYID. Since nonces are encrypted, even if an at-
tacker can recover the responder’s nonce (e.g., by
capturing a nonce in the clear from a previous con-
nection, recovering the Dual EC state, and walking
the generator forward), the initiator’s nonce is also
encrypted, thus stopping the attack.
• Authentication with preshared keys. In this mode,
a preshared key needs to be established out of band.
The DH public keys and nonces are exchanged in the
clear. The encryption keying material, SKEYIDe is
derived from the preshared key, the nonces, and the
DH keys. An attacker who can recover a DH private
key can perform an ofﬂine attack on the preshared
key. Depending on the strength of the PSK, this
process of recovering it may be trivial or may be
computationally intractable.11
IKEv1, phase 2. After phase 1 completes, there is a
second phase, called Quick Mode, which involves an-
other exchange of nonces and, optionally, another DH
exchange for forward secrecy [20]. As the messages
for phase 2 are protected by the keys established during
phase 1, there is no additional encryption. Thus, an at-
tacker who has successfully recovered the phase 1 keys
can decrypt phase 2 messages. At this point, if another
DH key exchange is used, the attacker can either run the
Dual EC-state-recovery attack again or simply walk the
Dual EC generator forward to recover the DH private key.
If only nonces are exchanged, then no additional work is
necessary. In either case, the attacker can compute the
trafﬁc keys and recover plain text.
IKEv2, phase 1. A connection in IKEv2 begins by
exchanging two request/response pairs which form the
initial exchange. The ﬁrst pair of messages, called
IKE_SA_INIT, exchange DH public keys and nonces
in the clear. The peers use these to compute a shared se-
cret, SKEYSEED, from which all trafﬁc keys are derived.
These keys are used to protect the following messages.
This ﬁrst exchange contains all of the information nec-
essary for the attacker to recover the Dual EC state and
compute a DH private key and thus derive SKEYSEED.
This stands in contrast to IKEv1 where the authentication
mode inﬂuences key derivation and hence, exploitability.
The second exchange, called IKE_AUTH, is encrypted
using keys derived from SKEYSEED and is used to au-
thenticate each peer, but plays no role in decryption. At
11Anecdotally, the preshared keys used in practice are often quite
weak. For example, FlyVPN’s “How To Setup L2TP VPN On An-
droid 4” instructs the user to “Input ‘vpnserver’ letters into ‘IPSec pre-
shared key.’ ” https://www.flyvpn.com/How-To-Setup-L2TP-
VPN-On-Android-4.html, retrieved February 18, 2016.
this point, a child security association (CHILD_SA) is set
up which can be used for protecting VPN trafﬁc.
IKEv2, phase 2.
IKEv2 does contain a second phase,
called CREATE_CHILD_SA, which can be used to create
additional child security associations. One use of this
phase is periodic rekeying. The use of a second phase is
optional.12
Similar to IKEv1’s second phase, nonces and, option-
ally, DH public keys are exchanged. As before, when
DH keys are used, an attacker may either perform the
Dual EC-state-recovery attack a second time or walk the
generator forward.
6 Exploiting the Vulnerability against IKE
To validate the attacks we describe above, we purchased a
Juniper NetScreen SSG-500M VPN device, and modiﬁed
the ﬁrmware version 6.3.0r12 in a manner similar to the
2012 attack. This required us to generate a point Q for
which we know the trapdoor (logP Q)−1, and to modify
the Dual EC Known Answer Test (KAT) correspondingly.
To install the ﬁrmware on the device, we further modi-
ﬁed a non-cryptographic checksum contained within the
header of the ﬁrmware.13
Using the new ﬁrmware, we next conﬁgured the de-
vice with three separate VPN gateways: (1) conﬁgured
for IKEv1 with a PSK, (2) conﬁgured for IKEv1 with a
1024-bit RSA signing certiﬁcate, and (3) conﬁgured for
IKEv2 with a PSK. For each conﬁguration, we initiated
VPN connections to the box using strongSwan [34]. By
capturing the resulting trafﬁc, we were then able to extract
the nonces in the IKE handshakes and run the Dual EC
attack to recover the state of the random number generator
for each connection. As previously discussed, since the
32-byte nonces consist of the concatenation of two con-
secutive 30-byte Dual EC blocks, truncated to 32-bytes,
we used the ﬁrst 30 bytes of the nonce to recover a poten-
tial state value, and then conﬁrmed this guess against the
remaining 2 bytes of the nonce.
From this point, we generated a series of Dual EC
outputs to obtain a private exponent consistent with the
Difﬁe–Hellman public key observed in the trafﬁc. This
required a single modular exponentiation per potential
exponent x, followed by a comparison to the extracted
key exchange payload value. Given the correct private
exponent, we then obtained the shared secret from the
initiator value, thereby determining the DH shared se-
cret gxy. Given the Difﬁe–Hellman shared secret, we
12“The second request/response (IKE_AUTH) transmits identities,
proves knowledge of the secrets corresponding to the two identities,
and sets up an SA for the ﬁrst (and often only) AH and/or ESP
CHILD_SA” [20].
13If a certiﬁcate is installed on the device, ﬁrmware updates require
the presence of a valid digital signature on the new ﬁrmware. Since we
did not have a certiﬁcate installed, we were able to omit this signature.
8
implemented the remaining elements of the IKEv1 and
IKEv2 standards [15, 20] in order to calculate the Phase 1
(Aggressive Mode) keying material (for IKEv1) and the
corresponding IKE_SA_INIT/IKE_AUTH keying material
(for IKEv2). This information encrypts the subsequent
handshake messages, and is itself used to calculate the
key material for subsequent payloads, including Encap-
sulated Secure Payload (ESP) messages. A challenge in
the IKEv1 PSK implementation is the need to incorporate
an unknown PSK value into the PRF used to calculate
the resulting key material. For our proof of concept im-
plementation we used a known PSK, however without
knowledge of this value, an additional brute-force or dic-
tionary attack step would have been required. No such
problem exists for the IKEv1 certiﬁcate connections, or
for IKEv2 PSK.
Using the recovered key material, we next decrypt the
remaining trafﬁc, which in each case embeds a second
Difﬁe–Hellman handshake with additional nonces and
Difﬁe–Hellman ephemeral public keys. Since this hand-
shake is also produced from the same generator, we can
simply wind the generator forward (or restart with a nonce
drawn from the second phase handshake) to recover the
corresponding Difﬁe–Hellman private keys. This new
shared secret can then be used to calculate the resulting
key material. All subsequent trafﬁc that we see and de-
crypt utilized the Encapsulating Security Payload (ESP)
protocol [23] in tunnel mode.
7 Passively detecting Juniper ScreenOS
An adversary who knows the Dual EC Q parameter —
either Juniper’s nonstandard point or the point that was
introduced into ScreenOS unbeknownst to Juniper — may
wish to detect vulnerable versions of ScreenOS by pas-
sively watching network trafﬁc. In theory, such an adver-
sary has several avenues open to it. The easiest approach
is to attempt the attack on every VPN connection to see if
the attack is successful. Alternatively, the adversary could
attempt to ﬁngerprint VPN boxes and only perform the
attack on connections that match.
Dual EC is known to have a small, but nonnegligible,
bias. In particular, Schoenmakers and Sidorenko [32]