玩转
graphQL -
安全脉搏
SecPulse.COM |
“ 这是 酒仙桥六号部队 的第 118 篇⽂章。
这是 酒仙桥六号部队 的第 118 篇⽂章。
全⽂共计 4257 个字，预计阅读时⻓ 12 分钟。
前⾔
在测试中我发现了很多⽹站开始使⽤ GraphQL 技术，并
且在测试中发现了其使⽤过程中存在的问题，那么，到底
GraphQL 是什么呢？了解了 GraphQL 后能帮助我们在
渗透测试中发现哪些问题呢？
在测试中，我们最常⻅的 graphql 的数据包就像图中⼀
样：
和 json 类似的格式，但其中包含了很多换⾏符 n，当你
遇到这种结构的请求时，请多留⼼测试⼀下 GraphQL 是
否安全。
前置知识
什么是 GraphQL
GraphQL 是⼀个⽤于 API 的查询语⾔，使⽤基于类型系
统来执⾏查询的服务（类型系统由你的数据定义）。
GraphQL 并没有和任何特定数据库或者存储引擎绑定，
⽽是依靠你现有的代码和数据⽀撑。
如果你了解 REST API 会更快地了解它。像 REST API，
往往我们的请求需要多个 API，每个 API 是⼀个类型。
⽐如：http://www.test.com/users/{id} 这个 API 可以
获取⽤户的信息；再⽐如：
http://www.test.com/users/list 这个 API 可以获取所
有⽤户的信息。
在 graphql 中则不需要这么多 api 来实现不同的功能，
你只需要⼀个 API，⽐如：
http://www.test.com/graphql 即可。查询不同的内容仅
需要改变 post 内容，不再需要维护多个 api。（使⽤官
⽅的 demo 进⾏演示：https://graphql.org/swapi-
graphql）
⽐如查 id 为 1 的⼀个⼈的⽣⽇，可以这么查：
想查他的身⾼、发⾊可以这么查：
我想查 id 为 2 的⼈的信息我可以这么查：
通过上⾯这个例⼦就可以看出 graphql 与 REST API 的
区别，仅⽤⼀个 API 即可完成所有的查询操作。并且他
的语法和结构都是以⼀个对象不同属性的粒度划分，简单
好⽤。
基本属性
GraphQL 的执⾏逻辑⼤致如下：
查询 -> 解析 -> 验证 -> 执⾏
根据官⽅⽂档，主要的操作类型有三种：query（查
询）、mutation（变更）、subscription（订阅），最常
⽤的就是 query，所有的查询都需要操作类型，除了简写
查询语法。
类型语⾔ TypeLanguage，type 来定义对象的类型和字
段，理解成⼀个数据结构，可以⽆关实现 graphQL 的语
⾔类型。类型语⾔包括 Scalar（标量）和 Object（对
象）两种。并且⽀持接⼝抽象类型。
Schema ⽤于描述数据逻辑，Schema 就是对象的合
计，其中定义的⼤部分为普通对象类型。⼀定包括
query，可能包含 mutation，作为⼀个 GraphQL 的查询
⼊⼝。
Resolver ⽤于实现解析逻辑，当⼀个字段被执⾏时，相
应的 resolver 被调⽤以产⽣下⼀个值。
内省查询
简单来说就是，GraphQL 内置了接⼝⽂档，你可以通过
内省的⽅法获得这些信息，如对象定义、接⼝参数等信
息。
当使⽤者不知道某个 GraphQL 接⼝中的类型哪些是可⽤
的，可以通过__schema 字段来向 GraphQL 查询哪些类
型是可⽤的。
具体可以参考 GraphQL ⽂档学习。
GraphQL 中常⻅的问题
内省查询问题
这本来应该是仅允许内部访问，但配置错误导致任何攻击
者可以获得这些信息。
还是拿官⽹的 demo 来测试。
⼀个正常的查询请求如下。
通过内省查询获得的数据如下：
{"query":"n query IntrospectionQuery {rn __sch
返回包返回的就是该 API 端点的所有信息。复制返回包
到以下⽹址可以得到所有的对象定义、接⼝信息。
https://apis.guru/graphql-voyager/
github 也有很多⼯具可以直接绘制接⼝⽂档：
https://github.com/2fd/graphdoc
https://github.com/graphql/graphql-playground
这是 garphql 最常⻅的⼀类问题，通过这些⽂档我们就
能很轻松的找到存在问题的对象了。通过遍历，即可发现
很多安全问题。不过这个问题可以通过配置来解决，让攻
击者⽆法获得敏感信息，或者其他攻击⾯。
信息泄露
通过内省查询，我们可以得到很多后端接⼝的信息。有了
这些信息通过排查便可能发现更多的安全问题，⽐如信息
泄露。
查询存在的类型：
查询类型所有的字段：
在查找字段⾥是否包含⼀些敏感字段：
Email、token、password、authcode、license、key、
session、secretKey、uid、address 等。
除此以外还可以搜索类型中是否有 edit、delete、
remove、add 等功能，来达到数据编辑、删除、添加的
功能。
SQL 注⼊
graphql 的 sql 注⼊与⼀般的 sql 注⼊类似，都是可以通
过构造恶意语句达到注⼊获取数据或改变查询逻辑的⽬
的。p 神在先知⼤会上讲过该类问题，借⽤ p 神的 2 张
PPT。
只有直接使⽤ graphql 进⾏查询才会出现的问题，正确
的使⽤参数化查询，不会遇到 sql 注⼊的问题。
CSRF
在 Express-GraphQL 中存在 CSRF 漏洞。如果将
Content-Type 修改为 application/x-www-form-
urlencoded ，再将 POST 请求包内容 URL 编码并⽣成
csrf poc 即可实施 csrf 攻击，对敏感操作如 mutation
（变更）造成危害。
修复⽅式可以考虑将 CORS 配置为仅允许来⾃受信任域
的⽩名单的请求，或者确保正在使⽤ CSRF 令牌. 实施多
种保护将降低成功攻击的⻛险.
嵌套查询拒绝服务
当业务的变量互相关联，如以下 graphql 定义为这样
时，就可能⽆限展开，造成拒绝服务。
type Thread {
messages(first: Int, after: String): [Message]
}
type Message {
thread: Thread
}
type Query {
thread(id: ID!): Thread
}
就有可能存在拒绝服务的⻛险。
就可能造成服务器拒绝服务。
修复⽅式可以考虑增加深度限制，使⽤ graphql-depth-
limit 模块查询数量限制；或者使⽤ graphql-input-
number 创建⼀个标量，设置最⼤为 100
权限问题
graphql 本身建议由业务层做权限控制，graphql 作为⼀
个单路由的 API 接⼝完成数据查询操作。开发者在使⽤
时经常会忽略接⼝的鉴权问题。有时候客户端调⽤查询接
⼝，直接传⼊了 id 等信息并未做好权限校验，就有可能
存在⽔平越权。
修复⽅式建议在 GraphQL 和数据之间多加⼀个权限校验
层，或者由业务⾃⾏实现权限校验。
总结
GraphQL 技术由于其兼容 restAPI，降低了 API 维护的
成本已有很多企业在使⽤。可能存在的安全问题有：
1） 信息泄露
2） Sql 注⼊
3） Csrf 漏洞
4） 嵌套查询拒绝服务漏洞
5） 越权漏洞
6） 内省查询
在理解了 GraphQL 的⼯作原理和存在的问题后，⼤家⼯
作或挖 SRC 过程中遇到这类技术可以有针对性的进⾏漏
洞挖掘，本⼈也是第⼀次接触此类技术如有错误还请斧
正。
本⽂作者： 酒仙桥六号部队
本⽂为安全脉搏专栏作者发布，转载请注明：
https://www.secpulse.com/archives/148242.html
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明