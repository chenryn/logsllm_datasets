Initialisation. Set the chain C ← genesis, set round r ← 1 and initialise an empty list of candidate blocks for edits R := ∅.
For each round r of the protocol, we describe the following sequence of execution.
Chain update. At the beginning of a new round r, the nodes try to update their local chain by calling C ← Γ(cid:3).updateChain.
j to the pool of candidate blocks R iff
Candidate blocks pool. Collect all candidate blocks B(cid:3)
Γ(cid:3).validateCand(C, B(cid:3)
Editing the chain. For all candidate blocks B(cid:3)
j from the network and add B(cid:3)
j ) = 1; otherwise discard B(cid:3)
j .
j ∈ R do:
j ) = accept, then build the new chain as C ← C(cid:4)(n−j+1)||B(cid:3)
j , it must be the case that the ratio of votes for B(cid:3)
j ) = reject, then remove B(cid:3)
j from R. For policy P to reject B(cid:3)
j ||j(cid:5)C and remove B(cid:3)
j from R. For policy P to
j within its voting period ((cid:5) blocks) is at least ρ.
j it must be the case that the ratio of votes for
• If P(C, B(cid:3)
accept B(cid:3)
• If P(C, B(cid:3)
B(cid:3)
• If P(C, B(cid:3)
j within its voting period ((cid:5) blocks) is less than ρ.
j ) = voting, then do nothing.
Creating a new block. Collects all the transaction data x from the network for the r-th round and tries to build a new block
Br by performing the following steps:
j ) = voting then set x ← x||H(B(cid:3)
j ).
• (Voting for candidate blocks). For all candidate blocks B(cid:3)
P(C, B(cid:3)
• Create a new block B := (cid:4)s, x, ctr , G(s, x)(cid:5), such that s = H(ctr(cid:3), G(s(cid:3), x(cid:3)), y(cid:3)), for (cid:4)s(cid:3), x(cid:3), ctr(cid:3), y(cid:3)(cid:5) ← Head(C).
• Extend its local chain C ← C||B and iff Γ(cid:3).validateChain(C) = 1 then broadcast C to the network.
j ∈ R that the node is willing to endorse, if
Propose an edit. The node willing to propose an edit for the block Bj, for j ∈ [n], creates a candidate block
j ← Γ(cid:3).proposeEdit(C, j, x (cid:3)) using the new data x (cid:3), and broadcasts it to the network by calling Γ(cid:3).broadcast(B(cid:3)
B(cid:3)
j ).
Figure 2: Accountable permissionless editable blockchain protocol Γ(cid:3)
P
Algorithm 1: validateChain (implements Γ(cid:2).validateChain)
input : Chain C = (B1,··· , Bn) of length n.
output: {0, 1}
Algorithm 2: validateBlock (implements Γ(cid:2).validateBlock)
input : Block B := (cid:4)s, x, ctr , y(cid:5).
output: {0, 1}
1: j := n;
2: if j = 1 then return Γ(cid:3).validateBlock(B1);
3: while j ≥ 2 do
4:
5:
6:
7:
Bj := (cid:4)sj, xj, ctr j, yj(cid:5) ; (cid:7) Bj := Head(C) when j = n
if Γ(cid:3).validateBlock(Bj) = 0 then return 0;
if sj = H(ctr j−1, G(sj−1, xj−1), yj−1) then
j := j − 1;
else if (sj = H(ctr j−1, yj−1, yj−1)) ∧
(Γ(cid:3).validateCand(C, Bj−1) = 1) ∧ (P(C, Bj−1) =
accept) then j := j − 1;
else return 0;
8:
9: return 1;
to some pre-deﬁned validation predicate. It then checks if the
block indeed satisﬁes the constraints of the PoW puzzle. Apart
from this check, the or (∨) condition is to ensure that in case
of dealing with an edited block B, the old state of B still
satisﬁes the PoW constraints.
Proposing an Edit. Any user in the network can propose
for a particular data to be removed or replaced from the
1: Validate data x, if invalid return 0;
2: if H(ctr , G(s, x), y)  μ.
Proof. We note that the only difference in Γ(cid:3)
P in relation to
Γ is that blocks can be edited. An adversary A could edit
an honest block B in the chain C into a malicious block B(cid:3)
(e.g., that contains illegal content), increasing the proportion of
malicious blocks in the chain, and therefore breaking the chain
quality property. We show below that A has only a negligible
probability of violating chain quality of Γ(cid:3).
j for editing an
honest block Bj ∈ C. Since A possesses only μ computational
power, by the chain quality property of Γ we know that
the adversary mines at most μ ratio of blocks in the voting
phase. As the policy stipulates, the ratio of votes has to be
at least ρ for B(cid:3) to be approved, where ρ > μ. Therefore,
B(cid:3) can only be approved by the policy P if honest nodes
vote for it. Observe that the adversary could try to build
an “honest looking” (e.g., without illegal contents) candidate
block (cid:2)B(cid:3) (cid:14)= B(cid:3) such that H((cid:2)B(cid:3)) = H(B(cid:3)), in an attempt
to deceive the honest nodes during the voting phase;
the
honest nodes could endorse the candidate block B(cid:3) during
the voting phase, and the adversary would instead edit the
chain with the malicious block (cid:2)B(cid:3). The adversary has only
a negligible chance of producing such a candidate block B(cid:3)
where H((cid:2)B(cid:3)) = H(B(cid:3)), since this would violate the collision-
resistance property of the hash function H.
Moreover, B(cid:3) is incorporated to the chain only if it is an
Let A propose a malicious candidate block B(cid:3)
honest candidate block. This concludes the proof.
Common Preﬁx. The common preﬁx property informally
says that if we take the chains of two honest nodes at different
time slots, the shortest chain is a preﬁx of the longest chain
(up to the common preﬁx parameter k). We show the formal
deﬁnition next.
(cid:18)(cid:20)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:03 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition 4 (Common Preﬁx [21]). The chains C1,C2 pos-
sessed by two honest parties at the onset of the slots sl 1 < sl 2
are such that C(cid:4)k
1 denotes the chain obtained
by removing the last k blocks from C1, where k ∈ N is the
common preﬁx parameter.
1 (cid:15) C2, where C(cid:4)k
We remark however, that our protocol Γ(cid:3)
P inherently does
not satisfy Deﬁnition 4. To see this, consider the case where
two chains C1 and C2 are held by two honest parties P1 and
P2 at slots sl 1 and sl 2 respectively, such that sl 1 < sl 2.
In slot r starts the voting phase (that lasts (cid:5) blocks) for a
candidate block B(cid:3)
j proposing to edit block Bj, such that
j + k ≤ r < sl 1 ≤ (cid:5) + k < sl 2. Note that at round sl 1
the voting phase is still on, therefore P(C1, B(cid:3)
j ) = voting.
By round sl 2,
the voting phase is complete and in case
P(C2, B(cid:3)
j in C2.
However, in chain C(cid:4)k
the j-th block is still Bj, since the
1 ⊀ C2,
edit of B(cid:3)
thereby violating Deﬁnition 4.
j ) = accept the block Bj is replaced by B(cid:3)
j is waiting to be conﬁrmed. Therefore, C(cid:4)k
1
The pitfall in Deﬁnition 4 is that it does not account for
edits or modiﬁcations in the chain. We therefore introduce a
new deﬁnition that is suited for an editable blockchain (with
respect to an editing policy). The formal deﬁnition follows.
Deﬁnition 5 (Editable Common preﬁx). The chains C1,C2 of
length l1 and l2, respectively, possessed by two honest parties
at the onset of the slots sl 1 ≤ sl 2 satisfy one of the following:
1) C(cid:4)k
1 (cid:15) C2, or
j ∈ C(cid:4)(l2−l1)+k
2) for each B(cid:3)
1 , it must
j ) = accept, for j ∈ [l1 − k],
be the case that P(C2, B(cid:3)
where C(cid:4)(l2−l1)+k
denotes the chain obtained by pruning the
last (l2 − l1) + k blocks from C2, P denotes the chain policy,
and k ∈ N denotes the common preﬁx parameter.
such that B(cid:3)
j /∈ C(cid:4)k
2
2
Intuitively, the above deﬁnition states that if there exists a
block that violates the common preﬁx as deﬁned in Deﬁni-
tion 4, then it must be the case that this block is an edited
block whose adoption was voted and approved according to
the policy P in chain C2. We show that our protocol Γ(cid:3)
satisﬁes Deﬁnition 5 next.
Theorem 3. Let H be a collision-resistant hash function. If Γ
satisﬁes k-common preﬁx, then Γ(cid:3)
P satisﬁes k-editable common
preﬁx for a (k, (cid:5), ρ)-policy.
Proof. If no edits were performed in a chain C, then the
protocol Γ(cid:3)
P behaves exactly like the immutable protocol Γ,
and henceforth the common preﬁx property follows directly.
However, in case of an edit, consider an adversary A that
j to edit Bj in chain C2, which
proposes a candidate block B(cid:3)
is later edited by an honest party P2 at slot sl 2. Observe that
by the collision resistance property of H, A is not able to
efﬁciently produce another candidate block (cid:2)B(cid:3)
j such
that H((cid:2)B(cid:3)
j ). Therefore, since P2 is honest and
adopted the edit B(cid:3)
j received
enough votes such that P(C2, B(cid:3)
j ) = accept. This concludes
the proof.
j in C2, it must be the case that B(cid:3)
j ) = H(B(cid:3)
(cid:14)= B(cid:3)
j
Tx
in: . . .