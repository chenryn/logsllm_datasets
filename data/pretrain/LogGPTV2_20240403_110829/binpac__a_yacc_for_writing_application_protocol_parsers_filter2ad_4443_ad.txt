default -> unknown: bytestring &restofdata;
rr_class: uint16) = case rr_type of {
-> type_a:
-> type_ns: DNS_name(msg);
uint32 &check(rr_class == CLASS_IN);
38 };
46
47
48
49
50
52
53
54
55
56
57
58
59
60
64
65
66
67
68
69
70
71
72
73
74
75
76 };
39 # A DNS name is a sequence of DNS labels
40 type DNS_name(msg: DNS_message) = record {
42 };
labels:
41
DNS_label(msg)[] &until($element.last);
43
44 # A label contains a byte string or a name pointer
45 type DNS_label(msg: DNS_message) = record {
length:
data:
0 ->
3 ->
uint8;
case label_type of {
label: bytestring &length = length;
ptr_lo: uint8;
# the lower 8-bit of offset
};
51 } &let {
label_type: uint8
last: bool
= length >> 6;
= (length == 0) || (label_type == 3);
# If the label is a pointer ...
ptr_offset: uint16 = (length & 0x3f)  of 
function msgdata(msgdata: const_bytestring,
%{
// Omitted: DNS pointer loop detection
if ( offset = msgdata.length() )
offset: int): const_bytestring
return const_bytestring(0, 0);
return const_bytestring(msgdata.begin() + offset,
%}
msgdata.end());
Figure 3: An (abridged) DNS parser in binpac.
&exportsourcedata to the DNS message to make the input
visible as variable sourcedata).
The derivative members are evaluated once during parsing and
can be accessed in the same way as record or case ﬁelds in the
generated C++ class. The order that derivative ﬁelds, along with
non-derivative ones, are evaluated depends on only the data depen-
dency among ﬁelds; the order is undeﬁned for ﬁelds that do not
depend on each other. (Note, this lack of ordering is deliberate,
as it keeps the door open for future parallelization.) On the other
hand, binpac provides attributes for users to introduce artiﬁcial
dependency edges between ﬁelds, in case the user wants to ensure
a certain ordering among evaluation of ﬁelds.
Derivative ﬁelds are also used to insert custom computation
(such as event generation for the Bro NIDS) into the parsing pro-
cess, as discussed in Section 4.3.
4.2 State Management
Up to this point we have explored various issues in describing
the syntax of a byte segment. To model the state of a continuous
communication, binpac introduces notions of ﬂow and connec-
tion. A ﬂow represents a sequence of messages and state to main-
tain between messages. A connection represents a pair of ﬂows
and state between ﬂows. Note that here connections are not only
TCP or UDP connections, but any two-way communication ses-
sions. For example, a DCE/RPC connection may correspond to a
TCP connection on port 135, a UDP session to the Windows mes-
senger port, or a CIFS “named pipe” (a DCE/RPC tunnel through
the CIFS protocol).
As shown in the HTTP example (line 38), the declaration of a
connection consists of deﬁnitions of ﬂow types for each ﬂow. The
“upﬂow” refers to the ﬂow from the connection originator to the
responder, and the “downﬂow” refers to the ﬂow in the opposite
direction. Like types, connections and ﬂows can be parameterized,
too.
Without loss of generality, we assume a ﬂow consists of a se-
quence of messages of the same binpac type. (If a ﬂow consists
of messages of different types, we can encapsulate the types with a
case type.) Thus one message type is speciﬁed for each ﬂow, which
we term ﬂow unit type.
When specifying the ﬂow unit type, we also specify how input
data arrive in a ﬂow: it may arrive as datagrams, each containing
exactly one message, or in a byte stream, where the boundary of
data delivery does not necessarily align with message boundaries,
though the bytes are guaranteed to arrive in order.3 The two in-
put delivery modes are speciﬁed with keywords datagram and
flowunit, respectively, as we see in the examples of DNS and
HTTP parsers (lines 64 and 41 respectively).
4.2.1 Per-Connection/Flow State
While type parameterization allows types to share information
within a message, in some scenarios we have to keep state at per-
connection or per-ﬂow level. For instance, a DCE/RPC parser
needs to remember onto which interface a connection is bound, so
that requests and replies can be parsed accordingly. As Figure 5
shows, a SUN/RPC parser keeps a per-connection table that maps
session ID’s to call parameters, and when a reply arrives, the parser
can ﬁnd the corresponding call parameters by looking up the reply
message’s session ID in the table. Connection/ﬂow state is speci-
ﬁed with embedded C++ code and corresponding access functions
deﬁned in binpac types.
Further abstraction of state is an important aspect of future work,
as the abstraction can then expose data dependencies in the protocol
3Because the ﬂows represent abstract ﬂows, the delivery mode of a ﬂow
does not always indicate whether the underlying transport protocol is TCP
or UDP. For example, while the DNS abstract ﬂow takes input as datagrams,
it is used for both TCP and UDP, whereas in the case of TCP, an additional
thin layer between the DNS and TCP protocol delimits one DNS message
from another in the TCP byte stream.
connection RPC_Conn(bro_conn: BroConn) {
%member{
typedef std::map RPC_CallTable;
RPC_CallTable call_table;
%}
# Returns the call corresponding to the xid. Returns
# NULL if not found.
function FindCall(xid: uint32): RPC_Call
%{
RPC_CallTable::const_iterator it = call_table.find(xid);
if ( it == call_table.end() )
return 0;
function NewCall(xid: uint32, call: RPC_Call): void
return it->second;
%}
%{
if ( call_table.find(xid) == call_table.end() )
%}
#...
call_table[xid] = call;
};
type RPC_Call(msg: RPC_Message) = record {
# ...
} &let {
# Register the RPC call by the xid
newcall: void = $context.connection.NewCall(msg.xid, this);
};
type RPC_Reply(msg: RPC_Message) = record {
# ...
} &let {
# Find the corresponding RPC call.
call: RPC_Call = $context.connection.FindCall(msg.xid);
};
Figure 5: SUN/RPC per-connection state.
analysis and enable better parallelization or hardware realization.
The main challenge in abstracting state lies in understanding which
data structures, such as hash tables, FIFO queues, and stacks, are
commonly used in protocol parsers and providing ways to abstract
them.
4.2.2 The $context Parameter
For types to access per-connection/ﬂow state, the references to
the corresponding connection and ﬂow have to be given to the type
parse functions through function parameters. As the connection
and ﬂow might be accessed by multiple types, we can propagate
them as implicit parameters to relevant types, just as the byte order
ﬂag does. More generally, state can also be maintained at gran-
ularity other than connection or ﬂow, e.g., at a multi-connection
“session” level. We aggregate all such parameters as members of
an implicit context parameter. The members of the context param-
eter are declared with analyzer  withcontext at the
beginning of a binpac speciﬁcation (Figure 2, line 1). The mem-
ber values are instantiated in the withcontext clause in the ﬂow
unit deﬁnition (Figure 2, line 42).
4.3 Integrating Custom Computation
In a yacc grammar one can embed user-deﬁned computation,
such as syntax tree generation, in the form of C/C++ code seg-
ments, which the parser executes when reducing rules. binpac
takes a slightly different approach in integrating custom com-
putation with parsing.
The computation (e.g., generating an
event in the Bro NIDS) is embedded through adding deriva-
tive ﬁelds (discussed in Section 4.1.4). As the deﬁnition of type
HTTP Header in Figure 2 shows (lines 94-96), a Bro event
for a HTTP header is generated by calling an external function
bro event http header in the deﬁnition of derivative ﬁeld
bro gen hdr. The function is invoked after parsing the data
ﬁelds it depends on, name and value of the header. Note that
these sorts of links are the only tie between the binpac speciﬁca-
tion for HTTP and the Bro system.
refine typeattr HTTP_Header += &let
process_header: bool =
$context.flow.bro_event_http_header(name, value);
;
Figure 6: Separating Bro event generation from protocol syn-
tax speciﬁcation with refine.
4.4 Separation of Concerns
“Separation of concerns” is a term in software engineering that
describes “the process of breaking a program into distinct features
that overlap in functionality as little as possible.” [45] In the case
of binpac, one would want to separate the deﬁnition of a proto-
col’s syntax from speciﬁcations of additional computation (such as
Bro event generation) on parsing results, because such separation
allows us to reuse the protocol deﬁnitions for multiple purposes and
across different systems. For the same reason, one may also want
to separate speciﬁcation of sub-protocols (e.g. RPC Portmapper
and NFS) from the underlying protocol (e.g., RPC) and from each
other.
binpac supports a simple but powerful syntactic primitive to
allow separate expression of different concerns—parsing vs. anal-
ysis, a lower-level protocol vs. higher-level ones—and yet make
the separated descriptions semantically equivalent to a uniﬁed one.
The language includes a “reﬁne typeattr” primitive for appending
new type attributes, usually additional derivative ﬁelds, to existing
types. For example, the generation of http header event in the
HTTP example (lines 94-96) can be separated from the protocol
syntax speciﬁcation, as Figure 6 shows.
Such separation allows us to place related-but-distinct deﬁnitions
in different binpac source ﬁles. A similar refine casetype
primitive allows insertion of new case ﬁelds to a case type deﬁni-
tion (e.g., NFS Params as a new case for RPC Params), facilitating
syntactical separation between closely related protocols.
Note that the support for separation of concerns in binpac is
not complete in two ways. First, one cannot easily change the set
of parameters of a type (or function), which can limit extension of
protocol analyzers in some cases, an area for future exploration.
Second, binpac does not enforce separation of concerns, or make
it easier to describe things separately than describing them together.
Thus, we rely on binpac users practicing a discipline of separat-
ing their concerns for better code maintenance and reuse.
5. PARSER GENERATION
Two main considerations in parser generation are (1) handling
incremental input on many ﬂows at the same and (2) detecting and
recovering from errors. Below we examine them in turn.
5.1 Incremental Input
One approach to handle incremental input is to make the pars-
ing process itself fully incremental, i.e., to make the parse func-
tion ready to stop anywhere, buffer unprocessed bytes at elemen-
tary type level, return, and resume on next invocation. The parsing
state of a composite type, such as a record, can be kept by an
indexing variable pointing to the member to be parsed next and a
buffer storing unprocessed raw data.
However, incremental parsing at elementary type granularity
is expensive, because boundary checks of adjacent ﬁelds can no
longer be combined. It is also unnecessary for all the protocols we
have encountered. As protocols are designed for easy processing,
they often have a natural unit for buffering. Binary protocols (such
as DCE/RPC) often have a “length” header ﬁeld that denotes the
total message length. ASCII protocols are usually either line-based
type DCE_RPC_Header = record
...
frag_length: uint16;
...
;
# length of the PDU
type DCE_RPC_PDU = record
header: DCE_RPC_Header; # A 16-byte-long header
...
&length = header.frag_length;
Figure 7: Specifying buffering length of a type.
(such as SMTP) or alternate between length-denoted and line-based
units (such as HTTP). Given such parsing boundaries, we still re-
quire support for incremental parsing, but can carry it out at larger
granularity and with reduced overhead.
the
Thus, binpac provides
attributes &length and
&oneline to specify buffering units.4
&oneline triggers
line-based buffering while &length gives a message’s length in
bytes. &length usually points to a corresponding length ﬁeld
in the header (Figure 7) but can generally take any expression
to compute the length. The binpac compiler performs data
dependency analysis to ﬁnd out the initial number of bytes to
buffer before the length expression can be computed (in the case of
a DCE/RPC message, the ﬁrst 16 bytes). The generated code will
buffer the message in two steps, ﬁrst the initial bytes for computing
the message length, then buffer up to the full length before parsing
the remaining ﬁelds.
5.2 Error Detection and Recovery
Protocol parsers have to robustly detect and recover from various
kinds of errors. Errors can be caused by irregularity in real-world
trafﬁc data, including small syntax deviations from the standard,
incorrect length ﬁelds, corrupted contents, and even payloads of a
completely different protocol running on the standard port of the
parsed protocol. Errors can also result from incomplete input, such
as due to packet drops when capturing network trafﬁc.
In these
cases, the parser might not know in the speciﬁc state of the dialog,
e.g., whether what it now sees on HTTP ﬂow is inside a data trans-
fer or not. Errors may also arise through incorrect binpac speciﬁ-
cations, e.g., through missing cases or trying to access an unparsed
case ﬁeld, or due to adversarial manipulation, as discussed earlier.
Parsers generated by the binpac compiler detect errors of var-
ious aspects, as we discuss below. When an error is detected, the
code throws a C++ run-time exception, which can then be caught
for recovery.
5.2.1 Error Detection
Efﬁcient Boundary Checking. Conceptually, boundary checking
(whether scanning stays within the input buffer) only need take
place before evaluating every elementary integer or character type
ﬁeld, because all other types are composed of elementary types.
While it would be easy to generate the boundary checking code this
way, the generated code would be quite inefﬁcient, too. Instead,
the binpac compiler tries to minimize the number of boundary
checks. The basic idea is: before generating boundary checking
code for a record ﬁeld, check recursively whether we can generate
the checking for the next ﬁeld. If so, we can combine them into one
check. In this way, the compiler can determine the furthest ﬁeld for
which the boundary checking can be performed at a given point of
parsing.
4binpac’s incremental analysis depends on the existence of these at-
tributes. Viewing the record deﬁnitions as a tree of types, each path from
the root type to a leaf must contain one of them at a non-leaf node.