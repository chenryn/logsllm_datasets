ber of servers that participate in the protcol. To overcome this
challenge, we use BFT-CoSi from ByzCoin [39], a Byzantine
consensus protocol that uses scalable collective signing, to
agree on successfully delivering the commitment (cid:3)V . Due to
the BFT guarantees RandHerd crosses the point-of-no return
when consensus is reached. Even if the dishonest leader, tries
to bias output by failing the protocol, the new (eventually
honest) leader will be able to recover (cid:3)r, allowing all honest
servers to successfully complete the protocol.
The downside of this BFT-commitment approach is that
once consensus is reached and the point-of-no return is
crossed, then in the rare event that an adversary controls two-
thirds of any group, the attacker can halt the protocol forever
by preventing honest nodes from recovering the committed
secret. This risk may necessitate a more conservative choice
of group size, such that the chance of an adversary ever con-
trolling any group is not merely unlikely but truly negligible.
E. Extensions
1) Randomizing Temporary-Leader Election: The current
set-up phase of RandHerd uses a simple leader election
mechanism. Because the ticket generation uses only values
known to all nodes, it is efﬁcient as it does not require any
communication between the nodes but makes the outcome of
the election predicable as soon as the cothority conﬁguration
ﬁle C is available. We use this mechanism to elect a temporary
RandHerd leader whose only responsibility is to run and
provide the output of RandHound to other servers. Rand-
Hound’s unbiasibility property prevents the dishonest leader
from biasing its output. However, an adversary can force f
restarts of RandHound and can therefore delay the setup by
compromising the ﬁrst (or next) f successive leaders in a well-
known schedule.
To address this issue, we can use a lottery mechanism that
depends on veriﬁable random functions (VRFs) [43], which
ensures that each participant obtains an unpredictable “fair-
share” chance of getting to be the leader in each round. Each
node produces its lottery ticket as ti = H(C (cid:5) j)xi, where
C is the group conﬁguration, j is a round number, and xi
is node i’s secret key, along with a NIZK consistency proof
showing that ti is well-formed. Since an adversary has at least
a constant and unpredictable chance of losing the leadership
to some honest node in each lottery, this reﬁnement ensures
with high probability that an adversary can induce at most
O(log n) successive view changes before losing leadership.
2) BLS Signatures: Through the use of CoSi and TSS,
RandHerd utilizes collective Schnorr signatures in a threshold
setting. Other alternatives are possible. Speciﬁcally, Boneh-
Lynn-Shacham (BLS) [12] signatures require pairing-based
curves, but offer even shorter signatures (a single elliptic curve
point) and a simpler signing protocol. In the simpliﬁed design
using BLS signatures, there is no need to form a fresh Schnorr
commitment collectively, and the process does not need to
be coordinated by a group leader. Instead, a member of each
subgroup, whenever it has decided that the next round has
arrived, produces and releases its share for a BLS signature
of the message for the appropriate time (based on a hash
of view information and the wall-clock time or sequence
number). Each member of a given subgroup waits until a
threshold number of BLS signature shares are available for that
subgroup, and then forms the BLS signature for this subgroup.
The ﬁrst member to do so can then simply announce or gossip
it with members of other subgroups, combining subgroup
signatures until a global BLS signature is available (based on
a simple combination of the signatures of all subgroups). This
activity can be unstructured and leaderless, since no “arbitrary
choices” need to be made per-transaction: the output of each
time-step is completely deterministic but cryptographically
random and unpredictable before the designated time.
V. EVALUATION
This section experimentally evaluates of our prototype im-
plementations of RandHound and RandHerd. The primary
questions we wish to evaluate are whether architectures of
the two protocols are practical and scalable to large numbers,
e.g., hundreds or thousands of servers, in realistic scenarios.
Important secondary questions are what the important costs
are, such as randomness generation latencies and computation
costs. We start with some details on the implementation itself,
followed by our experimental results, and ﬁnally describe our
analysis of the failure probability for both protocols.
A. Implementation
We implemented PVSS, TSS, RandHound, and RandHerd in
Go [33] and made these implementations available on GitHub
as part of the EPFL DEDIS lab’s Cothority framework.2 We
reused existing cothority framework code for CoSi and net-
work communication, and built on the DEDIS advanced crypto
library3 for cryptographic operations such as Shamir secret
sharing, zero-knowledge proofs, and optimized arithmetic on
the popular Curve25519 elliptic curve [5]. As a rough indicator
of implementation complexity, Table I shows approximate
lines of code (LoC) of the new modules. Line counts were
measured with GoLoC.4
TABLE I
LINES OF CODE PER MODULE
PVSS
300
TSS
700
RandHound
RandHerd
1300
1000
B. Performance Measurements
1) Experimental Setup: We ran all our experiments on
DeterLab5 using 32 physical machines, each equipped with
an Intel Xeon E5-2650 v4 (24 cores at 2.2 GHz), 64 GBytes
2https://github.com/dedis/cothority
3https://github.com/dedis/crypto
4https://github.com/gengo/goloc
5http://isi.deterlab.net/
455
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
of RAM, and a 10 Gbps network link. To simulate a globally-
distributed deployment realistically, we restricted the band-
width of all intern-node connections to 100 Mbps and imposed
200 ms round-trip latencies on all communication links.
To scale our experiments up to 1024 participants given
limited physical resources, we oversubscribed the DeterLab
servers by up to a factor of 32, arranging the nodes such that
most messages had to go through the network. To test the
inﬂuence of oversubscription on our experiments, we reran
the same simulations with 16 servers only. This resulted
in an overhead increase of about 20%, indicating that our
experiments are already CPU-bound and not network-bound
at this scale. We therefore consider these simulation results to
be pessimistic: real-world deployments on servers that are not
oversubscribed in this way may yield better performance.
2) RandHound: Fig. 4 shows the CPU-usage costs of a
complete RandHound run that generates a random value from
N servers. We measured the total costs across all servers,
plus the costs of the client that coordinates RandHound and
generates the Transcript. With 1024 nodes divided into groups
of 32 nodes, for example, the complete RandHound run to
generate randomness requires less than 10 CPU minutes total,
correspond to a cost of about $0.02 on Amazon EC2. This cost
breaks down to about 0.3 CPU seconds per server, representing
negligible per-transaction costs to the servers. The client that
initiates RandHound spends about 3 CPU minutes, costing
less than $0.01 on Amazon EC2. These results suggest that
RandHound is quite economical on today’s hardware.
128
256
512
768
1024
Number of Nodes
Randomness Generation Cost to Client
Randomness Generation Cost to Servers
)
c
e
s
(
e
g
a
s
U
U
P
C
103
102
101
100
6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
2
3
4
2
6
0
1
4
Group Size
6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
128
256
512
768
1024
Number of Nodes
Transcript Verification (External)
Randomness Generation (RandHound)
103
102
101
)
c
e
s
(
e
m
T
i
k
c
o
C
l
l
l
a
W
100
6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
2
3
4
2
6
0
1
4
Group Size
6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
Fig. 5. Total wall clock time of a RandHound protocol run
3) RandHerd: The RandHerd protocol requires a setup
phase, which uses RandHound to form random groups and
CoSi to sign the RandHerd collective key. The measured CPU
usage of RandHerd setup is depicted in Fig. 6. For 1024 nodes
and a group size of 32, RandHerd setup requires roughly 40
CPU-hours total (2.3 CPU-minutes per node), corresponding
to a cost of $4.00 total on Amazon EC2 (0.3 cents per
participant). The associated wall clock time we measured, not
depicted in the graphs, amounts to about 10 minutes.
)
c
e
s
(
e
g
a
s
U
U
P
C
106
105
104
103
102
101
100
128
256
512
768
1024
Number of Nodes
RandHound
TSS Key Setup
CoSi
6
1
4
2
2
3
0
4
6
1
4
2
2
3
0
4
2
3
4
2
6
0
1
4
Group Size