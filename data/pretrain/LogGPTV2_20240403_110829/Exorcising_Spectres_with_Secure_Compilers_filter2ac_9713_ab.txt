Computation steps in L and T are labelled with labels λ, which
can be the empty label ϵ, an action α? or α! recording the control-
flow between attacker and code (as required for secure compilation
proofs [2, 4, 49, 51]), or a µarch. action δ capturing what a microar-
chitectural attacker can observe.
µarch. Acts. δ ::= read(n) | write(n) | read(n (cid:55)→ v)
| write(n (cid:55)→ v) | if(v) | rlb
Labels λ ::= ϵ | α? | α! | δ
Actions α ::= call f v | ret v
Action call f v? represents a call to a function f in the com-
ponent with value v. Dually, call f v! represents a call(back) to
the attacker with value v. Action ret! represents a return to the
attacker and ret? a return(back) to the component.
The read(n) and write(n) actions denote respectively read and
write accesses to the private heap location n. Dually, the read(n (cid:55)→ v)
and write(n (cid:55)→ v) actions denote respectively read and write ac-
cesses to the public heap location n where v is the value read
from/written to memory. In these actions, locations n model leaks
through the data cache whereas values v, which only appear in
operations on the public heap, model that attackers have access to
the public heap. In contrast, the if(v) action denotes the outcome
of branch instructions and the rlb action indicates the roll-back
of speculatively-executed instructions. These actions implicitly ex-
pose which instruction we are currently executing, and thus the
instruction cache content.
Traces λ are sequences of labels. The semantics only track µarch.
actions executed inside the component P, whereas those executed in
the attacker-controlled context A are ignored (Rule E-L-single later
on). The reason is that µarch. actions produced by A can be safely
ignored since A cannot access the private heap (this is analogous
to other robust safety works [23, 25, 40, 60]).
2.4 Operational Semantics for L and T
Both languages are given a labelled operational semantics that
describes how statements execute. This semantics is defined in
terms of program states C, H, B ▷ (s)f
that consist of a codebase C,
a heap H, a stack of local variables B, a statement s, and a stack of
function names f . C is used to look up function bodies, whereas
function names f , which we often omit for simplicity, are used to
infer if the code that is executing comes from the attacker or from
the component, and this determines the produced labels.
Prog. States Ω ::= C, H, B ▷ (s)f
Bindings B ::= ∅ | B; x (cid:55)→ v
Both L and T have a big-step operational semantics for ex-
pressions and a small-step, structural operational semantics for
statements that generates labels. The former follows judgements
B ▷ e ↓ v meaning: “according to variables B, expression e reduces
λ−−→ Ω′ meaning:
to value v.” The latter follows judgements Ω
“state Ω reduces in one step to Ω′ emitting label λ.”
We remark that values are computed as expected (though we
use 0 for true in ifz statements; see Rule E-if-true) and expressions
access only local variables in B (reading from the heap is treated as
a statement); therefore, we omit the expression semantics. Similarly,
many of the rules for the statement semantics are standard and thus
omitted; the most illustrative ones are given below. We use |n| for
the absolute value of n and H (n) to look up the binding for n in H.
(E-if-true)
B ▷ e ↓ 0
C, H, B · B ▷ ifz e then s else s′
(if(0))
−−−−−−−→ C, H, B · B ▷ s
B ▷ e ↓ n
(E-read-prv)
H (−|n|) = v
C, H, B · B ▷ let x = rdpr e in s
read(−|n|)
−−−−−−−−−−→
C, H, B · B ∪ x (cid:55)→ v ▷ s
B ▷ e ↓ n
B ▷ e′ ↓ v
C, H, B · B ▷ e :=pr e′
(E-write-prv)
H = H1;−|n| (cid:55)→ v′; H2
H′ = H1;−|n| (cid:55)→ v; H2
write(−|n|)
−−−−−−−−−−−→ C, H′, B · B ▷ skip
The rules of conditionals, read, and write emit the related µarch. ac-
tions (from Section 2.3). Specifically, conditionals produce obser-
vations recording the outcome of the condition (Rule E-if-true),
whereas memory operations produce observations recording the
accessed memory address (Rule E-read-prv and Rule E-write-prv).
2.5 Non-speculative Semantics for L
We now define the non-speculative semantics of L, which describes
how (whole) programs behave when executed on a processor with-
out speculative execution. A component P and an attacker A can
be linked to obtain a whole program W ≡ A [P] that contains the
functions and heaps of A and P. Only whole programs can run, and
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea447a program is whole only if it defines all functions that are called
and if the attacker defines all the functions in the interfaces of P.
For this, we define the big-step semantics =⇒ of L, which con-
catenates single steps (defined by →) into multiple ones and single
==⇒ Ω′ is read: “state Ω emits
λ
labels into traces. The judgement Ω
trace λ and becomes Ω′”. The most interesting rule is below. As
mentioned in Section 2.3, the trace does not contain µarch. ac-
tions performed by the attacker (see the ‘then’ branch, recall that
functions in I are defined by the attacker).
(E-L-single)
Ω ≡ F, I, H, B ▷ (s)f·f
α−−−→ Ω′
Ω′ ≡ F, I, H′, B′ ▷ (s′)f′·f′
if f == f′ and f ∈ I then λ = ϵ else λ = α
Ω
==⇒ Ω′
λ
Ω
Finally, the behaviour Beh(W) of a whole program W is the trace
λ generated from the =⇒ semantics starting from the initial state of
W (indicated as Ω0 (W)) until termination. Intuitively, a program’s
initial state is the main function, which is defined by the attacker.
Example 2.1 ( L trace for Listing 1). Consider size=4. Trace tns
indicates a valid execution of the code in L (without speculation).
tns = call get 0? · if(0) · read(nA) · read(nB + v0
We indicate the addresses of arrays A and B in the L heap with
nA and nB respectively and the value stored at A[i] with vi
A
A) · ret!
. (cid:26)
2.6 Speculative Semantics for T
Our semantics for T models the effects of speculatively-executed
instructions. This semantics is inspired by the “always mispredict”
semantics of Guarnieri et al. [27], which captures the worst-case
scenario (from an information theoretic perspective) independently
of the branch prediction outcomes. Whenever the semantics ex-
ecutes a branch instruction, it first mis-speculates by executing
the wrong branch for a fixed number w of steps (called speculation
window). After speculating for w steps, the speculative execution
is terminated, the changes to the program state are rolled back,
and the semantics restarts by executing the correct branch. The
µarch. effects of speculatively-executed instructions are recorded
on the trace as actions.
Speculative program states (Σ) are defined as stacks of specula-
tion instances (Φ = (Ω, w)), each one recording the program state Ω
and the remaining speculation window w. The speculation window
is a natural number n or ⊥ when no speculation is happening; its
maximum length is a global constant ω that depends on physical
characteristics of the CPU like the size of the reorder buffer.
Speculative States Σ ::= Φ Speculation Instance Φ ::= (Ω, w)
The execution of program W starts in state (Ω0 (W) ,⊥), i.e., in the
same initial state that L starts in.
In the small-step operational semantics Φ λ Φ′, reductions hap-
pen at the top of the stack:
(E-T-speculate-if)
Ω ≡ C, H, B · B ▷ (s; s′)f·f
C ≡ F; I
α−−−→ Ω′
Ω
s ≡ ifz e then s′′ else s′′′
f (cid:60) I
j = min (ω, n)
if B ▷ e ↓ 0 then Ω′′ ≡ C, H, B · B ▷ s′′′; s′
else Ω′′ ≡ C, H, B · B ▷ s′′; s′
Φ · (Ω, n + 1) α Φ · (Ω′, n) · (Ω′′, j)
λ−−−→ Ω′
Ω
(E-T-speculate-action)
Ω ≡ C, H, B ▷ (s; s′)f·f
(s (cid:46) ifz· · · and s (cid:46) lfence) or (C ≡ F; I and f ∈ I)
Φ · (Ω, n + 1) λ Φ · (Ω′, n)
(E-T-speculate-rollback)
n = 0 or Ω is stuck
Φ · (Ω, n) rlb Φ
(E-T-speculate-lfence)
Ω ≡ C, H, B ▷ s; s′
ϵ−−→ Ω′
Ω
s ≡ lfence
Φ · (Ω, n + 1) ϵ Φ · (Ω′, 0)
Executing a statement updates the program state on top of the
state and reduces the speculation window by 1 (Rule E-T-speculate-
action). Mis-speculation pushes the mis-speculating state on top
of the stack (Rule E-T-speculate-if). Note that speculation does
not happen in attacker code (condition f (cid:60) I, recall that f is the
function executing now and I are all attacker-defined functions).
This is without loss of generality since (1) attackers cannot directly
access the private heap, and (2) our security definitions (Section 3)
will consider any possible attacker, so the speculative behavior of
an attacker (i.e., the speculative execution of the ‘wrong branch’)
will be captured by another one who has the same branches but
inverted (e.g., the ‘then’ code of one attacker is the ‘else’ code of
another). When the speculation window is exhausted (or if the
speculation reaches a stuck state), speculation ends and the top of
the stack is popped (Rule E-T-speculate-rollback). The role of the
lfence instruction is setting to zero the speculation window, so that
rollbacks are triggered (Rule E-T-speculate-lfence).
As before, the behaviour Beh(W) of a whole program W is the
trace λ generated, according to the =⇒ semantics, starting from
the initial state of W until termination.
A) · rlb · ret!
Example 2.2 ( T Trace for Listing 1). Consider the same setting
as Example 2.1. Trace tsp is a valid execution of the code in T, and
therefore with speculation. As before, we indicate the addresses
of arrays A and B in the source and target heaps with nA and nB
respectively and the value stored at A[i] with vi
A
.
tsp = call get 8? · if(1) · read(nA + 8)·read(nB + v8
Differently from tns in Example 2.1, trace tsp contains specula-
tively executed instructions whose side effects are represented by
the actions read(nA + 8) and read(nB + v8
A).
2.7 Weak Languages L- and T-
To conclude, we now introduce the weak languages L- and T-, which
we use to study security in the weak SNI model. Following [28],
these languages differ from L and T in a single aspect, that is, in
the actions produced by memory reads. Specifically, in L- and T-,
non-speculatively reading from the private heap produces an action
read(n (cid:55)→ v) that contains the read value v as well as the accessed
memory address n. As we show next, this difference allows us to
(cid:26)
Session 2B: Formal Analysis and Verification CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea448precisely characterize only the leaks of transiently loaded data,
which are exactly those leaks exploited in speculative disclosure
gadgets like Listing 1, rather than all speculative leak.
3 SECURITY DEFINITIONS FOR SECURE
SPECULATION
We now present semantic security definitions against speculative
leaks. We start by presenting (robust) speculative non-interference
(RSNI, Section 3.1). Next, we introduce (robust) speculative safety
(RSS, Section 3.2). These definitions can be applied to programs in
the four languages L, T, L-, and T-. Therefore, we write RSNI(L) and
RSS(L) to indicate which language L the definitions are referring to.
Since these languages have the same syntax but different semantics,
we also study the relationships between RSNI and RSS for weak
and strong languages. We depict these results below (only for T
and T- since all security definitions trivially hold for the source
non-speculative languages L and L-) and discuss them further down.
most secure
least secure
least precise
RSS(T)
Theorem 3.10
most precise
RSNI(T)
Theorem 3.12
Theorem 3.5
RSS(T-)
Theorem 3.11
RSNI(T-)
3.1 Robust Speculative Non-Interference
Speculative non-interference (SNI) is a class of security proper-
ties [27, 28] that is based on comparing the information leaked
by instructions executed speculatively and non-speculatively. SNI
requires that speculatively-executed instructions do not leak more