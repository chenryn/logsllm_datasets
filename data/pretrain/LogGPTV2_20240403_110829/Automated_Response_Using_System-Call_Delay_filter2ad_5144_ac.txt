anomalies, and allowed the attacker to obtain a root
shell; however, this shell was less useful than might be
supposed. Recall that pH delays every process with a
non-zero LFC, and the LFC is only updated if the pro-
gram has a valid normal (test) proﬁle. As it turns out,
bash, the standard shell on most Linux systems, is a
large, complicated program that tends not to reach a sta-
ble proﬁle. Thus, the 64 jiffy (0.64s) delay incurred by
the overﬂowed sshd is passed on to the exec’d bash, and
bash keeps this delay forever! Even if this weren’t the
case, because of the 128 entry locality frame, we’d see
the delay for 125 system calls, giving us at least an 80s
delay. Not a huge amount of time, but possibly enough
to make a cracker think the attack isn’t working.
With execve aborts enabled, the overﬂow attack was
stopped, whether delays were enabled or not. The
attack script does not simply fail, though; since the
overﬂow code keeps retrying the execve call if it fails,
the aborts cause an inﬁnite loop. Each pass through
the loop generates 3 anomalies, due to the failed ex-
ecve; a few times through this tight loop thus causes
the tolerization limit to be exceeded, causing sshd’s
training proﬁle to be reset.
The Linux capability vulnerability allows a non-
privileged program to prevent a privileged one from
dropping its capabilities on systems running recent 2.2
kernels (2.2.14 and 2.2.15 are both vulnerable). An
exploit was published on BUGTRAQ [28] which uses
sendmail to take advantage of this hole. Because this is
a ﬂaw in the kernel, it can succeed even though sendmail
does the right thing and tries to drop its privileges.
A normal proﬁle for sendmail (Debian version 8.9.3-22)
was ﬁrst generated, based on normal usage on a per-
sonal workstation. This normal had 3443734 system
calls with 1061 unique sequences, and produced a pro-
ﬁle with 2412 system call pairs. Relative to this nor-
mal, the exploit was extremely noticeable. The exploit
generates several different sendmail processes, and just
one of them had 47 anomalies! Indeed, the numerous
anomalies caused the tolerization limit to be reached
numerous times. Enabling execve aborts did nothing to
inhibit the attack; this makes sense, since the exploit
doesn’t have sendmail directly run a privileged shell; in-
stead, it creates a setuid-root shell in /tmp. However, a
delay f actor of 4 effectively stopped the attack — de-
lays were produced which lasted for at least two hours.
Time delays of this magnitude would almost certainly
frustrate a normal cracker; a patient one could be ad-
dressed by automatically killing any process that had
been delayed for a long time period, say 30 minutes or
more.
5.2 What is the overhead of running pH?
To determine the performance impact of our kernel mod-
iﬁcations, we ran the HBench-OS 1.0 [11] low-level
benchmark suite on an HP Pavilion 8260 (266 MHz
Pentium II, 160M SDRAM, Maxtor 91020 10G Ultra-
DMA IDE hard disk) running a pre-release version of
Debian/GNU Linux 2.2. Tests were run for ten itera-
tions on a system running in single user mode. In Tables
1 and 2, “Standard” refers to a stock Linux 2.2.14 ker-
nel. “pH” refers to a 2.2.14 kernel with pH extensions,
with monitoring enabled for all processes and with status
messages and automated response turned off. All times
are in microseconds.
Tables 1 and 2 show that our modiﬁcations add signif-
icantly to system call overhead. Table 1 indicates that
pH adds approximately 4.7 µs to the execution time of
simple system calls that normally would take less that
2 µs to execute. Table 2 shows that pH causes process
creation to be almost twice as slow for a dynamically-
linked shell. Although these tables show a signiﬁcant
performance hit, they are not indicative of the impact on
overall system performance.
Table 3 shows how overall performance is affected for
a set of tasks. Here we report the output of time for
three different kinds of operations: kernel builds, find
/ -print > /dev/null (a basic traversal of the
ﬁle system), and Quake 2 frame rates. All of these tests
were run in single-user mode. The most dramatic ef-
fect is seen in the system time of the kernel build, which
almost doubles due to monitoring overhead. This differ-
ence, however, only causes a 4% slowdown in the clock
time. The ﬁnd test shows almost a 10% slowdown, and
this is for a program that is almost entirely bound by the
speed of ﬁlesystem-access system calls.
Interestingly,
the Quake 2 frame rate tests shows virtually no slow-
down. These tests illustrate what we have observed in-
formally by using the system ourselves: If delays are
System Call
getpid
getrusage
gettimeofday
sigaction
write
Standard (µs)
1.1577 (0.00000)
1.9145 (0.00000)
1.6703 (0.00184)
2.5609 (0.00010)
1.4135 (0.00187)
pH (µs)
5.8898 (0.00025)
6.6137 (0.00138)
6.3779 (0.00112)
7.2928 (0.01029)
6.1637 (0.00075)
Table 1: System call latency results. All times are in
microseconds. Standard deviations are listed in paren-
theses.
Operation
null
simple
/bin/sh
Standard (µs)
408.80 (00.618)
2396.24 (11.124)
9385.66 (26.761)
pH (µs)
2497.90 (40.923)
8206.62 (11.795)
18223.96 (26.777)
Table 2: Dynamic process creation latency results. Null
refers to a fork of the current process. Simple is a fork
of the current process plus an exec() of a hello-world
program written in C. /bin/sh refers to the execution of
hello-world through the libc system() interface, which
uses /bin/sh to invoke hello-world. All times are in mi-
croseconds. Standard deviations are listed in parenthe-
ses.
turned off, a user can use the modiﬁed workstation with-
out noticing any differences in system behavior, even if
she decides to run a compute and I/O intensive applica-
tion such as Quake 2.
5.3 pH in Practice
To understand the usability of the prototype, the modi-
ﬁed kernel was installed on the authors’ personal com-
puters, conﬁgured to monitor every process on the sys-
tem. As indicated above, such a conﬁguration has a
minimal performance impact in practice; however, en-
abling delays in this situation can cause certain prob-
lems. Privileged programs, such as login, send-
mail, and cron, have a highly constrained behavior
proﬁle; thus, after a day or two of sampling, these pro-
grams tend to settle into a stable normal, and exhibit
few anomalies. Large non-privileged programs, such as
netscape and emacs, have more complicated behaviors,
and thus tend not to shift into a normal monitoring mode,
and so are never delayed.
Some of the more interesting programs are ones which
perform simple system monitoring, such as asclock (a
NeXTStep-style clock) and wmapm (a battery monitor-
ing program). These programs execute a large number of
Standard
pH
tem call patterns.
Benchmark
kernel build (s)
real
user
sys
ﬁnd / -print (s)
real
user
sys
Quake 2 (fps)
demo1
demo2
702.47 (0.07)
669.35 (0.60)
33.00 (0.61)
727.44 (0.29)
673.67 (0.55)
53.60 (0.70)
5.68 (0.58)
1.61 (0.09)
3.27 (0.09)
6.24 (0.54)
1.59 (0.09)
3.90 (0.17)
22.89 (0.03)
23.30 (0.00)
22.87 (0.05)
23.30 (0.00)
These two classes of problems suggest a weakness in
our current approach. Programs which make large num-
bers of system calls in a short period of time tend to
acquire normal proﬁles, even when a true sampling of
behavior has not yet occurred. A natural solution is to
take time into account during the normal proﬁle deci-
sion process. Such a strategy might require a signiﬁ-
cant amount of computation, and so is probably better
implemented in a userspace control daemon. It would
also allow additional factors to be considered, such as
size of executable, number of invocations, and perhaps
program-speciﬁc heuristics. Such a daemon is planned
for the future.
6 Related Work
Our approach to homeostatic computing is similar in
spirit to Brooks’ approach to mobile robot control, based
on loosely coupled feedback loops, real-time interac-
tions with dynamic environments, and no centralized
representation of the outside world [9, 10]. We believe
Brooks’ subsumption architecture can be applied to the
construction of a computer security system. pH in its
current form is analogous to feedback loops that help a
robot maintain balance; with the addition of a parameter-
adjusting control daemon, we may be able to teach pH
how to “walk.”
Although research IDSs have performed anomaly de-
tection for years [1, 27, 17, 16], most commercial sys-
tems emphasize misuse detection (i.e. pattern matching
for known attacks), requiring frequent updates as new
exploits are developed. Many current commercial net-
work IDSs [3, 12, 22] are capable of automatically re-
sponding to network attacks through increased logging,
ﬁrewall reconﬁguration, termination of connections, and
even automatic blocking of suspicious networks. Com-
bined host and network IDSs such as ISS RealSecure
[22] can also respond to threats by terminating individ-
ual processes. However, because responses that halt at-
tacks can also cause signiﬁcant service reductions, these
responses must be reserved for attacks which can be eas-
ily and reliably identiﬁed through speciﬁc misuse sig-
natures. Although useful for high-security installations,
actions such as session capture and email/pager notiﬁca-
tion are simply a burden to most administrators.
Sekar, Bowen, and Segal
[30] have developed a
speciﬁcation-based approach for intrusion detection and
Table 3: Overall system performance. All units are sec-
onds (s), except for the Quake 2 test, which is in frames
per second (fps). Ten trials were run for each exam-
ple, except 100 trials were run for find. Each test was
run once before beginning the measurements in order to
eliminate initial I/O transients. Standard deviations are
listed in parentheses.
system calls, and most of the time they have repetitious
behavior. However, when a user perturbs the system by
changing desktops or by moving windows, the behaviors
of these programs can change. In the current prototype,
these programs tend to be the ﬁrst to obtain normals,
and the ﬁrst to be slowed down. Over a few days they
tend to settle down and operate normally; this transition,
however, can require a number of user-supplied toleriza-
tion events. This suggests that the heuristics described
in Section 3 may need to be reﬁned. However, by tem-
porarily setting anomaly limit to a low value (such as
5), the number of reported anomalies can be kept to a
minimum.
As monitoring programs are generally not critical appli-
cations, problems involving them can be seen as minor
nuisances. A more signiﬁcant set of issues arises with
the behavior of one large, privileged program:
the X
server. The X server is responsible for initializing and
controlling access to the video display, on behalf of X
clients such as xterm and netscape. X servers are sim-
ilar to monitoring programs, in that they make a large
number of mostly-repetitive system calls, and so tend to
acquire a normal proﬁle quickly. User actions can also
perturb the X server’s behavior, causing it to be delayed.
In this case, the delays can have dramatic effects, such as
causing a user’s entire session to be frozen or leaving the
video hardware in a confused state when they occur dur-
ing server initialization or shutdown. Fortunately, most
of these problems can be avoided by initially starting up
and shutting down the X server a few times, allowing
pH to learn the critical initialization and shutdown sys-
automated response at the system-call level. They have
created a language called ASL for specifying program
behavior and responses to abnormal behavior, and they
have created Linux kernel extensions which allow their
speciﬁcations to be enforced on-line. Their approach
has the advantage of allowing subtle responses to secu-
rity violations, ranging from changing system call argu-
ments to conﬁning a program to an alternative ﬁle sys-
tem. Unfortunately, it also has the disadvantages of be-
ing labor-intensive, in that speciﬁcations must be con-
structed manually for each executable.
Michael Ernst and others at the University of Washing-
ton have developed techniques for dynamically deter-
mining program invariants [15]. pH also dynamically
detects invariants in program behavior, although it does
so at the system-call instead of the data-structure level.
Perhaps Ernst’s techniques could be used to create an on-
line data monitoring tool which would complement the
system-call monitoring of pH.
Delays are used throughout computing to achieve vary-
ing goals. Most laptop CPUs have the ability to run at a
slower speed to minimize heat or maximize battery life;
Transmeta’s Crusoe processor [14] goes a step further
by allowing the speed of the chip to vary continuously
in response to system load, maximizing battery life and
perceived performance. The Ethernet protocol arbitrates
wire access by having transmitting computers exponen-
tially delay their packets when collisions are detected
[36]. And, at the software level, the standard login
program on most UNIX systems delays repeated login
attempts to interfere with password guessing attacks. A
ﬁnal example is the program getty, which notices if
it spawns processes too frequently on a given tty device
and in this event, puts itself to sleep for a few minutes.
The core of pH can be seen as an unusual type of pro-
cess scheduling. In most UNIX systems [4], processes
are scheduled using static priorities (provided by the ad-
ministrator), dynamic priorities (based on recent CPU
and I/O behavior), and the number of processes on the
system. “Fair share” schedulers divide CPU time be-
tween users, not processes [18, 24]. pH’s delay mecha-
nism could be viewed as an implicit mechanism for al-
locating CPU time; however, instead of being fair to all
processes or users, it favors processes which are behav-