to assist the voting process – there is no central entity. McCorry et
al. [24] propose a practical implementation of the Open Vote Net-
work [14] in the form of a smart contract deployed on the Ethereum
blockchain for boardroom voting. (cid:140)eir implementation is self-
tallying and provides, in addition to vote privacy, also transparency.
Voting proceeds in several rounds, where the voters (cid:128)rst broadcast
their voting key, followed by a proof that their vote is binary (a
“yes” or “no” vote). A (cid:128)nal tally round allows anyone to calculate
the total sum of votes, without revealing individual ballots. (cid:140)e
voting mechanism described in this paper is inspired by McCorry
et al.’s proposed solution and implementation. (cid:140)e limitations of
their proposed solution, namely having a binary voting system
and limiting the number of voters to less than 50 participants, are
acceptable for our purposes.
4 METHODOLOGY
In this section, we present the details of our solution towards a
generic and decentralized way to prevent any type of a(cid:138)acks on
already deployed smart contracts. Our idea is to bundle every
Ethereum client with a runtime analysis tool, that interacts with
the EVM and is capable of interpreting so-called a(cid:136)ack pa(cid:136)erns, and
reverting transactions that match these pa(cid:138)erns. A(cid:138)ack pa(cid:138)erns
are described using our domain-speci(cid:128)c language (DSL), which
is tailored to the execution model of the EVM and which allows
to easily describe malicious control and data (cid:131)ows. (cid:140)e fact that
we shi(cid:137) the capability of detecting a(cid:138)acks from the client-side
implementation to the DSL, gives us the advantage of being able to
quickly propose mitigations against new vulnerabilities, without
having to modify the Ethereum client. Existing approaches, such
as Sereum for example, require the client-side implementation to
be modi(cid:128)ed whenever a new vulnerability is found.
4.1 Generic Attack Detection
A(cid:138)acks are detected in our system through the use of pa(cid:138)erns,
which are described using our DSL. (cid:140)e DSL allows for the de(cid:128)ni-
tion of malicious events that occur during the execution of EVM
instructions. (cid:140)e syntax of our DSL is de(cid:128)ned by the following BNF
grammar:
(cid:104)instr(cid:105)
(cid:104)exec(cid:105)
(cid:104)trans(cid:105)
(cid:104)block(cid:105)
(cid:104)comp(cid:105)
(cid:104)expr(cid:105)
(cid:104)rel(cid:105)
(cid:104)pa(cid:136)ern(cid:105)
::= CALL | CALLDATALOAD | SSTORE | JUMPI | . . .
::= depth | pc | address | stack(int) | stack.result |
| memory(int, int) | transaction.(cid:104)trans(cid:105)
| block.(cid:104)block(cid:105)
::= hash | value | from | to | . . .
::= number | gasUsed | gasLimit | . . .
::=  | ≤ | ≥ | = | (cid:44) | + | - | · | /
::= (src.(cid:104)exec(cid:105) (cid:104)comp(cid:105) (cid:104)expr(cid:105)) [∧ (cid:104)expr(cid:105)]
((cid:104)expr(cid:105) (cid:104)comp(cid:105) dst.(cid:104)exec(cid:105)) [∧ (cid:104)expr(cid:105)]
|
(src.(cid:104)exec(cid:105) (cid:104)comp(cid:105) src.(cid:104)exec(cid:105)) [∧ (cid:104)expr(cid:105)]
|
(src.(cid:104)exec(cid:105) (cid:104)comp(cid:105) dst.(cid:104)exec(cid:105)) [∧ (cid:104)expr(cid:105)]
|
(dst.(cid:104)exec(cid:105) (cid:104)comp(cid:105) dst.(cid:104)exec(cid:105)) [∧ (cid:104)expr(cid:105)]
|
(src.(cid:104)exec(cid:105) (cid:104)comp(cid:105) int) | (dst.(cid:104)exec(cid:105) (cid:104)comp(cid:105) int)
|
::= ⇒ | (cid:123) | →
::= (opcode = (cid:104)instr(cid:105)) (cid:104)rel(cid:105) (opcode = (cid:104)instr(cid:105)) [where
(cid:104)expr(cid:105)]
(cid:104)pa(cid:136)ern(cid:105) (cid:104)rel(cid:105) (opcode = (cid:104)instr(cid:105)) [where (cid:104)expr(cid:105)]
|
(opcode = (cid:104)instr(cid:105)) (cid:104)rel(cid:105) (cid:104)pa(cid:136)ern(cid:105) [where (cid:104)expr(cid:105)]
|
Figure 3: DSL for describing attack patterns.
A pa(cid:138)ern is a sequence of relations between EVM instructions
that may occur at runtime. We distinguish between three types of
relations, a “control (cid:131)ow” relation (⇒), a “data (cid:131)ow” relation ((cid:123)),
and a “follows” relation (→). A control (cid:131)ow relation means that an
instruction is control dependent on another instruction. A data-(cid:131)ow
relation means that an instruction is data dependent on another
5
Figure 4: Execution example of a reentrancy attack, where the stack values ❕ (gas), t (to), a (amount), i (index) and v (value)
represent the respective parameters passed to the instructions during execution. A control (cid:131)ow relation is depicted using ⇒,
while → depicts a follows relation.
instruction. A follows relation means that an instruction is executed
a(cid:137)er another instruction, without necessarily being control or data
dependent on the other instruction. A relation is always between
two EVM opcodes: a source opcode (src) and a destination opcode
(dst). (cid:140)e source marks the beginning of the relation, whereas
the destination de(cid:128)nes the end of the relation. Moreover, the DSL
allows to create conjunctions of expressions that allow to compare
the execution environment between source and destination. (cid:140)e
execution environment includes the current depth of the call stack
(depth), the current value of the program counter (pc), the address
of the contract that is currently being executed (address), the
current values on the stack (stack) as well as the result of an
operation that is pushed onto the stack (stack.result), the current
values stored in memory (memory), and (cid:128)nally, properties of the
current transaction that is being executed (e.g. hash) as well as
properties of the current block that is being executed (e.g. number).
(cid:140)e stack is addressable via an integer, where 0 de(cid:128)nes the top
element on the stack. (cid:140)e memory is addressable via two integers:
an o(cid:130)set and a size. In the following, we explain the semantics of our
DSL via two concrete examples of a(cid:138)ack pa(cid:138)erns: same-function
reentrancy and the parity wallet hack 1.
Same-Function Reentrancy. Reconsider the reentrancy example
that was described in Section 2.2. Figure 4, illustrates the control
(cid:131)ow as well as the follows relations that occur during the execution
of that example. (cid:140)e execution starts with contract address B and
a call stack depth of 1. Eventually, contract B calls the withdraw
function of contract A, which results in executing the CALL instruc-
tion and increasing the depth of the call stack to 2, and switching
the address of the contract that is being executed to contract A.
Next, contract A sends some funds to contract B, which also results
in executing the CALL instruction and increasing the depth of the
call stack to 3, and switching the address of the contract that is
being executed back to contract B. As a result, the fallback func-
tion of contract B is called, which in turn calls again the withdraw
function of contract A. (cid:140)is sequence of calls repeats until the
balance of contract A is either empty or the execution runs out of
gas. Eventually, the state in contract A is updated by executing the
SSTORE instruction. Given these observations, we can now create
the following a(cid:138)ack pa(cid:138)ern in order to detect and thereby prevent
same-function reentrancy:
( opcode = CALL ) ⇒ ( opcode = CALL ) where
( s r c . s t a c k ( 1 ) = d s t . s t a c k ( 1 ) ) ∧
( s r c . a d d r e s s = d s t . a d d r e s s ) ∧
( s r c . pc = d s t . pc ) →
( opcode = SSTORE ) → ( opcode = SSTORE ) where
( s r c . s t a c k ( 0 ) = d s t . s t a c k ( 0 ) ) ∧
( s r c . a d d r e s s = d s t . a d d r e s s ) ∧
( s r c . depth > d s t . depth )
(cid:140)is a(cid:138)ack pa(cid:138)ern evaluates to true if a transaction meets the
following two conditions:
(1) there is a control (cid:131)ow relation between two CALL instruc-
tions, where both instructions share the same call destina-
tion (i.e. src. stack(1) = dst.stack(1)), are executed
by the same contract (i.e. src.address = dst.address)
and share the same program counter (i.e. src.pc = dst.pc);
(2) two SSTORE instructions follow the previous control (cid:131)ow
relation, where both instructions write to the same storage
location (i.e. src.stack(0) = dst.stack(0)), are exe-
cuted by the same contract (i.e. src.address = dst.address)
and where the (cid:128)rst instruction has a higher call stack depth
than the second instruction (i.e. src.depth > dst.depth).
It is worth mentioning that we compare the program counter values
of the two CALL instructions in order to make sure that it is the
same function that is being called, as our goal is to detect only
same-function reentrancy.
Parity Wallet Hack 1. Reconsider the access control example de-
scribed in Section 2.2. Figure 5 illustrates the relevant control (cid:131)ow,
data (cid:131)ow and follows relations that occur during the execution
of that example. We note that the execution example is divided
into two separate transactions. In the (cid:128)rst transaction, the a(cid:138)acker
sets itself as the owner, whereas in the second transaction the
6
CALLCALL……A.withdraw()msg.sender.call.value(…)()CALLCALL……A.withdraw()SSTORE…credit[msg.sender] = 0…⟹msg.sender.call.value(…)()……SSTORE⟹…credit[msg.sender] = 0……address = Bdepth = 1⟹address = Adepth = 2address = Bdepth = 3address = Adepth = 4address = …depth = n⟹⟹⟹⟹⟹pc= 272stack = [𝑔, 𝑡, 𝑎, …]pc= 937stack = [𝑔, 𝑡, 𝑎, …]pc= 272stack = [𝑔, 𝑡, 𝑎, …]pc= 937stack = [𝑔, 𝑡, 𝑎, …]pc= 8555stack = [𝑖, 𝑣, …]pc= 8555stack = [𝑖, 𝑣, …]Figure 5: Execution example of an attack on an access control vulnerability. A data (cid:131)ow relation is depicted with (cid:123). (cid:135)e
variables g, t and a are as discussed in Figure 4.
a(cid:138)acker transfers all the funds to itself. Although in reality an at-
tacker performs two separate transactions, in our methodology, the
two transactions are represented as a single sequence of execution
events. For both transactions, the execution starts with contract
address W eventually making a delegate call to contract address L,
as part of the a(cid:138)acker calling the fallback function of contract W . In
the (cid:128)rst transaction, we see that at a certain point contract L copies
data from the transaction using the CALLDATACOPY instruction and
stores it into storage via the SSTORE instruction. An interesting
observation here is that state is shared across transactions through
storage. In the second transaction, the data that has previously
been stored is now loaded onto the stack and used by a compari-
son. A comparison is ultimately re(cid:131)ected via the JUMPI instruction.
Finally, we see that the comparison follows a CALLDATALOAD in-
struction whose data is used by a call CALL instruction. Given these
observations, we are now able to create the following a(cid:138)ack pa(cid:138)ern
in order to detect and thereby prevent the (cid:128)rst Parity wallet hack:
( opcode = DELEGATECALL ) ⇒ ( opcode = CALLDATACOPY) (cid:123)
( opcode = SSTORE ) (cid:123) ( opcode = JUMPI ) where
( s r c . t r a n s a c t i o n . hash (cid:44) d s t . t r a n s a c t i o n . hash ) →
( ( opcode = CALLDATALOAD) (cid:123) ( opcode = CALL ) ) where
( d s t . s t a c k ( 2 ) > 0 )
(cid:140)e above a(cid:138)ack pa(cid:138)ern evaluates to true if the following two
conditions are met:
(1) there is a transaction with a control (cid:131)ow relation between
a DELEGATECALL instruction and a CALLDATACOPY instruc-
tion, where the data of the CALLDATACOPY instruction (cid:131)ows
into an SSTORE instruction;
(2) there is another transaction (i.e. src.transaction.hash
(cid:44) dst.transaction.hash) where the data that has been
previously stored via the SSTORE instruction (cid:131)ows into
a JUMPI instruction and is followed by a CALLDATALOAD
instruction whose data (cid:131)ows into a CALL instruction that
sends out funds (i.e. dst.stack(2) ¿ 0).
It is worth noting that the Parity wallet a(cid:138)ack is a multi-transactional
a(cid:138)ack and that it is therefore signi(cid:128)cantly di(cid:130)erent from a reen-
trancy a(cid:138)ack, that is solely based on a single transaction. For more
examples of a(cid:138)ack pa(cid:138)erns, please refer to Table 5 in Appendix A.
Figure 6: An illustrative example of ÆGIS’s work(cid:131)ow: step
1) A benign user detects a vulnerability and proposes a pat-
tern (written using our DSL) to the smart contract. Step 2)
Eligible voters vote to either accept or reject the pattern. If
the majority votes to accept the pattern, then all the clients
are updated and the pattern is activated. Step 3) An attacker
tries but fails to exploit a vulnerable smart contract due to
the voted pattern matching the malicious transaction.
4.2 Decentralized Security Updates
While our approach of using a DSL allows us to have a generic
solution for detecting a(cid:138)acks, it still leaves two open questions:
(1) How do we distribute and enforce the same pa(cid:138)erns across
all the clients?
(2) How do we decentralize the governance of pa(cid:138)erns in order
to prevent a single entity from deciding which pa(cid:138)erns are
added or removed?
(cid:140)e answer to these questions is to use a smart contract that is
deployed on the blockchain itself. (cid:140)is solves the problem of dis-
tributing and enforcing that the same pa(cid:138)erns are always used
across all clients. Speci(cid:128)cally, pa(cid:138)erns are stored inside the smart
contract and the blockchain protocol itself guarantees that every
client knows about the exact same state and therefore has access
to exactly the same pa(cid:138)erns. (cid:140)e second problem of decentralizing
the governance of pa(cid:138)erns, is solved by allowing the proposal and
voting of pa(cid:138)erns via the smart contract as depicted in Figure 6.
(cid:140)e contract maintains a list of eligible voters that vote for either
7
DELEGATECALLCALLDATACOPY……L.delegatecall(msg.data)m_ownerIndex[_owners[i]] = 2+i;⟹…address = Wdepth = 1address = Ldepth = 2⟹⤳SSTORE⤳JUMPICALLDATALOADCALLif (m_ownerIndex[msg.sender] > 0)⤳_to.call.value(_value)(_data));……………………pc= 284stack = […]pc= 1072stack = […]pc= 4046stack = […]pc= 2701stack = […]pc= 725stack = […]pc= 2868stack = [𝑔, 𝑡, 𝑎, …]transaction hash = 0x9dbf03…ef75ectransaction hash = 0xeef10f…a7be7cEach record in this list contains the executed opcode, the value
of the program counter, the depth of the call stack, the address of
the contract that is being executed, and (cid:128)nally, all the values that
were stored on the stack and in memory. (cid:140)is list is passed to the
interpreter component of ÆGIS.
Interpreter. (cid:140)e interpreter loops through the list of executed
instructions and passes the relevant instructions to the control (cid:131)ow
and data (cid:131)ow extractor components. It is also responsible for sig-
nalling the EVM a revert in case the execution trace matches an
a(cid:138)ack pa(cid:138)ern.
Control Flow Extractor. (cid:140)e control (cid:131)ow extractor is responsible
for inferring control (cid:131)ow information. We do so by dynamically
building a call tree from the instructions received by the interpreter.
A control (cid:131)ow relation is reported if there exists a path along the
call tree, from the source instruction to the destination instruction
de(cid:128)ned in a given pa(cid:138)ern. (cid:140)us, control (cid:131)ow relations represent
call dependencies between two instructions.
Data Flow Extractor. (cid:140)e data (cid:131)ow extractor is responsible for
collecting data (cid:131)ow information. We track the (cid:131)ow of data be-
tween instructions by using dynamic taint analysis. Taint is intro-
duced whenever we come across a source instruction and checked
whenever we come across a destination instruction. Source and
destination instructions are de(cid:128)ned by a given pa(cid:138)ern. Taint propa-
gation follows the semantics of the EVM [41] across stack, memory
and storage. We perform byte-level precision tainting. Taint that
is stored across stack and memory is volatile, meaning that it is
cleared across transactions. Taint that is stored across storage is
persistent, meaning that it remains in storage across transactions.
(cid:140)is allows us to perform inter-transactional taint analysis. A data
(cid:131)ow relation is given if taint (cid:131)ows from a source instruction into a
destination instruction.
Pattern Parser. (cid:140)e pa(cid:138)ern parser is responsible for extracting
and parsing the pa(cid:138)erns from the voting smart contract. We imple-
mented our pa(cid:138)ern language using textX 5, a Python framework
providing a meta-language for building DSLs.
5.2 ÆGIS Smart Contract
(cid:140)e ÆGIS smart contract ensures proper curation of the list of
active pa(cid:138)erns. We implemented our smart contract in Solidity.
As previously mentioned, pa(cid:138)erns are accepted or removed via
a voting mechanism. (cid:140)e contract holds all proposed additions
and removals of pa(cid:138)erns and allows a vote on them within a set
time window. (cid:140)e duration can be con(cid:128)gured and updated by the
contract owner. Proposals are open to the public and anyone can
propose an addition to or removal from the list of pa(cid:138)erns.
Fairness. Votes should remain secret until all eligible voters have
had su(cid:129)cient opportunity to vote. (cid:140)erefore, two time windows
are employed. (cid:140)e (cid:128)rst window is for sending a commitment that
includes a deposit. (cid:140)e second window is for revealing a vote in-
cluding the return of the commi(cid:138)ed deposits. (cid:140)e two windows
5h(cid:138)ps://github.com/textX/textX
8
Figure 7: Architecture of ÆGIS. (cid:135)e dark gray boxes repre-
sent ÆGIS’s main components.
accepting or rejecting a new pa(cid:138)ern. If the majority has voted with
“yes”, i.e. to accept the pa(cid:138)ern, then it is added to the list of active
pa(cid:138)erns. In that case, every client is automatically noti(cid:128)ed through
the mechanism of smart contract events, and retrieves the updated
list of pa(cid:138)erns from the blockchain. In other words, if a pa(cid:138)ern
is accepted by the voting mechanism, it is updated across all the
clients through the existing consensus mechanism of the Ethereum
blockchain. However, solving the second problem using a voting
mechanism opens up a new problem concerning the requirements
needed for governing the votes. In voting literature, veri(cid:128)ability
and privacy are typically seen as key requirements. Veri(cid:128)ability
concerns linking the output to the input in a veri(cid:128)able way. Privacy
concerns whether a vote can be linked back to a voter. In addition,