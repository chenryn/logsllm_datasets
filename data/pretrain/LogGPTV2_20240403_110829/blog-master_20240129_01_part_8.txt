   Heap Blocks: exact=50082    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..17.40 rows=1000 width=0) (actual time=26.498..26.498 rows=77129 loops=1)    
         Index Cond: (tags % '{2}'::integer[])    
 Planning Time: 0.414 ms    
 Execution Time: 309.182 ms    
(7 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[2,8];    
                                                              QUERY PLAN    
--------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=33.378..790.183 rows=149118 loops=1)    
   Recheck Cond: (tags % '{2,8}'::integer[])    
   Rows Removed by Index Recheck: 351146    
   Heap Blocks: exact=35117 lossy=33064    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=29.934..29.934 rows=149118 loops=1)    
         Index Cond: (tags % '{2,8}'::integer[])    
 Planning Time: 0.924 ms    
 Execution Time: 794.029 ms    
(8 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[2,2696];    
                                                            QUERY PLAN    
----------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=6.287..26.042 rows=1028 loops=1)    
   Recheck Cond: (tags % '{2,2696}'::integer[])    
   Heap Blocks: exact=1019    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=5.956..5.956 rows=1028 loops=1)    
         Index Cond: (tags % '{2,2696}'::integer[])    
 Planning Time: 0.439 ms    
 Execution Time: 26.218 ms    
(7 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];    
                                                           QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=70.45..1165.16 rows=1000 width=4) (actual time=13.211..13.212 rows=0 loops=1)    
   Recheck Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..70.20 rows=1000 width=0) (actual time=13.204..13.205 rows=0 loops=1)    
         Index Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])    
 Planning Time: 0.204 ms    
 Execution Time: 13.264 ms    
(6 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];    
                                                           QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=61.65..1156.36 rows=1000 width=4) (actual time=11.364..11.366 rows=0 loops=1)    
   Recheck Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..61.40 rows=1000 width=0) (actual time=11.357..11.358 rows=0 loops=1)    
         Index Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])    
 Planning Time: 0.264 ms    
 Execution Time: 11.447 ms    
(6 rows)    
```    
有百分之多少以上的标签重合, `smlar.type = cosine    ,  smlar.threshold = FLOAT`    
```    
set smlar.type = cosine;    
set smlar.threshold = 1;  -- 精确匹配, 目标也必须只包含2, 相当于相等    
select uid from tbl_users where tags % array[2];    
set smlar.type = cosine;    
set smlar.threshold = 0.5;  -- 两组标签的交集(重叠标签)占两组标签叠加(并集)后的50%以上    
select uid from tbl_users where tags % array[2,8];    
set smlar.type = cosine;    
set smlar.threshold = 1;  -- 精确匹配, 两组标签的交集(重叠标签)占两组标签叠加(并集)后的100%以上    
select uid from tbl_users where tags % array[2,2696];    
set smlar.type = cosine;    
set smlar.threshold = 0.7;  -- 两组标签的交集(重叠标签)占两组标签叠加(并集)后的70%以上    
select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];    
set smlar.type = cosine;    
set smlar.threshold = 0.9;  -- 两组标签的交集(重叠标签)占两组标签叠加(并集)后的90%以上    
select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];    
```    
使用smlar插件, 数组类型和gin索引后, 查看执行计划和耗时如下:    
```    
postgres=# explain analyze select uid from tbl_users where tags % array[2];    
                                                             QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=17.65..1112.36 rows=1000 width=4) (actual time=301.094..301.094 rows=0 loops=1)    
   Recheck Cond: (tags % '{2}'::integer[])    
   Rows Removed by Index Recheck: 77129    
   Heap Blocks: exact=50082    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..17.40 rows=1000 width=0) (actual time=25.659..25.659 rows=77129 loops=1)    
         Index Cond: (tags % '{2}'::integer[])    
 Planning Time: 0.252 ms    
 Execution Time: 301.135 ms    
(8 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[2,8];    
                                                              QUERY PLAN    
--------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=799.554..799.554 rows=0 loops=1)    
   Recheck Cond: (tags % '{2,8}'::integer[])    
   Rows Removed by Index Recheck: 500264    
   Heap Blocks: exact=35117 lossy=33064    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=43.356..43.356 rows=149118 loops=1)    
         Index Cond: (tags % '{2,8}'::integer[])    
 Planning Time: 0.379 ms    
 Execution Time: 799.611 ms    
(8 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[2,2696];    
                                                            QUERY PLAN    
----------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=26.45..1121.16 rows=1000 width=4) (actual time=26.476..26.478 rows=0 loops=1)    
   Recheck Cond: (tags % '{2,2696}'::integer[])    
   Rows Removed by Index Recheck: 1028    
   Heap Blocks: exact=1019    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..26.20 rows=1000 width=0) (actual time=5.242..5.242 rows=1028 loops=1)    
         Index Cond: (tags % '{2,2696}'::integer[])    
 Planning Time: 0.570 ms    
 Execution Time: 26.570 ms    
(8 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[2,4356,5064,5711,7363,9417,9444];    
                                                           QUERY PLAN    
---------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=70.45..1165.16 rows=1000 width=4) (actual time=16.722..16.723 rows=0 loops=1)    
   Recheck Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])    
   Rows Removed by Index Recheck: 8    
   Heap Blocks: exact=8    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..70.20 rows=1000 width=0) (actual time=16.586..16.587 rows=8 loops=1)    
         Index Cond: (tags % '{2,4356,5064,5711,7363,9417,9444}'::integer[])    
 Planning Time: 0.276 ms    
 Execution Time: 16.795 ms    
(8 rows)    
postgres=# explain analyze select uid from tbl_users where tags % array[4356,5064,5711,7363,9417,9444];    
                                                          QUERY PLAN    
-------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl_users  (cost=61.65..1156.36 rows=1000 width=4) (actual time=9.755..9.757 rows=0 loops=1)    
   Recheck Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])    
   ->  Bitmap Index Scan on tbl_users_tags_idx  (cost=0.00..61.40 rows=1000 width=0) (actual time=9.748..9.749 rows=0 loops=1)    
         Index Cond: (tags % '{4356,5064,5711,7363,9417,9444}'::integer[])    
 Planning Time: 0.294 ms    
 Execution Time: 9.811 ms    
(6 rows)    
```    
六、传统方法与PolarDB|PostgreSQL的对照    
方法 | SQL1 耗时 ms | SQL2 耗时 ms | SQL3 耗时 ms | SQL4 耗时 ms | SQL5 耗时 ms    
---|---|---|---|---|---    
传统字符串 + 全表扫描 | 1110.267 | 2004.062 | 2060.434 | 6767.990 | 6208.191    
PolarDB 传统字符串 + 模糊搜索 + gin索引加速 | 78.163 | 814.748 | 902.637 | 4050.040 | 3691.329    
PolarDB 数组 + gin索引加速 | 74.015 | 18.561 | 4.750 | 5.523 | 4.528    
PolarDB 数组(重叠个数)相似度搜索 + gin索引加速 | 309.182 | 794.029 | 26.218 | 13.264 | 11.447    
PolarDB 数组(重叠占比)相似度搜索 + gin索引加速 | 301.135 | 799.611 | 26.570 | 16.795 | 9.811    
七、知识点    
1、数组类型    
2、gin索引    
3、smlar 插件    
更多算法参考: https://github.com/jirutka/smlar    
4、pg_trgm 插件    
八、思考    
pg_trgm插件对字符串做了什么处理, 可以利用gin索引加速模糊查询加速?    
smlar插件是如何通过索引快速判断两个数组的相似性达到阈值的?    
为什么多个模糊匹配条件使用and条件后, 性能下降严重?    
为什么使用数组类型后, 标签条件越多性能越好?    
如果多个模糊匹配条件是or 条件呢? 性能会下降还是提升?    
还有什么业务场景会用到数组?    
还有哪些业务场景会用到字符串模糊匹配?    
还有什么业务场景非常适合使用数组相似的功能?    
除了使用标签匹配来圈选相似目标人群, 还可不可以使用其他方式圈选? 例如向量距离?    
使用标签匹配时, 如果我们要排除某些标签, 而不是包含某些标签, 应该如何写sql, 性能又会怎么样呢?    
为什么使用smlar进行相似度过滤时, 相似度越高性能越好?    
SQL圈选性能和返回符合条件的用户记录数有没有关系? 是什么关系?    
当使用pg_trgm进行模糊搜索加速时, 如果字符串中包含wchar(例如中文)时性能如果很差要怎么办? 如果需要模糊搜索的字符只有1个或2个字符时性能如果很差要怎么办?    
### 4、PolarDB向量数据库插件, 实现通义大模型AI的外脑, 解决通用大模型无法触达的私有知识库问题、幻觉问题    
通用大模型是使用大量高质量素材训练而成的AI大脑, 训练过程非常耗费硬件资源, 时间也非常漫长. AI的能力取决于训练素材(文本、视频、音频等), 虽然训练素材非常庞大, 可以说可以囊括目前已知的人类知识的巅峰. 但是模型是由“某家公司/某个社区”训练的, 它能触达的素材总有边界, 总有一些知识素材是无法被训练的, 例如私有(机密)素材. 因此通用大模型存在一些问题, 以chatGPT为例:   
- 在达模型训练完成后, 新发现的知识. 大模型不具备这些知识, 它的回答可能产生幻觉(胡编乱造)     
- 大模型没有训练过的私有知识. 大模型不具备这些知识, 它的回答可能产生幻觉(胡编乱造)     
由于训练过程耗费大量资源且时间漫长, 为了解决幻觉问题, 不可能实时用未知知识去训练大模型, 向量数据库应运而生.     
基本原理如下  
- 1、将新知识(在达模型训练完成后, 新发现的知识 + 大模型没有训练过的私有知识)分段  
- 2、将分段内容向量化, 生成对应的向量(浮点数组)  
- 3、将向量(浮点数组), 以及对应的分段内容(文本)存储在向量数据库中  
- 4、创建向量索引, 这是向量数据库的核心, 有了向量索引可以加速相似搜索. 例如: 1000万条向量中召回100条相似内容, 毫秒级别.     
- 5、当用户提问时, 将用户问题向量化, 生成对应的向量(浮点数组)  
- 6、到向量数据库中根据向量距离(向量相似性)进行搜索, 找到与用户问题相似度高于某个阈值的文本分段内容   
- 7、将找到的文本分段内容+用户问题发送给大模型  
- 8、大模型有了与用户提问问题相关新知识(分段文本内容)的加持, 可以更好的回答用户问题  
一、大模型基本知识介绍及用法简介  
为了完成这个实验, 你需要申请一个阿里云账号, 使用阿里云大模型服务.    
1、模型服务灵积总览    
DashScope灵积，旨在通过灵活、易用的模型API服务，让业界各个模态的模型能力，能方便触达AI开发者。    
通过灵积API，丰富多样化的模型不仅能通过推理接口被集成，也能通过训练微调接口实现模型定制化，让AI应用开发更灵活，更简单！    
https://dashscope.console.aliyun.com/overview    
2、可以先在web界面体验各种模型    
https://dashscope.aliyun.com/    
3、进入控制台, 开通通义千问大模型+文本向量化模型    
https://dashscope.console.aliyun.com/overview    
4、创建API-KEY, 调用api需要用到key. 调用非常便宜, 一次调用不到1分钱, 学习几乎是0投入.     
https://dashscope.console.aliyun.com/apiKey    
5、因为灵积是个模型集市, 我们可以看到这个集市当前支持的所有模型:     
https://dashscope.console.aliyun.com/model    
支持大部分开源模型, 以及通义自有的模型. 分为三类: aigc, embeddings, audio.    
5\.1、aigc 模型    
通义千问:    
- 通义千问是一个专门响应人类指令的大模型，是一个灵活多变的全能型选手，能够写邮件、周报、提纲，创作诗歌、小说、剧本、coding、制表、甚至角色扮演。    
Llama2大语言模型:    
- Llama2系列是来自Meta开发并公开发布的的大型语言模型（LLMs）。该系列模型提供了多种参数大小（7B、13B和70B等），并同时提供了预训练和针对对话场景的微调版本。    
百川开源大语言模型:    
- 百川开源大语言模型来自百川智能，基于Transformer结构，在大约1.2万亿tokens上训练的70亿参数模型，支持中英双语。    
通义万相系列:    
- 通义万相是基于自研的Composer组合生成框架的AI绘画创作大模型，提供了一系列的图像生成能力。支持根据用户输入的文字内容，生成符合语义描述的不同风格的图像，或者根据用户输入的图像，生成不同用途的图像结果。通过知识重组与可变维度扩散模型，加速收敛并提升最终生成图片的效果。图像结果贴合语义，构图自然、细节丰富。支持中英文双语输入。当前包括通义万相-文生图，和通义万相-人像风格重绘模型。    
StableDiffusion文生图模型:    
- StableDiffusion文生图模型将开源社区stable-diffusion-v1.5版本进行了服务化支持。该模型通过clip模型能够将文本的embedding和图片embedding映射到相同空间，从而通过输入文本并结合unet的稳定扩散预测噪声的能力，生成图片。    
ChatGLM开源双语对话语言模型:    
- ChatGLM开源双语对话语言模型来自智谱AI，在数理逻辑、知识推理、长文档理解上均有支持。    
智海三乐教育大模型:    
- 智海三乐教育大模型由浙江大学联合高等教育出版社、阿里云和华院计算等单位共同研制。该模型是以阿里云通义千问70亿参数与训练模型为基座，通过继续预训练和微调等技术手段，利用核心教材、领域论文和学位论文等教科书级高质量语料，结合专业指令数据集，训练出的一款专注于人工智能专业领域教育的大模型，实现了教育领域的知识强化和教育场景中的能力升级。    
姜子牙通用大模型:    
- 姜子牙通用大模型由IDEA研究院认知计算与自然语言研究中心主导开源，具备翻译、编程、文本分类、信息抽取、摘要、文案生成、常识问答和数学计算等能力。    
Dolly开源大语言模型:    
- Dolly开源大语言模型来自Databricks，支持脑暴、分类、问答、生成、信息提取、总结等能力。    