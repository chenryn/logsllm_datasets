title:When Push Comes to Ads: Measuring the Rise of (Malicious) Push Advertising
author:Karthika Subramani and
Xingzi Yuan and
Omid Setayeshfar and
Phani Vadrevu and
Kyu Hyung Lee and
Roberto Perdisci
When Push Comes to Ads:
Measuring the Rise of (Malicious) Push Advertising
Omid Setayeshfar
University of Georgia
Karthika Subramani
University of Georgia
University of Georgia
Xingzi Yuan
PI:EMAIL
Phani Vadrevu
University of New Orleans
PI:EMAIL
PI:EMAIL
Kyu Hyung Lee
University of Georgia
PI:EMAIL
PI:EMAIL
Roberto Perdisci
University of Georgia
Georgia Institute of Technology
PI:EMAIL
ABSTRACT
The rapid growth of online advertising has fueled the growth of ad-
blocking software, such as new ad-blocking and privacy-oriented
browsers or browser extensions. In response, both ad publishers
and ad networks are constantly trying to pursue new strategies to
keep up their revenues. To this end, ad networks have started to
leverage the Web Push technology enabled by modern web browsers.
As web push notifications (WPNs) are relatively new, their role in
ad delivery has not yet been studied in depth. Furthermore, it is
unclear to what extent WPN ads are being abused for malvertis-
ing (i.e., to deliver malicious ads). In this paper, we aim to fill this
gap. Specifically, we propose a system called PushAdMiner that
is dedicated to (1) automatically registering for and collecting a
large number of web-based push notifications from publisher web-
sites, (2) finding WPN-based ads among these notifications, and (3)
discovering malicious WPN-based ad campaigns.
Using PushAdMiner, we collected and analyzed 21,541 WPN
messages by visiting thousands of different websites. Among these,
our system identified 572 WPN ad campaigns, for a total of 5,143
WPN-based ads that were pushed by a variety of ad networks.
Furthermore, we found that 51% of all WPN ads we collected are
malicious, and that traditional ad-blockers and URL filters were
mostly unable to block them, thus leaving a significant abuse vector
unchecked.
CCS CONCEPTS
• Informationsystems→ Onlineadvertising; Webmining; Spam
detection; • Security and privacy → Social engineering attacks.
ACM Reference Format:
Karthika Subramani, Xingzi Yuan, Omid Setayeshfar, Phani Vadrevu, Kyu
Hyung Lee, and Roberto Perdisci. 2020. When Push Comes to Ads: Measuring
the Rise of (Malicious) Push Advertising . In ACM Internet Measurement Con-
ference (IMC ’20), October 27–29, 2020, Virtual Event, USA. ACM, Pittsburgh,
PA , USA, 14 pages. https://doi.org/10.1145/3419394.3423631
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
IMC ’20, October 27–29, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8138-3/20/10...$15.00
https://doi.org/10.1145/3419394.3423631
724
1 INTRODUCTION
In the past few years, the rapid growth of online advertising has
fueled the growth of ad-blocking software, such as new ad-blocking
and privacy-oriented browsers (e.g., Brave [4]) or browser exten-
sions (e.g., AdBlockPlus [1]). In response, both ad publishers and ad
networks are constantly trying to pursue new strategies to keep up
their revenues. To this end, ad networks have started to leverage
the Web Push technology enabled by modern web browsers [45].
Until relatively recently, push notifications were mostly limited to
native apps on mobile platforms, and web-based applications were
unable to connect to their users out of active browsing sessions.
However, now Web Push allows for web applications to send out
Web Push Notifications (WPN) at any time to re-engage their users,
even when the browser tab in which the web application was run-
ning is closed (the browser itself needs to be running, but does not
need to be in the foreground for a WPN to be delivered to the user).
Furthermore, unlike push notifications from native mobile apps,
WPNs allow for notifications to be displayed on both desktop and
mobile devices. Thus, they serve as a single tool with support to
reach users on multiple platforms.
Although WPNs were initially designed for websites to deliver
simple messages (e.g., news, weather alerts, etc.), they have become
an effective way to also serve online ads, and can therefore be
abused to also deliver malicious ads. In particular, the use of WPNs
for ad delivery has some unique advantages. First, unlike traditional
online ads (banner ads, pop-up ads or pop-under ads), advertisers
do not have to wait for users to reach the web page that publishes
the ad. Instead, advertisers can send out notifications that can allure
users to their targeted content. Secondly, thanks to years of experi-
ence with native mobile app notifications, users have been trained
to compulsively interact with push notification messages (at least
on mobile devices). WPN-based ads may also be less prone to ad
blindness [60], compared to traditional web ad delivery mechanisms
such as page banners. Furthermore, ad-blocking software are not
currently effective at blocking WPN-based ads (see Section 6.4), in
part because browser extensions are not allowed to interfere with
the Service Workers code through which WPNs are delivered [48].
For these reasons, some ad networks are focusing their business
specifically around WPN ads (e.g., RichPush [17]).
As WPNs are relatively new, their role in ad delivery has not
yet been studied in depth. Furthermore, it is unclear to what ex-
tent WPN ads are being abused for malvertising (i.e., to deliver
IMC ’20, October 27–29, 2020, Virtual Event, USA
K. Subramani, X. Yuan, O. Setayeshfar, P. Vadrevu, K. Lee and R. Perdisci
malicious ads). In this paper, we aim to fill this gap. Specifically,
we propose a system called PushAdMiner that is dedicated to (1)
automatically registering for and collecting a large number of web-
based push notifications from publisher websites, (2) finding WPN-
based ads among these notifications, and (3) discovering malicious
WPN-based ad campaigns. To build PushAdMiner, we significantly
extend the Chromium browser instrumentations developed by [39]
and [58], which have been open-sourced by the respective authors.
Specifically, neither [39] nor [58] are able to track the activities of
Service Workers in detail. Therefore, we implement our own set
of browser instrumentations that allows us to track WPNs in all
their aspects, from registration to notification delivery, on both
desktop and mobile devices. We then build a custom WPN crawler
around our instrumented browser to automatically receive, track,
and interact with generic WPNs, including collecting malicious
WPN ads and their respective malicious landing pages. Finally, we
develop a data mining pipeline to analyze the collected WPNs and
discover malicious WPN-based campaigns.
To the best of our knowledge, ours is the first systematic study
that focuses on automatically collecting and analyzing WPN-based
ads and on discovering malicious ad campaigns delivered via WPNs.
In contrast, previous work focused on other security-related as-
pects of Service Workers and Push Notifications, such as building
stealthy botnets [48], or social engineering attacks that attempt to
force users into subscribing to push notifications [58], but with-
out studying the resulting push messages. Lee at al. [38] study
Progressive Web Apps. They collect Service Worker scripts from
top-ranked website homepages and analyze their push notifications.
Their work studies potential security vulnerabilities related to Ser-
vice Workers, App Cache, and discusses how push notifications
may be abused to launch phishing attacks, without measuring how
prevalent these attacks are in the wild. Our work is different, in
that we aim to automatically collect and analyze WPN-based ads,
to discover WPN ad campaigns, and to measure the prevalence of
malicious WPN-based ad campaigns in the wild.
In summary, we make the following contributions:
• We present PushAdMiner, a system that enables the auto-
mated collection and analysis of online ads delivered via
web push notifications (WPNs) on both desktop and mobile
devices.
• To track WPNs, we extend a Chromium-based instrumented
browser developed in [39, 58] to allow for a detailed analysis
of Service Workers, which are at the basis of WPN deliveries.
Furthermore, we build a custom WPN crawler around our
instrumented browser to collect and automatically interact
with WPNs.
• Using PushAdMiner, we collected and analyzed 21,541 WPN
messages by visiting thousands of different websites. Among
these, our system identified 572 WPN ad campaigns, for a
total of 5,143 WPN-based ads that were pushed by a vari-
ety of ad networks. Furthermore, we found that 51% of all
WPN ads we collected are malicious, and that traditional ad-
blockers and URL filters were mostly unable to block them,
thus leaving a significant abuse vector unchecked.
2 MOTIVATING
EXAMPLE AND BACKGROUND
In this section, we provide an example of WPN-based malicious ad,
and then briefly explain the concepts and technologies behind web
notification services.
2.1 Motivating Example
Figure 1 provides an example of malicious WPN-based ad. Dur-
ing the preliminary stages of our research, we stumbled upon a
website on aurolog[.]ru. When visiting the main page, the site re-
quested permission to send us notifications. We granted permission
by pressing the Allow button on the browser dialog box, and subse-
quently received a WPN ad with the following alert message: “Your
payment info has been leaked” (see Figure 1). After clicking on the
notification, we were redirected to a tech support scam [46]. To our
surprise, the landing URL was neither blocklisted by Google Safe
Browsing[11] nor detected as malicious by any of the web page
scanners on Virus Total[21]. This example confirmed our suspicion
that WPNs may be abused for malvertising, and sparked our inves-
tigation to determine whether such cases of malicious WPN-based
ads could be automatically collected and analyzed.
2.2 Technical Background
Recent changes in HTML5 have introduced new web features, such
as Service Workers[20], Push Notifications[14] and AppCache[19].
Websites that adopt these technologies are called Progressive Web
Apps (PWAs). Throughout this paper, we refer to push notifications
sent by PWAs using a browser as Web Push Notifications (WPN),
to distinguish them from push notifications sent by native apps on
mobile devices, and refer to Service Workers as SWs for brevity.
Service Workers and Push Notifications: A Service Worker (SW)
is an event-driven script executed by the browser in the background,
separately from the main browser thread and independently of the
web application from which it was initially registered and that it con-
trols. In practice, a SW comes in the form of a JavaScript file that is
registered against the origin and path of the web page to which it is
associated (only HTTPS origins are allowed to register a SW). In ef-
fect, SW can be viewed as “a programmable network proxy that lets
you control how network requests from your page are handled”[13].
Service Worker can use the Push API[16] to receive messages
from a server, even while the associated web application is not
running. It is worth noting that a single web app is allowed to reg-
ister multiple SWs. Service Workers can also use the Notifications
API[14] to display system notifications to the user. A prerequisite
is that the web application must first request permission to dis-
play notifications to the user (only allowed for HTTPS origins).
If the user accepts (i.e., clicks on “Allow” instead of “Block” on
the notification request popup) to receive notifications from the
web application’s origin, this permission persists across browser
restarts, and until the user explicitly revokes the permission via
browser settings/preferences (notice that non-expert users may
find it difficult to understand, find, and disable notifications in the
browser’s settings).
Web notification messages have a number of customizable param-
eters, such as title, body, target URL, icon image, display image and
action buttons. The user can interact with a notification by either
725
When Push Comes to Ads:
Measuring the Rise of (Malicious) Push Advertising
IMC ’20, October 27–29, 2020, Virtual Event, USA
Figure 1: Example of malicious advertisement served through web push notifications
clicking on it, closing it or performing any custom actions displayed
in the notification message. SW can listen to such user events and
take action according to the input. This includes loading target URL
on a separate tab, following a user’s click on the notification box.
Firebase Cloud Messaging (FCM): FCM is a cross-platform mes-
saging solution for Push Notifications. It can serve as a central
authority that mediates the communication between the ad server
and the Service Worker. Upon initial registration, FCM creates a
unique registration ID per user and per Service Worker, which is
sent along with an endpoint URL [12] to the ad server. For further
details, refer to FCM’s online documentation [33].
3 SYSTEM OVERVIEW
In this section, we provide an overview of how PushAdMiner
works, leaving a detailed description of the main system’s com-
ponents to Sections 4 and 5. A high-level representation of the
system is provided in Figure 2.
PushAdMiner consists of three main components: (i) an instru-
mented browser to collect fine-grained information about SWs and
WPNs; (ii) a custom crawler that automatically visits sites and inter-
acts with the browser, including granting notification permissions
and interacting with WPNs (Section 4); and (iii) a data analysis
component aimed at identifying WPN-based ad campaigns and
labeling likely malicious ones (Section 5).
While a number of browser automation and crawling systems
have been proposed, including Selenium [53], Puppeteer [32], and
others [36, 39, 58], currently they do not fully support the automatic
user interactions with WPNs and collection of all details about SWs
needed for our study. We therefore built an instrumented browser
based on Google Chromium, by significantly extending existing
open-source Chromium instrumentations [39, 58]. In addition, we
leveraged Puppeteer [32] for browser automation and event logging,
and wrote custom scripts to record SW registrations and network re-
quests. Figure 2 presents an overview of how PushAdMiner collects
information about WPNs, and how the browser logs are analyzed
to identify ad campaigns in general and discover malicious ones