title:Modelling after-the-fact leakage for key exchange
author:Janaka Alawatugoda and
Douglas Stebila and
Colin Boyd
Modelling After-the-fact Leakage for Key Exchange
Janaka Alawatugoda1, Douglas Stebila1,2
1 Electrical Engineering and Computer Science
Colin Boyd
Department of Telematics
2 Mathematical Sciences
Queensland University of Technology
Brisbane, Australia
{janaka.alawatugoda,stebila}@qut.edu.au
Norwegian University of Science and Technology
Trondheim, Norway
PI:EMAIL
ABSTRACT
Security models for two-party authenticated key exchange
(AKE) protocols have developed over time to prove the se-
curity of AKE protocols even when the adversary learns
certain secret values. In this work, we address more granular
leakage: partial leakage of long-term secrets of protocol prin-
cipals, even after the session key is established. We introduce
a generic key exchange security model, which can be instanti-
ated allowing bounded or continuous leakage, even when the
adversary learns certain ephemeral secrets or session keys.
Our model is the strongest known partial-leakage-based secu-
rity model for key exchange protocols. We propose a generic
construction of a two-pass leakage-resilient key exchange pro-
tocol that is secure in the proposed model, by introducing a
new concept: the leakage-resilient NAXOS trick. We iden-
tify a special property for public-key cryptosystems: pair
generation indistinguishability, and show how to obtain the
leakage-resilient NAXOS trick from a pair generation indis-
tinguishable leakage-resilient public-key cryptosystem.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Key Ex-
change Protocols; E.3 [Data Encryption]: Public Key
Cryptography
Keywords
key exchange protocols; side-channel attacks; security models;
leakage-resilient; after-the-fact; NAXOS
1.
INTRODUCTION
In order to capture leakage (side-channel) attacks in cryp-
tography, the notion of leakage resilience has been devel-
oped. Examples of information which may leak and so allow
side-channel attacks include timing information [5, 8, 23],
electromagnetic radiation [19], and power consumption [27].
Leakage may reveal partial information about the secret pa-
rameters which have been used for computations in cryptosys-
Permission to make digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage and that copies bear this notice 
and the full citation on the first page. Copyrights for components of this work 
owned  by  others  than  ACM  must  be  honored.  Abstracting  with  credit  is 
permitted. To copy otherwise, or republish, to post on servers or to redistribute 
to  lists,  requires  prior  specific  permission  and/or  a  fee.  Request  permissions 
from permissions@acm.org. 
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan. 
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590317.
tems. To abstractly model leakage attacks, cryptographers
have proposed the notion of leakage-resilient cryptography [1,
3, 7, 16, 17, 21, 20, 26], where the information that leaks is
not ﬁxed, but instead chosen adversarially. As key exchange
protocols are among the most widely used cryptographic
protocols, it is important to analyze their leakage resilience.
Earlier key exchange security models, such as the Bellare–
Rogaway [4], Canetti–Krawczyk [9], and extended Canetti–
Krawczyk (eCK) [25] models, aim to capture security against
an adversary who can fully compromise some, but not all,
secret values. This is not a very granular form of leakage,
and thus is not suitable for modelling side-channel attacks
enabled by partial leakage of secret keys. This motivates
the development of leakage-resilient key exchange security
models [3, 12, 29, 32].
Previous key exchange models including leakage have been
limited in one or more ways. In most of the proposed models
[3, 12, 29] the total amount of leakage allowed is bounded,
which is troublesome because a protocol may reveal a limited
amount of leakage each time it runs, and hence reveal “con-
tinuous” leakage. In addition, the adversary cannot obtain
any leakage information after the session key is established
for the session which the adversary targets for its attack.
This is problematic because it does not address the security
of one session, even if some leakage happens in subsequent
sessions. A recent paper [32] uses a diﬀerent leakage model
with allows auxiliary input [13] but this cannot be directly
compared with other leakage models. Although this model
allows the adversary to make leakage queries on the complete
secret, the values returned to the adversary are limited to
those which are hard to invert and therefore are of limited
use to the adversary. Our aim is to accommodate all the
common leakage resistance models. We do not consider the
auxiliary input model here.
In this paper, we construct a generic leakage-security model
for key exchange protocols, which can be instantiated as a
bounded leakage variant as well as a continuous leakage
variant. In the bounded leakage variant, the total amount
of leakage is bounded, whereas in the continuous leakage
variant, a protocol execution may reveal a small amount
of leakage each time. Further, the adversary is allowed to
obtain the leakage even after the session key is established
for the session, in which the adversary tries to distinguish the
real session key from a random session key. We emphasize
that the leakage functions are arbitrary polynomial time
functions. Thus, our approach allows after-the-fact leakage
in bounded or continuous leakage model. We now review the
207Security Model
Monolithic Leakage Queries
Session Key
Long-term Key
Ephemeral Key
Partial Leakage Queries
Leakage Model After-the-fact
eCK [25]
MO [29]
BAFL-eCK (Section 3.3)
CAFL-eCK (Section 3.4)
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
None
Bounded
Bounded
Continuous
No
No
Yes
Yes
Table 1: Key exchange security models with reveal queries and leakage allowed
various approaches to modelling leakage, and then describe
our contributions.
1.1 Leakage Models
Inspired by “cold boot” attacks, Akavia, Goldwasser and
Vaikuntanathan [1] constructed a general framework to model
memory attacks for public-key cryptosystems. With the
knowledge of the public key, the adversary can choose an
eﬃciently computable arbitrary leakage function, f and send
it to the leakage oracle. The leakage oracle returns f (sk) to
the adversary where sk is the secret key. The only restriction
here is that the sum of output length of all the leakage
functions that an adversary can obtain is bounded by some
parameter λ which is smaller than the size of sk.
In the work of Micali and Reyzin [28], a general frame-
work was introduced to model the leakage that occurs during
computation with secret parameters. This framework relies
on the assumption that only computation leaks information.
They mentioned that leakage only occurs from the secret
memory portions which are actively involved in a compu-
tation. The adversary is allowed to obtain leakage from
many computations, therefore the overall leakage amount is
unbounded and in particular it can be larger than the size of
the secret-key. Zvika et al. [7] proposed a continual memory
leakage model in which it is not assumed that the information
is only leaked from the secret memory portions involved in
computations. Instead it is assumed that leakage happens
from the entire secret memory but the amount of leakage is
bounded per occurrence. This model allows the adversary to
obtain arbitrarily large amounts of leakage information.
1.2 After-the-fact Leakage
Leakage which happens after the challenge is given to the
adversary is considered as after-the-fact leakage. In security
experiments for public-key cryptosystems, the challenge to
the adversary is to distinguish the real plaintext correspond-
ing to a particular ciphertext from a random plaintext. In
key exchange security models, the challenge to the adversary
is to identify the real session key of a chosen session from a
random session key [4, 9, 25]. In leakage models for public-
key cryptosystems, after-the-fact leakage is the leakage which
happens after the challenge ciphertext is given whereas in
leakage-resilient key exchange security models, after-the-fact
leakage is the leakage which happens after the session key is
established.
For leakage-resilient public-key encryption there are three
properties which may be important diﬀerentiators for the
diﬀerent models. One is whether the model allows access to
decryption of chosen ciphertexts before (CCA1) and after
(CCA2) the challenge is known. The second is whether the
leakage allowed to the adversary is continuous or bounded.
The third is whether the leakage is allowed only before the
challenge ciphertext is known or also after the fact.
In
earlier models, such as that of Naor and Segev [30], it was
expected that although the adversary is given access to the
decryption oracle (CCA2), the adversary cannot be allowed
to obtain leakage after the challenge ciphertext is given. This
is because the adversary can encode the decryption algorithm
and challenge ciphertext with the leakage function and by
revealing a few bits of the decrypted value of the challenge
ciphertext trivially win the challenge. Subsequently, Halevi
et al. [18] introduced after-the-fact leakage-resilient semantic
security (CPLA2) on public-key cryptosystems.
In their
security experiment, the adversary is not allowed to access
the decryption oracle. Dziembowski et al. [15] deﬁned an
adaptively chosen ciphertext after-the-fact leakage (CCLA2)
in which the adversary is allowed to access the decryption
oracle adaptively and obtain leakage information even after
the challenge ciphertext is given. Furthermore, they allow
continuous leakage, so the total leakage amount is unbounded.
Recall that in key exchange security models, the challenge
to the adversary is to distinguish the real session key of a
chosen session from a random session key. In the previous
leakage-resilient key exchange security models [29, 3], the
adversary is not allowed to obtain leakage after the session
key is established, because if the adversary gets the ephemeral
secret key of the owner by ephemeral key reveal query, the
adversary can encode the speciﬁcation of the key derivation
function with the ephemeral secret key and other public keys
into the leakage function. This reveals some information
about the session key allowing the adversary to successfully
answer the challenge.
In the literature there are no key
exchange protocols or security models available that allow
leakage after the session key is established.
1.3 Our Contribution
We propose a generic eCK-style security model, which ad-
ditionally allows partial leakage of long-term secret keys of
protocol principals, even after the session key is established.
We choose to build on the eCK model because it is a widely
used security model capturing a wide variety of possible at-
tacks such as key compromise impersonation attacks, weak
forward secrecy, and unknown key share attacks. Our generic
model can be instantiated in two diﬀerent ways. The instan-
tiations of the generic model diﬀer in the extent to which
the adversary can obtain the leakage of long-term keys in a
bounded amount or obtain continuous leakage such that a
protocol execution may reveal a small amount of leakage each
time, and still expect security. Thus, we begin by presenting
the after-the-fact leakage eCK model ((·)AFL-eCK model),
where leakage is modelled using the output of a tuple leakage
function f such that f = (f1, f2, . . . , fn). Introducing a tuple
leakage function allows us to address the leakage of diﬀerent
protocol constructions, such as protocols constructed using
stateful cryptographic primitives, or using more than one
208Protocol
Initiator Cost Responder Cost
Security Model
Partial Leakage Resilience
Leakage Model
After-the-fact
NAXOS [25]
MO [29]
π
4 Exp
8 Exp
12 Exp
4 Exp
8 Exp
12 Exp
eCK
MO
BAFL-eCK
None
Bounded
Bounded
None
No
Yes
Table 2: Security and eﬃciency comparison of key exchange protocols
cryptographic primitive, or both. Table 1 shows a clear
picture of our contribution.
We introduce a new property for public-key cryptosystems,
which states that any randomly chosen ciphertext should be
decrypted without rejection. The new property is named
pair generation indistinguishability (PG-IND) and is deﬁned
in Deﬁnition 7. We demonstrate the use of PG-IND property
in leakage-resilient NAXOS trick computation, which we
introduce as the key idea of constructing (·)AFL-eCK-secure
key exchange protocols. We then construct a generic protocol
π, which can be proven secure in the generic (·)AFL-eCK
model. The protocol π is a key-agreement-style protocol
which relies on two primitives: (1) a public-key cryptosystem
that is PG-IND and after-the-fact leakage-resilient seman-
tically secure (CPLA2); and (2) an unforgeable signature
scheme against chosen message leakage attacks (UFCMLA).
Whenever both of these two primitives are proven secure in
either the bounded leakage model or the continuous leakage
model, the instantiation of the protocol π is secure in the
BAFL-eCK model or CAFL-eCK model respectively.
In Table 2, we compare an instantiation of the proposed
generic protocol, π, with the NAXOS [25] and the Moriyama-
Okamoto (MO) [29] protocols. The protocol π is instantiated
using the CPLA2-secure, 0-PG-IND public-key cryptosystem
of Halevi et al. [18], and UFCMLA-secure signature scheme of
Katz et al. [20], in the bounded leakage model. The instanti-
ation of the generic protocol π is BAFL-eCK-secure, and pro-
vides signiﬁcant leakage resilience for practically achievable
computation costs. We could not instantiate a CAFL-eCK-
secure protocol π, because we do not have a CPLA2-secure,
PG-IND public-key cryptosystem in the continuous leakage
model. Halevi et al.[18] emphasized that adjusting their
scheme to be CPLA2-secure in the continuous leakage model
is an open problem. There are UFCMLA-secure signature
schemes in the continuous leakage model [26, 12, 7]. So once
CPLA2-secure, PG-IND public-key cryptosystem is available
in the continuous leakage model, CAFL-eCK-secure π can
be instantiated. Thus, the generic protocol π is a viable
framework for (·)AFL-eCK-secure protocols, and can achieve
the leakage tolerance which the underlying schemes provide
in the bounded or the continuous leakage model.
2. PRELIMINARIES
We review the formal security deﬁnitions of cryptographic
primitives which will be used to construct the generic proto-
col.
2.1 UFCMLA-Secure Signature Schemes
We review the deﬁnition of UFCMLA security in the split-
states-model, where the signing key sk is split into arbitrarily
n parts such that sk = (sk1, . . . , skn). The tuple leakage
function f = (f1, . . . , fn) is an adversary chosen eﬃciently
computable adaptive tuple leakage function, which consists
of n arbitrary number of leakage functions. Each leakage
function fi leaks fi(ski) from each ski split of the secret key
individually. Following we consider bounded leakage from
each split.
Deﬁnition 1. (Unforgeability Against Chosen Message Leak-
age Attacks (UFCMLA)). Let k ∈ N be the security pa-
rameter and λ be a vector of n elements. Let SIG =
(KG, Sign, Vfy) be a signature scheme, we deﬁne AdvUFCMLA
(E) as the advantage of any PPT adversary E, winning the