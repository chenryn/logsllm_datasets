key. Typically this session key is used as a key for an SE
scheme. There are a wide variety of key exchange pro-
tocols, but generally they can be deÔ¨Åned via two update
algorithms UpdateClnt and UpdateSrvr run by the client
and server respectively. These take as input an internal
state st, a string msgs describing all the messages sent and
received thus far, and a string of random coins used for
randomness. We write UpdateClnt(st, msgs ; R) to denote
computing, using randomness R, the next message sent by
the client when its current state is st and all the messages
so far sent and received are encoded in msgs. Likewise
we write UpdateSrvr(st, msgs ; R). Then we can simply
apply hedging in the now usual way, by instead running
UpdateClnt(st, msgs ; Hedge(R, AlgID, st, msgs))
and
similarly modify UpdateSrvr to use hedged randomness.
To make this concrete, we give the hedged RSA key
transport and authenticated DifÔ¨Åe-Hellman key exchange
protocols used in TLS and elsewhere. See Figure 7 for a
(slightly simpliÔ¨Åed) explanation of the protocols. In RSA
key transport, the client uses a server‚Äôs public key to encrypt
a secret value R‚Ä≤
1 that is used as the secret material to derive
a session key. In DifÔ¨Åe-Hellman the session key is chosen
as a combination of randomness chosen by both the client
and the server. The server‚Äôs contribution is signed using a
DS scheme. Note that for brevity we do not show hedging
of the (random) nonces used in these protocols, nor do we
show hedging of the encryption and signing operations.
Security deÔ¨Ånitions for key exchange are complex (e.g.,
see [24, 27, 39]), and extending existing deÔ¨Ånitions to
model randomness failures is a considerable topic of its
own. We leave it to future work. That said, we can make
several meaningful statements about security. First, hedg-
ing does not hinder meeting traditional goals here as per
the discussion in Section 6.1. Second, hedging ensures that
key transport will not send the same session key to dif-
ferent servers, meaning in particular a hedged TLS client
from Section 3 will never send the same PMS to different
servers. (For the server attack, hedging DSA already pro-
tects from extraction of the secret key.)
7. Implementing Hedging in OpenSSL
We report on a case study of implementing hedging
within the OpenSSL code base. This implementation con-
sists of a cryptographic tools library (the OpenSSL crypto
library), and a TLS library (the OpenSSL ssl library). The
former is widely used within security applications beyond
TLS, and so hedging it can have far-reaching consequence.
Besides hedging an important code base, this case study will
allow us to evaluate the performance impact of hedging in-
use cryptographic tools. Looking ahead, hedging appears to
have little performance impact for numerous operations and
usage scenarios. This case study indicates that many cryp-
tographic deployments can easily support hedging, motivat-
ing the adoption of hedging to protect against unforeseen
RNG failures.
Client
Server
R‚Ä≤
1 ‚Üê Hedge(R1, 0, Nc, Ns, certe)
C ‚Üê Enc(pke, R‚Ä≤
1 ; R2)
K = H(Nc || Ns || R‚Ä≤
1)
Client
x ‚Üê Hedge(R3, 1, Nc, Ns, certs, gy, œÉ)
X ‚Üê gx
K = H(Nc || Ns || X, Y, Y x)
Nc
Ns, certe

C
-
-
Nc
-
Ns, certs, Y, œÉ

gx
-
R‚Ä≤
1 ‚Üê Dec(ske, C)
K = H(Nc || Ns || R‚Ä≤
1)
Server
y ‚Üê Hedge(R1, 2, Nc) ; Y ‚Üê gy
œÉ ‚Üê Sign(sks, Y ; R2)
K = H(Nc || Ns || X, Y, X y)
Figure 7. Hedging (top) RSA key transport and (bottom) signed DifÔ¨Åe(cid:173)Hellman authenticated key
exchange. We use Nc, Ns to denote nonces and R1, R2, R3 to denote RNG(cid:173)derived randomness.
Application of Hedge includes numbers 0,1,2 as stand(cid:173)ins for unique algorithm identiÔ¨Åers. (Top) The
server has a certiÔ¨Åcate certe for a PKE scheme with keys (pke, ske). The client checks this certiÔ¨Åcate,
(Bottom) The server has a certiÔ¨Åcate certs for a DS scheme with keys
aborting if the check fails.
(pks, sks). The client checks the certiÔ¨Åcate and signature œÉ, aborting if either fails.
Our starting point was the current stable version of
OpenSSL at the time of writing, version 0.9.8k. We hedged
the most commonly utilized operations: RSA public-
key encryption with PKCS#1 v1.5 randomized padding,
RSA OAEP public-key encryption, DSA signing, and the
ephemeral DifÔ¨Åe-Hellman (DHE) key exchange client and
server. The Ô¨Årst three operations involved only modify-
ing code within the crypto library while the key exchange
code is in the ssl library. Note that TLS 1.0 only uses
stateful symmetric encryption and as such this version of
OpenSSL does not implement randomized symmetric en-
cryption primitives1. Future work could evaluate the hedg-
ing of symmetric encryption primitives in TLS 1.1 or 1.2
or in other tools, also comparing them to custom solutions
proposed by [48]. (These solutions will likely be included
in future versions of TLS.)
Our hedged version of OpenSSL 0.9.8k will be referred
to as ‚Äúhedged‚Äù, while ‚Äúplain‚Äù refers to the original, unmod-
iÔ¨Åed OpenSSL 0.9.8k. We used the cloc utility for counting
lines of code [5] to get a sense of the scale of modiÔ¨Åca-
tions due to hedging. The hedged ssl library added 45 more
physical lines of code and the hedged crypto library had 728
more physical lines of code.
In the following we use two machine conÔ¨Ågurations for
benchmarking. Our server system is a Pentium 4 2.0 GHz
1For example, the CBC block cipher mode of TLS 1.0 does in fact uti-
lize a randomized IV, but it is generated only once per session during key
exchange. Further packets are encrypted using as IV the last block of the
previous ciphertext. So in this version of TLS, hedging key exchange ef-
fectively hedges the symmetric encryption routines as much as is possible.
For further details see [8] and [41].
with 1 GB of RAM running Ubuntu Linux 8.04 Server. It
ran Apache 2.2.13 with mod ssl built from either the hedged
OpenSSL or plain OpenSSL library, with both RSA and
DSA keys setup, and all other options set to their defaults.
We recompiled Apache when switching between libraries.
Our client systems are Dual Pentium 4 3.20 GHz systems
with 1 GB of RAM running Ubuntu Linux 8.04 Desktop.
Performance of Hedge implementations. Recall that
Hedge makes black-box use of HMAC, which in turn uses
an underlying hash function. We investigate three natu-
ral choices for this hash function: SHA-1, SHA-256, and
SHA-512. Recent attacks [49] mean SHA-1 is no longer
considered secure. We do not recommend its use but in-
clude it for the sake of comparison. New hash functions are
being designed for an eventual SHA-3 standard [2]; one can
easily upgrade Hedge to use newer hash functions.
We Ô¨Årst report on a na¬®ƒ±ve implementation of Hedge that
simply iterates HMAC a sufÔ¨Åcient number of times follow-
ing the description in Section 5. The left graph in Figure 8
depicts the performance of this implementation when us-
ing each of the hash functions and when requesting vari-
ous amounts of random bytes. The benchmarks were per-
formed on one of the client machines. The amount of asso-
ciated data was set to 3,000 bytes. (The primitives we hedge
never supply more than this amount of associated data for
standard key lengths.) As expected, SHA-1 is the fastest.
SHA-256 provides little performance beneÔ¨Åt over SHA-512
for small output lengths and is signiÔ¨Åcantly slower as output
length increases. This is because SHA-512 generates more
output per iteration.
1
256
512
)
s
¬µ
(
e
m
i
t
n
a
i
d
e
M
1000
900
800
700
600
500
400
300
200
100
0
1
256
512
)
s
¬µ
(
e
m
i
t
n
a
i
d
e
M
120
100
80
60
40
20
0
16
100
200
300
400
512
16
100
200
300
400
512
# bytes requested
# bytes requested
Figure 8. Comparison of Hedge implementations when requesting various numbers of random bytes
and including 3,000 bytes of associated data and using SHA(cid:173)x for x ‚àà {1, 256, 512}. Time is median
of 1,000 executions after 100 untimed executions. (Left) A na¬®ƒ±ve implementation that iterates HMAC
for each extra block of output needed. (Right) An implementation that reuses internal HMAC state
between iterations.
As the length of output increases, performance severely
degrades. We can speed up the implementation with a sim-
ple optimization. Note that when executing Hedge all the
input to HMAC modulo the iteration counter remains the
same for each application of HMAC. Thus we modify the
HMAC code to allow computing it up through all of the
common values once, and then Ô¨Ånishing the computation
for each iteration separately. The right graph in Figure 8
depicts the performance of this implementation. (The out-
liers in the lower left corner were due to unrelated system
activity.) As can be seen the improvement is large, and so
we utilize this latter implementation for the rest of our tests.
We recommend SHA-512 for greatest security and uti-
lize it for all further benchmarks. Of course, we again em-
phasize that any user deploying hedging can utilize any (se-
cure) hash function they desire.
Performance of asymmetric primitives. We measure
the performance overhead of hedging speciÔ¨Åc asymmetric
cryptographic operations: RSA encryption with PKCS#1
v1.5 randomized padding, RSA encryption with OAEP
padding, DSA signing, and ephemeral DifÔ¨Åe-Hellman key
generation (used in key exchange). For brevity we refer
to these operations at PKCS#1, OAEP, DSA, and DHE.
Figure 9 shows the results of timing 1,000 repetitions of
each operation either without hedging (‚ÄúPlain‚Äù) or with
hedging (‚ÄúHedged‚Äù). For both, we always performed an
additional 100 repetitions before the 1,000 measured itera-
tions. (This lowered variability in standard deviations.) As
one might expect, the overhead due to hedging decreases
quickly with increased key size (and, thereby, running time)
of the underlying operation. The largest overheads are
for client-side operations such as PKCS#1 and OAEP with
1024 bit keys. PKCS#1 has slightly worse performance be-
cause one needs to generate more randomness compared
to OAEP. The typical server-side operations (where perfor-
mance tends to matter most) of DSA and DHE have low
overhead.
TLS handshake performance. The microbenchmarks
just given suggest that performance of individual OpenSSL
handshakes will not be degraded signiÔ¨Åcantly. To be sure,
we measured the time for a client to open a TLS connection
with a remote server. Figure 10 reports the results for do-
ing so with both plain TLS and hedged TLS (both the client
and server using hedged operations). Here AES128-SHA
refers to key exchange using RSA PKCS#1 encryption with
1024-bit RSA keys, DHE-RSA-AES128-SHA refers to key
exchange using 1024-bit ephemeral DifÔ¨Åe-Hellman with
RSA signing, and DHE-DSS-AES128-SHA refers to key
exchange using 1024-bit ephemeral DifÔ¨Åe-Hellman with
DSA signing.
(AES128-SHA sufÔ¨Åxes refers to the sym-
metric encryption mechanism, which does not affect these
timings.) As expected, there is no discernible difference be-
tween plain times and hedged times.
Server overhead.
Individual connections are not slowed
down by hedging, but it could be that the extra CPU
costs due to hedging signiÔ¨Åcantly burdens heavily loaded
servers. We measure average throughput of our Apache
HTTPS server when built against plain OpenSSL and
against hedged OpenSSL. Note that only the two DifÔ¨Åe-
Hellman key exchange protocols have server-side hedging,
and so we report only on these. Figure 11 depicts the results
of saturating the server with HTTPS requests for a 44-byte
HTML Ô¨Åle. To perform this experiment, we setup two client
Plain time (¬µs)
Hedged time (¬µs)
Operation
PKCS#1 1024
PKCS#1 2048
PKCS#1 4096
OAEP 1024
OAEP 2048
OAEP 4096
DSA 1024
DSA 2048
EDH 1024
140 (138,141,556,13)
415 (412,417,720,20)
140 (139,140,189,2)
410 (409,412,646,10)
1589 (1580,1591,1836,18)
1686 (1678,1694,1919,31)
Median (Min,Mean,Max,Std. Dev) Median (Min,Mean,Max,Std. Dev) Ratio
1.32
1.15
1.06
1.28
1.11
1.03
1.08
1.03
1.01
1632 (1625,1634,1887,19)
1426 (1381,1429,1682,27)
4156 (4026,4164,4738,68)
8002 (7976,8010,8656,56)
1579 (1572,1581,1804,18)
1324 (1264,1325,1576,23)
4025 (3898,4027,4441,55)
7937 (7910,7948,8616,60)
185 (183,186,301,6)
478 (476,483,722,19)
179 (178,179,254,3)
457 (455,458,673,12)