::: itemizedlist
-   为了保持与 MBR 磁盘的向后兼容性，GPT 的第一个扇区(LBA 0)被保留给 MBR
    数据，它称为\"保护的 MBR\"。
-   主 GPT 头从设备的第二个逻辑块(LBA 1)开始。标头中包含磁盘
    GUID、主分区表的位置、从属 GPT 标头的位置、自身的 CRC32 checksum
    以及主分区表。它还指定表上的分区条目数目。
-   默认情况下，主 GPT 包括 128 个分区条目，每个条目的大小为 128
    字节，具有分区类型 GUID 和唯一分区 GUID。
-   二级 GPT 与主 GPT 相同。它主要用作恢复的备份表，以防主分区表损坏。
-   辅助 GPT 头位于磁盘的最后一个逻辑扇区，在主头损坏时可用于恢复 GPT
    信息。它包含磁盘 GUID、二级分区表和主 GPT 标头的位置、自身的 CRC32
    checksums 校验、从属分区表，以及可能的分区条目数目。
:::
::: figure
[]{#assembly_creating-a-partition-table-on-a-disk_managing-file-systems.html#idm139895478197536}
**图 15.4. 带有 GUID 分区表的磁盘**
::: figure-contents
::: mediaobject
![GPT 分区](images/gpt-partition.png)
:::
:::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
必须有一个 BIOS 引导分区才能成功安装引导装载程序到包含 GPT（GUID
分区表）的磁盘中。这包括 [**Anaconda**]{.strong}
初始化的磁盘。如果磁盘已经包含 BIOS 引导分区，则它可以被重复使用。
:::
:::
::: section
::: titlepage
# []{#assembly_creating-a-partition-table-on-a-disk_managing-file-systems.html#proc_creating-a-partition-table-on-a-disk-with-parted_assembly_creating-a-partition-table-on-a-disk}使用 parted 在磁盘中创建分区表 {.title}
:::
这个流程描述了如何使用 `parted`{.literal}
工具将块设备格式化为具有分区表。
::: orderedlist
**流程**
1.  启动交互式 `parted`{.literal} shell：
    ``` screen
    # parted block-device
    ```
    ::: itemizedlist
    -   使用您要创建分区表的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis} ：例如
        `/dev/sda`{.literal}。
    :::
2.  确定该设备中是否已有一个分区表：
    ``` screen
    (parted) print
    ```
    如果设备已经包含分区，将在后续步骤中删除它们。
3.  创建新分区表：
    ``` screen
    (parted) mklabel table-type
    ```
    ::: itemizedlist
    -   用预期的分区表类型来替换
        [*[table-type]{.replaceable}*]{.emphasis}：
        ::: itemizedlist
        -   用于的 MBR 的 `msdos`{.literal}
        -   用于 GPT 的 `gpt`{.literal}
        :::
    :::
    ::: example
    []{#assembly_creating-a-partition-table-on-a-disk_managing-file-systems.html#idm139895581689424}
    **例 15.1. 创建 GPT 表**
    ::: example-contents
    例如，要在磁盘中创建 GPT 表，请使用：
    ``` screen
    (parted) mklabel gpt
    ```
    :::
    :::
    输入此命令后，这些更改就会生效，因此在执行前请先重新检查。
4.  查看分区表以确认分区表是否存在：
    ``` screen
    (parted) print
    ```
5.  退出 `parted`{.literal} shell:
    ``` screen
    (parted) quit
    ```
:::
::: itemizedlist
**其他资源**
-   `parted(8)`{.literal} 手册页。
:::
:::
:::
[]{#assembly_creating-a-partition_managing-file-systems.html}
::: chapter
::: titlepage
# []{#assembly_creating-a-partition_managing-file-systems.html#assembly_creating-a-partition_managing-file-systems}第 16 章 创建分区 {.title}
:::
作为系统管理员，您可以在磁盘上创建新分区。
::: section
::: titlepage
# []{#assembly_creating-a-partition_managing-file-systems.html#con_considerations-before-modifying-partitions-on-a-disk_assembly_creating-a-partition}修改磁盘分区前的注意事项 {.title}
:::
本节列出了在创建、删除或重新定义分区大小前需要考虑的关键点。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本节不涵盖 DASD 分区表，它特定于 IBM Z 构架。有关 DASD 的详情请参考：
::: itemizedlist
-   [在 IBM Z 中配置 Linux
    实例](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/performing_a_standard_rhel_installation/configuring-a-linux-instance-on-ibm-z_installing-rhel){.link}
-   IBM 知识库中的 [您应该知道的有关 DASD
    的内容](https://www.ibm.com/support/knowledgecenter/linuxonibm/com.ibm.linux.z.lgdd/lgdd_c_dasd_know.html){.link}
    的文章
:::
:::
### []{#assembly_creating-a-partition_managing-file-systems.html#_the_maximum_number_of_partitions_2}分区的最大数量
设备中的分区数量受分区表类型的限制：
::: itemizedlist
-   在使用 [**主引导记录(MBR)**]{.strong}
    分区表格式化的设备上，您可以有：
    ::: itemizedlist
    -   最多四个主分区，或者
    -   最多有三个主分区，以及一个扩展分区，其中包括多个逻辑分区。
    :::
-   在使用 [**GUID 分区表(GPT)**]{.strong}
    格式化的设备上，最大的分区数为 128。尽管 GPT
    规范通过增大为分区表保留的空间来允许更多的分区，但
    `parted`{.literal} 工具的常用的做法是将其限制为足够容纳 128
    个分区的空间。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
红帽建议，除非有其他原因，否则 [*至少*]{.emphasis} 要创建以下分区：
`swap`{.literal}、`/boot/`{.literal} 和 `/`{.literal} (root)。
:::
### []{#assembly_creating-a-partition_managing-file-systems.html#_the_maximum_size_of_a_partition_2}分区的最大大小
设备中的分区大小受分区表类型的限制：
::: itemizedlist
-   在使用[**主引导记录（MBR）**]{.strong}
    分区表格式化的设备中，最大值为 2TiB。
-   在使用 [**GUID 分区表(GPT)**]{.strong} 格式化的设备上，最大大小为
    8ZiB。
:::
如果要创建一个大于 2TiB 的分区，该磁盘必须使用 GPT 格式化。
### []{#assembly_creating-a-partition_managing-file-systems.html#_size_alignment_2}大小协调
`parted`{.literal} 工具可让您使用多个不同的后缀来指定分区的大小：
::: variablelist
[MiB、GiB 或 TiB]{.term}
:   大小为 2 的指数代表。
    ::: itemizedlist
    -   分区的起点与根据大小指定的扇区一致。
    -   结束点与指定大小减 1 扇区一致。
    :::
[MB、GB 或 TB]{.term}
:   以 10 的指数表示容量。
    起始和结束点在指定单元的一半内一致：例如,使用 MB 后缀时 ±500KB。
:::
:::
::: section
::: titlepage
# []{#assembly_creating-a-partition_managing-file-systems.html#con_partition-types_assembly_creating-a-partition}分区类型 {.title}
:::
本节描述了指定分区类型的不同属性。
### []{#assembly_creating-a-partition_managing-file-systems.html#_partition_types_or_flags}分区类型或标志
正在运行的系统很少使用分区类型或标志。但是，分区类型与动态生成器有关，例如
`systemd-gpt-auto-generator`{.literal}，其使用分区类型来自动识别和挂载设备。
::: itemizedlist
-   `parted`{.literal} 工具通过将分区类型映射到 [*标志*]{.emphasis}
    来提供对分区类型的一些控制。parted 工具只能处理某些分区类型：例如
    LVM、swap 或 RAID。
-   `fdisk`{.literal} 工具通过指定十六进制代码来支持所有的分区类型。
:::
### []{#assembly_creating-a-partition_managing-file-systems.html#_partition_file_system_type}分区文件系统类型
`parted`{.literal} 工具在创建分区时接受文件系统类型参数。该值用于：
::: itemizedlist
-   在 MBR 中设定分区标记，或者
-   在 GPT 中设定分区 UUID 类型。例如，`swap`{.literal}、`fat`{.literal}
    或 `hfs`{.literal} 文件系统类型设置不同的 GUID。默认值为 Linux Data
    GUID。
:::
参数不会以任何形式修改分区中的文件系统。它只区分受支持的标志或 GUID。
支持以下文件系统类型：
::: itemizedlist
-   `xfs`{.literal}
-   `ext2`{.literal}
-   `ext3`{.literal}
-   `ext4`{.literal}
-   `fat16`{.literal}
-   `fat32`{.literal}
-   `hfs`{.literal}
-   `hfs+`{.literal}
-   `linux-swap`{.literal}
-   `ntfs`{.literal}
-   `reiserfs`{.literal}
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
RHEL 9 中唯一支持的本地文件系统是 `ext4`{.literal} 和 `xfs`{.literal}。
:::
:::
::: section
::: titlepage
# []{#assembly_creating-a-partition_managing-file-systems.html#partition-naming-scheme_assembly_creating-a-partition}分区命名方案 {.title}
:::
Red Hat Enterprise Linux 使用基于文件的命名方案，其文件名采用
`/dev/xxyN`{.literal} 的形式。
设备和分区名称由以下结构组成：
::: variablelist
[`/dev/`{.literal}]{.term}
:   这是所有设备文件所在的目录名称。由于分区放置在硬盘上，而硬盘就是设备，因此代表所有可能分区的文件位于
    `/dev`{.literal} 中。
[`xx`{.literal}]{.term}
:   分区名称的前两个字母表示分区所在的设备的类型，通常是
    `sd`{.literal}。
[`y`{.literal}]{.term}
:   这个字母标明分区所在的设备。例如，第一个硬盘为
    `/dev/sda`{.literal}，第二个硬盘为
    `/dev/sdb`{.literal}，以此类推。在超过 26
    个驱动器的系统中，您可以使用更多字母。例如：
    `/dev/sdaa1`{.literal}。
[`N`{.literal}]{.term}
:   最后的字母代表分区的数字。前四个（主或扩展）分区编号为 `1`{.literal}
    到 `4`{.literal}。逻辑分区从 `5`{.literal}
    开始。例如，`/dev/sda3`{.literal}
    是第一个硬盘上的第三个主分区或扩展分区，`/dev/sdb6`{.literal}
    是第二个硬盘上的第二个逻辑分区。驱动器分区编号只适用于 MBR
    分区表。请注意，[**[*N*]{.emphasis}**]{.strong} 并不总是意味着分区。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
即使 Red Hat Enterprise Linux 可以识别和引用
[*所有*]{.emphasis}类型的磁盘分区，它可能无法读取文件系统，因此无法访问分区类型中保存的数据。然而，在很多情况下，成功访问专用于另一个操作系统的分区中的数据是可能的。
:::
:::
::: section
::: titlepage
# []{#assembly_creating-a-partition_managing-file-systems.html#mount-points-and-disk-partitions_assembly_creating-a-partition}挂载点和磁盘分区 {.title}
:::
在 Red Hat Enterprise Linux
中，每个分区都被用来成为支持一组文件和目录所必需的存储的一部分。这可使用名为
[*mounting*]{.emphasis}
的进程完成，该进程可将分区和目录相关联。挂载分区使其存储从指定的目录(称为
[*挂载点*]{.emphasis} )开始可用。
例如，如果分区 `/dev/sda5`{.literal} 挂载在 `/usr/`{.literal}
上，这意味着 `/usr/`{.literal} 下的所有文件和目录都在
`/dev/sda5`{.literal} 上。因此，文件
`/usr/share/doc/FAQ/txt/Linux-FAQ`{.literal} 将存储在
`/dev/sda5`{.literal} 上，而文件 `/etc/gdm/custom.conf`{.literal}
则不会存储在 /dev/sda5 上。
继续这个示例，也可以将 `/usr/`{.literal}
下的一个或多个目录作为其他分区的挂载点。例如，分区 `/dev/sda7`{.literal}
可以挂载到 `/usr/local`{.literal} 上，意味着
`/usr/local/man/whatis`{.literal} 将位于 `/dev/sda7`{.literal}
上，而不是 `/dev/sda5`{.literal} 上。
:::
::: section
::: titlepage
# []{#assembly_creating-a-partition_managing-file-systems.html#proc_creating-a-partition-with-parted_assembly_creating-a-partition}使用 parted 创建分区 {.title}
:::
这个流程描述了如何使用 `parted`{.literal} 工具在块设备上创建新分区。
::: itemizedlist
**先决条件**
-   磁盘上有一个分区表。有关如何格式化磁盘的详情，请参阅
    [在磁盘上创建分区表](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_file_systems/index#assembly_creating-a-partition-table-on-a-disk_managing-file-systems){.link}。
-   如果您要创建的分区大于 2TiB，则必须使用 GUID
    分区表(GPT)格式化该磁盘。
:::
::: orderedlist
**流程**
1.  启动交互式 `parted`{.literal} shell：
    ``` screen
    # parted block-device
    ```
    ::: itemizedlist
    -   使用您要创建分区的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis} ：例如
        `/dev/sda`{.literal}。
    :::