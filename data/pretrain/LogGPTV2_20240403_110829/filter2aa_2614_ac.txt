■ 
公有型API：此类API主要面向企业外部客户或企业第三方合作
伙伴，向外部提供企业的API服务能力，以业务承载为主。
■ 
私有型API：此类API主要面向企业内部，不面向外部提供服务
能力，具有一定的私密性，以运营管理、内部服务支撑为主。
■ 
混合型API：此类API的服务对象没有明显的限制，兼有企业外
部客户和企业内部应用之间的调用。
对现代API按照服务对象进行不同类型的划分，有利于明确服务对
象和使用范围，为API自身安全性保障要求提供不同级别的防护目标。
2.基于技术形式的类型划分
每一个API都有着不同的技术实现，使用不同的开发语言，或使用
不同的协议标准，基于这些技术形式和技术的普及程度，将现代API划
分为RESTful API、GraphQL API、SOAP API、gRPC API、类XML-
RPC及其他类型API。
■ RESTful API：此类API在技术形式上，以REST风格为主，是当
前业界主流的API技术形式。
■ GraphQL API：此类API采用Facebook提出的GraphQL查询语言
来构建API服务，尤其适用于树状、图状结构数据的使用场景。
■ 
SOAP 
API：即使用SOAP协议作为API接口交互方式的API应
用，以Web Service为代表。
■ gRPC API：此类API采用Google的gRPC框架，通过Protobuf协议
来定义接口和条件约束，完成客户端和服务器端的远程调用。
■ 类XML-RPC及其他类型API：此类API包含多种技术，因使用的
普及率低故将其归类在一起，通常包含XML-RPC的API、JMS（Java
Message Service）接口、WebSocket API以及IoT通信协议的接口等。
基于技术形式的API类型划分带有鲜明的技术特点，它有助于使用
者了解其技术构成和该技术的交互细节，了解该技术形式所带来的特
有的安全特性和安全风险，做出准确的判断和合理的处置。
3.基于使用者的类型划分
不同的API提供不同的业务功能供不同的用户使用，这些使用者可
能是具体的自然人用户，也可能是前端应用程序，还有可能是终端设
备，基于API使用者的不同，现代API可以划分为用户参与型API、程序
调用型API和IoT设备型API。
■ 
用户参与型API：此类API在业务交互过程中，需要自然人用户
参与，比如用户单击操作、与用户身份相关的会话保持、与用户身份相
关的访问控制等。大多数互联网应用中使用的API为此种类型。
■ 
程序调用型API：API调用中，存在某些场景下无自然人用户参
与的情况，仅仅是后端服务或前端应用程序之间的通信处理。这些场景
下的API属于此类型的API。
■ IoT设备型API：除了上述两类API之外，还有一些API仅仅提供
给IoT设备调用，在交互流程上比上述两类要简单，或设备内无法完成
流程，需要离线操作。
基于API的使用者对现代API做类型划分，有助于API设计者和研发
人员梳理交互流程，识别不同场景下适用的安全机制，制定不同的安
全控制策略来提高API服务的安全性。
1.3 现代API常用的协议和消息格式
现代API技术的发展要追溯到23000年，在动态网页技术的推动下，
大量的企业级应用如雨后春笋般涌现，为了满足不同技术栈构建的应用
在架构和开发上能平滑融合和解耦，API技术也得到了快速的发展。
1.3.1 REST成熟度模型
现代API的奠基人Roy Fielding博士在他的论文《架构风格以及基于
网络的软件架构设计》（Architectural Styles and the Design of Network-
based Software Architectures）中第一次提到REST（Representational State
Transfer）概念，其目的是满足现代Web架构的设计与开发的需要；之
后，Leonard Richardson提出“REST成熟度模型”，该模型把REST服务按
照成熟度划分成4个层次。
■ Level 0：Web服务使用HTTP协议作为传输方式，实际上是远程
过程调用（Remote Procedure Call，RPC）的雏形，SOAP和XML-RPC
都属于此类，其表现形式为一个URI，一个HTTP方法。例如：
■ Level 1：Web服务引入了资源的概念，每个资源有对应的标识符
和表述。其表现形式为多个URI，一个HTTP方法。例如：
■ Level 2：Web服务使用不同的HTTP方法来进行不同的操作，并
且使用HTTP状态码来表示不同的结果。如HTTP GET方法来获取资源，
HTTP DELETE方法来删除资源，这是当前使用范围最为广泛的层次。
其表现形式为多个URI，多个HTTP方法。例如：
■ Level 3：Web服务使用HATEOAS，在资源的表述中包含了链接
信息，客户端可以根据链接来发现可以执行的动作。Level 3是比较理想
的层级，但目前实际应用较少。
从“REST成熟度模型”中各个层次的含义来看，目前大多数应用基
本都停留在Level 1、Level 2的层次，所以在后续讨论RESTful API的章
节中，主要是指Level 1、Level 2两个层次。
1.3.2 RESTful API技术
在当前的互联网上，因RESTful API简洁易用，在降低软件开发复
杂度的同时，也提高了软件应用的拓展性，从而占据着主流地位。从
REST成熟度模型来看，表现形式以Level 2为主，一次RESTful API请
求，其典型的消息格式样例如下：
在样例中，包含以下RESTful API相关的协议信息。
■ 
资源URL格式为schema://host[:port]/version/path，其中schema
是指定使用的应用层协议，比如HTTP、HTTPS、FTP等；host是API服
务器的IP地址或域名；port是指API服务器的端口；version是指API请求
的版本；path是指API请求资源的路径。
■ 资源请求分配的HTTP请求方法，除了样例中的GET方法外，常
用的请求方法还有用于服务器新增数据或资源的POST方法，用于获取
资源请求的元数据HEAD方法，用于更新服务器资源的PUT方法，用于
删除服务器资源的DELETE方法以及查询与资源相关选项的OPTIONS方
法等。不同HTTP请求方法的调用样例如下：
在实际应用中，对于API请求路径的命名通常遵循一定的规范或规
律，比如将功能相近的API端点放在一起：
通过这些接口规范性的特征，读者很容易识别出RESTful API类的
接口。而作为技术开发者，为了满足这些接口标准，一般采用业界通用
API规范。在现行的API规范中，OpenAPI当之无愧排在首位，其官网地
址为https://swagger.io/specification/。从其官方文档可以了解到，
OpenAPI规范于2015年已捐赠给Linux基金会，其规范内容为RESTful
API定义了一个与开发语言无关的标准接口，可通过有效映射与之关联
的所有资源和操作，来帮助用户轻松地开发和使用RESTful 
API。
OpenAPI规范中描述REST风格通信消息所采用的MIME类型以JSON格
式为主，如图1-10所示。
●图1-10 REST采用的MIME类型
同时，在规范中，关于身份认证与鉴权的安全性支持方案，如
APIKey、HTTP Basic、OAuth 2.0等也做出了相应的描述，在后续的API
安全设计章节中将为读者做详细的介绍。
1.3.3 GraphQL API技术
GraphQL是Facebook推出的一种基于用户自定义数据类型的API查
询语言和现代应用程序对接云服务的全面解决方案，在很多场景下，可
以作为REST、SOAP或gRPC的替代方案。
一个典型的GraphQL服务是通过定义类型、类型上的字段、字段的
解析函数来对外部提供能力服务的。这里，以用户admin的查询为样
例，描述其交互过程。当请求GraphQL服务时，其查询结构为：
这不是JSON格式的数据，但它们很相似，此GraphQL查询的表达
含义如下。
■ 通过用户名admin来查询用户信息。
■ 仅查询id、name、address三个字段的信息。
■ 对于通信地址address，需要查询首选地址和备用地址。
而与之对应的服务器响应为：
这个响应的消息结构显示了GraphQL的两个重要的特性。
■ 
服务器能理解客户端的要求并根据定义的模式完成查询和响
应，这种特性能帮助使用者从技术路线层面解决OWASP API安全中的
批量分配问题。而在业务层面，使后端服务的开发人员更多的关注开
发，而不用关心业务数据的接口，由前端查询来控制其想获取的字段。
■ 可以嵌套地访问数据资源，在RESTful API如果想查询用户上述
信息，则对应的API端点为/v1/user和/v1/user/address，而GraphQL API则
一次性完成。这在大型的互联网应用中，可以减少时间成本的消耗。
也正是GraphQL的这些特性，当技术人员尝试使用它时，也有诸多
的不便。举例如下。
■ GraphQL语言自身特有的查询语法需要投入学习成本，且其结构
没有JSON直观，在编写过程中需要特定的辅助工具。
■ 为了适应其嵌套查询的特性，需要定义大量的schema，并进行服
务器端改造。
■ 嵌套查询对普通关系型数据的服务器性能挑战较大。
1.3.4 SOAP API技术
SOAP API相对于其他的API技术来说，已进入了衰退期，但在企业
级应用中，因历史遗留问题仍在普遍使用着。通俗地说，SOAP协议是
基于HTTP协议的XML通信技术，主要用于Web Service服务通信。在技
术实现上，一个完整的SOAP API由3部分组成：SOAP（简单对象访问
协议）、UDDI（Web 
Services提供信息注册中心的实现标准规范）、
WSDL（描述Web Services以及如何对它们进行访问），它们之间的相
互关系如图1-11所示。
●图1-11 SOAP API技术的组成
WSDL为服务消费者提供了Web Services接口的详细描述，通过解
析WSDL获取调用参数的详细描述后，使用XML格式的数据与服务提供
者进行数据交互。
一个典型的SOAP消息，其基本格式如下所示：
其中Envelope和Body为必选节点，Envelope用于标识此消息为
SOAP消息，Body包含所有调用和响应的必须信息。这里，通过获取
API版本的SOAP消息请求与响应来让读者对SOAP消息有更理性的认
识，如下所示。
SOAP请求：用于请求API的版本信息，当获取的API名称为test的
API版本时，发送的SOAP消息样例。其中m:GetApiVersion和
m:ApiName是应用程序业务专用的自定义节点。代码如下所示：
SOAP响应：服务器端对获取API版本信息的响应报文样例，其中
m:Version表示版本信息为2.5.0版本。代码如下所示：
1.3.5 gRPC API技术
gRPC是一套高性能、开源的远程调用框架，通过Server/Client模
式，使得通信中的各个应用之间像调用本地接口一样调用远程API。在
其官网中，对于为什么要使用gPRC有如下描述。
gRPC是可以在任何环境中运行的现代开源高性能RPC框架，它可
以通过可插拔方式，有效地支撑数据中心内和跨数据中心的服务连接，
以实现负载平衡、跟踪、运行状况检查和身份验证。它同样也适用于分