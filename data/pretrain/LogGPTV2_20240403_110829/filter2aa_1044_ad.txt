### EAP-MD5 Forced Reauthentication Attack

In this section, we discuss the method of using a rogue device to intercept and manipulate EAPOL (Extensible Authentication Protocol over LAN) packets between the supplicant and the authenticator. This technique allows us to capture EAP-MD5 challenge and response pairs, which can then be used to perform dictionary attacks to obtain plaintext credentials. We also introduce the Bait n Switch method as an alternative to packet injection for bypassing 802.1X-protected networks.

#### Attack Overview
To execute this attack, we first locate a peripheral device (supplicant) that is configured to use EAP-MD5. We then insert a rogue device between the supplicant and the switch (authenticator). The rogue device passively sniffs the network traffic, waiting for the supplicant to reauthenticate with the network. Once the reauthentication process begins, we capture the EAP-MD5 challenge and response, use a dictionary attack to obtain the plaintext username and password, and finally use the Bait n Switch method to authenticate with the network.

#### Major Drawback
A significant limitation of this approach is the need to wait for the supplicant to reauthenticate. This typically only occurs when the device is unplugged, turned off, or becomes inactive for an extended period [16].

#### Forcing Reauthentication
To make the attack more practical, we need to force the supplicant to reauthenticate. One method is to briefly disconnect the supplicant from the authenticator by physically disconnecting the Ethernet cable. However, this requires physical access. A more efficient solution is to exploit the EAP authentication initiation process.

##### EAP-MD5 Forced Reauthentication Attack
The EAP authentication process involves two initial steps:
1. **(Optional)** The supplicant sends an EAPOL-Start frame to the authenticator.
2. The authenticator sends an EAP-Request-Identity frame to the supplicant.

Since Step 1 is optional, the authenticator can initiate the authentication process by sending an EAP-Request-Identity frame directly. This creates a vulnerability because the supplicant cannot verify whether the EAP-Request-Identity frame was sent in response to an EAPOL-Start frame or initiated independently by the authenticator.

To exploit this, we send a forged EAPOL-Start frame to the authenticator, making it believe the supplicant is initiating the authentication process. The authenticator then sends an EAP-Request-Identity frame to the supplicant, which responds as usual. This forces the supplicant to reauthenticate, allowing us to capture the EAP-MD5 challenge and response.

**Figure 30: Using Scapy to Send EAPOL-Start Frames**

Using this technique, we can upgrade our passive attack into an active one. We start by introducing the rogue device between the authenticator and supplicant, establishing a transparent bridge to sniff traffic. We then force reauthentication, capture the EAP-MD5 challenge and response, and use a dictionary attack to obtain the plaintext credentials. Finally, we connect to the network using the Bait n Switch method.

#### Mitigation
To mitigate this attack, a safety-bit can be included in the EAP-Request-Identity frame. If the safety-bit is set to 1, the supplicant should check if it recently issued an EAPOL-Start frame. If not, the authentication process should be aborted, and an alert sent to the authenticator.

### Leveraging Rogue Gateway Attacks Against Peripheral Devices

Other weak EAP methods commonly used by peripheral devices on wired networks include EAP-PEAP and EAP-TTLS. Attacking EAP-PEAP is more complex due to the secure tunnel used for authentication, which prevents passive sniffing [13].

#### Rogue Gateway Attack
We adapt the rogue gateway technique to attack EAP-PEAP and EAP-TTLS. We place the rogue device (A configuration) between the supplicant and authenticator. Once the supplicant is identified as using EAP-PEAP or EAP-TTLS, we bring down the bridge and upstream network interfaces. We then start hostapd as a rogue RADIUS server, listening on our PHY network interface.

**Figure 31: Placement of the Rogue Device**

We send a spoofed EAPOL-Start frame to hostapd, causing it to send an EAP-Request-Identity frame to the supplicant. The supplicant then authenticates with the rogue device. If the authorized client accepts the rogue deviceâ€™s x.509 certificate, we can capture the MS-CHAPv2 challenge and response, which can be used to obtain plaintext credentials. Finally, we connect the rogue device to the network using the Bait n Switch method.

**Figure 32: Bringing Down the Bridge and Upstream Network Interfaces**

**Figure 33: Final Connection Using Bait n Switch**

### Proof of Concept and Source Code Release

We have developed a tool called `silentbridge` that implements the attacks described in this document. The source code and documentation are available at:

- **GitHub Repository:** https://github.com/s0lst1c3/silentbridge

### Conclusion

While 802.1X-2010 is a significant improvement over 802.1X-2004, the use of weak EAP methods can undermine its security. The effectiveness of the Rogue Gateway and Bait n Switch attacks demonstrates that the standard is only as secure as the EAP methods deployed. As adoption of 802.1X-2010 increases, the use of weak EAP implementations is likely to become more prevalent, especially since the standard does not mandate strong EAP methods.

Improving 802.1X support by peripheral device manufacturers is a step in the right direction, but it is not sufficient. Incentivizing manufacturers to create products that support strong EAP implementations and make them easy to deploy is crucial. Until then, peripheral devices will remain susceptible to these attacks.

It is important to recognize that while 802.1X port security is an industry best practice, it is not a substitute for a layered approach to network security. Deploying 802.1X should not be seen as a mitigation for other host and network-level security issues. Good patch management practices and avoiding dangerous networking protocols like LLMNR are still essential.

### Acknowledgements

Special thanks to Dan Nelson, Justin Whitehead, and Ryan Jones for their contributions to this project.

### References

[1] http://www.ieee802.org/1/pages/802.1x-2001.html  
[2] http://www.ieee802.org/1/pages/802.1x-2004.html  
[3] https://blogs.technet.microsoft.com/steriley/2005/08/11/august-article-802-1x-on-wired-networks-considered-harmful/  
[4] https://www.defcon.org/images/defcon-19/dc-19-presentations/Duckwall/DEFCON-19-Duckwall-Bridge-Too-Far.pdf  
[5] https://www.gremwell.com/marvin-mitm-tapping-dot1x-links  
[6] https://hackinparis.com/data/slides/2017/2017_Legrand_Valerian_802.1x_Network_Access_Control_and_Bypass_Techniques.pdf  
[7] https://www.cisco.com/c/en/us/products/collateral/ios-nx-os-software/identity-based-networking-services/deploy_guide_c17-663760.html  
[8] https://1.ieee802.org/security/802-1ae/  
[9] https://standards.ieee.org/findstds/standard/802.1X-2010.html  
[10] http://www.ieee802.org/1/files/public/docs2013/ae-seaman-macsec-hops-0213-v02.pdf  
[11] https://www.gremwell.com/linux_kernel_can_forward_802_1x  
[12] https://www.intel.com/content/www/us/en/support/articles/000006999/network-and-i-o/wireless-networking.html  
[13] http://www.willhackforsushi.com/presentations/PEAP_Shmoocon2008_Wright_Antoniewicz.pdf  
[14] https://link.springer.com/content/pdf/10.1007%2F978-3-642-30955-7_6.pdf  
[15] https://support.microsoft.com/en-us/help/922574/the-microsoft-extensible-authentication-protocol-message-digest-5-eap  
[16] https://tools.ietf.org/html/rfc3748  
[17] https://code.google.com/archive/p/8021xbridge/source/default/commits  
[18] https://github.com/mubix/8021xbridge  
[19] https://hal.inria.fr/hal-01534313/document  
[20] https://sensepost.com/blog/2015/improvements-in-rogue-ap-attacks-mana-1%2F2/  
[21] https://tools.ietf.org/html/rfc4017  
[22] http://web.archive.org/web/20160203043946/https:/www.cloudcracker.com/blog/2012/07/29/cracking-ms-chap-v2/  
[23] https://crack.sh/  
[24] https://tools.ietf.org/html/rfc5216  
[25] https://4310b1a9-a-93739578-s-sites.googlegroups.com/a/riosec.com/home/articles/Open-Secure-Wireless/Open-Secure-Wireless.pdf?attachauth=ANoY7cqwzbsU93t3gE88UC_qqtG7cVvms7FRutz0KwK1oiBcEJMlQuUmpGSMMD7oZGyGmt4M2HaBhHFb07j8Gvmb_HWIE8rSfLKDvB0AI80u0cYwSNi5ugTP1JtFXsy1yZn8-85icVc32PpzxLJwRinf2UGzNbEdO97Wsc9xcjnc8A8MaFkPbUV5kwsMYHaxMiWwTcE-A8Dp49vv-tmk86pNMaeUeumBw_5vCZ6C3Pvc07hVbyTOsjqo6C6WpfVhd_M0BNW0RQtI&attredirects=0  
[26] https://txlab.wordpress.com/2012/01/25/call-home-ssh-scripts/  
[27] https://txlab.wordpress.com/2012/03/14/improved-call-home-ssh-scripts/  
[28] https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst3560/software/release/12-2_37_se/command/reference/cr1/cli3.html#wp1948361  
[29] https://www.juniper.net/documentation/en_US/junos/topics/concept/port-security-persistent-mac-learning.html  
[30] https://tools.ietf.org/html/rfc3579  
[31] https://tools.ietf.org/html/rfc5281