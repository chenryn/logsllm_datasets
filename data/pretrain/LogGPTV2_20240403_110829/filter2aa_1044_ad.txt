the supplicant and the authenticator, and use the rogue device to sniff EAPOL packets as the supplicant 
authenticates with the network. We also have proposed the Bait n Switch method described in V. Bate n Switch 
Attack: An Alternative To Packet Injection as a means of authenticating with a network protected by 80.1x.  
Using these attacks allows us to bypass  802.1x by locating a peripheral device (supplicant) that is configured to use 
EAP-MD5, installing a rogue device between the supplicant and the switch (authenticator), and waiting for the 
peripheral device to reauthenticate with the network. We then can sniff the EAP-MD5 challenge and response, use 
a dictionary attack to obtain the plaintext username and password, and finish by using a Bait n Switch attack to 
authenticate with the network. 
There is one major drawback to this approach: we must wait for the supplicant to reauthenticate with the switch. 
Realistically, this will not occur unless the device is unplugged, turned off, or becomes inactive for an extended 
period of time [16].  
For our attack to be truly useful, we need to be able to force the device to reauthenticate. The most obvious way of 
doing this is to briefly disconnect the supplicant from the authenticator. However, for this to work we would have 
to physically disconnect the Ethernet cable from the bridge, as merely disabling a network interface briefly will not 
trigger reauthentication [16]. We can do this remotely if we’re using the Rogue Device B configuration for our rogue 
Page 31 of 37 
device, but it would be better to have a solution that can be implemented using Rogue Device A, which has less 
overhead. 
A better approach is to perform an attack that takes advantage of the way the EAP authentication process is initiated. 
VII.1.B EAP-MD5 Forced Reauthentication Attack 
The first two steps of the EAP authentication process are: 
Step 1 – (optional) The supplicant sends the authenticator an EAPOL-Start frame [1][2][9]. 
Step 2 – The authenticator sends the supplicant an EAP-Request-Identity [1][2][9]. 
In order to provide a means for the authenticator to force the supplicant to reauthenticate, Step 1 is considered 
optional. EAP authentication can be initiated using Step 1 (EAPOL-Start) or Step 2 (EAP-Request-Identity) [1][2][9]. 
This approach, however, fails to provide the  supplicant a means of verifying whether incoming EAP-Request-Identity 
frames have been sent in response to an EAPOL-Start frame, or whether reauthentication has been initiated 
independently by the authenticator itself. Regardless of whether the authentication process starts at Step 1 or Step 
2, the structure of the EAP-Request-Identity frame remains the same. 
This means that we can force reauthentication by sending a forged EAPOL-start frame to the authenticator as if it 
came from the supplicant. This will cause the authenticator to believe that the supplicant is initiating authentication, 
which will cause the authenticator to send the supplicant an EAP-Request-Identity frame. The supplicant then 
receives the EAP-Request-Identity frame from the authenticator and responds with the next phase of the 
authentication process. The authentication process then proceeds as normal, as both the supplicant and the 
authenticator believe that the other party has initiated the transaction. 
Figure 30 – using Scapy to send EAPOL-Start frames 
Using this technique, we can upgrade our Passive Attack Against EAP-MD5 (see VII.1.A Passive Attack Against EAP-
MD5) into an active one. We begin by introducing the rogue device to the network between the authenticator and 
supplicant, establishing a transparent bridge to passively sniff traffic. We then force reauthentication, sniffing the 
resulting EAP-MD5 challenge and response. We then use a dictionary attack to obtain plaintext credentials and 
connect to the network using a Bait n Switch. 
VII.1.C Proposed Mitigation to EAP Forced Reauthentication Attacks 
A safer way of initiating the EAP authentication process would be to include a safety-bit in the EAP-Request-Identity 
frame that is set to 1 when the frame was sent in response to an EAPOL-Start frame. When the supplicant receives 
an EAP-Request-Identity frame, it should check the value of the safety-bit. If the safety-bit is set to 1, and the 
supplicant did not recently issue an EAPOL-Start frame, the authentication process should be aborted and an alert 
sent to the authenticator. 
Page 32 of 37 
VII.2 Leveraging Rogue Gateway Attacks Against Peripheral Devices 
The other forms of weak EAP commonly used by peripheral devices on wired networks are EAP-PEAP and EAP-TTLS, 
discussed earlier in II.4.A EAP-MD5 and II.4.B EAP-PEAP / EAP-TTLS. Attacking EAP-PEAP is considerably more 
involved than attacking EAP-MD5 since authentication occurs through a secure tunnel and consequently cannot be 
passively sniffed [13]. 
Fortunately, an adaptation of the rogue gateway technique discussed in VI. Defeating MACsec Using Rogue Gateway 
Attacks is useful in this scenario. This time, however, we do not need to use the Rogue Device B configuration since 
we are not dealing with a scenario involving MACsec. Instead, we can perform the attack completely in software 
using our transparent bridge as described in IV. Improvements to Classical Bridge-based 802.1x Bypass. 
VII.2.A Rogue Gateway Attack Against 802.1x-2004 and EAP-PEAP/EAP-TTLS 
We begin by placing our rogue device (A configuration) between the supplicant and authenticator as shown in Figure 
31 below. 
Figure 31 
Once we establish that the supplicant is configured to use EAP-PEAP, EAP-TTLS, or any similarly weak EAP 
implementation that does not enforce mutual certificate-based validation, we bring down our bridge and upstream 
network interfaces, as shown in Figure 32 below. We then start hostapd as a rogue RADIUS server and have it listen 
our PHY network interface. 
Page 33 of 37 
Figure 32 
We then send a spoofed EAPOL-start frame to hostapd, causing hostapd to send an EAP-Request-Identity frame to 
the supplicant (see: VII.1 EAP-MD5 Forced Reauthentication Attack). 
This causes the supplicant to authenticate with the rogue device. As long as the authorized client accepts the rogue 
device’s x.509 certificate, the attacker will succeed in capturing an MS-CHAPv2 challenge and response which can 
be used to obtain plaintext credentials. 
Finally, we connect the rogue device to the network using a Bait n Switch. 
Page 34 of 37 
Figure 33 
VIII. Proof of Concept and Source Code Release 
We have packaged each of the attacks described in this document into a tool called silentbridge, which can be 
downloaded at the following URL: 
§ 
https://github.com/s0lst1c3/silentbridge 
The silentbridge repository contains both source code and documentation that describes how to build each of the 
rogue devices described in this paper. 
Page 35 of 37 
Conclusion 
While 802.1x-2010 is a remarkable improvement over 802.1x-2004, weak authentication protocols can undermine 
the enhancements provided by MACsec. Even though 802.1x-2010’s use of MACsec successfully prevents the bridge 
and injection-based attacks introduced by “Abb” and Alva Duckwall, the protocol’s reliance on EAP means that the 
standard is only as secure as the EAP methods deployed.  This is demonstrated by the effectiveness of the Rogue 
Gateway and Bait n Switch attacks introduced in this document. 
If parallels between MACsec and WPA2 are any indication, we can expect the use of weak EAP implementations to 
become more and more prevalent as adoption rates for 802.1x-2010 increase. This is especially true considering that 
the 802.1x-2010 standard does not mandate the use of strong EAP methods. 
Additionally, although improved 802.1x support by peripheral device manufacturers is a step in the right direction, 
it is not enough. We need to incentivize device manufacturers to create products that both support strong EAP 
implementations and make it easy for organizations to deploy them. Until then, peripheral devices will largely be 
susceptible to the Rogue Gateway, Bait n Switch, and EAP-MD5 Forced Reauthentication attacks introduced in this 
document. Furthermore, these devices will remain susceptible to the bridge and injection based 802.1x bypasses 
introduced by Duckwall and “Abb” until both adoption of and support for 802.1x-2010 becomes widespread. 
Finally, it is important to recognize that while the use of 802.1x port security should still be considered an industry 
best-practice, it is not a substitute for a layered approach to network security. The use of 802.1x, or any other form 
of access control for that matter, should not be considered a mitigation for other host and network level security 
issues. Deploying 802.1x is not a substitute for good patch management practices, nor should it be used to justify 
the use of dangerous networking protocols such as LLMNR.  
Page 36 of 37 
Acknowledgements 
Special thanks to Dan Nelson, Justin Whitehead, and Ryan Jones for helping make this project a reality.  
Page 37 of 37 
References 
× 
[1] http://www.ieee802.org/1/pages/802.1x-2001.html 
× 
[2] http://www.ieee802.org/1/pages/802.1x-2004.html 
× 
[3] https://blogs.technet.microsoft.com/steriley/2005/08/11/august-article-802-1x-on-wired-networks-considered-harmful/ 
× 
[4] https://www.defcon.org/images/defcon-19/dc-19-presentations/Duckwall/DEFCON-19-Duckwall-Bridge-Too-Far.pdf 
× 
[5] https://www.gremwell.com/marvin-mitm-tapping-dot1x-links 
× 
[6]https://hackinparis.com/data/slides/2017/2017_Legrand_Valerian_802.1x_Network_Access_Control_and_Bypass_Techniques.pd
f 
× 
[7] https://www.cisco.com/c/en/us/products/collateral/ios-nx-os-software/identity-based-networking-services/deploy_guide_c17-
663760.html 
× 
[8] https://1.ieee802.org/security/802-1ae/ 
× 
[9] https://standards.ieee.org/findstds/standard/802.1X-2010.html 
× 
[10] http://www.ieee802.org/1/files/public/docs2013/ae-seaman-macsec-hops-0213-v02.pdf 
× 
[11] https://www.gremwell.com/linux_kernel_can_forward_802_1x 
× 
[12] https://www.intel.com/content/www/us/en/support/articles/000006999/network-and-i-o/wireless-networking.html 
× 
[13]http://www.willhackforsushi.com/presentations/PEAP_Shmoocon2008_Wright_Antoniewicz.pdf 
× 
[14] https://link.springer.com/content/pdf/10.1007%2F978-3-642-30955-7_6.pdf 
× 
[15] https://support.microsoft.com/en-us/help/922574/the-microsoft-extensible-authentication-protocol-message-digest-5-eap 
× 
[16] https://tools.ietf.org/html/rfc3748 
× 
[17] https://code.google.com/archive/p/8021xbridge/source/default/commits 
× 
[18] https://github.com/mubix/8021xbridge 
× 
[19] https://hal.inria.fr/hal-01534313/document 
× 
[20] https://sensepost.com/blog/2015/improvements-in-rogue-ap-attacks-mana-1%2F2/ 
× 
[21] https://tools.ietf.org/html/rfc4017 
× 
[22] http://web.archive.org/web/20160203043946/https:/www.cloudcracker.com/blog/2012/07/29/cracking-ms-chap-v2/ 
× 
[23] https://crack.sh/ 
× 
[24] https://tools.ietf.org/html/rfc5216 
× 
[25] https://4310b1a9-a-93739578-s-sites.googlegroups.com/a/riosec.com/home/articles/Open-Secure-Wireless/Open-Secure-
Wireless.pdf?attachauth=ANoY7cqwzbsU93t3gE88UC_qqtG7cVvms7FRutz0KwK1oiBcEJMlQuUmpGSMMD7oZGyGmt4M2HaBhHFb0
7j8Gvmb_HWIE8rSfLKDvB0AI80u0cYwSNi5ugTP1JtFXsy1yZn8-
85icVc32PpzxLJwRinf2UGzNbEdO97Wsc9xcjnc8A8MaFkPbUV5kwsMYHaxMiWwTcE-A8Dp49vv-
tmk86pNMaeUeumBw_5vCZ6C3Pvc07hVbyTOsjqo6C6WpfVhd_M0BNW0RQtI&attredirects=0 
× 
[26] https://txlab.wordpress.com/2012/01/25/call-home-ssh-scripts/ 
× 
[27] https://txlab.wordpress.com/2012/03/14/improved-call-home-ssh-scripts/ 
× 
[28] https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst3560/software/release/12-
2_37_se/command/reference/cr1/cli3.html#wp1948361 
× 
[29] https://www.juniper.net/documentation/en_US/junos/topics/concept/port-security-persistent-mac-learning.html 
× 
[30] https://tools.ietf.org/html/rfc3579 
× 
[31] https://tools.ietf.org/html/rfc5281