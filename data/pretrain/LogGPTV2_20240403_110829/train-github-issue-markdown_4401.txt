Certainly! Here's a more polished and coherent version of your text:

---

I am working on a project where I load random images into three `ImageView` components using a timer. My goal is to crossfade the new image with the currently displayed image. I select a random image from a list of about 10 and call the `loadImage` method three times (with different `ImageView` components) every 6 seconds.

This approach generally works, but occasionally, it crashes due to the exception shown below. When I used a button click to trigger the update, I could easily reproduce this exception. I suspect there might be a race condition between the fetch and render processes of the previous and new calls.

Is there a better way to achieve this, or should my current implementation work as expected? I am using Glide version 3.6.1.

Here is the relevant code:

```java
// mDownloadedSize is the maximum of the screen width or height. This ensures that rotations have an immediate cache hit for image loading.
private void loadImage(ImageView view, String photoUrl) {
    Drawable oldImage = view.getDrawable();
    Glide.with(MyFragment.this)
         .load(photoUrl)
         .crossFade()
         .placeholder(oldImage)
         .override(mDownloadSize, mDownloadSize)
         .centerCrop()
         .into(view);
}
```

The exception I encounter is:

```
java.lang.RuntimeException: Canvas: trying to use a recycled bitmap android.graphics.Bitmap@20260fad
    at android.graphics.Canvas.throwIfCannotDraw(Canvas.java:1282)
    at android.view.GLES20Canvas.drawBitmap(GLES20Canvas.java:599)
    at com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.draw(GlideBitmapDrawable.java:101)
    at com.bumptech.glide.request.target.SquaringDrawable.draw(SquaringDrawable.java:151)
    at android.graphics.drawable.TransitionDrawable.draw(TransitionDrawable.java:198)
    at android.widget.ImageView.onDraw(ImageView.java:1158)
    at android.view.View.draw(View.java:15231)
    at android.view.View.updateDisplayListIfDirty(View.java:14167)
    at android.view.View.getDisplayList(View.java:14189)
    at android.view.ViewGroup.recreateChildDisplayList(ViewGroup.java:3389)
    at android.view.ViewGroup.dispatchGetDisplayList(ViewGroup.java:3368)
    // ... (repeated stack trace lines)
```

Any insights or suggestions would be greatly appreciated.

---

This version is more structured and clearly conveys your problem and the context in which it occurs.