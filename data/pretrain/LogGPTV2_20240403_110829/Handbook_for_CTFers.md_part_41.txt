print ('unknovn opcode ′)
continue
exit ()
if _name.__ -- '
(wsesfp) aufxd
nain_' :
run_disasm ()
This script restores the logic of the virtual machine executor function
(implemented through signals & ptraces) in the challenge, allowing us to parse the
---
## Page 377
5.5 Binary Code Protection and Obfuscation
363
VM bytecode and disassemble it into a more readable form. Running the script, we
can get the following output.
1abel_0 :
reg[7] = 0;
1abel_14 :
labe1_7:
reg[8] = 1;
1abe1_21:
09
1abe1_28 :
reg[4] = 0;
1abe1_35 :
reg[5] = 0;
reg[6] = 0;
labe1_42 :
goto 1abe1_244;
reg[3] = 0;
labe1_49 :
1abe1_56 :
reg[0] =reg[4] ;
1abe1_60 :
labe1_68 :
reg[0] = reg[4] ; 
reg[0] += 1;
1abel_81:
labe1_73 :
t =
char mem[5434] - {48, 48, 48, 48, 48, 48, 48, 48, 48, 48, .. -] :
void main_logic() (
int g_cmp_result ;
int reg[9] = {0} :
labe1_0 :
labe1_7:
0 = []6ax
label_14 :
reg [8] = 1;
goto labe1_605;
label_21 :
1abel_28 :
reg [4] = 0;
1abe1_35;
o = [s]6ax
 / / Several codes are onitted here.
0 = [9]6a.x
1abe1_605:
label_612:
reg[0] - 1;
reg [0] = men [reg [0]] ;
label_616:
g_cmp_result = reg[0] - 48;
1abe1_626 :
if (g_cmp_result == 0) goto labe1_21 ;
1abel_633:
return;
int main () (
main_1ogic () ;
---
## Page 380
366
5 Reverse Engineering
return 0;
Select a C compiler (such as MSVC), configure the optimization options, compile
the above code as an executable program, and then use IDA's HexRays plugin to
decompile the main_logicO function, you can get the following pseudo-code
(renamed some of the variables).
void sub_401000 ()
int v0 ;
/ / ecx
int v1;
int new_sum;
/ / esi
int idx;
/ / edx
// ebx
int v4 ;
 / / edi
char v5 ;
 / ecx
 / / c1
int v6 ;
int v7;
/ / ecx
int v8 ;
 / / edx
int sun;
char v9 ;
/ / a1
//[esp+4h][ebp-4h]
while (current_path_1 = *o°)
sun = 0 ;
v1 = 0;
v0 = 0 ;
dx = 0 ;
nev_sum = 0 ;
do
v5 = characters [ (((vo + 1) + v0) >> 1) + v1] ;
v4 = v0 + 1;
current_solution [idx] = v5 ;
if (current_path_2 [idx + 99] == 1′}
new_sum += v5 ;
++v1 ;
v0 = v4 ;
} whi1e [1dx - 99  0)
v6 = 0;
do
solution [v6] = current_solution [v6] ;
} whi1e (v6 - 99 P1 : 1 -ux*
P0oxs (|&6N
The algorithm that generates the flag starts from the vertices of the triangle (the
s uonoq a o tuns isa?e au qm ped e spuy 6pagsneqxo pue (apemup 1s
is a simple classical problem that can be solved using dynamic programming.
def solve () :
def max (×, y) : return x if x > y else y
def get_pos (x, y) : return x* (x+1) / /2+y
# the charset
tb1 = [126, 116, 68, 114, 67, 36, 53, 105, 33, 61, 37, 78, 97, 113, ..-]
0505 + [0] = dp
for i in range [1, 100) :
dp [o] = tb1 [0]
dp [get_pos (1, o)] = dp [get_pos [4-1, o)] + tbl [get_pos (1, 0)]
dp [get_pos (1, 1)] = dp [get_pos [1-1, 1-1) ] + tb1 [get_pos (1, 1)]
for i in range [2, 100) :
---
## Page 382
368
5 Reverse Engineering
for j in range (1, i) :
 1) 1 ) + tb1 (get_pos (1, j11