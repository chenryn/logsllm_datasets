## 破坏性测试的流程与用例设计说到底，破坏性测试还是一种人为、事先设计的测试方法，所以它的流程与普通的软件测试流程基本一致：都包括设计测试用例、开发测试脚本、执行测试脚本、捕获缺陷、报告缺陷的过程。破坏性测试与普通测试流程，唯一不同的是，绝大部分普通测试可以在测试失败后，继续进行其他的测试；而破坏性测试，则有可能无法恢复到待测状态，只能停止后续的测试。所以，在持续交付的哪个步骤和阶段执行破坏性测试，就非常讲究了，你需要经过严密地设计和预判。所以，在设计破坏性测试的测试用例时，我们通常会考虑两个维度：**第一个维度是，一个破坏点的具体测试，即设计一个或一组操作，能够导致应用或系统奔溃或异常**。此时，你需要注意两个问题：1.  出现问题后的系统或软件是否有能力按预期捕获和处理异常；2.  确认被破坏的系统是否有能力按照预期设计进行必要的修复，以确保能够继续处理后续内容。**第二个维度是，整个系统的破坏性测试**，我们通常会采用压力测试、暴力测试、阻断链路去除外部依赖等方法，试图找到需要进行破坏性测试的具体的点。这两个维度的测试方法、流程基本一致，区别只是第二维度的测试通常不知道具体要测试的点，所以破坏范围会更大，甚至可能破坏整个系统。
## 破坏性测试的执行策略由于具有切实的破坏力这个特点，我们在执行破坏性测试时需要考虑好执行策略，以避免发生不可挽回的局面。一般情况下，在发布前执行破坏性测试相对比较安全。但这也不是绝对的，比如你一不小心把UAT 等大型联调环境搞坏了，其代价还是很可观的。因此，**绝大部分破坏性测试都会在单元测试、功能测试阶段执行。而执行测试的环境也往往是局部的测试子环境。**那么问题又来了，真实环境要比测试子环境更复杂多变，在测试子环境进行的破坏性测试真的有效吗？这真是一个极好的问题。所以，最近几年，技术圈衍生出一个很流行的理论：混沌工程。
## 混沌工程随着分布式系统架构的不断进步，传统的破坏性测试也越发捉襟见肘，最主要的问题有两个：第一，它被设计得太严格，以至于失真了。而真正有破坏力的故障，都是随机的、并行的、胡乱的。第二，它覆盖不了生产环境，只能做到类似抽样检验的能力，且很难重复和持续。所以，混沌工程的理论就应运而生了。混沌工程是在分布式系统上建立的实验，其目的是建立对系统承受混乱冲击能力的信心。鉴于分布式系统固有的混乱属性，也就是说即使所有的部件都可以正常工作，但把它们结合后，你还是很难预知会发生什么。所以，我们需要找出分布式系统的这些弱点。我把这些弱点归为了以下几类：-   当服务不可用时，不可用或不完整的回退能力；-   不合理的设置超时时间引起的重试风暴；-   依赖服务接收过多的流量，从而导致中断；-   由单个故障点引起的级联故障；-   ......我们要避免这些弱点在生产过程中影响客户，所以需要一种方法来探知和管理这些系统固有的混乱，经实践证明，通过一些受控实验，我们能够观察这些弱点在系统中的行为。这种实验方法，就被叫作混沌工程。说到具体的实验方法，需要遵循以下 4 个步骤，即科学实验都必须遵循的 4个步骤：1.  将正常系统的一些正常行为的可测量数据定义为"稳定态"；2.  建立一个对照组，并假设对照组和实验组都保持"稳定态"；3.  引入真实世界的变量，如服务器崩溃、断网、磁盘损坏等等；4.  尝试寻找对照组和实验组之间的差异，找出系统弱点。"稳定态"越难被破坏，则说明系统越稳固；而发现的每一个弱点，则都是一个改进目标。混沌工程也有几个高级原则：1.  **使用改变现实世界的事件**，就是要在真实的场景中进行实验，而不要想象和构造一些假想和假设的场景；2.  **在生产环境运行**，为了发现真实场景的弱点，所以更建议在生产环境运行这些实验；3.  **自动化连续实现**，人工的手工操作是劳动密集型的、不可持续的，因此要把混沌工程自动化构建到系统中；4.  **最小爆破半径**，与第二条配合，要尽量减少对用户的负面影响，即使不可避免，也要尽力减少范围和程度。这样，就更符合持续交付的需求和胃口了。
## Netflix 公司的先驱实践Netflix 为了保证其系统在 AWS 上的健壮性，创造了 ChaosMonkey，可以说是混沌工程真正的先驱者。Chaos Monkey会在工作日期间，随机地杀死一些服务以制造混乱，从而检验系统的稳定性。而工程师们不得不停下手头工作去解决这些问题，并且保证它们不会再现。久而久之，系统的健壮性就可以不断地被提高。Netflix公司有一句名言，叫作"避免失败的最好办法就是经常失败"。所以，Chaos Monkey会在日常反复持续执行，真正地持续融合在系统中。这，也为其持续交付中的测试提供了很好的借鉴。
## 总结破坏性测试能够很好地测试分布式系统的健壮性，但也因为其破坏特点，使得它在持续交付中无法显示真正的威力；而混沌工程的提出，很好地解决了这个问题，使破坏性测试的威力能够在持续交付过程中被真正发挥出来。混沌工程的一个典型实践是，Netflix 公司的 Chaos Monkey系统。这个系统已经证明了混沌工程的价值和重要性，值得我们借鉴。
## 思考题你是否考虑过要在自己的公司引入 ChaosMonkey？如果要引入的话，你又需要做些什么准备呢？感谢你的收听，欢迎给我留言。![](Images/69e5b7a8ed8eecd006aa3ce5f76f78af.png){savepage-src="https://static001.geekbang.org/resource/image/55/0a/55b7b7cb930ca733523be64e3a720d0a.jpg"}
# 27 \| 利用Mock与回放技术助力自动化回归你好，我是王潇俊。今天我和你分享的主题是：利用 Mock与回放技术助力自动化回归。在《代码静态检查实践》和《越来越重要的破坏性测试》这次的分享中，我介绍了对持续交付有重大影响的两个测试类型，即静态代码检查和破坏性测试。你可能已经发现，这两种测试正好适用于持续集成和测试管理的一头、一尾：-   静态代码检查，适合在所有其他测试类型开始之前优先进行，把住第一关；-   破坏性测试，则适用于集成或验收测试之后，甚至是对系统进行持续长久的测试。那么，我们现在再一起来看看，持续交付过程中还有哪些测试方法，以及还有哪些问题和难点吧。
## 持续交付中的测试难点其实，对于持续交付中的测试来说，自动化回归测试是不可或缺的，占了很大的测试比重。而进行自动化回归测试，就始终会有"三座大山"横在你面前。**"第一座大山"：测试数据的准备和清理。**通常情况下，回归测试的用例是可以复用的，所以比较固定，结果校验也比较确定。而如果要实现回归测试的自动化，就需要保证每次测试时的初始数据尽量一致，以确保测试脚本可复用。如果每次的数据都不同，那么每次的测试结果也会受到影响。为了做到测试结果的可信赖，就有两种方法：-   一种是，每次全新的测试都使用全新初始化数据；-   另一种是，在测试完成后，清除变更数据，将数据还原。``{=html}但是，这两种方法的实现，都比较麻烦，而且很容易出错。**"第二座大山"：分布式系统的依赖。**分布式系统因为有服务依赖的问题，所以进行一些回归测试时，也会存在依赖的问题。这个问题，在持续交付中比较难解决：1.  单元测试时要面对两难选择，测依赖还是不测依赖；2.  集成测试时，如何保证依赖服务的稳定性，或者说排除由稳定性带来的干扰，所以到底是依赖服务的问题，还是被测服务的问题很难确定；3.  真实的业务系统中，往往还存在多层依赖的问题，你还要想办法解决被测应用依赖的服务的依赖服务。我的天呢，"这座大山"简直难以翻越。**"第三座大山"：测试用例的高度仿真。**如何才能模拟出和用户一样的场景，一直困扰着我们。如果我们的回归测试不是自己设计的假想用例，而是真实用户在生产环境中曾经发生过的实际用例的话，那么肯定可以取得更好的回归测试效果。那么，有没有什么办法或技术能够帮助我们做到这一点呢？如何翻越这"三座大山"，我在这里给你准备了 Mock和回放技术这个两大利器，也就是我接下来要和你重点分享的内容。]{.orange}