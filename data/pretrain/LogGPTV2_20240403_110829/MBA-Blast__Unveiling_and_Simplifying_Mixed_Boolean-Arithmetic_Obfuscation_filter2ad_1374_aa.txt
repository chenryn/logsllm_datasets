title:MBA-Blast: Unveiling and Simplifying Mixed Boolean-Arithmetic Obfuscation
author:Binbin Liu and
Junfu Shen and
Jiang Ming and
Qilong Zheng and
Jing Li and
Dongpeng Xu
MBA-Blast: Unveiling and Simplifying Mixed 
Boolean-Arithmetic Obfuscation
Binbin Liu, University of Science and Technology of China & University of 
New Hampshire; Junfu Shen, University of New Hampshire; Jiang Ming, 
University of Texas at Arlington; Qilong Zheng and Jing Li, University of 
Science and Technology of China; Dongpeng Xu, University of New Hampshire
https://www.usenix.org/conference/usenixsecurity21/presentation/liu-binbin
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.MBA-Blast: Unveiling and Simplifying
Mixed Boolean-Arithmetic Obfuscation
Binbin Liu∗ 2,1, Junfu Shen1, Jiang Ming3, Qilong Zheng2, Jing Li2, Dongpeng Xu1
1University of New Hampshire
2University of Science and Technology of China
3University of Texas at Arlington
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract
1
Introduction
Mixed Boolean-Arithmetic (MBA) obfuscation is a method
to perform a semantics-preserving transformation from a sim-
ple expression to a representation that is hard to understand
and analyze. More speciﬁcally, this obfuscation technique
consists of the mixture usage of arithmetic operations (e.g.,
ADD and IMUL) and Boolean operations (e.g., AND, OR,
and NOT). Binary code with MBA obfuscation can effectively
hide the secret data/algorithm from both static and dynamic
reverse engineering, including advanced analyses utilizing
SMT solvers. Unfortunately, deobfuscation research against
MBA is still in its infancy: state-of-the-art solutions such as
pattern matching, bit-blasting, and program synthesis either
suffer from severe performance penalties, are designed for
speciﬁc MBA patterns, or generate too many false simpliﬁca-
tion results in practice.
In this paper, we ﬁrst demystify the underlying mechanism
of MBA obfuscation. Our in-depth study reveals a hidden
two-way feature regarding MBA transformation between 1-
bit and n-bit variables. We exploit this feature and propose
a viable solution to efﬁciently deobfuscate code with MBA
obfuscation. Our key insight is that MBA transformations
behave in the same way on 1-bit and n-bit variables. We pro-
vide a mathematical proof to guarantee the correctness of
this ﬁnding. We further develop a novel technique to simplify
MBA expressions to a normal simple form by arithmetic re-
duction in 1-bit space. We have implemented this idea as an
open-source prototype, named MBA-Blast, and evaluated it
on a comprehensive dataset with about 10, 000 MBA expres-
sions. We also tested our method in real-world, binary code
deobfuscation scenarios, which demonstrate that MBA-Blast
can assist human analysts to harness the full strength of SMT
solvers. Compared with existing work, MBA-Blast is the most
generic and efﬁcient MBA deobfuscation technique; it has a
solid theoretical underpinning, as well as, the highest success
rate with negligible overhead.
∗This work was done when Binbin Liu was a visiting scholar at the
University of New Hampshire.
Generally speaking, software obfuscation [1] is a transfor-
mation procedure to make a given program more difﬁcult
to analyze, while still preserving the program’s original se-
mantics. The competition between software obfuscation and
deobfuscation schemes has evolved in the last years into an
intensive arms race. On the one hand, many methods have
been proposed in the literature to obfuscate software in differ-
ent ways, generating a large body of literature on this topic.
Amongst others, obfuscation techniques include encoding
identiﬁer names and data [2, 3], control ﬂow ﬂattening [4],
opaque predicates [5, 6], run-time packers [7], and code virtu-
alization [8, 9]. In practice, obfuscation techniques have been
widely used in malicious software to hinder analysis [10, 11],
digital right management (DRM) solutions [12, 13], and to
protect secrets of cryptographic algorithms [14, 15]. As the
rivals in this arms race, researchers have been working hard
to understand or recover the original program behavior from
the obfuscated form [16–23]. If there is any lesson we can
learn from this body of work on improving deobfuscation
techniques, it is that no single “silver bullet” can address all
obfuscation schemes. One insight is that the status quo in
software obfuscation development puts reverse engineers at a
disadvantage: only having access to binary code greatly am-
pliﬁes this asymmetry—the cost of deobfuscation is typically
much higher than applying obfuscation.
In this paper, we focus on the analysis of an advanced ob-
fuscation technique, called Mixed Boolean-Arithmetic (MBA)
obfuscation [24]. MBA expressions are deﬁned as the expres-
sions that mix traditional arithmetic operators (e.g., +, −, ×)
and Boolean operators (e.g., ∧, ∨, ¬, ⊕). The effect of MBA
obfuscation can transform a simple expression like x + y to a
complex, hard-to-understand expression with mixed Boolean
and arithmetic operators, but the actual semantics of the new
expression does not change. Existing math analysis theories
only work either on pure Boolean expressions (e.g., normal-
ization and constraint solving), or on pure arithmetic expres-
sions (e.g., arithmetic reduction). So far, no publicly known
USENIX Association
30th USENIX Security Symposium    1701
methods, including both static and dynamic analysis-based
methods, can effectively analyze or simplify MBA expres-
sions. The root cause is that mixing two heterogeneous op-
erators breaks regular reduction rules (e.g., the algebra laws
of commutation, association, and distribution), which, in an-
other word, ensures the practical strength of MBA obfus-
cation. Considering the distinct advantages in potency, re-
silience, and cost, MBA obfuscation has recently attracted the
interests from security community: multiple research projects
and industry products [9, 25–30] have adopted this technique.
Moreover, since many crypto algorithms also involve hybrid
Boolean and arithmetic operations, MBA obfuscation has a
broader impact on crypto analysis such as white-box cryptog-
raphy [31, 32].
The superior strength of MBA obfuscation has attracted
research on software reverse engineering and deobfuscation.
Existing publications have started working on simplifying
MBA obfuscated expressions in an automated way, including
bit-blasting [33], pattern matching [34], and program synthe-
sis [21, 35]. Unfortunately, state-of-the-art methods are still
premature: they either can only analyze rather simple MBA
expressions (due to the high performance cost), or they can
only detect known MBA expressions in a range of ﬁxed pat-
terns. Many existing deobfuscation approaches only focus
on the syntactic features of MBA expressions, but ignore the
inner semantics. We feel the crux of these limitations is the
lack of a deep understanding of MBA obfuscation mechanism,
which has a solid mathematical foundation. In addition, no
standard MBA expression benchmark exists to serve as a base-
line for evaluating the effectiveness of an analysis method.
To bridge these gaps, we investigate the mathematical
mechanism of MBA obfuscation and prove a hidden two-
way transformation feature in the MBA obfuscation design:
we discover that the MBA transformation behaves the same
on 1-bit variables and any-length integers. Our ﬁnding reveals
a new opportunity to directly simplify MBA expressions in
1-bit space. In light of this insight, we develop a novel tech-
nique, called MBA-Blast, to effectively reduce convoluted
MBA expressions to simple forms. The key idea is to trans-
form all bitwise expressions to speciﬁc MBA forms on 1-bit
space and then perform arithmetic reduction. After replacing
the bitwise operators, traditional arithmetic reduction laws
can be smoothly applied, and they signiﬁcantly promote the
simpliﬁcation efﬁciency. The correctness of our method is
guaranteed by the two-way transformation feature, that is, the
simpliﬁcation result in 1-bit space is also correct in any-length
integer space. We provide a mathematical proof to support
this claim.
To demonstrate its practical viability, we implement MBA-
Blast as an prototype and evaluate it on a comprehensive
dataset including 10, 000 diversiﬁed MBA expressions. Our
evaluation demonstrates that MBA-Blast signiﬁcantly out-
performs existing approaches. Only MBA-Blast succeeds
in simplifying all obfuscated MBA expression with negli-
gible overhead. We also evaluate MBA-Blast in assisting
real-world obfuscated binary code analysis, such as solving
MBA-powered opaque predicates with an SMT solver, ana-
lyzing virtualization obfuscated malware, and reverse engi-
neering the encryption key generation algorithm used by a
ransomware. Our results show that MBA-Blast is an appealing
method to simplify MBA obfuscated expressions.
The impact of our work is mainly on areas related to soft-
ware analysis. MBA-Blast can help human analysts simplify
complexity expressions and understand their behaviors. From
the view of arms race, our work also beneﬁts the obfusca-
tion community, because we expose the limitation of existing
MBA design so that further improvements can be developed.
In summary, we make the following key contributions:
• We demystify the underlying mechanism of MBA ob-
fuscation and identify a two-way transformation feature.
The generated MBA rules have the same behavior on
1-bit Boolean variables and any-length integers. We are
the ﬁrst to prove the existence of this feature.
• This ﬁnding paves the way for our novel MBA deob-
fuscation technique, called MBA-Blast. Our method re-
places bitwise operations with speciﬁc MBA expressions.
In this way, we can seamlessly adopt arithmetic reduc-
tion rules to simplify MBA obfuscated expressions.
• Our proposed approach is implemented as a prototype
evaluated on a comprehensive MBA benchmark and
real-world environment. The result shows that MBA-
Blast outperforms existing tools in terms of better accu-
racy and efﬁciency. MBA-Blast’s source code and the
MBA benchmark are available at https://github.
com/softsec-unh/MBA-Blast.
2 Background
For pedagogical reasons, we ﬁrst introduce the technical back-
ground needed to understand MBA obfuscation. Then we
discuss the limitations of existing MBA deobfuscation work,
which also serves as a motivation for our research.
2.1 MBA Expression
As noted above, Mixed-Boolean-Arithmetic (MBA) expres-
sions mix Boolean operators (∧, ∨, ¬, ⊕, . . .) and traditional
integer arithmetic operations (+, −, ×, . . .). Historically, MBA
is known as smart tricks in algorithm optimizations. For in-
stance, HAKMEM Memo [36] and Hacker’s Delight [37]
collect numerous identity equations involving addition and
subtraction combined with logical operations. Two examples
are listed as follows.
x − y = x + ¬y + 1
x ⊕ y = x ∨ y − x ∧ y
(1)
(2)
1702    30th USENIX Security Symposium
USENIX Association
These two MBA identity equations are used for optimiza-
tion purpose. Equation (1) shows how to build a subtracter
from an adder and (2) presents a way to implement “exclusive
or” using only three instructions, e.g., on a RISC machine.
For a long time, MBA broadly scatters in various ﬁelds of
computer science, e.g., optimization, data encoding, or com-
pression, even without a formal name.
Zhou et al. [24, 38] extends the existing MBA concept to
a more general model called “Boolean-arithmetic algebras”,
which generates MBA identities based on the following for-
mal deﬁnition.
system. Blazy and Hutin [42] integrate formally veriﬁed MBA
obfuscation rules into the generated binaries by the CompCert
C compiler [43]. Recently, Xmark adopted MBA obfuscation
to conceal the static signatures of software watermarking [13].
As malware authors always seek more advanced evasion tech-
niques to stay under the detection radar, it did not take them
long to become aware of the practical advantage of MBA
obfuscation. ERCIM News reported in 2016 that MBA obfus-
cation has been detected in malware compilation chains [44].
We also observe MBA used in malware and virtualization
obfuscation as shown in Section 7.6 and 7.7.
Deﬁnition 1. An MBA expression is:
aiei(x1, . . . , xt )
∑
i∈I
where ai is a constant coefﬁcient, ei are bitwise expressions
of variables x1, . . . , xt . aiei is called a term in the MBA ex-
pression.
Expression (3) gives a more complex MBA example within
the deﬁnition above. The MBA includes 5 terms: x, y, −x ∧
y, −3(x ⊕ y) and 5. Note that if the Boolean expression is
True, the term only has the coefﬁcient, like the last term 5.
x + y − x ∧ y − 3(x ⊕ y) + 5
(3)
2.2 MBA Obfuscation
Because MBA identities expose the equivalence between two
expressions, they are directly applicable to program obfusca-
tion to transforms a simple expression into a complex form.
For example, equation (1) and (2) can be used for obfuscat-
ing x − y and x ⊕ y. More similar MBA identity equations
can be found in Hacker’s Delight [37]. Eyrolles [39] and
Banescu [40] enumerate a collection of MBA equations for
obfuscation. Several MBA obfuscation rules for x + y are
listed as follows. Zhou et al. [24] prove that any Boolean func-
tion has its non-trivial MBA expression equivalents, which
lays the theoretical foundation of MBA obfuscation.
x + y → (x ∨ y) + (¬x ∨ y) − (¬x)
x + y → (x ∨ y) + y − (¬x ∧ y)
x + y → (x ⊕ y) + 2y − 2(¬x ∧ y)
x + y → y + (x ∧ ¬y) + (x ∧ y)
Due to the simplicity in implementation and the desirable
mathematical principle, MBA obfuscation has captured inter-
ests widely from academia and industry. For example, Quark-
slab [27], Cloakware [28], and Irdeto [29] include MBA ob-
fuscation in their commercial products. Tigress [41], an aca-
demic C source code diversiﬁer/obfuscator, encodes integer
variables and expressions into complex MBA forms [25, 26].
Mougey and Gabriel [30] present a real-world MBA example
found in an obfuscated Digital Rights Management (DRM)
2.3 Strength of MBA Obfuscation
MBA obfuscation is ideally applicable for hiding sensitive
variables and secret algorithms, such as magic numbers in
cryptographic functions [45] and encryption key generation
procedures in ransomware [46]. Compared to other obfusca-
tion techniques, MBA obfuscation exhibits multiple distinct
advantages. We elaborate on the strength of MBA obfusca-
tion in terms of potency, resilience, cost, and correctness. The
ﬁrst three metrics were proposed by Collberg et al.’s pioneer
work [47] to evaluate an obfuscation scheme. Correctness is
another critical problem emerging from recent obfuscation
development, but it has been largely overlooked in prior work.
Potency. Potency refers to how complex or unreadable the
obfuscated result is to a human security analyst. MBA obfus-
cation places a heavy burden on human reverse-engineers in
four ways: (1) signiﬁcantly increases the number of Boolean
and arithmetic operators; (2) introduces a multitude of new
integers and bit-vectors; (3) hides the real parameters among
them; (4) shufﬂes the calculation order. Manually reversing
an MBA expression to its initial form is very challenging.
Figure 1 shows an example of the code before and after MBA
obfuscation.
MBA obfuscation impedes the effort of reverse engineering
data structures from binary code [48]. A constant obfuscated
by MBA can achieve the similar effect as an “opaque con-
stant” [49]: it allows users to load a constant into a register,
but static analyzers cannot determine the exact value. Like
opaque constants, MBA obfuscation can be used to mislead
the target of unconditional jump and call instructions, hide a
variable’s address, and complicate deﬁne-use chain analysis.
Resilience. Resilience represents the robustness of an ob-
fuscation method in terms of resisting an automatic deob-
fuscator. Eyrolles [39] applies multiple simpliﬁcation meth-
ods (e.g., mathematical reduction, compiler optimization, and
SMT solver simpliﬁcation) on expressions with MBA obfus-
cation, but none of them can effectively produce a correct
simpliﬁcation result. Bardin et al. present a novel technique
in IEEE S&P’17 to assist obfuscated binary analysis, called
backward-bounded dynamic symbolic execution [20]. How-
ever, the authors admitted that MBA obfuscation introduces
USENIX Association
30th USENIX Security Symposium    1703
int fun(int x,int y,int z)
{
int fun(int x,int y,int z)
{
int c;
c = x+y;
int c;
c = 4*(~x&y)-(x^y)-(x|y)
+4*~(x|y)-~(x^y)-~y-
(x|~y)+1+6*x+5*~z+
(~(x^z))-(x|z)-2*~x-
4*(~(x|z))-4*(x&~z)