ploiting Global Data-Flow Optimization in a Generalized Packet Filter
Architecture. In SIGCOMM, 1999.
[12] Al Bessey, Ken Block, Ben Chelf, Andy Chou, Bryan Fulton, Seth
Hallem, Charles Henri-Gros, Asya Kamsky, Scott McPeak, and Dawson
Engler. A Few Billion Lines of Code Later: Using Static Analysis to
Find Bugs in the Real World. CACM, 53(2), 2010.
[13] Atri Bhattacharyya, Andrés Sánchez, Esmaeil M. Koruyeh, Nael Abu-
Ghazaleh, Chengyu Song, and Mathias Payer. SpecROP: Speculative
Exploitation of ROP Chains. In RAID, 2020.
[14] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner,
Alessandro Sorniotti, Babak Falsaﬁ, Mathias Payer, and Anil Kurmus.
SMoTherSpectre: Exploiting Speculative Execution through Port Con-
tention. In CCS, 2019.
[15] Daniel Borkmann.
bpf: prevent out of bounds speculation
https://git.kernel.org/pub/
pointer
arithmetic.
on
scm/linux/kernel/git/torvalds/linux.git/commit/?id=
979d63d50c0c0f7bc537bf821e056cc9fe5abd38, 2019.
[16] Daniel Borkmann.
bpf: Fix leakage under speculation on
https://git.kernel.org/pub/
branches.
mispredicted
scm/linux/kernel/git/torvalds/linux.git/commit/?id=
9183671af6dbf60a1219371d4ed73e23f43b49db, 2021.
[17] James Bucek, Klaus-Dieter Lange, and Jóakim v. Kistowski. SPEC
CPU2017: Next-Generation Compute Benchmark. In ICPE, 2018.
[18] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Ben-
jamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin,
and Daniel Gruss. A Systematic Evaluation of Transient Execution
Attacks and Defenses. In USENIX Security, 2019.
[19] Claudio Canella, Michael Schwarz, Martin Haubenwallner, Martin
Schwarzl, and Daniel Gruss. KASLR: Break It, Fix It, Repeat. In CCS,
2020.
[20] Dan Carpenter. Smatch!!! http://smatch.sourceforge.net, 2003.
[21] Chandler Carruth. Speculative Load Hardening. https://llvm.org/
docs/SpeculativeLoadHardening.html, 2018.
[22] Sunjay Cauligi, Craig Disselkoen, Klaus v. Gleissenthall, Dean Tullsen,
Deian Stefan, Tamara Rezk, and Gilles Barthe. Constant-Time Founda-
tions for the New Spectre Era. In PLDI, 2020.
[23] CodeMachine. Windows Kernel Virtual Address Layout. https:
//www.codemachine.com/article_x64kvas.html, 2020.
[24] Jonathan Corbet. Relief for retpoline pain. LWN (https://lwn.net/
Articles/774743/), 2018.
[25] J. Criswell, N. Dautenhahn, and V. Adve. KCoFI: Complete Control-
Flow Integrity for Commodity Operating System Kernels. In IEEE
S&P, 2014.
[26] Dmitry Evtyushkin, Ryan Riley, Nael Abu-Ghazaleh, and Dmitry Pono-
marev. BranchScope: A New Side-Channel Attack on Directional
Branch Predictor. In ASPLOS, 2018.
[27] Jacob Fustos, Farzad Farshchi, and Heechul Yun. SpectreGuard: An
Efﬁcient Data-centric Defense Mechanism against Spectre Attacks.
DAC, 2019.
[28] X. Ge, N. Talele, M. Payer, and T. Jaeger. Fine-Grained Control-Flow
Integrity for Kernel Software. In IEEE Euro S&P, 2016.
[29] Elazar Gershuni, Nadav Amit, Arie Gurﬁnkel, Nina Narodytska,
Jorge A. Navas, Noam Rinetzky, Leonid Ryzhyk, and Mooly Sagiv.
Simple and Precise Static Analysis of Untrusted Linux Kernel Exten-
sions. In PLDI, 2019.
2414    30th USENIX Security Symposium
USENIX Association
[30] Enes Gökta¸s, Kaveh Razavi, Georgios Portokalidis, Herbert Bos, and
Cristiano Giuffrida. Speculative Probing: Hacking Blind in the Spectre
Era. In CCS, 2020.
[31] Marco Guarnieri, Boris Köpf, José F. Morales, Jan Reineke, and Andrés
Sánchez. Spectector: Principled detection of speculative information
ﬂows. In IEEE S&P, 2020.
[32] Noam Hadad and Jonathan Afek. Overcoming (some) Spectre browser
mitigations. https://alephsecurity.com/2018/06/26/spectre-
browser-query-cache/, 2018.
[33] Istvan Haller, Yuseok Jeon, Hui Peng, Mathias Payer, Cristiano Giuf-
frida, Herbert Bos, and Erik van der Kouwe. TypeSan: Practical Type
Confusion Detection. In CCS, 2016.
[34] John L. Hennessy and David A. Patterson. Computer Architecture,
Sixth Edition: A Quantitative Approach. Morgan Kaufmann Publishers
Inc., 6th edition, 2017.
[35] Jann Horn. Issue 1711: Linux: eBPF Spectre v1 mitigation is insuf-
ﬁcient. https://bugs.chromium.org/p/project-zero/issues/
detail?id=1711, 2018.
[36] Jann Horn. Speculative execution, variant 4: speculative store by-
https://bugs.chromium.org/p/project-zero/issues/
pass.
detail?id=1528, 2018.
[37] Intel.
Bounds Check Bypass / CVE-2017-5753 /
INTEL-
SA-00088. https://software.intel.com/security-software-
guidance/software-guidance/bounds-check-bypass, 2018.
[38] Intel. Code Generation Options: mconditional-branch, Qconditional-
https://software.intel.com/content/www/us/
branch.
en/develop/documentation/cpp-compiler-developer-
guide-and-reference/top/compiler-reference/compiler-
options/compiler-option-details/code-generation-
options/mconditional-branch-qconditional-branch.html,
2020.
[39] Brian Krzanich (Intel).
the Silicon
Level. https://newsroom.intel.com/editorials/advancing-
security-silicon-level/, 2018.
Advancing Security at
[40] Yuseok Jeon, Priyam Biswas, Scott Carr, Byoungyoung Lee, and Math-
ias Payer. HexType: Efﬁcient Detection of Type Confusion Errors for
C++. In CCS, 2017.
[41] Khaled N. Khasawneh, Esmaeil Mohammadian Koruyeh, Chengyu
Song, Dmitry Evtyushkin, Dmitry Ponomarev, and Nael B. Abu-
Ghazaleh. SafeSpec: Banishing the Spectre of a Meltdown with
Leakage-Free Speculation. In DAC, 2019.
[42] Vladimir Kiriansky, Ilia A. Lebedev, Saman P. Amarasinghe, Srinivas
Devadas, and Joel Emer. DAWG: A Defense Against Cache Timing
Attacks in Speculative Execution Processors. In MICRO, 2018.
[43] Vladimir Kiriansky and Carl Waldspurger. Speculative Buffer Over-
ﬂows: Attacks and Defenses. arXiv e-prints, 1807.03757, 2018.
[44] Ofek Kirzner and Adam Morrison. CVE-2021-33624: Linux kernel
BPF protection against speculative execution attacks can be bypassed to
read arbitrary kernel memory. https://www.openwall.com/lists/
oss-security/2021/06/21/1, 2021.
[45] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike
Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael
Schwarz, and Yuval Yarom. Spectre Attacks: Exploiting Speculative
Execution. In IEEE S&P, 2019.
[46] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu
Song, and Nael Abu-Ghazaleh. Spectre Returns! Speculation Attacks
using the Return Stack Buffer. In WOOT, 2018.
[47] Esmaeil Mohammadian Koruyeh, Shirin Hajl Amin Shirazi, Khaled
Khasawneh, Chengyu Song, and Nael Abu-Ghazaleh. SPECCFI: Miti-
gating Spectre Attacks Using CFI Informed Speculation. In IEEE S&P,
2020.
[48] Chris Lattner and Vikram Adve. LLVM: A Compilation Framework
for Lifelong Program Analysis & Transformation. In CGO, 2004.
[49] Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee. Type
Casting Veriﬁcation: Stopping an Emerging Attack Vector. In USENIX
Security, 2015.
[50] Peinan Li, Lutan Zhao, Rui Hou, Lixin Zhang, and Dan Meng. Condi-
tional Speculation: An Effective Approach to Safeguard Out-of-Order
Execution Against Spectre Attacks. In HPCA, 2019.
[51] Linux. Mitigating speculation side-channels. https://www.kernel.
org/doc/Documentation/speculation.txt, 2018.
[52] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner
Haas, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and
Mike Hamburg. Meltdown: Reading Kernel Memory from User Space.
In USENIX Security, 2018.
[53] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee. Last-Level Cache
Side-Channel Attacks are Practical. In IEEE S&P, 2015.
[54] Giorgi Maisuradze and Christian Rossow. Ret2Spec: Speculative Exe-
cution Using Return Stack Buffers. In CCS, 2018.
[55] Ross Mcilroy, Jaroslav Sevcik, Tobias Tebbi, Ben L. Titzer, and Toon
Verwaest. Spectre is here to stay: An analysis of side-channels and
speculative execution. arXiv e-prints, 1902.05178, 2019.
[56] Microsoft. C++ Developer Guidance for Speculative Execution Side
Channels. https://docs.microsoft.com/en-us/cpp/security/
developer-guidance-speculative-execution?view=vs-2019,
2018.
[57] Microsoft. Spectre mitigations in MSVC.
https://devblogs.
microsoft.com/cppblog/spectre-mitigations-in-msvc/,
2018.
[58] Microsoft. /Qspectre. https://docs.microsoft.com/en-us/cpp/
build/reference/qspectre-load?view=vs-2019, 2019.
[59] Microsoft. /Qspectre-load. https://docs.microsoft.com/en-us/
cpp/build/reference/qspectre-load?view=vs-2019, 2020.
[60] Paul Muntean, Sebastian Wuerl, Jens Grossklags, and Claudia Eck-
ert. CastSan: Efﬁcient Detection of Polymorphic C++ Object Type
Confusions with LLVM. In ESORICS, 2018.
[61] Shravan Narayan, Craig Disselkoen, Daniel Moghimi, Sunjay Cauligi,
Evan Johnson, Zhao Gang, Anjo Vahldiek-Oberwagner, Ravi Sahita,
Hovav Shacham, Dean Tullsen, and Deian Stefan. Swivel: Hardening
WebAssembly against Spectre. In USENIX Security Symposium, 2021.
[62] Oleksii Oleksenko, Bohdan Trach, Tobias Reiher, Mark Silberstein, and
Christof Fetzer. You Shall Not Bypass: Employing data dependencies
to prevent Bounds Check Bypass. arXiv e-prints, arXiv:2005.00294,
2018.
[63] Oleksii Oleksenko, Bohdan Trach, Mark Silberstein, and Christof Fet-
zer. SpecFuzz: Bringing Spectre-type vulnerabilities to the surface. In
USENIX Security, 2020.
[64] Pancake. Radare2. https://rada.re/n/.
[65] Xiang (Jenny) Ren, Kirk Rodrigues, Luyuan Chen, Camilo Vega,
Michael Stumm, and Ding Yuan. An Analysis of Performance Evolu-
tion of Linux’s Core Operations. In SOSP, 2019.
[66] Gururaj Saileshwar and Moinuddin K. Qureshi. CleanupSpec: An
“Undo” Approach to Safe Speculation. In MICRO, 2019.
[67] Christos Sakalis, Stefanos Kaxiras, Alberto Ros, Alexandra Jimborean,
and Magnus Själander. Efﬁcient Invisible Speculative Execution
Through Selective Delay and Value Prediction. In ISCA, 2019.
[68] Jay Schulist, Daniel Borkmann, and Alexei Starovoitov. Linux Socket
Filtering aka Berkeley Packet Filter (BPF). https://www.kernel.
org/doc/Documentation/networking/filter.txt, 2018.
[69] Michael Schwarz, Moritz Lipp, Claudio Canella, Robert Schilling, Flo-
rian Kargl, and Daniel Gruss. ConTExT: Leakage-Free Transient
Execution. In NDSS, 2020.
USENIX Association
30th USENIX Security Symposium    2415
[70] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian
Stecklina, Thomas Prescher, and Daniel Gruss. ZombieLoad: Cross-
privilege-boundary data sampling. In CCS, 2019.
[89] Oﬁr Weisse, Ian Neal, Kevin Loughlin, Thomas Wenisch, and Baris
Kasikci. NDA: Preventing Speculative Execution Attacks at Their
Source. In MICRO, 2019.
[71] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Man-
gard. Fantastic Timers and Where to Find Them: High-Resolution
Microarchitectural Attacks in JavaScript. In FC, 2017.
[90] Wikipedia.
Usage share of operating systems.
https:
//en.wikipedia.org/wiki/Usage_share_of_operating_
systems#Public_servers_on_the_Internet, 2020.
[91] Mengjia Yan, Jiho Choi, Dimitrios Skarlatos, Adam Morrison, Christo-
pher W. Fletcher, and Josep Torrellas. InvisiSpec: Making Speculative
Execution Invisible in the Cache Hierarchy. In MICRO, 2018.
[92] Yuval Yarom and Katrina Falkner. Flush+Reload: a high resolution,
low noise, L3 cache side-channel attack. In USENIX Security, 2014.
[93] Jiyong Yu, Lucas Hsiung, Mohamad El Hajj, and Christopher W.
Fletcher. Data Oblivious ISA Extensions for Side Channel-Resistant
and High Performance Computing. In NDSS, 2019.
[94] Jiyong Yu, Namrata Mantri, Josep Torrellas, Adam Morrison, and
Christopher W. Fletcher. Speculative Data-Oblivious Execution (SDO):
Mobilizing Safe Prediction For Safe and Efﬁcient Speculative Execu-
tion. In ISCA, 2020.
[95] Jiyong Yu, Mengjia Yan, Artem Khyzha, Adam Morrison, Josep Torrel-
las, and Christopher W. Fletcher. Speculative Taint Tracking (STT): A
Comprehensive Protection for Speculatively Accessed Data. In MICRO,
2019.
[96] Mingwei Zhang and R. Sekar. Control Flow Integrity for COTS Bina-
ries. In USENIX Security, 2013.
[97] To Zhang, Kenneth Koltermann, and Dmitry Evtyushkin. Exploring
Branch Predictors for Constructing Transient Execution Trojans. In
ASPLOS, 2020.
[72] Michael Schwarz, Martin Schwarzl, Moritz Lipp, and Daniel Gruss.
Netspectre: Read arbitrary memory over network. In ESORICS, 2019.
[73] David Sehr, Robert Muth, Cliff Bifﬂe, Victor Khimenko, Egor Pasko,
Karl Schimpf, Bennet Yee, and Brad Chen. Adapting Software Fault
Isolation to Contemporary CPU Architectures. In USENIX Security,
2010.
[74] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and
Dmitry Vyukov. AddressSanitizer: A Fast Address Sanity Checker. In
USENIX ATC, 2012.
[75] Alexei Starovoitov. bpf: enable non-root eBPF programs (Linux 4.4
commit), 2015.
[76] Alexei Starovoitov. bpf: prevent out-of-bounds speculation. https:
//lwn.net/Articles/743288/, 2018.
[77] Mohammadkazem Taram, Ashish Venkat, and Dean Tullsen. Context-
Sensitive Fencing: Securing Speculative Execution via Microcode
Customization. In ASPLOS, 2019.
[78] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway,
Úlfar Erlingsson, Luis Lozano, and Geoff Pike. Enforcing Forward-
Edge Control-Flow Integrity in GCC & LLVM. In USENIX Security,
2014.
[79] Robert M Tomasulo. An Efﬁcient Algorithm for Exploiting Multiple
IBM Journal of Research and Development, (1),
Arithmetic Units.
1967.
[80] Linus Torvalds. Add __user__kernel address space modiﬁers. https:
//lwn.net/Articles/28348/, 2003.
[81] Paul Turner. Retpoline: a software construct for preventing branch-
https://support.google.com/faqs/answer/
target-injection.
7625886, 2018.
[82] Jo Van Bulck, Marina Minkin, Oﬁr Weisse, Daniel Genkin, Baris
Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yu-
val Yarom, and Raoul Strackx. Foreshadow: Extracting the Keys to
the Intel SGX Kingdom with Transient Out-of-Order Execution. In
USENIX Security, 2018.
[83] Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina
Minkin, Daniel Genkin, Yarom Yuval, Berk Sunar, Daniel Gruss, and
Frank Piessens. LVI: Hijacking Transient Execution through Microar-
chitectural Load Value Injection. In IEEE S&P’20, 2020.
[84] Stephan van Schaik, Cristiano Giuffrida, Herbert Bos, , and Kaveh
Razavi. Malicious Management Unit: Why Stopping Cache Attacks in
Software is Harder Than You Think. In USENIX Security, 2018.
[85] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo,
Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.
RIDL: Rogue in-ﬂight data load. In IEEE S&P, 2019.
[86] Stephan van Schaik, Marina Minkin, Andrew Kwong, Daniel Genkin,
and Yuval Yarom. CacheOut: Leaking data on Intel CPUs via cache
evictions. In IEEE S&P, 2021.
[87] Marco Vassena, Craig Disselkoen, Klaus von Gleissenthall, Sunjay
Cauligi, Rami Gökhan Kıcı, Ranjit Jhala, Dean Tullsen, and Deian Ste-
fan. Automatically Eliminating Speculative Leaks from Cryptographic
Code with Blade. In POPL, 2021.
[88] Guanhua Wang, Sudipta Chattopadhyay, Ivan Gotovchits, Tulika Mi-
tra, and Abhik Roychoudhury. oo7: Low-overhead Defense against
Spectre attacks via Program Analysis. IEEE Transactions on Software
Engineering, 2019.
2416    30th USENIX Security Symposium
USENIX Association