# Title: VulPecker: An Automated Vulnerability Detection System Based on Code Similarity Analysis

## Authors:
- Zhen Li†§
- Deqing Zou†∗
- Shouhuai Xu‡
- Hai Jin†
- Hanchao Qi†
- Jie Hu†

### Affiliations:
- † Services Computing Technology and System Lab, Big Data Technology and System Lab, Cluster and Grid Computing Lab, School of Computer Science and Technology, Huazhong University of Science and Technology, Wuhan, 430074, China
- § School of Computer Science and Technology, Hebei University, Baoding, 071002, China
- ‡ Department of Computer Science, University of Texas at San Antonio, San Antonio, TX 78249, USA

### Contact:
- PI: EMAIL

## Abstract
Software vulnerabilities are a fundamental cause of many security attacks. Despite rapid vulnerability patching, the problem remains complex due to the presence of the same vulnerability in multiple software copies, which are difficult to track (e.g., different versions of libraries and applications). This necessitates tools that can automatically search for vulnerable software with respect to a given vulnerability.

In this paper, we introduce Vulnerability Pecker (VulPecker), a system for automatically detecting whether a piece of software source code contains a given vulnerability. The key insight behind VulPecker is to leverage (i) a set of features that characterize patches and (ii) code-similarity algorithms, noting that no single code-similarity algorithm is effective for all kinds of vulnerabilities.

Experiments show that VulPecker detects 40 vulnerabilities not published in the National Vulnerability Database (NVD). Among these, 18 are unknown and have yet to be confirmed by vendors (anonymized for ethical reasons), and the other 22 have been "silently" patched by vendors in later releases.

### CCS Concepts
- Security and privacy → Software security engineering

### Keywords
- Vulnerability detection, code similarity, vulnerability signature

### Introduction
Patching all vulnerabilities in software systems is challenging due to code reuse, where a vulnerability may exist silently in multiple software programs without adequate tracking. This is known as the vulnerability prevalence problem. For example, the same webpage rendering engine is used by Safari and Chrome, and the same Flash libraries are used by Adobe Reader and Adobe Air. Despite the presence of 13 automated patching mechanisms, at least 86% of computers remain unpatched when exploits become available.

To address this, we focus on the source code vulnerability detection problem: Given a vulnerability and the source code of a target program, how can we automatically detect whether the program contains the vulnerability and, if so, locate the vulnerable code?

### Our Contributions
We present Vulnerability Pecker (VulPecker), a system for automatically detecting whether a program contains a given vulnerability. We address two main challenges:

1. **Data Availability**: There is no readily available dataset for this research. We build a Vulnerability Patch Database (VPD) and a Vulnerability Code Instance Database (VCID) containing 19 products with 1,761 vulnerabilities and 455 code reuse instances, respectively. These databases are publicly available at [https://github.com/vulpecker/Vulpecker](https://github.com/vulpecker/Vulpecker).

2. **Algorithm Selection**: No single code-similarity algorithm is effective for all vulnerabilities. We design algorithms to automatically select the most effective code-similarity algorithm(s) for a specific vulnerability using vulnerability diff hunk features derived from patches.

### Experiments
Our experiments show that VulPecker detects 40 vulnerabilities not published in the NVD. Among these, 18 are unknown and have yet to be confirmed by vendors, while the other 22 have been "silently" patched by vendors in later releases.

### Paper Structure
- Section 2: Related Work
- Section 3: Design of VulPecker
- Section 4: Implementation of VulPecker
- Section 5: Experimental Results
- Section 6: Limitations
- Section 7: Conclusion and Future Work

## 2. Related Work
Vulnerability detection approaches include pattern-based and code-similarity-based methods. Pattern-based methods require multiple instances of similar vulnerabilities, limiting their usefulness. Code-similarity-based methods, which only require a single instance, are based on the intuition that similar programs may contain the same vulnerability. 

Code-similarity comparison algorithms are characterized by three attributes: code-fragment level, code representation, and comparison method. Different levels of code fragments, representations, and comparison methods are discussed, along with their effectiveness for vulnerability detection.

## 3. Design
### 3.1 Overview
Figure 1 provides an overview of VulPecker, which has two phases: a learning phase and a detection phase. The learning phase selects the most effective code-similarity algorithm(s) for a given vulnerability, and the detection phase uses these algorithms to generate vulnerability signatures and detect vulnerabilities in target programs.

### 3.2 Detailed Components
- **Input**: Target programs and CVE-IDs
- **Output**: Vulnerability locations
- **Components**:
  - **Vulnerability Patch Database (VPD)**: Contains 19 products with 1,761 vulnerabilities.
  - **Vulnerability Code Instance Database (VCID)**: Contains 455 code reuse instances.
  - **Vulnerability Diff Hunk Feature Generator**: Generates features from vulnerability patches.
  - **Algorithm Selection Engine**: Selects the most effective code-similarity algorithm(s).
  - **Vulnerability Signature Generator**: Generates vulnerability signatures.
  - **Target Program Signature Generator**: Generates signatures for target programs.
  - **Vulnerability Detection Engine**: Detects vulnerabilities in target programs.

This structured approach ensures that VulPecker can effectively and efficiently detect vulnerabilities in software source code.