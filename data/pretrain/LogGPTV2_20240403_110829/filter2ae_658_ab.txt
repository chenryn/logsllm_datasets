         * @param string|null $_csrfToken
         * @return bool
         */
        public function validateToken(string $_csrfToken)
        {
            $res = $this->_validate($_csrfToken);
            if ($res === false){
                // 移除客户端token
                $cookieKey = $this->getCookieKey();
                cookie($cookieKey,null);
            }
            // 验证完成，重置token【注：无论是否成功】
            $this->refreshCsrfToken();
            return $res;
        }
        /**
         * 验证token值
         * @param string|null $_csrfToken
         * @return bool
         */
        protected function _validate(string $_csrfToken)
        {
            if (!$_csrfToken || !is_scalar($_csrfToken)){
                return false;
            }
            // 拆出token验证长度和过期时间
            @list($token,$expireTime) = explode("-",$_csrfToken);
            if (mb_strlen($token) != 40){
                return false;
            }
            // 获取SESSION key
            $key = $this->getTokenKey();
            $csrfToken = session($key);
            if (!$csrfToken){
                return false;
            }
            // 验证是否通过，返回失败移除客户端token
            if (strcasecmp($csrfToken,$_csrfToken) != 0){
                return false;
            }
            // 验证token是否过期
            if ($expireTime shuffleStr);
            $len = mb_strlen($originStr);
            if ($len > $this->options['token_len']){
                $this->options['token_len'] = $len;
            }
            // 按长度截取
            $temp = mb_substr($originStr,0,$this->options['token_len']);
            // 拼接随机码和时间戳
            $temp .= uniqid().time();
            // sha加密
            $csrfToken = sprintf(
                "%s-%s",sha1($temp),$this->getExpireTime()
            );
            return $csrfToken;
        }
        /**
         * 获取TOKEN 完整KEY
         * @return string
         */
        protected function getTokenKey()
        {
            return $this->options['prefix'].$this->key;
        }
        /**
         * 获取cookie KEY
         * @return string
         */
        protected function getCookieKey()
        {
            return $this->options['cookie_token'].$this->key;
        }
这个是自动生成csrf令牌代码的一部分，大概有以上特征的就可以合理怀疑了
对于 CSRF cookie 常用的一些全局变量
    CSRF_COOKIE_NAME = 'csrftoken'  # 默认的 key 名称
    CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52  # 存活时间
    CSRF_COOKIE_DOMAIN = None  # 在那个域名下生效
    CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'  # 请求头的名称
## WebSocket劫持的影响
伪装成受害者用户执行未经授权的操作。与常规 CSRF 一样，攻击者可以向服务器端应用程序发送任意消息。如果应用程序使用客户端生成的 WebSocket
消息来执行任何敏感操作，则攻击者可以跨域生成合适的消息并触发这些操作。
检索用户可以访问的敏感数据。与常规 CSRF 不同，跨站点 WebSocket 劫持使攻击者可以通过被劫持的 WebSocket
与易受攻击的应用程序进行双向交互。如果应用程序使用服务器生成的 WebSocket
消息向用户返回任何敏感数据，则攻击者可以拦截这些消息并捕获受害用户的数据。
总而言之
  * 伪装成受害用户执行未经授权的操作。
  * 检索用户可以访问的敏感数据。（与传统的CSRF不同，通过被劫持的WebSocket与易受攻击的应用程序进行双向交互。）
## 一个实例
靶场是bp的官方靶场
该在线商店具有使用WebSockets实现的实时聊天功能。
为了解决实验室问题，请使用漏洞利用服务器托管 HTML/JavaScript 负载，该负载使用跨站点 WebSocket
劫持攻击来窃取受害者的聊天记录，然后使用此访问他们的帐户。
时时聊天界面如下
补充一个重要条件，要用火狐浏览器来进行抓包操作，要不会导致WebSocket抓不到的尴尬局面
我们首先观察一下/chat的报文，看看有没有CSRF令牌
    GET /chat HTTP/1.1
    Host: ac351fbb1f9283b3c0951a8f008900c7.web-security-academy.net
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:100.0) Gecko/20100101 Firefox/100.0
    Accept: */*
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Sec-WebSocket-Version: 13
    Origin: https://ac351fbb1f9283b3c0951a8f008900c7.web-security-academy.net
    Sec-WebSocket-Key: YMjuNMYTvLI96SD0GLDM0A==
    Connection: keep-alive, Upgrade
    Cookie: session=81Q5ZYqw7qoiHwleuELCxRHqOM3nQ1z2
    Sec-Fetch-Dest: websocket
    Sec-Fetch-Mode: websocket
    Sec-Fetch-Site: same-origin
    Pragma: no-cache
    Cache-Control: no-cache
    Upgrade: websocket
不难发现，其中用到了WebSocket协议且没有与上方写到的CSRF令牌的相关内容，所以说不存在csrf令牌
然后将以下代码放到靶场自带的东西中
然后将your-websocket-url替换成目前聊天框的URL：比如`wss://ace71f371e9e475580b8003800fc0040.web-security-academy.net/chat`，wss记得要改
同时将your-collaborator-url替换成Burp Collaborator Client生成的payload  
下面介绍一下Burp Collaborator Client
可以将他简单理解为是Burp给我们提供的一个外部服务器
测试跨站可能有些功能插入恶意脚本后无法立即触发，例如提交反馈表单，需要等管理员打开查看提交信息时才会触发，程序不进行详细的回显信息，而只是返回对或者错时，我们都可以叫它盲。
我们需要一个外部的独立的服务器，可以通过域名 url
进行访问。然后在测试盲跨站插入恶意脚本时带上这个服务器的地址，在测试盲写我们这个服务器的地址。如果存在上述的这些问题，那么目标服务器就会去访问我们自己的服务器，我们自己服务器要做的就是记录别人访问自己的信息，记录其发送内容相应内容等，因为目标服务器不会给前台返回任何信息，而在和我们外部服务器交互时，我们外部服务器会记录其交互的过程和内容，从而有利于我们判断漏洞的存在。
Burp 给我们提供了这个外部服务器，叫 Collaborator
下面这个图可以大体的代表 collaborator 的大体工作流程，首先 burp 发送 payload 给目标程序，以下图为例，其 payload
为外部的服务器 url 地址，随后目标程序若进行解析或则引用调用等，则会去访问这个地址，而这个地址是我们的 collaborator 服务器，所以
collaborator 会记录其访问的请求信息以及响应信息和 dns 的信息。而当 burp 发送 payload 后，就会不断的去问
collaborator 服务器，你收到我发送的 payload 交互了么，这时 collaborator 就会将交互信息告诉 burp，burp
最后进行报告。
这个好东西在哪呢？这里使用的是Burp的官方默认服务
设置好后，我们可以通过工具栏的 burp 下的 burp collaborator client 来运行
点击复制到粘贴板就可以把他的payload url复制下来使用了，也就是上面提到的Burp Collaborator Client生成的payload
我们回到题目本身，写完是这样的
可以用view exploit进行攻击测试，由回应了之后就可以直接发给被攻击方了
之后我们在Collaborator Client里面进行轮询，多轮询几遍就可以在其中的某一个报文中找出账号密码了