图 3-1 RTF与MHT文件格式对比
如果使用RTF文件格式构造可触发漏洞的文件，在解码后会在文件中出现CLSID（CLSID是指Windows系统对于不同的应用程序、文件类型、OLE对象、特殊文件夹以及各种系统组件分配一个唯一表示它的ID代码），而新的利用方式使用MHT文件格式，CLSID会出现在MHT文件中，由于之前的RTF溢出格式嵌套DOC文档（如图3-2，红框中是DOC文档文件头），CLSID存放于嵌套的DOC文档里（如图3-3，红框中是CLSID，部分采用了网络字节序，部分采用了主机字节序）。
![
](https://images.seebug.org/content/images/2018/09/64b6e8d2-1913-4fc9-8c9f-50417ff27cc0.png-w331s)
图 3-2 以RTF为载体的溢出文件
![
](https://images.seebug.org/content/images/2018/09/466b371d-1486-4c63-a47d-a62996d11156.png-w331s)
图 3-3 以RTF为载体的溢出文件
MHT文件格式的CLSID不会存放在嵌套的DOC里，而是直接在MHT文件中（如图3-4，红框中所示），这样可以逃避大部分安全软件的检测，而且在MHT中编码格式也发生了变化，因此如果使用以前根据RTF文件编写的CVE-2012-0158检测程序则会失效。
图 3-4 案例6涉及的MHT文件
MHT文件的主要功能是将一个离线网页的所有文件保存在一个文件中，方便浏览。将文件后缀修改为.doc后，Microsoft Word是可以正常打开的。
该文件可以分为三个部分：第一部分是一个网页；第二部分是一个base64编码的数据文件，名为“ocxstg001.mso”，该文件解码后为一个复合式文档即DOC文档；第三部分的数据是二进制文件。
在第一部分我们发现了一段这样的代码，该代码描述了第一部分和第二部分的关系也是导致漏洞触发的关键：
这段代码大致表示当网页加载的时候同时加载一个COM控件去解释第二部分的数据。该控件的CLSID是{ ** _*_**
***-11D1-B16A-00C0F0283628}，经过查询该控件便是MSCOMCTL.OCX.。当时已知的与该控件有关的最新漏洞是CVE-2012-0158，因此可以确定这三个案例是通过精心构造MHT文件，利用漏洞CVE-2012-0158来执行，从而实现可执行文件的释放和执行。
##### 3.1.2 值得关注漏洞载荷免杀技巧的利用
“绿斑”组织高频使用MHT漏洞格式文档的传播利用时间主要在2013年5月之前，这是一个高度值得关注的信息。我们基于对某个著名的第三方威胁情报源利用CVE-2012-0158漏洞并采用MHT文件格式的恶意代码数据进行了相关统计。
图 3-5 安天捕获部分“绿斑”免杀样本（红色）与MHT漏洞格式文档（黄色）大量出现时间的对比
从图3-5中我们可以看到，2013年3月前，MHT文件格式的CVE-2012-0158漏洞相关文件并未出现在该威胁情报源当中，但已经被“绿斑”组织使用。我们尚不能认为“绿斑”组织是这种免杀方式的发明者，但至少其是这种方式的早期使用者。而对于一个2012年1月的陈旧漏洞，“绿斑”组织则较早使用了可以延续其攻击窗口的方法。并不是所有APT攻击都会使用0day漏洞，这取决于攻击者的资源储备和突破被攻击方的防御的必要性等因素，部分APT攻击组织并没有能力去挖掘0day漏洞，但其同样试图采购获得商业的0day漏洞，针对1day漏洞快速跟进，并尝试使用免杀方式来使陈旧漏洞形成新的攻击能力。这些问题和0day漏洞检测防御一样值得关注。
#### 3.2 CVE-2014-4114漏洞利用
我们有一定的分析证据表明，“绿斑”组织在2014年10月前曾使用CVE-2014-4114漏洞。这可能表示该组织与地下漏洞交易有相应的渠道联系。
#### 3.3 CVE-2017-8759漏洞利用
安天2017年针对“绿斑”组织的一个新的前导攻击文档进行了分析，该文档利用最新的CVE-2017-8759漏洞下载恶意代码到目标主机执行。样本采用RTF格式而非之前的宏代码方式，在无须用户交互的情况下就可以直接下载并执行远程文件，攻击效果更好。
CVE-2017-8759漏洞是由一个换行符引发的漏洞，该漏洞影响所有主流的.NET Framework版本。在. NET库中的SOAP
WSDL解析模块IsValidUrl函数没有正确处理包含回车换行符的情况，导致调用者函数PrintClientProxy存在代码注入执行漏洞，目前该漏洞主要被用于Office文档高级威胁攻击。
![
](https://images.seebug.org/content/images/2018/09/1ba813b8-5656-46a5-a37c-5a2d311cce70.png-w331s)
图 3-6 通过objautlink和objupdate控制字段自动更新链接
图 3-7 嵌入的链接实际上是一个WSDL文件（见下一节TXT文件）
##### 3.3.1 漏洞触发文件：TXT文件
该类文件是WSDL文件，是导致漏洞触发的文件。触发漏洞会导致执行其中的代码即利用msHTA.exe执行指定的HTA文件，使用HTA文件得到解析和运行。以样本jin2.txt为例分析，关键代码如下：
![
](https://images.seebug.org/content/images/2018/09/123b5c22-b800-410f-8580-c104a2c9a009.png-w331s)
图 3-8 WSDL文件调用msHTA执行HTA文件
每个txt文件的不同之处在于包含的HTA文件链接不同，具体请看表3-1：
表 3-1 txt调用hta列表
![
](https://images.seebug.org/content/images/2018/09/e96b7b30-7f1b-4a04-b8c4-99a12b7c594a.png-w331s)
##### 3.3.2 下载指定EXE文件：HTA文件
HTA文件是html页面文件，嵌入了VBScript脚本，该脚本的主要功能是利用PowerShell下载指定的EXE文件，保存为officeupdate.exe并执行该程序。图3-9为样本jin2.HTA的内容：
![
](https://images.seebug.org/content/images/2018/09/f716124f-864b-4358-8e4e-2d1d90a44217.png-w331s)
图 3-9 HTA文件调用powershell下载执行文件
每个HTA文件的不同之处是下载地址不相同，攻击者利用漏洞触发HTA下载并执行最终的可执行文件载荷，具体对应关系请看表3-2：
表 3-2 HTA对应EXE下载地址 ![
](https://images.seebug.org/content/images/2018/09/19441998-b22b-44f0-87d8-944a87433c76.png-w331s)
#### 3.4 相关载荷分析
##### 3.4.1 Poison Ivy RAT后门
我们经过分析，发现案例1、案例2、案例3、案例9中所释放的update.exe，均为Poison Ivy RAT后门程序，Poison
Ivy是一款已经公开的、著名的RAT程序，功能强大，生成的载荷小巧易于加密和对抗检测。正因Poison
Ivy有这些优点，因此也被其他攻击组织使用在其他攻击事件中。以下为部分Poison Ivy后门的功能：
  * 可以获取系统基本信息；
  * 可以进行全盘文件管理，包括查看所有文件，下载文件，上传文件等；
  * 获取系统进程信息，结束进程，挂起进程等；
  * 获取系统服务程序信息；
  * 查看系统安装的软件，可进行卸载；
  * 获取系统打开的端口号；
  * 可执行远程shell，执行任意命令；
  * 可获取密码Hash值；
  * 可进行键盘记录；
  * 可获取屏幕截图；
  * 可打开摄像头进行监控；
图3-10、3-11为这四个案例涉及的样本（update.exe）文件中互斥量和域名相关的信息：
![
](https://images.seebug.org/content/images/2018/09/17b667ec-b0bd-4f34-b928-70092e29ae91.png-w331s)
图 3-10 多案例样本互斥量对比
![
](https://images.seebug.org/content/images/2018/09/de643d6f-7d80-416b-b9ad-7432ac4265a5.png-w331s)
图 3-11 多案例样本连接域名对比
同时，我们将四个案例涉及样本的版本信息、时间戳、连接域名等相关信息整理如表3-3：
表 3-3 Poison Ivy RAT后门版本信息对比
![
](https://images.seebug.org/content/images/2018/09/aecebfef-9bb7-4073-8637-c37e315a00c4.png-w331s)
通过上面的信息，我们可以看出，在这四个案例中，虽然均为Poison Ivy RAT的后门，但是还可以分为三类：
第一类是案例1和案例2，它们之间除域名外，其它信息均相同，通过对案例1和案例2中update.exe二进制的对比，发现它们之间90%的二进制是相同的，不同之处是加密的二进制代码，它们的不同是由于加密密钥的不同。
![
](https://images.seebug.org/content/images/2018/09/d305ff37-b788-49a1-9077-2260e2d6d077.png-w331s)
图 3-12 案例1、2涉及样本的解密算法
第二类是案例3，第三类是案例9，这两类样本的加密算法与第一类不同，但解密后的代码，除了相关配置不同，其功能部分几乎完全相同。
![