parameter k is empirically chosen and is a function of the amount of
memory in the channel. So we can write the equation as:
y[n] = x[n−k]h[k]+x[n−k+1]h[k−1]+. . .+x[n+k]h[−k]+w[n]
where h[k], . . . , h[−k] represents the attenuation’s applied by the
channel to the transmitted function, and w[n] is the receiver noise
ﬂoor.
How can we estimate the coefﬁcients h[n]? We leverage the fact
that most wireless transmissions have known packet preambles (e.g.
WiFi uses a preamble of two known OFDM symbols at the start of
the packet). Let the samples representing the preamble be xpr[n].
Let the receive samples corresponding to the preamble be y[0], . . . , y[n].
Then the above channel equations can be written speciﬁcally for the
a2 and a3: positive  a1 and a4: negative Attenuator (Amplitude) Time (Delay) d1 d2 d3 d4 d a2 a3 a1 a4 Self Interference 379preamble as:
y = Ah + w
where A is Toeplitz matrix of xpr[n].
 xpr(−k)
xpr(1 − k)
xpr(n − k)
...
A =
... xpr(0)
... xpr(1)
...
... xpr(n)
...
xpr(k − 1)
xpr(k)
...
...
...
... xpr(n + k − 1)
...
 .
Our goal is to ﬁnd a maximum likelihood estimate of the vector h,
i.e.,
minimize ||y − Ah||2
2
Note that the matrix A is known in advance since we know the
values of the preamble samples. Hence it can be pre-computed and
we know from prior work [2] that the coefﬁcients for the above prob-
lem can be computed by multiplying by the ith received sample of
the preamble, as the samples arrive serially as follows:
(cid:88)
h =
(yia
†
i )
†
where a
i , is the ith column of pseudo inverse of A matrix. Thus our
estimation algorithm computes the linear distortions that the trans-
mitted main signal has gone through for every packet, and is capable
of dynamically adapting to the environment.
3.2.2 Canceling Non-Linear Components
The second task for digital cancellation is to eliminate the residual
non-linear components whose power is around 20dB after being re-
duced by 60dB due to analog cancellation. However, it is quite hard
to guess the exact non-linear function that a radio might be applying
to the baseband transmitted signal. Instead, we use a general model
to approximate the non-linear function using Taylor series expansion
(this is a standard way to model non-linear functions)[4]. So the sig-
nal that is being transmitted can be written as:
y(t) =
amxp(t)m
(cid:88)
m
where xp(t) is the ideal passband analog signal for the digital repre-
sentation of x(n) that we know.
The above general model contains a lot of terms, but the only ones
that matter for full duplex are terms which have non-zero frequency
content in the band of interest. A little bit of analysis for passband
signals (taking the Fourier transform) of the equation above reveals
that the only terms with non-zero energy in the frequency band of
interest are the odd order terms (i.e., the terms containing xp(t),
xp(t)3, xp(t)5 and so on), so we can safely ignore the even order
terms. The ﬁrst term that is the linear component, i.e., the terms for
xp(t) is of course the one corresponding to the main signal and is
estimated and canceled using the algorithm discussed in the previous
section. In this section, we focus only on the higher-order odd power
terms. We can therefore reduce the above model and write it in the
digital baseband domain as:
(cid:88)
y(n) =
m∈ odd terms,n=−k,...,k
x(n)(|x(n)|)m−1 ∗ hm(n)
where hm[n] is the weight for the term which raises the signal to
order m and is the variable that needs to be estimated for cancella-
tion, and k is the number of samples in the past and future which
signiﬁcantly inﬂuence the value of the signal at instant n.
To estimate these coefﬁcients, we can use the same WiFi pream-
ble. The WiFi preamble is two OFDM symbols long of length 8µs,
and assuming a sampling rate of 160MHz, it consists of a total of
1280 digital samples at the Nyquist sampling rate. However, if we
look at the above equation, the number of variables hm(n) that we
need to compute is a function of 2k (i.e., how far in the past and
future is the current self-interference signal inﬂuenced by) and the
Figure 5: Signal strength of various harmonics that make up the transmitted
signal. Note that higher order harmonics are much weaker relative to main
component and therefore any reﬂections of these harmonics have to be quite
closely spaced in time for them to be stronger than the receiver noise ﬂoor.
highest value of m that exhibit strength greater than the thermal noise
ﬂoor. A naive model assuming that just the 1, 3, 5, 7, 9, 11th order
terms matter, and that upto 128 samples from both the future and
the past inﬂuence the self-interference signal at any instant 2 would
require us to estimate 128∗ 2∗ 6 = 1536 variables using 1280 equa-
tions. Clearly, this is under-determined system, would increase the
noise ﬂoor signiﬁcantly.
In practice we found empirically that many of these variables do
not matter, that is their value is zero typically. The reason is that
higher order terms have correspondingly lower power since they are
created by the mixing of multiple lower order terms and each mixing
reduces power. So the 7th order term has lower power than the 5th
order term which has lower power than the 3rd order term. Fig. 5
shows a plot of the strength of of the main signal and higher order
non-linear terms relative to the thermal noise ﬂoor. As we can see
higher order terms have weaker strength relative to the main signal,
and consequently their multipath components also decay quickly be-
low the receiver noise ﬂoor. In other words, far fewer than 128 sam-
ples from the past and future impact the value of the self interference
harmonic component at this instant. We ﬁnd empirically that for in-
door WiFi systems, across all the non-linear higher orders, a total of
only 224 such variables are all that we need to estimate which we can
easily accomplish using the WiFi preamble (over-determined system
of linear equation). Hence our digital cancellation algorithm calcu-
lates all these coefﬁcients using the WiFi preamble and applies them
to recreate the harmonics and cancel them. The method for estimat-
ing the coefﬁcients is the same as the one used in the linear digital
cancellation step described by Eq. 3.2.1, but the matrix A is formed
using the higher order odd powers of the preamble samples.
3.2.3 Complexity
The complexity of digital cancellation is the same as solving 1280
(say W, width of preamble in general) linear equations with 224 un-
knowns. Further the matrix that forms the linear equations is known
in advance (this is the known preamble trick as discussed above).
Hence the pseudo-inverse of this matrix can be pre-computed and
stored. Thus the complexity of digital cancellation reduces to O(W )
multiplications. The design is therefore relatively simple to imple-
ment and can be efﬁciently realized in hardware.
3.3 Dynamic Adaptation of Analog
Cancella-tion
To provide a robust full duplex link, we need to ensure that suf-
ﬁcient cancellation is maintained to reduce self interference to the
2The number of samples required is a function of the amount of mul-
tipath, the higher the mutlipath, the higher the number of samples in
the past and future that matter but 128 is the number suggested by the
WiFi standard and is equal to the length of the WiFi OFDM Cyclic
Preﬁx
-110-100-90-80-70-60-50-40-40-200204060Stength in dBm  Sampling Time  Main Component3rd Harmonic5th Harmonic         Decreased width -90 dBm Thermal noise floor 380noise ﬂoor, even as things such as environment, transmit power, tem-
perature and other such parameters change. These changes would
clearly reduce the cancellation achieved by any static conﬁguration,
since they change the distortions that are imposed by the self inter-
ference. Digital cancellation can cope since it essentially estimates
these distortions on a per-packet basis, however analog cancellation
might be degraded and hence performance might be worsened. In
this section, we describe how we can quickly tune the analog circuit
to provide the required amount of cancellation (60 dB at least).
The goal of tuning is to pick the attenuation values a1, . . . , aN
such that self-interference is minimized. More formally,
(y(t) − N(cid:88)
i=1
min
a1,...,aN
aic(t − di))2
where c(t) is the reference signal that is tapped from the transmit
path, y(t) is the self interference, d1, . . . , dN are delays associated
with the taps as shown in Fig. 3.
A simple and obvious technique to solve the above problem in
practice is a iterative gradient descent algorithm, which other prior
works in full duplex have also used to tune their own analog can-
cellation [11]. However, we found that this algorithm is extremely
slow (requires nearly 40ms) because of the larger number of vari-
ables (16) that need to be estimated in our design unlike prior work.
That’s an unacceptable overhead, since we found empirically that we
need to re-tune analog cancellation once every 100ms on average in
our setup. So taking 40ms to tune implies a 40% overhead.
Our key contribution here is an approach that solves the tuning
problem in the frequency domain. The idea is that the self interfer-
ence y(t) can be modeled in the frequency domain as a function of
the tapped signal c(t) as
Y(f ) = H(f )C(f )
where H(f ) is the frequency domain representation of the distortion
introduced by the circulator, antenna and the environment and C(f )
is the frequency domain representation of the tapped signal. Recall
that the tapped signal is essentially a scaled replica of the transmitted
signal input to the circulator, hence the above equation can be written
in terms of the tapped signal. This frequency response H(f ) is easier
to measure, it is essentially an FFT of the self interference channel
which can be measured using the WiFi preamble. In fact, standard
OFDM is doing exactly this, it is estimating the frequency domain
channel using the preamble and pilot symbols.
The goal of the optimization problem then is to pick the attenuator
values such that the overall frequency domain response of the can-
cellation circuit approximates H(f ) as closely as possible. So the
above optimization problem can be restated as
(H(f ) − N(cid:88)
i=1
min
a1,...,aN
Hai
i (f ))2
(1)
where, Hai
ation setting of ai.
i (f ) is the frequency response for delay line i for attenu-
How might we solve this problem? The problem is two fold. First,
knowing the frequency response of each delay line of the cancellation
circuit for every attenuation value, i.e., Hai
i (f ). Second, once we
have the frequency response of the self interference channel H(f ),
we need to search on the space of possible attenuation values for
every delay line, to come up with best possible solution to the opti-
mization problem. Each delay line can take 128 different attenuation
values, and there are 16 delay lines, so in total we have 12816 = 2112
values, a computationally expensive search space.
Modeling the frequency response of delay lines Hai
i (f ): The chal-
lenge in measuring the frequency response of individual delay line,
is that entire circuit is well connected, thus isolating individual tap
is impossible. Our key observation, is if we can measure the fre-
quency response of a delay line at one attenuation value, then S pa-
rameters data of the attenuator (provided by the manufacturer) can
be used to extrapolate the frequency response of the delay line for
all attenuation values. The S parameter data provides the relative
change in frequency response for changing the attenuator value. To
calculate the frequency response at this initial point, we use the fol-
lowing trick. We set the attenuators for all the lines to their highest
attenuation setting, except the one being measured. The idea is to
essentially emulate a board where none of the delay lines, except the
one being measured, let any signal through. The highest attenuation
value doesn’t fully accomplish that, we apply a least square ﬁtting
to ﬁnd a more accurate response (collecting more data for different
attenuation’s for this delay line, keeping the rest all others at highest
attenuation setting). Thus, resulting frequency response of this delay
line for all 128 attenuator values. We repeat this process for all the
delay lines in the circuit. Note that all of this can be accomplished
ofﬂine and stored, since this frequency response of the delay line and
attenuation is independent of the environment or other such changing
parameters. Thus this needs to be once for every cancellation circuit.
Optimization Algorithm : Now to actually ﬁnd the attenuation set-
tings in real time to optimize the cancellation, we use the following
algorithm.
1. Measure the frequency response of the self interference H(f ) us-
ing the WiFi preamble. This is relatively simple since we have two
OFDM symbols and as part of the baseband decoding we can per-
form an FFT to measure the frequency response.
2. Solve the frequency domain integer linear optimization problem
posed in Eq. 1 by relaxing it to linear program and then using ran-
dom rounding to ﬁnd a solution for attenuator settings, which achieves
required cancellation of 60dB. The algorithm stated, reduces the
search space to polynomial instead of exponential. This is due to
the fact that we are looking for a point which provides required
cancellation, instead of optimal point (achieving optimal point is
a NP hard problem). Note all the aforementioned calculations are
ofﬂine and are implemented using the frequency response model
created. Essentially the model is used for looking up what would
be the frequency response of the circuit for any combination of at-
tenuator values. This ofﬂine algorithm implementation is therefore
extremely fast, a non-optimized C++ implementation takes less than
1µ sec to converge.
In practice we ﬁnd that ofﬂine solution achieved above, to the op-
timization problem might yield a point that provides an analog can-
cellation of 45-50dB due to manufacturing variation of attenuator
(the S parameter data provided is accurate to 2%, thus every attenu-
ator may have its own response different from the provided standard
data). To further improve the cancellation, we use an additional gra-
dient descent step. Typically, gradient descent takes several hundreds
of iterations, however here since we are starting the descent from a
much more accurate starting point, the gradient descent converges to
the required point in 10-12 iterations. So in the worst case, we show
experimentally that analog cancellation tuning can take around 900-
1000µs. Assuming we have to do such tuning once every 100ms
(which is what we needed in our testbed), that represents less than
1% overhead for tuning.