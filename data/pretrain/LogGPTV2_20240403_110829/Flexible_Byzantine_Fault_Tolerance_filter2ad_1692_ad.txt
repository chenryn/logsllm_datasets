If ∆-synchrony holds, every other honest replica learns about the
proposal Bl at most ∆ time after h learns about it. If any honest
replica voted for a conflicting block or quit view v, h would have
known within 2∆ time.
5.4 Safety and Liveness
We introduce the notion of direct and indirect commit to aid the
proofs. We say a block is committed directly under CR1 if the block
and its immediate successor both get qc votes in the same view.
We say a block is committed directly under CR2 if some honest
replica reports an undisturbed-2∆ period after its successor block
was obtained. We say a block is committed indirectly if neither
condition applies to it but it is committed as a result of a block
extending it being committed directly. We remark that the direct
commit notion, especially for CR2, is merely a proof technique. A
learner cannot tell whether a replica is honest, and thus has no way
of knowing whether a block is directly committed under CR2.
Lemma 1. If a learner directly commits a block Bl in view v using
a correct commit rule, then a certified block that ranks no lower than
Cqr
v (Bl) must equal or extend Bl .
Proof. To elaborate on the lemma, a certified block Cqr
v′ (B′
l′)
v (Bl) if either (i) v′ = v and l′ ≥ l, or (ii)
ranks no lower than Cqr
v′ > v. We need to show that if Bl is directly committed, then any
certified block that ranks no lower either equals or extends Bl . We
consider the two commit rules separately. For both commit rules,
we will use induction on v′ to prove the lemma.
For CR1 with parameter qc to be correct, flexible quorum inter-
section needs to hold, i.e., the fraction of faulty replicas must be
less than qc + qr − 1. Bl being directly committed under CR1 with
parameter qc implies that there are qc votes in view v for Bl and
Bl +1 where Bl +1 extends Bl .
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1048For the base case, a block B′
l′ with l′ ≥ l that does not extend Bl
cannot get certified in view v, because that would require qc +qr −1
replicas to vote for two equivocating blocks in view v.
Next, we show the inductive step. Note that qc replicas voted
v (Bl). Thus, they lock Bl or
for Bl +1 in view v, which contains Cqr
a block extending Bl by the end of view v. Due to the inductive
hypothesis, any certified block that ranks equally or higher from
view v up to view v′ either equals or extends Bl . Thus, by the end
of view v′, those qc replicas still lock Bl or a block extending Bl .
Since the total fraction of faults is less than qc + qr − 1, the status S
shown by the leader of view v′ + 1 must include a certificate for Bl
or a block extending it; moreover, any certificate that ranks equal
v (Bl) is for a block that equals or extends Bl .
to or higher than Cqr
Thus, only a block that equals or extends Bl can gather votes from
those qc replicas in view v′ + 1 and only a block that equals or
extends Bl can get certified in view v′ + 1.
We first show the base case: a block B′
For CR2 with synchrony bound ∆ to be correct, ∆ must be an
upper bound on worst case message delay and the fraction of faulty
replicas is less than qr . Bl being directly committed under CR2
with ∆-synchrony implies that at least one honest replica voted
for Bl +1 extending Bl in view v, and did not hear an equivocating
block or view change within 2∆ time after that. Call this replica h.
Suppose h voted for Bl +1 extending Bl in view v at time t, and did
not hear an equivocating block or view change by time t + 2∆.
l′ with l′ ≥ l certified in
view v must equal or extend Bl . Observe that if B′
l′ with l′ ≥ l does
not equal or extend Bl , then it equivocates Bl . No honest replica
voted for B′
l′ before time t + ∆, because otherwise h would have
received the vote for B′
l′ by time t + 2∆, No honest replica would
vote for B′
l′ after time t + ∆ either, because by then they would have
received (from h) and voted for Bl . Thus, B′
l′ cannot get certified in
view v.
We then show the inductive step. Because h did not hear view
change by time t + 2∆, all honest replicas are still in view v by
time t + ∆, which means they all receive Bl +1 from h by the end of
view v. Thus, they lock Bl or a block extending Bl by the end of
view v. Due to the inductive hypothesis, any certified block that
ranks equally or higher from view v up to view v′ either equals
or extends Bl . Thus, by the end of view v′, all honest replicas still
lock Bl or a block extending Bl . Since the total fraction of faults is
less than qr , the status S shown by the leader of view v′ + 1 must
include a certificate for Bl or a block extending it; moreover, any
certificate that ranks equal to or higher than Cqr
v (Bl) is for a block
that equals or extends Bl . Thus, only a block that equals or extends
Bl can gather honest votes in view v′ + 1 and only a block that
equals or extends Bl can get certified in view v′ + 1.
□
Theorem 2 (Safety). Two learners with correct commit rules
commit the same block Bk for each height k.
Proof. Suppose for contradiction that two distinct blocks Bk
and B′
are committed at height k. Suppose Bk is committed as a
result of Bl being directly committed in view v and B′
k
is committed
as a result of B′
l′ being directly committed in view v′. This implies
Bl is or extends Bk; similarly, B′
. Without loss of
generality, assume v ≤ v′. If v = v′, further assume l ≤ l′ without
l′ is or extends B′
k
k
loss of generality. By Lemma 1, the certified block Cqr
equal or extend Bl . Thus, B′
l′) must
□
Theorem 3 (Liveness). If all learners have correct commit rules,
= Bk.
v′ (B′
k
they all keep committing new blocks.
Proof. By the definition of a-b-c faults, if they cannot violate
safety, they will preserve liveness. Theorem 2 shows that if all
learners have correct commit rules, then safety is guaranteed even
if a-b-c replicas behave arbitrarily. Thus, once we proved safety, we
can treat a-b-c replicas as honest when proving liveness.
Observe that a correct commit rule tolerates at most 1 − qr
Byzantine faults. If a Byzantine leader prevents liveness, there will
be qr blame messages against it, and a view change will ensue to
replace the leader. Eventually, a non-Byzantine (honest or a-b-c)
replica becomes the leader and drives consensus in new heights.
If replicas use increasing timeouts, eventually, all non-Byzantine
replicas stay in the same view for sufficiently long. When both
conditions occur, if a learner’s commit rule is correct (either CR1
and CR2), due to quorum availability, it will receive enough votes
in the same view to commit.
□
5.5 Efficiency
Latency. Learners with a synchrony assumption incur a latency
of 2∆ plus a few network speed rounds. In terms of the maximum
network delay ∆, this matches the state-of-the-art synchronous
protocols [4]. The distinction though is that ∆ now depends on the
learner assumption and hence different learners may commit with
different latencies Learners with partial-synchrony assumptions
incur a latency of two rounds of voting; this matches PBFT [11].
Communication. Every vote and new-view messages are broad-
cast to all replicas, incurring O(n
2) communication messages. This
is the same as the complexity of PBFT [11] and Sync HotStuff [4].
Additional storage for replicas. Flexible BFT needs to store some
additional information compared to existing BFT protocols in order
to support diverse commit rules. For partially synchronous learners,
replicas need to maintain the number of votes for every block in a
view. For synchronous learners, replicas need to maintain the time
at which equivocations or view changes occur. These values are
used to appropriately respond to the learner based on its preferences
for qc and ∆.
6 DISCUSSION
As we have seen, three parameters qr , qc, and ∆ determine the
protocol. qr is the only parameter for the replicas and is picked
by the service administrator. The choice of qr determines a set of
learner assumptions that can be supported. qc and ∆ are chosen
by learners to commit blocks. In this section, we first discuss the
learner assumptions supported by a given qr and then discuss the
trade-offs between different choices of qr .
6.1 Learner Assumptions Supported by qr
Figure 5 represents the learners supported at qr = 2/3. The x-
axis represents Byzantine faults and the y-axis represents total
faults (Byzantine plus a-b-c). Each point on this graph represents a
Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1049Figure 5: Learners supported for qr = 2/3.
Figure 6: Learners supported by Flexible BFT at different
qr ’s. The legend represents the different qr values.
learner fault assumption as a pair: (Byzantine faults, total faults).
The shaded gray area indicates an “invalid area” since we cannot
have fewer total faults than Byzantine faults. A missing dimension
in this figure is the choice of ∆. Thus, the synchrony guarantee
shown in this figure is for learners that choose a correct synchrony
bound.
Learners with partial-synchrony assumptions can get fault tol-
erance on (or below) the starred orange line. The right most point
on the line is (1/3, 1/3), i.e., we tolerate less than a third of Byzan-
tine replicas and no additional a-b-c replicas. This is the setting
of existing partially synchronous consensus protocols [11, 14, 36].
Flexible BFT generalizes these protocols by giving learners the
option of moving up-left along the line, i.e., tolerating fewer Byzan-
tine and more total faults. By choosing qc > qr , a learner tolerates
< qc + qr − 1 total faults for safety and ≤ 1 − qc Byzantine faults
for liveness. In other words, as a learner moves left, for every addi-
tional vote it requires, it tolerates one fewer Byzantine fault and
gains overall one higher total number of faults (i.e., two more a-
b-c faults). The left most point on this line (0, 2/3) tolerating no
Byzantine replicas and the highest fraction of a-b-c replicas.
Moreover, for learners who believe in synchrony, if their ∆ as-
sumption is correct, they enjoy 1/3 Byzantine tolerance and 2/3
total tolerance represented by the green diamond. This is because
synchronous commit rules are not parameterized by the number of
votes received.
How do learners pick their commit rules? In Figure 5, the
shaded starred orange portion of the plot represent fault toler-
ance provided by the partially synchronous commit rule (CR1).
Specifically, setting qc to the total fault fraction yields the neces-
sary commit rule. On the other hand, if a learner’s required fault
tolerance lies in the circled green portion of the plot, then the syn-
chronous commit rule (CR2) with an appropriate ∆ picked by the
learner yields the necessary commit rule. Finally, if a learner’s tar-
get fault tolerance corresponds to the white region of the plot, then
it is not achievable with this qr .
Learners with incorrect assumptions and recovery. If a
learner has an incorrect assumption with respect to the fault thresh-
old or synchrony parameter ∆, then it can lose safety or liveness.
A learner detects a safety violation if it observes (possibly out-of-
band) that a conflicting value has been committed, perhaps with a
safer commit rule.
For a learner believing in synchrony, if it picks too small a ∆ and
commits a value b, it is possible that a conflicting value b′ may also
be certified. Replicas may choose to extend the branch containing
b′, effectively reverting b and causing a safety violation. If a learner
detects such a safety violation, it may need to revert some of its
commits and increase ∆ to recover.
For a learner with a partial-synchrony assumption, if it loses
safety, it can update its fault model to move left along the orange
starred line, i.e., tolerate higher total faults but fewer Byzantine.
On the other hand, if it observes no progress as its threshold qc is
not met, then it moves towards the right. However, if the true fault
model is in the circled green region in Figure 5, then the learner
cannot find a partially synchronous commit rule that is both safe
and live and eventually it has to switch to using a synchronous
commit rule.
Recall that the goal of a-b-c replicas is to attack safety. Thus,
learners with incorrect assumptions may be exploited by a-b-c repli-
cas for their own gain (e.g., by double-spending). This is remotely
analogous to Bitcoin – if a learner commits to a transaction when it
is a few blocks deep and a powerful adversary succeeds in creating
an alternative longer fork, the commit is reverted. When a learner
updates to a correct assumption and recovers from unsafe commits,
their subsequent commits would be safe and final.
6.2 Comparing Different qr Choices
We now look at the service administrator’s choice at picking qr .
In general, the service administrator’s goal is to tolerate a large
number of Byzantine and a-b-c faults, i.e., move towards top and/or
0.00.10.20.30.40.5FractionofByzantinefaults0.00.20.40.60.81.0FractionoftotalfaultsSyncPartialSync0.00.10.20.30.40.5FractionofByzantinefaults0.00.20.40.60.81.0Fractionoftotalfaults0.800.750.670.600.50Session 5B: ProtocolsCCS ’19, November 11–15, 2019, London, United Kingdom1050right of the figure. Figure 6 shows the trade-offs in terms of learners
supported by different qr values in Flexible BFT.
First, it can be observed that for learners with partial-synchrony
assumptions, qr ≥ 2/3 dominates qr < 2/3. Observe that the
fraction of Byzantine replicas (B) are bounded by B < qc + qr − 1
and B ≤ 1 − qc, so B ≤ qr/2. Thus, as qr decreases, Byzantine
fault tolerance decreases. Moreover, since the total fault tolerance
is qc + qr − 1, a lower qr also tolerates a smaller fraction of total
faults for a fixed qc.
For qr ≥ 2/3 or for learners believing in synchrony, no value of
qr is Pareto optimal. For learners with partial-synchrony assump-
tions, as qr increases, the total fault tolerance for safety increases.