honest agents start at the beginning of a role description,
and always execute the actions in the order given by the
role. Thus, if one can establish that a thread of an honest
agent has executed the nth action of a role, it should also
be possible to conclude a similar result about preceding ac-
tions within the logic: in particular, one should be able to
conclude that the preceding n− 1 actions have also occurred
in the same thread. However, there is no mechanism in the
logic of basic PCL [9, 13, 14, 17] to draw such a conclusion.
Note that one can use the honesty rule to prove from,
e.g., a send action that a receive action must have occurred
previously, but only if both actions occur within the same
basic sequence. However, if one wants to prove that given
a basic sequence, an action has occurred from another basic
sequence, there are no rules to enable this type of reasoning.
3.2.1
The consequence of not having a means of establishing
preceding actions is that some claimed proofs do not seem
to be correct. For example, observe the initiator role of the
QCR protocol [14, page 315]. In order to prove invariants for
the protocol using the honesty rule, one has to prove that
the invariants hold for all basic sequences of the protocol.
The initiator role consists of two basic sequences BS1 and
BS2 [14, page 335]:
Implications
BS1 ≡ [ new m; send ˆX, ˆY , m; ]X
BS2 ≡ [ receive ˆY , ˆX, y, s; verify s, (y, m, ˆX), ˆY ;
r := sign (y, m, ˆY ), ˆX; send ˆX, ˆY , r; ]X
In this protocol, the basic sequence BS1 deﬁnes m as a gen-
erated value, which determines the semantics of m in BS2.
Observe that there is no way to tell if m was received or
generated from just investigating BS2.
In order to show how this makes certain proofs impossible
in basic PCL, consider a protocol Q(cid:48), that contains a role ρ
consisting of the basic sequences BS(cid:48)
BS(cid:48)
1 is deﬁned as:
1 followed by BS2, where
BS
1 ≡ [ receive ENCK{| m|}; send ˆX, ˆY , m; ]X
(cid:48)
(3)
Thus the protocol Q(cid:48) shares the basic sequence BS2 with
QCR, but in Q(cid:48), m is a received valued as opposed to a
generated value.
Now, in order to prove invariant γ1 [14, page 334] for basic
sequence BS2, we must prove that m is either generated, or
received earlier as the main message, by the same thread
that sends out the signature:
γ1 ≡`Send(Y, t) ∧ Contains(t, SIG ˆY {| y, m, ˆX |})´ ⊃
“
Gen(Y, m) ∨`Receive(Y, ( ˆX, ˆY , m)) <
Send(Y, ( ˆY , ˆX, y, SIG ˆY {| y, m, ˆX |}))´”
In order to prove this invariant with respect to basic se-
quence BS2, one needs to prove that m is generated in the
thread Y . However, there is no mechanism to reason about
any preceding actions, and thus it has to be dealt with in
the same way for both protocols QCR and Q(cid:48). One must
therefore also consider the case m was ﬁrst received, and not
generated, in a previous basic sequence as part of a bigger
term, as happens in Q(cid:48).
In fact, the invariant is false for
protocol Q(cid:48).
Thus, in order to prove the invariant for QCR, we must be
able to distinguish between the diﬀerent semantics of BS2
within the context of QCR and Q(cid:48). Such reasoning is not
supported by basic PCL.
Without the ability to reason about preceding actions,
the protocol descriptions are eﬀectively cut up into inde-
pendent basic sequences, which can then only be dealt with
as separate protocols. This is evident from the formulation
of the honesty rule [14, page 329], in which the reference to
the protocol Q is only used for the deﬁnition of the basic
sequences. Thus one is required to create much stronger
proofs than would be strictly necessary. Put diﬀerently, in
basic PCL one has to reason with an over approximation
of protocol execution, in which basic sequences occur in no
ﬁxed order in a thread.
This phenomenon can also be observed in the following
example. Let P be a protocol, and let P1 be the protocol
deﬁned as P extended with a role consisting of the basic
sequences BS; BS(cid:48); BS(cid:48)(cid:48). Similarly, let P2 be deﬁned as P
extended with a role BS(cid:48)(cid:48); BS(cid:48); BS, i.e., a role with the same
basic sequences as the role in P1, but composed in a diﬀerent
order. Then, any invariant γ that can be proven for protocol
P1 using the honesty rule, must also hold for P2. In fact,
the proof is identical. Conversely, any invariant that holds
for P1 but not for P2, cannot be proven using the honesty
rule. This puts a strong restriction on the type of invariants
provable in basic PCL, because the structure (and hence the
properties) of both protocols can be very diﬀerent.
These observations lead to the following result:
Theorem 1. If basic PCL as deﬁned in [9, 13, 14, 17] is
sound, then the authentication properties of the challenge
response protocol CR from [14] cannot be proven by using
basic PCL without using protocol composition rules.
A detailed proof of this theorem is given in Appendix A.
Below we only provide a sketch of the proof.
Proof sketch. We consider a specially crafted protocol
CR(cid:48), which has the same basic sequences as the protocol
CR. Because a proof in PCL that does not use composition
rules only refers to basic sequences of a protocol, any such
proof of (cid:96)QCR φ is also a proof of (cid:96)QCR(cid:48) φ. We show that
the weak authentication formula φ of the initiator is false
for QCR(cid:48) . Hence, there exists no proof of (cid:96)QCR φ that does
not use composition rules.
Ultimately, this problem seems to be a side eﬀect of the
weak link between the protocol description Q and the actions
of honest agents in a run R ∈ Runs(Q) in the protocol logic.
In basic PCL, the only way to make the link between a
protocol description and the actions of honest agents, is by
means of deﬁning an invariant and then proving it with the
honesty rule. This can be seen from inspecting the protocol
logic rules: the only occurrences of a protocol name (e.g. Q)
are in the honesty rule and the composition rules. As the
honesty rule only reasons about isolated basic sequences of
the protocol, the relations among the basic sequences of the
protocol are inevitably lost.
3.2.2 Resolving the problem
Based on the semantics of PCL, it should be possible to ex-
tend the logic with a “precedence” inference rule, that would
allow one to infer that given the nth action of a role ρ oc-
curs in a thread X, also the (n− 1)th action of the same role
must have previously occurred in the same thread. Such an
inference rule would allow for establishing preceding actions
that must have occurred from the existence of other actions.
This is particularly useful for proving invariants for basic
sequences.
In general one could extend basic PCL with additional
mechanisms to enable reasoning about the relation between
protocol descriptions and the actions of honest agents in a
run. However, the current weak link between the two has
one major advantage: it eases compositional proofs. For ex-
ample, because no constraints are put on any other (i.e. non-
protocol) actions of honest agents, the sequential composi-
tion of protocols allows for re-use of proofs of invariants for
basic sequences. Thus, one must be careful when introduc-
ing such links and introduce only links between the protocol
and the actions of honest agent, such that the links are in-
variant under e.g. sequential composition. A “precedence”
inference rule of the type sketched above should meet this
condition.
3.3 No formal type system
It is mentioned that in PCL, “We assume enough typing to
distinguish the keys K from the principals ˆA, the nonces n
and so on.” [14, page 316]. However, there are no constructs
in PCL that allow for formal reasoning about the type of
variables.
Implications
As a consequence, some claimed proofs of invariants are
not correct within the logic, as they are only true under type
assumptions, that cannot be expressed in PCL.
3.3.1
Many protocols have properties in a typed model, that
do not hold for an untyped model. In particular, some pro-
tocols are correct in a typed model, but are vulnerable to
so-called type ﬂaw attacks in an untyped model. Such at-
tacks exploit for example that an agent could mistake an
encrypted session key for an encrypted nonce, and sends the
key unencrypted in a next step, revealing it to the intruder.
It is therefore often easier to prove properties for the typed
model, but this requires that the logic supports drawing con-
clusions based on types. This is not possible in basic PCL.
As an example, we show that invariant γ1 from [14, page
334] (reproduced in this paper in Section 3.2.1) is false when
variables are untyped. The invariant γ1 states that if a
thread (of an honest agent) sends a message that contains a
signature term S, with a subterm m, then either
1. m was generated in the thread Y , or
2. the thread Y executes a receive of m, and later a
send of the message tuple (y, S).
Now consider the basic sequence BS3 from [14, page 335]:
BS3 ≡ [ receive ˆX, ˆY , x; new n; r := sign (n, x, ˆX), ˆY ;
send ˆY , ˆX, n, r; ]Y
This basic sequence corresponds to the responder receiving
an unknown value, supposedly a nonce, and sending back a
signed version that includes a freshly generated nonce.
In order to show the invariant is false, consider a thread
Y (cid:48) that is executed by agent ˆY .
If we assume that x =
SIG ˆY {| y, m, ˆX |}, where m is generated by thread Y (cid:48), the
invariant is violated: we have that x = SIG ˆY {| y, m, ˆX |} ⊃
Contains(x, m) and by substitution in BS3 and the Contains
predicate, we ﬁnd that Contains(r, m). As a result, the mes-
(cid:54)= Y ) will
sage sent at the end of BS3 of a thread Y (Y (cid:48)
contain m. However, m is neither generated by this thread
nor is it the exact term that was received. Thus the invariant
γ1 does not hold for basic sequence BS3. Hence the example
authentication proof of the CR protocol in [14] is incorrect.
3.3.2 Resolving the problem
The model can be extended with typing information for
the variables, and an axiom could be introduced that cap-
tures the fact that variables are only instantiated by their
typing information. This would not introduce much new
machinery, but requires additional reasoning steps in most
of the proofs.
4. PROBLEMS WITH PCL EXTENSIONS
In this Section we discuss two additional mechanisms for
PCL, in particular the extension for Diﬃe-Hellman expo-
nentials as found in [9, 13, 14, 17] and the extension for hash
functions from [20, 21].
4.1 Difﬁe-Hellman exponentials
In basic PCL [9,13,14,17], axioms are provided for reason-
ing about Diﬃe-Hellman (DH) exponentials. To that end,
the logic is extended with four additional axioms and some
changes are made to the language and execution model.
4.1.1 Capturing Difﬁe-Hellman behaviour
Below we recall the three elements of the DH extension
(execution model, logic, proof system) and discuss their im-
plications.
DH extension of the language and execution model.
The programming language and execution model are ex-
tended [14, page 354] with constructs g(a) and h(a, b), rep-
resenting respectively ga mod p and (ga mod p)b mod p. In
the PCL papers, the mod p and brackets are usually omit-
ted, resulting in the abbreviations ga and gab.
This extension does not reﬂect the actual algebraic prop-
erties of the exponential. For Diﬃe-Hellman, the crucial
property is that gab = gba. This equation must be included
in the execution model: if it is not, the following sequence of
actions (denoted by their action predicates), which is per-
fectly valid DH-type behaviour, does not correspond to a
valid execution in PCL:
Send(X, h(a, b)) < Receive(Y, h(b, a))
(4)
Just extending the Has predicate in the logic is not suﬃcient,
as the equivalence still has no counterpart in the execution
model of PCL.
DH extension of the protocol logic.
In basic PCL, the predicate Fresh(X, x) holds for any x
generated by thread X (captured by Gen(X, x)), as long as
x is not sent as part of another term. The protocol logic
is extended with an additional rule for the Fresh predicate,
stating that Fresh(X, g(x)) is true if and only if Fresh(X, x)
is true, and Has is extended in [14, page 354] by
Has(X, a) ∧ Has(X, g(b)) ⊃ Has(X, h(a, b)) ∧ Has(X, h(b, a))
This rule is intended to capture the Diﬃe-Hellman equiva-
lence relation. It is not suﬃcient, even with the addition of
further axioms, as we show below.
DH extension of the proof system.
The proof system is extended in [14, page 354, Table A.1]
by a deﬁnition and four new axioms. We reproduce them
here:
Deﬁne Computes (DH)
Computes(X, gab) ≡“`Has(X, a) ∧ Has(X, gb)´ ∨