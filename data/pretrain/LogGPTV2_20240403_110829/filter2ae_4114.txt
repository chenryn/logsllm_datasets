## 前言
最近笔者Tri0nes@玄猫安全想研究了一下智能合约逆向，顺便入门一下逆向的知识，所以打算边学边写，不足之处请多指正。本篇我们就从一个题目开始看起。
## 题目
题目地址 ： 
chaingang
    send 1505 szabo 457282 babbage 649604 wei 0x949a6ac29b9347b3eb9a420272a9dd7890b787a3
首先通过查看题目，我们看到有一些以太坊相关的关键字如 send 、 wei ，还有地址，因此尝试访问
果然发现了一个合约。但只有字节码，因此我们需要逆向它。
## 使用在线工具 ethervm.io
ethervm.io 是一个非常不错的在线工具，同时具备反编译(Decompilation)和反汇编(Disassembly)的功能，并且还能够帮你调用
(4byte.directory)[]
解析函数的名称。我们截取部分反编译和反汇编后的代码，如下所示：
    // 反编译
    function func_00CC(var arg0) returns (var r0) {
        var var0 = 0x00;
        if (arg0 & 0xffff != storage[0x01] & 0xffff) { return 0x00; }
        memory[0x00:0x20] = msg.sender;
        memory[0x20:0x40] = 0x02;
        return storage[keccak256(memory[0x00:0x40])];
    }
    // 反汇编
    label_0000:
        // Inputs [1] { @0007  msg.data.length }
        0000    60  PUSH1 0x60
        0002    60  PUSH1 0x40
        0004    52  MSTORE
        0005    60  PUSH1 0x04
        0007    36  CALLDATASIZE
        0008    10  LT
        0009    61  PUSH2 0x0057
        000C    57  *JUMPI
        // Stack delta = +0
        // Outputs [1] { @0004  memory[0x40:0x60] = 0x60 }
        // Block ends with conditional jump to 0x0057, if msg.data.length  Tools -> Parity Trace -> Raw traces` 查看发现交易 1、2、3 都是返回
`0x00`。说明都在这个判断 `return 0x00` 了，而交易 5 的返回结果是
`0x333443335f6772616e646d615f626f756768745f736f6d655f626974636f696e` , 说明通过交易4
的 `Receive` 操作，再调用这个 `func_00CC` 函数能够通过这个判断，并执行下面语句
因此，可以尝试解一下这个返回值，应该就是答案。
## 解题
    >>> from Crypto.Util.number import *
    >>> a = 0x333443335f6772616e646d615f626f756768745f736f6d655f626974636f696e
    >>> print(long_to_bytes(a))
    b'34C3_grandma_bought_some_bitcoin'
    >>>
Bingo!
本案例就先到此~后续我们会出更多分析文章。
## 资料
题目地址 ： 
合约地址 :
反编译地址 ：
writeup ：   
技术交流加微信：Vitamin_101