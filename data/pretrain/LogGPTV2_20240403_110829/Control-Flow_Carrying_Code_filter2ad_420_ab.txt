simple solution is to insert (constant) shares at the caller and callee
with which the secret can be reconstructed at runtime. However,
such an approach does not provide Control-flow integrity because
an attacker can reuse the share at other caller sites.
Our solution is to use the addresses of the branch transfer in-
struction and its target as the shares since they capture the control
transfer information precisely. To deal with basic blocks involved in
multiple control flows, we use basic block redistribution and secret
sharing [38] to encode the key. Figure 2 shows an overview of C3,
consisting of two components.
• Embedding CFG. C3 transforms branch transfer instructions
(indirect branches, conditional jumps, and direct calls) to have
a secret share embedded, and then redistributes basic blocks to
specific addresses so that all valid callers are on the same secret
sharing curve. Finally, basic blocks are encrypted with the secret.
• Enforcing CFI. Whenever the program attempts a control trans-
fer, C3 obtains the caller and callee addresses and reconstructs
the key to decrypt the callee basic block before control transfer
takes place.
4 DETAILED DESIGN OF C3
C3 takes as input a binary executable (without source code) and out-
puts a modified executable with CFG embedded and CFI enforced.
4.1 Secret Sharing and Challenges
As discussed in Section 3, our approach of embedding CFG into
instructions is to encrypt a basic block and to enable decryption
with any correct control transfer. For a basic block with multiple
callers, we can imagine that every valid caller shall contribute to
the encryption key; however, in a concrete execution, only one
valid caller is involved and the decryption key is reconstructed.
This is where the idea of secret sharing comes to our design —
only part of the ingredients of the secret key is needed for correct
reconstruction. C3 uses Shamir’s approach [38] due to its simplicity.
The next question is the degree of the secret sharing equation.
A general guideline is to keep it small to minimize overhead. We
can use a degree of two with the source and target addresses of
the control transfer — the minimum information to fully describe a
control transfer. However, this runs into the risk of a code pointer
disclosure exploit that discloses both addresses and allows an attack
to decrypt the basic block. To counter such an attack, we add one
random value (called the master key) which is unknown to the
attacker to construct the secret key. Specifically, we use a degree of
three, with the secret sharing equation
2 (mod M)
y = a0 + a1x + a2x
(1)
where a0 is the secret key for encryption and decryption, and x, y
are k-bit coordinates extracted from the source and target addresses
and the master key. C3 obtains x and y from the lower-order odd-
and even-index bits of an address (see Figure 3 for an example).
Reconstruction of the secret follows Equation 2 with x = 0.

3
i =1
y =
yi
1≤j ≤3, j(cid:44)i
(x − xj)(xi − xj)−1 (mod M)
(2)
To support a basic block with multiple callers, we can simply
relocate the caller instructions so that they all lie on the parabola.
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand5Figure 2: System overview of C3.
Figure 3: Extracting x and y for address 0x42eb3. C3 obtains x
and y from the lower-order odd- and even-index bits of an address.
Figure 4: Multiple callers to multiple callees. BB1 and BB2 are
callers to callee BB3 and BB4.
However, a more challenging issue is to support a set of basic
blocks with the same (set of) callers. Figure 4 shows an example
with BB3 and BB4 having the same set of callers BB1 and BB2.
Following the secret sharing design we outline above, the two
parabolas for BB3 and BB4 will have three intersection points —
the master key, BB1, and BB2; however, different parabolas could
have up to two intersections only. Therefore, C3 not only needs
to relocate the basic blocks to move them onto specific parabolas,
but also needs to perform some special transformations to control
transfer instructions; see the next subsection.
4.2 Instruction Transformation
In fact, the complexity shown in Figure 4 is not the only one that
C3 needs to handle.
• CPX1: Multiple callers to multiple callees. In such cases, se-
cret sharing curves for the callees have three or more intersec-
tions (including the master key), which is not possible for parabo-
las. We add an intermediate block between the callers and callees
so that multiple callees now have a single caller.
• CPX2: Basic blocks that are not freely movable. Examples
of such blocks include targets of ret instructions which must
follow the call instruction, and the default branch of conditional
instructions which must follow the conditional branch instruc-
tion. They cannot be moved freely to other locations due to the
implicit control flow. Our strategy is to transform the implicit
control flows into explicit ones.
• CPX3: Basic blocks with multiple entries. Multiple entries
will lead to different keys derived for the same basic block. Our
strategy is to break it up into multiple basic blocks, each of which
has a single entry.
In the rest of this subsection, we use an example (Figure 5) to
explain how C3 solves these complexities. Note that the transfor-
mation is via binary rewriting without source code of the program.
4.2.1 Transforming indirect call and indirect jump instructions. C3
transforms an indirect call instruction into two push instructions
(one to save the return address and the other to save the target
address onto the stack) followed by a jmp instruction (jumping to
a common stub); see BB5 and BB5′ in Figure 5. The stub block has
a single ret instruction.
Although this simple transformation solves CPX1, it potentially
enforces a relaxed CFI policy since multiple control transfer targets
now go through the same common stub block. We stress that the
same policy is used by existing coarse-grained CFI methods [48, 50].
Moreover, C3 increases the difficulty of a stealthy attack since
the valid targets are now encrypted. We could use a more compli-
cated secret sharing curve to enforce a finer-grained policy, but
C3 chooses this solution due to its simplicity and enforcing a CFI
policy not less secure than existing work. Note that a byproduct
of pushing the return address on the stack (the first push in BB5′)
is a solution to CPX2, as the return site can now be freely moved
(explained later in the next subsection).
Indirect jumps are handled in the same way, except that we
only need one push instruction since there is not a return address,
e.g., BB2 in Figure 5. Additional complexity arises here when the
indirect jump was generated due to switch/case statements during
compilation, where local variables are sometimes accessed via %rbp
directly without changing %rsp. In such cases, we cannot simply
push the target address of the indirect jump onto the stack because
doing so would overwrite the local variables. Instead, we make use
of thread local storage to store the target; see the indirect jump
in BB1 of Figure 5. In order to transform an indirect jump jmp
*0x8(%rax) (the target is the address in memory) while having the
same switch stub with jmp *(%rax), we simply move the target of
them to the temporary register %rdx as shown in BB1′.
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand6Figure 5: An example of instruction transformation by C3. C3 rewrites indirect and conditional branch transfer instructions to jump
to a stub (bold), and the stub will then jump to the real targets. C3 transforms basic blocks with multiple entries (BB4) by copying each entry
to a new address (BB4′ and BB7′).
4.2.2 Transforming conditional jump instructions. Conditional jumps
usually have a fall-through branch to the instruction that immedi-
ately follows, forming an implicit control transfer (CPX2). We turn
this into an explicit one by inserting a direct jump instruction as in
BB4′ of Figure 5. Note that similar to indirect jumps, conditional
jumps may be followed by multiple callees (CPX1); that is why we
also add a stub block as shown in BB4′ of Figure 5.
4.2.3 Transforming return instructions. Handling return instruc-
tions (CPX1) is simple as we only need to add a common stub which
then returns to the call site; see BB6′ in Fig 5. We can enforce a
finer-grained CFI policy by classifying functions into indirectly-
called and directly-called ones, of which the latter does not need the
additional stub block to be inserted since any two of them cannot
return to the same call site. We leave this security improvement as
our future work.
4.2.4 Transforming basic blocks with multiple entries. The multiple
entries of a basic block correspond to different sets of ingredients
for the secret reconstruction, and therefore will result in different
keys (CPX3). C3 handles this by copying each entry (and subse-
quent instructions in the block) to a new address and updating the
corresponding control flow instructions to the new addresses. For
example, BB4 in Figure 5 has two entries, 0x40e603 and 0x40e612,
respectively. C3 copies the second entry to a new address (BB7′)
and directs the control flow from BB3′ to it.
4.3 Basic Block Redistribution
Redistributing basic blocks so that all callers of a control transfer
are on the same secret sharing curve is an interesting and non-
trivial problem. One can consider it as a directed graph traversal
in which whenever a node is traversed, we pick a parabola and
ensure that all its callers are on it by moving some or all the callers.
However, if the traversal is not carefully designed, we could get
into a failure where a node that has been previously moved on a
parabola now needs to be moved again to satisfy another parabola
— a mission impossible. Therefore, the key is to design a directed
graph traversal algorithm that minimizes or eliminates such a risk.
C3 uses a customized Depth First Search (DFS) algorithm. Intu-
itively, DFS fits our requirement in that it explores a branch to its
ultimate leaves before backtracking or stepping into a new branch,
which avoids unnecessary moving of caller nodes of branches al-
ready unexplored. We customize it with a “look ahead” capability
which switches to another nearby branch when continuing explor-
ing the current branch will get into a “mission impossible” case.
As shown in Figure 6 where shaded nodes denote those that had
previously been moved (and therefore cannot be moved again) and
hollow ones otherwise, continuing to traverse node A would run
40e02e  mov %eax, %eax40e030  mov 0x41c828(,%rax,8),%rax40e038  jmp *%rax40e5e2 mov -0x38(%rbp),%eax(cid:2)(cid:2)40e5f4  jmp *%rax40e5f6  mov -0x48(%rbp),%rax(cid:2)(cid:2)40e601 jmp 40e612  40e603 mov 0x2129ae(%rip),%rax(cid:2)(cid:2)40e612 mov -0x48(%rbp),%rax(cid:2)(cid:2)40e61e jne 40e65a40e65a pop %rbp40e65b ret40e620 mov -0x88(%rbp),%rax40e62c call *%rax40e02e  mov %eax, %eax40e030  mov 0x41c828(,%rax,8),%rax40e038  mov %rdx,%fs:0x6040e041  mov %rax, %rdx40e044  mov %rdx, %fs:0x6840e04d  jmp switch_stub40e800 mov -0x38(%rbp),%eax(cid:2)(cid:2)40e812 push %rax40e813 jmp stub40e815  mov -0x48(%rbp),%rax(cid:2)(cid:2)40e820 jmp 41d0f240e822 mov 0x2129ae(%rip),%rax(cid:2)(cid:2)40e831 mov -0x48(%rbp),%rax(cid:2)(cid:2)40e83d jne con_stub_40e83d40e843 jmp 0x40e84540e845 mov -0x88(%rbp),%rax40e851 push $0x40e89c40e856 push %rax40e85b jmp stub40e89c pop %rbp40e89d jmp ret_stubswitch_stub:41ea27 mov %fs:0x60,%rdx41ea30 jmp *%fs:0x68con_stub_40e83d:41d0eb jmp 0x40e89ccopied basic block BB7':41d0f2  mov -0x48(%rbp),%rax(cid:2)(cid:2)41e8fe  jne con_stub_40e8fd41e904 jmp 0x40e845ret_stub:41d0f1 retcon_stub_41e8fd:41e906 jmp 0x40e89cBefore instruction transformationAfter instruction transformationstub:41d0f0 retSession 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand7redistribution (see the previous subsection), which in turn makes it
impossible for the dynamic loader to update addresses in the Global
Offset Table (GOT).
C3 uses XOR as the encryption function due to its simplicity.
The reconstructed secret s from secret sharing is used as the seed
to a pseudo-random function generator to generate a 16-bit key
for encryption. The length of the secret s is a configurable param-
eter which has an upper bound of 16 because going beyond that
may result in distance between two instructions greater than 231.
To fight against memory disclosure attacks that attempt to com-
promise the master key, C3 stores the master secret key outside
of the binary into a database file, an approach used in some ISR
approaches [34]. We note that C3 could also perform load-time
encryption on the basic blocks using a session key (replacing the
master key) to further improve security [2, 31]. Also note that when
the binary rewriting process is performed remotely, we could make
use of remote attestation [13] to securely distribute the master key.
We leave both ideas as our further work.
4.5 Transitioning from Unprotected to
Protected Code
C3 supports partial protection of a program that contains protected
(CFG embedded) and unprotected (e.g., system or third-party li-
braries without CFG embedded) code. However, the transitioning
from unprotected to protected code needs special attention since
CFI checks will fail as the caller is not on the secret sharing curve
of the callee. Such transitioning typically occurs in two scenarios.
• Returning to protected code. This happens when protected
code calls an external library function and subsequently returns
from it.
• Calling to a function in protected code. This happens when
the external library function (e.g., qsort, bsearch) calls a compari-
son function in the protected code.
We handle these cases by adding a dummy block before each
return target and function entry in the protected code, since we
cannot accurately identify calls to a library function and functions
called by the library. This dummy block has only one instruction
that jumps to the actual target, and is encrypted with a key gen-
erated from its address. C3 transfers control to the dummy block
when detecting a control transfer from unprotected to protected
code, the range of which is recorded into a (secure) database.
In this way, C3 ensures that these dummy blocks cannot be
invoked by control flow transfers in the protected code and provides
the same level of protection compared with existing CFI techniques.
Figure 6: “Look ahead” DFS search. Traversing node A would
result in node B having two caller nodes fixed. The “Look ahead”
function of C3 will traverse the sub-branch of node B first.
into a failure mode since node B will have two caller nodes fixed,
making it impossible to find a parabola for node B (it already has
three points determined including the master key). In this scenario,
our “look ahead” function will traverse the sub-branch of node B
before going back to traverse node A. This “look ahead” function is
also used to decide the starting point. By default, C3 picks a node
with the largest number of callers as the starting point, and then
uses the “look ahead” function to check whether this starting point
and one of its callers target the same basic block. If they do, C3
uses this basic block as the starting point. The detailed algorithm is
shown in Appendix A.
Specifically, for a callee to be processed, we first check whether
there is a prior basic block using the “look ahead” mechanism
described above. Then, for each callee to be processed, we check
whether there exists any of its callers that has a fixed address. If
there is, we use this caller (with a fixed address) to determine the
parabola; otherwise we randomly choose a caller to determine the
parabola. The special and additional processing here is that for each
(caller or callee) address, we need to check whether it will have
the same x value with its callee, caller or the master key, since the
same x value could result in a failure in calculating the inverse to
compute the secret as in Equation 2. We generate a new random
address if when detecting this problem.
Once a parabola is determined, we move all the callers onto it
by randomly choosing an unused coordinate on the curve, which
determines the new addresses of the callers. After that, we use the
DFS approach to process other basic blocks.
Since the redistribution of basic blocks might turn a short jump
instruction into a long jump, C3 turns every direct jump into a
long jump (with a four-byte displacement) before the redistribution
process starts.
4.4 Encryption and Decryption
Before we present details of C3 in encrypting a basic block, we note
that completely separating code from data into different sections
is a prerequisite for our encryption to work. This is because the
encryption of any data may disrupt program execution when it is
not decrypted at runtime. Fortunately, many linkers are configured
to ensure such separation, and compiler optimizations like jump
tables are also typically moved to a non-code section. C3 does not
include PLT calls in its protection as doing so will result in .plt
section containing non-continuous addresses due to basic block
5 IMPLEMENTATION