protection against compromised drivers (though it can
sanitize drivers’ inputs, as outlined in §5.2). For this rea-
son, the works covered above are complementary to—and
in many cases composable with—Cinch.
Secure peripheral
interaction (different problem,
overlapping mechanisms). Kells [82], USB Fingerprint-
ing [76, 113], and work by Wang and Stavrou [150] allow
a USB device to establish the identity of a host. The first
two works are defense mechanisms against the host: they
prevent compromised OSes from corrupting devices or
propagating malware; the latter is an attack primitive and
allows a malicious device to compromise hosts selectively.
Cinch’s crypto overlay (§5.4) also allows a device to iden-
tify a host (since connections can be mutually authenti-
cated; §6.3), but the goal is to prevent eavesdropping and
device masquerading.
SeRPEnT [151] and Bumpy [121] provide a safe path-
way from devices, through an untrusted host machine, to
a trusted, remote machine. SeRPEnT provides a similar
abstraction to Cinch’s crypto overlay (§5.4), and its mech-
anism is comparable to Cinch’s crypto adapter. Bumpy’s
goal, however, is remote attestation of user input rather
than prevention of masquerading attacks; its mechanisms
are based on trusted hardware. Both of these works target
wide area networking, while Cinch focuses on intra-host
communication.
Zhou et al. [155] allow trusted applications running
on top of untrusted OSes to securely communicate with
I/O devices. This is done via a trusted hypervisor that
mediates access to hardware by both the trusted and un-
trusted components. Cinch also interacts with peripheral
devices via an untrusted intermediary, but the architecture,
mechanisms, goals, and threat model are all different.
Separation kernels and network security (related
problems, related mechanisms). Two other research ar-
eas deserve special mention. The first is Rushby’s separa-
tion kernel [129], in which the operating system is archi-
tected to make a computer’s components interact as if they
were part of a distributed system (see [81] and [122] for
modern implementations). The foundational observation
of this work—that networks are a useful abstraction for
interposition—is one that we share. However, our goals
and scenario are different. The separation kernel was in-
tended to be a small kernel, with compartmentalized units
that could be formally verified, and it provided separation
through information flow control. In contrast, our scenario
is commodity operating systems, and we are seeking to
apply the conceptual framework of network security.
This brings us to network security itself. Cinch owes
a substantial debt to this field, borrowing as it does con-
cepts like firewalls, deep packet inspection, and virtual
private networks. Moreover, the recent trend toward Net-
work Function Virtualization (NFV) [119, 138] applies
I/O virtualization (as do Cinch and some of the works
cited earlier), but the point in NFV is to make middle-
boxes virtual, for reasons of configurability and cost.
9 Summary and conclusion
Cinch was motivated in large part by the observation
that hardware security is recapitulating the history of net-
work security. Originally, the Internet was a compara-
tively small number of mutually trusting organizations
and users. As a consequence, there was relatively little
focus on support for security within the network infras-
410  25th USENIX Security Symposium 
USENIX Association
14
tructure. With the explosion of Internet users, spurred by
changing economics, security suddenly became a serious
problem. Similarly, commodity operating systems have
relatively few safeguards against misbehaving hardware,
reflecting a time when peripheral devices could be trusted.
But, with the rapid decline in the barriers to producing
plug and play peripherals, those days have come to an
end—and Cinch aims to be useful in the world ahead.
Although Cinch’s individual mechanisms have ample
precedent in the literature, the architecture and the syn-
thesis is novel, to the best of our knowledge. Moreover,
as the evaluation results make clear, the implementation
is pragmatic and surprisingly powerful. Looking at this
fact, we feel comfortable stating that we have identified a
good abstraction for the problem at hand.
To be clear, we are not saying that Cinch uniquely
enables any one piece of its functionality (§5); rather,
the abstraction makes it natural to develop and deploy
what would require far more work under alternative solu-
tions (§8).
We are also not saying that Cinch is comprehensive.
Indeed, besides the limitations covered earlier (§1, §4.2,
§7.6), some of Cinch’s solutions are effective only with
additional mechanisms. As a key example, providing au-
thentication and privacy with Cinch requires certificates
or pairing, and device modifications. However, certificates
are compatible with the chain of trust inherent in purchas-
ing hardware, pairing is similar to the permissions model
on mobile devices, and the required modifications are
not onerous, as our implementation of the adapter (§6.3)
indicates. As another example, Cinch’s compliance Pol-
icy (§5.2) would be strengthened by formal verification.
Despite the issues, Cinch appears to improve on the
status quo. Of course, it is possible that, if Cinch were
widely deployed, it would only escalate an arms race,
and drive attackers to find ever more esoteric vulnerabili-
ties. On the other hand, security is always about building
higher fences, and the considerations at the heart of our
work could guide the future design of peripheral buses
and drivers.
Acknowledgements
This paper was aided by conversations with Andrew Bau-
mann, Adam Belay, Sergio Benitez, Kevin Butler, Chris-
tian Huitema, Trammell Hudson, Ant Rowstron, Dennis
Shasha, Jeremy Stribling, Ymir Vigfusson, and Junfeng
Yang; and substantially improved by the detailed com-
ments of the SOSP and USENIX Security reviewers. This
work was supported by NSF grants CNS-1055057, CNS-
1423249, and CNS-1514422; AFOSR grant FA9550-15-
1-0302; and ONR grant N00014-14-1-0469.
References
[1] 1394-2008—IEEE standard for a high-performance serial bus.
http://standards.ieee.org/findstds/standard/
1394-2008.html.
[2] Abstraction without overhead: traits in Rust. http:
//blog.rust-lang.org/2015/05/11/traits.html.
[3] Advanced Teensy penetration testing payloads.
https://www.offensive-security.com/offsec/
advanced-teensy-penetration-testing-payloads/.
[4] AnywhereUSB/5 integer overflow.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2006-4459.
[5] Apple macbook tech specs.
http://www.apple.com/macbook/specs/.
[6] BadUSB—now with do-it-yourself instructions.
https://nakedsecurity.sophos.com/2014/10/06/
badusb-now-with-do-it-yourself-instructions/.
[7] BadUSB: Big, bad USB security problems ahead.
http://www.zdnet.com/article/badusb-big-bad-usb-
security-problems-ahead/.
[8] BadUSB: what you can do about undetectable malware on a
flash drive.
http://www.pcworld.com/article/2840905/badusb-
what-you-can-do-about-undetectable-malware-on-
a-flash-drive.html.
[9] BeagleBone Black. http://beagleboard.org/BLACK.
[10] Chromebook pixel.
http://www.google.com/chromebook/pixel/.
[11] ClamAV. http://www.clamav.net/.
[12] Close access SIGADS.
https://www.documentcloud.org/documents/807030-
ambassade.html#document/p1.
[13] CoCoSys Endpoint Protector.
http://www.endpointprotector.com/products/
endpoint_protector.
[14] Common vulnerabilities and exposures.
https://cve.mitre.org.
[15] Comodo Endpoint Security Manager. https:
//www.comodo.com/business-enterprise/endpoint-
protection/endpoint-security-manager.php.
[16] COTTONMOUTH-I. https://nsa.gov1.info/dni/nsa-
ant-catalog/usb/index.html#COTTONMOUTH-I.
[17] COTTONMOUTH-II. https://nsa.gov1.info/dni/nsa-
ant-catalog/usb/index.html#COTTONMOUTH-II.
[18] DeviceLock Data Loss Prevention Suite.
http://www.devicelock.com/products/.
[19] DLL planting remote code execution vulnerability.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2015-0096.
[20] Equation group: Questions and answers.
https://securelist.com/files/2015/02/Equation_
group_questions_and_answers.pdf.
[21] Equation: The Death Star of Malware Galaxy.
https://securelist.com/blog/research/68750/
equation-the-death-star-of-malware-galaxy/.
[22] GFI EndpointSecurity.
http://www.gfi.com/products-and-solutions/
network-security-solutions/gfi-endpointsecurity.
[23] grsecurity. https://grsecurity.net.
[24] Hackers pierce network with jerry-rigged mouse.
http://www.theregister.co.uk/2011/06/27/mission_
impossible_mouse_attack/.
[25] Hubs—BadUSB exposure. https:
//opensource.srlabs.de/projects/badusb/wiki/Hubs.
[26] Inception. https://github.com/carmaa/inception.
[27] Inside TAO: Documents reveal top NSA hacking unit.
http://www.spiegel.de/international/world/the-
nsa-uses-powerful-toolbox-in-effort-to-spy-on-
USENIX Association  
25th USENIX Security Symposium  411
15
global-networks-a-940969.html.
[28] Linux audio driver dereferences null pointer under invalid
device. http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2016-2184.
[29] Linux default configuration does not warn user before enabling
HID over USB. http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2011-0640.
[54] Thunderbolt technology.
http://www.intel.com/content/dam/doc/technology-
brief/thunderbolt-technology-brief.pdf.
[55] Trend Micro Enterprise Data Protection.
http://www.trendmicro.com/us/enterprise/data-
protection/endpoint/.
[56] udev. http://www.freedesktop.org/software/systemd/
[30] Linux serial driver dereferences null pointer under device with
man/udev.html.
no bulk-in or interrupt-in endpoints.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2016-2782.
[31] Linux hid-picolcd_core.c buffer overflow.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2014-3186.
[32] Linux report_fixup HID functions out-of-bounds write.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2014-3184.
[33] Lumension Device Control.
https://www.lumension.com/device-control-
software/usb-security-protection.aspx.
[34] MatrixSSL open source embedded SSL and TLS.
http://www.matrixssl.org.
[35] McAfee Complete Data Protection.
http://www.mcafee.com/us/products/complete-data-
protection.aspx.
[36] NanoSSL—an SSL library for embedded devices.
http://www.mocana.com/iot-security/nanossl.
[37] Novell ZENworks Endpoint Security Management.
https://www.novell.com/products/zenworks/
endpointsecuritymanagement/.
[38] NSA reportedly installing spyware on US-made hardware.
http://www.cnet.com/news/nsa-reportedly-
installing-spyware-on-us-made-hardware/.
[39] Only half of USB devices have an unpatchable flaw, but no one
knows which half.
http://www.wired.com/2014/11/badusb-only-
affects-half-of-usbs/.
[40] OpenSSL. https://www.openssl.org.
[41] OS X does not warn user before enabling HID over USB.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2011-0639.
[42] OS X USB hub descriptor memory corruption.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2012-3723.
[43] Phision 2251-03 (2303) custom firmware & existing firmware
patches (BadUSB).
https://github.com/adamcaudill/Psychson.
[44] QEMU usb_host_handle_control function buffer overflow.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2010-0297.
[45] Qubes OS project. https://www.qubes-os.org.
[46] The Rust programming language.
https://www.rust-lang.org/.
[47] Snort.Org. https://www.snort.org/.
[48] Sophos Endpoint Security and Control.
http://www.sophos.com/en-
us/support/documentation/endpoint-security-and-
control-for-windows.aspx.
[49] Stunnel. http://www.stunnel.org.
[50] Symantec Endpoint Protection.
http://www.symantec.com/endpoint-protection/.
[51] SyncStop. http://syncstop.com.
[52] Teensy USB development board.
https://www.pjrc.com/teensy.
[53] This thumbdrive hacks computers.
http://arstechnica.com/security/2014/07/this-
thumbdrive-hacks-computers-badusb-exploit-makes-
devices-turn-evil/.
16
[57] Universal Serial Bus revision 2.0 specification.
http://www.usb.org/developers/docs/usb20_docs/
usb_20_031815.zip.
[58] Universal Serial Bus revision 3.1 specification. http:
//www.usb.org/developers/docs/usb_31_031815.zip.
[59] USB device class specifications. http:
//www.usb.org/developers/docs/devclass_docs/.
[60] USB over network. http://www.usb-over-network.com.
[61] USB Rubber Ducky. http://usbrubberducky.com.
[62] Using and Managing USB devices. Qubes OS Project.
https://www.qubes-os.org/doc/usb/.
[63] Windows crafted .LNK or .PIF arbitrary code execution.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2010-2568.
[64] Windows disk partition driver elevation of privilege
vulnerability. http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2014-4115.
[65] Windows does not warn user before enabling HID over USB.
http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2011-0638.
[66] wolfSSL. http://www.yassl.com.
[67] Bluetooth user interface flow diagrams for Bluetooth secure
simple pairing devices. Technical report, Bluetooth Usability
Expert Group, Sept. 2007.
[68] AMD-V nested paging. Technical report, AMD, July 2008.
[69] Cherry MX series keyswitch, 2014.
http://cherrycorp.com/product/mx-series/.
[70] Intel virtualization technology for directed I/O, Oct. 2014.
http://www.intel.com/content/www./us/en/embeded/
technology/virtualization/vt-directed-io-
spec.html.
[71] AMD I/O virtualization technology (IOMMU) specification,
Feb. 2015.
http://support.amd.com/TechDocs/48882_IOMMU.pdf.
[72] TURNIPSCHOOL - an open source reimagining of