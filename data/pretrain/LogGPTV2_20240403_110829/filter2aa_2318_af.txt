Battering   
ram  
Uses   a   single   payload   list;  Replaces   all   positions   at   the   same   time;  
Once   you   have   selected   your   attack   type   and   the   value   to   be   modified   click   on   the  
“Payloads”   sub   tab   as   shown   below:  
Pitchfork  
Each   position   has   a   corresponding   payload   list;  So   if  there   are   two   
positions   to   be   modified   they   each   get   their   own   payload   list.  
Cluster   
Bomb  
Uses   each   payload   list   and   tires   different   combinations   for   each   position.  
Here   we   want   to   select   our   payload   type   and   the   payload   list.  There   are   numerous   
payload   types   but   i'm   going   to   keep   it  on   the   default   one,   feel   free   to   play   around   with   
the   others.   As   for   my   payload   list   we   want   a   list   of   fuzzing   values.   For  this   example   im   
just   going   to   use   the   default   lists   that   comes   with   Burp   but   there   are   some   other   good   
lists   on   SecLists:  
●
https://github.com/danielmiessler/SecLists/tree/master/Fuzzing  
Now   to   use   Burps   pre   defined   list   just   click   the   “Add   from  list”   drop   down   menu   and   
select   one:  
Now   that   you   have   your   fuzzing   list   imported   all   that   you   have   to   do   is   press   “Start   
attack”.  
. 
As   shown   above   after   hitting   the   “Start   attack”   button   a   popup   will   appear   and   you   will   
see   your   payloads   being   launched.   The   next   step   is   to   inspect   the   HTTP   responses   to   
determine   if  there   is   anything   suspicious.  
Intruder   is   great   for   brute   forcing,   fuzzing,   and   other   things   of   that   nature.   However,   
most   professionals   don't   use   intruder,   they   use   a   plugin   called   “Turbo   Intruder”.   If   you   
don't   know   what   “Turber   Intruder”   is,  it's   intruder   on   steroids,   it  hits   a   whole   lot   harder   
and   a   whole   lot   faster.   This   plugin   will   be   discussed   more   in   the   plugins   section.  
Repeater  
In   my   opinion   this   is   one   of   the   most   useful   tabs   in   Burp.   If   you   want   to   modify   and   
replay   and   request   you   do   it  in   the   repeater   tab.   Similar   to   Intruder   if  you   right   click   a   
request   and   click   “Send   to   Repeater”   it  will   go   to   the   repeater   tab.  
Once   the   request   is   sent   to   the   Repeater   tab   you   will   see   something   like   this:  
One   this   tab   you   can   modify   the   request   to   test   for   vulnerabilities   and   security   
misconfigurations.   Once   the   request   is   modified   you   can   hit   the   Send   button   to   send   the   
request.   The   HTTP   response   will   be   shown   in   the   Response   window.   You   might   have   
noticed   that   at   the   top   there   are   a   bunch   of   different   tabs   with   numbers   on   them.   By   
default   every   request   you   send   to   the   repeater   will   be   assigned    a   number.   Whenever   I   
find   something   interesting   I   change   this   value   so   I   can   easily   find   it  later,   that's   why   one   
of   the   tabs   is   labeled   SSRF,it’s  a   quick   easy   way   to   keep   a   record   of   things.  
Conclusion  
Burp   Suite   is   the   one   tool   every   bug   bounty   hunter   needs   in   their   arsenal.   If   you’re   doing   
a   deep   dive   on   a   target   application   Burp   is   the   only   tool   you   need.   It   has   a   vast   amount   
of   plugins   to   aid   in   the   identification   and   exploitation   of   bugs   but   its  real   power   comes   
from  allowing   attackers   the   ability   to   inspect   and   manipulate   raw   HTTP   requests.   Once   
you   learn   the   basics   of   Burp   you   can   pull   off   the   vast   majority   of   your   hacks   using   the   
tool.   
Basic  Hacking  OWASP  
Introduction  
I   started   off   as   a   penetration   tester   specializing   in   web   application   and   when   I   started   
doing   bug   bounties   my   skills   carried   over   100%.   Legit   80%   of   the   attacks   you   pull   off   are   
going   to   be   against   a   web   application.   After   all,   in   today's   world   the   vast   majority   of   a   
company's   public   facing   assets   are   web   applications.   For  this   reason   alone   you   MUST   
learn   web   application   hacking   if  you   want   to   be   successful   and   there   is   no   better   place   
to   start   than   the   OWASP   top   10.   If   all   you   got   out   of   this   book   was   learning   how   to   
exploit   these   basic   web   vulnerabilities   you   will   be   able   to   find   bugs   all   day.  
SQL  Injection(SQLI)  
Introduction  
SQL   Injection   (SQL)   is   a   classic   vulnerability   that   doesn’t   seem   to   be   going   anywhere.   
This   vulnerability   can   be   exploited   to   dump   the   contents   of   an   applications   database.   
Databases   typically   hold   sensitive   information   such   as   usernames   and   passwords   so   
gaining   access   to   this   is   basically   game   over.   The   most   popular   database   is   MySQL   but   
you   will   run   into   others   such   as   MSSQL,   PostgreSQL,   Oracle,   and   more.  
The   main   cause   of   SQL   injection   is   string   concatenation   as   shown   in   the   above   code   
snippet.   One   line   three   the   application   is   concatenating   user   supplied   input   with   the   sql   
query,   if  you   ever   see   this   you   know   you   have   sql   injection.   The   reason   why   this   is   so   
dangerous   is   because   we   can   append   additional   sql   queries   to   the   current   query.   This   
would   allow   an   attacker   to   query   anything   they   want   from  the   database   without   
restrictions.  
MySql  
The   two   most   common   types   of   sql   injection   are   union   based   and   error   based.   Union   
based   sql   injection   uses   the   “UNION”   sql   operator   to   combine   the   results   of   two   or   more   
“SELECT”   statements   into   a   single   result.   Error   based   sql   injection   utilizes   the   errors   
thrown   by   the   sql   server   to   extract   information.  
Typically   when   I'm   looking   for   this   vulnerability   I'll   throw   a   bunch   of   double   and   single   
quotes   everywhere   until   I   see   the   famous   error   message.  
As   you   can   see   in   the   first   image   appending   a   single   quote   to   the   “cat”  variable   value   
throws   an   sql   error.   Look   at   the   two   error   messages   and   notice   how   they   are   different.   
Note   that   “%27”   is   the   same   as   a   single   quote,   it's   just   url   encoded.  
In   the   following   sections   I'll   show   you   how   to   exploit   this   vulnerability   and   no   we   won’t   
be   using   SqlMap,   you   need   to   know   how   to   do   this   by   hand.  
●
https://github.com/sqlmapproject/sqlmap  
Union   Based   Sql   Injection  
Once   you   know   that   an   endpoint   is   vulnerable   to   sql   injection   the   next   step   is   to   exploit   
it.   First   you   need   to   figure   out   how   many   columns   the   endpoint   is   using.   This   can   be   
accomplished   with   the   “order   by”   operator.   Basically   we   are   going   to   ask   the   server   “do   
you   have   one   column”,   if  it  does   the   page   will   load.   Then   we   ask   “do   you   have   two   
columns”,   if  it  loads   it  does   and   if  it  throws   an   error   we   know   it  doesn't.  
We   can   see   here   the   page   loads   just   fine,   this   means   there   must   be   at   least   one   column   
returned   by   the   sql   statement.   Just   keep   adding   one   to   the   number   until   you   get   an   
error.  
●
Order   by   1  
●
Order   by   2  
●
Order   by   3  
●
Order   by   4  
   If   you   were   to   try   “order   by   4”   it  will   fail   so   there   must   not   be   4   columns   which   means   
there   are   3   because   “order   by   3”   loaded   without   any   errors.  
Now   that   you   know   how   many   columns   the   sql   query   is   using   you   need   to   figure   out  
which   columns   are   being   displayed   to   the   page.   We   need   to   know   this   because   we   
need   a   way   to   display   the   information   we   are   extracting.   To   accomplish   this   we   can   use   
the   “union   all   select”   statement.   Note   that   for   the   second   select   statement   to   show   we   
need   to   make   the   first   query   return   nothing,   this   can   be   accomplished   by   putting   an   
invalid   id.  
Notice   the   numbers   on   the   page.   These   numbers   refer   to   the   columns   which   are   being   
displayed   on   the   front   end.   Look   at   the   above   example.   I   see   the   numbers   “2”   and   “3”   so   
these   are   the   columns   we   will   use   to   display   the   results   from  our   queries.  
As   shown   above   one   of   the   first   things   I   typically   do   is   to   display   the   database   version,   
this   can   be   accomplished   with   the   following   mysql   command:  
●
@@version  
●
version()  
You   can   see   we   are   working   with   mysql   version   5.1.73,   it's   a   good   idea   to   note   this   
down   as   it  might   come   in   handy   later.   Extracting   the   database   version   is   cool   and   all   but   
what   about   the   sensitive   data.   
To   extract   data   we   first   need   to   know   what   database   tables   we   want   to   target,   we   can   
get   a   list   of   tables   with   the   following   command:  
●
Select   *   from  information_schema.tables  
Note   that   “information_schema.tables”   is   a   default   table   within   mysql   that   holds   a   list   of   
table   names.   This   table   has   two   columns   we   care   about,   table_name   and   
table_schema.   You   can   probably   guess   what   the   table_name   column   represents.   The   
table_schema   column   holds   the   name   of   the   database   the   table   belongs   to,   so   if  you   
only   want   to   get   tables   from  the   current   database   make   sure   to   filter   the   results   with   the   
“where”   operator.   
●
union  all  select  1,2,group_concat(table_name)  from  information_schema.tables   
where  table_schema  =  database()  
As   you   can   see   above   we   got   a   list   of   all   the   tables   belonging   to   this   database.   You   
might   have   noticed   the   function   “database()”,   this   function   outputs   the   current   database   
name   and   is   used   to   filter   the   results   via   the   table_schema   column.   You   also   might   have   
noticed   the   “group_concat”   function,   this   function   will   concatenate   all   the   table   names   
into   a   single   string   so   they   can   all   be   displayed   at   once.  
Once   you   pick   which   table   you   want   to   target   you   need   to   get   a   list   of   columns   
belonging   to   that   table.   A   list   of   columns   belonging   to   a   table   can   be   retrieved   via   the   
“information_schema.columns”   table   as   shown   in   the   below   query:  
●
union  all  select  1,2,group_concat(column_name)  from   
information_schema.columns  where  table_name  =  "users"  
As   you   can   see   above   there   are   a   few   columns   returned,   the   most   interesting   column   
names   are   “uname”   and   “pass”.   The   final   step   is   to   dump   the   contents   of   these   two   
columns   as   shown   below:  
●
union  all  select  1,2,group_concat(uname,":",pass)  from  users  
As   you   can   see   above   there   is   a   user   called   “test”   with   the   password   “test”.   We   can   then   
use   these   credentials   to   login   to   the   application   as   that   user.  
Error   Based   Sql   Injection  
With  union   based   sql   injection   the   output   is   displayed   by   the   application.   Error   based   sql   
injection   is   a   little   different   as   the   output   is   displayed   in   an   error   message.   This   is   useful   
when   there   is   no   output   except   a   sql   error.  
Xpath  
If   the   MySql   service   version   is    5.1  or  later   we   can   use   the   “ extractvalue() ”   function   to   
exfiltrate   data   from  the   database.   The   ExtractValue()   function   generates   a   SQL   error   
when   it  is   unable   to   parse   the   XML   data   passed   to   it.   Rember   with   error   based   sql   
injection   we   must   extract   our   data   via   sql   error   messages.  
First   you   need   to   understand   how   the   ExtractValue()   function   works,   once   you   
understand   how   this   function   operates   you   can   abuse   it  for   sql   injection.  
As   you   can   see   in   the   above   image   the   ExtractValue()   function   is   used   to   parse   out   a   
value   from  an   XML   document.   Here   we   pass   in   the   XML   string    “1   
ghostlulz  PI:EMAIL ”   and   we   get   the   value   
of   the   name   tags   with   the   second   argument.   So   the   first   argument   is   an   XML   document  
and   the   second   argument   is   the   tag   we   want   to   get   the   value   of.  
As   shown   above   if  the   second   argument   starts   with   a   “;”   it  will   cause   a   MySql   error   
message   to   appear   along   with   the   string   that   caused   the   error.   Attackers   can   abuse   this   
to   extract   data   via   error   messages.   Looking   at   the   above   example   you   can   see   I   was   
able   to   extract   the   database   version   via   an   error   message.   Armed   with   this   knowledge   
you   can   now   use   this   technique   to   perform   error   based   sql   injection.  
●
AND  extractvalue("blahh",concat(";",@@version))  
As   you   can   see   above   we   were   able   to   extract   the   MySql   database   version   via   an   error   
message.   The   next   step   is   to   get   a   list   of   table   names.   Similar   to   union   based   sql   
injection   we   will   be   utilizing   the   information_schema.tables   table   to   achieve   this.  
●
AND  extractvalue("blahh",(select  concat(";",table_name)  from   
information_schema.tables  where  table_schema  =  database()  limit  0,1))  
Notice   the   “limit   0,1”   command   at   the   end   of   the   query.   This   is   used   to   get   the   first   row   in   
the   table,   with   error   based   sql   injection   we   have   to   query   one   table   at   a   time.   To   get   the   
second   table   you   would   use   “limit   1,1”.  
As   you   can   see   above   we   will   be   targeting   the   “users”   table.   Once   you   have   your   target   
table   you   need   to   query   the   column   names   belonging   to   that   table.  
●
AND  extractvalue("blahh",(select  concat(";",column_name)  from   
information_schema.columns  where  table_name  =  "users"  limit  0,1))  
The   first   column   name   is   “uname”,   now   we   have   to   get   the   second   column   name   as   
shown   below:  
As   you   can   see   above   the   second   column   name   is   called   “pass”.   The   final   step   is   to   
extract   the   data   from  these   columns.  
●
AND  extractvalue("blahh",(select  concat(";",uname,":",pass)  from  users  limit  0,1))  
As   you   can   see   above   we   were   able   to   extract   the   username   and   password   of   the   first   
user   “test:test”.   To   get   the   next   user   just   change   “limit   0,1”   to   “limit   1,1”.  
PostgreSql  
If   you   know   how   to   perform   sql   injection   on   a   mysql   server   then   exploiting   postgres   will   
be   very   similar.   Just   like   mysql   I   typically   throw   single   and   double   quotes   every   where   
until   I   see   the   famous   error   message   appear:  
As   you   can   see   above   there   is   an   error   message   displayed.   The   name   “psycopg2”   is   a   
python   library   for   postgres   so   if  you   see   this   name   you   know   you’re   working   with   a   
postgres   database   server.  
Union   Based   Sql   Injection  
Just   like   MySql   the   first   step   is   to   determine   how   many   columns   the   sql   query   is   using,   
this   can   be   accomplished   by   using   the   “order   by”   operator.   As   shown   below   we   ask   the   
server   “do   you   have   at   least   one   column”,   then   we   ask   “do   you   have   two   columns”,   and   