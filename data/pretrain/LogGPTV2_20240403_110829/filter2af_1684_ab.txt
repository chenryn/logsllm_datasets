            if (!(Dll_Buffer & ff80ff80ff80ff80h))
                acc = (QWORD *) Dll_Buffer & ffdfffdfffdfffdfh;
            }
            /* This code is really executed in the else statement, the if
            statement is a while that goes element by element substracting 
            20h from every element between 61h and 7Ah, of course that's 
            much slower than this */
            size -= 4;
            dll_buffer += 4;
            res = acc + (res >> 1) + 3 * res;
        } while (size >= 4)
        hash = (DWORD) res + (res >> 20h)
        /* If size is not a multiple of 4 the last iteration
        would be done using the while explained before */
    }
    obpLookupCtx.HashValue = hash;
    obpLookupCtx.HashIndex = hash % 25;
如果你使用DLL名称“kerberos.dll”执行此操作，希望你将获得`20h`对应于十进制值32 的HashIndex
，如果你仔细检查我的图片，其中“kerberos.dll”是作为已知DLL的一部分加载，并在hash列中进行检查，你可以看到值是32。接下来，该函数检查写入OBP
_LOOKUP_ CONTEXT结构的计算散列是否与该部分的散列以及计算索引相匹配：
如果第一次检查顺利，则代码`OBJECT_HEADER_NAME_INFO`将使用公式获取`ObjectHeader -ObpInfoMaskToOffset - ObpInfoMaskToOffset[InfoMask &
3]`，并且根据我们作为参数传递给函数LoadLibrary的名称再次检查对象的名称。如果进展顺利，那么`OBP_LOOKUP_CONTEX`的成员对象和EntryLink将被填充，经过多次检查，这个结构将被复制到外部参数指针中，我们将从这个函数返回。该函数有两个out参数，返回后，第一个参数将有指向对象的指针，第二个参数将有指向填充的`OBP_LOOKUP_CONTEX`结构的指针。
如果检查函数接收的参数（[此处](https://n4r1b.netlify.com/en/posts/2019/03/part-1-digging-deep-into-loadlibrary/#params_obp)），`FoundObject`值将为`rsp +
68h`，而`OBP_LOOKUP_CONTEX`结构将为`rsp +
48h`。另外看看这个对象怎么还没有打开任何句柄，这将发生在我们今天要学习的最后一个函数 **ObpCreateHandle**
中，这个函数将会从对象中获取句柄。
这个函数也有很多代码，因为这已经很长了，我不会详细介绍（也许在其他帖子中我可以详细介绍，因为它是一个非常有趣的函数）。
**ObpCreateHandle** 将接收的最重要的参数是在`rcx`上，它将从`OB_OPEN_REASON`枚举中接收一个值。以下之一：
    ObCreateHandle      =   0
    ObOpenHandle        =   1
    ObDuplicateHandle   =   2
    ObInheritHandle     =   3
    ObMaxOpenReason     =   4
然后在`rdx`函数中期望引用对象（DLL Section
Object），并在`r9`函数中接收ACCESS_STATE结构，其中包含ACCESS_MASK以及其他有趣的内容。
我们考虑到这一点，并且在这种情况下知道`OB_OPEN_REASON`枚举的值将是`ObOpenHandle`，让我们开始。该函数将做的第一件事是检查我们试图获取的处理程序是否用于内核对象（换句话说，我们正在尝试获取[内核句柄](https://docs.microsoft.com/en-us/windows/desktop/sysinfo/kernel-objects)）。如果不是这种情况，那么函数将检索`KTHREAD->ApcState->Process->(EPROCESS)
ObjectTable`对应于`HANDLE_TABLE`结构的ObjectTable（），在一些检查之后，将调用函数[
**ExAcquireResourceSharedLite**](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-exacquireresourcesharedlite)以获取[
**PrimaryToken**](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-exacquireresourcesharedlite)的资源（当我说资源时，我指的是某种互斥体的`ERESOURCES`结构，你可以[在这里](https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/introduction-to-eresource-routines)阅读更多有关资源的信息）。
如果已获取资源，则将调用函数[ **SeAccessCheck**](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-seaccesscheck)，这些函数检查是否可以授予对特定对象的请求访问权限。如果授予了这些权限，我们进入函数
**ObpIncrementHandleCountEx**
，它负责从我们试图获取句柄的节对象和一般对象类型计数中递增句柄计数（这个函数只增加计数器，但这个并不意味着句柄是打开的。这可以通过运行`!object
[object]`来检查，你会注意到HandleCount已经递增，但是你将看不到对这个检查过程的句柄`!handle`的任何引用）
最后句柄将打开。为了节省一些时间，我将展示一些伪代码如何完成，我将在代码中添加注释。（再次由Hex-Rays赞助的伪代码）。
    // I'm goint to simplify, there will be no check nor casts
    HANDLE_TABLE * HandleTable = {};
    HANDLE_TABLE_ENTRY * NewHandle = {};
    HANDLE_TABLE_FREE_LIST * HandlesFreeList = {};
    // Get reference to the Object and his attributes (rsp+28h), to get
    // the object we use the Object Header (OBJECT_HEADER) which is 
    // obtained from the Object-30h (OBJECT_HEADER+30h->Body) 
    QWORD LowValue = 
        (((DWORD) Attributes & 7 TypeIndex)
    HIDWORD(HighValue) = Dll_Object - 18h
    // Get the requested access 
    LODWORD(HighValue) = ptrAccessState.PrevGrantedAccess & 0xFDFFFFFF;
    // Get the HANDLE_TABLE from the process
    HandleTable = KeGetCurrentThread()->ApcState.Process->ObjectTable;
    // Calculate index based on Processor number 
    indexTable = Pcrb.Number % nt!ExpUuidSequenceNumberValid+0x1;
    // Get the List of Free Handles
    HandlesFreeList = HandleTable->FreeLists[indexTable];
    if(HandlesFreeList) {
        Lock(HandlesFreeList); // This is more complex than this
        // Get the First Free Handle
        NewHandle = HandlesFreeList->FirstFreeHandleEntry;
        if (NewHandle) {
            // Make the Free handles list point to the next free handle
            tmp = NewHandle->NextFreeHandleEntry;
            HandlesFreeList->FirstFreeHandleEntry = tmp;
            // Increment Handle count
            ++HandlesFreeList->HandleCount;
        }
        UnLock(HandlesFreeList);
    }
    if (NewHandle) {
        // Obtain the HandleValue, just to return it
        tmp = *((NewHandle & 0xFFFFFFFFFFFFF000) + 8)
        tmp1 = NewHandle - (NewHandle & 0xFFFFFFFFFFFFF000) >> 4;
        HandleValue = tmp + tmp1*4;
        // Assign pre-computed values to the handle so it
        // knows to which object points, whick type of object it
        // is and which permissions where granted
        NewHandle->LowValue = LowValue;
        NewHandle->HighValue = HighValue;
    }
最后，该函数将返回句柄值`rsp+48`。从现在开始直到返回用户域Userland，一切都与清理机器状态（结构，单个列表，访问状态等等）有关，当我们最终到达Userland（
**LdrpFindKnowDll** ）时，我们将拥有句柄，STATUS将为0。
>
> 这个句柄与LoadLibrary在完成所有操作时将返回的模块句柄无关，这只是一个将在“内部”使用的Section对象的句柄。更重要的是，在这一点上，DLL甚至没有被加载到进程的地址空间中，我们将在第2部分中看到这是如何发生的。
# 结论
如你所见，内核中有很多代码，并非一切都是简单直接的，我敢肯定事情非常复杂。请记住我们将进入更复杂的东西。另一方面，我留下了大量没有评论也没有提及的代码、结构、列表等，我只是试着总结我所认为最重要的东西。当然，如果你有任何疑惑和问题，请毫不犹豫与我联系。我希望你喜欢它并在第2部分见到你。