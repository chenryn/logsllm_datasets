void fastcall foo(int, int);
/ /a .c
int nain()
foo(1, 3) ;
f0 uznqaz
/ /b.c
#include 
void _cdecl foo(int a, int b)
程序员的自我修养一链接、装载与库
---
## Page 322
10.2栈与调用横例
printf(*a=d,b=d*, a, b) :
这里有2个c文件，分别定义和调用了函数fo0，但在a.c中，调用foo所使用的调用惯
例是错误的fastcall，编译并链接这两个c文件会发现链接失败，因为在ac中，foo函数被
修饰为@foo@8，而在b.c中，foo函数被修饰为_foo.为了使得程序能够运行，我们可以把
b.c单独编译为 DLL（或 so），并导出符号foo，而 main 则加载b.c导出的DLL（或so），并
导入符号foo，（具体步骤在动态链接部分已经有详细的说明，这里就不再细说.）如此处理
之后程序就可以运行了、运行的结果（可能）是：
a=8458637, b=1
可见参数没有正确的传入：
10.2.3函数返回值传递
除了参数的传递之外，函数与调用方的交互还有一个渠道就是返回值，在第287页的例
子中，我们发现eax是传递返回值的通道。函数将返回值存储在cax中，返回后函数的调用
方再读取eax。但是cax本身只有4个字节，那么大于4字节的返回值是如何传递的呢？
对于返回5~8字节对象的情况，几乎所有的调用惯例都是采用eax和edx联合返回的
方式进行的。其中eax存储返回值要低4字节，而edx存储返回值要高1~4字节。面对于
超过8字节的返回类型，我们可以用下列代码来研究：
typedef struct big_thing
char buf [128] :
big_thing return_test ()
big_thing b:
b.buf[0] = 0:
return b;
Lnt main()
{
big_thing n = return_test () :
不可能直接用过eax传递。让我们首先来反汇编（MSVC9）一下main函数，结果如下：
big_thing n = return_teet (1 ;
00411498  1ea
0041149E
eax, [ebp-1D0h]
0041149F
ca11
push
_return_test
程序员的自我修养一链接、装载与库
---
## Page 323
300
第10章内存
004114A4
add
esp, 4
004114A7
004114AC
mOV
ecx, 20h
004114A&
AOW
Iea
e8i, eax
dword ptr es:(edi),dword ptz [es1]
edi, {ebp88h]
004114B4
rep
movs
其中第二行：
004114981ea
eax, [ebp-1D0h]
将栈上的一个地址（ebp-1DOb）存储在eax里，接者下一行：
push
eax
将这个地址压入栈中然后就紧接若调用returm_test函数，这从形式上无疑是将数据ebp
1D0h作为参数传入returm_test 函数，然面retum_test是没有参数的，因此我们可以将这个数
据称为是“隐含参数”。换句话说，returm_test的原型实际是：
big_thing return_test (void* addr) ;
这段汇编最后4行（斜体部分）是一个整体，我们可以想象在函数返回之后，函数的调
用方需要获取函数的返回对象并对n赋值。repmovs是一个复合指令，它的大致意义是重复
movs 指令直到ecx寄存器为0.于是“rep movs a,b”的意思就是将b指向位置上的若干个
双字（4字节）拷贝到由a指向的位置上，拷贝双字的个数由ecx指定，实际上这句复合指
令的含义相当于memcpy（a,b,ecx*4）。所以说，最后4行的含义相当于：
mencpy (ebp-88h, eax, 0x20 * 4)
即将cax指向位置上的0x20个双字拷贝到ebp-88h 的位置上。毫无疑问，ebp-88h 这个
地址就是变量n的地址，如果有所怀疑，可以比较一下n的地址和ebp-88h的值即可确信这
一点。而0x20个双字就是128个字节，正是big_thing的大小。现在我们可以将这段汇编略
微还原了：
return_test (ebp-1D0h)
memcpy(&n, (void*)eax, sizeof (n) ) ;
可见，retum_test 返回的结构体仍然是由 eax传出的，只不过这次eax存储的是结构体
的指针。那么retum_test具体是如何返回一个结构体的呢？让我们来看看retum_test 的实现：
big_thing return_test ()
big_thing b;
004113C8mov
:0 = [o1nq*q
byte ptr [ebp-88h],0
004113CP
return bj
mov
ecx,20h
004113D4
lea
ed1,dword ptr [ebp+8]
ee1, [ebp-88h]
004113DA
004113DD
mOV
rep movs
dvord ptr es:[edi],dword ptr [esi]
004113DP
mOV
eax, dword ptr [ebp+8]
程序员的自我修养一链接、装载与库
---
## Page 324
10.2栈与调用惯例
301
在这里，ebp-88h 存储的是 retum_test 的局部变量 b。根据 rep movs 的功能，加租的 4
条指令可以翻译成如下的代码：
memcpy I[ebp+8], &b, 128) ;
在这里，[ebp+8]指的是*（void**ebp+8），即将地址ebp+8上存储的值作为地址，由于
ebp 实际指向找上保存的旧的 ebp，因此ebp+4指向压入栈中的返同地址，ebp+8则指向函
数的参数。而我们知道，retum_test是没有真正的参数的，只有一个“伪参数”由函数的调
用方悄悄地传入，那就是cbp-1DOh（这里的ebp是retum_test调用前的 ebp）这个值。换句
话说，[ebp+8]=old_ebp-1D0h.
那么到底main 函数里的ebp-1D0h 是什么内容呢？我们米看看 main 函数一开始初始化
的汇编代码：
int main()
00411470
1
00411471
qsnd
ebp
P00
mOV
sub
esp,1D4b
ebp, esp
00411479
Push
ebx
0041147A
push
esi
0041147B
push
Lea
edi
0041147C
00411482
mov
edl, [ebp-1D4h]
00411487
moV
ecx, 75h
0041148C
rep
8t08
[tpa]1sa 11d pzoap
0041148B
mOV
eax, dword ptr [_security_cookie (41700oh) ]
00411495
00411493
moV
XOT
dword ptr [ebp-4],eax
eax, ebp
我们可以看到main函数在保存了ebp之后，就直接将栈增大了1D4h个字节，因此
ebp-1D0h就正好落在这个扩大区城的末尾，面区间[ebp-1D0h,ebp-1D0h+128）也正好处于这
个扩大区域的内部。至于这块区域剩下的内容，则留作它用。下面我们就可以把思路理清了：
首先main函数在栈上额外开辟了一片空间，并将这块空间的一部分作为传递返回值的
临时对象，这里称为temp。
·将temp对象的地址作为隐藏参数传递给retum_test函数。
·retum_test 函数将数据拷贝给temp 对象，并将 tcmp 对象的地址用eax 传出。
·retum_test 返回之后，main 函数将eax 指向的 temp 对象的内容拷贝给n.
整个流程如图10-13所示。
也可以用伪代码表示如下：
void return_test (void *tenp)
程序员的自我修养—链接、装载与库
---
## Page 325
302
第10章内存
big_thing b;
mencpy (temp, &b, sizeof (big_thing) ) ;
b.buf[0] • 0;
eax - terp:
int main ()
big_thing tenp;
big_thing n;
nemcpy (&n, eax, sizeof (big_thing) ) ;
return_test (&temp) :
old_ebp - 1D0h =
temp
传递地址
保存资存器、局部
变量和保留区域
贝
old_ebp - B8h
ebp + 8
隐含参数
返回地址
ebp
Oid ebp
ebp+88
b
保存寄存器和局部
变量
图10-13返回值传递流程
毋庸置疑，如果返回值类型的尺寸太大，C语言在函数返回时会使用一个临时的栈上内
存区域作为中转，结果返回值对象会被拷贝两次，因面不到万不得已，不要轻易返回大尺寸
的对象。为了不失一般性，我们再来看看在Linux下使用gcc4.03编译出来的代码返回大尺
寸对象的情况。测试的代码仍然使用以下代码：
typedef struct big_thing
1big_thing:
char buf [128]:
big_thing return_test ()
big_thing b;
b.buf[0] = 0:
return b;
程序员的自我修养一链接、装载与库
---
## Page 326
10.2栈与调用惯例
303
int main()
big_thing
return_test () ;
1
下面是其main函数的部分反汇编：
80483bd:
8d 85 t8 fe ff ff
1e8
eax，[ebp-107h]
80483c3:
890424
ff ff
mOV
8048360 
[esp]， eax
80483c6:
83 ec 04