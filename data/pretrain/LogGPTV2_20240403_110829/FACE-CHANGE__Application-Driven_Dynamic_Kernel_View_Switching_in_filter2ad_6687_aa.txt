# FACE-CHANGE: Application-Driven Dynamic Kernel View Switching in a Virtual Machine

**Authors:** Zhongshu Gu, Brendan Saltaformaggio, Xiangyu Zhang, Dongyan Xu  
**Affiliation:** Department of Computer Science and CERIAS, Purdue University, West Lafayette, IN, USA, 47907-2107  
**Emails:** {gu16, bsaltafo, xyzhang, dxu}@cs.purdue.edu  
**Conference:** 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
Kernel minimization is a well-established technique for reducing the trusted computing base (TCB). Current solutions typically involve whole-system profiling to generate a globally minimized kernel image shared by all applications. However, this approach results in an unnecessarily large attack surface because different applications use only a subset of the kernel's code. Additionally, a static minimized kernel lacks the flexibility to adapt to changes in the execution environment. 

FACE-CHANGE is a virtualization-based system that enables dynamic switching among multiple minimized kernels, each tailored to an individual application. Based on prior profiling results, FACE-CHANGE presents a customized kernel view for each application, thereby confining its reachability of kernel code. If an application attempts to access code outside its kernel view, FACE-CHANGE can recover the missing code and backtrace the attack or exception provenance to analyze anomalous behavior.

**Keywords:** Attack Surface Minimization, Attack Provenance, Virtualization

## 1. Introduction
Modern operating systems aim to reduce the size of the trusted computing base (TCB) to ease code verification and minimize trust assumptions. For general-purpose operating systems like Linux, kernel minimization has been recognized as an effective method to reduce the attack surface. However, existing approaches have several limitations:

### Coarse-Grained Profiling
Conventional methods generate a minimized kernel image based on whole-system profiling, which does not distinguish between the requirements of different applications. This approach is suitable for special-purpose systems but is less effective for general-purpose operating systems. Our experiments show that two distinct applications may share as little as 33.6% of their executed kernel code, indicating that system-wide kernel minimization over-approximates the kernel requirements of individual applications.

### Flexibility to Adapt to Runtime Changes
Traditional kernel minimization produces a static kernel image customized for a specific workload. This static approach is inflexible and may lead to underestimation of the required kernel code at runtime. Additionally, it cannot handle new applications or changes in the workload of existing applications, potentially leading to crashes or kernel panics.

To address these issues, we developed FACE-CHANGE, a virtualization-based system that supports dynamic switching among multiple minimized kernels, each tailored to an individual application. FACE-CHANGE presents each process with a customized kernel view, eliminating unnecessary kernel code to minimize the attack surface. At runtime, FACE-CHANGE identifies the current process context and dynamically switches to its customized kernel view.

### Contributions
- A quantitative study of per-application kernel requirements in a multi-programming system.
- A virtualization-based dynamic kernel view switching technique that is transparent to the guest VM and requires no patching or recompilation of the guest OS kernel.
- A kernel code recovery mechanism to recover requested but missing code and backtrack the provenance of such anomalies or exceptions.

## 2. System Overview
In this section, we introduce a quantitative method to measure the kernel code requirements of specific applications and evaluate the similarity of these requirements across different applications. We then present the goals and assumptions of our design.

### Motivation
Each application interacts with the OS through system calls, and the set of system calls used varies significantly across different application types and workloads. To accurately measure an application's kernel code requirements, we monitor system execution at the basic block level. We record executed basic blocks that belong to the kernel and are executed in the target application's context.

We define three metrics for comparing the kernel code requirements of two applications:
1. **Intersection**: The overlapping address ranges between two range lists.
2. **Length (LEN)**: The number of elements in a range list.
3. **Size (SIZE)**: The total size of kernel code in a range list.

The similarity index \( S \) between two applications is defined as:
\[ S = \frac{\text{SIZE}(K[\text{app1}] \cap K[\text{app2}])}{\max(\text{SIZE}(K[\text{app1}]), \text{SIZE}(K[\text{app2}]))} \]

Our measurements show that similarity indices range from 33.6% for orthogonal applications (e.g., `top` vs. Firefox) to 86.5% for similar applications (e.g., Apache vs. vsftpd). These results support our hypothesis that kernel code execution paths vary substantially across different application types, indicating that application-specific kernel views can significantly reduce the attack surface.

### Goals and Assumptions
- **Strictness**: The kernel view should only contain necessary kernel code for the application's correct execution under normal usage scenarios.
- **Robustness**: The behavior of an application running with a customized kernel view should be identical to that with a full kernel view under the same workload and usage scenario.
- **Transparency**: No changes are required in the applications or the operating system. The hypervisor controls all FACE-CHANGE operations, which remain transparent to the guest VM.
- **Flexibility**: Administrators can dynamically load, unload, and switch kernel views for specific applications without affecting the system's functionality.

We assume that the environment, including both the applications and the kernel, is not tampered with by malware during the profiling phase.

## 3. Design and Implementation
In this section, we provide a detailed description of the overall design of FACE-CHANGE, highlight the challenges, and propose solutions. We divide the system into two phases: the profiling phase and the runtime phase.

### Profiling Phase
The profiling phase monitors a target program's execution and generates a configuration file describing the application's customized kernel view based on the active kernel code in the process context.

#### Design of the Profiler
We implemented the profiler as a component of the QEMU 1.6.0 full system emulator, enabling it to track application execution at the granularity of a basic block. When the guest OS schedules the target application, the profiler records the executed kernel code segments and exports them to a configuration file.

#### Test Suite Selection
For each application, the user selects a test suite to simulate the expected real-world workload. For example, when profiling a MySQL server, we set up a RUBiS server and used its simulated client to generate workloads for the MySQL database.

### Runtime Phase
In the runtime phase, FACE-CHANGE builds a customized kernel view for each application based on its configuration file and forces the process to use this view whenever the guest OS schedules it. If an application attempts to access code outside its kernel view, FACE-CHANGE recovers the missing code and backtraces the anomaly or exception provenance.

### Kernel Code Recovery Mechanism
To address the issue of incomplete profiling, FACE-CHANGE includes a kernel code recovery mechanism. This mechanism can recover missing code and backtrack the provenance of the anomaly, providing administrators with the ability to analyze attack patterns of both user-level and kernel-level malware.

## 4. Case Studies and Performance Evaluation
This section provides case studies on the effectiveness of FACE-CHANGE in mitigating user and kernel malware attacks and evaluates its performance.

## 5. Limitations and Future Work
We discuss the limitations of FACE-CHANGE and outline potential future work to address these limitations.

## 6. Related Work
We describe related work in the field of kernel minimization and compare FACE-CHANGE with existing approaches.

## 7. Conclusion
FACE-CHANGE is a virtualization-based system that enables dynamic switching among multiple minimized kernels, each tailored to an individual application. By presenting each process with a customized kernel view, FACE-CHANGE minimizes the attack surface and enhances system security.