x29, x30, [sp,16]
add
adrp
x0, .LC2 : *a=td; b=fd; c=fd; d=id; e=id; f=id; g=kd; h=fd\n*
x29, sp, 16
add
x0, x0, :1o12:,1C2
AOU
w1, 8
[de]
I:store 9th argument in the stack
 9th argunent
str
×1,
w2,
2
mov
mov
v3,
3
v4,
A0W
W5,
4
mov
A0w
v7, 7
b1
sp,x29, #16
printf
: restore FP and LR
sub
1dp
x29, x30, [sp,16]
add
ret
ZCds *ds
X-或W-寄存器传递函数的前8个参数[参见ARM13c]。字符串指针使用64位寄存器，所以它使用整
---
## Page 68
50
逆向工程权威指南（上册）
个X0寄存器。所有的其他参数都属于32位整型数据，可由寄存器的低32位/即W-寄存器传递。程序使用
栈来传递第九个参数（数值8）。CPU的寄存器总数有限，所以寄存器往往不足以传递全部参数。
启用优化选项之后，GCC（linaro）4.9生成的代码与此相同。
6.3
MIPS
6.3.1传递3个参数
Optimizing GCC 4.4.5
在MIPS平台上编译“Hello,world!”程序，编译器不会使用putsO函数替代printfO函数，而且它会使
用S5~S7寄存器（即$A0~SA2）传递前3个参数。
这3个寄存器都是“A-”开头的寄存器，因为它们就是负责传递参数（arguments）的寄存器。
指令清单6.10OptimizingGCC4.4.5（汇编输出）
:001S
.ascii*a=ld; b=ld; c=lid\000*
:funct.ion prologue:
main1
lui
$28, thi (.gnu_local_gp)
add1u
$28,$28,$1o (_gnu_1oca1_gp)
$sp,$sp,-32
addlu
J1oad address of printf ():
RS
$31,28 ($sp)
: load address of the text atring and set 1st argument of printf (1:
1v
$25,ca1116(printf)($28)
addiu
1ui
$4, thi ($1C0)
set 2nd argument of pzintf():
 set 3rd argument of printf():
11
 0x1
: call printf ():
11
'9$
0x2
1set 4th argunent of printf() (branch delay slot) :
jalr
$25
11
$7,3
0x3
:function epilogue1
: set return value to 0:
1w
$31,28 ($sp)
move
$2,$0
return
$31
addiu
Ssp, $sp,32 : branch delay slot
指令清单 6.11Optimizing GCC 4.4.5（IDA)
.text : 00000000
nain:
-text:00000000
.text:00000000 var_10
× =0x10
.text : 00000000
.text:00000000
var_4
 -4
:function prologue:
-text:00000000
$gp, (_gnu_1local_gp >> 16)
-text:00000004
addiu $sp, -0x20
.text:00000008
1a
$gp, (gnu_local_gp s 0xFFFF)
.text:0000000C
SV
$ra, 0x20+var_4($sp)
: load address of printf():
.text:00000010
$gp, 0x20+var_10($sp)
. text: 00000014
RT
$t9, (printf & 0xFFFr) ($gp)
---
## Page 69
第6章printf）函数与参数调用
51
:load address of the text string and set Ist argument of printf():
.text:00000018
$a0,$1C0
 *a=td; b=tid; c=ld*
: set 2nd argument of printE():
: set 3rd argument of printf ():
.text:00000020
11
$a1, 1
2000000:1x81*
11
zes
 ca11 printf () :
.text:00000028
:set 4th argument of printf ()(
jalr
(branch delay slot):
$t9
: function epilogue:
.text:0000002C
11
.text:00000030
T
$ra, 0x20+var_4($sp)
set return value to 0:
-text:00000034
nove Sv0, Szero
:return
-text:00000038
addiu #sp, 0x20 : branch delay 81ot
jx
Sra
-text:0000003C
IDA没有显示0x1C的指令。实际上0x18是“LUI”和“ADDIU”两条指令，IDA把它们显示为单条
的伪指令，占用了8个字节。
Non=optimizing GCC 4.4.5
如果不启用编译器的优化选项，那么GCC输出的指令会详细得多。
指令清单6.12Non-optimizing GCC 4.4.5（汇编输出）
$LC0:
=000\P$=o p=q p=e。1Tose*
function prologue:
main:
addiu
$sp,$sp,-32
RS
8W
(de1ds
$31,28 ($sp)
move
$28, shi (_gnu_1ocal_gp)
dss'dgs
lu1
:1oad address of the text string
addiu
$28, $28, 11o (gnu_Lloca1_gp)
lui
$2, thi ($1C0)
1set 1st argument of printf(1:
addlu
$2,$2, 41o ($LC0)
set 2nd argument of printf(1:
move
$4,$2
J set 3rd argument of printf():
11
$5, 1
0x1
 set 4th argument of printf():
11
0x2
 get address of printf ():
1i
$7,3
 0x3
nop
T
$2, tca1116 (printf) ($28)
: call printf():
$25,$2
ja1r
nop
 set retuzn value to 0:
T
$28, 16 ($fp)
nove
nove
$2,$0
$sp,$fp
T
1v
addiu
sfp,24 ($sp)
$sp,$sp, 32
: return
31
nop
---
## Page 70
52
逆向工程权威指南（上册）
指令清单 6.13Non-optimizing GCC 4.4.5（IDA)
0000000011x34*
main:
00000000:4x94*
 text: 00000000
var_10
-0x10
-text:00000000 vax_8
= -8
-text: 00000000
. text: 00000000
var_4
= -4
:function prologue:
.text: 00000000
addiu
$sp，-0x20
.text: 00000004
AS
$fp。 0x20+var_8($sp)
Sra,
0x20+va.r_4 ($sp)
.text: 00000008
- text: 0000000c
.text:00000010
1a
nove
sfp.
$gp,
$8p
_gnu_loca1_gp
: load address of the text
.text:00000018
:string:
SW
Sgp,
[dss)ot"xeA+0zx0
-text:0000001c
18
$v0, aADBDCD + *a=id; b=id; c=bd*
 set 1st argument of printf():
set 2nd argument of printf (1:
-text:00000024
move
$a0, $v0
/ set 3rd argument of printf ():
-text:00000028
1i
$a1, 1
set 4th argument of printf(1:
-text:0000002C
11
$a2,2
.text:00000030
11
$a3, 3
 get address of printf():
.text:00000034
1w
Sv0, (printf s 0xFFFF) ($gp)
cal1 printf():
Sat, $zero
. text:0000003c
move
0A$*63$
.text:00000044
. text: 00000040
ja1r
6$
: function epilogue:
or
1 set return value to 0:
.text: 00000048
1v
$gp, 0x20+vax_10($fp)
.text : 00000050
.text:0000004C
nove
0182g *0AS
move
dgs *dss
.text:00000054
1v
Sra,
0x20+var_8($sp)
0x20+var_4 ($sp)
.text:00000058
T
*dys
.text:0000005c
addlu
Ssp,
0x20
: return
.text:00000060
jr
.text:00000064
or
Sat, Szero : NOP
$ra
6.3.2
传递9个参数
我们再次使用6.1.2节中的例子，演示9个参数的传递。
include 
int nain ()
return 0z
，1,2,3,4,5.6,7,81
Optimizing GCC 4.4.5
在传递多个参数时，MIPS会使用SA0-SA3传递前4个参数，使用栈传递其余的参数。这种平台主要
采用一种名为“O32”的函数调用约定。实际上大多数MIPS系统都采用这种约定。如果采用了其他的函
数调用约定，例如N32约定，寄存器的用途则会有不同的设定。
下面指令中的“SW”是“Store Word”的缩写，用以把寄存器的值写入内存。MIPS 的指令集很小，
没有把数据直接写入内存地址的那类指令。当需要进行这种操作时，就不得不组合使用LI/SW指令。
---
## Page 71
第6章printf函数与参数调用
53
指令清单6.14OptimizingGCC4.4.5（汇编输出）
$LCO:
asci1 *a=id; b=Id; c=Id; d=4d; e=ld; f=id; g=ld; h=ld\012\000*
main1
:funct.ion prologoe:
lui
$28, thi (_gnu_local_gp)
addLu
$sp，$sp,-56
addiu
$28,$28,1o (
(_gnu_1oca1_gp)
5th
RS
esed
argument in stack:
1i
$2, 16 (§sp)
0x4
SV
ssedr
6th
arqument In stack:
1±
 0x5
SV
$2, 20 ($8p)
:Pa88
7th
11
argum
hent in stack1
$2,6
$2,24($sp)
 0x6
Bth argune
RS
eeedr
ent In stack:
11
$2,7
$25, $ca1116 (printf) ($28)
 0×7
T
3V
pass
lst
:0es ut quaanbze
9th argument in stack:
1uL
$4, hi ($LC0)
; Pa38
11
$2,8
0x8
RS
$2, 32 ($sp)
nTPpe
$4, $4, 1o ($1C0)
: pass 3rd argunent in $a2:
1i
 0x1
: call printf ():
11
$6,2
0x2
4th argunent in $a3 (bran
ja1r
$25
pass
11
$7,3
nch delay slot):
0x3
：function epilogue:
T
 value to 0:
$31,52 ($sp)
: set return
return
nove
$2,$0
$31
addiu
$sp,$sp, 56 ; branch delay slot
指令清单6.15Optimizing GCC 4.4.5（IDA)
.text:00000000 main:
. text:00000000
.text:00000000
8228A
= -0x24
= -0x28
.text:000000 var_24
.text:0000 var_20
= 0x20
.text:00000000
var_1C
= -0x1C
. text:00000000
var_18
= -0x18
.text:00000000
var_10
= -0x10
.text:00000000
.text:00000000
var_4
r=4
: function prologue:
.text:00000
0000
lu1
$gP.
(_gnu_local_gp >> 16)
.text:00000004
addiu
$spr