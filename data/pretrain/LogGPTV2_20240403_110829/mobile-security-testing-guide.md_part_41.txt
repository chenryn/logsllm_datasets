Tampering and Reverse Engineering on Android
Tools
Angr - https://angr.io/
apktool - https://ibotpeaches.github.io/apktool/
apkx - https://github.com/b-mueller/apkx
CFR Decompiler - https://www.benf.org/other/cfr/
IDA Pro - https://www.hex-rays.com/products/ida/
JAD Decompiler - http://www.javadecompilers.com/jad
JD (Java Decompiler) - http://jd.benow.ca/
JEB Decompiler - https://www.pnfsoftware.com
OWASP Mobile Testing Guide Crackmes - https://github.com/OWASP/owasp-mstg/blob/master/Crackmes/
Procyon Decompiler - https://bitbucket.org/mstrobel/procyon/overview
Radare2 - https://www.radare.org
smalidea plugin for IntelliJ - https://github.com/JesusFreke/smali/wiki/smalidea
VxStripper - http://vxstripper.pagesperso-orange.fr
303
Android Anti-Reversing Defenses
Android Anti-Reversing Defenses
Testing Root Detection (MSTG-RESILIENCE-1)
Overview
In the context of anti-reversing, the goal of root detection is to make running the app on a rooted device a bit more
difficult, which in turn blocks some of the tools and techniques reverse engineers like to use. Like most other
defenses, root detection is not very effective by itself, but implementing multiple root checks that are scattered
throughout the app can improve the effectiveness of the overall anti-tampering scheme.
For Android, we define "root detection" a bit more broadly, including custom ROMs detection, i.e., determining
whether the device is a stock Android build or a custom build.
Common Root Detection Methods
In the following section, we list some common root detection methods you'll encounter. You'll find some of these
methods implemented in the crackme examples that accompany the OWASP Mobile Testing Guide.
Root detection can also be implemented through libraries such as RootBeer.
SafetyNet
SafetyNet is an Android API that provides a set of services and creates profiles of devices according to software and
hardware information. This profile is then compared to a list of whitelisted device models that have passed Android
compatibility testing. Google recommends using the feature as "an additional in-depth defense signal as part of an
anti-abuse system".
How exactly SafetyNet works is not well documented and may change at any time. When you call this API, SafetyNet
downloads a binary package containing the device validation code provided from Google, and the code is then
dynamically executed via reflection. An analysis by John Kozyrakis showed that SafetyNet also attempts to detect
whether the device is rooted, but exactly how that's determined is unclear.
To use the API, an app may call the SafetyNetApi.attest method (which returns a JWS message with the Attestation
Result) and then check the following fields:
ctsProfileMatch : If 'true', the device profile matches one of Google's listed devices.
basicIntegrity : If 'true', the device running the app likely hasn't been tampered with.
nonces : To match the response to its request.
timestampMs : To check how much time has passed since you made the request and you got the response. A
delayed response may suggest suspicious activity.
apkPackageName , apkCertificateDigestSha256 , apkDigestSha256 : Provide information about the APK, which is
used to verify the identity of the calling app. These parameters are absent if the API cannot reliably determine the
APK information.
The following is a sample attestation result:
{
"nonce": "R2Rra24fVm5xa2Mg",
"timestampMs": 9860437986543,
"apkPackageName": "com.package.name.of.requesting.app",
"apkCertificateDigestSha256": ["base64 encoded, SHA-256 hash of the
certificate used to sign requesting app"],
"apkDigestSha256": "base64 encoded, SHA-256 hash of the app's APK",
"ctsProfileMatch": true,
304
Android Anti-Reversing Defenses
"basicIntegrity": true,
}
ctsProfileMatch Vs basicIntegrity
The SafetyNet Attestation API initially provided a single value called basicIntegrity to help developers determine the
integrity of a device. As the API evolved, Google introduced a new, stricter check whose results appear in a value
called ctsProfileMatch , which allows developers to more finely evaluate the devices on which their app is running.
In broad terms, basicIntegrity gives you a signal about the general integrity of the device and its API. Many Rooted
devices fail basicIntegrity , as do emulators, virtual devices, and devices with signs of tampering, such as API
hooks.
On the other hand, ctsProfileMatch gives you a much stricter signal about the compatibility of the device. Only
unmodified devices that have been certified by Google can pass ctsProfileMatch . Devices that will fail
ctsProfileMatch include the following:
Devices that fail basicIntegrity
Devices with an unlocked bootloader
Devices with a custom system image (custom ROM)
Devices for which the manufacturer didn't apply for, or pass, Google certification
Devices with a system image built directly from the Android Open Source Program source files
Devices with a system image distributed as part of a beta or developer preview program (including the Android
Beta Program)
Recommendations when using SafetyNetApi.attest
Create a large (16 bytes or longer) random number on your server using a cryptographically-secure random
function so that a malicious user can not reuse a successful attestation result in place of an unsuccessful result
Trust APK information ( apkPackageName , apkCertificateDigestSha256 and apkDigestSha256 ) only if the value of
ctsProfileMatch is true.
The entire JWS response should be sent to your server, using a secure connection, for verification. It isn't
recommended to perform the verification directly in the app because, in that case, there is no guarantee that the
verification logic itself hasn't been modified.
The verify method only validates that the JWS message was signed by SafetyNet. It doesn't verify that the
payload of the verdict matches your expectations. As useful as this service may seem, it is designed for test
purposes only, and it has very strict usage quotas of 10,000 requests per day, per project which will not be
increased upon request. Hence, you should refer SafetyNet Verification Samples and implement the digital
signature verification logic on your server in a way that it doesn't depend on Google's servers.
The SafetyNet Attestation API gives you a snapshot of the state of a device at the moment when the attestation
request was made. A successful attestation doesn't necessarily mean that the device would have passed
attestation in the past, or that it will in the future. It's recommended to plan a strategy to use the least amount of
attestations required to satisfy the use case.
To prevent inadvertently reaching your SafetyNetApi.attest quota and getting attestation errors, you should
build a system that monitors your usage of the API and warns you well before you reach your quota so you can
get it increased. You should also be prepared to handle attestation failures because of an exceeded quota and
avoid blocking all your users in this situation. If you are close to reaching your quota, or expect a short-term spike
that may lead you to exceed your quota, you can submit this form to request short or long-term increases to the
quota for your API key. This process, as well as the additional quota, is free of charge.
Follow this checklist to ensure that you've completed each of the steps needed to integrate the SafetyNetApi.attest
API into the app.
Programmatic Detection
305
Android Anti-Reversing Defenses
File existence checks
Perhaps the most widely used method of programmatic detection is checking for files typically found on rooted
devices, such as package files of common rooting apps and their associated files and directories, including the
following:
/system/app/Superuser.apk
/system/etc/init.d/99SuperSUDaemon
/dev/com.koushikdutta.superuser.daemon/
/system/xbin/daemonsu
Detection code also often looks for binaries that are usually installed once a device has been rooted. These searches
include checking for busybox and attempting to open the su binary at different locations:
/sbin/su
/system/bin/su
/system/bin/failsafe/su
/system/xbin/su
/system/xbin/busybox
/system/sd/xbin/su
/data/local/su
/data/local/xbin/su
/data/local/bin/su
Checking whether su is on the PATH also works:
public static boolean checkRoot(){
for(String pathDir : System.getenv("PATH").split(":")){
if(new File(pathDir, "su").exists()) {
return true;
}
}
return false;
}
File checks can be easily implemented in both Java and native code. The following JNI example (adapted from
rootinspector) uses the stat system call to retrieve information about a file and returns "1" if the file exists.
jboolean Java_com_example_statfile(JNIEnv * env, jobject this, jstring filepath) {
jboolean fileExists = 0;
jboolean isCopy;
const char * path = (*env)->GetStringUTFChars(env, filepath, &isCopy);
struct stat fileattrib;
if (stat(path, &fileattrib)  list = manager.getRunningServices(300);
if(list != null){
String tempName;
for(int i=0;i<list.size();++i){
tempName = list.get(i).process;
if(tempName.contains("supersu") || tempName.contains("superuser")){
returnValue = true;
}
}
}
return returnValue;
}
Checking installed app packages
You can use the Android package manager to obtain a list of installed packages. The following package names
belong to popular rooting tools:
com.thirdparty.superuser
eu.chainfire.supersu
com.noshufou.android.su
com.koushikdutta.superuser
com.zachspong.temprootremovejb
com.ramdroid.appquarantine
com.topjohnwu.magisk
Checking for writable partitions and system directories
Unusual permissions on system directories may indicate a customized or rooted device. Although the system and
data directories are normally mounted read-only, you'll sometimes find them mounted read-write when the device is
rooted. Look for these filesystems mounted with the "rw" flag or try to create a file in the data directories.
Checking for custom Android builds
Checking for signs of test builds and custom ROMs is also helpful. One way to do this is to check the BUILD tag for
test-keys, which normally indicate a custom Android image. Check the BUILD tag as follows:
private boolean isTestKeyBuild()
{
String str = Build.TAGS;
if ((str != null) && (str.contains("test-keys")));
for (int i = 1; ; i = 0)
return i;
}
Missing Google Over-The-Air (OTA) certificates is another sign of a custom ROM: on stock Android builds, OTA
updates Google's public certificates.
307
Android Anti-Reversing Defenses
Bypassing Root Detection
Run execution traces with JDB, DDMS, strace , and/or kernel modules to find out what the app is doing. You'll
usually see all kinds of suspect interactions with the operating system, such as opening su for reading and obtaining
a list of processes. These interactions are surefire signs of root detection. Identify and deactivate the root detection
mechanisms, one at a time. If you're performing a black box resilience assessment, disabling the root detection
mechanisms is your first step.
To bypass these checks, you can use several techniques, most of which were introduced in the "Reverse Engineering
and Tampering" chapter:
Renaming binaries. For example, in some cases simply renaming the su binary is enough to defeat root
detection (try not to break your environment though!).
Unmounting /proc to prevent reading of process lists. Sometimes, the unavailability of /proc is enough to
bypass such checks.
Using Frida or Xposed to hook APIs on the Java and native layers. This hides files and processes, hides the
contents of files, and returns all kinds of bogus values that the app requests.
Hooking low-level APIs by using kernel modules.
Patching the app to remove the checks.
Effectiveness Assessment
Check for root detection mechanisms, including the following criteria:
Multiple detection methods are scattered throughout the app (as opposed to putting everything into a single
method).
The root detection mechanisms operate on multiple API layers (Java APIs, native library functions,
assembler/system calls).
The mechanisms are somehow original (they're not copied and pasted from StackOverflow or other sources).
Develop bypass methods for the root detection mechanisms and answer the following questions:
Can the mechanisms be easily bypassed with standard tools, such as RootCloak?
Is static/dynamic analysis necessary to handle the root detection?
Do you need to write custom code?
How long did successfully bypassing the mechanisms take?
What is your assessment of the difficulty of bypassing the mechanisms?
If root detection is missing or too easily bypassed, make suggestions in line with the effectiveness criteria listed
above. These suggestions may include more detection mechanisms and better integration of existing mechanisms
with other defenses.
Testing Anti-Debugging Detection (MSTG-RESILIENCE-2)
Overview
Debugging is a highly effective way to analyze run-time app behavior. It allows the reverse engineer to step through
the code, stop app execution at arbitrary points, inspect the state of variables, read and modify memory, and a lot
more.
As mentioned in the "Reverse Engineering and Tampering" chapter, we have to deal with two debugging protocols on
Android: we can debug on the Java level with JDWP or on the native layer via a ptrace-based debugger. A good anti-
debugging scheme should defend against both types of debugging.
308
Android Anti-Reversing Defenses
Anti-debugging features can be preventive or reactive. As the name implies, preventive anti-debugging prevents the
debugger from attaching in the first place; reactive anti-debugging involves detecting debuggers and reacting to them
in some way (e.g., terminating the app or triggering hidden behavior). The "more-is-better" rule applies: to maximize
effectiveness, defenders combine multiple methods of prevention and detection that operate on different API layers
and are distributed throughout the app.
Anti-JDWP-Debugging Examples
In the chapter "Reverse Engineering and Tampering", we talked about JDWP, the protocol used for communication
between the debugger and the Java Virtual Machine. We showed that it is easy to enable debugging for any app by
patching its manifest file, and changing the ro.debuggable system property which enables debugging for all apps.
Let's look at a few things developers do to detect and disable JDWP debuggers.
Checking the Debuggable Flag in ApplicationInfo
We have already encountered the android:debuggable attribute. This flag in the Android Manifest determines whether
the JDWP thread is started for the app. Its value can be determined programmatically, via the app's ApplicationInfo
object. If the flag is set, the manifest has been tampered with and allows debugging.
public static boolean isDebuggable(Context context){
return ((context.getApplicationContext().getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE)
!= 0);
}
isDebuggerConnected
The Android Debug system class offers a static method to determine whether a debugger is connected. The method
returns a boolean value.
public static boolean detectDebugger() {
return Debug.isDebuggerConnected();
}
The same API can be called via native code by accessing the DvmGlobals global structure.
JNIEXPORT jboolean JNICALL Java_com_test_debugging_DebuggerConnectedJNI(JNIenv * env, jobject obj) {
if (gDvm.debuggerConnected || gDvm.debuggerActive)
return JNI_TRUE;
return JNI_FALSE;
}
Timer Checks
Debug.threadCpuTimeNanos indicates the amount of time that the current thread has been executing code. Because
debugging slows down process execution, you can use the difference in execution time to guess whether a debugger
is attached.
static boolean detect_threadCpuTimeNanos(){
long start = Debug.threadCpuTimeNanos();
for(int i=0; i<1000000; ++i)
continue;
long stop = Debug.threadCpuTimeNanos();
if(stop - start < 10000000) {