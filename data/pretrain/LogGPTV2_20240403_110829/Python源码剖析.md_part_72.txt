## Page 490
460
Python源码剖析
16.4.1
的内存布局是不同的，我们可以从可收集container对象的创建过程中窥见其内存分布
外的信息，这个信息位于PyObject_HEAD之前，称为PyGC_Head
可收集对象链表中去。一个container对象想要成为一个可收集的对象，则必须加入另
机制跟踪的container对象而言，这还不够，因为这个对象还必须链入到Pyhon内部的
一部分是PyObject_HEAD，另一部分是对象自身的数据。然而，对于一个需要被垃圾收集
向链表，所有的container对象在创建之后，都会被插入到这个链表中。
那么Python采用了什么结构将这些container对象组织在一起呢？Python采用了一个双
并将这些对象组织到一个集合中，只有如此，才能将垃圾收集的动作限制在这些对象上。
非所有对象的数量。为了达到这一点，Python必须跟踪所创建的每一个container对象
这些对象则不需理会，这使得垃圾收集带来的开销只依赖于container对象的数量，
机制运行时，只需要去检查这些conitainer对象，而对PyIntobject、PyStringobject
他对象的引用的对象，比如1ist、dict、classinstance等等。当Python的垃圾收集
的循环引用总是发生在container对象之间，所谓container对象即是内部可持有对其
对象是绝不可能产生循环引用的，因为它们内部不可能持有对其他对象的引用。Pyton中
代码清单16-8
[gamodule.c]
（见代码清单16-8）
[objimpl.h]
Pyoblect*
PyGCHead:
第16章Python的内存管理机制
所以，对于Python所创建的可收集container对象，其内存分布与我们之前所了解
在对Pyhon对象机制的分析中我们已经看到，任何一个Pyhon对象都分为两部分，
struat
可收集对象链表
returm op;
int ge_refs;
double dummy;
一深度探索动态语言核心技术
_Pyobject_GC_New(PyTypeObject *tp)
PyObject_INIT(op,tp);
_Pyobject_GC_Malloc(_PyObject_sIZE(tp));
*gc_next:
*force worst-case alignment
面
---
## Page 491
要了解其他一些事实，这里我们先将其放下。同样对于[3]，我们这里也先不剖析，不过别
对于垃圾收集的运行至关重要，但是现在，在深入这个变量以及垃圾收集之前，我们还需
gc_ref，在代码清单16-8的[2]处我们看到，这个值被初始化为GC_UNTRACED。这个变量
contairer对象自身的数据。这里的container Object既可以是PyDictobject，也可
收集机制，然后紧跟着的是Python中所有对象都会有的Pyobject_HEAD，最后才是属于
用我们在上一节花费巨大精力分析的Pyobject_Mal1oc。
16-12所示的情形。需要注意，在申请内存时，使用的是Pyobject_MALLOC，这将最终调
以我们现在对于pyListobject、PyDictObject等对象的内存分布的推测应该变成如图
内存空间时，为PyGC_Head也申请了内存空间，并且其位置在container对象之前。所
PyObject*_Pyobject_GC_Malloc(size_t basicsize)
#define
#define
马上我们就会回来。
在PyGC_Head部分，除了两个用于建立链表结构的前向和后向指针外，还有一个
在可收集container对象的内存分布中，内存分为三个部分，首先的一块用于垃圾
从代码清单16-8的[1]处可以清楚地看到，当Python为可收集的container对象申请
do unne
op=FROM_GC(g）：//[4]
Pyobject
01:
generations[o].threshold &&
(generations[0l.count >generationsTo],threshold &&
enabled &&
PyErr_Occurred(y
PyGC_REFS_UNTRACKED
为对象本身及PyGCHead申请内存
opi
图16-12
品&
GCUNTRACKED;//[2]
被垃圾收集机制监控的container对象
number of allocated GCobjects*/
PyObjectHEAD
PyGCHead
FyGC_REFS_UNTRACKED
Cantainer
object
Python源码剖析
（-2）
16.4Python中的垃圾收集
一深度探索动态语言核心技术
461
---
## Page 492
Python源码剖析
462
之后，我们所创建的container对象也就置于Python垃圾收集机制的掌控之中了。
因为所有的循环引I用一定是发生在这个链表中的一群对象之间。在_PyObject_GC_TRACK
container对象链接到了Python中的可收集对象链表中
即将这个对象链接到链表中。实际上，这个动作是发生在创建某个container对象的最
理这个container对象。但是我们发现，在创建可收集container对象之时，并没有立
对象链接到Python内部维护的可收集对象链表中，Python的垃圾收集机制才能跟踪和处
define
[objimpl.h]
Pyobjeet"
[dictobjeat.o]
#define-Py_As_GC（o)((PyocuHead *)(oy-1)
代码清单16-8的[4]处使用的是从ryGC_Head地址转换为Pyobject_HEAD地址的算法。
些时候，我们又需要进行这一动作的逆运算。Pyuon提供了在两个地址之间的转换算法，
Pyobject_HEAD的地址，但是我们需要根据此地址获得A的PyGC_Head的地址：而在某
#@eFine FROM_GC(g)((PyObject *)(（（EyGC_Head *）g)+1))
部分和PyObjecf_HEAD部分来回转换。更清楚地说，某些时候，我们持有一个对象A的
[objimpl.h]
#define
[gcmodule.c]
前面我们说过，Pyton会将自己的垃圾收集机制限制在其维护的可收集对象链表上，
在创建
在PyGC_Head中，出现了用于建立链表的两个指针，只有将创建的可收集container
第16章Python的内存管理机制
g-
PyObject_cc_TRACK(mp）
register dlctobject *mp
PyGC
当垃圾收集机制运行期间，我们需要在一个可收集的container对象的 PyGC_Head
=Pyobject_GC_New(dictobject,&PyDict_Type)
一深度探索动态语言核心技术
generationo->gc.gc_prev=
PyDict_New(void)
(Pyobject
object
（ByGC
PY_AS_GC(o):
PyGC
generationD:
EyGc
Head
lext
GC
REFSUNTRACKEDY
*）（0）-1)
Heaa
，我们可以清楚地看到这一点。
---
## Page 493
16.4.2
16-13中，我们展示了Pyton运行过程的某个时刻，所建立起来的可收集对象链表。
法应该在对象被销毁时调用。
的集合，每一个集合就称为一个“代”，垃圾收集的频率随着“代”的存活时间的增大而
用一种以空间换时间的策略。这种以空间换时间的分代收集的技术正是当前支撑着Java
也就越少。为了使垃圾收集的效率提高，基于研究人员所发现的统计规律，我们就可以采
无论如何，我们可以看到，当系统中使用的内存越少时，整个垃圾收集所带来的额外操作
越少：反之，当需回收的内存块越少时，垃圾检测就将比垃圾回收带来更少的额外操作。
需回收的内存块越多时，垃圾检测带来的额外操作就越多，而垃圾回收带来的额外操作就
束。研究表明，对于不同的语言，不同的应用程序，这个比例会在80%到98%之间游走。
令的时间，而剩下的内存块，其生存周期会比较长，甚至会从程序开始一直持续到程序结
这样一点相同之处。即，一定比例的内存块的生存周期都比较短，通常是几百万条机器指
的研究表明，无论使用何种语言开发，无论开发的是何种类型、何种规模的程序，都存在
的关键技术。
一清除这样的垃圾收集所带来的额外操作实际上与系统中总的内存块的数量是相关的，
#define
[objimpl.h]
这种以空间换时间的总体思想是：将系统中的所有内存块根据其存活时间划分为不同
这一发现对于垃圾收集技术有着重要的意义。从前面的分析我们已经看到，像标记
很明显，_Pyobject_GC_UNTRAck仅仅是_Pyobject_GC_TRACk的逆运算而己。在图
同样，Python还提供了将一个container对象从链表中摘除的方法，显然，这个方
分代的垃圾收集技术是在上个世纪80年代初发展起来的一种垃圾收集机制，
9二
分代的垃圾收集
L
while(0);
>gc.9c
PyObject_HEAD
PyGCHead
>gc.gc
Container
object
NULL;
图16-13可收集对象链表
EVGC
......
REES_UNTRACKED):
Python源码剖析
16.4Python中的垃圾收集
PyObject HEAD
Container
深度探素动态语言核心技术
463
一系列
---
## Page 494
Python源码剖析
464
可收集对象链表，这就是Py由on中用于分代垃圾收集的三个“代”。
么很显然，Python中实际是维护了三条链表。更明确地说，一个“代”就是我们在16.3
所有属于同一“代”的内存块都链接在同一个链表中。既然Python中总共有3“代”，那
维护的一个指针，指向的正是Pyuon中第0代的内存块集合。
TRACk中我们看到了一个名为_PyGC_generationo的神秘变量，这个变量是Python内部
实会存在一些垃圾，这些垃圾的回收因为这种分代的机制会被延退。这就是我们所说的以
B中的内存在经过几次收集之后，有一些内存块会被转移到A中，而在A中，实际上确
段时间才进行，这就使得垃圾收集需要处理的内存变少了，效率则得到提高。可以想见，
我们就将M划到一个集合A中去，而新分配的内存都划到集合B中去。当垃圾收集开始
过的垃圾收集次数越多，那么显然，其存活时间就越长。
活时间是如何来衡量的呢，通常是利用经过了几次垃圾收集动作来衡量，如果一个对象经
减小，也就是说，活得越长的对象，就越可能不是垃圾，就应该越少去收集。那么这个存
PyGC_Head *RyeC denleratioriO = GEN HEAD(O):
需要的仅仅是一个额外的表头而已。
节中所提到的一条可收集对象链表，在前面所介绍的链表的基础上，为了支持分代机制
空间换时间的策略。
工作时，大多数情况下都只对集合B进行垃圾回收，而对A的回收要等到过了相当长
static
*Linked lists of container objects*
#define GEN HRAD(n) (&generations[n].head)
[gcmodule.c]
[gemodule.c]
举个具体的例子来说，当某些内存块M经过了3次垃圾收集的洗礼还依然存活时
第16章Python的内存管理机制
Python中有一个维护了三个gc_generation结构的数组，通过这个数组控制了三条
“代”似乎是一个很抽象的概念，实际上，在Pyhon中，
在Python中，也引入了分代的垃圾收集机制，总共有三个“代”。在_Pyobject_GC
int count:
int threshold;/* collection threshold/
PyGC_Head
struot
NUMIGENERATTONS3
一深度探索动态语言核心技术
count of allocations or collections of younger
GEN_HEAD(O)
10
700,
count
0
一个“代”就是一个链表
---
## Page 495
0代内存集合。图16-14展示了用于控制3个“代”的generations。
圾回收机制。这一点正是_Pyobject_Gc_Ma11oc在代码清单16-8的[3]处所表现出来的行
container对象，一旦第0代内存链表的count超过了700这个极限值，则会立刻触发垃
收集对象，从Python的实现代码中，可以发现，第0代链表中最多可以容纳700个
才会真正被链接到第0代内存链表中。
实际上是被提前了，因为直到_Pyobject_GC_TRAck时，所创建的可收集container对象
在_PyObject_GO_TRACK中被证实了。细心的朋友可能已经发现，这个递增count的动作
加1，这预示着所有新创建的对象实际上都会被加入到第0代可收集对象链表中，这一点
都会进行generationsto].count++的动作，将第0代内存链表中所维护的内存块的数量
多少个可收集对象。在_Pyobject_GC_Malloc中，我们可以看到，在分配了内存之后，
[gcmodule.c]
为
static Py_ssize_t collect_generations(void)
在gc_generation中，threshold记录了该条可收集对象链表中最多可容纳多少个可
对于每一个gc_generation，其中的count记录了当前这条可收集对象链表中一共有
我们在_pyobject_GC_TRACk中所见的_PyGCgenerationo不偏不斜，指向的正是第
return n;
Ry_ssize_tn=0:
EOr
generations
Pind the oldest generation (higest numbered) where the count
exce
(generations[i].count > generations[i].threshold)
eds
PyGC_generationo
collect(i)
the threshold
图16-14Python中维护3代内存的控制结构
younger
objecbs
地
next
Wi11
700
Python源码剖析
16.4Python中的垃圾收集
collected.
一深度探索动态语言核心技术
465
---
## Page 496
Python源码剖析
16.4.3
466
屁股走人后，还敢大言不惭地说它对符合垃圾回收条件的最“老”的“代”以及所有比它
图16-15也能说明在4.2节末尾的collect_generations函数中，为什么Python拍拍
展示了merge的结果。
static yoid go_list_merge(PyGC_Head *from, PyGc_Head *to)
第0代）整个地链接到第1代内存链表之后，这个操作是通过gc_list_merge实现的。
在开始垃圾收集之前，Pyhon会将比其“年轻”的所有代的内存链表（当然，在这里只有
详细剖析这个函数。
collect和它接受的参数上。这个函数是Python中垃圾收集机制的关键实现所在，下一节将
根本没处理啊，Py山on源码里的注释不是睁眼说瞎话么。实际上，问题的关键出在那个
所有比它年轻的“代”对应的内存。但是我们在源码中却明明白白地看见，找到最老的那
static void gc_list_init(PyGc_Head *1ist)
[gcmodule.c]
“代”，并进行处理之后，就潇洒地一个break动作，拍拍屁股走人了，比它年轻的“代”
（也就是gererations数组中序号最高的那一“代”），然后回收这“代”对应的内存和
在collect_generations中，Pyhon将寻找满足count值越界条件的最“老”的那一“代”
对应的链表的count值越界的条件满足时才进行。从Pyhon源码中的注释里我们看到，
是Pyhon会借此时机，对所有“代”内存链表都进行垃圾收集，当然，这只能在与某“代”
此后的标记一
在我们的例子中，from就是第0代内存链表，而to就是第1代内存链表。图16-15
ge_Iist_init(from);
前面我们提到，Pyhon采用了三代的分代收集机制，如果当前收集的是第1代，那么
PyGc Head *tail;
Python中的标记
在_Pyobject_GC_Maloc中，虽然是由第0代内存链表的越界触发了垃圾收集，但
第16章Python的内存管理机制
to->gc.goprey
深度探索动态语言核心技术
to->gc.gc_prev: