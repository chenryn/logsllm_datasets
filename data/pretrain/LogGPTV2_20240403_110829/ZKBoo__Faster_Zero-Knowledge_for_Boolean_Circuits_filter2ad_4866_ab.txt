useful building block for many other cryptographic prim-
itives (identiﬁcation schemes, signatures, etc). See [7]
or [17, Chapter 6] for more details on this. Here we
are mainly interested in the following facts: First, Σ-
protocols are public-coin protocols and thus they can be
made non-interactive in the random oracle model using
the Fiat-Shamir heuristic [12]. Second, there exist efﬁ-
cient transformations from Σ-protocols to fully-ﬂedged
ZK and PoK: indeed, it is possible to efﬁciently trans-
form a Σ-protocol into a zero-knowledge argument (resp.
zero-knowledge proof of knowledge) with the addition of
one additional round (resp. two additional rounds). Note
ﬁnally that if the challenge e is chosen uniformly at ran-
dom form a set of cardinality c, then s-special soundness
implies a bound of (s−1)/c on the soundness error of the
protocol: if y (cid:26)∈ L, then there exist no x s.t. R(x,y) =1,
and therefore ﬁxed any a there are at most s − 1 chal-
lenges such that an accepting conversation for them ex-
ists.
IKOS Construction
3.2
In 2007 Ishai et al. show how to use any MPC proto-
col and the commitment-hybrid (Com) model2 to obtain
a ZK proof for an arbitrary NP relation R with asymp-
totically small soundness error. Here we brieﬂy recall
their construction and moreover we explicitly analyse its
soundness error.
Let Π f be an MPC protocol that realizes any n-party
function f with perfect correctness (Deﬁnition 2.1). De-
pending on the features of Π f (privacy, robustness, com-
munication channels used), [19] presents slightly differ-
ent ZK protocols. However, the general structure is al-
ways the same and is the structure of a Σ-protocol, see
Figure 1. The high-level idea is the following: assume
that y ∈ L is the public input of the ZK protocol, while x
is the private input of the prover (i.e. R(y,x) = 1). The
prover ﬁrst takes n random values x1, . . . ,x n such that
x = x1 ⊕···⊕ xn, then he considers the n-input function
fy deﬁned as
fy(x1,··· ,xn) := R(y,x1 ⊕···⊕x n)
and emulates “in his head” the protocol Π fy on in-
puts x1, . . . ,x n. After the emulation, he computes the
commitments to each of the n produced views (i.e.
Com(ViewPi(x)) for i = 1, . . . ,n). After all the commit-
ments have been stored, the veriﬁer challenges the prover
to open some of them (i.e. the challenge is a random sub-
set of [n] of a given size). Finally, the prover opens the
requested commitments and the veriﬁer outputs accept if
and only if all the opened views are consistent with each
other and with output 1.
Here we focus on the ZK protocols presented in [19]
that assume a perfectly correct (and eventually perfectly
robust) MPC protocol and we collect them in two ver-
sions. Version 1 considers the case of an MPC protocol
with t-privacy and perfect r-robustness with t > 1.3 Ver-
sion 2 shows that 2-privacy is not necessary condition
and indeed considers the case of an MPC protocol with
1-privacy only.
2In the commitment-hybrid model the two parties have access to an
idealized implementation of commitments, which can be imagined as
a trusted third party which stores the messages of the sender and only
reveals them if told so by the sender.
3This is a generalization of [19] as they only consider the case t = r.
1072  25th USENIX Security Symposium 
USENIX Association
IKOS Protocol (Version 1)
The veriﬁer and the prover have input y ∈ L. The
prover knows x such that R(y,x) =1. A perfectly
correct and t-private n-party MPC protocol Π fy is
given (2 ≤ t  r, then
the graph G has a matching6 of size > r/2. The
probability that the veriﬁer accepts the wrong proof
is equal to the probability that between the t nodes
that he chooses there are no edges of G and this
is less or equal to the probability that there are no
edges from the matching. Clearly, this probabil-
ity reaches the maximum when the matching is the
smallest possible, that is it has size k = (cid:19)r/2(cid:18) + 1.
In this situation the aforementioned probability is
otherwise
if n− 2k > 0
p2(n,t,r) =(cid:29)0
(cid:28)∑k
j=0 2 j(cid:27)k
t− j(cid:26)(cid:25)(cid:27)n
j(cid:26)(cid:27)n−2k
t(cid:26)−1
In general, the soundness error is equal to the value
p(n,t,r) =max{ p1(n,t,r), p2(n,t,r)}.
Version 2: A second version of the protocol was pro-
posed in [20] to show that 2-privacy is not a necessary
condition for the IKOS construction. In other words, we
can construct ZK proofs in from 1-private MPC proto-
cols. Notice that in this case the MPC protocol is allowed
to use only standard point-to-point secure channels. The
idea of the construction is very similar to the previous
one, but now the prover commits to all the(cid:27)n
2(cid:26) channels
in addition to committing to the n views. The veriﬁer
picks a random i ∈ [n] and challenges the prover to open
the view of the player Pi and all the n− 1 channels CHi j
incident to him. Finally, the veriﬁer accepts if the opened
view is consistent with the channels and with the output
1. Again, the ZK property follows from the privacy prop-
erty of the MPC protocol: the information revealed to the
veriﬁer is implied by the view of a single player. To com-
pute the soundness error in this case, observe that for any
5(cid:27)r
t(cid:26) is 0 if r < t.
6A matching is a set of edges without common nodes.
USENIX Association  
25th USENIX Security Symposium  1073
)
t
,
t
,
4
2
(
p
1
0.8
0.6
0.4
0.2
0
Soundness error in IKOS (version 1)
5
10
15
20
Privacy parameter t
t
σ
15
8.7
16
19.5
17
18.4
18
17
19
15.4
20
13.4
Figure 3: The graph represents the soundness error
p(n,t,r) in function of t when t = r and n = 24. The
table shows the values of σ such that p(24,t,t) =2 −σ
for t ∈ {15, . . . ,20}.
incorrect execution of Π fy there is at least one player Pi
such that ViewPi(x) is inconsistent with a channel CHi j.
The probability Pr[V (y) =accept ] is less or equal to the
probability that V does not choose this index i. There-
fore, the soundness error of this version is 1− 1/n.
3.3 Our choice of version and parameters
In this section we discuss and motivate some of our de-
sign choices.
Which MPC protocol? As discussed, IKOS can be in-
stantiated with a large number of MPC protocols.
In
particular, using MPC protocols with good asymptotic
properties (such as [8, 9], etc.), one can obtain ZK proto-
cols with equally good asymptotic properties. However
in this paper we are concerned with concrete, constant
size circuits, and we do not want to put any restriction
on the shape or width of the circuits. Thus, the best two
choices are BGW [2] style protocols with t = r = (cid:27) n−1
3 (cid:26)
which use simple point-to-point channels and GMW [15]
style protocols with t = n− 1,r = 0 which use OT chan-
nels between each pair of parties. Then we have the fol-
lowing two cases:
1. (GMW [15]:) In this case the soundness error is 2
n
and we open n− 1 views. Note that in these proto-
cols each party must communicate with every other
party, thus the size of the proof for soundness 2−σ
is given by
c·
(n− 1)2
log2(n)− 1 · σ
where c is a constant which depends on the exact
protocol. It is easy to see that the function grows
with n and therefore smallest proofs are achieved
with n = 3. Looking ahead, our protocol in Sec-
tion 4 has c = 1/2 and σ = 80 and therefore the
size of the proof is 274 bits per multiplication gate.
2. (BGW [2]:)
3 (cid:26),(cid:27) n−1
In this case the soundness error is
given by p2(n,(cid:27) n−1
3 (cid:26)). To get soundness er-
ror ≤ 2−80, we get that n ≥ 1122 and therefore the
number of opened views is (cid:27) n−1
3 (cid:26) = 373. Thus,
even if each party only had to store a single bit for
each multiplication gate, the size of the proof would
already be larger than in the previous case.
3. (Future Work:) Our analysis shows that using an
MPC protocol with t = r =(cid:31) 2
3 n(cid:30) it would be enough
to use (n,t,r) = (92,64,64) to achieve soundness
2−80. The existence of such a protocol, where in
addition each party only needs to store ≤ 4 bits per
multiplication gate, would give rise to ZK proofs
of size smaller than the one we construct. We are
not aware of any such protocols, however we cannot
rule out their existence. In particular, we note that
such protocols have not been considered in the liter-
ature, since they give rise to poor MPC protocols in
practice (note that such a protocol necessarily uses
advanced channels, which in the standard MPC pro-
tocol need to be implemented using expensive cryp-
tographic operations), and we believe that the quest
for “MPC protocols” optimized for the ZK applica-
tions has just begun. Figure 3 shows how, for a ﬁxed
number of parties n, the soundness error decreases
as a function of t = r. Note that the soundness error
for 2
3 n is much smaller than 1
3 n.
Why only perfect correctness and robustness?
[19]
presented also two extensions of the basic construction
that allow to use MPC protocol with statistical correct-
ness or with statistical robustness, but we are not con-
sidering those cases here for two reasons: ﬁrst, the re-
sulting ZK protocols have higher round complexity (and
are therefore not Σ-protocols); second, perfectly secure
MPC protocols are more efﬁcient: practically efﬁcient
MPC protocols which only achieve statistical security
(even when allowing arbitrary two-party channels, such
as in [5, 22]) require parties to store tags or MACs to-
gether with their shares, and to make sure that the sta-
1074  25th USENIX Security Symposium 
USENIX Association
tistical error is negligibly small these tags need to be at
least as long as the security parameter7, whereas in per-
fectly secure MPC protocols the share size can be made
constant.
Why not Version 2? Note that the soundness error
of Version 1 with (n,t,r) = (3,2,0) is the same as the
soundness error of Version 2 with (n,t,r) = (3,1,0), thus
the number of required rounds is exactly the same. How-
ever (i) Version 2 requires to compute and open more
commitments and (ii) Version 2 only works with plain
channels, while Version 1 allows to use arbitrary chan-
nels which helps in constructing more efﬁcient protocols.
4 Generalizing IKOS
This section contains a generalized and optimized ver-
sion of the IKOS protocol that works for any relation de-
ﬁned by a function, φ : X → Y which can be decomposed
in the “right way”. In particular, in Section 4.2 we will
describe a ZK Σ-protocol for the relation Rφ deﬁned by
Rφ (y,x) =1 ⇔ φ (x) =y, while the decomposition used
to construct it is formalized in the following section.
Protocol Π∗φ
Let φ : X → Y be a function and D a related
(2,3)-decomposition as deﬁned in Deﬁnition 4.1.
Input: x ∈ X
1. Sample random tapes k1,k2,k3;
2. Compute (x1,x2,x3) ← Share(x;k1,k2,k3);
3. Let w1,w2,w3 be vectors with N + 1 entries;
• Initialize wi[0] = xi for all i ∈ {1,2,3};
• For j = 1, . . . ,N , compute:
• For i = 1,2,3, compute
i (cid:31)(wm[0.. j− 1],km)m∈{i,i+1}(cid:30)
4. Compute yi = Outputi(wi,ki) for i ∈ {1,2,3};
5. Compute y = Rec(y1,y2,y3);
Output: y ∈ Y
wi[ j] = φ ( j)
Figure 4: Given a correct decomposition D, the protocol
Π∗φ can be used to evaluate the function φ.
7This can be avoided for SIMD computations [10].
j=1{φ ( j)
1 ,φ ( j)
2 ,φ ( j)
3
1 ,φ ( j)
2 ,φ ( j)
3 }. The function φ ( j)
(2,3)-Function Decomposition