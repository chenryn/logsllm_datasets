```
backend site2
 balance roundrobin
 option httpclose
 option forwardfor
 server s2 127.0.0.1:49188 maxconn 450
```
请确保用您拥有的端口替换该端口。重新启动 HAProxy，并进行上次启动时所做的检查。
要重启 HAProxy，运行`/etc/init.d/haproxy restart`。
### 注
使用以下命令，HAProxy 可以在不删除活动会话的情况下重新加载新配置:
```
haproxy -f /etc/haproxy/docker.cfg -p /var/run/haproxy.pid -sf $(cat /var/run/haproxy.pid)
```
打开你的浏览器，进入`domain1.com`确认旧的还在工作。如果是，转到`domain2.com`。您应该会看到另一个 WordPress 安装站点。为了确保不一样，继续安装其中一个。或者，去`domain3.com`看看当一个域指向服务器而没有在 HAProxy 中匹配时会发生什么。
## 用 Nginx 实现
现在，我们将做和 HAProxy 一样的事情，但是我们将使用优秀的网络服务器 Nginx([http://nginx.org/en/](http://nginx.org/en/))作为我们的反向代理。Nginx 是一款功能齐全、速度非常快的网络服务器，在内存中只留下很小的空间。
Nginx 是这样描述的:
> *“nginx[engine x]是一个 HTTP 和反向代理服务器，也是一个邮件代理服务器，伊戈尔·塞索耶夫写的。很长一段时间以来，它一直在包括 Yandex、Mail 在内的许多负载很重的俄罗斯网站上运行。茹、VK 和漫步者。根据 Netcraft 的数据，2014 年 11 月，nginx 服务或代理了 20.41%最繁忙的站点。以下是一些成功案例:网飞、Wordpress.com、快邮*
这个听起来也像是我们需要的，就像它对 HAProxy 做的那样。
### 安装 Nginx
Nginx 在所有 Linux 包管理器中都有，比如`aptitude` / `apt`、`yum`和其他，所以安装可以简单的用`apt-get install nginx`或者`yum install nginx`来完成。因为它是开源的，你当然也可以从源代码安装它。
### 配置 Nginx
我们将把配置添加到名为`/etc/nginx/conf.d/wp1.conf`的文件中。
在您最喜欢的文本编辑器中创建并打开此文件:
```
server {
    listen 80;
    server_name domain1.com;
    charset UTF-8;
    if ($host !~ ^(domain1.com)$ ) {
         return 444;
    }
}
```
如您所见，这个块使服务器监听端口`80`并匹配域`domain1.com`以应用该配置。指定服务器字符集总是好的，这样网站文本在转发过程中就不会得到错误的编码；所以，我们也添加了那一行。只听`domain1.com`而不听其他(如果服务器名称部分没有匹配项，Nginx 会使用第一个配置作为默认配置)，我们会针对进入的其他请求返回 HTTP 状态代码`444`(无响应)。
我们将如何处理端口`80`对`domain1.com`的请求？
将它添加到服务器的范围内(花括号):
```
location / {
    proxy_pass http://wp1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
}
```
`location`块将匹配所有请求，因为它匹配`/`。我们一会儿将回到`proxy_pass`部分。除此之外，您会看到我们设置了很多头，其中大多数告诉我们的 Docker 容器请求者的真实 IP 地址等等。
回到`proxy_pass`部分。这是真正将请求转发给名为`wp1`的东西的部分。这叫做上游，我们必须定义它。
将此添加到服务器范围之外:
```
upstream wp1 {
    server 127.0.0.1:49187;
}
```
名为`/etc/nginx/conf.d/wp1.conf`的完整配置文件现在应该如下所示:
```
upstream wp1 {
  server 127.0.0.1:49187;
}
server {
  listen 80;
  server_name domain1.com;
  charset UTF-8;
  if ($host !~ ^(domain1.com)$ ) {
    return 444;
  }
  location / {
    proxy_pass http://wp1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
  }
}
```
保存文件，在大多数 Linux 系统上，您可以使用命令`sudo /etc/init.d/nginx configtest`或`sudo service nginx configtest`测试它的语法错误。
### 注
在启动 Nginx 之前确保已经关闭了 HAProxy，否则会得到一个说 Nginx 无法绑定到端口`80`的错误。您可以使用以下命令来完成此操作:
```
/etc/init.d/haproxy stop
```
如果测试成功，我们现在可以重启(或启动)Nginx 服务器。同样，在大多数系统上使用`sudo /etc/init.d/nginx restart`或`sudo service nginx restart`。
前往您的网络浏览器，输入网址`domain1.com`查看我们的 WordPress 安装站点。为了确保除了`domain1.com`什么都没用，试着去`domain2.com`并期待没有回应。
### 向 Nginx 添加更多域
要在 Nginx 中添加另一个要匹配的域，可以在`/etc/nginx/conf.d/`目录中创建新文件，重新加载 Nginx 配置，如下代码所示:
```
cp /etc/nginx/conf.d/wp1.conf /etc/nginx/conf.d/wp2.conf
sed -i "s/wp1/wp2/g" /etc/nginx/conf.d/wp2.conf
sed -i "s/domain1/domain2/g" /etc/nginx/conf.d/wp2.conf
sed -i "s/49187/49188/g" /etc/nginx/conf.d/wp2.conf
#test config
/etc/init.d/nginx configtest
#reload config
/etc/init.d/nginx reload
```
复制配置文件，替换几个名字，运行`configtest`，重新加载 Nginx。
在浏览器中尝试`domain1.com`以确保它仍然有效。你应该还是会看到 WordPress 的安装页面(当然除非你安装了 WordPress)；之后前往`domain2.com`查看是否使用了我们的新配置。
如果你想关闭一个网站，只需将文件的扩展名从`.conf`更改为其他内容，然后重新加载 Nginx。
# 自动化映射域的过程
这种设置的局限性在于，每次添加新域时都是手动操作。在我的网站([http://oskarhane.com](http://oskarhane.com))上，我写了一些关于这个过程如何自动化的博客文章，这些文章是我一直以来阅读量最大的文章。
当我找到杰森·怀尔德的《T2》时，我非常高兴。nginx-proxy 通过 Docker Remote API 监控 Docker 事件，比我更聪明地解决了这个问题。
### 注
你可以在 nginx-proxy 的 GitHub 页面上阅读更多关于 nginx-proxy 的信息(https://github.com/jwilder/nginx-proxy)。
`nginx-proxy`作为一个容器出现，我们可以通过执行以下命令来运行它:
```
docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock jwilder/nginx-proxy
```
我们给容器我们的 Docker 套接字，这样它就可以监听我们感兴趣的事件，也就是容器的开始和停止。我们还将 Docker 主机的端口 80 绑定到这个新容器，使其成为所有传入 web 请求的入口容器。在启动`nginx-proxy`容器之前，请确保在 Docker 主机上停止 Nginx。您可以使用以下命令来完成此操作:
```
/etc/init.d/nginx stop
```
当一个容器启动时，`nginx-proxy`创建一个 nginx 反向代理`config`文件并重新加载 Nginx——就像我们所做的那样，但是通过`nginx-proxy`完全自动化。
为了告诉`nginx-proxy`我们想要映射到哪个域哪个容器，我们必须用一个名为`VIRTUAL_HOST`的环境变量来运行我们的容器。
在我们的`crane.yaml file` 中，我们在`wp`运行部分添加了一个环境变量:
```
containers:
 wp:
 image: oskarhane/wordpress
 run:
 volumes-from: ["mydata"]
 link:
 - mymysql:mysql
 publish: ["80"]
 detach: true
 env: ["VIRTUAL_HOST=domain1.com"]
```
现在，我们只需要用起重机再次将这个容器提升到上，将这个容器映射到港口`80`上的域`domain1.com`:
```
crane lift web --recreate
```
# 总结
在本章中，我们看到了如何解决多个容器希望在同一个公共端口上提供数据的问题。我们了解了什么是代理服务器和反向代理服务器，以及反向代理如何用于负载平衡。
我们安装并配置了两个不同的反向代理:HAProxy 和 Nginx。在我的工作流程中，Nginx 设置更适合，只需复制一个文件，替换几个单词，然后重新加载 Nginx 使其工作。HAProxy 可能在您的设置中工作得更好；选择权在你，不能说一个比另一个好。
`nginx-proxy`自动化为已启动的容器创建反向代理的过程，是一个不错的 PaaS 解决方案，除了一件事:简单明了的部署。这就是下一章的内容。