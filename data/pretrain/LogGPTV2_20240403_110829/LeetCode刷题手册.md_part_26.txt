 target1.val, target2.val = target2.val, targetl.val
树比根结点大的话，就是出现了乱序；根节点比右子树大的话，就是出现了乱序。遍历过程中在左子树
孩子。用先根遍历二叉搜索树的时候，根结点比左子树都要大，根结点比右子树都要小。所以左子
target2 = root
if targetl == nil { 
 targetl = prev
Right *TreeNode
Left *TreeNode
Val int
---
## Page 219
 Example 3: 
 Example 2: 
Example 1: 
the same value.
Two binary trees are considered the same if they are structurally identical and the nodes have 
Given two binary trees, write a function to check if they are the same or not.
题目
100.SameTree
Output: false
Input:
Output: true
Input:
return prev, targetl, target2 
prev, targetl, target2 = inorderTraverse(root.Right, prev, targetl, target2)
prev = root
[1,2]，
[1,2,3],
[1,null,2] 
[1,2,3]
---
## Page 220
代码
递归判断即可。
解题思路
这一题要求判断2颗树是否是完全相等的。
题目大意
package leetcode
Output: false
func isSameTree(p *TreeNode, q *TreeNode) bool {
Input: 
if p == nil && q == nil {
华
}e
}e
type TreeNode struct { 
 Definition for a binary tree node.
return false
else {
return issameTree(p.Left, q.Left) && issameTree(p.Right, q.Right)
if p.val != q.val { 
return true 
return false 
Right *TreeNode
Left 
Val int 
[1,2,1]，
*TreeNode
[1,1,2]
---
## Page 221
代码
解题思路
这一题要求判断2颗树是否是左右对称的。
题目大意
Bonus points if you could solve it both recursively and iteratively.
Note:
But the following [1,2,2,null,3,null,3] is not: 
For example, this binary tree [1,2,2,3,4,4,3] is symmetric: 
 Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
题目
101. Symmetric Tree
·反转二叉树是第 226 题。判断 2颗树是否完全相等是第100 题。
·这道题是几道题的综合题。将根节点的左字数反转二叉树，然后再和根节点的右节点进行比较，是
package leetcode
否完全相等。
人
---
## Page 222
按层序从上到下遍历一颗树。
题目大意
return its level order traversal as:
Given binary tree [3,9,20,null,null,15,7],
For Example: 
by level).
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level
102. Binary Tree Level Order Traversal
题目
func isSymmetric(root *TreeNode) bool {
[9,20],
if root == nil {
[15,7] 
[3],
return isSameTree(invertTree(root.Left), root.Right)
 Definition for a binary tree node.
15
type TreeNode struct { 
return true 
2
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 223
代码
用一个队列即可实现。
解题思路
func levelorder(root *TreeNode) [][]int {
//解法—BFS 
package leetcode
华
for len(queue) != 0 {
curNum, nextLevelNum, res, tmp := l, O, [][]int}, []int{} 
queue = append(queue, root)
queue := []*TreeNode{} 
type TreeNode struct {
 Definition for a binary tree node.
 return [][]int{}
if curNum > O { 
if curNum == O {
nextLevelNum = 0 
curNum = nextLevelNum
res = append(res, tmp)
queue = queue[1:]
tmp = append(tmp, node.val)
if node.Right != nil { 
curNum--
if node.Left != nil {
node := queue[0]
queue = append(queue, node.Right) 
Right *TreeNode
Left *TreeNode
queue = append(queue, node.Left)
Val int 
nextLevelNum++ 
nextLevelNum++
---
## Page 224
return its zigzag level order traversal as:
Given binary tree [3,9,20,null,null,15,7],
For Example:
right, then right to left for the next level and alternate between). 
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to
题目
103. Binary Tree Zigzag Level Order Traversal
func dfsLevel(node *TreeNode, leve] int, res *[][]int) 
func levelorderl(root *TreeNode) [][]int {
//解法二 DFS
 if node == nil {
dfsLevel(node.Right, currLevel, res)
dfsLevel(node.Left, currLevel, res) 
(*res)[currLevel] = append((*res) [currLevel], node.val)
for len(*res)  O { 
return [][]int{}
if node.Right != nil {
if node.Left != nil {
[o]ananb =: apou 
Right *TreeNode
Left *TreeNode
Val  int 
 queue = append(queue, node.Left)
nextLevelNum++ 
---
## Page 226
Given binary tree [3,9,20,null,null,15,7],
Example:
Note: A leaf is a node with no children.
the farthest leaf node.
The maximum depth is the number of nodes along the longest path from the root node down to 
Given a binary tree, find its maximum depth.
题目
104. Maximum Depth of Binary Tree
return res
if curNum == 0 {
} else{ 
if curDir == 1 {
queue = queue[1:]
if curDir == 0 {
tmp = []int{} 
nextLevelNum = 0 
curNum = nextLevelNum
res = append(res, tmp)
tmp = append(tmp, node.val)
 curDir = 1 
for i, j := 0, len(tmp)-l; i  preEnd { 
6
leftLen := rootIdx - inStart 
rootIdx := inPos[pre[preStart]] 
root := &TreeNode{val: pre[preStart]}
return buildPreIn2TreeDFS(preorder, O, len(preorder)-1, 0, inPos)
15
 return nil
20
---
## Page 230
题目
107. Binary Tree Level Order Traversal Il
代码
解题思路
·利用递归思想，从 postorder 可以得到根节点，从inorder 中得到左子树和右子树。只剩一个节
·给出 2个数组，根据 inorder 和 postorder 数组构造一颗树。
rootIdx+l， inPos)
inStart, inPos)
inPos map[int]int] *TreeNode {
func buildInPos2TreeDFS(post []int, postStart int, postEnd int, inStart int.
func buildTreel06(inorder []int, postorder []int) *TreeNode { 
package leetcode
 return root 
 root.Right = buildInPos2TreeDFS(post, postStart+leftLen, postEnd-1,
if poststart > postEnd { 
inPos := make(map[int]int) 
?
点的时候即为根节点。不断的递归直到所有的树都生成完成。
root.Left = buildInPos2TreeDFS(post, postStart, postStart+leftLen-1,
leftLen := rootIdx - inStart 
rootIdx := inPos[post[postEnd]］ 
root := &TreeNode{val: post[postEnd]}
return buildInPos2TreeDFS(postorder, O, len(postorder)-1, O, inPos)
for i := O; i < len(inorder); i++ {
 type TreeNode struct {
 Definition for a binary tree node.
 return nil
 inPos[inorder[i]] = i 
Right *TreeNode
Val int
Left *TreeNode
---
## Page 231
代码
用一个队列即可实现。
解题思路
按层序从下到上遍历一颗树。
题目大意
return its bottom-up level order traversal as:
Given binary tree [3,9,20,null,null,15,7],
For Example:
to right, level by level from leaf to root).
Given a binary tree, return the bottom-up level order traversal of its nodes' values.(ie, from left
package leetcode
六
 Definition for a binary tree node.
[3] 
[9,20],
[15,7] ,
type TreeNode struct {
20
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 232