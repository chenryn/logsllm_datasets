     29:   }
     30:
     31:   if (vclass != fieldClass)
     32:     throw new ClassCastException();
     33:
     34:   if (!Modifier.isVolatile(modifiers))
     35:     throw new IllegalArgumentException("Must be volatile type");
     36:
     37:   this.cclass = (Modifier.isProtected(modifiers) &&
     38:            caller != tclass) ? caller : null;
     39:   this.tclass = tclass;
     40:   if (vclass == Object.class)
     41:     this.vclass = null;
     42:   else
     43:     this.vclass = vclass;
     44:   offset = unsafe.objectFieldOffset(field);
     45: }
构造函数首先通过反射机制来检索要更新的字段，具体见第12行。请注意，即使代码没有任何权限，反射调用也能正常运行。这是因为，该调用是在doPrivileged()内完成的，后者会告诉JVM，即使原始caller有权限要求，也允许执行相应的操作（参见第2.4节）。接下来，如果字段具有protected属性，并且caller类不是tclass类的话，则把caller存储到cclass中（见第37-38行）。请注意，caller是通过调用Reflection.getCallerClass()，使用方法newUpdater()进行设置的。这些代码行（第37-38行）看起来有些奇怪，因为类caller可能与类tclass无关。在下面我们可以看到，这几行代码就是漏洞所在的位置。接下来，构造函数会存储tclass和vclass，并使用类_Unsafe_的引用unsafe来获取字段的偏移量（见第39-44行）。这是一个险招，因为_Unsafe_类非常危险。它能够直接操作Java程序无法操作的内存空间。如果这个类直接或间接地受控于安全分析人员的话，就可以用它来绕过Java沙箱。
一旦安全分析人员引用了_AtomicReferenceFieldUpdater_对象，就可以调用其set()方法来更新字段了，具体如下所示：
    1: public final void set(T obj, V newValue) {
      2:   accessCheck(obj);
      3:   valueCheck(newValue);
      4:    U.putObjectVolatile(obj, offset, newValue);
      5: }
      6:
      7: private final void accessCheck(T obj) {
      8:   if (!cclass.isInstance(obj))
      9:     throwAccessCheckException(obj);
     10: }
     11:
     12: private final void valueCheck(V v) {
     13:   if (v != null && !(vclass.isInstance(v)))
     14:     throwCCE();
     15: }
其中，方法set()的第1个参数，即obj，是必须更新引用字段的实例。第2个参数newValue是引用字段的新值。set()方法运行时，首先会检查obj是否为cclass类型的实例（见第2行，以及第7-10行）。然后，set()会检查newValue是否为null或vclass的实例，这个参数表示字段类型（见第3行,以及第12-15行）。如果所有检查都顺利通过，那么，_Unsafe_类就会将新值放到对象obj内指定的偏移处（见第4行）。
该漏洞的补丁代码如下所示。
    - this.cclass = (Modifier.isProtected(modifiers))
     -                ? caller : tclass;
     + this.cclass = (Modifier.isProtected(modifiers)
     +             && tclass.isAssignableFrom(caller)
     +             && !isSamePackage(tclass, caller))
     +                ? caller : tclass;
正如我们前面注意到的那样，原始代码没有对caller对象进行充分的检查。在补丁版本中，会检查tclass是否为caller的超类或超接口。这样的话，这个漏洞的利用方式已经变得很明显了，具体如下所示。
    1: class Dummy {
      2:   protected volatile A f;
      3: }
      4:
      5: class MyClass {
      6:   protected volatile B g;
      7:
      8:   main() {
      9:     m = new MyClass();
     10:     u = newUpdater(Dummy.class, A.class, "f");
     11:     u.set(m, new A());
     12:     println(m.g.getClass());
     13:   }
     14: }
首先，类_Dummy_被用于调用方法newUpdater()，该类定义了一个字段f，其类型为 _A_
（见第1-3、9、10行）。然后，调用了更新器实例（第11行）的方法set()，并为该方法提供了两个参数：类 _MyClass_
，以及字段f的新值newVal，注意，这个字段的类型为 _A_
。需要注意的是，类_MyClass_中定义的字段为_B_类型的g，而不是_A_类型的f。因此，调用set()之后，字段g的实际类型为 _A_
，但虚拟机仍认为其类型为 _B_ 。所以，当调用println()方法时，将输出“class A”，而不是“class
B”（见第12行）。但是，对于类_A_的这个实例的访问，是通过类_B_的方法和字段完成的。
**\------[ 3.1.3 – 讨论**
* * *
如上所述，Java
1.5中已经引入了_Atomic*FieldUpdater_类。但是，该漏洞直到1.8_112版本发行时才被检测到，并在下一个版本，即1.8_121中就得到了修复。通过在1.6_到1.8_112版本中进行二分查找，我们发现该漏洞首先出现在1.8_92版本中。进一步的测试表明，期间的所有版本都容易受到该漏洞的攻击，包括:1.8_101、1.8_102和1.8_111。我们还针对Java
1.5的第一个和最后一个版本进行了相应的PoC测试，结果表明，它们都不会受到该漏洞的影响。
通过比较_AtomicReferenceFieldUpdater_类在1.8_91 (无漏洞)和1.8_92
(有漏洞)版本之间的差异，代码重构操作未能对输入值进行语义层面的全面检查。其中，它在1.8_91版本中的非脆弱代码如下所示。
    1: private void ensureProtectedAccess(T obj) {
      2:   if (cclass.isInstance(obj)) {
      3:     return;
      4:   }
      5:   throw new RuntimeException(...
      6: }
      7:
      8: void updateCheck(T obj, V update) {
      9:   if (!tclass.isInstance(obj) ||
     10:       (update != null && vclass != null
     11:        && !vclass.isInstance(update)))
     12:     throw new ClassCastException();
     13:   if (cclass != null)
     14:     ensureProtectedAccess(obj);
     15: }
     16:
     17: public void set(T obj, V newValue) {
     18:   if (obj == null ||
     19:       obj.getClass() != tclass ||
     20:       cclass != null ||
     21:       (newValue != null
     22:        && vclass != null
     23:        && vclass != newValue.getClass()))
     24:       updateCheck(obj, newValue);
     25:   unsafe.putObjectVolatile(obj, offset, newValue);
     26: }
在不容易受到攻击版本中，如果obj的类型不同于tclass（包含要更新的字段的类的类型）的话，则可能需要满足两个条件。第一个条件是obj可以转换为tclass（见第9、12行）。对于第二个条件来说，只有当该字段的访问权限为protected时才会进行检测，即obj可以转换为cclass（见第14、16行）。
但是，在易受攻击的版本中，唯一的条件就是obj可以转换为cclass。而obj可以转换为tclass的条件被忽略了。
实际上，缺失一个条件就足以引发一个安全漏洞，如果利用得当的话，将导致完全绕过Java沙箱。
类型混淆漏洞可以预防吗？ 在Java中，出于性能考虑，每次使用对象o时，都不会对其类型_T_展开检查。
如果在每次使用对象时都进行类型检查的话，虽然可以防止类型混淆攻击，但同时也会增加运行时开销。
**小结**
* * *
在本文中，我们为读者详细介绍了基于类型混淆漏洞的沙箱逃逸技术。在下一篇文章中，我们将继续为读者带来更多精彩的内容，请读者耐心等待。