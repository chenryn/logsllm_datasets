the cost of recording the signal presented to the user, a successful anti-piracy
5
eﬀort must also work to maintain a high cost of distributing pirated content. In
particular, the entertainment industry must determine how it can deter peer-
to-peer distribution of its pirated content.
We explore attacks on peer-to-peer networks and the countermeasures used
to defeat them. We consider these attacks with regard to the security assets
they target: conﬁdentiality, integrity, and availability.
3.1
Conﬁdentiality
Breaches of conﬁdentiality both increase the expected liability cost of distribut-
ing content and reveal information that can be used to write programs that
attack the system’s integrity and availability.
If caught, both senders and receivers of pirated content may face lawsuits
or other forms of retaliatory action.
Using today’s peer-to-peer networks is
particularly risky because anyone eavesdropping between the sender and the
receiver may observe pirated content in transit. Even if content was transmitted
in encrypted form, the eavesdropper could use traﬃc analysis to determine
the network addresses of the sender and the receiver and the size of the ﬁles
being transferred. These attackers use conﬁdentiality attacks to interrupt ﬁle
transfers [6], locate pirates in order to send them cease and desist messages [13],
and gather evidence for litigation.
The ﬁrst step in protecting the conﬁdentiality of the network is to encrypt
the data sent over it so that only the sender and receiver know what was sent.
However, there is nothing encryption can do to ensure that the party at the
other end of the line, who knows what was transmitted, is not the attacker. For
this reason systems that provide anonymity, or at least plausible deniability,
are desirable. In such systems, the attacker may know that copyrighted content
was transmitted through the network but cannot identify the original sender or
ﬁnal recipient.
A common approach to anonymous networking is to re-route communica-
tions through more nodes than can be tracked eﬀectively [20, 21]. Attackers
may watch the communication as it travels through the network or run routers
that expose routing information, but these threats may be mitigated so long as
a reasonable fraction of the routers act to keep routing information conﬁdential.
At present, there is no way to determine which clients will route traﬃc through
the network with the intent of protecting anonymity.
Attacking the network is not the only way to breach the conﬁdentiality of
the peer-to-peer system. By running the peer-to-peer client software and thus
controlling a peer, an attacker may look into the peer-to-peer network through
the “eyes” of its client software. Client software has no secrets because operating
systems make every byte of a program’s memory available to the machine’s ad-
ministrator, or root account. The attacker can locate encryption keys, network
topology information, or any of the other information required to participate in
the peer-to-peer network. Once conﬁdentiality has been breached, the attacker
may use the information to write programs to impersonate a genuine peer-to-
peer client and attack the network from within. Such programs are invaluable
6
to the attacker as they enable scalable attacks on integrity and availability.
3.2
Integrity
The integrity of information in a peer-to-peer system may be attacked through
the introduction of degraded-quality content or by misrepresenting the identity
of the content. In the context of music, these attacks have included introducing
noisy recordings or falsely labelling songs. Attacks on the integrity of informa-
tion describing the operation of the peer-to-peer network, such as the network’s
topology and routing information, may disrupt communication or even prevent
users from ever accessing the network again. If clients are disconnected from
the network, or if content may be misrepresented or its quality decreased, then
the user’s cost of obtaining pirated content (part of the distribution cost) will
increase.
Reputation systems counter corrupt content attacks by enabling users to
rate the validity of content and those who provide it. To ensure that all copies
of the same content share the same reputation, content may be identiﬁed by its
ﬁngerprint (or hash). This enables reputations to scale far beyond trust in the
user and allows widely duplicated corrupt ﬁles to be recalled quickly.
To ensure that an attacker cannot modify or delete its client’s reputation
information, designers must distribute this information among the other clients
using protocols that prevent tampering. Because attackers can delete clients
and reinstall new ones, a reputation system should also maintain information
for the machines on which clients run. Confounding this problem are virtual
machines, in which the few potential unique machine identiﬁers (e.g. network
card addresses) may be modiﬁed easily.
While we may construct reputation systems to be resilient to a large number
of malicious users, no existing system is immune to attack from an unlimited
number of such users [7, 16]. If the attacker can write programs that impersonate
genuine clients, there is no limit to the number of malicious peers that can be
introduced into the system.
3.3
Availability
More resources are expended performing searches on peer-to-peer networks than
are required to request that a search be performed. Attackers may use their
client application to issue a large number of search requests, ﬂooding the network
with more requests than can be serviced. Alternatively, the attacker may force
their client application to drop packets it was meant to route by manipulating
the operating system or by simply disconnecting network cables at the right
times.
Peers can stem the ﬂood of requests by requiring that requests be accompa-
nied by proof that the requestor had performed computational work, restoring
the balance between the computation costs of issuing and responding to re-
quests. This approach was introduced by Dwork and Naor [10] to increase the
low cost of sending email and make sending spam unproﬁtable. This concept
7
has been extended to more general settings, such as preventing network level
denial of service attacks for TCP [15] and TLS [9]. Requiring clients to solve
puzzles before issuing requests could go a long way to prevent ﬂooding attacks
on peer-to-peer networks. However, the entertainment industry might be able
to harness enough processing power to ﬂood networks if its members can exploit
the media players they controls to perform puzzle computations on machines
paid for by their users.
An alternative to client puzzles is to use the reputation systems mentioned
above to track individual machine’s utilization of networks resources. The eﬃ-
cacy of this approach is limited if the attacker can corrupt the reputation system
using programs that impersonate genuine clients, or even if a large number of
genuine clients can be run on virtual machines and fed scripted input. The
payoﬀ to the entertainment industry of scaling such attacks comes in the form
of increased barriers between users and pirated content, which in turn increases
the per-copy cost of distribution.
4
Defending Peer-to-Peer Distribution
At the time of this writing, Sharman Networks, the makers of Kazaa, claims
that well over 200 million copies of its client application had been downloaded.
Because these networks contain vast resources, attacks will only be aﬀordable
if the cost of attack is many times smaller than the damages inﬂicted on the
distribution network.
The existing countermeasures described in Section 3 are suﬃcient to defend
peer-to-peer networks against attacks from individual users running authentic
clients on real machines. Attackers still have a leg up in that they may peer into
clients running on their own machines, use this information to write programs
that impersonate real clients, and run as many copies of these clients as they
need to disrupt the network. Alternatively, they may script attack behaviors
and feed those behaviors into a large number of authentic clients running in
parallel on virtual machines.
Can peer-to-peer networks be made immune from malicious client software
written by the attacker? They can if the personal computer industry delivers
on its promise of remote attestation. Though this technology was envisioned
to thwart pirates, it is exactly what a peer-to-peer system needs to ensure that
no client application can enter the network unless that application, and the
hardware (not a virtual machine) and operating system it is running on, has
been certiﬁed by an authority trusted by the existing clients. The trust model
may be quite simple: accept only new clients into the network if they are certiﬁed
by the same authority that vouched for the existing clients.
What’s more, if Microsoft delivers on the promises of its next-generation
secure computing base for Windows, then clients can also be assured of secure
storage and curtained memory. With these technologies, peer-to-peer systems
can protect the conﬁdentiality and integrity of the clients’ memories, which are
collectively the memory of the entire network.
8
5
Conclusion
To thwart piracy the entertainment industry must keep distribution costs high,
reduce the size of distribution networks, and (if possible) raise the cost of ex-
tracting content. However, if ‘trusted computing’ mechanisms deliver on their
promises, large peer-to-peer distribution networks will be more robust against
attack and trading in pirated entertainment will become safer, more reliable,
and thus cheaper. Since it will always be possible for some individuals to ex-
tract content from the media on which it is stored, future entertainment may be
more vulnerable to piracy than before the introduction of ‘trusted computing’
technologies.
6
Acknowledgments
This paper could not have been completed without the advice, comments, and
suggestions of Ross Anderson, Kim Hazelwood Cettei, Roger Dingledine, Glenn
Holloway, David Molnar, Michael Rabin, and the anonymous reviewers. This
research was supported in part by grants from Compaq, HP, IBM, Intel, and
Microsoft.
References
[1] The Trusted Computing Platform Alliance. Building a foundation of trust
in the PC. Technical report, January 2000.
[2] Ross J. Anderson. Security Engineering: A Guide to Building Dependable
Distributed Systems. John Wiley & Sons, Inc., ﬁrst edition, 2001.
[3] William A. Arbaugh, David J. Farber, and Jonathan M. Smith. A secure
and reliable bootstrap architecture. In Proceedings of the IEEE Symposium
on Security and Privacy, May 4–7, 1997.
[4] John Borland. Customers put kibosh on anti-copy CD. CNET News.Com,
November 19, 2002.
[5] John Borland. U.S. liability looms over Kazaa. CNET News.Com, Novem-
ber 25, 2002.
[6] John Borland. Fingerprinting P2P pirates. CNET News.Com, February
20, 2003.
[7] Fabrizio Cornelli, Ernesto Damiani, Sabrina De Capitani di Vimercati, Ste-
fano Paraboschi, and Pierangela Samarati. Choosing reputable servents in
a P2P network. In Proceedings of The Eleventh International World Wide
Web Conference, May 7–11, 2002.
[8] Macrovision Corporation. Solutions > video technology > copy protection.
http://www.macrovision.com/solutions/video/copyprotect/index.php3.
9
[9] Drew Dean and Adam Stubbleﬁeld. Using client puzzles to protect TLS. In
Proceedings of the 10th USENIX Security Symposium, August 15–17, 2001.
[10] Cynthia Dwork and Moni Naor. Pricing via processing or combatting junk
mail. In Proceedings of Advances in Cryptology - CRYPTO ’92, 12th An-
nual International Cryptology Conference, volume 740 of Lecture Notes in
Computer Science. Springer, August 16–20, 1992.
[11] Evan Hansen.
Ban on DVD-cracking code upheld.
CNET News.Com,
November 28, 2001.
[12] Amy Harmon. Judges weigh copyright suit on unlocking DVD shield. The
New York Times, May 2, 2001.
[13] Amy Harmon. Music swappers get a message on PC screens: Stop it now.
The New York Times, April 30, 2003.
[14] Amy Harmon. Record concerns sue to end piracy. The New York Times,
April 23, 2003.
[15] Ari Juels and John Brainard. Client puzzles: A cryptographic counter-
measure against connection depletion attacks. In Proceedings of the 1999
Network and Distributed System Security Symposium, February 4–5, 1999.
[16] Sepandar D. Kamvar, Mario T. Schlosser, and Hector Garcia-Molina. The
EigenTrust algorithm for reputation management in P2P networks.
In
Proceedings of The Twelfth International World Wide Web Conference,
May 20–24, 2003.
[17] David Lie, Chandramohan A. Thekkath, Mark Mitchell, Patrick Lincoln,
Dan Boneh, John C. Mitchell, and Mark Horowitz. Architectural support
for copy and tamper resistant software. In ASPLOS-IX Proceedings of the
9th International Conference on Architectural Support for Programming
Languages and Operating Systems, pages 168–177, November 12–15, 2000.
[18] Declan McCullagh.
File-swapping foes exert P2P pressure.
CNET
News.Com, August 13, 2002.
[19] Stefanie Olsen.
Record labels sue Napster investor.
CNET News.Com,
April 22, 2002.
[20] Michael K. Reiter and Aviel D. Rubin. Crowds: anonymity for Web trans-
actions. ACM Transactions on Information and System Security, 1(1):66–
92, 1998.
[21] Paul F. Syverson, David M. Goldschlag, and Michael G. Reed. Anonymous
connections and onion routing. In Proceedings of the IEEE Symposium on
Security and Privacy, pages 44–54, May 4–7, 1997.
10