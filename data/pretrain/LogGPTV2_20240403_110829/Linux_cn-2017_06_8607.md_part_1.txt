---
author: Jooq
category: 软件开发
comments_data:
- date: '2017-06-15 09:17:04'
  message: 可惜程序猿大佬不会理你，人家orm用的欢乐自在，性能？不关心
  postip: 218.244.55.50
  username: 来自北京的 Chrome 59.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5995
date: '2017-06-15 08:17:00'
editorchoice: false
excerpt: 在编写高效 SQL 时，你可能遇到的最有影响的事情就是索引。但是，一个很重要的事实就是很多 SQL 客户端要求数据库做很多“不必要的强制性工作”。
fromurl: https://blog.jooq.org/2017/03/08/many-sql-performance-problems-stem-from-unnecessary-mandatory-work
id: 8607
islctt: true
largepic: /data/attachment/album/201706/15/052446sud033e31e3wnk0d.jpg
permalink: /article-8607-1.html
pic: /data/attachment/album/201706/15/052446sud033e31e3wnk0d.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 在编写高效 SQL 时，你可能遇到的最有影响的事情就是索引。但是，一个很重要的事实就是很多 SQL 客户端要求数据库做很多“不必要的强制性工作”。
tags:
- 数据库
- 索引
- ORM
thumb: false
title: 许多 SQL 性能问题来自于“不必要的强制性工作”
titlepic: true
translator: ictlyh
updated: '2017-06-15 08:17:00'
---
![](/data/attachment/album/201706/15/052446sud033e31e3wnk0d.jpg)
在编写高效 SQL 时，你可能遇到的最有影响的事情就是[索引](http://use-the-index-luke.com/)。但是，一个很重要的事实就是很多 SQL 客户端要求数据库做很多**“不必要的强制性工作”**。
跟我再重复一遍：
> 
> 不必要的强制性工作
> 
> 
> 
什么是**“不必要的强制性工作”**？这个意思包括两个方面：
### 不必要的
假设你的客户端应用程序需要这些信息：
![](/data/attachment/album/201706/15/051822srm0z88dd8od3kmk.png)
这没什么特别的。我们运行着一个电影数据库（[例如 Sakila 数据库](https://github.com/jOOQ/jOOQ/tree/master/jOOQ-examples/Sakila)），我们想要给用户显示每部电影的名称和评分。
这是能产生上面结果的查询：
```
SELECT title, rating
FROM film
```
然而，我们的应用程序（或者我们的 ORM（LCTT 译注： 对象关系映射   （    Object-Relational Mapping    ） ））运行的查询却是：
```
SELECT *
FROM film
```
我们得到什么？猜一下。我们得到很多无用的信息：
![](/data/attachment/album/201706/15/051905dww82ciazoot8efr.png)
甚至一些复杂的 JSON 数据全程在下列环节中加载：
* 从磁盘
* 加载到缓存
* 通过总线
* 进入客户端内存
* 然后被丢弃
是的，我们丢弃了其中大部分的信息。检索它所做的工作完全就是不必要的。对吧？没错。
### 强制性
这是最糟糕的部分。现今随着优化器变得越来越聪明，这些工作对于数据库来说都是强制执行的。数据库没有办法*知道*客户端应用程序实际上不需要其中 95% 的数据。这只是一个简单的例子。想象一下如果我们连接更多的表...
你想想那会怎样呢？数据库还快吗？让我们来看看一些之前你可能没有想到的地方：
### 内存消耗
当然，单次执行时间不会变化很大。可能是慢 1.5 倍，但我们可以忍受，是吧？为方便起见，有时候确实如此。但是如果你*每次*都为了方便而牺牲性能，这事情就大了。我们不说性能问题（单个查询的速度），而是关注在吞吐量上时（系统响应时间），事情就变得困难而难以解决。你就会受阻于规模的扩大。
让我们来看看执行计划，这是 Oracle 的：
```
--------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes |
--------------------------------------------------
|   0 | SELECT STATEMENT  |      |  1000 |   166K|
|   1 |  TABLE ACCESS FULL| FILM |  1000 |   166K|
--------------------------------------------------
```
对比一下：
```
--------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes |
--------------------------------------------------
|   0 | SELECT STATEMENT  |      |  1000 | 20000 |
|   1 |  TABLE ACCESS FULL| FILM |  1000 | 20000 |
--------------------------------------------------
```
当执行 `SELECT *` 而不是 `SELECT film, rating` 的时候，我们在数据库中使用了 8 倍之多的内存。这并不奇怪，对吧？我们早就知道了。在很多我们并不需要其中全部数据的查询中我们都是这样做的。我们为数据库产生了**不必要的强制性工作**，其后果累加了起来，就是我们使用了多达 8 倍的内存（当然，数值可能有些不同）。
而现在，所有其它的步骤（比如，磁盘 I/O、总线传输、客户端内存消耗）也受到相同的影响，我这里就跳过了。另外，我还想看看...
### 索引使用
如今大部分数据库都有[涵盖索引](https://blog.jooq.org/2015/04/28/do-not-think-that-one-second-is-fast-for-query-execution/)（LCTT 译注：covering index，包括了你查询所需列、甚至更多列的索引，可以直接从索引中获取所有需要的数据，而无需访问物理表）的概念。涵盖索引并不是特殊的索引。但对于一个特定的查询，它可以“意外地”或人为地转变为一个“特殊索引”。
看看这个查询：
```
SELECT *
FROM actor
WHERE last_name LIKE 'A%'
```
执行计划中没有什么特别之处。它只是个简单的查询。索引范围扫描、表访问，就结束了：
```
-------------------------------------------------------------------
| Id  | Operation                   | Name                | Rows  |
-------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                     |     8 |
|   1 |  TABLE ACCESS BY INDEX ROWID| ACTOR               |     8 |
|*  2 |   INDEX RANGE SCAN          | IDX_ACTOR_LAST_NAME |     8 |
-------------------------------------------------------------------
```
这是个好计划吗？如果我们只是想要这些，那么它就不是：
![](/data/attachment/album/201706/15/052004nl115ig8jfujf2gu.png)
当然，我们浪费了内存之类的。再来看看这个查询：
```
SELECT first_name, last_name 
FROM actor
WHERE last_name LIKE 'A%'
```
它的计划是：
```
----------------------------------------------------
| Id  | Operation        | Name            | Rows  |
----------------------------------------------------
|   0 | SELECT STATEMENT |                 |     8 |
|*  1 |  INDEX RANGE SCAN| IDX_ACTOR_NAMES |     8 |
----------------------------------------------------
```
现在我们可以完全消除表访问，因为有一个索引涵盖了我们查询需要的所有东西……一个涵盖索引。这很重要吗？当然！这种方法可以将你的某些查询加速一个数量级（如果在某个更改后你的索引不再涵盖，可能会降低一个数量级）。
你不能总是从涵盖索引中获利。索引也有它们自己的成本，你不应该添加太多索引，例如像这种情况就是不明智的。让我们来做个测试：
```
SET SERVEROUTPUT ON
DECLARE
  v_ts TIMESTAMP;
  v_repeat CONSTANT NUMBER := 100000;
BEGIN
  v_ts := SYSTIMESTAMP;
  FOR i IN 1..v_repeat LOOP
    FOR rec IN (
      -- Worst query: Memory overhead AND table access
      SELECT *
      FROM actor
      WHERE last_name LIKE 'A%'
    ) LOOP
      NULL;
    END LOOP;
  END LOOP;
  dbms_output.put_line('Statement 1 : ' || (SYSTIMESTAMP - v_ts));
  v_ts := SYSTIMESTAMP;
  FOR i IN 1..v_repeat LOOP
    FOR rec IN (
      -- Better query: Still table access
      SELECT /*+INDEX(actor(last_name))*/
        first_name, last_name
      FROM actor
      WHERE last_name LIKE 'A%'
    ) LOOP
      NULL;
    END LOOP;
  END LOOP;
  dbms_output.put_line('Statement 2 : ' || (SYSTIMESTAMP - v_ts));
  v_ts := SYSTIMESTAMP;
  FOR i IN 1..v_repeat LOOP
    FOR rec IN (
      -- Best query: Covering index
      SELECT /*+INDEX(actor(last_name, first_name))*/
        first_name, last_name
      FROM actor
      WHERE last_name LIKE 'A%'
    ) LOOP
      NULL;
    END LOOP;
  END LOOP;