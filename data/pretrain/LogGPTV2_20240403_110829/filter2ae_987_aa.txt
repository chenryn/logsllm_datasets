**作者：Ryze-T  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL **
## 0x00 简介
ARM 属于 CPU 架构的一种，主要应用于嵌入式设备、智能手机、平板电脑、智能穿戴、物联网设备等。
ARM64 指使用64位ARM指令集，64位指指数据处理能力即一条指令处理的数据宽度，指令编码使用定长32比特编码。
## 0x01 ARM
### 1.1 字节序
字节序分为大端（BE）和小端（LE）：
  * 大端序（Big-Endian）将数据的低位字节存放在内存的高位地址，高位字节存放在低位地址。这种排列方式与数据用字节表示时的书写顺序一致，符合人类的阅读习惯。
  * 小端序（Little-Endian）将一个多位数的低位放在较小的地址处，高位放在较大的地址处。小端序与人类的阅读习惯相反，但更符合计算机读取内存的方式，因为CPU读取内存中的数据时，是从低地址向高地址方向进行读取的。
在v3之前，ARM体系结构为little-endian字节序，此后，ARM处理器成为BI-endian，并具允许可切换字节序。
### 1.2 寄存器
#### 1.2.1 32位寄存器
R0-R12：正常操作期间存储临时值、指针。
其中：
  * R0用于存储先前调用的函数的结果
  * R7用于存储系统调用号
  * R11跟踪用作帧指针的堆栈的边界，函数调用约定指定函数的前四个参数存储在寄存器 R0-R3 中
  * R13也称为SP，作为堆栈指针，指向堆栈的顶部
  * R14也被称为 LR，作为链接寄存器，进行功能调用时，链接寄存器将使用一个内存地址进行更新，该内存地址引用了从其开始该功能的下一条指令，即保存子程序保存的地址
  * R15也称为PC，即程序计数器，程序计数器自动增加执行指令的大小。
当参数少于4个时，子程序间通过寄存器R0~R3来传递参数；当参数个数多于4个时，将多余的参数通过数据栈进行传递，入栈顺序与参数顺序正好相反，子程序返回前无需恢复R0~R3的值。
在子程序中，使用R4～R11保存局部变量，若使用需要入栈保存，子程序返回前需要恢复这些寄存器；R12是临时寄存器，使用不需要保存。
子程序返回32位的整数，使用R0返回；返回64位整数时，使用R0返回低位，R1返回高位。
#### 1.2.2 64位寄存器
### 1.3 指令
ARM 指令模版：
MNEMONIC{S} {condition} {Rd}, Operand1, Operand2
> [!NOTE] MNEMONIC：指令简称 {S}：可选后缀，如果指定了S，即可根据结果更新条件标志 {condition}：执行指令需满足的条件
> {Rd}：用于存储指令结果的寄存器 Operand1：第一个操作数，寄存器或立即数 Operand2：可选，可以是立即数或者带可移位的寄存器
### 1.4 栈帧
栈帧是一个函数所使用的那部分栈，所有的函数的栈帧串起来就是一个完整的栈。栈帧的边界分别由 fp 和 sp 来限定。
FP就是栈基址，它指向函数的栈帧起始地址；SP则是函数的栈指针，它指向栈顶的位置。ARM压栈的顺序依次为当前函数指针PC、返回指针LR、栈指针SP、栈基址FP、传入参数个数及指针、本地变量和临时变量。
如果函数准备调用另一个函数，跳转之前临时变量区先要保存另一个函数的参数。从main函数进入到func1函数，main函数的上边界和下边界保存在被它调用的栈帧里面。
### 1.5 叶子函数和非叶子函数
叶子函数是指本身不会调用其他函数，非叶子函数相反。非叶子函数在调用时 LR
会被修改，因此需要保留该寄存器的值。在栈溢出的场景下，非叶子函数的利用会比较简单。
## 0x02 固件模拟
ARM架构的二进制程序，要进行固件模拟才可以运行和调试。
目前比较主流的方法还是使用QEMU，可以参考[路由器固件模拟环境搭建](https://xz.com/t/5697)，也可以用一些仿真工具，比如
Firmadyne 和 firmAE。
如果想依靠固件模拟自建一些工具，可以考虑使用 [Qiling](https://docs.qiling.io/en/latest/)。
## 0x03 漏洞
### 3.1 exploit_me
[下载地址](\[bkerler/exploit_me: Very vulnerable ARM/AARCH64 application \(CTF
style exploitation tutorial with 14 vulnerability techniques\)
\(github.com\)\]\(https://github.com/bkerler/exploit_me\))
运行bin目录下的 expliot64开始进行挑战：
#### Level 1: Integer overflow
漏洞触发代码如下：
a1 是传入的第二个参数，atoi
函数可以将传入的参数字符串转为整数，然后进行判断，第一个判断是判断转换后的v2是否为0或负数，若不是，则进入第二个判断，判断 v2
的低16位（WORD）是否不为0，即低16位是否为0，若为0则跳过判断。
atoi 函数存在整数溢出，当输入 -65536，会转换为0xffff0000：
此数的低16位是0，因此可以绕过判断。
#### Level 2: Stack overflow
漏洞触发代码如下：
verify_user 函数会验证输入的第一个参数是否为 admin，验证完成后，会继续验证第二个参数是否是
funny，看起来似乎很简单，但是可以看到即使两个参数都按照要求输入，也不会得到 level3 password：
查看第三关的入口，可以看到第三关的password参数为 aVelvet：
通过查找引用可以得到 level3password 这个函数才是输出 aVelvet 的关键函数，但是此函数并未被引用。然而 strcpy(&v3, a1)
这一行伪代码暴露出存在栈溢出，因此可以通过覆盖栈上存储的返回地址，来跳转到 level3password 函数中。
首先通过 pwndbg cyclic 生成一个长度为200的序列，当作第一个参数输入：
得到偏移为16。
IDA 查看 level3password 地址为 0x401178，因此构造PoC：
    from pwn import *
    context.arch = 'aarch64'
    context.os = 'linux'
    pad = b'aaaaaaaaaaaaaaaa\x78\x11\x40'
    io = process(argv=['./exploit64','help',pad,'123'])
    print(io.recv())
得到 password “Velvet”
#### Level 3: Array overflow
抽出核心代码为：
    a1 = atoi(argv[2]);
    a2 = atoi(argv[3]);
    _DWORD v3[32]; // [xsp+20h] [xbp+20h]
    v3[a1] = a2;
    return printf("filling array position %d with %d\n", a1, a2);
这里有很明显的数组越界写入的问题。用gdb 进行调试：`gdb --args ./exploit64 Velvet 33 1`，在 0x401310（str
w2, [x1, x0] 数组赋值） 处下断点，查看寄存器：
可以看到，当执行到赋值语句时，值传递是在栈上进行的，因此此处可以实现栈上的覆盖。
gdbserver配合IDA pro 尝试：
当传入参数为34，00000000 时，可以看到此刻执行`STR W2, [X1,X0]` 是将00000000 传到 0x000FFFFFFFFEBC0
+ 0x84 = 0x000FFFFFFFFEC44 中：
0x000FFFFFFFFEC48 存储的就是 array_overflow 函数在栈上存储的返回地址。
因此只要覆盖此位置就可以劫持程序执行流。与 level2 同理，找到password 函数地址为 0x00000000004012C8
因此构造PoC：
    from pwn import *
    context.arch = 'aarch64'
    context.os = 'linux'
    context.log_level = 'debug'
    pad = "4199112"（0x00000000004012C8转十进制作为字符串传入）
    io = process(argv=['./exploit64','Velvet',"34",pad])
    print(io.recv())
#### Level 4: Off by one
核心代码如下：
传入的参数长度不能大于 0x100，复制到v3[256] 后，要使 v4 = 0。
字符串在程序中表示时，其实是会多出一个 "0x00" 来作为字符串到结束符号。因此PoC为：
    from pwn import *
    context.arch = 'aarch64'
    context.os = 'linux'
    context.log_level = 'debug'
    payload = 'a' * 256
    io = process(argv=['./exploit64','mysecret',payload])
    print(io.recv())
#### Level 5: Stack cookie
Stack Cookie 是为了应对栈溢出采取的防护手段之一，目的是在栈上放入一个检验值，若栈溢出Payload在覆盖栈空间时，也覆盖了 Stack
Cookie，则校验 Cookie 时会退出。
这里的Stack Cookie 是 secret = 0x1337。
通过汇编可以看出，v2 存储在 sp+0x58 -- sp+ 0x28 中，所以当 strcpy 没限制长度时，可以覆盖栈空间，secret 存储在
sp+0x6C 中，v3 存储在 sp+0x68中，因此只要覆盖这两个位置为判断值，就可以完成攻击。