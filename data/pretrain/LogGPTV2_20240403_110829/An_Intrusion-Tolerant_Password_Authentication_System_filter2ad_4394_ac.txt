### System Configuration and Testing

The system was configured with a 100 Mbps local area network (LAN) within a university's campus network. The service server and multiple PVD (Password-Verification Data) servers were hosted on these PCs.

#### Test Cases
We conducted the system tests in two distinct scenarios:

1. **Cross-Campus Network:**
   - **Client Setup:** The client program ran on a Sun workstation equipped with an Ultra-60 CPU and Sun OS 5.9, located in a different university's campus network.
   - **Network Configuration:** The two university campus networks were connected via the Internet, with 8 intermediate routers between the client and the service server.
   
2. **Local Network:**
   - **Client Setup:** The client program ran on a PC within the same LAN as the service and PVD servers.

Example configuration files for these tests are provided in the Appendix.

#### Experimental Credentials
For the experiments, we used "itpake" as the username and "a1b2c3d4" as the password. Notably, this password passed proactive password checking but was still vulnerable to dictionary attacks [31].

#### Performance Results
Table 2 presents the system performance for both test cases, with (t, n) parameters set to (2, 4) and (3, 4). The results indicate that while the intrusion-tolerant architecture introduces some performance overhead, the system remains reasonably efficient. Additionally, significant security improvements were achieved.

---

### Further Discussions

**Observations:**
- **PVD Server Computation:** Among the system components, the PVD servers are the most computationally intensive. The system performs best when PVD servers run on dedicated, high-performance computers.
- **Service Server Interface:** The computation by the service server interface is relatively light, making it easy to integrate without significantly impacting the service server's performance.

**Performance Enhancements:**
- **Precomputation:** Since the server-side value B in step 2 is independent of the user's login attempt, it can be precomputed, improving performance by approximately one-sixth.
- **Efficient Computation for Small t:** When t is small (e.g., 3 or 4), the computation of γ in Step 4.3 can be optimized to a single modular exponentiation through some storage mechanisms.
- **Caching Mechanism:** Implementing a caching mechanism in the client program and the service server interface can quickly resume old but valid sessions, similar to SSL.

---

### Operational Considerations

**System Deployment:**
- **Working Folder Security:** The working folder containing PVD shares should not be shared over the network. If compromised, an attacker could steal the PVD shares, recover the shared PVD, and mount offline dictionary attacks.
- **PVD Share Update:** PVD x is shared using Shamir's secret sharing. t or more PVD servers can collectively update their PVD shares while keeping the shared PVD (x) unchanged, adding proactive security and resilience.
- **Adding New PVD Servers:** For a multi-server system, adding a new PVD server is simplified as t or more existing PVD servers can help generate the new PVD share.
- **Password Change:** Users can change their passwords by performing a PAKE (Password-Authenticated Key Exchange) login with each participating PVD server and sending the new PVD shares via secure channels.

**Management Server:**
- **Role:** The management server generates system parameters and manages users. It can reset user passwords but is not involved in regular logins or password changes. For security, it should typically remain offline and be brought online only when needed.

---

### Example Applications

**Integration:**
- **Telnet and FTP:** The system can be integrated into Telnet and FTP to enhance their security.
- **Web Applications:** The PVD servers and management server can be used without changes. The client program and service server interface can take various forms:
  - **Client Program:** To support web browsers, the client program can be implemented as a Java Applet.
  - **Service Server Interface:** Written in Java, it can be easily integrated into JSP pages.

**Extended Use Cases:**
- **Password-Protected Credentials:** The system can store password-protected credentials, such as private keys. These can be accessed by remote entities authenticated by their passwords. For example, a user's private key can be encrypted by their password and shared among multiple servers. The mobile user can retrieve their private key from any location by authenticating with a threshold of the servers, establishing secure connections, and downloading the password-encrypted private key shares.

For such applications, the service server interface should be combined with each PVD server, and the client program should be configured with the IP addresses of the PVD servers. The data flow described in Section 5 can be optimized for better performance.

---

### Conclusion

**Intrusion-Tolerant Password Authentication:**
- **PVD Security:** PVD is derived from the password using publicly known functions and stored by a single server for authentication. Previous research has shown that even with proactive password checkers, some passwords remain vulnerable to dictionary attacks. Our system uses multiple servers to share PVD and never reconstructs them during user authentications.
- **Security and Resilience:** Compromising up to (t − 1) servers will not allow an attacker to mount offline dictionary attacks, and the system can function even with some server failures.
- **Experimental Results:** The intrusion-tolerant architecture achieves high-level security at a reasonable cost.

---

### References

[References listed here]

---

### Appendix

**Example Configuration Files:**

- **PVD Server 4:**
  ```plaintext
  Server.SSL.1=http://129.174.87.243:8001
  Server.SSL.2=http://134.126.21.129:8002
  Server.SSL.3=http://134.126.21.157:8003
  Server.SSL.4=http://134.126.24.122:8004
  ServerID=4
  SSLTokenFile=PVDToken4.p12
  PVDShareFile=PVDShareFile.4
  DeltaInverseShare=4754EF815B9 (snipped)
  BetaShares.1=00F0130E08D4A58E (snipped)
  BetaShares.2=2B4CAF7C5DBB60B4 (snipped)
  BetaShares.3=41AECDD4E945D5DF (snipped)
  BetaShares.4=0B6C51D6634856CA (snipped)
  ```

- **PVD Share Record for User "itpake":**
  ```plaintext
  itpake:D370:3:4:4:4F6A4A86B3AB0EB72BB1CBEC1653A9D1DBDC3874A34703D956580A95BCF8335187786250111E36B149AE72346AF00E5EA39FED5691FE7E8CA3A50E487F9FD5F64FDE1D7CC24B125A4FF5773CAED89F4B3D9C632F69F310C75003D38C5C229A69B5FB04B71E1F7C90BDDCC641AE61F1F943A86B82645662CB79394B2DB85784E2
  ```

- **Service Server Interface:**
  ```plaintext
  ServiceServerPort=8000
  Server.SSL.1=http://129.174.87.243:8001
  Server.SSL.2=http://134.126.21.129:8002
  Server.SSL.3=http://134.126.21.157:8003
  Server.SSL.4=http://134.126.24.122:8004
  TrustedCertFile=DemoCA.cer
  ```

---

This revised text provides a clearer, more structured, and professional presentation of the original content.