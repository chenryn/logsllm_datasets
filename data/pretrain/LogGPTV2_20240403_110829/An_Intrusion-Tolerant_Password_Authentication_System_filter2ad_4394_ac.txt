connected by a 100Mbps local area network, which was
located in one university’s campus network. The service
server and the multiple PVD servers were running on these
PCs.
We tested the system in two cases. In the ﬁrst case,
the client program was running on a Sun workstation with
Ultra-60 CPU and Sun OS 5.9 operation system, which was
located in another university’s campus network (different
from the service/PVD servers). These two university cam-
pus networks were connected through the Internet and there
were 8 intermediate routers between the client program and
the service server. In the second case, the client program
was running on a PC located in the same local area net-
work as the service/PVD servers. Some example conﬁgura-
tion ﬁles for our tests are given in the Appendix.
In these experiments, we used itpake as the user name
and a1b2c3d4 as the password. (In [31], this password
passed the proactive password checking but still fell prey
to the dictionary attack.) Table 2 gives the performance of
the system for the above two test situations, each with (t, n)
as (2, 4) and (3, 4). Table 2 indicates that the intrusion toler-
ance architecture incurs some performance penalty but the
system still performs reasonably well. On the other hand,
signiﬁcant security improvement has been achieved.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:45:51 UTC from IEEE Xplore.  Restrictions apply. 
6.3. Further discussions
We observed that, among the system components, the
computation on the PVD servers are the most computa-
tion intensive. The system achieved best performance when
PVD servers were running on dedicated fast computers. On
the other hand, the computation by the service server in-
terface is rather light, which is attractive as the integration
of the service server interface to a service server won’t af-
fect the performance of the service server much.
We observe that the system performance can be further
improved by the following methods.
• Precomputation. From Section 5, we note that the
server-side value B in step 2 is independent of user
log-in attempt and thus, can be precomputed. This will
improve the system performance by about one-sixth.
• When t is small (say, t is 3 or 4), through some stor-
age, the computation of γ in Step 4.3 can be performed
in a single modular exponentiation.
• Caching mechanism can be implemented by the client
program and the service server interface to quickly re-
sume an old but still valid session, as done in SSL.
7. Operational Considerations
Using multiple servers for system intrusion tolerance im-
plicitly assumes that breaking into multiple machines is
more difﬁcult than compromising just one. To meet this
assumption, extra cautions must be exerted in the system
deployment. In this section, we will discuss several opera-
tional issues.
Sharing of the working folder The working folder where
PVD shares are stored should not be shared to the network.
Otherwise, by breaking into just a few machines (just one
machine is needed if t PVD shares are accessible from that
machine via network-shared folders), an attacker will be
able to steal the PVD shares, recover the shared PVD and
mount off-line dictionary attacks.
PVD share update Since PVD x is shared via a Shamir se-
cret sharing, t or more PVD servers can collectively up-
date their PVD shares while keeping the shared PVD (x)
unchanged. This will add proactive security to the system
[16, 6] and make the system more resilient.
Adding a new PVD server For a multiple-server system, it
is natural that the system administrator may decide to re-
tire one PVD server or add a new one. Since t or more PVD
servers can help a new PVD server generate its PVD share,
the administrative process of adding a new server can be sig-
niﬁcantly simpliﬁed.
Password change For a password authentication system, it
is desirable that a user can change his password. For our
intrusion-tolerant system, the password change proceeds as
follows: the client performs a PAKE log-in with each par-
ticipating PVD server (as opposed to the service server in
the normal user log-in) and establishes a secure channel. It
then sends the PVD shares of the new password via these
secure channels to the participating PVD servers.
The management server In the described system, the man-
agement server is used to generate system parameters and
user management. It can be used to reset a user’s pass-
word but it is not involved in user log-in and user pass-
word change. For security reason, the management server
should typically stay off-line and can be brought on-line
when used.
8. Example Applications
Our described system can be straightforwardly inte-
grated to the Telnet and FTP to enhance their security. It
can also be integrated into password-based web applica-
tions. For web applications, the PVD servers and the man-
agement server can be used without any changes. The
client program and the service server interface can ex-
ist in many forms.
• The client program. To support web browser on the
client side, the client program can be in the form of
Java Applet.
• The service server interface. Our service server inter-
face is written in Java and can be easily integrated into
JSP pages.
Our system can also be extended to store password-
protected credentials [13, 19, 26, 22]. These credentials can
be accessed by a remote entity authenticated by his pass-
word and the user can roam with his password only. For
example, a user’s private key (of a public/private key pair)
can be encrypted by his password and the encrypted pri-
vate key can be shared among multiple servers [28] —
each server has a share of the password-encrypted private
key. The mobile user can retrieve his private key from any
new location by authenticating himself to a threshold of
the multiple servers via his password, establishing secure
connections with the participating servers and downloading
the password-encrypted private key shares. The password-
encrypted private key can be reconstructed and decrypted
for use. To perform the above steps, a user only needs his
password and a reliable client program. For this type of ap-
plications, some changes are necessary to integrate our sys-
tem. The service server interface should be combined into
each PVD server and the client program should be conﬁg-
ured with the IP addresses of the PVD servers. For perfor-
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:45:51 UTC from IEEE Xplore.  Restrictions apply. 
mance reason, the data ﬂow described in Section 5 can be
optimized (details are omitted here due to space constraint).
9. Conclusion
Password-veriﬁcation data is a value derived from the
corresponding password using publicly known functions
and is typically stored by a single server to authenticate
the user. Previous research has shown that in a password
authentication system, even when a proactive password
checker is used, some passwords are still vulnerable to the
dictionary attack. For these passwords, if the centralized
server is compromised and their PVD is stolen, the attacker
can mount off-line dictionary attacks against them. In this
article, we described an intrusion-tolerant password authen-
tication system, which uses multiple servers to share PVD
and never reconstructs them during user authentications.
Compromising up to (t − 1) such servers will not allow an
attacker to mount off-line dictionary attacks and the system
can still function in the presence of some server failures.
We gave the system architecture and some implementation
details. Our experimental results showed that the intrusion-
tolerant architecture achieves high-level security at reason-
able expense.
References
[1] M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated
key exchange secure against dictionary attacks. In B. Pre-
neel, editor, Advances in Cryptology - EUROCRYPT 2000,
volume 1807 of Lecture Notes in Computer Science, pages
139–155, Bruges, Belgium, May 2000.
[2] M. Bellare and P. Rogaway. Random oracles are practical:
a paradigm for designing efﬁcient protocols. In Proceedings
of the 1st ACM conference on Computer and communica-
tions security, pages 62–73, Fairfax, Virginia, United States,
1993.
[3] S. Bellovin and M. Merritt.
Encrypted key exchange:
password–based protocols secure against dictionary attacks.
In Proceedings of the 1992 IEEE Computer Society Sym-
posium on Research in Security and Privacy, pages 72–84,
1992.
[4] S. M. Bellovin and M. Merritt. Augmented encrypted key
exchange: a password–based protocol secure against dictio-
nary attacks and password ﬁle compromise. In Proceedings
of the 1st ACM Conference on Computer and Communica-
tions Security, pages 244–250, 1993.
[5] V. Boyko, P. MacKenzie, and S. Patel. Provably secure
password-authenticated key exchange using Difﬁe-Hellman.
In B. Preneel, editor, Advances in Cryptology - EUROCRYPT
2000, volume 1807 of Lecture Notes in Computer Science,
pages 156–171, Bruges, Belgium, May 2000.
[6] R. Canetti, R. Gennaro, A. Herzberg, and D. Naor. Proac-
tive security: Long-term protection against break-ins. Cryp-
toBytes, 1(3):1–8, 1997.
[7] R. Canetti, O. Goldreich, and S. Halevi. The random oracle
methodology, revisited (preliminary version).
In Proceed-
ings of the 30th annual ACM symposium on Theory of com-
puting, pages 209–218, Dallas, Texas, United States, 1998.
[8] CERT.
CERT advisory CA-2002-29 buffer over-
Available
ﬂow in Kerberos administration daemon.
at http://www.cert.org/advisories/CA-2002-29.html, Octo-
ber 25 2002.
[9] CERT.
Vulnerability note VU#124003 apache HTTP
securely han-
Available at
server on Win32 systems does not
dle input passed to CGI programs.
http://www.kb.cert.org/vuls/id/124003, April 11 2002.
[10] M. Di Raimondo and R. Gennaro. Provably secure threshold
password-authenticated key exchange. In E. Biham, editor,
Advances in Cryptology - EUROCRPYT 2003, volume 2656
of Lecture Notes in Computer Science, pages 507–523, May
4–8 2003.
[11] T. Dierks and C. Allen. The TLS protocol version 1.0. Inter-
net RFC 2246, January 1999.
[12] W. Difﬁe and M. E. Hellman. New directions in cryptogra-
phy. IEEE Transactions on Information Theory, 22(6):644–
654, November 1976.
[13] W. Ford and B. Kaliski, Jr. Server–assisted generation of
In Proceedings of the
a strong secret from a password.
9th IEEE International Workshops on Enabling Technolo-
gies: Infrastructure for Collaborative Enterprises(WET ICE
2000), pages 176–180, Gaithersburg, MD, USA, June 14–16
2000.
[14] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. Secure
distributed key generation for discrete-log based cryptosys-
tems. In J. Stern, editor, Advances in Cryptology - EURO-
CRYPT99, volume 1592 of Lecture Notes in Computer Sci-
ence, pages 295–310, 1999.
[15] L. Gong. Increasing availability and security of an authenti-
cation service. IEEE Journal on Selected Areas in Commu-
nications, 11(5):657–662, June 1993.
[16] A. Herzberg, S. Jarecki, H. Krawczyk, and M. Yung. Proac-
tive secret sharing. In D. Coppersmith, editor, Advances in
Cryptology — Crypto ’95, volume 963 of Lecture Notes in
Computer Science, pages 339–352, Santa Barbara, Califor-
nia, U.S.A., August 27–31 1995. Springer-Verlag.
[17] D. Jablon.
Extended password key exchange protocols
immune to dictionary attack.
In Proceedings of the 6th
IEEE Workshops on Enabling Technologies: Infrastructure
for Collaborative Enterprises, pages 248–255, June 18-20
1997.
[18] D. P. Jablon. Strong password–only authenticated key ex-
change. ACM SIGCOMM Computer Communication Re-
view, 26(5):5–26, October 1996.
[19] D. P. Jablon. Password authentication using multiple servers.
In D. Naccache, editor, Progress in Cryptology - CT-RSA
2001 Proceedings of the Cryptographers’ Track at RSA Con-
ference, volume 2020 of Lecture Notes in Computer Science,
pages 344–360, San Francisco, CA, USA, April 8–12 2001.
Springer-Verlag.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:45:51 UTC from IEEE Xplore.  Restrictions apply. 
Example conﬁguration ﬁle for PVD server 4
Server.SSL.1=http://129.174.87.243:8001
Server.SSL.2=http://134.126.21.129:8002
Server.SSL.3=http://134.126.21.157:8003
Server.SSL.4=http://134.126.24.122:8004
ServerID=4
SSLTokenFile=PVDToken4.p12
PVDShareFile=PVDShareFile.4
DeltaInverseShare=4754EF815B9 (snipped)
BetaShares.1=00F0130E08D4A58E (snipped)
BetaShares.2=2B4CAF7C5DBB60B4 (snipped)
BetaShares.3=41AECDD4E945D5DF (snipped)
BetaShares.4=0B6C51D6634856CA (snipped)
Example PVD share record on PVD server 4 for user “it-
pake”
itpake:D370:3:4:4:4F6A4A86B3AB0EB72BB1C
BEC1653A9D1DBDC3874A34703D956580A95BCF8
335187786250111E36B149AE72346AF00E5EA39
FED5691FE7E8CA3A50E487F9FD5F64FDE1D7CC2
4B125A4FF5773CAED89F4B3D9C632F69F310C75
003D38C5C229A69B5FB04B71E1F7C90BDDCC641
AE61F1F943A86B82645662CB79394B2DB85784E2
[20] J. Katz, R. Ostrovsky, and M. Yung. Efﬁcient password-
authenticated key exchange using human-memorable pass-
words. In B. Pﬁtzann, editor, Advances in Cryptology - EU-
ROCRYPT 2001, volume 2045 of Lecture Notes in Computer
Science, pages 475–494. Springer-Verlag, 2001.
[21] J. Klensin, R. Catoe, and P. Krumviede. IMAP/POP autho-
rize extension for simple challenge/response. Internet RFC
2095, January 1997.
[22] T. Kwon. Virtual software tokens - a practical way to secure
PKI roaming.
In G. Davida, Y. Frankel, and O. Rees, ed-
itors, Proceedings of the Infrastructure Security (InfraSec),
volume 2437 of Lecture Notes in Computer Science, pages
288–302. Springer-Verlag, 2002.
[23] P. MacKenzie, S. Patel, and R. Swaminathan. Password-
authenticated key exchange based on RSA. In T. Okamoto,
editor, ASIACRYPT2000, volume 1976 of Lecture Notes in
Computer Science, pages 599–613. Springer-Verlag, 2000.
[24] P. MacKenzie, T. Shrimpton, and M. Jakobsson. Threshold
password-authenticated key exchange (extended abstract). In
M. Yung, editor, Advanced in Crypto: – CRYPTO 2002, vol-
ume 2442 of Lecture Notes in Computer Science, pages 385–
400. Springer-Verlag, August 2002.
[25] H. Orman. The OAKLEY key determination protocol. Inter-
net RFC 2412, November 1998.
[26] R. Perlman and C. Kaufman. Secure password-based pro-
tocol for downloading a private key. In Proceedings of the
ISOC Network and Distributed Systems Security Symposium,
1999.
[27] R. Rivest, A. Shamir, and L. Adleman. A method for obtain-
ing digital signature and public key cryptosystems. Commu-
nications of the ACM, 21(2):120–126, February 1978.
[28] X. Wang. Intrusion-tolerant password-enabled PKI. In Pro-
ceedings of the 2nd Annual PKI Research Workshop, pages
44–53, Gaithersburg, MD, USA, April 28–29 2003.
[29] X. Wang and S. Redwine. An efﬁcient threshold password-
authenticated key exchange protocol. In Proceedings of the
2003 International Conference on Distributed Multimedia
Systems (DMS’2003), 2003.
[30] T. Wu. The secure remote password protocol. In Proceed-
ings of the 1998 Network and Distributed System Security
Symposium, pages 97–111, 1998.
[31] T. Wu. A real-world analysis of Kerberos password security.
In Proceedings of the 1999 Network and Distributed System
Security Symposium, 1999.
Appendix
In this appendix, we give some example conﬁguration
ﬁles for our described system.
Example conﬁguration for the server service interface
ServiceServerPort=8000
Server.SSL.1=http://129.174.87.243:8001
Server.SSL.2=http://134.126.21.129:8002
Server.SSL.3=http://134.126.21.157:8003
Server.SSL.4=http://134.126.24.122:8004
TrustedCertFile=DemoCA.cer
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:45:51 UTC from IEEE Xplore.  Restrictions apply.