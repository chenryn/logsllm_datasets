## PostgreSQL 遗传学应用 - 矩阵相似距离计算 (欧式距离,...XX距离)    
### 作者        
digoal         
### 日期                                                                                                             
2017-12-27      
### 标签                                          
PostgreSQL , 欧式距离 , 遗传学 , 生物科学 , 十万列 , 数组 , UDF , 插件       
----       
## 背景   
生物科学中相当重要的工作之一解开遗传密码?  
欧式空间计算，是其中的一个需求，很有意思吧，PostgreSQL可以用来解开遗传密码。  
https://en.wikipedia.org/wiki/Euclidean_distance  
https://www.math.uci.edu/~gpatrick/source/205b06/chapviii.pdf  
实际上PostgreSQL是一个扩展性非常强大的数据库，比如在文本相似计算方面，就有诸多扩展插件。  
[《17种相似算法与GIN索引 - pg_similarity》](../201705/20170524_01.md)    
https://github.com/eulerto/pg_similarity  
https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%BA%A6%E9%87%8F/1274107?fromtitle=%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB&fromid=1798948  
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 3 rum, smlar应用场景分析》](../201701/20170116_04.md)    
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 2 smlar插件详解》](../201701/20170116_03.md)    
[《PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 1 文本(关键词)分析理论基础 - TF(Term Frequency 词频)/IDF(Inverse Document Frequency 逆向文本频率)》](../201701/20170116_02.md)    
在基因科学方面，也有扩展插件应用：  
[《为了部落 - 如何通过PostgreSQL基因配对，产生优良下一代》](../201606/20160621_01.md)    
在化学分析方面，也有相似的插件：  
http://www.rdkit.org/  
某个生物科技公司，有这样的一种需求：  
每张表有几十万行，几万列，全部浮点类型，任意列勾选，计算欧氏距离等需求。  
## 设计  
因为数据库设计限制，不能支持一张表几万列，不过PostgreSQL可以将多列存成数组。  
1、DNA结构如下：  
```  
create table dna (  
  id serial primary key,   -- 主键  
  arr float8[]             -- 浮点数组  
);  
```  
比如每行代表一个物种的测序数据。  
2、生成随机浮点数组的函数，可以方便的生成测试数据。  
```  
create or replace function gen_randarr(int) returns float8[] as $$  
  select array_agg(random()*1000) from generate_series(1, $1);  
$$ language sql strict;  
```  
```  
postgres=# select gen_randarr(10);  
                                                                                 gen_randarr                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 {830.968368332833,283.642665948719,64.4483459182084,24.3995497003198,654.509209562093,762.801019474864,109.366949647665,849.462529178709,111.898560542613,650.523159187287}  
(1 row)  
Time: 0.758 ms  
```  
3、生成50万条测试数据，每组2万浮点数。  
```  
vi test.sql  
insert into dna (arr) values (gen_randarr(20000));  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 50 -j 50 -t 10000  
```  
数据大概占用86GB空间。  
```  
postgres=# \dt+ dna  
                   List of relations  
 Schema | Name | Type  |  Owner   | Size  | Description   
--------+------+-------+----------+-------+-------------  
 public | dna  | table | postgres | 86 GB |   
(1 row)  
```  
## 计算欧式距离的函数  
可以使用plpgsql创建计算两个浮点数组的欧式距离的函数，长度可以不一样，因为可能不同物种的遗传数据不一样，有的多，有的少。  
如果使用C函数，性能会更好。  
```  
CREATE OR REPLACE FUNCTION euc_distance(l float8[], r float8[]) RETURNS float8 AS $$  
DECLARE  
  s float8 := 0;  -- 中间结果   
  x float8;       -- LOOP中的数组元素值   
  i int := 1;     -- 数组下标   
  r_len int := array_length(r,1);    -- 右边数组的长度   
  l_len int := array_length(l,1);    -- 左边数组的长度   
BEGIN  
  if l_len >= r_len then  
    foreach x in array l LOOP  
      s := s + ( (x - case when icount(*) dist_val from unnest($1) t(val) where val is not null;    
$$ language sql strict;   
```  
2、组合去重函数，去掉按列值排序后的重复行。  
```  
CREATE or replace FUNCTION arr_sort(arr int[]) RETURNS int[] AS $$    
  select array_agg(id order by id) from unnest(arr) t(id);    
$$ language sql strict;   
```  
3、比如选中了1,2,3,4这四种物种，如何得到他们的排列组合呢？  
```  
select distinct on (arr_sort(array[t1.id, t2.id])) t1.id, t2.id from   
  (select unnest(array[1,2,3,4]) id) t1,  
  (select unnest(array[1,2,3,4]) id) t2  
where not has_dupli_val(t1.id, t2.id);    
 id | id   
----+----  
  1 |  2  
  3 |  1  
  1 |  4  
  2 |  3  