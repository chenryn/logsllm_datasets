### TOCTOU Vulnerabilities in Linux Kernel Tracing

#### Overview
Time-of-check to time-of-use (TOCTOU) vulnerabilities can be exploited in the context of system call tracing. This document provides a detailed analysis of such vulnerabilities, their exploitation, and potential mitigations.

#### System Call Execution Flow
The execution flow for the `sys_connect` system call is as follows:

```c
long __sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
{
    struct filename *tmp;
    int ret;

    ret = move_addr_to_kernel(uservaddr, addrlen, &address);
    if (!ret) {
        ret = __sys_connect_file(f.file, &address, addrlen, 0);
    }
    return ret;
}
```

#### TOCTOU - Connect
- **ptrace_report_syscall(regs, message)**
- **__secure_computing(struct seccomp_data{regs…})**
- **trace_sys_enter(regs, regs->orig_ax)**
- **User Space**
- **Kernel 5.7.0**
- **syscall enter**
- **trace_sys_exit(regs, regs->ax)**
- **ptrace_report_syscall(regs, message)**
- **syscall exit**

#### Execution Flow
- **TOC by Tracing Programs**
  - **sys_enter tracepoint**
  - **ptrace**
  - **kprobe**
- **Syscall Table (x86_64)**
  - **42 sys_connect**
  - **43 sys_accept**
  - **44 sys_sendto**
- **TOU by Linux Kernel**

#### Detailed Analysis
- **TOCTOU Windows across Kernels**
  - TOCTOU windows have existed since the initial release of tracepoint/ptrace.
  - Expected behaviors include monitoring kernel memory.

- **TOCTOU – Falco**
  - User space pointers are dereferenced by:
    - **sys_exit tracepoint (kernel module, eBPF)**
    - **sys_exit ptrace (pdig)**
    - **Falco versions older than v0.31.1**
  - Check with vendors which commercial versions are affected.
  - **Issue reported on 12/06/2021 (CVE-2022-26316)**
  - **Mitigation implemented on 03/11/2022 (Advisory)**
  - For selected syscalls, compare `sys_enter` and `sys_exit` tracepoint data (Falco LKM, eBPF).
  - Compare `sys_enter` and `sys_exit` ptrace data (Falco pdig).

- **Evaluation of Important Syscalls in Falco Rules**
  | Syscall | Category | TOCTOU? | Exploitable by Blocking Condition | Exploitable by DC29 Attack |
  |---------|----------|---------|----------------------------------|-----------------------------|
  | connect | Network  | Y       | Y                                | Y                           |
  | sendto/sendmsg | Network | Y       | N                                | Y                           |
  | open(at) | File     | Y       | Y                                | Y                           |
  | execve  | File     | N       | N*                               | N*                          |
  | rename  | File     | Y       | Y                                | Y                           |
  | renameat(2) | File | Y       | Y                                | Y                           |
  | mkdir(at) | File     | Y       | Y                                | Y                           |
  | rmdir   | File     | Y       | Y                                | Y                           |
  | unlink(at) | File     | Y       | Y                                | Y                           |
  | symlink(at) | File | Y       | Y                                | Y                           |
  | chmod/fchmod(at) | File | Y       | Y                                | Y                           |
  | creat   | File     | Y       | Y                                | Y                           |

- **Exploit Requirements**
  - No additional privilege and capabilities.
  - Control the time to inject the delay.
  - Enough delay for pointer overwrite.
  - Reliable.

- **Exploit Strategies**
  - **Strategy 1 (DEFCON 29)**
    - Injected delay is small.
    - Requires Userfaultfd syscall for precise injection while pausing the kernel execution.
    - Seccomp can block Userfaultfd syscall (e.g., Docker default seccomp profile).
    - Falco’s mitigation was to detect Userfaultfd.
  - **Strategy 2**
    - Injected delay >> the syscall execution time.
    - No precise control is required.

- **Syscall Built-in Delay**
  - Attackers can trigger significant syscall delays by introducing:
    - Blocking conditions (attack `sys_exit`).
    - Seccomp rules (attack `sys_enter`).
  - Syscalls can get "blocked".

- **Categories of Affected Syscalls**
  - **Process**: fork, exec, exit, wait, ...
  - **File System**: open, openat, symlink, read, write, ...
  - **Networking**: connect, accept, socket, ...
  - **Security**: seccomp, keyctl, ...

- **Connect Syscall Execution Flow**
  - Bypassing Connect Syscall Tracing (Demo)

- **Blocking Syscalls (File Systems)**
  - All file system syscalls are affected: open, openat, creat, rename, renameat, renameat2, mkdir, mkdirat, rmdir, and others.
  - Other syscalls are also affected due to fetching files from file systems: execve, execveat, etc.

- **Filesystem in USErspace (FUSE)**
  - FUSE is a user space filesystem framework used for remote storage.
  - Examples:
    - **gcsfuse**: Developed by Google for GCS.
    - **s3fs-fuse**: Amazon S3.
    - **BlobFuse**: Developed by Azure for Blob storage.
    - **MezzFS**: Developed and deployed at Netflix.
  - Many others (sshfs, etc.).

- **Remote Storage FUSE - Architecture**
  - Bypassing Openat Tracing (Demo)

- **TOCTOU – sys_enter (Connect)**
  - **User Space**
  - **Kernel 5.7.0**
  - **syscall enter**
  - **syscall exit**
  - **Execution Flow**
  - **ptrace**
  - **Syscall Table (x86_64)**
    - 42 sys_connect
    - 43 sys_accept
    - 44 sys_sendto
  - **TOU by Linux Kernel**
  - **ptrace_report_syscall(regs, message)**
  - **__secure_computing(struct seccomp_data{regs…})**
  - **trace_sys_enter(regs, regs->orig_ax)**
  - **trace_sys_exit(regs, regs->ax)**
  - **ptrace_report_syscall(regs, message)**

- **Seccomp Introduction**
  - Seccomp is a kernel-level mechanism to restrict syscalls.
  - Modern sandboxes heavily rely on seccomp.
  - Developers can write rules to:
    - Allow/block certain syscalls.
    - Allow/block syscalls based on argument values.
  - These rules can be complex and take more time to compute.
  - First inserted rules are evaluated last.

- **Attacking Syscall Enter**
  - **Tracer starts App**
  - **Exploitation and Mitigations**
  - **Tracing location**
  - **TOCTOU Exploitation**
  - **Mitigations**
    - **ptrace @ sys_enter**
      - Seccomp filter insertion
      - Inspect seccomp filters already inserted when attaching to a running app
    - **tracepoint @ sys_enter**
      - Unreliable
      - N/A
    - **tracepoint @ sys_exit**
      - Blocking syscall (This talk)
      - Phantom attack v1 (DEFCON 29)
      - Compare tracepoint `sys_enter` and `sys_exit` args
    - **ptrace @ sys_exit**
      - Same as above
      - Deploy all mitigations for `ptrace @ sys_enter`
      - Compare the `sys_enter` and `sys_exit` syscall args
    - **kprobe @ kernel internal**
      - It depends
      - Read the kernel copy of the syscall args
    - **LSM (BPF-LSM)**
    - **Other interfaces**

- **Key Takeaways**
  1. Linux kernel tracing can be bypassed reliably.
     - Check your security tools.
  2. Mitigation is complex (workload type and kernel compatibility).
     - Check your security tools’ mitigation claims.
  3. Correlate different data sources.
  4. Know your normal.
     - Discussing further?
     - @Xiaofei_REX / rex.guo *NOSPAM* lacework DOT com
     - jzeng04 *NOSPAM* gmail DOT com
     - POC: https://github.com/rexguowork/phantom-attack

- **Acknowledgement**
  - Joel Schopp (Linux kernel / Security)
  - Lacework Labs
  - James Condon
  - Greg Foss
  - Chris Hall
  - Jared Stroud
  - Falco open source team
  - Leonardo Di Donato
  - Michael Clark
  - Michele Zuccala
  - Luca Guerra
  - John Dickson

This document provides a comprehensive overview of TOCTOU vulnerabilities, their exploitation, and potential mitigations in the context of Linux kernel tracing.