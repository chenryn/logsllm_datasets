normalized distance
(b) Normalized distance from
VP to RFC1812-compliant
router
0.0
0.2
0.4
0.6
0.8
1.0
router proportion
(a) Proportion of RFC1812-
compliant routers on a path
Figure 2: RFC1812-compliant routers
×109
VP 1
VP 2
5
4
3
2
1
t
e
s
f
f
o
q
e
s
p
c
t
0
0
50
100
150
200
250
300
time (sec)
Figure 3: Time evolution of the TCP sequence num-
ber oﬀset introduced by middleboxes
tively the same proportion for routers close to tracebox tar-
gets. However, the majority of routers sending back a Full
ICMP are located in the network core.
3.3 TCP Sequence Number Interference
The TCP sequence number is not supposed to be modiﬁed
by intermediate routers. Still, previous measurements [4]
showed that some middleboxes change sequence and acknowl-
edgement numbers in the processed TCP segments. As the
sequence number is within the ﬁrst 64 bits of the TCP
header, tracebox can detect its interference even though
there are none RFC1812-compliant routers.
We analyze the output of tracebox from the 72 VPs. Our
measurements reveal that two VPs always modify the TCP
sequence numbers. The position of the responsible mid-
dlebox is close to the VP, respectively the ﬁrst and third
hop. We suspect that the middlebox randomizes the TCP
sequence number to ﬁx a bug in old TCP/IP stacks where
the Initial Sequence Number (ISN) was predictable [17].
When used on a path that includes such a middlebox,
tracebox can provide additional information about the se-
quence number randomization. Depending on the type of
middlebox and the state it maintains, the randomization
function can diﬀer. To analyze it, we performed two exper-
iments. First, we generated SYN probes with the same des-
tination (IP address and port), the same sequence number,
and diﬀerent source ports. tracebox revealed that the mid-
dlebox modiﬁed all TCP sequence numbers as expected. A
closer look at the modiﬁed sequence numbers revealed that
the diﬀerence between the ISN of the probe and the random-
ized sequence number can be as small as 14510 and as large
as 4294858380 (which corresponds to a negative diﬀerence
of 108916 when the 32 bits sequence number space wrap).
Our measurements show that these diﬀerences appear to be
uniformly distributed for the diﬀerent source ports.
3Client
Middlebox
Server
Seq 42 "A"
Seq 43 "B"
Seq 44 "C"
Ack 43
SACK 1044-1044
Seq 1042 "A"
Seq 1044 "C"
Ack 1043
SACK 1044-1044
Figure 4: Example of invalid SACK blocks gener-
ated due to a middlebox.
For our second experiment, we used tracebox to verify
how the randomization evolves over time. For this, we sent
SYN probes using the same 5-tuple and diﬀerent ISN dur-
ing ﬁve minutes and evaluated the evolution of the TCP
sequence number modiﬁcations. Fig. 3 shows the oﬀset be-
tween the sent ISN and the randomized one for two diﬀerent
5-tuples. tracebox reveals that the two middleboxes seem
to change their randomization approximatively every 20 sec-
onds. This suggests stateful middleboxes.
As explained by Honda et al. [4], changing the TCP se-
quence numbers has an impact on the TCP protocol evolv-
ability. Unfortunately, it has also an impact on the utiliza-
tion of widely deployed TCP extensions. Consider the TCP
Selective Acknowledgement (SACK) option [18]. This TCP
option improves the ability of TCP to recover from losses.
One would expect that a middlebox changing the TCP se-
quence number would also update the sequence numbers re-
ported inside TCP options. This is unfortunately not true,
almost 18 years after the publication of the RFC [18]. We
used tracebox to open a TCP connection with the SACK
extension and immediately send SACK blocks. tracebox
reveals that the middlebox changes the sequence number
but does not modify the sequence number contained in the
SACK block.
Fig. 4 shows the behavior of such a middlebox on the
TCP sequence number and SACK blocks. In this scenario,
the middlebox increases the TCP sequence number by 1,000
bytes causing the client to receive a SACK block that corre-
sponds to a sequence number that it has not yet transmit-
ted. This SACK block is invalid, but the acknowledgement
is valid and correct. For the receiver, it may not be easy
to always detect that the SACK information is invalid. The
receiver may detect that the SACK blocks are out of the win-
dow, but the initial change may be small enough to carry
SACK blocks that are inside the window.
If we know that a SACK block is invalid, algorithms that
use SACK should understand that the SACK option does
not give more information than a simple acknowledgment.
In this view, such algorithms should have at least the same
performance as they would have if SACK was not used at all.
Unfortunately, this is not the case as the Linux TCP stack
does not consider duplicate acknowledgment when SACK
is enabled. When the oﬀset is small the SACK blocks are
potentially in-window.
In this case the Linux TCP stack
reacts correctly. However, when the SACK blocks are out-
of-window then the TCP stack has to wait for a complete
RTO instead of doing fast-retransmit. We performed a small
measurement in a controlled environment and observed up
to a 50% drop in performance with a large oﬀset [19].
3.4 TCP MSS Option Interference
Our third use case for tracebox concerns middleboxes
that modify the TCP MSS option. This TCP option is used
in the SYN and SYN+ACK segments to specify the largest
TCP segment that a host sending the option can process.
In an Internet that respects the end-to-end principle, this
option should never be modiﬁed.
In the current Internet,
this is unfortunately not the case. The main motivation for
changing the TCP MSS option on middleboxes is probably
to ﬁx some issues caused by other middleboxes with Path
MTU Discovery [20]. On top of changing the MSS option,
we also discovered middleboxes, in a couple of ISPs, that
add the option if it is missing.
Path MTU Discovery is a technique that allows a host to
dynamically discover the largest segment it can send without
causing IP fragmentation on each TCP connection. For that,
each host sends large segments inside packets with the Don’t
Fragment bit set. If a router needs to fragment the packet,
it returns an ICMP destination-unreachable (with code
“Packet fragmentation is required but the ’don’t fragment’
ﬂag is on”) back to the source and the source updates its
segment size. Unfortunately, some routers do not return
such ICMP messages [21] and some middleboxes (e.g., NAT
boxes and ﬁrewalls) do not correctly forward the received
ICMP message to the correct source. MSS clamping miti-
gates this problem by conﬁguring middleboxes to decrease
the size reported in the MSS option to a smaller MSS that
should not cause fragmentation.
We use our dataset to identify middleboxes that modify
the MSS option in SYN segments. Fig. 5(a) provides, for
each VP (the horizontal axis), the proportion of paths (the
vertical axis, in log-scale) where the MSS option has been
changed. We see that a few VPs encountered at least one
MSS modiﬁcation on nearly all paths while, for the vast ma-
jority of VPs, the modiﬁcation is observed in only a couple
of paths. We decided to remove those VPs from our data set
for further analyses, meaning that only 65 VPs were ﬁnally
considered for the use case.
Similarly to Fig. 5(a), Fig. 5(d) provides, for each target,
the proportion of paths aﬀected by an MSS modiﬁcation.
We see about ten targets that have a middlebox, probably
their ﬁrewall or load balancer, always changing the MSS
option. In the same fashion as the VPs that changed the
MSS option, they also removed the Multipath TCP, MD5
and Window Scale options.
Fig. 5(b) indicates where, in the network, the MSS option
is modiﬁed. In the fashion of Fig. 2(b), the distance from VP
has been normalized between 1 and 10, leading to the rise
of three network regions (i.e., close to VP, core, and close
to targets). As shown by Fig. 5(b), tracebox can detect
the MSS modiﬁcation very close to the source (2.7% of the
cases) while this detection mostly occurs in the network core
(52% of the cases).
Remind that this distance does not indicate precisely where
is actually located the middlebox responsible for the MSS
modiﬁcation. Rather, it gives the position of the router
that has returned a Full ICMP and, in this ICMP packet,
the quoted TCP segment revealed a modiﬁcation of the MSS
ﬁeld. Actually, the middlebox should be somewhere between
this position and the previous router (on that path) that has
also returned a Full ICMP (or the VP if it was the very ﬁrst
Full ICMP on that path).
Fig. 5(c) reﬁnes our location of MSS modiﬁcation by tak-
4100
10−1
10−2
10−3
n
o
i
t
r
o
p
o
r
p
t
e
g
r
a
t
10−4
0
10
20
30
40
50
60
70
80
vantage point
(a) VPs proportion modifying
MSS
0.30
0.25
close to VP
core
close to dst
f
d
p
0.20
0.15
0.10
0.05
0.00
0
2
4
6
8
10
normalized distance
(b) Location
1.0
0.8
0.6
f
d
c
0.4
0.2
0.0
0
1.0
n
o
i
t
r
o
p
o
r
p
P
V
0.8
0.6
0.4
0.2
0.0
100
101
102
target
103
(d) Targets proportion observ-
ing an MSS modiﬁcation
5
10
15
20
25
distance error
(c) Location error
Figure 5: MSS option modiﬁcation
ing this aspect (i.e., the middlebox is somewhere on the
path between the modiﬁcation detection and the previous
RFC1812-compliant router) into account. It gives thus an
estimation of middlebox location error. This error is sim-
ply obtained by subtracting the distance at which tracebox
reveals the modiﬁcation and the distance at which the pre-
vious RFC1812-compliant router was detected by tracebox
on that path. Obviously, lower the error, more accurate the
location given in Fig. 5(b). On Fig. 5(c), we see that in 61%
of the cases, the location estimation error is below (or equal
to) four hops. All errors above 13 hops, that represents the
length of around 60% of the paths, are uncommon (less than
1% each).
4. DISCUSSION
In Sec. 3, we showed that tracebox can provide a use-
ful insight on known middleboxes interference. We believe
that tracebox will also be very useful for network operators
who have to debug strange networking problems involving
middleboxes. While analyzing the data collected during our
measurement campaign (see Sec. 3.1), we identiﬁed several
strange middlebox behaviors we brieﬂy explain in this sec-
tion. We also discuss how tracebox can be used to reveal the
presence of proxies and network address translators (NATs).
4.1 Unexpected Interference