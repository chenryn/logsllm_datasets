CocoSketch: High-Performance Arbitrary Partial Key Measurement
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
(a) Throughput in OVS Platform
(b) Throughput in FPGA Platform
(c) Resource Usage in FPGA Platform
(d) Resource Usage in P4 Platform
Figure 15: Resource usage and throughput on different platforms
(a) F1 Score
(b) Throughput
Figure 16: Varying 𝑑’s in the basic CocoSketch.
(a) Basic CocoSketch
(b) Hardware-friendly CocoSketch
than basic CocoSketch. With 2MB memory, the hardware-friendly
CocoSketch is expected to achieve 150 Mpps, while the basic CocoS-
ketch only reaches around 30 Mpps with a significantly lower clock
frequency. This is because too many operations are performed in
one stage in the basic CocoSketch.
Resource usage in FPGA platform (Figure 15(c)): We show the
ratio of the resources used by algorithms to the total on-chip re-
sources, which is reported by Vivado [79]. In the figure, “Elastic”
indicates the resources used by Elastic Sketch when measuring 1
partial key, and “6*Elastic” indicates the resources used by Elastic
Sketch when measuring 6 partial keys. CocoSketch uses fewer re-
sources than that of Elastic Sketch. When measuring 6 partial keys,
the slice registers that the CocoSketch needs are around 45 times
smaller than Elastic Sketch. On FPGA platform, the bottleneck of
multiple Elastic Sketches lies in the Block RAM Tile. When mea-
suring 6 partial keys, the Block RAM Tile usage in Elastic Sketch is
34%, while CocoSketch only needs 5.8%.
Resource usage in P4 platform (Figure 15(d)): We show the ra-
tio of the resources used by algorithms to the total resources of 12
stages in the Tofino switch. Due to the logic of the algorithm, it is
hard to utilize all resources in every stage, i.e., we cannot achieve
100% utilization. In the figure, “4*Elastic” indicates the resources
used by Elastic Sketch when measuring 4 keys. We should note
that a Tofino switch data plane can implement at most 4 Elastic
sketches at the same time due to the resource constraint. We find
that CocoSketch uses fewer resources than Elastic Sketch. When
measuring 6 partial keys, CocoSketch only needs 6.25% Stateful
Figure 17: CDF of absolute error under different 𝑑 values.
ALUs and 6.25% Map RAM. On P4 platform, the bottleneck of de-
ploying multiple Elastic sketches lies in the Stateful ALUs. Elastic
Sketch needs 18.75% Stateful ALUs in measuring 1 partial key and
thus can measure up to 4 partial keys (75% Stateful ALUs and 30.56%
Map RAM) in the device.
7.5 Microbenchmark
In this section, we show the performance under different parameter
settings and different versions of CocoSketch.
Varying 𝑑 in the basic CocoSketch (Figures 16 -17(a)): We fix
the memory size at 500KB, and use the application of heavy hitters
detection to show the performance under different 𝑑. We see that
as we decrease the value of 𝑑 from the maximum (the total number
of buckets), the F1 Score decreases only marginally: 95.3% (𝑑 = 2)
and 96.9% (𝑑 = 3). On the other hand, the throughput at 𝑑 = 2
is 23.7 Mpps and at 𝑑 = 3 is 17.5 Mpps, whereas when 𝑑 is the
total number of buckets, the throughput drops to below 0.1 Mpps.
Note that CocoSketch becomes USS, when 𝑑 is the total number of
buckets, so the figures use “USS” to denote CocoSketch with the
maximum 𝑑 value.
Varying 𝑑 in the hardware-friendly CocoSketch (Figure 17(b)):
Since in hardware platforms different arrays run independently and
in parallel, the value of 𝑑 in hardware-friendly CocoSketch will
not affect the throughput of CocoSketch. To show the performance
difference, we fix the memory size at 500KB and show the CDF of
error under different 𝑑, i.e., for each distinct flow 𝑒, we calculate
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Y. Zhang et al.
8 RELATED WORK
Sketch-based telemetry: In addition to the efforts described in §2,
a number of techniques have been proposed to improve the fidelity,
generality, performance, etc., of sketches [30, 31, 33, 38, 59, 80]. For
example, UnivMon [33] introduces a general sketch to estimate
a range of traffic statistics. WavingSketch [38] extends the Count
Sketch [25] to find persistent items and super-spreaders. However,
these sketches still focus on single-key measurements. While these
sketch techniques are fundamentally limited in measuring arbitrary
partial keys, some of them may bring additional benefits to CocoS-
ketch, such as the sampling approach used in NitroSketch [31] can
further improve the throughput, and the merge technique used in
Elastic Sketch [30] can adapt to dynamic workloads with varying
bandwidths. We leave this for future work.
Telemetry resource management: To deploy multiple sketches
in a network, we need efficient resource management, and there are
some recent efforts in this space [40, 65, 81, 82]. For example, Trum-
pet [65] uses event triggers at end-hosts to detect some telemetry
events within high timeliness requirements. Their solutions address
a different set of telemetry events than arbitrary partial key queries,
which are orthogonal to our proposal. Furthermore, DREAM [81]
and SCREAM [40] dynamically allocate resources for different mea-
surement tasks to achieve a uniform accuracy target. Using their
solutions in the arbitrary partial key problem still requires a single
sketch per possible key, leading to the same resource inefficiency
described in §2.3.
Other measurement tasks over multiple flow keys: Recent
work BeauCoup [32] aims to support distinct counting queries over
multiple keys simultaneously. Essentially, they need to maintain a
separate data structure for each key, similar to single-key sketches.
Furthermore, they cannot recover the partial key information from
a full key. We leave the exploration of extending CocoSketch to
support distinct counting for future work.
9 CONCLUSIONS
Sketching algorithms are extensively studied in network measure-
ments. However, sketching over multiple flow keys is far from ideal
for serving as a viable solution for software and hardware network
platforms. In this paper, we present CocoSketch, a sketch-based
measurement approach that accurately answers arbitrary partial
key queries. Leveraging stochastic variance minimization, the data
plane algorithms in CocoSketch run at high speed regardless of
the number of partial keys measured, significantly outperforming
existing sketches in terms of CPU performance and memory ef-
ficiency. By further removing circular dependencies, CocoSketch
becomes hardware-friendly for programmable switches and FPGA.
Our experiments demonstrate the performance of CocoSketch by
comparing it with a variety of sketches under real-world traces.
We have open-sourced code of CocoSketch and other baseline algo-
rithms on GitHub [75].
Acknowledgments: We thank the anonymous reviewers and our
shepherd Kate Lin for their valuable suggestions. This work was
supported in part by National Natural Science Foundation of China
(NSFC) (No. U20A20179). Junchen Jiang is supported by a Google
Faculty Research Award. Tong Yang is the corresponding author.
Ethics: This work does not raise any ethical issues.
(a) Different versions
(b) Full-key sketch
Figure 18: (a) Different versions of CocoSketch, and (b) Co-
coSketch vs. full-key sketch baselines
its error | ˆ𝑓 (𝑒) − 𝑓 (𝑒)| and get the distribution of error. We find
that, with a larger 𝑑, CocoSketch has a small error with a higher
probability, while its worst case is worse than others. Specifically,
we find that the probability that the error is smaller than 70 for
𝑑 = 1 is 95.1%, while it is 96.5% for 𝑑 = 3. However, the worst 0.1%
error for 𝑑 = 1 is 1873, while it is 2358 for 𝑑 = 3. Such results match
the error bound derived in Theorem 3.
Different versions of CocoSketch (Figures 18(a)): We evaluate
the heavy hitter detection task to compare the F1 Score of three
versions of the CocoSketch: the basic CocoSketch used in software
platforms, the hardware-friendly CocoSketch used in FPGA (with-
out approximation on probability calculation), and the hardware-
friendly CocoSketch used in P4 (with approximation on probability
calculation). We find that the basic CocoSketch performs better
than the hardware-friendly CocoSketch, though the accuracy gap
between them is less than 10%. With 1MB memory, the hardware-
friendly CocoSketch also achieves F1 Score higher than 90%. We
also observe that the accuracy gap between the hardware imple-
mentations in FPGA and P4 is smaller than 1%, which indicates that
our approximate division technique used in the P4 implementation
(§6.2) has negligible impact on the accuracy.
Comparison with full-key sketch (Figure 18(b)): To compare
CocoSketch to different strawman solutions shown in §2.3, we
measure two keys, SrcIP (full key) and its 24-bit prefix (partial
key), and show their ARE respectively. We fix the total memory at
6MB and calculate the ARE based on all distinct flows. CocoSketch
achieves high accuracy on the full key and partial keys, where
the ARE is smaller than 0.02. For “2*Elastic” (where we build one
Elastic Sketch for each key), the ARE of both full key and partial
key are around 0.3. For “Lossy” (where we recover the partial key
only based on the recorded flows in the heavy part), the ARE of
full key is around 0.14, while the ARE of partial key is around 0.94.
This is because the heavy part of single-key sketch loses too much
information to recover the partial key. For “Full” (where we recover
the partial key by querying all full keys in the corresponding set),
the ARE of full key is around 0.14, while the ARE of partial key
larger than 1. This is because, in the single-key sketches, the error
increases as they aggregate many full keys. Therefore, although
“Lossy” and “Full” achieve desirable accuracy on the full key, neither
achieves high accuracy on the arbitrary partial keys.
CocoSketch: High-Performance Arbitrary Partial Key Measurement
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
REFERENCES
[1] Theophilus Benson, Ashok Anand, Aditya Akella, and Ming Zhang. Microte: fine
[3] Anja Feldmann, Albert Greenberg, and et al. Deriving traffic demands for opera-
grained traffic engineering for data centers. In Co-NEXT ’11. ACM, 2011.
[2] Da Yu, Yibo Zhu, Behnaz Arzani, Rodrigo Fonseca, Tianrong Zhang, Karl Deng,
and Lihua Yuan. dshark: A general, easy to program and scalable framework for
analyzing in-network packet traces. In NSDI 2019. USENIX Association, 2019.
tional ip networks: Methodology and experience. In ACM SIGCOMM, 2000.
[4] Chuanxiong Guo, Lihua Yuan, Dong Xiang, Yingnong Dang, Ray Huang, Dave
Maltz, Zhaoyi Liu, Vin Wang, Bin Pang, Hua Chen, et al. Pingmesh: A large-scale
system for data center network latency measurement and analysis.
In ACM
SIGCOMM Computer Communication Review. ACM, 2015.
[5] Yilong Geng, Shiyu Liu, Zi Yin, Ashish Naik, Balaji Prabhakar, Mendel Rosenblum,
and Amin Vahdat. Simon: A simple and scalable method for sensing, inference
and measurement in data center networks. In NSDI 2019, pages 549–564, 2019.
[6] Sam Burnett, Lily Chen, Douglas A Creager, Misha Efimov, Ilya Grigorik, Ben
Jones, Harsha V Madhyastha, Pavlos Papageorge, Brian Rogan, Charles Stahl,
et al. Network error logging: Client-side measurement of end-to-end web service
reliability. In NSDI 2020, pages 985–998, 2020.
[7] Theophilus Benson, Aditya Akella, and David A Maltz. Network traffic charac-
teristics of data centers in the wild. In Proceedings of the 10th ACM SIGCOMM
conference on Internet measurement, pages 267–280, 2010.
[8] Andrew R. Curtis, Jeffrey C. Mogul, Jean Tourrilhes, Praveen Yalagandula, Puneet
Sharma, and Sujata Banerjee. Devoflow: scaling flow management for high-
performance networks. In ACM SIGCOMM 2011. ACM, 2011.
[9] Arpit Gupta, Rob Harrison, Marco Canini, Nick Feamster, Jennifer Rexford, and
Walter Willinger. Sonata: query-driven streaming network telemetry. In SIG-
COMM 2018. ACM, 2018.
[10] Vyas Sekar, Michael K. Reiter, Walter Willinger, Hui Zhang, Ramana Rao Kom-
pella, and David G. Andersen. csamp: A system for network-wide flow monitoring.
In NSDI 2008. USENIX Association, 2008.
[11] Yu Zhou, Chen Sun, Hongqiang Harry Liu, Rui Miao, Shi Bai, Bo Li, Zhilong
Zheng, Lingjun Zhu, Zhen Shen, Yongqing Xi, et al. Flow event telemetry on
programmable data plane. In Proceedings of the Annual conference of the ACM
Special Interest Group on Data Communication on the applications, technologies,
architectures, and protocols for computer communication, 2020.
[12] Yibo Zhu, Nanxi Kang, Jiaxin Cao, Albert Greenberg, Guohan Lu, Ratul Mahajan,
Dave Maltz, Lihua Yuan, Ming Zhang, Ben Y Zhao, et al. Packet-level telemetry in
large datacenter networks. In Proceedings of the 2015 ACM Conference on Special
Interest Group on Data Communication, 2015.
[13] Rui Miao, Hongyi Zeng, Changhoon Kim, Jeongkeun Lee, and Minlan Yu. Silkroad:
Making stateful layer-4 load balancing fast and cheap using switching asics. In
SIGCOMM 2017. ACM, 2017.
[14] Zaoxing Liu, Zhihao Bai, Zhenming Liu, Xiaozhou Li, Changhoon Kim, Vladimir
Braverman, Xin Jin, and Ion Stoica. Distcache: Provable load balancing for large-
scale storage systems with distributed caching. In 17th USENIX Conference on
File and Storage Technologies, FAST 2019. USENIX Association, 2019.
[15] Mohammad Alizadeh, Tom Edsall, Sarang Dharmapurikar, Ramanan
Vaidyanathan, Kevin Chu, Andy Fingerhut, Vinh The Lam, Francis Ma-
tus, Rong Pan, Navindra Yadav, et al. Conga: Distributed congestion-aware
load balancing for datacenters. In Proceedings of the 2014 ACM conference on
SIGCOMM, pages 503–514, 2014.
[16] Erico Vanini, Rong Pan, Mohammad Alizadeh, Parvin Taheri, and Tom Edsall.
Let it flow: Resilient asymmetric load balancing with flowlet switching. In NSDI
17, 2017.
[17] Naveen Kr. Sharma, Ming Liu, Kishore Atreya, and Arvind Krishnamurthy. Ap-
proximating fair queueing on reconfigurable switches. In NSDI 2018. USENIX
Association, 2018.
[18] Yuliang Li, Rui Miao, Hongqiang Harry Liu, Yan Zhuang, Fei Feng, Lingbo Tang,
Zheng Cao, Ming Zhang, Frank Kelly, Mohammad Alizadeh, et al. Hpcc: high
precision congestion control. In Proceedings of the ACM Special Interest Group on
Data Communication, pages 44–58. 2019.
[19] William M Mellette, Rajdeep Das, Yibo Guo, Rob McGuinness, Alex C Snoeren,
and George Porter. Expanding across time to deliver bandwidth efficiency and
low latency. In NSDI 20, 2020.
[20] Xin Li, Fang Bian, Mark Crovella, Christophe Diot, Ramesh Govindan, Gianluca
Iannaccone, and Anukool Lakhina. Detection and identification of network
anomalies using sketch subspaces. In IMC 2006. ACM, 2006.
[21] Yin Zhang, Sumeet Singh, Subhabrata Sen, Nick G. Duffield, and Carsten Lund.
Online identification of hierarchical heavy hitters: algorithms, evaluation, and
applications. In IMC 2004. ACM, 2004.
network-wide anomalies in traffic flows. In ACM IMC, 2004.
[23] Ahmed Metwally, Divyakant Agrawal, and Amr El Abbadi. Efficient computation
of frequent and top-k elements in data streams. In Thomas Eiter and Leonid