提供给客户的外部API展现了全尺寸图片（本该提供指向较小的缩略图链接）。所
以你最好让上传功能的代码生成缩略图。该怎么办？简单的方法就是往代码里再塞
一点，直接就在土传控制器里执行缩略图生成，但是等等...·如果每次照片上传你
这样做。而且网站用户并不想要等待图片上传处理脚本，直到获得上传成功的确认
信息。这意味着你需要一个更聪明的解决方法，它允许你并行地运行任务，同时需
要在不同于服务请求的服务器上运行任务。
你发现调整图片大小、奖励用户积分以及通知用户朋友其实是三个独立的任务。
这些任务之间没有相互依赖关系。它们不需要等待对方的结果才能继续运行。这意
味着你可以重构代码，同时调整图片大小和其他事情。如果你完成了这样的设计，
那你可以轻松应对新的需求了。需要记录每次图片上传？没问题，你只要添加一个
新的工作者来处理日志就可以了。
这听起来不错，如梦境般；不过所有这些并行化的东西看起来难以实现。你需
要做多少工作来完成消息多播？不会太多；只需输入fanout交换器即可。
我们之前讲过交换器类型。fanout类型交换器会将消息的拷贝发送给绑定的队
列，就是这么简单。利用它就可以实现照片上传模块功能了。每当用户上传照片时，
你不是立即处理所有工作，而是会发布一条照片的元信息，然后让异步工作者来并
行处理剩下的工作。RabbitMQ会确保每个消费者都会得到一份消息的拷贝。处理
消息的责任就落在了工作者的身上。
消息会包含以下关于照片的元信息：照片的图片ID、用户ID，以及用于定位
图片在文件系统的路径。你将使用JSON作为数据交换的格式。将来如果你需要为
不同的任务支持多种语言的话，JSON会让工作变得简单。消息内容看起来像这样：
'image_id': 123456,
---
## Page 108
86
第4章解决Rabbit相关问题：编码与模式
user_id':6543,
'image_path':'/path/to/pic.jpg'
如图4.4所示，你声明了一个upload-pictures交换器，并绑定了三个队列：
resize-picture、add-points 和 notify-friends。按照这个设计方案，你会
发现增加一个新类型的任务，譬如日志记录，就只需要定义新的队列并将其绑定到
upload-pictures交换器即可。作为开发者，你关注的焦点在于如何实现每个工
作者以及消息发布的逻辑；RabbitMQ会负责剩下的部分。
图片上传
新的消息
image_id:123456
image_path:pic.jpg
user_id:123456
fanout
upload-pictures
交换器
resize-picture
notify-friends
add-points
logs
稍后添加
稍后添加
图4.4上传图片
那么，让我们从添加发布者逻辑到照片上传模块开始吧，如下所示。这里你忽
略了从POST请求接收图片，以及把它移动到文件系统的逻辑。
清单4.7上传图片发布者
dude>
$channel->exchange_declare('upload-pictures'
1声明交
'fanout'，false,true,false);
$image_id,
②将图片元
user_id'=> $user_id,
数据编码
'image_path'=>$image_path
为JSON
)）;
---
## Page 109
4.2发后即忘模型
87
$msg =new AMQPMessage(Smetadata,
③实例化AMQP
'delivery_mode′ => 2)）;
 $channel->basic_publish($msg, 'upload-pictures') ;
？>
让我们看看你做了什么。这里没有关于获取AMQP信道的代码，这是因为
我们在之前的例子中已经讲过了。在i处，你声明了upload-pictures交换
器，fanout类型并且durable为true。然后在②处你创建了消息元数据，并编码为
JSON格式。$image_id、_$user_id和$image_path在上传过程中进行了初始化。
在③处你创建了新的消息实例，并将deliver_mode设置为2以使消息持久化。最
终在4处，你将消息发布到upload-pictures交换器。你不需要提供路由键，因
为消息会被广播到所有绑定的队列。
下一步，让我们创建消费者，在每次上传后为用户添加积分。请参考add-
points-consumer·php以获取完整代码。下列代码中省略了部分内容，因为我们
之前已经讨论过，臂如包含AMQP库或者实例化连接和信道。
清单4.8添加积分消费者
dudi>
$channel->exchange_declare('upload-pictures',
1声明交
'fanout'，false,true,false);
queue_declare('add-points',
队列>
false,true,false,false);
3绑定
队列
$consumer = function($msg){};
部分代码
4省略了
$channel->basic_consume($queue,
$consumer_tag,
false,
false,
false,
开始消
false,
费消息
$consumer);
？>
这段代码非常直白。在1处你声明了topic类型交换器。然后在②处你创建了
add-points队列，RabbitMQ会将消息投递到这里。在③处你使用空的路由键将
队列绑定到交换器上。在4处，你暂时忽略了回调函数代码。在5处你通过发送
---
## Page 110
88
第4章解决Rabbit相关问题：编码与模式
basic_consume命令来完成消费者的准备工作。同样地，你省略了等待循环以及
信道和连接的清除代码。以下代码展示了回调函数。
清单4.9添加积分回调函数
dude>
1为用户添加
积分函数
function add_points_to_user($user_id){
echo sprintf("Adding points to user:%s\n",$user_id);
消费者回2
了
3停止消
费消息
if($msg->body=='quit'）{
$msg->delivery_info['channel']->
basic_cancel($msg->delivery_info['consumer_tag']);
解码4
JSON格
式元数据
$meta =json_decode($msg->body,true);
5处理
add_points_to_user($meta['user_id']);
$msg->delivery_info['channel']->
确认
basic_ack($msg->delivery_info['delivery_tag']);
消息
？>
清单4.9显示的是真实处理消息的代码。在1处你添加了哑函数，简单地将给
用户的积分打印出来。在现实世界中，应用程序应该包含将用户积分添加到Redis
数据库的逻辑。然后在2处你定义了消费者回调函数。3处的这段代码有点复杂，
它是用来停止消费消息的钩子函数。如果消息体等同于guit，那么就停止消费者。
这段简单的代码确保了信道和连接以干净的方式关闭。之后在4处你将消息体传人
json_decode函数以获得元数据。你将方法的第二个参数设置为true以确保PHP
会将JSON对象解码为关联数组。在5处你调用了add_points_to_user函数，
传人了从解码的消息中获得的user_id。
让我们测试一下该实现代码。你将发布者代码复制过来并修改创建消息的逻辑，
就得到了一份简单的测试脚本。在这种情况下，你从命令行获取三个参数：image
ID、userID和imagepath。你将它们进行编码之后，通过RabbitMQ发送给之前创
建的消费者。我们不会解释下列清单，因为这和清单4.7看起来是一样的。
---
## Page 111
4.2发后即忘模型
89
清单4.10上传图片测试
dude>
require_once('../lib/php-amqplib/amqp.inc');
require_once('../config/config.php');
$conn = new AMQPConnection(HOST,PORT,USER,PASS，VHOST);
$channel = $conn->channel();
$channel->exchange_declare('upload-pictures',
'fanout'，false,true,false);
$metadata = json_encode(array(
'image_id' => $argv[1],
'user_id'=> $argv[2],
image_path'=> $argv[3]
)）；
$msg = new AMQPMessage($metadata,array(
'content_type'=>'application/json',
'delivery_mode′=>2));
$channel->basic_publish($msg,'upload-pictures');
$channel->close() ;
$conn->close();
？>
将这段代码保存在fanout-publisher.php文件中，并打开两个终端窗口。
在第一个窗口，运行add-points-consumer.php脚本：
$php add-points-consumer.php
在另一个窗口，执行发布者程序，传入一些随机参数以模拟请求：
$phpfanout-publisher.php12/path/to/pic.jpg
如果一切正常，你可以切回第一个终端并看到以下消息：
Adding points to user: 2
到目前为止，没什么印象深刻的。让我们添加另一个消费者，看看fanout交换
器和实战并行处理。将下列清单中的代码放人resize-picture-consumer·php
文件中。
清单4.11图片大小调整消费者
dude>
require_once('../lib/php-amqplib/amqp.inc');
require_once('../config/config.php');
---
## Page 112
90
第4章解决Rabbit相关问题：编码与模式
$conn = new AMQPConnection(HOST,PORT, USER, PASS, VHOST);
$channel = $conn->channel();
$channel->exchange_declare('upload-pictures',
'fanout',false,true,false);
$channel->queue_declare('resize-picture',
1声明图片调
false,true,false,false);
$channel->queue_bind('resize-picture','upload-pictures');
body =='quit'）{
$msg->delivery_info['channel']->
basic_cancel($msg->delivery_info['consumer_tag'1);
}
$meta = json_decode($msg->body, true) ;
③调整图
片大小
resize_picture($meta['image_id'],$meta['image_path']);
$msg->delivery_info['channel']->
basic_ack($msg->delivery_info['delivery_tag']);
4图片调
整函数
function resize_picture($image_id, $image_path){
echo sprintf("Resizing picture:&s &s\n",
$image_id,$image_path);
$channel->basic_consume($queue,
$consumer_tag,
false,
false,
false,
false,
$consumer);
while(count($channel->callbacks)){
$channel->wait();
{
$channel->close();
$conn->close();
？>
清单4.11的代码基本上和清单4.8很类似。有趣的地方在于0和2处，你创建
了resize-picture队列，并绑定到了upload-picture 交换器上。你会发现这
里和前一个示例使用了同一个交换器。在AMQP中，一直都是把消息发布到一个交
换器上，然后根据绑定，路由到一个或者多个队列中去（或者一个都去不了）。
代码接下来很直截了当；在消费者回调函数中，你将从元数据获得的image_
id和image_path传人resize_picture③的函数调用中。最终，resize_
---
## Page 113
4.2发后即忘模型