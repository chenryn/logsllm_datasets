·首先想到的是暴力解法，用两层环，分别枚举每个连续的子区间，区间内用一个元素记录区间内
最小值。每当区间起点发生变化的时候，最终结果都加上上次遍历区间找出的最小值。当整个数组
都扫完一遍以后，最终结果模上10^9+7。
·上面暴力解法时间复杂度特别大，因为某个区间的最小值可能是很多区间的最小值，但是我们暴力
枚举所有区间，导致要遍历的区间特别多。优化点就在如何减少遍历的区间。第二种思路是用2
个单调栈。想得到思路是res=sum（A[i]*f（i))，其中f(i)是子区间的数，A[i]是这个子区
间内的最小值。为了得到f(i)我们需要找到left[]和right[i]，left[i]是A[i]左边严格大于A的区间
长度。right[]是A[i]右边非严格大于(>=关系)的区间长度。left[i]+1等于以A[i]结尾的子数组数
目，A[i]是唯一的最小值；right[i]+1等于以A[i]开始的子数组数目，A[i]是第一个最小值。于是
有f（i）=（1eft[i]+1）*（right[i]+1）。例如对于[3,1,4,2,5,3,3,1] 中的*2"，我们找到
的串就为[4,2,5,3,3]，2左边有1个数比2大且相邻，2右边有3个数比2大且相邻，所以2作为
---
## Page 873
最小值的串有2*4=8种。用排列组合的思维也能分析出来，2的左边可以拿0，1，..m个，
总共（m+1）种，同理右边可以拿0，1，……n个，总共（n+1）种，所以总共（m+1)(n+1）种。
只要计算出了 f(i)，这个题目就好办了。以[3,1,2,4]为例，left[i] +1=[1,2,1,1]，right[i] +1 =
[1,3,2,1]，对应i位的乘积是f[]=[1*1，2*3，1*2，1*1]=[1，6，2，1]，最终要求的最小
值的总和 reS = 3 * 1 + 1 * 6 + 2 * 2 + 4 * 1 = 17。
·看到这种mod1e9+7的题目，首先要想到的就是dp。最终的优化解即是利用DP+单调栈。单调
栈维护数组中的值逐渐递增的对应下标序列。定义dp[1i+1]代表以A[]结尾的子区间内最小值
的总和。状态转移方程是dp[i+1]=dp[prev+1]+（i-prev）²A[i]，其中prev是
比A[i]小的前一个数，由于我们维护了一个单调栈，所以prev就是栈顶元素。（i-prev)*A[①]代
表在还没有出现prev之前，这些区间内都是A[i]最小，那么这些区间有i-prev个，所以最小值
总和应该是(i-prev)*A[i]。再加上 dp[prev +1]就是dp[i+1]的最小值总和了。以[3,1,2, 4,3]
为例，当i=4,所有以A[4]为结尾的子区间有：
[3]
[4, 3]
[2, 4, 3]
[1, 2, 4, 3]
[3, 1, 2, 4, 3]
]9=
比 3 小的前—个数,所以 dp[i + 1] = dp[stack.peek( + 1] = dp[2 + 1] = dp[3] = dp[2 + 1]。即需
要求i=2的时候dp[i+1]的值。继续递推，比2小的前—个值是1，A[1]=1。dp[3]=dp[1+1]
+ (2 - 1) *A[2]=dp[2] + 2。dp[2] = dp[1 +1], 当i =1 的时候，prev=-1，即没有人比 A[1] 更小
了, 所以 dp[2] = dp[1 + 1] = dp[-1 + 1] +(1 - (-1) * A[1] = 0 + 2 * 1 = 2。 迭代回去, dp[3] =
= 9 +=[ +1]dp  °=[]dp =[1 +]dp =[ +(dxes]dp =+= +[]dp
10。
·与这一题相似的解题思路的题目有第828题，第891题。
代码
package leetcode
//解法一最快的解是DP+单调栈
func sumSubarrayMins(A []int) int {
stack, dp, res, mod := []int{}， make([]int, len(A)+l), 0, 1000000007
stack = append(stack, -1)
for i := 0; i  A[i] {
count += leftStack[1en(leftstack)-1] .count
leftstack = leftstack[:1en(leftstack)-1]
1eftstack = append(leftstack, &pair{val: A[i], count: count})
1efts[i] = count
3
for i := n - 1; i >= 0; i--{
count := 1
for len(rightstack) != 0 && rightstack[len(rightStack)-1].val >= A[i] {
count += rightStack[len(rightStack)-1].count
rightStack = rightStack[:len(rightStack) -1]
rightStack = append(rightStack, &pair{val: A[i], count: count})
rights[i] = count
for i := 0; i = A[j] {
stack = stack[:1en(stack)-1]
stack = append(stack, A[j])
---
## Page 875
res += stack [1en(stack) -1]
return res % mod
911.OnlineElection
题目
In an election, the i -th vote was cast for persons [i] at time times [i] 
will return the number of the person that was leading the election at time t.
aa so a a e yo as a u anb no semn suno m  a e ss so
(among tied candidates) wins.
Example 1:
Input: ["TopvotedCandidate","q","q","q","q","q","q"], [[[o,1,1,0,0,1,0] ,
[0,5,10,15,20,25,30]], [3], [12], [25], [15], [24], [8]]
Output: [nu11,0,1,1,0,0,1]
Exp1anation:
At time 3, the votes are [o], and 0 is leading.
At time 12, the votes are [0,1,1], and 1 is 1eading.
At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the
most recent vote.)
This continues for 3 more queries at time 15, 24, and 8.
Note:
1. 1 = times [o]
题目大意
在选举中，第i张票是在时间为times[]时投给persons[i]的。
现在，我们想要实现下面的查询函数：TopVotedCandidate.q(intt)将返回在t时刻主导选举的候选人
的编号。
在t时刻投出的选票也将被计入我们的查询之中。在平局的情况下，最近获得投票的候选人将会获胜，
---
## Page 876
提示：
1. 1 = times[0]。
解题思路
·给出一个2个数组，分别代表第1人在第t时刻获得的票数。需要实现一个查询功能的函数，
查询在任意t时刻，输出谁的选票领先。
·persons[]数组里面装的是获得选票人的编号，times[]数组里面对应的是每个选票的时
刻。times[]数组默认是有序的，从小到大排列。先计算出每个时刻哪个人选票领先，放在一个
数组中，实现查询函数的时候，只需要先对times[]数组二分搜索，找到比查询时间t小的最
大时刻1，再在选票领先的数组里面输出对应时刻领先的人的编号即可。
代码
package leetcode
import（
"sort"
// Topvotedcandidate define
type Topvotedcandidate struct {
persons []int
times
[]int
// Constructor91l define
func Constructor91l(persons []int, times []int) TopvotedCandidate {
leaders, votes := make([]int,len(persons)), make([]int,len(persons))
leader := persons[0]
for i := 0;i = votes[leader]{
1eader = p
leaders[i] = leader
return TopvotedCandidate{persons: 1eaders, times: times}
---
## Page 877
// Q define
func (tvc *TopvotedCandidate) Q(t int) int{
1:= sort.Search(len(tvc.times),func(p int) bool { return tvc.times[p]> t
})
return tvc.persons[i-1]
/★
       e  
obj := Constructor(persons,times）;
* param_1 := obj-Q(t);
914.XofaKindinaDeckofCards
题目
In a deck of cards, each card has an integer written on it.
Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck
into 1 or more groups of cards, where:
● Each group has exactly × cards.
● All the cards in each group have the same integer.
Example 1:
Input: deck = [1,2,3,4,4,3,2,1]
output: true
Explanation: Possib1e partition [1,1], [2,2],[3,3], [4,4] .
Example 2:
Input: deck = [1,1,1,2,2,2,3,3]
Output: false“
Explanation: No possible partition.
Example 3:
Input: deck = [1]
output: false
Explanation: No possible partition.
Example 4:
---
## Page 878
Input: deck = [1,1]
output: true
Explanation: Possible partition [1,1] .
Example 5:
Input: deck = [1,1,2,2,2,2]
output: true
Explanation: Possib1e partition [1,1], [2,2],[2,2] 
Constraints:
●1 =2时返回true。
解题思路
·给定一副牌，要求选出数字X，使得每组都有×张牌，每组牌的数字都相同。当X≥2的时候，输
出 true。
·通过分析题目，我们可以知道，只有当X为所有count的约数，即所有count的最大公约数的约
数时，才存在可能的分组。因此我们只要求出所有count的最大公约数g，判断g是否大于等于2
即可，如果大于等于2，则满足条件，否则不满足。
·时间复杂度：O（NlogC)，其中N是卡牌的个数，C是数组deck中数的范围，在本题中C的值为
10000。求两个数最大公约数的复杂度是O（logC)，需要求最多N-1次。空间复杂度：O（N+C)
或O(N)。
代码
package leetcode
func hasGroupsSizex(deck []int) bool{
if 1en(deck)= 2
func gcd(a,b int) int {
if a == 0 {
return b
return gcd(b%a,a)
918.MaximumSumCircularSubarray
题目
Given a circular array C of integers represented by A, find the maximum possible sum of a non-
empty subarray of C.
ee a o uuaq a o sauo ee a o pa a suea  yn e aa
(Formally, C[1] = A[i] when 0 =
0.)
Also, a subarray may only include each element of the fixed buffer A at most once. (Formally, for
a subarray C[i], c[i+1], ..., C[j], there does not exist i =0时
C[i+A.length] = C[i]]
此外，子数组最多只能包含固定缓冲区A中的每个元素一次。（形式上，对于子数组C[]，C[i+1]，…
C[j],不存在 1 <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length)
提示：
●-30000 <= A[] <= 30000
●1 <= A.length <= 30000
解题思路
·给出一个环形数组，要求出这个环形数组中的连续子数组的最大和。
·拿到这题最先想到的思路是把这个数组再拼接一个，在这两个数组中查找连续子数组的最大和。这
种做法是错误的，例如在[5，-3，5]这个数组中会得出7的结果，但是实际结果是10。那么这
题怎么做呢？仔细分析可以得到，环形数组的最大连续子段和有两种情况，第一种情况是这个连续
子段就出现在数组中，不存在循环衔接的情况。针对这种情况就比较简单，用kadane算法（也是
动态规划的思想），o（n）的时间复杂度就可以求出结果。第二种情况是这个连续的子段出现在跨
数组的情况，即会出现首尾相连的情况。要想找到这样一个连续子段，可以反向考虑。想找到跨段
的连续子段，那么这个数组剩下的这一段就是不跨段的连续子段。想要跨段的子段和最大，那么剩
下的这段连续子段和最小。如果能找到这个数组的每个元素取相反数组成的数组中的最大连续子段
和，那么反过来就能找到原数组的连续子段和最小。举个例子：[1，2，-3，-4，5]，取它的每
个元素的相反数[-1，-2，3，4，-5]，构造的数组中最大连续子段和是3+4=7，由于取了
---
## Page 881
相反数，所以可以得到原数组中最小连续子段和是-7。所以跨段的最大连续子段和就是剩下的
那段[1,2,5]。
·还有一些边界的情况，例如，[1，2，-2，-3，5，5，-4，6]和[1，2，-2，-3，5，5，-4，
8]，所以还需要比较一下情况一和情况二的值，它们两者最大值才是最终环形数组的连续子数组
的最大和。
代码
package leetcode
import "math"
func maxSubarraySumCircular(A []int) int {
n, sum := 1en(A), 0
for _, v := range A {
sum += V
kad := kadane(A)
for i := 0; i < n; i++ {
A[1] = -A[i]
negativeMax := kadane(A)
if sum+negativeMax <= 0{
return kad
return max(kad, sum+negativeMax)
func kadane(a []int) int {
n, MaxEndingHere, maxSoFar := len(a), a[O], math.MinInt32
for i := l; i < n; i++ {
MaxEndingHere = max(a[i] , MaxEndingHere+a[i]]
maxSoFar = max(MaxEndingHere, maxSoFar)
return maxSoFar
920.NumberofMusicPlaylists
题目
Your music player contains N different songs and she wants to listen to L (not necessarily
dlifferent) songs during your trip. You create a playlist so that:
● Every song is played at least once
---
## Page 882
paed uaaq aey suos auo x j Ajuo ujee paeid aq Ajuo ue guos  ●
Return the number of possible playlists. As the answer can be very large, return it modulo
10A9 +7.
Example 1:
Input: N = 3, L = 3, K = 1
Output:6
Explanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3],
[2, 3, 1], [3, 1, 2], [3, 2, 1]
Example 2:
Input: N = 2, L = 3, K = 0
Output: 6
Explanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1],
[2, 2, 1], [2, 1, 2], [1, 2, 2]
Example 3:
Input: N = 2, L = 3, K = 1
Output: 2
Explanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]
Note:
1. 0 <= K < N <= L <= 100
题目大意
你的音乐播放器里有N首不同的歌，在旅途中，你的旅伴想要听L首歌（不一定不同，即，允许歌曲重
复）。请你为她按如下规则创建一个播放列表：
·每首歌至少播放一次。
·一首歌只有在其他K首歌播放完之后才能再次播放。
返回可以满足要求的播放列表的数量。由于答案可能非常大，请返回它模10^9+7的结果。
提示：
● 0 <= K < N <= L <= 100
解题思路
·简化抽象一下题意，给N个数，要求从这N个数里面组成一个长度为L的序列，并且相同元素的
间隔不能小于K个数。问总共有多少组组成方法。
·一拿到题，会觉得这一题是三维DP，因为存在3个变量，但是实际考虑一下，可以降一维。我们
---
## Page 883
先不考虑K的限制，只考虑N和L定义dp[i][j]代表播放列表里面有首歌，其中包含j
首不同的歌曲，那么题目要求的最终解存在dp[L][N]中。考虑dp[i][j]的递归公式，音乐列