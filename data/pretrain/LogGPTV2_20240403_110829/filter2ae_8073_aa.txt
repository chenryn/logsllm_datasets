# 前言
对这段时间学习的 `linux` 内核中的一些简单的利用技术做一个记录，如有差错，请见谅。
相关的文件
    https://gitee.com/hac425/kernel_ctf
相关引用已在文中进行了标注，如有遗漏，请提醒。
# 环境搭建
对于 `ctf` 中的 `pwn` 一般都是给一个 `linux` 内核文件 和一个 `busybox` 文件系统，然后用 `qemu`
启动起来。而且我觉得用 `qemu` 调试时 `gdb` 的反应比较快，也没有一些奇奇怪怪的问题。所以推荐用 `qemu` 来调，如果是真实漏洞那
`vmware` 双机调试肯定是逃不掉的 (:_。
## 编译内核
首先去 `linux` 内核的官网下载 内核源代码
    https://mirrors.edge.kernel.org/pub/linux/kernel/
> 我用的 `ubuntu 16.04` 来编译内核，默认的 `gcc` 比较新，所以编译了 `4.4.x` 版本，免得换 `gcc`
安装好一些编译需要的库
    apt-get install libncurses5-dev build-essential kernel-package
进入内核源代码目录
    make menuconfig
配置一下编译参数，注意就是修改下面列出的一些选项 （没有的选项就不用管了
> 由于我们需要使用kgdb调试内核，注意下面这几项一定要配置好：  
>  KernelHacking -->
>
>   * 选中Compile the kernel with debug info
>   * 选中Compile the kernel with frame pointers
>   * 选中KGDB:kernel debugging with remote gdb，其下的全部都选中。
>
>
> Processor type and features-->
>
>   * 去掉Paravirtualized guest support
>
>
> KernelHacking-->
>
>   * 去掉Write protect kernel read-only data structures（否则不能用软件断点）
>
**参考**
[Linux内核调试](https://xz.aliyun.com/t/2024)
## 编译 busybox && 构建文件系统
### 编译 busybox
启动内核还需要一个简单的文件系统和一些命令，可以使用 `busybox` 来构建
首先下载，编译 `busybox`
    cd ..
    wget https://busybox.net/downloads/busybox-1.19.4.tar.bz2 # 建议改成最新的 busybox 
    tar -jxvf busybox-1.19.4.tar.bz2
    cd busybox-1.19.4
    make menuconfig  
    make install
### 编译的一些配置
> make menuconfig 设置
>
> Busybox Settings -> Build Options -> Build Busybox as a static binary 编译成
> 静态文件
>
> 关闭下面两个选项
>
> Linux System Utilities -> [] Support mounting NFS file system 网络文件系统  
>  Networking Utilities -> [] inetd (Internet超级服务器)
构建文件系统
编译完,、`make install` 后， 在 `busybox` 源代码的根目录下会有一个 `_install` 目录下会存放好编译后的文件。
然后配置一下
    cd _install
    mkdir proc sys dev etc etc/init.d
    vim etc/init.d/rcS
    chmod +x etc/init.d/rcS
就是创建一些目录，然后创建 `etc/init.d/rcS` 作为 `linux` 启动脚本, 内容为
    #!/bin/sh
    mount -t proc none /proc
    mount -t sysfs none /sys
    /sbin/mdev -s
记得加上 `x` 权限，允许脚本的执行。
配置完后的目录结构
然后调用
    find . | cpio -o --format=newc > ../rootfs.img
创建文件系统
接着就可以使用 `qemu` 来运行内核了。
    qemu-system-x86_64 -kernel ~/linux-4.1.1/arch/x86_64/boot/bzImage -initrd ~/linux-4.1.1/rootfs.img -append "console=ttyS0 root=/dev/ram rdinit=/sbin/init" -cpu kvm64,+smep,+smap --nographic -gdb tcp::1234
对一些选项解释一下
> `-cpu kvm64,+smep,+smap` 设置 `CPU`的安全选项， 这里开启了 `smap` 和 `smep`
>
> `-kernel` 设置内核 `bzImage` 文件的路径
>
> `-initrd` 设置刚刚利用 `busybox` 创建的 `rootfs.img` ，作为内核启动的文件系统
>
> `-gdb tcp::1234` 设置 `gdb` 的调试端口 为 `1234`
**参考**
[Linux内核漏洞利用（一）环境配置](http://t.cn/RmJi86c)
# 内核模块创建与调试
## 创建内核模块
在学习阶段还是自己写点简单 内核模块 (驱动) 来练习比较好。这里以一个简单的用于测试 **通过修改 thread_info- >addr_limit
来提权** 的模块为例
首先是源代码程序 `arbitrarily_write.c`
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include
    #include
    struct class *arw_class;
    struct cdev cdev;
    char *p;
    int arw_major=248;
    struct param
    {
        size_t len;
        char* buf;
        char* addr;
    };
    char buf[16] = {0};
    long arw_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
    {
        struct param par;
        struct param* p_arg;
        long p_stack;
        long* ptr;
        struct thread_info * info;
        copy_from_user(&par, arg, sizeof(struct param));
        int retval = 0;
        switch (cmd) {
            case 8:
                printk("current: %p, size: %d, buf:%p\n", current, par.len, par.buf);
                copy_from_user(buf, par.buf, par.len);
                break;
            case 7:
                printk("buf(%p), content: %s\n", buf, buf);
                break;
            case 5:
                p_arg = (struct param*)arg;
                p_stack = (long)&retval;
                p_stack = p_stack&0xFFFFFFFFFFFFC000;
                info = (struct thread_info * )p_stack;
                printk("addr_limit's addr: 0x%p\n", &info->addr_limit);
                memset(&info->addr_limit, 0xff, 0x8);
                // 返回 thread_info 的地址， 模拟信息泄露
                put_user(info, &p_arg->addr);
                break;
            case 999:
                p = kmalloc(8, GFP_KERNEL);
                printk("kmalloc(8) : %p\n", p);
                break;
            case 888://数据清零
                kfree(p);
                printk("kfree : %p\n", p);
                break;
            default:
                retval = -1;
                break;
        }
        return retval;
    }
    static const struct file_operations arw_fops = {
        .owner = THIS_MODULE,
        .unlocked_ioctl = arw_ioctl,//linux 2.6.36内核之后unlocked_ioctl取代ioctl
    };
    static int arw_init(void)
    {
        //设备号
        dev_t devno = MKDEV(arw_major, 0);
        int result;
        if (arw_major)//静态分配设备号
            result = register_chrdev_region(devno, 1, "arw");
        else {//动态分配设备号
            result = alloc_chrdev_region(&devno, 0, 1, "arw");
            arw_major = MAJOR(devno);
        }
        // 打印设备号
        printk("arw_major /dev/arw: %d", arw_major);
        if (result 
    #include 
    #include 
    struct param
    {
        size_t len;
        char* buf;
        char* addr;
    };
    int main(void)
    {
        int fd;
        char buf[16];
        fd = open("/dev/arw", O_RDWR);
        if (fd == -1) {
            printf("open hello device failed!\n");
            return -1;
        }
        struct param p;
        p.len = 8;
        p.buf = malloc(32);
        strcpy(p.buf, "hello");
        ioctl(fd, 8, &p);
        ioctl(fd, 7, &p);
        return 0;
    }
打开设备文件，然后使用 `ioctl` 和刚刚驱动进行交互。
接下来是`Makefile`
    obj-m := arbitrarily_write.o
    KERNELDIR := /home/haclh/linux-4.1.1
    PWD := $(shell pwd) 
    OUTPUT := $(obj-m) $(obj-m:.o=.ko) $(obj-m:.o=.mod.o) $(obj-m:.o=.mod.c) modules.order Module.symvers
    modules:
        $(MAKE) -C $(KERNELDIR) M=$(PWD) modules
        gcc -static test.c -o test
    clean:
        rm -rf $(OUTPUT)
        rm -rf test
> `test.c` 要静态编译， `busybox` 编译的文件系统，没有 `libc`.
>
> 把 `KERNELDIR` 改成 内核源代码的根目录。
同时还创建了一个脚本用于在 `qemu` 加载的系统中，加载模块，创建设备文件，新增测试用的普通用户。
`mknod.sh`
    mkdir /home
    mkdir /home/hac425
    touch /etc/passwd