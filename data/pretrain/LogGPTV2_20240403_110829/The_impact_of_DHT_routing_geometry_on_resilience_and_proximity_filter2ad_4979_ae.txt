depends on the nature of the underlying topology and the
exact location of the sources and destination. To provide a
simpliﬁed and controlled experiment, we consider the case
of an isolated domain. We consider m nodes that are within
some very small latency of each other; all nodes in this iso-
lated domain are some large latency away from the other
n − m nodes. We then let each node in the isolated domain
contact the same (randomly chosen) destination outside of
the domain. The measure of local convergence is how many
exit points there are; that is, how many nodes in the domain
relay the message to an oﬀ-domain node. In the best case,
only one node sends a message oﬀ-domain; messages from
all other domain nodes converge on this point before leaving
the domain.
We test convergence on the Ring, Tree and XOR geome-
tries.14 Figures 10 and 11 plot the measured number of exit
14We expect PRS Hypercube to oﬀer convergence similar to
that of the PRS Ring and hence do not explore the Hyper-
cube here. Similarly, we omit the Hybrid as we expect it to
oﬀer performance similar to that of the Ring.
points for increasing domain sizes (n is held ﬁxed while m
varies from 1 to n
2 ). Our results can be organized around
three questions:
Question #1: Which is more eﬀective, PNS or PRS?
Figure 10 shows the results for the PNS, PRS, and PNS+PRS
versions of both XOR and Ring. In both cases, PNS and
PNS+PRS provide almost optimal performance, whereas
PRS does little to limit the number of exit points (except
for very large m in the case of Ring). Thus, PNS is far
more eﬀective than PRS. Combining PRS with PNS helps
somewhat for Ring but almost none at all for XOR. The inef-
fectiveness of PRS isn’t surprising because, at the simulated
system size of 65536, each node has 16 neighbors. Until the
domain size is a large fraction of the total population, it is
unlikely that one of these neighbors is within the domain,
and so PRS would have little eﬀect.
Question #2: Does this answer change when only con-
sidering PNS(K)? Figure 11, left, shows the results for the
PNS(16), PRS, PNS(16)+PRS versions of Ring. Because
the sampling is limited to 16, proximity neighbor selection
is not ideal and its eﬀectiveness is greatly reduced. In fact,
PRS and PNS(16) are equally ineﬀective. The combination
of the two, PNS(16)+PRS is more eﬀective, particularly at
moderate sized domains. When the domain size is small,
a limited amount of sampling (whether choosing neighbors
or routes) isn’t much help. The combination of the two,
PNS(16)+PRS, increases the level of sampling and so its ef-
fectiveness kicks in for lower values of m. Thus, PRS might
play an important role in local convergence if the domain
sizes of interest are small and the sampling used to imple-
ment PNS is limited.
Question #3: How does the performance of the various
geometries compare? Figure 11, right, compares the results
for PNS Tree, PNS+PRS Ring, and PNS+PRS XOR. As
can be seen, these all perform roughly the same. Thus, as
with path latency, the biggest diﬀerence between geometries
is whether or not they can accommodate PNS and/or PRS.
Our results suggest that the relevance of PRS depends on
whether or not PNS can be closely approximated (at least
more closely than PNS(16) does). If not, then implement-
ing PRS provides signiﬁcant value; if so, then PRS may not
be needed as PNS by itself provides almost all the perfor-
mance of PNS+PRS. References [8, 2] propose methods for
eﬃciently approximating PNS, but it is not yet known how
much better they are than PNS(16) for these scenarios.
6. DISCUSSION
This paper has not introduced any new DHT algorithms,
nor has it presented any theorems. However, we hope that
it has provided some pieces of insight that will be useful
in future DHT routing designs. At a very high level, our
ﬁndings can be summarized as follows:
Component-based analysis: When comparing DHT al-
gorithms we advocate analyzing the component design
decisions separately rather than comparing DHTs as
black-boxes or turn-key systems. In particular, this re-
quires separating systems-level design decisions, which
usually are independent of the routing, from routing-
level design decisions. This is more philosophy than
science, but we think our approach, while not as ef-
fective in picking the best current design, is more con-
ducive to creating better designs in the future.
100000
10000
1000
100
10
1
s
t
i
n
o
P
t
i
x
E
f
o
r
e
b
m
u
N
0.1
256
PNS XOR
PRS XOR
PNS+PRS XOR
512
1024
2048
4096
8192
16384
32768
Size of Isolated Domain
100000
10000
1000
100
10
1
s
t
i
n
o
P
t
i
x
E
f
o
r
e
b
m
u
N
0.1
256
PNS Ring
PRS Ring
PNS+PRS Ring
512
1024
2048
4096
8192
16384
32768
Size of Isolated Domain
Figure 10: The number of exit points for a system of size 65536 with varying sizes of isolated domains. The
left graph shows results for the PNS, PRS and PNS+PRS versions of XOR, while the right graph shows
results for the PNS, PRS and PNS+PRS versions of Ring.
100000
10000
1000
100
10
1
s
t
i
n
o
P
t
i
x
E
f
o
r
e
b
m
u
N
0.1
256
PNS(16) Ring
PRS Ring
PNS(16)+PRS Ring
PNS+PRS Ring
512
1024
2048
4096
8192
16384
32768
Size of Isolated Domain
100000
10000
1000
100
10
1
s
t
i
n
o
P
t
i
x
E
f
o
r
e
b
m
u
N
0.1
256
PNS Tree
PNS+PRS Ring
PNS+PRS XOR
512
1024
2048
4096
8192
16384
32768
Size of Isolated Domain
Figure 11: The number of exit points for a system of size 65536 with varying sizes of isolated domains. The
left graph shows results for the PNS(16), PRS and PNS(16)+PRS versions of Ring, while the right graph
shows results for the PNS Tree, PNS+PRS Ring, and PNS+PRS XOR.
Routing geometry is fundamental: The choice of a rout-
ing geometry constrains other routing design issues.
While there are a myriad of detailed routing designs
yet to be explored, the space of routing geometries is
more limited. Hence, one might reach some consensus
on the best routing geometry well before reaching any
consensus about the various design details.
Flexibility is important: The most important diﬀerence
we noticed between geometries (besides the butterﬂy
geometry’s ability to achieve O(log n) paths with O(1)
neighbors) is the degree of ﬂexibility they oﬀer. Flex-
ibility describes the amount of freedom available to
choose neighbors and next-hop paths. This freedom,
in turn, aﬀects the performance in areas such static
resilience, path latency, and local convergence.
Ring and XOR are ﬂexible: The Ring and XOR geome-
tries were the only ones we tested that could freely
choose both neighbors and routes, so they could imple-
ment both PNS and PRS. While PNS is signiﬁcantly
more eﬀective than PRS in dealing with proximity,
there are times, as we saw in Section 5, when PRS
is an important complement to PNS. Thus, the ability
to support both is an advantage.
Why not the Ring? The Ring geometry has unsurpassed
ﬂexibility and, in addition, provides natural support
for sequential neighbors. It achieved the highest per-
formance in our resiliency tests, and was as good as
any other geometry in the proximity metrics of path
length and local convergence. Thus, our investigation
showed no advantage to the other geometries, and a
slight advantage to the Ring. While our initial incli-
nation was to favor more complicated geometries, the
question we end this paper with is: why not use ring
geometries?
However, we pose this as a question, not a conclusion.
There is much more to be done before any deﬁnitive judge-
ments can be drawn. Our investigation is incomplete in
many aspects. For example, our study could be extended
to a wider class of routing geometries, theoretical bounds
could be derived for many of our simulation results, and the
impact of a routing geometry (and in particular its sym-
metry or the lack thereof) on the cost of maintaining the
associated overlay structure should be studied. Thus, we
view our paper as only the ﬁrst step in a more fundamental
investigation of routing algorithms.
7. ACKNOWLEDGEMENTS
We wish to thank several anonymous reviewers and our
shepherd Antony Rowstron for their feedback and sugges-
tions. We thank Dahlia Malkhi and David Ratajczak for
their help with the implementation of Viceroy.
8. REFERENCES
[1] M. Castro, M. Jones, Anne-Marie Kermarrec,
A. Rowstron, M. Theimer, H. Wang, and A. Wolman.
An Evaluation of Scalable Application-Level Multicast
Built Using Peer-To-Peer Overlays. In Proceedings of
the INFOCOM 2003, San Francisco, April 2003.
[2] Miguel Castro, Peter Drushel, Y.C. Hu, and Antony
Rowstron. Exploiting Network Proximity in
Peer-to-peer Networks. Technical Report
MSR-TR-2002-82, Microsoft Research, 2002.
[3] Frank Dabek, M. Frans Kaashoek, David Karger,
Robert Morris, and Ion Stoica. Wide-area cooperative
storage with CFS. In Proceedings of the 18th ACM
Symposium on Operating Systems Principles (SOSP
2001), Lake Louise, AB, Canada, October 2001.
[4] Peter Druschel and Antony Rowstron. Storage
management and caching in PAST, a large-scale,
persistent peer-to-peer storage utility. In Proceedings
of the 18th ACM Symposium on Operating Systems
Principles (SOSP 2001), Lake Louise, AB, Canada,
October 2001.
[5] IRIS: Infrastructure for Resilient Internet Systems.
http://iris.lcs.mit.edu, May 2002.
[6] David Karger Frans Kaashoek. Simple Constant-Space
Distributed Hash Tables. In Proceedings of the IPTPS
2003, Berkeley, February 2003.
[7] Anjali Gupta, Barbara Liskov, and Rodrigo Rodrigues.
One Hop Lookups for Peer-to-Peer Overlays. In
Proceedings of the HotOS-IX 2003, Hawaii, May 2003.
[8] Kirsten Hildrum, John D. Kubiatowicz, Satish Rao,
and Ben Y. Zhao. Distributed Object Location in a
Dynamic Environment. In Proceedings of the ACM
SPAA, 2002.
[9] Sushant Jain, Ratul Mahajan, and David Wetherall. A
Study of Performance Potential of DHT-based
Overlays. In Proceedings of the 4th Usenix Symposium
on Internet Technologies and Systems (USITS),
Seattle, WA, USA, March 2003.
[10] David R. Karger and Matthias Ruhl. Finding Nearest
Neighbours in Growth-restricted Metrics. In
Proceedings of the ACM STOC, Montreal, May 2002.
[11] J. Kleinberg. The small-world phenomenon: An
algorithmic perspective. In Proceedings of the ACM
STOC 2000, 2000.
[12] John Kubiatowicz. Oceanstore: An Architecture for
Global-Scalable Persistent Storage. In Proceedings of
the ASPLOS 2000, Cambridge, MA, USA, November
2000.
[13] Dmitri Loguinov, Anuj Kumar, Vivek Rai, and Sai
Ganesh. Graph-Theoretic Analysis of Structured
Peer-to-Peer Systems; Routing Distances and Fault
Resilience. In Proceedings of the ACM SIGCOMM ’03
Conference, Karlsruhe, Germany, August 2003.
[14] Dahlia Malkhi, Moni Naor, and David Ratajczak.
Viceroy: A Scalable Dynamic Emulation of the
Butterﬂy. In Proceedings of the PODC, 2002.
[15] Petar Maymounkov and David Mazieres. Kademlia: A
Peer-to-peer Information Systems Based on the XOR
Metric . In Proceedings of the IPTPS 2002, Boston,
March 2002.
[16] C. Greg Plaxton, Rajmohan Rajaraman, and
Andrea W. Richa. Accessing Nearby Copies of
Replicated Objects in a Distributed Environment. In
Proceedings of the ACM SPAA, June 1997.
[17] CAIDA: The Skitter Measurement Project.
www.caida.org/tools/measurement/skitter/index.html,
2002.
[18] Sylvia Ratnasamy. A Scalable Content-Addressable
Network. PhD thesis, University of California,
Berkeley, October 2002.
[19] Sylvia Ratnasamy, Paul Francis, Mark Handley,
Richard Karp, and Scott Shenker. A Scalable
Content-Addressable Network. In Proceedings of the
ACM SIGCOMM 2001 Technical Conference, San
Diego, CA, USA, August 2001.
[20] Sylvia Ratnasamy, Mark Handley, Richard Karp, and
Scott Shenker. Application-level Multicast using
Content-Addressable Networks. In Proceedings of the
NGC 2001, 2001.
[21] Sylvia Ratnasamy, Mark Handley, Richard Karp, and
Scott Shenker. Topologically-Aware Overlay
Construction and Server Selection. In Proceedings of
the INFOCOMM, 2002.
[22] Antony Rowstron and Peter Druschel. Pastry:
Scalable, distributed object location and routing for
large-scale peer-to-peer systems. In IFIP/ACM
International Conference on Distributed Systems
Platforms (Middleware), pages 329–350, November
2001.
[23] Stefan Saroiu, P. Krishna Gummadi, and Steven D.
Gribble. A Measurement Study of Peer-to-peer File
Sharing Systems. In Proceedings of the Multimedia
Computing and Networking Conference (MMCN), San
Jose, CA, USA, January 2002.
[24] John Kubiatowicz Sean Rhea, Timothy Roscoe. DHTs
Need Application-Driven Benchmarks. In Proceedings
of the IPTPS 2003, Berkeley, February 2003.
[25] Ion Stoica, Robert Morris, David Karger, Frans
Kaashoek, and Hari Balakrishnan. Chord: A Scalable
Peer-to-peer Lookup Service for Internet Applications.
In Proceedings of the ACM SIGCOMM 2001, San
Diego, CA, USA, August 2001.
[26] Marcel Waldvogel and Roberto Renaldi. Eﬃcient
Topology-Aware Overlay Network. In Proceedings of
the HotNets-I 2002, Princeton, October 2002.
[27] Ben Y. Zhao, Anthony Joseph, and John D.
Kubiatowicz. Locality Aware Mechanisms for
Large-scale Networks. In Proceedings of the FuDiCo
02, Bertinoro, Italy, June 2002.
[28] B.Y. Zhao, K.D. Kubiatowicz, and A.D. Joseph.
Tapestry: An Infrastructure for Fault-Resilient
Wide-Area Location and Routing. Technical Report
UCB//CSD-01-1141, University of California at
Berkeley, April 2001.
[29] Shelley Q. Zhuang, Ben Y. Zhao, Anthony D. Joseph,
Randy H. Katz, and John Kubiatowicz. Bayeux: An
Architecture for Scalable and Fault-tolerant
Wide-Area Data Dissemination. In Proceedings of the
NOSSDAV 2001, 2001.