Our approach. We present a high-level overview of our
approach and refer the reader to Section IV for technical de-
tails. We adhere to the following general approach of building
large secure systems, in which full security is prohibitively
costly: in a large problem, we identify small privacy-critical
subproblems, and solve those securely (their outputs must be
of low privacy consequence, and are handled in plaintext).
Then we use the outputs of the subtasks (often only a small
portion of them will need to be evaluated) to complete the
overall task efﬁciently.
We solve the large problem (encrypted search on large
DB) by traversing an encrypted search tree. This allows the
subtasks of privately computing whether a tree node has a child
matching the (arbitrarily complex) query to be designated as
security-critical. Further, unlike the protected input and the
internals of this subtask, its output, obtained in plaintext by
IS, reveals little private information, but is critical in pruning
the search tree and achieving efﬁcient sublinear (logarithmic
for some queries) search complexity. Putting it together, our
search is performed by traversing the search tree, where
each node decision is made via very efﬁcient secure function
evaluation (SFE).
We use Bloom ﬁlters (BF) to store collections of keywords
in each tree node. Bloom ﬁlters serve this role well because
they support small storage, constant time access, and invari-
ance of access patterns with respect to different queries and
match outputs. For SFE, we use state-of-the-art Yao’s garbled
circuits.
leakage (i.e. additional
Because of SFE’s privacy guarantee in each tree node, the
overall
information learned by the
players) essentially amounts to the traversal pattern in the
encrypted search tree.
We discuss technical details of these and other aspects of
the system, such as encrypted search tree construction, data
representation, policy checking, etc., in Section IV. We stress
that many of these details are technically involved.
III. PRELIMINARIES
We assume that readers are familiar with pseudorandom
generators (PRG), pseudorandom functions (PRF), and semi-
homomorphic encryption schemes with semantic security [28],
e.g., ElGamal encryption [19].
Notations. Let [n] = {1, . . . , n}. For (cid:2)-bit strings a and
let a ∨ b (resp., a ∧ b and a⊕b) denote the bitwise-
b,
OR (resp. bitwise-AND and bitwise-XOR) of a and b. Let
S = (i1, i2, . . . , iη) be a sequence of integers. We deﬁne a
projection of a ∈ {0, 1}(cid:3) on S as a↓S= ai1 ai2
··· aiη; for
example, with S = (2, 4), we have 0101 ↓S= 11. We also
deﬁne a ﬁltering of a = a1a2 . . . a(cid:3) by S as a‡S = b1b2 . . . b(cid:3)
where bj = aj if j ∈ S, or bj = 0 otherwise; for example, with
S = (2, 4), we have 1110‡S = 0100. We deﬁne a shrinking
function ζm : Nη→Nη as ζm(i1, i2, . . . , iη) = (j1, j2, . . . , jη),
where jk = (ik − 1) mod (m + 1); for example, we have
ζ3(1, 3, 4) = (1, 3, 1).
Bloom ﬁlter (BF). A Bloom ﬁlter [8] is a well-known data
structure that facilitates efﬁcient search. The ﬁlter B is a string
initialized with 0(cid:3) and associated with a set of η different
hash functions H = {hi : {0, 1}∗→[(cid:2)]}η
i=1. For a keyword
, let H(α) the sequence of the hash results of α,
α ∈ {0, 1}∗
i.e.,
H(α) = (h1(α), h2(α), . . . , hη(α)).
To add a keyword α to the ﬁlter, the hash result H(α) is added
to it, that is, B := B ∨ (1(cid:3)‡H(α)). To see if a keyword β is
361
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:22 UTC from IEEE Xplore.  Restrictions apply. 
in the ﬁlter, one needs to check if B contains H(β), that is,
B↓H(β)
?
= 1η. Bloom ﬁlters guarantee no false negatives, and
allow the false positive rate to be tuned:
(cid:2)
1 − e
(cid:2)
1 − (cid:3)
FPbf =
η ≈
− ηt
(cid:5)
(cid:5)
η
,
(cid:3)
(cid:4)
ηt
1 − 1
(cid:2)
where t is the number of keywords in the Bloom ﬁlter. In
our system, we choose η = 20 and (cid:2) = 28.86t to achieve
FPbf ≈ 10
−6.
A. Secure Computation Based on Yao’s GC
j
k
i , w1
1 , . . . , wan
1 , . . . , wan
q given the keys (wa1
Yao’s garbled circuit (GC). Yao’s garbled circuits allow
circuits to be evaluated obliviously by one party on hidden
inputs provided by another party. Let C be a Boolean circuit
with n input wires, m gates, and one output wire; let (1, . . . , n)
be the indices to the input wires and q = n + m + 1 be
the index to the output wire. To generate a garbled circuit
˜C, a pair of random keys w0
i are associated with each
wire i in the circuit; key w0
i corresponds to the value ‘0’ on
wire i, while w1
i corresponds to the value ‘1’. Then, for each
gate g in the circuit, with its input wires i, j and its output
wire k, a garbled gate ˜g (consisting of four ciphertexts) is
constructed so that it will enable one to recover wg(bi,bj )
from
i and wbj
(refer to [14], [36], [40], [48] for more detail.)
wbi
The garbled circuit ˜C is simply the collection of all the garbled
gates. By recursively evaluating the garbled gates, one can
compute the garbled key wb
n ),
where b = C(a1, . . . , an). We will sometimes call wire keys
corresponding to input/output garbled input/output, and denote
n ), ˜b = wb
them by ˜a and ˜b, i.e., ˜a = (wa1
q. We will
also use the notation of garbled evaluation ˜b = ˜C(˜a).
Oblivious transfer. An oblivious transfer (OT) [20], [46]
is a two-party protocol supporting a sender that holds values
(x0, x1) and a receiver that holds an index r ∈ {0, 1}. The
receiver learns xr, but neither the sender nor the receiver learns
anything else, i.e., the receiver learns nothing about any other
values held by the sender, and the sender learns nothing about
the receiver’s index. We use the Naor-Pinkas protocol [42] as
a basis and optimize the performance using OT extension [30]
and OT preprocessing [5].
Secure computation.
It is known that Yao’s garbled circuit,
in combination with any oblivious-transfer protocol yields a
constant-round protocol for secure two-party computation with
semi-honest security [38], [52], [53]. In fact, due to the privacy
guaranteed by Yao’s GC [7], even if the circuit C is a private
input from Alice along with xA, Yao’s GC can also hide
the circuit C from Bob, revealing only the topology of C.
We use GCs not only for search tree traversal but also for
policy enforcement. Yao’s GC is one of the most efﬁcient
algorithms known for secure computation of functions. For
example, a recent work [51] demonstrated secure evaluation
of AES (a circuit with 33880 gates) in 0.2 seconds. We use
the standard techniques of Free-XOR [14], [36] and point-and-
permute [40], [48] in constructing garbled circuits.
BF1,N
...
BF1,N/10
BF1,N/10
...
.
.
.
...
.
.
.
BF tree
BF1,10
...
BF...
...
BFN-9,N
BF1
BF2
...
BF10
BF...
BF...
...
BF...
BFN-9
BFN-8
...
R1
R2
R10
R...
R...
R...
RN-9
RN-8
BFN
RN
Records
Let (Ri, . . . , Rn) be the overall database records. The Bloom ﬁlter
BFa,b contains all the keywords of records Ra, Ra+1, . . . , Rb.
Figure 2.
Index structure: Bloom-ﬁlter-based search tree.
IV. BASIC SYSTEM DESIGN
In this section, we will begin by describing the basic system
design supporting only simple private query. In the next
section, we will augment this basic design with more features.
A. BF Search Tree
Our key data structure enabling sublinear search is a BF search
tree for the database records. We stress that there is only one
global search tree for the entire database. Let n be the number
of database records and T be a balanced b-ary tree of height
logb n (we assume n = bz from some positive integer z for
simplicity). In our system, b is set to 10. In the search tree,
each leaf is associated with each database record, and each
node v is associated with a Bloom ﬁlter Bv. The ﬁlter Bv
contains all the keywords from the (leaf) records that the node
v have (as itself or as its descendants). For example, if a node
contains a record that has Jeff in the fname ﬁeld, a keyword
α = ‘fname:Jeff’ is inserted to Bv. The length (cid:2)v of Bv
is determined by the upper bound of the number of possible
keywords, derived from DB schema, so that two nodes of the
same level in the search tree have equal-length Bloom ﬁlters.
The insertion of keywords is performed by shrinking the output
of the hash functions ζ(cid:3)v (H(α)) to ﬁt in the corresponding BF
length (cid:2)v. Here, H is the set of hash functions associated with
the root node BF. See Figure 2.
Search using a BF search tree. Consider a simple recursive
algorithm Search below. Let α and β be keywords and r the
root of the search tree. Note that Search(α∧β, r) will output
all the leaves (i.e., record locations) containing both keywords
α and β; any ancestor of a leaf has all the keywords that the
leaf has, and therefore there should be a search path from
the root to each leaf containing α and β. This algorithm can
be easily extended to searching for any monotone Boolean
formula of keywords.
Search(α∧β, v):
If the BF Bv contains α and β, then
If v is a leaf, then output {v}.
Otherwise, output
Otherwise, output ∅.
c: children of v
(cid:6)
Search(α∧β, c).
362
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:22 UTC from IEEE Xplore.  Restrictions apply. 
B. Preprocessing
Roughly speaking, in this phase, S gives an encrypted DB to
IS. To be more speciﬁc, by executing the following protocols,
the two parties encrypt and permute the records, create a search
tree for the permuted records, and prepare record decryption
keys.
Encrypting database index/records.
In this step, the server
ﬁrst permutes its DB to hide information of the order of
records in the DB and then creates BF-search tree on this
permuted DB; these DB and search tree are encrypted and
sent to the index server.
(fname = JEFF OR fname = JOHN) AND zip = 34301 AND income ≤ 200
Query: SELECT * FROM main WHERE
Logic Circuit:
∧
∨
=⇒
∧
Circuit:
∧
∨
∧
T1
T2
T3
T4
T1
T2
T3
T4
T1:fname = JEFF
T2:fname = JOHN
T3:zip = 34301
T4:income≤200
Figure 3. High level circuit representation of a query.
1) (Shufﬂe and encrypt
the records.) The server gen-
erates a key pair (pk , sk ) for a public-key semi-
homomorphic (e.g., additively homomorphic) encryp-
tion scheme (Gen, Enc, Dec). Given a database of n
records, the server S randomly shufﬂes the records. Let
(R1, . . . , Rn) be the shufﬂed records. S then chooses
a random string si, and computes ˜si← Encpk (si) and
˜Ri = G(si)⊕Ri, where G is a PRG.
2) (Encrypt the BF search tree.) S constructs a BF search
tree T for the permuted records (R1, . . . , Rn). It then
chooses a key k at random for a PRF F . The Bloom
ﬁlter Bv in each node v is encrypted as follows: