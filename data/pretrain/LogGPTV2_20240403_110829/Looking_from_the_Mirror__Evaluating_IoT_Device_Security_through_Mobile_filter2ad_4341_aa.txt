# Title: Evaluating IoT Device Security through Mobile Companion Apps

## Authors
- Xueqiang Wang, Indiana University Bloomington
- Yuqiong Sun, Symantec Research Labs
- Susanta Nanda, Symantec Research Labs
- XiaoFeng Wang, Indiana University Bloomington

## Abstract
Smart home Internet of Things (IoT) devices have increasingly become a favorite target for cybercriminals due to their weak security designs. Existing approaches to identify these vulnerable devices rely on the analysis of either real devices or their firmware images. However, these methods are difficult to scale in the highly fragmented IoT market due to the unavailability of firmware images and the high cost involved in acquiring real-world devices for security analysis.

In this paper, we present a platform that accelerates the discovery and analysis of vulnerable devices without requiring the presence of actual devices or firmware. Our approach is based on two key observations: First, IoT devices often reuse and customize components (e.g., software, hardware, protocols, and services), so vulnerabilities found in one device are often present in others. Second, reused components can be indirectly inferred from the mobile companion apps of the devices; thus, a cross-analysis of these apps may allow us to approximate the similarity between devices.

Using a suite of program analysis techniques, our platform analyzes the mobile companion apps of smart home IoT devices on the market and automatically discovers potentially vulnerable ones, allowing us to perform a large-scale analysis involving over 4,700 devices. Our study highlights the sharing of vulnerable components across smart home IoT devices (e.g., shared vulnerable protocols, backend services, and device rebranding) and leads to the discovery of 324 devices from 73 different vendors that are likely to be vulnerable to a set of security issues.

## 1. Introduction
Smart home IoT devices have become favored targets for attackers, not only because of the lack of user awareness but also due to their poor security design. As the motivation for attackers grows (e.g., IoT botnets, personal data theft), security incidents for smart home devices are expected to increase. Securing these devices is challenging for several reasons:

1. **Vendor Budget Constraints**: A significant fraction of vendors in this space are small and medium-sized businesses that lack the budget for software quality control and security best practices, resulting in numerous insecure devices in the market.
2. **Cost Sensitivity**: Many of these devices are relatively inexpensive (often less than $100) and cannot afford to support expensive security infrastructure, such as monitoring agents, encryption, and authentication hardware. Consequently, when a device is found to be vulnerable, there is little incentive or capability for the vendor to release a fix.
3. **High Vendor Fragmentation**: The high fragmentation of vendors makes it difficult to manage and distribute software and firmware patches.

One way to address this issue is to identify vulnerable devices before they are deployed and take appropriate measures to protect them. Such measures may include upgrading the device firmware, identifying and blocking traffic that can exploit the vulnerability, or quarantining the device completely. To identify vulnerable devices beforehand, multiple approaches have been proposed. One line of research focuses on launching an Internet-scale scan to detect trivially vulnerable devices (e.g., devices with weak passwords, certificates, and keys) that are publicly accessible. However, these approaches often cannot help identify devices with more sophisticated vulnerabilities or those hidden behind NAT. Another line of research focuses on statically and/or dynamically analyzing an IoT device or its firmware to evaluate its security. Although these approaches tend to yield more comprehensive and accurate results for individual devices, they do not scale well for large-scale analysis. First, getting physical access to all the devices on the market is not viable due to restricted availability and high acquisition costs. Similarly, device firmware is not always available due to the highly fragmented market. Second, even with a device or its firmware, the analysis itself is often tedious, error-prone, and difficult, especially considering the "device shell" (e.g., packing, obfuscation, and encryption) put in place by the device vendors.

### Approach
In this paper, we present a platform that accelerates the discovery and analysis of vulnerable devices without requiring access to a physical device or its firmware. Our approach is based on two key observations:
1. **Component Reuse**: Smart home IoT device vendors, especially small and medium-sized ones, often rely on the same components (e.g., software built from open-source projects, hardware components from common suppliers) to build their devices. Consequently, the same vulnerabilities or bad security practices often transfer from one IoT device to another. We can propagate vulnerability information to an unknown device by evaluating its similarity with devices known to be vulnerable.
2. **Mobile App Similarities**: Similarities of devices are often reflected in their mobile companion apps, which are widely accessible. Combining these two observations enables us to build a platform that identifies vulnerable devices in a scalable way without requiring the physical devices themselves or their firmware images.

Our platform provides two main functions:
1. **App Analysis**: Find the characteristics of a device by analyzing its companion app.
2. **Cross-App Analysis**: Identify device families, i.e., clusters of devices, that have similarities in some of the characteristics found in the app analysis by analyzing multiple apps. Clustering helps identify apps that have a similar set of vulnerabilities based on shared components.

### Results Overview
For our experiments, we crawled the Google Play Store to search for potential IoT companion apps and downloaded 3,094 of them. After filtering out noise, we were left with a dataset of 2,081 apps. These apps were then analyzed by our platform. First, we identified device clusters, i.e., device families, containing devices that are similar in various aspects such as software or hardware components, back-end services, and network protocols. For example, we found 19 device families covering 139 apps from 122 different vendors where devices in a family shared similar software components. As another example, we found 48 different families covering 460 devices that shared similar back-end services.

Second, we tried to identify devices that are impacted by a given vulnerability using the device families already identified. In one case, we discovered devices from four different vendors (apps of which are estimated to be installed by more than 215,000 users) that were previously not known to be vulnerable to a software vulnerability. We independently confirmed the existence of the vulnerability on 45 devices from four different vendors that were previously confirmed by other sources. In another case, we identified 67 devices from 16 different vendors that are impacted by a hardware security issue. In total, our platform has identified 324 potentially vulnerable devices from 73 different vendors. During the validation process, we could reach a decision (confirm or disapprove) about 179 devices from 43 vendors, among which 164 (91.6%) are confirmed to be vulnerable.

### Contributions
This paper makes the following contributions:
- It demonstrates how companion mobile apps for IoT devices can provide insights into the security of the devices themselves.
- It shows the effectiveness of using this approach to assess the security posture of IoT devices when neither the physical devices nor their firmware images are available.
- It proposes a platform to perform mobile app collection, filtering, analysis, and clustering at a large scale. It demonstrates its use by analyzing more than 2,000 apps and clustering them in multiple dimensions.
- It reports the discovery of 324 devices from 73 distinct vendors that are likely to be vulnerable to a set of security issues.

## 2. System Design

### 2.1 Overview
Figure 1 presents an overview of our platform. The first component is the IoT App Database, which stores the companion apps of smart home IoT devices crawled from the Google Play Store. The database is continuously extended by fetching more apps (e.g., when new IoT devices are on the market or old apps get updated).

The apps stored in the IoT App Database are then analyzed by the App Analysis Engine. The goal of the App Analysis Engine is to estimate the profile of an IoT device (i.e., what the device is like) based on code analysis. Specifically, the App Analysis Engine computes three things: the network interfaces of a device, the unique strings (called imprints) that a device may include, and the code signature of the companion app. The results of the App Analysis Engine are stored in the App Analysis Database.

A Cross-App Analysis Engine queries the App Analysis Database and identifies correlations across different devices to build a device family. A device family groups together different devices from different vendors based on their similarity. The similarity can be in terms of different dimensions (e.g., similar software, similar hardware, similar protocols, and similar cloud back-end services). The device family allows the propagation of vulnerability information among similar devices. Specifically, it allows the evaluation of IoT device security from the perspective of either a device or a threat: 1) for a specific device, the similarity allows a quick assessment of whether the device is vulnerable and, if so, to which vulnerabilities, and 2) for a specific vulnerability, it finds the set of devices on the market that might be affected by the vulnerability.

To facilitate vulnerability confirmation, our platform contains an additional component called the Device Firmware Collector. It leverages the code analysis results output by the App Analysis Engine (e.g., firmware URLs) as well as Internet search results to download firmware images into a Device Firmware Database. These firmware images later enable us to further confirm the vulnerabilities found by the Cross-App Analysis Engine. Note that the Device Firmware Collector is not an essential or required component of our platform. Rather, it is utilized as one of several means to help confirm the findings from the platform.

In the remainder of this section, we describe each component of our platform in detail.

### 2.2 App Collection
The first step of our platform is to gather mobile companion apps of smart home IoT devices for analysis. To achieve this goal, we crawled the Google Play Store. In total, we downloaded 3,094 Android apps, out of which 2,081 were included in the final dataset and analyzed by our platform.

The challenge during app collection is to identify apps that are mobile companion apps of IoT devices. To address this problem, we initialized the crawler with 281 seed apps manually selected from the online smart home products database SmartHomeDB, and used snowball sampling to collect more apps via the connections between the seed apps and other apps on the Google Play Store (e.g., keywords, suggestions, and categories). As a result, 3,094 candidate apps were initially downloaded. However, we observed that snowball sampling may sometimes introduce noise. For example, apps that manage phone cameras are confused with apps that manage home security cameras, and apps that lock phone screens are confused with smart home locks. To eliminate such noise from the dataset, we performed filtering. The filtering is based on a clustering model (Affinity Propagation) that clusters apps based on the permissions that the apps request on installation and the sensitive Android APIs that the apps may invoke at runtime. We deploy the filtering on apps that are nominated by the same seed sample and retain the largest cluster. This approach turns out to be effective: a random manual inspection of 200 apps after filtering shows that 98.5% of them are real mobile IoT companion apps. After further deduplication, 2,081 apps are left in the dataset and fed into the App Analysis Engine for analysis. Note that in the first phase of the research, we worked with a relatively small dataset and focused more on validating the approach. Our platform is constantly running to collect more apps for future analysis at a larger scale.

### 2.3 App Analysis Engine
The App Analysis Engine analyzes mobile companion apps collected to build a device profile for individual devices. Unlike previous works that focused on the apps themselves, the goal here is to compute what the device is like, indirectly from the app. We achieved this goal by independently applying three methods: a device interface analysis that computes the network interfaces of a device, an imprint analysis that computes unique strings a device might be related to, and a fuzzy hash analysis that computes the code signature of a mobile companion app. In practice, we found that the first method is more comprehensive and informative. Nevertheless, the other two methods are still useful in filling gaps where the first method cannot easily apply.

#### 2.3.1 Device Interface Analysis
The device interfaces are often a good reflection of what the device is like, e.g., the protocol that the device speaks, the service that the device runs, the function that the device supports, and sometimes the hardware components in use by the device. Without directly examining a device or its firmware, we estimate the device interfaces based on the analysis of its mobile companion app, as the app and the device complement each other in their network interfaces. A peer-to-peer connection between the app and the device can benefit this estimation, as the app interfaces, in this case, are direct reflections of the device interfaces; however, this is not a necessary condition. For devices where a cloud or backend service is involved, popular backend services like Microsoft Azure IoT Hub are often generic: they tend to relay the connection between the app and the device without much meddling. Such devices also work well with our approach since their app interfaces still closely reflect that of the devices. We performed a study over the online IoT device database (SmartHomeDB) and found that the majority of the devices (76.3%) produced by small and medium-sized vendors support a peer-to-peer connection.