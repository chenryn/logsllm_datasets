title:Looking from the Mirror: Evaluating IoT Device Security through Mobile
Companion Apps
author:Xueqiang Wang and
Yuqiong Sun and
Susanta Nanda and
XiaoFeng Wang
Looking from the Mirror: Evaluating IoT Device 
Security through Mobile Companion Apps
Xueqiang Wang, Indiana University Bloomington; Yuqiong Sun and Susanta Nanda, 
Symantec Research Labs; XiaoFeng Wang, Indiana University Bloomington
https://www.usenix.org/conference/usenixsecurity19/presentation/wang-xueqiang
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Looking from the Mirror: Evaluating IoT Device
Security through Mobile Companion Apps
Xueqiang Wang
Indiana University Bloomington
Susanta Nanda
Symantec Research Labs
Yuqiong Sun
Symantec Research Labs
XiaoFeng Wang
Indiana University Bloomington
Abstract
Smart home IoT devices have increasingly become a fa-
vorite target for the cybercriminals due to their weak security
designs. To identify these vulnerable devices, existing ap-
proaches rely on the analysis of either real devices or their
ﬁrmware images. These approaches, unfortunately, are difﬁ-
cult to scale in the highly fragmented IoT market due to the
unavailability of ﬁrmware images and the high cost involved
in acquiring real-world devices for security analysis.
In this paper, we present a platform that accelerates vul-
nerable device discovery and analysis, without requiring the
presence of actual devices or ﬁrmware. Our approach is based
on two key observations: First, IoT devices tend to reuse and
customize others’ components (e.g., software, hardware, pro-
tocol, and services), so vulnerabilities found in one device
are often present in others. Second, reused components can
be indirectly inferred from the mobile companion apps of
the devices; so a cross analysis of mobile companion apps
may allow us to approximate the similarity between devices.
Using a suite of program analysis techniques, our platform
analyzes mobile companion apps of smart home IoT devices
on market and automatically discovers potentially vulnerable
ones, allowing us to perform a large-scale analysis involving
over 4,700 devices. Our study brings to light the sharing of
vulnerable components across the smart home IoT devices
(e.g., shared vulnerable protocol, backend services, device
rebranding), and leads to the discovery of 324 devices from
73 different vendors that are likely to be vulnerable to a set of
security issues.
1 Introduction
Smart home IoT devices have become favored targets for at-
tackers [41] as much for the lack of user awareness [35] as for
their poor security design [46]. As the motivation for attackers
grows (e.g. IoT botnets, personal data theft), security incidents
for smart home devices are only expected to increase. Secur-
ing these devices is challenging on several fronts. First, a good
fraction of vendors in this space are small and medium-sized
businesses that lack the budget for software quality control
and security best practices, resulting in numerous insecure
devices in the market. Second, many of these devices are rel-
atively inexpensive (often less than $100) and cannot afford
to have support for expensive security infrastructure, such as
monitoring agents, encryption and authentication hardware,
etc. Consequently, when a device is found vulnerable, there is
very little incentive and capability for the vendor to release a
ﬁx. Third, high vendor fragmentation makes it hard to manage
and distribute software/ﬁrmware patches.
One way to address this issue is to identify vulnerable
devices before they get deployed and take appropriate mea-
sures to protect the device. Examples of such measures
may include upgrading the device ﬁrmware, identifying and
blocking trafﬁc that can exploit the vulnerability, or quar-
antining the device completely. To identify the vulnera-
ble devices beforehand, multiple approaches have been pro-
posed [10, 14, 16, 17, 19, 20, 24, 25, 27, 34, 42, 47, 49, 58]. One
line of research [19, 27] focused on launching an Internet-
scale scan to detect trivially vulnerable devices (e.g., de-
vices with weak passwords, certiﬁcates, and keys) that are
publicly accessible. However, these approaches often can-
not help identify devices with more sophisticated vulnera-
bilities or devices hidden behind NAT. Another line of re-
search [10, 14, 16, 17, 20, 24, 25, 34, 42, 47, 49, 58] focused on
statically and/or dynamically analyzing an IoT device or its
ﬁrmware to evaluate its security. Although these approaches
tend to yield more comprehensive and accurate results for
individual devices, they do not scale well for a large-scale
analysis. First, getting physical access to all the devices on the
market is not a viable option because of restricted availabil-
ity of devices in certain geographies and their prohibitively
high acquisition cost. Similarly, device ﬁrmware is not always
available due to the highly fragmented market that involves
a lot of small integration and distribution vendors 1. Second,
1Integration vendors are the ones that integrate components, tools, and
SDKs, provided by OEMs. Distribution vendors simply acquire the device
from an OEM and re-brand with their own before selling in the market.
USENIX Association
28th USENIX Security Symposium    1151
even with a device or its ﬁrmware, the analysis itself is often
tedious, error-prone and difﬁcult, especially considering the
“device shell” that is often put in place by the device vendors
(e.g., packing, obfuscation and encryption). As a result, the
market would beneﬁt from an approach where vulnerable
devices can be quickly identiﬁed at scale and the scope of
analysis can be narrowed down.
Approach. In this paper, we present a platform that acceler-
ates vulnerable device discovery and analysis without requir-
ing access to a physical device or its ﬁrmware. Our approach
is based on two observations. First, smart home IoT device
vendors, especially small and medium-sized ones, often rely
on same components (e.g., software built from open source
projects, hardware components from common suppliers) to
build their devices. Consequently, the same vulnerabilities or
bad security practices often transfer from one IoT device to
another. We can thus propagate vulnerability information to
an unknown device by evaluating its similarity with devices
known to be vulnerable. Second, similarities of devices are
often reﬂected in their mobile companion apps, which are
widely accessible. Combining these two observations enables
us to build a platform that identiﬁes vulnerable devices in
a scalable way without requiring the physical devices them-
selves or their ﬁrmware images.
In our platform, we try to expedite the process of identify-
ing vulnerable devices by providing two functions: (1) app
analysis: ﬁnd the characteristics of a device by analyzing its
companion app, and (2) cross-app analysis: ﬁnd device fami-
lies, i.e. cluster of devices, that have similarity in some of the
characteristics found in app analysis by analyzing multiple
apps. Clustering helps identify apps that have a similar set of
vulnerabilities based on shared components [8].
Results Overview. For our experiments, we crawled Google
Play Store [3] to search for potential IoT companion apps and
downloaded 3,094 of them. After ﬁltering out some noise,
we were left with a dataset of 2,081 apps (see Section 2.2 for
more details). These apps were then analyzed by our platform.
First, we found the device clusters, i.e., device families,
containing devices that are similar in various aspects such
as software or hardware components, back-end services, and
network protocols. For instance, in our analysis, we found 19
device families covering 139 apps from 122 different vendors
where devices in a family shared similar software components.
As another example, we found 48 different families covering
460 devices that shared similar back-end services.
Second, we tried to identify devices that are impacted by a
given vulnerability using the device families already identi-
ﬁed. In one case, we were able to discover devices from four
different vendors (apps of which is estimated to be installed
by more than 215,000 users) that were previously not known
to be vulnerable to a software vulnerability and independently
conﬁrm the existence of the vulnerability on 45 devices from
four different vendors that were previously conﬁrmed by other
sources. In another case, we were able to identify 67 devices
from 16 different vendors that are impacted by a hardware
security issue. In total, our platform has identiﬁed 324 poten-
tially vulnerable devices from 73 different vendors. During
the process of validation, we could reach a decision (conﬁrm
or disapprove) about 179 devices from 43 vendors, among
which 164 (91.6%) are conﬁrmed to be vulnerable.
Contributions. This paper makes the following contribu-
tions:
• It demonstrates how companion mobile apps for IoT de-
vices can provide insights into the security of the devices
themselves.
• It shows the effectiveness by using this approach to as-
sess the security posture of IoT devices when neither the
physical devices nor their ﬁrmware images are available.
• It proposes a platform to perform mobile app collec-
tion, ﬁltering, analysis, and clustering at a large scale. It
demonstrates its use by analyzing more than 2000 apps
and clustering them in multiple dimensions.
• It reports the discovery of 324 devices from 73 distinct
vendors that are likely to be vulnerable to a set of security
issues.
2 System Design
2.1 Overview
Figure 1 presents an overview of our platform. The ﬁrst com-
ponent of our platform is the IoT App Database, which stores
the companion apps of smart home IoT devices crawled from
the Google Play Store [3]. The database is extended con-
stantly by fetching more apps (e.g., when new IoT devices
are on market or old apps get updated).
The apps stored in IoT App Database are then analyzed
by the App Analysis Engine. The goal of the App Analysis
Engine is to estimate the proﬁle of an IoT device (i.e., what
the device is like) based on code analysis. Speciﬁcally, the
App Analysis Engine computes three things: the network
interfaces of a device, the unique strings (called imprints) that
a device may include, and code signature of the companion
app. The results of App Analysis Engine are stored in the App
Analysis Database.
A Cross-App Analysis Engine queries the App Analysis
Database and identiﬁes correlations across different devices
in order to build a device family. A device family groups
together different devices from different vendors based on
their similarity. The similarity can be in terms of different
dimensions (e.g., similar software, similar hardware, similar
protocols, and similar cloud back-end services). The device
family allows propagation of vulnerability information among
similar devices. Speciﬁcally, it allows evaluation of IoT device
1152    28th USENIX Security Symposium
USENIX Association
Figure 1: An overview of the platform
security from the perspective of either a device or a threat: 1)
for a speciﬁc device, the similarity allows to quickly assess
whether or not the device is vulnerable and if so to which
vulnerabilities, and 2) for a speciﬁc vulnerability, ﬁnd the
set of devices on the market that might be affected by the
vulnerability.
To facilitate vulnerability conﬁrmation, our platform con-
tains an additional component called Device Firmware Col-
lector. It leverages the code analysis results output by the App
Analysis Engine (e.g., Firmware URLs) as well as Internet
search results to download ﬁrmware images into a Device
Firmware Database. These ﬁrmware images later enable us
to further conﬁrm the vulnerabilities found by the Cross-App
Analysis Engine. Note that the Device Firmware Collector
is not an essential or required component of our platform.
Rather, it is utilized as one of several means to help conﬁrm
the ﬁndings from the platform (See Section 3.2 for more
details).
In the remainder of this section, we describe each compo-
nent of our platform in detail.
2.2 App Collection
The ﬁrst step of our platform is to gather mobile companion
apps of smart home IoT devices for analysis. To achieve this
goal, we crawled Google Play Store2. In total, we downloaded
3,094 Android apps, out of which 2,081 were included in the
ﬁnal dataset and analyzed by our platform.
The challenge during app collection is to identify apps that
are mobile companion apps of IoT devices. To address this
problem, we initialized the crawler with 281 seed apps manu-
ally selected from the online smart home products database
SmartHomeDB [5], and used snowball sampling to collect
more apps via the connections between the seed apps and
other apps on Google Play (e.g., keywords, suggestions and
categories). As a result, 3,094 candidate apps are initially
downloaded. However, we observed that snowball sampling
may sometimes introduce noise. For example, apps that man-
age phone camera are confused with the apps that manage
2We based our analysis primarily on Android but most IoT device vendors
provide mobile companion apps in both iOS and Android.
home security cameras. Apps that lock phone’s screen are con-
fused with smart home locks. To eliminate such noise from
the dataset, we performed ﬁltering. The ﬁltering is based on
a clustering model (Afﬁnity Propagation [26]) that clusters
apps based on the permissions that the apps request on in-
stallation and the sensitive Android APIs that the apps may
invoke at runtime. We deploy the ﬁltering on apps that are
nominated by the same seed sample and remain the largest
cluster. This approach turns out to be effective: a random
manual inspection of 200 apps after ﬁltering shows that 98.5%
of them are real mobile IoT companion apps. After further
deduplication, 2,081 apps are left in the dataset and fed into
the App Analysis Engine for analysis. Note at the ﬁrst phase
of the research, we worked with a relatively small dataset and
focused more on validating the approach. Our platform is
constantly running to collect more apps for future analysis at
a larger scale.
2.3 App Analysis Engine
The App Analysis Engine analyzes mobile companion apps
collected in order to build a device proﬁle for individual de-
vices. Unlike previous works [12, 32, 48, 60] that focused on
apps themselves, the goal here is to compute what the de-
vice is like, indirectly from the app. We achieved this goal
by independently applying three methods: a device interface
analysis that computes the network interfaces of a device, an
imprint analysis that computes unique strings a device might
be related to, and a fuzzy hash analysis that computes code
signature of a mobile companion app. In practice, we found
that the ﬁrst method is more comprehensive and informative.
Nevertheless, the rest two methods are still useful in ﬁlling in
gaps where the ﬁrst method cannot easily apply.
2.3.1 Device Interface Analysis
The device interfaces are often a good reﬂection of what the
device is like, e.g., the protocol that the device speaks, the ser-
vice that the device runs, the function that the device supports,
and sometimes the hardware components in use by the device.
Without directly examining a device or its ﬁrmware, we es-
timate the device interfaces based on analysis of its mobile
USENIX Association
28th USENIX Security Symposium    1153
companion app, as the app and the device complement each
other in their network interfaces. A peer-to-peer connection
between the app and the device can beneﬁt this estimation,
as the app interfaces, in this case, are direct reﬂections of the
device interfaces; however, this is not a necessary condition.
For devices where a cloud or backend service is involved,
popular backend services like Microsoft Azure IoT Hub [40]
are often generic: they tend to relay the connection between
the app and the device without much meddling. Such devices
also work well with our approach since their app interfaces
still closely reﬂect that of the devices. We performed a study
over the online IoT device database (SmartHomeDB), and
found that majority of the devices (76.3%) produced by small
and medium-sized vendors support a peer-to-peer connection