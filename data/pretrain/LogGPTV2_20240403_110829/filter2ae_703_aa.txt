**作者：sunglin@知道创宇404实验室/0103 sec team  
时间：2021年10月9日**
## 0x00 RDP协议的应用
RDP协议（远程桌面协议）是微软公司创建的专有协议，它允许系统用户通过图形界面连接到远程系统，主要分为服务端和客户端，这篇我们来聊聊客户端相关应用与攻击面。
主要流行的应用包括：
mstsc.exe（微软系统自带）
freerdp （最流行且成熟的开源应用 , github star超过5.6k, fork接近10k)
## 0x01 RDP协议通信机制
  1. [MS-RDPBCGR]基于ITU（国际电信联盟）T.120系列协议。T.120标准由一组通信和应用层协议组成，使实施者能够为实时，多点数据连接和会议创建兼容的产品和服务。
  2. [MS-RDPBCGR]协议可通过静态虚拟通道和动态扩展协议建立隧道进行传输；
  3. 其中有9种协议可建立静态虚拟通道包括常用的（剪切板、音频输出、打印虚拟频道、智能卡等）
  4. 其中12种协议可与动态频道虚拟频道扩展[MS-RDPEDYC]建立隧道包括（视频虚拟频道、音频输入、USB设备、图形管道、即插即用设备等等）
  5. 7种协议扩展了[MS-RDPBCGR]并且还包括UDP传输扩展[MS-RDPEUDP]、网关服务器 协议[MS-TSGU]等。
## 0x02 RDP协议图像处理通道攻击面
rdp协议中对图形处理中有两种通道，多种方式，协议也是很复杂的
## 0x03 攻击msrdp图形处理通道
    attack fastpath 
    api:
    CCO::OnFastPathOutputReceived(CCO *this, unsigned __int8 *a2, unsigned int a3)
    {
    switch()
    {
    case1:
    CTSCoreGraphics::ProcessBitmap
    .............
    case 9:
    CCM::CM_ColorPointerPDU
    case A:
    case B:
    ............
    }
    }
对此通道进行fuzzing，而后获取到了msrdp的crash：
## 0x04 简要分析此漏洞
漏洞存在模块mstscax.dll，api是CUH::UHLoadBitmapBits
CUH::UHGetMemBltBits获取存储的bitmap数据时访问到数组边界造成数据越界
## 0x05 漏洞相似性分析
msrdp与freerdp存在相同的漏洞？
freerdp CVE-2020-11525
同样的bitmap数组越界当 id == maxCells时将会
数组越界并且和msrdp是同一个漏洞
## 0x06 反向攻击客户端的路径和方式
## 0x07 漏洞背景
对于rdp图形通道的漏洞，我于7月份的时候向freerdp报告了一枚漏洞，并且freerdp回复了我并分配了cve号
CVE-2020-15103，当时提到的漏洞原因是整数溢出，并且freerdp发布了2.2.0版本修复了我提到的漏洞，重新深入分析了这枚漏洞，发现并不只是整数溢出那么简单，而是freerdp并未正确修复此漏洞，遂即对此漏洞进行了深入分析。
## 0x08 漏洞分析
首先在rdp协议建立连接的时候，server发送Demand Active
PDU协议字段给client的进行功能交换阶段时候，通过以下的图可以看到存在于连接过程的哪一阶段了。
freerdp对应处理的代码在rdp.c的回调函数`rdp_recv_callback`中进行连接部分的处理，当rdp->state为`CONNECTION_STATE_CAPABILITIES_EXCHANGE`的时候，将会接收Demand
Active PDU协议字段，继续深入协议字段，Demand Active PDU协议字段将会通过capabilitySets字段来设置每一项功能
capabilitySets (variable): An array of Capability Set (section 2.2.1.13.1.1.1)
structures. The number of capability sets is specified by the
numberCapabilities field
这里关注的是Bitmap Capability Set
Bitmap Capability
Set如下，其将会设置字段desktopWidth和desktopHeight，而这两个字段将会用于创建窗口会话，并且会通过这两个字段分配一片内存，而这片内存就是造成后面越界的区域
在freerdp中api调用路径如下:
rdp_recv_callback->rdp_client_connect_demand_active->rdp_recv_demand_active->rdp_read_capability_sets->rdp_read_bitmap_capability_set
在rdp_read_bitmap_capability_set函数中将会接收到server端的数据，将会设置desktopWidth和desktopHeight
https://github.com/FreeRDP/FreeRDP/blob/libfreerdp/core/capabilities.c
freerdp将会在wf_post_connect中进行一系列的初始化，包括初始化bitmap，api调用路径如下:
wf_post_connect->wf_image_new->wf_create_dib->CreateDIBSection
最后将会调用windows的api CreateDIBSection，CreateDIBSection将会以bmi.bmiHeader.biWidth *
bmi.bmiHeader.biHeight * bmi.bmiHeader.biBitCount创建以4096页为基数的大内存。
https://github.com/FreeRDP/FreeRDP/blob/client/Windows/wf_graphics.c
在freerdp建立并初始化完成后，调用下这片内存，并且触发漏洞，通过Fast-Path数据来发送Bitmap
Data，而后freerdp将会利用到初始化的内存，并且没有做任何限制
发送的数据头部如下:
    00,
    0x84,0x24,//size = 1060
    0x04,
    0x1e,0x4, //size - 6 
    0x04, 0x00,//cmdType
    0x00, 0x00,//marker.frameAction
    0xFF, 0xE3, 0x77, 0x04,//marker.frameId
    0x01, 0x00,//cmdType
    0x00, 0x00, //cmd.destLeft  //  nXDst * 4 
    0x00, 0x00, //cmd.destTop  //  nYDst * width
    0x00, 0x03,//cmd.destRight
    0x04, 0x04,//cmd.destBottom
    0x20, //bmp->bpp
    0x80,//bmp->flags
    0x00,//reserved
    0x00, //bmp->codecID
    0x00, 0x01, //bmp->width *4
    0x01, 0x0, //bmp->height
    0x00 ,4,0,0,//bmp->bitmapDataLength
通过特殊制作的头部数据，将会获取如下路径:
rdp_recv_pdu->rdp_recv_fastpath_pdu->fastpath_recv_updates->fastpath_recv_update_data->fastpath_recv_update->update_recv_surfcmds->update_recv_surfcmd_surface_bits->gdi_surface_bits->freerdp_image_copy
先来分析下这个函数`gdi_surface_bits`，在gdi_surface_bits中有三条路径可以解析和处理接收的数据，case
RDP_CODEC_ID_REMOTEFX和case RDP_CODEC_ID_NSCODEC，这两条路径都会将原始数据进行解析转换，然而在case
RDP_CODEC_ID_NONE中，将会直接得到拷贝原始数据的机会。
    Static BOOL gdi_surface_bits(rdpContext* context, const SURFACE_BITS_COMMAND* cmd)
    {
    switch(cmd->bmp.codecID)
    {
        case RDP_CODEC_ID_REMOTEFX: