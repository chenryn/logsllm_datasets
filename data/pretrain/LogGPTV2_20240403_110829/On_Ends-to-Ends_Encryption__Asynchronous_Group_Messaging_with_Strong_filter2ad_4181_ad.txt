3
Figure 5: Alice sets up a new tree with herself and ﬁve other agents. The copath of Agent 4 is shown
boxed.
grk 1
gι(gλ0λ1 )ι(gλ2λ3 )
gλ(cid:48)
4λ5
gλ0λ1
gλ2λ3
λ(cid:48)
4
λ5
λ0
λ1
λ2
λ3
Figure 6: Agent 4 updates their leaf key. The path of Agent 4 is shown in solid red, and the copath of
Alice (Agent 0) is shown boxed.
14
She then sends each agent their respective copath and the prekey she used to set them up in
the tree, along with the identities of the other group members and the public setup key. For
example, the agent Edward at index 4 would receive
4, IK Alice, IK 1, . . . , IK 5, EK 4, SUK , gι(gι(gλ0λ1 )ι(gλ2λ3 )), gλ5.
In her own state, Alice stores her leaf key, the ordered list of public identity keys, the tree key,
and her copath. Finally, she derives the stage key used for messaging via DeriveStageKey in
Algorithm 2.
4, gι(gλ(cid:48)
Parsing this message (Algorithm 3) allows Edward to identify his position in the group tree,
and to construct the group key using DeriveStageKey. If Edward then wishes to update his
key, he runs Algorithm 4, generating a new leaf key λ(cid:48)
4 and recomputing the path up to the
root. This results in the new tree shown in Figure 6. He then sends the key update message
4, gλ(cid:48)
4λ5 ) comprising his index as well as the path of public keys excluding the root, stores
the updated leaf key and tree key, and computes the new stage key with DeriveStageKey.
Upon receiving this key update message, Alice determines her new copath, which has been
modiﬁed by one of the new public keys sent by Edward. This is done by executing Algorithm 5.
From this, she computes the new tree key. Finally, she invokes DeriveStageKey to compute
the new stage key.
6 Security Analysis
We perform our security analysis in two parts.
First, we give a detailed computational security model for multi-stage GKE protocols, and
instantiate it with an unauthenticated version of our construction in which the initial leaf
keys are derived directly from the setup key and prekeys. This allows us to capture the core
security properties of the key updates, including PCS, without focusing on the properties of the
authenticated key exchange used for the initial construction. In the unauthenticated model, we
prove indistinguishability of group keys from random values using game-hopping.
Second, we show that authentication can be provided by deriving the initial leaf keys from a
non-interactive key exchange, whose security property also applies to the resulting tree key. We
give an example construction using the X3DH protocol [39] (extended with the static-static DH
key to provide more resilience against bad randomness and the KCI attack described in [33]), and
verify its authentication property using the Tamarin prover, a “security protocol veriﬁcation
tool that supports both falsiﬁcation and unbounded veriﬁcation in the symbolic model” [47].
Here, we model the tree construction as a “black-box” function of the leaf keys.
Remark 1 (On the choice of model). We adopt this approach because we believe that ART’s
complexity is beyond the scope of current computational proof techniques. In particular, our
freshness condition is already fairly complex, and its interaction with a modern AKE model
with identity key corruptions leads to a state space explosion in the proof’s cases.
We believe there is valuable future work to be done by increasing our model accuracy, for
example by developing a systematic approach to covering the distinct cases above, or by adopting
an ACCE-style deﬁnition to explicitly capture signatures and MACs.
15
6.1 Computational Model
We build on the multi-stage deﬁnition of Fischlin and Günther [22], in which sessions admit
multiple stages with distinct keys and the adversary can Test any stage. We extend their
deﬁnition to group messaging by allowing multiple peers for each session. Our model deﬁnes a
security experiment as a game played between a challenger and a probabilistic, polynomial-time
adversary. The adversary makes queries through which it can interact with the challenger,
including the ability to relay or modify messages but also to compromise certain secrets.
The adversary eventually chooses a so-called Test session and stage, receiving—uniformly at
random—either its true key or a random key from the same distribution. It must then decide
which it has received, winning the game if it is correct. Thus, a protocol secure in this model
enjoys the property that an adversary cannot tell its true keys from random.
Similar key exchange security models generally use Activate and Run queries for the adversary
to interact with the protocol algorithms. With these queries, however, there is no clear way for
them to instruct agents to choose one of multiple possible actions—for example, whether or
not to perform a key update. In order to clarify the distinction, we split the traditional Run
algorithm into PRecv (“protocol receive”, to receive and process a message from A) and PSend
(“protocol send”, to receive instructions from and then send a message to A).
Apart from this split, we use a standard set of queries and give their precise details in
Table 2 on page 30. The queries comprise Create, ASend and ARecv (which allow the adversary
to interact with honest participants); RevSessKey and RevRandom (which model corruption of
keys used in the protocol); and Test and Guess (which are used in the security game). Since we
work in an unauthenticated model, we do not need a RevLTK query.
Sessions and stages Agents may have multiple parallel conversations with various peers.
We refer to a session as a local, long-lived communication at a particular agent; for example,
Alice may have a session with peers Bob and Charlie. Sessions at an agent u are uniquely
zero-indexed in creation order; thus for example we can refer uniquely to Alice’s fourth session
by the pair (u, i) = (Alice, 3).
Sessions are updated in stages over time, as messages are exchanged and updates processed.
Stages of a session are zero-indexed in time order, so e.g., we denote the initial stage of session
(Alice, 3) by the session identiﬁer or sid (Alice, 3, 0). Later stages of (Alice, 3) are then denoted
(Alice, 3, 1), (Alice, 3, 2), and so on.
Deﬁnition 1 (Session state). For agent u, session counter i and stage counter t, the session
state π comprises:
(i) π.u, the identity u of the current agent
(ii) π.ik, the identity key of the current agent
(iii) π.ek, the ephemeral prekeys of the current agent
(iv) π.λ, the leaf key of the current stage
(v) π.tk, the tree key of the current stage
(vi) π.sk, the stage key of current stage
(vii) π.T , the current tree (with ordered nodes) with public keys stored at each node
(viii) π.idx, the position of the current agent in the group
(ix) π.IDs, an ordered list of agent identiﬁers and leaf keys for the group, where the index of
each entry is the index of the corresponding leaf in the tree
(x) π. ¯P , the copath of the current agent
16
Where considering multiple distinct session states, we refer to π = π(u, i, t) as the state of the
tth stage of agent u’s ith session.
Values in π roughly correspond to variables in a protocol implementation. However, for the
security deﬁnitions we also keep track of some additional “bookkeeping” state σ. Values in σ are
only used for the security game, and do not correspond to variables in a protocol implementation.
Deﬁnition 2 (Bookkeeping state). For agent u, session counter i and stage counter t, the
bookkeeping state σ of (u, i, t) is an ordered collection of the following variables.
(i) σ.i, the index of the current session among all sessions with the same agent
(ii) σ.t, the index of the current stage in the session (initialised to 0 and incremented after
each new stage key is computed)
(iii) σ.status, the execution status for the current stage. Takes the value active at the start
of a stage, and later set to either accept or reject when the stage key is computed
(iv) σ.HonestKeys, the set of ephemeral keys honestly generated in the current stage
(v) σ.(cid:96)[i(cid:48)], the number of leaf keys received so far from node i(cid:48) in π.T (when i(cid:48) = π.idx, this is
the number of leaf keys that (u, i) has generated so far).
Deﬁnition 3 (sid). By sid(π, σ) we mean the triple (π.u, σ.i, σ.t). Agents are unique, session
counters monotonically increase and session state does not change without the stage changing.
Therefore, such a tuple (u, i, t) uniquely identiﬁes states π and σ if they exist.
Deﬁnition 4 (Multi-stage key exchange protocol). A multi-stage key exchange protocol Π
is deﬁned by a keyspace K, a security parameter λ (dictating the DH group size q) and the
following probabilistic algorithms:
(i) (x, gx) :=$ KeyExchangeKeyGen(): generate DH keys
(ii) Activate(x, ρ, peers) → (π, σ): the challenger initialises the protocol state of an agent u
by accepting a long-term secret key x, a role ρ and a list peers of peers, creating states π
and σ, assigning σ.i to the smallest integer not yet used by u, and returning (π, σ)
(iii) PRecv(π, m) → π(cid:48): an agent receives a message m, updating their protocol state from π
to π(cid:48)
(iv) PSend(π, d) → π(cid:48), m: an agent receives some instructions d and sends a message m,
updating their protocol state from π to π(cid:48)
We set a maximum group size γ, which is the largest group that an agent is willing to create.
This can be application-speciﬁc.
6.2 Analysis: Unauthenticated Protocol
We can now analyse our protocol in the model of Section 6.1. In this analysis we do not consider
the use of long-term keys, considering them instead as used in the ﬁrst stage. Our freshness
criteria allow the adversary to corrupt the random values or key from any stage, but rule out
trivial attacks created by such corruptions. We deﬁne
KeyExchange(π.ik , IDs0, ek , SUK ) := SUK ek .
That is, our initial leaf nodes are constructed unauthenticated from initial ephemeral keys. In
this setting we do not need the MACs which are deﬁned in the protocol algorithms, and we do
not make any assumptions here on their security properties.
17
We deﬁne PSend(π, d) as follows. First, validate that d is one of “create-group” or “update-
key”, or else abort, setting the session state to reject. Then, if d is “create-group”, execute
the initiator’s setup algorithm from Section 5.1; if d is “update-key”, execute the initiator’s
update algorithm from Section 5.2. These algorithms are given formally as SetupGroup and
UpdateKey in Section 8 on page 29.
We deﬁne PRecv(π, m) as follows. For a session with σ.t = 0, validate that m is of the
expected format, and if so then extract from it the relevant tree data and execute the responder’s
setup algorithm deﬁned in Section 5.1. For a session with σ.t > 0, again validate m but execute
the responder’s update algorithm deﬁned in Section 5.2. These algorithms are given formally as
ProcessSetupMessage and ProcessUpdateMessage in Section 8 on page 29.
Deﬁnition 5 (Matching). We say that two stages with respective sids (u, i, t) and (v, j, s) match
if they have derived the same key and both have σ.status = accept.
Deﬁnition 6 (Freshness of a copath). Let ¯P = ¯P0, . . . , ¯P| ¯P|−1 be a list of group elements
representing a copath and let Λ = λ0 . . . λn−1 be a list of group elements representing leaf keys.
We say that ¯P is the ith copath induced by Λ precisely if, in the DH tree induced by Λ, each ¯Pj
is the sibling of a node on the path from λi to the tree root, and that ¯P is induced by Λ if for
some i it is the ith copath induced by Λ.
We say that a copath ¯P is fresh if both
(i) ¯P is the ith copath induced by some Λ, and
(ii) for each gλj ∈ Λ, both
(a) there exists a stage with sid(π, σ) = (u, i, t) such that (λj, sid(π, σ)) ∈ σ.HonestKeys,
and
(b) no RevRandom(u, i, t) query was issued.
Intuitively, a copath is fresh if it is built from honestly-generated and unrevealed leaf keys. In
particular, the copath’s owner’s leaf key must also be unrevealed, since it is included in Λ.
Deﬁnition 7 (Freshness of a stage). We say that a stage with sid (u, i, t) deriving key sk is
fresh if
(i) it has status accept,
(ii) the adversary has not issued a RevSessKey(u, i, t) query,
(iii) there does not exist a stage with sid (v, j, s) such that the adversary has issued a query
RevSessKey(v, j, s) whose return value is sk, and
(iv) one of the following criteria holds:
(a) the current copath is fresh, or
(b) t > 0 and the stage with sid (u, i, t − 1) is fresh.
Intuitively, a stage is fresh if either all of the leaves in the current tree are honestly generated
and unrevealed or the previous stage was fresh. The latter disjunct captures a form of PCS: if
an adversary allows a fresh stage to accept, subsequent stages will also be fresh.
Remark 2 (Freshness of the group creator’s ﬁrst stage). Our freshness predicate encodes stronger
trust assumptions on the initiator’s ﬁrst stage than it does on subsequent updates, as discussed
in Section 3.2.2. Indeed, by criterion 7(iv-b) the creator’s ﬁrst stage is fresh only if their ﬁrst
copath is fresh. This copath is induced by the initial λj, which are added to σ.HonestKeys
during the creator’s ﬁrst stage. Thus, by criterion 6(ii-a), if the adversary issues a RevRandom
query against that stage then it will no longer be fresh. This is true until all the λj from the
initial stage have been replaced, at which point criterion 6(ii) is fulﬁlled by the stages replacing
them.
18
Capturing strong security properties Our notion of stage freshness captures the strong
security properties discussed in Section 3, by allowing the adversary to Test stages under a
number of compromise scenarios.
Authentication states that if the ephemeral keys used in a stage are from an uncorrupted
stage then only the agents who generated them can derive the group key. Indeed, for a stage to
be fresh either it or one of its ancestors must have had a fresh copath; that is, one that is built
only from λj which were sent by other honest stages.
Forward secrecy is captured through clause (iv)a and the deﬁnition of the RevRandom query.
Indeed, suppose Alice accepts a stage t and then updates her key in stage t + 1. An adversary
who queries RevRandom(. . . , t + 1) does not receive the randomness from stage t, which therefore
remains fresh. Our model thus requires the key of stage t to be indistinguishable from random
to such an adversary.
PCS is captured through clause (iv)b. Indeed, suppose the adversary has issued RevRandom
queries against all of one of Alice’s session’s stages from 0 to t except some stage 0 ≤ j < t.
Absent other queries, stage j is therefore considered fresh, and hence by clause (iv)b stages
j + 1, j + 2, . . . , t are fresh as well. Our model thus requires their keys to be indistinguishable
from random.
Deﬁnition 8 (Security experiment). At the start of the game, the challenger generates the
public/private key pairs of all nP parties and sends all public info including the identities and
public keys to the adversary. The adversary then asks a series of queries before eventually
issuing a Test(u, i, t) query, for the tth stage of the ith session of user u. We can equivalently
think of the adversary as querying oracle machines πi
u for the ith session of user u.
Our notion of security is that the key of the Tested stage is indistinguishable from random.
Thus, after the Test(u, i, t) query, the challenger ﬂips a coin b :=$ Uniform({0, 1}). With proba-
bility 1/2 (when b = 0) it reveals the actual stage key of user u’s ith session at stage t to the
adversary, and with probability 1/2 (when b = 1) it reveals a uniformly randomly chosen key
instead. The adversary is allowed to continue asking queries. Eventually the adversary must
guess the bit b with a Guess(b(cid:48)) query before terminating. If the Tested (u, i, t) satisﬁes fresh
and the guess is correct (b = b(cid:48)), the adversary wins the game. Otherwise, the adversary loses.
We say that a multi-stage key exchange protocol is secure if the probability that any
probabilistic polynomial-time adversary wins the security experiment is bounded above by
1/2 + negl(λ), where negl(λ) tends to zero faster than any polynomial in the security parameter
λ. We now give our theorem and sketch a proof.
Remark 3 (Partnering experiment). Our freshness condition is separated into two parts, in-
distinguishability and partnering security, following the style of Brzuska, Fischlin, Warinschi,
and Williams [10]. In this setting, indistinguishability is proved under the restriction that
RevSessKey queries cannot output the Tested session key, and a separate game is used to show
a form of authentication: that the session key is only derived by sessions which “should” derive
it. In our context, because (i) we are working in an unauthenticated model, and (ii) all of the
values upon which participants should agree are included as arguments to the session key KDF,
in this case the partnering experiment and its corresponding security bound mostly consist of
administrative bookkeeping. They appear in Appendix C.
Theorem 1. Let nP, nS and nT denote bounds on the number of parties, sessions and stages in
the security experiment respectively. Under the PRF-ODH assumption with KDFs modeled as
19
random oracles, the success probability of any PPT adversary against the security experiment
for our protocol is bounded above by
(cid:0)nPnSnT
(cid:1)
1
2
+