opencv/modules/core/include/opencv2/core/private.hpp
Line 119 in c3e8a82
|  #define CV_MALLOC_ALIGN 64  
---|---  
there is a problem: if a small struct which is created by `new` is stored with
cv::Mat, the memory increases a lot, if CV_MALLOC_ALIGN = 64, else it is
normal when CV_MALLOC_ALIGN=8
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct OdometryEigen
    {
        Eigen::Matrix p_cov;
        Eigen::Matrix v_cov;
        Eigen::Matrix R;
        Eigen::Matrix t;
        Eigen::Matrix v;
    };
    struct Impl
        uint32_t s;
        uint32_t ns;
    };
    struct TimestampOut
    {
        TimestampOut()
            : impl_(new Impl)
        {
        }
        std::shared_ptr impl_;
    };
    #define ALIGN_BYTE 8 
    struct AlignedMat // opencv mat alloc
    {
        AlignedMat()
            : data_(NULL)
        {
        }
        AlignedMat(int size)
            : size_(size)
            , data_(NULL)
        {
            init();
        }
        AlignedMat(const AlignedMat& in)
        {
            size_ = in.size_;
            init();
        }
        bool init()
        {
            int ret;
            std::cerr  add_thread = std::make_shared(&addImage);
        add_thread->detach();
        // add odo
        addOdometry();
        return 0;
    }
    void addImage()
    {
        static uint64_t i = 0u;
        boost::circular_buffer img_buffer(100);
        uint64_t num = 1e7;
        float delta_t = 1e-3;
        (void) delta_t;
        for(; i (width) * height * 3u;
            uint8_t buffer_stack[buffer_size];
            (void)  buffer_stack;
            uint8_t*               buffer = new uint8_t[buffer_size];
            // set image data
    #if USE_ALIGNED
            ImageMat image(buffer_size);
    #else
            ImageMat image;
            image.mat.create(width, height, CV_8UC3);
            if (image.mat.isContinuous())
            {
                std::cerr  odo_buffer(1000);
        uint64_t num = 1e7;
        float delta_t = 1e-3;
        (void) delta_t;
        for(; i < num; i++)
        {
            OdometryEigen odo;
            usleep(1e5);
            std::cerr << i << "th odo run \n";
            odo_buffer.push_back(odo);
            std::cerr << "odo buffer size: " << odo_buffer.size() << std::endl;
        }
        return;
    }
thanks.