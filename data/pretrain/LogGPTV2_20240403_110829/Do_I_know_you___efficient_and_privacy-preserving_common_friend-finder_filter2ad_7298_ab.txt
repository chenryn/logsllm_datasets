Common Friends service consists of two sub-protocols:
• A capability distribution protocol (Fig. 1) which is executed
periodically by every user in the system, and
• A friend ﬁnding protocol (Fig. 2) which is executed between
two users whenever they want to ﬁnd common friends. (To
ease presentation, we ﬁrst present the basic protocol variant,
and discuss further variants in Sec. 2.3, 2.4).
Capability distribution. We assume the presence of a server S, in
the form of a social network application, which is used to distrib-
ute capabilities, as depicted in Fig. 1. First, user U and server S
User U(cid:1)
Inputs:(cid:1)
pwdU, CertS(cid:1)
Server S(cid:1)
Input:(cid:1)
SKS(cid:1)
Establish a secure connection(cid:1)
Establish a secure connection
using CertS (server auth) and pwdU (user auth)(cid:1)
using Cert (server auth) and pwd (user auth)
cU (cid:1)R {0,1}160
cU(cid:1)
RU(cid:1)
Store (IDU, cU)(cid:1)
(cid:7)
(
) s.t.
IDj, c j
(cid:6)
(cid:8)
IDj (cid:2) f (IDU )
(cid:9)(cid:6)
RU (cid:1)
(cid:3)
(cid:6)
(cid:4)
(cid:5)(cid:6)
Figure 1: Common Friends Capability distribution.
establish a secure channel. We use CertS for server authentication
and let the social network authenticate the user based on his pass-
word pwdU . U periodically generates a random capability cU from
a large space (e.g., 160-bits) and uploads it to S via the established
channel. S stores cU , along with the social network user identiﬁer
IDU , and returns the list RU = {(IDj, cj )|IDj ∈ f (IDU )}, i.e.,
the identiﬁers and corresponding capabilities of each friend of U’s.
This protocol is run periodically in order to keep RU up-to-date.
Observe that RU contains capabilities that uniquely identify U’s
friends. They are distributed over a conﬁdential and authentic chan-
nel, thus ensuring that U cannot claim non-existent friendships.
The capability distribution system is implemented on top of Peer-
Share, a generic scheme for securely distributing data among social
groups, which we developed earlier [43].
Friend Finding. The friend ﬁnding protocol involves two users,
I and R, members of the given social network. Let I be the user
that initiates the protocol by contacting user R to ﬁnd their com-
mon friends. The protocol, illustrated in Fig. 2, starts with I and
R exchanging their (Difﬁe-Hellman) public keys, i.e., P KI, and
P KR, respectively. The resulting shared Difﬁe-Hellman (DH) key
KIR will be used for two purposes: (a) to protect the messages
exchanged as part of the Private Set Intersection (PSI) protocol
protocol executed next and (b) to limit access if the PSI protocol
determines that I and R have common friends.
To avoid man-in-the-middle attacks, the DH channel needs be
cryptographically bound to the protocol instance. To this end, rather
than inputing the set RI (respectively RR), I (R) builds the set RI
(RR), by appending DH public keys P KI, P KR to each capability
in RI (RR). This transformation has negligible impact on perform-
ance, as PSI protocols hash each element in the list before further
processing. The resulting sets:
RI = {(cj||P KI||P KR) | (IDj, cj) ∈ RI )}, and
RR = {(ck||P KI||P KR) | (IDk, ck) ∈ RR)}
are used as inputs to the PSI protocol executed next.
Note that the friend ﬁnding protocol can trivially be extended
to determine whether two users are direct friends of each other,
provided that each user U adds cU to the list of capabilities given
in input to the PSI protocol.
2.3 PSI vs PSI-CA Instantiations
We now present the PSI instantiations we use to privately inter-
sect users’ capabilities, as stated in the friend ﬁnding protocol.
161
Initiator I(cid:1)
Inputs:(cid:1)
SKI,PKI,RI(cid:1)
Responder R(cid:1)
Inputs:(cid:1)
SKR,PKR,RR(cid:1)
SKI, PKI(cid:1)
SKR, PKR(cid:1)
DH-KeyExchange(cid:1)
PKR, KIR(cid:1)
PKI, KIR(cid:1)
der the OneMore-DH assumption [8]. Complexities are similar to
the PSI protocol in [17], i.e., linear in the size of sets. Speciﬁcally,
computation complexity is dominated by O(m + n) modular ex-
ponentiations (in prime order groups with random exponents taken
from a subgroup), while communication complexity corresponds
to transferring 2m group elements and n outputs of a hash function
(assuming that m is the size of set held by the initiator, and n that
of the responder).
2.4
Improving Efﬁciency with Bloom Filter
based PSI (BFPSI)
RI (cid:1)
(cid:3)
(cid:6)
(cid:4)
(cid:5)(cid:6)
)
(
c j PKI PK R
s.t. (IDj, c j ) (cid:2) RI
(cid:7)
(cid:6)
(cid:8)
(cid:9)(cid:6)
RR (cid:1)
(cid:3)
(cid:6)
(cid:4)
(cid:5)(cid:6)
)
(
ck PKI PK R
s.t. (IDk, ck ) (cid:2) RR
(cid:7)
(cid:6)
(cid:8)
(cid:9)(cid:6)
RI
PSI(cid:1)
RR
RR (cid:1) RI
Figure 2: The friend ﬁnding protocol in the Common Friends
service (basic variant). First, I and R run a DH key exchange.
Next, friend capabilities are bound to public keys and input
sets to the PSI protocol are populated. Finally, on completion
of PSI, R learns the common friends (and nothing else).
Available PSI Protocols. A few different instantiations of PSI have
been proposed, with different security models, assumptions, and
complexities. PSI can be constructed using generic Garbled Cir-
cuits [51, 29], Oblivious Polynomial Evaluation [23, 37], or Obli-
vious Pseudo-Random Functions (OPRFs) [26, 32, 17, 33].
According to the performance evaluations in [18], the most efﬁ-
cient protocol is the OPRF-based construction by De Cristofaro and
Tsudik [17]. It is secure, in the presence of honest-but-curious ad-
versaries, under the OneMore-RSA assumption in the Random Or-
acle Model (ROM) [8]. Assuming that m is the size of set held by
one party (the Responder), and n that of the other party (the Initi-
ator), the protocol in [17] incurs O(m+n) computational and com-
munication complexities. In particular, the former is dominated by
O(m + n) modular exponentiations (speciﬁcally, RSA signatures),
while the latter corresponds to transferring 2n group elements and
m outputs of a cryptographic hash function.
PSI-CA Variants. A possible alternative could be to use a more
restrictive variant that only yields the number of common friends,
and not their identities. To this end, we turn to Private Set Inter-
section Cardinality (PSI-CA) protocols [23, 4, 27, 14]: PSI-CA
allows two parties, each holding a private set, to interact in a cryp-
tographic protocol such that one party learns the magnitude of the
set intersection (and nothing else), while the other obtains nothing.
Clearly, PSI-CA could be used instead of PSI to let users learn only
how many friends they have in common. This corresponds to the
cardinality-only protocol variant presented in Sec. 2.1 On the one
hand, this approach provides strictly more stringent privacy guar-
antees. On the other hand, however, certain application scenarios
may require users to know the speciﬁcs of which friends are com-
mon, e.g., to make better informed access control/trust decisions.
In this case, PSI would be the preferred option.
To the best of our knowledge, the most efﬁcient PSI-CA protocol
is presented in [14], with honest-but-curious security in ROM, un-
Recall from Sec. 2.2 that capabilities are generated at random
from a large space, thus, they are high-entropy objects and imprac-
tical to enumerate. Consequently, we do not necessarily need to
use traditional PSI protocols (designed to work with low-entropy,
possibly enumerable, items): since input sets only include high-
entropy items, we can rely on more efﬁcient techniques, which
realize the same set-intersection functionality, with same provable
security properties.
Intuition. A straightforward approach for private set intersection
is to let both parties hash each item in their set (using a crypto-
graphic hash function) and send the results to each other. Since
the hash is one-way, parties cannot invert the hash function and
can only learn the set intersection by ﬁnding matches between the
received hashes and those computed over their own set items. How-
ever, if set items are low-entropy objects, a malicious party could
test, off-line, for the presence of a given item in counterpart’s set,
regardless of whether or not it belongs to the intersection. As a con-
sequence, PSI protocols need more sophisticated techniques, rely-
ing on public-key cryptography, to prevent parties from succeeding
in such attacks.
On the other hand, if set items are high-entropy objects, e.g.,
generated at random from a large space as in the case of bearer cap-
abilities, then the testing attack would not work since it is imprac-
tical to enumerate sets. Thus, we notice that the use of traditional
PSI is actually an “overkill” and the naive hash-based approach de-
scribed above sufﬁce to realize the private set intersection function-
ality. Besides removing the need for a number of public-key crypto
operations (at least) linear in the size of sets, this approach enables
the use of optimization/compression techniques, like Bloom ﬁl-
ters [10], which we present below. We anticipate that the resulting
Bloom ﬁlter based protocol will disclose the identity of common
friends to both parties. Thus, it corresponds to the mutual output
protocol variant, discussed in Sec. 2.1.
Bloom Filters [10]. A Bloom Filter (BF) is a data structure used
to efﬁciently represent and test sets. Let us consider a set X =
{x1, . . . , xα} of α elements, and an array of β bits initialized to 0.
The notation BF(j) denotes the position j in the BF. The Bloom
Filter uses γ independent cryptographic hash functions h1, . . . , hγ
with range 1, . . . , β, salted with random (periodically refreshed)
nonces so that it cannot be tracked over time. For each element
x ∈ X, BF (hi(x)) is set to 1 for 1 ≤ i ≤ γ. To check whether an
element y is a member of X, we simply test if BF(hi(y)) equals 1
for all 1 ≤ i ≤ γ.
Note that Bloom ﬁlters introduce false positives, i.e., an element
might seem present although it was never inserted. The probability
p of false positive can be approximated as:
p = (1 − (1 − 1/β)γ·α)γ
It follows that the optimal value of γ that minimizes p is:
γ =
β
α
ln 2
162
Data
Description Notation
Bloom Filter sent by I BFI
Random value chosen by I
irand
Random value chosen by R rrand
Challenge set containing HMAC values
using ckey of elements in intersection
Response set containing HMAC values
rset
using rkey of elements in intersection
RI ∩ RR with possible false positives X
Actual RI ∩ RR X
cset
(cid:3)
Algorithms
DH Key-Exchange (I) KIR ← DH-Key(SKI , P KR)
DH Key-Exchange (R) KIR ← DH-Key(SKR, P KI )
Key Derivation Function KDF(·,·)
Message Authentication Code HMAC(key, message)
Keys
HMAC keys used by I and R, resp.
ckey, rkey
Table 3: New notation introduced for Bloom Filter based PSI.
Hence, the optimal size of the ﬁlter, for a desired false positive
probability p, using the optimal value of γ, can be estimated as:
(cid:12)− log2 p
(cid:13)
ln 2
β =
× α
(1)
(cid:3)
where α = max(m, n) in our Common Friends setting, assuming
m is the number of Initiator’s friends and n – that of Responder’s.
Using Bloom Filter based PSI (BFPSI). Fig. 3 illustrates how to
use a Bloom Filter based PSI (BFPSI) to realize the friend ﬁnding
protocol. New notation is summarized in Table 3.
As in the generic protocol description, interaction starts with user
I engaging user R, followed by a DH key exchange. I and R use
input sets, RI and RR, respectively, constructed as before. I inserts
every element of RI into a Bloom ﬁlter BFI which is then sent to
R. R can now discover the set X
of friends potentially shared with
I by testing every element of RR for membership in BFI.
Although the length of the Bloom ﬁlter primarily depends on
number of friends I and R have, it is also determined by the false
positive probability value. Observe that p affects not only commu-
nication but also computation overhead since the lower the value of
p is the higher the number of hash operations required to insert one
element into the Bloom ﬁlter. Therefore, a practical implementa-
tion cannot afford to choose a value of p that is negligible by the
usual standards for cryptographic algorithms. In our implementa-
−4. However, we now need to account for
tion, we choose p = 10
the possibility that the protocol returns more common friends than
there actually exist, due to the small yet non-negligible probability
of false positives. Since the input sets are impractical to enumer-
ate, users cannot maliciously exploit the false positive rate to claim
unwarranted friendships or violate counterpart’s privacy. Nonethe-
less, we need the means for I and R to verify that the output of the
protocol does indeed consist of their mutual friends (and remove
the false positives).
To this end, we introduce a simple challenge-response protocol,
illustrated in Fig. 3, where R asks I to prove knowledge of the cap-
abilities that constitute the set X as follows:
every element of RR for presence in BFI.
• R ﬁrst constructs a candidate intersection set X
by testing
• R then constructs a challenge set cset consisting of HMACs
(key-hashed message authentication codes) computed on every
. A freshly generated random key ckey is used as
item in X
the key for the HMACs in cset. Note that we need HMACs,
rather than MACs, to ensure the one-wayness of the function.
• R sends cset and ckey, along with a random coin rrand.
(cid:3)
(cid:3)
163
Initiator I(cid:1)
Inputs:(cid:1)
SKI,PKI,RI(cid:1)