## PostgreSQL xlog $PGDATA and zfs snapshot based central backup & PITR case   
### 作者                                                                   
digoal                                                                   
### 日期                                                                   
2014-07-01                                                                 
### 标签                                                                   
PostgreSQL , ZFS , Linux , snapshot , PITR   
----                                                                   
## 背景          
最近在写一个集中式的PostgreSQL基于块的增量备份的CASE.  
(因Oracle有块级别增量备份, PG这块是个空白, 不过可以通过第三方软件来实现)  
视频参考6月28日的杭州PG交流视频  
http://pan.baidu.com/share/home?uk=1982970774#category/type=0  
方案参考  
http://blog.163.com/digoal@126/blog/static/163877040201451711013770/  
本文将写一下实际的操作和优化点.  
集中备份主机环境 :   
```  
CentOS 6.5 x64  
ZFS 0.6.3  
```  
磁盘12*4TB SATA + 2*300G SAS, 其中4TB的盘使用RAW模式, 未配置RAID卡. 300G的使用RAID1  
内存32G  
```  
CPU Intel(R) Xeon(R) CPU E5-2609 v2 @ 2.50GHz 8核  
```  
架构图 :   
![pic](20140701_01_pic_001.png)  
归档主机配置(本例归档主机和备机主机使用同一台主机) :   
配置ZFS, 开启压缩, 同时注意写性能至少要和网卡带宽相当, 否则容易造成瓶颈. 一旦造成瓶颈, 可能导致主库XLOG堵塞膨胀(因为归档完成的XLOG才可以重用或被删除).  
考虑到写居多, 所以考虑加一个性能好的ilog设备. l2arc没必要加.  
zpool使用raidz1+ilog+spare的模式.  
raidz1盘的数量9=2^3+1, 实际上本例使用的盘数11(当然你可以多vdev strip的模式例如12块盘分4组vdev raidz1 3+3+3+3, 可用容量为8块盘).  
1个ilog因为这个设备底层使用了RAID1 的模式, 所以没有再次mirror. 如果底层是JBOD模式的话, 建议用mirror防止ilog数据损坏. 1块hot spare.  
磁盘个数的选择参考 http://blog.163.com/digoal@126/blog/static/163877040201451725147753/  
扇区大小选择4KB.   
```  
# zpool create -o ashift=12 zp1 raidz1 sdb sdc sdd sde sdf sdg sdh sdi sdj sdk sdl spare sdm   
# zpool add zp1 log /dev/sda4  
```  
配置zpool 根 zfs默认选项, 后面创建的zfs可以继承这些选项.  
```  
zfs set compression=lz4 zp1  
zfs set canmount=off zp1  
zfs set atime=off zp1  
```  
创建归档目录, 日志目录, PGHOME目录等.  
```  
zfs create -o mountpoint=/pg168104 zp1/pg168104  
zfs create -o mountpoint=/pg_log zp1/pg_log  
zfs create -o mountpoint=/pg_home zp1/pg_home  
zfs create -o mountpoint=/pg_arch zp1/pg_arch  
df -h  
zp1/pg168104     35T   32G   35T   1% /pg168104  
zp1/pg_log       35T  256K   35T   1% /pg_log  
zp1/pg_arch      35T  256K   35T   1% /pg_arch  
zp1/pg_home      35T  149M   35T   1% /pg_home  
```  
配置PostgreSQL归档, 例如rsync服务端, nfs, ftp 等, 如果使用NFS注意固定一下NFS端口.  
本文以NFS为例介绍归档配置.   
配置NFS端口固定  
```  
# grep "^[A-Z]" /etc/sysconfig/nfs   
RQUOTAD_PORT=875  
LOCKD_TCPPORT=32803  
LOCKD_UDPPORT=32769  
MOUNTD_PORT=892  
STATD_PORT=662  
STATD_OUTGOING_PORT=2020  
RDMA_PORT=20049   
```  
配置nfs目录, 每个PG集群一个目录, 存放该集群的归档文件.  
```  
# mkdir /pg_arch/pg168104  
# vi /etc/exports  (注意如果主节点有流复制的HA的话, 主备都需要配置权限)  
/pg_arch/pg168104       192.168.168.16/32(rw,no_root_squash,sync)  
/pg_arch/pg168104       192.168.168.17/32(rw,no_root_squash,sync)  
```  
开启NFS服务, OR service nfs reload.  
```  
# service nfs start  
# chkconfig nfs on  
```  
主节点集群配置( (注意如果主节点有流复制的HA的话, 主备都需要配置) )  
配置nfs挂载, 数据库启动用户的权限, 如果有必要的话, 可以配置NFS超时.  
```  
# mkdir /pgarch  
# vi /etc/fstab  (尽量不要配置在这里, 如果挂载失败的话, 可能导致操作系统启动失败)  
192.168.168.131:/pg_arch/pg168104 /pgarch nfs     defaults,tcp  0 0  
# mount -a  
```  
推荐以下配置  
另一种是配置在启动脚本里面  
```  
# vi /etc/rc.local  
/bin/mount -t nfs -o tcp 192.168.168.131:/pg_arch/pg168104 /pgarch  
# df -k  
192.168.168.131:/pg_arch/pg168104  
                     37497821184         0 37497821184   0% /pgarch  
```  
创建归档目录  
```  
# mkdir -p /pgarch/arch  
# chown postgres:postgres /pgarch/arch  
# chmod 777 /pgarch/arch  
```  
主节点集群配置归档命令(如果以前没有开启归档的话, 需要重启数据库开启归档)  (注意如果主节点有流复制的HA的话, 主备都需要配置)  
首先要配置SUDO, 因为NFS挂载过来权限后面需要调整, 所以最好使用SUDO以免归档和还原失败.  
```  
sudoedit /etc/sudoers  
#Defaults    requiretty  
postgres ALL=(ALL) NOPASSWD: /bin/cp  
postgres ALL=(ALL) NOPASSWD: /usr/bin/test  
postgres ALL=(ALL) NOPASSWD: /bin/mkdir  
```  
配置归档和还原命令 :   
```  
vi $PGDATA/postgresql.conf  
archive_mode = on  
archive_command = 'DIR=/pgarch/arch/`date +%F`; sudo test ! -d $DIR && sudo mkdir $DIR; sudo test ! -f $DIR/%f && sudo cp %p $DIR/%f; chmod +r $DIR/%f'  
vi $PGDATA/recovery.conf  
restore_command = 'cp /pgarch/arch/*/%f %p'  
pg_ctl reload  
```  
主备同时配归档没有问题(因为原版的PostgreSQL备节点不会触发归档), 除非你像我那样改了PG代码.  
http://blog.163.com/digoal@126/blog/static/163877040201452004721783/  
流复制主机(PITR)配置 :   
配置ZFS(同上)  
考虑到写居多, 所以需要加一个ilog设备. l2arc没必要加.  
zpool使用raidz1+ilog+spare的模式, 盘的数量11+1+1, 1个ilog因为这个设备底层使用了RAID1 的模式, 所以没有再次mirror.如果底层是JBOD模式的话, 建议用mirror防止ilog数据损坏.  
扇区大小选择4KB.  
```  
# zpool create -o ashift=12 zp1 raidz1 sdb sdc sdd sde sdf sdg sdh sdi sdj sdk sdl spare sdm   
# zpool add zp1 log /dev/sda4  
# zpool status  
  pool: zp1  
 state: ONLINE  
  scan: none requested  
config:  
        NAME        STATE     READ WRITE CKSUM  
        zp1         ONLINE       0     0     0  
          raidz1-0  ONLINE       0     0     0  
            sdb     ONLINE       0     0     0  
            sdc     ONLINE       0     0     0  
            sdd     ONLINE       0     0     0  
            sde     ONLINE       0     0     0  