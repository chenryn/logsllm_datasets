shows, the ﬁlters have similar packet drop rates, and the
gray-dashed line has a slope of 1.0. The SPI ﬁlter has an av-
erage drop rate of 1.56% compared to 1.51% for the bitmap
ﬁlter. This is because that the SPI ﬁlter knows the exact
time of closed connections and can therefore drop packets
precisely than the bitmap ﬁlter.
5
.
3
0
.
3
5
.
2
0
.
2
5
.
1
0
.
1
)
%
(
r
e
t
l
i
f
p
a
m
t
i
b
e
h
t
f
o
e
t
a
r
p
o
r
D
1.0
1.5
2.0
2.5
3.0
Drop rate of the SPI filter (%)
ing attack packets with address tuples in the form of
{saddr , sport, daddr , dport}, where saddr, sport, and
dport are chosen at random; however, daddr is conﬁned
to the address space of the given sub-networks. The ran-
dom attack packets are generated at the rate of 500K pack-
ets per second, which is about 20 times faster than the nor-
mal trafﬁc packet rate in the trace data. The attack trafﬁc
is mixed with the normal packet trace and then fed to the
bitmap ﬁlter. To prove the effectiveness of the bitmap ﬁl-
ter, each attack packet is veriﬁed whether it penetrates the
bitmap ﬁlter or not. The result of the test is shown in Fig-
ure 5. The attack begins at the 10800th second.
In Fig-
ure 5-a, the black line represents the number of packets that
penetrates the bitmap ﬁlter. The light-gray area indicates the
number of normal packets, while the dark-gray area shows
the number of attack packets. We can see that the amount
of penetrated trafﬁc is similar to normal trafﬁc as the black
line ﬁts the border of the light-gray area. Figure 5-b shows
the ﬁlter rate of attack packets. In our simulation, almost all
attack packets (99.983% on average) are ﬁltered out. The
result thus shows that the 512K bytes {4×20}-bitmap ﬁlter
with 3 hash functions can effectively ﬁlter out attacks for
the small- or medium-scale client networks.
Figure 4. Comparison of the packet drop
rates of the SPI and the bitmap ﬁlters. The
gray-dashed line has a slope of 1.0.
5 Discussion
We also test
the ﬁltering rate of the bitmap ﬁlter.
In this simulation, an attack generator releases incom-
In this section, we discuss several issues related to the
bitmap ﬁlter, including the bitmap ﬁlter’s compatibility with
existing Internet protocols, possible attacks on the bitmap
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
a. Filter Performance
0
5000
10000
15000
20000
Time (in seconds)
b. Attack Filtering Rate
t
n
u
o
C
t
e
k
c
a
P
)
%
(
e
t
a
r
g
n
i
r
e
t
l
i
F
5
0
+
e
4
5
0
+
e
2
0
0
+
e
0
1
0
.
0
0
1
9
9
.
9
9
7
9
.
9
9
5
9
.
9
9
12000 14000 16000 18000 20000 22000
Time (in seconds)
Figure 5. The performance of the bitmap ﬁlter
for the mixed attack and normal trafﬁc.
ﬁlter, and design issues.
5.1 Compatibility
The bitmap ﬁlter is completely compatible with all client
initiated Internet protocols, including the hyper-text transfer
protocol (HTTP), the e-mail transmitting/receiving proto-
cols (SMTP, POP3, IMAP), the ﬁle transfer protocol (FTP)
using passive mode, the telnet protocol, and the secure shell
(SSH) protocol. Note that use of the bitmap ﬁlter does
not require modiﬁcation of existing network infrastructure.
However, since the ﬁlter drops all active requests sent to the
client network, some protocols that separate the command
and the data channel may be problematic. Protocols like the
active mode FTP or peer-to-peer protocols, will fail when
another data communication channel that initiates outside
the client network is required.
To solve the problem, these applications cat adopt the
hole punching technique. That is, when a client requires
active connections initiated by an outsider, it ﬁrst sends out
a packet to mark related bits in the bitmap ﬁlter. The remote
peer can then reach the client inside the protected network.
Take the active mode FTP as an example, and assume that
a client c needs the server s to transfer data to a port p. The
client can send a TCP or UDP packet with the address tuple
{c, p, s, x}, where x is a random port number, to the server.
Then, the server is allowed to actively connect to the port
p of the client before the marked corresponding bits on the
bitmap ﬁlter expire.
Since a client always establishes a command channel
with outsiders before creating more data channels, most
protocols that require extra data channels should be able to
function properly with the hole punching technique. Net-
work administrators may also consider the solution de-
scribed in Section 5.3 if the purpose of deploying the bitmap
ﬁlter is only to mitigate bandwidth attacks against client net-
works.
5.2 Attack from Insiders
The bitmap ﬁlter may fail when an internal user are at-
tacking outsiders. Suppose that a client host is infected with
worms. When the client transmits a large volume of ran-
dom trafﬁc to other networks, the bitmap ﬁlter will be ﬁlled
with the malicious trafﬁc, which would increase the random
packet penetration rate. Given an attack rate r, the increased
bitmap utilization U will be roughly m·r·Te
. To prevent
such attacks, we can use a larger bitmap (by increasing n)
or shorten the expiry timer Te. As the results in Section 3.2
show, it may be safe to reduce the Te to around 3 or 5 sec-
onds because 99% of out-in packet delay is relatively short.
However, since there are limitations on both n and Te,
the bitmap ﬁlter may ultimately be compromised by the out-
2n
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
going attacks if the number of attackers inside the client
network continues to increase. The best way to avoid the
problem is to ﬁnd the attacking hosts and eliminate attack-
ers inside the client network. The design of the bitmap ﬁlter
is based on the principle of fairness. That is, a network will
not be attacked if it does not attack other networks.
5.3 Adaptive Packet Dropping
If the sole purpose of deploying a bitmap ﬁlter is to miti-
gate bandwidth attacks against client networks, the adminis-
trator may consider using adaptive packet dropping (APD),
instead of dropping all unmatched incoming packets. An
APD-enabled bitmap ﬁlter uses one or more indicators to
decide whether a “should-be-dropped” packet will be ac-
tually dropped. Two adaptive packet dropping designs are
shown as follows. The ﬁrst takes bandwidth utilization as
the indicator:
1. The edge router monitors the bandwidth utilization Ub
(0 ≤ Ub ≤ 1) of given links.
2. The bitmap ﬁlter runs as usual: it decides to pass or
drop a packet.
3. When a packet is to be dropped, the edge router drops
it with a probability of Ub.
The second design takes the ratio of incoming packets ver-
sus outgoing packets as the indicator:
1. The edge router monitors the incoming packet count
Pin and outgoing packet count Pout of given links.
2. The bitmap ﬁlter runs as usual: it decides to pass or
drop a packet.
3. Given two thresholds l, h (l < h), and an indicator
Pout , when a decision is made to drop a packet,
r = Pin
the edge router drops it with a probability of
⎧⎨
⎩
p =
0
r−l
h−l
1
, if r < l
, l ≤ r ≤ h
, if r ≥ h
RST+ACK ﬂags, are not used to mark bit vectors. An ex-
ception is that when a signal packet only takes SYN or FIN
ﬂag, it is used to mark the corresponding bits in the bitmap
ﬁlter. This is because an APD-enabled bitmap ﬁlter may
admit all incoming packets when the dropping probability
is low. In such a condition, the bitmap ﬁlter should only
keep those connections that are really connected. For at-
tacks like SYN-scanning or FIN-scanning, which cause the
target host to return SYN+ACK, FIN+ACK, or RST, mark-
ing the bitmap ﬁlter carefully can avoid a rapid increase in
the number of false negatives caused by attacks that reduce
the efﬁciency of the bitmap ﬁlter.
5.4 Colluding with Attackers
To effectively attack a client network protected by the
bitmap ﬁlter, attackers have to “guess” the connections with
hosts in the network. An attacker may consider installing
sniffers on clients inside the network or at peers connected
to the client network. Obviously, identifying connections at
peers is not efﬁcient, since a client network’s connections
are diverse. Besides, aggregates are easy to ﬁnd and rate-
limit if the number of monitored connected peers is not very
large.
Although it may be possible to identify the connection
states of client hosts inside a client network, it may not help
a potential attacker. First, in a switching environment, it is
hard for a client to capture trafﬁc from other hosts. Thus,
the client can only report its own connection states to at-
tackers. Since these connection states also form aggregates
to identify sniffers, they can be blocked easily. In addition,
if a sniffer can capture trafﬁc from all clients and report con-
nection states to attackers, short connections will be deleted
quickly from a bitmap ﬁlter with a short expiry timer Te.
In such a situation, the sniffer has to report new states to
attackers frequently, which increases the risk of the sniffers
and attackers being identiﬁed. Thus, colluding with attack-
ers may be not a suitable strategy to attack the bitmap ﬁlter.
6 Conclusions
Note that when adaptive packet dropping is enabled for in-
coming packets, the packet marking policy of the bitmap ﬁl-
ter must be modiﬁed. In a non-APD-enabled bitmap ﬁlter,
all outgoing TCP and UDP packets are considered in order
to mark corresponding bits in the bitmap. However, for an
APD-enabled bitmap ﬁlter, the outgoing packets are clas-
siﬁed as signal packets and data packets. Outgoing UDP
and TCP data packets without SYN, FIN, or RST ﬂags,
are still used for marking bit vectors. However, outgoing
TCP signal packets with SYN+ACK, FIN+ACK, RST, or
A client host that connects to the Internet will always re-
ceive random attack trafﬁc whether it is vulnerable or not.
With the rapid development of telecommunication tech-
nologies and hand-held mobile devices, new Internet clients
also receive massive amounts of random attack trafﬁc. To
ﬁlter out such trafﬁc, we propose a bitmap ﬁlter, which stops
most malicious trafﬁc. Our analyses and simulations show
that with a small amount of resources and proper conﬁgura-
tion, an ISP can efﬁciently ﬁlter out 90% to 99% of attack
trafﬁc for client networks.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
[20] A. Yaar, A. Perrig, and D. Song. SIFF: a stateless Internet
ﬂow ﬁlter to mitigate ddos ﬂooding attacks. In Proceedings
of Symposium on Security and Privacy, pages 130–143, May
2004.
[21] C. C. Zou, W. Gong, and D. Towsley. Code red worm prop-
agation modeling and analysis. In CCS ’02: Proceedings of
the 9th ACM conference on Computer and communications
security, pages 138–147, New York, NY, USA, 2002. ACM
Press.
References
[1] T. Anderson, T. Roscoe, and D. Wetherall. Preventing In-
ternet denial-of-service with capabilities. SIGCOMM Com-
puter and Communication Review, 34(1):39–44, 2004.
[2] B. H. Bloom. Space/time trade-offs in hash coding with
allowable errors. Communication of ACM, 13(7):422–426,
1970.
[3] R. Braden. Requirements for internet hosts – communica-
tion layers. RFC 1122, Oct. 1989.
[4] CheckPoint Software Technologies Ltd. Internal Security.
[5] S. Chen and Q. Song. Perimeter-based defense against high
bandwidth DDoS attacks. Transactions on Parallel and Dis-
tributed Systems, 16(8):526–537, June 2005.
[6] Z. Chen, L. Gao, and K. Kwiat. Modeling the spreak of
active worms.
In Proceedings of IEEE 22th Annual Joint
Conference of the IEEE Computer and Communications So-
cieties. IEEE INFOCOM, Mar. 2003.
[7] Cisco Systems. Cisco IPS 4200 Series Sensors.
[8] P. Ferguson and D. Senie. Network ingress ﬁltering: Defeat-
ing denial of service attacks which employ IP source address
spooﬁng. RFC 2827.
[9] J. Ioannidis and S. M. Bellovin.
Implementing pushback:
Router-based defense against DDoS attacks.
In Proceed-
ings of Network and Distributed System Security Sympo-
sium. ISOC, 2002.
[10] A. D. Keromytis, V. Misra, and D. Rubenstein. SOS: Se-
IEEE Journal on Selected Areas in
cure overlay services.
Communications, 22:176–188, Feb. 2004.
[11] R. Mahajan, S. M. Bellovin, S. Floyd, J. Ioannidis, V. Pax-
son, and S. Shenker. Controlling high bandwidth aggregates
in the network. SIGCOMM Computer and Communication
Review, 32(3):62–73, 2002.
[12] Microsoft Corporation. TCP/IP and NBT conﬁguration pa-
rameters for Windows XP.
[13] D. Moore, C. Shannon, and k claffy. Code-Red: a case study
on the spread and victims of an internet worm. In IMW ’02:
Proceedings of the 2nd ACM SIGCOMM Workshop on In-
ternet measurment, pages 273–284, New York, NY, USA,
2002. ACM Press.
[14] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Net-
work support for IP traceback. IEEE/ACM Transactions on
Networking, 9(3):226–237, 2001.
[15] A. C. Snoeren, C. Partridge, L. A. Sanchez, C. E. Jones,
F. Tchakountio, B. Schwartz, S. T. Kent, and W. T. Strayer.
Single-packet IP traceback.
IEEE/ACM Transactions on
Networking, 10(6):721–734, 2002.
[16] Sourceﬁre, Inc. Snort - the de facto standard for intrusion
detection/preveison.
[17] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and S. Surana.
Internet indirection infrastructure. IEEE/ACM Transactions
on Networking, 12(2):205–218, 2004.
[18] Y. Tang and S. Chen. Defending against internet worms:
A signature-based approach. In Proceedings of IEEE 24th
Annual Joint Conference of the IEEE Computer and Com-
munications Societies. IEEE INFOCOM, Mar. 2005.
[19] L. Torvalds. The Linux open-source operating system - ker-
nel archive.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE