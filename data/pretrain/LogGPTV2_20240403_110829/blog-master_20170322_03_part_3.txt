14\. 自增字段建议使用序列，序列分为2字节，4字节，8字节几种(serial2,serial4,serial8)。按实际情况选择。  禁止使用触发器的方式产生序列值。       
15\. 树形查询应该使用递归查询，尽量减少数据库的交互或JOIN。       
```  
with recursive ....  
;  
```  
16\. 批量导入、迁移数据时。推荐的步骤：  
```  
建表（不要建索引，约束，主键）；  
关闭autovacuum；  
导入；  
改大maintenance_work_mem；  
创建索引、约束、主键；  
analyze 表；  
打开autovacuum。  
```  
17\. 在函数中处理批量数据时，中间结果集尽量使用数组变量来代替临时表。如果临时表有非常庞大的数据时，才考虑使用临时表。        
18\. GIN索引的写优化，因为GIN的索引列通常是多值列，所以一条记录可能影响GIN索引的多个页，为了加快数据插入和更新删除的速度，建议打开fastupdate，同时设置合适的gin_pending_list_limit(单位KB)。autovacuum,vacuum,或者cache满时会自动合并，为了提高查询效率，可以将cache合并后进行查询。    
[《PostgreSQL 10 GIN索引 锁优化》](../201707/20170704_01.md)    
19\. BRIN索引优化，根据数据的相关性，以及用户需求的查询的范围，设置合适的```pages_per_range=n```。    
20\. b-tree索引优化，不建议对频繁访问的数据上使用非常离散的数据，例如UUID作为索引，索引页会频繁的分裂，重锁，重IO和CPU开销都比较高。    
[《PostgreSQL 优化CASE - 无序UUID性能问题诊断》](../201210/20121024_01.md)    
### 34. 管理规约 - 备份与恢复    
1\. 备份分为逻辑备份和物理备份，逻辑备份支持跨版本恢复，物理备份不支持跨版本恢复。    
2\. 逻辑备份不支持时间点恢复，逻辑备份为库级一致性备份。    
3\. 逻辑备份需要持有表的共享锁，与DDL会冲突，因此如果业务系统有可能执行DDL时，不建议使用逻辑备份。    
4\. 物理备份需要开启归档，备份时需要备份数据文件以及归档。    
5\. 物理备份不会堵塞任何SQL操作。    
6\. 小库，没有时间点恢复需求时，可以使用逻辑备份。    
7\. 大库，有时间点恢复需求时，请使用物理备份。    
8\. 物理备份的恢复速度取决于需要APPLY多少归档日志，有恢复时间SLA要求的场景，请评估好全量备份与归档备份的时间间隔。    
9\. 对于归档生成速度很快的数据库实例，建议使用快照的方式备份全量数据，或者使用数据库的块级别增量的方式备份。加快恢复的速度。    
### 35. 管理规约 - 日常维护    
1\. 长事务，两阶段事务。长事务，长时间未关闭的两阶段事务，会导致数据库膨胀，无法冻结，年龄无法下降的问题。务必监控，必要时杀死（例如不正常跑几天的事务的情况）。    
2\. TOP SQL。通过关注TOP SQL，逐个优化。    
3\. VACUUM freeze 风暴。数据库通过vacuum freeze降年龄，如果大表同时爆发freeze，会导致大量写REDO，数据文件，IO暴增。必须预测和freeze smooth化。    
[《PostgreSQL的"天气预报" - 如何预测Freeze IO风暴》](../201606/20160612_01.md)    
[《PostgreSQL 大表自动 freeze 优化思路》](../201605/20160520_01.md)    
4\. 年龄。必须关注数据库的年龄，不能大于20亿。（虽然数据库会自动降年龄）。    
```  
select relkind, relname, age(relfrozenxid), pg_size_pretty(pg_total_relation_size(oid)) from pg_class where relkind in ('r','m','p') order by age(relfrozenxid) desc limit 100;  
```  
5\. 膨胀。必须关注表、索引的膨胀。超出设置的阈值时，应该找原因，同时vacuum full(DDL)或者使用pg_repack处理膨胀。    
[《PostgreSQL 收缩膨胀表或索引 - pg_squeeze or pg_repack》](../201610/20161030_02.md)    
6\. sort(cluster)。如果频繁的访问范围数据，应该对该列执行cluster进行heap sort。减少离散IO和IO放大的问题。    
```  
cluster tbl using index_name;  
```  
7\. 瓶颈分析。关注LONG SQL，TOP SQL，perf。找出瓶颈，分析原因。    
8\. 读写分离。有必要时，可以使用物理流复制，逻辑流复制的方式建立备库，使用中间件或业务程度多数据源的方式，实现读写分离。同时关注备库的健康和延迟。    
9\. 垂直拆分。不同的业务，不相干的业务，当发展到单库瓶颈时，建议垂直拆分。    
10\. 水平分库。同一个业务，不相干的数据，当发展到单库瓶颈时，建议水平拆分。    
11\. 任务。关注数据库任务的执行状态，成功与否，错误原因。    
[《PostgreSQL Oracle 兼容性之 - DBMS_JOBS - Daily Maintenance - Timing Tasks(pgagent)》](../201305/20130531_01.md)    
12\. HA健康。关注HA的健康，心跳，备库的延迟等。    
13\. 监控。监控各项用户或业务关心的指标。    
14\. 死锁。关注日志中输出的死锁信息，找出业务逻辑问题。    
15\. QUERY响应时间变化。关注重点QUERY（TOP SQL）的响应时间的变化，找出问题。    
16\. 表空间增速。关注表空间增速，提前做好扩容，迁移对象或表空间的准备。    
17\. 数据库增速。关注数据库的增速，提前做好扩容，清理、迁移数据的准备。    
18\. 对象增速。关注对象增速，提前做好扩容，分区的准备。    
19\. 分区表。关注分区表的边界是否快到达，提前创建分区。    
20\. 日志文件增速。日志文件（指错误日志），及时压缩归档和清理。    
21\. 临时文件。数据库某些查询会使用临时文件，关注临时文件的大小，找到异常QUERY（例如递归死循环），通过加大work_mem或者其他方式减少临时文件的使用。使用参数控制单个QUERY的临时文件的上限。    
22\. 入侵检测。分析日志，找到SQL注入，找到密码暴力破解的安全问题。    
23\. 日志文件分析，错误类型统计。从日志中，分析出错误日志，找到业务逻辑的问题，数据库本身的问题等。    
24\. 不使用的索引。通过pg_stat*统计信息，找到不使用的索引，删除。    
25\. 不合理的全表扫描。通过auto_explain，慢SQL，TOP SQL，找出给系统带来负担的不合理全表扫描SQL，优化之。    
### 36. 开箱即用，用为上计    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")