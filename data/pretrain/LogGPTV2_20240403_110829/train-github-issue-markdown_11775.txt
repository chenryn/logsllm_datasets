### Feature request
Given playwright has its own test runner, I was expecting to be able to drop
the use of jest for simple unit testing in favour of `@playwright/test` which
would simplify a lot of things..
  * No need to install, configure jest
  * All tests could be invoked with a simple glob, rather than having to partition my test scripts into jest vs. playwright tests
Unfortunately, because some of the elements I'm unit testing live alongside
React components, they are in .tsx files, such as this simple counter example,
meaning I can't import the business logic elements without having .tsx support
in playwright...
    import React from "react";
    import { Immutable, Store } from "@lauf/store";
    import { useSelected, useStore } from "@lauf/store-react";
    /** BUSINESS LOGIC */
    export interface AppState {
      counter: number;
    }
    export const INITIAL_STATE: Immutable = {
      counter: 0
    } as const;
    export const increment = (store: Store) =>
      store.edit((draft) => (draft.counter += 1));
    export const decrement = (store: Store) =>
      store.edit((draft) => (draft.counter -= 1));
    /** UI BINDINGS */
    interface StoreProps {
      store: Store;
    }
    const Display = ({ store }: StoreProps) => {
      const counter = useSelected(store, (state) => state.counter);
      return {counter};
    };
    const IncreaseButton = ({ store }: StoreProps) => (
       increment(store)}>Increase
    );
    const DecreaseButton = ({ store }: StoreProps) => (
       decrement(store)}>Decrease
    );
    export const App = () => {
      const store = useStore(INITIAL_STATE);
      return (
        <>
      );
    };
For now I'll have to go back to jest for half my tests, but not because any
functionality is missing in playwright as far as I can see, it's just about
transpilation support from the .tsx targets.