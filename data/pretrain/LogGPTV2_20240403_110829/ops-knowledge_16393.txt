Question: An application is being designed to process user input for dynamic content generation. Which of the following architectural choices could potentially mitigate the risk of code injection vulnerabilities, and what are their limitations?
"A": "Refactoring the application to avoid dynamic generation of code, which might limit functionality or flexibility.",
"B": "Running code in a sandbox environment like a Unix chroot jail, which might not be feasible and does not protect the application itself from compromise.",
"C": "Using an 'allowlist' input validation strategy to accept only known good input, which may not catch all undesirable inputs if the environment changes.",
"D": "Employing dynamic analysis tools during testing, which may not achieve 100% accuracy and coverage."
Answer: ABCD