## 漏洞成因

### Keep-Alive 与 Pipeline

为了减轻源站服务器的压力，通常会在用户和后端服务器（即源站）之间设置前置服务器。这些前置服务器负责缓存、简单的验证及负载均衡等功能。由于前置服务器和后端服务器通常位于一个相对稳定的网络环境中，且它们之间的IP地址相对固定，因此可以通过重用TCP连接来减少频繁的TCP握手开销。这就涉及到HTTP/1.1协议中的`Keep-Alive`和`Pipeline`特性。

- **Keep-Alive**：通过在HTTP请求中添加`Connection: Keep-Alive`头部信息，指示服务器在接受完本次HTTP请求后不关闭TCP连接。对于后续对同一目标服务器发起的请求，可以重复使用这个TCP连接。这不仅减少了每次请求都需要进行TCP三次握手的消耗，还提高了资源利用率和服务响应速度。此功能在HTTP/1.1版本中默认启用。
  
- **Pipeline**：基于Keep-Alive机制之上，客户端能够连续发送多个请求而无需等待每个请求的响应返回。服务器接收到这些请求后会按照“先进先出”的原则处理，并依次将结果返回给客户端。不过，现代浏览器默认情况下并不启用Pipeline功能，尽管大多数服务器都支持这一特性。

当用户发出的标准HTTP请求流经系统时，至关重要的一点是确保**前置服务器与后端服务器之间就HTTP请求边界达成一致理解**，否则可能会出现如下图所示的问题：

> 如果向代理服务器发送了一个表述模糊的HTTP请求，由于两台服务器解析逻辑的不同，可能导致代理服务器认为这是一个完整的请求并将其转发给后端服务器；然而后端服务器却只识别了部分为有效请求，剩余未被正确处理的部分可能被视为非法或恶意内容，进而影响到正常用户的请求执行，这就是所谓的HTTP走私攻击。

要制造这样的“模糊”请求，关键在于利用数据长度上的差异。

### Content-Length (CL) 与 Transfer-Encoding (TE)

`Content-Length` 和 `Transfer-Encoding` 是用来描述HTTP消息体大小的两个重要头部字段。其中，`Transfer-Encoding: chunked` 是一种特殊的编码方式，它允许数据以分块形式发送，每一块前面附带其十六进制表示的字节数量以及必要的换行符`\r\n`。值得注意的是，在HTTP/2标准中已经不再支持这种编码方法。

设置了`Transfer-Encoding: chunked`之后，实际传输的数据会被分割成若干个块，每个块之前都有一个标识该块大小的数字（十六进制格式），接着是两个换行符`\r\n`，然后才是具体的数据内容。最后一块总是以长度0标记结束，并可跟随一些额外的信息作为尾部。

例如：
```
POST / HTTP/1.1
Host: 1.com
Content-Type: application/x-www-form-urlencoded
Transfer-Encoding: chunked

b
q=smuggling
6
hahaha
0
```

这里需要注意几点关于长度计算的原则：
1. `Content-Length`需要包括请求体中所有`\r\n`所占的空间，但不计入每个块末尾用于分隔的`\r\n`。
2. 请求头和请求体之间有一个空行，这是HTTP协议规定的格式要求，并不会被计入`Content-Length`之内。

根据[RFC 2616](https://tools.ietf.org/html/rfc2616#section-4.4)，如果同时存在`Content-Length`和`Transfer-Encoding`，则后者优先级更高，前者应当被忽略。

虽然规范制定者考虑得非常周全，但在实际应用中，并非所有的Web服务器都能严格遵循这些规则，这就导致了不同服务器之间对于请求边界的理解和处理可能存在差异，从而引发请求走私漏洞。常见的几种情况包括：
- **CL-TE**：前置服务器更重视`Content-Length`值（或者根本不支持`Transfer-Encoding`），而后端服务器则依赖于`Transfer-Encoding`；
- **TE-CL**：前置服务器倾向于使用`Transfer-Encoding`，而后端服务器则更加关注`Content-Length`值；
- **TE-TE**：即使两边都支持`Transfer-Encoding`，也可能因为对某些细节的理解不同而导致错误。

## 走私方式示例

### CL-TE

假设前置服务器依据`Content-Length`确定请求长度，而后端服务器则根据`Transfer-Encoding: chunked`来划分请求边界。那么发送如下格式的请求就可能触发问题：
```
POST / HTTP/1.1
Host: 1.com
Content-Length: 6
Transfer-Encoding: chunked
0
A
```
在这种情况下，前置服务器看到`Content-Length: 6`认为整个请求已经被完整接收，于是直接转交给后端。但后端仅解析到`0\r\n\r\n`便停止，剩余字符“A”被当作下一个请求的一部分留在缓冲区里。如果此时另一个客户端恰好发起了GET请求，则可能导致畸形的`AGET`指令被执行，引起服务异常。

### TE-CL

反之，如果前置服务器按`Transfer-Encoding: chunked`处理请求，而后端服务器依赖于`Content-Length`，那么发送类似以下结构的请求同样能造成混乱：
```
POST / HTTP/1.1
Host: ac7f1f821ea8d83280cc5eda009200f6.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 4
Transfer-Encoding: chunked
17
POST /rook1e HTTP/1.1
0
```
此时前置服务器将把整个请求作为一个大块传递给后端，但由于后端仅读取了前四个字节（由`Content-Length: 4`指定），剩下的部分就被遗留下来，直到有新的GET请求到来才会被组合成一个无效的`POST /rook1e`命令。

### TE-TE

最后，即使双方都支持`Transfer-Encoding`，也可以通过构造特定格式的消息使得二者在解析上产生分歧，最终效果类似于上述两种情形之一。例如：
```
POST / HTTP/1.1
Host: 1.com
TE: chunked
```
这里的`TE`字段就是故意设计来迷惑服务器的。