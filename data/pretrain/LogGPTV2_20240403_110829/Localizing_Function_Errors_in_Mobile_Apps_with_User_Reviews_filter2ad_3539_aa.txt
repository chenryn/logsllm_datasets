title:Localizing Function Errors in Mobile Apps with User Reviews
author:Le Yu and
Jiachi Chen and
Hao Zhou and
Xiapu Luo and
Kang Liu
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Localizing Function Errors in Mobile Apps with
User Reviews
†National Laboratory of Pattern Recognition, Institute of Automation, Chinese Academy of Sciences
Le Yu∗, Jiachi Chen∗, Hao Zhou∗, Xiapu Luo∗§ and Kang Liu†
∗Department of Computing, The Hong Kong Polytechnic University
{cslyu, csjcchen, cshaoz, csxluo}@comp.polyu.edu.hk, PI:EMAIL
Abstract—Removing all function errors is critical for making
successful mobile apps. Since app testing may miss some function
errors given limited time and resource, the user reviews of mobile
apps are very important to developers for learning the uncaught
errors. Unfortunately, manually handling each review is time-
consuming and even error-prone. Existing studies on mobile
apps’ reviews could not help developers effectively locate the
problematic code according to the reviews, because the majority
of such research does not take into account apps’ code. Moreover,
recent studies on mapping reviews to problematic source ﬁles
just look for the matching between the words in reviews and
that in source code, and thus result in many false positives
and false negatives. In this paper, we propose a novel approach
to localize function errors in mobile apps by exploiting the
context information in user reviews and correlating the reviews
and bytecode through their semantic meanings. We realize our
new approach as a tool named ReviewSolver, and carefully
evaluate it with reviews of real apps. The experimental result
shows that ReviewSolver has much better performance than
the state-of-the-art tool.
I. INTRODUCTION
With the rapid growth of mobile apps, removing function
errors is critical for making successful mobile apps. Since
app testing may not reveal all function errors given limited
time and resource, the user reviews of mobile apps [1] are
very important to developers for learning their apps’ bugs [2],
limitations [3], and strengths [4]. Unfortunately, manually han-
dling each review is time-consuming and error-prone because
apps may receive thousands of reviews, part of which may
be useless and even incorrect. Moreover, if the person who
processes the reviews is not familiar with the apps’ code, it is
difﬁcult for him/her to determine whether a review is useful.
It is challenging to automatically map user reviews, espe-
cially complaints, to code, because reviews are written in nat-
ural languages by normal users and they are usually short and
unstructured whereas the apps are developed in programming
languages and compiled into bytecode or binary code, which
are designed for the runtime instead of normal users. It is
worth noting that the majority of existing studies on mobile
apps’ reviews just summarize and classify user reviews[5],
[6], [7], [8], [9], [10] without taking into account apps’ code,
and thus they cannot help developers locate the problematic
code according to the reviews. Palomba et al. recently propose
ChangeAdvisor [11] for mapping reviews to source code
by ﬁrst clustering similar reviews and then comparing the topic
words identiﬁed from the clusters and the words extracted
from the names of code components (e.g., methods, classes).
§The corresponding author.
Unfortunately, ChangeAdvisor may lead to many false pos-
itives, because it does not exploit the semantic information in
reviews and code, and false negatives, because the information
contained in the names of code components is limited.
In this paper,
to address this challenging problem, we
propose a novel approach and develop a new tool named
ReviewSolver to localize function errors in mobile apps by
correlating their reviews and bytecode through their semantic
meanings with the hints of context information in user reviews.
We aim at Android apps because Android has occupied
85.0% market share of mobile operating systems [12] and
there are already 3.3 million apps in Google Play [13]. In
particular, ReviewSolver exploits three new observations.
First, as shown in Section II-B, the user reviews related to
function errors usually contain context information (e.g., API,
GUI, etc.), which provides hints for inferring the source of
errors. For example, one review of the app com.fsck.k9
is “Reinstalled k9, reply button now doesn’t show, can’t ﬁnd
any solutions.” This error is related to a button. To locate
the corresponding code, we ﬁrst analyze the structure of
GUI and the components therein. After extracting the noun
phrase “reply button” from the review, we search the word
“reply” that modiﬁes the “button” in the information related
to each GUI component. Finally, we recommend the developer
to check the activity com.fsck.k9.activity.EditIdentity since it
contains a widget named “reply_to”.
Second, due to the diverse expression and word ambiguity
of user reviews, we need to conduct sentence-level analysis
for squeezing useful information out of user reviews rather
than relying on a few topic words from review clusters.
The latter may miss much useful information. For example,
a review of com.fsck.k9 is “The latest upgrade just
broke K9. Random certiﬁcate errors”. The user mentioned
that error was related to certiﬁcate. When extracting topic
words, ChangeAdvisor missed the word “certiﬁcate”, and
thus it cannot
locate this error. After extracting the noun
phrase “certiﬁcate error”, we can locate APIs that contain
“certiﬁcate” in their descriptions. Finally, we ﬁnd the class
com.fsck.k9.view.ClientCertiﬁcateSpinner since it calls the cer-
tiﬁcate related API KeyChain.choosePrivateKeyAlias()).
Third, the rich information distributed in various software
artifacts related to apps should be leveraged to enhance
the limited information in the names of code components.
Moreover, instead of looking for exact words in user reviews
and code, we should correlate them through their semantic
meanings to avoid missing the mapping. For example, in the
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00051
418
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:06 UTC from IEEE Xplore.  Restrictions apply. 
review “When the picture is saved, it gets ﬂipped upside my
down” of the app fr.xplod.focal, the “save picture”
verb phrase can be mapped to the camera related APIs (e.g.,
MediaRecorder.setVideoSource()) since “picture” and “video”
are similar nouns. Note that directly searching the phrase “save
picture” in code ﬁles cannot ﬁnd any related class.
Therefore, to help developers automatically map function
error reviews to code, ReviewSolver ﬁrst identiﬁes such
kind of negative reviews through supervised machine learning
and analyzes each sentence in such reviews to extract useful
verb phrase and noun phrase through natural language pro-
cessing (NLP) techniques. Then, it conducts static bytecode
analysis on apps to extract seven kinds of information (Section
III-C). Finally, ReviewSolver maps the reviews to the code
according to their semantic similarity and recommends the
most related code to developers.
We carefully evaluate the performance of ReviewSolver
and compare it with ChangeAdvisor [11], the state-of-
the-art tool using real reviews of 18 open-source apps. It
is worth noting that ReviewSolver handles apps’ byte-
code directly and we select open-source apps for the ease
of evaluation and comparison, because ChangeAdvisor
needs apps’ source code. The experimental results show that
ReviewSolver can identify function error related reviews
with 84.6% precision and 88.5% recall rate. For the same
reviews that can be correlated to code ﬁles (by checking bug
reports), ReviewSolver can correctly locate 79 code ﬁles
whereas ChangeAdvisor can only correctly locate 31 code
ﬁles. Moreover, ReviewSolver can map 45.3% of function
error related reviews to code whereas ChangeAdvisor can
only map 7.4% of such reviews.
In summary, our major contributions include:
• We propose a novel approach to localize function errors
in mobile apps by exploiting the context information in
user reviews and correlating the reviews and bytecode
through their semantic meanings.
• We realize the new approach in the tool ReviewSolver
that leverages NLP and program analysis techniques to
automatically extract selected information from an app’s
apk ﬁle and its reviews, and then map the function error
reviews to code.
• We evaluate ReviewSolver using real apps
and compare
in
it
Google Play and their
tool.
with ChangeAdvisor,
The results show that ReviewSolver outperforms
ChangeAdvisor in terms of correctly mapping more
reviews to code.
reviews,
the
state-of-the-art
The rest of this paper is organized as follows. Section II in-
troduces the background and motivating examples. Section III
and Section IV detail the design of ReviewSolver. We
present the experimental result in Section V and discuss the
limitation of ReviewSolver in Section VI, respectively.
After introducing the related work in Section VII, we conclude
the paper in Section VIII.
419
II. BACKGROUND AND MOTIVATING EXAMPLES
A. Function Error Related Reviews
By manually analyzing 6,390 user reviews, Khalid et al. [14]
summarized 12 types of user complaints in user reviews,
and the top 3 most common complaints include function
error (26.68%), feature request (15.13%), and app crashing
(10.51%). Function error related reviews describe app spe-
ciﬁc problem found when using it. An example is “Couldn’t
connect to server”. App crashing related reviews depict the
event of app crashing. For instance, “Crashes every time I use
it”. Since both function errors and app crashing are critical
problems, we consider them together under the same category
(i.e., function errors) by mapping the user reviews to the
corresponding code.
B. Context Information in Reviews
A key insight behind ReviewSolver is that users may
describe the context under which an error occurred when writ-
ing reviews [15]. Such context information provides us useful
hints to locate the problematic codes. To further illustrate it,
we randomly select 500 function error reviews with at least
4 words from 18 open-source apps (Section V-D, Table V),
manually read them, and summarize the context of the function
errors. As shown in Table I, 56.0% function error reviews
contain more or less context information. We use 5 examples
to illustrate how to locate the problematic code by exploiting
such context information in Section II-C.
THE CONTEXT INFORMATION IN FUNCTION ERROR REVIEWS.
TABLE I
informa-
Description
Percentage
Example
Context
tion
(1)App
Task
Speciﬁc
(2)Updating App
(3)GUI
(4)Error Message
(5)Opening App
(6)Registering
(7)API/URI/intent
(8)Other
Errors appear when
performing app spe-
ciﬁc tasks
Errors appear after
updating the app
Errors appear when
interacting
with
GUI
Reviews
contains
the error messages
from apps
Errors appear when
opening the app
Errors appear when
logining/registering
account
Errors appear when
accessing resource
or information
User does not de-
scribe the context
25.2%
(126/500)
“Auto
doesn’t work ...”
backup
8.2%
(41/500)
3.4%
(17/500)
2.8%
(14/500)
1.6%
(8/500)
2.2%
(11/500)
12.8%
(64/500)
44.0%
(220/500)
“New
update
doesn’t work with
the s3.”
“Note 4 does not
have menu
hard
button.”
“it just says ”c:geo
can’t load data re-
quired to log visit””
“It
crashed every
time I opened it.”
“Cannot
my gmail”
login to
“But I cannot save
photos to sd card
with it”
“Sometimes
working.”
not
As shown in Table I, most errors (25.2%) related to the
functions speciﬁc to an app (“(1)App Speciﬁc Task” in Ta-
ble I). Since different apps have different speciﬁc functions, it
is difﬁcult to predeﬁne some classes and group these functions
into them. Hence, we look for the classes/methods that realize
these functions. Since 8.2% errors appear after the app is
updated, we will determine the code difference between the
version reported by users and the previous version. Sometimes
the users may describe the error message shown in app (2.8%),
and hence we locate such error by checking the classes that
display such error message. For function error reviews that
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:06 UTC from IEEE Xplore.  Restrictions apply. 
report crashing right after the app is launched(1.6%), we will
locate and check the starting activity. If the errors happen when
registering account or during login (2.2%), we look for and
examine the account registration and login related activities.
12.8% errors are related to the resource/information of the
device. Since such resource/information could be accessed by
using APIs/URIs/intent, we will locate the problematic code
through the corresponding APIs/URIs/intent.
We divide these errors into two categories and detail how
to map them to code in Section IV-A and Section IV-B
individually. One category includes app speciﬁc errors that are
related to the functions implemented by developers (i.e., case
(1)-(6) in Table I). The other one refers to the general error
that are related to Android interface (i.e., case (7) in Table I).
Table I also shows that 44.0% function error reviews do
not contain context information. They usually describe that
the app does not work due to some bugs (e.g., “Crash after
crash. Uninstall very fast!”) or simply point out the device
type (e.g., “Please ﬁx the bug. i’m using xiaomi mi4c”). We
discuss possible solutions to handle them in Section VI and
will investigate them in future work.
C. Motivating Examples
To
our
clearly
approach
(i.e.,
differentiate
ReviewSolver)
from the state-of-the-art method (i.e.,
ChangeAdvisor[16]), we use a few motivating examples
to demonstrate why ChangeAdvisor will
lead to false
positives and false negatives and how our approach can
address the problems. Note that ChangeAdvisor [11] ﬁrst
clusters similar reviews and then looks up the topic words
identiﬁed from the clusters in a set of words extracted from
the names of source code elements (e.g., ﬁelds, methods,
and classes) to determine problematic source ﬁle. Without
considering the syntactic and semantic information in the
sentence, ChangeAdvisor may include irrelevant words
and cause false positive (i.e., the mapping from the review to
the code is incorrect). Example 1 illustrates this.
Example 1 com.fsck.k9: “Unable to fetch mail on Sam-
sung Note 4 for Nexus 7 for the longest time”.
ChangeAdvisor This review describes an error related to
“fetch mail”. ChangeAdvisor extracts the word “time” as
topic words of the cluster and recommends the developer to
check the class com.fsck.k9.Clock since the code ﬁle of class
also contains the word “time”. Unfortunately, this class is not
related to this error.
ReviewSolver We ﬁrst extract the verb phrase “fetch mail”
from the syntactic tree of this review, and then compare
the semantic similarity between this verb phrase and the
verb phrases extracted from method names. If the similar-
ity is higher than the threshold, ReviewSolver recom-
mend the developer to check the corresponding method (i.e.,,
“com.fsck.k9.Account.getEmail()” in this example).
Moreover, since ChangeAdvisor does not conduct static
analysis on apps, it may lead to many false negatives (i.e., can-
not map the errors to the code). By contrast, ReviewSolver
can reveal them by leveraging the context information in user
reviews and the information distributed in various software
artifacts related to apps, as illustrated in the Examples 2-5.
it
queries
the
to examine
to get contact
recommend developer
Example 2 org.thoughtcrime.securesms: “Unfortu-
nately I can no longer send SMS to any non-signal user.”
ReviewSolver Since some errors in reviews are related
to Android framework APIs, we look for the classes that
invoke the corresponding APIs. In particular, we extract
the verb phrase “send SMS” from the review, and look
for the APIs whose descriptions express the same mean-
ing. Since the API SmsManager.sendTextMessage() fulﬁlls the
requirement, we recommend developer to check the class
org.thoughtcrime.securesms.jobs.SmsSendJob since it calls this
API.
Example 3 org.thoughtcrime.securesms: “Signal
crashed when i tried to ﬁnd contact while writing sms ...”
ReviewSolver Since some errors in reviews are related
to the content providers, we locate the invocation of
such content providers
in apps. More precisely, after