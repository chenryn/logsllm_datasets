# Title: Localizing Function Errors in Mobile Apps with User Reviews

## Authors
Le Yu, Jiachi Chen, Hao Zhou, Xiapu Luo, and Kang Liu

## Conference
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Affiliations
- **National Laboratory of Pattern Recognition, Institute of Automation, Chinese Academy of Sciences**
- **Department of Computing, The Hong Kong Polytechnic University**

### Abstract
Removing all function errors is critical for the success of mobile apps. Given that app testing may miss some function errors due to limited time and resources, user reviews become a valuable source for developers to identify uncaught errors. However, manually processing each review is time-consuming and prone to errors. Existing studies on mobile app reviews often fail to help developers effectively locate problematic code because they do not consider the app's code. Recent studies that map reviews to problematic source files rely on word matching between reviews and source code, leading to many false positives and negatives.

In this paper, we propose a novel approach to localize function errors in mobile apps by leveraging context information in user reviews and correlating the reviews with bytecode through their semantic meanings. We implement this approach in a tool called ReviewSolver and evaluate it using real app reviews. Our experimental results show that ReviewSolver outperforms the state-of-the-art tool in terms of accuracy and effectiveness.

## I. Introduction
The rapid growth of mobile apps has made it crucial to remove function errors to ensure their success. App testing, however, may not reveal all function errors due to time and resource constraints. User reviews are thus vital for developers to learn about bugs, limitations, and strengths. Manually handling each review is impractical due to the large volume and potential inaccuracies. Additionally, if the person processing the reviews is unfamiliar with the app's code, determining the usefulness of a review becomes challenging.

Automatically mapping user reviews, especially complaints, to code is difficult because reviews are written in natural language by non-technical users and are often short and unstructured, while the app's code is in a programming language compiled into bytecode or binary code. Most existing studies on mobile app reviews focus on summarizing and classifying them without considering the app's code, making it hard to locate problematic code. Palomba et al. proposed ChangeAdvisor, which maps reviews to source code by clustering similar reviews and comparing topic words with code component names. However, ChangeAdvisor often leads to false positives and negatives due to its reliance on exact word matches and lack of semantic analysis.

To address these challenges, we propose a new approach and develop a tool named ReviewSolver. This tool localizes function errors in mobile apps by correlating reviews and bytecode through their semantic meanings, guided by context information in user reviews. We focus on Android apps, given their market dominance and the large number of available apps.

ReviewSolver leverages three key observations:
1. **Context Information in Reviews**: Reviews related to function errors often contain context (e.g., API, GUI) that provides clues for inferring the source of errors.
2. **Sentence-Level Analysis**: Diverse expressions and word ambiguity in reviews necessitate sentence-level analysis to extract useful information, rather than relying on topic words from review clusters.
3. **Semantic Correlation**: Rich information in various software artifacts should be used to enhance the limited information in code component names, and reviews and code should be correlated through their semantic meanings.

We evaluate ReviewSolver using real reviews of 18 open-source apps and compare it with ChangeAdvisor. Our results show that ReviewSolver can identify function error-related reviews with high precision and recall, and correctly map more reviews to code than ChangeAdvisor.

## II. Background and Motivating Examples

### A. Function Error-Related Reviews
Khalid et al. [14] analyzed 6,390 user reviews and identified 12 types of user complaints, with function errors (26.68%), feature requests (15.13%), and app crashes (10.51%) being the most common. Function error-related reviews describe specific problems encountered during app use, such as "Couldn't connect to server." Since both function errors and app crashes are critical, we consider them together under the category of function errors.

### B. Context Information in Reviews
A key insight is that users often describe the context in which an error occurred. This context provides useful hints for locating problematic code. We randomly selected 500 function error reviews from 18 open-source apps, read them, and summarized the context of the errors. Table I shows that 56.0% of function error reviews contain context information. We use examples to illustrate how this context can help locate problematic code.

| **Description** | **Percentage** | **Example** |
|-----------------|----------------|-------------|
| Specific Task   | 25.2%          | "Auto backup doesn’t work..." |
| Updating App    | 8.2%           | "New update doesn’t work with the s3." |
| GUI             | 3.4%           | "Note 4 does not have menu hard button." |
| Error Message   | 2.8%           | "it just says 'c:geo can’t load data required to log visit'." |
| Opening App     | 1.6%           | "It crashed every time I opened it." |
| Registering     | 2.2%           | "Cannot login to my gmail" |
| API/URI/Intent  | 12.8%          | "But I cannot save photos to sd card with it" |
| Other           | 44.0%          | "Crash after crash. Uninstall very fast!" |

For reviews that do not contain context information, we discuss possible solutions in Section VI and plan to investigate them in future work.

### C. Motivating Examples
To differentiate our approach (ReviewSolver) from the state-of-the-art method (ChangeAdvisor), we provide examples demonstrating why ChangeAdvisor leads to false positives and negatives and how ReviewSolver addresses these issues.

#### Example 1: com.fsck.k9
**Review**: "Unable to fetch mail on Samsung Note 4 for Nexus 7 for the longest time."

**ChangeAdvisor**: Extracts the word "time" as a topic word and recommends checking the class `com.fsck.k9.Clock` because it contains the word "time." This class, however, is not related to the error.

**ReviewSolver**: Extracts the verb phrase "fetch mail" from the review and compares its semantic similarity with verb phrases in method names. If the similarity exceeds a threshold, ReviewSolver recommends checking the corresponding method, such as `com.fsck.k9.Account.getEmail()`.

#### Example 2: org.thoughtcrime.securesms
**Review**: "Unfortunately, I can no longer send SMS to any non-signal user."

**ReviewSolver**: Extracts the verb phrase "send SMS" and looks for APIs with similar descriptions. It finds `SmsManager.sendTextMessage()` and recommends checking the class `org.thoughtcrime.securesms.jobs.SmsSendJob` that calls this API.

#### Example 3: org.thoughtcrime.securesms
**Review**: "Signal crashed when I tried to find contact while writing SMS..."

**ReviewSolver**: Identifies that the error is related to content providers and locates the invocation of such providers in the app. After extracting the verb phrase "find contact," it recommends checking the relevant classes.

These examples highlight the advantages of ReviewSolver in accurately mapping function error-related reviews to code.

## III. Design of ReviewSolver
[Detailed design and implementation of ReviewSolver]

## IV. Experimental Evaluation
[Experimental setup, results, and comparison with ChangeAdvisor]

## V. Limitations and Future Work
[Discussion of limitations and future research directions]

## VI. Related Work
[Overview of related studies and their contributions]

## VII. Conclusion
[Summary of the paper and concluding remarks]

---

This revised version aims to make the text more clear, coherent, and professional, while maintaining the original content and intent.