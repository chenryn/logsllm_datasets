title:BOREALIS: Building Block for Sealed Bid Auctions on Blockchains
author:Erik-Oliver Blass and
Florian Kerschbaum
BOREALIS: Building Block for Sealed Bid
Auctions on Blockchains
Erik-Oliver Blass
Airbus, Munich
PI:EMAIL
Florian Kerschbaum
University of Waterloo
ﬂPI:EMAIL
September 8, 2020
Abstract
We focus on securely computing the ranks of sealed integers distributed
among n parties. For example, we securely compute the largest or small-
est integer, the median, or in general the kth-ranked integer. Such com-
putations are a useful building block to securely implement a variety of
sealed-bid auctions. Our objective is eﬃciency, speciﬁcally low interactiv-
ity between parties to support blockchains or other scenarios where mul-
tiple rounds are time-consuming. Hence, we dismiss powerful, yet highly-
interactive MPC frameworks and propose BOREALIS, a special-purpose
protocol for secure computation of ranks among integers. BOREALIS
uses additively homomorphic encryption to implement core comparisons,
but computes under distinct keys, chosen by each party to optimize the
number of rounds. By carefully combining cryptographic primitives, such
as ECC Elgamal encryption, encrypted comparisons, ciphertext blinding,
secret sharing, and shuﬄing, BOREALIS sets up systems of multi-scalar
equations which we eﬃciently prove with Groth-Sahai ZK proofs. There-
with, BOREALIS implements a multi-party computation of pairwise com-
parisons and rank zero-knowledge proofs secure against malicious adver-
saries. BOREALIS completes in at most 4 rounds which is constant in
both bit length (cid:96) of integers and the number of parties n. This is not
only asymptotically optimal, but surpasses generic constant-round secure
multi-party computation protocols, even those based on shared-key fully
homomorphic encryption. Furthermore, our implementation shows that
BOREALIS is very practical.
Its main bottleneck, ZK proof computa-
tions, is small in practice. Even for a large number of parties (n = 200)
and high-precision integers ((cid:96) = 32), computation time of all proofs is less
than a single Bitcoin block interval.
1
1
Introduction
Sealed-bid auctions [15, 19] are commonly used when the true valuation of items
is sought, i.e., to minimize strategic behavior of bidders. There are many types of
sealed-bid auctions currently used in practice: ﬁrst-price auctions, second-price
(Vickrey) auctions, reverse auctions, uniform multi-unit auctions and many
more. They diﬀer in the ranks of parties winning the bid and the rank of
the bid paid by auction winners.
Yet, all auctions share as a core building block the ability to compute ranks
of sealed bids. In this paper, we focus on securely computing ranks of sealed bids
in a distributed system. A secure and distributed computation of bid rankings
and therewith sealed-bid auctions allows replacing trust in an auctioneer by a
cryptographic protocol on top of, e.g., blockchains. For the implementation of
auctions, we envision the following high-level protocol.
First, all parties securely compare their bids without revealing them. Then
each party proves in zero-knowledge to the others whether its integer is kth
ranked, i.e., whether its rank among the set of n bids is k or not. For example,
in a ﬁrst-price auction, the winner would prove that its integer is ranked 1 and
then disclose its integer. In a reverse auction, the winner proves that its integer
is ranked n and discloses its integer.
In a second-price auction, the winning
party proves its integer being ranked 1, and the party with the second ranked
integer proves rank 2 and discloses its integer. In a uniform multi-unit auction,
parties with ranks 1, 2, and so forth subsequently prove their integers’ ranks
and disclose integers. Various other auction types can be constructed in this
manner. Realizing comparisons and proofs above as a building block secure
against fully-malicious adversaries is technically challenging. For example, one
challenge is that rank computation must guarantee output delivery (in case of
honest majority). That is, we must deal with, e.g., malicious parties aborting
the protocol and not proving their rank after learning partial results of the
auction.
Note that this building block of pairwise comparisons and rank computation
is of general, independent interest in a wider set of problems in distributed
databases [2, 16, 29, 41, 52].
We consider the problem of (integer) rankings on blockchains, because block-
chains are becoming a popular platform for auctions. Users are increasingly
migrating auctions to the blockchain [6, 49], since the immutable history of a
blockchain provides an automatic advantage in addition to their distributed na-
ture and therewith the lack of a trusted auctioneer. However, running an auction
on top of today’s blockchains such as Bitcoin or Ethereum also brings another
technical challenge. Blockchains typically have large block interval times up to
several minutes. Party interaction using the blockchain, e.g., to broadcast or
send a message on the blockchain, is therefore expensive in terms of latency.
Any protocol for securely comparing integers with high interactivity, i.e., a
large number of rounds, implies an equally large number of blockchain blocks
and would quickly become useless for many scenarios. So, the goal is a protocol
for securely comparing n integers with low latency.
2
Designing secure computation protocols with low latency is technically chal-
lenging, as generic techniques for multi-party computation [5, 9, 27, 35] induce a
large number of communication rounds. In general, the number of rounds is lin-
ear in the (multiplicative) depth of the circuit computed by the parties. While
there exists recent research focusing on constant-round protocols [43, 44], based
on the technique in [8], these works still require a considerable number of rounds,
namely at least 9, and moreover expensive fully or somewhat-homomorphic en-
cryption (SHE).
This paper: We design BOREALIS (“Building blOck foR sEALed bId auc-
tionS”), a special-purpose protocol for securely computing ranks of n integers
distributed among up to n parties. We distinguish between information each
party participating in the protocol learns about bids and information disclosed
on the blockchain, also available to and veriﬁable by parties not participating in
the protocol, but only observing the blockchain, e.g., the seller in the auction.
More formally, we consider the following problem: given a sequence of n
integers (vi)i=1,...,n of (cid:96) bits each where each vi is held by a diﬀerent party Pi,
our goal is to securely compare the integers and compute the rank of (vi)i=1,...,n,
such that Pi can later prove (in zero-knowledge) whether it holds the kth-ranked
integer from that sequence. Hence, each party can publicly prove whether it won
the auction or not without revealing any additional information. BOREALIS
supports parties with multiple input integers each by simulating additional par-
ties for each integer. BOREALIS is secure against malicious adversaries and
guarantees output delivery as long as the majority of integers comes from hon-
est parties. The actual value of the kth-ranked integer or auxiliary values, such
as the amount of items bid on in multi-unit auctions, can also be computed
simply by provably decrypting an integer held by Pi.
Given the large variety of building blocks for secure computation, a new
eﬃcient solution requires careful design. We explain our objectives and justify
our design decisions in Section 1.1. The practical eﬃciency of our protocol is
due to optimized cryptographic engineering. We use a number of ingredients,
such as Groth and Sahai [36]’s framework to realize our zero-knowledge proofs
(Section 5). We also provide security deﬁnition (Section 3), security proof (Sec-
tion 6), and a practical evaluation (Section 7).
1.1 Design Choices
The main idea to realize above sealed-bid auctions is to devise a new comparison
mechanism which allows a party to securely compute and prove that its integer
is ranked kth among all integers. Thus, if the kth-ranked bid wins the auction
or multiple diﬀerently ranked bids win the auction as in the case of multi-unit
auctions, corresponding parties can use our new comparison mechanism as a
building block and prove winning bids. That is, we focus on computing pairwise
comparisons of n ≥ 2 integers held by diﬀerent parties, but without revealing
signiﬁcantly more than the rank of each integer. In particular, we do not want
to reveal the exact integer values. Our design objectives are:
3
 Security against malicious adversaries, assuming honest majority of parties.
 Practical eﬃciency for a large number, e.g., dozens, of participating parties
and the minimum number of rounds. A low number of rounds implies low
latency and allows deploying our solution in scenarios where rounds are costly
such as with blockchains.
To hide integer values of parties while comparing, our ﬁrst design deci-
sion is to choose additively homomorphic encryption. Multi-party computa-
tion (MPC), even constant round MPC [8, 43, 44], requires many rounds of
interaction and expensive SHE. For example, Lindell et al. [43] need 16 rounds
of interaction and O(n3) encryptions. Alternatively, Lindell et al. [44] need
9 rounds and O(n2) SHE encryptions, but additionally the SHE evaluation of a
circuit with multiplicative depth 4. See Fig. 1 in [44] for a comparison. In con-
trast, our approach with additively homomorphic encryption allows for eﬃcient
comparisons non-interactively in one round which is optimal.
1.1.1 Key Distribution
When using homomorphic encryption, there are two options regarding keys used
and their distribution. Either, in option 1, all parties encrypt their integers and
compute under a joint public key with a threshold shared private key. Alterna-
tively, in option 2, each party chooses its own private, public key pair. With
option 1, computation and zero-knowledge (ZK) proofs to achieve malicious se-
curity are simple. However, one needs to securely generate a distributed key, a
threshold shared private key, which is expensive. Secure distributed key genera-
tion requires at least two additional rounds of interaction during the distribution
phase in case no party cheats. In case a party cheats, additional rounds are re-
quired, cf. Gennaro et al. [34].
With option 2 (which we choose), computing comparisons requires (re-)encryp-
ting one party’s integer with the key of the other party. This makes ZK proofs
complex, since we need to prove that a homomorphic comparison computa-
tion has been performed correctly, including (re-)encryption. That is, we must
prove correctness of the homomorphic computation without revealing the input,
in particular the ciphertext of one party’s integer under the other party’s public
key. Revealing this ciphertext to the other party would obviously imply that
the other party learns the corresponding integer. On the positive side, we do
not need distributed key generation for a shared private key. Instead, we use a
variation of veriﬁable secret sharing based on [50] during the ﬁrst round of the
main comparison protocol. This saves us two rounds of interaction.
Furthermore, our key insight is that when using an Elgamal-based variation
of Damg˚ard et al.’s technique [24, 25] (called DGK henceforth) for homomorphi-
cally comparing integers, we can use eﬃcient elliptic curve Elgamal encryption
in one single elliptic curve group for all parties. The main advantage when oper-
ating within one single group is that we can then construct for all parties Groth
and Sahai [36] proofs to elegantly prove correctness of re-encryptions, compar-
isons, and integer shuﬄing. This leads to protocol BOREALIS which is not
4
only secure against malicious parties, but also practically eﬃcient: it requires
one round for integer commitments, one round for comparison computations,
and one round for proving which party holds the kth-ranked integer.
1.1.2 Circuit Evaluation
To compare input integers of all n participants, we implement a circuit. This
circuit consists of a sequence of pairwise comparisons. A single comparison
of a pair of two arbitrary length integers can be eﬃciently implemented using
unbounded fan-in gates in a circuit of multiplicative depth 2. The second level
gate can be implemented using shuﬄing of ciphertexts with bit plaintexts, since
it is a logical “or” with at most one true integer. The DGK technique realizes
such a comparison circuit based on additively homomorphic encryption by scalar
multiplication with one party’s plaintext integer.
To compute the index of the kth-ranked integer using a sequence of pairwise
comparisons, one could perform n comparisons using a selection algorithm, but
this circuit has multiplicative depth n. One could also sort the n integers [3]
using a (partial) sorting network. However, resulting circuits would still have
Ω(log n) multiplicative depth and hence would either require more rounds of
interaction or a homomorphic encryption scheme that eﬃciently supports log n
consecutive multiplications and even more complex ZK proofs.
The choice we make is a compromise. We perform O(n2) comparisons, n− 1
per party, but we perform them in parallel, in only one round, and including
ZK proofs. This has the downside that each party Pi learns whether their vi is
smaller than another party’s vj. Yet, this allows us to support a very wide vari-
ety of sealed-bid auctions while performing heavy computations (comparisons)
only once, since parties learn the ranks of their integers and can subsequently
reveal them when necessary on the blockchain. Hence, we can divide the auction
protocol into secure comparisons and proofs of ranks in zero-knowledge. As a
consequence, we achieve our main design objectives: we provide security against
malicious adversaries, and we obtain asymptotically optimal O(1) latency which
is low in practice (total of 3 rounds, 4 rounds if a party aborts).
1.2 Blockchain
For the purpose of this paper, a blockchain realizes a secure public ledger.
Parties append transactions to the ledger, veriﬁable by everybody after one
blockchain block interval latency. Transactions are signed with the originator’s
private key for authenticity and stored immutably. Based on the concept of
transactions, blockchains allow storing custom bit strings in the ledger, e.g.,
Bitcoin’s OP RETURN opcode or a trivial mailbox smart contract in Ethereum.
Therewith, a blockchain provides a reliable, authenticated broadcast channel
for arbitrary data. Also, knowledge of a party’s public key enables personal
messages by encrypting with the public key and broadcasting the ciphertext.
Caveats: Note that, in practice, limits apply to the length of data stored per
transaction. For example, OP RETURN accepts bit strings up to 40 Byte length
5
per transaction. So, longer messages must be split in multiple transactions.
For simplicity, we assume that parties store (long) messages in a public bul-
letin board and use the blockchain only to store the messages’ hash. We also
stress that proof-of-work-based consensus in blockchains is not fork-free. The
current block might become invalid in the future, after another χ blocks, if
the blockchain agrees on another fork. However assuming honest majority, the
probability that the current block becomes invalid after χ blocks is negligible in
χ [33, 53]. In practice, parties often wait χ additional blocks until they accept
the current block (χ = 6 with Bitcoin).
1.3 Related Work
Secure computation of the kth-ranked integer was introduced by Aggarwal et al.
[1] as an important primitive for operations in distributed databases. It was used
prominently in, e.g., data mining applications [41], data anonymization [2], so-
cial network analysis [16], decision tree learning [29], and top-k queries [52].
The protocol by Aggarwal et al. [1] was also one of the ﬁrst sub-linear com-
putation complexity MPC protocols. It requires only O(log k) comparisons to
compute the kth-ranked element in the two-party setting and O((cid:96)) comparisons
in the multi-party setting. However, it also requires O(log k) or O((cid:96)) rounds, re-
spectively. High round complexity has motivated the research presented in this
paper, since there is a need to enable this important functionality in scenarios
where rounds have high latency such as with blockchains.
A primitive used by any protocol for secure computation of (the index of) the
kth-ranked integer is secure integer comparison. Secure integer comparison can
be either implemented using generic secure computation, but many special pro-
tocols improving the eﬃciency have been developed. Protocols for secure com-
putation using homomorphic encryption have been developed by Garay et al.
[32], for information-theoretic secure computation by Damg˚ard et al. [26], and
improved by Nishide and Ohta [48] and Catrina and De Hoogh [21]. Kolesnikov
et al. [37] developed an improved circuit which can be used to optimize per-
formance in various secure computation protocols. Fischlin [31] developed a
protocol speciﬁcally for (somewhat-)homomorphic encryption. This protocol
has been further reﬁned by Damg˚ard et al. [25] which is the comparison proto-