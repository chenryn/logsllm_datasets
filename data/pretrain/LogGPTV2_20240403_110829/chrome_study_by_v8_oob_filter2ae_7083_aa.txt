# chrome study by v8 oob
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
> 学习浏览器，从v8入手，这道题有比较详细的资料，作为入门题非常有优势。
## 环境搭建
###  基础v8的环境搭建
使用的环境：ubuntu 18.04
v8环境搭建：
###  解题的搭建
一般浏览器的出题有两种
  * 一种是diff修改v8引擎源代码，人为制造出一个漏洞，
  * 另一种是直接采用某个cve漏洞。一般在大型比赛中会直接采用第二种方式，更考验选手的实战能力。
出题者通常会提供一个diff文件，或直接给出一个编译过diff补丁后的浏览器程序。如果只给了一个diff文件，就需要我们自己去下载相关的commit源码，然后本地打上diff补丁，编译出浏览器程序，再进行本地调试。
比如starctf中的oob题目给出了一个diff文件：
    diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc
    index b027d36..ef1002f 100644
    --- a/src/bootstrapper.cc
    +++ b/src/bootstrapper.cc
    @@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle global_object,
                               Builtins::kArrayPrototypeCopyWithin, 2, false);
         SimpleInstallFunction(isolate_, proto, "fill",
                               Builtins::kArrayPrototypeFill, 1, false);
    +    SimpleInstallFunction(isolate_, proto, "oob",
    +                          Builtins::kArrayOob,2,false);
         SimpleInstallFunction(isolate_, proto, "find",
                               Builtins::kArrayPrototypeFind, 1, false);
         SimpleInstallFunction(isolate_, proto, "findIndex",
         [...]
以上截取了第一部分，是对/path/v8/src/bootstrapper.cc做了修改。
在/path/v8下执行以下的命令，将diff文件加入到v8中源代码分支中：
    git apply /path/oob.diff
我们找到`bootstrapper.cc`文件，搜索`SimpleInstallFunction(isolate_, proto,
"fill",`，发现下面已经将oob函数加入进去，patch成功。
最后编译出增加了diff补丁的v8程序调试即可。
###  环境问题
正常来说，debug版本和release版本都能使用，但是调试这道题的时候，碰到了如下的问题：
release版本正常运行
debug版本报错
> e3pem师傅的博客是这样解释的：
>
>
> 了解到是DCHECK宏的问题，然而对宏修改或是注释之后发现编译出来的d8执行还是会出现问题(这个时候已经开始怀疑人生了)。后来仔细的观察了一下师傅们写的文章，发现里面调试oob的时候都是用的release版本，之前也试过release版本的d8确实不会出现问题，所以很可能debug版本的d8就是不行，而别人文章里面出现的debug版本的d8的目的就是为了了解v8的数据是怎么存储的。所以这里正确的用法应该是用release版本进行调试，用debug版本来辅助分析。
## v8的基础知识
v8编译后二进制名称叫d8而不是v8。
###  调试
####  1.allow-natives-syntax选项
功能：定义了一些v8运行时支持函数，主要有以下两个：
    %DebugPrint(obj) 输出对象地址
    %SystemBreak() 触发调试中断主要结合gdb等调试器使用
使用：
    //方法一
    winter@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow-natives-syntax 
    //方法二
    winter@ubuntu:~/v8/v8/out.gn/x64.debug$ gdb ./d8 
    [...]
    pwndbg> set args --allow-natives-syntax test.js
####  2.job命令
功能：可视化显示JavaScript对象的内存结构.
gdb下使用：job 对象地址
显示如下，具体v8的内存结构，稍后“v8对象结构”里进一步解释。
    pwndbg> job 0x4f9d210dd59
    0x4f9d210dd59: [JSArray]
     - map: 0x257bfd042d99  [FastProperties]
     - prototype: 0x355e47bd1111 
     - elements: 0x04f9d210dce9  [PACKED_SMI_ELEMENTS (COW)]
     - length: 3
     - properties: 0x26cfa9fc0c71  {
        #length: 0x1da9ebe001a9  (const accessor descriptor)
     }
     - elements: 0x04f9d210dce9  {
               0: 1
               1: 2
               2: 3
     }
####  3.telescope
功能：查看一下内存数据
使用：telescope 查看地址 （长度）
> （）表示里面的可以没有
###  v8知识点
####  指针标记
v8使用指针标记机制来区分 **指针** ， **双精度数** 和 **Smis** （代表）`immediate small integer`。
    Double: Shown as the 64-bit binary representation without any changes
    Smi: Represented as value  set args --allow-natives-syntax test.js 
    pwndbg> r
    [...]
    DebugPrint: 0x31c7fffcdd59: [JSArray]
    [...]
    pwndbg> job 0x31c7fffcdd59
    0x31c7fffcdd59: [JSArray]
     - map: 0x315768442d99  [FastProperties]
     - prototype: 0x3f6dffcd1111 
     - elements: 0x31c7fffcdce9  [PACKED_SMI_ELEMENTS (COW)]
     - length: 3
     - properties: 0x176329f00c71  {
        #length: 0x3ae23f8001a9  (const accessor descriptor)
     }
     - elements: 0x31c7fffcdce9  {
               0: 1
               1: 2
               2: 3
     }
    pwndbg> job 0x31c7fffcdce9
    0x31c7fffcdce9: [FixedArray]
     - map: 0x176329f00851 
     - length: 3
               0: 1
               1: 2
               2: 3
所以，一个对象有如下属性：
  * map：定义了如何访问对象
  * prototype：对象的原型（如果有）
  * elements：对象的地址
  * length：长度
  * properties：属性，存有map和length
分析：
对象里存储的数据是在elements指向的内存区域的，而且是在对象的上面。也就是说，在内存申请上，v8先申请了一块内存存储元素内容，然后申请了一块内存存储这个数组的对象结构，对象中的elements指向了存储元素内容的内存地址。
####  map属性详解
因为稍后需要用到，，所以放在这里讲一下
    pwndbg> job 0x176329f00801
    0x176329f00801: [Map]
     - type: FIXED_ARRAY_TYPE
     - instance size: variable
     - elements kind: HOLEY_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - stable_map
     - non-extensible
     - back pointer: 0x176329f004d1 
     - prototype_validity cell: 0
     - instance descriptors (own) #0: 0x176329f00259 
     - layout descriptor: (nil)
     - prototype: 0x176329f001d9 
     - constructor: 0x176329f001d9 
     - dependent code: 0x176329f002c1 
     - construction counter: 0
对象的map（数组是对象）是一种数据结构，其中包含以下信息：
  * 对象的动态类型，即String，Uint8Array，HeapNumber等。
  * 对象的大小（以字节为单位）
  * 对象的属性及其存储位置
  * 数组元素的类型，例如，unboxed的双精度数或带标记的指针
  * 对象的原型（如果有）
属性名称通常存储在Map中，而属性值则存储在对象本身中几个可能区域之一中。然后，map将提供属性值在相应区域中的确切位置。
**本质上，映射定义了应如何访问对象。**
**重点**
  * 对于对象数组：存储的是每个对象的地址
  * 对于浮点数组：以浮点数形式存储数值
所以，如果将对象数组的map换成浮点数组 => 就变成了浮点数组，会以浮点数的形式存储对象的地址；如果将对浮点组的map换成对象数组 =>
就变成了对象数组，打印浮点数存储的地址。这实际上就是类型混淆的内容。
####  对象和对象数组
有时候想着想着有点乱，调试一下。
一个浮点数组、整数数组和一个对象数组。
    var a = [1.1,2.2,3.3];
    %DebugPrint(a);
    %SystemBreak();
    var b = [1,2,3];
    %DebugPrint(b);
    %SystemBreak();
    var obj_array = [a,b];
    %DebugPrint(obj_array);
    %SystemBreak();
    winter@ubuntu:~/v8/v8/out.gn/x64.debug$ gdb ./d8 
    [...]
    pwndbg> set args --allow-natives-syntax test.js 
    pwndbg> r
    [...]
    //浮点数组
    DebugPrint: 0x23ddebc4de71: [JSArray]
     - map: 0x13e6d5782ed9  [FastProperties]
     - prototype: 0x1bb893151111 
     - elements: 0x23ddebc4de49  [PACKED_DOUBLE_ELEMENTS]
     - length: 3
     - properties: 0x1574a0580c71  {
        #length: 0x19fc51e401a9  (const accessor descriptor)
     }
     - elements: 0x23ddebc4de49  {
               0: 1.1
               1: 2.2
               2: 3.3
     }
    [...]
    pwndbg> c
    Continuing.
    //整型数组
    DebugPrint: 0x23ddebc4de91: [JSArray]
     - map: 0x13e6d5782d99  [FastProperties]
     - prototype: 0x1bb893151111 
     - elements: 0x23ddebc4ddb9  [PACKED_SMI_ELEMENTS (COW)]