entry-point URLs.
5.2
Implementation
We implemented a proof-of-concept entry-point restriction
mechanism in the Chromium browser. The entire system
consists of less than 100 lines of C++ code. Our implemen-
tation enforces entry-point restriction inside Chromium’s
WebKit rendering engine. More speciﬁcally, we modiﬁed the
CanDisplay() function of SecurityOrigin, which gets called
before every web resource request.
If the URL of a web
resource violates the entry-point restriction policy, WebKit
will not issue the network request.
Storing entry points.
Like most web resources, it is desirable for the browser
to cache entry-point restriction information for performance.
The exact caching method may diﬀer depending on how apps
opt into entry-point restriction.
If apps use host-meta to bootstrap app isolation, browsers
could cache this information like conventional web resources.
Users should be able to clear their app isolation information
the same way they clear cookies or browsing histories. Most
modern browsers oﬀer users with private browsing features
that allow them to browse without persistent storage [28].
To be compatible with these private browsing features, the
host-meta information in such modes must be treated like
cookies or browsing history, not being written to disk.
If apps instead use app manifests (such as the installed
apps from the Chrome Web Store), the policies are stored
in the browser’s persistent app meta data. This essentially
permits the browser to permanently cache the app isolation
policies as long as the application is installed. To update the
policy, developers can use the standard app update process.
6. STATE ISOLATION
The remaining security beneﬁts of using multiple browsers
shown in Table 1 result from isolating an app’s state from
other web sites. In traditional browsers, attackers can try
to take advantage of persistent state, such as using an app’s
cookies in a CSRF attack. They can also try to directly
Figure 1: Entry-point Restriction
Figure 1 illustrates how entry-point restriction works in
practice. Suppose a.com hosts its company logo at a.com/
logo.png, and speciﬁes an entry point at a.com/index.html.
Meanwhile, b.com/index.html includes a hyperlink to a.
com/index.html and embeds an image with the source at-
tribute of a.com/logo.png. In this scenario, the user is able
to follow the hyperlink because it points to a valid entry
point. However, the logo will fail to load because it is a cross
origin request to a non-entry-point URL.
Choosing entry points.
Entry points are whitelisted URLs or URL patterns that
the app’s owner trusts to load safely even when requested by
an attacker’s page. Therefore, it is crucial to choose these
URLs with care. The goal is to select common landing pages
that do not present opportunities for the attacker to exploit
the user’s credentials. We oﬀer the following guidelines for
selecting entry points.
• An entry point URL should cause no sensitive state
changes, because an attacker may request it with the
user’s credentials.
• An entry point URL pattern should be as tightly con-
strained as possible, reducing the opportunity for at-
tackers to place malicious code in the URL.
• An entry point URL should not return conﬁdential
information in a form that could be accessed on a
cross-origin page, such as JSON.
In most cases, the default landing page for an app meets
these guidelines. Many sites expect their users to arrive via
multiple landing pages, creating a need to support multiple
entry points. For example, an online banking site may have
an English login page and a French login page. For additional
ﬂexibility, we also allow web sites to use wildcard charac-
ters in their entry point URLs (e.g., www.a.com/*/ where
* represents any number of non-‘/’ characters). Allowing
wildcards trades oﬀ some security beneﬁts for compatibility
because the number of wildcard characters and entry points
is directly correlated with the size of the app’s attack surface.
However, this is still an improvement over having no such
policy. We recommend that app owners restrict their policies
as tightly as possible and use wildcards only when necessary.
It is important to note that not all web sites are well-
suited for entry-point restriction. Some sites depend heavily
non-entry URLsentry point URLsa.comb.comlogo.pngindex.htmlhelp.htmlindex.htmlfavicon.icoaccess in-memory state by exploiting the browser’s rendering
engine and then inspecting memory.
We can simulate the state beneﬁts of using a separate
browser for an app with a single multi-process browser. This
requires isolating both the in-memory and persistent state of
the app from other web sites, using the process and storage
architectures of the browser.
6.1 Design
Once the browser identiﬁes the URLs comprising an iso-
lated app (as discussed in Section 4), it can ensure instances
of those pages are isolated in memory and on disk.
In-Memory State.
Any top-level page loaded from a URL in the app’s manifest
must be loaded in a renderer process dedicated to that app.
Any sub-resource requests are then made from the same
process as the parent page, even if they target URLs outside
the app’s manifest.
We treat sub-frames in the same manner as sub-resources.
While this may open the app’s process to attacks from a
non-app iframe, the app does have some control over which
iframes are present. Similarly, an app URL may be requested
as an iframe or sub-resource outside the app process. The
potential risk of this approach, that of framing attacks, is
mitigated by persistent state isolation as described below,
which ensures that such requests do not carry the user’s
credentials. This approach has the same security properties
as loading the app in a separate browser.
Top-level pages from all other URLs are not loaded in
the app’s renderer process. Combined with an eﬀective
sandbox mechanism [6], this helps prevent an exploited non-
app renderer process from accessing the in-memory state
present in the app’s process.
The browser kernel process can then take advantage of
the process isolation between apps and other sites to en-
force stricter controls on accessing credentials and other
resources. HTTP Auth credentials, session cookies, and
other in-memory state stored in the browser kernel is only
revealed to the app’s process.
Persistent State.
The browser kernel also creates a separate storage partition
for all persistent state in the isolated app. Any requests
from the app’s renderer process use only this partition, and
requests from other renderer processes do not have access to
it. The partition includes all cookies, localStorage data, and
other local state.
As a result, a user’s session within an app process is not
visible in other renderer processes, even if a URL from the
app is loaded in an iframe outside the app process.
The storage partition can also isolate the browser history
and cache for an app from that for other web sites. This can
help protect against visited link and cache timing attacks, in
which an attacker tries to infer a user’s speciﬁc navigations
within an app.
Combining with Entry-point Restriction.
When both entry-point restriction and state isolation are
used together, the mechanisms complement each other and
we can relax one of the restrictions for entry-point restriction.
Speciﬁcally, a non-app page can be permitted to request
non-entry-point URLs for sub-resources and iframes. This
mimics the behavior when using a separate browser for the
app, and it still protects the user because credentials are
safely restricted to the app process.
6.2
Implementation
We implemented state isolation for apps in Chromium with
roughly 1400 lines of code. For in-memory state isolation,
Chromium already oﬀers stricter process separation between
installed web apps from the Chrome Web Store than most
web sites. Pages from URLs in an app manifest are loaded
in a dedicated app process. In the general case, Chromium
avoids putting pages from diﬀerent origins in the same process
when possible, but cross-origin pages can share a process in
many cases to avoid compatibility concerns [29].
However, we needed to strengthen Chromium’s process
isolation to more thoroughly prevent non-app pages from
loading in the app’s process. First, we needed to ensure
that apps are not placed in general renderer processes if
the browser’s process limit is reached. Second, we needed
to ensure navigations from an app URL to a non-app URL
always exit the app’s process.
For persistent state isolation, we changed Chromium to
create a new URL context (a subset of the user’s proﬁle data)
for each isolated app. The cookies, localStorage data, and
other persistent information is stored on disk in a separate
directory than the persistent data for general web sites. The
browser process can ensure that this data is only provided
to renderer processes associated with the app, and not to
general renderer processes.
7. EVALUATION
In this section, we evaluate state isolation and entry-point
restriction in three ways. First, we perform a formal analysis
for the security properties of these mechanisms. Second,
we experimentally assess the feasibility of various web sites
adopting these mechanisms. Finally, we quantify their per-
formance overhead relative to using one or multiple browsers.
7.1 Security
We used model-checking to evaluate the combined security
characteristics of app isolation using both state isolation and
entry-point restriction. Our approach consists of deﬁning the
security goals of app isolation, then modeling our implemen-
tation, its security goals, and attacker behavior in the web
security framework described in [9] using Alloy [30, 31], a
declarative modeling language based on ﬁrst-order relational
logic. We then analyze whether the expressed goals were met
with the help of the Alloy analyzer software.
Security Goals.
The broad security goal of both our mechanisms are iso-
lation. Isolation protects sensitive resources belonging to
the app, such as non-entry URLs, scripts, and user creden-
tials, against unauthorized use by web pages or scripts not
belonging to the app. We distill two isolation goals which, if
met, will provide the app with defenses against the attacks
described in Section 3.1. (This property holds because the
attacks either require an attacker to gain access to exploitable
URLs within the app or use sensitive state from the app, or
both.)
These goals are modeled by Alloy assertions (logical pred-
icates whose consistency with the model may be checked)
analogous to the following statements:
1. Browser contexts (pages or scripts) originating outside
an app will not read or overwrite state issued within
the app, such as credential cookies.
2. Browser contexts (pages or scripts) originating outside
an app will not obtain a non-entry resource within the
app.
Isolation Mechanisms.
We model entry-point restriction as an Alloy fact (a logic
constraint which always holds), reproduced below. The fact
states that the browser will not issue any cross-origin requests
for a non-entry resource in an entry-restricting origin.
fact StrictEntryEnforcement {
all sc:ScriptContext |
sc.location=StrictEntryBrowser implies
no areq:sc.transactions.req |
areq.path=NON_ENTRY and
isCrossOriginRequest[areq] and
isRequestToStrictEntryOrigin[areq]
}}
To model state isolation, we reﬁned the browser model
of [9] by adding a set of RenderingEngines associated with
each Browser. Each RenderingEngine then runs a set of
ScriptContexts, as shown in the Alloy signatures below:
sig Browser extends HTTPClient {
engines: set RenderingEngine }
sig RenderingEngine {
contexts: set ScriptContext,
inBrowser : one Browser }
The actual state isolation is modeled by Alloy facts. The
ﬁrst fact states that each cookie in the model is tagged with
the RenderingEngine of the ScriptContext in which it was
ﬁrst received. The next states that access to cookies are
restricted to only ScriptContexts from an origin matching
the domain setting of the cookie executing in a Renderin-
gEngine matching the cookie tag.
Our app container model also includes a browser behavior
relevant to app isolation, as described by Section 6.1:
it
associates a newly opened ScriptContext with the existing
RenderingEngine of an app if the top-level URL of the new
ScriptContext is within the app.
Finally, our modeling assumes that users will behave con-
servatively within an isolated app window, meaning attack-
ers cannot get their ScriptContexts in the same Renderin-
gEngine as an app when separate RenderingEngines exist.
Web and Rendering Engine Attacker.
We then modeled the abilities of the attacker. As described
in [9], the abilities of web attackers include ownership of a
web server by which they can introduce ScriptContexts
under their control into the user’s browser. Our modeled
“rendering engine attackers” can additionally create scripts
that compromise the RenderingEngine of the user’s browser,
giving them arbitrary control over other ScriptContexts on
Figure 2: Entry-point restriction violation found by
Alloy model.
the same RenderingEngine, such as reading cookies, creating
new ScriptContexts, sending requests, etc. However, our
model assumes that storage isolation is enforced by an entity
outside the rendering engines, like a browser kernel. Thus, the
“rendering engine attacker” cannot compromise the storage
isolation mechanism.
Entry Restriction Results.
We ﬁrst checked our implementation of entry restriction
against the stated security goals and found that assertion 2
above was violated. We conﬁrmed that this violation also
existed in our implementation at that time and note (with
some sheepishness) that the implementation bug resembles
ones previously found by [9] in Referer validation defenses
proposed by [32].
The violation, illustrated in Figure 2, occurs because of
HTTP redirects. Suppose origin bank.com is a victim origin
that uses entry-point restriction, and origin attack.com is
a external origin that does not use entry-point restriction.
A page created by bank.com is allowed by the browser to
cause a request for a non-entry resource in attack.com, since
attack.com does not use entry-point restriction. attack.com
may then issue a redirect to the browser telling it to ﬁnd the
requested resource back at bank.com. The browser will then
re-issue the request, now to bank.com, which will be granted
by bank.com because the request was initiated by a context
owned by bank.com. This violates the integrity goal because
the external origin attack.com plays a role in redirecting the
request back to bank.com, thus “requesting” the non-entry
resource.
To ﬁx this violation, we updated our implementation to
keep track of all redirects experienced by a request and
to refrain from sending a request for a non-entry resource
to an entry-isolating domain if any external domains are
recorded in the request’s redirects. We veriﬁed that the
model containing this ﬁx now upholds the previously violated
integrity assertion, up to the ﬁnite size we tried (up to 10
NetworkEvents, which are either requests or responses).
App Isolation Results.
We then used the model to check both app mechanisms
(entry-point restriction and state isolation) and found that
neither mechanism individually was able to uphold the secu-
rity goals in the presence of the rendering engine attacker. For
requestnon-entry URLsentry point URLsbank.comattack.comredirect(violation)Figure 3: Isolation violation found by Alloy model.
Request 4 to a non-entry URL, containing creden-
tials issued within the app, is granted if entry-point
restriction is absent or incorrect.
entry-point restriction without state isolation, there is only a
single RenderingEngine for all ScriptContexts, letting the
attacker trivially violate assertion 1 above by compromising