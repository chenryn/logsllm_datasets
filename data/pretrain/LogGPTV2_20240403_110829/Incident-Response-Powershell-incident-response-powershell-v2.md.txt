::: {#mask}
:::
::: wrapper
::: {#header-desktop .desktop}
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: menu
::: menu-inner
[Posts](/posts/){.menu-item} [Categories](/categories/){.menu-item}
[whoami](/whoami){.menu-item} [Projects](/projects){.menu-item} [KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"} []{.menu-item .delimiter}[
[](javascript:void(0); "Search"){#search-toggle-desktop .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-desktop
.search-button .search-clear} []{#search-loading-desktop .search-button
.search-loading} ]{#search-desktop .menu-item
.search}[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
:::
::: {#header-mobile .mobile}
::: header-container
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: {#menu-toggle-mobile .menu-toggle}
:::
:::
::: {#menu-mobile .menu}
::: search-wrapper
::: {#search-mobile .search .mobile}
[](javascript:void(0); "Search"){#search-toggle-mobile .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-mobile
.search-button .search-clear} []{#search-loading-mobile .search-button
.search-loading}
:::
[Cancel](javascript:void(0);){#search-cancel-mobile .search-cancel}
:::
[Posts](/posts/){.menu-item}[Categories](/categories/){.menu-item}[whoami](/whoami){.menu-item}[Projects](/projects){.menu-item}[KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"}
[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
::: {.search-dropdown .desktop}
::: {#search-dropdown-desktop}
:::
:::
::: {.search-dropdown .mobile}
::: {#search-dropdown-mobile}
:::
:::
::: {.main role="main"}
::: container
# Incident Response PowerShell V2 {#incident-response-powershell-v2 .single-title .animate__animated .animate__flipInX}
::: post-meta
::: post-meta-line
[[Bert-Jan Pals](/ "Author"){.author
rel="author"}]{.post-author} [included in [KQL](/categories/kql/) [Azure
Data
Explorer](/categories/azure-data-explorer/) [PowerShell](/categories/powershell/) [Incident
Response](/categories/incident-response/)]{.post-category}
:::
::: post-meta-line
 2024-02-14  928 words   5 minutes 
:::
:::
::: {#content .content}
# DFIR PowerShell V2
The DFIR PowerShell script has gotten a major update! The script
provides you with a single script to collect forensic artefacts on
Windows devices. Whether you are responding to incidents with Security
E5 licenses or without a security budget, this tool can be executed to
collect the needed information to perform the first response.
This blog will discuss the following items:
-   [What's New in Version 2.0](#whats-new-in-version-20){rel=""}
-   [SIEM Import Functionality](#siem-import-functionality){rel=""}
-   [Azure Data Explorer](#azure-data-explorer){rel=""}
    -   [OpenTCPConnections](#opentcpconnections){rel=""}
    -   [Visualising Evidence](#visualising-evidence){rel=""}
-   [Defender For Endpoint Live
    Response](#defender-for-endpoint-live-response){rel=""}
## What's New in Version 2.0: {#whats-new-in-version-20}
1.  **SIEM Import Functionality**
-   In the world of incident response, seamless collaboration and
    integration with other tools are essential. The new SIEM import
    functionality feature allows you to import the collected artefacts
    into your preferred SIEM or data analysis tools by providing the
    output also as CSV files.
2.  **Microsoft Protection Log -- Artefact Collection**
-   The script includes the export of Microsoft Protection Log (MPLog).
    These files can contain artefacts of the following activities:
    Process execution, Threats detected, Security Scans and Actions and
    File existence.
3.  **DefenderExclusions -- Artefact Collection**
-   The script gathers the Defender Exclusions that are configured on
    the device. The exclusions can contain evidence of excluded
    files/folders/processes that have not been monitored.
4.  **Custom Timeframe Support For Windows Security Event Collection**
-   That Windows Security Events can contain valuable information about
    attacker behaviour was already known. This customization allows
    users to customize the timeframe of the collected security events to
    their specific investigative needs, ensuring a more targeted and
    efficient response.
![/images/IncidentResponsePowershellV2/IRPowerShell.jpeg](/svg/loading.min.svg "Alt text"){.lazyload
data-src="/images/IncidentResponsePowershellV2/IRPowerShell.jpeg"
data-srcset="/images/IncidentResponsePowershellV2/IRPowerShell.jpeg, /images/IncidentResponsePowershellV2/IRPowerShell.jpeg 1.5x, /images/IncidentResponsePowershellV2/IRPowerShell.jpeg 2x"
data-sizes="auto"}
## SIEM Import Functionality
The biggest addition for responders is that the forensic artefacts are
now exported as CSV files, which allows responders to ingest them into
their tooling. Some example tools in which you can ingest the data are
Sentinel, Splunk, Elastic or Azure Data Explorer (ADX examples are shown
later in this blog). This will allow you to perform filtering,
aggregation and visualisation with your preferred query language.
The folder *CSV Results (SIEM Import Data)* includes all the CSV files
containing the artefacts, the folder listing is shown below.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
Name
----
ActiveUsers.csv
AutoRun.csv
ConnectedDevices.csv
DefenderExclusions.csv
DNSCache.csv
Drivers.csv
InstalledSoftware.csv
IPConfiguration.csv
LocalUsers.csv
NetworkShares.csv
OfficeConnections.csv
OpenTCPConnections.csv
PowerShellHistory.csv
Processes.csv
RDPSessions.csv
RemotelyOpenedFiles.csv
RunningServices.csv
ScheduledTasks.csv
ScheduledTasksRunInfo.csv
SecurityEvents.csv
ShadowCopy.csv
SMBShares.csv
```
:::
## Azure Data Explorer
ADX is my personal favourite when it comes to analyzing external data
sources. Before diving into some examples, in a previous blog ([Incident
Response Part 2: What about the other
logs?](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
rel="noopener noreffer"} ) I have explained the value of ADX for
incident response, to be able to perform analysis on custom logs
(everything that is not ingested in your SIEM/EDR). Through the
OpenTCPConnections and ConnectedDevices artefacts I will share examples
to effectively analyse the content of the exported files
If you want to join the custom logs outputted by the PowerShell script
with for example DeviceFileEvents it is recommended to use the
[externaldata()](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/externaldata-operator?pivots=azuredataexplorer){target="_blank"
rel="noopener noreffer"} operator in MDE or Sentinel.
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Free Azure Data Explorer Cluster
:::
::: details-content
::: admonition-content
You can get a free Azure Data Explorer Cluster if you do not have a
company-owned cluster. This cluster will include roughly 100 GB of log
storage. The documentation below can be used to create your cluster,
which is a prerequisite for the next part of the blog.
Documentation:
-   [https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free-web-ui](https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free-web-ui){target="_blank"
    rel="noopener noreffer"}
-   [https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free](https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
### OpenTCPConnections
Once the files have been imported into Azure Data Explorer they can be
queried via KQL, the example below shows 10 rows from the retrieved
*OpenTCPConnections.csv* file. This file contains all the outstanding
TCP connections of the moment the script was executed, which could for
example be Command & Control connections to the adversary's
infrastructure.
![List 10 rows with open TCP
connections](/svg/loading.min.svg){.lazyload
data-src="/images/IncidentResponsePowershellV2/OpenTCPConnections.png"
data-srcset="/images/IncidentResponsePowershellV2/OpenTCPConnections.png, /images/IncidentResponsePowershellV2/OpenTCPConnections.png 1.5x, /images/IncidentResponsePowershellV2/OpenTCPConnections.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
OpenTCPConnections
| project State, AppliedSetting, CreationTime, LocalAddress, LocalPort, RemoteAddress, RemotePort
| take 10
```
:::
Next up is using the query language itself to filter the data to find
suspicious activities. In this case, we are performing a forensic hunt
to find malicious outbound connections from the infected host. This is
done by filtering all the internal connections, which leaves us with
connections to public IP addresses. Lastly, we filter on connections
where the remote port number is between 0 and 1000.
![Open TCP Connections to Public IPs](/svg/loading.min.svg){.lazyload
data-src="/images/IncidentResponsePowershellV2/OpenTCPConnectionsAnalysisKQL.png"
data-srcset="/images/IncidentResponsePowershellV2/OpenTCPConnectionsAnalysisKQL.png, /images/IncidentResponsePowershellV2/OpenTCPConnectionsAnalysisKQL.png 1.5x, /images/IncidentResponsePowershellV2/OpenTCPConnectionsAnalysisKQL.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
OpenTCPConnections
| project State, AppliedSetting, CreationTime, LocalAddress, LocalPort, RemoteAddress, RemotePort
| where not(ipv4_is_private(RemoteAddress))
| where RemotePort between (0 .. 1000)
```
:::
### Visualising Evidence
One of the powers of KQL is that it enables users to easily aggregate
and visualise results, in this example the artefacts from the
ConnectedDevices (all the plug-and-play devices) are visualised in a
piechart. This shows clearly which PNP device class is often used and
which might be anomalous.
Visualising results is a good practice to do when performing incident
response, especially when performing forensic hunts on large datasets.
Visualising the context will provide quick understanding, pattern
information and the detection of anomalies in the logs.
![Connected Devices](/svg/loading.min.svg){.lazyload
data-src="/images/IncidentResponsePowershellV2/ConnectedDevices.png"
data-srcset="/images/IncidentResponsePowershellV2/ConnectedDevices.png, /images/IncidentResponsePowershellV2/ConnectedDevices.png 1.5x, /images/IncidentResponsePowershellV2/ConnectedDevices.png 2x"
data-sizes="auto"}
Query:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
ConnectedDevices
| summarize count() by Class
| render piechart 
```
:::
## Defender For Endpoint Live Response
The DFIR Script can be used within Live Response to collect additional
information from impacted devices. The [Incident Response Part 3:
Leveraging Live
Response](https://kqlquery.com/posts/leveraging-live-response/#incident-response-scripts){target="_blank"
rel="noopener noreffer"} explains in detail how custom PowerShell
scripts can be added and executed within Live Response, this includes a
detailed explanation with the DFIR PowerShell V1 script. To summarise
the steps:
1.  Upload the file to the Live Response Library.
2.  Execute `run DFIR-script.ps1 to start the script`.
3.  Execute `getfile DFIR-DeviceName-yyyy-mm-dd` to download the
    retrieved artefacts to your local machine for analysis.
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Related Blogs
:::
::: details-content
::: admonition-content
-   [Incident Response Part 1: IR on Microsoft Security Incidents (KQL
    edition)](https://kqlquery.com/posts/kql-incident-response/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 2: What about the other
    logs?](https://kqlquery.com/posts/kql-incident-response-everything-else/){target="_blank"
    rel="noopener noreffer"}
-   [Incident Response Part 3: Leveraging Live
    Response](https://kqlquery.com/posts/leveraging-live-response/){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
> **Questions?** Feel free to reach out to me on any of my socials.
:::
::: {#post-footer .post-footer}
::: post-info
::: post-info-line
::: post-info-mod
Updated on 2024-02-14
:::
:::
::: post-info-line
::: post-info-md
:::
::: post-info-share
[](javascript:void(0); "Share on Twitter"){sharer="twitter"
url="https://kqlquery.com/posts/incident-response-powershell-v2/"
data-title="Incident Response PowerShell V2" via="BertJanCyber"
hashtags="KQL,PowerShell"}[](javascript:void(0); "Share on Facebook"){sharer="facebook"
url="https://kqlquery.com/posts/incident-response-powershell-v2/"
hashtag="KQL"}[](javascript:void(0); "Share on Linkedin"){sharer="linkedin"
url="https://kqlquery.com/posts/incident-response-powershell-v2/"}[](javascript:void(0); "Share on Reddit"){sharer="reddit"
url="https://kqlquery.com/posts/incident-response-powershell-v2/"}
:::
:::
:::
::: post-info-more
::: {.section .post-tags}
 [KQL](/tags/kql/), [PowerShell](/tags/powershell/)
:::
::: section
[Back](javascript:void(0);){onclick="window.history.back()"} \| [Home](/)
:::
:::
::: post-nav
[KQL Security Sources - 2024
Update](/posts/kql-sources-2024-update/ "KQL Security Sources - 2024 Update"){.prev
rel="prev"} [Detecting Post-Exploitation
Behaviour](/posts/detecting-post-exploitation-behaviour/ "Detecting Post-Exploitation Behaviour"){.next
rel="next"}
:::
:::
:::
:::
::: footer-container
::: {.footer-line itemscope="" itemtype="http://schema.org/CreativeWork"}
[2023 - 2024]{itemprop="copyrightYear"}[ [Bert-Jan
Pals](/){target="_blank"}]{.author
itemprop="copyrightHolder"} \| [©]{.license}
:::
:::
:::
::: {#fixed-buttons}
[](# "Back to Top"){#back-to-top .fixed-button}
[](# "View Comments"){#view-comments .fixed-button}
:::