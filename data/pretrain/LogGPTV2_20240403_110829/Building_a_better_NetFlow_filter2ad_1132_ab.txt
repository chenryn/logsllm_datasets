### Solutions for Counting Flows at Line Speeds

Existing solutions [15] can count the total number of flows at line speeds, but they do not allow for the recovery of the number of flows associated with specific traffic aggregates. Our flow counting extension (FCE) addresses this by enabling arbitrary aggregation of flow keys in post-processing, thereby providing estimates of flows within those aggregates.

### Comparison with Flow Sampling

Our FCE is related to the flow sampling technique introduced by Hohn and Veitch [18]. However, there are key differences:
- **Hardware Implementation**: We outline a hardware implementation that operates at line speeds.
- **Focus on Aggregates**: Our primary focus is estimating the number of flows in arbitrary traffic aggregates, whereas Hohn and Veitch's method focuses on computing the distribution of flow sizes.

Choi et al. [9] use adaptive sampling to ensure that the variance introduced by packet size variability does not exceed a pre-set limit. Other solutions, such as sFlow [26], sample packets but do not build flow records. The advantage of these solutions is that they report full packet headers and a portion of the packet payload, providing rich raw data for analysis. However, they do not benefit from the compression achieved by flow records, which count multiple packets.

### Adaptive NetFlow

Adaptive NetFlow (ANF) is an enhanced version of NetFlow that addresses the limitations discussed in Section 1.2, without requiring changes to router hardware or the infrastructure collecting traffic measurement data.

#### Operation in Measurement Bins

To address the mismatch between NetFlow’s flow termination heuristics and the time-based analysis used by applications, we divide NetFlow operation into short bins. These bins are multiples of the analysis bins, and we terminate all active flow records at the end of each bin. This simplifies the processing of NetFlow data, as all flow records fit within the analysis bins. The timestamps of the first and last packets in flow records are no longer necessary but can be retained for backward compatibility. Accurate alignment between measurement and analysis bins can be achieved using Network Time Protocol (NTP) [22].

The size of the measurement bins is a trade-off:
- **Larger Bins**: Reduce the traffic generated by NetFlow due to less frequent reporting.
- **Smaller Bins**: Provide more prompt reporting of network traffic and must be at least as small as the smallest analysis bins.

Choosing the bin size involves similar trade-offs as setting the active timeout in Cisco’s NetFlow, which controls how long an active flow entry stays before being terminated and reported. Anecdotal evidence suggests that network operators often decrease the active timeout for prompter reporting [2]. In ANF, the measurement bin size is a configurable parameter, with one minute and five minutes being good default choices. In our experiments, we used a one-minute bin size for more challenging scenarios.

#### Adapting the Sampling Rate

Determining the optimal sampling rate for NetFlow is complex due to various conflicting factors, such as avoiding overloading the processor. Instead of trial and error, we propose that the router manufacturer determines the maximum sampling rate under worst-case conditions, such as during a distributed denial of service (DDoS) attack. This maximum rate is used to initialize the sampling rate at the beginning of each bin.

Even with a low initial sampling rate, the number of entries created can exceed available memory. To manage this, ANF occasionally decreases the sampling rate to avoid filling all available memory. During this "renormalization," we adjust the packet and byte counters of existing entries. If an entry’s packet counter reaches zero, meaning none of its packets would have been sampled at the new rate, the entry is deallocated. Renormalization must free a certain number of entries to ensure ANF never runs out of memory. We describe the efficient and accurate method used by ANF to find the new sampling rate that ensures the required number of entries are freed in Section 2.2.2.

In Section 2.3, we provide an example of how a router manufacturer can configure ANF to ensure that router memory and processing power are not exhausted under any possible traffic mix.

Many proofs of the lemmas presented in this section are omitted for brevity and can be found in the technical report version of this paper [14].

### Example: Handling DDoS Attacks

Figure 4 illustrates how ANF automatically chooses a lower sampling rate during a DDoS attack. While NetFlow’s sampling rate remains constant, ANF switches to a lower rate during each bin spanning the attack to keep the number of flow records generated constant. At the start of each new bin, the rate is reset to the maximum, ensuring it is not unnecessarily low once the attack ends.