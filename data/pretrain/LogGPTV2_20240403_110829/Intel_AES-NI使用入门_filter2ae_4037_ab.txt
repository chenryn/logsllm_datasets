            self.is_enc, self.is_last = is_enc, is_last
            base.parent = self
            key.parent = self
        def do_emit(self, f):
            self.base.emit(f)
            self.key.emit(f)
            f.write("__m128i {}=_mm_aes{}{}_si128({},{});\n".format(
                self, "enc" if self.is_enc else "dec", "last" if self.is_last else "", self.base, self.key))
    class Aesimc(Node):
        def __init__(self, a, is_imc):
            super().__init__()
            self.a = a
            self.is_imc = is_imc
            a.parent = self
        def do_emit(self, f):
            self.a.emit(f)
            if self.is_imc:
                f.write("__m128i {}=_mm_aesimc_si128({});\n".format(self, self.a))
            else:
                f.write("__m128i {}=_mm_aesenc_si128(_mm_aesdeclast_si128({},zero),zero);\n".format(
                    self, self.a))
    class Shuffle(Node):
        def __init__(self, a, x):
            super().__init__()
            self.a = a
            self.x = x
            a.parent = self
        def do_emit(self, f):
            self.a.emit(f)
            f.write("__m128i {}=_mm_shuffle_epi32({},{});\n".format(
                self, self.a, hex(self.x)))
    def flip(root):
        parent = root.parent
        if isinstance(parent, Constant):
            return parent
        elif isinstance(parent, Xor):
            if root == parent.a:
                return Xor(parent.b, flip(parent))
            else:
                return Xor(parent.a, flip(parent))
        elif isinstance(parent, Add):
            if root == parent.a:
                return Sub(flip(parent), parent.b)
            else:
                return Sub(flip(parent), parent.a)
        elif isinstance(parent, Sub):
            if root == parent.a:
                return Add(flip(parent), parent.b)
            else:
                return Sub(parent.a, flip(parent))
        elif isinstance(parent, Shuffle):
            x = parent.x
            shuffle = []
            for i in range(4):
                shuffle.append(x & 3)
                x >>= 2
            assert set(shuffle) == set({0, 1, 2, 3})
            x = 0
            for i in range(4):
                x 
    #include 
    int main(){
    __m128i zero=_mm_setzero_si128();
    ''')
    target.emit(f)
    f.write('''char pt[16];
    _mm_storeu_si128((__m128i*)pt, {});
    fwrite(pt,16,1,stdout);
    return 0;
    }}
    '''.format(target))
编译的时候加上`-maes`选项打开AESNI，会生成SSE指令集的程序，如果用`-march=native`再多打开一些指令集，还能自动编译出AVX2+VAES的程序，现在的编译器也是十分智能。
flag: `n1ctf{Easy_AVX!}`（一点都不easy）