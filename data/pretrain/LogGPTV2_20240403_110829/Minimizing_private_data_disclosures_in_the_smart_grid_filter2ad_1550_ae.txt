### Table 5: Average Number of Load-Change Events Detected per Day

| Dataset (DS) | Battery DS (KWh) | S1 (KWh) | S2 (KWh) | S3 (KWh) | S4 (KWh) | NILL | BE |
|--------------|------------------|----------|----------|----------|----------|------|----|
| 1942.9/2013.2 (96.51%) | 752.5/761.8 (98.78%) | 699.4/728.2 (96.04%) | 221.4/221.4 (100.0%) | 28.3/28.3 (100.0%) | 25.0/25.0 (100.0%) | 12.8/12.8 (100.0%) | 5.8/5.8 (100.0%) |
| 1.0 | 1.0 | 1.0 | 1.0 | NILL | 752.5/762.1 (98.78%) | 25.0/25.0 (100.0%) | 32.4/32.4 (100.0%) |
| 2.7/2.7 (100.0%) | 1101.4/1136.3 (96.93%) | 1080.2/1140.2 (94.74%) | 12.4/12.4 (100.0%) | 19.5/19.5 (100.0%) | One-minute dataset (Varying Battery) | One-minute dataset (Varying Datasets) |  |
| 0.7 M1 | 0.8 M1 | 0.9 M1 | 1.0 M1 | 1.1 M1 | 1.2 M1 | NILL | BE |
| 133.5/146.4 (91.19%) | 94.4/106.1 (88.97%) | 74.4/81.4 (91.40%) | 67.9/76.3 (88.99%) | 66.2/73.4 (81.17%) | 64.1/72.7 (85.68%) | 48.7/59.2 (82.26%) | 46.8/55 (85.09%) |
| 44.1/50.8 (86.81%) | 42/47.2 (88.98%) | 39.7/43.9 (90.43%) | 37.4/41.1 (91.00%) | 1.0 M1 | 1.0 M2 | 1.0 M3 | 1.0 M4 |
| 1.0 M5 | 1.0 M6 | NILL | 67.9/76.3 (88.99%) | 56.0/62.3 (89.89%) | 44.6/47.1 (94.69%) | 91.1/95.8 (95.09%) | 32.8/35.3 (92.92%) |
| 68.1/75.6 (90.08%) | 42/47.2 (88.98%) | 31.7/37.4 (84.76%) | 20.6/25.9 (79.54%) | 24.5/28.8 (85.07%) | 22.5/25.2 (89.29%) | 34.1/39.8 (85.68%) |  |

**Note:** The format is a/b (precision), where b is the number of load-change events detected, a is the number of accurate detections, and precision = a/b. An accurate detection is defined as one where the value of the detected load-change is exactly the same as the actual load-change. The recall rate is determined by b, the number of detected events.

### Table 6: Required Battery Capacity for Similar Privacy Levels

| Algorithm | 0.1 KWh | 0.2 KWh | 0.3 KWh | 0.4 KWh | 0.5 KWh | 0.6 KWh | 0.7 KWh | 0.8 KWh | 1.0 KWh | 1.1 KWh | 1.3 KWh | 1.41 | 3.54 | 1 | 2.37 | 6.62 |
|-----------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|------|------|---|------|------|
| LS2       | 0.0210  | 0.0082  | 0.0053  | 0.0032  | 0.0023  | 0.0233  | 0.0084  | 0.0055  | 0.0034  | 0.0029  | 0.0220  | 0.0118 | 0.0053 | 0.0036 | 0.0022 | 0.5233 |
| BE        | 0.3860  | 0.3280  | 0.2899  | 0.2607  | 0.4995  | 0.3956  | 0.3211  | 0.2875  | 0.2644  | 0.5269  | 0.4110  | 0.3323 | 0.3009 | 0.2668 | 1 |  |
| NILL      | 0.0210  | 0.0082  | 0.0053  | 0.0032  | 0.0023  | 0.0233  | 0.0084  | 0.0055  | 0.0034  | 0.0029  | 0.0220  | 0.0118 | 0.0053 | 0.0036 | 0.0022 | 0.5233 |

**Note:** The format of data is capacity (mutual information).

### Related Work

Rajagopalan et al. [37] use mutual information between the external load and the demand load to measure privacy but do not propose a BLH algorithm. Acs et al. [3] add Laplace and truncated geometric noise to the external load through battery discharging to achieve differential privacy guarantees, but they do not consider battery recharging. Backes et al. [5] extend this scheme to include battery recharging and show that the power consumption of a television can be made differentially private with very large batteries.

Another approach to obtaining privacy guarantees for load profiles is to trust the utility to implement privacy protections in the meter. One of the first approaches suggested is using a zero-knowledge protocol between a third party and the utility to report load aggregates from the meter [32, 38, 19]. This allows for time-of-day billing without releasing fine-grained load profiles. Differential privacy has also been proposed for load profiles [2] by adding Laplacian noise, but this work does not apply to time-varying billing rates. In [41], Shi et al. use homomorphic encryption to make guarantees about sums taken at an aggregation point. Our paper is orthogonal to this line of research. For these cryptographic mechanisms to be effective, they need to be adopted by smart meter vendors and utilities, and the smart meters and vendors must be trusted. As smart meters are already being deployed, it appears that the likely scenario is that the majority of deployed smart meters will not support these protocols. Our approach can be deployed with existing smart meters.

### Conclusions

We have identified new vulnerabilities in two existing BLH algorithms that allow for the recovery of substantial appliance usage information. We have also introduced a novel stepping-based framework for BLH algorithms, which by design are secure against precise load change recovery attacks. We propose mutual-information-based measurements to evaluate the privacy of different algorithms. Experimental evaluation demonstrates the effectiveness of our approach, and in particular, the LS2 stepping algorithm significantly and consistently outperforms other algorithms.

### Acknowledgements

W. Yang, N. Li, and W. Qardaji were supported by the Air Force Office of Scientific Research MURI Grant FA9550-08-1-0265, and by the National Science Foundation under Grant No. 0905442. Y. Qi was supported by NSF IIS-0916443, NSF CAREER award IIS-1054903, and the Center for Science of Information (CSoI), an NSF Science and Technology Center, under grant agreement CCF-0939370. S. McLaughlin and P. McDaniel were partially supported by the National Science Foundation under Grant No. CCF 0937944 and CNS 0643907, and by a grant from the Security and Software Engineering Research Center (S2ERC).

### References

[References listed here, following the provided format.]

### Appendix: Mutual Information Measures

#### Mutual Information Under the Independence Assumption

Using the independence assumption, we can easily compute the mutual information \( I \) as follows. We first discretize \( e'(t) \) (and \( d'(t) \)) into \( K \) discrete values (in our experiments, we set \( K = 500 \)). We then estimate the joint distribution \( p(f(t)) \), where \( f(t) = (e'(t), d'(t)) \) at each time by simply counting the number of joint appearances of \( (a, b) \) and normalizing it:

\[ p(e'(t) = a, d'(t) = b) = \frac{1}{T} \sum_{i=1}^T \delta(e'(i) = a \wedge d'(i) = b) \]

where \( \delta(·) \) is 1 if the statement inside is true. Given the joint distribution, we can easily obtain the marginal distributions of \( e'(t) \) and \( d'(t) \):

\[ p(e'(t)) = \sum_{d'(t)} p(e'(t), d'(t)) \]
\[ p(d'(t)) = \sum_{e'(t)} p(e'(t), d'(t)) \]

Given the joint and marginal distributions, we calculate the mutual information as follows:

\[ I(e' || d') = \sum_{i=1,...,T} I(e'(i) || d'(i)) \]
\[ I(e'(i) || d'(i)) = \sum_{e'(i)} \sum_{d'(i)} p(e'(i), d'(i)) \log \left( \frac{p(e'(i), d'(i))}{p(e'(i)) p(d'(i))} \right) \]

#### Mutual Information Under the Markov Assumption

While the independence assumption makes the computation very efficient, it ignores correlations embedded in samples of \( e'(t) \) (and of \( d'(t) \))—as time series, these samples are naturally correlated (e.g., \( e'(t) \) may depend on \( e'(t-1) \)). To address this issue, we model samples in \( f(t) \), \( e'(t) \), and \( d'(t) \) by stationary first-order Markov chains. As a result, we have:

\[ p(e'(t) = a) = \frac{1}{T} \sum_{i=1}^T \delta(e'(i) = a) \]
\[ p(e'(t) = a | e'(t-1) = c) = \frac{\sum_{i=2}^T \delta(e'(i) = a \wedge e'(i-1) = c)}{\sum_{i=2}^T \delta(e'(i-1) = c)} \]
\[ p([e'(1), ..., e'(T)]) = p(e'(1)) \prod_{i=2}^T p(e'(i) | e'(i-1)) \]

Similarly, we can compute the distribution of \( ([d'(1), ..., d'(T)]) \). To obtain the joint distribution over \( (e', d') \), we compute:

\[ p(f(t) = (a, b) | f(t-1) = (c, d)) = \frac{\sum_{i=2}^{T-1} \delta(f(i) = (a, b) \wedge f(i-1) = (c, d))}{\sum_{i=2}^{T-1} \delta(f(i-1) = (c, d))} \]

Then the mutual information is:

\[ I(e' || d') = \sum_{e'} \sum_{d'} p(e', d') \log \left( \frac{p(e', d')}{p(e') p(d')} \right) \]
\[ I(e'(i, i+1) || d'(i, i+1)) - \sum_{i=2}^{T-1} I(e'(i) || d'(i)) \]

where:

\[ I(e'(i, i+1) || d'(i, i+1)) = \sum_{f(i)} \sum_{f(i+1)} p(f(i-1)) p(f(i) | f(i-1)) \log \left( \frac{p(f(i-1)) p(f(i) | f(i-1))}{p(e'(i-1, i)) p(d'(i-1, i))} \right) \]

and \( I(e'(i) || d'(i)) \) is given in Equation (1).