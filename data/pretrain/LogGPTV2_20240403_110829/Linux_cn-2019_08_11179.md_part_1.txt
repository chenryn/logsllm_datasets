---
author: Seth Kenlon
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5844
date: '2019-08-03 09:59:00'
editorchoice: false
excerpt: 厌倦了一遍又一遍地输入相同的长命令？你觉得在命令行上工作效率低吗？Bash 别名可以为你创造一个与众不同的世界。
fromurl: https://opensource.com/article/19/7/bash-aliases
id: 11179
islctt: true
largepic: /data/attachment/album/201908/03/095855ip0h0jpi5u9t3r00.jpg
permalink: /article-11179-1.html
pic: /data/attachment/album/201908/03/095855ip0h0jpi5u9t3r00.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 厌倦了一遍又一遍地输入相同的长命令？你觉得在命令行上工作效率低吗？Bash 别名可以为你创造一个与众不同的世界。
tags:
- 别名
thumb: false
title: 不可或缺的 Bash 别名
titlepic: true
translator: wxy
updated: '2019-08-03 09:59:00'
---
> 
> 厌倦了一遍又一遍地输入相同的长命令？你觉得在命令行上工作效率低吗？Bash 别名可以为你创造一个与众不同的世界。
> 
> 
> 
![](/data/attachment/album/201908/03/095855ip0h0jpi5u9t3r00.jpg)
Bash 别名是一种用新的命令补充或覆盖 Bash 命令的方法。Bash 别名使用户可以轻松地在 [POSIX](https://opensource.com/article/19/7/what-posix-richard-stallman-explains) 终端中自定义其体验。它们通常定义在 `$HOME/.bashrc` 或 `$HOME/bash_aliases` 中（它是由 `$HOME/.bashrc` 加载的）。
大多数发行版在新用户帐户的默认 `.bashrc` 文件中至少添加了一些流行的别名。这些可以用来简单演示 Bash 别名的语法：
```
alias ls='ls -F'
alias ll='ls -lh'
```
但并非所有发行版都附带预先添加好的别名。如果你想手动添加别名，则必须将它们加载到当前的 Bash 会话中：
```
$ source ~/.bashrc
```
否则，你可以关闭终端并重新打开它，以便重新加载其配置文件。
通过 Bash 初始化脚本中定义的那些别名，你可以键入 `ll` 而得到 `ls -l` 的结果，当你键入 `ls` 时，得到也不是原来的 [ls](https://opensource.com/article/19/7/master-ls-command) 的普通输出。
那些别名很棒，但它们只是浅尝辄止。以下是十大 Bash 别名，一旦你试过它们，你会发现再也不能离开它们。
### 首先设置
在开始之前，创建一个名为 `~/.bash_aliases` 的文件：
```
$ touch ~/.bash_aliases
```
然后，确认这些代码出现在你的 `~/.bashrc` 文件当中：
```
if [ -e $HOME/.bash_aliases ]; then
    source $HOME/.bash_aliases
fi
```
如果你想亲自尝试本文中的任何别名，请将它们输入到 `.bash_aliases` 文件当中，然后使用 `source ~/.bashrc` 命令将它们加载到当前 Bash 会话中。
### 按文件大小排序
如果你一开始使用过 GNOME 中的 Nautilus、MacOS 中的 Finder 或 Windows 中的资源管理器等 GUI 文件管理器，那么你很可能习惯了按文件大小排序文件列表。你也可以在终端上做到这一点，但这条命令不是很简洁。
将此别名添加到 GNU 系统上的配置中：
```
alias lt='ls --human-readable --size -1 -S --classify'
```
此别名将 `lt` 替换为 `ls` 命令，该命令在单个列中显示每个项目的大小，然后按大小对其进行排序，并使用符号表示文件类型。加载新别名，然后试一下：
```
$ source ~/.bashrc
$ lt
total 344K
140K configure*
 44K aclocal.m4
 36K LICENSE
 32K config.status*
 24K Makefile
 24K Makefile.in
 12K config.log
8.0K README.md
4.0K info.slackermedia.Git-portal.json
4.0K git-portal.spec
4.0K flatpak.path.patch
4.0K Makefile.am*
4.0K dot-gitlab.ci.yml
4.0K configure.ac*
   0 autom4te.cache/
   0 share/
   0 bin/
   0 install-sh@
   0 compile@
   0 missing@
   0 COPYING@
```
在 MacOS 或 BSD 上，`ls` 命令没有相同的选项，因此这个别名可以改为：
```
alias lt='du -sh * | sort -h'
```
这个版本的结果稍有不同：
```
$ du -sh * | sort -h
0       compile
0       COPYING
0       install-sh
0       missing
4.0K    configure.ac
4.0K    dot-gitlab.ci.yml
4.0K    flatpak.path.patch
4.0K    git-portal.spec
4.0K    info.slackermedia.Git-portal.json
4.0K    Makefile.am
8.0K    README.md
12K     config.log
16K     bin
24K     Makefile
24K     Makefile.in
32K     config.status
36K     LICENSE
44K     aclocal.m4
60K     share
140K    configure
476K    autom4te.cache
```
实际上，即使在 Linux上，上面这个命令也很有用，因为使用 `ls` 列出的目录和符号链接的大小为 0，这可能不是你真正想要的信息。使用哪个看你自己的喜好。
*感谢 Brad Alexander 提供的这个别名的思路。*
### 只查看挂载的驱动器
`mount` 命令过去很简单。只需一个命令，你就可以获得计算机上所有已挂载的文件系统的列表，它经常用于概览连接到工作站有哪些驱动器。在过去看到超过三、四个条目就会令人印象深刻，因为大多数计算机没有那么多的 USB 端口，因此这个结果还是比较好查看的。
现在计算机有点复杂，有 LVM、物理驱动器、网络存储和虚拟文件系统，`mount` 的结果就很难一目了然：
```
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime,seclabel)
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
devtmpfs on /dev type devtmpfs (rw,nosuid,seclabel,size=8131024k,nr_inodes=2032756,mode=755)
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
[...]
/dev/nvme0n1p2 on /boot type ext4 (rw,relatime,seclabel)
/dev/nvme0n1p1 on /boot/efi type vfat (rw,relatime,fmask=0077,dmask=0077,codepage=437,iocharset=ascii,shortname=winnt,errors=remount-ro)
[...]
gvfsd-fuse on /run/user/100977/gvfs type fuse.gvfsd-fuse (rw,nosuid,nodev,relatime,user_id=100977,group_id=100977)
/dev/sda1 on /run/media/seth/pocket type ext4 (rw,nosuid,nodev,relatime,seclabel,uhelper=udisks2)
/dev/sdc1 on /run/media/seth/trip type ext4 (rw,nosuid,nodev,relatime,seclabel,uhelper=udisks2)
binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,relatime)
```
要解决这个问题，试试这个别名：
```
alias mnt='mount | awk -F' ' '{ printf "%s\t%s\n",$1,$3; }' | column -t | egrep ^/dev/ | sort'
```
此别名使用 `awk` 按列解析 `mount` 的输出，将输出减少到你可能想要查找的内容（挂载了哪些硬盘驱动器，而不是文件系统）：
```
$ mnt
/dev/mapper/fedora-root  /
/dev/nvme0n1p1           /boot/efi
/dev/nvme0n1p2           /boot
/dev/sda1                /run/media/seth/pocket
/dev/sdc1                /run/media/seth/trip
```
在 MacOS 上，`mount` 命令不提供非常详细的输出，因此这个别名可能过度精简了。但是，如果你更喜欢简洁的报告，请尝试以下方法：
```
alias mnt='mount | grep -E ^/dev | column -t'
```
结果：
```
$ mnt
/dev/disk1s1  on  /                (apfs,  local,  journaled)
/dev/disk1s4  on  /private/var/vm  (apfs,  local,  noexec,     journaled,  noatime,  nobrowse)
```
### 在你的 grep 历史中查找命令
有时你好不容易弄清楚了如何在终端完成某件事，并觉得自己永远不会忘记你刚学到的东西。然后，一个小时过去之后你就完全忘记了你做了什么。
搜索 Bash 历史记录是每个人不时要做的事情。如果你确切地知道要搜索的内容，可以使用 `Ctrl + R` 对历史记录进行反向搜索，但有时你无法记住要查找的确切命令。
这是使该任务更容易的别名：
```
alias gh='history|grep'
```
这是如何使用的例子：
```
$ gh bash
482 cat ~/.bashrc | grep _alias
498 emacs ~/.bashrc
530 emacs ~/.bash_aliases
531 source ~/.bashrc
```
### 按修改时间排序