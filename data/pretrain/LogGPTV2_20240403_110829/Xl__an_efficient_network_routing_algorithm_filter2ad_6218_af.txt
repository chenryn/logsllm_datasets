was omitted because its communication exceeded the other algorithms by a factor of
5 in the Standard model and nearly an order of magnitude on the Flapping model.
is also responsible for the longer time to establish a new forwarding
path, although lv seemed to have slightly faster convergence.
With the exception of the CROWN network, xl had slightly better
convergence times than ls. This is because xl changes its next hop
to a destination only if it is much better than the current next hop,
thus updating the forwarding table less often and avoiding short-
term loops or unreachable conﬁgurations. On the other hand, the
time to accept a new forwarding path is generally longer than ls
because xl has less information about the network, so that when a
link fails, it may be necessary for the link failure update to prop-
agate before a bypass route is advertised. CVP partially remedies
this the situation because when a cut edge comes up, only the cor-
responding cut vertices need to be updated to restore the path.
6.3 Scalability
To evaluate the scalability of the XL routing algorithm relative
to existing algorithms, we simulated each algorithm on families of
networks of increasing size: the HONEY synthetic network family
and the ORB re-scaled network family described earlier. Each com-
bination of algorithm, network, and link event model (Standard and
Flapping) was simulated 5 times and averaged in reporting results.
Figure 5 shows algorithm communication as a function of network
size for the ORB family of networks. Except for dv, results on syn-
thetic networks was similar; dv performance was highly variable
from one family to another.
As the network size increases, xl maintains its good relative per-
formance. As with other algorithms, however, the routing com-
munication load still grows linearly with the size of the network.
This is because a link failure still triggers partial ﬂooding to nodes
whose shortest-path tree included the failed link, and roughly half
of all simulation events are link failures. In a connected network,
a node’s shortest-path tree contains n − 1 nodes, so the probability
of a node being affected by a link failure is (n − 1)/m, and thus
the expected number of nodes affected by a random link failure is
about n2/m. This means that in a network such as the Internet
where m/n is small, a random link failure will be propagated to a
constant fraction of the nodes.
7. OSPF WITH XL
This section is motivated by the observation that the XL rout-
ing algorithm and the standard link-state algorithm are inherently
compatible. This is because ﬂooding satisﬁes Conditions S1, S2,
and C1, so it is possible to mix instances of XL and the standard
link-state algorithm.
In this section, we sketch how the routing
algorithm used with the OSPF Version 2 protocol [24] can be mod-
iﬁed to take advantage XL’s update suppression mechanism, while
still remaining compatible with the original OSPF. In other words,
routers running the modiﬁed algorithm, which we call OSPF/XL,
can inter-operate in a mixed-deployment scenario with those run-
ning the standard OSPF algorithm. We emphasize, however, that
we have not implemented these modiﬁcations and that all our eval-
uations are based on simulation at this point. We leave implement-
ing OSPF/XL to future work, although we do not believe it should
be too challenging.
Recall that in the XL algorithm the state of the network consists
of the internal and external views. The internal view already ex-
ists in OSPF as the link-state table. External views, however, have
no OSPF analog. To save memory, we suggest that external views
should not be materialized, rather, they can be represented as differ-
ences from the internal view. Since a node’s internal and external
views will typically contain a lot of the same information, we de
no expect the additional memory required for external views to be
signiﬁcant.
The second modiﬁcation to OSPF is in the way updates are pro-
cessed. Upon receiving an update, a node records it in the external
view of its incoming interface. If the update has newer informa-
tion than in the internal view, the internal view is updated as well.
Next, the main shortest-path tree is re-computed from the internal
view. Algorithm 1 is then used to update other external views and
determine to which interfaces the update should be propagated. Pe-
riodically, not necessarily after each update, the main shortest-path
tree is used to update the forwarding table.
Finally, the proxy minimum distance Du(w) used in Algorithm 1
will need to be approximated. The easiest way to do this is for each
node to simply keep a record of the smallest distance to each desti-
nation observed during some period of time, say 1 day, and use this
value instead. We believe that such an approximation is adequate
in all but the worst pathological cases.
Overall, OSPF/XL requires only modest changes to the stan-
dard OSPF in order to take advantage of our update suppression
mechanism. Moreover, the beneﬁts of XL can be realized even in
a mixed environment where only some of the routers implement
OSPF/XL—incentivizing incremental deployment.
8. CONCLUSION
We have presented the XL routing algorithm, a new link-state
routing algorithm speciﬁcally designed to minimize network com-
munication. XL works by propagating only some of the link-state
updates it receives, thereby reducing the frequency of routing up-
dates in the network. We also formally proved the correctness of
XL and validated our performance claims in simulation. In partic-
ular, our simulation showed that with a small penalty in stretch, our
algorithm dramatically reduced the number of updates needing to
be communicated and processed.
However, in allowing the routing algorithm to choose slightly
sub-optimal routes, the network operator also cedes some degree
of control. In particular, trafﬁc engineering via link costs is harder
since current trafﬁc forwarding will be determined, in part, by past
link costs. Fortunately, it is easy to augment our algorithm to
“ﬂush” all suppressed updates periodically, causing it to propagate
and use exact routing information. In fact, the approximation pa-
rameter  can be adjusted dynamically in response to load. By set-
ting  = 0 locally under normal conditions and and  = 0.5 under
load or in the presence of ﬂapping, the network can achieve the best
of both worlds: deterministic routing in normal circumstances, ap-
proximate routing under heavy load.
Finally, we also believe that there may be signiﬁcant opportu-
nities to improve the efﬁciency of link state routing even further.
In particular, recall that the XL routing algorithm propagates all
link cost increase updates, meaning that, on average, it will prop-
agate half of all updates that affect it. It is natural to ask whether
this is strictly necessary, or whether a superior algorithm—one that
selectively suppresses link failures—can scale sub-linearly for typ-
ical networks. Whether such an algorithm exists and can guarantee
soundness and correctness remains an open problem that we hope
to address in future work.
9. ACKNOWLEDGEMENTS
This research was supported in part by National Science Founda-
tion grants NSF-0433668 (CCIED) and EIA-0303622 (FWGrid).
10. REFERENCES
[1] Abilene interior-routing metrics.
http://noc.net.internet2.edu, March 2006.
[2] D. Andersen, H. Balakrishnan, F. Kaashoek, and R. Morris.
Resilient overlay networks. In Proceedings of the 18th
Symposium on Operating Systems Principles, pages
131–145, 2001.
[3] J. Behrens and J. J. Garcia-Lunes-Aceves. Distributed,
scalable routing based on link-state vectors. In Proceedings
of the ACM SIGCOMM Conference, pages 136–147, 1994.
[4] C. Cheng, R. Riley, S. P. R. Kumar, and J. J.
Garcia-Lunes-Aceves. A loop-free extended Bellman-Ford
routing protocol without bouncing effect. ACM SIGCOMM
Computer Communication Review, 19(4):224–236,
September 1989.
[5] Cisco Systems. Introduction to EIGRP. Document ID 13669.
[6] Cisco Systems. OSPF Design Guide. Document ID 7039.
[7] T. H. Clausen and P. Jacquet. RFC 3626: Optimized Link
State Routing protocol (OLSR), October 2003.
[8] V. Fayet, D. A. Khotimsky, and T. Przygienda. Hop-by-hop
routing with node-dependent topology information. In
Proceedings of The Eighteenth INFOCOM Conference,
pages 79–87, 1999.
[9] D. Fedyk and P. Bottorff. Provider link state bridging
(PLSB). IEEE Draft, 2007.
[10] J. J. Garcia-Lunes-Aceves. Loop-free routing using diffusing
computations. Transactions on Networking, 1(1):130–141,
Feb 1993.
[11] F. E. Heart, A. McKenzie, J. M. McQuillan, and D. C.
Walden. ARPANET completion report. Technical Report
4799, Bolt, Baranek and Newman, 1978.
[12] P. A. Humblet. Another adaptive distributed shortest path
algorithm. IEEE Transactions on Communications,
39(6):995–1003, June 1991.
[13] G. Iannaccone, C. Chuah, R. Mortier, S. Bhattacharyya, and
C. Diot. Analysis of link failures in an IP backbone. In
Proceedings of the Second Internet Measurement Workshop,
pages 237–242, 2002.
[14] IEEE 802.11s draft standard, 2007.
[15] K. Ishiguro, V. Manral, A. Davey, and A. Lindem. Trafﬁc
engineering extensions to OSPF version 3. IETF Draft, 2007.
[16] A. Iwata, C.-C. Chiang, G. Pei, M. Gerla, and T.-W. Chen.
Scalable routing strategies for ad hoc wireless networks.
IEEE Journal on Selected Areas in Communication,
17(8):1369–1379, August 1999.
[17] J. M. Jaffe and F. H. Moss. A responsive distributed routing
algorithm for computer networks. IEEE Transactions on
Communications, COM-30(7):1758–1762, July 1982.
[18] P. Mahadevan, C. Hubble, D. Krioukov, B. Huffaker, and
A. Vahdat. Orbis: Rescaling degree correlations to generate
annotated Internet topologies. In Proc. of the 2007 ACM
SIGCOMM Conference, pages 325–336, 2007.
[19] R. Mahajan, N. Spring, D. Wetherall, and T. Anderston.
Inferring link weights using end-to-end measurements. In
Proceedings of 2nd Internet Measurement Workshop, pages
231–236, 2002.
[20] G. Malkin. RFC 2453: RIP version 2, 1998.
[21] J. M. McQuillan, G. Falk, and I. Richer. A review of the
development and performance of the ARPANET routing
algorithm. IEEE Transactions on Communications,
COM-26(12):1802–1811, Dec 1978.
[22] J. M. McQuillan, I. Richer, and E. C. Rosen. The new
routing algorithm for the ARPANET. IEEE Transactions on
Communications, 28(5):711–719, May 1980.
[23] P. M. Merlin and A. Segall. A failsafe distributed routing
protocol. IEEE Transactions on Communications,
COM-27(9):1280–1287, September 1979.
[24] J. Moy. RFC 2328: OSPF version 2, 1998.
[25] Y. Ohara, M. Bhatia, N. Osamu, and J. Murai. Route
Flapping Effects on OSPF. In Proceedings of the 2003
Symposium on Applications and the Internet Workshops,
2003.
[26] V. D. Park and M. S. Corson. A performance comparison of
the temporally-ordered routing algorithm and ideal link-state
routing. In Proceedings of the 3rd IEEE Symposium on
Computers and Communications, pages 592–598, 1998.
[27] P. Pillay-Esnault. OSPF Refresh and Flooding Reduction in
Stable Topologies. RFC 4136, 2005.
[28] B. Rajagopalan and M. Faiman. A new responsive
distributed shortest-path routing algorithm. In Proceedings of
the ACM SIGCOMM Conference, pages 237–246, 1989.
[29] S. B. Seidman. Network structure and minimum degree.
Social Networks, 5(3):269–287, September 1983.
[30] A. Shaikh, C. Isett, A. Greenberg, M. Roughan, and
J. Gottlieb. A case study of OSPF behavior in a large
enterprise network. In Proceedings of the 2nd Workshop on
Internet Measurement, pages 217–230, 2002.
[31] M. Thorup. OSPF Areas Considered Harmful. Private paper,
Apr 2003.
[32] A. Zinin and M. Shand. Flooding Optimizations in
Link-state Routing Protocols. IETF Draft, 2000.
APPENDIX
The appendix consists of proofs omitted in the body of the paper.
Lemma 2. After executing Algorithm 1 the external view Tuv sat-
isﬁes the View Invariant V1 and Constraints S1, S2, and C1.
Proof. By inspection, for every edge (x, y), Tuv(x, y) is assigned
either Tuv(x, y) or T ∗
uv(x, y). Therefore, the view invariant holds
by Lemma 1.
Now consider the loop in lines 1 through 9; we claim that after it
is executed, Tuv satisﬁes Constraints S1 and S2. It is easy to verify
that lines 3–5 ensure S1 holds. Also, if fu(w) = v for some w and
(x, y) is an edge in πu(u, w), then fu(y) = v also. This implies
the assignment on line 7 was executed and euv(x, y) = eu(x, y)
as required.
In lines 10 through 14 the algorithm updates edges to satisfy
Constraint C1. We claim that the resulting external view indeed
satisﬁes Constraint C1. First, note that after lines 1 through 9, the
distance duv(w) cannot increase, because euv(x, y) ≥ eu(x, y)
per Constraint S1. Now consider, toward a contradiction, a node w
such that duv(w) > (1 + u(w))Du(w) and duv(w) (cid:6)= du(w).
The latter implies that there must be an edge (x, y) in πu(u, w)
where eu(x, y)  Δ. If φt(u, w) is a non-empty path that
is both quiet during time interval [t − Δ, t] and coherent at time t,
then φt(u, w) is a ﬁnite path from u to w and
(cid:4)φt(u, w)(cid:4)t ≤ dt
u(w).
Proof. Consider the state of the network at the ﬁxed time t. For
notational simplicity, we will omit the temporal superscript t. To
prove the lemma, we ﬁrst show that φ(u, w) is ﬁnite, and then show
that its last element is w. We then use this fact to prove the bound.
We start with two observations.
Observation 1 At time t the path φ(u, w) has been quiet for dura-
tion at least Δ, so the update algorithm has been executed at least
once by each node along the path φ(u, w) during the quiet interval
[t − Δ, t]. By Equation 7, ex(x, y) = e(x, y) for each edge (x, y)
in φ(u, w).
Observation 2 The distance estimate du(w) must be ﬁnite; other-
wise fu(w) = NONE, implying φ(u, w) is the empty path.
To show that φ(u, w) is ﬁnite, it is sufﬁcient to show that the
estimated distance dz(w) decreases by an edge cost at each node
along the path φ(u, w). Without loss of generality, consider the
ﬁrst edge (u, fu(w)). Let v = fu(w) and let πu(u, w) = uvα,
where α is some sub-path. Then:
du(w) = eu(u, v) + (cid:4)vα(cid:4)u
= e(u, v) + (cid:4)vα(cid:4)u
= e(u, v) + (cid:4)vα(cid:4)uv
= e(u, v) + (cid:4)vα(cid:4)vu
≥ e(u, v) + (cid:4)vα(cid:4)v
≥ e(u, v) + (cid:4)πv(v, w)(cid:4)v
= e(u, v) + dv(w).
Thus φ(u, w) is ﬁnite. Now let w(cid:2)
be the last node in φ(u, w). We
claim that dw(cid:2) (w) = 0 and therefore w(cid:2) = w. By Observation 2,
dw(cid:2) (w) ≤ du(w)  Δ. Let β be a path from u to w. If β is
(i) quiet during [t − Δ, t], and (ii) coherent at time t, then
u(w) ≤ (1 + )(cid:4)β(cid:4)t,
dt
where  = maxx∈β x(w).
Proof. As in the proof of Lemma 3, consider the state of the net-
work at the ﬁxed time t. For notational simplicity, we will omit the
temporal superscript t. Also as in that proof, we claim ex(x, y) =
e(x, y) for each edge (x, y) in β.
The proof of this lemma is by induction on the length of β. If β
is the empty path, then u = w and we’re done. Now let β = uvα
for some path alpha, and assume dv(w) ≤ (1 + )(cid:4)vα(cid:4). Then,
using Coherence in step ((cid:12)):
du(w) ≤ eu(u, v) + (cid:4)πu(v, w)(cid:4)u
= e(u, v) + (cid:4)πu(v, w)(cid:4)u
≤ e(u, v) + (cid:4)πu(v, w)(cid:4)uv
≤ e(u, v) + (cid:4)πuv(v, w)(cid:4)uv
= e(u, v) + (cid:4)πvu(v, w)(cid:4)vu
= e(u, v) + dvu(w)
≤ e(u, v) + max
≤ e(u, v) + max
≤ e(u, v) + max
≤ e(u, v) + max
≤ e(u, v) + (1 + )(cid:4)vα(cid:4)
≤ (1 + )(cid:4)β(cid:4).
((cid:12))
¯
˘
˘
(1 + v(w))Dv(w), dv(w)
¯
˘
(1 + )Dv(w), dv(w)
˘
(1 + )(cid:4)vα(cid:4), (1 + )(cid:4)vα(cid:4)¯
(1 + )(cid:4)vα(cid:4), dv(w)
¯
Lemma 5. If a network becomes quiet at some time t, then after a
ﬁnite period of time it also becomes coherent.
Proof. Divide the time line after t into epochs of duration Δ. We
claim that if none of the views change during an epoch, then they
will not change in subsequent epochs and the network is coherent.
This is because the Update algorithm is a deterministic function of
the views and edge weights, with the property that if the internal
view and edge weights do not change, then the current time input
is ignored (by Equation 7). Furthermore, from by Equations 6, 7,
and 8 it follows that if the external views don’t change, then they
must be coherent.
Since an edge datum is only injected into the network in Phase I
when an edge cost changes, no new edge data are injected after time
t. Each view update consists of some number of edge datum values
being updated to more recent values from another view. Since there
is a ﬁxed number of internal and external views in the network, each
view can only be updated ﬁnitely many times. It follows that the
network can only change a ﬁnite number of times after time t. But
since the network must change each epoch as shown above, it will
stop changing and become coherent in a ﬁnite period of time.