title:XiOS: Extended Application Sandboxing on iOS
author:Mihai Bucicoiu and
Lucas Davi and
Razvan Deaconescu and
Ahmad-Reza Sadeghi
XiOS: Extended Application Sandboxing on iOS
Mihai Bucicoiu1, Lucas Davi2, Razvan Deaconescu1, Ahmad-Reza Sadeghi2
1University "POLITEHNICA" of Bucharest, Romania
{mihai.bucicoiu,razvan.deaconescu}@cs.pub.ro
2Intel Collaborative Research Institute for Secure Computing at Technische Universität Darmstadt, Germany
{lucas.davi,ahmad.sadeghi}@trust.cased.de
ABSTRACT
Until very recently it was widely believed that iOS malware
is eﬀectively blocked by Apple’s vetting process and appli-
cation sandboxing. However, the newly presented severe
malicious app attacks (e.g., Jekyll) succeeded to undermine
these protection measures and steal private data, post Twit-
ter messages, send SMS, and make phone calls. Currently,
no eﬀective defenses against these attacks are known for iOS.
The main goal of this paper is to systematically analyze
the recent attacks against iOS sandboxing and provide a
practical security framework for iOS app hardening which
is fully independent of the Apple’s vetting process and par-
ticularly beneﬁts enterprises to protect employees’ iOS de-
vices. The contribution of this paper is twofold: First, we
show a new and generalized attack that signiﬁcantly reduces
the complexity of the recent attacks against iOS sandbox-
ing. Second, we present the design and implementation of
a novel and eﬃcient iOS app hardening service, XiOS, that
enables ﬁne-grained application sandboxing, and mitigates
the existing as well as our new attacks. In contrast to pre-
vious work in this domain (on iOS security), our approach
does not require to jailbreak the device. We demonstrate
the eﬃciency and eﬀectiveness of XiOS by conducting sev-
eral benchmarks as well as ﬁne-grained policy enforcement
on real-world iOS applications.
Categories and Subject Descriptors
D.4.6 [Software]: Operating Systems—Security and Pro-
tection
Keywords
binary instrumentation; sandboxing; mobile security; iOS
1.
INTRODUCTION
iOS is after Android the most popular mobile operating
system worldwide. It is deployed on well-known Apple de-
vices such as iPhone, iPad, or iPod Touch, used by millions
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ASIA CCS ’15, April 14 - 17, 2015, Singapore, Singapore
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714629.
of users everyday. Apple maintains an app store, ﬁrst in-
troduced in July 2008, that hosts in Sep. 2014 more than
1, 300, 000 applications (apps) [28].
On the other hand, the popularity, the high number of fea-
tures and apps, as well as the large amount of sensitive and
private information that are available on iOS devices make
them attractive targets for attackers. To address the secu-
rity and privacy concerns, iOS enforces two main security
principles: code signing and application sandboxing. The
former ensures that only Apple-approved software can be
executed on an iOS device while the latter technique guaran-
tees that an app only performs operations within the bound-
aries of a pre-deﬁned sandbox, and can neither disrupt nor
access other applications.
In particular, iOS distinguishes
between public and private frameworks in its sandboxing
model. Public frameworks comprise shared system libraries
and APIs that can be accessed by every third-party app. For
instance the AddressBook framework is a well-known avail-
able public framework that a developer is allowed to use
in an iOS application [6]. In contrast, private frameworks
and APIs should only be accessed by system applications.
Prominent examples for private APIs are sending SMS mes-
sages or setting up a call.
As another line of defense, Apple also conducts applica-
tion review/vetting for all apps that are to be published on
the App Store, and rejects any application that attempts
to invoke a private API. The folklore belief is that the vet-
ting process is suﬃcient to eﬀectively block malware from
entering the App Store [17, 32].
However, recent research results shed new light on the se-
curity of iOS by demonstrating how to bypass the vetting
process and iOS application sandboxing [19, 35]. The main
idea of these attacks is to dynamically load private frame-
works and invoke private APIs to induce malicious behavior
without the user’s consent. The attacks range from send-
ing SMSs or emails to attacker speciﬁed addresses, posting
Twitter tweets, abusing camera and audio, setting up phone
calls, and stealing the device ID. Some of these attacks use
return-oriented programming [30] to hide and obfuscate the
malicious functionality [35]. Such techniques impede the
detection of malicious code and manifest the limits of any
oﬀ-line application vetting approach.
Preventing these attacks is highly challenging due to the
current system design of iOS. Prohibiting applications to
load private frameworks is not a solution since public frame-
works are not self-contained and need to interact with pri-
vate frameworks to complete their tasks. Moreover, some
public frameworks also contain private (hidden) API func-
tions, e.g., sending a Twitter message in background is a
private API call inside a public framework [19].
Moreover, the recently proposed security enhancements
for iOS (see Section 7) suﬀer from various deﬁciencies: these
are either static and cannot detect attacks that trigger ma-
licious behavior (only) at runtime [16], or require a jailbreak
and induce performance overhead [15, 37].
Our goal in this paper is to provide a framework for app
hardening that enables ﬁne-grained app sandboxing on iOS
and tackles the shortcomings of existing solutions, i.e., de-
feating the recent attacks against iOS sandboxing [19, 35].
In particular, we make the following contributions:
New malicious app attacks. We investigate previous at-
tacks against iOS application sandboxing and signiﬁcantly
reduce their complexity. We show a new attack that requires
no speciﬁc use of a public framework to access a private
API, but rather exploits the default memory layout used in
all iOS applications to invoke any private API of the ad-
versary’s choice. This allows us to construct general attack
vectors on iOS application sandboxing.
Defense tool. We present the design and implementation
of a novel mitigation service and tool, termed XiOS, for
ﬁne-grained application sandboxing on iOS tackling these
attacks at API and function-level. In contrast to previous
work in this domain [15, 37], our solution performs eﬃciently
without requiring a jailbreak of the underlying device. We
developed a new static binary rewriter for iOS that implants
a reference monitor into the application’s code, and protects,
under reasonable assumptions, the reference monitor from
the (potentially malicious) application without requiring the
source code of the application. Our defense mechanism in-
struments all API calls and provides the following features:
(i) API address hiding, and (ii) optional policy checks based
on user, developer or administrators (e.g., enterprises) de-
ﬁned policies for public API calls.
Evaluation. We show the eﬀectiveness and eﬃciency of
our approach by applying it to several existing real-world
iOS applications including Gensystek, WhatsApp, System
Monitor, Music Notes and Frotz. Our evaluation shows that
no overhead is added in terms of user-experience when XiOS
is used to protect the application. We also show ﬁne-grained
policy enforcement for WhatsApp, allowing ﬁltering of con-
tacts information (see Section 6.4).
Advantages of our solution. Our defense technique does
neither require a jailbreak nor the application’s source code.
Since our defense is implemented as a static binary rewriter,
it can be applied just before an application is submitted
to the App Store. On the one hand, it provides a useful
tool for benign developers to harden their app from being
compromised by a remote exploit that invokes private APIs.
On the other hand, it can also be used by Apple to improve
the vetting process by hardening potentially malicious apps
with XiOS. In other words, XiOS (1) constrains malicious
apps in their actions, and (2) hardens benign apps.
Compliance and independency. Our solution adheres to
the existing design of private and public frameworks in iOS.
It allows for ﬂexible policy enforcement giving developers
the possibility to deﬁne ﬁne-grained access control policies
for each app according to their own requirements. Finally,
our solution is not dependent on application vetting, and
can be deployed by enterprises to protect employees’ devices,
and still allowing the employees to use popular apps such as
WhatsApp (see Section 4.5, and 6.3).
2. BACKGROUND
In this section, we recall the iOS security architecture and
elaborate on related attacks against app sandboxing.
2.1
iOS Security
The main security mechanisms used on iOS are (1) code
signing, (2) application vetting, (3) ﬁle system and data
encryption, (4) memory randomization (ASLR) along with
non-executable memory, and (5) application sandboxing.
Code signing ensures that only Apple-signed software can
be executed on an iOS device. To bypass this restriction,
users can jailbreak (root) their devices which allow them
to arbitrarily install non-approved Apple software. Apple
approves signed applications after a vetting process. Al-
though the implementation details of application vetting are
not public, Apple states that it reviews all apps to ensure
they are reliable, perform as expected, and are free of oﬀen-
sive material [4]. Apple also deploys an AES-256 hardware
crypto engine to encrypt the ﬁle system of an iOS device.
Address space layout randomization (ASLR) randomizes
the start addresses of data and code segments. This makes
runtime attacks like return-oriented programming that rely
on ﬁxed code addresses more cumbersome. Typically, ASLR
is combined with the non-executable memory security model,
which enforces that a memory page cannot be writable and
executable at the same time [25]. This technique prevents
runtime attacks that attempt to inject malicious code into
an application’s address space and execute it. iOS goes even
one step further, and enforces code signing on memory pages
at runtime: it prohibits any third-party app from dynami-
cally generating code or changing existing (mapped) code.
An abstract view of the security architecture to realize
application sandboxing on iOS is shown in Figure 1. iOS de-
ploys sandboxing to isolate applications from each other, and
to control access of applications to the operating system. In
particular, we distinguish components on three software lay-
ers: (1) the kernel layer which provides basic system services
(ﬁle system and network) and a kernel module to realize ap-
plication sandboxing, (2) the Objective-C framework layer
and a privacy setting service, and (3) the application layer
where third-party and built-in apps are executing.
The main component to enforce application sandboxing
resides in the iOS kernel, namely a TrustedBSD mandatory
access control (MAC) module. This kernel module enforces
sandboxing at the level of system calls and directory paths.
Further, sandboxing is driven by sandboxing proﬁles which
are pre-deﬁned by Apple. The proﬁles consist of access con-
trol lists (ACLs) that either deny or grant access to certain
system calls and ﬁle paths.
Apple deﬁnes a single sandboxing proﬁle for third-party
apps. Hence, all apps execute with the same privilege level.
In particular, this proﬁle prohibits App A to access code or
data from other applications like App B (see Figure 1).
Apart from the TrustedBSD kernel module, there are sev-
eral restrictions imposed by Apple indirectly related to ap-
plication sandboxing. As mentioned before Apple distin-
guishes between public and private frameworks1. Private
frameworks are reserved for iOS built-in and system appli-
cations. Although third-party applications are only allowed
to access public APIs of a public framework, there is no fun-
1The list of all available frameworks can be downloaded
from http://theiphonewiki.com/wiki/System/Library/
Frameworks
Figure 1: Basic iOS architecture to enforce applica-
tion sandboxing
damental operating system mechanism that prevents the use
of private APIs. Instead, Apple relies on the application vet-
ting process to discover such unauthorized access requests.
Finally, since iOS version 6, iOS allows users to specify
privacy settings on a per-app basis. Typically, iOS apps
have by default access to private information such as con-
tacts, device IDs, keyboard cache, or location. In order to
restrict the access to this information, iOS users can arbi-
trarily conﬁgure privacy settings. In fact, this allows users
to specify restrictions on some selected privacy-related pub-
lic APIs. However, there is no general for all non-privacy
related public APIs as well as private APIs.
2.2 Related Attacks on iOS Sandboxing
Recent attacks deploy a malicious third-party application
that dynamically loads private frameworks and invokes pri-
vate APIs without being detected by Apple’s vetting pro-
cess [35, 19]. In order to understand these attacks, we need
to take a deeper look at how legitimate calls to private APIs
in system apps are handled.
Typically, a call to a private API is internally handled
as an external function call to a shared library. For this, a
program requires that the library encapsulating that func-
tion is loaded into the application’s address space. In ad-
dition, the runtime address of the desired function needs to
be populated. In practice, this is achieved by dynamic load-
ing [24]. In iOS, dynamic loading is provided by a dedicated
library called libdl.dylib. We refer to this library as the
dynamic loader. Speciﬁcally, the dynamic loader provides
two fundamental methods: (1) load-library via the function
dlopen, and (2) load-address using the dlsym function that
determines the runtime address of a function residing in a li-
brary that has been already loaded. If an executable module
(i.e., an application or a shared library) attempts to invoke
a private API, then the linker will add the corresponding
placeholders into the data section of the executable module.
These placeholders will be automatically initialized with the
correct addresses of load-library and load-address at load-
time. Once the executable module starts executing, it can