# Title: XiOS: Extended Application Sandboxing on iOS

## Authors:
- Mihai Bucicoiu<sup>1</sup>
- Lucas Davi<sup>2</sup>
- Razvan Deaconescu<sup>1</sup>
- Ahmad-Reza Sadeghi<sup>2</sup>

<sup>1</sup> University "POLITEHNICA" of Bucharest, Romania  
{mihai.bucicoiu, razvan.deaconescu}@cs.pub.ro  

<sup>2</sup> Intel Collaborative Research Institute for Secure Computing at Technische Universität Darmstadt, Germany  
{lucas.davi, ahmad.sadeghi}@trust.cased.de

## Abstract
Until recently, it was widely believed that iOS malware was effectively blocked by Apple's vetting process and application sandboxing. However, recent severe malicious app attacks (e.g., Jekyll) have succeeded in undermining these protection measures, enabling them to steal private data, post Twitter messages, send SMS, and make phone calls. Currently, no effective defenses against these attacks are known for iOS.

The main goal of this paper is to systematically analyze recent attacks against iOS sandboxing and provide a practical security framework for iOS app hardening, independent of Apple's vetting process. This framework particularly benefits enterprises in protecting employees' iOS devices. Our contributions are twofold: First, we present a new and generalized attack that significantly reduces the complexity of recent attacks against iOS sandboxing. Second, we introduce the design and implementation of a novel and efficient iOS app hardening service, XiOS, which enables fine-grained application sandboxing and mitigates both existing and new attacks. Unlike previous work, our approach does not require jailbreaking the device. We demonstrate the efficiency and effectiveness of XiOS through several benchmarks and fine-grained policy enforcement on real-world iOS applications.

## Categories and Subject Descriptors
D.4.6 [Software]: Operating Systems—Security and Protection

## Keywords
binary instrumentation, sandboxing, mobile security, iOS

## 1. Introduction
iOS, second only to Android, is one of the most popular mobile operating systems worldwide, deployed on well-known Apple devices such as iPhones, iPads, and iPod Touches, used by millions of users daily. Apple maintains an app store, first introduced in July 2008, which hosted over 1,300,000 applications as of September 2014 [28].

However, the popularity, numerous features, and large amount of sensitive information available on iOS devices make them attractive targets for attackers. To address security and privacy concerns, iOS enforces two main security principles: code signing and application sandboxing. Code signing ensures that only Apple-approved software can be executed on an iOS device, while application sandboxing restricts an app's operations within predefined boundaries, preventing it from disrupting or accessing other applications.

iOS distinguishes between public and private frameworks in its sandboxing model. Public frameworks, such as the AddressBook framework, are accessible to all third-party apps, while private frameworks and APIs, such as those for sending SMS messages or making phone calls, are reserved for system applications. Apple also conducts a thorough application review/vetting process for all apps published on the App Store, rejecting any that attempt to invoke private APIs. It was commonly believed that this vetting process was sufficient to block malware [17, 32].

Recent research, however, has demonstrated how to bypass the vetting process and iOS application sandboxing [19, 35]. These attacks involve dynamically loading private frameworks and invoking private APIs to induce malicious behavior without user consent, including sending SMSs, posting Twitter messages, abusing camera and audio, setting up phone calls, and stealing device IDs. Some attacks use return-oriented programming [30] to hide and obfuscate malicious functionality, making detection challenging [35].

Preventing these attacks is difficult due to the current iOS system design. Prohibiting applications from loading private frameworks is not feasible because public frameworks are not self-contained and need to interact with private frameworks. Additionally, some public frameworks contain hidden private API functions, such as sending a Twitter message in the background [19].

Recently proposed security enhancements for iOS [16, 15, 37] suffer from various deficiencies: they are either static and cannot detect runtime attacks, or they require jailbreaking and induce performance overhead.

In this paper, we aim to provide a framework for app hardening that enables fine-grained app sandboxing on iOS and addresses the shortcomings of existing solutions. Specifically, we make the following contributions:

- **New Malicious App Attacks:** We investigate previous attacks against iOS application sandboxing and significantly reduce their complexity. We present a new attack that exploits the default memory layout used in all iOS applications to invoke any private API, without requiring specific use of a public framework.
- **Defense Tool:** We introduce the design and implementation of a novel mitigation service and tool, XiOS, for fine-grained application sandboxing on iOS. Unlike previous work [15, 37], our solution performs efficiently without requiring a jailbreak. We developed a new static binary rewriter for iOS that implants a reference monitor into the application's code, protecting the reference monitor from potentially malicious applications without needing the source code. Our defense mechanism instruments all API calls and provides features such as API address hiding and optional policy checks based on user, developer, or administrator-defined policies.
- **Evaluation:** We demonstrate the effectiveness and efficiency of our approach by applying it to several real-world iOS applications, including Gensystek, WhatsApp, System Monitor, Music Notes, and Frotz. Our evaluation shows that XiOS adds no overhead in terms of user experience and enables fine-grained policy enforcement for WhatsApp, allowing filtering of contact information.
- **Advantages of Our Solution:** Our defense technique does not require a jailbreak or the application's source code. As a static binary rewriter, it can be applied just before an application is submitted to the App Store, providing a useful tool for developers to harden their apps and for Apple to improve the vetting process by hardening potentially malicious apps.
- **Compliance and Independence:** Our solution adheres to the existing design of private and public frameworks in iOS, allowing for flexible policy enforcement. Developers can define fine-grained access control policies for each app according to their requirements. Our solution is independent of the application vetting process and can be deployed by enterprises to protect employees' devices while still allowing the use of popular apps like WhatsApp.

## 2. Background
### 2.1 iOS Security
The main security mechanisms in iOS include code signing, application vetting, file system and data encryption, memory randomization (ASLR) with non-executable memory, and application sandboxing. Code signing ensures that only Apple-signed software can be executed on an iOS device. Users can jailbreak their devices to install non-approved software, but this is discouraged. Apple reviews all apps to ensure they are reliable, perform as expected, and are free of offensive material [4]. The iOS file system is encrypted using an AES-256 hardware crypto engine.

Address Space Layout Randomization (ASLR) randomizes the start addresses of data and code segments, making runtime attacks more difficult. ASLR is combined with the non-executable memory model, which prevents injection and execution of malicious code. iOS also enforces code signing on memory pages at runtime, prohibiting third-party apps from dynamically generating or modifying code.

Figure 1 shows the abstract view of the iOS security architecture for application sandboxing. iOS uses sandboxing to isolate applications and control their access to the operating system. The TrustedBSD mandatory access control (MAC) module in the kernel enforces sandboxing at the level of system calls and directory paths, driven by pre-defined sandboxing profiles. Third-party apps execute with the same privilege level, and the profile prohibits one app from accessing another app's code or data.

Apple distinguishes between public and private frameworks. Private frameworks are reserved for system applications, and although third-party apps are only allowed to access public APIs, there is no fundamental mechanism to prevent the use of private APIs. Apple relies on the vetting process to detect unauthorized access requests.

Since iOS version 6, users can specify privacy settings on a per-app basis, restricting access to private information such as contacts, device IDs, keyboard cache, and location. However, there are no general restrictions for non-privacy-related public APIs and private APIs.

### 2.2 Related Attacks on iOS Sandboxing
Recent attacks involve a malicious third-party application that dynamically loads private frameworks and invokes private APIs without being detected by Apple's vetting process [35, 19]. To understand these attacks, we need to examine how legitimate calls to private APIs in system apps are handled.

A call to a private API is typically handled as an external function call to a shared library. The program requires the library to be loaded into the application's address space, and the runtime address of the desired function needs to be populated. In iOS, dynamic loading is provided by the libdl.dylib library, which offers two fundamental methods: dlopen for loading the library and dlsym for determining the runtime address of a function. If an executable module attempts to invoke a private API, the linker adds placeholders into the data section of the module, which are initialized with the correct addresses at load-time. Once the module starts executing, it can invoke the private API.