### Spatial Stream to the Client

We leave the design and experimentation of a multiple spatial stream roadside Access Point (AP) for future work.

### Wi-Fi Goes to Town: Rapid Picocell Switching for Wireless Transit Networks
**SIGCOMM ’17, August 21-25, 2017, Los Angeles, CA, USA**

#### Linux Wireless System of AP1

**User Space**
- **hostapd**
  - `sta_info`
  - `generate hostapd_sta_add_params`
  - `pass to TCP`

**Kernel Space**
- **nl80211**
- **mac80211**
- **Linux wireless stack**
- **802.11 driver**
- **802.3 driver**

**AP2, AP3, AP4, ...**
- **hostapd**
  - `sta_info`
- **Kernel**

**Figure 12: WGTT Client Association**
Each AP shares client association state with the others over the Ethernet backhaul.

A new `hostapd_sta_add_params` structure is created and passed to the kernel-level `mac80211` and the driver. We add code to extract the client information within the `hostapd_sta_add_params` structure of AP1, open a TCP connection to all other APs in the network, and transmit the client information `sta_info` to those APs. On the receiving end, the AP listens for this TCP connection. When the connection is established, the information in the received packet is transferred back into a `hostapd_sta_add_params` structure and passed into `mac80211` and the driver on the receiving AP. Figure 12 illustrates this process.

### 5. Evaluation

In this section, we first conduct field studies to evaluate the end-to-end performance of WGTT and compare it with a performance-tuned version of the 802.11r fast roaming protocol [22]. We then present micro-benchmark experiments to provide further insight into the factors that impact WGTT’s performance. Finally, we conduct three real-world case studies to demonstrate WGTT’s capability in handling online video streaming, remote video conferencing, and web browsing at driving speeds.

#### 5.1 Methodology

Three Lenovo L512 laptops equipped with Atheros AR9590 wireless cards serve as clients in our experiments. The client transits through eight deployed APs at different driving speeds, ranging from 5 mph to 35 mph. For each experiment, we log packet flows sent to and from both the controller and the client using `tcpdump` for data analysis.

**Comparison Scheme:**
We implement a performance-tuned version of the IEEE 802.11r fast roaming protocol and deploy it on our testbed for comparison. In most 802.11r implementations, the client does not switch to another AP until it collects a number of RSSI readings from the current AP, but this fails in the vehicular picocell regime. Therefore, we enhance a combination of the standard 802.11r and 802.11k [21] protocols and our best understanding of centralized controller WLAN products in the following straightforward manner:
1. Each AP beacons every 100 ms, allowing the client to discover their presence and estimate RSSI.
2. We set an RSSI threshold below which the client switches to another AP with the highest RSSI value once the current AP's RSSI is lower than this threshold, with a time hysteresis of one second.
3. After the first client association, other APs learn the authentication and association information of that client, thus can forward any authentication or association frame from the client in the uplink direction.

We term this scheme "Enhanced 802.11r" and use it as a performance benchmark in the remainder of our evaluation.

#### 5.2 End-to-End Performance

We first evaluate the end-to-end performance of WGTT in delivering bulk TCP and UDP data flows.

**5.2.1 Single-Client Experiments:**
We examine WGTT’s throughput at different client moving speeds and test the TCP and UDP throughput of WGTT and the Enhanced 802.11r fast roaming protocol. As shown in Figure 13, WGTT achieves slightly higher throughput than its counterpart in the static case. As the client moves, WGTT maintains a consistently high throughput at both low (5 mph) and high (35 mph) moving speeds, with an average throughput of 6.6 Mbits/s for TCP and 8.7 Mbits/s for UDP. In contrast, Enhanced 802.11r achieves only 2.7 Mbits/s and 3.3 Mbits/s throughput for TCP and UDP at 5 mph driving speed. At 35 mph, the TCP and UDP throughput of Enhanced 802.11r drops to 0.8 Mbits/s and 1.9 Mbits/s, respectively.

To better understand the sources of WGTT’s throughput gain over Enhanced 802.11r, we plot the TCP throughput against time and a timeseries showing which AP the client is associated with during its movement in Figure 14. As shown, WGTT frequently switches from one AP to another (around five times per second), providing the client with the best link at each period. This fast link switching allows WGTT’s throughput to remain relatively stable (around 5 Mbits/s) throughout the client’s transition over eight APs. In contrast, the TCP throughput of Enhanced 802.11r increases as the client moves to the associated AP and then drops to zero at about 2.5 s in the experiment as the client moves out of the AP’s radio range. This is because Enhanced 802.11r fails to switch promptly as the client approaches the edge of the current AP’s coverage, where the link quality deteriorates significantly. A TCP timeout occurs at around 5.86 s, causing the TCP connection to break thereafter. Similar results are observed with UDP transmission (Figure 15), where WGTT frequently switches between multiple client-AP links to maintain a stable transmission rate. Enhanced 802.11r switches only three times during the entire 10-second transition period, resulting in low and unstable throughput.

**WGTT’s Link Bit Rate:**
Next, we examine the link bit rate of WGTT during the client’s movement. In this experiment, the client transits through eight APs at a constant speed (15 mph) and sends TCP and UDP packets to the AP during its movement. Figure 16 shows the cumulative distribution function (CDF) of the link bit rate measurements. We find that WGTT achieves a 90th percentile bit rate of around 70 Mbits/s, which is 30 Mbits/s higher than Enhanced 802.11r.

**Accuracy of the AP Switching Algorithm:**
We define the switching accuracy of a handover algorithm as the fraction of the time that the algorithm chooses the optimal AP to deliver the packet, where the optimal AP is the one with the maximum ESNR to the client at any instant in time. In this experiment, we send both TCP and UDP packets at the maximum rate to a vehicle moving at 15 mph that transits across eight APs, and test the switching accuracy of WGTT and Enhanced 802.11r. Table 2 shows the results. As shown, WGTT achieves over 90% switching accuracy for both TCP and UDP transmissions. In contrast, Enhanced 802.11r’s switching accuracy is only 20.24% for TCP transmission and 18.72% for UDP transmission. The reason for this result is that the optimal link changes rapidly in the vehicular-picocell regime due to fast fading wireless channels, while Enhanced 802.11r switches only when the current link deteriorates significantly.

**Table 2: Switching Accuracy of WGTT and Enhanced 802.11r for TCP and UDP Flows from a Single Client Moving at 15 mph**

| Protocol | TCP (%) | UDP (%) |
|----------|---------|---------|
| WGTT     | 90.12   | 91.38   |
| Enhanced 802.11r | 20.24 | 18.72 |

Combined with the previous results, this demonstrates that, contrary to many other wireless networking designs, better packet switching decisions, rather than physical-layer bit rate adaptation, are responsible for most of WGTT’s performance gains.

**5.2.2 Multiple-Client Experiments:**
Here, we test the ability of WGTT to improve the performance of multiple clients moving on the road simultaneously. We vary the number of clients from one to three, measuring per-client TCP and UDP throughput of WGTT and the Enhanced 802.11r fast roaming protocol. As shown in Figure 17, WGTT achieves an average per-client 5.3 Mbits/s TCP throughput.