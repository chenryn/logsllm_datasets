      InitializeComponent();
      MyAttachedPropertyProvider.SetMySample(button1, "sample value");
      foreach (var item in LogicalTreeHelper.GetChildren(grid1).
        OfType().Where(
            e => MyAttachedPropertyProvider.GetMySample(e) ! = string.Empty))
      {
        list1.Items.Add(
          $"{item.Name}: {MyAttachedPropertyProvider.GetMySample(item)}");
      }
    }
  注意： 第30章～第35章使用XAML展示了许多不同的附加属性，例如容器控
件Canvas、DockPanel和Grid的附加属性，以及Validation类的ErrorTemplate属性。
29.6 标记扩展
通过标记扩展，可以扩展XAML的元素或特性语法。如果XML特性包含花括号，就
表示这是标记扩展的一个符号。特性的标记扩展常常用作简写记号，而不再使用元素。
这种标记扩展的示例是StaticResourceExtension，它可查找资源。下面是带有
gradientBrush1键的线性渐变笔刷的资源（XAML文件
MarkupExtensionUWP/MainPage.xaml）：
使用StaticResourceExtension，通过特性语法来设置Button的Background属性，就可以
引用这个资源。特性语法通过花括号和没有Extension后缀的扩展类名来定义。
WPF还允许通过简写记号的较长形式使用元素语法，如下面的代码片段所示。
StaticResourceExtension定义为Button.Background元素的一个子元素。通过一个特性把
ResourceKey属性设置为gradientBrush1。在上面的示例中，没有用ResourceKey属性设置资
源键（这也是可行的），但使用一个构造函数重载来设置资源键。
29.6.1 创建自定义标记扩展
UWP应用程序只能使用预定义的标记扩展。在WPF中，可以创建自定义的标记扩
展。要创建标记扩展，可以定义基类MarkupExtension的一个派生类。大多数标记扩展名
都有Extension后缀（这个命名约定类似于特性的Attribute后缀，参见第16章）。有了自定
义标记扩展后，就只需要重写ProvideValue（）方法，它返回扩展的值。返回的类型用
MarkupExtensionReturnType特性注解类。对于ProvideValue（）方法，需要传递一个
IServiceProvider对象。通过这个接口，可以查询不同的服务，如IProvideValueTarget或
IXamlTypeResolver。IProvideValueTarget可以用于访问通过TargetObject和TargetProperty属
性应用标记扩展的控件和属性。IXamlTypeResolver可用于把XAML元素名解析为CLR对
象。自定义标记扩展类CalculatorExtension定义了double类型的属性X和Y，并通过枚举定
义了一个Operation属性。根据Operation属性的值，在X和Y输入属性上执行不同的计算，
并返回一个字符串（代码文件MarkupExtensionWPF/CalculatorExtension.cs）。
    using System;
    using System.Windows;
    using System.Windows.Markup;
    namespace Wrox.ProCSharp.XAML
    {
      public enum Operation
      {
        Add,
        Subtract,
        Multiply,
        Divide
      }
      [MarkupExtensionReturnType(typeof(string))]
      public class CalculatorExtension: MarkupExtension
      {
        public CalculatorExtension()
        {
        }
        public double X { get; set; }
        public double Y { get; set; }
        public Operation Operation { get; set; }
        public override object ProvideValue(IServiceProvider serviceProvider)
        {
        IProvideValueTarget provideValue =
          serviceProvider.GetService(typeof(IProvideValueTarget))
          as IProvideValueTarget;
        if (provideValue ! = null)
        {
          var host = provideValue.TargetObject as FrameworkElement;
          var prop = provideValue.TargetProperty as DependencyProperty;
        }
        double result = 0;
        switch (Operation)
        {
          case Operation.Add:
          result = X + Y;
          break;
          case Operation.Subtract:
          result = X-Y;
          break;
          case Operation.Multiply:
          result = X ＊ Y;
          break;
          case Operation.Divide:
          result = X / Y;
          break;
          default:
          throw new ArgumentException("invalid operation");
        }
        return result.ToString();
        }
      }
    }
标记扩展现在可以在第一个TextBlock上与特性语法一起使用，把值3和4加在一起，
或者在第二个TextBlock上与元素语法一起使用（代码文件
MarkupExtensionWPF/MainWindow.xaml）。
              Multiply
            7
            11
29.6.2 XAML定义的标记扩展
标记扩展提供了许多功能，实际上本章已经使用了XAML定义的标记扩展。x:Array
就定义为标记扩展类ArrayExtension。有了这个标记扩展，就可以不使用特性语法，因为
使用特性语法很难定义元素列表。
用XAML定义的其他标记扩展有TypeExtension（x:Type），它根据字符串输入返回类
型；NullEx-tension（x:Null）可以用于在XAML中把值设置为空；
StaticExtension（x:Static）可调用类的静态成员。
目前为Universal Windows应用程序提供的、用XAML定义的标记扩展，只有用于数据
绑定的编译绑定（x: Bind）时才有更好的性能。这个数据绑定参见第32章。
WPF、WF、WCF和Universal 
Windows应用程序都定义了专用于这些技术的标记扩
展。WPF和Universal 
Windows应用程序使用标记扩展访问资源，以用于数据绑定和颜色
转换。WF联合使用了标记扩展和活动；WCF给端点定义指定了标记扩展。
29.7 小结
本章通过WPF和Universal Windows应用程序的一些示例介绍了XAML的核心功能，以
及专门的特性，如依赖属性、附加属性、路由事件，以及标记扩展。通过这些特性，不仅
介绍了基于XAML技术的基础知识，还讨论了C#和.NET特性（如属性和事件）如何适用
于已扩展的用例。属性增强为支持变更通知和有效性验证（依赖属性），把属性添加到控
件中不会真正影响这类属性（附加属性）。事件增强为具备冒泡和隧道功能。
所有这些特性都是不同XAML技术的基础，如WPF、WF和UWP应用程序。
第30章将讨论XAML，讨论样式和资源。
第30章
样式化XAML应用程序
本章要点
● 为WPF和UWP应用程序指定样式
● 用形状和几何形状创建基础图
● 用转换进行缩放、旋转和扭曲
● 使用笔刷填充背景
● 处理样式、模板和资源
● 创建动画
● Visual State Manager
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● Shapes
● Geometry
● Transformation
● Brushes
● Styles and Resources
● Template
● Animation
● Transitions
● Visual State
30.1 样式设置
近年来，开发人员越来越关心应用程序的外观。当Windows Forms是创建桌面应用程
序的技术时，用户界面没有提供许多设置应用程序样式的选项。控件有标准的外观，根据
正在运行应用程序的操作系统版本而略有不同，但不大容易定义完整自定义的外观。
Windows Presentation Foundation（WPF）改变了这一切。WPF基于DirectX，从而提
供了向量图形，允许方便地调整窗口和控件的大小。控件是完全可定制的，可以有不同的
外观。设置应用程序的样式变得非常重要。应用程序可以有任何外观。有了优秀的设计，
用户可以使用应用程序，而不需要知道如何使用Windows应用程序。相反，用户只需要拥
有特定领域的知识。例如，苏黎世机场创建了一个WPF应用程序，其中的按钮看起来像
飞机。通过按钮，用户可以获取飞机的位置信息（完整的应用程序看起来像机场）。按钮
的颜色可以根据配置有不同的含义：它们可以显示航线或飞机的准时/延迟信息。通过这
种方式，应用程序的用户很容易看到目前在机场的飞机有或长或短的延误。
应用程序拥有不同的外观，这对于Universal Windows Platform （UWP）应用程序更
加重要。在这些应用程序中，以前没有使用过Windows应用程序的用户可以使用这些设
备。对于非常熟悉Windows应用程序的用户，应该考虑通过使用户工作得更方便的典型过
程，帮助这些用户提高效率。
在设置WPF应用程序的样式时，微软公司没有提供很多指导。应用程序的外观主要
取决于设计人员的想象力。对于UWP应用程序，微软公司提供了更多的指导和预定义的
样式，也能够修改任意样式。
本章首先介绍XAML的核心元素shapes，它允许绘制线条、椭圆和路径元素。介绍了
形状的基础之后，就讨论geometry元素。可以使用geometry元素来快速创建基于矢量的图
形。
使用transformation，可以缩放、旋转任何XAML元素。用brush可以创建纯色、渐变
或更高级的背景。本章将论述如何在样式中使用画笔和把样式放在XAML资源中。
最后，使用template模板可以完全自定义控件的外观，本章还要学习如何创建动画。
示例代码可用于UWP应用程序和WPF。当然，如果功能仅仅可用在一种技术中，示
例代码也只能用于其中。
30.2 形状
形状是XAML的核心元素。利用形状，可以绘制矩形、线条、椭圆、路径、多边形和
折线等二维图形，这些图形用派生自抽象类Shape的类表示。图形在
System.Windows.Shapes（WPF）和Windows. UI.Xaml.Shapes （UWP）名称空间中定义。
下面的XAML示例绘制了一个黄色笑脸，它用一个椭圆表示笑脸，两个椭圆表示眼
睛，两个椭圆表示眼睛中的瞳孔，一条路径表示嘴型（代码文件Shapes[WPF|UWP]/
Main[Window|Page].xaml）：
图30-1显示了这些XAML代码的结果。
图30-1
无论是按钮还是线条、矩形等图形，所有这些XAML元素都可以通过编程来访问。把
Path元素的Name或x:Name属性设置为mouth，就可以用变量名mouth以编程方式访问这个
元素：
接下来更改代码，脸上的嘴在后台代码中动态改变。添加一个按钮和单击处理程序，
在其中调用SetMouth方法（代码文件Shapes（WPF | UWP）/ Main[Window | Page].
xaml.cs）：
    private void OnChangeShape(object sender, RoutedEventArgs e)
    {
      SetMouth();
    }
使用WPF时，可以在后台编码中使用路径标记语言（Path Markup Language, PML），
类似于本节在XAML标记中使用Path元素的代码片段。Geometry.Parse会解释PML，创建
一个新的Geometry对象。在PML中，字母M定义了路径的起点，字母Q指定了二次贝塞尔
曲线的控制点和端点（代码文件ShapesWPF / MainWindow.xaml.cs）：
    private bool _laugh = false;
    private void SetMouth2()
    {
      if (_laugh)
      {
        mouth.Data = Geometry.Parse("M 40,82 Q 57,65 80,82");
      }
      else
      {
        mouth.Data = Geometry.Parse("M 40,74 Q 57,95 80,74");
      }
      _laugh = ! _laugh;
    }
运行应用程序，得到的图像如图30-2所示。
图30-2
在UWP应用程序中，Geometry类没有提供Parse方法，必须使用图片和片段创建几何
图形。首先，创建一个二维数组，其中包含的6个点定义了表示快乐状态的3个点，和表示
悲伤状态的3个点（代码文件Shapes[WPF|UWP]/Main[Window|Page].xaml.cs）：
    private readonly Point[, ] _mouthPoints = new Point[2, 3]
    {
      {
        new Point(40, 74), new Point(57, 95), new Point(80, 74),
      },
      {
        new Point(40, 82), new Point(57, 65), new Point(80, 82),
      }
    };
接下来，将一个新的PathGeometry对象分配给Path的Data属性。PathGeometry包含定
义了起点的PathFigure（设置StartPoint属性与PML中的字母M是一样的）。PathFigure包含
QuadraticBezierSegment，其中的两个Point对象分配给属性Point1和Point2 （与带有两个点
的字母Q一样）：
    private bool _laugh = false;
    public void SetMouth()
    {
      int index = _laugh ? 0: 1;
      var figure = new PathFigure() { StartPoint = _mouthPoints[index, 0] };
      figure.Segments = new PathSegmentCollection();
      var segment1 = new QuadraticBezierSegment();
      segment1.Point1 = _mouthPoints[index, 1];
      segment1.Point2 = _mouthPoints[index, 2];