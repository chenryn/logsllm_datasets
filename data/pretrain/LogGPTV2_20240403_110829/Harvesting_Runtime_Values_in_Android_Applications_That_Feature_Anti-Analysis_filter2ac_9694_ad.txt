### Summary of HARVESTER's Evaluation

The following table summarizes the recall evaluation of HARVESTER, showing the number of logging points with non-constant and constant values. The green slices represent logging points with non-constant values where dynamic analysis is necessary for value extraction. The red slices indicate missing logging points, and the grey slices show logging points with constant values where no static or dynamic analysis is needed. The fractions next to the circles represent the successfully extracted logging points for non-constant values, while the fractions in brackets represent the successfully extracted logging points for constant values.

| Logging Points | Non-Constant (Dynamic) | Constant (Static) |
|----------------|------------------------|-------------------|
| 161 (2, 157, 161) | 14 (8, 23) | 15 (8, 24) |
| 35 (12, 19, 35) | 22 (8, 34) | 16 (4, 24) |
| 3 (0, 3, 3) | 53 (10, 37, 53) | 7 (1, 5, 7) |
| 8 (2, 6, 8) | 8 (0, 8, 8) | 86 |
| 136 (34, 136) | 600 | 641 (5, 641) |
| 7 (4, 3, 7) | 745 | 860 (56, 860) |

### Comparison with SAAF

**Static Analysis:**
HARVESTER was compared with SAAF [17], a static approach that uses backward slicing to identify parameter values. Both tools were evaluated on 6,100 malware samples from MobileSandbox [32]. The logging points were the number and message content of text messages. SAAF had issues with string operations like concatenation, reporting only partial results. In contrast, HARVEUSTER consistently extracted complete SMS numbers and messages, even in cases where SAAF failed. SAAF also could not handle reflective calls with obfuscated target strings. Further evaluation on sophisticated malware families (Obad, Pincer, Ssucl, Dougalek) showed that SAAF could not extract any values of interest for Obad, Pincer, and Ssucl, and only partially for Dougalek. This demonstrates that hybrid approaches like HARVESTER are more effective than purely static ones like SAAF.

**Dynamic Analysis:**
HARVESTER was also compared with five state-of-the-art dynamic testing tools: Googleâ€™s Monkey [33], PUMA [35], AndroidHooker [39], DynoDroid [34], and a naive approach. The goal was to find telephone numbers to which SMS messages were sent. HARVESTER's recall was four to six times higher than these tools. Emulator-detection techniques in malware often prevented dynamic tools from reaching logging points. For example, the "DogWars" application checks for contacts before sending SMS messages. If the emulator has no contacts, the logging point is never reached. HARVESTER bypasses such checks and directly retrieves the target phone number. Dynamic tools like AndroidHooker and DynoDroid, which prepare the emulator with fake data, still have limited success, covering only 16.2% of all logging points. HARVESTER, by executing code slices directly, achieves 83.4% coverage.

### Efficiency and Performance

HARVESTER was tested on a set of 16,799 malware samples, configured to extract SMS phone numbers and messages. On average, it took about 2.5 minutes per application, making it suitable for large-scale analyses. HARVESTER had to try different values for 0.21 EXECUTOR flags per slice, with a maximum of 1.31 flags in a single app.

### Interesting Values Revealed by HARVESTER

HARVESTER uncovered several interesting values in malware applications:
- Reflective method calls to hide sensitive API calls like `getDeviceId` and `sendTextMessage`.
- Multi-stage obfuscation using nested reflective calls.
- Keys in `SharedPreferences` used by SMS trojans to store message counts and stolen amounts.
- Commands used by malware to contact C&C servers via SMS.
- Hard-coded encryption keys in popular apps like WhatsApp, which can be decrypted and leaked.

### Case Studies

**Improvements to Static Analysis Tools:**
HARVESTER was integrated with FlowDroid [4] to inject information about discovered reflective calls into the original app's bytecode. This improved FlowDroid's detection rate, finding 26 privacy leaks in the Fakeinstaller.AH malware family, compared to only 9 without HARVESTER. Additionally, HARVESTER deobfuscated ten DroidBench [4] applications, allowing FlowDroid to detect the same leaks as in the unobfuscated versions.

This comprehensive evaluation shows that HARVESTER is a powerful tool for extracting runtime values from obfuscated Android applications, outperforming both static and dynamic analysis tools in various scenarios.