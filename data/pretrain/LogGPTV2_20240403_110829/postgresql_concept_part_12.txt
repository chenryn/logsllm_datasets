the constant string ’NJ’. If he moves to another state, however, we would have to change the
query. Usingthestatecolumnismorereliable.
92 CHAPTER8. COMBININGSELECTS
Figure8.7showstwowaystogeneratethecorrectresult. Onequeryusesaself-jointodothe
comparisontoDickGleason’sstate. (Self-joinswerecoveredinSection6.10.) Thelastqueryuses
asubquerythatreturnsthestateas’NJ’;thisvalueisusedbytheupperquery. Thesubqueryhas
takentheplaceof aconstant. Unlikea constant, however, thevalueiscomputedeverytimethe
queryisexecuted.
Althoughwehaveusedtablealiasesinthesubqueryforclarity,theyarenotrequired. Acolumn
namewithnotablespecificationisautomaticallypairedwithatableinthecurrentsubquery. Ifno
matchingtableisfoundinthecurrentsubquery,higherpartsofthequeryaresearchedforamatch.
The state, firstname, andlastname in the subqueryrefer to the instanceof the friend table in the
subquery. Thesamecolumnnamesinthe upperqueryautomaticallyreferto thefriendinstance
in that query. If a column name matches two tables in the same subquery, an error is returned,
indicatingthecolumnisambiguous.
Subqueriescanalsoeliminatetablejoins. Forexample,considerthemail-orderpartscompany
usedin Figures 6.3 and 6.4 on page 61. To findthe customer namefor order number 14673, we
jointhesalesorderandcustomertables,asshowninthefirstqueryinFigure8.8. Thesecondquery
inthefiguredoesnothaveajoin,butinsteadgetsthecustomer_idfromasubquery. Ingeneral,if
atableisinvolvedinonlyonejoin,andnocolumnsfromthetableappearinthequeryresult,the
joincanbeeliminatedandthetablemovedtoasubquery.
In this example, we have specified salesorder.customer_idand customer.customer_id to clearly
indicate the tablesbeing referenced. However, this specificationis not required. We could have
usedonlycustomer_id inboth places. POSTGRESQLfindsthefirsttablein thesamesubqueryor
higherthatcontainsamatchingcolumnname.
Subqueries can be used anywhere a computed value is needed. Each has its own FROM and
WHEREclauses. Itcanalsohaveitsownaggregate,GROUPBY,andHAVINGclauses. Asubquery’s
only interactionwiththeupperqueryisthe valueitreturns. Thisapproachallowssophisticated
comparisonsthatwouldbedifficultifthesubquery’sclauseshadtobecombinedwiththoseofthe
upperquery.
Subqueries as Correlated Values
In addition to acting as constants in queries, subqueries can act as correlated values. Correlated
valuesvarybasedontherowbeingprocessed. Anormalsubqueryisevaluatedonceanditsvalue
usedbytheupperquery. Inacorrelatedsubquery,thesubqueryisevaluatedrepeatedlyforevery
rowprocessed.
For example, suppose you want to find the nameof your oldestfriend in eachstate. You can
accomplish this task with HAVING and table aliases, as shown in the first query of Figure 8.9.
Alternatively,youcanexecuteasubqueryforeachrowthatfindsthemaximumageforthatstate.
Ifthemaximumageequalstheageofthecurrentrow,therowisoutput, asshowninthesecond
query. This query references the friend table two times, using the aliasesf1 and f2. The upper
queryusesf1. Thesubqueryusesf2. ThecorrelatingspecificationisWHERE f1.state = f2.state,
8.2. SUBQUERIES 93
test=> SELECT * FROM friend ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Dick | Gleason | Ocean City | NJ | 19
Ned | Millstone | Cedar Creek | MD | 27
Sandy | Gleason | Ocean City | NJ | 25
Sandy | Weber | Boston | MA | 33
Victor | Tabor | Williamsport | PA | 22
(6 rows)
test=> SELECT f1.firstname, f1.lastname, f1.state
test-> FROM friend f1, friend f2
test-> WHERE f1.state <> f2.state AND
test-> f2.firstname = ’Dick’ AND
test-> f2.lastname = ’Gleason’
test-> ORDER BY firstname, lastname;
firstname | lastname | state
-----------------+----------------------+-------
Dean | Yeager | MA
Ned | Millstone | MD
Sandy | Weber | MA
Victor | Tabor | PA
(4 rows)
test=> SELECT f1.firstname, f1.lastname, f1.state
test-> FROM friend f1
test-> WHERE f1.state <> (
test(> SELECT f2.state
test(> FROM friend f2
test(> WHERE f2.firstname = ’Dick’ AND
test(> f2.lastname = ’Gleason’
test(> )
test-> ORDER BY firstname, lastname;
firstname | lastname | state
-----------------+----------------------+-------
Dean | Yeager | MA
Ned | Millstone | MD
Sandy | Weber | MA
Victor | Tabor | PA
(4 rows)
Figure8.7: FriendsnotinDickGleason’sstate
94 CHAPTER8. COMBININGSELECTS
test=> SELECT name
test-> FROM customer, salesorder
test-> WHERE customer.customer_id = salesorder.customer_id AND
test-> salesorder.order_id = 14673;
name
--------------------------------
Fleer Gearworks, Inc.
(1 row)
test=> SELECT name
test-> FROM customer
test-> WHERE customer.customer_id = (
test(> SELECT salesorder.customer_id
test(> FROM salesorder
test(> WHERE order_id = 14673
test(> );
name
--------------------------------
Fleer Gearworks, Inc.
(1 row)
Figure8.8: Subqueriescanreplacesomejoins
8.2. SUBQUERIES 95
test=> SELECT f1.firstname, f1.lastname, f1.age
test-> FROM friend f1, friend f2
test-> WHERE f1.state = f2.state
test-> GROUP BY f2.state, f1.firstname, f1.lastname, f1.age
test-> HAVING f1.age = max(f2.age)
test-> ORDER BY firstname, lastname;
firstname | lastname | age
-----------------+----------------------+-----
Ned | Millstone | 27
Sandy | Gleason | 25
Sandy | Weber | 33
Victor | Tabor | 22
(4 rows)
test=> SELECT f1.firstname, f1.lastname, f1.age
test-> FROM friend f1
test-> WHERE age = (
test(> SELECT MAX(f2.age)
test(> FROM friend f2
test(> WHERE f1.state = f2.state
test(> )
test-> ORDER BY firstname, lastname;
firstname | lastname | age
-----------------+----------------------+-----
Ned | Millstone | 27
Sandy | Gleason | 25
Sandy | Weber | 33
Victor | Tabor | 22
(4 rows)
Figure8.9: Correlatedsubquery
96 CHAPTER8. COMBININGSELECTS
which creates a correlated subquery because the subquery references a column from the upper
query. Suchasubquerycannotbeevaluatedonceandthesameresultusedforallrows. Instead,
itmustbeevaluatedforeveryrowbecausetheuppercolumnvaluecanchange.
Subqueries as Lists of Values
The previous subqueries returned one row of data to the upper query. If any of the previous
subqueriesreturnedmorethanonerow,anerrorwouldbegenerated: ERROR: More than one tuple
returned by a subselectused as an expression. Itispossible,however,tohavesubqueriesreturn
multiplerows.
Normalcomparisonoperatorslikeequalandless-thanexpectasinglevalueontheleftandon
the right. For example,equality expectsone valueon the left of theequals sign(=) and one on
theright—forexample,col = 3. Twospecialcomparisons,INandNOTIN,allowmultiplevaluesto
appearontherightside. Forexample,thetestcol IN (1,2,3,4)comparescolagainstfourvalues.
If colequalsanyofthefourvalues,thecomparisonwillreturntrueandoutputtherow. Thetest
col NOT IN (1,2,3,4)willreturntrueif coldoesnotequalanyofthefourvalues.
YoucanspecifyanunlimitednumberofvaluesontherightsideofanINorNOTINcomparison.
More importantly,a subquery(insteadof aconstant) canbe placedon the rightside. It canthen
returnmultiplerows. Thesubqueryisevaluated,anditsoutputusedlikealistofconstantvalues.
Supposewewantallemployeeswhotooksalesordersonacertaindate. Wecouldperformthis
queryintwoways. Wecouldjointheemployeeandsalesordertables,asshowninthefirstqueryof
Figure 8.10. Alternatively,we could useasubquery, asshown in thesecondquery. In thiscase,
the subquery is evaluated and generates a list of values used by IN to perform the comparison.
The subquery is possible because the salesorder table is involved in a single join, and the query
doesnotreturnanycolumnsfromthesalesordertable.
ANOT IN comparison returnstrue ifacolumn’svalueisnot found. Forexample,supposewe
wanttoseeallcustomerswhohaveneverorderedaproduct. Thatis,weneedtofindthecustomers
who have no sales orders. This task cannot be accomplished with a join. We need an anti-join,
becausewewanttofindallcustomerrowsthatdonotjointoanysalesorderrow. Figure8.11shows
the relevant query. The subquery returns a list of customer_ids representingall customers who
haveplacedorders. Theupperqueryreturnsallcustomernameswherethecustomer_iddoesnot
appearinthesubqueryoutput.
NOT IN and Subqueries with NULL Values
If a NOT IN subquery returns a NULL value, the NOT IN comparison alwaysreturns false. NOT IN
requirestheuppercolumn to be not equalto everyvaluereturnedby thesubquery. Becauseall
comparisons with NULL return false—eveninequalitycomparisons—NOT IN returns false. NULL
comparisonswerecoveredinSection4.3.
We can prevent NULL values from reaching the upper query by adding IS NOT NULL to the
subquery. Asanexample,inFigure8.11,ifanyNULLcustomer_idvaluesexisted,thequerywould
8.2. SUBQUERIES 97
test=> SELECT DISTINCT employee.name
test-> FROM employee, salesorder
test-> WHERE employee.employee_id = salesorder.employee_id AND
test-> salesorder.order_date = ’7/19/1994’;
name
--------------------------------
Lee Meyers
(1 row)
test=> SELECT name
test-> FROM employee
test-> WHERE employee_id IN (
test(> SELECT employee_id
test(> FROM salesorder
test(> WHERE order_date = ’7/19/1994’
test(> );
name
--------------------------------
Lee Meyers
(1 row)
Figure8.10: Employeeswhotookorders
test=> SELECT name
test-> FROM customer
test-> WHERE customer_id NOT IN (
test(> SELECT customer_id
test(> FROM salesorder
test(> );
name
------
(0 rows)
Figure8.11: Customerswhohavenoorders
98 CHAPTER8. COMBININGSELECTS
return no rows. We can prevent this situation by adding WHERE customer_id IS NOT NULL to the
subquery. AnINsubquerydoesnothavethisproblemwithNULLs.
Subqueries Returning Multiple Columns
Although most subqueries return a single column to the upper query, it is possible to handle
subqueriesreturningmorethanonecolumn. Forexample,thetestWHERE (7, 3) IN (SELECT col1,
col2 FROM subtable)returnstrueifthesubqueryreturnsarowwith7inthefirstcolumnand3inthe
second column. The test WHERE (uppercol1, uppercol2) IN (SELECT col1, col2 FROM subtable)
performs equalitycomparisons between the upper query’stwo columns and the subquery’stwo
columns. Multiplecolumnsintheupperquerycanthenbecomparedwithmultiplecolumnsinthe
subquery. Ofcourse,thenumberofvaluesspecifiedontheleftof INorNOTINmustbethesame
asthenumberofcolumnsreturnedbythesubquery.
ANY, ALL, and EXISTS Clauses
IN andNOTIN arespecialcasesof the more genericsubqueryclausesANY,ALL,andEXISTS. ANY
willreturntrueifthecomparisonoperatoristrueforanyvalueinthesubquery. Forexample,the
testcol = ANY(5,7,9)returnstrueifcolequalsanyofthethreevalues. ALLrequiresallsubquery
valuestocompareastrue,socol != ALL(5,7,9)returnstrueifcolisnotequaltoallthreevalues.
IN()isthesameas=ANY(),andNOTIN()isthesameas<>ALL().
Normally,youcanuseoperatorslikeequalandgreater-thanonlywithsubqueriesreturningone
row. With ANY and ALL, however, comparisons can be made with subqueries returning multiple
rows. They allow you to specify whether any or all of the subquery values, respectively, must
compareastrue.
EXISTS returns true if the subquery returns any rows, and NOT EXISTS returns true if the
subqueryreturnsnorows. Byusingacorrelatedsubquery,EXISTSpermitscomplexcomparisonsof
upper-queryvaluesinsidethesubquery. Forexample,twoupper-queryvariablescanbecompared
in the subquery’s WHERE clause. EXISTS and NOT EXISTS do not specify anything in the upper
query,soitdoesnotmatterwhichcolumnsarereturnedbythesubquery.
Figure8.12 showstheIN subqueryfrom Figure 8.10,withthequeryrewrittenusingANYand
EXISTS. NoticethattheEXISTSsubqueryusesacorrelatedsubquerytojointheemployee_idcolumns
ofthetwotables. Figure8.13showstheNOTINqueryfromFigure8.11,withthequeryrewritten
usingALLandNOTEXISTS.
Summary
A subquery can represent a fixed value, a correlated value, or a list of values. You can use any
numberofsubqueries. Youcanalsonestsubqueriesinsideothersubqueries.
In some cases, subqueries simply provide an alternativeway to phrase a query. In others, a
subqueryistheonlywaytoproducethedesiredresult.
8.2. SUBQUERIES 99
SELECT name
FROM employee
WHERE employee_id IN (
SELECT employee_id
FROM salesorder
WHERE order_date = ’7/19/1994’
);
SELECT name
FROM employee
WHERE employee_id = ANY (
SELECT employee_id
FROM salesorder
WHERE order_date = ’7/19/1994’
);
SELECT name
FROM employee
WHERE EXISTS (
SELECT employee_id
FROM salesorder
WHERE salesorder.employee_id = employee.employee_id AND
order_date = ’7/19/1994’
);
Figure8.12: INqueryrewrittenusingANYandEXISTS
100 CHAPTER8. COMBININGSELECTS
SELECT name
FROM customer
WHERE customer_id NOT IN (
SELECT customer_id
FROM salesorder
);
SELECT name
FROM customer
WHERE customer_id <> ALL (
SELECT customer_id
FROM salesorder
);
SELECT name
FROM customer
WHERE NOT EXISTS (
SELECT customer_id
FROM salesorder
WHERE salesorder.customer_id = customer.customer_id
);
Figure8.13: NOTINqueryrewrittenusingALLandEXISTS
8.3. OUTERJOINS 101
SELECT name, order_id
FROM customer, salesorder
WHERE customer.customer_id = salesorder.customer_id
UNION ALL
SELECT name, NULL
FROM customer
WHERE customer.customer_id NOT IN (SELECT customer_id FROM salesorder)
ORDER BY name;
Figure8.14: Simulatingouterjoins
8.3 Outer Joins
An outer join is similar to a normal join, except that it performs special handling to prevent
unjoinedrowsfrombeingsuppressedintheresult. Forexample,inthejoincustomer.customer_id
=salesorder.customer_id,onlycustomerswhohavesalesordersappearintheresult. Ifacustomer
hasno salesorders,heorsheissuppressedfrom theoutput. Ifthesalesordertableisusedinan
outerjoin, however,theresultwillincludeallcustomers. Thecustomerandsalesordertableswill
thenbejoinedandoutput,aswellasonerowforeveryunjoinedcustomer. Inthequeryresult,any
referencetosalesordercolumnsfortheseunjoinedcustomerswillreturnNULL.