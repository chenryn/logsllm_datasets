title:Decentralized Action Integrity for Trigger-Action IoT Platforms
author:Earlence Fernandes and
Amir Rahmati and
Jaeyeon Jung and
Atul Prakash
Decentralized Action Integrity
for Trigger-Action IoT Platforms
Earlence Fernandes
University of Washington
PI:EMAIL
Amir Rahmati
Samsung Research America
Stony Brook University
PI:EMAIL
Jaeyeon Jung
Samsung
PI:EMAIL
Atul Prakash
University of Michigan
PI:EMAIL
Abstract—Trigger-Action platforms are web-based systems
that enable users to create automation rules by stitching together
online services representing digital and physical resources using
OAuth tokens. Unfortunately, these platforms introduce a long-
range large-scale security risk: If they are compromised, an
attacker can misuse the OAuth tokens belonging to a large
number of users to arbitrarily manipulate their devices and data.
We introduce Decentralized Action Integrity, a security principle
that prevents an untrusted trigger-action platform from misusing
compromised OAuth tokens in ways that are inconsistent with any
given user’s set of trigger-action rules. We present the design and
evaluation of Decentralized Trigger-Action Platform (DTAP), a
trigger-action platform that implements this principle by over-
coming practical challenges. DTAP splits currently monolithic
platform designs into an untrusted cloud service, and a set of user
clients (each user only trusts their client). Our design introduces
the concept of Transfer Tokens (XTokens) to practically use ﬁne-
grained rule-speciﬁc tokens without increasing the number of
OAuth permission prompts compared to current platforms. Our
evaluation indicates that DTAP poses negligible overhead: it adds
less than 15ms of latency to rule execution time, and reduces
throughput by 2.5%.
I.
INTRODUCTION
Trigger-Action platforms are a class of web-based systems
that stitch together several online services to provide users
the ability to set up automation rules. These platforms allow
users to setup rules like, “If I post a picture to Instagram,
save the picture to my Dropbox account.” The ease of use and
functionality of such platforms have made them increasingly
popular [46], and several of them (e.g., If-This-Then-That
(IFTTT) [30], Zapier [18], and Microsoft Flow [5]) are on
the rise. Furthermore, with the rise in popularity of connected
physical devices like smart locks and ovens, we observe that
many trigger-action platforms have started adding automation
support for physical devices, making it possible for users to
set up rules like: “If there is a smoke alarm, then turn off my
oven” [22]. These platforms have privileged access to a user’s
online services and physical devices; thus they are an attractive
target for attackers. If they are compromised, attackers can
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23119
www.ndss-symposium.org
arbitrarily manipulate data and devices belonging to a large
number of users to cause damage.
To better characterize this risk, we perform a brief survey
of seven trigger-action platforms including an in-depth case
study of IFTTT, a widely used platform with over 11 million
users [29]. We ﬁnd that trigger-action platforms support a
wide variety of business and IoT use-cases using a logically
monolithic design. This implies that if attackers compromise
the platform, they will be able to leak OAuth tokens for all
users. Indeed, compromise of web systems are commonplace.
Prominent examples include Equifax [2], Target [16], US
voters database [1], and Dropbox [9]. OAuth-speciﬁc attacks
are on the rise as well. Yang et al. [51] showed that 41%
of top 600 Android mobile applications, which use OAuth,
are susceptible to remote hijacking, and the recent Google
Docs OAuth-based phishing attack compromised one million
users [36]. We observe that cloud services, even well-designed
and tested ones, are not immune to persistent and sophisticated
threats.
Furthermore, through API testing techniques, we ﬁnd that
in the case of IFTTT, the OAuth tokens it obtains for online
services are overprivileged. For example, we ﬁnd that it is
possible to ﬂash the ﬁrmware of a Particle chip, delete Google
drive ﬁles, and turn off video surveillance in a MyFox smart
home using IFTTT OAuth tokens. §III-B provides a more
comprehensive analysis of these issues. We note that this
risk of overprivilege is not isolated to IFTTT, but affects
trigger-action platforms in general that use OAuth—incorrect
OAuth scoping can lead to overprivilege—either trigger-action
platforms may request broad scopes or the online services may
only offer coarse-grained scopes. We conclude that beyond
attackers misusing OAuth tokens of a compromised trigger-
action platform, the overprivilege in the OAuth tokens extends
the abilities of the attacker to invoke API calls that are outside
the abilities of the trigger-action platform itself.
We show that it is possible to avoid this risk without losing
the beneﬁts of a cloud-based trigger-action platform. To that
end, we introduce Decentralized Action Integrity. This security
principle ensures that an attacker who controls a compromised
trigger-action platform: (1) can only invoke actions and triggers
needed for the rules that users have created; (2) can invoke
actions only if it can prove to an action service that the
corresponding trigger occurred in the past within a reasonable
amount of time; and (3) cannot tamper with any trigger data
passing through it undetected. To enable these security beneﬁts,
Decentralized Action Integrity makes use of four elements:
(1) Rule-speciﬁc tokens permit the bearer to execute a speciﬁc
API call of an online service; (2) Timely and veriﬁable triggers
ensure that the bearer of an OAuth token can invoke the action
portion of a user-created rule only when it can prove that the
triggering portion of the rule occurred within a reasonable
amount of time in the past; (3) Data integrity ensures that an
attacker cannot modify trigger data as it passes through the
platform; and (4) Tokens are decentralized. A compromise of
the platform does not leak tokens of all the users.
Decentralized Action Integrity is inspired by the end-to-end
argument for system design by Saltzer, Reed, and Clark [39].
Rather than depending on the cloud service of a trigger-action
platform, which can be compromised, to provide a proof that
tokens were not misused, the principle places veriﬁcation
checks for misuse of OAuth tokens at the endpoints (i.e.,
online services) of the system. Additionally, our work draws
on the notions of Decentralized Trust Management [20], and
the Kerberos Ticket-Granting Ticket system (§VIII illustrates
these relationships in more detail).
We design, implement, and evaluate Decentralized Trigger-
Action Platform (DTAP), the ﬁrst trigger-action platform sup-
porting Decentralized Action Integrity. Our design breaks down
the currently monolithic structure of trigger-action platforms
into an untrusted cloud service that executes user rules at large
scale and a set of trusted client applications, where each user
trusts their own client. While designing DTAP, there are a few
challenges. First, rule-speciﬁc tokens can lead to a drastically
increased number of OAuth permission prompts as users would
have to login and approve an OAuth scope request every time
they create a rule. The challenge is to gain the security of rule-
speciﬁc tokens but maintain the current trigger-action platform
experience where users approve OAuth requests only once
during a setup phase for each online service. DTAP overcomes
this challenge by using Transfer Tokens (XTokens). A small
trusted client installed on the user’s device uses an XToken to
automatically obtain a rule-speciﬁc token, which it transmits
to the cloud service for rule execution. Our implementation
encrypts XTokens at rest using a hardware-backed keystore
when available.
Second, DTAP requires the untrusted cloud service to prove
to the invoked action service that a trigger has occurred within
a reasonable amount of time in the past. As the cloud service
can be compromised, a possible design is to have the trigger
service communicate directly with the action service to verify
the occurrence of a triggering event. However, this introduces
an undesirable dependency between the action and trigger
services. DTAP avoids that by using a lightweight cryptographic
signature-based extension to the OAuth 2.0 protocol.
Our Contributions:
• We introduce Decentralized Action Integrity, a security
principle that prevents an attacker from using stolen OAuth
tokens in ways that are inconsistent with any given user’s
rules. We develop this principle based on a brief survey of
seven trigger-action platforms, and an in-depth case study of
IFTTT. Our analysis indicates that the logically monolithic
designs of current trigger-action platforms coupled with
overprivileged OAuth tokens pose a long-range large-scale
risk to the digital and physical resources of users (§III, §IV).
• We designed and implemented Decentralized Trigger-Action
Platform (DTAP), the ﬁrst decoupled trigger-action platform
supporting Decentralized Action Integrity, where users do
not have to trust the cloud platform with highly-privileged
access to their online services (§V). DTAP splits the logically
monolithic trigger-action platform design into an untrusted
cloud service that executes rules at scale, and a set of clients
that help users create rules in a secure manner. DTAP is
based on cryptographic extensions to the OAuth protocol
that only allow the cloud service to execute user rules, even
if it is attacker-controlled.
• We evaluate DTAP using various micro- and macro-
benchmarks. Our evaluation shows that performance over-
head is modest (§VI): Each rule requires less than 3.5KB
additional storage space and imposes less than 7.5KB of
transmission overhead per execution. DTAP adds less than
15ms of latency to rule execution time. For rules in trigger-
action platforms, which typically send emails, SMSs, or
invoke actions on physical devices or on online services
over a network, we consider this additional latency to be
acceptable. DTAP reduces throughput by 2.5% for rule
execution.
We have designed Decentralized Trigger-Action Platform
as an extension to the OAuth 2.0 protocol which is used by
all current trigger-action platforms. Additionally, the protocol
extensions do not require changes to the existing infrastructure
of a trigger-action platform that is responsible for executing
rules at large scale. These two aspects of the design indicate its
wide applicability. Furthermore, our implementation provides
a library that enables developers of online services to add a
single line of code to gain the beneﬁts of Decentralized Action
Integrity. Although this represents a change to existing online
services, we believe that DTAP is a valuable ﬁrst step toward
a clean-slate design of trigger-action platforms with strong
security properties from the ground up.
II. BACKGROUND: TRIGGER-ACTION PROGRAMS AND
PLATFORMS
Trigger-Action platforms support stitching together various
online services APIs such that end-users may write simple
conditional programs. These simple programs often take the
form “IF triggering condition, THEN take a speciﬁc action.”
Examples include “IF smoke alarm has ﬁred THEN turn off the
oven,” and “IF NASA posts a new Instagram picture, THEN
post it to my Dropbox.” Table I shows a set of trigger-action
platforms that we surveyed.1 Based on our survey, we adopt a
general terminology that describes the four main architectural
components of such platforms:
• Channel: A channel represents part of an online service’s
set of APIs on the trigger-action platform. Users connect
channels to their trigger-action platform accounts—a pro-
cess that involves user authorization. For example, a user
with a Facebook account must authorize the corresponding
Facebook channel to communicate with her Facebook ac-
count. Channels communicate with online services using
REST (Representational State Transfer) APIs operating over
1Our survey process was simple: create an account and create a single Rule,
and then browse through the list of available online services that integrate with
the platform.
2
Name
Purpose
# of Channels
IFTTT [30]
Zapier [18]
Microsoft Flow [5]
Stringify [15]
Apiant [4]
automate.io [6]
CloudWork [7]
IoT/Business/Smart Home
IoT/Business
Business
IoT/Smart Home
IoT/Business
Business
Business
500+
750+
156
74
15227
53
91
TABLE I: A list of trigger-action platforms, which we brieﬂy
surveyed, indicating their stated application area. Many of these
platforms support integration with physical devices.
HTTP(S). These online services use the popular OAuth
protocol to enforce authorization [31], [32]. Users must
connect several such channels, before they can accomplish
any useful work. Either the trigger-action platform developers
or online service providers can implement channels. In the
latter case, the trigger-action platform exposes a separate
API to channel writers to help them integrate their online
service with the platform. There is generally a one-to-one
correspondence between online services and channels in the
trigger-action platforms.
• Trigger: A channel may provide triggers, which are events
that occur in the associated online service. “A ﬁle was
uploaded to a cloud drive” or “smoke alarm is on” are
examples of triggers. These triggers correspond to APIs in
the trigger online service. The online services are REST
(Representational State Transfer) services that use JSON or
XML.
• Action: A channel may also provide actions. An action is
a function (or set of functions) that exists in the API of
the online service. Examples of actions include “turning
on a connected oven” or “sending an SMS.” In this paper,
we collectively refer to a channel’s triggers and actions as
operations.
• Rule: Rules are at
the core of the trigger-action user
experience, and they are the core functionality that these
platforms enable. A rule stitches together various channels
to achieve useful automation. A typical rule has two pieces.
The “If” piece represents a trigger or an event that occurs
on an online service. The “Then” piece represents an action
that should be executed on the online service. For example,
“If there is a smoke alarm, then turn off my oven.” This
rule integrates the smoke alarm channel’s “alarm is on”