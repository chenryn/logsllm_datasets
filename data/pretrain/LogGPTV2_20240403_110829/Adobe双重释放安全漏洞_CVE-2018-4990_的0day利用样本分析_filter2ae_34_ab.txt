因此，为了触发这一漏洞，会发生如下过程：  
1、加载PDF，在一个字段按钮内部解析畸形的JP2K图像，这触发了第一次释放。  
2、加载OpenAction，其中包含将访问字段按钮的JavaScript，设置一个属性并触发第二次释放。  
这样一来，攻击者就有了一个非常好的机会，能够重用JavaScript中释放的块，以此来通过第二次释放触发一个UAF（Use-After-Free）条件。我认为，如果利用Pwn2own 2017上发表的CVE-2017-3055堆缓冲区溢出漏洞（
），并在此前或此后执行JavaScript，也是同样可行的。我们知道，有很多漏洞都是通过格式不正确的静态内容和动态内容访问相结合，并对格式不正确的内容进行操纵而触发的。这种类型的模糊方法比较困难，因为不仅仅需要对内容进行模糊处理，还需要对其进行修改和生成，属于较为综合的模糊策略。
###  漏洞利用
在触发漏洞之前，攻击者使用以下JavaScript：
    var a         = new Array(0x3000);
    var spraynum  = 0x1000;
    var sprayarr  = new Array(spraynum);
    var spraylen  = 0x10000-24;
    // force allocations to get a clean heap
    for(var i = 1; i  |    |  Freed       |    | +------------> |    |  Freed       |    |
    |    |              |    |                |    |              |    |                |    |  chunks      |    |
    |    +--------------+    |                |    +--------------+    |                |    |  coalesced   |    |
    |    +--------------+    |                |    +--------------+    |                |    |              |    |
    |    |              |    |                |    |              |    |                |    |              |    |
    |    |  Freed       |    |                |    |  Freed       |    |                |    |              |    |
    |    |              |    |                |    |              |    |                |    |              |    |
    |    +--------------+    |                |    +--------------+    |                |    +--------------+    |
    |                        |                |                        |                |                        |
    +------------------------+                +------------------------+                +------------------------+
在代码中，使用for(var i = 1; i 