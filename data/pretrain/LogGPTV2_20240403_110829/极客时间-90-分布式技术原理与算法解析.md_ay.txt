### 两层调度架构以 Mesos 为基础的分布式资源管理与调度框架包括两部分，即 Mesos资源管理集群和框架。-   资源管理集群是由一个 Master 节点和多个 Slave    节点组成的集中式系统。每个集群有且仅有一个 Master 节点，负责管理    Slave 节点，并对接上层框架；Slave 节点向 Master    节点周期汇报资源状态信息，并执行框架提交的任务。-   框架（Framework）运行在 Mesos 上，是负责应用管理与调度的"组件"，比如    Hadoop、Spark、MPI 和 Marathon    等，不同的框架用于完成不同的任务，比如批处理任务、实时分析任务等。框架主要由调度器（Scheduler）和执行器（Executor）组成，调度器可以从    Master 节点获取集群节点的信息 ，执行器在 Slave 节点上执行任务。从上述的架构描述可以看出，Mesos 是一个典型的双层调度框架。Mesos Master上有一个调度器（也就是 AllocationModule），负责管理并分配集群中的所有资源，是第一层调度。框架上负责任务的管理与调度的调度器，是第二层调度，如下图所示。![](Images/19d2115c6c20c164e42ac7c77f5ad808.png){savepage-src="https://static001.geekbang.org/resource/image/0b/a4/0bb9bb6a32b73b094a8fb61bca5c6ca4.png"}接下来，我们再看看 Mesos 两层调度的基本原理吧。-   框架向 Mesos Master 注册；-   Mesos Slave 节点定期或周期向 Mesos Master 上报本节点的空闲资源；-   Mesos Master 的 Scheduler 进程收集所有节点的空闲资源信息，并以    Resource Offer 的方式将空闲资源发送给注册的框架；-   框架的 Scheduler 接收到 Mesos    发送的资源后，进行任务调度与匹配，匹配成功后，将匹配结果下发给 Mesos    Master，并由 Mesos Master 转发给相应节点的执行器执行任务。可以看出，Mesos 实现双层调度时，采用 Resource Offer机制衔接了第一层和第二层调度。**Resource Offer 机制**指的是，MesosMaster主动将节点空闲资源，以类似发放（Offer）的方式发给每个框架，如果框架需要则使用，不需要则还回。也就是说，通过 Resource Offer机制，第一层调度将资源主动告知第二层调度，然后第二层调度进行具体的任务匹配，从而实现了任务调度与资源管理的分离，MesosMaster 通过资源分配算法决定给各个 Framework 提供多少资源，而 Framework则决定接受哪些资源，以及哪些任务使用这些资源运行。这样一来，一个两层调度架构就实现了。在 Mesos 的两层调度中，Framework第二层调度器中的任务与资源匹配的调度策略很常见，也有很多文章做了比较深入的分析了，所以如果你想要深入研究的话，可以参考下Hadoop、Spark 等的调度策略，这里我就不多说了。接下来，我们重点看下 Mesos第一层调度算法，理解其如何为框架分配资源，以支持多用户多框架。
### 资源分配算法Mesos的资源分配算法解决的问题是，决策需要将当前可用资源分配给哪些框架以及分配多少。接下来，我将重点与你介绍两种主要的资源分配算法，即：最大最小公平算法（Max-minFairness，MMF）和主导资源公平算法（Dominant Resource Fairness，DRF）。**首先，我们看看最大最小公平算法。**这是一种在兼顾公平的前提下，尽可能让更多人满意的资源分配算法。为什么这么说呢？因为这个算法有3 个主要原则：-   按照用户对资源需求量递增的顺序进行空闲资源分配；-   不存在用户得到的资源超过自己需求的情况；-   对于分配的资源不满足需求的用户，所获得的资源是相等的。在执行资源分配时，最大最小公平算法按照上述 3条原则进行多次迭代，每次迭代中资源均平均分配，如果还有剩余资源，就进入下一次迭代，一直到所有用户资源得到满足或集群资源分配完毕，迭代结束。接下来，我们通过一个具体的例子来看看最大最小公平算法的资源分配流程吧。假设，现在有总量为 100 的空闲资源，有 4 个用户 A、B、C、D对该资源的需求量分别为（35，10，25，45），分配流程如下所示：1.  按照用户对资源的需求量升序排列，则 4    个用户的需求量为（B:10，C:25，A:35，D:45）。2.  平均分配空闲资源。资源空闲总量 100，除以用户数 4，则平均空闲资源量为    25；按照第一步中需求量分配后，用户资源需求量为（0，0，10，20），且用户    B 由于资源需求量小于 25，因此会剩余资源。此时空闲资源量为    15，资源需求人数为 2。3.  重复第二步，平均分配资源，15/2=7.5，即分别为用户 A 和 D 分配 7.5    份资源，此时用户资源需求量为（0，0，2.5，12.5），空闲资源量为    0，资源需求人数为 2。4.  所有资源已分配完，算法终止。最大最小公平算法的执行流程，如下图所示。![](Images/820009e8c1caf9a546d73ff30a15f0c1.png){savepage-src="https://static001.geekbang.org/resource/image/73/a4/737a82ebe2ca35f29b2bf8a5c06c4ea4.png"}在这个案例中，最大最小公平算法是由于所有资源全部分配完才终止的。至此，对于需求量为（10，25，35，45）的用户们来说，分配到的资源是（10，25，32.5，32.5）。这个算法的另外一个结束条件是，资源分配满足了所有用户的资源需求，即当没有用户有资源需求时，算法也会终止。**接下来，我们再看看主导资源公平算法。**最大最小公平算法采用了绝对公平的方式分配资源，会导致大量的资源浪费，比如用户需求量为35 和 45 的用户 A 和用户 D，均分配了 32.5的空闲资源，但由于资源不满足需求，这两个用户均无法使用。而主导资源公平算法在考虑用户公平性的前提下，还考虑了用户对不同资源类型的需求，以尽可能地合理分配资源。也就是说，同样的资源量，主导资源公平算法可以尽可能地满足更多的用户。在 Mesos 中，框架对资源的需求往往包括对CPU、内存等多种类型资源的需求。针对多种资源的需求，主导资源公平算法首先计算已经分配给用户的每一种资源的占用率（ResourceShare），比如已经分配的 CPU占总资源量的多少，已经分配的内存占总资源量的多少。所有资源占用率中的最大值称作该**用户的主导资源占用率**，而主导资源占用率对应的资源就是用户的主导资源。我们通过一个具体的案例，看看如何判断用户的主导资源吧。如下图所示，假设系统中的资源共包括18 个 CPU 和 36 GB 内存，有两个 Framework（Framework A 和 FrameworkB）分别运行了两种任务，假设 Framework A 运行内存密集型任务，Framework B运行 CPU 密集型任务，且每个任务所需要的资源量是一致的，分别是 \ 和 \。![](Images/8378f5a794eeae6d86e315e9ce7f8f84.png){savepage-src="https://static001.geekbang.org/resource/image/31/58/315826c3aff89714530b370e520edd58.png"}第一步：计算资源分配量。假设 x 和 y 分别是 Framework A 和 Framework B 分配的任务数，那么Framework A 消耗的资源为{2x CPU，8x GB}，Framework B 消耗的资源数为{6yCPU，2y GB}，分配给两个 Framework 的总资源量为（2x+6y）个 CPU和（8x+2y）GB 内存。第二步：确定主导资源。对于 Framework A 来说，每个任务要消耗总 CPU 资源的 2/18，总内存资源的8/36，所以 Framework A 的主导资源为内存；对于 Framework B来说，每个任务要消耗总 CPU 资源的 6/18 和总内存资源的 2/36，因而Framework B 的主导资源为 CPU。第三步：DRF算法的核心是平衡所有用户的主导资源占用率，尽可能试图最大化所有用户中最小的主导资源占用率。通过求解下列公式，可以计算出Framework A 和 Framework B 分配的任务数，并且要在满足公式的条件下，使得x 和 y 越大越好。    2x+6y≤188x+2y≤368x/36=6y/18通过求解可以得出：x=3，即 Framework A 可以运行 3 个任务；y=2，即Framework B 可以运行 2 个任务。这样分配的话，每个 Framework获取了相同比例的主导资源，即：A 获取了 2/3 的内存，B 获取了 2/3 的CPU，从而在主导资源上体现了调度算法的公平性。在实际任务分配过程中，主导资源率是根据已经分配给 Framework的资源，占集群中总资源量的多少进行计算的，并且在每次分配过程中，会选择主导资源最小的Framework 进行分配，也就是试图最大化所有用户中最小的主导资源占用率。如果你想深入研究主导资源公平算法的话，可参考"[Dominant ResourceFairness: Fair Allocation of Multiple ResourceTypes](https://cs.stanford.edu/~matei/papers/2011/nsdi_drf.pdf)"这篇论文。**现在，我来对比下这两种调度算法吧。**最大最小公平算法适用于单一类型的资源分配场景，而主导资源公平算法适用于多种类型资源混合的场景。并且，最大最小公平算法从公平的角度出发，为每个用户分配不多于需求量的资源；而主导资源公平算法从任务出发，目的在于尽量充分利用资源使得能够执行的任务越多越好。
## 知识扩展：两层调度如何保证不同的业务不会互相干扰？类似 Mesos这样的两层调度机制，可以同时支持多个框架和多种类型的业务，那么如何保证这些业务运行时不会互相干扰呢？首先，我们思考一下什么情况下会存在业务运行时相互干扰呢。答案就是，当多个业务运行在同一台机器上，共同使用CPU、内存，以及系统环境时会存在相互干扰。要解决这个问题，我想你肯定会问，不同的业务能在独立的环境中运行吗？也就是说，隔离不同的业务资源和环境，应该就不会存在相互干扰了吧。不错，解决这个问题的办法就是资源隔离，就好比我们现在接触的虚拟机一样，在同样的服务器上安装多个虚拟机，不同的用户在不同的虚拟机上运行，这些用户互不干扰。在Mesos 中，实现这种资源隔离的是**容器**。容器的实质是进程，该进程运行于属于自己的独立的命名空间，可以拥有自己的root 文件系统、自己的网络配置、自己的进程空间，甚至是自己的用户 ID空间。Mesos 支持的容器，包括 Linux 自带的 cgroups 和 Docker。所以说，Mesos 正是用容器隔离开了不同的业务，使得它们运行时不会互相干扰。
## 总结今天，我以 Mesos为例，与你讲述了两层调度的架构设计和资源分配算法。我们一起总结下今天的核心内容吧。两层调度是一种资源和任务分开调度的设计，也就是说一层调度器只负责资源的管理和分配，另外一层调度器负责任务与资源的匹配。在 Mesos 中，第一层资源调度由 Mesos提供，第二层任务调度由框架提供，Mesos 将资源以 Resource Offer的形式发放给框架调度器，框架调度器根据任务需求和得到的资源信息进行任务匹配调度，为此提高了调度的并发性。而关于第一层的调度算法，通常有最大最小公平算法和主导资源公平算法等。两层调度的一个问题是，由于第二层调度只能获得部分资源视图，因此无法实现全局最优调度。最后，我将今天这篇文章的核心知识点梳理为了一张思维导图，以方便你理解与记忆。![](Images/21ddcc894ca6500c34a2f8d3ae5205c9.png){savepage-src="https://static001.geekbang.org/resource/image/0c/30/0cd6814755cfa921f5366c71cb224330.png"}两层调度提供了多租户多框架的支持，如果你的业务类型比较多或者面向的是不同的租户的话，建议你采用两层调度框架。相信你通过这篇文章可以看到，在分布式领域中，同时支持多种框架、支持多种类型任务调度的调度机制，并没有那么神秘，只要你静下心来弄明白这篇文章的调度机制，以后遇到类似的调度机制，就可以做到心中有数了。不得不说，Mesos 的两层调度设计得非常巧妙，并且 Mesos支持你自己写一个调度器注册到 Mesos作为第二层调度。赶快动手实践一下吧，[Mesos的官网](http://mesos.apache.org/)提供了相应的案例，方便你入门，加油，相信你一定可以！
## 思考题你觉得，Mesos 双层调度机制容易导致资源碎片问题吗？原因又是什么呢？我是聂鹏程，感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再会！![](Images/c191f391e2aab7575517a886bbd7a681.png){savepage-src="https://static001.geekbang.org/resource/image/a4/8c/a42a16601611a1a72599ecfca434508c.jpg"}