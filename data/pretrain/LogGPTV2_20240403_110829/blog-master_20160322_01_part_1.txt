## PostgreSQL 字符串 collate 与排序、memcpy优化 - 源码分析  
### 作者                                                 
digoal                                                  
### 日期                                                  
2016-03-22                                                                         
### 标签                                                                                                                                                                  
PostgreSQL , collate , 中文排序 , 数据库国际化                 
----                                                  
## 背景            
事情的起因是这样的，某个用户问我为什么在GP里面查询到的'A' > 'a'和PostgreSQL中查询到的结果不一样，一个是false, 一个true.  
但是这个原因其实和Greenplum还是PostgreSQL是没关系的。  
原因的根源还是collate。  
例如，在使用比较操作符时，可以指定需要比较的字符串的collate来查看这里的区别：  
```  
postgres=# select 'a' > 'A' collate "en_US";    
 ?column?     
----------    
 f    
(1 row)    
postgres=# select 'a' > 'A' collate "C";    
 ?column?     
----------    
 t    
(1 row)    
postgres=# select 'a' > 'A' collate "zh_CN";    
 ?column?     
----------    
 f    
(1 row)    
```  
操作符>的源代码 :  
使用C作为collate时，实际上是memcmp直接对被比较的字符串的比较，而使用非C的collate则需要COPY字符串的内存，然后使用strcoll_l或strcoll进行比较。  
所以建议数据库初始化时使用C，比如 ```--lc-collate=C --lc-ctype=en_US.utf8``` 。  
```  
Datum    
text_gt(PG_FUNCTION_ARGS)    
{    
        text       *arg1 = PG_GETARG_TEXT_PP(0);    
        text       *arg2 = PG_GETARG_TEXT_PP(1);    
        bool            result;    
        result = (text_cmp(arg1, arg2, PG_GET_COLLATION()) > 0);    
        PG_FREE_IF_COPY(arg1, 0);    
        PG_FREE_IF_COPY(arg2, 1);    
        PG_RETURN_BOOL(result);    
}    
/* text_cmp()    
 * Internal comparison function for text strings.    
 * Returns -1, 0 or 1    
 */    
static int    
text_cmp(text *arg1, text *arg2, Oid collid)    
{    
        char       *a1p,    
                           *a2p;    
        int                     len1,    
                                len2;    
        a1p = VARDATA_ANY(arg1);    
        a2p = VARDATA_ANY(arg2);    
        len1 = VARSIZE_ANY_EXHDR(arg1);    
        len2 = VARSIZE_ANY_EXHDR(arg2);    
        return varstr_cmp(a1p, len1, a2p, len2, collid);    
}    
/* varstr_cmp()    
 * Comparison function for text strings with given lengths.    
 * Includes locale support, but must copy strings to temporary memory    
 *  to allow null-termination for inputs to strcoll().    
 * Returns an integer less than, equal to, or greater than zero, indicating    
 * whether arg1 is less than, equal to, or greater than arg2.    
 */    
int    
varstr_cmp(char *arg1, int len1, char *arg2, int len2, Oid collid)    
{    
    int         result;    
    /*    
     * Unfortunately, there is no strncoll(), so in the non-C locale case we    
     * have to do some memory copying.  This turns out to be significantly    
     * slower, so we optimize the case where LC_COLLATE is C.  We also try to    
     * optimize relatively-short strings by avoiding palloc/pfree overhead.    
     */    
    if (lc_collate_is_c(collid))    
    {    
        result = memcmp(arg1, arg2, Min(len1, len2));    
        if ((result == 0) && (len1 != len2))    
            result = (len1 = STACKBUFLEN / 2)    
            {    
                a1len = len1 * 2 + 2;    
                a1p = palloc(a1len);    
            }    
            else    
            {    
                a1len = STACKBUFLEN;    
                a1p = a1buf;    
            }    
            if (len2 >= STACKBUFLEN / 2)    
            {    
                a2len = len2 * 2 + 2;    
                a2p = palloc(a2len);    
            }    
            else    
            {    
                a2len = STACKBUFLEN;    
                a2p = a2buf;    
            }    
            /* stupid Microsloth API does not work for zero-length input */    
            if (len1 == 0)    
                r = 0;    
            else    
            {    
                r = MultiByteToWideChar(CP_UTF8, 0, arg1, len1,    
                                        (LPWSTR) a1p, a1len / 2);    
                if (!r)    
                    ereport(ERROR,    
                            (errmsg("could not convert string to UTF-16: error code %lu",    
                                    GetLastError())));    
            }    
            ((LPWSTR) a1p)[r] = 0;    
            if (len2 == 0)    
                r = 0;    
            else    
            {    
                r = MultiByteToWideChar(CP_UTF8, 0, arg2, len2,    
                                        (LPWSTR) a2p, a2len / 2);    
                if (!r)    
                    ereport(ERROR,    
                            (errmsg("could not convert string to UTF-16: error code %lu",    
                                    GetLastError())));    
            }    
            ((LPWSTR) a2p)[r] = 0;    
            errno = 0;    
#ifdef HAVE_LOCALE_T    
            if (mylocale)    
                result = wcscoll_l((LPWSTR) a1p, (LPWSTR) a2p, mylocale);    
            else    
#endif    
                result = wcscoll((LPWSTR) a1p, (LPWSTR) a2p);    
            if (result == 2147483647)   /* _NLSCMPERROR; missing from mingw    
                                         * headers */    
                ereport(ERROR,    
                        (errmsg("could not compare Unicode strings: %m")));    
            /*    
             * In some locales wcscoll() can claim that nonidentical strings    
             * are equal.  Believing that would be bad news for a number of    
             * reasons, so we follow Perl's lead and sort "equal" strings    
             * according to strcmp (on the UTF-8 representation).    
             */    
            if (result == 0)    
            {    
                result = memcmp(arg1, arg2, Min(len1, len2));    
                if ((result == 0) && (len1 != len2))    
                    result = (len1 = STACKBUFLEN)    
            a1p = (char *) palloc(len1 + 1);    
        else    
            a1p = a1buf;    
        if (len2 >= STACKBUFLEN)    
            a2p = (char *) palloc(len2 + 1);    
        else    
            a2p = a2buf;    
        memcpy(a1p, arg1, len1);    
        a1p[len1] = '\0';    
        memcpy(a2p, arg2, len2);    
        a2p[len2] = '\0';    
#ifdef HAVE_LOCALE_T    
        if (mylocale)    
            result = strcoll_l(a1p, a2p, mylocale);    
        else    