# QEMU-KVM Process and Exploitation

## Overview
This document details a method to exploit the QEMU-KVM process, focusing on techniques to bypass security measures and execute arbitrary code. The presentation was given by Nelson Elhage on July 25, 2011.

## Exploitation Steps

### Allocating an Object in the Guest
1. Allocate an object in the guest.
2. Compute the host virtual address (HVA) using:
   \[
   \text{HVA} = \text{physmem_base} + \text{gva_to_gfn(gva)} \times \text{page_size}
   \]
3. Set the `->expire` field of the timer to a small value (e.g., 0).

### Address Calculation and Ejection
1. Calculate the address of the allocated object in the host.
2. Write 2 to I/O port 0xae08 to eject the ISA bridge.
3. Ping the emulated gateway with ICMP packets containing pointers to the allocated timer in the host.

### Control Flow Hijacking
- We have control over the instruction pointer (`%rip`). The next steps involve:
  - Setting the EIP to a known value (e.g., 0x41414141).
  - Disabling NX (No eXecute) in the BIOS for demonstration purposes.
  - Using Return-Oriented Programming (ROP) to pivot and achieve the desired execution flow.

### Exploit Code: `virtunoid.c`
#### Getting to Shellcode
- **QEMUTimer Structure**:
  ```c
  struct QEMUTimer {
      ...
      struct QEMUTimer *next;
      ...
  };
  ```

- **qemu_run_timers Function**:
  ```c
  static void qemu_run_timers(QEMUClock *clock) {
      QEMUTimer **ptimer_head, *ts;
      int64_t current_time;

      current_time = qemu_get_clock_ns(clock);
      ptimer_head = &active_timers[clock->type];

      for (;;) {
          ts = *ptimer_head;
          if (!qemu_timer_expired_ns(ts, current_time))
              break;

          *ptimer_head = ts->next;
          ts->next = NULL;
          ts->cb(ts->opaque);
      }
  }
  ```

- **Timer Chains**:
  - We control not just `%rip`, but also a `QEMUTimer` object that will be dispatched by `qemu_run_timers`.
  - By controlling `->next`, we can chain fake timers to make multiple one-argument calls in sequence.
  - `qemu_run_timers` does not modify `%rsi` in any version of QEMU-KVM examined.

- **Getting to `mprotect`**:
  - Find a function ("F") that makes a three-argument function call based on structures passed as arguments.
  - Construct appropriate fake structures.
  - Create a timer chain that:
    - Sets up `%rsi` based on the first argument in `%rdi`.
    - Calls `F` to `mprotect()` one or more pages in the guest physical memory map.
    - Executes shellcode stored in those pages.

- **Why This Trickery?**
  - Simplifies continued execution.
  - Reduces dependence on compiled code details.
  - Avoids the complexity of ROP.

### Bypassing ASLR
- **Addresses Needed**:
  - Base address of the QEMU-KVM binary.
  - `physmem_base`, the address of the physical memory mapping inside QEMU-KVM.

- **Options for Bypassing ASLR**:
  - **Option A**: Find an information leak.
  - **Option B**: Assume non-PIE and use clever techniques.

- **fw_cfg**:
  - Emulated I/O ports 0x510 (address) and 0x511 (data).
  - Used to communicate various tables to the QEMU BIOS (e820 map, ACPI tables, etc.).
  - Supports exporting writable tables to the BIOS.
  - `fw_cfg_write` does not check if the target table is supposed to be writable.

- **hw/pc.c**:
  ```c
  static struct e820_table e820_table;
  struct hpet_fw_config hpet_cfg = {.count = UINT8_MAX};
  ...
  fw_cfg = fw_cfg_init(BIOS_CFG_IOPORT, BIOS_CFG_IOPORT);
  fw_cfg_add_bytes(fw_cfg, FW_CFG_E820_TABLE, (uint8_t *)&e820_table, sizeof(struct e820_table));
  fw_cfg_add_bytes(fw_cfg, FW_CFG_HPET, (uint8_t *)&hpet_cfg, sizeof(struct hpet_fw_config));
  ```

- **read4 Your Way to Victory**:
  - Result: nearly 500 writable bytes inside a static variable.
  - These bytes are not suitable for shellcode due to page alignment requirements.
  - Use them to build a `read4()` primitive to find `physmem_base`.
  - Proceed with the exploit as described.

- **Repeated Timer Chaining**:
  - Instead of ending timer chains with `->next = NULL`, end them with a timer that calls `rtc_update_second` to reschedule the timer every second.
  - This allows repeated execution of `read4()`, updating structures based on the result, and hijacking the list again.

## Conclusions and Further Research

### Possible Hardening Directions
- Sandbox QEMU-KVM.
- Build QEMU-KVM as Position-Independent Executable (PIE).
- Keep memory in a file in tmpfs and lazily mmap as-needed for DMA.
- XOR-encode key function pointers.
- More auditing and fuzzing of QEMU-KVM.

### Future Research Directions
- Fuzzing and auditing `kvm.ko` (the x86 emulator).
- Fingerprinting QEMU-KVM versions.
- Searching for information leaks (Rosenbugs).

## Demo
- It's demo time!

## Questions?
- Any questions?

---

**Nelson Elhage**  
**Virtunoid: Breaking out of KVM**  
**July 25, 2011**