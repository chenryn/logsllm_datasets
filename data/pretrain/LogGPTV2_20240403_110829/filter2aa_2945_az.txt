    }
}
In this method, you build a formatted string using the text
representations of the values of the month field, the expression this.day
+ 1, and the expression this.year + 1900. The ToString method returns
the formatted string as its result.
5. Display the Program.cs file in the Code and Text Editor window.
6. In the doWork method, comment out the four existing statements.
7. Add statements to the doWork method that declare a local variable
named defaultDate and initialize it to a Date value constructed by using
the default Date constructor. Add another statement to doWork to
display the defaultDate variable on the console by calling
Console.WriteLine.
Note The Console.WriteLine method automatically calls the
ToString method of its argument to format the argument as a
string.
The doWork method should now look like this:
static void doWork()
{
    ...
    Date defaultDate = new Date();
    Console.WriteLine(defaultDate);
}
Note When you type new Date(, IntelliSense automatically detects
that two constructors are available for the Date type.
Download from finelybook PI:EMAIL
350
8. On the Debug menu, click Start Without Debugging to build and run the
program. Verify that the date January 1 1900 is written to the console.
9. Press the Enter key to return to the Visual Studio 2017 programming
environment.
10. In the Code and Text Editor window, return to the doWork method and
add two more statements. In the first statement, declare a local variable
named weddingAnniversary and initialize it to July 4 2017. (I actually
did get married on American Independence Day, although it was many
years ago.) In the second statement, write the value of
weddingAnniversary to the console.
The doWork method should now look like this:
Click here to view code image
static void doWork()
{
    ...
    Date weddingAnniversary = new Date(2017, Month.July, 4);
    Console.WriteLine(weddingAnniversary);
}
11. On the Debug menu, click Start Without Debugging, and then confirm
that the date July 4 2017 is written to the console below the previous
information.
12. Press Enter to close the program and return to Visual Studio 2017.
Copying structure variables
You’re allowed to initialize or assign one structure variable to another
structure variable, but only if the structure variable on the right side is
completely initialized (that is, if all its fields are populated with valid data
rather than undefined values). The following example compiles because now
is fully initialized. The illustration shows the results of performing such an
assignment.
Click here to view code image
Date now = new Date(2012, Month.March, 19);
Date copy = now;
Download from finelybook PI:EMAIL
351
The following example fails to compile because now is not initialized:
Click here to view code image
Date now;
Date copy = now; // compile-time error: now has not been assigned
When you copy a structure variable, each field on the left side is intialized
directly using the corresponding field on the right side. This copying is done
as a fast, single operation that copies the contents of the entire structure, and
it never throws an exception. Compare this behavior with the equivalent
action if Time were a class, in which case both variables (now and copy)
would end up referencing the same object on the heap.
Note If you are a C++ programmer, you should note that this copy
behavior cannot be customized.
In the final exercise in this chapter, you will contrast the copy behavior of
a structure with that of a class.
Compare the behavior of a structure and a class
1. In the StructsAndEnums project, display the Date.cs file in the Code and
Text Editor window.
Download from finelybook PI:EMAIL
352
2. Add the following method to the Date structure. This method moves the
date in the structure forward by one month. If, after advancing the
month, the value of the month field has moved beyond December, the
code resets the month to January and advances the value of the year
field by 1.
Click here to view code image
struct Date
{
    ...
    public void AdvanceMonth()
    {
        this.month++;
        if (this.month == Month.December + 1)
        {
            this.month = Month.January;
            this.year++;
        }
    }
}
3. Display the Program.cs file in the Code and Text Editor window.
4. In the doWork method, comment out the first two uncommented
statements that create and display the value of the defaultDate variable.
5. Add the following code shown in bold to the end of the doWork method.
This code creates a copy of the weddingAnniversary variable called
weddingAnniversaryCopy and prints out the value of this new variable.
Click here to view code image
static void doWork()
{
    ...
    Date weddingAnniversaryCopy = weddingAnniversary;
    Console.WriteLine($"Value of copy is ");
}
6. Add the following statements shown in bold to the end of the doWork
method. These statements call the AdvanceMonth method of the
weddingAnniversary variable and then display the value of the
weddingAnniversary and weddingAnniversaryCopy variables:
Click here to view code image
static void doWork()
Download from finelybook PI:EMAIL
353
{
    ...
    weddingAnniversary.AdvanceMonth();
    Console.WriteLine($"New value of weddingAnniversary is ");
    Console.WriteLine($"Value of copy is still ");
}
7. On the Debug menu, click Start Without Debugging to build and run the
application. Verify that the console window displays the following
messages:
Click here to view code image
July 4 2017
Value of copy is July 4 2017
New value of weddingAnniversary is August 4 2017
Value of copy is still July 4 2017
The first message displays the initial value of the weddingAnniversary
variable (July 4 2017). The second message displays the value of the
weddingAnniversaryCopy variable. You can see that it contains the same
date held in the weddingAnniversary variable (July 4 2017). The third
message displays the value of the weddingAnniversary variable after
changing the month to August (August 4 2017). The final statement
displays the value of the weddingAnniversaryCopy variable. Notice that
it has not changed from its original value of July 4 2017.
If Date were a class, creating a copy would reference the same object in
memory as the original instance. Changing the month in the original
instance would therefore also change the date referenced through the
copy. You will verify this assertion in the following steps.
8. Press Enter and return to Visual Studio 2017.
9. Display the Date.cs file in the Code and Text Editor window.
10. Change the Date structure to a class, as shown in bold in the following
code example:
Click here to view code image
class Date
{
    ...
}
Download from finelybook PI:EMAIL
354
11. On the Debug menu, click Start Without Debugging to build and run the
application again. Verify that the console window displays the following
messages:
Click here to view code image
July 4 2017
Value of copy is July 4 2017
New value of weddingAnniversary is August 4 2017
Value of copy is still August 4 2017
The first three messages are the same as before. However, the fourth
message shows that the value of the weddingAnniversaryCopy variable
has changed to August 4 2017.
12. Press Enter and return to Visual Studio 2017.
Structures and compatibility with the Windows
Runtime
All C# applications execute by using the common language runtime
(CLR) of the .NET Framework. The CLR is responsible for providing a
safe and secure environment for your application code in the form of a
virtual machine (if you have come from a Java background, this concept
should be familiar to you). When you compile a C# application, the
compiler converts your C# code into a set of instructions using a
pseudo-machine code called the Common Intermediate Language
(CIL). These are the instructions that are stored in an assembly. When
you run a C# application, the CLR takes responsibility for converting
the CIL instructions into real machine instructions that the processor on
your computer can understand and execute. This whole environment is
known as the managed execution environment, and C# programs are
frequently referred to as managed code. You can also write managed
code in other languages supported by the .NET Framework, such as
Visual Basic and F#.
On Windows 7 and earlier versions, you can additionally write
unmanaged applications, also known as native code, based on the
Win32 APIs, which are the APIs that interface directly with the
Windows operating system. (The CLR also converts many of the
Download from finelybook PI:EMAIL
355
functions in the .NET Framework into Win32 API calls if you are
running a managed application, although this process is totally
transparent to your code.) To do this, you can use a language such as
C++. The .NET Framework makes it possible for you to integrate
managed code into unmanaged applications, and vice versa, through a
set of interoperability technologies. Detailing how these technologies
work and how you use them is beyond the scope of this book—suffice
to say that it was not always straightforward.
Later versions of Windows provide an alternative strategy in the
form of the Windows Runtime, or WinRT. WinRT introduces a layer on
top of the Win32 API (and other selected native Windows APIs) that
provides consistent functionality across different types of hardware,
from servers to phones. When you build a Universal Windows Platform
(UWP) app, you use the APIs exposed by WinRT rather than Win32.
Similarly, the CLR on Windows 10 also uses WinRT; all managed code
written by using C# or any other managed language is still executed by
the CLR, but at runtime the CLR converts your code into WinRT API
calls rather than Win32. Between them, the CLR and WinRT are
responsible for managing and running your code safely.
A primary purpose of WinRT is to simplify the interoperability
between languages so that you can more easily integrate components
developed by using different programming languages into a single
seamless application. However, this simplicity comes at a cost, and you
have to be prepared to make a few compromises based on the different
feature sets of the various languages available. In particular, for
historical reasons, although C++ supports structures, it does not
recognize member functions. In C# terms, a member function is an
instance method. So, if you are building C# structures (or structs) that
you want to package up in a library to make available to developers
programming in C++ (or any other unmanaged language), these structs
should not contain any instance methods. The same restriction applies
to static methods in structs. If you want to include instance or static
methods, you should convert your struct into a class. Additionally,
structs cannot contain private fields, and all public fields must be C#
primitive types, conforming value types, or strings.
WinRT also imposes some other restrictions on C# classes and
Download from finelybook PI:EMAIL
356
structs if you want to make them available to native applications.
Chapter 12 provides more information.
Summary
In this chapter, you saw how to create and use enumerations and structures.
You learned some of the similarities and differences between a structure and
a class, and you saw how to define constructors to initialize the fields in a
structure. You also saw how to represent a structure as a string by overriding
the ToString method.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 10, “Using arrays.”
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Declare an
enumeration
Write the keyword enum, followed by the name of the type,
followed by a pair of braces containing a comma-separated
list of the enumeration literal names. For example:
Click here to view code image
enum Season { Spring, Summer, Fall, Winter }
Declare an
enumeration
variable
Write the name of the enumeration on the left followed by
the name of the variable, followed by a semicolon. For
example:
Season currentSeason;
Assign an
enumeration
variable to a
value
Write the name of the enumeration literal in combination
with the name of the enumeration to which it belongs. For
example:
Download from finelybook PI:EMAIL
357
Click here to view code image
currentSeason = Spring; // error
currentSeason = Season.Spring; // correct
Declare a
structure type
Write the keyword struct, followed by the name of the
structure type, followed by the body of the structure (the
constructors, methods, and fields). For example:
Click here to view code image
struct Time
{
    public Time(int hh, int mm, int ss)
    { ... }
    ...
    private int hours, minutes, seconds;
}
Declare a
structure
variable
Write the name of the structure type, followed by the name
of the variable, followed by a semicolon. For example:
Time now;
Initialize a
structure
variable to a
value
Initialize the variable to a structure value created by calling
the structure constructor. For example:
Time lunch = new Time(12, 30, 0);
Download from finelybook PI:EMAIL
358
CHAPTER 10
Using arrays
After completing this chapter, you will be able to:
Declare array variables.
Populate an array with a set of data items.
Access the data items held in an array.
Iterate through the data items in an array.
You have already seen how to create and use variables of many different
types. However, all the examples of variables you have seen so far have one
thing in common—they hold information about a single item (an int, a float, a
Circle, a Date, and so on). What happens if you need to manipulate a set of
items? One solution is to create a variable for each item in the set, but this
leads to some further questions: How many variables do you need? How
should you name them? If you need to perform the same operation on each
item in the set (such as increment each variable in a set of integers), how
would you avoid very repetitive code? Using a variable for separate items
assumes that you know when you write the program, how many items you
will need. But how often is this the case? For example, if you are writing an
application that reads and processes records from a database, how many
records are in the database, and how likely is this number to change?
Arrays provide a mechanism that helps to solve these problems.
Declaring and creating an array
Download from finelybook PI:EMAIL
359
An array is an unordered sequence of items. All the items in an array have
the same type, unlike the fields in a structure or class, which can have
different types. The items in an array live in a contiguous block of memory
and are accessed by using an index, unlike fields in a structure or class, which
are accessed by name.
Declaring array variables
You declare an array variable by specifying the name of the element type,
followed by a pair of square brackets, followed by the variable name. The
square brackets signify that the variable is an array. For example, to declare
an array of int variables named pins (for holding a set of personal
identification numbers), you can write the following:
Click here to view code image
int[] pins; // Personal Identification Numbers
Note If you are a Microsoft Visual Basic programmer, you should
observe that square brackets, not parentheses, are used in the
declaration. If you’re familiar with C and C++, also note that the size of
the array is not part of the declaration. Additionally, the square brackets
must be placed before the variable name.
You are not restricted to using primitive types as array elements. You can
also create arrays of structures, enumerations, and classes. For example, you
can create an array of Date structures like this:
Date[] dates;
Tip It is often useful to give array variables plural names, such as
Download from finelybook PI:EMAIL
360
places (where each element is a Place), people (where each element is a
Person), or times (where each element is a Time).
Creating an array instance
Arrays are reference types, regardless of the type of their elements. This
means that an array variable refers to a contiguous block of memory holding
the array elements on the heap, just as a class variable refers to an object on
the heap. (For a description of values and references and the differences
between the stack and the heap, see Chapter 8, “Understanding values and
references.”) This rule applies regardless of the type of the data items in the
array. Even if the array contains a value type such as int, the memory will
still be allocated on the heap; this is the one case where value types are not
allocated memory on the stack.
Remember that when you declare a class variable, memory is not
allocated for the object until you create the instance by using new. Arrays
follow the same pattern: when you declare an array variable, you do not
declare its size and no memory is allocated (other than to hold the reference
on the stack). The array is given memory only when the instance is created,
and this is also the point at which you specify the size of the array.
To create an array instance, you use the new keyword followed by the
element type, followed by the size of the array you’re creating enclosed
between square brackets. Creating an array also initializes its elements by
using the now familiar default values (0, null, or false, depending on whether
the type is numeric, a reference, or a Boolean, respectively). For example, to
create and initialize a new array of four integers for the pins variable declared
earlier, you write this:
pins = new int[4];
The following illustration shows what happens when you declare an array,
and later when you create an instance of the array:
Download from finelybook PI:EMAIL
361
Because the memory for the array instance is allocated dynamically, the
size of the array does not have to be a constant; it can be calculated at
runtime, as shown in this example:
Click here to view code image
int size = int.Parse(Console.ReadLine());
int[] pins = new int[size];
You can also create an array whose size is 0. This might sound bizarre,
but it’s useful for situations in which the size of the array is determined
dynamically and could even be 0. An array of size 0 is not a null array; it is
an array containing zero elements.
Populating and using an array
When you create an array instance, all the elements of the array are initialized
to a default value depending on their type. For example, all numeric values
default to 0, objects are initialized to null, DateTime values are set to the date
and time “01/01/0001 00:00:00”, and strings are initialized to null. You can
modify this behavior and initialize the elements of an array to specific values
if you prefer. You do this by providing a comma-separated list of values
between a pair of braces. For example, to initialize pins to an array of four int
variables whose values are 9, 3, 7, and 2, you write this:
Click here to view code image
int[] pins = new int[4]{ 9, 3, 7, 2 };
The values between the braces do not have to be constants; they can be
values calculated at runtime, as shown in the following example, which
populates the pins array with four random numbers:
Click here to view code image
Download from finelybook PI:EMAIL
362
Random r = new Random();
int[] pins = new int[4]{ r.Next() % 10, r.Next() % 10, r.Next() % 10,
r.Next() % 10 };
Note The System.Random class is a pseudorandom number generator.
The Next method returns a nonnegative random integer in the range 0 to
Int32.MaxValue by default. The Next method is overloaded, and other
versions enable you to specify the minimum value and maximum value
of the range. The default constructor for the Random class seeds the
random number generator with a time-dependent seed value, which
reduces the possibility of the class duplicating a sequence of random
numbers. Using an overloaded version of the constructor, you can
provide your own seed value. That way, you can generate a repeatable
sequence of random numbers for testing purposes.
The number of values between the braces must exactly match the size of
the array instance being created:
Click here to view code image
int[] pins = new int[3]{ 9, 3, 7, 2 }; // compile-time error
int[] pins = new int[4]{ 9, 3, 7 }; // compile-time error
int[] pins = new int[4]{ 9, 3, 7, 2 }; // OK
When you’re initializing an array variable in this way, you can actually
omit the new expression and the size of the array. In this case, the compiler
calculates the size from the number of initializers and generates code to