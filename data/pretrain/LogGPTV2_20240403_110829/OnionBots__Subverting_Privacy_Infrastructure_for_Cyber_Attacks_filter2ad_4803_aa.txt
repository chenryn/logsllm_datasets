title:OnionBots: Subverting Privacy Infrastructure for Cyber Attacks
author:Amirali Sanatinia and
Guevara Noubir
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
OnionBots: Subverting Privacy Infrastructure
for Cyber Attacks
Amirali Sanatinia, Guevara Noubir
College of Computer and Information Science
Northeastern University, Boston, USA
{amirali,noubir}@ccs.neu.edu
Abstract—Over the last decade botnets survived by adopting
increasingly sophisticated strategies to evade
a sequence of
detection and take overs, and to monetize their infrastructure.
At the same time, the success of privacy infrastructures such
as Tor opened the door to illegal activities, including botnets,
ransomware, and a marketplace for drugs and contraband. We
contend that the next waves of botnets will extensively attempt
to subvert privacy infrastructure and cryptographic mechanisms.
In this work we propose to preemptively investigate the design
and mitigation of such botnets. We ﬁrst, introduce OnionBots,
what we believe will be the next generation of resilient, stealthy
botnets. OnionBots use privacy infrastructures for cyber attacks
by completely decoupling their operation from the infected
host IP address and by carrying trafﬁc that does not leak
information about its source, destination, and nature. Such bots
live symbiotically within the privacy infrastructures to evade
detection, measurement, scale estimation, observation, and in
general all IP-based current mitigation techniques. Furthermore,
we show that with an adequate self-healing network maintenance
scheme, that is simple to implement, OnionBots can achieve a
low diameter and a low degree and be robust to partitioning
under node deletions. We develop a mitigation technique, called
SOAP, that neutralizes the nodes of the basic OnionBots. In light
of the potential of such botnets, we believe that the research
community should proactively develop detection and mitigation
methods to thwart OnionBots, potentially making adjustments to
privacy infrastructure.
I.
INTRODUCTION
Over the last decade botnets rose to be a serious security
threat. They are routinely used for denial of service attacks,
spam, click frauds, and other malicious activities [1]. Both
the research and industry communities invested a signiﬁcant
effort analysing, developing countermeasures, and products
to effectively detect, cripple, and neutralize botnets. While
some countermeasures operate on user computers, most are
deployed at
the ISP and enterprise levels. Many botnets
were successfully neutralized by shutting down or hijacking
their Command and Control (C&C) servers, communications
channels (e.g., IRC), reverse engineering the algorithm used
for the domain name generation (DGA) and preemptively
blocking the access to these domains [2]. Such mitigation
techniques exploit the fact that most current botnets rely on
primitive communication architectures and C&C mechanisms.
This forced botnet developers to continuously adapt raising
the level of sophistication of their design from the early static
and centralized IRC or ﬁxed servers’ IP addresses to more
sophisticated fast-ﬂuxing [3] and even straightforward use of
Tor hidden services [4], [5].
In this paper, we are interested in investigating the next
level of this arm-race. We contend that the next wave of bot-
nets’ sophistication will rely on subverting privacy infrastruc-
ture and a non-trivial use of cryptographic mechanisms. The
Tor project was very successful in building an infrastructure
that protects users identity over the Internet and allowing one to
host Internet servers without revealing her or his location using
the Tor hidden services feature. Evidence of our predictions
can be found in the malicious use of hidden services for
hosting the infamous silk road [6], instances of the Zeus [4]
botnet, and the hosting of the CryptoLocker ransomware C&C
server [7]. Interestingly, CryptoLocker combines Tor with the
use of another privacy “infrastructure”, bitcoin the crypto
currency, for the ransom payment. The combination of Tor
and bitcoin make it possible today to blackmail Internet users,
anonymously be paid, and get away with it.
The current use of Tor and crypto-mechanisms in botnets
is still in its infancy stages. Only hosting the C&C server
as a hidden service still allows the detection, identiﬁcation,
and crippling of the communication between the bots. Recent
research demonstrated that it is possible to successfully deny
access to a single or few .onion server [8]. To assess
the threat of crypto-based botnets, we advocate a preemptive
analysis, understanding of their potential and limitations, and
the development of mitigation techniques.
In this paper, we present the design of a ﬁrst generation of
non-trivial OnionBots. In this Basic OnionBot, communication
is exclusively carried out through hidden services. No bot (not
even the C&C) knows the IP address of any of the other bots.
At any instant, a given bot is only aware of the temporary
.onion address of a very small (constant) number of bots.
Bots relay packets but cannot distinguish the trafﬁc based on
their source, destination, or nature. At the same time, the bot
master is able to access and control any bot, anytime, without
revealing his identity. We show that this design is resilient
to current mitigations and analysis techniques from botnet
mapping, hijacking, to even assessing the size of the botnet.
We also show that the proposed Neighbors-of-Neighbor graph
maintenance algorithm achieves a low diameter, degree, and
high resiliency and repair in the event of a take-down (e.g., Tor
DoSing or node capture/cleanup) of a signiﬁcant fraction of the
botnet nodes. Since our goal is to preemptively prevent the
emergence of OnionBots, we also propose a novel mitigation
technique against the Basic OnionBots. This technique exploits
the same stealthy features of the OnionBot (namely peers not
knowing each other’s identities) to neutralize the bots. The
technique called SOAP, gradually surrounds the bots by clones
(or sybils) until the whole botnet is fully contained. Our goal
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.40
DOI 10.1109/DSN.2015.40
69
69
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:50:16 UTC from IEEE Xplore.  Restrictions apply. 
is to draw the attention of the community to the potential of
OnionBots and develop preemptive measures to contain them
and ideally prevent their occurence.
Our contributions are summarized as follows:
•
A novel reference design for a OnionBotnet whose
command, communication, and management are fully
anonymized within the Tor privacy infrastructure.
A communication topology with repair mechanisms
that minimizes the nodes’ degree, graph diameter, and
maximizes resiliency.
A performance evaluation and discussion of resiliency
to various takedown attacks such as simultaneous
denial of service attacks against multiple .onion
botnet nodes.
A Sybil mitigation technique, SOAP, that neutralizes
each bot by surrounding it by clones.
•
•
•
We ﬁrst survey the current state of botnet design and
mitigation techniques in Section II, followed by a review of
the key features of the Tor privacy infrastructure in Section III.
In Section IV, we present our proposed reference design for
an OnionBotnet. We evaluate the resiliency and performance
of the OnionBotnet, using several metrics in Section V. We
ﬁnally investigate potential mechanisms to prevent the rise of
such botnets in Section VI.
II. CURRENT BOTNETS & MITIGATIONS
We ﬁrst review the evolution of botnets and why we
believe the next generation of botnets would subvert privacy
infrastructures to evade detection and mitigation. Currently,
bots are monitored and controlled by a botmaster, who issues
commands. The transmission of theses commands, which are
known as C&C messages, can be centralized, peer-to-peer or
hybrid [9]. In the centralized architecture the bots contact the
C&C servers to receive instructions from the botmaster. In this
construction the message propagation speed and convergence
is faster, compared to the other architectures. It is easy to
implement, maintain and monitor. However, it is limited by a
single point of failure. Such botnets can be disrupted by taking
down or blocking access to the C&C server. Many centralized
botnets use IRC or HTTP as their communication channel. GT-
Bots, Agobot/Phatbot [10], and clickbot.a [11] are examples
of such botnets. A signiﬁcant amount of research focused on
detecting and blocking them [12], [13], [14], [15], [16], [17].
To evade detection and mitigation, attackers developed more
sophisticated techniques to dynamically change the C&C
servers, such as: Domain Generation Algorithm (DGA) and
fast-ﬂuxing (single ﬂux, double ﬂux).
Single-ﬂuxing is a special case of fast-ﬂux method. It maps
multiple (hundreds or even thousands) IP addresses to a do-
main name. These IP addresses are registered and de-registered
at rapid speed, therefore the name fast-ﬂux. These IPs are
mapped to particular domain names (e.g., DNS A records) with
very short TTL values in a round robin fashion [3]. Double-
ﬂuxing is an evolution of single-ﬂux technique, it ﬂuxes both
IP addresses of the associated fully qualiﬁed domain names
(FQDN) and the IP addresses of the responsible DNS servers
(NS records). These DNS servers are then used to translate the
7070
FQDNs to their corresponding IP addresses. This technique
provides an additional level of protection and redundancy [3].
Domain Generation Algorithms (DGA), are the algorithms
used to generate a list of domains for botnets to contact their
C&C. The large number of possible domain names makes it
difﬁcult for law enforcements to shut them down. Torpig [18]
and Conﬁcker [19] are famous examples of such botnets.
A signiﬁcant amount of research focuses on the de-
tection of malicious activities from the network perspec-
tive,
since the trafﬁc is not anonymized. For exam-
ple [20], [21], [22], [23], [24], [25] inspect the DNS trafﬁc and
use machine learning clustering and classiﬁcation algorithms.
BotFinder [26] uses the high-level properties of the bot’s
network trafﬁc and employs machine learning to identify the
key features of C&C communications. DISCLOSURE [27]
uses features from NetFlow data (e.g., ﬂow sizes, client access
patterns, and temporal behavior) to distinguish C&C channels.
Other work [28], [29] focus on endpoints’ static metadata
properties and the order of the high-level system events for
threat classiﬁcation.
The next step in the arms race between attackers and
defenders was moving from a centralized scheme to a peer-
to-peer C&C. Storm [30], Nugache [31], Walowdac [32] and
Gameover Zeus [33] are examples of such botnets. Some of
these botnets use an already existing peer-to-peer protocol,
while others use customized protocols. For example, earlier
versions of Storm used Overnet, and the new versions use a
customized version of Overnet, called Stormnet [30]. Mean-
while other botnets such as Walowdac and Gameover Zeus
organize their communication channels in different layers.
Previous work studied speciﬁc mitigations against peer-
to-peer botnets. For example, BotGrep [34] uses the unique
communication patterns in a botnet to localize its members by
employing structured graph analysis. Zhang et al. [35] propose
a technique to detect botnet P2P communication by ﬁnger-
printing the malicious and benign trafﬁc. Yen and Reiter [36]
use three features (peer churn, trafﬁc volume and differences
between human-driven and bot-driven behavior) in network
ﬂow to detect malicious activity. Coskun et al. [37] propose a
method to detect the local members of an unstructured botnet
by using the mutual contacts. As we can see, some of these
techniques rely on observing the unencrypted trafﬁc, therefore
by using a privacy infrastructure such as Tor they can be
evaded.
Very recently the use of Tor received more attention from
malware and botnet authors. For example,
the new 64-bit
Zeus employs Tor anonymity network in its botnet infras-
tructure [4]. It creates a Tor hidden service on the infected
host and the C&C can reach these infected hosts using their
unique .onion address through Tor. Another example is
ChewBacca [5], which uses Tor, and logs the keystrokes of
the infected host and reports them back to the botmaster. The
C&C is an HTTP server that is hosted as a hidden service.
Although using Tor and hidden services makes the detection
and mitigation more difﬁcult, these bots are still using the basic
client-server model. This leaves them open to single point of
failure.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:50:16 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: Tor hidden service structure
III. PRIVACY INFRASTRUCTURE: TOR
We envision OnionBots to rely on Tor for their operation.
To better understand their potential and limitations, we brieﬂy
review the structure of Tor and hidden services. Tor [38] is the
most widely used distributed low-latency anonymity-network.
It helps users to resist censorship, and protects their personal
privacy. Furthermore, it allows users to hide their activities
and location from government agencies and corporations.
Clients establish anonymous communication by relaying
their trafﬁc through other Tor relays, called Onion Routers
(OR). A client builds a circuit with the relays by negotiating
symmetric keys with them. After building the circuit,
the
client sends the data in ﬁxed sized cells and encrypts
them in multiple layers, using the previously negotiated keys.
Besides providing anonymous communication for clients,
current
implementation of Tor also offers anonymity for
servers through hidden services.
The Tor hidden service architecture is composed of the
following components:
•
•