edb=# SELECT * FROM inventory WHERE item_id = 1;
item_id | name | quantity
---------+----------------------+----------
1 | LaserJet Printer 610 | 48
(1 row)
Also assume one item with item_id of 1 is purchased from the second master node:
mmrnode=# UPDATE inventory SET quantity = quantity - 1 WHERE item_id = 1;
UPDATE 1
mmrnode=# SELECT * FROM inventory WHERE item_id = 1;
item_id | name | quantity
---------+----------------------+----------
1 | LaserJet Printer 610 | 49
(1 row)
After the synchronization replication and invocation of the custom conflict handling
function, the quantity column for item_id 1 is correctly set to 47 in both master
nodes:
edb=# SELECT * FROM inventory WHERE item_id = 1;
item_id | name | quantity
---------+----------------------+----------
1 | LaserJet Printer 610 | 47
(1 row)
edb=# \c mmrnode mmruser
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 316
EDB Postgres Replication Server User’s Guide
Password for user mmruser:
You are now connected to database "mmrnode" as user "mmruser".
mmrnode=# SET search_path TO edb;
SET
mmrnode=# SELECT * FROM inventory WHERE item_id = 1;
item_id | name | quantity
---------+----------------------+----------
1 | LaserJet Printer 610 | 47
(1 row)
6.6.9 Manual Conflict Resolution for the Trigger-Based Method
Note: The manual conflict resolution discussion in this section applies only to multi-
master replication systems configured with the trigger-based method of synchronization
replication. See Section 6.6.10 for information on manual conflict resolution for multi-
master replication systems configured with the log-based method of synchronization
replication.
As discussed in Section 6.6.5 there is no built-in, automatic conflict resolution strategy
for the uniqueness (insert/insert) conflict. If a uniqueness conflict occurs, then you must
modify rows in the publication tables containing the conflict as well as modify rows in
the control schema tables in the master nodes to resolve the conflict.
Similarly, manual correction must be used for update/delete and delete/update conflicts.
In addition, if the conflict resolution option is set to Manual (see Section 6.8) and a
conflict occurs, this conflict must also be resolved in a manual fashion.
This section describes the updates you must make to the publication tables and the
control schema tables in the master nodes.
This discussion is divided into the following topics:
 Finding Conflicts. Locating unresolved conflicts
 Conflict Resolution Preparation. Helpful setup steps to aid in the manual
conflict resolution process
 Overview of Correction Strategies. Overview of the methods you can use to
perform the corrections
 Manual Publication Table Correction. Manual correction of the publication
tables
 Correction Using New Transactions. Using new transactions to bring all master
nodes to a consistent state
 Correction Using Shadow Table Transactions. Using existing shadow table
transactions to bring all master nodes to a consistent state
The following sections describe these topics in detail.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 317
EDB Postgres Replication Server User’s Guide
6.6.9.1 Finding Conflicts
Conflicts can be found using the Conflict History tab as described in Section 6.7. The
following is an example of the Conflict History tab. Click the Refresh button to reveal all
of the latest conflicts.
Figure 6-32 - Conflict History tab for trigger-based method
The Source DB and Target DB columns provide the IP address and database names of the
source and target master nodes involved in the conflict.
Click the View Data link to show the details of the transactions involved in a particular
conflict as shown by the following:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 318
EDB Postgres Replication Server User’s Guide
Figure 6-33 - Conflict Details window
You can also obtain this information from a SQL query rather than from the xDB
Replication Console graphical user interface. The following query can be run from a
master node to display information regarding pending (unresolved) conflicts:
SELECT DISTINCT
conflict_type,
table_name,
pk_value,
d1.db_host AS src_db_host,
d1.db_port AS src_db_port,
d1.db_name AS src_db_name,
src_rrep_sync_id,
d2.db_host AS target_db_host,
d2.db_port AS target_db_port,
d2.db_name AS target_db_name,
target_rrep_sync_id,
c.notes
FROM _edb_replicator_pub.xdb_conflicts c
JOIN _edb_replicator_pub.xdb_pub_database d1 ON c.src_db_id = d1.pub_db_id
JOIN _edb_replicator_pub.xdb_pub_database d2 ON c.target_db_id = d2.pub_db_id
JOIN _edb_replicator_pub.rrep_tables t ON c.table_id = t.table_id
WHERE resolution_status = 'P'
ORDER BY t.table_name;
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 319
EDB Postgres Replication Server User’s Guide
Example output from the query is shown by the following:
-[ RECORD 1 ]-------+----------------------------------------------------------------
conflict_type | II
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | edb
src_rrep_sync_id | 2
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode
target_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
-[ RECORD 2 ]-------+----------------------------------------------------------------
conflict_type | II
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | mmrnode
src_rrep_sync_id | 1
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | edb
target_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
-[ RECORD 3 ]-------+----------------------------------------------------------------
conflict_type | DU
table_name | emp
pk_value |
src_db_host | 192.168.2.22
src_db_port | 5444
src_db_name | edb
src_rrep_sync_id | 5
target_db_host | 192.168.2.22
target_db_port | 5444
target_db_name | mmrnode
target_rrep_sync_id | 4
notes |
6.6.9.2 Conflict Resolution Preparation
The following describes the setup of a database user with certain properties enabling you
to modify the publication table rows for the purpose of manual conflict resolution.
Manual conflict resolution typically requires modification of rows in one or more
publication tables to correct erroneous entries. Such changes can be done using a utility
such as PSQL or pgAdmin (Postgres Enterprise Manager Client in Advanced Server).
Manual publication table corrections must usually be isolated – that is, these
modifications must be limited to the publication tables you are directly changing
and must not be replicated to the other master nodes as would normally occur in the
multi-master replication system.
To prevent replication of changes to a publication table from occurring, the xDB
Replication Server insert, update, and delete triggers on the publication tables must be
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 320
EDB Postgres Replication Server User’s Guide
prevented from firing when you make these corrections to the publication table rows. If
any of the insert, update, or delete triggers fire, an entry is added to the publication
table’s shadow table. This entry results in a transaction replicated to the other master
nodes the next time synchronization replication occurs.
To prevent the triggers on the publication tables from firing, during the session in which
you modify the publication table rows, the database server configuration parameter
session_replication_role must be set to a value of replica. (The default setting
of session_replication_role is origin in which case the triggers will fire.)
The suggested method to ensure the replica setting is in effect is to create a database
user with a default session setting of replica for this parameter. Whenever you connect
to a database with this database user, the replica setting will be in effect during this
session.
Connect to a master node with this database user whenever you plan to make manual
corrections to the publication tables in that particular node that are not to be replicated to
the other master nodes.
In the following example database superuser mmrmaint is created and altered for this
purpose:
mmrnode_a=# CREATE ROLE mmrmaint WITH LOGIN SUPERUSER PASSWORD 'password';
CREATE ROLE
mmrnode_a=# ALTER ROLE mmrmaint SET session_replication_role TO replica;
ALTER ROLE
When connected to a database with this database user, you can confirm this setting is in
effect during the session by issuing the following command:
mmrnode_a=# SHOW session_replication_role;
session_replication_role
--------------------------
replica
(1 row)
6.6.9.3 Overview of Correction Strategies
Before you begin manual resolution correction, it is important to determine the extent of
the inconsistencies that may have occurred in the publication tables across the master
nodes of the replication system.
The Conflict History tab and the SQL query described in Section 6.6.9.1 can help
determine the source of an initial conflict.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 321
EDB Postgres Replication Server User’s Guide
However, once this conflict has occurred, your replication system may have processed
and replicated additional transactions during that synchronization operation. Some of
these subsequent replications may have succeeded as expected, but others may have
failed or produced unexpected results as a consequence of the prior conflict.
If you have a replication schedule in effect, additional synchronization operations can
occur, which may create additional conflicts.
Therefore, when you have discovered that a conflict has occurred, it is strongly
recommended that you stop the publication server. Use the stop option of the Linux
scripts or Windows services described in Step 1 of Section 5.2.1.
In this way, you can carefully analyze the content of the publication tables in question as
well as any pending transactions in the shadow tables to determine the best course of
action to take without the interference of continuing updates by a running replication
system.
When analyzing your tables you must determine the following:
 Which publication tables contain inconsistent rows across master nodes (that is,
missing rows on some master nodes, or rows with different column values for the
same primary key on different master nodes).
 Which pending transactions in the shadow tables have not been applied to the
publication tables across all master nodes. Pending transactions are denoted by a
value of P in the rrep_tx_conflict_status column of the shadow table.
 Which transactions on the publication tables have occurred and are recorded in
the shadow tables following the initial conflict, and whether or not these
transactions have been applied completely and correctly to the publication tables
across all master nodes. These transactions may not be marked as pending.
Instead their rrep_tx_conflict_status column could be set to null meaning
that no specific conflict was detected during replication, or the transaction has not
yet been replicated. These transactions can be identified because they have a later
rrep_tx_timestamp value than the transactions causing the initial conflict.
The general steps to resolving the problem following this analysis are the following:
Step 1: Make the necessary manual corrections to the rows in the publication tables
across all master nodes to get them into an initial, consistent state so each publication
table has the same set of identical rows across master nodes. This may be to a state before
the conflicting transactions occurred, depending upon what you determine to be the
easiest course of action for fully resolving the conflict.
Step 2: Apply or reapply transactions (either from your application or from the shadow
tables) so that all publication tables across all master nodes are updated consistently
according to the desired, expected result of what has been recorded in the shadow tables.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 322
EDB Postgres Replication Server User’s Guide
Step 3: In the shadow tables, update certain indicators for conflicting entries to show that
these were resolved in Step 2.
Step 4: In the control schema, update certain indicators for the conflicting entries to show
that these conflicts have been resolved. This update changes the Resolution Status of
these entries to Resolved in the Conflict History tab. These entries will no longer appear
in the SQL query described in Section 6.6.9.1.
Perform the Step 4 updates to the control schema of the controller database. The
currently designated controller database can be determined from the content of the
xDB Replication Configuration file (see Section 2.3.1.3). The publication server
ensures that the control schema changes made on the controller database are
replicated to the control schemas of all publication databases to maintain metadata
consistency across all publication databases.
Step 5: Resume operation of your replication system. Start the publication server and
recreate the replication schedule if you were using one.
For accomplishing steps 1 and 2, use some combination of the following methods. Which
methods you use depend upon the state of your publication tables and the extent of
pending transactions that need to be applied from the shadow tables.
 Manual Publication Table Correction. Use a utility such as PSQL or pgAdmin
(Postgres Enterprise Manager Client in Advanced Server) to manually correct the
rows in the publication tables across all master nodes without replicating these
changes. Use the database user with session_replication_role set to
replica for this purpose.
 Correction Using New Transactions. Rerun your application on one master
node to create new transactions that you will allow to replicate to all other master
nodes. Use this method after you have ensured that all publication tables are in a
consistent state across all master nodes.
 Correction Using Shadow Table Transactions. Force the synchronization of
transactions already recorded in the shadow tables. Use this method if there are
many shadow table transactions that need to be applied, and it is simpler to force
the synchronization of these transactions rather than reissuing the transactions
from your application.
Each of these methods is described in more detail in the following sections.
For purposes of illustration, the following replication environment is used.
 A 3-node multi-master replication system has been established. The master node
names are mmrnode_a (the master definition node and the controller database),
mmrnode_b, and mmrnode_c.
 The publication is named emp_pub and uses the dept and emp tables that have
been used as examples throughout this document.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 323
EDB Postgres Replication Server User’s Guide
 The conflict used to illustrate the first two conflict resolution methods is a
uniqueness conflict occurring on the dept table on primary key column deptno
on value 50 resulting from the INSERT statements shown by the following:
On mmrnode_a, the following statement is run:
INSERT INTO dept VALUES (50, 'FINANCE', 'CHICAGO');
On mmrnode_b, the following statement is run:
INSERT INTO dept VALUES (50, 'MARKETING', 'LOS ANGELES');
A synchronization replication is then performed.
The following is the content of table dept on mmrnode_a:
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | FINANCE | CHICAGO
(5 rows)
The following is the content of table dept on mmrnode_b:
mmrnode_b=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
The following is the content of table dept on mmrnode_c:
mmrnode_c=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
The Conflict History tab shows the following entry:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 324
EDB Postgres Replication Server User’s Guide
Figure 6-34 – Conflict History tab with a uniqueness conflict
The following is the output from the SQL query described in Section 6.6.9.1.
-[ RECORD 1 ]-------+----------------------------------------------------------------
conflict_type | II
table_name | dept
pk_value | deptno=50
src_db_host | 192.168.2.22
src_db_port | 5444