### Manual Conflict Resolution for the Trigger-Based Method

**Note:** The manual conflict resolution process discussed here applies only to multi-master replication systems configured with the trigger-based method of synchronization. For information on log-based synchronization, refer to Section 6.6.10.

#### 6.6.9.1 Finding Conflicts
Conflicts can be identified using the **Conflict History** tab in the xDB Replication Console, as described in Section 6.7. This tab displays a list of all unresolved conflicts. To view the details of a specific conflict, click the **View Data** link.

Alternatively, you can use a SQL query to find pending (unresolved) conflicts. The following query can be executed from any master node:

```sql
SELECT DISTINCT
    conflict_type,
    table_name,
    pk_value,
    d1.db_host AS src_db_host,
    d1.db_port AS src_db_port,
    d1.db_name AS src_db_name,
    src_rrep_sync_id,
    d2.db_host AS target_db_host,
    d2.db_port AS target_db_port,
    d2.db_name AS target_db_name,
    target_rrep_sync_id,
    c.notes
FROM _edb_replicator_pub.xdb_conflicts c
JOIN _edb_replicator_pub.xdb_pub_database d1 ON c.src_db_id = d1.pub_db_id
JOIN _edb_replicator_pub.xdb_pub_database d2 ON c.target_db_id = d2.pub_db_id
JOIN _edb_replicator_pub.rrep_tables t ON c.table_id = t.table_id
WHERE resolution_status = 'P'
ORDER BY t.table_name;
```

Example output from the query might look like this:

| conflict_type | table_name | pk_value     | src_db_host | src_db_port | src_db_name | src_rrep_sync_id | target_db_host | target_db_port | target_db_name | target_rrep_sync_id | notes                                                                 |
|---------------|------------|--------------|-------------|-------------|-------------|------------------|----------------|----------------|----------------|---------------------|-----------------------------------------------------------------------|
| II            | dept       | deptno=50    | 192.168.2.22| 5444        | edb         | 2                | 192.168.2.22   | 5444           | mmrnode       | 0                   | ERROR: duplicate key value violates unique constraint "dept_pk"       |
| II            | dept       | deptno=50    | 192.168.2.22| 5444        | mmrnode     | 1                | 192.168.2.22   | 5444           | edb           | 0                   | ERROR: duplicate key value violates unique constraint "dept_pk"       |
| DU            | emp        |              | 192.168.2.22| 5444        | edb         | 5                | 192.168.2.22   | 5444           | mmrnode       | 4                   |                                                                       |

#### 6.6.9.2 Conflict Resolution Preparation
To prepare for manual conflict resolution, you need to set up a database user with specific properties. This user will be used to modify publication table rows without triggering the replication process.

1. **Create a Database User:**
   ```sql
   CREATE ROLE mmrmaint WITH LOGIN SUPERUSER PASSWORD 'password';
   ```

2. **Set the `session_replication_role` to `replica`:**
   ```sql
   ALTER ROLE mmrmaint SET session_replication_role TO replica;
   ```

3. **Verify the Setting:**
   ```sql
   SHOW session_replication_role;
   ```
   Expected output:
   ```
   session_replication_role
   --------------------------
   replica
   (1 row)
   ```

When connected to a database with this user, the `session_replication_role` is set to `replica`, preventing triggers from firing and thus avoiding unwanted replication.

#### 6.6.9.3 Overview of Correction Strategies
Before starting the manual resolution, it's crucial to understand the extent of inconsistencies across the master nodes. Use the **Conflict History** tab and the SQL query to identify the initial conflict and subsequent issues.

**Steps to Resolve the Problem:**

1. **Stop the Publication Server:**
   - Use the stop option of the Linux scripts or Windows services as described in Step 1 of Section 5.2.1.

2. **Analyze the Tables:**
   - Identify inconsistent rows in the publication tables.
   - Determine which transactions in the shadow tables are pending (denoted by `P` in the `rrep_tx_conflict_status` column).
   - Identify transactions that have occurred after the initial conflict and their application status.

3. **Make Manual Corrections:**
   - Correct the rows in the publication tables across all master nodes to achieve a consistent state.
   - Apply or reapply transactions to ensure consistency across all master nodes.

4. **Update Indicators:**
   - In the shadow tables, update indicators for conflicting entries to show they have been resolved.
   - In the control schema, update indicators to mark conflicts as resolved, changing the `Resolution Status` to `Resolved`.

5. **Resume Replication:**
   - Start the publication server and recreate the replication schedule if needed.

#### Example Scenario
Consider a 3-node multi-master replication system with master nodes `mmrnode_a`, `mmrnode_b`, and `mmrnode_c`. The publication `emp_pub` uses the `dept` and `emp` tables. A uniqueness conflict occurs on the `dept` table for `deptno = 50` due to concurrent inserts on different nodes.

**Content of `dept` table:**

- **`mmrnode_a`:**
  ```sql
  SELECT * FROM dept;
  deptno | dname     | loc
  --------+-----------+---------
  10      | ACCOUNTING| NEW YORK
  20      | RESEARCH  | DALLAS
  30      | SALES     | CHICAGO
  40      | OPERATIONS| BOSTON
  50      | FINANCE   | CHICAGO
  (5 rows)
  ```

- **`mmrnode_b`:**
  ```sql
  SELECT * FROM dept;
  deptno | dname     | loc
  --------+-----------+--------------
  10      | ACCOUNTING| NEW YORK
  20      | RESEARCH  | DALLAS
  30      | SALES     | CHICAGO
  40      | OPERATIONS| BOSTON
  50      | MARKETING | LOS ANGELES
  (5 rows)
  ```

- **`mmrnode_c`:**
  ```sql
  SELECT * FROM dept;
  deptno | dname     | loc
  --------+-----------+---------
  10      | ACCOUNTING| NEW YORK
  20      | RESEARCH  | DALLAS
  30      | SALES     | CHICAGO
  40      | OPERATIONS| BOSTON
  (4 rows)
  ```

**Conflict History Tab:**
- Shows a uniqueness conflict on `deptno = 50`.

**SQL Query Output:**
- Displays the conflicting entries and their details.

By following the steps outlined, you can resolve the conflict and ensure data consistency across all master nodes.