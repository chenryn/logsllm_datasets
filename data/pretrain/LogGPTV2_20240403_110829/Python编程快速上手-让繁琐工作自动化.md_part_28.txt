quizFile.close()
answerKeyFile.close()
一个遍历整数0到3的for循环，将答案选项写入answerOptions列表。处
的表达式'ABCD'[i]将字符串'ABCD'看成是一个数组，它在循环的每次迭代中，将分
别求值为'A'、'B'、'C'和'D'。
在最后一行，表达式 answerOptions.index(correctAnswer)将在随机排序的答案
选项中，找到正确答案的整数下标，并且'ABCD'[answerOptions.index(correctAnswer)]
将求值为正确答案的字母，写入到答案文件中。
在运行该程序后，下面就是capitalsquiz1.txt文件看起来的样子。但是，你的问
题和答案选项当然与这里显示的可能会不同。这取决于random.shuffle()调用的结果：
Name:
Date:
Period:
State Capitals Quiz (Form 1)
1. What is the capital of West Virginia?
A. Hartford
B. Santa Fe
C. Harrisburg
D. Charleston
2. What is the capital of Colorado?
A. Raleigh
B. Harrisburg
C. Denver
D. Lincoln
--snip--
对应的capitalsquiz_answers1.txt文本文件看起来像这样：
152 Python编程快速上手——让繁琐工作自动化
1. D
2. C
3. A
4. C
--snip--
8.6 项目：多重剪贴板
假定你有一个无聊的任务，要填充一个网页或软件中的许多表格，其中包含一
些文本字段。剪贴板让你不必一次又一次输入同样的文本，但剪贴板上一次只有一
个内容。如果你有几段不同的文本需要拷贝粘贴，就不得不一次又一次的标记和拷
贝几个同样的内容。
可以编写一个 Python 程序，追踪几段文本。这个“多重剪贴板”将被命名为
mcb.pyw（因为“mcb”比输入“multiclipboard”更简单）。.pyw扩展名意味着Python
运行该程序时，不会显示终端窗口（详细内容请参考附录B）。
该程序将利用一个关键字保存每段剪贴板文本。例如，当运行py mcb.pyw save
spam，剪贴板中当前的内容就用关键字spam保存。通过运行py mcb.pyw spam，这
段文本稍后将重新加载到剪贴板中。如果用户忘记了都有哪些关键字，他们可以运
行py mcb.pyw list，将所有关键字的列表复制到剪贴板中。
下面是程序要做的事：
• 针对要检查的关键字，提供命令行参数。
• 如果参数是save，那么将剪贴板的内容保存到关键字。
• 如果参数是list，就将所有的关键字拷贝到剪贴板。
• 否则，就将关键词对应的文本拷贝到剪贴板。
这意味着代码需要做下列事情：
• 从sys.argv读取命令行参数。
• 读写剪贴板。
• 保存并加载shelf文件。
如果你使用 Windows，可以创建一个名为 mcb.bat 的批处理文件，很容易地通
过“Run…”窗口运行这个脚本。该批处理文件包含如下内容：
@pyw.exe C:\Python34\mcb.pyw %*
第1步：注释和shelf 设置
我们从一个脚本框架开始，其中包含一些注释和基本设置。让你的代码看起来
像这样：
#! python3
# mcb.pyw - Saves and loads pieces of text to the clipboard.
 # Usage: py.exe mcb.pyw save  - Saves clipboard to keyword.
# py.exe mcb.pyw  - Loads keyword to clipboard.
第8章 读写文件 153
# py.exe mcb.pyw list - Loads all keywords to clipboard.
 import shelve, pyperclip, sys
 mcbShelf = shelve.open('mcb')
# TODO: Save clipboard content.
# TODO: List keywords and load content.
m cbShelf.close()
将一般用法信息放在文件顶部的注释中，这是常见的做法。如果忘了如何运
行这个脚本，就可以看看这些注释，帮助回忆起来。然后导入模块。拷贝和粘贴
需要pyperclip模块，读取命令行参数需要sys模块。shelve模块也需要准备好。当
用户希望保存一段剪贴板文本时，你需要将它保存到一个 shelf 文件中。然后，当
用户希望将文本拷贝回剪贴板时，你需要打开shelf文件，将它重新加载到程序中。
这个shlef文件命名时带有前缀mcb。
第2步：用一个关键字保存剪贴板内容
根据用户希望保存文本到一个关键字，或加载文本到剪贴板，或列出已有的关键
字，该程序做的事情不一样。让我们来处理第一种情况。让你的代码看起来像这样：
#! python3
# mcb.pyw - Saves and loads pieces of text to the clipboard.
--snip--
# Save clipboard content.
 if len(sys.argv) == 3 and sys.argv[1].lower() == 'save':
 mcbShelf[sys.argv[2]] = pyperclip.paste()
elif len(sys.argv) == 2:
 # TODO: List keywords and load content.
m cbShelf.close()
如果第一个命令行参数（它总是在sys.argv列表的下标1处）是字符串'save' ，
第二个命令行参数就是保存剪贴板当前内容的关键字。关键字将用做 mcbShelf中的
键，值就是当前剪贴板上的文本。
如果只有一个命令行参数，就假定它要么是'list'，要么是需要加载到剪贴板的
关键字。稍后你将实现这些代码。现在只是放上一条TODO注释。
第3步：列出关键字和加载关键字的内容
最后，让我们实现剩下的两种情况。用户希望从关键字加载剪贴板文本，或希
望列出所有可用的关键字。让你的代码看起来像这样：
#! python3
# mcb.pyw - Saves and loads pieces of text to the clipboard.
--snip--
154 Python编程快速上手——让繁琐工作自动化
# Save clipboard content.
if len(sys.argv) == 3 and sys.argv[1].lower() == 'save':
mcbShelf[sys.argv[2]] = pyperclip.paste()
elif len(sys.argv) == 2:
# List keywords and load content.
 if sys.argv[1].lower() == 'list':
 pyperclip.copy(str(list(mcbShelf.keys())))
elif sys.argv[1] in mcbShelf:
 pyperclip.copy(mcbShelf[sys.argv[1]])
m cbShelf.close()
如果只有一个命令行参数，首先检查它是不是'list' 。如果是，表示shelf键的
列表的字符串将被拷贝到剪贴板。用户可以将这个列表拷贝到一个打开的文本编
辑器，进行查看。
否则，你可以假定该命令行参数是一个关键字。如果这个关键字是 shelf 中的
一个键，就可以将对应的值加载到剪贴板。
齐活了！加载这个程序有几个不同步骤，这取决于你的计算机使用哪种操作系
统。请查看附录B，了解操作系统的详情。
回忆一下第6章中创建的口令保管箱程序，它将口令保存在一个字典中。更新
口令需要更改该程序的源代码。这不太理想，因为普通用户不太适应通过更改源代
码来更新他们的软件。而且，每次修改程序的源代码时，就有可能不小心引入新的
缺陷。将程序的数据保存在不同的地方，而不是在代码中，就可以让别人更容易使
用你的程序，并且更不容易出错。
8.7 小结
文件被组织在文件夹中（也称为目录），路径描述了一个文件的位置。运行在计算
机上的每个程序都有一个当前工作目录，它让你相对于当前的位置指定文件路径，而
非总是需要完整路径（绝对路径）。os.path模块包含许多函数，用于操作文件路径。
你的程序也可以直接操作文本文件的内容。open()函数将打开这些文件，将它
们的内容读取为一个大字符串（利用reae()方法），或读取为字符串的列表（利用方
法 readlines()）。Open()函数可以将文件以写模式或添加模式打开，分别创建新的文
本文件或在原有的文本文件中添加内容。
在前面几章中，你利用剪贴板在程序中获得大量文本，而不是通过手工输入。现
在你可以用程序直接读取硬盘上的文件，这是一大进步。因为文件比剪贴板更不易变
化。在下一章中，你将学习如何处理文件本身，包括复制、删除、重命名、移动等。
8.8 习题
1．相对路径是相对于什么？
2．绝对路径从什么开始？
第8章 读写文件 155
3．os.getcwd()和os.chdir()函数做什么事？
4．.和..文件夹是什么？
5．在C:\bacon\eggs\spam.txt中，哪一部分是目录名称，哪一部分是基本名称？
6．可以传递给open()函数的3种“模式”参数是什么？
7．如果已有的文件以写模式打开，会发生什么？
8．read()和readlines()方法之间的区别是什么？
9．shelf值与什么数据结构相似？
8.9 实践项目
作为实践，设计并编写下列程序。
8.9.1 扩展多重剪贴板
扩展本章中的多重剪贴板程序，增加一个 delete 命令行参数，它将
从shelf中删除一个关键字。然后添加一个delete命令行参数，它将删除所有关键字。
8.9.2 疯狂填词
创建一个疯狂填词（Mad Libs）程序，它将读入文本文件，并让用户在该文本
文件中出现ADJECTIVE、NOUN、ADVERB或VERB等单词的地方，加上他们自
己的文本。例如，一个文本文件可能看起来像这样：
The ADJECTIVE panda walked to the NOUN and then VERB. A nearby NOUN was
unaffected by these events.
程序将找到这些出现的单词，并提示用户取代它们。
Enter an adjective:
silly
Enter a noun:
chandelier
Enter a verb:
screamed
Enter a noun:
pickup truck
以下的文本文件将被创建：
The silly panda walked to the chandelier and then screamed. A nearby pickup
truck was unaffected by these events.
结果应该打印到屏幕上，并保存为一个新的文本文件。
8.9.3 正则表达式查找
编写一个程序，打开文件夹中所有的.txt 文件，查找匹配用户提供的正则表达
式的所有行。结果应该打印到屏幕上。
156 Python编程快速上手——让繁琐工作自动化
9
第 章
组 织 文 件
在上一章中，你学习了如何用Python创建并写入新文件。
你的程序也可以组织硬盘上已经存在的文件。也许你曾经经历
过查找一个文件夹，里面有几十个、几百个，甚至上千个文件，
需要手工进行复制、改名、移动或压缩。或者考虑下面这样的
任务：
• 在一个文件夹及其所有子文件夹中，复制所有的 pdf 文件
（且只复制pdf文件）
• 针对一个文件夹中的所有文件，删除文件名中前导的零，该文件夹中有数百个
文件，名为spam001.txt、spam002.txt、spam003.txt等。
• 将几个文件夹的内容压缩到一个ZIP文件中（这可能是一个简单的备份系统）
所有这种无聊的任务，正是在请求用Python实现自动化。通过对电脑编程来完
成这些任务，你就把它变成了一个快速工作的文件职员，而且从不犯错。
在开始处理文件时你会发现，如果能够很快查看文件的扩展名（.txt、.pdf、.jpg
等），是很有帮助的。在OS X和Linux上，文件浏览器很有可能自动显示扩展名。
在Windows上，文件扩展名可能默认是隐藏的。要显示扩展名，请点开StartControl
PanelAppearance 和 PersonalizationFolder 选项。在 View 选项卡中，Advanced
Settings之下，取消Hide extensions for known file types复选框。
9.1 shutil 模块
shutil（或称为shell工具）模块中包含一些函数，让你在Python程序中复制、
移动、改名和删除文件。要使用shutil的函数，首先需要import shutil。
9.1.1 复制文件和文件夹
shutil模块提供了一些函数，用于复制文件和整个文件夹。
调用shutil.copy(source, destination)，将路径source处的文件复制到路径destination
处的文件夹（source和destination都是字符串）。如果destination是一个文件名，它将
作为被复制文件的新名字。该函数返回一个字符串，表示被复制文件的路径。
在交互式环境中输入以下代码，看看shutil.copy()的效果：
>>> import shutil, os
>>> os.chdir('C:\\')
 >>> shutil.copy('C:\\spam.txt', 'C:\\delicious')
'C:\\delicious\\spam.txt'
 >>> shutil.copy('eggs.txt', 'C:\\delicious\\eggs2.txt')
' C:\\delicious\\eggs2.txt'
第一个 shutil.copy()调用将文件 C:\spam.txt 复制到文件夹 C:\delicious。返回值
是刚刚被复制的文件的路径。请注意，因为指定了一个文件夹作为目的地，原来
的文件名 spam.txt 就被用作新复制的文件名。第二个 shutil.copy()调用也将文件
C:\eggs.txt复制到文件夹C:\delicious，但为新文件提供了一个名字eggs2.txt。