erative adaptive cruise control (CACC) algorithm in a platoon
scenario. The target for the attacks was the platoon leader and
predecessor vehicle. They analysed the attack injection results
by looking into the distance between the platoon vehicles.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:05 UTC from IEEE Xplore.  Restrictions apply. 
186
Similar to the work presented by Heijden et al. [24], Iorio
et al. [26] compared the resiliency of different controllers.
Similar to ComFASE, the authors of [24], [25] and [26]
have developed tools to inject attacks in a platooning system
modelled in Plexe-veins [14]. However, unlike these tools,
ComFASE is capable of injecting attacks in wireless channel
models used for WAVE vehicle communication.
Lastinec et al. [27] uses an attack injection tool that is
similar to Heijden et al. in terms of message exploitation.
The attacker vehicle exploits an emergency vehicle’s (e.g., an
ambulance) information to gain privileges for driving faster.
SAE++ [15] and NETA (NETwork Attacks) [16] are OM-
NeT++/INET based attack simulation tools that have been
developed in the past. Unlike ComFASE, these tools are not
connected to a trafﬁc simulator, and can therefore not assess
the impact of successful attacks on a trafﬁc environment.
III. COMFASE: A COMMUNICATION FAULT AND ATTACK
SIMULATION ENGINE
ComFASE1 is capable of injecting faults and attacks in
the vehicular communication system modelled in the Veins
simulator (see Fig. 1). In this paper, we demonstrate the
capabilities of ComFASE to inject two types of cybersecurity
attacks on a wireless channel. We denote these attacks as
delay and denial-of-service attacks. The tool can be extended
with other types of faults and attacks to be injected in other
layers of the vehicular communication system such as the
physical and application layers. In order to evaluate various
cybersecurity attributes of a system, ComFASE allows to
integrate different trafﬁc scenarios such as platooning and
teleopearation. In the simulated trafﬁc scenario, ComFASE
targets the vehicles transmission and reception capabilities
by modifying the models built for vehicle communication in
Veins. Moreover, the tool provides an opportunity to analyse
the impact of faults and attacks on the target vehicle and the
surrounding trafﬁc.
A. ComFASE Execution Flow
The execution of ComFASE is presented in four steps as a
pseudo code in Algo. 1. In this section, we present these steps
and explain how a test campaign is conﬁgured (Step-1: lines
1-4) and executed (Step-2 and Step-3: lines 5-15) and how the
campaign results are classiﬁed (Step-4: lines 16-18).
Step-1 Test-Conﬁguration: The workﬂow begins with con-
ﬁguration of the trafﬁc scenario (TrafﬁcScenario), communi-
cation model (CommModel), and attack injection campaign
(AttackCampaignSetup).
The parameters required to set-up the trafﬁc scenario (line
2 in Algo. 1) are:
• roadFeatures, deﬁning the road properties e.g., number
of lanes, length, width and speed limit.
• vehicleFeatures, deﬁning the software and hardware prop-
erties of the vehicle e.g., length of the vehicle, maximum
1https://github.com/RISE-Dependable-Transport-Systems/ComFASE
187
speed, acceleration/deceleration ability and controller
such as CACC (cooperative adaptive cruise control).
• nrVehicles, setting the number of the vehicles in trafﬁc.
• scenarioManeuver, deﬁning the vehicles driving pattern,
such as acceleration and braking.
• totalSimTime, setting the total simulation time.
The trafﬁc scenario can either be selected from already existing
scenarios or can be created and conﬁgured based on the user
needs.
In order to conﬁgure the communication model (line 3 in
Algo. 1), the parameters that need to be set are:
• commProtocol, specifying the communication protocol
which are valid for vehicle communication such as IEEE
802.11p, and IEEE 1609.4.
• wirelessModel, specifying the model to use for the envi-
ronmental effects in the wireless communication such as
’free path loss model’ and ’two-ray interference model’.
• packetSize, deﬁning the size of the message that is to be
transferred through the wireless channel.
• beaconingTime, deﬁning the beaconing frequency which
every vehicle uses to broadcast the messages.
The inputs required for setting the attack campaign (line 4
in Algo. 1) are:
• attackModel selection of a predeﬁned attack model, e.g,
delay or denial-of-service (DoS) attack.
• targetVehicles, specifying the vehicles under attack.
• attackValuesVector, containing a set of attack model pa-
rameter values to be injected during a campaign.
• attackStartVector, containing a set of attack initiation
times when the attack starts in an experiment.
• attackEndVector, containing a set of attack end times
when the attack ends in an experiment.
Step-2 Golden Run: In this step, we execute a golden run
(line 6 in Algo. 1) where the system is not exposed to any
faults or attacks. The inputs required to perform the golden
run are TrafﬁcScenario and CommModel, which we conﬁgured
in Step-1. The golden run is simulated until the simulation
time ends (i.e.,
is recorded as
GoldenRunLog.
totalSimTime). The output
Step-3 Attack Injection Campaign: This step presents the
attack injection procedure (lines 7-15 in Algo. 1), where inputs
are TrafﬁcScenario, CommModel and attackCampaignSetup.
The set of attacks to be injected are determined by the
attackStartVector, attackValueVector and the attackEndVector.
To this end, ComFASE runs in three nested loops, where the
simulation is run until attackStartTime with SimUntil using the
communication model initialised in Step-1 (i.e., CommModel).
Then, the simulation is run until attackEndTime using the up-
dated communication model (i.e., UpdatedCommModel), and
ﬁnally the simulation is run until simulation ends (i.e., equal
to totalSimTime) with the communication model initialised in
Step-1.
Algo. 1 also shows that the data observed from the simula-
tion for each experiment is stored in AttackCampaignLog and
that the expNr keeps track of the total number of experiments.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:05 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Pseudo code of ComFASE Execution Flow
1: //Step-1: Test-Conﬁguration
2: TrafﬁcScenario= setScenario(roadFeatures, vehicleFeatures, nrVehicles, scenarioManeuver, totalSimTime)
3: CommModel= setCommunication(commProtocol, wirelessModel, packetSize, beaconingTime)
4: AttackCampaignSetup = setCampaign(attackModel, targetVehicles, attackStartVector, attackValuesVector, attackEndVector)
5: //Step-2: Golden-Run (attack-free simulation run)
6: GoldenRunLog= SimUntil(TrafﬁcScenario, CommModel, totalSimTime)
7: //Step-3: Attack-Injection-Campaign (campaign is a set of attack experiments)
8: for each attackStartTime in attackStartVector do
for each attackValue in attackValuesVector do
9:
10:
11:
12:
13:
14:
15:
16: //Step-4: Classiﬁcation (classify each experiment)
17: for each exp in Attack-Injection-Campaign do
18:
UpdatedCommModel= CommModelEditor(CommModel, attackValues, targetVehicles)
AttackCampaignLog[expNr] += SimUntil(TrafﬁcScenario, CommModel, attackStartTime)
AttackCampaignLog[expNr] += SimUntil(TrafﬁcScenario, UpdatedCommModel, attackEndTime)
AttackCampaignLog[expNr] += SimUntil(TrafﬁcScenario, CommModel, totalSimTime)
expNr ++
for each attackEndTime in attackEndVector do
Classiﬁcation = Compare(GoldenRunLog, AttackCampaignLog[exp], classiﬁcationParameters)
Step-4 Classiﬁcation: The inputs required for classiﬁcation
of the results (lines 16-18 in Algo. 1) are GoldenRunLog,
AttackCampaignLog, and classiﬁcationParameters (e.g., decel-
eration proﬁles and collision incidents). The results obtained
for each of the attack injection experiments are compared with
those obtained for the golden run and classiﬁed into one of the
result classiﬁcation categories discussed in §IV-B. For instance
an experiment is classiﬁed as severe if a collision incident is
reported.
After the result classiﬁcation, we conduct separate analyses
to investigate correlations between attack parameters (i.e.,
attackStartTimes and attackValues) and the severity of the
attacks. The severity is then graded based on the magnitude
of vehicle decelerations and collision incidents.
B. Attack Model implementation
ComFASE can target different parameters of the commu-
nication simulation environment to model different faults and
attacks. Examples of such simulation parameters are vehicle
information sent through the wireless channel (such as po-
sition, acceleration, speed) and the channel properties (such
as propagation delay, signal power, interference, and noise).
Propagation delay (PD) is a Veins simulation parameter that
is used to introduce the natural communication delay between
the vehicle communication. The propagation delay in Veins is
calculated based on the distance between vehicle and speed
of light. We use the ’propagation delay’ parameter to model
delay and denial-of-service attacks by modifying the Veins PD
value with the attack value when the attack is active. Table I
describes the parameters for modelling the attacks in Veins
and their connection to real world attack types. Note that, the
values in Table I are acceptable value ranges that can be set
in the simulation. The speciﬁc values that we have used for
the demonstration of the tool are detailed in §IV.
C. ComFASE Limitations
ComFASE can only inject faults and attacks on the vehic-
ular communication system and is limited to the simulation
environment that are built upon the OMNeT++ simulator. It
is also worth noting that the usefulness of the results obtained
using any simulation-based testing tool is tied to the accuracy
and representativeness of the simulation environment including
the communication and vehicle models when it comes to the
evaluation of features of automated vehicles. For example,
no security mechanisms are implemented inside the Veins
communication model, which is why no such mechanisms are
evaluated in this paper.
IV. COMFASE EXPERIMENTS
To demonstrate the ComFASE capabilities, we injected
cybersecurity attacks on the wireless communication channel
used in a platooning system using the execution ﬂow presented
in §III-A. Here, we present the experimental setup and results
of the injections.
A. Experimental Setup
1) Trafﬁc Scenario: In this study we have used an existing
platooning scenario (see Fig. 3) implemented in Plexe-veins
[14] to demonstrate the use of ComFASE. In this platooning
scenario, the road consists of 4 lanes with maximum speed
limit of 90m/s, length of 9400m, and width of 3.2m per
lane. There are 4 identical vehicles in the scenario with these
features: 4m length, 9m/s2 deceleration ability, 2.5m/s2
acceleration ability, 50m/s maximum speed, and CACC (co-
operative adaptive cruise control) [30] as a controller. The
vehicles accelerates and decelerates in a sinusoidal fashion
(see Fig. 4) in the platoon.
We limit the total simulation time to 60s. Note that, the
above-mentioned features come with the default scenario setup
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:05 UTC from IEEE Xplore.  Restrictions apply. 
188
TABLE I: Attack types and simulation parameters for modelling the attacks.
Real world attack types and examples
Attack type
Examples
Delay
DoS
Catching the messages between vehicles, which
are blocked from reaching the receiver (e.g.,
using reactive jamming technique [28]), and re-
transmit them at a later time.
Disabling the ability of a vehicle to communi-
cate with other vehicles in a trafﬁc by jamming
the communication [29].
Target
parameter
Simulation parameters for modelling the attacks
Default
value (unit)
Acceptable
attackStartTimes
Acceptable
valueRange
Acceptable
attackEndTimes
Propagation
delay (PD)
0.0 (s)
0 to
totalSimTime
0 to
totalSimTime
attackStartTime
to totalSimTime
totalSimTime
TABLE II: Parameters values used in experiments.
Attack type
Delay
DoS
Selected PD
valueRange
0.0s to 3.0s
with 0.2s
step
60.0s
Selected
attackStartTimes
17.0s to 21.8s
with 0.2s step
Selected
attackEndTimes
attackStartTime
+(1s to 30s) with
1s step
60.0s
3) Attack Campaign Setup: In this paper, we consider two
types of attacks on the wireless channel. One of them rep-
resents blocking the reception and transmission of messages
of a speciﬁc vehicle for a limited time. This type of attack
primarily causes a delay in the exchange of messages among
the interacting vehicles, and hence we denote such attacks
as delay attacks. In the other attack model, the reception and
transmission of messages of a speciﬁc vehicle is blocked from
the attack initiation time until the simulation ends. We denote
this type of attacks as denial-of-service attacks.
Our models assume that the attacker has access to advanced
jamming techniques, such as reactive jamming described in
[28],
to enable blocking of messages. In the simulations,
the attacks are injected in the sender & receiver modules
of the inter-vehicle communication model
in Veins. More
speciﬁcally, we use the propagation delay parameter in this
model to implement the attacks.
We injected attacks only on messages sent and received by
Vehicle 2, which is the one directly behind the lead vehicle
in Fig. 3. (In general, to support various levels of attack
complexity, ComFASE can target any number of vehicles in a
scenario for experimentation and analysis.)
Table II presents the parameters used in the simulations.
We select attackStartTimes from time 17s to 21.8s which
is one complete platooning cycle as illustrated in Fig. 4.
Within this cycle, we chose start times that are 0.2s apart
resulting in a total of 25 start time points. Attack duration
time speciﬁes the total time during which an attack is active
i.e, from the attackStartTime to the attackEndTime. The total
simulation time of each experiment for delay and DoS attacks
was selected as 60s. For the delay attacks, we chose the attack
duration from 1.0s to 30s with a step of 1.0s resulting in a
total of 30 attackEndTimes. The maximum attack duration of
30s was selected to make sure that we observe the impact of
all attacks before the end of the simulation run. For the DoS
attacks however, the attack duration is from the attack start
until the end of the simulation.
Fig. 3: An example of attacks in a platooning scenario.
Fig. 4: Speed and acceleration/deceleration proﬁles of the four
vehicles in platoon shown in Fig. 3.
in Plexe-veins and could be easily changed according to the
user needs. Also, we use sinusoidal maneuvers to increase
the visibility of the behavioral changes of the vehicle under
attack. Furthermore, we use the CACC as it uses inter-vehicle
communication data to calculate the acceleration and speed of
the vehicles in the platoon allowing us to evaluate the effects
of V2V communication attacks on the target vehicles.
2) Communication Model: We used DSRC/WAVE commu-
nication protocols (see Fig. 1) as commProtocol and chose
’free space path loss model’ as wirelessModel for our exper-
imentation. This model represents the data propagation in a
wireless channel between the vehicles. It models a situation
where the distance between the vehicles are minimized and is
free of obstacles such as in a platooning scenario. To set up
the model, we have chosen 200 bits as the packetSize and 0.1s
as the beaconingTime.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:05 UTC from IEEE Xplore.  Restrictions apply. 
189
For the delay attacks, we chose to delay the data between
0.2s to 3.0s with propagation delay (PD) values that are 0.2s
apart resulting in a total of 15 PD values. Note that, we
have also conducted experiments with values higher than 3.0s