apache/james
microad
amazonaws
Social gaming platform
Google Advertising
Cross platform application development
Mobile advertising
Mobile game engine
Internet messaging
Advertising
Libraries for Amazon AWS
Table 1: White-listed libraries
Similar to existing research (e.g.,
[25]), we observed the
pervasive use of third-party libraries for advertisement and
statistics purposes. In order to prevent over-counting, we
whitelisted common libraries that use cryptography, as listed
in Table 1. CryptoLint discards applications if their
only use of cryptographic functionality is conﬁned to these
libraries. We assume that the applications we analyze do not
actively try to disguise the use of these libraries, and thus,
identify these libraries by matching their package names.
6.1 Results
In total, CryptoLint successfully analyzed 11,748 appli-
cations. The analysis of the remaining applications was
unsuccessful for one of two reasons. First, the analysis of
2,614 applications did not terminate within a timeout of
30 minutes. Second, the analysis infrastructure ran out of
1Seeding SecureRandom may be
//developer.android.com/reference/java/security/
SecureRandom.html
insecure at http:
# apps
5,656
3,644
2,000
1,932
1,636
1,629
1,574
1,421
violated rule
Uses ECB (BouncyCastle default) (R1)
Uses constant symmetric key (R3)
Uses ECB (Explicit use) (R1)
Uses constant IV (R2)
Used iteration count < 1,000 for PBE(R5)
Seeds SecureRandom with static (R6)
Uses static salt for PBE (R4)
No violation
Table 2: Violations of cryptographic security rules
memory during the analysis of 765 applications. All num-
bers reported from here on are in reference to the 11,748
successfully analyzed applications.
Table 2 lists the number of distinct applications that vio-
lated the rules from §3. Only 1,421 applications in our data
set did not violate any of the rules. We discuss the remaining
rule violations in order of prevalence below.
Rule 1: Do not use ECB mode for encryption. This was
the most frequent rule violated, with 7,656 total apps violat-
ing this rule at least once. The primary cause of ECB mode
was developers using the default values in the BouncyCastle
security provider. More precisely, in 5,656 applications the
developer only speciﬁes a block cipher (e.g., AES, DES, DESede)
and the BouncyCastle provider conﬁgures the resulting ci-
pher in ECB mode. These results indicate that developers
are not aware that the API default does not provide the
IND-CPA strong notion of privacy.
Additionally, 2,000 applications explicitly request a block
cipher in ECB mode from the security provider. While there
are legitimate uses for ECB mode (see §3), we manually
inspected several applications and veriﬁed that they a) were
trying to achieve privacy, and b) were using ECB mode on
data that was over a block length or non-random. Examples
of misuse of ECB mode include:
• One game uses DES/ECB to encrypt personal identi-
ﬁers. The identiﬁers exceed the DES block size, thus
an adversary can learn which parts of the encrypted
ID are the same.
• One anti-virus product encrypts the MD5 hash of
viruses found in DES3/ECB mode. An adversary can
learn if multiple instances of the same virus are found
on the device.
• One password manager stores passwords encrypted
using AES in ECB mode. A more detailed discussion
of this application will be presented in the case studies
(below).
Rule 3: Do not use constant encryption keys. The sec-
ond most violated cryptographic security property in our
dataset is the use of a constant symmetric encryption key.
As mentioned in Section 2, the security of symmetric en-
cryption schemes depends on the secrecy of the shared key.
Thus, embedding such secret keys into an application negates
the security beneﬁts of symmetric encryption. For example,
AdMob encrypts the phone’s location data using a constant
key and sends it over the network. Another example is an
application that stores the user’s Google credentials on disk
encrypted using a static key.
Rule 2: Do not use a non-random IV for CBC encryp-
tion. CryptoLint identiﬁed 1,932 applications that make
78# apps
1,905
1,588
1,247
866
109
24
11
5
2
2
rules violated
Rule 1 & Rule 3
Rule 1 & Rule 6
Rule 4 & Rule 5
Rule 2 & Rule 3
Rule 1 & Rule 2
Rule 1 & Rule 5
Rule 3 & Rule 5
Rule 2 & Rule 5
Rule 1 & Rule 4
Rule 3 & Rule 4
Table 3: Applications violating two rules
ined a popular game that CryptoLint reported as misusing
crypto. This game is from a development studio that released
a series of popular games, all containing a social platform for
connecting and interacting with friends. This social platform
is used to track high-scores on a leader board. According
to Google play, the application we analyzed has between
50,000,000 and 100,000,000 installations. The application
communicates with the back-end servers of the social compo-
nents over http. However, data that is transmitted between
the server and the client is encrypted. This application got
ﬂagged by CryptoLint for two reasons. First, it uses the
DES blockcipher in ECB mode. The developers explicitly
speciﬁed the ECB block cipher mode as the used transfor-
mation string is DES/ECB). Furthermore, CryptoLint also
complains that the application uses a static key with this
encryption scheme. We evaluated the correctness of these
results by interacting with the game and exercising the social
network functionality while at the same time recording all
network traﬃc sent by the application. With the key ma-
terial retrieved by CryptoLint, it was trivially possible to
decrypt the encrypted network traﬃc.
Bookmark Manager We also investigated a bookmark man-
ager application in more detail (install base between 1,000,000
and 5,000,000). This application allows the user to synchro-
nize bookmarks between diﬀerent browsers installed on the
mobile device. Furthermore, it provides the functionality to
synchronize browser bookmarks with Google’s web services.
To make use of this functionality, the user has to provide her
Google credentials. The application stores these credentials
in a regular Java property ﬁle. While the Google user-name is
stored in the clear, the password is encrypted. CryptoLint
ﬂagged this application because it uses the DES blockcipher
in ECB mode to store that information in the property ﬁle.
Furthermore, the application also uses a constant key for
the encryption. Again we veriﬁed that decryption of the
password is trivially possible. We agree that safe storage of
access credentials is challenging to get right. To this end, An-
droid provides a KeyStore facility that is designed for exactly
the purpose of storing access credentials and is accessible
through the API.
Password management application Users entrust their
passwords to password manager applications for safe keeping
and easy management. Because password information is
important to protect securely, we investigated one application
in this category closer. Although this application only has
between 100,000 and 500,000 installations, the fact that the
application is open source with a publicly available GIT
repository warrants a closer analysis. In the earliest versions
Figure 1: Number of applications violating 0, 1, 2,
. . . 6 rules.
use of constant initialization vectors in CBC mode encryp-
tion.
Rule 4: Do not use constant salts for PBE. Cryp-
toLint identiﬁed 1,574 applications that use a static value
for the salt used with the key derivation function in PBE.
Using a static salt allows an attacker to pre-compute a dictio-
nary based on the known salt, negating much of the beneﬁt of
using a salt at all. While the use of a static salt is better than
using the password directly as encryption key, this choice
negates the advantages in multi-instance security [5].
Rule 5: Do not use fewer than 1,000 iterations for PBE.
The Java PBEKeySpec API implements password based en-
cryption based on the PKCS#5 standard. The RFC for
PKCS#5 recommends an iteration count of at least 1,000.
CryptoLint identiﬁed 1,636 applications that use fewer
iterations. Applications that use a low iteration count and
a static salt for password-based encryption are exposed to
trivial dictionary-based oﬀ-line attacks, exactly the type of at-
tacks that password-based encryption schemes were designed
to protect against.
Applications violating multiple rules We next investi-
gated the number of applications that violate multiple rules.
These results are illustrated in Figure 1. Interestingly, it
was more common for applications to violate two rules than
only violating a single rule. Of the applications violating a
single rule, rule 1 was violated the most (3,033 times). 511
applications violated rule 2 and used constant IVs. For 246
applications CryptoLint identiﬁed the use of a static sym-
metric encryption key (violation of rule 3). 29 applications
were ﬂagged for using a low iteration count, and 13 appli-
cations use static salt values for password-based encryption
schemes. CryptoLint identiﬁed 6 applications that only
violated rule 6 by seeding SecureRandom with a static seed.
The numbers of applications that violated exactly two
rules are listed in Table 3. Additionally, our dataset con-
tained exactly one application that violated all six rules
that CryptoLint evaluates.
6.2 Case Studies
Social gaming platform To estimate the impact of apply-
ing cryptographic primitives incorrectly, we manually exam-
 1 10 100 1000 100000123456Number of distinct applicationsNumber of distinct violated rules79of the application the developer used the AES block cipher
in ECB mode. However, before encryption, the application
prepends two bytes of random data to the password. After
decryption the initial two bytes are discarded. Furthermore,
the application derives the key by calculating an HMAC over
the master password the user supplies.
Several design decisions reduce the security of this imple-
mentation and render it non IND-CPA secure. Although
prepending the password with two random bytes prevents
two identical passwords from being encrypted to identical
ciphertexts, this measure only protects the ﬁrst 14 bytes of a
password. Because individual blocks are encrypted indepen-
dently, all plaintext blocks after the initial 14 bytes would be
encrypted to the same ciphertext blocks. Furthermore, the
developer chose to use a single HMAC operation with a static
key to derive key material from the master password. Instead,
the author should have used existing password-based encryp-
tion schemes to protect the key database against dictionary
attacks.
In a subsequent version the author substituted the ECB
mode for an encryption scheme based on AES/CBC. However,
the author also hard-coded a static IV into the application.
Similar to before, the author prepended the password to
store in the database with two random bytes of data before
performing the encryption. While the use of CBC and the two
random bytes constitute a signiﬁcant security improvement
over earlier versions of the application, the application is still
not IND-CPA secure. The reason is that two random bytes at
the beginning of the plain text is not enough to preserve the
IND-CPA security of the CBC$ algorithm. More precisely,
two passwords are encrypted into the same cipher texts
with probability of 1/216 = 1/65536, which is considered
non-negligible.
Finally, in more recent versions of the app the author re-
lies on AES/CBC and generates IVs at random. However,
the author uses the regular random number generator in-
stead of the SecureRandom API, which should be used in
cryptographic contexts.
This development history spans two years of development
on a system that is arguably designed to keep personal data
secure. Our analysis shows that it is non-trivial even for
well-intended developers to apply cryptographic primitives
correctly. Thus, we propose a series of mitigations in Sec-
tion 7 to make it easier for developers to use cryptographic
algorithms correctly.
Popular libraries In the following we discuss our ﬁndings
regarding how popular libraries apply cryptographic algo-
rithms.
AdMob2. Google’s AdMob advertising library is one
of the most popular libraries included in Android applica-
tions.
In fact we found that 36 % of the applications in
our dataset make use of this library. AdMob uses the AES
block cipher in CBC$ mode to encrypt device location and
identiﬁers before transmitting that information to the ad-
server. This library correctly uses the default behavior of the
BouncyCastle provider to generate a random IV through the
SecureRandom API. Thus, AdMob makes correct use of the
cryptographic functionality provided in Android. However,
AdMob also uses a constant encryption key for this operation.
Thus, the security provided by the symmetric encryption
scheme is undermined.
2http://www.google.com/ads/admob/
Scoreloop3. The Scoreloop library provides functionality
to integrate social capabilities to mobile applications. The
platform allows the developer to add virtual currencies and
game items to her application and supports multiple payment
options. When analyzing an example application that makes
use of the Scoreloop library, CryptoLint correctly alerts that
the library is using AES/CBC with constant initialization
vectors. More precisely, the library derives the used IVs
deterministically from the hard-coded URL endpoints of the
Scoreloop backend servers. This result illustrates that not
all developers of high proﬁle libraries are capable of using
cryptography correctly.
Android License Veriﬁcation Library4. The LVL pro-
vides the developer with the necessary functionality to enforce
a licensing policy on her applications. The documentation
states that to keep licensing information persistent, this in-
formation has to be stored in an obfuscated manner on the
device. To this end, the LVL provides an obfuscation scheme
that is based on the AES block cipher in CBC mode. This
default implementation however uses a constant initializa-
tion vector5. As the name of this API (i.e., AESObfuscator)
suggests, the intended purpose here is to obfuscate instead of
achieving IND-CPA security. However, modifying the source
code to at least choose an IV at random would be straight
forward, as the AdMob library illustrates.
6.3 Limitations
Our current system has a number of limitations. For exam-
ple, Android applications can make use of native code. How-
ever, CryptoLint currently only targets Dalvik bytecode.
Therefore, applications that invoke cryptographic primitives
from native code cannot be analyzed. Furthermore, the
property that initialization vectors have to be unique is not
globally valid. For example, the Kerberos protocol uses a
static initialization vector with the CBC block cipher mode.
However, the protocol also speciﬁes that the ﬁrst block of a
message is ﬁlled with random data and discarded at decryp-
tion. This basically transforms the ﬁrst block into fulﬁlling
the role of the initialization vector instead. Thus, the IV does
not need to be transmitted along with cipher-text message.
Inferring this valid use of a static IV in CBC mode would
require CryptoLint to infer the implicit knowledge of the
protocol designer, which is clearly beyond the scope of this
work.
CryptoLint only detects the use and misuse of cryp-
tographic primitives if they are properly exposed through
the intended interfaces (e.g., security providers, ciphers, and
MACs). CryptoLint cannot reason about applications that
implement cryptographic primitives ad-hoc. To do so, Cryp-
toLint would have to infer whether a particular piece of code
implements cryptographic functionality. This is outside the