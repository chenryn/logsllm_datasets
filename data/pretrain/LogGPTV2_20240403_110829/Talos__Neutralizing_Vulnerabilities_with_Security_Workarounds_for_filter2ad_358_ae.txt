this vulnerability.
squid - CVE-2009-0478. An integer overﬂow vulnerability
allows a remote attacker to cause a denial-of-service by send-
ing an HTTP request with a crafted HTTP protocol version
number [18]. The function httpMsgParseRequestLine
converts the HTTP version number of an HTTP request
from a string to an integer, but
it uses a signed integer
to store the converted version number. As a result, a very
large version number will cause an integer overﬂow and
crash the server. httpMsgParseRequestLine does not
have error-handling code, but its caller does (returns NULL);
Talos instruments the caller, which successfully neutralizes the
vulnerability. However, the side-effects of this are severe, as it
causes all HTTP requests to be denied as every request must be
parsed by httpMsgParseRequestLine and calls to this
function always generate an error with the SWRR enabled.
While the SWRR provides security, because the vulnerable
code is used for all HTTP requests, squid is unable to respond
to any HTTP request so there is a major loss of functionality.
squid - CVE-2014-3609. A missing validity check on the
byte range speciﬁcation of an HTTP request allows a remote
attacker to cause a denial-of-service by sending an HTTP
request with a specially crafted byte range speciﬁcation [19].
The function httpHdrRangeSpecParseCreate parses
the byte range speciﬁcation of HTTP requests, but it does
not correctly check the validity of the length calculated from
certain byte range speciﬁcations and can cause the server
to crash. httpHdrRangeSpecParseCreate has error-
handling code that calls an error logging function and returns
NULL, so Talos instruments this function with an SWRR
that returns NULL, which successfully neutralizes the vul-
nerability. This causes the server to ignore the byte range
speciﬁcation from the client and always serve the full-length
of the content. No conﬁdential information is leaked since the
client would have received the full-length content anyways
if it had not speciﬁed a byte range. This vulnerability has a
posted conﬁguration workaround, which implements a ﬁlter
that rejects requests with suspicious byte ranges. The loss
of functionality is similar to the SWRR – only requests that
specify byte ranges are affected in either case. Talos preserves
security in this case with an unobtrusive SWRR.
sqlite - CVE-2015-3414. A vulnerability in the code that
parses collation-sequence names in SQL commands al-
lows an attacker to cause memory corruption. The func-
tion sqlite3ExprAddCollateString allocates mem-
ory for parsed collation-sequence names, but may use unini-
tialized memory when parsing a specially crafted collation-
sequence name. sqlite3ExprAddCollateString does
not have error-handling code and simply uses the return
value of function sqlite3ExprAddCollateToken as its
own return value. Due to imprecise static analysis, Talos in-
correctly identiﬁes that sqlite3ExprAddCollateToken
could return NULL, although it is carefully written to al-
ways return a valid pointer. As a consequence, Talos instru-
ments the function with an SWRR that returns NULL. Since
sqlite3ExprAddCollateString should not be able to
return NULL, the caller does not check the return value before
dereferencing it causing sqlite to crash. If collation is not used,
sqlite continues to operation normally, and since collation is
not part of the core functionality of sqlite, we call this a minor
loss of functionality. If restarted, sqlite continues to function
normally.
sqlite - OSVDB-119730. An attacker can cause a memory
error in sqlite with the meta command trace, which turns
on or off the tracing of the execution of commands. The
function do_meta_command processes all meta commands,
which allows users to specify different settings when executing
commands. It does not set a pointer to NULL after the
memory which it references has been deallocated, and thus can
cause a use-after-free memory error. do_meta_command
has error-handling code that calls an error logging function
and returns 1, so Talos instruments the function with an
SWRR that returns 1; this causes sqlite to return an error
to the meta command request. As a result, Talos protects the
security of sqlite against this vulnerability. However, because
do_meta_command is disabled, all other meta commands
will also return an error, and thus the availability of all meta
commands is violated. However, because this is only conﬁned
to meta commands, which are not part of the core functionality
of sqlite, this SWRR is unobtrusive.
proftpd - OSVDB-69562. A backdoor that allows a remote
attacker to access a root shell was planted into the source
code of ProFTPD when ProFTPD’s FTP server and mirrors
were compromised [14]. The backdoor was added to func-
tion pr_help_add_response, which creates responses to
HELP command, so that a HELP command with a speciﬁc
argument would cause ProFTPD to execute a shell that can
be accessed remotely. The caller of the function has error-
handling code that calls an error logging function when the
return value of the function is not zero, so Talos instruments
the function with an SWRR that returns 1, which successfully
neutralizes the vulnerability. As a result,
the security and
628628
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
TABLE V
BASIC COVERAGE OF SWRRS.
App.
lighttpd
apache
squid
proftpd
sqlite
AVERAGE
Protected
89.8%
77.5%
76.6%
86.1%
45.3%
75.1%
Logging.
23.6%
14.0%
18.1%
32.7%
2.0%
18.1%
Pointer.
1.5%
11.9%
5.6%
13.6%
6.5%
7.8%
Indirect
Prop.
17.6% 47.1%
20.7% 30.9%
6.3%
46.4%
12.9% 26.9%
14.4% 22.4%
14.4% 34.7%
availability of the application are preserved. However, as in the
previous case, ProFTPD will respond to all HELP commands
with the error message “Unknown command” thus impacting
the availability of the HELP facility. However, all other FTP
commands continue to function normally. As a result, this is
considered an unobtrusive SWRR.
proftpd - CVE-2010-3867. Multiple vulnerabilities in the
mod_site_misc module allow a remote attacker to perform
various directory and ﬁle operations using mod_site_misc
commands without authentication. All vulnerable functions,
such as site_misc_mkdir that creates a directory on the
server upon users’ requests, have error-handling code that calls
an error logging function and returns NULL; Talos instruments
each of these functions with an SWRR that returns NULL
and when all of the SWRRs corresponding to these functions
are enabled, ProFTPD returns an error for all the vulnerable
mod_site_misc commands. Other than this side-effect,
users can continue to use all other FTP commands and thus
the SWRRs provide security and are unobtrusive.
proftpd - CVE-2015-3306. Multiple vulnerabilities in the
mod_copy module allow a remote attacker to read and write
arbitrary ﬁles with mod_copy commands without authenti-
cation. Similar to CVE-2010-3867, all vulnerable functions
(such as copy_copy, which copies ﬁles between different
locations on the server) have error-handling code that calls an
error logging function and returns NULL; Talos instruments
each of these with an SWRR that returns NULL when enabled.
Again, when the SWRR is activated, ProFTPD returns an error
in response to all the vulnerable mod_copy commands. There
are no other side effects and ProFTPD continues to work as
expected, thus the SWRR provides security and is unobtrusive.
B. Effective coverage
In this section, we aim to answer the question “What is the
percentage of vulnerabilities that can be mitigated with an
unobtrusive SWRR?” To answer this question, we perform
a quantitative measurement of the two components that make
up the effective coverage of SWRRs: the basic coverage and
the rate of unobtrusive SWRRs.
Basic Coverage. To evaluate basic coverage, we measure the
number of functions where Talos can ﬁnd an error-handling
path and identify an error-handling code to return, which is
used to insert an SWRR. This measurement across the ﬁve
applications is shown in Table V. The ﬁrst “Protected” column
shows the total percentage of functions that are protected by
SWRRs in each application. The remaining four columns then
provide a breakdown by the percentage of functions that are
protected by each of the four heuristics. If we assume that
potential vulnerabilities are uniformly distributed across func-
tions in the application, then the percentage in the Protected
column gives the basic coverage for the application, which is
the likelihood that a potential vulnerability can be disabled by
an SWRR.
As Talos uses error-handling to infer the value that should
be returned by an activated SWRR, the coverage depends very
heavily on how much error-handling code is present in the
application and how well Talos’ heuristics can identify the
error-handling code. Among the ﬁve applications, sqlite has
the lowest basic coverage of 45.3% as well as a very low
percentage of error-logging paths. In addition, sqlite has the
lowest percentage of functions that can be protected indirectly.
This is likely because sqlite has a simpler call graph than the
other applications.
On the other hand, lighttpd has the highest basic coverage
of 89.8% because it has a particularly high percentage of
error logging paths as well as a high percentage of func-
tions that can be protected indirectly. Unlike lighttpd, proftpd
(the application that has the second highest coverage) has a
high percentage of error-logging paths and NULL-returning
functions, but has a lower percentage of functions that can be
protected indirectly.
Overall, we can see that Talos has a basic coverage of 75.1%
across all applications and that each technique used by Talos
plays an essential role in achieving the high coverage, although
each one might have a different impact on the coverage for
different applications. We also ﬁnd that the majority of the
functions can be directly protected by Talos.
Rate of unobtrusive SWRRs. We wish to evaluate the
unobtrusiveness of SWRRs over a large number of SWRRs.
To do this, we perform an experiment where we enable a
large number of SWRRs and test whether they result in minor,
major, or no loss of functionality. To make it easy to test
a large number of SWRRs, we instrument each application
for in-place deployment so that we can activate each SWRR
simply by changing conﬁgurations. To ensure that all
the
SWRRs under our test are indeed executed, we ﬁrst ﬁnd out
which functions are executed for the major and minor func-
tionality test inputs used in Section VI-A, and then randomly
choose approximately 25% of the SWRRs corresponding to
the executed functions to focus on in the interests of time. In
total we choose 320 SWRRs across all of the applications, as
shown in Table VI. We then individually enable each of the
selected SWRRs and run the test suite for the application. If
the application passes both sets of test inputs or passes the
major test inputs but fails the minor test inputs, we consider
that the SWRR is unobtrusive. Otherwise, we consider the
SWRR is obtrusive.
The results are tabulated in Table VI. Column “#SWRRs”
shows the number of tested SWRRs for each application.
629629
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VI
RATE OF UNOBTRUSIVE SWRRS.
App.
lighttpd
apache
squid
proftpd
sqlite
AVERAGE
#SWRRs
40
85
65
90
40
64
Unobtrusive
70.0%
88.2%
69.2%
64.4%
55.0%
71.3%
TABLE VII
OVERHEAD OF SWRR.
App.
lighttpd
apache
squid
proftpd
sqlite
AVERAGE
LOC
46,792
135,856
70,407
69,808
153,020
95,176
Added
LOC
1.9%
2.2%
2.4%
2.9%
0.8%
2.0%
Files Modiﬁed
Files
92.4%
75.9%
84.0%
93.8%
100%
89.2%
79
191
119
64
2
91
Runtime
0.6%
2.3%
1.5%
1.2%
1.0%
1.3%
Column “Unobtrusiveness” shows the percentage of tested
SWRRs that are unobtrusive. A weighted average shows that
71.3% of the SWRRs tested are unobtrusive, and thus preserve
the major functionality of the application. No application had
a rate of unobtrusive SWRRs below 50% indicating that the
majority of SWRRs are unobtrusive.
While one might believe that the rate of unobtrusive SWRRs
is a function of the choice to use SWRRs to disable entire
functions or the use of indirect protection, our analysis of
some of the results indicates that this is not a major factor.
Rather, if the vulnerability is located in the core functionality
of an application, it is unlikely that disabling code, even at a
ﬁner granularity, will preserve the major functionality of the
application. Thus, the main factor for unobtrusiveness is the
location of the vulnerability, which is out of Talos’ control.
Essentially, our ﬁndings indicate that commonly executed code
tends to have a higher rate of error-handling code, meaning
there are more SWRRs located in commonly executed code
with major functionality.
In combining the average basic coverage with the average
rate of unobtrusive SWRRs, we arrive at an effective coverage
of 53.5%, which gives the percentage of potential vulnerabil-
ities that have an unobtrusive SWRR. This is a signiﬁcant
2.1× improvement over the 25.2% coverage currently offered
by conﬁguration workarounds.
C. Overhead
When SWRRs are instrumented for in-place deployment,
they can incur runtime overhead because they will check