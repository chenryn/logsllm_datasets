often diﬃcult.
The remainder of this section presents motivating exam-
ples that demonstrate how JSEs can compromise conﬁden-
tiality and integrity. The ﬁrst example shows how a remote
attacker can exploit vulnerabilities in an otherwise benign
JSE, while the second example presents a malicious JSE. In
each case, we also describe how information-ﬂow tracking,
as implemented in Sabre, would have discovered the attack.
We refer the reader to the companion technical report [21]
for further examples.
Greasemonkey/Firefox Vulnerability. Greasemonkey is
a popular JSE that allows user-deﬁned scripts to make
changes to web pages on the ﬂy. For example, a user could
register a script with Greasemonkey that would customize
the background of web pages that he visits. Greasemonkey
exports a set of APIs (preﬁxed with “GM”) that user-deﬁned
scripts can be programmed against. These APIs execute
with elevated privileges because user-deﬁned scripts must
have the ability to read and modify arbitrary web pages. For
example, the GM xmlhttpRequest API allows a user-deﬁned
script to execute an XMLHttpRequest to an arbitrary web do-
main, and is not constrained by the same-origin policy.
Unfortunately, a combination of vulnerabilities in older
versions of Greasemonkey (CVE-2005-2455) and Firefox
(CVE-2006-1734) allowed scripts on a web page to cap-
ture references to GM API functions (GM xmlhttpRequest in
particular) using the JavaScript watch function, as shown in
Figure 1. When the page loads, the script uses this reference
to issue a GET request to read the contents of the boot.ini
ﬁle from the local ﬁle system. Although the script in Fig-
ure 1 simply modiﬁes the DOM to store the contents of the
boot.ini ﬁle, it could instead use a POST to transmit this
data over the network to a remote attacker.
Information-ﬂow tracking as implemented in Sabre de-
tects this attack because sensitive user data (boot.ini) is
accessed in unsafe ways. In particular, Sabre marks as sen-
sitive all data that a JSE reads from a pre-deﬁned set of sen-
sitive sources, including the local ﬁle system. The call to
window. GM xmlhttpRequest (line 9 in Figure 1) executes
function do_sniff() {
var hesla = window.content.document.getElementsByTagName("input");
data = "";
for (var i = 0; i < hesla.length; i++) {
if (hesla[i].value != "") {
...
data += hesla[i].type + ":" + hesla[i].name
+ ":" + hesla[i].value + "\n";
...
}
}
// the rest of the code sends ‘data’ via an email message.
}
Figure 2. A snippet of code from FFsniFF, a
malicious JSE.
JavaScript code from Greasemonkey to access the local ﬁle
system. Consequently, Response.responseText, which this
function returns, is also marked sensitive. In turn, the DOM
node that stores this data is also marked as sensitive because
of the assignment on line 12. Sabre raises an alert when
the browser attempts to send contents of the DOM over the
network, e.g., when the user clicks a “submit” button.
This example illustrates how a malicious website can ex-
ploit JSE/browser vulnerabilities to steal conﬁdential user
data. It also illustrates the need to precisely track security la-
bels across browser subsystems. For instance, Sabre detects
the above attack because it also modiﬁes the browser’s DOM
subsystem to store labels with DOM nodes. Doing so allows
Sabre to determine whether a sensitive DOM node is trans-
mitted over the network. An approach that only tracks secu-
rity labels associated with JavaScript objects (e.g., [16, 42])
will be unable to precisely detect this attack.
A Malicious JSE. FFsniFF (Firefox Sniﬀer) [13] is a ma-
licious JSE that, if installed, attempts to steal user data en-
tered on HTML forms. When a user “submits” an HTML
form, FFsniFF iterates through all non-empty input ﬁelds in
the form, including password entries, and saves their values.
It then constructs SMTP commands and transmits the saved
form entries to the attacker (the attack requires the vulner-
able host to run an SMTP server). FFsniFF also attempts
to hide itself from the user by exploiting a vulnerability in
the Firefox extension manager (CVE-2006-6585) to delete
its entry from the add-ons list presented by Firefox.
Figure 2 presents a simpliﬁed snippet of code from FF-
sniFF and illustrates the ease with which malicious exten-
sions can be written. Sabre detects FFsniFF because it con-
siders all data received from form ﬁelds on a web page as
sensitive. This sensitive data is propagated to both the array
hesla and the variable data via a series of assignment state-
ments. Sabre raises an alert when FFsniFF attempts to send
the contents of the sensitive data variable along with SMTP
commands over an output channel (a low-sensitivity sink) to
the SMTP server running on the host machine.
3. Tracking Information Flow with Sabre
This section describes the design and implementation of
Sabre. We had three goals:
(1) Monitor all JavaScript execution. Sabre must monitor
all JavaScript code executed by the browser. This includes
code in web applications, JSEs, as well as JavaScript code
executed by the browser core, e.g., code in browser menus
384
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
and XUL elements [10].
Monitoring all JavaScript code is important for two rea-
sons. First, an attack may involve JavaScript code in mul-
tiple browser subsystems. For example, a malicious JSE
may copy data into a XUL element, which may then be
read and transmitted by JavaScript in a web application. In
such cases, it is important to track the ﬂow of sensitive data
through the JSE to the XUL element and into the web appli-
cation. Second, JSEs may often contain code, such as scripts
in XUL overlays, that may be included into the browser
core. Such code often interacts with JavaScript code in a
web application. For example, an overlay may implement a
handler that is invoked in response to an event raised by a
web application. It is key to track information ﬂows through
code in overlays because overlays from untrusted JSEs may
be malicious/vulnerable.
(2) Ease action attribution. When Sabre reports an in-
formation ﬂow violation by a JSE, an analyst may need to
determine whether the violation is because of an attack or
whether the oﬀending ﬂow is part of the advertised behavior
of the JSE. In the latter case, the analyst must whitelist the
ﬂow. For example, PwdHash [37] is a JSE that scans and
modiﬁes passwords entered on web pages. This behavior
may be considered malicious if performed by an untrusted
JSE. However, an analyst may choose to trust PwdHash and
whitelist this ﬂow. To do so, it is important to allow for easy
action attribution, i.e., an analyst must be able to quickly
locate the JavaScript code that caused the violation and de-
termine whether the oﬀending ﬂow must be whitelisted.
(3) Track information ﬂow across browser subsystems.
JavaScript code in a browser and its JSEs interacts heavily
with other subsystems, such as the DOM and persistent stor-
age, including cookies, saved passwords, and even the local
ﬁle system. Sabre must precisely monitor information ﬂows
across these subsystems because attacks enabled by JSEs
(e.g., those illustrated in Section 2) often involve multiple
browser subsystems.
We implemented Sabre by modifying SpiderMonkey, the
JavaScript interpreter in Firefox, to track information ﬂow.
We modiﬁed SpiderMonkey’s representation of JavaScript
objects to include security labels. We also enhanced the in-
terpretation of JavaScript bytecode instructions to modify
labels, thereby propagating information ﬂow. We also mod-
iﬁed other browser subsystems, including the DOM subsys-
tem (e.g., HTML, XUL and SVG elements) and XPCOM, to
store and propagate security labels, thereby allowing infor-
mation ﬂow tracking across browser subsystems. This ap-
proach allows us to satisfy our design goals. All JavaScript
code is executed by the interpreter, thereby ensuring com-
plete mediation even in the face of browser vulnerabilities,
such as those discussed in Section 2. Moreover, associating
security labels directly with JavaScript objects and tracking
these labels within the interpreter and other browser subsys-
tems makes our approach robust to obfuscated JavaScript
code, e.g., as may be found in drive-by-download websites
that attempt to exploit browser and JSE vulnerabilities. Fi-
nally, the interpreter can readily identify the source of the
JavaScript bytecode currently being interpreted, thereby al-
lowing for easy action attribution.
Although Sabre’s approach of using browser modiﬁca-
tions to ensure JSE security is not as readily portable as,
say, language restrictions [1, 2, 33], this approach also en-
sures compatibility with legacy JSEs. For example, Ad-
safe [1] would reject JSEs containing dynamic code gen-
eration constructs, such as eval; in contrast, Sabre allows
arbitrary code in a JSE, but instead tracks information ﬂow.
An information-ﬂow tracker based on JavaScript instrumen-
tation will likely be portable across browsers; we plan to
investigate such an approach in future work.
3.1. Security Labels
Sabre associates each in-memory JavaScript object with a
pair of security labels. One label tracks the ﬂow of sensitive
information while the second tracks the ﬂow of low-integrity
information (to detect, respectively, violations of conﬁden-
tiality and integrity). We restrict our discussion to tracking
ﬂows of sensitive information because conﬁdentiality and
integrity are largely symmetric.
Each security label stores three pieces of information:
(i) a sensitivity level, which determines whether the ob-
ject associated with the label stores sensitive information;
(ii) a Boolean ﬂag, which determines whether the object was
modiﬁed by JavaScript code in a JSE; and (iii) the name(s)
of the JSE(s) and web domains that have modiﬁed the ob-
ject. The sensitivity level is used to determine possible infor-
mation ﬂow violations, e.g., if data derived from a sensitive
source is written to a low-sensitivity sink. However, Sabre
raises an alert only if the object was modiﬁed by a JSE. In
this case, Sabre reports the name(s) of the JSE(s) that have
modiﬁed the object. For example, in Figure 1, the DOM
node that stores the response from the GM xmlhttpRequest
call is marked sensitive. Further, the data contained in the
node is modiﬁed by executing code contained in Grease-
monkey, via the return value from GM xmlhttpRequest.
Consequently, Sabre raises an alert when the browser at-
tempts to transmit the DOM node via HTTP, e.g., when the
user submits a form containing this node.
Sabre’s policy of raising an alert only when an object is
modiﬁed by a JSE is key to avoiding false positives. Recall
that Sabre tracks the execution of all JavaScript code, in-
cluding code in web applications and in the browser core.
Although such tracking is necessary to detect attacks via
compromised/malicious ﬁles in the browser core, e.g., over-
lays from malicious JSEs, it can also report conﬁdential-
ity violations when sensitive data is accessed in legal ways,
such as when JavaScript in a web application accesses cook-
ies. Such accesses are sandboxed using other mechanisms,
e.g., the same-origin policy. We therefore restrict Sabre to
report an information-ﬂow violation only when a sensitive
object modiﬁed by JavaScript code in a JSE (or overlay code
derived from JSEs) is written to a low-sensitivity sink.
Security labels in Sabre allow for ﬁne-grained infor-
mation ﬂow tracking. Sabre associates a security label
with each JavaScript object, including objects of base type
(e.g., int, bool), as well as with complex objects such as
arrays and compound objects with properties. For com-
plex JavaScript objects, Sabre associates additional labels,
e.g., each element of an array and each property of a com-
pound object is associated with its own security label. In
385
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:05:07 UTC from IEEE Xplore.  Restrictions apply. 
particular, an object obj and its property obj.prop each have
their own security label.
Sabre stores security labels by directly modifying the in-
terpreter’s data structures that represent JavaScript objects.
Doing so considerably eases the design of label propagation
rules for a prototype-based language such as JavaScript. A
JavaScript object inherits all the properties of its ancestor
prototypes. Therefore an object’s properties may not di-
rectly be associated with the object itself. For example, an
object obj may access a property obj.prop, which in turn
may result in a chain of lookups to locate the property prop
in an ancestor prototype of obj. In this case, the sensitivity-
level of obj.prop is the sensitivity of the value stored in
prop. Sabre stores the label of the property prop with the
in-memory representation of prop. Its label can therefore
be accessed conveniently, even if an access to prop involves
a chain of multiple prototype lookups to locate the prop-
erty. Moreover, objects in JavaScript are passed by refer-
ence. Therefore, any operations that modify the object via
a reference to it, such as those in a function to which the
object is passed as a parameter, will also modify its label
appropriately when the interpreter accesses the in-memory
representation of that object.
JavaScript in a browser closely interacts with several
browser subsystems. Notably, the browser provides the
document and window interfaces via which JavaScript code
can interact with the DOM, e.g., a JSE can access and
modify window.location. However, such browser objects
are not stored and managed by the JavaScript interpreter.
Rather, each access to a browser object results in a cross-
domain call that gets/sets the value of the browser object.
To store security labels for such objects, Sabre also modi-
ﬁes the browser’s DOM subsystem to store security labels.
Each DOM node has an associated security label. This label
is accessed and transmitted by the browser to the JavaScript
interpreter when the DOM node is accessed in a JSE.
In addition to the DOM, cross-domain interfaces such as
XPCOM allow a JSE to interact with other browser sub-
systems, such as storage and networking. For example, the
following snippet uses XPCOM’s cookie manager.
var cookieMgr =
Components.classes["@mozilla.org/cookiemanager;1"].
getService(Components.interfaces.nsICookieManager);
var e = cookieMgr.enumerator;