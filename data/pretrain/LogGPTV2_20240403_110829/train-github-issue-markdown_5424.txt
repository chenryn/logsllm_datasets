tsc version 1.7.5  
target == es6
Notice how the import of 'routes' changes to 'routes_1' in the compiled
version ( _var routes_1 = require('../common/routes');_ ), but the object
literal for 'routes' ( _react_router_1.match({ routes, location: req.url
}_...) does not.
# INPUT
    // server.tsx
    const express = require('express');
    const app = express();
    import { renderToString } from 'react-dom/server';
    import {
        Route,
        Router,
        match,
        RoutingContext } from 'react-router';
    import React = require('react');
    import invariant = require('invariant');
    import {
        routes,
    } from '../common/routes';
    import {
        HttpMethods,
        RequestStates
    } from '../common/utils/http';
    app.get('*', (req: any, res: any) => {
      match({ routes, location: req.url }, (error: any, redirectLocation: any, renderProps: any) => {
        if (error) {
          res.status(500).send(error.message)
        } else if (redirectLocation) {
          res.redirect(302, redirectLocation.pathname + redirectLocation.search)
        } else if (renderProps) {
          console.log('renderProps', renderProps);
          res.status(200).send(renderToString())
        } else {
          res.status(404).send('Not found')
        }
      })
    });
    const server = app.listen(3000, function () {
      const host = server.address().address;
      const port = server.address().port;
      console.log('Example app listening at http://%s:%s', host, port);
    });
# OUTPUT
    const express = require('express');
    const app = express();
    var server_1 = require('react-dom/server');
    var react_router_1 = require('react-router');
    var React = require('react');
    var routes_1 = require('../common/routes');
    app.get('*', (req, res) => {
        react_router_1.match({ routes, location: req.url }, (error, redirectLocation, renderProps) => {
            if (error) {
                res.status(500).send(error.message);
            }
            else if (redirectLocation) {
                res.redirect(302, redirectLocation.pathname + redirectLocation.search);
            }
            else if (renderProps) {
                console.log('renderProps', renderProps);
                res.status(200).send(server_1.renderToString(React.createElement(react_router_1.RoutingContext, React.__spread({}, renderProps))));
            }
            else {
                res.status(404).send('Not found');
            }
        });
    });
    const server = app.listen(3000, function () {
        const host = server.address().address;
        const port = server.address().port;
        console.log('Example app listening at http://%s:%s', host, port);
    });```