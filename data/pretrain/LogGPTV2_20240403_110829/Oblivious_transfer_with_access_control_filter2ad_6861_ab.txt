protocol, the user obtains the access credential cred c and
the updated state stU
(cid:2)
• DBSetup
(pk DB, ER1, . . . , ERN ), sk DB
To initiate a database containing records R1, . . . , RN pro-
tected by access control lists ACL1, . . . , ACLN , the database
server runs the DBSetup algorithm. This generates the en-
crypted database consisting of a public key pk DB and en-
crypted records ER1, . . . , ERN . The encrypted database is
made available to all users, e.g. by posting it on a website.1
The server keeps the secret key to the database sk DB for
itself.
• Transfer: Common input: pk I, pk DB
(cid:3) $→
(cid:3)
• ISetup(C ) $→ (pk I, sk I)
The issuer runs the randomized ISetup algorithm to gener-
ate a public key pk I and corresponding secret key sk I for
security parameter κ and category universe C . He publishes
the public key as a system-wide parameter.
• Issue: Common input: pk I, c
User input: σ, ERσ, ACLσ,{cred c}c∈ACLσ , stU
Database input: sk DB
User output: Rσ or ⊥, stU
(cid:3)
When the user wants to access a record in the database,
she engages in a Transfer protocol with the database server.
Common inputs are the issuer’s public key pk I and that of
the database pk DB. The user has as a secret input her se-
lection index σ ∈ {1, . . . , N}, the required credentials cred c
for all c ∈ ACLσ, and possibly state information stU. The
database server uses its secret key sk DB as a private input.
At the end of the protocol, the user obtains the database
record Rσ or ⊥ indicating failure, and updated state stU
.
(cid:3)
We assume that all communication links are private. We
also assume that the communication links between a user
and the issuer are authenticated, so that the issuer always
knows which user it is handing a credential to. The commu-
nication links between a user and the database are assumed
to be anonymous however, so that the database does not
know which user is making a record query. (Authenticat-
ed communication channels between users and the database
would obviously ruin the strong anonymity properties of our
protocol.)
2.3 Security
We deﬁne security of an AC-OT protocol through indistin-
guishability of a real-world and an ideal-world experiment as
introduced by the UC framework [17, 18] and the reactive
systems security models [32, 33]. The deﬁnitions we give,
1We assume that each user obtains a copy of the entire en-
crypted database. It is impossible to obtaining our strong
privacy requirements with a single database server without
running into either computation or communication complex-
ity that is linear in the database size.
133however, do not entail all formalities necessary to ﬁt one of
these frameworks; our goal here is solely to prove security of
our scheme.
We summarize the ideas underlying these models. In the
real world there are a number of players, who run some
cryptographic protocols with each other, an adversary A,
who controls some of the players, and an environment E.
The environment provides the inputs to the honest players
and receives their outputs and interacts arbitrarily with the
adversary. The dishonest players are subsumed into the ad-
versary.
In the ideal system, we have the same players. Howev-
er, they do not run any cryptographic protocols but send
all their inputs to and receive all their outputs from an ide-
al all-trusted party T. This party computes the output of
the players from their inputs, i.e., applies the functionality
that the cryptographic protocol(s) are supposed to realize.
The environment again provides the inputs to and receives
the output from the honest players, and interacts arbitrarily
with the adversary controlling the dishonest players.
A (set of) cryptographic protocol(s) is said to securely im-
plement a functionality if for every real-world adversary A
and every environment E there exists an ideal-world simu-
(cid:3)
lator A
controlling the same parties in the ideal world as
A does in the real world such that the environment cannot
distinguish whether it is run in the real world interacting
with A or whether it is run in the ideal world interacting
(cid:3)
with the simulator A
.
Definition 2.1. Let RealE,A(κ) denote the probability
that E outputs 1 when run in the real world with A and
IdealE,A(cid:2)(κ) denotes the probability that E outputs 1 when
(cid:3)
run in the ideal world interacting with A
, then the (set
of) cryptographic protocols is said to securely implement the
functionality T if
RealE,A(κ) − IdealE,A(cid:2)(κ)
is a negligible function in κ.
The real world. We ﬁrst describe how the real world
algorithms presented in §2.2 are orchestrated when all par-
ticipants are honest, i.e., honest real-world users U1, . . . UM ,
an honest issuer I, and an honest database DB. Parties con-
trolled by the real-world adversary A can arbitrarily deviate
from the behavior described below.
All begins with the issuer I generating a key pair
(pk I, sk I) $← Issue(1κ, C ) and sending pk I to all users U1, ..
UM and the database DB.
When the environment E sends a message (initdb, DB =
(Ri, ACLi)i=1,...,N ) to the database DB, the latter encrypts
$← DBSetup(pk I, DB), and
DB by running (EDB , sk DB)
sends the encrypted database EDB = (pk DB, ER1, . . . ERN )
to all users U1, . . . , UM .
When E sends a message (issue, c) to user Uj, Uj engages
in an Issue protocol with I on common input pk I and category
c, with I using sk I as its secret input, at the end of which Uj
obtains the access credential cred ci. User Uj returns a bit
b to the environment indicating whether the issue protocol
succeeded (b = 1) or failed (b = 0).
When E sends a message (transfer, σ) to user Uj, then
Uj ﬁrst checks whether it has the necessary credentials
{cred c}c∈ACLσ to access record Rσ.
If so, she engages in
a Transfer protocol with DB on common input pk I, pk DB, on
relevant
input σ and the
Uj’s private
credentials
{cred c}c∈ACLσ , and on DB’s private input sk DB, until Uj
obtains the record Rσ, or ⊥ indicating failure. If the trans-
fer succeeded she returns Rσ to the environment; if it failed,
or the user didn’t have the appropriate credentials, she re-
turns ⊥ to the environment.
We note that I and DB do not return any outputs to the
environment.
The ideal world. In the ideal world all participants com-
municate through a trusted party T which implements the
functionality of our protocol. We describe the behavior of
(cid:3)
(cid:3)
T on the inputs of the ideal-world users U
1, . . . , U
M , the
(cid:3)
(cid:3)
ideal-world issuer I
, and the ideal-world database DB
.
(cid:3)
(cid:3)
The trusted party T maintains an initially empty set Ci
i and sets DB ← ⊥. It responds to queries
(cid:3)
for each user U
from the diﬀerent parties as follows.
• Upon receiving (initdb, (Ri, ACLi)i=1,...,N ) from DB
sets DB ← (Ri, ACLi)i=1,...,N .
• Upon receiving (issue, c) from U
(cid:3)
(cid:3)
i, T sends (issue, U
i,
c) = arg to I
who sends back a bit b. If b = 1 then the T
(cid:3)
adds c to Ci and sends b to U
i; otherwise it simply sends b
(cid:3)
to U
i.
• Upon receiving (transfer, σ) from U
(cid:3)
i, T proceeds as fol-
lows. If DB (cid:7)= ⊥, it sends transfer to DB
(cid:3)
, who sends back
a bit b. If b = 1 and ACLσ ⊆ Ci, then it sends the record
i. If b = 0 or DB = ⊥ it sends ⊥ to U
(cid:3)
(cid:3)
Rσ to U
i.
, T
(cid:3)
(cid:3)
M , I, DB simply relay in-
1, . . . , U
The ideal-world parties U
puts and outputs between the environment E and the trusted
party T.
Security Properties. Let us discuss some of the security
properties that the ideal world (and therefore also any secure
real-world implementation) oﬀers to the parties. It is easy
to verify that these properties hold for the ideal world.
User Privacy: The database cannot tell which user makes
a query, nor can it tell which record is being accessed. That
is, the database only gets to know that some user accesses
some record for which the user priorly obtained the neces-
sary credentials.
If the database colludes with the issuer
and potentially with other users, then they can only try to
identify the user or her selection based on which credentials
were issued to whom, and which credentials are necessary to
successfully access which record.
Database Security: A cheating user alone cannot access a
record for which she does not have the necessary credentials.
Colluding users cannot pool their credentials, meaning that
they cannot access any records that none of them would have
been able to obtain individually. If the issuer colludes with
one or more users, they can only obtain as many records
from the database as the number of transfer queries that
were performed.
3. PRELIMINARIES
Let Pg(1κ) be a pairing group generator that on input
1κ outputs descriptions of multiplicative groups G1, GT of
prime order p where |p| > κ. Let Pg(p) be a pairing group
generator that on input p outputs descriptions of multiplica-
tive groups G1, GT of prime order p.
1341 = G1 \ {1} and let g ∈ G
∗
∗
Let G
1. The generated groups
are such that there exists an admissible bilinear map e :
G1 × G1 → GT, meaning that (1) for all a, b ∈ Zp it holds
that e(ga, gb) = e(g, g)ab; (2) e(g, g) (cid:7)= 1; and (3) the bilinear
map is eﬃciently computable.
Definition 3.1. We say that the (cid:6)-strong Diﬃe-Hellman
((cid:6)-SDH) assumption [4] holds in group G1 of order p > 2κ
(cid:5)
if for all polynomial-time adversaries A the advantage
(cid:4)
Adv(cid:4)SDH
G1
(κ) = Pr
A(g, gx, . . . , gx
) = (c, g
1/(x+c))
(cid:3)
is a negligible function in κ, where g
Definition 3.2. We say that
$← Zp.
the decision (cid:6)-bilinear
Diﬃe-Hellman exponent ((cid:6)-BDHE) assumption [6] holds in
groups G1, GT of order p > 2κ if for all polynomial-time
adversaries A the advantage Adv(cid:4)BDHE
$← G
∗
1 and x, c
G1,GT (κ) given by
(cid:4)
(cid:4)
Pr
− Pr
A(g, h, gα, . . . , gα
(cid:3)−1
(cid:3)+1
, gα
2(cid:3)
, . . . , gα
, e(g, h)α
(cid:3)
A(g, h, gα, . . . , gα
(cid:3)−1
(cid:3)+1
, gα
(cid:5)
) = 1
(cid:5)
2(cid:3)
, . . . , gα
$← G
∗
1, S
, S) = 1
$← G
∗
T and
is a negligible function in κ, where g, h
$← Zp
α
Definition 3.3. We say that the (cid:6)-power decision Diﬃe-
Hellman ((cid:6)-PDDH) assumption [14] holds in groups G1, GT
for all polynomial-time adversaries A the advantage
if
Adv(cid:4)PDDH
G1,GT (κ) given by
(cid:4)
Pr
A(g, gα, . . . , gα
(cid:4)
(cid:3)
2
, H, H α, H α
(cid:3)
. . . , H α
) = 1
− Pr
A(g, gα, . . . , gα
(cid:3)
(cid:5)
(cid:5)
, H, H1, . . . , H(cid:4)) = 1
$← G
∗
1, H, H1, . . . , H(cid:4)
$←
is a negligible function in κ, where g