against a EIR to verify the phone has not been reported as
stolen. At that point, the IMEI could be reprogrammed to a
single value, similar to our changes to the SUPI. Additionally,
PGPP users can readily switch SIMs to different handsets
(IMEIs) at-will. Note that different jurisdictions have differ-
ent rules about whether, how, and by whom an IMEI can be
changed, so only in some cases IMEI changes require cooper-
ation with the MVNO.
Is PGPP legal? Legality varies by jurisdiction. For ex-
ample, U.S. law (CALEA [1]), requires providers to offer
lawful interception of voice and SMS trafﬁc. A PGPP-based
carrier is data-only, with voice and messaging provided by
third parties. CALEA requires the provider to offer content of
communication data at the UPF, e.g., raw (likely-encrypted)
network trafﬁc. This is supported by PGPP. To the best of our
knowledge this would make PGPP legal.
4 Design
In this section we describe the mechanisms PGPP em-
ploys to increase user identity and location privacy. Ultimately,
PGPP’s design choices appear obvious in retrospect. We be-
lieve its simplicity is an asset, as PGPP is compatible with
existing networks and immediately deployable.
In order to provide identity privacy against bulk attacks,
we nullify the value of the SUPI, as it is the most common
target identiﬁer for attackers. In our design, we choose to set
all PGPP user SUPIs to an identical value to break the link
between SUPI and individual users. This change requires a
fundamental shift in the architecture, as SUPIs are currently
used for connectivity as well as authentication, billing, and
voice/SMS routing. This change also requires us to disable
SUPI-based paging in lieu of paging using only temporary
identiﬁers (e.g., GUTIs). We design a new cellular entity for
billing and authentication that preserves identity privacy. For-
tunately, the industry push for software-based NGCs makes
our architecture feasible. We describe the architecture in Sec-
tion 4.1.
To provide location privacy from targeted attacks, PGPP
leverages an existing mechanism (TALs) in the cellular spec-
iﬁcation in order to grow the broadcast domain for control
trafﬁc (Section 4.2). By changing the broadcast domain for
every user, the potential location of a victim is broadened
from the attacker’s vantage point.
1742    30th USENIX Security Symposium
USENIX Association
4.1 User identity privacy
As discussed in Secton 2.2, SUPIs are globally unique,
permanent identiﬁers. As such, they are routinely targeted
by attackers, both legal and illegal. In this section we re-
architect the network in order to thwart bulk attacks introduced
in Section 3.1 that are based on identifying individuals via
SUPI.
We decouple back-end connectivity from the authentica-
tion procedure that normally occurs at the AUSF when a UE
attaches to the network. Instead, the PGPP operator issues
SIM cards with identical SUPIs to all of its subscribers. In
this model, the SUPI is used only to prove that a user has a
valid SIM card to use the infrastructure and, in turn, the PGPP
network can provide an IP address and connectivity and offer
the client a GUTI, providing the user with a unique identity
necessary for basic connectivity. Note that using identical
SUPIs is only one technique for nullifying its value. We antic-
ipate that a network could assign random SUPIs from a pool.
Such a mechanism would require a sufﬁciently large pool,
and would be enabled as more UEs employ eSIM capabilities,
allowing their SIMs to be programmable from the network.
We leave exploration into this as future work.
5G authentication is normally accomplished using SUPIs at
the AUSF; however, all PGPP users share a single SUPI. Thus,
to authenticate a user, we designed a post-attach oblivious
authentication scheme to ensure that the PGPP operator is
able to account for the user without knowing who they are.
PGPP Gateway.
In order to perform this authentication we
create a new logical entity called a PGPP Gateway (PGPP-
GW), shown in Figure 1, which sits between the UPF and
the public Internet. The UPF is conﬁgured to have a ﬁxed
tunnel to a PGPP-GW, which can be located outside of the
PGPP operator’s network. Using this mechanism, the PGPP-
GW only sees an IP address, which is typically NATed4, and
whether that IP address is a valid user. Notably, it does not
have any information about the user’s SUPI or GUTI. The
PGPP-GW design also allows for many different architectures.
For instance, multiple PGPP-GWs could be placed in multiple
datacenters or even use a privacy service such as Tor.
Authentication properties. From the perspective of the
PGPP-GW, there are multiple properties an authentication
scheme must guarantee: (1) the gateway can authenticate that
a user is indeed a valid customer5; (2) the gateway and/or any
other entities cannot determine the user’s identity, and thus
cannot link the user’s credentials/authentication data with a
user identity; and (3) the gateway can determine whether a
user is unique or if two users are sharing credentials.
4Like GUTIs, we anticipate that IP addresses will be assigned using a
solution that is robust to de-anonymization attacks.
5Due to “Know Your Customer” rules in some jurisdictions, the provider
may need to have a customer list, necessitating that the user authentication
scheme be compatible with periodic explicit customer billing.
Scheme
Standard auth
Group/ring sig
Linkable ring sig
Cryptocurrency
PGPP tokens
•
•
•
•
Customer? Anonymous? Unique?
•
•
•
•
•
•
Table 3: Three properties needed for user authentication in a
privacy-preserving cell network and schemes to achieve them.
As we show in Table 3, the challenge is that standard ap-
proaches for authentication only provide one of the three
required properties and widely-studied cryptographic mech-
anisms only provide two of the three properties. For exam-
ple, an ordinary authentication protocol (of which there are
many [7,38]) can provide property 1) but not 2) and 3). A cryp-
tographic mechanism such as group signatures [8, 13] or ring
signatures [20,64] can protect the user’s identity upon authen-
tication, providing properties 1) and 2), but not 3) as providing
the last property would violate the security of the signature
scheme. Similarly, traitor tracing schemes [14] (such as for
broadcast encryption [25]) can provide all three properties
but in practice cannot provide property 3) as the traitor trac-
ing would require actual physical conﬁscation of the “traitor”
phone by the MVNO, which is infeasible. A variation on ring
signatures known as linkable ring signatures [50] provides
the ability for a user’s identity to be revealed if the user signs
multiple messages with the same key. While this is useful in
establishing that the user is unique and hasn’t shared their
credentials, it also partially violates the user’s anonymity, as
that key cannot be used again.
Effective authentication. There are two approaches that
we view as viable, depending on the circumstances. An
anonymity-preserving cryptocurrency can provide properties
2) and 3), but not 1) as a cryptocurrency would combine
billing and authentication at the PGPP-GW. For MVNOs
that are not required to know their customers, an anonymity-
preserving cryptocurrency may be the ideal solution for both
user authentication and payment, though even the best coins
provide imperfect anonymity guarantees [39].
To provide all three properties, we develop a simple scheme
called PGPP tokens that helps us sidestep the issues with al-
ternative approaches. The choice of authentication scheme is
deployment-context speciﬁc. With PGPP tokens, when paying
a monthly bill a user retrieves authentication tokens that are
blind-signed using a FDH-based variant of Chaum’s classic
scheme [6, 12] by the billing system. Later, when authenticat-
ing to the service, the user presents tokens and the service (the
PGPP-GW) veriﬁes their signature before allowing the user
to use the network. The token scheme ensures that the service
can check the validity of tokens without identifying the user
requesting access. The user then presents the next token in
USENIX Association
30th USENIX Security Symposium    1743
advance so as to ensure seamless service. Note that PGPP
tokens disallow the post-pay model for cellular billing, as the
network would be required to know the identity of users in
order to accurately charge them for usage. Therefore, PGPP
is pre-pay only, though this can be adjusted to emulate post-
payment (e.g., users pre-pay for tokens on an ongoing basis
rather than only monthly, and tokens are valid for a longer
time period, such as a year, rather than for only one billing
period).
Each token represents a unit of access, as is appropriate
for the service provider. Some providers may choose to offer
ﬂat-rate unlimited-data service, in which case each token
represents a ﬁxed period of time; this is the default approach
that we use to describe the scheme below. Other providers
may choose to offer metered service, in which case each token
represents a ﬁxed unit of data, such as 100 MB or 1 GB, rather
than a period of time. Still others may choose to provide two-
tiered service priority by marking each token with a priority
bit, in addition to either unlimited data or metered data service;
such prioritization does come with slight privacy loss, as the
MVNO and MNO alike would be able to differentiate which
priority level was in use. The privacy loss of two-tiered data
priority can be partially mitigated by offering all users some
amount of time or GB of high-priority service after which
they must fall back to low-priority service; such a service
plan structure is fairly standard in the industry today. In such
a setting, each user would have both high-priority and low-
priority tokens and thus would not be clearly stratiﬁed into
two identiﬁable groups of users.
At the beginning of a billing period, the billing system de-
ﬁnes s time slices (e.g., corresponding to hours) or another
unit of access (e.g., a unit of data) and generates s RSA key-
pairs for performing blind signatures using Chaum’s scheme.
It then appends the public keys for this time period to a well-
known public repository that is externally maintained (e.g., on
GitHub), and these are fetched by users. The user generates s
tokens where each token takes the form i(cid:107)r where i is the time
slice index as a 256-bit unsigned value zero indexed from the
beginning of the billing period, and r is a 256-bit random
value chosen by the user. The user then blinds the hash of
the tokens. The user pays the bill using a conventional means
of payment (e.g., credit card), and presents the blinded token
hashes to the billing system to be signed; the system signs
each token with the corresponding time slice key and returns
these values to the user. The user unblinds the response values
and veriﬁes the signatures for each.
Upon later authentication to the service, the user presents
its signed token for the current time slice to the PGPP-GW,
which veriﬁes the signature and if valid begins forwarding
the user’s trafﬁc onto the Internet. Since the token signature
was generated using Chaum’s scheme, the service cannot
determine which human user corresponds to which signed
token. If the same token is used by two different users during
the same time period then the service can conclude that a user
has shared their credentials and is attempting to cheat.
The costs of this scheme to both the PGPP operator and
the user are low. The operator stores the list of used tokens
in a standard consistent and replicated cloud database, so the
service can operate multiple PGPP-GWs, though it is likely
that a small number of PGPP-GWs can serve a large number
of users: we benchmarked the 2048-bit RSA signature veri-
ﬁcation used here at 31µs per call using Crypto++ [21] on a
single core of a 2.6GHz Intel Xeon E5-2640 CPU, and thus
with a single CPU core the PGPP-GW can handle token veri-
ﬁcation for tens of millions of users. The tokens themselves
are small and the storage cost to the provider is about 1.5 MB
/ user per time period, which is a small amount for any user’s
phone to store and for a provider even hundreds of millions
of tokens amounts to mere GBs of data in cloud storage.
User device agent. To automate the process of authenti-
cating with the PGPP-GW, we create a simple agent that
runs as background job on the user device. This agent lever-
ages the Android JobScheduler API; in the event of cellular
connectivity, the JobScheduler triggers PGPP-token-based
authentication with the PGPP-GW. The agent establishes a
TLS connection to the PGPP-GW and then sends the token
for the current time slice. Once the user presents a valid to-
ken, the PGPP-GW begins forwarding trafﬁc for that user,
and thus this behavior is akin to a captive portal though the
authentication is automatic and unseen by the user.
4.2 Location privacy
As described in Section 2.2, cellular operators track user
location in the form of tracking areas for UEs in order to
quickly ﬁnd users when there is incoming content. PGPP
leverages an existing mechanism in the cellular standard to
reduce the effectiveness of local-targeted attacks described in
Section 3.1.
Paging has been exploited in the past to discover user lo-
cation by adversaries. However, the use of tracking areas is
useful for the cellular provider in that it conﬁnes the signal-
ing message load (i.e., paging messages) to a relatively small
subset of the infrastructure. Tracking areas reduce mobility
signaling from UEs as they move through the coverage zone
of a single tracking area. Note that emergency calling rep-
resents a special case in cellular networks. When a device
dials 911, the phone and network attempt to estimate accurate
location information. In this work we do not alter this func-
tionality as we anticipate that users dialing 911 are willing to
reveal their location.
In PGPP, we exploit the tracking area list (TAL) concept,
introduced in 3GPP Release 8 [2]. Using TALs, a UE no
longer belongs to a single tracking area, but rather is given a
list of up to 16 tracking areas that it can freely move through
without triggering a tracking area update, essentially creating
larger tracking areas. Whereas prior work has focused on us-
ing TALs to pre-compute optimal tracking area combinations
1744    30th USENIX Security Symposium
USENIX Association
for users [60–62], in PGPP, we use TALs to provide improved
location anonymity. Typically, TALs consist of groups of adja-
cent tracking areas that are pre-computed, essentially growing
the tracking area for a UE to the union of all tracking areas in
the TAL. We do not use TALs in this way. Instead, we gen-
erate TALs on-the-ﬂy and generate them uniquely for each
UE. When a UE attaches or issues a tracking area update
message, the AMF learns the gNodeB and tracking area the
UE is currently attached to. The AMF then generates a unique
TAL by iteratively selecting at random some number (up to
the TAL limit of 16) of additional, adjacent tracking areas. By
generating unique TALs for each user, attackers are unable to
know a priori which set of tracking areas (or gNodeBs) that
victim is within. We explore tradeoffs in terms of TAL length,
control trafﬁc overhead, and location anonymity in the next
section.
5 Analysis
To study the implications of a PGPP deployment, we create
a simulation to model users, mobility, and cell infrastructure.
We study the impact of PGPP’s design on various cellular at-
tacks that occur today. We then analyze the inherent tradeoffs
from the PGPP operator’s perspective, as improved privacy
comes at the price of increased control trafﬁc. Lastly, we
examine PGPP in a lab testbed on real devices.
5.1 Simulation conﬁguration
gNodeB dataset. We select Los Angeles County, California