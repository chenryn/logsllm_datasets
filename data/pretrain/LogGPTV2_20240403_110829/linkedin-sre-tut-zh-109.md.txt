# 性能调优
> 原文：
性能工具是开发/运营生命周期的重要组成部分，对于理解应用行为非常重要。SRE 通常使用这些工具来评估服务的表现，并相应地做出/建议改进。
### 性能分析命令
在对系统或服务进行性能分析时，这些命令中的大多数都是必须知道的。
*   top -:显示正在运行的系统、进程、线程等的实时视图。
*   htop -:类似于 top command，但是比它更具交互性。
*   iotop -:一个交互式磁盘 I/O 监控工具。
*   vmstat -:虚拟内存统计浏览器。
*   iostat -:用于设备和分区的输入/输出统计的监控工具。
*   free -:告诉物理内存和交换内存的信息。
*   sar -:系统活动报告，报告不同指标，如 cpu、磁盘、内存、网络等。
*   mpstat -:显示关于 CPU 利用率和性能的信息。
*   lsof -:提供关于打开文件列表的信息，由哪些进程打开。
*   性能分析工具。
### 分析工具
分析是服务性能分析的重要组成部分。有各种各样的分析器工具，可以帮助找出最常见的代码路径、调试、内存分析等。这些可以生成热图，以了解负载下的代码性能。
*   [Flame graph](https://github.com/brendangregg/FlameGraph):Flame graph 是剖析软件的可视化，允许快速准确地识别最频繁的代码路径。
*   Valgrind :这是一个用于内存调试、内存泄漏检测和分析的编程工具。
*   Gprof : GNU profiler 工具混合使用了检测和采样。检测用于收集函数调用信息，采样用于收集运行时分析信息。
要了解 LinkedIn 如何对其服务进行按需分析，请阅读 LinkedIn 博客 [ODP:按需服务分析的基础设施](https://engineering.linkedin.com/blog/2017/01/odp--an-infrastructure-for-on-demand-service-profiling)
### 标杆管理
这是一个衡量服务最佳性能的过程。比如 QPS 服务可以处理多少，负载增加时的延迟，主机资源利用率，负载平均值等。在将服务部署到生产环境之前，回归测试(即负载测试)是必须的。
**一些已知的工具-:**
*   Apache 基准测试工具 ab :，它模拟 webapp 上的高负载并收集数据进行分析
*   [Httperf](https://github.com/httperf/httperf) :它以指定的速率向 web 服务器发送请求并收集统计数据。增加，直到找到饱和点。
*   Apache JMeter :这是一个流行的开源工具，用来测量 web 应用的性能。JMeter 是一个基于 java 的应用，不仅仅是一个 web 服务器，你可以用它来对抗 PHP、Java、REST 等等。
*   这是另一种现代的性能测量工具，它可以给你的网络服务器增加负载，给出延迟、每秒请求数、每秒传输数等等。细节。
*   [Locust](https://github.com/locustio/locust) :易用、可脚本化、可扩展的性能测试工具。
**限制-:**
上述工具有助于进行综合负载或压力测试，但这并不能衡量实际的最终用户体验，It 无法了解最终用户资源将如何影响应用性能，这是由于内存、CPU 不足或互联网连接不畅造成的。
为了了解 LinkedIn 如何在其车队中进行负载测试。阅读:[用全自动负载测试消除辛劳](https://engineering.linkedin.com/blog/2019/eliminating-toil-with-fully-automated-load-testing)
了解 LinkedIn 如何利用实时监控(RUM)数据来克服负载测试的局限性，并帮助改善最终用户的整体体验。阅读:[使用 RUM 数据可视化监控和提高 Web 性能](https://engineering.linkedin.com/performance/monitor-and-improve-web-performance-using-rum-data-visualization)
### 扩缩容
根据资源的可用性，优化设计的系统只能在一定限度内运行。持续优化总是需要的，以确保在高峰期对资源的最佳利用。随着 QPS 的增加，系统需要扩展。我们既可以纵向扩展，也可以横向扩展。垂直可扩展性有其局限性，因为只能将 cpu、内存、磁盘、GPU 和其他规格增加到一定的限度，而水平可扩展性可以在应用设计和环境属性的限制下轻松无限地增长。
扩展 web 应用需要以下部分或全部条件:
*   通过添加更多主机来减轻服务器负载。
*   使用负载平衡器在服务器之间分配流量。
*   通过数据分片和增加读取副本来纵向扩展数据库。
这里有一篇关于 LinkedIn 如何扩展其应用堆栈的好文章[LinkedIn 扩展简史](https://engineering.linkedin.com/architecture/brief-history-scaling-linkedin)