and is for debugging only. Most stores don't accept this kind of certificate for publishing; therefore, a certificate with
more secure features must be created. When an application is installed on the Android device, the Package Manager
ensures that it has been signed with the certificate included in the corresponding APK. If the certificate's public key
matches the key used to sign any other APK on the device, the new APK may share a UID with the pre-existing APK.
This facilitates interactions between applications from a single vendor. Alternatively, specifying security permissions
for the Signature protection level is possible; this will restrict access to applications that have been signed with the
same key.
APK Signing Schemes
Android supports three application signing schemes. Starting with Android 9.0, APKs can be verified with APK
Signature Scheme v3 (v3 scheme), APK Signature Scheme v2 (v2 scheme) or JAR signing (v1 scheme). For Android
7.0 and above, APKs can be verified with the APK Signature Scheme v2 (v2 scheme) or JAR signing (v1 scheme).
For backwards compatibility, an APK can be signed with multiple signature schemes in order to make the app run on
both newer and older SDK versions. Older platforms ignore v2 signatures and verify v1 signatures only.
JAR Signing (v1 Scheme)
The original version of app signing implements the signed APK as a standard signed JAR, which must contain all the
entries in META-INF/MANIFEST.MF . All files must be signed with a common certificate. This scheme does not protect
some parts of the APK, such as ZIP metadata. The drawback of this scheme is that the APK verifier needs to process
99
Platform Overview
untrusted data structures before applying the signature, and the verifier discards data the data structures don't cover.
Also, the APK verifier must decompress all compressed files, which takes considerable time and memory.
APK Signature Scheme (v2 Scheme)
With the APK signature scheme, the complete APK is hashed and signed, and an APK Signing Block is created and
inserted into the APK. During validation, the v2 scheme checks the signatures of the entire APK file. This form of APK
verification is faster and offers more comprehensive protection against modification. You can see the APK signature
verification process for v2 Scheme below.
APK Signature Scheme (v3 Scheme)
The v3 APK Signing Block format is the same as v2. V3 adds information about the supported SDK versions and a
proof-of-rotation struct to the APK signing block. In Android 9 and higher, APKs can be verified according to APK
Signature Scheme v3, v2 or v1 scheme. Older platforms ignore v3 signatures and try to verify v2 then v1 signature.
The proof-of-rotation attribute in the signed-data of the signing block consists of a singly-linked list, with each node
containing a signing certificate used to sign previous versions of the app. To make backward compatibility work, the
old signing certificates sign the new set of certificates, thus providing each new key with evidence that it should be as
trusted as the older key(s). It is no longer possible to sign APKs independently, because the proof-of-rotation structure
must have the old signing certificates signing the new set of certificates, rather than signing them one-by-one. You
can see the APK signature v3 scheme verification process below.
100
Platform Overview
Creating Your Certificate
Android uses public/private certificates to sign Android apps (.apk files). Certificates are bundles of information; in
terms of security, keys are the most important type of this information Public certificates contain users' public keys,
and private certificates contain users' private keys. Public and private certificates are linked. Certificates are unique
and can't be re-generated. Note that if a certificate is lost, it cannot be recovered, so updating any apps signed with
that certificate becomes impossible. App creators can either reuse an existing private/public key pair that is in an
available KeyStore or generate a new pair. In the Android SDK, a new key pair is generated with the keytool
command. The following command creates a RSA key pair with a key length of 2048 bits and an expiry time of 7300
days = 20 years. The generated key pair is stored in the file 'myKeyStore.jks', which is in the current directory):
$ keytool -genkey -alias myDomain -keyalg RSA -keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass
myStrongPassword
Safely storing your secret key and making sure it remains secret during its entire life cycle is of paramount
importance. Anyone who gains access to the key will be able to publish updates to your apps with content that you
don't control (thereby adding insecure features or accessing shared content with signature-based permissions). The
trust that a user places in an app and its developers is based totally on such certificates; certificate protection and
secure management are therefore vital for reputation and customer retention, and secret keys must never be shared
with other individuals. Keys are stored in a binary file that can be protected with a password; such files are referred to
as 'KeyStores'. KeyStore passwords should be strong and known only to the key creator. For this reason, keys are
usually stored on a dedicated build machine that developers have limited access to. An Android certificate must have
a validity period that's longer than that of the associated app (including updated versions of the app). For example,
Google Play will require certificates to remain valid until Oct 22nd, 2033 at least.
Signing an Application
The goal of the signing process is to associate the app file (.apk) with the developer's public key. To achieve this, the
developer calculates a hash of the APK file and encrypts it with their own private key. Third parties can then verify the
app's authenticity (e.g., the fact that the app really comes from the user who claims to be the originator) by decrypting
the encrypted hash with the authorâ€™s public key and verifying that it matches the actual hash of the APK file.
Many Integrated Development Environments (IDE) integrate the app signing process to make it easier for the user. Be
aware that some IDEs store private keys in clear text in configuration files; double-check this in case others are able
to access such files and remove the information if necessary. Apps can be signed from the command line with the
'apksigner' tool provided by the Android SDK (API Level 24 and higher). It is located at [SDK-Path]/build-
101
Platform Overview
tools/[version] . For API 24.0.2 and below, you can use 'jarsigner', which is part of the Java JDK. Details about the
whole process can be found in official Android documentation; however, an example is given below to illustrate the
point.
$ apksigner sign --out mySignedApp.apk --ks myKeyStore.jks myUnsignedApp.apk
In this example, an unsigned app ('myUnsignedApp.apk') will be signed with a private key from the developer
KeyStore 'myKeyStore.jks' (located in the current directory). The app will become a signed app called
'mySignedApp.apk' and will be ready to release to stores.
Zipalign
The zipalign tool should always be used to align the APK file before distribution. This tool aligns all uncompressed
data (such as images, raw files, and 4-byte boundaries) within the APK that helps improve memory management
during app run time.
Zipalign must be used before the APK file is signed with apksigner.
Publishing Process
Distributing apps from anywhere (your own site, any store, etc.) is possible because the Android ecosystem is open.
However, Google Play is the most well-known, trusted, and popular store, and Google itself provides it. Amazon
Appstore is the trusted default store for Kindle devices. If users want to install third-party apps from a non-trusted
source, they must explicitly allow this with their device security settings.
Apps can be installed on an Android device from a variety of sources: locally via USB, via Google's official app store
(Google Play Store) or from alternative stores.
Whereas other vendors may review and approve apps before they are actually published, Google will simply scan for
known malware signatures; this minimizes the time between the beginning of the publishing process and public app
availability.
Publishing an app is quite straightforward; the main operation is making the signed .apk file downloadable. On Google
Play, publishing starts with account creation and is followed by app delivery through a dedicated interface. Details are
available at the official Android documentation.
Android Application Attack surface
The Android application attack surface consists of all components of the application, including the supportive material
necessary to release the app and to support its functioning. The Android application may be vulnerable to attack if it
does not:
Validate all input by means of IPC communication or URL-schemes, see also:
Testing for Sensitive functionality Exposure Through IPC
Testing URL Schemes
Validate all input by the user in input fields.
Validate the content loaded inside a WebView, see also:
Testing JavaScript execution in WebViews
Testing WebView Protocol Handlers
Determining Whether Java Objects Are Exposed Through WebViews
Securely communicate with backend servers or is susceptible to man-in-the-middle attacks between the server
and the mobile application, see also:
Testing Network Communication
Android Network APIs
102
Platform Overview
Securely stores all local data, or loads untrusted data from storage, see also:
Data Storage on Android
Protect itself against compromised environments, repackaging or other local attacks, see also:
Android Anti-Reversing Defenses
103
Setting up a Testing Environment for Android Apps
Android Basic Security Testing
Basic Android Testing Setup
By now, you should have a basic understanding of the way Android apps are structured and deployed. In this chapter,
we'll talk about setting up a security testing environment and describe basic testing processes you'll be using. This
chapter is the foundation for the more detailed testing methods discussed in later chapters.
You can set up a fully functioning test environment on almost any machine running Windows, Linux, or Mac OS.
Host Device
At the very least, you'll need Android Studio (which comes with the Android SDK) platform tools, an emulator, and an
app to manage the various SDK versions and framework components. Android Studio also comes with an Android
Virtual Device (AVD) Manager application for creating emulator images. Make sure that the newest SDK tools and
platform tools packages are installed on your system.
In addition, you may want to complete your host setup by installing the Android NDK if you're planing to work with
apps containing native libraries (it will be also relevant in the chapter "Tampering and Reverse Engineering on
Android").
Setting up the Android SDK
Local Android SDK installations are managed via Android Studio. Create an empty project in Android Studio and
select "Tools->Android->SDK Manager" to open the SDK Manager GUI. The "SDK Platforms" tab is where you install
SDKs for multiple API levels. Recent API levels are:
Android 9.0 (API level 28)
Android 8.1 (API level 27)
Android 8.0 (API level 26)
Android 7.1 (API level 25)
An overview of all Android codenames, their version number and API Levels can be found in the Android Developer
Documentation.
104
Setting up a Testing Environment for Android Apps
Installed SDKs are on the following paths:
Windows:
C:\Users\\AppData\Local\Android\sdk
MacOS:
/Users//Library/Android/sdk
Note: On Linux, you need to choose an SDK directory. /opt , /srv , and /usr/local are common choices.
Setting up the Android NDK
The Android NDK contains prebuilt versions of the native compiler and toolchain. Both the GCC and Clang compilers
have traditionally been supported, but active support for GCC ended with NDK revision 14. The device architecture
and host OS determine the appropriate version. The prebuilt toolchains are in the toolchains directory of the NDK,
which contains one subdirectory for each architecture.
Architecture Toolchain name
ARM-based arm-linux-androideabi-
x86-based x86-
MIPS-based mipsel-linux-android-
ARM64-based aarch64-linux-android-
X86-64-based x86_64-
MIPS64-based mips64el-linux-android-
105
Setting up a Testing Environment for Android Apps
Besides picking the right architecture, you need to specify the correct sysroot for the native API level you want to
target. The sysroot is a directory that contains the system headers and libraries for your target. Native APIs vary by
Android API level. Possible sysroots for each Android API level are in $NDK/platforms/ . Each API level directory
contains subdirectories for the various CPUs and architectures.
One possibility for setting up the build system is exporting the compiler path and necessary flags as environment
variables. To make things easier, however, the NDK allows you to create a so-called standalone toolchainâ€”a
"temporary" toolchain that incorporates the required settings.
To set up a standalone toolchain, download the latest stable version of the NDK. Extract the ZIP file, change into the
NDK root directory, and run the following command:
$ ./build/tools/make_standalone_toolchain.py --arch arm --api 24 --install-dir /tmp/android-7-toolchain
This creates a standalone toolchain for Android 7.0 in the directory /tmp/android-7-toolchain . For convenience, you
can export an environment variable that points to your toolchain directory, (we'll be using this in the examples). Run
the following command or add it to your .bash_profile or other startup script:
$ export TOOLCHAIN=/tmp/android-7-toolchain
Testing Device
For dynamic analysis, you'll need an Android device to run the target app on. In principle, you can test without a real
Android device and use only the emulator. However, apps execute quite slowly on a emulator, and simulators may not
give realistic results. Testing on a real device makes for a smoother process and a more realistic environment. On the
other hand, emulators allow you to easily change SDK versions or create multiple devices. A full overview of the pros
and cons of each approach is listed in the table below.
Property Physical Emulator/Simulator
Emulators can crash or become
Ability to Softbricks are always possible, but new firmware can corrupt, but a new one can be
restore typically still be flashed. Hardbricks are very rare. created or a snapshot can be
restored.
Emulators can be deleted and
Reset Can be restored to factory settings or reflashed.
recreated.
Supported, great for malware
Snapshots Not possible.
analysis.
Typically slow, but
Speed Much faster than emulators.
improvements are being made.
Typically start at $200 for a usable device. You may require
Both free and commercial
Cost different devices, such as one with or without a biometric
solutions exist.
sensor.
Ease of
Highly dependent on the device. Typically rooted by default.
rooting
Ease of Many artefacts will exist,
emulator It's not an emulator, so emulator checks are not applicable. making it easy to detect that the
detection app is running in an emulator.
Emulators will almost always
Ease of Easier to hide root, as many root detection algorithms trigger root detection algorithms
root check for emulator properties. With Magisk Systemless root due to the fact that they are
detection it's nearly impossible to detect. built for testing with many
artefacts that can be found.
106
Setting up a Testing Environment for Android Apps
Usually fairly limited, with
Hardware Easy interaction through Bluetooth, NFC, 4G, WiFi,
emulated hardware input (e.g.
interaction biometrics, camera, GPS, gyroscope, ...
random GPS coordinates)
Depends on the device and the community. Active Always supports the latest
communities will keep distributing updated versions (e.g. versions, including beta
API Level
LineageOS), while less popular devices may only receive a releases. Emulators containing
support
few updates. Switching between versions requires flashing specific API levels can easily be
the device, a tedious process. downloaded and launched.
Native Some emulators run on x86
Native libraries are usually built for ARM devices, so they
library CPUs, so they may not be able
will work on a physical device.
support to run packaged native libraries.
Testing on a Real Device
Almost any physical device can be used for testing, but there are a few considerations to be made. First, the device
needs to be rootable. This is typically either done through an exploit, or through an unlocked bootloader. Exploits are
not always available, and the bootloader may be locked permanently, or it may only be unlocked once the carrier
contract has been terminated.
The best candidates are flagship Google pixel devices built for developers. These devices typically come with an
unlockable bootloader, opensource firmware, kernel, radio available online and official OS source code. The
developer communities prefer Google devices as the OS is closest to the android open source project. These devices
generally have the longest support windows with 2 years of OS updates and 1 year of security updates after that.
Alternatively, Google's Android One project contains devices that will receive the same support windows (2 years of
OS updates, 1 year of security updates) and have near-stock experiences. While it was originally started as a project
for low-end devices, the program has evolved to include mid-range and high-end smartphones, many of which are
actively supported by the modding community.
Devices that are supported by the LineageOS project are also very good candidates for test devices. They have an
active community, easy to follow flashing and rooting instructions and the latest Android versions are typically quickly
available as a Lineage installation. LineageOS also continues support for new Android versions long after the OEM
has stopped distributing updates.
When working with an Android physical device, you'll want to enable Developer Mode and USB debugging on the
device in order to use the ADB debugging interface. Since Android 4.2, the "Developer options" sub menu in the
Settings app is hidden by default. To activate it, tap the "Build number" section of the "About phone" view seven times.
Note that the build number field's location varies slightly by deviceâ€”for example, on LG Phones, it is under "About
phone -> Software information". Once you have done this, "Developer options" will be shown at bottom of the Settings
menu. Once developer options are activated, you can enable debugging with the "USB debugging" switch.
Testing on an Emulator
Multiple emulators exist, once again with their own strengths and weaknesses:
Free emulators:
Android Virtual Device (AVD) - The official android emulator, distributed with Android Studio.
Android X86 - An x86 port of the Android code base
Commercial emulators:
Genymotion - Mature emulator with many features, both as local and cloud-based solution. Free version available
for non-commercial use.
Corellium - Offers custom device virtualization through a cloud-based or on-prem solution.
107
Setting up a Testing Environment for Android Apps
Although there exist several free Android emulators, we recommend using AVD as it provides enhanced features
appropriate for testing your app compared to the others. In the remainder of this guide, we will use the official AVD to
perform tests.
AVD supports some hardware emulation, such as GPS, SMS and motion sensors.
You can either start an Android Virtual Device (AVD) by using the AVD Manager in Android Studio or start the AVD
manager from the command line with the android command, which is found in the tools directory of the Android
SDK:
$ ./android avd
Several tools and VMs that can be used to test an app within an emulator environment are available:
MobSF
Nathan (not updated since 2016)
Please also verify the "Tools" section at the end of this book.
Getting Privileged Access
Rooting (i.e., modifying the OS so that you can run commands as the root user) is recommended for testing on a real
device. This gives you full control over the operating system and allows you to bypass restrictions such as app
sandboxing. These privileges in turn allow you to use techniques like code injection and function hooking more easily.
Note that rooting is risky, and three main consequences need to be clarified before you proceed. Rooting can have