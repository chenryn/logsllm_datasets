to have greater control over the
system, many users perform a process known as “rooting,” to
be able to perform actions as the “root” user. Usually, during
this process, a suid executable ﬁle called su is installed, as
well as a manager app that restricts which apps can use this
binary to perform actions as root. Because this process is
so common among users, there are many apps that provide
functionality that can only be performed by the root user,
such as changing the fonts of the system or changing the DNS
conﬁguration.
Our analysis identiﬁed 1,137 apps that
try to run su.
Surprisingly, 28.23% (321) of these apps do not mention in
their description or in their name that they need root privileges.
Some of these apps use the “-c” argument of su to specify
a command to be executed as root. Table VIII presents the top
7
ﬁve most common types of actions that these apps tried to
execute using su, along with the number of apps that attempt
to execute that command, and if the app mentioned that it
requires root or not. This table gives insights into what the
app is trying to accomplish as root. The table shows that
the most common action used with the “-c” argument of su
is calling a custom executable. Because apps cannot use su
in the emulator, these actions did not work properly during
dynamic analysis, so we cannot obtain more information on
their behavior.
D. JNI Calls Statistics
Understanding the JNI functions called by native code can
reveal how the native components of apps interact with the app
and the Android framework. Table IX presents the types of JNI
functions that were used by the apps and how many apps used
them. The most relevant actions for security considerations in
this table are: (1) calling Java methods and (2) modifying ﬁelds
of objects. Calling methods in Java libraries from native code
can be used to avoid detection by static analysis. Moreover,
modifying ﬁelds of Java objects can change the execution of
the Java code in ways that static analysis cannot foresee.
Calling Java methods, both from the Android framework
and from the app can be performed by some of the methods
presented in Table II, more precisely the ones whose name
starts with “Call.” As Table IX shows, we identiﬁed 35,231
apps that have native code which calls Java methods. More
speciﬁcally, 24,386 apps used these functions to call Java
methods from the app and 25,618 apps used them to call Java
methods from the framework. Table X presents what groups
of methods from the framework were called, along with the
amount of apps that called methods in each group.
E. Binder Transactions
1.64% (2,457) of the apps that reached native code during
dynamic analysis performed Binder transactions. Table XI
presents the top ﬁve most commonly invoked classes of the
remote methods. The most common class remotely invoked
by this process is IServiceManager, which can be used
to list services, add a service, and get an object to a Binder
interface. All apps that used this class obtained an object to a
Binder interface and two apps also used it to list services. This
data shows that using Binder transactions from native code is
not common. From a security perspective this is good as the
use of Binder transactions represent a way in which native
code can perform critical actions while staying undetected by
static analysis.
TABLE IX.
GROUPS OF JNI CALLS USED FROM NATIVE CODE.
TABLE XII.
TOP 10 MOST USED STANDARD LIBRARIES.
Description
Register native method
Manipulate object reference
Manipulation of String objects
Get or destroy JavaVM, and Get JNIEnv
Apps
94,543 Get class or method identiﬁer and class reference
71,470
53,219
49,321
45,773
41,892
35,231
19,372
18,601
14,330
6,918
2,203
Modify ﬁeld of an object
Manipulate direct buffers
Manipulate exceptions
Create object instance
Call Java method
Manipulate arrays
Thread manipulation
Memory allocation
Enter or exit monitor
TABLE X.
TOP 10 GROUPS OF JAVA METHODS FROM THE ANDROID
FRAMEWORK CALLED FROM NATIVE CODE.
Description
Get path to the Android
package associated with the context of the caller
Get class name
Manipulate data structures
Methods related to cryptography
Manipulate native types
Read system information
Audio related methods
Read app information
String manipulation and encoding
Input/output related methods
Reﬂection
47
37
Apps
7,423
6,896
5,499
4,082
3,817
3,769
3,018
2,070
1,192
575
483
F. Usage of External Libraries
Understanding the libraries used by the apps in native code
can help us comprehend their purpose. Table XII presents the
top 10 most used system libraries and Table XIII presents the
top 10 must used custom libraries by apps in native code. It
demonstrates that apart from the bitmap manipulation library,
which was used by 16.6% (24,942) of the apps that reached
native code, no standard library was used by a great number
of apps. On the other hand, several custom libraries were used
by more than 7.5% of the apps that executed native code.
V. SECURITY POLICY GENERATION
One step to limit the possible damage that native code
can do is to isolate it from the Java code using the native
code sandboxing mechanisms discussed in Section II-D. These
TOP FIVE MOST COMMON CLASSES OF THE METHODS
TABLE XI.
INVOKED THROUGH BINDER TRANSACTIONS. FOR THE INTERESTED
READER, WE REPORT THE FULL VERSION OF THIS TABLE IN [1].
Apps
2,427
740
725
327
303
Class
android.os.IServiceManager
android.media.IAudioFlinger
android.media.IAudioPolicyService
android.gui.IGraphicBufferProducer
android.gui.SensorServer
Apps
24,942
2,646
2,645
349
347
183
183
182
182
181
Name
libjnigraphics.so
libOpenSLES.so
libwilhelm.so
libpixelﬂinger.so
libGLES android.so
libGLESv1 enc.so
gralloc.goldﬁsh.so
libOpenglSystemCommon.so
libGLESv2 enc.so
lib renderControl enc.so
Description
Manipulate Java
bitmap objects
Audio input and output
Multimedia output
and audio input
Graphics rendering
Graphics rendering
Encoder for GLES 1.1
commands
Memory allocation
for graphics
Common functions
used by OpenGL
Encoder for GLES 2.0
commands
Encoder for rendering
control commands
TABLE XIII.
TOP 10 MOST USED CUSTOM LIBRARIES.
libstlport shared.so C++ standard libraries
Apps
19,158
17,343
16,450
13,556
11,486
11,480
11,458
11,090
10,857
10,408
Name
libopenal.so
libCore.so
libmain.so
libcorona.so
libalmixer.so
libmpg123.so
libmono.so
liblua.so
libjnlua5.1.so
Description
Rendering audio
Used by Adobe AIR
Common name
Part of the Corona SDK, a devel-
opment platform for mobile apps
Audio API of the Corona SDK
Audio library
Mono library, used to run .NET
on Android
Lua interpreter
Lua interpreter
mechanisms prevent native code from modifying Java code,
which allows static analysis of the Java part
to produce
more reliable results. However, this is not enough, considering
that the app can still perform dangerous actions—that is, by
interacting with the Android framework/libraries and by using
system calls to execute root exploits.
Our goal here is to reduce the attack surface available to
native code, by restricting the system calls and Java methods
that native code can access. In particular, we propose to use
our dynamic analysis system to generate security policies. A
security policy represents the normal behavior, which can be
seen as a sort of whitelist that represents the syscalls and
Java methods that are normally executed from within native
code components of benign applications. These policies also
implicitly identify which syscalls and Java methods should be
considered as unusual or suspicious (as they do not belong to
the common syscalls), such as the ones used to mount root
exploits.
One aspect to be considered is what action is taken when
an unusual syscall is executed. Similar to the design choice
adopted by SELinux, we envision two modes: permissive and
enforcing. In permissive mode, the system would log and
report the usage of unusual behavior, while in enforcing mode
the system would block the execution of such unusual behavior
8
and stop the application. Depending on the context, it might
make sense to use permissive or the more aggressive enforcing
mode. As an alternative, one could selectively pick permissive
or enforcing mode depending on whether the unusual syscall is
well-known to be used by root exploits. The policy generation
process for syscalls is described in Section V-A, while the one
for Java methods is described in Section V-B. We discuss the
possibilities and the implications of this choice in Section VI.
It is worth noting that while this will not guarantee perfect
protection from attacks, by applying the security principle of
least privilege to the native code, we gain the dual security
beneﬁts of (1) increasing the precision of Java static analysis
and (2) reducing the impact of malicious native code.
A. System Calls
Based on the system calls performed by the apps in
native methods, in native activities, during libraries loading,
and by programs executed by Exec methods, our system can
automatically generate a security policy of allowed system
calls. To compile this list, we ﬁrst normalize the parameters
of the system calls and later iterate over them, selecting the
ones performed by most apps, until the list of selected system
calls is comprehensive enough to allow at least a (variable
threshold) percentage of the apps that executed native code
to run properly. In Android, inter-process communication is
done through Binder. Native code can directly use Binder
transactions to call methods implemented by system services.
At the system call level, these calls are performed by the
using the ioctl system call. To consider these actions in our
automatically generated whitelist, we substitute ioctl calls
to Binder with the Binder transactions performed by the apps.
To understand the possible policies that could be generated,
we performed this process using a threshold (the percentage
of apps that use native code whose dynamically-executed
behavior would function properly when enforcing this policy)
of 99%. Table XIV presents the actions obtained by this
procedure. The system call arguments that were normalized
were replaced by symbols in the form  and * (meaning
anything). Some of the arguments that are ﬁle descriptors were
changed to a ﬁle path representation of it. All arguments that
were not normalized represent a numeric value or a constant
value that was converted by strace to a string representation.
For the system calls that do not have the arguments next to
it in the policies, the policy accepts calls with any arguments.
Table XV presents more details about the symbols used.
To better understand which types of apps would be blocked
by our example policy (when in enforcing mode), we studied
them and manually analyzed a subset of them. The ﬁndings of
this analysis are presented in Section VI.
The policies restrict the possible actions of native code,
thus following the principle of least privilege and making it
harder for malicious apps to function. Previously, malicious
code could easily hide in native code to evade static anal-
ysis. With our example policies enforced by a sandboxing
mechanism, the native code does not (depending on the exact
threshold) have the ability to perform any malicious actions
in native code, and therefore attackers will have to move the
malicious behavior to the Java code, where it can be found by
existing Java static analysis tools. Furthermore, the policies do
not prevent the correct execution of the dynamically-executed
behavior of many benign apps. Using the rules generated
with the 99% threshold, only 1,483 apps (0.12% of the total
apps in our dataset) would be affected. Of course, as the
dynamic analysis performed by our system is incomplete (in
that it can not execute all possible app code), this number
is a lower bound. This can be alleviated by an organization
wishing to use our system in one of two ways: (1) increase
the completeness of the dynamic analysis or (2) deploying the
sandboxing enforcement mechanism in reporting mode. Both
choices will reveal more app behaviors.
Another beneﬁt of enforcing a native code sandboxing
policy is that it would prevent the correct execution of several
root exploits. For this work, we considered the 13 root exploits
reported in Table XVI. These exploits require native code to
be successful. Our example security policy would hinder the
execution of 10 of them. This follows because the policies
attempt to reduce the attack surface of the OS for native code,
while at the same time maintaining backward compatibility.
Table XVI presents which of the considered exploits are
successfully blocked, along with which entry of the policy
they violate.
and ioctl. More precisely,
The root exploits that are prevented by our example
security policy are blocked due to rules related to four
system calls,
namely socket, perf_event_open,
symlink,
two exploits
need to create sockets with PF_NETLINK domain and
NETLINK_KOBJECT_UEVENT (15) protocol, however, the
rules only allow PF_NETLINK sockets with protocol 0.
One of the exploits needs the perf_event_open system
call, which is not allowed by the policy. Two exploits
need to create symbolic links that
target system ﬁles or
directories, but
the policy only allows symbolic links to
target “USER-PATH,” which means ﬁles or directories in
the app’s directory or in the SD Card. Finally, ﬁve exploits
use ioctl to communicate with a device. One of the rules
allows ioctl calls to any device, namely ioctl(,SNDCTL_TMR_TIMEBASE or TCGETS,*).
However,
this rule speciﬁes the valid request value (the
second parameter), whereas the exploits use different values,
therefore they would be blocked.
The table also reports the details about the three exploits
that would not be currently blocked. In one case (CVE-2011-
1149), the exploit would still work because our example policy
allows the invocation of the mprotect syscall, since it is used
by benign applications. In the two remaining cases (RATC
and Zimperlinch), the exploits rely on repeatedly invoking the
fork syscall to exhaust the number of available processes.
The fork syscall is allowed by our policy as some benign
applications do use it. However, note that this kind of exploit
could be blocked by a security policy that would take into
account the frequency of invocations of a given syscall: In fact,
no benign application would ever invoke the fork syscall so
frequently. We believe that considering this additional aspect
of native code behavior is a very interesting direction for future
work.
Although our example security policy does not block all
exploits, we believe the adoption of native sandboxing to
be useful. In fact, it does sensibly reduce the attack surface
available to native code components, and it is able to success-
9
TABLE XIV.
ALLOWED SYSTEM CALLS AUTOMATICALLY GENERATED USING A THRESHOLD OF 99% APPS UNAFFECTED BY THE POLICY.
accept(*,*,*)
access(, W OK)
access(,R OK)
BINDER(android.os.IServiceManager.