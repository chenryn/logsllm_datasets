V. IMPLEMENTATION AND VALIDATION
We implement CallerDec on Android smartphones as
a case study. However, CallerDec can be implemented in
regular phones, e.g., in the ﬁrmware of PSTN phones, as
it neither requires high processing capability nor uses any
resources that are only available in smartphones.
A. Implementation Challenges
When implementing CallerDec in Android, we en-
countered several challenges. Particularly, CallerDec re-
quires to estimate the ringing duration at the other end, to
obtain the status of that call, and to automatically initiate a
veriﬁcation call. However, Android does not contain APIs
for identifying the status of an outgoing phone call or
estimating the ringing duration at the other end. Neither does
it allow two concurrent phone calls, and it hides the APIs
for automating phone calls. We discuss how we overcome
these challenges in the following.
1) Verify Caller ID Using Timing Estimation: One key
issue to verify Alice’s caller ID is to estimate her ringing
duration (denoted by T2). As shown in Fig. 2, the ringing
duration (T2) is the time difference between the moments
when Alice sends an ALERTING message, and a REJECT
message.
In an ideal scenario, when the end-to-end transmission
latency for ALERTING and REJECT messages is the same,
T2 equals T4, where T4 is the time difference between the
moment when Bob receives an ALERTING and the one
when he receives an ANSWER or REJECT message (shown
in Fig. 2). This makes T4 a perfect candidate for estimating
T2. However our analysis on T4 shows that it can vary from
50ms to several seconds. This is because some carriers start
playing the ringback tone before receiving an ALERTING
message. For instance, AT&T starts the ringback tone even
when the callee is unavailable. Due to such a high variance
in the time difference, we ruled out using T4 to estimate T2.
We found that T3 (as shown in Fig. 2), which is roughly
the sum of T2 and the round trip time from Bob to Alice,
is independent of the types of carriers, since it does not
depend on when the ringback tone starts. Hence we chose
T3 for estimating T2 and consequently use it to classify caller
ID as VALID, SPOOFED, or NOTSUPPORTED. Unlike the
Internet where the round trip time varies, the round trip time
in a telephone network is relatively stable due to the quality
of service (QoS) requirements of telephone standards [9]
[10] and the circuit-switched nature of communication. This
makes it possible to estimate T2 using T3. Our experiments
also conﬁrm this hypothesis. To make CallerDec compat-
ible to devices with low computational power, e.g., mobile
phones, we choose Bayesian Classifier [16]. The
Bayesian classiﬁer is an efﬁcient method for calculating
posterior probability based on prior probability and like-
lihood in the training data. Although the classiﬁer needs
prior training, our experimental results involving various
geographic locations and time of the day show that the same
trained model can be used on different phones for effective
classiﬁcation.
For the training dataset, we recorded the values of T2,
T3, time of day (Tday), and status of the veriﬁcation call
(Scall),
i.e., rejected, answered or voicemail. We label
each dataset with appropriate class: VALID, SPOOFED, or
NOTSUPPORTED. For each test sample, we employ the
following Bayes equation [16] to calculate the probability
of each class, Ci.
p(Ci
(cid:2)
(cid:2)T3, Tday, Scall) =
p(T3, Tday, Scall
(cid:2)
(cid:2)Ci) p(Ci)
p(T3, Tday, Scall)
(1)
Here, p(Ci) is the probability of Ci in the training dataset.
CallerDec classiﬁes the test sample as the class with the
highest probability. Thus, based on the estimated duration
of T2 and Alice’s action, CallerDec detects caller ID
spooﬁng attacks.
2) Identify
the Status of
the Veriﬁcation Call:
CallerDec scheme requires Bob to identify the status of
the veriﬁcation call, i.e., whether the call has been answered,
rejected, or directed to the voicemail. This task poses several
challenges. Android does not allow users to access call
signalling messages during call setup. As a result, we cannot
identify call status directly from call setup messages, e.g.,
REJECT message. Neither does Android provide any API
that returns whether the callee’s phone is ringing or the
call is answered. The status of an outgoing call is always
OFFHOOK6. So, we seek alternatives to identify the status
of an outgoing call.
To identify the status of the veriﬁcation call, we utilized
system logs. Logs of each Android app are printed in the sys-
tem shell and CallerDec continuously monitors real-time
logs using Runtime APIs. In particular, CallerDec mon-
itors logs of three built-in system apps: CallNotifier,
AudioService, and Ringer. Once a DISCONNECT log
is printed by CallNotifier, CallerDec concludes that
the veriﬁcation call is rejected. To identify the answer or
voicemail status, CallerDec searches for an audioOn
entry from AudioService and a stopRing() entry
from Ringer. To differentiate between answered and voice-
mail, CallerDec can record voice data using the micro-
phone and identify the patterns of voicemail greeting using
available tools [20]. If the pattern matches, CallerDec
has reached the voicemail, otherwise the veriﬁcation call
is answered. This identiﬁcation process is summarized in
Table I.
3) Initiate the Veriﬁcation Call: Depending on the num-
ber of concurrent phone calls,
two categories of phone
services exist: (a) primary rate interface (PRI) [21] lines, and
6OFFHOOK traditionally indicates that the handset of a PSTN phone is off the
base and the user could be dialing a number or on an active call. It is used in the
same context in Android.
175175175
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:05 UTC from IEEE Xplore.  Restrictions apply. 
s
d
n
o
c
e
S
12
10
8
6
4
2
0
08 11 14 17 20 23
Time of day
(a) VALID
DCSD
DCFD
SCSD
SCFD
s
d
n
o
c
e
S
12
10
8
6
4
2
0
08 11 14 17 20 23
Time of day
(b) SPOOFED (reachable)
DCSD
DCFD
SCSD
SCFD
s
d
n
o
c
e
S
12
10
8
6
4
2
0
DCSD
DCFD
SCSD
SCFD
08 11 14 17 20 23
Time of day
(c) SPOOFED (unreachable)
Figure 7.
with Alice is (b) reachable and (c) unreachable.
End-to-end veriﬁcation delay in (a) the normal scenario when caller ID is VALID, and in the attack scenarios when caller ID is SPOOFED
(b) regular lines (e.g., a mobile phone or a residential land-
line). PRI supports multiple concurrent phone calls using the
same caller ID. Thus, a second line can be used to initiate
the veriﬁcation call while the ﬁrst call may be in progress.
Regular end users can dial a secondary phone call but at
most one call can be active at a time. For instance, UMTS
requires to put an incoming call on hold before initiating a
new call [19] and Android enforces this requirement. As a
result, when implementing CallerDec in Android, we have to
put the incoming call from Alice on hold before initiating the
veriﬁcation call. Furthermore, Android provides no ofﬁcial
APIs for putting a call on hold. To overcome the problem,
we leverage Android hidden APIs of ITelephony inter-
face using java reﬂection. We created an interface ITele-
phony in CallerDec App with the package name set as
com.android.internal.telephony and added the
function deﬁnition from the original ITelephony interface
with an empty body. As a result, CallerDec is able to call
the hidden functions from ITelephony at runtime and can
perform call control operations (e.g., initiate a new call).
After overcoming the
implemented
CallerDec on Android. Fig. 6 shows two screenshots of
CallerDec when the caller ID is VALID and SPOOFED.
To save space, we omit the screenshot of NOTSUPPORTED.
challenges, we
B. Performance
To evaluate the performance of CallerDec, we measured
time of day and end-to-end delay of completing caller ID
veriﬁcation for the following scenarios which we discussed
in Section IV-C: (a) normal, (b) spoof a reachable user,
(c) spoof an unreachable user, and (d) not-supported sce-
narios. Additionally, we studied the impact of the type
of phones, the carriers, and the time of the day in the
veriﬁcation delay. We selected three Android devices and
classiﬁed them as fast devices or slow devices based on the
conﬁgurations, and the device speciﬁcations are summarized
in Table II. We chose some common telephone carriers in
the USA, which are AT&T, T-Mobile, and SimpleMobile.
We used two cases in the experimental setup: (a) Alice
and Bob belong to the same carrier, e.g., T-Mobile, and
(b) Alice and Bob belong to different carriers, e.g., a T-
Mobile user calls an AT&T user. In total, we measured data
at six different times of the day in four experimental setup:
(a) DCFD: Different Carriers and using two Fast Devices,
(b) DCSD: Different Carriers and using one fast and one
Slow Device, (c) SCFD: The Same Carrier and using two
Fast Devices, and (d) SCSD: The Same Carrier and using
one fast and one Slow Device. We set τv = τsv = 0 seconds
in our implementation to minimize veriﬁcation delay. Note
that other threshold values can be used depending on the
network parameters.
End-to-end Veriﬁcation Delay. We measure end-to-end
veriﬁcation delay as the time difference between the moment
when Bob receives an incoming call and the one when
he identiﬁes Alice’s action. In the normal scenario, when
caller ID was valid and the veriﬁcation call was rejected
after τv seconds, (Fig. 7(a)), the veriﬁcation was done in
8.40 seconds on average with variance between 0.1 to 0.3
seconds. In the worst case, when the caller and the callee
were under different carriers, and one of them was using a
slow device, the delay was 8.61 seconds. In all cases, the
veriﬁcation delay peaked at 2PM, which indicates that the
veriﬁcation delay of CallerDec is affected by network
load but not much. The call setup delay dominates the
delays. For instance, a recent study reported that call setup in
3G networks is between 4-7 seconds on average for various
scenarios [22].
Table I
IDENTIFYING CALL STATUS USING ANDROID SYSTEM LOGS AND
MATCHING VOICEMAIL PATTERNS.
Call
Status
Rejected
Answered
Voicemail
System App & Search String
VM
CallNotiﬁer
DISCONNECT
-
-
AudioService
Ringer
Pattern?
-
audioOn
audioOn
-
stopRing
stopRing
-
No
Yes
CONFIGURATIONS OF ANDROID DEVICES USED TO ANALYZE
CA L L E RDE C PERFORMANCE.
Table II
Device Name
Google Nexus One
HTC Sense
MyTouch
Processor
1 GHz
1 GHz
528MHz
RAM
512 MB
576 MB
192 MB
Class
Fast
Fast
Slow
176176176
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:02:05 UTC from IEEE Xplore.  Restrictions apply. 
s
d
n
o
c
e
S
15
10
5
0
VALID
SPOOFED (reachable)
SPOOFED (unreachable)
S. Carolina
California
Michigan
Washington
State of the callee
Figure 8.
End-to-end veriﬁcation delay of CallerDec based on geo-
graphic locations. The caller was always in State-1 and the callee was in
one of the four states.
s
d
n
o
c
e
S
16
12
8
4
0
1
2
3
4
5
6
User (#)
7
8
9
10
Figure 9. Mean and standard deviation of the response time for 10
volunteers to reject or answer incoming calls, which represents the response
time in NOTSUPPORTED scenarios.
In the spooﬁng a reachable user scenario, Alice initiated
a veriﬁcation call after τsv seconds in response to Bob’s
veriﬁcation call. As shown in Fig. 7(b), the veriﬁcation was
done in 8.35 seconds on average. with a variance of 0.1 to
0.3 seconds, and in 8.49 seconds in the worst case. Similar
to regular scenarios, the call setup delay dominates the end-
to-end delay.
In the spooﬁng an unreachable user scenario, Alice’s
phone was turned-off and the veriﬁcation call went straight
to the voicemail. As shown in Fig. 7(c), the veriﬁcation delay
was less than 2 seconds on average with a variance less than
0.04 seconds and 2.13 seconds in the worst case. Note that
veriﬁcation delay is low in this scenario because the call is
not routed to its destination since the caller is unreachable.
Although CallerDec takes a few seconds for end-
to-end veriﬁcation, our analysis shows that such delay is
mainly caused by telephone networks, and end devices or
network loads have minor effects. However, the veriﬁcation
delay can be hidden in case of emergency calls (Fig. 5(a))
because the veriﬁcation is done in parallel to the phone
call. Although CallerDec adds delay overhead before a
user may answer calls in case of regular calls (Fig. 5(b)),
the actually experienced overhead should be lower since it
generally takes a few seconds to answer a call [23].
Impact of Geography. We also analyzed the latency of
CallerDec based on the geographic locations of the caller
and the callee (Fig. 8). We selected four states located across
the US which are California, South Carolina, Michigan, and