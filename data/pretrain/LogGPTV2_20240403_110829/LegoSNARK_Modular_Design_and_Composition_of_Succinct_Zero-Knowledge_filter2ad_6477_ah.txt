0
:= cz(cid:48)
0
; cw(cid:48)(cid:48)
0
:= cz(cid:48)(cid:48)
0
}
j
j
(cz(cid:48)(cid:48)
if j ?= 0 : { w
else :
i=1
(cid:89)nj
(cid:89)nj
(cid:1)
(cid:1)
; z
(cid:48)
j :=
(cid:48)(cid:48)
j :=
; z
(cid:48)
j,i)i∈[nj ]
,(o
(cid:48)(cid:48)
j,i)i∈[nj ]
,(o
j
y
(cid:48)
j,i
(cid:48)(cid:48)
j,i
y
i=1
(ck, ˜vj); (cφ,j, oφ,j) ← ComPoly
∗
(ck, ˜φj)}
j ← w
j−1·z
(cid:48)
(cid:48)
(cid:48)
j ; (cw(cid:48)
j−1·z
j ← w
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
j ; (cw(cid:48)(cid:48)
j
w
w
, ow(cid:48)
j
, ow(cid:48)(cid:48)
j
j
) ← ComVal(ck,w
(cid:48)
j) ; πw(cid:48)
) ← ComVal(ck,w
(cid:48)(cid:48)
j ); πw(cid:48)(cid:48)
j
← CPprd.Prove(ck,cw(cid:48)
j−1
← CPprd.Prove(ck,cw(cid:48)(cid:48)
j−1
j
,cz(cid:48)
j
,cw(cid:48)
j
,w
,cz(cid:48)(cid:48)
j
,cw(cid:48)(cid:48)
j
,w
(cid:48)
j−1,z
(cid:48)(cid:48)
j−1,z
(cid:48)
j,w
(cid:48)(cid:48)
j ,w
(cid:48)
j,ow(cid:48)
j−1
(cid:48)(cid:48)
j ,ow(cid:48)(cid:48)
,oz(cid:48)
j
,ow(cid:48)
j
)
,oz(cid:48)(cid:48)
j
,ow(cid:48)(cid:48)
j
)
j−1
endif
endfor
πz ← CPeq.Prove(ck, cw(cid:48)
return π := (c0,o0,{cz(cid:48)
(cid:96)
CPsfprm.VerProof∗(cid:0)vkφ, x, (cj)j∈[(cid:96)], π(cid:1) → b :
,cw(cid:48)(cid:48)
, cw(cid:48)
,cz(cid:48)(cid:48)
j
j
j
j
, cw(cid:48)(cid:48)
(cid:96)
, w
(cid:48)
(cid:96), w
(cid:48)(cid:48)
(cid:96) , ow(cid:48)
(cid:48)
j,π
, π
(cid:96)
(cid:96)
, ow(cid:48)(cid:48)
j }(cid:96)
(cid:48)(cid:48)
)
j=0,{πw(cid:48)
}(cid:96)
j=1,πz)
,πw(cid:48)(cid:48)
j
j
(r, s) ← H((cφ,j)j∈[0,(cid:96)], x, (cj)j∈[(cid:96)]) and let ρ = (1, r,−s) ; b ← VerCommit(cvk, c0, ˜x, o0)
for j = 0 . . . (cid:96) :
j,·) ← HomEval(cvk, ρ, (cj, cv,j, c1,j),·)
(cid:48)
(c
j ,·) ← HomEval(cvk, ρ, (cj, cφ,j, c1,j),·)
(cid:48)(cid:48)
(c
b ← b ∧ CheckCom(cvk, cz(cid:48)
∧ CheckCom(cvk, cz(cid:48)(cid:48)
j
if j (cid:54)= 0 : { b ← b ∧ CPprd.VerProof(cvk, cw(cid:48)
) ∧ CPipd.VerProof(vkp, cz(cid:48)
) ∧ CPipd.VerProof(vkp, cz(cid:48)(cid:48)
, cw(cid:48)
, cz(cid:48)
j
j
j,i)i∈[nj ]) ∧ CheckCom(cvk, cw(cid:48)
(cid:48)
, (c
)
j,i)i∈[nj ]) ∧ CheckCom(cvk, cw(cid:48)(cid:48)
(cid:48)(cid:48)
) ∧ CPprd.VerProof(cvk, cw(cid:48)(cid:48)
j−1
, πw(cid:48)
, (c
j
j
j
j
j−1
j
)
j
, cz(cid:48)(cid:48)
j
, cw(cid:48)(cid:48)
j
, πw(cid:48)(cid:48)
j
) }
endfor
b ← b ∧ CPeq.VerProof(cvk, cw(cid:48)
(cid:96)
, cw(cid:48)(cid:48)
(cid:96)
, πz)
Figure 5: CP-SNARK for specializable universal relation Rsfprm
30
its upper bound for any constant (cid:96) using the fact that(cid:80)(cid:96)
Here the crs size is the same as that in CPipd: (2m + 3)G1 + (µ + 3)G2 elements.
Theorem 5.3. In the random oracle model, assuming that PolyCom is an extractable and linearly-
homomorphic trapdoor commitment, CPipd, CPprd are zero-knowledge CP-SNARKs for PolyCom and
relations Ripd and Rprd respectively, then CPsfprm in Figure 5 is a zero-knowledge CP-SNARK for
PolyCom and relation Rsfprm.
j=0 log2 nj < (cid:96) log2 max{nj}(cid:96)
0 < (cid:96) log2 m.
5.5 A CP-SNARK for Linear Properties of Committed Vector
In this section we show a CP-SNARK for PolyCom that has a specializable universal CRS for
relations Rlin
q . More precisely, our CPlin
F
works for a family of relations R that includes all Rlin
(cid:0)x, u(cid:1) := x ?= F · u where F ∈ Zn×m
The scheme is based on the interactive proof for Matrix multiplication of Thaler [Tha13]. In a
nutshell, we specialize this protocol to the case of a matrix-vector multiplication and we turn it into
a ZK argument using ideas similar to those in [ZGK+17b].
q and u ∈ Zm
, x ∈ Zn
F for all matrices F ∈ Fn×m.
q
Our scheme makes use of the building blocks deﬁned in Section 5.1: a polynomial commitment
scheme PolyCom, and CP-SNARKs CPpoly and CPsc for the relations Rpoly and Rsc respectively.
Review of Thaler’s Matrix Multiplication protocol. We begin by reviewing the idea of
Thaler’s matrix multiplication protocol in our speciﬁc case of proving x = F · u. Let ν := log n, µ :=
log m. We let ˜F : {0, 1}ν × {0, 1}µ → Zq be the multilinear extension (MLE) of F , i.e., the unique
(cid:80)
multilinear polynomial such that ˜F (i1, . . . , iν, j1, . . . , jµ) = Fi,j. Similarly, let ˜u and ˜x be the MLE
of u and x respectively. The protocol exploits that the MLE ˜x can also be expressed as ˜x(R) =
b∈{0,1}µ ˜F (R, b) · ˜u(b). In particular, since this MLE is unique, if ˜F and ˜u are MLE of F and
u respectively, then ˜x is a MLE of x = F · u. Next, starting from this observation, the veriﬁer
t = ˜x(r) =(cid:80)
picks a random r, and then starts a sum-check protocol where the prover convinces the veriﬁer that
b∈{0,1}µ g(b) for the polynomial g(S) := ˜F (r, S) · ˜u(S). At the end of the sum-check
the veriﬁer instead of computing g(s) directly, it gets it by evaluating ˜F (r, s) and ˜u(s) and by
computing their product.
factors (see the CPsc scheme). To see this, let us write g(S) :=(cid:81)p
The idea to turn the above protocol into a commit and prove argument is rather simple and
consists into using a CP-SNARK for the sumcheck relation with a committed polynomial g, or
more precisely for the case when a commitment to g is implicitly given through commitments to its
0 gi(S), where g1(S) := ˜F (r, S),
g2(S) = ˜u(S), and g0(S) := 1 is the constant polynomial. A commitment to ˜u(S) is part of the
statement, a commitment to ˜F (R, S) can be generated when specializing the relation to F in the
Derive algorithm. However, note that CPsc expects a commitment to a µ-variate polynomial, whereas
˜F is in ν + µ variables. For this, we let the prover commit to the partial evaluation of ˜F on r, i.e., to
the polynomial g1(S) and uses this commitment and polynomial in CPsc. Then, what is left to show
is that such committed g1(S) is actually the partial evaluation of the other committed polynomial
˜F . To prove this, the idea is that the veriﬁer chooses a random σ ←$ Fµ, and the prover uses CPpoly
to prove that g1(σ) = ˜F (r, σ).
We show the full protocol CPlin in Figure 6.