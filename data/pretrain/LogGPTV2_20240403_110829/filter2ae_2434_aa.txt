**作者：天融信阿尔法实验室  
公众号：**
这是linux pwn系列的第二篇文章，[前面一篇文章](http://paper.seebug.org/1108/
"前面一篇文章")我们已经介绍了栈的基本结构和栈溢出的利用方式，堆漏洞的成因和利用方法与栈比起来更加复杂，为此，我们这篇文章以shellphish的how2heap为例，主要介绍linux堆的相关数据结构和堆漏洞的利用方式，供大家参考。
### 0.前置知识
#### 0.0 编译+patch方法
how2heap源码地址，为了方便调试编译时使用gcc -g -fno-pie xx.c –o xx。这里先介绍一种linux下patch文件加载指定版本libc的方法，patchelf --set-interpreter
设置elf启动时使用指定ld.so（elf文件在启动时ld.so查找并加载程序所需的动态链接对象，加载完毕后启动程序，不同libc版本需要不同的加载器，不同版本libc和加载器下载地址，然后patchelf --set-rpath :/ 设置elf启动时加载指定libc。编译+patch示例
#### 0.1 linux堆管理简图及源码地址
Linux ptmalloc堆内存管理未加tcache机制的一张简图如下，linux
malloc.c源码地址
#### 0.2 linux堆的数据结构
##### 0.2.1堆块数据结构
首先介绍下linux下堆的基本数据结构。
各字段含义如下：
0.mchunk_prev_size。当当前堆物理相邻的前一个堆为空闲状态时mchunk_prev_size记录前一个空闲堆的大小，当当前堆物理相邻的前一个堆为占用状态时mchunk_prev_size可用于存储前一个堆的数据。
1.mchunk_size，记录当前堆包含堆头的大小，堆的大小在申请时会进行对齐，对齐后堆的大小为2*size_t的整数倍，size_t为机器字长。mchunk_size的低三比特位对堆的大小没有影响，ptmalloc用它来记录当前堆的状态，三个比特位从高到低依次：
  * NON_MAIN_ARENA，记录当前堆是否不属于主线程，1 表示不属于，0 表示属于。
  * IS_MAPPED，记录当前堆是否是由 mmap 分配的。
  * PREV_INUSE，记录前一个堆是否被分配。
2.fd、bk，堆处于分配状态时，堆结构体偏移fd的位置存储数据；堆处于空闲状态时，fd、bk分别记录物理相邻的前一空闲堆、物理相邻的后一空闲堆，即用于对应空闲链表的管理
3.fd_nextsize、bk_nextsize，large
chunk处于空闲状态时使用，分别用于记录前一个与当前堆大小不同的第一个空闲堆、后一个与当前堆大小不同的第一个空闲堆
##### 0.2.2 空闲链表
理解ptmalloc堆漏洞利用的另一个比较重要的结构体是bin，为了节省内存分配开销，用户释放掉的内存并不会马上返还给系统，而是保存在相应的空闲链表中以便后续分配使用。Ptmalloc使用的空闲链表bin有四种，fastbin、samllbin、largebin、unsortedbin
，一个好的内存分配器应该是内存碎片少、且能在较低算法复杂度和较少内存分配次数的情况下满足用户使用内存（申请和释放）的需求，四种bin的实现就体现了这种思想。
为了减少内存碎片，ptmalloc在释放当前堆cur_chunk时会检测cur_chunk的prev_inuse位（标识物理相邻前一个堆（物理低地址）是否处于空闲状态）和cur_chunk的物理相邻下一个堆是否是top_chunk、物理相邻下一个堆的prev_inuse位。若cur_chunk的prev_inuse位为0则合并后向堆并将后向堆的地址作为新的合并后的堆的起始地址；若cur_chunk的物理相邻下一个堆的prev_inuse位为0则进行前向合并并将cur_chunk的地址作为新的合并后的堆的起始地址。若待释放的cur_chunk的物理相邻下一个堆为top_chunk则将cur_chunk和top_chunk合并，并将cur_chunk的地址作为新的top_chunk起点。
Ptmalloc堆的一些参数
###### 0） fastbin
fastbin是保存一些较小堆（32位系统默认不超过64字节，64位系统默认不超过128字节）的单链表结构。由于fastbin中相同index链接的都是相同大小的堆，ptmalloc认为不同位置的相同大小的堆没有区别，因此fastbin使用lifo的方法实现，即新释放的堆被链接到fastbin的头部，从fastbin中申请堆也是从头部取，这样就省去了一次遍历单链表的过程。fastbin的内存分配策略是exact
fit，即只释放fastbin中跟申请内存大小恰好相等的堆。
###### 1） smallbin
smallbin中包含62个循环双向链表，链表中chunk的大小与index的关系是2 _size_t_
index。由于smallbin是循环双向链表，所以它的实现方法是fifo；smallbin的内存分配策略是exact fit。
从实现中可以看出smallbin链接的chunk中包含一部分fastbin大小的堆，fastbin范围的堆是有可能被链入其他链表的。当用户申请smallbin大小的堆而smallbin又没有初始化或者申请大于smallbin最大大小的堆时，fastbin中的堆根据prev_inuse位进行合并后会进入如上unsortedbin的处理流程，符合smallbin或largebin范围的堆会被链入相应的链表。
###### 2） largebin
largebin包含63个循环双向链表，每个链表链接的都是一定范围大小的堆，链表中堆的大小按从大到小排序，堆结构体中的fd_nextsize和bk_nextsize字段标识链表中相邻largechunk的大小，即fd_nextsize标识比它小的堆块、bk_nextsize标识比它大的堆块。
对于相同大小的堆，释放的堆插入到bin头部，通过fd、bk与其他的堆链接形成循环双向链表。
Largebin的分配策略是best
fit，即最终取出的堆是符合申请内存的最小堆（记为chunk）。若取出的chunk比申请内存大至少minsize，则分割chunk并取合适大小的剩余堆做为last
remainder；若取出的chunk比申请内存不大于minsize，则不分割chunk直接返回做为用户申请内存块。
###### 3） unsortedbin
unsortedbin可以视为空闲chunk回归其所属bin之前的缓冲区，分配策略是exact
fit。可能会被链入unsortedbin的堆块是申请largebin大小堆块切割后的last
remainder；释放不属于fastbin大小且不与topchunk紧邻的堆块时会被先链入unsortedbin；在特定情况下将fastbin内的堆合并后会进入unsortedbin的处理流程（特定情况为申请fastbin范围堆fastbin为空；申请非fastbin范围smallbin的堆但smallbin未初始化；申请largechunk）
### 1.how2heap调试
#### 1.0 First_fit
这个程序阐释了glibc分配内存的一个策略：first fit，即从空闲表中取出的堆是第一个满足申请内存大小的堆（fastbin、smallbin
exact fit，largebin best fit）
Shellphish给出的例子中先申请了0x512和0x256大小的两个堆，然后释放掉0x512大小的堆（申请0x256大小的堆的作用是避免释放不是mmap分配的堆a的时候合并到topchunk），实例中再次申请0x500大小的堆由于largebin的best
fit分配策略glibc会分割堆后返回堆a，即堆c等价于堆a，这时我们输出堆a的内容即输出修改后的堆c的内容。
glibc的first fit分配策略可用于use after
free(uaf,释放后重用)的利用，即修改新分配堆的内容等价于修改被释放的堆，uaf一般是由于释放堆后指针未置零造成的，不过在uaf的利用过程中我们一般使新分配的堆的大小等于被释放的堆的大小。
#### 1.1 fastbin_dup
fastbin下doublefree的一个示例（未加tcache机制）。
Shellphish给出的例子中先申请了3个0x8大小的堆（同样地申请c的原因是避免合并到topchunk），然后释放a（
再次释放a构成doublefree双重释放，但是由于glibc在释放fastbin大小的堆时检查且仅检查fastbin头部的堆和要释放的堆是否相等，若相等则报错），为了绕过glibc在释放堆时对bin头结点的检查，我们free(b)，此时fastbin如下(b=0x602020,a=0x602000；由于fastbin是单链表且LIFO，后释放的b被插入到链表头)
然后我们再次free(a)，由于此时bin头结点指向b，所以对头结点的检查被绕过，free(a)之后
可以看到此时fastbin中有两个a，如果此时我们申请三个0x8大小的堆，则依次从fastbin头部取得到a、b、a三个堆。
#### 1.2 fastbin_dup_into_stack
fastbin下doublefree的利用示例（未开启tcache机制）。主要思路是在doublefree时我们有一次申请一个存在于fastbin链表的堆的机会，然后通过伪造堆的内容可以使得fastbin链入伪造的堆，再次申请内存可以得到伪造地址处的堆。
示例中先申请了3个0x8大小的堆，然后通过free(a)、free(b)、free(a)构成一次doublefree（原理同fastbin_dup），此时fastbin的连接状态是a->b->a。再次申请两个0x8大小的堆，由于fastbin的lifo，此时fastbin中只剩a，且此时堆a存在于fastbin和用户申请的堆中，即我们可以控制一个存在于fastbin的堆的内容。容易想到的一种利用方式是伪造fastbin链表的内容，进而达到在伪造地址处申请堆的效果。