## PostgreSQL Oracle 兼容性之 - 函数、类型、多国语言
##### [TAG 21](../class/21.md)
### 作者                                       
digoal                                        
### 日期                                        
2017-02-17                                                                   
### 标签                                                                                                                                                        
PostgreSQL , Oracle , 兼容性 , 函数 , 类型 , 多国语言   
----                                        
## 背景                                
PostgreSQL的FDW支持在PostgreSQL中使用外部表的方式直接访问其他数据源的数据，就如同访问本地表一样。  
FDW接口是开放的，所以任何人都可以开发对应外部数据源的接口，比如oracle_fdw就是用来访问Oracle数据库的。  
FDW开发接口中，代码中会包括数据的转换，函数的转换，等  
所以我们从oracle_fdw这个插件的代码中，可以看到Oracle与PostgreSQL的类型、函数、多国语言等映射关系。  
## 正文  
### PostgreSQL与Oracle函数映射关系  
小写为PostgreSQL函数  
大写为Oracle函数  
```  
		case T_FuncExpr:  
			func = (FuncExpr *)expr;  
			if (! canHandleType(func->funcresulttype))  
				return NULL;  
			/* do nothing for implicit casts */  
			if (func->funcformat == COERCE_IMPLICIT_CAST)  
				return deparseExpr(session, foreignrel, linitial(func->args), oraTable, params);  
			/* get function name and schema */  
			tuple = SearchSysCache1(PROCOID, ObjectIdGetDatum(func->funcid));  
			if (! HeapTupleIsValid(tuple))  
			{  
				elog(ERROR, "cache lookup failed for function %u", func->funcid);  
			}  
			opername = pstrdup(((Form_pg_proc)GETSTRUCT(tuple))->proname.data);  
			schema = ((Form_pg_proc)GETSTRUCT(tuple))->pronamespace;  
			ReleaseSysCache(tuple);  
			/* ignore functions in other than the pg_catalog schema */  
			if (schema != PG_CATALOG_NAMESPACE)  
				return NULL;  
			/* the "normal" functions that we can translate */  
			if (strcmp(opername, "abs") == 0  
				|| strcmp(opername, "acos") == 0  
				|| strcmp(opername, "asin") == 0  
				|| strcmp(opername, "atan") == 0  
				|| strcmp(opername, "atan2") == 0  
				|| strcmp(opername, "ceil") == 0  
				|| strcmp(opername, "ceiling") == 0  
				|| strcmp(opername, "char_length") == 0  
				|| strcmp(opername, "character_length") == 0  
				|| strcmp(opername, "concat") == 0  
				|| strcmp(opername, "cos") == 0  
				|| strcmp(opername, "exp") == 0  
				|| strcmp(opername, "initcap") == 0  
				|| strcmp(opername, "length") == 0  
				|| strcmp(opername, "lower") == 0  
				|| strcmp(opername, "lpad") == 0  
				|| strcmp(opername, "ltrim") == 0  
				|| strcmp(opername, "mod") == 0  
				|| strcmp(opername, "octet_length") == 0  
				|| strcmp(opername, "position") == 0  
				|| strcmp(opername, "pow") == 0  
				|| strcmp(opername, "power") == 0  
				|| strcmp(opername, "replace") == 0  
				|| strcmp(opername, "round") == 0  
				|| strcmp(opername, "rpad") == 0  
				|| strcmp(opername, "rtrim") == 0  
				|| strcmp(opername, "sign") == 0  
				|| strcmp(opername, "sin") == 0  
				|| strcmp(opername, "sqrt") == 0  
				|| strcmp(opername, "strpos") == 0  
				|| strcmp(opername, "substr") == 0  
				|| (strcmp(opername, "substring") == 0 && list_length(func->args) == 3)  
				|| strcmp(opername, "tan") == 0  
				|| strcmp(opername, "to_char") == 0  
				|| strcmp(opername, "to_date") == 0  
				|| strcmp(opername, "to_number") == 0  
				|| strcmp(opername, "to_timestamp") == 0  
				|| strcmp(opername, "translate") == 0  
				|| strcmp(opername, "trunc") == 0  
				|| strcmp(opername, "upper") == 0)  
			{  
				initStringInfo(&result);  
				if (strcmp(opername, "ceiling") == 0)  
					appendStringInfo(&result, "CEIL(");  
				else if (strcmp(opername, "char_length") == 0  
						|| strcmp(opername, "character_length") == 0)  
					appendStringInfo(&result, "LENGTH(");  
				else if (strcmp(opername, "pow") == 0)  
					appendStringInfo(&result, "POWER(");  
				else if (strcmp(opername, "octet_length") == 0)  
					appendStringInfo(&result, "LENGTHB(");  
				else if (strcmp(opername, "position") == 0  
						|| strcmp(opername, "strpos") == 0)  
					appendStringInfo(&result, "INSTR(");  
				else if (strcmp(opername, "substring") == 0)  
					appendStringInfo(&result, "SUBSTR(");  
				else  
					appendStringInfo(&result, "%s(", opername);  
				first_arg = true;  
				foreach(cell, func->args)  
				{  
					arg = deparseExpr(session, foreignrel, lfirst(cell), oraTable, params);  
					if (arg == NULL)  
					{  
						pfree(result.data);  
						pfree(opername);  
						return NULL;  
					}  
					if (first_arg)  
					{  
						first_arg = false;  
						appendStringInfo(&result, "%s", arg);  
					}  
					else  
					{  
						appendStringInfo(&result, ", %s", arg);  
					}  
					pfree(arg);  
				}  
				appendStringInfo(&result, ")");  
			}  
			else if (strcmp(opername, "date_part") == 0)  
			{  
				/* special case: EXTRACT */  
				left = deparseExpr(session, foreignrel, linitial(func->args), oraTable, params);  
				if (left == NULL)  
				{  
					pfree(opername);  
					return NULL;  
				}  
				/* can only handle these fields in Oracle */  
				if (strcmp(left, "'year'") == 0  
					|| strcmp(left, "'month'") == 0  
					|| strcmp(left, "'day'") == 0  
					|| strcmp(left, "'hour'") == 0  
					|| strcmp(left, "'minute'") == 0  
					|| strcmp(left, "'second'") == 0  
					|| strcmp(left, "'timezone_hour'") == 0  
					|| strcmp(left, "'timezone_minute'") == 0)  
				{  
					/* remove final quote */  
					left[strlen(left) - 1] = '\0';  
					right = deparseExpr(session, foreignrel, lsecond(func->args), oraTable, params);  
					if (right == NULL)  
					{  
						pfree(opername);  
						pfree(left);  
						return NULL;  
					}  
					initStringInfo(&result);  
					appendStringInfo(&result, "EXTRACT(%s FROM %s)", left + 1, right);  
				}  
				else  
				{  
					pfree(opername);  
					pfree(left);  
					return NULL;  
				}  
				pfree(left);  
				pfree(right);  
			}  
			else if (strcmp(opername, "now") == 0 || strcmp(opername, "transaction_timestamp") == 0)  
			{  
				/* special case: current timestamp */  
				initStringInfo(&result);  
				appendStringInfo(&result, "(CAST (:now AS TIMESTAMP WITH TIME ZONE))");  
			}  
			else  
			{  
				/* function that we cannot render for Oracle */  
				pfree(opername);  
				return NULL;  
			}  
```  
### PostgreSQL与Oracle类型映射关系  
大写为Oracle类型  
小写为PostgreSQL类型  
```  
			switch (type)  
			{  
				case ORA_TYPE_CHAR:  
				case ORA_TYPE_NCHAR:  
					appendStringInfo(&buf, "character(%d)", charlen == 0 ? 1 : charlen);  
					break;  
				case ORA_TYPE_VARCHAR2:  
				case ORA_TYPE_NVARCHAR2:  
					appendStringInfo(&buf, "character varying(%d)", charlen == 0 ? 1 : charlen);  
					break;  
				case ORA_TYPE_CLOB:  
				case ORA_TYPE_LONG:  
					appendStringInfo(&buf, "text");  
					break;  
				case ORA_TYPE_NUMBER:  
					if (typeprec == 0)  
						appendStringInfo(&buf, "numeric");  
					else if (typescale == 0)  
					{  
						if (typeprec < 5)  
							appendStringInfo(&buf, "smallint");  
						else if (typeprec < 10)  
							appendStringInfo(&buf, "integer");  
						else if (typeprec < 19)  
							appendStringInfo(&buf, "bigint");  
						else  
							appendStringInfo(&buf, "numeric(%d)", typeprec);  
					}  
					else  
						appendStringInfo(&buf, "numeric(%d, %d)", typeprec, typescale);  
					break;  
				case ORA_TYPE_FLOAT:  
					if (typeprec < 54)  
						appendStringInfo(&buf, "float(%d)", typeprec);  
					else  
						appendStringInfo(&buf, "numeric");  
					break;  
				case ORA_TYPE_BINARYFLOAT:  
					appendStringInfo(&buf, "real");  
					break;  
				case ORA_TYPE_BINARYDOUBLE:  
					appendStringInfo(&buf, "double precision");  
					break;  
				case ORA_TYPE_RAW:  
				case ORA_TYPE_BLOB:  
				case ORA_TYPE_BFILE:  