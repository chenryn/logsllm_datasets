CREATE USER MAPPING FOR postgres SERVER oradb  
  OPTIONS (user 'system', password 'oracle');  
```  
ORACLE  
```  
SQL> create user digoal identified by "DIGOAL123321_";  
User created.  
create table digoal.tbl123 (id int primary key, info varchar2(512), crt_time date);  
SQL> grant dba to digoal;  
Grant succeeded.  
```  
PG  
```  
create schema ora;  
postgres=# import foreign schema "DIGOAL" from server oradb into ora;  
IMPORT FOREIGN SCHEMA  
postgres=# select * from ora.tbl123 ;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
postgres=# explain verbose select * from ora.tbl123 ;  
                                                       QUERY PLAN                                                          
-------------------------------------------------------------------------------------------------------------------------  
 Foreign Scan on ora.tbl123  (cost=10000.00..20000.00 rows=1000 width=556)  
   Output: id, info, crt_time  
   Oracle query: SELECT /*2f7156b3ee8d44022c295635d2320ba7*/ r1."ID", r1."INFO", r1."CRT_TIME" FROM "DIGOAL"."TBL123" r1  
   Oracle plan: SELECT STATEMENT  
   Oracle plan:   TABLE ACCESS FULL TBL123  
(5 rows)  
postgres=# explain verbose  insert into ora.tbl123 select generate_series(1,100000), md5(random()::Text),clock_timestamp();  
                                                       QUERY PLAN                                                          
-------------------------------------------------------------------------------------------------------------------------  
 Insert on ora.tbl123  (cost=0.00..25.03 rows=1000 width=556)  
   Oracle statement: INSERT INTO "DIGOAL"."TBL123" ("ID", "INFO", "CRT_TIME") VALUES (:p1, :p2, CAST (:p3 AS TIMESTAMP))  
   ->  Subquery Scan on "*SELECT*"  (cost=0.00..25.03 rows=1000 width=556)  
         Output: "*SELECT*".generate_series, "*SELECT*".md5, "*SELECT*".clock_timestamp  
         ->  ProjectSet  (cost=0.00..5.03 rows=1000 width=44)  
               Output: generate_series(1, 100000), md5((random())::text), clock_timestamp()  
               ->  Result  (cost=0.00..0.01 rows=1 width=0)  
(7 rows)  
```  
## 简单用法  
1、创建oracle_fdw插件  
```  
CREATE EXTENSION oracle_fdw;  
```  
2、创建连接ORACLE的server，用户映射  
```  
CREATE SERVER oracle FOREIGN DATA WRAPPER oracle_fdw  
   OPTIONS (dbserver '//dbserver.mydomain.com/ORADB');  
GRANT USAGE ON FOREIGN SERVER oracle TO migrator;  
CREATE USER MAPPING FOR migrator SERVER oracle  
   OPTIONS (user 'orauser', password 'orapwd');  
```  
3、创建ora_migrator插件，并使用以上oracle foreign server访问ORACLE，将LAURENZ,SOCIAL这两个oracle中的schema连同数据迁移到PG。  
注意这些吐出来的notice，记录了整个迁移过程。  
```  
CREATE EXTENSION ora_migrator;  
SELECT oracle_migrate(server => 'oracle', only_schemas => '{LAURENZ,SOCIAL}');  
NOTICE:  Creating staging schemas "ora_stage" and "pgsql_stage" ...  
NOTICE:  Creating Oracle metadata views in schema "ora_stage" ...  
NOTICE:  Copy definitions to PostgreSQL staging schema "pgsql_stage" ...  
NOTICE:  Creating schemas ...  
NOTICE:  Creating sequences ...  
NOTICE:  Creating foreign tables ...  
NOTICE:  Migrating table laurenz.log ...  
NOTICE:  Migrating table laurenz.ft_speed_sa ...  
NOTICE:  Migrating table laurenz.badstring ...  
WARNING:  Error loading table data for laurenz.badstring  
DETAIL:  invalid byte sequence for encoding "UTF8": 0x80:   
NOTICE:  Migrating table laurenz.datetest ...  
NOTICE:  Migrating table laurenz.department ...  
NOTICE:  Migrating table laurenz.hasnul ...  
WARNING:  Error loading table data for laurenz.hasnul  
DETAIL:  invalid byte sequence for encoding "UTF8": 0x00:   
NOTICE:  Migrating table social.blog ...  
NOTICE:  Migrating table laurenz.employee ...  
NOTICE:  Migrating table laurenz.identity ...  
NOTICE:  Migrating table laurenz.req_lot ...  
NOTICE:  Migrating table social.email ...  
NOTICE:  Migrating table laurenz.numbers ...  
NOTICE:  Creating UNIQUE and PRIMARY KEY constraints ...  
WARNING:  Error creating primary key or unique constraint on table laurenz.badstring  
DETAIL:  relation "laurenz.badstring" does not exist:   
WARNING:  Error creating primary key or unique constraint on table laurenz.hasnul  
DETAIL:  relation "laurenz.hasnul" does not exist:   
NOTICE:  Creating FOREIGN KEY constraints ...  
NOTICE:  Creating CHECK constraints ...  
NOTICE:  Creating indexes ...  
NOTICE:  Setting column default values ...  
NOTICE:  Dropping staging schemas ...  
NOTICE:  Migration completed with 4 errors.  
 oracle_migrate   
----------------  
              4  
(1 row)  
DROP EXTENSION ora_migrator;  
```  
日志中表明，有数据迁移错误（由于编码问题）。  
## 详细用法  
请参考代码与README  
Only sequences and normal tables with their constraints and indexes will be migrated, all objects containing PL/SQL code (triggers, functions, procedures and packages) will have to be migrated by hand.  
In addition to that, the extension can be used to create foreign tables and views that allow convenient access to Oracle metadata from PostgreSQL.  
https://github.com/cybertec-postgresql/ora_migrator/blob/master/ora_migrator--0.9.1.sql  
https://github.com/cybertec-postgresql/ora_migrator/blob/master/README.md  
支持手工操作。  
You can either perform the migration by calling oracle_migrate, or you do it step by step:  
- Call oracle_migrate_prepare to create the Oracle staging schema with the Oracle metadata views and the PostgreSQL staging schema with metadata copied and translated from the Oracle stage.  
- After this step, you can modify the data in the PostgreSQL stage, from which the PostgreSQL tables are created. This is useful if you want to modify data types, indexes or constraints.  
  Be aware that you cannot rename the schemas.  
  Also, if you want to rename tables, make sure that the new name is used in all tables consistently.  
  The tables tables and functions in the PostgreSQL staging schema have a boolean attribute migrate that should be set to TRUE to include the object in the migration. Since functions will always require editing, the flag is initially set to FALSE for functions.  
  If the Oracle definitions change while you are working, you can refresh the tables in the PostgreSQL stage with oracle_migrate_refresh.  
- Call oracle_migrate_mkforeign to create the PostgreSQL schemas and sequences and foreign tables.  
- Call oracle_migrate_tables to replace the foreign tables with real tables and migrate the data from Oracle.  
  Alternatively, you can use oracle_materialize to do this step for Each table individually. This has the advantage that you can migrate several tables in parallel in multiple database sessions, which may speed up the migration process.  
- Call oracle_migrate_functions to migrate functions.  
- Call oracle_migrate_triggers to migrate triggers.  
- Call oracle_migrate_views to migrate views.  
- Call oracle_migrate_constraints to migrate constraints and indexes from Oracle.  
- Call oracle_migrate_finish to remove the staging schemas and complete the migration.  
Hint: When developing a migration, it will be useful to set the parameter with_data to false, so that only the object definitions are migrated, but not the data. This will make the migration much faster and is useful for debugging problems that are not connected with the table data.  
Apart from migration, you can use the function create_oraviews to create foreign tables and views that allow convenient access to Oracle metadata from PostgreSQL.  
This is used by oracle_migrate_prepare to populate the staging schema, but it may be useful for other tools.  
These foreign tables can be used in arbitrary queries, e.g.  
```  
SELECT table_name,  
       constraint_name,  
       column_name,  
       remote_table,  
       remote_column  
FROM foreign_keys  
WHERE schema = 'LAURENZ'  
  AND remote_schema = 'LAURENZ'  
ORDER BY table_name, position;  
```  
The additional conditions will be pushed down to Oracle whenever that is possible for oracle_fdw, so the queries should be efficient.  
All Oracle object names will appear like they are in Oracle, which is usually in upper case.  
## 参考  
https://github.com/cybertec-postgresql/ora_migrator  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")