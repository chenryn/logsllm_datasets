或许你希望知道这些信息全都存储在什么地方，当然，你并不是唯一想了解这个问题的人！在IDA 数据库中，网络节点的所有内容都存储在二叉树节点中。二叉树节点反过来又存储在一个ID0 文件中，在关闭数据库时，ID0 文件又存储在一个 IDB 文件中。在IDA 的任何显示窗口中，你都不可能看到你创建的任何网络节点内容。你可以任意操纵这些数据。因此，对于你希望用来存储调用结果的任何插件和脚本而言，网络节点是永久存储它们的理想位置。
1. 创建网络节点
关于网络节点，有一个令人迷惑的地方，即在你的一个模块中声明一个 netnode
 变量，并不一定会在数据库中创建该网络节点的内部表示形式。只要满足以下其中一个条件，就可以在数据库内部创建一个网络节点。
网络节点分配有一个名称。
网络节点分配有一个主值。
有一个值存储在网络节点的一个内部数组中。
有3 个构造函数可用于声明模块中的网络节点。这些函数的原型包含在 netnode.hpp 文件中，它们的应用示例如代码清单 16-1 所示。
代码清单 16-1 声明网络节点
    #ifdef __EA64__typedef ulonglong nodeidx_t;  
  \#else  
  typedef ulong nodeidx_t;  
   \#endif
    class netnode {  
➊     netnode();  
➋     netnode(nodeidx_t num);  
➌     netnode(const char *name, size_t namlen=0, bool do_create=false);  
➍     bool create(const char *name, size_t namlen=0);  
➎     bool create();  
      //... remainder of netnode class follows  
    };  
    netnode n0;                       //uses➊  
    netnode n1(0x00401110);           //uses➋  
    netnode n2("$ node 2");           //uses➌  
    netnode n3("$ node 3", 0, true);  //uses➌
在这个例子中，执行代码后，数据库中只存在一个网络节点（n3
 ）。如果网络节点 n1
 和n2
 之前已经创建并且填充有数据，它们可能会存在。无论之前是否存在，这时 n1
 都能接受新的数据。如果n2
 并不存在，则意味着你不可能在数据库中找到名为$ node 2
 的网络节点，那么，你必须首先显式创建 n2
 （➍或➎），才能将数据存储到这个节点中。如果希望保证能够在 n2
 中存储数据，我们需要添加以下“安全检查”：
if (BADNODE == (nodeidx_t)n2) {  
   n2.create("$ node 2");  
}
前面的例子说明了 nodeidx_t
 运算符的用法，它可以将网络节点转换成nodeidx_t
 。nodeidx_t
 运算符只返回相关网络节点的netnodenumber
 数据成员，并可轻易将netnode
 变量转换成整数。
关于网络节点，有一点需要注意：网络节点首先必须拥有一个有效的 netnodenumber
 ，然后你才能在该网络节点中存储数据。如上面例子中➋处所示，和 n1
 一样，netnodenumber
 可以通过一个构造函数显式分配。另外，如果在构造函数中使用create
 标志（和 n3
 一样，如➌处所示），或通过create
 （和 n2
 一样）函数创建一个网络节点，这时也可以在内部生成一个netnodenumber
 。内部分配的 netnodenumber
 以0xFF000000
 开头，并随每个新建的网络节点而递增。
在这个例子中，我们完全忽略了网络节点 n0
 。当前，n0
 既没有编号也没有名称。我们可以使用create
 函数，以和创建 n2
 类似的方法，根据名称创建 n0
 。我们也可以采用另一种形式，用一个内部生成的有效的 netnodenumber
 创建一个未命名的网络节点，如下所示：
n0.create();  //assign an internally generated netnodenumber to n0
这样，我们就可以将数据存储到 n0
 中，但是将来我们并没有办法检索这些数据，除非我们将分配给它的 netnodenumber
 记录在某个地方，或者给 n0
 分配一个名称。这表示如果网络节点与某个虚拟地址关联（类似于例子中的 n1
 ），我们就可以轻松访问这个节点。对于其他所有网络节点，如果为它们分配名称，那么我们就可以对将来的所有网络节点引用进行具名查询（和例子中的n2
 和n3
 一样）。
注意，对于已命名的网络节点，我们选择使用以“$
 ”为前缀的名称，这样做是遵循netnode.hpp文件中的建议，以避免与 IDA 内部使用的名称造成冲突。
2. 网络节点中的数据存储
现在，你已经知道如何创建一个可用于存储数据的网络节点。下面，我们回过头来讨论网络节点中的内部数组的存储能力。在将一个值存储到网络节点中的数组时，需要指定5 方面的信息：一个索引值、一个索引大小（8 或32 位）、一个待存储的值、这个值包含的字节数以及一个用于存储这个值的数组（每类 256 个数组中的一个）。索引大小参数由我们用于存储或检索数据的函数隐式指定。其他值则以参数形式传递给函数。通常，选择将一个值存储到256 个数组中的哪一个数组的参数叫做标签（tag），它一般使用一个字符来指定（尽管并不需要如此）。网络节点的文档中列出了一些特殊的值类型，它们分别是 altval、supval 和hashval。默认情况下，每一类值与一个特定的数组标签关联：'A'
 代表altval，'S'
 代表supval ，'H'
 代表hashval。第4 类值叫做charval ，它没有任何与之关联的数组标签。
值得注意的是，这些值类型与如何将数据存储到网络节点关联更大，而与网络节点中某个特定的数组关系不大。在存储数据时，通过指定一个备用的数组标签，你可以将任何类型的值存储到任何数组中。任何时候，你都需要记住你存储到某个特殊数组位置中的数据的类型，以便将来使用适合该数据类型的检索方法。
altval提供了一个简单的接口，可用于存储和检索网络节点中的整数数据。altval可存储到网络节点中的任何数组中，但默认情况下，它被存储到'A'
 数组中。不管你希望将整数存储到哪一个数组中，使用与 altval 有关的函数都将大大简化存储过程。使用 altval 存储和检索数据的代码如代码清单 16-2 所示。
代码清单 16-2 访问网络节点 altval
netnode n("$ idabook", 0, true);  //create the netnode if it doesn't exist  
sval_t index = 1000;  //sval_t is a 32 bit type, this example uses 32-bit indexes  
ulong value = 0x12345678;  
n.altset(index, value);   //store value into the 'A' array at index  
value = n.altval(index);  //retrieve value from the 'A' array at index  
n.altset(index, value, (char)3);  //store into array 3  
value = n.altval(index, (char)3); //read from array 3
在这个例子中，你看到一种将被其他类型的网络节点值重复使用的模式，即使用XXXset
 （这里为altset
 ）函数将一个值存储到一个网络节点中，并使用 XXXval
 （这里为altval
 ）函数从网络节点中检索这个值。如果希望使用 8 位索引值将整数存储到数组中，我们需要使用的函数会稍有不同，如下面的例子所示。
netnode n("$ idabook", 0, true);  
uchar index = 80;      //this example uses 8-bit index values  
ulong value = 0x87654321;  
n.altset_idx8(index, value, 'A');  //store, no default tags with xxx_idx8 functions  
value = n.altval_idx8(index, 'A'); //retrieve value from the 'A' array at index  
n.altset_idx8(index, value, (char)3);  //store into array 3  
value = n.altval_idx8(index, (char)3); //read from array 3
从这个例子中，你看到，要使用 8 位索引值，你必须使用一个以_idx8
 为后缀的函数。还要注意的是，没有_idx8
 函数为数组标签参数提供默认值。
要在网络节点中存储和检索数据，supval 提供的方法最多。supval 可表示任意大小的数据，最小为1 个字节，最大为 1024 个字节。使用 32 位索引值时，存储和检索 supval 的默认数组为'S'
 数组。但是，通过指定一个适当的数组标签值，同样可以将supval 存储到256 个可用数组中的任何一个。字符串是一种常见的任意长度的数据，它们可由操纵supval 的函数进行特殊处理。代码清单16-3 中的代码说明了如何将 supval 存储到网络节点中。
代码清单 16-3 存储网络节点 supval
netnode n("$ idabook", 0, true);  //create the netnode if it doesn't exist  
char *string_data = "example supval string data";  
char binary_data[] = {0xfe, 0xdc, 0x4e, 0xc7, 0x90, 0x00, 0x13, 0x8a,  
                      0x33, 0x19, 0x21, 0xe5, 0xaa, 0x3d, 0xa1, 0x95};  
//store binary_data into the 'S' array at index 1000, we must supply a  
//pointer to data and the size of the data  
n.supset(1000, binary_data, sizeof(binary_data));  
//store string_data into the 'S' array at index 1001.  If no size is supplied,  
//or size is zero, the data size is computed as: strlen(data) + 1  
n.supset(1001, string_data);  
//store into an array other than 'S' (200 in this case) at index 500  
n.supset(500, binary_data, sizeof(binary_data), (char)200); 
这里的supset
 函数需要一个数组索引、一个指向某个数据的指针、该数据的长度（单位为字节）、一个数组标签（如果省略，则默认为'S'
 ）。如果省略长度参数，则该参数默认为零。如果指定长度为零，则supset
 会认为所存储的数据是一个字符串，并将该数据的长度计算为strlen
 （数据）+1，并将一个零终止符存储在该字符串数据的后面。
从supval 中检索数据需要特别小心，因为在检索数据前，你可能并不知道该supval 所包含的数据的数量。当你从 supval 中检索数据时，字节从网络节点被复制到一个用户提供的输出缓冲区中。如何确保输出缓冲区足够大，能够接收所有的 supval 数据呢？第一种方法是将所有 supval数据复制到一个至少有 1024 个字节大小的缓冲区中；第二种方法是通过查询 supval 的大小，预先设置输出缓冲区的大小。有两个函数可用于检索supval 。supval
 函数用于检索任何数据，而supstr
 函数则专门用于检索字符串数据。在使用这两个函数时，你需要指定一个指向你的输出缓冲区的指针，同时指定该缓冲区的大小。supval
 函数的返回值是复制到输出缓冲区中的字节数量，而supstr
 函数的返回值则是复制到输出缓冲区中的字符串的长度，但不包括零终止符，即使零终止符被复制到缓冲区中。这两个函数都接受一个特例，即用 NULL
 指针代替输出缓冲区指针。在这种情况下，supval
 和supstr
 返回保存 supval 数据所需的字节数（包括任何零终止符）。使用supval
 和supstr
 函数检索 supval 数据的代码如代码清单 16-4 所示。
代码清单 16-4 检索网络节点 supval
//determine size of element 1000 in 'S' array.  The NULL pointer indicates  
//that we are not supplying an output buffer   
int len = n.supval(1000, NULL, 0);  
char *outbuf = new char[len];  //allocate a buffer of sufficient size  
n.supval(1000, outbuf, len);   //extract data from the supval  
//determine size of element 1001 in 'S' array.  The NULL pointer indicates  