11
Dark.Net
Dark.Net
gasgas
gasgas
22
简介
简介
 Malware
Malware
 Dot Net Framework
Dot Net Framework
 .net 
.net rootkit
rootkit
 Anti tech
Anti tech
 Q & A
Q & A
33
Malware
Malware
44
Malware
Malware
 Virus
Virus
 Backdoor
Backdoor
 Trojan horse
Trojan horse
 Rootkit
Rootkit
 Scareware
Scareware
 Adware
Adware
 Worm
Worm
55
Infect
Infect
 Executable
Executable
 Interpreted file
Interpreted file
 Kernel
Kernel
 Service
Service
 MBR 
MBR 
 Hypervisor
Hypervisor
66
Hypervisor rootkit
Hypervisor rootkit
Target OS 
Target OS 
Hardware
Hardware
App
App
App
App
77
Hypervisor rootkit
Hypervisor rootkit
Target OS 
Target OS 
Hardware
Hardware
App
App
App
App
Virtual machine monitor 
Virtual machine monitor 
Host OS 
Host OS 
Rogue app
Rogue app
88
Malware
Malware design & tech
design & tech
 Metamorphism
Metamorphism
 Obfuscations
Obfuscations
 Anti
Anti--emulation
emulation
 Anti
Anti--Virtual Machine 
Virtual Machine 
 Anti
Anti--debuggers
debuggers
 Rootkit
Rootkit Technology
Technology
99
Metamorphism
Metamorphism
mov [ebp - 3], eax
push ecx
mov ecx,ebp
add ecx,33
push esi
mov esi,ecx
sub esi,34
mov [esi-2],eax
pop esi
pop ecx
push ecx
mov ecx, ebp
push eax
mov eax, 33
add ecx, eax
pop eax
push esi
mov esi, ecx
push edx
mov edx, 34
sub esi, edx
pop edx
mov [esi - 2], eax
pop esi
pop ecx
push ecx
mov ecx, [ebp + 10]
mov ecx, ebp
push eax
add eax, 2342
mov eax, 33
add ecx, eax
pop eax
mov eax, esi
push eax
mov esi, ecx
push edx
xor edx, 778f
mov edx, 34
sub esi, edx
pop edx
mov [esi-2], eax
pop esi
pop ecx
push ecx
mov ecx,ebp
add ecx,33
mov [ecx-36],eax
pop ecx
10
10
Obfsucations
Obfsucations
Call Obfsucations to prevent static analysis
NORMAL CALL
L0:  call L5
L1:  …
L2:  …
L3:  …
L4:  …
L5: 
L6:  …
OBFUSCATED CALL
L0a: push L1
L0b: push L5
L0c: ret
L1:  …
L2:  …
L3:  …
L4:  …
L5: 
L6:  …
11
11
Anti
Anti--emulation 
emulation vs
vs anti
anti--debug
debug
 Anti
Anti--debug
debug
•• Hide the fact that someone with a debugger is 
Hide the fact that someone with a debugger is 
stepping/monitoring your program
stepping/monitoring your program
•• Focus in differences in system when a 
Focus in differences in system when a 
debugger is active 
debugger is active vs
vs not
not
 Memory structures
Memory structures
 Time usage (ticks)
Time usage (ticks)
 API 
API behaviour
behaviour
 Suspicious windows/drivers/services, e.g. debug 
Suspicious windows/drivers/services, e.g. debug 
rights without asking
rights without asking…
…
12
12
Anti
Anti--emulation 
emulation vs
vs Anti
Anti--debug
debug
 Anti
Anti--emulation
emulation
•• There is no debugger to hide
There is no debugger to hide
•• Detect the difference between an emulated 
Detect the difference between an emulated 
system and a real system
system and a real system
 Access complex resources, use complex 
Access complex resources, use complex 
calculations
calculations
 Detect limitations which are not possible (or 
Detect limitations which are not possible (or 
very time consuming) to emulate
very time consuming) to emulate
 Use (or setup) exotic APIs so they deliver a 
Use (or setup) exotic APIs so they deliver a 
specific error condition
specific error condition
•• Can this be used against it?
Can this be used against it?
 What is virtual machine detection?
What is virtual machine detection?
13
13
Challenge For Emulators
Challenge For Emulators
 Code that 
Code that ““does the bad stuff
does the bad stuff”” is hidden in many ways
is hidden in many ways
••
Runtime libraries
Runtime libraries
••
Compressors
Compressors
 UPX, FSG, PEC
UPX, FSG, PEC…
…
••
Encryptors
Encryptors
 Simple or advanced runtime encryption
Simple or advanced runtime encryption
••
Protectors
Protectors
 SVKP, 
SVKP, Themida
Themida…
…
••
Installers 
Installers 
 Nullsoft
Nullsoft, RARSFX, ZIPSFX etc
, RARSFX, ZIPSFX etc
••
Embedded dropped components
Embedded dropped components
 Libraries/services, kernel drivers, scripts, executables etc.
Libraries/services, kernel drivers, scripts, executables etc.
 What to do with a single component; DLL or driver?
What to do with a single component; DLL or driver?
••
Download links
Download links
 Download 
Download malware
malware components in proprietary formats & protocols
components in proprietary formats & protocols
••
Bad records inside file formats (like XLS, JPG etc)
Bad records inside file formats (like XLS, JPG etc)
 Exploits to run binary code
Exploits to run binary code
14
14
Anti Emulator Code
Anti Emulator Code
 CreateFileA
CreateFileA (e.g. 
(e.g. 
"C:
"C:\\WINDOWS
WINDOWS\\SYSTEM32
SYSTEM32\\drivers
drivers\\ntfs.sys)
ntfs.sys)
 GetFileSize
GetFileSize (0x0000002A,0x00000000)
(0x0000002A,0x00000000)
 WriteProcessMemory
WriteProcessMemory
(0xFFFFFFFF,0x0043661D,STACK_ADDR,0
(0xFFFFFFFF,0x0043661D,STACK_ADDR,0
x00000004,0x00000000)
x00000004,0x00000000)
 EnumWindowStationsA
EnumWindowStationsA() 
() --> callback
> callback
 EnumServicesStatusA
EnumServicesStatusA() 
() --> looking for 
> looking for 
standard services
standard services
15
15
Anti
Anti--Virtual Machines
Virtual Machines
Pseudo code:
Pseudo code:
IF 
IF detect_vmware
detect_vmware
THEN do nothing, destroy self, destroy system
THEN do nothing, destroy self, destroy system
ELSE
ELSE
Continue with 
Continue with malware
malware payload
payload
DASHER Variant Disassembly Example:
DASHER Variant Disassembly Example:
PS______:00401D51   push    offset 
PS______:00401D51   push    offset aaNetStartFindst
NetStartFindst ; "
; "net 
net 
start | 
start | findstr
findstr VMware
VMware && echo 
&& echo VMwa
VMwa"...
"...
PS______:00401D52   push    
PS______:00401D52   push    edi
edi
PS______:00401D53   call    sub_402148
PS______:00401D53   call    sub_402148
PS______:00401D58   lea     
PS______:00401D58   lea     eax
eax, [ebp+var_300]
, [ebp+var_300]
PS______:00401D5E  push    
PS______:00401D5E  push    eax
eax
PS______:00401D5F  push    offset a
PS______:00401D5F  push    offset aNetStartFind
NetStartFind_0 ; "
_0 ; "net 
net 
start | 
start | findstr
findstr Virtual &&echo 
Virtual &&echo Vir
Vir"...
"...
PS______:00401D64  push    
PS______:00401D64  push    edi
edi
PS______:00401D65  call    sub_402148
PS______:00401D65  call    sub_402148
PS______:00401D6A  push    offset aDel0    ; "
PS______:00401D6A  push    offset aDel0    ; "del 
del 
%%0
%%0\\rr\\nn““
16
16
Anti
Anti--debuggers
debuggers
 Making reverse
Making reverse--engineering and 
engineering and 
disassembly painful
disassembly painful
•• Polymorphism
Polymorphism
•• Encryption
Encryption
•• Interrupt disabling
Interrupt disabling
•• Debugger detection
Debugger detection
 Behavior modification
Behavior modification
 Crashing debugger
Crashing debugger
17
17
Forms of 
Forms of Rootkit
Rootkit
 KERNEL
KERNEL--LEVEL
LEVEL
 SYSTEM ACCESS
SYSTEM ACCESS
 APPLICATION
APPLICATION--LEVEL
LEVEL
18
18
System Service Call Cycle
System Service Call Cycle
User Application
call to CreateFile API
Kernel32.DLL
call stub NtCreateFile API
NTDLL.DLL
EAX = 0x00000020
call INT 2Eh
USER MODE
KERNEL MODE
NTOSKRNL.EXE
Switch Back to USER 
MODE
return NtCreateFile result
return CreateFile result
19
19
NTDLL Interface
NTDLL Interface
 Kernel32.DLL imports solely on the library 
Kernel32.DLL imports solely on the library 
NTDLL.DLL 
NTDLL.DLL 
 NTDLL.DLL is an interface to 
NTDLL.DLL is an interface to Int
Int 2Eh function of 
2Eh function of 
Windows NT 
Windows NT 
 Int
Int 2Eh signals a need to switch from user mode 
2Eh signals a need to switch from user mode 
to kernel mode
to kernel mode
 Int
Int 2Eh is internally known as 
2Eh is internally known as KiSystemService
KiSystemService().
().
 Int
Int 2Eh handler looks up on a table in NTOSKRNL 
2Eh handler looks up on a table in NTOSKRNL 
called 
called KeServiceDescriptorTable
KeServiceDescriptorTable() 
() 
20
20
NTOSKRNL Exports
NTOSKRNL Exports
The structure of 
KeServiceDescriptorTable: 
typedef struct
ServiceDescriptorTable {
PVOID ServiceTableBase;
PVOIDServiceCounterTable(0);
unsigned int NumberOfServices;
PVOID ParamTableBase;
}
21
21
Getting Into The Root
Getting Into The Root
Application: Call to CreateFile() API
Kernel32.DLL: Call to NtCreateFile() -- Native API
NTDLL.DLL
NTOSKRNL.EXE: Call to KeServiceDescriptor Table
Invokes KiSystemService()
22
22
KeServiceDescriptor
KeServiceDescriptor Table
Table
ServiceTableBase
ParamTableBase
…
…
@ NtCreateFile
0x2C bytes
…
…
@NtCreateProcess
0x20 bytes
…
@ NtOpenProcess
0x10 bytes
…
…
…
0x20
0x29
0x6A
23
23
Hooking System Service
Hooking System Service
 Choose a system service exported by 
Choose a system service exported by 
NTOSKRNL.EXE
NTOSKRNL.EXE
 Obtain the address of this function
Obtain the address of this function
 Verify if the function starts with a 
Verify if the function starts with a 
MOV EAX, 0xXXXXXXXX construct.
MOV EAX, 0xXXXXXXXX construct.
 Retrieve the index value associated 
Retrieve the index value associated 
with the function.
with the function.
24
24
Hooking System Service
Hooking System Service
Example of NTDLL Exported Functions 
25
25
Hooking System Service
Hooking System Service
 Import the undocumented structure 
Import the undocumented structure 
KeServiceDescriptorTable
KeServiceDescriptorTable..
 Locate the function index
Locate the function index
 Overwrite the corresponding 
Overwrite the corresponding 
ServiceTableBase
ServiceTableBase value with the new 
value with the new 
system service handler
system service handler
26
26
API Hooking: IAT Modification
API Hooking: IAT Modification
Headers
Code Section
CALL [CreateFileA]
CreateFileA():
…
Import Section
CreateFileA: 
0x12345678
Kernel32.dll
PE File Before IAT Patching
27
27
API Hooking: IAT Modification
API Hooking: IAT Modification
Headers
Code Section
CALL [CreateFileA]
CreateFileA():
…
Import Section
CreateFileA: 
Addr of Hook
Kernel32.dll
PE File Before IAT Patching
Hook:
JMP 0x12345678
28
28
API Hooking: Dynamic Code Patching
API Hooking: Dynamic Code Patching
FindNextFileA:
195D6: 55
PUSH EBP
195D7: 8BEC
MOV EBP, ESP
195D9: 81EC60020000
SUB ESP, 260
Continue_Here:
194DF: 53
PUSH EBX
195E0: 8D85A0FDFFFF
LEA EAX, [EBP-260]
195DF: XX
Original FindNextFile() API Function
29
29
API Hooking: Dynamic Code Patching
API Hooking: Dynamic Code Patching
FindNextFileA:
195D6: E9XXXXXXXX
JMP Hook
195DB: 90
NOP
195DC: 90
NOP
195DD: 90
NOP
195DE: 90
NOP
Continue_Here:
194DF: 53
PUSH EBX
195E0: 8D85A0FDFFFF
LEA EAX, [EBP-260]
195DF: XX
Hook: 
call Saved_Original
ret
Patched FindNextFile() API Function
30
30
DLL Injection
DLL Injection
Malware Process
Call to CreateRemoteThread()
Victim Process
Call to LoadLibrary()
Malicious DLL
Using 
CreateRemoteThread(), 
a call to LoadLibrary() 
API of can cause a 
malicious DLL to be 
loaded on the remote 
process’ address space.
31
31
Direct Memory Writing
Direct Memory Writing
HEADERS
Code Section
VirtualAllocEx()
VirtualProtectEx()
WriteProcessMemory()
CreateRemoteThread()
HEADERS
Code Section
Heap
Install_Hooks();
Attacking Process
Victim Process
Patching Another Process
32
32
Dot Net 
Dot Net FrameWork
FrameWork
33
33
What is Microsoft .NET?
 What is .NET?
What is .NET?
•• New Microsoft Framework for the 
New Microsoft Framework for the 
Internet Development Environment.
Internet Development Environment.
•• It is a protocol stack and computing 
It is a protocol stack and computing 
model for TCPI/IP
model for TCPI/IP--based, distributed 
based, distributed 
computing. 
computing. 
•• The .NET Enterprise servers are built for 
The .NET Enterprise servers are built for 
interoperability from the ground up, 
interoperability from the ground up, 
using open Web standards such as XML 
using open Web standards such as XML 
with increased scalability and reliability.
with increased scalability and reliability.
34