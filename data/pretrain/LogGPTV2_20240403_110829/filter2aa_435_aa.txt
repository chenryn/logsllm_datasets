# Dark.Net: Malware and Rootkit Analysis

## Overview
- **Malware**: Malicious software designed to harm, steal, or otherwise cause damage to a system.
- **.NET Framework**: A software framework developed by Microsoft for building and running applications on Windows.
- **.Net Rootkit**: A type of rootkit that targets the .NET environment.
- **Anti-tech**: Techniques and tools used to detect and mitigate malware.
- **Q & A**: Questions and answers related to malware and rootkits.

## Types of Malware
- **Virus**: Self-replicating code that attaches itself to other programs.
- **Backdoor**: Allows unauthorized access to a system.
- **Trojan Horse**: Malware disguised as legitimate software.
- **Rootkit**: Conceals its presence on the system.
- **Scareware**: Software that tricks users into buying unnecessary or fake antivirus software.
- **Adware**: Displays unwanted advertisements.
- **Worm**: Self-replicating malware that spreads through networks.

## Infection Vectors
- **Executable Files**: Directly executable files.
- **Interpreted Files**: Scripts that are executed by an interpreter.
- **Kernel**: Core of the operating system.
- **Service**: Background processes that run on the system.
- **MBR (Master Boot Record)**: The first sector of a storage device.
- **Hypervisor**: Software layer that manages virtual machines.

## Hypervisor Rootkits
- **Target OS**: Operating system targeted by the rootkit.
- **Hardware**: Physical components of the system.
- **App**: Applications running on the system.
- **Virtual Machine Monitor (VMM)**: Manages the execution of multiple virtual machines.
- **Host OS**: The operating system that runs the hypervisor.
- **Rogue App**: Malicious application.

## Malware Design and Techniques
- **Metamorphism**: Code that changes its appearance each time it runs.
- **Obfuscation**: Techniques to make code difficult to understand.
- **Anti-emulation**: Methods to detect and evade emulators.
- **Anti-virtual machine**: Techniques to detect and evade virtual machines.
- **Anti-debuggers**: Methods to detect and evade debuggers.
- **Rootkit Technology**: Advanced techniques to hide the presence of malware.

### Metamorphism Example
```assembly
mov [ebp - 3], eax
push ecx
mov ecx, ebp
add ecx, 33
push esi
mov esi, ecx
sub esi, 34
mov [esi - 2], eax
pop esi
pop ecx
push ecx
mov ecx, ebp
push eax
mov eax, 33
add ecx, eax
pop eax
```

### Obfuscation
- **Call Obfuscation**: Prevents static analysis by obfuscating function calls.
  - **Normal Call**:
    ```assembly
    L0:  call L5
    L1:  …
    L2:  …
    L3:  …
    L4:  …
    L5: 
    L6:  …
    ```
  - **Obfuscated Call**:
    ```assembly
    L0a: push L1
    L0b: push L5
    L0c: ret
    L1:  …
    L2:  …
    L3:  …
    L4:  …
    L5: 
    L6:  …
    ```

### Anti-Emulation vs. Anti-Debugging
- **Anti-Debugging**:
  - Hides the fact that someone is stepping/monitoring the program.
  - Focuses on differences in the system when a debugger is active.
  - Detects memory structures, time usage, API behavior, and suspicious windows/drivers/services.
- **Anti-Emulation**:
  - Detects the difference between an emulated system and a real system.
  - Accesses complex resources and uses complex calculations.
  - Detects limitations that are not possible or very time-consuming to emulate.
  - Uses exotic APIs to deliver specific error conditions.

### Challenge for Emulators
- **Code Hiding**:
  - Runtime libraries, compressors (e.g., UPX, FSG, PEC), encryptors, protectors (e.g., SVKP, Themida), installers (e.g., Nullsoft, RARSFX, ZIPSFX).
  - Embedded dropped components: Libraries, services, kernel drivers, scripts, executables.
- **Handling Single Components**:
  - Download links for malware components in proprietary formats and protocols.
  - Bad records inside file formats (e.g., XLS, JPG) and exploits to run binary code.

### Anti-Emulator Code
- **Example**:
  ```c
  CreateFileA("C:\\WINDOWS\\SYSTEM32\\drivers\\ntfs.sys");
  GetFileSize(0x0000002A, 0x00000000);
  WriteProcessMemory(0xFFFFFFFF, 0x0043661D, STACK_ADDR, 0x00000004, 0x00000000);
  EnumWindowStationsA();
  EnumServicesStatusA();
  ```

### Anti-Virtual Machines
- **Pseudo Code**:
  ```c
  IF detect_vmware THEN
      do nothing, destroy self, destroy system
  ELSE
      Continue with malware payload
  ```

### Anti-Debuggers
- **Techniques**:
  - Polymorphism, encryption, interrupt disabling, debugger detection, behavior modification, crashing the debugger.

### Forms of Rootkits
- **Kernel-Level**
- **System Access**
- **Application-Level**

### System Service Call Cycle
- **User Application** → **CreateFile API** → **Kernel32.DLL** → **NtCreateFile API** → **NTDLL.DLL** → **EAX = 0x00000020** → **INT 2Eh** → **NTOSKRNL.EXE** → **Switch Back to USER MODE** → **Return NtCreateFile result** → **Return CreateFile result**

### NTDLL Interface
- **Kernel32.DLL** imports from **NTDLL.DLL**.
- **NTDLL.DLL** interfaces with **Int 2Eh** function of Windows NT.
- **Int 2Eh** signals a need to switch from user mode to kernel mode.
- **Int 2Eh** handler looks up a table in **NTOSKRNL** called **KeServiceDescriptorTable**.

### KeServiceDescriptor Table
- **Structure**:
  ```c
  typedef struct ServiceDescriptorTable {
      PVOID ServiceTableBase;
      PVOID ServiceCounterTable;
      unsigned int NumberOfServices;
      PVOID ParamTableBase;
  }
  ```

### Getting Into the Root
- **Application**: Calls **CreateFile() API**.
- **Kernel32.DLL**: Calls **NtCreateFile()**.
- **NTDLL.DLL**: Calls **KeServiceDescriptor Table**.
- **NTOSKRNL.EXE**: Invokes **KiSystemService()**.

### Hooking System Service
- **Steps**:
  - Choose a system service exported by **NTOSKRNL.EXE**.
  - Obtain the address of the function.
  - Verify if the function starts with a **MOV EAX, 0xXXXXXXXX** construct.
  - Retrieve the index value associated with the function.

### API Hooking: IAT Modification
- **Before Patching**:
  - **Headers** → **Code Section** → **CALL [CreateFileA]** → **Import Section** → **CreateFileA: 0x12345678** → **Kernel32.dll**.
- **After Patching**:
  - **Headers** → **Code Section** → **CALL [CreateFileA]** → **Import Section** → **CreateFileA: Addr of Hook** → **Kernel32.dll**.
  - **Hook**: **JMP 0x12345678**.

### API Hooking: Dynamic Code Patching
- **Original Function**:
  ```assembly
  FindNextFileA:
  195D6: 55
  PUSH EBP
  195D7: 8BEC
  MOV EBP, ESP
  195D9: 81EC60020000
  SUB ESP, 260
  Continue_Here:
  194DF: 53
  PUSH EBX
  195E0: 8D85A0FDFFFF
  LEA EAX, [EBP-260]
  195DF: XX
  ```
- **Patched Function**:
  ```assembly
  FindNextFileA:
  195D6: E9XXXXXXXX
  JMP Hook
  195DB: 90
  NOP
  195DC: 90
  NOP
  195DD: 90
  NOP
  195DE: 90
  NOP
  Continue_Here:
  194DF: 53
  PUSH EBX
  195E0: 8D85A0FDFFFF
  LEA EAX, [EBP-260]
  195DF: XX
  Hook: 
  call Saved_Original
  ret
  ```

### DLL Injection
- **Malware Process**: Calls **CreateRemoteThread()**.
- **Victim Process**: Calls **LoadLibrary()**.
- **Malicious DLL**: Loaded into the remote process' address space using **CreateRemoteThread()** and **LoadLibrary()**.

### Direct Memory Writing
- **Attacking Process**:
  - **VirtualAllocEx()**, **VirtualProtectEx()**, **WriteProcessMemory()**, **CreateRemoteThread()**.
- **Victim Process**:
  - **Headers** → **Code Section** → **Heap** → **Install_Hooks()**.

### .NET Framework
- **What is .NET?**:
  - New Microsoft framework for internet development.
  - Protocol stack and computing model for TCP/IP-based, distributed computing.
  - Built for interoperability using open web standards like XML.
  - Increased scalability and reliability.