remains an important security control and is generally recommended for any application. In case you skipped
this section of Chapter 3, certificate pinning is the process of associating a particular host that you connect to
with a known and expected certificate or public key. This protection gives you additional confidence that the
host you are connecting to is who it reports to be and negates the impact of a compromised Certificate
Authority. In short, the process requires you to embed a public key or certificate within your application,
allowing you to compare it against what the server presents during your SSL session. The OWASP wiki provides
an excellent write-up of the advantages of certificate pinning, including examples of how to implement it across
different platforms (https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning). For
completeness, a short example of how you would implement this, borrowed from the aforementioned resource,
is described here.
Within the didReceiveAuthenticationChallenge delegate method for your NSURLConnection, you should include
the following code, which reads the mahh .der certificate from within the application’s bundle directory and
does a binary comparison against the certificate presented by the server:
-(void)connection:(NSURLConnection *)connection
didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)
challenge
{
if ([[[challenge protectionSpace] authenticationMethod] isEqualToString:
NSURLAuthenticationMethodServerTrust])
{
do
{
SecTrustRef serverTrust = [[challenge protectionSpace] \
serverTrust];
if(nil == serverTrust)
break; /* failed */
OSStatus status = SecTrustEvaluate(serverTrust, NULL);
if(!(errSecSuccess == status))
break; /* failed */
SecCertificateRef serverCertificate = \
SecTrustGetCertificateAtIndex(serverTrust, 0);
if(nil == serverCertificate)
break; /* failed */
CFDataRef serverCertificateData = \
SecCertificateCopyData(serverCertificate);
//[(__bridge id)serverCertificateData autorelease];
if(nil == serverCertificateData)
break; /* failed */
const UInt8* const data = \
CFDataGetBytePtr(serverCertificateData);
const CFIndex size = CFDataGetLength(serverCertificateData);
NSData* cert1 = [NSData dataWithBytes:data \
length:(NSUInteger)size];
NSString *file = [[NSBundle mainBundle] pathForResource:@"mahh"\
ofType:@"der"];
NSData* cert2 = [NSData dataWithContentsOfFile:file];
if(nil == cert1 &boxV; nil == cert2)
break; /* failed */
const BOOL equal = [cert1 isEqualToData:cert2];
if(!equal)
break; /* failed */
// The only good exit point
return [[challenge sender] useCredential: [NSURLCredential \
credentialForTrust: serverTrust]
forAuthenticationChallenge: challenge];
} while(0);
// Bad dog
return [[challenge sender] cancelAuthenticationChallenge: \
challenge];
}
}
Avoiding Injection Vulnerabilities
Insecurely developed iOS applications can be plagued with a variety of injection-style vulnerabilities, much the
same way as traditional web applications can. Injection vulnerabilities can occur any time an application accepts
user-controlled input; however, they most commonly manifest when a response is received from a server-side
application that contains tainted data. A simple example of this would be a social networking application that
reads status updates of the user’s friends; in this instance the status updates should be regarded as potentially
tainted data. This section details how to reliably avoid the two most common types of injection vulnerability:
SQL injection and cross-site scripting (XSS).
Preventing SQL Injection
One of the most common injection attacks is SQL injection, and those of you familiar with web application
testing will undoubtedly have knowledge of it. This type of attack can happen any time an application directly
populates tainted data into an SQL query and although the consequences within a mobile application are likely
to be much less serious, you should take appropriate preventative measures.
Much like the recommendations for an SQL injection vulnerability in a web application, you can achieve reliable
avoidance using parameterized SQL queries in which you substitute placeholders for the strings you want to
populate to your query. By far the most popular database in use by iOS applications is SQLite. SQLite provides
sqlite3_prepare, sqlite3_bind_text, and similar functions to parameterize your queries and bind the relevant
values to your parameters. Consider the following example, which constructs a query, parameterizes it, and then
binds the user controller values to the query:
NSString* safeInsert = @"INSERT INTO messages(uid, message, username)
VALUES(?, ?, ?)";
if(sqlite3_prepare(database, [safeInsert UTF8String], -1, &statement, NULL)
!= SQLITE_OK)
{
// Unable to prepare statement
}
if(sqlite3_bind_text(statement, 2, [status.message UTF8String], -1,
SQLITE_TRANSIENT) != SQLITE_OK)
{
// Unable to bind variabless
}
This example shows how to bind the status.message variable to a text column in the query. To add the
remaining variables, you would use similar code and the function appropriate to the type of column you want to
bind to.
Avoiding Cross-Site Scripting
Cross-site scripting (XSS) can occur any time that tainted data is populated into a UIWebView, and the
consequences can vary depending on how the web view is loaded, the permissions your application has, and
whether your application exposes additional functionality using a JavaScript to Objective-C bridge.
A number of approaches can help you not only thwart cross-site scripting attacks, but also to minimize the
impact they can have if they do occur:
Be aware of the origin you load your UIWebView from and always avoid loading it with the file:// protocol
handler.
Be wary of populating tainted data into JavaScript strings and executing them in the web view. This problem
is particularly common when using the UIWebView method stringByEvaluatingJavaScriptFromString.
Be wary of dynamically constructing HTML for a UIWebView when using tainted data. Ensure appropriate
sanitization and encoding takes place before loading your HTML into the web view. This problem is
particularly common when using the UIWebView method loadHTMLString.
When working with HTML and XML you may need to dynamically populate potentially tainted data in to a web
view. In these scenarios you can achieve some confidence that cross-site scripting has been avoided by encoding
any data that you believe could be tainted. The following rules can be used to determine what and how specific
meta-characters can be encoded:
Less than ()—Replace with &gt everywhere
Ampersand (&)—Replace with &amp everywhere
Double quote (“)—Replace with &quot inside attribute values
Single quote (‘)—Replace with &apos inside attribute values
Securing Your Application with Binary Protections
A relatively new consideration, binary protections were introduced in to the OWASP mobile top ten in January
2014 and although their merit has come under some controversy, they can undoubtedly provide a means to slow
down your adversary. The term is used to generically describe the security controls that can be implemented
within a mobile application. These protections attempt to achieve the following goals:
Prevent a mobile application operating in an untrusted environment
Increase the complexity of exploitation of memory corruption
Thwart or increase the complexity of reverse engineering
Thwart or increase the complexity of modification or tampering attacks
Detect attacks from on-device malware
According to a research study by Hewlett-Packard in 2013 (http://www8.hp.com/us/en/hp-news/press-
release.html?id=1528865#.U_tU4YC1bFO), 86% of the mobile applications that they reviewed lacked adequate
binary hardening. Applications failing to implement any form of binary protection are typically an easier target
for cybercriminals and can be more at risk of one or more of the following categories of attack:
Theft of intellectual property from reverse engineering
Circumvention of security controls such as local authentication, encryption, licensing, DRM, jailbreak
detection, and so on
Loss of revenue from piracy
Brand and/or reputation damage from application imitation and/or code modification attacks
If you have conducted mobile application security assessments on a regular basis, you have likely encountered
some binary protections. Improving your understanding of the defenses that you’re trying to break or attack will
always help you become a better attacker. In the subsequent sections we detail some of the protections that we
have encountered, assisted in developing, and in some cases had to circumvent. You should be aware that on
their own all of these protections are trivial to bypass, even by attackers with a basic knowledge of reverse
engineering. However, when combined and correctly implemented they can significantly increase the
complexity of reverse engineering and attacks against your application.
Before delving in to this topic it is also important to stress that binary protections do not solve any underlying
issues that an application might have and by no means should be used to plaster over any cracks that exist.
Binary protections simply exist as a defense-in-depth control to slow down an attacker and perhaps shift them
on to a softer target.
Detecting Jailbreaks
Perhaps the most commonly implemented of the different binary protections, jailbreak detection attempts to
determine whether the application is running on a jailbroken or otherwise-compromised device. If the detection
mechanisms are triggered, the application will typically implement some form of reactive measures; common
reactions include:
Warning users and asking them to accept liability
Preventing the application from running by gracefully exiting or crashing
Wiping any sensitive stored data on the device
Reporting home to a management server to achieve actions such as flagging the user as a fraud risk
Gracefully exiting the application or triggering a crash
You can use several techniques to perform jailbreak detection; however, be aware that these are often trivial to
bypass unless other protections are also in place. At a high-level some of the common methods of detection that
you might encounter include:
Jailbreak artifacts
Non-standard open ports
Weakening of the sandbox
Evidence of system modifications
The following sections cover these detection methods and provide brief sample implementations and proof of
concepts where applicable.
Jailbreak Artifacts
When a device is jailbroken, this process will almost always leave an imprint on the filesystem: typically,
artifacts that will be used by the user post-jailbreak or residual content from the jailbreak process itself.
Attempting to find this content can often be used as a reliable means of determining the status of a device.
To achieve the best and most reliable results you use a mixture of file-handling routines, both from the SDK
APIs such as NSFileManager fileExistsAtPath and standard POSIX-like functions such as stat(). Using a
mixture of functions to determine the presence of a file or directory means that you may still achieve some
success if your attacker is instrumenting only a subset of your functions. Where possible you should inline
these functions, which causes the compiler to embed the full body of the function rather than a function call;
inlining means that your attacker must identify and patch each instance of your jailbreak detection.
Here is a simple example of how to implement this:
inline int checkPath(char * path) __attribute__((always_inline));
int checkPath(char * path)
{
struct stat buf;
int exist = stat ( (path), &buf );
if ( exist == 0 )
{
return 1;
}
return 0;
};
You could leverage this example by passing it paths associated with a jailbreak; assuming no tampering has
occurred, the function will return 1 if the file exists. Some common paths that you can use to identify the
presence of a jailbreak/root are
/bin/bash
/usr/sbin/sshd
/Applications/Cydia.app
/private/var/lib/apt
/pangueaxe
/System/Library/LaunchDaemons/io.pangu.axe.untether.plist
/Library/MobileSubstrate/MobileSubstrate.dylib
/usr/libexec/sftp-server
/private/var/stash
To avoid easy detection by reverse engineering, use encryption or obfuscation to disguise the paths that you
validate.
Nondefault Open Ports
Many users of jailbroken devices install remote access software to allow them to interactively access their
device; this often causes a nondefault port to be opened on the device. The most popular software to achieve this
is OpenSSH, which in its default configuration causes TCP port 22 to be opened on the device.
You can generally safely assume that if SSH or other non-default ports are open on a device that it may have
been jailbroken. Therefore, an additional detection technique that you can employ is to scan the device’s
interfaces for nondefault ports, performing banner grabbing for additional confidence where necessary. A simple
example of how you might check the loopback interface to determine whether a given port is open is shown
next; again, in a production application, you may want to encrypt or obfuscate strings to mitigate against easy
identification through reverse engineering:
inline int isPortOpen(short port) __attribute__((always_inline));
int isPortOpen(short port)
{
struct sockaddr_in addr;
int sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
memset(&addr, 0, sizeof(addr));
addr.sin_family = AF_INET;
addr.sin_port = htons(port);
if (inet_pton(AF_INET, "127.0.0.1", &addr.sin_addr))
{
int result = connect(sock, (struct sockaddr *)&addr, \
sizeof(addr));
if(result==0) {
return 1;
}
close(sock);
}
return 0;
}
Weakening of the Sandbox
It is well documented that many mobile devices sandbox applications to prevent interaction with other
applications on the device and the wider OS. On iOS devices you may also find that jailbreaking your device
weakens the sandbox in some way. As an application developer, testing the constraints of the sandbox may give
you some confidence as to whether the device has been jailbroken.
An example of sandbox behavior that differs between jailbroken and non-jailbroken devices is how the fork()
function operates; on a non-jailbroken device it should always fail because third-party applications are not
allowed to spawn a new process; however, on some jailbroken devices the fork()will succeed. You can use this
behavior to determine whether the sandbox has weakened and the device has been jailbroken. The following is a
simple example of how you can implement this:
inline int checkSandbox() __attribute__((always_inline));
int checkSandbox() {
int result = fork();
if (result >= 0) return 1;
return 0;
}
In some cases, applications installed through third-party application stores may also run with elevated (for
example, root) as opposed to the standard mobile user privileges. As such, the sandbox restrictions may not be
in force and you can use an attempt to write to a file outside of the sandbox as a test case for determining the
integrity of the device. Here is a simple example of how to implement this:
inline int checkWrites() __attribute__((always_inline));
int checkWrites()
{
FILE *fp;
fp = fopen("/private/shouldnotopen.txt", "w");
if(!fp) return 1;
else return 0;
}
Evidence of System Modifications
On iOS devices the disk is partitioned in a way such that the read-only system partition is often much smaller
than the data partition. Stock system applications reside on the system partition under the /Applications folder
by default. However, as part of the jailbreaking process, many jailbreaks relocate this folder so that additional
applications can be installed in it without consuming the limited disk space. This is typically achieved by
creating a symbolic link to replace the /Applications directory, and linking to a newly created directory within
the data partition. Modifying the filesystem in this manner provides an opportunity for you to look for further
evidence of a jailbreak; if /Applications is a symbolic link as opposed to a directory you can be confident that
the device is jailbroken. A simple example of how to implement this check is shown next; you should call this
function with the path you want to check (such as /Applications) as the argument:
inline int checkSymLinks (char *path) __attribute__((always_inline));