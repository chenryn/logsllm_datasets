sub
esp, 0x100
---
## Page 370
356
5 Reverse Engineering
According to the linear sweep disassembling algorithm, when the disassembler
finishes parsing the jmp addr1 instruction, it will start parsing from the next OxE8,
which is the start byte of a call instruction, causing the disassembler to think that the
5 bytes starting from OxE8 make up a call instruction, which will cause all subse-
quent instructions to be parsed incorrectly.
In the case of recursive descending disassemblers, such as IDA Pro, the inserted
0xE8 byte is skipped directly because the recursive descending disassembler algo-
rithm turns to the skipped destination address to recursively continue parsing
instructions in the event of an unconditional jump. However, the recursive
descending disassembler, although partially simulating the control flow process of
program execution, does not really run the program. We can take advantage of this
by modifying the above code as follows.
push  ebp
jnz addr1
jzaddr1
addr1 :
db
0xE8
sub
moV
esp, 0x100
ebp, esp
That is, an unconditional jump statement is replaced by two conditional jump
statements with opposite conditions. Since the recursive descent disassembly algo-
rithm does not have access to the context in which the program is running, when it
encounters a conditional jump statement, it recursively disassembles both the taken
branch and the non-taken branch. Obviously, after disassembling the jnz statement,
the beanch it does not jump to is the next adres, so that the “instructiona starting
with 0xE8 will be parsed.
In practice, in order to achieve better results, the order of these jump target codes
is often disordered, i.e., “out of order", thus achieving an effect similar to control
flow obfuscation. For example.
jzaddr2
pushebp
Jnz
addr2
: εxppe
db
0xE8
sub
esp,0x100
addr2 :
mov
ebp, esp
jmp
addr3
Another common fom of static obfuscation is instruction substitution, also
 sos jo squ e e en qsse u so, s uou
manage to use other instructions to perform the same or similar functions. For
---
## Page 371
5.5 Binary Code Protection and Obfuscation
357
xt:68402665
Jz
short near ptr
oc482659+
xt:00402667
xt:88482669
Jnz
short near ptr
loc_40266
xt:e8482669
oc_482669:
;CODE XREF:.text:e04026651j
xt:00402669
xt:88482669
d
36h
;.text:004e26671j
xt:0040266C
xor
cnp
eax, eax
duord ptr [ebp-ech], 0
Fig, 5.75 Tuo conditional jump instructions with the opposite conditions
example, the function call instruction call can be replaced by another instruction,
such as the following instruction:
ca11
addr
This can be replaced with the following code segment.
push
return_addr
push
addr
ret
And the function return instruction ret can also be replaced by the following code
segment.
push  ecx
moV
esp,8
ecx, [eep+4]
add
jmp
ecx
Note that this substitution destroys the ecx register, so we need to make sure that
ecx is not being used by the program at the moment. In practice, we are free to adjust
it according to the program’s context. In CTF, challenges often choose to replace
instructions that involve function calls and returns, such as the above call, ret, etc.
This can cause errors in function address range and call relationships analysis of IDA
Pro and other tools, which can interfere with static analysis.
Two examples of obfuscation techniques that have been seen in CTFs are given
below. Figure 5.75 uses two conditional jump instructions with the opposite condi-
tions and inserts a dirty byte after them, thus achieving the goal of interfering with
IDA static analysis. The target address of the jump in the figure is 402669+1, but
IDA parsed the instruction starting from 402669. In this case, simply set the content
at 402669 to data in IDA, and then set the contents at 402669+1 to code to properly
do the parsing.
Figure 5.76 uses instruction substitution, replacing a direct downward jump with
  o s oo usa d os r sd uo eo 
pushes the EIP of the next instruction into the stack, an “add esp, 4" instruction is
used to restore the stack pointer. In this case, we need to first change the instruction 
---
## Page 372
358
5  Reverse Engineering
ct:00482738
1oc_482742
xt:08482738
ct:08482738
t:00482740
ct:00482742
cl, d1
xt:08482742 loc 482742:
ct:08482742
add
;C0DE XREF:sub_4e2722+19fp
esp,4
Fig, 5.76 The instruction substitution
nenset(lv5,0,0x60u);
v7=0:
scanf("100s",&uh);
if（v9--28）
1F (v6 *125 )
for（i-0；i 1:
disasm += (* labe1_vd:\t*  cur_ip) + *reg [vd] =nen [reg [$d] ] \n* $ (byte
if byte [cur_ip, 1) == 2 :
(cur_ip,2), v11)
disasm += (*1abe1_vd: \t $ eu_ip) + *men [reg [vd] ] = reg [d] = \n 
elif byte [cur_ip, 1) == 0x20:
(byte (euz_ip, 2) , v11)
disasm += (*label_vd:\t* $ eur_ip) + *reg [vd] = reg [vd] ;^n $ (byte
elif byte (cuz_ip, 1) == 0 :
(cwr_ip, 2), v11)
if byte (cur_ip, 0) == 6 : # case 0x4
continue
v10 = byte (cur_ip, 2)
v14 = *reg [&d] *  byte (cur_ip, 3)
f v10 == 1:
v11 = dword (eur_ip + 4)
vip += 8
elif v10 == 0:
5 =+ dA
v10 = byte (cur_ip, 1)
v11 = 'reg [&d] , $ byte (cuz_ip, 4)
if v10 == 0:
{△) xS + , =+, =+, =+ [A
elif v10 == 1:
{TA] xS + , *- , =+ [A
elif v10 == 2:
elif v10 == 3:
{TtA] xS + , "+ , =+ [A 
elif v10 =-* 4:
{TA] xs + , =/ , =+ [A
v14 += + $= + + str (v11)
elif v10 == 5:
{ttA] xs + , =| , =+ [A
elif v10 == 6:
v14 += + &= + + str (v11)
elif v10 == 7:
{TTA] xs ++ *√ + =+ [A
elif v10 == 8 :
elif v10 == 9:
v14 += 1 >= 1 + str [v11)
disasn += [*1abe1_&d:\t+ $ cur_ip) + v14 + *;\n*
if byte [cur_ip, 2) == 0xf6 and byte (eur_ip, 3) == 0xf8: # case Dx8
continue
if byte (cur_ip, 4) == 1:
v11 = dword (cur_ip+6)
disasn += (*label_sd:\t+  cur_ip) + *g_cmp_result = s;\n'  v6
v6 = reg[&d] - $d'  (byte (cur_ip, 5) , v11)
v1p += 10
---
## Page 376
362
5 Reverse Engineering
elif byte (cur_ip, 4) == 0 :
v11 = byte (cuz_ip, 6)
disasm += (*1abel_$d:\t'  eux_ip) + *g_cmp_result = vs;\n' $ v6
v6 = reg[&d] - reg [&d] '  (byte (cuz_ip, 5) , v11)
vip += 7
if byte (cur_ip, 0) == 0 and byte (cuz_ip, 1) == 0 : # case 0xb
continue
[+dtxn)pxonp - 6.xe
f byte (cur_ip, 2) == 0 :
 =+ d△
disasm += (*1abe1_vd:\t+ $ cur_ip) + 'goto label_sd,;\n'  ( (cur_ip +
arg) 6 oxfffffteeef)
elif byte (cur_ip, 2) == 1 :
disasm += (*label_vd:\t' $ cur_ip) +\cz\
*if (g_cmp_zesult==0) goto Label_vd;\n*  ((cur_ip + axg) &
oxffffffff)
elif byte (eur_ip, 2) == 2:
disasm += ('labe1_vd:\t* $ cur_ip) + \cr\
f (g_cmp_result 1=0) goto labe1_sd; \,n*  ((cur_ip + arg) &
oxffffffff)
elif byte (cuz_ip, 2) == 3 :
disasm += (*labe1_vd:\t* $ cur_ip) + \cz\
if (g_cmp_zesult >0) goto label_sd; \n*  ((cur_ip + arg) &
oxffffffff)
elif byte (cuz_ip, 2) == 4 :
disasm += (*label_vd:\t* $ cur_ip) + \cz\
*if (g_cmp_result>=0) goto label_sd; \,n*  ((cur_ip + arg) &
oxffffffff)
elif byte (cur_ip, 2) == 5 : 
disasm += (*labe1_sd:\t+ $ cur_ip) + \cz\
*if (g_cmp_result<0) goto Label_vd;\n* v ((cux_ip + arg) &
oxffffffff)
elif byte (cur_ip, 2) == 6 :
disasm += (*labe1_vd:\t* $ cur_ip) + \cz\
f (g_cmp_result<=0) goto labe1_sd; \,n*  ((cur_ip + arg) &
oxffffffff)
if byte (cur_ip, 0) == 195 :
continue
disasn += [*1abe1_sd:\t'  cur_ip) + *return;\n
break
vip += 1
if byte [cur_ip, 0) == 144 :
disasm += [*1abe1_sd:\t' $ cur_ip) + *nop;\n
vip += 1