1. If e(g, C5) (cid:7)= e(C1, H2(C1, C2, C3, C4)), then out-
put ⊥;
2. Otherwise let R = C2/e(gr, H0(pki))ski , and have
(cid:4)
m = C3
F1(R);
• Given a ﬁrst level ciphertext C(cid:3) = (C(cid:3)
1, C(cid:3)
2, C(cid:3)
3), it
decrypts with skj = aj:
1. Compute R(cid:3) = C(cid:3)
2/C(cid:3)
1
skj , let Γ = C(cid:3)
3
and parse Γ = T1||T2||T3||T4||rk2||rk3||rk4.
(cid:4)
F2(R(cid:3)),
• If i ∈ Ue, let rk1 = H0(pki)−ski pkH4(s·ski)
j
, rk2 = gH4(s·ski)gt
1,
rk3 = gt, rk4 = gw, rk5 = e(pkj , pkj )tw and rk6 =
e(pkj, g)tw. C returns rki→j to A.
2. If e(rk3, rk4)skj H3(Γ,R(cid:3)) (cid:7)= C(cid:3)
1, then return ⊥. This
is to verify rk5 and rk6 without being manipu-
lated.
3. Let R = T2( e(rk3,T4)
e(rk2,T1) )skj so that m = T3
F1(R).
(cid:4)
4. Let r = H1(m, R) and verify T1
m; ⊥ otherwise.
?
= gr. If so, return
Correctness of the PRE scheme can be veriﬁed. In the con-
struction, we can see that we use FO transformation twice
to assure CCA security for the ﬁrst and second level cipher-
texts. In addition, The PRE scheme is collusion-safe [6] even
that user j and the cloud collude together. Intuitively, user
j cannot derive pkH4(s·ski)
from the re-encryption key rki→j ,
so that he is unable to infer H0(pki)−ski and decrypt user
i’s second level ciphertexts.
j
• If i ∈ Uh and j ∈ Uh, let rk1 = pkγ
i , rk2 = (gy)aiβi/aj gaiγ/aj gt
1,
rk3 = gt, rk4 = gw, rk5 = e(pkj, pkj )tw and rk6 =
R← Zp, then C returns rki→j to A.
e(pkj, g)tw, where γ
Note that rki→j is a valid re-encryption key. Let us
implicitly deﬁne H4(s · ski) = (aiβiy + γai)/aj (note
s, ski are unknown to A) so that
rk1 = pkγ
i = g−yβixai+yβixai+γaix
(yβiai+γai)
ajx 1
aj
= (gy)−βiaixg
= H0(pki)−aixpkH4(s·ski)
j
• Otherwise returns ⊥.
OReEnc(pki, pkj , C): Given a second level ciphertext C =
(C1, C2, C3, C4, C5), C does:
253• If e(g, C5) (cid:7)= e(C1, H3(C1, C2, C3, C4)) or i ∈ Uh and
j ∈ Ue, output ⊥.
• Query OReKeyGen(pki, pkj) to obtain rki→j = (rk1, rk2,
rk3, rk4, rk5, rk6).
Theorem 2 states that our scheme achieves our anonymity
notion for re-encryption keys. Correspondingly, we can show
that our scheme also achieves the anonymity for second level
ciphertexts and ﬁrst level ciphertexts, which are skipped
here.
• Execute ReEnc by taking as input C and rki→j, and
output C(cid:3) = (C(cid:3)
1, C(cid:3)
2, C(cid:3)
3).
ODec(pki, C): To decrypt C for user i, C does:
• If i ∈ Ue, run algorithm Dec by taking as input the
secret key bi and the ciphertext C, and return the out-
put.
• If C is a second level ciphertext, i.e., C = (C1, C2, C3,
?
C4, C5), verify e(g, C5)
= e(C1, H3(C1, C2, C3, C4)). If
not hold, then output ⊥; otherwise search OH1 for the
tuple (m, R, r) where r = H1(m, R) and the oracle OF1
, such that C1 = gr and C3 = m
F1(R). If such tuple
exists, then return m; otherwise return ⊥.
(cid:4)
• If C is a ﬁrst level ciphertext, i.e., C(cid:3) = (C(cid:3)
1, C(cid:3)
2, C(cid:3)
3),
(cid:4)
search OH3 for the tuple (Γ, R(cid:3), r(cid:3)), where r(cid:3) = H3(Γ, R(cid:3))
and OF2 , such that C(cid:3)
F2(R(cid:3)). Then, parse Γ
as T1, T2, T3, T4, rk2, rk3, rk4. Search OH1 for the tuple
(m, R, r), where r = H1(m, R) and the oracle OF1 ,
such that T1 = gr and T3 = m
F1(R). If such tuple
exists, return m, else return ⊥.
3 = Γ
(cid:4)
Challenge: Once A decides that Phase 1 is ﬁnished, it out-
puts a public key pk∗ and two messages m0, m1 of the same
length, and sends them to C. C returns (C∗
4, C∗
2, C∗
5)
as follows: select R∗ R← GT and let C∗
2 = R∗Qa∗β ∗
,
C∗
3 = mλ
, where
θ∗ R← Zq.
1, C∗
1 = gz, C∗
1 = (gz)c and C∗
F1(R∗), C∗
5 = (gz)θ∗
4 = gz
3, C∗
(cid:4)
)z = R∗e(pk∗, H0(pk∗))z,
If Q = e(g, g)xyz, (C∗
1, C∗
2, C∗
3, C∗
4, C∗
5) is a valid ciphertext
2, C∗
3,
1, C∗
(cid:3)
, (gy)β ∗
F1(R∗),
, and have
= R∗e((gx)a∗
for mλ under pk∗. To see it, we implicitly let H3(C∗
C∗
4) = gθ∗
C∗
1 = gz,
C∗
2 = R∗Qa∗·β ∗
C∗
3 = mλ
C∗
4 = (gz)c = gz
1 ,
C∗
5 = (gz)θ∗
where H0(pk∗) = (gy)β ∗
Phase 2: C and A proceed the same as in Phase 1 while
complying with constraints deﬁned in the CCA-security game.
Guess: Finally, A returns a guess λ(cid:3) ∈ {0, 1}. If λ(cid:3) = λ, C
outputs Q = e(g, g)xyz; otherwise, C returns Q (cid:7)= e(g, g)xyz.
1, C∗
, pk∗ = (gx)a∗
)z = H3(C∗
= (gθ∗
3, C∗
2, C∗
4)z,
.
This completes the simulation. In Phase 2, if Q = e(g, g)xyz,
3, C∗
2, C∗
4, C∗
1, C∗
then the ciphertext (C∗
5) is a valid ciphertext
of mλ, so the probability of A outputting λ(cid:3) = λ is 1
2 + μ;
if Q is an element randomly that is selected from GT and
independent from z, then the probability of A outputting
λ(cid:3) = λ is 1
2 , because the ciphertext has no information
about mλ. Therefore, the probability of C correctly guess-
?
= e(g, g)xyz with the instance of (g, gx, gy, gz, Q) is
ing Q
2 ( 1
1
2 + μ + 1
2 + μ
2 .
2 ) = 1
Theorem 2. Assume that SDBDH assumption holds, our
scheme achieves the anonymity for re-encryption keys in
Deﬁnition 3 in the random oracle model.
The challenger C maintains random oracles as follows:
• Oracle OH0 :
if H0(pk) has been queried, it retrieves
R← Zq, let H0(pk) =
H0(pk) from OH0 ; otherwise select β
gβ, and add (pk, β) into OH0 . It returns gβ.
• Oracles OH1 , OH2 , OH3 , OH4 , OF1 and OF2 are mod-
eled as random oracles and we skip their details here.
The proof strategy is that C randomly selects an uncor-
rupted user J from the set of uncorrupted users and lets
J be the targeted user in the Challenge phase. That is, if
j∗ = J in the Challenge phase, the challenger will proceed
the anonymous game; otherwise abort.
Proof of Theorem 2 Suppose A breaks the anonymous
game with the probability 1
2 + μ, then we can construct
?
= e(g, g)x2y for the instance
the challenger C solving Q
(g, e, gx, gy, Q) with probability 1
2n at least, where n is
the number of users in the PRE scheme, i.e., |Uh| + |Ue| = n.
Recall that C maintains a key list storing re-encryption
(i → j, {(rki→j, query)}). Assume C se-
keys for (i, j):
lects user J before proceeding the game. Given an instance
R← Zq, lets g1 = gc, and proceeds
(g, e, gx, gy, Q), C selects c
?
= e(g, g)x2y as follows.
the anonymous game to determine Q
2 + μ
Phase 1: A queries oracles below in polynomially many
time:
OKeyGen(i): C responds as follows:
• i ∈ Uh: If user i has been queried before, C retrieves
R← Zq,
pki from Oh; otherwise (i) i = J, C selects ai
lets pki = (gx)ai , and adds (i, ai, pki) into Oh, (ii)
R← Zq, lets pki = gai , and adds
i (cid:7)= J, C selects ai
(i, ai, pki) into Oh. C returns pki to A. Note that we
explicitly deﬁne ski = x · ai when i = J.
• i ∈ Ue: If the query has been queried before, then C
R← Zq, lets
returns (pki, ski) from Oe; else C selects ai
pki = gai, ski = ai, and adds (i, pki, ski) into Oe. It
returns (pki, ski) to A.
OReKeyGen(pki, pkj): Given pki, pkj, C obtains (i → j, {(rki→j,
query)}) and
• If {(rki→j , query)} is null or all rki→j have been queried
before (i.e., all indicators query = 1), then
1. If i = J, it generates rkJ→j by selecting s, w, v
j , rk2 = gγgt
Zq and letting: rk1 = (gx)−aiβi pkγ
gt, rk4 = gw, rk5 = e(pkj , pkj )tw, rk6 = e(pkj, g)tw,
R← Zq. We implicitly deﬁne H4(s · ski) =
where γ
γ, and we can see rki→j is a valid re-encryption
key.
R←
1, rk3 =
2542. Otherwise let rki→j = (rk1, rk2, rk3, rk4, rk5, rk6)
as
(H0(pki)−ski · pkH4(s·ski)
j
, gH4(s·ski)gt
1, gt, gw,
e(pkj , pkj )tw, e(pkj , g)tw)
It adds (rki→j, query = 1) to {(rki→j, query)} and re-
turns rki→j;
• Else, it chooses rki→j randomly from {(rki→j, query)}
where query = 0, sets query = 1 correspondingly, and
returns rki→j .
OReEnc(pki, pkj, C): Given a second level ciphertext C =
(C1, C2, C3, C4, C5), C proceeds as follows: