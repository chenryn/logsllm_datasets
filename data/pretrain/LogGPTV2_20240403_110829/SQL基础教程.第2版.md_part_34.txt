对标准SQL进行功能追加和语法修正。本章将要介绍的是最近才添加的功能。
掌握了这些方便的新功能，使用SQL能够完成的工作范围也会不断扩展。
8-1 窗口函数
■什么是窗口函数
■窗口函数的语法
■语法的基本使用方法——使用RANK函数
■无需指定PARTITION BY
■专用窗口函数的种类
■窗口函数的适用范围
■作为窗口函数使用的聚合函数
■计算移动平均
■两个ORDER BY
8-2 GROUPING运算符
■同时计算出合计值
■ROLLUP——同时得出合计和小计
■GROUPING函数——让NULL更加容易分辨
■CUBE——用数据来搭积木
■GROUPING SETS——取得期望的积木
8-1 窗口函数 257 ●
第8章 SQL高级处理
8-1
窗口函数
● 窗口函数可以进行排序、生成序列号等一般的聚合函数无法实现的高级
学习重点
操作。
● 理解PARTITION BY和ORDER BY这两个关键字的含义十分重要。
什么是窗口函数
KEYWORD 窗口函数也称为OLAP函数A。为了让大家快速形成直观印象，才起
●窗口函数
了这样一个容易理解的名称（“窗口”的含义我们将在随后进行说明）。
●OLAP函数
OLAP是OnLine Analytical Processing的简称，意思是对数据库数据
注A
进行实时分析处理。例如，市场分析、创建财务报表、创建计划等日常性
在Oracle和SQL Server中称为分
析函数。
商务工作。
KEYWORD
窗口函数就是为了实现OLAP而添加的标准SQL功能B。
●OLAP
注B
目前MySQL还不支持窗口函数。
专 栏
详细信息请参考专栏“窗口函数
的支持情况”。
窗口函数的支持情况
很多数据库相关工作者过去都会有这样的想法：“好不容易将业务数据插入到
了数据库中，如果能够使用SQL对其进行实时分析的话，一定会很方便吧。”但是
关系数据库提供支持OLAP用途的功能仅仅只有10年左右的时间。
其中的理由有很多，这里我们就不一一介绍了。大家需要注意的是，还有一
部分DBMS并不支持这样的新功能。
本节将要介绍的窗口函数也是其中之一，截至2016年5月，Oracle、SQL Server、
注C DB2、PostgreSQL的最新版本都已经支持了该功能，但是MySQL的最新版本
5.7还是不支持该功能。
随着时间推移，标准SQL终将能
够在所有的DBMS中进行使用。 通过前面的学习，我们已经知道各个DBMS都有自己支持的特定语法和不支
C
持的语法。标准SQL添加新功能的时候也会遇到同样的问题 。
● 258 第8章 SQL高级处理
窗口函数的语法
接下来，就让我们通过示例来学习窗口函数吧。窗口函数的语法有些
复杂。
语法8-1 窗口函数
 OVER ([PARTITION BY ]
ORDER BY )
※[]中的内容可以省略。
其中重要的关键字是PARTITION BY和ORDER BY，理解这两个
关键字的作用是帮助我们理解窗口函数的关键。
■能够作为窗口函数使用的函数
在学习PARTITION BY和ORDER BY之前，我们先来列举一下能
够作为窗口函数使用的函数。窗口函数大体可以分为以下两种。
① 能够作为窗口函数的聚合函数（SUM、AVG、COUNT、MAX、MIN）
KEYWORD ② RANK、DENSE_RANK、ROW_NUMBER等专用窗口函数
●专用窗口函数
②中的函数是标准SQL定义的OLAP专用函数，本书将其统称为“专
用窗口函数”。从这些函数的名称可以很容易看出其OLAP的用途。
其中①的部分是我们在第3章中学过的聚合函数。将聚合函数书写
在“语法8-1”的“”中，就能够当作窗口函数来使用了。
总之，聚合函数根据使用语法的不同，可以在聚合函数和窗口函数之间
进行转换。
语法的基本使用方法——使用 函数
RANK
KEYWORD 首先让我们通过专用窗口函数RANK来理解一下窗口函数的语法吧。
●RANK函数
正如其名称所示，RANK是用来计算记录排序的函数。
例如，对于之前使用过的Product表中的8件商品，让我们根据不
同的商品种类（product_type），按照销售单价（sale_price）从
低到高的顺序排序，结果如下所示。
8-1 窗口函数 259 ●
执行结果
p roduct_name | product_type | sale_price | ranking
------------+--------------+-------------+--------
叉子 | 厨房用具 | 500 | 1
擦菜板 | 厨房用具 | 880 | 2
菜刀 | 厨房用具 | 3000 | 3
高压锅 | 厨房用具 | 6800 | 4
T恤衫 | 衣服 | 1000 | 1
运动T恤 | 衣服 | 4000 | 2
圆珠笔 | 办公用品 | 100 | 1
打孔器 | 办公用品 | 500 | 2
以厨房用具为例，销售单价最便宜的“叉子”排在第1位，最贵的“高
压锅”排在第4位，确实按照我们的要求进行了排序。
能够得到上述结果的SELECT语句请参考代码清单8-1。
代码清单8-1 根据不同的商品种类，按照销售单价从低到高的顺序创建排序表
Oracle SQL Server DB2 PostgreSQL
SELECT product_name, product_type, sale_price,
RANK () OVER (PARTITION BY product_type
ORDER BY sale_price) AS ranking
FROM Product;
KEYWORD PARTITION BY能够设定排序的对象范围。本例中，为了按照商品
●PARTITION BY子句
种类进行排序，我们指定了product_type。
●ORDER BY子句
ORDER BY能够指定按照哪一列、何种顺序进行排序。为了按照销售
单价的升序进行排列，我们指定了sale_price。此外，窗口函数中的
ORDER BY与SELECT语句末尾的ORDER BY一样，可以通过关键字
ASC/DESC来指定升序和降序。省略该关键字时会默认按照ASC，也就是
注A 升序进行排序。本例中就省略了上述关键字A。
其所要遵循的规则与SELECT
通过图8-1，我们就很容易理解PARTITION BY和ORDER BY的作
语句末尾的ORDER BY子句
完全相同。
用了。如图所示，PARTITION BY在横向上对表进行分组，而ORDER BY
决定了纵向排序的规则。
● 260 第8章 SQL高级处理
图8-1 PARTITION BY和ORDER BY的作用
通过PARTTION BY分组后的记录的集合可以称为窗口 ORDER BY的顺序（销
售单价由低到高的顺序）
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0006 叉子 厨房用具 500 2009-09-20
0007 擦菜板 厨房用具 880 790 2008-04-28
0004 菜刀 厨房用具 3000 2800 2009-09-20
0005 高压锅 厨房用具 6800 5000 2009-01-15
0001 T恤衫 衣服 1000 500 2009-09-20
0003 运动T恤 衣服 4000 2800
0008 圆珠笔 办公用品 100 2009-11-11
0002 打孔器 办公用品 500 320 2009-09-11
PARTITION BY的分组
（根据商品种类）
窗口函数兼具之前我们学过的GROUP BY子句的分组功能以及
ORDER BY子句的排序功能。但是，PARTITION BY子句并不具备
GROUP BY子句的汇总功能。因此，使用RANK函数并不会减少原表中
记录的行数，结果中仍然包含8行数据。
法则8-1
窗口函数兼具分组和排序两种功能。
KEYWORD 通过PARTITION BY分组后的记录集合称为窗口。此处的窗口并
●窗口
非“窗户”的意思，而是代表范围。这也是“窗口函数”名称的由来。A
注A
法则8-2
从词语意思的角度考虑，可能“组”
比“窗口”更合适一些，但是在
通过PARTITION BY分组后的记录集合称为“窗口”。
SQL中，“组”更多的是用来特指
使用GROUP BY分割后的记录
集合，因此，为了避免混淆，使用
PARTITION BY时称为窗口。 此外，各个窗口在定义上绝对不会包含共通的部分。就像刀切蛋糕一
样，干净利落。这与通过GROUP BY子句分割后的集合具有相同的特征。
8-1 窗口函数 261 ●
无需指定
PARTITION BY
使用窗口函数时起到关键作用的是PARTITION BY和GROUP BY。
其中，PARTITION BY并不是必需的，即使不指定也可以正常使用窗
口函数。
那么就让我们来确认一下不指定PARTITION BY会得到什么样的
结果吧。这和使用没有GROUP BY的聚合函数时的效果一样，也就是将
整个表作为一个大的窗口来使用。
事实胜于雄辩，下面就让我们删除代码清单8-1中SELECT语句的
PARTITION BY试试看吧（代码清单8-2）。
代码清单8-2 不指定PARTITION BY
Oracle SQL Server DB2 PostgreSQL
SELECT product_name, product_type, sale_price,
RANK () OVER (ORDER BY sale_price) AS ranking
FROM Product;
上述SELECT语句的结果如下所示。
执行结果
product_name | product_type | sale_price | ranking
-----------+--------------+-------------+--------
圆珠笔 | 办公用品 | 100 | 1
叉子 | 厨房用具 | 500 | 2
打孔器 | 办公用品 | 500 | 2
擦菜板 | 厨房用具 | 880 | 4
T恤衫 | 衣服 | 1000 | 5
菜刀 | 厨房用具 | 3000 | 6
运动T恤 | 衣服 | 4000 | 7
高压锅 | 厨房用具 | 6800 | 8
之前我们得到的是按照商品种类分组后的排序，而这次变成了全部商
品的排序。像这样，当希望先将表中的数据分为多个部分（窗口），再使
用窗口函数时，可以使用PARTITION BY选项。
● 262 第8章 SQL高级处理
专用窗口函数的种类
从上述结果中我们可以看到，“打孔器”和“叉子”都排在第2位，
而之后的“擦菜板”跳过了第3位，直接排到了第4位，这也是通常的排
序方法，但某些情况下可能并不希望跳过某个位次来进行排序。
这时可以使用RANK函数之外的函数来实现。下面就让我们来总结
一下具有代表性的专用窗口函数吧。
KEYWORD ●RANK函数
●RANK函数
计算排序时，如果存在相同位次的记录，则会跳过之后的位次。
●DENSE_RANK函数
●ROW_NUMBER函数
例）有3条记录排在第1位时：1位、1位、1位、4位……
●DENSE_RANK函数
同样是计算排序，即使存在相同位次的记录，也不会跳过之后的位次。
例）有3条记录排在第1位时：1位、1位、1位、2位……
●ROW_NUMBER函数
赋予唯一的连续位次。
例）有3条记录排在第1位时：1位、2位、3位、4位……
除此之外，各DBMS还提供了各自特有的窗口函数。上述3个函
数（对于支持窗口函数的DBMS来说）在所有的DBMS中都能够使用。
下面就让我们来比较一下使用这3个函数所得到的结果吧（代码清单
8-3）。
代码清单8-3 比较RANK、DENSE_RANK、ROW_NUMBER的结果
Oracle SQL Server DB2 PostgreSQL
SELECT product_name, product_type, sale_price,
RANK () OVER (ORDER BY sale_price) AS ranking,
DENSE_RANK () OVER (ORDER BY sale_price) AS dense_ranking,
ROW_NUMBER () OVER (ORDER BY sale_price) AS row_num
FROM Product;
8-1 窗口函数 263 ●
执行结果 RANK DENSE_RANK ROW_NUMBER
product_name | product_type | sale_price | ranking | dense_ranking | row_num
-----------+--------------+-------------+---------+--------------+--------
圆珠笔 | 办公用品 | 100 | 1 | 1 | 1
叉子 | 厨房用具 | 500 | 2 | 2 | 2
打孔器 | 办公用品 | 500 | 2 | 2 | 3
擦菜板 | 厨房用具 | 880 | 4 | 3 | 4
T恤衫 | 衣服 | 1000 | 5 | 4 | 5
菜刀 | 厨房用具 | 3000 | 6 | 5 | 6
运动T恤 | 衣服 | 4000 | 7 | 6 | 7
高压锅 | 厨房用具 | 6800 | 8 | 7 | 8
将结果中的ranking列和dense_ranking列进行比较可以发
现，dense_ranking列中有连续2个第2位，这和ranking列的情
况相同。但是接下来的“擦菜板”的位次并不是第4而是第3。这就是使
用DENSE_RANK函数的效果了。
此外，我们可以看到，在row_num列中，不管销售单价（sale_
price）是否相同，每件商品都会按照销售单价从低到高的顺序得到一
个连续的位次。销售单价相同时，DBMS会根据适当的顺序对记录进行排
列。想为记录赋予唯一的连续位次时，就可以像这样使用ROW_NUMBER
来实现。
使用RANK或ROW_NUMBER时无需任何参数，只需要像RANK ()
或者ROW_NUMBER()这样保持括号中为空就可以了。这也是专用窗口
函数通常的使用方式，请大家牢记。这一点与作为窗口函数使用的聚合函
数有很大的不同，之后我们将会详细介绍。
法则8-3
由于专用窗口函数无需参数，因此通常括号中都是空的。
窗口函数的适用范围
目前为止我们学过的函数大部分都没有使用位置的限制，最多也就是
在WHERE子句中使用聚合函数时会有些注意事项。但是，使用窗口函数
的位置却有非常大的限制。更确切地说，窗口函数只能书写在一个特定的
位置。
● 264 第8章 SQL高级处理
这个位置就是SELECT子句之中。反过来说，就是这类函数不能在
注A WHERE子句或者GROUP BY子句中使用。A
语法上，除了SELECT子句，
ORDER BY子句或者UPDATE语
法则8-4