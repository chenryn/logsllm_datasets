Password:
FATA[0015] Post http://localhost:8080/auth/login: dial tcp 127.0.0.1:8080: connection refused
提示出错，连接被拒绝。我们通过ifconfig命令来查看当前主机的网络接口信息：
$ ifconfig
docker0 Link encap:以太网 硬件地址 56:84:7a:fe:97:99
inet 地址:172.17.42.1 广播:0.0.0.0 掩码:255.255.0.0
inet6 地址: fe80::5484:7aff:fefe:9799/64 Scope:Link
UP BROADCAST RUNNING MULTICAST MTU:1500 跃点数:1
接收数据包:4475 错误:0 丢弃:0 过载:0 帧数:0
发送数据包:3821 错误:0 丢弃:0 过载:0 载波:0
碰撞:0 发送队列长度:0
接收字节:1489568 (1.4 MB) 发送字节:2052137 (2.0 MB)
主机会有很多网络接口，我们需要注意docker0的地址，这里是172.17.42.1。我们使用该地址
登录，具体为：
shipyard cli> shipyard login
URL: http://172.17.42.1:8080
Username: admin
Password:
shipyard cli>
登录成功。
17.2 shipyard操作 217
17.2 shipyard 操作 1
在这一节中，我们会介绍shipyard的基础概念及相关操作。
2
17.2.1 鉴权
3
想要操作shipyard管理的Docker集群，就必须通过账号登录。shipyard支持多用户，你可以创
4
建多个账号，方便多人来管理。当然，只有管理员有添加账号的权限。账号分两种角色——admin
和user，前者拥有集群的所有管理权限，后者可以进行账号、服务密钥外的任何管理操作。
5
要想创建一个新账号，可以通过shipyard add-account命令完成，具体操作为：
shipyard cli> shipyard add-account -u minimicall -p 110110 -r admin 6
其中参数-u用于设置用户名，-p用于设置密码，-r则用于设置角色，这里我们添加了一个管理员。
添加好账号后，可以通过如下命令查看shipyard中有哪些账号： 7
shipyard cli> shipyard accounts
9
Username Role
admin admin
minimicall admin
8
可以看到，当前有两个管理员：admin和minimicall。
另外，如果想删除某个账号，可以通过delete-account命令来完成，具体如下： 10
shipyard cli> shipyard delete-account minimicall
10
17.2.2 引擎
11
shipyard集群可以包含一个或多个引擎（engine）。引擎就是一个在后台监听TCP的Docker守
候进程。shipyard不需要在集群安装客户端，因为它使用Docker API和每个主机的Docker后台通信。 13
想要通过shipyard管理Docker，就得指定Docker后台程序能够监听指定TCP端口，这在14.2节中已
经介绍过了。 14
添加引擎时，需要配置的元素如下所示。
15
 id：每个引擎都有一个独一无二的标识。
 addr：它是引擎的地址，有http://和https://两种形式。
16
 resource：每一个引擎都有资源，例如CPU、内存等。
 label：一个引擎有一个或者多个标签，标签用于调度和放置容器。
17
 ssl：一个引擎可以配置为SSL安全连接。
一旦添加了一个shipyard引擎，你就可以定义引擎使用的资源。这些限制在容器的调度时非
18
218 第17章 shipyard
常有用，以保证能够满足用户的需求。你也可以设定SSL证书，提供安全的通信。
接下来，我们说明引擎的相关操作示例。
添加引擎的代码如下：
shipyard cli> shipyard add-engine --id local \
--addr http:// 172.17.42.1:2376 \
--cpus 4.0 \
--memory 8192 \
--label dev \
--label local
上述代码添加了一个id为local的引擎，addr指定了该Docker后台监听的地址和端口，cpus表示最
多使用4个CPU，memory用于设置内存上限，label参数设定了dev和local两个标签。
查看引擎的代码如下：
shipyard cli> shipyard engines
ID Cpus Memory Host Labels
local 4.00 8192.00 http:// 172.17.42.1:2376 local,dev
在上述代码中，可以看到我们刚刚添加的引擎。
查看引擎详细信息的代码如下：
shipyard cli> shipyard inspect-engine local
{
"engine": {
"labels": [
"local",
"dev"
],
"memory": 2048,
"cpus": 4,
"addr": "172.17.42.1:2376",
"id": "local"
},
"id": "a08b8518-e963-4eb5-959a-566bd270cd28"
}
删除引擎的代码如下：
shipyard cli> shipyard remove-engine a08b8518-e963-4eb5-959a-566bd270cd28
removed local
我们不仅可以通过shipyard cli命令对引擎进行增、删、改、查，还可以通过Web UI来进行
这些操作。
添加引擎的界面如图17-3所示，从中点击ADD按钮，进入添加引擎配置页面，如图17-4所示。
17.2 shipyard操作 219
1
2
3
4
5
图17-3 添加引擎界面
6
7
9
8
10
10
11
13
图17-4 添加引擎配置页面
14
配置好之后，点击“提交”按钮。添加引擎成功后的界面，如图17-5所示。
15
16
17
18
图17-5 添加引擎成功
220 第17章 shipyard
17.2.3 容器
shipyard中的容器就是Docker的容器，容器可以部署在多个引擎上。当一个容器被部署时，
有以下参数可以配置。
 Name。镜像的名字，例如shipyard/shipyard。
 CPUs。容器最多会使用的CPU数量。
 Memory。容器最多使用的内存大小。
 Type。有service（服务）、unique（独一无二）和host（指定主机）3种类型，具体如下
所示。
 service类型：只有拥有指定标签的引擎才可以运行该容器。
 unique类型：只有该引擎上没有相同的容器运行时，容器才会被调度到该引擎。
 host类型：可以指定特定的引擎来运行该容器，具体方法是--label host:。
 Hostname。容器的主机名。
 Domain。容器的域名。
 Env。环境变量通过--env参数设定，使用key=value的形式。
 Arg。使用--arg为容器添加参数，可以多次使用。
 Label。设定容器的标签，标签在调度和部署时非常有用。
 Port。需要暴露的端口，形如--port /:，例如--port
tcp/:8080将宿主机上的一个随机端口映射到容器的8080端口，--port tcp/80:8080将宿主
机的80端口映射到容器的8080端口。--port参数可以多次使用，用于映射多个端口。
 Pull。将会从Registry中下载最新的库。
 Count。可以指定容器在集群中的数量，默认值为1。
接下来，我们列举一些关于容器操作的案例。
部署容器的代码如下：
shipyard cli> shipyard run --name ehazlett/go-demo \
--cpus 0.1 \
--memory 32 \
--type service \
--hostname demo-test \
--domain local \
--env FOO=bar \
--label dev \
--pull
started 407e39dc1ccc on local
在上述代码中，我们通过shipyard run命令来部署一个容器，该容器基于镜像ehazlett/
go-demo。
17.2 shipyard操作 221
查看容器列表的代码如下： 1
shipyard cli> shipyard containers
ID Name Host Ports 2
407e39dc1ccc ehazlett/go-demo:latest local tcp/49166:8080
销毁容器的代码如下：
3
shipyard cli> shipyard destroy 407e39
destroyed 407e39dc1ccc 4
除了可以通过shipyard cli方式来操作容器外，我们还可以通过Web UI的方式，下面简要介
绍一下。 5
查看当前集群中的容器，如图17-6所示。
6
7
9
8
10
10
11
13
14
15
图17-6 当前集群中的容器
16
点击其中某个容器，即可进入到该容器的控制面板，如图17-7所示。
17
18
222 第17章 shipyard
图17-7 容器的控制面板
在该面板中，不仅有该容器的基本信息，你还可以进行启动、停止、部署、扩展部署和查看
日志等操作。
17.2.4 服务密钥
服务密钥（service key）用于API访问。通过服务密钥，可以行使shipyard API的所有权限。
如果想要通过API操作shipyard，必须先创建一个服务密钥，具体操作为：
shipyard cli> shipyard add-service-key -d "test key"
created key: Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry
此外，使用shipyard service-keys命令，可以查看服务密钥：
shipyard cli> shipyard service-keys
Key Description
Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry test key
创建好密钥之后，我们可以通过该密钥以API的形式来访问shipyard的服务。和第9章学习
Docker的API一样，这里我们使用curl命令来操作。例如，使用curl命令查询当前集群中的引擎：
curl -s -H 'X-Service-Key: LdFRei6UpOnIcitk.dhHF/Fd7AgOQ87SWuVG' http://172.17.42.1:8080/api/engines
[{"id":"784f6429-2ce7-4f84-8296-30c79315fcc3","engine":{"id":"localhost","addr":"http://172.17.42
.1:2376","cpus":1,"memory":1024,"labels":["test"]},"health":{"status":"up","response_time":918378},
"docker_version":"1.4.1"}]
17.2 shipyard操作 223
当不需要该密钥时，可以通过如下操作删除它： 1
shipyard cli> shipyard remove-service-key Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry
removed Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry 2
17.2.5 Web钩子密钥
3
Web钩子密钥（webhook keys）用于Docker Hub与shipyard之间的通信，当Docker Hub中的镜
像更新后，可以通知shipyard及时下载，具体流程如下所示。 4
(1) Docker Hub接到通知，创建一个新的镜像。
5
(2) Docker Hub向shipyard发送一个Web钩子通知。
(3) shipyard通过Web钩子密钥进行鉴权。
6
(4) shipyard向Docker Hub拉取最新镜像。
(5) shipyard停止并删除当前镜像，然后部署新的镜像。
7
若想使用Web钩子通知服务，需要在Docker Hub中加入Web钩子密钥，形如http:///hub/ webhook/。
9
下面我们说明如何创建、查看和删除Web钩子密钥。
8
创建Web钩子密钥
shipyard cli> shipyard add-webhook-key --image ehazlett/go-demo
10
created key: 010f2af9db29f43a
查看Web钩子密钥：
10
shipyard cli> shipyard webhook-keys
Image Key
11
ehazlett/go-demo 010f2af9db29f43a
删除Web钩子密钥：
13
shipyard cli> shipyard remove-webhook-key 010f2af9db29f43a
removed 010f2af9db29f43a
14
17.2.6 事件
15
shipyard记录集群中的所有事件，例如容器的创建、启动、停止、密钥的管理、引擎的管理
等。例如，可以通过shipyard events来查看系统中发生的所有事件： 16
shipyard cli> shipyard events
Time Message Engine Type Tags
17
Sep 09 06:58:13 2014 container:6c07 local start docker
Sep 09 06:58:13 2014 container:6c07 local create docker