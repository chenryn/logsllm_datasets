### 17.2 Shipyard 操作

#### 17.2.1 鉴权
在尝试连接到Shipyard管理的Docker集群时，遇到了以下错误信息：
```
FATA[0015] Post http://localhost:8080/auth/login: dial tcp 127.0.0.1:8080: connection refused
```
提示出错，连接被拒绝。我们可以通过`ifconfig`命令来查看当前主机的网络接口信息：
```bash
$ ifconfig
docker0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.42.1  netmask 255.255.0.0  broadcast 0.0.0.0
        inet6 fe80::5484:7aff:fefe:9799  prefixlen 64  scopeid 0x20<link>
        ether 56:84:7a:fe:97:99  txqueuelen 0  (Ethernet)
        RX packets 4475  bytes 1489568 (1.4 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3821  bytes 2052137 (2.0 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
```
注意到`docker0`接口的IP地址是`172.17.42.1`。我们可以使用该地址进行登录：
```bash
shipyard cli> shipyard login
URL: http://172.17.42.1:8080
Username: admin
Password:
shipyard cli>
```
登录成功。

**创建和管理账户**
- 要操作Shipyard管理的Docker集群，必须通过账号登录。Shipyard支持多用户，可以创建多个账号以便多人管理。
- 只有管理员有添加账号的权限。账号分为两种角色：`admin`（拥有所有管理权限）和`user`（可以进行除账号和服务密钥外的所有管理操作）。

**创建新账号**
```bash
shipyard cli> shipyard add-account -u minimicall -p 110110 -r admin
```
其中，`-u`设置用户名，`-p`设置密码，`-r`设置角色。

**查看现有账号**
```bash
shipyard cli> shipyard accounts
Username Role
admin     admin
minimicall admin
```

**删除账号**
```bash
shipyard cli> shipyard delete-account minimicall
```

#### 17.2.2 引擎
Shipyard集群可以包含一个或多个引擎（engine）。每个引擎都是一个后台监听TCP端口的Docker守护进程。Shipyard不需要在集群中安装客户端，因为它使用Docker API与每个主机的Docker后台通信。

**添加引擎**
需要配置的元素如下：
- `id`：每个引擎的唯一标识。
- `addr`：引擎的地址，可以是`http://`或`https://`形式。
- `resource`：每个引擎的资源，如CPU、内存等。
- `label`：引擎的一个或多个标签，用于调度和放置容器。
- `ssl`：是否配置为SSL安全连接。

**示例**
```bash
shipyard cli> shipyard add-engine --id local \
--addr http://172.17.42.1:2376 \
--cpus 4.0 \
--memory 8192 \
--label dev \
--label local
```

**查看引擎**
```bash
shipyard cli> shipyard engines
ID    Cpus  Memory  Host               Labels
local 4.00  8192.00 http://172.17.42.1:2376  local,dev
```

**查看引擎详细信息**
```bash
shipyard cli> shipyard inspect-engine local
{
  "engine": {
    "labels": [
      "local",
      "dev"
    ],
    "memory": 8192,
    "cpus": 4,
    "addr": "http://172.17.42.1:2376",
    "id": "local"
  },
  "id": "a08b8518-e963-4eb5-959a-566bd270cd28"
}
```

**删除引擎**
```bash
shipyard cli> shipyard remove-engine a08b8518-e963-4eb5-959a-566bd270cd28
removed local
```

除了通过`shipyard cli`命令，还可以通过Web UI进行这些操作。

#### 17.2.3 容器
Shipyard中的容器就是Docker容器，可以部署在多个引擎上。部署容器时可以配置以下参数：
- `Name`：镜像名称，例如`shipyard/shipyard`。
- `CPUs`：容器最多使用的CPU数量。
- `Memory`：容器最多使用的内存大小。
- `Type`：有三种类型：`service`（只有拥有指定标签的引擎才可以运行该容器）、`unique`（只有该引擎上没有相同的容器运行时，容器才会被调度到该引擎）、`host`（可以指定特定的引擎来运行该容器，具体方法是`--label host:`）。
- `Hostname`：容器的主机名。
- `Domain`：容器的域名。
- `Env`：环境变量，使用`--env key=value`的形式。
- `Arg`：使用`--arg`为容器添加参数，可以多次使用。
- `Label`：设定容器的标签，标签在调度和部署时非常有用。
- `Port`：需要暴露的端口，形如`--port tcp/<host-port>:<container-port>`。
- `Pull`：从Registry下载最新的镜像。
- `Count`：指定容器在集群中的数量，默认值为1。

**部署容器**
```bash
shipyard cli> shipyard run --name ehazlett/go-demo \
--cpus 0.1 \
--memory 32 \
--type service \
--hostname demo-test \
--domain local \
--env FOO=bar \
--label dev \
--pull
started 407e39dc1ccc on local
```

**查看容器列表**
```bash
shipyard cli> shipyard containers
ID            Name                    Host       Ports
407e39dc1ccc  ehazlett/go-demo:latest  local      tcp/49166:8080
```

**销毁容器**
```bash
shipyard cli> shipyard destroy 407e39
destroyed 407e39dc1ccc
```

除了通过`shipyard cli`方式，还可以通过Web UI进行这些操作。

#### 17.2.4 服务密钥
服务密钥（service key）用于API访问。通过服务密钥，可以行使Shipyard API的所有权限。

**创建服务密钥**
```bash
shipyard cli> shipyard add-service-key -d "test key"
created key: Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry
```

**查看服务密钥**
```bash
shipyard cli> shipyard service-keys
Key                                      Description
Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry   test key
```

**使用服务密钥访问API**
```bash
curl -s -H 'X-Service-Key: LdFRei6UpOnIcitk.dhHF/Fd7AgOQ87SWuVG' http://172.17.42.1:8080/api/engines
[{"id":"784f6429-2ce7-4f84-8296-30c79315fcc3","engine":{"id":"localhost","addr":"http://172.17.42.1:2376","cpus":1,"memory":1024,"labels":["test"]},"health":{"status":"up","response_time":918378},"docker_version":"1.4.1"}]
```

**删除服务密钥**
```bash
shipyard cli> shipyard remove-service-key Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry
removed Z2uwezQGoaIcfiRSQBRbktrzdbFRWKlVTEry
```

#### 17.2.5 Web钩子密钥
Web钩子密钥（webhook keys）用于Docker Hub与Shipyard之间的通信，当Docker Hub中的镜像更新后，可以通知Shipyard及时下载。

**流程**
1. Docker Hub接到通知，创建一个新的镜像。
2. Docker Hub向Shipyard发送一个Web钩子通知。
3. Shipyard通过Web钩子密钥进行鉴权。
4. Shipyard向Docker Hub拉取最新镜像。
5. Shipyard停止并删除当前镜像，然后部署新的镜像。

**创建Web钩子密钥**
```bash
shipyard cli> shipyard add-webhook-key --image ehazlett/go-demo
created key: 010f2af9db29f43a
```

**查看Web钩子密钥**
```bash
shipyard cli> shipyard webhook-keys
Image          Key
ehazlett/go-demo 010f2af9db29f43a
```

**删除Web钩子密钥**
```bash
shipyard cli> shipyard remove-webhook-key 010f2af9db29f43a
removed 010f2af9db29f43a
```

#### 17.2.6 事件
Shipyard记录集群中的所有事件，如容器的创建、启动、停止、密钥的管理、引擎的管理等。

**查看系统事件**
```bash
shipyard cli> shipyard events
Time                 Message                  Engine  Type  Tags
Sep 09 06:58:13 2014 container:6c07           local   start docker
Sep 09 06:58:13 2014 container:6c07           local   create docker
```

以上是Shipyard的基本概念及相关操作的介绍。希望这些内容对你有所帮助。