α ⊕ λ1
αβ ⊕ λ1
γ and
α] ⊕ M1[λi
(cid:111)
(cid:16)(cid:76)
(cid:17) ⊕ t1
the following values:
(cid:110)
K1[ti
γ] := Λα · K1[λi
β] ⊕ Λβ · K1[λi
α] ⊕ K1[λi
αβ] ⊕ K1[λi
γ]
γ∆1.
(c) Let H be the almost universal linear hash function deﬁned by χ. For each i (cid:54)= 1, Pi computes and sends
γ] :=
i(cid:54)=1
i(cid:54)=1 K1[ti
γ]
, M1[t1
zi := H({M1[ti
w]}w∈W ) ∈ F2κ to P1.
(d) P1 computes z1 := H({M1[t1
13. For each i ∈ [n], Pi computes its output as follows:
(a) For each wire w ∈ Oi and j (cid:54)= i, Pj and Pi compute λj
(b) For each wire w ∈ Oi, Pi computes yi
w]}w∈W ) ∈ F2κ, and checks that(cid:80)n
(cid:17)
w := Λw ⊕(cid:16)(cid:76)
j∈[n] λj
w
w := Open([λj
w]i
j).
. Then Pi outputs yi.
i=1 zi = 0. If the check fails, P1 aborts.
Figure 7: Our MPC protocol in the Fprep-hybrid model, continued.
Appendix A.3) for authenticated bits/shares. Recall that B =
log |C|+1 + 1 denotes the bucket size. The
communication rounds and complexity are obtained from the work [HSS17] for HSS and calculated from
ρ
19
Func. Ind. phase
Communication (bits)
Rounds
[HSS17]
[WRK17b]
This paper
(3B2 + 1)(n − 1)|C|(κ + ρ) + (n − 1)|I|(κ + ρ)
(3B + κ
κ+ρ B + 1)(n − 1)|C|(κ + ρ) + (n − 1)|I|(κ + ρ)
(4B + 1)(n − 1)|C|κ + (1 − 1/n)|I|κ
13
9
8
Func. Dep. phase
Communication (bits)
Rounds
[HSS17]
[WRK17b]
This paper
Online phase
[HSS17]
[WRK17b]
This paper
4n|C|κ + 2(n − 1)|C| + (n − 1)|I| + |O|
4(n − 1)|C|κ + 4|C|ρ + 2(n − 1)|C| + (n − 1)|I|
(4n − 6)|C|κ + (2n − 1)|C|
Communication (bits)
|I|(n − 1)κ + |I|/n
|I|κ + |I|/n + |O|
max{|I|κ,|C|} + |I|/n + |O|
2
2
2
Rounds
2
3
4
Table 2: Comparison of communication complexity and rounds between our MPC protocol and the state-of-the-art
protocols. The communication complexity is the maximum amount of data sent by any one party per execution. The
columns for #R denote the rounds. |I| (resp., |O|) is the length of all circuit-input (resp., circuit-output) wires, and
thus |I|/n is the length of every party’s input. |C| is the number of AND gates in the circuit.
the protocol description for WRK [WRK17b].
w,Λw
= Li
In the online phase, we assume that every party obtains a possible different output. It is straightforward to
extend the HSS protocol [HSS17] for supporting multiple different outputs. No explicit approach to support
multiple outputs is described for the WRK protocol in their work [WRK17b]. The main problem is how
every garbler Pi with i (cid:54)= 1 obtains the correct public values on its circuit-output wires in an efﬁcient way,
where recall that only the evaluator P1 can compute the circuit. We can solve the problem, by considering a
w,0⊕ Λw∆i as an MAC on bit Λw. Thus, we can let P1 send the public values along
garbled label Li
with a hash value of garbled labels on these values to every garbler Pi who can check the correctness of
these values. In this way, we can extend the WRK protocol [WRK17b] to support multiple different outputs.
From Table 2, our protocol obtains lower communication complexity in the preprocessing phases, and
has the (almost) same online communication overhead. Although our protocol has more rounds in the
online phase, we believe that this is a reasonable trade-off for lower communication cost in the function-
dependent phase. We refer the reader to Section 5 for the comparison of the concrete communication cost
and performance.
5 Performance Evaluation
In this section, we compare the performance of our protocol with the best prior work. We developed an
automatic benchmarking platform to remotely control a large number of machines executing MPC without
the need to log in each machine. We will make it publicly available on EMP toolkit [WMK16] for all
implementations that we produced from this work, as well as this testing platform. For all protocols, we
choose computational security parameter κ = 128 and statistical security parameter ρ = 40. All experiments
are executed across machines of type c5.9xlarge with 36 vCPUs. The network bandwidth is 10 Gbps with
20
Comm.
(bytes)
Running time with different threads (ns)
32
2
286
588
193
184
1.48× 5.88× 5.47× 5.28× 3.77× 3.2×
26
765
203
8
1263
239
4
2255
412
3978
677
[WRK17a]
This paper
Improvement
Table 3: Comparison of our protocol and WRK in the two-party setting. The running time, which is
needed to generated one authenticated AND triple, is reported in nanoseconds (ns). Communication cost is
the amount of bandwidth needed per party to compute one authenticated triple.
Figure 8: Comparing our protocol with WRK for generating a multi-party authenticated AND triple
(small number of parties). The cost of generating one triple in the multi-party setting with number of
parties from 3 to 12. Error bars show the standard derivation.
latency about 0.1 ms.
5.1
Improvements for Authenticated Triple Generation Protocols
Two-party setting. In Table 3, we compare our authenticated triple generation protocol with the best prior
implementation available by Wang et al. [WRK17a]. We compare the performance by using both implemen-
tations to compute 223 authenticated triples and report the number of nanoseconds per triple. To demonstrate
the computation-communication cost, we run the same experiment with different number of threads. For
a fair comparison, we applied the same code optimization that we did in our code to the original WRK
code. As a result, our reported WRK performance is actually twice faster than the performance reported in
their paper. However, even after all these extra optimizations are applied to WRK, our protocol is still 5×
faster than WRK when eight or less number of threads are used. When the number of threads approaches
32, we observe that the improvement decreases to 3×. This is because the network gradually becomes the
bottleneck and limits the performance of our protocol.
Multi-party setting. In Figure 9, we compare our authenticated triple generation protocol with the best
prior implementation [WRK17b] in the multi-party setting. Similar to the two-party setting, we applied all
our code optimizations to the original WRK protocol [WRK17b] so that the comparison does not include
21
24681012Number of Parties024681012141618Triple Generation Time (µs)This paperWRK17Figure 9: Comparing our protocol with WRK for generating a multi-party authenticated AND triple (large
number of parties). The cost of generating one triple in the multi-party setting with number of parties from 8 to 80.
Error bars show the standard derivation.
pure engineering effort. We keep the number of threads used in both cases and two protocols the same:
for n-party triple generation, the number of threads used is 2(n − 1). We observe higher ﬂuctuation in
running time for the multi-party setting, especially when n is large. Therefore, we also include the standard
derivation as the error bar.
The WRK implementation frequently hangs when computing across more than 50 parties. It runs ﬁne
when the triple is less than 215 where the bucket size is 4. To make it fair, we only compare up to the number
of parties when WRK can run smoothly over 220 triples. We can observe that our protocol consistently
improves the efﬁciency by at least 5×. What’s more, the running time of WRK for 16 parties is already
slower than our protocol executed over 80 parties! We also give the exact running time for both protocols in
Table 4 for different number of parties.
5.2
Our improvements in the triple generation protocol directly translate to improvements of the function-
independent phase in our MPC protocol. Here, we will mainly describe our improvements in the function-
dependent phase for the authenticated garbling protocol. Our improvements mostly focus on the communi-
cation complexity in the multi-party setting, which also reﬂect the overall running time since the computation
is cheap. Therefore, we will compare the communication complexity in the multi-party setting with the best
known MPC protocol [WRK17b].
Improvements for Authenticated Garbling
To make the comparison fair, we optimize the size of distributed garbled circuit of WRK [WRK17b]
by using the trick proposed in the two-party setting [WRK17a]. This reduces the size of garbled circuit for
WRK [WRK17b] from 4nκ bits per AND gate to 4(n− 1)κ + 4ρ bits per AND gate. In addition, the online
communication cost of WRK is obtained by using the amortized opening of authenticated bits.
Comparison of communication cost based on AES circuit. An AES circuit consists of 6800 AND gates
and 128 bits of input and output. In the multi-party setting, we assume that all parties hold XOR shares of
the input and the circuit will ﬁrst XOR all input shares before the AES computation. Table 5 compares the
communication cost for secure AES evaluation between our protocol and the best prior protocol [WRK17b]
in the multi-party setting.
Compared to WRK [WRK17b], our protocol gives about 1.52× improvement for three-party case and
22
0102030405060708090Number of Parties01020304050607080Triple Generation Time (µs)This paperWRK17#Parties
3
4
5
6
7
8
WRK [WRK17b]
This paper
Improvement
#Parties
WRK [WRK17b]
This paper
Improvement
7.13
1.62
9.46
2.17
8.26
1.86
40
5.98
1.43
5.02
10.77
2.31
1.26
3.98× 4.12× 4.4× 4.44× 4.36× 4.66×
56
16
−
16.86
−
48
29.09
75
13.54
4.95
5.88× 6.36× 5.9× 5.5× 5.54×
32
51.6
8.7
62.66
11.41
24
40.55
6.37
Table 4: Comparison of our protocol and WRK in the multi-party setting. The running time, which is needed to
generated one authenticated AND triple, is reported in microsecond (µs).
#Parties
Protocol
n = 3
n = 5
WRK [WRK17b]
Ours
WRK [WRK17b]
Ours
#1024