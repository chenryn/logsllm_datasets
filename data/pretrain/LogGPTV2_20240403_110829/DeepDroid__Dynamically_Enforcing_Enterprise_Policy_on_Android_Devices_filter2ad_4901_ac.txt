### Mechanism

Samsung Knox has emerged as a comprehensive enterprise solution, focusing on providing robust security capabilities such as Trusted Boot, TrustZone-based Integrity Measurement Architecture (TIMA), SE for Android, and the Knox container. These features are designed to protect the Android system from adversaries and to isolate different working scenarios [9]. Through secure boot and kernel integrity checking, Knox ensures a trusted operating system in the normal world, leveraging ARM TrustZone hardware. For policy enforcement, Knox integrates SEAndroid and provides management APIs to customize security policies. Although Knox APIs have been integrated into Android 5.0 [27], their adoption is limited to Samsung devices [10]. Additionally, Knox requires ARM TrustZone hardware support, which restricts its deployment to specific Android platforms. In contrast, our DeepDroid system is a software-based solution that can be deployed on almost all Android platforms. On TrustZone-enabled platforms, DeepDroid can utilize TrustZone to obtain root privileges in the normal domain and protect the integrity of the rich OS.

### Related Work

Enterprise environments require system resource access control interfaces when employees use Android smartphones. Android access control mechanisms can be broadly categorized into four classes based on their technical approaches:

#### Modifying Android Source Code
Direct modification of Android source code can introduce new access control mechanisms, especially for enterprise-customized Android systems. However, the Android permission framework lacks flexible runtime configuration interfaces [28], and permission privilege leaks occur in commercial images [20]. Several security extensions have been proposed to address these issues [29-36]. For example, Apex [29] allows users to grant a selected set of permissions and supports user-defined restrictions on apps. CRePE [30] enforces fine-grained permission policies using context information from mobile devices. TISSA [31] introduces a privacy mode, enabling users to define what personal information is accessible to apps. Compac [32] distributes a narrowed set of permissions to third-party components to mitigate security problems. Saint [33] provides an infrastructure to protect app interfaces and resources. SELinux [26, 34] supports flexible mandatory access control (MAC) at both the middleware and kernel layers. Privacy data can also be protected by replacing it with dummy data before providing it to apps [13]. TaintDroid [35] monitors sensitive data usage through dynamic taint tracking and analysis, while TreeDroid [36] presents a novel scheme to monitor security policies on data processing.

However, these approaches require modifications to the Android source code, leading to portability issues due to the high cost of customizing specific Android branches from different OEMs. Our system performs dynamic memory instrumentation on stable Android structures, making it deployable across various Android versions.

#### Rewriting Apps
Rewriting app code is another approach to enforce resource access policies. This method is more portable and competitive, as it involves integrating security measures directly into Android apps. For instance, [37] enables the identification and interposition of Security Sensitive APIs through Dalvik bytecode rewriting. [38] supports the retrofitted behavior of apps via static and dynamic method interception. [39] is an on-device instrumentation scheme that intercepts high-level Java calls to enforce flexible policies. [40] enforces security policies by rewriting low-level `libc.so` functions.

Interactions between apps and the Android system can be recovered from system calls. [41] introduces a new module that supports parameterized permissions for fine-grained resource access. [42] allows users to insert instrumentation code into apps at a high level of abstraction. While app rewriting is effective and does not require modifying the Android ROM, incomplete implementations can lead to potential attacks [43]. Ensuring that all apps are rewritten is challenging and critical for enterprise security management. Additionally, repackaging can result in signature differences, preventing the rewritten app from sharing the original app's history.

#### Isolating Business Apps
Creating an isolated secure domain for business-related apps is another promising solution. This approach divides user apps into personal and business categories, with business apps running in a secure environment to block attacks from the personal domain. Trustdroid [44] is an isolation framework based on modifying Android system source code. KNOX [45] provides a complete enterprise management solution, including an integrity-checking component in the secure domain. However, these solutions do not directly aim at enforcing enterprise security policies on employee mobile devices and face portability issues due to changes in the Android system or hardware support.

#### Modifying Android Runtime
Our system relies on dynamically modifying the Android runtime environment. Patchdroid [46] uses a similar technique to apply security patches to the entire Android system, while our work focuses on enforcing enterprise policies on all installed apps.

### Conclusions

DeepDroid is a mechanism designed to enforce enterprise security policies on Android devices. It offers good portability, fine-grained control, and minimal performance overhead by dynamically injecting control code into the Android framework, which has a stable set of process structures across various versions. Evaluation results show that DeepDroid can effectively work on various Android platforms with negligible performance impact.

### Acknowledgment

The authors would like to thank Xiaofeng Wang from Indiana University and the anonymous reviewers for their valuable comments and suggestions. This work is partially supported by the National 973 Program of China under award numbers 2013CB338001 and 2014CB340603. Dr. Kun Sunâ€™s work is supported by the U.S. Office of Naval Research under award number N00014-11-1-0471 and the U.S. Army Research Office under Grant W911NF-12-1-0448. The corresponding author is Yuewu Wang.

### References

[References listed here, formatted according to the appropriate academic style.]

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is well-structured and easy to follow.