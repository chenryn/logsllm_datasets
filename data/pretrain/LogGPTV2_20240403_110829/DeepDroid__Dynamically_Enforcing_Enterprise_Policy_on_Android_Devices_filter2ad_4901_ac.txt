mechanism.
Samsung Knox has risen up to provide a complete
enterprise solution. It focuses on providing capabili-
ties including Trusted Boot, TrustZone-based Integrity
Measurement Architecture (TIMA), SE for Android,
and Knox container, to protect Android system from
adversaries and isolate different working scenarios [9].
Through secure boot and kernel integrity checking, Knox
can ensure a trusted OS in the normal world based on
ARM TrustZone hardware. As for policy enforcement,
Knox integrates SEAndroid and provides management
APIs to customize security policies. Despite that Knox
APIs are integrated into Android 5.0 [27], its adoption
is limited to Samsung devices [10]. Moreover, Knox
requires ARM TrustZone hardware support, which limits
its deployment to only certain Android platforms. Our
DeepDroid system is a software-based solution that can
be deployed on almost all Android platforms. Mean-
while, on TrustZone-enabled platforms, DeepDroid may
utilize TrustZone to obtain the root privilege of the
normal domain and protect the integrity of the rich OS
in the normal domain.
VIII. RELATED WORK
Enterprise demands system resource access control
interfaces in Android when employees are equipped
with Android smartphone in workspace. Android access
control mechanisms can be generally categorized into
four classes by their technical approaches.
Modifying Android source code. Android source
code can be directly modiﬁed to support new access
control mechanisms when we can access the source code
for the enterprise-customized Android system. Because
Android permission framework does not provide ﬂexible
runtime conﬁguration interface [28] and permission priv-
ilege leaks happen to commercial images [20], several
security extensions have been proposed to the permission
framework [29], [30], [31], [32], [33], [26], [34], [13],
[35], [36]. Apex [29] enables users to grant a selected set
of permissions and supports user-deﬁned restrictions on
apps. CRePE [30] can enforce ﬁne-grained permission
policies by using context
information of the mobile
devices. By introducing a privacy mode, TISSA [31] em-
powers users to deﬁne what kinds of personal informa-
tion are accessible to apps. To mitigate security problems
aroused by a certain third-party component, Compac [32]
manages to distribute a narrowed set of permissions to
one component. While the above approaches focus on
protection of system resources, Saint [33] provides an
infrastructure that protects apps’ interfaces and resources.
Another way to enhance access control is achieved
by introducing Security Enhanced Linux (SELinux). A
ﬂexible mandatory access control (MAC) can be support-
ed on both Android’s middleware and kernel layers [26],
[34]. Besides directly hardening access control system,
privacy data can be further protected by being replaced
with some dummy data before providing it to apps [13].
TaintDroid [35] monitors usage of sensitive data by
dynamic taint tracking and analysis. Based on Taintdroid,
TreeDroid
[36] presents a novel scheme to monitor
security policies on data processing.
Since all these approaches require Android source
code modiﬁcation, they have portability problem due to
the high cost incurred when customizing a speciﬁc An-
droid branch from different OEMs. Our system performs
dynamic memory instrumentation on the stable Android
structures, so it can be deployed similarly on various
Android versions.
Rewriting apps. Compared with modifying Android
system code, app code can be rewritten to ensure a
resource access policy. Due to good portability, enforcing
security on apps themselves becomes a competitive ap-
proach. It is mainly implemented by integrating security
measures into Android app with app rewriting.
[37]
enables identifying and interposing of Security Sensitive
APIs by dalvik bytecode rewriting. [38] supports retroﬁt
of app’s behaviors by static and dynamic method inter-
ception. [39] is an on-the-phone instrumentation scheme,
which enables ﬂexible policies on apps by intercepting
13
high-level java calls. Security policies of [40] are en-
forced by low-level libc.so rewriting.
Interactions between an app and Android system can
be recovered from system calls. [41] helps to perfor-
m ﬁne-grained permissions on resource accessing by
introducing a new module that supports parameterized
permissions. Any access to sensitive resources from apps
is forwarded to this module. To support behavior study-
ing, [42] allows user to insert instrumentation code into
an app from a high-level of abstraction. App rewriting
is an effective way that requires no modiﬁcation to
Android ROM. However, incomplete implementations of
bytecode rewriting may result in several potential attack-
s [43]. It is difﬁcult to assure that all apps are rewritten
which is critical to enterprise security management. In
addition, due to signature difference of repackaging
process, all history information of the original app cannot
be shared by the rewritten app.
Isolating business apps. Besides adding extra control
measures on Android system or apps, creating an isolated
secure domain is another promising solution for running
business related apps. It divides all user apps into two
categories: personal apps and business apps. Business
apps are running in a secure isolated environment,
and thus attacks originated from personal domain can
be blocked out. Trustdroid [44] is an isolation frame-
work based on modifying Android system source code.
KNOX [45] provides a complete enterprise management
solution including an integrity checking component in the
secure domain. All these solutions do not directly aim
at enforcing enterprise security policies on employee’s
mobile device. It also has the portability problem due to
the changing of Android system or hardware supports.
Modifying Android runtime. Our system relies on
dynamically modifying the Android runtime environ-
ment. Patchdroid [46] uses a similar technique to apply
security patches for the entire Android system, while
our work focuses on enforcing enterprise policies on all
installed apps.
IX. CONCLUSIONS
of process structures in various versions. Thus, Deep-
Droid may be deployed on various Android versions
with a similar installation procedure. Since DeepDroid
can regulate each app’s service access operations by
intercepting Binder transactions and tracing system calls,
it can achieve a ﬁne-grained context-aware policy en-
forcement. The evaluation results of a prototype show
that DeepDroid can work effectively on various Android
platforms with negligible performance overhead.
X. ACKNOWLEDGMENT
The authors would like to thank the shepherd, Xi-
aofeng Wang from Indiana University, and the anony-
mous reviewers for their valuable comments and sug-
gestions. This work is partially supported by National
973 Program of China under award No. 2013CB338001
and No. 2014CB340603. Dr. Kun Sun’s work is sup-
ported by U.S. Ofﬁce of Naval Research under award
number N00014-11-1-0471 and U.S. Army Research
Ofﬁce under Grant W911NF-12-1-0448. This paper’s
corresponding author is Yuewu Wang.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
4.3’s
hidden
app
ops: Android
permission
individual apps!” http:
“Cisco global work your way study,” http://www.cisco.
com/c/dam/en/us/solutions/collateral/borderless-networks/
uniﬁed-access/ua survey infographic.pdf.
“Android pushes past 80156.0http://www.idc.com/getdoc.jsp?
containerId=prUS24442013.
“App
manager, control permissions for
//www.androidpolice.com/2013/07/25/app-ops-android-4-3s/
hidden-app-permission-manager/-control-permissions-for/
-individual-apps/.
“App
4.4.2
App-Ops-removed-by-Google-in-Android-4.4.2-update
id50340/.
“Merge
html.
“Device administration,” http://developer.android.com/guide/
topics/admin/device-admin.html.
“Mobile device management,” http://en.wikipedia.org/wiki/
Mobile device management.
android
http://www.phonearena.com/news/
http://seandroid.bitbucket.org/MergeStatus.
removed
update,”
status,”
ops
by
google
in
[8] Samsung, “Samsung For Enterprise,” http://www.samsung.
com/us/business/samsung-for-enterprise/index.html.
In this paper, we present a mechanism named Deep-
Droid to enforce enterprise security policy on Android
devices. DeepDroid provides good properties including
portability, ﬁne-grained control, and minimal perfor-
mance overhead through dynamically injecting control
code into Android framework, which has a stable set
[10]
[11]
[12]
14
[9] S. Electronics, “Samsung KNOX,” http://www.samsung.com/
supported
workspace
global/business/mobile/solution/security/samsung-knox.
“Knox
devices,”
//www.samsungknox.cn/en/solutions/knox/technical/
knox-supported-devices.
“Openbinder,” http://www.angryredplanet.com/ hackbod/open-
binder/docs/html/.
“System permissions,”
topics/security/permissions.html.
http://developer.android.com/guide/
https:
[33] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel,
“Semantically rich application-centric security in android,”
Computer Security Applications Conference, Annual, 2009.
[34] S. Bugiel, S. Heuser, and A.-R. Sadegh, “Flexible and Fine-
Grained Mandatory Access Control on Android for Diverse
Security and Privacy Policies,” in 22nd USENIX Security
Symposium (USENIX Security ’13), 2013.
[35] W. Enck, P. Gilbert, B. gon Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. Sheth, “TaintDroid: An Information-
Flow Tracking System for Realtime Privacy Monitoring on
Smartphones,” in OSDI, 2010, pp. 393–407.
[36] A. L. Mads Dam, Gurvan Le Guernic, “Treedroid: A tree au-
tomaton based approach to enforcing data processing policies,”
in CCS, 2012.
[37] B. Davis, B. S, A. Khodaverdian, and H. Chen, “I-arm-
droid: A rewriting framework for in-app reference monitors for
android applications,” in In Proceedings of the Mobile Security
Technologies 2012, MOST 12. IEEE, 2012.
[38] B. Davis and H. Chen, “RetroSkeleton: Retroﬁtting Android
Apps,” in Proceeding of the 11th Annual International Confer-
ence on Mobile Systems, Applications, and Services, 2013.
[39] M. Backes, S. Gerling, C. Hammer, M. Maffei, and P. von
Styp-Rekowsky, “AppGuard: Enforcing User Requirements on
Android Apps,” in Proceedings of the 19th International Con-
ference on Tools and Algorithms for the Construction and
Analysis of Systems, 2013.
[41]
[40] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: Practical Policy
Enforcement for Android Applications,” in Proceedings of the
21st USENIX Conference on Security Symposium, 2012.
J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy,
J. S. Foster, and T. Millstein, “Dr. Android and Mr. Hide: Fine-
grained Permissions in Android Applications,” in Proceedings
of the Second ACM Workshop on Security and Privacy in
Smartphones and Mobile Devices, 2012.
[42] S. Hao, D. Li, W. G. Halfond, and R. Govindan, “SIF: A S-
elective Instrumentation Framework for Mobile Applications,”
in Proceeding of the 11th Annual International Conference on
Mobile Systems, Applications, and Services, 2013.
[43] H. Hao, V. Singh, and W. Du, “On the Effectiveness of API-
level Access Control Using Bytecode Rewriting in Android,”
in Proceedings of the 8th ACM SIGSAC Symposium on Infor-
mation, Computer and Communications Security, 2013.
[45] Samsung Electronics,
[44] A. D. S. H. A.-R. S. B. S. Sven Bugiel, Lucas Davi, “Practical
and lightweight domain isolation on android,” in SPSM, 2011.
“White Paper: An Overview of
Samsung KNOX,” http://www.samsung.com/global/business/
business-images/resource/white-paper/2013/06/Samsung
KNOX whitepaper June-0.pdf.
[46] C. Mulliner, J. Oberheide, W. Robertson, and E. Kirda, “Patch-
Droid: Scalable Third-party Security Patches for Android De-
vices,” in Proceedings of the 29th Annual Computer Security
Applications Conference, 2013.
[13] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall,
“These aren’t the droids you’re looking for: Retroﬁtting android
to protect data from imperious applications,” in Proceedings of
the 18th ACM Conference on Computer and Communications
Security, ser. CCS ’11, 2011.
[15]
[14] G. Russello, A. B. Jimenez, H. Naderi, and W. van der Mark,
“FireDroid: Hardening Security in Almost-stock Android,” in
Proceedings of the 29th Annual Computer Security Applica-
tions Conference, 2013.
http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042e/
IHI0042E aapcs.pdf.
“Caffeinemark 3.0,” http://www.benchmarkhq.ru/cm30/.
“Quadrant
apps/details?id=com.aurorasoftworks.quadrant.ui.standard.
standard edition,” https://play.google.com/store/
[16]
[17]
[18] A. D. T. F. A.-R. S. B. S. Sven Bugiel, Lucas Davi, “Towards
taming privilege-escalation attacks on android,” in NDSS, 2012.
[19] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin,
“Permission Re-Delegation: Attacks and Defenses,” in USENIX
Security Symposium, 2011.
[20] Z. W. X. J. Michael Grace, Yajin Zhou, “Systematic detection
of capability leaks in stock android,” in NDSS, 2012.
[21] V. K. Y. K. Mark Shaneck, Karthikeyan Mahadevan, “Remote
software-based attestation for wireless sensors,” Security and
Privacy in Ad-hoc and Sensor Networks, vol. 3813, pp. 27–41,
2005.
v. D. L. K. P. Seshadri. A, Perrig A, “Swatt: software-based
attestation for embedded devices,” in IEEE Symposium on
Security and Privacy, 2004.
[22]
[23] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach,
“Quire: Lightweight Provenance for Smart Phone Operating
Systems,” in Proceedings of the 20th USENIX Conference on
Security, 2011, pp. 23–23.
[24] T. Alves and D. Felton, “TrustZone: Integrated hardware and
software security,” ARM white paper, vol. 3, no. 4, 2004.
http://source.android.com/devices/tech/dalvik/art.html.
[25]
[26] S. Smalley and R. Craig, “Security Enhanced (SE) Android:
[27]
Bringing Flexible MAC to Android,” in NDSS, 2013.
“A closer look at knox contribution in android,” https://www.
samsungknox.cn/en/androidworkwithknox.
[28] X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos, “Permis-
sion Evolution in the Android Ecosystem,” in Proceedings of
the 28th Annual Computer Security Applications Conference,
2012.
[29] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending An-
droid Permission Model and Enforcement with User-deﬁned
Runtime Constraints,” in Proceedings of the 5th ACM Sympo-
sium on Information, Computer and Communications Security,
2010.
[30] M. Conti, V. T. N. Nguyen, and B. Crispo, “CRePE: Context-
related Policy Enforcement for Android,” in Proceedings of the
13th International Conference on Information Security, 2011.
[31] X. J. Yajin Zhou, Xinwen Zhang and V. W. Freeh, “Taming
Information-Stealing Smartphone Applications (on Android),”
in In: Trust and Trustworthy Computing, 2011.
[32] Y. Wang, S. Hariharan, C. Zhao, J. Liu, and W. Du, “Compac:
Enforce Component-level Access Control in Android,” in Pro-
ceedings of the 4th ACM Conference on Data and Application
Security and Privacy, 2014.
15