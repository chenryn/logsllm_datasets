![图 2：矩阵 E、F、G、H](/data/attachment/album/202311/20/150448x4zv8zzccy4uvypn.jpg)
让我们看看矩阵是如何表示的，以及如何获取它们的详细信息。图 3 展示了怎么用 NumPy 表示矩阵 A。虽然矩阵和数组并不完全等价，但实践中我们经常将它们作为同义词来使用。
![图 3：用 NumPy 表示矩阵 A](/data/attachment/album/202311/20/150449fc894o6vfzncpjyv.jpg)
我强烈建议你仔细学习如何使用 NumPy 的 `array` 函数创建矩阵。虽然 NumPy 也提供了 `matrix` 函数来创建二维数组和矩阵。但是它将在未来被废弃，所以不再建议使用了。在图 3 还显示了矩阵 A 的一些详细信息。`A.size` 告诉我们数组中元素的个数。在我们的例子中，它是 9。代码 `A.ndim` 表示数组的  维数   dimension 。很容易看出矩阵 A 是二维的。`A.shape` 表示矩阵 A 的 阶数   order ，矩阵的阶数是矩阵的行数和列数。虽然我不会进一步解释，但使用 NumPy 库时需要注意矩阵的大小、维度和阶数。图 4 显示了为什么应该仔细识别矩阵的大小、维数和阶数。定义数组时的微小差异可能导致其大小、维数和阶数的不同。因此，程序员在定义矩阵时应该格外注意这些细节。
![图 4：数组的大小、维数和阶数](/data/attachment/album/202311/20/150449v2t79a972a5lvi72.jpg)
现在我们来做一些基本的矩阵运算。图 5 显示了如何将矩阵 A 和 B 相加。NumPy 提供了两种方法将矩阵相加，`add` 函数和 `+` 运算符。请注意，只有阶数相同的矩阵才能相加。例如，两个 4 × 3 矩阵可以相加，而一个 3 × 4 矩阵和一个 2 × 3 矩阵不能相加。然而，由于编程不同于数学，NumPy 在实际上并不遵循这一规则。图 5 还展示了将矩阵 A 和 D 相加。记住，这种矩阵加法在数学上是非法的。一种叫做  广播   broadcasting  的机制决定了不同阶数的矩阵应该如何相加。我们现在不会讨论广播的细节，但如果你熟悉 C 或 C++，可以暂时将其理解为变量的类型转换。因此，如果你想确保执行正真数学意义上的矩阵加法，需要保证以下测试为真:
![图 5：矩阵相加](/data/attachment/album/202311/20/150449oi98o5ce1un7eewe.jpg)
```
A.shape == B.shape
```
广播机制也不是万能的，如果你尝试把矩阵 D 和 H 相加，会产生一个运算错误。
当然除了矩阵加法外还有其它矩阵运算。图 6 展示了矩阵减法和矩阵乘法。它们同样有两种形式，矩阵减法可以由 `subtract` 函数或减法运算符 `-` 来实现，矩阵乘法可以由 `matmul` 函数或矩阵乘法运算符 `@` 来实现。图 6 还展示了  逐元素乘法   element-wise multiplication  运算符 `*` 的使用。请注意，只有 NumPy 的 `matmul` 函数和 `@` 运算符执行的是数学意义上的矩阵乘法。在处理矩阵时要小心使用 `*` 运算符。
![图 6：更多矩阵运算](/data/attachment/album/202311/20/150449wdfjpd0yvsllpsss.jpg)
对于一个 m x n 阶和一个 p x q 阶的矩阵，当且仅当 n 等于 p 时它们才可以相乘，相乘的结果是一个 m x q 阶矩的阵。图 7 显示了更多矩阵相乘的示例。注意 `E@A` 是可行的，而 `A@E` 会导致错误。请仔细阅读对比 `D@G` 和 `G@D` 的示例。使用 `shape` 属性，确定这 8 个矩阵中哪些可以相乘。虽然根据严格的数学定义，矩阵是二维的，但我们将要处理更高维的数组。作为例子，下面的代码创建一个名为 T 的三维数组。
![图 7：更多矩阵乘法的例子](/data/attachment/album/202311/20/150449ku000zlu00cbuuoo.jpg)
```
T = np.array([[[11,22], [33,44]], [[55,66], [77,88]]])
```
### Pandas
到目前为止，我们都是通过键盘输入矩阵的。如果我们需要从文件或数据集中读取大型矩阵并处理，那该怎么办呢？这时我们就要用到另一个强大的 Python 库了——Pandas。我们以读取一个小的 CSV （ 逗号分隔值   comma-separated value ）文件为例。图 8 展示了如何读取 `cricket.csv` 文件，并将其中的前三行打印到终端上。在本系列的后续文章中将会介绍 Pandas 的更多特性。
![图 8：用 Pandas 读取 CSV 文件](/data/attachment/album/202311/20/150449uutm49qtmq29n3qt.jpg)
### 矩阵的秩
矩阵的  秩   Rank  是由它的行（列）张成的向量空间的维数。如果你还记得大学线性代数的内容的话，你一定对维数、向量空间和张成还有印象，那么你也应该能理解矩阵的秩的含义了。但如果你不熟悉这些术语，那么可以简单地将矩阵的秩理解为矩阵中包含的信息量。当然，这又是一种未来方便理解而过度简化的说法。图 9 显示了如何用 NumPy 求矩阵的秩。矩阵 A 的秩为 3，因为它的任何一行都不能从其它行中得到。矩阵 B 的秩为 1，因为第二行和第三行可以由第一行分别乘以 2 和 3 得到。矩阵 C 只有一个非零行，因此秩为 1。同样的，其它矩阵的秩也不难理解。矩阵的秩与我们的主题关系密切，我们会在后续文章中再提到它。
![图 9：求矩阵的秩](/data/attachment/album/202311/20/150450xzhszis93uutoed1.jpg)
本次的内容就到此结束了。在下一篇文章中，我们将扩充工具库，以便它们可用于开发人工智能和机器学习程序。我们还将更详细地讨论  神经网络   neural network 、 监督学习   supervised learning 、 无监督学习   unsupervised learning  等术语。此外，从下一篇文章开始，我们将使用 JupyterLab 代替 Linux 终端。
*（题图：MJ/ce77d714-3651-44e4-96b0-ffbf7ae4269c）*
---
via: 
作者：[Deepu Benson](https://www.opensourceforu.com/author/deepu-benson/) 选题：[lkxed](https://github.com/lkxed) 译者：[toknow-gh](https://github.com/toknow-gh) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出