Recommended size for Windows XP Professional8GB
Oore vitudskasasheHle
OSpitvtul dskinto2Gfles
Spitting thedskmakesertomove the vrtulmachietoanot
PocntACE sin cala
Heb
<>
图1.3.18设置虚拟机操作系统文件及磁盘大小
图1.3.18这里主要设置虚拟机操作系统磁盘大小和文件保存类型，这里不需要做任何修改，
直接单击“Next”按钮即可，如图1.3.19所示。
26
---
## Page 52
第
这一步显示的是虚拟机配置完成信息，直接单击“Finish”按钮，VMware将开始安装自动
1
章
操作系统了，如图1.3.20所示。
基
Reedy to Create Virtual Machine
础
GidkFnish to create thevirtualmachineend start installng Wndows p
知识
The wirtuamechine wbe croated wth the folowing settings:
Name:
Windows XP Professional
Location:
C:(Documents and Settingsladministrator`My Documents.
Version:
uopseypoid dx smopum
Workstation 6.5
Operating System:
Hard Disk:
512MB
40 GB
Memory:
Network Adapter:
NAT
Other Devices:
CDJDvD, Floppy, USB Conibroler, Sound Card
#define PASSWORD*1234567"
int verify_password (char *password)
intauthenticated;
authenticated=etrcmp(password,PAsSwORD);
29
---
## Page 55
oday 安全：
return authenticated;
main
软件漏洞分析技术（第2版）
intvalid_flag=0;
char password[1024];
while(1)
printf("please inputpassword:
scanf("$s*,password);
valid_flag=verify_password(password);
if（valid_flag)
else
printf(Congratulation!You have passed the verification!\n);
break;
如图1.4.1所示，我们必须输入正确的密码“1234567”才能得到密码验证的确认，跳出循
环。看到程序源码后不难发现，程序是提示密码错误请求再次输入，还是提示密码正确跳出循
环，完全取决于main函数中的if判断。
"C:Voct
图1.4.1程序运行情况
如果我们能在.exe文件中找到if判断对应的二进制机器代码，将其稍作修改，那么即使输
30
---
## Page 56
第
入错误的密码，也将通过验证！本节实验就带领大家来完成这样一件事情，这实际上是一种最
1
简单的软件破解，也被称为“爆破”。
章
题外话：软件破解技术是自成体系的另一门安全技术，其关键在于在调试时巧妙地设
基
置断点，寻找关键代码段。本例的破解方法有很多，比如直接在PE中搜索密码、crack
础
子函数等，在此只举其中一个来介绍。这个实验的目的在于练习使用工具，复习前面
知识
的概念，而并非真正研究破解技术。
实验环境如表1-4-1所示。
表1-4-1实验环境
推荐使用的环境
备注
操作系统
WindowsXPSp2
其他Win32操作系统也可进行本实验
编译器
Visual C++ 6.0
其他编译器生成的PE文件也可用于实验，但细节会有差异
编详选项
默认编译选项
build版本
release版本
debug版本也可用于实验，但实验细节会有差异
说明：如果完全采用实验指导所推荐的实验环境，将精确地重现指导中所有的细节，包括动态调试时的内存地址和静态
调试的文件偏移地址：否则，一些地址可能需要重新调试来确定。
首先打开IDA，并把由VC6.0得到的.exe文件直接拖进IDA，稍等片刻，IDA就会把二
进制文件翻译成质量上乘的反汇编代码。
如图1.4.2所示，默认情况下，IDA会自动识别出main函数，并用类似流程图的形式标注
出函数内部的跳转指令。如果按F12键，IDA会自动绘制出更加专业和详细的函数流程图，如
图1.4.3所示。
密码错误
分支点
密码正确
重新输人
if
跳出循环
图1.4.2IDA的流程图界面1
31
---
## Page 57
0
day
安全
P,400
：
软件
loc_401046:
offet aPleeseInputPes; *plesse input peeeuord:
后复售
漏
洞分析
198
]
lest
add
esp, 10h
技术
fafr
（第
D040107D:
offset aIncormactPasau; “incorrect pestuord Vn\n*
2
版
ah
1oc_4010F:
offeet sCorgratulation; “Congratulati
add
40+*dsa
primf
retn
图1.4.3
IDA的流程图界面2
在IDA的图形显示界面中，
用鼠标选中程序分支点，也就是我们要找的对应于C代码中
的if分支点，按空格键切换到汇编指令界面，如图1.4.4所示。
FunSSIn n
tm
.text:00401040
指令地
1ea
x，[espuar_]
text:4B1055
址已经
: "
自动换
scanf
程序分支点
算成VA
5ab_ap1000
sp.10
.tPNt:
shert lec_4018F
HE7S
LCONE:00481877
.coxt:00481079
-tent:09401875
-towt:00401075
1oc_47:
pesh
0D xASF:_neia2t
deieted...
图1.4.4
用IDA定位破解点
32
---
## Page 58
第
光标仍然显示高亮的这条汇编指令就是刚才在流程图中看到的引起程序分支的指令。可以
1
看到这条指令位于PE文件的.text节，并且IDA已经自动将该指令的地址换算成了运行时的内
章
存地址VA：0040106E。
现在关闭IDA，换用OllyDbg进行动态调试来看看程序到底是怎样分支的。用OllyDbg把
基
础
PE文件打开，如图1.4.5所示。
知
识
X
图1.4.5加载PE文件
OllyDbg在默认情况下将程序中断在PE装载器开始处，而不是main函数的开始。如果您
有兴趣，可以按F8键单步跟踪，看看在main函数被运行之前，装载器都做了哪些准备工作。
一般情况下，main函数位于GetCommandLineA函数调用后不远处，并且有明显的特征：在调
用之前有3次连续的压栈操作，因为系统要给main传入默认的argc、argv等参数。找到main
函数调用后，按F7键单步跟入就可以看到真正的代码了，如图1.4.6所示。
25118t
F8 6F1aa
H0UD20RD P1R DS:[AD8F6b],F0S
MUD0RDPTRDS:[A0797R|.TA%
0501166
calcrack.opac
H01160
h11/
E8 CE1haeeB
6C7942
main（函数
01176
50
PUSH EOX
BE
s3Ch 0C
Callcrack_ne,iosa1aB
OOD ESP.DC
9h5Fh
NUDRDPTRSS:[FEP1C1.FAX
图1.4.6定位main函数
33
---
## Page 59
day安全"
0
我们也可以按快捷键Ctrl+G直接跳到由IDA得到的VA：0x0040106E处查看那条引起程
序分支的关键指令，如图1.4.7所示。
软件漏洞分析技术（第2版）
SIEC
soDtsP,sea
8 57
47车B
K93 HSEJ
rack ne.eve/s
ASCIT'S
1
中
Ch 10
30018406
ES
SCII
SCI1
ETR-SS:[ESP·S]
图1.4.7定位if分支
选中这条指令，按F2键下断点，成功后，指令的地址会被标记成不同颜色。
按F9键让程序运行起来，这时候控制权会回到程序，OllyDbg暂时挂起。到程序提示输入
密码的Console界面随便输入一个错误的密码，回车确认后，OllyDbg会重新中断程序，收回
控制权，如图1.4.8所示。
51
0AC248C
LEAECX,D
FSVHFHEE
011
no.80501089
D
8358
JE SoNI crack_ne.aa4a1w7F
ESTLR
.LA
7h
crack
ASCII
08144088
ER C7