(cid:17) ∈ Fn
2κ
j(cid:54)=i, zi
i
i=1 ui = 0 by exchanging random elements
8. After all commitments have been made, all parties open their commitments by calling the (Open) command
of FCom, and then check that:
n(cid:88)
for each i ∈ [n],
zj
i = 0.
If the check fails, the parties abort.
j=1
9. The parties output (cid:96) authenticated shares (cid:104)x1(cid:105), . . . ,(cid:104)x(cid:96)(cid:105) with (cid:104)xk(cid:105) = ([x1
k]1, . . . , [xn
k ]n) for k ∈ [(cid:96)].
Figure 5: Protocol for generating multi-party authenticated shares.
theorem, we prove that protocol ΠaShare securely realizes the functionality FaShare for authenticated shares
with weak global keys as shown in Figure 12 of Appendix C. The full proof of the theorem is provided in
Appendix C. We also give the communication rounds and complexity of protocol ΠaShare in Appendix C.
Theorem 2. Protocol ΠaShare shown in Figure 5 securely realizes functionality FaShare with statistical error
1/2κ in the (FaBit,FCom)-hybrid model.
Implementing the (aBit) command of Fprep. In functionality Fprep shown in Figure 1, all parties can call
the (aBit) command to generate authenticated bits in which the bits are known by n different parties. The
16
parties can execute the protocol ΠaBit described in Figure 4 n times to implement this command. In this
case, a malicious party Pi may use inconsistent global keys in n different executions of ΠaBit. Nevertheless,
we note that if one authenticated share has the consistent global keys, then all multi-party authenticated
bits have also the consistent global keys. Therefore, by one execution of protocol ΠaShare, we have already
guaranteed that all authenticated bits from n executions of ΠaBit have the consistent global keys. In a very
special case that ΠaShare is not executed by the parties when the circuit does not include any AND gate,
the parties still need to perform the consistency check underlying the protocol ΠaShare to guarantee the
consistency of global keys.
4 Optimized Multi-Party Authenticated Garbling
4.1 Construction in the Fprep-hybrid model and Proof of Security
In this section, we present our MPC protocol Πmpc in the Fprep-hybrid model. Since we have already
discussed the main ideas of our improvements in Section 2, we directly show the complete description
of the protocol in Figure 6 and Figure 7.
In protocol Πmpc, we use an amortized opening process for
authenticated bits/shares described in Appendix A.3, which has also been used in the previous protocols
such as [NNOB12, KRRW18]. Speciﬁcally, every party can send the bits/shares along with a hash value of
the corresponding MACs to the other parties, which implements the amortized opening procedure denoted
by Open. In Appendix A.3, we prove that the amortized opening is still secure in our setting where a few
bits of global keys may be leaked via the selective failure attack.
In addition, protocol Πmpc uses an almost universal linear hash function H(z) = z[1]·χ+···+z[m]·χm,
where z ∈ Fm
2κ and m = |C|. The deﬁnition of such hash functions and the security of the construction are
given in Appendix A.2. In the output processing of protocol Πmpc, without loss of generality, we assume
that every party’s output is associated with different circuit-output wires. If we allow two parties to obtain
the same output from the same circuit-output wires such as Oi = Oj, then for each w ∈ Oi the wire masks
w and λj
λi
w need to be revealed over a private channel.
In Appendix E, we give a detailed security proof of protocol Πmpc. In particular, we are able to prove
the following result.
Theorem 3. Let f : {0, 1}|I| → {0, 1}|O| be an n-party functionality. Then protocol Πmpc shown in
Figures 6 and 7 securely computes f in the presence of a static malicious adversary corrupting up to n − 1
parties in the Fprep-hybrid model, where H is a random oracle.
4.2 Communication Complexity
In this section, we ﬁrst give the communication complexity of our protocol Πmpc shown in Figures 6 and 7,
and then compare it with the state-of-the-art constant-round maliciously secure MPC protocols [HSS17,
WRK17b] in the dishonest majority setting.
In the function-independent phase, our protocol Πmpc needs 8 communication rounds, when the initial-
ization procedure for the setup of global keys is instantiated by the base OT protocols such as [PVW08,
CO15, CSW20]. In this phase, protocol Πmpc needs to compute |I| authenticated bits, |C| authenticated
shares and |C| AND triples, and thus needs about (4B + 1)|C|(n− 1)κ +|I|(1− 1/n)κ bits of communica-
tion per execution for every party. In each execution of the function-dependent phase, our protocol needs two
rounds for computing circuit-dependent AND triples and sending a distributed garbled circuit, and requires
at most (4n−6)|C|κ+(2n−1)|C| bits of communication per party and (4n−6)(n−1)|C|κ+2n(n−1)|C|+|C|
bits in total. In the online phase, protocol Πmpc requires 4 rounds for that all parties obtain their outputs,
and needs about |I|κ +|I|/n +|O| (resp., |C| +|I|/n +|O|) bits of communication per execution for every
garbler Pi (resp., the evaluator P1).
In Table 2, we compare our MPC protocol with the state-of-the-art constant-round protocols [HSS17,
WRK17b], where all protocols are optimized by using the amortized opening procedure (as described in
17
Protocol Πmpc
Inputs: In the function-independent phase, all parties know |C| and |I|. In the function-dependent phase, the
parties agree on a circuit C for a function f : {0, 1}I1 × ··· × {0, 1}In → {0, 1}O1 × ··· × {0, 1}On. In
the online phase, Pi holds an input xi ∈ {0, 1}Ii for every i ∈ [n], where xi
w denotes the bit of input xi on a
circuit-input wire w ∈ Ii.
Function-independent phase:
1. All parties send (init) to Fprep, which returns a random ∆i ∈ {0, 1}κ to Pi for each i ∈ [n] with lsb(∆2) = 1.
2. For each i ∈ [n] and w ∈ Ii, the parties send (aBit, i) to Fprep, which returns a random authenticated bit [λw]i
to the parties. Then the parties deﬁne an authenticated share (cid:104)λw(cid:105) via running Bit2Share([λw]i).
3. For each w ∈ W, the parties send (aShare) to Fprep, which returns a random authenticated share (cid:104)λw(cid:105) to them.
4. For each w ∈ W, the parties send (aAND) to Fprep, which returns a random authenticated AND triple
((cid:104)a(cid:105),(cid:104)b(cid:105),(cid:104)c(cid:105)) to the parties.
5. For each w ∈ I1 ∪ ··· ∪ In, Pi samples Li
w,0 ← {0, 1}κ for i (cid:54)= 1.
If receiving fail from Fprep in Steps 2−4, the parties abort.
Function-dependent phase:
6. For each XOR gate (α, β, γ,⊕), the parties compute (cid:104)λγ(cid:105) := (cid:104)λα(cid:105) ⊕ (cid:104)λβ(cid:105). For i (cid:54)= 1, Pi also computes
Li
γ,0 := Li
α,0 ⊕ Li
β,0.
7. For all AND gates (α, β, γ,∧), the parties execute in parallel:
(a) Take a fresh authenticated AND triple ((cid:104)a(cid:105),(cid:104)b(cid:105),(cid:104)c(cid:105)) from the previous phase, and then compute (cid:104)d(cid:105) :=
(cid:104)λα(cid:105) ⊕ (cid:104)a(cid:105) and (cid:104)e(cid:105) := (cid:104)λβ(cid:105) ⊕ (cid:104)b(cid:105).
(b) Compute d := Open((cid:104)d(cid:105)) and e := Open((cid:104)e(cid:105)).
(c) Compute (cid:104)λαβ(cid:105) = (cid:104)λα · λβ(cid:105) := (cid:104)c(cid:105) ⊕ d · (cid:104)b(cid:105) ⊕ e · (cid:104)a(cid:105) ⊕ d · e.
8. For each AND gate (α, β, γ,∧), for i (cid:54)= 1, Pi computes Li
α,1 := Li
α,0 ⊕ ∆i and Li
β,1 := Li
β,0 ⊕ ∆i, and
computes the following:
α,1, γ) ⊕ ((cid:76)
β,0, γ) ⊕ ((cid:76)
β,1, γ) ⊕ Li
α,0 ⊕ ((cid:76)
Gi
γ,0 := H(Li
Gi
γ,1 := H(Li
Li
γ,0 := H(Li
bγ := lsb(Li
(cid:8)Mj[ri
j(cid:54)=i Ki[λj
α,0, γ) ⊕ H(Li
β,0, γ) ⊕ H(Li
α,0, γ) ⊕ H(Li
γ,0) if i = 2. For u, v ∈ {0, 1}, compute the following:
j(cid:54)=i,1
αβ∆i ⊕ ((cid:76)
γ](cid:9)
β]) ⊕ λi
j(cid:54)=i Ki[λj
αβ]) ⊕ λi
β∆i
α]) ⊕ λi
αβ] ⊕ Mj[λi
j(cid:54)=i Ki[λj
uv] := u · Mj[λi
α∆i
j(cid:54)=i Ki[λj
γ]) ⊕ λi
γ∆i
Gi,j
Gi,j
Gi,j
Gi,j
γ,00 := H(Li
γ,01 := H(Li
γ,10 := H(Li
γ,11 := H(Li
α,0, Li
α,0, Li
α,1, Li
α,1, Li
β] ⊕ v · Mj[λi
β,0, γ, j) ⊕ Mj[ri
β,1, γ, j) ⊕ Mj[ri
β,0, γ, j) ⊕ Mj[ri
β,1, γ, j) ⊕ Mj[ri
α] ⊕ Mj[λi
00] for j (cid:54)= i, 1
01] for j (cid:54)= i, 1
10] for j (cid:54)= i, 1
11] for j (cid:54)= i, 1
For each wire w ∈ W, every garbler Pi sends(cid:0)Gi
tionally P2 sends {bw}w∈W to P1.
w,1,(cid:8)Gi,j
w,0,Gi
w,00, Gi,j
w,01, Gi,j
w,10, Gi,j
w,11
(cid:9)
j(cid:54)=i,1
(cid:1) to P1. Addi-
Figure 6: Our MPC protocol in the Fprep-hybrid model.
18
Protocol Πmpc, continued
Online phase:
9. For each i ∈ [n] and w ∈ Ii, the parties execute as follows:
(a) Pi computes Λw := xi
(b) For each j (cid:54)= 1, Pj computes and sends Lj
w ⊕ λw, and then broadcasts Λw to all parties.
:= Lj
w,0 ⊕ Λw∆j to P1.
w,Λw
10. P1 evaluates the circuit following the topological order. For each gate (α, β, γ, T ), P1 holds (Λα,{Li
}i(cid:54)=1)
α,Λα
β,Λβ
}i(cid:54)=1), and
and (Λβ,{Li
⊕ Li
– If T = ⊕, compute Λγ := Λα ⊕ Λβ and Li
– If T = ∧, let u = Λα and v = Λβ, and compute the following:
:= Li
α,Λα
γ,Λγ
for i (cid:54)= 1.
β,Λβ
uv] := Λα · Mj[λ1
uv] := H(Li
(a) For each j (cid:54)= 1, Mj[r1
(b) For i (cid:54)= 1 and j (cid:54)= i, 1, Mj[ri
(c) For each i (cid:54)= 1, compute the garbled label on the output wire:
γ,0 ⊕ Λβ(Gi
β] ⊕ Λβ · Mj[λ1
α] ⊕ Mj[λ1
, γ, j) ⊕ Gi,j
γ,uv.
, γ) ⊕ ΛαGi
, γ) ⊕ H(Li
:= H(Li
, Li
α,Λα
β,Λβ
Li
γ,Λγ
α,Λα
β,Λβ
αβ] ⊕ Mj[λ1
γ].
) ⊕(cid:16)(cid:76)
(cid:17)
γ,1 ⊕ Li
α,Λα
j(cid:54)=i Mi[rj
uv]
.
(d) Compute the public value Λγ := bγ ⊕ lsb(L2
).
11. P1 computes hi := H({Li
(cid:0){Λw}w∈W , hi, χ(cid:1) to Pi. Then, Pi checks that hi = H({Li
}w∈W ) for each i (cid:54)= 1, and also samples a seed χ ← F2κ. For i (cid:54)= 1, P1 sends
w,0 ⊕ Λw∆i}w∈W ). If the check fails, Pi aborts.
For each XOR gate (α, β, γ,⊕) and i (cid:54)= 1, Pi computes locally Λγ := Λα ⊕ Λβ.
w,Λw
γ,Λγ
12. For all AND gates (α, β, γ,∧), P1 checks tγ = (Λα ⊕ λα) ∧ (Λβ ⊕ λβ) ⊕ (Λγ ⊕ λγ) = 0 in a batch, by
interacting with all other parties as follows:
(a) For each AND gate (α, β, γ,∧) and i (cid:54)= 1, Pi computes
M1[ti
γ] := Λα · M1[λi
β] ⊕ Λβ · M1[λi
αβ] ⊕ M1[λi
γ].
(b) For each AND gate (α, β, γ,∧), P1 computes t1
γ := Λα · Λβ ⊕ Λγ ⊕ Λα · λ1
β ⊕ Λβ · λ1