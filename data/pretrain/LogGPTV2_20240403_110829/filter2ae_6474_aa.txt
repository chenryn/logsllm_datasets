* * *
本文翻译自: 
* * *
### **浅析Chrome扩展程序安全的优先级**
Chrome的扩展安全性和用于审计Chrome扩展漏洞的方法似乎是一项令人震惊的现有技术话题。特别是与其他平台相比，如[Electron，它已对该话题开展了进一步地研究](https://www.blackhat.com/docs/us-17/thursday/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security-wp.pdf)。在互联网上搜索到的用来审核Chrome扩展程序的指南和工具的数量少之又少，只有一篇用来[描述Chrome扩展程序安全模型的学术论文](http://101.96.10.64/webblaze.cs.berkeley.edu/papers/Extensions.pdf)和2013年的一篇博客文章：[在易受攻击的扩展程序中展示XSS漏洞](https://resources.infosecinstitute.com/owned-by-chrome-extensions/)。其他搜索结果似乎已经过时了，例如[Chrome扩展指纹识别指南](http://blog.kotowicz.net/2012/02/intro-to-chrome-addons-hacking.html)，这个指南已不再适用于新的Chrome扩展程序。
当然，并不是说Chrome扩展程序中的安全问题没有被发现或者说特别罕见。比如比较具有代表性的例子——Reddit增强套件（RES）扩展程序中的跨站点脚本（XSS）漏洞。有关这个漏洞的详细摘要，请参阅[文章](https://blog.saynotolinux.com/blog/2014/04/12/spooky-sanitizer-stories-analyzing-the-reddit-enhancement-suite-xss-flaw/)，
而且目前该扩展程序目前已有150万用户。
这个例子并不算是最糟糕的情况，因为这个XSS漏洞是在扩展的[Content
Script（内容脚本）](https://developer.chrome.com/extensions/content_scripts)中而不是在[Background
Page（后台页面）](https://developer.chrome.com/extensions/background_pages)中（本指南将深入讨论其间差异）。简而言之：后台页面（可访问所有特权扩展API的页面）中的漏洞比任何常规XSS漏洞都要糟糕得多。它造成了让攻击者有滥用[扩展声明的任何API](https://developer.chrome.com/extensions/api_index)的能力，可以冒充成受害者访问所有网站，修改/编辑浏览器的书签，历史记录等信息的能力。例如，Steam
Inventory
Helper扩展程序存在[在后台页面的内容中执行任意的JavaScript](https://thehackerblog.com/steam-fire-and-paste-a-story-of-uxss-via-dom-xss-clickjacking-in-steam-inventory-helper/index-2.html)的漏洞，从而让它们可以在已经认证了它们的网站上劫持受害者的所有账户信息。
鉴于Chrome浏览器及其扩展有着令人难以置信的受欢迎程度，因此仔细研究这个平台可能发生的安全隐患很有价值的。这篇指南尝试概述扩展程序的安全反模式，并为开发人员和安全研究人员在审核Chrome扩展程序时提供可靠的服务（[tarnish](https://thehackerblog.com/tarnish/index.html)）。
在深入了解Chrome扩展程序中的安全反模式之前，首先要先了解下这些扩展程序的结构。直截了当地说：Chrome的开发人员已经把很多注意力放在了扩展安全和不安全的反模式上。他们的架构非常清晰，正如我将在下面讨论的，其中很多都是以构建开发人员无法轻松攻破自己的环境为核心思想设计的。在这个我们拥有[Electron](https://github.com/electron/electron/blob/master/docs/tutorial/security.md)和[NW.js](https://github.com/nwjs/nw.js/issues/1672#issuecomment-37111567)等平台的时代，它似乎有意将跨站点脚本（XSS）的系统性问题带到桌面，并将其全部转换为远程执行代码执行（RCE）而没有采取任何保护措施;Chrome的扩展环境是另一个不稳定因素。即使Chrome扩展程序无法执行任意一个系统命令，但它们仍然非常谨慎，以确保开发人员想出错都是很特别困难的。
### 独立而活跃的领域
#### 免责声明
本节将详细介绍Chrome扩展程序的运行方式。如果您已经熟悉这一点，那么您可以直接跳转到“[偷窥扩展程序中未被污染的安全反模式](https://xz.aliyun.com/t/2717#toc-0)”部分。哪怕您曾经开发过Chrome的扩展程序，但阅读这部分内容也可以当作是复习。
### 拓展程序基本布局-home中的manifest.json
Chrome扩展程序的文件结构实际上非常简单。Chrome扩展本质上是一个文件扩展名为.crx的压缩文件夹，扩展的核心是文件夹根目录下的manifest.json文件，该文件指定布局、权限和其他配置选项。而且理解[manifest.json格式](https://developer.chrome.com/extensions/manifest)对于审核安全漏洞的扩展是至关重要的。扩展的所有路径都是相对于manifest.json所在的基础位置。因此，如果您在根目录中有一个名为example.jpg的图像，它将位于chrome-extension://[EXTENSION_ID]/example.jpg （extension
ID为Chrome扩展私钥的base32编码的SHA256哈希值）。
#### **扩展体系结构，命名空间隔离和DOM**
Chrome扩展程序的工作方式在怎么利用它们的方面存在很大差异，其中大部分实际上在我之前的[学术论文](http://webblaze.cs.berkeley.edu/papers/Extensions.pdf)链接中有简述，但我会在这里深入研究它，因为论文已经有点过时了。
可视化的Chrome扩展程序布局一目了然：
上图显示了Chrome扩展程序的不同部分。每个彩色框都是一个单独的JavaScript变量命名空间。单独的变量命名空间意味着如果您在JavaScript中声明了一个变量，如下所示:
    var test = 2 ;
这个变量只能在自己的命名空间中访问（不同颜色的框不能直接访问彼此的变量）。例如，如果这是后台页面中的变量，则无法从内容脚本或网页中访问它。对于内容脚本声明的变量也是如此，后台页面或网页无法访问它们。这种沙箱可防止恶意网页干扰正在运行的内容脚本或扩展程序的后台页面，因为它无法访问或更改任何变量或函数。
#### **Chrome扩展中的同源策略（SOP）**
如果你了解[同源策略](https://en.wikipedia.org/wiki/Same-origin_policy)在Chrome扩展中是如何运用的，那么这种分离的意义就非常容易理解了。每个Chrome扩展程序都有自己的来源，格式如下：
    chrome-extension://[32_CHAR_EXTENSION_ID]
这意味着Chrome扩展程序API可以访问属于此来源的任何资源。这种原始结构很有意义，因为所有Chrome扩展程序的资源都位于chrome-extension://[32_CHAR_EXTENSION_ID]/ 目录中。
当我们讨论后台页面和[浏览器操作页面](https://developer.chrome.com/extensions/browserAction)时，所有的这些都在chrome-extension://[32_CHAR_EXTENSION_ID] 源目录中执行。示例如下：
    chrome-extension://[32_CHAR_EXTENSION_ID]/index.html