题目
Given a singly linkedl list L: L0→L1→.-→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→.
padueup aq Aew jasil sapou Ajuo sapou s,isll aq ul sanjen au Aypow jou few no
Example 1:
Given 1->2->3->4, reorder it to 1->4->2->3
Example 2:
Given 1->2->3->4->5, reorder it to 1->5->2->4->3.
题目大意
按照指定规则重新排序链表：第一个元素和最后一个元素排列在一起，接着第二个元素和倒数第二个元
素排在一起，接着第三个元素和倒数第三个元素排在一起。
解题思路
---
## Page 277
最近简单的方法是先把链表存储到数组里，然后找到链表中间的结点，按照规则拼接即可。这样时间复
杂度是O(n)，空间复杂度是O(n）。
更好的做法是结合之前几道题的操作：链表逆序，找中间结点。
先找到链表的中间结点，然后利用逆序区间的操作，如第92题里的reverseBetween操作，只不过
这里的反转区间是从中点一直到末尾。最后利用2个指针，一个指向头结点，一个指向中间结点，开始
拼接最终的结果。这种做法的时间复杂度是O（n)，空间复杂度是O(1)。
代码
package leetcode
* Definition for singly-linked list.
type ListNode struct {
Valint
Next *ListNode
*/
//解法一单链表
func reorderList(head *ListNode) *ListNode {
if head == nil l1 head.Next == nil {
return head
//寻找中间结点
pl := head
p2 := head
for p2.Next != nil && p2.Next.Next != nil {
pl = pl.Next
p2 = p2.Next.Next
//反转链表后半部分
2->1->3
Output: 1->2->3->4
Example 2:
Input: -1->5->3=>4>0
S2->1->3
Output: 1->2->3->4
Example 2:
Input: -1->5->3->4->0
Output: -1->0->3->4->5
题目大意
链表的排序，要求时间复杂度必须是O（nlogn)，空间复杂度是O（1)
解题思路
这道题只能用归并排序才能符合要求。归并排序需要的2个操作在其他题目已经出现过了，取中间点是
第876题，合并2个有序链表是第21题。
代码
package leetcode
* Definition for singly-linked list.
type ListNode struct {
valint
---
## Page 285
Next *ListNode
*/
func sortList(head *ListNode) *ListNode {
length := 0
cur := head
for cur != nil {
1ength++
cur = cur.Next
if length <= 1 {
return head
middleNode := middleNodel(head)
cur = middleNode .Next
middleNode.Next = ni1
middleNode = cur
1eft := sortList(head)
right := sortList(middleNode)
return mergeTwoLists148(1eft, right)
}
func middleNode1(head *ListNode) *ListNode {
if head == nil l1 head.Next == nil {
return head
pl := head
p2 := head
for p2.Next != nil && p2.Next.Next != nil {
pl = pl.Next
p2 = p2.Next.Next
return pl
if 11 == nil {
return 12
if 12 == nil {
return 11
if 11.val< 12.val{
11.Next = mergeTwoLists(11.Next, 12)
return 11
12.Next = mergeTwoLists(11, 12.Next)
---
## Page 286
return 12
150.EvaluateReversePolishNotation
题目
Evaluate the value of an arithmetic expression in Reverse Polish Notation.
Valid operators are +, -, *, /. Each operand may be an integer or another expression.
Note:
● Division between two integers should truncate toward zero.
● The given RPN expression is always valid. That means the expression would always evaluate
to a result and there won't be any divide by zero operation.
Example 1:
Input: ["2", "1", "+",
L.E.
output: 9
Exp1lanation: ((2 + 1) * 3) = 9
Example 2:
Input: ["4", "13", "5", "/",
"+""
Output:6
Explanation: (4 + (13 / 5)) = 6
Example 3:
Input:["10"，"6",“9",
-1.1'
"17"
'+"
"5", "+"]
output: 22
Explanation:
((10  (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 # (6 / (12 α -11))) + 17) + 5
=((10 * (6 / -132)) + 17) + 5
=((10 # 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
---
## Page 287
题目大意
计算逆波兰表达式。
解题思路
这道题就是经典的考察栈的知识的题目。
代码
package leetcode
import(
"strconv"
func evalrpN(tokens []string) int {
if len(tokens) == 1 {
i，_:= strconv.Atoi(tokens[0])
return i
stack, top := []int{}， 0
for _, v := range tokens {
switch v {
case "+":
sum = stack[top-2] + stack[top-1]
stack = stack[:top-2]
stack = append(stack， sum)
top-
case
"_":
{
sub
:= stack[top-2] - stack[top-1]
stack = stack[:top-2]
stack = append(stack, sub)
top--