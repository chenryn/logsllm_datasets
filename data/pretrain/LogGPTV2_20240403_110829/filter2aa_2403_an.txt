是由调用方函数直接传递数组或结构体这种大型数据（同时还要返回这些数据），那么参数的传递过程将会
复杂得出奇。所以，调用方函数只负责传递数组或结构体的地址，让被调用方函数处理地址里的数据，无
疑是最简单的做法。 
在 C/C++的概念中，指针就是描述某个内存地址的数据。 
x86 系统使用体系 32 位数字（4 字节数据）描述指针；x64 系统则使用 64 位数字（8 字节数据）。从数
据空间来看，64 位系统的指针比 32 位系统的指针大了一倍。当人们逐渐从 x86 平台开发过渡到 x86-64 平
台开发的时候，不少人因为难以适应而满腹牢骚。 
程序人员确实可在所有的程序里仅仅使用无类型指针这一种指针。例如，在使用 C 语言 memcpy()函
数、在内存中复制数据的时候，程序员完全不必知道操作数的数据类型，直接使用 2 个 void*指针复制数
据。这种情况下，目标地址里数据的数据类型并不重要，重要的是存储数据的空间大小。 
指针还广泛应用于多个返回值的传递处理。本书的第 10 章会详细介绍这部分内容。scanf()函数就可以
返回多个值。它不仅能够分析调用方法传递了多少个参数，而且还能读取各个参数的值。 
在 C/C++的编译过程里，编译器只会在类型检查的阶段才会检查指针的类型。在编译器生成的汇编程
序里，没有指针类型的任何信息。 
7.1.2 x86 
MSVC 
使用 MSVC 2010 编译上述源代码，可得到下述汇编指令： 
CONST     SEGMENT 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
59 
$SG3831     DB     'Enter X:', 0aH, 00H 
$SG3832     DB     '%d', 00H 
$SG3833     DB     'You entered %d...', 0aH, 00H 
CONST     ENDS 
PUBLIC     _main 
EXTRN     _scanf:PROC 
EXTRN     _printf:PROC 
; Function compile flags: /Odtp 
_TEXT     SEGMENT 
_x$=-4                ; size = 4  
_main     PROC 
     push   ebp 
     mov    ebp, esp 
     push   ecx 
     push   OFFSET $SG3831 ; 'Enter X: ' 
     call   _printf 
     add    esp, 4 
     lea    eax, DWORD PTR _x$[ebp] 
     push   eax 
     push   OFFSET $SG3832 ; '%d' 
     call   _scanf 
     add    esp, 8 
     mov    ecx, DWORD PTR _x$[ebp] 
     push   ecx 
     push   OFFSET $SG3833 ; 'You entered %d...' 
     call   _printf 
     add    esp, 8 
     ; return 0 
     xor    eax, eax 
     mov    esp, ebp 
     pop    ebp 
     ret   0 
_main   ENDP 
_TEXT   ENDS 
变量 x 是局部变量。 
C/C++标准要求：函数体内部应当可以访问局部变量，且函数外部应该访问不到函数内部的局部变量。
演变至今，人们不约而同地利用数据栈来存储局部变量。虽然分配局部变量的方法不只这一种，但是所有
面向 x86 平台的编译器都约定俗成般地采用这种方法存储局部变量。 
在函数序言处有一条“PUSH ECX”指令。因为函数尾声处没有对应的“POP ECX”指令，所以它的
作用不是保存 ECX 的值。 
实际上，这条指令在栈内分配了 4 字节的空间、用来存储局部变量 x。 
汇编宏_x$ （其值为−4）用于访问局部变量 x，而 EBP 寄存器用来存储栈当前帧的指针。 
在函数运行的期间，EBP 一直指向当前的栈帧（stack frame）。这样，函数即可通过 EBP+offset 的方式
访问本地变量、以及外部传入的函数参数。 
ESP 也可以用来访问本地变量，获取函数所需的运行参数。不过 ESP 的值经常发生变化，用起来并不
方便。函数在启动之初就会利用 EBP 寄存器保存 ESP 寄存器的值。这就是为了确保在函数运行期间保证
EBP 寄存器存储的原始 ESP 值固定不变。 
在 32 位系统里，典型的栈帧（stack frame）结构如下表所示。 
…… 
…… 
EBP-8 
局部变量＃2，IDA 标记为 var_8 
EBP-4 
局部变量＃1，IDA 标记为 var_4 
EBP 
EBP 的值 
EBP+4 
返回地址 Return address 
EBP+8 
函数参数＃1，IDA 标记为 arg_0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
60 
逆向工程权威指南（上册） 
                                         续表     
EBP+0xC 
函数参数＃2，IDA 标记为 arg_4 
EBP+0x10 
函数参数＃3，IDA 标记为 arg_8 
…… 
…… 
本例中的 scanf()有两个参数。 
第一个参数是一个指针，它指向含有“%d”的格式化字符串。第二个参数是局部变量 x 的地址。 
首先，“lea eax, DWORD PTR _x$[ebp]”指令将变量x的地址放入EAX寄存器。“lea”是“load effective 
address”的缩写，能够将源操作数（第二个参数）给出的有效地址（offset）传送到目的寄存器（第一个参
数）之中。
①
7.1.3 MSVC＋OllyDbg 
此处，LEA 将 EBP 寄存器的值与宏_x$求和，然后使用 EAX 寄存器存储这个计算结果；也就是等同
于“ lea eax, [ebp−4]”。 
就是说，程序会将 EBP 寄存器的值减去 4，并把这个运算结果存储于 EAX 寄存器。把 EAX 寄存器的
值推送入栈之后，程序才开始调用 scanf()函数。 
在调用 printf()函数之前，程序传给它第一个参数，即格式化字符串“You entered %d...\n”的指针。 
printf()函数所需的第二个参数由“mov ecx,[ebp−4] ”指令间接取值。传递给 ecx 的值是 ebp−4 所指向
的地址的值（即变量 x 的值），而不是 ebp−4 所表达的地址。 
此后的指令把 ECX 推送入栈，然后启动 printf()函数。 
现在使用 OllyDbg 调试上述例子。加载程序之后，一直按 F8 键单步执行，等待程序退出 ntdll.dll、进
入我们程序的主文件。然后向下翻滚滚轴，查找 main()主函数。在 main()里面点中第一条指令“PUSH EBP”，
并在此处按下 F2 键设置断点。接着按 F9 键，运行断点之前的指令。 
我们一起来跟随调试器查看变量 x 的计算指令，如图 7.1 所示。 
图 7.1  OllyDbg：局部变量 x 的赋值过程 
在这个界面里，我们在寄存器的区域内用右键单击 EAX 寄存器，然后选择“Follow in stack”。如此一
来，OllyDbg 就会在栈窗口里显示栈地址和栈内数据，以便我们清楚地观察栈里的局部变量。图中红箭头
所示的就是栈里的数据。其中，在地址 0x6E494714 处的数据就是脏数据。
在下一时刻，PUSH 指令会把数据存储到栈里的下一个地址。接下来，在程
序执行完 scanf()函数之前，我们一直按 F8 键。在执行 scanf()函数的时候，
我们要在运行程序的终端窗口里输入数据，例如 123，如图 7.2 所示。 
scanf()函数的执行之后的情形如图 7.3 所示。 
EAX 寄存器里存有函数的返回值 1。这表示它成功地读取了 1 个值。我们可以在栈里找到局部变量的
① 参见附录 A.6.2。 
图 7.2  控制台窗口 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
61 
地址，其数值为 0x7B（即数字 123）。 
图 7.3  OllyDbg：运行 scanf()之后 
这个值将通过栈传递给 ECX 寄存器，然后再次通过栈传递给 printf()函数，如图 7.4 所示。 
图 7.4  OllyDbg：将数值传递给 printf() 
GCC 
我们在 Linux GCC 4.4.1 下编译这段程序。 
main        proc near 
var_20      = dword ptr -20h 
var_1C      = dword ptr -1Ch 
var_4       = dword ptr -4 
             push    ebp 
             mov     ebp, esp 
             and     esp, 0FFFFFFF0h 
             sub     esp, 20h 
             mov     [esp+20h+var_20], offset aEnterX ; "Enter X:" 
             call    _puts 
              mov     eax, offset aD  ; "%d" 
              lea     edx, [esp+20h+var_4] 
              mov     [esp+20h+var_1C], edx 
              mov     [esp+20h+var_20], eax 
              call    ___isoc99_scanf 
              mov     edx, [esp+20h+var_4] 
              mov     eax, offset aYouEnteredD___ ; "You entered %d...\n" 
              mov     [esp+20h+var_1C], edx 
              mov     [esp+20h+var_20], eax 
              call    _printf 
              mov     eax, 0 
              leave 
              retn 
main         endp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
62 
逆向工程权威指南（上册） 
GCC 把 printf()替换为 puts()，这和 3.4.3 节中的现象相同。 
此处，GCC 通过 MOV 指令实现入栈操作，这点和 MSVC 相同。 
其他 
这个例子充分证明：在编译过程中，编译器会遵循 C/C++源代码的表达式顺序和模块化结构。在 C/C++
源代码中，只要两个相邻语句之间没有其他的表达式，那么在生成的机器码中对应的指令之间就不会有其
他的指令，而且其执行顺序也与源代码各语句的书写顺序相符。 
7.1.4 x64 
在编译面向 x64 平台的可执行程序时，由于这个程序的参数较少，编译器会直接使用寄存器传递参数。
除此之外，编译过程和 x86 的编译过程没有太大的区别。 
MSVC 
指令清单 7.1  MSVC 2012 x64 
_DATA   SEGMENT 
$SG1289 DB   
'Enter X: ', 0aH, 00H 
$SG1291 DB   
'%d', 00H 
$SG1292 DB   
'You entered %d... ', 0aH, 00H 
_DATA   ENDS 
_TEXT   SEGMENT 
x$ = 32 
main    PROC 
$LN3: 
         sub    
rsp, 56 
         lea    
rcx, OFFSET FLAT:$SG1289 ; 'Enter X: ' 
         call   
printf 
         lea    
rdx, QWORD PTR x$[rsp] 
         lea    
rcx, OFFSET FLAT:$SG1291 ; '%d' 
         call   
scanf 
         mov    
edx, DWORD PTR x$[rsp] 
         lea    
rcx, OFFSET FLAT:$SG1292 ; 'You entered %d... ' 
         call   
printf 
         ; return 0 
         xor      eax, eax 
         add      rsp, 56 
         ret      0 
main    ENDP 
_TEXT   ENDS 
GCC 
使用 GCC 4.6（启用优化选项－O3）编译上述程序，可得到如下所示的汇编指令。 
指令清单 7.2  Optimizing GCC 4.4.6 x64 
.LC0: 
        .string "Enter X:" 
.LC1: 
        .string "%d" 
.LC2: 
        .string "You entered %d...\n" 
main: 
        sub     rsp, 24 
        mov     edi, OFFSET FLAT:.LC0 ; "Enter X:" 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 7 章  scanf() 
63 
        call    puts 
        lea     rsi, [rsp+12] 
        mov     edi, OFFSET FLAT:.LC1 ; "%d" 
        xor     eax, eax 
        call    __isoc99_scanf 
        mov     esi, DWORD PTR [rsp+12] 
        mov     edi, OFFSET FLAT:.LC2 ; "You entered %d...\n" 
        xor     eax, eax 
        call    printf 
        ;return 0 
        xor     eax, eax 
        add     rsp, 24 
        ret 
7.1.5 ARM 
Optimizing Keil 6/2013 (Thumb 模式) 
.text:00000042    
scanf_main 
.text:00000042 
.text:00000042    
var_8            = -8 
.text:00000042 
.text:00000042 08 B5          
PUSH   
{R3,LR} 
.text:00000044 A9 A0          
ADR      
R0, aEnterX    ; "Enter X:\n" 
.text:00000046 06 F0 D3 F8   
BL       
__2printf 
.text:0000004A 69 46          
MOV      
R1, SP 
.text:0000004C AA A0          
ADR      
R0, aD          ; "%d" 
.text:0000004E 06 F0 CD F8   
BL       
__0scanf 
.text:00000052 00 99          
LDR      
R1, [SP,#8+var_8] 
.text:00000054 A9 A0          
ADR   
R0,aYouEnteredD___ ; "You entered%d…\n" 
.text:00000056 06 F0 CB F8   
BL       
__2printf 
.text:0000005A 00 20          
MOVS     
R0, #0 
.text:0000005C 08 BD          
POP      
{R3,PC} 
scanf()函数同样要借助指针传递返回值。在本例里，编译器给它分配了一个整型变量的指针。整型数
据占用 4 个字节的存储空间。但是返回数据的内存地址，可以直接放在 CPU 的寄存器中。在生成的汇编代
码里，变量 x 存在于数据栈中，被 IDA 标记为 var_8，然而，此时程序完全可以直接使用。栈指针 SP 指向
的存储空间，没有必要像上述代码那样机械式地调整 SP 分配栈空间。此后，程序把栈指针 SP（x 的地址）
存入 R1 寄存器，再把格式化字符串的偏移量存入 R0 寄存器，如此一来，scanf()函数就获得了它所需要的
所有参数。在此之后，程序使用 LDR 指令把栈中的返回值复制到 R1 寄存器、以供 printf()调用。 
即使使用 Xcode LLVM 程序以 ARM 模式编译这段程序，最终生成的汇编代码也没有实质性的区别，
所以本书不再演示。 
ARM64 
指令清单 7.3  Non-optimizing GCC 4.9.1 ARM64 
 1 .LC0: 
 2          .string "Enter X:" 
 3 .LC1: 
 4          .string "%d" 
 5 .LC2: 
 6          .string "You entered %d...\n" 
 7 scanf_main: 
 8 ; subtract 32 from SP, then save FP and LR in stack frame: 
 9          stp      x29, x30, [sp, -32]! 
10 ; set stack frame (FP=SP) 
11          add      x29, sp, 0 
12 ; load pointer to the "Enter X:" string: 
13          adrp     x0, .LC0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
64 
逆向工程权威指南（上册） 
14          add x0, x0, :lo12:.LC0 
15 ; X0=pointer to the "Enter X:" string 
16 ; print it: 
17          bl       puts 
18 ; load pointer to the "%d" string: 
19          adrp    x0, .LC1 
20          add     x0, x0, :lo12:.LC1 
21 ; find a space in stack frame for "x" variable (X1=FP+28): 
22          add     x1, x29, 28 
23 ; X1=address of "x" variable 
24 ; pass the address to scanf() and call it: 
25          bl      __isoc99_scanf 
26 ; load 32-bit value from the variable in stack frame: 
27          ldr    w1, [x29,28] 
28 ; W1=x 
29 ; load pointer to the "You entered %d...\n" string 
30 ; printf() will take text string from X0 and "x" variable from X1 (or W1) 
31          adrp   x0, .LC2 
32          add    x0, x0, :lo12:.LC2 
33          bl     printf 