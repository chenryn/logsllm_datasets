# Program and Workload Descriptions

- **Program: procmail**
  - **Filter**: A 1 MB message to a local mailbox.
- **Program: mailx**
  - **Workload**:
    - **Send mode**: Send one ASCII message.
    - **Receive mode**: Check local mailbox for new email.
- **Program: gzip**
  - **Compress**: 13 MB of ASCII text.
- **Program: cat**
  - **Write**: 13 MB of ASCII text to a file.

# Instruction Counts
- **procmail**: 374,103
- **mailx (send)**: 207,977
- **mailx (receive)**: 196,242
- **gzip**: 185,844

# Execution Environment
These programs, along with our static analyzer and runtime monitor, run on Solaris 8 on SPARC. The monitor operates as a separate process that traces the execution of a process via the Solaris /proc file system. To generate stack events for the Dyck model, the monitor walks the call stack of the process before every system call, similar to the approach used by Feng et al. [6]. By design, the full execution environment of the traced process is visible to the monitor. The environment is passed to the monitor, which then forks and executes the traced process in that environment using an environment-sensitive model.

# Effects of Static Argument Analysis
We evaluated models constructed for these four test programs using average reachability. We compared three different versions of the Dyck model with varying degrees of static data-flow analysis (Fig. 10). For `mailx`, we report two sets of results because it has two major modes of execution (sending and receiving mail) that produce significantly different execution behavior. Other programs, such as `gzip` (compressing or decompressing data), did not show notable changes in precision measurements.

1. **Dyck Model without Data-Flow Analysis**:
   - This model was used for system-call argument recovery.
   - Although there is some overlap between our current test programs and those previously used with a Dyck model [10], the results computed here by the average reachability measure are not comparable to previous average branching factor numbers reported for the Dyck model. Our current results can be compared with previous average branching factor numbers for non-stack-based models [9, 20].

2. **Dyck Model with Prior Data-Flow Analysis**:
   - System-call argument constraints were added when the constraints could have been recovered by a previously reported analysis technique [9, 10, 20].
   - Argument values are recovered only if they are consistent across all execution paths reaching a system call. If a value from any path cannot be identified statically, the entire argument value is considered unknown. Data-flows crossing between a shared object and the program are also considered unknown.
   - This limited data-flow analysis improved model precision by 0% to 20%.

3. **Dyck Model with New Data-Flow Analysis**:
   - All static data-flow analyses described in Section 4 were enabled.
   - The new argument analysis improved precision from 61% to 100%.

# Effects of Environment Sensitivity
We made the models environment-sensitive. For each program, we manually identified execution characteristics that depended on environment properties. Table 2 lists the dependencies added to the Dyck model for each program. These dependencies augmented values recovered using the static data-flow analyses presented in Section 4. The monitor instantiates the model in the current environment by resolving these dependencies immediately before execution.

Figure 10 reports the average reachability measure for each program's execution when monitored using these environment-sensitive models. Model precision improved from 76% (procmail) to 100% (gzip and cat). Both `gzip` and `cat` had average reachability measures of zero, indicating no opportunity for an adversary to undetectably insert a malicious system call at any point in their execution.

# Environment Dependencies
Table 2 lists the environment dependencies identified for each program:

- **procmail**:
  - Program branching depends on the “–d” and “–r” command-line arguments.
  - Filename opened depends on the user’s home directory.
  - Program branching depends on the “–T”, “–u”, and “–n” command-line arguments.
  - Filename created depends on the parameter to the “–T” command-line argument.
  - Filename opened depends on the TMP environment variable.
  - Filename unlinked depends on the TMP environment variable.
  - Arguments to `chown` and `chmod` depend on the filename on the command line.
  - Filename unlinked depends on the filename on the command line.
  - Filename opened depends on the filename on the command line.

- **mailx**:
  - Similar dependencies as `procmail`.

- **gzip** and **cat**:
  - No significant dependencies.

# Performance Overheads
Table 3 shows the execution time overheads due to the model update and more precise enforcement. The overheads are modest: about half a second for short-lived processes like `procmail` and `mailx`, and two seconds for longer-running processes like `cat`. The overheads for `procmail` and `mailx` are high as a percentage of the original runtime due to their short lifetimes and the monitor's fixed cost of pruning unreachable paths. For `cat`, the relative cost is 2.8%.

Environment-sensitive models required 16 KB (2 pages) more memory than a Dyck model with no argument recovery or environment sensitivity.

# Evasion Attacks
Intrusion detection systems that are not environment-sensitive are susceptible to evasion attacks, which mimic correct process execution for some environment but not the current one. To demonstrate the effectiveness of environment sensitivity, we designed an attack against `mailx` that overwrites command-line arguments stored in the process' address space to change the process' execution. The attack exploits a buffer overrun vulnerability in `mailx` when it unsafely copies the string value of the HOME environment variable. The attacker changes the HOME variable to contain the code they wish to inject into `mailx`, following a typical “nop sled + payload + address” pattern.

1. **Nop Sled**: A sequence of nops exceeding the static buffer size, followed by an instruction sequence to obtain the current address on the stack.
2. **Payload**: Rewrites the command-line arguments in memory, altering execution to perform a different operation, such as sending spam and leaking information.
3. **Return Address**: Selected to reenter `getopt` so that the new command-line arguments update appropriate state variables.

The attack perfectly mimicked normal execution for some environment, with one exception caused by the register windows used by the SPARC architecture. Environment-sensitive models can detect these evasion attacks because the monitor resolves environment dependencies before process execution begins, and hence before the attack alters the environment data. In this example, the execution paths that `mailx` followed subsequent to the attack, reading sensitive files and sending email, do not match the expected paths given the command-line input.

# Conclusions
Our new static argument recovery and environment sensitivity significantly reduce attack opportunities. The usefulness of these model-construction techniques is demonstrated in the results, where the models could severely constrain several test programs' execution.

# Acknowledgments
We thank the anonymous reviewers and the members of the WiSA project at Wisconsin for their helpful comments. Jonathon T. Giffin was partially supported by a Cisco Systems Distinguished Graduate Fellowship. Somesh Jha was partially supported by NSF Career grant CNS-0448476. This work was supported in part by Office of Naval Research grant N00014-01-1-0708 and NSF grant CCR-0133629. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes, notwithstanding any copyright notices affixed hereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the above government agencies or the U.S. Government.

# References
1. R. Chinchani, A. Iyer, B. Jayaraman, and S. Upadhyaya. ARCHERR: Runtime environment driven program safety. In 9th European Symposium on Research in Computer Security, Sophia Antipolis, France, Sept. 2004.
2. E. M. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith. Counterexample-guided abstraction refinement. In Computer Aided Verification, Chicago, IL, July 2000.
3. H. Debar, M. Dacier, and A. Wespi. Towards a taxonomy of intrusion-detection systems. Computer Networks, 31:805–822, 1999.
4. J. Esparza, D. Hansel, P. Rossmanith, and S. Schwoon. Efficient algorithms for model checking pushdown systems. In Computer Aided Verification, Chicago, IL, July 2000.
5. H. H. Feng, J. T. Giffin, Y. Huang, S. Jha, W. Lee, and B. P. Miller. Formalizing sensitivity in static analysis for intrusion detection. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2004.
6. H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and W. Gong. Anomaly detection using call stack information. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2003.
7. L. Fix and F. B. Schneider. Reasoning about programs by exploiting the environment. In 21st International Colloquium on Automata, Languages, and Programming, Jerusalem, Israel, July 1994.