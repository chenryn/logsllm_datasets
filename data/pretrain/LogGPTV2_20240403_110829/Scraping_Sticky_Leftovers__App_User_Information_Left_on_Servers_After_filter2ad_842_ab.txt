account deletion; either immediately or after the policy-
speciﬁed retention period.
Our pilot study shows that apps routinely violate these
assumptions, leading to four categories of leftover accounts
issues (in Sections 2.1 to 2.4 we deﬁne these categories from
highest to lowest severity level).
LAI as security and privacy risk. LAI is a serious
violation of user privacy [6] [1] [7]. Leftover accounts could
get hacked, and the data in those accounts could be stolen
or exposed. A server breach, e.g., years later, could expose
information that users forgot they ever even shared.
2.1. No Account Deletion Functionality
Deﬁnition. An app does not provide users a means to delete
their account; thus the user has no control over the private
information that remains on the server side.
Example. Wattpad (wp.wattpad) is a popular app (100M+
installs) for reading or writing stories. However, neither the
app nor the website provide users a ‘Delete Account’ option.
2.2. Leftover Accounts after Deletion
Deﬁnition. An app retains account information on the server
side even after the user deletes the account.
Example. Discord (com.discord) is a popular (50M+ installs)
communication app. First, we signed up for a Discord account
via username/password. Next, we attempted to delete the
account, by clicking the ‘Delete Account’ button. However,
even months after this operation, we could conﬁrm that LAI
still remained on Discord servers.
2.3. Leftover Accounts after Uninstallation
Developers have the technical means to detect when their
app is uninstalled: the uninstall event is available via the
3. Some apps allow third-party sign-in (e.g., Google, Facebook); those apps
are outside the scope of this paper.
Fig. 2: Account Lifecycle.
Google Firebase4 app remove event [24] or third-party li-
braries [12]. User expectations regarding account deletion
upon app uninstall differ, depending on the type of the app. For
“multi-platform services”, such as Netﬂix or Hulu, delivered
via either the browser or mobile app, users may assume that
the account will persist upon app uninstallation. However, for
“mobile-only services”, i.e., services provided exclusively via
the app, a vast majority of users assume that app uninstallation
means the app is abandoned and thus the account
is no
longer needed [8] [21]. Note that mobile app retention rate
is low: 75% of installed apps are abandoned within 90 days,
and eventually uninstalled without being revisited [8] [21],
which leaves users’ information on servers (accounts becom-
ing “zombie accounts”). If the servers are compromised, users’
personal information will be exposed to hackers. Our toolchain
determines whether an app actually deletes the user account
upon app uninstall.
Deﬁnition. An app retains account data on the server after
app uninstallation. If the app does not specify a data retention
period, the data could potentially remain on the server for
unlimited time. In our investigation, while certain apps have
a post-account-deletion retention policy (how long data will
be kept after account deletion), there were no apps with a
post-app-uninstallation retention policy.
2.4. No Account Retention Period
Deﬁnition. An app does not specify for how long the ac-
count (or account data) will be retained on the backend server
after users request account deletion. For example Discord
(com.discord)’s policy speciﬁes that the account will be deleted
“soon” but no ﬁrm period is provided [5].
3. Architecture
To detect and address LAI issues, we designed the toolchain
shown in Figure 3. The toolchain performs a suite of static,
dynamic, and NLP analyses on APK ﬁles, web pages, and
4. Firebase is used by 99% of apps that employ a back-end [14] and 83%
of apps overall – 2.5M out of 3M Google Play apps, as of October 2020 [13],
[17], [22].
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:26 UTC from IEEE Xplore.  Restrictions apply. 
32147
Sign-UpSign-In	and	Use	AppDelete	AccountUse	AccountInstall	AppUninstall	AppPhone	or	app	websiteNetworkBackend	serverAccount	DatabaseApp	ServersAccount	InformationTo account for these aspects, AD analysis consists of
four steps: ﬁnding account deletion strings, mapping strings
to screens, ﬁnding action listeners, and determining account
deletion functionality (ADF); each step is discussed next.
4.1. Finding Account Deletion Strings
Account deletion semantics – a precise approach for ﬁnding
text whose semantics is “Delete Account” – is a major
challenge due to three main reasons.
First, a context-free grammar is required to recognize AD
strings. A less sophisticated approach, such as regular ex-
pressions, would not work. For example, suppose we use the
regular expression “disable.* account” for AD string detection,
and we analyze the string “sorry, online ordering services have
been disabled for this account due to suspicious behavior”.
This string will match the regex, hence the phrase would
incorrectly be deemed an AD string (it
is not). Second,
strings are scattered in hundreds of ﬁles across an app and its
corresponding website, e.g., .xml resources, .smali (for code),
or .html. Third, some strings are embedded in images, which
requires converting the images to text before string analysis.
We ﬁrst perform keyword search to ﬁnd candidate strings,
which can dramatically reduce the number of strings to be han-
dled by the natural language processing algorithm. Example
patterns include “.*delete.*account.*”, “.*close.*account.*”,
“.*cancel.*account.*”, etc.
For strings that match the patterns, we developed a novel,
natural language-based analysis approach to check whether
the strings mean “delete account”; we name such strings AD
strings. The grammar is deﬁned as follows:
ADstring
V erbphrase
::= V erbphrase N ounphrase
::= “delete” | “destroy” |
“close” | “terminate” | “shutof f ” |
“shutdown” | “disable” | . . .
::= “the” | “this”
::= “account” | “registration inf ormation”
::= “your” | “my”
N ounphrase ::= Det N oun | P pr N oun | N oun
Det
N oun
P pr
We use phrase structure trees, generated by NLTK [2], to
reconstruct
the semantic structure [10] of a sentence. For
example (trees shown in the Appendix, Section 13.2), Fitbit’s
“please provide your password in order to delete this account”
is in the language induced by the grammar hence an AD string
(AD verb, N ounphrase subtree whose N oun is an AD noun),
whereas Zomato’s “sorry, online ordering services have been
disabled for this account due to suspicious behavior” does not
conform to the grammar hence is not an AD string (succeeding
subtree of the V erbphrase is a propositional phrase tree as
opposed to N ounphrase).
Tables 2 and 3 show AD strings vs. non-AD strings dis-
cerned by our grammar, which illustrates the difﬁculties and
subtlety of the task, along with our approach’s effectiveness.
4.2. Mapping Strings to Screens
There is a disconnect between strings’ deﬁnition (location)
and use (where exactly, in the GUI, the strings are actually
Fig. 3: Tool Chain Overview.
account history. The AccountDeletionAnalyzer statically analyzes
APKs and web pages to determine whether the app (or its
corresponding website) offers account deletion functionality.
The LeftoverAccountAnalyzer uses dynamic analysis to detect
and verify LAI after account deletion or app uninstall. The
RetentionPeriodAnalyzer uses NLP on APKs and web pages
to extract retention periods. The LeftoverAccountCleaner deletes
accounts left after app uninstall.
4. Account Deletion Analyzer
This analyzer determines whether the app provides account
deletion functionality (either in the app or on the website), e.g.,
via a button or link. Two challenges need to be addressed:
(1) analyzing both the app binary (APK) and the app’s
corresponding website to ﬁnd the GUI button or website link
for account deletion; and (2) mapping the button/link to actual
code, which requires an elaborate static analysis – note that
GUI buttons are deﬁned in the app’s XML resources, whereas
the actual code is deﬁned in the app’s Smali bytecode.
According to our observations: (1) the ‘Delete Account’,
or similar, button/link has text whose semantics is account
deletion and is bound with an action listener that performs
the actual delete operation; and (2) the GUI layout hierarchy
contains text
to explain the consequences or steps of the
account deletion process. We provide two examples of how
websites encode Account Deletion (AD) buttons; a static
HTML button on the left, and JavaScript code on the right:
HTML
1 
2 
” js−delete−account”>
Delete Account
JavaScript
2 
3
4
5
6
7 
”deleteAccountDialog()”>
delete my account
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:26 UTC from IEEE Xplore.  Restrictions apply. 
42148
Retention Period Analyzer•Natural Language Processing AlgorithmNo ADFLAI afterAccount DeletionLAI after UninstallLAI Cleaned upAPK and Web filesUser Account HistoryLeftover Account Analyzer•Automated Sign-up•Automated Account Deletion•Reverse Engineering-based LAI InferenceLeftover Account Cleaner•Leftover Accounts Computation•Automated Account DeletionBackend ServersAccount Deletion Analyzer•Natural Language Processing Algorithm•Strings-screen Mapping Algorithm•Def-use Chain AnalysisADF AppsNo Retention PeriodTABLE 2: AD String Examples.
Phrases
Delete account
Package Name
adidas
com.foap.android We are sorry you want to close your account.
com.airbnb.android Cancel your account?
com.azarlive.android Are you sure you want to delete your ac-
count?
com.bearpty.talklife Do you want to delete your account?
com.clue.android
How do I delete my account?
TABLE 3: Non-AD String Examples.
Package Name Phrases
microsoftword
com.bt.mdd
com.goldstar
To see the Microsoft Certiﬁcation data that’s
linked to this account, and your friends list
will all be deleted.
You are required to be logged in to delete a
book from your account
methods linked to your Fever account
By tapping conﬁrm, your tickets will be
canceled, and your Goldstar account will be
credited the amount above
com.feverup.fever Clicking below will delete all the payment
com.huawei.health Cancel logging in with this account?
com.penzu.android This entry will be deleted from your device
and anywhere else you use to access your
Penzu account
shown to the user). For example, AD strings can be embedded
in app resources (XML ﬁles or images), which cannot be
directly connected to a screen; here by “screen” we mean
app activities (pages), or web pages on the app website. We
address this disconnect challenge via a novel, static analysis-
based approach. We use static analysis as it has several
advantages over dynamic analysis for this setting: since we
do not have to run the app, the analysis is efﬁcient, scalable,
and sound. However, static mapping is challenging, because
we cannot directly map an AD string to a screen, as there are
multiple intermediate mapping steps. Typically, intermediate
steps include mapping strings to name attributes, then UI
controls, then layouts, then top-level layouts, then fragments,
and ﬁnally, activities. Different
intermediate steps involve
different objects, which requires tracking via static analysis.
All potential intermediate mapping steps and objects of an
app form a directed object graph: nodes represents objects
(i.e., strings, name attributes, UI controls, images, layouts, top-
level layouts, fragments, activities, and HTML ﬁles), while
edges represent intermediate mapping steps. We thus reduce
the problem of mapping an AD string to a screen to ﬁnding
a path from the string to the screen in the graph. As there
are thousands of objects in a decompiled app and millions
of potential intermediate mapping steps among these objects,
ﬁnding a path from a string to a screen in this graph is
inefﬁcient. To reduce intermediate mapping steps and improve
objT ype ← Str
screenSet ←DEPTHFIRSTMAP(adString, objT ype)
return screenSet
Algorithm 1 Mapping AD String to Screen
Input: ADString
1: procedure MAPPINGSTRINGTOSCREEN(adString)
2:
3:
4:
5: end procedure
6:
7: procedure DEPTHFIRSTMAP(obji, typei)
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end procedure
objT ypeSet ←GETMAPPINGOBJECTTYPES(typei)
for each typej in objT ypeSet do
objSet ←FINDMAPPINGOBJECTS(obji, typej)
for each objj in objSet do
end for
return screenSet
if objj is activity or HTML ﬁle then
screenSet ← screenSet + objj
screenSet ← DEPTHFIRSTMAP(objj, typej)
else
end if
end for
performance, we instead enumerate legal/feasible intermediate
mapping steps:
Strings (cid:97) (U IControls | N ameAttributes | Images
| HtmlF iles)
N ameAttributes (cid:97) (U IControls | Layouts | F ragments
| Activities)
U IControls (cid:97) Layouts
Layouts (cid:97) T opLevelLayouts
T opLevelLayouts (cid:97) (F ragments | Activities)
F ragments (cid:97) Activities
Images (cid:97) (U IControls | HtmlF iles)
Activities (cid:97) φ
HtmlF iles (cid:97) φ
There are 15 types of possible intermediate mapping steps
(i.e., containing relationships), denoted as ‘(cid:97)’. For example,
“Strings (cid:97) UIControls” indicates that strings can be contained
by UIControls. Activities and HTML ﬁles are screens and
thus not contained by any objects. With these 15 possible
intermediate mapping steps, we design a depth-ﬁrst algorithm
to map an AD string to screens (Algorithm 1). The function
GETMAPPINGOBJECTTYPES uses the mapping table above
to determine the object types that can contain the given object
type. This can avoid searching a large volume of objects with
other object types, thus improving performance. The function
FINDMAPPINGOBJECTS gathers all objects that contain the
given object. Once the mapping procedure reaches a screen,
i.e., activity or HTML ﬁle, we have determined that the screen
contains the string.
Figure 4 uses the Line app as a complete example to
illustrate the intermediate mapping steps from AD strings to
screens. The app has 3 AD strings (Adstr) on the top of
the graph. These AD strings are mapped to their respective
string name attributes (Nattr). The attributes are used in two
layouts (Lay), contained in one top-level layout (Toplay). The
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:00:26 UTC from IEEE Xplore.  Restrictions apply. 
52149
1 
conclude
Hence we
that AD button settings delete
account conﬁrm is linked to AD code onClickListener. Note
that, as the button id deﬁnition resides in the public.xml
conﬁguration ﬁle, extending the def-use chain analysis beyond
bytecode was a key enabler for our approach.
4.4. Determining ADF
ADF is determined by two conditions: (1) a layout as-
sociated with an action listener shows text with account
deletion semantics; and (2) on the same screen, there are
other GUI components containing text with account deletion