the number of payload messages that are processed by
a single mix node versus the overall sending rate λ of a
single user. We observe that the bandwidth of the mix
node increases linearly until it reaches around 225 mes-
sages per second. After that point the performance of
the mix node stabilizes and we observe a much smaller
growth. We highlight that the amount of real trafﬁc in the
network depends on the parameter λP within λ . A client
may chose to tune up the rate of real messages sent, by
tuning down the rate of loops and drop messages – at
the potential loss of security in case less cover trafﬁc is
present in the system overall. Thus, depending on the
size of the honest user population in Loopix, we can in-
crease the rate of goodput.
Latency Overhead & Scalability. End-to-end latency
overhead is the cost of routing and decoding relayed mes-
sages, without any additional artiﬁcial delays. We run
1210    26th USENIX Security Symposium
USENIX Association
Figure 10: Latency overhead of the system where 50 to 500
users simultaneously send trafﬁc at rates λP = λL = λD = 10
per minute and mix nodes generate loop cover trafﬁc at rate
λM = 10 per minute. We assume that there is not additional
delay added to the messages by the senders.
simulations to measure its sensitivity to the number of
users participating in the system.
We measure the time needed to process a single packet
by a mix node, which is approximately 0.6ms. This cost
is dominated by the scalar multiplication of an elliptic
curve point and symmetric cryptographic operations. For
the end-to-end measurement, we run Loopix with a setup
where all users have the same rates of sending real and
cover messages, such that λP = λD = λL = 10 messages
per minute and mix servers generate loops at rate λM =
10 messages per minute. All clients set a delay of 0.0
seconds for all the hops of their messages – to ensure
we only measure the system overhead, not the artiﬁcial
mixing delay.
Figure 10 shows that increasing the number of online
clients, from 50 to 500, raises the latency overhead by
only 0.37ms. The variance of the processing delay in-
creases with the amount of trafﬁc in the network, but
more clients do not signiﬁcantly inﬂuence the average
latency overhead. Neither the computational power of
clients nor mix servers nor the communication between
them seem to become bottlenecks for these rates. Those
results show that the increasing number of users in the
network does not lead to any bottleneck for our parame-
ters. The measurements presented here are for a network
of 6 mix nodes, however we can increase the system ca-
pacity by adding more servers. Thus, Loopix scales well
for an increasing number of users.
We also investigate how increasing the delays through
Poisson Mixing with µ = 2 affects the end-to-end la-
tency of messages. We measure this latency through tim-
ing mix heartbeat messages traversing the system. Fig-
ure 11 illustrates that when the mean delay 1/µ sec. is
higher than the processing time (∼ 1ms− 2ms), the end-
to-end latency is determined by this delay, and follows
the Gamma distribution with parameter being the sum of
the exponential distribution parameter over the number
of servers on the path. The good ﬁt to a gamma distribu-
Figure 11: End-to-end latency histogram measured through
timing mix node loops. We run 500 users actively commu-
nicating via Loopix at rates λP = λL = λD = 60 per minute and
λM = 60 per minute. The delay for each hop is drawn from
Exp(2). The latency of the message is determined by the as-
signed delay and ﬁts the Gamma distribution with mean 1.93
and standard deviation 0.87.
tion provides evidence that the implementation of Loopix
is faithful to the queuing theory models our analysis as-
sumes.
6 Related Work
All anonymous communication designs share the com-
mon goal of hiding users’ communication patterns
from adversaries. Simultaneously minimizing latency
and communication overhead while still providing high
anonymity is challenging. We survey other anonymous
systems and compare them with Loopix (a summary is
provided in Table 3).
Early designs. Designs based on Chaum’s mixes [8]
can support both high and low latency communication;
all sharing the basic principles of mixing and layered
encryption. Mixmaster [35] supports sender anonymity
using messages encryption but does not ensure receiver
anonymity. Mixminion [15] uses ﬁxed sized messages
and supports anonymous replies and ensures forward
anonymity using link encryption between nodes. As a
defense against trafﬁc analysis, but at the cost of high-
latencies, both designs delay incoming messages by col-
lecting them in a pool that is ﬂushed every t seconds (if
a ﬁxed message threshold is reached).
In contrast, Onion routing [26] was developed for low-
latency anonymous communication. Similar to mix de-
signs, each packet is encrypted in layers, and is decrypted
by a chain of authorized onion routers. Tor [20], the
most popular low-latency anonymity system, is an over-
lay network of onion routers. Tor protects against sender-
receiver message linking against a partially global adver-
sary and ensures perfect forward secrecy, integrity of the
USENIX Association
26th USENIX Security Symposium    1211
messages, and congestion control. However, Tor is vul-
nerable to trafﬁc analysis attacks, if an adversary can ob-
serve the ingress and egress points of the network. A
great number of works have studied how mix networks
and onion routing leak information, and how better de-
sign such systems [36, 38, 44, 48].
Recent designs. Vuvuzela [46] protects against both
passive and active adversaries as long as there is one
honest mix node. Since Vuvuzela operates in rounds, of-
ﬂine users lose the ability to receive messages and all
messages must traverse a single chain of relay servers.
Loopix does not operate in rounds, thus the end-to-end
latency can be signiﬁcantly smaller than in Vuvuzela,
depending on the delay parameter the senders choose.
Moreover, Loopix allows off-line users to receive mes-
sages and uses parallel mix nodes to improve the scala-
bility of the network.
Stadium [45] and AnonPop [24] reﬁne Vuvuzela; both
operating in rounds making the routing of messages de-
pendent on the dynamics of others. Stadium is scalable,
but it lacks ofﬂine storage, whereas AnonPop does pro-
vide ofﬂine message storage. Loopix also provides both
properties, and because it operates continuously avoids
user synchronization issues. Additionally, Loopix, in
comparison to AnonPop, protects against active attacks.
Riposte [11] is based on a write PIR scheme in which
users write their messages into a database, without re-
vealing the row into which they wrote to the database
server. Riposte enjoys low communication-overhead and
protects against trafﬁc analysis and denial of service at-
tacks, but requires long epochs and a small number of
clients writing into the database simultaneously. In con-
trast to Loopix, it is suitable for high-latency applica-
tions.
Dissent [9], based on DC-networks [9], offers re-
silience against a GPA and some active attacks, but at sig-
niﬁcantly higher delays and scales to only several thou-
sand clients.
Rifﬂe [31] introduces a new veriﬁable shufﬂe tech-
nique to achieve sender anonymity. Using PIR, Rif-
ﬂe guarantees receiver anonymity in the presence of an
active adversary, as well as both sender and receiver
anonymity, but it cannot support a large user base. Rifﬂe
also utilizes rounds protect trafﬁc analysis attacks. Rifﬂe
is not designed for Internet-scale anonymous communi-
cation, like Loopix, but for supporting intra-group com-
munication.
Finally, Atom [30] combines a number of novel tech-
niques to provide mid-latency communication, strong
protection against passive adversaries and uses zero
knowledge proofs between servers to resist active at-
tacks. Performance scales horizontally, however latency
comparisons between Loopix and Atom are difﬁcult due
to the dependence on pre-computation in Atom. Un-
like Loopix, Atom is designed for latency tolerant uni-
directional anonymous communication applications with
only sender anonymity in mind.
7 Discussion & Future Work
As shown in Section 4.1, the security of Loopix heavily
depends on the ratio of the rate of trafﬁc sent through the
network and the mean delay at every mix node. Opti-
mization of this ratio is application dependent. For ap-
plications with small number of messages and delay tol-
erance, a small amount of cover trafﬁc can guarantee se-
curity.
Loopix achieves its stated security and performance
goals. However, there are many other facets of the design
space that have been left for future work. For instance,
reliable message delivery, session management, and ﬂow
control while avoiding inherent risks, such as statistical
disclosure attacks [14], are all fruitful avenues of pursuit.
We also leave the analysis of replies to messages as
future work. Loopix currently allows two methods if
the receiver does not already know the sender a priori:
we either attach the address of the sender to each mes-
sage payload, or provide a single-use anonymous reply
block [15, 16], which enables different use-cases.
The Loopix architecture deliberately relies on estab-
lished providers to connect to and authenticate end-users.
This architecture brings a number of potential beneﬁts,
such as resistance to Sybil attacks, enabling anonymous
blacklisting [27] and payment gateways [2] to mitigate
ﬂooding attacks and other abuses of the system, and pri-
vacy preserving measurements [23, 28] about client and
network trends and the security stance of the system. All
of this analysis is left for future work.
It is also apparent that an efﬁcient and secure pri-
vate lookup system, one that can deliver network state
and keying information to its users, is necessary to sup-
port modern anonymous communications. Proposals
of stand-alone ‘presence’ systems such as DP5 [6] and
MP3 [37] provide efﬁcient lookup methods, however,
we anticipate that tight integration between the lookup
and anonymity systems may bring mutual performance
and security beneﬁts, which is another avenue for future
work.
8 Conclusion
The Loopix mix system explores the design space fron-
tiers of low-latency mixing. We balance cover trafﬁc
and message delays to achieve a tunable trade-off be-
tween real trafﬁc and cover trafﬁc, and between latency
and good anonymity. Low-latency incentivizes early
adopters to use the system, as they beneﬁt from good
1212    26th USENIX Security Symposium
USENIX Association
Low
Latency
(cid:88)
(cid:88)
(cid:88)
Loopix
Dissent [47]
Vuvuzela [46]
Stadium [45]
Riposte [11]
Atom [30]
Rifﬂe [31]
AnonPoP [24]
Tor [20]
Low Communication
Overhead
Scalable
Asynchronous
Deployment Messaging†
Active
Attack Resistant
Ofﬂine
Storage*
Resistance
to GPA
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 3: Comparison of popular anonymous communication systems. By *, we mean if the design intentionally incorporates
provisions for delivery of messages when a user is ofﬂine, perhaps for a long period of time. By †, we mean that the system
operates continuously and does not depend on synchronized rounds for its security properties and users do not need to coordinate
to communicate together.
performance. Moreover, the cover trafﬁc introduced by
both clients and mix servers provides security in the pres-
ence of a smaller user-base size. In turn this promotes
growth in the user-base leading on one hand to greater
security [19], and on the other a tuning down of cover
trafﬁc over time.
Loopix is the ﬁrst system to combine a number of
best-of-breed techniques: we provide deﬁnitions inspired
by AnoA [3] for our security properties; improve the
analysis of simpliﬁed variants of stop-and-go-mixing
as a Poisson mix [29]; we use restricted topologies
to promote good mixing [21]; we deploy modern ac-
tive attack mitigations based on loops [17]; and we use
modiﬁed modern cryptographic packet formats, such as
Sphinx [16], for low information leakage. Our design,
security and performance analysis, and empirical eval-
uation shows they work well together to provide strong
security guarantees.
The result of composing these different techniques –
previously explored as separate and abstract design op-
tions – is a design that is strong against global net-
work level adversaries without the very high-latencies
traditionally associated with mix systems [35, 15].
Thus, Loopix revitalizes message-based mix systems and
makes them competitive once more against onion rout-
ing [26] based solutions that have dominated the ﬁeld
of anonymity research since Tor [20] was proposed in
2004.
Acknowledgments
In memory of Len Sassaman. We
thank Claudia Diaz and Mary Maller for the helpful dis-
cussions. This work was supported by NSERC through
a Postdoctoral Fellowship Award, the Research Coun-
cil KU Leuven: C16/15/058, the European Commis-
sion through H2020-DS-2014-653497 PANORAMIX,
the EPSRC Grant EP/M013-286/1, and the UK Govern-
ment Communications Headquarters (GCHQ), as part of
University College London’s status as a recognised Aca-
demic Centre of Excellence in Cyber Security Research.
References
[1] ANDERSON, R., AND BIHAM, E. Two practical and provably
secure block ciphers: Bear and lion. In Fast Software Encryption
(1996), Springer, pp. 113–120.