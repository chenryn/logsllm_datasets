guage, have signiﬁcant difference from desktop Java software.
For example, Android apps depend more heavily on event-driven
mechanisms and the underlying execution environment to work
correctly. Unlike legacy Java applications that have a single entry
point named main, Android apps in general have multiple entry
points.
2.4 Solution Overview
To overcome these challenges, we introduce an entity named
manifest app, which is a companion app for a target app under
protection. Basically, the manifest app encapsulates a sequence
of input event to drive the watermark-protected app automatically,
and thus eliminates the user intervention needed in traditional
watermark extraction. Based on the manifest app, we design
and implement a practical tool named AppInk to automatically
generate the manifest app, embed the watermark, and execute the
dynamic watermark extraction with zero user intervention. As an
input during watermark embedding, the manifest app encodes the
event sequences and accordingly indicates the event handlers of
the target app where watermarking code segments can be inserted,
which addresses the ﬁrst challenge. As an input for watermark
extracting, the manifest app automatically launches the original
app and feeds the input event sequences to it, which triggers all
the inserted watermarking code segments and thus recovers the
watermark object embedded. By doing so, we effectively overcome
the second challenge. Based on the insight that each event in
Android platform is uniquely mapped to a well-known system API,
we propose a conservative method to automatically generate an
event ﬂow model for Android app, and leverage model-based test
generation to automatically create a suboptimal manifest app for
watermarking purpose, thus resolving the third challenge.
3. APPINK DESIGN
Figure 1 depicts the overall AppInk architecture. At the app
developer (left) side, AppInk consists of three components: man-
ifest app generation, watermark code generation, and watermark
embedding based on source code instrumentation. The input of
the manifest app generation component is the source code of the
target app including its resource ﬁles. The watermark code gen-
eration takes a watermark object (e.g., a number or a string) and
outputs watermarking code segments. The watermark embedding
component takes the manifest app and the code segments as inputs,
and generates a watermarked Android package that can be released
to app markets. At the arbitrator (right) side,
the watermark
recognizer takes the inputs of the released Android package and
the manifest app from the app developer side, and extracts the
embedded watermark.
Watermarking code generation: Given a watermark value spec-
iﬁed by app developer, this component encodes the watermark
value into a special graph structure and transforms the graph into
watermarking code.
In order to improve the stealthiness of the
embedded watermark, AppInk splits the watermarking code into
a variety of segments, each of which will be inserted into different
locations of the original app’s source code. The execution states of
these code segments collaboratively present speciﬁc object refer-
ence relationships and thus can be leveraged to reveal the original
watermark value. Section 3.1 explains the detailed design of this
component.
Manifest app generation: The main function of the manifest app
is to feed pre-determined user inputs to the app under review, which
trigger the executions of embedded code segments and thus recover
App Developer’s Side
Arbitrator’s Side
App Sources
& Resources
Manifest App
Generation
Manifest App
Watermark Embedder
Watermark
Value
Watermarking
Code Generation
Source Code
Instrumentation
Released
App
Watermark
Recognizer
Watermark
Value
Figure 1: The overall AppInk architecture.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
the watermark value with the help of the watermark recognizer. To
ease the burden of writing manifest apps by developers, AppInk
leverages the event-driven nature of Android apps and the latest
model-based test case generation to automatically generate these
input events and makes this process totally transparent to app devel-
opers. Section 3.2 presents the detailed design of this component.
Source code instrumentation: By parsing the ﬁles in the manifest
app, this component ﬁrst identiﬁes encoded user input events, and
then determines their corresponding event handlers based on the
source code of the original app. Next, it inserts the watermark
code segments under the path of these identiﬁed event handlers.
After that, AppInk packages the modiﬁed app source into a released
app, which is for both public publication and arbitrating purposes,
and the manifest app into another executable package, which is
not released to the public but rather dedicated to arbitrator use.
Section 3.3 presents the detailed design of this process.
Watermark recognizer: This component is a modiﬁed Android
emulator on x86 [19], which is invoked by a shell script. The
script ﬁrst installs both the Android app and the manifest app in
the emulator, then starts the manifest app which feeds a sequence
of input events to the Android app, and then calls the extended
Dalvik Virtual Machine (DVM) [10] to export all object reference
information in the runtime heap. From this information, AppInk
uses a special pattern to match potential watermarking structure.
If such a watermarking structure is identiﬁed, a reversed process
of the watermarking code generation is invoked to recover the
embedded watermark value. Section 3.4 illustrates the design of
this component.
3.1 Watermarking Code Generation
Different from static watermarking which embeds a secret wa-
termark object (e.g., a numerical value or a message string) into the
code or data section of a target application, dynamic watermarking
embeds a watermark object into special structures that present
themselves only in the runtime of the target application. AppInk
adopts graph-based data structure, which is hard to be reversed
by attackers due to the inherent difﬁculty of analyzing point-to
relationship in graphs [14, 45].
There are different ways to use graph to encode a watermark
object. AppInk uses permutation graph, which adopts a special
graph structure to encode a permutation mapping to the watermark
object. As depicted in Figure 2, the graph includes 5 nodes, each of
which has two outgoing edges, one in solid line and one in dotted
line. Through the solid line edges, the graph forms a cycle.
If
we can further identify one unique node (e.g., the one which is
referenced by any other object outside the ﬁgure), a speciﬁc order
is deﬁned. Suppose that only the ﬁrst node is referenced by another
object not in the ﬁgure, we can assign number 0 to this node, which
2
1
0
1
4
4
2
0
3
3
Figure 2: Example permutation graph.
numerical value of 116 as a watermark.
This graph encodes
class WatermarkNode {
WatermarkNode solid;
WatermarkNode dotted;
......
}
......
node0 = new WatermarkNode();
......
node4 = new WatermarkNode();
node0.solid
= node1;
node0.dotted = node1;
......
node4.solid
= node0;
node4.dotted = node3;
// Points to next node
// Encode number 1
// Encode number 4
Figure 3: Watermarking code for the permutation graph in Figure 2.
is called root node, and number 1 to 4 for the other four along
the circle. A dotted line edge of a node is then associated with
a number counting the distance from this node to its target node
along the solid line edges. For example, the dotted outgoing edge
from node0 to node1 encodes a number of 1 since the distance
from node0 to node1 is 1 along the solid line edges. Similarly
the dotted outgoing edge from node3 to node1 encodes a number
of 3. In Figure 2, the 5 dotted edges encodes the numbers of 1, 2,
0, 3, and 4 respectively, which is a perfect form of permutation.
According to the permutation-to-number algorithm in [28],  is mapped to 116, which is the watermark value
encoded by this graph.
In Java language, the permutation graph depicted in Figure 2 can
be represented by a doubly linked list, as shown by the skeleton
code in Figure 3. The class WatermakrNode (lines 1 to 5)
represents the node in the permutation graph. The following
initialization code (lines 7 to 9) creates ﬁve instance nodes, and the
later code (lines 11 to 15) deﬁnes the object reference relationship,
from which we can reconstruct the permutation graph at runtime.
As commented in the list, the member ﬁeld solid points to the
next node in the list, and all these ﬁelds form a cycle. The member
1
2
3
4
5
6
7
8
9
10
public class TestAndroidCalculator
extends ActivityInstrumentationTestCase2 {
protected void setUp() { ... }
protected void tearDown() { ... }
public void testEventSequence() {
enterText(0, "10");
enterText(1, "20");
clickOnButton("Multiply");
}
}
Figure 4: Example manifest app based on Robotium.
ﬁeld dotted encodes the permutation distance for each node in
the permutation graph, which jointly encodes the watermark value
speciﬁed by the app developer.
lines 11 to 15,
lines 7 to 9. At
When the above code is executed on Android platform, memory
space will be allocated for each instance object (node0 to node4)
at
the member ﬁelds are
assigned, which results in the establishment of the object reference
relationship among these WatermarkNode instances. Through
analyzing the runtime heap, this object reference relationship can
be extracted and decoded to recover the original watermark value.
Section 3.4 presents the details of this process in the watermark
recognizer.
Because linked structures are very commonly used in Java
applications, it is hard to distinguish these watermarking code from
other code. The stealthy nature of these graph structures, combined
with the inherent difﬁculty of point-to analysis in graph [14, 45],
makes it very challenging for attackers to succeed in reverse
engineering the watermarked code. (More detailed analysis on the
robustness of this technique is presented in Section 5.1.) To further
improve the stealthiness of the watermarking code, AppInk splits
the watermarking code into a number of segments and inserts them
into a variety of places in an app. This is especially helpful when
the watermark value is large and thus has to be represented by a
large number of code segments. Section 3.3 presents more details
of this technique with the help of manifest app.
3.2 Manifest App Generation
3.2.1 Manifest App Based on Robotium
Working as a companion app to drive the execution of a
released app inside watermark recognizer, a manifest app functions
in similar way as test cases. However, unlike common unit
tests which only provide component speciﬁc tests [21] and
special Android UI/application exerciser [22] which sends random
stream of events to apps under test, a manifest app needs
programmable event delivery within the entire target app, so
that watermarking code can be scattered to different places, thus
achieving better stealthiness. For this purpose, AppInk generates
manifest app based on Robotium [46], which extends Android
app instrumentation framework and provides precise UI element
locations and event delivery. Figure 4 shows an example of the
Robotium test case.
In Figure 4, the method setUp starts the main activity of the app
under test, tearDown clears the execution environment and stops
its execution, and testEventSequence (lines 5 to 9) sends
speciﬁc sequence of events to the app. To automatically generate
manifest app and later extract watermark by the recognizer,
AppInk needs to decide a proper input sequence and ﬁll them
into the method testEventSequence. Speciﬁcally, AppInk
has two requirements for the input sequence: its execution must
deterministically trigger the watermarking code segments, and it
must be diversiﬁed enough so that the watermarking code can be
scattered into a large enough scope. AppInk leverages the event-
driven nature of Android apps and model-based automatic test case
generation to achieve these purposes.
3.2.2 Manifest App Generation
Different from desktop applications, the control ﬂow of Android
apps depends heavily on the diversiﬁed Android events, including
user generated events (e.g., key presses and screen taps) and system
generated events (e.g., short messages received, incoming phone
calls, and various sensor events). Each event is handled by a well-
deﬁned Android API. For example, a menu item click is handled by
the method onOptionsItemSelected in the corresponding
activity, a button press is handled by the onClick method of
the listener object registered for the button, and a short message