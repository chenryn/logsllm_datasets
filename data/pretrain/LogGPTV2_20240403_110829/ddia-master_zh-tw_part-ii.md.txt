# 第二部分：分散式资料
> 一个成功的技术，现实的优先顺序必须高于公关，你可以糊弄别人，但糊弄不了自然规律。
>
> —— 罗杰斯委员会报告（1986）
>
-------
在本书的 [第一部分](part-i.md) 中，我们讨论了资料系统的各个方面，但仅限于资料储存在单台机器上的情况。现在我们到了 [第二部分](part-ii.md)，进入更高的层次，并提出一个问题：如果 **多台机器** 参与资料的储存和检索，会发生什么？
你可能会出于各种各样的原因，希望将资料库分布到多台机器上：
* 可伸缩性
  如果你的资料量、读取负载、写入负载超出单台机器的处理能力，可以将负载分散到多台计算机上。
* 容错 / 高可用性
  如果你的应用需要在单台机器（或多台机器，网路或整个资料中心）出现故障的情况下仍然能继续工作，则可使用多台机器，以提供冗余。一台故障时，另一台可以接管。
* 延迟
  如果在世界各地都有使用者，你也许会考虑在全球范围部署多个伺服器，从而每个使用者可以从地理上最近的资料中心获取服务，避免了等待网路资料包穿越半个世界。
## 伸缩至更高的载荷
如果你需要的只是伸缩至更高的 **载荷（load）**，最简单的方法就是购买更强大的机器（有时称为 **垂直伸缩**，即 vertical scaling，或 **向上伸缩**，即 scale up）。许多处理器，记忆体和磁碟可以在同一个作业系统下相互连线，快速的相互连线允许任意处理器访问记忆体或磁碟的任意部分。在这种 **共享记忆体架构（shared-memory architecture）** 中，所有的元件都可以看作一台单独的机器 [^i]。
[^i]: 在大型机中，尽管任意处理器都可以访问记忆体的任意部分，但总有一些记忆体区域与一些处理器更接近（称为 **非均匀记忆体访问（nonuniform memory access, NUMA）**【1】）。为了有效利用这种架构特性，需要对处理进行细分，以便每个处理器主要访问临近的记忆体，这意味著即使表面上看起来只有一台机器在执行，**分割槽（partitioning）** 仍然是必要的。
共享记忆体方法的问题在于，成本增长速度快于线性增长：一台有著双倍处理器数量，双倍记忆体大小，双倍磁碟容量的机器，通常成本会远远超过原来的两倍。而且可能因为存在瓶颈，并不足以处理双倍的载荷。
共享记忆体架构可以提供有限的容错能力，高阶机器可以使用热插拔的元件（不关机更换磁碟，记忆体模组，甚至处理器）—— 但它必然囿于单个地理位置的桎梏。
另一种方法是 **共享磁碟架构（shared-disk architecture）**，它使用多台具有独立处理器和记忆体的机器，但将资料储存在机器之间共享的磁碟阵列上，这些磁碟透过快速网路连线 [^ii]。这种架构用于某些资料仓库，但竞争和锁定的开销限制了共享磁碟方法的可伸缩性【2】。
[^ii]: 网路附属储存（Network Attached Storage, NAS），或 **储存区网路（Storage Area Network, SAN）**
### 无共享架构
相比之下，**无共享架构**【3】（shared-nothing architecture，有时被称为 **水平伸缩**，即 horizontal scaling，或 **向外伸缩**，即 scaling out）已经相当普及。在这种架构中，执行资料库软体的每台机器 / 虚拟机器都称为 **节点（node）**。每个节点只使用各自的处理器，记忆体和磁碟。节点之间的任何协调，都是在软体层面使用传统网路实现的。
无共享系统不需要使用特殊的硬体，所以你可以用任意机器 —— 比如价效比最好的机器。你也许可以跨多个地理区域分布资料从而减少使用者延迟，或者在损失一整个资料中心的情况下幸免于难。随著云端虚拟机器部署的出现，即使是小公司，现在无需 Google 级别的运维，也可以实现异地分散式架构。
在这一部分里，我们将重点放在无共享架构上。它不见得是所有场景的最佳选择，但它是最需要你谨慎从事的架构。如果你的资料分布在多个节点上，你需要意识到这样一个分散式系统中约束和权衡 —— 资料库并不能魔术般地把这些东西隐藏起来。
虽然分散式无共享架构有许多优点，但它通常也会给应用带来额外的复杂度，有时也会限制你可用资料模型的表达力。在某些情况下，一个简单的单执行绪程式可以比一个拥有超过 100 个 CPU 核的丛集表现得更好【4】。另一方面，无共享系统可以非常强大。接下来的几章，将详细讨论分散式资料会带来的问题。
### 复制 vs 分割槽
资料分布在多个节点上有两种常见的方式：
* 复制（Replication）
  在几个不同的节点上储存资料的相同副本，可能放在不同的位置。复制提供了冗余：如果一些节点不可用，剩余的节点仍然可以提供资料服务。复制也有助于改善效能。[第五章](ch5.md) 将讨论复制。
* 分割槽 (Partitioning)
  将一个大型资料库拆分成较小的子集（称为 **分割槽**，即 partitions），从而不同的分割槽可以指派给不同的 **节点**（nodes，亦称 **分片**，即 sharding）。[第六章](ch6.md) 将讨论分割槽。
复制和分割槽是不同的机制，但它们经常同时使用。如 [图 II-1](../img/figii-1.png) 所示。
![](../img/figii-1.png)
**图 II-1 一个数据库切分为两个分割槽，每个分割槽都有两个副本**
理解了这些概念，就可以开始讨论在分散式系统中需要做出的困难抉择。[第七章](ch7.md) 将讨论 **事务（Transaction）**，这对于了解资料系统中可能出现的各种问题，以及我们可以做些什么很有帮助。[第八章](ch8.md) 和 [第九章](ch9.md) 将讨论分散式系统的根本局限性。
在本书的 [第三部分](part-iii.md) 中，将讨论如何将多个（可能是分散式的）资料储存整合为一个更大的系统，以满足复杂的应用需求。但首先，我们来聊聊分散式的资料。
## 索引
5. [复制](ch5.md)
6. [分割槽](ch6.md)
7. [事务](ch7.md)
8. [分散式系统的麻烦](ch8.md)
9. [一致性与共识](ch9.md)
## 参考文献
1. Ulrich Drepper: “[What Every Programmer Should Know About Memory](https://people.freebsd.org/~lstewart/articles/cpumemory.pdf),” akka‐dia.org, November 21, 2007.
1. Ben Stopford: “[Shared Nothing vs. Shared Disk Architectures: An Independent View](http://www.benstopford.com/2009/11/24/understanding-the-shared-nothing-architecture/),” benstopford.com, November 24, 2009.
1. Michael Stonebraker: “[The Case for Shared Nothing](http://db.cs.berkeley.edu/papers/hpts85-nothing.pdf),” IEEE Database EngineeringBulletin, volume 9, number 1, pages 4–9, March 1986.
1. Frank McSherry, Michael Isard, and Derek G. Murray: “[Scalability! But at What COST?](http://www.frankmcsherry.org/assets/COST.pdf),” at 15th USENIX Workshop on Hot Topics in Operating Systems (HotOS),May 2015.
------
| 上一章                       | 目录                            | 下一章                 |
| ---------------------------- | ------------------------------- | ---------------------- |
| [第四章：编码与演化](ch4.md) | [设计资料密集型应用](README.md) | [第五章：复制](ch5.md) |