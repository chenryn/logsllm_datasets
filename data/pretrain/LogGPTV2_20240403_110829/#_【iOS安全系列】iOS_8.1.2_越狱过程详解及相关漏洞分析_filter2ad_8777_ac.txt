# iOS 越狱技术分析与漏洞利用

## 一、设备上 /Developer 目录的内容
在对 DDI（Direct Driver Interface）的利用完成后，我们向系统添加了一些服务。如果这些服务使用的是系统自带的程序，则可以直接调用；如果使用的是自定义程序，则需要绕过代码签名。

### 目录内容
- `/Developer/bin/ppunmount`

### 图表
- **图4**: `com.apple.remove_amfi.plist`
- **图5**: `com.apple.ppinstall.plist`

## 二、绕过代码签名
完成上述步骤后，我们可以通过绕过代码签名以 root 权限在用户空间执行任意代码。接下来，我们将详细介绍如何绕过代码签名。

### 相关漏洞
- **CVE-2014-4455**
  - **影响范围**: iPhone 4s 及更高版本, iPod touch (第5代) 及更高版本, iPad 2 及更高版本
  - **影响**: 本地用户可能能够执行未签名的代码
  - **描述**: 在处理具有重叠段的 Mach-O 可执行文件时存在状态管理问题。通过改进段大小验证解决了该问题。
  - **修复版本**: iOS 8.1.3
  - **发现者**: TaiG Jailbreak Team

### 技术手段
这里使用的绕过代码签名的技术与之前的越狱工具类似，但利用了不同的漏洞。主要技术是 dylib 函数重导出技术，使得 `libmiss.dylib` 变成一个纯数据的 dylib，在执行期间发生缺页异常时不会触发内核对内存页的代码签名验证。

### 具体步骤
1. 解析要利用其签名信息的 MachO 文件（如 `afcd`），从中导出签名数据并保存。
2. 使用 `codesign_allocate` 为 `libmiss.dylib` 申请签名空间：
   ```sh
   codesign_allocate -i libmis.dylib -a arm64 128 -o libmis2.dylib
   ```
3. 对 `libmiss.dylib` 进行畸形化处理。
4. 使用二进制编辑工具将预留的签名数据空间替换为第一步导出的签名数据。

## 三、用户空间 root 执行任意代码
至此，我们已经制作了畸形化的 `libmiss.dylib`，只要 `amfid` 加载了这个 dylib，就相当于绕过了代码签名。以下是越狱工具执行的服务顺序：

1. 调用 `com.apple.mount_cache_1~8.plist` 中的服务，挂载 `/dev/disk1s3` 到 `/System/Library/Caches`，使系统中存在 `enable-dylibs-to-override-cache`，从而可以用磁盘中的 `libmiss.dylib` 覆盖 dylib 缓存中的文件。
2. 调用 `com.apple.mount_lib_1~8.plist` 中的服务，挂载 `/dev/disk1s2` 到 `/usr/lib`，使 `libmiss.dylib` 存在于文件系统中。
3. 调用 `com.apple.remove_amfi.plist` 中的服务，停止 `amfid`。
4. 调用 `com.apple.load_amfi.plist` 中的服务，重启 `amfid` 服务。由于 `enable-dylibs-to-override-cache` 的存在，`/usr/lib` 中的畸形 `libmiss.dylib` 会被加载，代码签名函数被重导出，对于代码签名请求总会返回 0，表示签名有效。
5. 调用 `com.apple.ppinstall.plist` 中的服务，以 root 权限运行 `untether`，重新挂载根分区到可写状态，将 `/var/mobile/Media` 中的 Payload 拷贝到系统的相应目录中，然后攻击内核，修补文章开始提到的安全特性。
6. 调用 `com.apple.umount_cache.plist` 中的服务，还原 `/System/Library/Caches` 目录到磁盘上的状态。
7. 调用 `com.apple.umount_lib.plist` 中的服务，还原 `/usr/lib` 目录到磁盘上的状态。

## 四、持久化（完美越狱）
所谓完美越狱是指设备重启后可以自动运行 `untether`，这样就需要把 `untether` 做成开机自动启动的服务。自启动服务存放在 `/System/Library/LaunchDaemons/` 中，每个服务都是使用 plist 配置。从 iOS 7 开始，自启动服务的 plist 还需要嵌入到 `libxpc.dylib` 中，苹果希望通过代码签名技术防止恶意程序修改自启动服务。

### 系统读取 libxpc.dylib 中 plist 数据的过程
1. 使用 `dlopen` 加载 `libxpc.dylib`。
2. 调用 `dlsym` 判断是否存在导出符号 `__xpcd_cache`。
3. 调用 `dladdr` 获取 `__xpcd_cache` 符号的地址。
4. 调用 `getsectiondata` 获取包含 `__xpcd_cache` 的 Section 的数据。
5. 调用 `CFDataCreateWithBytesNoCopy` 创建 CFData 对象。
6. 调用 `CFPropertyListCreateWithData` 将 Data 转换为 plist。

### 工具
- 测试过程中编写了一个打印 `libxpc.dylib` 中 plist 信息的工具，可以从 GitHub 下载并在设备上使用：
  - [xpcd_cache_printer](https://github.com/Proteas/xpcd_cache_printer)

## 五、内核信息泄露
### 相关漏洞
- **CVE-2014-4491**
  - **影响范围**: iPhone 4s 及更高版本, iPod touch (第5代) 及更高版本, iPad 2 及更高版本
  - **影响**: 恶意或受感染的 iOS 应用程序可能能够确定内核地址
  - **描述**: 在处理与内核扩展相关的 API 时存在信息泄露问题。响应中包含 `OSBundleMachOHeaders` 键的值可能包括内核地址，这可能有助于绕过地址空间布局随机化保护。此问题通过在返回之前取消滑动地址来解决。
  - **发现者**: @PanguTeam, Stefan Esser

- **CVE-2014-4496**
  - **影响范围**: iPhone 4s 及更高版本, iPod touch (第5代) 及更高版本, iPad 2 及更高版本
  - **影响**: 恶意或受感染的 iOS 应用程序可能能够确定内核地址
  - **描述**: `mach_port_kobject` 内核接口泄露了内核地址和堆置换值，这可能有助于绕过地址空间布局随机化保护。通过在生产配置中禁用 `mach_port_kobject` 接口解决了这个问题。
  - **发现者**: TaiG Jailbreak Team

### 利用方法
- **CVE-2014-4491**:
  - 逻辑漏洞，不需要复杂的利用技巧。通过以下代码可以获取内核信息：
    ```objc
    - (NSData *)getKextInfoData {
        vm_offset_t request = "Kext Request PredicateGet Loaded Kext Info";
        mach_msg_type_number_t requestLength = (unsigned int)strlen(request) + 1;
        vm_offset_t response = NULL;
        mach_msg_type_number_t responseLength = 0;
        vm_offset_t log = NULL;
        mach_msg_type_number_t logLength = 0;
        kern_return_t opResult = KERN_SUCCESS;
        kext_request(mach_host_self(),
                     0,
                     request,
                     requestLength,
                     &response,
                     &responseLength,
                     &log,
                     &logLength,
                     &opResult);
        if (opResult != KERN_SUCCESS) {
            printf("[-] getKextInfoString: fail to request kernel info\n");
            return NULL;
        }
        NSData *responseData = [[NSData alloc] initWithBytes:response length:responseLength];
        return [responseData autorelease];
    }
    ```

- **CVE-2014-4496**:
  - 逻辑漏洞，Stefan Esser 对此进行了详细描述：
    - [mach_port_kobject() and the kernel address obfuscation](https://www.sektioneins.de/en/blog/14-12-23-mach_port_kobject.html)
  - 具体创建常量对象的方法：
    ```c
    io_master_t io_master = 0;
    kret = host_get_io_master(mach_host_self(), &io_master);
    ```

## 六、内核读与任意代码执行
### 相关漏洞
- **CVE-2014-4487**
  - **影响范围**: iPhone 4s 及更高版本, iPod touch (第5代) 及更高版本, iPad 2 及更高版本
  - **影响**: 恶意应用程序可能能够以系统权限执行任意代码
  - **描述**: 在 `IOHIDFamily` 中存在缓冲区溢出问题。通过改进大小验证解决了该问题。
  - **发现者**: TaiG Jailbreak Team

### 利用思路
- **CVE-2014-4487**:
  - 将一个小 zone 中的内存块释放到大的 zone 中，结合堆风水，释放后立即申请刚刚释放的内存块，便可以覆盖相邻的小内核块。
  - 盘古团队有专门的文章介绍这个漏洞产生的原因及利用思路：
    - [CVE-2014-4487 – IOHIDLibUserClient堆溢出漏洞](http://blog.pangu.io/cve-2014-4487/)

### 利用示意图
- **图9**: 堆溢出利用过程

通过以上步骤和技术，我们可以实现对 iOS 设备的完美越狱，并在用户空间和内核空间执行任意代码。