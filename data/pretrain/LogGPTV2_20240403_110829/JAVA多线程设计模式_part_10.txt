三
Alaska
Alaska
Alaska
Alaska
Alaska
Alaska
Alaska
---
## Page 97
Immutable参与者的方法并不需要声明成synchronized。
用对 Immutable 参与者使用 Single Threaded Execution Pattern（第1章）。也就是说，
方法。当Immutable 参与者的实例建立后，状态就完全不再变化。这时，我们就不
Immutable（不变的）参与者
尽是一-些优点。不过，要保证 immutability其实比想象中困难，所以需要特别注意
共享互斥。因为不使用 synchronized 方法也能保障其安全性，讲到目前为止，好像
也没有办法。
态绝不会改变，所以实例就不需要使用 synchronized 保护了。即使想要去破坏实例。
（本章末的练习问题2-4会详细解说）：
段，全部为immutable
可由外部获取的字
Immutable Pattern的所有参与者
Immutable参与者是一-个字段值无法更改的类，也没有任何用来更改字段值的
便lmmutable Pattern的类（immutable类）不需要使用 synchronized方法进行
范例程序的 Person类就是Immutable 参与者（见图2-3和图2-4）：
Immutable Pattern的所有参与者如下:
:ReaderThread
--·.…·
:ReaderThread
图 2-4
Immutable参与可被多个线程白由访问（时图）
getField2lconeurrent?
getFieldl (concurent}
图2-3
field2{frozen}
fieldl{frozen}
linmutable Pattern 的类图
:Immutahle
不需要将方法定义成synchronized
没有用来史改了段值的方法。
字段的值上法直接更改
而可白山访间
Threaded Execution,
不必定义成Single
---
## Page 98
观察整个程序如何运用这个类。或许有分为使用 setter方法的情况，与不使用 setter
或许可以将类改成符合Immutable Patterm 的条件。如果成功的话，就能使程序性能
所以我们就将字段设置成 final，并删除 setter 方法，仔细注意遵守不变性的原则，
问，并使用了 synchronized 保护其数据。如果这个类具有 setter 方法，那Immutable
思考成对的mutable类与immutable类[执行性能]
无法配合Immutable Pattern了。可是，也不要就此心灰意冷。接下来我们可以仔细
提高，值得好好庆祝·番。
Pattern就不成立了。
我们留到练习问题2-4来实验。
高程序的执行性能。若实例由多数的线程所共享，而且访问可能会很频繁时，
使用 synchronized 来保护最大的优点就是可在不丧失安全性与生命性的前提下，提
实倒需要共享，而且访问很频繁时
能改变。具体的范例我们将在练习问题2-4讨论。
定义出非immutable 的类。因为就算字段的值不会改变，字段所属的实例还是有可
方法的总称）。
法则是重点所在（所谓 setter 方法，是指 setName、setAddress 类用来改变字段值的
的状态，是由字段的值所决定的，所以将字段设置成 final，并且不要定义 setter 方
当实俐产生后，状态不再变化时
问当设计者碰到什么情况，要去意识到实例的不变性呢？
何时使用（适用性）
扩展思考方向的提示
很可惜的．假设我们在程序代码单发现，seter 方法还是有被用到。这种时候就
使用 Immutable Patterm 的优点，在于“不需要使用 synchronized 保护"。不需要
然而，这样还是不够的．就算字段都是final，也没有 setter 方法，还是有可能
但是．我们行细检查程序代码后，发现实际上这个 setter 方法根本没有用到
如同前文所说，当实例产生后，实例的状态就不再变化是首要条件。所谓实例
关于执行性能，我们再进步深入思考，假设现在有一个类可能由许多线程访
Immutable-
一想破坏它也没办法
---
## Page 99
什么问题，但实际上却需要十分注意，具体的问题我们留到练习问题再来思考，
使没有 setter 方法，只要字段的访问权限不是 private，字段的值就有被其他类更改
要性，而把字段的 final删除掉、定义出 selter 方法，就失去不变性了。请注意即
变性。以Immutabie Pattern为前提，删除程序代码的 synchronized后，如果又失去
为了保护类的不变性[复用性]
引川其值时，就使用 String 类：将类的角色做妥善的区分。
是可以相转换的。
以 StringBuffer 作为参数的构造器。也就是说，StringBuffer 的实例与 String 的实例
何修改。所有对 String 类进行操作的方法都不是 synchronized，所以引用的速度会
而 String 则是用来表示字符串的immutable 类.String 实例所表示的字符串无法做任
确保改写时的安全性，进行改与操作时，都有适当地使用 synchronized 加以保护。
immuable 类，例如ljava.lang.StringBuffer 类与 java.lang.String类。 StringBuffer 类卡
一来，immutable类的部分就可以使用 Immutable Pattern“。
immutable类的实例、并也可从immutable类的实例构造出mutable类的实例。这样
的风险。
不变性，
比较快：²
方法的情况
3
来表示字符串的mutable类，StringBuffer 所表示的字符串可以自由地修改。为了
来看个具体的例F吧。Java 的标准类链接库里，就具有成对的 mutable 类！
注2：要由多个字符半建立出新的字符l，StringBuffer 类的速度会比 String 类快。
另外，
：当属性可能频繁修改时，就使用 StringBuffer 类：而属性没有修改必要，只会
·直接以 getter 方法返国字段所保存的实例
不变性是很微妙的性质。有的时候只要稍微修改程厅代码，可能就会失去不
Java 语言中对“字符串”这--个概念，就提供了成对的 StringBuffer类与 String
·将构造器的参数传入的实例，直接存进字段里
geter 方法是指用来返同字段值的方法。
→练小间题2-5
→练习问题2-4
会使类的安全性也丧失了，故需要特别注意，在程序的注释与API说明
下列这些修改操作也有可能危及类的不变性。这些操作乍看之下并没行
如果这两种情况区分得很清楚，那我们是否可能将这个类二分为
L
Lr
---
## Page 100
java.awt.Point 美术是 immutable
表示颊色的java.awt.Cofor 类
补充说明：java.lang.Void 类
长 2-2）都是 immutabie类。当实例片明后，所包装（wrap）的值就不会再改变。
 java.lang.Intreger 等类
表示字符事的 java.iang.String 类
标准类链接库里使用到的ImmutablePattern
详细用法已超出本书的范围，请参考API说明文件。
本类型void的Class 对象的实例，使用在reflection与 serialization 等机制上。
java.awt.Point 是表示“点”的类，但不是 immutable。在API说明文件中，查
java.lang.Void 与其他包装类不同，无法建立实例。这个类是用来保存表示基
而Color.red、Color.blue 这些代表特定颜色的实例，也可以共享使用。
当实例建立后，所代表的颜色就不会再改变。
java.awt.Color类是immutable类。
故实例建立后，字符串的属性就不会再有变化。
java.lang.String 是 immutable 类。
这单将介绍一些 Java 的标准类链接库里使用到的 Imumutable Pattem 类。
float
shorl
long
aiqnop
char
POA
byle
boolcan
基本类型
表2-2包装类
Immutable-
Java.lang. Void
 java.lang.Short
java.lang.Long
java.lang.lnteger
 java.lang.Float
java.lang.Double
java.lang.Character
java.lang.Byte
 java.lang,Boolean
包装类
想破坏它也没办法
8
---
## Page 101
实例的状态时，不允许其他线程来访问这个实例。这个时候，会是下面两种情况的
Single Threaded Execution Pattern(第 1 章)
Patterm 与 Flyweight Pattem “以同时使用。
Flyweight Pattern（参考附录 E[GoF][Yuki01])
write-write、read-write 等 conflict 的情况下，进行线程的斥，而 read-read 的时候
Patterm 中，进行 read 的线程与进行 wrte 的线程是分F来考虑的。而只在出现
以多个线程可以自山地访问实例。
Read-Write Lock Pattern（第6章）
但这不算是conflict。
不会发生 read-write conflict。Immutable Pattern 可能出现的只有 read-read 的情况,
其中之-：
相关 Pattern
为这些方法会改变Point的字段值，所以 Point 类不是 immutable。
就不做斥了。这也能使程序的性能提高。
询 Point 类的方法，
Read-Write Pattern 也是利用了read-read 不会引起 conflict 的技巧。Read-Write
Flyweight Palterm 则是为了提高内存的执行性能而共享实例。故Immutable
如同前文所述，Immutable Patem 在多个线程间只会出现 read-read的情况、所
Immutable Pattcerm 状态不会变化（write），所以不会发生 write-write conflict，也
●写入与写入的冲突（write-write conflict）
另·方面，Single Threaded Execution Patterm 的做法，则是当-一-个线程正在更改
ImmutablcPallem实例的状态不会改变，所以没有保护的必要。
当一个线程正在获取实例的状态时（read），有其他线程试图更改其状态
读取与写入的突（rcad-write conflict）
（write）所发生的冲突。
当·个线程正在更改实例的状态时（write），有其他线程也试图更改其状态
（write）时所发牛的冲突。
虽然没有 set 开头的方法名称，但还是有 move 这类的方法。因
---
## Page 102
final 学段
补充说明：覆盖与隐藏
方法设置成 final 方法的内容。
方法声明成final时，这个方法无法被子类所隐藏（hide）。
final 方法
◆ final 类
(override )。
Template Method Pattern（参考附录E[GoFJ[Yuki0l]）中，就有将模板（template）
进阶说明：final
若将实例方法声明成 final 时，这个方法无法被了类所覆盖（ovemide）。若将类
Java 的final有许多不同的用途，意义也多少有点不同。在这里就稍微整理一下吧。
另外一种则是在构造器中将值赋给字段（blank final)。
第一·种是在卢明字段时就直接赋初始值·
要将值指定给final变量字段，有下列两种方法：
final 的字段的值只能指定一次。
final的字段，在这一章中一言出现。
class Something 1
详细内容请参考附录E[JLS]
类方法被子类的方法隐藏时，实例被调用的方法是在编译时决定的。
实例方法被子类的方法覆盖时，实际被调用的方法是在执行时决定的。
因为 fnal 类的类无法定义子类，所以 final 类声明的方法也不会被覆盖
class Something l
当类声明成 final 时，这个类无法延仲，也就是说不能定义 final类的子类。
final int vaiue;
 final int value - 123;
Something() !
this.value = 123;
Immutable-
一想破坏它也没办法
2载
8
---
## Page 103
下列讲句中，正确的请回答○，不正确的请回答×。
习间题。
安全性与生命性的前提之下，提高程序性能。
这个类的方法也无所谓。故方法没有 synchronized 的必要。这样一来，可在不丧失
Finaf 变量岛final 参数
赋其他的值。
练习问题
重点回顾
问题2-1（基础知识的确认）
局部变量与方法的参数，都可以声明成 final。final 的变量的值只能够指定一次。
如同前面已经反复说明的，final 的字段无法使用 setValue 类的 setter 方法再次
解答请见附录A
而保护类的 immutabilty，就是程序设计者的I作了。请务必挑战看看后面的练
Immutable Pattern 保护类的方式不是 synchronized，而是 immutability（不变性）。
这就是 Immutable Patterm.
这一章我们学小了 Immutable Pattem.
class Something l
另--种则是在 static块（静态初始化子）中将值赋给字段（blank final)。
class Something f
第种是在声明字段时就直接赋初始值：
要将值赋给final'实例的字段，有下面两种方法：
（1） java.lang.String 类是 immutable 的类.
当一
一-个类的实例声明后，状态就完全不再改变。这时就算有多个线程同时调用
 static firal int value = 123;
static final int. value;
tatic {
value = 123;
---
## Page 104
 List 2-5 是测试以 Immutable Patterm 取代 synchronizcd后，能提升多少性能的程
某个人看到 String 类的API说明文件中，有replace 这个方法后，说了下面这句
public class Mair ↑
的时刻。调用方法的次数定义在CALL_COUNT，请配合您的坏境做必要的修
在这个程序中，使用System.currentTimeMillisO表达式以毫秒为单位获取现在
能会差多少。
境中，比较这两者执行时所相差的时间吧。在实际开始执行之前，请先估计可
synchronized方法。程序在Main类里反复地调用这些方法：请在您的计算机环
序。 Synch 类的 toString 是 synchronized 方法，而 NotSynch 的 loString 则不是
问题2-3（执行性能比较）
public class Main 
请针对上面这个意见提出您的反驳。
String类还能说是符合ImmutablePattern 吗？我看不是吧，
结果如图2-5所示一样，BAT 的B'被取代为'C，最后显示出的是CAT，这样
“replacc 方法，会取代字符中中的亨符。也就是说，执行List 2-4这样的程序，
问题2-2（immutability的确认）
List 2-5
List 2-4
（5）将方法设为synchromized不会导致什么问题，所以应该尽星都加上
（4）变成 private的字段可以从该类与子类直接连接。
（3）变成final的字段无法被指定两次。
(2） java.lang.StringBuffer 类是 immutabie 的类。
public static void ma(nistring[l args)
 private stacic final long CALL_CoUNT = l000000200L;
pubcir static void main(String[] args)
synchronized
trial("NotSyrch", CALL_coUNT, rew NotSynch());
System.ort-println(s.replace（'B'，'c'))://'B'取代成'c'
sir.ng s -
使用 Immutable Pattern 可以提升多少性能呢（Main.java）
String 真的是 immutable 吗（Main.java)
"BAF";
图2-5执行结果
CAT
Immutable-
想破坏它也没办法
2样
一
9
---
## Page 105
[下面的 Userlnfo类（List 2-6）可H来表达用户的信息。这个类的 info 字段是
8
public final class Userinfo {
问为什么？
private final的，也没有 setter 方法，可是UserInfo类并称不L是immutable。请
问题2-4（没有setter方法，却不是immutable）
class Synch ↓
class NotSynch l
start_time) + "msec.");
List 2-6
 private final StringBuffer info;
public Userinfc(Strirg name, String address) 
pubiic synchronized String tostringi) ↑
 private final String name = "Synch";
public String tostring(l l
private static void trial(String msg, long count, Object obj)
return "[ " + name + "}";
System.out.println(msg + ": END");
for (long i = O: i ");
List 2-8
List 2-7
public int yr
pubiic int x;
public String tostring() {
public
public
public
public Line(Point startPcint, Point endPoint)
public Iire(int startx, int starty, int endx, int endy) ↑
private final Point endPoint;
private final Point startPoint;
public String tostring()
pubiic StringBuffer getIrfo()(
return "i Line: " + startPoint +
this.endPoint = new Point(endx, endy);
this.startPoint = ew Point[startx, starty);
return "[ UserInfo: " + info + " j";
this.endPoint = éndpoint;
this.startPoint = startPoint;
 return info;
:int getErdx{)
Line 类所使用到的Point 类（Point.java）
int
 int