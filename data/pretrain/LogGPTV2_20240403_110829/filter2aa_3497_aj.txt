NOTE
Pay attention to the warning! This application has not been designed to be a secure chat system.
Notice in Listing 5-1 that the final line prints the port the server is running on (12345
in this case) and whether the server has bound to all interfaces (global). You probably
won’t need to change the port (--port NUM), but you might need to change whether the
application is bound to all interfaces if you want clients and the server to exist on different
computers. This is especially important on Windows. It’s not easy to capture traffic to the
local loopback interface on Windows; if you encounter any difficulties, you may need to
run the server on a separate computer or a virtual machine (VM). To bind to all interfaces,
specify the --global parameter.
Starting Clients
With the server running, we can start one or more clients. To start a client, run
ChatClient.exe (see Listing 5-2), specify the username you want to use on the server (the
username can be anything you like), and specify the server hostname (for example,
localhost). When you run the client, you should see output similar to that shown in Listing
5-2. If you see any errors, make sure you’ve set up the server correctly, including requiring
binding to all interfaces or disabling the firewall on the server.
C:\SuperFunkyChat> ChatClient.exe USERNAME HOSTNAME
ChatClient (c) 2017 James Forshaw
WARNING: Don't use this for a real chat system!!!
Connecting to localhost:12345
Listing 5-2: Example output from running ChatClient
As you start the client, look at the running server: you should see output on the console
similar to Listing 5-3, indicating that the client has successfully sent a “Hello” packet.
Connection from 127.0.0.1:49825
Received packet ChatProtocol.HelloProtocolPacket
Hello Packet for User: alice HostName: borax
Listing 5-3: The server output when a client connects
Communicating Between Clients
After you’ve completed the preceding steps successfully, you should be able to connect
multiple clients so you can communicate between them. To send a message to all users
with the ChatClient, enter the message on the command line and press ENTER.
The ChatClient also supports a few other commands, which all begin with a forward
slash (/), as detailed in Table 5-1.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Table 5-1: Commands for the ChatClient Application
Command
Description
/quit [message]
Quit client with optional message
/msg user message Send a message to a specific user
/list
List other users on the system
/help
Print help information
You’re ready to generate traffic between the SuperFunkyChat clients and server. Let’s
start our analysis by capturing and inspecting some traffic using Wireshark.
A Crash Course in Analysis with Wireshark
In Chapter 2, I introduced Wireshark but didn’t go into any detail on how to use
Wireshark to analyze rather than simply capture traffic. Because Wireshark is a very
powerful and comprehensive tool, I’ll only scratch the surface of its functionality here.
When you first start Wireshark on Windows, you should see a window similar to the one
shown in Figure 5-1.
Figure 5-1: The main Wireshark window on Windows
The main window allows you to choose the interface to capture traffic from. To ensure
we capture only the traffic we want to analyze, we need to configure some options on the
interface. Select Capture ▸ Options from the menu. Figure 5-2 shows the options dialog
that opens.
||||||||||||||||||||
||||||||||||||||||||
Figure 5-2: The Wireshark Capture Interfaces dialog
Select the network interface you want to capture traffic from, as shown at ➊. Because
we’re using Windows, choose Local Area Connection, which is our main Ethernet
connection; we can’t easily capture from Localhost. Then set a capture filter ➋. In this
case, we specify the filter ip host 192.168.10.102 to limit capture to traffic to or from the
IP address 192.168.10.102. (The IP address we’re using is the chat server’s address.
Change the IP address as appropriate for your configuration.) Click the Start button to
begin capturing traffic.
Generating Network Traffic and Capturing Packets
The main approach to packet analysis is to generate as much traffic from the target
application as possible to improve your chances of finding its various protocol structures.
For example, Listing 5-4 shows a single session with ChatClient for alice.
# alice - Session
> Hello There!
 /quit
 How are you?
> This is nice isn't it?
> /list
 /msg alice Woo
> /quit
 Back again for another round.
> /quit Nope!
) indicates a
command to enter into the ChatClient, and a left angle bracket (<) indicates responses
from the server being written to the console. You can execute the commands to the client
for each of these session captures to reproduce the rest of the results in this chapter for
analysis.
Now turn to Wireshark. If you’ve configured Wireshark correctly and bound it to the
correct interface, you should start seeing packets being captured, as shown in Figure 5-3.
||||||||||||||||||||
||||||||||||||||||||
Figure 5-3: Captured traffic in Wireshark
After running the example sessions, stop the capture by clicking the Stop button
(highlighted) and save the packets for later use if you want.
Basic Analysis
Let’s look at the traffic we’ve captured. To get an overview of the communication that
occurred during the capture period, choose among the options on the Statistics menu. For
example, choose Statistics ▸ Conversations, and you should see a new window displaying
high-level conversations such as TCP sessions, as shown in the Conversations window in
Figure 5-4.
Figure 5-4: The Wireshark Conversations window
The Conversations window shows three separate TCP conversations in the captured
traffic. We know that the SuperFunkyChat client application uses port 12345, because we
see three separate TCP sessions coming from port 12345. These sessions should
correspond to the three client sessions shown in Listing 5-4, Listing 5-5, and Listing 5-6.
Reading the Contents of a TCP Session
To view the captured traffic for a single conversation, select one of the conversations in
the Conversations window and click the Follow Stream button. A new window displaying
the contents of the stream as ASCII text should appear, as shown in Figure 5-5.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 5-5: Displaying the contents of a TCP session in Wireshark’s Follow TCP Stream view
Wireshark replaces data that can’t be represented as ASCII characters with a single dot
character, but even with that character replacement, it’s clear that much of the data is
being sent in plaintext. That said, the network protocol is clearly not exclusively a text-
based protocol because the control information for the data is nonprintable characters.
The only reason we’re seeing text is that SuperFunkyChat’s primary purpose is to send
text messages.
Wireshark shows the inbound and outbound traffic in a session using different colors:
pink for outbound traffic and blue for inbound. In a TCP session, outbound traffic is from
the client that initiated the TCP session, and inbound traffic is from the TCP server.
Because we’ve captured all traffic to the server, let’s look at another conversation. To
change the conversation, change the Stream number ➊ in Figure 5-5 to 1. You should now
see a different conversation, for example, like the one in Figure 5-6.
||||||||||||||||||||
||||||||||||||||||||
Figure 5-6: A second TCP session from a different client
Compare Figure 5-6 to Figure 5-5; you’ll see the details of the two sessions are
different. Some text sent by the client (in Figure 5-6), such as “How are you?”, is shown as
received by the server in Figure 5-5. Next, we’ll try to determine what those binary parts
of the protocol represent.
Identifying Packet Structure with Hex Dump
At this point, we know that our subject protocol seems to be part binary and part text,
which indicates that looking at just the printable text won’t be enough to determine all the
various structures in the protocol.
To dig in, we first return to Wireshark’s Follow TCP Stream view, as shown in Figure
5-5, and change the Show and save data as drop-down menu to the Hex Dump option.
The stream should now look similar to Figure 5-7.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 5-7: The Hex Dump view of the stream
The Hex Dump view shows three columns of information. The column at the very left
➊ is the byte offset into the stream for a particular direction. For example, the byte at 0 is
the first byte sent in that direction, the byte 4 is the fifth, and so on. The column in the
center ➋ shows the bytes as a hex dump. The column at the right ➌ is the ASCII
representation, which we saw previously in Figure 5-5.
Viewing Individual Packets
Notice how the blocks of bytes shown in the center column in Figure 5-7 vary in length.
Compare this again to Figure 5-6; you’ll see that other than being separated by direction,
all data in Figure 5-6 appears as one contiguous block. In contrast, the data in Figure 5-7
might appear as just a few blocks of 4 bytes, then a block of 1 byte, and finally a much
longer block containing the main group of text data.
What we’re seeing in Wireshark are individual packets: each block is a single TCP
packet, or segment, containing perhaps only 4 bytes of data. TCP is a stream-based
protocol, which means that there are no real boundaries between consecutive blocks of
data when you’re reading and writing data to a TCP socket. However, from a physical
perspective, there’s no such thing as a real stream-based network transport protocol.
Instead, TCP sends individual packets consisting of a TCP header containing information,
such as the source and destination port numbers as well as the data.
In fact, if we return to the main Wireshark window, we can find a packet to prove that
Wireshark is displaying single TCP packets. Select Edit ▸ Find Packet, and an additional
drop-down menu appears in the main window, as shown Figure 5-8.
||||||||||||||||||||
||||||||||||||||||||
Figure 5-8: Finding a packet in Wireshark’s main window
We’ll find the first value shown in Figure 5-7, the string BINX. To do this, fill in the Find
options as shown in Figure 5-8. The first selection box indicates where in the packet
capture to search. Specify that you want to search in the Packet bytes ➊. Leave the second
selection box as Narrow & Wide, which indicates that you want to search for both ASCII
and Unicode strings. Also leave the Case sensitive box unchecked and specify that you
want to look for a String value ➋ in the third drop-down menu. Then enter the string
value we want to find, in this case the string BINX ➌. Finally, click the Find button, and the
main window should automatically scroll and highlight the first packet Wireshark finds
that contains the BINX string ➍. In the middle window at ➎, you should see that the packet
contains 4 bytes, and you can see the raw data in the bottom window, which shows that
we’ve found the BINX string ➏. We now know that the Hex Dump view Wireshark displays
in Figure 5-8 represents packet boundaries because the BINX string is in a packet of its own.
Determining the Protocol Structure
To simplify determining the protocol structure, it makes sense to look only at one
direction of the network communication. For example, let’s just look at the outbound
direction (from client to server) in Wireshark. Returning to the Follow TCP Stream view,
select the Hex Dump option in the Show and save data as drop-down menu. Then select
the traffic direction from the client to the server on port 12345 from the drop-down menu
at ➊, as shown in Figure 5-9.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 5-9: A hex dump showing only the outbound direction
Click the Save as . . . button to copy the outbound traffic hex dump to a text file to
make it easier to inspect. Listing 5-7 shows a small sample of that traffic saved as text.
00000000  42 49 4e 58                                        BINX➊
00000004  00 00 00 0d                                        ....➋
00000008  00 00 03 55                                        ...U➌
0000000C  00                                                 .➍
0000000D  05 61 6c 69 63 65 04 4f  4e 59 58 00               .alice.O NYX.➎
00000019  00 00 00 14                                        ....
0000001D  00 00 06 3f                                        ...?
00000021  03                                                 .
00000022  05 61 6c 69 63 65 0c 48  65 6c 6c 6f 20 54 68 65   .alice.H ello The
00000032  72 65 21                                           re!
--snip--
Listing 5-7: A snippet of outbound traffic
The outbound stream begins with the four characters BINX ➊. These characters are
never repeated in the rest of the data stream, and if you compare different sessions, you’ll
always find the same four characters at the start of the stream. If I were unfamiliar with this
protocol, my intuition at this point would be that this is a magic value sent from the client
to the server to tell the server that it’s talking to a valid client rather than some other
application that happens to have connected to the server’s TCP port.
Following the stream, we see that a sequence of four blocks is sent. The blocks at ➋ and
➌ are 4 bytes, the block at ➍ is 1 byte, and the block at ➎ is larger and contains mostly
readable text. Let’s consider the first block of 4 bytes at ➋. Might these represent a small
number, say the integer value 0xD or 13 in decimal?
Recall the discussion of the Tag, Length, Value (TLV) pattern in Chapter 3. TLV is a
very simple pattern in which each block of data is delimited by a value representing the
||||||||||||||||||||
||||||||||||||||||||
length of the data that follows. This pattern is especially important for stream-based
protocols, such as those running over TCP, because otherwise the application doesn’t
know how much data it needs to read from a connection to process the protocol. If we
assume that this first value is the length of the data, does this length match the length of
the rest of the packet? Let’s find out.
Count the total bytes of the blocks at ➋, ➌, ➍, and ➎, which seem to be a single packet,
and the result is 21 bytes, which is eight more than the value of 13 we were expecting (the
integer value 0xD). The value of the length block might not be counting its own length. If
we remove the length block (which is 4 bytes), the result is 17, which is 4 bytes more than
the target length but getting closer. We also have the other unknown 4-byte block at ➌
following the potential length, but perhaps that’s not counted either. Of course, it’s easy to
speculate, but facts are more important, so let’s do some testing.
Testing Our Assumptions
At this point in such an analysis, I stop staring at a hex dump because it’s not the most
efficient approach. One way to quickly test whether our assumptions are right is to export
the data for the stream and write some simple code to parse the structure. Later in this
chapter, we’ll write some code for Wireshark to do all of our testing within the GUI, but
for now we’ll implement the code using Python on the command line.
To get our data into Python, we could add support for reading Wireshark capture files,
but for now we’ll just export the packet bytes to a file. To export the packets from the
dialog shown in Figure 5-9, follow these steps:
1. In the Show and save data as drop-down menu, choose the Raw option.
2. Click Save As to export the outbound packets to a binary file called
bytes_outbound.bin.
We also want to export the inbound packets, so change to and select the inbound
conversation. Then save the raw inbound bytes using the preceding steps, but name the
file bytes_inbound.bin.
Now use the XXD tool (or a similar tool) on the command line to be sure that we’ve
successfully dumped the data, as shown in Listing 5-8.
$ xxd bytes_outbound.bin
00000000: 4249 4e58 0000 000f 0000 0473 0003 626f  BINX.......s..bo
00000010: 6208 7573 6572 2d62 6f78 0000 0000 1200  b.user-box......
00000020: 0005 8703 0362 6f62 0c48 6f77 2061 7265  .....bob.How are
00000030: 2079 6f75 3f00 0000 1c00 0008 e303 0362   you?..........b
00000040: 6f62 1654 6869 7320 6973 206e 6963 6520  ob.This is nice
00000050: 6973 6e27 7420 6974 3f00 0000 0100 0000  isn't it?.......
00000060: 0606 0000 0013 0000 0479 0505 616c 6963  .........y..alic
00000070: 6500 0000 0303 626f 6203 576f 6f00 0000  e.....bob.Woo...
00000080: 1500 0006 8d02 1349 276d 2067 6f69 6e67  .......I'm going
00000090: 2061 7761 7920 6e6f 7721                  away now!
Technet24
||||||||||||||||||||
||||||||||||||||||||
Listing 5-8: The exported packet bytes
Dissecting the Protocol with Python
Now we’ll write a simple Python script to dissect the protocol. Because we’re just
extracting data from a file, we don’t need to write any network code; we just need to open
the file and read the data. We’ll also need to read binary data from the file—specifically, a
network byte order integer for the length and unknown 4-byte block.
Performing the Binary Conversion
We can use the built-in Python struct library to do the binary conversions. The script
should fail immediately if something doesn’t seem right, such as not being able to read all
the data we expect from the file. For example, if the length is 100 bytes and we can read
only 20 bytes, the read should fail. If no errors occur while parsing the file, we can be more
confident that our analysis is correct. Listing 5-9 shows the first implementation, written
to work in both Python 2 and 3.
   from struct import unpack
   import sys
   import os
   # Read fixed number of bytes
➊ def read_bytes(f, l):
       bytes = f.read(l)
    ➋ if len(bytes) != l:
           raise Exception("Not enough bytes in stream")
       return bytes
   # Unpack a 4-byte network byte order integer
➌ def read_int(f):
       return unpack("!i", read_bytes(f, 4))[0]
   # Read a single byte
➍ def read_byte(f):
       return ord(read_bytes(f, 1))
   filename = sys.argv[1]
   file_size = os.path.getsize(filename)
   f = open(filename, "rb")
➎ print("Magic: %s" % read_bytes(f, 4))
   # Keep reading until we run out of file
➏ while f.tell() < file_size:
       length = read_int(f)
       unk1 = read_int(f)
       unk2 = read_byte(f)
       data = read_bytes(f, length - 1)
       print("Len: %d, Unk1: %d, Unk2: %d, Data: %s"
           % (length, unk1, unk2, data))
Listing 5-9: An example Python script for parsing protocol data