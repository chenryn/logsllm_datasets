### Important Notice
Please be aware that this application has not been designed as a secure chat system. Use it with caution and do not rely on it for any sensitive or confidential communications.

### Server Configuration
In Listing 5-1, the final line of the server output displays the port number (12345 in this example) and whether the server is bound to all network interfaces (global). You typically won't need to change the port number (`--port NUM`), but you may need to adjust the binding to all interfaces if you want the clients and the server to run on different computers. This is particularly important on Windows, where capturing traffic on the local loopback interface can be challenging. If you encounter issues, consider running the server on a separate computer or a virtual machine (VM). To bind the server to all interfaces, use the `--global` parameter.

### Starting Clients
Once the server is running, you can start one or more clients. To launch a client, execute `ChatClient.exe` (refer to Listing 5-2) and specify the desired username and the server hostname (e.g., `localhost`). The expected output should resemble Listing 5-2. If you encounter errors, ensure that the server is set up correctly, including the necessary binding to all interfaces or disabling the firewall on the server.

Example command:
```sh
C:\SuperFunkyChat> ChatClient.exe USERNAME HOSTNAME
```

Output:
```
ChatClient (c) 2017 James Forshaw
WARNING: Don't use this for a real chat system!!!
Connecting to localhost:12345
```

### Server Output
When a client connects, the server will display output similar to Listing 5-3, indicating that a "Hello" packet has been received.

Example output:
```
Connection from 127.0.0.1:49825
Received packet ChatProtocol.HelloProtocolPacket
Hello Packet for User: alice HostName: borax
```

### Communicating Between Clients
After successfully setting up the server and clients, you can connect multiple clients to communicate between them. To send a message to all users, enter the message on the command line and press Enter. The `ChatClient` also supports several commands, which are prefixed with a forward slash (`/`), as detailed in Table 5-1.

| Command        | Description                           |
|----------------|---------------------------------------|
| `/quit [message]` | Quit the client with an optional message. |
| `/msg user message` | Send a message to a specific user.      |
| `/list`         | List other users on the system.         |
| `/help`         | Print help information.                |

### Capturing and Analyzing Traffic with Wireshark
Now that you have the `SuperFunkyChat` clients and server communicating, you can capture and analyze the traffic using Wireshark.

#### Setting Up Wireshark
1. **Start Wireshark** and select the appropriate network interface to capture traffic from.
2. **Configure Capture Options**: 
   - Select `Capture` > `Options` from the menu.
   - Choose the network interface (e.g., `Local Area Connection`).
   - Set a capture filter (e.g., `ip host 192.168.10.102`) to limit the capture to traffic to or from the specified IP address.
   - Click `Start` to begin capturing traffic.

#### Generating Network Traffic
Generate traffic by running sessions with the `ChatClient`. For example, Listing 5-4 shows a session for the user `alice`.

Example session:
```
# alice - Session
> Hello There!
 /quit
 How are you?
> This is nice isn't it?
> /list
 /msg alice Woo
> /quit
 Back again for another round.
> /quit Nope!
```

#### Basic Analysis
To get an overview of the captured traffic, use the `Statistics` > `Conversations` option in Wireshark. This will display high-level conversations, such as TCP sessions, as shown in Figure 5-4.

#### Viewing the Contents of a TCP Session
To view the captured traffic for a single conversation, select the conversation in the Conversations window and click `Follow Stream`. This will display the contents of the stream as ASCII text, as shown in Figure 5-5.

#### Identifying Packet Structure with Hex Dump
To analyze the binary parts of the protocol, use the `Hex Dump` view in Wireshark. This view shows the byte offset, hex dump, and ASCII representation of the data, as shown in Figure 5-7.

#### Testing Assumptions
To test your assumptions about the protocol structure, export the packet bytes to a file and write a Python script to parse the data. Follow these steps:

1. **Export Packet Bytes**:
   - In the `Show and save data as` drop-down menu, choose `Raw`.
   - Click `Save As` to export the outbound packets to a binary file (e.g., `bytes_outbound.bin`).
   - Repeat for inbound packets, saving to `bytes_inbound.bin`.

2. **Verify Exported Data**:
   - Use the `XXD` tool to verify the exported data, as shown in Listing 5-8.

3. **Dissecting the Protocol with Python**:
   - Write a Python script to read and parse the exported data. Listing 5-9 provides an example implementation.

Example Python script:
```python
from struct import unpack
import sys
import os

def read_bytes(f, l):
    bytes = f.read(l)
    if len(bytes) != l:
        raise Exception("Not enough bytes in stream")
    return bytes

def read_int(f):
    return unpack("!i", read_bytes(f, 4))[0]

def read_byte(f):
    return ord(read_bytes(f, 1))

filename = sys.argv[1]
file_size = os.path.getsize(filename)
f = open(filename, "rb")

print("Magic: %s" % read_bytes(f, 4))

while f.tell() < file_size:
    length = read_int(f)
    unk1 = read_int(f)
    unk2 = read_byte(f)
    data = read_bytes(f, length - 1)
    print("Len: %d, Unk1: %d, Unk2: %d, Data: %s" % (length, unk1, unk2, data))
```

This script reads the magic value, length, unknown values, and data from the file, providing a structured way to analyze the protocol.