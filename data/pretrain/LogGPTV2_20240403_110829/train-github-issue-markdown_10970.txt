 **Is this a request for help?** (If yes, you should use our troubleshooting
guide and community support channels, see
http://kubernetes.io/docs/troubleshooting/.): No
**What keywords did you search in Kubernetes issues before filing this one?**
(If you have found any duplicates, you should instead reply there.): etcd
watcher
* * *
**Is this a BUG REPORT or FEATURE REQUEST?** (choose one): Bug report
**Kubernetes version** (use `kubectl version`): HEAD / commit `8b5264e`
**Environment** :
  * **Cloud provider or hardware configuration** : local VM
  * **OS** (e.g. from /etc/os-release): Fedora 24
  * **Kernel** (e.g. `uname -a`): Linux localhost.localdomain 4.7.7-200.fc24.x86_64 #1 SMP Sat Oct 8 00:21:59 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
  * **Install tools** : N/A
  * **Others** : N/A
**What happened** :
If you do a watch from resource version "0" using etcd_watcher.go (the etcd v2
client code), it initially performs a get of the key in question and returns
Added or Modified events, based on a comparison of each node's createdIndex
and modifiedIndex. This works all the time.
If you do a watch from resource version "0" using watcher.go (the etcd v3
client code), it attempts to get `kv.modifiedIndex - 1` for each kv returned,
in an attempt to provide both the previous and current versions of each
kv/object. This works as long as `kv.modifiedIndex - 1` has not been
compacted. If compaction has occurred, the initial `sync()` will fail, and
it's not possible to watch from "0"' for this particular key.
**What you expected to happen** :
Either:
  1. The v3 watcher should not change the behavior from the v2 watcher; namely, it should not attempt to get the previous revision of each object and instead just return the current version as a `watch.Added` event
  2. We agree that it's ok to change the behavior, and in the event that the database has been compacted and the previous revision of an object cannot be retrieved, that object is sent as a `watch.Added` event instead of `watch.Modified`.
**How to reproduce it** (as minimally and precisely as possible): I'm working
on a unit test and fix.
**Anything else do we need to know** :
cc @wojtek-t @hongchaodeng @xiang90 @smarterclayton @liggitt @deads2k
@derekwaynecarr @sttts