Securing Linux Systems
with AppArmor
Crispin Cowan, PhD
Director of Software Engineering
Security Architect, SUSE Linux
AppArmor:
Easy-to-use Security for Ubuntu Linux
Crispin Cowan, PhD
Security Architect, SUSE
What Is This 'AppArmor' Thing
and Why Should I Care?
©  Novell Inc.  All rights reserved
3
Agenda
Overview
A Closer Look at AppArmor
Deployment Scenarios
Demonstration of AppArmor
Competitive Positioning
AppArmor Futures
©  Novell Inc.  All rights reserved
4
Software Security Problem
Problem: Imperfect software :-)
– Reliable software does what it is supposed to do
– Secure software does what it is supposed to do, and nothing 
else
Solution: only use perfect software
... slight supply problem :-)
©  Novell Inc.  All rights reserved
5
AppArmor Solution
Enforce that applications only get to do what they are 
supposed to do
What means “do”?
– At ultimate detail, this is the code itself
– But we clearly can't get that right :-)
– Need something simpler, more abstract
Resources:
– Restrict the application to only access the OS resources it 
should need
©  Novell Inc.  All rights reserved
6
What Would You Do With That?
Make a server network secure:
– Confine all programs with open network ports
– If all open ports lead to confined processes, then you have 
completely defined policy for what a network user or attacker 
can do
– Yet far from having created policy for thw whole system
©  Novell Inc.  All rights reserved
7
Is that really secure?
Hard to say
Security is semi-decidable
– You can only tell when something is insecure
– Hence all the Defcon talks on breaking something, and few on securing 
something
So lets put it to a practical test
– Put it in competition at Defcon and let people beat on it
©  Novell Inc.  All rights reserved
8
Defcon CtF 2002-5 a la Ghettohackers
Some real-world red teaming
Play an Immunix server in the Defcon 
Capture the Flag (CtF) games
Almost no holds barred:
– No flooding
– No physical attacks
New gaming rig designed by the 
Ghettohackers
©  Novell Inc.  All rights reserved
9
Basic Defcon CtF Rules
Player Nodes
©  Novell Inc.  All rights reserved
10
Basic Defcon CtF Rules
Player Nodes
Score’bot
Polls player nodes,
Looking for req. services
If all services found ...
©  Novell Inc.  All rights reserved
11
Basic Defcon CtF Rules
Player Nodes
Score’bot
Polls player nodes,
Looking for req. services
If all services found,
Score one point for the
Flag currently on that
node
©  Novell Inc.  All rights reserved
12
Basic Defcon CtF Rules
Player Nodes
Score’bot
Polls player nodes,
Looking for req. services
If all services found,
Score one point for the
Flag currently on that
node
… while each team
tries to replace others’ flags
AppArmor
A Closer Look
©  Novell Inc.  All rights reserved
14
Linux 2.6 Kernel   
AppArmor Architecture
Linux OS
Component
Desktop
Application
Server
Application
YaST
 Console
Reporting
& Alerting
user interfaces
AppArmor
AppArmor
Module
LSM Interface
Reporting
& Alerting
Application
Profiles
©  Novell Inc.  All rights reserved
15
Critical Issue #1: Complete Mediation
Must not be possible to bypass HIPS system
• Must be in the kernel
AppArmor uses LSM interface in 2.6 kernel
• LSM (Linux Security Module) provides in-kernel mediation without 
having to maintain a patched kernel
• Provides an open standard API for access control module
• Precise information on application behavior, accuracy, performance
• Provides highest quality non-bypassable mediation
©  Novell Inc.  All rights reserved
16
Critical Issue #2: Security Model
Misuse prevention vs. anomaly prevention
• Misuse prevention easier to manage
• Anomaly prevention much more secure, 
traditionally hard to use 
AppArmor is easy anomaly prevention for 
application security
• Focus on application security
• Name-based access control for ease of 
understanding policy
• Hybrid white list/black list
• White list within an application profile
• Black list system-wide
AppArmor
Per - Application
Security
DNS
Print
Web 
CGI
Mail
File
©  Novell Inc.  All rights reserved
17
AppArmor Security Profile
Whenever a protected 
program runs regardless 
of UID, AppArmor 
controls:
– The POSIX capabilities 
it can have (even if it is 
running as root)
– The directories/files it 
can read/write/execute
/usr/sbin/ntpd {
  #include 
  #include 
  capability ipc_lock,
  capability net_bind_service,
  capability sys_time,
  capability sys_chroot,
  capability setuid,
  /etc/ntp.conf
r,
  /etc/ntp/drift*
rwl,
  /etc/ntp/keys
r,
  /etc/ntp/step-tickers
r,
  /tmp/ntp*
rwl,
  /usr/sbin/ntpd
rix,
  /var/log/ntp              
w,
  /var/log/ntp.log          
w,
  /var/run/ntpd.pid         
w,
  /var/lib/ntp/drift        
rwl,
  /var/lib/ntp/drift.TEMP   
rwl,
  /var/lib/ntp/var/run/ntp/ntpd.pid 
w,
  /var/lib/ntp/drift/ntp.drift      
r,
  /drift/ntp.drift.TEMP     
rwl,
  /drift/ntp.drift          
rwl,
}
Example security 
profile for ntpd
©  Novell Inc.  All rights reserved
18
Automated Workflow
/usr/sbin/ntpd {
  #include 
  #include 
  capability ipc_lock,
  capability net_bind_service,
  capability sys_time,
  capability sys_chroot,
  capability setuid,
  /etc/ntp.conf
r,
  /etc/ntp/drift*
rwl,
  /etc/ntp/keys
r,
  /etc/ntp/step-tickers
r,
  /tmp/ntp*
rwl,
  /usr/sbin/ntpd
rix,
  /var/log/ntp              
w,
  /var/log/ntp.log          
w,
  /var/run/ntpd.pid         
w,
©  Novell Inc.  All rights reserved
19
Native Unix Syntax, Semantics
AppArmor access controls reflect classic Unix 
permission patterns
> Complements Unix permissions rather than overlaying a new paradigm
Regular expressions in AppArmor rules
> /dev/{,u}random matches /dev/random and 
/dev/urandom
> /lib/ld-*.so* matches most of the libraries in /lib
> /home/*/.plan matches everyone’s .plan file
> /home/*/public_html/** matches everyone’s public 
HTML directory tree
©  Novell Inc.  All rights reserved
20
Profile Building Blocks
A set of “foundation class” rules that can be #include'd in 
your profiles
– base: needed by nearly all programs
– authentication: program will authenticate users
– console: program interacts with TTY consoles
– kerberos: uses Kerberos cryptography
– nameservice: program needs to look up domain names
– wutmp: program updates user login logs
©  Novell Inc.  All rights reserved
21
Includes Default Set of Policies
/etc/apparmor.d
(default loaded)
– netstat
– ping
– klogd
– syslog
– ldd
– squid
– traceroute
– identd
– mdnsd
– named
– nscd
– ntpd
/etc/apparmor/extras
(not loaded, but available)
– firefox
– opera
– evolution
– gaim
– realplay
– postfix
– acroread
– mysqld
– ethereal
– postfix
– sendmail
– many more...
AppArmor Demo
©  Novell Inc.  All rights reserved
23
Apache Profiling
1.
Local Apache web server running vulnerable PHF script
2.
Exploit PHF vulnerability; deface web page
3.
Develop profiles for Apache and PHF app
4.
Try hack again; hack fails
©  Novell Inc.  All rights reserved
24
The Setup
1. open a terminal 
window for 
commands and type 
“demoreset.sh” to 
reset the demo.
2. open a second 
terminal window and 
type the “tail” 
command shown to 
view the syslog
3. open a browser and 
click on the “Digital 
Airlines” bookmark to 
bring up the demo 
homepage
4. open YaST and click 
on the AppArmor 
icon to bring up the 
AppArmor control 
center
©  Novell Inc.  All rights reserved
25
The Hack
1. click the “PHF” 
bookmark to pull up 
the vulnerable PHF 
application
2. click the “Hack” 
bookmark to run the 
hack that defaces 
the homepage.
3. now click the “Digital 
Airlines” bookmark to 
show that the 
homepage has been 
defaced!
4. click the “Unhack” 
bookmark to reset 
the homepage, then 
click on the Digital 
Airlines bookmark. 
©  Novell Inc.  All rights reserved
26
Choosing the Application 
1. in YaST, click the 
Add Profile Wizard to 
select the app to be 
profiled
2. type the path to 
apache as shown (or 
browse to it)
3. the wizard tells you 
to start the target 
app and exercise its 
functionality
©  Novell Inc.  All rights reserved
27
Exercising Apache
1. at the command line, 
restart apache as 
shown
2. visit the homepage...
3. ... and visit the PHF 
application. Now we 
have a syslog full of 
apache events.
4. back in YaST, click 
on the “Scan” button 
to start developing 
policy
©  Novell Inc.  All rights reserved
28
Creating AppArmor Policy
1. the Wizard asks us if 
the PHF app should 
have its own profile... 
we say “yes” by 
clicking on the 
“Profile” radio button, 
then “Allow”
2. now the Wizard 
notices apache 
needs a few POSIX 
capabilities. We 
“Allow” all of them.
©  Novell Inc.  All rights reserved
29
Creating AppArmor Policy 2
1. the Wizard asks about a file 
accessed by apache. We click the 
“Glob” button twice to allow read 
access to all files in the apache2 
directory, then “Allow”
2. the Wizard notices apache needs 
access to /etc/group and suggests 
we “include” the nameservice 
abstraction.
©  Novell Inc.  All rights reserved
30
Creating Apache Policy 3
1. apache accesses several libraries. 
We click on “Glob w/Ext” to give 
apache read access to all libraries in 
this directory.
2. after several more questions, we're 
finished. We click on “Finish” and 
answer “Yes” to exit.
©  Novell Inc.  All rights reserved
31
Blocking the Attack
1. back at our website, we pull up the 
homepage, try the hack and see that 
the home page remains intact!
2. looking at the syslog, we see a 
“REJECT” entry telling us an 
attempted attack via the phf 
application was blocked by the 
newly created AppArmor profiles.
©  Novell Inc.  All rights reserved
32
Reviewing our Apache Policy
1. at the YaST control center, click on 
“Edit Profile” to bring up a list of 
profiles on the box, scroll down and 
highlight  the apache profile and 
click “Next”
2. the apache profile that we just 
created is shown here.
©  Novell Inc.  All rights reserved
33
What Else Can I Do?
Enable/Disable AppArmor 
and configure reporting 
and alerting
View a report showing 
AppArmor events and filter 
by program name, date, 
time, etc.
Update loaded profiles 
based on syslogged 
activity since last update
©  Novell Inc.  All rights reserved
34
Sub-process Confinement
Apache mod_perl and mod_php scripts
– Apache mod_apparmor applies new protection before 
interpreting scripts
– If a specific profile for that scrpt exists, it is used
– If no specific profile exists, then a default script profile is used
– Impact: don't need to run all CGIs with the full privilege of 
Apache just to get mod_perl efficiency
– The only known way to defend PHP code
Login Authentication
– Add a similar module to PAM: pam_armor
– Pre-authentication, sshd and logind are in a restrictive profile
– Post-authentication, can transition to per-user profile
©  Novell Inc.  All rights reserved
35
YaST Integration
©  Novell Inc.  All rights reserved
36
Command-line Interface
There is also a command-line interface
• for those of us allergic to mice :-)
©  Novell Inc.  All rights reserved
37
GAIM Profile
Console Tools
• Create the profile template
– cd /opt/gnome/bin
– genprof gaim
• Exercise GAIM
– start, chat, stop
• Create profile entries
– [S]can log for profile entries
– [F]inish (GAIM profile is loaded)
• View profile
– vim opt.gnome.bin.gaim
– syntax on
– set syntax=subdomain
Makes it safe to
talk to strangers
©  Novell Inc.  All rights reserved
38
Network-secure a System
©  Novell Inc.  All rights reserved
39
Network-secure a System
1.Pick an unconfined service from the list
2.Confine it the way we confined Apache and GAIM
3.Continue until all open ports lead to AppArmor profiles
Result:
– There is no way onto the machine except through an 
AppArmor profile
– AppArmor policy completely controls network access to the 
machine
– Nowhere near having profiled all software on the machine
Best Uses For AppArmor
©  Novell Inc.  All rights reserved
41
Best Targets for AppArmor
Any Company whose networked servers are 
running mission critical applications
Any organization with a high cost associated with 