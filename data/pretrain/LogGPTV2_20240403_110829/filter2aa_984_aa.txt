# Securing Linux Systems with AppArmor

## Crispin Cowan, PhD
**Director of Software Engineering & Security Architect, SUSE Linux**

### Overview
- **Introduction to AppArmor**
  - Easy-to-use security for Ubuntu Linux
  - What is AppArmor and why should you care?

### Agenda
1. **Overview**
2. **A Closer Look at AppArmor**
3. **Deployment Scenarios**
4. **Demonstration of AppArmor**
5. **Competitive Positioning**
6. **AppArmor Futures**

---

## The Software Security Problem
- **Problem**: Imperfect software.
  - Reliable software does what it is supposed to do.
  - Secure software does what it is supposed to do and nothing else.
- **Solution**: Use only perfect software.
  - However, there is a significant supply problem.

---

## The AppArmor Solution
- **Enforcement**: Ensure applications only perform their intended functions.
  - **What means "do"?**
    - At the most detailed level, this is the code itself.
    - But we can't get that right.
    - We need something simpler and more abstract.
  - **Resources**: Restrict applications to access only the OS resources they need.

---

## Practical Application
- **Securing a Server Network**:
  - Confine all programs with open network ports.
  - If all open ports lead to confined processes, you have defined a policy for what a network user or attacker can do.
  - This is far from creating a policy for the entire system.

---

## Is It Really Secure?
- **Security is semi-decidable**:
  - You can only tell when something is insecure.
  - Hence, many Defcon talks focus on breaking things rather than securing them.
- **Practical Test**:
  - Compete at Defcon and let people try to break it.

---

## Defcon Capture the Flag (CtF) 2002-5
- **Real-World Red Teaming**:
  - Play an Immunix server in the Defcon CtF games.
  - Almost no holds barred, except for flooding and physical attacks.
  - New gaming rig designed by the Ghettohackers.

### Basic Defcon CtF Rules
- **Player Nodes**:
  - Score'bot polls player nodes, looking for required services.
  - If all services are found, score one point for the flag currently on that node.
  - Teams try to replace others' flags.

---

## A Closer Look at AppArmor
- **Linux 2.6 Kernel Architecture**:
  - **Components**:
    - Desktop Application
    - Server Application
    - YaST Console
    - Reporting & Alerting
  - **AppArmor Module**:
    - Uses the LSM (Linux Security Module) interface.
    - Provides in-kernel mediation without maintaining a patched kernel.
    - Offers precise information on application behavior, accuracy, and performance.
    - Ensures non-bypassable mediation.

---

## Critical Issues
1. **Complete Mediation**:
   - Must not be possible to bypass the HIPS system.
   - Must be in the kernel.
   - AppArmor uses the LSM interface in the 2.6 kernel.
2. **Security Model**:
   - **Misuse Prevention vs. Anomaly Prevention**:
     - Misuse prevention is easier to manage.
     - Anomaly prevention is more secure but traditionally hard to use.
   - **AppArmor**:
     - Easy anomaly prevention for application security.
     - Name-based access control for ease of understanding policy.
     - Hybrid white list/black list.
     - White list within an application profile.
     - Black list system-wide.

---

## AppArmor Security Profile
- **Example: ntpd**:
  - Controls POSIX capabilities and file/directory access.
  - Example profile for ntpd:
    ```plaintext
    /usr/sbin/ntpd {
      #include <abstractions/base>
      #include <abstractions/nameservice>
      capability ipc_lock,
      capability net_bind_service,
      capability sys_time,
      capability sys_chroot,
      capability setuid,
      /etc/ntp.conf r,
      /etc/ntp/drift* rwl,
      /etc/ntp/keys r,
      /etc/ntp/step-tickers r,
      /tmp/ntp* rwl,
      /usr/sbin/ntpd rix,
      /var/log/ntp w,
      /var/log/ntp.log w,
      /var/run/ntpd.pid w,
      /var/lib/ntp/drift rwl,
      /var/lib/ntp/drift.TEMP rwl,
      /var/lib/ntp/var/run/ntp/ntpd.pid w,
      /drift/ntp.drift rwl,
      /drift/ntp.drift.TEMP rwl,
    }
    ```

---

## Automated Workflow and Native Unix Syntax
- **Automated Workflow**:
  - Simplifies the process of creating and managing profiles.
- **Native Unix Syntax and Semantics**:
  - Complements Unix permissions.
  - Regular expressions in AppArmor rules.
  - Examples:
    - `/dev/{,u}random` matches `/dev/random` and `/dev/urandom`.
    - `/lib/ld-*.so*` matches most libraries in `/lib`.
    - `/home/*/.plan` matches everyone’s `.plan` file.
    - `/home/*/public_html/**` matches everyone’s public HTML directory tree.

---

## Profile Building Blocks
- **Foundation Class Rules**:
  - Base, authentication, console, Kerberos, nameservice, wutmp.
- **Default Set of Policies**:
  - Loaded: `netstat`, `ping`, `klogd`, `syslog`, `ldd`, `squid`, `traceroute`, `identd`, `mdnsd`, `named`, `nscd`, `ntpd`.
  - Available: `firefox`, `opera`, `evolution`, `gaim`, `realplay`, `postfix`, `acroread`, `mysqld`, `ethereal`, `sendmail`, and many more.

---

## AppArmor Demonstration
- **Apache Profiling**:
  - Local Apache web server running a vulnerable PHF script.
  - Exploit the PHF vulnerability to deface the web page.
  - Develop profiles for Apache and the PHF app.
  - Try the hack again; the hack fails.

### The Setup
1. Open a terminal window and type `demoreset.sh` to reset the demo.
2. Open a second terminal window and use the `tail` command to view the syslog.
3. Open a browser and click on the “Digital Airlines” bookmark to bring up the demo homepage.
4. Open YaST and click on the AppArmor icon to bring up the AppArmor control center.

### The Hack
1. Click the “PHF” bookmark to pull up the vulnerable PHF application.
2. Click the “Hack” bookmark to run the hack that defaces the homepage.
3. Click the “Digital Airlines” bookmark to show that the homepage has been defaced.
4. Click the “Unhack” bookmark to reset the homepage, then click on the Digital Airlines bookmark.

### Choosing the Application
1. In YaST, click the Add Profile Wizard to select the app to be profiled.
2. Type the path to Apache as shown (or browse to it).
3. The wizard tells you to start the target app and exercise its functionality.

### Exercising Apache
1. At the command line, restart Apache as shown.
2. Visit the homepage and the PHF application.
3. Back in YaST, click on the “Scan” button to start developing policy.

### Creating AppArmor Policy
1. The Wizard asks if the PHF app should have its own profile. Click “Profile” and “Allow.”
2. The Wizard notices Apache needs POSIX capabilities. Allow all of them.
3. The Wizard asks about a file accessed by Apache. Click “Glob” twice to allow read access to all files in the Apache2 directory, then “Allow.”
4. The Wizard suggests including the nameservice abstraction for `/etc/group`.

### Blocking the Attack
1. Try the hack again and see that the home page remains intact.
2. Check the syslog for a “REJECT” entry, indicating the attack was blocked by the new AppArmor profiles.

### Reviewing the Apache Policy
1. In the YaST control center, click on “Edit Profile” to view the list of profiles.
2. Highlight the Apache profile and click “Next” to view the created profile.

### Additional Features
- **Enable/Disable AppArmor** and configure reporting and alerting.
- **View Reports** showing AppArmor events, filtered by program name, date, time, etc.
- **Update Loaded Profiles** based on syslogged activity since the last update.

### Sub-process Confinement
- **Apache mod_perl and mod_php scripts**:
  - Apply new protection before interpreting scripts.
  - Use specific profiles or a default script profile.
  - Impact: Don’t need to run all CGIs with full Apache privileges.
- **Login Authentication**:
  - Add a similar module to PAM: `pam_armor`.
  - Pre-authentication, `sshd` and `logind` are in a restrictive profile.
  - Post-authentication, transition to per-user profile.

### YaST Integration
- **Command-line Interface**:
  - For those who prefer the command line.

### GAIM Profile
- **Console Tools**:
  - Create the profile template.
  - Exercise GAIM.
  - Create profile entries.
  - View the profile.

### Network-Securing a System
1. Pick an unconfined service from the list.
2. Confine it the way Apache and GAIM were confined.
3. Continue until all open ports lead to AppArmor profiles.
- **Result**:
  - No way onto the machine except through an AppArmor profile.
  - AppArmor policy completely controls network access.
  - Not all software on the machine is profiled.

### Best Uses for AppArmor
- **Best Targets**:
  - Any company with mission-critical applications on networked servers.
  - Organizations with high costs associated with security breaches.

---

© Novell Inc. All rights reserved.