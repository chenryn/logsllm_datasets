## Page 211
### 7.9 漏洞分析

#### 内存泄漏检测
- 为了进行内存泄漏检测，可以使用特定的调试库 `libc_malloc_debug_leak.so`。
- 此外，可以通过添加预分配和后分配存根来检测 `CHK_SENTINEL_VALUE` 和 `CHK_FILL_PRE` 宏，以识别缓冲区溢出。

#### 配置步骤
配置这些属性需要 root 权限，并且需要将 `libc_malloc_debug_leak.so` 库文件放入 `/system/lib` 目录中。这要求暂时将 `/system` 分区重新挂载为可读写模式。该动态库位于 AOSP 编译输出的 `out/target/product/maguro/obj/lib` 目录下。以下是整个配置过程的示例：

```bash
dev:~/android/source $ adb push out/target/product/maguro/obj/lib/libc_malloc_debug_leak.so /data/local/tmp
587 KB/s (265320 bytes in 0.440s)
shell@maguro:/ $ su
dev:~/android/source $ adb shell
root@maguro:/ # mount -o remount,rw /system
root@maguro:/ # cat /data/local/tmp/libc_malloc_debug_leak.so > /system/lib/libc_malloc_debug_leak.so
root@maguro:/ # mount -o remount,ro /system
root@maguro:/ # setprop libc.debug.malloc 5
root@maguro:/ # cd /data/local/tmp
root@maguro:/data/local/tmp # ps | grep system_server
system      379   125  623500  9920 tftfffff 40199304 S system_server
6 6- 1xd/e/ee/e0x
root@maguro:/data/local/tmp # logcat -d | grep -i debug
I/libc    ( 2994): /system/bin/bootanimation: using libc.debug.malloc 5
I/libc    ( 2999): /system/bin/netd: using libc.debug.malloc 5 (fill)
I/libc    ( 3001): /system/bin/iptables: using libc.debug.malloc 5 (fill)
I/libc    ( 3002): /system/bin/ip6tables: using libc.debug.malloc 5 (fill)
I/libc    ( 3003): /system/bin/iptables: using libc.debug.malloc 5 (fill)
I/libc    ( 3000): /system/bin/app_process: using libc.debug.malloc 5
( 3004): /system/bin/ip6tables: using libc.debug.malloc 5 (fill)
```

不幸的是，在 Android 4.3 上使用这个调试工具测试一些公开漏洞的效果并不理想。希望在未来版本的 Android 中能够改进这种情况。无论如何，这个调试工具至少为未来开发更稳定的堆调试工具奠定了基础。

### 监视点
监视点是一种特殊的断点，当指定内存发生某种操作时才会触发。在 x86 和 x64 平台上，监视点通过硬件断点实现，在内存读写操作时通知研究人员。然而，大多数 ARM 处理器没有硬件断点支持，但可以通过软件实现监视点。尽管软件监视点依赖于单步执行，速度较慢且开销较大，但在追踪特定变量值变化时非常有用。

例如，如果研究人员知道某个对象的成员变量在对象创建后发生了改变，可以在对象创建时设置一个断点。当程序到达断点时，使用 GDB 的 `watch` 命令创建一个监视点。继续执行会发现速度变慢很多。当程序修改变量值后，GDB 会在修改后的下一条指令处暂停。这种技术有助于研究人员成功定位代码位置。

### 断点
能够创建新断点的断点是非常强大的工具，也称为互相依赖的断点。其主要用途是消除噪音。假设在 `main_event_loop` 函数调用时发生了堆内存破坏，而这个函数会被频繁调用。为了找到问题的根源，需要理解在内存破坏发生时程序正在处理哪些内存块。如果在 `main_event_loop` 上设置一个断点，执行就会不断被打断。如果研究人员知道内存破坏源自某个特定输入，并且知道哪些代码负责处理相应输入，就可以在那里插入一个断点。当断点被命中时，再在 `main_event_loop` 上设置一个断点。如果运气较好，首次命中的新断点就是崩溃发生的调用点。前面那些没有引发内存破坏的所有成功调用都被忽略（并且没有额外性能开销）。在这种情况下，使用互相依赖的断点可以帮助分析人员缩小内存破坏的发生范围。

---

## Page 212
### 2. 分析 WebKit 崩溃

分析漏洞的起源是一个迭代的过程。要跟踪一个漏洞，通常需要多次运行崩溃的测试样例。虽然可以把调试器附加到进程上，但这并不能立即揭示问题的根源。向后追溯数据流和控制流（包括过程间的控制流）才是关键所在。

以下是一个演示，研究一个能够让搭载 Android 4.3 的 Galaxy Nexus 浏览器崩溃的 HTML 文件。有趣的是，Android 上的稳定版和 beta 版 Chrome 都不受影响。我们将使用本章前面介绍的一些技术和调试方法来找到崩溃的根源。

让浏览器反复崩溃几次，然后查看 tombstone 文件会很有帮助：寄存器的值包含一些有用的信息。以下列出了多次加载页面导致崩溃的情况：

```bash
root@maguro:/data/tombstones + /data/local/tmp/busybox head -n * | grep pc
ip 00000001
sp 5e8003cB1x 5d46fee5pc 5a50ec48cpsr 200e0010
ip 00000001
bp 5ddba3c8
lr 5c865ee5
pc 00000000cpsr 200f0010
pe 5e5fc2b8
ip 00000001
sp 5dede3c8
lr 5ca4bee5
pc 60538ad0cpsr 200e0010
ip 00000001
09000699 ds
lr 5d46fee5
pc 5a90bf80 cpsr 200e0010
ip 00000001
88900699d8
lr 5d46fee5
pc 5a518d20
cpsr 200f0010
ip 00000001
88900q99ds
lr 5d46fee5
ip 00000001sp 5ea003c8lr 5d46fee5 pc 5edfa268cp8r 200f0010
```

从上面的结果可以看出，每次崩溃的地方都明显不同。PC 寄存器（与 x86 下的 EIP 类似）的值都不同，而且都很奇怪，这在很大程度上表明这是一个释放后重用（use-after-free）漏洞。为了确定并了解漏洞产生的原因，需要进一步深入分析。

为了获得更多信息，需要使用本章开头搭建的 native 层代码调试环境。跟之前一样，在主机上后台运行 shell 脚本 `debugging-sh`。这个脚本会调用设备上的 shell 脚本 `attach.sh`，让浏览器访问 `about:blank` 页面，等待一段时间后附加到 GDB 服务器上。然后，在主机上运行 GDB 客户端并加载 GDB 脚本，连接等待着的 GDB 服务器。

```bash
dev:gn-browser-dbg $ arm-eabi-gdb -q -x script.gdb app_process
dev:~/android/source $ ./debugging-sh &
[1] 28994
Reading symbols from /android/source/gn-browserdbg/app_process...done.
warning: Could not load shared library symbols for some libraries, e.g. libm.
Use the "info sharedlibrary" command to see the complete listing.
epoll_wait () at bionic/lib/arch-arm/syscalls/epoll_wait.S:10
warning: Breakpoint address adjusted from 0x40079b79 to 0x40079b78.
(gdb) cont
Continuing
```

调试器附加到进程上继续执行，然后打开导致崩溃的 HTML 页面。可以使用 `am start` 命令让浏览器访问指定页面。

```bash
shell@maguro:/ $ am start -a android.intent.action.VIEW -d http://evil-site.com/crash1.html com.google.android.browser
```

可能需要多次加载页面才会发生崩溃。一旦崩溃发生，就可以开始深入分析了。

```bash
Program received signal SIGSEGV, Segmentation fault.
#0  0x00000000 in ?? ()
(gdb)
```

浏览器崩溃时 PC 寄存器被置 0 了！这显然是一个严重的错误。可能造成这种情况的因素有很多，所以需要查明确切原因。

首先在调用栈寻找线索。以下是 GDB 的 `backtrace` 命令产生的输出：

```gdb
(gdb) backtrace
#0  0x00000000 in ?? ()
#1  0x5d46fee4 in webCore::Node::parentNode (this=0x5a621088) at external/webkit/Source/WebCore/dom/Node.h:731
#2  0x5d6748e0 in WebCore::ReplacementFragment::removeNode (this=..., fragment=..., matchStyle=..., selectLon...) at external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.cpp:...
#3  0x5d6764c2 in WebCore::ReplaceSelectionCommand::doApply (this=0x5a621800) at external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.cpp:...
#4  0x5d66701e in WebCore::EditCommand::apply (this=0x5a621800) at external/webkit/Source/WebCore/editing/EditCommand.cpp:92
#5  0x5d66e2e2 in WebCore::executeInsertFragment (frame=..., fragment=...) at external/webkit/Source/WebCore/editing/EditorCommand.cpp:194
#6  0x5d66e328 in WebCore::executeInsertHTML (frame=0x5aa65690, value=..., ...) at external/webkit/Source/WebCore/editing/EditorCommand.cpp:492
#7  0x5d66d3d4 in WebCore::Editor::Command::execute (this=0x5ea0068c, parameter=..., triggeringEvent=0x0) at external/webkit/Source/WebCore/editing/EditorCommand.cpp:1644
#8  0x5d5491a4 in WebCore::Document::execCommand (this=0x5aalac80, commandName=..., userInterface=..., value=...) at external/webkit/Source/WebCore/dom/Document.cpp:4053
#9  0x5d5e7df6 in WebCore::DocumentInternal::execCommandCallback (args=...) at .../libwebcore_intermediates/Source/WebCore/bindings/V8Document.cpp:1473
#10 0x5d78dc22 in HandleApiCallHelper (isolate=0x4173c468, args=...) at ...
```

---

## Page 213
### 7.9 漏洞分析

调试器附加到进程上继续执行，然后打开导致崩溃的 HTML 页面。可以使用 `am start` 命令让浏览器访问指定页面。

```bash
shell@maguro:/ $ am start -a android.intent.action.VIEW -d http://evil-site.com/crash1.html com.google.android.browser
```

可能需要多次加载页面才会发生崩溃。一旦崩溃发生，就可以开始深入分析了。

```bash
Program received signal SIGSEGV, Segmentation fault.
#0  0x00000000 in ?? ()
(gdb)
```

浏览器崩溃时 PC 寄存器被置 0 了！这显然是一个严重的错误。可能造成这种情况的因素有很多，所以需要查明确切原因。

首先在调用栈寻找线索。以下是 GDB 的 `backtrace` 命令产生的输出：

```gdb
(gdb) backtrace
#0  0x00000000 in ?? ()
#1  0x5d46fee4 in webCore::Node::parentNode (this=0x5a621088) at external/webkit/Source/WebCore/dom/Node.h:731
#2  0x5d6748e0 in WebCore::ReplacementFragment::removeNode (this=..., fragment=..., matchStyle=..., selectLon...) at external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.cpp:...
#3  0x5d6764c2 in WebCore::ReplaceSelectionCommand::doApply (this=0x5a621800) at external/webkit/Source/WebCore/editing/ReplaceSelectionCommand.cpp:...
#4  0x5d66701e in WebCore::EditCommand::apply (this=0x5a621800) at external/webkit/Source/WebCore/editing/EditCommand.cpp:92
#5  0x5d66e2e2 in WebCore::executeInsertFragment (frame=..., fragment=...) at external/webkit/Source/WebCore/editing/EditorCommand.cpp:194
#6  0x5d66e328 in WebCore::executeInsertHTML (frame=0x5aa65690, value=..., ...) at external/webkit/Source/WebCore/editing/EditorCommand.cpp:492
#7  0x5d66d3d4 in WebCore::Editor::Command::execute (this=0x5ea0068c, parameter=..., triggeringEvent=0x0) at external/webkit/Source/WebCore/editing/EditorCommand.cpp:1644
#8  0x5d5491a4 in WebCore::Document::execCommand (this=0x5aalac80, commandName=..., userInterface=..., value=...) at external/webkit/Source/WebCore/dom/Document.cpp:4053
#9  0x5d5e7df6 in WebCore::DocumentInternal::execCommandCallback (args=...) at .../libwebcore_intermediates/Source/WebCore/bindings/V8Document.cpp:1473
#10 0x5d78dc22 in HandleApiCallHelper (isolate=0x4173c468, args=...) at ...
```

---

## Page 214
### 198 第7章 调试与分析安全漏洞

从调用栈可以看出，崩溃发生在 `WebCore::Node::parentNode` 函数中。进一步分析可以发现，崩溃的原因可能是由于 `parentNode` 函数试图访问一个已经被释放的对象。这通常是由释放后重用（use-after-free）漏洞引起的。

为了进一步确认这一点，可以检查相关对象的生命周期管理代码，确保对象在使用前未被释放。此外，还可以使用内存泄漏检测工具和其他调试工具来辅助分析。

通过这些步骤，可以逐步缩小问题范围，最终定位并修复漏洞。