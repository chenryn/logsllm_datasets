(cid:170)(cid:174)(cid:172)
= λ ¯q + (q − ¯q) · p ¯q
βFSB(q) ≤ λ ¯q.
To (cid:128)nd a lower bound on Advb-gs
For q ≤ ¯q, we have Advb-gs
q be the q−¯q
passwords in α(b) \ W ¯q with the highest probability of occurring,
βFSB(q), let w∗
¯q+1, . . . , w∗
β (q)
Corr-GuessA
(u, w1) ←p U × W
w2 ←τ(u,w1) W \ ˜Sw
b1 ← β(w1); b2 ← β(w2)
{ ˜w1, . . . , ˜wq } ← A(u, b1, b2)
return w2 ∈ { ˜w1, . . . , ˜wq }
>
(cid:170)(cid:174)(cid:174)(cid:172)
b
i =1
(cid:169)(cid:173)(cid:173)(cid:171)
≥ λ ¯q +
b
w ∈W ¯q


i = ¯q+1
i )
max
w1, ...,wq
∈α(b)
ˆps(wi)
|βFSB(wi)|
ˆps(w)
|B| +
q
(cid:25)
(cid:24)|B| · ˆps(w∗
Figure 12: A game to describe a simple correlated password
query scenario. Here, we let ˜Sw be the set of all passwords
in the breach dataset.
according to ˆps(·).
q

q
q
q
ˆps(w
i = ¯q+1
(cid:140)erefore, ∆q ≥ λq−λ ¯q2
Note, for every password to be assigned to a bucket, |B| ≥
ˆps(w ¯q)/ ˆps(w), or for all w ∈ W,
D ATTACKS ON CORRELATED PASSWORD
ˆps(w ¯q)
|B| · ˆps(w∗
i )
ˆps(w ¯q)
|B| +
ˆps(w∗
i )
∗
i )/2 ≥ λ ¯q + (λq − λ ¯q)/2 =
ˆps(w ¯q)
ˆps(w ¯q)
ˆps(w∗
i )
ˆps(w ¯q)
ˆps(w ¯q)
ˆps(w∗
i )
ˆps(w∗
i )
ˆps(w ¯q)
ˆps(w∗
i )·|B|
λq + λ ¯q
ˆps(w ¯q)
ˆps(w)·|B| ≤ 1.
q
i = ¯q+1
1 +
≥ λ ¯q +
≥ λ ¯q +
≥ λ ¯q +
|B| +
·
|B| +
i = ¯q+1
i = ¯q+1
2
.
QUERIES
An adversary might gain additional advantage in guessing pass-
words underlying C3 queries when queries are correlated. For exam-
ple, when creating a new password, a client might have to generate
multiple passwords until the chosen password is not known to be
in a leak. (cid:140)ese human-generated passwords are o(cid:137)en related to
each other. Users also pick similar passwords across di(cid:130)erent web-
sites [24, 40, 41, 47]. If such passwords are checked with a C3 server
(maybe by a password manager [5]), and the a(cid:138)acker could identify
multiple queries from the same user (for example, by joining based
on the IP address of the client), then the a(cid:138)acker could mount an
a(cid:138)ack on the correlated queries. As we described, the adversary
does need a lot of information to mount such an a(cid:138)ack, but the
idea is worth exploring, since a(cid:138)acks on correlated queries have
not been analyzed before.
Let {τ(u,w)} be a family of distributions, such that for a given
u ∈ U, w ∈ W, τ(u,w) models a probability distribution across all
passwords related to w for the user u. For example, the probability
of user u choosing a password w2 given that they already have
password w1 is τ(u,w1)(w2).
(cid:140)e a(cid:138)ack game for correlated password queries is given in
Figure 12. A client (cid:128)rst picks a password w1 for some web service
and learns that the password is present in a leaked data. (cid:140)e client
then picks another password w2, potentially correlated to w1, that
is not known to be in a leak and is accepted by the web service.
(For simplicity, we only consider two a(cid:138)empts to create a password.
However, our analysis can easily be extended to more than two
a(cid:138)empts.) In the game, the password w2 is chosen from the set of
passwords not stored by the server, according to the distribution of
passwords from the transformation of w1. (cid:140)e adversary, given the
buckets b1 and b2, tries to guess the (cid:128)nal password, w2.
To (cid:128)nd the most likely password given the buckets accessed (the
maximum a posteriori estimation), an adversary would want to
calculate the following:
argmax
w
Pr[w2 = w | b1, b2]
Pr[b1, b2 | w2 = w] · Pr[w2 = w]
Pr[b1, b2]
Pr[b1, b2 | w2 = w] · Pr[w2 = w] .
= argmax
w
= argmax
w
Note that we view b1, b2 as (cid:128)xed values for the two buckets, not
random variables, but we use the notation above to save space. We
can separate Pr[b1, b2 | w2 = w] into two parts.
Pr[b1, b2 | w2 = w] = Pr[b2 | w2 = w] · Pr[b1 | w2 = w, b2]
= Pr[b2 | w2 = w] · Pr[b1 | w2 = w]
(cid:140)e second step follows from the independence of b1 and b2 given
w2.
We know that the (cid:128)rst term Pr[b2 | w2 = w] will be 0 if the
password w does not appear in bucket b2. For FSB, the buckets that
do contain w have an equally probable chance of being the chosen
bucket. For HPB, only one bucket will have a nonzero probability
for each password.
(cid:40) 1
|β(w)|
0
if b2 ∈ β(w)
otherwise
.
Pr[b2 | w2 = w] =
Pr[b1 ∧ w1 | w2 = w]
Pr[w1 | w2 = w]
Pr[w2 = w | w1] · Pr[w1]
Pr[w2 = w]
.
(cid:140)en, to (cid:128)nd Pr[b1 | w2 = w], we need to sum over all pass-
words that are in b1. We de(cid:128)ne Sw as the set of all possible pass-
words.
w1∈Sw
w1∈α(b1)
Pr[b1 | w2 = w] = 
= 
= 
|β(w)| · Pr[w2 = w] · 
|β(w)| · Pr[w2 = w] · 
w1∈α(b1)
w1∈α(b1)
1
Combining the argmax expression with the equations above, the
adversary therefore needs to calculate the following to (cid:128)nd the
most likely w:
argmax
w ∈α(b2)
Pr[w2 = w | w1] · Pr[w1]
1
= argmax
w ∈α(b2)
τ(u,w1)(w) · Pr[w1].
(4)
In practice, it would be infeasible to compute the above values
exactly. For one, the set of all possible passwords is very large, so it
w1∈α(b1)
would be di(cid:129)cult to iterate over all of the passwords that could be
in a bucket. We also don’t know what the real distribution τ(u,w)
is for any given u and w. For our simulations, we estimate the
set of all possible passwords in a bucket using the list constructed
by the a(cid:138)ack from Section 6. To estimate Pr[w2 = w | w1], we
use the password similarity measure described in [40], transform-
ing passwords into vectors and calculating the dot product of the
vectors.
To simulate the correlated-query se(cid:138)ing, we used the same
dataset as in Section 6. We (cid:128)rst trim the test dataset T down to
users with passwords both present in the leaked dataset and ab-
sent from the leak dataset. We then sample 5,000 of these users
and randomly choose the (cid:128)rst password from those present in the
leaked dataset and the second password from the ones not in the
leaked dataset. (cid:140)is sampling most closely simulates the situation
where users query a C3 server until they (cid:128)nd a password that is
not present in the leaked data. We assume, as before, the adversary
knows the username of the querying user.
For the experiment, we give the a(cid:138)acker access to the leak dataset
and the buckets associated with the passwords w1 and w2. Its goal is
to guess the second password, w2. (cid:140)e a(cid:138)acker (cid:128)rst narrows down
the list constructed in the a(cid:138)ack from Section 6 to only passwords
in bucket b2. As a reminder, we refer to this list of passwords as
˜α(b2). (cid:140)e a(cid:138)acker then computes the similarity between every pair
of passwords in ˜α(b2) × ˜α(b1), which is ˜α(b1) times the complexity
of running a single-query a(cid:138)ack (as described in Section 6).
It
reorders the list of passwords ˜α(b2) using an estimate of the value
in Equation (4).
(cid:140)e results of this simulation are in Figure 13. We also measured
the success rate of the baseline and regular single-query a(cid:138)acks on
recovering the same passwords w2.
It turns out that this correlated a(cid:138)ack performs signi(cid:128)cantly
worse than the single-query a(cid:138)ack when the passwords are buck-
etized using HPB. For FSB, the correlated a(cid:138)ack performs be(cid:138)er,
but not by a large amount. Although there is an improvement in
the correlated a(cid:138)ack success for FSB, the overall success rate of the
a(cid:138)ack is still worse than both a(cid:138)acks against HPB.
(cid:140)e overall low success rate of the correlated a(cid:138)acks is likely
due to the error in estimating the password similarity, τ(·,w1)(w).
(cid:140)ough the similarity metric proposed by [40] is good enough for
generating ordered guesses for a targeted a(cid:138)ack, it doesn’t quite
match the type of correlation among passwords used in the test
Protocol
Baseline
HPB (l = 16)
FSB ( ¯q = 102)
A(cid:138)ack
single-query
single-query
correlated
single-query
correlated
q = 1
0.2
18.8
8.8
0.2
2.7
10
1.0
31.9
10.3
1.0
3.3
102
2.9
45.9
13.0
2.9
4.6
103
6.4
58.4
26.0
8.4
11.5
Figure 13: Comparison of attack success rate given q queries
on our correlated password test set. All success rates are in
percent (%) of the total number of samples (5,000) guessed
correctly.
set. Even though we picked two passwords from the same user for
each test point, the passwords were generally not that similar to
each other. About 7% of these password pairs had an edit distance
of 1, and only 14% had edit distances of less than 5. (cid:140)e similarity
metric we used to estimate τ(·,w1)(w) heavily favors passwords that
are very similar to each other.
(cid:140)e single-query a(cid:138)ack against HPB does quite well already,
so the correlated a(cid:138)ack likely has a lower success rate because
it rearranges the passwords in ˜α(b2) according to their similarity
to the passwords in ˜α(b1). In reality, only a small portion of the
passwords in the test set are closely related. On the other hand,
the construction of FSB results in approximately equal probabilities
that each password in the bucket was chosen, given knowledge of
the bucket. We expect that the success rate for the correlated a(cid:138)ack
against FSB is higher than that of the single-query a(cid:138)ack because
the reordering helps the a(cid:138)acker guess correctly in the test cases
where the two sampled passwords are similar.
We believe the error in estimation is ampli(cid:128)ed in the a(cid:138)ack
algorithm, which leads to a degradation in performance. If the
a(cid:138)acker knew τ perfectly and could calculate the exact values in
Equation (4), the correlated-query a(cid:138)ack would perform be(cid:138)er than
the single-query a(cid:138)ack. However, in reality, even if we know that
two queries came from the same user, it is di(cid:129)cult to characterize
the exact correlation between the two queries. If the estimate is
wrong, then the success of the correlated-query a(cid:138)ack will not
necessarily be be(cid:138)er than that of the single-query a(cid:138)ack. Given
that our a(cid:138)ack did not show a substantial advantage for a(cid:138)ackers,
it is still an open question to analyze how damaging a(cid:138)acks on
correlated queries can be.