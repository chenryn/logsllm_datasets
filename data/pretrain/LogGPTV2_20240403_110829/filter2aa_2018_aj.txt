30 b1 e5 bb ef 01 00 00-00 00 00 00 00 00 00 00
0...............
000001ef‘b9d1a2a0
00 00 00 00 00 00 00 00-20 00 00 00 b9 f0 65 ef
........ .....e.
000001ef‘b9d1a2b0
0a 27 33 62 0d 92 3d 2a-1e ba 24 3b 9a 1d 94 a8
.’3b..=*..$;....
000001ef‘b9d1a2c0
70 d4 b5 ab 08 18 d6 f8-d8 04 1d 07 00 00 00 00
p...............
000001ef‘b9d1a2d0
b9 f0 65 ef 0a 27 33 62-0d 92 3d 2a 1e ba 24 3b
..e..’3b..=*..$;
**
0:000> dps 000001ef‘b9d1a1e0 L5
000001ef‘b9d1a1e0
73736c33‘00000d2e
000001ef‘b9d1a1e8
00000000‘00000303
000001ef‘b9d1a1f0
00007ffc‘d8571990 ncryptsslp!CipherSuiteList+0x1400
000001ef‘b9d1a1f8
00000000‘00000001
000001ef‘b9d1a200
000001ef‘b9d1a250
Figure 4.12. Non-LSASS SSL session key (ssl3) data structure
73
’_SSL_SESSION_KEY’: [ 0x0d2e, {
’Length’: [0x0, [’unsigned long’]],
’Magic’: [0x4, [’unsigned long’]],
’Protocol’: [0x8, [’unsigned char’]],
’CipherSuite’: [0x10, [’pointer64’, [’_SSL_CIPHER_SUITE_LIST_ENTRY’]]],
’IsWriteKey’: [0x18, [’Enumeration’, dict(target = ’unsigned long’, choices={0: False, 1: True})
]],
’BcryptKey’: [0x20, [’pointer64’, [’void’]]],
// RUUU Bcrypt Key struct pointed to by pointer
// MSSK struct pointed to by RUUU
}]
Figure 4.13. Non-LSASS SSL session key (ssl3) V-Type data structure (x64)
The ﬁnal key structures to be discussed in this section are ssl4 and ssl6.
These two structures contain identical members, which is logical when considering
that ssl6 appears to be the ephemeral version of ssl4 (the Public/Private key pair).
In the case of a cipher suite like TLS ECDHE RSA AES 256 CBC SHA384, both
the ssl4 and ssl6 structures should exist, as an ephemeral key pair is created for the
key exchange and the persistent key is used for signing. Because the two are so
similar, they will be discussed simultaneously with deviations contrasted as
appropriate. The manifested C structures can be seen in Figure 4.14.
74
typedef struct _SSL4_Struct {
ULONG cbLength,
// The count in bytes (cb), of the structure
ULONG dwMagic,
// a dword (dw) of the ascii value ’ssl6’ [stored as ’6lss’]
ULONG dwUnknown1,
// usually 0x01000300 -> 0x00030001
ULONG dwUnknown2,
// always 0 -> padding?
PVOID pvKspProvider,
//
PVOID pvKspKey
//
} SSL4_Struct, *PSSL4_Struct;
typedef struct _SSL6_Struct {
ULONG cbLength,
// The count in bytes (cb), of the structure
ULONG dwMagic,
// a dword (dw) of the ascii value ’ssl6’ [stored as ’6lss’]
ULONG dwUnknown1,
// usually 0x0003000a or
0x00030007
ULONG dwUnknown2,
// always 0 -> padding?
PVOID pvKspProvider,
//
PVOID pvKspKey
//
} SSL6_Struct, *PSSL6_Struct;
Figure 4.14. SSL ephemeral key (ssl6) and key pair (ssl4) C data structures
The two pointers in the structure both reference an interstitial structure,
containing a header and series of pointers. The author named “KspProvider”
pointer eventually points to the Unicode string “ncryptsslp.dll” and the binary of
that module.
The second “KspKey” pointer is so named because the interstitial structure
it references then itself points to another data structure with the magic value
“KPSK,” or “KSPK” in Big Endian. Following the same procedures employed
previously, it was found that all KSPK references occur inside of “ncryptprov.dll,”
and a validate function exists named “KspValidateKeyHandle.” Microsoft’s CNG
documentation suggests that “KSP” refers to “Key Storage Provider” (Microsoft,
2014b), which seems to be logical in this context.
75
0:000> .foreach(srvK {s -[w1]a 0 L?80000000000000 4lss}){.echo **ServKey**;dpp ${srvK}-4 L4}
**ServKey**
0000005e‘e725e840
73736c34‘00000020
0000005e‘e725e848
00000000‘00030001
0000005e‘e725e850
0000005e‘e72141a0 00000003‘44440001
0000005e‘e725e858
0000005e‘e725d710 00000000‘44440002
**ServKey**
0000005e‘e72cf9c0
73736c34‘00000020
0000005e‘e72cf9c8
00000000‘00030001
0000005e‘e72cf9d0
0000005e‘e72141a0 00000003‘44440001
0000005e‘e72cf9d8
0000005e‘e72f8e50 00000000‘44440002
0:000> dpp 0000005e‘e72f8e50 L4
0000005e‘e72f8e50
00000000‘44440002
0000005e‘e72f8e58
0000005e‘e72141a0 00000003‘44440001
0000005e‘e72f8e60
0000005e‘e720bd20 4b53504b‘00000208
0000005e‘e72f8e68
0000005e‘e72f8e70 00650053‘00530054
0:000> dc 0000005e‘e720bd20 L2
0000005e‘e720bd20
00000208 4b53504b
....KPSK
0:000> dpu 0000005e‘e720bd20 Ldwo(0000005e‘e720bd20)/$ptrsize
0000005e‘e720bd20
4b53504b‘00000208
0000005e‘e720bd28
0000005e‘e72cfaa0 "TSSecKeySet1"
0000005e‘e720bd30
0000005e‘e72f4cb0 "f686aace6942fb7f7ceb231212eef4a4_f928a10b-2557-4456-b0e"
0000005e‘e720bd38
00000800‘00000001
0000005e‘e720bd40
00000000‘00000001
0000005e‘e720bd48
00000001‘00ffffff
0000005e‘e720bd50
0000005e‘e72fb920 "Microsoft Strong Cryptographic Provider"
0000005e‘e720bd58
00007ffa‘366e6a90 ".
"
0000005e‘e720bd60
0000005e‘e72cfbc0 "C:\ProgramData"
Figure 4.15. SSL key pair (ssl4) provider Dereference
The author was able to further identify the encrypted private key blob from
this structure by taking the known key ﬁle from disk for RDP and comparing it to a
DPAPI blob that one of the pointers referenced (at o↵set 0xd0 on 64-bit systems
and 0x7c on 32-bit systems in KPSK structures that were pointed to by ssl4
structures. This is only mentioned anecdotally, as only RDP was tested, so its
possible that other private keys may appear elsewhere in the structure. An example
of the ﬁrst part of the DPAPI blob (matching what was on disk) can be seen in
76
Figure 4.16. The equivalent was not true of KPSK structures pointed to by ssl6 (the
ephemeral key pair).
0:000> .foreach(ephemK {s -[1w]a 0 L?80000000000000 4lss}){.echo **;db poi(poi(poi(${ephemK}-4+8+(2*
$ptrsize))+(2*$ptrsize))+d0) L100}
**
0000005e‘e678ec70
01 00 00 00 d0 8c 9d df-01 15 d1 11 8c 7a 00 c0
.............z..
0000005e‘e678ec80
4f c2 97 eb 01 00 00 00-81 7e 1f 3d 16 c8 58 46
O........~.=..XF
0000005e‘e678ec90
83 4b 08 20 12 5a 67 94-04 00 00 00 2c 00 00 00
.K. .Zg.....,...
0000005e‘e678eca0
43 00 72 00 79 00 70 00-74 00 6f 00 41 00 50 00
C.r.y.p.t.o.A.P.
0000005e‘e678ecb0
49 00 20 00 50 00 72 00-69 00 76 00 61 00 74 00
I. .P.r.i.v.a.t.
0000005e‘e678ecc0
65 00 20 00 4b 00 65 00-79 00 00 00 10 66 00 00
e. .K.e.y....f..
0000005e‘e678ecd0
00 01 00 00 20 00 00 00-ac 89 d9 c9 56 ce e4 d8
.... .......V...
0000005e‘e678ece0
41 fd 32 4a 1d 29 61 77-64 d4 51 10 e5 e1 23 fe
A.2J.)awd.Q...#.
0000005e‘e678ecf0
38 78 30 c3 d8 95 7e 2a-00 00 00 00 0e 80 00 00
8x0...~*........
0000005e‘e678ed00
00 02 00 00 20 00 00 00-b3 8e 99 58 cd 4c 1e 55
.... ......X.L.U
0000005e‘e678ed10
d8 aa 2c b9 24 6b e8 c1-19 a5 ab f4 33 49 be 69
..,.$k......3I.i
0000005e‘e678ed20
20 11 09 98 9d 37 68 67-50 05 00 00 c5 df e0 93
....7hgP.......
0000005e‘e678ed30
9d 28 65 31 ee 8d 18 eb-d4 da f0 04 13 ed 81 c5
.(e1............
0000005e‘e678ed40
c1 bb d2 ca d8 1b 39 35-4c 4c 0d 20 df d3 f6 a0
......95LL. ....
0000005e‘e678ed50
48 54 2a 67 fc a5 11 66-c5 18 f5 96 b9 c3 b5 0a
HT*g...f........
0000005e‘e678ed60
88 7b e2 de ca 83 32 36-78 09 e4 29 61 43 07 de
.{....26x..)aC..
**
0000005e‘e678e600
01 00 00 00 d0 8c 9d df-01 15 d1 11 8c 7a 00 c0
.............z..
0000005e‘e678e610
4f c2 97 eb 01 00 00 00-81 7e 1f 3d 16 c8 58 46
O........~.=..XF
0000005e‘e678e620
83 4b 08 20 12 5a 67 94-04 00 00 00 2c 00 00 00
.K. .Zg.....,...
0000005e‘e678e630
43 00 72 00 79 00 70 00-74 00 6f 00 41 00 50 00
C.r.y.p.t.o.A.P.
0000005e‘e678e640
49 00 20 00 50 00 72 00-69 00 76 00 61 00 74 00
I. .P.r.i.v.a.t.
0000005e‘e678e650
65 00 20 00 4b 00 65 00-79 00 00 00 10 66 00 00
e. .K.e.y....f..
0000005e‘e678e660
00 01 00 00 20 00 00 00-ac 89 d9 c9 56 ce e4 d8
.... .......V...
0000005e‘e678e670
41 fd 32 4a 1d 29 61 77-64 d4 51 10 e5 e1 23 fe
A.2J.)awd.Q...#.
0000005e‘e678e680
38 78 30 c3 d8 95 7e 2a-00 00 00 00 0e 80 00 00
8x0...~*........
0000005e‘e678e690
00 02 00 00 20 00 00 00-b3 8e 99 58 cd 4c 1e 55
.... ......X.L.U
0000005e‘e678e6a0
d8 aa 2c b9 24 6b e8 c1-19 a5 ab f4 33 49 be 69
..,.$k......3I.i
Figure 4.16. Dereferenced KSPK private key DPAPI Blob
77
4.5 Conﬁrming the master key
In order to verify that the 5lss structure was indeed the master key, a quick
test was performed. Brieﬂy, the process was as follows:
1. Wireshark was started on Kali Linux
2. xfreerdp was launched to connect to the target through Peter Wu’s sslkeylog
bash wrapper
3. the library pre-loaded by the script transparently dumped the pre-master key
to a ﬁle
4. a process dump of LSASS was created on the target
5. the process dump was searched with HxD for the pre-master key from the ﬁle
This did conﬁrm that the master key was in memory, and that it was stored in the
ssl5 structure. This step was only performed once, and is not necessary to validate
ﬁndings. It is included here solely as a demonstration of another approach for
veriﬁcation.
4.6 Mapping master keys to session IDs
The analysis up until this point had not yielded a master key paired to a
unique public value for a given session, which is required to decrypt the session. The
master key structure only had a single pointer, which did not provide an avenue to
one of these unique values. For this reason, the approach was taken to inversely walk
the pointers by scanning for references to instantiated master key memory addresses.
Scanning for pointers to master key structures was successful and led to
identiﬁcation of a new interstitial structure in a di↵erent module. Speciﬁcally, every
master key was pointed to by a single structure with the Magic value “BDDD.”
Leveraging the methods employed previously, BDDD was noted to appear in
the Ncrypt module, and a “validate” function for this structure was identiﬁed: the
“ncrypt!ValidateSslKeyHandle” function. Two other validate functions existed, one
for the Hash (CDDD) and the other for the Provider (ADDD).
78
The BDDD structure will be referred to as the “NcryptSslKey” structure for
distinction. The NcryptSslKey structure bears resemblance to the ssl4 and ssl6
structures, constituted mainly by the size, magic, and two pointers. The ﬁrst
pointer is to the key structure, and the second is to an NcryptSslProvider (ADDD).
Armed with this information, the BDDD magic was used to scan memory for
additional key instances. This endeavor yielded several new NcryptSslKey instances
in addition to those found pointing to the master key structures. Dereferencing the