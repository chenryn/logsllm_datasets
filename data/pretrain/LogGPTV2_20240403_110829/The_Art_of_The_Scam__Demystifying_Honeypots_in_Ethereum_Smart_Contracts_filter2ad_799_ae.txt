# Bytecode Similarity Analysis

Table 3 presents the bytecode similarity (in %) for each honeypot technique. Despite using the same technique, the bytecode of different honeypots can be highly diverse.

| Honeypot Technique | Min. | Max. | Mean | Mode |
|--------------------|------|------|------|------|
| TDO                | 28   | 88   | 98   | 95   |
| US                 | 71   | 90   | 89   | 95   |
| HSU                | 25   | 98   | 52   | 45   |
| HT                 | 11   | 98   | 49   | 36   |
| SMC                | 26   | 98   | 53   | 49   |

## Profitability Analysis

Table 4 provides the profitability per honeypot technique, calculated as the received amount minus the spent amount and transaction fees. No values are provided for TDO because, in the single true positive analyzed, the attacker's transaction fees exceeded the gain from the victim. The smallest and largest profits were made using a hidden state update honeypot, with 0.00002 ether being the smallest and 11.96 ether being the largest. Straw man contract honeypots were the most profitable, with an average value of 1.76 ether, while uninitialized struct honeypots were the least profitable, with an average value of 0.46 ether. The total profit from honeypots was 257.25 ether, with 171.22 ether coming from hidden state update honeypots. However, due to the volatility of cryptocurrency exchange rates, the actual USD value of these profits can vary significantly. For example, the largest profit in ether (11.96 ether) was worth only $500 at the time of withdrawal, whereas a honeypot with 3.10987 ether was worth $2,609. Across 282 honeypots, the total profit in USD was $90,118.

| Honeypot Technique | Min.     | Max.   | Mean   | Mode  | Median | Sum      | Overall Range  |
|--------------------|----------|--------|--------|-------|--------|----------|----------------|
| BD                 | 0.01     | 1.13   | 6.41   | 4.24  | 0.5    | 3.5      | 0.01 - 1.13    |
| ID                 | 0.004    | 1.06   | 1.59   | 0.11  | 0.33   | 17.02    | 0.004 - 1.06   |
| SESL               | 0.584    | 1.23   | 0.11   | 0.1   | 1.0    | 9.57     | 0.584 - 1.23   |
| TDO                | -        | -      | -      | -     | -      | -        | -              |
| US                 | 0.009    | 0.1    | 1.0    | 1.0   | 1.01   | 6.44     | 0.009 - 0.1    |
| HSU                | 0.00002  | 11.96  | 171.22 | -     | -      | 171.22   | 0.00002 - 11.96|
| HT                 | 1.009    | 1.44   | 0.38   | 1.02  | 1.05   | 2.11     | 1.009 - 1.44   |
| SMC                | 0.399    | 1.76   | 1.05   | 1.99  | 47.39  | 47.39    | 0.399 - 1.76   |
| **Overall**        | 0.00002  | 11.96  | 257.25 | -     | -      | 257.25   | 0.00002 - 11.96|

## Discussion

### Key Insights

- Most honeypots trapped only one victim, suggesting that users may check other transactions before submitting their own.
- The low success rate of honeypots with comments indicates that users also review Etherscan comments.
- The bytecode of honeypots can be very different even when using the same technique, making signature-based detection methods ineffective.
- More than half of the honeypots were successful within the first 24 hours, indicating that newer honeypots are more effective.
- Honeypot creators often withdraw funds or abort the honeypot if not successful within the first 24 hours, leading to a short lifespan for most honeypots.

### Challenges and Limitations

- The availability of smart contracts with source code is limited, highlighting the need for bytecode-level detection.
- Detecting certain honeypot techniques at the bytecode level is challenging, as information about inheritance is lost during compilation.
- Our tool currently detects only eight specific honeypot techniques, and extending it to detect more techniques requires additional heuristics.

### Ethical Considerations

- The intentions of both honeypot creators and users can be ambiguous. Creators might aim to scam users or punish malicious behavior, while users might be either malicious or benign.
- While our methodology could potentially help malicious attackers, we hope to raise awareness and protect benign users from financial losses.

## Related Work

- Honeypots are a new type of fraud combining security issues with scams, discussed online and collected in public repositories.
- Various methods have been proposed to detect fraud and security issues, including manual analysis, machine learning, fuzzing, static analysis, and symbolic execution.
- Symbolic execution, used in this paper, is well-suited for analyzing large numbers of smart contracts due to its ability to reason about all possible execution paths and states, despite the large number of possible paths.

## Conclusion

In this work, we investigated honeypot smart contracts, presenting a taxonomy and introducing HONEYBADGER, a tool using symbolic execution for their automated detection. In a large-scale analysis of 151,935 unique Ethereum smart contracts, HONEYBADGER identified 460 honeypots, revealing that 240 users became victims and attackers made over $90,000 in profit. Future work will focus on generalizing the detection mechanism and extending the analysis to a larger subset of contracts.

## Acknowledgments

We thank Hugo Jonker, Sjouke Mauw, and the anonymous reviewers for their valuable feedback. The experiments were conducted using the HPC facilities of the University of Luxembourg, supported by the Luxembourg National Research Fund (FNR).

## References

[1] Amani, S., Bégel, M., Bortin, M., & Staples, M. (2018). Towards verifying Ethereum smart contract bytecode in Isabelle/HOL. CPP. ACM.

[2] Atzei, N., Bartoletti, M., & Cimoli, T. (2017). A Survey of Attacks on Ethereum Smart Contracts (SoK). In Proceedings of the 6th International Conference on Principles of Security and Trust, Springer-Verlag New York, Inc.

[3] Bartoletti, M., Carta, S., Cimoli, T., & Saia, R. (2017). Dissecting Ponzi schemes on Ethereum: Identification, analysis, and impact. arXiv preprint arXiv:1703.03779.

[4] Bartoletti, M., Pes, B., & Serusi, S. (2018). Data mining for detecting Bitcoin Ponzi schemes. arXiv preprint arXiv:1803.00646.

[5] Bhargavan, K., Swamy, N., Zanella-Béguelin, S., Delignat-Lavaud, A., Fournet, C., Gollamudi, A., Gonthier, G., Kobeissi, N., Kulatova, N., Rastogi, A., & Sibut-Pinote, T. (2016). Formal Verification of Smart Contracts. In Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security.