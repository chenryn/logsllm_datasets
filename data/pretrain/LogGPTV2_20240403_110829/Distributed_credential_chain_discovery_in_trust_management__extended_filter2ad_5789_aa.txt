title:Distributed credential chain discovery in trust management: extended
abstract
author:Ninghui Li and
William H. Winsborough and
John C. Mitchell
Distributed Credential Chain Discovery in Trust
Management (Extended Abstract) ∗
Ninghui Li
Department of Computer
Science, Gates 4B
Stanford University
Stanford, CA 94305-9045
PI:EMAIL
William H. Winsborough
NAI Labs
Network Associates, Inc.
3060 Washington Road
Glenwood, MD 21738
William PI:EMAIL
John C. Mitchell
Department of Computer
Science, Gates 4B
Stanford University
Stanford, CA 94305-9045
PI:EMAIL
ABSTRACT
We give goal-oriented algorithms for discovering credential
chains in RT0, a role-based trust-management language in-
troduced in this paper. The algorithms search credential
graphs, a representation of RT0 credentials. We prove that
evaluation based on reachability in credential graphs is sound
and complete with respect to the set-theoretic semantics
of RT0. RT0 is more expressive than SDSI 2.0, so our
algorithms can perform chain discovery in SDSI 2.0, for
which existing algorithms in the literature either are not
goal-oriented or require using specialized logic-programming
inferencing engines. Being goal-oriented enables our algo-
rithms to be used when credential storage is distributed. We
introduce a type system for credential storage that guaran-
tees well-typed, distributed credential chains can be discov-
ered.
1.
INTRODUCTION
Several trust-management systems have been proposed
in recent years, e.g., SPKI/SDSI [10], PolicyMaker [3, 4],
KeyNote [2], Delegation Logic [15]. These systems are based
on the notion of delegation, whereby one entity gives some
of its authority to other entities. The process of making
access control decisions involves ﬁnding a delegation chain
from the source of authority to the requester. Thus, a cen-
tral problem in trust management is to determine whether
such a chain exists and, if so, to ﬁnd it. We call this the cre-
dential chain discovery problem, by contrast with the certiﬁ-
cate chain discovery problem, which is concerned with X.509
certiﬁcates [9]. Credentials in trust management generally
have more complex meanings than simply binding names to
public keys, and a credential chain is often a graph, rather
than a linear path. The goal of this paper is to address the
∗
at:
A full
http://crypto.stanford.edu/~ninghui/papers/disc.pdf
available
version
of
this
paper
is
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
credential chain discovery problem (the discovery problem
for short) in such systems.
Almost all existing work addressing the discovery problem
assumes that potentially relevant credentials are all gath-
ered in one place. This is at odds with the tenet of trust
management—decentralized control; systems that use trust
management typically issue and often store credentials in a
distributed manner. This raises some nontrivial questions.
Example 1. A ﬁctitious Web publishing service, EPub,
oﬀers a discount to preferred customers of its parent orga-
nization, EOrg. EOrg issues a credential to the ACM stat-
ing that ACM members are preferred customers. Combin-
ing it with Alice’s ACM membership credential yields a two-
credential chain that proves Alice is a preferred customer.
This is a linear chain; the subject of the credential issued by
EOrg, ACM, is the issuer of the credential issued to Alice.
These two credentials must be collected to construct the
chain. The question we take up is where they should be
stored to enable that collection. We say an entity A stores
a credential if we can ﬁnd the credential once we know A.
Some other entity, such as a directory, may actually house
the credential on A’s behalf. Also, by storing a credential,
we mean storing and providing access to the credential.
Given this deﬁnition of storing, to be useful, a credential
must be stored with its issuer or with its subject. If both
credentials in example 1 are stored with their subject, we
can ﬁnd them by obtaining the ﬁrst credential from Alice,
and using the issuer of that credential, ACM, to obtain the
second. A disadvantage of this strategy is that it requires the
ACM to store all the credentials authorizing ACM members.
This makes the ACM a bottleneck. Also, some issuers may
not entrust credentials to their subjects.
If instead both
credentials are stored with their issuers, the ACM has to
store and provide all membership ids, again making it a
bottle neck, and potentially causing broad search fan-out.
In the example, the ideal arrangement is to store one cre-
dential with EOrg and the other with Alice. The chain can
then be discovered by working from these two ends towards
the chain’s middle. No prior credential discovery system
supports this, probably because subject- and issuer-storage
cannot be intermixed arbitrarily:
in our example, if both
credentials are stored exclusively by the ACM, the chain
cannot be found. This is because in many decentralized
systems, it is impossible or prohibitively expensive for one
entity to enumerate all other entities in the systems. For
all practical purposes, in such a system, if one can’t ﬁnd a
156credential chain without contacting every entity, one can’t
ﬁnd it at all. In this paper, we introduce a credential typing
system that constrains storage enough to ensure chains can
be found by starting at their two ends and working inward.
The credential chain introduced in example 1 illustrates
only the simplest case that we address. Some trust man-
agement systems, such as SDSI and Delegation Logic, allow
what we call attribute-based delegation, that is the delegation
of attribute authority to entities having certain attributes.
Example 2. EPub oﬀers another discount to university
students, and delegates the authority over the identiﬁcation
of students to entities that are accredited universities.
Attribute-based delegation is achieved in SDSI through
linked names, and in Delegation Logic through dynamic
threshold structures and through conditional delegations.
Systems that support attribute-based delegation promise
high ﬂexibility and scalability. However they signiﬁcantly
complicate the structure and discovery of credential chains.
Beyond storing credentials where they can be found, dis-
tributed discovery also requires an evaluation procedure that
can drive credential collection. Such a procedure must be
goal-oriented in the sense of expending eﬀort only on chains
that involve the requester and the access mediator, or its
trusted authorities. In the Internet, with distributed stor-
age of millions of credentials, most of them unrelated to one
another, goal-oriented techniques will be crucial. The proce-
dure must also be able to suspend evaluation, issue a request
for credentials that could extend partial chains, and then
resume evaluation when additional credentials are obtained.
Existing evaluation procedures for SDSI and for Delegation
Logic are either not goal-oriented, or do not support this
alternation between collection and evaluation steps.
As a concrete foundation for discussing the discovery prob-
lem, we introduce a trust-management language, RT0, which
supports attribute-based delegation and subsumes SDSI 2.0
(the “SDSI” part of SPKI/SDSI 2.0 [10]). We provide goal-
oriented evaluation algorithms based on a graphical repre-
sentation of RT0 credentials. This representation is ideal for
driving credential collection because it makes it easy to sus-
pend and resume, and to schedule work ﬂexibly. Even in the
centralized case, goal-orientation is an advantage when the
credential pool is very large and contains many credentials
that are unrelated. We also show how to use our algorithms
to perform goal-oriented chain discovery for SDSI 2.0.
The rest of this paper is organized as follows.
In sec-
tion 2, we present the syntax and a set-theoretic semantics
for RT0. In section 3, we present goal-oriented, graph-based
algorithms for centralized chain discovery in RT0, and show
how to apply them to SDSI as well. We prove that the graph-
based notion of credential chains is sound and complete with
respect to the semantics for RT0.
In section 4, we study
chain discovery in the distributed case. We present a notion
of well-typed credentials and prove that chains of well-typed
credentials can always be discovered. In section 5, we dis-
cuss future directions and some related work. We conclude
in section 6.
2. A ROLE-BASED TRUST-MANAGEMENT
LANGUAGE
This section introduces RT0, the ﬁrst (and the simplest)
in a series of role-based trust-management languages we are
developing. We present RT0’s syntax, discuss its intended
meaning, and compare it to SDSI. Then we give a formal
semantics.
2.1 The Language RT0
The constructs of RT0 include entities, role names, and
roles. Typically, an entity is a public key, but could also be,
say, a user account. Entities can issue credentials and make
requests. RT0 requires that each entity can be uniquely
identiﬁed and that one can determine which entity issued a
particular credential or a request. In this paper, we use A,
B, and D to denote entities. A role name is an identiﬁer,
say, a string. We use r, r1, r2, etc., to denote role names.
A role takes the form of an entity followed by a role name,
separated by a dot, e.g., A.r and B.r1. The notion of roles
is central in RT0. A role has a value that is a set of enti-
ties who are members of this role. Each entity A has the
authority to deﬁne who are the members of each role of the
form A.r. A role can also be viewed as an attribute. An en-
tity is a member of a role if and only if it has the attribute
identiﬁed by the role. In RT0, an access control permission
is represented as a role as well. For example, the permis-
sion to shut down a computer can be represented by a role
OS.shutdown.
There are four kinds of credentials in RT0, each corre-
sponding to a diﬀerent way of deﬁning role membership:
•
•
•
Type-1 :
A.r←− B
A and B are (possibly the same) entities, and r is a
role name.
This means that A deﬁnes B to be a member of A’s r
role. In the attribute-based view, this credential can
be read as B has the attribute A.r, or equivalently, A
says that B has the attribute r.
Type-2 :
A.r←− B.r1
A and B are (possibly the same) entities, and r and
r1 are (possibly the same) role names.
This means that A deﬁnes its r role to include all
members of B’s r1 role. In other words, A deﬁnes the
role B.r1 to be more powerful than A.r, in the sense
that a member of B.r1 can do anything that the role
A.r is authorized to do. Such credentials can be used
to deﬁne role-hierarchy in Role-Based Access Control
(RBAC) [16]. The attribute-based reading of this cre-
dential is: if B says that an entity has the attribute r1,
then A says that it has the attribute r. In particular,
if r and r1 are the same, this is a delegation from A to
B of authority over r.
Type-3 :
A.r←− A.r1.r2
A is an entity, and r, r1, and r2 are role names. We
call A.r1.r2 a linked role.
This means that members(A.r) ⊇ members(A.r1.r2) =
(cid:1)
B∈members(A.r1) members(B.r2), where members(e)
represents the set of entities that are members of e.
The attribute-based reading of this credential is: if A
says that an entity B has the attribute r1, and B says
that an entity D has the attribute r2, then A says that
D has the attribute r. This is attribute-based delega-
tion: A identiﬁes B as an authority on r2 not by using
(or knowing) B’s identity, but by another attribute of
B (viz., r1). If r and r2 are the same, A is delegating
157its authority over r to anyone that A believes to have
the attribute r1.
•
Type-4 :
A.r←− f1 ∩ f2 ∩ ··· ∩ fk
A is an entity, k is an integer greater than 1, and each
fj, 1 ≤ j ≤ k, is an entity, a role, or a linked role
starting with A. We call f1∩f2∩···∩fk an intersection.
This means that members(A.r) ⊇ (members(f1)∩···∩
members(fk)). The attribute-based reading of this cre-
dential is: anyone who has all the attributes f1, . . . , fk