翻译：玄猫安全团队-Javierlev & Tri0nes
原文：`https://github.com/ethereum/go-ethereum/blob/master/docs/audits/2018-09-14_Clef-audit_NCC.pdf`
近期，以太坊`go-ethereum`公开了两份审计报告，玄猫安全团队第一时间对其进行了翻译工作。此为第二篇《Ethereum Clef
Review》即`2018-09-14_Clef-audit_NCC`，此审计报告完成时间为2018年9月14日。
如果您正在使用的是较旧版本的 `go-ethereum`，强烈建议升级至最新版本，以免遭受不必要的损失。
## 1.1. 概述
在2018年9月初，以太坊基金会委托`NCC
Group`对Clef命令行界面进行代码审计。代码位于`https://github.com/holiman/go-ethereum/tree/70cfedc9d7bd64f1f112eb2099a5c36266863f40/cmd/clef`。以下为审计详情。
标题 | ID | 风险  
---|---|---  
Clef备份加密不完全 | 002 | 中危  
缺少密码强度检查 | 005 | 中危  
交易数据字段验证失败 | 007 | 中危  
由不正确的方法Selector导致的拒绝服务 | 010 | 中危  
secrets.dat权限不当 | 001 | 低危  
键值对加密存储的加密值可交换 | 003 | 低危  
暴露的Clef API 缺少指引 | 004 | 低危  
ECRecover不会对恢复的公钥进行身份验证 | 009 | 低危  
过时的依赖关系 | 011 | 低危  
规则依赖于时间和状态存在危险性 | 012 | 低危  
通过格式错误的导入密钥拒绝服务 | 013 | 低危  
加密密钥库完整性检查不完整 | 014 | 低危  
UI混合了无关和特定允许的数据 | 006 | 建议  
## 1.2. Clef备份加密不完全
### 1.2.1. 风险: 中危
影响性：高，可利用性： 低
### 1.2.2. 标识
NCC-EF-Clef-002
### 1.2.3. 分类
认证
### 1.2.4. 位置
  * cmd/clef/main.go:initializeSecrets()
### 1.2.5. 影响
一个能够入侵用户设备的攻击者可以任意访问Clef的加密备份
### 1.2.6. 描述
`Clef`在硬盘中存储了大量文件，如包含账户密码的`credentials.json`，包含`JavaScript`规则文件哈希的`config.json`等文件。通过这些文件可以恢复私钥。这些文件均由一个随机数种子派生的密钥来加密，且这个随机数种子是明文保存在硬盘里的`secrets.dat`文件中。
一个能够访问`secrets.dat`和`credentials.json`的攻击者可以任意访问账户及其资产。因此，一个没有硬盘加密保护的设备如果被物理入侵，将会泄露所有存储在`Clef`加密备份中的信息。当运行中的设备被远程控制时，将会使威胁到休眠的Clef应用，无论此时是否进行了硬盘加密。此外，将这些文件备份或拷贝到另一个位置也会使危及用户的账号安全。
### 1.2.7. 修复建议
强制使用密码来启动Clef命令行接口。并将此机制用在`go-ethereum/accounts/keystore`来保护`secret.dat`文件。
## 1.3. 缺少密码强度检查
### 1.3.1. 风险: 中危
影响性：中，可利用性：低
### 1.3.2. 标识
NCC-EF-Clef-005
### 1.3.3. 分类
认证
### 1.3.4. 位置
  * signer/core/api.go:New()
### 1.3.5. 影响
一个攻击者能够猜解不安全的用户密码，或者对用户弱密码进行爆破。这会导致攻击者获取用户以太坊账户的私钥。
### 1.3.6. 描述
`Clef CLI`能够被用于创建和管理以太坊外部拥有的账号。账户的创建过程可以通过发送下面的RPC请求给Clef来实现。(如果运行时加上--rpc选项)
    curl -H "Content-Type: application/json" -X POST --data '{"jsonrpc":"2.0", \
    "method":"account_new","params":["test"],"id":67}' localhost:8550
运行`Clef`的用户将会被要求输入用于保护账户私钥的密码。在这时，用户能够输入一个任意长度的密码(空密码也将会被接受)。对于可以物理入侵或者远程入侵的攻击者来说，他们将更容易地恢复用户私钥。
### 1.3.7. 修复建议
强制规定最小密码长度。`NIST`组织已经出版了相关主题的[文档](https://pages.nist.gov/800-63-3/)，推荐设置最小8个字符长度的密码。除此之外，检查已知的不符合规范的密码。关于不符合规范的密码参考[NIST
Bad passwords](https://cry.github.io/nbp/)
### 1.3.8. 客户反馈
Clef现在已经强制使用最小10位的密码： `github.com/holiman/go-ethere
um/commit/193f7049719a2da9018027853d0c2237cdad602b`
### 1.3.9. 参考资料
`https://pages.nist.gov/800-63-3/`
NIST Bad Passwords:`https://cry.github.io/nbp/`
## 1.4. 交易数据字段验证不当
### 1.4.1. 风险: 中危
影响性：中，可利用性：低
### 1.4.2. 标识
NCC-EF-Clef-007
### 1.4.3. 分类
数据验证
### 1.4.4. 位置
  * signer/core/{abihelper,validation}.go
### 1.4.5. 影响
恶意构造的数据字段能够允许攻击者欺骗签名者的目的
### 1.4.6. 描述
当接收交易签名的请求时，在将请求传递给用户之前，`Clef`会先进行一些验证检查。如果一个特殊的参数被传递给一个请求(方法的签名)，程序会试图匹配数据字段。数据字段必须由4个字节的标志和32倍数的字节组成，且该4个字节的标志用于函数调用(方法签名的哈希值会被截断成4个字节):
    func parseCallData(calldata []byte, abidata string) (*decodedCallData, error) {
        if len(calldata) < 4 {
            return nil, fmt.Errorf("Invalid ABI-data, incomplete method signature of (%d bytes)", \
            len(calldata))
        }
        sigdata, argdata := calldata[:4], calldata[4:] // 进行截断
        if len(argdata)%32 != 0 { // 32的倍数
            return nil, fmt.Errorf("Not ABI-encoded data; length should be a multiple of 32 (was %d)", \
            len(argdata))
        }
如果在请求中，没有方法签名作为参数被传递给Clef，这里的检查就不会进行。这是因为方法签名不是以太坊虚拟机的特性，它是`Solidity-specfic`特性。如果检查失败，`Clef`会中止传递请求，并且发出警告:
    info, err = testSelector(*methodSelector, data)
    if err != nil {
        msgs.warn(fmt.Sprintf("Tx contains data, but provided ABI signature  
        could not be matched: %v", err))
    }
由于`Clef
CLI`的用户不会总是传递一个方法签名，或者不能理解关于`ABI`签名检查相关的警告，`Clef`的行为可能使用户快速关闭警告(这被称为警告疲劳)，由于这个原因，恶意的DAPP可以通过[短地址攻击](https://www.dasp.co/#item-9)或者构造畸形的calldata数据来实施攻击。
### 1.4.7. 修复建议
当一个方法签名被传递，数据字段格式应该总是指定长度为`4+k×32`，其中`k≥0`。如果不是方法签名被传递，`Clef`不应该把请求传递给用户。当一个方法签名不被传递且数据字段不为空时，它的格式也应该根据之前讨论的编码来进行检查。如果验证失败，`Clef`应该拒绝该交易(用于简化验证过程或列入白名单的合约地址不在此列)。如果非标准的交易需要默认支持，用户应该收到警告，提示该交易不是标准格式。
### 1.4.8. 客户反馈
现在验证过程中，当拒绝交易时，默认返回警告信息，且增加一个特殊的模式用来绕过这个行为: `github.com/holiman/go-ethereum/commit/193f7049719a2da9018027853d0c2237cdad602b`
### 1.4.9. 参考资料
`https://www.dasp.co/#item-9`
## 1.5. 由不正确的方法Selector导致的拒绝服务
### 1.5.1. 风险: 中危
影响性：低，可利用性：低
### 1.5.2. 标识
NCC-EF-Clef-010
### 1.5.3. 分类
数据验证
### 1.5.4. 位置
  * signer/core/abihelper.go:parseCallData()
  * accounts/abi/abi.go:JSON()
### 1.5.5. 影响
一个可以访问`Clef API`的攻击者能够使应用崩溃
### 1.5.6. 描述
在一些用例中，Clef持续地运行，并且根据用户编写的规则来接收请求。在一些场景中，应用崩溃会使得在应用重启之前，合法的交易不被处理。
`account_signTransaction`API处理签名请求的交易。为了提供有用的信息给用户，发起请求的终端能够提供被调用的函数方法的签名(防止交易导致合约执行)。如果方法签名是畸形的，Clef将会崩溃。下面这个正则匹配用于验证用户的输入:
    // MethodSelectorToAbi converts a method selector into
    // an ABI struct. The returned data is a valid json string
    // which can be consumed by the standard abi package.
    func MethodSelectorToAbi(selector string) ([]byte, error) {
        re := regexp.MustCompile(`^( [^\)] +) \( ([a-z0-9,\[\]] *)\)`)
        groups := re.FindStringSubmatch(selector)
该正则表达式期望方法签名为如下格式:
    functionName(uint256, string, address)
使用黑名单而不是白名单过于自由。这样的过度接受策略将会使得用户可以输入如下内容：
  * 函数名可以是除`\`和`)`的任意字符
  * 参数可以是字母数字的或包含`[`与`]`的字符串，但是不需要强制是语法上的正确方括号
  * 参数列表能够以`,`结束和开始
  * 函数签名的结尾可以包含任何字符
这意味着根据当前的检查规则，下面的函数签名是有效的：
    call(a,a],bbbb932[,)
    #@#((@$!(uint256) anything
### 1.5.7. 复现步骤
在终端运行下面的命令，调用本地RPC接口`localhost:8550`，并且能够观察到`Clef`程序崩溃。
    curl -i -H "Content-Type: application/json" -X POST --data '{"jsonrpc":"2.0", \
    "method":"account_signTransaction","params":[ \
    {"from":"0x82A2A876D39022B3019932D30Cd9c97ad5616813", \
    "gas":"0x333","gasPrice":"0x123","nonce":"0x0", \
    "to":"0x07a565b7ed7d7a678680a4c162885bedbb695fe0", \ 
    "value":"0x10", "data":"0x4401a6e40000000000000000000000000000000000000000000000000000000000000012"}, "func(uint256,uint256,[]uint256)"],"id":67}' http://localhost:8550/
以下的方法签名均会使应用崩溃:
    func(uint256,uint256,[]uint256)
    func(uint256,uint256,uint256,)
    func(,uint256,uint256,uint256)
### 1.5.8. 修复建议
为了解决这个问题:
  1. 研究`abi`的`JSON`解码器并且找到错误的根源。
  2. 在进行操作之前，进一步验证接收到的方法签名
### 1.5.9. 客户反馈
引入一个PR来修复这个bug: `github.com/ethereum/go-ethereum/pull/17653`
## 1.6. secrets.dat权限不当
### 1.6.1. 风险: 低危