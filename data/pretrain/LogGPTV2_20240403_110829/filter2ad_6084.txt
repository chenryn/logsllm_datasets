title:A Client-Based and Server-Enhanced Defense Mechanism for Cross-Site
Request Forgery
author:Luyi Xing and
Yuqing Zhang and
Shenlong Chen
A Client-Based and Server-Enhanced Defense 
Mechanism for Cross-Site Request Forgery* 
Luyi Xing, Yuqing Zhang**, and Shenlong Chen 
National Computer Network Intrusion Protection Center, GUCAS, Beijing 100049, China 
Tel.: +86-10-88256218; Fax: +86-10-88256218 
PI:EMAIL 
State Key Laboratory of Information Security, GUCAS, Beijing 100049, China 
A  common-sense  CSRF  attack  involves  more  than  one  domain.  In  this  paper,  we’ll 
cover  both  cross-domain  and  same-domain  CSRF  which  overlaps  with  Cross-Site 
Scripting (XSS). If a XSS instructs victims to send requests to the same domain, it is 
also  a  CSRF—same-domain  CSRF.  Such  sort  of  XSS-CSRF  exists  extensively  and 
even high profile sites cannot always avoid such vulnerabilities.  
There  exist  mainly  3  defenses:  Referer  Header  checking,  secret  validation  token 
and CAPTCHA. The Referer Header is sometimes missing [1], the secret token be-
comes  totally futile  when  XSS  exists  and  the  CAPTCHA  is  too bothering.  Besides, 
[2-3] brings about some client-taking actions yet pure client checking is not credible 
enough from server side perspective. And they still suffer from the Referer-missing 
problem.  Moreover,  all  of  [1-3]  have  nothing  to  do  with  same-domain  CSRF.  So  a 
client-initialized and server-accomplished defense mechanism (CSDM) is proposed. 
Definition: The super-referer of a request is made up of its Referer and all URLs of 
the  Referer’s  ancestor  frames,  excluding  the  querying  part.  E.g.,  the  Referer 
http://site/1.php?id=123 is cut to http://site/1.php. 
CSDM proposes a new HTTP Header Super-referer-header, containing super-referer. 
E.g.:  Super-referer-header:  http://site1/index.php,  http://hack/attack.aspx.  Considering 
privacy,  the  URL  in  the  new  Header 
should be hashed with strong one-way 
algorithm and MD5 is one choice. 
A POST request
Fig. 1. Client checking of POST Request 
* This work is supported by the National Natural Science Foundation of China under Grant No. 
60970140, No.60773135 and No.90718007. 
** Corresponding author. 
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 484–485, 2010. 
© Springer-Verlag Berlin Heidelberg 2010 
1.Referer empty ?
no
2.Cross-domain request?
no
3.Destination in important-site list ?
yes
4.User chooses 
‘ Send’
 or‘ Cancel ’
no
Send
5.Send request with super-
referer-header
Cancel
6.Reject to send
Consider POST-based  CSRF first. 
The client defence is shown in Fig. 1. 
A  POST  request  must  satisfy  all  the 
qualifications  in  Fig.1  before  being 
sent  out,  or  else  it  will  be  cancelled. 
In  step  3  and  4,  a  configurable  “im-
portant-sites  list”  is  proposed.  POST 
requests sending to important sites for 
users  can  be  further  confirmed  by 
offering  users  a  “Send  or  Cancel?” 
dialog.  CSRF  requests  are  generally 
sent silently and users have no idea of 
A Client-Based and Server-Enhanced Defense Mechanism 
485 
it.  If  users  didn’t  click  any  submitting  button  before  seeing  the  confirming  dialog, 
“Cancel” is preferred. 
An  important  observation  shows  that  POST  target  URL  generally  needs  only  a 
small  number  of  different  intended  source  URLs,  so  a  policy  file  is  used  at  server 
side. For example, POST: { 
Dest1: /profile.php  
Same Domain1: /chgpfl.php   
Cross Domain1: trust.com/chg.aspx 
Dest2: /blog.php 
Same Domain2: subdomain.sns.com/*} 
to  profile.php  should  only  origin 
Requests  sending 
from  chgpfl.php  or 
trust.com/chg.aspx.  The  policy  file  should  cover  all  POST  target  pages.  So  when 
addressing a request, servers examine the super-referer-header, checking whether all 
source URLs of the request are allowable. The server solution is deployed as part of a 
web  application  firewall,  making  it  compatible  with  current  websites.  And  we  can 
trade  space  for  time  when  decoding  the  MD5 value  as  every  site  has  limited  URLs 
(excluding querying parts). 
Cross-domain and almost all same-domain CSRF can be prevented as their source 
URLs are illegal. In step 4 of Fig. 1, even attackers trigger a malicious script in paral-
lel  to  the  submitting  of  a  legitimate  form  or  the  users  cannot  make  right  decisions 
when choosing “Send” or “Cancel”, a further checking at server side will still guaran-
tee the security. Same-domain CSRF can only happen when an allowable source page 
towards a specific CSRF target page happens to host some XSS vulnerability. But the 
chances are low and the destructiveness can be expected to be minimized or limited as 
only the specific target page and no others can be aimed at.  
The super-referer is helpful in accurately depicting the sources of requests and pre-
venting same-domain CSRF, as attackers can embed some permissible page in XSS-
infected pages. Besides, such a concept can help preventing clickjacking [2]. 
GET-based  CSRF  deserves  less  attention,  as  all  state-modifying  requests  should 
use POST and real world GET CSRF is far less destructive. At client, GET requests 
with HTTPS or Authorization Header are blocked if without Referrer. At server side, 
super-referer checking is used for sensitive target URL. 
The CSDM client prototype is implemented as a Firefox browser extension. Real 
world  tests  with  popular  sites  including  iGoogle,  yahoo,  facebook  and  a  vulnerable 
sample site show that it prevents all kinds of CSRF attacks reproduced in lab envi-
ronment with no obvious compatibility problems or user experience degradation. 
References 
1.  Barth,  A.,  Jackson,  C.,  Mitchell,  J.C.:  Robust  defenses  for  cross-site  request  forgery.  In: 
15th ACM Conference on Computer and Communications Security (2008) 
2.  Mao,  Z.,  Li,  N.,  Molloy,  I.:  Defeating  cross-site  request  forgery  attacks  with  browser-
enforced authenticity protection. In: 13th International Conference on Financial Cryptogra-
phy and Data Security (2009) 
3.  Maes, W., Heyman, T., Desmet, L., et al.: Browser protection against cross-site request for-
gery. In: 1st ACM Workshop on Secure Execution of Untrusted Code, Co-located with the 
16th ACM Computer and Communications Security Conference (2009)