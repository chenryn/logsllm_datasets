((identifier
(:writer (out string)
(:writer (out string)
(size
(flags
revision
(major-version
version
ID3标签头
(write-value
(let ((byte-order-mark (read-value 'u2 in)))
:character-type (ucs-2-char-type #xfeff)))
:terminator terminator
'generic-string out string
write-value
write-value
generic-terminated-string out string
:length (length
(read-value 
:terminatortermlnator
'generic-terminated-string in 
（in)
'u2 out #xfeff)
"u2 out #xfeff)
id3-tag-size))
u1
ul)
u1
(iso-8859-1-string :length 3))
string)
$xx000000
$0200
"ID3#
www.TopSage.com
25.5ID3标签头
297
---
## Page 315
25.6
以像下面这样来定义它：
多少个。为了得到这个信息，可以写一个像下面这样的函数：
下每个MP3文件的ID3头的汇总。
轻松地写出这个函数。首先定义一个助手函数来测试一个给定的文件名是否带有mp3扩展名。
目录下所有MP3文件的汇总将是更有用的。你可以用第15章里我们定义的walk-directory函数
中的信息。
298
如同之前所讨论的，一个ID3标签从整体上被划分成了多个帧，每个帧都具有类似于整个标
另一个你将在第29章里用到的函数是用来测试给定文件是否以一个ID3标签开始的函数，可
不过，如果你有许多MP3文件，你可能只想知道你的MP3收藏中每个版本的ID3标签分别有
然后你可以将show-tag-header、mp3-p和walk-directory组合起来，打印出给定目录
当然，为了检测你的MP3库里哪个版本的ID3是最普遍的，如果有一个函数能返回一个给定
在这个函数的基础上可以构造一个函数，它接受一个文件名并打印出连同文件名在内的标签
(defunid3-p（file)
(defun count-versions (dir)
(defun show-tag-headers(dir)
(defunmp3-p(file)
NIL
ID32.0 00000000 2165bytes --Kitka/Wintersongs/02Byla Cesta.mp3
ID3v2>(show-tag-header"/usr2/mp3/Kitka/Wintersongs/02 Byla Cesta,mp3")
它可以打印出类似下面这样的输出：
(defun show-tag-header (file)
(defun read-id3（file)
(let（(versions（mapcar #′(lambda（x)(consx0）)(234））))
(walk-directory dir #'show-tag-header :test #'mp3-p))
(with-open-file
ID3帧
(string-equal
(read-value'id3-tag in)))
(string=
versions))
(flet（(count-version（file)
(walk-directory dir #'count-version :test #'mp3-p))
第25章
identifier major-version revision flags size(enough-namestring file))))
"ID3"
(incf (cdr (assoc （major-version （read-id3 file))versions)))))
实践：ID3解析器
"mp3"(pathname-typefile))))
(in file:element-type'(unsigned-byte 8))
(read-value'iso-8859-1-string in:1ength 3))))
www.TopSage.com
---
## Page 316
尽管标签头告诉了你该标签有多少字节，但这个数值还包括了跟在帧数据之后的补白。标签头无
id是什么。
的:dispatch表达式中的find-frame-class函数，让它总是返回generic-frame，无论帧的
generic-frame类，它扩展id3-frame并增加了一个字段data用来保存一个字节数组。
无需解析地读取它们。
有哪些帧。反正你最终也需要这样一个类，因为规范中允许实验性帧的存在，对于这些帧你可以
签中的帧而无需解析帧里面的数据。这将给你一种方式来找出你想要处理的MP3文件中实际上都
其立即开始为每个帧类型定义类，还不如从编写一个通用帧类开始，这个类可以让你读取一个标
在版本2.2中得到24种不同的帧类型，但是它们中只有很少的一些是被“广泛使用的”。因此，与
后续版本里还有更多。即便将那些共享了同样的基本结构的帧类型视为等价的，最后你仍然可以
类名的函数派发到适当的具体类上。
class宏所适用的场合。你可以定义一个带有标签的类来读取帧头，并随后使用一个从ID映射到
从而决定了你解析帧长度后面其他数据的方式。这正好是你定义的define-tagged-binary-
整数所构成，后者指定了该帧的字节长度，其中不包括6字节的头部。字符串表明该帧的类型，
2.2的帧上。
和版本2.3之间稍微有些变化，而最终还要同时处理两种形式。刚开始，你可以集中在解析版本
签的内部结构，都以一个指示了该帧类型和字节长度的头开始。帧头的结构在ID3格式的版本2.2
由于帧头中的大小字段可以告诉你一个帧究竟有多少个字节，因此你可以定义一个
现在你需要修改id3-tag,让其可以读取头部字段后面的那些帧。读取帧数据的唯一难点是：
现阶段，你希望所有的帧都被读取为generic-frames，这样你可以定义用在id3-frame
现在你可以开始实现具体的帧类了。不过，规范里定义了许多帧类—版本2.2中共有63个
一个版本2.2的帧头由三个编码一个三字符ISO 8859-1字符串的字节和一个三字节的无符号
(defun find-frame-class (id)
其中数据字段的类型raw-bytes只用来保存一个字节数组。你可以像下面这样来定义它：
(define-binary-class generic-frame (id3-frame)
(define-binary-type raw-bytes (size)
(define-tagged-binary-class id3-frame ()
‘generic-frame)
(declare
(:reader
((data (raw-bytes :size size))))
(:dispatch (find-frame-class id)))
(:writer (out buf)
(write-sequence buf out))}
(size u3))
{let
buf))
((((8 azAq-paubtsun), ad<-zuawata: azts Aeire-ayew) snq))
(ignore id))
(in)
www.TopSage.com
25.6ID3帧
299
---
## Page 317
read-value读取时它就不再可用了。
位于read-frame的数层以下。
25.7
外的一个字节来检测补白的开始，那么你可以像下面这样来定义id3-frame二进制类型：
来读取到的id3-frame对象。假设你已定义了read-frame，并让它在前一个帧的结尾处读取额
开始位置。因此不能直接在id3-frames的:reader部分直接调用read-value，你应当使用一个
可用来避免读取到超过标签结尾的位置上。但是读取代码也将需要检测跟在帧数据之后的补白的
表它所发现的所有帧的对象，并且跳过任何补白。这个类型接受标签大小作为一个参数，该参数
候却找到了一个空字节。
法告诉你该标签含有多少帧，因此知道你遇到补白的唯一办法，就是在你期待一个帧标识符的时
你真正想要在read-frame中做的是读取一个字节并在它为空时返回NIL，否则使用
为此，你可以定义一个二进制类型id3-frames，它负责读取一个标签的其余部分，创建代
300
①字符流支持两个函数，PEEK-CHAR和UNREAD-CHAR，这两个函数中的任何一个都是对于该问题的完美解决方案，
现在剩下的就只是实现read-frame了。这有一点儿麻烦，因为实际从流中读取字节的代码
(define-binary-class id3-tag ()
你可以使用这个类型来为id3-tag增加一个帧槽。
(define-binary-type id3-frames (tag-size)
但是二进制流不支持任何等价的函数。
检测标签补白
{(identifier
(:writer
(:reader (in)
(frames
(size
(flags
(revision
(loop
(loop with to-read = tag-size
第25章实践：ID3解析器
finally (loop repeat to-write do (write-byte 0 out)))))
for frame in frames
with
(decf to-write (+ 6 (size frame)))
finally
collect frame
do (decf to-read (+ 6 (size frame)))
while frame
while (plusp to-read)
to-write
(loop repeat (1- to-read) do (read-byte in))))
(id3-frames :tag-size size))))
id3-tag-size)
u1)
(iso-8859-1-string :length 3))
(read-frame in)
= tag-size
www.TopSage.com
---
## Page 318
义一个带有标签的二进制类，其定义了基本的结构并派发到适当版本相关的子类上。
的值。看起来所有版本的ID3v2都具有相同的结构，包括大小字段。因此你可以像下面这样来定
那么使用一个define-tagged-binary-class将更加合理，因为它可以派发major-version
25.8
但首先让我们添加对版本2.3的ID3标签的支持。
generic-frame的实例来表示。在25.11节里,你将在REPL中做一些实验来检测需要实现的帧类。
HANDLER-CASE处理in-padding状况并返回NIL。
么每当id3-frame的read-value方法读到一个空字节而非帧的开始处时，状况就会被抛出。
字节，并将得到的结果与前面读取的第一个字节组合起来。
在该字节为空时抛出一个in-padding状况，否则继续按照iso-8859-1-string来读取其余的
需要任何槽，你只需要一个可区分的状况类来确保没有其他的代码可能抛出或处理它即可。
况系统用于错误处理之外目的的例子。
节，并在你读到一个空字节时抛出一个状况。read-frame随后可以处理该状况并在读取更多字
目前，id3-tag是用define-binary-class定义的，但如果你想要支持多个版本的ID3,
现在read-frame需要做的只是将对read-value的调用包装在HANDLER-CASE中，
 如果你重定义了id3-frame，使其ia槽的类型从iso-8859-1-string变成frame-id，那
可以从定义一个状况类型开始，它将从底层代码接收信号并被上层代码处理。这个状况并不
定义了read-frame之后，你就可以读取一个完整的版本2.2的ID3标签了，其中的帧用
(defun read-frame (in)
(define-tagged-binary-class id3-frame ()
(define-binary-type frame-id (length)
接下来需要定义一个二进制类型，其：reader部分读取指定数量的字节，它先读一个字节并
(define-condition in-padding （) （))
看起来这是一个使用状况系统的好机会。你可以在从流中进行读取的底层代码中检查空字
(handler-case (read-value 'id3-frame in)
(:dispatch (find-frame-class id)))
支持ID3 的多个版本
((id (frame-id :length 3))
(:writer (out id)
(:reader
(in-padding () nil)))
(size u3))
(write-value
(let
let
(when (= first-byte 0) (signal
(concatenate
string
((rest (read-value