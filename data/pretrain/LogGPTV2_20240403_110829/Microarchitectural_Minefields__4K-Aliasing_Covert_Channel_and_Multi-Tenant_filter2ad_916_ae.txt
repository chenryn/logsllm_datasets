for the instance type.
Similar to our in-house 4K-aliasing experimental setup, we
establish the error rate, bit rate, and channel capacity using
the robust communication channel presented in Listing 3. We
evaluate using 4K-aligned address in step sizes of 1024 B for
transmitting a 1-bit and 2048 B for transmitting a 0-bit per the
error rate analysis shown in Figure 9. The results are given in
Figure 10.
We measured a 1.28 Mbps and 1.49 Mbps channel capacity
while communicating across VM instances from different
accounts on both the Amazon EC2 and GCE clouds. The
channel capacity drops by 30% on the EC2 testbed and by 18%
on the GCE testbed compared to our in-house results. This is
expected as the virtualization layer on a hosted cloud induces
external noise. This is reﬂected in the increased error rate
recorded. Nevertheless, our results demonstrate the practical
use of the 4K-aliasing covert channel once the trojan and spy
instances are colocated on the same machine.
12
Fig. 10: Error rate and channel capacity results from in-house,
EC2, and GCE 4K-aliasing covert channel experimentation.
VII. MULTI-TENANCY DETECTION
In our IaaS channel capacity experiment on the EC2 and
GCE public cloud we relied upon prior colocation detection
methods. Now we describe a new method for colocation de-
tection using our 4K-aliasing timing channel. For the purposes
of our analysis, we need to be able to distinguish between
4K-aliasing caused by background noise and induced 4K-
aliasing. We ease the experimentation by assuming cooperative
accounts, which allows us to control the number of VMs
launched and the time between launches. The analysis largely
follows the methodology presented by Varadarajan et al. [36]
and we encountered similar challenges.
Separating 4K-aliasing from Noise. To accurately detect a
cooperative multi-tenant, we must distinguish unintended 4K-
aliasing events from intentional ones. To manage such noise,
we run an experiment that measures 4K-aliasing without a
cooperative VM sending a 4K-aliasing signal and then another
with a 4K-aliasing signal being sent. We scale up the number
of VMs from 1 instance to 20 instance pairs and repeat the
measurement 5 times.
Launch Strategy. We launch pairwise sender and receiver
VMs with the prior colocation placement vulnerabilities in
mind in mind. We ﬁrst launch a sender VM and then wait
1 hour before launching a receiver VM in the same zone to
ensure a best case colocated launch. In all test cases, we use
us-east-1 for our EC2 testbed and us-central1-c for
our GCE testbed. Each instance is conﬁgured as a single vCPU
which is executed as a single hardware hyperthread.
Detection Tests. When the sender VMs launch, they contin-
uously sends an oscillating 1-bit and 0-bit. The receiver polls
the 4K-aliasing event for roughly 10 seconds. To decrease the
testing time, we employ a naive methodology of launching
all sender messages at once and then sequentially launching
receiver VMs. As only one sender and receiver VM will
colocate as a hyperthread, we can accurately detect multi-
tenancy if any of the receiver VMs display the 4K-aliasing
event outside of the noise threshold.
Experimental Results. The results of our multi-tenant de-
tection scheme using 4K-aliasing are shown in Figure 11.
They reveal two features. First, the cycle latency degradation
1.811.281.49051015202500.20.40.60.811.21.41.61.82in_houseEC2GCEError Rate(%)Channel Capacity (mb/s)Capacitye1e2(a) EC2
(b) GCE
Fig. 11: Frequency distribution of 4K-aliasing event recorded for non-colocated instance pairs (8/7 cycles) and colocated instance
pairs (16/14) cycles. Multi-tenancy was detected after launching 12 (EC2) and 14 (GCE) sender/receiver instance pairs.
due to 4K-aliasing between sender and receiver is clearly
distinguishable compared to background noise. Roughly be-
tween 100 and 150 4K-aliasing events are measured within
a 10 second window while all sender VMs are launched,
but not transmitting a 4K-aliased store. On the other hand,
while the sender VM is transmitting a 4K-aliased store we
record roughly 360 to 480 4K-aliasing events. Second, the
detection threshold was achieved reliably after scaling the
number of sender and receiver VMs to 14 instance pairs.
During experimentation we found that beyond 4 instance pairs
we were able to achieve multi-tenant detection. However,
detection was measureable in only 1 of the 5 test cases so
they were discounted. We considered multi-tenant detection to
be successful upon agreement for the majority of the test cases.
Limitations. Despite the positive results, they rely upon the
fact that our multi-tenant demonstration requires cooperative
account holders. This allows us to utilize prior work on
placement vulnerability strategies to optimize our chances of
launching colocated instances. Further, our results were not
collected under a heavy load and potentially at non-peak
hours. Finally, we largely used free trial accounts, which
could possibly be underutilized and therefore less affected by
disparate workloads.
VIII. MITIGATING THE 4K-ALIASING SIDE CHANNEL
Clearly, disabling hyperthreading is a straightforward
method to mitigate the 4K-aliasing timing channel. However,
this will largely result in increased end-user costs as dedicated
instances result in increased operational expenses for the cloud
provider. For security minded cloud users willing to pay extra
this is a ideal solution. On the other hand, end-users using
IaaS public clouds for general purpose workloads requiring
little uptime will end up overpaying because they underutilize
datacenter resources.
The IaaS market appears to agree with this analysis.
The majority of EC2 and GCE instance types enable hyper-
threading by default. Specialized instances can of course be
purchased, but it is unclear how many users opt for these
options. Further, Microsoft Azure, which previously disabled
hyperthreading in all instance types it offered are now mi-
grating towards SMT enabled instances [22]. In other words,
the IaaS market is likely to keep default instance types SMT
enabled.
In addition, CPU vendors are likely to continue leverag-
ing hyperthreading for its various performance beneﬁts. The
underlying causes of the 4K-aliasing timing channel leverages
an integral component of Intel microarchitecture, which allows
signiﬁcant speed-up when handling memory operations. Mem-
ory reads and writes must be allowed to issue speculatively
and execute out-of-order lest we revert CPU design to single
cycle pipelines. The memory order buffer saves CPU cycles,
improves instruction throughput, makes better use of memory
trafﬁc bandwidth, and frees resources allowing more compu-
tation to be performed on average. Complete elimination of
the underlying mechanism causing 4K-aliasing is, therefore,
unlikely.
IX. CONCLUSION AND FUTURE WORK
We have demonstrated, for the ﬁrst time, a novel 4K-
aliasing timing channel. We demonstrate through extensive
analysis a robust covert communication channel deployable
in IaaS clouds capable of transmitting at up to 1.49 Mbps.
We also show the 4K-aliasing timing channel can be used
in multi-tenancy detection while only launching a relatively
small number of cooperating VMs on both Amazon EC2
and GCE. As future work, we aim to evaluate the timing
channel as a practical side-channel and to further investigate
the applicability of same-core shared resources as timing
channels in the public cloud.
ACKNOWLEDGMENT
This work is partially supported by the Department of
Energy through the Early Career Award (DE-SC0016180).
Mr. Orlando Arias is also supported by the National Sci-
ence Foundation Graduate Research Fellowship Program under
Grant No. 1144246. Any opinions, ﬁndings, conclusions, and
recommendations expressed in this material are those of the
authors and do not necessarily reﬂect the views of the U.S.
Department of Energy or the National Science Foundation.
13
100200300400500995010000816FrequencyCyclesnot colocatedcolocated100200300400500995010000714FrequencyCyclesnot colocatedcolocatedREFERENCES
[1] O. Aciic¸mez, “Yet another microarchitectural attack:: exploiting i-
the 2007 ACM workshop on Computer
cache,” in Proceedings of
security architecture. ACM, 2007, pp. 11–18.
[2] O. Acıic¸mez, C¸ . K. Koc¸, and J.-P. Seifert, “Predicting secret keys via
branch prediction,” in Cryptographers Track at the RSA Conference.
Springer, 2007, pp. 225–242.
[3] O. Aciic¸mez and W. Schindler, “A vulnerability in rsa implementations
due to instruction cache analysis and its demonstration on openssl,” in
CT-RSA, vol. 8. Springer, 2008, pp. 256–273.
[4] O. Aciicmez and J.-P. Seifert, “Cheap hardware parallelism implies
cheap security,” in Fault Diagnosis and Tolerance in Cryptography,
2007. FDTC 2007. Workshop on.
IEEE, 2007, pp. 80–91.
[5] Amazon,
Inc.,
“Amazon
2017.
[Online]. Available: https://aws.amazon.com/ec2/purchasing-options/
dedicated-instances/
instances,”
dedicated
ec2
[6] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and
H. Shacham, “On subnormal ﬂoating point and abnormal timing,” in
Security and Privacy (SP), 2015 IEEE Symposium on.
IEEE, 2015,
pp. 623–639.
[7] M. F. Chowdhury and D. M. Carmean, “Maintaining processor order-
ing by checking load addresses of unretired load instructions against
snooping store addresses,” Feb. 3 2004, uS Patent 6,687,809.
[8] P. Church and A. Goscinski, “Iaas clouds vs. clusters for hpc: A
performance study,” in Cloud Computing 2011: The 2nd International
Conference on Cloud Computing, GRIDS, and Virtualization.
[IARIA],
2011, pp. 39–45.
I. Corporation, “Intel® 64 and ia-32 architecture memory ordering white
paper,” 2007.
[9]
[10] ——, “Using intel® vtune™ ampliﬁer xe to tune software on the 4th
generation intel® core™ processor family,” 2013.
[11] ——, “Intel® 64 and ia-32 architectures optimization reference man-
ual,” 2017.
[12] ——, “Intel® 64 and ia-32 architectures software developers manual,”
Volume 3A: System programming Guide, Part 1, vol. 3A, 2017.
J. Doweck, “Inside intel® core microarchitecture,” in Hot Chips 18
Symposium (HCS), 2006 IEEE.
IEEE, 2006, pp. 1–35.
[13]
[14] D. Evtyushkin and D. Ponomarev, “Covert channels through random
number generator: Mechanisms, capacity estimation and mitigations,”
in Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2016, pp. 843–857.
[15] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, “Jump over
aslr: Attacking branch predictors to bypass aslr,” in Microarchitecture
(MICRO), 2016 49th Annual IEEE/ACM International Symposium on.
IEEE, 2016, pp. 1–13.
[16] ——, “Understanding and mitigating covert channels through branch
predictors,” ACM Transactions on Architecture and Code Optimization
(TACO), vol. 13, no. 1, p. 10, 2016.
[17] A. Fog, “Instruction tables: Lists of instruction latencies, throughputs
and micro-operation breakdowns for intel, amd and via cpus,” Copen-
hagen University College of Engineering, 2011.
[18] G. Forney, “Maximum-likelihood sequence estimation of digital se-
quences in the presence of intersymbol interference,” IEEE Transactions
on Information theory, vol. 18, no. 3, pp. 363–378, 1972.
[19] G. Galante, L. C. E. De Bona, A. R. Mury, B. Schulze, and
R. da Rosa Righi, “An analysis of public clouds elasticity in the exe-
cution of scientiﬁc applications: a survey,” Journal of Grid Computing,
vol. 14, no. 2, pp. 193–216, 2016.
[20] D. Gruss, C. Maurice, A. Fogh, M. Lipp, and S. Mangard, “Prefetch
side-channel attacks: Bypassing smap and kernel aslr,” in Proceedings of
the 2016 ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2016, pp. 368–379.
[21] A. Herzberg, H. Shulman, J. Ullrich, and E. Weippl, “Cloudoscopy:
Services discovery and topology mapping,” in Proceedings of the 2013
ACM workshop on Cloud computing security workshop. ACM, 2013,
pp. 113–122.
[22] Hillger, Brian, “Price reductions on l series and announcing next
generation hyper-threaded virtual machines.” [Online]. Available:
http://bit.ly/2gYVunn
14
[23] R. Hund, C. Willems, and T. Holz, “Practical timing side channel attacks
against kernel space aslr,” in Security and Privacy (SP), 2013 IEEE
Symposium on.
IEEE, 2013, pp. 191–205.
[24] C. Hunger, M. Kazdagli, A. Rawat, A. Dimakis, S. Vishwanath, and
M. Tiwari, “Understanding contention-based channels and using them
for defense,” in High Performance Computer Architecture (HPCA),
2015 IEEE 21st International Symposium on.
IEEE, 2015, pp. 639–
650.
[25] M. S. Inci, B. G¨ulmezoglu, G. I. Apecechea, T. Eisenbarth, and
B. Sunar, “Seriously, get off my cloud! cross-vm rsa key recovery in
a public cloud.” IACR Cryptology ePrint Archive, vol. 2015, p. 898,
2015.
[26] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar, “Wait a minute!
a fast, cross-vm attack on aes,” in International Workshop on Recent
Advances in Intrusion Detection. Springer, 2014, pp. 299–319.
[27] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache
side-channel attacks are practical,” in Security and Privacy (SP), 2015
IEEE Symposium on.
IEEE, 2015, pp. 605–622.
[28] C. Maurice, C. Neumann, O. Heen, and A. Francillon, “C5: cross-
cores cache covert channel,” in International Conference on Detection
of Intrusions and Malware, and Vulnerability Assessment.
Springer,
2015, pp. 46–64.
[29] S. M. Moser, “Error probability analysis of binary asymmetric chan-
nels,” Dept. El. & Comp. Eng., Nat. Chiao Tung Univ, 2009.
[30] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and countermea-
sures: the case of aes,” in Cryptographers Track at the RSA Conference.
Springer, 2006, pp. 1–20.
[31] G. Paoloni and I. Corporation, “How to benchmark code execution times
on intel® ia-32 and ia-64 instruction set architectures,” 2010.
[32] D. A. Patterson, “The data center is the computer,” Communications of
the ACM, vol. 51, no. 1, pp. 105–105, 2008.
[33] C. Percival, “Cache missing for fun and proﬁt,” 2005.
[34] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey, you, get
off of my cloud: exploring information leakage in third-party compute
clouds,” in Proceedings of the 16th ACM conference on Computer and
communications security. ACM, 2009, pp. 199–212.
[35] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient cache attacks on aes,
and countermeasures,” Journal of Cryptology, vol. 23, no. 1, pp. 37–71,
2010.
[36] V. Varadarajan, Y. Zhang, T. Ristenpart, and M. M. Swift, “A placement
vulnerability study in multi-tenant public clouds.” in USENIX Security
Symposium, 2015, pp. 913–928.
[37] Z. Wang and R. B. Lee, “Covert and side channels due to processor
architecture,” in Computer Security Applications Conference, 2006.
ACSAC’06. 22nd Annual.
IEEE, 2006, pp. 473–482.
[38] Z. Wu, Z. Xu, and H. Wang, “Whispers in the hyper-space: high-
bandwidth and reliable covert channel attacks inside the cloud,”
IEEE/ACM Transactions on Networking (TON), vol. 23, no. 2, pp. 603–
614, 2015.
[39] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen, and R. Schlichting,
“An exploration of l2 cache covert channels in virtualized environ-
ments,” in Proceedings of the 3rd ACM workshop on Cloud computing
security workshop. ACM, 2011, pp. 29–40.
[40] Z. Xu, H. Wang, and Z. Wu, “A measurement study on co-residence
threat inside the cloud.” in USENIX Security Symposium, 2015, pp.
929–944.
[41] Y. Yarom and K. Falkner, “Flush+ reload: A high resolution, low noise,
l3 cache side-channel attack.” in USENIX Security Symposium, 2014,
pp. 719–732.
[42] Y. Yarom, D. Genkin, and N. Heninger, “Cachebleed: a timing attack
on openssl constant-time rsa,” Journal of Cryptographic Engineering,
vol. 7, no. 2, pp. 99–112, 2017.
[43] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-vm side
channels and their use to extract private keys,” in Proceedings of
the 2012 ACM conference on Computer and communications security.
ACM, 2012, pp. 305–316.