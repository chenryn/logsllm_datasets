S1, S2, S3, S4
S1, S2, S3, S4
S1
S1, S2, S3, S4
S1, S2, S3, S4
S3
S1, S2
S1, S2, S3
S1, S2
S1
S1, S2, S3, S4
S1, S2, S3, S4
S1, S2, S3
S2
S1
S1, S2, S4
S1, S2, S3
S1, S2, S3
S1, S2
In summary, our attack is feasible against most applica-
tions on 32-bit systems and against high-value targets (such
as web browsers and very popular applications) on 64-bit.
An important question related to BATE is the reason
why the compiler does not align some targets. Indeed,
this interplay between misalignment and CFG’s assumption
creates the vulnerability that BATE exploits. To investigate
this, we analyzed an already compiled library: the 64-bit
jscript9.dll, as it is based on ChakraCore, which is
open source. We observed that the compiler ignores some
alignment directives for handwritten assembly routines,
causing the misalignments in jscript9.dll. We specu-
late that it might correspond to a number of reasons, such
as a compiler bug that manifests in borderline cases, or a
bug in Microsoft’s compilation pipeline. However, we could
not replicate misalignment by compiling neither Chakra-
Core nor some custom test code. Moreover, our analysis
is limited to a single library, and the source of unaligned
targets in other libraries may be different.
11
VII. PROOF OF CONCEPT IMPLEMENTATION OF BATE
To demonstrate BATE, we build a proof-of-concept re-
mote code execution exploit against the Microsoft Edge
web browser running on 64-bit Windows 10 Anniversary
Update. We exploit two known vulnerabilities in the Chakra
JavaScript engine: an information leak [2] and a type
confusion [3]. These vulnerabilities are already used in a
public proof-of-concept exploit [42], on which we draw
inspiration for our implementation. However, the public
exploit overwrites a thread’s stack to hijack control ﬂow, thus
needing arbitrary write on the stack. We remark that BATE
allows us to obtain control and bypass CFG without the
need of arbitrary write, making our technique more general.
The outline of our proof-of-concept exploit is as follows.
We ﬁrst discover the layout of the program’s memory to
locate our gadgets. We then corrupt a C++ virtual table to
redirect execution into an S2-P16R0 chain and gain ﬂow
control. This step highlights that our technique bypasses
CFG. Finally, to present a working proof-of-concept exploit
(even if we already bypassed CFG), we use stack pivoting
and ROP to bypass DEP and execute arbitrary code. We now
describe the exploit in more detail.
A. Primitives
We build two primitives from the vulnerabilities: the ﬁrst
one allows us to leak the absolute address of an arbitrary
JavaScript object. The second one provides us with arbitrary
memory read/write. We stress that, differently from the
public exploit, we use the arbitrary write in a very limited
way: we only corrupt heap objects, but not other memory
areas such as the stack. Therefore, we could exploit less
“powerful” vulnerabilities with our attack.
Address leak. The information leak vulnerability allows us to
leak the addresses of the elements of an array. We leverage
this into a primitive that leaks the address of an object,
by constructing an array that contains the object and then
using the information leak to get the address.
Arbitrary read/write. We use the type confusion vulnerabil-
ity to confuse an array and a DataView object. By altering
the array, we can change the data pointer the DataView
works on and perform memory reads and writes from it.
B. Gadget selection
We use a P16R0 gadget from msmpeg2vdec.dll (Fig-
ure 6) and a S2 gadget from chakra.dll (Figure 7). The
latter is already loaded in memory, since it belongs to the
JavaScript engine. It will spill its second argument (rdx)
to rsp+16 and call the function at offset 0x50 in the
virtual table of the object pointed to by the ﬁrst argument
(rcx). To bring the PR gadget into memory, we embed
an MPEG-2 video in the exploit page, which forces the
msmpeg2vdec.dll codec to be loaded. When chained to
the S gadget, it will return to the second argument of the S
gadget.
C. ASLR bypass
Since we will have to hijack indirect calls to the gadgets,
we need to know their absolute addresses, which are ran-
domized due to ASLR. To derandomize them, we ﬁnd the
1
2
3
4
; @ msmpeg2vdec+0xb29c
pop rdi
pop rsi
ret
Fig. 6. The P16R0 gadget from msmpeg2vdec.dll used in our proof-
of-concept exploit.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
; @ chakra+0x31f0000
chakra!ScriptEngine::EnumHeap:
mov r11, rsp
; Spill arguments to RPA
mov [r11+0x10], rdx
mov [r11+0x8], rcx
; Allocate stack frame
sub rsp, 0x28
; Prepare call to rcx->__vfptr[10]
mov rax, [rcx]
mov r8, rdx
xor edx, edx
mov rax, [rax+0x50]
; Deallocate stack frame
add rsp, 0x28
; Perform indirect call via CFG
jmp cs:__guard_dispatch_icall_fptr
Fig. 7. The S2 gadget from chakra.dll used in our proof-of-concept
exploit.
base of the containing modules, which then can be offsetted
to address anything inside the module. We use hardcoded
offsets as they are sufﬁcient for this proof-of-concept. A
“weaponized” real-world exploit would dynamically deter-
mine code layout with the read primitive to work on as
many module versions as possible.
chakra.dll. We use the address leak primitive to obtain the
address of a JavaScript object. Then we use the arbitrary
read primitive twice: ﬁrst to read the virtual table pointer
from the the object, and then to read the address of a func-
tion inside chakra.dll from the virtual table. We know
the offset of this function from the base of chakra.dll,
so subtracting it from the leaked function address yields the
base.
msmpeg2vdec.dll. This module is loaded through various
layers of indirection, so a direct leak is difﬁcult. Since we
derandomized chakra.dll, we know where its import
table is located. We read the address of a function imported
from msvcrt.dll and determine the base of that module.
Then, we read the address of a function from ntdll.dll
from the import table of msvcrt.dll and derandomize
the former library. Since ntdll.dll contains an hash ta-
ble ﬁlled with information about loaded modules, including
their base address, we can build a lookup routine on top of
the read primitive and get the base of msmpeg2vdec.dll.
D. Controlling 64-bit arguments
To apply our attack we need to control a 64-bit argu-
ment to an hijacked indirect call. Since Chakra is a C++
application, this would most likely be a virtual call. There
are plenty of virtual methods which accept user-controlled
32-bit arguments, such as indexes for string and array
operations. However, arbitrary 64-bit arguments are not as
easy to come by, particularly because there is no integer
64-bit data type in JavaScript. Many functions accept Var
arguments, which represent a JavaScript object, either as a
pointer to it or as a tagged double, if it is a number [8].
Since we need to set the argument to a pointer to our
target, we cannot express it as a number, as it will be tagged.
To get a controlled Var, we create an array object, which
will contain its elements as an array of Vars. We then use
the write primitive to corrupt one of those elements to the
desired value. Since now the element points to code instead
of a valid JavaScript object, we have to be careful to not
perform operations on it that may crash the engine.
E. Control ﬂow hijacking
We
outline
of
the
general
stage
in Figure
8. We
target
show the
table pointer
control
the
ﬂow hijacking
JavascriptFunction::HasInstance
virtual
function by hijacking the virtual
for a
JavascriptFunction object with the write primitive
and pointing it to a fake virtual table. Note that virtual
tables are read-only, which is why we build a fake table
instead of corrupting the real one. We point HasInstance,
at offset 0x200 in the virtual table, to the S gadget. The
function is invoked when the instanceof operator
is used with a function as the left-hand side operand
(step 1). The S gadget (step 2) gets passed a pointer to
the JavascriptFunction instance object as the ﬁrst
hidden argument, while the right-hand side Var is passed
as the second one. This is convenient since the virtual call
in the S gadget will happen through the same fake virtual
table, so by previously setting the entry at 0x50 to point
to the PR gadget we can chain it to the S gadget (step 3).
We now only need to setup a fake Var that points to our
target and use it as the right-hand side operand to gain
ﬂow control, bypassing CFG.
+0x50
+0x200
Fake VTable
...
(cid:112)
3(cid:13) &P16R0
...
(cid:112)
2(cid:13) &S2
...
1(cid:13) Invoke instanceof
4(cid:13) Stack pivot
rsp ← Fake SP
jmp &ret
(cid:112)
Valid CFG targets
JavascriptFunction
VTable pointer +0x00
...
Fake SP
...
&ret
...
+0x10
+0x50
5(cid:13) ROP chain
Setup registers
Call VirtualProtect
Jump to shellcode
6(cid:13) Shellcode
Fig. 8. Overview of control ﬂow hijacking and DEP bypass in our proof-
of-concept exploit.
F. DEP bypass
We show an overview of the DEP bypass stage in Figure 8
(steps number 5 and 6 of the exploit). At this point of the
attack, we do not have to worry about CFG anymore and
we can use standard techniques to bypass DEP. We set up
12
two strings on the heap: one contains a ﬁrst-stage ROP
chain, the other keeps the second-stage shellcode. We use
the address leak primitive to locate those buffers in memory.
We redirect control to the stack pivoting gadget shown in
Figure 9. The object pointed by rcx is again the corrupted
JavascriptFunction, which we have control over. We
use the stack pivoting gagdet to redirect the stack pointer
into the ROP chain (step 4). The value that gets loaded
into rdx is the address of a ret instruction to launch the
chain. The ROP chain uses gadgets from chakra.dll to
call VirtualProtect on the shellcode buffer to mark it
as executable (step 5). Finally, it jumps to the shellcode,
achieving arbitrary code execution (step 6).
1
2
3
4
5
; @ ntdll+0xab305
mov rdx, [rcx+0x50]
mov rbp, [rcx+0x18]
mov rsp, [rcx+0x10]
jmp rdx
Fig. 9.
of-concept exploit.
The stack pivoting gadget from ntdll.dll used in our proof-
VIII. DISCUSSION AND COUNTERMEASURES
We believe BATE is a real threat. Apart from the standard
requirement to be able to disclose the memory layout,
we only require control of an argument to an hijacked,
CFG-protected indirect call. This a realistic assumption: for
example, if the attack is based on virtual table hijacking,
the adversary can hijack any function within a virtual table
with no extra effort, since a fake table has to be already in
place. This allows to freely choose between a large number
of candidate functions: it is likely that one will satisfy the
requirements. On 32-bit systems BATE is easy to carry out
and PR gadgets are widespread, especially in the C/C++
runtime library, effectively making it an almost universal
CFG bypass. 64-bit exploitation presents further challenges,
such as controlling the indirect call at the end of an S
gadget. However, we think BATE is still feasible, as other
attacks against CFI by chaining gadgets via hijacked indirect
branches [17], [34] proved to be feasible in the past and we
demonstrated our attack on real-world code.
A. Countermeasures
We believe that a widely deployable countermeasure
needs to modify CFG as little as possible, and should not
alter its core design. At its core, BATE relies on a CFG’s
design assumption being often violated by compiled code.
Speciﬁcally, CFG guarantees single-byte granularity only for
16-byte aligned targets; however, the compiler sometimes
does not properly align functions. There are two ways to
address this issue: (i) by improving CFG’s precision, or (ii)
by avoiding unaligned targets. With the current design, (i)
would require at least a bit for every address, resulting in a
bitmap that occupies 1/8th of the process’ addressing space.
While a similar memory footprint is present in previous
work [28], and most memory would be virtual and not
physically backed, it is still a big price to pay, especially
on 32-bit where the virtual address space is limited. Option
(ii) is simpler and more feasible: the compiler should align
all CFG targets to a 16-byte boundary by inserting appro-
priate padding. As shown in Table I, 64-bit libraries contain
relatively few unaligned targets, so this should not result in
a signiﬁcant increase in code size. On 32-bit, where there
are many more unaligned targets, padding could take up a
signiﬁcant amount of space, and possibly have performance
implications (e.g., excessive padding could hinder the ef-
fectiveness of caches). Despite such downsides, we believe
the latter could be the best “immediate” mitigation to what
is essentially a design decision, coming from the delicate
tradeoff between precision and performance required by
CFI techniques.
An additional angle for defense stems from another
assumption BATE makes:
lack of backward-edge CFI. A
shadow stack [12] would protect the return address and
stop BATE. Shadowing return addresses was attempted by
Microsoft with the Return Flow Guard mitigation, although
it was ultimately removed because it suffered from a design-
level bypass [44]. A novel and promising hardware-based
implementation of shadow stack is Intel CET [19].
IX. CONCLUSIONS
In this paper, we presented Back To The Epilogue (BATE),
a novel bypass for Microsoft’s Control Flow Guard (CFG).
After describing the internals of CFG and discussing its
weaknesses, we deﬁned two kinds of gadgets, PR and S.
PR gadgets can be found near the beginning of unaligned
functions. Because of how CFG approximates valid call tar-
gets, these gadgets are considered unintended valid targets
as well. We then combined S and PR gadgets to implement
BATE and bypass CFG. Our technique hijacks control ﬂow