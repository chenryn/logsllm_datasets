varnish 将在不同阶段执行它的子程序代码，因为它的代码是一行一行执行的，不存在
优先级问题。随时可以调用这个子程序中的功能并且当他执行完成后就退出。
如果到最后您也没有调用您的子进程中的功能，varnish将执行一些内建的VCL代码，
这些代码就是default.vcl中被注释的代码。
99%的几率您需要改变vcl_recv 和 vcl_fetch这两个子进程。
vcl_recv
vcl_recv（当然，我们在字符集上有点不足，应为它是unix）在请求的开始被调用，
在接收、解析后，决定是否响应请求，怎么响应，使用哪个后台服务器。
在vcl_recv中，您可以修改请求，比如您可以修改cookies，添加或者删除请求的
头信息。
注意vcl_recv中只有请求的目标,req is available。
vcl_fetch
vcl_fetch在一个文件成功从后台获取后被调用，通常他的任务就是改变response
headers，触发ESI进程，在请求失败的时候轮询其他服务器。
在 vcl_fetch 中一样的包含请求的 object，req，available，他们通常是 backend
response，beresp。beresp将会包含后端服务器的HTTP的头信息
actions
主要有以下动作
pass \\当一个请求被pass后，这个请求将通过varnish转发到后端服务器，
但是它不会被缓存。pass可以放在vcl_recv 和 vcl_fetch中。
lookup \\当一个请求在vcl_recv中被lookup后，varnish将从缓存中提取数
据，如果缓存中没有数据，将被设置为pass，不能在vcl_fetch中设置lookup。
pipe \\pipe和pass相似，都要访问后端服务器，不过当进入pipe模式后，在
此连接未关闭前，后续的所有请求都发到后端服务器（这句是我自己理解后简化的，有能力
的朋友可以看看官方文档，给我提修改建议）。
deliver \\请求的目标被缓存，然后发送给客户端
esi \\ESI-process the fetched document（我理解的就是vcl中包换一段html
代码）
Requests，Responses and objects
在VCL中，有3个重要的数据结构
request 从客户端进来
responses 从后端服务器过来
object 存储在cache中
在VCL中，你需要知道以下结构
req \\请求目标，当 varnish 接收到一个请求，这时 req object就被创建了，
你在vcl_recv中的大部分工作，都是在req object上展开的。
beresp \\后端服务器返回的目标，它包含返回的头信息，你在vcl_fetch中的
大部分工作都是在beresp object上开展的。
obj \\被 cache 的目标，只读的目标被保存于内存中，obj.ttl 的值可修改，其
他的只能读。
Operaors
10
www.linuxidc.com
VCL支持以下运算符，请阅读下面的例子：
= \\赋值运算符
== \\对比
~ \\匹配，在ACL中和正则表达式中都可以用
！ \\否定
&& \\逻辑与
|| \\逻辑或
EXAMPLE 1 – manipulation headers
我们想要取消我们服务器上/images目录下的所有缓存：
sub vcl_recv {
if (req.url ~ "^/images") {
unset req.http.cookie;
}
}
现在，当这个请求在操作后端服务器时，将不会有 cookie 头，这里有趣的行是
if-statement，它匹配URL，如果匹配这个操作，那么头信息中的cookie就会被删除。
EXAMPLE 2 – manipulation beresp
从后端服务器返回对象的值满足一些标准，我们就修改它的TTL值：
sub vcl_fetch {
if (beresp.url ~ "\.(png|gif|jpg)$") {
unset beresp.http.set-cookie;
beresp.ttl = 3600;
}
}
EXAMPLE3-ACLs
你创建一个VCL关键字的访问控制列表。你可以配置客户端的IP地址
# Who is allowed to purge....
acl local {
"localhost";
"192.168.1.0"/24; /* and everyone on the local network */
! "192.168.1.23"; /* except for the dialin router */
}
sub vcl_recv {
if (req.request == "PURGE") {
if (client.ip ~ local) {
return(lookup);
}
}
}
sub vcl_hit {
if (req.request == "PURGE") {
11
www.linuxidc.com
set obj.ttl = 0s;
error 200 "Purged.";
}
}
sub vcl_miss {
if (req.request == "PURGE") {
error 404 "Not in cache.";
}
}
●Statistics（统计 varnish 相关数据）
现在您的varnish已经正常运行，我们来看一下varnish在做什么，这里有些工具可
以帮助您做到。
Varnishtop
Varnishtop工具读取共享内存的日志，然后连续不断的显示和更新大部分普通日志。
适当的过滤使用 –I，-i，-X 和-x 选项，它可以按照您的要求显示请求的内容，客
户端，浏览器等其他日志里的信息。
varnishtop -i rxurl \\您可以看到客户端请求的url次数。
Varnishtop -i txurl \\您可以看到请求后端服务器的url次数。
Varnishtop -i Rxheader –I Accept-Encoding \\可以看见接收到的头信息中有有多少次
包含Accept-Encoding。
Varnishhist
Varnishhist工具读取varnishd的共享内存段日志，生成一个连续更新的柱状图，显
示最后 N 个请求的处理情况。这个 N 的值是终端的纵坐标的高度，横坐标代表的是对数，
如果缓存命中就标记“|”，如果缓存没有命中就标记上“#”符号。
Varnishsizes
Varnishsizes 和varnishhist相似，除了varnishsizes现实了对象的大小，取消了完成
请求的时间。这样可以大概的观察您的服务对象有多大。
Varnishstat
Varnish 有很多计数器，我们计数丢失率，命中率，存储信息，创建线程，删除对
象等，几乎所有的操作。Varnishstat将存储这些数值，在优化varnish的时候使用这个命令。
有一个程序可以定期轮询 varnishstat 的数据并生成好看的图表。这个项目叫做
Munin。Munin可以在http://munin-monitoring.org/找到。在varnish的源码中有munin插件。
●Achiveving a high hitrate（提高缓存命中率）
现在varnish 已经正常运行了,您可以通过varnish访问到您的web应用程序。如果
您的 web 程序在设计时候没有考虑到加速器的架构，那么您可能有必要修改您的应用程序
或者varnish配置文件，来提高varnish的命中率。
既然这样，您就需要一个工具用来观察您和web服务器之间HTTP头信息。服务器
12
www.linuxidc.com
端您可以轻松的使用varnish的工具，比如varnishlog和varnishtop，但是客户端的工具需要
您自己去准备，下面是我经常使用的工具。
Varnistop
您可以使用varnishtop确定哪些URL经常命中后端。Varnishtop –i txurl 就是一个基
本的命令。您可以通过阅读“Statistics”了解其他示例。
Varnishlog
当您需要鉴定哪个URL被频繁的发送到后端服务器，您可以通过varnishlog对请求
做一个全面的分析。varnishlog –c –o /foo/bar 这个命令将告诉您所有（-o）包含”/football/bar”
字段来自客户端（-c）的请求。
Lwp-request
Lwp-request是www库的一部分，使用perl语言编写。它是一个真正的基本程序，
它可以执行HTTP请求，并给您返回结果。我主要使用两个程序，GET和HEAD。
Vg.no是第一个使用varnish的站点，他们使用varnish相当完整，所以我们来看看
他们的HTTP 头文件。我们使用GET请求他们的主页：
$ GET -H 'Host: www.vg.no' -Used http://vg.no/
GET http://vg.no/
Host: www.vg.no
User-Agent: lwp-request/5.834 libwww-perl/5.834
200 OK
Cache-Control: must-revalidate
Refresh: 600
Title: VG Nett - Forsiden - VG Nett
X-Age: 463
X-Cache: HIT
X-Rick-Would-Never: Let you down
X-VG-Jobb: http://www.finn.no/finn/job/fulltime/result?keyword=vg+multimedia
Merk:HeaderNinja
X-VG-Korken: http://www.youtube.com/watch?v=Fcj8CnD5188
X-VG-WebCache: joanie
X-VG-WebServer: leon
OK，我们来分析它做了什么。GET 通过发送HTTP 0.9的请求，它没有主机头，所
以我需要添加一个主机头使用-H选项，-U打印请求的头，-s打印返回状态，-e 答应返
回状态的头，-d 丢弃当前的连接。我们正真关心的不是连接，而是头文件。
如您所见VG 的头文件中有相当多的信息，比如 X-RICK-WOULD-NEVER 是vg.no 定
制的信息，他们有几分奇怪的幽默感。其他的内容，比如X-VG-WEBCACHE 是用来调试
错误的。
核对一个站点是否使用cookies，可以使用下面的命令：
GET -Used http://example.com/ |grep ^Set-Cookie
Live HTTP Headers
这是一个firefox的插件，live HTTP headers 可以查看您发送的和接收的http头。软
件在https://addons.mozilla.org/en-US/firefox/addon/3829/下载。或者google“Live HTTP
headers”。
The Role of HTTP headers
13
www.linuxidc.com
Varnish 认为自己是真正的 web 服务器，因为它属于您控制。IETF 没有真正定义
surrogate origin cache 角色的含义，（The role of surrogate origin cache is not really well
defined by the IETF so RFC 2616 doesn’t always tell us what we should do.不知如何翻译）
Cache-Control
Cache-control指示缓存如何处理内容，varnish关心max-age参数，并使用这个参数
计算每个对象的TTL值。
“cache-control：nocache” 这个参数已经被忽略，不过您可以很容易的使它生效。
在头信息中控制cache-control的max-age，您可以参照下面，varnish软件管理服务
器的例子：
$ GET -Used http://www.varnish-software.com/|grep ^Cache-Control
Cache-Control: public, max-age=600
Age
Varnish添加了一个age头信息，用来指示对象已经被保存在varnish中多长时间了。
您可以在varnish中找到Age信息：
varnishlog -i TxHeader -I ^Age
Overriding the time-to-live（ttl）
有时候后端服务器会当掉，也许是您的配置问题，很容易修复。不过更简单的方法
是修改您的ttl，能在某种程度上修复难处理的后端。
您需要在VCL中使用beresp.ttl定义您需要修改的对象的TTL：
sub vcl_fetch {
if (req.url ~ "^/legacy_broken_cms/") {
set beresp.ttl = 5d;
}
}
Cookies
现在Varnish接收到后端服务器返回的头信息中有Set-Cookie信息的话，将不缓存。
所以当客户端发送一个Cookie头的话，varnish将直接忽略缓存，发送到后端服务器。
这样的话有点过度的保守，很多站点使用 Google Analytics（GA）来分析他们的流
量。GA 设置一个 cookie 跟踪您，这个 cookie 是客户端上的一个 java 脚本，因此他们
对服务器不感兴趣。
对于一个web站点来说，忽略一般cookies是有道理的，除非您是访问一些关键部
分。这个VCL的vcl_recv片段将忽略cookies，除非您正在访问/admin/：
if ( !( req.url ~ “^/admin/”) ) {
unset req.http.Cookie;
}
很简单，不管您需要做多么复杂的事情，比如您要删除一个 cookies，这个事情很
困难，varnish 也没有相应的工具来处理，但是我们可以使用正则表达式来完成这个工
作，如果您熟悉正则表达式，您将明白接下来的工作，如果您不会我建议您找找相关资
料学习一下。
我们来看看 varnish 软件是怎么工作的，我们使用一些 GA 和一些相似的工具产生
cookies。所有的cookies使用jsp语言。Varnish和企业网站不需要这些cookies，而varnish
会因为这些cookies而降低命中率，我们将放弃这些多余的cookies，使用VCL。
下面的VCL将会丢弃所有被匹配的cookies。
14
www.linuxidc.com
// Remove has_js and Google Analytics __* cookies.
set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(_[_a-z]+|has_js)=[^;]*", "");
// Remove a ";" prefix, if present.
set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");
下面的例子将删除所有名字叫COOKIE1和COOKIE2的cookies：
sub vcl_recv {
if (req.http.Cookie) {
set req.http.Cookie = ";" req.http.Cookie;
set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
set req.http.Cookie = regsuball(req.http.Cookie, ";(COOKIE1|COOKIE2)=", "; \1=");
set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
if (req.http.Cookie == "") {
remove req.http.Cookie;
}
}
这个例子是来自varnish wiki的。
Vary
各式各样的头被发送到web server，他们让HTTP目标多样化。Accept-Encoding头
就有这种感觉，当一个服务器分发一个“Vary：Accept-Encoding”给 varnish。Varnish 需要
cache来自客户端的每个不同的Accept-Encoding。如果客户端只接收gzip编码，varnish不对
其他编码服务，那么就可以缩减编码量。
问题就是这样的，Accept-Encoding字段包含很多编码方式，下面是不同浏览器发送
的：
Accept-Encodign: gzip,deflate
另一个浏览器发送的：
Accept-Encoding:: deflate, gzip
Varnish可以使两个不同的accept-enconding头标准化，这样就可以尽量减少变
体。下面的VCL代码可以是accept-encoding头标准化：
if (req.http.Accept-Encoding) {
if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
# No point in compressing these
remove req.http.Accept-Encoding;
} elsif (req.http.Accept-Encoding ~ "gzip") {
set req.http.Accept-Encoding = "gzip";
} elsif (req.http.Accept-Encoding ~ "deflate") {
set req.http.Accept-Encoding = "deflate";
} else {
# unkown algorithm
remove req.http.Accept-Encoding;
}
}
15
www.linuxidc.com
这段代码设置客客户端发送的accept-encoding头只有gzip和default两种编码，gzip
优先。
Pitfall – Vary：User-Agent
一些应用或者一些应用服务器发送不同 user-agent 头信息，这让 varnish 为每个单
独的用户保存一个单独的信息，这样的信息很多。一个版本相同的浏览器在不同的操作系统
上也会产生最少10种不同的user-agent头信息。如果您不打算修改user-agent，让他们标准
化，您的命中率将受到严重的打击，使用上面的代码做模板。
Pragma
http 1.0 服务器可能会发送“Pragma：nocache”。 Varnish忽略这个头，您可以轻
松的使用VCL来完成这个任务：
In vcl_fetch：
if (beresp.http.Pragma ~ "nocache") {
pass;
}
Authorization
如果varnish收到一个认证请求的头，他将pass这个请求，如果您不打算对这个头
做任何操作的话。
Normalizing your namespace
有些站点访问的主机名有很多，比如 http://www.varnish-software.com，
http://varnish-software.com，http://varnishsoftware.com 所有的地址都对应相同的一个
站点。但是varnish不知道，varnish会缓存每个地址的每个页面。您可以减少这种情况，
通过修改web配置文件或者通过以下VCL：
if (req.http.host ~ "^(www.)?varnish-?software.com") {
set req.http.host = "varnish-software.com";
}
Purging
增加TTL值是提高命令率的一个好方法，如果用户访问到的内容是旧的，这样就会
对您的商务照成影响。
解决方法就是当有新内容提供的时候通知varnish。可以通过两种机制HTTP purging
和bans。首先，我们来看一个清理的实例：
HTTP purges
HTTP purges和HTTP GET请求相似，除了这是用来purges的。事实上您可以在任何
您喜欢的时间使用这个方法，但是大多数人使用它purging。Squid支持相同的机制，为了让
varnish支持purging，您需要在VCL中做如下配置：
acl purge {
"localhost";
"192.168.55.0/24";
}
sub vcl_recv {
# allow PURGE from localhost and 192.168.55...
if (req.request == "PURGE") {
16
www.linuxidc.com
if (!client.ip ~ purge) {
error 405 "Not allowed.";
}
return (lookup);
}