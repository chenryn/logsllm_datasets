本章涵盖了很多重要的技术和技术的变化。了解一些技术的历史，有助于决定新的应
用程序应该使用哪些技术，现有的应用程序应该如何处理。
.NET Framework 4.6和.NET Core 1.0是有差异的。本章讨论了如何在这两种环境中创
建并运行“Hello, World!”应用程序，但没有使用Visual Studio。
本章阐述了公共语言运行库（CLR）的功能，介绍了用于访问数据库和创建Windows
应用程序的技术。论述了ASP.NET Core 1.0的优点。
第2章开始使用Visual Studio创建“Hello, World!”应用程序，继续讨论C#语法。
第2章
核心C#
本章要点
● 用Visual Studio创建Hello, World!
● 声明变量
● 变量的初始化和作用域
● C#的预定义数据类型
● 在C#程序中指定执行流
● 枚举
● 名称空间
● Main（）方法
● 使用内部注释和文档编制功能
● 预处理器指令
● C#编程的推荐规则和约定
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● HelloWorldApp
● VariablesSample
● VariableScopeSample
● IfStatement
● ForLoop
● EnumerationsSample
● NamespacesSample
● ArgumentsSample
● StringSample
2.1 C#基础
理解了C#的用途后，就该学习如何使用它了。本章将介绍C#编程的基础知识，这也
是后续章节的基础。阅读完本章后，读者就有足够的C#知识来编写简单的程序了，但还
不能使用继承或其他面向对象的特性。这些内容将在后面的几章中讨论。
2.2 用Visual Studio创建Hello, World!
第1章解释了如何使用.NET 4.6的csc编译器和.NET Core 1.0的dotnet工具编写C#程序
Hello, World!。还可以使用Visual Studio 2015创建它，这是本章的内容。
  注意： 在第1章，Visual Studio用作代码编辑器和编译器，没有使用Visual
Studio的所有其他特性。第17章介绍了Visual Studio提供的所有其他选项和特性。
2.2.1 创建解决方案
首先，在Visual Studio中创建一个解决方案文件。解决方案允许组合多个项目，打开
解决方案中的所有项目。
选择File | New Project命令，然后选择Installed | Templates | Other Project Types | Visual
Studio Solutions，可以创建空的解决方案。选择Blank Solution模板（如图2-1所示）。在
New Project对话框中，可以定义解决方案的名称以及应该存储解决方案的目录。也可以指
定解决方案是否应该添加到Git存储库中，进行源代码控制管理。
图2-1
创建解决方案后，在Solution Explorer中会看到解决方案的内容（如图2-2所示）。目
前，只有一个解决方案文件，其中没有任何内容。
图2-2
2.2.2 创建新项目
现在添加一个新项目来创建Hello, World！应用程序。在Solution Explorer中右击解决
方案，或者使用工具栏中的Menu按钮打开上下文菜单（如图2-2所示），选择Add|New
Project命令，打开Add New对话框。也可以选择File | Add | New Project。在Add New对话
框中，选择Console Application （Package）模板，来创建一个面向.NET Core的控制台应
用程序。这个项目类型在Installed | Templates| Visual C# | Web的树中（如图2-3所示）。把
应用程序的名称设置为HelloWorldApp。
图2-3
  注意： 要打开应用程序的上下文菜单，可以使用不同的选项：选择一项，右
击，打开上下文菜单（如果是左撇子，就左击）；或选择一项，按键盘上的菜单键
（通常位于右侧Alt和Ctrl键之间）。如果键盘上没有菜单键，就按下Shift + F10。最
后，如果有触摸板，就可以执行双指触摸。
Solution Explorer不再是空的。它现在显示项目和属于该项目的所有文件（如图2-4所
示）。
图2-4
在第1章，项目文件由dotnet工具创建，现在在Visual Studio模板中创建。指定了两个
框架.NET 4.6和.NET Core 1.0。在两个框架中，都引用了NetStandard.Library 1.0 （代码文
件HelloWorldApp /project.json）：
    {
      "version": "1.0.0-＊",
      "description": "",
      "authors": [ "" ],
      "tags": [ "" ],
      "projectUrl": "",
      "licenseUrl": "",
      "dependencies": {
        "NETStandard.Library": "1.0.0-＊"
      },
     "frameworks": {
        "net46": { },
        "netstandardapp1.5": {
        "dependencies": { },
        "imports": "dnxcore50"
        }
      },
      "runtimes": {
        "win7-x64": { },
        "win10-x64": { }
      }
    }
生成的C#源文件Program.cs在Program类中包含Main方法，Program类在
HelloWorldApp名称空间中定义（代码文件HelloWorldApp /Program.cs）：
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    namespace HelloWorldApp
    {
      class Program
      {
        static void Main(string[] args)
        {
        }
      }
    }
把它改为Hello, World！应用程序。需要打开名称空间，以使用Console类的WriteLine
方法，还需要调用WriteLine方法。还要修改Program类的名称空间。Program类现在在
Wrox.HelloWorldApp名称空间中定义（代码文件HelloWorldApp / Program.cs）：
    using static System.Console;
    namespace Wrox.HelloWorldApp
    {
      class Program
      {
        static void Main()
        {
        WriteLine("Hello, World! ");
        }
      }
    }
在Solution Explorer中选择项目，使用上下文菜单，打开Properties（或View | Property
Pages命令）打开项目配置（如图2-5所示）。在Application选项卡，可以选择应用程序的
名称、默认名称空间（这只用于新添加的项目）和应该用于解决方案的.NET Core版本。
如果选择的版本与默认选项不同，则创建一个global.json文件，其中包含这个配置设置。
图2-5
2.2.3 编译和运行程序
Build菜单为构建项目提供了不同的选项。可以使用Build | Build Solution命令构建解
决方案的所有项目，也可以使用Build | Build HelloWorldApp命令构建单个项目。还可以看
一看Build菜单中的其他选项。
为了生成持久的文件，可以在项目属性的Build选项卡中选中Produce outputs on build
复选框（如图2-6所示）。
图2-6
选中Produce outputs on build复选框，构建程序后，可以看到在File Explorer中，目录
artifacts包含的子目录支持列出的所有.NET Framework版本和二进制文件。
可以在Visual Studio中选择Debug | Start Without Debugging命令运行应用程序。这将启
动应用程序，如图2-7所示。
图2-7
  注意： 一定不要用Debug | Start Debugging命令启动应用程序；否则，就看不
到应用程序的输出，因为控制台窗口在应用程序完成后立即关闭。可以使用这种方法
来运行应用程序，设置断点，调试应用程序，或在Main方法结束前添加ReadLine方
法。
可以使用项目属性中的Debug选项卡，配置运行应用程序时应该使用的运行库版本
（如图2-8所示）。
图2-8
  提示： 一个解决方案有多个项目时，可以指定应该运行什么项目，方法是在
Solution Explorer中选择项目，打开上下文菜单，从中选择Set as Startup Project （或
Project | Set as Startup Project）命令。也可以在Solution Explorer中选择解决方案，并选
择Set as Startup Project，打开解决方案的属性页，在其中可以选择启动项目。还可以定
义多个要启动的项目。
2.2.4 代码的详细介绍
下面讨论C#源代码。首先对C#语法做一些一般性的解释。在C#中，与其他C风格的
语言一样，语句都以分号（；）结尾，并且语句可以写在多个代码行上，不需要使用续行
字符。用花括号（{}）把语句组合为块。单行注释以两个斜杠字符开头（//），多行注释
以一个斜杠和一个星号（/*）开头，以一个星号和一个斜杠（*/）结尾。在这些方面，C#
与C++和Java一样，但与Visual Basic不同。分号和花括号使C#代码与Visual Basic代码的外
观差异很大。如果以前使用的是Visual 
Basic，就应特别注意每条语句结尾的分号。对于
新接触C风格语言的用户，忽略分号常常是导致编译错误的最主要原因之一。另一个方面
是，C#区分大小写，即myVar与MyVar是两个不同的变量。
在上面的代码示例中，前几行代码与名称空间有关（如本章后面所述），名称空间是
把相关类组合在一起的方式。namespace关键字声明了应与类相关的名称空间。其后花括
号中的所有代码都被认为是在这个名称空间中。编译器在using语句指定的名称空间中查
找没有在当前名称空间中定义但在代码中引用的类。这与Java中的import语句和C++中的
using namespace语句非常类似。
    using static System.Console;
    namespace Wrox
    {
在Program.cs文件中使用using 
static指令的原因是下面要使用一个库类
System.Console。using static System.Console语句允许引用这个类的静态成员，而忽略名称
空间和类名。仅声明using System，在调用WriteLine（）方法时需要添加类名：
    using System;
    // etc.
    Console.WriteLine("Hello World! ");
忽略整个using语句，调用WriteLine（）方法时就必须添加名称空间的名称：
    System.Console.WriteLine("Hello World! ");
标准的System名称空间包含了最常用的.NET类型。在C#中做的所有工作都依赖
于.NET基类，认识到这一点非常重要；在本例中，使用了System名称空间中的Console
类，以写入控制台窗口。C#没有用于输入和输出的内置关键字，而是完全依赖于.NET
类。
  注意： 本章和后续章节中几乎所有示例都使用Console类的静态成员，所以
假定所有的代码片段都包含using static System.Console；语句。
在源代码中，声明一个类Program。但是，因为该类位于Wrox.HelloWorldApp名称空
间中，所以其完整的名称是Wrox.HelloWorldApp.Program：
    namespace Wrox.HelloWorldApp
    {
      class Program
      {
所有的C#代码都必须包含在类中。类的声明包括class关键字，其后是类名和一对花
括号。与类相关的所有代码都应放在这对花括号中。
Program类包含一个方法Main（）。每个C#可执行文件（如控制台应用程序、
Windows应用程序、Windows服务和Web应用程序）都必须有一个入口点——Main（）方
法（注意，M大写）：
    static void Main()
    {
在程序启动时调用该方法。该方法要么没有返回值（void），要么返回一个整数
（int）。注意，在C#中，方法定义的格式如下：
    [modifiers] return_type MethodName([parameters])
    {
      // Method body. NB. This code block is pseudo-code.
    }
第一个方括号中的内容表示一些可选关键字。修饰符（modifiers）用于指定用户所定
义的方法的某些特性，例如可以在何处调用该方法。在本例中，Main（）方法没有使用
public访问修饰符，如果需要对Main（）方法进行单元测试，可以给它使用public访问修
饰符。运行库不需要使用public访问修饰符，仍可以调用方法。运行库没有创建类的实
例，调用方法时，需要修饰符static。把返回类型设置为void，在本例中，不包含任何参
数。
最后，看看代码语句：
    WriteLine("Hello World! ");
在本例中，只调用了System.Console类的WriteLine（）方法，把一行文本写到控制台
窗口上。WriteLine（）是一个静态方法，在调用之前不需要实例化Console对象。
对C#基本语法有了大致的认识后，下面就详细讨论C#的各个方面。因为没有变量不
可能编写出重要的程序，所以首先介绍C#中的变量。
2.3 变量
在C#中声明变量使用下述语法：
    datatype identifier;
例如：
    int i;
该语句声明int变量i。实际上编译器不允许在表达式中使用这个变量，除非用一个值
初始化了该变量。
声明i之后，就可以使用赋值运算符（=）给它赋值：
    i = 10;
还可以在一行代码中（同时）声明变量，并初始化它的值：
    int i = 10;
如果在一条语句中声明和初始化了多个变量，那么所有的变量都具有相同的数据类
型：
    int x = 10, y =20; // x and y are both ints
要声明不同类型的变量，需要使用单独的语句。在一条多变量的声明中，不能指定不
同的数据类型：
    int x = 10;
    bool y = true;              // Creates a variable that stores true or false
    int x = 10, bool y = true;  // This won't compile!
注意上面例子中的“//”和其后的文本，它们是注释。“//”字符串告诉编译器，忽略该行
后面的文本，这些文本仅为了让人更好地理解程序，它们并不是程序的一部分。本章后面
会详细讨论代码中的注释。
2.3.1 初始化变量
变量的初始化是C#强调安全性的另一个例子。简单地说，C#编译器需要用某个初始
值对变量进行初始化，之后才能在操作中引用该变量。大多数现代编译器把没有初始化标
记为警告，但C#编译器把它当成错误来看待。这就可以防止我们无意中从其他程序遗留
下来的内存中检索垃圾值。
C#有两个方法可确保变量在使用前进行了初始化：
● 变量是类或结构中的字段，如果没有显式初始化，则创建这些变量时，其默认值就
是0（类和结构在后面讨论）。
● 
方法的局部变量必须在代码中显式初始化，之后才能在语句中使用它们的值。此
时，初始化不是在声明该变量时进行的，但编译器会通过方法检查所有可能的路
径，如果检测到局部变量在初始化之前就使用了其值，就会标记为错误。
例如，在C#中不能使用下面的语句：
    static int Main()
    {
      int d;
      WriteLine(d); // Can't do this! Need to initialize d before use
      return 0;
    }
注意在这段代码中，演示了如何定义Main（），使之返回一个int类型的数据，而不
是void类型。
在编译这些代码时，会得到下面的错误消息：
    Use of unassigned local variable 'd'
考虑下面的语句：
    Something objSomething;
在C#中，这行代码仅会为Something对象创建一个引用，但这个引用还没有指向任何
对象。对该变量调用方法或属性会导致错误。
在C#中实例化一个引用对象，需要使用new关键字。如上所述，创建一个引用，使用
new关键字把该引用指向存储在堆上的一个对象：
    objSomething = new Something();  // This creates a Something on the heap
2.3.2 类型推断
类型推断使用var关键字。声明变量的语法有些变化：使用var关键字替代实际的类
型。编译器可以根据变量的初始化值“推断”变量的类型。例如：
    var someNumber = 0;
就变成：
    int someNumber = 0;
即使someNumber从来没有声明为int，编译器也可以确定，只要someNumber在其作用
域内，就是int类型。编译后，上面两个语句是等价的。
下面是另一个小例子（代码文件VariablesSample/Program.cs）：
    using static System.Console;
    namespace Wrox
    {
      class Program
      {
        static void Main()
        {
        var name = "Bugs Bunny";
        var age = 25;
        var isRabbit = true;
        Type nameType = name.GetType();