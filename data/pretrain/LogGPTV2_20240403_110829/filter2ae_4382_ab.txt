        $originalLanguage_diffStorage = null;
        $diffStorageFlag = false;
        // Setting 'currentRecord' and 'checkValueRecord':
        if (strpos($id, 'NEW') !== false) {
            // Must have the 'current' array - not the values after processing below...
            $checkValueRecord = $fieldArray;
            if (is_array($incomingFieldArray) && is_array($checkValueRecord)) {
                ArrayUtility::mergeRecursiveWithOverrule($checkValueRecord, $incomingFieldArray);
            }
            $currentRecord = $checkValueRecord;
        } else {
            // We must use the current values as basis for this!
            $currentRecord = ($checkValueRecord = $this->recordInfo($table, $id, '*'));
            // This is done to make the pid positive for offline versions; Necessary to have diff-view for page translations in workspaces.
            BackendUtility::fixVersioningPid($table, $currentRecord);
        }
        // Get original language record if available:
        if (is_array($currentRecord)
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigDiffSourceField']
            && $GLOBALS['TCA'][$table]['ctrl']['languageField']
            && $currentRecord[$GLOBALS['TCA'][$table]['ctrl']['languageField']] > 0
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']
            && (int)$currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']] > 0
           ) {
            $originalLanguageRecord = $this->recordInfo($table, $currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']], '*');
            BackendUtility::workspaceOL($table, $originalLanguageRecord);
            $originalLanguage_diffStorage = unserialize($currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigDiffSourceField']]);
        }
        //......
If we want to go into the deserialized position, we need to satisfy the
previous `if` condition.
    if (is_array($currentRecord)
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigDiffSourceField']
            && $GLOBALS['TCA'][$table]['ctrl']['languageField']
            && $currentRecord[$GLOBALS['TCA'][$table]['ctrl']['languageField']] > 0
            && $GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']
            && (int)$currentRecord[$GLOBALS['TCA'][$table]['ctrl']['transOrigPointerField']] > 0
        ) 
That means the following conditions are required
  * `$currentRecord` is an array.
  * There are `transOrigDiffSourceField`, `languageField`, `transOrigPointerField` fields in the table attribute of `$table` in `TCA`.
  * `$table` 's attributes `languageField` and `transOrigPointerField` have corresponding values greater than `0` in `$currentRecord`.
Let's check the `TCA` table and there are six tables that meet the second
condition.
    sys_file_reference
    sys_file_metadata
    sys_file_collection
    sys_collection
    sys_category
    pages
But the value of the `adminOnly` attribute of all `sys_*` fields is `1`, which
can only be changed by the administrator. So the only table we can use is
`pages`.
Its attribute value is
    [languageField] => sys_language_uid
    [transOrigPointerField] => l10n_parent
    [transOrigDiffSourceField] => l10n_diffsource
In the previous code, there is an `if-else` statement that processes the
passed arguments.
From the comments, we can know about the function of each parameter passed in:
  * The array `$fieldArray` is the default value, which generally is not we can control .
  * The array `$incomingFieldArray` is the field you want to set, it will be merged into `$fieldArray` if allowed.
And if the `if (strpos($id, 'NEW') !== false)` condition is satisfied, which
means`$id` is a string and there is a `NEW` string, it will enter the
following operation to get merged.
    $checkValueRecord = $fieldArray;
    ......
    if (is_array($incomingFieldArray) && is_array($checkValueRecord)) {
        ArrayUtility::mergeRecursiveWithOverrule($checkValueRecord, $incomingFieldArray);
    }
    $currentRecord = $checkValueRecord;
![
](https://images.seebug.org/content/images/2019/08/c0dcee42-f3c4-4670-8f5d-bbb37bca2939.png-w331s)
If the above `if` condition is not met, the value of `$currentRecord` will be
retrieved directly from the database via the `recordInfo` method and we can't
use it later.
To sum up, what we need are
  * `$table` is `pages`
  * `$id` is a string and there is a `NEW` string
  * `payload` should exist in `$incomingFieldArray`
Next we see where the function is called.
Through the global search, we only found one place, which was called in the
`process_datamap` method at
`typo3/sysext/core/Classes/DataHandling/DataHandler.php:954`.
![
](https://images.seebug.org/content/images/2019/08/4c2c9bc7-8dbb-4d93-9dcd-9ee8bf1279f7.png-w331s)
In the whole project, there are too many places to call `process_datamap`. Try
to use `xdebug` dynamic debugging to find the call chain. From the analysis
article of the RIPS team combined with the above analysis of the table name,
we can know that the vulnerability point is in the function of creating
`page`.
The next step is to find the `mainAction` method from
`EditDocumentController.php` to the call chain of the `fillInFieldArray`
method we analyzed earlier.
Try to create a new `page` in the website, then set a breakpoint at the
location of the call `fillInFieldArray`. After sending the request, we get the
call chain.
![
](https://images.seebug.org/content/images/2019/08/06d0bc1a-8c8c-40f8-a87c-45cae547b901.png-w331s)
Take a look at the code for the `mainAction` method.
    public function mainAction(ServerRequestInterface $request): ResponseInterface
    {
        // Unlock all locked records
        BackendUtility::lockRecords();
        if ($response = $this->preInit($request)) {
            return $response;
        }
        // Process incoming data via DataHandler?
        $parsedBody = $request->getParsedBody();
        if ($this->doSave
            || isset($parsedBody['_savedok'])
            || isset($parsedBody['_saveandclosedok'])
            || isset($parsedBody['_savedokview'])
            || isset($parsedBody['_savedoknew'])
            || isset($parsedBody['_duplicatedoc'])
        ) {
            if ($response = $this->processData($request)) {
                return $response;
            }
        }
        //......
    }
Enter the target `$response = $this->processData($request)` when the `if`
condition is met.
    if ($this->doSave
            || isset($parsedBody['_savedok'])
            || isset($parsedBody['_saveandclosedok'])
            || isset($parsedBody['_savedokview'])
            || isset($parsedBody['_savedoknew'])
            || isset($parsedBody['_duplicatedoc'])
        ) 
When creating a new `page`, the normal form carries `doSave == 1`, and the
value of `doSave` is obtained in the method `preInit`.
![
](https://images.seebug.org/content/images/2019/08/dcf2f651-682e-4bbb-a28c-622014571447.png-w331s)
This condition is true by default, and then ``request` is passed to the
`processData` method.
    public function processData(ServerRequestInterface $request = null): ?ResponseInterface
    {
    // @deprecated Variable can be removed in TYPO3 v10.0
        $deprecatedCaller = false;
        //......
        $parsedBody = $request->getParsedBody(); // Get Post request parameters
        $queryParams = $request->getQueryParams(); // Get the Get request parameter
        $beUser = $this->getBackendUser(); // Get user data
        // Processing related GET / POST vars
        $this->data = $parsedBody['data'] ?? $queryParams['data'] ?? [];
        $this->cmd = $parsedBody['cmd'] ?? $queryParams['cmd'] ?? [];
        $this->mirror = $parsedBody['mirror'] ?? $queryParams['mirror'] ?? [];
        // @deprecated property cacheCmd is unused and can be removed in TYPO3 v10.0
        $this->cacheCmd = $parsedBody['cacheCmd'] ?? $queryParams['cacheCmd'] ?? null;
        // @deprecated property redirect is unused and can be removed in TYPO3 v10.0
        $this->redirect = $parsedBody['redirect'] ?? $queryParams['redirect'] ?? null;
        $this->returnNewPageId = (bool)($parsedBody['returnNewPageId'] ?? $queryParams['returnNewPageId'] ?? false);
        // Only options related to $this->data submission are included here
        $tce = GeneralUtility::makeInstance(DataHandler::class);
        $tce->setControl($parsedBody['control'] ?? $queryParams['control'] ?? []);
        // Set internal vars
        if (isset($beUser->uc['neverHideAtCopy']) && $beUser->uc['neverHideAtCopy']) {
            $tce->neverHideAtCopy = 1;
        }
        // Load DataHandler with data
        $tce->start($this->data, $this->cmd);
        if (is_array($this->mirror)) {
            $tce->setMirror($this->mirror);
        }
        // Perform the saving operation with DataHandler:
        if ($this->doSave === true) {
            $tce->process_uploads($_FILES);
            $tce->process_datamap();
            $tce->process_cmdmap();
        }
        //......
    }
The code is easy to understand. The data parsed from `$request` is first
stored in `$this->data` and `$this->cmd`, and then it instantiates the `$tce`,
and call `$ The tce->start`method to store the incoming data in its own
members `datamap` and `cmdmap`.
    typo3/sysext/core/Classes/DataHandling/DataHandler.php:735
    public function start($data, $cmd, $altUserObject = null)
    {
       //......
        // Setting the data and cmd arrays
        if (is_array($data)) {
            reset($data);
            $this->datamap = $data;
        }
        if (is_array($cmd)) {
            reset($cmd);
            $this->cmdmap = $cmd;
        }
    }
And the `if ($this->doSave === true)` condition is also true. Enter the
`process_datamap` method.
![
](https://images.seebug.org/content/images/2019/08/09a2cdec-1658-4cee-b17a-b8b9896aaff0.png-w331s)
The code is commented for reading. In line `985` , all the key names in
`datamap` are obtained and stored in `$orderOfTables`, and then into the
`foreach` loop, and this `$table` is behind Pass in the `fillInFieldArray`
method, so we only need to analyze the loop when `$table == pages`.
    $fieldArray = $this->fillInFieldArray($table, $id, $fieldArray, $incomingFieldArray, $theRealPid, $status, $tscPID);
Looking at the code in general, combined with the previous analysis, we need
to meet the following conditions:
  * The value of `$recordAccess` should be `true`
  * `payload` in `$incomingFieldArray` will not be deleted
  * The value of`$table` is `pages`
  * `NEW` string exists in `$id`
Since the normal request can be directly called at the call to
`fillInFieldArray`, the first, third, and fourth are valid in the normal
request.
According to the previous analysis of the `fillInFieldArray` method, construct
`payload` and add three key-value pairs to the submitted form.
    data[pages][NEW5d3fa40cb5ac4065255421][l10n_diffsource] ==> serialized_shell_data
    data[pages][NEW5d3fa40cb5ac4065255421][sys_language_uid] ==> 4
    data[pages][NEW5d3fa40cb5ac4065255421][l10n_parent] ==> 4
The `NEW*` string should be modified according to the value generated by the
form.
![
](https://images.seebug.org/content/images/2019/08/733698ae-8006-4b1b-9513-f127320b5faa.png-w331s)
After sending the request, you can still enter `fillInFieldArray`, and in the
`$incomingFieldArray` parameter, you can see the three key-value pairs we
added.
![
](https://images.seebug.org/content/images/2019/08/52ea6051-f615-4f54-a579-c7daf0d889d8.png-w331s)
After entering `fillInFieldArray`, `l10n_diffsource` will be deserialized. At
this point we change its `l10n_diffsource` to a constructed serialized string
in the request, and resend the request to succeed `getshell`.
## 5\. Conclusion
In fact, the exploitation conditions of this vulnerability is simple. You need
to get a valid backend account of `typo3`, and have the right to edit `page`.
Moreover, analyzing `Typo3` gives me a completely different feeling from other
websites. In the process of analyzing the creating and modifying parameters of
the `page` function, I did not find any filtering operations. All parameters
in the backend are based on `TCA`. Only when the input does not meet the
definition of `TCA` will the program throw an exception. The verification of
`TCA` is not strict so it causes by the variable coverage.
The official patching method is not very good. It directly prohibits the
deserialization operation, but I personally think the problem is in the
previous variable coverage. Especially when using the `Backend`, we can
directly cover the data from the database, and there may still be new problems
in the future.
The above is just my view of this vulnerability. Please let me know if there
is any mistake in this paper.
## 6\. Reference
  * 
  * 
  * 
  * [https://typo3.org/security/advisory/typo3-core-sa-2019-020/](https://docs.typo3.org/m/typo3/reference-tca/master/en-us/Introduction/Index.html "https://typo3.org/security/advisory/typo3-core-sa-2019-020/")
### About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *