CUPSD
yafc
Transmission
Postﬁx
memcached
wget
thttpd
skod
Binary
Size (kB)
Log Level
inside EHL
Avg. Time (sec)
LMS
LMSPs
64,250
22,299
8,296
4,095
3,503
2,959
2,044
1,473
1,392
1,212
1,210
1,007
930
900
673
559
105
47
IN+DE
IN+DE
INFO
IN+DE
INFO
IN+DE
IN+DE
IN+DE
IN+DE
INFO
DEBUG
IN+DE
IN+DE
INFO
IN+DE
INFO
N/A
N/A
831
3,880
495
144
2,602
734
775
99
201
1,906
1,426
88
102
97
193
200
157
12
46
258
7
4
4
4
11
2
4
2
3
2
2
3
7
3
8
0
Number of
Completeness
LMS
64
3,530
375
53
490
845
923
211
717
349
531
57
178
96
64
84
4
25
LMSPs Callsites Cov. %
157,829
4,713,072
34,690
13,113
10,314
11,422
8,463
3,910
9,899
5,304
4,927
3,183
5,560
2,636
19,510
3,923
14,847
115
70
5,529
394
56
518
869
925
211
718
358
531
60
227
98
69
275
5
25
91
64
95
95
95
97
100
100
100
97
100
95
78
98
93
31
80
100
To better understand the conditions of OmegaLog’s per-
formance, we analyzed the source code of PostgreSQL,
Transmission, and wget (64%, 78%, and 31% coverage,
respectively). Our analysis revealed that in all three cases,
symbolic execution was failing for logging procedures that
use GNU’s gettext for internalization (called using the “_”
operator), as shown below:
/∗ Below code from Transmission: /libtransmission/rpc−server.c ∗/
tr logAddNamedError(MY NAME,
/∗ Below code from wget: /src/convert.c ∗/
logprintf
/∗ Below code from PostGreSQL: /src/backend/commands/tablecmds.c ∗/
default :
(”Couldn’t ﬁnd settings key \”%s\””), str);
/∗ shouldn’t get here, add all necessary cases above ∗/
msg = (”\”%s\” is of the wrong type”);
break; }
(LOG VERBOSE,
(”Converting links in %s... ”), ﬁle);
Since gettext is loaded dynamically as a shared library,
Angr is not able to handle it appropriately during symbolic
execution and cannot extract its return value, thus causing the
failure of LMS extraction during the peephole concretization
step. To conﬁrm our ﬁndings, we reran the static analysis for
wget and Transmission with the calls to gettext removed
and were able to achieve coverage of 98.18% and 96.03%,
respectively. One approach to addressing that issue using Angr
would be to add hooks for all of gettext’s methods and
return the arguments without changes. That would in turn
provide Angr’s symbolic execution engine with the arguments
for concretization. We plan to address the issue in future work.
C. Runtime & Space Overhead
We measured the runtime overhead of OmegaLog com-
pared to a baseline of application event log collection at the
INFO and DEBUG verbosity with Linux Audit running. We turn
on INFO and DEBUG level based on the application’s logging
behaviour required for execution partitioning. As shown in
Fig. 7, OmegaLog’s average runtime overhead was 4% for
all the applications that had logging inside the event-handling
loop. Some applications, such as Memcached and Proftpd,
12
Fig. 7: Runtime overhead for each applications in our dataset that
has logging statement in the event-handling loop.
exhibit high overhead because they are write-intensive ap-
plications; since OmegaLog intercepts every write syscall to
disambiguate PID/TID, we expect to see higher runtime costs
here. However, we argue that the beneﬁts of OmegaLog for
forensic analysis already justify the cost, and will consider
alternative methods for process disambiguation in future work.
OmegaLog incurs space overhead because it records the
PID/TID and timestamp for each application event message
so that it can match the event to the appropriate system-layer
task. At most, that addition requires 12 bytes per LMS entry.
Our experiments conﬁrm that the cost is negligible during
typical use. For example, each unenhanced event message in
NGINX is approximately 8.6 kB. If an NGINX server received
1 million requests per day and each request generated one
event, the original event log would be 860 MB and OmegaLog
would add just 12 MB to that total, around 1% space overhead.
D. Correctness of Universal Provenance Graph
OmegaLog modiﬁes the whole-system provenance graph
by adding app log vertices to generate semantic-aware and
execution-partitioned universal provenance graphs. We de-
scribe three causal graph properties in §V that the univer-
sal provenance graph needs to preserve for correct forensic
 0% 1% 2% 3% 4% 5% 6% 7% 8%HttpdNGINXSquidRedisTransmissionOpenSSHMemcachedProftpdPostgreSQLHAProxyNtpdLighttpdCUPSDPostfxwgetyafcRuntime Overheadscenario, they would not enable user-level attribution of the
attack.
2) Phishing Email: An employee uses the Mutt email client
to send and receive personal emails on a BYOD workstation.
One day, the employee receives a phishing email that offers
a torrent for downloading a blockbuster movie. Employee
opens the email, downloads the attached .torrent ﬁle. After
that employee, used Transmission application to download
the purported movie torrent ﬁle. Finally, employee opens the
downloaded movie ﬁle but the ﬁle is actually malware that
establishes a backdoor on the machine.
An administrator later notices that a suspicious program is
running on the workstation and initiates forensic analysis to
identify its origin. Fig. 9(a) shows the causal graph that the
investigation would yield based on simple auditd. As can
be seen in the graph, the employee has actually opened three
.torrent ﬁles with transmission-daemon. It is impossible
to determine which .torrent input ﬁle led to the malware
download. Even if out-of-band knowledge is used to identify
the malicious torrent, the administrator will still be unable to
trace back to the phishing email.
Fig. 9(b) shows the UPG produced by OmegaLog. Because
OmegaLog successfully partitioned the Postﬁx and Trans-
mission processes,
the graph does not exhibit dependency
explosion, making it easy to trace from the suspicious process
back to the phishing email. Further, the OmegaLog graph
provides additional documentation of application semantics,
such as the email address of the sender, which may help the
administrator correlate this attack with other intrusions. Such
evidence cannot be provided by existing provenance trackers.
X. DISCUSSION & LIMITATIONS
Control ﬂow integrity (CFI) assumption is a limitation
of OmegaLog; in fact, this is a big problem for almost the
entirety of recent work in provenance-based forensic analysis
space [16], [17], [26], [30], [31], [32], [37], [40], [39], [41],
[38], [42], [28], [45]. OmegaLog assumes CFI of program
execution because violation of CFI makes it impossible to
give assertions about the trace logs of program execution.
For example, execution units emitted from BEEP system [39]
can not be trusted because an attacker can hijack control
ﬂow of the running application to emit misleading bound-
aries, confusing the investigator. Moreover, violations of CFI
assumption enables post-mortem tampering of audit logs or
even runtime control ﬂow bending that causes misleading
application event records to be emitted. Even though the main
focus of our study is improving forensic analysis and solving
CFI problem is ultimately an orthogonal problem to our study
but we envision that future work on provenance will cater CFI
violation problem for accurate forensic analysis.
Provided that an underlying binary analysis tool has gener-
ated a reasonably accurate CFG, there are two considerations
when one is evaluating the generality of OmegaLog. The
ﬁrst is whether or not the application being proﬁled includes
logging events at key positions in the CFG such as the event
handling loop. Our survey in §IV demonstrates that this is the
case for mature open source client-server applications. The
second consideration is whether the event logging statements
are correctly identiﬁed and extracted by OmegaLog. Our
Fig. 8: Information theft attack scenario. (a) Provenance graph gener-
ated using a traditional solution, which led to a dependency explosion
problem with no semantic information. (b) Concise provenance graph
generated using OmegaLog with semantic information.
analysis. To ensure the Validity property, we augment LMS
with PID/TID information along with timestamps during the
runtime phase so that we can causally associate application log
vertices with process vertices in the whole-system provenance
graph. To ensure the Soundness property, OmegaLog augments
LMS with timestamps from the same system clock as the
whole-system provenance graph and uses this timestamp as
an annotation from process vertices to application log vertices.
That edge annotation allows OmegaLog to respect the happens-
before relationships while doing backward and forward tracing
on the graph. Finally, since universal provenance graphs do
not remove any causally connected vertices (besides false
provenance introduced by dependency explosion in a manner
consistent with previous work [39], [42]) we achieve the
property of Completeness.
E. Attack Investigation
We now evaluate OmegaLog’s ability to aid in a typical
attack investigation. To do so, we consider two additional sce-
narios as case studies. For each attack scenario, we manually
veriﬁed its UPG to check that it preserved the three causality
analysis properties that we discussed in §V. We note that the
result that we presented in the motivating scenario (§II) was
also procedurally generated using OmegaLog.
1) Information Theft Attack: An administrator made a
mistake when conﬁguring an FTP server, allowing users to read
and transfer sensitive ﬁles from the server’s directories. The
issue was identiﬁed after several days, but the administrator
now needs to identify which ﬁles were leaked, if any, to ensure
that company secrets are safe. Using the sensitive ﬁles as a
symptom, the administrator runs a backtrace query.
Fig. 8(a) shows the attack investigation results using a
traditional causal analysis solution, which conﬁrms that the
sensitive ﬁle was accessed. However, because of dependency
explosion, it is impossible to determine who accessed the
ﬁle and where it was transferred to. In contrast, Fig. 8(b)
shows the universal provenance graph produced by OmegaLog.
OmegaLog was able to partition the server into individual units
of work based on event log analysis, removing the dependency
explosion and identifying an IP address to which the sensitive
ﬁle was downloaded. However,
information may not
prove precise enough to attribute the attack to a particular
employee or remote agent; fortunately, because OmegaLog
was able to associate the causal graph with event messages