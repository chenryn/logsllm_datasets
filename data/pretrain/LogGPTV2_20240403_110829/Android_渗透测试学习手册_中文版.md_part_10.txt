7.3 广告库中的漏洞
Google Play上提供的大部分免费 Android 应用都会使用广告来赚取收益。 然而，通常广告库
本身存在漏洞，使得整个应用程序容易受到某种严重的威胁。
为了识别特定应用程序中存在的广告库，我们可以使用 简单地反编译该应用
dex2jar/apktool
程序，并分析创建的文件夹。 你还可以在 中找
http://www.appbrain.com/stats/libraries/ad
到一些最受欢迎的 Android 广告库和使用它们的应用程序。 广告库可能具有许多漏洞，例如
上一节中讨论的 漏洞，不安全的文件权限或任何其他漏洞，这可能会导致攻击者破
WebView
坏整个应用程序，获得反向 shell 或甚至创建后门。
7.4 Android 中的跨应用脚本
跨应用程序脚本漏洞是一种 Android 应用程序漏洞，攻击者可以绕过同源策略并在应用程序
位置中访问存储在 Android 文件系统上的敏感文件。 这意味着攻击者能够访问位
于 /data/data/[应用程序包名称] 位置中的所有内容。 漏洞的根本原因是，应用程序允许内容使
用受信任区域的访问权限，在不受信任区域中执行。
如果漏洞应用程序是 Web 浏览器，攻击会变得更加严重，其中攻击者能够静默窃取浏览器存
储的所有 Cookie 和其他信息，并将其发送给攻击者。
甚至一些著名的应用程序，如 Skype，Dropbox，海豚浏览器等，早期版本中都存在跨应用程
序脚本漏洞。
让我们来看看海豚浏览器 HD 中的漏洞，例如，由 Roee Hay 和 Yair Amit 发现的漏洞。 此示
例中使用的存在漏洞的海豚浏览器 HD 应用程序版本为 6.0.0，以后的版本中修补了漏洞。
海豚浏览器 HD 有一个名为 BrowserActivity 的漏洞活动，它可以被其他应用程序以及其他参
数调用。 攻击者可以使用它来调用海豚浏览器 HD 并打开特定的网页，以及恶意的
JavaScript。 以下屏幕截图显示了 POC 代码以及通报
（ ）：
http://packetstormsecurity.com/files/view/105258/dolphin-xas.txt
79
第七章 不太知名的 Android 漏洞
这里，使用屏幕截图中的上述代码，我们将打开 http://adityagupta.net 网站以及 JavaScript
函数 ，它将在提示框中简单地弹出域名。 一旦我们在我们的手机上
alert(document.domain)
打开这个恶意应用程序，它将调用海豚浏览器 HD，打开 URL 和我们指定的 JavaScript 代
码，如下面的截图所示：
80
第七章 不太知名的 Android 漏洞
总结
在本章中，我们了解了 Android 中的不同攻击向量，从渗透测试者的角度来看，这非常有
用。 本章应该用做对不同攻击向量的快速演练; 然而，建议你尝试这些攻击向量，尝试修改它
们，并在现实生活中的渗透测试中使用它们。
在下一章中，我们将离开应用程序层，专注于 Android 平台的基于 ARM 的利用。
81
第八章 ARM 利用
第八章 ARM 利用
作者：Aditya Gupta
译者：飞龙
协议：CC BY-NC-SA 4.0
在本章中，我们将了解 ARM 处理器的基础知识，和 ARM 世界中存在的不同类型的漏洞。 我
们甚至会继续利用这些漏洞，以便对整个场景有个清晰地了解。 此外，我们将研究不同的
Android root 攻击和它们在漏洞利用中的基本漏洞。 考虑到目前大多数 Android 智能手机都
使用基于 ARM 的处理器，对于渗透测试人员来说，了解 ARM 及其附带的安全风险至关重
要。
8.1 ARM 架构导论
ARM 是基于精简指令集（RISC）的架构，这意味着其指令比基于复杂指令集（CISC）的机
器少得多。 ARM 处理器几乎遍布我们周围的所有设备，如智能手机，电视，电子书阅读器和
更多的嵌入式设备。
ARM 总共有 16 个可见的通用寄存器，为 R0-R15。 在这 16 个中，有 5 个用于特殊目的。
以下是这五个寄存器及其名称：
R11: 帧指针 (FP)
R12: 过程内寄存器 (IP)
R13: 栈指针 (SP)
R14: 链接寄存器 (LR)
R15: 程序计数器 (PC)
下面的图展示了 ARM 架构：
82
第八章 ARM 利用
在五个里面，我们会特别专注于这三个，它们是：
堆栈指针（SP）：这是保存指向堆栈顶部的指针的寄存器
链接寄存器（LR）：当程序进入子过程时存储返回地址
程序计数器（PC）：存储要执行的下一条指令
注意
这里要注意的一点是，PC 将总是指向要执行的指令，而不是简单地指向下一条指令。
这是由于被称为流水线的概念，指令按照以下顺序操作：提取，解码和执行。 为了控制
程序流，我们需要控制 PC 或 LR 中的值（后者最终引导我们控制 PC）。
83
第八章 ARM 利用
执行模式
ARM 有两种不同的执行模式：
ARM 模式：在 ARM 模式下，所有指令的大小为 32 位
Thumb 模式：在 Thumb 模式下，指令大部分为 16 位
执行模式由 CPSR 寄存器中的状态决定。 还存在第三模式，即 Thumb-2 模式，它仅仅是
ARM 模式和 Thumb 模式的混合。 我们在本章不会深入了解 ARM 和 Thumb 模式之间的区
别，因为它超出了本书的范围。
8.2 建立环境
在开始利用 ARM 平台的漏洞之前，建议你建立环境。 即使 Android SDK 中的模拟器可以通
过模拟 ARM 平台来运行，大多数智能手机也是基于 ARM 的，我们将通过配置 QEMU（它是
一个开源硬件虚拟机和模拟器）开始 ARM 漏洞利用。
为了在 Android 模拟器/设备上执行以下所有步骤，我们需要下载 Android NDK 并使用
Android NDK 中提供的工具为 Android 平台编译我们的二进制文件。 但是，如果你使用 Mac
环境，安装 QEMU 相对容易，可以通过键入 brew install qemu 来完成。 现在让我们在
Ubuntu 系统上配置 QEMU。 遵循以下步骤：
1. 第一步是通过安装依赖来下载并安装 QEMU，如图所示：
sudo apt-get build-dep qemu
wget http://wiki.qemu-project.org/download/qemu-
1.7.0.tar.bz2
2. 接下来，我们只需要配置QEMU，指定目标为 ARM，最后充分利用它。 因此，我们将简
单地解压缩归档文件，访问该目录并执行以下命令：
./configure --target-list=arm-softmmu
make && make install
3. 一旦QEMU成功安装，我们可以下载 ARM 平台的 Debian 镜像来进行利用练习。 所需下
载列表位于 。
http://people.debian.org/~aurel32/qemu/armel/
4. 这里我们将下载格式为 qcow2 的磁盘映像，它是基于 QEMU 的操作系统映像格式，也就
是我们的操作系统为 。 内核文件应该
debian_squeeze_armel_standard.qcow2
是 ，RAM 磁盘文件应该是 。
vmlinuz-2.6.32-5-versatile initrd.img-2.6.32-versatile
一旦我们下载了所有必要的文件，我们可以通过执行以下命令来启动 QEMU 实例：
84
第八章 ARM 利用
qemu-system-arm -M versatilepb -kernel vmlinuz-2.6.32-5-
versatile -initrd initrd.img-2.6.32-5-versatile -hda
debian_squeeze_armel_standard.qcow2 -append
"root=/dev/sda1" --redir tcp:2222::22
5. redir 命令只是在登录远程系统时使用端口 2222 启用 ssh。 一旦配置完成，我们可以
使用以下命令登录到 Debian 的 QEMU 实例：
ssh root@[ip address of Qemu] -p 2222
6. 登录时会要求输入用户名和密码，默认凭据是 root:root 。一旦我们成功登录，我们将
看到类似如下所示的屏幕截图：
8.3 基于栈的简单缓冲区溢出
简单来说，缓冲区是存储任何类型的数据的地方。 当缓冲区中的数据超过缓冲区本身的大小
时，会发生溢出。 然后攻击者可以执行溢出攻击，来获得对程序的控制和执行恶意载荷。
让我们使用一个简单程序的例子，看看我们如何利用它。 在下面的截图中，我们有一个简单
的程序，有三个函数： ， 和 。 以下是我们试图利用的程序：
weak ShouldNotBeCalled main
85
第八章 ARM 利用
在整个程序运行期间，从不调用 函数。
ShouldNotBeCalled
漏洞函数简单地将参数复制到名为 buff 的缓冲区，大小为 10 字节。
一旦我们完成程序编写，我们可以使用 编译它，如下一个命令所示。 此外，我们将在这
gcc
里禁用地址空间布局随机化（ASLR），只是为了使场景稍微简单一些。 ASLR 是由 OS 实现
的安全技术，来防止攻击者有效地确定载荷的地址并执行恶意指令。 在 Android 中，ASLR
的实现始于 4.0。 你可以访
问 了解所有
http://www.duosecurity.com/blog/exploit-mitigations-in-android-jelly-bean-4-1
Android 安全实施。
echo 0 > /proc/sys/kernel/randomize_va_space
gcc -g buffer_overflow.c -o buffer_overflow
接下来，我们可以简单将二进制文件加载到 GNU 调试器，简称 GDB，然后开始调试它，如
下面的命令所示：
gdb -q buffer_overflow
现在我们可以使用 命令来反汇编特定的函数，这里是 ，如下面的
disass ShouldNotBeCalled
截图所示：
86
第八章 ARM 利用
正如我们在上面的截图中可以看到的， 函数从内存地址 开始。
ShouldNotBeCalled 0x00008408
如果我们查看 函数的反汇编，我们看到漏洞函数在 被调用并
main 0x000084a4
在 返回。 因此，由于程序进入漏洞函数并使用易受攻击的 ，函数不检查
0x000084a8 strcpy
要复制的字符串的大小，并且如果我们能够在程序进入漏洞函数时控制子过程的 LR ，我们就
能够控制整个程序流程。
这里的目标是估计何时 LR 被覆盖，然后放入 ShouldNotBeCalled 的地址，以便调
用 函数。 让我们开始使用一个长参数运行程序，如下面的命令所示，看看
ShouldNotBeCalled
会发生什么。 在此之前，我们还需要在漏洞函数和 调用的地址设置断点。
strcpy
b vulnerable
b *
一旦我们设置了断点，我们可以使用参数 来运行我们的程序，看看它是如何被
AAAABBBBCCCC
覆盖的。 我们注意到它在漏洞函数的调用处命中了第一个断点，之后在 调用处命中了
strcpy
下一个断点。 一旦它到达断点，我们可以使用 x 命令分析堆栈，并指定来自 SP 的地址，如
下面的截图所示：
我们可以看到，堆栈已经被我们输入的缓冲区覆盖（ASCII：41 代表 A，42 代表 B，等
等）。 从上面的截图中，我们看到，我们仍然需要四个更多的字节来覆盖返回地址，在这种
情况下是 。
0x000084a8
所以，最后的字符串是 16 字节的垃圾，然后是 ShouldNotBeCalled 的地址，如下面的命令所
示：
r `printf "AAAABBBBCCCCDDDD\x38\x84"`
87
第八章 ARM 利用
我们可以在下面的截图中看到，我们已经将 的起始地址添加到了参数
IShouldNeverBeCalled
中：
请注意，由于这里是小端结构，字节以相反的顺序写入。 一旦我们运行它，我们可以看到程
序 函数被调用，如下面的截图所示：
ShouldNotBeCalled
8.4 返回导向编程
在大多数情况下，我们不需要调用程序本身中存在的另一个函数。 相反，我们需要在我们的
攻击向量中放置 shellcode，这将执行我们在 shellcode 中指定的任何恶意操作。 但是，在大
多数基于 ARM 平台的设备中，内存中的区域是不可执行的，这会阻止我们放置并执行
shellcode。
因此，攻击者必须依赖于所谓的返回导向编程（ROP），它是来自内存不同部分的指令片段
的简单链接，最终它会执行我们的 shellcode。 这些片段也称为 ROP gadget。 为了链接
ROP gadget，我们需要找到存在跳转指令的 gadget，这将允许我们跳到另一个位置。
例如，如果我们在执行程序时反汇编 ，我们将注意到以下输出：
seed48()
88