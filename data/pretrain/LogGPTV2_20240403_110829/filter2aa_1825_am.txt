201696
QuotaPoolUsage[NonPagedPool]
13048
Working Set Sizes (now,min,max)
(4329, 50, 345) (17316KB, 200KB, 1380KB)
PeakWorkingSetSize
4581
VirtualSize
2101383 Mb
PeakVirtualSize
2101392 Mb
PageFaultCount
5442
MemoryPriority
BACKGROUND
BasePriority
8
CommitCharge
678
Job
ffffd104a05ed380
THREAD ffffd104a02de080
Cid 1374.022c
Teb: 0000000d3e344000 Win32Thread: \
ffffd104b82ccbb0 WAIT: (UserRequest) UserMode Non-Alertable
ffffd104b71d2860
SynchronizationEvent
Not impersonating
DeviceMap
ffffa58d41354230
Chapter 5: Debugging and Tracing
101
Owning Process
ffffd1049e7a60c0
Image:
dllhost.exe
Attached Process
N/A
Image:
N/A
Wait Start TickCount
3641927
Ticks: 270880 (0:01:10:32.500)
Context Switch Count
27
IdealProcessor: 2
UserTime
00:00:00.000
KernelTime
00:00:00.000
Win32 Start Address 0x00007ff661181310
Stack Init ffffbe88b4bdf630 Current ffffbe88b4bdf010
Base ffffbe88b4be0000 Limit ffffbe88b4bd9000 Call 0000000000000000
Priority 8 BasePriority 8 PriorityDecrement 0 IoPriority 2 PagePriority 5
Kernel stack not resident.
THREAD ffffd104a45e8080
Cid 1374.0f04
Teb: 0000000d3e352000 Win32Thread: \
ffffd104b82ccd90 WAIT: (WrUserRequest) UserMode Non-Alertable
ffffd104adc5e0c0
QueueObject
Not impersonating
DeviceMap
ffffa58d41354230
Owning Process
ffffd1049e7a60c0
Image:
dllhost.exe
Attached Process
N/A
Image:
N/A
Wait Start TickCount
3910734
Ticks: 2211 (0:00:00:34.546)
Context Switch Count
2684
IdealProcessor: 4
UserTime
00:00:00.046
KernelTime
00:00:00.078
Win32 Start Address 0x00007ffb3630f230
Stack Init ffffbe88b4c87630 Current ffffbe88b4c86a10
Base ffffbe88b4c88000 Limit ffffbe88b4c81000 Call 0000000000000000
Priority 10 BasePriority 8 PriorityDecrement 0 IoPriority 2 PagePriority 5
Child-SP
RetAddr
Call Site
ffffbe88`b4c86a50 fffff802`07c5dc17
nt!KiSwapContext+0x76
ffffbe88`b4c86b90 fffff802`07c5fac9
nt!KiSwapThread+0x3a7
ffffbe88`b4c86c70 fffff802`07c59d24
nt!KiCommitThreadWait+0x159
ffffbe88`b4c86d10 fffff802`07c8ac70
nt!KeWaitForSingleObject+0x234
ffffbe88`b4c86e00 fffff9da`6d577d46
nt!KeWaitForMultipleObjects+0x540
ffffbe88`b4c86f00 fffff99c`c175d920
0xfffff9da`6d577d46
ffffbe88`b4c86f08 fffff99c`c175d920
0xfffff99c`c175d920
ffffbe88`b4c86f10 00000000`00000001
0xfffff99c`c175d920
ffffbe88`b4c86f18 ffffd104`9a423df0
0x1
ffffbe88`b4c86f20 00000000`00000001
0xffffd104`9a423df0
ffffbe88`b4c86f28 ffffbe88`b4c87100
0x1
ffffbe88`b4c86f30 00000000`00000000
0xffffbe88`b4c87100
...
The command lists all threads within the process. Each thread is represented by its ETHREAD address
attached to the text “THREAD”. The call stack is listed as well - the module prefix “nt” represents the
Chapter 5: Debugging and Tracing
102
kernel - there is no need to use the real kernel module name.
One of the reasons to use “nt” instead of explicitly stating the kernel’s module name is because these are
different between 64 and 32 bit systems (ntoskrnl.exe on 64 bit, and mtkrnlpa.exe on 32 bit); and it’s a
lot shorter.
User-mode symbols are not loaded by default, so thread stacks that span to user mode show just numeric
addresses. You can load user symbols explicitly with .reload /user after setting the process context to
the process of interest with the .process command:
lkd> !process 0 0 explorer.exe
PROCESS ffffd1049e118080
SessionId: 1
Cid: 1780
Peb: 0076b000
ParentCid: 16d0
DirBase: 362ea5000
ObjectTable: ffffa58d45891680
HandleCount: 3217.
Image: explorer.exe
PROCESS ffffd104a14e2080
SessionId: 1
Cid: 2548
Peb: 005c1000
ParentCid: 0314
DirBase: 140fe9000
ObjectTable: ffffa58d46a99500
HandleCount: 2633.
Image: explorer.exe
lkd> .process /p ffffd1049e118080
Implicit process is now ffffd104`9e118080
lkd> .reload /user
Loading User Symbols
................................................................
lkd> !process ffffd1049e118080
PROCESS ffffd1049e118080
SessionId: 1
Cid: 1780
Peb: 0076b000
ParentCid: 16d0
DirBase: 362ea5000
ObjectTable: ffffa58d45891680
HandleCount: 3223.
Image: explorer.exe
...
THREAD ffffd1049e47c400
Cid 1780.1754
Teb: 000000000078c000 Win32Thread: \
ffffd1049e5da7a0 WAIT: (WrQueue) UserMode Alertable
ffffd1049e076480
QueueObject
IRP List:
ffffd1049fbea9b0: (0006,0478) Flags: 00060000
Mdl: 00000000
ffffd1049efd6aa0: (0006,0478) Flags: 00060000
Mdl: 00000000
ffffd1049efee010: (0006,0478) Flags: 00060000
Mdl: 00000000
ffffd1049f3ef8a0: (0006,0478) Flags: 00060000
Mdl: 00000000
Not impersonating
Chapter 5: Debugging and Tracing
103
DeviceMap
ffffa58d41354230
Owning Process
ffffd1049e118080
Image:
explorer.exe
Attached Process
N/A
Image:
N/A
Wait Start TickCount
3921033
Ticks: 7089 (0:00:01:50.765)
Context Switch Count
16410
IdealProcessor: 5
UserTime
00:00:00.265
KernelTime
00:00:00.234
Win32 Start Address ntdll!TppWorkerThread (0x00007ffb37d96830)
Stack Init ffffbe88b5fc7630 Current ffffbe88b5fc6d20
Base ffffbe88b5fc8000 Limit ffffbe88b5fc1000 Call 0000000000000000
Priority 9 BasePriority 8 PriorityDecrement 0 IoPriority 2 PagePriority 5
Child-SP
RetAddr
Call Site
ffffbe88`b5fc6d60 fffff802`07c5dc17
nt!KiSwapContext+0x76
ffffbe88`b5fc6ea0 fffff802`07c5fac9
nt!KiSwapThread+0x3a7
ffffbe88`b5fc6f80 fffff802`07c62526
nt!KiCommitThreadWait+0x159
ffffbe88`b5fc7020 fffff802`07c61f38
nt!KeRemoveQueueEx+0x2b6
ffffbe88`b5fc70d0 fffff802`07c6479c
nt!IoRemoveIoCompletion+0x98
ffffbe88`b5fc71f0 fffff802`07e25075
nt!NtWaitForWorkViaWorkerFactory+0x\
39c
ffffbe88`b5fc7430 00007ffb`37e26e84
nt!KiSystemServiceCopyEnd+0x25 (Tra\
pFrame @ ffffbe88`b5fc74a0)
00000000`03def858 00007ffb`37d96b0f
ntdll!NtWaitForWorkViaWorkerFactory\
+0x14
00000000`03def860 00007ffb`367a54e0
ntdll!TppWorkerThread+0x2df
00000000`03defb50 00007ffb`37d8485b
KERNEL32!BaseThreadInitThunk+0x10
00000000`03defb80 00000000`00000000
ntdll!RtlUserThreadStart+0x2b
...
Notice the thread above has issued several IRPs as well. We’ll discuss this in greater detail in chapter 7.
A thread’s information can be viewed separately with the !thread command and the address of the
thread. Check the debugger documentation for the description of the various pieces of information
displayed by this command.
Other generally useful/interesting commands in kernel-mode debugging include:
• !pcr - display the Process Control Region (PCR) for a processor specified as an additional index
(processor 0 is displayed by default if no index is specified).
• !vm - display memory statistics for the system and processes.
• !running - displays information on threads running on all processors on the system.
We’ll look at more specific commands useful for debugging drivers in subsequent chapters.
Chapter 5: Debugging and Tracing
104
Full Kernel Debugging
Full kernel debugging requires configuration on the host and target. In this section, we’ll see how to
configure a virtual machine as a target for kernel debugging. This is the recommended and most convenient
setup for kernel driver work (when not developing device drivers for hardware). We’ll go through the
steps for configuring a Hyper-V virtual machine. If you’re using a different virtualization technology (e.g.
VMWare or VirtualBox), please consult that product’s documentation or the web for the correct procedure
to get the same results.
The target and host machine×“ must communicate using some communication media. There are several
options available. The fastest communication option is to use the network. Unfortunately, this requires the
host and target to run Windows 8 at a minimum. Since Windows 7 is still a viable target, there is another
convenient option - the COM (serial) port, which can be exposed as a named pipe to the host machine. All
virtualization platforms allow redirecting a virtual serial port to a named pipe on the host. We’ll look at
both options.
Just like Local Kernel Debugging, the target machine cannot use Secure Boot. With full kernel
debugging, there is no workaround.
Using a Virtual Serial Port
In this section, we’ll configure the target and host to use a virtual COM port exposed as a named pipe to
the host. In the next section, we’ll configure kernel debugging using the network.
Configuring the Target
The target VM must be configured for kernel debugging, similar to local kernel debugging, but with the
added connection media set to a virtual serial port on that machine.
One way to do the configuration is using bcdedit in an elevated command window:
bcdedit /debug on
bcdedit /dbgsettings serial debugport:1 baudrate:115200
Change the debug port number according to the actual virtual serial number (typically 1).
The VM must be restarted for these configurations to take effect. Before you do that, we can map the serial
port to a named pipe. Here is the procedure for Hyper-V virtual machines:
If the Hyper-V VM is Generation 1 (older), there is a simple UI in the VM’s settings to do the configuration.
Use the Add Hardware option to add a serial port if there are none defined. Then configure the serial port
to be mapped to a named port of your choosing. Figure 5-6 shows this dialog.
Chapter 5: Debugging and Tracing
105
Figure 5-6: Mapping serial port to named pipe for Hyper-V Gen-1 VM
For Generation 2 VMs, no UI is currently available. To configure this, make sure the VM is shut down, and
open an elevated PowerShell window.
Type the following to set a serial port mapped to a named pipe:
PS C:\>Set-VMComPort myvmname -Number 1 -Path "\\.\pipe\debug"
Change the VM name appropriately and the COM port number as set inside the VM earlier with bcdedit.
Make sure the pipe path is unique.
You can verify the settings are as expected with Get-VMComPort:
Chapter 5: Debugging and Tracing
106
PS C:\>Get-VMComPort myvmname
VMName
Name
Path
------
----
----
myvmname COM 1 \\.\pipe\debug
myvmname COM 2
You can boot the VM - the target is now ready.
Configuring the Host
The kernel debugger must be properly configured to connect with the VM on the same serial port mapped
to the same named pipe exposed on the host.
Launch the kernel debugger elevated, and select File / Attach To Kernel. Navigate to the COM tab. Fill in
the correct details as they were set on the target. Figure 5-7 shows what these settings look like.
Figure 5-7: Setting host COM port configuration
Click OK. The debugger should attach to the target. If it does not, click the Break toolbar button. Here is
some typical output:
Chapter 5: Debugging and Tracing
107
Microsoft (R) Windows Debugger Version 10.0.18317.1001 AMD64
Copyright (c) Microsoft Corporation. All rights reserved.
Opened \\.\pipe\debug
Waiting to reconnect...
Connected to Windows 10 18362 x64 target at (Sun Apr 21 11:28:11.300 2019 (UTC \
+ 3:00)), ptr64 TRUE
Kernel Debugger connection established.
(Initial Breakpoint requested)
************* Path validation summary **************
Response
Time (ms)
Location