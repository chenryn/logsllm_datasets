title:SEPIA: Privacy-Preserving Aggregation of Multi-Domain Network Events
and Statistics
author:Martin Burkhart and
Mario Strasser and
Dilip Many and
Xenofontas A. Dimitropoulos
SEPIA: Privacy-Preserving Aggregation
of Multi-Domain Network Events and Statistics
Martin Burkhart, Mario Strasser, Dilip Many, Xenofontas Dimitropoulos
ETH Zurich, Switzerland
{burkhart, strasser, dmany, fontas}@tik.ee.ethz.ch
Abstract
Secure multiparty computation (MPC) allows joint
privacy-preserving computations on data of multiple par-
ties. Although MPC has been studied substantially,
building solutions that are practical in terms of compu-
tation and communication cost is still a major challenge.
In this paper, we investigate the practical usefulness of
MPC for multi-domain network security and monitor-
ing. We ﬁrst optimize MPC comparison operations for
processing high volume data in near real-time. We then
design privacy-preserving protocols for event correlation
and aggregation of network trafﬁc statistics, such as ad-
dition of volume metrics, computation of feature entropy,
and distinct item count. Optimizing performance of par-
allel invocations, we implement our protocols along with
a complete set of basic operations in a library called
SEPIA. We evaluate the running time and bandwidth re-
quirements of our protocols in realistic settings on a lo-
cal cluster as well as on PlanetLab and show that they
work in near real-time for up to 140 input providers and
9 computation nodes. Compared to implementations us-
ing existing general-purpose MPC frameworks, our pro-
tocols are signiﬁcantly faster, requiring, for example, 3
minutes for a task that takes 2 days with general-purpose
frameworks. This improvement paves the way for new
applications of MPC in the area of networking. Finally,
we run SEPIA’s protocols on real trafﬁc traces of 17 net-
works and show how they provide new possibilities for
distributed troubleshooting and early anomaly detection.
1 Introduction
A number of network security and monitoring prob-
lems can substantially beneﬁt if a group of involved or-
ganizations aggregates private data to jointly perform a
computation. For example, IDS alert correlation, e.g.,
with DOMINO [49], requires the joint analysis of pri-
vate alerts. Similary, aggregation of private data is useful
for alert signature extraction [30], collaborative anomaly
detection [34], multi-domain trafﬁc engineering [27], de-
tecting trafﬁc discrimination [45], and collecting net-
work performance statistics [42]. All these approaches
use either a trusted third party, e.g., a university research
group, or peer-to-peer techniques for data aggregation
and face a delicate privacy versus utility tradeoff [32].
Some private data typically have to be revealed, which
impedes privacy and prohibits the acquisition of many
data providers, while data anonymization, used to re-
move sensitive information, complicates or even pro-
hibits developing good solutions. Moreover, the ability
of anonymization techniques to effectively protect pri-
vacy is questioned by recent studies [29]. One possible
solution to this privacy-utility tradeoff is MPC.
For almost thirty years, MPC [48] techniques have
been studied for solving the problem of jointly running
computations on data distributed among multiple orga-
nizations, while provably preserving data privacy with-
out relying on a trusted third party. In theory, any com-
putable function on a distributed dataset is also securely
computable using MPC techniques [20]. However, de-
signing solutions that are practical in terms of running
time and communication overhead is non-trivial. For this
reason, MPC techniques have mainly attracted theoreti-
cal interest in the last decades. Recently, optimized ba-
sic primitives, such as comparisons [14, 28], make pro-
gressively possible the use of MPC in real-world applica-
tions, e.g., an actual sugar-beet auction [7] was demon-
strated in 2009.
Adopting MPC techniques to network monitoring and
security problems introduces the important challenge of
dealing with voluminous input data that require online
processing. For example, anomaly detection techniques
typically require the online generation of trafﬁc volume
and distributions over port numbers or IP address ranges.
Such input data impose stricter requirements on the per-
formance of MPC protocols than, for example, the in-
put bids of a distributed MPC auction [7]. In particular,
network monitoring protocols should process potentially
Network 1
.
.
.
Network 3
.
.
.
Network n
Network
Management
Measurement,
local data export
SEPIA
input peers
1. Distribution of
input data shares
SEPIA privacy peers
(simulated TTP)
.
.
.
.
.
.
101101
011011
110101
2. Privacy-preserving
computation
3. Publication of
aggregated data
10010101
00101110
11011101
Figure 1: Deployment scenario for SEPIA.
thousands of input values while meeting near real-time
guarantees1. This is not presently possible with existing
general-purpose MPC frameworks.
In this work, we design,
implement, and evaluate
SEPIA (Security through Private Information Aggrega-
tion), a library for efﬁciently aggregating multi-domain
network data using MPC. The foundation of SEPIA is
a set of optimized MPC operations, implemented with
performance of parallel execution in mind. By not en-
forcing protocols to run in a constant number of rounds,
we are able to design MPC comparison operations that
require up to 80 times less distributed multiplications
and, amortized over many parallel invocations, run much
faster than constant-round alternatives. On top of these
comparison operations, we design and implement novel
MPC protocols tailored for network security and moni-
toring applications. The event correlation protocol iden-
tiﬁes events, such as IDS or ﬁrewall alerts, that occur
frequently in multiple domains. The protocol is generic
having several applications, for example, in alert corre-
lation for early exploit detection or in identiﬁcation of
multi-domain network trafﬁc heavy-hitters. In addition,
we introduce SEPIA’s entropy and distinct count proto-
cols that compute the entropy of trafﬁc feature distribu-
tions and ﬁnd the count of distinct feature values, respec-
tively. These metrics are used frequently in trafﬁc anal-
ysis applications.
In particular, the entropy of feature
distributions is used commonly in anomaly detection,
whereas distinct count metrics are important for identify-
ing scanning attacks, in ﬁrewalls, and for anomaly detec-
tion. We implement these protocols along with a vector
addition protocol to support additive operations on time-
series and histograms.
A typical setup for SEPIA is depicted in Fig. 1 where
individual networks are represented by one input peer
each. The input peers distribute shares of secret input
data among a (usually smaller) set of privacy peers us-
ing Shamir’s secret sharing scheme [40]. The privacy
peers perform the actual computation and can be hosted
by a subset of the networks running input peers but also
by external parties. Finally, the aggregate computation
result is sent back to the networks. We adopt the semi-
honest adversary model, hence privacy of local input data
is guaranteed as long as the majority of privacy peers is
honest. A detailed description of our security assump-
tions and a discussion of their implications is presented
in Section 4.
Our evaluation of SEPIA’s performance shows that
SEPIA runs in near real-time even with 140 input and
9 privacy peers. Moreover, we run SEPIA on trafﬁc data
of 17 networks collected during the global Skype out-
age in August 2007 and show how the networks can use
SEPIA to troubleshoot and timely detect such anomalies.
Finally, we discuss novel applications in network secu-
rity and monitoring that SEPIA enables.
In summary,
this paper makes the following contributions:
1. We introduce efﬁcient MPC comparison operations,
which outperform constant-round alternatives for
many parallel invocations.
2. We design novel MPC protocols for event correla-
tion, entropy and distinct count computation.
3. We introduce the SEPIA library, in which we im-
plement our protocols along with a complete set of
basic operations, optimized for parallel execution.
SEPIA is made publicly available [39].
4. We extensively evaluate the performance of SEPIA
on realistic settings using synthetic and real traces
and show that it meets near real-time guarantees
even with 140 input and 9 privacy peers.
5. We run SEPIA on trafﬁc from 17 networks and
show how it can be used to troubleshoot and timely
detect anomalies, exempliﬁed by the Skype outage.
The paper is organized as follows: We specify the
computation scheme in the next section and present our
optimized comparison operations in Section 3. In Sec-
tion 4, we specify our adversary model and security as-
sumptions, and build the protocols for event correlation,
vector addition, entropy, and distinct count computation.
We evaluate the protocols and discuss SEPIA’s design in
Sections 5 and 6, respectively. Then, in Section 7 we
outline SEPIA’s applications and conduct a case study
on real network data that demonstrates SEPIA’s beneﬁts
in distributed troubleshooting and early anomaly detec-
tion. Finally, we discuss related work in Section 8 and
conclude our paper in Section 9.
write f oo([a], b) := ([a] + b)([a] + b), where f oo is the
protocol name, followed by input parameters. Valid in-
put parameters are sharings and public constants. On the
right side, the function to be computed is given, a bino-
mial in that case. The output of f oo is again a sharing
and can be used in subsequent computations. All opera-
tions in Zp are performed modulo p, therefore p must be
large enough to avoid modular reductions of intermedi-
ate results, e.g., if we compute [ab] = [a][b], then a, b,
and ab must be smaller than p.
2 Preliminaries
Our implementation is based on Shamir secret shar-
ing [40]. In order to share a secret value s among a set of
m players, the dealer generates a random polynomial f
of degree t = ⌊(m − 1)/2⌋ over a prime ﬁeld Zp with
p > s, such that f (0) = s. Each player i = 1 . . . m then
receives an evaluation point si = f (i) of f . si is called
the share of player i. The secret s can be reconstructed
from any t + 1 shares using Lagrange interpolation but
is completely undeﬁned for t or less shares. To actually
reconstruct a secret, each player sends his shares to all
other players. Each player then locally interpolates the
secret. For simplicity of presentation, we use [s] to de-
note the vector of shares (s1, . . . , sm) and call it a shar-
ing of s. In addition, we use [s]i to refer to si. Unless
stated otherwise, we choose p with 62 bits such that arith-
metic operations on secrets and shares can be performed
by CPU instructions directly, not requiring software al-
gorithms to handle big integers.
Addition and Multiplication Given two sharings [a]
and [b], we can perform private addition and multiplica-
tion of the two values a and b. Because Shamir’s scheme
is linear, addition of two sharings, denoted by [a] + [b],
can be computed by having each player locally add his
shares of the two values: [a + b]i = [a]i + [b]i. Sim-
ilarly, local shares are subtracted to get a share of the
difference. To add a public constant c to a sharing [a],
denoted by [a] + c, each player just adds c to his share,
i.e., [a+c]i = [a]i +c. Similarly, for multiplying [a] by a
public constant c, denoted by c[a], each player multiplies
its share by c. Multiplication of two sharings requires an
extra round of communication to guarantee randomness
and to correct the degree of the new polynomial [4, 19].
In particular, to compute [a][b] = [ab], each player ﬁrst
computes di = [a]i[b]i locally. He then shares di to get
[di]. Together, the players then perform a distributed La-
grange interpolation to compute [ab] = Pi λi[di] where
λi are the Lagrange coefﬁcients. Thus, a distributed
multiplication requires a synchronization round with m2
messages, as each player i sends to each player j the
share [di]j. To specify protocols, composed of basic op-
erations, we use a shorthand notation. For instance, we
Communication A set of independent multiplications,
e.g., [ab] and [cd], can be performed in parallel in a sin-
gle round. That is, intermediate results of all multipli-
cations are exchanged in a single synchronization step.
A round simply is a synchronization point where players
have to exchange intermediate results in order to con-
tinue computation. While the speciﬁcation of the proto-
cols is synchronous, we do not assume the network to
be synchronous during runtime. In particular, the Inter-
net is better modeled as asynchronous, not guaranteeing
the delivery of a message before a certain time. Be-
cause we assume the semi-honest model, we only have
to protect against high delays of individual messages,
potentially leading to a reordering of message arrival.
In practice, we implement communication channels us-
ing SSL sockets over TCP/IP. TCP applies acknowledg-
ments, timeouts, and sequence numbers to preserve mes-
sage ordering and to retransmit lost messages, providing
FIFO channel semantics. We implement message syn-
chronization in parallel threads to minimize waiting time.
Each player proceeds to the next round immediately after
sending and receiving all intermediate values.
Security Properties All the protocols we devise are
compositions of the above introduced addition and mul-
tiplication primitives, which were proven correct and
information-theoretically secure by Ben-Or, Goldwasser,
and Wigderson [4]. In particular, they showed that in the
semi-honest model, where adversarial players follow the
protocol but try to learn as much as possible by sharing
the information they received, no set of t or less corrupt
players gets any additional information other than the ﬁ-
nal function value. Also, these primitives are universally
composable, that is, the security properties remain in-
tact under stand-alone and concurrent composition [11].
Because the scheme is information-theoretically secure,
i.e., it is secure against computationally unbounded ad-
versaries, the conﬁdentiality of secrets does not depend
on the ﬁeld size p. For instance, regarding conﬁdential-
ity, sharing a secret s in a ﬁeld of size p > s is equivalent
to sharing each individual bit of s in a ﬁeld of size p = 2.
Because we use SSL for implementing secure channels,
the overall system relies on PKI and is only computation-
ally secure.
3 Optimized Comparison Operations
Unlike addition and multiplication, comparison of two
shared secrets is a very expensive operation. There-
fore, we now devise optimized protocols for equality
check, less-than comparison and a short range check.
The complexity of an MPC protocol is typically assessed
counting the number of distributed multiplications and
rounds, because addition and multiplication with pub-
lic values only require local computation. Damg˚ard
introduced the bit-decomposition protocol [14]
et al.
that achieves comparison by decomposing shared se-
crets into a shared bit-wise representation. On shares
of individual bits, comparison is straight-forward. With
l = log2(p), the protocols in [14] achieve a comparison
with 205l + 188l log2 l multiplications in 44 rounds and
equality test with 98l + 94l log2 l multiplications in 39
rounds. Subsequently, Nishide and Ohta [28] have im-
proved these protocols by not decomposing the secrets
but using bitwise shared random numbers. They do com-
parison with 279l + 5 multiplications in 15 rounds and
equality test with 81l multiplications in 8 rounds. While
these are constant-round protocols as preferred in theo-
retical research, they still involve lots of multiplications.
For instance, an equality check of two shared IPv4 ad-
dresses (l = 32) with the protocols in [28] requires 2592
distributed multiplications, each triggering m2 messages
to be transmitted over the network.
Constant-round vs. number of multiplications Our
key observation for improving efﬁciency is the follow-
ing: For scenarios with many parallel protocol invoca-
tions it is possible to build much more practical protocols
by not enforcing the constant-round property. Constant-
round means that the number of rounds does not depend