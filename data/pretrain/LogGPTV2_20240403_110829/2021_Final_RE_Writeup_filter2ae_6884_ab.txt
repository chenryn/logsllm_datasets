                //cout  test;
        // generateSuccessors(startNode,test);
        // for (int i = 0; i  0x7fffffff:
                return
            if r_info1 == 7:
                st_name = idc.get_wide_dword(symtab + r_info2 * 0x18)
                name = idc.get_strlit_contents(strtab + st_name)
                # rename got
                idc.set_name(r_off, name.decode("ascii") + '_ptr')
                plt_func = idc.get_qword(r_off)
                # rename plt
                idc.set_name(plt_func, 'j_' + name.decode("ascii"))
                SetFuncFlags(plt_func)
                # rename plt.sec
                for addr in idautils.DataRefsTo(r_off):
                    plt_sec_func = idaapi.get_func(addr)
                    if plt_sec_func:
                        plt_sec_func_addr = plt_sec_func.start_ea
                        idc.set_name(plt_sec_func_addr, '_' + name.decode("ascii"))
                        SetFuncFlags(plt_sec_func_addr)
                    else:
                        print("[!] idaapi.get_func({}) failed".format(hex(addr)))
            idx += 1
    def rol(n, k, word_size=None):
        k = k % word_size
        n = (n > (word_size - k))
        n &= (1 << word_size) - 1
        return n
    def ror(n, k, word_size=None):
        return rol(n, -k, word_size)
    def dejunkcode(addr, endaddr):
        while addr < endaddr:
            idc.create_insn(addr)
            # TYPE 1
            if idc.print_insn_mnem(addr) == 'call' and idc.get_operand_value(addr, 0) == addr + 5:
                if idc.print_insn_mnem(addr + 5) == 'add' and idc.get_operand_value(addr + 5, 0) == 4:  # rsp
                    add_size = idc.get_operand_value(addr + 5, 1)
                    if idc.print_insn_mnem(addr + 0xa) == 'jmp':
                        idc.patch_byte(addr + 0xa, 0xE8)
                        call_addr = idc.get_operand_value(addr + 0xa, 0)
                        nop(addr, addr + 0xa)
                        next_op = addr + 0x5 + add_size
                        nop(addr + 0xa + 0x5, next_op)
                        addr = next_op
                        continue
            # TYPE 2
            if idc.print_insn_mnem(addr) == 'call' and idc.print_insn_mnem(addr + 5) == 'jmp':
                call_addr = idc.get_operand_value(addr, 0)
                if idc.get_bytes(call_addr, 6) == b'\x55\x48\x89\xE5\xC9\xC3':
                    '''
                    push    rbp
                    mov     rbp, rsp
                    leave
                    retn
                    '''
                    nop(addr, addr + 5)  # nop call
                    nop(addr + 0xa, call_addr + 6)
                    undefine(call_addr, call_addr + 6)
            # TYPE 3
            if idc.print_insn_mnem(addr) == 'leave':
                if idc.print_insn_mnem(addr + 1) == 'add' and \
                        idc.get_operand_value(addr + 1,0) == 4 and idc.get_operand_value(addr + 1, 1) == 8: #add rsp, 8
                    if idc.print_insn_mnem(addr + 1 + 4) == 'jmp' and idc.get_operand_value(addr + 1 + 4,
                                                                                            0) == 0xfffffffffffffff8:  # [rsp - 8]
                        nop(addr + 1, addr + 1 + 4 + 4)
                        idc.patch_byte(addr + 1 + 4 + 3, 0xC3)
            # TYPE 4
            REGS = [0, 1] #[RAX, RCX]
            if idc.print_insn_mnem(addr) == 'mov' and \
                    (idc.get_operand_type(addr, 0) == idc.o_reg and idc.get_operand_value(addr, 0) in REGS)\