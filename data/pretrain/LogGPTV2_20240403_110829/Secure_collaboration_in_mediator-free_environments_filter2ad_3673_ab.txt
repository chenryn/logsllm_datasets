generates path signatures for generated requests.
Path Selection 
1. Each domain’s ﬁrst priority is to ensure that its secu-
rity policy is not violated.
2. Domains have limited information about the collabo-
ration environment. Each domain is only required to
know its security policy, the cross links and restricted
links in which it is involved.
4. FRAMEWORK FOR SECURE
MEDIATOR-FREE COLLABORATION
In this section, we present our framework for enabling
secure collaboration in a mediator-free environment. Our
framework provides a secure interoperability solution that
prevents security violations as access requests are being made.
Our solution requires no complicated preprocessing, and al-
lows the complete set of cross links to exist. Furthermore, it
enables domains to make localized access control decisions
without the need for the global view of the collaboration
environment. These characteristics make our solution very
suitable for the enforcement of access control in a mediator-
free environment.
Our framework utilizes the user’s current access history
during the collaboration session to dynamically grant or
deny future access requests. We refer to the user’s access
history as the user’s access path, which is the sequence of
roles acquired by the user during the current session. Our
proposed solution shares the ideas of the Chinese Wall se-
curity policy [5], as the user’s access history controls his
future accesses. The basis of the Chinese Wall policy is that
users are only allowed access to information which is do not
conﬂict with any other information that they have already
accessed. In this context, the user’s access path represents
the user’s session history and the user’s view of the possible
future paths is dependent on his current access path.
4.1 Framework Overview
Our framework enables domains to make localized access
control decisions based on the user’s access history in the
collaboration environment. It is composed by the following
major modules (see Figure 3):
M1. Request Processing Module: This module generates
and evaluates user access requests across domains.
M2. Path Authentication Module: Because the user path
migrates with the user requests, this module checks the
M3. Path Discovery Module: This module enables users
residing in a home domain to determine which roles
are accessible in target domains.
The above three modules are included in each domain.
The modules interact with each other to ensure the security
of their corresponding domains. The detail of each module
of our framework is discussed in detail in further sections.
As access paths constitute an important dimension in our
framework, we deﬁne in what follows access paths and secure
access path requirements.
4.2 Access Paths in an Interoperation Envi-
ronment
In a user session we identify three main types of domains,
namely home, current and target domains. The home do-
main is the domain at which the user session starts. The
current domain is the domain from which the user gener-
ates access requests. The target domain is the domain to
which the user is requesting access to. When a user enters
a domain the user is assigned an entry role. Similarly, when
the user leaves a domain to access another domain the user
is assigned an exit role. Note that the entry and exit roles
may coincide. Figure 4 shows the home, current and target
domains. The entry and exit roles are referred to as rE and
rX respectively, where the user’s access path in Figure 4 is
P = {rE
H , . . . , rE
H , rX
C }.
Deﬁnition 2. The user’s access path is deﬁned as the se-
quence of entry and exit roles acquired by a user during a
given session from the home domain to the current domain.
E
Hr  
X
Hr
Home Domain 
(H) 
E
Cr  
X
Cr
E
Tr  
Current Domain 
Target Domain 
(C) 
(T) 
Figure 4: Types of domains, entry and exit roles.
The secure interoperability requirements presented by Li
Gong et al. [11] which were mentioned in Section 2.1 ensure
that all the possible paths in secure interoperation do not
61violate the access control policy of each domain and that
both the cross links set F and the restricted access set R
are honored. Here we present the notion of secure access
path.
Deﬁnition 3. Let P = {r1, r2, . . . , rn} be an access path,
where i < j implies that role ri was acquired before rj.
Moreover, let Domain(ri) denotes the domain of role ri. P
is secure if it satisﬁes the following conditions:
C1. For all i < j and ri, rj ∈ P , if Domain(ri) = Domain(rj)
then rj (cid:22) ri.
C2. For all ri, ri+1 ∈ P , if Domain(ri) 6= Domain(ri+1)
then (ri, ri+1) ∈ F .
C3. For all i < j and ri, rj ∈ P , (ri, rj) 6∈ R.
Condition C1 ensures that roles acquired from the same
domain are acquired according to the domain’s role hier-
archy. This ensures that the access control policies of the
domains included in the path are not violated. Conditions
C2 and C3 ensure that sets F and R are honored. The user’s
access path is attached to user requests to enable domains
to make localized access control decisions. This is analogous
to source routing techniques for limited bandwidth wireless
sensor networks [14, 13] in which the route from source to
destination is attached to the packet to enable routing of the
packet. Thus, including path information is an acceptable
assumption; in the following sections we present techniques
to limit the size of the access path.
5. REQUEST PROCESSING MODULE
In a mediator-free collaboration environment each domain
has a limited view of the collaboration environment mean-
ing that each domain has a complete knowledge of its own
access control policy, that is, the cross links and the re-
stricted access links in which it is involved. Let FT ⊆ F
and RT ⊆ R be the cross links and restricted access links
that the target domain T is involved in. An access request
from another domain includes the requested role, and the
user’s current access path. Given this limited information
the target domain can decide whether to reject or accept
the access request. In such an environment each domain is
mainly concerned with ensuring that its access control pol-
icy is not violated. By verifying the following basic path
linking rules a target domain is able to securely grant or
revoke a request.
Deﬁnition 4. The basic path linking rules: Let P be
C the exit role in the current domain, rE
a secure path, rX
T
the requested role in the target domain. The target domain
must verify the following conditions in order to grant access
to the requested role:
L1. (rX
C , rE
T ) ∈ FT
L2. For all r ∈ P , (r, rE
T ) 6∈ RT
L3. For all r ∈ P , if Domain(r) = T then rE
T (cid:22) r
The next theorem proves that the basic path linking rules
assure the security of the computed path if all the conditions
L1 − 3 are veriﬁed before a link is added to the path. Note
that ◦ is the concatenation operator.
Theorem 1. Let Pi be a secure path, and Pi+1 = Pi ◦ rE
T
be an updated path that satisﬁes the basic path linking rules.
Then Pi+1 is also a secure path.
C , rE
C , rE
C , rE
H , r2 = rX
H and rn = rX
T ) or (rk, rE
T ) ∈ FT and Rule L2 ensures that (rX
Proof, The initial path Pi = (r1, r2, . . . , rn) is secure,
where r1 = rE
C refer to Figure 4.
We proceed using a proof by contradiction. Assume to the
contrary that the new path Pi+1 is not secure after satisfy-
ing all the basic path linking rules. If this is the case, then a
violation exists in path Pi+1 = Pi ◦ rE
T . This violation can be
due to Pi or (rX
T ), where rk ∈ Pi, 1 ≤ k ≤ n.
Since Pi is the initial path and it is assumed to be secure
then it cannot contain a violation. Rule L1 checks that
(rX
T ) 6∈ RT thus
this link cannot be the cause of the violation. We are now
left with only links (rk, rE
T ); however rule L2 ensures that
such links are not in the RT and rule L3 checks the integrity
of adding such links and insures that the ordering among the
roles in the domain’s internal roles hierarchy is not violated;
thus these links cannot result in security violations. In this
case as all the possible links that could lead to a violation
have been proven to be secure after verifying the basic path
linking rules which contradicts our assumption and thus path
Pi+1 can only be a secure path. 2
Note that the basic linking rules applied by the target do-
main are based on the target domain access policy, the re-
duced cross link and restricted sets FT and RT , and the
user’s access path. Thus, the target domain is able to make
secure access control decisions without a global view of the
collaboration environment. All the computations performed
to execute rules L1-3 are computationally simple operations
and can be computed in polynomial time. Furthermore, the
basic linking rules do not remove any cross links and thus
the solution is fair to all the domains in the collaboration
environment.
5.1 Extended Path Linking Rules
In addition to the basic path linking rules, the extended
rules provide more constraints on the user’s access path.
Such constraints are useful for securing many applications
with special path requirements. The restricted access rela-
tion R is only capable of representing simple binary mutual
exclusion constraints of the form (r1, r2) stating that roles
r1 and r2 must not be accessed by the same user in the same
session. Other path restrictions are desirable for certain ap-
plications. Cardinality and SoD constraints are crucial for
securing many applications in a commercial environment.
Many researchers have highlighted the importance and use
of cardinality and SoD constraints in RBAC models [10, 9,
16]. However, no one has addressed the these constraints in
the context of a multidomain collaborative environment.
A more general type of such constraints requires that no
user be a member of t or more roles in a set of m roles
{r1, r2 . . . , rm} in a given session [16]. Assuming the user’s
access path is P , then this type of constraint can easily be
checked by verifying that |P ∩ {r1, r2, . . . , rm}| ≤ t, where
|x| denotes the cardinality of the set x.
Cardinality constraints are constraints on the size of the
access path. A cardinality constraint of the form |P | ≤
P max bounds the number of roles acquired in a session to
a number P max of roles.
Ordering constraints enforce conditions on the order ac-
cording to which the roles have to be acquired. Such con-
62straints are relevant in the context of workﬂow systems [3],
in which certain roles should be acquired before others roles
can be activated.
6. PATH AUTHENTICATION
The access path is attached to the user’s requests as it
migrates across domains. A technique is required to ensure
that this path is authentic and has not been tampered with.
The authentication scheme proposed is based on a signature
that is generated by all the domains included in the access
path. The authentication scheme should preserve both the
path contents and the ordering. Each domain i has a private
key ei and a public key di.
The path signature is computed as the user request is
sent from the current domain to the target domain. For a
user currently in domain i and requesting access to a target
domain i + 1 the current path is Pi = {rE
i },
where rE
k , k = 1, . . . , i, are the entry and exit roles
in domain k respectively. The signature S.Pi of path Pi is
computed as follows:
k and rX
1 , . . . , rE
i , rX
1 , rX
(cid:26)
S.Pi =
SIGNei (S.Pi−1 ⊕ h(rE
seed
i ◦ rX
i ◦ i + 1))
if i ≥ 1
if i = 0

where ◦ is the concatenation operator,
is the XOR op-
erator, seed is a random number generated by the home
domain which is included in the path information, h() is
a secure one-way hash function, and SIGNK(M ) is a sig-
nature function that uses key K to sign message M . The
signature is generated using modular exponentiation simi-
lar to techniques used in RSA signatures [22]. Domain i
already has the signature S.Pi−1 of path Pi−1, thus domain
i can easily compute S.Pi as rE
i , i + 1 and ei are known
by domain i. The path signature S.Pi is signed using the
private key ei thus this signature cannot be forged. The
signature function has the following property:
i , rX
SIGNdi (SIGNei (M )) = M
Presented with Pi, S.Pi and the seed the target domain
i + 1 can easily verify the path signature by performing the
following operation:
SIGNdi (S.Pi) ⊕ h(rE
i ◦ rX
i ◦ i + 1) = S.Pi−1, for i ≥ 1
The target domain can easily check the authenticity of a
path Pi by recursively computing the above equation and
comparing S.P0 with the seed. Note that the signature ver-
iﬁcation is performed using the public key information of
the involved domains; thus the veriﬁcation does not require
contacting the involved domains.
7. PATH DISCOVERY
Cross links are the main enablers of collaboration. Do-
mains are able to collaborate with neighboring domains thro-
ugh the established collaboration cross links. Neighboring
domains are single hop collaborations as they only involve
two domains. Single hop collaborations are easy to achieve
and initiate as domains already have full knowledge of their
established cross links. One the other hand, in order to col-
laborate through multi-hop collaborations domains need to
build one or more candidate access paths to target domains.
To enable domains to discover available multi-hop collabo-
rations a distributed path discovery algorithm is required.
The discovery algorithm enables domains in an interopera-
tion environment to discover paths to roles in other domains,
whether reachable through one or more intermediate do-
mains. Furthermore, the discovered paths should follow the
path linking rules to ensure the discovered path(s) security.
In this section, we present two path discovery algorithms,
proactive and on-demand path discovery algorithms.
7.1 Proactive Path Discovery
The proactive path discovery algorithm computes the pa-
ths from the roles in current domain to roles in other do-
mains a priori. Each domain generates and maintains a role
routing table, which is a partial map of the collaboration en-
vironment representing the view with respect to the current
domain. Neighboring domains exchange periodic discovery
updates via cross links indicating reachable domains through
these links. Note that cross link related to domain i can be
divided into outgoing and incoming cross links, referred to
by F O
i = Fi. The peri-
odic messages are sent by domains on their incoming cross
links. Figure 5(a) shows the direction of the periodic dis-
covery updates in an example collaboration environment.
i respectively, where F O
i and F I
i ∪ F I
The content of the periodic message is chosen by the ad-
vertising domain to indicate paths to roles accessible through
the cross link over which the message is sent. To avoid loops,
paths that include the domain to which the update message
is to be sent are dropped or truncated. For example in Fig-
ure 5(a) the update message sent from domain B to domain
A across (rA3 , rB1 ) will report the roles reachable via rB1 in
all domains other than domain A, this clearly avoids loops.
To avoid inﬁnitely growing paths, a cardinality constraint
should be set on the path length; the path length could be
limited to double the number of estimated collaborating do-
mains. The proactive path discovery algorithm is similar to
link state routing; however, there are several diﬀerences. For
example, in a collaboration environment cross links are not
necessarily bidirectional and routing metrics are not neces-
sarily based on distance instead on higher level logic dictated
by the cross links and the domain hierarchies.
To ensure the authenticity of the reported paths, a path
signature is computed based on technique similar to the path
authentication scheme discussed in Section 6. However, the
path signature is computed in the reverse direction, from the
target domain to the home domain, as the path is discovered
from target to home. The advantage of a proactive path dis-
covery is that when a domain needs to collaborate with a
target domain, the path is already available and thus there
is no latency. Furthermore, this technique is reactive to col-
laboration environment changes such as changes in the cross
links, domain policies, and the entry or exit of collaborating
domains. The disadvantage is that some paths may never
be used during the collaboration period. Another problem is
that the dissemination of path information will periodically
consume network bandwidth.
7.2 On-Demand Path Discovery
The on-demand path discovery algorithm computes paths
from the roles in the current domain to roles in a target do-
main only when such path is needed. Neighboring domains
do not exchange periodic path message updates; instead sim-
ple “Hello” messages are sent between domains that share
cross links to announce that the link is still alive. When a
home domain needs to establish a path to a certain role in a
631Ar  
2Ar  
3Ar  
1Ar  
2Ar  
3Ar  
1Br  
2Br  
1Dr  
2Dr
3Dr
(a) Proactive Path Discovery
1Br  