func trap(height []int) int {
res,left, right, maxLeft, maxRight := 0,0, len(height)-1, 0,0
for left  maxLeft {
maxLeft = height[left]
}else {
res += maxLeft - height[left]
---
## Page 134
1eft++
}else{
if height[right]>= maxRight {
maxRight = height[right]
}else{
res += maxRight - height[right]
right--
return res
46.Permutations
题目
Given a collection of distinct integers, return all possible permutations.
Example:
Input: [1,2,3]
output:
[1,2,3],
[1,3,2],
[2,1,3],
[2,3,1],
[3,1,2],
[3,2,1]
题目大意
给定一个没有重复数字的序列，返回其所有可能的全排列。
解题思路
·求出一个数组的排列组合中的所有排列，用DFS深搜即可。
代码
package leetcode
func permute(nums []int) [][]int {
---
## Page 135
if 1en(nums）== 0{
return [][]int{}
used, p, res = make([]bool, len(nums)), []int{}, [][]int{}
generatePermutation(nums,0,p,&res,&used)
return res
func generatePermutation(nums []int, index int, p []int, res *[][]int, used *
[]bool）{
if index ==len(nums）{
temp := make([]int,1en(p))
copy(temp,p)
*res = append(*res, temp)
return
for i := 0; i 0&&nums[i]==nums[i-1]&&！（*used)[i-1]{//这里是去重的关键逻辑
continue
(*used)[i] = true
p = append(p, nums[i])
generatePermutation47(nums, index+l, p, res, used)
p = p[:1en(p)-1]
(*used) [i] = false
return
---
## Page 137
48.Rotatelmage
题目
agewj ue Suuasaudau xujew az u x u ue uania aue no
Rotate the image by 90 degrees (clockwise).
Note:
You have to rotate the image in-place, which means you have to modify the input 2D matrix
directly. Do NOT allocate another 2D matrix and do the rotation.
Example 1:
Given input matrix =
[1,2,3],
[4,5,6],
[7,8,9]
]，
rotate the input matrix in-place such that it becomes:
[7,4,1],
[8,5,2],
[9,6,3]
Example 2:
Given input matrix
[ 5, 1, 9,11] ,
[2,4, 8,10],
[13, 3, 6, 7],
[15,14,12,16]
]，
rotate the input matrix in-place such that it becomes:
[15,13, 2, 5] ,
[14, 3, 4, 1],
[12, 6, 8, 9],
[16, 7,10,11]
题目大意
---
## Page 138
给定一个n×n的二维矩阵表示一个图像。将图像顺时针旋转90度。说明：你必须在原地旋转图像，
这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。
解题思路
·给出一个二维数组，要求顺时针旋转90度。
·这一题比较简单，按照题意做就可以。这里给出2种旋转方法的实现，顺时针旋转和逆时针旋
转。
/
clockwiserotate 顺时针旋转
 first reverse up to down, t
then swap the symmetry
*1 2 3
789
741
456
>
456
=>
85 2
*789
1 2 3
9 6 3
*/
void rotate(vector > &matrix) {
reverse(matrix.begin(), matrix.end());
for （int i = 0; i 
654
=>
258
68*
987
147
*/
void anti_rotate(vector > &matrix) {
for (auto vi : matrix) reverse(vi.begin(), vi.end());
for （int i = 0; i <matrix.size(); ++i) {
for (int j =i + 1; j < matrix[i].sizeO; ++j)
swap(matrix[i][j], matrix[j][i]);
代码
package leetcode
func rotate(matrix [][]int) {
row := 1en (matrix)
---
## Page 139
if row<=0{
return
column := 1en(matrix[0])
//rotatebydiagonal对角线变换
for i := 0; i < row; i++ {
for j:=i+ 1; j< column; j++ {
tmp := matrix[i][j]
matrix[i][j] = matrix[j][i]
matrix[j][i] = tmp
//rotatebyverticalcenterline竖直轴对称翻转
halfColumn := column / 2
for i := 0; i < row; i++ {
for j := 0; j < halfcolumn; j++ {
tmp = matrix[i][j]
matrix[i][j] = matri×[i][column-j1]
matrix[i][column-j-1] =  tmp
49.GroupAnagrams
题目
Given an array of strings, group anagrams together.
Example:
'[eq..*eu..ae.‘,ue.*.,ea....ea]:ndu
Output:
["ate","eat”,"tea"]，
["nat","tan"],
["bat"]
Note:
● All inputs will be in lowercase.
● The order of your output does not matter.
---
## Page 140
题目大意
给出一个字符串数组，要求对字符串数组里面有Anagrams关系的字符串进行分组。Anagrams关系是
指两个字符串的字符完全相同，顺序不同，两者是由排列组合组成。
解题思路
这道题可以将每个字符串都排序，排序完成以后，相同Anagrams的字符串必然排序结果一样。把排序
以后的字符串当做key存入到map中。遍历数组以后，就能得到一个map，key是排序以后的字符
串，value对应的是这个排序字符串以后的Anagrams字符串集合。最后再将这些value对应的字符串
数组输出即可。
代码
package leetcode
import "sort"
type sortRunes []rune
func (s sortRunes) Less(i， j int) bool {
return s[i] < s[j]
func (s sortRunes) Swap(i,j int){
s[1], s[j] = s[j], s[i]
func (s sortRunes) Len() int {
return len(s)
func groupAnagrams(strs []string) [][]string {
record, res := map[string][]string{}, [][]string{}
for _, str := range strs {
sByte := []rune(str)
sort.Sort(sortRunes(sByte))
sstrs = record[string(sByte)]
sstrs = append(sstrs, str)
record[string(sByte)]= sstrs
for _, v := range record {
res = append(res, v)
return res
---
## Page 141
50.Pow(x,n)
题目
Implement pow(x,_n), which calculates x raised to the power n (xn)
Example 1:
Input:2.00000,10
Output: 1024.00000
Example 2:
Input: 2.10000,3
output: 9.26100
Example 3:
Input: 2.00000,-2
output:0.25000
Exp1anation: 2-2 = 1/22 = 1/4 = 0.25
Note:
●-100.0 <X < 100.0
●n is a 32-bit signed integer, within the range [2^31, 2^31 1]
题目大意
实现pow（xn），即计算x的n次幂函数。
解题思路
●要求计算Pow(x,n)
·这一题用递归的方式，不断的将n2分下去。注意n的正负数，n的奇偶性。
代码
package leetcode
//时间复杂度o（logn），空间复杂度o（1)
func myPow(x float64,n int) float64 {
if n == 0 {
return 1
if n == 1 {
---
## Page 142
return x
if n<0{
u= = u
x=1/x
tmp := myPow(x, n/2)
if n%2 == 0 {
return tmp * tmp
return tmp ²tmp 
51.N-Queens
题目
 The n-queens puzzle is the problem of placing n queens on an nxn chessboard such that no two
queens attack each other.
a
b
0
9
当
1
警
b
C
d
6
One solution to the elght queens puzzle
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens' placement, where *Q′ and
Ajangoadsa, aoeds Adwa ue pue uaanb e ajeoipui yoq  *
Example:
---
## Page 143
Input: 4
]:ndno
[".Q..",// Solution 1
"...Q”,
"Q...",
". .Q."],
["..Q.",// Solution 2
"Q...",
"...Q”,
",Q. ."]
Explanation: There exist two distinct solutions to the 4-queens puzzle as
shown above.
题目大意
给定一个整数n，返回所有不同的n皇后问题的解决方案。每一种解法包含一个明确的n皇后问题的棋
子放置方案，该方案中Q和分别代表了皇后和空位。
解题思路
·求解n皇后问题
·利用col数组记录列信息，col有n列。用dia1，dia2记录从左下到右上的对角线，从左上到右
下的对角线的信息，dia1和dia2分别都有2*n-1个。
●dia1对角线的规律是1+j是定值，例如[0,0]，为0；[1,0]、[0,1]为1；[2,0]、[1,1]、[0,2]为
2;
●dia2对角线的规律是i-j是定值，例如[0,7]，为-7；[0,6]、[1,7]为-6；[0,5]、[1,6]、[2,7]
为-5；为了使他们从0开始，i-j+n-1偏移到0开始，所以dia2的规律是i-j+n-1为
定值。
代码
package leetcode
//解法一DFS
func solveNQueens(n int) [][]string {
col, dial, dia2, row, res := make([]bool, n), make([]bool, 2*n-1),
make([]bool, 2*n-1),[]int{},[][]string{}
putQueen(n, 0,&col,&dial,&dia2, &row, &res)
return res
//尝试在一个n皇后问题中，摆放第index行的皇后位置
func putQueen(n, index int, col, dial, dia2 *[]bool, row *[]int, res *[]
[]string） {
---
## Page 144
if index == n{
*res = append(*res, generateBoard(n, row))
return
for i:=0；i< n;i++{
//尝试将第index行的皇后据放在第i列
if !(*co1)[i] &&1(*dial)[index+i]&&!(*dia2)[index-i+n-1]{
*row = append(*row， i)
(*col)[i] = true
（dial)[index+i] = true
(*dia2)[index-i+n-1] = true
putQueen(n, index+l, col, dial, dia2, row, res)
(*col)[i] = false