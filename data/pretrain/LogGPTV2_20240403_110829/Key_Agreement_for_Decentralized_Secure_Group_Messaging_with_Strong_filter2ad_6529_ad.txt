### Our DCGKA Protocol

#### 1. Overview
The DCGKA (Double Ratchet Group Key Agreement) protocol is designed to manage group encryption and decryption, ensuring that all members can securely communicate with each other. The protocol includes functions for adding, removing, and updating group members, as well as handling concurrent operations.

#### 2. Key Functions

##### 2.1 `generate-seed`
This function generates a new seed secret and encrypts it to each recipient.
```python
def generate_seed(γ, recipients):
    γ.nextSeed = KGen()  # Generate a new seed
    dmsgs = {}
    for ID in recipients:
        (γ, msg) = encrypt_to(γ, ID, γ.nextSeed)
        dmsgs[ID] = msg
    return (γ, dmsgs)
```

##### 2.2 `process-seed`
This function processes the seed secret and derives member secrets for each group member.
```python
def process_seed(γ, sender, seq, dmsg):
    if sender == γ.myId:
        seed = γ.nextSeed
        γ.nextSeed = None
    elif γ.myId in recipients:
        (γ, seed) = decrypt_from(γ, sender, dmsg)
    else:
        return (γ, ("ack", ++γ.mySeq, (sender, seq)), None, None, None)

    for ID in recipients:
        γ.memberSecret[sender, seq, ID] = HKDF(seed, ID)
    
    senderSecret = HKDF(seed, sender)
    (γ, Isender) = update_ratchet(γ, sender, senderSecret)
    
    if sender == γ.myId:
        return (γ, None, None, Isender, None)
    
    control = ("ack", ++γ.mySeq, (sender, seq))
    (γ, _, _, Ime, _) = process_ack(γ, γ.myId, γ.mySeq, (sender, seq), None)
    return (γ, control, None, Isender, Ime)
```

##### 2.3 `encrypt-to`
Encrypts a plaintext message to a recipient using the 2SM (Two-Step Message) protocol.
```python
def encrypt_to(γ, recipient, plaintext):
    if γ.2sm[recipient] is None:
        γ.2sm[recipient] = 2SM_Init(γ.myId, recipient)
    (γ.2sm[recipient], ciphertext) = 2SM_Send(γ.2sm[recipient], plaintext)
    return (γ, ciphertext)
```

##### 2.4 `decrypt-from`
Decrypts a ciphertext message from a sender using the 2SM protocol.
```python
def decrypt_from(γ, sender, ciphertext):
    if γ.2sm[sender] is None:
        γ.2sm[sender] = 2SM_Init(γ.myId, sender)
    (γ.2sm[sender], plaintext) = 2SM_Receive(γ.2sm[sender], ciphertext)
    return (γ, plaintext)
```

##### 2.5 `update-ratchet`
Updates the ratchet for a given user with an input.
```python
def update_ratchet(γ, ID, input):
    (updateSecret, γ.ratchet[ID]) = HKDF(γ.ratchet[ID], input)
    return (γ, updateSecret)
```

##### 2.6 `member-view`
Returns the set of operations that are visible to a given user.
```python
def member_view(γ, ID):
    ops = {m for m in γ.history if m was sent or acked by ID or the user who added ID}
    return DGM(ops)
```

#### 3. Group Management

##### 3.1 Adding Group Members
To add a new group member, an existing group member calls the `add` function, passing in the ID of the user to be added.
```python
def add(γ, ID):
    op = ("add", γ.myId, γ.mySeq, ID)
    γ.history.add(op)
    welcome = (γ.history, c)
    (γ, control, dmsgs, I) = process_add(γ, γ.myId, γ.mySeq, ID, ε)
    return (γ, control, {(ID, welcome)}, I)
```

##### 3.2 Processing Add Messages
The `process-add` function is called by both the sender and each recipient of an "add" message.
```python
def process_add(γ, sender, seq, added, dmsg):
    if added == γ.myId:
        (γ, control, dmsgs, I) = process_welcome(γ, sender, seq, dmsg)
        return (γ, control, dmsgs, I)
    
    op = ("add", sender, seq, added)
    γ.history.add(op)
    
    if γ.myId in member_view(γ, sender):
        (γ, s) = update_ratchet(γ, sender, "welcome")
        γ.memberSecret[sender, seq, added] = s
        (γ, Isender) = update_ratchet(γ, sender, "add")
    else:
        Isender = None
    
    if sender == γ.myId:
        return (γ, None, None, Isender, None)
    
    control = ("add-ack", ++γ.mySeq, (sender, seq))
    (γ, c) = encrypt_to(γ, added, γ.ratchet[γ.myId])
    (γ, _, _, Ime, _) = process_add_ack(γ, γ.myId, γ.mySeq, (sender, seq), None)
    return (γ, control, {(added, c)}, Isender, Ime)
```

##### 3.3 Processing Welcome Messages
The `process-welcome` function is called by a newly added group member.
```python
def process_welcome(γ, sender, seq, (adderHistory, c)):
    γ.history = adderHistory
    (γ, s) = decrypt_from(γ, sender, c)
    γ.ratchet[sender] = s
    (γ, s) = update_ratchet(γ, sender, "welcome")
    γ.memberSecret[sender, seq, γ.myId] = s
    (γ, Isender) = update_ratchet(γ, sender, "add")
    control = ("ack", ++γ.mySeq, (sender, seq))
    (γ, _, _, Ime, _) = process_ack(γ, γ.myId, γ.mySeq, (sender, seq), None)
    return (γ, control, None, Isender, Ime)
```

##### 3.4 Processing Add-Ack Messages
The `process-add-ack` function is called by both the sender and each recipient of an "add-ack" message.
```python
def process_add_ack(γ, sender, seq, (ackID, ackSeq), dmsg):
    op = ("ack", sender, seq, ackID, ackSeq)
    γ.history.add(op)
    (γ, s) = update_ratchet(γ, sender, "add-ack")
    return (γ, s)
```

#### 4. Concurrency Handling
Concurrency issues can arise when multiple users are added or removed simultaneously. The protocol handles these cases by forwarding necessary secrets and acknowledging messages appropriately.

#### 5. Conclusion
The DCGKA protocol ensures secure and efficient group communication by managing keys and ratchets, handling member additions and removals, and addressing concurrency issues. This protocol provides a robust foundation for secure group messaging applications.