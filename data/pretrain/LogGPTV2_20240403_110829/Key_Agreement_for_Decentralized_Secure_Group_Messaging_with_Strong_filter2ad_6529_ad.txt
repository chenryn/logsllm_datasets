recipients ← member-view(γ , γ .myId) \ {ID, γ .myId}
(γ , dmsgs) ← generate-seed(γ , recipients)
(γ , _, _, I , _) ← process-remove(γ , γ .myId, γ .mySeq, ID, ε)
return (γ , control, dmsgs, I)
(γ , _, _, I , _) ← process-add(γ , γ .myId, γ .mySeq, ID, ε)
return (γ , control, {(ID, welcome)}, I)
return process-seed(γ , sender, seq, dmsg)
if added = γ .myId then
return process-welcome(γ , sender, seq, dmsg)
control ← ("add", ++γ .mySeq, ID)
(γ , c) ← encrypt-to(γ , ID, γ .ratchet[γ .myId])
if γ .myId ∈ member-view(γ , sender) then
(γ , s) ← update-ratchet(γ , sender, "welcome")
γ .memberSecret[sender, seq, added] ← s
(γ , Isender) ← update-ratchet(γ , sender, "add")
else Isender ← ε
if sender = γ .myId then return (γ , ε , ε , Isender, ε)
control ← ("add-ack", ++γ .mySeq, (sender, seq))
(γ , c) ← encrypt-to(γ , added, ratchet[γ .myId])
(γ , _, _, Ime, _) ← process-add-ack(γ , γ .myId,
process-remove(γ , sender, seq, removed, dmsg)
1 : op ← ("remove", sender, seq, removed)
2 : γ .history ← γ .history ∪ {op}
3 :
add(γ , ID)
1 :
2 :
3 : op ← ("add", γ .myId, γ .mySeq, ID)
4 : welcome ← (γ .history ∪ {op}, c)
5 :
6 :
process-add(γ , sender, seq, added, dmsg)
1 :
2 :
3 : op ← ("add", sender, seq, added)
4 : γ .history ← γ .history ∪ {op}
5 :
6 :
7 :
8 :
9 :
10 :
11 :
12 :
13 :
14 :
15 :
process-add-ack(γ , sender, seq, (ackID, ackSeq), dmsg)
1 : op ← ("ack", sender, seq, ackID, ackSeq)
2 : γ .history ← γ .history ∪ {op}
3 :
4 :
5 :
6 :
7 :
8 :
9 :
process-welcome(γ , sender, seq, (adderHistory, c))
1 : γ .history ← adderHistory
2 :
3 :
4 : γ .memberSecret[sender, seq, γ .myId] ← s
5 :
6 :
7 :
8 :
9 :
if dmsg (cid:44) ε then
(γ , s) ← decrypt-from(γ , sender, dmsg)
γ .ratchet[sender] ← s
if γ .myId ∈ member-view(γ , sender) then
(γ , I) ← update-ratchet(γ , sender, "add")
return (γ , ε , ε , I , ε)
else return (γ , ε , ε , ε , ε)
(γ , Isender) ← update-ratchet(γ , sender, "add")
control ← ("ack", ++γ .mySeq, (sender, seq))
(γ , _, _, Ime, _) ← process-ack(γ , γ .myId, γ .mySeq,
(γ , γ .ratchet[sender]) ← decrypt-from(γ , sender, c)
(γ , s) ← update-ratchet(γ , sender, "welcome")
return (γ , control, {(added, c)}, Isender, Ime)
γ .mySeq, (sender, seq), ε)
return (γ , control, ε , Isender, Ime)
(sender, seq), ε)
Figure 4: Our DCGKA Protocol.
foreach ID ∈ recipients do
(γ , msg) ← encrypt-to(γ , ID, γ .nextSeed)
dmsgs ← dmsgs ∪ {(ID, msg)}
return (γ , dmsgs)
forward ← ∅
foreach ID ∈ members \ (recipients ∪ {sender}) do
s ← γ .memberSecret[sender, seq, γ .myId]
(γ , msg) ← encrypt-to(γ , ID, s)
forward ← forward ∪ {(ID, msg)}
(γ , _, _, Ime, _) ← process-ack(γ , γ .myId, γ .mySeq,
recipients ← member-view(γ , sender) \ {sender}
if sender = γ .myId then
seed ← γ .nextSeed; γ .nextSeed ← ε
else if γ .myId ∈ recipients then
(γ , seed) ← decrypt-from(γ , sender, dmsg)
else
return (γ , ("ack", ++γ .mySeq, (sender, seq)), ε , ε , ε)
foreach ID ∈ recipients do
γ .memberSecret[sender, seq, ID] ← HKDF(seed, ID)
senderSecret ← HKDF(seed, sender)
(γ , Isender) ← update-ratchet(γ , sender, senderSecret)
if sender = γ .myId then return (γ , ε , ε , Isender, ε)
control ← ("ack", ++γ .mySeq, (sender, seq))
generate-seed(γ , recipients)
1 : γ .nextSeed ←$ KGen; dmsgs ← ∅
2 :
3 :
4 :
5 :
process-seed(γ , sender, seq, dmsg)
1 :
2 :
3 :
4 :
5 :
6 :
7 :
8 :
9 :
10 :
11 :
12 :
13 :
14 : members ← member-view(γ , γ .myId)
15 :
16 :
17 :
18 :
19 :
20 :
21 :
22 :
encrypt-to(γ , recipient, plaintext)
if γ .2sm[recipient] = ε then
1 :
γ .2sm[recipient] ← 2SM-Init(γ .myId, recipient)
2 :
(γ .2sm[recipient], ciphertext) ←
3 :
4 :
5 :
decrypt-from(γ , sender, ciphertext)
1 :
2 :
3 :
4 :
5 :
update-ratchet(γ , ID, input)
1 :
2 :
3 :
member-view(γ , ID)
1 : ops ← {m ∈ γ .history | m was sent or acked by ID
(or the user who added ID, if m precedes the add)}
2 :
return DGM(ops)
3 :
if γ .2sm[sender] = ε then
γ .2sm[sender] ← 2SM-Init(γ .myId, sender)
(γ .2sm[sender], plaintext) ←
(updateSecret, γ .ratchet[ID]) ←
HKDF(γ .ratchet[ID], input)
return (γ , control, forward, Isender, Ime)
2SM-Receive(γ .2sm[sender], ciphertext)
2SM-Send(γ .2sm[recipient], plaintext)
return (γ , updateSecret)
return (γ , ciphertext)
return (γ , plaintext)
(sender, seq), ε)
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2031user, and the local user is one of its recipients, we use decrypt-from
to decrypt the direct message containing the seed secret (lines 4–
5); 3. otherwise we return an "ack" message without deriving an
update secret (lines 6–7). Case 3 may occur when a group member
is added concurrently to other messages, which we discuss later.
Next, process-seed derives independent member secrets for each
group member from the seed secret (lines 8–10) by combining the
seed secret and each user ID using HKDF (like in Figure 3). The
secret for the sender of the message is stored in senderSecret, and
those for the other group members are stored in γ .memberSecret;
the latter are used when we receive acknowledgments from those
users. We only store the member secrets, and not the seed secret,
so that if the user’s private state is compromised, the adversary
obtains only those member secrets that have not yet been used.
The sender’s member secret is used immediately to update their
KDF ratchet and compute their update secret Isender (line 11), using
update-ratchet. If the local user is the sender of the control message,
we are now finished and return the update secret (line 12). If we
received the seed secret from another user, we construct an "ack"
control message to broadcast, including the sender ID and sequence
number of the message we are acknowledging (line 13).
Lines 14–19 of process-seed are relevant only in the case of
concurrency, so we skip them for now and return to them later.
The last step is to compute an update secret Ime for the local user,
which we do on lines 20–21 by calling process-ack.
process-ack is also called by other group members when they
receive the "ack" message. In this function, ackID and ackSeq are
the sender and sequence number of the acknowledged message.
First, if the acknowledged message was a group membership oper-
ation, we record the acknowledgment in γ .history (lines 1–3). We
do this because the member-view function needs to know which
operations have been acknowledged by which user.
Next, line 4 of process-ack reads from γ .memberSecret the ap-
propriate member secret that was previously derived from the seed
secret in the message being acknowledged. The member secret is
then deleted for forward secrecy (line 5). Line 6–7 are relevant only
in the case of concurrency, so we skip them for now. On lines 8–9
we update the ratchet for the sender of the "ack" and return the
resulting update secret.
6.2.3 PCS Update and Removing Group Members. Functions update
and remove are similar to create: they also call generate-seed to
encrypt a new seed secret to each group member. The difference is
that the set of group members is determined using member-view
on line 2 of update and remove, and in the case of remove, the
user being removed is excluded from the set of recipients of the
seed secret. Moreover, the control message they construct has type
"update" or "remove" respectively.
Similarly, process-update and process-remove are analogous
to process-create. process-update omits updating γ .history, while
process-remove adds a remove operation to the history. Both then
call process-seed, which works like during group creation.
6.2.4 Adding Group Members. To add a new group member, an
existing group member calls the add function, passing in the ID of
the user to be added. This function constructs a control message of
type "add" to broadcast to the group (line 1), and a welcome message
that is sent to the new member as a direct message (lines 2–4). The
welcome message contains the current KDF ratchet state of the
sender, encrypted using 2SM, and the history of group membership
operations to date (necessary so that the new member can evaluate
the DGM function). It is possible to avoid sending an unbounded
history of membership operations, but we omit this optimization
for the sake of clarity. On line 5 we call process-add to compute
the update secret for the user performing the addition.
process-add is called by both the sender and each recipient of
an "add" message, including the new group member. On lines
1–2, if the local user is the new group member being added, we
call process-welcome (see below) and return. Otherwise we extend
γ .history with the add operation (lines 3–4). Line 5 determines
whether the local user was already a group member at the time the
"add" message was sent; this is true in the common case, but may
be false if multiple users were added concurrently. We discuss the
common case first, and return to concurrency later.
On lines 6–8 we twice update the ratchet for the sender of the
"add" message. In both calls to update-ratchet, rather than us-
ing a random seed secret, the ratchet input is a constant string
("welcome" and "add" respectively). It is sufficient to use constants
here because all existing group members are allowed to know the
next update secrets following the add operation. The value returned
by the first ratchet update is stored in γ .memberSecret as the added
user’s first member secret; the result of the second ratchet update
becomes Isender, the update secret for the sender of the "add". On
line 10, if the local user is the sender, we return that update secret.
Otherwise, we need to acknowledge the "add" message, so on
line 11 we construct a control message of type "add-ack" to broad-
cast (note that add has its own acknowledgment type, whereas
create, update and remove all use "ack"). We then use 2SM to
encrypt our current ratchet state to send as a direct message to
the added user, so that they can decrypt subsequent messages we
send (line 12). Finally, we call process-add-ack to compute the local
user’s update secret Ime, and return it with Isender (lines 13–15).
process-welcome is the second function called by a newly added
group member (the first is the call to init that sets up their state).
Here, adderHistory is the adding user’s copy of γ .history sent
in their welcome message, which is used to initialize the added
user’s history (line 1). c is the ciphertext of the adding user’s
ratchet state, which we decrypt on line 2 using decrypt-from. After
γ .ratchet[sender] is initialized, we can call update-ratchet twice on
lines 3–5 with the constant strings "welcome" and "add": exactly
the same ratchet operations as every other group member performs
in process-add. As before, the result of the first update-ratchet call
becomes the first member secret for the added user, and the second
returns Isender, the update secret for the sender of the add operation.
Finally, the new group member constructs an "ack" control mes-
sage (not "add-ack") to broadcast on line 6, and calls process-ack
to compute their first update secret Ime. process-ack works as de-
scribed previously, reading from γ .memberSecret the member se-
cret we just generated, and passing it to update-ratchet. The previ-
ous ratchet state for the new member is the empty string ε, as set
up by init, so this step initializes the new member’s ratchet. Every
other group member, on receiving the new member’s "ack", will
initialize their copy of the new member’s ratchet in the same way.
By the end of process-welcome, the new group member has ob-
tained update secrets for themselves and the user who added them.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2032update
ack w/
forward
A
B
C
add D
D
Figure 5: A updates while concurrently C adds D, and B re-
ceives the add message before the update. When B receives
the update, B considers D to be a group member, but D will be
unable to derive B’s new update secret. To resolve this, B forwards
its member secret to D in its ack message.
They then use those secrets to initialize the ratchets for application
messages, illustrated in Figure 1, allowing them to send messages
and decrypt messages from the user who added them. The ratchets
for other group members are initialized by process-add-ack.
process-add-ack is called by both the sender and each recipi-
ent of an "add-ack" message, including the new group member.
On lines 1–2 we add the acknowledgment to γ .history, like in