# 五、容器优先的解决方案设计
采用 Docker 作为您的应用平台会带来明显的运营优势。容器是比虚拟机轻得多的计算单元，但它们仍然提供隔离，因此您可以在更少的硬件上运行更多的工作负载。所有这些工作负载在 Docker 中都有相同的形状，因此运营团队可以管理.NET、Java、Go 和 Node.js 应用。Docker 平台在应用架构方面也有优势。在本章中，我将了解容器优先解决方案设计如何帮助您以高质量和低风险向应用添加功能。
在这一章中，我将回到尼尔丁纳，从我在[第三章](03.html)*中停下来的地方继续.NET 框架和。网络核心应用*。NerdDinner 是一个传统的.NET 应用，一种组件间紧密耦合的单片设计，其中所有通信都是同步的。没有单元测试、集成测试或端到端测试。纳丁纳和其他数百万人一样.NET 应用——它可能有用户需要的功能，但修改起来既困难又危险。将这样的应用转移到 Docker 可以让您采取不同的方法来修改或添加功能。
Docker 平台的两个方面将改变您对解决方案设计的思考方式。首先，联网、服务发现和负载平衡意味着您可以将应用分布在多个组件中，每个组件都运行在可以独立移动、扩展和升级的容器中。其次，Docker Hub 和其他注册中心上可用的生产级软件的范围不断扩大，这意味着您可以将现成的软件用于许多通用服务，并以与您自己的组件相同的方式管理它们。这让您可以自由设计更好的解决方案，而不受基础架构或技术的限制。
在本章中，我将向您展示如何使传统的.NET 应用，通过采用容器优先设计:
*   NerdDinner 的设计目标
*   在 Docker 中运行消息队列
*   启动多容器解决方案
*   传统应用的现代化
*   在容器中添加新功能
*   从整体到分布式解决方案
# 技术要求
您将需要在更新为 18.09 的 Windows 10 或 Windows Server 2019 上运行 Docker 来完成示例。本章代码可在[https://github . com/six eyes/docker-on-window/tree/第二版/ch05](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch05) 获得。
# NerdDinner 的设计目标
第三章*发展中的 Docker 化.NET 框架和.NET 核心应用*，我把 NerdDinner 主页提取到了一个单独的组件中，这使得 UI 变更的快速交付成为可能。现在，我将进行一些更基本的更改，分解遗留应用并更新架构。
我将从 web 应用中的一个性能问题开始。NerdDinner 中的数据层使用**实体框架** ( **EF** )，所有数据库访问都是同步的。网站的大量流量将创建大量到 SQL Server 的开放连接，并运行大量查询。随着负载的增加，性能会下降，到查询超时或连接池不足的地步，站点会向用户显示错误。
改善这种情况的一种方法是采用所有的数据访问方法`async`，但这是一种侵入式的改变——所有的控制器动作也需要进行`async`，并且没有自动化的测试套件来验证这种大规模的改变。或者，我可以为数据检索添加一个缓存，这样`GET`请求将会到达缓存，而不是数据库。这也是一个复杂的变化，我需要将数据缓存足够长的时间，以使缓存命中成为可能，同时在数据发生变化时保持缓存同步。同样，缺乏测试意味着像这样复杂的变化很难验证，所以这也是一种有风险的方法。
如果我真的实现了这些复杂的变更，那么很难估计其收益。如果所有的数据访问都转移到异步方法，这是否会使网站运行得更快，并使其能够处理更多的流量？如果我可以集成一个足够高效的缓存来从数据库中读取数据，这是否会提高整体性能？这些好处很难量化，直到你真正做出改变，这时你可能会发现改进并不能证明投资是合理的。
使用容器优先的方法，您可以从不同的角度看待设计。如果您识别出一个进行昂贵的数据库调用但不需要同步运行的特性，您可以将数据库代码移动到一个单独的组件中。然后在组件之间使用异步消息传递，将事件从主 web 应用发布到消息队列，并对新组件中的事件消息采取行动。使用 Docker，这些组件中的每一个都将在一个或多个容器中运行:
![](img/ddfe4194-1d38-4f65-b62d-874a61c97120.png)
如果我只关注一个特性，那么我就可以快速实现改变。这种设计没有其他方法的任何缺点，并且有许多优点:
*   这是一个有针对性的更改，在主应用中只有一个控制器操作发生了更改
*   新的消息处理程序组件很小，并且具有很高的内聚性，因此很容易测试
*   web 层和数据层是分离的，因此它们可以独立缩放
*   我正在将工作从 web 应用中转移出来，这样我们就可以确保性能的提高
还有其他优势。新组件完全独立于原始应用；它只需要监听事件消息并对其采取行动。你可以用。. NET.NET Core，或任何其他用于消息处理程序的技术栈；您不需要被限制在一个栈中。您还有正在从应用发布的事件，因此您可以选择稍后通过添加监听这些事件的新处理程序来添加其他功能。
# 正在记录 NerdDinner 的配置
NerdDinner 使用`Web.config`进行配置—既用于在不同版本之间保持不变的应用配置值，也用于在不同环境之间变化的环境配置值。配置文件被烘焙到发行包中，这使得更改变得很困难。在[第三章](03.html)、*发展中.NET 框架和.NET 核心应用*，我将`Web.config`中的`appSettings`和`connectionStrings`部分分割成单独的文件；通过附加包含不同配置文件的卷，这样做可以让我运行一个具有不同配置集的容器。
尽管有不同类型的配置，但是对于开发人员来说，装载一个卷是一个相当沉重的选择。对于您想要在不更改代码的情况下切换的功能设置来说，这很好——像`UnobtrusiveJavaScriptEnabled`这样的设置确实属于配置文件。但是针对每一个环境和每一个开发人员而改变的设置——比如`BingMapsKey`——应该有一个更简单的方法来设置它们。
理想情况下，您需要多层配置，从文件中读取，但可以选择使用环境变量覆盖值。这就是配置系统的工作原理.NET 核心，并且因为配置包在.NET Core 实际上是.NET 标准库，它们可以在经典中使用.NET 框架项目。
为了迎接更大的变化，我更新了本章的代码，以便使用.NET Core 配置模型的所有环境配置设置，如下面的代码所示。以前的文件`appSettings.config`和`connectionStrings.config`已经迁移到`appsettings.json`中新的 JSON 配置样式:
```
{
  "Homepage": {
    "Url": "http://nerd-dinner-hompage"
  },
  "ConnectionStrings": {
    "UsersContext": "Data Source=nerd-dinner-db...",
    "NerdDinnerContext": "Data Source=nerd-dinner-db..."
  },
  "Apis": {    
    "IpInfoDb": {
      "Key": ""
    },
    "BingMaps": {
      "Key": ""
    }      
  }
}
```
JSON 格式更容易阅读，因为它包含嵌套对象，所以您可以将类似的设置分组在一起，我已经用`Apis`对象完成了这一点。我可以通过使用键`Apis:BingMaps:Key`访问当前配置对象来获取代码中的必应地图应用编程接口键。我仍然将配置文件存储在一个单独的目录中，因此我可以使用一个卷来覆盖整个文件，但是我还将配置设置为使用环境变量。这意味着如果设置了名为`Apis:BingMaps:Key`的环境变量，该变量的值将覆盖 JSON 文件中的值。在我的代码中，我只引用配置键，在运行时.NET Core 从环境变量或配置文件中获取它。
这种方法允许我在 JSON 文件中使用数据库连接字符串的默认值，这样当开发人员启动数据库和 web 容器时，应用就可以使用，而不必指定任何环境变量。不过，这个应用并不是 100%正常运行的，因为必应地图和 IP 地理定位服务需要应用编程接口密钥。这些都是速率受限的服务，因此每个开发人员和每个环境都可能有不同的密钥，这些密钥可以用 web 容器中的环境变量来设置。
为了使环境值更安全，Docker 允许您从文件中加载它们，而不是在`docker container run`命令中用纯文本指定它们。隔离文件中的值意味着文件本身可以得到保护，因此只有管理员和 Docker 服务帐户可以访问它。环境文件是一种简单的文本格式，每个环境变量有一行，写成键值对。对于 web 容器，我的环境文件包含机密的 API 密钥:
```
Apis:BingMaps:Key=[your-key-here]
Apis:IpInfoDb:Key=[your-key-here]
```
要运行容器并将文件内容作为环境变量加载，可以使用`--env-file`选项。
Environment values still aren't secure. If someone gains access to your app, they could print out all the environment variables and get your API keys. The approach I'm using with a JSON file as well as environment variables means I can use the same application image in production with Docker secrets for configuration—and that is secure.
我已经将这些变化打包到新版的 NerdDinner Docker 映像中，您可以在`dockeronwindows/ch05-nerd-dinner-web:2e`找到。就像第三章、*中的其他例子一样.NET 框架和.NET 核心应用*，Dockerfile 使用引导脚本作为入口点，它将环境变量提升到机器级别，这样 ASP.NET 应用就可以读取它们。
新版 NerdDinner 网站在 Docker 中运行时使用以下命令:
```
docker container run -d -P `
 --name nerd-dinner-web `
 --env-file api-keys.env `
 dockeronwindows/ch05-nerd-dinner-web:2e
```
应用需要运行其他组件才能正确启动。我有一个 PowerShell 脚本，它用正确的选项以正确的顺序启动容器，但是在这一章结束时，这个脚本将变得笨拙。在下一章，当我看 Docker Compose 的时候，我会解决这个问题。
# 拆分创建晚餐功能
在`DinnerController`类中，`Create`动作是一个相对昂贵的数据库操作，不需要同步。这个特性很适合拆分成单独的组件。我可以从 web 应用发布消息，而不是在用户等待时将其保存到数据库中——如果网站负载很高，消息可能会在队列中等待几秒钟甚至几分钟才能被处理，但给用户的响应几乎是即时的。
要将特征拆分成一个新的组件，需要做两件工作。web 应用需要在创建晚餐时向队列发布消息，消息处理程序需要监听队列，并在收到消息时保存晚餐。在 NerdDinner 中，有更多的工作要做，因为现有的代码库是一个物理的整体，也是一个逻辑的整体——只有一个 Visual Studio 项目包含所有的东西，所有的模型定义以及用户界面代码。
在本章的源代码中，我添加了一个新的.NET 程序集项目调用`NerdDinner.Model`到解决方案，并将 EF 类移动到该项目，以便它们可以在 web 应用和消息处理程序之间共享。模型项目的目标是全部。. NET 框架，而不是.NET Core，所以我可以按原样使用现有的代码，并且我不需要将 EF 的升级纳入这个特性更改的范围。该选项将消息处理程序限制为完整的.NET 框架应用。
还有一个共享的汇编项目来隔离`NerdDinner.Messaging`中的消息队列代码。我将使用 NATS 消息系统，这是一个高性能的开源消息队列。NuGet 上有一个针对这些目标的 NATS 客户端包.NET 标准，所以两者都可以使用.NET 框架和.NET Core，我的消息传递项目有相同的客户端包。这意味着我可以灵活地编写其他不使用 EF 模型的消息处理程序.NET 核心。
在模型项目中，`Dinner`类的原始定义被大量的 EF 和 MVC 代码污染，以捕获验证和存储行为，就像下面对`Description`属性的定义一样:
```
[Required(ErrorMessage = "Description is required")]
[StringLength(256, ErrorMessage = "Description may not be longer than 256 characters")]
[DataType(DataType.MultilineText)]
public string Description { get; set; }
```
类应该是一个简单的 POCO 定义，但是这些属性意味着模型定义是不可移植的，因为任何消费者也需要引用 EF 和 MVC。为了避免在消息传递项目中出现这种情况，我定义了一个简单的`Dinner`实体，它没有任何这些属性，而这个类就是我用来在消息中发送晚餐信息的类。我可以使用`AutoMapper` NuGet 包在`Dinner`类定义之间转换，因为属性基本相同。
This is the sort of challenge you will find in lots of older projects—there's no clear separation of concerns, so breaking out features is not straightforward. You can take this approach to isolate shared components into new library projects. This is restructuring the code base without fundamentally changing its logic, which will help with modernizing the app.
`DinnersController`类的`Create`方法中的主代码现在将晚餐模型映射到干净的`Dinner`实体，并发布事件，而不是写入数据库:
```
if (ModelState.IsValid)
{
  dinner.HostedBy = User.Identity.Name;
  var eventMessage = new DinnerCreatedEvent
  {
    Dinner = Mapper.Map(dinner),
    CreatedAt = DateTime.UtcNow
  };
  MessageQueue.Publish(eventMessage);
  return RedirectToAction("Index");
}
```
这就是一劳永逸的消息传递模式。web 应用是生产者，发布事件消息。生产者不等待响应，也不知道哪些组件(如果有的话)将消费消息并对其采取行动。它是松散耦合且快速的，它将传递消息的责任放在消息队列上，这是它应该在的地方。
收听此事件消息是一项新功能.NET Framework 控制台项目在`NerdDinner.MessageHandlers.CreateDinner`。控制台应用的`Main`方法使用共享消息传递项目打开到消息队列的连接，并订阅这些晚餐创建的事件消息。当收到消息时，处理程序将消息中的`Dinner`实体映射回晚餐模型，并使用从`DinnersController`类的原始实现中获取的代码将模型保存到数据库中(并稍微整理一下):