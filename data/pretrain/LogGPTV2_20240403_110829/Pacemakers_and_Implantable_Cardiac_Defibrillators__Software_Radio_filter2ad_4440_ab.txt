wireless communications, beginning with RF signal analysis
and culminating in readable plaintext. Section IV discusses
replay attacks that compromise device integrity by changing
stored information or therapy settings. Section V extends the
discussion of zero-power defenses into the realm of device
design. Finally, Section VI offers concluding remarks.
II. BACKGROUND, MODEL, AND RELATED WORK
This section summarizes the characteristics and medical
usage of a modern implantable cardioverter deﬁbrillator. It also
introduces some of the equipment we used in our analyses.
Following this introduction, we construct a security model that
classiﬁes potential adversaries in terms of their capabilities.
Finally, we summarize previous research that motivates and
informs the methods and results of this work.
A. Implantable Cardioverter Deﬁbrillators (ICDs)
An implantable cardioverter deﬁbrillator (ICD) is a device
that monitors and responds to heart activity. ICDs have modes
for pacing, wherein the device periodically sends a small
electrical stimulus to the heart, and for deﬁbrillation, wherein
the device sends a larger shock to restore normal heart rhythm.
A physician surgically implants the ICD below the patient’s
clavicle and close to the skin (Fig. 1). The physician also
implants electrical leads that connect the ICD to the heart
muscle. Post-surgery, a health care practitioner can use an
external programmer to perform diagnostics, read and write
private data, and adjust therapy settings. A malfunctioning or
maliciously conﬁgured ICD could harm a patient in multiple
Fig. 1. Chest xray image of an implanted ICD (top right, near shoulder,
solid outline) and electrical leads connected to heart chambers (center of rib
cage, dotted outline).
ways, including by inaction (failure to deliver treatment when
necessary) or by extraneous action such as a command shock
when the heart is beating normally.
Magnetic switch. Inside the ICD is a magnetic switch.
A magnetic ﬁeld in proximity to this switch causes it to
close, which in turn causes the ICD to wirelessly transmit
telemetry data, including electrocardiogram (EKG) readings.
(We discovered, however, that we can activate transmission of
telemetry on our ICD solely with an RF command and without
the presence of a magnet; see Section IV.) In a clinical setting,
the magnetic ﬁeld comes from a magnet in the programming
head, which is the component of the programmer that is placed
in proximity to a patient’s implanted ICD. At the surface of
one programming head we measured this magnet at 700 gauss.
Wireless communications. Our ICD wirelessly communicates
with the external programmer using the 175 kHz band, which
is intended for short-range communications. Newer ICDs
can communicate at both the 175 kHz frequency and in
131
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:46 UTC from IEEE Xplore.  Restrictions apply. 
the 402–405 MHz Medical Implant Communications (MICS)
band [26], the latter intended for longer-range communica-
tions. One motivation for incorporating longer-range com-
munications in new ICDs is that doing so provides greater
ﬂexibility in both clinical and home settings; for example,
a patient’s ICD could transmit data to an at-home monitor
while the patient sleeps. (The speciﬁc communication ranges
in Section I and throughout this paper are for the commercial
ICD programmers we used in our experiments. We did not
experiment with increasing the communications ranges of the
ICDs.)
Diversity in IMDs. When considering implantable medical
device security and privacy, it is important to draw distinc-
tions between classes of devices that have different physical
properties and healthcare goals. This paper discusses ICDs and
pacemakers together because they are common devices with
overlapping functions and similar operating environments.
Designers of IMDs make design decisions based in part
on the fundamental properties of the problems the devices
address. Some IMDs, like modern ICDs and pacemakers, are
entirely self-contained with respect to power and connectiv-
ity. They are designed to last for several years, use non-
rechargeable internal batteries, and have no physical connec-
tions (e.g., tubes) outside the body. Other IMDs with compu-
tational capabilities are more exposed, like cochlear implants,
and are designed to last for the patient’s entire lifetime. Such
devices might utilize externally worn, rechargeable batteries
or, like insulin pumps, might have tubes leading outside the
patient. These external channels and recharging requirements
could potentially make such devices susceptible to human
error. While non-computational implantable devices exist, such
as artiﬁcial joints, this paper considers only those IMDs that
have computational capabilities.
B. Security Model
Our research focuses on evaluating and improving the secu-
rity and privacy of communication between ICDs and external
ICD programmers. We consider attacks by three classes of
adversaries (see also Table I):
• An adversary with a commercial ICD programmer, i.e.,
an external device commercially produced and marketed
for use with ICDs. At least for the programmers with
which we have experimented, there are no technological
mechanisms in place to ensure that programmers can be
operated only by authorized personnel.
• A passive adversary who eavesdrops on communications
between the ICD and a commercial programmer. This ad-
versary can record RF messages output by ICDs and pro-
grammers. This adversary might use standard or custom-
built equipment, including oscilloscopes, software radios,
ampliﬁers, and directional antennas.
• An active adversary who extends the passive adversary
with the ability to generate arbitrary RF trafﬁc, not nec-
essarily conforming to the expected modulation schemes
or FCC regulations. This attacker may interfere with
legitimate transactions or create spurious ones by, e.g.,
spooﬁng a commercial programmer.
For the purposes of this research we assume that ICDs are hon-
est and that they attempt to follow the protocols as speciﬁed;
we do not experiment with adversarial actions that employ
(possibly fake) ICDs to compromise or otherwise adversely
affect the operation of commercial programmers.
C. Related Work
Past research has investigated the challenges of manufac-
turing and providing safe computer-based medical treatments
in the presence of unintentional failures (e.g., accidents in
radiation treatments from the Therac-25 [16]). Our work from
the perspective of security and privacy investigates how to
provide safety and effectiveness in the presence of intentional
failures. In the more general study of medical device security,
some research focuses on securing patient data in a medical
database [22]. Work by Venkatasubramanian and Gupta [31]
has focused on pervasive health care security, including secu-
rity involving medical sensors. Our earlier work [10] surveys
a wide range of IMD security issues,
including the need
to balance IMD security and privacy goals with safety and
effectiveness goals. In contrast, our current study is based on
the systematic and pragmatic analysis of the security of a real,
commercial device.
There is also a body of research studying wireless security
in low-power environments, especially in the areas of sensor
networks [13], [23] and wireless body area networks [32]. In
contrast with these works, our zero-power security approaches
eliminate the stored-energy overhead of cryptography. Chae et
al. [2] also used RF power to implement RC5 on the WISP;
we leverage their work in the context of medical devices and
extend it with the new techniques of zero-power notiﬁcation
and zero-power human-sensible key exchange. A separate ap-
proach to our sensible key exchange uses physiological values
as keys [3]. The notion of plaintext key exchange via physical
contact appears in work by Stajano and Anderson [29]. Our
work extends that notion by allowing key exchange to occur
over an acoustic, rather than an electrical, channel.
Previous research, such as that of Goodrich et al. [8] and
McCune et al. [20], considered cryptographic operations, like
key agreement and authentication, that involved human action
directed by sensory input. Our work sets a different goal,
namely patient notiﬁcation as a side-effect of a cryptographic
operation, and accomplishes it
through a combination of
auditory and tactile feedback.
Finally,
there is work using software radios to receive
transmissions from commercial wireless protocols, such as
BlueSniff [28] and the A5 Cracking Project [15]. Our work
further demonstrates the utility of software radios by using
them to help reverse-engineer and then participate in previ-
ously unknown radio protocols. Earlier work that analyzed
radio transmissions of RFID-enabled credit cards [11] relied
on similar reverse-engineering techniques, but the radio was
built on a Gumstix embedded Linux system rather than on the
general-purpose Universal Software Radio Peripheral (USRP).
132
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:46 UTC from IEEE Xplore.  Restrictions apply. 
Transmissions from the programmer. In reverse-engineering
the programmer’s transmissions, we had an advantage: a
serial connection between the programmer device and the
programming head carries the raw bits to be transmitted. By
tapping this serial connection we were able to obtain these bits
for comparison with the encoded and modulated RF signals
output by the programmer’s radio.
Through spectral analysis of the programmer’s RF trans-
missions, we determined that it uses binary frequency shift
keying (2-FSK) as its modulation scheme. We conﬁrmed this
by demodulating bits from the RF trace and comparing the
results to the raw bits we collected on the serial line; we
found them to be identical. We also determined via standard
techniques that the length of a single symbol transmitted by
the programmer is 14 cycles of the center frequency, making
the symbol rate 12.5 kBd (i.e., 12 500 symbols per second).
Transmissions from the ICD. Reverse-engineering the ICD’s
transmissions was more difﬁcult because we did not have
access to a wire carrying raw bits. However, we knew that
the ICD transmits certain stored information, so we inserted
information in the ICD using the programmer (by, for ex-
ample, setting the patient name to a string of ‘A’s). We
analyzed the RF signal to identify phase shift-keyed bits and,
using our cribbed patient name, learned that the ICD uses a
modulation scheme known as differential binary phase shift
keying (DBPSK). We also determined that the symbol length
of ICD transmissions is two cycles of the carrier wave, making
the symbol rate 87.5 kBd.
Decoding. When we attempted to decode the demodulated
symbols, we looked for the cribs (known plaintexts) we had
inserted. We observed that transmissions from both ICD and
programmer are encoded under Non-Return-to-Zero Inverted
(NRZI) with bit stufﬁng. Section III-D2 explains this encoding
scheme and Fig. 5 shows an example of NRZI decoding.
B. Eavesdropping with a Commodity Software Radio
We built an eavesdropper using the Universal Software
Radio Peripheral (USRP) in concert with the open source GNU
Radio libraries. For the initial analysis in Section III-A, we
simply used programs included with GNU Radio to capture
and store received radio signals, then wrote code in Matlab
and Perl to analyze those signals. To eavesdrop in real time,
we integrated the necessary functions back into the C++ and
Python framework of GNU Radio. This section describes the
eavesdropping process in detail and shows the results of our
passive attacks.
Establishing a transaction timeline. Our ﬁrst step toward
understanding where and when to eavesdrop was to establish
a timeline for bidirectional conversations between the ICD
and the programmer; this timeline is shown in Fig. 4. We
established the timeline by interacting with the programmer
and capturing programmer and ICD transmissions on an
oscilloscope. We did not need to decipher these transmissions;
we were able to infer their meanings and some of their contents
by observing the order in which the programmer acquired
Fig. 2. Equipment used in our experiments. At top is a 4 GSa/s oscilloscope.
At bottom, from left to right, are: our eavesdropping antenna, an ICD, our
transmitting antenna (mounted on cardboard), and a USRP with a BasicTX
card attached.
III. INTERCEPTING ICD COMMUNICATIONS
We combined several reverse-engineering and eavesdrop-
ping techniques to intercept, understand, and extract infor-
mation from the communications between our ICD and a
commercial programmer. Our results show that wireless trans-
missions disclose private data.
We used two hardware tools to intercept the radio frequency
(RF) signals emitted by the ICD and the programmer: a record-
ing oscilloscope and a Universal Software Radio Peripheral
(USRP) [5]. The oscilloscope is standard lab equipment; the
USRP is a programmable device that interacts with open-
source GNU Radio [30] libraries on a host PC. Section III-D1
describes the equipment in more detail and Fig. 2 shows a
picture.
A. Reverse-Engineering Transmissions
We began by capturing RF transmissions around 175 kHz.
Using an oscilloscope, we were trivially able to identify trans-
missions from our ICD and the commercial ICD programmer.
We saved traces from both the oscilloscope and the USRP. We
processed these RF traces in software (using Matlab and the
GNU Radio toolchain) to recover symbols, then bits. Finally,
by analyzing these bits we discovered key aspects of the ICD’s
protocols and the data that it and the programmer transmit.
The physical layer. Before we could analyze protocols at the
application layer, we needed to determine the data bits that
corresponded to the raw electromagnetic signals in the traces
we obtained with the oscilloscope and USRP. For complete-
ness, Section III-D2 discusses radio terminology and describes
the process of extracting bits from RF traces. We determined
that the ICD and the programmer share an encoding scheme
but use different modulation schemes. Fig. 3 shows segments
of the transmissions we examined.
133
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:12:46 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 3. Demodulating received programmer (left) and ICD transmissions. The top plot in each ﬁgure shows the phase of the raw RF signal, downconverted
from 175 kHz to baseband. Both 2-FSK and DBPSK encode data by the phase change of the signal, pictured in the middle row. The ﬁnal row shows the
decoded bits: in 2-FSK the bit is determined by the sign of the phase change, and in DBPSK by whether it is closer to 0 or π. Note that there are fewer bits
than samples; our 500 kHz sampling rate generates 40 samples per programmer symbol and about 6 per ICD symbol.
Fig. 4. Timeline of a conversation between an ICD programmer and an ICD. If a programmer is present it will acknowledge each packet automatically.
When told by an operator to do so, the programmer asks the ICD for identifying information, which the ICD provides. The programmer then interrogates the
ICD for patient data, which the ICD provides. Other commands (such as ICD programming commands) and their responses follow.
information about the ICD. We used the timeline to determine
which transmissions to inspect using GNU Radio and our own
tools.
Using GNU Radio. One builds a GNU Radio program by
assembling digital signal processing blocks into an information
ﬂow graph that connects a source to a sink. If a suitable
hardware device such as a USRP is attached, source and
sink blocks can represent radio interface cards. Intermediate
blocks perform signal and data processing steps. Because
transmissions from ICDs and ICD programmers differ greatly
in amplitude, because their modulation schemes differ, and
because we wanted to assess our ability to eavesdrop on the
two sides separately, we developed a slightly different GNU
Radio receiver for each end. See Section III-D3 for more
details regarding one of those receivers.
An example illustrates the relative ease with which one
can develop a GNU Radio block: while inspecting demod-
ulated and decoded traces in search of patterns, we dis-
covered byte sequences that appeared to be packet delim-
iters (1000000 for end-of-packet and 1111110000001
for beginning-of-packet). We built a GNU Radio block to
packetize bitstreams and gather data about
the resulting
packets. This block is logically simple and was adapted
from similar functionality in the GNU Radio library. The
complexity of this change was modest: we removed 87 of
166 total
lines of C++ code (discounting comments and
whitespace) from gr.correlate_access_code_bb and
gr.framer_sink_1, and added 44 lines of code. For
perspective, the C++ source ﬁles for the other blocks used