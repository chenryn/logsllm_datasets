### Game 4
In this game, we randomly select the target session oracle \( t \) and abort if \( A \) and its partner \( \pi_B \) do not attempt to win against this guessed pair. Thus, we have:
\[ \text{Adv}_4 \geq (\eta_p \eta_s)^{-2} \cdot \text{Adv}_3. \]

We then proceed by game-hopping based on whether \( A \) attempts to win by breaking correctness, authentication, or key indistinguishability. Therefore, we can decompose the advantage as follows:
\[ \text{Adv}_4 = \text{Adv}_{\text{correct}}^4 + \text{Adv}_{\text{key-ind}}^4 + \text{Adv}_{\text{auth}}^4. \]

### Advantage Against Correctness
This step is straightforward.

### Advantage Against Authentication

#### Game 5
In this game, we abort if \( A \) successfully forges the Diffie-Hellman (DH) public keys \( PK_a \) and \( PK_b \). To forge these public keys, \( A \) must guess all 20 bits of the passkey \( r \). Considering \( \pi_A \) in both the initiator and responder roles, we have:
\[ \text{Adv}_{\text{auth}}^5 \leq 2^{-|r|+1}. \]

#### Game 6
In this game, we replace \( \text{DHKey} = [SK_a]PK_b = [SK_b]PK_a \) with a uniformly random value \( \hat{\text{DHKey}} \). By the Elliptic Curve Decisional Diffie-Hellman (EC-DDH) assumption, \( A \) cannot distinguish this change. Thus, we have:
\[ \text{Adv}_{\text{auth}}^5 \geq \text{Adv}_{\text{auth}}^6 - \text{Adv}_{\text{EC-DDH}}. \]
\[ \text{Adv}_{\text{auth}}^6 \geq \text{Adv}_{\text{auth},C1}^6 + \text{Adv}_{\text{auth},C2}^6. \]

We continue the proof by separating two sub-cases based on the test session’s role: initiator (C1) or responder (C2).

#### Case 1: \( \pi_A \) as Initiator

##### Game 7
In this game, we abort if \( A \) succeeds in forging:
\[ E_b = \text{HMAC}(\hat{\text{DHKey}}, N_b \| N_a \| r_a \| \text{IOcapB} \| B \| A), \]
or any other values that cause \( A \) to accept maliciously. We bound this ability by the Strong Unforgeability under Chosen Message Attack (SUF-CMA) security of HMAC. Thus, we have:
\[ \text{Adv}_{\text{auth},C1}^7 \leq \text{Adv}_{\text{SUF-CMA}}^{\text{HMAC}}. \]

##### Game 8
In this game, we abort if \( A \) succeeds in forging any of \( B \)'s nonces or \( B \)'s role, causing \( A \) to accept maliciously. From Game 7, we know that \( A \) does not succeed in forging \( N_b \). This allows us to bound this ability by the security of the hash function \( H \). Thus, we have:
\[ \text{Adv}_{\text{auth},C1}^8 \leq \text{Adv}_{\text{sec-pre}}^H. \]

By Game 8, we have matching session identifiers (SID) because \( A \) cannot forge \( \pi_A \).sidu. Therefore, via Definition III.4, our session oracles are partnered, and we have:
\[ \text{Adv}_{\text{auth},C1}^8 = 0. \]

#### Case 2: \( \pi_A \) as Responder
This case follows similarly to Case 1.

### Advantage Against Key Indistinguishability

#### Game 9
In this game, we replace \( LK \) with a uniformly random value \( \hat{LK} \). By the EC-symmetric-secure single-session Pseudo-Random Function (PRF)-One-Derived Key (ODH) assumption, \( A \) cannot distinguish this change. Thus, we have:
\[ \text{Adv}_{\text{key-ind}}^5 \geq \text{Adv}_{\text{key-ind}}^4 - \text{Adv}_{\text{EC-sym-ssPRF-ODH}}. \]

Since the session key of our test oracle is now uniformly random, we conclude:
\[ \text{Adv}_{\text{key-ind}}^5 = 0. \]

### Theorem VI.4
SHM Dual Passkey Entry is CYBORG-CompUser[iu,ru,ui,ur]-secure under the EC-symmetric-secure single-session PRF-ODH and EC-DDH assumptions, the security of \( H \), and the SUF-CMA security of HMAC.

### Responder-Generated Passkey
Analysis results for the SHM Responder-Generated Passkey Entry protocol are as follows, covering all variants under the CYBORG security model. The proof follows similarly to that of Theorem VI.1 in Appendix C-A. Due to space constraints, details are left to the full version.

### Theorem VI.2
SHM Responder-Generated Passkey Entry is:
- CYBORG-UncUser-secure under the EC-symmetric-secure single-session PRF-ODH and EC-DDH assumptions, the security of \( H \), and the SUF-CMA security of HMAC.
- CYBORG-CompUser[x]-secure for \( x \in \{[iu], [ur], [iu, ur]\} \).
- Not CYBORG-CompUser[x]-secure for \( x \in \{[ru], [ui], [iu, ru], [iu, ui], [ru, ui], [ru, ur], [ui, ur], [iu, ru, ui], [iu, ru, ur], [iu, ui, ur], [ru, ui, ur], [iu, ru, ui, ur]\} \).

### User-Generated Passkey
Analysis results for the SHM User-Generated Passkey Entry protocol are as follows, covering all variants under the CYBORG security model. The proof follows similarly to that of Theorem VI.1 in Appendix C-A. Due to space constraints, details are left to the full version.

### Theorem VI.3
SHM User-Generated Passkey Entry is:
- CYBORG-UncUser-secure under the EC-symmetric-secure single-session PRF-ODH and EC-DDH assumptions, the security of \( H \), and the SUF-CMA security of HMAC.
- CYBORG-CompUser[x]-secure for \( x \in \{[iu], [ru], [iu, ru]\} \).
- Not CYBORG-CompUser[x]-secure for \( x \in \{[ui], [ur], [iu, ui], [iu, ur], [ru, ui], [ru, ur], [ui, ur], [iu, ru, ui], [iu, ru, ur], [iu, ui, ur], [ru, ui, ur], [iu, ru, ui, ur]\} \).

### Dual Passkey
Analysis results for the SHM Dual Passkey Entry protocol are as follows, covering all variants under the CYBORG security model. Proof details can be found in Appendix C-B.

### Implications
SHM Passkey Entry achieved similar security across all versions, with variations only in the CompUser[x] setting. The various results provide insight into the types of attacks that Passkey Entry in its current construction can defend against. Gaining control of the device display used to generate the passkey or the device input of the passkey receiver is fatal to protocol security. This holds true for all current versions of Passkey Entry and points to the motivation behind DPE, which ensures that there is always a part of the "whole" passkey that the adversary cannot replace, regardless of the device's initiator/responder role. By Bluetooth specification, secrecy on the UtD channel is essential; thus, while the adversary can forge one \( r \) value, it may not read either one. With both devices generating passkeys, the adversary cannot leverage its corruption queries to gain knowledge of the target session's passkey(s). These security guarantees do not allow for eavesdropping, which is reasonable under Passkey Entry requirements. This shows that one can create protocols achieving a greater degree of security than current methods with minimal increases in user involvement and reasonable device requirements. With the integrity of at least one of the passkeys ensured, devices can successfully authenticate the DH key exchange. As proven in Theorem VI.4, Dual Passkey Entry maintains CYBORG security despite the adversary's full capability to modify UtD messages and without requiring the user to generate random numbers.

### Conclusion
Human interaction in protocols presents an intriguing challenge for analysis, encompassing the two-sided issues of human-device teaming down to the cryptographic level. Although Passkey Entry in its current construction fails to meet our measure of a secure cyborg key exchange under any variant, we showed how minor modifications improved its capability to achieve a robust level of security. Furthermore, we introduced SHM Dual Passkey Entry, which provably provides defense against combined and advanced attacks that exploit corruption of displayed messages to users and user inputs to devices simultaneously. The Secure Hash Modification (SHM) presents a minor change reflective of normative practice in other real-world protocols, which do not rely on human interaction. We have shown that even such a minor change enables security under some CYBORG variants. The results, summarized in Table I, provide user and manufacturer guidance in the use of an SHM-modified Passkey Entry. In particular, although full CYBORG security cannot be achieved, other variants can be. Our results are not only relevant in the security they establish and design indications for such success but also in the classes of CYBORG insecurity they demonstrate for Passkey Entry. For example, from Table I, it is clear that a range of attacks exist on Passkey Entry in its current form. Notably, as shown in the table, Passkey Entry cannot be protected from the Tap n’ Ghost attack even under SHM (CompUser[iu,ui] and CompUser[ru,ur]). Using this work, any attack that can leverage a device display input/output according to the categories we have shown gains a blueprint for successful execution.