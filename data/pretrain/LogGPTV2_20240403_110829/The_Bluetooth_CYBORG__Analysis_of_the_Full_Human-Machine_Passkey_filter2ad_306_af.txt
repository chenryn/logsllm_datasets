Game 4. In this game we the guess the target session oracle,
t , uniformly at random, and abort if A
s , and its partner, πB
πA
does not attempt to win against this guessed pair. Thus we
have Adv4 ≥ (ηpηs)-2 · Adv3.
We then continue by game-hopping dependent on whether
A attempts to win by breaking correct, auth, or key-ind. Thus
we have Adv4 = Advcorrect
4 + Advkey-ind
+ Advauth
.
4
4
Advantage against correct. This step is straightforward.
Advantage against auth.
Game 5. In this game we abort if A succeeds in forging the DH
public keys P Ka, P Kb. To forge public keys, A must guess
all 20 bits of the passkey r. Accounting for πA
s in the initiator
4 − 2-(|r|−1).
and responder roles, we have Advauth
Game 6. In this game we replace DHKey = [SKa]P Kb =
[SKb]P Ka with the uniformly random value (cid:94)DHKey. By the
EC-DDH assumption, A is unable to distinguish this change.
Thus, we have Advauth
5 ≥ Advauth
5 − AdvEC-DDH
6 ≥ Advauth
(λ).
B1
7
6
6
.
+ Advauth,C2
6 = Advauth,C1
We continue the proof by ﬁrst separating two sub-cases
based on the test session’s role: initiator (C1) or responder
(C2). Thus we have Advauth
Case 1: πA
s .role = initiator.
Game 7. In this game we abort if A succeeds in forging
Eb = HMAC( (cid:94)DHKey, Nb(cid:107)Na(cid:107)ra(cid:107)IOcapB(cid:107)B(cid:107)A), Nb, B,
or IOcapB, and thereby getting A to accept maliciously. We
bound this ability by the SUF-CMA security of HMAC. Thus
we have Advauth,C1
Game 8. In this game we abort if A succeeds in forging any
of B’s nonces or B’s role, causing A to accept maliciously.
From Game 7 we have that A does not succeed in forging Nb.
This lets us bound this ability by the sec-pre security of H.
Thus we have Advauth,C1
− AdvSUF-CMA
HMAC,B2
≥ Advauth,C1
≥ Advauth,C1
− Advsec-pre
H,B3
By Game 8 we have matching sidu (A cannot forge
s .pid = B,
t .role. Thus via Deﬁnition III.4 our
Ca,i, Cb,i due to the correctness of HMAC), πA
t .pid = A, πA
πB
session oracles are partnered and we have Advauth,C1
Case 2: πA
s .role = responder. This case follows as in Case 1.
s .role (cid:54)= πB
= 0 .
(λ).
(λ).
6
8
7
8
Advantage against key-ind.
5.
In
the
this
uniformly
game we
replace LK
random value (cid:103)LK. By
=
s .role = initiator)
the
the EC-sym-ssPRF-ODH assumption, A
change. Thus we have
(λ), accounting
Game
HMAC(DHKey, Na(cid:107)Nb(cid:107)btlk(cid:107)A(cid:107)B) (if πA
with
hardness
is unable
− AdvEC-sym-ssPRF-ODH
Advkey-ind
5
s in either the initiator or responder role.
for πA
Since the session key of our test oracle is now uniformly
of
to distinguish this
≥ Advkey-ind
HMAC,B4
4
random, we conclude Advkey-ind
= 0.
5
The above proof demonstrates the CYBORG security of
Initiator-Generated Passkey Entry in the UncUser setting, con-
ditioned on the security of the underlying algorithms as well
12
as nonce length, passkey length, etc. Still, per Passkey Entry
speciﬁcation, the passkey has length |r| = 20. Consequently,
this result demonstrates that the actual security level is below
the simple guessing ability for 20 bits.
Theorem VI.4. SHM Dual Passkey Entry is CYBORG-
CompUser[iu,ru,ui,ur]-secure under the EC-sym-ssPRF-ODH
and EC-DDH assumptions,
the sec-pre of H, and the
SUF-CMA security of HMAC.
Since a EC-sym-ssPRF-ODH is a PRF-based security
notion (detailed in Section A) and as such may not appear
as a typical MAC security assumption, we comment here
on related work regarding the PRF security of HMAC [28].
HMAC was shown to be a PRF so long as its underlying
hash function was a PRF [6]. It has also been shown that
HMAC satisﬁes a strong notion of PRF-ODH security under
the random oracle model [11]. Thus the EC-sym-ssPRF-ODH
security assumption for HMAC is not out-of-scope.
Responder-Generated Passkey: Analysis results for the
SHM Responder-Generated Passkey Entry protocol are as
follows, covering all variants under the CYBORG security
model. The proof follows similarly to that of Theorem VI.1
in Appendix C-A. Due to space constraints, details are left to
the full version.
Theorem VI.2. SHM Responder-Generated Passkey Entry is
• CYBORG-UncUser-secure under
the EC-sym-ssPRF-ODH and EC-DDH assumptions, the
sec-pre of H, and the SUF-CMA security of HMAC.
• CYBORG-CompUser[x]-secure for
[x] ∈ {[iu], [ur], [iu, ur]} .
• not CYBORG-CompUser[x]-secure for
[x] ∈{[ru], [ui], iu, ru], [iu, ui], [ru, ui], [ru, ur], [ui, ur],
[iu, ru, ui], [iu, ru, ur], [iu, ui, ur], [ru, ui, ur],
[iu, ru, ui, ur]} .
User-Generated Passkey: Analysis results for the SHM
User-Generated Passkey Entry protocol are as follows, cover-
ing all variants under the CYBORG security model. The proof
follows similarly to that of Theorem VI.1 in Appendix C-A.
Due to space constraints, details are left to the full version.
Theorem VI.3. SHM User-Generated Passkey Entry is
• CYBORG-UncUser-secure under
the EC-sym-ssPRF-ODH and EC-DDH assumptions, the
sec-pre of H, and the SUF-CMA security of HMAC.
• CYBORG-CompUser[x]-secure for
[x] ∈ {[iu], [ru], [iu, ru]}.
• not CYBORG-CompUser[x]-secure for
[x] ∈{[ui], [ur], [iu, ui], [iu, ur], [ru, ui], [ru, ur], [ui, ur],
[iu, ru, ui], [iu, ru, ur], [iu, ui, ur], [ru, ui, ur],
[iu, ru, ui, ur]}.
Dual Passkey: Analysis results for the SHM Dual Passkey
Entry protocol are as follows, covering all variants under the
CYBORG security model.
Proof details can be found in Appendix C-B.
Implications: SHM Passkey Entry achieved similar secu-
rity across all versions, with variations only in the CompUser[x]
setting. The various results give insight into the type of attacks
Passkey Entry in its current construction can defend against.
Mainly gaining control of the device display used to generate
the passkey, or the device input of the passkey receiver is fatal
to protocol security. This holds true for all current versions
of Passkey Entry and points to the motivation behind DPE,
namely that by having both devices generate a passkey, there
is always a part of the “whole” passkey that the adversary
cannot replace, regardless of the device’s initiator/responder
role. By Bluetooth speciﬁcation, secrecy on the UtD channel
is essential (reﬂected in the CYBORG model); thus, while the
adversary can forge one r value, it may not read either one.
With both devices generating passkeys, the adversary can-
not
leverage its corruption queries to gain knowledge of
the target session’s passkey(s). We note that these security
guarantees do not allow for eavesdropping, which is reasonable
under Passkey Entry requirements. This shows that one can
create protocols achieving a greater of degree of security than
current methods with minimal increases in user involvement,
and reasonable to device requirements. With the integrity of at
least one of the passkeys ensured (by the fact that each device
generates a passkey), devices can successfully authenticate the
DH key exchange. As proven in Theorem VI.4, Dual Passkey
Entry maintains CYBORG security in spite of the adversary
having the full capability to modify UtD messages and without
requiring the user to generate random numbers.
VII. CONCLUSION
Human interaction in protocols presents an intriguing
challenge for analysis, encompassing the two-sided issues
of human-device teaming down to the cryptographic level.
Although Passkey Entry in its current construction fails to
meet our measure of a secure cyborg key exchange under
any variant, we showed how minor modiﬁcations improved its
capability to achieve a robust level of security. Furthermore, we
introduced SHM Dual Passkey Entry, which provably provides
defense against the combined and advanced attacks already in
existence that exploit corruption of displayed messages to users
and user inputs to devices simultaneously.
The Secure Hash Modiﬁcation presents a minor change
that
is reﬂective of normative practice in other real-world
protocols, which do not rely on human interaction. We have
shown that even such a minor change enables security under
some CYBORG variants. The results, summarized in Table I,
provide user and manufacturer guidance in the use of an SHM-
modiﬁed Passkey Entry. In particular, although full CYBORG
security cannot be achieved, other variants can be.
Our results are not only relevant
in the security they
establish and design indications for such success, but also
in the classes of CYBORG insecurity they demonstrate for
Passkey Entry. For example, from Table I it is clear that a range
13
of attacks exist on Passkey Entry in its current form. Notably,
as shown in the table, Passkey Entry cannot be protected from
the Tap n’ Ghost attack even under SHM (CompUser[iu,ui] and
CompUser[ru,ur]). Using this work, any attack that can lever-
age a device display input/output according to the categories
we have shown, gains a blueprint for successful execution.
[16] D. Damopoulos, G. Kambourakis, and S. Gritzalis, “From keyloggers to
touchloggers: Take the rough with the smooth,” Computers & security,
vol. 32, pp. 102–114, 2013.
[17] B. Dowling, M. Fischlin, F. G¨unther, and D. Stebila, “A Cryptographic
Analysis of the TLS 1.3 Protocol Candidates,” Cryptology ePrint
Archive, Report 2015/914.
REFERENCES
[1] D. Antonioli, N. O. Tippenhauer, and K. Rasmussen, “Bias: Bluetooth
impersonation attacks,” in Proceedings of the IEEE Symposium on
Security and Privacy (S&P), May 2020.
[2] D. Antonioli, N. O. Tippenhauer, and K. B. Rasmussen, “The KNOB
is broken: Exploiting low entropy in the encryption key negotiation
of bluetooth BR/EDR,” in 28th USENIX Security Symposium, USENIX
Security 2019, N. Heninger and P. Traynor, Eds. USENIX Association,
2019, pp. 1047–1061.
[3] Apple,
platform
security,”
“Apple
at
//manuals.info.apple.com/MANUALS/1000/MA1902/en US/
apple-platform-security-guide.pdf (2020/07/30), 2020.
Available
https:
[4]
J. Barnickel, J. Wang, and U. Meyer, “Implementing an Attack on
Bluetooth 2.1+ Secure Simple Pairing in Passkey Entry Mode,” in
TrustCom 2012, 2012, pp. 17–24.
[5] D. A. Basin, C. Cremers, and S. Meier, “Provably repairing
the ISO/IEC 9798 standard for entity authentication,” J. Comput.
Secur., vol. 21, no. 6, pp. 817–846, 2013.
[Online]. Available:
https://doi.org/10.3233/JCS-130472
[6] M. Bellare, “New proofs for NMAC and HMAC: security without
collision-resistance,” in Advances in Cryptology - CRYPTO 2006,
26th Annual International Cryptology Conference, Santa Barbara,
California, USA, August 20-24, 2006, Proceedings, ser. Lecture Notes
in Computer Science, C. Dwork, Ed., vol. 4117. Springer, 2006, pp.
602–619. [Online]. Available: https://doi.org/10.1007/11818175\ 36
[7] M. Bellare and P. Rogaway, “Entity Authentication and Key Distribu-
tion,” in CRYPTO ’93, 1993, pp. 232–249.
[8] E. Biham and L. Neumann, “Breaking the Bluetooth Pairing -
Fixed Coordinate Invalid Curve Attack,” Available at http://www.cs.
technion.ac.il/∼biham/BT/bt-ﬁxed-coordinate-invalid-curve-attack.pdf
(2019/08/22), Technion - Israel Institute of Technology, Tech. Rep.,
July 2018.
[9] C. Bisdikian, “An overview of the bluetooth wireless technology,” IEEE
Communications magazine, vol. 39, no. 12, pp. 86–94, 2001.
[10] Bluetooth Core Speciﬁcation, 5th ed., Bluetooth Special Interest Group
(SIG), December 2019.
[11]
J. Brendel, M. Fischlin, F. G¨unther, and C. Janson, “PRF-ODH:
Relations, Instantions, and Impossibility Results,” Cryptology ePrint
Archive, Report 2017/517.
[12] L. Cai and H. Chen, “Touchlogger: Inferring keystrokes on touch screen
from smartphone motion.” HotSec, vol. 11, no. 2011, p. 9, 2011.
[13] R. Canetti and H. Krawczyk, “Analysis of Key-Exchange Protocols and
Their Use for Building Secure Channels,” in Advances in Cryptology
- EUROCRYPT 2001, International Conference on the Theory and
Application of Cryptographic Techniques, Proceeding, 2001, pp. 453–
474.
[14] M. C. Carlos, J. E. Martina, G. Price, and R. F. Cust´odio, “An updated
threat model for security ceremonies,” in SAC ’13, Coimbra, Portugal,
March 18-22, 2013, pp. 1836–1843.
[15] R. Chang and V. Shmatikov, “Formal Analysis of Authentication
in Bluetooth Device Pairing,” Available at https://www.cs.cornell.edu/
∼shmat/shmat fcs07.pdf (2019/12/14), The University of Texas at
Austin, Tech. Rep., July 2007.
14
[18] B. Dowling and B. Hale, “There Can Be No Compromise: The Ne-
cessity of Ratcheted Authentication in Secure Messaging,” Cryptology
ePrint Archive, Report 2020/541.
[19] B. Dowling and K. G. Paterson, “A Cryptographic Analysis of the
WireGuard Protocol,” in Applied Cryptography and Network Security.
Cham: Springer International Publishing, 2018, pp. 3–21.
[20] C. M. Ellison, “Ceremony design and analysis,” IACR Cryptology ePrint
Archive, p. 399, 2007.
[21] C. Gehrmann, C. J. Mitchell, and K. Nyberg, “Manual authentication
for wireless devices,” RSA Cryptobytes, vol. 7, no. 1, pp. 29–37, 2004.
[22] K. Haataja and P. Toivanen, “Two practical man-in-the-middle attacks
on Bluetooth secure simple pairing and countermeasures,” IEEE Trans.
Wireless Communications, vol. 9, no. 1, pp. 384–392, 2010.
[23] B. Hale, “Computationally Modeling User-Mediated Authentication
Protocols,” IACR Cryptology ePrint Archive, p. 1239, 2019.
[24]
[25]
J. Høegh-Omdal, C. Kaya, and M. Ottensmann, “The strandhogg
vulnerability,” Available at https://promon.co/security-news/strandhogg/
(2019).
ISO, “Information technology – Security techniques – Key management
– Part 4: Mechanisms based on weak secrets.” International Organiza-
tion for Standardization, Tech. Rep., November 2017.
[26] T. Jager, F. Kohlar, S. Sch¨age, and J. Schwenk, “On the security of TLS-
DHE in the standard model,” in Advances in Cryptology - CRYPTO
2012 - 32nd Annual Cryptology Conference, Santa Barbara, CA, USA,
August 19-23, 2012. Proceedings, 2012, pp. 273–293.
[27] M. Jakobsson, “Method and apparatus for immunizing against ofﬂine