When the protocol processor encounters one of them while
playing the protocol, it activates/deactivates the tracer. We
thus ensure that as little noise as possible is recorded. In
order to be able to describe interactive elements in proto-
cols (such as for example the PING/PONG messages in the
IRC protocol), each atom can dynamically yield new atoms
in reaction to the state of the protocol run.
856an analysis module that – given the list of decider func-
tions of a server application – tries to heuristically identify
such arguments. The module replays the diﬀerent protocol
runs and examines the stack at the entrance to the given
decider functions in a diﬀerential manner. The module thus
only works for calling conventions passing arguments on the
stack. The module distinguishes between data and point-
ers and tries to identify pointers by dereferencing values in
memory and checks if the resulting address resides in the
same type of memory for each protocol run. Thereby, the
module diﬀerentiates between the following types of mem-
ory: stack, heap, and binary image. If a value in memory
is found to be pointing to the same type of accessible mem-
ory for each protocol run, it is assumed that it is in fact a
pointer. Otherwise it is assumed to be plain data. In this
case, the data is compared between all protocol runs.
In
case of any diﬀerence, the argument is marked as protocol
run speciﬁc. The analysis module follows alleged pointers up
to a certain level of depth. This way it is possible to identify
protocol run speciﬁc arguments passed inside of nested data
structures.
5. EVALUATION
To demonstrate the practical feasibility of our approach,
we evaluated our analysis framework Weasel with several
open and closed source server applications for diﬀerent pro-
tocols and platforms. The results are brieﬂy summarized
in Table 1. All applications were tested in a standard con-
ﬁguration. For the sake of simplicity, Weasel was limited
to only consider traces of login attempts for the following
cases: Valid username/valid password (valid-pw ) and valid
username/invalid password (invalid-pw ). In its default con-
ﬁguration, Weasel also considers the third case of an invalid
username. This can for example be useful for the detection
of backdoors triggering on certain usernames. The amount
of function call events in a single trace ranged from 3 (Busy-
Box Telnetd authentication) to 12,335 (ProFTPD command
dispatching). Due to space constraints, we discuss the test
results of only three server applications in more detail in the
following. For the other four applications, the test results
were satisfactory to the extent that Weasel correctly iden-
tiﬁed handlers and deciders of both the authentication and
the command dispatching process with little to no noise.
5.1 Detailed Analysis of SSH Servers
Due to their practical relevance, we ﬁrst focus on software
backdoors for SSH server implementations. The description
of our SSH protocol is limited to the SSH Authentication
Protocol (SSH-AUTH) according to RFC 4252 [38]. Other
aspects of the SSH protocol, such as the transport layer,
are not considered for our purposes. RFC 4252 speciﬁes the
following authentication methods for SSH-AUTH: password,
publickey, hostbased, and none. The corresponding protocol
speciﬁcation in Weasel treats these four methods as com-
mands.
5.1.1 OpenSSH (x64)
For OpenSSH we chose a version that was recently re-
ported by an antivirus vendor to have been found in the
wild containing the following backdoors [15]:
Figure 3: Scheme of the description of the FTP pro-
tocol (two commands) and the correspond compiled
script of the command HELP. Blocks not available
for privilege level NoAuth are dashed. Atoms are
gray. Virtual atoms are dark-gray.
Figure 3 schematically shows the description of two com-
mands of the FTP protocol: the command HELP accepts
none or one argument. Accordingly, it belongs to the strings
CmdArg0 and CmdArg1. As the command is available in
any session – unauthenticated as well as authenticated – it
belongs to all three privilege levels. In contrast, the com-
mand MKD belongs to the privilege levels Anonymous and
Authenticated, and solely the string CmdArg1 as it ex-
pects one argument and is only available in authenticated
sessions.
4.2 Analysis Modules
We implemented two analysis modules that work on the
results delivered by the A-WEASEL analysis algorithms de-
scribed in Section 3.
4.2.1 Function Pointer Table Identiﬁer
Many server applications written in C/C++ store com-
mand descriptors including pointers to handler functions in
central data structures such as arrays. We have implemented
an analysis module that scans the memory of a server appli-
cation at runtime for pointers to previously identiﬁed han-
dler functions. When the distance in memory between sev-
eral identiﬁed pointers to handler functions is of equal size,
we assume that a table of command descriptors was found
(compare [25, 31]). In the next step, we attempt to heuris-
tically determine the beginning and end of the respective
table. Once such a table is identiﬁed it is possible to check
for pointers to unknown command handlers and thus iden-
tify undocumented commands.
4.2.2 Differential Function Arguments Identiﬁer
There are several scenarios in which it might be desirable
to identify those arguments of a decider function that are
protocol run speciﬁc (see Section 3.3.1). A simple example
is a password validation function that expects (among other
not session speciﬁc arguments) pointers to both the user-
name and the password entered by a user. We implemented
Cmd: MKDCmd: HELPArgumentAction: Send (cmd)Auth: user/passAction: SendAction: RecvAction: Recv (banner)CmdArg1CmdArg0Action: Recv (reply)RECVPUSH_DATA "HELP\n"SENDRECVSTART_RECORDINGSTOP_RECORDINGCmd: HELPPriv.-Level: NoAuthString: CmdArg0Compile Cmd857Table 1: Overview of evaluation results for various server applications. The decision tree column describes
the calculated command dispatching and authentication decision trees in the form /.
Server
BusyBox Telnetd
Dropbear SSH
OpenSSH
ProFTPD
Pure-FTPd
Platform
MIPS32 (D-Link DIR-
300)
MIPS32 (Siemens Open-
Stage 40)
x64
MIPS32, x86, x64
x64
NcFTPD (closed source)
x86, x64
Dancer-IRCD
x64
Protocol
Telnet
Dec. Tree (Cmd, Auth)
1/0, 0/0
SSH-AUTH 3/9, 1/2
Remarks
Does not support Telnet
commands (IAC).
See Section 5.1.2
SSH-AUTH 2/2, 4/7 (monitor proc.)
See Section 5.1.1
FTP
FTP
FTP
IRC
2/3, 3/3 (slave proc.)
6/60, 5/37 (x64)
2/29, 1/11
4/40, 2/11 (x64)
2/28, 2/12
See Section 5.2
Results similar to un-
modiﬁed ProFTPD
Results similar to un-
modiﬁed ProFTPD
Command handler table
automatically identiﬁed.
X1 On startup, the server sends the hostname and port on
which it is listening to remote web hosts presumingly
controlled by the attackers.
X2 A master password enables logins under arbitrary ac-
counts without knowledge of the actual corresponding
passwords (password and keyboard-interactive authen-
tication).
X3 A master public key enables logins under arbitrary ac-
counts with knowledge of the corresponding private
key (publickey authentication).
X4 Credentials used in any successful login attempts are
sent to the remote web hosts (password and keyboard-
interactive authentication).
As no source code is publicly available for this malicious
version of OpenSSH, we had to limit our evaluation to the
x64 platform. Due to the privilege separating architecture
of OpenSSH [30], Weasel automatically generates decision
trees for two processes: a privileged process called monitor
and an unprivileged process called slave.
Authentication.
Backdoor X4 can be easily spotted from the decision tree
of the monitor process for the SSH password authentication
as depicted in Figure 4. The decision tree only contains
the decider functions located at virtual addresses 40B440h
(auth_password()), 420E20h (mm_answer_authpassword()),
412EB0h (auth_log()), and 40B390h (sys_auth_passwd())
in the binary ﬁle3. The scoring algorithms of Weasel rank
the decider auth_password() as most important. It leads to
ﬁve exclusive handlers for valid-pw that are all called from
the same handler basic block and implement backdoor X4.
Of these exclusive handlers, the one at addresses 43BF50h
can automatically be identiﬁed as highly suspicious, as it
(among others) statically calls the functions socket(), con-
nect() and write(). Manual analysis reveals that this han-
dler function attempts to send data to remote web hosts.
3The actual malicious binary ﬁle does not contain debugging
symbols and thus names of function cannot be obtained di-
rectly. For reasons of clearness, the names of functions of
interest for this paper were manually resolved by comparing
assembly code and OpenSSH source code.
Correspondingly, the handler function at address 43BAF0h
implements URL encoding of strings.
The basic block level decision tree of auth_password()
contains 13 deciders and two exclusive handlers for the valid-
pw protocol run (see Figure 4). While one of the handlers
contains backdoor X4 as described above, the other han-
dler is a legitimate virtual basic block induced by the condi-
tional assembly instruction SETNZ DL, which sets the return
value of the function according to the validity of the pass-
word. Of the 13 deciders in the basic block level decision
tree, eleven are cold. Most importantly, these cold edges are
related to the optional PAM authentication4, password ex-
piration handling and backdoor X2 (master password ). The
attacker implemented this backdoor by adding a short piece
of code at the beginning of auth_password(): each pass-
word to check is compared to a predeﬁned one. In case of
a match, the function returns, falsely indicating a successful
authentication to its caller. The backdoor is automatically
rendered inoperative by cutting (see Section 3.3.2) the cold
edges in auth_password(). As Weasel’s protocol descrip-
tion of SSH-AUTH does not cover the publickey authenti-
cation method, we cannot ﬁnd the backdoor X3. Note that
this is only a limitation of the current protocol description
as the implementations of backdoor X3 and backdoor X2
are very similar on assembler level. Weasel cannot be used
to identify backdoor X1 (notiﬁcation of remote web hosts
on startup), because it is designed to only examine the au-
thentication and command dispatching processes of server
applications.
The decision tree of the slave process is not depicted. It
consists of three deciders, two handlers for invalid-pw and
a single handler for valid-pw. As static analysis hints at
nothing suspicious in these functions, the slave process is
not further discussed here.
Command Dispatching.
As for the authentication, command dispatching in Open-
SSH stretches over a monitor and a slave process. For the
slave process, Weasel identiﬁes only the function at 414960h
(input_userauth_request()) as decider. Also, the deci-
4Code path related to PAM were not taken during testing, as
PAM was not enabled in our employed default conﬁguration.
8585.1.2 Dropbear SSH (MIPS32)
We examined a binary-only version of Dropbear SSH server
shipped as part of the ﬁrmware of the Siemens VoIP desk
telephone OpenStage 40. Function and basic block traces
were recorded remotely on the embedded hardware. We
were able to automatically and unambiguously identify im-
portant deciders and handlers in both the authentication
and the command dispatching process of the SSH server.
Authentication.
The rather small decision tree computed from the valid-pw
and invalid-pw protocol runs is depicted in Figure 5.
Figure 4: Decision tree for the password authentica-
tion in the monitor process of the malicious version
of OpenSSH. Functions are rectangles, basic blocks
are circles. Deciders are white, handlers for valid-
pw are gray, handlers for invalid-pw are dark-gray.
Cold edges are dotted.
sion tree of the slave process only contains exclusive han-
dler functions for the protocol runs of the commands pass-
word, publickey and none: 41BF00h (userauth_passwd()),
41CA50h(userauth_pubkey()) and 41BE20h (userauth_no-
ne()), respectively. These results suggests that the host-
based authentication method is disabled – a circumstance
that can be veriﬁed by manual analysis. Based on this re-
sults, Weasel’s analysis module that heuristically scans for
function pointer tables as described in Section 4.2 automat-
ically and unambiguously identiﬁes the correct address and
size of the command descriptor table in the .data section
of the binary ﬁle, spanning from virtual address 674678h
to 6746f8h. The table, which is deﬁned in the OpenSSH
source code under the identiﬁer authmethods, contains sim-
ple structures of three members (name, handler function,
enabled ﬂag) describing all available authentication meth-
ods of the server. Interestingly, the analysis module identi-
ﬁes two handler functions not contained in any of the col-
lected traces: 41BD40h(userauth_kbdint()) and 41B9F0h
(userauth_hostbased()). While the latter belongs to the
disabled authentication method hostbased, the former be-
longs to the well-known authentication method keyboard-
interactive which is not described in RFC 4252 (and suﬀers
as well from backdoors X2 and X4). This demonstrates the
ability of Weasel to identify handlers for unknown com-
mands. The decision tree of the monitor process contains
only the monitor-side handler function for the password au-
thentication method. We do not discuss it further due to
space restrictions.
Figure 5: Decision tree of the authentication process
of Dropbear SSH.
The only identiﬁed decider svr_auth_password() evalu-
ates the correctness of a password by a simple string com-
parison and, depending on the outcome, subsequently calls
one of the two identiﬁed handlers. No suspicious external
functions are reachable from either handler.
Command Dispatching.
The decision tree computed from the protocol runs cor-
responding to the four authentication methods of the SSH-
AUTH protocol contains three deciders, with recv_msg_user-
auth_request() ranking ﬁrst. From this decider, the only
exclusive handlers svr_auth_password() and svr_auth_pub-
key() are called, which belong to the password and the pub-
lickey authentication method, respectively. The application
does not contain exclusive handlers for the other authentica-
tion methods. As Dropbear SSH in general does not dispatch
commands via function pointer tables, Weasel does in this
case correctly not recognize any function pointer tables of
interest. The two identiﬁed exclusive handler functions were
not found to lead to any suspicious calls.
5.2 ProFTPD (x86, x64, MIPS32)
Graduate students from our group not related to this
project were asked to implement an arbitrary set of back-
doors for ProFTPD in addition to the real-world backdoor
of our running example. We have chosen ProFTPD since it
is a complex program (e.g., FTP is a non-trivial protocol,
it contains diﬀerent software modules, and there were real-
world attacks against this program) but still has a manage-
able code base. Altogether, eleven diﬀerent backdoors were
developed in a not supervised manner.
Seven out of these eleven backdoors interfere with the au-
thentication or command dispatching process of ProFTPD
and can thus theoretically be identiﬁed using Weasel. The
other four backdoors implement malicious functionality like
backdoor 2snprintf()sprintf()uname()0x43BF500x43BAF0backdoor 4 sys_auth_passwd()rank: 4thdecider BBs: 6handler BBs: 1auth_log()rank: 2nddecider BBs: 14handler BBs: 3auth_password()rank: 1stdecider BBs: 13handler BBs: 2record_failed_login()mm_get_keystate()mm_answer_authpassword()rank: 3rddecider BBs: 5handler BBs: 1send_msg_userauth_success()svr_auth_password()rank: 1stdecider BBs: 3handler BBs: 2send_msg_userauth_failure()859a covert out-of-band interactive shell that cannot be found
by applying the described detection approach. We thus eval-
uate Weasel on the following set of backdoors containing
the seven artiﬁcial backdoors and our running example:
Y1 Acidbitchez : our real-world running example.
Y2 Happy hour : at a certain time of day all passwords are
accepted by the server.
Y3 Blessed one: for a certain client IP address all pass-
words are accepted.
Y4 File access: hidden commands for unauthorized ﬁle