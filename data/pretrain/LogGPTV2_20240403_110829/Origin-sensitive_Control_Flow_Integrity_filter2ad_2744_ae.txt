larger ECs than those by call-site sensitivity. OS-CFI similarly
prefers context insensitivity over call-site sensitivity. ICTs
that SUPA failed to resolve are also context-insensitive. The
majority of the largest ECs in the context-insensitive ICTs
come from the problems in SUPA. We expect OS-CFI to
substantially break down most of these ECs once the problems
in SUPA are resolved.
Next, we present a few case studies to illustrate how OS-CFI
can successfully break down largest ECs in some programs of
SPEC CPU2006.
6Table 3 and 4 cannot be compared directly because Table 4 includes the
ICTs SUPA failed to resolve while Table 3 does not.
4.1.1 Case Studies
Largest EC in 471.omnetpp: Fig. 5 shows the virtual call in
471.omnetpp with the largest number of targets – 35 targets
in context-insensitive CFG. The related ICT is located in
Line 5, which calls the virtual destructor declared in Line
10. Unlike constructors, destructors in C++ can be called
virtually. cObject is the root class in 471.omnetpp. It is
inherited by many other classes, such as CModuleType (Line
12) and cArray (Line 17). Interestingly, cArray is a container
of cObject even though itself is a sub-class of cObject.
cArray has a clear function that calls discard on every
contained object, which in turn calls the virtual destructor.
Clearly, the ICT in Line 5 can target any virtual destructor of
cObject’s sub-classes.
OS-CFI deﬁnes an origin for each location where an object
of cObject or its sub-class is created. Because the constructor
in C++ cannot be virtually called, each origin is associated
with exactly one class. As such, OS-CFI can uniquely identify
the speciﬁc destructor to be called; i.e., it can enforce a perfect
CFI policy at Line 5 since the EC size is 1.
Largest EC in 483.xalancbmk: The ICT with the largest
EC size in 483.xalancbmk is a C-style indirect call (Fig. 6,
Line 11). The function pointer is deﬁned in Line 4 as a private
member of XMLRegisterCleanup. As such, it can only be
set by function registerCleanup (Line 6). In Line 15 and
16, two objects of XMLRegisterCleanup are created. They
register the cleanup function at Line 18 and 19, respectively.
The ICT at Line 11 have a EC size of 38. Since this is a C-
style ICT, the origin is deﬁned as (CSo, Io). Io is the location
of the instruction that last writes to the function pointer (Line
7), while CSo is the call sites of the store function (Line 18
204    28th USENIX Security Symposium
USENIX Association
Figure 5: Virtual call with the largest EC in 471.omnetpp
Figure 7: The ICT with the largest EC in 456.hmmer
Markov Models) ﬁle. This model ﬁle can have diﬀerent
versions and formats identiﬁed by its magic number. As such,
the benchmark creates the HMMFILE structure with the parser
function pointer (Line 9 and 10), and assigns the function
pointer according to the model ﬁle’s magic (Line 14-27). The
function pointer is called at Line 31. In total, there are ﬁfteen
valid parsers.
Because HMMFileRead is called in the main function, call-
site sensitivity is not useful for this case at all because there is
just one call site. As such, OS-CFI applies the origin sensitivity
for this ICT. It creates an origin for each assignment to parser
(Line 15,18,21,24...). Therefore,OS-CFI can enforce a perfect
CFI policy for this ICT as well.
Figure 6: The ICT with the largest EC in 483.xalancbmk
and 19). As such, OS-CFI can enforce a perfect CFI policy
for this ICT with an EC size of 1.
Largest EC in 456.hmmer: 456.hmmer is a benchmark
to measure the performance of searching a gene sequence
database. It begins its execution by reading the HMM (Hidden
USENIX Association
28th USENIX Security Symposium    205
1classcObject{2protected:3voiddiscard(cObject*object){4if(object->storage()=='D')5deleteobject;6else7object->setOwner(NULL);8}9public:10virtual~cObject();11}12classcModuleType:publiccObject{13~cModule(){14delete[]fullname;15}16}17classcArray:publiccObject{18private:19cObject**vect;20public:21clear(){22for(inti=0;iowner()==this)24discard(vect[i]);25}26}27}1classXMLRegisterCleanup2{3private:4XMLCleanupFnm_cleanupFn;5public:6voidregisterCleanup(XMLCleanupFncleanupFn){7m_cleanupFn=cleanupFn;8}9voiddoCleanup(){10if(m_cleanupFn)11m_cleanupFn();12}13}14XMLTransService::XMLTransService(){15staticXMLRegisterCleanupmappingsCleanup;16staticXMLRegisterCleanupmappingsRecognizerCleanup;1718mappingsCleanup.registerCleanup(reinitMappings);19mappingsRecognizerCleanup.registerCleanup20(reinitMappingsRecognizer);21}1structhmmfile_s{2int(*parser)(structhmmfile_s*,3structplan7_s**);4};5typedefstructhmmfile_sHMMFILE;67HMMFILE*HMMFileOpen(char*hmmfile,8char*env){9HMMFILE*hmmfp;10hmmfp=(HMMFILE*)11MallocOrDie(sizeof(HMMFILE));12hmmfp->parser=NULL;1314if(magic==v20magic){15hmmfp->parser=read_bin20hmm;16returnhmmfp;17}elseif(magic==v20swap){18hmmfp->parser=read_bin20hmm;19returnhmmfp;20}elseif(magic==v19magic){21hmmfp->parser=read_bin19hmm;22returnhmmfp;23}elseif(magic==v19swap){24hmmfp->parser=read_bin19hmm;25returnhmmfp;26}27...28}29intHMMFileRead(HMMFILE*hmmfp,30structplan7_s**ret_hmm){31return(*hmmfp->parser)(hmmfp,32ret_hmm);33}34intmain(...){35if((hmmfp=HMMFileOpen(hmmfile,36"HMMERDB"))==NULL)37Die(...);38if(!HMMFileRead(hmmfp,&hmm))39Die(...);40}4.2 Security Experiments
We experimented with two real-world exploits and one syn-
thesized exploit to show how OS-CFI can block them.
4.2.1 Real-world Exploits
We experimented with two vulnerabilities, CVE-2015-8668
in libtiﬀ and CVE-2014-1912 in python. We used the existing
PoC exploits to overwrite a function pointer in order to hijack
the control ﬂow. We ﬁrst veriﬁed that the exploits work and
then tested them again under the protection of OS-CFI.
CVE-2015-8668: This is a heap-based buﬀer overﬂow
caused by an integer overﬂow. The program fails to sani-
tize the buﬀer size if the multiplication overﬂows (Fig. 8, Line
20). This causes the allocated buﬀer (uncomprbuf) to be too
small, allowing the attacker to overﬂow the heap memory. A
potential target of the attack is the TIFF object, which contains
several function pointers. One of such function pointers is
tif_encoderow, which is called by TIFFWriteScanline
later in the program.
Figure 9: Sketch of the vulnerable code in Python-2.7.6
28) before receiving the data into a Py_buffer object.
Py_buffer has a member of the type PyTypeObject, which
contains a function pointer tp_hash. tp_hash is used by the
PyObject_Hash function to hash objects. The buﬀer overﬂow
at Line 31 can be used to overwrite this function pointer.
Our algorithm identiﬁed the origin of tp_hash as Line
10 plus its call-site at Line 6. As such, origin sensitivity is
ineﬀective for the indirect call at Line 15 because there is only
one origin. Instead, 3-call-site sensitivity was used for this ICT.
We counted 40 immediate call sites to the PyObject_Hash
function. With three call-sites, we were able to limit the valid
targets to a single candidate for each valid call stack. Our
system also successfully prevented this exploit.
In both cases, OS-CFI not only blocked the exploits but also
constrained the vulnerable ICTs to a single target at run-time.
Figure 8: Sketch of the vulnerable code in libtiﬀ v4.0.6.
The indirect call at Line 3 was protected in OS-CFI
by origin sensitivity. OS-CFI identiﬁed twelve origins of
tif_encoderow with twelve diﬀerent targets. However, the
only origin recorded during this exploit was the one in
the _TIFFSetDefaultCompressionState function, and
the corresponding valid target was _TIFFNoRowEncode. Al-
though all twelve origins are possible for the ICT at Line 3,
the run-time context allowed us to uniquely identify the only
valid target. Our system successfully detected the exploit.
CVE-2014-1912: this buﬀer overﬂow in python-2.7.6 is
caused by the missing check of buﬀer size (Fig. 9, Line
4.2.2 Synthesized Exploit: a COOP Attack
We used the example code in Fig. 10 to demonstrate how
OS-CFI can detect both vTable hijacking and control-ﬂow
hijacking for C++ objects. The example was inspired by
PittyPat [14]. There are two virtual calls (Line 44 and 48)
and two vulnerable functions (getPerson and isEmployee).
The getPerson function contains a heap-based overﬂow,
which allows the attacker to compromise the returned object’s
vPtr pointer, for example, to overwrite Employee’s vPtr to
Employer’s vTable. The buﬀer overﬂow in isEmployee
can overwrite res to always return true.
OS-CFI prevented both exploits. The ﬁrst exploit was de-
206    28th USENIX Security Symposium
USENIX Association
1intTIFFWriteScanline(TIFF*tif,...){2...3status=(*tif->tif_encoderow)(tif,(uint8*)buf,4tif->tif_scanlinesize,sample);//tif_encoderow=_TIFFNoRowEncode;//tp_bases;4PyObject*b=PyTuple_GET_ITEM(bases,i);5if(PyType_Check(b))6inherit_slots(type,(PyTypeObject*)b);//tp_hash=base->tp_hash;//ob_type;14if(tp->tp_hash!=NULL)15return(*tp->tp_hash)(v);//getName());34...35if(Employee*emp=dyn_cast(member)){36if(emp!=NULL)37res=true;38}39returnres;//attackeroverwriteres40}41intmain(){42...43Person*member;44member=getPerson(id);4546//ifemployee,canonlyseehis/herevaluation47//ifemployer,canseelistofemployeeevaluation48member->seeEvaluation();//OTIprotected4950//onlyemployeehassalaryaccount51if(isEmployee(member))52member->seeSalary();//CFIprotected53}  0%  2%  4%  6%  8%  10%  12%  14%  16%perlbenchbzip2gccmcfmilcnamdgobmkdealIIsoplexpovrayhmmersjenglibquantumh264reflbmomnetppastarsphinx3xalancbmkNGINXAverage_allAverage_ex Performance Overheadw/o TSXw/ TSXBenchmark
400.perlbench
401.bzip2
403.gcc
433.milc
445.gobmk
456.hmmer
458.sjeng
464.h264ref
444.namd
447.dealII
450.soplex
453.povray
471.omnetpp
473.astar
483.xalancbmk
NGINX
Average
SUPA (s) OS-CFI (s) Overhead
6083.2
445.8
53029.1
3.9
4071.5
10.9
2.6
372.1
15.6
651.5
1280.7
4633.9
43929.0
1.4
9703.7
39860.2
10255.9
6350.7
457.2
56231.7
4.0
4246.4
11.8
2.6
382.0
16.7
673.8
1340.2
5304.0
45351.5
1.5
10792.6
41630.7
10799.8
4.4%
2.6%
6.0%
2.6%
4.3%
8.3%
0.0%
2.7%
7.1%
3.5%
4.6%
14.5%
3.2%
7.1%
11.2%
4.4%
5.3%
Table 5: The analysis time of OS-CFI as compared to the
vanilla SUPA algorithm. The unit of the analysis time in the
table is seconds.
imprecision in both CFGs and enforcement mechanisms. For
example, some of them enforce a coarse-grained CFG [37,43],
making them vulnerable to attacks [13, 16]. Even precise
context-insensitive CFI systems may be vulnerable because of
their large EC sizes [6]. Compared to these systems, OS-CFI
is a context-sensitive CFI system. Its origin-based context can
eﬀectively break down large ECs, improving the security.
An eﬀective method to improve the precision of CFI is to
use the contextual information to diﬀerentiate sets of targets.
However, the addition of context imposes stringent demands
on the system design, leading to more trade-oﬀs and oppor-
tunities: ﬁrst of all, a context-sensitive CFI system requires
context-sensitive CFGs. It is well-known that context-sensitive
points-to analysis does not scale well. The situation has been
substantially improved with the recent release of SUPA [35].
However, scalable path-sensitive points-to analysis, needed
by systems like PathArmor and PittyPat, is still unavailable;
The second challenge is how to securely collect, store, and use
contextual information with minimal performance overhead.
In the following, we compare OS-CFI to three representative
context-sensitive CFI systems: PathArmor [38], PittyPat [14],
and µCFI [17]. Table 6 shows their key diﬀerences.
PathArmor, PittyPat and µCFI all use the recent execution
history recorded by Intel CPUs as the context, last branch
record (LBR) for PathArmor and processor trace (PT) for
the other two. LBR records only the last sixteen branches
taken by the process; while PT provides more ﬁne-grained
record of the past execution. Unlike MPX that can be accessed
directly in the user space, LBR and PT are privileged and only
accessible by the kernel. Transition into and out of the kernel
is an expensive operation. It is thus impractical to check these
records for each ICT. To address that, PathArmor enforces the
CFI policy at the selected syscalls; i.e., only a small part of the
program is protected. PittyPat and µCFI redirect the trace to
a separate process and verify the control ﬂow there. They can
verify all the ICTs but only enforce the results at the selected
syscalls. The drawback of this design is that the usable number
of CPU cores is eﬀectively reduced by half. Because all three
systems cannot enforce the CFI policy at every ICT, their focus
is to protect the other part of the system from attacks. OS-
CFI instead collects the context by inline reference monitors
protected by Intel TSX. It is a whole-program protection that
enforces the CFI policy at every ICT. In addition, all these
three systems require to change the kernel. OS-CFI uses the
stock kernel, whose general MPX support is suﬃcient.
OS-CFI derives its CFGs from a context-, ﬂow-, and ﬁeld-
sensitive static points-to analysis. However, PathArmor and
PittyPat enforce path-sensitivity. To the best of our knowledge,
there is no scalable path-sensitive points-to analysis available
(at least publicly). Both systems,as well as µCFI,instead utilize
on-line points-to analysis, based on the recorded context. The
design of µCFI is interesting in that it turns the constraint
data into indirect control transfers, which are recorded by PT.
This securely conveys the constraint data to the monitoring
process. Unfortunately, it seems that this usage puts too much
pressure on PT, causing PT to lose packets. This renders
µCFI unsuitable for large programs. Indeed, it cannot handle
the most demanding benchmarks in SPEC CPU2006, such
as gcc, omnetpp, and xalancbmk, and the benchmarks are
tested with the smaller train data, not the regular reference
data. OS-CFI focuses on reducing the EC sizes. PathArmor
and PittyPat are unlikely to achieve the same eﬀectiveness
because they use the execution history as the context. The
largest EC sizes will remain signiﬁcant because of the limited
incoming paths towards a ICT. For example, PittyPat reports
one large EC size of 218. The goal of µCFI is to enforce
unique target for each ICT. This is achieved by considering the
constraint data during veriﬁcation. However, the constraint
data can potentially be compromised before being captured
by µCFI, as mentioned in the paper [17]. This weakens its
security guarantee.
CPI is another closely related system. It can guarantee the
integrity of all code pointers in the program by separating them
and related critical data pointers in a protected safe memory
region [23]. As such, CPI can prevent all the control-ﬂow
hijacking attacks. Compared to CPI, OS-CFI achieves a similar
but slightly relaxed protection in the CFI principle (because
OS-CFI still allows some leeway to manipulate the control
ﬂow). OS-CFI uses the MPX table to store its metadata. This
usage can be applied in CPI as well to further improve its