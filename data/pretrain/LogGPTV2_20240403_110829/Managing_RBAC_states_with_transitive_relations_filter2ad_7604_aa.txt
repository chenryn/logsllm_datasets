title:Managing RBAC states with transitive relations
author:Chaoyi Pang and
David P. Hansen and
Anthony J. Maeder
Managing RBAC States with Transitive Relations
Chaoyi Pang, David Hansen, Anthony Maeder
eHealth Research Centre, CSIRO ICT Centre, Brisbane, QLD 4000, Australia
PI:EMAIL; PI:EMAIL; PI:EMAIL
ABSTRACT
In this paper, we study the maintenance of role-based ac-
cess control (RBAC) models in database environments us-
ing transitive closure relations. In particular, the algorithms
that express and remove redundancy from a component, a
RBAC state, and from conﬂict constraints. The transitive
closure relations on a RBAC state specify the reachability
among user groups, roles and from user groups to roles.
These relations can assist the process of authorization and
make some queries easier to answer. Paper [17] shows that
the transitive closure relations on a RBAC model can be
used to manage and maintain the model’s dynamic changes
in a simple and eﬃcient way. In this paper, we ﬁrstly show
that the transitive closure relations are natural byproducts
when formulating RBAC components. We then adapt the
conventional RBAC model to accord the inherent reachabil-
ity of a RBAC model. We show that the use of transitive
closure relations as the auxiliary relations for the mainte-
nance of a RBAC state alleviates the process of query eval-
uation, removing redundancy and the description of hierar-
chies. Thirdly, in the presence of conﬂict constraints, we
explain how conﬂicts can be expressed, checked and evalu-
ated under the existence of TC relations, in addition to the
removal of conﬂicts redundancy and ﬁnding inferred con-
ﬂicts. Lastly, we brieﬂy discuss the ﬁrst-order maintenance
operations.
All the algorithms for the maintenance are ﬁrst-order algo-
rithms with simple structures and can be implemented in
SQL.
Categories and Subject Descriptors
D.2.7 [Software Engineering]: Distribution and Mainten-
ance; G.2.2 [Mathematics of Computing]: Graph The-
ory; H.3.5 [Information Systems]: Online Information
Services; H.2.8 [Database Management]: Database Ap-
plications; F.2.0 [Theory of Computation]: General
General Terms
Permission to make digital or hard copies of all or part of this work
for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage
and that copies bear this notice and the full citation on the first page.
To copy otherwise, or republish, to post on servers or to redistribute
to lists, requires prior specific permission and/or a fee.
ASIACCS’07, March 20–22, 2007, Singapore.  
Copyright 2007 ACM 1-59593-574-6/07/0003…$5.00.
graph theory
Keywords
data integration, role-based access control, redundant, di-
rected acyclic graph (DAG), distributed database
INTRODUCTION
1.
Role-Based Access Control (RBAC) models
[8, 14, 20, 2]
have been widely investigated and accepted as an eﬀective
technique for access control. RBAC has been selected be-
cause it is policy-neutral and allows for scalable collabo-
ration whilst ensuring the separation of duties and other
constraints [18].
The essence of RBAC is the separation of the set of (user)
groups, roles and privileges [14]. Privileges are assigned to
roles rather than individual users; roles are created for vari-
ous job functions, and users are grouped and then assigned
to roles based on their qualiﬁcations and responsibilities.
This way, the task of specifying user authorization is di-
vided into three logically independent parts: one which as-
signs users to groups, one which assigns groups to roles and
one which assigns access rights for objects to roles.
In a
RBAC model, user groups, roles and privileges may have
hierarchical structures that are formulated on their inclu-
sive or implicative relationships and can be described by
directed acyclic graphs (DAGs). The full accessibility in a
RBAC model is designated through the collaboration of the
DAGs with directed assignments. For example, in a RBAC
model, a group can access a role if there exists a path from
the group to the role.
In a large system, access requests are frequent and there can
be many in a very short time. The processing of requests
need to check the reachability from groups to roles. This
can be regarded as a reachability problem and be illustrated
by using the transitive closure relations on groups and roles.
Obviously, the processing of the requests from scratch is ex-
pensive and ineﬃcient in practice. Furthermore, since the
changes to the speciﬁcations and requirements on RBAC
model are less frequent than access requests, pre-computing
the reachabilities and incrementally maintaining them on-
line under changes, such as adding a new group or updating
an existing role, can alleviate the processing of authorization
or rejection of requests.
Contributions: Paper [17] has studied the maintenance
of access role graphs in ﬁrst-order under the existence of
139
transitive closure (TC ) on roles as the auxiliary relation.
The method, which is extended from [16], is eﬃcient and
supports a wide range of updates on roles.
Continuing that work in this paper, we show similar ﬁrst-
order maintenance results of [17] on role graphs can be de-
rived for a RBAC state, which integrates a group graph, a
role graph and a privilege graph. In this paper, we ﬁrstly
indicate that TC relations are natural byproducts when gen-
erating a RBAC state. We then propose the RBAC model,
which is diﬀerent from the model of [2, 14, 15, 24] by revis-
ing the directed arcs on the role graph. We show that our
approach on a RBAC state alleviates the process of query
evaluation, removing redundancy and the description of hi-
erarchies. Thirdly, in the presence of conﬂict constraints, we
explain how conﬂicts can be expressed, checked and eval-
uated under the existence of TC relations, in addition to
the removal of conﬂict redundancy and ﬁnding inferred con-
ﬂicts. Lastly, we discuss the ﬁrst-order maintenance oper-
ations. With our approach, some queries can be easily for-
mulated, processed and maintained in a RBAC state. Ex-
ample queries include: ”which user groups have assigned a
certain privilege,” and ”what the set of maximal roles that
are assigned to a given user group is.” To the best of our
knowledge, we are not aware of other works that study the
same problems or study these problems in the same depth
as done in this paper.
As described in [2, 14, 15, 24], a RBAC model is normally
composed of three graphs (a group graph, a role graph and
a privilege graph) and two assignment authorization rela-
tions. Although composed with the same components, our
model tracks the reachability along directed arcs to repre-
sent assigned authorizations and integrates the set of groups,
roles and privileges in accordance to their hierarchies. In a
RBAC state, the algorithms on redundancy removal can be
described uniformly.
Rather than using policy-rule based approaches as in [13],
the algorithms provided in this paper are ﬁrst-order algo-
rithms with a simple structure. They ensure that TC re-
lations are maintainable with at most two consecutive join
operations [5, 16, 17] and can be implemented in SQL.
The practical and theoretical signiﬁcance of using ﬁrst-order
language for the maintenance of recursive database views
have been addressed in [6, 7, 10, 16, 19]. Such maintenance
methods guarantee a low parallel complexity1. Although
the incremental maintenance of DAG have been studied ex-
tensively in literature, the maintenance of the reachability
of a RBAC model in ﬁrst-order is more diﬃcult than the
maintenance of the graph in mathematical term as in [4]:
a simple update on a group or a role may lead to many
other updates as the reachability in RBAC is determined by
subsumptions/implications on nodes.
Incrementally managing access-role has been studied widely
[13, 14, 22, 25]. However, the main diﬀerence between
our approach and those previous is the use of TC relations
as the auxiliary relations and the use of ﬁrst-order (SQL)
1AC 0 data complexity. AC 0 is the class of problems that can
be solved using polynomially many processors in constant
time.
queries for the eﬃcient maintenance. With this strategy,
some queries on a RBAC state can be executed eﬃciently.
Most previous research conducted on the maintenance of
RBAC states have concentrated on the maintenance of a
role hierarchy rather than on the maintenance of the com-
plete RBAC state that includes the group, role hierarchies
and associated privileges. This papers work extends the re-
sults of [17] into a RBAC state.
Redundancy in a RBAC model can cause diﬃculty in main-
taining the model and may cause it to become error prone
[3, 14, 21]. In a large distributed integrated environment,
redundancy can result from inconsistent granting of autho-
rizations or update operations. Inconsistent granting of au-
thorizations can be on group-role pairs, role-privilege pairs
or on deﬁning conﬂict constraints. Previous research on re-
dundancy in RBAC models have mainly addressed redun-
dant arcs on the role graph and the assignment from group
to role, which we believe is rather thin and deserves more
thorough study. Redundancy cannot be fully explored by
considering a single component such as groups or roles. The
redundancy we have discussed includes redundant assign-
ments, redundant hierarchical relations, and redundant con-
ﬂict constraints. Redundant assignments can exist between
groups and roles or between roles and privileges. Redun-
dant hierarchical relations can be group pairs, role pairs or
privilege pairs. Papers of [1, 9, 11] are about the static al-
gorithms of ﬁnding a minimal subgraph from a graph that
keeps the reachability.
Diﬀerent kinds of conﬂicting interest/separation of duties
have been studied in [8, 14]. Conﬂict of interest refers to
the ability to inﬂuence or access information that would help
promote ones self interests. In this paper, we show how to
evaluate the various conﬂicts and how to ﬁnd redundant
conﬂicts in the existence of transitive relations.
The rest of the paper is organized as follows.
In Section
2, we give the notations and basic deﬁnitions. Section 3
shows how to build components of a RBAC state and how
to ﬁnd redundancy in each component. Section 4 intro-
duces a RBAC state. We also illustrate how to formulate
some commonly used queries and ﬁnd redundant group-role
assignments. Section 5 is about expressing and evaluating
conﬂict constraints in a RBAC state. Section 6 discusses
the incremental maintenance algorithms in a RBAC state,
and ﬁnally, Section 7 is the conclusion.
2. PRELIMINARIES
In this section we present some standard terminology of
graph theory, together with some necessary new notations
and deﬁnitions. We assume the reader is familiar with the
ﬁrst-order logic. The symbols used in this paper are sum-
marized in Table 1.
A directed graph is a pair G = (V, A), where V is a ﬁnite
set of nodes and A ⊆ V × V is a set arcs which are ordered
pairs. Arc (u, v) of G is denoted as u → v graphically. When
multiple graphs are present, we will use V (G) and A(G) to
represent V and A of the underlying graph G. A digraph
G(cid:48) = (V (cid:48), A(cid:48)) is a subgraph of G = (V, A) denoted as G(cid:48) ⊆ G,
if V (cid:48) ⊆ V and A(cid:48) ⊆ A.
140
Symbol
G = (V, A)
G(a, b)
GU , GR, GP
GM
g.U
r.P
LU R
LRP
CM
CS
CA
RedA(G)
TCG
|S|
(cid:98)S
Meaning
directed acyclic graph (DAG).
arc (a, b) is in G.
group, role and privilege graphs.