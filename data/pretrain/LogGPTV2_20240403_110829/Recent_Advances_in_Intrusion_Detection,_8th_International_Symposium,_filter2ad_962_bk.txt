execution enforcement using the model. Environment sensitivity affects both phases.
Figure 2 shows the overall architecture of our system, including how environment in-
formation is used in each phase. Analysis, at the left, occurs once per program or shared
object. The global model builder assembles all execution models into the single, whole-
program model. The panel on the right, execution monitoring, occurs every time the
program is loaded for execution.
The static analyzer builds a model of expected execution by reconstructing and an-
alyzing control ﬂows in a binary executable. The control ﬂow model that we construct
is the Dyck model, a context-sensitive model that uses a ﬁnite-state machine to enforce
ordering upon system-call events as well as correct function call and return behav-
ior [10]. The static analyzer encodes environment dependencies into the Dyck model.
Environment−Sensitive
Monitoring
Program
Execution
Environment
System Call
Sequence
Execution
Monitor
Accept or
Reject
Execution
Executable Analysis
Model Assembly
Binary
Program
Environment
Dependencies
Static Binary
Analyzer
Models &
Data−Flow
Summaries
Shared Object Analysis
Shared Object
Environment
Dependencies
System Call
Specification
Static Binary
Analyzer
Models &
Data−Flow
Summaries
Global
Model
Builder
Environment−Sensitive
Program Model
...
Shared Object Analysis
Shared Object
Environment
Dependencies
System Call
Specification
Static Binary
Analyzer
Models &
Data−Flow
Summaries
Fig. 2. Architecture
190
J.T. Gifﬁn et al.
void parse args(int argc, char **argv) {
char *tn = tempnam(getenv("TMP"), "Mx");
int execmode = 1;
char c;
unlink("/home/user/tmpfile");
while ((c = getopt(argc, argv, "L:")) != -1)
switch (c) {
case ’L’:
execmode = 0;
unlink(tn);
link(optarg, tn);
break;
}
if (execmode)
exec("/sbin/mail");
}
unlink
(?)
unlink
(?)
exec
("/sbin/mail")
link
(?,?)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Fig. 3. Example code, with calls to C library system-
call wrapper functions in boldface. Although we analyze
SPARC binary code, we show C source code for read-
ability. For conciseness, we omit error-handling code com-
monly required when calling C library functions.
Fig. 4. A ﬁnite-state machine model
of the code. System calls include ar-
gument restrictions identiﬁed by sta-
tic data-ﬂow analysis.
Environment dependencies describe the relationship between a value in the execution
environment and a variable in the program, as detailed further in Sect. 5.
A separate process, the runtime monitor, only allows process execution that matches
the program model. The monitor resolves environment dependencies in the Dyck model
given the actual environment in which the process is about to execute. By parsing the
program’s command line, its conﬁguration ﬁles, and the system’s environment vari-
ables, the monitor knows the execution environment when the operating system loads
the program. It prunes portions of the model corresponding to code unreachable in the
current environment by determining the directions that branches dependent upon the
environment will take. It similarly propagates environment values along dependencies
to update system-call argument constraints before the monitored process begins execu-
tion. The model used for execution veriﬁcation thus enforces restrictions arising from
environment dependencies.
Consider the example function in Fig. 3. Although the ﬁgure shows C source code
for readability, we analyze SPARC binary code in our experiments. This code uses
environment information in ways similar to many real programs. The getenv call
in line 2 returns the value of the environment variable TMP, which typically speci-
ﬁes the system’s directory for temporary ﬁles. The returned directory name is used by
the tempnam call to construct a ﬁlename in the temporary directory. The ﬁlename is
used by the link and unlink system calls in lines 11 and 12. The getopt function
call in line 7 parses options passed to the program via the command line and sets the
value of the C library global variable optarg. The option “–L” requires one argument,
optarg, that is passed as an argument to link at line 12. If the command line contains
the “–L” option, the case statement at line 9 will execute and the exec at line 17 will
not execute. If “–L” is not present, then the opposite holds: the exec will execute but the
code inside the case statement will be skipped.
Environment-Sensitive Intrusion Detection
191
Figure 4 shows the ﬁnite-state machine model constructed for parse args using ear-
lier static analysis methods [9, 10]. This model overapproximates the correct execution
of the function:
– The argument to both unlink calls is unconstrained, so an attacker could unde-
tectably delete any ﬁle in a directory to which the process holds write access. The
arguments are not statically recovered because the unlink at line 11 depends upon
a dynamic value, the environment variable TMP. Both unlink calls target the same
C library system-call wrapper function. Data-ﬂow analysis of the system-call argu-
ment will join the values propagating from both call sites, as in Fig. 1B. Joining the
statically recovered value from line 6 with the unknown value from line 11 forces
the analyzer to discard the known value.
– Both arguments to link are unconstrained because they are computed dynamically
from the execution environment.
– The two system calls inside the case statement and the exec system call are al-
ways accepted. In particular, all three calls would be accepted together. The branch
correlation that forces either the case statement or the exec to execute has been lost.
At ﬁrst glance, the exec call appears safe because static analysis can constrain its argu-
ment value. However, due to the overapproximations in the model described above, the
model accepts a sequence of system calls that will execute a shell process. The attack
ﬁrst issues a nop call [21] and then relinks the statically recovered ﬁlename to a shell
before the exec call occurs:
unlink(NULL); // Nop call
unlink("/sbin/mail");
link("/bin/sh", "/sbin/mail");
exec("/sbin/mail");
Note that the attack requires the initial nop call because the link transition in the
model is preceded by two unlink transitions.
Environment sensitivity and the static argument analysis presented in this paper re-
pair these imprecisions and produce a program model that better represents correct
execution. Context-sensitive encoding of system-call arguments will differentiate the
values passed from the two unique call sites to the unlink system-call wrapper, en-
abling recovery of the static argument at the line 6 call site even without recovering the
argument at line 11. Adding environment dependencies then produces the environment-
sensitive model shown in Fig. 5. The model is a template, containing dependencies that
must be resolved by the execution monitor.
The monitor instantiates the template model in the current environment. Suppose
the environment variable TMP is set to /tmp. For a command line without “–L”, the
unreachable case statement code is removed (Fig. 6A). For the command line “-L
/home/user/log”, the monitor will prune the unreachable exec call and constrain
possible values to the remaining system-call arguments (Fig. 6B). The model better re-
ﬂects correct execution in the speciﬁc environment. In both cases, the model prevents
the relinking attack previously described.
192
J.T. Gifﬁn et al.
unlink
("/home/user/tmpfile")
L−
L+
unlink
("[TMP]/Mx.*")
exec
("/sbin/mail")
link
("[L]", "[TMP]/Mx.*")
Fig. 5. The environment-sensitive model produced by the static analyzer. The model is a template,
containing environment dependencies that are resolved when the model is loaded. The symbols
L- and L+ are branch predicates that allow subsequent system calls when the command-line pa-
rameter “–L” is omitted or present, respectively. The value [L] is the parameter value following
“–L” on the command line. The value [TMP] is the value of the TMP environment variable.
unlink
("/home/user/tmpfile")
unlink
("/home/user/tmpfile")
unlink
("/tmp/Mx.*")
exec
("/sbin/mail")
link("/home/user/log", "/tmp/Mx.*")
(A)
(B)
Fig. 6. The environment-sensitive model, after the execution monitor has resolved environment
dependencies. System-call arguments are encoded with calling context, so different calls to un-
link enforce different arguments. String arguments are regular expressions. (A) When the com-
mand line does not contain “–L”, the code processing the option is pruned from the model.
(B) When “–L” is present, the exec call is unreachable and pruned.
4 System-Call Argument Analysis
Our analyzer attempts to recover system-call arguments that are statically known. It an-
alyzes data ﬂows within program code and into shared object code to determine how
arguments may be constrained. The execution monitor enforces restrictions on any re-
covered system-call arguments and rejects any system call that attempts to use incorrect
argument values.
4.1 Learning a Library API
The object code of a program is linked at two distinct times. Static linking occurs as part
of a compilation process and combines object code to form a single program or shared
object ﬁle. Runtime linking happens every time a program is loaded for execution and
links code in separate shared objects with the main executable. Static analyzers inspect
object code after static linking but before the ﬁnal runtime link. Our analyzer simulates
Environment-Sensitive Intrusion Detection
193
the effects of the runtime link to build models for programs whose code is distributed
among shared object ﬁles. This model construction has two primary steps.
First, we analyze all shared objects used by a program. We build models for the pro-
gram code in each shared object and cache the models on disk for future reuse. Our
program models include virtual memory addresses of kernel traps and function call
sites; however, the addresses used by shared object code are not known until runtime
linking occurs. The analyzer performs symbolic relocation for shared object code. Each
shared object is given its own virtual address space indexed at 0 that is strictly symbolic,
and all addresses used in models reside in the symbolic address space. When later en-
forcing a program model, our execution monitor detects the actual address at which
the runtime linker maps shared object code and resolves all symbolic addresses to their
actual virtual addresses.
Second, we analyze the binary executable of interest. The executable may call func-
tions that exist in shared object code. Our analyzer simulates the runtime linker’s symbol
resolution to identify the code body targeted by the dynamic function call. It reads the
cached model of the shared object’s code from disk and incorporates it into the pro-
gram’s execution model.
The separate code analysis performed for each shared object and for the main exe-
cutable complicates data-ﬂow analysis for system-call argument recovery. System calls
generally appear only within C library functions. Frequently, however, the argument
values used at those system calls are set by the main executable and passed to the C
library through some function in the library’s API. Separate analysis of the library code
and the main executable code precludes our previous static data-ﬂow analysis from re-
covering these arguments. The data ﬂow is broken at the library interface.
To remedy this problem, we now perform whole-program data-ﬂow analysis to track
data ﬂowing between separate statically linked object ﬁles. The analyzer ﬁrst learns
the API of a shared object. It initiates data-ﬂow analysis at system-call sites with type
information for the call’s arguments (e.g. integer argument or string argument). Data-
ﬂow analysis follows program control ﬂows in reverse to ﬁnd the instructions that affect
argument values. If any value depends upon a formal argument of a globally visible
function, then that function is a part of the API that affects system-call arguments. We
cache a data-ﬂow summary function [17] that characterizes how data ﬂows from the
API function’s entry point to the system-call site in the shared object. For example, one
summary function for the C library stipulates that the ﬁrst argument of the function call
unlink ﬂows through to the ﬁrst argument of the subsequent unlink system call.
When later analyzing an object ﬁle that utilizes a learned API, we continue data-
ﬂow analysis at all calls to the API. The analyzer attempts to statically recover the
value passed to the API call. By composing the cached data-ﬂow summary function
with data dependencies to the API call site discovered via object code analysis, we can
recover the argument value used at the system call inside the library.
4.2 Context-Sensitive Argument Recovery
Static argument recovery uses data-ﬂow analysis to identify system-call values that are
statically known. The analysis recovers arguments using a ﬁnite-height lattice of values
and an algebra that deﬁnes how to combine values in the lattice. The lattice has a bottom
J.T. Gifﬁn et al.
194
element (⊥) that indicates nothing is known about an argument because the argument
has not been analyzed. The top element ((cid:20)) is the most general value and means that
an argument could not be determined statically.
Argument values may reach a system call via multiple, different execution paths, as
shown in Fig. 1. The algebra of the lattice deﬁnes how to compute the value that will
ﬂow down the converged execution path. The join operator ((cid:21)) combines values. Our
previous static argument analysis [10] recovered arguments using a standard powerset
lattice P . For S the ﬁnite set of statically known strings and integers used by the pro-
gram, lattice values were elements of DP = P(S) with ⊥P = ∅ and (cid:20)P = S. The
algebra joined arguments with set union: A (cid:21)P B = A ∪ B for A and B any lattice
values. The value reaching the system-call site is the recovered argument.
Joins in lattice P diminish the precision of the analysis. The set union does not
maintain the association between an argument value and the execution path using that
value. As a result, an attacker can undetectably use a value recovered on one path on
any other execution path reaching the system call. Suppose a program opens both a
temporary ﬁle with write privileges and a critical ﬁle with read-only access. Even if
argument recovery can identify all arguments, the calling context is lost. The attacker
can use the write privilege from the temporary-ﬁle open to open the critical ﬁle with
write privilege as well.
Worse yet is the effect of values not recovered statically. If an argument cannot be
identiﬁed on one execution path, it takes the value (cid:20)P . At a point of converging execu-
tion, such as the entry point of a C library function, the join of (cid:20)P with any recovered
value A discards the recovered value because A (cid:21)P (cid:20)P = (cid:20)P . This makes intuitive
sense: when monitoring execution, the monitor cannot determine when a recovered
value should be enforced without knowing the calling context of the value.
We solve this imprecision by extending the lattice domain to include calling con-
text. Our new data-ﬂow analysis annotates the recovered string and integer values with
the address of the call site that passes the strings or integers as an argument. Stated
differently: we recover values using a separate powerset lattice for each calling con-
text. As a data value propagates through a call instruction, the analyzer annotates the