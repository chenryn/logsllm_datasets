55
 包装函数是指，为了更方便地使用函数或功能而编写的简单的函数。由于是在原函数外包裹了一层使其更容易使用，因此被称为包装函数。
56
http://tools.ietf.org/html/rfc5322
总结
本节讲述了与邮件发送功能相关的安全隐患。
由于多数反馈表单中都会使用发送邮件的功能，因此即便是几乎没有什么功能的应用主页也频频发生与邮件发送功能相关的安全隐患。另外，在网上搜索发送邮件的编程方法时，很容易搜到使用 sendmail 命令这类过时的方法，从而也极易引入安全隐患。
因此，为了避免引入安全隐患，学习 Web 应用中发送邮件的正确方法至关重要。
继续深入学习
为了深入理解与发送邮件相关的安全隐患，对邮件协议（特别是 SMTP）的理解不可或缺。而通过阅读相关的入门书等书籍来学习邮件协议，对解答乱码等问题也很有帮助。
这里向读者们推荐网野卫二所著的《3 分钟 HTTP& 邮件协议基础讲座》[3] 一书，此书同时也可以被作为 HTTP 的入门书使用。
邮件程序库中使用 SMTP 与邮件服务器通信的情况下，可能还会发生 SMTP 命令注入攻击。SMTP 命令注入攻击的实例请参考 NTT Communications 公司发表的《关于 .NET Framework 中的 SMTP Command Injection》[1] 一文。在 .NET Framework 中发送邮件时可能会需要用到文章中讲到的防范策略。
参考文献
[1] NTT Communications.（2011 年 1 月 11 日）. .NET Framework 上の SMTP Command Injection について（关于 .NET Framework 中的 SMTP Command Injection）. 参考日期：2011 年 1 月 21 日 . 参考网址：/http://www.ntt.com/icto/security/images/sr20110110.pdf
[2] 佐名木智贵 .（2007 年 3 月 27 日）. Security of WebAppli&Mail
 . 参考日期：2010 年 12 月 11 日 . 参考网址：http://rocketeer.dip.jp/secProg/MailSecurity001.pdf
[3] 网野卫二 .（2010）.《3 分间 HTTP ＆メールプロトコル基础讲座》（《3 分钟 HTTP& 邮件协议基础讲座》）. 技术评论社 .
4.10 文件处理相关的问题
Web 应用会通过多种多样的形式和文件打交道。而本节的主题就是处理文件时可能产生的 安全隐患。
在有些 Web 应用中，外界能够通过传入参数的形式来指定服务器中的文件名。比如由外界参数来指定模板文件的情况。这样的 Web 应用可能会招致以下攻击。
非法访问 Web 服务器内的文件（目录遍历）
调用 OS 命令（OS 命令注入）
其中，目录遍历漏洞将在 4.10.1 节中讲述。此外，通过目录遍历攻击有时还能够执行 OS 命令，不过这里我们将此问题归为 OS 命令注入的范畴并在 4.11 节中讲述。
另外，如果数据文件或配置文件被保存在公开目录中，就可能会被外界浏览而造成信息泄漏。详情将在 4.10.2 节中讲述。
4.10.1 目录遍历漏洞
概要
Web 应用中允许外界以参数的形式来指定服务器上的文件名时，如果没有对文件名进行充分的校验，就可能会造成意料之外的问题，比如文件被浏览、篡改或删除。该安全隐患被称为目录遍历漏洞。
目录遍历漏洞会造成以下影响。
浏览 Web 服务器中的文件
泄漏重要信息
篡改或删除 Web 服务器中的文件
篡改网页内容，散布谣言或恶意诽谤他人
布下圈套将用户诱导至恶意网站
删除脚本文件或配置文件导致服务器宕机
通过篡改脚本文件从而在服务器上执行任意脚本
目录遍历漏洞的防范策略如下，执行其中一项即可。
避免由外界指定文件名
文件名中不允许包含目录名
限定文件名中仅包含字母和数字
目录遍历漏洞总览
攻击手段与影响
下面我们就来看一下目录遍历攻击的手段与影响。
以下是能够使用 template= 的形式来指定页面模板文件的脚本。
代码清单 /4a/4a-001.php
菜单（以下略）
常量 TMPLDIR
 指定的是存放模板文件的目录名。模板文件名由查询字符串中的 template
 指定，并被赋值到变量 $tmpl
 中。脚本使用 readfile
 函数读取模板文件，然后将其原封不动地放到响应信息中。
下面为模板文件的示例。
代码清单 /4a/tmpl/spring.html
你好，已经是春天了呢。
通过以下 URL 执行脚本就能够读取上述模板文件。
http://example.jp/4a/4a-001.php?template=spring
图 4-92 示例脚本的执行例
此时，脚本中被拼接成的文件名如下所示。
正常情况下拼接成的文件名
/var/www/4a/tmpl/spring.html
接下来我们就来看一下如何对其展开攻击。使用以下 URL 执行示例脚本。
http://example.jp/4a/4a-001.php?template=../../../../etc/hosts%00
图 4-93 显示了 Linux 的配置文件内容
页面中显示的为 Linux 的配置文件 /etc/hosts 的内容。也就是说，通过目录遍历攻击能够浏览操作系统的配置文件。此时，脚本内被拼接成的文件名如下所示。其中 [NUL]
 为空字节（字符编码为 0 的字符）57
 。
57
 正如 1. 4.2 节中介绍的那样，空字节在 C 语言中表示字符串的结束。
攻击时拼接成的文件名
/var/www/4a/tmpl/../../../../etc/hosts[NUL]
.html
由于 ../ 表示上层目录，空字节又会迫使文件名字符串结束，因此，将此文件名标准化后，实际被访问的文件名即为如下内容。
标准化后的文件名
/etc/hosts
因此，最终页面显示的是 etc/hosts 文件的内容。
由此可见，一旦 Web 应用中存在目录遍历漏洞，攻击者就能够随意访问服务器上的任何文件。
不过上面的例子仅仅展示了读取文件的情况，其实，依据应用的内部实现，有时还能够进行覆盖或删除文件等操作，从而造成数据被篡改。
此外，一旦攻击者能够通过目录遍历来编辑 PHP 等脚本文件，就能将编辑后的脚本在 Web 服务器上运行，从而也就相当于能够执行任意脚本。这时攻击造成的影响与 OS 命令注入（参考 4.11 节）相同，即能使计算机下载恶意程序或对系统进行非法操作等。
专栏：从脚本源码开始的一连串的信息泄漏
通过目录遍历攻击访问 Web 服务器上的文件时需要知道文件名。虽然 /etc/hosts 是操作系统中固定的文件名，但由于一般来说第三方无法得知存储个人信息等文件的文件名，因此有人就会觉得不会有遭到攻击的风险。
然而，还有一种攻击手段为，先通过目录遍历攻击查看脚本的源代码，然后再使用 open 语句等来调查被指定文件的文件名。其中，在试验环境的“/4a/ 菜单”中点击“3. 4a-001: 目录遍历（脚本：显示源码）”链接，就能够查看脚本源码。执行后虽然浏览器上不会显示 PHP 的源码，但通过查看 HTML 的源码就能够确认 PHP 脚本。
安全隐患的产生原因
当应用满足以下 3 个条件时，就有可能产生目录遍历漏洞。
外界能够指定文件名
能够使用绝对路径或相对路径等形式来指定其他目录的文件名
没有校验是否允许访问拼接后的文件名
如果从开发者的角度来考虑的话，笔者觉得，漏洞的产生可能是因为开发者没有考虑到“外界能够指定其他目录”的可能性。
由于目录遍历漏洞的产生需要同时满足以上 3 个条件，因此，只要使其中任意一项无法满足也就能够将漏洞消除。
对策
概要中已经简单介绍过消除目录遍历漏洞的方法，即实施以下任一项。
避免由外界指定文件名
文件名中不允许包含目录名
限定文件名中仅包含字母和数字
下面我们就对以上方法进行详细说明。
避免由外界指定文件名
如果能够避免文件名由外界指定，就能从根本上解决目录遍历漏洞。具体方法有如下几种。
将文件名固定
将文件名保存在会话变量中
不直接指定文件名，而是使用编号等方法间接指定
而至于这些方法的具体操作，此处就不再逐一介绍。
文件名中不允许包含目录名
如果文件名中不包括目录名（包括 ../），就能确保应用中只能访问给定目录中的文件，从而也就消除了目录遍历漏洞产生的可能性。
表示目录的字符 /、\、: 等因操作系统而异，不同的操作系统应当采用不同的程序库。在 PHP 中则能够使用 basename
 函数。
basename
 函数会接收带有目录的文件名（也包括 Windows 的盘符），并返回末尾的文件名部分。例如 basename('../../../../etc/hosts')
 返回的结果即为 hosts。
利用 basename
 函数的对策示例如下所示。
代码清单 /4a/4a-001b.php
菜单（以下略）
专栏：basename 函数与空字节
PHP 的 basename
 函数在处理时不会删除空字节58
 ，因此，即使使用了 basename
 函数也还是有可能会出现文件扩展名被更改的情况。比如，假设以下脚本中的扩展名被指定为 txt。
$file = basename($path) . '.txt';
这时，如果外界传入的文件名为 a.php%00（已经过百分号编码），就会生成如下文件名。
图 4-94 上述脚本生成的文件名
然而，由于 Windows 或 Unix 等多数操作系统中都使用 C 语言形式的字符串，因此文件名中有空字节（\0）时就会被视为文件名结束。这样一来，实际打开的文件就变成了 a.php，应用中指定的 txt 扩展名则被忽略了。
由此可见，文件名由外界传入的情况下，有必要对文件名进行校验以确保其中不包含空字节。
限定文件名中仅包含字母和数字
如果能够限制文件名的字符种类仅为字母和数字，那么用于目录遍历攻击的字符就会无法使用，因此这个方法也能作为目录遍历的防范策略。
下面我们就来尝试在 4a-001.php 中实施这一方法，如下所示。
代码清单 /4a/4a-001c.php
菜单（以下略）