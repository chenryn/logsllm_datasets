executing the data clone procedure, Poirot collects information
including the accessed user data, the invoked system APIs (espe-
cially those related to network I/O and cryptography) and the used
parameters, as well as the involved permissions (app permissions
and SEAndroid types).
Since some models of Android mobile phones cannot be rooted,
we install the universal version of the data clone app5 on a rooted
mobile phone (solution of challenge 2). Although the universal data
clone app is not granted signature permissions to access the spe-
cific sensitive data, user data (e.g., contacts information) that are
protected by dangerous and normal permissions are still accessi-
ble. Poirot can obtain adequate information for further analysis
because the data transmission protocol for data transfer is the same.
3.3.3 Network Inspection. Through the network inspection compo-
nent, Poirot monitors network traffic between two Android mobile
phones relying on the tcpdump data-network packet analyzer [2].
For the mobile phones that cannot be rooted, the universal versions
of the data clone apps are installed on the other rooted mobile
phones for data transmission. If the universal version is not pro-
vided, we run the data clone apps on two unrooted Android phones
to execute the data clone procedure and then leverage Poirot
to intercept network packets by launching an address resolution
protocol (ARP) spoofing (solution of challenge 3). The captured
network packets are analyzed and modified by a laptop through
the man-in-the-middle attack.
To reduce noise, Poirot drops ARP, DNS, and ICMP packets
from the captured network traffics because data transmission over
the private Wi-Fi LAN does not need these protocols. For data
transmission that use common protocols, such as HTTP, FTP, and
WebSocket, Poirot parses the packets with the help of Wireshark [9].
Otherwise, Poirot simply records the raw transferred data for
further analysis.
Note that Poirot also supports network traffic differential analy-
sis because we can select the data type before transferring the data.
Thus, the packet format for transferring different types of data can
be determined.
3.4 Analysis Process
Relying on the above three components, we use Poirot to conduct
the following analyses to examine data clone services.
3.4.1 Data Export/Import Analysis. We investigate whether a data
clone service (unintentionally) exposes the operated user data to
a third-party app. Given a data clone app, Poirot first queries the
requestedPermissionsFlags array in the class PackageInfo class to
obtain a complete list of its used permissions directly. Apart from
the listed permissions, Poirot dynamically monitors the data clone
5Apart from the platform apps, the manufacturers usually develop the universal
versions of the data clone apps that can be installed on the phones published by the
other manufacturers.
procedure because some permissions are granted dynamically in
the new versions of Android systems. To retrieve a completed per-
mission list, Poirot monitors file I/O operations, API invocations,
involved system services (e.g., BackupManagerService).
To ensure the effectiveness of data transmission, the transferred
user data are temporarily stored at the flash storage as intermediate
data. Besides, most data clone services adopt an asynchronous mech-
anism, which uses different threads to handle data transmission and
data export/import, respectively. Therefore, Poirot monitors file
I/O operations to identify where the intermediate data are stored
and checks whether these intermediate data are properly cleaned
after transmission.
For the system services, Poirot determines the external system
services that are invoked by the data clone app and then identifies
the required permissions for these services. As user data are oper-
ated on during the data clone procedure, Poirot determines the
services that are requested and checks which system privilege is in-
voked for the data operation. For instance, a data clone app utilizes
the PackageManager service to restore user data and then leverages
the adb backup functionality to move user data into the sandbox.
Accordingly, Poirot first identifies the service that is invoked to
restore and move user data. It then learns the permissions required
to operate on the user data.
After having identified the permissions used by the data clone
service, Poirot analyzes whether the user data are protected prop-
erly. First, it examines the dangerous permissions and identifies the
unintentionally exposed components by executing Drozer [4] [22].
We manually analyze the functionalities defined in the components
and determine whether the components are vulnerable. Third-party
apps can access sensitive data illegally after exploiting these ex-
posed components. As manufacturers embed customized system
components into the standard Android system to support user data
import and export, Poirot then checks the embedded system com-
ponents to verify whether a third-party app will execute them.
3.4.2 Data Transmission Analysis. Poirot further checks the con-
fidentiality and integrity of the transferred data. It analyzes data
transmission from three perspectives: application-level transmis-
sion protocols, transmission formats, sender/receiver identity and
data integrity checks. Although Poirot can analyze data transmis-
sion between two Android mobile phones by reverse engineering
data clone apps (static analysis), the information obtained from the
network-related code snippet is incomplete. Hence Poirot uses a
hybrid methodology.
First, Poirot relies on the network inspection component to
capture network traffics while data are being migrated. Two steps
are followed to analyze the network traffics:
(1) Poirot leverages Wireshark [9] to parse network traffic and
identify whether any known protocol (e.g., HTTP, FTP) is
used.
(2) If a proprietary protocol is used, we manually execute the
data clone procedure by transferring each data type in two
comparable groups. Then Poirot intercepts the transmitted
network packets and conducts a differential analysis to dis-
tinguish data payload and meta data payload for further
inspections. Consider an example of transferring media files.
We first transfer data in group A (with photos only) and
324ACSAC 2020, December 7â€“11, 2020, Austin, USA
Siqi Ma, Hehao Li, Wenbo Yang, Juanru Li1, Surya Nepal, and Elisa Bertino
intercept the network traffic. Then we send data in group
B (with audio audio files and photos) and intercept the cor-
responding network traffics. Finally, Poirot identifies the
differences between the network traffic of these two groups.
By analyzing the network traffic generated by group A only,
we pinpoint the data payload in the proprietary protocol.
Second, Poirot uses a heuristics to statically analyze the data
clone app. Since the I/O operations are involved during the data
clone procedure, Poirot identifies the I/O related network functions
such as getOutputStream and write(). When third-party network
application frameworks (e.g., Netty [8], Apache MINA [5]) are used,
Poirot locates the critical encoding APIs that will be applied before
network I/O (e.g., encode() in Apache MINA). Besides, protection op-
erations for user data, such as data encryption, might also be used
before data transfer. Therefore, Poirot identifies the typical crypto-
graphic APIs (e.g., Cipher.getInstance(), BigInteger.modPow, and
MessageDigest.getInstance) and infers whether checksum algo-
rithms are implemented.
Finally, Poirot verifies whether user data are transferred prop-
erly by conducting an active penetration test. Given the data pay-
load, it executes format identification to check data confidential-
ity. If the format of the data payload is text-based (e.g., HTTP-
plaintext/base64, json), Poirot directly extracts its contents. If the
data format is binary, Poirot leverages binwalk [6] to extract the
potential contents (e.g., a JPEG file). Once meaningful contents are
recognized, Poirot reports a violation against data confidentiality
in the data clone service. In addition, Poirot tampers either the
data payload (as well as the attached checksum) or the meta data to
check whether the data clone app on the receiver side verifies the
user data. If a data payload (e.g., an APK file) can be replaced or a
checksum can be forged, Poirot further reports a violation against
data integrity in the data clone service.
3.4.3 Wi-Fi Configuration Analysis. For the Wi-Fi hotspot-based
data clone service, the protection strategies (e.g., authentication)
of the WLAN are essential. Poirot analyzes the WLAN protection
strategies from two aspects: generation rules of SSID/password and
connection restriction.
Generation rules of SSID/password. Poirot executes the static
code analysis component to locate the code snippets that are rele-
vant to the Wi-Fi hotspot setup and recover the generation rules
of the SSID/password declared in each app. To set up the Wi-Fi
hotspot, the wifiConfiguration API needs to be invoked. Hence,
Poirot locates the code snippet with wifiConfiguration and then
retrieves the value assigned to the variables SSID and preSharedKey6.
For Android version 7.0 and below, the setWifiApEnabled API
in WifiManager class is invoked to start the Wi-Fi hotspot. Poirot
pinpoints setWifiApEnabled to recognize where variables SSID and
preSharedKey are declared and their assigned values. Starting from
the values of SSID and preSharedKey, Poirot performs backward
program slicing to track the statements that are (directly/indirectly)
that
since Android version 10, Google has
6Note
suggested to use
create NetworkSpecifier and
WifiNetworkSpecifier.Builder to
WifiNetworkSuggestion.Builder to create WifiNetworkSuggestion.
However in our study most Android phones still use Android version 9.0 and below,
and thus in this paper we focus on the WifiConfiguration class.
data dependent on the values of SSID and preSharedKey. The cor-
related statements are regarded as the generation rule to generate
SSIDs/passwords. Within those correlated statements, Poirot iden-
tifies whether there is any fixed string that is used to generate either
SSID or password. If so, Poirot labels such a generation rule as
insecure.
It is important to mention that from Android version 7.1 to
version 9.0, the startTethering API in ConnectivityManager class
should also be used together with the setWifiApEnabled API. Hence,
Poirot locates startTethering when analyzing these Android ver-
sions.
Connection restriction. We argue that for security only two An-
droid phones are allowed to join the WLAN because the data clone
process is a peer-to-peer data migration. Any other WLAN connec-
tion requests should be declined even if the correct Wi-Fi password
is provided. To test this, we manually execute a data clone app to
set up the Wi-Fi hotspot and use another data clone app to join
the private network. Then, we use one or more Android phones
to join the network. If these Android phones can join the network
successfully, we define the setting of data transmission as highly
risky.
4 EVALUATION
In this section, we report our analysis results against eight cus-
tomized data clone services developed by different Android phone
manufacturers. We first obtained implementation details of those
data clone services with the help of Poirot and then identified
related attacks against insecurely implemented services. We also
check the new versions of the data clone services to identify whether
the vulnerabilities still exist.
4.1 Experimental Targets
We investigated the popular Android phones and discovered eight
customized data clone services supported by well-known manufac-
turers, including Gionee, Huawei, Nokia, Motorola, OnePlus, Oppo, Vivo,