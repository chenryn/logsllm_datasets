:::
您可以使用命令行界面（CLI）从日志中执行用户会话记录。
::: itemizedlist
**先决条件**
-   您已经记录了一个用户会话。请参阅 [CLI 中使用部署的 Terminal Session
    Recording
    系统角色记录会话](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/administration_and_configuration_tasks_using_system_roles_in_rhel/index#recording-a-session-using-the-deployed-tlog-system-role_configuring-a-system-for-session-recording-using-the-tlog-rhel-system-roles){.link}。
:::
::: orderedlist
**流程**
1.  在 CLI 终端中，播放用户会话记录：
    ``` screen
    # journalctl -o verbose -r
    ```
2.  搜索 `tlog`{.literal} 记录：
    ``` screen
    $ /tlog-rec
    ```
    您可以查看详情，例如：
    ::: itemizedlist
    -   用户会话记录的用户名
    -   `out_txt`{.literal} 字段，这是记录的会话的原始输出编码
    -   标识符号 TLOG_REC=[*ID_number*]{.emphasis}
    :::
3.  复制标识符号 TLOG_REC=[*ID_number*]{.emphasis}。
4.  使用标识符号 TLOG_REC=[*ID_number*]{.emphasis} 回放记录。
    ``` screen
    # tlog-play -r journal -M TLOG_REC=ID_number
    ```
:::
您可以看到记录的用户会话被回放。
:::
:::
[]{#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel}第 12 章 使用系统角色配置高可用性集群 {.title}
:::
使用 HA 集群角色，您可以配置和管理使用 Pacemaker
高可用性集群资源管理器的高可用性集群。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
HA 系统角色目前不支持 SBD。
:::
::: section
::: titlepage
# []{#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#ha-system-role-variables_configuring-ha-cluster-using-system-roles}HA 集群系统角色变量 {.title}
:::
在 HA Cluster System Role playbook
中，您可以根据集群部署的要求为高可用性集群定义变量。
您可以为 HA 集群角色设置的变量如下。
::: variablelist
[`ha_cluster_enable_repos`{.literal}]{.term}
:   一个布尔值标志，它启用包含 HA Cluster System Role
    所需的软件包的存储库。如果设置为 `yes`{.literal}
    （此变量的默认值），则您必须在将用作集群成员的系统上拥有有效的 RHEL
    和 RHEL 高可用性附加组件的订阅，否则系统角色将失败。
[`ha_cluster_cluster_present`{.literal}]{.term}
:   布尔值标志（如果设为 `yes`{.literal} ）决定主机上的 HA
    集群将根据传递给角色的变量进行配置。角色中没有指定且不受角色支持的任何集群配置都将丢失。
    如果 `ha_cluster_cluster_present`{.literal} 设为
    `no`{.literal}，则将从目标主机中删除所有 HA 集群配置。
    此变量的默认值为 `yes`{.literal}。
    以下示例 playbook 删除了 `node1`{.literal} 和 `node2`{.literal}
    上的所有集群配置
    ``` literallayout
    - hosts: node1 node2
      vars:
        ha_cluster_cluster_present: no
      roles:
        - rhel-system-roles.ha_cluster
    ```
[`ha_cluster_start_on_boot`{.literal}]{.term}
:   确定是否将集群服务配置为在引导时启动的布尔值标志。此变量的默认值为
    `yes`{.literal}。
[`ha_cluster_fence_agent_packages`{.literal}]{.term}
:   要安装的隔离代理软件包列表。此变量的默认值为
    `fence-agents-all`{.literal}，`fence-virt`{.literal}。
[`ha_cluster_extra_packages`{.literal}]{.term}
:   要安装的其他软件包列表。此变量的默认值是 no packages。
    此变量可用于安装角色未自动安装的其他软件包，如自定义资源代理。
    可以将隔离代理指定为这个列表的成员。但是，`ha_cluster_fence_agent_packages`{.literal}
    是用于指定隔离代理的推荐的角色变量，因此其默认值会被覆盖。
[`ha_cluster_hacluster_password`{.literal}]{.term}
:   指定 `hacluster`{.literal}
    用户的密码的字符串值。`hacluster`{.literal}
    用户对集群具有完全访问权限。建议您加密密码，如 [使用 Ansible Vault
    加密内容](https://docs.ansible.com/ansible/latest/user_guide/vault.html){.link}
    中所述。没有默认密码值，必须指定此变量。
[`ha_cluster_corosync_key_src`{.literal}]{.term}
:   Corosync `authkey`{.literal} 文件的路径，它是 Corosync
    通信的身份验证和加密密钥。强烈建议您对每个集群都有一个唯一的
    `authkey`{.literal} 值。密钥应为 256 字节的随机数据。
    如果为此变量指定一个密钥，则建议您使用 vault 加密密钥，如 [使用
    Ansible Vault
    加密内容](https://docs.ansible.com/ansible/latest/user_guide/vault.html){.link}
    中所述。
    如果没有指定密钥，则使用节点上已存在的密钥。如果节点没有相同的密钥，则一个节点的密钥将被分发到其他节点，以便所有节点都有相同的密钥。如果节点都没有密钥，则将生成一个新的密钥，并将其分发到节点。
    如果设置了此变量，则忽略这个密钥的
    `ha_cluster_regenerate_keys`{.literal}。
    此变量的默认值为 null。
[`ha_cluster_pacemaker_key_src`{.literal}]{.term}
:   Pacemaker `authkey`{.literal} 文件的路径，它是 Pacemaker
    通信的身份验证和加密密钥。强烈建议您对每个集群都有一个唯一的
    `authkey`{.literal} 值。密钥应为 256 字节的随机数据。
    如果为此变量指定一个密钥，则建议您使用 vault 加密密钥，如 [使用
    Ansible Vault
    加密内容](https://docs.ansible.com/ansible/latest/user_guide/vault.html){.link}
    中所述。
    如果没有指定密钥，则使用节点上已存在的密钥。如果节点没有相同的密钥，则一个节点的密钥将被分发到其他节点，以便所有节点都有相同的密钥。如果节点都没有密钥，则将生成一个新的密钥，并将其分发到节点。
    如果设置了此变量，则忽略这个密钥的
    `ha_cluster_regenerate_keys`{.literal}。
    此变量的默认值为 null。
[`ha_cluster_fence_virt_key_src`{.literal}]{.term}
:   `fence-virt`{.literal} 或 `fence-xvm`{.literal}
    预共享密钥文件的路径，它是 `fence-virt`{.literal} 或
    `fence-xvm`{.literal} 隔离代理验证密钥的位置。
    如果为此变量指定一个密钥，则建议您使用 vault 加密密钥，如 [使用
    Ansible Vault
    加密内容](https://docs.ansible.com/ansible/latest/user_guide/vault.html){.link}
    中所述。
    如果没有指定密钥，则使用节点上已存在的密钥。如果节点没有相同的密钥，则一个节点的密钥将被分发到其他节点，以便所有节点都有相同的密钥。如果节点都没有密钥，则将生成一个新的密钥，并将其分发到节点。如果
    HA Cluster
    系统角色以这种方式生成一个新密钥，您应该将该密钥复制到节点的
    hypervisor 中，以确保隔离工作。
    如果设置了此变量，则忽略这个密钥的
    `ha_cluster_regenerate_keys`{.literal}。
    此变量的默认值为 null。
[`ha_cluster_pcsd_public_key_srcr`{.literal}, `ha_cluster_pcsd_private_key_src`{.literal}]{.term}
:   `pcsd`{.literal} TLS
    证书和私钥的路径。如果没有指定，则使用节点上已存在的证书密钥对。如果没有证书密钥对，则会生成一个随机的新密钥对。
    如果为此变量指定了私钥值，则建议您使用 vault 加密密钥，如 [使用
    Ansible Vault
    加密内容](https://docs.ansible.com/ansible/latest/user_guide/vault.html){.link}
    中所述。
    如果设置了这些变量，则将忽略此证书密钥对的
    `ha_cluster_regenerate_keys`{.literal}。
    这些变量的默认值为 null。
[`ha_cluster_regenerate_keys`{.literal}]{.term}
:   布尔值标志，当设置为 `yes`{.literal}
    时，其决定将重新生成预共享密钥和 TLS
    证书。有关何时重新生成密钥和证书的更多信息，请参阅
    `ha_cluster_corosync_key_src`{.literal}
    、`ha_cluster_pacemaker_key_src`{.literal}
    、`ha_cluster_fence_virt_key_src`{.literal}
    、`ha_cluster_pcsd_public_key_src`{.literal} 和
    `ha_cluster_pcsd_private_key_src`{.literal} 变量的描述。
    此变量的默认值为 `no`{.literal}。
[`ha_cluster_pcs_permission_list`{.literal}]{.term}
:   配置使用 `pcsd`{.literal}
    管理集群的权限。您使用这个变量配置的项目如下：
    ::: itemizedlist
    -   `type`{.literal} - `用户`{.literal} 或 `组`{.literal}
    -   `name`{.literal} - 用户或组名称
    -   `allow_list`{.literal} - 对指定的用户或组允许的操作：
        ::: itemizedlist
        -   `read`{.literal} - 查看集群状态和设置
        -   `write`{.literal} - 修改集群设置，权限和 ACL 除外
        -   `grant`{.literal} - 修改集群权限和 ACL
        -   `full`{.literal} -
            对集群的无限制访问，包括添加和删除节点，以及访问密钥和证书
            ::`ha_cluster_pcs_permission_list`{.literal}
            变量的结构及其默认值如下：
            ``` literallayout
            ha_cluster_pcs_permission_list:
              - type: group
                name: hacluster
                allow_list:
                  - grant
                  - read
                  - write
            ```
        :::
    :::
[`ha_cluster_cluster_name`{.literal}]{.term}
:   集群的名称。这是一个字符串值，默认值为 `my-cluster`{.literal}。
[`ha_cluster_cluster_properties`{.literal}]{.term}
:   Pacemaker 集群范围配置的集群属性集列表。仅支持一组集群属性。
    一组集群属性的结构如下：
    ``` literallayout
    ha_cluster_cluster_properties:
      - attrs:
          - name: property1_name
            value: property1_value
          - name: property2_name
            value: property2_value
    ```
    默认情况下，不设置任何属性。
    以下示例 playbook 配置包含 `node1`{.literal} 和 `node2`{.literal}
    的集群，并设置 `stonith-enabled`{.literal} 和
    `no-quorum-policy`{.literal} 集群属性。
    ``` literallayout
    - hosts: node1 node2
      vars:
        ha_cluster_cluster_name: my-new-cluster
        ha_cluster_hacluster_password: password
        ha_cluster_cluster_properties:
          - attrs:
              - name: stonith-enabled
                value: 'true'
              - name: no-quorum-policy
                value: stop
      roles:
        - rhel-system-roles.ha_cluster
    ```
[`ha_cluster_resource_primitives`{.literal}]{.term}
:   此变量定义由系统角色配置的 pacemaker 资源，包括 stonith 资源，包括
    stonith resource。您可以为每个资源配置的项目如下：
    ::: itemizedlist
    -   `id`{.literal} （必需）- 资源的 ID。
    -   `agent`{.literal} (必需)- 资源或 stonith 代理的名称，如
        `ocf:pacemaker:Dummy`{.literal} 或 `stonith:fence_xvm`{.literal}
        。必须为 stonith 代理指定 `stonith:`{.literal}
        。对于资源代理，可以使用短名称，如 `Dummy`{.literal}，而不是
        `ocf:pacemaker:Dummy`{.literal}。但是，如果安装了多个具有相同短名称的代理，则角色将失败，因为它将无法决定应使用哪个代理。因此，建议您在指定资源代理时使用全名。
    -   `instance_attrs`{.literal} （可选） -
        资源的实例属性集合列表。目前，只支持一个集合。属性的确切名称和值，以及它们是否为必选的，这取决于资源还是
        stonith 代理。
    -   `meta_attrs`{.literal} （可选） -
        资源的元属性集合列表。目前，只支持一个集合。
    -   `operations`{.literal} （可选） - 资源操作列表。
        ::: itemizedlist
        -   `action`{.literal} （必需）- pacemaker 以及资源或 stonith
            代理定义的操作。
        -   `attrs`{.literal} （必需）- 操作选项，必须至少指定一个选项。
            ::使用 HA 集群角色配置的资源定义的结构如下：
            ``` literallayout
              - id: resource-id
                agent: resource-agent
                instance_attrs:
                  - attrs:
                      - name: attribute1_name
                        value: attribute1_value
                      - name: attribute2_name
                        value: attribute2_value
                meta_attrs:
                  - attrs:
                      - name: meta_attribute1_name
                        value: meta_attribute1_value
                      - name: meta_attribute2_name
                        value: meta_attribute2_value
                operations:
                  - action: operation1-action
                    attrs:
                      - name: operation1_attribute1_name
                        value: operation1_attribute1_value
                      - name: operation1_attribute2_name
                        value: operation1_attribute2_value
                  - action: operation2-action
                    attrs:
                      - name: operation2_attribute1_name
                        value: operation2_attribute1_value
                      - name: operation2_attribute2_name
                        value: operation2_attribute2_value
            ```
            默认情况下不定义任何资源。
            有关包含资源配置的 HA Cluster System Role playbook
            示例，[请参阅使用隔离和资源配置高可用性集群](#using-the-hacluster-system-role_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-ha-cluster-with-fencing-and-resources_configuring-ha-cluster-using-system-roles "配置带有隔离和资源的高可用性集群"){.link}。
        :::
    :::
[`ha_cluster_resource_groups`{.literal}]{.term}
:   此变量定义由系统角色配置的 pacemaker
    资源组。您可以为每个资源组配置的项目如下：
    ::: itemizedlist
    -   `id`{.literal} （必需）- 组的 ID.
    -   `resources`{.literal} （必需） - 组的资源列表.每个资源通过其 ID
        引用，资源必须在 `ha_cluster_resource_primitives`{.literal}
        变量中定义。必须至少列出一个资源。
    -   `meta_attrs`{.literal} （可选） -
        组的元属性集合列表。目前，只支持一个集合。
        ::使用 HA 集群角色配置的资源组定义的结构如下：
        ``` literallayout
        ha_cluster_resource_groups:
          - id: group-id
            resource_ids:
              - resource1-id
              - resource2-id
            meta_attrs:
              - attrs: