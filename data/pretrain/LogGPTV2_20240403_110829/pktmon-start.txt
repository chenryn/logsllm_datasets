### pktmon start
**Applies to:** Windows Server 2022, Windows Server 2019, Windows 10, Azure Stack HCI, Azure Stack Hub, Azure

**Description:**
Starts packet capture and event collection.

**Syntax:**
```shell
pktmon start [--capture [--counters-only] [--comp <components>] [--type <type>] [--pkt-size <size>] [--flags <flags>]]
             [--trace --provider <provider> [--keywords <keywords>] [--level <level>] ...]
             [--file-name <filename>] [--file-size <size>] [--log-mode <mode>]
```

### Packet Capture Parameters
Use `-c` or `--capture` to enable packet capture and packet counters. The following optional parameters can be used:

- **-o, --counters-only**: Collect only packet counters. No packet logging.
- **--comp <components>**: Select components to capture packets on. Can be `all` (all components), `nics` (NICs only), or a list of component IDs. Defaults to `all`.
- **--type <type>**: Select which packets to capture. Can be `all`, `flow`, or `drop`. Default is `all`.
- **--pkt-size <size>**: Number of bytes to log from each packet. Set to `0` to always log the entire packet. Default is `128` bytes.
- **--flags <flags>**: Hexadecimal bitmask that controls information logged during packet capture. Default is `0x012`.

#### Packet Capture Flags
The following flags apply to the `--flags` parameter:

- **0x001**: Internal Packet Monitor errors.
- **0x002**: Information about components, counters, and filters. This information is added to the end of the log file.
- **0x004**: Source and destination information for the first packet in NET_BUFFER_LIST group.
- **0x008**: Select packet metadata from NDIS_NET_BUFFER_LIST_INFO enumeration.
- **0x010**: Raw packet, truncated to the size specified in the `--pkt-size` parameter.

### Event Collection Parameters
Use `-t` or `--trace` to enable event collection. The following optional parameters can be used:

- **-p, --provider <provider>**: Event provider name or GUID. For multiple providers, use this parameter more than once.
- **-k, --keywords <keywords>**: Hexadecimal bitmask that controls which events are logged for the corresponding provider. Default is `0xFFFFFFFF`.
- **-l, --level <level>**: Logging level for the corresponding provider. Default is `4` (info level).

### Logging Parameters
Use the following parameters for logging:

- **-f, --file-name <filename>**: Log file name. Default is `PktMon.etl`.
- **-s, --file-size <size>**: Maximum log file size in megabytes. Default is `512` MB.
- **-m, --log-mode <mode>**: Sets the logging mode. Default is `circular`.

#### Logging Modes
The following modes apply to the `--log-mode` parameter:

- **circular**: New events overwrite the oldest ones when the log is full.
- **multi-file**: A new log file is created each time the log is full. Log files are sequentially numbered: `PktMon1.etl`, `PktMon2.etl`, etc. There is no limit on the number of captured events.
- **real-time**: Display events and packets on screen in real time. No log file is created. Press `Ctrl+C` to stop monitoring.
- **memory**: Like circular, but the entire log is stored in memory. It is written to a file when `pktmon` is stopped. Memory buffer size is specified in the `--file-size` parameter.

### Examples

**Example 1: Packet capture**
```shell
C:\Test> pktmon start --capture
```

**Example 2: Packet counters only**
```shell
C:\Test> pktmon start --capture --counters-only
```

**Example 3: Event logging**
```shell
C:\Test> pktmon start --trace -p Microsoft-Windows-TCPIP -p Microsoft-Windows-NDIS
```

**Example 4: Packet capture with event logging**
```shell
C:\Test> pktmon start --capture --trace -p Microsoft-Windows-TCPIP -k 0xFF -l 4
```

This revised version aims to provide a clear, organized, and professional presentation of the `pktmon start` command and its parameters.