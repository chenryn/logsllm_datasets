To successfully simulate a computer intruder, we must be able to model primitive
actions and their composition. This includes being able to model the actions
that are available to the attacker, and their eﬀects on the world (in this case
the computer network). The model must also provide a simulated attacker that
will intelligently assemble primitive actions into a plan to achieve its objectives.
Assembling plans together must include the ability to react to failed actions,
either by trying again, choosing new methods that will achieve the same end, or
abandoning failed goals.
We have assembled a theoretical framework that meets these needs, and de-
veloped a proof-of-concept implementation. We use the situation calculus [21,23]
as the framework within which to model attacker actions. The situation calculus
provides an expressive framework for encoding actions, including those whose
eﬀects are complex functions of the state in which they are executed. Further,
the situation calculus includes solutions to the frame and ramiﬁcation problems,
deep problems about reasoning about actions. Golog (alGOl in LOGic) [20]
and its variants, Congolog [13] and Indigolog [14] provide ways to express com-
plex procedures in terms that are consistent with the situation calculus. They
thus let us describe complex actions, composed of primitive actions, condition-
als, etc., in a way that preserves the crisp semantics of the situation calculus.
We have augmented the Indigolog framework with goal-directed invocation, the
ability to invoke procedures based on desired eﬀect, rather than by name. This
adds a crucial kind of abstraction to our plan models. We have added stochastic
goal persistence and abandonment, so that our agents will react appropriately
to failures in their plans. Finally, we have modiﬁed an existing Indigolog inter-
preter [19] to provide the simulation engine for our work.
204
R.P. Goldman
3.1 The Situation Calculus
As the most mature representation for actions and dynamic change, the situation
calculus provides the best framework for us to experiment with descriptions
of cyber attacker’s actions. The situation calculus is a formal representation
for dynamic world models developed by artiﬁcial intelligence researchers. The
situation calculus is a dialect of ﬁrst order logic, with certain special features
for representing dynamic change.2 Situation calculus researchers have provided
solutions for many knotty problems in representing dynamic change, including
management the notorious frame, ramiﬁcation, and qualiﬁcation problems.
Recent work on attack modeling by Templeton and Levitt [29] and Cup-
pens and Ortalo [4] has argued for a “requires-provides” or “precondition-
postcondition” model of attack actions. We were inspired by this work, and came
to choose the situation calculus framework because it provided a semantics for
the pre- and postconditions not yet provided by other work.
Fluents and Predicates. The situation calculus is a dialect of typed ﬁrst order
logic. For the purposes of this paper, we assume familiarity with the syntax and
semantics of ﬁrst order logic. The most important distinguishing feature of the
situation calculus is the addition of a distinct type, the situation. A situation is a
snapshot of the world state, together with the history that led to that state. The
world is described in terms of static predicates and ﬂuents. Static predicates are
those that don’t change, no matter what actions are taken. Fluents, on the other
hand, are predicates that can vary over time, and thus must take situations as
arguments. So, for example, mortal(socrates) is a formula with a static predicate.
On the other hand, loggedin(b0ri5, host123, s) tells us that the cracker “b0ri5”
is logged into host123 in situation s; loggedin is a ﬂuent.
Doing actions. In order to reason about the eﬀects of actions, we need to be able
to refer to the situation that results from the execution of an action. This is done
using the do function. do(a, s) is a function that denotes the situation that results
from doing action a in situation s. In its simplest form, the situation calculus
assumes that actions are only executed sequentially, and that all actions are
deterministic. There are a number of extensions that permit stochastic actions,
concurrent actions (possibly by multiple agents) and reasoning about actions of
varying duration.
Projecting the results of actions. In order to reason about dynamically-evolving
situations, the situation calculus requires axioms of three sorts. The ﬁrst are
those that state the conditions under which it is possible to execute an action.
For example,
Poss(login(user , host), s) ≡ atconsole(user , host, s)
2 Actually, in part of the formulation of the situation calculus, some second-order
quantiﬁcation is resorted to. However, anyone using the situation calculus, will ﬁnd
him/herself on familiar ground.
A Stochastic Model for Intrusions
205
gives a simple model for when it is possible for a user to log into a host.3 The
second are successor state axioms for the ﬂuents. For example,
Poss(a, s) ⊃ [ loggedin(user , host, (a, s)) ≡
{ a = login(user , host)∨
(loggedin(user , host, s) ∧ a (cid:7)= logout(user , host)) }
]
That is, if a new situation results from the execution of action a in situation s,
then user is logged into host in the resulting state if and only if either (1) the
action a is one of logging into host or (2) user is logged into host in the previous
state, and the new action is not one of user logging out of host. While succes-
sor state axioms can be diﬃcult to formulate manually, compilation techniques
are available for deriving such axioms from sets of easier to manipulate action
descriptions and some closure assumptions [17,22,27]. Likewise, when the ac-
tion descriptions are of limited form, one may simply reason with them directly,
without taking the intermediate step of explicitly formulating the successor state
axioms. This is the technique adopted by the Indigolog interpreter [19] that we
have used.
3.2 Golog and Its Variants
While the situation calculus allows us to reason about the execution of primi-
tive actions, and even sequences of such actions, it is not suﬃcient to express
scripts, or programs, involving looping, conditional execution, etc. The languages
Golog [20], and its extension Congolog (Concurrent Golog) [13], were developed
to meet this need. Congolog adds control constructs such as branching, con-
ditional execution, etc., and concurrency constructs, to the situation calculus.
Using Congolog, one can express a concurrent, branching program, whose atomic
actions are described in the situation calculus. This makes it possible to describe
a reactive program’s interaction with a dynamically-evolving environment. We
use these facilities to develop a script-based model of cyber attackers.
Golog allows actions to be combined into programs using the following con-
structs in Table 1: test, sequence, and nondeterministic choice of action, non-
deterministic choice of action arguments and nondeterministic iteration. These
constructs should be relatively familiar to those familiar with dynamic logic.
Golog also permits procedures (really macros) to be deﬁned (proc) and used.
For example, an attacker might want to use a login procedure like the fol-
lowing:
proc login(host)
begin
if console access(host)
then
ﬁ
end
(πuid)?(known uid(uid, host)); (πsess)login(host, uid, sess)
3 Here, as elsewhere, free variables are implicitly universally quantiﬁed.
206
R.P. Goldman
Table 1. Golog control constructs.
Construct
Simple actions
Test actions
Sequence
Nondeterministic choice
Nondeterministic choice of argument (πx)δ(x)
Nondeterministic iteration
Notation
a
?φ
δ1; δ2
δ1 | δ2
δ∗
Table 2. Congolog control constructs.
Construct
Notation
Conditional
if φ then δ1 else δ2
Looping
while φ do δ1
(δ1 (cid:1) δ2)
Concurrent execution
Prioritized concurrency (δ1 (cid:2) δ2)
(cid:2)
Iterated concurrency
δ
1
φ → δ
Interrupt
The attacker wishes to use this to login to some argument Host. First, we check to
determine whether the attacker has console access. If not, the procedure simply
ends. If the attacker does have console access, then s/he chooses a known uid.
Note the use of the nondeterministic choice of argument operator to bind the
uid argument. Then the attacker completes the procedure by executing the login
primitive action.4 In this case, the environment will, eﬀectively, bind the sess
(session) argument.
Congolog adds a number of constructs to the above: if-then-else, while
loops, concurrent execution, prioritized concurrency, iterated concurrency and
interrupt. See Table 2. Concurrent execution and monitoring will be critical
for our modeling of a goal-directed attacker’s behavior. For example, a goal-
directed attacker determined to shut down a target host might begin activating
a number of DDoS servers she “owns,” until such a time as she determines that
the target host no longer responds to a ping message. We will discuss this further
below. Likewise, in order to execute an “ip spooﬁng” attack, an attacker will
concurrently attempt a denial of service attack on the host to be spoofed, while
sending forged packets to the target host. This might be encoded as follows:
proc ip spoof(host)
(πt)?(trusted(host, t)); DoS(t) (cid:8) spoof to(host, t)
begin
end
4 This is somewhat confusingly given the same name as the procedure. Names are
disambiguated by arity.
3.3 Our Golog Extensions
A Stochastic Model for Intrusions
207
The use of the Congolog framework provides us with two key components to
our attacker simulation. The ﬁrst is a representational scheme for actions with
complex pre- and post-conditions, and the second is a representation for complex
attack scripts or plans. However, in its “oﬀ the shelf” form, Congolog does not
meet all of our needs. First, the semantics of Golog and Congolog rely on “an-
gelic” nondeterminism. To overcome this problem, we have been working with
an interpreter for Indigolog. Second, the Golog procedure mechanism is not suf-
ﬁcient to express goal-directed procedure invocation. Recall that we want our
simulated attackers to assemble and modify their own attack procedures, based
on their goals and the context, and using the actions and procedures available
to them. We have developed a framework that adds goal-directed procedure
invocation to Indigolog, along the lines provided by PRS [11,12].
The ﬁrst concern in designing Golog was to come up with a language for
AI agents that would provide clear semantics for plans, and that would allow
agents to search for the right plan for a situation. In this case, an appeal to
angelic nondeterminism may be appropriate. An agent that is looking for the
right way to achieve its goal can use search to explore the possible deterministic
sequences of actions that correspond to a given nondeterministic program. The
nondeterministic program then provides a convenient shorthand to describe the
problem of choosing the right course of action.
However, in situations where the world is not under the complete control of
an agent, angelic nondeterminism is not an appropriate construct. For example,
there may not be enough information at the point of nondeterministic decision
for the agent to avoid painting itself into a corner. Consider a cracker that wants
to break into host h by ﬁnding a vulnerable host h(cid:2) that is trusted by h, and
achieving root privilege on h(cid:2). There is no way for our cracker to know that she
can actually achieve root privilege on h(cid:2) before she tries (although there may be
positive and negative indications), and if she tries and fails, she cannot simply
backtrack to the state of the world before she has attempted the crack. Many
times an alert security analyst will be able to mitigate or stave oﬀ a network
attack by if she notices evidence of failed attacks. Certainly it would be harder
to catch crackers, if they could miraculously undo all the eﬀects of their failed
attempts!
There have been a number of eﬀorts to bring together Golog constructs with
the needs of robotics control applications, which present these same problems [14,
16]. We have based our work on the Legolog interpreter [19], based on the In-
digolog (INcremental Deterministic Golog) dialect of Golog. This Indigolog in-
terpreter commits to particular strategies for interleaving concurrent actions,
choosing between nondeterministic alternatives, etc. The interpreter’s function-
ing is very easy to understand, because it is written in Prolog and directly
implements the semantics of Indigolog as described in [14]. However, we will see
that some enhancements were necessary to permit goal-driven execution.
In order to build ﬂexible plans for our attackers, we need to be able to use
goal-directed invocation or subgoaling. That is, we need to be able to specify
parts of the attacker’s plan by specifying what it is to achieve, instead of how
208
R.P. Goldman
it to do the job. For example, we should be able to specify that a plan requires
the attacker to achieve root privilege on a speciﬁc Unix host, without specifying
how the attacker is to do this. There are two reasons we would like to have
this feature. The ﬁrst is a simple matter of software engineering. We would like
to be able to write procedures with straightforward interfaces, and the goal of
the procedure is a good way to specify the its interface. The goal provides a
stronger, more standard way of encoding the interface than conventional name
and parameter methods, because unlike those methods, the goal expression has
its own semantics. Further, using the goal as interface speciﬁcation allows us to
permit multiple, alternative, methods for the same goal. Finally, if procedures
are characterized by their goals, our agents have an operational method for
determining whether or not a procedure invocation has succeeded. In turn, this
permits them to react appropriately to success and failure.
While we cannot develop a psychologically accurate model of a cyber at-
tacker, we do want to develop a model that is capable of reasoned attack on
a defended network. To do so, we have been broadly guided by the “beliefs-
desires-intentions” model [3]. As the name suggests, this model proposes that
agents have beliefs and desires about the world. Based on those beliefs and de-
sires, the agents adopt goals, and intentions (plans) to pursue those goals. We
have also been guided by the design of reactive programming languages like
PRS [11,12] and RAPS [9].
The facility we need is the ability for our agents to pursue goals. Our agents
should be able to choose methods to achieve their goals. They should be able
to adopt sub-goals as part of a plan to achieve another goal. For example, our
agents must be able to decide to take over one host as a stepping stone to a true
target. Agents must persist in their goals, and choose alternative methods when
one method fails. For example, if an agent is unable to use a speciﬁc exploit
successfully against a host, that agent might try a number of alternatives: she
might try the exploit again (some exploits, like race conditions, are not reliable);
she might try a diﬀerent exploit or she might try to attack a diﬀerent host.
Finally, sub-goals should not last too long. For example, if an agent is performing
a denial-of-service attack as part of an ip-spooﬁng attack, the denial-of-service
should not persist past the end of the ip-spooﬁng attack.
To meet these objectives, we signiﬁcantly expanded the Indigolog language,
adding goal-directed procedures, called KAs (after the similar PRS construct).
A KA is like a normal Indigolog procedure, but has additional special features
and components. KAs are associated with particular goals, the purpose for which
they are to be executed. One may also specify the context that limits the con-
ditions under which a KA may be executed. Figure 2 shows a KA for achieving
root privilege on some host. Note that it is only applicable when the agent is
already logged into that host.
to
one may
a
invoke
subgoal. We
Within a KA deﬁnition,
achieve
special procedure,
achieve goal(G, S),
for
achieve goal(G, S) in Figure 3. achieve goal(G, S) works as follows: ﬁrst,
check to see if the goal already holds. If so, simply return success. If the goal
does not hold, the agent must do something to make it hold. Check to see
a
give pseudo-code
A Stochastic Model for Intrusions
209
Fig. 2. Example KA for escalating to root privilege from a local login session. Choose
an existing login session on that host, and then try to escalate the privilege of that
session to root privilege.
if there are any methods available. If not, then return failure. If there are
methods, choose one and invoke it. If the chosen method has succeeded, we’re
done. Otherwise, decide whether or not to persist in achieving the goal, and
either try again, or give up. In our model, the probability of persistence is a
simple constant parameter, but it would be trivial to extend the model to make
the persistence probability sensitive to the goal in question.
In general, a single KA may have multiple subgoals. For greater convenience,
the KA will monitor all of its subgoals for failure. If a subgoal fails irrecoverably,
then the parent KA will fail also (possibly triggering replanning). We do this
because subgoals are meaningful only in the context of an over-arching plan.
For example, one might have a plan to travel by buying a train ticket and
then boarding the corresponding train. If the subgoal of acquiring a ticket fails