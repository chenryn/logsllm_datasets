LEFT(需要被从左边截取的字符串,截取的长度)
返回：左边的字符串
示例：
SELECT LEFT('SQL学习之路',2)
29.5 RIGHT()
语法
RIGHT(需要被从右边截取的字符串,截取的长度)
返回：右边的字符串
示例：
SELECT RIGHT('SQL学习之路',2)
29.6 CHARINDEX()
语法
CHARINDEX(需要查找位置的子字符串,父字符串,从哪个位置开始找)
返回：被查找的子字符串在父字符串中的位置
从第一个位置查找‘SQL学习之路’中的‘路’字在哪个位置
示例：
SELECT CHARINDEX('路','SQL学习之路',1)
29.7 PATINDEX()
语法
PATINDEX(%需要查找的子字符串%,父字符串)
返回指定表达式中模式第一次出现的开始位置，子字符串可使用通配符%，而上面
的CHARINDEX则不可以
示例：
SELECT PATINDEX('%数据%','SQL数据库开发')
SELECT PATINDEX('%_数据%','SQL数据库开发')
注意：上面的数据前面有个通配符_，代表一个任意字符的意思。
29.8 LTRIM()
语法
LTRIM(需要被清空的字符串)
返回：被清空左边空格的字符串
示例：
SELECT LTRIM(' SQL学习之路')
29.9 RTRIM()
语法
RTRIM(需要被清空右边的字符串)
返回：被清空右边空格的字符串
示例：
SELECT RLTRIM('SQL学习之路 ')
29.10 STUFF()
语法
STUFF(字符串,开始下标,截取长度,插入的字符串)
在一个字符串中，删除指定长度的字符，并在该位置插入一个新的字符串；
示例：
SELECT STUFF('ABCDEFG', 2, 3, 'SQL学习之路')
29.11 REPLACE()
语法
REPLACE(指定字符串,需要被替换的字符串,替换为的字符串)
返回新字符串
示例：
SELECT REPLACE('SQL学习之路','学习','成长')
29.12 UPPER()
语法
UPPER(需要转换为大写的字符串)
把传递给它的字符串转换为大写
示例：
SELECT UPPER('sql学习之路')
29.13 LOWER()
语法
LOWER(需要转换为小写的字符串)
把传递给它的字符串转换为小写
示例：
SELECT LOWER('SQL学习之路')
29.14 SUBSTRING()
语法
SUBSTRING(字符串,起始下标,长度)
提取字符串
示例：
SELECT SUBSTRING('SQL学习之路',4,4)
29.15 REVERSE()
语法
REVERSE(需要逆向取值的字符串)
返回字符串值的逆向值
示例：
SELECT REVERSE('SQL学习之路')
29.16 REPLICATE()
语法
REPLICATE(需要重复的字符串 ,重复次数)
以指定的次数重复字符串值
示例：
SELECT REPLICATE('SQL',3)
第三十章 常用数据类型
30.1常用数据类型定义
数据类型定义了存储在列中的值的类型。
30.2常用数据类型作用
数据库表中的每一列都需要有一个名称和数据类型。
SQL 开发人员必须在创建 SQL 表时决定表中的每个列将要存储的数据的类型。数
据类型是一个标签，是便于 SQL 了解每个列期望存储什么类型的数据的指南，它
也标识了 SQL 如何与存储的数据进行交互。
30.3 常用数据类型
数据类型 描述
CHARACTER(n) 字符/字符串,固定长度 n。
VARCHAR(n) 或
CHARACTER 字符/字符串,可变长度,最大长度 n。
VARYING(n)
BINARY(n) 二进制串,固定长度 n。
BOOLEAN 存储 TRUE 或 FALSE 值
VARBINARY(n) 或
二进制串,可变长度。最大长度 n。
BINARY VARYING(n)
INTEGER(p) 整数值（没有小数点）。精度 p。
SMALLINT 整数值（没有小数点）。精度 5。
INTEGER 整数值（没有小数点）。精度 10。
BIGINT 整数值（没有小数点）。精度 19。
精确数值，精度 p，小数点后位数 s。例如：
DECIMAL(p,s) decimal(5,2) 是一个小数点前有 3 位数小
数点后有 2 位数的数字。
精确数值，精度 p，小数点后位数 s。（与
NUMERIC(p,s)
DECIMAL 相同）
近似数值，尾数精度 p。一个采用以 10 为
FLOAT(p) 基数的指数计数法的浮点数。该类型的 size
参数由一个指定最小精度的单一数字组成。
REAL 近似数值，尾数精度 7。
FLOAT 近似数值，尾数精度 16。
DOUBLE PRECISION 近似数值，尾数精度 16。
DATE 存储年、月、日的值。
TIME 存储小时、分、秒的值。
TIMESTAMP 存储年、月、日、小时、分、秒的值。
由一些整数字段组成，代表一段时间，取决
INTERVAL
于区间的类型。
ARRAY 元素的固定长度的有序集合
MULTISET 元素的可变长度的无序集合
XML 存储 XML 数据
这些数据类型通常在定义表结构，定义变量时使用，具有固定的写法。我们可以建
几个表给大家做个示例：
30.4 示例脚本
--创建客户表Customers
CREATE TABLE [dbo].[Customers](
[客户ID] [INT] IDENTITY(1,1) NOT NULL,
[姓名] [VARCHAR](10) NULL,
[地址] [VARCHAR](50) NULL,
[城市] [VARCHAR](20) NULL,
[邮编] [CHAR](6) NULL,
[省份] [VARCHAR](20) NULL
) ;
--创建订单表Orders
CREATE TABLE [dbo].[Orders](
[订单ID] [INT] IDENTITY(1,1) NOT NULL,
[客户ID] [INT] NULL,
[员工ID] [INT] NULL,
[订单日期] [DATETIME] NULL,
[发货ID] [INT] NULL
) ;
--创建产品表Products
CREATE TABLE [dbo].[Products](
[产品ID] [INT] IDENTITY(1,1) NOT NULL,
[名称] [VARCHAR](20) NULL,
[供应商ID] [INT] NULL,
[目录ID] [INT] NULL,
[规格] [VARCHAR](50) NULL,
[价格] [NUMERIC](18, 2) NULL
) ;
--创建供应商表Suppliers
CREATE TABLE [dbo].[Suppliers](
[供应商ID] [INT] IDENTITY(1,1) NOT NULL,
[供应商名称] [VARCHAR](20) NULL,
[地址] [VARCHAR](50) NULL,
[城市] [VARCHAR](20) NULL,
[邮编] [CHAR](6) NULL,
[省份] [VARCHAR](20) NULL
) ;
如上是演示数据库的建表语句，其中用的较多的就是 INT，CHAR，VARCHAR，
DATETIME，NUMERIC等数据类型，上面的中括号([ ])可以省略不写.
注释：在不同的数据库中，相同的数据类型可能有不同的名称。即使名字相同，大小和
其他细节也可能不同！请随时检查文件!
30.5 批注
以上是比较全的数据类型，SQL Server一般常用的数据类型就几种INT(整数类型)，
VARCHAR(可变长字符类型)，CHAR(固定长度字符类型)，DATETIME(日期类型，
带时间)，TIME(时间类型，不带日期)。这些数据类型是在建表的时候就会用到的，
其他一些定义参数时也会使用到。
附录 A SQL 语句快速参考
以下是一些可以当工具书使用的参考语句，都是固定写法，需要的时候可以拿出来
参考一下，一些不懂的可以暂时先跳过，紫色代码均是SQL语句的关键字~
AND / OR 并且/或
SELECT column_name(s)
FROM table_name
WHERE condition
AND|OR condition
ALTER TABLE 修改表
ALTER TABLE table_name
ADD column_name datatype
--或
ALTER TABLE table_name
DROP COLUMN column_name
AS (alias) 重命名
--对列名进行重命名
SELECT column_name AS column_alias
FROM table_name
--对表名进行重命名
SELECT column_name
FROM table_name AS table_alias
BETWEEN...AND... 在某个区间
SELECT column_name(s)
FROM table_name
WHERE column_name
BETWEEN value1 AND value2
CREATE DATABASE 创建数据库
CREATE DATABASE database_name
CREATE TABLE 创建表
CREATE TABLE table_name
(
column_name1 data_type,
column_name2 data_type,
column_name2 data_type,
...
)
CREATE INDEX 创建索引
--创建普通索引
CREATE INDEX index_name
ON table_name (column_name)
--创建唯一索引
CREATE UNIQUE INDEX index_name
ON table_name (column_name)
CREATE VIEW 创建视图
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition
DELETE 删除
--带条件的删除
DELETE FROM table_name
WHERE some_column=some_value
--不带条件的删除
DELETE FROM table_name
DROP DATABASE 删除数据库
DROP DATABASE database_name
DROP INDEX 删除索引
--SQL Server的写法
DROP INDEX table_name.index_name
--DB2/Oracle的写法
DROP INDEX index_name
--Mysql的写法
ALTER TABLE table_name
DROP INDEX index_name
DROP TABLE 删除表
DROP TABLE table_name
GROUP BY 分组
SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name
HAVING 分组过滤条件
SELECT column_name, aggregate_function(column_name)
FROM table_name
WHERE column_name operator value
GROUP BY column_name
HAVING aggregate_function(column_name) operator value
IN 在某些固定值中查找
SELECT column_name(s)
FROM table_name
WHERE column_name
IN (value1,value2,..)
INSERT INTO 插入表
INSERT INTO table_name
VALUES (value1, value2, value3,....)
--或
INSERT INTO table_name
(column1, column2, column3,...)
VALUES (value1, value2, value3,....)
INNER JOIN 内连接
SELECT column_name(s)
FROM table_name1
INNER JOIN table_name2
ON table_name1.column_name=table_name2.column_name
LEFT JOIN 左连接
SELECT column_name(s)
FROM table_name1
LEFT JOIN table_name2
ON table_name1.column_name=table_name2.column_name
RIGHT JOIN 右连接
SELECT column_name(s)
FROM table_name1
RIGHT JOIN table_name2
ON table_name1.column_name=table_name2.column_name
FULL JOIN 全连接
SELECT column_name(s)
FROM table_name1
FULL JOIN table_name2
ON table_name1.column_name=table_name2.column_name
LIKE 模糊匹配
SELECT column_name(s)
FROM table_name
WHERE column_nameLIKE pattern
ORDER BY 排序
SELECT column_name(s)
FROM table_name
ORDER BY column_name [ASC|DESC]
SELECT 查找
SELECT column_name(s)
FROM table_name
SELECT * 查找表的所有字段
SELECT *
FROM table_name
SELECT DISTINCT 查找去除重复的列
SELECT DISTINCT column_name(s)
FROM table_name
SELECT INTO 查询结果插入表
SELECT *
INTO new_table_name [IN externaldatabase]
FROM old_table_name
--或
SELECT column_name(s)
INTO new_table_name [IN externaldatabase]
FROM old_table_name
SELECT TOP 查询前N条记录
SELECT TOP number|percent column_name(s)
FROM table_name
TRUNCATE TABLE 清空表
TRUNCATE TABLE table_name
UNION 去重并集
SELECT column_name(s) FROM table_name1
UNION
SELECT column_name(s) FROM table_name2
UNION ALL 不去重并集
SELECT column_name(s) FROM table_name1
UNION ALL
SELECT column_name(s) FROM table_name2
UPDATE 更新
UPDATE table_name
SET column1=value, column2=value,...
WHERE some_column=some_value
WHERE 条件过滤
SELECT column_name(s)
FROM table_name
WHERE column_name operator value