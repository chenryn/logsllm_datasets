ures of some of the servers, a correct client will only ac-
cept views created by the administrator and will never ac-
cept as current a view that is obsolete (see Section 5.1).
3. System model
Our system consists of a set N of n servers. Servers
can dynamically join and leave the system, i.e. both N
and n can change during execution. To prevent Sibyl at-
tacks [7], the identity of every server is veriﬁed before it
is allowed to join the system. Servers can be either cor-
rect or faulty. A correct server follows its speciﬁcation;
a faulty server can arbitrarily deviate from its speciﬁca-
tion. The set of clients of the service is disjoint from N.
Clients perform read and write operations on the variables
stored in the quorum system. We assume that these oper-
ations return only when they complete (i.e. we consider
conﬁrmable operations [16]).
Our dynamic quorum protocols maintain the same as-
sumptions about client failures of their static counter-
parts. Clients communicate with servers over point-to-
point, asynchronous fair channels. A fair channel guaran-
tees that a message sent an inﬁnite number of times will
reach its destination an inﬁnite number of times. We al-
low channels to drop, reorder, and duplicate messages.
4. A new basis for determining correctness
The ﬁrst step in our transition to dynamic quorum pro-
tocols is to establish the correctness of the static proto-
cols we consider (shown in Figure 3) on a basis that does
not rely on quorum intersection. To do so, we observe that
at the heart of all these protocols lies the Q-RPC prim-
itive [13]. This primitive takes a message as argument,
sends that message to a quorum of responsive servers, and
returns the response from each server in the quorum. Our
approach to extend quorum protocols to the case where
servers are added and removed (and thus quorums may
not intersect anymore) is to deﬁne correctness in terms of
the properties of the data returned by quorum-based op-
erations such as Q-RPC. In this section, we ﬁrst specify
two properties that apply to the data returned by Q-RPC;
then, we prove that these properties are sufﬁcient to en-
sure correctness. In Section 5 we will show that it is pos-
sible to implement Q-RPC-like operations that guarantee
these properties even when quorums do not intersect.
4.1. The transquorum properties
In the protocols listed in Figure 3, quorum-based oper-
ations such as Q-RPC are the fundamental primitives on
top of which read and write operations are built. Not all
Q-RPCs are created equal, however. Some Q-RPC opera-
tions change the state of the servers (e.g. when the mes-
sage passed as an argument contains information that the
servers should store), others do not. Some Q-RPCs need
to return the latest data actually written in the system, oth-
ers are content with returning data that is not obsolete,
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:11 UTC from IEEE Xplore.  Restrictions apply. 
READ
READ
1. Q := Q-RPC(“READ”)
// Q is a set of (cid:2)ts, writer id, data(cid:3)writer
2. reply r := φ(Q) // returns largest valid value
3. Q := Q-RPC(“WRITE”,r)
4. return r.data
1. Q := TRANS-QR(“READ”)
// Q is a set of (cid:2)ts, writer id, data(cid:3)writer
2. reply r := φ(Q) // returns largest valid value
3. Q := TRANS-QW(“WRITE”,r)
4. return r.data
WRITE(D)
1. Q := Q-RPC(“GET TS”)
2. ts := max{Q.ts} + 1
3. m := (cid:2)ts, writer id, D(cid:3)writer
4. Q := Q-RPC(“WRITE”,m)
WRITE(D)
1. Q := TRANS-QT (“GET TS”)
2. ts := max{Q.ts} + 1
3. m := (cid:2)ts, writer id, D(cid:3)writer
4. Q := TRANS-QW(“WRITE”,m)
Figure 2: U-dissemination protocol (fail-stop clients). On the left: Q-RPC. On the right: TRANS-Q.
whether it was written or not. To capture this diversity,
we introduce two properties, timeliness and soundness. We
call them transquorum properties because, as we will see
in Section 5, they do not require quorum intersection to
hold. Intuitively, timeliness says that any read value must
be as recent as the last written value, while soundness says
that any read value must have been written before. Note
that not all Q-RPCs need to be both timely and sound. For
example, Q-RPCs used to gather the current timestamps
associated with the value stored by a quorum of servers do
not need to be sound—all that is required is that the re-
turned timestamps be no smaller than the timestamp of the
last write.
We then deﬁne three sets W, R, and T of Q-RPC-like
quorum operations. Each Q-RPC-like operation in a pro-
tocol belongs to zero or more of these sets.
Let w → r (w “happens before” r) indicate that the
quorum operation w ended (returned) before the quorum
operation r started (in real time). Further, let o be an or-
dering function that maps each quorum operation to an el-
ement of an ordered set M. We deﬁne the transquorum
properties as follows:
(timeliness) ∀w ∈ W,∀r ∈ T , o(r) (cid:7)= ⊥ :
(soundness) ∀r ∈ R, o(r) (cid:7)= ⊥ :
w → r =⇒ o(w) ≤ o(r)
∃w ∈ W s.t. r (cid:7)→ w ∧ o(w) = o(r)
In this paper we always choose o so that when applied
to a Q-RPC-like operation x, it returns both a timestamp
and the data that is associated with x (i.e. either read or
written). This allows us to use the timeliness property to
ensure that readers get recent timestamps and the sound-
ness property to ensure that reads get data that has been
written.
4.2. Proving correctness with transquorums
Transquorum properties are all that is needed to prove
that the protocols listed in Figure 3 correctly provide the
consistency semantics that they advertise. We present the
complete set of proofs in an extended technical report [15].
Space considerations limit us to consider in this paper only
the ﬁrst three protocols in the ﬁgure. All three protocols
have the same client code, shown on the left in Figure 2
and all three guarantee atomic semantics. The server code
is also identical: servers simply store the highest timese-
tamped data they see and send back to the client the data
or its timestamp (in reply to READ or GET TS requests,
respectively). The protocols differ in the size of the quo-
rums they use and in the degree of fault tolerance they
provide: U-dissemination protocols [16] (a variant for fair
channels of the dissemination protocol presented in [13])
can tolerate b Byzantine faulty servers, crash can tolerate
f fail-stop faulty servers, and hybrid-d can tolerate both
b Byzantine failures and f fail-stop failures (f + b fail-
ures in total). To simplify our discussion, since the three
client protocols are identical we will only discuss the U-
dissemination protocol here; all we say also applies to the
crash and hybrid-d protocols, except that the crash pro-
tocol does not use any signatures. Another simpliﬁcation
is that we show the transformation on the non-optimized
version of the U-dissemination protocol. The technical re-
port [15] shows how to shorten reads to a single message
round-trip in the common case by skipping the write-back
when it is not necessary.
4.2.1. Dissemination protocols with transquorums To
illustrate that we only rely on the transquorum properties
and not on the speciﬁc implementation of Q-RPC, we re-
place all Q-RPC calls in the protocol (Figure 2) with an
“abstract” function TRANS-Q that we postulate has the
transquorum properties. TRANS-Q takes the same argu-
ments and returns the same values as Q-RPC.
The U-dissemination protocol on the right of Figure 2
uses TRANS-Q as its low-level quorum communication
primitive. We have annotated each call to indicate which
set it belongs to (R,W, or T ).
We use the notation (cid:2)a(cid:3)b to show that a is signed by
b. Note that data is signed before being written, and ver-
iﬁed before being read. The function φ(Q) returns the
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:11 UTC from IEEE Xplore.  Restrictions apply. 
Operations of this form
r = TRANS-Q(“READ”)
w = TRANS-Q(“W RIT E”, ts, writer id, D)
t = TRANS-Q(“GET T S”)
are assigned this order
o(r) = φ(rret)
o(w) = (warg.ts, warg.writer id, warg.D)
o(t) = (max(tret) + 1,⊥,⊥)5
and this set
R
W
T
Figure 3: The o mapping
largest value in the set Q that has a valid signature us-
ing lexicographical ordering: since our values are triplets
(ts, writer id, D), φ selects the largest valid timestamp,
using writer id and then D to break ties.
We assign each TRANS-Q quorum operation to one of
the sets (R,W or T ) and deﬁne the ordering o(x) for each
quorum operation x. Our assignment is shown in the ta-
ble below. The assignment is fairly intuitive: operations
that change the server state have been assigned to the W
set and the ordering function consists either of what is be-
ing written, or of what the caller extracts from the set of re-
sponses to its query. More precisely, to deﬁne o(x) we ob-
serve that any quorum operation x has two parts: the argu-
ments passed to x and the value that x returns. We use the
notation xarg to refer to the arguments that were passed to
the x operation, and xret to indicate the value returned by
x (that value is always a set).
We want to show that the U-dissemination protocol
with TRANS-Q operations offers atomic semantics. In-
formally, atomic semantics requires all readers to see the
same ordering of the writes, and furthermore that this or-
der be consistent with the order in which writes were
made. Note that atomic semantics is concerned with user-
level (or, simply, user) reads and writes, not to be confused
with the quorum-level operations (or, simply, quorum op-
erations) such as Q-RPC and TRANS-Q. We use lower-
case letters to denote quorum-level operations, and capital
letters to denote user-level operations (e.g. R or W ). Sim-
ilarly, we use the mapping o to denote the ordering con-
straint that the transquorum properties impose on quorum
operations, and the mapping O to denote the ordering con-
straints imposed by the deﬁnition of atomic semantics on
user read and write operations.
Atomic semantics can be deﬁned precisely as follows.
Deﬁnition 1. Every user read R returns the value that
was written by the last user write W preceding R in the
ordering “<”. “<” is a total order on user writes, and
W → X =⇒ W < X and X → W =⇒ X < W for any
user write W and user read or user write X.
We use O, which maps every user read and write opera-
, to deﬁne com-
(cid:1) ⇐⇒ O(X) <
tion to an element of some ordered set M(cid:1)
pletely the ordering relation“<”: X < X
O(X
(cid:1)).
We are now ready to prove our ﬁrst theorem, showing
that we can replace Q-RPC with any operation that satis-
ﬁes the transquorum properties without compromising the
semantics of the U-dissemination protocol. The proof is
structured around the following three lemmas, which are
proved in our technical report [15]:
Lemma 1. Our ordering relation “<” is a total order on
user writes; further, W → X =⇒ W < X and X →
W =⇒ X < W for any user write W and user read or
user write X.
Lemma 2. All user reads R return the value that was writ-
ten by the last user write W preceding R in the “<” or-
dering.
Combining the two lemmas proves our ﬁrst theorem:
Theorem 1. The U-dissemination protocol provides
atomic semantics if (i) the TRANS-Q operations have the
transquorums properties for the function o deﬁned in Fig-
ure 3, and (ii) for all r ∈ R : o(r) (cid:7)= ⊥.
5. Dynamic quorums
The transquorum properties allows us to reason about
quorum protocols without being forced to use quorums
that physically intersect. In this section, we leverage this
result to build DQ-RPC, a quorum-level operation that sat-
isﬁes the transquorum properties but also allows both the
set of servers and the resilience threshold to be adjusted.
We must ﬁrst introduce some way to describe how our
system evolves over time, as N and f change.
5.1. Introducing views
We use the well-established term view to denote the
set N that deﬁnes the quorum system at each point in
time. Each view is characterized by a set of attributes, the
most important of which are the view number t, the set
of servers N(t) and the resilience threshold f(t). In gen-
eral, view attributes include enough information to com-
pute the quorum size q(t). The responsibility to steer the
system from view to view is left with an administrator,
who can begin a view change by invoking the newView
command.
5 We do not explicitly require this value to be larger than any times-
tamp previously sent by this client because we do not allow clients
to issue multiple concurrent writes.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:11 UTC from IEEE Xplore.  Restrictions apply. 
When the administrator calls newView, the view in-
formation stored at the servers is updated. We say that a
view t starts when a server receives a view change mes-
sage for view t (for example because the administrator
called newView(t, . . . )). A view t ends when a quorum
q(t) of servers have processed a message indicating that
some later view u is starting. After starting and before end-
ing, the view is active. A view may start before the previ-
ous view ended, i.e. there may exist multiple active views
at the same time; our protocol makes sure that the pro-
tocol semantics (e.g. atomic) is maintained despite view
changes, even if client operations happen concurrently to
them.
The newView function has the property that after
newView(t) returns, all views older than t have ended
and view t has started. At this point the administrator can