为了达到规定的宽度，必要时填充空格：前导的0表示用零填充
aaud
字符串最大宽度，或十进制数的小数部分的位数
表2.10包含有几个例子，这些例子说明了格式说明符，数据及其对应的输出.由printf产生的输出不
会在行末自动插入一个换行符，除非显式放置了一个换行符。
输出到文件
重定向运算符>与>>用于将输出重定向到文件，而不是原来的标准输出.下面这个程序将所有输
入行的第1个与第3个字段输出到两个文件中：如果第3个字段大于100，则输出到bigpop，否则的
诗，输出到sma1lpop：
dodes$
注意，文件名必须用双引号括起来；如果没有双引号的话，bigpop与smallpop将被当作未初始化的
变量，文件名也可以是表达式或变量：
89
---
## Page 60
第二章AWK语言
52
表2.10:printf格式说明符的示例
fmt
$1
printf(fmt, $1)
9 7
d
97.5
97
5d
97.5
97
&e
97.5
9.750000e+01
8f
97.5
97.500000
87 .2f
97.5
97.50
8g
97.5
97.5
8.6g
97.5
97.5
0
97
141
060
9 7
000141
8X
9 7
61
January
[January]
10s
January
January
-10s
January
|January
.38
January
|Jan|
10.3s
January
Jan|
-10.3s
January
uer
January
#
---
## Page 61
第二章AWK语言
53
上面这个程序做的是同样的工作，程序
{print > $1 }
将所有的输入行输出到以第1个字段命名的文件中.
在print与printf语句中，如果参数列表中的表达式包含有关系运算符，那么，表达式（或者是
参数列表）需要用括号括起来，这样做是为了避免由重定向运算符>带来的歧叉.在程序
{print $1，$2>$3}
中，>是重定向运算符，而不是第2个表达式的一部分，所以程序的功能是将第1个与第2个字段输出到
以第3个字段命名的文件中.如果想让>成为第2个表达式的一部分，使用括号：
{print $1,($2 > $3)}
还有一点需要注意的是，重定向运算符只会打开文件一次；随后的print或printf语句将更多的
数据添加到文件的末尾.重定向运算符>在打丹文件时先把文件内容清空，然后再往里写数据，如果用
的是>>，那么文件原来的内容使会保留下来，而把新的内容添加到原来内容的末尾。
输出到管道
在支持管道的系统中，也可以把输出重定向到管道，而不仅仅是文件，语句
print |command
导致print的输出以管道的方式传递给command
假设我们想要得到一张表格，表格的每一行都是大洲的名字及其对应的人口数，人口按照从大到小
的顺序排列.下面这个程序为每个大洲计算总人口，人口数存储在数组pOp中，END 动作打印大洲的名
字及其对应的人口数，并把打印的内容输送给sort命令
# print continents and populations, sorted by population
BEGIN { FS = "\t" }
{pop[S4]+= $3 }
END(for (c in pop)
printf("&15s\t&6d\n", C, pop[c])|"sort -t'\t′+1rn"
）
程序的输出是
Asia2
2173
Europe
172
North America
340
South America
134
---
## Page 62
第二章AWK语言
54
59
管道的另一个用法是把输出重定向至标准错误文件（Unix系统);于是输出将会出现在用户的终端，
而不是标准输出，有几种惯用语法可以把输出重定向至标准错误文件：
#redirect cat to stderr
# redirect echo to stderr
A/Aap/ 0)
print x
next
{print }
62
也可以把其他命令的输出直接输送给getline.例如，语句
---
## Page 65
第二章AWK语言
57
while ("who" | getline)
n++
执行Unix命令who（只执行一次），并将它的输出传逼给getline.who命令的输出是所有已登录用户
的用户名，while环的每一次选代都从这个用户名列表里读取一行，并递增变量n，当循环结束后，n
的值就是已登录用户的人数，类似的，表达式
'date"|getline d
把命令date的输出保存到变量d中，于是d就被设置为当前日期.同样，在非Unix系统上可能不支持
管道
在所有的涉及到getline的情况中，你必须注意由于文件无法访问而返因的错误，写出这样的代
码是有可能的
while (getline  0) ...
#safe
这个循环只有在getline返回1的情况下才会执行.
命令行变量赋值
63
正如我们之前看到过的那样，awk命令行具有多种形式：
awk'program' f1 f2...
awk -f progfile f1 f2 ...
awk -Fsep -f progfile f1 f2 ...
在上面的命令行中，f1，f2等变量是命令行参数，通常代表文件名.如果一个文件名具有形式uar=text，
那这就表示赋值语句，把text赋值给Dar，当这个参数被当作文件来访问时，执行赋值动作，这种类型的
赋值语句允许程序在读文件之前或之后改变变量的值
命令行参数
命令行参数可以通常aWk的内建数组ARGV来访问，内建变量ARGC的值是参数的个数再加1.对
于命令行
awk -f progfile a v=1 b
ARGC的值是4,ARGV[0]含有awk,ARGV[1]含有a,ARGV[2]含有v=1,ARGV[3]含有b.ARGC之
所以会比参数的个数多1，是因为命令的名字awk也被当作参数之一，存放在索引为0的位置，就像C
程序那样.然而，如果awk程序在命令行中出现，那它就不会被当作参数，对-ffilename或任意的-F
选项同样如此，例如，对于命令行
---
## Page 66
第二章AWK语言
89
awk -F'\t'·$3 > 100' countries
ARGC的值是2,ARGV[1]的值是countries.
下面这个程序回射它的命令行参数：
# echo - print command-line arguments
BEGIN{
for (i = 1; i = p;r > 0
#output:integers 1toq，p to q， or p to q in steps of r
BEGIN{
if (ARGC == 2)
for (i = 1; i <= ARGV[1]; i++)
printi
else if (ARGC == 3)
for (i = ARGV[1]; i <= ARGV[2]; i++)
print i
else if (ARGC == 4)
for (i = ARGV[1]; i <= ARGV[2]; i += ARGV[3])