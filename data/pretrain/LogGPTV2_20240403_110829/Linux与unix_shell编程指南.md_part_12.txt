9.2.4 元字符
这里是a w k中正则表达式匹配操作中经常用到的字符，详细情况请参阅本书第 7章正则表
达式概述。
\ ^ $ . [] | () * + ?
这里有两个字符第7章没有讲到，因为它们只适用于a w k而不适用于g r e p或s e d。它们是：
+ 使用+匹配一个或多个字符。
？ 匹配模式出现频率。例如使用/X Y?Z/匹配X Y Z或Y Z。
9.2.5 条件操作符
表9 - 2给出a w k条件操作符，后面将给出其用法。
加入java编程群：524621833
71
第9章 AWK 介 绍
下载
表9-2 awk条件操作符
操 作 符 描 述 操 作 符 描 述
 = 大于等于
> 关系操作符
+ - * / % ^ 算术操作符
+ + -- 前缀和后缀
前面已经讲到了其中几种操作，下面继续讲述未涉及的部分。
1. 设置输入域到域变量名
在a w k中，设置有意义的域名是一种好习惯，在进行模式匹配或关系操作时更容易理解。
一般的变量名设置方式为n a m e = $ n，这里n a m e为调用的域变量名，n为实际域号。例如设置学
生域名为n a m e，级别域名为b e l t，操作为n a m e = $ 1 ; b e l t s = $ 4。注意分号的使用，它分隔a w k命
令。下面例子中，重新赋值学生名域为 n a m e，级别域为b e l t s。查询级别为Ye l l o w的记录，并
最终打印名称和级别。
2. 域值比较操作
有两种方式测试一数值域是否小于另一数值域。
1) 在B E G I N中给变量名赋值。
2) 在关系操作中使用实际数值。
通常在B E G I N部分赋值是很有益的，可以在a w k表达式进行改动时减少很多麻烦。
使用关系操作必须用圆括号括起来。
下面的例子查询所有比赛中得分在2 7点以下的学生。
用引号将数字引用起来是可选的，“2 7”、2 7产生同样的结果。
加入java编程群：524621833
76
第二部分 文本过滤
下载
第二个例子中给数字赋以变量名B A S E L I N E和在B E G I N部分给变量赋值，两者意义相同。
3. 修改数值域取值
当在a w k中修改任何域时，重要的一点是要记住实际输入文件是不可修改的，修改的只是
保存在缓存里的a w k复本。a w k会在变量N R或N F变量中反映出修改痕迹。
为修改数值域，简单的给域标识重赋新值，如： $ 1 = $ 1 + 5，会将域1数值加5，但要确保赋
值域其子集为数值型。
修改M . Ta n s l e y的目前级别分域，使其数值从 4 0减为3 9，使用赋值语句$ 6 = $ 6 - 1，当然在
实施修改前首先要匹配域名。
4. 修改文本域
修改文本域即对其重新赋值。需要做的就是赋给一个新的字符串。在 J . Tr o l l中加入字母，
使其成为J . L . Tr o l l，表达式为$ 1 = " J . L . Tr o l l "，记住字符串要使用双秒号（ " "），并用圆括号括
起整个语法。
5. 只显示修改记录
上述例子均是对一个小文件的域进行修改，因此打印出所有记录查看修改部分不成问题，
但如果文件很大，记录甚至超过1 0 0，打印所有记录只为查看修改部分显然不合情理。在模式
后面使用花括号将只打印修改部分。取得模式，再根据模式结果实施操作，可能有些抽象，
现举一例，只打印修改部分。注意花括号的位置。
6. 创建新的输出域
在a w k中处理数据时，基于各域进行计算时创建新域是一种好习惯。创建新域要通过其他
域赋予新域标识符。如创建一个基于其他域的加法新域{ $ 4 = $ 2 + $ 3 }，这里假定记录包含3个域，
则域4为新建域，保存域2和域3相加结果。
在文件g r a d e . t x t中创建新域 8保存域目前级别分与域最高级别分的减法值。表达式为
‘{ $ 8 = $ 7 - $ 6 }’，语法首先测试域目前级别分小于域最高级别分。新域因此只打印其值大于零
的学生名称及其新域值。在B E G I N部分加入t a b键以对齐报告头。
加入java编程群：524621833