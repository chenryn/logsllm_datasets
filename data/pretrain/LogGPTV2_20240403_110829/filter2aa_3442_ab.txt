–  Mutual	
  clear 
•  setTimeout	
–  Disrupt	
  the	
  Tme	
  sequence	
•  Garbage	
  Collect	
–  Force	
  IE	
  Memory	
  Protector	
  to	
  reclaim 
Fuzzing 
MemoryProtecLon::CMemoryProtector::ProtectedFree()	
  {	
  if	
  (	
  *((_DWORD	
  *)v6	
  +	
  2)	
  &&	
  (*((_DWORD	
  *)v6	
  +	
  1)	
  >=	
  0x186A0u	
  ||	
  *((_BYTE	
  *)v6	
  +	
  20))	
  )	
  {	
  MemoryProtecLon::CMemoryProtector::ReclaimUnmarkedBlocks();	
  }	
}	
gc	
  =	
  funcLon()	
  {	
  CollectGarbage();	
  arr	
  =	
  new	
  Array();	
  for	
  (var	
  i	
  =	
  0;	
  i	
  SpeciﬁcaTons	
•  SpeciﬁcaTons	
– Scripts	
  (or	
  grep	
  +	
  sed)	
– Manual 
Property	
  dicTonary 
demicm.propDic	
  =	
  {	
  direcLon:	
  {type:	
  'string',	
  normalVal:	
  ['right',	
  'leo'],	
  dirtyVal:	
  [],	
  readOnly:	
  false},	
  accessKey:	
  {type:	
  'string',	
  normalVal:	
  demicm.alpha,	
  dirtyVal:	
  [],	
  readOnly:	
  false},	
  dir:	
  {type:	
  'string',	
  normalVal:	
  ['ltr',	
  'rtl',	
  'auto'],	
  dirtyVal:	
  ['rtl'],	
  readOnly:	
  false},	
  bgColor:	
  {type:	
  'stringColor',	
  normalVal:	
  demicm.color,	
  dirtyVal:	
  [],	
  readOnly:	
  false},	
  aLink:	
  {type:	
  'stringColor',	
  normalVal:	
  demicm.color,	
  dirtyVal:	
  [],	
  readOnly:	
  false},	
  …	
}	
//	
  Some	
  prop	
  of	
  diﬀerent	
  elem	
  with	
  diﬀerent	
  meaning	
demicm.specialProps	
  =	
  ['type',	
  'name',	
  'src',	
  'rel'];	
demicm.type	
  =	
  {	
  source:	
  demicm.MIMETypes,	
  object:	
  demicm.MIMETypes,	
  a:	
  demicm.MIMETypes,	
  buron:	
  ['submit',	
  'buron',	
  'reset',	
  'menu'],	
  input:	
  demicm.inputTypes,	
  select:	
  ['select-­‐one',	
  'select-­‐mulLple'],	
  ol:	
  ['1',	
  'a',	
  'A',	
  'i',	
  'I'],	
  menu:	
  ['popup',	
  'toolbar'],	
}; 
FuncTon	
  dicTonary 
//	
  First	
  parameter	
  is	
  return	
  value	
demicm.funcDic	
  =	
  {	
  //	
  Canvas	
  toDataURL:	
  [	
  {type:	
  'string'},	
  {type:	
  'string',	
  normalVal:	
  ['image/png',	
  'image/jpeg'],	
  dirtyVal:	
  []},	
  {type:	
  'number',	
  normalVal:	
  demicm.normalNum,	
  dirtyVal:	
  demicm.dirtyNum},	
  ],	
  getContext:	
  [	
  {type:	
  'contextObj'},	
  {type:	
  'string',	
  normalVal:	
  ['2d',	
  'webgl'],	
  dirtyVal:	
  []},	
  ],	
  //	
  SVG	
  getSVGDocument:	
  [	
  {type:	
  'SVGDocument'},	
  ], 
Style	
  dicTonary 
demicm.styleDic	
  =	
  {	
  backgroundArachment:	
  ['scroll',	
  'ﬁxed',	
  'inherit'],	
  backgroundClip:	
  ['border-­‐box',	
  'padding-­‐box',	
  'content-­‐box'],	
  backgroundColor:	
  [demicm.color,	
  'transparent',	
  'inherit'],	
  backgroundImage:	
  ['url('	
  +	
  demicm.URL	
  +	
  'demicmImg.gif)',	
  'none',	
  'inherit'],	
  backgroundOrigin:	
  ['padding-­‐box',	
  'border-­‐box',	
  'content-­‐box'],	
  backgroundPosiLonX:	
  [demicm.lengthUnit,	
  demicm.pct,	
  demicm.pos,	
  'inherit'],	
  backgroundPosiLonY:	
  [demicm.lengthUnit,	
  demicm.pct,	
  demicm.pos,	
  'inherit'],	
  backgroundRepeat:	
  ['repeat',	
  'repeat-­‐x',	
  'repeat-­‐y',	
  'no-­‐repeat',	
  'inherit'],	
  backgroundRepeatX:	
  ['repeat',	
  'no-­‐repeat',	
  'inherit'],	
  backgroundRepeatY:	
  ['repeat',	
  'no-­‐repeat',	
  'inherit'],	
Basic	
  dicTonary 
demicm.elemDic	
  =	
  {	
  a	
  :	
  'HTMLAnchorElement',	
  abbr	
  :	
  'HTMLElement',	
  address	
  :	
  'HTMLElement',	
  applet	
  :	
  'HTMLAppletElement',	
  area	
  :	
  'HTMLAreaElement',	
  arLcle	
  :	
  'HTMLElement',	
  …	
  //	
  Pseudo	
  tag	
  unknown	
  :	
  'HTMLUnknownElement',	
  document	
  :	
  'HTMLDocument',	
  Window	
  :	
  'Window',	
  NamedNodeMap	
  :	
  'NamedNodeMap',	
  arr	
  :	
  'Arr',	
  text	
  :	
  'Text',	
  documenvragment	
  :	
  'DocumentFragment',	
  …	
} 
Basic	
  dicTonary 
demicm.langs	
  =	
  [	
  'ab',	
  'aa',	
  'af',	
  'sq',	
  'am',	
  'ar',	
  'hy',	
  'as',	
  'ay',	
  'az',	
  'ba',	
  'eu',	
  'bn',	
  'dz',	
  'ji',	
  'yo',	
  'zu',	
  'bh',	
  'bi',	
  'br',	
  'bg',	
  'my',	
  'be',	
  'km',	
  'ca',	
  'zh',	
  'co',	
  'hr',	
  'cs',	
  'da',	
  'nl',	
  'en',	
  'eo',	
  'et',	
  'fo',	
  'fa',	
  'fa',	
  'x',	
  'ﬁ',	
  'fr',	
  'fy',	
  'gl',	
  'gd',	
  'gv',	
  'ka',	
  'de',	
  'el',	
  'kl',	
  'gn',	
  'gu',	
  'ha',	
  'he',	
  'iw',	
  'hi',	
  'hu',	
  'is',	
  'id',	
  'in',	
  'ia',	
  'ie',	
  'iu',	
  'ik',	
  'ga',	
  'it',	
  'ja',	
  'jv',	
  'kn',	
  'ks',	
  'kk',	
  'rw',	
  'ky',	
  'rn',	
  'ko',	
  'ku',	
  'lo',	
  'la',	
  'lv',	
  'li',	
  'ln',	
  'lt',	
  'mk',	
  'mg',	
  'ms',	
  'ml',	
  'mt',	
  'mi',	
  'mr',	
  'mo',	
  'mn',	
  'na',	
  'ne',	
  'no',	
  'oc',	
  'or',	
  'om',	
  'ps',	
  'pl',	
  'pt',	
  'pa',	
  'qu',	
  'rm',	
  'ro',	
  'ru',	
  'sm',	
  'sg',	
  'sa',	
  'sr',	
  'sh',	
  'st',	
  'tn',	
  'sn',	
  'sd',	
  'si',	
  'ss',	
  'sk',	
  'sl',	
  'so',	
  'es',	
  'su',	
  'sw',	
  'sv',	
  'tl',	
  'tg',	
  'ta',	
  'r',	
  'te',	
  'th',	
  'bo',	
  'L',	
  'to',	
  'ts',	
  'tr',	
  'tk',	
  'tw',	
  'ug',	
  'uk',	
  'ur',	
  'uz',	
  'vi',	
  'vo',	
  'cy',	
  'wo',	
  'xh',	
  'yi'	
];	
demicm.charsets	
  =	
  [	
  'UTF-­‐8',	
  'ISO-­‐8859-­‐1',	
  'ISO-­‐8859-­‐2',	
  'ISO-­‐8859-­‐3',	
  'US_ASCII',	
  'ISO-­‐2022-­‐JP-­‐2',	
  'laLn-­‐greek',	
  'GBK',	
  'GB18030',	
  'UTF-­‐7',	
  'UTF-­‐16LE',	
  'UTF32BE',	
  'GB2312',	
  'Big5',	
  'IBM277',	
  'windows-­‐874'	
];	
Fuzzer	
  Resources 
Extensibility 
•  New	
  stuﬀ	
– GeolocaTon	
– Client-­‐side	
  database	
– Canvas	
– Blobs	
– Speech	
  synthesis	
•  SpeciﬁcaTons	
  +	
  Smart	
  values	
  =	
  DicTonary 
•  New	
  features	
  is	
  valuable	
  J 
funcLon	
  fuzzNewObj()	
  {	
  var	
  args1	
  =	
  [value1,	
  value2];	
  var	
  args2	
  =	
  [value3,	
  value4];	
  switch	
  (rand(2))	
  {	
  case	
  0:	
  newObj.func1(randItem(args1),	
  randItem(args2));	
  break;	
  case	
  1:	
  newObj.func1(randStr,	
  randNum);	
  break;	
  }	
} 
Extensibility 
funcDic	
  =	
  {	
  ...	
  func1:	
  [	
  {type:	
  'boolean'},	
  {type:	
  'string',	
  normalVal:	
  [value1,	
  value2],	
  dirtyVal:	
  []},	
  {type:	
  'number',	
  normalVal:	
  [value3,	
  value4],	
  dirtyVal:	
  []},	
  ],	
  …	
}	
fuzzList.push(newObj);	
Let	
  StateFuzzer	
  Tell	
  How	
  to	
  Fuzz 
•  “Judge	
  a	
  fuzzer	
  by	
  its	
  results.” 
•  Vulnerability	
– UAF 
– Double	
  Free 
– OOB	
  Access	
•  Bug 
– Null	
  Pointer	
  Deference 
– Stack	
  Exhaust 
Event	
  Handle 
•  Idea 
–  Fuzzing:	
  rendering	
  engine	
  -­‐>	
  some	
  state 
–  Set	
  event	
  handler:	
  fuzzing	
  and	
  clear 
–  Fuzzing:	
  ﬁre	
  event	
–  Kind	
  of	
  race	
  condiTon	
•  StateFuzzer	
–  CFlatMarkupPointer	
  UAF 
–  CInput	
  UAF 
–  CFrameSetSite	
  CTreeNode	
  UAF	
  (CVE-­‐2014-­‐1769) 
–  CCaret	
  Tracker	
  UAF 
–  CClipStack	
  OOB	
  Access	
  (CVE-­‐2014-­‐1773) 
ISSUE	
  #1	
IE	
  11	
  Security	
  Bug 