is an iterative approach with the combination of two for-
mal models. One of these models is the candidate security
162162162
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:32:00 UTC from IEEE Xplore.  Restrictions apply. 
else
Get the security architecture S from M.
Save (Push) current FAttack into ¯FAttack.
if Solver returns a model M (i.e., SAT) for FSecure then
Algorithm 1 Security Architecture Synthesis
1: FAttack formalizes the UFDI attack veriﬁcation model.
2: FSecure formalizes the security architecture selection model.
3: loop
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: end loop
end if
Add security constraints to FAttack based on S.
if Solver returns UNSAT for FAttack then
end if
Retrieve (Pop) the saved formalization ¯FAttack into FAttack.
Add the constraint !S to FSecure.
Exit program.
Return S.
else
Different analytical constraints can be used to limit the
search space in the security architecture selection model. From
Equation (6), we know that if no change is possible in the
line power ﬂow, the phase difference between the two buses
connected by the line cannot be changed. Hence, if a bus is
secured (i.e., all the measurements at the bus are secured), a
connected bus’ state cannot be changed with respect to the
secured bus’ state. UFDI attacks on the states of these two
buses are possible through a third bus which is not connected
to the secured bus but connected to the other bus. Therefore,
securing the connected bus is not required to protect state
estimation of the grid. Equation (30) formalizes this constraint.
∀1≤j≤b sbj →
(cid:7)
i∈Lj
((lfi = j) ∧ mz i) → ¬sblti)∧
((lti = j) ∧ mz l+i) → ¬sblfi )
(30)
D. Implementation
Similar to our veriﬁcation model, we encode the candidate
security architecture selection model using SMT [8]. Then,
we implement the synthesis mechanism by combining the
veriﬁcation model and candidate selection model as shown
in Algorithm 1. The algorithm is an iterative process, which
stops when a security architecture is found (line 12) or there
is no more candidate set to verify (line 8).
Here we present a case study based on the IEEE 14-Bus
Test System illustrating how our proposed security architecture
synthesis mechanism produces different security architectures
in different scenarios, as shown in the below:
Scenario 1. The attack model of the ﬁrst scenario is similar to
the ﬁrst part of the example (attacker’s objective 1) as shown
in Section III. In this scenario, the attacker has limited infor-
mation, i.e., admittances of lines 3 and 17 are unknown. The
grid operator can consider such a constraint on the attacker’s
knowledge, if she is certain that the admittance information
regarding this set of lines is neither disclosed nor predictable.
The attacker is also have limited resources, such that he
(27)
E. Case Study
Fig. 2. The ﬂow diagram of the security architecture synthesis mechanism
for protecting state estimation attack.
is,
architecture selection model. That
it selects the set of
buses as a candidate of the security architecture considering
some invariant and user-driven constraints on the security
architecture. We discuss this candidate security architecture
selection model in the following subsection. The second model
is our UFDI attack veriﬁcation model, which veriﬁes whether
the selected candidate architecture can protect state estimation
from UFDI attacks with respect to the security requirements
(i.e., an expected attack model). Security requirements are
ensured when the veriﬁcation model returns unsat (i.e., no
attack vector can be found). If a candidate architecture fails
to ensure the required security, a constraint is added to the
candidate security architecture selection model so that this
architecture is removed from the potential candidate set. The
updated model is solved for another candidate architecture
and the veriﬁcation model
is used to ensure the security
requirements. This process continues till a security architecture
is found, i.e., as long as the veriﬁcation model returns unsat.
However, when the candidate architecture selection model
fails to return a candidate set, then no security architecture
is possible according to the given security requirements.
C. Formalization of Candidate Architecture Selection
The main constraint for selecting the buses in the architec-
ture is the resource limitations of the grid operator. That is,
the number of selected buses cannot exceed a limit (TSB). If
sbj denotes whether bus j is secured, then:
(cid:6)
1≤j≤b
sbj ≤ TSB
Securing a bus implies that all of the measurements that
are recorded at this bus are secured. If Lj denotes the lines
connected to bus j, we formalize this as follows:
∀1≤j≤b sbj → (mz 2l+j → sz 2l+j)
∀1≤j≤b sbj →
(mz i → sz i) ∧ (mz l+i → sz l+i)
(28)
(cid:7)
i∈Lj
The grid operator may have a limitation that she is not
capable to secure a particular set of buses. Those buses should
be excluded from the candidate set, as shown in the following
arbitrary example:
¬sb2 ∧ ¬sb6 ∧ ···
(29)
163163163
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:32:00 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
Fig. 3. The security architectures (the green squared buses needs to be secured) in different scenarios: (a) incomplete information (the red circled line’s
admittance is unknown), (b) complete knowledge, and (c) incorporating with topology poisoning attack (the read lines are potential to inclusion or exclusion
topology attacks). In all scenarios, bus 1 is the reference bus.
(c)
cannot attack more than 12 measurements simultaneously.
The grid operator, due to resource constraints, can secure 4
buses maximally. Bus 1 is considered as the reference bus.
In this scenario, the security architecture produced by our
mechanism suggests that buses 1, 6, 7, and 10 are required to
be secured (as shown in Fig. 3(a)), i.e., all the measurements
in these buses are data integrity protected. However, there can
be different sets of buses, which also can secure the system.
Our synthesis mechanism can synthesize all of these sets.
Scenario 2. In the second scenario, the attacker knows the
complete information (i.e., all line admittances) for launching
UFDI attacks and he has the ability to inject false data to any
number of measurements. In this case, there is no solution
with 4 buses that can secure state estimation of the grid against
UFDI attacks. If the grid operator can secure 5 buses, there is
a solution. In this solution, we need to secure buses 1, 3, 6,
8, and 9 (see Fig. 3(b)).
Scenario 3. This scenario is the worse case situation compared
to the last two scenarios. Here, the attacker has complete
knowledge of the grid and he has the ability to inject false data
to any number of measurements. In addition, the attacker can
change the topology by injecting false data to the topology in-
formation. In this scenario, only lines 5 and 13 are considered
as vulnerable to line exclusion or inclusion attacks. However,
in this case, no solution is possible by securing 5 buses only.
If 6 buses are possible to be secured, then we have a satisﬁable
security architecture (i.e., buses 1, 4, 6, 8, 10, and 14), which
is shown in Fig. 3(c).
V. EVALUATION
In this section, we present the evaluation results showing
the scalability of the proposed veriﬁcation framework as well
as that of the security architecture synthesis mechanism.
A. Methodology
We evaluated the scalability of our proposed veriﬁcation
model by analyzing the time and memory requirements for
executing the model in different problem sizes. Problem size
depends mainly on the number of buses. We evaluated the
scalability of our model based on different sizes of IEEE
test systems, i.e., 14-bus, 30-bus, 57-bus, 118-bus, and 300-
bus [13]. We also evaluated the impact of constraints on the
scalability. Similarly, we evaluated the scalability of our secu-
rity architecture synthesis mechanism. We ran our experiments
on an Intel Core i5 Processor with 8 GB memory. In this
evaluation, we did not compare the time complexity of our
proposed model with that of the related work, especially with
respect to [6] and [7], as neither of them provide results
showing the complexity of their respective mechanisms.
B. Time Complexity of Veriﬁcation Model
Impact of the problem size: Fig. 4(a) shows the execution
time of our proposed UFDI attack veriﬁcation model with
respect to the problem size. We varied the problem size by
considering different IEEE bus test systems. We did three
experiments taking different states to be attacked for each test
case. The execution time of each case is shown in Fig. 4(a)
using a bar chart. A graph is also drawn using the average
execution time for each bus system. We observed that with
respect to the bus size the increase in the execution time
lies between linear and quadratic orders. For a speciﬁc bus
size, we also observed that the execution time differs with a
different choice of states to be attacked. It is worth mentioning
that, although the general problem seems to have a quadratic
growth considering the number of buses and the connectivity
between them, we observed smaller execution time. Because,
the complexity depends not only on the number of buses,
but also on the number of lines, measurements, and attack
attributes. An important feature of power grid networks is that
the average degree of a node (or bus) is roughly 3, regardless
of the number of buses in the system [16]. This feature can
explain why the complexity is not strictly quadratic.
Impact of the number of taken measurements: We also
analyzed the impact of the number of taken measurements
(represented as the percentage of the total potential measure-
ments) on the model execution time. Fig. 4(b) presents the
evaluation results for the 30 and 57-bus test systems. The
results shows that the execution time increases linearly with
the increase in the number of taken measurements. We also
observed similar results for the other test systems. When the
number of recorded measurements increases, the number of
measurements to be considered for false data injection also
increases, which results in a longer veriﬁcation time.
Impact of the Constraints: The veriﬁcation of potential
164164164
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:32:00 UTC from IEEE Xplore.  Restrictions apply. 
)
d
n
o
c
e
S
(
e
m
T
i
 40
 35
 30
 25
 20
 15
 10
 5
 0
)
d
n
o
c
e
S
(
e
m
T
i
 450
 400
 350
 300
 250
 200
 150
 100
 5
Analysis Time w.r.t. Number of Buses
Average Time
14
30
57
Number of Buses
118
300
(a)
Analysis Time w.r.t. Attacker’s Resource Limit
14-Bus Test System
30-Bus Test System
 10
 25
Attacker’s Resource Limit (Measurements)
 15
 20
(c)
Analysis Time w.r.t. Number of Taken Measurements
30-Bus Test System
57-Bus Test System
 3
 2.5
 2
 1.5
 1
 0.5
)
d
n
o
c
e
S
(
e
m
T
i
 0
 50
)
d
n
o
c
e
S
(
e
m
T
i
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
 30
 55
 60
 65
Percentage of Measurements that are Taken for State Estimation
 70
 75
 80
 85
 90
(b)
Analysis Time in Unsat Cases
Satisfiable Case
Unsatisfiable Case
14
30
57
Number of Buses
118
(d)
Fig. 4. The veriﬁcation model execution time in different experiments: (a) the execution time with respect to the number of buses, (b) the execution time with
respect to the number of recorded measurements, (c) the execution time with respect to the attacker’s resource limit, and (d) the execution time in unsatisﬁable
cases with respect to the number of buses.
UFDI attacks depends on the given constraints, especially the
attacker’s access capability and resource limit. We evaluated
the impact of the attacker’s resource limit (i.e., the number
of measurements to which the attacker can inject false data
at a time) on the analysis time. We consider IEEE 14- and
30-bus systems. The analysis result is shown in Fig. 4(c). We
observed that the analysis time decreases with the increase in
the attacker’s resources (i.e., resource constraints relaxes). This
is due to the reason that by increasing the attacker’s resources,
the potential of UFDI attacks increases. However, increasing
the attacker’s resources does not help in UFDI attacks after
some point (e.g., when the attacker’s resource limitation is
almost 20 measurements, as shown in Fig. 4(c)). The reason
is that to launch a UFDI attack to one or more states, the
resource is sufﬁciently large.
Performance in Unsatisﬁable Cases: When constraints are
very tight (e.g., when the attacker can attack a very limited
number of measurements), there can be no satisﬁable solution.
In such cases, the SMT solver takes longer time to give the
unsatisﬁable (unsat) results compared to the execution time
in satisﬁable cases. In unsatisﬁable cases, the SMT solver
needs to explore the entire solution space to conclude that
there is no solution based on the given constraints. Fig. 4(d)
shows a comparison between the execution times for satisﬁable
and unsatisﬁable cases, with respect to different bus systems.
Since we considers different constraints and speciﬁc attack
goals (corresponding to the attack attributes) for an attacker,
the potentiality of an attack vector is already limited. There-