cases.
7. DISCUSSION
In this section, we discuss the potential ramiﬁcations of
these ﬁndings, including what our results mean for browser
complexity.
7.1 Popular and Unpopular Browser Features
There are a small number of standards in the browser
that are extremely popular with website authors, providing
features that are necessary for for modern web pages to
function. These standards provide functionality like querying
the document for elements, inspecting and validating forms,
and making client-side page modiﬁcations.3
A much larger portion of the browser’s functionality, how-
ever, is unused by most site authors. Eleven JavaScript-
exposed standards in Firefox are completely unused in the
ten-thousand most popular websites, and 28 (nearly 37% of
standards available in the browser) are used by less than 1%
of sites.
While many unpopular standards are relatively new to
the browser, youth alone does not explain the extreme un-
popularity of most features in the browser on the open web.
Lesser used features may be of interest only to those creating
applications which require authentication, or to only small
niches of developers and site visitors.
7.2 Blocked Browser Features
When users employ common advertising and tracking
blocking extensions, they further reduce the frequency and
number of standards that are executed. This suggests that
some standards are primarily used to support the advertising
and tracking infrastructure built into the modern web. When
users browse with these common extensions installed, four
additional standards go unused on the web (a total of 15
standards, or 20% of those available in the browser). An
additional 20 standards become used on less than 1% of
websites (for a total of 31 standards, or 41% of standards in
the browser). 16 standards are blocked over 75% of the time
by blocking extensions.
Furthermore, while content blocker rules do not target
JavaScript APIs directly, that a standard like SVG [13],
used on 16% of the Alexa 10k, would be prevented from
running 87% of the time is circumstantial evidence that
whatever website functionality this enables is not necessary
to the millions of people who use content blocking extensions.
This phenomenon lends credence to what has been called
“the Website Obesity Crisis” - the conjecture that websites
3All of which are covered by the Document Object Model
(DOM) Level 1 Speciﬁcation standard, dating back to 1998.
include far more functionality than is actually necessary to
serve users’ goals [12].
The presence of a large amount of unused functionality
in the browser seems to contradict the common security
principal of least privilege, or of giving applications only
the capabilities they need to accomplish their intended task.
This principal exists to limit attack surface and limit the
unforeseen security risks that can come from the unexpected,
and unintended, composition of features. As the list of CVEs
in Figure 2 shows, unpopular and heavily blocked features
have imposed substantial security costs to the browser.
7.3 Future Work
This study develops and validates the use of monkey testing
to elicit browser feature use on the open web. The closed web
(i.e. web content and functionality that is only available after
logging in to a website) may use a broader set of features.
With the correct credentials, the monkey testing approach
could be used to evaluate “closed” websites, although it may
need to be improved with a rudimentary understanding of
site semantics.
Finally, a more complete treatment of the security implica-
tions of these broad APIs would be valuable. In recent years,
plugins like Java and Flash have become less popular, and the
native capabilities of browsers have become more impressive.
The modern browser is a monolithic intermediary between
web applications and user hardware, like an operating sys-
tem. For privacy conscious users or those with special needs
(like on public kiosks, or electronic medical record readers),
understanding the privacy and security implications of this
broad attack surface is important.
8. CONCLUSION
The Web API oﬀers a standardized API for programming
across operating systems and web browsers. This platform
has been tremendously useful in the success of the web as
a platform for content dissemination and application distri-
bution. Feature growth has enabled the modern web, built
on JavaScript and oﬀering functionality like video, games,
and productivity applications. Applications that were once
only possible as native apps or external plugins are now
implemented in JavaScript in the browser.
Over time, more features have been standardized and
implemented in the browser. Some of these features have
been readily adopted by websites to implement new types of
applications; other features are infrequently or never used.
Beyond this popularity divide, however, are features which
are blocked by content blockers in the vast majority of at-
tempted uses. That these features are simultaneously popular
with site authors but overwhelmingly blocked by site users
signals that these features may exist in the browser to serve
the needs of the site author rather than the site visitor.
This work documents that much of the JavaScript-accessible
functionality in the browser is unused by websites, and even
more of it goes unused when popular ad and tracking blocking
extensions are installed. Some of this unpopular functionality
has been implicated in past security vulnerabilities. This
work’s ﬁndings may guide browser vendors, standards au-
thors, and web users in deciding what features are necessary
for a secure, vibrant, useful web.
1089. ACKNOWLEDGEMENTS
We would like to thank our anonymous reviewers and
our shepherd, Christo Wilson, for their feedback and assis-
tance in improving this paper. We would also like to thank
Oliver Hui and Daniel Moreno for their assistance perform-
ing manual website analysis. This work was supported in
part by National Science Foundation grants CNS-1351058,
CNS-1409868, and CNS-1405886.
References
[1] Chromium blink mailing list discussion.
[14] A. Deveria. Can i use. http://caniuse.com/. [Online;
accessed 16-October-2015].
[15] D. Dorwin, J. Smith, M. Watson, and A. Bateman.
Encrypted media extensions.
http://www.w3.org/TR/encrypted-media/, 2015.
[16] P. Eckersley. How unique is your web browser? In Privacy
Enhancing Technologies, pages 1–18. Springer, 2010.
[17] M. Falahrastegar, H. Haddadi, S. Uhlig, and R. Mortier.
Anatomy of the third-party web tracking ecosystem. arXiv
preprint arXiv:1409.1066, 2014.
https://groups.google.com/a/chromium.org/forum/#!
topic/blink-dev/1wWhVoKWztY, 2014. [Online; accessed
15-February-2016].
[18] I. Grigorik, J. Mann, and Z. Wang. Performance timeline
level 2. https://w3c.github.io/performance-timeline/, 2016.
[Online; accessed 11-May-2016].
[2] Chromium blink web features guidelines.
https://dev.chromium.org/blink#new-features, 2016.
[Online; accessed 15-February-2016].
[3] G. Acar, C. Eubank, S. Englehardt, M. Juarez,
A. Narayanan, and C. Diaz. The web never forgets:
Persistent tracking mechanisms in the wild. In Proceedings
of the 2014 ACM SIGSAC Conference on Computer and
Communications Security, pages 674–689. ACM, 2014.
[4] P. Adenot, C. Wilson, and C. Rogers. Web audio api.
http://www.w3.org/TR/webaudio/, 2013.
[5] D. Amalﬁtano, A. R. Fasolino, P. Tramontana,
S. De Carmine, and A. M. Memon. Using gui ripping for
automated testing of android applications. In Proceedings of
the 27th IEEE/ACM International Conference on
Automated Software Engineering, pages 258–261. ACM,
2012.
[6] V. Apparao, S. Byrne, M. Champion, S. Isaacs, A. L. Hors,
G. Nicol, J. Robie, P. Sharpe, B. Smith, J. Sorensen,
R. Sutor, R. Whitmer, and C. Wilson. Document object
model (dom) level 1 speciﬁcation.
https://www.w3.org/TR/REC-DOM-Level-1/, 1998.
[Online; accessed 10-May-2016].
[7] M. Ayenson, D. J. Wambach, A. Soltani, N. Good, and C. J.
Hoofnagle. Flash cookies and privacy ii: Now with html5
and etag respawning. Available at SSRN 1898390, 2011.
[8] R. Balebako, P. Leon, R. Shay, B. Ur, Y. Wang, and
L. Cranor. Measuring the eﬀectiveness of privacy tools for
limiting behavioral advertising. In Web 2.0 Security and
Privacy Workshop, 2012.
[9] A. Bergkvist, D. C. Burnett, C. Jennings, A. Narayanan,
and B. Aboba. Webrtc 1.0: Real-time communication
between browser. https://www.w3.org/TR/webrtc/, 2016.
[Online; accessed 10-May-2016].
[10] Black Duck Software Inc. The chromium (google chrome)
open source project on open hub. https://www.openhub.net/
p/chrome/analyses/latest/code history, 2015. [Online;
accessed 16-October-2015].
[11] M. Butkiewicz, H. V. Madhyastha, and V. Sekar.
Understanding website complexity: measurements, metrics,
and implications. In Proceedings of the 2011 ACM
SIGCOMM conference on Internet measurement conference,
pages 313–328. ACM, 2011.
[12] M. Ceg(cid:32)lowski. The website obesity crisis.
http://idlewords.com/talks/website obesity.htm, 2015.
[13] E. Dahlstr¨om, P. Dengler, A. Grasso, C. Lilley,
[19] I. Grigorik, J. Mann, and Z. Wang. Ui events.
https://w3c.github.io/uievents/, 2016. [Online; accessed
11-May-2016].
[20] I. Grigorik, A. Reitbauer, A. Jain, and J. Mann. Beacon w3c
working draft. http://www.w3.org/TR/beacon/, 2015.
[21] I. Hickson, S. Pieters, A. van Kesteren, P. J¨agenstedt, and
D. Denicola. Html: Channel messaging. https://html.spec.
whatwg.org/multipage/comms.html#channel-messaging,
2016. [Online; accessed 10-May-2016].
[22] I. Hickson, S. Pieters, A. van Kesteren, P. J¨agenstedt, and
D. Denicola. Html: Plugins. https://html.spec.whatwg.org/
multipage/webappapis.html#plugins-2, 2016. [Online;
accessed 10-May-2016].
[23] A. L. Hors, P. L. Hegaret, L. Wood, G. Nicol, J. Robie,
M. Champion, and S. Byrne. Document object model (dom)
level 2 core speciﬁcation.
https://www.w3.org/TR/DOM-Level-2-Core/, 2000.
[Online; accessed 10-May-2016].
[24] A. L. Hors, P. L. Hegaret, L. Wood, G. Nicol, J. Robie,
M. Champion, and S. Byrne. Document object model (dom)
level 3 core speciﬁcation.
https://www.w3.org/TR/DOM-Level-3-Core/, 2004.
[Online; accessed 10-May-2016].
[25] A. L. Hors, P. L. Hegaret, L. Wood, G. Nicol, J. Robie,
M. Champion, and S. Byrne. Web cryptography api.
https://www.w3.org/TR/WebCryptoAPI/, 2014. [Online;
accessed 11-May-2016].
[26] D. Jackson. Webgl speciﬁcation.
https://www.khronos.org/registry/webgl/specs/1.0/, 2014.
[27] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An empirical
study of privacy-violating information ﬂows in javascript
web applications. In Proceedings of the 17th ACM
conference on Computer and communications security,
pages 270–283. ACM, 2010.
[28] S. Kamkar. Evercookie - virtually irrevocable persistent
cookies. http://samy.pl/evercookie/,, 2015. [Online;
accessed 15-October-2015].
[29] T. Kohno, A. Broido, and K. C. Claﬀy. Remote physical
device ﬁngerprinting. Dependable and Secure Computing,
IEEE Transactions on, 2(2):93–108, 2005.
[30] A. Kostiainen. Vibration.
http://www.w3.org/TR/vibration/, 2105.
C. McCormack, D. Schepers, and J. Watt. Scalable vector
graphics (svg) 1.1 (second edition).
http://www.w3.org/TR/SVG11/, 2011.
[31] A. Kostiainen, I. Oksanen, and D. Haza¨el-Massieux. Html
media capture.
http://www.w3.org/TR/html-media-capture/, 2104.
109[32] B. Krishnamurthy and C. Wills. Privacy diﬀusion on the
[47] Z. Rogoﬀ. We’ve got momentum, but we need more protest
web: a longitudinal perspective. In Proceedings of the 18th
international conference on World wide web, pages 541–550.
ACM, 2009.
[33] M. Lamouri and M. C´aceres. Screen orientation.
http://www.w3.org/TR/screen-orientation/, 2105.
[34] F. Lardinois. Google has already removed 8.8m lines of
selﬁes to stop drm in web standards.
https://www.defectivebydesign.org/
weve-got-momentum-but-we-need-more-protest-selﬁes, 2016.
[Online; accessed 11-May-2016].
[48] A. Russell. Doing science on the web. https:
//infrequently.org/2015/08/doing-science-on-the-web/, 2015.
webkit code from blink. http://techcrunch.com/2013/05/16/
google-has-already-removed-8-8m-lines-of-webkit-code-from-blink/,
2013. [Online; accessed 12-May-2016].
[49] P. Snyder, L. Ansari, C. Taylor, and C. Kanich. Web api
usage in the alexa 10k. http://imdc.datcat.org/collection/
1-0723-8=Web-API-usage-in-the-Alexa-10k, 2016.
[35] B. Liu, S. Nath, R. Govindan, and J. Liu. Decaf: detecting
and characterizing ad fraud in mobile apps. In 11th
USENIX Symposium on Networked Systems Design and
Implementation (NSDI 14), pages 57–70, 2014.
[36] A. M. McDonald and L. F. Cranor. Survey of the use of
adobe ﬂash local shared objects to respawn http cookies, a.
ISJLP, 7:639, 2011.
[37] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham.
Fingerprinting information in javascript implementations.
Proceedings of W2SP, 2011.
[38] K. Mowery and H. Shacham. Pixel perfect: Fingerprinting
canvas in html5. Proceedings of W2SP, 2012.
[39] Mozilla Developer Network. Object.prototype.watch() -
javascript | mdn. https://developer.mozilla.org/en-US/docs/
Web/JavaScript/Reference/Global Objects/Object/watch.
[Online; accessed 16-October-2015].
[40] M. Mulazzani, P. Reschl, M. Huber, M. Leithner,
S. Schrittwieser, E. Weippl, and F. Wien. Fast and reliable
browser identiﬁcation with javascript engine ﬁngerprinting.
In Web 2.0 Workshop on Security and Privacy (W2SP),
volume 5, 2013.
[41] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel,
F. Piessens, and G. Vigna. Cookieless monster: Exploring
the ecosystem of web-based device ﬁngerprinting. In IEEE
Symposium on Security and Privacy, 2013.
[42] L. Olejnik, T. Minh-Dung, C. Castelluccia, et al. Selling oﬀ
privacy at auction. In Annual Network and Distributed
System Security Symposium (NDSS). IEEE, 2014.
[43] S. Pieters and D. Glazman. Css object model (css-om).
https://www.w3.org/TR/cssom-1/, 2016. [Online; accessed
10-May-2016].
[44] E. Pujol, O. Hohlfeld, and A. Feldmann. Annoyed users:
Ads and ad-block usage in the wild. In IMC, 2015.
[50] A. Soltani, S. Canty, Q. Mayo, L. Thomas, and C. J.
Hoofnagle. Flash cookies and privacy. In AAAI Spring
Symposium: Intelligent Information Privacy Management,
volume 2010, pages 158–163, 2010.
[51] O. Sorensen. Zombie-cookies: Case studies and mitigation.
In Internet Technology and Secured Transactions (ICITST),
2013 8th International Conference for, pages 321–326. IEEE,
2013.
[52] The MITRE Corporation. CVE-2013-0763. https://cve.
mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0763, 2013.
[Online; accessed 13-November-2015].
[53] The MITRE Corporation. CVE-2014-1577. https://cve.
mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1577, 2014.
[Online; accessed 13-November-2015].
[54] The MITRE Corporation. Common vulnerabilities and
exposures. https://cve.mitre.org/index.html, 2015. [Online;
accessed 13-November-2015].
[55] D. Turner and A. Kostiainen. Ambient light events.
http://www.w3.org/TR/ambient-light/, 2105.
[56] T. Van Goethem, W. Joosen, and N. Nikiforakis. The clock
is still ticking: Timing attacks in the modern web. In
Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security, pages 1382–1393.
ACM, 2015.
[57] A. van Kesteren. Encoding standard.
https://encoding.spec.whatwg.org/, 2016. [Online; accessed
11-May-2016].
[58] A. van Kesteren. Xmlhttprequest.
https://xhr.spec.whatwg.org/, 2016. [Online; accessed
10-May-2016].
[59] A. van Kesteren and L. Hunt. Selectors api level 1.
https://www.w3.org/TR/selectors-api/, 2013. [Online;
accessed 10-May-2016].
[45] E. Rader. Awareness of behavioral tracking and information
[60] V. Vasilyev. ﬁngerprintjs2. https://github.com/Valve, 2015.
privacy concern in facebook and google. In Proc. of
Symposium on Usable Privacy and Security (SOUPS),
Menlo Park, CA, USA, 2014.
[46] M. Reavy. Webrtc privacy. https:
[61] World Wide Web Consortium (W3C). All standards and
drafts. http://www.w3.org/TR/, 2015. [Online; accessed
16-October-2015].
//mozillamediagoddess.org/2015/09/10/webrtc-privacy/,
2015. [Online; accessed 11-May-2016].
[62] F. Zaninotto. Gremlins.js.
https://github.com/marmelab/gremlins.js, 2016.
110