### Optimized Text

#### Introduction
The Nt and Zw functions are designed to call the same kernel functions. For a more focused analysis, we can exclude the Zw functions and the Tp (thread pool) functions, as they are less relevant to our current scope. This leaves us with a smaller, more manageable set of potentially interesting ALPC (Advanced Local Procedure Call) functions.

#### Function Selection
Our goal is not to select a specific set of functions but to make an informed selection based on familiarity or relevance. The list of no-component ALPC functions contains many names with "CompletionList," which may or may not be familiar. In contrast, the Nt ALPC functions appear more diverse and likely serve as gateways from user-land to kernel-land.

To start, let's choose a function that seems to be used in the initial stages of an ALPC setup, such as one with "Create" in its name:
**Selected function: NTAlpcCreatePort**

#### Analyzing NTAlpcCreatePort
We will use Ghidra to analyze the `NTAlpcCreatePort` function in `ntdll.dll`.

1. **Initial Decompilation in Ghidra:**
   - The decompiled code shows a syscall being made with no arguments, returning the integer 0x79.
   - This looks odd, so we cross-check with the assembly instructions.

2. **Assembly Code Analysis:**
   - The actual instructions show that the value 0x79 is moved into EAX, and then the syscall is made.
   - We verify this with IDA Free, which confirms the syscall number 0x79 (121 in decimal).

3. **Takeaway:**
   - Ghidra's decompilation feature can be imprecise, especially for simple functions, but it is a powerful tool with automated decompilation capabilities.
   - The `NtAlpcCreatePort` function in `ntdll.dll` calls into kernel mode using syscall number 0x79.

#### Next Steps
From here, we have three options to continue:

1. **Head to the kernel and look for a similar-named function.**
   - This method is the least reliable but can be useful if function names are similar.

2. **Lookup the syscall number online.**
   - A reliable resource for syscall numbers is [j00ru.vexillium.org/syscalls/nt/64/](https://j00ru.vexillium.org/syscalls/nt/64/).
   - For Windows 10 20H2, this resource points to the kernel function `NtAlpcCreatePort`.

3. **Manually step through the process to resolve the syscall number.**
   - This is the most reliable method and involves using WinDbg to extract the corresponding kernel function.

#### Manual Syscall Resolution with WinDbg
We follow the steps outlined by [www.ired.team](https://www.ired.team/) to manually resolve the syscall number:

1. **Set a breakpoint in `ntdll!NtAlpcCreatePort`:**
   ```plaintext
   kd:> bp ntdll!NtAlpcCreatePort
   ```

2. **Verify the breakpoint:**
   ```plaintext
   kd:> bl
   ```

3. **Run the debuggee until the breakpoint is hit:**
   ```plaintext
   kd:> g
   ```

4. **Disassemble the next instructions:**
   ```plaintext
   kd:> u .
   ```

5. **Lookup the offset in the SSDT for the syscall number 0x79:**
   ```plaintext
   kd:> dd /c1 kiservicetable+4*0x79 L1
   ```

6. **Check the address of the syscall function using the SSDT offset:**
   ```plaintext
   kd:> u kiservicetable + (02b62100>>>4) L1
   ```

Using any of these methods, we confirm that `ntdll!NtAlpcCreatePort` calls into the kernel at `nt!NtAlpcCreatePort`.

#### Kernel Analysis
Next, we use IDA Free to analyze `nt!NtAlpcCreatePort` in `ntoskrnl.exe`:

1. **Open `ntoskrnl.exe` and load Microsoft's public symbols.**
2. **Locate the `NtAlpcCreatePort` function.**
3. **Follow the function calls to understand the underlying operations.**

The first few function calls lead to `ObCreateObjectEx`, which creates a kernel object. The object type is `AlpcPortObjectType`.

#### Object Inspection
To get a better understanding of the created object, we set a breakpoint in WinDbg after the `ObCreateObjectEx` call and inspect the created ALPC port object.

1. **Note down the ALPC object address.**
2. **Find the end of the `AlpcpCreateConnectionPort` function.**
3. **Jump to this location within the same process.**
4. **Load the ALPC object into the `ntkrnlmp!_ALPC_PORT` structure.**

After completing these steps, we find a more complete ALPC port object. We can further inspect the `_EPROCESS` structure to confirm the owning process, which in this case is `svchost.exe`.

#### Further Exploration
You can explore the ALPC port attributes, such as the Quality of Service (QOS) attribute, to check for potential impersonation attack vectors. If you find an ALPC port object with a QOS impersonation level above `SecurityIdentification`, it could be a target for an impersonation attack.

#### Conclusion
This guide should help you get started with exploring and analyzing ALPC. The initial steps may be slow, and you may take a few wrong turns, but this is part of the learning process. For further reading, consider the following books:

- **Windows Internals Part 1**
- **Windows Internals Part 2**
- **Inside Windows Debugging**
- **Windows Kernel Programming**

Enjoy your journey into the world of ALPC and Windows internals!

#### Related Posts
- [Offensive Windows IPC Internals 3: ALPC](https://example.com/post/alpc)
- [Offensive Windows IPC Internals 2: RPC](https://example.com/post/rpc)
- [Offensive Windows IPC Internals 1: Named Pipes](https://example.com/post/named-pipes)