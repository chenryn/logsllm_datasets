### 在线diff源码分析：OGNL v3.1.25 版本的沙箱机制

在 OGNL 的 v3.1.25 版本中，引入了基于黑名单的沙箱机制。这一机制限制了对某些特定方法的调用，并且禁止了那些在 OGNL `invokeMethod()` 方法中没有明显合法用途的类或接口的所有方法的调用。例如，命令执行相关的 `Runtime` 和 `ProcessBuilder` 类的方法被禁止。

#### 示例
将 OGNL 升级到包含黑名单限制的版本后，尝试执行带有命令执行的表达式会抛出异常。这是因为 `invokeMethod()` 方法中使用了 `isAssignableFrom()` 方法来判断类或接口是否相同或为超类/超接口。如果条件满足，则抛出异常：

```
Prevent calls to some specific methods, as well as all methods of certain classes/interfaces for which no (apparent) legitimate use cases exist for their usage within OGNL invokeMethod().
```

### Confluence EL 注入通过 OGNL

#### 测试效果
##### 0x03 框架 WebWork 分析
**WebWork 部分:**

- **Confluence 处理 HTTP 请求的方式**
  - 架构图：[远古架构图](https://developer.atlassian.com/server/confluence/images/42732834.png)
  - 使用的框架：WebWork2（参考 [03 年 PPT](https://example.com/webwork-ppt)）

- **如何绕过内置的黑名单？**
  - 有多种方式可以绕过黑名单，这里以 `ScriptEngine` 为例进行说明。

**百度百科的 WebWork 架构图**

- 描述了一个请求的生命周期，重点关注三个关键部分：
  - **Actions**: 代表一次请求或调用，其 Action 类需要实现 Action 接口或继承 `ActionSupport` 基础类。Action 是请求的控制器，同时也充当数据模型的角色。
  - **Results**: 定义结果页面，指示 Action 执行后的结果显示方式。通过 Result Type 支持多种视图技术（如 JSP、FreeMarker、Velocity）。
  - **Interceptors**: WebWork 的拦截器，在 Action 执行前后调用，提供插拔式的功能注入。例如参数组装、验证、国际化等。

**动态调试处理流程**

- **断点设置**
  - 在 `com.opensymphony.webwork.dispatcher.ServletDispatcher#service` 方法处下断点。
  - 发起请求：`http://10.1.1.1:8090/xxx/login.action`
  - 经过一系列 Filter 处理后，进入 `ServletDispatcher#service` 方法。

- **处理流程**
  - 调用 `getNameSpace()`、`getActionName()` 等方法获取所需属性。
  - 对拦截器数组进行迭代循环，直到 `resultCode` 不为空时跳出循环。
  - 根据 `resultCode` 构建 `this.result` 并获取对应的模板文件 `/login.vm`。
  - 执行 `this.result.execute()` 时调用 `translateVariables()` 对变量进行解析。
  - 最后加载模板文件进行渲染并返回给客户端。

### CVE-2022-26134 未授权 RCE

**安全公告**
- Atlassian 已知悉 Confluence Data Center 和 Server 中存在一个严重的未授权远程代码执行漏洞。该 OGNL 注入漏洞允许未经身份验证的用户在 Confluence 服务器上执行任意代码。

**关键信息**
- **漏洞条件**: 无需任何权限
- **漏洞利用**: OGNL 注入

**补丁分析**
- 移除了 `ActionChainResult#execute()` 中对 `TextParseUtil.translateVariables()` 的调用。根据之前的分析，`translateVariables()` 存在 OGNL 注入风险。

**构造 PoC 验证想法**
- **步骤 1**: 在 `namespace` 处插入 OGNL 表达式
  - 请求 `/login.action` 时，构建 `result` 时使用的类是 `EncodingVelocityResult`，而不是 `ActionChainResult`。
  - 回忆一下，针对 `/xxx/login.action` 的请求，构建 `this.result` 时会根据 `resultCode "input"` 从 `Map results` 中取 `resultConfig`，其 `ClassName` 决定了调用 `Result#execute()` 的子类。

- **步骤 2**: 控制 `resultConfig` 的 `className` 为 `ActionChainResult`，使其执行 `ActionChainResult#execute()`。
  - 当 `resultCode` 等于以下值时，可以成功进入 `ActionChainResult#execute()`：
    - `notpermittedpersonal`
    - `readonly`
    - `notpermitted`
    - `notfound`

- **构造请求**
  - 访问一个没有权限的路径，如 `/dashboard.action`。
  - 再次构造 PoC 验证想法，成功触发 OGNL 注入。

### 漏洞复现
- 弹计算器
  - 成功执行：`curl -kI "http://10.1.1.1:8090/%24%7B%40java.lang.Runtime%40getRuntime%28%29.exec%28%22calc%22%29%7D/dashboard.action"`

### 小结
- 整个过程中，梳理 Confluence 的 HTTP 请求处理流程时发现 OGNL Sink，并逐步定位到 Source，非常有趣。

### 参考资料
1. [Apache Commons OGNL](https://commons.apache.org/proper/commons-ognl/)
2. [CVE-2022-26134 分析](https://y4er.com/posts/cve-2022-26134-confluence-server-data-center-ognl-rce/)
3. [百度百科 WebWork](https://baike.baidu.com/item/webwork/486050)

如有错误，请指正。后续若有更新会在个人博客 [pen4uin.github.io](https://pen4uin.github.io/) 进行修改。