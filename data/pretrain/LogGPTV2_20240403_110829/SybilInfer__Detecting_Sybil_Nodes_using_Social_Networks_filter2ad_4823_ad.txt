can be found in the ﬁnal dataset, since nodes with ini-
tial degree over 3 will have some edges removed reducing
their degree to less than 3.
After pre-processing, the social sub-graph consists of
about 33,000 nodes. First, we ran SybilInfer on this topol-
ogy without introducing any artiﬁcial attack. We found a
bottleneck cut diving off about 2, 000 Sybil nodes. It is
impossible to establish whether these nodes are false pos-
itives (a rate of 6%) or a real-world Sybil attack present
in the LiveJournal network. Since there is no way to es-
tablish ground truth, we do not label these nodes as either
honest/dishonest.
Next, we consider a fraction f of the nodes to be com-
promised and compute the optimal attacker strategy, as in
our experiments with synthetic data. Figure 5 shows the
fraction of malicious identities accepted by SybilInfer as
a function of fraction of malicious entitites in the system.
The trend is similar to our observations on synthetic scale
free topologies. At f = 0.2, the fraction of Sybil identities
accepted by SybilInfer is approximately 0.32.
 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2Fraction of total malicious entitiesFraction of malicious entities (f)Scale Free Topology: 1000 nodesFalse NegativesTheoretical Predictiony=xFigure 5. LiveJournal Topology: fraction of
total malicious identities as a function of
real malicious entities
Figure 6. Comparison with related work
4.5 Comparison with SybilLimit and Sybil-
Guard
SybilGuard [27] and SybilLimit [26] are state of the art
decentralized protocols that defend against Sybil attacks.
Similar to SybilInfer, both protocols exploit the fact that a
Sybil attack disrupts the fast mixing property of the social
network topology, albeit in a heuristic fashion. A brief
overview of the two systems can be found in the appendix,
and their full descriptions is given in [27, 26].
Figure 6 compares the performance of SybilInfer with
the performance of SybilLimit. First it is worth noting
that the fraction of compromised nodes that SybilLimit
tolerates is only a small fraction of the range within which
SybilInfer provide its guarantees. SybilLimit tolerates up
to f = 0.02 compromised nodes when the degree of at-
tackers is low (about degree 5 – green line), while we have
already shown the performance of SybilLimit for compro-
mised fractions up to f = 0.35 in ﬁgure 4. Within the
interval SybilLimit is applicable, our system systemati-
cally outperforms: when very few compromised nodes are
present in the system (f = 0.01) our system only allows
them to control less than 5% of the entities in the system,
versus SybilLimit that allows them to control over 30%
of entities (rendering insecure byzantine fault tolerance
mechanisms that requires at least 2/3 honest nodes) At the
limit of SybilLimit’s applicability range when f = 0.02,
our approach caps the number of dishonest entities in the
system to fewer than 8%, while SybilLimit allows about
50% dishonest entities. (This large fraction renders leader
election or other voting systems ineffective.)
An important difference between SybilInfer and Sybil-
Limit is that the former is not sensitive to the degree of
the attacker nodes. SybilLimit provides very weak guar-
antees when high degree (e.g. degree 10 – red line) nodes
are compromised, and can protect the system only for
f < 0.01. In this case SybilInfer allows for 5% total ma-
licious entities, while SybilLimit allows for over 50%.
This is an illustration that SybilInfer performs an or-
der of magnitude better than the state of the art both in
terms of range of applicability and performance within
that range (SybilGuard’s performance is strictly worse
than SybilLimit’s performance, and is not illustrated.) An
obvious question is: “why does SybilInfer perform so
much better than SybilGuard and SybilLimit?” It is partic-
ularly pertinent since all three systems are making use of
the same assumptions, and a similar intuition, that there
should be a “gap” between the honest and Sybil regions
of a social network. The reason SybilLimit and Sybil-
Guard provide weaker guarantees is that they interpret
these assumptions in a very sensitive way: they assume
that an overwhelming majority of random walks staring in
the honest region will stay in the honest region, and then
bound the number of walks originating from the Sybil re-
gion via the number of corrupt edges. As a result they
are very sensitive to the length of those walks, and can
only provide strong guarantees for a very small number of
corrupt edges. Furthermore the validation procedure re-
lies on collisions between honest nodes, via the birthday
paradox, which adds a further layer of inefﬁciency to esti-
mating good from bad regions.
SybilInfer, on the other hand, interprets the disruption
in fast-mixing between the honest and dishonest region
simply as a faint bias in the last node of a short random
walk (as illustrated in ﬁgures 2(a) and 2(b).) In our ex-
periments, as well as in theory, we observe a very large
fraction of the T walks crossing between the honest and
dishonest regions. Yet the faint difference in the probabil-
ity of landing on nodes in the honest and dishonest regions
is present, and the sampler makes use of it to get good cuts
between the honest and dishonest nodes.
 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.05 0.1 0.15 0.2 0.25 0.3Fraction of total malicious identitiesFraction of colluding entitiesLiveJournal Topology: 31603 nodesFraction of malicious identitiesy=x 0 0.1 0.2 0.3 0.4 0.5 0.6 0.006 0.008 0.01 0.012 0.014 0.016 0.018 0.02Fraction of total malicious entitiesFraction of malicious entities (f)Scale Free Topology: 1000 nodesSybilLimit, uniformSybilLimit, low degreeSybilInfery=x4.6 Computational and time complexity
Two implementations of the SybilInfer sampler were
build in Python and C++, of about 1KLOC each. The
Python implementation can handle 10K node networks,
while the C++ implementation has handled up to 30K
node networks, returning results in seconds.
The implementation strategy for both samplers has fa-
voured a low time complexity over storage costs. The
critical loop performs O(|V | · log |V |) Metropolis Hast-
ings iterations per sample returned, each only requiring
about O(log |V |) operations. Two copies of the full state
are stored, as well as associated data that allows for fast
updating of the state, which requires O(|V |) storage. The
transcript of evidence traces T is also stored, as well as an
index over it, which dominates the storage required and
makes it order O(|V | · log |V |).
There is a serious time complexity penalty associated
with implementing non-naive sampling strategies. Our
Python implementation biases the candidate moves to-
wards nodes that are more or less likely to be part of the
honest set. Yet exactly sampling nodes from this known
probability distribution, naively may raise the cost of each
iteration to be O(|V |). Depending on the differential be-
tween the highest and lowest probabilities, faster sampling
techniques like rejection sampling [15] can be used to
bring the cost down. The Python implementation uses a
variant of Metropolis-Hastings to implement selection of
candidate nodes for the next move, at a computation cost
of O(log |V |). The C++ implementation uses naive sam-
pling from the honest or dishonest sets, and has a very low
cost per iteration of order O(1).
The Markov chain sampling techniques used consider
sequences of states that are very close to each other, dif-
fering at most by a single node. This enables a key
optimization, where the counts NXX , NX ¯X , N ¯XX and
N ¯X ¯X are stored for each state and updated when the state
changes. This simple variant of self-adjusting computa-
tion [1], allows for very fast computations of the proba-
bilities associated with each state. Updating the counts,
and associated information is an order O(log |V |) opera-
tion. The alternative, of recounting these quantities from
T would cost O(|V | log |V |) for every iteration, leading
to a total computational complexity for our algorithm of
O((|V | log |V |)2). Hence implementing it is vital to get-
ting results fast.
Finally our implementations use a zero-copy strategy
for the state. Two states and all associated information are
maintained at any time, the current state and the candi-
date state. Operations on the candidate state can be done
and undone in O(log |V |) per operation. Accepted moves
can be committed to the current state at the same cost.
These operations can be used to maintain the two states
synchronised for use by the Metropolis-Hastings sampler.
The naive strategy of re-writing the full state would cost
O(|V |) per iteration, making the overall complexity of the
scheme O(|V |2 log |V |).
5 Deployment Strategies
So far we presented an overview of the SybilInfer algo-
rithm, as well as a theoretical and empirical evaluation of
its performance when it comes to detecting Sybil nodes.
The core of the algorithm outperforms SybilGuard and
SybilLimit, and is applicable in settings beyond which
the two systems provide no security guarantees whatso-
ever. Yet a key difference between the previous systems
and SybilInfer is the latter’s reliance on the full friendship
graph to perform the random walks that drive the infer-
ence engine. In this section we discuss how this constraint
still allows SybilInfer to be used for important classes of
applications, as well as how it can be relaxed to accom-
modate peer-to-peer systems with limited resources per
client.
5.1 Full social graph knowledge
The most straightforward way of applying SybilInfer
is using the full graph of a social network to infer which
nodes are honest and which nodes are Sybils, given a
known honest seed node. This is applicable to centralised
on-line services, like free email hosting services, blogging
sites, and discussion forums that want to deter spammers.
Today those systems use a mixture of CAPTCHA [25]
and network based intrusion detection to eliminate mass
attacks. SybilInfer could be used to either complement
those mechanisms and provide additional information as
to which identities are suspicious, or replace those sy-
stems when they are expensive and error prone. One of
the ﬁrst social network based Sybil defence systems, Ad-
vogato [14], worked in such a centralized fashion.
The need to know the social graph does not preclude
the use of SybilInfer in distributed or even peer-to-peer sy-
stems. Social networks, once mature, are generally stable
and do not change much over time. Their rate of change
is by no means comparable to the churn of nodes in the
network, and as a result the structure of the social network
could be stored and used to perform inference on multiple
nodes in a network, along with a mechanisms to share oc-
casional updates. The storage overhead for storing large
social networks is surprisingly low: a large social network
with 10 billion nodes (roughly the population of planet
earth) with each node having about 1000 friends, can be
stored in about 187Gb of disk space uncompressed.
In
such settings it is likely that SybilInfer computation will
be the bottleneck, rather than storage of the graph, for the
foreseeable future.
A key application of Sybil defences is to ensure that
volunteer relays in anonymous communication networks
belong to independent entities, and are not controlled
by a single adversary. Practical systems like Mixmas-
ter [17], Mixminion [5] and Tor [7] operate such a volun-
teer based anonymity infrastructure, that are very suscep-
tible to Sybil attacks. Extending such an infrastructure to
use SybilInfer is an easy task: each relay in the system
would have to indicate to the central directory services
which other nodes it considers honest and non-colluding.
The graph of nodes and mutual trust relations can be used
to run SybilInfer centrally by the directory service, or by
each individual node that wishes to use the anonymizing
service. Currently, the largest of those services, the Tor
network has about 2000 nodes, which is well within the
computation capabilities of our implementations.
5.2 Partial social graph knowledge
SybilInfer can be used to detect and prevent Sybil at-
tacks, using only a partial view of the social graph. In the
context of a distributed or peer-to-peer system each user
discovers only a ﬁxed diameter sub-graph around them.
For example a user may choose to retrieve and store all
other users two or three hops away in the social network
graph, or discover a certain threshold of nodes in a breadth
ﬁrst manner. SybilInfer is then applied on the extracted
sub-graph to detect potential Sybil regions. This allows
the user to prune its social neighbourhood from any Sybil
attacks, and is sufﬁcient for selecting a set of honest nodes
when sampling from the full network is not required. Dis-
tributed backup and storage, and all friend and friend-
of-friend based sharing protocols can beneﬁt from such
protection. The storage and communication cost of this
scheme is constant and relative to the number of nodes in
the chosen neighbourhood.
In cases where nodes can afford to know a larger frac-
tion of the social graph, they could choose to discover
O(c·(cid:112)|V |) nodes in their neighbourhood, for some small
integer c. This increases the chances two arbitrary nodes
have to know a common node, that can perform the Sybil-
Infer protocol and act as an introduction point for the
nodes. In this protocol Alice and Bob want to ensure the
other party is not a Sybil. They ﬁnd a node C that is in the
c ·(cid:112)|V neighbourhood of both of them, and each make
sure that with high probability it is honest. They then con-
tact node C that attests to both of them, given its local
run of the SybilInfer engine, that they are not Sybil nodes
(with C as the honest seed.) This protocol introduces a
single layer of transitive trust, and therefore it is neces-
sary for Alice and Bob to be quite certain that C is indeed
honest. Its storage and communication cost is O((cid:112)|V |),
which is the same order of magnitude as SybilLimit and
SybilGuard. Modifying this simple minded protocol into
a fully ﬂedged one-hop distributed hash table [13] is an
interesting challenge for future work.
SybilInfer can also be applied to speciﬁc on-line com-
munities. In such cases a set of nodes belonging to a cer-
tain community of interest (a social club, a committee, a
town, etc.) can be extracted to form a sub-graph. SybilIn-
fer can then be applied on this partial view of the graph,
to detect nodes that are less well integrated than others in
the group. There is an important distinction between us-
ing SybilInfer in this mode or using it with the full graph:
while the results using the full graph output an “absolute”
probability for each node being a Sybil, applying SybilIn-
fer to a partial view of the network only provides a “rel-
ative” probability the node is honest in that context. It is
likely that nodes are tagged as Sybils, because they do not
have many contacts within the select group, which given
the full graph would be classiﬁed as honest. Before ap-
plying SybilInfer in this mode it is important to assess, at
least, whether the subgroup is fast-mixing or not.
5.3 Using SybilInfer output optimally
Unlike previous systems the output of the SybilInfer
algorithm is a probabilistic statement, or even more gen-
erally, a set of samples that allows probabilistic statements
to be estimated. So far in the work we discussed how to
make inferences about the marginal probability speciﬁc
nodes are honest of dishonest by using the returned sam-
ples to compute Pr[i is honest] for all nodes i. In our ex-
periments we applied a 0.5 threshold to the probability to
classify nodes as honest or dishonest. This is a rather lim-
ited use of the richer output that SybilInfer provides.
Distributed system applications can, instead of using
marginal probabilities of individual nodes, estimate the
probability that the particular security guarantees they re-
quire hold. High latency anonymous communication sy-
stems, for example, require a set of different nodes such
that with high probability at least one of them is honest.
Path selection is also subject to other constraints (like la-
tency.)
In this case the samples returned by SybilInfer
can be used to calculate exactly the sought probability, i.e.
the probability a single node in the chosen path is hon-
est. Onion routing based system, on the other hand are
secure as long as the ﬁrst and last hop of the relayed com-
munication is honest. As before, the samples returned by
SybilInfer can be used to choose a path that has a high
probability to exhibit this characteristic.
Other distributed applications, like peer-to-peer storage
and retrieval have similar needs, but also tunable param-
eters that depend on the probability of a node being dis-
honest. Storage systems like OceanStore, use Rabin’s in-
formation dispersion algorithm to divide ﬁles into chunks
stored and retrieved to reconstruct a ﬁle. The degree of
redundancy required crucially depends on the probability
nodes are compromised. Such algorithms can use SybilIn-
fer to foil Sybil attacks, and calculate the probability the
set of nodes to be used to store particular ﬁles contains
certain fractions of honest nodes. This probability can in
turn inform the choice of parameters to maximise the sur-
vivability of the ﬁles.