Writing a user-dened datatype
Heikki Linnakangas
VMwareInc.
October 30, 2013
What is a datatype?
A datatype encapsulates semantics and rules.
PostgreSQL oers many built-in datatypes, e.g:
 integer
 text
 timestamp
 point
Other datatypes can be derived from the base types:
 domains
 arrays
 ranges
This presentation
PART 1
 Creating a new base type from scratch
 Dene basic functions and operators
 B-tree indexing support
PART 2
 Advanced indexing
Creating a new base type
PostgreSQL stores data as opaque Datums
 Fixed or variable length (varlena) chunk of memory
 Can be copied around the system and stored on disk
All other operations are dened by the data type author. Minimum:
 Input and output functions. These convert between string
representation and the internal format.
Example
A datatype for representing colours
 As a 24-bit RGB value.
 For convenience, stored in a 32-bit integer
 String representation in hex:
#000000  black
#FF0000  red
#0000A0  dark blue
#FFFFFF  (white)
Input function
Datum
colour_in(PG_FUNCTION_ARGS)
{
const char *str = PG_GETARG_CSTRING(0);
int32 result;
sscanf(str, "#%X", &result);
PG_RETURN_INT32(result);
}
Input function, with error checking
Datum
colour_in(PG_FUNCTION_ARGS)
{
const char *str = PG_GETARG_CSTRING(0);
int32 result;
if (str[0] != ’#’ ||
strspn(&str[1], "01234567890ABCDEF") != 6)
{
ereport(ERROR,
(errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),
errmsg("invalid input syntax for colour: \"%s\"",
str)));
}
sscanf(str, "#%X", &result);
PG_RETURN_INT32(result);
}
Output function
Datum
colour_out(PG_FUNCTION_ARGS)
{
int32 val = PG_GETARG_INT32(0);
char *result = palloc(8);
snprintf(result, 8, "#%06X", val);
PG_RETURN_CSTRING(result);
}
Register type with PostgreSQL
CREATE OR REPLACE FUNCTION colour_in(cstring)
RETURNS colour
AS ’MODULE_PATHNAME’ LANGUAGE ’C’ IMMUTABLE STRICT;
CREATE OR REPLACE FUNCTION colour_out(colour)
RETURNS cstring
AS ’MODULE_PATHNAME’ LANGUAGE ’C’ IMMUTABLE STRICT;
CREATE TYPE colour (
INPUT = colour_in,
OUTPUT = colour_out,
LIKE = pg_catalog.int4
);
The type is ready!
postgres=# CREATE TABLE colour_names (
name text,
rgbvalue colour
);
CREATE TABLE
postgres=# INSERT INTO colour_names
VALUES (’red’, ’#FF0000’);
INSERT 0 1
postgres=# SELECT * FROM colour_names ;
name | rgbvalue
------+----------
red | #FF0000
(1 row)
CREATE TYPE syntax
CREATE TYPE name (
INPUT = input_function,
OUTPUT = output_function
[ , RECEIVE = receive_function ]
[ , SEND = send_function ]
[ , TYPMOD_IN = type_modifier_input_function ]
[ , TYPMOD_OUT = type_modifier_output_function ]
[ , ANALYZE = analyze_function ]
[ , INTERNALLENGTH = { internallength | VARIABLE } ]
[ , PASSEDBYVALUE ]
[ , ALIGNMENT = alignment ]
[ , STORAGE = storage ]
[ , LIKE = like_type ]
[ , CATEGORY = category ]
[ , PREFERRED = preferred ]
[ , DEFAULT = default ]
[ , ELEMENT = element ]
[ , DELIMITER = delimiter ]
[ , COLLATABLE = collatable ]
)
Operators
A type needs operators:
postgres=#
SELECT * FROM colour_names WHERE rgbvalue = ’#FF0000’;
ERROR: operator does not exist: colour = unknown
Equality operator
We can borrow the implementation from built-in integer operator:
CREATE FUNCTION colour_eq (colour, colour) RETURNS bool
LANGUAGE internal AS ’int4eq’ IMMUTABLE STRICT;
CREATE OPERATOR = (
PROCEDURE = colour_eq,
LEFTARG = colour, RIGHTARG = colour,
HASHES, MERGES
);
Operators
Ok, now it works:
postgres=# SELECT * FROM colour_names WHERE rgbvalue = ’#FF0000’;
name | rgbvalue
------+----------
red | #FF0000
(1 row)
More functions
CREATE FUNCTION red(colour) RETURNS int4
LANGUAGE C AS ’MODULE_PATHNAME’ IMMUTABLE STRICT;
CREATE FUNCTION green(colour) RETURNS int4
LANGUAGE C AS ’MODULE_PATHNAME’ IMMUTABLE STRICT;
CREATE FUNCTION blue(colour) RETURNS int4
LANGUAGE C AS ’MODULE_PATHNAME’ IMMUTABLE STRICT;
Extracting the components
postgres=# select name, rgbvalue,
red(rgbvalue), green(rgbvalue), blue(rgbvalue)
from colour_names ;
name | rgbvalue | red | green | blue
------------+----------+-----+-------+------
red | #FF0000 | 255 | 0 | 0
green | #00FF00 | 0 | 255 | 0
blue | #0000FF | 0 | 0 | 255
white | #FFFFFF | 255 | 255 | 255
black | #000000 | 0 | 0 | 0
light grey | #C0C0C0 | 192 | 192 | 192
lawn green | #87F717 | 135 | 247 | 23
dark grey | #808080 | 128 | 128 | 128
(8 rows)
Luminence
The human eye is more sensitive to green light.
CREATE FUNCTION luminence(colour) RETURNS numeric AS
$$
SELECT (0.30 * red($1) +
0.59 * green($1) +
0.11 * blue($1))
/ 255.0
$$
LANGUAGE SQL IMMUTABLE STRICT;
Luminence
postgres=# select name, rgbvalue,
red(rgbvalue), green(rgbvalue), blue(rgbvalue),
round( luminence(rgbvalue), 6) as luminence
from colour_names ;
name | rgbvalue | red | green | blue | luminence
------------+----------+-----+-------+------+-----------
red | #FF0000 | 255 | 0 | 0 | 0.300000
green | #00FF00 | 0 | 255 | 0 | 0.590000
blue | #0000FF | 0 | 0 | 255 | 0.110000
white | #FFFFFF | 255 | 255 | 255 | 1.000000
black | #000000 | 0 | 0 | 0 | 0.000000
light grey | #C0C0C0 | 192 | 192 | 192 | 0.752941
lawn green | #87F717 | 135 | 247 | 23 | 0.740235
dark grey | #808080 | 128 | 128 | 128 | 0.501961
(8 rows)
Summary so far
We have created a type
 With input and output functions
 With equality operator
 With functions for splitting a colour into components and
calculating luminence
Ordering
postgres=# SELECT * FROM colour_names ORDER BY rgbvalue;
ERROR: could not identify an ordering operator for type
colour
Ordering operator
What is an ordering operator?
 =
 >
We’re going dene these in terms of luminence
Implementing ordering functions
CREATE FUNCTION colour_lt (colour, colour)
RETURNS bool AS $$
SELECT luminence($1) = luminence($2);
$$ LANGUAGE SQL IMMUTABLE STRICT;
CREATE FUNCTION colour_gt (colour, colour)
RETURNS bool AS $$
SELECT luminence($1) > luminence($2);
$$ LANGUAGE SQL IMMUTABLE STRICT;
Create operators
CREATE OPERATOR = (
LEFTARG=colour, RIGHTARG=colour,
PROCEDURE=colour_ge);
CREATE OPERATOR > (
LEFTARG=colour, RIGHTARG=colour,
PROCEDURE=colour_gt);
One more thing...
We’ll also need a comparison function that returns -1, 0, or 1
depending on which argument is greater;
CREATE FUNCTION luminence_cmp(colour, colour)
RETURNS integer AS $$
SELECT CASE WHEN $1 = $2 THEN 0
WHEN luminence($1) < luminence($2) THEN 1
ELSE --1 END;
$$ LANGUAGE SQL IMMUTABLE;