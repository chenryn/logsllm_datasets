### Text Optimization

#### Introduction and Definitions
In this section, we introduce the necessary notations and definitions for the cryptographic protocol. Specifically, we define the relationships between old and new coin commitments, serial numbers, and address keys.

- **Notation:**
  - \( \text{cm}_{\text{old}, i} \) and \( \text{cm}_{\text{new}, i} \): Old and new coin commitments.
  - \( \text{pk}_{\text{old}, i} \) and \( \text{pk}_{\text{new}, i} \): Old and new public keys.
  - \( \text{sk}_{\text{old}, i} \) and \( \text{sk}_{\text{new}, i} \): Old and new secret keys.
  - \( \text{enc}_{\text{old}, i} \) and \( \text{enc}_{\text{new}, i} \): Old and new encryption keys.
  - \( \text{addr}_{\text{old}} \) and \( \text{addr}_{\text{new}} \): Old and new addresses.
  - \( \text{a}_{\text{old}, i} \) and \( \text{a}_{\text{new}, i} \): Old and new authentication paths.

A witness \( \vec{a} \) specifies authentication paths for the two new coin commitments, the entirety of coin information about both the old and new coins, and address secret keys for the old coins.

#### Validity Conditions for a Witness
Given a POUR instance \( \vec{x} \), a witness \( \vec{a} \) is valid for \( \vec{x} \) if the following conditions hold:

1. **For each \( i \in \{1, 2\} \):**
   - **a)** The old coin commitment \( \text{cm}_{\text{old}, i} \) appears on the ledger, i.e., \( \text{path}_i \) is a valid authentication path for leaf \( \text{cm}_{\text{old}, i} \) with respect to root \( \text{rt} \) in a CRH-based Merkle tree.
   - **b)** The old address secret key \( \text{sk}_{\text{old}, i} \) matches the old address public key \( \text{pk}_{\text{old}, i} \), i.e., \( \text{pk}_{\text{old}, i} = \text{PRF}_{\text{addr}}(\text{sk}_{\text{old}, i}, 0) \).
   - **c)** The old serial number \( \text{sn}_{\text{old}, i} \) is computed correctly, i.e., \( \text{sn}_{\text{old}, i} = \text{PRF}_{\text{sn}}(\text{sk}_{\text{old}, i}, \rho_{\text{old}, i}) \).
   - **d)** The old coin \( \text{c}_{\text{old}, i} \) is well-formed, i.e., \( \text{cm}_{\text{old}, i} = \text{COMM}_{\text{r}_{\text{old}, i}}(\text{pk}_{\text{old}, i} \| \rho_{\text{old}, i}) \).
   - **e)** The new coin \( \text{c}_{\text{new}, i} \) is well-formed, i.e., \( \text{cm}_{\text{new}, i} = \text{COMM}_{\text{r}_{\text{new}, i}}(\text{pk}_{\text{new}, i} \| \rho_{\text{new}, i}) \).
   - **f)** The old address secret key \( \text{sk}_{\text{old}, i} \) ties \( \text{hSig} \) to \( \text{h}_i \), i.e., \( \text{h}_i = \text{PRF}_{\text{pk}}(\text{sk}_{\text{old}, i}, \text{hSig}) \).

2. **Balance Preservation:**
   - The balance is preserved, i.e., \( v_{\text{new}, 1} + v_{\text{new}, 2} + v_{\text{pub}} = v_{\text{old}, 1} + v_{\text{old}, 2} \).
   - Additionally, \( v_{\text{old}, 1} + v_{\text{old}, 2} \leq v_{\text{max}} \) and \( v_{\text{new}, 1}, v_{\text{new}, 2} \geq 0 \).

#### Arithmetic Circuit for POUR
Recall that in this paper, zk-SNARKs are relative to the language of arithmetic circuit satisfiability (see Section II). We express the checks in POUR via an arithmetic circuit, denoted \( C_{\text{POUR}} \). The depth \( d_{\text{tree}} \) of the Merkle tree needs to be hardcoded in \( C_{\text{POUR}} \), making it a parameter of our construction. The maximum number of supported coins is then \( 2^{d_{\text{tree}}} \).

### Algorithm Constructions

We now describe the construction of the DAP scheme \( \Pi = (\text{Setup}, \text{CreateAddress}, \text{Mint}, \text{Pour}, \text{VerifyTransaction}, \text{Receive}) \), whose intuition was given in Section I-B. Figure 2 provides the pseudocode for each of the six algorithms in \( \Pi \), using the building blocks introduced in Sections IV-A and IV-B. In the construction, we hardcode two quantities.

#### Setup
- **Inputs:** Security parameter \( \lambda \)
- **Outputs:** Public parameters \( \text{pp} \)
  1. Construct \( C_{\text{POUR}} \) for POUR at security \( \lambda \).
  2. Compute \( (\text{pk}_{\text{POUR}}, \text{vk}_{\text{POUR}}) := \text{KeyGen}(1^\lambda, C_{\text{POUR}}) \).
  3. Compute \( \text{pp}_{\text{enc}} := G_{\text{enc}}(1^\lambda) \).
  4. Compute \( \text{pp}_{\text{sig}} := G_{\text{sig}}(1^\lambda) \).
  5. Set \( \text{pp} := (\text{pk}_{\text{POUR}}, \text{vk}_{\text{POUR}}, \text{pp}_{\text{enc}}, \text{pp}_{\text{sig}}) \).
  6. Output \( \text{pp} \).

#### CreateAddress
- **Inputs:** Public parameters \( \text{pp} \)
- **Outputs:** Address key pair \( (\text{addr}_{\text{pk}}, \text{addr}_{\text{sk}}) \)
  1. Compute \( (\text{pk}_{\text{enc}}, \text{sk}_{\text{enc}}) := K_{\text{enc}}(\text{pp}_{\text{enc}}) \).
  2. Randomly sample a PRF seed \( \text{ask} \).
  3. Compute \( \text{apk} = \text{PRF}_{\text{addr}}(\text{ask}, 0) \).
  4. Set \( \text{addr}_{\text{pk}} := (\text{apk}, \text{pk}_{\text{enc}}) \).
  5. Set \( \text{addr}_{\text{sk}} := (\text{ask}, \text{sk}_{\text{enc}}) \).
  6. Output \( (\text{addr}_{\text{pk}}, \text{addr}_{\text{sk}}) \).

#### Mint
- **Inputs:**
  - Public parameters \( \text{pp} \)
  - Coin value \( v \in \{0, 1, \ldots, v_{\text{max}}\} \)
  - Destination address public key \( \text{addr}_{\text{pk}} \)
- **Outputs:** Coin \( c \) and mint transaction \( \text{tx}_{\text{Mint}} \)
  1. Parse \( \text{addr}_{\text{pk}} \) as \( (\text{apk}, \text{pk}_{\text{enc}}) \).
  2. Randomly sample a PRF seed \( \rho \).
  3. Randomly sample two COMM trapdoors \( r, s \).
  4. Compute \( k := \text{COMMr}(\text{apk} \| \rho) \).
  5. Compute \( \text{cm} := \text{COMMs}(v \| k) \).
  6. Set \( c := (\text{addr}_{\text{pk}}, v, \rho, r, s, \text{cm}) \).
  7. Set \( \text{tx}_{\text{Mint}} := (\text{cm}, v, *) \), where \( * := (k, s) \).
  8. Output \( c \) and \( \text{tx}_{\text{Mint}} \).

#### VerifyTransaction
- **Inputs:**
  - Public parameters \( \text{pp} \)
  - A (mint or pour) transaction \( \text{tx} \)
  - The current ledger \( L \)
- **Outputs:** Bit \( b \), equals 1 if the transaction is valid
  1. If given a mint transaction \( \text{tx} = \text{tx}_{\text{Mint}} \):
     - Parse \( \text{tx}_{\text{Mint}} \) as \( (\text{cm}, v, *) \), and \( * \) as \( (k, s) \).
     - Set \( \text{cm}' := \text{COMMs}(v \| k) \).
     - Output \( b := 1 \) if \( \text{cm} = \text{cm}' \), else output \( b := 0 \).
  2. If given a pour transaction \( \text{tx} = \text{tx}_{\text{Pour}} \):
     - Parse \( \text{tx}_{\text{Pour}} \) as \( (\text{rt}, \text{sn}_{\text{old}, 1}, \text{sn}_{\text{old}, 2}, \text{cm}_{\text{new}, 1}, \text{cm}_{\text{new}, 2}, v_{\text{pub}}, \text{info}, *) \), and \( * \) as \( (\text{pksig}, \text{h}_1, \text{h}_2, \pi_{\text{POUR}}, \text{C}_1, \text{C}_2, \sigma) \).
     - If \( \text{sn}_{\text{old}, 1} = \text{sn}_{\text{old}, 2} \) or \( \text{sn}_{\text{old}, 1} \) or \( \text{sn}_{\text{old}, 2} \) appears on \( L \), output \( b := 0 \).
     - If the Merkle root \( \text{rt} \) does not appear on \( L \), output \( b := 0 \).
     - Compute \( \text{hSig} := \text{CRH}(\text{pksig}) \).
     - Set \( \vec{x} := (\text{rt}, \text{sn}_{\text{old}, 1}, \text{sn}_{\text{old}, 2}, \text{cm}_{\text{new}, 1}, \text{cm}_{\text{new}, 2}, v_{\text{pub}}, \text{hSig}, \text{h}_1, \text{h}_2) \).
     - Set \( m := (\vec{x}, \pi_{\text{POUR}}, \text{info}, \text{C}_1, \text{C}_2) \).
     - Compute \( b := \text{Vsig}(\text{pksig}, m, \sigma) \).
     - Compute \( b' := \text{Verify}(\text{vk}_{\text{POUR}}, \vec{x}, \pi_{\text{POUR}}) \), and output \( b \land b' \).

#### Pour
- **Inputs:**
  - Public parameters \( \text{pp} \)
  - The Merkle root \( \text{rt} \)
  - Old coins \( \text{c}_{\text{old}, 1}, \text{c}_{\text{old}, 2} \)
  - Old addresses secret keys \( \text{sk}_{\text{old}, 1}, \text{sk}_{\text{old}, 2} \)
  - Path \( \text{path}_1 \) from commitment \( \text{cm}(\text{c}_{\text{old}, 1}) \) to root \( \text{rt} \)
  - Path \( \text{path}_2 \) from commitment \( \text{cm}(\text{c}_{\text{old}, 2}) \) to root \( \text{rt} \)
  - New values \( v_{\text{new}, 1}, v_{\text{new}, 2} \)
  - New addresses public keys \( \text{pk}_{\text{new}, 1}, \text{pk}_{\text{new}, 2} \)
  - Public value \( v_{\text{pub}} \)
  - Transaction string \( \text{info} \)
- **Outputs:** New coins \( \text{c}_{\text{new}, 1}, \text{c}_{\text{new}, 2} \) and pour transaction \( \text{tx}_{\text{Pour}} \)
  1. For each \( i \in \{1, 2\} \):
     - Parse \( \text{c}_{\text{old}, i} \) as \( (\text{pk}_{\text{old}, i}, v_{\text{old}, i}, \rho_{\text{old}, i}, r_{\text{old}, i}, s_{\text{old}, i}, \text{cm}_{\text{old}, i}) \).
     - Parse \( \text{sk}_{\text{old}, i} \) as \( (a_{\text{old}, i}, \text{sk}_{\text{enc}, i}) \).
     - Compute \( \text{sn}_{\text{old}, i} := \text{PRF}_{\text{sn}}(\text{sk}_{\text{old}, i}, \rho_{\text{old}, i}) \).
     - Parse \( \text{pk}_{\text{new}, i} \) as \( (a_{\text{new}, i}, \text{pk}_{\text{enc}, i}) \).
     - Randomly sample a PRF seed \( \rho_{\text{new}, i} \).
     - Randomly sample two COMM trapdoors \( r_{\text{new}, i}, s_{\text{new}, i} \).
     - Compute \( k_{\text{new}, i} := \text{COMMr}_{\text{new}, i}(\text{pk}_{\text{new}, i} \| \rho_{\text{new}, i}) \).
     - Compute \( \text{cm}_{\text{new}, i} := \text{COMMs}_{\text{new}, i}(v_{\text{new}, i} \| k_{\text{new}, i}) \).
     - Set \( \text{c}_{\text{new}, i} := (\text{pk}_{\text{new}, i}, v_{\text{new}, i}, \rho_{\text{new}, i}, r_{\text{new}, i}, s_{\text{new}, i}, \text{cm}_{\text{new}, i}) \).
     - Set \( \text{C}_i := E_{\text{enc}}(\text{pk}_{\text{enc}, i}, (v_{\text{new}, i}, r_{\text{new}, i}, s_{\text{new}, i})) \).
  2. Generate \( (\text{pksig}, \text{sk}_{\text{sig}}) := K_{\text{sig}}(\text{pp}_{\text{sig}}) \).
  3. Compute \( \text{hSig} := \text{CRH}(\text{pksig}) \).
  4. Compute \( \text{h}_1 := \text{PRF}_{\text{pk}}(\text{sk}_{\text{old}, 1}, \text{hSig}) \) and \( \text{h}_2 := \text{PRF}_{\text{pk}}(\text{sk}_{\text{old}, 2}, \text{hSig}) \).
  5. Set \( \vec{x} := (\text{rt}, \text{sn}_{\text{old}, 1}, \text{sn}_{\text{old}, 2}, \text{cm}_{\text{new}, 1}, \text{cm}_{\text{new}, 2}, v_{\text{pub}}, \text{hSig}, \text{h}_1, \text{h}_2) \).
  6. Set \( \vec{a} := (\text{path}_1, \text{path}_2, \text{c}_{\text{old}, 1}, \text{c}_{\text{old}, 2}, \text{sk}_{\text{old}, 1}, \text{sk}_{\text{old}, 2}) \).
  7. Compute \( \pi_{\text{POUR}} := \text{Prove}(\text{pk}_{\text{POUR}}, \vec{x}, \vec{a}) \).
  8. Set \( m := (\vec{x}, \pi_{\text{POUR}}, \text{info}, \text{C}_1, \text{C}_2) \).
  9. Compute \( \sigma := S_{\text{sig}}(\text{sk}_{\text{sig}}, m) \).
  10. Set \( \text{tx}_{\text{Pour}} := (\text{rt}, \text{sn}_{\text{old}, 1}, \text{sn}_{\text{old}, 2}, \text{cm}_{\text{new}, 1}, \text{cm}_{\text{new}, 2}, v_{\text{pub}}, \text{info}, *) \), where \( * := (\text{pksig}, \text{h}_1, \text{h}_2, \pi_{\text{POUR}}, \text{C}_1, \text{C}_2, \sigma) \).
  11. Output \( \text{c}_{\text{new}, 1}, \text{c}_{\text{new}, 2} \) and \( \text{tx}_{\text{Pour}} \).

This optimized version of the text should be more clear, coherent, and professional.