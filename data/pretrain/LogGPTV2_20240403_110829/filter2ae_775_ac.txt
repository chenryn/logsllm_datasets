                } else {
                    IStandardExpressionParser parser = StandardExpressions.getExpressionParser(configuration);
                    FragmentExpression fragmentExpression;
                    try {
                 // 根据viewTemplateName得到FragmentExpression
                        fragmentExpression = (FragmentExpression)parser.parseExpression(context, "~{" + viewTemplateName + "}");
                    } catch (TemplateProcessingException var25) {
                        throw new IllegalArgumentException("Invalid template name specification: '" + viewTemplateName + "'");
                    }
            //创建ExecutedFragmentExpression
                    ExecutedFragmentExpression fragment = FragmentExpression.createExecutedFragmentExpression(context, fragmentExpression);
             //获取templateName和markupSelectors
             templateName = FragmentExpression.resolveTemplateName(fragment);
                    markupSelectors = FragmentExpression.resolveFragments(fragment);
                    Map nameFragmentParameters = fragment.getFragmentParameters();
                    if (nameFragmentParameters != null) {
                        if (fragment.hasSyntheticParameters()) {
                            throw new IllegalArgumentException("Parameters in a view specification must be named (non-synthetic): '" + viewTemplateName + "'");
                        }
                        context.setVariables(nameFragmentParameters);
                    }
                }
          ...
          viewTemplateEngine.process(templateName, processMarkupSelectors, context, (Writer)templateWriter);
      }
比如当viewTemplateName为`welcome ::
header`则会将welcome解析为templateName，将header解析为markupSelectors。
上面只是分析了为什么要根据`::`做不同的处理，并不涉及到漏洞，但是当视图名中包含`::`会执行下面的代码。
    fragmentExpression = (FragmentExpression)parser.parseExpression(context, "~{" + viewTemplateName + "}");
在`StandardExpressionParser#parseExpression`中会通过`preprocess`进行预处理，预处理根据该正则`\\_\\_(.*?)\\_\\_`提取`__xx__`间的内容，获取`expression`并执行`execute`方法。
    private static final Pattern PREPROCESS_EVAL_PATTERN = Pattern.compile("\\_\\_(.*?)\\_\\_", 32);
        static String preprocess(IExpressionContext context, String input) {
            if (input.indexOf(95) == -1) {
                return input;
            } else {
                IStandardExpressionParser expressionParser = StandardExpressions.getExpressionParser(context.getConfiguration());
                if (!(expressionParser instanceof StandardExpressionParser)) {
                    return input;
                } else {
                    Matcher matcher = PREPROCESS_EVAL_PATTERN.matcher(input);
                    if (!matcher.find()) {
                        return checkPreprocessingMarkUnescaping(input);
                    } else {
                        StringBuilder strBuilder = new StringBuilder(input.length() + 24);
                        int curr = 0;
                        String remaining;
                        do {
                            remaining = checkPreprocessingMarkUnescaping(input.substring(curr, matcher.start(0)));
              //提取__之间的内容
                            String expressionText = checkPreprocessingMarkUnescaping(matcher.group(1));
                            strBuilder.append(remaining);
             //获取expression
                            IStandardExpression expression = StandardExpressionParser.parseExpression(context, expressionText, false);
                            if (expression == null) {
                                return null;
                            }
            //执行execute方法
                            Object result = expression.execute(context, StandardExpressionExecutionContext.RESTRICTED);
                            strBuilder.append(result);
                            curr = matcher.end(0);
                        } while(matcher.find());
                        remaining = checkPreprocessingMarkUnescaping(input.substring(curr));
                        strBuilder.append(remaining);
                        return strBuilder.toString().trim();
                    }
`execute`经过层层调用最终通过SPEL执行表达式的内容。
也就是说这个漏洞本质上是`SPEL`表达式执行。
### URI PATH
下面的情况也可以触发漏洞,这个可能很多师傅和我一样都觉得很奇怪，这个并没有返回值，理论上是不会执行的。
    @GetMapping("/doc/{document}")
        public void getDocument(@PathVariable String document) {
            log.info("Retrieving " + document);
            //returns void, so view name is taken from URI
        }
前面我们分析了`SpingMVC`视图解析的过程，在解析视图首先获取返回值并封装为`ModleAndView`，而在当前当前环境中并没有返回值，按理说`ModelAndView`应该为空，为什么还能正常得到`ModleAndView`呢？
原因主要在`DispatcherServlet#doDispatch`中，获取`ModleAndView`后还会执行`applyDefaultViewName`方法。
    protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {
         ...
                        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
                        if (asyncManager.isConcurrentHandlingStarted()) {
                            return;
                        }
                        this.applyDefaultViewName(processedRequest, mv);
           }
`applyDefaultViewName`中判断当`ModelAndView`为空，则通过`getDefaultViewName`  
获取请求路径作为`ViewName`。这也是在`urlPath`中传入Payload可以执行的原因。
    private void applyDefaultViewName(HttpServletRequest request, @Nullable ModelAndView mv) throws Exception {
            if (mv != null && !mv.hasView()) {
                String defaultViewName = this.getDefaultViewName(request);
                if (defaultViewName != null) {
                    mv.setViewName(defaultViewName);
                }
            }
        }
但是需要注意的是如果要在`urlPath`中传入payload,则不能有返回值，否则就不会调用`applyDefaultViewName`设置了。下面的方式将不会导致代码执行。
    @GetMapping("/doc/{document}")
        public String getDocument(@PathVariable String document, HttpServletResponse response) {
            log.info("Retrieving " + document);
            return "welcome";
        }
#### 回显失败问题分析
当在URL PATH中使用下面的POC会拿不到结果。
    /doc/__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22whoami%22).getInputStream()).next()%7d__::.x
经过分析问题主要是在`StandardExpressionParser#parseExpression`,在`preprocess`预处理结束后还会通过`Expression.parse`进行一次解析，这里如果解析失败则不会回显。
    static IStandardExpression parseExpression(IExpressionContext context, String input, boolean preprocess) {
            IEngineConfiguration configuration = context.getConfiguration();
            String preprocessedInput = preprocess ? StandardExpressionPreprocessor.preprocess(context, input) : input;
            IStandardExpression cachedExpression = ExpressionCache.getExpressionFromCache(configuration, preprocessedInput);
            if (cachedExpression != null) {
                return cachedExpression;
            } else {
                Expression expression = Expression.parse(preprocessedInput.trim());
                if (expression == null) {
                    throw new TemplateProcessingException("Could not parse as expression: \"" + input + "\"");
                } else {
                    ExpressionCache.putExpressionIntoCache(configuration, preprocessedInput, expression);
                    return expression;
                }
            }
        }
使用上面的`POC`，`parse`的内容如下，这里可以看到`::`后没有内容，因此这里肯定是会失败的。
而在`templatename`那个Demo中，`parse`内容如下是`::`后是有内容的。所以能否回显的关键就是`Expression.parse`能否正常执行。
**但是我们在URL PATH的POC中也设置了::.x为什么会被去掉呢？**
在分析`URL PATH`这种方式能获取`ModelAndView`的原因时，我们分析过会在`applyDefaultViewName`中获取URL  
Path作为`ModelAndView`的name，这个操作在`getViewName`中完成，`getLookupPathForRequest`仅仅获取了请求的地址并没有对后面的`.x`做处理，处理主要是在`transformPath`中完成的。
    public String getViewName(HttpServletRequest request) {
        String lookupPath = this.urlPathHelper.getLookupPathForRequest(request, HandlerMapping.LOOKUP_PATH);
        return this.prefix + this.transformPath(lookupPath) + this.suffix;
    }
`transformPath`中通过`stripFilenameExtension`去除后缀，是这部分导致了`.x`后内容为空。
    protected String transformPath(String lookupPath) {
            String path = lookupPath;
            if (this.stripLeadingSlash && lookupPath.startsWith("/")) {
                path = lookupPath.substring(1);
            }
            if (this.stripTrailingSlash && path.endsWith("/")) {
                path = path.substring(0, path.length() - 1);
            }
            //
            if (this.stripExtension) {
                path = StringUtils.stripFilenameExtension(path);
            }
            if (!"/".equals(this.separator)) {
                path = StringUtils.replace(path, "/", this.separator);
            }
            return path;
        }
`stripFilenameExtension`去除最后一个`.`后的内容，所以可以通过下面的方式绕过。
    /doc/__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec("whoami").getInputStream()).next()%7d__::assadasd.asdas
## 漏洞修复
### 配置ResponseBody或RestController注解
    @GetMapping("/doc/{document}")
        @ResponseBody
        public void getDocument(@PathVariable String document) {
            log.info("Retrieving " + document);
            //returns void, so view name is taken from URI
        }
配置了`ResponseBody`注解确实无法触发，经过调试在`applyDefaultViewName`中`ModelAndView`是`Null`而非`ModelAndView`对象，所以`hasView()`会导致异常，不会设置视图名。
所以我们要分析创建`ModelAndView`对象的方法，也就是`getModelAndView`，这里`requestHandled`设置为`True`时会返回Null，而不会创建视图。
当我们设置了`ResponseBody`注解后，handler返回的是`RequestResponseBodyMethodProcesser`,所以这里会调用它的`handleReturnValue`,设置了`RequestHandled`属性为True。
配置`RestController`修复和这种方式类似，也是由于使用`RequestResponseBodyMethodProcesser`设置了`RequestHandled`属性导致不能得到`ModelAndView`对象了。
有小伙伴可能要问，上面只是讲的`URL
PATH`中的修复，`templatename`中这种方式也能修复嘛？答案是肯定的，根本原因在设置了`RequestHandled`属性后，`ModelAndView`一定会返回Null。
### 通过redirect:
>
> 根据springboot定义，如果名称以`redirect:`开头，则不再调用`ThymeleafView`解析，调用`RedirectView`去解析`controller`的返回值
所以配置`redirect：`主要影响的是获取视图的部分。在`ThymeleafViewResolver#createView`中，如果视图名以`redirect:`开头，则会创建`RedirectView`并返回。所以不会使用`ThymeleafView`解析。
### 方法参数中设置HttpServletResponse 参数
    @GetMapping("/doc/{document}")
        public void getDocument(@PathVariable String document, HttpServletResponse response) {
            log.info("Retrieving " + document);
        }
> 由于controller的参数被设置为HttpServletResponse，Spring认为它已经处理了HTTP  
>  Response，因此不会发生视图名称解析。
首先声明下 **这种方式只对返回值为空的情况下有效，也就是**`URL PATH` **的方式** ，下面我会解释一下原因。
设置了`HttpServletResponse`后也是设置`requestHandled`设置为True导致在`applyDefaultViewName`无法设置默认的ViewName。
但是它的设置是在`ServletInvocableHandlerMethod#invokeAndHandle`中。由于`mavContainer.isRequestHandled()`被设置为True，所以进入到IF语句中设置了`requestHandled`属性，
**但是这里的前提条件是`returnValue`为空，所以这种修复方法只有在返回值为空的情况下才有效。**
`requestHandled`的属性设置在`HandlerMethodArgumentResolverComposite#resolveArgument`解析参数时，这里不同的传参方式获得的`ArgumentResolver`是不同的，比如没加`HttpServletResponse`时得到的是`PathVariableMethodArgumentResolver`。
加上后会对`HttpServletResponse`也进行参数解析，解析后的结果为`ServletResponseMethodArgumentResolver`，在它的`resolveArgument`方法中，会设置`requestHandled`属性。
## 总结
`Thymeleaf` 模板注入和我理解的不太一样，之前以为这种模板注入应该是解析特定标签时候导致的问题。  
从修复的角度来讲使用`@ResponseBody`或者`@RestController`更容易修复漏洞，而设置`HttpServletResponse`有一定的局限性，对`templatename`的方式无用。
## 参考
  * [Java安全之Thymeleaf SSTI分析](https://www.anquanke.com/post/id/254519)
  * [Thymeleaf一篇就够了](https://developer.aliyun.com/article/769977)