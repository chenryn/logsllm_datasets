5,574,905
1,586,325
1,892,911
Table III: Size of created databases
Default Parameters: The default context in a diff ﬁle
is 3 lines of code. Unless otherwise noted, we set n = 4.
n = 4 when the amount of context c = 3 guarantees that
every reported duplicate had at least one changed line along
with surrounding context. In all experiments for unpatched
code clones we set θ = 1, e.g., with the default parameters
all n-tokens from the original buggy code segment needed
to be found in an unpatched copy to report a bug. m is
the size of a Bloom ﬁlter and N is the number of n-tokens
to be hashed into a Bloom ﬁlter. ReDeBug used 256KB-
sized Bloom ﬁlters where the m/N ratio was always at least
greater than 32. ReDeBug took advantage of 3 fast hash
functions: djb2, sdbm, and jenkins [6].
C. Performance
We ran ReDeBug to create the database for each source
code dataset. Figure 3 shows the database build time. The
database build for Ubuntu Maverick and Debian Lenny both
took about 6 hours. The database build for SourceForge took
about 23.3 hours. This is the end-to-end time including the
time to read in ﬁles, normalize, tokenize, put into the Bloom
ﬁlter, and to store on disk for all source code written in a
variety of languages, e.g., C/C++, Java, Shell, Perl, Python,
54
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:03 UTC from IEEE Xplore.  Restrictions apply. 
 4
 3.5
 3
 2.5
 2
 1.5
 1
)
s
e
t
u
n
i
m
(
s
g
u
b
y
r
e
u
q
o
t
e
m
T
i
Ubuntu Oneiric
Debian Squeeze
Debian Lenny
Ubuntu Maverick
 0.5
Linux Kernel
 0
57K
1.6M
1M
   1.1M
 1.9M
Source Forge
5.6M
The number of source files in a DB
Figure 4: Time to query 1,634 bugs to various sizes of DBs
)
s
e
t
u
n
i
m
(
s
g
u
b
y
r
e
u
q
o
t
e
m
T
i
 8
 7
 6
 5
 4
 3
 2
 1
 0
 0
 200
 400
 600
 800
 1000
 1200  1400
 1600
The number of queried bugs
Figure 5: Time to query with various number of bugs against
the entire DB
Ruby, and PHP. The experiments suggest that the time to
build a database linearly increases as the size of the source
code increases. Once ReDeBug has built the initial database,
incremental update is quickly done by adding/changing only
the relevant parts of the database.
The resulting database sizes and the number of projects
and ﬁles in databases are described in Table III. As a
reference point, Debian Lenny required 282GB to store
1,155,594 ﬁles without compression, but only 6.0GB with
compression in ReDeBug. The large compression factor is
due to the sparseness of the Bloom ﬁlters.
Figure 4 depicts the time to query 1,634 security-related
patches (δ1 and δ2) to each database. As the size of a
database (the number of ﬁles in a database) grew, the time to
query bugs increased linearly. Though there was an overhead
to recover compressed Bloom ﬁlters to perform the set
the querying time was fast, e.g., 0.04
membership test,
second per bug against about 1 million source ﬁles in the
case of Debian Lenny.
Figure 5 shows the time it took to compare a varying
number of bugs against the whole database including Σ1
and Σ2. The query time has a very gentle upward slope.
The results suggest querying even a large number of patches
should take only a few minutes. For example,
took
about 6 minutes 21 seconds to query 15 diffs, and this
time increased only slightly to 7 minutes 46 seconds for
1,634 diffs.
it
Together these 3 graphs show that ReDeBug is highly
scalable, and it can be applied to ﬁnd unpatched code copies
in day-to-day development. The time it takes us to perform
all operations increases linearly with the size of the database,
and grows very slowly with the number of diffs.
D. Security-Related Bugs
1) {δ1 & δ2 } → Σ1: When security-related bugs are
ﬁxed in the original projects, all the relevant code clones
should also be corrected. In practice, unfortunately, code
reuse among open source projects is usually ad-hoc, which
makes it difﬁcult to update all relevant projects when the
patch is released. An attacker may be able to easily identify
the same known vulnerabilities (δ1 and δ2) in other projects
(Σ1) that are not patched yet.
We queried δ1 and δ2 to Σ1 to measure how many
unpatched code clones are detected, which approximates
how many (potentially) vulnerable projects an attacker may
be able to spot when a patch becomes available. The total
number of unpatched code clones in Σ1 for δ1 and δ2 was
12,791 using the default parameters of n = 4 and c = 3.
The number of matches to each dataset in Σ1 is shown in
Figure 6. The old stable, but still supported, Debian Lenny
and Ubuntu Maverick have 1,482 and 1,058 unpatched code
clones, respectively.
2) {δ1 & δ2 } →Σ 2: We measured how many unpatched
code clones are identiﬁed for δ1 and δ2 in Σ2 consisting of
the latest versions of Debian Squeeze and Ubuntu Oneiric.
This evaluation demonstrates roughly how responsive the
new version of an OS is to previously released security-
related patches. Σ2 still has 1,991 unpatched code clones for
δ1; furthermore, 764 unpatched code clones are reported for
δ2, which indicates that unpatched code clones are recurring
in OS distributions.
3) δ1 → Σ1 vs. δ1 → Σ2: We compared 1,838 unpatched
code clones in Σ1 and 1,991 unpatched code clones in Σ2 for
δ1; and we found that 1,379 unpatched code clones have per-
sisted. Table IV shows the number of unpatched code clones
identiﬁed from different years’ patches. It is interesting to
note that security vulnerabilities that were patched over a
decade ago (from 2001) still have 21 unpatched code clones
present in Σ1. Even Σ2 still have 496 unpatched code clones
from 2006 patches. This result demonstrates that unpatched
code clones persist in modern distributions.
55
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:03 UTC from IEEE Xplore.  Restrictions apply. 
s
e
n
o
l
c
e
d
o
c
d
e
h
c
t
a
p
n
u
f
o
r
e
b
m
u
n
e
h
T
 9000
 8000
 7000
 6000
 5000
 4000
 3000
 2000
 1000
 0
8,711
δ
δ
1
2
1,141
697
361
341
Debian
Lenny
Ubuntu
Maverick
3
0
Linux
Kernel
2.6.37.4
1,537
1,048
943
484
280
Source
Forge
Debian
Squeeze
Ubuntu
Oneiric
s
e
h
c
t
a
p
f
o
r
e
b
m
u
n
e
h
T
 300
 250
 200
 150
 100
 50
 0
 0
 50
 100
 150
 200
 250
 300
 350
 400
The number of identified unpatched code clones
Figure 6: The number of unpatched code clones in Σ1 and
Σ2
Figure 7: The identiﬁed unpatched code clones per patch
2001
2
0
0
19
0
0
21
2006
109
161
0
1162
264
232
1928
2007
2008
76
35
0
227
46
45
429
88
62
0
746
77
73
1046
2009
565
248
1
3845
379
341
5379
2010
301
191
2
2712
282
252
3740
2011
341
361
0
1537
484
280
3003
Lenny
Maverick
Kernel
SrcForge
Squeeze
Oneiric
Total
The size of n
# of queried diffs
Un-
patched
code
clones
Debian Lenny
Ubuntu Maverick
Linux Kernel 2.6.37.4
SourceForge (C/C++)
Debian Squeeze
Ubuntu Oneiric
Total
n = 4
n = 5
n = 7
1,634
1,482
1,058
3
10,248
1,532
1,223
15,546
1,248
1,013
736
2
6,211
1,061
828
9,851
503
309
251