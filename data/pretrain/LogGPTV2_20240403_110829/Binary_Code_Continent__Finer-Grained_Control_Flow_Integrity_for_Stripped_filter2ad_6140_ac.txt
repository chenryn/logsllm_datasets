them. Secondly, we modify the relevant table entries of the func-
tions that have been duplicated, so that if the original function is
called at runtime the corresponding new function will actually be
executed.
We take foo in the code of Figure 2 as an example to show
such an extension. Figure 6(a) shows how BinCFI records the ad-
dress pair for foo, while Figure 6(b) shows the extension made by
BinCC. Two new targets for indirect transfers, the function entry
, the call site , are added into the table. 5_new
is changed to 5’, so foo’ will be actually executed when foo is
indirectly called at runtime.
5
5_new
5
5 '
6 '
(a)
(b)
Figure 6: Address translation table extension for foo. Indirect
transfer targets are represented by ordinals, of which 5_new is
the corresponding translated address of foo in BinCFI.
Although new indirect transfer targets are introduced through the
code duplication, it has not brought challenges to our protection in
practice. The number of newly added targets is small as only a little
proportion of functions need to be duplicated (shown at Section
6.1). Apart from that, the new transfers are constrained in the same
way and the experimental results show that they have no impact on
our protection.
Intra-Continent Policy Enforcement.
This policy is to constrain the inner nodes that represent indirect
transfers within a code continent: direct returns and indirect jumps
related to jump tables. Their targets are determined and can be
obtained from the Super-CFGs that compose the code continent.
To constrain direct returns, we prepare each of them a separate
address translation hash table to store its legitimate targets. For
each direct return, the targets are the call sites which this direc-
t return is connected with in the Super-CFGs. We get those call
sites and put them into the corresponding address translation table.
Apart from that, we instrument each direct return as shown in Fig-
ure 7. The start and size, embedded in two prefetchnta
instructions, indicate where to ﬁnd the corresponding address trans-
lation table. We use another thread local variable %gs:0x50 to store
the ﬁrst prefethnta instruction’s address, _addr. The trans-
lation routine addr_trans_dret uses %gs:0x50 at runtime to
access start and size for locating the right table, and then per-
form the same operations as addr_trans as shown Figure 5.
_addr:   ret               
_addr: prefetchnta start
prefetchnta size
movl _addr, %gs:0x50
movl %(esp), %gs:0x40
jmp addr_trans_dret
Figure 7: BinCC’s instrumentation for direct returns. Left is
the original instruction and right shows the instrumentation.
For the indirect jumps related to jump-tables, we can use a sim-
ilar structure. However, as mentioned above, BinCFI has instru-
mented this kind of indirect jumps by restricting them to only go to
their corresponding case branches, so we retain its instrumentation.
Inter-Continent Policy Enforcement.
Intra-Continent policy constrains indirect transfers whose targets
could be statically determined. In this part, we constrain the rest of
the indirect transfers in the binary, which correspond to the border
nodes of continents. We enforce the Inter-Continent policy as de-
scribed in Section 3.2 on these nodes. The same instrumentation as
described in Figure 4 is performed, except that each kind of trans-
fer is given its own address translation table and address translation
routine to conduct address checking and translation.
We make an extra effort to handle one kind of border nodes, the
indirect jumps that reside in PLT entries. They are used for dy-
namic symbol resolution. For such an indirect jump, only two le-
gitimate targets should be allowed, one being the next instruction’s
address, the initialization value before the symbol being resolved,
336
which is statically determined, and the other being the symbol’s
resolved address, which is determined at runtime. We can further
restrain such a runtime target, since the loader can intercept the
symbol resolution process and retrieve the resolved address. To
this end, we arrange all the targets of these indirect jumps into one
address translation table and put it into a newly introduced read-
only data section. Also, we modify the loader to be able to change
the property of the data section to writable, update the correspond-
ing table entry with the resolved address after symbol resolution,
and change the property back. The change is restricted within this
new data section, so there is no impact on other read-only address
translation tables.
In addition, we lay consideration on the indirect returns in the
orphaned continents, denoted as orphaned returns. As we cannot
identify the invoker of orphaned continents by static analysis, we
allow their targets to be any call sites.
C++ Exceptions.
Another problem we need to pay attention to is C++ exceptions.
In C++ programs, the necessary information for exception handling
is stored in the .eh_frame section. When the exception triggered,
the system would use current execution context to perform stack
unwinding to identify the corresponding catch branch. We intro-
duce new code through code duplication and there is no exception
metadata about this code in the .eh_frame, so if a duplicated func-
tion contains C++ exceptions logic and actually triggers the excep-
tion, no exception handler could be found through stack unwind
and the program would thus run incorrectly. To avoid this prob-
lem, we do not duplicate the functions containing C++ exceptions
logic, and treat the returns from such functions similar to orphaned
returns, allowing their targets to be any call site.
6. EVALUATION
We evaluated BinCC by testing SPEC CPU 2006 benchmark
programs, which are compiled with GCC version 4.6.1 and -O2
optimization level. The evaluation was performed on a Ubuntu-
11.10 32-bit virtual machine with one processor, 1.0GB Memory
and a 20G Hard Disk.
6.1 Code Duplication Evaluation
One key operation to our CFI policy enforcement is code dupli-
cation. We evaluate the quantity of code we need to duplicate.
program
lbm
gcc
perlbench
libquantum
omnetpp
sjeng
gobmk
bzip2
milc
hmmer
povray
sphinx
h264ref
astar
mcf
namd
soplex
average
|ICFs|
5
6
6803
2263
1362
142
2126
55
45
249
2011
16
133
9
5
54
636
3539
|DCFs| #total #dupl
41
3287
950
104
727
147
731
76
238
349
1069
298
473
103
44
76
487
1692
45
9846
3185
109
1976
287
2851
130
282
597
3037
313
598
109
48
129
1062
5637
1
431
83
1
306
2
209
1
1
1
136
1
16
3
1
1
113
183
Table 1: Duplicated Functions Statistics
per %
2.22
4.38
2.61
0.92
15.49
0.70
7.33
0.77
0.35
0.17
4.48
0.32
2.68
2.75
2.08
0.78
10.64
3.42
337
Table 1 shows the number of ICFs and DCFs, the total number
of all the functions and duplicated functions for each tested bench-
mark program. As some ICFs share returns with DCFs, we du-
plicate these ICFs. This is the reason why #dupl is different from
|ICFs| + |DCFs| - #total in some samples. The result shows only a
little amount of functions, nearly 3.4% of all the binary’s functions,
need to be duplicated so as to achieve a ﬁne grained protection.
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
Figure 8: Percentage of Duplicated Instructions
(cid:3)
From the table, we see C++ programs such as omnetpp and so-
plex generally need more functions to duplicate than C programs.
In these C++ programs, the vast majority of the duplicated func-
tions are C++ virtual functions. The function pointers are in vta-
bles and identiﬁed as ICFs. They could be also directly called, for
instance, by the functions from the same class hierarchy, so they
need to be duplicated according to our solution.
Figure 8 shows that the percentage of instructions we need to
duplicate for each sample. Overall, we only need to duplicate less
than 7.0% of the binary’s instructions on average.
6.2
Indirect Transfer Targets Metrics
BinCFI introduces the AIR(Average Indirect target Reduction)
to evaluate the quality of protection. The deﬁnition is as follows.
AIR =
N(cid:5)
j=1
(1 − |Tj|
S
)
1
N
In this deﬁnition, Tj stands for the legitimate target set for the in-
direct transfer ij. S stands for the binary’s code size. For BinCC,
the code size S, the number of indirect transfers N, and some legit-
imate target sets |Tj| can be increased due to the code duplication.
We take these into consideration to calculate the AIR and it turn-
s out that BinCC achieves a higher AIR, 99.54% as compared to
BinCFI, 98.86%.
This metric is not balanced because in a binary S is far higher
than |Tj|, even coarse-grained CFI solutions can also achieve high
AIR, which does not necessarily mean a high quality of protection.
We propose a new metric, RAIR (Relative AIR), deﬁned as follows,
and use it to demonstrate the extent to which BinCC reﬁnes the
legitimate targets compared to BinCFI.
N(cid:5)
j=1
(1 − |Tj|
| )
|T
(cid:4)
j
RAIR =
1
N
In the deﬁnition, T
(cid:4)
j represents the legitimate targets of indirect
transfer ij by BinCFI, and Tj represents the ij’s legitimate target-
s by BinCC. Figure 9 shows the statistics about this metric. On
average, BinCC reduced indirect transfers targets by 81.34% from
BinCFI.
As compared to BinCFI, BinCC reﬁnes legitimate targets for
each kind of indirect transfer. To evaluate such an improvement,
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
Figure 9: RAIR for Tested Samples
(cid:3)
Figure 11: Percentage Reduction of legitimate targets for an
indirect jump
(cid:3)
we use the formula deﬁned bellow to estimate the average number
of legitimate targets for each kind of indirect transfer.
AV G =
N(cid:5)
j=0
1
N
|Tj|
Suppose ij is an indirect transfer of a speciﬁc kind and Tj is the
legitimate target set for ij in a CFI enforced binary, and N repre-
sents how many indirect transfers of this kind exists in the binary.
We calculate this metric for three kinds of indirect transfers and
illustrate the percentage reduction of legitimate targets, given by
AV GBinCF I−AV GBinCC
, for all the three types of indirect transfers
in Figure 10, 11 and 12.
AV GBinCF I
In Figure 10 we see that on average BinCC reduced the legiti-
mate targets for an indirect call by around 40% compared to BinC-
FI. According to BinCFI implementation, all the possible constant
code pointers are potential targets of indirect calls. However, some
of those constants are actually addresses of call sites and jump-
table’s case entries, which are not function entries. In our imple-
mentation, we remove them from the target set.
100%
90%
80%
70%