不安全的中间件
- Tomcat -
安全脉搏
SecPulse.COM |
“ 在 web 安全中，中间件安全也是⾮常重
要的⼀部分，⽽中间件的安全问题主要
来⾃两个⽅⾯：⼀个是中间件本身的开
发缺陷导致的安全问题，另⼀个是开发
或运维⼈员在使⽤时进⾏了错误的配置
⽽导致的安全问题。
在 web 安全中，中间件安全也是⾮常重要的⼀部分，⽽
中间件的安全问题主要来⾃两个⽅⾯：⼀个是中间件本身
的开发缺陷导致的安全问题，另⼀个是开发或运维⼈员在
使⽤时进⾏了错误的配置⽽导致的安全问题。Tomcat 也
是众所周知的，应⽤最⼴泛的中间件了，那么接下来，我
们就针对 Tomcat 中间件进⾏常⻅的安全问题及⻛险进
⾏总结归纳。
版本管理
Tomcat 是属于 Apache 下的⼀个项⽬分⽀，类似于这种
的软件项⽬，官⽅⼀般都会同时维护多个版本分⽀，⼀般
新的产品特性会被更新在最新的⼤版本中，对于修复
bug 及漏洞这种就会在旧版本的分⽀中进⾏更新，这样
就允许开发或运维⼈员在不破坏原有的⽣产环境的情况下
完成对当前版本软件的更新。
例如当前你使⽤的 Tomcat 版本是 6.0.20，当需要进⾏
升级更新时，在 6.0 版本分⽀中寻找新的版本（如
6.0.25），升级到最新的漏洞修复版本，如果在性能、功
能等其他⽅有新的需求时，没有必要升级到 Tomcat7 版
本。
对于 Tomcat 的使⽤者及维护者来说，就应该密切关注
Tomcat 官⽹中对安全漏洞和新版本的发布公告
(https://tomcat.apache.org/security.html) 及时了解漏
洞信息及新版本的更新信息，这样就能及时判断⾃⼰所使
⽤的版本是否存在安全隐患，是否需要更新。
运⾏环境
⾸先我们必须保证运⾏ Tomcat 的⽤户权限不能是⾼权
限，⽐如 windows 下的 administrator 和 Linux 下的
root ⽤户或⽤户组，建议在使⽤ Tomcat 时创建⼀个
Tomcat 专属⽤户，在保证不影响业务正常使⽤的情况下
将该⽤户权限降⾄最低，此外还要根据业务需求来对应⽤
涉及的⽂件⽬录⽂件夹的读取、写⼊及执⾏的权限进⾏详
细的分配。这样⼀来，就能很⼤程度上增加攻击者的攻击
成本。
安全配置
Example 应⽤
Tomcat 在安装部署后，在 webapps 默认存在⼀个
examples ⽬录，该⽬录正如其⽂件名⼀样，提供⼀些示
例应⽤让使⽤者来了解 Tomcat 的特性及功能。这些样
例在业务上线后并没有什么⽤处，建议部署 tomcat 后，
删除其中的样例⽂件（ROOT, balancer,jsp-examples,
servlet-examples, tomcat-docs, webdav），避免信息
泄露和其他潜在的安全⻛险。
这些样例中的 session 样例
（/examples/servlets/servlet/SessionExample）允许
⽤户对 session 进⾏操纵，因为 session 是全局通⽤
的，所以⽤户可以通过操纵 session 获取管理员权限，
存在⼀定的安全⻛险，不过这种基本上只有在⼀些⽐较⽼
的不安全系统中才有可能出现，利⽤条件⽐较苛刻。
我们编写 3 个⻚⾯来模拟⼀般⽹站身份验证的过程。
login.jsp
login1.jsp
index.jsp
我们将写好的三个⻚⾯部署到 tomcat 上，我们⾸先访问
⼀下 index.jsp ⻚⾯看看，访问之后跳转⾄ login.jsp。
我们利⽤ examples 的 session servlet 功能操作⼀下
session，将 login 的值改成 admin，⽣成 session。
提交成功之后我们再来访问⼀下 index.jsp，发现不会跳
转，直接限制 Login，说明我们⽣成的 session 有效，
通过操作 session 绕过了登录。
Admin 管理⻚⾯
Tomcat 的 admin console 全称是 Tomcat WEB Server
Administration ToolT，该模块在 Tomcat 5.0.4 版本之
前都是默认安装的，5.0.4 之后版本默认存在该⽬录，但
是功能并不全，直接使⽤，从 5.5 版本开始作为可选模
块进⾏安装，安装后的默认路径为 / admin，与
manager 配置相同，在 tomcat-user.xml ⽂件中进⾏账
号密码的配置。该模块实现了通过 web ⽅式对 tomcat
服务、已部署的应⽤程序、连接池和其他资源的管理，⽅
便运维及开发⼈员的管理和操作。
登录后，在下图中的功能，可以配置虚拟⽬录，将服务器
上的物理路径与 web 路径进⾏映射，从⽽可以实现对任
意⽬录的访问。
但是需要注意的是，这⾥需要在 tomcat 配置中开启列⽬
录，将 false 改为 true，否则就会出现如下情形，⽆法
利⽤该⽅式读取⽂件。
利⽤该⽅法进⾏⽂件读取的攻击⽅式现在已经⼏乎绝迹，
也只能在⼀些内⽹中找到这样的古董系统，⾄于古董系统
有没有开放 administration tool，就要看命了！
Manager 管理⻚⾯
Manager 管理平台我们都很熟悉，也是最常⻅的，包含
多个管理模块，开启后⽅便开发及运维⼈员对 tomcat 项
⽬发布进⾏管理。Manager 管理平台默认安装后是没有
设置登录⼝令的，需要在 tomcat-user.xml ⽂件中进⾏
配置，与上⽂的 admin 管理平台相同。
在登录 manager 后台时，tomcat 使⽤的是 Basic 认证
⽅式，在请求的数据包中包含⼀个 Authorization 字段，
该字段的值为账号密码的 base64 编码，如图所示：
Tomcat manager 包含 4 个不同的⻆⾊：
manager-gui：允许访问 html ⻚⾯接⼝ (即 URL
路径为 / manager/html/*)
manager-script：允许访问纯⽂本接⼝ (即 URL
路径为 / manager/text/*)
manager-jmx：允许访问 JMX 代理接⼝ (即
URL 路径为 / manager/jmxproxy/*)
manager-status：允许访问 Tomcat 只读状态⻚
⾯ (即 URL 路径为 / manager/status/*)
其中 manager-gui、manager-script、manager-jmx
三个⻆⾊均具备 manager-status ⻆⾊的权限，即这三
种⻆⾊权限⽆需再额外添加 manager-status 权限。实
际使⽤中只需配置 manager-gui ⻆⾊通过 html ⻚⾯的
形式访问管理平台。下⾯我们来分别简述⼀下 manager
的这 4 个⻆⾊。
manager-gui
manager-gui 是最常⻅也是最常⽤的模块，我们通常访
问 / manager/html 看到的⻚⾯就是 manager-gui，不
同版本之间的功能都⼤同⼩异，对于攻击者来说，最直接
的⽅式就是通过部署应⽤的功能来部署 war 包，从⽽部
署 webshell 后⻔应⽤。
manager-script
该模块下包含了所有管理功能的接⼝，攻击者也可以通过
这个接⼝来对 tomcat 应⽤发起攻击。下⾯我们来列举⼏
个常⽤的功能：
/manager/text/deploy?path=/xxx
部署 web 应⽤，需要注意的是这⾥部署的⽂件为 war
包，在请求时需要使⽤ PUT ⽅法。
/manager/text/list
查看所有部署的应⽤。
/manager/text/serverinfo
查看服务器信息。
详细功能，可以在tomcat的帮助⽂档中查看：http://{ip}:{port}/d
manager-status
该模块访问后可以看到⼀些与服务器相关的信息，没有太
多有实际价值的信息，也只能帮助收集到⼀些简单的信
息。
manager-jmx
Tomcat 使⽤ JMX 管理⽅式，在 Tomcat 的⾃带应⽤
manager 就是使⽤了 JMX ⽅式来管理 Tomcat，以此完
成 Web 应⽤的动态部署、启动、停⽌。在 tomcat 的帮
助⽂档中，提供了下⾯⼏种⽅式发送请求获取相应的信
息：
query命令：http://[ip]:[port]/manager/jmxproxy/?qry=