socket 的 sock 结构中继承 net_device 结构的 features（保
根据IP地址查找网络设备（eth3等），在内核内部用于管理
sk->sk_route_caps = dst->dev->features;
>eleo_xmit_frame_ring()
skh->ip_Summed = CHECKSUM_HW;
csum_and_copy_ fram_ user( )
就在e1000e驱动程序中处理校验和
如果 skb->ip_summed=CHECKSUM_HW,
vlan_dev_hwaccel_har_start_xmit()
e1000_tx_csum()
个
VLAN
是计算校验和
VLAN时在这
---
## Page 273
首先检查打了补丁的内核中的features。
修改后的测试
的补丁合并到主线上（Intel网站的el000 驱动程序中包含了该补丁)。
样就只有el1000e 驱动程序才能支持该功能，考虑到ethtool 命令，最后还是把上面
下面是修正补丁，改成了在register_Vlan_device()函数中设置features。
正了。
探明原因之后，我们给负责网络的社区（netdev）发了封邮件，该bug 立即就被修
社区的修改
没能继承到eth3.510 的 socket 缓冲区中。
从 VLAN设备发送 TCP 数据包时内核执行校验和计算的原因是，eth3的features
sk->sk_route_caps, 设置 skb->ip_summed 为 CHECKSUM_HW。
net_device 结构的 features 设置到 sk->sk_route_caps 上。 sendmsg()检查
net_device 结构的 features 设置 NETIF_F_HW_CSUM 标志位。connect()函数将
总结到目前为止的调查结果可见，el000e 驱动程序被加载时会检查硬件并给
http://ww.spinics.net/lists/netdev/msg63716.html
[PATCH 4/4] el000e: Allow TS0 to trickle down to VLAN device
Date: Fri May 23 00:22:04 2008 -0700
Author: Patrick McHardy 
commit 289c79a4bd350e8a25065102563adla183d1b402
Date:Tue May 20 14:54:50 2008 -0700
Author: Patrick McHardy 
commit 5fb13570543f4ae022996c9d7coc099c8abf22dd
 vlan: Use bitmask of feature flags instead of seperate feature bits
www.TopSage.com
HACK#42CPU负载过高的故障丨255
262
---
## Page 274
264
表 5-32.6.18内核和打补丁后的内核的结果
发送进程（sender）的 CPU 使用率。
均值总结如表 5-3 所示。Mbps 为 nuttcp 的吞吐量，sec 为 nuttcp 的时间，%TX 为
接下来使用同样的选项再次执行 nuttcp，将打补丁前后的内核分别执行 10 次，平
与预期的相同，采样结果中没有 csum_partial_copy_generic()。
generic()函数不再出现了。
接下来使用 nuttcp 发送数据，用 oprofile查看结果。不出所料，csum_partial_.copy_
可见 NETIF_F_HW_CSUM标志是有效的。
256 1
VLAN (eth3.510)
e1000e (eth3)
# opreport -l -p /lib/modules/2.6.18vlan/kernel/
0x10009
# cat /sys/class/net/eth3.510/features
23
5375
26955
samples %
第5 章实践内核调试
1.3466
2.1473
2.1863
2.9774
3.0277
3.2668
3.5944
4.0563
4.6576
5.6793
23.3575 V
1.0450
1.1456
1.2669
1.2946
1.4861
1.8015
vmlinux-2.6.18vlan
e1000e.ko
vmlinux-2.6.18vlan
vmlinux-2.6.18vlan
el000e.ko
vmlinux-2.6.18vlan
vmlinux-2.6.18vlan
e1000e.ko
vmlinux-2.6.18vlan
vmlinux-2.6.18vlan
vmlinux-2.6.18vlan
vmlinux-2.6.18vlan
vmlinux-2.6.18vlan
e1000e.ko
vmlinux-2.6.18vlan
vmlinux-2.6.18vlan
image name 
www.TopSage.com
938.57
941.38
Mbps
2.6.18
9.15
9.12
sec
vmlinux-2.6.18vlan ip_rcv
e1000e
vmlinux-2.6.18vlan IRQ0x42_interrupt
vmlinux-2.6.18vlan_
vmlinux-2.6.18vlan put_page
vmlinux-2.6.18vlan kmem_cache_free
vmlinux-2.6.18vlan kfree
vmlinux-2.6.18vlan tcp_ack
e1000e
vmlinux-2.6.18vlan tcp_sendmsg
vmlinux-2.6.18vlan tcp_v4_rcv
e1000e
e1000e
e1000e
vmlinux-2.6.18vlan mwait_idle
vmlinux-2.6.18vlan copy_user_generic
app name
22.0
14.6
X1%
938.98
941.41
Mbps 
打补丁之后
e1000_clean_tx_irq
-_tcp_push_pending_frames
 el000_xmit_frame
e1000_clean_rx_irq
e1000_intr_msi
e1000_irq_enable
 symbol name 
9.15
9.12
sec
x1%
---
## Page 275
· Phil Dykstra's nuttcp quick start guide
参考文献
过oprofile找出问题所在。
本 hack是降低CPU使用率的例子。即使仅通过吞吐量看不出问题，也能像这样通
总结
负载。
这样，网络设备的校验和计算功能也能在VLAN设备中使用了，降低了CPU的
CPU还有富余。
没打补丁的2.6.18内核也能产生相当的吞吐量的原因是，测试时只运行了nuttcp，
6&DwnldID=16563&lang=jpn
http://downloadcenter.intel.com/Detail_Desc.aspx?strState=LIVE&ProductID=277
（兆位PCI网卡驱动程序Linux版）
Pの（iu用
LinuxManPageTCP(7)
http://www.wcisd.hpc.mil/nuttcp/Nuttcp-HOwTO.html
www.TopSage.com
一大岩尚宏
---
## Page 276
www.TopSage.com
---
## Page 277
美
内容。下面用程序 st1.c确认一下实际情况。
找不到要访问的文件或无权限访问文件等情况下，系统调用通常会原样返回错误
strace的使用范例
别是与文件有关的错误、参数错误等，通过此方法可以较简单地发现问题所在。
时，首先使用 strace 找出系统调用中出错的地方，通常能得到故障发生的线索。特
strace 能够跟踪进程使用的系统调用，并显示其内容。因此，调试原因不明的故障
strace
以及调查手头的x86机器是否支持64bit的方法等。
方法、initramfs 的调试方法、使用 RT Watchdog 检测实时进程停止响应的方法,
还介绍了OOM Killer 的行为和原理、通过GOT/PLT 进行函数调用的原理和理解
文件系统、oprofile、VMware vprobe、错误注入（fault injection）、Xen 等。此外,
术包括 strace、objdump、Valgrind、kprobes、jprobes、KAHO、systemtap、proc
本章集合了调试时用到的各种各样的工具，以及一些经验技巧。介绍的工具和技
共享库中发生的错误。
该方法能有效地发现系统调用失败有关的故障，但无法发现用户写出的程序或
使用strace寻找故障原因的线索
因的线索的方法。
本 Hack 讲解发生故障时，使用 strace 跟踪系统调用，以寻找故障原
www.TopSage.com
高手们的调试技术
hack #43~#66
第6章
266
265
---
## Page 278
267
这种情况下，很难确定错误发生在源代码的什么地方，因此也无法用 GDB 设置
同样的错误信息的情况，甚至可能什么都不显示。上面就是这种程序的一个例子。
息却无法得知这一点。真实的程序也会有错误消息内容不明确、所有地方都显示
原因是程序试图打开一般用户没有读取权限的/etc/shadow文件，但是通过错误消
执行该程序后显示如下。
260 1 第6 章高手们的调试技术
断点。这时可以像下面这样执行 strace。
fstat(3, {st_mode=S_IFREG|0755, st_size=1687632, ...)) = 0
read(3, "\177EF\2\1\1\\\0\0\0\0\0\003\0>\0\10\0\0)240\331".., 832) = 832
open("/lib64/Libc.so.6", 0_RDONLY)
open("/usr/local/X11R7/lib/tls/x86_64/libc.5o.6", 0_RDONLY) = -1 ENOENT (No such file
mmap(NULL, 4096, PROT_READ]PROT_WRITE, MAP_PRIVATE[MAP_ANONYMOUS, -1, 0) = OX2aaaaaab000
execve("./st1", ["st1"], [/* 44 vars */]) = 0 
$ strace st1
Error!
$ ./st1
access("/etc/ld.so.preload", R_oK)
int main(void)
#include 
#include 
[st1.c] 
（省略）
or directory)
uname({sys="Linux", node="cglsvl.cgl", ·**}) = 0
brk(0)
return EXIT_SUCCESS;
if (fp = NULL){
fp = fopen("/etc/shadow", "r");
FILE *fp;
printf("Error!\n");
return EXIT_FAILURE;
www.TopSage.com
= 0x486b000
= -1 ENOENT (No such file or directory)
=3
---
## Page 279
示程序在哪个地址进行了系统调用，可以将该地址作为断点使用。
调查，而实现这一步就需要在某些地址上设置断点。给 strace 添加-i 选项即可显
错误的真正原因可能在其他位置。这种情况下，通常会使用 GDB 进行进一步的
刚才的例子仅通过 strace 的输出结果就能完全理解问题的情况，但有些程序引发
使用GDB 详细调查
denied 错误。
open()失败，而且立即可以得知程序在试图打开/etc/shadow 时发生了Permission
最后的③即为在界面上显示错误消息的系统调用。再往前看，可知②处系统调用
出错并结束的话，从后往前看 strace 的输出结果是解决问题的捷径。上述例子中,
Process 18399 detached
exit_group(1)
write(1, "Error!\n", 7)
9x2aaaaaaacoo0
mmap(NULL, 4096,
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 3), ...}) = 0
open("/etc/shadow", 0_RDONLY)
ork(0x488c000)
ork(0)
munmap(0x2aaaaaaac000,
mprotect(0x359dc19000, 4096, PR0T_READ)
mprotect(0x359e144000, 16384, PR0T_READ)
arch_prctl(ARCH_SET_FS, OX2aaaaad8210)
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0OX2aaaaad8000 
close(3)
0) = 0x359e149000
mmap(Ox359e149000, 16536, PROT_READ|PROT_WRITE, MAP_PRIVATEJMAP_FIXED|MAP_ANONYMOUS, -1,
0x144000)=0x359e144000
mmap(Bx359e144000, 20480, PROT_READ}PROT_WRITE, MAP_PRIVATE|MAP_FIXED[MAP_DENYWRITE, 3,
mprotect(0x359df44000, 2097152, PR0T_NONE) = 0
Imap(0x359de00000,3461272,PROT_READ|PROT_EXEC,MAP_PRIVATE|MAP_DENYWRTTE,3, 0)=0x359de0000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE[MAP_ANONYMOUS, -1, 0) = OX2aaaaaad7000
时加载器（runtime loader）的处理，可以忽略。
①开始的十几行可以看出，St1成功地将所用的库连接到了进程。附近都是运行
有很多错误，但这些错误是进程在试图从各种路径中加载共享库而导致的。从
显示的信息有很多，但开头的信息都是关于启动进程时的处理。尽管这一部分
PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS,
173557)
www.TopSage.com
HACK#43 使用 strace 寻找故障原因的线索| 261
= -1 EACCES (Permission denied)
=0x488c000
：0x486b000
?
P
-1, 0) =
?
268
---
## Page 280
269
何用strace查看运行中的进程（如守护进程）的行为。
刚才用 strace启动进程并检查了它的行为，接下来以下面的程序为例讲解一下如
attach到进程上
址并显示backtrace。
各行开头□中的数字就是执行系统调用的代码的地址。在GDB中试试看指定该地
262
int main(void)
#include
#include
[st2.c]
#2 0x00000359de6906c in_I0_new_file_fopen () from/Lib64/libc.so.6
#10x000000359de68f23i
Continuing.
Breakpoint2at0x359debf310
main() at stl.c:7
Startingprogram:/home/kyamato/DebugHacks/kyamato/chapter5/strace.work/stlg
$gdbst1
gdbst1
#
（gdb）c
（gdb)b*θx359debf310—
Breakpoint 1at 0x4004co:file st1.c,line7.
(gdb)start
$strace-ist1
(gdb)bt
0x00000000004004cfinmain()at stl.c:7
0x00000359de5eba4in__fopen_internal() from/lib64/libc.so.6
359debf310]open("/etc/shadow",0_RDONLY)=-1 EACCES（Permission denied）
第6章高手们的调试技术
fp=fopen("/etc/shadow"，“r");
www.TopSage.com
in
_GI__I0_file_open()from/lib64/libc.so.6
-_open_nocancel () from /lib64/libc.so.6
红网