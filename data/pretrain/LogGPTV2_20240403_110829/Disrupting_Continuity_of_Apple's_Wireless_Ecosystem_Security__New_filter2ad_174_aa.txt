title:Disrupting Continuity of Apple's Wireless Ecosystem Security: New
Tracking, DoS, and MitM Attacks on iOS and macOS Through Bluetooth
Low Energy, AWDL, and Wi-Fi
author:Milan Stute and
Alexander Heinrich and
Jannik Lorenz and
Matthias Hollick
Disrupting Continuity of Apple’s Wireless Ecosystem 
Security: New Tracking, DoS, and MitM Attacks on 
iOS and macOS Through Bluetooth Low Energy, 
AWDL, and Wi-Fi
Milan Stute, Alexander Heinrich, Jannik Lorenz, and Matthias Hollick, 
Technical University of Darmstadt
https://www.usenix.org/conference/usenixsecurity21/presentation/stute
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Disrupting Continuity of Apple’s Wireless Ecosystem Security:
New Tracking, DoS, and MitM Attacks on iOS and macOS
Through Bluetooth Low Energy, AWDL, and Wi-Fi
Milan Stute
Alexander Heinrich
Jannik Lorenz
Matthias Hollick
Secure Mobile Networking Lab, Technical University of Darmstadt, Germany
Abstract
Apple controls one of the largest mobile ecosystems, with
1.5 billion active devices worldwide, and offers twelve pro-
prietary wireless Continuity services. Previous works have
unveiled several security and privacy issues in the involved
protocols. These works extensively studied AirDrop while
the coverage of the remaining vast Continuity service space
is still low. To facilitate the cumbersome reverse-engineering
process, we describe the ﬁrst guide on how to approach a struc-
tured analysis of the involved protocols using several vantage
points available on macOS. Also, we develop a toolkit to
automate parts of this otherwise manual process. Based on
this guide, we analyze the full protocol stacks involved in
three Continuity services, in particular, Handoff (HO), Uni-
versal Clipboard (UC), and Wi-Fi Password Sharing (PWS).
We discover several vulnerabilities spanning from Bluetooth
Low Energy (BLE) advertisements to Apple’s proprietary au-
thentication protocols. These ﬂaws allow for device tracking
via HO’s mDNS responses, a denial-of-service (DoS) attack
on HO and UC, a DoS attack on PWS that prevents Wi-Fi
password entry, and a machine-in-the-middle (MitM) attack
on PWS that connects a target to an attacker-controlled Wi-Fi
network. Our PoC implementations demonstrate that the at-
tacks can be mounted using affordable off-the-shelf hardware
($20 micro:bit and a Wi-Fi card). Finally, we suggest practi-
cal mitigations and share our ﬁndings with Apple, who have
started to release ﬁxes through iOS and macOS updates.
1 Introduction
With 1.5 billion active devices, Apple controls one of the
largest mobile ecosystems worldwide [5]. Also, Apple is in
the unique position of controlling both hard- and software
and, therefore, can push new services to all of their plat-
forms (iOS, iPadOS, macOS, tvOS, and watchOS) quickly.
As a result, there are currently twelve different wireless ser-
vices, such as AirDrop and Handoff, that Apple markets un-
der the umbrella term Continuity [9]. While these services
improve the user experience, wireless protocol designs and
implementations offer a large surface for attacks. This has
been demonstrated via numerous attacks against standard-
ized protocols, e. g., Bluetooth [1], WEP [39], WPA2 [47],
WPA3 [48], GSM [12], UMTS [35], and LTE [29]. Re-
cently, several works have found severe vulnerabilities in
Apple’s proprietary wireless protocols [11, 18, 34, 44]. In
particular, they have demonstrated the trackability of Apple
devices that continuously transmit custom Bluetooth Low En-
ergy (BLE) advertisements [18, 34], user identiﬁcation and
denial-of-service (DoS) attacks on Apple’s proprietary Apple
Wireless Direct Link (AWDL) protocol [44], and machine-
in-the-middle (MitM) attacks on AirDrop [11, 44]. While
these works have already discovered several vulnerabilities,
they have only analyzed a fraction (one out of twelve ser-
vices) of the potential attack surface. The most costly part of
such analyses is the initial investment in reverse-engineering
the complex software architecture [42] that implements the
various proprietary protocols involved in offering Apple’s
services. However, the previous works lack an elaborate
discussion on the actual process.
This paper provides the ﬁrst structured guide to reverse en-
gineer these proprietary protocols, which combines insights
of previous works with our own experience. To make our
guide more accessible and sustainable, we release a toolkit
for semi-automated reverse-engineering of Apple’s wireless
ecosystem. Following this guide, we analyze three previously
undocumented protocols used by the Handoff (HO), Uni-
versal Clipboard (UC), and Wi-Fi Password Sharing (PWS)
services. Using the recovered speciﬁcations and our own
open-sourced re-implementations, we discover four novel se-
curity and privacy vulnerabilities spanning from design errors
to implementation issues, attesting—again—the inferiority of
security by obscurity. The attacks enable new device track-
ing, DoS, and MitM attacks. We provide proof-of-concept
(PoC) implementations for all attacks using only standard
hardware such as a regular Wi-Fi card and a low-cost ($20)
micro:bit [36] for BLE communication.
USENIX Association
30th USENIX Security Symposium    3917
In particular, we make the following ﬁve contributions.
First, we make security analysis of Apple’s wireless ecosys-
tem more affordable by presenting a structured and semi-
automated reverse-engineering method. Our practical guide
covers different vantage points and helps to navigate the com-
plex system architecture of iOS and macOS. Second, we
provide a complete speciﬁcation of the protocols involved in
the HO and UC services. We open-source a parser for Apple’s
proprietary OPACK serialization format and a sample imple-
mentation of the authentication protocol. Third, we provide a
complete speciﬁcation of the protocols involved in the PWS
service. We accompany the speciﬁcation with open-source
implementations of both requestor and grantor roles. Fourth,
we discover several security and privacy vulnerabilities and
present four novel wireless network-based attacks. These are:
(1) A protocol-level DoS attack on HO and UC that exploits
a low-entropy authentication tag in the BLE advertise-
ments and a replay protection mechanism.
(2) A device tracking attack that exploits the asynchronous
randomization interval of several AWDL device identi-
ﬁers, such as MAC address and mDNS records.
(3) A MitM attack that exploits the one-sided authentica-
tion in PWS to automatically distribute and ﬁll-in Wi-Fi
passwords, which causes the victims to connect to an
attacker-controlled Wi-Fi network.
(4) A DoS attack against the PWS protocol that exploits a
parsing bug and allows for crashing the Settings app on
iOS and, thus, could prevent a user from connecting to a
new Wi-Fi network.
And ﬁfth, we propose practical mitigations for all discovered
vulnerabilities and a previously discovered [34] BLE device
tracking attack. We have responsibly disclosed our ﬁndings
to Apple, who have, so far, ﬁxed two issues through iOS and
macOS updates.
The rest of this paper is structured as follows. Section 2
discusses background and related work. Section 3 contains
our reverse engineering guide. Section 4 presents the proto-
col speciﬁcations of three Apple services. Section 5 analyses
security and privacy aspects of these protocols, presents our at-
tacks, and proposes mitigations. Finally, Section 6 concludes
this work.
2 Background and Related Work
In this section, we give an overview of Apple’s current list of
Continuity services, the link-layer protocols they rely on, and
ﬁnally discuss previous security and privacy analyses in this
ecosystem.
2.1 Apple’s Continuity Services
Apple’s current Continuity portfolio [9] consists of twelve
different services that we list in Table 1. They are all used
Service
AWDL BLE Wi-Fi
Handoff (HO)
Universal Clipboard (UC)
Phone
SMS
Instant Hotspot
Auto Unlock
Continuity Camera
AirDrop
Apple Pay
Wi-Fi Password Sharing (PWS)
Sidecar
Continuity Markup and Sketch






















?
?



*








Table 1: Overview of Apple Continuity services and used
link-layer protocols. Only one requires online iCloud access
(*). All others communicate via local networks only.
to transfer potentially sensitive user data such as clipboard
content, phone calls, photos, and passwords. While Apple
provides some high-level security descriptions for some of
these services [4], the actual protocol designs and implemen-
tations remain closed-source. Previous works, so far, have
analyzed one service in depth, i. e., AirDrop [11, 44]. Other
works have also analyzed the BLE advertisements for several
other services [18, 34]. However, the involved upper-layer
protocols remain unknown. In this work, we demonstrate
our reverse engineering methodology and use it to analyze
the protocols involved in three services that have not been
scrutinized before. We brieﬂy describe the purpose of the
three services.
Handoff (HO) HO allows users with multiple Apple de-
vices to switch between devices while staying in the same
application context. An example is Apple’s Mail app: Users
can start typing an email on their iPhone, switch to their Mac,
and click an icon in the Mac’s dock to continue writing the
email. Third-party developers can add similar functionality
to their apps via a public API [3].
Universal Clipboard (UC) UC shares clipboard content
across nearby devices of one owner. For example, it allows
for copying text on a Mac and pasting the content on an
iPhone. Apple’s UC and HO implementations use the same
protocol as described in Section 4.1.
Wi-Fi Password Sharing (PWS) The PWS service allows
a requestor device to request a password to a Wi-Fi network
while it tries to connect to it. A grantor device that knows the
password can decide whether it wants to share the password
with the requestor. As a use-case, it allows us to share one’s
home Wi-Fi password with a house guest.
3918    30th USENIX Security Symposium
USENIX Association
2.2 Wireless Link-Layer Protocols
We brieﬂy introduce the two critical link-layer protocols in-
volved in Apple’s Continuity services, particularly AWDL
and BLE. We have compiled the mapping of service to link-
layer technologies in Table 1 by monitoring the interfaces
(see Section 3) that become active when using each service.
Apple Wireless Direct Link (AWDL) AWDL is a propri-
etary Wi-Fi-based link-layer protocol that can co-exist with
regular Wi-Fi operations. It offers a high-throughput direct
connection between neighboring devices and has previously
been reverse-engineered [41, 42]. Apple uses AWDL as a
message transport for several Continuity services such as UC
and HO.
Bluetooth Low Energy (BLE) BLE [15] operates in the
same 2.4 GHz band as Wi-Fi. It is designed for small battery-
powered devices such as smartwatches and ﬁtness trackers
and, thus, is not suitable for large data transfers. The BLE
advertisement packets are a broadcast mechanism that can
contain arbitrary data. Advertisements are used when devices
set up a connection or share their current activity to nearby
devices. Apple relies heavily on custom BLE advertisements
to announce their Continuity services and bootstrap the var-
ious protocols over Wi-Fi or AWDL [18, 34, 44]. Generic
Attribute Proﬁle (GATT) is a BLE protocol that is used for
discovering services and for communicating with a peer de-
vice. A UUID identiﬁes a single service, and each service
can contain several characteristic values. A client connects
to a server device and accesses the characteristics of a ser-
vice. The client can write data to, read data from, or receive
notiﬁcations from the characteristics. Apple uses GATT as
a message transport, e. g., to exchange Wi-Fi passwords via
PWS as explained in Section 4.2.
2.3 Previous Security and Privacy Analyses of
Apple’s Wireless Ecosystem
Previous works have analyzed part of the Continuity services.
Bai et al. [11] have looked at the risks of using insecure
multicast DNS (mDNS) service advertisements and show
that they can spoof an AirDrop receiver identity to get unau-
thorized access to personal ﬁles. Stute et al. [44] have re-
verse engineered the complete AWDL and AirDrop proto-
cols and demonstrate several attacks, including user track-
ing via AWDL hostname announcements, a DoS attack via
desynchronization on AWDL, and a MitM attack on Air-
Drop. Heinrich et al. [23] have discovered that AirDrop leaks
contact identiﬁers and present a new privacy-preserving pro-
tocol for mutual authentication. Martin et al. [34] have exten-
sively analyzed the content of the BLE advertisements trans-
mitted for several Continuity services. They found several
privacy-compromising issues, including device ﬁngerprint-
ing and long-term device and activity tracking. Celosia and
Cunche [18] have extended this work and discovered new
ways of tracking BLE devices such as Apple AirPods, as well
as demonstrated how to recover a user’s email addresses and
phone numbers from the PWS BLE advertisements.
Unfortunately, these works provide no or only a limited
discussion of the methods applied to receive their results, in
particular, the process of reconstructing the frame format and
protocol speciﬁcations. In Section 3, we provide a structured
guide on how to approach this process. Also, the related work
has only covered one Continuity service in full depth (i. e.,
AirDrop) and discussed the BLE advertisements for several
others. In Section 4, we analyze the complete protocol stacks
of three previously disregarded services.
3 A Hacker’s Guide to Apple’s Wireless