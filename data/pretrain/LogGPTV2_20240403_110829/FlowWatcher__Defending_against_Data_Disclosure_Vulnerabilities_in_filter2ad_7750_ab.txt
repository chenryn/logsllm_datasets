runtime
time
ofﬂine
ofﬂine
online
online
online
online
(cid:88)
 | (cid:88)

(cid:88)
(cid:88)
(cid:88)
n/a
n/a

(cid:88)

(cid:88)
phase
n/a
n/a


(cid:88)
(cid:88)
Supports
policy evolution
(cid:88)
(cid:88)



(cid:88)
Table 1: Existing techniques to mitigate data disclosure vulnerabilities in web applications
Protecting against the above bugs is hard because the implemen-
tation of an access control model is highly application-speciﬁc.
While authentication checks are typically performed only in a sin-
gle core component of a web application, according to a small num-
ber of valid strategies (i.e. using session cookies or authentication
HTTP headers), authorisation logic affects all modules of an appli-
cation, including third-party plug-ins, and can be implemented in
many different ways.
2.2 Mitigating unauthorised disclosure
The research community has investigated how to protect against
data disclosure vulnerabilities in web applications and proposed a
range of techniques (see Table 1).
Missing access check detection. Ofﬂine techniques using static
program analysis were proposed to discover application code paths
with missing access control checks [32, 50, 51]. Such techniques
require access to the source code, are language-speciﬁc and make
assumptions about the architecture of the application, such as dis-
tinct application-speciﬁc roles usually involving different program
ﬁles [50]. They also suffer from the intrinsic problems of static
analysis:
the analysis is conservative, potentially reporting false
positives, and is unable to support arbitrarily complex applications.
Input validation testing. Many disclosure vulnerabilities, such
as ones triggered by cross-site scripting (XSS) and SQL injection
attacks (SQLI), are caused by the incorrect validation or sanitisa-
tion of user input data. Ofﬂine testing techniques exist that, based
on generated user input, analyse or track the propagation of user
data through the application in order to discover code paths with-
out appropriate data sanitisation. Whitebox techniques [2, 4] ex-
ploit knowledge of the application source code for targeted testing;
blackbox techniques [3, 49] are limited to observing the external
behaviour of the application to detect bugs. Since these techniques
only focus on the incorrect usage of input data, they cannot dis-
cover a more general class of bugs related to mistakes in the access
control logic.
Anomaly detection. A different class of techniques treats the de-
tection of semantic bugs as an anomaly detection problem. In a
training phase, the correct behaviour of the application is observed.
Execution-based approaches [8, 21, 30] record behaviour in terms
of internal applications states, e.g. by instrumenting the language
interpreter; network-based approaches [24, 26, 29, 42] train the
model according to observed network trafﬁc. During an attack, the
anomalous deviation from the correct behaviour is reported.
The effectiveness of such techniques depends on how compre-
hensively the training phase captures application behaviour—new
but correct runtime behaviour leads to false positives. This makes
it hard to have realistic training workloads for many applications.
Dynamic data tracking. Recent proposals for shadow authentica-
tion and authorisation [10, 55] detect access control bugs by track-
ing data in an application. This relies on modiﬁed language inter-
preters that can record the ﬂow of user data in order to establish
that checks are carried out correctly. Nemesis [10] maintains au-
thentication data externally, and carries out shadow checks before
operations execute on resources such as ﬁles or database tables;
Resin [55] associates data with policy objects, which then execute
shadow access control checks.
While such approaches can accurately identify data disclosure,
dynamic data tracking requires non-standard language interpreters
and runtime systems and has a performance overhead, which is
challenging in production environments [48].
In addition, these
approaches do not support the speciﬁcation of dynamic access con-
trol policies in a high-level language, precluding policy evolution
based on user actions.
2.3 Proxy-based disclosure detection
As shown in Table 1, the goal of FlowWatcher is to provide a
practical approach for the mitigation of data disclosure vulnerabili-
ties in today’s web applications. Compared to previous approaches,
we explore a different point in the design space: instead of modify-
ing the source code of applications or the runtime system executing
them, we want to provide a solution that facilitates adoption be-
cause it can be applied to any black-box application. In addition,
we want to introduce a negligible performance overhead, not rely
on a brittle training phase, and support the change of access control
policy over time.
We make the observation that, for many web applications, the
underlying access control model is relatively simple, and that the
majority of usage involves no more than this simple model. Web
applications such as WordPress [54], Drupal [16], Evernote [20],
Dokuwiki [12], phpMyAdmin [44] and phpBB [43] all model ac-
cess control decisions based on access control lists: they associate
principals, such as users or groups of users, with access permissions
to data objects, such as articles, posts and comments. This makes
it possible to validate the correctness of access control checks ex-
ternally, i.e. outside of the web application, as long as the current
state of the access control model is known.
Our hypothesis is that we can provide a web proxy to detect
and prevent unauthorised data disclosure. The proxy interprets ob-
served network trafﬁc into and out of an application based on an un-
derstanding of the application’s intended access control policy. The
beneﬁt of a proxy-based approach is that it can be applied trans-
parently to existing deployments without changes to applications
or their language interpreters, and can support encrypted trafﬁc by
terminating the encrypted connection. In addition, an adequately-
provisioned proxy does not impact performance.
However, using an external web proxy to detect data disclosure
introduces two challenges: (i) the dynamic access control policy of
the application must be expressed in a way that permits the proxy
to maintain the current access control state for the application (§3);
and (ii) the proxy must track the propagation of data from one user
to another in order to detect that data was disclosed (§4).
6052.4 Threat model
Our approach covers threats from both authenticated and unau-
thenticated users of an application who want to read data belonging
to other users by exploiting data disclosure vulnerabilities, as de-
scribed in §2.1.
We assume that the backend data store used by the application is
secure and not directly accessible to attackers. Our approach also
does not cover SQL injection attacks, in which the attacker can ob-
fuscate the data leaked—as discussed above, specialised techniques
for mitigation already exist.
In addition, we only focus on threats to data conﬁdentiality and
not data integrity. For example, we cannot prevent one user from
taking advantage of an application vulnerability in order to modify
the data belonging to another user, because it is possible for the
application to make updates in the backend data store without the
proxy being aware of this. The proxy can only mediate when data
is returned to the user.
3. USER-DATA-ACCESS POLICY
To address the challenge of maintaining a dynamic access con-
trol policy, we propose a new domain-speciﬁc language, the user-
data-access (UDA) policy language. It allows application develop-
ers to specify the intended access control model for their applica-
tions by relating users to the data that they are permitted to access.
There are two interesting requirements for the language. First,
as the web proxy can only observe the client-server HTTP commu-
nication, the language must express the access control policy using
only the information contained in HTTP requests and responses.
The entities in the access control model, i.e. the data objects to
be protected and the identities of users and groups, must be repre-
sented in terms of HTTP request URLs, request and response head-
ers and form ﬁeld data in requests. In a UDA policy, this is done
using deﬁnition rules.
Second, the language must support dynamic evolution of access
control policy by reacting to changes in the policy, such as updates
to access control lists or group memberships. The policy language
must therefore relate HTTP requests that administer the policy to
policy changes. In a UDA policy, this is done using update rules.
We ﬁrst describe the entities that are manipulated by deﬁnition
and update rules. We use a UDA policy for the Drupal [16] content
management system (version 6), which is representative for that of
other applications, as a running example.
3.1 Entities
A UDA policy stipulates that certain data objects that belong to
a given user should only be visible to a subset of other users. There
are two entities in UDA policies: (a) data objects that contain data
items, which represent the user-generated data that should be pro-
tected; and (b) users and groups of users that possess access rights
for data objects.
Data objects. A data object oi is created by the application in
response to user input. When an application creates a new data
object, we assume that it is assigned a unique application-speciﬁc
identiﬁer IDi. For example, an article in Drupal is a data object,
and it is assigned a unique URI.
A data object oi contains a set of data items, D(oi) ={d1,d2, . . .},
for which access control must be enforced. Data items are entered
by users in form ﬁelds of HTTP requests and should be returned in
an HTTP response to a user only if allowed by the access control
policy. For example, when creating an article in Drupal, a user en-
ters values for the title and body form ﬁelds, which are the data
items for the article data object.
We impose the constraint on each data object oi that it must have
a high likelihood of referring to a unique set of data items D(oi).
As we explain in §4.3, this permits the web proxy to track the data
items of data objects across HTTP requests and responses, thus ob-
serving the ﬂow of data between users.
For example, a data object D(o1) = {ssn} may contain a unique
form ﬁeld that stores a social security number. Alternatively, the
combination of multiple data items may be unique: a data object
may contain two data items that store a postal address, D(o2) =
{street_address, postcode}. While each data item on its own is not
unique, their combination has a high probability of being unique.
Users and groups. A user ui is a principal that can make authen-
ticated requests for data objects, i.e. they have access to a set of
data objects, {o1,o2, . . .}. Typically a web application establishes
a session into which an authenticated user’s requests are collected.
Users may also be organised into groups, which simpliﬁes the
assignment of permissions. Each group gi has a unique identiﬁer.
For example, the Organic Groups module [18] in Drupal allows
users to create and manage groups, each identiﬁed through a URI.
Group members can create objects of any content type that Dru-
pal supports, such as articles or pages, and share them with other
members of the group.
3.2 Rules
To link to HTTP requests and responses, UDA policies are rule-
based, similar to ﬁrewall rules. Rules are triggered based on request
URLs and constraints on values. They deﬁne identiﬁers for groups,
users, and data objects, thus allowing the proxy to mirror the access
control lists maintained by the web application.
Rules in UDA policies can be of one of two types:
1. Deﬁnition/removal rules (+ or -) intercept the creation or dele-
tion of entities in the policy, i.e. data objects, users or groups.
They extract required information about new entities to add them
to the access control policy, such as identiﬁers. The proxy can
then maintain a mapping between entities in the UDA policy
and references to these entities in HTTP requests or responses.
2. Update rules (* or -> or -/>) are related to changes of the access
control policy, such as updating an existing data object, adding
a group to the access control list of a data object, or removing a
user from a group. They refer to previously-deﬁned entities.
Syntactically all rules have a rule preamble and a rule body:
  [if ] /* preamble */
{ /* rule body */ }
The rule preamble includes a rule type, a URL speciﬁcation and
the type speciﬁes whether it is a deﬁni-
an optional constraint:
tion/removal or update rule; the URL speciﬁcation describes the
URLs for which the rule is triggered; the constraint indicates addi-
tional conditions that must hold for the rule to trigger, such as pred-
icates on the values of form or header ﬁelds; ﬁnally, the rule body
contains a set of assignments or mapping statements that update the
access control policy maintained by the proxy. As described below,
these statements refer to ﬁelds associated with the entities from the
rule preamble.
For a received HTTP request, the proxy matches the URL spec-
iﬁcation and other request parameters against each rule preamble
and, if satisﬁed, executes the statements in the rule body.
Listing 1 shows part of the rules of the UDA policy for the access
control model used by Drupal.2 Line 9 is a a rule preamble:
data+ PrivateGroupName "/?q=node/add/group" if
(cid:44)→ (formfield "og_private"="1")
606Listing 1: Excerpt from the UDA policy for Drupal
/* Deﬁnition rules */
1 user+ "/*" if (res_hdr "Set-Cookie" re"SESS.*")
2 { id := formfield "name", res_hdr "Location"