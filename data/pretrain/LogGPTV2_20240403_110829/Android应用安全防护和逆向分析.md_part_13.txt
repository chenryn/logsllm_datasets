·\[表示数组，\[Ljava/lang/String；可以对应到Java语言里的java.lang.String\[\]类型。
后面的其他数据结构也会使用到type_ids类型，所以这里解析完type_ids也是需要用一个池子来存放的，后面直接用索引index来访问即可。
##### 7.3.4 proto_ids数据结构 {.bodycontent-title3}
proto的意思是method
prototype，代表Java语言里的一个method的原型。proto_ids里的元素为proto_id_item，结构如下：
::: bodypic-c
![](OEBPS/Images/116-4-i.jpg){.calibre302}
:::
::: bodypic-c
![](OEBPS/Images/117-i.jpg){.calibre303}
:::
其中：
·shorty_idx：跟type_ids一样，它的值是一个string_ids的index号，最终是一个简短的字符串描述，用来说明该method原型。
·return_type_idx：它的值是一个type_ids的index号，表示该method原型的返回值类型。
·parameters_off：后缀off是offset，指向method原型的参数列表type_list；若method没有参数，值为0。参数列表的格式是type_list，结构从逻辑上如下描述。size表示参数的个数；type_idx是对应参数的类型，它的值是一个type_ids的index号，跟return_type_idx是同类东西。
::: bodypic-c
![](OEBPS/Images/117-2-i.jpg){.calibre304}
:::
header里proto_ids_size=0x03，proto_ids_off=0xc4，它的二进制描述区如下：
::: bodypic-c
![](OEBPS/Images/117-3-i.jpg){.calibre70}
:::
根据proto_id_item和type_list的格式，对照这它们的二进制部分，整理出表格如下：
::: bodypic-c
![](OEBPS/Images/118-i.jpg){.calibre305}
:::
可以看出，有3个method原型，返回值都为void，index=0的没有参数传入，index=1的传入一个。
String参数，index=2的传入一个String\[\]类型的参数。
[注意：]{.yanse}在这里会看到很多带idx结尾的字段，这一般都是索引值，所以要注意，区分这个索引值到底是对应的哪张表格，是字符串池，还是类型池等信息，如果弄混淆的话，解析就会出现混乱了。后面其他数据结构都是需要注意。
##### 7.3.5 field_ids数据结构 {.bodycontent-title3}
filed_ids区里面存放的是dex文件引用的所有的field。这个区的元素格式是field_id_item，逻辑结构描述如下所示：
::: bodypic-c
![](OEBPS/Images/118-2-i.jpg){.calibre306}
:::
其中：
·class_idx：表示本field所属的class类型，class_idx的值是type_ids的一个index，并且必须指向一个class类型。
·type_idx：表示本field的类型，它的值也是type_ids的一个index。
·name_idx：表示本field的名称，它的值是string_ids的一个index。
header里field_ids_size=1，field_ids_off=0xe8。说明本dex只有一个field，这部分的二进制描述如下：
::: bodypic-c
![](OEBPS/Images/119-i.jpg){.calibre307}
:::
filed_ids只有一些元素，比较简单。根据filed_ids的格式，整理出表格如下。它是Java最常用的System.out标准输出部分：
::: bodypic-c
![](OEBPS/Images/119-2-i.jpg){.calibre308}
:::
[注意：]{.yanse}这里的字段都是索引值，一定要区分是哪个池子的索引值。另外，这个数据结构后面也要使用到，所以需要用一个池子来存储。
##### 7.3.6 method_ids数据结构 {.bodycontent-title3}
method_ids是索引区的最后一个条目，它索引了dex文件里的所有method。method_ids的元素格式是method_id_item，结构跟fields_ids很相似，如下所示：
::: bodypic-c
![](OEBPS/Images/119-3-i.jpg){.calibre309}
:::
其中：
·class_idx：表示该method所属的class类型，class_idx的值是type_ids的一个index，并且必须指向一个class类型。
·name_idx：表示该method的名称，它的值是string_ids的一个index。
·proto_idx：描述该method的原型，指向proto_ids的一个index。
header里method_ids_size=0x04，method_ids_off=0xf0。本部分的二进制描述如下：
::: bodypic-c
![](OEBPS/Images/119-4-i.jpg){.calibre310}
:::
整理出表格如下：
::: bodypic-c
![](OEBPS/Images/120-i.jpg){.calibre311}
:::
对dex反汇编的时候，常用的method表示方法是如下这种形式：
::: bodypic-c
![](OEBPS/Images/120-2-i.jpg){.calibre282}
:::
将上述表格里的字符串再次整理下，method的描述分别为：
::: bodypic-c
![](OEBPS/Images/120-3-i.jpg){.calibre312}
:::
至此，索引区的内容描述完毕，包括string_ids、type_ids、proto_ids、field_ids、method_ids。每个索引区域里存放着指向具体数据的偏移地址（如string_ids），或者存放的数据是其他索引区域里面的index号。
##### 7.3.7 class_defs数据结构 {.bodycontent-title3}
上面介绍了所有的索引区域，终于到了最后一个数据结构了，之所以放最后，是因为这个数据结构是最复杂的，层次太深了。下面我试着详细介绍一下。
###### 1.class_def_item {.section-subtitle}
从字面意思解释，class_defs区域里存放着class的定义。它的结构较dex区都要复杂些，因为有些数据都直接指向了data区里面。
class_defs的数据格式为class_def_item，结构描述如下：
::: bodypic-c
![](OEBPS/Images/120-4-i.jpg){.calibre313}
:::
::: bodypic-c
![](OEBPS/Images/121-i.jpg){.calibre314}
:::
参数介绍如下：
·class_idx：描述具体的class类型，值是type_ids的一个index。值必须是一个class类型，不能是数组类型或者基本类型。
·access_flags：描述class的访问类型，诸如public、final、static等。在dex-format.html里"access_flagsDefinitions"有具体的描述。
·superclass_idx：描述supperclass的类型，值的形式跟class_idx一样。
·interfaces_off：值为偏移地址，指向class的interfaces，被指向的数据结构为type_list。class若没有interfaces，值为0。
·source_file_idx：表示源代码文件的信息，值是string_ids的一个index。若此项信息缺失，此项值赋值为NO_INDEX=0xffff
ffff。
·annotions_off：值是一个偏移地址，指向的内容是该class的注释，位置在data区，格式为annotations_direcotry_item。若没有此项内容，值为0。
·class_data_off：值是一个偏移地址，指向的内容是该class的使用到的数据，位置在data区，格式为class_data_item。若没有此项内容，值为0。该结构里有很多内容，详细描述该class的field、method、method里的执行代码等信息，后面有一个比较大的篇幅来讲述class_data_item。
·static_value_off：值是一个偏移地址，指向data区里的一个列表（list），格式为encoded_array_item。若没有此项内容，值为0。
header里class_defs_size=0x01，class_defs_off=0x
0110。则此段二进制描述为：
::: bodypic-c
![](OEBPS/Images/122-i.jpg){.calibre315}
:::
根据对数据结构class_def_item的描述，整理出表格如下：
::: bodypic-c
![](OEBPS/Images/122-2-i.jpg){.calibre316}
:::
其实最初被编译的源码只有几行，和class_def_item的表格对照下，一目了然。
::: bodypic-c
![](OEBPS/Images/122-3-i.jpg){.calibre317}
:::
###### 2.class_def_item=\>class_data_item {.section-subtitle}
class_data_off指向data区里的class_data_item结构，class_data_item里存放着本class使用到的各种数据，下面是class_data_item的逻辑结构：
::: bodypic-c
![](OEBPS/Images/123-i.jpg){.calibre318}
:::
关于元素的格式Uleb128在string_ids里讲述过，不赘述。encoded_field的结构如下：
::: bodypic-c
![](OEBPS/Images/123-2-i.jpg){.calibre319}
:::
::: bodypic-c
![](OEBPS/Images/124-i.jpg){.calibre320}
:::
encoded_method的结构如下：
::: bodypic-c
![](OEBPS/Images/124-2-i.jpg){.calibre321}
:::
其中：
1）method_idx_diff：前缀methd_idx表示它的值是method_ids的一个index，后缀_diff表示它是于另外一个method_idx的一个差值，就是相对于encodeed_method\[\]数组里上一个元素的method_idx的差值。其实encoded_filed→field_idx_diff表示的也是相同的意思，只是编译出来的Hello.dex文件里没有使用到class
filed所以没有仔细讲，详细的参考dex_format.html的官网文档。
2）access_flags：访问权限，比如public、private、static、final等。
3）code_off：一个指向data区的偏移地址，目标是本method的代码实现。被指向的结构是：
·code_item，有近10项元素，后面再详细解释。
·class_def_item→class_data_off=0x 0234。
::: bodypic-c
![](OEBPS/Images/124-4-i.jpg){.calibre322}
:::
::: bodypic-c
![](OEBPS/Images/124-5-i.jpg){.calibre323}
:::
名称为LHello；class里只有2个directive
methods。directive_methods里的值都是Uleb128的原始二进制值。按照directive_methods的格式encoded_method再整理一次这2个method描述，得到结果如下表格所描述：
::: bodypic-c
![](OEBPS/Images/125-i.jpg){.calibre324}
:::
method一个是\，一个是main，这里需要用string_ids那块介绍到的一个方法就是解码uleb128类型的方法得到正确的value值。
###### 3.class_def_item=\>class_data_item=\>code_item {.section-subtitle}
到这里，逻辑的描述有点深了。先回想一下是怎么走到这一步的，code_item在dex里处于一个什么位置。
1）一个dex文件被分成了9个区，详细见图7-1所示。其中有一个索引区叫作class_defs，索引了dex里面用到的class，以及对这个class的描述。
2）class_defs区，其实是class_def_item结构。这个结构里描述了LHello；的各种信息，诸如名称、superclass、access
flag、interface等。class_def_item里有一个元素class_data_off，指向data区里的一个class_data_item结构，用来描述class使用到的各种数据。自此以后的结构都归于data区了。
3）class_data_item结构，描述class里使用到的static field，instance
field，direct_method，和virtual_method的数目和描述。例子Hello.dex里，只有2个direct_method，其余的field和method的数目都为0。描述direct_method的结构叫作encoded_method，是用来详细描述某个method的。
4）encoded_method结构，描述某个method的method类型，access
flags和一个指向code_item的偏移地址，里面存放的是该method的具体实现。
5）code_item，一层又一层，简要地说，code_item结构里描述着某个method的具体实现。它的结构如下描述：
::: bodypic-c
![](OEBPS/Images/125-2-i.jpg){.calibre325}
:::
::: bodypic-c
![](OEBPS/Images/126-i.jpg){.calibre114}
:::
末尾的3项见图7-2所示，标志为optional，表示可能有，也可能没有，根据具体的代码来：
·registers_size：该段代码使用到的寄存器数目。
·ins_size：method传入参数的数目。
·outs_size：该段代码调用其他method时需要的参数个数。
·tries_size：try_item结构的个数。
·debug_off：偏移地址，指向该段代码debug信息存放位置，是一个debug_info_item结构。
·insns_size：指令列表的大小，以16bit为单位。insns是instructions的缩写。
·padding：值为0，用于对齐字节。
·tries和handlers：用于处理Java中的exception，常见的语法有try catch。
###### 4.分析main method的执行代码并与smali反编译的结果比较 {.section-subtitle}
在7.2节里有2个方法，因为main里的执行代码是自己写的，分析它会熟悉很多。偏移地址是directive_method\[1\]→code_off=0x0148，二进制描述如下：
::: bodypic-c
![](OEBPS/Images/126-2-i.jpg){.calibre326}
:::
根据code_item的结构整理表格如下：
::: bodypic-c
![](OEBPS/Images/126-3-i.jpg){.calibre327}
:::
insns数组里的8个二进制原始数据，对这些数据的解析，需要参考官网的文档"Dalvik
VM InstructionFormat"和"Bytecode for Dalvik VM"。
分析思路整理如下：
1）"Dalvik VM Instruction
Format"里操作符op都是位于首个16位数据的低8位，起始的是op=0x62。