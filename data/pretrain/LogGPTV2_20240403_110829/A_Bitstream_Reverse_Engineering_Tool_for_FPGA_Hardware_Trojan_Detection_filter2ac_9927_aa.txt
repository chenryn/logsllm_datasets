title:A Bitstream Reverse Engineering Tool for FPGA Hardware Trojan Detection
author:Junghwan Yoon and
Yezee Seo and
Jaedong Jang and
Mingi Cho and
JinGoog Kim and
HyeonSook Kim and
Taekyoung Kwon
Poster: Towards Reverse Engineering FPGA
Bitstreams for Hardware Trojan Detection
Yezee Seo1, Junghwan Yoon1, Jaedong Jang1, Mingi Cho1, Hoon-Kyu Kim2, and Taekyoung Kwon1
1Information Security Lab, Yonsei University, Seoul, 03722, Korea
2Agency for Defense Development, Seoul, Korea
1{seoyz0716, yjh1226, woehd91, imgc, taekyoung}@yonsei.ac.kr
PI:EMAIL
Abstract—FPGAs are ﬁeld-programmable and reconﬁgurable
integrated circuits, aiming at both hardware and software advan-
tages. They recently tend to combine with microprocessors in the
form of all programmable SoCs. A security problem in FPGAs
is that the conﬁguration data called a bitstream, which must be
loaded to circuits, is susceptible to both malicious fabrication
and modiﬁcation attacks due to ﬂexibility. That is, a hardware
Trojan can be loaded to the circuits. In this study, we consider a
reverse engineering of bitstreams promising for hardware Trojan
detection in a static manner because modern techniques relying
on dynamic signal analysis are not cost-effective nor precise. A
challenge is that the reverse engineering of bitstreams is not
relatively easy and that the detailed format of the bitstream is
proprietary to the FPGA vendors. As a preliminary study, we
design the general architecture of bitstream reverse engineering
for hardware Trojan detection in this respect, and present a
detailed method for reverse engineering the core resources of
FPGAs. We also discuss our on-going work and future directions.
I.
INTRODUCTION
A ﬁeld-programmable gate array (FPGA) is an integrated
circuit device that can be programmed and also be re-
programmed after manufacture to run many speciﬁc appli-
cations. It can also implement software processor cores and
combine with hardware processor cores. These reconﬁgurable
and general features of FPGAs allow designing an application
system more ﬂexible, expecting both hardware performance
and software diversity in FPGAs. For the reasons, FPGAs
are already used in various application ﬁelds, such as crypto-
graphic core, multimedia processing, automotive, and military
systems, and the ﬁelds employing FPGAs are still growing.
The system loaded onto the FPGA is ﬁrst programmed in
hardware description language (HDL), such as Verilog and
VHDL, and then the synthesized design is loaded onto the
FPGA device in the form of a bitstream. During the synthesis
process, various external IP cores might be employed mostly
in the way of protecting those IPs of the third party.
As the use of FPGAs magniﬁcently increases, there are
many growing concerns about security of FPGAs because of
potential threats, such as hardware Trojan (HT), cloning, tam-
pering and denial of service attacks [8]. HT is a real malicious
threat because it can hide in hardware avoiding trivial dynamic
detection methods until launched, and if conditioned, perform
many kinds of malicious actions, such as information leakage
and unintentional malfunctions [4].
In FPGA-based systems, the HT could be inserted into
the FPGA design through many routes, e.g., outsourcing to
external vendor, using untrusted third-party IPs, and reconﬁg-
uring in the FPGA supply chain. To cope with these problems,
various methods for HT detection have been studied and also
applied. Interestingly, most of those approaches rely on logic
testing and side-channel analysis. Saying, they are dynamic
analysis methods to detect HT by observing the signals ob-
tained by speciﬁc device when HT is activated. Thus, there
remain limitations: logic testing is difﬁcult to trigger HT, and
side-channel analysis is not easy to detect HT if the sensible
effect of HT is insigniﬁcant [2]. To overcome such limitations,
a detection method based on static analysis was also studied
but with a gate-level netlist given [6]. Such static analysis
methods have difﬁculty in detecting HT inserted directly into
the bitstreams through modiﬁcation or manipulation of the
existing bitstreams. Therefore, to detect HT, it is necessary
to “reverse engineer” the bitstream to the gate-level netlist.
However, it is a challenging task to perform bitstream reverse
engineering (RE) because vendors are reluctant to disclose the
bitstream format and the design size and complexity of FPGAs
have signiﬁcantly increased.
The previous studies of FPGA bitstream RE aim at bit-
stream format analysis and efﬁcient reconﬁguration. debit [5]
ﬁrst introduced a correlation algorithm for bitstream RE by
analyzing the bitstream format of Virtex 2. BIL [1] extended
the previous work by employing as pre-knowledge the XDLRC
ﬁle which contains information about all resources in order
to evaluate the result of RE. Although BIL recovered partial
resources of speciﬁc tiles only, it showed a promising direction
for bitstream RE. bit2ncd [3] aimed at more complete RE
for efﬁcient reconﬁguration purposes although it was unclear
whether the logic implemented in each lookup table (LUT)
was correctly recovered. Unlike the previous RE studies, in
this paper, we are focused on hardware Trojan detection.
II. SYSTEM DESIGN
Given a bitstream ﬁle, we need to recover a netlist that re-
veals the actual FPGA circuit conﬁguration. The conﬁguration
resources are clearly divided into two parts: Programmable
Interconnect Point (PIP) that represents the connection in-
formation of FPGAs, and Programmable Logic Point (PLP)
that shows logic implementation such as clocks, multipliers,
registers, and LUTs. Thus, we need to recover them for HT
detection. Among various form of netlist, we consider a textual
format, such as XDL, to identify conﬁgurable functions and
ﬁnally use them for static analysis and HT detection. We adopt
a machine learning technique for HT detection in XDL level,
our mapping table. As a result, the average recovery rate of
INT tiles has increased from 82% to 89.4%. We may increase
those rates by employing more pairs for database construction.
For LUTs, we basically utilized the bitextract module and
wrote a python code to compare the conﬁguration data. From
the comparison result, we found that the LUT data in slice
with an odd x coordinate is located in frames #26 to #29, and
the LUT data in slice with an even x coordinate is located
in frames #32 to #35 among the 36 frames of a CLB block.
Based on this result, we obtained all data offsets of 20,480
LUTs in the device used in our experiment. To verify the
extracted LUT data, we stored a random value in each LUT
using verilog and extracted the data corresponding to the LUT.
As a result of using OR operation, we were able to conﬁrm
that the originally stored value was correctly recovered. Finally
we reconstructed the truth table with recovered values, and
converted it into boolean equations. Each converted equation
has the same functionality with original equation.
IV. SUMMARY AND FUTURE DIRECTION
As a preliminary study of HT detection in the bitstream
level of FPGAs, we addressed how to reverse engineer bit-
streams for HT detection, and particularly we mainly showed
how to recover the PIP and LUT information from bitstreams.
Through the improvement, we increased the recovery rate of
PIP and succeeded in extracting the boolean equation from
the LUT data. The further step of our study is detecting the
HT through the recovered XDL ﬁle. For HT detection from
recovered netlists, we need to construct a database which
consists of the static features extracted from the collected HT
dataset in the same netlist level. We plan to apply a static
analysis and a machine learning based detection technique that
is popular in a software community for malware detection.
ACKNOWLEDGMENT
This work was supported by Defense Acquisition Program
Administration and Agency for Defense Development under
the contract (UD160066BD).
REFERENCES
[1] F. Benz, A. Seffrin, and S. A. Huss, “BIL: A Tool-chain for Bitstream
Reverse-engineering,” in Proc. The International Conference on Field-
Programmable Logic and Applications (FPL). IEEE, 2012, pp. 735–738.
[2] S. Bhunia, M. S. Hsiao, M. Banga, and S. Narasimhan, “Hardware
Trojan Attacks: Threat Analysis and Countermeasures,” Proceedings of
the IEEE, vol. 102, no. 8, pp. 1229–1247, 2014.
[3] Z. Ding, Q. Wu, Y. Zhang, and L. Zhu, “Deriving an NCD ﬁle
from an FPGA Bitstream: Methodology, Architecture and Evaluation,”
Microprocessors and Microsystems, vol. 37, no. 3, pp. 299–312, 2013.