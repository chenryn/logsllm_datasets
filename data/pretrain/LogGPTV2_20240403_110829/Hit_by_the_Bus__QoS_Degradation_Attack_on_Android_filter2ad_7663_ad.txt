33.33
62.25
11.44
9.08
17.81
51.53
31.97
56.14
44.94
43.55
44.16
69.19
51.96
31.36
58.52
69.20
68.99
34.50
34.47
57.48
21.43
67.18
65.84
50.17
59.37
30.12
11.18
69.71
39.98
17.50
20.89
12.00
10.40
10.54
71.50
44.94
43.69
63.78
16.08
25.24
36.66
%
33.36
32.87
41.91
26.57
38.12
10.18
2.84
39.40
19.06
52.87
34.96
19.63
26.73
22.00
13.85
16.12
19.69
29.50
49.54
49.26
47.74
47.98
33.53
33.17
53.94
51.11
39.06
31.98
45.03
25.34
30.95
34.14
38.98
34.28
5.96
11.47
8.66
34.26
39.56
34.68
34.23
10.70
0.68
13.54
In addition to that, remember that the memory bus locking
part of our attack is active only when the target app is in
the foreground. So, unless the target device supports split
screen and multitasking, and both the task manager and
the victim app support split screen, the user cannot even
observe this 10% percent load. While the bus locking is
not active, the load of our background service is nominal,
between 0.01% and 1%.
3. The current malware and anti-virus scanners are not
adequately suited to detect micro-architectural attacks or
bottlenecks.
In these types of attacks, the attack surface
and threat models are completely diﬀerent than those of
classical malware.
4. The attack is hard to detect with dynamic or static
analysis techniques because the attacker app performs legit-
imate data operations and does not attempt to access any
unauthorized APIs or data. Any app can perform atomic
operations and trigger the bus lock without an ill-intent.
Therefore it is not practical to simply detect these instruc-
tions. Further, the attacker app does not contain any in-
formation like the package name of the victim app which
could give away the attack during a static analysis. As for
dynamic analysis, the scanner would have to trigger a bus
lock which would require running the victim app which may
not be possible if the victim is later provided to the app
via the web connection. Finally, since no compute intensive
operation like increment counters are used in the attack, it
would be to very hard to observe the degradation during the
scan and tag it as malware.
6. DETECTION AND MITIGATION
In order to detect and mitigate this attack, we propose
the following countermeasures.
Atomic Operation Address Check: The operating sys-
tem can inspect atomic operation operands for uncacheable
memory addresses. When such an address is detected, the
OS then can increment the count of recent atomic operations
on uncacheable addresses. If the count reaches a preselected
threshold, then the OS can give the app issuing these atomic
operations a timeout or shut it down altogether. Though
this countermeasure would incur a performance overhead,
the penalty would be smaller than bus locking. Alterna-
tively, the OS can move the operated data to a cacheable
address and prevent bus locks.
Memory Bandwidth Monitoring: The operating system
can periodically monitor memory bandwidth and stop or
slow down any process that triggers bus locking frequently.
In the case of an active attack, this method would allow
the OS to detect the culprit and stop the process/app while
allowing non-attack locks to be performed as usual.
Closing Inter-app Logical Channel Leaks: As discussed
in Section 4.1 in detail, there are numerous ways to know
which apps are installed or running on an Android device.
When this information is obtained by the attacker,
it is
a matter of resource monitoring (through logical or side-
channels) to detect victim launch. So, if an attacker cannot
obtain any information about installed or running apps on
the device, then the detection stage would rely only on more
noisy side-channels like shared hardware monitoring. While
this countermeasure would strongly impact existing apps us-
ing information like installed apps, it would also make the
detection part of the attack more diﬃcult.
Restricting Access to UsageStats: UsageStats permis-
sion is used by numerous apps that need to monitor user’s
app usage. For instance, a mobile data operator might want
to check which apps is currently active so that they can dis-
able the data usage counter for a speciﬁc app e.g. Youtube
or Netﬂix. However, it is also a dangerous permission in the
sense that it looks innocent to a naive user but has crucial
consequences as demonstrated in this paper. So, instead
of removing this permission altogether, making it a signa-
ture/system level permission would protect this critical in-
formation while allowing trusted parties e.g. data operators
to keep the functionality.
7. CONCLUSION
In conclusion, we show that low-level architectural attacks
are a real threat in mobile devices. Battery, compute power
and storage restrictions of mobile devices require strong opti-
mizations and create very suitable candidates for these types
of attacks. Further, combining architectural attacks with
logical channel leakages open a wide range of exploits for
malicious parties.
In this work, we have shown that ma-
licious parties can exploit the underlying shared hardware
to degrade or even halt operations of other apps using this
combination and inter-app interactions have to be controlled
carefully.
8. ETHICAL CONCERNS AND RESPONSI-
BLE DISCLOSURE
The attacker app that we have designed is uploaded to the
Google Play Store and since it is not detected as malware by
the Play Store, it is currently available for download. Since
the app causes performance degradation to the overall sys-
tem, we have clearly warned users in the install page that
this is an experimental app aiming to degrade the perfor-
mance of the overall system and should be used with cau-
tion. We hope that this warning will be suﬃcient to prevent
any accidental installations that might result in unwanted
performance degradation. Further, to prevent hogging of
the system resources, we have signiﬁcantly limited the per-
formance degradation power of the app by decreasing the
frequency of memory bus lock triggers.
Finally, we have informed the Android security team of
our ﬁndings in advance to this publication and made our
bug submission through the AOSP bug report portal. Since
then, we have been in contact with the Android security
team and currently working on possible detection and miti-
gation strategies for the attack.
9. ACKNOWLEDGMENTS
This work is supported by the National Science Founda-
tion, under the grant CNS-1618837. Also, we would also like
to thank anonymous reviewers for their insightful comments
and suggestions for improving this paper. In particular we
thank our shepherd, Mohammad Mannan.
10. REFERENCES
[1] Android system permissions. https://developer.
android.com/guide/topics/security/permissions.html.
[2] ARM Synchronization Primitives. http://infocenter.
arm.com/help/topic/com.arm.doc.dht0008a/
DHT0008A arm synchronization primitives.pdf.
[3] Number of available applications in the Google Play
Store from December 2009 to September 2016.
https://www.statista.com/statistics/266210/
number-of-available-applications-in-the-google-play-store/.
[4] Android Dashboards. Online, Nov 2016. https://
developer.android.com/about/dashboards/index.html.
[5] Android, the world’s most popular mobile platform.
Online, Nov 2016.
https://developer.android.com/about/android.html.
[6] Application Fundamentals. Online, Nov 8 2016.
https://developer.android.com/guide/components/
fundamentals.html.
[7] Acıi¸cmez, O. Yet Another MicroArchitectural Attack:
Exploiting I-Cache. In Proceedings of the 2007 ACM
Workshop on Computer Security Architecture.
[8] Acıi¸cmez, O., Gueron, S., and Seifert, J.-P. New
branch prediction vulnerabilities in OpenSSL and
necessary software countermeasures. In IMA
International Conference on Cryptography and Coding
(2007).
[9] Acıi¸cmez, O., K. Ko¸c, c., and Seifert, J.-P.
[26] Spreitzer, R., and Plos, T. On the Applicability of
Predicting secret keys via branch prediction. In Topics
in Cryptology CT-RSA 2007, vol. 4377. pp. 225–242.
[10] Bernstein, D. J. Cache-timing attacks on AES, 2004.
URL: http://cr.yp.to/papers.html#cachetiming.
[11] Bianchi, A., Corbetta, J., Invernizzi, L.,
Fratantonio, Y., Kruegel, C., and Vigna, G.
What the App is That? Deception and
Countermeasures in the Android User Interface. In
IEEE S&P 2015.
[12] Bogdanov, A., Eisenbarth, T., Paar, C., and
Wienecke, M. Diﬀerential cache-collision timing
attacks on aes with applications to embedded cpus. In
CT-RSA 2010.
[13] Brumley, B. Cache storage attacks. In CT-RSA
2015.
[14] Chen, Q. A. and Qian, Z. and Mao, Z. M. Peeking
into Your App without Actually Seeing It: UI State
Inference and Novel Android Attacks. In USENIX
Security 2014.
[15] Colp, P., Zhang, J., Gleeson, J., Suneja, S.,
de Lara, E., Raj, H., Saroiu, S., and Wolman,
A. Protecting data on smartphones and tablets from
memory attacks. ASPLOS 2015.
[16] Inci, M. S., Gulmezoglu, B., Eisenbarth, T., and
Sunar, B. Co-location Detection on the Cloud. In
COSADE 2016.
[17] Inci, M. S., Irazoqui, G., Eisenbarth, T., and
Sunar, B. Eﬃcient, Adversarial Neighbor Discovery
using Logical Channels on Microsoft Azure. In
ACSAC 2016.
[18] Irazoqui, G., Eisenbarth, T., and Sunar, B. S$A:
A Shared Cache Attack that Works Across Cores and
Deﬁes VM Sandboxing and its Application to AES. In
IEEE S&P 2015.
[19] Irazoqui, G., Inci, M. S., Eisenbarth, T., and
Sunar, B. Wait a Minute! A fast, Cross-VM Attack
on AES. In RAID 2014.
[20] Jana, S., and Shmatikov, V. Memento: Learning
secrets from process footprints. In IEEE S&P 2012.
[21] Lipp, M., Gruss, D., Spreitzer, R., Maurice, C.,
and Mangard, S. ARMageddon: Last-Level Cache
Attacks on Mobile Devices. In USENIX Security 2016.
[22] Liu, F. and Yarom, Y. and Ge, Q. and Heiser, G.
and Lee, R. B. Last-level cache side-channel attacks
are practical. In IEEE S&P 2015.
[23] Maurice, C. and Weber, M. and Schwarz, M.
and Giner, L. and Gruss, D. and Carlo, A. B.
and Mangard, S. and R¨omer, K. Hello from the
Other Side: SSH over Robust Cache Covert Channels
in the Cloud. In NDSS 2017.
[24] Osvik, D. A., Shamir, A., and Tromer, E. Cache
Attacks and Countermeasures: The Case of AES.
CT-RSA 2006.
[25] Rusling, D. A. ARMv7a Architecture Overview.
presentation, 2010. https://wiki.ubuntu.com/Specs/
M/ARMGeneralArchitectureOverview?action=
AttachFile&do=get&target=ARMv7+Overview+a02.
pdf.
Time-Driven Cache Attacks on Mobile Devices. In
NSS 2013.
[27] van der Veen, V., Fratantonio, Y., Lindorfer,
M., Gruss, D., Maurice, C., Vigna, G., Bos, H.,
Razavi, K., and Giuffrida, C. Drammer:
Deterministic Rowhammer Attacks on Mobile
Platforms. In CCS 2016.
[28] Varadarajan, V., Zhang, Y., Ristenpart, T.,
and Swift, M. A placement vulnerability study in
multi-tenant public clouds. In USENIX Security 2015.
[29] Yarom, Y., and Falkner, K. FLUSH+RELOAD: A
High Resolution, Low Noise, L3 Cache Side-Channel
Attack. In USENIX Security 2014.
[30] Zhang, Y., Juels, A., Oprea, A., and Reiter,
M. K. HomeAlone: Co-residency Detection in the
Cloud via Side-Channel Analysis. In IEEE S&P 2011.
[31] Zhang, Y., Juels, A., Reiter, M. K., and
Ristenpart, T. Cross-VM Side Channels and Their
Use to Extract Private Keys. In CCS 2012.
[32] Zhou, X., Demetriou, S., He, D., Naveed, M.,
Pan, X., Wang, X., Gunter, C. A., and
Nahrstedt, K. Identity, location, disease and more:
Inferring your secrets from android public resources.
In CCS 2013.
APPENDIX
A. COMPLETE LIST OF MALWARE SCAN-
NERS
1. 360 Security - Antivirus Boost
2. Anti Spy (SpyWare Removal)
3. AntiVirus FREE 2016 - Android
4. Avira Antivirus Security
5. Bitdefender Antivirus Free
6. Clean Master (Boost & AppLock)
7. CM Security AppLock AntiVirus
8. Comodo Mobile Security
9. Dr. Safety - BEST FREE ANTIVIRUS
10. Droidkeeper - Free Antivirus
11. FREE Spyware & Malware Remover
12. GO Security
13. Antivirus AppLock
14. Hidden Device Admin Detector
15. Kaspersky Antivirus & Security
16. Lookout Security & Antivirus
17. Malwarebytes Anti-Malware
18. McAfee SpyLocker Remover
19. Mobile Security & Antivirus
20. Norton Security and Antivirus
21. Open Vaccine
22. Security & Power Booster -Free
23. Stubborn Trojan Killer