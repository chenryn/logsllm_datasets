35,833
214,336
# Instrs
241,012
193,436
73,290
3,672
12,648
140,454
128,480
792,992
Fig. 11. The number of unique crashes found with each mutation probability.
2) Scalability of the Analysis: Although our static analysis
can be considered as a pre-processing step,
it should be
efﬁcient enough to handle multiple Windows system binaries.
To evaluate the scalability of our static analyzer, we ﬁrst
computed several statistics about the system binaries that our
static analyzer had to deal with. We then computed how long
it took to run our analyzer on those binaries.
Table II summarizes the size of code analyzed by our
system. Recall from §V-A that NTFUZZ selectively analyzes
functions that can affect syscall arguments in order to reduce
the analysis cost. Still, our analyzer had to deal with the
semantics of more than 12K functions and 792K instructions
in total. These numbers indeed conﬁrm the need for scalable
binary analysis.
Figure 10b describes how long it takes for our analyzer
to infer syscall types with each NSE parameter. As NSE
gets higher, we naturally spend longer time on the analysis.
Surprisingly, though, the total analysis time was only within a
few hours for all cases. This result highlights that our design
choices described in §IV-B and §V indeed enabled a scalable
binary analysis for syscall type inference.
In the following fuzzing experiments, we use the type
information obtained with NSE = 50 as the experimental
results imply that this conﬁguration strikes a good balance
between the scalability and accuracy of the analysis.
C. Deciding Mutation Parameter for Fuzzing
Previous works [16], [30] have shown that mutation conﬁg-
uration greatly inﬂuences the effectiveness of fuzzing. There-
fore, we also evaluate the impact of mutation conﬁguration on
our system. As we described in §VI-B1, NTFUZZ employs a
user-conﬁgurable parameter p, the mutation probability.
(a) Accuracy of analysis.
(b) Time consumption of analysis.
Fig. 10. The accuracy and speed of static analyzer with different NSE values.
3) Seed Applications: Recall from §VI that NTFUZZ re-
quires a seed application to operate. Therefore, we manu-
ally collected eight user applications from various categories:
AdapterWatch 1.05, Chess Titans [96], DxDiag, PowerPoint
2019 10361.20002, SpaceSniffer 1.3.0.2, SumatraPDF 3.2,
Unity Sample [90], and WordPad. We used these seed ap-
plications for all our fuzzing experiments.
B. Performance of Static Analyzer
Does our static analyzer output accurate syscall type infor-
mation within a reasonable amount of time? To answer this
question, we ran our static analyzer on the system binaries
(Table I) obtained from Windows 10 17134.1.
1) Accuracy of the Analysis: To evaluate the accuracy of
our static analysis, we ﬁrst had to ﬁnd documented syscalls
for establishing ground truth data. We collected documented
syscalls from Microsoft Docs [60], [61], [64], [66], and ﬁltered
out syscalls that are not called from the system binaries. As
a result, we obtained 64 syscalls and their 326 arguments as
the ground truth.
Figure 10a describes how accurately our static analyzer
performs. The Y-axis denotes the percentage of correctly
identiﬁed syscall argument types. With NSE from 50 to 100,
our analyzer was able to correctly infer 69% of the syscall
arguments. Recall from §V-B4 that NSE parameter decides the
degree of soundness of our analysis. When NSE is too low,
the analyzer ignores side effects and yields a lower accuracy.
When NSE is too high, the analyzer soundly captures side
effects, but it becomes prone to over-approximation.
To further understand the inaccuracy result of our analyzer,
we examined why our analyzer returns incorrect types for 31%
of the cases when NSE = 50. The most signiﬁcant cause was
the use of a NULL pointer. If every call site of a syscall we
analyzed passes a NULL value for a pointer-type argument,
we have no means to infer that type by just looking at the
binary. Another major cause we found was C structures located
on the stack. As discussed in §V-C1, this is another inherent
limitation of binary analysis.
We note that a 69% accuracy is already high enough for
the purpose of fuzzing because this means our fuzzer can
perform type-aware mutation on 69% of the syscall arguments
it encounters. As we show in §VII-D, our type analysis result
indeed helps NTFUZZ ﬁnd 1.7× more unique crashes on
Windows kernel.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
686
6570050100150200NSE parameterCorrect Type Ratio (%)050100150200250050100150200NSE parameterAnalysis Time (min.)01020300.1250.250.51248Mutation Probability (%)# of Unique Crashes(a) The number of total crashes.
(b) The number of unique crashes.
Fig. 12. The number of kernel crashes found over time, respectively with
type-aware fuzzing and type-unaware fuzzing.
To observe the impact of the mutation probability, we ran
NTFUZZ on the Windows 10 17134.1 with seven different p
values: p = 0.01 × 2n, where n ∈ {−3,−2, ..., 3}. For each
p, we ran NTFUZZ for 48 hours with each of the eight seed
applications. This sums up to a total of 384 (= 48 × 8) hours
of fuzzing for each p. We repeated the experiments ﬁve times
and reported the average numbers with ranges in Figure 11.
When mutation probability is too low, NTFUZZ has less
chance to mutate syscall arguments, and thus, it ﬁnds fewer
bugs. On the other hand, when the mutation probability is
too high, the seed program terminates too early due to syscall
errors even before it reaches a meaningful program state. In
our experiments, NTFUZZ with mutation probability p = 0.01
found the greatest number of crashes on average.
Next, we further investigated the crashes found with each
mutation probability, and noticed that different p parame-
ters report different sets of crashes. For example, although
p = 0.01 produced the most crashes, one of the crashes
we observed was found only with p = 0.08, but not with
p = 0.01. This is not surprising, because the optimal mutation
probability can be different for each different bug [16].
Based on this observation, we ran an additional experiment
with variable mutation probability. That is, for each execution
of a seed application, we randomly chose one of the seven
mutation probabilities, instead of using a ﬁxed one. The dashed
line in Figure 11 presents the average number of unique
crashes found with this strategy. While it found slightly more
crashes than p = 0.01, the difference was not signiﬁcant.
Nonetheless, we decided to use the variable mutation prob-
ability for the rest of the fuzzing experiments. This is to
avoid potential overﬁtting of our system. For example, if we
use a different set of seed applications, the optimal mutation
parameter may change accordingly. By using this strategy, we
expect our system to adapt ﬂexibly to such changes.
D. Impact of Type Information On Fuzzing Effectiveness
We now evaluate whether our static analysis is indeed
helpful for effective fuzzing. To conﬁrm the impact of type
information on NTFUZZ, we ran NTFUZZ and compared the
number of crashes found with and without type information.
For type-aware fuzzing, we simply ran NTFUZZ with the type
information obtained in §VII-B. For type-unaware fuzzing, we
(a) Impact of unsoundness.
(b) Impact of imprecision.
Fig. 13. The impact of type inaccuracy on fuzzing effectiveness.
modiﬁed NTFUZZ to disable our type-aware mutation, and
made it simply use the integer mutation strategy only.
Figure 12 shows the number of crashes found over time.
Again, we ran NTFUZZ for 48 hours with each seed appli-
cation, and repeated the experiments for ﬁve times. On aver-
age, NTFUZZ found 130.6 crashes (with standard deviation
σ = 15.2) and 24.4 unique crashes (σ = 2.1) with type
information. Without type information, however, it found only
60.6 total crashes (σ = 5.2) and 14.6 unique crashes (σ = 0.9).
With a Mann-Whitney U test, we conclude that type-aware
fuzzing ﬁnds signiﬁcantly more unique crashes than type-
unaware fuzzing (p-value = 0.011).
Next, we further evaluate how the type accuracy affects the
fuzzing capability. To this end, we deliberately introduce errors
to the type information obtained from §VII-B, and measure
the number of unique crashes found. Speciﬁcally, we emulate
both unsoundness and imprecision of our type analysis as
follows. To emulate the unsoundness, we randomly select
syscall arguments and replace their types with integer types.
To emulate the imprecision, we randomly select pointer type
arguments, and inﬂate their contents twice. For example, when
the pointee type is a structure, we replicate its ﬁelds to double
the structure size.
Figure 13 presents the average number of unique crashes
found with different error introduction ratios. We ran fuzzing
for 48 hours per each seed application per each conﬁguration,
and repeated the experiments for ﬁve times. When we make
type information unsound, the fuzzer will lose chances to
mutate the contents pointed to by the arguments. On the other
hand, if we make the types imprecise, the fuzzer will waste its
resource in mutating irrelevant data, and even make the seed
application to abort due to corrupted parameters. Figure 13
conﬁrms that fuzzing effectiveness indeed decreases as we
introduce more errors to the syscall types.
E. Real-World Bug Finding
We now discuss the practical impact of NTFUZZ by eval-
uating it on the latest Windows 10 (see §VII-A). For this
experiment, we reran the static analyzer on the new version
of the system binaries to obtain the syscall types. We also
manually analyzed and triaged all the bugs found.
1) Comparison Against Other Fuzzers: First, we compared
the effectiveness of NTFUZZ against existing Windows kernel
fuzzers. Note, while there are several open-source projects,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
687
0255075100125150081624324048Time (hour)# of Total CrashesType-awareType-unaware0510152025081624324048Time (hour)# of Unique CrashesType-awareType-unaware05101520250255075100Error Introduction Ratio (%)# of Unique Crashes05101520250255075100Error Introduction Ratio (%)# of Unique CrashesLIST OF UNIQUE BUGS NTFUZZ FOUND FROM THE LATEST WINDOWS 10.
TABLE III
No. Module
Description
win32kfull.sys
ntoskrnl.exe
dxgkrnl.sys
win32kfull.sys
ntoskrnl.exe
win32kfull.sys
ntoskrnl.exe
tcpip.sys
-*
-*
-*
1
2
3
4
5
6
7
8
9
10
11
* Redacted for reponsible disclosure.
Arbitrary memory access due to sanitization error
Use of uninitialized heap memory in kernel-space
Indirect call to arbitrary address due to memory corruption
Out-of-bound buffer read in kernel-space memory
Invalid kernel-space memory access due to sanitization error
Invalid user-space memory access due to sanitization error
Termination of critical system process
NULL pointer dereference
NULL pointer dereference
Floating point error
Floating point error
CVE
CVE-2020-0792
CVE-2020-1246
CVE-2020-1053
CVE-2020-17004
Security Impact
Privilege escalation
Privilege escalation
Privilege escalation
Information disclosure
Denial-of-service
Denial-of-service
Denial-of-service
Denial-of-service
Denial-of-service
Denial-of-service
Denial-of-service
Status
Fixed
Fixed
Fixed
Fixed
Conﬁrmed
Conﬁrmed
Conﬁrmed
Conﬁrmed
Unknown
Unknown
Unknown
NtTraceEvent(struct S* arg) {
...
size_t n = arg->field_0x1c;
char* p = arg->field_0x20;
if (n && (p + n > 0x7fff0000 || p + n > p)) {
return;
}
if (p + 4 < p + n) {
if (*p) { ... } // Crashes here.
1
2
3
4
5
6
7
8
9
10
11
}
...
Fig. 15. Pseudo-code of one of the bugs found by NTFUZZ.
and NtCall64 is type-unaware. This highlights the importance
of type-aware fuzzing on general syscall interfaces.
2) Found Bugs: Next, we collected all the unique bugs
found by NTFUZZ during the fuzzing experiment in §VII-E1.
Table III presents the 11 new bugs found by NTFUZZ, along
with short descriptions and relevant module names. To under-
stand the security impact of each bug we found, we manually
analyzed them and noted them in the table. All the bugs in
the table at least had the impact of denial-of-service, which
allows an unprivileged user to shut down the Windows system.
Moreover, four of the bugs had a more severe security impact
than denial-of-service. We note that ioctlfuzzer and NtCall64
only found denial-of-service bugs in the meantime. At the time
of writing, four of the bugs found by NTFUZZ were assigned
CVEs, and we won $25,000 bug bounty from Microsoft. This
result indeed highlights the practical impact of NTFUZZ.
3) Case Study: We present a case study on one of the
bugs we found to show how the design of NTFUZZ helped in
ﬁnding a new bug. In Figure 15, we provide the pseudo-code
of the syscall handler related to the ﬁfth entry of Table III.
We simpliﬁed the code for ease of explanation.
This bug is caused by an error in the pointer sanitization
logic. First, an attacker provides a pointer to a C structure
as an argument to the syscall. This structure carries a buffer
pointer (field_0x20) as well as the size of the buffer
(field_0x1c). The kernel code sanitizes these two ﬁelds
at Line 5, to ensure that p does not point to a kernel-space
address. However, one can bypass this check when n is zero.
Fig. 14. Comparison of the bugs found by NTFUZZ, ioctlfuzzer, and NtCall64.
most of them were not usable. For example, kAFL [84]
and pe-aﬂ [47] require users to manually write harness code
for fuzzing. Similarly, KernelFuzzer [25] requires users to
manually encode generation rules. BrokenType [37] targets
font parsing APIs, but these APIs do not execute kernel code
since 2015 [53].
Syzkaller [91] has limited Windows support because the
current implementation can only fuzz API functions but
not syscall functions. This makes the comparison against
Syzkaller pointless because syscall-level fuzzing is largely
different from API-level fuzzing as noted in §III.
This leaves us two Windows kernel fuzzers at hand: ioctl-
fuzzer [74] and NtCall64 [33]. To run the fuzzers on x86
Windows 10, we had to modify their source code: 34 lines
of code of ioctlfuzzer as it does not support Windows 10, and
165 lines of code of NtCall64 as it does not support x86.
We ran NTFUZZ for 48 hours per each seed application.
For ioctlfuzzer, which is a hooking-based fuzzer, we used the
same seed applications and fuzzing hours. For NtCall64, which
is a generation-based fuzzer, we simply ran it for the same
amount of time (48 × 8 hours) without the seed applications.
The experiments were repeated ﬁve times.
Figure 14 presents the number of unique bugs found by
each fuzzer. On average, NTFUZZ found 7.8 (σ = 0.8) unique
bugs, while NtCall64 and ioctlfuzzer respectively found only