title:A global name service for a highly mobile internetwork
author:Abhigyan Sharma and
Xiaozheng Tie and
Hardeep Uppal and
Arun Venkataramani and
David Westbrook and
Aditya Yadav
A Global Name Service for a Highly Mobile Internetwork
Abhigyan Sharma
Xiaozheng Tie
David Westbrook
{abhigyan, xztie, hardeep, arun, westy, ayadav}@cs.umass.edu
Hardeep Uppal
Aditya Yadav ∗
Arun Venkataramani
School of Computer Science, University of Massachusetts Amherst
ABSTRACT
Mobile devices dominate the Internet today, however the
Internet rooted in its tethered origins continues to provide
poor infrastructure support for mobility. Our position is
that in order to address this problem, a key challenge that
must be addressed is the design of a massively scalable global
name service that rapidly resolves identities to network loca-
tions under high mobility. Our primary contribution is the
design, implementation, and evaluation of Auspice, a next-
generation global name service that addresses this challenge.
A key insight underlying Auspice is a demand-aware replica
placement engine that intelligently replicates name records
to provide low lookup latency, low update cost, and high
availability. We have implemented a prototype of Auspice
and compared it against several commercial managed DNS
providers as well as state-of-the-art research alternatives,
and shown that Auspice signiﬁcantly outperforms both. We
demonstrate proof-of-concept that Auspice can serve as a
complete end-to-end mobility solution as well as enable novel
context-based communication primitives that generalize name-
or address-based communication in today’s Internet.
Categories and Subject Descriptors
C.2.4 [Computer Systems Organization]: COMPUTER-
COMMUNICATION NETWORKS—Distribtued Systems
Keywords
Mobility; distributed systems; network architecture
1.
“Mobile” has long arrived, but the Internet remains un-
moved. Today, there is roughly one cellphone per human;
the number of smartphones sold last year alone roughly
equals the number of wired hosts on the Internet [28]; and
the total traﬃc originated by mobiles is poised to approach
that by wired devices [18]. However, the current Internet
continues to operate as it did when dominated by tethered
hosts, simply ignoring frequent endpoint mobility.
∗Authors ordered alphabetically by last name.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2836-4/14/08 ...$15.00.
http://dx.doi.org/10.1145/2619239.2626331.
INTRODUCTION
Today, an application developer can not easily initiate
communication with a smartphone even when it has a public
IP address as there is no global infrastructure support for lo-
cating it. Applications like smartphone notiﬁcation systems,
playback video, or cloud storage have to develop application-
level support to enable a seamless experience for their users
even as they change addresses several times a day, or let con-
nections break (as popular VoIP apps do today). The lack
of intrinsic support for mobility means that developers are
forced to redundantly develop and maintain common-case
functionality. Furthermore, we are paying an unknowable
price in terms of long-term growth and innovation by strait-
jacketing communication initiation to be unidirectional.
Many before us have criticized the Internet architecture’s
poor support for mobility as well as multihoming [33, 8, 24,
54]. A common criticism is the Internet’s so-called conﬂa-
tion of identity and location, i.e., the use of an IP address
both to represent the identity of an interface as well as its
network location, which is problematic for mobility (same
identity, changing locations) and multihoming (single iden-
tity, multiple locations). It is commonly accepted wisdom
that a cleaner separation of identity and location is instru-
mental to ﬁxing these problems. However, the Internet does
separate identities (domain-names) from network locations
(IP addresses) through DNS. Most high-level programming
languages also provide syntactic sugar to connect to names
remaining oblivious to IP addresses; and techniques from a
long line of work on connection migration could be employed
to seamlessly handle mid-connection mobility.
But a key missing element from this package today is a dis-
tributed name resolution infrastructure that can scale to or-
ders of magnitude higher update rates than envisioned when
DNS was created. To appreciate the envisioned scale, con-
sider tens of billions of mobile identiﬁers changing network
addresses at least tens of times per day. DNS’s heavy re-
liance on TTL-based caching, a key strength recognized by
its creators, researchers, and operators alike, poses a signiﬁ-
cant handicap by increasing update propagation delays, load
on name servers, and overall client-perceived latency. It is
not uncommon for DNS update propagation to take a day
or more, resulting in long outage times when online services
have to be moved unexpectedly, prompting cries for help
on operator forums [7, 47]. A less widely noted limitation
of DNS is its reliance on hierarchical names for scaling via
federation and its single root of trust, which constrains mo-
bile applications from selecting arbitrary application-speciﬁc
names (as elaborated in §2.2 and §3.2).
247
Our position is that seamless support for mobility requires
a logically centralized global name service that rapidly trans-
lates identities to locations irrespective of how exactly identi-
ties and locations are individually represented. Our primary
contribution is the design, implementation, and evaluation
of Auspice, a distributed system that helps address this chal-
lenge. Compared to today’s ICANN/DNS-based approach,
our approach cleanly separates name resolution from adjudi-
cation and certiﬁcation issues (§3.2). Auspice is also deploy-
able as a managed DNS provider in today’s Internet; com-
pared to them, a key strength of Auspice is a demand-aware
replica placement engine that signiﬁcantly reduces the time-
to-connect to mobile destinations in a cost-eﬀective manner.
Under light load, Auspice’s demand-aware replica placement
aggressively uses available resources to massively replicate
name records, while under heavy load, it carefully controls
the number and choice of replica locations based on the read-
write patterns and pockets of high demand for each name.
We have implemented a prototype of Auspice as a geo-
distributed key-value store to serve as a ﬂexible name res-
olution service for the current Internet as well as several
“future” Internet or endpoint architectures such as Mobili-
tyFirst[54], HIP[33], or XIA[31]. We have extensively eval-
uated Auspice using a combination of Planetlab, emulation
clusters, and Amazon EC2. Our contributions are as follows.
1. A case for a global name service as an indispensable
part of any Internetwork design with intrinsic support
for high mobility (§2).
2. Auspice, a scalable, geo-distributed, federated global
name service that signiﬁcantly reduces the time-to-
connect under any given resource constraints despite
high mobility and arbitrary endpoint identiﬁers (§3,§4).
3. A proof-of-concept demonstration of intrinsic support
for—(i) all four types of endpoint mobility; (ii) novel
context-aware delivery primitives that generalize name-
or address-based communication—over the current In-
ternet as well as MobilityFirst [54] (§4.3).
4. Comparison against several best-of-breed managed DNS
services showing that Auspice’s demand-aware approach
signiﬁcantly lowers time-to-connect and/or update cost
even for today’s (hardly mobile) domain names (§4.4).
To provide a historical perspective, until the early 80s,
the Internet relied on a system called HOSTS.TXT for name
resolution, which was simply a centrally maintained text ﬁle
distributed to all hosts. The current Internet’s distributed
DNS arose in response to the rapidly increasing ﬁle size and
distribution costs. Mockapetris and Dunlap [43] point to
TTL-based caching to reduce load and response times as a
key strength, noting that “the XEROX system [Grapevine
[51]] was then ...
the most sophisticated name service in
existence, but it was not clear that its heavy use of repli-
cation, light use of caching ... were appropriate”. We have
since come a full circle, turning to active replication (§2.2) in
Auspice in order to address the challenges of mobility, a con-
cern that wasn’t particularly pressing in the 80s. Compared
to classical systems like Grapevine or ClearingHouse, Aus-
pice enables support for automated demand-aware replica
placement for arbitrary names (using several modern design
elements such as consensus, the key-value abstraction, self-
certifying names, consistent hashing, etc). Auspice, through
its support for context-aware delivery, is also a step towards
addressing some of the challenges to which Lampson alludes
on representing “descriptive names” [40].
2. CASE FOR A GLOBAL NAME SERVICE
Given the huge body of prior work speciﬁcally on mobility
as well as more broadly on Internet architecture, it is natural
to begin by asking: Is a global name resolution service crit-
ical to handling mobility if we had the luxury of refactoring
Internet naming and routing from a clean slate?
2.1 Internet mobility background
Despite a staggering diversity of proposals re-architecting
Internet naming and routing, we ﬁnd that they explicitly or
implicitly embed one of three broad approaches to handling
mobility–indirection-based routing, global name-to-address res-
olution, or name-based routing–based on how they go from
the name of an endpoint to the endpoint itself.
Indirection-based routing schemes are simple as an
endpoint remains oblivious to the mobility of other end-
points. No name-to-address1 lookup is needed at connection
initiation time as a human-readable name maps to a home
address (an IP address in Mobile IP [48] or a ﬂat identiﬁer’s
consistent-hash location in i3 [53]) that rarely changes by
design. Mid-connection mobility, even when both endpoints
move concurrently, is seamless to endpoints. However, the
data plane pays the price for this simplicity—every data
packet must be routed via an indirection agent at the home
address, potentially causing signiﬁcant routing stretch, e.g.,
two participants at a conference may in each direction need
to detour packets halfway across the world despite being
in the same room. Furthermore, indirection-based schemes
require widespread deployment of indirection agents across
diﬀerent domains, posing a barrier to immediate adoption.
Global name-to-address resolution schemes rely on a
distributed service to resolve names to addresses as the ﬁrst
step in connection establishment. The current Internet’s
DNS as well as a number of designs addressing the Internet’s
so-called identity-location conﬂation problem also need such
a resolution infrastructure, e.g., to translate a self-certifying
host identiﬁer in HIP [33], AIP[12], XIA[31], or Mobility-
First[4]) or an identiﬁer in LISP [8] or HAIR [24] to either an
IP address [33], a self-certifying network identiﬁer [12, 31, 4],
or a hierarchical locator [24] that encodes routing informa-
tion. Global name-to-address resolution schemes also sub-
sume DHT-based Internet architectures such as LNA [14, 56]
as well as resolution systems like CoDoNS [49] that present
a DHT-based drop-in replacement for DNS.
Global name-to-address resolution schemes need explicit
support at endpoints to handle mid-connection mobility.
There is a general consensus [52, 13, 26] that end-to-end
connection migration, i.e., bilaterally without relying on an
external service, suﬃces to migrate connections eﬃciently
when endpoints move one at a time, but an external reso-
lution service is needed to support concurrent mobility. Al-
though the latter is seen as a rare case in most connection
migration work, it can be common in disconnection-tolerant,
mobile application scenarios, e.g., when a user closes her
laptop at home and opens it at a coﬀee shop to continue
watching a movie, by which time the cloud-hosted virtual
server may have been migrated for load balancing.
1We use the terms name and identiﬁer interchangeably; like-
wise for the terms address and location.
248
Name-based routing schemes in the ideal have a tan-
talizing intellectual lure—to seamlessly handle mobility by
routing directly over names with no resolution step—but
are marred by several fundamental and practical challenges.
First, name-based routing approaches can support seamless
mobility only if routing update propagation delays are on the
order of milliseconds, a daunting challenge given that inter-
domain routing can take several minutes to converge today.
Second, theoretical results on compact routing [36] suggest
discouraging fundamental trade-oﬀs between the size of for-
warding tables at routers and path stretch even without any
mobility or multihoming, e.g., routing over N ﬂat identiﬁers
entails a prohibitive Ω(N ) forwarding table size per router
in order to ensure a small constant stretch factor (≈3) com-
pared to shortest-path routing. Simulation-based studies of
ﬂat-label routing strategies (e.g., ROFL [17]) reaﬃrm pes-
simistic conclusions about its scalability.
Although it may appear that the scalability limitations of
name-based routing can be alleviated by adding a hierar-
chical structure to names [29, 35, 32] (e.g., NDN-style [32]
names such as /umass/phone42/call3/frame7), frequent mo-
bility still poses a challenge as routers would have to main-
tain special forwarding entries for “displaced names”, i.e.,
names that move from their hierarchically organized names-
pace (say, from /umass to /comcast in this example) for
longest-preﬁx matching to work correctly. That is, high
mobility eﬀectively makes routing directly over structured
names as hard as routing over ﬂat names unless indirection
or a name resolution infrastructure is used, a conjecture that
has recently been empirically reinforced by Gao et al. [27].
Summary. Our position is that a global name-to-address
resolution service is critical for handling high mobility in
any network architecture as it oﬀers the best combination
of trade-oﬀs: (1) a constant update overhead per mobility
event to the name service, (2) a modest connection estab-
lishment overhead and rapid mid-connection mobility, (3) no
data path inﬂation beyond underlying policy routing, and
(4) small forwarding table sizes in conjunction with aggre-
gatable addresses (IP preﬁxes like today or self-certifying
network addresses [4, 31]). Perhaps the most compelling ar-
gument for global name-to-address resolution is our decades
of familiarity with DNS and the Internet; handling mobility
would be a drop-in replacement to DNS provided we address
the challenge of building a distributed system that scales to
billions of devices making many updates a day and yet re-
turns up-to-date responses within milliseconds.
2.2 Limitations of DNS
What speciﬁc design traits of DNS make it poorly suited
for mobile applications? The ﬁrst two traits below limit its
scalability with respect to the rate of endpoint mobility, and
the third limits its scalability with respect to the size of the
namespace if applications were to have the luxury of using
arbitrary (but ﬁxed) names.
(1) TTL-based caching: TTL-based caching is the single-
most important mechanism for DNS’s scalability; caching
not only helps DNS sustain essentially arbitrarily high lookup
load but also dramatically reduces client-perceived lookup
latency for cache hits. However, caching is ineﬀective when
TTLs are near-zero, as would have to be the case under high
mobility, causing both increased load on name servers and
higher client-perceived latencies. Caching is also less eﬀec-
tive if lookups are distributed relatively uniformly, as could
be the case with mobile device names, unlike lookups for
today’s domain names that are highly skewed [34, 45].
(2) Static placement: Authoritative DNS servers are es-
sentially rendezvous points that allow a mobile endpoint to
inform potential correspondents of its current location(s).
In order to reduce the time-to-connect, authoritative servers
must be located close to potential correspondents. However,
authoritative server locations today are static, either close
to a mobile endpoint’s “home” location or a pre-packaged
set of geo-distributed locations provided by a managed DNS
provider. Engineering a scalable geo-distributed system that
can dynamically move object replicas in a demand-aware
manner is nontrivial and real-world examples of such sys-
tems have only recently begun to emerge [19].
(3) Hierarchical names: The hierarchical structure of DNS
names is key to leveraging federation to scale to an arbi-
trary number of names by delegating diﬀerent portions of
the name space (or zones) to diﬀerent organizations. For ex-
ample, root name servers today only have to maintain state
for a small number of top-level domain names. In contrast,
arbitrary or ﬂat names, e.g., “JohnSmith3142’s watch” can
not be supported in DNS while retaining the scaling ben-
eﬁts of federation as the root name servers would have to
maintain nonzero state, e.g., at least the authoritative name
server(s) and the DNSSEC key of a name, for essentially all
names. Our position is that the design of a general-purpose
global name service must not restrict the structure of names
as names carry application-speciﬁc semantics; in §4.3.3, we
show examples of novel context-aware communication prim-
itives that are feasible with unrestricted names.
Our approach to address the ﬁrst two issues above relies on
active and demand-aware replication: (1) Active replication
signiﬁcantly reduces (but does not eliminate) the reliance
on passive caching; (2) Demand-aware replication ensures
that active replicas of a name record are accessible close to
clients querying the name, so as to reduce the overall time-
to-connect. A glib but pedagogically helpful way to highlight
the diﬀerence from DNS is that, in the extreme case, our
approach can create an active replica of a name record near
every DNS local name server that stores a passively cached
copy today. Our approach addresses the third issue above
by cleanly separating resolution of names from adjudication
and certiﬁcation. We explain our approach in detail next.
3. Auspice DESIGN & IMPLEMENTATION
A,&IP0&
Global&name&service&
B&
IP2&
connect(B,&IP2)&
B,&IP2&
B,&IP3&
X&
Timeout(
B&
IP3&
connect(B,&IP3)&
Connec,on(established(
(
t
c
e
n
n
o
c
4
o
t
4
e
m
T
i
Connec,on(re4synchronized(
A,&IP6&
Timeout(
B&
IP5&
B,&IP5&
connect(B,&IP5)&
Connec,on(re4synchronized(
B,&IP1&
B,&IP2&
B,&IP3&
1)&Pre8lookup&&
mobility&
2)&Connect8Ame&
mobility&
3)&Individual&
mobility&
4)&Simultaneous&
mobility&
B,&IP4&
B,&IP5&
Figure 1: Four kinds of mobility—(1) pre-lookup, (2)
connect-time, (3) individual, (4) simultaneous—three
of which require a global name service.
249
Our envisioned GNS enables endpoint mobility as shown
in Figure 1. An endpoint A initiates communication with
another endpoint B by querying the GNS for B’s current ad-
dresses and connecting to one of them, thereby enabling pre-
lookup mobility. If B moves after A’s query but before before
a connection has been mutually established via a three-way
handshake (connect-time mobility), A times out and reverts
back to the GNS. After a connection has been established,
if either endpoint moves one at a time (individual mobil-
ity), it can re-synchronize the connection with a bilateral
three-way handshake without relying upon the GNS (noting