rem ← sz % pagesize
if rem > 0 then
if idx = 0∨ sizes[idx− 1] (cid:27)= sz then
sz ← sz− rem + pagesize
sizes[idx] ← sz
idx ← idx + 1
While larger successful allocations are desirable, we
elect to trade some resolution for a reduction in the num-
ber of attempts necessary. The way we do this is by se-
lecting a split factor for the interval [nhmv,hmv], and try-
ing decreasing allocations with an (approximate) step of
hmv−nhmv
bytes (special considerations need to be made
for respecting page boundaries; see the CALCULATE-
STEPS function). A larger split factor results in more
allocation attempts but higher chanches of quickly mini-
mizing the max variable of G.
split
At every given step, the allocation might succeed (in
which case we update Gtotal and Gmax) or it might fail
and we appropriately reduce every max variable to just
below the failed allocation size. This means that the
difference between the current hmv and the nhmv keeps
shrinking as allocations fail.
For reasons that will become apparent soon, we are
willing to expend more allocation attempts to avoid the
situation when hmv becomes equal to the nhmv. There-
fore, when the last step above the nhmv results in a failed
allocation, we reiterate the algorithm, again splitting the
interval between the current hmv and the nhmv accord-
ing to the split factor and trying descending allocation
size using a new, smaller, step size. The algorithm con-
tinues trying ever smaller allocations using an ever ﬁner
step size, until the allocation of nhmv + pagesize bytes.
If that allocation fails, then we have to switch into the
mode where there are multiple highest maximum values
(Algorithm 2, line 34).
max = hmv, i.e.
max = ... = Gn
Forking mode We are now in a state where there exist
n holes, G1, ...,Gn : G1
the
hmv has multiplicity n. The only way to make progress is
to try an allocation smaller than hmv; yet if the allocation
succeeds, we are not in a position to tell which hole the
bytes where allocated from. What’s worse, more than
one hole might be able to accommodate the allocation
we attempt.
Algorithm 2 Decision
1: function STATE-MAXES(s)
2:
3:
4:
5:
6:
7:
8:
9:
res ← /0
for all max ∈ MAXES(s) do
sorted_maxes ← SORT-DESCENDING(maxes)
groups ← GROUP-BY-MAX(sorted_maxes)
result ← /0
for all g ∈ groups do
return result
result ← result ∪ (ANY-MAX(g), COUNT(g))
res ← res∪ max
10: function DETERMINE-GROUPS(states)
11:
12:
13:
maxes ← /0
for all s ∈ states do
maxes ← maxes∪ STATE-MAXES(s)
maxes ← SORT-DESCENDING(maxes)
groups ← GROUP-BY-MAX(maxes)
result ← /0
for all g ∈ groups do
g← SORT-DESCENDING-BY-MULTIPLICITY(g)
maxval ← FIRST(g)
result ← result ∪ maxval
return result
return states
14:
15:
16:
17:
18:
19:
20:
21:
22: function DECIDE(states)
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
if hmv = nhmv then
return states
maxvals ← DETERMINE-GROUPS(states)
(hmv,m) ← FIRST(maxvals)
if hmv  0 then return DECIDE(states)
USENIX Association  
25th USENIX Security Symposium  137
17
)
B
M
(
S
H
S
M
50
40
30
20
10
0
0
10
20
30
40
50
60
70
80
Split
Bits
22 +
21
20
19
18
17
16
Figure 4: Residual entropy for different value combinations of the split and MSHS parameters (lighter is better)
A crucial insight is that when an allocation succeeds,
all states that have a highest maximum value which can-
not accommodate the successful allocation size are nec-
essarily impossible and are pruned from the set of active
states. This serves to contain the number of active states
and somewhat ameliorate the combinatorial behavior of
the forking mode.
The generalized algorithm (Algorithm 2) treats all
cases (single or multiple states, the hmv is unique or has
multiplicity n) uniformly. First, it considers the maxi-
mum values of the holes within a single state. Multiplic-
ity is established within each state. Following that, the
holes are sorted in descending order based on their max-
imum values and then again in descending order with re-
gard to the multiplicity of each maximum value in the
state it originated from. The number of times an alloca-
tion is repeated is determined by the multiplicity of the
topmost hole; the descent takes place between that hole
and the next hole of a different maximum value.
Intuitively, if we have exactly two states, S1,S2 with
unique hmv values hmv1, hmv2 and that hmv1 = hmv2.
Then we need try an allocation which can only be sat-
isﬁed by the maximally-sized hole of either state only
once; if the allocation succeeds, both states are updated
and remain valid. Conversely, if hmv1 has multiplicity
two and hmv2 only one, we need to try the allocation two
times. If both allocations succeed, S1 gets updated ac-
cordingly and S2 gets dropped as invalid; if only one allo-
cation succeeds, S1 is replaced by two new states whereas
S2 is adjusted and remains live.
C Further evaluation of the PAP-only at-
tack
When considering Figure 4 visualizes the residual accu-
racy (in bits) in the size of the largest hole next to the
hidden object. The corresponding ﬁgure for the smaller
hole appears almost identical and is omitted for brevity.
For the split factor, we investigated values ranging
from 4 to 64, speciﬁcally 4, 6, 8, 10, 12, 14, 16, 20, 24,
28, 32, 48 and 64. Guided by a sampling of typical ap-
plications on workstations and servers, we considered the
following upper bounds for the sizes of untracked holes:
2MiB, 4MiB, 6MiB, 8MiB, 20MiB and 40MiB.
Our evaluation of the PAP in weakening ASLR’s pro-
tection of a hidden object involved seeding the algorithm
with an initial state consisting of 4 hole descriptions.
Speciﬁcally, we included the maximum possible values
for the holes resulting from the placement of the hidden
object at a random address within hole A. Hence, our
tracked holes were Large, Small, B and C.
Analyzing Figure 4, we notice the tendency for larger
split values to result in lower uncertainty. This tendency
is not consistent and may vary with the MSHS; for exam-
ple, split=48 outperforms split=64 for larger MSHS and
is overall the best choice at larger MSHS values.
The split factor of 4 is by far the worst choice.
It
should be mentioned that the runtime performance de-
teriorates to the point of being impractical when using 2
as the split factor (for reasons expounded on in B, which
led us to exclude it from the parameter exploration.
138  25th USENIX Security Symposium 
USENIX Association
18