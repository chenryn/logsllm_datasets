**作者: Yenn_  
原文链接: [Wei's Blog](https://0xdf1001f.github.io/2020/11/12/Turla-Kazuar-Backdoor/) **
## 简介
Turla，也被称为Venomous
Bear、Waterbug和Uroboros，是迄今为止最为高级的威胁组织之一，并被认为隶属于俄罗斯政府（该组织成员均说俄语）。虽然该组织被认为至少在2007年就已经成立，但直到2014年它才被卡巴斯基实验室发现。
## Kazuar
### Kazuar backdoor -e888b93f4d5f28699b29271a95ccad55ca937977d442228637ad9a7c037d3a6a4
#### 基本信息
File Name | File Size | File Type | MD5  
---|---|---|---  
DebugView.exe | 137,728 Byte | BackDoor | 277f2d8e682f7ffc071560f44af4ab41  
#### 样本分析
##### 初始化
样本似乎伪造为Windows下的SysInternal套件
[
样本内的类和函数命名都是由两位字符组成
[
设置样本中的异常处理，将异常发送到ThreadException
[
通过字符串“”gGYJ\YwJ1sggs1YBg31GjGg14\dd0d}w}ds4””解密出一串GUID
“169739e7-2112-9514-6a61-d300c0fef02d”
[
根据Gethostid返回的值与13取余，根据余数来决定在哪个文件夹释放创建新文件夹释放文件，在这里取到的路径为“C:\Users\sam\AppData\Local\Microsoft\Network\3DDC94D8”，得到路径后创建文件夹
[
获取计算机信息、解密加载出后续操作使用的内容，并通过前面解密出的”169739e7-2112-9514-6a61-d300c0fef02d”创建一个新GUID
[
创建互斥量，互斥量都是由Username+固定字符串解密内容，根据UserName不同，生成的互斥量也不同，格式为Global\\+生成的与GUID同一格式的内容
[
#####
[Rijndael加密
在文件夹“C:\Users\sam\AppData\Local\Microsoft\Network\3DDC94D8\3F515151”创建文件，写入程序运行的日志，写入的日志由Rijndael加密，KEY值由当前时间计算得出，通过KEY与文件的内容可以解密出样本的日志文件
[
加密：
[
##### 判断样本运行状态
判断样本运行状态，进行不同的操作，主入口点有4种不同的路径：
  1. 如果恶意软件是使用“ install”命令行参数执行的，则该参数使用.NET Framwork的InstallHelper方法将恶意软件作为服务安装。
  2. 如果恶意软件是在非用户交互环境（没有用户界面）中启动的，则该恶意软件会自己安装为服务。
  3. 如果未提供任何参数，并且恶意软件确定其在Windows环境中运行，则会将DLL注入到窗口“Shell_TrayWnd”中，执行DLL中的内容
  4. 如果恶意软件是使用“单个”命令行参数执行的，或者恶意软件确定其在Mac或Unix环境中运行，则它将运行包含Kazuar功能代码的方法。
##### 注入到explorer
调试过程中进入了流程3，样本先提权到SeDebugPrivilege权限
[
为Shell_TrayWnd窗口设置WindowsHook，注入DLL到explorer.exe中
[
注入后的explorer.exe
[
##### CLR Runtime Loader
在explorer.exe中注入的DLL实际是一个CLR RUNTIME LOADER，负责加载执行先前样本中的内容
[
类似样本中CLR Runtime Loader的源码，加载CLR Runtime到Target中执行
    __declspec(dllexport) HRESULT LoadDNA(_In_ LPCTSTR lpCommand) {
      HRESULT hr;
      ICLRMetaHost * pMetaHost = NULL;
      ICLRRuntimeInfo * pRuntimeInfo = NULL;
      ICLRRuntimeHost * pClrRuntimeHost = NULL;
      // Load .NET Runtime
      hr = CLRCreateInstance(CLSID_CLRMetaHost, IID_PPV_ARGS( & pMetaHost));
      hr = pMetaHost - >GetRuntime(L "v4.0.30319", IID_PPV_ARGS( & pRuntimeInfo));
      hr = pRuntimeInfo - >GetInterface(CLSID_CLRRuntimeHost, IID_PPV_ARGS( & pClrRuntimeHost));
      // Start Runtime
      hr = pClrRuntimeHost - >Start();
      // Parse Arguments
      ClrLoaderArgs args(lpCommand);
      // Execute Loaded .NET Code
      DWORD pReturnValue;
      hr = pClrRuntimeHost - >ExecuteInDefaultAppDomain(
          args.pwzAssemblyPath.c_str(), 
          args.pwzTypeName.c_str(), 
          args.pwzMethodName.c_str(), 
          args.pwzArgument.c_str(), 
          &pReturnValue);
      // Release and Free Resources
      pMetaHost - >Release();
      pRuntimeInfo - >Release();
      pClrRuntimeHost - >Release();
      // Return .NET Code Result
      return hr;
    }
加载完成后执行流程又回到了DbgView.exe中,调用了dbgview中的W.s()方法
设置异常处理
[
##### 自启创建
查询当前的进程名是否为被注入的进程，可以看出程序会注入的程序包含“iexplore”,”firefox”,”browser”,”outlook”,”chrome”,”nlnotes”,”notes2”,”opera”,”msimn”
根据查询的结果会创建不同的线程
当注入的不是上述进程时：
与样本最开始相同会查询系统信息，然后尝试持久化操作，但在调试过程中创建自启动没有成功，返回字符串“DISABLE”，尝试的注册表路径
  * SOFTWARE\Microsoft\Windows\CurrentVersion\Run
  * SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce
  * SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
  * SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
  * SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\load
或尝试添加自启动.lnk到启动目录
##### 远程连接
创建了一个IPC远程通道
“ipc://5728912222233c6860fe9a5a2ae45a7e/d22f298e18a16a3175ea1a78b5419c91”
[
从样本向日志中写入的内容来看，样本将C2下发的命令操作称为”Task”
[
功能还带有注入到其他进程中的功能
当当前进程为“iexplore”,”firefox”,”browser”,”outlook”,”chrome”,”nlnotes”,”notes2”,”opera”,”msimn”时
尝试与C2链接，C2的地址由
“C:\Users\sam\AppData\Local\Microsoft\Network"下文件取出，当文件不存在时，样本还存在default
server
[
解密出的两个Default Server:
[
“"
“"
与C2通信支持的协议类型包含”http”.”https”,”ftp”,”ftps”
[
查询窗口，检测抓包软件，包括
“megadumper”,”smartsniff”,”snoopypro”,”wireshark”,”ethereal”,”tcpview”,”tcpdump”,”windump”,”portmon”,”dsniff”,
[
向C2发送HTTP请求,cookie字段为GUID的base64编码，用于标识被感染主机
[
##### 命令执行
[
**Action ID** | **Commands** | **Description**  
---|---|---  
**1** | log | Logs a specified debug message  
**2** | get | Upload files from a specified directory. It appears the actor
can specify which files to upload based on their modified, accessed and
created timestamps as well.  
**3** | put | Writes provided data (referred to as ‘payload’) to a specified
file on the system.  
**4** | cmd | Executes a specified command and writes the output to a
temporary file. The temporary file is uploaded to the C2 server  
**5** | sleep | Trojan sleeps for a specified time  
**6** | upgrade | Upgrades the Trojan by changing the current executable’s
file extension to “.old” and writing a newly provided executable in its place  
**7** | scrshot | Takes a screenshot of the entire visible screen. The
screenshot is saved to a specified filename or using a filename with the
following format:
[year]-[month]-[day]-[hour]-[minute]-[second]-[milisecond].jpg. The file is
uploaded to the C2 server  
**8** | camshot | Creates a Window called “WebCapt” to capture an image from
an attached webcam, which it copies to the clipboard and writes to a specified
file or a file following the same format from the “scrshot” command. The file
is uploaded to the C2 server  
**9** | uuid | Sets the unique agent identifier by providing a specific GUID  
**10** | interval | Sets the transport intervals, specifically the minimum and
maximum time intervals between C2 communications.  
**11** | server | Sets the C2 servers by providing a list of URLs  
**12** | transport | Sets the transport processes by providing a list of
processes that Kazuar will inject its code and execute within.  
**13** | autorun | Sets the autorun type as discussed earlier in this blog.
Kazuar will accept the following strings for this command: DISABLED, WINLOGON,
POLICIES, HKCURUN, RUNONCE, LOADKEY, STARTUP  
**14** | remote | Sets a remote type. We are only aware of one remote type
that instructs Kazuar to act as an HTTP server and allow the threat actor to
interact with the compromised system via inbound HTTP requests.  
**15** | info | Gathers system information, specifically information referred
to as: Agent information, System information, User information, Local groups
and members, Installed software, Special folders, Environment variables,
Network adapters, Active network connections, Logical drives, Running
processes and Opened windows  
**16** | copy | Copies a specified file to a specified location. Also allows
the C2 to supply a flag to overwrite the destination file if it already
exists.  
**17** | move | Moves a specified file to a specified location. Also allows
the C2 to supply a flag to delete the destination file if it exists.  
**18** | remove | Deletes a specified file. Allows the C2 to supply a flag to
securely delete a file by overwriting the file with random data before
deleting the file.  
**19** | finddir | Find a specified directory and list its files, including
the created and modified timestamps, the size and file path for each of the
files within the directory.  
**20** | kill | Kills a process by name or by process identifier (PID)  
**21** | tasklisk | List running processes. Uses a WMI query of “select * from
Win32_Process” for a Windows system, but can also running “ps -eo
comm,pid,ppid,user,start,tty,args” to obtain running processes from a Unix
system.  
**22** | suicide | We believe this command is meant to uninstall the Trojan,
but it is not currently implemented in the known samples.  
**23** | plugin | Installing plugin by loading a provided Assembly, saving it
to a file whose name is the MD5 hash of the Assembly’s name and calling a
method called “Start”.  
**24** | plugout | Removes a plugin based on the Assembly’s name.  
**25** | pluglist | Gets a list of plugins and if they are “working” or
“stopped”  
**26** | run | Runs a specified executable with supplied arguments and saves
its output to a temporary file. The temporary file is up loaded to the C2
server.  
##### IOC
“"
“"
参考链接：
1.
2.
3.
### Kazuar - 1f7b35e90b5ddf6bfd110181b1b70487011ab29ca5f942170af7e8393a1da763
伪造为Windows下Sysinternas组件中的DebugView
[
流程与前面Kazuar backdoor -e888b93f4d5f28699b29271a95ccad55ca937977d442228637ad9a7c037d3a6a4相同，不过这次样本使用了ConfuserEX混淆字符串，通过工具可以直接解出明文，而前面样本中使用了自定义的加密方法，在使用字符串时通过解密。
通过工具反混淆后可直接查看明文字符串：
[
同样通过在”Shell_TrayWnd”设置HOOK
[
释放一个DLL文件在%appdata%..\Local\随机名目录下，释放的DLL同样是一个CLR Runtime Loader