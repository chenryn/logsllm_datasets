Aqara Smart Plug
On/Off
Aqara Contact Sensor Open/Closed
Aqara Motion Sensor
Detected/
Not detected
S(32) D(27) S(2) D(36) S(39) D(30) S(9) D(3) S(40) D(4) S(11)
On: S(32) D(20) S(2) D(36) S(38) D(23) S(16) D(3) S(7)
Off: S(32) D(20) S(2) D(36) S(38) D(23) S(20)
S(86) D(62) S(24)
S(77) D(62) S(29)
S(77) D(4, 6) S(91) D(0, 5) S(25) D(4, 5) S(4)
S(16) D(113) S(15)
S(21) D(1) S(12) D(1) S(85)
S(26) D(1) S(25) D(3) S(1) D(3) S(1) D(17) S(53)
S(19) D(1) S(12) D(1) S(85)
S(24) D(1) S(25) D(3) S(1) D(3) S(1) D(17) S(53)
S(9) D(1) S(40) D(6) S(18)
S(50) D(13) S(10) D(1) S(351)
S(52) D(13) S(10) D(1) S(53) D(13) S(10) D(1) S(52) D(13) S(10) D(1) S(331)
S(9) D(1) S(40) D(6) S(18)
4/4
2/2
2/2
2/2
2/2
2/2
not evaluate on unknown protocols. In this section, we apply
NETPLIER to real IoT devices to evaluate its effectiveness.
There are several works studying the security issues of IoT
devices via public traces [70], [78]. However, as the ground
truth for unknown protocols is often absent, it is difﬁcult to
use public datasets and evaluate the clustering results like
what we do in Section V-B. Instead, we have to conduct
active evaluation by communicating with real-time devices.
We set up a testbed with 6 popular IoT devices of different
functionalities, including a hub (with a light), three controllers
(a thermostat, a Nest Protect smoke detector, and a smart plug),
and two sensors (a contact sensor and a motion sensor).
Figure 13 shows the workﬂow of our evaluation on un-
known protocols. First, we collect
the traces by manually
triggering various events of the devices, which are shown
in the second column of Table VIII. For the two sensors,
we take the corresponding actions, e.g., opening the door, to
change their states; for the other devices, we control them
using their ofﬁcial applications on the Android smartphone.
Each event is repeated for 50 times and traces are collected
with a label of the event. After having the traces, we apply
NETPLIER to infer the message formats of each event type as
discussed in Section III-E. The results are shown in the third
column of Table VIII. For each event type, we consider the
formats of both request and response messages. Speciﬁcally,
Nest Thermostat has two request messages for turning fan on
and off, respectively. Here, we only show the type (’S’ for
static ﬁelds and ’D’ for dynamic ﬁelds) and length of each
ﬁeld, denoted as T ype(Length). Then we use the inferred
formats to generate messages. For static ﬁelds, their values
are already ﬁxed. The challenge is to decide the value of
dynamic ﬁelds. We consider both existing values (in the traces)
and random values. For example in Figure 13, we turn on
and off the light and collect four messages. After format
inference, we ﬁnd three ﬁelds in a cluster of request messages,
including two static ﬁelds and a dynamic one. The dynamic
ﬁeld has only two existing values, i.e., “30” and “31”, which
is highly likely to indicate the on/off status and could be used
to generate messages directly. In real traces, dynamic ﬁelds
may have many different values, e.g., the Sequence ID. We
generate random values for these ﬁelds. Finally, we validate
the results by checking if the generated (request) messages
could trigger the same events successfully, i.e., if we can turn
on or off the light by generated messages in this example. As
shown in the last column of Table VIII, all events could be
triggered successfully, which validates the formats inferred by
NETPLIER. In Section VI-A we show a detailed case study on
Nest Thermostat.
14
VI. APPLICATION
In this section, we demonstrate two applications of NET-
PLIER: Internet of Things (IoT) protocol reverse engineering
and malware behavior analysis.
A. IoT Protocol Reverse engineering
IoT protocol analysis becomes increasingly important for
IoT security. However, it is challenging to analyze IoT proto-
cols due to the lack of speciﬁcation and the limited access
to source code. In this case study, we use NETPLIER to
analyze the protocol used by Google Nest Thermostat E [4],
a commercial smart thermostat. In particular, we fake an SSL
Certiﬁcate Authority (CA) and dump all Google Nest’s traces.
After decryption, NETPLIER is used to analyze the protocol
format. With the reverse engineered protocol, we successfully
hijacked Google Nest to perform malicious behaviors (e.g.,
setting a speciﬁc indoor temperature) via sending crafted
messages, which indicates the correctness of the recovered
protocol format. Note that we used a fake CA to decrypt
TLS data to focus our study on protocol reverse engineering.
Acquiring plain-text messages with other means is beyond the
scope of this paper.
Figure 14 presents a temperature-setting message in hex
format. The original message has 351 bytes. Here we only
present part of it and highlight
the interesting ﬁelds. The
keyword lies in the green ﬁeld and has a variable length,
which is the ﬁrst dynamic ﬁeld (D(27)) in the formats of
Nest Thermostat shown in Table VIII. After alignment and
inference, NETPLIER precisely identiﬁes the keyword ﬁeld.
NETPLIER’s correct clustering results further help us observe
a one-to-one relation between the temperature and the yellow
ﬁeld (D(4) in red in Table VIII), allowing us to determine
the semantics of the yellow ﬁeld, i.e., the temperature that a
user wants to set. In our experiment, manipulating this ﬁeld
allowed us to directly change the indoor temperature. We also
successfully created messages to instruct Google Nest to turn
on/off the fan and perform other human-observable behaviors.
B. Malware Analysis
The proliferation of new strains of malware every year
poses a prominent security threat and renders the importance
of malware analysis. A popular approach to understanding
malware is to run it in a sandbox. However, handling command
and control (C&C) behavior is a well-known challenge, as this
kind of behavior is triggered by remote servers’ commands
and beyond analysts’ control [76]. On the other hand, most
malware is equipped with C&C capabilities [42]. Hence,
researchers tried to utilize protocol reverse engineering to
analyze malware network trace, hoping to interpret malicious
behavior [72]. We conducted a case study on leveraging
NETPLIER to enhance the analysis of a typical C&C botnet
client (MD5: 03cfe768a8b4ffbe0bb0fdef986389dc) which was
recently reported to VirusTotal [13]. Note that the malware
is packed and obfuscated, so it
to analyze its
behavior via static approaches. We used NETPLIER to analyze
its network traces (acquired by Tencent Habo [10]) and recover
its state machine. Based on the recovered state machine, we
simulated a client to communicate with the remote server. The
procedure was iterative as the more communication is triggered
is difﬁcult
Fig. 14: The snippet of a Google Nest’s temperature-setting
message
Fig. 15: Recovered state machine of the botnet client
between the client and the server, the more of the protocol
can be discovered by NETPLIER, which in turns allows us to
trigger more.
Figure 15 demonstrates the ﬁnite state machine NETPLIER
recovered. Each circle denotes a state, and each direct edge
denotes the transition between two states. Transition is labeled
with i
j where i is the precondition of transition and j is the
message sent by the client. Note that for ease of understanding,
we manually annotated the states after analyzing the collected
syscalls in each state. The green states are those not causing di-
rect damages, the red states are the ones containing dangerous
syscalls, and the yellow ones belong to the transition period.
As shown in Figure 15, when the botnet malware starts, it
sends its unique id to the remote server and transits to the
waiting stage. After the server veriﬁes the id, a ping-and-
pong handshake is set up to check the connection, and then
the client transits to the operation stage. After that, various
functionalities can be performed based on the instructions from
the server. Some of the instructions are not damaging and
used to setup the environment. Their details are elided. A
special kind of messages with keyword PRIVMSG can trigger
the botnet to move to the malicious stage. A few malicious
behaviors like remote code execution and internal network
DDoS are observed after the client is at this state.
VII. DISCUSSION
Limitations. Datasets of low quality are a common challenge
for network trace based techniques. Information that is not
included in a small dataset could not be discovered, e.g.,
unused message types. However, we argue that NetPlier can
make better use of traces by considering multiple constraints.
In Section V-B, all the datasets are collected from real-world
systems, which are considered more challenging. Also, we
show that NETPLIER is stable even on datasets of small sizes.
Network trace based protocol reverse engineering methods
are limited to unencrypted traces. A possible solution is to
15
2a41bd48120d052201083b0a41392d6437613039323835241a73676e69747465735f65727574617265706d65745f7465677261741b1232413543333930d483db000000800d0000002401640000· · · · · ·· · · · · ·· · · · · ·KeywordTarget TemperatureStartWaitingStageSend UIDReceive UIDSend UIDTimeoutWorkingStageSend PONGReceivePINGMaliciousStageUnknownStage 1UnknownStage 2TimeoutSend MODEReceive 376Receive 422UnknownStage nReceive PRIVMSGTimeoutDDoSStageReceive FLOODDDoS DoneRCEStageReceive RCECMDExec doneuse a man in the middle proxy with trusted credentials, e.g.,
Fiddler [3] and Burp Suite [1]. It could also be combined with
program analysis based protocol reverse engineering methods.
Another limitation of NETPLIER is the growing complexity
and potential errors of multiple sequence alignment algorithms
for larger data. Some heuristic solutions have been proposed
to improve the execution speed, e.g.,
the combination of
progressive alignment and iterative reﬁnement [20], [77]. Also,
as discussed in Section V-B, NETPLIER performs stably on
different sizes and achieves similar results, which means that
the speed and accuracy could be improved by using NETPLIER
in several small datasets instead of the whole large one. We
leave this improvement to future work.
Generality. Most network trace-based techniques are designed
for textual protocols at the application layer. In Section V, we
show that our method works well for binary protocols, physical
layer protocols where network layer information is missing,
and unknown protocols used in real IoT devices.
We address the problem of clustering by identifying key-
words in bytes. Some protocols may use sub-byte ﬁelds as
the keyword, e.g., NTP. Our results in Section V-B shows that
the homogeneity of NetPlier is not affected by such ﬁelds and
the completeness degrades a little. It still outperforms others.
Such keyword ﬁelds could be better handled by detecting if
sub-byte ﬁelds are used in the preprocessing stage. If so, the
granularity of keyword candidates could be set to bits instead
of bytes. We leave it to future work.
Some protocols may include uni-direction messages, e.g.,
broadcast messages without response, where the remote cou-
pling constraints would be ineffective. In our experience,
without using two-way messages, we will encounter some
degradation in the results. However, NetPiler still outperforms
the baselines due to its way of aggregating other constraints.
Future Work. We focus on clustering and only use a simple
strategy for format inference. Heuristics for semantic infor-
mation could be introduced to improve the results of format
inference [26], [54], [69]. We could also apply probabilistic
inference in this stage, for example, to infer potential ﬁeld
boundaries of consecutive variable-length ﬁelds with proba-
bilistic constraints (e.g., that expose ﬁelds dictating runtime
length values). We leave it to future work.
VIII. RELATED WORK
Protocol Reverse Engineering. Protocol reverse engineering
targets at inferring the speciﬁcation of unknown network proto-
cols for further security evaluation [56], [63], [37], [73]. There
are two main categories, either by program analysis [28], [57],
[82], [33], [59], [32] or by network traces [22], [55], [35], [52],
[81], [51], [80], [26], [38], [47]. Network trace methods are
usually based on sequence alignment algorithms [64] or token
patterns, and are limited for their low accuracy or conciseness.
In this paper, we conduct comparative studies to show the
obvious improvement of NETPLIER. Token-based methods
[35], [80] search for representative tokens by statistics and use
them for clustering. It was shown that Discoverer outperforms
these techniques as they tend to generate redundant tokens and
hence clusters. IoT protocol ﬁngerprinting technique such as
PINGPONG [78] is different from protocol reverse engineer-
ing. The former leverages meta data while the latter aims to
recognize message types, formats, and state machine. In fact,
PINGPONG collects ﬁngerprints on encrypted messages.
Probabilistic Inference in Security Applications. In re-
cent years, probabilistic techniques [16], [85] have been in-
creasingly used in security applications. Lin et al. introduce
probabilistic inference into reverse engineering [58]. Differ-
ent from us, they focus on memory forensic. Dietz et al.
also leverage probabilistic inference to localize source code
bugs [36]. Besides, probabilistic techniques are widely used for
binary analysis [87], [61], physical unit security [45], program
enhancement [49], and vulnerability detection [36], [58]. To
the best of our knowledge, NETPLIER is the ﬁrst approach that
enforces probabilistic analysis on protocol reverse engineering.
Unlike previous methods using deterministic techniques, NET-
PLIER gathers all possible hints from protocol behaviors and
uses a systematic way of integrating them in the presence of
uncertainty.
Malware Analysis. The proliferation of malware in the past
years raises researchers’ attention on detecting, analyzing,
and preventing malware. Mainstream malware analysis tech-
niques,
including VirusTotal [13], Cuckoo [2], Habo [10],
Padawan [8], and X-Force [67], [85], leverage the sandbox-
based execution technique to obtain malicious behaviors. How-
ever, traditional behavioral-based approaches are limited on
low-level syscall tracing and can rarely understand high-level
semantics behaviors (e.g., performing as a backdoor). NET-
PLIER, on the other hand, works on collected network trace
and is able to recover informative state machines, beneﬁting
future analysis. We believe NETPLIER is complementary to
these existing works.
IX. CONCLUSION
We propose a novel probabilistic network trace based
protocol reverse engineering technique. It models the inherent
uncertainty of the problem by introducing random variables
to denote the likelihood of individual ﬁelds representing the
message type. A joint distribution can be formed between
these random variables and observations made from the mes-
sage samples. Probabilistic inference is used to compute the
marginal posterior probabilities, allowing us to identify the
message type. Messages are then precisely clustered by their
types, leading to high quality reverse engineering results. Our
experiments show that our technique substantially outperofrms
two state-of-the-art
techniques Netzob and Discoverer and
facilitates IoT protocol analysis and malware analysis.
ACKNOWLEDGMENT
We thank the anonymous reviewers for their valuable
comments and suggestions. We also thank Guannan Wei
for his help in illustration. This research was supported in
part by NSF 1901242 and 1910300, ONR N000141712045,
N000141410468 and N000141712947, and IARPA TrojAI
W911NF-19-S-0012. Any opinions, ﬁndings, and conclusions
in this paper are those of the authors only and do not
necessarily reﬂect the views of our sponsors.
16
REFERENCES
trace,”
https://github.com/ITI/ICS-Security-
[1]
[2]
[3]
[4]
[5]