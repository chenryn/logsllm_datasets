### Aqara Smart Devices

- **Aqara Smart Plug:**
  - **Status:** On/Off
- **Aqara Contact Sensor:**
  - **Status:** Open/Closed
- **Aqara Motion Sensor:**
  - **Status:** Detected/Not detected

### Event Traces and Formats

- **S(32) D(27) S(2) D(36) S(39) D(30) S(9) D(3) S(40) D(4) S(11)**
- **On: S(32) D(20) S(2) D(36) S(38) D(23) S(16) D(3) S(7)**
- **Off: S(32) D(20) S(2) D(36) S(38) D(23) S(20)**
- **S(86) D(62) S(24)**
- **S(77) D(62) S(29)**
- **S(77) D(4, 6) S(91) D(0, 5) S(25) D(4, 5) S(4)**
- **S(16) D(113) S(15)**
- **S(21) D(1) S(12) D(1) S(85)**
- **S(26) D(1) S(25) D(3) S(1) D(3) S(1) D(17) S(53)**
- **S(19) D(1) S(12) D(1) S(85)**
- **S(24) D(1) S(25) D(3) S(1) D(3) S(1) D(17) S(53)**
- **S(9) D(1) S(40) D(6) S(18)**
- **S(50) D(13) S(10) D(1) S(351)**
- **S(52) D(13) S(10) D(1) S(53) D(13) S(10) D(1) S(52) D(13) S(10) D(1) S(331)**
- **S(9) D(1) S(40) D(6) S(18)**

### Evaluation on Unknown Protocols

In this section, we apply NETPLIER to real IoT devices to evaluate its effectiveness. Several works have studied the security issues of IoT devices using public traces [70], [78]. However, the lack of ground truth for unknown protocols makes it difficult to use public datasets and evaluate clustering results as in Section V-B. Instead, we conduct active evaluation by communicating with real-time devices.

We set up a testbed with six popular IoT devices, including:
- A hub (with a light)
- Three controllers (a thermostat, a Nest Protect smoke detector, and a smart plug)
- Two sensors (a contact sensor and a motion sensor)

### Workflow for Evaluating Unknown Protocols

1. **Data Collection:**
   - We manually trigger various events of the devices, as shown in the second column of Table VIII.
   - For the two sensors, we take corresponding actions (e.g., opening the door) to change their states.
   - For other devices, we control them using their official applications on an Android smartphone.
   - Each event is repeated 50 times, and traces are collected with a label of the event.

2. **Format Inference:**
   - We apply NETPLIER to infer the message formats of each event type, as discussed in Section III-E.
   - The results are shown in the third column of Table VIII.
   - For each event type, we consider the formats of both request and response messages.
   - For example, the Nest Thermostat has two request messages for turning the fan on and off, respectively.
   - We denote the type (‘S’ for static fields and ‘D’ for dynamic fields) and length of each field as Type(Length).

3. **Message Generation:**
   - For static fields, their values are already fixed.
   - For dynamic fields, we consider both existing values (in the traces) and random values.
   - For example, in Figure 13, we turn the light on and off and collect four messages.
   - After format inference, we find three fields in a cluster of request messages, including two static fields and one dynamic field.
   - The dynamic field has only two existing values, i.e., “30” and “31,” which likely indicate the on/off status and can be used to generate messages directly.
   - In real traces, dynamic fields may have many different values, e.g., the Sequence ID. We generate random values for these fields.

4. **Validation:**
   - We validate the results by checking if the generated (request) messages can trigger the same events successfully.
   - As shown in the last column of Table VIII, all events could be triggered successfully, validating the formats inferred by NETPLIER.

### Application of NETPLIER

#### A. IoT Protocol Reverse Engineering

IoT protocol analysis is increasingly important for IoT security. However, it is challenging due to the lack of specifications and limited access to source code. In this case study, we use NETPLIER to analyze the protocol used by the Google Nest Thermostat E [4].

- **Data Collection:**
  - We fake an SSL Certificate Authority (CA) and dump all Google Nest’s traces.
  - After decryption, NETPLIER is used to analyze the protocol format.

- **Results:**
  - With the reverse-engineered protocol, we successfully hijacked Google Nest to perform malicious behaviors (e.g., setting a specific indoor temperature) via sending crafted messages.
  - This indicates the correctness of the recovered protocol format.

- **Example:**
  - Figure 14 presents a temperature-setting message in hex format.
  - The original message has 351 bytes, and we highlight the interesting fields.
  - The keyword lies in the green field and has a variable length, which is the first dynamic field (D(27)) in the formats of the Nest Thermostat shown in Table VIII.
  - NETPLIER precisely identifies the keyword field and helps us observe a one-to-one relation between the temperature and the yellow field (D(4) in red in Table VIII).
  - Manipulating this field allowed us to directly change the indoor temperature.
  - We also successfully created messages to instruct Google Nest to turn the fan on/off and perform other human-observable behaviors.

#### B. Malware Analysis

The proliferation of new malware strains poses a significant security threat, making malware analysis crucial. A common approach is to run malware in a sandbox, but handling command and control (C&C) behavior is challenging. Most malware is equipped with C&C capabilities, so researchers use protocol reverse engineering to analyze malware network traces.

- **Case Study:**
  - We conducted a case study on leveraging NETPLIER to enhance the analysis of a typical C&C botnet client (MD5: 03cfe768a8b4ffbe0bb0fdef986389dc), recently reported to VirusTotal [13].
  - The malware is packed and obfuscated, making static analysis difficult.
  - We used NETPLIER to analyze its network traces (acquired by Tencent Habo [10]) and recover its state machine.

- **Procedure:**
  - Based on the recovered state machine, we simulated a client to communicate with the remote server.
  - The more communication is triggered, the more of the protocol can be discovered by NETPLIER, allowing us to trigger more.

- **Recovered State Machine:**
  - Figure 15 demonstrates the finite state machine recovered by NETPLIER.
  - Each circle denotes a state, and each directed edge denotes the transition between two states.
  - Transition is labeled with \(i \rightarrow j\), where \(i\) is the precondition of transition and \(j\) is the message sent by the client.
  - Green states are those not causing direct damage, red states contain dangerous syscalls, and yellow states belong to the transition period.

- **Behavior:**
  - When the botnet malware starts, it sends its unique ID to the remote server and transitions to the waiting stage.
  - After the server verifies the ID, a ping-and-pong handshake is set up to check the connection, and then the client transitions to the operation stage.
  - Various functionalities can be performed based on instructions from the server.
  - Messages with the keyword PRIVMSG can trigger the botnet to move to the malicious stage, leading to behaviors like remote code execution and internal network DDoS.

### Discussion

#### Limitations

- **Dataset Quality:**
  - Low-quality datasets are a common challenge for network trace-based techniques.
  - Information not included in a small dataset cannot be discovered, e.g., unused message types.
  - However, NETPLIER can make better use of traces by considering multiple constraints.
  - In Section V-B, all datasets are collected from real-world systems, and NETPLIER is stable even on small datasets.

- **Encryption:**
  - Network trace-based protocol reverse engineering methods are limited to unencrypted traces.
  - A possible solution is to use a man-in-the-middle proxy with trusted credentials, e.g., Fiddler [3] and Burp Suite [1].
  - This can be combined with program analysis-based protocol reverse engineering methods.

- **Complexity:**
  - The growing complexity and potential errors of multiple sequence alignment algorithms for larger data are a limitation.
  - Heuristic solutions, such as the combination of progressive alignment and iterative refinement [20], [77], can improve execution speed.
  - NETPLIER performs stably on different sizes and achieves similar results, suggesting that speed and accuracy can be improved by using NETPLIER on several small datasets instead of one large one.

#### Generality

- **Protocol Types:**
  - Most network trace-based techniques are designed for textual protocols at the application layer.
  - Our method works well for binary protocols, physical layer protocols, and unknown protocols used in real IoT devices.

- **Clustering:**
  - We address the problem of clustering by identifying keywords in bytes.
  - Some protocols may use sub-byte fields as the keyword, e.g., NTP.
  - Our results show that NETPLIER's homogeneity is not affected by such fields, and completeness degrades slightly but still outperforms others.
  - Sub-byte fields could be better handled by detecting if sub-byte fields are used in the preprocessing stage.

- **Unidirectional Messages:**
  - Some protocols include unidirectional messages, e.g., broadcast messages without response.
  - Without using two-way messages, we encounter some degradation in results, but NETPLIER still outperforms baselines due to its way of aggregating other constraints.

#### Future Work

- **Heuristics for Format Inference:**
  - We focus on clustering and use a simple strategy for format inference.
  - Heuristics for semantic information could be introduced to improve format inference [26], [54], [69].
  - Probabilistic inference could be applied to infer potential field boundaries of consecutive variable-length fields with probabilistic constraints.

### Related Work

- **Protocol Reverse Engineering:**
  - Targets inferring the specification of unknown network protocols for security evaluation [56], [63], [37], [73].
  - Two main categories: program analysis [28], [57], [82], [33], [59], [32] and network traces [22], [55], [35], [52], [81], [51], [80], [26], [38], [47].
  - Network trace methods are usually based on sequence alignment algorithms [64] or token patterns and are limited by low accuracy or conciseness.
  - Comparative studies show the obvious improvement of NETPLIER over token-based methods [35], [80] and IoT protocol fingerprinting techniques like PINGPONG [78].

- **Probabilistic Inference in Security Applications:**
  - Probabilistic techniques [16], [85] are increasingly used in security applications.
  - Lin et al. introduce probabilistic inference into reverse engineering [58], focusing on memory forensics.
  - Dietz et al. leverage probabilistic inference to localize source code bugs [36].
  - Probabilistic techniques are widely used for binary analysis [87], [61], physical unit security [45], program enhancement [49], and vulnerability detection [36], [58].
  - NETPLIER is the first approach that enforces probabilistic analysis on protocol reverse engineering, gathering all possible hints from protocol behaviors and integrating them systematically.

- **Malware Analysis:**
  - Mainstream malware analysis techniques, including VirusTotal [13], Cuckoo [2], Habo [10], Padawan [8], and X-Force [67], [85], leverage sandbox-based execution to obtain malicious behaviors.
  - Traditional behavioral-based approaches are limited to low-level syscall tracing and rarely understand high-level semantics.
  - NETPLIER works on collected network traces and recovers informative state machines, benefiting future analysis and complementing existing works.

### Conclusion

We propose a novel probabilistic network trace-based protocol reverse engineering technique. It models the inherent uncertainty of the problem by introducing random variables to denote the likelihood of individual fields representing the message type. A joint distribution is formed between these random variables and observations made from the message samples. Probabilistic inference is used to compute the marginal posterior probabilities, allowing us to identify the message type. Messages are then precisely clustered by their types, leading to high-quality reverse engineering results. Our experiments show that our technique substantially outperforms state-of-the-art techniques Netzob and Discoverer and facilitates IoT protocol analysis and malware analysis.

### Acknowledgment

We thank the anonymous reviewers for their valuable comments and suggestions. We also thank Guannan Wei for his help in illustration. This research was supported in part by NSF 1901242 and 1910300, ONR N000141712045, N000141410468, and N000141712947, and IARPA TrojAI W911NF-19-S-0012. Any opinions, findings, and conclusions in this paper are those of the authors only and do not necessarily reflect the views of our sponsors.

### References

- [1] Burp Suite
- [2] Cuckoo
- [3] Fiddler
- [4] Google Nest Thermostat E
- [5] Other references as needed

This version of the text is more structured, coherent, and professional, with clear headings and organized sections.