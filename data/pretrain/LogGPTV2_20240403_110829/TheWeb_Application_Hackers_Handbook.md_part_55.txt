This data was processed by the shared component in the same way as
data supplied by an ordinary user. If an attacker knew or guessed the
parameter names used when the underwriter reviewed an application, the
attacker could simply submit these, thereby accepting his own application
without any actual underwriting.
HACK STEPS
The fl aws in this application were fundamental to its security, but none of
them would have been identifi ed by an attacker who simply intercepted
browser requests and modifi ed the parameter values being submitted.
1. Whenever an application implements a key action across multiple stages,
you should take parameters that are submitted at one stage of the pro-
cess and try submitting these to a different stage. If the relevant items of
data are updated within the application’s state, you should explore the
ramifications of this behavior to determine whether you can leverage it to
carry out any malicious action, as in the preceding three examples.
2. If the application implements functionality whereby different categories
of user can update or perform other actions on a common collection
of data, you should walk through the process using each type of user
and observe the parameters submitted. Where different parameters are
ordinarily submitted by the different users, take each parameter submit-
ted by one user and try to submit it as the other user. If the parameter
is accepted and processed as that user, explore the implications of this
behavior as previously described.
cc1111..iinndddd 441133 88//1199//22001111 1122::1111::4455 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 414
414 Chapter 11 n Attacking Application Logic
Example 5: Breaking the Bank
The authors encountered this logic fl aw in the web application deployed by a
major fi nancial services company.
The Functionality
The application enabled existing customers who did not already use the online
application to register to do so. New users were required to supply some basic
personal information to provide a degree of assurance of their identity. This
information included name, address, and date of birth, but it did not include
anything secret such as an existing password or PIN.
When this information had been entered correctly, the application forwarded
the registration request to back-end systems for processing. An information pack
was mailed to the user’s registered home address. This pack included instructions
for activating her online access via a telephone call to the company’s call center
and also a one-time password to use when fi rst logging in to the application.
The Assumption
The application’s designers believed that this mechanism provided a robust
defense against unauthorized access to the application. The mechanism imple-
mented three layers of protection:
n A modest amount of personal data was required up front to deter a mali-
cious attacker or mischievous user from attempting to initiate the registra-
tion process on other users’ behalf.
n The process involved transmitting a key secret out-of-band to the cus-
tomer’s registered home address. An attacker would need to have access
to the victim’s personal mail.
n The customer was required to telephone the call center and authenticate
himself there in the usual way, based on personal information and selected
digits from a PIN.
This design was indeed robust. The logic fl aw lay in the implementation of
the mechanism.
The developers implementing the registration mechanism needed a way to
store the personal data submitted by the user and correlate this with a unique
customer identity within the company’s database. Keen to reuse existing code,
they came across the following class, which appeared to serve their purposes:
class CCustomer
{
String firstName;
String lastName;
cc1111..iinndddd 441144 88//1199//22001111 1122::1111::4455 PPMM
14 Stuttard c11.indd V2 - 07/26/2011 Page 415
Chapter 11 n Attacking Application Logic 415
CDoB dob;
CAddress homeAddress;
long custNumber;
...
After the user’s information was captured, this object was instantiated, popu-
lated with the supplied information, and stored in the user’s session. The applica-
tion then verifi ed the user’s details and, if they were valid, retrieved that user’s
unique customer number, which was used in all the company’s systems. This
number was added to the object, together with some other useful information
about the user. The object was then transmitted to the relevant back-end system
for the registration request to be processed.
The developers assumed that using this code component was harmless and
would not lead to a security problem. However, the assumption was fl awed,
with serious consequences.
The Attack
The same code component that was incorporated into the registration function-
ality was also used elsewhere within the application, including within the core
functionality. This gave authenticated users access to account details, statements,
funds transfers, and other information. When a registered user successfully
authenticated herself to the application, this same object was instantiated and
saved in her session to store key information about her identity. The majority
of the functionality within the application referenced the information within
this object to carry out its actions. For example, the account details presented to
the user on her main page were generated on the basis of the unique customer
number contained within this object.
The way in which the code component was already being employed within
the application meant that the developers’ assumption was fl awed, and the
manner in which they reused it did indeed open a signifi cant vulnerability.
Although the vulnerability was serious, it was in fact relatively subtle to
detect and exploit. Access to the main application functionality was protected by
access controls at several layers, and a user needed to have a fully authenticated
session to pass these controls. To exploit the logic fl aw, therefore, an attacker
needed to follow these steps:
n Log in to the application using his own valid account credentials.
n Using the resulting authenticated session, access the registration function-
ality and submit a different customer’s personal information. This caused
the application to overwrite the original CCustomer object in the attacker’s
session with a new object relating to the targeted customer.
n Return to the main application functionality and access the other cus-
tomer’s account.
cc1111..iinndddd 441155 88//1199//22001111 1122::1111::4455 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 416
416 Chapter 11 n Attacking Application Logic
A vulnerability of this kind is not easy to detect when probing the applica-
tion from a black-box perspective. However, it is also hard to identify when
reviewing or writing the actual source code. Without a clear understanding of
the application as a whole and how different components are used in different
areas, the fl awed assumption made by developers may not be evident. Of course,
clearly commented source code and design documentation would reduce the
likelihood of such a defect’s being introduced or remaining undetected.
HACK STEPS
1. In a complex application involving either horizontal or vertical privilege
segregation, try to locate any instances where an individual user can accu-
mulate an amount of state within his session that relates in some way to
his identity.
2. Try to step through one area of functionality, and then switch to an unre-
lated area, to determine whether any accumulated state information has
an effect on the application’s behavior.
Example 6: Beating a Business Limit
The authors encountered this logic fl aw in a web-based enterprise resource
planning application used within a manufacturing company.
The Functionality
Finance personnel could perform funds transfers between various bank accounts
owned by the company and its key customers and suppliers. As a precaution
against fraud, the application prevented most users from processing transfers
with a value greater than $10,000. Any transfer larger than this required a senior
manager’s approval.
The Assumption
The code responsible for implementing this check within the application was
simple:
bool CAuthCheck::RequiresApproval(int amount)
{
if (amount ‘ space and newline
Escaping data in this way causes the shell command interpreter to treat the
relevant characters as part of the argument being passed to the invoked com-
mand, rather than as shell metacharacters. Such metacharacters could be used
to inject additional commands or arguments, redirect output, and so on.
The Assumption
The developers were certain that they had devised a robust defense against
command injection attacks. They had brainstormed every possible character that
might assist an attacker and had ensured that they were all properly escaped
and therefore made safe.
The Attack
The developers forgot to escape the escape character itself.
The backslash character usually is not of direct use to an attacker when
exploiting a simple command injection fl aw. Therefore, the developers did not
identify it as potentially malicious. However, by failing to escape it, they pro-
vided a means for the attacker to defeat their sanitizing mechanism.
Suppose an attacker supplies the following input to the vulnerable function:
foo\;ls
The application applies the relevant escaping, as described previously, so the
attacker’s input becomes:
foo\\;ls
When this data is passed as an argument to the operating system command,
the shell interpreter treats the fi rst backslash as the escape character. Therefore,
it treats the second backslash as a literal backslash—not as an escape character,
but as part of the argument itself. It then encounters a semicolon that is appar-
ently not escaped. It treats this as a command separator and therefore goes on
to execute the injected command supplied by the attacker.
cc1111..iinndddd 441199 88//1199//22001111 1122::1111::4455 PPMM
Stuttard c11.indd V2 - 07/26/2011 Page 420
420 Chapter 11 n Attacking Application Logic
HACK STEPS
Whenever you probe an application for command injection and other fl aws,
having attempted to insert the relevant metacharacters into the data you con-
trol, always try placing a backslash immediately before each such character to
test for the logic fl aw just described.
NOTE This same fl aw can be found in some defenses against cross-site
scripting attacks (see Chapter 12). When user-supplied input is copied directly
into the value of a string variable in a piece of JavaScript, this value is encap-
sulated within quotation marks. To defend themselves against cross-site
scripting, many applications use backslashes to escape any quotation marks
that appear within the user’s input. However, if the backslash character itself
is not escaped, an attacker can submit \’ to break out of the string and there-
fore take control of the script. This exact bug was found in early versions of
the Ruby On Rails framework in the escape_javascript function.
Example 9: Invalidating Input Validation
The authors encountered this logic fl aw in a web application used in an e-com-
merce site. Variants can be found in many other applications.
The Functionality
The application contained a suite of input validation routines to protect against
various types of attacks. Two of these defense mechanisms were a SQL injection
fi lter and a length limiter.
It is common for applications to try to defend themselves against SQL injec-
tion by escaping any single quotation marks that appear within string-based
user input (and rejecting any that appear within numeric input). As described
in Chapter 9, two single quotation marks together are an escape sequence that
represents one literal single quote, which the database interprets as data within a
quoted string rather than the closing string terminator. Many developers reason,
therefore, that by doubling any single quotation marks within user-supplied
input, they will prevent any SQL injection attacks from occurring.
The length limiter was applied to all input, ensuring that no variable sup-
plied by a user was longer than 128 characters. It achieved this by truncating
any variables to 128 characters.
The Assumption
It was assumed that both the SQL injection fi lter and length truncation were
desirable defenses from a security standpoint, so both should be applied.