the real system, but will be used in our proof.
Semi-functional Ciphertext Let g2 denote a generator of
the subgroup Gp2 . A semi-functional ciphertext is created
as follows. We ﬁrst use the encryption algorithm to form a
normal ciphertext CT = (S, C, C0, C1). Then, we choose a
random exponent c ∈ ZN . We also choose a random value
η ∈ ZN . The semi-functional ciphertext CT
is set to be
′
(S, C, C0 · gc
2, C1 · gcη
2 ) .
Semi-functional Key A semi-functional key for an access
structure A = (A, ρ,T ), where A is an ℓ × m matrix, ρ
is a map from each row Ai of A to {1, . . . , n} and T =
(tρ(1), . . . , tρ(ℓ)) ∈ Zℓ
N , will take on one of two forms. To cre-
ate a semi-functional key, we ﬁrst use the key generation al-
gorithm to form a normal secret key SKA = ((A, ρ,T ), {Di,
i,{Di,j}j∈Qi
}i∈[ℓ]), where Qi denote the set [n]\{ρ(i)}.
′
D
Then, we choose η0, η1, . . . , ηn uniformly at random, and
random values γi ∈ ZN associated with row i of A. We also
choose a random vector w ∈ Zm
of type 1 is set as
N . The semi-functional key
((A, ρ,T ), {Di · g
i · gγi
′
Ai·w+γi(η0+η(cid:26)(i)t(cid:26)(i))
}j∈Qi
2 , {Di,j · gγiηi
D
2
2
,
}i∈[ℓ]).
A semi-functional key of type 2 is formed without the terms
γi(η0+η(cid:26)(i)t(cid:26)(i))
g
(one could also interpret this as
2
setting γi = 0):
2 , gγiηi
, gγi
2
((A, ρ,T ), {Di · gAi·w
2
i, {Di,j}j∈Qi
′
}i∈[ℓ]).
, D
Let q denote the number of secret key queries made by the
adversary. We will prove the security of our scheme based
on Assumptions 1, 2 and 3 using a hybrid argument over a
sequence of games.
Gamereal The real security game.
Gamerestricted Let CT = (S, C, C0, C1) be the challenge ci-
phertext, where S = (z1, . . . , zn). This game is the same as
Gamereal except that the challenger outputs reject and halts
if event E1 happens. Event E1 is deﬁned as: the adversary
issues a key query ⟨A = (A, ρ,T )⟩, where A is an ℓ × m
matrix, ρ is a map from each row Ai of A to {1, . . . , n} and
T = (tρ(1), . . . , tρ(ℓ)) ∈ Zℓ
N , such that ∃i ∈ [n], j ∈ [ℓ],
zi ̸≡ tρ(j) mod N, and zi ≡ tρ(j) mod p2.
Gamech This game is the same as Gamerestricted except that
the challenge ciphertext is replaced with a semi-functional
ciphertext.
Gamek,1(1 ≤ k ≤ q) This game is like Gamech except for
the way that the challenger answers the adversary’s secret
key queries. The ﬁrst k − 1 secret keys are semi-functional
of type 2, the kth secret key is semi-functional of type 1, and
the remaining secret keys are normal.
Gamek,2(0 ≤ k ≤ q) This game is like Gamech except for
the way that the challenger answers the adversary’s secret
key queries. The ﬁrst k secret keys are semi-functional of
type 2, and the remaining secret keys are normal.
GameFinal This game is like Gameq,2 except that the chal-
lenge ciphertext is a semi-functional ciphertext of a random
message chosen from GT .
In GameFinal,
We prove that these games are computationally indistin-
guishable in the following four lemmas. Note that Gamech =
Game0,2.
it is clear that the value of β is
information-theoretically hidden from the adversary. Hence
the adversary has no advantage in GameFinal. Therefore, we
conclude that the advantage of the adversary in Gamereal
(i.e., the real security game) is negligible. This completes
the proof of Theorem 1.
Lemma 1. Suppose that G satis(cid:12)es Assumption 1. Then
Gamereal and Gamerestricted are computationally indistinguish-
able.
Proof. Observe that, if event E1, which is deﬁned in the
description of GameRestricted, does not happen, GameRestricted
is identical to GameReal. All we have to do is to prove that
E1 happens with negligible probability.
244If E1 happens with non-negligible probability, we con-
struct a PPT algorithm B that breaks Assumption 1 with
non-negligible probability. Observe that, given G, GT , e, N ,
g, X1X2, Y2Y3, X3, T , algorithm B can perfectly simulate
GameReal.
Let CT = (S, C, C0, C1) be the challenge ciphertext, where
S = (z1, . . . , zn). During the simulation, for each key query
⟨A = (A, ρ,T )⟩ issued by the adversary, where A is an ℓ×m
matrix, ρ is a map from each row Ai of A to {1, . . . , n}
and T = (tρ(1), . . . , tρ(ℓ)) ∈ Zℓ
N , if zi ̸≡ tρ(j) mod N for
i ∈ [n] and j ∈ [ℓ], B computes a = gcd(zi − tρ(j), N ).
B identiﬁes the occurrence of E1 (i.e., p2 divides a) with
e(X1X2, Y2Y3)a = 1GT . Set b = N
a . We consider two cases:
1. p1 divides b; 2. p3 divides b.
B can determine if case 1 has occurred by testing if e(X1X2,
g)b = 1GT . If this happens, B can then learn whether T has
a Gp2 component or not by testing if e(T , X1X2)b = 1GT .
If not, then T has a Gp2 component, i.e., T ∈ Gp1p2p3 ; oth-
erwise, T ∈ Gp1p3 .
B can determine if case 2 has occurred by testing if e(Y2Y3,
X3)b = 1GT . If this happens, B can then learn whether T
has a Gp2 component or not by testing if e(T , Y2Y3)b = 1GT .
If not, then T has a Gp2 component, i.e., T ∈ Gp1p2p3 ;
otherwise, T ∈ Gp1p3 .
Lemma 2. Suppose that G satis(cid:12)es Assumption 2. Then
Gamerestricted and Gamech are computationally indistinguish-
able.
Proof. Suppose there exists an adversary A that distin-
guishes Gamerestricted and Gamech. Then we can build an
algorithm B with non-negligible advantage in breaking As-
sumption 2. B is given G, GT , e, N, g, X3, T and will simulate
Gamerestricted or Gamech with A. B ﬁrst chooses α, a0, a1, . . .,
an ∈ ZN uniformly at random. It then sets h0 = ga0 , h1 =
ga1 , . . . , hn = gan , and sends A the public parameters:
PK = (G, GT , e, N, g, h0, h1, . . . , hn, e(g, g)α).
B can generate normal secret keys in response to A’s key
requests by using the key generation algorithm KeyGen, since
it knows the master secret key MSK = (α, X3) associated
with PK. (Notice that, if the event E1 which is described in
Gamerestricted happens when A makes a key query, B responds
as in Gamerestricted.)
At some point, A sends B two (equal length) messages
M0, M1 and a set of attributes S. B chooses β ∈ {0, 1}
randomly and does the following.
1. Parse S as (z1, . . . , zn). B computes
C = Mβ · e(gα, T ), C0 = T, C1 = T a0+
∑
n
i=1 aizi .
2. B sets the challenge ciphertext as CT = (S, C, C0, C1)
and sends it to A.
n
where η = a0 +
i=1 aizi. This is a semi-functional cipher-
text and B simulates Gamech. We note that the values of
a0, ai, zi modulo p1 are uncorrelated from their values mod-
If T ← Gp1 , it is
ulo p2, so this is properly distributed.
If T ← Gp1
2, then
× Gp2 , let T = gsgc
(
C = Mβ · e(g, g)αs,
C0 = gs · gc
∑
2, Ci =
n∏
i=1
h0
)
s · gcη
2 .
hzi
i
easy to observe that this is a normal ciphertext and B sim-
ulates Gamerestricted. Hence, B can use the output of A to
distinguish between these possibilities for T .
Lemma 3. Suppose that G satis(cid:12)es Assumption 1. Then
for each k ∈ [q], Gamek−1,2 and Gamek,1 are computationally
indistinguishable.
Proof. Suppose there exists an adversary A that distin-
guishes Gamek−1,2 and Gamek,1. Then we can build an
algorithm B with non-negligible advantage in breaking As-
sumption 1. B is given G, GT , e, N, g, X1X2, Y2Y3, X3, T and
will simulate Gamek−1,2 or Gamek,1 with A. B chooses
α, a0, a1, . . . , an ∈ ZN uniformly at random.
It then sets
h0 = ga0 , h1 = ga1 , . . . , hn = gan , and sends A the public
parameters:
PK = (G, GT , e, N, g, h0, h1, . . . , hn, e(g, g)α).
Note that B knows the master secret key MSK = (α, X3)
associated with PK. Let us now explain how B answers the
µ-th key query for an access structure A = (A, ρ,T ), where
A is an ℓ × m matrix, ρ is a map from each row Ai of A
to {1, . . . , n} and T = (tρ(1), . . . , tρ(ℓ)) ∈ Zℓ
N . Let Qi denote
the set [n]\{ρ(i)} for each i ∈ [ℓ]. (Notice that, if the event
E1 described in Gamerestricted happens when A makes a key
query, B responds as in Gamerestricted.)
For µ  k, B creates a normal secret key by running the
key generation algorithm KeyGen since it knows the master
secret key MSK.
To answer the k-th key quest for (A, ρ, T = (tρ(1), . . .,
′ · 1 =
tρ(ℓ))), B chooses a random vector v
α, a random vector w ∈ Zm
N such that w · 1 = 0, random
exponents ˜γi ∈ ZN , random elements ˜Ri, ˜R
∈
Gp3 and for each i ∈ [ℓ], j ∈ Qi sets:
i,{ ˜Ri,j}j∈Qi
′
N such that v
′ ∈ Zm
Di = gAi·v
T Ai·wT ~γi(a0+a(cid:26)(i)t(cid:26)(i)) ˜Ri,
′
D
′
i = T ~γi ˜R
′
i, Di,j = T ~γiaj ˜Ri,j.
We have the following observations. If T ← Gp1
then T can be written as grgd
Di = gAi·v(h0h
i · gγi
′
′
i = gri R
D
t(cid:26)(i)
2 R, and
ρ(i) )ri Ri · g
2 , Di,j = hri
δi+γi(η0+η(cid:26)(i)t(cid:26)(i))
2
,
j Ri,j · gγiηj
2
×Gp2
×Gp3 ,
′
′
i = R~γi ˜R
where v = v
+ rw, ri = r˜γi, δi = dAiw, γi = d˜γi, Ri =
′
i, Ri,j = R~γiaj ˜Ri,j,
RAiw+~γi(a0+a(cid:26)(i)t(cid:26)(i)) ˜Ri, R
{ηl = al}l∈[n]. This is a semi-function key of type 1. Note
that the values of ˜γi, a0, ai, tρ(i) modulo p1 are uncorrelated
from their values modulo p2. If T ← Gp1
× Gp3 , this is a
properly distributed normal secret key.
At some point, A sends B two (equal length) messages
M0, M1 and a set of attributes S. B chooses β ∈ {0, 1}
randomly and does the following.
245and sends it to A.
(
If we write X1X2 as gsgc
2, then
n∏
)
s · gcη
2 .
C = Mβ · e(g, g)αs, C0 = gs · gc
2,
∑
C1 =
hzi
i
h0
i=1
1. Parse S as (z1, . . . , zn). B computes
C = Mβ · e(gα, X1X2), C0 = X1X2,
∑
C1 = (X1X2)a0+
n
i=1 aizi ,
2. B sets the challenge ciphertext as CT = (S, C, C0, C1)
×Gp2
n
where η = a0 +
i=1 aizi. This is a semi-functional ci-
phertext. Note that the values of a0, ai, zi modulo p1 are
uncorrelated from their values modulo p2.
Next, we show that the kth key and the challenge ci-
phertext are properly distributed. Observe that, if T ←
×Gp3 , then the kth key is a properly distributed normal
Gp1
secret key and the challenge ciphertext is a properly dis-
tributed semi-functional ciphertext. If T ← Gp1
×Gp3 ,
since the event E1 happens with negligible probability which
has been proven in Lemma 1, then with overwhelming prob-
ability, there exits i ∈ [ℓ] such that tρ(i) ̸≡ zρ(i) mod N and
tρ(i) mod p2 is uniformly distributed5; thus similar to the
analysis in the proof of Lewko et al.
’s KP-ABE scheme
[25], the kth key and the challenge ciphertext are properly
distributed.
× Gp3 , then
We can thus conclude that, if T ← Gp1
× Gp2
B has properly simulated Gamek,1. If T ← Gp1
× Gp3 , then
B has properly simulated Gamek−1,2. Hence, B can use the
output of A to distinguish between these possibilities for T .
Lemma 4. Suppose that G satis(cid:12)es Assumption 1. Then