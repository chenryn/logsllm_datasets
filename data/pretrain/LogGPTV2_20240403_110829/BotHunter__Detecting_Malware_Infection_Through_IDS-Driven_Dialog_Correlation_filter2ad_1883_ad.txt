# BotHunter Network Dialog Correlation and Evaluation

## Introduction
BotHunter is a system designed to detect botnet infections by correlating network dialog warnings. This document outlines the methodology, scoring algorithm, and evaluation of BotHunter's performance in various network environments.

## Scoring Algorithm
To identify potential botnet activities, BotHunter requires at least two forms of outbound bot dialog warnings (E3-E5). We translate these requirements into a scoring algorithm using a regression model to estimate dialog warning weights and a threshold value. The estimated regression coefficients serve as the desired weights, as shown in Table 2. For completeness, the computed expectation table is available on the project website [1].

### Initial Weighting
| Event | Coefficients | Standard Error |
|-------|-------------|----------------|
| E1    | 0.09375     | 0.100518632    |
| E2    | 0.28125     | 0.075984943    |
| E3    | 0.09375     | 0.075984943    |
| E4    | 0.34375     | 0.075984943    |
| E5    | 0.34375     | 0.075984943    |

These coefficients provide an approximate weighting system to match the initial expectation table. We apply these values to our expectation table data to establish a threshold between bot and non-bot declarations. Figure 5 illustrates the results, where bot patterns are at X-axis value 1, and non-bot patterns are at X-axis value 0. Bot scores are plotted vertically on the Y-axis. All but one non-bot pattern score below 0.6, and all but two bot patterns score above 0.65.

Next, we evaluate our scoring model against a corpus of BotHunter IDS warning sets produced from successful bot and worm infections captured in the SRI honeynet between March and April 2007. Figure 6 plots the actual bot scores from these real infection traces. All observations produce BotHunter scores of 0.65 or greater.

When a dialog sequence crosses the threshold for bot declaration, BotHunter generates a bot profile. The bot profile includes a full analysis of the roles of the dialog participants, summarizes the dialog alarms based on their classes (E1-E5), and computes the infection time interval. Figure 7 provides an example of a bot profile.

## Evaluating Detection Performance
To evaluate BotHunter's performance, we conducted several controlled experiments and real-world deployment evaluations. We begin with in situ virtual network experiments, followed by a live VMWare-based high-interaction honeynet, and then discuss broader testing experiences in two network environments.

### In Situ Virtual Network Experiments
Our evaluation setup uses a virtual network environment with three VMware guest systems: a Linux machine with an IRC server (C&C server) and two Windows 2000 instances. We infect one Windows instance and wait for it to connect to our C&C server. Upon connection, we instruct the bot to start scanning and infecting neighboring hosts. We then monitor the second victim's network activity to capture the full infection dialog.

We collected 10 different bot variants from three well-known IRC-based bot families: Agobot/Gaobot/Phatbot, SDBot/RBot/UrBot/UrXBot, and mIRC-based GTbot. BotHunter successfully detected all bot infections and generated corresponding bot profiles.

### SRI Honeynet Experiments
Our experimental honeynet framework consists of three components:
1. **Drone Manager**: Manages drone availability and packet forwarding.
2. **High-Interaction Honeynet System**: Hosted on a high-performance system with multiple VM instances.
3. **DNS/DHCP Server**: Dynamically assigns IP addresses and answers DNS queries.

Over a 3-week period, we analyzed 2,019 successful WinXP and Win2K remote-exploit bot or worm infections. Each infection caused the honeypot to initiate outbound communications related to the infection. We observed malware communications, C&C establishment, and propagation attempts.

### Results
Figure 7 illustrates a sample infection detected using the SRI honeynet and the corresponding BotHunter profile. W32/IRCBot-TO, a recent network worm/bot, propagates through open network shares and affects both Windows 2000 and Windows XP systems.

## Conclusion
BotHunter effectively reduces the amount of information a security administrator needs to analyze by generating comprehensive bot profiles. Our experiments demonstrate that BotHunter can reliably detect bot infections in various network environments, providing valuable insights into botnet activities.

For more details, refer to the project website [1] and the provided figures and tables.