##### 3.1.1.3 Dependency推测
除了通过动态trace收集到的API data dependency关系，有些合理的API data
dependency关系并不会被trace到（GUI应用程序没有相应的
API调用组合）。APICraft还会做dependency推测（inference）这一步。APICraft定义了三个推测规则：
1. **R1: Dependency-based transition** ：如果函数A的output与函数C的输入参数相匹配，并且函数B的output与函数C的输入参数相匹配，以及又trace到，函数A的output与函数D的输入参数相匹配， APICraft会推断出，函数B的output跟函数D的输入参数能够相匹配并产生一组data dependency关系；
图 7：R1推测公式
2. **R2: Type-based transition** ：当APICraft观察到函数A的output的类型信息与函数B的输入参数类型信息一致，这个时候APICraft会做个推测，因为这个没有值（value）信息，所以是个推测，推测出函数A的 output是函数B的输入参数；
图 8：R2推测公式
3. **R3: Inter-thread data flow dependency** ：R3与图6的算法是一致的，只不过在这个规则下，会限定类型是指针，一般跨线程之间会传递指针，需要减少误报。
#### 3.1.2 Control Dependency
APICraft收集到的Control Dependency主要是用来解决error code checking的：
1.API函数的输出参数（output parameter）或者返回值（return value）是指针类型，将对这个output值 进行非空判断（null
check）；
2.API函数的输出参数（output parameter）或者返回值（return value）是整数类型，并且是个status
code的话，将进行动态污点分析来获取error code
checking分支的表达式。（1）获取这个API函数的调用处（callsite）；（2）通过静态分析找到一些error code
checking的系统调用，比如exit，abort 等。这些basic
block会被标记为checkpoint。（3）最后从调用处（callsite）开始进行taint
analysis，因为正常的GUI应用程序会走正常分支，当走到checkpoint相应分支的时候将表达式取反，
让污点分析传播到checkpoint处。拿到对应的表达式。
### 3.2 Dependency Combination
APICraft将收集并解析完成的data dependency以及control
denpendency进行Combination，再通过多目标优化遗传算法进行变异演化。
#### 3.2.1 问题建模
APICraft将fuzz driver生成问题抽象成一个数学问题，利用多目标优化遗传算法（Multi-Objective Genetic
Algorithm）进行求解。
具体而言，以GUI应用程序（调用相应 SDK提供的 API）的API函数使用方式为初始种群，对这些种群进行变异演化生成fuzz
driver，通过判断生成的fuzz driver的优劣，将优越fuzz driver保留下来继续变异，最后生成满足要求的fuzz driver
用于fuzzing。我们认为 **一个高质量的fuzz driver需要满足三个目标** ：
1. **多样性（Diversity）** ：多样性（Diversity）指的是fuzz driver能够调用足够多样的API使fuzz driver程序行为更丰富。即为了让生成出来的fuzz driver有更多不同的data dependencies，如果data dependencies能够组成loop，每条loop都会给这个目标加分数。图9所示的多样性（Diversity）的公式是生成的fuzz driver的有向多边图的边（即单个data dependency）的数量，加上这个图的圈复杂度。总体是要表征data dependency图（或者说fuzz driver的API调用）的多样性。
图 9：Diversity公式
2. **有效性（Effectiveness）** ：有效性（Effectiveness）是这三个指标中的唯一一个需要动态反馈信息的指标，其目标是要让生成的fuzz driver的API调用更合法有效。我们会给basic blocks中有调用其他函数的，以及这个basic block处于loop循环中的更多分数，因为我们觉得相对于核心代码而言error handling code在一个API函数中会执行更少的basic blocks，而核心代码会有更多的loop信息或者其 他函数调用。该指标是个动态的feedback，是需要将fuzz driver序列化成代码编译运行后得来的，我们对每个basic block评分（如图10所示）：（1）调用其余函数以及处于loop循环中，评分3分；（2）调用其余函数或者处于loop循环中，2分；（3）两者均无则1分。
图 10：Effectiveness公式
3. **紧凑性（Compactness）** ：core dependency指的是从接收input file的API函数为起点，以此为根结点的展开的data dependency图。non-core dependency就是与这颗树无关的data dependency。F是core function（处于 core dependency中的函数）集合，f是集合里面的每个函数，If是每个函数的参数集合。k是每个input参数的无关函数数量，5是个经验值（即如果无关函数数量超过5，则该紧凑性（Compactness）指标得分为0）。
紧凑性（Compactness）指标目的是为了让fuzz driver去除冗余API调用，冗余API调用就是跟以接收input file
API为起点的data dependency 图无关的API调用，即存在于non-core dependency图中的API调用。所以在core
dependency的data dependency分数会高，non-core dependency中的data
dependency分数会低。图11是Compactness的具体公式。
图 11：Compactness公式
#### 3.2.2 多目标优化遗传算法（Multi-Objective Genetic Algorithm）
APICraft采用了NSGA-II算法来对Diversity、Effectiveness、Compactness这三个目标进行多目标优化的遗传算法演进。
图12是整体的APICraft的多目标优化遗传算法，输入data dependency集合，输出是一系列的fuzz driver集合：
  1. 25-31行即传统的遗传算法，先生成初始的种子集，选取初始种子集，然后开始变异，再选择存活下来的个体，继续变异，往复。直到到了我们限定的变异轮数。28行进行变异，29行选取最优个体；
  2. 17-23行选取两个种?进?交叉变异；
  3. 11-16行对交叉变异后的种?进行多目标优化的评分计算，然后筛出最优个体。12行计算目标评分，13行进行非支配排序算法，进行分层。14行计算拥挤度与拥挤度比较算子。15行筛选出来最优个体；
  4. 1-10行就是对个体先进行序列化后，计算三个目标的分值。
图 12：APICraft的多目标优化遗传算法
## 04 实现
APICraft工程实现中核心之一是动态trace功能，动态trace是为了获取API函数的参数以及返回值。如图13所示，在hook中有两种机制：
1.Type-I需要两个hook点，函数的enter point以及exit point，enter point容易分析，但函数的exit
point无法准确判断，因为一个函数可能会有多个exit点，单纯通过判断ret指令是无法精确判断exit点的，特别是当二进制程序被高度编译优化过。错误的exit点的hook机制会导致后续收集的nested
level等信息都有误；
2.Type-II则没有这个问题，基于interposition的机制是中间有个媒介层在进行函数前接管，在退出函数之后也接管。我们就能准确拿到参数值以及返回值。Interposition机制的核心是会有一个跟被hook函数相同函数签名的替换函数，然后基于这个替换函数接管原函数的信息之后再调用原函数。在macOS上
APICraft用DYLD_PRELOAD跟DYLD_INTERPOSE机制来实现，在Windows上我们用的是detour来实现。
图 13：两种 hook机制
## 05 实验结果
### 5.1 多目标优化遗传算法
我们一共对5个攻击面进行了漏洞挖掘，包含了Image，Font，PDF，Audio，RTF，这里用Image这个攻击面来看看我们算法的实验效果，其他攻击面实验效果可查阅论文。
  1. 图14左图是经过多目标遗传算法生成的fuzz driver跟人工写的fuzz driver在fuzzing过程中覆盖率比对。紫色的线是APICraft生成的fuzz driver，浅色线是Google Project Zero的安全研究员手写的fuzz driver，这个fuzz driver是研究员在对攻击面熟悉，并且通过逆向构建出来的fuzz driver。实验来看， 通过APICraft产生的fuzz driver在fuzzing过程中的覆盖率仍比P0顶尖安全研究员手写的fuzz driver实验效果卓越；
  2. 图14右图是三个目标（Diversity、Effectiveness、Compactness）都结合起来生成的fuzz driver跟去掉每一个单一目标而生成的fuzz driver比对，比如绿色这条线是去掉多样性（Diversity）的覆盖率，去掉每个单一目标的实验效果没有三个目标都结合起来生成的fuzz driver在fuzzing过程中的实验效果好。
图 14：图片攻击面的多目标优化遗传算法实验效果
### 5.2 漏洞挖掘产出
基于APICraft生成的fuzz driver，我们进行了长达8个月的fuzzing。最终在macOS系统库5个攻击面上发现了 **142**
处漏洞，收到Apple **54** 个官方漏洞致谢（该数据统计截止5到论?投稿时，2021年2月）。
图15节选了一些漏洞，每一列分别是攻击面（Attack Surface），获取到的CVE号或者 Issue-ID，macOS的复现版本，漏洞类型，已经能在哪些 APP上上复现这些bug。
图 15：漏洞挖掘产出
## 06 总结
**APICraft基于function
interposition技术实现了轻量级的GUI应用程序动态行为收集框架，以及基于NSGA—II多目标优化遗传算法实现的fuzz
driver自动化生成框架** 。基于APICraft框架生成的fuzz driver在fuzzing过程中帮助我们挖掘到了macOS系统库 **142**
处漏洞，共收获Apple **54** 个官方漏洞致谢。
APICraft项目主页链接为：https://sites.google.com/view/0xlib-harness 我们将在Usenix
Security 2021会议完成之后开源代码。
* * *