Response Smuggling:
Exploiting HTTP/1.1 Connections
Martin Doyhenard
Onapsis
PI:EMAIL
Abstract
Over the past few years, we have seen some novel presentations re-introducing the concept of
HTTP request smuggling, to reliably exploit complex landscapes and systems.
With advanced techniques, attackers were able to bypass restrictions and breach the security of
critical web applications.
But, is everything said on HTTP Desync Attacks, or is it just the tip of the iceberg?
This paper will take a new approach, focusing on the HTTP Response Desynchronization, a
rather unexplored attack vector.
By smuggling special requests it is possible to control the response queue, allowing an attacker
to inject crafted messages in the HTTP pipeline. This can be leveraged to hijack victim’s
sessions from login requests, flood the TCP connection for a complete Denial of Service,  and
concatenate responses using a vulnerability called HTTP method confusion.
This research presents a novel technique, known as Response Scripting, to create malicious
outbound messages using static responses as the building blocks.
Finally, by splitting reflected content, this paper will demonstrate how an attacker would be able
to inject arbitrary payloads in the response pipeline. This will be leveraged to write custom
messages and deliver them back to the victims.
This document will also introduce a Desync variant, used to hide arbitrary headers from the
backend. This technique does not abuse discrepancy between HTTP parsers, but instead relies
on a vulnerability in the HTTP protocol definition itself.
Abstract
1
Introduction
3
HTTP Request Smuggling
3
HTTP Desync Variant
4
HTTP Response Smuggling
5
Response Injection
5
Response Hijacking
6
Request Chaining
7
Request Hijacking
8
HTTP Response Concatenation
10
HEAD Response Length
10
HTTP Method Confusion
10
Response Concatenation
11
HTTP Response Scripting
12
Reflected Header Scripting
12
Content-Type confusion & Security bypass
14
Session Hijack: stealing HttpOnly Cookies
14
Arbitrary Cache Poisoning
17
HTTP Splitting: Arbitrary Response Injection
19
Conclusions
21
References
21
Introduction
HTTP Request Smuggling
HTTP request Smuggling was first documented back in 2005 by Watchfire1. Is an attack which
abuses the discrepancies between chains of servers (HTTP front-end and back-end servers)
when determining the length and boundaries of consecutive requests.
A discrepancy occurs when two HTTP parsers calculate the length of a request using different
length tokens or algorithms. This can cause a proxy to think it's sending one request when, in
fact, the origin server reads two.
But it was not until 2019, when a state of the art research2, presented by James Kettle,
demonstrated that Request Smuggling could be successfully exploited in the wild.
It proved that this idea could be leveraged to craft a malicious request, which intentionally
causes a discrepancy, in order to affect other messages traveling through the same connection.
By confusing the backend server, an attacker could “smuggle” a hidden request that will be
considered as the prefix of the next request sent through the pipeline.
The HTTP RFC allows messages to contain 2 different length headers, the Content-Length and
Transfer-Encoding. And to ensure that all parsers use the same length in a particular message,
it provides message-length headers hierarchy: “If a message is received with both a
Transfer-Encoding header field and a Content-Length header field, the latter MUST be ignored.”
This should solve the problem, however, if for any reason a proxy or origin server fails to either
interpret one of these headers, or to be RFC-compliant, a discrepancy could occur.
Figure 1. A malicious client performing a request smuggling attack. 1) The attacker and victim both send an HTTP
request. 2) The proxy parses the messages and forwards them as 2 different requests. 3) The backend server
processes the first part (green) of the attacker’s message as one isolated request and returns the response to the
malicious client. The second part of the message (red) is concatenated to the beginning of the victim’s request. The
response generated is delivered to the victim.
2 https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn
1 https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf
It is not the purpose of this paper to discuss the different techniques to cause discrepancy
between proxies and the origin server, nor the methodology for successful exploitation of classic
HTTP request smuggling vulnerabilities.
If the reader wants to know more about this, please refer to James Kettle’s and Amit Klein’s3
previous works.
HTTP Desync Variant
The Connection header field provides a declarative way of distinguishing header fields that are
only intended for the immediate recipient ("hop-by-hop") from those fields that are intended for
all recipients on the chain ("end-to-end").
That is, one of the main purposes of Connection Option is to “hide” hop-by-hop headers from
any other than the next proxy/origin-server in the communication chain.
At first, setting an end-to-end header as a Connection Option might look harmless. Doing so will
cause the same effect as not sending the header at all. Most end-to-end headers are not
processed by proxies and do not affect the forwarded message.
However, looking at the nature of most HTTP Desync techniques, it seems obvious that the
issue being abused is the inability of one or more proxies/servers to properly handle, or “see”, a
message-length header. And this same condition can be met if one of those headers is handled
by one proxy, but is not forwarded to the following one (or origin server).
This technique can be used to exploit the same HTTP Smuggling flaws as any other Desync
variant. The main difference is that this method relies on a vulnerability in the implementation of
the protocol itself, meaning that it is likely to find it in RFC-compliant servers and proxies.
3
https://i.blackhat.com/USA-20/Wednesday/us-20-Klein-HTTP-Request-Smuggling-In-2020-New-Variants-New-Defens
es-And-New-Challenges.pdf
HTTP Response Smuggling
Response Injection
Request smuggling vulnerabilities can be leveraged to cause critical damage to a web
application. By injecting an HTTP prefix into a victim’s request, a malicious user would be able
to chain low scoring vulnerabilities and craft attacks such as XSS and CSRF without user
interaction, partial Denial of Service, open redirects, WEB cache poisoning/deception and
others.
But, in all these examples, another vulnerability is required to compromise the application/user.
This paper focuses on another exploitation vector, the desynchronization of the response
pipeline. All following examples use Request Smuggling vulnerabilities, but the same concepts
could apply if a Response Splitting vulnerability was found.
After processing the last message, the backend, which will treat it as two separate requests, will
produce two isolated responses and deliver them back to the proxy. If another victim’s request is
sent by the proxy, right after the attacker’s one, the response pipeline will be desynchronized
and the injected response will be sent to the victim as shown in figure 3 and 4.
Figure 2. 1) The attacker sends a crafted request right before the victim’s one. 2) The proxy forwards each message
to the backend server. 3) The backend processes the packages as 3 isolated requests and produces 3 different
responses.
Figure 3. 4) The backend server returns 3 responses, including the one for the smuggled request (red). 5) Responses
are delivered using a FIFO scheme, causing the attacker to receive the response to his first request, and the victim to
obtain the response to the injected request.
Response Hijacking
Still, this scenario does not add anything new to the attack. But what’s interesting about this
technique is not the fact that the victim received an incorrect response, as it would in classic
request smuggling. The goal of the malicious request was instead to desynchronize the
responses, leaving an “orphan” response in the queue.
If the attacker issues another request after the previous attack, it would receive the response of
the victim, which could contain sensitive information. Some responses could even contain
session cookies, if they were associated with a login request.
Figure 4. 6) The attacker sends another request, expecting to receive the victim’s response (blue). 7) The proxy
forwards the request and receives (or had stored depending on the implementation) the victim’s response.
Figure 5. 8) The attacker receives the victim’s response. 9) The connection is closed for any reason  and the new
orphan message is discarded (close response, timeout, max requests per connection).
Although this technique seems quite simple, there are some important considerations to
successfully hijack responses:
1.
The persistent connection between the Proxy and the Backend must be kept alive until
the response is hijacked. This means that no request or response can contain the close
connection directive.
2.
Some proxies will not allow pipelining (store responses), so a request must be issued
right after the victim's. In most cases this can be solved if the attacker sends a high
number of requests in a small period of time.
3.
Bad Requests (malformed or invalid messages) and other response status codes (4XX,
5XX) will cause the connection to be closed. For this reason response hijacking is not
observed in some classic request smuggling examples.
This attack does not require to chain any extra vulnerability, and could easily lead to session
hijacking if the victim’s response contains session cookies (a login response).
Request Chaining
Using response smuggling is possible to inject an extra message to desynchronize the
response pipeline. However, there is nothing that stops the attacker from sending an arbitrary
amount of smuggled messages.
Figure 6. 4) The backend server generates 5 isolated responses and returns them in order to the Proxy. malicious
responses (red) contain a reflected XSS payload. 5) The XSS exploit is delivered to the victim’s without any extra
interaction.
Using this technique not only improves the reliability of HTTP smuggling, but can also be used
to consume the resources of the backend server (TCP connections, Memory buffers,
Processing time). If the amount of injected payloads is big enough, a single message could
contain thousands of hidden requests which will be processed by the backend thread.
When pipelining is enabled (network buffers are not discarded), the requests and responses will
be stored in memory until all messages are handled. This could easily lead to memory and CPU
time consumption, which will end up in a complete denial of service of the backend server, and
in some cases, crashing the web application.
Also, if requests take time to be resolved (the backend requires some seconds to generate the
response), TCP connections can be hung without being closed by a time out. This will
eventually consume all available proxy connections, as proxies can only handle a finite amount
of concurrent connections. When this condition is met, all following client’s requests will be
either discarded or placed in a message queue that won't be able to forward them before a time
out. Both cases will be observed as a denial of service of the proxy/origin server.
Request Hijacking
By desynchronizing the response queue, an attacker could inject a request which will be
completed with the victim’s message (just as in old HTTP Smuggling techniques). However, as
the pipeline order is lost after adding extra responses, the attacker could obtain the client
response, only this time the associated victim’s request was also affected by a smuggled
message.
In order to perform this attack, it is necessary to find a resource that provides content reflection.
Most (or almost all) web applications will have some web page reflecting parameters, which is
not a vulnerability if the content is escaped correctly.
Figure 7. 1) An attacker sends two smuggled requests in the same message, one of them (red) to the content
reflecting resource. 2) The proxy forwards two requests through the same connection. 3) The last smuggled request
is prepended to the victim’s message.
Figure 8. 4) The 3 responses are returned to the proxy. The last one includes the original victim’s request in the body.
5) Both clients receive responses for the requests issued by the attacker, which is also sending a new message to
hijack the orphan response.
Figure 9. The attacker receives the malicious desynced response, which contains the original victim’s request as
reflected content.
HTTP Response Concatenation
HEAD Response Length
Until now, HTTP smuggling attacks leveraged discrepancies between proxies/servers, when
determining the length and boundaries of an incoming request.
However, it should also be possible to leverage discrepancies in the response lengths, in order