产生死锁
begin;
会话2
第7章MySQL事务和锁丨291
TO BE GRANTED:
root updating
.test
---
## Page 314
292丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
单向 delete，其实从这个角度我们也可以构建出 update 死锁的场景。
在这个场景中，其实是 DML 之间的相互影响，前面介绍的都是单一的单向insert 和
2017-09-07T16:26:30.056079Z 14 [Note] InnoDB: *** (2) WAITING FOR THIS LOCE
Record lock, heap no 3 PHYSICAL RECORD: n_fields
    e x 2 1 u  0 5 9  1 1 
2017-09-07T16:26:30.056038Z 14 [Note] InnoDB:
(10,2)
insert into test (id,a） values
MySQL thread id 14,
TRANSACTION 1856, ACTIVE 44 sec inserting
根据死锁日志和上述的步骤我们可以还原一下死锁的过程，如下表7-16所示。
2017-09-07T16:26:30.056021Z
0:len 4; hex 00000002; asc
Record lock,
1:len
0:len
1：
0：
发起时间
lock struct(s)
3
T1
4；
hex 00000002; asc
in use
insert into test (id,a) values (10,2);
00000002;
申请S锁，进入等待队列
delete from test where a=2;
heap
X锁，record lock
begin;
会话
locked1
asc
2
14
X
表7-16
[Note]
.
InnoDB:
trx
1d
delete from test where a=2;
*** （2）HOLDS THE LOCK(S)：
等待X锁，record lock
1856
***
2; compact format; info
产生死锁，回滚
（2）
begin;
会话1
lock
TRANSACTION:
mode
TO BE GRANTED:
root update
ocalhost
bits
waiti
bits
test
32
nc
32
---
## Page 315
是否可行呢，我们再来看下面的场景。
RECORD LOCKS space id 8 page no 3 n bits 72 index ^PRIMARY^ of table ^test`. ^d
TRANSACTION 2645,
RECORD LOCKS space id
MySQL thread id 9, 0S thread handle 0x7f7fa3f46700, query id 253 1ocalhost
*** （1）WAITING FOR THIS LOCK TO BE GRANTED:
2017-09-08 00:02:34 7f7fa3f87700
2017-09-08 00:02:34 7f7fa3f87700InnoDB: transactions deadlock detected,
死锁日志如下：
完整模拟整个死锁的过程如下表7-17所示。
insert into d values(l);
插入一条数据：
CREATE TABLE
模拟这个过程，我们创建如下的表结构：
场景6：2条delete语句导致的死锁问题
到了这里，我们看到死锁的触发条件至少需要3条以上的DML 语句，那么2条 DML
发起时间
PRIMARY KEY
lock
WAIT
T4
3
2
T1
tables
int(11)
TRANSACTION:
select *from d where i=1 lock in share mode;
lock struct(s),
NOT NULL DEFAULT 'O',
`d
DEFAULT CHARSET=utf8mb4;
 ACTIvE 19 sec starting index read
 delete from d where i=1;
trx
heap
size
locked1
会话
Crx
1248,
id2645
表7-17
2 row lock(s)
lock
select *from d where i=1 lock in share mode;
 dumping detailed information.
modeSlocksrecbutnotgap
delete from d where i=1;产生死锁
PRIMARYoftabletest.d
begin;
会话2
not gap waiting
 root updating
root updating
---
## Page 316
294丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
其实业务场景是很受限的，比如一个论坛业务，你说对事务的要求高吗，对于一些日志
我认为我们传统理解上的业务类型就不是非常合理，很多基于 OLTP 和OLAP 的需求，
因为关系型选择了 MySQL，因为 MySQL 的业务特点而选择了对事务降维。
7.5
事务操作。
能建立主键就不要用唯一性索引。
方式可以降低锁粒度，对于并发操作的数据处理方式也更加统一。
方式做一些并发操作，殊不知这种操作的代价也是比较高的。
这在大多数场景下算是一件好事，说明我们对于事务的理解算是理性的；除此之外
对于事务的理解，我们接下来说一下事务降维，那就是如何尽可能避免一些无谓的
（5）尽量避免 SQL中的全表扫描操作，这类操作的加锁代价较高，很容易产生死锁。
（4）对于唯一性索引的使用要规范，唯一性索引导致的死锁场景相对是比较多的，
（3）对于死锁的检测，在线上可以关闭innodb_deadlock_detect选项。
（1）事务的粒度尽可能小，直接减小死锁发生的概率。
所以我们小结一下，死锁离我们其实很近，我们如何避免死锁问题呢？
这个过程其实是一个相对容易忽略的死锁场景，有很多业务同学总是习惯使用这种
根据死锁日志和上述的步骤我们可以还原一下死锁的过程，如下表7-18所示。
***WE ROLL BACK TRANSACTION （2)
（6）应用端不及时提交事务导致的死锁，建议设置为自动提交模式。
事务降维
发起时间
3
12
申请X锁，record lock，等待会话1释放
select *from d where i=1 lock in share mode;
delete from dwhere i=1;
获得S锁
begin;
会话2
表7-18
申请X锁，record lock，等待会话2释放
select *from d where i=1 lock in share mode;
delete from d wherei=1;
获得S锁
产生死锁
begin;
会话1
---
## Page 317
换为一种较为安全的操作，思路也是通过 rename 的方式来实现，唯一的差别是这种方式
理对于已有的业务流程是不可见的，如下图7-16所示。
的，rename 操作可以平滑的实现这个删除功能，如果在一定时间后确认可以清理，则数据清
操作，即把文件从 testdb 迁移到testdb_arch 下面；从权限上来说，testdb_arch 是业务不可见
考虑将 Drop 操作转换为一种可逆的 DDL 操作。
MySQL 层面目前没有相应的 Drop 操作恢复功能，除非通过备份来恢复，但是我们可以
可以极大地提高业务的处理效率，在数据库的接口调用上足够简单而且清晰可控。
在数据库层面了，使得数据库层很容易成为瓶颈，而且难以实现真正的分布式。
因为存储过程封装了大量的逻辑，难以调试，而且移植性不高，这样业务逻辑和性能压力都
处理方式太“重”了。
业数据库相比，功能和性能都有待验证，而且在目前轻量化的业务处理中，存储过程的
型、监控型数据的写入，使用事务也不大有用，而且它们也不属于OLAP的业务场景。
MySQL 中默认每个表有一个对应的 ibd 文件，
Drop 操作是默认提交的，而且是不可逆的，在数据库操作中都是跑路的代名词，
所以有一个明确的改进方向就是对于存储过程的改造,把它改造为 SQL 调用的方式，
。有些应用架构看起来是按照分布式部署的，但在数据库层的调用方式是基于存储过程，
Truncate 操作的危害比 Drop 还要大，我们在策略 2 的基础上可以把 truncate 操作转
降维策略3：Truncate 操作转换为安全的 DDL操作
降维策略2：Drop操作转换为可逆的DDL操作
对于新业务而言，使用存储过程显然不是一个好主意，MySQL 的存储过程和其他商
降维策略1：存储过程调用转换为透明的SQL调用
我总结了下面的一些降维策略，供大家参考。
简而言之，不是所有的业务场景需要事务支持，需要根据场景进行方案选择。
tdb
图7-16
，其实可以把 Drop 操作转换为一个 rename
table1
table1
第7章MySQL事务和锁|295
---
## Page 318
296丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
以把 insert 和 update 的操作模型统一为 insert 模型。
式来平滑地过渡，如果记录存在则进行 update 操作，但是语句接口都是 insert，这样就可
可能会因为重复的 insert 操作导致主键冲突的错误，我们可以使用 insert on duplicate 的方
在则进行 insert 操作，如果存在则进行 update 操作。如果不加事务，在高并发的情况下很
需要保留的1%的数据我们可以很快根据条件过滤补录，实现“移形换位”。
据的清理就是一个相对可控而且高效的方式了。
代价实在太高，我们可以有两类解决方案来把 Delete 操作转换为更为高效的方式。
出时间范围的数据就要清理掉了，而如果表的量级比较大的情况下，这种 Delete 操作的
改和补充，对于数据入口也可以更加动态、易扩展。
比如把一些动态添加的字段转换为一些配置信息。配置信息可以通过DML的方式进行修
保持有限的字段，如果要实现这些功能的扩展，其实完全可以通过配置化的方式来实现
化，比如一个游戏装备有20个属性，可能过了一个月之后就增加到了40个属性，这样
这种设计本身就是有问题的，更不用考虑性能了。究其原因，是因为业务的需求动态变
学都挺累，可以想象一个表有上百个字段，而且基本都是namel，name2.…name100，
需要额外处理表结构信息。
一来，所有的装备都有40个属性，不管用没用到，而且这种方式也存在诸多的余。
第一种是根据业务建立周期表，比如按照月表、周表、日表等维度来设计，这样数
：第二种方案是使用策略2的思路，比如一张2千万的大表要清理99%的数据，那么
我们在设计规范里面也提到了一些设计的基本要素，在这些基础上需要补充的是
有些业务中会有一种固定的数据模型，比如先根据id查看记录是否存在，如果不存
有些业务需要定期来清理一些周期性数据，比如表里的数据只保留一个月，那么超
降维策略5：Delete操作转换为高效操作
有些业务经常会有一种紧急需求，总是需要给一个表添加字段，搞得DBA和业务同
降维策略4：DDL操作转换为DML操作
降维策略6：Update操作转换为Insert操作
---
## Page 319
其对应的高可用率。
天，依此类推，可以得到更为精确的高可用影响时长，
的高可用性指标列表。
8.1
有的高可用方案。
官方的高可用方案InnoDBCluster做一些解读，最后引入consul的域名服务来对升级已
高可用都不能掉以轻心；若高可用受到影响，那么我们常说的运维价值就会黯然失色。
也没有终极方案，只有最适合的方案，无论系统的功能如何丰富，性能如何优良，对于
在高可用方向，我们会以经典的MySQL高可用方案MHA作为切入点，然后对MySQL
其实计算方法也比较简单，比如高可用性为99%，则不可用时长则为：1%*365=3.65
在高可用方向上，
高可用是整个业务建设中的核心和持续改进的地方；对于高可用来说，没有银弹，
可以做设计，切不可沉涵于设计。一贝聿铭
MySQL高可用方案
第8章
99.5-99.9%
高可用性指标
%666°66
%6'66
0.99
98-99.9%
高可用率
99.9999%
%666'66
%66°66
%06:66
99.50%
行业里也有一个基本标准和明确的衡量方式，下表8-1是一个基本
99%
MySQL 集群和高可用设计
表8-2
表8-1
NDB Cluster, Galera Cluster
下表8-2为MySQL高可用方案及
MySQL高可用方案
业务不可用时长
DRBD，MHA
31.5 seconds
5.25 minutes
52.56 minutes
8.76 hours
原生复制
1.83 days
3.65 days
SAN
双主模式
---
## Page 320
298丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
8.1.2MySQL 高可用方案的建议
热副本，在Master 故障时，将服务切换到热副本从而达到高可用的效果。
8.1.1MySQL 高可用方案概览
机房间数据切换。
在主设备提交块之前记录下来，类似共享存储解决方案。
别同步复制技术。它通过网卡将主服务器的每个块复制到另外一个服务器块设备上，并
共享，共享存储能够为数据库服务器和存储解耦。
MGR。
（5）基于磁盘复制方案：如 DRDB，DRDB 是一个以 linux 内核模块方式实现的块级
（4）基于共享存储方案：如SAN存储，这种方案可以实现网络中不同服务器的数据
使用NDB存储引擎实时备份余数据，官方出品
（2）引入 consul的域名管理，解决VIP方案带来的一些潜在瓶颈（域名的业务属性,
（1）行业内多活的设计目标不是多写，需要先实现跨机房的高可用容灾和计划内的
对于高可用方案的建议，我们需要明确以下的一些设计原则。
（3）分布式协议：基于分布式协议的高可用方案，
（2）MHA+多节点集群：基于MHA 的集群方案，通常和第三方方案组合实现。
（1）主从或主主半同步复制：通过依赖MySQL本身的复制，Master制作一个或多个
目前MySQL 高可用方案有很多，如图8-1所示。几种典型的高可用架构选型有：
·数据库对前端业务透明，业务不会因为数据库故障产生中断;
数据库的高可用架构应该具备如下特征：
在此基础上，我们来梳理一下 MySQL方向的高可用方案。
通过网络来实现块设备的数据镜像同步
因为数据缺失或者数据不一致而影响业务。
当业务因高可用机制发生数据库切换时，切换前后的数据库内容应当一致，不会
MariaDBGalera Cluster
MySQLCluster
GaleraCluster
DRBD