This issue is for discussing how to make the new GC (#8699) thread-safe. A GC
expert should check the arguments here. For background, see the elegant state
transition diagram in `src/gc.c`.
I'm assuming that garbage collection operates in stop-the-world mode, and for
now, that the mark/sweep phase is single-threaded. Each thread can have its
own thread-local `remset`, with occasional duplication across the sets because
of the race described below.
**Key question** : what state transitions can race against each other? If I
understand the GC correctly, the only racy transitions arise from a write
barrier for the same parent, and that transition is `GC_MARKED --> GC_QUEUED`,
which changes the low two bits of the memory location from 01 to 10. If this
is indeed the only racy transition, then a plain load, modify, plain store
sequence will suffice, since all racing participants will be attempting to
write the same value to the location. To be portable C11, we should use
relaxed atomic loads/stores instead of the current assignments into bitfields,
but that's a purist nitpick.
The possibility of a race will require lightening up on assertions that check
for duplicate enqueuing of roots. There will need to be a
`memory_order_acq_rel` fence between normal operation and garbage collection,
but that's probably already implied by synchronization between normal
operation and garbage collection.
**Possible problem** : `gc_wb_buf` appears to engaging in other transitions.
If so, which of these might race against each other? Are these transitions
always on different `gc_bits` than the ones affected by `gc_wb`?