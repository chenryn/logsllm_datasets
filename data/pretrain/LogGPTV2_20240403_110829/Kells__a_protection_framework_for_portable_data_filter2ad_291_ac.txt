ing data from untrusted hosts. This is done using the logic of secure
systems (LS2) as described by Datta et al. in [6]. Using LS2, we
describe two properties, (SEC) and (INT), and prove that they are
maintained by Kells. These two properties assert that the conﬁ-
dentiality and integrity of data on the Kells device are protected in
the face of an untrusted host. To prove that Kells enforces the two
properties, we ﬁrst encode the Kells read and write operations from
section 4.2 into the special programming language used by LS2.
These encodings are then mapped into LS2 and shown to maintain
both properties. Both properties are stated informally as follows.
1. (SEC) Any read request completed by Kells was made while
the host was in a known good state. This means that an at-
testation was received within a time window of ∆t from the
request or after the request without a host reboot.
2. (INT) Any write request completed by Kells was made while
the host was in a known good state with the same respect to
∆t as read.
5.1 Logic of Secure Systems
The logic of secure systems (LS2) provides a means for rea-
soning about the security properties of programs. This reasoning
allows the current state of a system to be used to assert properties
regarding how it got to that state. In the original work, this was
used to show that given an integrity measurement from a remote
host, the history of programs loaded and executed can be veriﬁed.
In the case of Kells, we use such a measurement to make assertions
about the reads and writes between the host system and Kells stor-
age device, namely, that (SEC) and (INT) hold for all reads and
writes. LS2 consists of two parts: a programming language used
to model real systems, and the logic used to prove properties about
the behavior of programs written in the language. This section be-
gins with a description of the language used by LS2, followed by
a description of the logic and proof system.
LS2 uses a simple programming language, hereafter referred to
as “the language,” to encode real programs. Any property provable
using LS2 holds for all execution traces of all programs written in
the language. Our aim is to encode Kells operation in the language
and formally state and prove its security properties using LS2. The
main limitation of the language (and what makes it feasible to use
for the veriﬁcation of security properties) is the lack of support for
control logic such as if-then-else statements and loops. Expressions
in the language resolve to one of a number of data types including
numbers, variables, and cryptographic keys and signatures. For
Kells operation, we use numeric values as timestamps (t) and data
(n), and pairs of these to represent data structures for attestations
and block requests. The expressions used for encoding values in
Kells is shown in Table 1.
The language encapsulates operations into actions, single in-
structions for modeling system-call level behavior. Program traces
are sequences of actions. There are actions for communication be-
tween threads using both shared memory and message passing. In
the case of shared memory, read l and write l, e signify the
reading and writing of an expression e to a memory location l. As
Kells adds security checks into these two operations, we introduce
language extensions sread req, att and swrite req, att, which
are covered in the following section. Finally, the actions send req
and receive are used to model communication with the host (H)
by the Kells device (D).
Moving from the language to the logic proper, LS2 uses a set
of logical predicates as a basis for reasoning about programs in
the language. There are two kinds of predicates in LS2, action
predicates and general predicates. Action predicates are true if the
speciﬁed action is found in a program trace. Furthermore, they
may be deﬁned at a speciﬁc time in a program’s execution, e.g.
Send(D, req) @ t holds if the thread D send the results of the re-
quest req to the host at time t. See the predicates in Table 1. Gen-
eral predicates are deﬁned for different system states either at an
instant of time or over a period. One example of such a predicate
is GoodState(H, (t, treq, (l, n)), (tatt, sig)), which we deﬁned to
show that the host system is in a good state with respect to a partic-
ular block request. The exact deﬁnition of GoodState is given in
the following section.
5.2 Veriﬁcation of Kells Security Properties
We verify that Kells operations maintain the (SEC) and (INT) prop-
erties in several steps. First, we rewrite the algorithms described in
section 4.2 using the above described language. This includes a
description about assumptions concerning the characteristics of the
underlying hardware and an extension of the language to support
the write queueing mechanism, along with the operational seman-
tics of these expressions as shown in Figure 8. We then formally
236Table 1: The subset of LS2 and extensions used to evaluate the Kells security properties.
Expression
att = (tatt, sig)
req = (t, treq, (l, n))
Feature
send req
receive
proj1 e
∗enqueue req
∗peek
∗dequeue
∗sread req, att
∗swrite req, att
Predicate
Send(D, req) @ t
Recv(D, req) @ t
Reset(H) @ t
∗Peek(D) @ t
∗SRead(req, att)
∗SWrite(req, att)
∗Fresh(t, treq, tatt)
∗GoodState(H, req, att)
Conﬁguration
σ
∗(h, t)
∗ρ
(enqueue)
(dequeue)
(peek)
(sread)
(swrite)
(sreadD)
(swriteD)
Use in Validation
An attestation consisting of wall clock arrival time tatt, and a signature, sig.
A block request consisting of a stored program counter t, a wall clock time treq, a disk location l and a value n.
Expressions
Language Features (∗ indicates an extension)
Use in Validation
Send the result of request req from Kells to the host.
Receive a value from the host.
Project the ﬁrst expression in the pair resulting from e. proj2 e projects the second expression.
Enqueue the request req in the Kells request queue.
Peek at the item at the head of the Kells device’s write request queue. If the queue is empty, halt the current thread
immediately.
Dequeue a block request from the Kells request buffer.
Perform a secure (attested) read.
Perform a secure (attested) write.
Predicates (∗ indicates an extension)
Use in Validation
The Kells disk controller (D) sent the result of request req to the host at time t.
The Kells disk controller (D) received the request req from the host at time t.
Some thread on the host machine (H) restarted the system at time t.
The Kells disk controller (D) peeked at the tail of the request queue at time t.
sread was executed in the program trace.
swrite was executed in the program trace.
The attestation received at time tatt was received recently enough to be considered fresh w.r.t. a request that
arrived at treq.
The host (H) attested a good state w.r.t. the request req. Meaning that the host was in a good state when the
request was received.
Conﬁguration (∗ indicates an extension)
Use in Validation
The store map of [location (cid:55)→ expression]. This is used in the semantics of read and write as well as the
write request queue.
The Kells requests queue, implemented as a pair of pointers to the memory store σ.
The program counter. This counter is initialized to t0 at reboot time and increments once for each executed action
in the trace.
ρ, (h, t), σ[t (cid:55)→ _], [x:= enqueue e; P ]I −→ ρ + 1, (h, t + 1), σ[t (cid:55)→ (e, ρ)], [P (0/x)]I
ρ, (h, t), σ[h (cid:55)→ e], [x:= dequeue; P ]I −→ ρ + 1, (h + 1, t), σ[h (cid:55)→ e], [P (0/x)]I
ρ, (h, t), σ[t (cid:55)→ e], [x:= peek; P ]I −→ ρ + 1, (h, t), σ, [P (e/x)]I
ρ, σ[l (cid:55)→ e], [x:= sread (t, treq, (l, n)), (tatt, sig)]I −→ ρ + 1, σ[l (cid:55)→ e], [P (e/x)]I
ρ, σ[l (cid:55)→ _], [x:= swrite (t, treq, (l, n)), (tatt, sig)]I −→ ρ + 1, σ[l (cid:55)→ e], [P (0/x)]I
if GoodState(H, (t, treq, (l, n)), (tatt, sig))
if GoodState(H, (t, treq, (l, n)), (tatt, sig))
ρ, σ[l (cid:55)→ e], [x:= sread (t, treq, (l, n)), (tatt, sig)]I −→ ρ + 1, σ[l (cid:55)→ e], [P (0/x)]I
ρ, σ[l (cid:55)→ _], [x:= swrite (t, treq, (l, n)), (tatt, sig)]I −→ ρ + 1, σ[l (cid:55)→ _], [P (0/x)]I
otherwise
otherwise
Figure 8: The operational semantics of the language extensions used to encode Kells operations. The program counter ρ applies to all actions
in the language.
state the two properties and show that they hold for the encoded
versions of Kells operations.
5.2.1 Encoding Kells Operation
The encoding of the read operation is shown in Figure 9 and the
write operation in Figure 10. The primary challenge in encoding
Kells operations using the language was the lack of support for
conditional statements and loops. Note that their addition would
also require an extension of the logic to handle these structures. To
alleviate the need for loops, we assume that the Kells device has a
hardware timer that can repeatedly call the program that performs
commits from the write request queue (KCommit in Figure 10).
We extend the language with three instructions for working with
the Kells write request queue: enqueue, dequeue and peek.
The ﬁrst two operations are straightforward and are assumed to be
synchronized with any other executing threads. The peek opera-
tion prevents a dequeued request from being lost by KCommit if a
237KRead: 1. att = read D.RAM.att-loc
2. (t, req) = receive
3. n’ = sread req,att
4. send n’
Figure 9: The encoding of the Kells read operation.
KWrite:
1. (t, req-pair) = receive
2. enqueue (t, req-pair)
KCommit: 1. att = read D.RAM.att-loc
2. (t, req) = peek
3. swrite req,att
4. dequeue
Figure 10: The encoding of the Kells write operation.
fresh attestation has not arrived after the request has been dequeued.
If the queue is empty, peek halts the current thread.
To capture Kells mediation, we add the checks for attestation
freshness and veriﬁcation into the semantics of the read and write
actions by introducing the sread and swrite actions. The se-
mantics of these two actions are shown in Figure 8. Both of these
operations take a block I/O request and an attestation as arguments.
A block request (t, treq, (l, n)) from the host consists of the pro-
gram counter at arrival time t, an absolute arrival time treq and a
sector offset and data pair.
The encoded version of the Kells read program (KRead) is shown
in Figure 9. We assume the existence of a running thread that is re-
sponsible for requesting new attestations from the host at a rate of
∆t and placing the most recent attestation at D.RAM.att-loc.
Lines 1. and 2. receive the attestation and request from the host
respectively. Line 3. invokes the secure read operation which runs
to completion returning either the desired disk blocks (sread) or an
error (sreadD). Line 4. sends the resulting value to the host.
The encoded version of the Kells write program (KWrite) is
shown in Figure 10. KWrite simply receives the request from the
host in line 1. and places it in the request queue at line 2. t contains
the value of ρ at the time the request was received. The majority
of the write operation is encoded in KCommit, which retrieves an
enqueued request, arrival time and the most recent attestation, and
performs an swrite. Recall that KCommit runs once in a thread
invoked by a timer since a timed loop is not possible in LS2.
5.2.2 Proof of Security Properties
The (SEC) and (INT) properties may be stated formally as shown
in Figures 11 and 12. Both properties ultimately make an assertion
about the state of a host at the time it is performing I/O using the
Kells device. GoodState, deﬁned in Figure 13, requires that an at-
testation (1) is fresh with respect to a given block I/O request and
(2) represents a trusted state of the host system. In the following
two deﬁnitions, ∆t represents the length of time during which an
attestation is considered fresh past its reception. Thus, GoodState
can be seen as verifying the state of the host w.r.t. a given I/O
request, independent of the state at any previous requests.
We use the predicate Fresh(t, treq, tatt) to state that an attesta-
tion is fresh w.r.t. a given request. The attestation is received at
wall clock time tatt and the request at time treq. Attestations are
received at the tth clock tick, as obtained using the program counter
ρ. As described above, Kells will check if a previous attestation is
still within the freshness parameter ∆t before stalling the read or
queueing the write. This is the ﬁrst case in the deﬁnition of Fresh
in Figure 14. If a request is stalled, the next attestation received is
veriﬁed before satisfying the request. In this case, a Reset must not
(SEC) (cid:96) ∀ (treq, (l, n)), (tatt, sig), t s.t.
(treq, (l, n)) = Recv(D) @ t
∧ (tatt, sig) = Recv(D)
∧ e = SRead(D, (t, treq, (l, n)), (tatt, sig))
⊃ GoodState (H, (t, treq, (l, n)), (tatt, sig))
Figure 11: Deﬁnition of Kells secrecy property.
(INT) (cid:96) ∀ (t, treq, (l, n)), (tatt, sig) s.t.
(t, treq, (l, n)) = Peek(D)
∧ (tatt, sig) = Recv(D)
∧ SWrite(D, (t, treq, (l, n)), (tatt, sig))
⊃ GoodState (H, (t, treq, (l, n)), (tatt, sig))
Figure 12: Deﬁnition of Kells integrity property.
occur between the receipt of the request and the check of the next
attestation.
Theorem 1. KRead maintains the (SEC) security property.
Proof.
Assume that the following holds for an arbitrary program trace.
∃ (treq, (l, n)), (tatt, sig), t, e s.t.
(treq, (l, n)) = Recv(D) @ t
∧ (tatt, sig) = Recv(D)
∧ e = SRead((t, treq, (l, n)), (tatt, sig))
We know that t is the value of ρ at the time the request was received
because we assumed Recv occurred in the trace at time t. By def-
inition of SRead, we have Fresh(t, treq, tatt), Verify((tatt, sig),
AIK(H)), and Match(v, criteria) all hold. Thus, GoodState
holds, and (SEC) is provable using LS2 with extensions. Because
KRead is implemented in the language with extensions, (SEC) holds
over KRead by the soundness property of LS2.
Theorem 2. KCommit maintains the (INT) security property.
Proof.
Assume that the following holds for an arbitrary program trace.
∃ (t, treq, (l, n)), (tatt, sig) s.t
(t, treq, (l, n)) = Peek(D)
∧ (tatt, sig) = Recv(D)
∧ SWrite((t, treq, (l, n)), (tatt, sig))
We know that t is the value of ρ at the time the request was received,
by (enqueue). By deﬁnition of SWrite, we have that Fresh(t, treq, tatt),
Verify((tatt, sig), AIK(H)), and Match(v, criteria) all hold. Thus,
GoodState, holds, giving that (INT) is provable using LS2 with
extensions. Because KCommit is implemented in the language
with extensions, (INT) holds over KCommit by the soundness
property of LS2.
6. EVALUATION
We performed a series of experiments aimed at characterizing
the performance of Kells in realistic environments. All experiments
were performed on a Dell Latitude E6400 laptop running Ubuntu
8.04 with the Linux 2.6.28.15 kernel. The laptop TPM performs
a single quote in 880 msec. The Kells device was implemented
using a DevKit 8000 development board that is largely a clone of
the popular BeagleBoard.4 The board contains a Texas Instruments
4Due to extreme supply shortages, we were unable to procure a
BeagleBoard or our preferred platform, a small form-factor Gum-
238Conﬁguration (∆t)