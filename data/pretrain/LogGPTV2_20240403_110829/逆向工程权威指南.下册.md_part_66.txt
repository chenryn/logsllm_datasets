add
DWCRD PTR [rbp-20], 1
check_nonce
cnp
D80RD PTR [rbp-20], ebx
①有关LOCK前级的详细说明，请参见本书附录A.6.1.
②请参见本书68.4节。
---
## Page 383
第92章OpenMP
859
1
-L17
jnp
-L14
.115:
mov
add
eax, 0
ecx, 1
.114:
Jnp
.L18
add
pop
rsp, 40
rbx
pop
rbp
ret
上述指令清晰地显示出：程序通过调用函数omp_ge_num_threadsO 和另—个函数omp_get_thread_num0 获
取当前线程的总数以及当前线程的编号，然后分割循环体。之后，它再运行check_nonce()。
GCC在代码中直接使用LOCKADD指令，而MSVC则是调用另一个DLL文件中的独立函数。
指令清单92.6GCC4.8.1
Lock add
DeoRo PTR checked [1p1 , 1
90V
ca11
ecx, DwoRD PTR checked [rip)
GOMP_critical_start 
A0E
Inu1
eaK, ecK
edx, 13
edx
sar
sar
nov
e8x,
eax,
31
eCx
sub
edx,
nov
eax,
eax
imu1
eax,
eax,
edx
sub
100000
ley
eax,
ecx,
test
ecx
jne
*xee
.17
eax
eax, DMoRD PTR checked[rip]
mov
mOV
e81,
ed1,
oFrSEr FLAT:.LC2 :*checked=td\n*
edx
ca11
eax, 0
printf
.17:
ca11
GOMP_critical_end
以GOMP开头的函数来自于 GNUOpenMPLibrary。您可在 GitHub下载到它的源文件（htps:/github.com
gc-mirorgcctree/master/libgomp）。，不过，微软的vcomp*.dll文件没有源代码可查。
---
## Page 384
第93章安腾指
令
就市场来讲，安腾（Itanium）处理器儿乎是失败产品。但是它的 Intel Itanium（IA64）架构非常值得
研究。乱序执行（OOE）CPU理念，侧重于让CPU重新划分指令的片段和顺序，再把重组后的指令组分
派到并联计算单位进行并行计算。而英特尔（Imtel）安腾架构推出的并行计算技术（Explicitly Parallel
InstructionCode，EPIC），则主张让编译器在编译的早期阶段实现指令分组。
厂商推出了配合这种并行计算技术的编译器。不过，这些编译器因异常复杂而颜受争议。
本章从Limux内核（3.2.0.4）摘录了部分IA64指令。这段程序用于实现某加密机制。其源代码如下所示。
指令清单93.1Linux kemel 3.2.0.4
fdefine TEA_ROUNDS
32
fdefine TEA_0ELTA
6964.296x0
static void tes_encrypt(struet crypto_tfn *tfn, u8 *dat, coest u8 *sre)
u32 y, 2, n,  = 0;
u32 k0, k1, k2, k3j
structtea_ctx *ctx = crypto_tfn_ctx(tfn) 1
sp 2o) = 1no， 29
y = le32_to_cgu(in[0]1
z = le32_to_cpu(in[1])
k0 = ctx->kEY[0];
k2 = ctx=>KET[2]
k1 = ctx=>KEr[1];
k3 = ctx=>KEr[3];
n = TEA_ROUNES;
while (n-- > 0) {
sum += TEA_DELTA;
f([x + (S > z)) =+ &
2 += [(y k≤r[1]
00AC144 06 01 84
adds z32 = 100,
// Load z
00B0108 98 00 20 10 10
r327
// ptr to
// r19=k2
ctx->KEY[3]
0086100 01 00 00 42 40
1d4 r19 = [r16]
aor r16=r0
// r0直是 0
0OBC|00 08 CA 00
nor.i r2 = ar.1c
// 保存1c
---
## Page 385
第93章安腾指令
861
02 3L .8 48 34 36 01 01 # 00 0L 5010000
1d4 r14 - [r34]
// 1oad y
0000108 00 00 00 01 00
89 3D C3 2612000
mov1 r17 - 0xFYFFPF98377989;: J/ TEA_08LTA
0006(50 01 20 20 20 00
nop-n 0
000C(F0 09 2A 00
1d4 r21 = [r8]
// c21=k0
008010A A0 00 06 10 10
1d4 ±20 = [x3]:
TE = 2[*xe T'A0W
Z=S0N00VS1//
// c20=k1
00E6120 01 80 20 20 00
1d4 x18 = [x32]
// r18=k3
008C|90 00 04 00
10300
0 T*dou
10.400
1oc_F0:
00F0109 80 40 22 00 20
add r16 = r16, z17
shladd r29 = r14, 4, r21
//r16=sum, r17TEA_DELTA
00F6|00 71 54 26 40 80
00FC[A3 70 68 52
extr,u r28 = r14, 5, 27
// ε14=y, r21=k0
0100103 F0 40 1C 00 20
add r30 - r16, x14
0106180 E1 50 00 40 40
xor r26 = r29, x30
add :27 = x28, x20:
// 20=k1
0130108 C8 6C 34 0F 20
010C(03 F1 3c 80
0116(F0 78 64 00 40 00
xor r25 = r27, r26:,
013C(00 00 04 00
nop-i 0;;
add r15 = r15, r25
// x15=z
0320100 00 00 00 01 00
09 62 9 50 TS 0819210
nop 0
012C1r1 98 4C B0
extr.u r24 = x15, 5, 27
0130|08 B8 3C 20 00 20
shladd z11 = z15, 4, r19
add r23 = r15, r16;
// r19=k2
0136(A0 C0 48 00 40 00
013c|00 00 04 00
add r10 = z24, r18
// r18=k3
0140108 48 28 16 0F 20
xor r9 = r10, r111
nop.1 0}1
0146160 B9 24 1E 40 00
00000.0010
xor r22 = r23, 9
00 10 00 00 00 TT10S10
nop-1 011
0156(E0 70 58 00 40 A0
add r14 = r14, r22
nop-n 0
0160109 20 3C 42 90 15
015C(A0 FF FF 48
br,cloop-sptk,few loc_r0::
0166100 00 00 02 00 00
st4 [r33] = r15, 4
// store 3
016C120 08 AA 00
nop-n 0
st4 [x33] - r14
mov.i ar.1c = r2:
J/ testore lc legister
0176100 00 00 02 00 80
0170111
00 38 42 90 11
Jf store y
017C108 00 84 00
br-ret-sptk,many b0::
nop-1 0
上述IA64指令很有特点。
首先，每3条指令构成一个指令字（instruction bumdles）。每个指令字的长度都是16字节即128位，
由1个5位的模版字段和3个41位微操作指令构成。IDA把这些指令组分为（6+6+4）字节的结构体，以
便于调试人员进行区分。
除了含有停止位（stop bit）的指令之外，这些由3条微操作指令构成的指令字，通常都由 CPU并行
处理。
据称，Imtel和HP的开发人员针对常见指令进行了模式划分，从面推出了指令字类型（即指令模版）
的概念—声明指令字运算资源的模版字段。CPU依此把指令字区分为12种基本类型（basicbundletypes），
基本类型又分为带停止位的版本和不带停止位的版本。举例来说，第0类指令字叫作MII类指令字，依次
由内存读写微操作指令（M）和两条整数运算的微操作指令（II）构成：最后一类指令，即0x1d类指令字，
又叫作MFB类指令字，依次由内存读写微操作指令（M）、浮点数运算微操作指令（F）、分支（转移）微
操作指令（B）构成。
如果编译器在指令字的指令位（instruction slot）上编排不了相应的微操作指令，那么它可能在这些指
令位上安插空操作指令nop。您可能注意到了，本文中的nop指令分为“nop，i”和“nop，m”。i代表该
nop指令占用整数（intcger）处理单元，属于整数运算型微操作指令：m代表它占用内存处理单元，属于
内存操作型微操作指令。在人工编写汇编语言时，编辑程序会自动插入相应的nop指令。
IA64 汇编指令的特性不止这些。该平台的指令字还可进行分组，构成指令组（instruction group）。指
令组可由任意个连续运算的指令字和一个含有停止位的指令字构成，是一个可并行执行的指令集合。在实
---
## Page 386
862
逆向工程权威指南（下册）
际应用中，安腾2处理器可以并行执行2路指令字，即同时处理6个微操作指令。
这就要求指令字中的各微操作指令和每个指令组的各指令字之间互不干扰，即不存在数据竞争。如果
存在数据竞争、形成脏数据，那么运算结果不可控（undefined）。
在IDA中，微操作指令之后的两个分号（：：）表示该指令有停止位。可见，[90-ac]及[b0-bc]分别
属于可并行执行的两个指令组，它们之间不存在互扰。下一组则是[b0-cc]。
另外，在10c处的指令，以及下一条位于110处的指令都有停止位。这就意味着CPU会在与其他指令
隔绝的情况下运行这两个指令，这种运行模式就和常规的CISC/复杂指令集的执行方式完全相同了、这是
由于后续指令，即110处的指令需要前一条指令的运行结果（R26）寄存器，所以不能并行处理这两条指
令。很明显，此时编译器不能找到更好的并行处理手段，无法更有效地利用CPU，所以在此添加了2个停
止位和多个NOP指令。虽说编译器在智能方面很不成熟，但是人工的IA64汇编编程也丝毫不轻松：程序
员要手动完成指令字分组的工作。
要图省事的话，程序员可以给每条指令添加停止位，不过这将大幅度地浪费安腾处理器的运算性能。
Linux 内核的源代码中，就有一些经典的、手写 IA64汇编代码。有兴题的读者可参考：hntp:/bxr.free
electrons.com/source/arch/ia64/lib/,
有关IA64 汇编语言人工编程的具体方法，可参见Mike Burrell 撰写的专业论著《Writing Efcient Itanium 2
Assembly Code》（http://yurichev.com/mirrors/RE/itanium.pdf）。有关汇编语言指令字的详细说明，请参见
Phrack Itanium   http://phrack.org/issues/57/5.html,
---
## Page 387
第94章8086的寻址方式
在MS-DOS及Win16（参见本书78.3节和53.5节）平台的16位应用程序中，我们可以看到程序指针由
两个16位值构成。这是什么情况？不得不说这是MS-DOS和8086的另一大怪并的特色，
虽然8086/8088属于16位CPU，但是它却有 20位的RAM地址空间（内存总线有20个引脚）：即，
它可直接寻址的存储空间只有IMB，这IMB的外部内存空间又被划分为RAM（最大640kB）、ROM、显
卡内存、EMS卡，等等。
16位的 8086/8088 CPU实际上由8080 CPU 发展面来。8080 CPU的地址空间只有16位，所以可直接
控制的内存只有64KB。大概是8086的设计者认为64KB空间不够用，面且8086还要兼容8080平台的程
序，所以就把20位/1MB的内存划分为若干个段使用。这就是早期玩具级的虚报内存技术的思路。而8086
的寄存器又只是16位寄存器，为了进行更大范围（20位）的寻址，它就得借助新推出的段寄存器。从此CPU
就有了CS、DS、ES 和SS 寄存器。20 位的内存指针由短寄存器和地址寄存器对（DS:BX）混合计算而来：
real_address = (segment _register <4) + address_register
举例来说，过去IBMPC兼容的主机，其显卡（EGA、VGA）的显存都只有64KB。要读写显存，就
要在某个段寄存器里（例如DS）写入0xA000。如此一米，程序就可使用DS:0~DS:0xFFFF访间整个显存。
虽然地址总线是 20位的，超过了 16位寄存器的表达范围，但是 CPU 可借助段寄存器毫无障碍地访问
0xA0000~0AFFFF。
程序还可能直接访问固定的内存地址，例如0x1234，但是操作系统加载应用程序到起始地址却不是固
定的。段寄存器的出现，解决了这种问题一它可由段寄存器进行相对寻址，应用程序不必关心自已到底
被加载到了什么RAM地址上。
实际上，MS-DOS系统下的指针由段地址和段内地址构成，可由两个16位的数值表示。20位地址总
线足以满足这种寻址方式的需要，不过，程序员就需要重新计算内存地址了：他们要不停地考虑空间和效
率的平衡，仔细规划数据栈的分配情况。
另外，8086的寻址方式决定了每个内存块不能大于64KB。
80286平台仍然继承了段寄存器（segmentregisters），只是用途不同而己。
在支持更大RAM的 80386 CPU间世时，市面上流行的仍然是 MS-DOS。更有一大批叫作 DOS extenders
的DOS粉丝在Windows系统间世以后继续坚守DOS阵地。他们甚至开发出各种像模像样的OS系统。这
种系统不仅实现了CPU保护模式的切换功能，而且大幅度地改进了内存API，可继续支持MS-DOS的应
用程序。著名的有：DOS/4GW（游戏巨作DOOM就是面向它编译的）、PharLap 和 PMODE。
在Win32之前，16位的Windows3.x仍然沿用了这种寻址方式
---
## Page 388
第95章基本块重排
95.1PGO的优化方式
PGO是Profile-guided optimization的缩写，中文有“配置文件引导的优化”等译法。经PGO方式优化
以后，程序中的某些基本块（basicblock）（所调基本块，指的是程序里顺序执行的语句序列。基本块由第
一个语句构成入口，由最后一个语句构成出口。在执行程序时，不可从入口以外进入该基本块（被跳入），
也不可从出口以外的地址跳出该基本块，）可能会被调整到可执行文件的任意位置。
很明显，函数中的程序代码存在执行频率的差异。例如，循环语句一类代码的执行频率必然很高，而
错误报告、异常处理之类代码的执行频率较低。
在使用PGO时，编译器首先会生成一种可记录运行细节的特殊程序。而后，研发人员通过试运行的手
段收集该程序的各项统计信息。最后，编译器根据这些统计信息对可执行文件进行调整和优化，把执行儿
率较小的基本块挪到其他地方。
在经PGO优化后的程序里，频繁执行的函数代码会被调整得更为紧凑。PGO优化了条件跳转的性能，
提高了CPU分支预测的准确率。这些特性均有助于提升程序性能。
Oracle是由Intel C++编译器生成的程序。本文收录了 Oracle中 oragenericl1.dll（Win32）的部分代码。
指令清单95.1
1orageneric11.dll(Win32)
_skgfaync
proc sear
pab1ie _skgfsync
:address 0x6030086A
d
66h
nop
push
ebp
nov
ebp, esp
nov
[go0+dqe] *xpe
test
edx, edx
J=
short 1oc_60300884
nov
test
eax, [edx+30h]
_VInfreq_skgfsync: write to log
eax, 400h
continve1
Jnz
nov
no/
eax,
[ebp+8]
mov
edx, [ebp+10h]
dvord ptr [eax], 0
and
eax, [edx+OFh]
ecx,[eax]
eax,
crp
ecx, 45726963h
)nt
error
j exit vith error
esp, ebp
pop
ebp
_skgfsync
endp
retn
:address 0x608953F0
---
## Page 389
第95章基本块里排
S98
_VInfreq_skgfsync:
AOW
eax, [edx]
Jz
test
eax,
continue
eax
nov
ecx, [ebp+10h]
push
nov
ecx,
X29
push
edx
[8+dqa]
push
ecx
push
offset
-.. : *skgfaync(se=0xx, ctx=0xx, Lov=0xkx) \n*
Puah
cal1
dvord ptr [eax]: write to log
dvord ptr [edx+4]
add
)P
esp, 14h
error:
continoe
n0V
dvord ptx [edx], 69AAh ; 27050 *funct1on ca11ed vith Inva1id F1B/Iov structure*
edx, [ebp+8]
nov
nov
nov
eax, [eax]
nov
dvord ptr [edx+B], 0FA4h : 4004
[edx+4], eax
poen
nov
dqa*d19
ebp
: ESD OF FUNCTION CHUNK POR _skgfsync
上述两个基本块的地址相距9MB左右。