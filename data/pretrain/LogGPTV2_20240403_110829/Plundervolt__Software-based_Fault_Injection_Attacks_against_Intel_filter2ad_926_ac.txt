-131mV
-132mV
-141mV
-146mV
crash at -161mV
B. Differences between CPUs with Same Model Number and
Temperature Dependencies
Another interesting observation is that the amount of under-
volting can differ between CPUs with the same model number.
We observed that the i3-7100U in an Intel NUC7i3BNH: i3-
7100U-A had a base voltage of 0.78 V at 1 GHz, and we
observed the ﬁrst fault at 0.68 V (over 100 000 000 iterations).
In contrast, two other (presumably slightly newer) CPUs i3-
7100U-B and i3-7100U-C had a base voltage of approximately
0.69 V at the same frequency and began to fault at 0.6 V.
However, the processor with the higher base voltage toler-
ated more undervolting overall: the system was stable under-
volting up to approximately -250 mV, while the other CPUs
crashed at around -160 mV. This indicates that for certain
CPUs, a higher base voltage is conﬁgured (potentially in the
factory based on internal testing).
Finally, we observed that the required undervolting to reach
a faulty state depends (as expected) on the CPU tempera-
ture. For example, while the i3-7100U-A reliably faulted at
approximately -250 mV with a CPU temperature of 47◦ C, an
undervolting of -270 mV was required to obtain the same fault
at 39◦ C. While we have not investigated this behaviour in
detail, we note that the temperature dependency and possible
differences in “stability” of the fault warrant further investiga-
tion. All our attacks were performed at room temperature and
caused no impediments.
C. Overvolting
The VID interface speciﬁcation limits the maximum voltage
to 1.52 V. According to the CPU datasheets [33], this voltage
is within the normal operating region. We experimentally
conﬁrmed that we could not
increase the voltage beyond
1.516 V (even with a higher value in the MSR), and we did not
observe any faults at 1.516 V at any frequency on i3-7100U-A.
IV. FROM FAULTS TO ENCLAVE KEY EXTRACTION
Having demonstrated the feasibility of fault injection into
SGX enclaves in Section III, we apply the undervolting tech-
niques to cryptographic libraries used in real-world enclaves.
A. Corrupting OpenSSL Signatures
We ﬁrst developed a simple proof-of-concept application
using OpenSSL in userspace. This application runs the mul-
tiplication loop from Section III until the ﬁrst fault occurs
(to make sure the system is in a semi-stable state) and then
invokes OpenSSL as follows:
system("openssl dgst -sha256 -sign
private.pem
>> log.txt");
test.c | openssl base64
Running at the standard voltage, this proof-of-concept out-
puts a constant signature. Running with undervolting (on the
i3-7100U-A at 1 GHz, -230 mV was sufﬁcient), this generated
incorrect, apparently randomly changing signatures. While we
have not exploited this fault
this
motivating example shows that undervolting can successfully
inject faults into complex cryptographic computations, without
affecting overall system stability.
to factor the RSA key,
B. Full Key Extraction from RSA-CRT Decryption/Signature
in SGX using IPP Crypto
The tcrypto API of the Intel SGX-SDK only exposes
a limited number of cryptographic primitives. However, the
developer can also directly call IPP Crypto functions when
additional functionality is needed. One function that is avail-
able through this API is decryption or signature generation
using RSA with the frequently used Chinese Remainder
Theorem (CRT) optimization. In the terminology of IPP
Crypto, this is referred to as “type 2” keys initialized through
ippsRSA_InitPrivateKeyType2(). We developed a proof-
of-concept enclave based on Intel example code [34].
Given an RSA public key (n, e) and the corresponding
private key (d, p q), RSA-CRT can speedup the computation
of y = xd
(mod n) by a factor of around four. Internally,
RSA-CRT makes use of two sub-exponentiations, which are
recombined as:
y = [q · cp] · xdp
p + [p · cq] · xdq
q
(mod n)
where dp = d (mod p − 1), dq = d (mod q − 1), xp =
x (mod p), xq = x (mod q), and cp, cq are pre-computed
constants.
RSA-CRT private key operations (decryption and signature)
are well-known to be vulnerable to the Bellcore and Lenstra
fault-injection attacks [9], which simply require a fault in
exactly one of the two exponentiations of the core RSA
operation without further requirements to the nature or location
of the fault. Assuming that a fault only affects one of the two
sub-exponentiations xdp
(mod p) and given the respective
faulty output y(cid:3), one can factor the modulus n using the
Bellcore attack as:
p
q = gcd (y − y(cid:3), n) , p = n/q
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1471
The Lenstra method removes the necessity to obtain both
correct and faulty output for the same input x by computing
q = gcd
(x(cid:3))e − y, n
instead.
(cid:2)
(cid:3)
As a ﬁrst step to practically demonstrate this attack for SGX,
we successfully injected faults into the ippsRSA_Decrypt()
function running within an SGX enclave on the i3-7100U-A,
undervolting by -225 mV for the whole duration of the RSA
operation. However, this resulted in non-exploitable faults,
presumably since both sub-exponentiations had been faulted.
We therefore introduced a second thread (in the untrusted
code) that resets the voltage to a stable value after one third
of the overall duration of the targeted ECALL. With this
approach, the obtained faults could be used to factor the 2048-
bit RSA modulus using the Lenstra and Bellcore attacks, and
hence to recover the full key with a single faulty decryption or
signature and negligible computational effort. An example for
faulty RSA-CRT inputs and outputs is given in Appendix B.
C. Differential Fault Analysis of AES-NI in SGX
Having demonstrated the feasibility of enclave key-
extraction attacks for RSA-CRT, we turn our attention to
Intel AES New Instructions (AES-NI). This set of processor
instructions provide very efﬁcient hardware implementations
for AES key schedule and round computation. For instance,
on the Skylake architecture, an AES round instruction has
a latency of only four clock cycles and a throughput of
one cycle per instruction1. AES-NI is widely used in cryp-
tographic libraries, including SGX’s tcrypto API, which
exposes functions for AES in Galois Counter Mode (GCM),
normal counter mode, and in the CMAC construction. These
crypto primitives are then used throughout the Intel SGX-
SDK, including crucial operations like sealing and unsealing
of enclave data. Other SGX crypto libraries (e.g., mbedtls
in Microsoft OpenEnclave) also make use of the AES-NI
instructions.
Our experiments show that the AES-NI encryption round
instruction (v)aesenc is vulnerable to Plundervolt attacks:
we observed faults on the i7-8650U-A with -195 mV under-
volting and on the i3-7100U-A with -232 mV undervolting.
The faults were always a single bit-ﬂip on the leftmost
two bytes of the round function’s output. Such single bit-ﬂip
faults are ideally suited for Differential Fault Analysis (DFA).
Examples of correct and faulty output are:
[Enclave] plaintext: 697DBA24B0885D4E120FFCAB82DDEC25
[Enclave] round key: F8BD0C43844E4B4F28A6D3539F3A73E5
[Enclave] ciphertext1: C9210B59333A07A922DE59788D7AA1A7
[Enclave] ciphertext2: C9230B59333A07A922DE59788D7AA1A7
[Enclave] plaintext: 4C96DD4E44B4278E6F49FCFC8FCFF5C9
[Enclave] round key: BE7ED6DB9171EBBF9EA51569425D6DDE
[Enclave] ciphertext1: 0D42753C23026D11884385F373EAC66C
[Enclave] ciphertext2: 0D40753C23026D11884385F373EAC66C
Next, we use these single-round faults to build an enclave
key-recovery attack against the full AES. We took a canonical
AES implementation using AES-NI instructions2 and ran it
1https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=
233&text= mm aesenc si128
2https://gist.github.com/acapola/d5b940da024080dfaf5f
in an enclave with undervolting as before. Unsurprisingly, the
probability of a fault hitting a particular round instruction is
approx. 1/10, which suggests a uniform distribution over each of
the ten AES rounds. By repeating the operation often enough
(5 times on average) we get a fault in round 8. An example
output for this (using the key 0x000102030405060708090a
0b0c0d0e0f) is the following:
[Enclave] plaintext: 5ABB97CCFE5081A4598A90E1CEF1BC39
[Enclave] CT1: DE49E9284A625F72DB87B4A559E814C4 <- faulty
[Enclave] CT2: BDFADCE3333976AD53BB1D718DFC4D5A <- correct
input to round 10:
[Enclave]
[Enclave]
1: CD58F457 A9F61565 2880132E 14C32401
2: AEEBC19C D0AD3CBA A0BCBAFA C0D77D9F
input to round
[Enclave]
[Enclave]
input to round
[Enclave]
[Enclave]
9:
8:
1: 6F6356F9 26F8071F 9D90C6B2 E6884534
2: 6F6356C7 26F8D01F 9DF7C6B2 A4884534
1: 1C274B5B 2DFD8544 1D8AEAC0 643E70A1
2: 1C274B5B 2DFD8544 1D8AEAC0 646670A1
In order to understand the fault (the following proﬁling is
not part of the actual attack and only needs to be done once),
we took both correct and faulty ciphertexts and decrypted them
round-by-round while comparing the intermediate states. The
result can be seen in the above output: Observe that byte one
(counting from the left in the rightmost word) in round 8
has changed from 0x66 to 0x3E. This faulty byte is actually
caused by an XOR with 0x02 (i.e., a single-bit ﬂip) for state
byte one after SubBytes in round 8. We established this by
simulating the AES invocation and trying different fault masks.
Equipped with this fault in round 8, we were able to apply the
differential fault analysis technique by Tunstall et al. [68] as
implemented by Jovanovic3:
Given a pair of correct and faulty ciphertext on the same
plaintext, this attack is able to recover the full 128-bit AES key
with a computational complexity of only 232+256 encryptions
on average. We have run this attack in practice and it only
took a couple of minutes to extract the full AES key from the
enclave, including both fault injection and key computation
phases. The steps to reproduce this attack with the above pair
of correct and faulty ciphertexts are given in Appendix D.
D. Faulting Intel SGX’s Key Derivation Primitives
Finally, we investigated whether we can successfully apply
our undervolting techniques to inject faults in Intel SGX’s
hardware-level key derivation instructions. These primitives
form the basis for local and remote attestation, as well as
sealing, and are indispensable to bootstrap trust in the SGX
ecosystem [1]. As with most of SGX’s trusted computing
base, complex key derivation functionality is implemented
in microcode [14] and, according to an Intel patent [47],
may leverage the processor’s native AES-NI instructions to
accelerate some of the cryptographic operations. Hence, our
hypothesis is that we can produce incorrect key derivations
through an Plundervolt attack. While this in itself does not
directly break SGX’s security objectives (the attestation will
3https://github.com/Daeinar/dfa-aes
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:04:35 UTC from IEEE Xplore.  Restrictions apply. 
1472
simply fail), faulty key derivations may, in turn, reveal in-
formation about the processor’s long-term key material that
should never be exposed to software. In this section, we
merely want to show that even complex microcode instructions
can be successfully faulted. We leave further exploration and
cryptanalysis of such faults as future work.
a) Faulting EGETKEY: Enclaves can make use of SGX’s
key derivation facility by means of a dedicated EGETKEY
instruction [1, 14]. This instruction derives an enclave-speciﬁc
128-bit symmetric key based on a hardware-level master
secret, which is burned into efuses during the processor manu-
facturing process and never directly exposed to software. The
exact key derivation algorithm implemented in the microcode
is largely undocumented, but one Intel patent [47] reveals that
AES-CMAC is used with a derivative string specifying, among
others, a software-provided KeyID and the calling enclave’s
identity. We furthermore conﬁrmed that Intel’s ofﬁcial SGX
software simulator4 indeed relies on AES-CMAC with a ﬁxed
128-bit secret for key derivations.
Our experimental setup consists of a minimal attacker-
controlled enclave that ﬁrst prepares a ﬁxed key request and
thereafter repeatedly derives the expected cryptographic key
using the EGETKEY assembly instruction. We expect the de-
rived key to be constant, since we made sure to always supply
the exact same KeyID meta data. However, our experiments
on the i3-7100U-C running at 2 GHz with -134 mV under-
volting showed that Plundervolt can reliably fault such SGX
key derivations. We provide several samples of incorrectly
derived keys in Appendix E. Interestingly, we noticed that
key derivation faults appear to be largely deterministic. That
is, for a ﬁxed KeyID, the same (wrong) key seems to be
produced most of the time when undervolting, even across
reboots. However, we also observed, at least once, that two
different faulty keys can be produced for the same KeyID, cf.
Appendix E.
b) Faulting EREPORT: SGX supports local attestation
through the EREPORT primitive. This instruction can be in-
voked by a client enclave to create a tagged measurement
report destined for another target enclave residing on the same
platform. For this, EREPORT ﬁrst performs an internal key
derivation to establish a secret key that can only be derived by
the intended target enclave executing on the same processor.
This key is thereafter used in the EREPORT microcode to create
a 128-bit AES-CMAC that authenticates the report data. We
experimentally conﬁrmed that Plundervolt can indeed reliably
induce faults in local attestation report MACs. We provide a
few samples of faulty report MACs in Appendix F. As with the
EGETKEY experiments above, we noticed that the faulty MACs
appear to be deterministic. However, faulty MACs do change
across reboots as EREPORT generates an internal random Key
ID on every processor cycle.
E. Faulting Other Intel IPP Crypto Primitives in SGX
In addition to the above key extractions from RSA-CRT and
AES-NI, we applied the undervolting technique to a number of
4https://github.com/intel/linux-sgx/blob/master/sdk/simulation/tinst/deriv.cpp#L90
enclaves using other tcrypto APIs. We successfully injected
faults into the following primitives among others:
AES-GCM In certain cases, faults in sgx_rijndael128GCM
_encrypt() only affect the MAC, aside from our results
on AES-NI in Section IV-C. Note that DFA is not directly
applicable to AES in GCM mode, since it is not possible
(if used correctly) to get two encryptions with the same
nonce and plaintext.
Elliptic Curves We also observed faults in elliptic curve
signatures (sgx_ecdsa_sign()) and key exchange
(sgx_ecc256_compute_shared_dhkey()).
This list of cryptographic fault targets is certainly not ex-
haustive. We leave the examination of fault targets for Plunder-
volt, as well as the evaluation of their practical exploitability
for future work, which requires pinpointing the fault location
and debugging IPP crypto implementations. There is a large
body of work regarding the use of faults for key recovery
that could be applicable once the effect of the fault for each
implementation has been precisely understood. Fan et al. [17]
provide an overview of fault attacks against elliptic curves,
while other researchers [18, 15] discuss faults in nonce-based
encryption modes like AES-GCM.
V. MEMORY SAFETY VIOLATIONS DUE TO FAULTS
In addition to the extraction of cryptographic keys, we show
that Plundervolt can also cause memory safety misbehavior in