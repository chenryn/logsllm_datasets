title:FreeSentry: protecting against use-after-free vulnerabilities due
to dangling pointers
author:Yves Younan
FreeSentry: Protecting Against Use-After-Free
Vulnerabilities Due to Dangling Pointers
Yves Younan
Talos Security Intelligence and Research Group
Cisco Systems
PI:EMAIL
Abstract—Use-after-free vulnerabilities have become an
important class of security problems due to the existence
of mitigations that protect against other types of vul-
nerabilities. The effects of their exploitation can be just
as devastating as exploiting a buffer overﬂow, potentially
resulting in full code execution within the vulnerable
program. Few protections exist against these types of
vulnerabilities and they are particularly hard to discover
through manual code inspection. In this paper we present
FreeSentry: a mitigation that protects against use-after-free
vulnerabilities by inserting dynamic runtime checks that
invalidate pointers when the associated memory is released.
If such an invalidated pointer is accessed, the program will
subsequently crash, preventing an attacker from exploiting
the vulnerability. When checking dynamically allocated
memory, our approach has a moderate performance over-
head on the SPEC CPU benchmarks: running with a
geometric mean performance impact of around 25%. It
has no overhead when deployed on widely used server
side daemons such as OpenSSH or the Apache HTTP
daemon. FreeSentry also discovered a previously unknown
use-after-free vulnerability in one of the programs in SPEC
CPU2000 benchmarks: perlbmk. This vulnerability seems
to have been missed by other mitigations.
I.
INTRODUCTION
Use-after-free vulnerabilities have become particu-
larly widespread and few mitigations exist to protect
against them, while even fewer are currently deployed
in production environments. The vulnerability class is
present in all types of applications and is the result of
Permission to freely reproduce all or part of this paper for non-
commercial purposes is granted provided that copies bear this notice
and the full citation on the ﬁrst page. Reproduction for commercial
purposes is strictly prohibited without the prior written consent of the
Internet Society, the ﬁrst-named author (for reproduction of an entire
paper only), and the author’s employer if the paper was prepared
within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23190
retaining pointers to memory that has been freed and
subsequently accessing these stale pointers. Exploiting
other vulnerabilities, such as buffer overﬂows, has be-
come harder due to mitigations [1]. This has resulted
in use-after-free vulnerabilities becoming a signiﬁcantly
more important target for exploitation in recent years.
A study [2] which surveyed vulnerabilities and cor-
responding exploits for Microsoft products from 2006-
2012 found that
there has been a signiﬁcant change
in the vulnerabilities that are found and exploited by
attackers due to the introduction of mitigations.
In
2011 and 2012, the most exploited memory errors for
Microsoft products were use-after-free vulnerabilities.
It was also the most exploited vulnerability for both
Windows Vista and Windows 7 and is the most common
type of memory error that occurs in Internet Explorer.
Typically, during their monthly patch-cycle, Microsoft
will release patches for Internet Explorer, ﬁxing several
use-after-free vulnerabilities. Given that Windows Vista
and Windows 7 (and Windows 8) are the Microsoft
operating systems that have the most mitigations enabled
to prevent successful exploitation of whole classes of
traditional vulnerabilities, it is no surprise that attackers
have shifted their attention to a vulnerability type that
currently lacks widespread mitigations.
Use-after-free vulnerabilities are very hard to spot
during manual code review as they require knowing the
pattern of allocation and deallocation that occurs during
a program’s execution. The vulnerability is a temporary
one, that only exists at particular points in time when
the stale pointer presents itself. The stale pointer can
be present for a long time in the program, but
the
actual vulnerability that occurs when the stale pointer
is used can occur several functions or hundreds or even
thousands of lines removed from the deallocation, further
complicating the review process. As such, this type of
vulnerability can easily be missed by even the most
other point the program allocates memory for an object
B that contains two function pointers and a character
array of 8 bytes. Depending on how the memory has
been reassigned, the resulting location for object B can
encompass all or part of the previous memory inhabited
by object A. However, when pointer p is accessed, the
program expects to access four integers. If these integers
overlap with the function pointers in object B,
then
attackers could be able to read or write these pointers
as if they were integers, potentially allowing them to
assign these integers values that would reference their
injected code. When the function pointers are executed
in object B, the injected code would be called instead
of the intended function. Figure 1 provides a graphical
representation of this issue.
lines 11 and 4 respectively. The issue at
Listing 1 shows an example program that suffers from
two use-after-free vulnerabilities. The vulnerabilities ex-
ist on lines 12 and 15 due to releasing of memory
at
line 12
is related to dynamically allocated memory, while the
issue at line 15 is due to a pointer to stack-allocated
memory which is freed automatically at line 4 when
the function returns. The vulnerabilities in this example
are simply for illustrative purposes to demonstrate our
approach in subsequent sections, they are not exploitable
due to the lack of memory reuse between the freeing of
memory and the use-after-free vulnerability. If memory
was reused as depicted in Figure 1, then an attacker could
potentially partially overwrite function ptr2 in object B
with the value 99 (the ASCII value of the character c)
at line 12.
Listing 1. A C program that is vulnerable to use-after-free vulner-
abilities
char ∗ r e t p t r ( ) {
A specialized case of the use-after-free vulnerability
is the double free vulnerability where memory is released
by calling free and that same object is then again freed
at some later point
in time. This potentially causes
the memory allocator to overwrite memory management
information stored in the free chunk, which could result
in an exploitable state. The only difference between a
double free and a regular use-after-free vulnerability is
where the dangling pointer is used. In a regular use-after-
free, the pointer can be used anywhere, while in the case
of the double free, the stale pointer is used together with
a call to free.
III. APPROACH
The core idea behind the protection that FreeSentry
offers is to link objects back to their pointers. When the
memory for the object in question gets freed, then the
pointers that still reference the object can be invalidated.
To do this, whenever a pointer is created or modiﬁed
to point to a new object, the address of the pointer is
registered as referring to our object. When the object is
freed, the freeing function will look up all the pointers
that point to the memory region inhabited by the object.
If these pointers still point to our object (they could
have been changed by unprotected code), the pointers are
invalidated. When a pointer is invalidated, it is made to
point to an invalid memory location which will cause the
program to crash if it attempts to dereference it. These
transformations are done automatically by FreeSentry, no
programmer intervention is required.
Listing 2 shows a transformation that is done to the
example vulnerable program in Listing 1.
Listing 2. Vulnerable C program protected with FreeSentry
char p , ∗q ;
q = &p ;
return q ;
}
i n t main ( ) {
char ∗a , ∗b ;
i n t
a = m a l l o c ( 1 6 ) ;
b = a +5;
f r e e ( a ) ;
b [ 2 ] = ’ c ’ ;
b = r e t p t r ( ) ;
∗b = ’ c ’ ;
}
i ;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
3
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
char ∗ r e t p t r ( ) {
l a b e l s t a c k ( ) ;
char p , ∗q ;
q = &p ;
r e g p t r (&q ) ;
i n v a l i d a t e s t a c k ( ) ;
return q ;
}
i n t main ( ) {
i ;
char ∗a , ∗b ;
i n t
a = m a l l o c ( 1 6 ) ;
r e g p t r (&a ) ;
b = a +5;
r e g p t r (&b ) ;
16
17
18
19
20
21
22
f r e e ( a ) ;
b [ 2 ] = ’ c ’ ;
b = r e t p t r ( ) ;
r e g p t r (&b ) ;
∗b = ’ c ’ ;
}
In the transformed program in Listing 2, the following
to an object, regptr()
occurs. When a pointer is set
is called with the address of the pointer, registering
the pointer as pointing to that speciﬁc object. When
malloc() gets called at line 12, FreeSentry intercepts it at
runtime, calls the original malloc() function to perform
the allocation and registers the memory bounds. When
the free() function is called, it is also intercepted, the
original free() function is called and the pointers that
have been registered via regptr() are invalidated. The
labelstack() and invalidatestack() functions perform the
same functions as the intercepted malloc() and free()
functions, but for stack-allocated memory.
FreeSentry does not modify the way that pointers are
represented; this means that the program will remain
compatible with existing code that may not have been
protected with the mitigation. This also allows develop-
ers to opt out of protection for speciﬁc functions. For
example, if a function has been veriﬁed manually to
be safe, then the function can opt out of registering its
pointers. Any memory that the unprotected function frees
will still trigger the pointer invalidation as pointers to
the freed memory could have been created elsewhere.
The same occurs for any memory it allocates: this will
still be labelled to allow pointers to the memory to be
tracked in other locations. Opting out would only be done
to improve performance. Section V-A2 discusses a case
study on how opting out of a minimal amount of code
can positively affect FreeSentry’s performance.
Our main approach is compatible with objects created
in all types of memory: whether dynamically allocated,
global, static or created on the stack. Of these types of
objects, global and static objects do not need to generally
be checked for potential use-after-frees because global
and static objects are only released when the program
terminates. However, having a pointer to stack space
that has been reclaimed for other purposes is possible,
as the example in Section II demonstrates. This type of
vulnerability is rare and can be more easily detected.
In fact some compilers will generate warnings when
returning a pointer to a stack variable. FreeSentry can run
with or without stack protection enabled and we expect
that the typical use-case of the mitigation will be to only
protect dynamically allocated memory.
A. Supporting data structures
The memory layout for the supporting data structures
is presented in Figure 2. The information that is regis-
tered about a pointer and where it refers to is called the
pointer registration information. To link the pointers to
objects, two lookup tables are used. The ﬁrst one, which
we call the object lookup table, is used to look up all
the pointer registration information based on the address
of an object. The second lookup table is used to look up
that same information based on the address of a pointer
and is called the pointer lookup table.
The free function uses the ﬁrst approach to look up
the information: when an object is freed, the pointer
registration information is found based on the object’s
memory location using the object lookup table. The code
that tracks the pointers uses the second approach: based
on the address of a pointer, we can ﬁnd the registration
information.
The ﬁrst way of looking up information could be
eliminated if we transformed the free() calls in programs
to pass the address of the pointer to the object being
freed instead of passing the address of the object by
value. However,
this approach would mean that any
calls to free() in unprotected code would no longer be
able to invalidate the pointers pointing to that memory.
Eliminating the second table is possible, since we can
access the value of the pointer being passed into the reg-
istration and can thus look up the registration information
based on the object. However this would signiﬁcantly
reduce performance as we would need to examine the
registration information of all pointers that refer to a
speciﬁc object to locate the desired pointer’s registration
information.
We also need to know the start of the object that
a pointer is referencing when adding that pointer to the
object’s lookup table. To do this we use a technique based
on the one described in [3]: a unique label is stored for
the memory area that an object inhabits when the object
is allocated, called a label. When we register a pointer
to an object, we look up the label of the object that the
pointer references. That label is then used with the object
lookup table to ﬁnd the pointer registration information,
to which we then add the new pointer. Objects are a
minimum size and can inhabit multiple memory areas
4
the old data will remain intact up to the smallest size (i.e.,
min(oldsize, newsize)). Due to this lack of guarantee, any
call to realloc() should invalidate all pointers to the old
object. However, our goal is to remain as unintrusive as
possible if there’s no potential for harm. As such, we will
only invalidate pointers when the new pointer returned
by realloc() is different from the old pointer passed into
the function. If the mitigation is used as a testing tool
to detect as many use-after-frees as possible, then it is
beneﬁcial to turn on invalidating of all the old pointers.
When realloc() allocates new memory, it copies the
old data over to the new memory location and subse-
quently frees the old memory location. Any pointers to
the old memory location are now stale. An example
of this type of use-after-free can be found in CVE-
2009-0749 [4]. FreeSentry found a vulnerability of this
type in the perlbmk benchmark which is part of the
SPEC CPU2000 benchmarks used to test performance in
Section V. The details of this vulnerability are discussed
in Section V-B1.
D. Stack protection
If stack protection is enabled, we perform labelling
of the stack frame when the function is entered and then
invalidate any pointers that refer to this stack frame when
leaving the function.
There are two complications to this approach. First
is the alloca() function, which allocates memory dynam-
ically on the stack and as a result causes changes to
the stack frame. To support this function, we ensure that