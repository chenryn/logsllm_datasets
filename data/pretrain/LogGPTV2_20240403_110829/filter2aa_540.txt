# Attacking .NET Applications at Runtime

**Jon McCoy - 2010**
**www.DigitalBodyGuard.com**

## Presentation Overview

### Topics Covered
- Techniques for exploiting closed-source .NET applications in innovative and dynamic ways.
- Introduction to new tools being released.
- Demonstration of the inherent vulnerabilities in .NET applications.

### Tools Provided
- A new Metasploit payload.
- Reconnaissance tools for analyzing the structure of .NET programs.
- Beta version of a decompilation tool designed to target .NET applications protected by wrappers or shells.

## Exploitation Objectives

- Gain unauthorized access to a target application.
- Compromise the graphical user interface (GUI).
- Subvert core application logic.
- Introduce new, unauthorized features.
- Access and manipulate the object structure.
- Establish a connection to the target.
- Inject custom code into the target.
- Infect the target's code with malicious modifications.
- Exploit flaws within the application.
- Attack the .NET Framework itself to compromise its integrity.

## How the Hack Works: Overview

1. **Connect to the Target Application**
   - Establish a connection using injection techniques.
   
2. **Access the Targetâ€™s Object Structure**
   - Navigate through the application using reflection.
   
3. **Modify Values and/or Objects**
   - Use reflection to modify objects and their properties.

### Normal vs. Hacked Object Runtime Structure

- **Normal Runtime Object Structure:**
  - GUI
- **Hacked Object Runtime Structure:**
  - GUI (with compromised elements)

### Sample Code: Hack Event

```csharp
// Example of using reflection to hack an event
public void HackEvent()
{
    // Reflection code to access and modify the event
}
```

### Demo: GUI_Spike

- **LEET a Program**
  - Video demonstration of the hacking process.
  - **Note:** The demo will not be live due to time constraints.

### Live Demo: Data Piggybacking

- **SQL Injection Example:**
  - `FIN < NULL`

## Special Thanks

- **James Devlin** - [www.codingthewheel.com]
- **Sorin Serban** - [www.sorin.serbans.net/blog]
- **Erez Metula** - Author of the paper: ".NET Reverse Engineering & .NET Framework Rootkits"

### Acknowledgments

- **Lynn Ackler** - For mentorship and training in forensics.
- **Daniel DeFreez** - For assistance with research and vulnerability analysis, including the Metasploit module.
- **Andrew Krug** - For advanced IT support and contributions.
- **Adam REDACTED** - For IT support, specifically hardware-related assistance.

## License

- **DotNetSpike and This Presentation** are licensed under the GNU General Public License - Version 3, 29 June 2007.
- This is an open-source presentation presented at Defcon 18, with tools released at Blackhat 2010.
- For more information, visit: [http://www.DigitalbodyGuard.com](http://www.DigitalbodyGuard.com)

## Steps to Perform an Attack

1. **Connect to an Object**
   - Establish a connection to the target object.
   
2. **Move Objects**
   - Use reflection to navigate and manipulate objects.
   
3. **Change Objects**
   - Modify object properties and values.
   
4. **Hack Events to Change Logic**
   - Alter event handlers to change application behavior.
   
5. **Wrap an Object to Replace Logic**
   - Encapsulate objects to replace their functionality with malicious code.