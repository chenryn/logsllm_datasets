DH+ECDH+PSK+RSA_CERT_OPT
DH+ECDH+PSK+RSA_CERT_REQ
ECDH_CERT_NONE
ECDH_CERT_OPT
ECDH_CERT_REQ
PSK
ECDH_CERT_NONE_DISC
ECDH_CERT_OPT_DISC
ECDH_CERT_REQ_DISC
PSK
ECDH_CERT_NONE
ECDH_CERT_OPT
ECDH_CERT_REQ
PSK
ECDH_CERT_NONE
ECDH_CERT_REQ
PSK
ECDH_CERT_NONE
ECDH_CERT_REQ
PSK
DH+ECDH+RSA_CERT_REQ
PSK
29
11
19
16
12
20
17
10
14
22
19
66
66
66
14
30
45
31
16
13
17
15
13
25
30
25
22
27
22
24
10
18
6
14
11
2
6
5
5
7
14
10
37
37
33
7
13
21
13
9
7
11
8
7
13
23
15
12
14
11
16
5
46276
36279
84896
87809
27811
34236
32389
21040
36258
49467
41638
70886
113508
94384
21303
36927
45087
35404
22646
25548
27352
27233
22983
30696
35747
27148
56697
29897
24403
45402
21611
Tests to last
Hypothesis
5921
2423
39513
43435
531
3108
2755
465
4119
9003
4359
25920
68792
50767
1859
7144
7006
3519
883
2394
2033
2804
1352
2292
5111
2713
3209
1746
2728
8392
584
Time
(mins)
3577
1141
2873
2722
545
677
658
445
303
404
338
1842
3067
2523
503
2518
2833
2243
1656
1607
1693
1718
1621
1162
1367
1065
1872
981
707
1851
656
the rule is GnuTLS 3.6.7, which competes with PionDTLS
for the highest number of tests, yet has relatively few states.
We found that conformance testing using Wp-based methods
generally struggled with this implementation. A central acti-
vity of Wp-based methods is to ﬁnd sequences of inputs that
uniquely identify the different states in the Mealy machine.
GnuTLS is designed to provide minimally informative output
to inputs that deviate from the happy ﬂow: in most cases, the
implementation simply discards such inputs and stays silent
(this can be seen in e.g., Fig. 3). As a consequence, the input
sequence which uniquely identiﬁes a state can be very hard
to ﬁnd, and can even be too long to be discovered during
learning or conformance testing.
Learning time. Model learning experiments completed
within one day on average, except for four implementations.
Among these, PionDTLS and Scandium take considerably lon-
ger due to large models (66 states for PionDTLS). Scandium
and GnuTLS take longer due to high response timeout values,
motivated by very long processing times for messages such as
ClientHello (400 and 200 msecs respectively). This highlights
the importance of message-speciﬁc timeouts, as suggested in
Section 5.3.
USENIX Association
29th USENIX Security Symposium    2531
Figure 3: Model of a GnuTLS 3.6.7 server with client certiﬁcate authentication optional. Blue edges capture the ﬂows of regular
handshakes: dashed and dashed-dotted edges indicate the handshake expected when client certiﬁcate authentication is required,
respectively when it is disabled. A dotted brown edge indicates a transition leading to a handshake restart.
7 Analysis of the Resulting State Machines
This section provides an analysis of the models against the
speciﬁcation. We ﬁrst give an overview of a DTLS state ma-
chine, using the model learned for GnuTLS as an example.
We explain the strategies employed to identify non-compliant
behaviors using the learned models. We then outline the non-
compliant behaviors observed in the tested libraries. Finally,
we present library-speciﬁc ﬁndings and vulnerabilities, inclu-
ding the client authentication bypass in JSSE.
7.1 Description of a GnuTLS State Machine
Displaying models is challenging due to the large number of
inputs and states. We therefore prune the models via the fol-
lowing strategies. We ﬁrst use the Other input as replacement
for inputs not captured in a visible transition which lead to the
same state and output. Inputs and outputs are then replaced by
their corresponding shorthands shown in Table 1. Finally, we
place transitions connecting the same states on single edges.
Due to page limitations, this section only includes models for
GnuTLS 3.6.7, JSSE 12.0.2 and PionDTLS. All other models
can be accessed via the learning setup’s website.
Figure 3 shows a model generated for the GnuTLS 3.6.7 li-
brary and can be interpreted as follows. The server starts from
the initial state, which is always state 0 on the state machine.
On receiving ClientHello(PSK) it generates HelloVerify-
Request and transitions to state 2. In response to a second
ClientHello(PSK), it generates the messages ServerHello and
ServerHelloDone and transitions to state 3. Continuing the
PSK handshake ﬂow, on receiving ClientKeyExchange(PSK),
ChangeCipherSpec and Finished, the server generates No-
Resp (i.e., nothing) for the ﬁrst two messages, and Change-
CipherSpec and Finished for the third. In this interaction, the
server traverses the states 4 and 5, ending in 6.
The GnuTLS server was conﬁgured to use PSK- and RSA-
based cipher suites. This is reﬂected in the model’s input
alphabet, which includes ClientHello and ClientKeyExchange
for both PSK and RSA. Client certiﬁcate authentication was
set to optional. In this situation, the server makes a client cer-
tiﬁcate request, as indicated by the CertReq label on the edge
from state 2 to state 7 in Fig. 3. The server does not require
2532    29th USENIX Security Symposium
USENIX Association
client certiﬁcates, hence handshakes can be completed even
if the client chooses to send an EmptyCertiﬁcate by following
states 0, 2, 7, 11, 4, 5 and 6; or no certiﬁcate at all by following
states 0, 2, 7, 4, 5 and 6. Finally, if the client authenticates
with a Certiﬁcate message, the handshake traverses states 0, 2,
7, 9, 10, 4, 5 and 6. Note that client certiﬁcate authentication
is implicitly disabled for cipher suites which do not support
it, such as PSK-based ones.
Besides states traversed by handshake ﬂows, the model
contains three other states: states 1, 8 and 12. State 1 is a
sink state, which is a state the model cannot transition out of.
States 8 and 12 are superﬂuous states, since they are not ne-
cessary for implementation correctness. They are a byproduct
of the implementation allowing handshake restarts, which are
possible from these states by transitions to state 2.
Identifying Irregular Behaviors
7.2
To identify potentially vulnerable behaviors using learned
models, we employ the following strategies.
First, we inspect models for irregular handshake ﬂows (ir-
regular handshakes for short). These are ﬂows that lead to
handshake completion, indicated by a successfully transmit-
ted Finished from the server, but may omit, repeat or change
the order of handshake messages, relative to regular ﬂows
permitted by the speciﬁcation. To aid analysis of larger mo-
dels (such as those of JSSE or PionDTLS) we developed a
script to automatically remove states from which a hands-
hake cannot be completed (i.e., it is no longer possible to
receive a Finished from the server). On the reduced models,
handshake-completing ﬂows can be identiﬁed much more ea-
sily; this is showcased by Figs. 4 and 5. Using this approach,
we uncovered bugs like early Finished, wherein a handshake
is completed by omitting the ChangeCipherSpec message.
We refer to Sections 7.4 to 7.6 for descriptions of such bugs
for JSSE, Scandium and PionDTLS. Note that the script used
to reduce models comes packaged with our learning setup.
Second, we look for outputs from the server which do not
conform to the speciﬁcation. Of particular interest are irre-
gular ServerHello responses, which are not part of irregular
handshakes (otherwise the ﬂows would have been detected
and analyzed by our ﬁrst strategy). We investigate whether
a handshake may be completed using these responses. To
that end, we probe the SUT’s reaction after such responses
to manually-crafted messages (typically ClientKeyExchange,
ChangeCipherSpec and Finished), whose message sequen-
ce/epoch numbers differ from what our MAPPER generates.
Doing so, we were able to complete handshakes in TinyDTLS
using invalid epoch numbers; see Section 7.8. Also of interest
are Alert outputs, as they shed light on how the system pro-
cesses unexpected inputs. For example, Alert(DecryptError)
suggests the SUT is not able to decrypt a message. Hence,
Alert(DecryptError) is only expected as a response to an en-
crypted message, and not to an unencrypted message, as was
Table 4: Summary of irregular behaviors detected in the tested
libraries. The message_seq column summarizes the correct
usage of these numbers.  indicates that the implementation
ﬁnished the handshake with an invalid message_seq. The
third column summarizes the cookie computation correctness.
The last column depicts whether implementations correctly
validate the handshake message sequence.
Library
GnuTLS
JSSE 9.0.4
JSSE 12.0.2
MbedTLS
NSS
OpenSSL
PionDTLS
Scandiumold
Scandiumnew
TinyDTLS
WolfSSL
Validation of Cookie Message
message_seq
order
comp.
numbers
veriﬁcation




