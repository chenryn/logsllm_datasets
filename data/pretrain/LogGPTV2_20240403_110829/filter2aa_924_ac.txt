### 文本优化

**PentesterAcademy.com**

#### Libsrtp: text2pcap 帮助信息
- `text2pcap -t "%M:%S." -u 10000,100001 - < Normal_Call_two_parties_Decrypted.pcap`
  - `-t "%M:%S."`：将数据包前的文本视为日期和时间。
  - `%M:%S`：指定时间格式。
  - `-u 10000,100001`：使用既定的源、目的端口预先设置UDP数据包头部。

#### Libsrtp: 解密RTP流量
- 解密后的流量
- 解码为RTP
- 分析解码后的RTP流
- 播放解密后的通话

#### 其他重要部分
- DTMF
- 短消息 (SMS)
- 导出通话

#### RTP与DTMF
- **SIP消息**

#### PCAP2WAV: 在线工具
- **上传PCAP并下载Wav**
  - 使用audacity显示Wav文件
- **离线脚本**
  - Bash脚本用于从VoIP通话中提取音频
  - 输出文件为`output.wav`
  - 使用`tshark`和`sox`
  - GitHub: [https://gist.github.com/avimar/d2e9d05e082ce273962d742eb9acac16](https://gist.github.com/avimar/d2e9d05e082ce273962d742eb9acac16)

#### PCAP2WAV: 帮助信息
- 安装`tshark`和`sox`
- 运行工具
- 目录内容
  - 运行脚本前的目录内容
  - 运行脚本后的目录内容

#### VoIPShark
- **一系列Wireshark插件的集合**
  - 解密VoIP通话
  - 导出通话音频
  - 流量总览（扩展，SMS，DTMF）
  - 基本VoIP攻击
  - 使用与Wireshark相同的GPL
  - GitHub: [github.com/pentesteracademy/voipshark](https://github.com/pentesteracademy/voipshark)

#### VoIPShark: 开发背景
- 传统分析过程繁琐且复杂
- 大量工具
  - 需要编译，设置过程耗时
  - 使用起来相对复杂
  - 依赖用户，容易出错
- 解密过程中无法保留时间戳、IP地址等
- 不支持实时流量显示

#### 为什么使用Wireshark插件？
- 即插即用
- 插件来源
  - Lua脚本
  - 编译的C/C++代码
- 利用Wireshark的强大功能
- 独立于操作系统
- 牢固的用户基础

#### Wireshark插件类型
- **解析器**
  - 解析载荷数据
  - 解析对应部分的协议并把载荷传递给下一个解析器
  - **链式解析器**
    - 从前一解析器获取数据，处理对应部分后，传递给下一解析器

#### VoIPShark: 解析链中的钩子
- **总体架构**
- **解密流程**

#### 插件地址
- **位置**: Help > About Wireshark > Folders
- **Windows** 和 **Ubuntu**

#### 解密SRTP
- **SRTP数据包**
- **开启自动解密**
- **解密后的SRTP (RTP)**

#### VoIPShark: 导出通话音频
- **指定位置和文件名**
- **导出流**

#### SIP信息收集
- **DTMF**
- **扩展**
- **RTP数据包传送**
- **SIP认证导出**
- **服务器和代理**
- **消息**

#### VoIP攻击检测
- **暴力破解**
- **Invite泛洪攻击**
- **报文泛洪**
- **中间人攻击**
- **未认证用户**

#### 演示
- **提问环节**

- **GitHub**: [github.com/pentesteracademy/voipshark](https://github.com/pentesteracademy/voipshark)
- **联系邮箱**: EMAIL

希望这些优化能帮助你更好地传达信息。如果还有其他需要改进的地方，请告诉我！