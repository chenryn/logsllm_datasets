    * 达到 nodefs阈值时，按照总磁盘使用驱逐（local volume + logs + 容器可写层）
除了驱逐之外，Kubelet 还支持一系列的容器和镜像垃圾回收选项，它们未来将会被驱逐替代：
| 垃圾回收参数 | 驱逐参数 | 解释 |
| :--- | :--- | :--- |
| `--image-gc-high-threshold` | `--eviction-hard` 或 `--eviction-soft` | 现存的驱逐回收信号可以触发镜像垃圾回收 |
| `--image-gc-low-threshold` | `--eviction-minimum-reclaim` | 驱逐回收实现相同行为 |
| `--minimum-image-ttl-duration` |  | 由于驱逐不包括TTL配置，所以它还会继续支持 |
| `--maximum-dead-containers` |  | 一旦旧日志存储在容器上下文之外，就会被弃用 |
| `--maximum-dead-containers-per-container` |  | 一旦旧日志存储在容器上下文之外，就会被弃用 |
| `--minimum-container-ttl-duration` |  | 一旦旧日志存储在容器上下文之外，就会被弃用 |
| `--low-diskspace-threshold-mb` | `--eviction-hard` or `eviction-soft` | 驱逐回收将磁盘阈值泛化到其他资源 |
| `--outofdisk-transition-frequency` | `--eviction-pressure-transition-period` | 驱逐回收将磁盘压力转换到其他资源 |
## 容器运行时
容器运行时（Container Runtime）是 Kubernetes 最重要的组件之一，负责真正管理镜像和容器的生命周期。Kubelet 通过 [容器运行时接口（Container Runtime Interface，CRI\)](../../extension/cri/) 与容器运行时交互，以管理镜像和容器。
Container Runtime Interface（CRI）是 Kubernetes v1.5 引入的容器运行时接口，它将 Kubelet 与容器运行时解耦，将原来完全面向 Pod 级别的内部接口拆分成面向 Sandbox 和 Container 的 gRPC 接口，并将镜像管理和容器管理分离到不同的服务。
![](../../.gitbook/assets/cri%20%284%29.png)
CRI 最早从从 1.4 版就开始设计讨论和开发，在 v1.5 中发布第一个测试版。在 v1.6 时已经有了很多外部容器运行时，如 frakti 和 cri-o 等。v1.7 中又新增了 cri-containerd 支持用 Containerd 来管理容器。
CRI 基于 gRPC 定义了 RuntimeService 和 ImageService 等两个 gRPC 服务，分别用于容器运行时和镜像的管理。其定义在
* v1.14 以以上：[https://github.com/kubernetes/cri-api/tree/master/pkg/apis/runtime](https://github.com/kubernetes/cri-api/tree/master/pkg/apis/runtime)
* v1.10-v1.13: [pkg/kubelet/apis/cri/runtime/v1alpha2](https://github.com/kubernetes/kubernetes/tree/release-1.13/pkg/kubelet/apis/cri/runtime/v1alpha2)
* v1.7-v1.9: [pkg/kubelet/apis/cri/v1alpha1/runtime](https://github.com/kubernetes/kubernetes/tree/release-1.9/pkg/kubelet/apis/cri/v1alpha1/runtime)
* v1.6: [pkg/kubelet/api/v1alpha1/runtime](https://github.com/kubernetes/kubernetes/tree/release-1.6/pkg/kubelet/api/v1alpha1/runtime)
Kubelet 作为 CRI 的客户端，而容器运行时则需要实现 CRI 的服务端（即 gRPC server，通常称为 CRI shim）。容器运行时在启动 gRPC server 时需要监听在本地的 Unix Socket （Windows 使用 tcp 格式）。
目前基于 CRI 容器引擎已经比较丰富了，包括
* Docker: 核心代码依然保留在 kubelet 内部（[pkg/kubelet/dockershim](https://github.com/kubernetes/kubernetes/tree/master/pkg/kubelet/dockershim)），是最稳定和特性支持最好的运行时
* OCI\(Open Container Initiative,开放容器标准\)容器运行时：
  * 社区有两个实现
    * [Containerd](https://github.com/containerd/cri)，支持 kubernetes v1.7+
    * [CRI-O](https://github.com/kubernetes-incubator/cri-o)，支持 Kubernetes v1.6+
  * 支持的 OCI 容器引擎包括
    * [runc](https://github.com/opencontainers/runc)：OCI 标准容器引擎
    * [gVisor](https://github.com/google/gvisor)：谷歌开源的基于用户空间内核的沙箱容器引擎
    * [Clear Containers](https://github.com/clearcontainers/runtime)：Intel 开源的基于虚拟化的容器引擎
    * [Kata Containers](https://github.com/kata-containers/runtime)：基于虚拟化的容器引擎，由 Clear Containers 和 runV 合并而来
* [PouchContainer](https://github.com/alibaba/pouch)：阿里巴巴开源的胖容器引擎
* [Frakti](https://github.com/kubernetes/frakti)：支持 Kubernetes v1.6+，提供基于 hypervisor 和 docker 的混合运行时，适用于运行非可信应用，如多租户和 NFV 等场景
* [Rktlet](https://github.com/kubernetes-incubator/rktlet)：支持 [rkt](https://github.com/rkt/rkt) 容器引擎
* [Virtlet](https://github.com/Mirantis/virtlet)：Mirantis 开源的虚拟机容器引擎，直接管理 libvirt 虚拟机，镜像须是 qcow2 格式
* [Infranetes](https://github.com/apporbit/infranetes)：直接管理 IaaS 平台虚拟机，如 GCE、AWS 等
## 启动 kubelet 示例
```bash
/usr/bin/kubelet \
  --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
  --kubeconfig=/etc/kubernetes/kubelet.conf \
  --pod-manifest-path=/etc/kubernetes/manifests \
  --allow-privileged=true \
  --network-plugin=cni \
  --cni-conf-dir=/etc/cni/net.d \
  --cni-bin-dir=/opt/cni/bin \
  --cluster-dns=10.96.0.10 \
  --cluster-domain=cluster.local \
  --authorization-mode=Webhook \
  --client-ca-file=/etc/kubernetes/pki/ca.crt \
  --cadvisor-port=0 \
  --rotate-certificates=true \
  --cert-dir=/var/lib/kubelet/pki
```
## kubelet 工作原理
如下 kubelet 内部组件结构图所示，Kubelet 由许多内部组件构成
* Kubelet API，包括 10250 端口的认证 API、4194 端口的 cAdvisor API、10255 端口的只读 API 以及 10248 端口的健康检查 API
* syncLoop：从 API 或者 manifest 目录接收 Pod 更新，发送到 podWorkers 处理，大量使用 channel 处理来处理异步请求
* 辅助的 manager，如 cAdvisor、PLEG、Volume Manager 等，处理 syncLoop 以外的其他工作
* CRI：容器执行引擎接口，负责与 container runtime shim 通信
* 容器执行引擎，如 dockershim、rkt 等（注：rkt 暂未完成 CRI 的迁移）
* 网络插件，目前支持 CNI 和 kubenet
![](../../.gitbook/assets/kubelet%20%283%29.png)
### Pod 启动流程
![Pod Start](../../.gitbook/assets/pod-start%20%281%29.png)
### 查询 Node 汇总指标
通过 Kubelet 的 10255 端口可以查询 Node 的汇总指标。有两种访问方式
* 在集群内部可以直接访问 kubelet 的 10255 端口，比如 `http://:10255/stats/summary`
* 在集群外部可以借助 `kubectl proxy` 来访问，比如
```bash
kubectl proxy&
curl http://localhost:8001/api/v1/proxy/nodes/:10255/stats/summary
```
* 或者通过 Node 代理来访问
```sh
kubectl get --raw /api/v1/nodes//proxy/stats/summary
```
## Kubelet API
[Kubelet API](https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/server/server.go#L93-L102) 可以通过其暴露的端口或者 `kubectl get --raw /api/v1/nodes/$NODE/proxy/` 来访问，常用的几个 API 包括：
* `/metrics` 查询 Kubelet 度量
* `/metrics/cadvisor` 查询 Cadvisor 度量（包含节点和容器的度量）
* `/metrics/resource` 查询资源使用度量（包含CPU和内存）
* `/metrics/probes` 查询探针度量
* `/stats/summary` 查询节点和Pod汇总指标
* `/pods` 查询Pod列表
* `/logs` 查询节点或容器日志
* `/containerLogs/{podNamespace}/{podID}/{containerName}` 查询容器日志
* `configz` 查询Kubelet配置
* `/run`, `/exec`, `/attach`, `/portForward` 用于 apiserver 跟 kubelet 协同完成交互式API。