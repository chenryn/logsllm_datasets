required to execute the MITM attack incurs a noticeable delay until
the web browser is able to display the web page. While it may be
realistic to assume that a user waits for, say, 30 seconds until a web
page has loaded (which is long, but not entirely unrealistic for slow
connections, like for instance in public WiFi networks at airports),
it becomes increasingly unrealistic with increasing duration of the
attack (unless one makes additional assumptions, like that the user
works in a different browser tab until the web page has loaded).
However, note that there are also applications of TLS where no
human user is involved. TLS-protected machine-to-machine com-
munication is, for instance, common for Web Services.
In such
applications, we do not have as strict constraints on the running
time of the attack as in settings involving human users, because a
client machine may allow for a more generous timeout.
Therefore we also analyzed OpenSSL on Ubuntu 14.04 as a TLS
client. It turns out that even after 7700 seconds no timeout of the
TLS connection occurs, which could allow for more realistic at-
tacks in settings with machine-to-machine communication that do
not involve human users directly.
Avoiding TCP timeouts. Note that the timeout of 7700 seconds in
OpenSSL is larger than the TCP connection timeout, which de-
faults to 7200 s in most operation systems (Linux, OS X, and Win-
dows), including the system used for our tests. We were able to in-
crease the TCP connection timeout with the following trick. After
receiving the ClientHello message, the MITM attacker trans-
mitted the response (in particular the rather large Certificate
message) byte-by-byte over the TCP connection, with a short delay
after each byte. This trick avoided the TCP connection timeout.
7.2 Attacks with “Imperfect” Oracle
The consideration of attacks with a “perfect” oracle in the pre-
vious section is of course idealized. Even though it is not impos-
sible to ﬁnd such oracles in practice (see [4] for an example), it
is relatively unlikely that such oracles are found very often. The
analysis in Section 7.1, Table 1, shows that an attack duration of
30 seconds per 1000 server requests is a reasonable estimate for
Bleichenbacher-like attacks in our setting. Using this result, we
can now estimate the attack duration in cases where a weaker, “im-
perfect” Bleichenbacher oracle is given.
Bardou et al. [4] describe an optimized variant of Bleichenbacher’s
algorithm, and analyze this algorithm with different “imperfect” or-
acles. The choice of oracles considered in [4] is motivated by ex-
amples of practical Bleichenbacher-oracles found in practice. The
considered class of oracles starts from a “TTT”-oracle, which per-
forms only few PKCS#1 v1.5 consistency checks and therefore re-
turns 1 on all plaintexts beginning with 0x00||0x02. Such an ora-
cle allows for very efﬁcient Bleichenbacher-attacks, essentially be-
cause it is relatively likely that the oracle returns 1 when given a
random RSA-ciphertext (not necessarily correctly padded). Such
an oracle was found on RSA SecurID and Siemens CardOS smart-
cards [4], for instance. The most restrictive oracle considered by
Bardou et al.
is the “FFF”-oracle, which checks PKCS#1 v1.5
consistency very thoroughly, by testing all padding ﬁelds and the
length of the plaintext for correctness. This makes Bleichenbacher-
like attacks less efﬁcient, because it takes rather long until Ble-
ichenbacher’s algorithm ﬁnds a ciphertext which is accepted by
the oracle. This is the type of oracle was found and exploited by
Klíma et al. [22] in old TLS versions. Bardou et al. furthermore
describe many intermediate oracles, dubbed “TFT”, “FFT”, and so
on, which perform or omit different checks on PKCS#1 v1.5 plain-
text padding, we refer to [4] for details.
Bardou et al. compute the number of attack queries for different
oracle types. However, their assumption is that the attacked mes-
sage is decrypted to a message starting with 0x00||0x02, which
speeds up the attack. In our case, we have to perform RSA secret
key operation on arbitrary messages. Thus, our ﬁrst step is to ﬁnd
a message starting with 0x00||0x02 (called a blinding step in the
original paper of Bleichenbacher [7]). The performance of this step
depends on the oracle strength. For example, it takes about 215 ad-
ditional queries to ﬁnd a valid message, when the oracle validates
only the ﬁrst two bytes 0x00||0x02 (“TTT” oracle).
In Table 3 we give the estimated duration of the attack in our
setting with the oracles from [4]. The number of oracle queries is
computed as a sum of the queries in the blinding step and queries
to perform the attack by Bardou et al. [4].
On attacking TLS 1.3. Considering attacks on TLS 1.3, we ob-
serve that none of the durations lies within the “session keep-alive”
time of the tested browsers (cf. Table 2). However, the more inter-
esting case for attacks where the duration is very long is machine-
to-machine communication. Note that for OpenSSL it holds that
Oracle type
TTT
TFT
FFT
FFF
#Queries Duration [sec]
1,097
1,134
1,782
726,861
36,536
37,796
59,388
24,228,692
Table 3: Estimated duration of attacks for 1024-bit RSA keys
with the imperfect Bleichenbacher oracles found in [4], based
on the median number of queries of the optimized Bleichen-
bacher algorithm from [4].
all timing results are within the timing range, except for the case of
the FFF oracle.
On attacking QUIC. Considering attacks on QUIC, note that the
time required to perform one full Bleichenbacher attack ranges
from about 18 minutes (for TTT and TFT oracles) up to about 202
hours (less than 8.5 days) in case of the most restrictive FFF oracle.
Given that in case of QUIC the attacker is able to perform these
computations before the actual attack in a “pre-computation”, we
consider these ﬁgures as fully practical, even for the most restric-
tive FFF oracle.
8. ACKNOWLEDGEMENTS
We would like to thank Adam Langley for his advice on the lim-
itations of the QUIC reference implementation and further com-
ments, Fedor Indutny for providing us an early version of his cer-
tiﬁcate collection, the reviewers of USENIX Security 2015 for sug-
gesting to analyze the applicability of our attacks to QUIC, and the
reviewers of ACM CCS 2015 for their helpful comments.
9. REFERENCES
[1] SSL Pulse. Survey of the SSL Implementation of the Most
Popular Web Sites, April 2015. https:
//www.trustworthyinternet.org/ssl-pulse.
[2] David Adrian, Karthikeyan Bhargavan, Zakir Durumeric,
Pierrick Gaudry, Matthew Green, J. Alex Halderman, Nadia
Heninger, Drew Springall, Emmanuel Thomé, Luke Valenta,
Benjamin VanderSloot, Eric Wustrow, Santiago
Zanella-Béguelin, Paul Zimmermann. Imperfect Forward
Secrecy: How Difﬁe-Hellman Fails in Practice. May 2015.
https://WeakDH.org
[3] Gail-Joon Ahn, Moti Yung, and Ninghui Li, editors. ACM
CCS 14: 21st Conference on Computer and Communications
Security. ACM Press, November 2014.
[4] Romain Bardou, Riccardo Focardi, Yusuke Kawamoto,
Lorenzo Simionato, Graham Steel, and Joe-Kai Tsay.
Efﬁcient padding oracle attacks on cryptographic hardware.
In Reihaneh Safavi-Naini and Ran Canetti, editors, Advances
in Cryptology – CRYPTO 2012, volume 7417 of Lecture
Notes in Computer Science, pages 608–625. Springer,
August 2012.
[5] Florian Bergsma, Benjamin Dowling, Florian Kohlar, Jörg
Schwenk, and Douglas Stebila. Multi-ciphersuite security of
the secure shell (SSH) protocol. In Ahn et al. [3], pages
369–381.
[6] S. Blake-Wilson, N. Bolyard, V. Gupta, C. Hawk, and
B. Moeller. Elliptic Curve Cryptography (ECC) Cipher
Suites for Transport Layer Security (TLS). RFC 4492
(Informational), May 2006. Updated by RFC 5246.
[7] Daniel Bleichenbacher. Chosen ciphertext attacks against
protocols based on the RSA encryption standard PKCS #1.
In Hugo Krawczyk, editor, Advances in Cryptology –
CRYPTO’98, volume 1462 of Lecture Notes in Computer
Science, pages 1–12. Springer, August 1998.
[8] Wan-Teh Chang and Adam Langley. QUIC crypto, 2013.
https://docs.google.com/document/d/
1g5nIXAIkN_Y-7XJW5K45IblHd_
L2f5LTaDUDwvZ5L6g/edit?pli=1.
[9] Jean Paul Degabriele, Anja Lehmann, Kenneth G. Paterson,
Nigel P. Smart, and Mario Streﬂer. On the joint security of
encryption and signature in EMV. In Orr Dunkelman, editor,
Topics in Cryptology – CT-RSA 2012, volume 7178 of
Lecture Notes in Computer Science, pages 116–135.
Springer, February / March 2012.
[10] T. Dierks and C. Allen. The TLS Protocol Version 1.0. RFC
2246 (Proposed Standard), January 1999. Obsoleted by RFC
4346, updated by RFCs 3546, 5746.
[11] T. Dierks and E. Rescorla. The Transport Layer Security
(TLS) Protocol Version 1.1. RFC 4346 (Proposed Standard),
April 2006. Obsoleted by RFC 5246, updated by RFCs 4366,
4680, 4681, 5746.
[12] T. Dierks and E. Rescorla. The Transport Layer Security
(TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard),
August 2008. Updated by RFC 5746.
[13] T. Dierks and E. Rescorla. The Transport Layer Security
(TLS) Protocol Version 1.3. draft-ietf-tls-tls13-07, July 2015.
[14] Marc Fischlin and Felix Günther. Multi-stage key exchange
and the case of google’s QUIC protocol. In Gail-Joon Ahn,
Moti Yung, and Ninghui Li, editors, Proceedings of the 2014
ACM SIGSAC Conference on Computer and
Communications Security, Scottsdale, AZ, USA, November
3-7, 2014, pages 1193–1204. ACM, 2014.
[15] Martin Georgiev, Subodh Iyengar, Suman Jana, Rishita
Anubhai, Dan Boneh, and Vitaly Shmatikov. The Most
Dangerous Code in the World: Validating SSL Certiﬁcates in
Non-Browser Software. In ACM Conference on Computer
and Communications Security, 2012.
[16] Fedor Indutny. Rsa certiﬁcate sizes, April 2015.
http://indutny.github.io/collect-certs.
[17] Tibor Jager, Kenneth G. Paterson, and Juraj Somorovsky.
One bad apple: Backwards compatibility attacks on
state-of-the-art cryptography. In ISOC Network and
Distributed System Security Symposium – NDSS 2013. The
Internet Society, February 2013.
[18] Tibor Jager, Sebastian Schinzel, and Juraj Somorovsky.
Bleichenbacher’s attack strikes again: Breaking PKCS#1
v1.5 in XML encryption. In Sara Foresti, Moti Yung, and
Fabio Martinelli, editors, ESORICS 2012: 17th European
Symposium on Research in Computer Security, volume 7459
of Lecture Notes in Computer Science, pages 752–769.
Springer, September 2012.
[19] J. Jonsson and B. Kaliski. Public-Key Cryptography
Standards (PKCS) #1: RSA Cryptography Speciﬁcations
Version 2.1. RFC 3447 (Informational), February 2003.
[20] B. Kaliski. PKCS #1: RSA Encryption Version 1.5. RFC
2313 (Informational), March 1998. Obsoleted by RFC 2437.
[21] B. Kaliski and J. Staddon. PKCS #1: RSA Cryptography
Speciﬁcations Version 2.0. RFC 2437 (Informational),
October 1998. Obsoleted by RFC 3447.
[22] Vlastimil Klíma, Ondrej Pokorný, and Tomás Rosa.
Attacking RSA-based sessions in SSL/TLS. In Colin D.
Walter, Çetin Kaya Koç, and Christof Paar, editors,
Cryptographic Hardware and Embedded Systems –
CHES 2003, volume 2779 of Lecture Notes in Computer
Science, pages 426–440. Springer, September 2003.
[23] Robert Lychev, Samuel Jero, Alexandra Boldyreva, and
Cristina Nita-Rotaru. How secure and quick is QUIC?
Provable security and performance analyses. In 2015 IEEE
Symposium on Security and Privacy, SP 2015, San Jose, CA,
USA, May 17-21, 2015, pages 214–231. IEEE Computer
Society, 2015.
[24] M. Maher. ATM Signalling Support for IP over ATM - UNI
Signalling 4.0 Update. RFC 2331 (Proposed Standard), April
1998.
[25] James Manger. A chosen ciphertext attack on RSA optimal
asymmetric encryption padding (OAEP) as standardized in
PKCS #1 v2.0. In Joe Kilian, editor, Advances in Cryptology
– CRYPTO 2001, volume 2139 of Lecture Notes in Computer
Science, pages 230–238. Springer, August 2001.
[26] Nikos Mavrogiannopoulos, Frederik Vercauteren, Vesselin
Velichkov, and Bart Preneel. A cross-protocol attack on the
TLS protocol. In Yu et al. [34], pages 62–72.
[27] Christopher Meyer and Jörg Schwenk. SoK: Lessons
Learned From SSL/TLS Attacks. In Proceedings of the 14th
International Workshop on Information Security
Applications, WISA 2013, Berlin, Heidelberg, August 2013.
Springer-Verlag.
[28] Christopher Meyer, Juraj Somorovsky, Eugen Weiss, Jörg
Schwenk, Sebastian Schinzel, and Erik Tews. Revisiting
SSL/TLS implementations: New bleichenbacher side
channels and attacks. In Proceedings of the 23rd USENIX
Security Symposium, San Diego, CA, USA, August 20-22,
2014., pages 733–748, 2014.
[29] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and
Stefan Savage. Hey, you, get off of my cloud: exploring
information leakage in third-party compute clouds. In Ehab
Al-Shaer, Somesh Jha, and Angelos D. Keromytis, editors,
ACM CCS 09: 16th Conference on Computer and
Communications Security, pages 199–212. ACM Press,
November 2009.
[30] Ivan Risti´c. Bulletproof SSL and TLS. Understanding and
deploying SSL/TLS and PKI to secure servers and web
applications. Feisty Duck, August 2014.
[31] Jim Roskind. Experimenting with QUIC, 2013.
http://blog.chromium.org/2013/06/
experimenting-with-quic.html.
[32] Jim Roskind. QUIC design document, 2013.
https://docs.google.com/a/chromium.org/
document/d/1RNHkx_
VvKWyWg6Lr8SZ-saqsQx7rFV-ev2jRFUoVD34.
[33] D. Wagner and B. Schneier. Analysis of the SSL 3.0
protocol. The Second USENIX Workshop on Electronic
Commerce Proceedings, 1996.
[34] Ting Yu, George Danezis, and Virgil D. Gligor, editors. ACM
CCS 12: 19th Conference on Computer and
Communications Security. ACM Press, October 2012.
[35] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas
Ristenpart. Cross-VM side channels and their use to extract
private keys. In Yu et al. [34], pages 305–316.
[36] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas
Ristenpart. Cross-tenant side-channel attacks in PaaS clouds.
In Ahn et al. [3], pages 990–1003.