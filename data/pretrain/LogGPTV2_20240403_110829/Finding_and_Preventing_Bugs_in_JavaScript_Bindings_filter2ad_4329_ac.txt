5
10
0
2
36
0
0
0
2
2
0
6
6
44
False
12
5
0
2
3
22
4
0
2
1
7
1
0
1
30
Table 4—Bugs in JavaScript runtime systems. Our counts are con-
servative in several ways: (1) we do count multiple occurrence of a
particular bug kind (e.g., crashing) for a single function even though
in practice a crashing function, for example, can be crashed in mul-
tiple ways, and (2) we count bugs that are more difﬁcult to trigger
(e.g., because they are deeply nested) as suspicious or false positives,
depending on the seeming difﬁculty.
The Length function takes a user-supplied V8 Local—
V8’s C++ base “unknown” type for a JavaScript value—as its
argument; val is supposed to be a JavaScript byte-array whose
length the function will determine. On line 246, the function
CHECKs that val is actually of the correct type, hard-crashing
when this is not the case. Length is not directly exposed to
JavaScript—it is a helper function that various other Node.js
binding functions use. Unfortunately, neither the other binding
functions nor the JavaScript layer that calls into binding code
safely enforce val’s type. As a result, we can sneak a malicious
value argument through to trigger a crash in the Length function.
The following code triggers the crash:
1 const dgram = require('dgram');
2 const util = require('util');
3 // Create object that passes instanceof Buffer check
4 function FakeBuffer() { }
5 util.inherits(FakeBuffer, Buffer);
6 const message = new FakeBuffer();
7 // Pass object to code that eventually calls Length
8 dgram.createSocket('udp4').send(message, ...);
The send function on line 8 is what eventually triggers the
bug in the Length function above. Lines 1-6 are boilerplate to
564
create a message that will fool JavaScript-layer type checks:
since our message is an instance of FakeBuffer, which in-
herits from Buffer, it passes the JavaScript function send’s
type checks. send eventually passes message to the binding-
layer UDP::DoSend function, which calls Length(message).
This causes a hard crash: message is not a Uint8Array, so the
CHECK(val->IsUint8Array()) fails.
To detect hard-crashing CHECK bugs, the checker does a for-
ward, intra-procedural analysis of each binding layer Node.js
function. Its main computed data structure is the set of all
variables that come from user JavaScript. If it detects a user
JavaScript variable in a hard-crashing macro (e.g., CHECK,
ASSERT, etc.), it ﬂags an error. This simple checker works well
for Node.js because, in this system, it is often clear (1) which
arguments are user-supplied JavaScript and (2) how these ar-
guments are passed in from the JavaScript layer. Furthermore,
Node.js developers consistently use hard-crashing asserts in
place of safe if-statements. In contrast, when we tried running
a version of the checker on Chrome code, we drowned in a
deluge of confusing reports: Chrome thoroughly performs safe
checks before calling hard-crashing functions. In Blink most of
these safe checks are automatically generated; in the Chrome
extension system the checks are performed in JavaScript from
WebIDL-like interface descriptions.
This checker ﬂags 65 errors, 35 of which we conﬁrmed by
writing crashing exploits for Node.js. We examined 9 reports
and decided that they were difﬁcult or impossible to trigger
largely because the binding functions are “monkey-patched”
with safe type-checking JavaScript code before any application
code can run. Of the remaining checker ﬂags, we mark 19 as
suspicious. Most of these functions are inner, helper binding
functions that are more challenging to trigger than functions di-
rectly exposed to JavaScript. We could have suppressed reports
for such non-public functions, but the Length exploit above
demonstrates that it is very feasible to trigger bugs that are
several layers deep in the JavaScript-C++ call stack. Moreover,
Length is not the only deep Node.js bug we have triggered.
Hence, we argue for more defensive (or less explicitly hard-
crashing) bindings [90].
Hard-crashing conversions from Maybe types. This checker
identiﬁes instances where binding code unsafely uses hard-
crashing conversions. In other words, it ﬂags binding functions
that use type conversion methods that hard-crash in the case
of unexpected types. For example, the ToChecked function
converts JavaScript values from Maybe types—types that
signal success (value of type T) or failure (Nothing)—to T
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
types, crashing when the value is Nothing. Our checker ﬂagged
the following Chrome hard crash [23]:
/* chrome/third_party/WebKit/Source/bindings/
core/v8/ScriptCustomElementDefinition.cpp */
85 template 
86 static void keepAlive(v8::Local& array,
87
uint32_t index,
const v8::Local& value,
88
89
90
91
92
93
94
95
96 }
ScopedPersistent& persistent,
ScriptState* scriptState) {
if (value.IsEmpty())
return;
array->Set(scriptState->context(), index,
(cid:2)→
...
value).ToChecked();
The ToChecked call on line 94 will hard crash if its receiver
is Nothing. In other words, if array->Set() returns Nothing,
the method call ToChecked() on it will result in a crash. Getting
array->Set(...index, value) to return Nothing is trivial.
The Set function normally sets the index property of array to
value (e.g., array[0] = 0). JavaScript, however, allows users
to instead deﬁne custom a setter function to be called whenever
the property is accessed. Hence, if we re-deﬁne array’s index
property to be an exception-throwing setter, array->Set() will
return Nothing—and the tab hard crashes.
Triggering this error is a bit more subtle, though—array
is not a value that comes directly from attacker-controlled
JavaScript (e.g., from a web site). Instead, array is freshly
created in the C++ binding code that calls keepAlive:
/* chrome/third_party/WebKit/Source/bindings/
core/v8/ScriptCustomElementDefinition.cpp */
124
125
v8::Array::New(scriptState->isolate(), 5);
v8::Local array =
(cid:2)→
keepAlive(array, 0, connectedCallback,
(cid:2)→
(cid:2)→
definition->m_connectedCallback,
scriptState);
On line 124, the programmer uses the New constructor to cre-
ate a new array in C++. Luckily, attackers can affect the
Set function even on freshly-created object. JavaScript al-
lows developers to deﬁne properties on global prototypes (e.g.,
Array.prototype or Object.prototype) that are inherited
by all newly created objects in the same context; attacks that
take advantage of prototypes are called prototype poisoning
attacks [2]. The following malicious JavaScript deﬁnes an
exception-throwing setter function for property 0 of the Array
prototype:
1
2
3
4
Object.defineProperty(Array.prototype, 0, {
set: newValue => { throw "die!"; },
enumerable: true
});
565
If we include this JavaScript in a malicious web page, all
JavaScript arrays in the context will contain an exception-
throwing setter as their property 0—including arrays in
bindings. Therefore, when the binding code tries to ac-
cess the 0 property of a freshly created array by calling
array->Set(0, ...).ToLocalChecked(), the tab will crash.
The checker is implemented as a forward, intra-procedural,
ﬂow-sensitive traversal of the parse tree. Its main computed
data structure is the NothingSet, which contains variables that
may be Nothing; it ﬂags an error when it sees a hard-crashing
conversion call (e.g., ToLocalChecked) on a variable in the
NothingSet. For each binding code function, the checker:
1. Initializes AlterSet to the empty set. The AlterSet is the
set of variables whose upcalls malicious JavaScript may
control; any time a user-controlled JavaScript object can
override a method (e.g., js->Set()), we add that object
to the AlterSet.
2. Adds user-controlled JavaScript Object or Value argu-
ments to the AlterSet.
3. Initializes NothingSet to the empty set. NothingSet is
the set of variables initialized to the result of upcalls
on user-controlled JavaScript. On encountering the line
x = array->Set(...), if array is in the AlterSet, the
checker adds x to the NothingSet: a malicious array
could override its Set function to throw an exception, leav-
ing x as a Nothing value.
4. Removes variables from the AlterSet when they are type
checked and from the NothingSet when they are com-
pared with Nothing.
5. Flags an error any time a hard-crashing conversion
(ToChecked, ToLocalChecked, and FromJust) is called
on an item in the NothingSet. We can force items in the
NothingSet to be Nothing, triggering a hard crash when
execution hits the ToChecked.
This checker ﬂags 27 errors, 6 of which we conﬁrmed by writing
crashing exploits—2 for Node.js, 3 for PDFium and 1 for Blink.
As with our previous checker, we mark internal, hard-to-get-to
functions as suspicious—in total, 7. Of the 27, 13 are false
positives. Again, most false positives arise because some bugs
are on impossible paths; for example, the three Blink false
positives for this checker were due to series of checks performed
in the functions calling the seemingly unsafe binding code. We
believe that adding inter-procedural analysis to these checkers
can address most of the false positives.
After looking at the initial reports for this checker, we found
that it ﬂagged hard crashes deep in PDFium’s V8 wrapper li-
brary. The library wraps typical V8 functions like Uint32Value
to accept PDFium JavaScript type arguments (e.g., CJS_Values)
instead of V8 type arguments. We used this information to write
a new 40-line, PDFium-speciﬁc twist on the original checker.
The new checker identiﬁes cases where wrapper functions are
called on un-type-checked user CJS_Value arguments—usually
something along the lines of “params[0].ToInt().” We identi-
ﬁed 39 such cases, 29 of which we have triggered by embedding
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
JavaScript in PDFs. For example, embedding the following line
of code in a single PDF crashes all open PDF tabs:
1 app.beep({ [Symbol.toPrimitive]() { throw 0; } })
As a ﬁnal experiment, we gathered all of our Node.js crash-
ing exploits and ran them on a different Node.js version, one
that uses Microsoft’s ChakraCore JavaScript engine (instead
of V8) [12, 70]. Out of 37 crashing exploits, all still crash on
Node.js ChakraCore. This gives us conﬁdence that we will be
able to adapt our checkers from one JavaScript engine to another
relatively easily.
3.2 Type-Safety Violations
Casts without type checking. This checker ﬂags violations of
JavaScript’s weaker notion of type-safety: it looks for cases
where C++ code casts binding-layer JavaScript values to C++
V8 types without checking if values are of those types. For
example, the checker detects the following Node.js binding bug,
which attackers can use to carry out a type confusion attack:
/* node/src/node_buffer.cc */
816 template 
817 void WriteFloatGeneric(const
(cid:2)→
FunctionCallbackInfo& args) {
Environment* env = Environment::GetCurrent(args);
bool should_assert = args.Length() ();
}
Local ts_obj =
(cid:2)→
ArrayBuffer::Contents ts_obj_c =
(cid:2)→
...
ts_obj->Buffer()->GetContents();
818
819
820
821
822
823
824
825
826 }
On lines 819–822, the code conditionally checks the type
of the ﬁrst argument (args[0]). Unfortunately, the condition
should_assert depends on the user—should_assert is de-
ﬁned based on the number of arguments the user provides—so
attackers can bypass the type check. On line 823, the un-type-
checked args[0] is cast to a Uint8Array. Finally, from line
824 forward, WriteFloatGeneric calls methods on the cast
object—so a well-chosen argument can amount to arbitrary
code execution.
We trigger this bug using the public buffer API, which
attempts to apply JavaScript-layer checks before calling into
the buggy binding function:
/* node/lib/buffer.js */
1244 Buffer.prototype.writeFloatLE = function
(cid:2)→
writeFloatLE(val, offset, noAssert) {
1245
1246
1247
val = +val;
offset = offset >>> 0;
if (!noAssert)
566
binding.writeFloatLE(this, val, offset);
else
binding.writeFloatLE(this, val, offset, true);
return offset + 4;
1248
1249
1250
1251
1252 };
This JavaScript-layer code converts val and offset to num-
ber values in lines 1245 and 1246, but does nothing to type
check the receiver this, which should be a Buffer. Then, de-
pending on the user-supplied noAssert, it calls the binding
layer writeFloatLE (which calls the buggy binding function
WriteFloatGeneric) with either three or four arguments. In
the latter case, the binding layer’s should_assert argument
is false, disabling type checking and triggering the incorrect
cast. The following exploit triggers this bug:
1
Buffer.prototype.writeFloatLE.call(0xdeadbeef, 0,
(cid:2)→
0, true);
This code snippet triggers a call to WriteFloatGeneric with
0xdeadbeef as args[0], 0 as args[1], etc. The exploit will
cause a type confusion attack: it almost always hard crashes,
but a well-crafted argument (in place of 0xdeadbeef) can cause
the Buffer method call on ts_obj to execute meaningful code.
Attackers could embed this seemingly benign code deep in
the dependency tree of publicly available, anonymous, and
unsigned Node.js packages and go unnoticed [83, 91].
The type-casting checker is implemented as another intra-
procedural forward code traversal. Its main computed data struc-
ture is the set of un-type-checked user arguments; whenever it