Recall  that  in  OLDIs  the  parent-to-leaf  RPC  has  an  overall 
budget that gets divided into computation and network parts. If all 
leaves were to finish computation at exactly the same instant for 
every single query, then the network deadline would be a hard and 
fixed  value.  In  reality,  the  computation  time  can  vary  across 
leaves if the work for a query is not evenly balanced. While the 
computation budget forms a hard upper bound, some leaves may 
respond  sooner  resulting  in  a  slightly  looser  effective  network 
deadline. In addition, some applications attempt to smooth fan-in 
bursts  via  user-injected  jitter  [9]. As  such,  the  exact  nature  and 
architecture of an OLDI application can affect the distribution of 
e
n
i
l
d
a
e
d
y
b
d
e
w
o
l
l
a
y
a
e
d
l
t
.
m
r
o
n
y
c
n
e
t
a
l
w
o
F
l
400% 
300% 
200% 
100% 
0% 
15 
20 
25 
30 
35 
Fan-in degree 
40 
45 
Figure 12: Normalized latencies at the 50th, 90th, and 99th 
percentiles 
effective  deadlines.  We  stipulate  that  a  robust  network  protocol 
should work across a spectrum of deadline distributions. To that 
end, we evaluate three deadline distributions which use the same 
base deadlines as specified in Section 4.2.1, to which each adds a 
different variation. Our low variance case models a 10% uniform-
random  variation  added  to  the  base  deadline.  The  medium 
variance case adds a 50% uniform-random variation, and the high 
variance  case  models  a  one-sided  exponential  distribution  with 
mean equal to the base deadline. Our high variance case matches 
the deadline distribution used in [25]. 
We now compare D2TCP against DCTCP and D3 in terms of 
the  fraction  of  missed  deadlines  for  our  benchmark.  Figure  9, 
Figure 10, and Figure 11 correspond to the low, medium and high 
variance deadline cases. In all three graphs, the Y axis shows the 
fraction of missed deadlines for TCP, DCTCP, D3, and D2TCP as 
we vary the degree of burstiness on the X axis by increasing the 
fan-in  degree  (i.e.,  number  of  leaves  per  parent)  from  5  to  40. 
Typical  OLDI  applications’  fan-in  degrees  fall  in  this  range  [1] 
[25]. 
Across  all  three  graphs,  we  see  that  TCP  misses  a  rapidly 
increasing number of deadlines as we increase the fan-in degree 
(i.e.,  burstiness). While  DCTCP and  D3  improve  over TCP,  they 
still  miss  a  significant  fraction  of  deadlines.  For  the  medium 
variance  case  both  DCTCP  and  D3  miss  around  25%  of  the 
deadlines at the fan-in degree is 40. In comparison, D2TCP keeps 
the fraction of missed deadlines under 7% at a fan-in degree of 40. 
Because this trend holds true for all three deadline variation cases, 
we argue that D2TCP is robust enough to handle a wide spectrum 
of deadline distributions. For the remainder of the results section, 
we  use  only  the  medium  variance  case  for  all  remaining 
experiments. 
All  the  schemes  perform  better  with  the  higher-variance 
deadlines.  Such  behavior  is  expected  because  higher  variance 
smoothes  out  fan-in-burst-induced  congestion.  Note  that  for  the 
high variance case, the fraction of missed deadlines for D3 fall in 
the range of 0-15% which is close to that of 0-9% reported in the 
D3  paper  [25],  confirming  that  our  D3  implementation  is 
reasonable. 
To explain the above results, we show another set of data for 
the medium variance case. Figure 12 shows the 50th, 90th, and 99th 
percentile latencies for DCTCP, D3 and D2TCP normalized to the 
delay allowed by the deadline. On each line, the three points from 
bottom  to  top  correspond  to  the  50th,  90th,  and  99th  percentile 
latencies,  respectively.  As  expected,  D2TCP’s  latencies  are 
significantly  lower  than  those  of  DCTCP  and  D3,  resulting  in 
fewer missed deadlines. Overall, the latencies for all the schemes 
closely track the fraction of missed deadlines in Figure 10.  
We now examine our earlier claims about D3’s shortcomings. 
Recall that D3’s greedy approach may allocate bandwidth to far-
deadline  requests  arriving  slightly  ahead  of  near-deadline 
Table 1: Priority inversion for D3 
Table 2: Long-flow b/w when D2TCP & TCP coexist  
Fan-in Degree 
Low-Var.  Med. Var. 
Hi. Var. 
20 
25 
30 
35 
40 
31.9 
33.2 
35.7 
41.9 
48.6 
26.3 
28.7 
30.8 
33.4 
40.5 
24.1 
24.6 
28.6 
31.5 
33.1 
h
t
P
C
T
o
t
.
m
r
o
n
i
d
w
d
n
a
b
w
o
l
f
g
n
o
L
1.05 
1.00 
0.95 
0.90 
0.85 
0.80 
DCTCP 
D3 
OTCP 
D2TCP 
5 
10 
15 
20 
25 
Fan-in degree 
30 
35 
40 
)
%
(
s
e
n
i
l
d
a
e
d
d
e
s
s
M
i
Figure 13: Bandwidth of background flows 
40 
35 
30 
25 
20 
15 
10 
5 
0 
DCTCP 
D3 
OTCP 
D2TCP 
5 
10 
15 
20 
25 
Fan-in degree 
30 
35 
40 
Figure 14: Missed deadlines under background flows 
requests.  This  race  condition  causes  D3  to  frequently  invert 
priorities  of  congested  flows.  To  confirm  these  claims,  we 
compute  the  percentage  of  requests  that  are  denied  while  later-
deadline requests have been granted. This percentage is a measure 
of priority inversion in D3. Table 1 shows this percentage for D3 
under  all  three  variance  cases,  for  various  fan-in  degrees.  From 
the  table,  we  see  that  even  in  a  favorable  setting  (high  variance 
deadlines with a fan-in degree of 20), D3 incurs priority inversion 
for nearly 25% of all flows. Also note that the priority inversions 
worsen both as the fan-in degree increases, and as the variance in 
deadlines gets tighter causing more burstiness.  
4.2.3  Background flows 
To  test  whether  long-lived,  non-OLDI  flows  achieve  high 
bandwidth  even  as  short-lived  OLDI  flows  come  and  go,  we 
replace  one  leaf-to-parent  flow  in  each  OLDI  tree  with  a  long-
lived background flow. This background flow has an exponential 
arrival with mean of 300 ms and sends 1 MB of data.  
In Figure 13, we show the background flows’ bandwidth for 
DCTCP, D3, and D2TCP, normalized to that for TCP on the Y axis 
as  we  vary  the  fan-in  degree  on  the  X  axis.    Background  flows 
give up bandwidth to OLDI flows only for the short duration of 
fan-in-burst-induced 
schemes. 
Consequently,  all  the  schemes  perform  well,  achieving  85%  or 
more of the bandwidth achieved by TCP. D2TCP is slightly better 
than  DCTCP  which  throttles  background  flows  to  make  room 
unnecessarily  for  far-deadline,  OLDI  flows.  Overall,  D2TCP 
achieves 95% or more of the bandwidth achieved by TCP. 
congestion  under 
To confirm that the background flows do not take bandwidth 
away from the OLDI flows, we show in Figure 14 the fraction of 
the 
all 
Fan-in 
degree 
15 
20 
Long flow bandwidth (Mbps) 
All TCP 
Mix #1 
Mix #2 
90 
86 
90 
86 
90 
86 
)
%
(
s
e
n
i
l
d
a
e
d
d
e
s
s
M
i
Fan-in = 25 
Fan-in = 30 
Fan-in = 35 
20 
15 
10 
5 
0 
1.25 
1.5 
1.75 
2 
2.25 
2.5 
2.75 
3 
Range of d [1/n,n] 
Mix#1 
All-TCP 
Figure 15: Missed deadlines while varying cap on d 
9 
8 
7 
6 
5 
4 
3 
2 
1 
0 
Mix#2 
)
%
(
s
e
n
i
l
d
a
e
d
d
e
s
s
M
i
Set A 
Set B 
Fan-in = 15 
Set A 
Set B 
Fan-in = 25 
Figure 16: Missed deadlines when D2TCP & TCP coexist 
missed  deadlines  for  the  OLDI  flows  in  the  presence  of  the 
background  flows.  For  all  the  schemes,  the  fraction  remains 
similar to that in the absence of the background flows (Figure 10). 
4.2.4  Varying the cap on d – deadline imminence 