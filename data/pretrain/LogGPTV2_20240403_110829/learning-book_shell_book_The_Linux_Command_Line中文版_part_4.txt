394
28.6结合表达式
395
28.7控制操作符：分支的另一种方法，
397
28.8总结
868
28.9拓展阅读
399
29读取键盘输入
400
29.1read-从标准输入读取数值
401
29.1.1 选项
C0
29.2 IFS
405
29.3校正输入
407
29.4菜单
408
29.5 总结归纳
410
29.5.1友情提示
410
29.6 拓展阅读
410
30流程控制：while/until循环
411
30.1循环
411
30.1.1 while .
412
30.2 跳出循环
414
30.2.1 until
415
30.3使用循环读取文件
416
30.4总结
417
30.5拓展阅读
417
13
---
## Page 15
31疑难排解
418
31.1 语法错误
418
31.1.1丢失引号
418
31.1.2丢失或意外的标记
419
31.1.3预料不到的展开，
420
31.2逻辑错误
422
31.2.1 防错编程
422
31.2.2验证输入
424
31.3 测试
424
31.3.1测试案例
425
31.4调试
426
31.4.1找到问题区域
426
31.4.2追踪
427
31.4.3执行时检查数值
429
31.5总结
430
31.6 拓展阅读
430
32流程控制：case 分支
431
32.1 case
431
32.2模式
433
32.3执行多个动作
435
32.4总结
437
32.5拓展阅读
437
33位置参数
438
33.1访问命令行
438
33.1.1确定参数个数
439
33.1.2shift-访问多个参数的利器
440
33.1.3简单应用
442
33.1.4Shell函数中使用位置参数
442
33.2处理集体位置参数
443
33.3一个更复杂的应用
445
33.4总结
448
33.5 拓展阅读
451
14
---
## Page 16
34流程控制：for循环
453
34.1for:传统shell格式
453
34.2for:C语言格式
456
34.3 总结
457
34.4拓展阅读
459
35字符串和数字
460
35.1参数展开
460
35.1.1基本参数
460
35.1.2管理空变量的展开
461
35.2返回变量名的参数展开
463
35.2.1字符串展开
463
35.2.2大小写转换
467
35.3算术求值和展开
468
35.3.1数基
469
35.3.2一元运算符
469
35.3.3简单算术
470
35.3.4赋值运算符
471
35.3.5位运算符
473
35.3.6逻辑运算符
474
35.4bc-一种高精度计算器语言
477
35.4.1使用 bc
477
35.4.2一个脚本实例
478
35.5总结
479
35.6 额外加分
480
35.7拓展阅读
480
36数组
481
36.1什么是数组？
481
36.2创建一个数组
481
36.3数组赋值
482
36.4访问数组元素
483
36.5数组操作
484
36.5.1输出整个数组的内容
485
15
---
## Page 17
36.5.2确定数组元素个数
485
36.5.3找到数组使用的下标
486
36.5.4在数组末尾添加元素
486
36.5.5数组排序
487
36.5.6删除数组
488
36.6关联数组
489
36.7总结
489
36.8拓展阅读
490
37奇珍异宝
491
37.1组命令和子 shell
491
37.1.1进程替换
495
37.2陷阱
498
37.3异步执行
501
37.3.1等待
501
37.4命名管道
502
37.4.1设置一个命名管道
503
37.4.2使用命名管道.
503
37.5总结
504
37.6 拓展阅读
504
16
---
## Page 18
引言
我想给大家讲个故事。
故事内容不是LinusTorvalds在1991年怎样写了Linux内核的第一个版本，因为这些内容
你可以在许多Linux书籍中读到。我也不是来告诉你，更早之前，Richard Stallman是如何开
始GNU项目，设计了一个免费的类Unix的操作系统。那也是一个很有意义的故事，但大多
数Linux书籍也讲到了它。
我想告诉大家一个你如何才能夺回计算机管理权的故事。
在20世纪70年代末，我刚开始和计算机打交道时，正进行着一场革命，那时的我还是一
名大学生。微处理器的发明，使普通老百姓（就如你和我）真正拥有一台计算机成为可能。今
天，人们难以想象，只有大企业和强大的政府才能够拥有计算机的世界，是怎样的一个世界。
简单说，你做不了多少事情。
今天，世界已经截然不同了。计算机遍布各个领域，从小手表到大型数据中心，及大小介
于它们之间的每件东西。除了随处可见的计算机之外，我们还有一个无处不在的连接所有计算
里，正在发生另一些事情。一个大公司不断地把它的管理权强加到世界上绝大多数的计算机上，
并且决定你对计算机的操作权力。幸运地是，来自世界各地的人们，正积极努力地做些事情来
改变这种境况。通过编写自己的软件，他们一直在为维护电脑的管理权而战斗着。他们建设着
Linux *
一提到Linux，许多人都会说到“自由”，但我不认为他们都知道“自由”的真正涵义。“自
由”是一种权力，它决定你的计算机能做什么，同时能够拥有这种“自由”的唯一方式就是知
道计算机正在做什么。“自由”是指一台没有任何秘密的计算机，你可以从它那里了解一切，只
要你用心的去寻找。
1.1为什么使用命令行
你是否注意到，在电影中一个“超级黑客”坐在电脑前，从不摸一下鼠标，就能够在30秒内侵
入到超安全的军用计算机中。这是因为电影制片人意识到，作为人类，本能地知道让计算机圆
17
---
## Page 19
满完成工作的唯一途径，是用键盘来操纵计算机。
现在，大多数的计算机用户只是熟悉图形用户界面（GUI），并且产品供应商和此领域的学
者会灌输给用户这样的思想，命令行界面（CLI）是过去使用的一种很恐怖的东西。这就很不
幸，因为一个好的命令行界面，是用来和计算机进行交流沟通的非常有效的方式，正像人类社
会使用文字互通信息一样。人们说，“图形用户界面让简单的任务更容易完成，而命令行界面使
完成复杂的任务成为可能”，到现在这句话仍然很正确。
因为Linux是以Unix家族的操作系统为模型写成的，所以它分享了Unix丰富的命令行工
具。Unix在20世纪80年代初显赫一时（虽然，开发它在更早之前），结果，在普遍地使用图
形界面之前，开发了一种广泛的命令行界面。事实上，很多人选择Linux（而不是其他的系统，
比如说WindowsNT）是因为其可以使“完成复杂的任务成为可能”的强大的命令行界面。
1.2这本书讲什么
这本书介绍如何生存在Linux命令行的世界。不像一些书籍仅仅涉及一个程序，比如像shell
程序，bash。这本书将试着向你传授如何与命令行界面友好相处。它是怎样工作的？它能做什
么？使用它的最好方法是什么？
这不是一本关于Linux系统管理的书。然而任何一个关于命令行的深入讨论，都一定会牵
涉到系统管理方面的内容，这本书仅仅提到一点儿管理方面的知识。但是这本书为读者准备好
了学习更多内容的坚实基础，毕竟要胜任系统管理工作也需要良好的命令行使用基本功。
这本书是围绕Linmux而写的。许多书籍，为了扩大自身的影响力，会包含一些其它平台的
知识，比如Unix，MacOSX等。这样做，很多内容只能比较空泛的去讲了。另一方面，这本书
只研究了当代Linux发行版。虽然，对于使用其它类Unix系统的用户来说，书中95%的内容
是有用的，但这本书主要面向的对象是现代Linux命令行用户。
1.3谁应该读这本书
这本书是为已经从其它平台移民到Linux系统的新手而写的。最有可能，你是使用某个
Windows版本的高手。或许是老板让你去管理一个Linux服务器，或许你只是一个桌面用户，
厌倦了系统出现的各种安全防御问题，而想要体验一下Limux。很好，这里欢迎你们！
不过一般来说，对于Linux的启蒙教育，没有捷径可言。学习命令行富于挑战性，而且很
费气力。这并不是说Linux命令行很难学，而是它的知识量很大，不容易掌握。Linux操作系
统，差不多有数以千计的命令可供用户操作。由此可见，要给自已提个醒，命令行可不是轻轻