## 知也无涯，愿你享受发现的乐趣说实话，从构思到写作这个专栏，这整个过程对我来说，还是有些忐忑的。组成原理是一门离大部分工程师的日常工作比较远的话题，却又是一个很多经典教材会讲的主题。"到底从什么角度去切入讲解"，我在构思文章的时候常常问自己。组成原理其实是一门类似于"计算机科学 101"的课程，固然我可以在里面讲 VHDL这样的硬件编程语言，不过说实话，这样的知识对于大部分的人意义并不大。我期望，能够通过这个专栏，让你体会到计算机科学知识是真的有用的，能够让你把学专栏的过程变成一个发现之旅。比如，在学习 HDD硬盘原理的时候，你能知道为什么用它来记录日志很好，但是拿来作为 KV数据库就很糟糕；在学习 CPU Cache的时候，你实际用代码体会一下它有多快，为什么 Disruptor里面的缓存行填充这样的小技巧，能够把性能发挥到极致。除此之外，撰写整个专栏的过程，也是我对自己的一个发现之旅。虽然在过去开发大型系统的时候，已经体会到掌握各种计算机科学基础知识的重要性，但是，这个专栏还是给了我一个系统性地、对基础知识回顾和整理的机会，在忙碌的日常工作之外，在离开学校那么多年后，重新把基础的理论知识和实际的系统开发做了一一印证。在这个过程中，对我自己是一个温故而知新的过程，我自己新学到不少过去不了解的知识点，也因此重新找到了很多新的技术兴奋点。乃至在专栏写了一半的时候，我特地在出差的空隙跑了一趟计算机历史博物馆，去感受创造新事物的那种激动人心的感觉。不过，在这整个过程中，我也深深体会到了内容创作的难。过去这 10个月里，持续地写稿、画图、写实验程序，在编辑的反馈下再改稿和录音，对我也是一个全新的体验。没有思路、时间不够、工作和写稿压力太大的时候，抓狂、发脾气、骂人都发生过。如果没有编辑在背后一直督促着，只靠自律，我想我无论如何也不可能写完这样一个规模的专栏。但是，我相信只有不断地逼迫自己走出习惯的舒适区，去尝试、体验新的挑战，才会进一步的成长。而很多未来的机会，也孕育在其间。就像史蒂夫·乔布斯说的，我们未来生活的可能性就是靠这些点点滴滴串联起来的。也许你今天只是在学校写简单的课程管理系统，可能会觉得有些无聊。抽一些时间出来，去了解计算机科学的底层知识，可能会让你找到求知的乐趣，无形中，这也为你去解决更有挑战的问题做好了铺垫。就像我自己在过去研究底层的数据系统、写技术博客的时候，也没有想到会有机会写上这样一个20 万字以上的专栏。就像罗曼·罗兰说的那样，"对爱的渴望，对知识的追求，对人类苦难不可遏制的同情，是支配我一生的单纯而强烈的三种情感"。我希望，在学习成长的过程中，你能够摆脱一些功利性，不用去回避遇到的痛苦和挫败感，多从这个过程中找到获得知识的快乐。希望这个专栏能够给你带来发现的乐趣，也能够为你在未来的生活里铺垫上那小小的一步。相信这个专栏不是你学习的终点，也也不是我探索和发现新主题的终点。说不定，在不久的未来我们还会有缘再见。对了，我在文章末尾放了一个毕业调查问卷。在这 5个月的学习过程中，如果你对这个专栏或者我本人有什么建议，可以通过这个问卷给我反馈，我一定会认真查看每一封的内容。期待你的反馈！![](Images/99c3934a4afcfaf6fa4cb883ee3966d5.png){savepage-src="https://static001.geekbang.org/resource/image/9a/9b/9a6d167383d98db7d72770ba07f8009b.jpg"}](https://jinshuju.net/f/Nurf3L)
# FAQ第一期 \| 学与不学，知识就在那里，不如就先学好了你好，我是徐文浩。专栏上线三个多月，我们已经进入后半段。首先，恭喜跟到这里的同学，很快你就可以看到胜利的曙光了。如果你已经掉队了，不要紧，现在继续依然来得及。其次，非常感谢同学们的积极留言，看到这么多人因为我的文章受到启发、产生思考，我也感到非常开心。因此，我特意把留言区中非常棒的、值得反复阅读和思考的内容，摘录出来，供你反复阅读学习。有些内容你可能已经非常熟悉了，但是随着工作、学习经验的不同，相信你的理解也会不一样；有些内容可能刚好也是你的疑问，但是你还没发现，这里说不定就帮你解决了。今天第一期，我们先来聊聊，"学习"这件事。我准备了五个问题，话不多说，一起来看看吧！------------------------------------------------------------------------
## Q1："要不要学"和"学不会怎么办"系列![](Images/2c807ec8b1e88d99bd9279984d070705.png){savepage-src="https://static001.geekbang.org/resource/image/eb/86/eba537e71418f1af3ddedcd7940f4386.jpeg"}专栏已经更新三个多月了，但是我估计很多人还是停留在前面 3篇的学习上（我相信，一定有的）。我观察了一下，其实很多人并不是真的学不会，而是"不敢学"，往往还没开始就被自己给吓到了。很多优秀的人，并非真的智商有多么高，而是他们敢于尝试，敢于突破自己的舒适区。所以说，学习底层知识或者新知识的第一点，就是要"克服恐惧"，其实大部分东西上手了都不难，都很有意思。就像《冰与火之歌》里面，水舞者教导艾莉亚时的情况一样，"恐惧比利剑"更伤人。破除对于基础知识"难"的迷信，是迈向更高水平必经的一步。``{=html}"组成原理可以算是理解计算机运作机制的第一门入门课，这门课的交付目标就是让科班的同学们能够温故而知新，为非科班的同学们打开深入学习计算机核心课程的大门。"这是我在专栏刚上线的时候给一个同学的留言回复，现在拿过来再给你说一遍。另外，大家在学校里学这些课程的时候，都会遇到一个问题，那就是理论和我们的编程应用实践离得比较远。在这个专栏里，我的目标是让大家能够更"实践"地去学习计算机组成原理。所以，这门课我的目标就是尽量讲得"理论和实践相结合"，能和你的日常代码工作结合起来。让非科班的同学们也能学习到计算机组成原理的知识，所以在深入讲解知识点之外，我会尽量和你在开发过程中可能遇到的问题放到一块儿，只要跟着课程的节奏走，不会跟不上哦。**（跟到这里的同学可以在留言区冒个泡，给跟不上的同学招个手，让他们放心大胆看过来。）**我自己在大学的时候也不是个"好学生"。现在回头看，我自己常常觉得大学的时候没有好好读书，浪费了很多时间。常常想，当时要是做了就好了。当时，不是就是现在么？学或者不学，知识就在那里，不如就先学好了啊。
## Q2："计算机组成原理"和"操作系统"到底有啥不一样？![](Images/7cf7ebe29931baf696b8f27894cf492e.png){savepage-src="https://static001.geekbang.org/resource/image/d4/6b/d4a64cf654218cf992c6cf621356ee6b.png"}其实操作系统也是一个"软件"，而开发操作系统，只需要关注到"组成原理"或者"体系结构"就好了，不需要真的了解硬件。操作系统，其实是在"组成原理"所讲的"指令集"上做一层封装。体系结构、操作系统、编译原理以及计算机网络，都可以认为是组成原理的后继课程。体系结构不是一个系统软件，它更多地是讲，如何量化地设计和研究体系结构和指令集。操作系统、编译原理和计算机网络都是基于体系结构之上的系统软件。其实这几门基础学科，都是环环相扣，相互渗透的，每一门课都不可能独立存在。不知道你现在是否明白这几门基础学科的价值呢？
## Q3："图灵机"和"冯·诺依曼机"的区别![](Images/35a0a186cb6d789b2f5847de992a3e5b.png){savepage-src="https://static001.geekbang.org/resource/image/ce/dd/ce241278076f71c81a78812de51114dd.jpg"}首先，先回答一下这道题本身。有些同学已经回答的不错。我把他们的答案贴在这里。你可以看看跟你想的是不是一样。**Amanda]{.orange} 同学：**> 两者有交叉但是不同，根据了解整理如下：> 图灵机是一种思想模型（计算机的基本理论基础），是一种有穷的、构造性的问题的求解思路，图灵认为凡是能用算法解决的问题也一定能用图灵机解决；\> 冯·诺依曼提出了"存储程序"的计算机设计思想，并"参照"图灵模型设计了历史上第一台电子计算机，即冯·诺依曼机。图灵机其实是一个很有意思的话题。我上大学的时候，对应着图灵机也有一门课程，叫作"可计算性理论"，其实就是告诉我们什么样的问题是计算机解决得了的，什么样的问题是它解决不了的。在我看来，图灵机就是一个抽象的"思维实验"，而冯·诺依曼机就是对应着这个"思维实验"的"物理实现"。如果我们把"图灵机"当成"灵魂"，代表计算机最抽象的本质，那么"冯诺伊曼机"就是"肉体"，代表了计算机最具体的本质。这两者之间颇有理论物理学家和实验物理学家的合作关系的意思，可谓是一个问题的两面。冯·诺依曼体系结构距今已经几十年了，目前，我们还没有看到真正颠覆性的新的体系结构出现，更多地是针对硬件变化和应用场景变化的优化。但是过去几年随着深度学习、IoT等的发展，体系结构又有了一波新的大发展，也许未来会有新的变化呢，我们可以拭目以待。
## Q4：工作多年，如何保持对知识清晰、准确的认识？![](Images/b810371aa6b3272c22fbe96d9a89913f.png){savepage-src="https://static001.geekbang.org/resource/image/fa/05/fafe82142456949c5e1e670efe102705.png"}我之前跟很多人聊过，发现工作很多年之后的工程师，在计算机科学的基础知识上，反而比不上很多应届的同学。我总结下来，大概有这么几个因素。首先，很多工程师只是满足于工作的需求被满足了，没有真的深入去搞清楚一个问题的原理。从网络上搜索一段代码，复制粘贴到自己的程序里，只要能跑就认为问题解决了，并没有深入一行行看明白每行代码到底是做了什么，为什么要这么做。比如说，我们现在要提升 RPC和序列化的性能，很多人的做法是，找一个教程用一下 Thrift这样的开源框架，解决眼下的问题就完事儿。至于，Thrift是怎么序列化的，每一种里面支持的 RPC协议是怎么回事儿，完全不清楚。其实这些开源代码并不复杂，稍微花点时间，搞清楚里面的实现细节和原理，你对二进制存储、程序性能、网络性能，就会有一个更深刻的认识，之后遇到类似的问题你就不会再一问三不知，久而久之你的能力就会得到提升。其次，读书的时候我们认为一个东西掌握扎实了，有时候其实未必。很多人估计都有感受，像计算机这类实践性比较强的专业，书上所学和真正实践中所用完全是两码事。背出计算机的五大组成部分，似乎和我们的实际应用没有联系，但是在实际的系统开发过程中，无论是内存地址转换使用的页表树这样的数据结构，还是各个系统组件间通过总线进行通信的模式，其实都可以和我们自己的应用系统开发里的模式和思路联系起来。至于究竟该怎么去掌握知识，其实没有什么特别好的方法。我就说说我一般会怎么做，一方面，遇到疑难问题、复杂的系统时，必须要用更底层更本质的理解计算机运作的方式，去处理问题，自然会去回头把这些基础知识捡起来；另一方面，时不时抽点时间回头看看一些"大部头"的教科书，对我自己而言，本身就很有自我满足感，而这种自我满足感也会促使我不断去读它们，从而形成一个良性循环。