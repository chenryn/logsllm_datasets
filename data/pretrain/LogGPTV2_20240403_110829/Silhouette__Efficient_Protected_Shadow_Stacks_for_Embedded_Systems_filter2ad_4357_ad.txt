runtime overhead (1.3% and 0.3% on average for CoreMark-
Pro, respectively) and small increases in code size (8.9% and
2.2%, respectively). In addition, we compare Silhouette with
the two most closely related defenses, RECFISH [70] and
µRAI [5]; they both protect return addresses of programs run-
ning on microcontroller-based embedded devices but leverage
different mechanisms than Silhouette.
8.1 Methodology
We evaluated Silhouette on an STM32F469 Discovery
board [64, 66] that can run at speeds up to 180 MHz. The
board encapsulates an ARM Cortex-M4 processor [9] and has
384 KB of SRAM (a 320 KB main SRAM region and a 64 KB
CCM RAM region), 16 MB of SDRAM, and 2 MB of ﬂash
memory. As some of our benchmarks allocate megabytes of
memory, we use the SDRAM as the main memory for all
programs; global data remains in the main SRAM region.
We used unmodiﬁed Clang 9.0 to compile all benchmark
programs as the baseline, and we compare this baseline with
programs compiled by Silhouette, Silhouette-Invert, and SSFI
for performance and code size overhead. We also measured
the overhead incurred for each benchmark program when
transformed with only the shadow stack (SS) pass, only the
store hardening (SH) pass, and only the CFI pass. For all
experiments, we used the standard -O3 optimizations, and
1228    29th USENIX Security Symposium
USENIX Association
Baseline
(ms)
12,765
137,385
18,278
35,241
222,461
9,985
17,270
40,725
19,955
SS
(×)
1.002
1.013
1.000
1.000
1.000
1.004
1.000
1.002
1.000
9,985
222,461
1.000
1.013
— 1.002
SH
(×)
1.004
1.002
1.010
1.049
1.013
1.001
1.007
1.005
1.000
1.000
1.049
1.010
CFI
(×)
1.001
1.000
1.000
1.000
1.000
1.001
1.000
0.999
1.000
0.999
1.001
1.000
Silhou-
ette (×)
1.006
1.017
1.010
1.049
1.013
1.005
1.007
1.007
1.001
1.001
1.049
1.013
Invert
(×)
1.003
1.015
1.000
1.000
1.000
1.004
1.000
1.005
1.000
1.000
1.015
1.003
SSFI
(×)
1.041
1.024
1.015
1.016
1.023
1.009
1.019
1.046
1.006
1.006
1.046
1.022
cjpeg-rose7-...
core
linear_alg-...
loops-all-...
nnet_test
parser-125k
radix2-big-64k
sha-test
zip-test
Min
Max
Geomean
Table 2: Performance Overhead on CoreMark-Pro
we used LLVM’s lld linker with the -flto option to do
link-time optimization.
As Silhouette-Invert requires a hardware enhancement for a
fully-functional implementation, the numbers we present here
are an estimate of Silhouette-Invert’s performance. However,
as Sections 5.5 and 6.5 discuss, the hardware changes needed
by Silhouette-Invert should have minor impact on execution
time and no impact on code size. Therefore, our evaluation
of the Silhouette-Invert prototype should provide an accurate
estimate of its performance and memory overhead.
We discuss the implementation of SSFI and compare it
with Silhouette and Silhouette-Invert in Section 8.5.
8.2 Benchmarks
We chose two benchmark suites for our evaluation: CoreMark-
Pro [34] and BEEBS [58]. The former is the de facto industry
standard benchmark for embedded processors; the latter has
been used in the evaluation of other embedded defenses [24,
44, 70].
CoreMark-Pro The CoreMark-Pro [34] benchmark suite is
designed for both low-end microcontrollers and high-end mul-
ticore processors. It includes ﬁve integer workloads (includ-
ing JPEG compression and SHA-256) and four ﬂoating-point
workloads such as fast Fourier transform (FFT) and a neural
network benchmark. One of the workloads is a more memory-
intense version of the original CoreMark benchmark [33];
note, ARM recommends the use of the original CoreMark
benchmark to test Cortex-M processors [10]. We used commit
d15927b of the CoreMark-Pro repository on GitHub.
The execution time of CoreMark-Pro is reported by bench-
marks themselves, which is by calling HAL_GetTick() [63]
to mark the start and the end of benchmark workload execu-
tion and printing out the time difference in milliseconds. We
added code before the main function starts to initialize the
HAL, set up the clock speed, conﬁgure the MPU, and estab-
lish a serial output. We run each CoreMark-Pro benchmark in
different number of iterations so that the baseline execution
time is between 5 to 500 seconds.
Baseline
(ms)
2,755
1,393
28,657
40,580
2,677
16,274
16,418
8,846
46,129
7,835
5,901
124,578
1,938
7,030
43,010
43,564
78,849
1,327
1,359
1,058
2,135
7,802
4,163
55,894
20,036
3,168
1,335
97,960
160,307
SS
(×)
1.001
1.015
1.002
1.002
1.000
1.000
1.000
1.000
1.000
1.005
1.000
1.000
1.010
1.000
1.037
1.000
1.001
1.001
1.001
1.001
1.000
1.092
1.031
1.000
1.002
1.073
1.037
1.000
1.011
1,058
160,307
1.000
1.092
— 1.011
SH
(×)
1.247
1.011
1.002
1.001
1.004
1.000
1.000
1.003
1.005
1.019
1.011
0.997
1.008
1.003
1.057
1.036
1.008
1.006
1.000
0.999
1.029
1.017
1.013
1.002
1.002
1.052
1.006
1.001
1.013
0.997
1.247
1.018
CFI
(×)
1.000
0.999
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
0.997
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.000
1.002
1.000
1.022
1.000
1.016
0.997
1.022
1.001
Silhou-
ette (×)
1.248
1.027
1.002
1.003
1.004
1.000
1.000
1.000
1.005
1.207
1.012
0.997
1.016