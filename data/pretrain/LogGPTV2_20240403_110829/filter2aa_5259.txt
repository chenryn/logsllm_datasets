### 栈的基本介绍

栈是一种遵循后进先出（Last In, First Out, LIFO）原则的数据结构。其主要操作包括压栈（push）和出栈（pop），这两种操作均作用于栈顶元素，而栈底则表示最早被压入的数据。如下图所示（引用自维基百科）。

在高级编程语言的执行过程中，源代码会被编译器或解释器转换成汇编语言，进而形成机器码。在这个阶段，栈作为一种重要的数据结构得到了广泛应用。每个程序运行时都会分配到一个虚拟地址空间，其中的一部分专门用于构建该程序的调用栈，主要用于存储函数调用信息以及局部变量等。值得注意的是，**在大多数系统架构下，程序栈是从高地址向低地址增长的**。

### 函数调用栈详解

为了更深入地理解函数调用过程中栈的作用机制，请参考以下资源：
- [C语言函数调用栈(一)](http://www.cnblogs.com/clover-toeic/p/3755401.html)
- [C语言函数调用栈(二)](http://www.cnblogs.com/clover-toeic/p/3756668.html)

此外，对于不同位数的处理器架构而言，在处理函数调用时存在一些差异：
- **x86架构**：在此体系结构中，当发生函数调用时，实际参数会被放置在返回地址之上。
- **x64架构**：根据System V AMD64 ABI标准（广泛应用于Linux、FreeBSD及macOS等操作系统），前六个整型或指针类型的参数将依次通过RDI、RSI、RDX、RCX、R8和R9寄存器传递给被调函数；若需传递更多参数，则超出部分将按照约定顺序保存至堆栈之中。同时需要注意的是，在x64环境下，有效内存地址范围不应超过0x00007FFFFFFFFFFF这一界限，否则将会触发异常情况。