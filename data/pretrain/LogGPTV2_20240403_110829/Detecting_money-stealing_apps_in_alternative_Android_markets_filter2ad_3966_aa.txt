title:Detecting money-stealing apps in alternative Android markets
author:Chao Yang and
Vinod Yegneswaran and
Phillip A. Porras and
Guofei Gu
POSTER: Detecting Money-Stealing Apps in Alternative
Android Markets
Chao Yang
Texas A&M University
College Station, TX
PI:EMAIL
Vinod Yegneswaran
SRI International
Menlo Park, CA
PI:EMAIL
Phillip Porras
SRI International
Menlo Park, CA
PI:EMAIL
Guofei Gu
Texas A&M University
College Station, TX
PI:EMAIL
ABSTRACT
The prevalence of malware in Android marketplaces is a
growing and signiﬁcant problem. Among the most worri-
some concerns are with regarding to malicious Android ap-
plications that attempt to steal money from unsuspecting
users. These malicious applications get uploaded under the
guise of benign applications, typically to third-party alter-
native market places that lack proper security vetting pro-
cedures, and are subsequently downloaded and executed by
unsuspecting victims.
In this work, we propose “Money-
Guard”, a systematic approach to detect stealthy money-
stealing applications in popular Android markets. Our tech-
nique relies on detecting two key behavioral heuristics that
seem to be common across many money-stealing Android
malware: hardcoded exﬁltration and notiﬁcation suppression.
In our preliminary analysis of 47 SMS-based money stealing
applications, we conﬁrm that 41 of these applications fol-
low the above pattern, and describe a light weight detection
approach that will identify this behavioral pattern.
Categories and Subject Descriptors: D.4.6[Security and
Protection]: Invasive software
General Terms: Security
Keywords: Android, Malicious apps, Security, Money-stealing
1.
INTRODUCTION
A particularly attractive aspect of the Android platform
is its “open-market” strategy that helps sustain an open and
unregulated ecosystem of third-party marketplaces. The
lack of centralized control facilitates uninhibited develop-
ment and dissemination of android applications. Unfortu-
nately, cybercriminals have sensed this as an opportunity
to unleash malicious Android applications. Google has real-
ized the seriousness of the malware threat and implemented
the Google Bouncer for its GooglePlay marketplace. How-
ever, it remains easy for clever malware to ﬁngerprint and
evade the analysis of its Bouncer [3]. Furthermore, Google-
Play remains inaccessible in countries like China where users
have no choice but to rely on dubious third-party market-
places. A rising and insidious threat in these marketplaces
Copyright is held by the author/owner(s).
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
ACM 978-1-4503-1651-4/12/10.
is money-stealing malware that steals user money from in-
nocent victims by conducting unauthorized transactions.
Telecommunication companies charge their mobile cus-
tomers by measuring their usage of billing services, such as
short message services (SMS), phone calls, and network traf-
ﬁc. However, third-party identities (e.g., owners of premium-
rate telephone numbers), who provide particular service to
customs, could also beneﬁt from customer’s usage of cer-
tain services. Thus, many ﬁrst-generation malicious money-
stealing android applications have been developed that steal
money by launching premium services in a surreptitious man-
ner from within the android device.
These applications are more than a nuisance with poten-
tial to inﬂict signiﬁcant economic loss to victims while gar-
nering decent proﬁts for the malware developers. In Novem-
ber 2011, malicious Android applications, posed as “Angry
Birds” and “Cut the Rope” to send premium rate text mes-
sages, aﬀected 1,391 mobile numbers in the UK and de-
frauded customers of £27,850 [4].
In China, the develop-
ment and dissemination process of such money-stealing an-
droid applications has become industrialized. According to
a recent study in China, a notorious malicious app, named
“Piranha”, could steal 50 million RMB (around 8 million
dollars) in a year and more than 210,000 Chinese mobile de-
vices have been aﬀected by this money-stealing application
as of March 2012 [5].
In this work, we propose “MoneyGuard” as a new ap-
proach to detect such money-stealing Android applications.
We speciﬁcally target those stealthy money-stealing applica-
tions, which try to expend money, unbeknownst to the user,
by adopting one or more of the following behavioral patterns:
sneakingly sending messages to hard-coded third-party pre-
mium services; automatically dialing calls to ﬁxed premium
numbers in the backgrounds; and visiting certain websites
or remote servers to achieve illicit goals. More speciﬁcally,
unlike other types of malware, these money-stealing appli-
cations aspire to be able to continuously charge the victim’s
account without providing any notiﬁcations. Thus, besides
containing malicious billing logic, these applications are also
embed surreptitious logic or tricks to suppress the notiﬁca-
tions resulting from such behaviors to the victims (A real
case study is described in Section 3).
2. RELATED WORK
The growing threat of malicious Android applications has
1034been recognized both by academic research and industry.
Battery-based approaches were ﬁrst built to detect mobile
malware [10, 9]. Schmidt et al. detect malicious Android
application by statically analyzing Linux executable com-
mands and Linux-kernel system calls in Android devices[11].
Bose et al. utilize malicious behavioral signatures to detect
malware on mobile handsets [7]. TaintDroid [8] detects pri-
vacy leaks by applications in third-party marketplaces by
tracking the ﬂow of privacy-sensitive data. Our work is
most similar to DroidRanger [12], which detects malicious
applications from known families by statically matching the
signature, and malicious applications from unknown fami-
lies by dynamically recording the usages of Android system
calls and manually checking suspicious ones based-on several
heuristics. However, our work diﬀers in our focus on detect-
ing money-stealing applications, and the heuristics that we
emphasize (hard-coded ex-ﬁltration parameters and notiﬁ-
cation suppression).
3. DESIGN
Rabbit Year’s Calendar Case Study. We ﬁrst demon-
strate how a real malicious application, named “Rabbit Year’s
Calendar”, steals victims’ money by sending SMS messages
to a premium-rate number after clicking the screen of the
calendar ﬁve times.
It can also block billing-notiﬁcation
messages from corresponding telecommunication companies.
As shown in Figure 1, we can divide its behavioral proﬁle
into three steps: (1) claiming needed permissions; (2) send-
ing message to a “hard-coded” premium-rate number; (3)
blocking SMS notiﬁcations sent from the ISP to users.
This application ﬁrst registers Telephony.SMS_RECEIVED
(one SMS receiver) and claims two permissions SEND_SMS
and RECEIVE_SMS, so that it could have the permission to
send short messages and intercept short messages. Then,
this application will send an SMS message to a “hard-coded”
premium-rate number (“1066185829”) by using two system
calls “SmsManager.getDefault()” and “SendTextMessage()”
in order. To stop user notiﬁcations of such malicious behav-
ior, it also blocks billing-notiﬁcation for the usage of SMS
messages sent from corresponding ISPs by building a sub
class (“SmsReciever”) of “BroadcastReceiver”, inheriting a
receive function (“onReceive()”) and using the system call
(“abortBroadCast()”) to abort the SMS messages.
Figure 2: The system architecture of MoneyGuard.
System Design. As described in Section 1, MoneyGuard
is primarily designed to detect those malicious money-stealing
applications which surreptitiously send SMS messages, dial
phone calls and visit web servers. Hence, MoneyGuard con-
tains three components: Billing Permission Extractor, Billing
Behavior Identiﬁer and Notiﬁcation Suppression Detector
(See Figure 2).
Billing Permission Extractor. Without registering
speciﬁc receivers or claiming corresponding permissions, ma-
licious applications cannot accomplish billing behaviors such
as sending SMS messages or dialing a phone number. Hence,
we design a component, which extracts permissions and re-
ceivers related with speciﬁc billing behaviors from “Android-
Manifest.xml” to check potential abilities to launch billing
behaviors. For example, if an application tries to make a
phone call, it may have to claim the permission CALL_PHONE.
Thus, this component will output whether an application
has the permissions (named as billing permissions) to send
SMS, make phone calls or access the Internet. In addition,
by parsing the receivers registered in an application, this
component will also output whether this application could
intercept SMS messages and phone calls. As the previous
case study shows, if an application tries to intercept and
block SMS messages, it has to register a receiver with the
action SMS_RECEIVED. The billing permissions that are ex-
amined by MoneyGuard are summarized in Table 1.
Table 1: Extracted Billing Permissions
Billing Behavior
Permission
SMS