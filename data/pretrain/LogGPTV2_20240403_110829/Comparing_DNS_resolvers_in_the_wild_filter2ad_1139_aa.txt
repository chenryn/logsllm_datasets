title:Comparing DNS resolvers in the wild
author:Bernhard Ager and
Wolfgang M&quot;uhlbauer and
Georgios Smaragdakis and
Steve Uhlig
Comparing DNS Resolvers in the Wild
Bernhard Ager
T-Labs/TU Berlin
PI:EMAIL
Georgios Smaragdakis
T-Labs/TU Berlin
PI:EMAIL
Wolfgang Mühlbauer
ETH Zurich
PI:EMAIL
Steve Uhlig
T-Labs/TU Berlin
PI:EMAIL
ABSTRACT
The Domain Name System (DNS) is a fundamental building
block of the Internet. Today, the performance of more and
more applications depend not only on the responsiveness of
DNS, but also the exact answer returned by the queried DNS
resolver, e. g., for Content Distribution Networks (CDN).
In this paper, we compare local DNS resolvers against
GoogleDNS and OpenDNS for a large set of vantage points.
Our end-host measurements inside 50 commercial ISPs re-
veal that two aspects have a signiﬁcant impact on respon-
siveness: (1) the latency to the DNS resolver, (2) the content
of the DNS cache when the query is issued. We also observe
signiﬁcant diversity, even at the AS-level, among the answers
provided by the studied DNS resolvers. We attribute this
diversity to the location-awareness of CDNs as well as to the
location of DNS resolvers that breaks the assumption made
by CDNs about the vicinity of the end-user and its DNS
resolver. Our ﬁndings pinpoint limitations within the DNS
deployment of some ISPs, as well as the way third-party
DNS resolvers bias DNS replies.
Categories and Subject Descriptors
C.2.5 [Computer-Communication Networks]: Local
and Wide-Area Networks—Internet
General Terms
Measurement, Performance
Keywords
DNS resolvers, measurement, performance analysis
1.
INTRODUCTION
The Domain Name System (DNS) was originally intended
to provide a naming service, i. e., one-to-one mappings be-
tween a domain name and an IP address. Since then, the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’10, November 1–3, 2010, Melbourne, Australia.
Copyright 2010 ACM 978-1-4503-0057-5/10/11 ...$10.00.
popular applications have changed from static content host-
ing to distributed and dynamic content delivery. As a con-
sequence, DNS is a highly scalable system that fulﬁlls the
needs of applications that often have very strong require-
ments in terms of responsiveness of DNS [9, 10, 12]. The
scalability of the DNS system stems from the heavy use of
caching by DNS resolvers [8].
Today, the DNS system has become a commodity infras-
tructure that allows applications to map individual users
to speciﬁc content. This behavior clearly diverges from the
original purpose of deploying DNS, and is sometimes con-
sidered as abusing it [17]. Given the importance of DNS
for end-user experience and how much the DNS system has
changed over the last decade, in this paper we study DNS
deployment in commercial ISPs and compare it with widely
used third-party DNS resolvers, GoogleDNS and OpenDNS.
Based on active measurements carried out across more
than 50 commercial ISPs, spanning 5 continents and 28
countries around the world, we study the responsiveness and
the returned IP addresses by the local DNS resolvers as well
as GoogleDNS and OpenDNS. Our results show that a sur-
prisingly high number of commercial ISPs suﬀer from poor
latency to the local DNS resolver.
In general, our results
do not reveal drastic diﬀerences between the local DNS re-
solvers, GoogleDNS, and OpenDNS, in terms of responsive-
ness. Several ISPs show clear signs of DNS load balancing,
that leads to a poor usage of DNS caching.
Our ﬁndings also reveal that third-party DNS resolvers do
not manage to redirect the users towards content available
within the ISP, contrary to the local DNS ones. We con-
jecture and partly validate that the reason for this behavior
of third-party DNS resolvers has to do with their location,
typically outside ISPs, in combination with current inability
of DNS resolvers to indicate the original IP address of the
end-host in the DNS requests [5]. The current advantage of
local DNS resolvers is their ability to represent the end-user
in terms of geographic location and its vicinity to content.
In spite of the importance of DNS, we are not aware of
any work that has performed such an extensive study of
the DNS system based on measurements from end-hosts,
and compared local DNS resolvers against third-party DNS
resolvers.
The remainder of this paper is structured as follows: we
start with an overview of the DNS system (Section 2) and
describe our data set and how it was collected in Section 3.
Then Section 4 analyzes our results before we conclude in
Section 5.
152. DOMAIN NAME SYSTEM
In this section we give a brief overview of the design of the
Domain Name System (DNS) and how the diﬀerent DNS
components interact. We also take a look at how DNS is
being used today.
2.1 DNS Primer
DNS relies on a distributed database with a hierarchical
structure. The root zone of the DNS system is centrally ad-
ministered and serves its zone information via a collection
of root servers. The root servers delegate responsibility for
speciﬁc parts (zones) of the hierarchy to other name servers,
which may in turn delegate the responsibility to other name
servers. At the end, each site is responsible for its own
domain and maintains its own database containing its infor-
mation and operates an authoritative name server.
The whole database is usually queried by end-hosts using
a local name server called caching resolver.
If this name
server receives a query for information that it does not have,
it must fetch this information from another name server. If
the server does not know how to contact the authoritative
server for a zone, it will query a root server1. The root server
will refer the resolver to another server that is authoritative
for the domain that is immediately below the root and of
which the zone is a part. The resolver will then query this
server, and so forth, stepping down the tree from the root
to the desired zone.
For eﬃciency reasons DNS relies heavily on caching [8].
All information that a name server delivers to a resolver is
cached for a duration speciﬁed in the TTL ﬁeld of the re-
source records (RR). Caching today is usually also performed
on end-hosts by the operating system’s stub resolver, as well
as applications, e. g., web browsers.
2.2 DNS Today
When DNS was introduced in 1983, its sole purpose was
to resolve host names into IP addresses in a more scalable
fashion than the until then used hosts ﬁle. Since then a
number of features and new uses have found their way into
the omnipresent DNS. In addition to the increasing complex-
ity within the DNS protocol itself [16], new and oftentimes
unforeseen (ab)uses have been established. Paul Vixie gives
an overview in [17]. The most important points of critique
are as follows:
CDN load balancing: Content delivery networks
set
short TTLs on their DNS answers to allow for short
reaction times to load shifts, thus crippling cacheabil-
ity and scalability of the whole system. In addition,
CDNs tailor their reply for the IP address of the re-
questing resolver using the often misguided assumption
that the DNS resolver is close to the client originating
the request.
NXDOMAIN catcher: Some ISPs and also OpenDNS
mangle a negative reply with the NXDOMAIN sta-
tus code into a positive one with the IP address of a
search website under the control of the ISP. By host-
ing advertisements along the search results it is easily
possible to increase the proﬁt margin. While this may
1The ﬁrst query can go to some authoritative server below
the root if there exists cached information.
work to some degree for web browsing, applications re-
lying on proper delivery of NXDOMAIN records, e. g.,
email, are inevitably hampered.
A third-party ecosystem around DNS has evolved over
the last couple of years. Players like OpenDNS, Advan-
tageDNS, UltraDNS, and most recently Google oﬀer open
resolvers to anyone with diﬀerent feature sets. OpenDNS
Basic does NXDOMAIN catching but oﬀers phishing and
botnet protection for free. Furthermore, OpenDNS increases
the service level for payment between 5 dollars a month
up to several thousand dollars per year for business cus-
tomers. When Google Public DNS entered the market,
their highest-valued goals were to “speed up your brows-
ing experience” and to “improve your security.” To achieve
both targets Google advertises an impressive list of optimiza-
tions and ﬁne tuning [2], e. g., prefetching, load balancing
with shared cache, validity checking, and nonce prepending.
Google Public DNS also refrains from utilizing NXDOMAIN
to make proﬁt. From an implementation perspective, most
if not all of the third-party resolvers host their DNS servers
on multiple sites around the globe and use anycast to guide
DNS clients to the nearest resolver.
In this open market space a user annoyed by his ISP’s DNS
can easily choose for cost-free third-party service. Tools like
namebench [3] might help him in choosing a well-performing
one. The irony however is that a user by choosing a diﬀerent
DNS than the one assigned by his ISP will most likely un-
dermine the traﬃc matrix optimizations performed by CDNs
and ISPs, and can potentially even lower his quality of ex-
perience due to longer download times.
3. MEASUREMENTS
Data collection on end-hosts is intrinsically diﬃcult due
to lack of willingness to participate or due to privacy con-
cerns [7]. Yet, for this paper we are interested in the DNS
performance as perceived by end-users and therefore make
eﬀorts to collect data directly from users’ computers. This
section describes our data and how it was collected.
To achieve our goal of comparing the responsiveness of
various DNS resolvers, we wrote code that performs DNS
queries for more than 10, 000 hosts. Amongst other tasks,
the code measures DNS response times and returned TTLs
for all queried hosts, relying on diﬀerent DNS resolvers. We
asked friends to run our code in early April 2010, leading
to traces from more than 60 vantage points, covering 28
countries and 5 continents. Overall, we have obtained traces
for some 50 commercial ISPs. During our measurements, the
following information was collected:
1. Vantage point: Our code initially determines the
public IP address and operating system of the exe-
cuting machine as well as a current time stamp and
the IP address of the local DNS resolver.
2. Resolver: Periodically, we determine the RTT2 to-
wards the local, Google, and OpenDNS resolver and
perform traceroutes towards these three resolvers.
This reveals potential route changes and the proximity
of DNS resolvers to our vantage points.
2We rely on the response time reported by dig when query-
ing for the root zone NS records, rather than using ping or
traceroute.
163. Host: For each of our approximately 10, 000 target
host names we perform, using the dig program, two
consecutive DNS queries and measure the response
times. Comparing response times between the ﬁrst
and second query gives insights into caching and load
balancing, see Section 4.2. Besides response times, we
record the returned TTL values and the IP addresses
of the DNS responses.
Presumably, the majority of Internet users rely on DNS
services that are provided by their ISP. This local DNS re-
solver is automatically conﬁgured during the dial-in hand-
shake or via DHCP (Local DNS ). Yet, alternative DNS pro-
viders claim to speed up the browsing experience (Google-
DNS) [2], and some users think that DNS queries can be
processed much more quickly by employing a large cache of
domain names (OpenDNS) [4]. To check for potential diﬀer-
ences in performance, our code sends the same DNS queries
to multiple DNS servers: the locally conﬁgured DNS server,
to 8.8.8.8, and to 208.67.222.222, whereby the latter two
are the DNS IP addresses used by Google and OpenDNS,3
respectively.
In order to improve its eﬃciency, DNS heavily relies on
caching, i. e., storing DNS query results for a period of time
in DNS cache servers provided by ISPs or in home routers
that implement DNS caches. As we seek to investigate po-
tential bias in DNS response times for diﬀerent types of
queried hosts (e. g., popular vs. rarely queried hosts), we
download from Alexa the list of top 1, 000, 000 sites [1], and
select more than 10, 000 hosts to be queried by our code as
follows:
top5000: These are the 5, 000 most popular hosts accord-
ing to the Alexa ranking. The answer to many of these
DNS queries may already be stored at close-by cache
servers. We point out that the top5000 hosts are se-
lected based on a global ranking, and hence are not
necessarily the most popular hosts if ranked by coun-
try, region, etc.
tail2000: These are 2, 000 hosts from the tail of the Alexa
ranking and are less likely to be cached in close-by
DNS servers.
embedded: Many web-pages include embedded content
(e. g., AVI, Flash, or Java) that the browser may have
to retrieve separately from diﬀerent domains. We take
the top 1, 000 hosts according to the Alexa ranking,
download with wget the content of all these hosts and
compile a list of domains from which such embedded
content is retrieved. By doing so, we obtain some
3, 500 host domains.
Restricting to 10, 000 hosts allows our measurements to
ﬁnish within a couple of hours, which turned out to be
acceptable to our end-users. Resolving the names of our
10, 000 hosts reveals that a signiﬁcant number of them (709)
rely on DNS redirection. The set redirected contains all
host names for which we see a CNAME record to an external
domain (such as a CDN). The set akamaized is a subset of
redirected, containing the 434 hosts that are redirected to
3Other DNS IP addresses such as 8.8.4.4 for GoogleDNS are
generally conﬁgured as secondary DNS server.
Akamai. Information about redirection will be used for the
CDN study in Section 4.3.
In principle, there can be interactions between two diﬀer-
ent vantage points in our experiments if the script is run
close in time and based on the same list of hosts: for exam-
ple, OpenDNS or GoogleDNS can cache the answer when
vantage point A sends a query. When another vantage point
B sends the same query, the response time will be signiﬁ-
cantly shorter if the reply is already in the cache. How-
ever, by inspecting timestamps in our traces and the DNS
servers’ approximate locations as revealed by traceroute and
the RTT, we can infer whether interactions may have hap-
pened. The traces presented here are carefully selected and
do not show any degree of interaction.
4. EVALUATION OF DNS RESOLVERS
In this section we rely on the measurements explained in
the previous section, and analyze the behavior of the dif-
ferent DNS resolvers, with respect to responsiveness (Sec-
tion 4.1), DNS deployment (Section 4.2) and the returned
answers (Section 4.3).
4.1 Responsiveness
Google claims on its website that Google Public DNS
speeds up browsing performance [2]. One primary goal of
this paper is to understand the impact of the selected DNS
resolver on the observed DNS response time.
Is it really