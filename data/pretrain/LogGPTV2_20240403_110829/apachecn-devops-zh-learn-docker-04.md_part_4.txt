当我们比较映像的大小时，我们得到以下输出:
```
$ docker image ls | grep hello-world
hello-world-small   latest    f98...    20 seconds ago     4.16MB
hello-world         latest    469...    10 minutes ago     176MB
```
我们已经能够将大小从 176 MB 减少到 4 MB。这是尺寸缩小了 40 倍。较小的映像大小有许多优点，例如黑客的攻击表面积更小，内存和磁盘消耗减少，相应容器的启动时间更快，以及从注册表(如 Docker Hub)下载映像所需的带宽减少。
# 最佳实践文件
创作 Dockerfile 时，有几个推荐的最佳实践需要考虑，如下所示:
*   首先，我们需要考虑容器是短暂的。我们所说的短暂，是指一个容器可以被停止和销毁，而一个新的容器可以通过最少的设置和配置来构建和放置。这意味着我们应该努力将初始化容器内运行的应用所需的时间以及终止或清理应用所需的时间保持在最低限度。
*   下一个最佳实践告诉我们，我们应该在 Dockerfile 中对各个命令进行排序，以便尽可能多地利用缓存。构建一层映像可能需要相当长的时间，有时需要几秒钟甚至几分钟。在开发应用时，我们将不得不多次为我们的应用构建容器映像。我们希望将构建时间保持在最低限度。
当我们重建以前构建的映像时，重建的图层只有那些已经更改的图层，但是如果一个图层需要重建，所有后续图层也需要重建。这一点很重要要记住。考虑以下示例:
```
FROM node:9.4
RUN mkdir -p /app
WORKIR /app
COPY . /app
RUN npm install
CMD ["npm", "start"]
```
在本例中，Dockerfile 第 5 行的`npm install`命令通常耗时最长。一个经典的 Node.js 应用有很多外部依赖，这些都是在这个步骤中下载和安装的。这可能需要几分钟才能完成。因此，我们希望避免每次重建映像时都运行`npm install`，但是在应用开发过程中，开发人员一直在更改他们的源代码。这意味着第四行，也就是`COPY`命令的结果，一直在变化，并且这一层每次都必须重建。但正如我们之前所讨论的，这也意味着所有后续图层都必须重建，在这种情况下包括`npm install`命令。为了避免这种情况，我们可以稍微修改 Dockerfile，并具有以下内容:
```
FROM node:9.4
RUN mkdir -p /app
WORKIR /app
COPY package.json /app/
RUN npm install
COPY . /app
CMD ["npm", "start"]
```
我们在这里所做的是，在第四行，我们只复制`npm install`命令需要作为源的单个文件，也就是`package.json`文件。这个文件在典型的开发过程中很少改变。因此，`npm install`命令也只能在`package.json`文件改变时执行。在`npm install`命令之后，所有剩余的、频繁改变的内容被添加到映像中。
*   另一个最佳实践是保持构成映像的层数相对较少。映像的图层越多，图形驱动程序就越需要将图层合并到对应容器的单个根文件系统中。当然，这需要时间，因此映像的层数越少，容器的启动时间就越快。
但是*怎么才能保持我们的层数低呢？*请记住，在 Dockerfile 中，以关键字(如 FROM、COPY 或 RUN)开头的每一行都会创建一个新图层。减少层数最简单的方法是将多个单独的`RUN`命令组合成一个——例如，假设我们在一个 Dockerfile 中有以下内容:
```
RUN apt-get update
RUN apt-get install -y ca-certificates
RUN rm -rf /var/lib/apt/lists/*
```
我们可以将这些组合成一个串联的表达式，如下所示:
```
RUN apt-get update \
 && apt-get install -y ca-certificates \
 && rm -rf /var/lib/apt/lists/*
```
前者将在生成的映像中生成三层，而后者仅创建一层。
接下来的三个最佳实践都会产生更小的映像。为什么这很重要？较小的映像减少了从注册表下载映像所需的时间和带宽。它们还减少了在 Docker 主机上本地存储副本所需的磁盘空间，以及加载映像所需的内存。最后，较小的映像也意味着黑客的攻击面较小。以下是提到的最佳实践:
*   有助于减小映像尺寸的第一个最佳实践是使用`.dockerignore`文件。我们希望避免将不必要的文件和文件夹复制到映像中，以使其尽可能精简。对于熟悉 Git 的人来说，`.dockerignore`文件的工作方式与`.gitignore`文件完全相同。在`.dockerignore`文件中，我们可以配置模式，在构建映像时将某些文件或文件夹排除在上下文之外。
*   下一个最佳实践是避免将不必要的包安装到映像的文件系统中。再一次强调，这是为了尽可能地保持形象。
*   最后但同样重要的是，建议您使用多阶段构建，以便生成的映像尽可能小，并且只包含运行应用或应用服务所需的绝对最小值。
# 保存和加载映像
创建新容器映像的第三种方法是从文件中导入或加载它。容器映像只不过是一个 tarball。为了演示这一点，我们可以使用`docker image save`命令将现有映像导出到一个 tarball:
```
$ docker image save -o ./backup/my-alpine.tar my-alpine
```
前面的命令获取我们之前构建的`my-alpine`映像，并将其导出到`./backup/my-alpine.tar `文件中。
另一方面，如果我们有一个现有的 tarball，并希望将其作为映像导入我们的系统，我们可以使用`docker image load`命令，如下所示:
```
$ docker image load -i ./backup/my-alpine.tar
```
# 共享或发送映像
为了能够将我们的定制映像运送到其他环境，我们需要首先给它一个全球唯一的名称。这个动作通常被称为标记映像。然后，我们需要将映像发布到一个中心位置，其他感兴趣或有资格的各方可以从中提取映像。这些中心位置被称为**映像注册表**。
# 标记映像
每个映像都有一个所谓的**标签**。标签通常用于版本化映像，但它的范围比版本号更广。如果我们在处理映像时没有明确指定标签，那么 Docker 会自动假设我们指的是*最新的*标签。这与从 Docker Hub 中提取映像相关，例如:
```
$ docker image pull alpine
```
前面的命令将从集线器中拉出`alpine:latest`映像。如果我们想显式指定一个标签，我们这样做:
```
$ docker image pull alpine:3.5
```
现在，这将拉出已经用`3.5`标记的`alpine`映像。
# 映像命名空间
到目前为止，你一直在拉各种图片，并没有那么担心那些图片是从哪里来的。您的 Docker 环境配置为，默认情况下，从 Docker Hub 中提取所有映像。我们也只从 Docker Hub 上拉了所谓的官方图片，比如`alpine`或者`busybox`。
现在是时候拓宽我们的视野，了解映像是如何命名的。定义映像最通用的方法是通过它的完全限定名，如下所示:
```
//:
```
让我们更详细地看看这个:
*   ``:这是我们要从中提取映像的注册表的 URL。默认情况下，这是`docker.io`。更一般地说，这可能是`https://registry.acme.com`。
除了 Docker Hub 之外，还有相当多的公共注册中心可以从中提取映像。以下是其中一些的列表，没有特别的顺序:
*   ``:这是 Docker Hub 上定义的个人或组织的私人 Docker ID，或任何其他相关的注册，如`microsoft`或`oracle`。
*   ``:这是映像的名称，通常也称为存储库。
*   ``:这是图片的标签。
让我们看一个例子:
```
https://registry.acme.com/engineering/web-app:1.0
```
在这里，我们有一个映像`web-app`，它被标记为版本`1.0`，并且属于位于`https://registry.acme.com`的私有注册表上的`engineering`组织。
现在，有一些特殊的惯例:
*   如果我们省略了注册表网址，那么 Docker Hub 将被自动获取
*   如果我们省略标签，那么`latest`被取
*   如果它是 Docker Hub 上的正式映像，则不需要用户或组织名称空间
表格形式的几个示例如下:
| **映像** | **描述** |
| `alpine` | 带有`latest `标签的 Docker Hub 上的官方`alpine`映像。 |
| `ubuntu:16.04` | Docker Hub 上带有`16.04 `标签或版本的官方`ubuntu`映像。 |
| `microsoft/nanoserver` | `nanoserver`带有`latest `标签的 Docker Hub 上的微软图片。 |
| `acme/web-api:12.0` | `web-api`影像版`12.0`关联了`acme `组织。映像在 Docker Hub 上。 |
| `gcr.io/gnschenker/sample-app:1.1` | 在谷歌的容器注册中，标签为`1.1 `的映像属于一个拥有`gnschenker`身份的个人。 |
# 官方图片
在上表中，我们几次提到了*官方形象*。这需要一个解释。映像存储在 Docker Hub 注册表的存储库中。官方存储库是托管在 Docker Hub 上的一组存储库，由个人或组织管理，他们也负责打包在映像中的软件。让我们看一个例子来说明这意味着什么。Ubuntu Linux 发行版背后有一个官方组织。这个团队还提供包含 Ubuntu 发行版的 Docker 映像的官方版本。
官方映像旨在提供基本操作系统存储库、流行编程语言运行时映像、常用数据存储和其他重要服务。
Docker 赞助了一个团队，其任务是在 Docker Hub 上的公共存储库中审查和发布所有这些精选的映像。此外，Docker 会扫描所有官方映像以查找漏洞。
# 将映像推送到注册表
创建自定义映像是非常好的，但是在某些时候，我们希望将我们的映像共享或发送到目标环境，例如测试、质量保证或生产系统。为此，我们通常使用容器注册表。最受欢迎的公共注册中心之一是 Docker Hub。它在您的 Docker 环境中被配置为默认注册表，到目前为止，我们已经从该注册表中提取了所有映像。
在注册表中，通常可以创建个人或组织帐户。比如我在 Docker Hub 的个人账号是`gnschenker`。个人账户适合个人使用。如果我们想专业地使用注册表，那么我们可能想在 Docker Hub 上创建一个组织帐户，如`acme`。后者的优点是组织可以有多个团队。团队可以有不同的权限。
为了能够在 Docker Hub 上将映像推送到我的个人帐户，我需要对其进行相应的标记。假设我想把最新版本的`alpine`推送到我的账号上，给它一个`1.0`的标签。我可以通过以下方式实现:
```
$ docker image tag alpine:latest gnschenker/alpine:1.0
```
现在，为了能够推送映像，我必须登录我的帐户:
```
$ docker login -u gnschenker -p 
```
成功登录后，我可以推送映像:
```
$ docker image push gnschenker/alpine:1.0
```
我将在终端中看到类似的内容:
```
The push refers to repository [docker.io/gnschenker/alpine]
04a094fe844e: Mounted from library/alpine
1.0: digest: sha256:5cb04fce... size: 528
```
对于我们推送到 Docker Hub 的每个映像，我们会自动创建一个存储库。存储库可以是私有的，也可以是公共的。每个人都可以从公共存储库中提取映像。只有登录到注册表并配置了必要的权限，才能从私有存储库中提取映像。
# 摘要
在本章中，我们详细讨论了什么是容器映像，以及如何构建和运输它们。正如我们所看到的，有三种不同的方法可以创建映像——手动、自动或通过将 tarball 导入系统。我们还学习了构建自定义映像时常用的一些最佳实践。
在下一章中，我们将介绍可用于保持容器状态的 Docker 卷，我们还将介绍一些有用的系统命令，这些命令可用于更深入地检查 Docker 主机、处理 Docker 守护程序生成的事件以及清理未使用的资源。
# 问题
请尝试回答以下问题来评估您的学习进度:
1.  您将如何创建一个继承自 Ubuntu 版本的 Dockerfile，并在容器启动时安装`ping`并运行`ping`。ping 的默认地址是`127.0.0.1`。
2.  如何创建使用`alpine:latest`并安装`curl`的新容器映像。命名新形象`my-alpine:1.0`。
3.  创建一个 Dockerfile，使用多个步骤创建一个最小大小的`Hello World`应用的映像，用 C 或 Go 编写。
4.  说出 Docker 容器映像的三个基本特征。
5.  您想在 Docker Hub 上将名为`foo:1.0`的映像推送至您的`jdoe`个人账户。以下哪一项是正确的解决方案？
    1.  `$ docker container push foo:1.0`
    2.  `$ docker image tag foo:1.0 jdoe/foo:1.0`
        `$ docker image push jdoe/foo:1.0`
    3.  `$ docker login -u jdoe -p `
        `$ docker image tag foo:1.0 jdoe/foo:1.0`
        `$ docker image push jdoe/foo:1.0`
    4.  `$ docker login -u jdoe -p `
        `$ docker container tag foo:1.0 jdoe/foo:1.0`
        `$ docker container push jdoe/foo:1.0`
    5.  `$ docker login -u jdoe -p `
        `$ docker image push foo:1.0 jdoe/foo:1.0`
# 进一步阅读
下面的参考资料列表为您提供了一些深入创作和构建容器映像主题的资料:
*   *在*[http://dockr.ly/22WiJiO](http://dockr.ly/22WiJiO)编写 Docker 文件的最佳实践
*   *在* [和](http://dockr.ly/2ewcUY3)使用多级构建
*   *关于*[http://dockr.ly/1TuWndC](http://dockr.ly/1TuWndC)的仓储司机
*   *http://dockr.ly/2eIVCab*的图形驱动插件
*   *在 http://dockr.ly/2xKafPf*的 MAC Docker 中用户引导缓存