# 哈希长度拓展攻击(Hash Length Extension Attacks)
## 导语
通过CTF接触到哈希长度扩展攻击，本文将详细分析如何对一些比较弱的Message Authentication codes
(MACs)进行这种攻击，最后也将结合CTF的题目对哈希长度扩展攻击的危害性及防御做一个总结。
## 原理
Message authentication codes
(MACs)是用于验证信息真实性的。一般的MAC算法是这样的：服务器把secret和message连接到一起，然后用消息摘要算法如MD5或SHA1取摘要。研究发现MD4、MD5、RIPEMD-160、SHA-0、SHA-1、SHA-256、SHA-512、WHIRLPOOL等摘要算法受此攻击，但MD2、SHA-224和SHA-384不受此攻击。
哈希摘要算法，如MD5、SHA1、SHA2等，都是基于[Merkle–Damgård结构](https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction)。这类算法有一个很有意思的问题：当知道hash(secret
+ message)的值及secret长度的情况下，可以轻松推算出hash(secret +
message||padding||m’)。在这里m’是任意数据，||是连接符，可以为空,padding是secret后的填充字节。hash的padding字节包含整个消息的长度，因此，为了能准确计算出padding的值，secret的长度我们也是需要知道的。
当我们填充后，服务器算出的原始hash值，正好与我们添加扩展字符串并覆盖初始链变量所计算出来的一样。这是因为攻击者的哈希计算过程，相当于从服务器计算过程的一半紧接着进行下去。提交此hash值便能通过验证了，这就是所谓的哈希长度拓展攻击(Hash
Length Extension Attacks)。
## 算法简析
要深入理解哈希长度拓展攻击(Hash Length Extension
Attacks)，就得先了解摘要算法的具体实现过程。本文以MD5为例做简析，其它算法类似。  
这是一张MD5算法的流程图，根据这张图我们可以把MD5算法的流程，简单分为下面几步：
  1. 把消息分为n个消息块。
  2. 对最后一个消息块进行消息填充。
  3. 每个消息块会和一个输入量做运算，把运算结果作为下一个输入量。
下面说说MD5算法的实现：
  1. Append Padding Bits(填充bits)
  2. Append Length(填充长度)
  3. Initialize MD Buffer(初始化向量)
  4. Process Message in 16-Word Blocks(复杂的函数运算)
而要实现我们的攻击，我们只关心前三步，也就是不再再纠结复杂的算法运算。下面用例子来解释前三个流程也便于更加深入的理解哈希长度拓展攻击(Hash Length
Extension Attacks)：
## Append Padding Bits(填充bits)
MD5算法会对消息进行分组，每组64 byte（512bit），不足64 byte 的部分会用padding补位。MD5算法每组最后8 byte
表示的是补充前消息的长度，所以消息补位是使得其长度在对 512 取模后的值为 448（512-8*8）。也就是说，len(message) mod(512)
== 448。补位二进制表示是在消息的后面加上一个1，后面跟着 n 个0，直到 len(message) mod (512) == 448。在 16
进制下，我们需要在消息后补80，就是 2 进制的10000000。我们把消息进行补位到 448 bit，也就是 56 byte。
## Append Length(填充长度)
补位过后，第 57 个字节开始储存补位之前消息的长度。
长度是[小端存储](https://blog.csdn.net/github_35681219/article/details/52743048)的，也就是说高字节放在高地址中。
如果消息的长度大于2 ^ 64，也就是大于2048PB。那么64bit无法存储消息的长度，则取低64bit。
下图是补位的示例，要进行哈希运算的消息是字符串"message"，"message"是7个字母，7 byte (56 bit
)，换算成16进制位0x38，其后跟着7个字节的0x00，则：
## Initialize MD Buffer(初始化向量)
计算消息摘要必须用补位已经补长度完成之后的消息来进行运算，拿出 512 bit 的消息（即64 byte ）。
计算消息摘要的时候，有一个初始的链变量，用来参与第一轮的运算。MD5 的初始链变量为：
    A=0x67452301
    B=0xefcdab89
    C=0x98badcfe
    D=0x10325476
无需关心计算细节，我们只需要知道经过一次消息再要后，上面的链变量将会被新的值覆盖，而最后一轮产生的链变量经过高低位互换（如：aabbccdd ->
ddccbbaa）后就是我们计算出来的 md5 值。
## 哈希长度拓展攻击(Hash Length Extension Attacks)的实现
哈希长度拓展攻击(Hash Length Extension Attacks)的实现就是基于初始链变量的值被新的覆盖。
下面结合一个CTF的题目更加形象具体的分析其实现过程。
    $flag = "XXXXXXXXXXXXXXXXXXXXXXX";
    $secret = "XXXXXXXXXXXXXXX"; // This secret is 15 characters long for security!
    $username = $_POST["username"];
    $password = $_POST["password"];
    if (!empty($_COOKIE["getmein"])) {
        if (urldecode($username) === "admin" && urldecode($password) != "admin") {# ===俩边不管值还是类型都要一致
            if ($COOKIE["getmein"] === md5($secret . urldecode($username . $password))) {
                echo "Congratulations! You are a registered user.\n";
                die ("The flag is ". $flag);#exit()/die() 函数输出一条消息，并退出当前脚本
            }
            else {
                die ("Your cookies don't match up! STOP HACKING THIS SITE.");
            }
        }
        else {
            die ("You are not an admin! LEAVE.");
        }
    }
    setcookie("sample-hash", md5($secret . urldecode("admin" . "admin")), time() + (60 * 60 * 24 * 7));
    if (empty($_COOKIE["source"])) {
        setcookie("source", 0, time() + (60 * 60 * 24 * 7));
    }
    else {
        if ($_COOKIE["source"] != 0) {
            echo ""; // This source code is outputted here
        }
    }
    Admins Only!
    If you have the correct credentials, log in below. If not, please LEAVE.
        Username:  
        Password:  
        Submit
    ?>
这个核心的判断在第二个if的判断
    if ($COOKIE["getmein"] === md5($secret . urldecode($username . $password)))
flag获取的要求是：传进一个cookie使`getmein`等于`md5($secret . urldecode($username .
$password))`且后面部分不能为adminadmin,  
也就是说需要构造getmein的cookie和他那串字符相同就可以。
已知$secret长度为15，先进行消息的填充，前面的A是随便写的，为了占15个字符。填充如下:
然后在后面跟加附加值，随便写什么：  
然后去掉前面假的$secret:
    adminadmin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00dawn
urlencode之后为:
    adminadmin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00dawn
现在我们在不知道具体 $secret
的情况下，已经得知了md5(secert+adminadmin)的值为571580b26c65f306376d4f64e53cb5c7，以及$sercret的位数。而我们得到的
hash 值正是下一轮摘要经过高地位互换的链变量。
下一步就是对附加值进行MD5加密了：
我在网上找了一个Python的MD5实现。修改初始的链变量为经过高低位逆转的md5(secert+adminadmin)：
    A=0xb2801557
    B=0x06f3656c
    C=0x644f6d37
    D=0xc7b53ce5
my_md5.py
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    # @Author：DshtAnger
    # theory reference:
    #   blog：
    #       http://blog.csdn.net/adidala/article/details/28677393
    #       http://blog.csdn.net/forgotaboutgirl/article/details/7258109
    #       http://blog.sina.com.cn/s/blog_6fe0eb1901014cpl.html
    #   RFC1321：
    #       https://www.rfc-editor.org/rfc/pdfrfc/rfc1321.txt.pdf
    ##############################################################################
    import sys
    def genMsgLengthDescriptor(msg_bitsLenth):
        '''
        ---args:
                msg_bitsLenth : the bits length of raw message
        --return:
                16 hex-encoded string , i.e.64bits,8bytes which used to describe the bits length of raw message added after padding
        '''
        return __import__("struct").pack(">Q",msg_bitsLenth).encode("hex")
    def reverse_hex_8bytes(hex_str):
        '''
        --args:
                hex_str: a hex-encoded string with length 16 , i.e.8bytes
        --return:
                transform raw message descriptor to little-endian 
        '''
        hex_str = "%016x"%int(hex_str,16)
        assert len(hex_str)==16    
        return __import__("struct").pack("<Q",int(hex_str,16)).encode("hex")
    def reverse_hex_4bytes(hex_str):
        '''
        --args:
                hex_str: a hex-encoded string with length 8 , i.e.4bytes
        --return:
                transform 4 bytes message block to little-endian
        '''    
        hex_str = "%08x"%int(hex_str,16)
        assert len(hex_str)==8    
        return __import__("struct").pack("<L",int(hex_str,16)).encode("hex")
    def deal_rawInputMsg(input_msg):
        '''
        --args:
                input_msg : inputed a ascii-encoded string
        --return:
                a hex-encoded string which can be inputed to mathematical transformation function.
        '''
        ascii_list = [x.encode("hex") for x in input_msg]
        length_msg_bytes = len(ascii_list)
        length_msg_bits = len(ascii_list)*8
        #padding
        ascii_list.append('80')  
        while (len(ascii_list)*8+64)%512 != 0:  
            ascii_list.append('00')
        #add Descriptor
        ascii_list.append(reverse_hex_8bytes(genMsgLengthDescriptor(length_msg_bits)))
        return "".join(ascii_list)
    def getM16(hex_str,operatingBlockNum):
        '''
        --args:
                hex_str : a hex-encoded string with length in integral multiple of 512bits
                operatingBlockNum : message block number which is being operated , greater than 1
        --return:
                M : result of splited 64bytes into 4*16 message blocks with little-endian