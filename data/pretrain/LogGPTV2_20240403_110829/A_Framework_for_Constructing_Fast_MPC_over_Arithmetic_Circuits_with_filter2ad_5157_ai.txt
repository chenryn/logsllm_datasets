Certainly! Here is the optimized version of your text, with improved clarity, coherence, and professionalism:

---

**Communication Complexity Analysis**

According to Equations (9) and (10), the communication complexity is almost linear in \(\delta\). Therefore, when \(\delta = 2\), the number of field elements sent is approximately twice the number sent when \(\delta = 1\).

Given that a single 61-bit field element is roughly twice the size of a 31-bit field element, the overall communication volume remains similar. However, we observe that for a small number of parties (\(n \leq 9\)), the protocol using a 61-bit field performs slightly better, whereas for a larger number of parties (\(n \geq 11\)), the protocol using a 31-bit field is more efficient. This can be explained by the fact that communication costs become more significant with an increasing number of parties, and two times the cost of Equation (9) with \(\delta = 1\) is slightly higher than one times the cost of Equation (9) with \(\delta = 2\).

For example, in the `van_DN_open` protocol, the number of field elements is \(t(\pi_{\text{mult}}) = 6\), \(t(F_{\text{rand}}) = 2\), and \(t(\text{open}) = n - 1\). Thus, for \(n = 11\), 46 group elements are sent with \(\delta = 1\) and 86 group elements are sent with \(\delta = 2\). Since each group element is twice the size for \(\delta = 1\), this results in a 7% increase in communication.

**Comparison of Arithmetic and Boolean Protocols**

It is instructive to compare our 3-party protocol, which computes at a rate of 1,000,000 multiplications per second, to the best 3-party protocol with malicious security for Boolean circuits [1], which computes approximately 73,000,000 AND gates per second on a single core [2]. A rough calculation shows that multiplication in our protocol has a similar cost to addition in a Boolean circuit (whereas addition is free in our protocol, but multiplication is very expensive in Boolean circuits). Therefore, for arithmetic-based computations, our protocol is far superior. Conversely, for computations requiring many comparisons and other types of operations, the Boolean protocol may be more efficient.

**References**

[1] T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara, A. Watzman, and O. Weinstein. Optimized Honest-Majority MPC for Malicious Adversaries - Breaking the 1 Billion-Gate Per Second Barrier. In the 38th IEEE Symposium on Security and Privacy, pages 843–862, 2017.

[2] T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara, A. Watzman, and O. Weinstein. Personal communication, May 2017.

[3] T. Araki, J. Furukawa, Y. Lindell, A. Nof, and K. Ohara. High-Throughput Semi-Honest Secure Three-Party Computation with an Honest Majority. In the 23rd ACM CCS, pages 805–817, 2016.

[4] D. Beaver. Efficient Multiparty Protocols Using Circuit Randomization. In CRYPTO 1991, Springer (LNCS 576), pages 420–432, 1992.

[5] E. Ben-Sasson, S. Fehr, and R. Ostrovsky. Near-Linear Unconditionally-Secure Multiparty Computation with a Dishonest Minority. In CRYPTO 2012, Springer (LNCS 7417), pages 663-680, 2012.

[6] Z. Beerliová-Trubíniová and M. Hirt. Perfectly-secure MPC with linear communication complexity. In TCC 2008, Springer (LNCS 4948), pages 213–230, 2008.

[7] M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation. In 20th STOC, pages 1–10, 1988.

[8] S.S. Burra, E. Larraia, J.B. Nielsen, P.S. Nordholt, C. Orlandi, E. Orsini, P. Scholl, and N.P. Smart. High Performance Multi-Party Computation for Binary Circuits Based on Oblivious Transfer. ePrint Cryptology Archive, 2015/472.

[9] R. Canetti. Security and Composition of Multiparty Cryptographic Protocols.

[10] R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In 42nd FOCS, pages 136–145, 2001.

[11] D. Chaum, C. Crépeau, and I. Damgård. Multi-party Unconditionally Secure Protocols. In 20th STOC, pages 11–19, 1988.

[12] K. Chida, K. Hamada, D. Ikarashi, and R. Kikuchi. Actively Private and Correct MPC Scheme in t<n/2 from Passively Secure Schemes with Small Overhead. IACR Cryptology ePrint Archive, report 2014/304, 2014.

[13] R. Cramer, I. Damgård, and Y. Ishai. Share Conversion, Pseudorandom Secret-Sharing and Applications to Secure Computation. In the 2nd TCC, Springer (LNCS 3378), pages 342–362, 2005.

[14] I. Damgård, M. Geisler, M. Krøigaard, and J.B. Nielsen. Asynchronous Multiparty Computation: Theory and Implementation. In Public Key Cryptography 2009, Springer (LNCS 5443), pages 160–179, 2009.

[15] I. Damgård and Y. Ishai. Scalable Secure Multiparty Computation. In CRYPTO 2006, Springer (LNCS 4117), pages 501–520, 2006.

[16] I. Damgård, M. Keller, E. Larraia, V. Pastro, P. Scholl, and N.P. Smart. Practical Covertly Secure MPC for Dishonest Majority - or: Breaking the SPDZ Limits. In 18th ESORICS, pages 1–18, 2013.

[17] I. Damgård and J. Nielsen. Scalable and Unconditionally Secure Multiparty Computation. In CRYPTO 2007, Springer (LNCS 4622), pages 572–590, 2007.

[18] I. Damgård, V. Pastro, N.P. Smart, and S. Zakarias. Multiparty Computation from Somewhat Homomorphic Encryption. In CRYPTO 2012, pages 643–662, 2012.

[19] J. Furukawa, Y. Lindell, A. Nof, and O. Weinstein. High-Throughput Secure Three-Party Computation for Malicious Adversaries and an Honest Majority. In EUROCRYPT 2017, Springer (LNCS 10211), pages 225–255, 2017.

[20] R.A. Fisher and F. Yates. Statistical Tables for Biological, Agricultural and Medical Research (3rd ed.), pages 26–27, 1938.

[21] D. Genkin, Y. Ishai, M. Prabhakaran, A. Sahai, and E. Tromer. Circuits Resilient to Additive Attacks with Applications to Secure Computation. In STOC 2014, pages 495-504, 2014.

[22] D. Genkin, Y. Ishai, and A. Polychroniadou. Efficient Multi-party Computation: From Passive to Active Security via Secure SIMD Circuits. In CRYPTO 2015, Springer (LNCS 9216), pages 721–741, 2015.

[23] M. Hirt and J.B. Nielsen. Robust Multiparty Computation with Linear Communication Complexity. In CRYPTO 2006, Springer (LNCS 4117), pages 463–482, 2006.

[24] O. Goldreich, S. Micali, and A. Wigderson. How to Play Any Mental Game. In 19th STOC, pages 218–229, 1987.

[25] R. Gennaro, M. Rabin, and T. Rabin. Simplified VSS and Fast-Track Multiparty Computations with Applications to Threshold Cryptography. In 17th PODC, pages 101–111, 1998.

[26] O. Goldreich. Foundations of Cryptography: Volume 2 – Basic Applications. Cambridge University Press, 2004.

[27] S. Goldwasser and Y. Lindell. Secure Computation Without Agreement. Journal of Cryptology, 18(3):247–287, 2005.

[28] M. Keller, E. Orsini, and P. Scholl. MASCOT: Faster Malicious Arithmetic Secure Computation with Oblivious Transfer. In the 23rd ACM CCS, pages 830–842, 2016.

[29] E. Kushilevitz, Y. Lindell, and T. Rabin. Information-Theoretically Secure Protocols and Security Under Composition. SIAM Journal on Computing, 39(5):2090–2112, 2010.

[30] Y. Lindell and B. Pinkas. Secure Two-Party Computation via Cut-and-Choose Oblivious Transfer. In the 8th TCC, Springer (LNCS 6597), pages 329–346, 2011.

[31] P. Mohassel, M. Rosulek, and Y. Zhang. Fast and Secure Three-Party Computation: The Garbled Circuit Approach. In ACM Conference on Computer and Communications Security, pages 591–602, 2015.

[32] J.B. Nielsen, P.S. Nordholt, C. Orlandi, and S.S. Burra. A New Approach to Practical Active-Secure Two-Party Computation. In CRYPTO 2012, Springer (LNCS 7417), pages 681–700, 2012.

[33] P. Paillier. Public-Key Cryptosystems Based on Composite Degree Residuosity Classes. In EUROCRYPT 1999, Springer (LNCS 1592), pages 223–238, 1999.

[34] T. Rabin and M. Ben-Or. Verifiable Secret Sharing and Multi-Party Protocols with Honest Majority. In 21st STOC, pages 73–85, 1989.

[35] A. Shamir. How to share a secret. Communications of the ACM, 22(11), pages 612–613, 1979.

[36] A. Yao. How to Generate and Exchange Secrets. In the 27th FOCS, pages 162–167, 1986.

**Definition of Security**

The security parameter is denoted by \(\kappa\); negligible functions and computational indistinguishability are defined in the standard way, with respect to non-uniform polynomial-time distinguishers.

**Ideal vs. Real Model Definition**

We use the ideal/real simulation paradigm to define security, where an execution in the real world is compared to an execution in an ideal world where an incorruptible trusted party computes the functionality for the parties [9, 26]. We define security with abort (and without fairness), meaning that the corrupted party may receive output while the honest parties do not. Our definition does not guarantee unanimous abort, meaning that some honest party may receive output while others do not. It is straightforward to modify our protocols so that the honest parties unanimously abort by running a single (weak) Byzantine agreement at the end of the execution [27]; we omit this step for simplicity.

Note that with an honest majority, it is possible to achieve fairness (assuming a broadcast channel). Nevertheless, our protocol does not guarantee this, and we do not know how to modify it to ensure fairness without significantly sacrificing efficiency.

**Real Model**

In the real model, an \(n\)-party protocol \(\pi\) is executed by the parties. For simplicity, we consider a synchronous network that proceeds in rounds, and a rushing adversary, meaning that the adversary receives its incoming messages in a round before it sends its outgoing message. The adversary \(A\) can be malicious; it sends all messages in place of the corrupted party and can follow any arbitrary strategy. The honest parties follow the instructions of the protocol.

Let \(A\) be a non-uniform probabilistic polynomial-time adversary controlling \(t < \frac{n}{2}\) parties. Let \(\text{real}_{\pi, A}(z), I(x_1, \ldots, x_n, \kappa)\) denote the output of the honest parties and \(A\) in a real execution of \(\pi\), with inputs \(x_1, \ldots, x_n\), auxiliary input \(z\) for \(A\), and security parameter \(\kappa\).

**Ideal Model**

We define the ideal model for any (possibly reactive) functionality \(F\), receiving inputs from \(P_1, \ldots, P_n\) and providing them outputs. Let \(I \subset \{1, \ldots, n\}\) be the set of indices of the corrupted parties controlled by the adversary. The ideal execution proceeds as follows:

1. **Send Inputs to the Trusted Party**: Each honest party \(P_j\) sends its specified input \(x_j\) to the trusted party. A corrupted party \(P_i\) controlled by the adversary may either send its specified input \(x_i\) or some other \(x'_i\).

2. **Early Abort Option**: If the trusted party received an abort message from the adversary \(A\), it sends \(\bot\) to all parties and terminates. Otherwise, it proceeds to the next step.

3. **Trusted Party Sends Output to the Adversary**: The trusted party computes each party’s output as specified by the functionality \(F\) based on the inputs received; denote the output of \(P_j\) by \(y_j\). The trusted party then sends \(\{y_i\}_{i \in I}\) to the corrupted parties.

4. **Adversary Instructs Trusted Party to Continue or Halt**: For each \(j \in \{1, \ldots, n\} \setminus I\), the adversary sends the trusted party either \(\text{abort}_j\) or \(\text{continue}_j\):
   - If the trusted party received \(\text{abort}_j\), it sends \(\bot\) to \(P_j\).
   - If the trusted party received \(\text{continue}_j\), it sends \(y_j\) to \(P_j\).

5. **Outputs**: The honest parties always output the value they obtained from the trusted party, and the corrupted parties output nothing.

Let \(S\) be a non-uniform probabilistic polynomial-time adversary controlling parties \(P_i\) for \(i \in I\). Let \(\text{ideal}_{F, S}(z), I(x_1, \ldots, x_n, \kappa)\) denote the output of the honest parties and \(S\) in an ideal execution with the functionality \(F\), inputs \(x_1, \ldots, x_n\) to the parties, auxiliary input \(z\) to \(S\), and security parameter \(\kappa\).

**Security**

Informally, the definition states that protocol \(\pi\) securely computes \(f\) if adversaries in the ideal world can simulate executions of the real world protocol. In some of our protocols, there is a statistical error that is not dependent on the computational security parameter. As in [30], we formalize security in this model by saying that the distinguisher can distinguish with probability at most this error plus some factor that is negligible in the security parameter. This is formally different from the standard definition of security since the statistical error does not decrease as the security parameter increases.

**Definition A.1.** Let \(F\) be an \(n\)-party functionality, and let \(\pi\) be an \(n\)-party protocol. We say that \(\pi\) securely computes \(f\) with abort in the presence of an adversary controlling \(t < \frac{n}{2}\) parties, if for every non-uniform probabilistic polynomial-time adversary \(A\) in the real world, there exists a non-uniform probabilistic polynomial-time simulator/adversary \(S\) in the ideal model with \(F\), such that for every \(I \subset \{1, \ldots, n\}\) with \(|I| = t\),

\[
\text{ideal}_{F, S}(z), I(x_1, \ldots, x_n, \kappa) \approx_c \text{real}_{\pi, A}(z), I(x_1, \ldots, x_n, \kappa)
\]

where \(x_1, \ldots, x_n \in F^*\) under the constraint that \(|x_1| = \cdots = |x_n|\), \(z \in F^*\), and \(\kappa \in \mathbb{N}\). We say that \(\pi\) securely computes \(f\) with abort in the presence of one malicious party with statistical error \(2^{-\sigma}\) if there exists a negligible function \(\mu(\cdot)\) such that the distinguishing probability of the adversary is less than \(2^{-\sigma} + \mu(\kappa)\).

**Hybrid Model**

We prove the security of our protocols in a hybrid model, where parties run a protocol with real messages and also have access to a trusted party computing a subfunctionality for them. The modular sequential composition theorem of [9] states that one can replace the trusted party computing the subfunctionality with a real secure protocol computing the subfunctionality. When the subfunctionality is \(\triangle\), we say that the protocol works in the \(\triangle\)-hybrid model.

**Universal Composability [10]**

Protocols proven secure in the universal composability framework maintain their security when run in parallel and concurrently with other secure and insecure protocols. In [29, Theorem 1.5], it was shown that any protocol proven secure with a black-box non-rewinding simulator and also having the property that the inputs of all parties are fixed before the execution begins (called input availability or start synchronization in [29]), is also secure under universal composability. Since the input availability property holds for all of our protocols and subprotocols, it is sufficient to prove security in the classic stand-alone setting and automatically derive universal composability from [29]. This also enables us to call the protocol and subprotocols that we use in parallel and concurrently (and not just sequentially), enabling more efficient computation (e.g., by running many executions in parallel or running each layer of a circuit in parallel).

**B. Protocols for Computation Based on Shamir’s Secret Sharing Scheme**

**B.1. Protocols for Generating Random Sharings**

**The PRSS Protocol [13]**: In this protocol, there is a setup step...

---

This version should be clearer, more coherent, and more professional. Let me know if you need further adjustments!