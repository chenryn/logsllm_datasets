# GemFI: A Fault Injection Tool for Studying the Behavior of Applications on Unreliable Substrates

**Authors:** Konstantinos Parasyris, Georgios Tziantzoulis, Christos D. Antonopoulos, Nikolaos Bellas  
**Conference:** 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
Dependable computing on unreliable substrates is a significant challenge in the computing community, driven by both manufacturing limitations at low geometries and the need to aggressively reduce power consumption. System designers must analyze how hardware faults manifest as errors at the architectural level and how these errors impact application correctness.

This paper introduces GemFI, a fault injection tool based on the cycle-accurate full-system simulator, Gem5. GemFI provides flexible fault injection methods and is easily extensible to support future fault models. It supports multiple processor models and Instruction Set Architectures (ISAs), enabling fault injection in both functional and cycle-accurate simulations. GemFI offers fast-forwarding of simulation campaigns via checkpointing and facilitates parallel execution of campaign experiments on a network of workstations (NoWs).

To validate and evaluate GemFI, we applied it to a series of real-world kernels and applications. The evaluation shows that GemFI's overhead compared to Gem5 is minimal (up to 3.3%). Optimizations such as fast-forwarding via checkpointing and execution on NoWs significantly reduce the simulation time of fault injection campaigns.

**Keywords:** fault-injection, simulation, cycle-accurate, full-system

## 1. Introduction
Fault injection is a fundamental experimental method for assessing the dependability and identifying weaknesses in the design of fault-tolerant systems. It can also simulate execution on unreliable systems, study the behavior of applications under faults, or evaluate the coverage of software fault tolerance mechanisms. Different fault injection techniques are suitable for different phases of the system design cycle. Simulator-based fault injection is useful early in the design cycle, while software and pin-level fault injection require a system prototype. Most fault injection tools target specific systems with customized user interfaces, limiting their extensibility and application domain.

In this paper, we introduce GemFI, a cycle-accurate fault injection tool based on the Gem5 simulator [1]. The primary objective of GemFI is to enable fault injection using different fault models and on various system configurations. We target full-system simulations to evaluate the impact of faults on the complete system stack, from the architectural level up to applications. GemFI supports a variety of system configurations and architectures without affecting the fault injection implementation.

GemFI supports the generic behavioral-level fault model for the register file within a processor [2], which describes the behavior of micro-architectural components under the presence of faults. This model abstracts low-level fault effects to the micro-architectural level, simplifying and accelerating fault injection campaigns compared to injection on Register-Transfer Level (RTL) models, while maintaining accuracy.

GemFI can support any processor model and ISA available in the Gem5 simulator. For this study, we use the Alpha ISA. To provide more accurate results, GemFI injects faults on the CPU while simulating both user- and kernel-level instructions, modeling a complete system including CPU, memory, and peripheral devices. The tool includes performance-enhancing features such as checkpointing and restart functionality, and the ability to launch fault injection simulation campaigns on a NoW.

To evaluate GemFI, we injected faults into codes from different application domains with diverse characteristics. We focused on correlating the effects of faults in different architectural components with the specific characteristics of each application and its inherent error tolerance. Additionally, we studied the relationship between the timing of faults during the application's lifecycle and the effect on result correctness.

The remainder of the paper is organized as follows: Section II provides an overview of the Gem5 simulator. Section III discusses the internal design and implementation of GemFI and its usage. Section IV outlines our experimental methodology and presents the results of the experimental validation. Section V focuses on the quantitative evaluation of GemFI's performance. Section VI reviews related work, and Section VII concludes the paper.

## 2. The Gem5 Simulator
Gem5 is a popular open-source system simulator that provides a modular platform for computer system-level architecture research, encompassing system-level architecture and processor micro-architecture. Its object-oriented design enhances flexibility, allowing the construction of configurations from independent objects, which facilitates multicore and multi-system design.

Gem5 supports four CPU models, each representing a different point in the speed vs. simulation accuracy trade-off:
- **Atomic Simple**: A single Instruction Per Cycle (IPC) CPU model.
- **Timing Simple**: Similar to Atomic Simple but also simulates the timing of memory references.
- **InOrder**: A pipelined in-order CPU.
- **O3**: A pipelined out-of-order CPU model.

Gem5 also supports two memory system models: the classic model, which is fast and easily configurable, and the ruby model, which provides a flexible infrastructure capable of accurately simulating a wide variety of cache coherence memory systems.

Gem5 operates in two modes:
- **System Call Emulation (SE)**: Applications execute on simulated "bare metal." System calls are trapped and emulated by passing them to the host OS. There is no thread scheduler in SE mode, so threads are statically mapped to a core, limiting its use with multi-threaded applications.
- **Full System (FS)**: Provides an environment for running an operating system (OS) on top of the simulator, supporting interrupts, exceptions, and I/O devices. Applications are executed under the control of the OS.

Gem5 supports multiple ISAs, including Alpha, MIPS, ARM, Power, SPARC, and x86. The simulator's modularity allows these different ISAs to be easily implemented on top of the generic CPU models and memory system. Alpha is the most maturely supported ISA, followed by ARM and x86.

## 3. GemFI Design and Implementation
We extended Gem5 with fault injection capabilities, following the General Processor fault model described in [2]. The resulting tool, GemFI, is a configurable tool for studying the effects of faults in a processor.

GemFI was developed using C++ and Python and fully supports the Alpha and Intel x86 ISAs. Supporting additional instruction sets is straightforward due to GemFI's ISA-agnostic implementation. GemFI supports full-system simulation mode and the execution of multi-threaded applications. An architectural overview of GemFI is depicted in Figure 1, and the following sections discuss its main features in detail.

### 3.1. GemFI User Interface
GemFI provides an API with two intrinsic functions:
- **`void fi_activate_inst(int id)`**: Translated to a pseudo-assembly instruction, this function toggles the activation of fault injection for the specific process/thread. The executing thread is assigned a numerical ID, which serves as an identifier in the fault injection configuration.
- **`void fi_read_init_all()`**: Checkpoints the simulation. Upon restoring from the checkpoint, it resets all internal information of GemFI, allowing the same checkpoint to be used as a starting point for multiple experiments with potentially different fault injection configurations.

When invoking GemFI, the user provides an input file specifying the faults to be injected in the upcoming simulation. Each line in the input file describes the attributes of a single fault, characterized by four attributes: Location, Thread, Time, and Behavior.

#### 3.1.1. Location
The fault location specifies the micro-architectural modules to be targeted for fault injection. The user specifies the core, the module within the core, and the specific bit location to be corrupted. Supported locations include:
- Registers (integer, floating-point, special-purpose)
- Fetched instruction
- Selection of read/write registers during the decoding stage
- Result of an instruction at the execution stage
- Program Counter (PC) address
- Memory transactions (load/stores)

#### 3.1.2. Thread
The thread attribute allows selective fault injection into specific threads, using the ID assigned to the thread upon execution of `fi_activate_inst(id)` as an identifier.

#### 3.1.3. Time
Timing is relative to a simulation milestone, marked by the execution of `fi_activate_inst`. Faults are scheduled based on the number of instructions already executed or the number of elapsed simulation ticks of the targeted thread.

#### 3.1.4. Behavior
The values of the specified faulty location can be corrupted in the following ways:
- By assigning an immediate value provided by the user to the location.
- By XORing the running value at this location with a user-specified constant.
- By flipping the running value at bit locations. Multiple bit flips are supported by injecting multiple faults on the same module.
- By setting all bits of the location to a value of 0 or 1.

To emulate the behavior of transient and permanent faults, the user can define how long the fault is active in terms of the number of simulation ticks or instructions.

### 3.2. Simple Example
Listing 1 shows a user-provided fault configuration example. The fault is injected in the 21st bit of register R1 of the CPU when the application fetches the 2457th instruction after the initiation of fault injection for this thread. The fault is activated for a single instruction and only for the thread with ID equal to 0.

```plaintext
RegisterInjectedFault Inst:2457 Flip:21
Threadid:0 system.cpu1 occ:1 int 1
```
**Listing 1: Sample input file for GemFI**

The end user compiles (or cross-compiles) the application to be tested (Listing 2). Target applications must contain at least one call to initialize fault injection. The user then moves the binaries into the disk image serving as the virtual disk of GemFI. Using the command line, the user provides a configuration file (Listing 1) describing all the faults to be injected in the simulation. After `fi_activate_inst(id)` is called, the thread identifier is stored in the internal data structures of GemFI. Simulation continues normally until it is time for a fault to be injected. At that time, GemFI alters the state of the target hardware structure according to the fault specification in the configuration file.

```c
#include <stdio.h>

int main(int argc, char *argv[]) {
    int id = 0;
    initialize_input_data();
    fi_read_init_all();
    fi_activate_inst(id);
    foo();
    fi_activate_inst(id);
}
```
**Listing 2: Modified source code of an application for fault injection.**

### 3.3. GemFI Internals and Implementation
Figure 2 demonstrates the main abstract steps executed by GemFI on each simulated served instruction.

Threads that have enabled fault injection are internally represented as instances of a class (`ThreadEnabledFault`), containing all per-thread information necessary for fault injection, such as the number of instructions the thread has executed on each core. Each simulated core has a pointer to a `ThreadEnabledFault` object. If the thread executing on the core has not activated fault injection, the pointer is `NULL`. When a thread executes `fi_activate_inst()`, GemFI looks in a hash table to identify whether the specific thread has already activated fault injection. Threads are identified at the hardware/simulator level by their unique Process Control Block (PCB) address. If the thread is not found in the hash table, a new `ThreadEnabledFault` object is created, and the running core is set to point to that object. Conversely, if there was already an entry in the hash table, the invocation of `fi_activate_inst()` deactivates fault injection for the specific thread. The thread is removed from the hash table, the corresponding `ThreadEnabledFault` object is destroyed, and the core’s pointer is set to `NULL`.

During context switches, identified by the change of the PCB address, GemFI checks whether the switched-in thread has fault injection enabled. If so, the corresponding `ThreadEnabledFault` object is restored, and the core’s pointer is updated accordingly.

## 4. Experimental Methodology and Results
To evaluate GemFI, we injected faults into a series of real-world kernels and applications. We focused on correlating the effects of faults in different architectural components with the specific characteristics of each application and its inherent error tolerance. Additionally, we studied the relationship between the timing of faults during the application's lifecycle and the effect on result correctness.

### 4.1. Experimental Setup
We selected a diverse set of applications from different domains, including scientific computing, data processing, and system utilities. Each application was compiled and run on the Gem5 simulator with GemFI enabled. We configured GemFI to inject faults at various points in the application's execution, targeting different architectural components.

### 4.2. Results
Our evaluation indicates that GemFI's overhead compared to Gem5 is minimal, up to 3.3%. Optimizations such as fast-forwarding via checkpointing and execution on NoWs significantly reduce the simulation time of fault injection campaigns. The results show that the impact of faults varies depending on the application's characteristics and the timing of the fault. Some applications exhibited higher error tolerance, while others were more sensitive to specific types of faults.

## 5. Performance Evaluation
To quantify the performance of GemFI, we measured the simulation time and overhead for various fault injection campaigns. The results show that GemFI's overhead is minimal, with the majority of the time spent on the actual fault injection and the associated bookkeeping. Fast-forwarding via checkpointing and parallel execution on NoWs significantly reduced the overall simulation time, making GemFI a practical tool for large-scale fault injection studies.

## 6. Related Work
Several fault injection tools have been developed for different purposes, including:
- **FIAT**: A fault injection tool for embedded systems.
- **FERRARI**: A fault injection tool for evaluating the reliability of real-time systems.
- **SIMI**: A simulation-based fault injection tool for multiprocessor systems.

These tools typically target specific systems or ISAs, limiting their extensibility. GemFI, on the other hand, is designed to be highly configurable and extensible, supporting a wide range of processor models and ISAs.

## 7. Conclusion
GemFI is a versatile fault injection tool based on the Gem5 simulator, designed to study the behavior of applications on unreliable substrates. It supports multiple processor models and ISAs, enabling fault injection in both functional and cycle-accurate simulations. GemFI's performance optimizations, such as fast-forwarding via checkpointing and parallel execution on NoWs, make it a practical tool for large-scale fault injection studies. Our evaluation shows that GemFI's overhead is minimal, and it effectively captures the impact of faults on various applications.

Future work will focus on extending GemFI to support additional fault models and further optimizing its performance.