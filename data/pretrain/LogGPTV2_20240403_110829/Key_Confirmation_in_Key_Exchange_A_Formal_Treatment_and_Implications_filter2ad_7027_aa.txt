# Key Confirmation in Key Exchange: A Formal Treatment and Implications for TLS 1.3

**Authors:**
- Marc Fischlin
- Felix Günther
- Benedikt Schmidt
- Bogdan Warinschi

**Affiliations:**
- Cryptoplexity, Technische Universität Darmstadt, Darmstadt, Germany
- IMDEA Software Institute, Madrid, Spain
- University of Bristol, Bristol, UK

**Emails:**
- marc.fischlin@tu-darmstadt.de
- felix.gunther@tu-darmstadt.de
- benedikt.schmidt@imdea.org
- bogdan.warinschi@bristol.ac.uk

**Abstract:**
Key exchange protocols enable two remote parties to compute a shared secret key. The primary security goals for such protocols are secrecy and authenticity. However, many widely deployed protocols and standards also emphasize key confirmation, which ensures that a party in the key exchange is assured that the other party holds the same shared key. Despite the extensive study of secrecy and authenticity, key confirmation has been treated rather informally.

In this work, we provide the first rigorous formalization of key confirmation using the well-established game-based security framework. We define two types of key confirmation: full and almost-full, accounting for the inherent asymmetry in the transmission of the final protocol message. These definitions capture the strongest level of key confirmation that can be reasonably expected for the two communication partners.

We apply our definitions to the next version of the Transport Layer Security (TLS) protocol, TLS 1.3, currently under development by the Internet Engineering Task Force (IETF). Our analysis shows that the full handshake specified in the TLS 1.3 draft achieves desirable key confirmation for both clients and servers. Interestingly, we demonstrate that the full TLS 1.3 handshake provides key confirmation even without the Finished messages, providing a formal understanding of the security properties of different handshake messages.

We further illustrate the utility of our rigorous definitions by revisiting a common approach to establish key confirmation, as discussed in NIST SP 800-56A. We formalize this approach as a generic protocol transformation and show that the resulting protocols offer strong key confirmation guarantees, confirming its beneficial use in both theoretical and practical protocol designs.

## I. Introduction

Key exchange is one of the most widely deployed cryptographic protocols, enabling confidential and authenticated data exchange in secure communication. The fundamental security properties are key secrecy and entity authentication. Key secrecy ensures that no other party learns information about the key, while entity authentication ensures that the key is shared with the intended partner. Bellare and Rogaway [4] provided rigorous security definitions for these properties, laying a solid foundation for the design and analysis of key exchange protocols.

### A. Key Confirmation

Key confirmation, an intuitively desirable security property, has so far lacked a rigorous treatment. It ensures that when a party accepts a key, it is guaranteed that another party holds the same key. This property is often mentioned in key exchange literature but typically defined informally, such as in the "Handbook of Applied Cryptography" [27, Definition 12.7]. Other references, like Blake-Wilson and Menezes [9], [10], distinguish between explicit and implicit key confirmation, where explicit key confirmation means one party is assured that the other party holds the key, and implicit key confirmation means the other party can compute the key.

The lack of rigorous definitions may be due to the perception that the absence of key confirmation does not open parties to attacks. For example, a party might send messages encrypted with an unconfirmed key, which no one can decrypt. While this may waste resources, it does not pose an obvious security risk. Another reason might be that it seems clear when a protocol has key confirmation, making a formal definition seem unnecessary. Protocols like TLS 1.2 [17] and EMV [20] use the derived key during execution, so receiving a message encrypted with the shared key provides key confirmation assurances.

### B. Our Results

**SECURITY DEFINITIONS:** We propose security definitions that capture the established intuition behind key confirmation. We do not distinguish between explicit and implicit key confirmation, following the reasoning by Blake-Wilson and Menezes [9] that, for practical purposes, the assurances are the same. We recognize that key confirmation guarantees are asymmetric: the party receiving the last message gets stronger guarantees. Therefore, we define full key confirmation and almost-full key confirmation. Full key confirmation ensures that when a party accepts a key, another party has already accepted the same key. Almost-full key confirmation ensures that if a session accepts, it accepts the same key.

Our definitions are modular, allowing us to combine key confirmation with other security properties. Key confirmation alone does not guarantee that the expected communication partner holds the key, but combined with implicit key authentication, it ensures that exactly the expected party holds the key.

**APPLICATION TO TLS:** We use our rigorous definitions to analyze the key confirmation properties of the recent TLS 1.3 draft. Our analysis confirms that the full (EC)DHE handshake of TLS 1.3 achieves full key confirmation for the server and almost-full key confirmation for the client. Surprisingly, we show that key confirmation does not necessarily rely on the Finished messages, but can be achieved even without them, thanks to the CertificateVerify messages.

**GENERIC CONSTRUCTION:** We analyze the popular "refresh-then-MAC" transformation, recommended by NIST [2], [21], and confirm that it provides key confirmation when applied to a key-exchange protocol that ensures key secrecy. Our formalism also shows that a simpler version, where additional key material is sent in clear, can also provide key confirmation.

## II. Key Exchange Protocols and Their Security

In this section, we define key exchange protocols and their security, following the approach of Bellare and Rogaway [4]. We recall the basic security properties of key secrecy and Match security, which ensures soundness of session partnering.

**A. Protocol Syntax:**

We consider two-party protocols where participating parties belong to either a set of clients \( C \) or a set of servers \( S \). Each set has an associated long-term key generation algorithm \( \text{KG}_{\text{client}} \) or \( \text{KG}_{\text{server}} \). We let \( I = C \cup S \) denote the set of all identities in the system.

Our focus is on key exchange protocols defined by an interactive program \( \Pi \) that parties execute locally. Between invocations, the program maintains a state \( st = (crypt, status, role, id, pid, sid, kcid, key) \), where:

- \( crypt \in \{0, 1\}^* \) is some protocol-specific state, e.g., secret Difﬁe-Hellman values.
- \( status \in \{\text{accept}, \text{reject}, \perp\} \) indicates the status of the key-exchange phase. Initially, \( status = \perp \) and may change to accept or reject. Once set, the value does not change, and the adversary immediately learns the value.
- \( role \in \{\text{client}, \text{server}\} \) is the role of the participant.