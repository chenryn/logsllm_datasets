原文：
Web服务器上“不小心”留下的隐藏目录和文件可能是非常有价值的敏感信息来源。在Web应用程序根文件夹下面，可能隐藏着大量的宝贵信息，例如源代码版本系统文件夹和文件(.git、.gitignore和.svn)、项目配置文件(.npmrc、Package.json以及.htaccess)、具有常见扩展名的自定义配置文件（如config.json、config.yml、config.xml等）。
一般而言，这些资源可分为如下所示的几种类型:
  * 源代码版本控制系统
  * IDE (集成开发环境)配置文件
  * 特定于项目和/或技术的配置和设置文件
下面，我们将对其展开深入的介绍——在哪里可以找到它们，以及可以预期得到什么样的信息。
# **源代码版本控制系统**
* * *
## **Git**
* * *
[Git](https://git-scm.com/
"Git")是“(…)一个免费的开源分布式版本控制系统，旨在以快速和高效的方式处理各种规模的项目”。GitHub.com是目前最流行的源代码版本控制系统之一，尤其是在开放源码领域。此外，许多公司也会使用自己的[GitLab](https://about.gitlab.com/
"GitLab")以及GitHub Enterprise或[BitBucket](https://bitbucket.org/ "BitBucket")。
### **Git对象的基本信息**
* * *
新创建的Git存储库包含一些默认的文件夹和文件，用于存储所有的相关信息。下图展示的是sample.git文件夹，其中已经完成了一次提交:
.git文件夹的基本结构
让我们从攻击者的角度来研究一番。Git存储库的内容都是以对象的形式来管理的，它们都被存储在.git/objects文件夹中。
对象可以是以下三种类型之一：commit、tree和blob。
其中，Commit类型的对象存放的是提交操作方面的信息，具有当前tree（文件夹和文件结构）对象的哈希值。
Tree类型的对象用来存放文件夹和文件结构的信息——每个文件夹或文件都有自己的对象哈希值，它们都存储在tree对象中。因此，它可能存放的是另一棵树（文件夹，在文件夹结构中的下一级中）或文件的信息。
Blob是保存文件内容的Git对象类型。换句话说，如果您知道特定文件的对象哈希值，则可以使用git cat-file命令来读取该文件的内容。
当您在Web服务器上找到.git文件夹时，可以通过一种简单的方法来获取任意文件的内容，这时，只需下载和读取git对象。有时候，如果你足够幸运，可以尝试使用标准[git
clone](https://git-scm.com/docs/git-clone "git clone")命令克隆存储库，或者只[运行带有-r选项的wget命令，以递归方式下载所有.git文件夹](https://www.gnu.org/software/wget/manual/html_node/Recursive-Retrieval-Options.html "运行带有-r选项的wget命令，以递归方式下载所有.git文件夹")。但由于某些原因（例如没有必需的凭证或缺少wget命令），这种方法并不总是可行的。下面，让我们假设所有这些选项都是不可能的。
为了确定.git文件夹可用，只需检查是否收到HTTP 403响应（或类似的响应，但不是404，因为这意味着该服务器或该位置没有.git文件夹）：
403响应表明服务器上存在.git文件夹
### **使用本地Git存储库反射远程文件和文件夹**
* * *
为此，我们必须创建自己的、具有框架文件夹结构的本地“dummy”.git存储库，并从远程服务器下载Git对象。
首先，创建dummy Git文件夹：
    $ git init
该命令将使用所有必需的文件和文件夹初始化空的Git存储库。
### **检索和读取有关对象的信息**
* * *
要开始从Git存储库中检索信息，首先必须找到出发点。Git将所有信息都保存在日志文件中，该文件位于.git/logs/head下面。
.git/logs/head示例文件中的内容
如果.git/logs/head无法正常使用，同时.git返回Forbidden 403的话，这意味着它就在该位置，请尝试.git/logs/HEAD。
下图展示的是这个文件的示例行:
    0000000000000000000000000000000000000000 07603070376d63d911f608120eb4b5489b507692 
    PI:EMAIL  1452195279 +0000    commit (initial): index.php initial commit
前两个字符串是（上次和当前提交的）对象哈希值——这正是我们要寻找的。因为这是第一次提交，所以，第一个哈希值只包含0（因为很明显，之前还没有提交过），第二个哈希值包含的是当前提交的相关信息。
首先，我们必须创建对象的有效路径。该路径包含到存储库中所有对象的公共路径，即.git/objects，后面还跟有通过哈希值构建的两部分，一个是目录名（哈希值的前两个字符），另一个是文件名（哈希值的其余部分，从第三个字符开始）。因此，要获得哈希值为07603070376D63D911F608120EB4B5489B507692的对象，应尝试打开以下URL:
    localhost/testapp/.git/objects/07/603070376d63d911f608120eb4b5489b507692
这时，将弹出文件下载窗口:
请记住——您必须将该文件保存在之前创建的dummy
Git文件夹中——这是能够读取Git对象内容的最简单方法，因为默认情况下，Git（程序）将在那里查找它们。因此，请确保将其保存在如下完全相同的位置:
    path-to-your-dummy-git-repository/.git/objects/07/603070376d63d911f608120eb4b5489b507692
现在，[git cat-file](https://git-scm.com/docs/git-cat-file "git cat-file")应该是您最得力的助手了。为了检查对象的类型，可以使用以下命令:
    $ git cat-file -t 
为了显示对象的内容，可以使用如下所示的命令:
    $ git cat-file -p 
现在，我们可以检查以前保存的对象的类型并读取其内容了（我是在本地主机上创建的存储库中执行的该操作，但是对于任何Git存储库，您在计算机上都会得到完全相同的结果——只有哈希值会有所不同）。
当您查看提交描述时，您可以找到有关实际tree对象哈希值的信息——正如我前面提到的，tree对象中存放了当前文件夹结构（更准确地说:完成提交时的文件夹结构）的信息。使用上面的方法，可以看到:
正如您所看到的，目前只有一个文件，即index.php，而且，我们还知道它的对象哈希值和类型，即blob。这就是我们需要使用与以前读取commit对象和tree对象的内容相同的方法来查看文件内容的原因（首先，您必须从Web服务器下载该对象，具体如上所述）:
看到了吧！
需要注意的是，这是index.php的内容，正如对象07603070376D63D911F608120EB4B5489B507692所描述的提交信息那样。如果查看日志文件，可以看到有第二次提交（由对象哈希值4db7a14eee2cd3ff529278b75e1653e677fe1d02可以看出），最后一次提交时，它包含了所有最后的更改，难道index.php的内容与我们到目前为止看到的有所不同？
执行相关的步骤（读取提交内容以查找tree对象的哈希值，然后读取tree对象以查找index.php的哈希值等）后，我们将看到index.php的实际内容:
    bl4de on Rafals-MacBook in /Library/WebServer/Documents/testapp $ git cat-file -p a4215057b6545240452087ad4d015bf9b5b817c5
     .databases
    seq  name             file                                                      
    ---  ---------------  ----------------------------------------------------------    0    main             /Users/bl4de/hacking/playground/wc.db                     
    sqlite> .dump
    PRAGMA foreign_keys=OFF;
    BEGIN TRANSACTION;
    CREATE TABLE REPOSITORY (   id INTEGER PRIMARY KEY AUTOINCREMENT,   root  TEXT UNIQUE NOT NULL,   uuid  TEXT NOT NULL   );
    INSERT INTO "REPOSITORY" VALUES(1,'svn+ssh://192.168.1.4/var/svn-repos/project_wombat','88dcec91-39c3-4b86-8627-702dd82cfa09');
    (...)
    INSERT INTO "NODES" VALUES(1,'trunk',0,'',1,'trunk',1,'normal',NULL,NULL,'dir',X'2829','infinity',NULL,NULL,1,1456055578790922,'bl4de',NULL,NULL,NULL,NULL);
    INSERT INTO "NODES" VALUES(1,'',0,NULL,1,'',1,'normal',NULL,NULL,'dir',X'2829','infinity',NULL,NULL,1,1456055578790922,'bl4de',NULL,NULL,NULL,NULL);
    INSERT INTO "NODES" VALUES(1,'trunk/test.txt',0,'trunk',1,'trunk/test.txt',2,'normal',NULL,NULL,'file',X'2829',NULL,'$sha1$945a60e68acc693fcb74abadb588aac1a9135f62',NULL,2,1456056344886288,'bl4de',38,1456056261000000,NULL,NULL);
    INSERT INTO "NODES" VALUES(1,'trunk/test2.txt',0,'trunk',1,'trunk/test2.txt',3,'normal',NULL,NULL,'file',NULL,NULL,'$sha1$6f3fb98418f14f293f7ad55e2cc468ba692b23ce',NULL,3,1456056740296578,'bl4de',27,1456056696000000,NULL,NULL);
    (...)
看到针对NODES表的INSERT操作了吗？ 其中，每个操作都包含文件名和SHA1哈希值，它们对应于pristine/文件夹中的相关条目：
    $ ls -lA pristine/94/