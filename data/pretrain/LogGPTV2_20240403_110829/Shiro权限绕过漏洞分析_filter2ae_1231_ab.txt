其中我们关心的是获取请求处理器的过程，即getHandler方法实现细节：
首先Spring会循环所有注册的HandlerMapping并返回第一个匹配的HandlerExecutionChain：
对于mapping为RequestMappingHandlerMapping时，则会调用org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler进行获取对应的handler，
在getHandler中调用getHandlerInternal方法，并在其中进行调用getLookupPathForRequest—>getPathWithinServletMapping解析请求路径lookupPath：
对于getPathWithinServletMapping中首先通过getPathWithinApplication获取请求URI在web应用中的路径，其中经过如下调用链：
最终在org.springframework.web.util.UrlPathHelper#getRequestUri中通过request.getRequestURI()获取请求的uri,即/aa/..;test=123/admin/index，并通过decodeAndCleanUriString方法对uri进行处理：
decodeAndCleanUriString方法中主要做了三件事：
1、调用removeSemicolonContent方法对uri进行处理，其中将分号及后面的key-value进行了去除得到新的requestUri为/aa/../admin/index：
2、通过调用decodeRequestString进行URL解码：
3、通过调用getSanitizedPath将//替换为/：
至此经过decodeAndCleanUriString方法处理后最终获取到的uri为/aa/../admin/index，即getPathWithinApplication返回的结果pathWithinApp的值也为/aa/../admin/index：
接下来回到getPathWithinServletMapping中，此时pathWithinApp值为/aa/../admin/index，servletPath为/admin/index，正常情况下将通过getRemainingPath方法将pathWithinApp中servletPath给截取掉，但此时由于两者值无法截取成功返回为null：
由于path为null，则进入else这种特殊情况，最终返回servletPath，即/admin/index：
即最终获取到的lookupPath值为/admin/index，并根据lookupPath的值寻找相对应的handlerMethod为com.ttestoo.bypass.controller.LoginController#admin_index()：
至此，SpringMVC中获取handler的过程已结束，成功获取到/admin/index相对应的handler方法，并将继续获取HandlerAdapter，并执行HandlerAdapter的handle方法利用反射机制执行/admin/index相对应的controller方法com.ttestoo.bypass.controller.LoginController#admin_index()：
**总结：**
当我们发起请求[http://127.0.0.1:9091/aa/..;test=123/admin/index时，经过shiro](http://127.0.0.1:9091/aa/..;test=123/admin/index%E6%97%B6%EF%BC%8C%E7%BB%8F%E8%BF%87shiro)
filter进行权限校验，此时shiro解析到的路径为/aa/..不会和任何规则匹配成功，从而通过了shiro的权限校验；
接下来会由springmvc进行controller解析，此时springmvc解析到的路径为/admin/index，并获取到/admin/index对应的handler方法admin_index，从而正常的执行service并得到最终的响应。
**漏洞本质：**
当路径中包含特殊字符时，shiro解析得到的路径和SpringMVC解析得到的路径不一致，导致可正常通过shiro的权限校验并正常的完成service的执行获取执行结果。
###  利用场景
在实际场景中每个API会通过网关层统一校验或[@RequiresPermissions](https://github.com/RequiresPermissions
"@RequiresPermissions")注解等方式校验所需访问权限，此漏洞仅能绕过shiro全局的Filter校验，无法绕过API配置的访问权限；
个人理解此问题在实战中利用场景相对有限。
###  修复方式
根据官方commit记录，可知在1.5.2开始，在org.apache.shiro.web.util.WebUtils#getRequestUri中获取uri的方式从request.getRequestURI()换成了request.getContextPath()+request.getServletPath()+request.getPathInfo()组合的方式：
此时请求[http://127.0.0.1:9091/aa/..;test=123/admin/index获取到的url为/admin/index，无法绕过shiro的权限校验：](http://127.0.0.1:9091/aa/..;test=123/admin/index%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84url%E4%B8%BA/admin/index%EF%BC%8C%E6%97%A0%E6%B3%95%E7%BB%95%E8%BF%87shiro%E7%9A%84%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C%EF%BC%9A)
## shiro权限绕过 CVE-2020-11989
###  利用条件
主要是针对CVE-2020-1957修复后的绕过探索，主要两种方式：
  * URL双编码：Apache Shiro = 1.5.2 & controller需为类似”/hello/{page}”的方式
  * 分号绕过：Apache Shiro 
###  漏洞分析
**URL双编码分析**
首先发起http请求时，若url中存在URL编码字符，则会被容器进行一次URL解码，此时/hello/te%25%32%66st —>
/hello/te%2fst，接下来则同CVE-2020-1957过程一样，在shiro处理过程中会在org.apache.shiro.web.util.WebUtils#getPathWithinApplication中通过getRequestUri函数获取uri：
在org.apache.shiro.web.util.WebUtils#getRequestUri中首先通过request.getContextPath()+request.getServletPath()+request.getPathInfo()组合的方式获取uri为：//hello/te%2fst
接着在进入normalize函数进行格式化处理时，传入的参数经过了decodeAndCleanUriString方法的处理，其中通过调用org.apache.shiro.web.util.WebUtils#decodeRequestString方法，利用URLDecoder.decode进行了URL解码为：//hello/te/st
继续进入normalize函数，将//替换为/，最终获取到的uri为：/hello/te/st
接下来就同上面shiro过程一致了，/hello/te/st不会和任何的规则匹配，成功解析controller并执行相对应的service获取响应结果：
补充，在1.5.1及之前版本中，获取uri采用request.getRequestURI方式，获取到的为URL双编码的值，shiro进行一次解码并格式化处理后为/hello/te%2fst，则会和/hello/*进行匹配：
**分号绕过分析**
当请求为[http://127.0.0.1:9091/a/..;a=1/test/hello/test时，](http://127.0.0.1:9091/a/..;a=1/test/hello/test%E6%97%B6%EF%BC%8C)
同URL双编码主要区别在经过request.getContextPath()+request.getServletPath()+request.getPathInfo()组合获取到的uri为：/a/..;a=1/test//hello/test
    request.getContextPath() --> /a/..;a=1/test
    request.getServletPath() --> /hello/test
    request.getPathInfo() --> null
接着经过org.apache.shiro.web.util.WebUtils#decodeAndCleanUriString处理后，会根据 ;
进行分割，最终uri结果为：/a/..
从而绕过shiro的权限校验，而接下来则和cve-2020-1957流程一致，springmvc会将 ;
进行剔除，最终根据/a/../test/hello/test，即/test/hello/test成功解析controller并执行service获取响应结果：
###  修复方式
在1.5.3中，获取uri方式改成了getServletPath(request) +
getPathInfo(request)组合的方式，且去除了解码过程：
此时，同样的请求[http://127.0.0.1:9091/a/..;a=1/test/hello/test，获取到的requestURI为：/hello/test](http://127.0.0.1:9091/a/..;a=1/test/hello/test%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84requestURI%E4%B8%BA%EF%BC%9A/hello/test)
请求[http://127.0.0.1:9091/hello/te%25%32%66st](http://127.0.0.1:9091/hello/te%2fst)获取到的requestURI为：/hello/te%27st
## shiro权限绕过 CVE-2020-13933
###  利用条件
Apache shiro
###  漏洞分析
当发起请求[http://127.0.0.1:9091/hello/%3btest时，](http://127.0.0.1:9091/hello/%3btest%E6%97%B6%EF%BC%8C)
首先容器会进行URL解码，/hello/%3btest —> /hello/;test
进入shiro处理，org.apache.shiro.web.util.WebUtils#getPathWithinApplication中最终结果即requestURI为/hello/：
    getServletPath(request) --> /hello/;test
    getPathInfo(request) --> ""
    removeSemicolon中根据;进行分割
而/hello/不会和/hello/*匹配，顺利进入controller解析并执行service获取响应结果：
###  修复方式
在1.6.0中，执行shiro过滤器时增加了preHandle方法进行判断是否继续执行：
判断内容主要为：若请求URI中包含分号、反斜杠、非ASCII字符（均可配置），则直接响应400
核心逻辑均在新增的类org.apache.shiro.web.filter.InvalidRequestFilter中：
## shiro权限绕过 CVE-2020-17523
###  利用条件
Apache Shiro 
2、[http://127.0.0.1:9091/hello/%20](http://127.0.0.1:9091/hello/)
**西式句号 全路径绕过**
需配置开启全路径匹配：
1、.
###  漏洞分析
**空格绕过**
当发起[http://127.0.0.1:9091/hello/%20](http://127.0.0.1:9091/hello/)请求时，
首先经过容器URL解码，/hello/%20 —> /hello/空格
发现在shiro进行匹配过程中，/hello/* 和 /hello/空格 不匹配：
在org.apache.shiro.util.AntPathMatcher#doMatch函数中，/hello/* 和 /hello/空格
经过tokenizeToStringArray函数处理后的结果中/hello空格仅剩/hello：
跟进tokenizeToStringArray方法可知，调用过程中，trimTokens参数值为true：
而当trimTokens为true时，则会调用trim()，此时/hello/后面的空格将会被丢弃：
在接下来的判断过程中，匹配结果为false，即/hello/* 和 /hello/空格 不匹配从而导致shiro的权限绕过：
**西式句号 全路径绕过**
当请求[http://127.0.0.1:9091/hello/.时，首先经过org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getPathWithinApplication处理时，会被normalize函数将/hello/.最后面的](http://127.0.0.1:9091/hello/.%E6%97%B6%EF%BC%8C%E9%A6%96%E5%85%88%E7%BB%8F%E8%BF%87org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getPathWithinApplication%E5%A4%84%E7%90%86%E6%97%B6%EF%BC%8C%E4%BC%9A%E8%A2%ABnormalize%E5%87%BD%E6%95%B0%E5%B0%86/hello/.%E6%9C%80%E5%90%8E%E9%9D%A2%E7%9A%84)
. 删除掉，最终requestURI为/hello/：
在org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain处理过程中，由于此时requestURI以/结尾，则将会把最后一个/删除，变成/hello：
而/hello和/hello/*不匹配导致shiro权限绕过：
但是，此时SpringMVC进行controller解析时，请求路径为/hello/%2e，spring中.和/默认是作为路径分割符的，不会参与到路径匹配，此时将解析controller失败，返回404:
即，虽然绕过了shiro的权限校验，但默认无法解析到controller，也就无法执行想要的service；
特殊情况：
当手工配置开启springboot的全路径匹配时，可成功执行：
    //开启全路径匹配
    @ServletComponentScan
    @SpringBootApplication
    public class Application extends SpringBootServletInitializer implements BeanPostProcessor {
        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }
        @Override
        protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
            return builder.sources(Application.class);
        }
        @Override
        public Object postProcessBeforeInitialization(Object bean, String beanName)
                throws BeansException {
            if (bean instanceof RequestMappingHandlerMapping) {
                ((RequestMappingHandlerMapping) bean).setAlwaysUseFullPath(true);
            }
            return bean;
        }
        @Override
        public Object postProcessAfterInitialization(Object bean, String beanName)
                throws BeansException {
            return bean;
        }
    }
###  修复方式
1、将tokenizeToStringArray函数的trimTokens参数设置为false，防止空格被抛弃：
2、将剔除结尾/的过程移到匹配的下方：
## 总结
开头所说的利用分号绕过了nginx的403屏蔽，请求到springboot项目后携带分号解析成功，而当使用了shiro
1.6.0后，url中携带分号则直接报错400，原因就很清晰了，因为在1.6.0中增加了org.apache.shiro.web.filter.InvalidRequestFilter类，其中会判断请求中包含分号时响应400状态码；
shiro的权限绕过，本质还是shiro对uri的解析规则和后端开发框架的解析规则不一样所导致。
## 巨人的肩膀
……