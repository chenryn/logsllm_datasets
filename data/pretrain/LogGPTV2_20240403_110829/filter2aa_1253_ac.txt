loader.core.dll 负责下载。但该样本自身并没有下载函数，而是从加载自身的进程文件中获取的下
载函数。如果加载失败，则程序结束运行，从而攻击终止。 
                   北京瑞星网安技术股份有限公司 
28 
图：loader.core.dll 获取 loader.exe 的下载函数 
CL.install.dll 是由 loader.core.dll 下载并调用执行的。该文件为.NET 程序，其功能与 v2 版中
的 setup.core.dll 相似，负责安装服务、下载恶意载荷，然后使用 svchost.exe 执行 DLL 劫持技
术，从而加载执行恶意载荷。但不同的是，该样本在执行恶意功能之前需要先从执行程序中读取资
源数据（远控配置信息），如果读取失败则弹框提示错误并退出程序。 
图：loader.exe 资源 
图：CL.install.dll 搜索资源字符串 
图：错误弹框提示 
由上面的分析可知 v1 版和 v2 版在前期几个模块之间的差异主要集中在模块之间的依赖度，相比于
v1 版，v2 版本中前期的几个模块样本之间的耦合低，从而使攻击者可以更加方便快捷的针对各个模
块进行单独更新，此处是本报告中 v2 被判定为 v1 升级版的原因之一。 
                   北京瑞星网安技术股份有限公司 
29 
下载方式 
v1 版中的模块 CL.install.dll 和 v2 版中的 setup.core.dll 功能相似，但是下载恶意载荷的方式
不同。setup.core.dll 是同一个地址中读取压缩包的数据到内存，然后在内存中解压并分别释放到
本地。而 CL.install.dll 则是从两个下载地址分别下载不同的文件，逐个解压释放出最终的恶意载
荷。 
白名单样本及相关库文件的下载地址为：http[:]//asbit[.]cn/~/下载文件名，此处通过一个循环
逐个下载。 
图：下载的白名单文件 
下载站点中除了本次攻击中所需的文件，还包括其他文件，有些是后续攻击中需要用到的文件，而
有些则没有找到有什么用处，需要持续追踪。 
图：样本下载站点 
                   北京瑞星网安技术股份有限公司 
30 
图：恶意载荷 libexpat.dll 下载代码 
上图中恶意载荷 libexpat.dll 的下载链接与 v2 版相同，同为使用阿里云公共 DNS 服务支持的 DoH
协议解析本地域名。但是这种方式在 v1 版的攻击流程中只有此处用到了，其他模块中需要的下载链
接依然是采用硬编码方式。而 v2 版本中所有的下载链接都是采用这种方式，此处是本报告中 v2 版
被判定为 v1 升级版的原因之一。 
比如在模块 CL.loader.dll 中，下载链接就是使用了硬编码方式。 
图：模块 CL.loader.dll 中下载链接 
下载服务器数据更新 
模块程序 libexpat.dll 在 v1 版和 v2 版中使用到的下载链接格式是相同的，都是由三部分组成，格
式为： 
http[:]//mitm[.]work/%s/%s 
http[:]//fmt[.]ink/%s/%s 
链接中的第二和第三部分字符串获取的方式是不同的，代码区别如下图： 
图：URL 字段获取方式 
由上图可知 v1 版本是直接获取字符串的 CRC32 校验值，而 v2 版则是使用了自定义的异或计算获取。 
同时，在更进一步的分析过程中发现，使用 v1 版中获取的下载链接去执行下载操作时，下载的文件
不是 CL.loader.dll，而是与 v2 版中功能基本相同的 system.dll，可见攻击者更新了下载服务器的
数据。虽然已经无法下载，但是根据从数据库中的关联分析，依然找到了最初的恶意载荷
CL.loader.dll。 
                   北京瑞星网安技术股份有限公司 
31 
图：CL.loader.dll 关联到的下载链接 
上图是从数据库中关联分析后得到的数据，可知攻击者发动的攻击行动最早从 21 年 9 月就已经开始
了。图中的下载链接在完成本报告的时候，下载的样本已经被攻击者更新为 system.dll，不排除未
来攻击者会继续更新下载的恶意载荷。 
样本使用的免杀技术 
不断变化的文件 Hash 
以 v2 版本为例，在攻击链条中的 setup.core.dll 阶段，通过查询后台数据我们找到了大量同类文
件，而通过文件十六进制的差异化比较发现该样本在特殊位置存放一个类似 hash 值的数据，每个样
本在此处产生 32 个字节不同的数据变化。 
图：十六进制文件对比 
这一处变化在样本的 rdata 段以字符串形式存储。 
图：数据变化具体位置 
该字符串作为 CreateMutexA 参数中的互斥体名称来使用。 
                   北京瑞星网安技术股份有限公司 
32 
图：相关函数对字符串的使用 
样本作者完全可以利用该字符串，在不影响程序功能的情况下快速生成大量不同 Hash 值的文件。 
而在.NET 编写的 system.dll 中，该模块用了相似的手法，下图为文件对比。 
图：十六进制文件对比 
该样本在其中的一个类成员中存放一个类 GUID 的字符串, 所有样本同样可以通过修改这个成员的
值来快速改变样本文件 Hash 值。 
图：代码所在位置 
无文件攻击 
该后门的部分模块使用了无文件攻击技术以此规避防御。后门程序中通过请求服务端下发的数据，
执行 CompileAssemblyFromSource 并在参数中设置 GenerateInMemory 为 True，用以直接在内存中
生成编译 DLL, 调用其方法执行其他恶意文件。  
                   北京瑞星网安技术股份有限公司 
33 
图：动态编译文件并在内存中执行 
在 loader.core.dll 模块中, 通过 DownloadData 函数从远程地址下载数据串, 此处为了规避流量
检测，下载的数据串为 PE 文件的反序字符串。当下载的数据读取到本地内存后，经过字符串反序操
作，最终的恶意载荷在内存中就被直接调用执行了，没有文件落地，而这种无文件落地的实现方式
在该后门内多次被使用。 
图：下载并调用执行下阶段模块样本 
DLL 劫持 
DLL 劫持的原理来自于系统的 DLL 加载机制。当一个可执行文件运行时，Windows 加载器将可执行模
块映射到当前进程的地址空间中，加载器分析可执行模块的输入表，并设法找出任何需要的 DLL，并
将它们映射到当前进程的地址空间中。  
攻击者利用了此特点，v2 版本内 setup.core.dll 从远程服务器下载的样本是一个压缩包，该压缩
包中的文件有： 
图：下载的文件列表 
                   北京瑞星网安技术股份有限公司 
34 
其中 fdsvc.dll 样本为白名单文件，该样本的导入表中包含了另一个下载的样本 libexpat.dll，而
该样本即为攻击事件中使用到的恶意样本，  
图：fdsvc.dll 导入表信息 
攻击者通过调用 svchost.exe 启动服务时，调用了该服务指向的库文件 fdsvc.dll，而 fdsvc.dll
文件被加载到内存后，Windows 加载器会根据文件的导入表在本地搜索相关 DLL，并将搜索到的文件
自动加载到内存中。下图为白名单样本 fdsvc.dll 导入表中，使用到的恶意样本的函数。  
图：fdsvc.dll 导入恶意样本的函数列表 
当白名单样本调用恶意样本的导出函数时，则执行恶意样本的入口函数，进而实现 DLL 劫持。其中
恶意样本的导出函数代码都是相同的，无实际意义，代码如下： 
                   北京瑞星网安技术股份有限公司 
35 
图：libexpat.dll 导出函数代码 
扩展分析 
在前面的样本分析中，根据程序执行中的消息弹框和代码中的相关字符串我们将该后门命名为
"FastDesktop"，同时我们可以在瑞星威胁情报中心查询到攻击者使用的其中一个域名的 Whois 信
息，如下图： 
                   北京瑞星网安技术股份有限公司 
36 
图：域名解析信息 
打开该站点后，显示了登陆界面，如下图： 
图：登陆界面 
                   北京瑞星网安技术股份有限公司 
37 
经过注册并登陆后，其管理界面如下图，登陆成功后即显示账户已经过期，需要用户进行续费。界
面中的主要功能包括售前/售后、账户充值及管理端下载等功能。 
图：登陆后的管理界面 
创建客户端时允许配置多个选项，其中的“安装提示”我们推测会影响到初始样本执行完成后是否
进行弹窗。 
图：创建客户端 
售前/售后人员微信的二维码。 
                   北京瑞星网安技术股份有限公司 
38 
图：微信二维码 
存放管理端的站点截图如下，其最新的修改时间为 2022 年 4 月 14 日。 
图：存放管理端的站点 
管理端下载到本地运行，登录账户时提示用户需要续费。 
                   北京瑞星网安技术股份有限公司 
39 
图：登陆管理端界面 
由上述分析，我们推测该后门为个人或组织出售的黑产工具。而通过上述管理端文件被修改的时间，
可见整套黑产工具在本报告发布之前，依然十分活跃。 
关于.NET 机器学习引擎 
近年来，采用.NET 编写的恶意软件数量呈现逐年递增的趋势，根据瑞星安全研究院的恶意软件样本
库统计，每年呈 20%~30%的递增趋势。 
图：近年来瑞星捕获到的.NET 恶意程序文件数量 
.NET 被越来越多地用于开发恶意软件，很重要的原因在于.NET 程序具备几项天然的反传统检测能
                   北京瑞星网安技术股份有限公司 
40 
力： 
⚫ 
.NET 程序文件虽然是 Windows PE 格式，但 Windows PE 仅仅用作文件包装，天然地躲避了传统
的针对 PE 结构分析的检测方式。例如，在瑞星针对普通 PE 文件设计的机器学习引擎中，针对
PE 结构及相关数据提取了大量的特征点，但这些特征点对于.NET 程序来说都是无效的。 
⚫ 
.NET 程序使用 MSIL 指令集，对基于 CPU 指令分析、模拟(虚拟)执行技术的检测方式具备天然
的对抗能力。尤其是对于模拟(虚拟)执行技术来说，.NET 程序被有效执行的复杂度远高于基于
CPU 指令集的程序文件（PE/ELF），目前没有一个厂商声称将.NET 程序的模拟执行应用于恶意软
件检测。瑞星在该方向上投入一年的研发成本后，考虑到过高的工程复杂度以及不理想地性能，
终止了相应的研发过程。 
⚫ 
.NET 程序天然支持程序集动态加载、非托管内存操作，使其可以非常方便地实现代码保护、代
码包装。网上有大量的成熟混淆的解决方案可用（也不乏一些优秀的开源解决方案，如
ConfuserEx），大多数.NET 恶意程序都使用混淆器对自身代码进行保护，来躲避传统的特征码检
测。 
鉴于数量不断增长的趋势，瑞星近年来在.NET 恶意软件检测能力上完成了两项重要更新： 
⚫ 
改进传统特征码检测技术。通过反编译将.NET 程序转换为具备良好可读性的结构化文本代码，
我们称之为“.NET 程序主干”。结合智能特征码，可综合.NET 程序主干中的函数调用流、数据
引用流、特殊指令流来表达高抽象度的恶意代码特征，规避了二进制特征码极易被绕过的缺点，
但是该方案依赖人工分析和处理，对新增.NET 恶意软件的响应速度并不理想，日处理量上限也
非常有限。 
⚫ 
研发基于机器学习的.NET 程序文件判定引擎。针对大量的.NET 恶意软件特点的分析和总结，
为.NET 程序文件设计了一套适用于通用检测和混淆检测的向量化方案，将.NET 程序文件转换为
1627 维的特征向量。特征点囊括了潜在的隐写、动态加载、动态编译、压缩解压缩、编码解码、
加密解密、网络下载等多方面的代码意图。同时，瑞星维护了两个训练样本集，一个样本集用
于训练通用检测模型，另一个样本集专门用于训练混淆检测模型，以获得更好的检测效果。目
前训练获得的模型大小约为 4M，可脱离互联网分发至端点进行检测，提升本地反病毒引擎的能
力。 
由此，瑞星在.NET 恶意软件检测能力获得了较大的提升，在缓解人工分析处理压力的同时，也很好
地获得了对未知.NET 恶意软件的“预判”的能力，如本报告提及的"FastDesktop"的 system.dll，
在 VirusTotal 今年 3 月的首次检测报告，仅瑞星一家国内厂商将其判定为“恶意”，同样使用机器
学习技术的 Cynet、SentinelOne 也做出了正确的判断，而大多数依靠“捕获-响应”、基于特征或哈
希的传统厂商以及偏向性使用机器学习的新兴厂商（例如: CrowdStrike），都没能在第一时间做出
正确的判定。 
为适应恶意软件本身不断地发展以及同安全厂商地不断对抗，全面地使用机器学习检测恶意代码，
是瑞星近年来一个主要技术发展方向。从 2015 年开始，按照“一类一学”的理念，逐步丰富机器学
习在恶意代码检测上的应用，目前已经成熟应用的技术有： 
⚫ 
基于聚类算法的恶意 PE 文件判定技术 
⚫ 
基于分类算法的恶意 PE 文件判定技术 
⚫ 
基于分类算法的恶意 PDF 文件判定技术 
⚫ 
基于分类算法的恶意 Flash 文件判定技术 
⚫ 
基于分类算法的恶意 VBA 宏判定技术 
⚫ 
基于分类算法的恶意.NET 程序判定技术 
                   北京瑞星网安技术股份有限公司 
41 
⚫ 
基于分类算法的恶意 EXCEL 公式判定技术 
IOC 
Domain 
fmt[.]ink 
frd[.]ink 
asbit[.]cn 
mitm[.]work 
MD5 
v1 
227EFE3041F806EA9E9F713EC8B9A544 
7270BFFFA2954083106FBFDF35578AF0 
D00EBC9E5F0096268D41AF377C1FA12D 
5B80760306A6252E7C5CED6D6508C906 
1BAC64E285C68543563731DF5F5AA1E2 
6A498D8CC6472B53E9A4151E23968D2F 
v2 
BBBC3919B71F50FBF6939088B7B7FD9E 
DA0A5953C6EE6AE87022BA39FC4D8C74 
7CF6325A5213738148F7315044CCAF98 
B2675490E5906EFDC8B43EBBDDDA95F3 
AA3045BE0C28C50BAF8F024386C650AA 
E33A299C1FE0B0717923BBC2EACBA5E6 
                   北京瑞星网安技术股份有限公司 
42