ADD docker/app/start_server.sh /opt/uwsgi/
# Create a user to run the service
RUN addgroup -S uwsgi
RUN adduser -H -D -S uwsgi
USER uwsgi
# Copy the venv with compile dependencies from the compile-image
COPY --chown=uwsgi:uwsgi --from=compile-image /opt/venv /opt/venv
# Be sure to activate the venv
ENV PATH="/opt/venv/bin:$PATH"
# Copy the code
COPY --chown=uwsgi:uwsgi ThoughtsBackend/ /opt/code/
# Run parameters
WORKDIR /opt/code
EXPOSE 8000
CMD ["/bin/sh", "/opt/uwsgi/start_server.sh"]
```
它执行以下操作:
1.  如前所述，将映像标记为`runtime-image`并继承自阿尔卑斯山。
2.  为运行时安装 Python 和其他需求。
Note that any runtime required for compilation needs to be installed. For example, we install `libffi` in the runtime and `libffi-dev` to compile, required by the `cryptography` package. A mismatch will raise a runtime error when trying to access the (non-present) libraries. The `dev` libraries normally contain the runtime libraries.
3.  复制 uWSGI 配置和脚本以启动服务。我们过一会儿再看。
4.  创建一个用户来运行该服务，并使用`USER`命令将其设置为默认值。
This step is not strictly necessary as, by default, the root user will be used. As our containers are isolated, gaining root access in one is inherently more secure than in a real server. In any case, it's good practice to not configure our public-facing service accessing as root and it will remove some understandable warnings.
5.  从`compile-image`映像复制虚拟环境。这将安装所有已编译的 Python 包。请注意，它们是与运行服务的用户一起复制的，以便能够访问它们。虚拟环境被激活。
6.  复制应用代码。
7.  定义运行参数。注意端口`8000`暴露。这将是我们为应用提供服务的端口。
If running as root, port `80` can be defined. Routing a port in Docker is trivial, though, and other than the front-facing load balancer, there's not really any reason why you need to use the default HTTP port. Use the same one in all your systems, though, which will remove uncertainty.
请注意，应用代码复制在文件的末尾。应用代码很可能是变化最频繁的代码，因此这种结构利用了 Docker 缓存，只重新创建最后几层，而不必从头开始。在设计 Dockerfiles 时考虑这一点。
Also, keep in mind that there's nothing stopping you from changing the order while developing. If you're trying to find a problem with a dependency, and so on, you can comment out irrelevant layers or add steps later once the code is stable.
让我们现在构建我们的容器。请注意，虽然只命名了一个映像，但创建了两个映像。另一个是编译映像，它要大得多，因为它包含编译器等等:
```
$ docker build -f docker/app/Dockerfile --tag thoughts-backend .
...
 ---> 027569681620
Step 12/26 : FROM alpine:3.9 AS runtime-image
...
Successfully built 50efd3830a90
Successfully tagged thoughts-backend:latest
$ docker images | head
REPOSITORY TAG IMAGE ID CREATED SIZE
thoughts-backend latest 50efd3830a90 10 minutes ago 144MB
            027569681620 12 minutes ago 409MB
```
现在我们可以运行容器了。为了能够访问内部端口`8000`，我们需要使用`-p`选项进行路由:
```
$ docker run -it  -p 127.0.0.1:8000:8000/tcp thoughts-backend
```
访问我们的本地浏览器`127.0.0.1`显示我们的应用。您可以在标准输出中看到访问日志:
![](img/b89b7dd6-5676-4799-8613-bc8cf531e29a.png)
您可以使用`docker exec`从不同的终端访问正在运行的容器，并执行新的 shell。记得添加`-it`保持终端打开。用`docker ps`检查当前运行的容器，找到容器编号:
```
$ docker ps
CONTAINER ID IMAGE            COMMAND ... PORTS ...
ac2659958a68 thoughts-backend ... ...     127.0.0.1:8000->8000/tcp 
$ docker exec -it ac2659958a68 /bin/sh
/opt/code $ ls
README.md __pycache__ db.sqlite3 init_db.py pytest.ini requirements.txt tests thoughts_backend wsgi.py
/opt/code $ exit
$ 
```
您可以使用 *Ctrl* + *C* 停止容器，或者更优雅地从另一个 Docker 停止容器:
```
$ docker ps
CONTAINER ID IMAGE            COMMAND ... PORTS ...
ac2659958a68 thoughts-backend ... ...     127.0.0.1:8000->8000/tcp 
$ docker stop ac2659958a68
ac2659958a68
```
日志将显示`graceful stop`:
```
...
spawned uWSGI master process (pid: 6)
spawned uWSGI worker 1 (pid: 7, cores: 1)
spawned uWSGI http 1 (pid: 8)
Caught SIGTERM signal! Sending graceful stop to uWSGI through the master-fifo
Fri May 31 10:29:47 2019 - graceful shutdown triggered...
$ 
```
正确捕获`SIGTERM`并优雅地停止我们的服务对于避免服务突然终止非常重要。我们将看到如何在 uWSGI 中配置它，以及其他元素。
# 配置 uWSGI
`uwsgi.ini`文件包含 uWSGI 配置:
```
[uwsgi]
uid=uwsgi
chdir=/opt/code
wsgi-file=wsgi.py
master=True
pidfile=/tmp/uwsgi.pid
http=:8000
vacuum=True
processes=1
max-requests=5000
# Used to send commands to uWSGI
master-fifo=/tmp/uwsgi-fifo
```
大部分是我们从 Dockerfile 中获得的信息，尽管它需要匹配，以便 uWSGI 知道在哪里可以找到应用代码、要启动的 WSGI 文件的名称、启动它的用户等等。
其他参数特定于 uWSGI 行为:
*   `master`:创建一个控制其他进程的主进程。推荐用于 uWSGI 操作，因为它可以使操作更加流畅。
*   `http`:在指定端口服务。HTTP 模式创建了一个进程，该进程向工作人员负载平衡 HTTP 请求，建议在容器外提供 HTTP 服务。
*   `processes`:应用工人数量。注意，在我们的配置中，这实际上意味着三个进程:一个主进程、一个 HTTP 进程和一个工作进程。更多的工作人员可以处理更多的请求，但会使用更多的内存。在生产中，您需要找到适合您的数量，并根据容器数量进行平衡。
*   `max-requests`:工作器处理完这个数量的请求后，回收该工作器(停止它并启动一个新的)。这降低了内存泄漏的可能性。
*   `vacuum`:退出时清洁环境。
*   `master-fifo`:创建一个向 uWSGI 发送命令的 Unix 管道。我们将使用它来处理优雅的停靠。
The uWSGI documentation ([https://uwsgi-docs.readthedocs.io/en/latest/](https://uwsgi-docs.readthedocs.io/en/latest/)) is quite extensive and comprehensive. It contains a lot of valuable information, both for operating uWSGI itself and understanding details about how web servers operate. I learn something new each time that I read it, but it can be a bit overwhelming at first.
It's worth investing a bit of time in running tests to discover what are the best parameters for your service in areas such as timeouts, the number of workers, and so on. However, remember that some of the options for uWSGI may be better served with your container's configuration, which simplifies things.
为了允许优雅的停止，我们将 uWSGI 的执行包装在我们的`start_server.sh`脚本中:
```
#!/bin/sh
_term() {
  echo "Caught SIGTERM signal! Sending graceful stop to uWSGI through the master-fifo"
  # See details in the uwsgi.ini file and
  # in http://uwsgi-docs.readthedocs.io/en/latest/MasterFIFO.html
  # q means "graceful stop"
  echo q > /tmp/uwsgi-fifo
}
trap _term SIGTERM
uwsgi --ini /opt/uwsgi/uwsgi.ini &
# We need to wait to properly catch the signal, that's why uWSGI is started
# in the background. $! is the PID of uWSGI
wait $!
# The container exits with code 143, which means "exited because SIGTERM"
# 128 + 15 (SIGTERM)
# http://www.tldp.org/LDP/abs/html/exitcodes.html
# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html
```
脚本的核心是调用`uwsgi`启动服务。然后它会一直等到停止。
通过向`master-fifo`管道发送`q`命令，将捕获`SIGTERM`信号并优雅地停止 uWSGI。
A graceful stop means that a request won't be interrupted when a new container version is available. We'll see later how to make rollout deployments, but one of the key elements is to interrupt existing servers when they are not serving requests, to avoid stopping in the middle of a request and leaving an inconsistent state.
Docker 使用`SIGTERM`信号停止容器的执行。超时后会用`SIGKILL`杀死他们。
# 刷新 Docker 命令
我们已经了解了一些重要的 Docker 命令:
*   `docker build`:构建映像
*   `docker run`:运行映像
*   `docker exec`:在运行的容器中执行命令
*   `docker ps`:显示当前运行的容器
*   `docker images`:显示现有映像
虽然这些都是基本的命令，但是了解大多数可用的 Docker 命令对于调试问题和执行诸如监控、复制和标记映像、创建网络等操作非常有用。这些命令还将向您展示很多关于 Docker 如何在内部工作的信息。
An important command: be sure to clean up old containers and images with `docker system prune` from time to time. Docker is quite space-intensive after working with it for a few weeks.
Docker 文档([https://docs . Docker . com/v 17.12/engine/reference/command line/Docker/](https://docs.docker.com/v17.12/engine/reference/commandline/docker/))相当完整。一定要知道你的方法。
# 使用不可变的容器操作
像本章前面看到的 Docker 命令是基础，一切都从这里开始。但是，当处理多个问题时，处理起来就变得复杂了。您已经看到有些命令可能会很长。
要在集群操作中操作容器，我们将使用`docker-compose`。这是 Docker 自己定义多容器操作的编排工具。它由一个包含所有不同任务和服务的 YAML 文件定义，每个任务和服务都有足够的上下文来构建和运行它。
它允许您在这个配置文件中存储每个服务的不同服务和参数，默认称为`docker-compose.yaml`。这允许您协调它们并生成可复制的服务集群。
# 测试容器
我们将从创建一个服务来运行单元测试开始。请记住，测试需要在容器内运行*。这将使它们的执行标准化，并确保依赖性是恒定的。*
Note that, in the creation of our container, we include all the requirements to execute the tests. There's the option to create the running container and inherit from it to add the tests and test dependencies.
This certainly creates a smaller running container but creates a situation where the testing container is not 100% exactly the same as the one in production. If the size is critical and there's a big difference, this may be an option, but be aware of the differentiation if there's a subtle bug.
我们需要在`docker-compose.yaml`文件中定义一个服务，这样:
```
version: '3.7'
services:
    # Development related
    test-sqlite:
        environment:
            - PYTHONDONTWRITEBYTECODE=1
        build:
            dockerfile: docker/app/Dockerfile
            context: .
        entrypoint: pytest
        volumes:
            - ./ThoughtsBackend:/opt/code
```
本节定义了一个名为`test-sqlite`的服务。构建定义了要使用的 Dockerfile 和上下文，就像我们使用`docker build`命令一样。`docker-compose`自动设置名称。
我们可以使用以下命令构建容器:
```
$ docker-compose build test-sqlite
Building test-sqlite
...
Successfully built 8751a4a870d9
Successfully tagged ch3_test-sqlite:latest
```
`entrypoint`指定要运行的命令，在这种情况下，通过`pytest`命令运行测试。
There are some differences between the command and the `entrypoint`, which both execute a command. The most relevant ones are that `command` is easier to overwrite and `entrypoint` appends any extra arguments at the end.
要运行容器，调用`run`命令:
```
$ docker-compose run test-sqlite
=================== test session starts ===================
platform linux -- Python 3.6.8, pytest-4.5.0, py-1.8.0, pluggy-0.12.0 -- /opt/venv/bin/python3
cachedir: .pytest_cache
rootdir: /opt/code, inifile: pytest.ini
plugins: flask-0.14.0
collected 17 items
tests/test_thoughts.py::test_create_me_thought PASSED [ 5%]
...
tests/test_token_validation.py::test_valid_token_header PASSED [100%]
========== 17 passed, 177 warnings in 1.25 seconds ============
$ 
```
您可以附加`pytest`参数，这些参数将被传递给内部`entrypoint`。例如，要运行与*验证*字符串匹配的测试，请运行以下命令:
```
$ docker-compose run test-sqlite -k validation
...
===== 9 passed, 8 deselected, 13 warnings in 0.30 seconds =======
$
```
有两个额外的细节:当前代码通过一个卷装载，并覆盖容器中的代码。查看`./ThoughtsBackend`中的当前代码是如何安装在容器`/opt/code`中代码的位置的。这对于开发来说非常方便，因为它将避免每次进行更改时都必须重新构建容器。
这也意味着装载目录层次结构中的任何写入都将保存在本地文件系统中。例如`./ThoughtsBackend/db.sqlite3`数据库文件允许你使用它进行测试。它还将存储生成的`pyc`文件。