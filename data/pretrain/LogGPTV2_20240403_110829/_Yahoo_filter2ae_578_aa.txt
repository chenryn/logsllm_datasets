# 【技术分享】如何通过越界读取漏洞导出内存中的Yahoo!认证密钥
|
##### 译文声明
本文是翻译文章，文章来源：scarybeastsecurity.blogspot.hk
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
在我之前发布的关于Yahoobleed
#1（YB1）的一篇[文章](https://scarybeastsecurity.blogspot.com/2017/05/bleed-continues-18-byte-file-14k-bounty.html)中，我们了解到如何利用未初始化漏洞获取其他用户的私密图像信息。当时泄露的内存数据受制于JPEG图像的压缩机制，这种限制对某个图像大盗来说不成问题，然而如果我们想要窃取其他类型的内存内容，已泄露的这些数据仍稍显不足。
在这篇文章中，我会向大家介绍Yahoo!缩略图服务器上存在的另一个滴血（bleed）类的漏洞，我们可以将这个称之为Yahoobleed
#2（YB2）。我们可以利用这个JPEG压缩缺陷（现在这个缺陷依然存在）提取原始的内存字节。结合“strings”工具的使用，我们还可以发现更多惊喜。
Yahoo!通过弃用ImageMagic的方式，在修复YB1漏洞的同时也修复了YB2漏洞。大家可以参考我之前的一篇[文章](https://scarybeastsecurity.blogspot.com/2017/05/bleed-continues-18-byte-file-14k-bounty.html)，通过Yahoo!的回复进一步了解漏洞的修复细节。
**二、可视化**
当我们触发该漏洞时，Yahoo!服务器返回JPEG图片上会出现某些噪点。如上图所示，漏洞触发后，Yahoo!服务器返回了某张JPEG图片，将图片的某个64×4区域转化为PNG格式（即无损格式），放大后可以看到某些噪点，如上图所示。
这张图片有许多有趣的地方值得注意，就现在而言，我们可以观察到的是，图片的顶部存在几个指针图像。我曾在Project
Zero上发表过有关指针可视化的一篇[文章](https://googleprojectzero.blogspot.com/2014/08/what-does-pointer-look-like-anyway.html)，如果你对这篇文章有所了解，你可以在各种内存泄露场景中发现这类指针的存在。至少对于x86_64架构的Linux来说，该系统中的指针通常都包含一个0x00007f的前缀。这类指针的包含几个特点，如：
1、使用相同的对齐方式重复类似的结构（64位系统上使用8字节对齐）；
2、在指针块中，白色垂直条纹指向的是被对齐的最重要的字节，表示的是0x00（需要注意的是，由于输入文件的特殊格式，所泄露的字节实际上经过了取反处理）；
3、在指针块中，紧挨其后的黑色垂直条纹所代表的含义是某行的7个比特的值被设置为0x7f。
4、在指针块中，紧挨其后的白色垂直细长条纹所代表的含义是该行的1个比特的值没有被设置为0x7f。
但我们还是会遇到JPEG压缩算法，这会不会对逐字节数据提取造成困难？我们会慢慢揭开这个谜题。
**  
**
**三、漏洞分析**
我们不知道Yahoo!所使用的ImageMagic是否是最新版本，因此我们开始寻找相关的漏洞是否存在。我们已经知道Yahoo!支持RLE格式，之前我在一篇[文章](https://scarybeastsecurity.blogspot.com/2017/03/black-box-discovery-of-memory.html)中介绍了如何使用某个技巧挖掘Box.com的内存损坏漏洞，也许我们可以使用相同的技巧对Yahoo!进行测试。
非常有趣的是，漏洞利用文件并不会导致任何文件崩溃，但服务器依然渲染了所有的测试文件，而最新版本的ImageMagic完全不会渲染这些文件。经过一番思考，我认为最有可能的解释就是，Yahoo!所用的ImageMagic的确是存在漏洞的老版本，但根据我们对YB1漏洞的分析，Yahoo!使用了不一样的堆设置，受对齐方式影响，我们的堆越界访问测试用例无法在Yahoo!上生效。
为了验证这个假设，我们构造了一个堆越界写RLE文件，足以覆盖堆中的某一小块数据（64字节大小，大约会有16个字节被覆盖），并将该文件上传到Yahoo!上。访问缩略图URL后，服务器会较为稳定地（以大约50%左右的概率）返回如下结果：
这个结果看上去像是一个非常明显的后端错误，我们猜测它最有可能是一个SIGSEGV错误，这个错误与已有两年历史的[RLE内存损坏问题](http://git.imagemagick.org/repos/ImageMagick/commit/7131d8ff451a1d5163e7e35b7a910df80cb54fab)有关。
但是我们今天的目标并不是如何利用这个RCE内存损坏错误，虽然这个过程肯定非常有趣。我们的目标是通过滴血攻击来提取数据。现在，我们手上拥有的是一个已有2.5岁年龄的ImageMagick，对于这个版本的ImageMagick而言，肯定有许多漏洞已经被修复了。经过一番搜索，我们找到了一个候选漏洞：一个已有2年以上历史的、已经在SUN解码器中修复的[越界漏洞](http://git.imagemagick.org/repos/ImageMagick/commit/b8f17d08b7418204bf8a05a5c24e87b2fc395b75)。在这个漏洞的修复代码中，开发者似乎对长度做了相关检查，同时更加彻底地应用长度检查过程，使其能够将色深（bit
depth）为1的图像包含在内。让我们稍微研究一下没有打上补丁的代码，并且深入跟踪程序对色深为1的图片的解码路径，我们可以发现如下代码（位于[coders/sun.c](http://git.imagemagick.org/repos/ImageMagick/blob/acabb847a592ca5e430c1c0949d03acfc0b78bb9/coders/sun.c)中）：
    sun_info.width=ReadBlobMSBLong(image);
    sun_info.height=ReadBlobMSBLong(image);
    sun_info.depth=ReadBlobMSBLong(image);
    sun_info.length=ReadBlobMSBLong(image);
    [...]
    number_pixels=(MagickSizeType) image->columns*image->rows;
    if ((sun_info.type != RT_ENCODED) && (sun_info.depth >= 8) &&
    ((number_pixels*((sun_info.depth+7)/8)) > sun_info.length))
    ThrowReaderException(CorruptImageError,"ImproperImageHeader");
    bytes_per_line=sun_info.width*sun_info.depth;
    sun_data=(unsigned char *) AcquireQuantumMemory((size_t) sun_info.length,
    sizeof(*sun_data));
    [...]
        count=(ssize_t) ReadBlob(image,sun_info.length,sun_data);
        if (count != (ssize_t) sun_info.length)
          ThrowReaderException(CorruptImageError,"UnableToReadImageData");
        sun_pixels=sun_data;
        bytes_per_line=0;
    [...]
        p=sun_pixels;
        if (sun_info.depth == 1)
          for (y=0; y rows; y++)
          {
            q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);
            if (q == (Quantum *) NULL)
              break;
            for (x=0; x columns-7); x+=8)