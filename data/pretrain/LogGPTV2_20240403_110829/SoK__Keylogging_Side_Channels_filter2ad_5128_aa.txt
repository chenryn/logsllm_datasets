title:SoK: Keylogging Side Channels
author:John V. Monaco
2018 IEEE Symposium on Security and Privacy
SoK: Keylogging Side Channels
John V. Monaco
U.S. Army Research Laboratory
Aberdeen Proving Ground, MD, USA
Abstract—The ﬁrst keylogging side channel attack was dis-
covered over 50 years ago when Bell Laboratory researchers
noticed an electromagnetic spike emanating from a Bell 131-
B2 teletype terminal. This spike, emitted upon each key press,
enabled up to 75% of plaintext communications to be recovered
in ﬁeld conditions. Since then, keylogging attacks have come
to leverage side channels emanating from the user’s ﬁnger
and hand movements, countless keyboard electromagnetic and
acoustic emanations, microarchitectural attacks on the host
computer, and encrypted network trafﬁc. These attacks can each
be characterized by the type of information the side channel
leaks: a spatial side channel reveals physical key locations or
the similarity between key pairs, and a temporal side channel
leverages key press and release timings. We deﬁne and evaluate
the performance of idealized spatial and temporal keylogging
side channels and ﬁnd that, under the assumption of typing
English words, nontrivial information gains can be achieved even
in the presence of substantial measurement error. For temporal
side channels, we ﬁnd that the information gained by different
temporal features strongly correlates to typing speed and style.
Finally, to help drive future research, we review the current state-
of-the-art keylogging side channel attacks and discuss some of
the mitigation techniques that can be applied.
I. INTRODUCTION
In 1984, sixteen electromechanical bugs were discovered
inside IBM Selectric II and Selectric III typewriters at the
U.S. Embassy in Moscow and U.S. Consulate in Leningrad [1].
The bugs, developed by the Soviet Union (USSR), contained 6
magnetometers that sensed upon each keystroke the actuation
of 6 individual levers in the Selectric typewriter. The unique
combination of actuated levers enabled the Selectric Bug to
determine which key had been pressed, ignoring Shift, Space,
and some other non-letter keys. Up to 8 key presses were
stored in an 8×4-bit core memory, and when this became full
the memory contents were transmitted via radio bursts to a
nearby listening post. The Soviets developed at least 5 versions
of the Selectric Bug which enabled them to log the keystrokes
of their adversaries for more than 8 years [1].
Keystroke logging, or keylogging, is the practice of record-
ing the keys a person types on a keyboard. This can often be
accomplished by means of a side channel attack, whereby an
unintended information source is leveraged. The Selectric Bug
is one of the ﬁrst such hardware keyloggers discovered in the
wild and represents a milestone in surveillance technology. It
is perhaps one of the most successfully executed attacks on
keyboard input known to the public and helped raise awareness
to the real possibility of covertly logging keystrokes. The idea
itself of using a side channel attack to log keystrokes dates
back over 50 years to the well-known TEMPEST Program,
prompted by the discovery of Bell Laboratory researchers that
emanating electromagnetic spikes from a teletype terminal
Fig. 1.
Selectric Bug, one of the ﬁrst keylogging side channel attacks
discovered in the wild. Reprinted with permission from [4] and on display in
the National Cryptologic Museum.
could be used to effortlessly decode secure communications
[2], [3]. In the years to come, keylogging side channel attacks
would evolve from typewriter to computer keyboard and grow
to cover a broad spectrum of vulnerabilities. Likewise, rela-
tively sophisticated keylogging defenses have been developed
to address a diverse set of attack scenarios.
There currently exists a number of modalities with which
keystrokes can be detected and identiﬁed, including WiFi sig-
nal distortion [5], electromagnetic (EM) emanations [6], CPU
cache usage [7], and network trafﬁc patterns [8]. Conversely,
side channel mitigation can in some cases be achieved by low-
cost countermeasures that aim to reduce emanations [9] and
mask typing behavior [10]. Each attack relies on a side channel
that emanates from either the user, the host computer, the
keyboard, or the network, respectively. And while some attacks
utilize a side channel that leaks only temporal information,
such as the timing of key press and release events, others
leverage spatial
the location of and
physical distance between keys on the keyboard.
information to reveal
This work aims to establish a framework within which
keylogging side channel attacks and defenses are described
and evaluated. Keylogging performance metrics are deﬁned,
and the effects of spatial measurement error and typing speed
of the victim are determined for idealized spatial and temporal
side channels. To help drive future research, we attempt to con-
solidate much of the core knowledge in keyboard mechanics
and review the current state-of-the-art keylogging side channel
attacks and defensive mitigation techniques.
The rest of this article is organized as follows. Section II
reviews the basic operation and communication protocols of
the keyboard, providing the basis for many side channel
attacks. Timing issues are also considered, including sources
of delay and the effects of process scheduling. Section III
formally deﬁnes the problem of keylogging with respective
performance metrics and introduces the concept of idealized
spatial and temporal side channels. Speciﬁc keylogging attacks
and defenses are characterized in Sections IV and V, respec-
tively. Section VI discusses privacy concerns and identiﬁes
directions for future research. Section VII concludes and the
Appendix provides a summary of public keystroke datasets.
© 2018, John Monaco. Under license to IEEE.
DOI 10.1109/SP.2018.00026
211
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:41 UTC from IEEE Xplore.  Restrictions apply. 
Rubber dome
Scissor switch
Mechanical switch
Buckling spring

























Fig. 2. Common keyboard switch designs.
II. BACKGROUND
There exist a great variety of keyboard1 types that differ
in the way keys are actuated, sensed, encoded, and reported
to the host. In this section, some of the most widely used
components and communication protocols are reviewed.
A. Keyboard Layout
The modern computer keyboard is the heir to the ﬁrst
commercially successful typewriter invented by Christopher
Latham Sholes [12]. Today, a distinction can be made between
the logical layout, which deﬁnes a mapping of key identiﬁers
to physical key locations (e.g., QWERTY vs DVORAK), and
the physical layout, regarding the shape and arrangement of
keys on the keyboard. The dimension and placement of keys
is often speciﬁed by the relative unit measurement, which is
agnostic to the physical dimensions of the keyboard: 1 unit (u)
is the length and width of the space occupied by square
alphanumeric keys, and on most keyboards, the horizontal
center-to-center key distance. The dimensions of other keys
can be speciﬁed in terms of keyboard units: e.g., on the ANSI
101 physical layout, Tab is 1× 1.5 u, Caps Lock is 1× 1.75 u,
and LShift is 1 × 2.25 u [13]. The physical distance tied to
1 u varies depending on speciﬁc keyboard, although the ISO
standard speciﬁes 1 u≡19±1 mm for full-sized keyboards [14].
B. Sensing and Actuation
The sensing method refers to the way in which a keystroke
is physically sensed [15]. Sensing can be performed through
conductance, capacitance, photo-conductance, or even Hall
effect, a method intended for applications that require extreme
reliability, such as aircraft cockpits [16]. Most commodity
keyboards since the mid 1990’s utilize a ﬂexible conductive
membrane with printed circuits to detect keys. The membrane
is comprised of three layered plastic sheets with circuit traces
on the top and bottom sheets. The middle sheet contains
cavities at each key location so that when pressure is applied
to the area above the cavity the circuit is completed.
The switch refers to the actuation mechanism that interfaces
the sensor, also providing tactile and auditory feedback to the
user. Among the common switch types, shown in Figure 2,
are the rubber dome, scissor switch, mechanical switch, and
buckling spring. Most commodity keyboards consist of a
rubber dome switch on top of a membrane layer [17]. The
key cap sits on top of a plunger which, when pushed, causes a
1The focus of this work is on full-size hardware keyboards and not “soft”
touchscreen keyboards. For an example of an attack on the latter, see [11].
switch, keyboards
switch, or mechanical
Unlike rubber dome and scissor switch keyboards, metal
contact
sense
keystrokes through the conductance of metal contacts as op-
posed to an underlying membrane. Most mechanical switches
operate by negative action, whereby the switch assembly
displaces an object
that holds metal contacts apart; when
the object is removed, the metal contacts close on their own
accord. This design ensures more consistent closing behavior
than positive action, whereby the switch assembly brings the
metal contacts to together.
rubber dome to apply pressure to the membrane and complete
the circuit. The typical rubber dome switch provides 3.5–4 mm
of travel and requires 50–70 cN of force to actuate, although
the latter varies based on speciﬁc manufacturing process [18].
Stabilized, or scissor switch, keys are common in laptops
and low-proﬁle “chiclet” keyboards [19], [20]. Scissor switch
keys are characterized by a set of leveling arms that stabilize
the key cap upon actuation, traveling a distance of up to 2 mm.
Although they have a lower proﬁle than standard rubber dome
keyboards, the actuation force is comparable [18].
Buckling spring switches, which emit a characteristic sound,
predate the modern rubber dome-over-membrane design [21].
Popularized by IBM in the 1970’s and 1980’s, the buckling
spring switch operates by compressing a spring to the point of
catastrophic buckling upon which it pivots a rocking member
that actuates the sensor below, such as a membrane.
C. Matrix Scanning
A major function of the microcontroller is to detect any
pressed keys. To avoid having a dedicated line for each key,
this is usually performed by multiplexing a matrix circuit
design such that the intersection of each column (scanning
line) and row (feedback line) forms a switch for each key [22].
The microcontroller continuously scans the matrix, pulsing
each column for a short duration (up to 3 μs) at a rate
referred to as the matrix scan rate. Any key pressed along
the pulsed column completes a circuit which is detected at
the corresponding row. In this way, a key press can only be
detected when the microcontroller pulses the appropriate col-
umn. Although cost efﬁcient, this design can lead to ghosting,
or the erroneous detection of a fourth key when three adjacent
keys in the matrix are pressed. Similarly, masking occurs when
three adjacent keys in the matrix are simultaneously pressed
and a fourth key cannot be detected. Key arrangement within
the matrix, and some redundancy, can mitigate these effects.
The matrix of a typical 101-key keyboard has up to 24 columns
and 8 rows, which can support up to 192 unique keys [22].
212
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:41 UTC from IEEE Xplore.  Restrictions apply. 
D. Communication Protocols
There are predominately two ways in which keyboards
communicate with the host computer, PS/2 and USB, differing
in the way keystrokes are both encoded and transmitted.
1) PS/2: Each physical key is assigned a unique scancode
which is transmitted to the host by the keyboard in an 11-
bit frame comprised of: a start bit (always 0), 8 bits for the
scancode (least signiﬁcant bit ﬁrst), odd parity check bit, and a
stop bit. For each bit, the keyboard pulls down the clock signal,
which must be in the range 10–16.7 kHz and is provided by
the keyboard itself, and then sends the bit over the data line,
i.e., data should be sent from the keyboard to the host on the
falling edge of the clock signal [23].
2) USB: Unlike PS/2, USB keyboards are passive in nature
[24]. The universal host controller interface (UHCI) periodi-
cally issues a query to the keyboard and the keyboard responds
with its current state indicating which keys are pressed [25].
The polling interval of the UHCI determines the maximum
rate that the keyboard can report any changes in state, which
ranges anywhere from 100 Hz to 1000 Hz (125 Hz is a
common default). Most USB keyboards implement USB 1.x
since they require relatively low bandwidth. Even low speed
USB devices, which use a 6 MHz clock and non return
to zero inverted (NRZI) encoding, can achieve much higher
transmission rates than PS/2.
The USB keyboard state is an 8-byte packet that contains
a modiﬁer key mask (byte 0), a reserved byte (byte 1), and
up to 6 keys that are currently pressed (bytes 2-7). There is
no way to send a “release” event as the keyboard can only
report that some keys are in a pressed state. Because of this,
the host computer must maintain its own state of the keyboard,
inferring key releases when necessary. The order of keys in the
packet does not matter, and due to the size of the packet, USB
keyboards are limited to 8 modiﬁer keys and 6 non-modiﬁer
keys (commonly referred to as 6-key-rollover, or 6KRO).
3) Keyboard Interrupts: After the key press or release event
is encoded by the keyboard and transmitted to the host, a
hardware interrupt is raised on the host. The hardware interrupt
ﬂags the CPU to respond to the keyboard event, which
typically involves reading the scancode (PS/2) or key identiﬁer
(USB) from the keyboard buffer. Followup processing, such as
making the event available to shared libraries and user appli-
cations, may be performed later since the kernel must respond
as quickly as possible to the hardware interrupt. Until the
keyboard buffer is cleared and the interrupt is acknowledged
by the host, no further keystrokes can be received.
E. Timing: Sources of Delay and Variability
Due to the physical structure of the keyboard, a key press
is always followed by a key release, and together they form
a full keystroke2. From the perspective of the host computer,
a keystroke is a 3-tuple with the physical key identiﬁer k, the
press time tP , and the release time tR.
A class of keylogging techniques that exploit temporal side
channels, described in Section III-C, rely on the precise timing
of keyboard events. The temporal resolution and precision3 of
each keystroke depends on the sampling rate of the sensor,
where in the processing pipeline it was detected, the speed
and scheduling policy of the host computer, and the keyboard
itself. There are several sources of delay and timing variability
that can affect both the resolution and precision with which
keystrokes are measured. These include:
1) Physical Delay: The time from physical contact between
the user’s ﬁnger and key cap to the point of actuation depends
on characteristics of the switching mechanism in the keyboard,
such as travel distance, feedback proﬁle, and actuation force.
As described in Section II-B, these properties vary between
keyboard types. From the perspective of the host, the physical
delay cannot be measured since a keystroke is sensed only
at
the point of actuation. However, an external sensor in
proximity to the user, such as a microphone or motion sensor,
can track the user’s hand movements and consider the physical
delay if necessary (see Figure 8).
2) Matrix Scan Rate: The rate at which the microcontroller
pulses the scanning lines in the keyboard matrix varies be-
tween keyboard models, ranging anywhere from 100 Hz to
400 Hz [26]. If a key press or release occurs just after the
corresponding column was pulsed, it will have to wait until
the next pulse arrives. This introduces a maximum delay of
dsc = 1000/fsc ms with, assuming a uniform distribution of
sc/12 ms,
d2
delays, mean dsc/2 ms and standard deviation
where fsc is the scanning frequency.
(cid:2)
3) Debouncing: When a key is pressed, it closes a switch
in underlying the circuit. This does not occur instantaneously,
but rather takes time for the switch to reach a stable closed
state, commonly referred to as switch bouncing. In order to
not generate spurious keystrokes, debouncing must be applied.
Many keyboards have a ≤ 5 ms debounce timeout [27], [28].
4) Encoding: Once the keyboard microcontroller deter-
mines that a key has been pressed, it enters a subroutine to
convert the action into a digital signal for transmission to the
host. This process interrupts the matrix scanning routine after
the last scanning column that was pulsed, causing a small
delay. Some side channels make explicit use of this delay to
infer the column along which a key was pressed, narrowing
down the possibilities to a much smaller subset of keys [6].
5) Polling Rate (USB): USB keyboards have an additional
source of latency that arises from the USB polling rate. Since
USB keyboards are passive in nature, they must wait for
the UHCI to query their state before responding with any
pressed keys. Similar to the matrix scan rate, the USB polling
rate introduces a maximum delay of dpo = 1000/fpo ms,
where fpo is the USB polling frequency. PS/2 keyboards are
interrupt-based, therefore do not suffer from polling delays.
6) Process Scheduling: Once the scancode reaches the
is raised. The kernel
host computer, a hardware interrupt
2This is in contrast to touchscreen keyboards which allow a key to be
pressed without subsequently being released by dragging the pointing device.
3Resolution is the degree to which a measurement can be made and
precision is the degree to which a measurement can be repeated.
213
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:29:41 UTC from IEEE Xplore.  Restrictions apply. 
outside of the keyboard communication pipeline described in
Section II-D. Such a side channel may utilize either a hardware
or software sensor, e.g., a microphone to capture acoustic
emanations or a program that runs on the host to measure
CPU load. Keylogging side channel modalities can broadly
be characterized as being either spatial or temporal: spatial
side channels use spatial information to reveal physical key
locations on the keyboard, and temporal side channels use
keystroke timings to determine individual keys or key pairs.