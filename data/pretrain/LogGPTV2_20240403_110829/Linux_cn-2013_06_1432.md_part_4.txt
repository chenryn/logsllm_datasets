$purifier = new HTMLPurifier(HTMLPurifier_Config::createDefault());
$safeHtml = $purifier->purify($evilHtml);
// $safeHtml is now sanitized.  You can output $safeHtml to your 
// users without fear!
?>
```
**陷阱**
* 以错误的字符编码使用htmlentities()会造成意想不到的输出。在调用该函数时始终确认 指定了一种字符编码，并且该编码与将被净化的字符串的编码相匹配。更多细节请查看 [UTF-8一节](https://phpbestpractices.org/#utf-8)。
* 使用htmlentities()时，始终包含ENT\_QUOTES和字符编码参数。默认情况下，htmlentities() 不会对单引号编码。多愚蠢的默认做法！
* HTML Purifier对于复杂的HTML效率极其的低。可以考虑设置一个缓存方案如APC来保存经过净化的结果 以备后用。
**进一步阅读**
* [PHP HTML净化工具对比](http://htmlpurifier.org/comparison)
* [Stack Overflow: 使用strip\_tags()来防止XSS？](http://stackoverflow.com/questions/3605629/php-prevent-xss-with-strip-tags)
* [Stack Overflow: PHP中净化用户输入的最佳方法是什么？](http://stackoverflow.com/questions/129677/whats-the-best-method-for-sanitizing-user-input-with-php)
* [Stack Overflow: 断行时的FILTER\_SANITIZE\_SPECIAL\_CHARS问题](http://stackoverflow.com/questions/3150413/filter-sanitize-special-chars-problem-with-line-breaks)
PHP与UTF-8
---------
### 没有一行式解决方案。小心、注意细节，以及一致性。
PHP中的UTF-8糟透了。原谅我的用词。
目前PHP在低层次上还不支持Unicode。有几种方式可以确保UTF-8字符串能够被正确处理， 但并不容易，需要深入到web应用的所有层面，从HTML，到SQL，到PHP。我们旨在提供一个简洁、 实用的概述。
**PHP层面的UTF-8**
基本的[字符串操作](http://php.net/manual/en/language.operators.string.php)，如串接 两个字符串、将字符串赋给变量，并不需要任何针对UTF-8的特殊东西。然而，多数 [字符串函数](http://php.net/manual/en/ref.strings.php)，如[strpos()](http://php.net/manual/en/function.strpos.php) 和[strlen](http://php.net/manual/en/function.strlen.php)，就需要特殊的考虑。这些 函数都有一个对应的mb\_\*函数：例如，[mb\_strpos()](http://php.net/manual/en/function.mb-strpos.php)和[mb\_strlen()](http://php.net/manual/en/function.mb-strlen.php)。这些对应的函数 统称为[多字节字符串函数](http://php.net/manual/en/ref.mbstring.php)。这些多字节字符串 函数是专门为操作Unicode字符串而设计的。
当你操作Unicode字符串时，必须使用mb\_\*函数。例如，如果你使用[substr()](http://php.net/manual/en/function.substr.php) 操作一个UTF-8字符串，其结果就很可能包含一些乱码。正确的函数应该是对应的多字节函数， [mb\_substr()](http://php.net/manual/en/function.mb-substr.php)。
难的是始终记得使用mb\_\*函数。即使你仅一次忘了，你的Unicode字符串在接下来的处理中 就可能产生乱码。
并不是所有的字符串函数都有一个对应的mb\_\*。如果不存在你想要的那一个，那你就只能 自认倒霉了。
此外，在每个PHP脚本的顶部（或者在全局包含脚本的顶部）你都应使用 [mb\_internal\_encoding](http://php.net/manual/en/function.mb-internal-encoding.php) 函数，如果你的脚本会输出到浏览器，那么还得紧跟其后加个[mb\_http\_output()](http://php.net/manual/en/function.mb-http-output.php) 函数。在每个脚本中显式地定义字符串的编码在以后能为你减少很多令人头疼的事情。
最后，许多操作字符串的PHP函数都有一个可选参数让你指定字符编码。若有该选项， 你应 始终显式地指明UTF-8编码。例如，[htmlentities()](http://php.net/manual/en/function.htmlentities.php) 就有一个字符编码方式选项，在处理这样的字符串时应始终指定UTF-8。
**MySQL层面的UTF-8**
如果你的PHP脚本会访问MySQL，即使你遵从了前述的注意事项，你的字符串也有可能在数据库 中存储为非UTF-8字符串。
确保从PHP到MySQL的字符串为UTF-8编码的，确保你的数据库以及数据表均设置为utf8mb4字符集， 并且在你的数据库中执行任何其他查询之前先执行MySQL查询`set names utf8mb4`。这是至关重要的。示例 请查看[连接并查询MySQL数据库](https://phpbestpractices.org/#mysql)一节内容。
注意你必须使用`utf8mb4`字符集来获得完整的UTF-8支持，而不是`utf8`字符集！原因 请查看[进一步阅读](https://phpbestpractices.org/#utf8-further-reading)。
**浏览器层面的UTF-8**
使用[mb\_http\_output()](http://php.net/manual/en/function.mb-http-output.php)函数 来确保你的PHP脚本输出UTF-8字符串到浏览器。并且在HTML页面的标签块中包含[字符集标签块](http://htmlpurifier.org/docs/enduser-utf8.html)。
**示例**
```
 \PDO::ERRMODE_EXCEPTION,
                        \PDO::ATTR_PERSISTENT => false,
                        \PDO::MYSQL_ATTR_INIT_COMMAND => 'set names utf8mb4'
                    )
                );
// Store our transformed string as UTF-8 in our database
// Assume our DB and tables are in the utf8mb4 character set and collation
$handle = $link->prepare('insert into Sentences (Id, Body) values (?, ?)');
$handle->bindValue(1, 1, PDO::PARAM_INT);
$handle->bindValue(2, $string);
$handle->execute();
// Retrieve the string we just stored to prove it was stored correctly
$handle = $link->prepare('select * from Sentences where Id = ?');
$handle->bindValue(1, 1, PDO::PARAM_INT);
$handle->execute();
// Store the result into an object that we'll output later in our HTML
$result = $handle->fetchAll(\PDO::FETCH_OBJ);
?>UTF-8 test pageBody);  
            // This should correctly output our transformed UTF-8 string to the browser
        }
        ?>
```
**进一步阅读**
* [PHP手册：多字节字符串函数](http://php.net/manual/en/ref.mbstring.php)
* [PHP UTF-8备忘单](http://blog.loftdigital.com/blog/php-utf-8-cheatsheet)
* [Stack Overflow: 什么因素致使PHP不兼容Unicode？](http://stackoverflow.com/questions/571694/what-factors-make-php-unicode-incompatible)
* [Stack Overflow: PHP与MySQL之间国际化字符串的最佳实践](http://stackoverflow.com/questions/140728/best-practices-in-php-and-mysql-with-international-strings)
* [怎样在MySQL数据库中完整支持Unicode](http://mathiasbynens.be/notes/mysql-utf8mb4)
处理日期和时间
-------
### 使用[DateTime类](http://www.php.net/manual/en/class.datetime.php)。
在PHP糟糕的老时光里，我们必须使用[date()](http://www.php.net/manual/en/function.date.php)， [gmdate()](http://www.php.net/manual/en/function.gmdate.php)， [date\_timezone\_set()](http://www.php.net/manual/en/function.date-timezone-set.php)， [strtotime()](http://www.php.net/manual/en/function.strtotime.php)等等令人迷惑的 组合来处理日期和时间。悲哀的是现在你仍旧会找到很多在线教程在讲述这些不易使用的老式函数。
幸运的是，我们正在讨论的PHP版本包含友好得多的[DateTime类](http://www.php.net/manual/en/class.datetime.php)。 该类封装了老式日期函数所有功能，甚至更多，在一个易于使用的类中，并且使得时区转换更加容易。 在PHP中始终使用DateTime类来创建，比较，改变以及展示日期。
**示例**
```
add(new DateInterval('P10D'));
echo($date->format('Y-m-d h:i:s')); // 2011-05-14 05:00:00
// Sadly we don't have a Middle Earth timezone
// Convert our UTC date to the PST (or PDT, depending) time zone
$date->setTimezone(new DateTimeZone('America/Los_Angeles'));
// Note that if you run this line yourself, it might differ by an 
// hour depending on daylight savings
echo($date->format('Y-m-d h:i:s')); // 2011-05-13 10:00:00
$later = new DateTime('2012-05-20', new DateTimeZone('UTC'));
// Compare two dates
if($date diff($later);
echo('The 2nd date is ' . $difference['days'] . ' later than 1st date.');
?>
```
**陷阱**
* 如果你不指定一个时区，[DateTime::\_\_construct()](http://www.php.net/manual/en/datetime.construct.php) 就会将生成日期的时区设置为正在运行的计算机的时区。之后，这会导致大量令人头疼的事情。 **在创建新日期时始终指定UTC时区，除非你确实清楚自己在做的事情。**
* 如果你在DateTime::\_\_construct()中使用Unix时间戳，那么时区将始终设置为UTC而不管 第二个参数你指定了什么。
* 向DateTime::\_\_construct()传递零值日期（如：“0000-00-00”，常见MySQL生成该值作为 DateTime类型数据列的默认值）会产生一个无意义的日期，而不是“0000-00-00”。
* 在32位系统上使用[DateTime::getTimestamp()](http://www.php.net/manual/en/datetime.gettimestamp.php) 不会产生代表2038年之后日期的时间戳。64位系统则没有问题。
**进一步阅读**
* [PHP手册：DateTime类](http://www.php.net/manual/en/book.datetime.php)
* [Stack Overflow: 访问超出2038的日期](http://stackoverflow.com/questions/5319710/accessing-dates-in-php-beyond-2038)
检测一个值是否为null或false
------------------
### 使用[===](http://php.net/manual/en/language.operators.comparison.php)操作符来检测null和布尔false值。
PHP宽松的类型系统提供了许多不同的方法来检测一个变量的值。然而这也造成了很多问题。 使用==来检测一个值是否为null或false，如果该值实际上是一个空字符串或0，也会误报 为false。[isset](http://php.net/manual/en/function.isset.php)是检测一个变量是否有值， 而不是检测该值是否为null或false，因此在这里使用是不恰当的。
[is\_null()](http://php.net/manual/en/function.is-null.php)函数能准确地检测一个值 是否为null，[is\_bool](http://php.net/manual/en/function.is-bool.php)可以检测一个值 是否是布尔值（比如false），但存在一个更好的选择：===操作符。===检测两个值是否同一， 这不同于PHP宽松类型世界里的*相等*。它也比is\_null()和is\_bool()要快一些，并且有些人 认为这比使用函数来做比较更干净些。
**示例**
**陷阱**
* 测试一个返回0或布尔false的函数的返回值时，如strpos()，始终使用===和!==，否则 你就会碰到问题。
**进一步阅读**
* [PHP手册：比较操作符](http://php.net/manual/en/language.operators.comparison.php)
* [Stack Overflow: is\_null() vs ===](http://stackoverflow.com/questions/8228837/is-nullx-vs-x-null-in-php)
建议与指正
-----
感谢阅读！如果你有些地方还不太理解，很正常，PHP是复杂的，并且充斥着陷阱。因为我也 只是一个人，所以本文档中难免存在错误。
如果你想为本文档贡献建议或纠正错误之处，请使用[最后修订日期&维护者](https://phpbestpractices.org/#maintainers) 一节中的信息联系我。
原文： [PHP Best Practices-A short, practical guide for common and confusing PHP tasks](https://phpbestpractices.org/)
译者：[youngsterxyf](https://github.com/youngsterxyf)