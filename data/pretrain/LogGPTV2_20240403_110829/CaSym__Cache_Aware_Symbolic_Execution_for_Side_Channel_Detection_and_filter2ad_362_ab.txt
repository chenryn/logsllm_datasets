IR
Cache 
Analysis
Cache
Formula
Solver
No Cache-Based
Side Channel
Unsatisﬁable
Figure 2: System ﬂow of CaSym.
show that dynamic page coloring helps to establish strong
isolation between different applications in terms of cache
usage. StealthMem [30], [31] manages a set of locked cache
lines per core, which are never evicted from the cache, and
efﬁciently multiplexes them so that each VM can load its
own sensitive data into the locked cache lines. Cache par-
titioning has also been explored at the hardware level [20],
[32], [33], [34]. Some other previous work explores injecting
noises to the timing signal, such as D¨uppel [35] at the system
level, as well as RPCache [32], Newcache [36], and random
ﬁll cache [37] at the hardware level.
occurrences of x1 to xn. As an abbreviation, we write x for
x1, . . . , xn and X for X1, . . . , Xn.
We use c to represent symbolically the initial cache
state and C for an implicit variable that tracks the current
symbolic cache state; initially, C = c and at the end of the
program the cache state C is a symbolic expression that may
contain occurrences of c and x1 to xn.
According to the input program’s semantics, CaSym’s
symbolic execution then builds a formula that represents the
ﬁnal program and cache states, using the initial program and
cache states (x, c):
IV. SYSTEM OVERVIEW
Fig. 2 depicts the system ﬂow of CaSym. It takes the
source code of the input program and uses LLVM’s front
end, Clang, to convert the program into LLVM IR code.
CaSym then performs cache analysis on the IR code to build
a cache formula (veriﬁcation condition) that represents how
the program manipulates the cache state. The formula is fed
to an SMT solver. A satisﬁable answer of the formula means
a side channel. In this case, CaSym uses the solution from
the solver to localize the error and report it; this information
can then be used for mitigation. An unsatisﬁable cache
formula means no cache-based side channel exists in the
input program.
CaSym’s cache analysis is based on symbolic execution.
At a high level,
the symbolic execution takes an input
program and outputs a symbolic state that models how the
program relates the program’s initial program and cache
states to its ﬁnal program and cache states.
To discuss the process more formally, we introduce some
notation used throughout
this paper. Assume the input
program has n program variables, X1 to Xn, as well as
some arrays with statically known sizes (e.g., A[16] and
B[1024]). We use small-case letters x1 to xn for logical
variables that represent the symbolic initial values of X1
to Xn.4 Therefore, at the beginning of the program, we
have X1 = x1 ∧ . . . ∧ Xn = xn. At
the end of the
program, the ﬁnal values in X1 to Xn may have changed and
are represented as symbolic expressions that may contain
σ(x, c, X, C)
Assume at the beginning of the program, K0 is a set of
secret variables whose values should be protected from side-
channel attacks.5 A variable not in K0 is considered a public
input whose value does not need protection. Informally, a
program is free of side channels if K0 has no inﬂuence
on the ﬁnal cache state C. Following the deﬁnition of
noninterference [38], we formalize the veriﬁcation condition
for cache-based side channels as follows.
Given formula σ and K0, CaSym issues the following
veriﬁcation condition to an SMT solver:
VC(σ, K0) (cid:2) ∃x, x(cid:2), X, X(cid:2), c, c(cid:2), C, C(cid:2),
¬(∀X ∈ K0, x = x(cid:2)) ∧ (∀X (cid:6)∈ K0, x = x(cid:2))
∧c = c(cid:2) ∧ σ(x, c, X, C) ∧ σ(x(cid:2), c(cid:2), X(cid:2), C(cid:2))
∧¬eqC(C, C(cid:2))
(1)
1 ∧ x2 = x(cid:2)
2 ∧ . . . ∧ xn = x(cid:2)
For the special case when K0 = {X1}, the formula requires
x1 (cid:6)= x(cid:2)
n; i.e., two different
values for X1 and the same value for other variables. When
equation (1) is satisﬁable, then it is possible to run the
program twice with two different secrets, the same public
inputs, and the same initial cache state, and get two different
ﬁnal cache states C and C(cid:2)
. That is, by observing the ﬁnal
cache state, an attacker can learn information about the
secret.
Compared with previous work based on abstract inter-
pretation [12], [13], a beneﬁt of checking the veriﬁcation
condition above is that a solution of equation (1) leads to
two program executions that exhibit the existence of side
4For scalability, CaSym does not track symbolic values in arrays; more
discussion on this later.
5Note that our implementation also allows marking a ﬁxed-size array as
the secret (e.g., the key array in the example of Fig. 1).
(cid:22)(cid:17)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
channels: in this case, the SMT solver produces two different
secret values, which serve as the witness of the identiﬁed
side channel(s). CaSym then uses an error localization algo-
rithm to diagnose the witness (i.e., two program executions)
to pinpoint the problematic program points that cause the
side channel(s) in the source code.
On the other hand, when the formula is unsatisﬁable,
we are assured that there is no cache-based side channel
in the given environment: regardless of which secret values
are chosen, the cache state does not change. We note that
this property is essentially a cache-aware variant of nonin-
terference [38], which states that conﬁdential data cannot
inﬂuence public outputs (i.e., cache states).
V. TRACKING CACHE STATES
In this section, we discuss how CaSym performs symbolic
execution to go from the input program to the formula
σ(x, c, X, C) that relates the initial program and cache states
to the ﬁnal program and cache states. As in all symbolic-
execution systems, CaSym’s symbolic execution is based on
program paths. For each path, CaSym computes a symbolic
state (including cache state) at the end of the path. For
a loop-free program, CaSym considers every path in the
program and combines the symbolic states of all paths into a
single formula. Moreover, for programs with loops, CaSym
uses novel language statements and a transformation that
soundly converts the loops into loop-free counterparts before
performing symbolic execution.
Note that since CaSym considers all paths, its symbolic
execution is similar to strongest postcondition calculation in
Hoare Logic [39]. However, since CaSym soundly converts
loops into loop-free counterparts before symbolic execu-
tion, veriﬁcation in CaSym does not require explicit loop
invariants, which is required in traditional postcondition
calculation in Hoare logic.
A. Loop-free programs
A loop-free program has a ﬁnite number of paths. For
a path i, symbolic execution computes a symbolic state
σi(x, c, X, C) at the end of the path. For a ﬁnite number of
paths, CaSym could combine the symbolic states of all paths
through disjunction; however, this would not be scalable.
Therefore, after discussing how CaSym performs symbolic
execution on a single path, we present how CaSym shares
parts among paths to get compact formulas through path
merging.
Symbolic states: A symbolic state contains (1) the
symbolic values of program variables, (2) a symbolic cache
state, and (3) a path condition, which is a conjunction of
boolean tests performed on the path. Speciﬁcally, a symbolic
state σ(x, c, X, C) is of the following form:
X1 = e1 ∧ . . . ∧ Xn = en ∧ C = ce ∧ ψ
where ei is a symbolic expression that represents the value
in Xi and it may contain occurrences of x1 to xn (the initial
symbolic values for X1 to Xn). Similarly, ce is a symbolic
cache state that represents the current cache state; ce may
contain occurrences of c as well as x1 to xn. Path condition
ψ may contain occurrences of x1 to xn. As an abbreviation,
we write X = e for X1 = e1 ∧ . . . ∧ Xn = en. The initial
symbolic state is
initial(x, c, X, C) (cid:2) X = x ∧ C = c ∧ True
(2)
We note that even though our goal is to track cache states,
for precision it is important to also track program states
(path conditions and symbolic values of variables). Since a
program has many paths and each path can lead to a different
cache state, the path condition in a symbolic state tells under
what condition the program produces the associated cache
state. Furthermore, tracking symbolic values of variables is
important for computing accurate cache states. For instance,
when the program accesses A[X], knowing variable X’s
symbolic value is important to model what element of the
array is being accessed.
Interface to cache models: To track how the input
program affects the cache state, CaSym needs a cache
model that speciﬁes how the cache is affected by memory
accesses. A cache implementation makes various choices
about cache capacity, cache block size, associativity, and the
cache-replacement policy. To accommodate cache diversity,
CaSym’s symbolic execution is parameterized over a cache
model so that different cache models can be plugged into
the system. This set up also enables abstract cache models,
which abstract away certain cache-implementation details
and provide generality (we introduce two abstract cache
models in Section VI).
CaSym’ symbolic execution interacts with a cache model
through a well-deﬁned interface. We postpone the discussion
of how CaSym’s cache models implement the interface to
Section VI. For now, it is sufﬁcient to understand a cache
model’s interface, listed as follows:
(i) An empty cache state, written as emptyC.
(ii) A cache-update function updC(l, ce), which takes a
symbolic memory location l (discussed soon) and a
symbolic cache state ce and returns a new symbolic
cache state for the result of accessing l under ce.
(iii) An equality test eqC(ce 1, ce 2). It holds if and only if
the two symbolic cache states ce 1 and ce 2 are equal
according to the cache model.
Two kinds of symbolic memory locations are used. The
symbolic memory location for variable X is written as MX.
The symbolic location for array A at symbolic expression e
is written as MA[e]. As an example, for the program “X2 =
X1&0xFF; X3 = A[X2]”, the symbolic memory location for
the array access in the second statement is MA[x1&0xFF].
(cid:22)(cid:17)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
S ::= S1; S2 | SKIP | X := E | A[X] := E | B → S
E ::= n | X | A[X] | E ⊗ E
Stmt
Expr
BExpr B ::= E (cid:9) E | ¬B | B1 ∧ B2 | B1 ∨ B2
⎧⎪⎪⎨
⎪⎪⎩
(cid:2)E(cid:3)σ =
n, if E = n
ei, if E = Xi and σ contains Xi = ei
u, if E = A[X] and u is a fresh variable
(cid:2)E1(cid:3)σ ⊗ (cid:2)E2(cid:3)σ, if E = E1 ⊗ E2
Symbolic execution result SE(S, σ), assuming σ is X = e ∧ C = ce ∧ ψ.
SE(S2, SE(S1, σ))
σ
Stmt S
S1; S2
SKIP
Xi = E
X1 = e1 ∧ . . . ∧ Xi = (cid:2)E(cid:3)σ ∧ . . . ∧ Xn = en∧
C = updC(locs(E, σ) + [MXi], ce) ∧ ψ
A[Xi] := E X = e ∧ C = updC(locs(E, σ) + [MXi] + [MA[ei]], ce) ∧ ψ
B → S
SE(S, X = e ∧ C = updC(locs(B, σ), ce) ∧ (ψ ∧ (cid:2)B(cid:3)σ))
Figure 3: Syntax for a path language and symbolic execution over a path.
Symbolic execution over a path: To formally present
symbolic execution over a program path, we introduce a
small path language in Fig. 3. A statement
in the lan-
guage represents a list of commands in a program path.
In the language, we use n for constant numbers, X for
program variables, A for ﬁxed-size arrays, ⊗ for a bi-
nary arithmetic operator, and (cid:9) for a binary comparison
operator. We use “A[X] := E” for an array assignment.
“B → S” is a statement guarded by boolean condition
B; it is the single-guard variant of guarded commands in
Dijkstra’s guarded command language [40]. An if-statement
“IF B THEN S1 ELSE S2” can be split into two paths:
one has “B → S1” and the other has “¬B → S2”.
Fig. 3 formalizes CaSym’s symbolic execution over the
path language. Its way of tracking program states (variables’
symbolic values and path conditions) is standard in symbolic
execution. It uses auxiliary functions (cid:2)E(cid:3)σ and (cid:2)B(cid:3)σ to
compute the symbolic values of arithmetic expressions and
boolean expressions, respectively; we omit
the standard
deﬁnition of (cid:2)B(cid:3)σ.
In addition, cache states are also tracked during symbolic
execution. We use the following notation in Fig. 3 for
tracking cache states. The cache-update function is lifted to
a list of symbolic memory locations: updC(L, ce) returns
the new cache state after accessing the list of locations
in L. We use locs(E, σ) for the list of symbolic memory
locations in program expression E under symbolic state σ,
and similarly locs(B, σ) for the list of symbolic memory
locations in boolean expression B. We omit their straight-
forward deﬁnitions. As an example, if in σ we have X = 2x,
then locs(X + A[X], σ) = [MX, MA[2x]]. Fig. 3 presents
how cache states are tracked for each kind of statements.
As an example, showing how cache states are tracked, take
Xi = E, which accesses the memory locations in E and the
memory location of Xi; therefore, it updates the symbolic
(cid:22)(cid:18)(cid:17)
cache state with those locations. Other cases are similar.
We next present symbolic execution for a toy example
“X2 = X1&0xFF; X3 = A[X2]”, starting from the initial
symbolic state.
{X1 = x1 ∧ X2 = x2 ∧ X3 = x3 ∧ C = c ∧ True}
X2 = X1&0xFF;
{X1 = x1 ∧ X2 = x1&0xFF∧X3 = x3
∧C = updC([MX1, MX2], c) ∧ True}
X3 = A[X2]
{X1 = x1 ∧ X2 = x1&0xFF∧X3 = u
∧C = updC([MA[x1&0xFF], MX3], updC([MX1, MX2], c))
∧True}
The end symbolic cache state σ contains a symbolic memory
location MA[x1&0xFF]. Feeding VC(σ,{X1}) to an SMT
solver would produce two different values for x1, resulting
in two different cache states. This is a side channel caused
by key-dependent memory accesses.
As a note, for scalability CaSym’s symbolic execution
does not track array contents symbolically. This is why
(cid:2)A[X](cid:3)σ produces a fresh unconstrained variable, which
implements an approximation (reading from an array returns
arbitrary values). On the other hand, when accessing A[X],
CaSym uses X’s symbolic value to capture which location
of the array is accessed and uses that knowledge to update
the symbolic cache state accurately.
CaSym employs a coarse-grained taint tracking for arrays.
This means we can use the arbitrary values stored in the
arrays and treat them as public values (when not tainted)
or sensitive values (when tainted). Therefore, two symbolic
execution traces use the same arbitrary value from a public
array (i.e. these values cannot contribute to a difference in
the cache state). This helps reduce false positives which
would occur if we considered all array values to be sensitive.
Path merging: Simply performing symbolic execution
over every path and combining the symbolic states of all
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:41:15 UTC from IEEE Xplore.  Restrictions apply. 
{X1 = x1 ∧ X2 = x2 ∧ C = c ∧ True}
if (X1 > 0){
{X1 = x1 ∧ X2 = x2 ∧ C = updC([MX1], c) ∧ x1 > 0}
X2 = X2 + 1;
{X1a = x1 ∧ X2a = x2 +1 ∧ Ca = updC([MX1, MX2], c)
∧(ψa = x1 > 0) ∧ ψa}
}
else {
{X1 = x1 ∧ X2 = x2 ∧ C = updC([MX1], c) ∧ x1 ≤ 0}
X2 = X2 + 2;
{X1b = x1 ∧ X2b = x2 +2 ∧ Cb = updC([MX1, MX2], c)
∧(ψb = x1 ≤ 0) ∧ ψb}
}
{((ψa ∧ X1c = X1a ∧ X2c = X2a ∧ Cc = Ca) ∨
(ψb ∧ X1c = X1b ∧ X2c = X2b ∧ Cc = Cb)) ∧
(ψc = ψa ∨ ψc = ψb) ∧ ψc}
Figure 4: Sample program illustrating how path merging is
handled using the inﬁnite cache model.
paths through disjunction at the end is not scalable as it
would generate large formulas. As an optimization, CaSym
performs path merging to generate formulas that share parts
among program paths. In particular, when multiple paths
converge at a point,
it merges their symbolic states by
introducing new logical variables and equations as illustrated
by the example in Fig. 4. Consider two paths with path
conditions ψa and ψb, the symbolic values of variables Xa
and Xb, and the symbolic cache states Ca and Cb. At the
merge point, CaSym introduces new logical variables ψ, X,
and C, and adds the following equalities:
ψ = ψa ∨ ψ = ψb
(3)
(ψa∧X = X a∧C = Ca) ∨ (ψb∧X = X b∧C = Cb) (4)
All equations reﬂect that either one of the paths could be
taken, but each case in equation (4) is further guarded by the
corresponding path condition for precision. The equation at