### Client Retransmission of Blocks

A client can request the retransmission of a specific block, \( b \). This solution eliminates the need for the client to download all hash values beforehand, as in the superblock-based approach, and it avoids expensive encryption or decryption operations. However, this method can lead to high traffic overhead. For a data object with \( 2^m \) blocks, each block’s authentication path will contain \( m \) hash values. Assuming each hash value is 16 bytes, the total overhead traffic will be \( 16m \times 2^m \) bytes, which is \( 16m \times |b| \) of the data traffic (where \( |b| \) is the number of bytes in a block).

### mSSL’s On-demand Data Integrity Solution via Integrity Path

mSSL’s integrity solution optimizes both the on-demand requests for integrity verification information and the verification process. When a client needs to obtain the authentication path \( A(b) \) of a newly downloaded block \( b \), it does not need to download every hash value \( h \in A(b) \). If a hash value \( h \in A(b) \) has already been verified for another block, it is available locally.

For example, in Figure 2, the authentication paths for blocks \( b_1 \) and \( b_2 \) are \( A_1 = (H_2, H_{34}, H_{58}) \) and \( A_2 = (H_1, H_{34}, H_{58}) \), respectively. If the client first receives and verifies \( b_1 \) using \( A_1 \), it does not need to download \( H_{34} \) and \( H_{58} \) again when verifying \( b_2 \). Additionally, certain hash values calculated during the local block integrity verification process can be reused for other authentication paths. For instance, when verifying \( b_1 \), \( H_1 \) (as well as \( H_{12} \) and \( H_{14} \)) will be calculated, making \( H_1 \) available for verifying \( b_2 \) along \( A_2 \).

#### mSSL Integrity Path

To optimize block integrity verification, we introduce the concept of an mSSL integrity path, which consists of only those hash values from the block’s authentication path that are not locally available. To determine these values, we use Theorem 1:

**Theorem 1:** If a hash value \( h \) is locally available at a recipient client \( r \), then \( h \)'s uncle, \( \text{uncle}(h) \), is also locally available.

Suppose a block \( b \)’s authentication path \( A(b) \) is \( (H_m, H_{m-1}, \ldots, H_1) \). Denote \( b \)’s mSSL integrity path as \( \text{mip}(b) \). According to Theorem 1, if \( H_l \) is not locally available, but \( H_{l+1}, \ldots, H_m \) are, then \( \text{mip}(b) = (H_l, H_{l-1}, \ldots, H_1) \) with \( |\text{mip}(b)| = m - l + 1 \) hash values. This is also the number of levels needed to be downloaded to have a complete authentication path.

This concept simplifies the on-demand request process. When a client receives block \( b \), it determines \( \text{mip}(b) \) and sends a request for \( \text{mip}(b) \) to the server or provider. The request only needs to include the value of \( |\text{mip}(b)| \) since the provider or server can easily determine what \( \text{mip}(b) \) is. Figure 3 illustrates this procedure, where the client maintains a Merkle hash tree, \( t_c(O) \), that keeps only locally available hash values.

Once the client receives \( \text{mip}(b) \), it can derive \( A(b) \) and apply the verification procedure from Section 3.3. Since \( H_{l-1} \) was locally available, its ancestors, including the root, must have been used in earlier integrity verifications. Therefore, the authentic sibling of \( H_{l-1} \) is also locally available. As a result, the verification of block \( b \) only needs to compare a newly calculated sibling of \( H_{l-1} \) with the current sibling to decide if block \( b \) is integral, avoiding redundant calculations.

### Proof of Service

#### Overview

Data sharing among peer clients can be incentivized by a simple economy model:
1. Providers receive credits for assisting the server.
2. Recipients pay less for data received from providers, reducing the direct utilization of server resources.
3. By offloading tasks to providers, the server can serve more clients and make more profit, even with lower individual charges.

A trustworthy, effective proof-of-service mechanism is essential to harden this model. This mechanism ensures that a client can present proof of service to the server, the server can verify the service, and recipients cannot cheat or be cheated about their reception of data.

#### Approach

Our approach involves dividing each data object into multiple blocks and enforcing a block-by-block verification mechanism between every pair of provider and recipient. For each block sent, the recipient verifies the integrity and sends a non-repudiable acknowledgment to the provider. These verified acknowledgments serve as proof of the provider's service.

However, this basic solution has issues:
- Proof explosion with large files.
- Recipients may run away without acknowledging receipt.
- Overloading the server with frequent acknowledgment composition and verification.

We address these problems. Figure 4 shows the proof-of-service operations between a provider \( p \) and a recipient \( r \):
1. **Handshake:** \( p \) and \( r \) exchange public key certificates.
2. **Block Request:** \( r \) requests block \( b_i \).
3. **Block Transmission:** \( p \) sends \( b_i \) encrypted with a secret block key.
4. **Acknowledgment:** \( r \) acknowledges receipt and requests the next block.
5. **Verification:** \( p \) verifies the acknowledgment.
6. **Key Delivery:** \( p \) sends the block key in a protected form.
7. **Decryption and Verification:** \( r \) decrypts the block and verifies its integrity.

#### Step-wise Explanations and Justifications

1. **Public Key Certificates:** Every client has a certified public key, generated and certified by the server acting as a CA.
2. **Block Encryption:** A secret block key \( k_r^i \) is used, generated as \( k_r^i = f(\text{pid}, \text{rid}, \text{oid}, i, k_p) \), where \( f \) is a one-way hash function and \( k_p \) is the secret key shared between the provider and the server.
3. **Acknowledgment Format:** The acknowledgment includes the digest of the encrypted block and a selective acknowledgment (SACK) field to confirm the reception of multiple blocks.
4. **Verification and Key Delivery:** The provider verifies the acknowledgment and sends the block key in a protected form.
5. **Recipient Decryption and Verification:** The recipient decrypts the block and verifies its integrity. If the block is corrupted, the recipient can report this to the server.

#### Performance and Scalability Considerations

This approach ensures trustworthiness and scalability, preventing server overload and minimizing traffic and storage overhead.