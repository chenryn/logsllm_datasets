complexity, increases the probability of defects, and generally re-
sults in low maintainability code. Even then, there is no guarantee
that all leakage issues are addressed: the code path was not ini-
tially intended to resist SCA, and retrofitting mitigations becomes
awkward.
We instead implemented an early exit from ec_wNAF_mul that—
irrespective of the constant time flag—diverts to a new single scalar
multiplication function for all instances of [k]G (fixed point, e.g.
ECC key generation, SM2DSA signing, ECDSA signing, first half
of ECDH) or [k]P (variable point, e.g. SM2PKE decryption, last half
of ECDH), and falls back to the existing (insecure) wNAF code in
all other cases (e.g. [a]G + [b]P in various digital signature scheme
verifications). For cryptosystem use cases internal to the OpenSSL
library, this provides secure-by-default scalar multiplication code
path traversal.
For this new functionality, we chose the traditional powering lad-
der due to Montgomery [57], heralded for its favorable SCA proper-
ties. In modern implementations, straightlining the key-dependent
ladder branches happens in one of two ways [60, Sec. 2]: “either
by loading from (or storing to) addresses that depend on the secret
scalar, or by using arithmetic operations to perform a conditional
register-to-register move. The latter approach is very common
on large processors with cache, where the former approach leaks
through cache-timing information.”
We see both in practice: For example, TomsFastMath13 does not
branch but reads and stores using (secret) pointer offsets, while
Mbed TLS14 parses all the data and performs a manual conditional
swap with arithmetic, even documenting their function mbedtls-
_mpi_safe_cond_swap with the comment: “Here it is not OK to
simply swap the pointers, which would lead to different memory ac-
cess patterns when X and Y are used afterwards.” This is in contrast
to e.g. [44, Sec. 8.5]: “we implement the conditional swap operation
after each ladder step by swapping pointer variables instead of
data. We expect slightly better performance and also a reduced
side-channel leakage.” While that is perhaps a valid strategy on
13https://github.com/libtom/tomsfastmath/
14https://github.com/ARMmbed/mbedtls/
architectures lacking cache memory, we feel it is generally dubi-
ous advice since typical engineers are usually unaware of SCA
subtleties.
Regardless, the “standard way” according to Bernstein [14, Sec. 3]
uses arithmetic to implement conditional swaps on the data, not
the pointers; the work also reviews a slight optimization, which we
also implement. The two contiguous swaps conditional on bits ki
and ki−1 reduce to a single swap by XOR-merging the condition
bits, i.e. only swap if the bit values differ. This optimization halves
the number of conditional swaps.
Scalar padding. The above conditional swaps ensure favorable SCA
behavior for ladder iterations. But [21] exploits the number of said
iterations, fixed in an ECDSA-only fashion in 2011 by padding
nonces. We remove this padding, and instead push it to the underly-
ing EC module to ensure a constant number of ladder iterations. To
accomplish this in an SCA-friendly way, we construct two values
k′ = k +n and k′′ = k′+n, subsequently using the above conditional
swap to set k to either k′ or k′′, whichever has bit-length precisely
one more than n. We apply this padding directly preceding ladder
execution.
Coordinate blinding. Originally proposed by Coron [31, Sec. 5.3] for
standard projective coordinates as a DPA countermeasure, coordi-
nate blinding transforms the input point to a random representative
of the equivalence class. For generic curves over GF(p), OpenSSL’s
formulae are a fairly verbatim implementation of Jacobian projec-
tive coordinates [1, A.9.6] where the relation
Y , λZ)
(X, Y , Z) ≡ (λ
X, λ
holds for all λ (cid:44) 0 in GF(p). Our implemented mitigation generates
λ randomly, applying the map a single time directly preceding the
ladder execution. This is, for example, the approach taken by Mbed
TLS (function ecp_randomize_jac).
7.2 Modular Inversion: SCA Mitigations
Directly due to the work by Gueron and Krasnov [43, Sec. 6],
OpenSSL integrated a contribution from Intel that included (1)
high-speed, constant-time P-256 ECC on AVX2 architectures; (2)
constant-time modular inversion modulo ECDSA group orders.
It did the latter by internally exposing a function pointer within
the EC_METHOD structure. If set, ECDSA signing code path calls
said pointer (for which the custom P-256 method has a dedicated
function), otherwise a series of default fallbacks including (1) FLT
inversion with Montgomery modular exponentiation; (2) normal
EEA-based inversion. We refactored the structure to expose this de-
fault behavior within the wrapper that checks the function pointer,
the end goal being to expose it to the EC module as a whole and
not limit to ECDSA, in turn allowing SM2DSA access to a strictly
secure-by-default functionality. We explored two different options
for inversion default behavior that resist SCA, summarized below.
Blinding. The classical way to compute modular inversions is through
the EEA utilizing divisions, or binary variants utilizing shifts and
subtracts. However, as previously described their control flow can
leak critical algorithm state. Nevertheless, to prevent direct input
deduction from this state one option is to choose blinding value b
uniformly at random from [1 . . n) then compute k−1 = b(bk)−1 at
2
3
155ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Nicola Tuveri, Sohaib ul Hassan, Cesar Pereida García, and Billy Bob Brumley
the additional cost of two multiplications. This is, for example, the
approach taken by Mbed TLS for ECDSA nonces.
Exponentiation. Although initially motivated by binary fields with
normal basis representation where squaring is a simple bit rotation,
the algorithm by Itoh and Tsujii [46] is one of the earliest examples
of favorable implementation aspects of using FLT for finite field
inversion. SCA benefits followed thereafter, e.g. Curve25519 where
Bernstein [13, Sec. 5] weighs blinded EEA methods versus FLT: “An
extended-Euclid inversion, randomized to protect against timing
attacks, might be faster, but the maximum potential speedup is very
small, while the cost in code complexity is large.”
Performance and security. Regarding security, it is clear that either
method is a leap forward for OpenSSL with respect to secure-by-
default. We feel that blinding has an intrinsic advantage over FLT-
based methods, since the former resists bug attacks [15, 19] that
exploit predictable execution flows. Regarding performance, we
benchmarked both approaches to measure the potential differences
alluded to by Bernstein, and found the results consistent. On an
Intel Core i5-6500 CPU (Skylake) running at 3.2GHz, after all of
our described and implemented countermeasures, one SM2DSA
execution takes on average 1760913 cycles with FLT, and 1750984
cycles with blinded BEEA—a difference of a fraction of a percent.
In the end, the OpenSSL team declined our blinding contribution.
They plan to increase the usage of the Montgomery arithmetic
context within the EC module, so in that sense their decision is
rational from a software architecture perspective. The team instead
integrated our FLT refactoring, sufficient to thwart the attack in
Section 5, and furthermore provide secure-by-default behavior to
future callers conforming to the convention set by this API.
7.3 SCA Mitigations: Evaluation
Remote timings: evaluation. Using the same approach adopted in
Section 4, Figure 7 shows the cumulative effect of three counter-
measures: adopting the Montgomery ladder instead of the wNAF
algorithm for regular scalar multiplication, scalar padding, and
computation of modular inversion via exponentiation through FLT.
Both plots clearly show that the latencies measured for signa-
ture generation using nonces of different bit-lengths are indistin-
guishable, effectively preventing the attack, and a comparison with
Figure 1 immediately shows the extent of the leakage reduction.
Cache-timings: evaluation. After introducing the mitigations, when
SM2DSA performs a scalar multiplication it first calls the EC_-
POINT_mul function, a wrapper to ec_wNAF_mul. There the code
takes an early exit, jumping to the powering ladder regular algo-
rithm to perform a fixed point scalar multiplication [k]G. From
the cache perspective, the ladder implementation consists of an
always-double-and-add algorithm, largely unrelated to the wNAF
representation of the nonce k. To support our claim, we follow the
same approach as in Section 5, placing probes in the same underly-
ing functions BN_rshift1 and BN_lshift—called by EC_POINT_-
add and EC_POINT_dbl—to trace the sequence of operations during
scalar multiplication. Top trace in Figure 8 shows an example trace,
which indeed tracks the sequence of double and add operations
successfully, but due to the regular nature of the powering ladder
Figure 7: SM2DSA latency dependency on the nonce length
on amd64 architecture, using (1) a Montgomery ladder
algorithm for scalar multiplication instead of wNAF; (2)
scalar padding; (3) modular inversion through exponentia-
tion (FLT). Top: K-283 binary curve. Bottom: Recommended
SM2 curve.
algorithm, no meaningful information can be retrieved from this
sequence.
During modular inversion, the high level function SM2_sig_gen
in SM2DSA no longer calls BN_mod_inverse but instead it calls di-
rectly EC_GROUP_do_inverse_ord on the private key dA + 1. This
function computes modular inversion by performing an exponen-
tiation using FLT, therefore the underlying algorithm and its im-
plementation are completely different compared to the Euclidean
algorithm (and variants) used previously. Recall that during mod-
ular inversion using FLT, the exponent value is public; said value
does not require SCA protection. Bottom trace in Figure 8 shows
an example trace during modular inversion, probing the square and
multiply operations based on the public exponent.
EM leakage: evaluation. To validate the efficacy of the applied miti-
gations, we repeated the T-test experiments (Section 6). Figure 10
shows the results of the new T-test for both fixed vs random key
(S1, S2) and fixed vs random point (S1, S3). Figure 9 shows the EM
traces, reflecting a regular sequence of ECC double and add opera-
tions due to ladder point multiplication. One interesting observation
is the increase in the number of peaks for the add operation com-
pared to Figure 4. This is due to the fact that ec_wNAF_mul uses
mixed coordinates (projective and affine), a code path with less field
operations compared to the fully projective coordinate path taken
by the ladder.
It is clear from Figure 10 that the T-test shows a significant im-
provement due to the combined ladder application and projective
coordinate randomization. The T-test easily passed for fixed vs
random point (S1, S3) with |Cτ| < 4. In case of fixed vs random key
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 12.1702.1752.1802.1852.1902.195Cumulative probabilityTime (CPU cycles, millions)271 bits272 bits273 bits274 bits275 bits276 bits277 bits278 bits279 bits280 bits281 bits 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.91.7201.7251.7301.7351.7401.7451.7501.7551.760Cumulative probabilityTime (CPU cycles, millions)246 bits247 bits248 bits249 bits250 bits251 bits252 bits253 bits254 bits255 bits256 bits156Side-Channel Analysis of SM2: A Late-Stage Featurization Case Study
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
8 CONCLUSION
Subsequent to an accelerated OpenSSL milestone to support SM2
cryptosystems, our work began with a security review of SM2DSA
and SM2PKE implementations within OpenSSL pre-releases. Part
of our review uncovered several side-channel deficiencies in the
merged code, which we then verified with empirical remote timing,
cache-timing, and EM traces. To mitigate these discovered vulner-
abilities, we proposed and implemented several mitigations, now
mainlined into the OpenSSL codebase. These mitigations target the
underlying EC module, providing secure-by-default behavior not
only for SM2 but future cryptosystems in the ECC family. Notably,
the mitigations also bring security to the generic curve scalar multi-
plication code path in OpenSSL, a longstanding vulnerability since
2009. Finally, we performed an empirical SCA evaluation of these
mitigations to demonstrate their efficacy.
We met our goal to intersect the recent OpenSSL 1.1.1 release
and ensure these vulnerabilities do not affect release versions. How-
ever, given a more relaxed schedule, we outline future work to
improve this secure-by-default approach: (1) the antiquated ECC
point addition and doubling formulae should be renovated to more
recent exception and/or branch-free versions; (2) support for ladder
step function pointers, for more efficient ladder operations w.r.t.
finite field operations; (3) at the standardization level, SM2DSA
private key formats that, similar to RSA private keys with CRT
parameters, store the value (dA + 1)−1 alongside the private key dA
for accelerated performance and a reduced SCA attack surface.
From the software engineering perspective, lessons learned from
our work are twofold: (1) software projects, OpenSSL included,
should maintain a stronger separation between release, beta, and
development branches to inhibit “feeping creaturism” [69, Ch. 6]
that can adversely shift milestones; (2) milestones for security-
critical features should be set consistent with the complexity of
the review process, to prevent premature merging. Luckily, in this
case our responsible disclosure with the OpenSSL security team
coupled with our mitigation development efforts yielded a favorable
outcome. We strongly encourage adhering to the above two points
to assist averting future security vulnerabilities.
ACKNOWLEDGMENTS
Supported in part by Academy of Finland grant 303814.
The third author was supported in part by a Nokia Foundation
Scholarship and by the Pekka Ahonen Fund through the Industrial