then implies that either X < S1 or SM < X or Sj < X < Sj+1, for some
j ∈ [1, M − 1]. In either case, it must be true that X (cid:54)∈ Set.
The considered statement can be divided into 4 steps: (1) Proving knowledge
of X committed in c; (2) Proving knowledge of the tree paths from y and
z; (3) Proving the range membership Y < Z < X; (4) Proving the addition
relation V + 1 = W . We show that the entire statement can be expressed as one
linear equation modulo q together with linear and quadratic equations modulo 2,
which allows reducing it to an instance of the general protocol from Section 3.2.
Regarding (1), we have obtained equation (18). As for (2), we use the techniques
from [45] to translate Merkle tree inclusions into a set of provable equations
modulo q and modulo 2. The sub-statement (3) can be handled as in Section 5.1.
Finally, (4) can easily be expressed as 2(cid:96) − 1 simple equations modulo 2.
The details of these steps are provided in Appendix A. We ﬁnally remark
that set elements can have a longer representation than k = n(cid:100)log q(cid:101) bits if we
hash them into k-bit string before building the Merkle tree. For this purpose, a
SIS-based hash function HSIS : {0, 1}m → Zn
q like [2] should be used to preserve
the compatibility with zero-knowledge proofs.
6 Subquadratic Arguments for Integer Multiplications
For L = poly(n), we consider the problem of proving that committed integers
X = (xL−1, . . . , x0)2, Y = (yL−1, . . . , y0)2, Z = (z2L−1, . . . , z0)2 satisfy the multi-
plicative relation Z = XY . This task can be realized by running L instances of the
protocol for integer additions from Section 4, but this naive method would yield
complexity at least O(L2). Our target here is to design an asymptotically more
eﬃcient protocol with computation/communication cost subquadratic in L. From
a theoretical point of view, such a protocol is particularly interesting, because
its execution must somehow employ a subquadratic multiplication algorithm.
This inspires us to consider for the ﬁrst time in the context of ZK proofs the
Karatsuba multiplication algorithm [39] that achieves subquadratic complexity
O(Llog2 3). Speciﬁcally, we will prove that the result of applying the Karatsuba
algorithm to committed integers X, Y is exactly the committed integer Z.
Commitments. Choose a prime q = (cid:101)O(
L· n) and let m = n((cid:100)log2 q(cid:101) + 3). We
use the KTX commitment scheme with public key (a0, . . . , a2L−1, b1, . . . , bm) ←(cid:45)
√
24
U (Zn×(2L+m)
q
). Let cx, cy, cz ∈ Zn
(cid:80)L−1
i=0 ai · xi +(cid:80)m
(cid:80)L−1
i=0 ai · yi +(cid:80)m
(cid:80)2L−1
i=0 ai · zi +(cid:80)m
q be commitments to X, Y, Z, where
j=1 bj · r1,j = cx mod q;
j=1 bj · r2,j = cy mod q;
j=1 bj · r3,j = cz mod q,
where bits {ri,j}(i,j)∈[3]×[m] are the commitment randomness. Then, as in Sec-
tion 4, we can unify the 3 equations into one linear equation modulo q:
a(1)
i
· xi +
a(2)
i
· yi +
a(3)
i
· zi +
b(i)
j
· ri,j = c mod q. (19)
i=0
i=0
i=0
(i,j)∈[3]×[m]
L−1(cid:88)
L−1(cid:88)
2L−1(cid:88)
(cid:88)
6.1 An Interpretation of the Karatsuba Algorithm
Let L = 2k for some positive integer k. We will employ a variant of the Karatsuba
algorithm, suggested by Knuth [41, Section 4.3.3]. First, we need to interpret the
execution of the algorithm in a fashion compatible with our ZK technique.
The First Iteration. For the ﬁrst application of Karatsuba algorithm, we
break X and Y into their “most signiﬁcant” and “least signiﬁcant” halves:
X = [X (1), X (0)] and Y = [Y (1), Y (0)],
(20)
where X (1), X (0), Y (1), Y (0) are L/2-bit integers. Then, as suggested by Knuth,
the product Z can be written as:
Z = XY = (2L + 2L/2) · X (1)Y (1) + (2L/2 + 1) · X (0)Y (0)
− 2L/2 · (X (1) − X (0))(Y (1) − Y (0)).
(21)
The advantage of Knuth’s approach over Karatsuba’s is that it allows working
with the diﬀerences (X (1) − X (0)), (Y (1) − Y (0)) that guarantee to have bit-size
L/2, rather than working with the sums (X (1) + X (0)), (Y (1) + Y (0)) that cause
a burden of carry-on bits. However, this modiﬁcation introduces a new issue as
these diﬀerences may be negative, which are more diﬃcult to handle in our setting.
For this reason, we need to make sure that we always subtract a smaller integer
from a larger one, while preserving the ability to prove correct computations.
Let (cid:98)X (1), (cid:98)X (0) such that (cid:98)X (1) ≥ (cid:98)X (0) and {(cid:98)X (1), (cid:98)X (0)} = {X (1), X (0)}. If we
otherwise, and let X (2) = (cid:98)X (1) − (cid:98)X (0) ≥ 0, then we have the relations
(cid:98)X (1) = b · X (1) + b · X (0); (cid:98)X (0) = b · X (1) + b · X (0); X (2) + (cid:98)X (0) = (cid:98)X (1). (22)
Conversely, if non-negative integers X (1), X (0), (cid:98)X (1), (cid:98)X (0), X (2) and bit b sat-
isfy (22), then it holds that {(cid:98)X (1), (cid:98)X (0)} = {X (1), X (0)} and (cid:98)X (1) ≥ (cid:98)X (0) and
X (2) = (cid:98)X (1) − (cid:98)X (0).
use an order control bit b that is assigned value 1 if X (1) ≥ X (0), or value 0
25
Similarly, we can obtain (cid:98)Y (1),(cid:98)Y (0) such that (cid:98)Y (1) ≥ (cid:98)Y (0), non-negative Y (2)
such that Y (2) = (cid:98)Y (1) −(cid:98)Y (0), as well as a control bit d satisfying
(cid:98)Y (1) = d · Y (1) + d · Y (0); (cid:98)Y (0) = d · Y (1) + d · Y (0); Y (2) +(cid:98)Y (0) = (cid:98)Y (1).
(23)
Relations (22)-(23) essentially establish a “bridge” that allows us to work (in the
subtractions X (1) − X (0) and Y (1) − Y (0) incurring in (21)) with non-negative
integers X (2) and Y (2) instead of possibly negative integers. Indeed, letting
s = b + d mod 2, we have
(X (1) − X (0))(Y (1) − Y (0)) = s · X (2)Y (2) − s · X (2)Y (2).
Then, equation (21) can be expressed as
Z = XY = (2L + 2L/2)Z (1) + (2L/2 + 1)Z (0) + 2L/2(s · Z (2)) − 2L/2(s · Z (2)),
(24)
where Z (1) = X (1)Y (1), Z (0) = X (0)Y (0) and Z (2) = X (2)Y (2) are L-bit integers.
These values are computed based on recursive applications of the Karatsuba
algorithm until we reach integers of bit-size L/2k−1 = 2, as described below.
The Recursion. For t = 1 to k − 2, and for string α ∈ {0, 1, 2}t, on input of
L/2t-bit integers X (α) and Y (α), we recursively obtain L/2t+1-bit integers
X (α1); X (α0); (cid:98)X (α1); (cid:98)X (α0); X (α2); Y (α1); Y (α0); (cid:98)Y (α1); (cid:98)Y (α0); Y (α2),
and bits b(α), d(α), s(α) satisfying the following relations.
X (α) = [X (α1), X (α0)];
(cid:98)X (α1) = b(α) · X (α1) + b
X (α2) + (cid:98)X (α0) = (cid:98)X (α1);
(cid:98)Y (α1) = d(α) · Y (α1) + d
Y (α2) +(cid:98)Y (α0) = (cid:98)Y (α1);
Y (α) = [Y (α1), Y (α0)];
s(α) = b(α) + d(α) mod 2.
(α) · X (α0); (cid:98)X (α0) = b
(α) · Y (α0); (cid:98)Y (α0) = d
(α) · X (α1) + b(α) · X (α0);
(25)
(α) · Y (α1) + d(α) · Y (α0);
Let Z (α1) = X (α1)Y (α1), Z (α0) = X (α0)Y (α0), Z (α2) = X (α2)Y (α2). Note that
these L/2t-bit integers satisfy the equation:
Z (α) := X (α)Y (α) =(cid:0)2L/2t
+ 2L/2t+1(cid:1) · Z (α1) + (2L/2t+1
+ 1) · Z (α0)
+ 2L/2t+1 · (s(α) · Z (α2)) − 2L/2t+1 · (s(α) · Z (α2)).
(26)
We remark that the number of secret bits contained in the integers
{X (α1); X (α0); (cid:98)X (α1); (cid:98)X (α0); X (α2)}, where α ∈ {0, 1, 2}t,∀t = 0, . . . , k − 2,
26
(cid:18) 3
(cid:1) =
(cid:19)t+1
· k−2(cid:88)
(cid:0)3t · L
derived from X in the above process is
(cid:18) 3
5 · k−2(cid:88)
the number of control bits b(α), d(α), s(α) is 3 ·(cid:80)k−2
5L
3
2t+1
10L
t=0
t=0
=
2
3
2
·
(cid:19)k − 5L =
That is also the number of secret bits in the integers derived from Y . Meanwhile,
t=0 3t = (3log2 L − 3)/2. In total,
the process gives us O(3log2 L) = O(Llog2 3) secret bits.
· 3log2 L − 5L.
10
3
6.2 Representing All Relations as Equations Modulo 2
As shown in Sections 4 and 5, to prove that committed integers satisfy some
statement, it suﬃces to demonstrate that the statement can be expressed as one
linear equation modulo q together with linear and quadratic equations modulo 2,
which eﬀectively reduces it to an instance of the general protocol of Section 3.2.
We have already obtained the linear equation modulo q from 19. Our main task
is now to show that all the relations among O(Llog2 3) secret bits obtained in
Section 6.1 can be expressed in terms of linear and quadratic equations modulo 2.
We observe that, apart from the linear equations s(α) = b(α) + d(α) mod 2,
there are several common types of relations among the secret objects derived in
Section 6.1, for which we handle as follows.
The ﬁrst type is relation of the form X (α) = [X (α1), X (α0)], between an L/2t-
0 )2
bit integer X (α) and its halves X (α1) and X (α0). Let X (α) = (x(α)
and X (α1) = (x(α1)
relation can be expressed as the following linear equations modulo 2:
2t −1
)2. This type of
)2, X (α0) = (x(α0)
, . . . , x(α1)
, . . . , x(α0)
, . . . , x(α)
2t+1 −1
2t+1 −1
0
0
L
L
L
i + x(α)
i = 0 mod 2; x(α1)
i + x(α)
= 0 mod 2.
i+ L
2t+1
L
∀i = 0, . . . ,
2t+1 − 1 : x(α0)
(cid:98)X (α1) = b(α) · X (α1) + b
The second type is relation of the form
(α) · X (α0); (cid:98)X (α0) = b
reﬂecting how L/2t+1-bit integers (cid:98)X (α1), (cid:98)X (α0) are computed from X (α1), X (α0)
(α) · X (α1) + b(α) · X (α0),
based on a control bit b(α). This type of relation can be translated into the
following equations modulo 2, with respect to the bits of those integers