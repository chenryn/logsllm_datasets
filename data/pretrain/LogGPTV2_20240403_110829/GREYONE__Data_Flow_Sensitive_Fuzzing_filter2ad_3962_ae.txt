GREYONE-*
12312(+36.38%)
5822(+38.03%)
12122(+10.32%)
5698(+17.34%)
2205(+16.24%)
10589(+31.27%)
1650(+20%)
1616(+32.68%)
9529(+3.76%)
3291(+16%)
+20.34%
QSYM-*
7822
6773
6898
7431
4285
9947
2691
1843
7433
2749
-
GREYONE-*
8847(+13.10%)
8599(+26.96%)
7155(+3.73%)
8088(+8.84%)
4404(+2.78%)
11702(+17.64%)
3033(+12.71%)
2241(+21.60%)
8104(+9.03%)
2950(+7.31%)
+12.53%
Average Unique Crashes
GREYONE-*
QSYM-*
77
46
18
3
158
299
3
0
66
25
24
12
46
32
38
15
87
231
88
36
-
+115%
QSYM-*
4
1
4
0
2
1
1
6
8
3
-
GREYONE-*
4
2
4
2
2
2
2
10
11
5
+52%
and can only handle simple constraints (e.g., magic number).
Thus it shows minor improvements comparing to AFL. Fur-
ther, CollAFL-br-LAF integrates the Intel-laf solution, which
splits long string comparisons, ﬁt for detecting certain bugs
in LAVA-M. Lastly, Angora shows an extraordinary result as
well, due to its gradient descent algorithm. However, it may
get stuck in local minimum and fail to ﬁnd certain bugs.
Unique crashes. Figure 5 shows the growth trend of
unique crashes found by various fuzzers. Thanks to the ac-
curate taint-guided mutation and stable conformance-based
evolution, GREYONE shows a strong and stable growth trend
in ﬁnding unique crashes. It ﬁnds about 1X more unique
crashes than the second best fuzzer Angora.
AFL and CollAFL barely could satisfy the complicated
path constraints, becasue they are insensitive to data ﬂow
features. Interestingly, Anogra shows a fast growth in the be-
ginning and reaches a bottleneck after a few hours. Again, it
shows gradient descent is effective at generating interesting
test cases. However, it will be trapped soon, due to the inac-
curacy of taint and local optimum issue of gradient descent.
4.6 Heuristic Constraints Solving
Note that, GREYONE could bypass a wide range of compli-
cated constraints, by utilizing FTI. In order to further evaluate
its effectiveness, we compare it with a state-of-the-art sym-
bolic execution assisted fuzzer QSYM.
To perform fair comparison, we setup similar environments
for QSYM and GREYONE. First, we followed the same con-
ﬁguration in the original paper [43] to evaluate QSYM. More
speciﬁcally, QSYM works together with a master AFL and a
slave AFL instance, occupying three CPU cores and 256GB
memory. On the other hand, we setup GREYONE to work with
Figure 5: The growth trend of unique crashes found in LAVA-
M by AFL, CollAFL, Angora and GREYONE.
Bug ﬁnding. Table 4 shows the number of bugs (average in
5 runs) detected by each fuzzer within 24 hours. GREYONE
ﬁnds 2601 bugs in all applications, including all listed bugs in
LAVA-M. Moreover, it found 327, 4, 4 and 1 unlisted bugs in
these four applications respectively, showing that GREYONE
is very effective and much better than other fuzzers.
First, AFL and CollAFL have the worst performance, be-
cause they are not sensitive to data ﬂow features and thus
unﬁt for detecting bugs in LAVA-M. Second, Honggfuzz an-
alyzes all operands used in branches, but lacks the ability to
isolate untouched branches and lacks efﬁcient seed updating
and selection policies. Therefore its evolution speed is slow
and the overall efﬁciency is poor. Third, VUzzer is very slow
USENIX Association
29th USENIX Security Symposium    2587
Figure 6: The growth trend of number of unique paths (average of 5 runs) detected by QSYM-* and GREYONE-*.
a slave AFL by simply sharing their seed queues, occupying
only two CPU cores and 8GB memory.
Table 5 shows the head-to-head comparison results, in 5
runs with 60 hours each time. Although GREYONE takes
fewer computing resources, it outperforms QSYM in terms of
both code coverage and vulnerabilities discovery. On average,
GREYONE found 1.2X unique paths, 1.12X edges, 2.15X
unique crashes and 1.52X vulnerabilities than QSYM.
To further demonstrate the effectiveness of constraints solv-
ing, we tracked the growth trend of paths coverage and pre-
sented in Figure 6. We could ﬁnd GREYONE cover more
paths in a faster pace than QSYM in most subjects.
According to the above evaluation, the heuristic constraint
solving capability provided by GREYONE outperforms sym-
bolic constraint solver when applied to hybrid fuzzing.
5 Further Analysis
We further evaluated GREYONE’s ability of data ﬂow anal-
ysis and the outcome of applying such data ﬂow features to
fuzzing, to better understand the improvements of GREYONE.
5.1 Performance of FTI
Our taint analysis engine FTI provides support for further
taint-guided mutation and conformance-guided evolution,
playing an important role in GREYONE. In this section, we
evaluated the efﬁciency and performance of FTI.
5.1.1 Completeness of Taint Inference
As aforementioned, FTI is sound and has no over-taint issues.
However, it may have under-taint issues due to its incomplete
testing in the pilot fuzzing. We hereby evaluated the under-
taint issues FTI is facing.
Figure 7: Proportion of tainted untouched branches reported
by FTI-only, DTA-only and both FTI and DTA.
Note that, it is infeasible to get the ground truth of the accu-
rate taint information, even if the source code is given, due to
challenges like implicit data ﬂows and external dependencies.
As a result, we directly compare FTI with another dynamic
taint analysis (DTA) engine, to roughly estimate under-taint.
Experiment Setup. There are several taint analysis engines
available [2, 20], we chose DFSan [2] as the DTA engine to
compare with, since it is the ofﬁcial engine shipped with the
LLVM [22] compilation framework and has good runtime
performance and platform support.
As aforementioned, solutions like DFSan not only suffer
from implicit data ﬂows, but also external dependencies. For
example, if an external library is not processed with DFSan,
the taint propagation will be broken once it ﬂows into the
library. To mitigate this issue, we built taint models for all
external libraries used in the experiment. Therefore, DFSan
could get more taint information than its default conﬁguration.
Then, we built a variation of GREYONE, named as GREY-
ONE-DTA by replacing its taint analysis engine with DFSan.
2588    29th USENIX Security Symposium
USENIX Association
Figure 8: Average speed of analyzing one seed by FTI.
Figure 9: Average speed of inferring taint for one branch
instruction, given input seeds of 1KB size.
Further we tested GREYONE and GREYONE-DTA on 11 real
world applications and 4 applications from LAVA-M. For each
application, we randomly selected hundreds of unique pro-
gram paths that have been explored by both GREYONE and
GREYONE-DTA. Then we examined all untouched branches
in these paths, and counted the number of untouched branches
that are related to input bytes (i.e., tainted).
Figure 7 shows the proportion of tainted untouched
branches reported by GREYONE of version FTI and DTA.
Note that, FTI has no over-taint issues, but DTA may have
over-taint issues (e.g., due to wrong taint propagation in XOR
instructions etc.). From the ﬁgure, we can learn that:
• DTA still has serious under-taint issues in all applica-
tions, even though we have mitigated some (caused by ex-
ternal dependencies). All the tainted untouched branches
reported by FTI-only are missed by DTA. Most of these
under-taint issues are caused by implicit data ﬂows.
• FTI has fewer under-taint issues. It also ﬁnds much
more taint (without over-taint) than DTA, even if DTA
could have over-claimed. For example, DTA could only
identify 25% of taint reported by FTI in the application
fig2dev. On average, FTI could ﬁnd 1.3X times more
tainted untouched branches than DTA.
Figure 10: Code coverage improvement brought by FTI.
5.1.2 Overhead of Taint Inference
As aforementioned, for each seed, FTI ﬁrst performs byte-
level mutation to generate new test cases. It then tests the
target applications and tracks the code coverage. During test-
ing, FTI monitors the value changes and infers taint for all
untouched branches in the path explored by the original seed.
Figure 8 shows the average speed of analyzing one seed
by FTI. The bar named tracking-path-only represents the
time used for byte-level mutation and fuzzing. The bar FTI
also includes the time of taint inference including value mon-
itoring. It shows that taint inference introduces less than 25%
overheads. Figure 9 further shows the time of inferring taint
for one branch instruction in the path. On average, FTI spends
0.15 seconds on inferring taint for one branch instruction..
Improvements Breakdown
5.2
GREYONE adopts two major data ﬂow features, i.e., taint
and constraint conformance, and several schemes to improve
the efﬁciency of fuzzing. We hereby breakdown the improve-
ments of each scheme.
a) Taint Inference. Figure 10 shows the code coverage
brought by GREYONE and GREYONE-DTA, which replaces
the taint inference engine FTI with another engine DFSan. It
shows that, on average, FTI could double the code coverage
on all targets, comparing to GREYONE-DTA. Thus, our taint
analysis engine FTI is useful.
b) Bytes prioritization. GREYONE uses taint to guide mu-
tation, by prioritizing input bytes to mutate, and determine
the way to mutate. We hereby measured the improvements
brought by byte prioritization. As shows in Table 6, after
disabling bytes prioritization, GREYONE-BP could explore
much less code and ﬁnd fewer vulnerabilities on all applica-
tions. On average, it has 14% fewer unique paths and 42%
fewer unique crashes than GREYONE.
USENIX Association
29th USENIX Security Symposium    2589
Figure 11: Improvements brought by byte prioritization and
conformance-guided evolution, in terms of code coverage and
unique crashes found in two applications.
We further tracked the growth trend of unique paths and
unique crashes. Figure 11 shows that, in terms of code cover-
age, with byte prioritization, GREYONE could ﬁnd about 20%
more paths in applications tiff2pdf and libwpd. In terms
of unique crashes, with byte prioritization, GREYONE could
ﬁnd unique crashes faster, and ﬁnd much more. Especially,
when testing the application tiff2pdf, GREYONE could not
ﬁnd any crashes in 60 hours if byte prioritization is turned
off.
c) Conformance-guided Evolution. GREYONE utilizes
conformance to guide the evolution direction of fuzzing. We
also evaluated the improvements of this scheme, in a way sim-
ilar to byte prioritization. As shows in Table 6, after disabling
conformance-guided, GREYONE-CE explores much less code
and ﬁnd fewer vulnerabilities on all applications, even worse
than GREYONE-BP. On average, it has 21.9% fewer unique
paths and 63.2% fewer unique crashes than GREYONE.
Specially, without conformance-guided evolution, GREY-
ONE found 30% fewer paths in all applications, and failed to
ﬁnd any unique crashes in Tiff2pdf and libwpd.
d) Selective execution.The advantage of selective mecha-
nism is to avoid selecting the correspondent instance to ex-
ecute when the new seed is mutated too many bytes or has
low probability to generate better conformance. By taking
this strategy, the most intuitive effect to fuzzing is to improve
the overall execution speed. To show the promotion, we con-
ducted two selective mode in GREYONE, one was the default
set, the other was only to select the instance with monitoring
conformance to execute. As shown in Fig 12, we tested 14
subjects and evaluated the average execution speed on each
subject. Comparing to AFL, GREYONE with selective mecha-
Figure 12: The speed impact brought by selective execution
in GREYONE (60 hours).
nism can reach a speed at over 80%, while GREYONE without
selective mechanism could only reach a speed at less than
65%.
6 Related Work
Evolutionary mutation-based fuzzing achieved a great success
in practice, due to its scalability and efﬁciency. The represen-
tative solution AFL [44] takes achieving higher code coverage
as evolution direction, and mutates seeds in a nearly random
manner. Many other solutions, including taint analysis, have
been proposed to improve mutation-based fuzzing.
6.1 Taint Inference
Taint analysis is a fundamental technique for many appli-
cations including fuzzing. Traditional taint analysis solu-
tions [2, 20] heavily rely on manual efforts of compose taint
propagation rules for each instruction, and suffer from serious
under-taint and over-taint problems.
Improvements to traditional taint analysis. Many alle-
viated schemes are proposed to mitigate the inaccuracy issue
for traditional taint analysis. Dytan [11] keeps track of indi-
rect taint propagation to mitigate the under-taint issue, but
brings lots of false positives. DTA++ [19] locates implicit
control ﬂow branch and diagnose under-taint using ofﬂine
symbolic execution. However, it suffers from solving compli-
cated conditions and high performance overheads. TAINTIN-
DUCE [46] adopts a testing-based solution to infer taint prop-
agation rules automatically. But it is very heavy-weight, and
cannot solve the inaccuracy issues.
Mutation-based inference. Some recent works proposed
mutation-based taint inference which have better performance
in certain applications. Sekar [31] adopts black-box testing
and leverages predeﬁned mutation rules to infer taint, able
to detect injection attacks. MutaFlow [26] monitors changes
of security-sensitive APIs by mutating sensitive source APIs,
able to detect vulnerable information ﬂow. These two focus
2590    29th USENIX Security Symposium
USENIX Association
zTable 6: Number of unique paths and crashes (average in 5 runs with 60 hours one run) found in real world programs by
GREYONE, GREYONE-CE and GREYONE-BP, where GREYONE-CE is the mode of GREYONE disabling conformance-guided
evolution and GREYONE-BP is the mode of GREYONE disabling bytes prioritization.
Applications
Readelf
Nm
C++ﬁlt
Tiff2pdf
Tiffset
Libwpd
libsndﬁle
Fig2dev
Nasm
libncurses
Average Reduction
GREYONE
6834
4342
10523
5681
1757
5644
1185
1622
9443
2926
-
Unique Paths
GREYONE-CE
6222(-9%)
3432(-21%)
9870(-6.2%)
4107(-27.8%)
1345(-23.4%)
4220(-25.2%)
1069(-10%)
999(-38.4%)
6578(-30.3%)
2112(-27.8%)
-21.9%
GREYONE-BP
5757(-15.8%)
3886(-10.5%)
9932(-5.6%)
4598(-19%)
1434(-18.4%)
4982(-11.7%)
1081(-8.2%)
1211(-25.3%)
7979(-15.5%)
2543(-13%)
-14.3%
GREYONE
28