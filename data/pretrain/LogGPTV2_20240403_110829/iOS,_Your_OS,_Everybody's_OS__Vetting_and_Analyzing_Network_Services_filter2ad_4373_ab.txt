To ﬁnd a potential victim, a remote adversary can scan
and examine the network (i.e., the Wi-Fi network or cellular
network) by designating speciﬁc port numbers [51]. Such an
adversary subsequently compares the banner1 returned from
the connected server (i.e., a network service of the iOS app).
If the banner is expected, the adversary then conﬁrms the
real victim and can mount a remote 0-click attack, such as
stealing personal information for proﬁt. A real-world attack
targets Android device to be exposed in a cellular network to
thwart end-user privacy for extortion [2].
To further break down the role of a remote adversary, Fig-
ure 2 shows that each layer allows for different remote attacks:
(i) The interface would be exposed if the network service is
activated and the “open port” is misconﬁgured. (ii) A poor
implementation of “communication protocol,” usually writ-
ten in a universal language C/C++, may lead to DoS or RCE
of apps [5, 17, 74]. (iii) Insufﬁcient “access control” incurs
unauthorized access to network resources/functionalities.
3 Methodology of iOS App Collection
Collecting apps and meta-information on Apple iTunes is
not a trivial task. iTunes implements various restrictions for
app collection, such as capping the number of requests to
limit automated crawling methods and encrypting the exe-
cutable for DRM consideration. Because of these challenges,
previous collection methods are limited in scalability and
efﬁciency. Current iOS app downloading methods are UI ma-
nipulation [67] and in-device app crawler [62]. They decrypt
executable by using either Clutch [6], dumpdecrypted [10],
or the Frida [8] extension frida-ios-dump [20]. We realize
that recent research [62] expended three months to collect
28,625 iOS apps, lending evidence to the scalability issue
when extending to large-scale analysis.
1Banner is a speciﬁc message to uniquely identify a network service. For
instance, after connected to the network service of the Waze app, a client will
receive the message “WL” from the server.
2418    29th USENIX Security Symposium
USENIX Association
iOS App Collection
3.1
In this section, we describe our method for collecting iOS apps
IDs, downloading the .ipa ﬁle from iTunes, removing DRM
protection to get decrypted executable, and parsing executable.
Our method consists of the following three modules (see green
box of Figure 4):
Collecting IDs and downloading apps from iTunes. Each
iOS app on iTunes has a unique identiﬁer (i.e., ID). For ex-
ample, Instagram is identiﬁed by the unique ID: 389801252,
and can be accessed from iTunes by using this ID. Based on
the iTunes Search API [13], we collect the ID list recursively.
For example, the following request returns meta-information
of the top 20 apps in the “Productivity” category, such as ID
and the app name.
https://itunes.apple.com/search?term=productivity&country=u
s&media=software&limit=20.
Afterwards, we use a breadth-ﬁrst-search approach that ob-
tains “similar apps” using iTunes Search API. Queries are
relayed by different proxies to bypass the crawler blocking of
iTunes.
To purchase and download a DRM protected .ipa ﬁle from
iTunes, we implement a headless-downloader. In essence,
we implement the requests for purchasing and downloading
of iTunes, sign method for the requests, and modify the re-
quests header to bypass device identiﬁcation authentication.
Our headless-downloader leverages the Windows’ version of
iTunes’ .dll ﬁles and invokes the interface of the .dll ﬁles.
The headless-downloader accepts ID and Apple accounts as
arguments to download the .ipa ﬁle.
Decrypting the executable. To investigate the code, we need
to decrypt the executable of the downloaded apps. Since the
state-of-the-art techniques require physical iOS devices to
be involved in decrypting process [6, 10, 20], to avoid using
many devices, we use an agent app which is pre-installed on
a jailbroken iOS device. After the agent app is loaded into
memory, the iOS system is set to decrypt the executable. We
then suspend the decrypting process and inject the encrypted
executable into the agent app to utilize the inherent decrypt-
ing process of the iOS system. After the iOS system decrypts
the executable, we dump the executable on the jailbroken
device, retrieve it through the USB connection, and merge
the decrypted executable into the original .ipa ﬁle in a local
desktop computer. In such a way, we obtain the decrypted ex-
ecutable without installation and uninstallation and only need
to transfer the executable (not Application Bundle) between
the desktop computer and the iOS device.
Parsing the executable. In order to facilitate subsequent anal-
ysis and share our dataset for further research, we parsed the
executable by using JTOOL [14] and extracted relevant meta-
data such as the class name and string within an executable.
Data in Info.plist is also withdrawn, such as bundle ID
in “CFBundleIdentiﬁer” ﬁeld or the app name in “CFBundle-
Name” ﬁeld. These metadata and meta-information of an
Figure 5: Performance of .ipa ﬁle decryption process. The time
consumption is almost constant regardless the size of the .ipa ﬁle
when only delivering the executable.
app, including category and popularity, are stored in a search
engine, namely ELASTICSEARCH [50] for later queries.
Selecting seed apps. Seed apps are used to understand the
characteristics of network service vulnerabilities and extract
signatures for large-scale analysis of network services. Seed
apps are the iTune’s apps downloaded from both the United
States and China app stores. To choose seed apps, we take the
top 20 free apps from each category on iTunes, composing
1,300 apps in total. Since the list of apps on iTunes App Store
leaderboards is constantly updated, we use a snapshot of the
lists collected on May 8, 2018. Among these 1,300 apps, we
have 24 categories (480 apps in total) from China region and
41 categories (820 apps in total) from the United States region.
Apple classiﬁes the “Game” apps in the United States region
into more ﬁne-grained categories, such as “Games-Card” and
“Games-Action”. These 1,300 apps provide a huge diversity
across all app categories. There is almost no overlap between
the top popular apps in China and the United States, and
the taxonomy of apps in both countries are almost the same.
We only found two apps (i.e., Rules of Survival [19] and
Dancing Line [18]) that were ranked in the top 20 in both
the United States and China.
3.2 Evaluation of iOS App Collection
Collecting iOS apps effectively is a challenging and criti-
cal problem. To evaluate the efﬁciency of our app collec-
tion scheme, we experiment with two procedures: app down-
load and app decryption. Our unique design of these two
procedures is the key to the performance improvement for
app collection. For the comparison of executable decryption
speed, we attempt to automate the state-of-the-practice tools
ideviceinstaller [12] and frida-ios-dump [20] adopted
by research [33, 41, 67]. The decryption speed of these tools
USENIX Association
29th USENIX Security Symposium    2419
is largely concurrent with the download speed using our
headless-downloader, which expends approximately 29 hours
to decrypt the 1,300 seed apps with an iPhone 6s device,
averaging out roughly 80 seconds per app. By contrast, our
decrypting process, without manual handling .ipa ﬁles, takes
approximately 21 seconds on average per app, almost four
times faster than the tools. Nevertheless, we acknowledge that
the speed-up of the app decryption is positively correlated
to the existence of many “Game” apps in question (35.0%
of the whole dataset), where their resource ﬁles are unneces-
sary to be delivered between a desktop computer and an iOS
device (see Figure 5). Comparing the speed of downloads
is not as trivial as comparing the speed of decryption. We
acknowledge that a rigorous comparison of app download
between ours and other de facto research-standard tools is
difﬁcult because of the unknown arguments of the UI ma-
nipulation adopted by CRiOS [67] (e.g., time interval for UI
manipulation), available network bandwidth (e.g., 50mbs or
500mbs), and the vague description of the implementation of
the in-device crawler proposed by Yeonjoon et al. [62].
Based on the speed we tested for downloading the 1,300
seed apps, downloading 168,951 iOS apps in the wild with a
single download task and an iOS jailbroken device is esti-
mated to complete in 160 (assuming 24/7 activity) days. To
achieve this efﬁciently in practice, we combine six download-
ing tasks with two jailbroken devices for app collection. To
evade iTunes’ detection of our automated downloader, two
Apple accounts are iteratively used to download the .ipa ﬁles.
This scheme enables us to collect 168,951 apps within just
30 days. Overall, our app collection can signiﬁcantly improve
the collection rate by 17 times faster in comparison to the
methodology used by Yeonjoon et al. [62], which took three
months to collect only 28,625 iOS apps. We highlight that not
only the decrypting process can positively contribute to the
speed-up of the app collection, but our headless-downloader
can also fully utilize bandwidth for parallel apps download.
In summary, the scalable app collection tool, developed in
this paper, enables us to complete the collection of 168,951
iOS apps.
Ethical considerations: We emphasize that routinely collect-
ing and decrypting iOS apps using jailbroken iPhones is
for the purpose of improving their service quality and security.
The dataset and the research per se is to serve not only the
research community but also to beneﬁt the stakeholders, such
as Apple.
4 Vetting Methodology
In this section, we introduce the vetting methodology (see
the red box of Figure 4), which consists of dynamic analysis
(cf. § 4.1) to select candidate apps, obtain a call stack from
each app, static analysis and manual conﬁrmation (cf. § 4.2)
to scrutinize the network services of the candidate apps. The
rationale behind the vetting methodology of “dynamic ﬁrst,
static later, and manual conﬁrmation last” is that dynamic
analysis can rapidly check for misconﬁgured network inter-
faces on a large scale, allowing us to pinpoint a small portion
of candidate network service apps. The more time-consuming
static analysis can then be used to perform a ﬁne-grained
analysis and check for potential vulnerabilities. Finally, we
verify the identiﬁed vulnerabilities manually in order to en-
sure vulnerabilities are not misidentiﬁed.
4.1 Dynamic Analysis
Dynamic analysis is used to check for remote accessible net-
work interfaces in the wild. Speciﬁcally, we use dynamic
analysis to check which app utilizes a network service and
analyze the interface of the network service while preserving
the call stack of the app.
Vetting if apps provide network services. We leverage our
dynamic analysis to detect whether apps provide network ser-
vices. To provide network services, the standard process [25]
in light of POSIX Layer (see Figure 3) is to (i) create a socket,
(ii) bind it to a port, and (iii) begin listening for incoming con-
nections on that port. During the second step of the process,
namely invoking _bind API, developers can pass rich param-
eters, indicating the property of the network service, to the
_bind API to limit the access scope of the network service
by designating the network interface as loopback for local
host access or LAN for remote access from Wi-Fi/cellular
networks.
To study the interface of a network service, we implement
an “addon” for jailbroken iOS devices by using Cydia
Substrate [72]. The “addon” redirects the _bind API calls
initiated by each analyzed app to the vetting code. As dis-
cussed in Section 2.3, we only consider remote adversaries
because they are more practical threats to the apps. There-
fore, by parsing parameters of _bind API, if the app uses the
loopback interface (e.g., 127.0.0.1), the vetting code consid-
ers the app as safe and terminates the analysis. For the apps
that use the LAN interface, for example, a developer passes
a parameter 192.168.1.3 to _bind API, the vetting code in
“addon” reports the app is accessible (i.e., a candidate app).
We later run static analysis on these apps to vet the security
of the network service.
Call stack extraction. We carry out call stack extraction for
generating unique signatures so we can identify system APIs
and third-party libraries relevant to network services. For any
active app, iOS maintains the runtime return address of a
routine in a data structure known as the call stack. The call
stack, ﬁlled with pointers, is depicted in the left-top box of
Figure 8, where pointers indicate the site to which the routine
should return when its execution is completed. Since the API
_bind is a prerequisite for setting up a network service, to
analyze the call trace reaching the _bind API, the call stack
is preserved by our “addon” when analyzing the interface of
the network service. The pointer in the call stack varies due
2420    29th USENIX Security Symposium
USENIX Association
Figure 6: The performance of our static analyzer. After the 113
apps pass our dynamic analysis, the static analysis (including de-
compilation, optimization, and slicing) takes 54 minutes per app
on average. The overhead of decompiler should be in line with the
instructions within an executable; however, for the executable larger
than 120MB, memory compression and swapping time is involved
as per the exhausted memory (16G), leading to a sharp increase of
the time consumption of the decompiler and overall performance.
The dramatic drop at 140MB is an exception that the instructions of
the app are not in line with the executable size. The overall perfor-
mance beneﬁts from the slicer (on-demand inter-procedural), with
comparison to the overhead of original inter-procedural analysis [49]
for program slicing, which takes in the order of days and is omitted
herein.
to the Address Space Layout Randomization (ASLR) security
mechanism of the iOS system. In order to map the runtime
ﬂoating pointers in the call stack to the concrete offset of
the static executable, the ASLR value for the executable is
preserved.
Limitations. Region lock checks (nine apps) from either
iTunes or the developer may occasionally impede the dy-
namic analysis. In addition, social security numbers required
(29 apps) for registration process or jailbreak detection (four
apps) by developers will also prevent the apps from running.
These apps account for 3.2% of our 1,300 seed apps. Subject
to the accuracy of UI automation [41], the dynamic analy-
sis would involve human interaction if necessary (e.g., app
registration).
4.2 Static Analysis and Manual Conﬁrmation
We note that only network services behind the LAN interface
can reach the static code analysis. Dynamic analysis selects
candidate apps that provide network services and excludes
apps that use the loopback network interface. Next, by using
static analysis, candidate apps are further narrowed down
by using rules. Static analysis results are then manually
conﬁrmed.
Figure 7: The static analysis result of the misuse of GCDWebServer
in the Now app. The green item indicates a harmless usage of this
library. The brown item reports another misuse of this library.
Static analysis. During the iOS app development, developers
use a mixture of Objective-C and C or SWIFT to compose an
app. To automatically analyze Objective-C and SWIFT binary,
we opt to further optimize the open-source framework [49],
which is a static slicer for inter-procedural data-ﬂow analysis
on LLVM IR of 64-bit ARM binary. Speciﬁcally, three phases
are involved in analyzing an iOS app, i.e., decompiling ma-
chine code to LLVM IR by using DAGGER [9], optimizing
the IR, and slicing on the IR. To adapt this framework to our
analysis task, we attempted to enhance the framework from
the following aspects.
(i) We supplement semantics of more ARM instructions
to the decompiler. Additionally, since the IR of a moderate
app always consumes gigabytes of memory, some instructions
are simpliﬁed to shrink the memory usage, such as removing
ﬂoating point instruction. The simpliﬁcation has little effect
on the analysis results.
(ii) We convert inter-procedural data-ﬂow analysis to on-
demand inter-procedural [70]. The complexity of point-to
analysis in slicing is O(n3) [21], where n is over ten million
for a moderate app when performing inter-procedural analysis.
This makes original analysis take several days to analyze
an app. To speed up the performance, the on-demand inter-
procedural analysis starts analyzing the function enclosing the
reference to the expected class object name or method name
of a network service API. After slicing on the function and the
USENIX Association
29th USENIX Security Symposium    2421
callees (functions) are solved, it takes in all identiﬁed callees
to start another slicing iteration. This strategy signiﬁcantly
reduces the n of point-to analysis. The overall performance of
the static analyzer is depicted in Figure 6. We show that the
overhead of the decompiler and slicer is almost linear in terms
of the executable ﬁle size, and the slicing phase is bounded
within a constant-time overhead.
(iii) We formulate and specify rules for the misuse of
network services. For example, the static analysis result of the
misuse of the GCDWebServer library is depicted in Figure 7.
In comparison to dynamic analysis which investigates the
network interface of an app, static analysis can check if the
root folder of the web server is a data container directory,
or a bundle container directory by using rule. The code of
our static analyzer is publicly available at https://github.com
/pwnzen-mobile.
Manual conﬁrmation. To date, as the automated analysis is
unable to verify iOS network service vulnerabilities end-to-
end, we resort to six expert researchers (three co-authors and
three external experts) to identify private (e.g., cookies) or
non-private (e.g., video clips) information, privileged func-
tionality (e.g., install apps) exposure, and to study how to
build a request to bypass the weak protection (e.g., hard-coded
passwords) with the help of static analysis. The six expert
researchers are separated into three groups and each group
reports if the apps are considered vulnerable. Speciﬁcally,
we focus on remote vulnerabilities for exploits. For example,
although Waze provides a network service on port 12345 for
the LAN interface and 55432 for the loopback interface simul-
taneously on startup, we only check the network service on
port 12345. If private information or privileged functionality
is exposed to cellular networks via a network service, we rank
the vulnerable network service as high risk. If it is exposed
to Wi-Fi networks, we rank the network service as medium
risk. For non-private or non-privileged functionality, we rank
the network service as low risk. For example, obtaining video
snippets from the Prime Video app without authorization
is ranked as low risk, since the video snippets are consid-
ered non-private. After generating all reports, the researchers
discuss and ﬁnalize ranking the vulnerabilities.
Limitations. The static analysis is efﬁcient to identify secu-
rity risks. Two types of divergence may occur in the static
analysis: (i) Our on-demand inter-procedural analysis may re-
sult in loss of precision, subject to the failure of parsing 8.7%
apps, leading to a false positive rate of 20.5%; (ii) 29.4%
libraries implemented in C fail to be parsed through our static
analyzer.
4.3 Results of Vetting
In this subsection, we present the results of our dynamic and
static analysis and our six expert researchers’ veriﬁcation.
This process is performed on seed apps. Even with manual
Table 2: The results of our dynamic analysis of the apps ob-
tained in the China and United States.
Dynamic
Port (0)
16 (3.33%)
42 (5.12%)
58 (4.46%)
Loopback Interface
(e.g., 127.0.0.1)
14 (2.91%)
43 (5.24%)
57 (4.38%)
LAN
Interface
51 (11.04%)
62 (7.01%)
113 (8.69%)
China (480)
United States
(820)
Total (1,300)
conﬁrmation (done by six expert researchers), the entire vet-
ting process for the 1,300 apps can be completed within 15
days. Dynamic analysis takes 2 days with one jailbroken
iOS device (may need interaction) and static analysis, includ-
ing the manual conﬁrmation, takes 13 days.
Results of dynamic analysis. For the dynamic analysis, we
install, launch, and uninstall each iOS app automatically by
using ideviceinstaller [12]. When the app reaches the
main view, we end the dynamic vetting process, and collect
the call stack of each analyzed app. Overall, 172 unique apps,
13.2% of our collected total, provide network services for
either local or remote clients. Table 2 shows the details of our
dynamic analysis. Our observations are as follows: (i) The dy-
namic port (the second column of Table 2) to which a socket
binds is usually used for in-app communication, and the net-
work service on a dynamic port is immune to attacks; (ii) the
apps that provide network services on multiple interfaces will
be represented in each column; therefore, a unique app can
be counted multiple times in this table. We found 65 unique
apps from China and 107 from the United States that provide
network services; and (iii) the analysis process was always
performed in a Wi-Fi network. As shown in the last column
of Table 2, a huge number (113) of iOS apps provide network
services to other hosts in the same Wi-Fi networks, accounting
for 8.69% of the 1,300 seed apps. Since developers can adjust
their network services for different networks (i.e., Wi-Fi net-
works and cellular networks), the network services exposed
to cellular networks are less than 8.69%. Compared to the
apps in the United States, the apps in China are more inclined
to provide network services on the LAN interface. That is,
11.04% vs. 7.01%.
Results of static analysis and manual conﬁrmation. Based
on dynamic analysis, we select candidate apps to examine in
depth by static analysis and verify exploitable network ser-
vices by six exports’ conﬁrmation. Ultimately, we conﬁrmed
that 11 (9.7%) of the 113 candidate apps have vulnerabili-
ties, such as Waze, QQBrowser, Now, Scout GPS Link, and
Youku. These vulnerable apps are described in Section 7.
5 Building Signatures for Network Services
Two types of interfaces are available for developers to start up
network services: by invoking system network service APIs
or by using third-party libraries (see “app code” of Figure 3).
For large-scale analysis of apps across categories, we build
2422    29th USENIX Security Symposium
USENIX Association
0   binddetours.dylib 0x0000000101aaf758
1   Covet 0x0000000100a1e1f8
2   Covet 0x0000000100a1e608
3   libdispatch.dylib 0x000000019b8b9770
...
8   libdispatch.dylib 0x000000019b8c471c
9   Covet 0x0000000100a3bd94
10 Covet 0x0000000100a720f4
11 Covet 0x0000000100a71f40
...
26 Covet 0x0000000100329600
27 libdyld.dylib 0x000000019b8ea8b8
Call Stack
… “Error in listen() function” … 
“+[TJCacheProtocol cacheServer] 
(TJCacheProtocol_meta *self, sel)”… Tapjoy
Cache ready” ….
Token
__text: 000000010099E130 sub_10099E130 ; Data XREF: -[TJCDAsyncSocket acceptOnInterface:port:erro:]+B0 ↑0
…
__text: 000000010099E1F4  BL  __bind