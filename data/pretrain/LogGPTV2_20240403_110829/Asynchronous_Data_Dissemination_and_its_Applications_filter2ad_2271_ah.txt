Springer, 148–164.
[49] Adi Shamir. 1979. How to share a secret. Commun. ACM 22, 11 (1979), 612–613.
[50] Lloyd R Welch and Elwyn R Berlekamp. 1986. Error correction for algebraic
block codes. (Dec. 30 1986). US Patent 4,633,470.
[51] Maofan Yin, Dahlia Malkhi, Michael K Reiter, Guy Golan Gueta, and Ittai Abra-
ham. 2019. Hotstuff: Bft consensus with linearity and responsiveness. In Proceed-
ings of the 2019 ACM Symposium on Principles of Distributed Computing. ACM,
347–356.
[52] Thomas Yurek, Licheng Luo, Jaiden Fairoze, Aniket Kate, and Andrew K Miller.
2021. hbACSS: How to Robustly Share Many Secrets. (2021), 159 pages.
A ANALYSIS OF ALGORITHM 4
In this section, we will analyze that Algorithm 4 implements RBC
for long messages while keeping the round complexity at 4.
Lemma A.1. Assuming a collision resistant hash function, if an
honest node sends ⟨READY, 𝑚𝑖, ℎ⟩ where ℎ = hash(𝑀), then 𝑚𝑖 is the
𝑖th symbol of RSEnc(𝑀, 𝑛, 𝑡 + 1), and furthermore, no honest node
sends a READY message for a different ℎ′ ̸= ℎ.
Proof. Let 𝑖 be the first honest node that sends a ⟨READY,∗, ℎ⟩.
Then at least 2𝑡+1 nodes sent ⟨ECHO,∗, ℎ⟩ to node 𝑖. Now, for the sake
of contradiction assume that an honest node 𝑖′ is the first honest
node that sends a ⟨READY,∗, ℎ′⟩ for ℎ′ ̸= ℎ. Again at least 2𝑡 + 1
nodes sent ⟨ECHO,∗, ℎ′⟩ to node 𝑖′. Then, by quorum intersection,
at least 𝑡 + 1 nodes sent ECHO message for both ℎ and ℎ′. This is
impossible as there are at most 𝑡 malicious nodes and an honest
node sends ECHO message at most once.
Note that an honest node 𝑖 sends ⟨READY, 𝑚𝑖, ℎ⟩ for ℎ = hash(𝑀)
only upon receiving at least 𝑡 + 1 matching ⟨ECHO, 𝑚𝑖, ℎ⟩. At least
one of these ECHO message is from an honest node. Then, by the
collision resistance property of the underlying hash function, 𝑚𝑖 is
the 𝑖th symbol of RSEnc(𝑀, 𝑛, 𝑡 + 1).
□
Lemma A.2. If an honest node 𝑖 receives 𝑡 +1 READY messages with
a matching hash ℎ, then node 𝑖 will eventually receive 𝑡 + 1 matching
⟨ECHO, 𝑚𝑖, ℎ⟩ messages and hence send ⟨READY, 𝑚𝑖, ℎ⟩.
Proof. Let 𝑗 be the first honest node that sends ⟨READY,∗, ℎ⟩
message to all. Then, node 𝑗 must have received at least 2𝑡 + 1 ECHO
messages with matching ℎ. At least 𝑡 +1 of these ECHO messages are
from honest nodes. All these honest node will send ⟨ECHO, 𝑚𝑖, ℎ⟩
to node 𝑖. Hence, node 𝑖 will eventually receive 𝑡 + 1 ⟨ECHO, 𝑚𝑖, ℎ⟩
messages.
□
Theorem A.3 (Totality and Agreement). Algorithm 4 guar-
antees Totality and Agreement.
Proof. An honest node outputs a message 𝑀 only upon receiv-
ing at least 2𝑡+1 READY messages with a matching hash ℎ = hash(𝑀).
At least 𝑡 + 1 of them are sent by an honest node. Hence, all honest
nodes will receive at least 𝑡 + 1 READY messages with hash ℎ. By
lemma A.2, eventually all honest nodes will send READY messages
with hash ℎ. Hence, all honest nodes will receive READY messages
from all other honest nodes. Furthermore, due to Lemma A.1, all
these READY message contain correct symbols from the codeword
RSEnc(𝑀, 𝑛, 𝑡 + 1). Thus, every honest node will eventually output
𝑀 such that ℎ = hash(𝑀).
□
Theorem A.4 (Validity). Algorithm 4 guarantees Validity.
Proof. When the broadcaster is honest and has input M, at
least 2𝑡 + 1 honest nodes will send ECHO messages with identical
ℎ = hash(𝑀). Hence, all honest nodes will eventually send READY
messages for ℎ. By lemma A.1 no honest node will send READY
message for ℎ′ ̸= ℎ. As a result, all honest node will receive at
least 2𝑡 + 1 READY message for ℎ with valid symbols in it, which is
sufficient to recover 𝑀.
□
Next, we will analyze the communication complexity of the
protocol.
Lemma A.5. Assuming existence of collision resistant hash func-
tions, Algorithm 4 solves RBC with communication complexity of
𝑂(𝑛|𝑀|+𝜅𝑛2) where 𝜅 is the size of the output of the hash function.
Proof. In algorithm 4 the broadcaster sends a single PROPOSE
to all other nodes. Moreover, each honest node sends a single ECHO
and READY message. The proposal message has a communication
cost of 𝑂(𝑛|𝑀|). Since |𝑚𝑖|= |𝑀|/(𝑡 + 1) and hash outputs are 𝜅 bits
long, both ECHO and READY messages are 𝑂(|𝑀|/𝑛 + 𝜅) bits long.
Hence, each node incur a communication cost of 𝑂(|𝑀|+𝑛𝜅) for
sending ECHO and READY messages to all other nodes. Hence, the
total communication cost is 𝑂(𝑛|𝑀|+𝜅𝑛2).
□
B ADD FOR HIGH THRESHOLD
Recall from §3 that it is impossible to solve ADD for 𝑛 ≤ 2𝑡. In this
section we will describe how to extend our solution to ADD from
𝑛 > 3𝑡 to 𝑛 > 2𝑡. To do so, we will make use of a collision-resistant
hash function. The detailed changes in our original protocol are as
follows.
During the encoding phase, each sender encodes the message 𝑀
with 𝑚 = 𝑛(𝑡 + 1)/(𝑛 − 2𝑡) (due to reasons to be described later). Let
𝑀′ = RSEnc(𝑀, 𝑚, 𝑡 + 1) be the encoded message.
During the dispersal phase, each sender sends the 𝑖th component
of 𝑀′ (i.e., 𝑚𝑖) to node 𝑖. Note that 𝑚𝑖 consists of 𝑚/𝑛 symbols of
the codeword, hence its size is
𝑛(𝑡 + 1) =
𝑛(𝑡 + 1)|𝑀|
(𝑛 − 2𝑡)𝑛(𝑡 + 1) = |𝑀|
𝑛 − 2𝑡
|𝑚𝑖|= 𝑚|𝑀|
Furthermore, each sender additionally sends the cryptographic
hash digest ℎ = hash(𝑀) to all other nodes. In particular, during the
dispersal phase, each sender sends ⟨DISPERSE, 𝑚𝑖, ℎ⟩ to node 𝑖. A
recipient node 𝑗, upon receiving 𝑡 + 1 matching ⟨DISPERSE, 𝑚 𝑗 , ℎ⟩
𝑗 = 𝑚 𝑗 and ℎ∗ = ℎ, which will be used during the
message, sets 𝑚∗
reconstruction phase.
During the reconstruction phase, similar to our 𝑡  2𝑡 nodes where up to 𝑡 nodes could be
malicious, our high-threshold ADD has a total communication cost of
𝑂(𝑛2|𝑀|/(𝑛 − 2𝑡) + 𝑛2𝜅). Here 𝜅 is the size of the output of the hash
function.
Proof. During the dispersal phase, each sender sends a mes-
sage of size 𝑂(|𝑀′|/𝑛 + 𝜅) to every other node. Hence, the total
communication cost of every sender is 𝑂(|𝑀′|+𝑛𝜅). Since there are
Θ(𝑛) senders, the total communication cost in the dispersal phase is
𝑂(𝑛|𝑀′|+𝑛2𝜅). During the reconstruction phase, each nodes sends
a message of size 𝑂(|𝑀′|/𝑛) to every other node. Hence, the total
communication cost during the reconstruction phase is 𝑂(𝑛|𝑀′|)
Since in our high-threshold ADD |𝑀′|= 𝑂(𝑛|𝑀|/(𝑛 − 2𝑡), it has a
total communication cost of 𝑂(𝑛2|𝑀|/(𝑛 − 2𝑡) + 𝑛2𝜅).
□
C THRESHOLD SECRET SHARING
A (𝑛, 𝑘) threshold secret sharing scheme allows a secret 𝑠 ∈ Z𝑞 to be
shared among 𝑛 nodes such that any 𝑘 of them can come together
to recover the original secret, but any subset of 𝑘 − 1 shares cannot
be used to recover the original secret [9, 49]. We use the common
Shamir secret sharing [49] scheme, where the secret is embedded
in a random degree 𝑘 − 1 polynomial in the field Z𝑞 for some prime
𝑞. Specifically, to share a secret 𝑠 ∈ Z𝑞, a polynomial 𝑝(·) of degree
𝑘 − 1 is chosen such that 𝑠 = 𝑝(0). The remaining coefficients of
𝑝(·), 𝑎1, 𝑎2, · · · , 𝑎𝑡 are chosen uniformly randomly from Z𝑞. The
resulting polynomial 𝑝(𝑥) is defined as:
𝑝(𝑥) = 𝑠 + 𝑎1𝑥 + 𝑎2𝑥2 + · · · + 𝑎𝑘−1𝑥𝑘−1
Each node is then given a single evaluation of 𝑝(·). In particular, the
𝑖th node is given 𝑝(𝑖) i.e., the polynomial evaluated at 𝑖. Observe
that given 𝑡 + 1 points on the polynomial 𝑝(·), one can efficiently
reconstruct the polynomial using Lagrange Interpolation. Also note
that when 𝑠 is uniformly random in Z𝑞, 𝑠 is information theoretically
hidden from an adversary that knows any subset of 𝑘 − 1 or less
evaluation points on the polynomial other than 𝑝(0) [49].
D PEDERSEN’S VSS [44]
Let 𝜅 be the security parameter. Let G be a cyclic abelian group of
prime order 𝑞 and Z𝑞 the group of integer modulo 𝑞. Let 𝑔0, 𝑔1 ←
G be two uniform and independent element from G. Before we
describe Pedersen’s VSS scheme, we will first briefly describe the
commitment scheme for a arbitrary secret 𝑠 ∈ Z𝑞. To commit to a
secret 𝑠, the committer samples a random 𝑟 ∈ Z𝑞 and computes
commit(𝑠, 𝑟) = 𝑣 = 𝑔𝑠
0𝑔𝑟
1
To reveal such a commitment later, the committer reveals (𝑠, 𝑟)
1 is equal to 𝑣 or not. We refer
and the verifier checks whether 𝑔𝑠
to the reveal procedure as:
0𝑔𝑟
reveal(𝑣) := 𝑠, 𝑟 such that 𝑣 = 𝑔𝑠
0𝑔𝑟
1
Pedersen [44] illustrates that the commitment scheme described
above information theoretically hides 𝑠 and binds 𝑠 to 𝑣 for a com-
putationally bounded prover, assuming the prover does not know
the discrete logarithm of 𝑔1 with respect to 𝑔0, i.e., the prover can
not efficiently compute log𝑔0 𝑔1. We summarize the VSS scheme
from [44] in Figure 4.
Observe that the commitment to the polynomial 𝑝(·) that embeds
the secret 𝑠 is linear in the number of nodes. Moreover, given the
linear size commitment and a tuple (𝑠𝑘, 𝑡𝑘), one can efficiently verify
(without any extra information) whether 𝑠𝑘 is equal to 𝑝(𝑘) or not.
We will crucially use these properties to design our AVSS scheme
with a total communication cost of 𝑂(𝜅𝑛2).
Next, we briefly summarize the properties of the VSS scheme
described in Figure 4. Informally, Lemma D.1 states that once the
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2719Let 𝑠 be the secret a node (the dealer) and let 𝑔0, 𝑔1 two
uniformly random and independent generators of a group G.
PedPolyCommit(𝑔0, 𝑔1, 𝑠) → {𝒔, 𝒄, 𝒓}
(1) Sample 𝑟 ← Z𝑞 and let 𝑣0 = commit(𝑠, 𝑟).
(2) Sample 𝑎𝑘, 𝑏𝑘 ∈ 𝑍𝑞 for 𝑘 = 1, 2, ..., 𝑡 and let:
𝑝(𝑥) = 𝑠 + 𝑎1𝑥 + . . . + 𝑎𝑡 𝑥𝑡; and
𝜙(𝑥) = 𝑟 + 𝑏1𝑥 + . . . + 𝑏𝑡 𝑥𝑡