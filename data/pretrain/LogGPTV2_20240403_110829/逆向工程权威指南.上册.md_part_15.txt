### 逆向工程权威指南（上册）

#### 7.2.6 ARM64 指令清单

**清单 7.7: Non-optimizing GCC 4.9.1 ARM64**

```assembly
.LC0:
    .string "Enter X:"
.LC1:
    .string "%d"
.LC2:
    .string "You entered %d...\n"

f5:
    stp x29, x30, [sp, -16]!  ; 保存 FP 和 LR 在栈帧中
    add x29, sp, 0            ; 设置栈帧 (FP=SP)
    
    adrp x0, .LC0              ; 加载 *Enter X:* 字符串的指针
    add x0, x0, :lo12:.LC0
    bl puts                    ; 调用 puts 函数
    
    adrp x0, .LC1              ; 加载 *%d* 字符串的指针
    add x0, x0, :lo12:.LC1
    adrp x1, x                ; 计算全局变量 x 的地址
    add x1, x1, :lo12:x
    bl _isoc99_scanf           ; 调用 scanf 函数
    
    adrp x0, .LC2              ; 加载 *You entered %d...\n* 字符串的指针
    add x0, x0, :lo12:.LC2
    ldr x1, [x]                ; 从内存中加载 x 的值
    bl printf                  ; 调用 printf 函数
    
    mov w0, 0                  ; 返回 0
    ldp x29, x30, [sp], 16     ; 恢复 FP 和 LR
```

在上述代码中，变量 `x` 被声明为全局变量。程序通过 `ADRP/ADD` 指令对（第 21 行和第 25 行）计算其指针。

#### 7.2.7 MIPS 指令清单

**无初始值的全局变量**

以变量 `x` 为例，我们将其编译为可执行文件并使用 IDA 加载该程序。由于变量 `x` 在声明时未初始化，因此它会出现在 `.sbss` 段中（请参见 3.5.1 节的全局指针）。

**清单 7.8: Optimizing GCC 4.4.5 (IDA)**

```assembly
.text:004006C0 main:
    var_10 = 0x10
    var_4 = -4
    lui $gp, 0x42
    addiu $sp, $sp, -0x20
    sw $ra, 0x20+var_4($sp)
    sw $gp, 0x20+var_10($sp)
    la $t9, puts
    jalr $t9
    la $a0, aEnterX
    jalr $t9
    lui $a0, 0x40
    la $t9, _isoc99_scanf
    la $a1, x
    jalr $t9
    la $a0, aD
    la $a1, x
    jalr $t9
    la $a0, aYouEnteredD
    jalr $t9
    move $v0, $zero
    jr $ra
    addiu $sp, $sp, 0x20
```

**清单 7.9: Optimizing GCC 4.4.5 (objdump)**

```assembly
004006c0 <main>:
    004006c0: 3c004042        lui     $gp,0x42
    004006c4: 27bdffe0        addiu   $sp,$sp,-0x20
    004006c8: afbf001c        sw      $ra,0x1c($sp)
    004006cc: afbc0010        sw      $gp,0x10($sp)
    004006d0: 0320f809        jalr    $t9
    004006d4: 3c040040        lui     $a0,0x40
    004006d8: 00866780        la      $t9,puts
    004006dc: 0320f809        jalr    $t9
    004006e0: 0320f809        la      $a0,aEnterX
    004006e4: 03c0f809        la      $t9,_isoc99_scanf
    004006e8: 0320f809        la      $a1,x
    004006ec: 0320f809        jalr    $t9
    004006f0: 0320f809        la      $a0,aD
    004006f4: 0320f809        la      $a1,x
    004006f8: 0320f809        jalr    $t9
    004006fc: 0320f809        la      $a0,aYouEnteredD
    00400700: 0320f809        jalr    $t9
    00400704: 00001021        move    $v0,$zero
    00400708: 03e00008        jr      $ra
    0040070c: 27bd0020        addiu   $sp,$sp,0x20
```

在第 18 行处，指令将全局指针 `GP` 与一个负数值的偏移量相加，以此计算变量 `x` 在 64KB 数据缓冲区中的访问地址。此外，三个外部函数（`puts`、`scanf`、`printf`）在 64KB 数据空间中的全局地址也是借助 `GP` 计算出来的（第 9 行、第 16 行、第 26 行）。`GP` 指向数据空间的正中央，经计算可知，这三个函数的地址和变量 `x` 的地址都在数据缓冲区的前端。这并不意外，因为这个程序已经很短小了。

值得注意的是，在函数结尾处有两条 NOP 指令。它们的实际指令是空操作指令 `MOVE $at, $at`。借助这两条 NOP 指令，后续函数的起始地址可以向 16 字节边界对齐。

**有初始值的全局变量**

我们将前文的例子进行相应修改，把相关行改为：

```c
int x = 10; // 默认值
```

则可得如下代码段。

**清单 7.10: Optimizing GCC 4.4.5 (IDA)**

```assembly
.text:004006A0 main:
    var_10 = -0x10
    var_8 = -8
    var_4 = -4
    lui $gp, 0x42
    addiu $sp, $sp, -0x20
    sw $s0, 0x20+var_8($sp)
    sw $ra, 0x20+var_4($sp)
    la $t9, puts
    jalr $t9
    la $a0, aEnterX
    jalr $t9
    lui $a0, 0x40
    la $t9, _isoc99_scanf
    la $a1, x
    jalr $t9
    la $a0, aD
    la $a1, x
    jalr $t9
    la $a0, aYouEnteredD
    jalr $t9
    move $v0, $zero
    jr $ra
    addiu $sp, $sp, 0x20
```

通过这些优化和清晰化处理，代码变得更加易于理解和阅读。