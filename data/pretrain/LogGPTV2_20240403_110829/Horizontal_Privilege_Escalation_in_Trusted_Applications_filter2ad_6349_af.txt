from being introduced in the future.
In the case of encrypted CA information stored in Normal
World storage (e.g., the internal ﬂash drive), access to cipher-
texts is determined by the Normal World OS. Thus, under the
threat model presented in Section 3.2, using the least privilege
principle [26] can help prevent attackers from obtaining
ciphertexts belonging to a CA and prevent using them to
perform HPE attacks. For example, the HPE vulnerabilities
targeting the wrap / unwrap functions in the three case studies
presented in Section 4.4 can only be exploited if the attacker
can read or alter ciphertexts used by CAs.
Strict access control enforced by the TZOS can only be used
to prevent unauthorized access to CA information maintained
in Secure World-provided resources. However, in order to
enforce such access control, the TZOS has to (1) provide each
CA with their own isolated space inside the Secure World
resources and (2) determine on behalf of which CA a TA is
attempting to read or write data within this space.
There are multiple ways a TZOS can implement (1). For
example, the Secure World resources can be partitioned
and each CA restricted to only to access its own partition.
Alternatively, the TZOS can maintain and use CA speciﬁc
tags to determine access to the CA information stored in such
resources. Implementing (2) is more difﬁcult under TrustZone,
because only the Normal World OS is the only entity capable
of correctly identifying each CA process. The TZOS has to
rely on information provided by Normal World in order to
only provide speciﬁc CAs access to Secure World resources.
In summary, ﬁne-grained access control policies approach-
ing least privilege provide a means to prevent malicious CAs
from accessing CA information stored by TAs and launching
HPE attacks. However, a benign and uncompromised Normal
World OS is required for reliably enforcing these policies.
6.5 Minimizing Normal World access to TA’s
Under all TZOSes studied, once a CA is granted access by
the Normal World OS to communicate with TAs in inside the
Secure World, the respective CA is permitted by the TZOS
to send requests to any API of the TAs running under it. Under
this coarse-grained access model, all vulnerabilities present
inside TAs can be exploited by attackers once they manage
to compromise a single Normal World CA.
Currently, the TZOSes do not restrict CA access to TAs
because they are not able to reliably determine their identity
due to the semantic gap between the two worlds. However, as
mentioned in the previous Section, the TZOS can receive the
required information from an uncompromised Normal World
kernel. If the Normal World OS is modiﬁed to include the
origin of requests sent to the TA APIs, a ﬁne-grained access
control could be enforced by the TZOS in order to prevent
CAs from arbitrary accessing TA APIs.
Under a ﬁne-grained access control, each TA could notify
the TZOS of which CAs are authorized to communicate
with it. For example, DRM TAs could provide a list of IDs
of pre-approved DRM CAs that are allowed to access their
APIs. These IDs would be read from signed CA binaries by
the Normal World OS and provided to the TZOS.
In order to exploit vulnerabilities inside a TA, attackers
would be forced to either compromise speciﬁc CAs or
compromise the Normal World OS. Systems like TZ-RKP [2]
and SPROBES [9] can be employed by the TZOS to maintain
the integrity of the Normal World OS. Thus, minimizing access
to TA API reduces the impact of vulnerabilities inside CA code
and raises the bar for attackers that try to leverage them into
escalating their privileges into the Secure World or other CAs.
7 Related Work
TrustZone has been developed to guard sensitive data
from untrusted software. Initial TrustZone research has
mainly focused on moving security-sensitive operations
(e.g., conﬁdential data storage [16], one-time-password
generation [30], ad fraud detection [15], attesting logins [17],
mobile payments [33], memory acquisition [31]) inside the
Secure World environments for protection from the untrusted
Normal World OS. Such operations are always performed
on behalf of a Normal World application and are present in
modern TrustZone devices in the form of TAs. For example,
the Key Management and DRM TAs follow DroidVault’s
concept of trusted data vaults. In this work we show that
HPE attack vectors are introduced when security-sensitive
operations such as these are moved inside the Secure World.
Several works have identiﬁed memory corruption vulner-
abilities in TAs that result in impact similar to this work such
as leaking secrets and altering TA memory [3, 4, 12, 13, 25].
Cerdeira et al. [6] present a study of several such issues. In
contrast, the HPE attack vectors presented in this work show
how it is possible to leak secrets and alter TA information
without requiring TA memory corruption vulnerabilities.
The HPE attack vectors are a manifestation of the TA
confused deputy problem. The closest context in which this
problem has been studied is Boomerang [18] attacks. Similar
to HPEs identiﬁed in this work, Boomerang attacks use the
semantic gap present in the memory sharing between the two
worlds to trick the Secure World into overwriting arbitrary
Normal World memory. In contrast, in this work we present
vulnerabilities stemming from TAs providing untrusted
838    29th USENIX Security Symposium
USENIX Association
applications with unauthorized access to CA data maintained
in both worlds. The confused deputy also appears in the
context of IPC between Android applications [5]. However,
the framework proposed cannot be extended to TAs due to the
semantic gap present between the two words.
Attestation forgery attacks have been introduced in the form
of cuckoo attacks [22] in the context of physical TPMs [32] and
Goldeneye [14] in the context of virtual TPMs. These attacks
trick remote servers that rely on TPM generated attestations
into establishing trust with potentially compromised clients.
The vulnerable Attestation TAs identiﬁed in Section 4.3
similarly enable variants of these attacks in the context of
TrustZone devices.
Binary dynamic analysis has been used in previous work
to identify vulnerabilities within binaries. Firmalice [27]
examines execution paths for authentication bypass vulner-
abilities. Driller [29] and Mayhem [7] combine symbolic
execution with fuzzing techniques in order to reach deep
memory corruption bugs. These tools examine individual
execution paths for vulnerabilities. In contrast, HOOPER
identiﬁes HPE-enabling vulnerabilities by examining data
ﬂows across multiple execution paths.
8 Conclusion
The semantic gap at the interface between TEEs (e.g.,
TrustZone Secure World) and external logic (e.g., Normal
World OS) can introduce signiﬁcant Horizontal Privilege
Escalations and other security vulnerabilities. Properly
bridging the gap requires careful coordination and co-design
between the TEE and external logic. This is not always easy,
due to the nature of today’s software delivery chains involving
numerous unrelated principals.
In TrustZone, multi-tenancy combined with statefulness in
TEE-hosted code leads to signiﬁcant HPEs leaking sensitive
session data and providing cryptographic oracles, even in
the absence of code execution vulnerabilities in TEE logic.
Mitigations bridging this gap require tight coordination
between the kernels in both worlds.
Acknowledgments
We thank Lee Harrison and Hayawardh Vijayakumar for
providing us with insight regarding the inner-workings of
TZOSes and TAs. We thank Zhongjie Wang for his guidance
in using symbolic execution. We thank Michael Grace for his
suggestions in improving the presentation of our work. We
thank our shepherd Adam Bates and the anonymous reviewers
for their helpful feedback. The authors would also like to thank
Samsung Research America and the Ofﬁce of Naval Research
who funded parts of this work through award N000141812043.
References
[1] ARM. Bulding a secure system using trustzone technol-
ogy. ARM Technical White Paper (2009).
[2] AZAB, A. M., NING, P., SHAH, J., CHEN, Q.,
BHUTKAR, R., GANESH, G., MA, J., AND SHEN, W.
Hypervision across worlds: Real-time kernel protection
from the arm trustzone secure world. In Proceedings of
the 2014 ACM SIGSAC Conference on Computer and
Communications Security (New York, NY, USA, 2014),
CCS ’14, ACM, pp. 90–102.
[3] BENIAMINI, G. TrustZone Kernel Privilege Escala-
tion. http://bits-please.blogspot.com/2016/06/
trustzone-kernel-privilege-escalation.html.
[4] BERARD, D.
exploitation.
exploit/kinibi-tee-trusted-application-
exploitation.html.
Kinibi TEE: Trusted Application
https://www.synacktiv.com/posts/
[5] BUGIEL, S., DAVI, L., DMITRIENKO, A., FISCHER, T.,
SADEGHI, A.-R., AND SHASTRY, B. Towards taming
privilege-escalation attacks on android. In NDSS (2012),
vol. 17, Citeseer, p. 19.
[6] CERDEIRA, D., SANTOS, N., FONSECA, P., AND
PINTO, S. Sok: Understanding the prevailing security
vulnerabilities in trustzone-assisted tee systems. In Pro-
ceedings of the IEEE Symposium on Security and Privacy
2020 (01 2020).
[7] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUM-
LEY, D. Unleashing mayhem on binary code. In 2012
IEEE Symposium on Security and Privacy (May 2012),
pp. 380–394.
[8] EAGLE, C. The IDA Pro Book: The Unofﬁcial Guide
to the World’s Most Popular Disassembler. No Starch
Press, USA, 2008.
[9] GE, X., VIJAYAKUMAR, H., AND JAEGER, T. Sprobes:
Enforcing kernel code integrity on the trustzone architec-
ture. CoRR abs/1410.7747 (2014).
[10] GLOBALPLATFORM. Tee client api speciﬁcation v1.0.
https://globalplatform.org/specslibrary/
tee-client-api-specification/.
[11] HARDY, N. The confused deputy: (or why capabilities
might have been invented). SIGOPS Oper. Syst. Rev. 22,
4 (Oct. 1988), 36–38.
[12] HARRISON, L., VIJAYAKUMAR, H., PADHYE, R., SEN,
K., AND GRACE, M. Partemu: Enabling dynamic analy-
sis of real-world trustzone software using emulation. In
Proceedings of the 29th USENIX Security Symposium
(USENIX Security 2020) (To Appear) (August 2020).
[13] KOMAROMY, D.
Unbox Your Phone.
https:
//medium.com/taszksec/unbox-your-phone-
part-iii-7436ffaff7c7, 2008.
USENIX Association
29th USENIX Security Symposium    839
[14] LAUER, H., SAKZAD, A., RUDOLPH, C., AND NEPAL,
S. Bootstrapping trust in a “trusted” virtualized platform.
In Proceedings of the 1st ACM Workshop on Workshop on
Cyber-Security Arms Race (New York, NY, USA, 2019),
CYSARM’19, Association for Computing Machinery,
p. 11–22.
[15] LI, W., LI, H., CHEN, H., AND XIA, Y. Adattester: Se-
cure online mobile advertisement attestation using trust-
zone. In Proceedings of the 13th Annual International
Conference on Mobile Systems, Applications, and Ser-
vices (New York, NY, USA, 2015), MobiSys ’15, ACM,
pp. 75–88.
[16] LI, X., HU, H., BAI, G., JIA, Y., LIANG, Z., AND SAX-
ENA, P. DroidVault: A trusted data vault for android
devices. In 2014 19th International Conference on En-
gineering of Complex Computer Systems (Aug. 2014),
IEEE.
[17] LIU, D., AND COX, L. P. VeriUI. In Proceedings of
the 15th Workshop on Mobile Computing Systems and
Applications - HotMobile’14 (2014), ACM Press.
[18] MACHIRY, A., GUSTAFSON, E., SPENSKY, C., SALLS,
C., STEPHENS, N., WANG, R., BIANCHI, A., CHOE,
Y. R., KRUEGEL, C., AND VIGNA, G. BOOMERANG:
Exploiting the semantic gap in trusted execution environ-
ments. In Proceedings 2017 Network and Distributed
System Security Symposium (2017), Internet Society.
[19] MITRE. Common weakness enumeration. https://
cwe.mitre.org/.
[20] MONSHIZADEH, M., NALDURG, P., AND VENKATAKR-
ISHNAN, V. N. Mace: Detecting privilege escalation
vulnerabilities in web applications. In Proceedings of
the 2014 ACM SIGSAC Conference on Computer and
Communications Security (New York, NY, USA, 2014),
CCS ’14, ACM, pp. 690–701.
[21] MOR, R. X session management library version
https://www.x.org/releases/X11R7.7/doc/
1.0.
libSM/SMlib.html, 1993.
[22] PARNO, B. Bootstrapping trust in a “trusted” platform.
In Proceedings of the 3rd Conference on Hot Topics in
Security (USA, 2008), HOTSEC’08, USENIX Associa-
tion.
[23] RESHETOVA, E., BONAZZI, F., AND ASOKAN, N.
Selint: An seandroid policy analysis tool. Proceedings of
the 3rd International Conference on Information Systems
Security and Privacy (2017).
[24] RESHETOVA, E., BONAZZI, F., NYMAN, T., BOR-
GAONKAR, R., AND ASOKAN, N. Characterizing sean-
droid policies in the wild. CoRR abs/1510.05497 (2015).
[25] ROSENBERG, D. Reﬂections on Trusting TrustZone.
BlackHat USA (2014).
[26] SALTZER, J. H., AND SCHROEDER, M. D. The protec-
tion of information in computer systems. Proceedings of
the IEEE 63, 9 (1975), 1278–1308.
[27] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C.,
KRUEGEL, C., AND VIGNA, G. Firmalice - Automatic
Detection of Authentication Bypass Vulnerabilities in
Binary Firmware. In Proceedings of the 2015 Network
and Distributed System Security Symposium (2015).
[28] SHOSHITAISHVILI, Y., WANG, R., SALLS, C.,
STEPHENS, N., POLINO, M., DUTCHER, A., GROSEN,
J., FENG, S., HAUSER, C., KRUEGEL, C., AND VIGNA,
G. Sok: (state of) the art of war: Offensive techniques in
binary analysis.
[29] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER,
A., WANG, R., CORBETTA, J., SHOSHITAISHVILI, Y.,
KRUEGEL, C., AND VIGNA, G. Driller: Augmenting
Fuzzing Through Selective Symbolic Execution. In Pro-
ceedings of the 2016 Network and Distributed System
Security Symposium (2016).
[30] SUN, H., SUN, K., WANG, Y., AND JING, J. TrustOTP.
In Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security - CCS’15
(2015), ACM Press.
[31] SUN, H., SUN, K., WANG, Y., JING, J., AND JAJODIA,
S. TrustDump: Reliable memory acquisition on smart-
phones. In Computer Security - ESORICS 2014. Springer
International Publishing, 2014, pp. 202–218.
[32] TRUSTED COMPUTING GROUP.
platform module main speciﬁcation.
//trustedcomputinggroup.org/resource/tpm-
main-specification/, 2007.
Trusted
https:
[33] ZHENG, X., YANG, L., MA, J., SHI, G., AND MENG, D.
TrustPAY: Trusted mobile payment on security enhanced
ARM TrustZone platforms. In 2016 IEEE Symposium
on Computers and Communication (ISCC) (June 2016),
IEEE.
[34] ZHOU, X., LEE, Y., ZHANG, N., NAVEED, M., AND
WANG, X. The peril of fragmentation: Security hazards
in android device driver customizations. Proceedings
- IEEE Symposium on Security and Privacy (11 2014),
409–423.
840    29th USENIX Security Symposium
USENIX Association