V. IMPLEMENTATION
We have implemented a prototype of Talos. Due to the
fact that Talos needs a program’s call graph to ﬁnd locations
for SWRR insertion, our prototype instruments a program in
two phases, as shown in Figure 3. The ﬁrst phase analyzes
the source code of the program and is implemented as an
625625
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
return config_insert_values_internal(....);
if (....) {
return HANDLER_ERROR;
log_error_write(....); // error logging
return -1;
1 int config_insert_values_global(....) {
2 ....
3
4 }
5
6 int config_insert_values_internal(....) {
7 ....
8
9
10
11
}
12 ....
13 }
14
15 SETDEFAULTS_FUNC(mod_secdownload_set_defaults) {
16 ....
17
18
19
}
20 ....
21 }
22
23 int http_request_parse(....) {
24 ....
25
26
27
28
}
29 ....
30 }
if (0 != config_insert_values_global(....)) {
if (0 != request_check_hostname(....)) {
log_error_write(....); // error logging
return 0;
Listing 4. Error propagation example from lighttpd
Source 
Code 
Annotations 
Analyze 
Source Code 
Call Graph 
Add SWRRs to 
Source Code 
Source Code 
with SWRRs 
Control 
Dependency 
Fig. 3. Workﬂow of Talos
analysis pass of LLVM using 1,823 lines of C/C++ code,
while the second phase adds SWRRs to the source code and
is implemented using 1,852 lines of Python code. In the ﬁrst
phase, Talos takes as input the source code of a program and
the annotation of the error logging functions of the program,
analyzes the source code using static analysis, and outputs: the
program’s call graph, the control dependency of each statement
of the program, whether each statement is followed by a return,
the start line number of each function, and the line number
of each statement. In the second phase, it adds SWRRs to as
many functions as possible in the source code based on the
output of the ﬁrst phase.
During our implementation, we found that function calls
using function pointers are frequently used by applications,
particularly to invoke the functionality of loadable modules.
Loadable modules are often used as a conﬁguration work-
around for vulnerabilities, so we expect that SWRRs should
work for these as well. We note that these kinds of function
calls usually use function pointers embedded as ﬁelds of some
C/C++ structures. To identify the caller and callee of a function
call using a function pointer, we match a call to a function
pointer ﬁeld of a structure, by identifying the assignment or
626626
initialization of the same ﬁeld. This method is imprecise, but
we did not notice any issue with it in practice.
To identify error-handling code that can be used for SWRRs,
we need to ﬁnd out whether a call to an error logging function
is followed by a return statement. At ﬁrst, we tried to label
such cases when a call is followed by a return statement within
the same basic block of the call. However, we found that
LLVM merges all occurrences of return statements within a
function into a single return at the end of the function and
replaces all other return statements with branch statements.
Sometimes a return is translated into a chain of unconditional
branch statements that lead to the only return statement of
a function. Hence a call to an error logging function and
the return statement following it sometimes do not belong
to the same basic block. Furthermore, some applications’
error logging function is actually a macro deﬁned as an if
statement, so the call to the error logging function and the
return statement belong to two different basic blocks. As a
consequence, we label a call as being followed by a return
when the call is on a path that unconditionally leads to a
return statement.
VI. EVALUATION
We evaluate how well SWRRs created by Talos meet the
three objectives we laid out in Section III. First, we evaluate
the security of SWRRs by testing them against 11 real-world
vulnerabilities in ﬁve popular applications: two web servers, a
web cache/proxy, an ftp server, and one database application.
We then evaluate the effective coverage by measuring the basic
coverage of SWRRs and the rate of unobtrusive SWRRs. We
deﬁne “unobtrusive SWRR” as an SWRR that only disables
minor application functionality while leaving the majority of
an application’s functionality intact, much like a conﬁguration
workaround, and an “obtrusive SWRR” as an SWRR that
disables the majority of an application’s functionality, making
it unusable. Thus, the basic coverage of SWRRs is reduced
to their effective coverage by the percentage of SWRRs that
are obtrusive. Finally, we evaluate the performance cost of
SWRRs when using in-place deployment.
All our evaluations were conducted on a 4-core 3.4GHz
Intel Core i7-2600 workstation, with 16GB RAM, 3TB of
SATA hard drive and running 64-bit Ubuntu 12.04.
A. Security
This evaluation answers the question: “Do SWRRs suc-
cessfully neutralize vulnerabilities without introducing new
vulnerabilities?” To test an SWRR, we need one vulnerability
that is covered by the SWRR; to check whether an SWRR
neutralizes a vulnerability, we also need an exploit for that
vulnerability. These two requirements limit the number of
SWRRs that can be evaluated in detail, and it also requires
non-trivial manual effort to check whether new vulnerabilities
are introduced. Nevertheless, we make our best effort
to
ﬁnd as many vulnerabilities as possible that could be used
for this evaluation. The resulting 11 vulnerabilities, disclosed
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
between 2010 and 2015, are used to evaluate the ﬁve popular
applications as shown in Table IV.
To validate security, we check if the SWRR neutralizing
the vulnerability successfully thwarts an exploit of the vul-
nerability. To test whether the exploit is neutralized or not,
we either use a published exploit or create a proof-of-concept
exploit if no published exploit is available. We verify that
the exploit works on the unprotected application and then
enable protection using the appropriate SWRR option and try
the exploit again. If the exploit fails, we say the SWRR has
protected the security of the application.
We can also test whether an SWRR is unobtrusive or
not. To do this, we ﬁrst classify the functionality of each
application into two categories, major and minor, by studying
its user documentation. We then design two sets of test inputs,
major and minor, to exercise as much the application’s major
functionality and minor functionality as possible. For each
application, we make use of the existing test suite of an
application if such a test suite is available. Otherwise we
make our best effort to create our own sets of test inputs and
test suite. We then use this test suite to determine if no or
only minor functionality is lost, in which case the SWRR is
unobtrusive; if major functionality is also lost, the SWRR is
obtrusive.
Our results are summarized in Table IV, which also gives
the heuristic used to instrument the SWRR that neutralizes
the vulnerability, as well as whether availability is violated.
Column “Security?” shows whether the exploit against a
vulnerability is successfully neutralized by SWRR without in-
troducing new vulnerabilities. Column “Unobtrusive?” shows
whether the SWRR is unobtrusive. SWRRs successfully neu-
tralize the exploits for all 11 vulnerabilities and in 8 cases there
is no or only minor loss of functionality, making these SWRRs
unobtrusive. We provide details on all 11 cases below. For the
3 cases where a posted conﬁguration workaround also exists
for the vulnerability, we compare the SWRRs unobtrusiveness
with that of the conﬁguration workaround.
lighttpd - CVE-2011-4362. This vulnerability allows a remote
attacker to cause an out-of-bounds memory error [11]. The
function base64_decode takes an untrusted char* and
performs a base 64 decode during HTTP basic authentication
by using each character in the untrusted string as a lookup
into a table in memory. As char* is signed, an attacker
could specify negative values and read memory from outside
of the table. base64_decode has error-handling code that
returns NULL, so Talos instruments the function with an
SWRR that returns NULL, which successfully neutralizes the
vulnerability. Since base64 decoding is disabled, all requests
for basic HTTP authentication fail as if the password failed
to decode properly. However, lighttpd functions completely
normally (including other forms of authentication) as long
as basic HTTP authentication is not used. This imposes less
loss of functionality than the posted conﬁguration workaround,
which disables all forms of authentication. Thus, Talos pro-
vides security and provides an unobtrusive SWRR for the
TABLE IV
SECURITY OF SWRRS.
App.
lighttpd
lighttpd
lighttpd
CVE ID
CVE-2011-4362
CVE-2012-5533
CVE-2014-2323
apache
CVE-2014-0226
squid
squid
sqlite
sqlite
CVE-2009-0478
CVE-2014-3609
CVE-2015-3414
OSVDB-119730
proftpd
OSVDB-69562
proftpd
CVE-2010-3867
proftpd
CVE-2015-3306
Heuristics
NULL
Return
Indirect
Error-
Propagation
Error-
Logging
Indirect
Error-
Logging
Error-
Propagation
Error-
Logging
Error-
Propagation
Error-
Logging
Error-
Logging
Security? Unobtrusive?
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
No
Yes
No
Yes
Yes
Yes
Yes
Yes
Yes
remote
attacker
to cause
loop via
an inﬁnite
vulnerability.
lighttpd - CVE-2012-5533. This vulnerability allows
a
a
func-
specially crafted HTTP connection header. The
tion http_request_split_value splits
the ﬁelds
in an HTTP connection header
into an array, but
can get
into an inﬁnite loop due to the vulnerabil-
ity. http_request_split_value does not have error-
handling code, but its caller does have error-handling code
that returns 0; Talos instruments the caller and successfully
neutralizes the vulnerability, however, the side-effects of this
are severe, as it causes all HTTP requests to be denied, because
the caller is the main function that processes HTTP requests.
As a result, while the SWRR provides security, because the
SWRR is enabled for all HTTP requests, lighttpd is unable
to respond to any HTTP request so there is a major loss of
functionality.
lighttpd - CVE-2014-2323. This vulnerability allows a remote
attacker to execute an arbitrary SQL command via a specially
crafted hostname in the host header of an HTTP request. The
vulnerable function request_check_hostname checks
the validity of hostnames, but it fails to deny hostnames that
contain SQL commands. The caller of the function has an
error path that calls an error logging function when the return
value of the function is not zero, so Talos instruments the
function with an SWRR that returns 1, which successfully
neutralizes the vulnerability. As a side-effect of activating the
associated SWRR, any HTTP request that speciﬁes a hostname
(as opposed to an IP address) will receive a “400 - Bad
Request” error response. While the SWRR provides security,
because the vulnerable code is used for all HTTP requests
with a hostname, which is in most cases the vast majority of
requests, there is a major loss of functionality.
apache httpd - CVE-2014-0226. A race condition in the
627627
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:48 UTC from IEEE Xplore.  Restrictions apply. 
mod_status module allows an attacker to retrieve sensitive
information [3]. The function status_handler displays
administrative information about a web server, such as the
web server’s performance and overhead, as a web site. It does
not synchronize the use of data that can be modiﬁed concur-
rently by a different thread. status_handler has error-
handling code that calls an error logging function and returns
HTTP_INTERNAL_SERVER_ERROR, so Talos instruments
the function with an SWRR that returns the error code, which
successfully neutralizes the vulnerability. As a side-effect, all
requests to the mod_status module return an error because
status_handler is called in response to all requests to
the module, but
the application will continue to execute
and respond to other requests normally. This vulnerability
has a posted conﬁguration workaround, which disables the
entire mod_status module, with the exact same loss of
functionality as Talos’ automatically generated SWRR. As a
result, Talos provides security with an unobtrusive SWRR for