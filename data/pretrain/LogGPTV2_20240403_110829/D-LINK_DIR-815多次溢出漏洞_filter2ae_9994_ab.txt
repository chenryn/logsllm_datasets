       offset = source.find(pattern)
       if offset != -1: # MBS
           print "[*] Exact match at offset %d" % offset
       else:
           print
           "[*] No exact matches, looking for likely candidates..."
           reverse = list(pattern)
           reverse.reverse()
           pattern = "".join(reverse)
           offset = source.find(pattern)
           if offset != -1:
               print "[+] Possible match at offset %d (adjusted another-endian)" % offset
       print "[+] take time: %.4f s" % (time.time() - timeStart)
    def mian():
       '''
       parse argument
       '''
       parser = argparse.ArgumentParser()
       parser.add_argument('-s', '--search', help='search for pattern')
       parser.add_argument('-c', '--create', help='create a pattern',action='store_true')
       parser.add_argument('-f','--file',help='output file name',default='patternShell.txt')
       parser.add_argument('-l', '--length', help='length of pattern code',type=int, default=1024)
       args = parser.parse_args()
       '''
       save all argument
       '''
       length= args.length
       output = args.file
       createCode = args.create
       searchCode = args.search
       if createCode and (0 <args.length <= 26*26*10):
           generate(length,output)
       elif searchCode and (0 <args.length <=26*26*10):
           patternMatch(searchCode,length)
       else:
           print '[-] You shoud chices from [-c -s]'
           print '[-] Pattern length must be less than 6760'
           print 'more help: pattern.py -h'
    if __name__ == "__main__":
       if __name__ == '__main__':
           mian()
3.3根据构造内容分析`栈buff起始位置`和`$ra位置`
可以在附近多下几个断点，然后观察栈内容数据。
`坑点1：`观察数据时候一定要对指定内容同步上，不然可能调着调着数据你都找不到。
`坑点2：`
你看数据内存中的内容的时候可能出现一段问号，基本就能判定处问号的起始和终止就是我们要找的位置，注释IDA对内存读写的保护机制，IDA会提示的，注意仔细看。（我没遇到，参考其他文章时看到介绍了，所以这里也提示下大家，可以通过手动去恢复显示，这里找不到链接了）
##
我构造的内容是从123开始，去找对应位置，即buff起始，并去找到栈上123对应起始位置，栈上的地址才是我们需要的，因为最终算的偏移是栈上的$RA位置 减去
缓存起始位置。
又添加了一张下图，为了让大家更好看清栈中内容，是我后面调试匹配的（内容我更换了，思路一样的）
找储存$RA位置
自动确定偏移：
    python patternLocOffset.py -s 0x38694237 -l 2000
手动：保存$RA栈的地址 - 读入buff起始的位置
`坑点3：`由于之前file缺点了大小端，所以如果之前没分析，找偏移时候还需两种模式计算偏移，然后核对。
经过验证，真正的漏洞点是第二个sprintf函数，找偏移类似以上过程。
`原因：`由于不是在真实环境下，里面缺少了相关文件，即偏移位置不同导致流程没在精心构造的步骤执行导致第一处sprintf利用rop失败。
# 构造ROP
无论是第一个sprintf还是第二个sprintf函数发生溢出，分析的流程是一样的，`定位漏洞位置`和`确定偏移值`。
所以我们可以先来构造ROP。主要的攻击目的是通过调用system(‘/bin/sh’)来getshell，system函数在libc.so中找，参数’/bin/sh’首先放入栈中，然后利用gadget将栈上的’/bin/sh’传入a0寄存器，再调用system函数即可。
下面我们通过gdb-multiarch+QEMU动态调试分析。
## gdb-multiarch+QEMU动态调试分析验证
1，通过gdb指定脚本调试（避免重复输入，重复造轮子浪费时间）
`dbgscript脚本内容：`
    gdb-multiarch htdocs/cgibin #一定要加载文件htdocs/cgibin不然vmmap得不到结果
    set architecture mips
    target remote :1234
    b *0x409A54 #hedwigcgi_main()函数返回jr ra处，先前IDA静态分析可获得此地址
    c
    vmmap
启动执行命令：
`gdb-multiarch htdocs/cgibin -x dbgscript`
-x是指定要执行的命令文件
后面找gadget利用插件`mipsrop`请参考：[如何寻找gadget及分析](https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/)
这里补充点：第一次gadget
所以下面是a0=$(sp+0x170-0x160)
关于ROP：
## cache incoherency问题（影响EXP执行）
mips的exp编写中还有一个问题就是cache incoherency。MIPS
CPUs有两个独立的cache：指令cache和数据cache。指令和数据分别在两个不同的缓存中。当缓存满了，会触发flush，将数据写回到主内存。攻击者的攻击payload通常会被应用当做数据来处理，存储在数据缓存中。当payload触发漏洞，劫持程序执行流程的时候，会去执行内存中的shellcode。如果数据缓存没有触发flush的话，shellcode依然存储在缓存中，而没有写入主内存。这会导致程序执行了本该存储shellcode的地址处随机的代码，导致不可预知的后果。
最简单可靠的让缓存数据写入内存的方式是调用一个堵塞函数。比如sleep(1)或者其他类似的函数。sleep的过程中，处理器会切换上下文让给其他正在执行的程序，缓存会自动执行flush。
参考：[cache
incoherency](http://xdxd.love/2016/12/09/%E4%B8%80%E4%B8%AAmips%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8/)
## 坏字符问题
构造exp时有可能的坏字符：0x20（空格）、0x00（结束符）、0x3a（冒号）、0x3f（问号）、0x3b（分号）、0x0a(\n换行符)等。具体还要看程序如何处理以及转义。
由于qemu用户模式下仿真执行程序，环境各种因素影响导致执行shell失败，下面我们使用`qemu系统模式`仿真路由器真实环境进行溢出。
# qemu系统模式
这里主要是为了在qemu虚拟机中重现http服务。通过查看文件系统中的`/bin、/sbin、/usr/bin、/usr/sbin`可以知道`/sbin/httpd`应该是用于监听web端口的http服务，同时查看`/htdocs/web`文件夹下的cgi文件和php文件，可以了解到接受到的数据通过php+cgi来处理并返回客户端。
1，自己按配置所需写入新建conf文件内容。
`find ./ -name '*http*'`找到web配置文件httpcfg.php。
查看内容后分析出`httpcfg.php`文件的作用是生成供所需服务的`配置文件`的内容，所以我们参照里面内容，自己创建一个conf作为生成的`配置文件`，填充我们所需的内容。
`conf文件内容：`
    Umask 026
    PIDFile /var/run/httpd.pid
    LogGMT On  #开启log
    ErrorLog /log #log文件
    Tuning
    {
        NumConnections 15
        BufSize 12288
        InputBufSize 4096
        ScriptBufSize 4096
        NumHeaders 100
        Timeout 60
        ScriptTimeout 60
    }
    Control
    {
        Types
        {
            text/html    { html htm }
            text/xml    { xml }
            text/plain    { txt }
            image/gif    { gif }
            image/jpeg    { jpg }
            text/css    { css }
            application/octet-stream { * }