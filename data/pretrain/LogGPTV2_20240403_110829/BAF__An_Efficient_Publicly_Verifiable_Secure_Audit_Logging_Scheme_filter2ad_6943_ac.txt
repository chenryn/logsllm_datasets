)
,
,
,
,
,
1
1
0
0
M
,
,
(
)
2
=
1,0
0,0
pmod
σσσ
+
1
2 σba
0,1
σ−
1
(
(||
DH
L
L
H
⎯⎯ →⎯
b
,
(
a
−
1
=σ
2-L0,
−
L
b
L
−
1
b
L
L
−
)
2
1
,
1
1
2) Verify the aggregate signature :
Gσ
−
1
,0
DH
?
==
))
Aj
(||
+
n
L
2
(
j
j
+
B
)
j
}
1
L-
∑
(
=
0
j
holds,
equation 
 the
If
Otherwise
it 
returns
failure.
BAF.AVer 
returns
success,
+
n
))
b
−
1
L
mod
p
+−
1
 ,
L
1) Individual Signature:
2) BAF.Upd:
−
L
⎯⎯ →⎯
a
(a  
b,
3) Signature Aggregation:
a
−
1
delete
1-L1-L
σ
,0
H
L
L
1
1
a
and
).
−
1
L
=
σ
2-L0,
+
σ
L
−
1
mod
p
Fig. 1. BAF algorithms
a) Compute the individual signature σl as σl = al ∗
b) Fold σl into σ0,l−1 as σ0,l = σ0,l−1 + σl mod p,
H2(Dl||(n + l)) + bl mod p.
where l > 0 and σ0,0 = σ0 is a known value.
from the memory and invoke
c) Delete σ0,l−1
BAF.U pd(al, bl).
4) BAF.AVer(D0, . . . , Dl, σ0,l, IDi): When the veriﬁer re-
ceives data items and their associated aggregate signa-
ture from IDi, she ﬁrst retrieves public keys (Aj, Bj)
for j = 0, . . . , l and n of IDi. She then veriﬁes σ0,l
?==
via the BAF veriﬁcation equation as follows: σ0,lG
(cid:2)
j=0(H2(Dj||(n + j))Aj + Bj). If the equation holds,
l
BAF.AV er returns success. Otherwise it returns failure.
Figure 1 illustrates the BAF algorithms.
IV. SECURITY ANALYSIS
BAF is proven secure in the following theorem based on
the BAF security model given in Deﬁnition 3, as long as
Assumption 1 holds.
Theorem 1 Assume there exists a PPT bounded adversary A
that produces an existential forgery against BAF, based on
(cid:3) ≥ /L.
(cid:3) = τ + O(qs) with probability 
the BAF security model deﬁned in Deﬁnition 3 instantiated
for L time periods. Assume that A makes at most qs signature
queries to a BAF signing oracle for this forgery, and eventually
succeeds in time τ with probability . Then we can construct
a simulator B that solves ECDLP by extracting private key
(ac, bc) from the challenge public key (Ac = acG, Bc = bcG)
in time τ
Proof: Assume that forger A succeeds with probability 
in time τ. Then there exists a simulator B that extracts
the target private key (ac, bc) from the challenge public key
(Ac = acG, Bc = bcG) by using A as a subroutine, where
subscript c denotes the challenge keys. If A succeeds forging
with probability  in time τ, B succeeds solving ECDLP with
a lower bound at /L within in time ∼ τ. We consider the
following game, in which B is given access to a BAF signing
oracle O and interacts with A as follows:
1) Setup. First, simulator B is given the challenge public
key (Ac, Bc) and n R← Fp. B then randomly chooses a
forgery time period tw, for which A is supposed to out-
put her forgery, where 0 ≤ w  for each
computed message-signature pair.
3) Break-in. When A chooses to break-in tT , she requests
secret key of tT from B. If tT ≤ tw, B aborts.
Otherwise, B provides A with (aT , bT ).
4) Forgery. Eventually, A halts and outputs a forgery σ
∗
(cid:2)
0,t
∗
∗
∗
∗
on (D
(cid:2)) under distinct public keys (A
0, B
0, . . . , D
(cid:2)). Forgery of A is valid if σ
0
∗
∗
t
is non-
(cid:2), B
, . . . , A
t
t
trivial and valid. That is,
(cid:3) = w)∧ (D
a) (t
and
b) BAF.AV er(D
(cid:2) (cid:9)= L.Dw)∧ (A
∗
t
∗
∗
∗
(cid:2), σ
0, . . . , D
0,t
t
(cid:3)
(cid:3)
j−1, B
0, . . . , A
(cid:2), IDA) = success.
∗
(cid:2) = Ac, B
t
(cid:3)
0G, . . . , A
∗
(cid:2) = Bc);
t
(cid:3)
0 = a
(cid:3)
0G, B
(cid:3)
0 = b
(cid:3)
0, B
∗
(cid:2)
0,t
2Note that BAF.ASig never uses the same blinding key pair to sign two
distinct messages, since BAF.U pd immediately updates and then deletes the
blind key pair after each signature operation.
− (cid:2)
If both of the above conditions are satisﬁed, B proceeds
to solve the ECDLP for the challenge public key (Ac, Bc)
as follows: B ﬁrst isolates σ
∗
=
w from σ
) mod p (B either knows the required secret
∗
σ
j in L). Since conditions (a)
0,w
∗
key, or maintains the queried σ
||(n + w))Ac + Bc holds.
∗
wG = H2(D
and (b) are satisﬁed, σ
B then fetches σw = σc from L and ﬁnds (ac, bc) by solving
the following modular linear equations:
w−1
j=0 (σ
(cid:2) as σ
= σ
∗
0,w
∗
0,t