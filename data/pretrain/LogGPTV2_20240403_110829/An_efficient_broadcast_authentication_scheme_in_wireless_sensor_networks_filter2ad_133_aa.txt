title:An efficient broadcast authentication scheme in wireless sensor networks
author:Shang-Ming Chang and
Shiuhpyng Shieh and
Warren W. Lin and
Chih-Ming Hsieh
An Efficient Broadcast Authentication Scheme 
in Wireless Sensor Networks 
Shang-Ming Chang   Shiuhpyng Shieh   Warren W. Lin 
{changsm, ssp, warren}@csie.nctu.edu.tw 
Chih-Ming Hsieh 
PI:EMAIL
National Chiao Tung University / University of California, Berkeley* 
1001 Ta Hsueh Road 
Hsinchu, Taiwan 300 
Institute for Information Industry 
11th Floor, 106 Ho-ping East Road, Section 2 
Taipei, Taiwan 106 
ABSTRACT
A  broadcast  authentication  mechanism  is  important  in  wireless 
sensor  networks,  assuring  receivers  of  a  packet’s  validity.  To 
provide  authentication,  some  researchers  utilize  one  way  key 
chains and delayed disclosure of keys; however, such an approach 
time  synchronization  and  delayed  authentication. 
requires 
Another 
technique 
schemes. 
Unfortunately,  such  schemes  suffer  from  large  key  sizes  and  a 
limited number of uses per key. To cope with these problems, we 
propose  an  efficient,  one-time 
signature-based  broadcast 
authentication  scheme  for  wireless  sensor  networks  that  reduces 
storage usage and includes a re-keying mechanism.  
signature 
uses 
one-time 
Keywords
Wireless  sensor  networks,  broadcast,  authentication,  one  time 
signature, key renewal. 
1. INTRODUCTION
A  wireless  sensor  network  (WSN)  can  cheaply  monitor  an 
environment for diverse industries, such as healthcare, military, or 
home [23], [24], [25], [26]. A WSN typically consists of several 
base stations and thousands of  sensor nodes, which are resource 
limited  devices  with 
low  processing,  energy,  and  storage 
capabilities. Distributing data through wireless communication is 
also bandwidth limited. 
Broadcast  authentication  is  a  basic  and  important  security 
mechanism 
is  a  natural 
communication  method  in  a  wireless  environment.  When  base 
stations  want  to  send  commands  to  thousands  of  sensor  nodes, 
broadcasting is a much more efficient method than unicasting to 
in  a  WSN  because  broadcast 
This work is supported in part by the National Science Council (NSC), 
the  Institute  for  Information  Industry  (III),  the  Taiwan  Information 
Security Center at NCTU (TWISC@NCTU), and the Team for Research 
in Ubiquitous Secure Technology at UC Berkeley (TRUST). 
* Shiuhpyng Shieh is currently a visiting professor of the University of 
California, Berkeley. 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ASIACCS’06, March 21–24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003…$5.00. 

each node individually. 
A  message  authentication  code  (MAC)  is  an  authentication  tag 
derived by applying an authentication scheme and a secret key to 
a  message.  MAC  is  an  efficient  symmetric  cryptographic 
primitive  for  two-party  authentication;  however,  MAC  is  not 
suitable 
for  broadcast  communication  without  additional 
modification. Because the sender and its receivers share the same 
secret  key,  any  one  of  the  receivers  can  impersonate  the  sender 
and  forge  messages  to  other  receivers.  That  is,  both  sender  and 
receivers  can  sign  messages.  This  problem  stems  from  the 
symmetric property of MAC. 
Therefore, to achieve authenticated broadcasts, it is necessary to 
establish an asymmetric mechanism in which only the sender can 
sign  messages,  and  the  receivers  can  only  verify  messages. 
However, asymmetric cryptographic mechanisms like RSA digital 
signatures are significantly more computationally expensive than 
symmetric ones. It is impractical to use them in a resource limited 
sensor network. A possible approach is to use efficient symmetric 
primitives  as  a  tool  to  design  a  scheme  with  asymmetric 
properties.
1.1 Requirements
In  addition  to  the  asymmetric  mechanism  that  is  needed  for 
broadcast  authentication,  designing  an  efficient  broadcast 
authentication  scheme  for  wireless  sensor  networks  still  faces 
many challenges. 
1. Robust 
to  packet 
loss.  The  wireless  communication 
environment is not reliable; therefore, the scheme should be 
able to cope with the loss of packets during transmission. 
Short  authentication  latency.  Many  WSN  applications  are 
real time applications, e.g. the tracking of enemy movements 
on a battlefield. To authenticate real time data, the maximum 
number of additional packets that need to be received before 
a packet can be authenticated should be small. 
Individual  authentication.  The  receiver  should  verify  the 
received  packets  individually  without  depending  on  other 
packets; otherwise, the failure to verify a packet prevents the 
verification of subsequent packets. 
Low computation cost. Receivers have limited computation 
power.  Thus,  they  should  only  perform  a  small  number  of 
operations to verify a packet. 
Low communication overhead. Because a WSN is restricted 
in  bandwidth,  the  number  of  bytes  per  packet  used  for 
authentication should be small. 
Low storage requirement. Since the storage space of sensor 
nodes  is  limited,  some  data  for  authentication  like  key 
2.
3.
4.
5.
6.
material  and  signatures  stored  in  memory  cannot  be  too 
large.
Ideally,  we  would  like  a  scheme  that  recovers  from  any  loss  of 
packets,  has  no  authentication 
individually 
authenticate  packets,  has  negligible  overhead,  and  has  a 
computation  cost  similar 
in  symmetric 
cryptographic  primitives.  In  practice,  such  a  perfect  scheme  is 
difficult to achieve, and a compromise needs to be found between 
these requirements. 
latency,  can 
to  what 
is  found 
1.2 Related Work 
Previously  proposed  broadcast  authentication  schemes  roughly 
divide  into  two  categories  by  the  cryptographic  primitives  they 
use. The first type is a signature amortization scheme that utilizes 
asymmetric  primitives  and  distributes  the  cost  of  the  signature 
over a block of packets. The second type is a MAC-based scheme 
which  uses  symmetric  primitives  to  design  an  elaborate  scheme 
that achieves asymmetry. 
EMSS  [20],  hash  trees  [22],  hash  chains  [11],  and  expander 
graphs  [21]  are  examples  of  proposed  signature  amortization 
schemes whose main impediment is packet loss. Recently, some 
researchers  [1],  [4],  [5],  [14]  suggest  using  erasure  codes  [15], 
[16], [17] to deal with packet loss. Unfortunately, these schemes 
suffer  pollution  attacks  [5],  a  type  of  Denial-of-Service  attack 
aimed  at  the  erasure  decoding  procedure.  Distillation  codes  [5] 
solve  this  problem  at  the  expense  of  higher  communication 
overhead per packet. Furthermore, schemes employing distillation 
codes  require  receivers  to  buffer  the  packets  before  verifying 
signatures. As a consequence, receivers cannot authenticate each 
packet individually and require larger storage space. Because of 
this buffering problem, we will not use a signature amortization 
scheme.  Instead,  we  focus  on  using  an  efficient  symmetric 
cryptographic primitive to achieve asymmetry. 
Perrig  et  al.  proposed  a  very  efficient  time  based  stream 
authentication  scheme,  called  TESLA  [19],  and  also  provided  a 
tiny  version  for  WSN,  called  µTESLA  [18].  They  use  pure 
symmetric primitives to achieve asymmetric property by one way 
key  chain  and  delayed  disclosure.  However,  µTESLA  has  some 
constraints including time synchronization of the whole network, 
inefficient unicast of the initial trust, and delayed authentication. 
BiBa [2] and HORS [3] are one-time signature schemes using one 
way  functions.  They  are  more  efficient  signature  schemes  than 
public  key  signature  schemes  and  can  compare  favorably  with 
symmetric  primitives  because  the  main  computations  consist  of 
fast,  one-way  hash  function  evaluations.  One-time  signature 
schemes  have  some  drawbacks,  though,  such  as  the  limited 
number of signatures that one key pair can generate and the large 
size of the public key. Our proposed scheme improves upon the 
problem of large storage usage. 
In  the  next  section,  we  describe  the  system  architecture  and 
examine various cryptographic tools that our scheme utilizes. We 
detail our proposed scheme in section 3. In section 4, we provide 
a  security  analysis  of  our  scheme  and  also  compare  it  against 
other authentication schemes for WSNs. Finally, we conclude our 
findings in section 5. 

2. PRELIMINARIES
In this section, we first outline the system architecture. We then 
review some cryptographic primitives used for authentication and 
a  one-time  signature  called  HORS,  which  is  thus  far  the  fastest 
one-time signature scheme for signing and verifying. Our scheme 
can be viewed as an improvement of HORS. 
2.1 System Architecture 
A WSN may contain one or more base stations and hundreds or 
thousands of sensor nodes. Figure 2-1 is an example of a WSN.  
Compared  to  a  base  station,  a  sensor  node  is  very  limited  in 
resources.  For  simplification,  we  assume  that  each  broadcast 
message  originates  from  the  base  station.  A  sensor  node  can 
broadcast  messages  by  first  unicasting  the  message  to  the  base 
station, which then broadcasts the messages on the sensor node’s 
behalf. In addition, messages transmitted in a sensor network may 
reach  the  destination  directly  or  may  be  forwarded  by  some 
intermediate nodes; however, we do not distinguish between them 
in  our  scheme.  Furthermore,  we  assume  a  base  station  shares  a 
pairwise secret key with each sensor node, allowing each sensor 
node to securely receive the base station’s public key. 
Figure 2-1. Architecture of a WSN 
Table 2-1. SmartDust characteristics 
CPU 
Storage 
Communication 
Bandwidth 
Operating system 
OS code space 
Available code space 
8-bit 4MHz 
8KB instruction flash 
512 bytes RAM 
512 bytes EEPROM 
916 MHz radio 
10Kbps 
TinyOS 
3500 bytes 
4500 bytes 
Sensor  nodes  are  resource  limited  devices.  Our  sensor  node 
capabilities  are  modeled  after  SmartDust,  a  Berkeley  proposed 
sensor  node  prototype  whose  characteristics  are  shown  in  Table 
2-1.
2.2 Cryptographic Primitives 
In this section, we introduce various cryptographic primitives and 
schemes for authentication. 
2.2.1 Message Authentication Code 
A  message  authentication  code 
is  a  symmetric 
(MAC) 
cryptographic mechanism that takes as input a k-bit secret key and 
a  message,  and  outputs  an  l-bit  authentication  tag.  To  exchange 
authentic  messages,  a  sender  and  receiver  must  share  the  same 
secret  key.  Using  the  secret  key,  the  sender  computes  the 
message’s  authentication  tag  (or  MAC)  and  appends  it  to  the 
message.  To  verify  the  authenticity  of  a  message,  the  receiver 
computes the message’s MAC with the secret key and compares it 
to the original MAC appended with the message. 
For  any  message,  a  secure  MAC  function  prevents  an  attacker 
without  prior  knowledge  of  the  secret  key  from  computing  the 
correct  MAC.  A  MAC  achieves  authenticity  for  point-to-point 
communications  because  a  receiver  knows  that  a  message  with 
the correct MAC must have been generated either by itself or by 
the sender. 
2.2.2 Collision Resilient Hash Function 
A collision-resilient hash function H [10] is a function that maps 
an  arbitrary  length  message  M  to  a  fixed  length  message  digest 
MD and exhibits the following properties. (1) The description of 
H is publicly known and does not require any secret information 
for  its  operation.  (2)  Given  x,  it  is  easy  to  compute  H(x).  (3) 
Given y, in the range of H, it is computationally infeasible to find 
an x such that H(x) = y. (4) It is computationally infeasible to find 
two distinct messages (M, M’) that hash to the same result H(M) = 
H(M’).
The collision-resilient hash function is very efficient. It only costs 
a  few  microseconds  to  compute  on  a  Pentium  (cid:594)  800  Hz  PC, 
which  is  a  thousand  times  cheaper  than  asymmetric  primitives. 
We suggest using a collision-resilient hash function, like SHA-1 
or RIPEMD-160, to construct our signature scheme. 
2.2.3 Message Authentication Code 
A Merkle hash tree [7], [8], [9] is a mechanism for calculating a 
message digest over a group of data items. Figure 2-2 depicts a 
Merkle hash tree. It is constructed from a binary tree by using the 
hash of each data item as a leaf in the tree. Each internal node is 
then computed by taking the hash of the concatenation of its two 
children. Let H be a collision resilient hash function. Then, parent
= H( child left | child right ).
A  Merkle  hash  tree  can  reduce  the  authentication  overhead 
needed  for  a  large  group  of  data  items.  For  example,  a  sender 
signs  the  root  of  the  tree  instead  of  individual  data  items.  The 
receiver  can  then  verify  the  authenticity  of  every  data  item  by 
reconstructing the tree and comparing the computed hash value of 
the  tree,  which  we  call  treehash,  with  the  authenticated  root 
value.
To  reconstruct  the  tree,  the  receiver  needs  all of the data items. 
An alternative is for the receiver to verify a data item individually 
by  computing 
its 
authentication  path.  Illustrated  in  Figure  2-3,  the  authentication
treehash  using 
the 
the  data 
item  and 
path of the leaf is the value of all nodes that are siblings of nodes 
on the path between the leaf and the root. 
Figure 2-2. Merkle hash tree
Figure 2-3. Authentication path of Merkle hash tree 