# 十二、跨团队协作和沟通
正如我们之前讨论的，微服务的主要特征是并行开发它们的能力。为了确保最大的效率，我们需要成功地协调我们的团队，以避免冲突。在本章中，我们将讨论我们需要理解的不同元素，以确保不同的团队成功地合作。
首先，我们将介绍如何在不同的微服务之间获得一致的愿景，不同的通信结构如何塑造软件元素中的通信，以及如何确保我们不会在软件中积累 cruft。然后，我们将讨论如何确保团队在发布上协调自己，并改进他们的流程和工具，使它们越来越可靠。
本章将涵盖以下主题:
*   保持一致的架构愿景
*   工作量的划分与康威定律
*   平衡新功能和维护
*   设计更广泛的发布流程
到本章结束时，我们将知道如何构建和协调独立工作的不同团队，以便我们能够充分利用它们。
# 保持一致的架构愿景
在基于微服务构建的系统中，每个团队都能够独立于其他团队执行大部分任务。设计服务，使它们尽可能独立，并具有最小的依赖性，这是实现良好开发速度的关键。
因此，微服务分离允许团队独立和并行地工作，而使用单片，大多数在其上工作的人跟踪正在发生的事情，甚至到了被特定开发人员关注领域之外的工作分散注意力的程度。他们将知道新版本何时发布，并看到新代码被添加到他们正在处理的相同代码库中。然而，在微服务架构中，情况并非如此。在这里，团队专注于他们的服务，不会被其他特性分散注意力。这带来了清晰度和生产力。
然而，仍然需要对该系统有一个全球视野。对于系统的架构应该如何随着时间的推移而改变，需要有一个长期的观点，以便能够进行调整。这个愿景(在单块系统中)是隐含的。微服务需要对这些变化有更好的理解，这样它们才能有效地工作，所以一个能够统一这种全球视野的领先架构师非常重要。
The architect's role is a position in the software industry that isn't defined consistently.
In this book, we will define it as a role that deals with the structure of APIs and services as a whole. Their main objective is to coordinate teams when it comes to technical issues, rather than dealing with code directly.
明确指定一个负责系统全局架构的人有助于我们对系统应该如何发展保持长远的眼光。
In small companies, Chief Technical Officers may fulfill the architect's role, though they will also be busy handling elements that are related to managerial processes and costs.
领先架构师的主要职责是确保微服务部门在发展过程中保持意义，并且服务之间通信的 API 是一致的。他们还应该努力促进跨团队标准的生成，并在整个组织中共享知识。
当涉及到什么样的特性与什么样的微服务相关联，以及涉及到几个团队的任何其他冲突时，架构师也应该是最终的决策者。在从整体架构向微服务架构过渡的过程中，这一角色有很大的帮助，但在这一过程完成后，他们还可以确保组织能够适应新的挑战，并控制技术债务。在微服务架构中工作的系统旨在创建独立的团队，但他们都真正受益于由外部人员创建的共享全球愿景。
为了更好地协调，团队如何划分是非常重要的。让我们了解一下当我们将一个系统的开发分成不同的团队时会出现的一些挑战。
# 工作量的划分与康威定律
微服务架构系统对于大型软件系统来说已经足够了，尽管公司倾向于从单片应用开始。这对于任何有小团队的系统都是有意义的。随着系统的探索和旋转，它会随着时间的推移而增长。
但是当整体系统发展到一定规模时，它们变得难以处理和开发。由于历史原因，内部结构变得错综复杂，随着复杂性的增加，系统的可靠性可能会受到损害。在灵活性和冗余性之间找到平衡可能很困难。
Remember that microservices are useful when the development team is big. For small teams, a monolith is easier to develop and maintain. It's only when many developers work on the same system that dividing the work and accepting the overheads of a microservice architecture makes sense.
扩展开发团队可能会变得很困难，因为那里会有太多的旧代码，并且学习如何在其中导航是很困难的，需要很多时间。开发人员(那些已经存在很长时间的人)知道什么样的警告会有所帮助，但是它们会成为瓶颈。增加团队的规模没有帮助，因为做出任何改变都会变得复杂。因此，每个新开发人员都需要大量的培训，然后才能跟上进度，并能够成功地修复错误和开发新功能。
团队也有自然的规模限制。超过这个限制意味着必须将它们分成更小的部分。
The size of a team is highly variable, but normally, the 7±2 components are considered as a rule of thumb for the ideal number of people who should be in a team.
Bigger groups tend to generate smaller groups on their own, but this means there will be too many to manage and some may not have a clear focus. It's difficult to know what the rest of the team is doing.
Smaller teams tend to create overhead in terms of management and inter-team communication. They'll develop faster with more members.
在一个大的整体系统中，多个独立的团队往往会在没有清晰的长期观点的情况下乱搞。这可以通过设计一个强大的内部结构来缓解，但这将需要大量的前期规划和强有力的监管来确保它得到遵循。
微服务架构是一种解决这些问题的设计，因为它在系统的各个部分之间建立了非常严格的界限。然而，这样做需要开发团队有一定的规模，这样他们就可以像几个小团队一样独立工作。这是微服务架构系统的主要特征。构成它的每个微服务都是独立的服务，可以独立开发和发布。
这种工作方式允许团队并行工作，没有任何干扰。他们的行动领域是明确的，任何依赖都是明确设置的。因此，微服务之间的边界非常牢固。
仅仅因为一个微服务是独立发布的，并不意味着一次发布就足以发布一个完整的特性。正如我们已经看到的，有时，微服务中的一个特性需要在部署之前处理另一个微服务。在这种情况下，需要处理几个微服务。
在计划如何划分团队时，要记住的最重要的想法是团队的结构如何反映在软件中。这是康威定律描述的。
# 描述康威定律
康威定律是一句软件格言([https://www . nagarro . com/en/blog/post/76/微服务-重访-康威定律](https://www.nagarro.com/en/blog/post/76/microservices-revisiting-conway-s-law))。换句话说，在任何生产软件的组织中，软件都会复制组织的通信结构。例如，以一种非常简单的方式，一个组织被分成两个部门:采购和销售。这将产生两个软件块:一个专注于购买，另一个专注于销售。他们会在需要时进行沟通。
In this section, we will talk about *software units*. This is a generic term that describes any software that's treated as a single cohesive element. It can be a module, a package, or a microservice.  
In the microservice architecture, these software units are mainly microservices, but in some cases, there can be other types. We will see examples of this in the *Dividing the software into different kinds of software units* section.
这可能不足为奇。团队之间以及同一团队内部的沟通水平不同是很自然的。然而，团队合作的影响是巨大的，其中一些如下:
*   团队间的 API 比团队内的 API 更昂贵，无论是在操作还是开发方面，因为它们的通信更复杂。使它们通用和灵活以便可以重用是有意义的。
*   如果沟通结构复制了人类组织，那么明确是有意义的。团队间的 API 应该比团队内的 API 更加可见、公开和有文档记录。
*   当设计系统时，在分层的团队结构中划分它们是阻力最小的路径。以任何其他方式设计它们都需要组织变革。
*   另一方面，改变一个组织的结构是一个艰难而痛苦的过程。任何经历过重组的人都知道这一点。变更会反映在软件中，所以要做好相应的计划。
*   让两个团队在同一个软件单元上工作会产生问题，因为每个团队都会试图将它拉向自己的目标。
The owner of a software unit should be a single team. This shows everyone who's responsible for who has the final say on any change and helps us focus on our vision and reduce technical debt.
*   不同的物理位置施加了通信限制，例如时差，这将在我们跨它们开发软件时产生障碍。按位置划分团队是很常见的，这就需要构建这些团队之间的通信(以及 API)。
请注意，德沃普斯运动与康威定律有关。传统的分工方式是将正在开发的软件与其运行方式分开。正如康威定律所描述的那样，这在两个团队之间造成了差距，这产生了与两个团队之间缺乏理解相关的问题。
对这个问题的反应是创建可以开发和操作他们自己的软件以及部署它的团队。这叫做 DevOps。它将操作问题转移到开发团队，目的是创建一个反馈循环来激励、理解和修复它们。
康威定律克服起来并不是一件坏事。这反映了任何组织结构都会对软件结构产生影响。
Remembering this may help us design the system so that the communication flow makes sense for the organization and existing software.
DevOps 运动的关键组成部分之一是推进构建系统的技术，以简化生产环境的运行方式，从而简化部署过程。这允许我们以新的方式构建团队，从而导致多个团队能够控制发布。
现在，让我们来谈谈如何将软件分为不同的部分。
# 将软件分成不同类型的软件单元