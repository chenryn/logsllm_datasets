* soft    nproc   unlimited      
* hard    nproc   unlimited      
* soft    core    unlimited      
* hard    core    unlimited      
* soft    memlock unlimited      
* hard    memlock unlimited     
```  
3、关闭透明大页  
```  
vi /etc/rc.local  
touch /var/lock/subsys/local  
if test -f /sys/kernel/mm/transparent_hugepage/enabled; then      
   echo never > /sys/kernel/mm/transparent_hugepage/enabled      
fi      
su - postgres -c "pg_ctl start"    
```  
## 部署PostgreSQL 11  
https://yum.postgresql.org/repopackages.php#pg11  
```  
rpm -ivh https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-7-x86_64/pgdg-centos11-11-2.noarch.rpm  
rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm   
yum -y install coreutils glib2 lrzsz dstat sysstat e4fsprogs xfsprogs ntp readline-devel zlib-devel openssl-devel pam-devel libxml2-devel libxslt-devel python-devel tcl-devel gcc gcc-c++ make smartmontools flex bison perl-devel perl-ExtUtils* openldap-devel jadetex  openjade bzip2   
yum install -y postgresql11*  
```  
环境变量  
```  
su - postgres  
vi .bash_profile  
export PS1="$USER@`/bin/hostname -s`-> "      
export PGPORT=1921      
export PGDATA=/data01/pg11/pg_root$PGPORT      
export LANG=en_US.utf8      
export PGHOME=/usr/pgsql-11    
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH      
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.      
export MANPATH=$PGHOME/share/man:$MANPATH      
export PGHOST=$PGDATA      
export PGUSER=postgres      
export PGDATABASE=postgres      
alias rm='rm -i'      
alias ll='ls -lh'      
unalias vi   
```  
## 初始化PostgreSQL 11数据库  
```  
mkdir /data01/pg11  
mkdir /data02/pg11  
chown postgres:postgres /data01/pg11  
chown postgres:postgres /data02/pg11  
```  
```  
su - postgres  
initdb -D $PGDATA -X /data02/pg11/pg_wal1921 -U postgres -E SQL_ASCII --locale=C  
```  
## 配置PostgreSQL 11数据库参数  
```  
vi $PGDATA/postgresql.auto.conf  
listen_addresses = '0.0.0.0'  
port = 1921  
max_connections = 2000  
superuser_reserved_connections = 3  
unix_socket_directories = '., /var/run/postgresql, /tmp'  
tcp_keepalives_idle = 60  
tcp_keepalives_interval = 10  
tcp_keepalives_count = 10  
shared_buffers = 64GB  
max_prepared_transactions = 2000  
work_mem = 8MB  
maintenance_work_mem = 2GB  
dynamic_shared_memory_type = posix  
vacuum_cost_delay = 0  
bgwriter_delay = 10ms  
bgwriter_lru_maxpages = 1000  
bgwriter_lru_multiplier = 10.0  
effective_io_concurrency = 0  
max_worker_processes = 128  
max_parallel_maintenance_workers = 6  
max_parallel_workers_per_gather = 0  
parallel_leader_participation = on  
max_parallel_workers = 32  
wal_level = minimal    
synchronous_commit = off  
wal_writer_delay = 10ms  
checkpoint_timeout = 35min  
max_wal_size = 128GB  
min_wal_size = 32GB  
checkpoint_completion_target = 0.1  
max_wal_senders = 0  
effective_cache_size = 400GB  
log_destination = 'csvlog'  
logging_collector = on  
log_directory = 'log'  
log_filename = 'postgresql-%a.log'  
log_truncate_on_rotation = on  
log_rotation_age = 1d  
log_rotation_size = 0  
log_checkpoints = on   
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose   
log_line_prefix = '%m [%p] '  
log_timezone = 'PRC'  
log_autovacuum_min_duration = 0  
autovacuum_max_workers = 16  
autovacuum_freeze_max_age = 1200000000  
autovacuum_multixact_freeze_max_age = 1400000000  
autovacuum_vacuum_cost_delay = 0ms  
vacuum_freeze_table_age = 1150000000  
vacuum_multixact_freeze_table_age = 1150000000  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'  
lc_monetary = 'C'  
lc_numeric = 'C'  
lc_time = 'C'  
default_text_search_config = 'pg_catalog.english'  
jit = off  
cpu_tuple_cost=0.00018884145574257426    
cpu_index_tuple_cost = 0.00433497085216479990    
cpu_operator_cost = 0.00216748542608239995    
seq_page_cost=0.014329    
random_page_cost = 0.016  
```  
启动数据库  
```  
pg_ctl start  
```  
## 部署sysbench 1.x  
### 1 推荐 使用yum 安装  
https://github.com/akopytov/sysbench  
```  
curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash  
sudo yum -y install sysbench  
```  
### 2 编译安装  
```  
yum -y install make automake libtool pkgconfig libaio-devel  
git clone https://github.com/akopytov/sysbench  
cd sysbench  
./autogen.sh  
./configure --prefix=/var/lib/pgsql/sysbench --with-pgsql --without-mysql --with-pgsql-includes=/usr/pgsql-11/include --with-pgsql-libs=/usr/pgsql-11/lib  
make -j 128  
make install  
```  
## tpc-c 测试(本例使用prepared statement版本lua以降低SQL硬解析开销)  
可以把sysbench部署在本地或异机进行测试。本例使用本机测试。  
1、准备tpcc lua脚本(使用如下git ps版本，由于PostgreSQL优化器与Oracle类似都较为复杂，建议使用prepared statement降低CPU开销)  
https://github.com/digoal/sysbench-tpcc  
```  
git clone https://github.com/digoal/sysbench-tpcc  
```  
2、数据库连接示例  
```  
unixsocket_dir='/tmp'  
port=1921  
user=postgres  
dbname=postgres  
```  
### 测试  
### 1 PostgreSQL: prepare data and tables  
```
cd sysbench-tpcc
chmod 700 *.lua
```
```  
./tpcc.lua --pgsql-host=/tmp --pgsql-port=1921 --pgsql-user=postgres --pgsql-db=postgres --threads=64 --tables=10 --scale=100 --trx_level=RC --db-ps-mode=auto --db-driver=pgsql prepare  
```  