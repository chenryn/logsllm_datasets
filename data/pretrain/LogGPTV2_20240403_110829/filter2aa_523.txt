1
Spring Security CVE-OLOO-OOXVW漏洞分析
⾸先查看官⽅公告
https://spring.io/blog/2022/05/15/cve-2022-22978-authorization-bypass-in-
regexrequestmatcher 
注意到和 RegexRequestMatcher 有关，在官⽅仓库找到了最近修改
和 RegexRequestMatcher 有关的代码。 
https://github.com/spring-projects/spring-
security/commit/472c25b5e8b7374ba7e1b194ea09f43601f6f1c2 
⼀、漏洞简单分析
2
从测试⽤例⾥可以看到就是⽤\n、\r绕过正则判断，⽐如开发做了如下配置 
意味着除了/login以为的任何路径都需要授权才能访问。此时如果我们输⼊  /xxx/aaa%0ag 配置的正
则会匹配不上我们访问的路径，就绕过了权限校验。
Java
复制代码
@Override
protected void configure(HttpSecurity http) throws Exception {
    http.csrf().disable();
    http.authorizeRequests()
        .requestMatchers(new 
RegexRequestMatcher(".*",null)).authenticated()//配置拦截所有请求
        .antMatchers("/login").permitAll();//配置/login不拦截
    }
1
2
3
4
5
6
7
3
第⼀眼看这个洞肯定想到 /%0a/../admin 这样绕然后访问admin，⾸先不管  Spring Security 是
去匹配路径规范化以后的路径还是原始的， Spring Security 在此之前还有⼀个  Firewall 就会
拦截这种请求。然后想着要是不能把这个%0a给弄掉怎么去访问到路由呢不可能有谁真的写⼀个带回⻋
换⾏的路由吧。
基于上⾯的思考⼤概想到两种可⽤场景。
有的路由会像下⾯这样配置
我们配置了上⾯的权限校验以后正常访问 /test/xxx 是403 
访问 /test/xxxx%0a 成功绕过权限校验 
⼆、实际利⽤场景
场景⼀
Java
复制代码
    @ResponseBody    
    @RequestMapping("/test/*")
    public String test(){
        return "test";
    }
1
2
3
4
5
4
使⽤了路径参数代码如下
/test1/xxxx  403 
/test1/xxxx%0a  200 
场景⼆
Java
复制代码
    @ResponseBody
    @RequestMapping("/test1/{path}")
    public String test1(@PathVariable String path){
        return "test1"+path;
    }
1
2
3
4
5
5