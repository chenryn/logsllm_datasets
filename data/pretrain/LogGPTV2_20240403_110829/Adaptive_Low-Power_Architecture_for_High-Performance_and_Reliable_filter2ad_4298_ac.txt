the rollback machinery accounts for negligible part of the
total area. Fig. 8b presents the area overhead wrt.
the
single MicroBlaze core, in which the area overhead of the
transactional core is less than two, making it more efﬁcient
in area than a DMR arrangement of standard MicroBlaze
cores (i.e., each core has the original register ﬁle of 32
544
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:23:31 UTC from IEEE Xplore.  Restrictions apply. 
PEAK POWER RESULTS OF THE MOMA ARCHITECTURE (MW)
TABLE II
Transactional
# of RA3 multipliers
12.5 MHz
100 MHz
250 MHz
300 MHz
2
9.66
10.70
12.08
12.37
4
18.69
19.73
21.11
21.40
8
36.81
37.85
39.23
39.52
16
73.06
74.10
75.48
75.77
32
64
145.56
290.51
146.60
291.55
147.98
292.93
148.27
292.22
registers) and at the same time providing error correction
instead of error detection only.
Fig. 9a shows the relative power dissipation of each
architectural unit of the transactional core. The rollback
machinery accounts for, on average, 2.5% of total power
dissipation. Although with negligible power consumption,
the rollback interferes in the instruction decode stage with
the addition of the ‘TBB Addr’ register to it. Fig. 9b presents
the power overhead wrt. the single MicroBlaze core, which
shows an overhead of 1.87 in the lower frequencies and
of 2.05 in the higher frequencies. These results show that
the transactional architecture achieves error correction with
the same power dissipation wrt. a DMR arrangement
of standard MicroBlaze cores, even not considering the
additional area required by the DMR voting circuitry.
Table II shows the absolute peak power MoMa dissi-
pates for several conﬁgurations,
i.e., varying number of
RA3 multipliers and different operating frequencies of the
transaction core. These results show that MoMa respects
the ITRS’12 predicted ‘power wall’ of 3 Watts [2], i.e.,
the maximum peak power that any embedded system can
consume for all of its conﬁgurations. Of the total peak
power, the transactional core only corresponds to 5.82% of
the total power of the MoMa architecture.
Fig. 10 shows the area occupation of the RA3 in relation
to the transactional core. Of the total area, the transactional
core only corresponds to 8.68% of the total area of the
MoMa architecture. In terms of area, the RA3 core with 1
and 2 multipliers are roughly equivalent, because in these
versions the control machinery and the ABFT circuit are
the preponderant components of the RA3 area. When the
number of multipliers increase, the area occupation of the
RA3 core tends to increase quadratically. However, this area
increase does decrease the error coverage of the MoMa
architecture because single bit-ﬂips in the RA3 multipliers
will be detected and corrected. In the RA3, as it will be
discussed in Section IV-D, the errors that are not detected
occur in the internal control machinery, which is the same
irrespectively of the number of multipliers. Therefore, up-
sets in this additional hardware structure will not lead to
observable errors in the RA3 output.
The observation that increasing the number of multipliers
does not decrease the error coverage can be explained in
100%
80%
60%
40%
20%
0%
DMR'ed cores
Rollback Machinery
Register File
19%
6%
18%
5%
16%
4%
13%
3%
75%
77%
80%
84%
300 MHz
250 MHz
100 MHz
12.5 MHz
1.67
1.60 
1.56
1.56
12.5 MHz
100 MHz
250 MHz
300 MHz
1.50
1.60
1.70
(a) relative occupation of each architectural unit
(b) overhead
Figure 8. Area occupation of the transactional core. Overhead is wrt.
MicroBlaze single core.
DMR'ed cores
3.5%
Rollback Machinery
Register File
0.4%
0.2%
0.1%
2.3%
2.1%
2.3%
2.8%
94.2%
97.5%
97.5%
97.0%
300 MHz
250 MHz
100 MHz
12.5 MHz
2.05
2.04 
2.02
1.87
100%
80%
60%
40%
20%
12.5 MHz
100 MHz
250 MHz
300 MHz
1.50
2.00
(a) relative dissipation of each architectural unit
(b) overhead
Figure 9.
wrt. MicroBlaze single core.
Peak Power dissipation of the transactional core. Overhead is
3
A
R
e
h
t
f
o
n
o
i
t
a
l
e
r
a
e
r
A
e
r
o
c
l
a
n
o
i
t
c
a
s
n
a
r
t
.
t
.
r
.
w
e
r
o
c
30
25
20
15
10
5
1
2
4
8
16
12.5 MHz
100 MHz
250 MHz
300 MHz
Figure 10. Relative area of the RA3 core wrt. the Transactional core.
terms of the ‘Architectural Vulnerability Factor’ (AVF) [27].
AVF deﬁnes that the correctness of some bits are required
for architecturally correct execution (ACE bits), while others
do not inﬂuence the correctness of the computation (un-ACE
bits). The AVF is the average number of ACE bits in a
hardware structure in a cycle divided by the total number of
bits in that structure (ACE plus un-ACE bits).
In case of the RA3 core, we can consider that the bits
of the RA3 multipliers are un-ACE bits because errors in
them will always be detected and the majority of the cases
they will be corrected, assuming a valid fault model for the
ABFT technique. The only ACE bits in the RA3 core are the
ones in the control machinery of the circuit, which remains
constant over all RA3 conﬁgurations. Therefore, the AVF of
the MoMa architecture decreases when the number of RA3
multipliers increases, thus, when the RA3 area increases.
This is also valid because the number of ACE and un-ACE
bits of the transactional core is constant.
545
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:23:31 UTC from IEEE Xplore.  Restrictions apply. 
C. Performance and Error Recovery Analysis
Baseline: MIPS -O0
Transactional MIPS -O1
MIPS -O2
MIPS -O3
Fig. 11 presents the performance evaluation in terms of
speedup of the transactional architecture using as baseline
the MIPS architecture compiled with the ‘gcc’ ﬂag -O0. For
all programs in the benchmark, the transactional architecture
has attained considerable speedup, which is credited to
its current prototype compiler. This prototype compiler is
actually doing better to optimize the program than ‘gcc’
without any optimization. In order to evaluate how better
the transactional architecture can be, Fig. 11 also shows the
speedup obtained when compiling the programs to MIPS
with compiler optimizations enabled. In these cases, the
speedup attained is always higher than the transactional
architecture gets, which conﬁrms that the speedup is due
to the prototype compiler. Therefore, we can expect that
the production compiler of the MoMa architecture, which
is currently being implemented using ‘gcc’, will also attain
speedup comparable to the optimized binaries.
Fig. 12 shows the worst case and average error recovery
latencies with standard deviation for the rollback machinery
to recover program execution to the start of the TBB. As
discussed before, the worst case latency is always the length
of the TBB. The measured average recovery latency of the
rollback is 6.17 cycles with 2.09 of standard deviation. These
results show that, on average, the rollback latency is less than
1/3 of the total number of cycles of a TBB.
The reduced error recovery latency and its determinis-
tic worst case computation is a key contribution of the
transaction architecture. Error recovery is known to be
very expensive in fault tolerant systems, which incurs in
performance overhead from 25% to almost 100% of the
entire application [12]. This overhead depends on how
many instructions are needed to be rolled back upon error
detection. In this paper, this overhead is reduced to the
bare minimum, because the rollback has as upper bound
the length of the TBB.
Finally, Fig. 13 presents a comparison of the RA3 archi-
tecture against the GPU in terms of performance, executing
the very efﬁcient ABFT implementation presented in [28].
In a GPU, each computing unit, i.e., the streaming processor,
executes one thread onto dedicated memory locations, avoid-
ing the need for a complex mechanism of shared memory
which considerably reduces latency. It is, therefore, able
to massively explore parallelism, being very efﬁcient for
the computation of matrix multiplications. The GPU system
used in the comparison is the NVIDIA Tesla S1070 with
frequency of operation up to 1.44 GHz with the execution
times taken from [28] for integer matrix multiplication
protected with ABFT.
D. Error Coverage Evaluation Based on Fault Injection
The results of the fault injection campaign of the trans-
actional core in terms of the SET and SEU error correc-
tion coverage and error detection coverage are presented
p
u
d
e
e
p
S
10
8
6
4
2
0
1.43
2.46
2.16
1.46
1.21
2.02
bbsort
lsquares
crc32
floyd
kruskal
matmul
Figure 11.
Speedup of the transactional architecture wrt. MIPS binaries
compiled with different optimization ﬂags. Baseline version is MIPS
compiled with -O0.
Average Latency
Worst Case Latency
20
15
10
5
0
s
e
l
c
y
C
f
o
r
e
b
m
u
N
6.39
7.19
5.16
bbsort
lsquares
crc32
7.31
floyd
5.64
5.30
kruskal matmul
Figure 12. Worst case and average error recovery latencies with standard
deviation in number of executed cycles to rollback after an error is detected.
GPU 4
8
16
32
64
128
100000
10000
1000
100
10
1
0.1
0.01
0.001
0.0001
)
s
m
(
e
l
a
c
s
-
g
o
l
e
m
i
t
n
o
i
t
u
c