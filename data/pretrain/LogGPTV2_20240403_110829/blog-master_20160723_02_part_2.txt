    INNER JOIN "test02" AS d ON (rd.test02_uuid = d.uuid)    
    INNER JOIN "test03" AS ir ON (d.test03_uuid = ir.uuid)    
    WHERE    
  d.status = 'normal'    
    AND ir.u_uuid = 'ttttttttt' and (d.test02_status in ('test02ed','checked'))     
      and d.is_sub = false and d.is_filter = false ORDER BY d.test02_time desc limit 10 offset 0    
```    
### pg_hint_plan语法解释    
整个query的第一个comment (/*+ */) 被pg_hint_plan用来固定执行计划。      
如果有多个comment，也只认第一个，请务必注意。      
```    
/*+     
  NestLoop(ir d)  # 表示ir d两个表使用嵌套循环JOIN，如果QUERY用了别名，请使用别名。     
  NestLoop(ir d rd)  # 表示ir与d join完后再与rd JOIN。      
  所以如果要固定JOIN顺序，可以分多个JOIN hint来写，就像上面这样。      
  Leading(((ir d) rd))    # 表示JOIN顺序和驱动顺序，      
  每一对JOIN对象都需要用括号表示，      
  括号内左边的元素为outer、driver表，右边的元素为inner、driven表。      
  (hash 和 nestloop JOIN 请务必注意括号内的别名或表名顺序)。         
  如果QUERY用了别名，请使用别名。        
  IndexScan(rd "def")   #  指定索引，如果表名使用了别名，请使用别名。        
  IndexScan(d "bcd")     
  IndexScan(ir "abc")     
  务必注意，  如果对象名用了 小写和下划线 以外的字符。  必须使用""引用起来。      
*/     
```    
### pg_hint_plan插件支持的所有 hint     
上面的例子使用了其中的一部分，其他的请用户自行阅读参考。      
http://pghintplan.osdn.jp/pg_hint_plan.html  
| Format              | Description |    
|------------------------------|--------------------------------|    
| Scan method | - |    
| SeqScan(table) | Forces sequential scan on the table|    
| TidScan(table)|Forces TID scan on the table.|    
| IndexScan(table[ index...])|Forces index scan on the table. Restricts to specified indexes if any.|    
| IndexOnlyScan(table[ index...])|Forces index only scan on the table. Rstricts to specfied indexes if any. Index scan may be used if index only scan is not available. Available for PostgreSQL 9.2 and later.|    
| BitmapScan(table[ index...])|Forces bitmap scan on the table. Restoricts to specfied indexes if any.|    
| NoSeqScan(table)|Forces not to do sequential scan on the table.|    
| NoTidScan(table)|Forces not to do TID scan on the table.|    
| NoIndexScan(table)|Forces not to do index scan and index only scan (For PostgreSQL 9.2 and later) on the table.|    
| NoIndexOnlyScan(table)|Forces not to do index only scan on the table. Available for PostgreSQL 9.2 and later.|    
| NoBitmapScan(table)|Forces not to do bitmap scan on the table.|    
| Join method | - |    
| NestLoop(table table[ table...]) |Forces nested loop for the joins consist of the specifiled tables.|    
| HashJoin(table table[ table...]) |Forces hash join for the joins consist of the specifiled tables.|    
| MergeJoin(table table[ table...]) |Forces merge join for the joins consist of the specifiled tables.|    
| NoNestLoop(table table[ table...]) |Forces not to do nested loop for the joins consist of the specifiled tables.|    
| NoHashJoin(table table[ table...]) |Forces not to do hash join for the joins consist of the specifiled tables.|    
| NoMergeJoin(table table[ table...]) |Forces not to do merge join for the joins consist of the specifiled tables.|    
| Join order | - |    
| Leading(table table[ table...]) |Forces join order as specified.|    
| Leading() |Forces join order and directions as specified. A join pair is a pair of tables and/or other join pairs enclosed by parentheses, which can make a nested structure.|    
| Row number correction | - |    
| Rows(table table[ table...] correction) |Corrects row number of a result of the joins consist of the specfied tables. The available correction methods are absolute (#), addition (+), subtract (-) and multiplication (*).  should be a string that strtod() can read.|    
| GUC | - |     
| Set(GUC-param value)|Set the GUC parameter to the value while planner is running.|    
举例      
```    
postgres=# /*+    
postgres*#     Set(random_page_cost 2.0)    
postgres*#  */    
postgres-# SELECT * FROM table1 t1 WHERE key = 'value';    
postgres=# /*+ Rows(a b #10) */ SELECT... ; Sets rows of join result to 10    
postgres=# /*+ Rows(a b +10) */ SELECT... ; Increments row number by 10    
postgres=# /*+ Rows(a b -10) */ SELECT... ; Subtracts 10 from the row number.    
postgres=# /*+ Rows(a b *10) */ SELECT... ; Makes the number 10 times larger.    
```    
### pg_hint_plan debug  
当你不知道hint是否起到作用时，可以DEBUG一下。  
```  
postgres=# create extension pg_hint_plan ;  
CREATE EXTENSION  
set client_min_messages ='log';  
set pg_hint_plan.debug_print =on;  
set pg_hint_plan.enable_hint=on;  
set pg_hint_plan.message_level =log;  
set pg_hint_plan.parse_messages =log;  
set pg_hint_plan.enable_hint_table =on;  
postgres=# create table test(id int primary key, info text);  
CREATE TABLE  
postgres=# insert into test select generate_series(1,1000000), 'test';  
INSERT 0 1000000  
postgres=# explain /*+ seqscan(test) */ select count(*) from test;  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(test)  
not used hint:  
duplication hint:  
error hint:  
                             QUERY PLAN                               
--------------------------------------------------------------------  
 Aggregate  (cost=17906.00..17906.01 rows=1 width=8)  
   ->  Seq Scan on test  (cost=0.00..15406.00 rows=1000000 width=0)  
(2 rows)  
postgres=# explain /*+ indexonlyscan(test) */ select count(*) from test;  
LOG:  pg_hint_plan:  
used hint:  
IndexOnlyScan(test)  
not used hint:  
duplication hint:  
error hint:  
                                        QUERY PLAN                                           
-------------------------------------------------------------------------------------------  
 Aggregate  (cost=33889.43..33889.44 rows=1 width=8)  
   ->  Index Only Scan using test_pkey on test  (cost=0.42..31389.42 rows=1000000 width=0)  
(2 rows)  
postgres=# explain /*+ indexscan(test) */ select count(*) from test;  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(test)  
not used hint:  
duplication hint:  
error hint:  
                                     QUERY PLAN                                       
------------------------------------------------------------------------------------  
 Aggregate  (cost=10000017906.00..10000017906.01 rows=1 width=8)  
   ->  Seq Scan on test  (cost=10000000000.00..10000015406.00 rows=1000000 width=0)  
(2 rows)  
postgres=# explain /*+ bitmapscan(test) */ select count(*) from test;  
LOG:  pg_hint_plan:  
used hint:  
BitmapScan(test)  
not used hint:  
duplication hint:  
error hint:  
                                     QUERY PLAN                                       
------------------------------------------------------------------------------------  
 Aggregate  (cost=10000017906.00..10000017906.01 rows=1 width=8)  
   ->  Seq Scan on test  (cost=10000000000.00..10000015406.00 rows=1000000 width=0)  
(2 rows)  
postgres=# explain /*+ bitmap scan(test) */ select count(*) from test;  
LOG:  pg_hint_plan: hint syntax error at or near "bitmap scan(test) "  
DETAIL:  Unrecognized hint keyword "bitmap".  
                             QUERY PLAN                               
--------------------------------------------------------------------  
 Aggregate  (cost=17906.00..17906.01 rows=1 width=8)  
   ->  Seq Scan on test  (cost=0.00..15406.00 rows=1000000 width=0)  
(2 rows)  
```  
## 绑定SQL执行计划的缺点    
绑定SQL执行计划可以解决一些问题，但是也会引入一些问题。      
SQL执行计划一旦绑定，则会严格按照绑定的执行计划执行。      
例如使用了绑定变量的情况，如果SQL的条件发送变化，绑定的执行计划可能不适合变化后的条件。      
## 小结    
1\. pg_hint_plan是一种辅助的手段，帮助用户解决因为优化器算法不好，或者统计信息不准确导致的执行计划不准确的问题。      
2\. 用户应该尽量的通过校准成本因子，设置好统计信息收集的参数等手段，使得优化器能够更加精准的评估成本，选择合理的执行计划。      
3\. pg_hint_plan需要用到PostgreSQL的hook，所以必须预加载的方式调用_PG_init(void)。      
通过修改postgresql.conf的shared_preload_libraries预加载，或者设置会话级自动加载参数，都是可行的。      
4\. PG支持的HINT列表  
https://www.openscg.com/bigsql/docs/hintplan/hint_list.html/   
Group	| Format	| Description
---|---|---
Scan method|	SeqScan(table)	|Forces sequential scan on the table
Scan method|TidScan(table)|	Forces TID scan on the table.
Scan method|IndexScan(table[ index...])|	Forces index scan on the table. Restricts to specified indexes if any.
Scan method|IndexOnlyScan(table[ index...])|	Forces index only scan on the table. Rstricts to specified indexes if any. Index scan may be used if index only scan is not available. Available for PostgreSQL 9.2 and later.
Scan method|BitmapScan(table[ index...])|	Forces bitmap scan on the table. Restoricts to specified indexes if any.
Scan method|NoSeqScan(table)|	Forces not doing sequential scan on the table.
Scan method|NoTidScan(table)|	Forces not doing TID scan on the table.
Scan method|NoIndexScan(table)|	Forces not doing index scan and index only scan (For PostgreSQL 9.2 and later) on the table.
Scan method|NoIndexOnlyScan(table)|	Forces not doing index only scan on the table. Available for PostgreSQL 9.2 and later.
Scan method|NoBitmapScan(table)|	Forces not doing bitmap scan on the table.
Join method|	NestLoop(table table[ table...])|	Forces nested loop for the joins consist of the specified tables.
Join method|HashJoin(table table[ table...])|	Forces hash join for the joins consist of the specified tables.
Join method|MergeJoin(table table[ table...])|	Forces merge join for the joins consist of the specified tables.
Join method|NoNestLoop(table table[ table...])|	Forces not doing nested loop for the joins consist of the specified tables.
Join method|NoHashJoin(table table[ table...])|	Forces not doing hash join for the joins consist of the specified tables.
Join method|NoMergeJoin(table table[ table...])|	Forces not doing merge join for the joins consist of the specified tables.
Join order|	Leading(table table[ table...])|	Forces join order as specified.
Join order|Leading(``````)|	Forces join order and directions as specified. A join pair is a pair of tables and/or other join pairs enclosed by parentheses, which can make a nested structure.
Row number correction|	Rows(table table[ table...] correction)|	```Corrects row number of a result of the joins consist of the specified tables. ```  ```The available correction methods are absolute (#), addition (+), subtract (-) and multiplication (*).  should be a string that strtod() can read.```
Parallel query configuration| ```Parallel(table  [soft OR hard])``` |  ```Enforce or inhibit parallel execution of specified table. ```  ``` is the desired number of parallel workers, where zero means inhibiting parallel execution. ```  ```If the third parameter is soft (default), it just changes max_parallel_workers_per_gather and leaves everything else to the planner. ```  ```Hard means enforcing the specified number of workers.```
GUC|	Set(GUC-param value)|	Set the GUC parameter to the value while planner is running.
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")