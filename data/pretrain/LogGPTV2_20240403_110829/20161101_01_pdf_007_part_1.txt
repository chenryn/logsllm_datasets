性能优化培训
PostgreSQL
Digoal.zhou
5/13/2014
http://blog.163.com/digoal@126
目录
授课环境
SQL优化基础
如何让数据库输出好的执行计划
压力测试工具的使用和建模
性能分析工具的使用
综合优化案例
授课环境
 OS
 CentOS 6.x x64
 DB
 PostgreSQL 9.3.4
 Others
 pgfincore
 plproxy
授课环境搭建
 yum -y install lrzsz sysstat e4fsprogs ntp readline-devel zlib zlib-devel openssl openssl-devel pam-devel libxml2-devel libxslt-devel python-devel tcl-devel gcc make
smartmontools flex bison perl perl-devel perl-ExtUtils* OpenIPMI-tools systemtap-sdt-devel
 mkdir /opt/soft_bak
 cd /opt/soft_bak
 wget http://ftp.postgresql.org/pub/source/v9.3.4/postgresql-9.3.4.tar.bz2
 wget http://downloads.sourceforge.net/project/flex/flex-
2.5.39.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fflex%2Ffiles%2F&ts=1397121679&use_mirror=jaist
 download http://git.postgresql.org/gitweb/?p=pgfincore.git;a=summary
 crontab -e
 -- 8 * * * * /usr/sbin/ntpdate asia.pool.ntp.org && /sbin/hwclock --systohc
 /usr/sbin/ntpdate asia.pool.ntp.org && /sbin/hwclock --systohc
 vi /etc/sysconfig/clock
 -- ZONE="Asia/Shanghai"
 UTC=false
 ARC=false
 rm /etc/localtime
 cp /usr/share/zoneinfo/PRC /etc/localtime
授课环境搭建
 vi /etc/sysconfig/i18n
 -- LANG="en_US.UTF-8"
 vi /etc/ssh/sshd_config
 UseDNS no
 PubkeyAuthentication no
 vi /etc/ssh/ssh_config
 GSSAPIAuthentication no
 vi /etc/sysctl.conf
 kernel.shmmni = 4096
 kernel.sem = 50100 64128000 50100 1280
 fs.file-max = 7672460
 net.ipv4.ip_local_port_range = 9000 65000
 net.core.rmem_default = 1048576
 net.core.rmem_max = 4194304
 net.core.wmem_default = 262144
 net.core.wmem_max = 1048576
 net.ipv4.tcp_tw_recycle = 1
授课环境搭建
 net.ipv4.tcp_max_syn_backlog = 4096
 net.core.netdev_max_backlog = 10000
 vm.overcommit_memory = 0
 net.ipv4.ip_conntrack_max = 655360
 fs.aio-max-nr = 1048576
 net.ipv4.tcp_timestamps = 0
 sysctl -p
 vi /etc/security/limits.conf
 * soft nofile 131072
 * hard nofile 131072
 * soft nproc 131072
 * hard nproc 131072
 * soft core unlimited
 * hard core unlimited
 * soft memlock 50000000
 * hard memlock 50000000
 vi /etc/sysconfig/selinux
 SELINUX=disabled
 setenforce 0
授课环境搭建
 vi /etc/sysconfig/iptables
 -A INPUT -s 192.168.0.0/16 -j ACCEPT
 -A INPUT -s 10.0.0.0/8 -j ACCEPT
 -A INPUT -s 172.16.0.0/16 -j ACCEPT
 # or
 -A INPUT -m state --state NEW -m tcp -p tcp --dport 5432 -j ACCEPT
 service iptables restart
 cd /opt/soft_bak
 tar -jxvf flex-2.5.39.tar.bz2
 cd flex-2.5.39
 ./configure && make && make install
 useradd postgres
 cd /opt/soft_bak/
 tar -jxvf postgresql-9.3.4.tar.bz2
 tar -zxvf pgfincore.tar.gz
 mv pgfincore postgresql-9.3.4/contrib/
授课环境搭建
 vi /home/postgres/.bash_profile
 export PGPORT=5432
 export PGDATA=/home/postgres/pgdata
 export LANG=en_US.utf8
 export PGHOME=/opt/pgsql
 export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
 export DATE=`date +"%Y%m%d%H%M"`
 export PATH=$PGHOME/bin:$PATH:.
 export MANPATH=$PGHOME/share/man:$MANPATH
 export PGUSER=postgres
 export PGHOST=$PGDATA
 export PGDATABASE=postgres
 alias rm='rm -i'
 alias ll='ls -lh'
授课环境搭建
 安装systemtap环境
 http://debuginfo.centos.org/6/x86_64/
 vi /etc/yum.repos.d/CentOS-Debuginfo.repo
 enabled=1
 # uname -r
 2.6.32-358.el6.x86_64
 yum install -y kernel-devel-2.6.32-358.el6.x86_64 kernel-debuginfo-2.6.32-358.el6.x86_64 kernel-debuginfo-common-x86_64-2.6.32-358.el6.x86_64 systemtap
 stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
 https://sourceware.org/systemtap/ftp/releases/ 或下载systemtap源码编译
授课环境搭建
 cd /opt/soft_bak/postgresql-9.3.4
 ./configure --prefix=/opt/pgsql9.3.4 --with-pgport=5432 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-
thread-safety --with-wal-blocksize=8 --with-blocksize=8 --enable-dtrace --enable-debug --enable-cassert && gmake world
 gmake install-world
 ln -s /opt/pgsql9.3.4 /opt/pgsql
 cd /opt/soft_bak/postgresql-9.3.4/contrib/pgfincore
 . /home/postgres/.bash_profile
 make clean
 make
 make install
 su -postgres
 initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W
 cd $PGDATA
 vi postgresql.conf
授课环境搭建
 调整数据库postgresql.conf参数. 打开日志, SQL统计, 跟踪, 以及性能参数, 便于优化过程中取证.
 监听IPv4的所有IP.
 listen_addresses = '0.0.0.0'
 最大允许1000个连接(测试的话100够了, 加大连接数同时需要调整shared buffer).
 max_connections = 1000
 为超级用户保留13个可用连接.
 superuser_reserved_connections = 13
 默认的unix socket文件放在/tmp, 修改为$PGDATA, 以确保本地访问的安全性.
 unix_socket_directory = '.'
 默认的访问权限是0777, 修改为0700更安全.
 unix_socket_permissions = 0700
 TCP会话心跳包在Linux下面默认是2小时. 如果已经修改了系统的内核参数, 则不需要再修改这里.
 为防止客户端和服务端之间的网络设备主动关闭空闲TCP会话, 设置以下参数.
 tcp_keepalives_idle = 60
 tcp_keepalives_interval = 10
 tcp_keepalives_count = 6
授课环境搭建
 大的shared_buffers需要大的checkpoint_segments,同时需要申请更多的System V共享内存资源. 并且增加共享内存管理的开销.
 这个值不需要设的太大, 因为PostgreSQL还依赖操作系统的文件系统cache来提高读性能, 另外, 写操作频繁的数据库这个设太大反而会增加checkpoint压力.
 在9.4版本中会增加mmap以及huge page table的支持以减少内存管理的开销.
 shared_buffers = 512MB
 这个值越大, VACUUM, CREATE INDEX的操作越快, 当然大到一定程度瓶颈就不在内存了, 可能是CPU例如创建索引.
 这个值是一个操作的内存使用上限, 而不是一次性分配出去的. 并且需要注意如果开启了autovacuum, 最大可能有
autovacuum_max_workers*maintenance_work_mem的内存被系统消耗掉.
 maintenance_work_mem = 512MB
 一般设置为比系统限制的略少,ulimit -a : stack size (kbytes, -s) 10240
 max_stack_depth = 8MB
 手动执行vacuum操作时, 默认是没有停顿执行到底的, 为了防止VACUUM操作消耗太多数据库服务器硬件资源, 这个值是指vacuum在消耗多少资源后停顿多少时
间,以便其他的操作可以使用更多的硬件资源.
 vacuum_cost_delay = 10ms
 #vacuum_cost_page_hit = 1 # 0-10000 credits
 #vacuum_cost_page_miss = 10 # 0-10000 credits
 #vacuum_cost_page_dirty = 20 # 0-10000 credits
 vacuum_cost_limit = 10000 # 1-10000 credits
授课环境搭建
 默认bgwriter进程执行一次后会停顿200ms再被唤醒执行下一次操作, 当数据库的写操作很频繁的时候, 200ms可能太长, 导致其他进程需要花费过多的时间来进行
bgwriter的操作. 短暂的停顿更利于将shared buffer中的脏块flush到磁盘, 降低backend 主动flush 以申请共享内存的情形. 后面使用explain时会讲到.
 bgwriter_delay = 10ms
 另外还有几个和写脏块相关的参数, 即写多少脏块后开始休息.
 如果需要做数据库WAL日志备份的话至少需要设置成archive级别, 如果需要做hot_standby那么需要设置成hot_standby, 由于这个值修改需要重启数据库, 所以先
设置成hot_standby比较好. 当然hot_standby意味着WAL记录得更详细, 如果没有打算做hot_standby设置得越低性能越好.
 wal_level = hot_standby
 wal buffers默认是-1 根据shared_buffers的设置自动调整shared_buffers*3% .最大限制是XLOG的segment_size.
 wal_buffers = 16384kB
 多少个xlog file产生后开始checkpoint操作,
 这个值越大, 允许shared_buffer中的被频繁访问的脏数据存储得更久. 一定程度上可以提高数据库性能. 但是太大的话会导致在数据库发生checkpoint的时候需要
处理更多的脏数据带来长时间的IO开销(还要考虑bgwriter的存在).
 太小的话会导致产生更多的WAL文件 (因为full page writes=on, CHECKPOINT后的第一次块的改变要写全块, checkpoint越频繁, 越多的数据更新要写全块导致产
生更多WAL).
 checkpoint_segments = 32
 这个和checkpoint_segments的效果是一样的, 只是触发的条件是时间条件.
 checkpoint_timeout = 5min
授课环境搭建
 归档参数的修改也需要重启数据库, 所以就先打开吧.
 archive_mode = on
 这个是归档调用的命令, 我这里用date代替, 所以归档的时候调用的是输出时间而不是拷贝wal文件.
 archive_command = '/bin/date' # 'cp %p /arch/%f'
 如果要做hot standby这个必须大于0, 并且修改之后要重启数据库所以先设置为32.
 表示允许建立多少个和流复制相关的连接.
 max_wal_senders = 32
 这是个standby 数据库参数, 为了方便角色切换, 我一般是所有的数据库都把他设置为on 的.
 hot_standby = on
 这个参数是说数据库中随机的PAGE访问的开销占seq_page_cost的多少倍 , seq_page_cost默认是1. 其他的开销都是seq_page_cost的倍数.
 这些都用于基于成本的执行计划选择. 后面讲成本因子的调教时会详细说明.
 random_page_cost = 2.0
 CPU相关的成本因子, 如果内存足够大, 大部分数据都在内存命中的话, 可以适当调大以下参数, 使得数据块扫描的成本和CPU成本更接近.
 #cpu_tuple_cost = 0.01 # same scale as above
 #cpu_index_tuple_cost = 0.005 # same scale as above
 #cpu_operator_cost = 0.0025
授课环境搭建
 effective_cache_size只是个度量值, 不是实际分配使用的内存值.
 表示系统有多少内存可以作为操作系统的cache. 越大的话, 数据库越倾向使用index这种适合random访问的执行计划.
 一般设置为内存大小减去数据库的shared_buffer再减去系统和其他软件所需的内存.
 effective_cache_size = 12000MB
 下面是日志输出的配置.
 log_destination = 'csvlog'
 logging_collector = on
 log_directory = '/home/postgres/pg_log' # 需提前创建这个目录, 并赋予相应的写权限
 log_truncate_on_rotation = on
 log_rotation_age = 1d
 log_rotation_size = 10MB
 这个参数调整的是记录执行时间超过1秒的SQL到日志中, 一般用于跟踪哪些SQL执行时间长.
 log_min_duration_statement = 1s
 记录每一次checkpoint到日志中.
 log_checkpoints = on
授课环境搭建
 记录锁等待超过1秒的操作, 一般用于排查业务逻辑上的问题.
 log_lock_waits = on
 deadlock_timeout = 1s
 记录连接和端口连接, 可以反映短连接的问题, 同时也可以作为连接审计日志.
 log_connections = on