which case it outputs 0) or using one secret (in which
case it outputs 1).
For all polynomial time distinguishers, D , there
exists a bound, Œµ, on the probability that two users
with different keys can be distinguished. The advantage,
Œµ, with which the best distinguisher can tell the two
cases apart corresponds to the maximum probability
520
Prk ‡¢é Un; r1r2 ‡¢é Un; h1 ‡¢é P kr1;
h2 ‡¢é P kr2 : D r1h1r2h2  1
‡¢§Prk1k2 ‡¢é Un; r1r2 ‡¢é Un; h1 ‡¢é P k1r1;
h2 ‡¢é P k2r2 : D r1h1r2h2  1
(Un is a value randomly chosen from the uniform
distribution over all strings of length n).
For a system to be considered private, we need Œµ to
be small. We deÔ¨Åne a protocol to provide polynomial
privacy if and only if the attacker advantage decreases
faster than any polynomial in the key length, n. This is
given when for every polynomial function p n there
exists an m for which for all n  m : Œµ ‡£ò p n
‡¢§1.
For a protocol
to also provide authentication, an
attacker must not be able to spoof a user‚Äôs response
without knowing the secret keys, even after seeing many
of the user‚Äôs responses. Authentication follows trivially
from private identiÔ¨Åcation in the tree protocol, which is
introduced in Section II-D, by adding a nonce selected
by the server. In this paper, we concentrate on improv-
ing private identiÔ¨Åcation. The results apply equally to
private authentication, because our approach only alters
the higher levels of the tree, while authentication only
happens at the lowest level of the tree.
C. Measuring Privacy
The advantage Œµ represents the privacy of a sys-
tem, but there is no Ô¨Åxed threshold value of Œµ that
separates private from non-private. Instead the attacker
advantage necessary to put a system at risk will vary
across systems as well as attackers. Instead of arbitrarily
selecting an Œµ bound, we provide a way of measuring
privacy through information leakage [15]. Based on this
measure, the designer of a system will have to decide
what level of privacy is required (and affordable). The
metric enables protocol designers to trade-off between
scalability and privacy.
Information leakage measures how accurately an at-
tacker can distinguish groups of users. It is calculated
as the loss of entropy over perfect privacy (deÔ¨Åned as:
Œµ  0) averaged over all users of a system. The loss
in entropy is computed as the entropy of the sizes of
groups of users that are distinguishable:
p‡¢§1
i
pi  log2
I  ‚àë
i
where pi is the fraction of users in the ith group. If,
for example, an attacker can distinguish 3 groups of 25,
25, and 50 users, the average information leakage is
L  2 1
2  log2 2  15 bits.
4  log2 4  1
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:25 UTC from IEEE Xplore.  Restrictions apply. 
The attacker advantage, Œµ, can be expressed in terms
of information leakage. If on average x bits of infor-
mation are learned from users of a system, the attacker
advantage of distinguishing two users is the probability
that these users do not share the same x bit identiÔ¨Åer;
that is Œµ ‡£ô 1‡¢§ 2‡¢§x.
If N users are evenly distributed over 2x groups, each
user is in a group of size 2‡¢§xN and Œµ  1 ‡¢§ 2‡¢§x. If
the groups are distributed differently, Œµ is larger. If, for
example, there exist groups of two sizes, 2‡¢§x  Œ± N
and 2‡¢§x ‡¢§Œ± N, then Œµ  2‡¢§x  2Œ±2. As long as the
deviation from the uniform distribution, Œ±, is small, the
attacker advantage is very close to the bound. Given this
conversion between information leakage and attacker
advantage, we can estimate the attacker advantage, Œµ,
caused by an information source by measuring its in-
formation leakage. This paper uses information leakage
as the privacy measure since it converts to distinguisha-
bility as deÔ¨Åned in the distinguishability game but is
usually more intuitive to calculate.
D. Protocols
Private identiÔ¨Åcation protocols have been proposed
that provably provide polynomial privacy, but cause ex-
tensive computational overhead on the back-end server
since they require the back-end to try every possible
key [22]. Alternatives that are more scalable sacriÔ¨Åce ei-
ther availability or strong privacy. Those protocols with
limited availability maintain and synchronously update
some shared state on the tag and server [16]. Too many
unauthorized read attempts bring this state out of sync
and the tag is effectively lost from the database. The
other possible trade-off for more scalability sacriÔ¨Åces
some privacy by sharing secrets among different users.
While many of the ideas in this paper could be applied
to other protocols, we focus on extending Molnar and
Wagner‚Äôs tree-based hash protocol in which keys are
organized in a tree of secrets [12].
The tree-based hash protocol extends the basic hash
protocol. In the basic hash protocol, each user is as-
signed a single unique key [22]. When queried, the user
responds with a random nonce and the keyed hash of
that random number: H sr r where H is a one-
way function, s is a secret key, and r is a random nonce.
To identify the user, the server hashes the nonce under
all keys in the database until it Ô¨Ånds a match. Assuming
a strong one-way function,
the basic hash protocol
provides polynomial privacy (e.g., Œµ  1pn over all
polynomial functions, pn) but does not scale well,
which results in computationally prohibitive overhead
for large systems.
In the more scalable tree protocol, several secrets are
assigned to each user [12]. The secrets are structured
in a tree with the users as the tree leaves. A user ti is
assigned the secrets si1si2 sid where d is the depth
of the tree (all secrets but the last are shared with some
of the other users). When queried, user ti responds with:
H si1r1 r1H si2r2 r2 Hsidrd
 rd
The server Ô¨Ånds the matching secret on each level
in the same way it did it in basic hash protocol. By
identifying the correct branch on each tree level, a
leaf is reached which uniquely identiÔ¨Åes the user. This
tree-based hash protocol scales well beyond billions of
users. The drawback of the protocol, however, is that
secrets are shared among several users and extracting
the secrets from some users potentially allows tracking
others. An attacker can uniquely identify a user with
higher probability when more secrets of that user are
known. In the standard tree protocol, a tree with a
constant branching factor at each level is used. Previous
work has shown that varying the branching factor for
the different levels improves privacy [11][1][15]. We as-
sume an already optimized tree protocol (typically with
only two levels) and further improve privacy through
randomization.
III. RANDOMIZED TREE PROTOCOL
The privacy of probabilistic privacy protocols derives
from the fact that an attacker only ever knows a small
fraction of the keys in a system while the legitimate
reader knows all keys. This gap in the ability to dis-
tinguish users can be ampliÔ¨Åed by adding noise to user
responses. The noise blurs the borders between groups
of users that the attacker would otherwise be able to
distinguish.
Our technique for improving the tree protocol‚Äôs pri-
vacy is simple: some bits of the user-generated hashes
are randomly Ô¨Çipped before being sent to the server. To
enable legitimate readers to still uniquely identify each
user with total correctness, the last level of the tree is
not randomized. Whereas before an attacker in posses-
sion of the relevant shared keys could deterministically
identify a user as being a member of a single group, the
randomization means an attacker can only determine the
probability that the user is in each group.
The randomization never leads to false identiÔ¨Åcations,
because the last round that uses the unique secret
of the tag is not randomized. The legitimate reader
will always be able to correctly identify a tag, but
some wrong tree branches might be evaluated before
the correct branch thereby increasing the identiÔ¨Åcation
cost. Randomization enables privacy levels anywhere
between the deterministic tree-protocol and the basic
hash protocol at varying costs.
In a simple instantiation of our randomization tech-
nique, the user generates a nonce, then hashes that nonce
and a secret key, and Ô¨Ånally Ô¨Çips every bit of the result
521
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:09:25 UTC from IEEE Xplore.  Restrictions apply. 
with some probability p. Any response could hence have
been generated by any user with some probability. If p is
chosen as 1
2, even the legitimate reader has no advantage
in identifying the user over trying all keys on the lowest
tree level until the right one is found. If p is chosen
suitably, it can be close enough to 1
2 to provide little
information to an attacker operating a rogue reader, but
far enough from 1
2 to provide useful information to a
legitimate reader. The legitimate reader only has to try
a few groups to Ô¨Ånd the right user, while an attacker
is left with large uncertainty and cannot determine to
which of the groups a user belongs.
Section III-A analyzes the privacy properties of the
proposed scheme, and Section IV-A estimates the costs
a legitimate reader incurs for different choices of p. In
Section III-B, we present and analyze a variation on the
simple randomization technique that provides improved
privacy-cost tradeoffs by using selective randomization.
Our protocol is designed around the strong assumption
that an attacker cannot obtain multiple reads known to
be from the same tag. In Section III-C, we consider
how privacy is reduced when an attacker can perform
multiple reads.
A. Privacy Analysis
We analyze a two-level tree that has unique secrets on
the second level; hence, no information is leaked from
this level. We assume the strongest possible attacker
who knows all secrets on the Ô¨Årst level but none of
the second level secrets (the secrets on the second level
are not shared among tags and hence not stealable).
A realistic attacker is not likely to get access to all
the Ô¨Årst-level secrets, as that would involve physically
compromising tens of thousands of tags.
Figure 1 depicts the probability distribution that re-
Ô¨Çects where in the tree a given user resides as seen
by an attacker. Since the attacker knows all secrets on
the Ô¨Årst level of the tree, each user can be placed into
one of the tree branches when using the deterministic
tree protocol. This decreases the number of possible
tree positions from N to N
k and leaks log2 k bits of
information, where k is the spreading factor on the Ô¨Årst
tree level. When randomization is used, the attacker
only learns with what probability the user resides in
the different branches.
The amount of entropy (and information leakage)
depends on the probability that an attacker guesses that
the correct secret was used (marked as a1 in Figure 1)
and the probability that the attacker guesses that any
of the other secrets was used (a2 in the graph). These
correct guess and wrong guess probabilities are directly
related to the degree of randomization, p. The correct
guess probability is the chance that a received response
corresponds to the hash output using an assumed key
Figure 1. Change in probability distribution of user identity as seen
by attacker compared for deterministic and randomized tree protocol.
Tree with N users, spreading factor k.
plus randomization. The wrong guess probability cor-
responds to the case that the response corresponds to
the output from some other key. The closer these two
probabilities are, the more privacy is provided since an
attacker can no longer decide whether or not a certain
key is used.
The correct guess probability is calculated as the
likelihood that a given level of noise is the result of
randomization summed over all possible levels of noise.
Each such chance corresponds to the probability that
a certain level of noise was produced by a binomial
distribution, Binom in p, which stands for the chance
that i of n bits in the output are Ô¨Çipped for randomization
of degree p.
from an unbiased distribution, Binomin 1
The wrong guess probability is conversely derived
. The ratio
between correct and wrong guess probability, r  a1
a2
, is:
2
Binom in p2
Binomin 1
2
r 
n
‚àë
i0
Average Entropy. The average entropy of tags in the
randomized tree protocol as seen by an attacker is (see