(gdb) c
Continuing.
tempFunction is called, a = 1, b = 2
n = 3
Program exited normally.
```
有时候需要看到编译器生成的汇编代码，以进行汇编级的调试或跟踪，又该如何操作呢？
这就要用到display命令“display /i $pc”了（此命令前面已有详细解释）：
```shell
(gdb) display /i $pc
(gdb)
```
此后程序再中断时，就可以显示出汇编代码了：
```shell
(gdb) r
Starting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample
Breakpoint 1, main () at gdb-sample.c:19
19 n = 1;
1: x/i $pc 0x804835c : movl $0x1,0xfffffffc(%ebp)
```
看到了汇编代码，“n = 1;”对应的汇编代码是“movl $0x1,0xfffffffc(%ebp)”。
并且以后程序每次中断都将显示下一条汇编指定（“si”命令用于执行一条汇编代码——区别于“s”执行一行C代码）：
```shell
(gdb) si
20 n++;
1: x/i $pc 0x8048363 : lea 0xfffffffc(%ebp),%eax
(gdb) si
0x08048366 20 n++;
1: x/i $pc 0x8048366 : incl (%eax)
(gdb) si
21 n--;
1: x/i $pc 0x8048368 : lea 0xfffffffc(%ebp),%eax
(gdb) si
0x0804836b 21 n--;
1: x/i $pc 0x804836b : decl (%eax)
(gdb) si
23 nGlobalVar += 100;
1: x/i $pc 0x804836d : addl $0x64,0x80494fc
```
接下来我们试一下命令“b *”。
为了更简明，有必要先删除目前所有断点（使用“d”命令——Delete breakpoint）：
```shell
(gdb) d
Delete all breakpoints? (y or n) y
(gdb)
```
当被询问是否删除所有断点时，输入“y”并按回车键即可。
下面使用命令“b *main”在 main 函数的 prolog 代码处设置断点（prolog、epilog，分别表示编译器在每个函数的开头和结尾自行插入的代码）：
```shell
(gdb) b *main
Breakpoint 4 at 0x804834c: file gdb-sample.c, line 17.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/liigo/temp/test_jmp/test_jmp/gdb-sample
Breakpoint 4, main () at gdb-sample.c:17
17 {
1: x/i $pc 0x804834c : push %ebp
(gdb) si
0x0804834d 17 {
1: x/i $pc 0x804834d : mov %esp,%ebp
(gdb) si
0x0804834f in main () at gdb-sample.c:17
17 {
1: x/i $pc 0x804834f : sub $0x8,%esp
(gdb) si
0x08048352 17 {
1: x/i $pc 0x8048352 : and $0xfffffff0,%esp
(gdb) si
0x08048355 17 {
1: x/i $pc 0x8048355 : mov $0x0,%eax
(gdb) si
0x0804835a 17 {
1: x/i $pc 0x804835a : sub %eax,%esp
(gdb) si
19 n = 1;
1: x/i $pc 0x804835c : movl $0x1,0xfffffffc(%ebp)
```
此时可以使用“i r”命令显示寄存器中的当前值———“i r”即“Infomation Register”：
```shell
(gdb) i r
eax 0xbffff6a4 -1073744220
ecx 0x42015554 1107383636
edx 0x40016bc8 1073834952
ebx 0x42130a14 1108544020
esp 0xbffff6a0 0xbffff6a0
ebp 0xbffff6a8 0xbffff6a8
esi 0x40015360 1073828704
edi 0x80483f0 134513648
eip 0x8048366 0x8048366
eflags 0x386 902
cs 0x23 35
ss 0x2b 43
ds 0x2b 43
es 0x2b 43
fs 0x0 0
gs 0x33 51
```
当然也可以显示任意一个指定的寄存器值：
```shell
(gdb) i r eax
eax 0xbffff6a4 -1073744220
```
最后一个要介绍的命令是“q”，退出（Quit）GDB调试环境：
```shell
(gdb) q
The program is running. exit anyway? (y or n)
```
## 补充内容
> gdb 教程：[慕课网-Linux C语言指针与内存-第三章](http://www.imooc.com/learn/394)
如果删除源代码, 就无法显示行号等辅助信息了
```shell
gcc -g gdb.c -o gdb.out # -g 支持gdb调试; -o 输出, 默认为 a.out
gdb gdb.out # 进入 gdb 调试环境
enter # 继续执行上条命令
l # 列出源代码, 默认 10 行, 按 l 继续
start # 开始单步调试, 默认 main() 第一行
p a # 查看 a 变量的值
n # 继续到下一行
s # 进入子函数
bt # 查看函数栈
f 1 # 切换函数栈
q 退出调试
```
测试用代码
```c
#include 
void change(int a, int b){
    int tmp=a;
    a=b; b=tmp;
}
void change2(int *a, int *b){
    int tmp=*a;
    *a=*b; *b=tmp;
}
int main(){
    int a=5,b=3;
    change(a,b);
    printf("change:\na=%d\nb=%d\n", a,b);
    change2(&a,&b);
    printf("change2:\na=%d\nb=%d\n", a,b);
}
```