JavaScript、C++和.NET语言，它看起来像编程环境的本地代码。不仅方法因区分大小写
而行为不同；方法和类型也可以根据所处的位置有不同的名称。
Windows运行库提供了一个对象层次结构，它在以Windows开头的名称空间中组织。
这些类没有复制.NET Framework的很多功能；相反，提供了额外的功能，用于在UWP上
运行的应用程序。如表1-3所示。
表1-3
名称空间
说明
Windows.
ApplicationModel
这个名称空间及其子名称空间（如
Windows.ApplicationModel.Contracts）定义了类，用于管理
应用程序的生命周期，与其他应用程序通信
Windows.Data
Windows.Data定义了子名称空间，来处理文本、JSON、
PDF和XML数据
Windows.Devices
地理位置、智能卡、服务设备点、打印机、扫描仪等设备可
以用Windows.Devices子名称空间访问
Windows.Foundation
Windows.Foundation定义了核心功能。集合的接口用名称空
间Windows.Foundation.Collections定义。这里没有具体的集
合类。相反，.NET集合类型的接口映射到Windows运行库
类型
Windows.Media
Windows.Media是播放、捕获视频和音频、访问播放列表和
语音输出的根名称空间
Windows.Networking
这是套接字编程、数据后台传输和推送通知的根名称空间
Windows.Security
Windows.Security.Credentials中的类提供了密码的安全存储
区；Windows.Security.Credentials.UI提供了一个选择器，用
于从用户处获得凭证
Windows.Services. Maps
这个名称空间包含用于定位服务和路由的类
Windows.Storage
有了Windows.Storage及其子名称空间，就可以访问文件和
目录，使用流和压缩
Windows.System
Windows.System名称空间及其子名称空间提供了系统和用
户的信息，也提供了一个启动其他应用程序的启动器
Windows.UI.Xaml
在这个名称空间中，可以找到很多用于用户界面的类型
1.4 Hello, World
下面进入编码，创建一个Hello, 
World应用程序。自20世纪70年代以来，Brian
Kernighan和Dennis Ritchie编写了The C Programming Language 一书，使用Hello, World应
用程序开始学习编程语言就成为一个传统。有趣的是，自C#发明以来，Hello, World的语
法用C# 6改变后，这一简单的程序第一次看起来非常不同。
创建第一个示例不借助于Visual 
Studio，而是使用命令行工具和简单的文本编辑器
（如记事本），以便看到后台会发生什么。之后，就转而使用Visual Studio，因为它便于
编程。
在文本编辑器中输入以下源代码，并用.cs作为扩展名（如HelloWorld.cs）保存它。
Main（）方法是.NET应用程序的入口点。CLR在启动时调用一个静态的Main（）方法。
Main（）方法需要放到一个类中。这里的类称为Program，但是可以给它指定任何名字。
WriteLine是Console类的一个静态方法。Console类的所有静态成员都用第一行中的using声
明打开。using static System.Console打开Console类的静态成员，所以不需要输入类名，就
可以调用方法WriteLine（）（代码文件Dotnet / HelloWorld.cs）：
    using static System.Console;
    class Program
    {
      static void Main()
      {
        WriteLine("Hello, World! ");
      }
    }
如前所述，Hello, World的语法用C# 6略加改变。在C# 6推出之前，using static并不可
用，只能通过using声明打开名称空间。当然，下面的代码仍然适用于C# 
6（代码文件
Dotnet/ HelloWorld2.cs）：
    using System;
    class Program
    {
      static void Main()
      {
        Console.WriteLine("Hello, World! ");
      }
    }
using声明可以减少打开名称空间的代码。编写Hello, World程序的另一种方式是删除
using声明，在调用WriteLine（）方法时，给Console类添加System名称空间（代码文件
Dotnet/HelloWorld3.cs）：
    class Program
    {
      static void Main()
      {
          System.Console.WriteLine("Hello, World! ");
      }
    }
编写源代码之后，需要编译代码来运行它。
1.5 用.NET 4.6编译
对源文件运行C#命令行编译器（csc.exe），就可以编译这个程序，如下所示：
    csc HelloWorld.cs
如果想使用csc命令在命令行上编译代码，就应该知道，.NET命令行工具（包括csc）
只有设置了某些环境变量后才可用。根据安装.NET（和Visual Studio）的方式，计算机可
能设置了这些环境变量，也可能没有设置。
  注意： 如果没有设置环境变量，则有3个选择。第一个选择是在调用csc可执
行文件时添加路径。它位于% 
ProgramFiles 
%\MsBuild\14.0\Bin\csc.exe。如果安装了
dotnet工具，则csc在%ProgramFiles%\dot.net\bin\csc.exe上。第二个选择是在运行csc前，
从命令提示符下运行批处理文件% 
Microsoft 
Visual 
Studio
2015%\Common7\vsvars32.bat，其中%Microsoft Visual Studio 2015%是安装Visual Studio
2015的文件夹。第三个选择、也是最容易的方式，是使用Visual Studio 2015命令提示符
代替Windows命令提示符。要在“开始”菜单中找到Visual Studio 2015命令提示符，选择
Programs | Microsoft Visual Studio 2015 | Visual Studio Tools。Visual Studio 2015命令提示
符只是一个命令提示符窗口，它打开时会自动运行vsvars32.bat。
编译代码，生成一个可执行文件HelloWorld.exe，在命令行上可以运行它。也可以在
Windows资源管理器中运行它，就像运行任何其他可执行文件一样。试一试：
    > csc HelloWorld.cs
    Microsoft (R) Visual C# Compiler version 1.1.0.51109
    Copyright (C) Microsoft Corporation. All rights reserved.
    > HelloWorld
    Hello World!
以这种方式编译可执行程序，会生成一个程序集，其中包含IL（中间语言）代码。程
序集可以使用中间语言反汇编程序（Intermediate Language Disassembler, IL DASM）工具
读取。如果运行ildasm.exe，打开HelloWorld.exe，会发现程序集包含一个Program类型和
一个Main（）方法，如图1-3所示。
图1-3
双击树视图中的MANIFEST节点，显示程序集的元数据信息（如图1-4所示）。这个
程序集会利用mscorlib程序集（因为Console类位于mscorlib程序集里）、一些配置和
HelloWorld程序集的版本。
图1-4
双击Main（）方法，显示该方法的IL代码（如图1-5所示）。不管编译Hello, World代
码的什么版本，结果都是一样的。都是调用mscorlib程序集中定义的
System.Console.WriteLine方法，传递字符串，之后加载字符串Hello, World!。CLR的一个
特性是JIT编译器。运行该应用程序时，JIT编译器把IL代码编译为本地代码。
图1-5
1.6 用.NET Core CLI编译
如果没有Visual Studio的帮助，使用新的.NET Core CLI（Command Line，命令行）就
需要做一些准备，才能编译应用程序。下面看看编译Hello, 
World示例应用程序的新工
具。
1.6.1 设置环境
安装了Visual Studio 2015和最新的更新包后，就可以立即启动CLI工具。否则，就需
要安装.NET 
Core和CLI工具。Windows、Linux和OS 
X的下载指令可以从
http://dotnet.github.io获取。
在Windows上，不同版本的.NET Core运行库以及NuGet包安装在用户配置文件中。使
用.NET时，这个文件夹的大小会增加。随着时间的推移，会创建多个项目，NuGet包不再
存储在项目中，而是存储在这个用户专用的文件夹中。这样做的优势在于，不需要为每个
不同的项目下载NuGet包。这个NuGet包下载后，它就在系统上。因为不同版本的NuGet包
和运行库都是可用的，所有的不同版本都存储在这个文件夹中。不时地检查这个文件夹，
删除不再需要的旧版本，可能很有趣。
安装.NET Core CLI工具，要把dotnet工具作为入口点来启动所有这些工具。开始时：
    > dotnet
会看到，dotnet工具的所有不同选项都可用。
repl（read、eval、print、loop）命令适合于学习和测试简单的C#特性，而无须创建程
序。用dotnet工具启动repl：
    > dotnet repl
这会启动一个交互式repl会话。使用一个变量，可以给Hello, World输入以下语句：
    > using static System.Console;
    > var hello = "Hello, World! ";
    > WriteLine(hello);
输入最后一条语句后，输出就是Hello, World！字符串。
dotnet repl命令不可用于dotnet工具的Preview 2版本，但在将来可以作为其扩展用于该
工具。
1.6.2 构建应用程序
dotnet工具提供了一种简单的方法来创建Hello, 
World应用程序。创建一个新的目录
HelloWorldApp，用命令提示符进入这个目录。然后输入如下命令：
    > dotnet new
这个命令创建一个Program.cs文件（其中包括Hello, 
World应用程序的代码）、一个
NuGet.config文件（定义了应该加载NuGet包的NuGet服务器）和新的项目配置文件
project.json。
  注意： 使用dotnet new，还可以创建库和ASP.NET Web应用程序所需要的初
始文件（使用选项--type）。也可以选择其他编程语言，如F#和Visual Basic（使用选项-
-lang）。
创建的项目配置文件是project.json。这个文件采用JavaScript Object Notation（JSON）
格式，定义了框架应用程序信息，如版本、描述、作者、标签、依赖的库和应用程序支持
的框架。生成的项目配置文件如下面的代码片段所示（代码文件
HelloWorldApp/project.json）：
    {
      "version": "1.0.0-＊",
      "buildOptions": {
        "emitEntryPoint": true
      },
      "dependencies": {
        "NETStandard.Library": "1.0.0-＊"
      },
      "frameworks" : {
        "netstandardapp1.5": {
          "imports": "dnxcore50"
        }
      },
      "runtimes" : {
        "ubuntu.14.04-x64": { },
        "win7-x64": { },
        "win10-x64": { },
        "osx.10.10-x64": { },
        "osx.10.11-x64": { }
      }
    }
通过compilationOptions设置来设置emitEntryPoint。如果把Main（）方法创建为程序
的入口点，这就是必要的。这个Main（）方法在运行应用程序时调用。库不需要这个设
置。
对于依赖关系部分，可以添加程序的所有依赖项，如需要编译程序的额外NuGet包。
默认情况下，NetStandard.Library添加为一个依赖项。NetStandard.Library是一个引用的
NuGet包，这个包引用了其他NuGet包。有了它，就可以避免添加很多其他的包，如
Console类的System.Console、泛型集合类的System.Collections等。NetStandard.Library 1.0
是一个标准，定义了所有.NET平台必须支持的一组程序集，在网站
https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/standard-platform.md
上，可以找到一长串.NET 1.0中的程序集及其版本号，以及.NET标准的1.1、1.2、1.3和1.4
版本中添加的程序集。
NetStandard.Library 1.0有一个依赖项，可以支持.NET Framework 4.5.2及以上版本
（对.NET 4、4.5、4.5.1的支持结束于2016年1月）、.NET Core 1.0、UWP 10.0和其他.NET
Framework，如Windows Phone Silverlight 8.0、Mono和Mono/Xamarin。对1.3版本的修改有
限支持.NET 4.6、.NET Core 1.0、UWP 10.0和Mono/Xamarin平台。1.4版本有限支持.NET
4.6.1、.NET Core 1.0和Mono/Xamarin平台，但版本越新，可用的程序集列表就越大。
project.json中的frameworks部分列出了应用程序支持的.NET 
Framework。默认情况
下，应用程序只为.NET 
Core 
1.0构建为netstandardapp1.5 
moniker指定的名称。
netstandardapp1.5与.NET 
Core 
1.0所构建的应用程序一起使用。通过库可以使用
netstandard1.0 moniker。这允许在.NET Core应用程序和使用.NET Framework的应用程序中
使用库。netstandardapp1.5内的imports部分引用旧名称dnxcore50，该旧名称映射到新名字
上。这允许使用仍在使用旧名称的包。
.NET Core是框架的新开源版本，可用于Windows、Linux和OS X。应该支持的运行库
需要添加到runtimes部分。前面的代码片段显示了对Ubuntu Linux发行版、Windows 7（也
允许在Windows 8上运行应用程序）、Windows 10和OS X的支持。
添加字符串net46，为.NET Framework 4.6构建程序：
    "frameworks" : {
      "netstandardapp1.5" : { }
      "net46" : { }
    }
给frameworks部分添加net46，就不再支持非Windows运行库，因此需要删除这些运行
库。
还可以添加额外的元数据，比如描述、作者信息、标签、项目和许可URL：
    "version": "1.0.0-＊",
    "description": "HelloWorld Sample App for Professional C#",
    "authors": [ "Christian Nagel" ],
    "tags": [ "Sample", "Hello", "Wrox" ],
    "projectUrl": "http://github.com/professionalCSharp/",
    "licenseUrl": "",
给project.json文件添加多个框架时，可以在frameworks下面的dependencies部分中为每
个框架指定专门的依赖项。dependencies部分中指定的依赖项，若处于frameworks部分所
在的层次上，就指定了所有框架共同的依赖项。
有了项目结构后，就可以使用如下命令下载应用程序的所有依赖项：
    > dotnet restore
此时，命令提示符定位在project.json文件所在的目录。这个命令会下载应用程序所需
要的所有依赖项，即project.json文件中定义的项。指定版本1.0.0 - *，会得到版本1.0.0, *
表示可用的最新版本。在project.lock.json文件中，可以看到检索了什么NuGet包的哪个版
本，包括依赖项的依赖项。记住，包存储在用户专门的文件夹中。
要编译应用程序，启动命令dotnet 
build，输出如下——为.NET 
Core 
1.0和.NET
Framework 4.6编译：
    > dotnet build
    Compiling HelloWorldApp for .NETStandardApp, Version=1.5"
    Compilation succeeded.
      0 Warning(s)
      0 Error(s)
    Time elapsed 00:00:02.6911660
    Compiling HelloWorldApp for .NETFramework, Version=v4.6
    Compilation succeeded.
      0 Warning(s)
      0 Error(s)
    Time elapsed 00:00:03.3735370
编译过程的结果是bin/debug/[netstandardapp1.5|net46]文件夹中包含Program类的IL代
码的程序集。如果比较.NET Core与.NET 4.6的编译结果，会发现一个包含IL代码和.NET
Core的DLL，和包含IL代码和.NET 
4.6的EXE。为.NET 
Core生成的程序集有一个对
System.Console程序集的依赖项，而.NET 4.6程序集在mscorlib程序集中找到Console类。
还可以使用下面的命令行把程序编译成本地代码：
    > dotnet build --native
编译为本地代码，会加快应用程序的启动，消耗更少的内存。本地编译过程会把应用
程序的IL代码以及所有依赖项编译为单一的本地映像。别指望.NET Core的所有功能都可
用于编译为本地代码，但是随着时间的推移，微软公司的继续发展，越来越多的应用程序
可以编译为本地代码。
要运行应用程序，可以使用dotnet命令：
    > dotnet run
要使用特定版本的框架启动应用程序，可以使用-framework选项。这个框架必须用
project.json文件配置：
    > dotnet run --framework net46
启动bin/debug目录中的可执行程序，也可以运行应用程序。
  注意： 前面是在Windows上构建和运行Hello, World应用程序，而dotnet工具