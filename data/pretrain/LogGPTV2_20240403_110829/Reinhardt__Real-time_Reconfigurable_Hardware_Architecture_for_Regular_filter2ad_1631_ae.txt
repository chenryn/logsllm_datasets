### Inspection and Policy Handling

When Reinhardt detects a match, the policy handler executes a predefined action, such as generating an alert, dropping the packet, or redirecting it to alternative routes (e.g., a honeypot).

### Rule Coverage Evaluation

To evaluate the rule coverage of the Reinhardt NIDS/IPS, we attempted to deploy the Snort 2.9.7 default ruleset, which contains 6,411 signatures, on the Reinhardt system. The hardware configuration used was a 24 × 160 × 8 core, with four submissions. As a result, Reinhardt accepted 75% of the signatures.

For a more detailed analysis, we measured the core usage by the occupied heights per header (Figure 16). The signatures required a total of 9,510 core heights, which significantly exceeded the capacity of Reinhardt, even with resubmission (i.e., 160 × 4 = 640). However, these signatures were distributed across 385 headers, with an average height usage of 138 per header. This indicates that Reinhardt could accommodate all signatures, except for two headers (Header 1 and Header 2), by dynamically swapping activated patterns using its fast-dynamic configurability.

The two headers requiring 3,885 and 2,767 heights, respectively, are general rules for HTTP and SQL, where many similar patterns from different signatures were stacked. While we do not delve into the details of signature optimization in this paper, we found that by merging duplicates and manually optimizing the patterns, their usage could be reduced by up to 50%. Consequently, Reinhardt NIDS/IPS could accept 87% of the signatures. We anticipate that with a more fine-grained categorization, all signatures could be accommodated.

### Performance Evaluation

The performance of the Reinhardt NIDS/IPS is equivalent to the naive Reinhardt measured in §5, achieving 10 Gbps. Although there is a slight delay due to lookup table searches, this delay is minimal (a few nanoseconds) and virtually undetectable on the source and destination hosts.

### Implications

This result demonstrates that Reinhardt can effectively function as a high-performance NIDS/IPS. A key implication is that the real-time updatability of Reinhardt allows patterns to be dynamically loaded onto the core at the appropriate time, enabling a greater number of active signatures than the core's static capacity. If signatures are well-organized by header, Reinhardt NIDS/IPS can handle a comparable number of patterns to software-based systems. This advanced feature is challenging to achieve with previous FPGA-based REM solutions.

### PCRE Replacement in Snort IDS

In §2.1, we discussed the performance of software-based REM using Snort IDS. Here, we present Reinhardt as a replacement for the PCRE engine to enhance performance.

#### Experiment Setup

Figure 17 illustrates the overall design of Snort IDS with Reinhardt. We modified Snort IDS to copy packets to Reinhardt for matching, rather than using the PCRE engine. Matching results are then obtained from Reinhardt. Regex patterns in signatures (i.e., the `pcre` option) are parsed into Reinhardt logic and stored in the hardware.

#### Performance Evaluation

Figure 18 shows the performance variations of Snort IDS with Reinhardt. The test environment is the same as that used for the PCRE throughput benchmark (described in §2.1). A notable finding is that Reinhardt provides stable performance (i.e., 7.6, 4.3, and 3.0 Gbps) regardless of the complexity of regex patterns, unlike the PCRE engine. However, there is a gradual decrease in throughput from 7.6 Gbps to 3.0 Gbps as the number of rules increases from 1 to 100. This degradation is primarily due to hidden overheads in Snort IDS, such as checking the existence of other rule options (e.g., `offset`, `distance`, and `within`). We believe that optimizing Snort's internal procedures for Reinhardt could eliminate this degradation. The latency improvement is significant, with only a negligible overhead due to packet copying from software to hardware.

Compared to the original PCRE engine, the overall throughput with Reinhardt is significantly improved, up to 5,028 times. Even when ignoring the 0.6 Mbps on the PCRE engine for 100/Complex, there is a substantial performance improvement of up to 65 times.

### Implications

This case study demonstrates hardware acceleration for REM, made possible by Reinhardt's ability to reflect software changes immediately. Previous FPGA-based matching solutions typically support fixed patterns or require a long time to change. Reinhardt, however, presents a novel approach to using FPGA as a hardware accelerator for REM. Acceleration for Snort has traditionally been achieved with GPUs [6, 43, 45, 75, 76] due to their efficient programmability. However, this involves significant overhead for copying packet payloads between network interfaces, CPU, and GPU, and for scheduling between GPU cores [12, 15, 16, 24, 70]. In contrast, Reinhardt operates in a bump-in-the-wire configuration, resulting in much lower performance loss, particularly in latency.

### Related Work

**FPGA-based REM:**
Sidhu et al. [62] proposed a one-hot encoding scheme to express NFA with circuit blocks, inspiring subsequent studies [30, 44]. Some studies [29, 51, 77] suggested resource-efficient regex circuits, while others [48, 50, 80, 81] focused on high-performance FPGA-based REM.

**Configurable FPGA-based REM:**
One strategy is to generate FPGA source codes (i.e., HDL) from regex patterns automatically [9, 48, 65]. However, compiling the generated HDL cores to FPGA remains a challenge and is far from real-time configurability. Memory-based approaches [8, 11, 68] and CPU-FPGA hybrid approaches [63] can be configurable but are memory-intensive and work sequentially, leading to less performance than circuit-based ones [10, 83]. Additionally, they cannot support constraint repetitions (i.e., `*`, `+`), making it difficult to handle signatures with NOP sleds. To our knowledge, Reinhardt is the first work to propose real-time reconfigurable REM on FPGA [79].

**Programmable Dataplane-based REM:**
P4 allows limited syntax in pattern matching. For example, DeepMatch [31] and Jepsen et al. [37] proposed pattern matching with P4. However, they do not support frequently used syntax (e.g., `{m,n}`, `[^]`, and `[a-f]`). Reinhardt, on the other hand, specializes in full regex matching syntax.

### Conclusion

FPGA-based REM offers high performance but lacks flexibility due to the time-consuming process of updating patterns. To address this, we introduced Reinhardt, an improved hardware architecture that supports dynamic updates through reconfigurable cells. Our evaluation and case studies demonstrate that Reinhardt updates patterns promptly without service interruption and serves well as a high-performance NIDS/IPS and hardware accelerator for REM. We believe Reinhardt can be positioned as an advanced DPI that adeptly responds to frequent changes and can be implemented as a specialized regex processor (e.g., ASIC) in the future.

### Acknowledgments

This research was supported by the Engineering Research Center Program through the National Research Foundation of Korea (NRF) funded by the Korean Government MSIT (NRF-2018R1A5A1059921).

### References

[References listed here]

---

This optimized version aims to make the text more coherent, clear, and professional. It also ensures that the content flows logically and is easy to follow.