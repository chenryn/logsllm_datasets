performs the inspection. When Reinhardt finds any matches, the
Figure 15: NIDS/NIPS using Reinhardt
Figure 16: The core ‘height’ usage distribution by headers
policy handler follows the predefined action; alert, drop or redirect
the packet to alternative routes (e.g., honeypot).
Rule coverage evaluation: To measure the coverage of Rein-
hardt NIDS/IPS, we try to deploy Snort 2.9.7 default ruleset (6,411
signatures) on Reinhardt NIDS/IPS with the 24 × 160 × 8 core in-
cluding 4 times submissions. As a result, the Reinhardt NIDS/IPS
accepts 75% of the signatures.
For detailed analysis, we measure the core usage of patterns by
the occupied heights per each header (Figure 16). The signatures
require a total of 9,510 core heights and it far exceeds the capacity
of Reinhardt even considering resubmitting (i.e., 160 × 4 = 640).
However, they are distributed across 385 headers, and the aver-
age height usage for each header is only 138. That is, Reinhardt
could accommodate all signatures, except two exceeding headers 1
and 2, by swapping the activated patterns on incoming packets by
exploiting the fast-dynamic configurability of Reinhardt.
The two huge headers requiring 3,885 and 2,767 heights, re-
spectively, are general rules for HTTP and SQL, so a lot of similar
patterns were indiscreetly stacked from different signatures. While
we omit details about it in this paper since signature optimization
is beyond the scope of this paper, we could reduce their usage up to
50% by merging duplicates and manually optimizing the patterns.
As a result, the Reinhardt NIDS/IPS could accept more signatures
to 87%. We expect to accommodate all signatures if they are cate-
gorized in a more fine-grained fashion.
Performance evaluation: The performance of the Reinhardt
NIDS/IPS is equal to the naive Reinhardt we measured in §5 (i.e.,
10 Gbps). In fact, some delays are added to search the lookup table,
but this delay is only a few nanoseconds that are virtually hard to
measure on the source and destination hosts.
Implication: This result demonstrates that Reinhardt can ef-
fectively work as a high-performance NIDS/IPS. An important im-
plication is that the real-time updatability of Reinhardt allows the
patterns to be dynamically loaded on the core at the appropriate
time so that the total number of active signatures can be much
21,22,2331,32, ……Memory ID10……AlertAnyIP_10.0.0.1DropActiontcp_22HeaderAlertReinhardt SoftwareAlertRedirectDropFwd.Five-tuple Header ParserPattern Converter(Content / PCRE)Signature (e.g., alert tcp any any -> $HOME any (content:"aaa"; pcre:”[a-z]+”;))MemoryInput QueueLookupFetchPolicy handlerReinhardt CoreListenerReinhardt HardwareLookup TablePkt.Header IDs 16111622273238475563152829638564040020025004000Reinhardt ‘height’ usage Used for content (Plain text)Used for prce (Regex)628ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Taejune Park, Jaehyun Nam, Seung Ho Na, Jaewoong Chung, and Seungwon Shin
Figure 17: Snort IDS with Reinhardt-based REM
∗ Simple and complex regex patterns contain 1.6 and 7.6 metacharacters on average.
Figure 18: Performance comparison for Snort acceleration
greater than the capacity of the core. Therefore, if signatures are
well established on each header, Reinhardt NIDS/IPS can accept the
comparable amount of patterns as software. This advanced feature
is difficult to perform with previous FPGA-based REM.
6.2 PCRE Replacement in Snort IDS
In §2.1, we have presented the performance of software-based REM
by borrowing Snort IDS. Here, we present Reinhardt as the replace-
ment of the PCRE engine to accelerate the performance.
Experiment setup: Figure 17 shows the overall design of Snort
IDS with Reinhardt. We have modified Snort IDS to copy packets to
Reinhardt to perform matching on Reinhardt instead of the PCRE
engine. A matching result is replaced to take from Reinhardt, not
the PCRE engine. Regex patterns in signatures (i.e., the pcre option)
are parsed into Reinhardt logic and stored in Reinhardt.
Performance evaluation: Figure 18 shows the performance
variations of Snort IDS with Reinhardt. Here, the test environment
is the same as that of the PCRE throughput benchmark (described
in §2.1). One of the conspicuous results is that Reinhardt provides
stable performance (i.e., 7.6, 4.3, and 3.0 Gbps) regardless of the
complexity of regex patterns, unlike the PCRE engine. Unfortu-
nately, there are gradual throughput degradations from 7.6 Gbps to
3.0 Gbps as the number of rules increases from 1 to 100, but these
throughput degradations mostly come from the hidden overheads
in Snort IDS, which are the iterations to check the existences of
other rule options (e.g., offset, distance, and within options) for each
rule. Therefore, we believe that if the Snort internal procedure can
be optimized in consideration of Reinhardt, this degradation can be
eliminated. The latency improvement is remarkable. Even if there is
slight overhead due to packet copying from software to hardware,
it is below a few us negligible at this latency scale of Snort IDS.
Compared to those with the original PCRE engine, the overall
throughput with Reinhardt is significantly improved up to x5,028.
Even though we ignore 0.6 Mbps on the PCRE engine of 100/Com-
plex, there is a significant performance improvement of up to x65.
Implication: This case study is a kind of hardware acceleration
for REM, and it is possible because Reinhardt can immediately re-
flect software changes. Considering previous FPGA-based matching
solutions that only support fixed patterns or take a long time to
change, Reinhardt first presents how FPGA can be used as a hard-
ware accelerator for REM; Acceleration for Snort has been usually
with GPU [6, 43, 45, 75, 76] owing to its efficient programmability
in deploying patterns. However, it should involve critical overhead
for copying packet payload from network interfaces to CPU and
from CPU to GPU, and for scheduling between the GPU cores
[12, 15, 16, 24, 70]. Reinhardt, however, works in bump-in-the-wire,
so that has much less loss in performance, particularly latency.
7 RELATED WORK
FPGA-based REM: Sidhu et al. [62] proposed a one-hot encod-
ing scheme to express NFA with circuit blocks, and its subsequent
studies [30, 44] inspire Reinhardt. Some studies [29, 51, 77] sug-
gested resource efficient regex circuits. Other studies [48, 50, 80, 81]
focused on high-performance FPGA-based REM.
Configurable FPGA-based REM: One strategy is generating
FPGA source codes (i.e. HDL) from regex patterns automatically
[9, 48, 65]. However, compiling the generated HDL cores to FPGA
remains and is far from real-time configurability. Memory-based
approaches can be configurable [8, 11, 68], and Sidler et al. [63] pro-
posed CPU-FPGA hybrid approach. However, as they are memory-
intensive, they should work in sequential processing and cannot
fully support massive parallel processing, i.e., less performance than
circuit-based ones [10, 83]. Also, in security aspects, they cannot
support constraint repetitions (i.e., *, +), so it is difficult to handle a
signature including such NOP sleds often prepended before a shell-
code in remote exploit payloads to make an attack more reliable
[10, 83]. To the best of our knowledge, Reinhardt is the first work
that proposes the real-time reconfigurable REM on FPGA [79].
Programmable-dataplane-based REM: P4 allows a limited
syntax in pattern matching. For example, DeepMatch [31] and
Jepsen et al [37] proposed a way of pattern matching with P4.
However, while supporting string matching and glob patterns, they
do not allow frequently used syntax (e.g., {m,n}, [^], and [a-f]).
Whereas, Reinhardt is specialized in pattern matching, supporting
the full regex matching syntax.
8 CONCLUSION
FPGA-based REM satisfies high-performance, but flexibility is a
significant limitation as it involves a time-consuming process to
update patterns. To address this, we have presented Reinhardt, an
improved hardware architecture of implementing regex with its
reconfigurable cells to support dynamic updates. Our evaluation and
case studies demonstrate that Reinhardt updates patterns promptly
without service interruption and serves well as a high-performance
NIDS/IPS and hardware acceleration for REM. We believe that
Reinhardt can be positioned as an advanced DPI that is adept at
responding to frequent changes and can also be implemented as a
specialized regex processor (e.g., ASIC) in the future.
PCRE?Host SoftwareMatching RulePCRE EngineResultPkt.Rule ParserSignature (e.g., alert tcp any any -> $HOME any (content:"aaa"; pcre:”[a-z]+”;))Pkt.Copy Pkt.Result                 ReinhardtHardwareMatching…Regex patternsin Reinhardt logic7.6G7.6G7.6G7.6G7.2G6.8G4.3G4.3G3.0G3.0Gx28x65x61x5028153M67.2M49.0M0.6M629Reinhardt: Real-time Reconfigurable Hardware Architecture for Regular Expression Matching in DPI
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
ACKNOWLEDGMENTS
This research was supported by the Engineering Research Center
Program through the National Research Foundation of Korea (NRF)
funded by the Korean Government MSIT (NRF-2018R1A5A1059921).
REFERENCES
[1] 2021. CVE Detail. https://www.cvedetails.com.
[2] 2021. Titan IC RXP. https://www.mellanox.com/titan-ic.
[3] Mohammad Aazam and Eui-Nam Huh. 2015. E-HAMC: Leveraging Fog comput-
ing for emergency alert service. In 2015 IEEE International Conference on Pervasive
Computing and Communication Workshops (PerCom Workshops). IEEE, 518–523.
[4] Tamer AbuHmed, Abedelaziz Mohaisen, and DaeHun Nyang. 2008. A sur-
vey on deep packet inspection for intrusion detection systems. arXiv preprint
arXiv:0803.0037 (2008).
[5] Patrick Kwadwo Agyapong, Mikio Iwamura, Dirk Staehle, Wolfgang Kiess, and
Anass Benjebbour. 2014. Design considerations for a 5G network architecture.
IEEE Communications Magazine 52, 11 (2014), 65–75.
[6] Igor M Araújo, Carlos Natalino, Ádamo L Santana, and Diego L Cardoso. 2018.
Accelerating VNF-based Deep Packet Inspection with the use of GPUs. In 2018
20th International Conference on Transparent Optical Networks (ICTON). IEEE,
1–4.
[7] Kubilay Atasu, Raphael Polig, Jonathan Rohrer, and Christoph Hagleitner. 2013.
Exploring the design space of programmable regular expression matching accel-
erators. Journal of Systems Architecture 59, 10 (2013), 1184–1196.
[8] Zachary K Baker, Hong-Jip Jung, and Viktor K Prasanna. 2006. Regular expres-
sion software deceleration for intrusion detection systems. In 2006 International
Conference on Field Programmable Logic and Applications. IEEE, 1–8.
[9] Joao Bispo, Ioannis Sourdis, Joao MP Cardoso, and Stamatis Vassiliadis. 2006.
Regular expression matching for reconfigurable packet inspection. In Field Pro-
grammable Technology, 2006. FPT 2006. IEEE International Conference on. IEEE,
119–126.
[10] Joao Bispo, Ioannis Sourdis, Joao MP Cardoso, and Stamatis Vassiliadis. 2007.
Synthesis of regular expressions targeting fpgas: Current status and open issues.
In International Workshop on Applied Reconfigurable Computing. Springer, 179–
190.
[11] Benjamin C Brodie, David E Taylor, and Ron K Cytron. 2006. A scalable ar-
chitecture for high-throughput regular-expression pattern matching. In 33rd
International Symposium on Computer Architecture (ISCA’06). IEEE, 191–202.
[12] Shuai Che, Jie Li, Jeremy W Sheaffer, Kevin Skadron, and John Lach. 2008. Acceler-
ating compute-intensive applications with GPUs and FPGAs. In 2008 Symposium
on Application Specific Processors. IEEE, 101–107.
[13] Check Point Software Technologies Ltd. 2019.
How quick are turn-
around times for IPS signature updates addressing newly found vulnerabili-
ties. https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_
doGoviewsolutiondetails=&solutionid=sk98937.
[14] Hao Chen, Yu Chen, and Douglas H Summerville. 2010. A survey on the applica-
tion of FPGAs for network infrastructure security. IEEE Communications Surveys
& Tutorials 13, 4 (2010), 541–561.
[15] Jason Cong, Zhenman Fang, Michael Lo, Hanrui Wang, Jingxian Xu, and Shao-
chong Zhang. 2018. Understanding performance differences of FPGAs and GPUs.
In 2018 IEEE 26th Annual International Symposium on Field-Programmable Custom
Computing Machines (FCCM). IEEE, 93–96.
[16] Ben Cope, Peter YK Cheung, Wayne Luk, and Lee Howes. 2010. Performance
comparison of graphics processors to reconfigurable logic: A case study. IEEE
Transactions on computers 59, 4 (2010), 433–448.
[17] CORSA. 2019. Is Your Network Security Keeping Up? https://www.corsa.com/wp-
content/uploads/PDFs/Corsa_WP-Is_Your_Network_Security_Keeping_Up.
pdf.
[18] Emerging Threats. 2021.
Emerging Threats Rulesets.
emergingthreats.net, https://doc.emergingthreats.net.
[19] GSMECIEG ETSI. 2015. 004, Mobile Edge Computing (MEC) Service Scenarios
https://rules.
[20] Gilberto Fernandes, Joel JPC Rodrigues, Luiz Fernando Carvalho, Jalal F Al-
Muhtadi, and Mario Lemes Proença. 2019. A comprehensive survey on network
anomaly detection. Telecommunication Systems 70, 3 (2019), 447–489.
[21] FierceWireless. 2019. Deep Packet Inspection: Getting the Most Out of
5G. https://www.fiercewireless.com/sponsored/deep-packet-inspection-getting-
most-out-5g.
[22] FireEye. 2021. FireEye Dynamic Threat Intelligence Cloud.
threatprotectworks.com/Dynamic-Threat-Intelligence-cloud.asp.
[23] Daniel Firestone, Andrew Putnam, Sambhrama Mundkur, Derek Chiou, Alireza