    1
如果项目中有用到这些的话，一定要避免在字符串中拼接不可信数据。
## 其他 XSS 防范措施
虽然在渲染页面和执行 JavaScript 时，通过谨慎的转义可以防止 XSS 的发生，但完全依靠开发的谨慎仍然是不够的。以下介绍一些通用的方案，可以降低
XSS 带来的风险和后果。
###  Content Security Policy
严格的 CSP 在 XSS 的防范中可以起到以下的作用：
  * 禁止加载外域代码，防止复杂的攻击逻辑。
  * 禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。
  * 禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。
  * 禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。
  * 合理使用上报可以及时发现 XSS，利于尽快修复问题。
关于 CSP 的详情，请关注前端安全系列后续的文章。
###  输入内容长度控制
对于不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度。
###  其他安全措施
  * HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。
  * 验证码：防止脚本冒充用户提交危险操作。
## XSS 的检测
上述经历让小明收获颇丰，他也学会了如何去预防和修复 XSS 漏洞，在日常开发中也具备了相关的安全意识。但对于已经上线的代码，如何去检测其中有没有 XSS
漏洞呢？
经过一番搜索，小明找到了两个方法：
  1. 使用通用 XSS 攻击字符串手动检测 XSS 漏洞。
  2. 使用扫描工具自动检测 XSS 漏洞。
在[Unleashing an Ultimate XSS
Polyglot](https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot)一文中，小明发现了这么一个字符串：
    jaVasCript:/*-/*`/*`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//x3csVg/x3e
它能够检测到存在于 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等多种上下文中的
XSS 漏洞，也能检测
eval()、setTimeout()、setInterval()、Function()、innerHTML、document.write() 等 DOM
型 XSS 漏洞，并且能绕过一些 XSS 过滤器。
小明只要在网站的各输入框中提交这个字符串，或者把它拼接到 URL 参数上，就可以进行检测了。
    http://xxx/search?keyword=jaVasCript%3A%2F*-%2F*%60%2F*%60%2F*%27%2F*%22%2F**%2F(%2F*%20*%2FoNcliCk%3Dalert()%20)%2F%2F%250D%250A%250d%250a%2F%2F%3C%2FstYle%2F%3C%2FtitLe%2F%3C%2FteXtarEa%2F%3C%2FscRipt%2F--!%3E%3CsVg%2F%3CsVg%2FoNloAd%3Dalert()%2F%2F%3E%3E
除了手动检测之外，还可以使用自动扫描工具寻找 XSS 漏洞，例如
[Arachni](https://github.com/Arachni/arachni)、[Mozilla HTTP
Observatory](https://github.com/mozilla/http-observatory/)、[w3af](https://github.com/andresriancho/w3af) 等。
## XSS 攻击的总结
我们回到最开始提出的问题，相信同学们已经有了答案：
  1. XSS 防范是后端 RD 的责任，后端 RD 应该在所有用户提交数据的接口，对敏感字符进行转义，才能进行下一步操作。  
> 不正确。因为：
>
>     * 防范存储型和反射型 XSS 是后端 RD 的责任。而 DOM 型 XSS 攻击不发生在后端，是前端 RD 的责任。防范 XSS 是需要后端
> RD 和前端 RD 共同参与的系统工程。
>     * 转义应该在输出 HTML 时进行，而不是在提交用户输入时。
  2. 所有要插入到页面上的数据，都要通过一个敏感字符过滤函数的转义，过滤掉通用的敏感字符后，就可以插入到页面中。  
> 不正确。  
>  不同的上下文，如 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS
> 样式表等，所需要的转义规则不一致。  
>  业务 RD 需要选取合适的转义库，并针对不同的上下文调用不同的转义规则。
整体的 XSS 防范是非常复杂和繁琐的，我们不仅需要在全部需要转义的位置，对数据进行对应的转义。而且要防止多余和错误的转义，避免正常的用户输入出现乱码。
虽然很难通过技术手段完全避免 XSS，但我们可以总结以下原则减少漏洞的产生：
  * 利用模板引擎  
开启模板引擎自带的 HTML 转义功能。例如：  
在 ejs 中，尽量使用  而不是 ；  
在 doT.js 中，尽量使用 {{! data } 而不是 {{= data }；  
在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 freemarker.core.OutputFormat。
  * 避免内联事件  
尽量不要使用 onLoad=”onload(‘{{data}}’)”、onClick=”go(‘{{action}}’)” 这种拼接内联事件的写法。在
JavaScript 中通过 .addEventlistener() 事件绑定会更安全。
  * 避免拼接 HTML  
前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute
之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。
  * 时刻保持警惕  
在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。
  * 增加攻击难度，降低攻击后果  
通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。
  * 主动检测和发现  
可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。
## XSS 攻击案例
####  QQ 邮箱 m.exmail.qq.com 域名反射型 XSS 漏洞
攻击者发现 http://m.exmail.qq.com/cgi-bin/login?uin=aaaa&domain=bbbb 这个 URL 的参数
uin、domain 未经转义直接输出到 HTML 中。
于是攻击者构建出一个 URL，并引导用户去点击：  
http://m.exmail.qq.com/cgi-bin/login?uin=aaaa&domain=bbbb%26quot%3B%3Breturn+false%3B%26quot%3B%26lt%3B%2Fscript%26gt%3B%26lt%3Bscript%26gt%3Balert(document.cookie)%26lt%3B%2Fscript%26gt%3B
用户点击这个 URL 时，服务端取出 URL 参数，拼接到 HTML 响应中：
    "+"...
浏览器接收到响应后就会执行 alert(document.cookie)，攻击者通过 JavaScript 即可窃取当前用户在 QQ 邮箱域名下的
Cookie ，进而危害数据安全。
####  新浪微博名人堂反射型 XSS 漏洞
攻击者发现 http://weibo.com/pub/star/g/xyyyd 这个 URL 的内容未经过滤直接输出到 HTML 中。
于是攻击者构建出一个 URL，然后诱导用户去点击：
http://weibo.com/pub/star/g/xyyyd”>
用户点击这个 URL 时，服务端取出请求 URL，拼接到 HTML 响应中：
    ">按分类检索
浏览器接收到响应后就会加载执行恶意脚本
//xxxx.cn/image/t.js，在恶意脚本中利用用户的登录状态进行关注、发微博、发私信等操作，发出的微博和私信可再带上攻击
URL，诱导更多人点击，不断放大攻击范围。这种窃用受害者身份发布恶意内容，层层放大攻击范围的方式，被称为“XSS 蠕虫”。
## 扩展阅读：Automatic Context-Aware Escaping
上文我们说到：
  1. 合适的 HTML 转义可以有效避免 XSS 漏洞。
  2. 完善的转义库需要针对上下文制定多种规则，例如 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等等。
  3. 业务 RD 需要根据每个插入点所处的上下文，选取不同的转义规则。
通常，转义库是不能判断插入点上下文的（Not Context-Aware），实施转义规则的责任就落到了业务 RD 身上，需要每个业务 RD 都充分理解
XSS 的各种情况，并且需要保证每一个插入点使用了正确的转义规则。
这种机制工作量大，全靠人工保证，很容易造成 XSS 漏洞，安全人员也很难发现隐患。
2009年，Google 提出了一个概念叫做：[Automatic Context-Aware
Escaping](https://security.googleblog.com/2009/03/reducing-xss-by-way-of-automatic.html)。
所谓 Context-Aware，就是说模板引擎在解析模板字符串的时候，就解析模板语法，分析出每个插入点所处的上下文，据此自动选用不同的转义规则。这样就减轻了业务 RD
的工作负担，也减少了人为带来的疏漏。
在一个支持 Automatic Context-Aware Escaping 的模板引擎里，业务 RD 可以这样定义模板，而无需手动实施转义规则：
        {{.title}}
        {{.content}}
模板引擎经过解析后，得知三个插入点所处的上下文，自动选用相应的转义规则：
        {{.title | htmlescaper}}
        {{.content | htmlescaper}}
目前已经支持 Automatic Context-Aware Escaping 的模板引擎有：
  * [go html/template](https://golang.org/pkg/html/template/)
  * [Google Closure Templates](https://developers.google.com/closure/templates/docs/security)
## 课后作业：XSS 攻击小游戏
以下是几个 XSS 攻击小游戏，开发者在网站上故意留下了一些常见的 XSS 漏洞。玩家在网页上提交相应的输入，完成 XSS 攻击即可通关。
在玩游戏的过程中，请各位读者仔细思考和回顾本文内容，加深对 XSS 攻击的理解。
[alert(1) to win](https://alf.nu/alert1)  
[prompt(1) to win](http://prompt.ml/)  
[XSS game](https://xss-game.appspot.com/)
## 参考文献
  * Wikipedia. [Cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting), Wikipedia.
  * OWASP. [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://www.owasp.org/index.php/XSS_\(Cross_Site_Scripting)_Prevention_Cheat_Sheet), OWASP.
  * OWASP. [Use the OWASP Java Encoder](https://github.com/OWASP/owasp-java-encoder/wiki/2)-Use-the-OWASP-Java-Encoder), GitHub.
  * Ahmed Elsobky. [Unleashing an Ultimate XSS Polyglot](https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot), GitHub.
  * Jad S. Boutros. [Reducing XSS by way of Automatic Context-Aware Escaping in Template Systems](https://security.googleblog.com/2009/03/reducing-xss-by-way-of-automatic.html), Google Security Blog.
  * Vue.js. [v-html – Vue API docs](https://vuejs.org/v2/api/#v-html), Vue.js.
  * React. [dangerouslySetInnerHTML – DOM Elements](https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml), React.
## 下期预告
前端安全系列文章将对 XSS、CSRF、网络劫持、Hybrid 安全等安全议题展开论述。下期我们要讨论的是 CSRF 攻击，敬请关注。
## 作者介绍
李阳，美团点评前端工程师。2016年加入美团点评，负责美团外卖 Hybrid 页面性能优化相关工作。