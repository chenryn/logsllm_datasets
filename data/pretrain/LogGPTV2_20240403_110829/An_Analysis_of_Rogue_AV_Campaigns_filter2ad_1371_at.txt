STRACT and AND operations (or a relaxed variant of OBDDs that allows more efﬁcient
ANDABSTRACT and AND) can further improve the performance of NFA-OBDDs.
5 Matching Multiple Input Symbols
The preceding sections assumed that only one input alphabet is processed in each
step. However, there is growing interest to develop techniques for multi-byte matching,
i.e., matching multiple input symbols in one step. Prior work has shown that multi-byte
matching can improve the throughput of NFAs [21,22]. We present one such technique,
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
73
k-stride NFAs [21], and show that OBDDs can further improve the performance of k-
stride NFAs.
A k-stride NFA matches k symbols of the input in a single step. Given a traditional
(i.e., 1-stride) -free NFA (Q, Σ, δ, q0, F ), a k-stride NFA is a 5-tuple (Q, Σk, Γ ,
q0, F ), whose input symbols are k-grams, i.e., elements of Σk. The set of states and
accepting states of the k-stride NFA are the same as those for the 1-stride NFA. Intu-
itively, the transition relation Γ of the k-stride NFA is computed as a k-step closure
of δ, i.e., (s, σ1σ2 . . . σk, t) ∈ Γ if and only if the state t is reachable from state s in
the original NFA via transitions labeled σ1, σ2, . . ., σk. The algorithm to compute Γ
from δ must also consider cases where the length of the input string is not a multiple
of k. Intuitively, this is achieved by padding the input string with a new “do-not-care”
symbol, and introducing this symbol in the labels of selected transitions. We refer the
interested reader to prior work [21,22] for a detailed description of the construction.
Figure 7 presents an example of a 2-stride NFA corresponding to the NFA in Figure 2.
The do-not-care symbol is denoted by a “•”. Thus, for instance, an input string 101
would be padded with • to become 101•. The 2-stride NFA processes digrams in each
step. Thus, the ﬁrst step would result in a transition from state A to itself A (because
of the transition labeled 10), followed by a transition from A to B when it reads the
second digram 1•, thereby accepting the input string.
A k-stride NFA (Q, Σk, Γ , q0, F ) can readily be converted into a k-stride NFA-
OBDD using the same approach described in Section 3. The main difference is that the
input alphabet is Σk (plus “•”). Transition tables of k-stride NFAs encountered in prac-
tice are generally sparse. We therefore applied a well-known technique called alphabet
compression [21], which reduces the size of the input alphabet by combining symbols
in the input alphabet into equivalence classes. An alphabet-compressed NFA can also
be converted into an NFA-OBDD using the same techniques described in Section 3, and
operated in the same way.
Performance of k-stride NFA-OBDDs. To evaluate the performance of k-stride
NFAs and k-stride NFA-OBDDs, we used a toolchain similar to the one discussed in
Section 4, but additionally applied alphabet compression. Our implementation accepts
k as an input parameter. However, we have only conducted experiments for k = 2
because alphabet compression ran out of memory for larger values of k.
The setup that we used for the experiments reported below is identical to that de-
scribed in Section 4. However, we only used two sets of Snort signatures in our mea-
surements: (1) HTTP/1400: a subset of 1400 HTTP signatures from HTTP/1503 and
(2) FTP/95 a subset of 95 FTP signatures from FTP/98. This was because the 2-stride
NFA for a larger number of signatures ran out of memory during execution, thereby
precluding a head-to-head comparison between the performance of 2-stride NFAs and
NFA-OBDDs. We did not consider HTTP/2612 for the experiments reported in this
section, because alphabet compression ran out of memory on these signature sets.
Figure 8(a) presents the size of the 1-stride and 2-stride NFA-OBDDs, and the size
of the compressed alphabet. In each case, the alphabet compression algorithm took over
a day to complete, and consumed over 1GB of memory. Figure 8(b) and (c) compare
the performance of 1-stride NFAs and NFA-OBDDs with the performance of 2-stride
74
L. Yang et al.
FTP/95
Signature Set #States #Transitions (1-stride) #Transitions (2-stride) #Alpbahet Symbols
HTTP/1400 146,992
15,266
(a) 1-stride and 2-stride NFA-OBDD construction results.
44,815,280
5,136,420
2,246,701
3,361,065
6,928
848
1200
1000
800
600
400
200
)
B
M
(
e
g
a
s
u
y
r
o
m
e
M
0
103
104
1−stride−NFA
2−stride−NFA
1−stride−NFA−OBDD
2−stride−NFA−OBDD
400
350
300
250
200
150
100
50
)
B
M
(
e
g
a
s
u
y
r
o
m
e
M
1−stride−NFA
2−stride−NFA
1−stride−NFA−OBDD
2−stride−NFA−OBDD
105
106
Processing time (cycles/byte)
107
108
0
103
104
Processing time (cycles/byte)
105
106
(b) HTTP/1400 regular expressions.
(c) FTP/95 regular expressions.
Fig. 8. Memory versus throughput for 1-stride NFAs, 1-stride NFA-OBDDs, 2-stride NFAs, and
2-stride NFA-OBDDs
NFAs and NFA-OBDDs. As in Section 4, for NFAs we only report the average perfor-
mance across all network traces because their performance was relatively stable across
all traces. We ﬁrst note from Figure 8 that as expected, matching multiple bytes in the
input stream improved the performance of NFAs. However, this increase in throughput
comes at a drastic increase in the memory consumption of the 2-stride NFA.
In both the 1-stride and 2-stride NFAs, the use of OBDDs improved throughput—by
about three orders of magnitude for HTTP/1400 and about two orders of magnitude for
FTP/95. In both cases, the memory utilization of the 2-stride NFA-OBDD was smaller
than that of the 2-stride NFA by two orders of magnitude. This is because OBDDs
compactly encode the NFA’s transition relation. These results show that 2-stride NFA-
OBDDs are drastically more efﬁcient in time and space than 2-stride NFAs. Further
investigation of the beneﬁts of k-stride NFAs is a topic for future work.
6 Related Work
Early NIDS exclusively employed strings as attack signatures. String-based signatures
are space-efﬁcient, because their size grows linearly with the number of signatures. They
are also time-efﬁcient, and have O(1) matching algorithms (e.g., Aho-Corasick [23]).
They are ideally suited for wire-speed intrusion detection, and have been implemented
both in software and hardware [24,25,26,27,28,29]. However, prior work has shown that
string-based signatures can easily be evaded by malware using polymorphism, meta-
morphism and other mutations [30,31,32,33]. The research community has therefore
been investigating sophisticated signature schemes that require the full power of regu-
lar expressions. This in turn, has spurred both the research community to develop im-
proved algorithms for regular expression matching, as well as NIDS vendors, who are
increasingly beginning to deploy products that use regular expressions [34,35,36].
DFAs provide high-speed matching, but DFAs for large signature sets often consume
gigabytes of memory. Researchers have therefore investigated techniques to improve
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
75
the space-efﬁciency of DFAs. These include, for example, techniques to determinize
on-the-ﬂy [19]; MDFAs, which combine signatures into multiple DFAs (as discussed
in Section 4) [4]; D2FAs [2], which reduce the memory footprint of DFAs via edge
compression; and XFAs [3,8], which extend DFAs with scratch memory to store auxil-
iary variables, such as bitmaps and counters, and associate transitions with instructions
to manipulate these variables. Some DFA variants (e.g., [2,3,21]) also admit efﬁcient
hardware implementations.
These techniques use the time-efﬁciency of DFAs as a starting point, and seek to
reduce their memory footprint. In contrast, our work uses the space-efﬁciency of NFAs
as a starting point, and seeks to improve their time-efﬁciency. We believe that both ap-
proaches are orthogonal and may be synergistic. For example, it may be possible to use
OBDDs to also improve the time-efﬁciency of MDFAs.
Our approach also provides advantages over several prior DFA-based techniques.
First, it produces NFA-OBDDs from regular expressions in a fully automated way.
This is in contrast to XFAs [8], which required a manual step of annotating regular ex-
pressions. Second, our approach does not modify the semantics of regular expressions,
i.e., the NFA-OBDDs produced using the approach described in Section 3 accept the
same set of strings as the regular expressions that they were constructed from. MDFAs,
in contrast, employ heuristics that relax the semantics of regular expressions to improve
the space-efﬁciency of the resulting automata [4]. Last, because these techniques op-
erate with DFAs, they may sometimes encounter regular expressions that are hard to
determinize. For example, Smith et al. [8, Section 6.2] present a regular expression
from the Snort data set for which the XFA construction algorithm runs out of memory.
Our technique operates with NFAs and therefore does not encounter such cases.
Research on NFAs for intrusion detection has typically focused on exploiting paral-
lelism to improve performance [9,10,37,38]. NFA operation can be parallelized in many
ways. For example, a separate thread could be used to simulate each state in an NFA’s
frontier. Else, a set of regular expressions can be represented as a collection of NFAs,
which can then be operated in parallel. FPGAs have been used to exploit this parallelism
to yield high-performance NFA-based intrusion detection systems [9,10,37,38].
Although not explored in this paper, OBDDs can potentially improve NFA perfor-
mance in parallel execution environments as well. For example, consider a NIDS that
performs signature matching by operating a collection of NFAs in parallel. The perfor-
mance of this NIDS can potentially be improved by converting it to use a collection
of NFA-OBDDs instead; in this case, OBDDs improve the performance of each NFA,
thereby increasing the throughput of the NIDS as a whole. Finally, NFA-OBDDs may
also admit a hardware implementation. Prior work has developed techniques to imple-
ment OBDDs in CAMs [39] and FPGAs [40]. Such an implementation of NFA-OBDDs
can potentially be used to improve the performance of hardware-based NFAs as well.
7 Summary
Many recent algorithms for regular expression matching have focused on improving
the space-efﬁciency of DFAs. This paper sought to take an alternative viewpoint, and
aimed to improve the time-efﬁciency of NFAs. To that end, we developed NFA-OBDDs,
76
L. Yang et al.
a representation of regular expressions in which OBDDs are used to operate NFAs.
Our prototype software-based implementation with Snort signatures showed that NFA-
OBDDs can drastically outperform NFAs—by up to 1645× in the best case. We also
showed how OBDDs can enhance the performance of NFAs that match multiple input
symbols.
Acknowledgements. We thank Cristian Estan and Somesh Jha for useful discussions
in the early stages of this project. We also thank Michael Bailey for shepherding the
paper and the anonymous reviewers for their feedback on our work.
References
1. Becchi, M.: Data Structures, Algorithms and Architectures for Efﬁcient Regular Expression
Evaluation. PhD thesis, Washington University in St. Louis (2009)
2. Kumar, S., Dharmapurikar, S., Yu, F., Crowley, P., Turner, J.: Algorithms to accelerate mul-
tiple regular expressions matching for deep packet inspection. In: ACM SIGCOMM Con-
ference, pp. 339–350. ACM, New York (2006)
3. Smith, R., Estan, C., Jha, S., Kong, S.: Deﬂating the Big Bang: Fast and scalable deep packet
inspection with extended ﬁnite automata. In: SIGCOMM Conference, pp. 207–218. ACM,
New York (2008)
4. Yu, F., Chen, Z., Diao, Y., Lakshman, T.V., Katz, R.H.: Fast and memory-efﬁcient regular
expression matching for deep packet inspection. In: ACM/IEEE Symp. on Arch. for Net-
working and Comm. Systems, pp. 93–102 (2006)
5. Roesch, M.: Snort - lightweight intrusion detection for networks. In: USENIX Conf. on
System Administration, USENIX, pp. 229–238 (1999)
6. Hopcroft, J.E., Motwani, R., Ullman, J.D.: Introduction to Automata Theory, Languages,
and Computation, 3rd edn. Addison-Wesley, Reading (2007)
7. Becchi, M., Crowley, P.: An improved algorithm to accelerate regular expression evaluation.
In: Intl. Conf. on Architectures for Networking and Communication Systems, pp. 145–154.
ACM, New York (2007)
8. Smith, R., Estan, C., Jha, S.: XFA: Faster signature matching with extended automata. In:
Symp. on Security and Privacy, pp. 187–201. IEEE Computer Society, Los Alamitos (2008)
9. Sidhu, R., Prasanna, V.: Fast regular expression matching using FPGAs. In: Symp. on Field-
Programmable Custom Computing Machines, pp. 227–238. IEEE Computer Society, Los
Alamitos (2001)
10. Clark, C.R., Schimmel, D.E.: Scalable pattern matching for high-speed networks. In: IEEE
Symp. on Field-Programmable Custom Computing Machines, pp. 249–257. IEEE Computer
Society, Los Alamitos (2004)
11. Bryant, R.E.: Graph-based algorithms for Boolean function manipulation. IEEE Transactions
on Computers 35(8), 677–691 (1986)
12. Burch, J.R., Clarke, E.M., McMillan, K.L., Dill, D.L., Hwang, J.: Symbolic model check-
ing: 1020 states and beyond. In: Symp. on Logic in Computer Science, pp. 401–424. IEEE
Computer Society, Los Alamitos (1990)
13. Thompson, K.: Programming techniques: Regular expression search algorithm. ACM Com-
mun. 11(6), 419–422 (1968)
14. Somenzi, F.: CUDD: CU decision diagram package, release 2.4.2 Department of Electrical,
Computer, and Energy Engineering, University of Colorado at Boulder,
http://vlsi.colorado.edu/˜fabio/CUDD
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
77
15. Signatures referenced in Section 4 and Section 5,
http://www.cs.rutgers.edu/˜vinodg/papers/raid2010
16. PCRE: The Perl compatible regular expression library, http://www.pcre.org
17. Cox, R.: Regular expression matching can be simple and fast (but is slow in Java, Perl, PHP,
Python, Ruby, ...) (2007),
http://swtch.com/$\sim$rsc/regexp/regexp1.html.
18. Smith, R., Estan, C., Jha, S.: Backtracking algorithmic complexity attacks against a NIDS.
In: Annual Computer Security Applications Conf., pp. 89–98. IEEE Computer Society, Los
Alamitos (2006)
19. Sommer, R., Paxson, V.: Enhancing byte-level network intrusion detection signatures with
context. In: Conf. on Computer and Comm. Security, pp. 262–271. ACM, New York (2003)
20. Becchi, M., Crowley, P.: A hybrid ﬁnite automaton for practical deep packet inspection. In:
Intl. Conf. on emerging Networking EXperiments and Technologies (2007)
21. Brodie, B.C., Taylor, D.E., Cytron, R.K.: A scalable architecture for high-throughput regular-
expression pattern matching. In: Intl. Symp. Computer Architecture, pp. 191–202. IEEE
Computer Society, Los Alamitos (2006)
22. Becchi, M., Crowley, P.: Efﬁcient regular expression evaluation: Theory to practice. In: Intl.
Conf. on Architectures for Networking and Communication Systems, pp. 50–59. ACM, New
York (2008)
23. Aho, A.V., Corasick, M.J.: Efﬁcient string matching: An aid to bibliographic search. ACM
Comm. 18(6), 333–340 (1975)
24. Dharmapurikar, S., Lockwood, J.W.: Fast and scalable pattern matching for network intru-
sion detection systems. Jour. on Selected Areas in Comm. 24(10), 1781–1792 (2006)
25. Liu, R., Huang, N., Chen, C., Kao, C.: A fast string-matching algorithm for network
processor-based intrusion detection system. Trans. on Embedded Computing Sys. 3(3), 614–
633 (2004)
26. Sourdis, I., Pnevmatikatos, D.: Fast, large-scale string match for a 10Gbps FPGA-based
network intrusion detection system. In: Cheung, P., Constantinides, G., Sousa, J. (eds.) FPL
2003. LNCS, vol. 2778, pp. 880–889. Springer, Heidelberg (2003)
27. Tan, L., Sherwood, T.: A high throughput string matching architecture for intrusion detec-
tion and prevention. In: Intl. Symp. Computer Architecture, pp. 112–122. IEEE Computer
Society, Los Alamitos (2005)
28. Tuck, N., Sherwood, T., Calder, B., Varghese, G.: Deterministic memory-efﬁcient string
matching algorithms for intrusion detection. In: IEEE INFOCOM 2004, pp. 333–340. IEEE
Computer Society, Los Alamitos (2004)
29. Vasiliadis, G., Antonatos, S., Polychronakis, M., Markatos, E.P., Ioannidis, S.: Gnort: High
performance network intrusion detection using graphics processors. In: Lippmann, R., Kirda,
E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230, pp. 116–134. Springer, Heidelberg
(2008)
30. Handley, M., Paxson, V., Kreibich, C.: Network intrusion detection: Evasion, trafﬁc normal-
ization, and end-to-end protocol semantics. In: Usenix Security, p. 9. USENIX (2001)
31. Jordan, M.: Dealing with metamorphism. Virus Bulletin Weekly (2002)
32. Ptacek, T., Newsham, T.: Insertion, evasion and denial of service: Eluding network intrusion
detection, http://insecure.org/stf/secnet_ids/secnet_ids.html.
33. Shankar, U., Paxson, V.: Active mapping: Resisting NIDS evasion without altering trafﬁc.
In: Symp. on Security and Privacy, pp. 44–61. IEEE Computer Society, Los Alamitos (2003)
34. TippingPoint, http://www.tippingpoint.com
35. LSI-Corporation: Tarari RegEx content processor, http://www.tarari.com
36. Cisco: IOS terminal services conﬁguration guide, http://tinyurl.com/2eouvq
78
L. Yang et al.
37. Hutchings, B.L., Franklin, R., Carver, D.: Assisting network intrusion detection with re-
conﬁgurable hardware. In: Annual Symp. on Field-Programmable Custom Computing Ma-
chines, pp. 111–120. IEEE Computer Society, Los Alamitos (2002)
38. Mitra, A., Najjar, W., Bhuyan, L.: Compiling PCRE to FPGA for accelerating Snort IDS.
In: Symp. on Arch. for Networking and Comm. Systems, pp. 127–136. ACM, New York
(2007)
39. Yusuf, S., Luk, W.: Bitwise optimized CAM for network intrusion detection systems. In:
Intl. Conf. on Field Prog. Logic and Applications, pp. 444–449. IEEE Press, Los Alamitos
(2005)
40. Sinnappan, R., Hazelhurst, S.: A reconﬁgurable approach to packet ﬁltering. In: Brebner,
G., Woods, R. (eds.) FPL 2001. LNCS, vol. 2147, pp. 638–642. Springer, Heidelberg (2001)
GrAVity: A Massively Parallel Antivirus Engine
Giorgos Vasiliadis and Sotiris Ioannidis
Institute of Computer Science, Foundation for Research and Technology – Hellas,
N. Plastira 100, Vassilika Vouton, GR-700 13 Heraklion, Crete, Greece
{gvasil,sotiris}@ics.forth.gr
Abstract. In the ongoing arms race against malware, antivirus soft-
ware is at the forefront, as one of the most important defense tools in
our arsenal. Antivirus software is ﬂexible enough to be deployed from
regular users desktops, to corporate e-mail proxies and ﬁle servers. Un-
fortunately, the signatures necessary to detect incoming malware number
in the tens of thousands. To make matters worse, antivirus signatures are
a lot longer than signatures in network intrusion detection systems. This
leads to extremely high computation costs necessary to perform match-
ing of suspicious data against those signatures.
In this paper, we present GrAVity, a massively parallel antivirus en-
gine. Our engine utilized the compute power of modern graphics pro-
cessors, that contain hundreds of hardware microprocessors. We have
modiﬁed ClamAV, the most popular open source antivirus software, to