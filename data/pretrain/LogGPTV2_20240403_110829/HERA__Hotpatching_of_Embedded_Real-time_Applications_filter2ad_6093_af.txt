In order to verify that the transaction abort, which costs
a single instruction fetch, is constant and independent from
the aborted instruction, we performed measurements replacing
12
Table II: Time required to abort different instructions.
Instruction
NOP
PUSH {lr}
LDR
B.n
UDIV
Cycles Duration
1.644 µs
1.644 µs
1.644 µs
1.644 µs
1.644 µs
1
2
2
2
2-12
Figure 6: Measurements of the full end-to-end experiment on
the syringe pump.
different instructions. The measured times, that include the pin
overhead as well as the overhead to branch to and return from
the jump_section with the respective instruction are presented
in Table II. The chosen instructions are common and cover a
wide range of execution costs. While the no-operation (NOP)
instruction takes a single CPU cycle, the PUSH instruction
takes two cycles, and a division takes up to 12 cycles to
complete. The duration,
the execution time, has not
changed while exchanging the different instructions. Therefore,
one can conﬁrm that the transaction abort is constant and
independent from the instruction, which will be replaced by the
trampoline. The pin overhead is also constant and amounts to
1.384 µs for this measurement setup. The cost per instruction is
broken down into details in the reference manual of the ARM
Cortex-M4 processor [23].
i.e.,
C. Further Measurements
In general, patches can consist of multiple parts as several
issues potentially have to be ﬁxed in one hotpatch. This is
easily possible with HERA as we support the use of multi-
ple trampolines. We evaluated the time required to execute
multiple patches in a row. The FPB unit on the Cortex-M4
processor supports up to six break points [23]. However, we
used only ﬁve in our evaluation as we required one breakpoint
for the measurement setup. The setup consists of a while-
Loop containing NOP instructions. These NOP instructions
have been replaced step by step with the trampolines by
conﬁguring the FPB breakpoints. Figure 7 shows the measured
times for each number of breakpoints. A single measurement
is a loop cycle with the previously conﬁgured amount of
breakpoints. The reference baseline, i.e., the overhead due to
the pin triggering, is indicated by zero breakpoints. Again,
each measurement was repeated ﬁve times. Unsurprisingly, we
did not measure any deviation as the switches by the FPB
unit are atomic instructions with ﬁxed execution time. It can
be stated safely, that the duration per breakpoint is constant
and multiple trampolines can be inserted with a known and
constant overhead.
To validate that the patching process using HERA works
correctly in practice, we performed a full end-to-end experi-
Figure 7: The duration of the patching depending on the
number of breakpoints.
ment on the syringe pump. We measured the timings of the
full hotpatching process during the operation of the syringe
pump using the oscilloscope. Figure 6 shows the experiment
and the measured results. The syringe pump applies 1 mL
with 1 s pauses in a continuous process. First, the normal
operation of the unpatched program is measured. Then, during
an idle phase, the patch is applied and activated. The operation
continues seamlessly. Using the oscilloscope, we veriﬁed that
the timings were not affected by neither the hotpatch nor the
patch application. The patch application that was automatically
scheduled during the idle-time and did not cause any delay.
D. Case Study: Patching FreeRTOS
In our second case study, we use the HERA framework
to patch an existing vulnerability in FreeRTOS. CVE2018-
16601 [56] describes a vulnerability in the TCP/IP stack of
FreeRTOS, allowing to corrupt the memory and allowing a
remote attacker to execute code remotely or perform a denial-
of-service (DoS) attack, which disrupts the device. This vulner-
ability is caused by a missing bounds check because the size of
the IP header is not validated at any point [57]. FreeRTOS up
to version 10.0.1 is affected, the vulnerability has a CVSSv3
of 8.1 (high). This is a severe vulnerability, which should be
patched immediately. However, updating a device interrupts its
service, so that patches are stalled. Therefore, we developed a
hotpatch which works without any impairments to the device
and its service, following our previously described guidelines.
As source code for FreeRTOS is available, we compiled two
binaries. The ﬁrst binary is a vulnerable release of FreeRTOS,
the second one is a patched version. We integrated the HERA
framework such that the patch is automatically applied to the
ﬁrst, vulnerable binary.
In detail, we developed a prototype basing on FreeRTOS
Labs 160919, which uses FreeRTOS 9.0.0 together with the
vulnerable TCP/IP stack [68]. First, we linked the HERA
library to the vulnerable FreeRTOS and compiled it into binary.
Then, we backported the ﬁx from the recent FreeRTOS 10.0.3
with TCP/IP stack V2.2.1 to the vulnerable FreeRTOS 9.0.0.
Using Radare2, we performed a binary diff from the two
binaries and derived a hotpatch from it. We implemented a
low-priority updater task that automatically applies the update
13
Injection Patch applicatonTaskinjectionsleepinjectioninjectionsleepinjectionDuration12.93s1.00s12.93s12.93s1.00s12.93sunpatchedpatched1.00ssleeptime01234501234Total durationDuration per Breakpoint# of breakpointsTime in µsas soon as the system is in IDLE status. Details on the
development process and implementation of this hotpatch have
been already described in Section VI-C and Section VI-E.
This case study shows that the HERA framework is suited
to hotpatch practical security vulnerabilities.
E. Conclusion of Evaluation
With the case study on the medical devices, we showed
that HERA can be used to hotpatch critical embedded systems.
While the vulnerabilities in these devices have been inserted
intentionally,
the hotpatch for CVE-2018-16691, a serious
vulnerability in FreeRTOS is an example for a existing vul-
nerability that can be hotpatched. Through our extensive mea-
surements, we provide evidence that the performance overhead
induced by HERA is negligible both in theory and practice.
The overhead for a Control Flow Redirection is on a sub-
instructional level, and the Atomic Switch Time is only a single
assembly instruction, which is either executed up to completion
or disregarded by the CPU. The design of the trampolines is the
minimal number of instructions required to jump to the patch.
It is possible to insert multiple trampolines with constant,
predictable, and negligible overhead, which was veriﬁed in
a full end-to-end experiment. This makes HERA suitable for
patching systems with hard real-time properties, i.e., the most
strict and critical requirements. In particular, our case-studies
on real-world medical device software demonstrate that HERA
provides an efﬁcient and effective mechanism to hotpatch
resource-constrained embedded devices that have real-time
constraints.
VIII. RELATED WORK
The need for Hotpatching comes from high availability
constraints. The idea of hotpatching or dynamic software
updating has been around for a while and focused on tra-
ditional software [12]. Research has spent great efforts in
applying hotpatching to traditional software, especially server
applications [13]–[15]. Gu, Cao, Xu, et al. optimized a Java
VM using a lazy updating approach to avoid a disruptive
halt and restart cycle [69]. Even the multi-threaded nature
of server applications has been considered [15], [70]. While
traditional updates, where programs or systems are restarted,
erase the system state, in hotpatching this state has to be
maintained. A main problem in hotpatching is to apply changes
and to transfer this state. Makris and Bazzi discuss a stack
reconstruction algorithm, which allows the update of active
functions [71]. Other work focuses on a checkpoint model,
i.e., putting program into a state where state transfer is easily
achievable. The framework Kitsune [17] makes use of such
update points, that need to be speciﬁed by the programmer.
This model has been extended to support arbitrary complex
software updates [13]. Giuffrida, Iorgulescu, Kuijsten, et al.
present a fault-tolerant state transfer approach [72]. The frame-
work POLUS targets server software and introduces a state
synchronization model to eliminate the need for speciﬁc update
points. It maintains the new and old data structures in parallel
and slowly shifts towards the new data structure by means
of synchronization [15]. However, not all updates require
a complex state transfer mechanism. In contrast to generic
program updates, security patches are said to be “small, iso-
lated, and feature-less” [51]. The prevalent model for applying
hotpatching is the relocation of executables [16], [17], [73].
In general, hotpatching, also called dynamic software updates,
can be categorized by the used model and effect of the software
update [34]. With the rise of Internet of Things (IoT) and
the spread of cyber-physical systems, hotpatching has been
considered as an approach to target security issues. Cyber-
physical systems or the Internet of Things represent distributed
and interact with real-world entities. Thus, real-time or high
availability constraints can apply in different forms. Park, Kim,
Kim, et al. describe an architecture on how to gather and
distribute updates [74]. Felser, Kapitza, Kleinöder, et al. also
present a special architecture for patching sensor nodes [75].
It includes the automatic calculation of differences and image
creation to update the sensor node in order to incrementally
link new code to the existing application. Current research
focuses on the domain of smart devices and its application
ﬁelds, e.g., energy management or smart cities. In sensor
nodes, energy consumption is often a critical factor. This
challenge is tackled by Zhang, Ahn, Zhang, et al.
in the
context of energy-harvesting devices [40]. Mugarza, Amurrio,
Azketa, et al. describe the application and deployment of
a hotpatch and live update framework Cetratus [39] in the
smart city domain [76]. Salls, Shoshitaishvili, Stephens, et al.
present Piston, a framework that allows to apply hotpatching
to devices that are not designed for such hotpatching by using
exploits [77].
Real-time requirements introduce further challenges to
hotpatching [41]–[43]. Wahler, Richter, and Oriol describes
a generic software-based hotpatching for real-time systems
and its components [41]. They investigate how to identify
points in time suitable for a update process and propose a
state transfer model. The key assumptions are that the critical
update process has a linear time amount. Thus, the critical
update process ﬁts in one cycle. Furthermore, the state transfer
assumes a shared memory space that an updated component
can take over. The main limitation is that the state transfer
has to ﬁt in one cycle. Therefore, Wahler, Richter, Kumar, et
al. propose a state synchronization algorithm to synchronize
two components, i.e., old and new component. An atomic
switchover takes place at the full synchronization point. This
allows updates with arbitrarily large states [42]. Wahler and
Oriol present FASA (Future Automation System Architecture),
implementing the component-based updating model [43].
An important additional aspect in high-availability systems
is often fault-tolerance. Besides availability, many systems also
need fault-resistance. A measure to achieve fault-tolerance
is redundancy or replication. A variety of those replication
schemes exist and they can be integrated into hard real-
time applications [78]. Replicated systems can be patched
one at a time as those systems usually substitute each other
during downtime. There exist multiple solutions to achieve
replication [79]. While this is a good solution if multiple,
redundant instances are already available, this is not a general
solution. Redundancy is costly and requires hardware and
resources not present in limited embedded systems. Therefore,
hotpatching embedded systems is the only solution.
IX. CONCLUSION AND SUMMARY
Current research has not yet addressed the challenges of
applying hotpatches on embedded devices: the low resource
14
availability due to the need for low-energy consumption,
guaranteed availability, and the simultaneous need for hard
real-time capabilities. In this paper, we present HERA, the
ﬁrst framework to tackle all these challenges allowing the
application of hotpatches to real-time constrained embedded
systems using commercial off-the-shelf hardware. Patches in
HERA are processed during idle-time and activated within
just a single processor instruction. Thus, patching cannot
interfere with the application or other processes. The patch
itself is added by the on-board debugging unit during run-
time with negligible and exactly predictable overhead veriﬁed
by oscilloscope measurements. This makes HERA suitable for
systems with the most strict real-time requirements. In a case
study, we used HERA to hotpatch two medical devices with
a critical vulnerability. Furthermore, we developed hotpatches
for HERA to patch a real-world vulnerability in the TCP/IP
stack of FreeRTOS. This shows the effective and efﬁcient
applicability of HERA to hotpatch real-time critical embedded
systems.
ACKNOWLEDGMENT
This work has been partially funded by the DFG as
part of project S2 within the CRC 1119 CROSSING. This
work was supported by the DFG Priority Program SPP 2253
Nano Security (Project RAINCOAT). We thank our shepherd
Jeyavijayan Rajendran and the anonymous reviewers for their
valuable feedback.
REFERENCES
[1] O. Alrawi, C. Lever, M. Antonakakis, and F. Monrose, “SoK: security
evaluation of home-based iot deployments,” in IEEE Symposium on
Security and Privacy (SP), IEEE, 2019. DOI: 10.1109/SP.2019.00013.
[2] D. Halperin, T. S. Heydt-Benjamin, B. Ransford, S. S. Clark, B.
Defend, W. Morgan, K. Fu, T. Kohno, and W. H. Maisel, “Pacemakers
and implantable cardiac deﬁbrillators: Software radio attacks and zero-
power defenses,” in IEEE Symposium on Security and Privacy (SP),
IEEE, 2008. DOI: 10.1109/SP.2008.31.
[3] US Food and Drug Administration, Firmware update to address
cybersecurity vulnerabilities identiﬁed in abbott’s (formerly st. jude
medical’s) implantable cardiac pacemakers: FDA safety communica-
tion, Oct. 18, 2017. [Online]. Available: https : / / www . fda . gov /
medical - devices / safety - communications / ﬁrmware - update - address -
cybersecurity - vulnerabilities - identiﬁed - abbotts - formerly - st - jude -
medicals (visited on 06/25/2020).
[4] D. B. Kramer and K. Fu, “Cybersecurity concerns and medical devices:
Lessons from a pacemaker advisory,” Jama, vol. 318, no. 21, 2017.
[7]
[6]