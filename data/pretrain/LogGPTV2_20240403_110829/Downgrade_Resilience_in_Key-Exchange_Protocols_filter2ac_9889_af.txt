A negative consequence of this agility is the potential
for downgrades. TLS clients and servers commonly support
multiple protocol versions and hundreds of ciphersuites, even
though some of them are known to be obsolete or even broken.
For example, SSL 2.0 is still supported by 10% of web servers
even though it has long been known to be vulnerable to
multiple attacks including, notably, a ciphersuite downgrade
attack [43] and a dangerous backward compatibility attack [5].
Equally, about 25% of web servers were found to still support
export-grade ciphersuites that were deprecated in 2000, en-
abling powerful downgrade and server impersonation attacks
like FREAK [10] and Logjam [2].
Since SSL 3.0, all versions of TLS incorporate various
downgrade protection mechanisms. We will analyze the down-
grade protection provided by TLS 1.2 and the proposed im-
provements in TLS 1.3. In both cases we focus on ephemeral
Difﬁe-Hellman key exchange (DHE/ECDHE).
A. Negotiation in TLS 1.0–1.2
Figure 12a depicts a mutually authenticated TLS connection
incorporating a Difﬁe-Hellman key exchange that uses either
a ﬁnite-ﬁeld group (DHE) or an elliptic curve (ECDHE). Most
TLS connections authenticate only the server, but the ﬁgure
also depicts the optional client authentication messages.
The client I ﬁrst sends a hello message (CH) with a nonce
(nI) and a list of agility parameters [a1, . . . , an] that include
ciphersuites, compression methods, and protocol extensions.
The server responds with a hello message (SH) containing
its chosen parameters (aR). At
the client and
server know which key exchange they will execute next. In
an ephemeral Difﬁe-Hellman key exchange (DHE/ECDHE),
the server sends its public-key certiﬁcate (cert R) and uses the
private key to sign the nonces, the group (or curve) parameters
(p, g) and its own Difﬁe-Hellman public value (gy). The
this point,
518518
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Initiator I
Responder R
m1 = Hello(vI , IDI , [aI,1, . . . , aI,n])
m2 = Hello(vR, IDR, [aR,1, . . . , aR,n])
m3 = Commit(IDI , hash(m5), ai)
m4 = DHPart1(gy)
m5 = DHPart2(gx)
R , ke
I , km
(km
R, sas)
= kdf(gxy, IDI , IDR,
I , ke
hash(m2, m3, m4, m5))
R , ke
I , km
(km
R, sas)
= kdf(gxy, IDI , IDR,
I , ke
hash(m2, m3, m4, m5))
m6 = Confirm1(mac(km
m7 = Confirm2(mac(km
R , [ﬂags]ke
I , [ﬂags]ke
R ))
I ))
Initiator I
Responder R
m1 = (IDI , F (cfg I )), mac(kI , m1), hash(kI )
m2 = (IDR, F (cfg R)), mac(kR, m2), hash(kR)
a = nego(cfg I , F (cfg R))
m3 = (IDI , a, hash(nI )), kI
m4 = (nR), kR
m5 = (nI )
uid = h = H(m2, m3, m4, m5,−)
sas = H
(cid:2)(IDI , IDR, h,−)
check (cfg R, a)
uid = h = H(m2, m3, m4, m5,−)
sas = H
(cid:2)(IDI , IDR, h,−)
sas
sas
sas
sas
mode = (a, IDI , IDR)
complete = true
mode = (a, IDI , IDR)
complete = true
(a)
Fig. 9: ZRTP (a) protocol (b) downgrade protection sub-protocol
(b)
Initiator I
MitM
Responder R
m1 = Hello(vI , oI , IDI , [aI,1, . . . , aI,n], hash(KI )), mac(KI , m1)
(cid:2)(cid:2)
1 = Hello(v
(cid:2)(cid:2)
(cid:2)
I , oI , IDI , [aI,1, . . . , aI,n], hash(KI )), mac(KI , m
1 )
m
m3 = Commit(IDI , hash(m5), ai, KI )
m2 = Hello(vR, oR, IDR, [aR,1, . . . , aR,n], h), m
(cid:2)
I , oI , IDR, [aR,1, . . . , aR,n], $), $
m
(cid:2)
1 = Hello(v
m2 = Hello(v
(cid:2)
R, oR, IDR, [aR,1, . . . , aR,n]), hash(KR)), mac(KR, m2)
(cid:2)(cid:2)(cid:2)
1 = Hello(v
(cid:2)
(cid:2)
I , IDI , [aI,1, . . . , aI,n], hash(KI )), mac(KI , m
I , o
(cid:2)(cid:2)(cid:2)
1 )
m
m3
m4 = DHPart1(gy)
R , ke
I , km
(km
kdf(gxy, IDI , IDR, hash(m2, m3, m4, m5))
S, sas) =
R, ke
m5 = DHPart2(gx)
sas
m6 = Confirm1(mac(km
m7 = Confirm2(mac(km
R , [ﬂags]ke
I , [ﬂags]ke
R ))
I ))
R , ke
I , km
(km
kdf(gxy, IDI , IDR, hash(m2, m3, m4, m5))
S, sas) =
R, ke
sas
Fig. 10: Man-in-the-Middle attack on ZRTP version and option negotiation. We assume that both peers prefer version vI = vR,
but will support an older version v
(cid:2)
R. The attacker additionally modiﬁes the options ﬂags oI transmitted in m1.
(cid:2)
I = v
server may let the client remain anonymous, or it may require
authentication (specifying the class of acceptable certiﬁcates
[cert 1, . . . , cert m]), in which case the client sends its own
certiﬁcate (cert I) and public value (gx), and uses its private
key to sign the full protocol transcript so far (log 1). The client
and server then derive a master secret (ms) and session keys
(k1, k2) from the nonces and shared secret (gxy). To complete
the key exchange, both sides compute MACs using the master
secret over the protocol transcript, and exchange them in ﬁn-
ished messages (CFIN,SFIN). These MACs provide key con-
ﬁrmation as well as downgrade protection. Once exchanged,
the client and server can start exchanging application data
encrypted under the new session keys ([Data]k).
B. TLS 1.0–1.2 do not prevent downgrades
The downgrade protection sub-protocol for TLS 1.0–1.2 is
depicted in Fig. 12b. The sub-protocols for TLS 1.0, 1.1, and
1.2 have an almost identical protocol ﬂow and primarily differ
in the choice of algorithms. For simplicity, we consider only
server-authenticated (EC)DHE connections, where clients are
anonymous.
The client offers its entire public conﬁguration (F (cfg I ))
to the server, which then computes the negotiated parameters
(mode) that consist of the protocol version (v), the chosen
parameters (aR), the group (GR), the server identity (pk R),
and the hash function used in the server signature (hash1). The
protocol version and the ciphersuite in aR together determine
other protocol parameters, such as the key derivation function
(kdf), the authenticated encryption scheme, and the MAC and
hash functions used in the ﬁnished messages (mac, hash).
We note that the server may possess several identities and
choose one based on the chosen ciphersuite or other protocol
extensions offered by the client.
Downgrade protection primarily relies on the MACs in the
ﬁnished messages, which in turn rely on the strength of the
group GR and the negotiated algorithms kdf, hash, and mac.
If a client and server support a weak group, for example, then
an attacker can downgrade the group and then break the master
519519
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Initiator I
Responder R
m1 = (IDI , F (cfg I ))
m2 = (IDR, F (cfg R))
a = nego(cfg I , F (cfg R))
m3 = (IDI , a, nI , mac(psk IR, “P rsh
(cid:2)(cid:2)))
uid = h = H(m2, m3,−)
(kI , kR, sas) = kdf(psk IR, h)
check (cfg R, a)
uid = h = H(m2, m3,−)
(kI , kR, sas) = kdf(psk IR, h)
m4 = mac(kR,−)
m5 = mac(kI ,−)
sas
sas
mode = (a, IDI , IDR)
complete = true
mode = (a, IDI , IDR)
complete = true
Fig. 11: ZRTP with Pre-Shared Keys: negotiation sub-protocol
secret to forge the MACs, as in Logjam.
A second protection mechanism is the server signature,
but we observe that this signature covers only the unique
identiﬁer and the group GR, but none of the other negotiated
parameters. For example, the Logjam attacker tricks the server
into using an export ciphersuite (DHE-EXPORT) that results
in a weak Difﬁe-Hellman group. The client does not support
DHE-EXPORT and still thinks it is using standard DHE, but
the attacker can forge the MAC to hide this discrepancy.
Importantly, the server signature fails to prevent this attack,
because it does not include the ciphersuite. Before this attack
was disclosed, many implementations of TLS clients still
accepted arbitrary groups.
Furthermore, we note that the negotiated algorithms can be
weak in practice. For example, TLS 1.2 supports MD5-based
signatures; TLS 1.1 derives keys and transcript hashes based
on combinations of MD5 and SHA1. These weak constructions
also lead to downgrade and impersonation attacks [11].
Let minr, maxr be the supported minimum and maximum
protocol versions, let algsr = [a1, . . . , am] = F (cfgI ) be the
ciphersuites and extensions, and let groupsr be the groups
supported by role r. In terms of the general deﬁnition in
Section II, the downgrade protection sub-protocol uses the
following session variables:
(cid:2)
cfg
(cid:2)
=
(I, minI , maxI , algsI , groupsI , PKsR)
(R, minR, maxR, algsR, groupsR, PKR)
for I
for R
(cid:2)
= (nI , nR)
(cid:2)
= (v, aR, GR, pk R, hash1)
uid
mode
The negotiation function nego is executed by the server and
is based on the server’s conﬁguration cfg R and the server’s
partial view F (cfg I ) of the client conﬁguration. The client
does not get to inspect cfg R, but it does check that the resulting
mode is consistent with its conﬁguration.
The protocol only offers downgrade protection if the peer
is authenticated with an honest key and strong signature and
hash algorithms. So we will consider downgrade security from
the viewpoint of a client, while assuming that all keys in PKsR
are honest and hash1 is collision-resistant. We get partnering
security from the freshness of the uid and the strength of the
server signature (which includes the uid).
However, downgrade protection for the client cannot rely
on just the signature, and hence requires one of the following
conditions:
• the server uses its pk R only with modes that use strong
groups, key derivation algorithm kdf, hash and mac
algorithms and the client is aware of the servers choice
and aborts whenever it sees an unexpected algorithm
combination;
• the client only accepts modes with strong groups (in
particular not
the groups ‘negotiated’ by the Logjam
and the ECDHE-DHE cross-protocol attacks [35]) and
algorithms.
An extreme example of the ﬁrst condition would be to
require that the server uses a different public key for each
mode; the proofs in [21] rely on this somewhat unrealistic
assumption to avoid ECDHE-DHE cross-protocol attacks and
the need for agile security assumptions. More pragmatically,
if a client and server only support TLS 1.2 (and hence only
strong hash constructions), only support strong groups and
curves for (EC)DHE and all other ciphersuites that use Difﬁe-
Hellman, then TLS clients can be protected from downgrade.
Of course, we rely on the server using only honest and strong
signing keys (e.g. 2048-bit RSA) with strong signature and
hash algorithms (e.g. RSA-SHA256).
We also get some downgrade protection for the server when
the client is authenticated, relying only on the client signature
and the transcript hash algorithm hash. Pragmatically, TLS
1.2 servers that require client authentication and only accept
strong signature and hash algorithms cannot themselves be
tricked into completing a connection with a weak mode.
As evidenced by the Logjam attack, the TLS protocol does
not satisfy downgrade security unless the DP predicate guar-
antees that the client and server conﬁgurations exclusively use
strong algorithms, hence guaranteeing that all the negotiated
algorithms used in the ﬁnished MACs are strong.
C. On downgrade protection in Draft 10 of TLS 1.3
that
Draft 10 of TLS 1.3 proposes a protocol
is quite
different from TLS 1.2 and earlier versions; a typical run of the
1-round-trip mode is depicted in Fig. 13a. The corresponding
downgrade protection sub-protocol is in Fig. 13b.
In contrast to TLS 1.2, the client hello message includes
Difﬁe-Hellman public values for the client’s preferred groups.
The server may choose one of these groups or ask for a public
value in a different group, as long as it is one supported by
the client. The server sends its own public value in the server
hello message, and all subsequent messages are encrypted and
integrity-protected using the Difﬁe-Hellman shared key.
For downgrade security from the client’s viewpoint, a key
difference is that server signatures in TLS 1.3 cover the full
transcript, and hence they cover the full client and server hello
520520
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:46 UTC from IEEE Xplore.  Restrictions apply. 
Client I
Server R
CH(nI , vmaxI , [a1, . . . , an])
SH(nR, v, aR)
SC(cert R)
SKE(sign(sk R, hash1(nI | nR | p | g | gy)))