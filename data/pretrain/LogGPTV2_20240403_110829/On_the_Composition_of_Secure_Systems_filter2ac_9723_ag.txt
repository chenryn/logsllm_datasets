### 4.5 Security Property Analysis

The following notation is used to express the relationship between security properties:
- \( s:Blow(t, S) \times t = s | L \)
- \( s:Blow(t, S) \times s|HI = \emptyset \)

These notations help in understanding the implications and relationships between different security properties. For instance, it can be shown that Generalized Noninterference (GN) does not imply Generalized Noninference (GNI), and GN is a weaker property than GNI.

By applying the above technique to the security properties presented, the following lattice can be constructed:

#### Figure 4.1: A Partial Ordering of Security Properties
- **Separability**
- **PSP (Possibilistic Security Property)**
- **Generalized Noninterference (GN)**
- **Noninference**
- **Output Non-Deducibility**
- **Generalized Noninference (GNI)**

The arrows in the lattice indicate which property implies which other. For example, PSP implies Generalized Noninterference and, by transitivity, Generalized Noninference.

An instructive way to represent part of the above lattice is to only consider the elements that can be totally ordered. Figure 4.2 shows the ordering of most of the security properties that have been presented in the literature.

#### Figure 4.2: A Total Ordering of Most Possibilistic Properties
- **All Systems**
- **Restrictiveness**
- **Generalized Noninference (GNI)**
- **PSP (Possibilistic Security Property)**
- **Separability**

First, notice that Separability secure systems are both GNI secure and Generalized Noninference secure. Therefore, if a system designer wishes the system to be Generalized Noninference secure and it is known that it is GNI secure, then it is also Generalized Noninference secure. Additionally, PSP, defined in section 4.3.1, partitions the figure into two. This can be used to determine the strength of the properties. We can see that Separability is a stronger property than PSP. Therefore, systems with no information flow are being unnecessarily rejected.

Most security properties defined in the literature are weaker than PSP. This may be surprising but can be explained because high-level interleavings are not considered by any of the weaker properties. Example 4.1 on page 29 was used to demonstrate that the interleavings of traces can be used to transmit information from high-level users to low-level users. It can be shown that the component of Example 4.1 is Restrictiveness secure [Lee et al., 1992]. From Figure 4.2, it can be seen that this component also satisfies most of the other properties presented in the literature. Therefore, all weaker properties than PSP allow systems to be called secure, which are not.

### 4.6 PSP Security Proofs

In this section, we prove that PSP allows no information flow between high-level users and low-level users. We also prove that it is the weakest such property.

**Theorem 4.1:** PSP does not allow any information to flow from high-level users to low-level users.

**Proof:**
Assume that there is a system \( S \) that satisfies PSP and allows high-level information to flow to low-level users. By the definition of information flow, there must be some high-level sequence that is not possible. By construction, all possible high-level input sequences and high-level input sequence interleavings are possible. Furthermore, all possible interleavings of high-level outputs are present. The low-level equivalent bunch for \( t \) contains all sequences that could give the low-level users any information about high-level activity.

**Theorem 4.2:** PSP is the weakest security property that does not allow information flow from high-level users to low-level users.

**Proof:**
Theorem 4.1 proved that PSP does not allow information to flow from high-level users to low-level users. We must therefore prove that any weaker property must allow flows from high-level users to low-level users.

Assume that there exists a property \( P \) that is weaker than PSP and that does not have any unauthorized information flows. Let \( S \) be a system that does not satisfy PSP but satisfies \( P \). Let \( m \) be a trace such that \( \neg GP(m, S) \). Such a trace exists because \( P \) is weaker than PSP. When the low-level user observes \( t_{\text{low}} \), they know that the trace \( m \) is not possible. We now show that the absence of this trace gives the low-level user additional knowledge about high-level activity. Since \( m \) is not a possible trace, one of the following must be true:
1. The high-level input sequence of \( t \) is not consistent with the \( t_{\text{low}} \) observation.
2. A high-level output event that does not depend on input events must occur before some low-level trace \( t_{\text{low}} \) because it influences the subsequent behavior of the trace.
3. The interleaving of high-level events given by \( m \) is not possible with the observation of \( t_{\text{low}} \). By the construction of \( m \), the sequence of events \( m|H \) is valid for some \( t_{\text{low}} \). The absence of this interleaving with the observed \( t_{\text{low}} \) gives the low-level user the knowledge of some aspect of high-level state.

In all cases, the absence of the trace \( m \) gives the low-level user additional knowledge about high-level activity.

### 4.7 Security Properties vs. Safety/Liveness Properties

In section 2.4.2, we presented the Alpern and Schneider safety/liveness model of properties. This model is currently the dominant model in the specification and analysis of programs [McLean, 1994]. Properties are regarded as sets of traces, and a component satisfies a property if its set of traces is a subset of the property’s set. With this notion of refinement and Abadi and Lamport’s composition principle, it would be desirable to be able to express security properties in this manner. However, security properties are not preserved by this type of refinement [McLean, 1992b] [McLean, 1994].

In this section, we demonstrate that security properties cannot be expressed in the Alpern and Schneider framework. McLean has demonstrated this in “A General Theory of Composition for Trace Sets Closed Under Selective Interleaving Functions” [McLean, 1994], but for a different model of components. We will prove this for the event systems we are considering.

Before we can prove the required result, we must define the notion of one component being a subset of another.

**Definition 4.9:** Event System Space
An event system space is a 4-tuple \( \langle E, I, O, T \rangle \) where \( E, I, O, T \) are defined as in the definition of an event system (see Definition 3.3, page 16) with \( T = E^* \). We will write \( \mathcal{S} \) for the event system space.

**Definition 4.10:** An Element of a System Space
A system \( S = \langle E_1, I_1, O_1, T_1 \rangle \) is a subset of the system space \( \mathcal{S} = \langle E, I, O, T \rangle \) if and only if \( E_1 \subseteq E \), \( I_1 \subseteq I \), \( O_1 \subseteq O \), and \( T_1 \subseteq T \).

**Theorem 4.3:** Security properties are not expressible as sets of traces.

**Proof:**
Let \( T \) be the subset of the set of traces of \( \mathcal{S} \) that satisfy a security property \( P \). Any subset \( S \) of \( \mathcal{S} \) whose set of traces are a subset of \( T \) satisfies \( P \). The satisfaction of a security property ensures that a system has certain behaviors. A security property is defined as all low-level equivalent bunches of a system satisfying a predicate. For a property to be satisfied, the required traces of the bunch must be present. Construct a system \( S \) whose traces are a subset of \( T \) and the security property predicate is false for some low-level observation \( t_{\text{low}} \). Such a system exists because removing one of the traces required to make \( P \) true will still result in the set of traces being a subset of \( T \). The set of traces of \( S \) does not satisfy the security property \( P \) but is a subset of \( T \). This yields a contradiction. Therefore, \( P \) cannot be expressed as a set of traces.

The proof demonstrates that the refinement step may eliminate some possible behaviors of the system. Eliminating these behaviors means that the security property might no longer hold.

### 4.8 Conclusions

In this section, we have presented the notion of security properties. This definition is general and intuitively appealing. We also demonstrated that security properties do not fall within the safety/liveness framework of Alpern and Schneider. In the next section, we begin our discussion on the composition of components that satisfy security properties.

### 5. Composition and the Emergence of Security Properties

**5.1 Introduction**

The purpose of modeling a system is to be able to predict its behavior. To predict the behavior of a system, rules for the effects of interconnecting components are required. These rules should allow the system designer to know what property the system satisfies given the properties of each component. If the property of interest falls within the safety-liveness framework, then the Abadi and Lamport composition principle may be used. If not, the system designer must evaluate the system to determine what properties it enforces.

In the previous chapter, we demonstrated that security properties do not fall within the safety-liveness framework. Therefore, Abadi and Lamport’s composition principle cannot be applied. In this chapter, we present composition results for security properties. This gives the system designer the ability to predict the resulting security property of a composition given the property of each of the components.

There are two different approaches a system designer can take. The system designer may want to know what property two or more of the components must satisfy so that when they are interconnected, the system satisfies a property \( P \). The other approach is to determine what properties are satisfied by the system that results from the composition of two (or more) components with given properties.

The approaches can be seen to be duals of each other. In the first approach, the system is decomposed to determine what its constituent parts must satisfy. In the other approach, the system is composed to determine what the resulting system satisfies.

Both approaches are required because they satisfy different needs. If a desired property of the system might not be preserved under composition, then it is required to decompose the system to determine what each component must satisfy. If the system designer is composing several components, they wish to know what properties the resulting system will satisfy. Notice that if a property is always preserved under composition, both approaches will uncover it.

### 5.2 Classification of Properties

When several components that satisfy a particular property \( P \) are composed, one of three things may happen:
1. The resulting system will satisfy the property \( P \).
2. The resulting system might satisfy the property \( P \).
3. The resulting system will never satisfy the property \( P \).

The distinctions have important implications for the system designer.

It is desirable to identify properties such that the composition of several components that satisfy a property always results in a system that satisfies that property. We will call such properties component-independent properties. With components that satisfy component independence, the system designer is free to interconnect them and need not be concerned about the property not holding. Unfortunately, not all properties are component independent.

Components that satisfy some property may be composed so that the resulting system might not satisfy the property. Special attention is required from the system designer to ensure the resulting system satisfies the desired property. If no theory of component composition were available, the system designer would have to reevaluate the system after every newly added component. Fortunately, we can show that this is not required. In the following sections, we present criteria that will allow the system designer to know if the composition will preserve the property or not. We will call properties that might not be preserved by composition component-dependent properties.

The last possible behavior of a property is such that the composition of components that satisfy a property invariably results in a system that never satisfies the property. In this case, the system designer knows that these components must never be interconnected.

The system designer also needs to be able to determine under what circumstances a property emerges on composition. An emergent property is one that is not satisfied individually by every constituent component but is satisfied by their composition. We will provide criteria to determine when and how a property may emerge on composition.

### 5.3 Interconnections of Components

In this work, we examine what effect the interconnection of systems has on security properties. We are interested in two types of interconnections: cascade composition and feedback composition. It can be shown that these are sufficient to perform general composition [McLean, 1994; Millen, 1990].

**5.3.1 Cascade Composition**

Cascades are formed by taking two components \( S_1 \) and \( S_2 \) and passing some of \( S_1 \)'s output events to \( S_2 \)'s input events (see Figure 5.1). We assume that \( S_1 \)'s output meets any environment restrictions expected by \( S_2 \)'s input. That is, \( S_1 \)'s outputs are acceptable inputs for \( S_2 \). The resulting system can now be considered a new component, and another component can be added. In this fashion, larger and larger cascade systems can be constructed.

#### Figure 5.1: Cascade Composition
- **Overall System \( S \)**
- **Component \( S_1 \)**
- **Component \( S_2 \)**

The cascade composition of components \( S_1 \) and \( S_2 \). Some of \( S_1 \)'s output events are fed into \( S_2 \) as inputs.

**Definition 5.1:** Cascade Composition
Given \( S_1 = \langle E_1, I_1, O_1, T_1 \rangle \) and \( S_2 = \langle E_2, I_2, O_2, T_2 \rangle \) that satisfy:
- \( I_1 \cap O_1 \cap O_1 \cap I_2 = \emptyset \)
- \( O_2 \cap I_2 = \emptyset \)
- \( E_2 \cap I_2 = \emptyset \)

The resulting system \( S \) is defined as \( S = \langle E, I, O, T \rangle \) where:
- \( E = E_1 \cup E_2 \)
- \( I = I_1 \)
- \( O = O_2 \)
- \( T \) is the set of all possible traces of \( S \) formed by the composition of \( S_1 \) and \( S_2 \).