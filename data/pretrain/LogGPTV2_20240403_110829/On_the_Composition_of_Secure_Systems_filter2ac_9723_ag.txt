$ s:Blow(t ,S)(cid:215) t = s|( L ¨
:traces(S)|L(cid:215)
  "
$ s:Blow(t ,S)(cid:215) s|HI  = <> (cid:222)
 "
:traces(S)|L(cid:215)
$ s:Blow(t ,S)(cid:215)
s|HI = <>
= "
= ^
:traces(S)|L(cid:215)
:traces(S)|L(cid:215)
Therefore, GN does not imply GNI and GN is a weaker property than GNI.
G
By  applying  the  above  technique  to  the  security  properties  presented  above  the
following lattice can be constructed.
Separability
PSP
Generalized
Noninterference
Noninference
Output Non-
Deducibility
Generalized Noninference
Figure 4.1: A Partial Ordering of Security Properties
The arrows in the lattice indicate which property implies which other.  For example
PSP  implies  Generalized  Noninterference  and  by  transitivity  Generalized  Noninference.
An instructive way to represent part of the above lattice is to only consider the elements
that can be totally ordered.
Figure  4.2  shows  the  ordering  of  most  of  the  security  properties  that  have  been
presented in the literature.  First notice that, for example, Separability secure systems are
both  GNI  secure  and  Generalized  Noninference  secure.    Therefore,  if  a  system  designer
wishes  the  system  to  be  Generalized  Noninference  secure  and  it  is  known  that  it  is  GNI
secure then it is also Generalized Noninference secure.   Also notice that PSP, defined in
section 4.3.1, partitions the figure into two. This can be used to determine the strength of
- 39 -
t
"
t
"
(cid:222)
"
t
t
(cid:222)
"
t
t
(cid:216)
n-Forward Correctability
All Systems
Restrictiveness
Generalized
Noninference
GNI
0
PSP
Separability
Figure 4.2: A Total Ordering of Most Possibilistic Properties
the properties.  We can see that Separability is a stronger property than PSP.  Therefore,
systems with no information flow are being unnecessarily rejected.
Most security properties defined in the literature are weaker than PSP.  This may
be surprising but can be explained because high level interleavings are not considered by
any of the weaker properties.  Example 4.1 on page 29 was used to demonstrate that the
interleavings  of  traces  can  be  used  to  transmit information  from  high  level  users  to  low
level users.  It can be shown that the component of Example 4.1 is Restrictiveness secure
[Lee et. al 92].  From Figure 4.2 it can be seen that this component also satisfies most of
the other properties presented in the literature.  Therefore, all weaker properties than PSP
allow systems to be called secure which are not.
4.6.  PSP Security Proofs
In this section we prove that PSP allows no information flow between high level
users and low level users.  We also prove that it is the weakest such property.
Theorem 4.1: PSP does not allow any information to flow from high level users to low
level users.
- 40 -
¥
Proof:
Assume  that  there  is  a  system  S  that  satisfies  PSP  and  allows  high  level  information  to
flow to low level users.  By the definition of information  flow  there  must  be  some  high
level sequence that is not possible.  By construction all possible high level input sequences
and  high  level  input  sequence  interleavings  are  possible.    Furthermore,  all  possible
interleavings  of  high  level  outputs  are  present.    The  low  level  equivalent  bunch  for  t
contains all sequences that could give the low level users any information about high level
low
activity.
G
Theorem 4.2: PSP is the weakest security property that does not allow information flow
from high level users to low level users.
Proof:
Theorem 4.1 proved that PSP does not allow information to flow from high level users to
low level users.  We must therefore prove that any weaker property must allow flows from
high level users to low level users.
Assume that there exists a property, P, that is weaker than PSP and that does not have any
unauthorized information flows.  Let S be a system that does not satisfy PSP but satisfies
P.   Let m  be a trace such that (cid:216)
PSP.
,S).  Such a trace exists because P is weaker than
:GP(m
low he knows that the trace m
When the low level user observes t
show that the absence of this trace gives the  low  level  user  additional  knowledge about
high level activity.  Since m
1.   The high level input sequence of t  is not consistent with the t
2.   A  high  level  output  event  that  does  not  depend  on  input  events  must  occur  before
 is not a possible trace one of the following must be true:
 is not possible.  We now
low observation
some low level trace t
low because it influences the subsequent behaviour of the trace.
3.   The interleaving of high level events given by m
 is not possible with the observation of
low.  By the construction of m
 the sequence of events m
|H is a valid for some t
low.  The
- 41 -
m
t
absence  of  this  interleaving  with  the  observed  t
knowledge of some aspect of high level state.
low  gives  the  low  level  user  the
In all the cases the absence of the trace m
about high level activity.
 gives the low level user additional knowledge
G
4.7.  Security Properties vs. Safety/Liveness Properties
In  section  2.4.2  we  presented  the  Alpern  and  Schneider  safety/liveness  model  of
properties.  This model is currently the dominant model in the specification of analysis of
programs [McLean94].  Properties are regarded as sets of traces and a component satisfies
a  property  if  its  set  of  traces  is  a  subset  of  the  property’s  set.    With  this  notion  of
refinement and Abadi and Lamport’s composition principle it would be desirable to be able
to  express  security  properties  in  this  manner.    Security  properties,  however,  are  not
preserved by this type of refinement [McLean92b] [McLean94].
In this section we demonstrate that security properties cannot be expressed in the
Alpern and Schneider framework.  McLean has demonstrated this in “A General Theory of
Composition for Trace Sets Closed Under Selective Interleaving Functions” [McLean94]
but for a different model of components.  We will prove this for the event systems we are
considering.
Before  we  can  prove  the  required  result  we  must  define  the  notion  of  one
component being a subset of another.
Definition 4.9: Event System Space
An  event  system  space  is  a  4-tuple    where  E,  I,  O,  T  are
defined as  in  the  definition  of  an  event  system  (see  Definition  3.3  page
16) with T=E*.  We will write Š for the event system space.
Definition 4.10: An Element of a System Space.
A system S= is a subset of the system space Š= if
and only if E1˝ E, I1˝
I, O1˝ O, T1˝ T.
Theorem 4.3: Security properties are not expressible as sets of traces.
Proof:
- 42 -
Let T be the subset of the set of traces of Š that satisfy a security property P.  Any subset
S  of  Š  whose  set  of  traces  are  a  subset  of  T  satisfies  P.    The  satisfaction  of  a  security
property ensures that a system has certain behaviours.  A security property is defined as all
low  level  equivalent  bunches  of  a  system  satisfying  a  predicate.  For  a  property  to  be
satisfied the required traces of the bunch must be present.   Construct a system S whose
traces  are  a  subset  of  T  and  the  security  property  predicate  is  false  for  some  low  level
observation  t
make P true will still result in the set of traces being a subset of T.  The set of traces of S
low.    Such  a  system  exists  because  removing  one  of  the  traces  required  to
does not satisfy the security property P but is a subset of T.  This yields a contradiction.
Therefore, P cannot be expressed as a set of traces. 
G
The  proof  demonstrates  that  the  refinement  step  may  eliminate  some  possible
behaviours of the system.  Eliminating these behaviours means that the security property
might no longer hold.
4.8.  Conclusions
In this section we have presented the notion of security properties.  This definition
is general and intuitively appealing.  We also demonstrated that security properties do not
fall within the safety/liveness framework of Alpern and Schneider.  In the next section we
begin our discussion on the composition of components that satisfy security properties.
- 43 -
5.  Composition  And  The  Emergence  Of
Security Properties
Others  find  their  intellectual  pleasure  lies  in  the  theory,  not  the
practice.
Patrick White (1912-1990)
Australian novelist
5.1. 
Introduction
The purpose of modeling a system is  to  be  able  to  predict  its  behaviour.    To  be
able  to  predict  the  behaviour  of  a  system,  rules  for  the  effects  of  interconnecting
components  are  required.    These  rules  should  allow  the  system  designer  to  know  what
property the system satisfies given the properties of each component.  If the property of
interest  falls  within  the  safety-liveness  framework  then  the  Abadi  and  Lamport
composition principle may be used.  If not, the system designer must evaluate the system
to determine what properties it enforces.
In the previous chapter we demonstrated that security properties do not fall within
the  safety-liveness  framework.    Therefore,  Abadi  and  Lamport’s  composition  principle
cannot be applied.  In this chapter we present composition results for security properties.
This  gives  the  system  designer  the  ability  to  predict  the  resulting  security  property  of  a
composition given the property of each of the components.
There  are  two  different  approaches  a  system  designer  can  take.    The  system
designer may want to know what property two or more of the components must satisfy so
that when they are interconnected the system satisfies a property P.  The other approach is
to determine what properties are satisfied by the system that results from the composition
of two (or more) components with given properties.
The approaches can be seen to be duals of each other.  In the first approach the
system is decomposed to determine what its constituent parts must satisfy.  In the other
approach the system is composed to determine what the resulting system satisfies.
- 44 -
Both  approaches  are  required  because  they  satisfy  different  needs.    If  a  desired
property  of  the  system  might  not  be  preserved  under  composition  then  it  is  required  to
decompose  the  system  to  determine  what  each  component  must  satisfy.    If  the  system
designer  is  composing  several  components  then  he  wishes  to  know  what  properties  the
resulting  system  will  satisfy.    Notice  that  if  a  property  is  always  preserved  under
composition then both approaches will uncover it.
5.2.  Classification of Properties
When several components that satisfy a particular property P are composed one of
three things may happen:
1.  The resulting system will satisfy the property P.
2.  The resulting system might satisfy the property P.
3.  The resulting system will never satisfy the property P.
The distinctions have important implications for the system designer.
It  is  desirable  to  identify  properties  such  that  the  composition  of  several
components that satisfy a property always result in  a  system  that  satisfies  that  property.
We  will  call  such  properties  component  independent  properties.    With  components  that
satisfy component independence the system designer is free to interconnect them and need
not  be  concerned  about  the  property  not  holding.  Unfortunately,  not  all  properties  are
component independent.
Components  that  satisfy  some  property  may  be  composed  so  that  the  resulting
system  might  not  satisfy  the  property.    Special  attention  is  required  from  the  system
designer  to  ensure  the  resulting  system  satisfies  the  desired  property.    If  no  theory  of
component composition were available the system designer would have to reevaluate the
system  after  every  newly  added  component.    Fortunately,  we  can  show  that  this  is  not
required.  In the following sections we present criteria that will allow the system designer
to know if the composition will preserve the property or not.  We will call properties that
might not be preserved by composition component dependent properties.
The  last  possible  behaviour  of  a  property  is  such  that  the  composition  of
components  that  satisfy  a  property  invariably  results  in  a  system  that  never  satisfies  the
- 45 -
property.  In this case the system  designer  knows  that  these  components  must  never  be
interconnected.
The system designer also needs to be able to determine under what circumstances
a  property  emerges  on  composition.    An  emergent  property  is  one  that  is  not  satisfied
individually by every constituent component but is satisfied by their composition.  We will
provide criteria to determine when and how a property may emerge on composition.
5.3. 
Interconnections of Components
In this work we examine what effect the interconnection of systems has on security
properties.  We are interested in two types of interconnections:  cascade composition and
feedback  composition.    It  can  be  shown  that  these  are  sufficient  to  perform  general
composition5.
Cascades  are  formed  by  taking  two  components  S1  and  S2  and  passing  some  of
S1’s  output  events  to  S2’s  input  events  (see  Figure  5.1).    We  assume  that  S1’s  output
meets  any  environment  restrictions  expected  by  S2’s  input.    That  is,  S1’s  outputs  are
acceptable inputs for S2.  The resulting system can now be considered a new component
and another component can be added.  In  this fashion larger and larger cascade systems
can be constructed.
The overall System S
S1
S2
Figure 5.1: Cascade Composition
The  cascade  composition  of  components  S1  and  S2.    Some  of  S1’s  output
events are fed into S2 as inputs.
5 
McLean [McLean94] demonstrates this with product composition (cascade composition with no
internal  events)  and  feedback  composition.    The  ability  to  perform  general  composition  from
cascade and feedback composition was noted by Millen [Millen90] who attributes it to Rushby.
- 46 -
The other type of composition involves feedback.  In  a  system that  is  composed
with feedback some of S2’s outputs in Figure 5.1 are directed to become inputs at S1.  See
Figure 5.2.  With these two types of composition any system can be constructed.
The overall System S
S1
S2
Figure 5.2: Feedback Composition
The  difference  between  cascade  composition  and  feedback  composition  is
that in feedback composition some of S2’s outputs are directed to become
inputs at S1.
5.3.1. Cascade Composition
The definition of composition presented in section 3.4 (page 18) was for general
composition.  Since we will begin our investigation of composition by examining cascade
composition we will formally define the cascade composition operation.
It can be seen from Figure 5.1 that all input events of the first component, S1, are
also input events of the composed  system.    All  of    the  input  events  to  S1  are  also  input
events of S.  Since all possible inputs can occur for the S1 component all the traces of S1
are  possible.    For  the  second  component  (component  S2  in  Figure  5.1)  not  all  input
combinations  are  necessarily  possible.    The  outputs  of  S1  may  not  generate  all  possible
input sequences to S2, therefore, not all traces of S2 may be possible.  This leads us to the
following definition of cascade composition.
Definition 5.1: Cascade Composition
Given S1= and S2= that satisfy
I1 ˙
O1 ˙
 O1)) ˙
 O2)) ˙
 I2 = ˘
 O2 = ˘
 E2 = ˘