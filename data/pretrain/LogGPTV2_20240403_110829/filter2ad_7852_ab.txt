            addr += now.size
            now = dis64(addr)
            jz_addr = int(now.op_str, 16)
            next_addr = unpack(""%addr, end=' ')
        for i in node:
            print('\''+i[1]+'\'', "0x%04x"%i[0], end=', ')
        print()
    def get_graph(addr, switch):
        if addr == 0x30d0:
            return
        global nodes
        if switch == 0:
            node = exp32(addr)
        else:
            node = exp64(addr)
        switch ^= 1
        nodes[addr] = node
        show(addr, node)
        for i in node:
            if i[0] not in nodes.keys():
                get_graph(i[0], switch)
    get_graph(0, 0)
跑出的结果
    0x0000 -> 'f' 0x049e, 
    0x049e -> '0' 0x0000, '4' 0x0558, 
    0x0558 -> 'f' 0x09cc, '9' 0x049e,
    0x09cc -> '2' 0x0558, 'c' 0x098a,
    0x098a -> 'e' 0x0e60, '6' 0x09cc,
    0x0e60 -> '8' 0x098a, '9' 0x0f1a, 
    0x0f1a -> '5' 0x1372, 'f' 0x0e60,
    0x1372 -> 'e' 0x0f1a, 'b' 0x192c,
    0x192c -> 'c' 0x1372, '6' 0x1838,
    0x1838 -> '0' 0x134c, '3' 0x1dd4, '5' 0x192c, 
    0x134c -> '7' 0x1838,
    0x1dd4 -> '2' 0x1838, 'f' 0x22c0,
    0x22c0 -> 'a' 0x1dd4, '5' 0x27ac,
    0x27ac -> '2' 0x22c0, '7' 0x2c02, 
    0x2c02 -> 'f' 0x27ac, '1' 0x2cbc,
    0x2cbc -> '8' 0x2cfe, '9' 0x2c02,
    0x2cfe -> '7' 0x2db8, '0' 0x2cbc,
    0x2db8 -> 'c' 0x2dfa, 'b' 0x2cfe,
    0x2dfa -> '9' 0x2eb4, '8' 0x2db8, 
    0x2eb4 -> '4' 0x29b4, 'a' 0x2dfa,
    0x29b4 -> '5' 0x2eb4, '2' 0x2a6e,
    0x2a6e -> '4' 0x25b4, 'a' 0x29b4,
    0x25b4 -> '7' 0x2a6e, 'a' 0x266e,
    0x266e -> 'e' 0x210a, '5' 0x25b4,
    0x210a -> '8' 0x266e, '0' 0x21c4, 
    0x21c4 -> '6' 0x1cbc, 'b' 0x210a,
    0x1cbc -> 'e' 0x21c4, 'c' 0x1d76,
    0x1d76 -> '8' 0x177e, 'f' 0x2206, 'e' 0x1cbc,
    0x177e -> '0' 0x130a, '2' 0x1d76, 
    0x130a -> '4' 0x177e, 'd' 0x1250,
    0x1250 -> '3' 0x173c, '0' 0x130a, 
    0x173c -> '1' 0x1250, '2' 0x1682,
    0x1682 -> 'a' 0x120e, '3' 0x173c,
    0x120e -> '9' 0x1682, 'e' 0x1154,
    0x1154 -> 'b' 0x1640, 'c' 0x120e,
    0x1640 -> '4' 0x1154, 'e' 0x1ba2,
    0x1ba2 -> 'f' 0x1640, '9' 0x20c8, '2' 0x1c96,
    0x20c8 -> '5' 0x1ba2, '1' 0x200e,
    0x200e -> '8' 0x2572, 'd' 0x20c8,
    0x2572 -> '0' 0x200e, '5' 0x24b8, 
    0x24b8 -> 'd' 0x2972, '5' 0x2572,
    0x2972 -> 'e' 0x24b8, 'c' 0x28b8,
    0x28b8 -> 'e' 0x2476, 'd' 0x2972,
    0x2476 -> 'c' 0x1f2e, '7' 0x28b8,
    0x1f2e -> '7' 0x2476, 'e' 0x1ed0,
    0x1ed0 -> '2' 0x196e, 'd' 0x1f2e, '6' 0x1e16,
    0x196e -> '3' 0x142c, '2' 0x1ed0,
    0x142c -> '9' 0x196e, 'f' 0x146e,
    0x146e -> '1' 0x1016, '7' 0x142c, 
    0x1016 -> '9' 0x146e, '5' 0x0f5c,
    0x0f5c -> 'c' 0x0a86, 'f' 0x1016,
    0x0a86 -> '1' 0x059a, '5' 0x0f5c,
    0x059a -> '3' 0x00ae, 'a' 0x0a86,
    0x00ae -> 'c' 0x059a, '6' 0x010c, '7' 0x0026, 
    0x010c -> 'b' 0x0654, 'e' 0x00ae,
    0x0654 -> '9' 0x010c, 'c' 0x0696,
    0x0696 -> '7' 0x01c6, '6' 0x0654,
    0x01c6 -> '0' 0x0696, 'f' 0x0208,
    0x0208 -> 'b' 0x0750, 'c' 0x01c6,
    0x0750 -> 'd' 0x0208, 'c' 0x0792,
    0x0792 -> '5' 0x02c2, '9' 0x0750,
    0x02c2 -> '3' 0x0792, 'c' 0x0304,
    0x0304 -> '3' 0x084c, 'd' 0x02c2, 
    0x084c -> 'd' 0x0304, '9' 0x088e,
    0x088e -> 'e' 0x0d48, '2' 0x084c,
    0x0d48 -> 'd' 0x088e, 'b' 0x0da6, '3' 0x0c8e,
    0x0da6 -> '0' 0x0948, '5' 0x0d48,
    0x0948 -> '2' 0x03e4, 'c' 0x0da6,
    0x03e4 -> 'f' 0x0948, '1' 0x03be, 
    0x03be -> '5' 0x03e4,
    0x0c8e -> '9' 0x0d48, '5' 0x0c4c,
    0x0c4c -> 'c' 0x0c8e, '9' 0x0b92,
    0x0b92 -> '4' 0x1112, '3' 0x0c4c,
    0x1112 -> '9' 0x0b92, 'f' 0x1586,
    0x1586 -> '2' 0x1112, '9' 0x1528,
    0x1528 -> '0' 0x1058, 'e' 0x1a4e, '5' 0x1586,
    0x1058 -> 'b' 0x0b50, 'e' 0x1528,
    0x0b50 -> 'b' 0x1058, '8' 0x0ac8,
    0x0ac8 -> 'd' 0x0b50,
    0x1a4e -> '8' 0x1528, '7' 0x1fe8, '0' 0x1b7c, '1' 0x1a28, 
    0x1fe8 -> '3' 0x1a4e,
    0x1b7c -> '9' 0x1a4e,
    0x1a28 -> '0' 0x1a4e,
    0x0026 -> '3' 0x00ae,
    0x1e16 -> 'b' 0x237a, 'c' 0x1ed0,
    0x237a -> '2' 0x1e16, '5' 0x23bc,
    0x23bc -> '9' 0x2876, '6' 0x237a, 
    0x2876 -> '2' 0x23bc, 'e' 0x27ee,
    0x27ee -> '3' 0x2876,
    0x1c96 -> 'a' 0x1ba2,
    0x2206 -> 'e' 0x1d76, '1' 0x276a,
    0x276a -> '9' 0x2206, 'a' 0x26b0,
    0x26b0 -> '8' 0x2b38, 'e' 0x276a,
    0x27ee -> '3' 0x2876,
    0x1c96 -> 'a' 0x1ba2,
    0x2206 -> 'e' 0x1d76, '1' 0x276a,
    0x276a -> '9' 0x2206, 'a' 0x26b0,
    0x26b0 -> '8' 0x2b38, 'e' 0x276a,
    0x2b38 -> '7' 0x26b0, '6' 0x2fdc,
    0x2fdc -> 'a' 0x2b38, 'f' 0x30d0, 'c' 0x2f7e,
    0x2f7e -> '3' 0x2ab0, '5' 0x2fdc, '9' 0x2ef6,
    0x2ab0 -> '5' 0x2f7e,
    0x2ef6 -> '8' 0x2f7e,
## 图搜算法
接下来就是图搜索算法了，需要找到一条从0到0x30d0的路径。
    def dfs(addr, flag, path):
        if addr == 0x30d0:
            print("found!")
            print("npointer{"+flag+"}")
            return
        node = nodes[addr]
        for i in node:
            if i[0] not in path:
                get_path(i[0], flag+i[1], path+[i[0]])
    dfs(0, "", [])
输出结果
    found!
    npointer{f4fce95b63f57187c9424ae06cf1a86f}