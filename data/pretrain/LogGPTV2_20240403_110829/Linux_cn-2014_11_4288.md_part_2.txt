刚才，我们已经在上面创建了精简卷，这就是为什么没有数据，显示为**0.00%M**。
好吧，让我为其它2个客户再创建2个精简卷。这里，你可以看到在精简池（**tp\_tecmint\_pool**）下有3个精简卷了。所以，从这一点上看，我们开始明白，我已经使用所有15GB的精简池。
![Create Thin Volumes](/data/attachment/album/201411/23/115048t9x7q94hjiqi7hx9.jpg)
### 创建文件系统
现在，使用下面的命令为这3个精简卷创建挂载点并挂载，然后拷贝一些文件进去。
```
# mkdir -p /mnt/client1 /mnt/client2 /mnt/client3
```
列出创建的目录。
```
# ls -l /mnt/
```
![Creating Mount Points](/data/attachment/album/201411/23/115050t2pw1mcvv4ttct5m.jpg)
*创建挂载点*
使用‘mkfs’命令为这些创建的精简卷创建文件系统。
```
# mkfs.ext4 /dev/vg_thin/thin_vol_client1 && mkfs.ext4 /dev/vg_thin/thin_vol_client2 && mkfs.ext4 /dev/vg_thin/thin_vol_client3
```
![Create File System](/data/attachment/album/201411/23/115053qndij3gdm56m5gjg.jpg)
*创建文件系统*
使用‘mount’命令来挂载所有3个客户卷到创建的挂载点。
```
# mount /dev/vg_thin/thin_vol_client1 /mnt/client1/ && mount /dev/vg_thin/thin_vol_client2 /mnt/client2/ && mount /dev/vg_thin/thin_vol_client3 /mnt/client3/
```
使用‘df’命令来列出挂载点。
```
# df -h
```
![Print Mount Points](/data/attachment/album/201411/23/115057s77txmuk6t55638u.jpg)
*显示挂载点*
这里，我们可以看到所有3个客户卷已经挂载了，而每个客户卷只使用了3%的数据空间。那么，让我们从桌面添加一些文件到这3个挂载点，以填充一些空间。
![Add Files To Volumes](/data/attachment/album/201411/23/115100dcq244kvunnjkgbj.jpg)
*添加文件到卷*
现在列出挂载点，并查看每个精简卷使用的空间，然后列出精简池来查看池中已使用的大小。
```
# df -h
# lvdisplay vg_thin/tp_tecmint_pool
```
![Check Mount Point Size](/data/attachment/album/201411/23/115105xj2yff7nrfe1ir28.jpg)
*检查挂载点大小*
![Check Thin Pool Size](/data/attachment/album/201411/23/115108gmhmwwqacgmq2ws6.jpg)
*检查精简池大小*
上面的命令显示了3个挂载点及其使用大小百分比。
```
13% of datas used out of 5GB for client1
29% of datas used out of 5GB for client2
49% of datas used out of 5GB for client3
```
在查看精简池时，我们看到总共只有**30%**的数据被写入，这是上面3个客户虚拟卷的总使用量。
### 过度资源调配
现在，**第四个**客户来申请5GB的存储空间。我能给他吗？因为我已经把15GB的池分配给了3个客户。能不能再给另外一个客户分配5GB的空间呢？可以，这完全可能。在我们使用**过度资源调配**时，就可以实现。过度资源调配可以给我们比我们所拥有的更大的空间。
让我来为第四位客户创建5GB的空间，然后再验证一下大小吧。
```
# lvcreate -V 5G --thin -n thin_vol_client4 vg_thin/tp_tecmint_pool
# lvs
```
![Create thin Storage](/data/attachment/album/201411/23/115111khfrffntr6fk4ufs.jpg)
*创建精简存储*
在精简池中，我只有15GB大小的空间，但是我已经在精简池中创建了4个卷，其总量达到了20GB。如果4个客户都开始写入数据到他们的卷，并将空间填满，到那时我们将面对严峻的形势。如果不填满空间，那不会有问题。
现在，我已经创建在**thin\_vol\_client4**中创建了文件系统，然后挂载到了**/mnt/client4**下，并且拷贝了一些文件到里头。
```
# lvs
```
![Verify Thin Storage](/data/attachment/album/201411/23/115114ci4o9piqioxlliiz.jpg)
*验证精简存储*
我们可以在上面的图片中看到，新创建的client 4总计使用空间达到了**89.34%**，而精简池的已用空间达到了**59.19**。如果所有这些用户不再过度对卷写入，那么它就不会溢出，下线。要避免溢出的话，我们需要扩展精简池大小。
**重要**：精简池只是一个逻辑卷，因此，如果我们需要对其进行扩展，我们可以使用和扩展逻辑卷一样的命令，但我们不能缩减精简池大小。
```
# lvextend
```
这里，我们可以看到怎样来扩展逻辑精简池（**tp*tecmint*pool**）。
```
# lvextend -L +15G /dev/vg_thin/tp_tecmint_pool
```
![Extend Thin Storage](/data/attachment/album/201411/23/115116tx2cf7ad77m27727.jpg)
*扩展精简存储*
接下来，列出精简池大小。
```
# lvs
```
![Verify Thin Storage](/data/attachment/album/201411/23/115119eue74qtmizs64hut.jpg)
*验证精简存储*
前面，我们的**tp*tecmint*pool**大小为15GB，而在对第四个精简卷进行过度资源配置后达到了20GB。现在，它扩展到了30GB，所以我们的过度资源配置又回归常态，而精简卷也不会溢出下线了。通过这种方式，我们可以添加更多的精简卷到精简池中。
在本文中，我们已经了解了怎样来使用一个大尺寸的卷组创建一个精简池，以及怎样通过过度资源配置在精简池中创建精简卷和扩着精简池。在下一篇文章中，我们将介绍怎样来移除逻辑卷。
---
via: 
作者：[Babin Lonston](http://www.tecmint.com/author/babinlonston/) 译者：[GOLinux](https://github.com/GOLinux) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出