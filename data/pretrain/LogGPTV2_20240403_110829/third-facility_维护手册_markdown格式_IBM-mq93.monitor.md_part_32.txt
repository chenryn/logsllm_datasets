### PCF Parameters and XA Functions in IBM MQ

#### PCF Parameter: `MQIACF_XA_RETVAL`
- **Trace Level:** 1
- **Type:** `MQCFIN` or `MQCFBS`
- **Description:** Resource manager identifier

#### PCF Parameter: `MQIACF_XA_RMID`
- **Trace Level:** 1
- **Type:** `MQCFIN`
- **Description:** Resource manager identifier

#### PCF Parameter: `MQIACF_XA_FLAGS`
- **Trace Level:** 1
- **Type:** `MQCFIN`
- **Description:** Flags

#### PCF Parameter: `MQIACF_XA_RETCODE`
- **Trace Level:** 1
- **Type:** `MQCFIN`
- **Description:** Return code

#### PCF Parameter: `MQBACF_XA_XID`
- **Trace Level:** 1
- **Type:** `MQCFBS`
- **Length:** `Sizeof(XID)`
- **Description:** The XID structure

### XA Functions

#### XAEND
- **Description:** Application has started the XAEND AX function
- **Parameters:**
  - `XID`: The XID structure
  - `Rmid`: Resource manager identifier
  - `Flags`: Flags
  - `XARetCode`: Return code

#### XAFORGET
- **Description:** Application has started the XAFORGET AX function
- **Parameters:**
  - `XID`: The XID structure
  - `Rmid`: Resource manager identifier
  - `Flags`: Flags
  - `XARetCode`: Return code

#### XAOPEN
- **Description:** Application has started the XAOPEN AX function
- **Parameters:**
  - `Xa_info`: Information used to initialize the resource manager
  - `Rmid`: Resource manager identifier
  - `Flags`: Flags
  - `XARetCode`: Return code

#### XAPREPARE
- **Description:** Application has started the XAPREPARE AX function
- **Parameters:**
  - `XID`: The XID structure
  - `Rmid`: Resource manager identifier
  - `Flags`: Flags
  - `XARetCode`: Return code

#### XARECOVER
- **Description:** Application has started the XARECOVER AX function
- **Parameters:**
  - `Count`: Count of XIDs
  - `XIDs`: The XID structures (multiple instances, one for each XID up to `Count`)
  - `Rmid`: Resource manager identifier
  - `Flags`: Flags
  - `XARetCode`: Return code

#### XAROLLBACK
- **Description:** Application has started the XAROLLBACK AX function
- **Parameters:**
  - `XID`: The XID structure
  - `Rmid`: Resource manager identifier
  - `Flags`: Flags
  - `XARetCode`: Return code

#### XASTART
- **Description:** Application has started the XASTART AX function
- **Parameters:**
  - `XID`: The XID structure
  - `Rmid`: Resource manager identifier
  - `Flags`: Flags
  - `XARetCode`: Return code

### System Topics for Monitoring and Activity Trace

#### $SYS/MQ Branch of Queue Manager Topic Tree
- **Description:** Each queue managerâ€™s topic tree contains the `$SYS/MQ` branch. The queue manager publishes to topic strings in this branch.
- **Subscription:**
  - An authorized user can subscribe to these topic strings to receive information on the queue manager and the activity on it.
  - Wildcard characters at a point higher in the tree than `$SYS/MQ` do not match any topic string within the `$SYS/MQ` branch.
  - Authorization is required at or deeper than `$SYS/MQ` to use the `$SYS/MQ` topic tree.
  - The `$SYS/MQ` branch is isolated from topic attributes set higher in the tree.

#### Restrictions
- Multicast is not supported for the `$SYS/MQ` branch.
- Clustering is not supported for the `$SYS/MQ` branch.
- The proxy subscription mechanism cannot be set to "force".
- Applications cannot publish to a `$SYS/MQ` topic string.
- Publication and subscription scope defaults to the local queue manager only.
- No wildcard characters can be used at specific points, such as `$SYS/MQ/`, `$SYS/MQ/INFO`, etc.

### Performance Monitoring API Available Through Publish/Subscribe

#### From IBM MQ 9.0
- **Description:** You can monitor queue manager statistics using the simple publish/subscribe mechanism and either the `amqsrua` sample application or your own application.
- **Statistics:** Published to a system topic under `$SYS/MQ/INFO/QMGR` to help users monitor resources.

### Using the `amqsrua` Command

#### About the Task
- **Description:** The `amqsrua` sample application showcases a way to consume IBM MQ monitoring publications and display performance data published by queue managers.
- **Data:** Includes information about CPU, memory, and disk usage, and data equivalent to the `STATMQI` PCF statistics data.
- **Publication Frequency:** Every 10 seconds.

#### Command Options
- `-m`: Queue manager name (required, must be running).
- `-c`: CLASS name (e.g., `CPU`, `DISK`, `STATMQI`).
- `-t`: TYPE name (e.g., `PUT`, `GET`).
- `-o`: Object name (e.g., application name for `STATAPP`, queue name for `STATQ`).
- `-p`: Metadata prefix (default: `$SYS/MQ/INFO/QMGR`).
- `-n`: Publication count (number of reports before command ends).
- `-s`: Model queue (default: `SYSTEM.DEFAULT.MODEL.QUEUE`).
- `-h`: Usage help.

#### Procedure
1. **Run the Command:**
   - On Linux: `./amqsrua -m QMgrName`
   - On Windows: `amqsrua -m QMgrName`
   - Enter the class, type, and object names as prompted.

2. **Example Output:**
   - Displays interval total counts and byte counts for various MQ operations.

This document provides a comprehensive overview of the PCF parameters, XA functions, and system topics used for monitoring and performance in IBM MQ.