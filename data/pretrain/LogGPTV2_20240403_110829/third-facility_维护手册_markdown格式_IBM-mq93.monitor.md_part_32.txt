PCF Parameter: MQIACF_XA_RETVAL
Trace level: 1
Type: MQCFINMQCFBS
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
XAEND
Application has started the XAEND AX function
XID
Description: The XID structure
282 Monitoring and Performance for IBM MQ
PCF Parameter: MQBACF_XA_XID
Trace level: 1
Type: MQCFBS
Length: Sizeof(XID)
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
XAFORGET
Application has started the AXREG AX function
XID
Description: The XID structure
PCF Parameter: MQBACF_XA_XID
Trace level: 1
Type: MQCFBS
Length: Sizeof(XID)
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
IBM MQ Monitoring and performance 283
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
XAOPEN
Application has started the XAOPEN AX function
Xa_info
Description: Information used to initialize the resource manager.
PCF Parameter: MQCACF_XA_INFO
Trace level: 1
Type: MQCFST
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
XAPREPARE
Application has started the XAPREPARE AX function
XID
Description: The XID structure
PCF Parameter: MQBACF_XA_XID
Trace level: 1
Type: MQCFBS
Length: Sizeof(XID)
284 Monitoring and Performance for IBM MQ
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
XARECOVER
Application has started the XARECOVER AX function
Count
Description: Count of XIDs
PCF Parameter: MQIACF_XA_COUNT
Trace level: 1
Type: MQCFIN
XIDs
Description: The XID structures
Note: There are multiple instances of this PCF parameter - one for every XID
structure up to Count XIDs
PCF Parameter: MQBACF_XA_XID
Trace level: 1
Type: MQCFBS
Length: Sizeof(XID)
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
IBM MQ Monitoring and performance 285
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
XAROLLBACK
Application has started the XAROLLBACK AX function
XID
Description: The XID structure
PCF Parameter: MQBACF_XA_XID
Trace level: 1
Type: MQCFBS
Length: Sizeof(XID)
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
286 Monitoring and Performance for IBM MQ
XASTART
Application has started the XASTART AX function
XID
Description: The XID structure
PCF Parameter: MQBACF_XA_XID
Trace level: 1
Type: MQCFBS
Length: Sizeof(XID)
Rmid
Description: Resource manager identifier
PCF Parameter: MQIACF_XA_RMID
Trace level: 1
Type: MQCFIN
Flags
Description: Flags
PCF Parameter: MQIACF_XA_FLAGS
Trace level: 1
Type: MQCFIN
XARetCode
Description: Return code
PCF Parameter: MQIACF_XA_RETCODE
Trace level: 1
Type: MQCFIN
System topics for monitoring and activity trace
System topics in queue manager topic trees are used for resource monitoring (some of which is similar to
the content of statistics messages) and as a way of consuming application activity trace.
$SYS/MQ branch of queue manager topic tree
Each queue manager’s topic tree contains the $SYS/MQ branch. The queue manager publishes to topic
strings in this branch. An authorized user can subscribe to these topic strings to receive information on
the queue manager and the activity on it. These system topics are used for application activity trace and
monitoring. For more information, see Topic Trees.
The root of the $SYS/MQ branch is represented by the SYSTEM.ADMIN.TOPIC topic object. The $SYS/MQ
branch of the topic tree is isolated from the rest of the topic tree in the following ways:
• A subscription that is made with wildcard characters at a point higher in the tree than
$SYS/MQ does not match any topic string within the $SYS/MQ branch. The wildcard operation for
SYSTEM.ADMIN.TOPIC is set to "Block" and cannot be modified. This limitation also applies when you
use wildcard characters with the runmqsc command DISPLAY TPSTATUS to display nodes in the topic
tree. To view topic nodes within the $SYS/MQ branch, start the topic string with $SYS/MQ. For example,
use $SYS/MQ/# to see all nodes.
IBM MQ Monitoring and performance 287
• You must be authorized at, or deeper than, $SYS/MQ to be granted authority to use the $SYS/MQ
topic tree. Authorization to subscribe to a topic string is based on authorization being granted for
an administered topic object at or higher than the topic string in the topic tree. Authorizations that
are granted at the very root (SYSTEM.BASE.TOPIC) would grant a user authority to all topic strings.
However, in the case of the $SYS/MQ branch, access granted higher than $SYS/MQ does not apply to the
$SYS/MQ topic strings.
• The $SYS/MQ branch of the topic tree is isolated from topic attributes set higher in the tree. The
SYSTEM.ADMIN.TOPIC does not inherit any attributes from a topic object defined higher in the topic
tree. For example, changing attributes of SYSTEM.BASE.TOPIC does not affect the behavior of the
$SYS/MQ branch.
All topic strings that start with $SYS/MQ are reserved for use by IBM MQ. These topic strings have the
following restrictions:
• You cannot enable multicast from the $SYS/MQ branch of the topic tree.
• Clustering is not supported for the $SYS/MQ branch.
• The proxy subscription mechanism cannot be set to "force".
• Applications cannot publish to a $SYS/MQ topic string.
• Publication and subscription scope defaults to the local queue manager only.
• No wildcard characters can be used at the following points:
– $SYS/MQ/
– $SYS/MQ/INFO
– $SYS/MQ/INFO/QMGR
– $SYS/MQ/INFO/QMGR/queue_manager_name
– $SYS/MQ/INFO/QMGR/queue_manager_name/ActivityTrace
Attempts to use wildcard characters at these points causes a subscription failure with the reason
MQRC_ADMIN_TOPIC_STRING_ERROR.
Performance monitoring API available through publish/subscribe
From IBM MQ 9.0, you can monitor queue manager statistics by using the simple publish/subscribe
mechanism and either the amqsrua sample application, or your own application. Statistics are published
to a system topic under $SYS/MQ/INFO/QMGR that help users monitor resources. These statistics can be
viewed either by running the amqsrua sample application, or by writing an application that subscribes to
the resource monitoring system topic in a similar way to amqsrua.
Related concepts
“Application activity trace” on page 202
Application activity trace produces detailed information about the behavior of applications connected to
a queue manager. It traces the behavior of an application and provides a detailed view of the parameters
used by an application as it interacts with IBM MQ resources. It also shows the sequence of MQI calls
issued by an application.
Monitoring system resource usage by using the amqsrua
command
You can use the amqsrua command to query performance data that is related to the system resource
usage of a queue manager.
About this task
The amqsrua sample application showcases a way to consume IBM MQ monitoring publications and
display performance data that is published by queue managers. This data can include information about
the CPU, memory, and disk usage. You can also see data equivalent to the STATMQI PCF statistics data.
The data is published every 10 seconds and is reported while the command runs.
288 Monitoring and Performance for IBM MQ
You can run the command with just the queue manager name and interactively step through to choose the
CLASS, then TYPE and then object parameters that are available for the queue manager at each step.
If you know the CLASS, TYPE and object names for which you want to see information, you can specify
them when you run the amqsrua command.
By default, the amqsrua application looks for statistics that are published by the queue manager under
the topic tree $SYS/MQ/INFO/QMGR. Other components or applications can use a similar mechanism
to publish under a different topic starting point. For example, the IBM MQ Bridge to Salesforce that is
available on x86-64 Linux platforms, publishes statistics under $SYS/Application/runmqsfb. From
IBM MQ 9.1.0, you can use the -p parameter to specify where amqsrua looks for the statistics for these
other components on both Linux and Windows.
-m
Queue manager name. The queue manager must be running. If you do not specify a queue manager
name, statistics for the default queue manager are displayed.
-c
CLASS name. IBM MQ resource usage publications are associated with a class. The classes represent
the top level in the tree of metadata that describes the available resource usage information.
CPU
Returns information about CPU usage.
DISK
Returns information about disk usage.
STATMQI
Returns information about MQI usage.
STATQ
Returns information about per-queue MQI usage.
STATAPP
Returns information about usage statistics for the application specified.
See “Developing your own resource monitoring application” on page 291 for information on
how you specify the topic tree for metadata, and Using the application name in supported
programming languages for the characters you can use in the names of applications.
Note: You use the -o option to specify the application name being monitored for STATAPP, and the
queue name for STATQ.
For classes available only with the IBM MQ Bridge to Salesforce, see “Monitoring the IBM MQ Bridge
to Salesforce” on page 296.
-t
TYPE name. IBM MQ resource usage publications are associated with a type within a class. Each
publication includes the class and type that allows the class/type/element definitions to be found
and the resulting publications to be handled. The class/type/element descriptions are published
as metadata at queue manager startup.
-o
Object name. Resource usage publications are PCF messages that consist of a sequence of PCF
elements. The PCF elements that are published for each class/type pair are advertised in the
metadata. A leaf is stored in the tree that describes each element, thus allowing the elements to
be processed.
-p
Metadata prefix. Specify a topic tree starting point where amqsrua can look for statistics that are
published by queue managers. The default topic tree is $SYS/MQ/INFO/QMGR but other components
or applications might publish statistics under a different topic tree starting point, for example, the IBM
MQ Bridge to Salesforce publishes statistics under $SYS/Application/runmqsfb.
-n
Publication count. You can specify how many reports are returned before the command ends. The
data is published approximately every ten seconds, so if you enter a value of 50, the command returns
IBM MQ Monitoring and performance 289
50 reports over 500 seconds. If you do not specify this parameter, the command runs until either an
error occurs, or the queue manager shuts down.
-s
Model queue. Optionally specify a model queue to use. (By default amqsrua uses the
SYSTEM.DEFAULT.MODEL.QUEUE queue.)
-h
Usage
Procedure
1.From the samples directory, issue the following command to display the available data for the queue
manager:
• On Linux, MQ_INSTALLATION_PATH/samp/bin:
./amqsrua -m QMgrName
• On Windows, MQ_INSTALLATION_PATH\tools\c\Samples\Bin64:
amqsrua -m QMgrName
where QMgrName specifies the name of the queue manager that you want to query. The queue
manager must be running. If you do not specify a queue manager name, the default queue manager is
used.
The following options are available:
CPU : Platform central processing units
DISK : Platform persistent data stores
STATMQI : API usage statistics
STATQ : API per-queue usage statistics
Enter Class selection
==>
2.From the list of CLASS options, enter STATMQI.
==> STATMQI
CONNDISC : MQCONN and MQDISC
OPENCLOSE : MQOPEN and MQCLOSE
INQSET : MQINQ and MQSET
PUT : MQPUT
GET : MQGET
SYNCPOINT : Commit and rollback
SUBSCRIBE : Subscribe
PUBLISH : Publish
Enter Type selection
==>
3.From the list of TYPE options, enter PUT.
==>PUT
Publication received PutDate:20170329 PutTime:17045485 Interval:4 minutes,13.978 seconds
Interval total MQPUT/MQPUT1 count 22
Interval total MQPUT/MQPUT1 byte count 25284 100/sec
Non-persistent message MQPUT count 22
Persistent message MQPUT count 0
Failed MQPUT count 0
Non-persistent message MQPUT1 count 0
Persistent message MQPUT1 count 0
Failed MQPUT1 count 0
Put non-persistent messages - byte count 25284 100/sec
Put persistent messages - byte count 0
MQSTAT count 0
Publication received PutDate:20170329 PutTime:17050485 Interval:10.001 seconds
Interval total MQPUT/MQPUT1 count 1
Interval total MQPUT/MQPUT1 byte count 524 52/sec