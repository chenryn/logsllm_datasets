# A-Journey-into-Synology-NAS-系列三-iscsi_snapshot_comm_core服务分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## A Journey into Synology NAS 系列三: iscsi_snapshot_comm_core服务分析
上一篇[文章](https://www.anquanke.com/post/id/251909)主要对群晖`NAS`设备上的`findhostd`服务进行了分析。本篇文章将继续对另一个服务`iscsi_snapshot_comm_core`进行分析，介绍其对应的通信流程，并分享在其中发现的几个安全问题。
## iscsi_snapshot_comm_core服务分析
`iSCSI (Internet small computer system interface)`，又称`IP-SAN`，是一种基于块设备的数据访问协议。`iSCSI`可以实现在`IP`网络上运行`SCSI`协议，使其能够在诸如高速千兆以太网上进行快速的数据存取/备份操作。
群晖`NAS`设备上与`iSCSI`协议相关的两个进程为`iscsi_snapshot_comm_core`和`iscsi_snapshot_server`，对应的通信流程示意图如下。具体地，`iscsi_snapshot_comm_core`首先接收并解析来自外部`socket`的数据，之后再通过`pipe`发送给自己，对接收的`pipe`数据进行处理后，再通过`pipe`发送数据给`iscsi_snapshot_server`。`iscsi_snapshot_server`接收并解析来自`pipe`的数据，根据其中的`commands`来执行对应的命令，如`init_snapshot`、`start_mirror`、`restore_lun`等。
对于通过`socket`和`pipe`进行数据的发送与接收，在`libsynoiscsiep.so.6`中存在着2个对应的结构体`socket_channel_transport`和`pipe_channel_transport`，其包含一系列相关的函数指针，如下。其中，部分函数最终是通过调用`PacketRead()`和`PacketWrite()`这2个函数来进行数据的读取和发送。
    LOAD:00007FFFF7DD9F40                 public pipe_channel_transport
    LOAD:00007FFFF7DD9F40 pipe_channel_transport dq 2             ; DATA XREF: LOAD:off_7FFFF7DD7F48↑o
    LOAD:00007FFFF7DD9F40                                         ; LOAD:transports↑o
    LOAD:00007FFFF7DD9F48                 dq offset synocomm_pipe_construct
    LOAD:00007FFFF7DD9F50                 dq offset synocomm_pipe_destruct
    LOAD:00007FFFF7DD9F58                 align 20h
    LOAD:00007FFFF7DD9F60                 dq offset synocomm_pipe_stop_service
    LOAD:00007FFFF7DD9F68                 dq offset synocomm_pipe_internal_request
    LOAD:00007FFFF7DD9F70                 dq offset synocomm_pipe_internal_response
    LOAD:00007FFFF7DD9F78                 dq offset synocomm_pipe_internal_request_media
    LOAD:00007FFFF7DD9F80                 dq offset synocomm_pipe_internal_response_media
    LOAD:00007FFFF7DD9F88                 dq offset synocomm_base_external_request
    LOAD:00007FFFF7DD9F90                 dq offset synocomm_base_external_response
    LOAD:00007FFFF7DD9F98                 dq offset synocomm_base_write_msg_pipe
    LOAD:00007FFFF7DD9FA0                 dq offset synocomm_base_read_msg_pipe
    LOAD:00007FFFF7DD9FA8                 dq offset synocomm_base_send_msg
    LOAD:00007FFFF7DD9FB0                 dq offset synocomm_base_recv_msg
    LOAD:00007FFFF7DD9FB8                 align 20h
    LOAD:00007FFFF7DD9FC0                 public socket_channel_transport
    LOAD:00007FFFF7DD9FC0 socket_channel_transport dq 1           ; DATA XREF: LOAD:off_7FFFF7DD7F68↑o
    LOAD:00007FFFF7DD9FC0                                         ; LOAD:00007FFFF7DD9F18↑o
    LOAD:00007FFFF7DD9FC8                 dq offset synocomm_socket_construct
    LOAD:00007FFFF7DD9FD0                 dq offset synocomm_socket_destruct
    LOAD:00007FFFF7DD9FD8                 dq offset synocomm_socket_start_service
    LOAD:00007FFFF7DD9FE0                 dq offset synocomm_socket_stop_service
    LOAD:00007FFFF7DD9FE8                 dq offset synocomm_socket_internal_request
    LOAD:00007FFFF7DD9FF0                 dq offset synocomm_socket_internal_response
    LOAD:00007FFFF7DD9FF8                 dq offset synocomm_socket_internal_request_media
    LOAD:00007FFFF7DDA000                 dq offset synocomm_socket_internal_response_media
    LOAD:00007FFFF7DDA008                 dq offset synocomm_base_external_request
    LOAD:00007FFFF7DDA010                 dq offset synocomm_base_external_response
    LOAD:00007FFFF7DDA018                 dq offset synocomm_base_write_msg_socket
    LOAD:00007FFFF7DDA020                 dq offset synocomm_base_read_msg_socket
    LOAD:00007FFFF7DDA028                 dq offset synocomm_base_send_msg
    LOAD:00007FFFF7DDA030                 dq offset synocomm_base_recv_msg
在了解了大概的通信流程后，接下来将仔细看一下其中的每一步。
## 安全问题
###  非法内存访问
在阶段`1`，`iscsi_snapshot_comm_core`进程接收来自外部`socket`的数据，其最终会调用`PacketRead()`函数来完成对应的功能，部分代码如下。可以看到，在`(4)`处存在一个有符号数比较：如果`v7`为负数的话，`(4)`处的条件将会为真，同时会将`v7`赋值给`v4`。之后`v4`会作为`size`参数传入`memcpy()`，
如果`v4`为负数，后续在`(5)`处调用`memcpy()`时将会造成溢出，同时由于`size`参数过大，也会出现非法内存访问。而`v7`的值来自于`(3)`处`a2()`函数的返回值，可以看到在`(6)`处如果函数`a2()`的第三个参数为0，则会返回-1。而函数`a2()`的第三个参数来自于`(2)`处的`v6[6]`，而`v6`指向的内容为`(4)`处接收的`socket`数据。也就是说，`v6[6]`是外部可控的。因此，通过构造并发送一个伪造的数据包，可造成在`(5)`处调用`memcpy()`时出现溢出(或非法内存访问)。
    __int64 PacketRead(__int64 a1, signed int (__fastcall *a2)(__int64, __int64, signed __int64), void *a3, unsigned int a4)
    {
      dest = a3;
      v4 = a4;      // max_length: 0x1000
      v5 = ___tzalloc(32LL, 1LL, "synocomm_packet_cmd.c", "ReadPacketHeader", 136LL);
      v6 = (_DWORD *)v5;
      if ( a2(a1, v5, 32LL)  *(_DWORD *)v7 )  // (4) signed comparison
        v4 = *(_DWORD *)v7;
      memcpy(dest, v7[1], (signed int)v4);   // (5) overflow
        // ...
    }
    ssize_t a2(__int64 a1, void *a2, int a3)
    {
      // ...
      if ( a3 == 0 || a2 == 0LL || !a1 )    // (6)
        result = 0xFFFFFFFFLL;
      else
        result = recv(*(_DWORD *)(a1 + 4), a2, a3, 0);
      return result;
    }
###  越界读
假设我们忽略了阶段`1`中的问题，在阶段`2`，`iscsi_snapshot_comm_core`接收来自`pipe`的数据并进行解析，然后调用对应的处理函数，对应的部分代码如下。其中，在`(1)`处会读取数据并将其保存在大小为`0x1000`的缓冲区中。之后会根据读取的数据，调用类似`Handlexxx`的函数，如`HandleSendMsg()`、`HandleRecvMsg()`。根据程序中存在的某个结构体，会发现这两个函数和其他函数不太一样，比较特别。
    signed __int64 StartEngCommPipeServer@(__int64 *a1@, __int64 a2@, __int64 a3@, __int64 a4@)
    {
      // ...
      v5 = (char *)___tzalloc(4096LL, 1LL, "synocomm.c", "PipeServerHandler", 458LL);
      while ( 1 )
      {
        v6 = (*(__int64 (__fastcall **)(__int64, char *, __int64))(*(_QWORD *)(v4 + 56) + 112LL))(v4, v5, 4096LL); // (1) recv msg
        // ...
        v7 = v5[1];
        if ( v5[1] == 1 || *v5 == 16 || *v5 == -1 )
        {
          switch ( *v5 + 1 )
          {
            case 0:
              HandleRejectMsg(v5);  continue;
            // ...
            case 33:
              HandleSendMsg(v5);  continue;        // (2)
            case 34:
              HandleRecvMsg(v5);  continue;        // (3)
            case 49:
              HandleBindMsg(v5);    continue;
            // ...
以`HandleRecvMsg()`函数为例，它会调用`AppSendControl()`。其中，函数`AppSendControl()`的第`3`个参数为`(unsigned
int)(*(_DWORD *)(a1 + 76) + 84)`，而`a1`指向前面接收的数据，因此其第`3`个参数是外部可控的。
    __int64 HandleRecvMsg(__int64 a1)
    {
      v1 = SearchAppInLocalHostSetByUUID(a1 + 36);
      v2 = (void *)v1;
      if ( v1 )
      {
        v3 = -((int)AppSendControl(v2, a1, (unsigned int)(*(_DWORD *)(a1 + 76) + 84))  0 && ptr )
        {
          v7 = a2(v4, ptr, v5);