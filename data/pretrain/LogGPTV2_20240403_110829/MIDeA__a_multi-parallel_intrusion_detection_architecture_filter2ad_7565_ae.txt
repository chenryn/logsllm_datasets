40
20
)
%
(
s
s
o
l
t
e
k
c
a
P
0
0
w/o GPU
w/ GPU
w/o GPU
(Ideal NIC)
w/ GPU
(Ideal NIC)
2000
4000
6000
8000
10000
Rate (Mbit/s)
(b) Real trafﬁc
Figure 12: Observed packet loss for (a) synthetic and (b) real
trafﬁc, as a function of the trafﬁc rate. MIDeA can handle real
trafﬁc speeds of up to 5.2 Gbit/s without dropping any packets.
Limitations and Future Work. In favor of programming sim-
plicity, we chose to use processes instead of threads for paralleliz-
ing the CPU part of MIDeA. We believe that a multi-threaded im-
plementation would further increase the complexity of the design
without a signiﬁcant increase in the overall throughput.
In our ﬂow-based partitioning scheme, we avoid any communi-
cation between the cores. Traditional Snort-style signature match-
ing does not require any communication for analysis outside the
scope of a single ﬂow. In case a network analysis system needs this
functionality, e.g., for detecting DDoS attacks or malware propaga-
tion, a lightweight communication scheme needs to be integrated
for coordinating the different cores [47].
The buffering of network packets, described in section 3.2.1, in-
troduces an extra copy operation. This is mandatory for our design,
considering that most packets have to be processed before match-
ing them against signatures, and that transferring a single packet
each time signiﬁcantly reduces the PCIe throughput.
Finally, each process allocates a different memory space on the
GPU, due to the restriction of the CUDA driver for preventing shar-
ing of GPU memory between different processes. Although the
same policy applies to threads, we believe that future releases of
the CUDA driver will support device memory sharing. In that case,
we could easily migrate to the faster AC-Full algorithm. We also
believe that a shared GPU memory space would exhibit higher lo-
cality and increase the computational throughput.
7. RELATED WORK
Prior work has focused extensively on the use of specialized
hardware to augment NIDSs capabilities. The majority of these ap-
proaches focus on improving deep packet inspection (DPI), which
is the most computationally-intensive NIDS operation, using spe-
cialized hardware, such as FPGAs, ASICs, and TCAMs [9, 12, 27,
30, 45, 52]. Recently, Meiners et al. [27] proposed a custom regular
expression matching approach based on TCAMs, which achieves a
throughput of up to 18.6 Gbit/s; our corresponding pattern match-
ing implementation alone reaches a 70 Gbit/s throughput, which is
almost a four-times improvement, using commodity off-the-shelf
equipment. Other approaches employ a pre-ﬁltering mechanism
based on FPGAs to reduce the amount of trafﬁc sent to a software
NIDS/NIPS for inspection [16,43]. Unfortunately, most implemen-
tations are tied to a speciﬁc architecture, and thus, are particularly
difﬁcult to extend and program. Any changes in the rule set require
recompilation, regeneration of the automaton, resynthesis, replace-
ment, and routing of the circuits, which is a time-consuming and
difﬁcult procedure.
Much work has also focused on improving the performance of
detection mechanisms, such as string matching and regular expres-
sion matching [7, 22, 23, 40, 46, 51]. These works are orthogonal
to ours, and can be integrated to our system to improve memory
utilization and performance.
In another line of work, cluster-based approaches have been pro-
posed for keeping-up with the increasing link speeds. Instead of
having a single server to process all incoming trafﬁc, a cluster of
servers is used instead. The major issue then is how to partition the
incoming trafﬁc to the back-end servers, while supporting stateful
processing. Kruegel et al. [21] propose a stateful slicing mecha-
nism that divides the overall network trafﬁc into subsets of manage-
able size, which are then processed by different sensors. Foschini et
al. [14] extend that work with a parallel matching algorithm that al-
lows communication between the sensors through a dedicated con-
trol plane. SPANIDS [38] uses a specialized FPGA-based switch,
that takes into account ﬂow information and the load of each server
when redirecting network packets. Xinidis et al. [50] present an
active splitter architecture that provides early ﬁltering to reduce the
load of the back-end sensors.
Other approaches attempt to improve the performance of NIDS
using commodity hardware. Paxson et al. [35] and Valentin et
al. [47] implemented a NIDS cluster that scales through the use
of parallel nodes. Their system, based on Bro [33], demonstrates
the ability to scale beyond the capacity of a single NIDS instance
using commodity hardware, with the exception of the special pur-
pose front-end hardware that was used to distribute trafﬁc evenly
across the back-end nodes. In Supra-linear Packet Processing [19],
a single thread is responsible for packet gathering and dispatching,
while many other threads are processing incoming ﬂows in parallel.
Thus, each processing thread handles a speciﬁc ﬂow in isolation.
Unfortunately, a lot of time is spent on context switches between
threads, most likely due to high levels of locking contention to the
shared packet queue.
To eliminate the excessive contention rates due to packet queue
access in the packet processing architectures, ﬂow-pinning is com-
monly used (i.e., all packets of a ﬂow are “pinned” to be processed
by a speciﬁc thread) [20]. This approach requires slightly more data
storage to keep the incoming packets to separate queues. How-
ever, it allows most of the threads to work independently, which
is a key characteristic of a good multi-threaded algorithm. Schuff
306et al. [39] evaluate different per-ﬂow and intra-ﬂow parallelization
approaches. Although their results do not propose a clear winner,
it seems that pure ﬂow-concurrent parallelism performs better in
almost all cases.
Recently, graphics processors have been used to boost computa-
tionally intensive tasks in intrusion detection systems. Gnort [48,
49] was the ﬁrst attempt that sufﬁciently utilized the graphics pro-
cessor for string searching and regular expression matching. Un-
fortunately, its single-threaded architecture restricts its scalability
in the advent of multi-core CPUs. Many other approaches followed
the above scheme [18, 41], without signiﬁcant differences in the ar-
chitecture and the performance beneﬁts.
8. CONCLUSION
In this work, we designed and built a multi-parallel intrusion de-
tection architecture, as a scalable solution for the processing and
stateful analysis of network trafﬁc. Our system achieves high per-
formance, with a processing throughput that exceeds 5 Gbit/s for
real trafﬁc, and raw pattern matching speeds of 70 Gbit/s, using
commodity off-the-shelf hardware, in a single box.
MIDeA has three levels of parallelization, at the NIC, the CPU,
and the GPU levels. It consists of a multi-queue NIC, which dis-
tributes the incoming trafﬁc across a set of multi-core CPUs for
packet processing and analysis. Each CPU core is processing the
trafﬁc of only a subset of network ﬂows. Having split the trafﬁc
to different cores, MIDeA further ofﬂoads the costly content in-
spection operations to a set of GPUs. By parallelizing both packet
processing and content inspection across multiple CPU cores and
graphics processors, MIDeA offers a scalable approach for build-
ing a multi-parallel NIDS, which can operate at speeds of several
Gbit/s, while at the same time it has en extremely low price point.
9. ACKNOWLEDGMENTS
The authors would like to thank Evangelos Markatos for his in-
valuable comments and suggestions during the preparation of this
paper. This work was supported in part by the Marie Curie Ac-
tions – Reintegration Grants project PASS, by the FP7-PEOPLE-
2009-IOF project MALCODE and the FP7 project SysSec, funded
by the European Commission under Grant Agreements No. 254116
and No. 257007, and by the project i-Code, funded by the Preven-
tion, Preparedness and Consequence Management of Terrorism and
other Security-related Risks Programme of the European Commis-
sion – Directorate-General for Home Affairs under Grant Agree-
ment No. JLS/2009/CIPS/AG/C2-050. This publication reﬂects
the views only of the authors, and the Commission cannot be held
responsible for any use which may be made of the information con-
tained herein.
10. REFERENCES
[1] Endace Security Manager. http://www.endace.com/
endace-security-manager2.html.
[2] Intel 82599EB 10 Gigabit Ethernet Controller. http://
ark.intel.com/Product.aspx?id=32207.
[3] Receive side scaling on Intel Network Adapters. http://
www.intel.com/support/network/adapter/
pro100/sb/cs-027574.htm.
[4] Tcpreplay. http://tcpreplay.synfin.net/.
[5] A. V. Aho and M. J. Corasick. Efﬁcient String Matching: an
Aid to Bibliographic Search. Communications of the ACM,
18(6):333–340, June 1975.
[6] Z. K. Baker and V. K. Prasanna. Time and Area Efﬁcient
Pattern Matching on FPGAs. In Proceedings of the 12th
ACM/SIGDA International Symposium on Field
Programmable Gate Arrays (FPGA), 2004.
[7] M. Becchi and P. Crowley. A Hybrid Finite Automaton for
Practical Deep Packet Inspection. In Proceedings of the ACM
International Conference on emerging Networking
Experiments and Technologies Conference (CoNEXT), 2007.
[8] V. Chandola, A. Banerjee, and V. Kumar. Anomaly
Detection: A Survey. ACM Computing Surveys,
41:15:1–15:58, July 2009.
[9] C. R. Clark, W. Lee, D. E. Schimmel, D. Contis, M. Koné,
and A. Thomas. A Hardware Platform for Network Intrusion
Detection and Prevention. In P. Crowley, M. A. Franklin,
H. Hadimioglu, and P. Z. Onufryk, editors, Proceedings of
the 3rd Workshop on Network Processors and Applications
(NP3), 2005.
[10] C. R. Clark and D. E. Schimmel. Efﬁcient Reconﬁgurable
Logic Circuits for Matching Complex Network Intrusion
Detection Patterns. In Proceedings of the International
Conference on Field Programmable Logic and Applications
(FPL), 2003.
[11] L. Deri. Improving Passive Packet Capture: Beyond Device
Polling. In Proceedings of 4th International System
Administration and Network Engineering Conference
(SANE), 2004.
[12] S. Dharmapurikar, P. Krishnamurthy, T. S. Sproull, and J. W.
Lockwood. Deep Packet Inspection Using Parallel Bloom
Filters. IEEE Micro, 24(1), 2004.
[13] M. Dobrescu, N. Egi, K. Argyraki, B.-G. Chun, K. Fall,
G. Iannaccone, A. Knies, M. Manesh, and S. Ratnasamy.
RouteBricks: Exploiting Parallelism to Scale Software
Routers. In Proceedings of the 22nd ACM SIGOPS
Symposium on Operating Systems Principles (SOSP), 2009.
[14] L. Foschini, A. V. Thapliyal, L. Cavallaro, C. Kruegel, and
G. Vigna. A Parallel Architecture for Stateful, High-Speed
Intrusion Detection. In Proceedings of the 4th International
Conference on Information Systems Security (ICISS), 2008.
[15] F. Fusco and L. Deri. High Speed Network Trafﬁc Analysis
with Commodity Multi-core Systems. In Proceedings of the
10th Internet Measurement Conference (IMC), 2010.
[16] J. M. Gonzalez, V. Paxson, and N. Weaver. Shunting: A
Hardware/Software Architecture for Flexible,
High-Performance Network Intrusion Prevention. In
Proceedings of the 14th ACM Conference on Computer and
Communications Security (CCS), 2007.
[17] S. Han, K. Jang, K. Park, and S. Moon. PacketShader: A
GPU-accelerated Software Router. In Proceedings of the
ACM SIGCOMM 2010 Conference on Applications,
Technologies, Architectures, and Protocols for Computer
Communications (SIGCOMM), August 2010.
[18] N.-F. Huang, H.-W. Hung, S.-H. Lai, Y.-M. Chu, and W.-Y.
Tsai. A GPU-Based Multiple-Pattern Matching Algorithm
for Network Intrusion Detection Systems. In Proceedings of
the 22nd International Conference on Advanced Information
Networking and Applications - Workshops (AINAW), 2008.
[19] Intel Corporation. Supra-linear Packet Processing
Performance with Intel Multi-core Processors, 2006.
[20] Intel Corporation. Removing System Bottlenecks in
Multi-threaded Applications, 2008.
[21] C. Kruegel, F. Valeur, G. Vigna, and R. Kemmerer. Stateful
Intrusion Detection for High-Speed Networks. In
Proceedings of the 23rd IEEE Symposium on Security and
Privacy (S&P), May 2002.
307[22] S. Kumar, B. Chandrasekaran, J. Turner, and G. Varghese.
Curing Regular Expressions Matching Algorithms from
Insomnia, Amnesia, and Acalculia. In Proceedings of the 3rd
ACM/IEEE Symposium on Architecture for Networking and
Communications Systems (ANCS), 2007.
[39] D. L. Schuff, Y. R. Choe, and V. S. Pai. Conservative vs.
Optimistic Parallelization of Stateful Network Intrusion
Detection. In Proceedings of the 12th ACM SIGPLAN
Symposium on Principles and Practice of Parallel
Programming (PPoPP), 2007.
[23] S. Kumar, S. Dharmapurikar, F. Yu, P. Crowley, and
[40] R. Smith, C. Estan, and S. Jha. XFA: Faster Signature
J. Turner. Algorithms to Accelerate Multiple Regular
Expressions Matching for Deep Packet Inspection. In
Proceedings of the ACM SIGCOMM 2006 Conference on
Applications, Technologies, Architectures, and Protocols for
Computer Communications (SIGCOMM), 2006.
[24] J. Lee, S. H. Hwang, N. Park, S.-W. Lee, S. Jun, and Y. S.
Kim. A High Performance NIDS Using FPGA-based
Regular Expression Matching. In Proceedings of the 22nd
ACM Symposium on Applied computing (SAC), 2007.
[25] B. H. Leitao. Tuning 10Gb Network Cards on Linux. In
Proceedings of the 2009 Linux Symposium, July 2009.
[26] R.-T. Liu, N.-F. Huang, C.-H. Chen, and C.-N. Kao. A Fast
String-matching Algorithm for Network Processor-based
Intrusion Detection System. ACM Transactions on
Embedded Computing Systems, 3(3):614–633, 2004.
[27] C. R. Meiners, J. Patel, E. Norige, E. Torng, and A. X. Liu.
Fast Regular Expression Matching Using Small TCAMs for
Network Intrusion Detection and Prevention Systems. In
Proceedings of the 19th USENIX Security Symposium, 2010.
[28] Microsoft Corporation. Scalable Networking: Eliminating
the Receive Processing Bottleneck - Introducing RSS, 2005.
[29] A. Mitra, W. Najjar, and L. Bhuyan. Compiling PCRE to
FPGA for accelerating SNORT IDS. In Proceedings of the
3rd ACM/IEEE Symposium on Architecture for Networking
and Communications Systems (ANCS), 2007.
[30] J. Moscola, J. Lockwood, R. Loui, and M. Pachos.
Implementation of a Content-Scanning Module for an
Internet Firewall. In Proceedings of 11th IEEE Symposium
on Field-Programmable Custom Computing Machines
(FCCM), 2003.
[31] M. Norton. Optimizing Pattern Matching for Intrusion
Detection, July 2004.
[32] NVIDIA. NVIDIA CUDA Programming Guide.
[33] V. Paxson. Bro: A System for Detecting Network Intruders
in Real-time. In Proceedings of the 7th Conference on
USENIX Security Symposium, 1998.
[34] V. Paxson, K. Asanovi´c, S. Dharmapurikar, J. Lockwood,
R. Pang, R. Sommer, and N. Weaver. Rethinking Hardware
Support for Network Analysis and Intrusion Prevention. In
Proceedings of the 1st USENIX Workshop on Hot Topics in
Security (HotSec), 2006.
[35] V. Paxson, R. Sommer, and N. Weaver. An Architecture for
Exploiting Multi-core Processors to Parallelize Network
Intrusion Prevention. In Proceedings of the 30th IEEE
Sarnoff Symposium, May 2007.
[36] M. Roesch. Snort: Lightweight Intrusion Detection for
Networks. In Proceedings of the 1999 USENIX Large
Installation System Administration Conference (LISA), 1999.
[37] D. P. Scarpazza, O. Villa, and F. Petrini. Exact Multi-pattern
String Matching on the Cell/B.E. Processor. In Proceedings
of the 5th Conference on Computing Frontiers (CF), 2008.
[38] L. Schaelicke, K. Wheeler, and C. Freeland. SPANIDS: A
Scalable Network Intrusion Detection Loadbalancer. In
Proceedings of the 2nd Conference on Computing Frontiers
(CF), 2005.
Matching with Extended Automata. In Proceedings of the
29th IEEE Symposium on Security and Privacy (S&P), 2008.
[41] R. Smith, N. Goyal, J. Ormont, K. Sankaralingam, and
C. Estan. Evaluating GPUs for Network Packet Signature
Matching. In Proceedings of the International Symposium on
Performance Analysis of Systems and Software (ISPASS),
2009.
[42] R. Sommer and V. Paxson. Outside the Closed World: On
Using Machine Learning for Network Intrusion Detection. In
Proceeding of the 31st IEEE Symposium on Security and
Privacy (S&P), 2010.
[43] H. Song, T. Sproull, M. Attig, and J. Lockwood. Snort
Ofﬂoader: A Reconﬁgurable Hardware NIDS Filter. In
Proceedings of the 15th International Conference on Field
Programmable Logic and Applications (FPL), 2005.
[44] Sourceﬁre. Sourceﬁre 3D System. http://www.
sourcefire.com/security-technologies/
cyber-security-products/3d-system.
[45] I. Sourdis and D. Pnevmatikatos. Pre-Decoded CAMs for
Efﬁcient and High-Speed NIDS Pattern Matching. In
Proceedings of the 12th Annual IEEE Symposium on Field
Programmable Custom Computing Machines (FCCM), 2004.
[46] N. Tuck, T. Sherwood, B. Calder, and G. Varghese.
Deterministic Memory-efﬁcient String Matching Algorithms
for Intrusion Detection. In Proceedings of the 23rd IEEE
International Conference on Computer Communications
Conference (INFOCOM), 2004.
[47] M. Vallentin, R. Sommer, J. Lee, C. Leres, V. Paxson, and
B. Tierney. The NIDS Cluster: Scalable, Stateful Network
Intrusion Detection on Commodity Hardware. In
Proceedings of the 10th International Symposium on Recent
Advances in Intrusion Detection (RAID), 2007.
[48] G. Vasiliadis, S. Antonatos, M. Polychronakis, E. P.
Markatos, and S. Ioannidis. Gnort: High Performance
Network Intrusion Detection Using Graphics Processors. In
Proceedings of the 11th International Symposium on Recent
Advances in Intrusion Detection (RAID), 2008.
[49] G. Vasiliadis, M. Polychronakis, S. Antonatos, E. P.
Markatos, and S. Ioannidis. Regular Expression Matching on
Graphics Hardware for Intrusion Detection. In Proceedings
of the 12th International Symposium on Recent Advances in
Intrusion Detection (RAID), 2009.
[50] K. Xinidis, I. Charitakis, S. Antonatos, K. G. Anagnostakis,
and E. P. Markatos. An Active Splitter Architecture for
Intrusion Detection and Prevention. IEEE Transactions on
Dependable and Secure Computing, 3:31–44, January 2006.
[51] F. Yu, Z. Chen, Y. Diao, T. V. Lakshman, and R. H. Katz.
Fast and Memory-efﬁcient Regular Expression Matching for
Deep Packet Inspection. In Proceedings of the 2nd
ACM/IEEE symposium on Architecture for Networking and
Communications Systems (ANCS), 2006.
[52] F. Yu, R. H. Katz, and T. V. Lakshman. Gigabit Rate Packet
Pattern-Matching Using TCAM. In Proceedings of the 12th
IEEE International Conference on Network Protocols
(ICNP), October 2004.
308