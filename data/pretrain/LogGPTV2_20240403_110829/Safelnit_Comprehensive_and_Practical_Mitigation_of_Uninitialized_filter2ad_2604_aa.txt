title:Safelnit: Comprehensive and Practical Mitigation of Uninitialized
Read Vulnerabilities
author:Alyssa Milburn and
Herbert Bos and
Cristiano Giuffrida
SafeInit: Comprehensive and Practical Mitigation of
Uninitialized Read Vulnerabilities
Alyssa Milburn
Herbert Bos
Cristiano Giuffrida
Vrije Universiteit Amsterdam
Vrije Universiteit Amsterdam
Vrije Universiteit Amsterdam
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Usage of uninitialized values remains a common
error in C/C++ code. This results not only in undeﬁned and
generally undesired behavior, but is also a cause of information
disclosure and other security vulnerabilities. Existing solutions
for mitigating such errors are not used in practice as they are
either limited in scope (for example, only protecting the heap),
or incur high runtime overhead.
In this paper, we propose SafeInit, a practical protection
system which hardens applications against such undeﬁned be-
havior by guaranteeing initialization of all values on the heap
and stack, every time they are allocated or come into scope.
Doing so provides comprehensive protection against this class of
vulnerabilities in generic programs, including both information
disclosure and re-use/logic vulnerabilities.
We show that, with carefully designed compiler optimizations,
our implementation achieves sufﬁciently low overhead (<5% for
typical server applications and SPEC CPU2006) to serve as a
standard hardening protection in practical settings. Moreover,
we show that we can effortlessly apply it to harden non-standard
code, such as the Linux kernel, with low runtime overhead.
I.
INTRODUCTION
The use of uninitialized memory in C/C++ programs
introduce vulnerabilities that are popular among attackers to
manipulate a program’s control ﬂow or to disclose information.
In addition to the obvious issue of revealing sensitive data,
the exposure of metadata has become a more prominent prob-
lem in recent years, since information disclosure increasingly
becomes an essential prelude to successful exploits (e.g., to
circumvent ASLR or other hardening methods) [56]. Unfortu-
nately, concerns about the performance overhead have made
compiler writers reluctant to adopt strong mitigations against
this attack vector.
Languages such as Java and C# ensure the deﬁnite as-
signment of variables, requiring them to be initialized on all
possible paths of execution. Unfortunately, C and C++ do not
enforce this property. As a result, the vast body of existing
C/C++ code, which includes many runtimes and libraries for
safer languages, is potentially vulnerable to uninitialized read
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23183
attacks. Today’s compiler warnings and static analysis tools
ﬂag only a small subset of these uninitialized reads, and worse,
the common occurrence of false positives in the warnings
means that programmers often ignore them altogether. Given
the growing popularity of uninitialized reads in real-world
exploits [21], [53], [8], [50], the current lack of comprehensive
protection is concerning. In this paper, we show that automatic
initialization of all values on the heap and stack at allocation
time is possible with minimal performance penalties.
Worryingly, C/C++ compilers can even introduce new
vulnerabilities when taking advantage of the fact that reading
uninitialized memory is ‘undeﬁned behavior’; the optimiza-
tions applied by modern compilers can remove sanity checks or
other code in such circumstances [63]. Worse, recent research
[44] has also shown that many programmers are unaware of
these dangerous consequences. For C/C++ programs running
in production systems, there are few options for preventing
attacks that exploit uninitialized read errors. Solutions such as
valgrind [54] and MemorySanitizer [58], in widespread use
during the development process, are much too expensive for
use in production systems, even when using complex data-ﬂow
analysis to reduce this overhead [65].
Clearing memory: The obvious mitigation for this problem
is to always clear memory. For instance, Chow et al. [11]
proposed to clear all memory at deallocation time. However,
they only obtained acceptable overhead for heap allocations
– not for the high frequency allocations and deallocations on
the stack. Moreover, the solution fails to address the problem
of undeﬁned behavior. The PaX project [49] offers a limited
but very practical solution in the form of Linux kernel patches
which protect against common uninitialized value errors, in-
cluding gcc plugins. Recently, and concurrent to our work,
UniSan [38] proposed more comprehensive protection than
this against a narrower threat—information disclosure from the
Linux kernel—using data-ﬂow analysis to initialize memory
and variables which might be disclosed to an attacker. While
both of these solutions provide acceptable overhead, neither
provide a complete solution for uninitialized values, and are
currently applicable to only the Linux kernel.
In this paper, we describe a comprehensive and practical
solution for mitigating these errors in generic programs, by
adapting the toolchain to ensure that all stack and heap
allocations are always initialized. SafeInit
is implemented
at a compiler level, where low-overhead static analysis and
optimizations are available, and can be enabled using a single
compiler ﬂag. We show that the overhead can be reduced
to acceptable levels, by applying a set of carefully designed
optimizations; for example, these more than halve the overhead
of SafeInit on SPEC CINT2006 from 8% down to <4% (with
the remaining overhead largely due to excessively complex
code, which can be resolved using minimal-effort annotations).
Summarizing, our contributions are:
• We propose SafeInit, a compiler-based solution which
– together with a hardened allocator – automatically
mitigates uninitialized value reads by ensuring initial-
ization, both on the stack and on the heap.
• We present optimizations which reduce the typical
overhead of our solution to minimal levels (<5%), and
are straightforward to implement in modern compilers.
• We discuss our prototype implementation of SafeInit,
based on clang and LLVM, and show that it can be ap-
plied to the majority of real-world C/C++ applications
without any additional manual effort.
• We evaluate our work on CPU-intensive (including
SPEC CPU2006) and I/O intensive (server) applica-
tions, as well as the Linux kernel, and verify that real-
world vulnerabilities are successfully mitigated.
In summary, we argue that SafeInit provides a comprehen-
sive and practical solution to a serious real-world problem,
show that
it provides signiﬁcant advantages compared to
existing techniques and tools, and demonstrate that it offers
acceptable levels of overhead. We believe this system is
sufﬁciently practical to make it useful in production systems,
with overhead below the levels typically demanded for industry
adoption [60], and hope to see it become a standard ingredient
of the hardening transformations offered by modern compilers.
II. THREAT MODEL
Uninitialized read errors occur when a variable, or memory,
is used without having ﬁrst been initialized. This can occur
after a stack variable comes into scope, or after heap memory
has been allocated. We consider an attacker seeking to exploit
any of the vulnerabilities caused by such reads of uninitialized
values, including information disclosure and use of unintended
values (such as function pointers). We assume that such
potential attackers have a copy of all binaries in use, and are
thus aware of details such as the exact stack layout chosen by
the compiler.
We assume the program has been already hardened against
other classes of vulnerabilities using existing (e.g., memory
safety) defenses. Although mitigating uninitialized value vul-
nerabilities can probabilistically mitigate some vulnerabilities
caused by other temporal (such as pointer use-after-free) and
spatial errors (such as out-of-bounds reads), there are existing
low-impact solutions – such as baggy bounds checking [2] –
which provide superior defenses against such attacks, and we
do not consider them in our threat model.
We also only consider C/C++ code. Extending this work
to similar languages should be possible (as shown, for exam-
ple, by existing compiler functionality for local variables in
Fortran), but in particular, custom assembly-language routines
fall outside the scope of our work.
III. BACKGROUND
Memory is constantly reallocated, and thus reused,
in
almost all applications. On the stack, function activation frames
contain data from previous function calls; on the heap, allo-
cations contain data from previously-freed allocations. Issues
with uninitialized data arise when such data is not overwritten
before being used, extending the lifetime of the old data
beyond the point of the new allocation.
Many variables are clearly initialized before they are used;
as an example, consider an integer counter used only in a
for loop, which is explicitly assigned a new value for every
iteration of the loop. We can trivially see that such a variable
is always initialized before it is used.
On the other hand, the initialization state of a variable
which is only used if a complicated conditional is true may
depend itself on other conditionals, resolving of which would
require executing large portions of the program – or at least
extensive optimization and analysis.
Memory may also only be partially initialized; structures
and union types in C are often deliberately incompletely
initialized, and for simplicity or performance reasons, arrays
are often allocated with larger sizes than (initially) necessary
to store their contents.
In practice, reuse of memory is not only common, but also
desirable for performance reasons [17]. When it is unclear
whether a variable will be initialized before it is used, the
only practical and safe approach is to initialize it in all cases.
A. Sensitive data disclosure
The most obvious danger of information disclosure due to
uninitialized data is the disclosure of directly sensitive data,
such as encryption keys, passwords, conﬁguration information
and the contents of conﬁdential ﬁles. Chow et al. have dis-
cussed [10] that data lifetimes can last far longer than we
would expect, and that many unintentional copies of data may
be made.
In fact, even when all copies of such data are appar-
ently explicitly cleared, problems persist. Many programs call
memset to clear sensitive data; unfortunately, if the data is
no longer valid and thus no longer used after that point, such
calls can be (and are) optimized away by compilers. Common
‘workarounds’ which attempt to hide these calls from com-
piler analysis are often optimized by ever-improving compiler
analysis passes, and alternative functions (such as memset_s
and explicit_bzero) which compilers are prohibited from
optimizing away are not yet commonly available.
If the use of uninitialized data in a program is not directly
is tempting to conclude
inﬂuenced by untrusted input,
that the security consequences of these classes of issues is
otherwise minimal. However, experience has shown that a
wide range of potential attack vectors must be considered,
and this varied attack surface means that all uninitialized data
vulnerabilities should be taken seriously.
it
One illustrative example was a vulnerability [29] in the
PostScript font rendering on Windows, caused by failure to
initialize a temporary buffer which could be read by font
bytecode. By providing a font which rendered glyphs based
2
on the contents of this buffer, JavaScript in a web browser
could disclose memory by reading back rendered pixels.
Similarly, information disclosure from kernels to userspace
programs, or from hypervisors to guest virtual machines, is a
common and serious issue [8]. Containers and virtual machines
running code from untrusted parties, or as a vital layer of
sandboxing from untrusted software such as JavaScript in web
browsers, are now a standard component of many systems. As
such, even code such as device driver interfaces and emulated
devices must be free of security issues.
B. Bypassing security defenses
Even where software does not make use of any seemingly
‘sensitive’ data, or such data is sufﬁciently isolated to avoid
the possibility of it being disclosed due to uninitialized data
issues, many modern software defenses depend on the secrecy
of sensitive metadata, and so information disclosure is still
a critical ﬂaw. Stack ‘canaries’ provide an obvious example;
their protection relies on the canary value remaining secret.
Defenses such as address space layout
randomization
(ASLR) [57] depend on the secrecy of pointers in general,
and since this is typically done by randomizing only one base
address, an attacker only needs to disclose a single pointer
to defeat the protection entirely. Such pointers may be code,
stack or heap pointers, and these are typically stored on both
the stack and the heap, so uninitialized value errors provide a
rich source of the pointer disclosures required to thwart such
information hiding.
Heap allocators may disclose heap metadata if they store it
inline, while other allocators are careful to maintain this sep-
arately. Some allocators re-use memory almost immediately,
which is important
in modern high-performance allocators
which maintain per-thread pools. Notably, often disclosing
just a single byte of such metadata is enough to signiﬁcantly
reduce security guarantees; disclosing 8 bits of a pointer can
signiﬁcantly reduce ASLR entropy [55].
Another example is LLVM’s SafeStack defense, based on
work by Kuznetsov et al. [32], which attempts to provide
protection against arbitrary memory write vulnerabilities to the
stack, by hiding the pointer to the ‘safe’ (machine) stack, and
moving unsafe variables to a separate stack. However, at the
time of writing, it can be trivially defeated by disclosing the
contents of an uninitialized stack buffer; these contents are
within the bounds of a stack variable, and so remain on the
‘safe’ stack, but almost always contain safe stack pointers.
C. Software exploitation
Other vulnerabilities caused by uninitialized data allow
attackers to directly hijack control ﬂow. For example, virtual
function calls may be made using uninitialized local variables
which are meant to contain (pointers to) C++ objects. Potential
attackers can often inﬂuence the contents of the stack or heap
by causing speciﬁc computation or a speciﬁc set of calls to be
made [40]; their ability to control the contents of a speciﬁc part
of memory depends on factors which seem difﬁcult to predict,
such as the results of the compiler’s stack slot allocation
algorithm, but which can often easily be determined by an
attacker with access to the compiled binary.
A common mistake is to fail
This is far from a new problem; Microsoft described
an arbitrary write vulnerability due to an uninitialized stack
variable in Microsoft Excel in 2008 [45], and in 2010, Kees
Cook disclosed [12] an arbitrary Linux kernel memory write
vulnerability caused by an uninitialized structure on the stack.
to initialize variables or
buffers on the execution path taken when an error is encoun-
tered. For example, Samba had a vulnerability[61] caused by
failure to check the error value returned by a function before
using a pointer value which was only initialized in the error-
free path. Similarly, a bug in Microsoft’s XML parser[1] made
a virtual function call using a pointer stored in a local variable
which was not initialized on all execution paths. By ‘spraying’
the stack with pointers using JavaScript, attackers could control
the contents of the memory where the variable was stored, and
exploit this vulnerability from within a web browser.
It is clear that all of these vulnerabilities must be taken
seriously, and that preventing information disclosure addresses
only a subset of uninitialized value vulnerabilities.
D. Detection tools
there are a variety of tools which attempt
Rather than attempting to mitigate uninitialized value er-
to detect
rors,
them during the development process, allowing them to be
manually corrected by the programmer. Compiler warnings and
static analysis tools are limited by their nature [33], and often
themselves contain bugs [59]. Reporting all values which may
be uninitialized is counter-productive, since when presented
with more than a handful of false positives, programmers will
start to simply ignore the warnings. This means that any useful
tool is forced to err on the side of caution in reporting; the
authors of one commercial static analysis tool, Coverity, state
that [6] “when forced to choose between more bugs or fewer
false positives we typically choose the latter”.
More fundamentally, compiler warnings and detection tools
only report problems, rather than ﬁxing them. This can lead to
incorrect and dangerous ﬁxes, as illustrated by the 2008 Debian