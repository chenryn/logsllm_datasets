这个目标有关的不断变化的技术组合让人们很迷惑，而且也没有解
决在真实组织机构的实际架构中所面临的问题。我们在这个新愿景
下的目标不是与以往不同，而是要增加价值，改变我们所看到的
“面向服务恶化（Service-OrientedAggravation）"的状况。
有一组技术构成了我们对Web服务的基本理解：SOAP用于服务调
用，WSDL用于协议描述，UDDI用于服务元数据发布和发现。
SOAP来自于一些不同的技术，包括远程过程调用（RPC）模型和异
步XML消息模式（doc/lit）。第一种技术是容易失效的，伸缩性不
佳，在以前的DCOM、RMI和CORBA等名称下，它的实际效果并不
太好。尖括号既没有带来新问题，也没有解决老问题，我们只不过
试图以这种方式构建一些粒度上错误的系统，并过早地将自己与一
964
---
## Page 966
个明显不稳定的协议绑定在一起。第二种技术提高了艺术水平，是
一种不错的实现策略，但是不太能配得上它从一并始就一直进行的
交互性宣传。它甚至把简单的交互弄得更复杂了，因为它的处理过
程受到解决大型交互问题的目标的影响。
doc/lit风格让我们用结构化的包来定义请求，这些请求可以在一个
工作流中由一些松耦合的参与者进行转手、修正、处理和再处理。
就像一颗流动的珍珠，这种信息在由中间节点和最终节点异步处理
的过程中，会增加元素和属性。我们通过在一层中添加更多消息处
理器来实现水平伸缩性。我们可以在合作伙伴之间和行业边界之间
标准化交互方式和业务流程，这些业务流程不能包含在一个单独的
环境中。它代表了一种上下文无关的请求，能够处理非常困难的交
互模式。
当只靠严格的服务分解和描述（如SOAP和WSDL）被证实不足以解
决我们的交互需求时，我们沿着处理栈向上，引入新的业务处理和
混合层。于是标准和工具的组合使得已经过于复杂的情况变得更为
复杂。当我们跨越领域和组织机构边界时，我们遇到了冲突的术
语、业务规则、访问策略和非常真实的WS巴别塔。即使我们信奉
这种愿景，我们也没有切实可行的迁移策略，实际上我们对可能实
现的交互性撒了谎。ClayShirky曾把Web服务的交互性总结为"乌龟
叠罗汉”!1
问题在于，当大多数人希望以语言无关和平台无关的方式来调用可
复用的功能时，这些技术却成了牛刀条鸡，它们太复杂了，也泄露
了实现的细节。为了调用这些功能，你必须会使用SOAP语言。这
是一个不错的实现选择，但在这个松耦合系统的世界中，我们并不
总是希望仅仅为了简单的交互方式，就向客户宣传或要求客户知道
这些细节。SOAP的大思路是让请求与上下文无关，并在异步的环
境中维持事务完整性。但在真实系统的业务现实中，上下文被加入
到请求中。首先，我们必须为请求加上唯一标识，然后是证书，然
后对消息签名并为敏感的信息加密，等等。发出SOAP请求的“简
单"开销受到了交互方式和业务需求的影响。如果组织机构中的某
人希望取得某些信息，为什么不能直接索取？而且，当这些问题被
回答过一次之后，为什么问同样问题的10个人（或100个人、1000
个人）还要将同样的并销通过相同的查询加到后台系统上去呢？
这些问题凸显了传统Web服务技术栈中存在的一些抽象问题，在一
定程度上解释了世界各地IT部门对Web服务技术的普遍不满。这些
965
---
## Page 967
技术是一些实现技术，将我们的调用行为分解成由服务组成的工作
流，但我们不能够仅通过服务的概念来表达组织机构的全部需求。
我们不能够脱离上下文来识别和确定信息结构，这种上下文是特定
调用中所用到的。当我们将自己与特定协议的请求、特定的端口和
特定的机器绑在一起时，我们就丧失了松耦合和异步交互的模式，
也不能够跟上数据视图的变化。如果不能够唯一地识别通过服务的
数据，那么我们就不能够在某个信息层面上应用访问控制。这使得
在不断网络化的世界上保护敏感的、有价值的、私密的信息这一问
题变得更为复杂，更加难以应付。这里的问题并不在于SOAP和
WSDL，但它们也不是完整的解决方案。在我接下来要描述的面向
资源的架构中，很可能以doc/lit的方式来使用sOAP，但我们不会把
它作为唯一的解决方案。如果没有必要，我们也不需要总是宣称背
后使用的是这些技术。为了迈出这一步，我们需要看看Web，弄明
白为什么它作为一个可伸缩、灵活、可演变的信息共享平台取得了
如此的成功。实现细节对于信息消费者来说通常并不重要。
[1]_http://en.wikipedia.org/wiki/Turtles_all_the_way_down
5.3Web
在大家的概念中，Web是以文档为中心的。具体来说，当我们想到
Web时，就会想到在Web浏览器中看一些文档。但真正的神奇之处
却在于公并可获得的信息之间的链接、这些链接所代表的意义，以
及我们能够方便地通过创建新窗口来访问链接的内容。没有起点，
也看不到终点。只要我们知道要找的是什么，我们通常就能找到
它。现在已经出现了一些技术，帮助我们知道要找的是什么，即通
过一些搜索引擎或某种形式的推荐系统。我们喜欢为事物命名，因
为我们从本质上是面向名称的生物，我们使用名称来区别“这个东
西"和“那个东西”。作为儿童，他们的早期沟通行为之一就是为感兴
趣的东西命名，指向它们，索取它们。在很大程度上，Web就是这
种儿童般的好奇心应用于群体智慧和愚蠢的结果。作为一种对知识
永不知足的生物，我们会决定对什么感兴趣，然后就并始索要它。
没有集中式的协调，我们自由地记录下我们的探索，出版我们的故
事、思想和旅程。我们把Web看成是文档之间的一系列单向链接
（参见图5-1）。
966
---
## Page 968
链接
链接
链接
链接
链接
链接
图5-1：Web的传统概念
但是，链接起来的文档只是一部分。Web的愿景中总是包含了数据
链接的思想。这种内容可以通过渲染的视图来展现，或在不同的环
境里用合适的方式直接引用或操作它们。你可以设想有一个中间层
要求XML文档格式的信息，而表示层则希望通过AJAX调用取得
JSON对象。同样的名称代表了不同形式的同样数据。通过允许以这
种方式指定数据，我们很容易创建分层的应用，它们包含一致的视
图，即使它们要求不同的细节程度，或希望数据有不同的表示形
式。应用和环境提供与消费数据的方式是松耦合的，应用不再是
“在网上”，而是“在网里”。我们正走向数据的Web，它连接了人、
文档、数据、服务和概念，如图5-2所示。
967
---
## Page 969
弗吉尼亚
←
位于
在会上演讲
演讲稿
依赖于
受影响
关于
组织者是
图5-2：数据的Web
在这个环境中，基本的交互是逻辑上的客户端-服务器请求。我们必
须有感兴趣的信息的地址。术语“统一资源定位符（URL）"指的是
一种标识符，它不仅无歧义地确定了在全球地址空间的一个引用，
而且告诉我们如何解释这个请求。在这个过程中，不要求我们事先
懂得实现该请求的技术。这让处理过程保持简单，在面对后端变化
时有弹性。当我们最喜欢的站点从静态的数据提供变成动态的数据
提供，或者改变应用服务供应商时，这些动作对我们来说是不可见
的。虽然许多站点在这个过程中没能够有效地处理内容安排，但至
少我们能够从相同名字的地址接收不同的表示形式。我们可能希望
以不同的格式取回数据，这取决于我们是用计算机发出请求还是用
手机发出请求。在后面的讨论中，我们会看到如何利用这个属性来
控制细节程度，以满足访问控制和满足法规的要求。
Web使用的命名机制让我们能够标识文档、数据、服务，甚至概
念。我们曾经很难区分对AbrahamLincoln的引用和一篇关于它的文
章。例如，站点http://someserver/abrahamlincoln可能是两者之一。
968
---
## Page 970
W3C技术架构组（TAG）提出了一份建议，非网络可寻址的资源
（如不存在于Web上，但我们仍感兴趣的东西）可以通过返回码303
来说明，而不是通常的200。这相当于暗示客户端：“是的，你请求
的东西是合法的，也很有趣，但实际并不存在于Web上。你可以在
这里找到更多的信息....
Web地址以HTTP协议的引用开始，接下来是响应请求的服务器的名
称。在此之后，一种层次化机制反映了信息空间的一条路径。这种
逻辑名称描述了数据的某种结构。多条路径可以指向相同的资源，
但会在不同的场景下提供价值。http://server/order/open可以返回特
定时间点未完成订单的列表，而htp://server/order/customer/112345
可以返回某个客户的所有未完成订单。很清楚，在这两种逻辑请求
的结果中有重叠的部分。当我们不知道具体要问什么的时候，我们
会寻求更一般的途径。当我们希望根据某个客户的状态进行查询
时，我们就会寻求更直接的途径。我们从这些逻辑URL引用取回结
果，要么从系统的其他部分获得，要么基于客户通过用户接口输入
的数据来生成结果。
关注点分离是这种交互方式的关键抽象之一。我们分离了我们有兴
趣讨论的东西、操作这些东西的动作，以及选择的收发它们的方
式。这一点如图5-3所示，该图来自RESTWiki2L。在“表示层状态转
换（REST）”I3L架构方式中，我们会提到资源（名词）、动词和响
应的表示形式。资源可以是我们关注的任何东西（包括概念）。动
词是GET（取）、POST/PUT（创建/更新）和DELETE（删除）。
GET操作限制为没有副作用。这被称为幂等请求（idempotent
request）。这种交互的语义将有助于实现可能的缓存机制。如果没
有集中授权来响应请求，或者我们还没有办法来寻址资源，通常就
会使用POST（例如，在Usenet社区中提交新闻）。在创建一份订单
之前，我们不能够为它提供标识符，因为服务器应用负责生成订单
ID。因此，我们通常会向某些功能程序（如Servlet）POST这些请
求，这些功能程序代表我们接收请求，并在此过程中生成ID。PUT
用于更新和重写一个已命名资源的现有状态。DELETE在公共Web
上用得不多，但在内部控制的、面向资源的环境中，声明不再需要
或关心某些资源则是资源生命周期管理的重要部分。REST方式的
基本工作原理是分离关注逻辑命名资源、操作资源的方式，以及选
择的表示资源的格式，如图5-3所示。
969
---
## Page 971
这种关注点分离与SOAP服务调用的协议本质形成鲜明的对比，在
SOAP服务中，请求的结构、调用的行为和返回类型的格式通常通
过Web服务定义语言（WSDL）捆绑到一个协议上。协议很有用
除非我们想打破这些协议。Web服务技术栈的一个主要目标就是减
少耦合，并引入异步处理模型，这样消息的处理程序就可以根据新
的业务逻辑进行更新，同时又不影响客户端。WSDL绑定的方式注
意到了这个目标，但做法却刚好相反。我们通常不能在不影响客户
端的情况下改变一个端口的后台绑定（而这正是我们明确想避免
的）。
名词
动词
表示形式
图5-3：REST关注点分离