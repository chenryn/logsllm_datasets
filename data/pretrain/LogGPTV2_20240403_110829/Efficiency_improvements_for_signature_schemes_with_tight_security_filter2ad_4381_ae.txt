w
P AIR and outputs w. Otherwise, it picks a random value
w ∈ {0, 1}k \ L (recall that {0, 1}k is assumed to be the
domain of f0 and f1). It parses w as v(cid:19)m with v ∈ {0, 1}k1 ;
if v ∈ {0k1 , 1k1}, then I aborts. If not, I returns w to F,
,⊥) to P AIR.
adds w to L, adds w
To answer the query E(w), algorithm I checks whether
, x) ∈
w ∈ L.
. Otherwise, it parses w as v(cid:19)m with
P AIR and outputs w
v ∈ {0, 1}k1 and chooses random x ∈ {0, 1}k. If v = bk1
m , it
(cid:4) ∈ R, then
sets w
to F, adds w
I aborts. Otherwise, it returns the result w
to L, adds w
Signing queries. When F asks for a signature on a mes-
sage m, algorithm I ﬁrst checks whether a signature on m
has been requested previously; if so, I simply outputs the
If so, it then ﬁnds the unique tuple (w, w
= f (x); otherwise, it sets w
to R, and adds (w, w
to R, and adds (w, w
, x) to P AIR.
= g(x). If w
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
same signature that was output before. Otherwise, I ﬁrst
m (cid:19)m). It then ﬁnds the tuple of the form
computes y = E(bk1
m (cid:19)m, y, x) in P AIR and answers the query with x. It is
(bk1
crucial to note that as long as I has not aborted by this
point, we have x (cid:10)=⊥.
−1(w
(cid:4)
As long as I does not abort, it provides F with a perfect
simulation (in particular, all signing queries of F can be
answered with valid signatures). If I never aborts, then at
some point F outputs its forgery eσ; we assume that f (eσ) ∈ R
and that eσ was not the response to a previous signing query.
If eσ is a valid signature, it means that there is a unique tuple
of the form (bk1(cid:19) em, f (eσ), x) in P AIR; the crux of the proof
is to notice that since I has not aborted, we have x (cid:10)=⊥.
With probability 1/2 it is the case that b (cid:10)= b em in which
case I can output the claw (eσ, x).
To complete the proof, we need only analyze the prob-
ability that I aborts. An abort can occur in one of two
ways: ﬁrst, F might make a query E
) which results in
an output having k1 leading “0” or “1” bits. Second, when
answering a query to the E-oracle, a collision may occur
with a previously deﬁned value; this ruins the simulation
since E is supposed to be a permutation. An abort of the
ﬁrst type occurs with probability bounded from above by
2 · qE · 2k−k1
, which, for values of k and qE encountered in
2k−qE
practice (i.e., k ≈ 1024 and qE ≈ 260) is well-approximated
by 2 · qE · 2
−k1 . An abort of the second type occurs with
probability bounded from above by (qE + qs)2 · 2
−k. For
values of qE, qs, and k encountered in practice, this term is
entirely negligible.
Putting everything together, we see that if F forges signa-
tures with probability ε, then I obtains a claw with proba-
−k1 ). Furthermore, the running
bility (roughly) 1
time of I includes the running time of F and is otherwise
2
dominated by the computation of f or g each time a permu-
tation query is answered.
·(ε−2·qE·2
(cid:4)
−k1 ≈ ε
(cid:4)
). Taking qE ≈ 260 and ε
To achieve tight security, we require qE · 2
or,
(cid:4) ≈
equivalently, k1 ≈ log2(qE/ε
−60 (following [12]) we see that k1 must be 120 bits long.
2
In other words, the signature scheme requires only 120 bits
of redundancy and can sign messages of length k − 120. It
is not hard to see that this result is essentially optimal in
terms of the amount of redundancy used, and we formalize
this in the following lemma.
Lemma 1. Let (Gen, Sign, Vrfy) be a signature scheme sup-
porting message recovery for messages of length / in which
signatures are of length s. Then there exists an adversary
running in time O(t) which forges a signature with probabil-
ity roughly t · 2(cid:26)−s.
Before giving the (simple) proof,
it is worth noting that
we do not restrict the forger in any way, do not assume
any “black-box” access to the forger, and do not make any
mention of random oracles or ideal permutations. From a
practical point of view, the lemma indicates that if we want
−60 against adversaries
to achieve probability of forgery 2
running in time 260, then 120 bits of redundancy (i.e., s− /)
are necessary.
Proof. Consider the following forger F: Given a public
key P K, adversary F picks σ ∈ {0, 1}s and checks whether
VrfyP K (σ) (cid:10)= reject. Since every message in {0, 1}(cid:26) corre-
sponds to at least one signature, and since there can be
no signature which corresponds to two diﬀerent messages
(since the scheme supports message recovery), there are at
least 2(cid:26) valid signatures. Thus, picking σ at random yields
a valid signature with probability at least 2(cid:26)−s. Repeating
this process at most t times allows F to achieve the stated
bound.
4.4 Further Applications
We show how the technique of the preceding sections can
be applied to eliminate the need for a random salt in schemes
based on the CDH assumption (even though the CDH prob-
lem does not immediately give rise to a claw-free permuta-
tion). We focus on the schemes of [7, 18] which both have
a similar, high-level structure: the public key contains ele-
ments g, h in some group G , and the secret key contains the
value x = logg h. Signing a message m involves computing
σ = (H(m))x, where H is a random oracle mapping strings
uniformly onto G .
Boneh, Lynn, and Shacham [7] use an “FDH-like” ap-
proach to analyze their scheme (but with the optimization
of Coron [11]); consequently they lose a factor of qs in the
security reduction. On the other hand, Goh and Jarecki [18]
use a “PFDH-like” approach and include the random salt r
with the resulting signature; this enables them to obtain
a tight security reduction at the expense of increasing the
signature length.
We show here how to achieve a tight security reduction
without any random salt. The public key and the secret key
are as before but signing message m now involves choos-
ing random b and computing σ = (H(b(cid:19)m))x (and using the
same b to answer any subsequent signing queries for the same
message). Without going through the details of the proof
(which parallel those of the proof of Theorem 2), note that a
simulator who wants to solve an instance of the CDH prob-
lem (g, h, y) simply sets the public key to be P K = (g, h).
Whenever there is a query on a new message m, it chooses a
random bit bm ∈ {0, 1}. It will then answer the hash query
H(b(cid:19)m) with gα if b = bm, or with ygα if b (cid:10)= bm. Now, the
simulator can correctly answer all signing requests by com-
puting y = H(bm(cid:19)m), looking up the value of α = logg y,
and setting σ = hα. Conversely, any valid forgery results
in a solution to the original CDH instance with probability
1/2: if the forgery includes eσ = (H(b(cid:19)m))x for b (cid:10)= bm, then
the simulator knows α such that H(b(cid:19)m) = ygα; therefore,
eσ = yxhα from which the simulator can compute the desired
answer yx.
Remark. The above techniques extend to allow a tighter
proof of security for (a variant of) the identity-based en-
cryption scheme of Boneh and Franklin [6]. We do not
discuss the details, but instead assume the reader is famil-
iar with the Boneh-Franklin construction and give only an
overview of the approach.
In the original Boneh-Franklin
scheme, for any identity ID there is an associated “public
key” P KID = H(ID); anyone can encrypt messages to user
ID using some master parameters and P KID (which can
be derived simply using ID, making the scheme “identity-
based”). There is also a corresponding secret key SKID
that the private-key generator (PKG) gives to user ID to
enable decryption. In the model of security, an adversary
is allowed to request (“expose”) secret keys for identities
I = {ID1, . . . , ID(cid:26)} of his choice, yet encryption to any
user ID /∈ I should remain secure.
[13] Y. Dodis and L. Reyzin. On the power of claw-free
permutations. Security in Communication Networks
2002.
[14] T. El Gamal. A public-key cryptosystem and a
signature scheme based on discrete logarithms. IEEE
Trans. Info. Theory 31(4): 469–472 (1985).
[15] Federal Information Processing Standards publication
#186-2. 2000. Digital signature standard (DSS). U.S.
Department of Commerce/National Institute of
Standards and Technology.
[16] A. Fiat and A. Shamir. How to prove yourself:
practical solutions to identiﬁcation and signature
problems. Crypto ’86.
[17] E. Fujisaki, T. Okamoto, D. Pointcheval, and J. Stern.
RSA-OAEP is secure under the RSA assumption.
Crypto 2001.
[18] E.-J. Goh and S. Jarecki. A signature scheme as
secure as the Diﬃe-Hellman problem. Eurocrypt 2003.
[19] S. Goldwasser, S. Micali, and R. Rivest. A digital
signature scheme secure against adaptive
chosen-message attacks. SIAM J. Computing 17(2):
281–308 (1988).
[20] L. Granboulan. Short signatures in the random oracle
model. Asiacrypt 2002.
[21] J. Jonsson. An OAEP variant with a tight security
proof. Available at http://eprint.iacr.org/2002/034/.
[22] U. Maurer and S. Wolf. The Diﬃe-Hellman protocol.
Designs, Codes, and Cryptography 19(2/3): 147–171
(2000).
[23] S. Micali and L. Reyzin. Improving the exact security
of digital signature schemes. J. Cryptology 15(1): 1–18
(2002).
[24] D. Pointcheval and J. Stern. Security arguments for
digital signatures and blind signatures. J. Cryptology
13(3): 361–396 (2000).
[25] C. Schnorr. Eﬃcient identiﬁcation and signatures for
smart cards. Crypto ’89.
[26] V. Shoup. Lower bounds for discrete logarithms and
related problems. Eurocrypt ’97.
[27] V. Shoup. OAEP reconsidered. Crypto 2001.
[28] V. Shoup. A proposal for an ISO standard for
public-key encryption. Available at
http://eprint.iacr.org/2001/112.
In the given proof of security [6], a simulator needs to
“guess” (in some sense) which identities the adversary will
expose. This leads to a loss of O(qe) in the security (where
qe is the number of key exposure queries).
Consider now a modiﬁed scheme in which for any ID there
are two “public keys” P KID,0 = H(0(cid:19)ID) and P KID,1 =
H(1(cid:19)ID); furthermore, to encrypt a message to user ID, a
sender now encrypts the same message with respect to both
of these public keys. The PKG, however, only gives to ID
one of the corresponding private keys (i.e., either SKID,0
or SKID,1 but not both). Note that a single such key is
suﬃcient to enable correct decryption. Following the proof
techniques discussed in this paper, a simulation can be set up
in which the simulator knows exactly one secret key for every
ID. This allows all key exposure queries to be answered by
the simulator, while ensuring that encryption to any non-
exposed ID remains secret. Thus, this modiﬁcation enables
a tight proof of security at the cost of reducing the eﬃciency
of encryption by a factor of two.
Acknowledgments
The remark at the end of Section 3.1 is due to Yevgeniy
Dodis, while the remark at the end of Section 4.4 is due to
Dan Boneh. We also thank Dan for pointing out the idea
of hashing long messages only a single time in the course of
signing (cf. Section 4.1). Finally, we thank the anonymous
referees for their helpful comments.
5. REFERENCES
[1] M. Bellare and P. Rogaway. Random oracles are
practical: a paradigm for designing eﬃcient protocols.
ACM Conference on Computer and Communications
Security, 1993.
[2] M. Bellare and P. Rogaway. Optimal asymmetric
encryption padding. Eurocrypt ’94.
[3] M. Bellare and P. Rogaway. The exact security of
digital signatures — how to sign with RSA and Rabin.
Eurocrypt ’96.
[4] D. Boneh. The decision Diﬃe-Hellman problem.
ANTS ’98.
[5] D. Boneh. Simpliﬁed OAEP for the RSA and Rabin
functions. Crypto 2001.
[6] D. Boneh and M. Franklin. Identity based encryption
from the Weil pairing. Crypto 2001. Full version to
appear in SIAM J. Computing and available at
http://eprint.iacr.org/2001/090.
[7] D. Boneh, B. Lynn, and H. Shacham. Short signatures
from the Weil pairing. Asiacrypt 2001.
[8] E. Brickell, D. Pointcheval, S. Vaudenay, and M.
Yung. Design validations for discrete logarithm based
signature schemes. PKC 2000.
[9] R. Canetti, O. Goldreich, and S. Halevi. The random
oracle methodology, revisited. STOC ’98.
[10] D. Chaum and H. van Antwerpen. Undeniable
signatures. Crypto ’89.
[11] J.-S. Coron. On the exact security of full-domain
hash. Crypto 2000.
[12] J.-S. Coron. Optimal security proofs for PSS and
other signature schemes. Eurocrypt 2002. Full version
available at http://eprint.iacr.org/2001/062/.