**Issue Type** (Select one with "x")
- [ ] Bug Report => Please search GitHub for a similar issue or PR before submitting
- [x] Feature Request
- [ ] Support Request => Please do not submit support requests here. Instead, see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question

**Current Behavior**
There is currently no straightforward way to decorate an existing injectable service, which would allow the use of the original version within the new decorated version.

**Expected Behavior**
It would be beneficial to introduce a new type of provider, such as `DecoratorProvider`, that enables the decoration of injectables. This could work as follows:

```typescript
@Injectable()
class BetterFooService implements FooService {
  constructor(
    private fooService: FooService, // < not a cyclic dependency
    private otherService: OtherService) {}

  bar(): void {
    console.log('better bar');
    this.fooService.bar();
  }
}

const PROVIDER: DecoratorProvider = { provide: FooService, useDecorator: BetterFooService };

@Directive({
  selector: '[myDirective]',
  providers: [PROVIDER]
})
class MyDirective {}
```

**Minimal Reproduction of the Problem with Instructions**
Using `FactoryProvider` or `ClassProvider` to achieve a similar effect results in a `Cannot instantiate cyclic dependency!` error. You can reproduce this issue using the following Plunker:
- [Plunker Example](https://plnkr.co/edit/YxGzVA1HNEjC1rXBmMQg?p=preview)

**Motivation / Use Case for Changing the Behavior**
This feature would provide directives with more flexibility to modify the behavior of other components or directives. For example, a directive could decorate a `ViewContainerRef` to wrap every created component or embedded view in another component that includes animations. This could be particularly useful when applied to the `RouterOutlet` component to add animations during route changes.

**Environment Information**
- **Angular Version:** 2.4.7
- **Browsers:** All
- **Languages:** All