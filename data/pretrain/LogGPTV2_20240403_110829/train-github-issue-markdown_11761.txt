 **I'm submitting a ...** (check one with "x")
    [ ] bug report => search github for a similar issue or PR before submitting
    [x] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**  
I'm not aware of any way to decorate existing injectable so one could use old
version inside new one.
**Expected behavior**  
I would be nice to have some way to decorate injectables. Maybe new type of
provider - `DecoratorProvider`, which could work like this:
    @Injectable()
    class BetterFooService implements FooService {
      constructor(
        private fooService: FooService, // < not a cyclic dependency
        private otherService: OtherService) {}
      bar(): void {
        console.log('better bar');
        this.fooService.bar();
      }
    }
    const PROVIDER: DecoratorProvider =  { provide: FooService, useDecorator: BetterFooService };
    @Directive({
      selector: '[myDirective]',
      providers: [PROVIDER]
    })
    class MyDirective {}
**Minimal reproduction of the problem with instructions**  
Using FactoryProvider/ClassProvider to achieve similar effect causes `Connot
instantiate cyclic dependency!` error:  
https://plnkr.co/edit/YxGzVA1HNEjC1rXBmMQg?p=preview
**What is the motivation / use case for changing the behavior?**  
Directive will have more freedom to modify behaviour of other
components/directives.  
Example use case:  
Directive that decorates `ViewContainerRef` so it wraps every created
component/embedded view in other component with animations. It could be used
on `RouterOutlet` component to add animations when route changes.
**Please tell us about your environment:**
  * **Angular version:** 2.4.7
  * **Browser:** all
  * **Language:** all