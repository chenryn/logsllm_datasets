title:Overhaul: Input-Driven Access Control for Better Privacy on Traditional
Operating Systems
author:Kaan Onarlioglu and
William Robertson and
Engin Kirda
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Overhaul: Input-Driven Access Control for Better
Privacy on Traditional Operating Systems
Kaan Onarlioglu, William Robertson, Engin Kirda
Northeastern University, Boston, USA
{onarliog,wkr,ek}@ccs.neu.edu
Abstract—The prevailing security model for OSes focuses on
isolating users from each other; however, the changing computing
landscape has led to the extension of traditional access control
models for single-user devices. Modern OSes for mobile devices
such as iOS and Android have taken the opportunity provided
by these new platforms to introduce permission systems in which
users can manage access to sensitive resources during application
installation or runtime. One drawback of similar efforts on
desktop environments is that applications must be rewritten with
this security model in mind, which hinders traditional OSes from
enjoying the beneﬁts of user-driven access control.
We present a novel architecture for retroﬁtting a dynamic,
input-driven access control model into traditional OSes. In this
model, access to privacy-sensitive resources is mediated based on
the temporal proximity of user interactions to access requests, and
requests are communicated back to the user via visual alerts.
We present a prototype implementation and demonstrate how
input-driven access control can be realized for resources such
as the microphone, camera, clipboard, and screen contents. Our
approach is transparent to applications and users, and incurs no
discernible performance overhead.
I.
INTRODUCTION
The prevailing security model for traditional operating
systems focuses on protecting users from each other. For
instance, the UNIX access control model provides a framework
for isolating users from each other through a combination
of user identiﬁers, group identiﬁers, and process-based pro-
tection domains. The fundamental assumption underlying this
approach to security is that the primary threat to user data
originates from other users of a shared computing system.
The traditional user-based security model makes sense in
the context of timesharing systems, where many users share
access to a common pool of computing resources. However, the
modern proliferation of inexpensive and powerful computing
devices has resulted in the common scenario where one user
has sole access to a set of resources. Unfortunately, there
exists a signiﬁcant impedance mismatch between user-based
access control and the primary security threat in the single-
user scenario, where users inadvertently execute malicious
programs that operate with that user’s privilege and have full
access to all of the user’s sensitive computing resources. As
such, user-based access control is not well-suited to preventing
attacks against user conﬁdentiality. In particular, malicious
programs can access privacy-sensitive hardware devices such
as the microphone or camera, or access virtual resources such
as the system clipboard and display contents of other programs.
In response to the changing computing landscape, much
effort has been invested in extending the user-based access
control model to enable dynamic, user-driven security. For
instance, modern operating systems for smartphone and tablet
devices have taken the opportunity provided by these new
platforms to introduce permission systems as an extension
to the underlying UNIX security model that remains in use
on these systems. For instance, iOS gives users the ability to
approve or deny access to sensitive resources during runtime
via popup prompts. Research operating systems have also
proven a fertile milieu for experimenting with security models
that address the needs of modern computing systems. For
instance, Roesner et al. [27] present an extension to ServiceOS
where gadgets are embedded into applications that allow users
to grant or deny access to sensitive resources.
In each of the preceding examples, determining legitimate
user intent and translating that intent into appropriate security
policies is a central feature of their respective security models.
For each system, security decisions as to whether to allow
or deny access to sensitive resources for individual programs
are delegated to the user, and the system is responsible for
establishing trusted input and output paths to capture user
intent such that malicious programs cannot
inﬂuence this
process by either spooﬁng or intercepting user inputs.
We fundamentally agree with this approach to securing
modern computing devices, since users are often solely capable
of classifying program actions as privacy violations or other
inappropriate uses of their resources. However, one drawback
of these efforts is that applications and operating systems must
be written with this security model in mind. This requirement
largely excludes traditional operating systems such as Win-
dows, Linux, and OS X, which remain in wide use, from
enjoying the beneﬁts of user-driven access control. In this
work, we show that providing a user-driven security model
for protecting privacy-sensitive computing resources can be
realized for traditional operating systems, as an extension to
the traditional user-based security model. In particular, our
security model is based on the observation that a legitimate
application usually accesses privacy-sensitive devices imme-
diately after the user interacts with that application (e.g., by
clicking on a button to turn on the camera, or pressing the
key combination for a copy & paste operation). We call this
security model input-driven access control, and demonstrate
how it can be enforced by correlating user input events with
security-sensitive operations based on their temporal proximity,
making access control policy decisions automatically based on
this information, and notifying the user of resource accesses in
an unintrusive manner. We achieve this by using lightweight
and generic techniques to augment the operating system and
display manager with trusted input and output paths, which we
collectively call OVERHAUL, and demonstrate our approach by
implementing a prototype for Linux and X Window System.
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.47
443
In contrast to prior work, we show that capturing user
interaction as a basis for security decisions involving sensitive
resources can be performed in an application-transparent man-
ner, obviating the requirement that applications be rewritten to
conform to special APIs or with a more reﬁned security model
in mind. Using our approach, we demonstrate how dynamic
access control can be transparently achieved for common re-
sources such as the microphone, camera, clipboard, and display
contents. Finally, we show that this can be achieved without a
discernible performance impact, and without utilizing intrusive
prompts or other changes to the way users interact with
traditional operating systems. To summarize, we make the
following contributions.
• We present a general architecture for retroﬁtting a dy-
namic, input-driven access control model into traditional
operating systems in a transparent manner,
in which
access to privacy-sensitive resources is mediated based
on the temporal proximity of user interactions to access
requests. We also address the challenges of tracking user
interaction across process boundaries (e.g., IPC channels).
• We build upon this architecture to demonstrate how input-
driven access control can be implemented to protect sensi-
tive resources such as the microphone, camera, clipboard,
and display contents.
• We present a prototype implementation for Linux and
X Window System, and evaluate it
to show that our
system imposes no discernible performance overhead and
no changes to the traditional computing interface.
II. PROBLEM STATEMENT
Security models for traditional operating systems center on
multiplexed computation on timesharing systems, where mul-
tiple users share access to a single set of computing resources.
However, the shift towards dedicated devices with single users
has resulted in a fundamental impedance mismatch between
the traditional model of users, groups, and processes and the
needs of modern systems. In particular, contemporary threats
often take the form of malicious programs that execute with the
full privileges of the user, rendering user-based security models
largely ineffective. Mobile operating systems such as iOS and
Android, as well as research systems such as ServiceOS [27],
have promoted the concept of dynamic access control where
permissions to access sensitive resources are granted by users
on-demand. However, operating systems for the desktop and
server have been largely neglected by these advances, since
prior work has required that applications be designed with
dynamic access control in mind.
An open question remains as to whether modern dynamic
access control can be realized for platforms where applications
have not been written to conform to this model. We believe
that our work answers this question in the afﬁrmative.
Threat model. For this work, we assume that the trusted
computing base includes the display manager, OS kernel, and
underlying software and hardware stack. Therefore, we assume
that these components of the system are free of malicious code,
and that normal user-based access control prevents attackers
from running malicious code with superuser privileges. On the
other hand, we assume that the user can install and execute
programs from arbitrary untrusted sources, and therefore, that
444
malicious code can execute with the privileges of the user. We
assume that complementary preventive security mechanisms
are in place to prevent privilege escalation attacks, such as
ASLR or DEP.
Input-driven access control primarily addresses two privacy
breach scenarios. The ﬁrst one covers programs that stealthily
run in the background and access privacy-sensitive resources
without the user’s knowledge, behavior typical of malware [2],
[3], [18], [7]. OVERHAUL ensures that such attempts are
automatically blocked.
The second scenario involves benign, but buggy or mis-
behaving, applications that access protected resources without
the user’s knowledge. Due to the trade-offs OVERHAUL make
in order to transparently retroﬁt a dynamic access control into
existing systems, unlike previous work [27], it is not possible
to match each input event to a precise user intent. Therefore,
in this scenario, OVERHAUL instead visually notiﬁes the user
to alert her of the undesired resource access.
We note that all forms of user-driven security are funda-
mentally vulnerable to full mimicry attacks. For instance, if a
user could be tricked into knowingly installing, executing, and
granting privileges to a malicious application that imitates a
well-known legitimate application, user-driven security models
would fail to provide any protection. Hence, our threat model
does not include this third scenario.
Goals. The primary security goals OVERHAUL aims to
achieve are the following.
(S1) OVERHAUL must allow an application to access privacy-
sensitive resources only if the user has explicitly inter-
acted with that application through physical, hardware
input devices,
immediately before the access request.
Resources include hardware devices such as cameras,
microphones, and other sensors, or virtual resources such
as system clipboards and the display contents of user
programs.
(S2) OVERHAUL must prevent programs from forging input
events or mimicking user interaction to escalate their (or
other applications’) privileges.
(S3) OVERHAUL must ensure that legitimate user interaction
events cannot be hijacked by malicious applications, such
that users should not mistakenly grant permissions to a
malicious program that were intended for a legitimate
program.
(S4) OVERHAUL must notify users of successful accesses to
protected resources via a trusted output path that cannot
be obscured or interfered with by other applications.
In addition to the above security properties, we set out to
satisfy a number of design goals for OVERHAUL.
(D1) OVERHAUL must provide transparent protection to exist-
ing applications, without requiring access to source code
or application modiﬁcations.
(D2) OVERHAUL should not incur a signiﬁcant performance
overhead.
(D3) OVERHAUL should not signiﬁcantly degrade the us-
ability of, or change the way users interface with the
underlying system, for instance, by using intrusive popup
prompts.
III. SYSTEM DESIGN
The architecture of an OVERHAUL-enhanced system re-
quires modiﬁcations to, and close interaction between, several
components of the operating system and display manager. In
this section, we describe the abstract design of OVERHAUL,
independent of the underlying operating system, and present
the challenges involved in monitoring and tracking user input
across process boundaries. Later,
in Section IV, we will
demonstrate how our design can be realized in a prototype
running on Linux and the X Window Server.
Note that our work assumes a userspace display manager
(i.e., a design similar to that of the X Window System), an
approach employed by popular commodity operating systems.
Different OS designs can allow display managers integrated
into the kernel, which would alleviate the need for some
of the components we describe below, such as a separate
trusted communication channel between the kernel and the
display manager. Our design can be applied to that case in
a straightforward manner.
A. Trusted Input & Output Paths
In order to realize any of the aforementioned security guar-
antees, OVERHAUL must establish a trusted path for user input.
By a trusted path, we refer to the property that input events
should be authenticated as legitimately issued by a real user
with a hardware input device, as opposed to synthetic input
events that can be issued programmatically. This capability
serves as a generally useful primitive that could be exposed to
higher layers of the software stack. However, in this work we
focus on illustrating its use for transparently securing access
to system-wide resources.
The display manager of the system is often responsible for
receiving all low-level input events, including mouse clicks
and key presses, from device drivers and delivering them to
their target application windows. Consequently, OVERHAUL
utilizes a display manager with an enhanced input dispatching
mechanism that can detect and ﬁlter out synthetically generated
inputs to fulﬁll the trusted input path requirement.
Likewise, OVERHAUL is tasked with establishing a trusted
output path to alert users whenever a sensitive resource access
request is granted. We achieve this through visual notiﬁcations
that appear on the screen. Since the display manager is in
control of the screen contents, OVERHAUL extends it with an
overlay notiﬁcation mechanism that is always stacked on top
of the screen contents, and cannot be obscured, interrupted, or
interfered with by other processes.
B. Permission Adjustments
The kernel is responsible for dynamically adjusting the
privilege level of user programs in response to permission
granting actions, i.e., authentic user input events. In order
to accomplish this task, the kernel ﬁrst needs to establish
a secure communication channel
to the display manager.
The display manager can then use this channel to send the
kernel interaction notiﬁcations each time the user interacts
with an application. Since the display manager is often a
regular userspace process, the kernel is able to authenticate the
communication endpoint and ignore communication attempts
by other processes in a straightforward manner.
The kernel keeps a history of these interaction notiﬁcations,
which include the identity of the application that received
the interaction and a timestamp, inside a permission moni-
tor. Once this information is stored, the permission monitor
can respond to permission queries and adjustment requests,
originating either from the userspace display manager through
the already established secure communication channel, or from