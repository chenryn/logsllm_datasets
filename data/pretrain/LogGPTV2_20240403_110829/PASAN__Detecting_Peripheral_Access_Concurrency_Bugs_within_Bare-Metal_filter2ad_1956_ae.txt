or child processes have started. The initialization steps conﬁg-
ure the device and its I/O setting, during which the platforms
interact with diverse peripheral devices and I/Os rather than
running application code. Consequently, our device access
distance threshold values (i.e., the values of T hri and T hrd
mentioned in Section 4) are not optimal in those steps. For
example, we found that ArduPilot hands over certain initial-
258    30th USENIX Security Symposium
USENIX Association
Table 5: Summary of concurrency bugs.
Platform
# of
Bugs
ArduPilot
RaceFlight
RIOT
Contiki
TS100
grbl
rusEFI
Total
20
0
9
0
1
0
6
36
# of False
Positive
Bugs
12
0
1
0
0
0
6
19
False
Positive
Rates
60.0%
-
-
-
40.0%
-
0
0
11.11%
88.89%
0.0%
100.0%
100.0%
0.0%
-
-
Bug Detection
Rates
# of Affected
Device
Drivers
7
0
8
1
0
16
ization steps to threads and processes communicating with the
dedicated devices during the early execution stages. Finally,
indirect calls to support multiple different I/Os also lead to
low extraction accuracy. e.g., in ArduPilot.
5.3 Concurrency Bug Detection Effectiveness
Ground Truth Study Experiment. We ﬁnd patches in
RIOT related to the bus-level concurrency bugs in I2C3 and
SPI4. Before those patches, there were no locks at all, and
hence any peripheral device attached to either I2C or SPI
bus had concurrency bugs in RIOT. We use those patches as
the ground truth by removing this patch in our RIOT testing.
PASAN found all the 28 concurrency bugs ﬁxed by the patch
with 0% false positive rates. We apply the removed patch
again for the following RIOT testing.
Bug Detection. As shown in Table 5, we evaluate each target
platform on: (1) the number of concurrency bugs, (2) the num-
ber of false positives cases, (3) the bug detection rates, (4) the
false positive rates in the bug detection, and (5) the number of
potentially affected devices. In total, PASAN reported 36 bugs
from ArduPilot, RIOT, TS100, and rusEFI platforms. After
veriﬁcation, we found that 17 out of 36 reported bugs are true
positives, and the rest 19 cases are false positives. Among the
17 true positive cases, 8 cases are from RIOT. While the patch
mentioned earlier ﬁxed some bus-level concurrency bugs in
RIOT, these 8 are new peripheral-level concurrency bugs. Af-
ter we found aforementioned bugs in RIOT, we checked patch
histories and found that ten peripheral devices had concur-
rency bugs with transaction corruptions5. However, RIOT
developers did not consistently apply the similar patches to
the other peripheral device drivers containing concurrency
bugs. We reported our ﬁndings to RIOT developers, and they
acknowledged our ﬁndings as bugs6. All the bugs found in
ArduPilot are peripheral-level concurrency bugs. TS100’s
case is a generic concurrency bug on MMIO accesses caused
by interrupt handling. Overall, PASAN achieves bug detection
rates from 40.0% to 100.0%.
3
https://github.com/RIOT-OS/RIOT/pull/2323/commits
for
three boards before the patch.
boards before the patch.
4https://github.com/RIOT-OS/RIOT/pull/2317/commits for nine
5https://github.com/RIOT-OS/RIOT/pull/2326/commits.
6https://github.com/RIOT-OS/RIOT/issues/13444
False Positives. Due to the limitations of static analysis,
PASAN reported 12, 1, and 6 false positive bugs in ArduPilot,
RIOT, and rusEFI, respectively. rusEFI has six transactions
reported as concurrently executable code because employed
points-to analysis [76] treats their locks to be different. In fact,
these locks are the alias of the same lock. For ArduPilot and
RIOT, PASAN reported two and one incorrect concurrency
bugs, respectively, due to inaccurate transaction span extrac-
tions. We also found that one false positive case was reported
because it did not require waiting for the job completion after
device initialization. Speciﬁcally, LSM9DS0, a magnetometer
of ArduPilot reads sensor values iteratively without requesting
a processing job in the device driver. LSM9DS0 was mistakenly
reported due to I2C attached requiring writing accesses to con-
trol the I2C bus. In this case, the peripheral’s internal state
machine is tolerant to potentially buggy concurrent accesses,
although PASAN correctly reports this as potential concur-
rency bugs based on our detection algorithm. Our manual
veriﬁcation did not reveal any more false alarms. We discuss
about factors causing false positives in Section 6.
5.4 Concurrency Bug Detection Capability
Comparison
We compare PASAN with the existing concurrency bug de-
tection tools to show its effectiveness as summarized in Ta-
ble 6. Our selection of the existing tools was guided by the
following criteria. First, we focus on the comparison with
static analysis tools. This is because dynamic analysis-based
approaches [54, 55, 62, 67, 73, 83, 84] require dynamic analy-
sis frameworks, which are not generically applicable to em-
bedded systems except for only a few boards [41, 51, 53].
Second, we do not consider the tools requiring non-trivial
manual efforts such as theoretical algorithms [60, 66] or man-
ual code instrumentation [36, 65]. Finally, we consider the
static analysis tools that are available to use for uncovering
concurrency bugs with transaction corruption7. As such, we
chose Flawﬁnder [20], Polyspace [24], and Coverity [15].
Flawﬁnder performs concurrency analysis for generic C/C++
code independent of compilers and target boards. Polyspace
claims that they cover various real embedded systems such as
Nissan car and aircraft autopilot [24,25]. Coverity also claims
to support automotive embedded systems while supporting
embedded system compilers [30].
Table 6 shows the number of true concurrency bugs only
with transaction corruption, and the number of any types
of concurrency bugs reported by each tool. We found that
Flawﬁnder, Polyspace, and Coverity cannot ﬁnd any con-
currency bug with transaction corruption. More speciﬁcally,
Flawﬁnder found 265 conventional concurrency bugs (e.g.,
7 For example, a trial version of CodeSonar [13] does not support aca-
demic evaluation; Mthread add-on is working on porting to its recent main
framework [20]; Infer [21] does not support embedded system code since it
ignores compilation commands for embedded systems.
USENIX Association
30th USENIX Security Symposium    259
Table 6: Summary of the concurrency bug detection perfor-
mance of PASAN in comparison with existing works. T: #
of true concurrency bugs only with transaction corruption,
A: # of all reported concurrency bugs of any types without
manually verifying their correctness.
Target
Firmware
ArduPilot
RaceFlight
RIOT
Contiki
TS100
grbl
rusEFI
PASAN
A
T
20
8
0
0
9
8
0
0
1
1
0
0
0
6
Flawﬁnder [19]
T
0
0
0
0
0
0
0
A
247
0
9
3
0
0
6
Polyspace [24] Coverity [15]
T
0
0
0
0
0
0
0
A
0
0
1
0
0
0
0
A
0
0
0
0
0
0
0
T
0
0
0
0
0
0
0
concurrent ﬁle object accesses); Polyspace found one concur-
rency bug caused by a global variable in RIOT; Coverity found
zero concurrency bug although Coverity found the other types
of bugs (e.g., integer overﬂow). Overall, as shown in Table 6,
unlike PASAN, the existing tools cannot detect concurrency
bugs caused by peripheral access transactions.
5.5 Case Study I: SD Card Data Corruption
Figure 8: Simpliﬁed example of two-layered state machines
of SPI and SD card controller.
RIOT [28] supports a variety of peripherals on diverse em-
bedded systems. One of the supported peripherals is an SD
card controller. Due to the limited number of I/O ports in em-
bedded systems, an SD card controller is frequently attached
to an SPI bus which may already be connected with other
peripherals. We note that RIOT is designed to be a generic
RTOS with a variety of interface options. Unfortunately, be-
cause of design ﬂaws in the exclusive access protection, it is
possible to exploit the control interface and access the con-
troller directly/indirectly. As a result, a concurrency bug could
potentially lead to data loss or corruption such as a missing
SD card access and undesired data transfer to the SD card.
PASAN’s analysis of the existing lock objects and lock
spans corresponding to the controller has revealed two issues:
there is no bus lock for protecting the state machine of SPI,
and there is no peripheral lock spanning the whole transaction
with the controller.
Missing Bus Lock on an SPI. As shown in the bus-level
box of Figure 8, the SPI takes two states for the data trans-
fer: (1) select a slave device among the attached peripherals,
and (2) perform data read/write operations with the periph-
eral. As such, a concurrency bug can be found by checking
whether there is a lock spanning from (1) to (2). Missing
locks can cause the transferred data to be corrupted or data
to be transferred to different devices unless both (1) and (2)
are performed atomically. In our analysis, PASAN did not
ﬁnd a lock in either of the two states of the tested embedded
platform revealing its vulnerability to potential attacks.
Missing Peripheral Lock for an SD Card Controller.
The embedded system needs to perform a set of transactions
with the controller to operate correctly. Such transactions are
represented through a state machine shown in the peripheral-
level box of Figure 8. We note that each transaction starts
from Select CMD and ends at CMD Done. Hence, to guaran-
tee the correct operation of the controller, the state machine
transitions from Select CMD to CMD Done must be secured
atomically by a lock. However, we found no lock spanning
the state machine transitions. This means that concurrent
accesses to the SD card controller may cause unexpected
problems (e.g., data loss or corruption). Recently RIOT devel-
opers have applied a patch to enforce a Bus Lock as shown in
Figure 8. However, the concurrency bug cannot be eliminated
completely without enforcing the Peripheral Lock along with
the Bus Lock.
Real-World Attack Scenario. Embedded systems used in
IoT/CPS devices store various critical information including
secret keys (e.g., passwords) and data logs (e.g., object ap-
proaching detection and mission execution orders facilitating
movement between two waypoints). However, our experi-
ments show that the concurrency bugs at both bus and periph-
eral levels can result into corruption of such information. To
exploit these concurrency bugs, we conﬁgured our experimen-
tal embedded system on a BluePill [12] board with an SD
card adapter connected through an SPI interface [22] to run
four threads recording secret data (that is set as PASSWORD)
continuously. When a concurrency bug was triggered in the
middle of a data store operation by enabling concurrent ac-
cesses of multiple threads to the single SPI, we observed two
cases with exploitable patterns. In the ﬁrst case, one or more
characters out of the eight characters of PASSWORD would be
missing resulting into words such as ASSWORD. In the second
case, the words from different threads would interleave with
each other resulting into words such as PAPASSWORDSSWORD.
We note that while the ﬁrst case happens only when SPI bus-
level locks are missing, the second case happens when any
of the bus-level or peripheral-level locks are missing. Once
such data corruption or loss happens, legitimate users may be
prevented from accessing their embedded systems. In another
example, the corruption may damage or even lose evidence
for investigation if the entered data is log/forensic data.