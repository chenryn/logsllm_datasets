0
2
5
2
2
8
0
1
3
2
1
55,396
TABLE V: DGA e2LD in the DGArchive [12] resolved in the
malware executions in our dataset.
This observation can also be seen in Table VI that shows the
ratio of MX lookups per malware sample. With the exception
of Sality, the top 25 malware families queried at least 40 MX
records. Since most malware we studied contacted less than 10
domains, this is an interesting characteristic of many of these
samples.
Figure 10 shows the number MX lookups and mail re-
lated DNS queries for each potentially spam related malware
sample. Notice that there is an interesting peak around 100
domains. After associating 5,239 samples with this spike, we
were able to obtain VirusTotal reports for 909 (17.4%) of
these samples; 892 (98.1%) were instances of Mydoom [77]
malware—a compute worm ﬁrst sighted in January 2004 and
used by e-mail spammers to send mail from infected hosts. As
noted in Section II, our earliest malware feeds start in January
2011, which is a full seven years after the ﬁrst sighting of the
Mydoom e-mail worm, and despite being known for over a
decade, we still saw active Mydoom variants in our malware
dataset as recently as August 2015. The long lifetime of this
particular malware family is interesting because it suggests that
even older malware is effective for spam related activity.
800
Fig. 9: Cumulative distribution function (CDF) for the number
of NXDomains seen in malware samples in our datasets.
was active during our analysis. This indicates lack of pressure
by defenders so the family can keep using the same domain.
On the contrary, in other families like gameover roughly
30% of the queried domains resolved to a registered IP address.
The 24 families in the DGArchive that we do not observe
are likely due to two reasons. First, some malware use the
DGA as a backup option in the malware’s communication
strategy, i.e., only used if the primary C&C domains fail.
This may not happen during the few minutes the samples
are executed in the sandbox. Second, for some malware like
TDSS/TDL4, the DGA is only used in speciﬁc components,
i.e., monetization through ad abuse. Thus, we may not see
DGA domains in our traces because the malware samples have
not run long enough to be monetized.
Finally,
in our dataset we also observe ﬁve candidate
DGA families, not included in the DGArchive, which perform
large numbers of NXDomain queries and have random-looking
domains (fosniw, shiz, softpulse, upatre, wapomi).
VIII. SPAM RELATED MALWARE
A common way to monetize malware is as distributed
mechanism for sending spam. As discussed in Section III, we
excluded spam related malware from our analysis because it is
outside the scope of this work, and we did not wish to inﬂuence
our analysis with network activity that is characteristic of
typical spam behavior. Since there is already plenty of work
that studies spam in great detail, we provide the following
discussion only to provide more insight into the spam related
samples we excluded from our analysis.
Prior to ﬁltering, we identiﬁed a number of malware
samples in our dataset that appeared to be involved in spam
behavior. After gathering a set of domains used as MX
records or that were likely to be associated with mail related
activity, we built a collection of 405,742 malware samples that
contacted these domains. This collection represents malware
samples that were potentially involved in spamming activity.
As seen in Figure 10, we noticed that these samples could
be seen contacting hundreds to thousands of unique domains.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:25:08 UTC from IEEE Xplore.  Restrictions apply. 
al. [64] performed a large scale analysis of malware download-
ers and their network infrastructure. Using the analysis traces
of samples belonging to 23 downloader families, the authors
discovered that 20% of the C&C servers remain operable
long-term. In particular,
the authors identiﬁed 2,942 C&C
domains, which resolved to 861 IP addresses hosted in a
variety of different ASs. Moreover, they found that malware in-
frastructures regularly migrate among different domains, while
keeping a redundant presence in several different providers.
In our experiments we are not able to distinguish C&C from
other forms of malware trafﬁc. However, in Section VI we
discuss several characteristics of the hosting infrastructure of
the domains resolved by the samples in our dataset and we
found that some families use the same set of IP addresses for
very long periods of time. In particular, PUP seem to have
extremely stable infrastructures.
Wang et al. [75] built honeyclients to ﬁnd drive-by down-
load websites that exploit browser vulnerabilities. Similarly,
Moshchuk et al. [51] used honeyclients to crawl over 18 mil-
lion URLs, ﬁnding that 5.9% contained drive-by downloads.
Provos et al. [61] studied the prevalence of drive-by downloads
and the redirection chains leading to them, ﬁnding that 67%
of the malware distribution servers were hosted in China [60].
These papers shed light on other aspects of the malware
infrastructure, for instance by pointing out
that malicious
ﬁles are often hosted on multiple servers reachable by many
different URLs at the same time. While malware samples can
also occasionally contact infected web pages (e.g., to download
additional components) our study focuses on the domains
contacted by malware after a system has been infected and not
on their drive-by download infrastructure. In a study closer to
our work, Polychronakis et al. looked at the network behavior
of malware distributed by drive-by downloads [59] using light-
weight protocol responders. However, the authors focused on
the purpose of the network activity (e.g., reporting home, data
exﬁltration, or joining a botnet) more than on the infrastructure
and domains used by the malware authors. Active probing
techniques have been proposed to measure the size of the
server infrastructure for speciﬁc malware families [57], [79].
Another relevant
line of work studies rogue networks
and autonomous systems hosting unusually large amounts of
malicious activity. To this end, Fire [69] used approximately
one year of data from the Anubis system and Shue et al. [68]
a dataset collected over a period of one month.
More recently, researchers investigated the use of cloud
hosting providers as infrastructure for malware. These studies
were conducted either by performing some form of active
probing [56], [74] or by mining the information extracted from
dynamic analysis sandboxes [30]. In this last case, the authors
analyzed over 1M malware samples which connected to at
least one publicly routable address on the Amazon EC2 Cloud.
While this work did study network infrastructure, the results
were limited to the Amazon cloud and required a considerable
amount of manual analysis to separate and classify the different
types of communication. By using our larger datasets we were
able to conﬁrm this trend and observe a similar effect on
a more global scale, affecting multiple cloud providers - in
particular from 2014. We also found that PUP families are the
ones that rely the most on this type of stable infrastructure.
Fig. 10: Shows a histogram of the number of MD5s associated
with each spam related domain in our ﬁltering set.
Rank
Samples
82.0 K
1.7 K
1.2 K
953
446
171
58
54
23.6 K
523
38
58
1.3 K
21
35
88
18
85
13
44
15
19
195
10
2
112.7 K
Ratio
MX
72.8
6.0 M
2047.2
3.5 M
928.2
1.1 M
423.2
403.3 K
870.1
388.0 K
2183.0
373.3 K
1734.0
100.6 K
1702.5
92.0 K
3.7
86.2 K
156.1
81.6 K
1662.2
63.7 K
1045.2
60.6 K
44.6
57.0 K
2149.0
45.1 K
1276.2
44.7 K
481.7
42.4 K
2115.8
38.1 K
422.4
35.9 K
2677.8
34.8 K
732.9
32.2 K
1992.4
29.9 K
1367.5
26.0 K
127.5
24.8 K
23.5 K
2355.2
21.6 K 10786.0
113.3
12.8 M
upatre
zusy
sality
tofsee
slym
agentb
tedroo
glupteba
Family
1 mydoom
hlux
2
zbot
3
fareit
4
5
kelihos
6 winlock
7
8
9
10
11
12
13
14
15 mikey
16
17
18
19
20 waledac
pwszbot
21
ceeinject
22
dorifel
23
zboter
24
25
staser
Top 25
bredolab
vblv
yakes
tinba
TABLE VI: Top 25 spam families (ﬁltered) ranked by number
of MX lookups.
IX. RELATED WORK
This work spans a number of different research areas each
with a wealth of prior work. Therefore, this related work puts
our research into context and also provide comparisons, where
possible, with existing work.
A. Malware Infrastructure
A number of works have studied the malicious infras-
tructure used to distribute malware. For example, Rossow et
801
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:25:08 UTC from IEEE Xplore.  Restrictions apply. 
B. PUP Infrastructure
D. Internet Reputation
Recent work has studied the prevalence of PUP [38], [72],
its distribution through pay-per-install (PPI) services [37], [73],
and its detection [40], [41]. Thomas et al. [72] showed that
ad-injectors affect 5% of unique daily IP addresses accessing
Google. They also measured that Google’s Safe Browsing
generates three times as many detections for PUP as for
malware [73]. Kotzias et al. measured that 54% of 3.9 M
hosts they examined had PUP installed [37] and that PUP
dominates so-called malware feeds [38]. Kwon et al. detect
PUP and malware distribution using graph-based approaches
leveraging machine learning [40] and temporal properties [41].
While some of these works explore PUP-related domains, none
of them analyze properties of the PUP domain and server
infrastructure. Most related are the categorization of the top
15,000 pages driving trafﬁc to PPI downloaders by Thomas
et al. [73] and the analysis by Kotzias et al. [37] of the
top 20 e2LDs from where PUP is downloaded. Compared to
our work, those analyses cover different time periods, only a
fraction of PUP domains, and more importantly do not explore
infrastructure properties such as PUP domain lifetime and
hosting. In summary, we believe we are ﬁrst to analyze the
properties of the PUP domain and server infrastructure.
C. Longitudinal Malware Studies
While our study focuses exclusively on the network infras-
tructure, other researchers investigated the behavior extracted
from dynamic analysis sandboxes to study other characteristics
of malware samples.
One of the ﬁrst attempts in this direction was performed by
Bayer et al. [23] using almost 1M samples collected until 2009
by the Anubis platform. Interestingly, in this early study the
authors reported that only 47.3% of the samples that showed
some network activity also performed a DNS query—which
succeeded in over 90% of the cases. Lindorfer et al. [44] per-
formed a similar experiment focusing on the Android malware
landscape. In this case, the authors reported that 99.91% of
Android malware performed DNS queries, with roughly one
third failing to resolve—suggesting an increasing adoption of
domain generation algorithms (DGAs). While these studies
provided interesting data points, they were performed at a
distance of ﬁve years on datasets over 25 times smaller than
the one used in this paper.
Several other papers have analyzed the use of DGAs, which
can be used by botnets to bypass domain blacklists. Kolbitsch
et al. [36] used binary code reuse [26] techniques to extract the
DGA of the Conﬁcker.A botnet and use it to compute the set
of domains used on a given date. A related reverse-engineering
approach was used by Plohmann et al. [58] to perform a
large-scale analysis of DGAs used in malware. A different
approach to detect and analyze DGAs is Pleiades [20], which
monitors unsuccessful DNS resolution requests from recursive
DNS servers in large networks. Our experiments conﬁrm the
wide use of DGA, and ﬁnd that up to two thirds (67%) of
the fully qualiﬁed domain names queried by malware failed to
resolve to a valid address.
Network level analysis of malicious behavior offers a com-
plementary means of characterizing and mitigating malware.
For example, a popular method of preventing or limiting the
spread of malware is the use of Internet blacklists. IP blacklists
provide a list of known bad actors in the form of IP addresses
which network operators can subsequently block; however,
the use of DNS to build malicious network infrastructure has
grown due to its resilience against IP blacklisting [65], [67].
Consequently, a signiﬁcant amount of work has focused
on analyzing network abuse at
the DNS level [27], [31],
[33], [35], [45], [76]. This has led to the creation of systems