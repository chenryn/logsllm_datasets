Password
如果把Accout属性设置为ServiceAccout.User，则Username属
性和Password属性指出服务在哪一个用户账户下运行
Account
使用这个属性，可以指定服务的账户类型
HelpText
HelpText是只读属性，它返回的帮助文本用于设置用户名和
密码
用于运行服务的进程可以用ServiceProcessInstaller类的Accout属性指定，其值可以是
ServiceAccout枚举的任意值。Account属性的不同值如表39-2所示。
表39-2
值
描述
LocalSystem
设置这个值可以指定服务在本地系统上使用权限很高的用户
账户，并用作网络上的计算机
NetworkService
类似于LocalSystem，这个值指定把计算机的证书传递给远
程服务器。但与LocalSystem不同，这种服务可以以非授权
用户的身份登录本地系统。顾名思义，这个账户只能用于需
要从网络上获得资源的服务
LocalService
这个账户类型给任意远程服务器提供计算机的匿名证书，其
本地权限与NetworkService相同
User
把Accout属性设置为ServiceAccout.User，表示可以指定应从
服务中使用的账户
ServiceInstaller是每一个服务都需要的类，这个类的属性可以用于进程中的每一个服
务，其属性有StartType、DisplayName、ServiceName和ServicesDependentOn，如表39-3所
示。
表39-3
属性
描述
StartType
StartType属性指出服务是手动启动还是自动启动。它的值可
以是：ServiceStartMode.Automatic、
ServiceStartMode.Manual、ServiceStartMode.Disabled。如果
使用ServiceStartMode.Disabled，服务就不能启动。这个选
项可用于不应在系统中启动的服务。例如，如果没有得到需
要的硬件控制器，就可以把该选项设置为Disabled
DelayedAutoStart
如果StartType属性没有设置为Automatic，就忽略这个属
图39-10
性。此时可以指定服务是否应在系统启动时不立即启动，而
是在以后启动
DisplayName
DisplayName属性是服务显示给用户的友好名称。这个名称
也由管理工具用于控制和监控服务
ServiceName
ServiceName属性是服务的名称。这个值必须与服务程序中
ServiceBase类的ServiceName属性一致。这个名称把
ServiceInstaller类的配置与需要的服务程序关联起来
ServicesDependentOn
指定必须在服务启动之前启动的一组服务。当服务启动时，
所有依赖的服务都自动启动，并且我们的服务也将启动
 注意： 
如果在ServiceBase的派生类中改变了服务的名称，则还必须修改
ServiceInstaller对象中ServiceName属性的值。
  注意： 在测试阶段，最好把StartType属性的值设置为Manual。这样，如果服
务因程序中的bug不能停止，就仍可以重新启动系统。如果把StartType属性的值设置为
Automatic，服务就会在重新启动系统时自动启动！当确信没有问题时，可以在以后改
变这个配置。
3. ServiceInstallerDialog类
System.ServiceProcess.Design名称空间中的另一个安装程序类是
ServiceInstallerDialog。在安装过程中，如果希望系统管理员输入该服务应使用的账户（具
体方法是指定用户名和密码），就可以使用这个类。
如果把ServiceProcessInstaller类的
Account属性设置为ServiceAccount.User,
Username和Password属性设置为null，则在安
装时将自动显示如图39-10所示的Set Service
Login对话框。此时，也可以取消安装。
4. installutil
在把安装程序类添加到项目中之后，就可以使用installutil.exe实用程序安装和卸载服
务。这个实用程序可以用于安装包含Installer类的所有程序集。installutil.exe实用程序调用
Installer派生类的Installer（）方法进行安装，调用UnInstaller（）方法进行卸载。
安装和卸载示例服务的命令分别是：
    installutil quoteservice.exe
    installutil /u quoteservice.exe
  注意： 
如果安装失败了，一定要检查安装日志文件InstallUtil.InstallLog和
. InstallLog。通常，在安装日志文件中可以发现一些非常有用的信息，例
如：“指定的服务已存在”。
在成功地安装服务后，就可以从Services 
MMC中手动启动服务，并启动客户端应用
程序。
39.4 Windows服务的监控和控制
可以使用Services MMC管理单元对服务进行监控和控制。Services MMC管理单元是
Computer Management管理工具的一部分。每个Windows操作系统还有一个命令行实用程
序net.exe，使用这个程序可以控制服务。sc.exe是另一个Windows命令行实用程序，它的
功能比net.exe更强大。还可以使用Visual Studio Server Explorer直接控制服务。本节将创建
一个小型的Windows应用程序，它利用System.ServiceProcess.ServiceController类监控和控
制服务。
39.4.1 MMC管理单元
如图39-11所示，使用MMC的Services管理单元可以查看所有服务的状态，也可以把
停止、启用或禁用服务的控制请求发送给服务，并改变它们的配置。Services管理单元既
是服务控制程序，又是服务配置程序。
图39-11
双击QuoteService，打开如图39-12所示的Quote Service Properties对话框。在这个对话
框中，可以看到服务的名称、描述、可执行文件的路径、启动类型和状态。目前服务已启
动。使用这个对话框中的Log On选项卡，可以改变服务进程的账户。
图39-12
39.4.2 net.exe实用程序
Services管理单元使用起来很简单，但是系统管理员不能使其自动化，原因是它不能
用在管理脚本中。要通过脚本实现的工具自动控制服务，可以用命令行实用程序net.exe来
完成。net start命令显示所有正在运行的服务，net start servicename启动服务，net stop
servicename向服务发送停止请求。此外使用net pause和net continue可以暂停和继续服务
（当然，它们只有在服务允许的情况下才能使用）。
39.4.3 sc.exe实用程序
sc.exe是不太出名的一个实用程序，它作为操作系统的一部分发布。sc.exe是管理服务
的一个很有用的工具。与net.exe实用程序相比，sc.exe实用程序的功能更加强大。使用
sc.exe实用程序，可以检查服务的实际状态，或者配置、删除以及添加服务。当服务的卸
载程序不能正常工作时，可以使用sc.exe实用程序卸载服务。
39.4.4 Visual Studio Server Explorer
在Visual Studio中，要使用Server Explorer监控服务，应在树型视图中选择Services节
点，再选择计算机，最后选择Services元素，就可以看到所有服务的状态，如图39-13所
示。选择一个服务，就可以看到服务的属性。
图39-13
39.4.5 编写自定义ServiceController类
下面创建一个小的Windows应用程序，该应用程序使用ServiceController类监控和控制
Windows服务。
创建一个WPF应用程序，其用户界面如图39-14所示。这个应用程序的主窗口包含一
个显示所有服务的列表框、4个文本框（分别用于显示服务的显示名称、状态、类型和名
称）和6个按钮，其中4个按钮用于发送控制事件，一个按钮用于刷新列表，最后一个按钮
用于退出应用程序。
图39-14
  注意： WPF的介绍详见第29到第35章。
1．服务的监控
使用ServiceController类，可以获取每一个服务的相关信息。表39-4列出了
ServiceController类的属性。
表39-4
属性
描述
CanPauseAndContinue
如果暂停和继续服务的请求可以发送给服务，则这个属性返
回true
CanShutdown
如果服务有用于关闭系统的处理程序，则它的值为true
CanStop
如果服务是可以停止的，则它的值为true
DependentServices
它返回一个依赖服务的集合。如果停止服务，则所有依赖的
服务都预先停止
ServicesDependentOn
返回这个服务所依赖的服务集合
DisplayName
指定服务应该显示的名称
MachineName
指定运行服务的计算机名
ServiceName
指定服务的名称
ServiceType
指定服务的类型。服务可以运行在共享的进程中，在共享的
进程中，多个服务使用同一进程（Win32ShareProcess）。
此外，服务也可以运行在只包含一个服务的进程
（Win32OwnProcess）中。如果服务可以与桌面交互，其类
型就是InteractiveProcess
Status
指定服务的状态。状态可以是正在运行、停止、暂停或处于
某些中间模式（如启动待决、停止待决）等。状态值在
ServiceControllerStatus枚举中定义
在示例应用程序中，使用DisplayName、ServiceName、ServiceType和Status属性显示
服务信息。此外，CanPauseAndContinue和CanStop属性用于启用和禁用Pause、Continue和
Stop按钮。
为了得到用户界面的所有必要信息，创建一个ServiceControllerInfo类。这个类可以用
于数据绑定，并提供状态信息、服务名称、服务类型，以及哪些控制服务的按钮应启用或
禁用的信息。
  注意： 因为使用了System.ServiceProcess.ServiceController类，所以必须引用
System. ServiceProcess程序集。
ServiceControllerInfo类包含一个嵌入的ServiceController类，用ServiceControllerInfo类
的构造函数设置它。还有一个只读属性Controller，它用来访问嵌入的ServiceController类
（代码文件ServiceControlWPF/ServiceControllerInfo.cs）。
    public class ServiceControllerInfo
    {
      public ServiceControllerInfo(ServiceController controller)
      {
        Controller = controller;
      }
      public ServiceController Controller { get; }
      // etc.
    }
为了显示服务的当前信息，可以使用ServiceControllerInfo类的只读属性
DisplayName、ServiceName、ServiceTypeName和ServiceStatusName。DisplayName和
ServiceName属性的实现代码只访问底层类ServiceController的DisplayName和ServiceName
属性。对于ServiceTypeName和ServiceStatusName属性的实现代码，需要完成更多的工
作：服务的状态和类型不太容易返回，因为要显示一个字符串，而不是只显示
ServiceController类返回的数字。ServiceTypeName属性返回一个表示服务类型的字符串。
从ServiceController. 
ServiceType属性中得到的ServiceType代表一组标记，使用按位OR运
算符，可以把这组标记组合在一起。InteractiveProcess位可以与Win32OwnProcess和
Win32ShareProcess一起设置。首先，在检查其他值之前，一定要先检查以前是否设置过
Interactive-Process位。使用这些服务，返回的字符串将是“Win32 Service Process”或“Win32
Shared Process”（代码文件ServiceControlWPF/ServiceControllerInfo.cs）。
      public class ServiceControllerInfo
      {
        // etc.
        public string ServiceTypeName
        {
          get
          {
          ServiceType type = controller.ServiceType;
          string serviceTypeName = "";
          if ((type & ServiceType.InteractiveProcess) ! = 0)
          {
            serviceTypeName = "Interactive ";
            type -= ServiceType.InteractiveProcess;
          }
          switch (type)
          {
            case ServiceType.Adapter:
              serviceTypeName += "Adapter";
              break;
            case ServiceType.FileSystemDriver:
            case ServiceType.KernelDriver:
            case ServiceType.RecognizerDriver:
              serviceTypeName += "Driver";
              break;
            case ServiceType.Win32OwnProcess:
              serviceTypeName += "Win32 Service Process";
              break;
            case ServiceType.Win32ShareProcess:
              serviceTypeName += "Win32 Shared Process";
              break;
            default:
              serviceTypeName += "unknown type " + type.ToString();
              break;
          }
          return serviceTypeName;
          }
        }
        public string ServiceStatusName
        {
          get
          {
          switch (Controller.Status)
          {
            case ServiceControllerStatus.ContinuePending:
              return "Continue Pending";
            case ServiceControllerStatus.Paused:
              return "Paused";
            case ServiceControllerStatus.PausePending:
              return "Pause Pending";
            case ServiceControllerStatus.StartPending:
              return "Start Pending";
            case ServiceControllerStatus.Running:
              return "Running";
            case ServiceControllerStatus.Stopped:
              return "Stopped";
            case ServiceControllerStatus.StopPending:
              return "Stop Pending";
            default:
              return "Unknown status";
          }
          }
        }
        public string DisplayName => Controller.DisplayName;
        public string ServiceName => Controller.ServiceName;
        // etc.
      }
ServiceControllerInfo类还有一些属性可以启用Start、Stop、Pause和Continue按钮：
EnableStart、EnableStop、EnablePause和EnableContinue，这些属性根据服务的当前状态返
回一个布尔值（代码文件ServiceControlWPF/ServiceControllerInfo.cs）。
    public class ServiceControllerInfo
    {
      // etc.
      public bool EnableStart => Controller.Status == ServiceControllerStatus.Sto
pped;
      public bool EnableStop => Controller.Status == ServiceControllerStatus.Runn
ing;
      public bool EnablePause =>
        Controller.Status == ServiceControllerStatus.Running &&
              Controller.CanPauseAndContinue;
      public bool EnableContinue => Controller.Status == ServiceControllerStatus.
Paused;
    }
在ServiceControlWindow类中，RefreshServiceList（）方法使用
ServiceController.GetServices（）方法获取在列表框中显示的所有服务。GetServices（）
方法返回一个ServiceController实例的数组，它们表示在操作系统上安装的所有Windows服
务。ServiceController类还有一个静态方法GetDevices（），该方法返回一个表示所有设备
驱动程序的ServiceController数组。返回的数组利用扩展方法OrderBy（）按照
DisplayName属性来排序，这是传递给OrderBy（）方法的lambda表达式定义的属性。使用
Select（）方法，将ServiceController实例转换为ServiceControllerInfo类型。在下面的代码
中传递了一个lambda表达式，它调用每个ServiceController对象的ServiceControllerInfo（）
构造函数。最后，将ServiceControllerInfo数组赋予窗口的DataContext属性，进行数据绑定
（代码文件ServiceControlWPF/MainWindow.xaml.cs）。
    protected void RefreshServiceList()
    {
      this.DataContext = ServiceController.GetServices().