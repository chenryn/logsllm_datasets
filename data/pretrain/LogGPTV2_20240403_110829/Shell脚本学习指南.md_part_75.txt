用那样！
www.TopSage.com
---
## Page 439
安全的Shell脚本：起点
427
bash维护工程师ChetRamey提供了下列代码的开场白，给那些需要更多安全性的Shell
.com
脚本使用：
# Reset IFs. Even though ksh doesn’t import IFS from the environment,
 SENV could set it. This uses special bash and ksh93 notation,
# not in POSIx.
￥ Make sure unalias is not a function, since it's a regular built-in.
 unset is a special built-in, so it will be found before functions.
unset -f unalias
：
 Unset all aliases and quote unalias so it's not alias-expanded.
\unalias -a
 Make sure command is not a function, since it's a regular built-in.
 unset is a special built-in, so it wil1 be found before functions,
unset -f command
 Get a reliable path prefix, handling case where getconf is not
SYSPATH=*$ (command -p getconf PATH 2>/dev/nu11)*
#available.
if [f -2 *$SYSPATH* 1l; then
SYSPATH=*/usr/bin:/bin*
+ pick your poison
fi
PATH=*SSYSPATH:SPATH*
这段代码使用了许多非POSIX的扩展，这在14.3节里已说明。
15.2限制性Shell
限制性Shell（restrictedShell）的设计，是将用户置于严格限制文件写入与移动的环境
中，用户多半是使用访客（guest）账号。POSIX井未定义提供限制性Shell的环境，“因
为它并未提供历史文件中所暗示的安全性限制”，然而，ksh93与bash两者都提供这一
功能，我们将在此介绍它们。
当被引用为rksh时（或使用-r选项）时，ksh93即为限制性Shell。你可以让用户的
登录受限制，方法是放置rksh的完整路径名称在用户的/etc/passwd里，ksh93可
执行文件必须连接到名为rksh之处，以执行此操作。
限制性ksh93的特定限制不允许用户做下列操作。这些功能有部分是仅ksh93适用，要
了解更多信息，可见参考书目中的《LearningtheKorn Shell》：
变更工作目录：cd是没有作用的。如果你尝试使用它，会收到错误信息ksh：cd：
restricted,
www.TopSage.com
---
## Page 440
428
第15章
不允许重定向输出到文件：重定向运算符>、>1、<>，与>>都不被允许。这点不
包含exec的使用。
指定新值给环境变量ENV、FPATH、PATH或SHELL，或试图以tyDeset改变它们的
属性。
标明任何带有斜杠（/）的命令路径名称，Shell仅执行在SPATH里找到的命令。
使用builtin命令，增加新的内置命令。
类似于ksh93的是：当引用为rbash时，bash即扮演限制性Shell的角色，而bash可
执行文件必须连接到rbash，以执行此任务，bash的限制性运算列表和ksh93很类
似。下面列表里的功能，有部分是bash所特有的（参考自bash（I）而来），不过我们不
在本书多作介绍。要了解进一步信息，见bash（1）手册页：
以cd切换目录。
设置或解除设置SHELL、PATH、ENV或BASH_ENV的值
标明含有/的命令名称。
标明含有/的文件名，作为，（点号）内置命令的一个参数。
在内置命令hash里使用-p选项，指定含有/的文件名作为参数。
·
在启动时，自Shell环境导出函数定义。
在启动时，自ShelI环境解析SHELLOPTS的值。
使用>、>1、<>、>&、&>，与>>重定向运算符，重定向输出
使用exec内置命令，用另一个命令取代Shell。
以内置命令enable搭配-f或-d选项，增加或剩除内置命令。
·
使用enable内置命令，启用已停用的Shell内置命令。
为内置命令conmand标明-p选项。
使用set+r或set+orestricted关闭限制性模式，
对这两个Shell而言，这些限制都是在用户的.profile与环境文件被执行之后才生效。
即限制性Shel下的用户环境金被设置在·profile里，这让系统管理者可以适当地配置
环境。
要防止用户覆盖~/.profile，只把文件权限设置为用户只读是不够的，根目录不应该
被用户写入，或是~/.profile里的命令也不应该cd到不同的目录下。
www.TopSage.com
---
## Page 441
安全的Shell脚本：起点
429
建立这类环境常用的两种方式便是设置“安全”命令的目录，然后让该目录为PATH里
的唯一一个，以及设置命令选单。其中，用户没有离开Shell是不能跳离的。无论如何，
请确定SPATH下的任何目录中没有其他Shell；否则，用户只要执行该Shell，就能避开
先前列的限制。同时，也要确认SPATH下没有任何程序允许用户起始Shell，像是来自
ed、ex或vi文本编辑器的“Shell转义（Shell escape）”。
警告：虽然自原始的Version7BourneShell起，便拥有展制性Shell的功能，但被使用的很少，
因为设置一个可用又正确的限制性环境其实并不容易。
15.3
特洛伊木马
特洛伊木马是看起来无害，有时甚至会误以为它很有用，但却隐藏危险的东西。
想想下面这样的情况：用户JohnQ.（登录名称为jprog）是一个顶尖的程序设计师，拥
有一些个人程序，就放在Jprog/bin里，这个目录出现在Jprog/.profile里PATH
变量的第一个，因为他是这样优秀的程序设计师，不久便被提升为系统管理者。
这对他而言是一个全新的领域，而John在不注意的情况下，仍将它的bin目录保留子
其他用户可以写入，这时有个居心不良的W.M.先生，建立了这样的Shell脚本，名为
grep，放在John的bin目录里：
/bin/grep *$e*
case $(whoami) in
危险的提作就放在这！
检查有效的用户ID名称
root)
nasty stuff here
rm */5prog/bin/grep
隐医罪行！
esac
本质上，当jprog以自已的身份在做事时，这个脚本不会有任何危险。问题出在他使用
了su命令之后。8u命令可以让一般用户切换到不同的身份。通常用法是：让一般用户
成为root（当然，前提是这个用户必须知道密码）。接下来，su会使用它继承的任何
PATH设置（注2)。在这里的情况是：PATH包括了jprog/bin，现在，当Jprog以
root身份工作，执行grep时，确实执行的是他bin目录下的特洛伊木马版本。这个
版本还是会执行真正的grep，所以jprog仍能得到他要的结果。但更重要的是，接下
来脚本还会以root身份执行一连申nasty stufhere处所指定的命令。即该UNIX会让
脚本为所欲为。当一切操作完成，特洛伊木马也删除，不留任何证据。
注2：使用su-uSer如换用户，就会像用户登录一般、可防止导入已存在的PATH。
www.TopSage.com
---
## Page 442
430
第15双
可写入的bin目录为特洛伊木马散开了大门，如同在PATH里具有点号，（想想看，要）Im
是root执行ca切换到含有特洛伊脚本的目录中，而且点号是在root的PATH里且位
置又先于系统目录时，会发生什么事）。让可写入的Shell脚本放在任何bin目录下更是
另一个大门.就好像你晚上会关闭并锁上家门一样，你应该确定关上系统上的任何大门。
15.4为Shell脚本设置setuid：坏主意
UNIX安全性上的问题有很多是出在它的一个文件属性上，称为setuid（设置用户ID）
位。这是一个特殊权限位：当一个可执行文件将它打开时，身份会立即转换为与文件拥
有者相同的一个有效用户ID。这个有效的用户ID与进程真正的用户ID并不同，UNIX
以进程的有效用户ID进行权限检测。
假设你编写了一个游戏程序，可保留私有分数记录文件，显示前15名系统里的玩家，你
不希望这个分数文件任何人都能写人，因为这么一来任何人只要动点手脚，就能让自已
成为高分的玩家。如果让你的游戏setuid为你的用户ID，则只有你自已拥有的游戏程序
可以更新文件，其他人都不行（游我程序可以通过签看它的真实用户D来知道谁在执行
它，并使用它来决定登录名称）。
setuid工具对游戏与分数文件来说是一个不错的功能，如果设为root时，它就可能变
得相当危险。将程序setuid为root，可便于管理者处理需要root权限的文件（例如配
置打印机）。为了设置文件的setuid位，只要输入chmodu+Sfilename即可，对root
拥有的文件设置setuid是很危险的事，所以建议不要在chownrootfile后执行chmod
u+sfile,
类似的工具程序，在组层级上也有，也就是setgid（设置组ID）.chmodg+Sfilename
即可打开setgid权限。当你执行ls-1时，在setuid与setgid的文件上，会出现s权
限模式，取代原有的x。例如-rws--S--x的文件指的便是拥有者可读取与写人、任何
人可执行，且setuid与setgid位都已设置（八进制模式为6711）。
现代系统管理的智慧认为，设置setuid与setgid的Shell脚本是一个可怕的想法。尤其在
CShell下更受影响，因为它的.cshrc环境文件有太多可供破坏的地方。而且，它也有
很多方式可以将setuid的Shell脚本转化成交互式的Shell，而且是以xoot的有效用户
ID.这就是骇客（cracker）的希望：拥有root执行任何命令的能力。我们从hrtp://
www.faqs.org/faqs/unix-faq/faq/part4/section-7.html借来一个例子：
好，假设有个脚本叫作/etc/setuid_script，一开始是这样；
#1/bin/sh
现在我们来看看假设执行了下面的命令，会发生什么事：
www.TopSage.com
---
## Page 443
安全的Shell脚本：起点
431
$ ed /tmp
$ 1n /etc/setuid_script -1
$ PATH=,
$ -1
我们知道，最后一个命令将重新安排成：
/bin/sh -1
因此，此命令会给我们一个交谈模式的Shell，setuid为该脚本的拥有者！幸好这个安全性黑润可以通
过。将第一行指定为：
1/bin/sh -
解决掉。将-置于选项列表的结尾：则下一个参数-1将被视为文件名，正常让命令读取之。
正因为如此，POSIX才容许在/bin/sh的选项结尾处使用单一-字符。
注意：setuid的Shell脚本与一个setuid Shell之间的差异必须特别留意，后者为Shell可执行版的
副本，它是属于root并应用setuid位。以上一节的特洛伊木马为例，假定nasty staff here
部分是这样的：
cp /bin/sh ~badguy/bin/my1s
sAu/utq/Anpeq-noox unouo
chmod u+s ~badguy,/bin/my1s
还记得，这段代码以root身份执行，所以它是可以运作的。当心怀不轨的badguy执行
了my1s，它是一个机器码的可执行文件，且应用setuid位。待Shell再回到root手中时，
系统的安全性便荡然无存了。
事实上，setuid与setgid的Shell脚本所带来的危险，在现行UNIX系统上都必须特别留
意，包括商用UNIX系统与自由软件（派生自BSD4.4与GNU/Linux），都停用了Shell
脚本上的setuid与setgid位。即便你在文件里应用这些位，操作系统也不会有任何操作
(注3)。
我们也发现现在的很多系统加载时可选择是否针对整个文件系统停用setuid/setgid位。
这在网络式加载的文件系统上，还有那些可删除式媒体上，例如软驱与光驱，绝对是件
好事。
15.5ksh93与特权模式
注 31
MacOSX与最新的OpenBSD版本是我们发现的两个州外，如果你在达美系统下做事。
请特到留意！我们发现Solaris9只有在文件拥有者非root时，才执行setuid的操作。
www.TopSage.com
---
## Page 444
432
第15章
（set-Oprivileged或set-p），无论何时当Shell执行之脚本已设置setuid位时，
Shell便会自动输入它：也就是说，当有效用户ID与实际用户ID不同时。
在特权模式下，引用一个setuid的KornShell脚本时，Shell会执行/etc/suid_profile
文件，此文件应写成限制setuid Shell脚本，一如限制性Shell那样。至少，它会将PATH
设为只读（typeset-TPATH或zeadonlyPATH)，然后设置它为一到多个“安全的”
目录。再说一次，这是用以避开引用时的所有陷阱。
因为特权模式是选用的，所以你也可使用set+oprivileged（或set+p）将它关
闭。然而，这对潜在的系统验客产生不了帮助：Shell会自动地将它的有效用户ID切换
为相同的真实用户ID。也就是说，当你关闭特权模式时，同时也关闭了setuid。
除特权模式外，ksh另提供了一个特殊的“代理”程序，会执行setuid的Shell脚本（或
可执行但不可读取的Shell脚本）
为此，脚本的开头不应以#！/bin/ksh起始。当程序被引用时，ksh会试图以正规二
进制可执行文件的方式执行程序。当操作系统无法执行脚本（因为它不是二进制的，及
因为它没有#！标明的解译器名称）时，ksh会认为它是脚本，及使用脚本的名称与它
的参数引l用/etc/suid_exec。除此之外，它还会安排传递一个认证“token”给/etc/
suid_exec，指出脚本的有效用户与组ID，/etc/suid_exec会验证执行脚本是否是安
全的，再安排以该脚本的适当真实用户与组ID引用ksh。
虽然结合特权模式与/etc/suid_exec可以建免很多setuid脚本上的攻击，但编写一个
可供setuid的安全脚本：其实是一门很大的学间，需要很多的知识与经验，应小心对待。
虽然setuid的Shell脚本在现今系统上不能工作，但有时特权模式也是很好用的。特别
是它已广泛应用在第三方所提供的程序sudo上，该程序引用自网页上的说法，允许系
统管理者给予特定用户（或一群用户），以root或另一个用户身份执行部分（或所有）
命令的能力，其官方网站为：http://www.courtesan.com/sudo.系统管理者如要了解执行
管理性工作的环境，只要执行audo/bin/ksh-p即可。
15.6小结
编写安全的Shell脚本也是保全UNIX系统安全的一环。本章探讨不过是皮毛，我们建
全性Shell即本的提示，这些都是UNIX安全性领域的专家所认可的。
接下来介绍的是限制性Shell，它可以停用许多具潜在危险的操作，其环境构键于用户的
www.TopSage.com
---
## Page 445
安全的Shell脚本：起点
.profile文件里，该文件会在限制性用户登录时执行。实际上，限制性Shell其实很难COIm1
正确地设置与使用，我们建议你找其他方式设置限制性环境。
特洛伊木马是看似无害但实际上会对系统产生攻击的程序。我们带你看过几种特洛伊木
马的建立方式，但其实还有更多。
设置setuid的Shel1脚本不是个好主意，几乎所有近期的UNIX系统都已停用它，因为很
难关掉它所打开的安全性漏洞。你必须花时间仔细确认你的系统是否已停用它们，如果
没有，请定期查找系统里是否还有这类文件。
最后，我们简短地带过KornShell的特权模式，它的目的是在解决诸多与Shell脚本相
关的安全性议题。
www.TopSage.com
---
## Page 446
计算机精品学习资料大放送
软考官方指定教材及同步辅导书下载|软考历年真是解析与答案
软考视频|考试机构|考试时间安排
Java一览无余：Java视频教程|JavaSE|JavaEE
.Net技术精品资料下载汇总：ASPNET篇
.Net技术精品资料下载汇总：C#语言篇
.Net技术精品资料下载汇总：VB.NET篇