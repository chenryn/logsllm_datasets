consider XK as a variable within the superpoly
pS(I) of degree D;
endif
until all n secret variables kis have been considered;
Figure 1: Finding secret variables within a super-
poly equation
∑
w2CI[K
to the monomial in which its superpoly pS(I) is of degree
D, and all public variables vis with i /2 I are (cid:12)xed to 0 or
1. For each assignment of XK , we choose κ sets of vector
x 2 f0, 1gn(cid:0)1 representing samples of n (cid:0) 1 secret variables
kis with i /2 K independently and uniformly at random, and
verify that XK (or similarly the secret variable ki that is as-
signed to XK ) exists as a variable in the superpoly pS(I) if
p(I[K)[x] =
pjw[x] = 1 for at least an instance
vector x due to Lemma 1. This procedure is shown by Al-
gorithm 1 in Fig. 1.
Having the set of secret variables kis with i 2 S of the
nonlinear superpoly pS(I) of degree D enables the attacker
to derive the nonlinear equation over the secret variables by
(cid:12)nding all terms of degrees 0, 1,(cid:1)(cid:1)(cid:1) , D within the superpoly
equation.
Lemma 2. The monomial tI (cf. equation (1)) is a term
in polynomial p if and only if (cid:12)xing all variables xi /2 tI to
pjw = 1. On the other hand, the
zero results in pI =
monomial XK (cf. equation (3)) is a term in the superpoly
pS(I) if and only if (cid:12)xing all variables xi /2 tI (cid:1) XK to zero
results in p(I[K) =
Proof.
If tI is a term in the polynomial p, assigning all
xi /2 tI to zero will make tI become the only remaining term
in p; that is, the value of the superpoly pS(I) is evaluated
to 1. From the fact that pI = pS(I) due to Theorem 1, we
have pI = 1 which shows the existence of tI as a term in
p. On the other hand, if XK is a term in the superpoly
pS(I), assigning all variables xi /2 tI (cid:1) XK to zero will make
tI (cid:1) XK become the only remaining term in the polynomial
p. Hence, the value of the superpoly pS(I[K) of tI (cid:1) XK is
evaluated to 1. Since p(I[K) = pS(I[K) (cf. Sec. 3.1) then
p(I[K) = 1, which shows the existence of tI (cid:1) XK as a term
in p. Hence, the existence of tI (cid:1) XK as a term in p implies
that XK exists as a term in the superpoly pS(I) because XK
(factored out from the superpoly pS(I)) is a subterm of the
term tI (cid:1) XK .
∑
∑
w2CI[K
pjw = 1.
w2CI
Algorithm 2.
INPUT : S; // a set of indexes for secret variables kis in
a superpoly pS(I)
D; // the degree of the superpoly pS(I)
T ; // a set of cube indexes for monomials of
degree 1 until D over kis with i 2 S
N = jSj; // the number of secret variables kis
in pS(I)
tI ; // in which deg(pS(I)) = D
r = 0; // the initial size for terms in pS(I)
OUTPUT: pS(I)s; // the derived low degree nonlinear
repeat
equations
increase the size r by 1;
repeat
assign XK with a monomial from T of size r which
has not been considered;
assign all variables vi, ki /2 tI (cid:1) XK to 0s;
if p(I[K) =
pjw = 1 then
∑
w2CI[K
write XK as a term in superpoly pS(I);
endif
r ) terms have been considered;
until all (N
until r = D;
assign public variables vis with i /2 I and secret
variables k1,(cid:1)(cid:1)(cid:1) , kn to 0s;
if pI =
pjw = 1 then
∑
w2CI
write ‘1’ as a constant in superpoly pS(I);
endif
Figure 2: Deriving a nonlinear superpoly equation
of degree D
∑
Suppose N = jSj is the number of secret variables kis
with i 2 S of the superpoly pS(I) of degree D. To derive
pS(I), (cid:12)rstly we assign the subterm XK one at a time with a
monomial indexed by a subset K 2 T where T is a set of cube
indexes of monomials constructed from all combinations of
kis from degree 1 until degree D with i 2 S. For example,
if S = f1, 2, 3g and the degree of the superpoly pS(I) is 2,
then T = ff1g,f2g,f3g,f1, 2g,f1, 3g,f2, 3gg.
In each assignment, all vi, ki /2 tI (cid:1) XK are set to zero.
Then to verify the existence of the monomial XK 2 T as a
term in pS(I), we compute p(I[K) =
pjw. If the
value of p(I[K) is equal to 1, then with probability 1, XK is
a term in the superpoly pS(I) due to Lemma 2. Finally, we
determine whether there also exists a constant term (i.e. a
term of degree 0) in the superpoly pS(I) by setting all public
variables vis for i /2 I and all secret variables k1,(cid:1)(cid:1)(cid:1) , kn to
pjw. Similarly, if the value
zero, and computing pI =
of pI is equal to 1, then with probability 1, a constant term
exists within the superpoly pS(I) due to Lemma 2. Thus, the
procedure for (cid:12)nding all terms in the nonlinear superpoly
pS(I) of degree D requires (N
D ) + 1 number
of computations. The procedure is shown by Algorithm 2 in
Fig. 2. The total complexity to deduce a nonlinear equation
of degree D using Algorithm 1 and Algorithm 2 is
2 ) + ... + (N
w2CI[K
1 ) + (N
∑
w2CI
D∑
κn2d(cid:0)D+1 +
2d(cid:0)D+i(N
i )
i=0
300
Figure 3: A top-level algorithmic description of 31-
round PRESENT encryption.
Table 1: Speci(cid:12)cation of PRESENT S-box.
i
1
S[i] C 5
3
0
4
2
6 B 9
7
5
0 A D
9 A B C D E F
2
8
3 E F
6
8
1
4
7
i
S[i]
Online Phase. Once su(cid:14)ciently many equations in the se-
cret variables kis have been found, the preprocessing phase
is complete.
In the online phase, the attacker’s aim is to
(cid:12)nd the value of the right-hand side of each of the equation-
s (both linear and nonlinear ones) by summing the black
box polynomial p over the same set of tI s obtained during
the preprocessing phase. Now, the attacker can solve the
resultant system of equations, e.g. by using the standard
linearization method, a SAT solver [6], etc., to determine
the values of the secret variables.
4. A BRIEF DESCRIPTION OF THE PRE-
SENT BLOCK CIPHER
PRESENT [10] is a block cipher with a 64-bit block. The
recommended key length is 80 bits, but a 128-bit key variant
is also proposed. PRESENT produces a ciphertext after iter-
ating a Substitution-Permutation Network (SP-Network) 31
times. In each round, a 64-bit round key ki = κ63κ62 (cid:1)(cid:1)(cid:1) κ0,
for 1 (cid:20) i (cid:20) 32 is introduced to the current state b63 (cid:1)(cid:1)(cid:1) b0
using addRoundKey as follows:
bj ! bj (cid:8) κi
for 0 (cid:20) j (cid:20) 63. The round key K32 is used for post-
whitening after the (cid:12)nal round. The addition of round key
ki using the addRoundKey in each round always follows by
sBoxLayer (i.e. a nonlinear substitution layer) and pLayer
(i.e. a linear bitwise permutation). The graphical represen-
tation of PRESENT is shown in Fig. 3.
j
PRESENT uses a single 4-bit S-box S as shown in Table
1, which is applied 16 times in parallel in each round. The
4-bit nibble i at the input of an S-box is substituted by the
4-bit S[i] in output, i.e. S : F4
2 ! F4
2.
The pLayer which provide linear bitwise permutation is
shown in Table 2. During the permutation, each bit i of
addRoundKeyplaintextsBoxLayerpLayerciphertextkeyregisterupdategenerateRoundKeys()fori=1to31doaddRoundKey(STATE,Ki)sBoxLayer(STATE)pLayer(STATE)endforaddRoundKey(STATE,K32)sBoxLayerpLayerupdateaddRoundKeyTable 2: Speci(cid:12)cation of the PRESENT permuta-
tion layer.
5. SIDE CHANNEL CUBE ATTACK ON
PRESENT
i
P (i)
i
P (i)
i
P (i)
i
P (i)
i
P (i)
i
P (i)
i
P (i)
i
P (i)
0
0
8
2
16
4
24
6
32
8
40
10