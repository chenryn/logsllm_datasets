### 4. Weakness in Aliveness
When only "executing any steps of the protocol" is considered, aliveness can be achieved for the initiator (Aliveness_I) but not for the responder (Aliveness_R). This interpretation implies that the authentication of the initiator is relatively weak.

### 5. Automated Proofs in a Quantum Setting
With the basic model of IKEv2 established for the classical case in the previous section, we can now extend the proof to model deviations from the core protocol and move to a quantum setting.

Figure 2 shows the state machine presented earlier (see Figure 1) in a vertical form, with some possible extensions to the core protocol:
- On the right, COOKIE [20] (marked orange), used in the first phase of the key exchange to reuse parameters from previously established SAs, and EAP [14] (marked red), a special authentication protocol that changes the order in which the peers authenticate themselves.
- On the left (marked blue), the IKE_INTERMEDIATE extension [33] is illustrated. This is one of the most recently proposed extensions, drafted with the need for hybrid (quantum-safe) key exchanges in mind [ibid.]. It allows the IPsec-key exchange to support multiple key exchanges (as specified in draft [35]) and thus enables the use of strong post-quantum cryptography (such as the McEliece cryptosystem [28]) in the context of IKEv2.

While formally proving the security for any extension would provide valuable feedback to the community, most of them have been established for years without any noteworthy security breaches. Therefore, we focus on the two extensions mentioned above, which are still in draft status and do not yet enjoy the same level of confidence.

### 5.1 Extending the Tamarin Model
The IKE_INTERMEDIATE extension takes place after IKE_SA_INIT but before IKE_AUTH and consists of one or more round-trips. For simplicity, we model an exchange with one round-trip only. Extending the model established in Section 4 requires two new Tamarin rules that implement the respective new states for the Initiator and Responder. The rules IKE_AUTH_I and IKE_AUTH_R also change, as their input condition is now the successful completion of the new exchange. A session in this model is therefore only complete when IKE_INTERMEDIATE is used.

In our basic model, the attacker can reveal classical DH keys; it is with respect to her that the security properties in Section 3 were proven to hold. To account for quantum-resistant key exchanges, we extend the attacker model by the following rule, which allows the revelation of quantum-resistant DH keys:

```tamarin
rule reveal_dhq :
  [ !DHQtoReveal($I, k) ]
  -- [RevDHQ($I)]->
  [Out(k)]
```

The new fact `!DHQtoReveal(X, k)` is used in the IKE_INTERMEDIATE_X-rules to indicate that peer X has created a quantum-safe DH key.

### 5.2 Verifying PQ-IKEv2’s Security Properties
The additional key exchange should protect the peers’ shared key against even a quantum-computer-based attacker [35], i.e., the enhanced IKEv2 version should provide key secrecy against this attacker. Ideally, it should feature all the security properties that the original IKEv2 provides against a classical attacker.

To prove this, we use the same methodology as presented in Section 4.4. The Tamarin lemmata are adjusted to account for the new attacker model; this affects all properties which are only achieved if the DH values are not revealed, namely: a) Weak Agreement, b) Agreement, c) Key Secrecy, and d) Identity Protection. In all of the corresponding lemmata, it is necessary to assume that the DH keys are not revealed to prove that the property holds. A quantum-computer-based attacker can reveal the classical DH keys by definition. For all properties in question, it is instead necessary to assume that the quantum-resistant DH keys are not revealed to prove that they still hold.

For example, in the lemma for Weak Agreement_I, the fact `RevDH(X)` needs to be replaced by `RevDHQ(X)` as follows (see Lines 5 and 6):

```tamarin
lemma weak_agreement_i [use_induction]:
  All spi I R keymat #i.
  Completed(spi, I, 'initiator', R, keymat) @ #i
  & not (Ex #k. RevSk(R) @ k)
  & not (Ex #k. RevDHQ(I) @ k)
  // ... rest of the lemma ...
end
```

This adjustment ensures that the lemma accounts for the new attacker model and the quantum-resistant DH keys.