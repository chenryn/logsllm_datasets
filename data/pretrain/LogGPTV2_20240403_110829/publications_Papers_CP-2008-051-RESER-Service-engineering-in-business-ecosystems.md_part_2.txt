### Service-Oriented Modeling and Architecture

Arsanjani (2004) argues that traditional object-oriented approaches lack support for services, flows, and components. To address these gaps, IBM developed the Service-Oriented Modeling and Architecture (SOMA). SOMA not only supports the concept of service ecosystems but also provides a clear separation between service providers and consumers. The architecture is structured into seven layers of abstraction, and it includes a comprehensive methodology to guide the modeling process.

While SOMA offers a business-driven, top-down approach, it does not fully address service innovation or business models. Additionally, it lacks support for model-driven development.

### Motion Methodology

The Motion methodology, developed by Microsoft (Sehmi & Schwegler, 2006), is a technology-agnostic architecture designed to expose an organization's business models. In this context, a business model primarily refers to the organization's capabilities. The core principle of Motion is to identify these capabilities as a foundation for stable projects and then derive business processes. This method allows for a well-structured view of the organization, facilitating faster and more informed decision-making.

Motion’s strengths lie in its well-structured methodology and architecture, which encompass a set of stakeholders, business capabilities, a lifecycle, concepts for products and services, collaboration, and contextual factors. However, Motion primarily addresses the early stages of service engineering, such as business and collaboration within a service ecosystem. It does not provide support for service innovation, detailed business models, or model-driven development.

### Comparison of Business-Oriented Approaches

| Methodology | Service Innovation | Business Model | Business Process | Service Ecosystem |
|-------------|--------------------|----------------|------------------|-------------------|
| SMART      | -                  | -              | -                | -                 |
| SOAD       | -                  | -              | ✓                | ✓                 |
| SOMA       | -                  | -              | ✓                | ✓                 |
| Motion     | -                  | -              | ✓                | ✓                 |

(✓: aspect is covered, -: aspect is not covered)

### Integrated Methodology for Service Development in Business Ecosystems

Both business-oriented and technical-oriented service development approaches have their weaknesses. To bridge these gaps, we have developed the Integrated Service Engineering (ISE) methodology. ISE aims to create and combine e-services in the context of business ecosystems. The following sections will introduce the ISE approach, its challenges, advantages, and limitations.

#### 4.1. Challenges of Bridging the Business and Technical Worlds of Service Development

**Information Representation**

Organizations generate a vast amount of information, including strategies, objectives, business processes, standards, and IT infrastructures. This information can be categorized as unstructured, semi-structured, or structured. Unstructured information typically includes documents like Word files and presentations, while semi-structured information, such as XML, includes schema details. Structured information, like relational databases and formal models, is highly organized.

Different stakeholders use different types of information based on their background and skills. For example, business stakeholders often use unstructured data to describe future strategies, financial data, SWOT analysis, and balanced scorecards. In contrast, IT professionals rely on semi-structured or structured information to create formal models such as UML activity diagrams, MOF, and BPMN processes.

The gap between unstructured and structured information can lead to inconsistent communication, duplicated efforts, poor decision-making, and increased costs (Herschel & Jones, 2005). Closing this representational gap is essential for unifying the business and IT perspectives on e-services.

**Distinct Contexts and Views**

Business and technical professionals have different backgrounds, skills, and mindsets. Business professionals focus on financial assets, marketing missions, ROI, competition, value chains, and SWOT analysis. Technical professionals, on the other hand, are concerned with functions, data, components, integration, compatibility, programming, scalability, APIs, and formal models.

This difference in perspectives often leads to miscommunication, where the same term may refer to different entities or different terms may refer to the same entity (Fensel et al., 2002).

To address this, meta-level descriptions are needed to represent a higher layer of information. Formal models, such as ontologies, can help aggregate and align different models from various communities. An ontology is a high-level, formal, and explicit shared conceptualization of a domain (Gruber, 1992). It facilitates knowledge sharing and reuse among stakeholders involved in e-service development.

**Model Integration**

Services have a variety of properties, and abstracting these properties reduces the level of detail, representing only the most important ones in a model. Different perspectives on a service may require different models, leading to the need for integration. For example, a business process modeled with BPMN might reference data parameters defined in an external ontology, necessitating integration between these models.

The business and technical perspectives of an e-service can be separated by the level of abstraction. The business level contains informal models capturing financial information, risk analysis, and goal models. The technical level describes e-service functions and technical implementations. Both perspectives focus on the same e-service, requiring a propagation mechanism to support changes and translate between the two.

**Tool Support**

Effective e-service development requires suitable tool support. A common set of tools should be used across stakeholders to provide a global view of the models. A shared repository is essential for collaborative development, ensuring that all participants see the same version of the service models. Tools should also provide assistance and guidance, such as roadmaps that outline tasks, timelines, and the sequence of models to be created.

#### 4.2. The ISE Methodology

The ISE methodology combines the strengths of business- and technical-oriented methodologies to provide a new approach for service engineering. It integrates the Service Engineering approach from Fraunhofer IAO (business perspective) and the Zachman Framework (IT perspective).

##### 4.2.1. Service Engineering Based on Fraunhofer IAO

The Service Engineering approach from Fraunhofer IAO (Bullinger et al., 2003; Meiren, 2001) provides a phased model with six phases and a set of methods to model each phase in terms of product, process, resources, and marketing. This approach is iterative, allowing for the refinement of previous phases before moving to the next.

We chose the SE from Fraunhofer IAO due to its strong business orientation, particularly in the definition phase and requirements analysis. These phases use various business-oriented methods, such as Porter’s Five Forces, Resource-Based View, SWOT analysis, Cost-Profit Analysis, BCG Matrix, and the Four Ps and Four Cs.

However, the service design, implementation, and market launch phases focus on traditional services. To develop e-services, the SE models and methods need to be optimized and integrated with appropriate technical-oriented models and methods.

##### 4.2.2. Enterprise Architecture Framework Based on Zachman

The Information System Architecture (ISA) framework (Zachman, 1987) provides a taxonomy to relate real-world concepts to Enterprise Architecture. Zachman breaks down an enterprise architecture into six stakeholder perspectives and six descriptions, resulting in a matrix of artifacts (Sowa & Zachman, 1992).

The Zachman framework has four main usages: advancing communication within the information system discipline, visualizing perspectives and descriptions to understand risks, setting existing tools or methodologies into relation, and developing new tools and methodologies for artifacts.

The Zachman framework's model-oriented approach is advantageous for e-service development, as it helps break down complex enterprise architectures into manageable components.