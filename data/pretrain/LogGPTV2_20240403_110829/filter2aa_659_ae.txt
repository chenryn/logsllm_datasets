    0x05, 0x05,0x01,0x02,0x04,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x04, 0x01, 0x01,0x04,0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x01, 0x01, 0x02, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0x05,0x04,0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//21 
  0x04, 0x02,0x05,0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x05, 0x05,0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0x01,0x02,0x01, 0x01, 0x01, 0x04,0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x01,0x01, 0x01, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
deeprev
googlectf2021 eldar 
GameMaster
需要⽤first反推num，num2，num3
from z3 import *
def solvePart2(ret1, ret2):
    # c1 + c2 == ret1
    # c1 + c1 + c2 == ret2
    c1 = (ret2 - ret1) & 0xff
    c2 = (ret1 - c1) & 0xff
    return c1, c2
c1, c2 = solvePart2(0x6c, 0xa1)
c3, c4 = solvePart2(0xb1, 0xe5)
part2_dec = bytes([c1, c2, c3, c4]).decode()
print(c1, c2, c3, c4)
print(part2_dec)
def permutePart1(op1, op2):
    ((c ^ op1) + op2) & 0xff
def rev_permutePart1(op1, op2, chk):
    return ((chk - op2) ^ op1) & 0xff
part1_chk = [ 0x70, 0x7c, 0x73, 0x78, 0x6f, 0x27, 0x2a, 0x2c, 0x7f, 0x35, 0x2d, 0x32, 
0x37, 0x3b, 0x22, 0x59, 0x53, 0x8e, 0x3d, 0x2a, 0x59, 0x27, 0x2d, 0x29, 0x34, 0x2d, 
0x61, 0x32, ]
part1_op1 = [ 0x16, 0x17, 0x10, 0x12, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
0x18, 0x19, 0x24, 0x2c, 0x26, 0x1e, 0x1f, 0x20, 0x20, 0x21, 0x23, 0x27, 0x24, 0x25, 
0x26, 0x27,]
part1_op2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 
0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b ]
assert len(part1_chk) == len(part1_op1) == len(part1_op2)
part1 = []
for i in range(len(part1_chk)):
    c = rev_permutePart1(part1_op1[i], part1_op2[i], part1_chk[i])
    part1.append(c)
part1_dec = bytes(part1).decode()
print(part1_dec)
print(part1_dec + part2_dec)
private static void Check1(ulong x, ulong y, ulong z, byte[] KeyStream)
        {
            int num = -1;
            for (int i = 0; i > 29 ^ x >> 28 ^ x >> 25 ^ x >> 23) & 1UL) | x > 30 ^ y >> 27) & 1UL) | y > 31 ^ z >> 30 ^ z >> 29 ^ z >> 28 ^ z >> 26 ^ z >> 24) & 
1UL) | z > 32 & 1UL & (x >> 30 & 1UL)) ^ (((z >> 32 & 1UL) ^ 1UL) & (y >> 31 
& 1UL))))));
            }
        }
        private static void ParseKey(ulong[] L, byte[] Key)
        {
            for (int i = 0; i > j * 8 & 255UL);
                }
            }
        }
        static void Main(string[] args)
        {
            ulong num = 20;// ulong.Parse(environmentVariable);
            ulong num2 = 195;// ulong.Parse(environmentVariable2);
            ulong num3 = 168;// ulong.Parse(environmentVariable3);
            ulong[] array = new ulong[3];
            byte[] array2 = new byte[40];
            byte[] array3 = new byte[40];
            byte[] array4 = new byte[12];
            byte[] first = new byte[]            
{101,5,80,213,163,26,59,38,19,6,173,189,198,166,140,183,42,247,223,24,106,20,145,37,24,
7,22,191,110,179,227,5,62,9,13,17,65,22,37,5};
            byte[] array5 = new byte[]
            {60,100,36,86,51,251,167,108,116,245,207,223,40,103,34,62,22,251,227};  
            array[0] = num;
            array[1] = num2;
            array[2] = num3;
            Check1(array[0], array[1], array[2], array2);
            bool flag2 = first.SequenceEqual(array2);
            if (flag2)
            {
[y = 868387187, x = 156324965, z = 3131229747]
easyapk
安装后发现界⾯很简单，只有⼀个输⼊框和⼀个按钮，⽤jadx打开后发现就是调⽤so⾥⾯的check函数进⾏判断。
⾥⾯代码看起来很复杂，但实际跟踪后发现其实存在⼤量⽆⽤代码，真正有⽤的其实是调⽤函数sub_544最后的两
个循环，⼀个进⾏字符串替换，⼀个进⾏加密。check函数将加密结果与固定字节⽐较后返回结果。
中间调⽤time取时间，使⽤其中固定的两位参与运算。⽤v146 = (v122 | 0xFFFFFFFE) - (v122 & 0xFFFFFFFE) + 2  
(v122 | 1) + 1;代替加1。⽤v143 = (v141 | 0xFFFFFFF7) - (v141 & 0xFFFFFFF7) + 2  (v141 | 8) + 1;代替加8。藏的最
深的是⽤v155 = 2  (v103 | v144) - (v144 ^ *v103);代替了加法。
                ParseKey(array, array4);
                for (int i = 0; i = *pKeyLen145)
      break;
    Key147 = data;
    v182 = Key147 + Index143;
    v142 = *(DWORD *)(Key147 + Index143);
    v107 = *(DWORD *)(Key147 + Index143 + 4);
    v103 = 0xc6ef3720;
    for (int i = 0; i > 5)) - (v153[3] ^ (v142 >> 5))) ^ (2 * 
(v153[2] | (16 * v142)) - (v153[2] ^ (16 * v142))) ^ (2 * (v142 | v103) - (v103 ^ 
v142));
解密代码块后得到synt{Vg_Vf_A0g_guNg_zHpu_unEqre}，利⽤所有的⼤⼩写字⺟得出52个字节的替换表，将字⺟
替换回去得到flag{It_Is_N0t_thAt_mUch_haRder}。
Web 
uploadpro
从phpinfo中发现题⽬使⽤fpm启动，并且开启了opcache扩展，⽂件上传功能使⽤⽩名单校验。
利⽤ ⽬录穿越 读获得 index.php源码：
      v107 = v107 - v159;
      DWORD v156 = (2 * (v103 | v107) - (v103 ^ v107)) ^ (2 * (v153[0] | (16 * v107)) - 
(v153[0] ^ (16 * v107))) ^ (2 * (v153[1] | (v107 >> 5)) - (v153[1] ^ (v107 >> 5)));
      v142 = v142 - v156;     
      v103 = v103 - 0x9e3779b9;
    }
    DWORD *v160 = (DWORD *)v182;
    v160[0] = v142;
    v160[1] = v107;
    Index143 = Index143 + 8;
  }
  char list[] = "NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm";
  char flag[] = "synt{Vg_Vf_A0g_guNg_zHpu_unEqre}";
  for (int i = 0; i 
  ⽂件上传
 2*1024*1024){
    echo "";
    exit();
  }
  $arr = pathinfo($filename);
  $ext_suffix = $arr['extension'];
  $allow_suffix = array('jpg','gif','jpeg','png',"bin","hex","dat","docx","xlsx");
  if(!in_array($ext_suffix, $allow_suffix)){
    echo "";
    exit();
  }
  if (move_uploaded_file($temp_name, '/uploads/'.$prefix.$filename)){
    echo "";
  }else{
    echo "";
  }
 ?>
使⽤docker镜像php:7.4.3-fpm启动环境，安装opcache扩展，创建⼀个恶意的phpinfo.php并获取其opcache缓存
⽂件phpinfo.php.bin。
新下发⼀个环境，不访问phpinfo.php，⾸先访问index.php，再下载index.php.bin，使⽤插件获取opcache⽂件
的时间戳：https://github.com/GoSecure/php7-opcache-override
将从题⽬下载得到index.php.bin的时间戳赋值给我们构造的phpinfo.php.bin，然后借助⽬录穿越将其上
传/tmp/opcache/a06090313e406ccd069625aabb3cded7/var/www/html/phpinfo.php.bin，此时再访问
phpinfo.php，就成功覆盖，执⾏恶意代码并获取flag。
babyweb
让admin⾃⼰修改⾃⼰密码，vps内容如下：
然后登录购买hint，代码审计，根据python go的json解析不⼀致绕过即可。
         点我发送请求
{"product":[{"id":1,"num":0},{"id":2,"num":0}],"product":[{"id":1,"num":3},
{"id":2,"num":3}]}
easylogin
80: wordpress
读moodle的mdl_sessions，然后找userid=2的session
替换登陆后台，然后安装插件getshell即可。
POST /wp-admin/admin-ajax.php HTTP/1.1
Host: 47.105.60.229
Content-Length: 183
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://47.105.60.229
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like 
Gecko) Chrome/103.0.0.0 Safari/537.36
Accept: 
text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,