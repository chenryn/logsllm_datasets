# Test and Development Process Retrospective: A Case Study Using ODC Triggers

**Authors:**
- Ram Chillarege
- Kothanda Ram Prasad

**Affiliation:**
- CHILLAREGE INC., New York, April 2002
- [www.chillarege.com](http://www.chillarege.com)

## Abstract

This case study presents a retrospective analysis of a product development process to evaluate the effectiveness of testing and development. We utilized Orthogonal Defect Classification (ODC) as an analytical method to gain deeper insights into the causes of delays during testing, which go beyond what classical qualitative analysis can provide.

1. **ODC Trigger Analysis:** This method provides insight into the degree of blockage in testing, probable causes, and their consequences on the test and development processes.
2. **Temporal Analysis:** The distribution of triggers over time indicates the stabilization of the product, while variations among components highlight systemic issues.
3. **Inferences and Recommendations:** Based on these analyses, we make nine specific inferences and recommendations to guide the engineering of future releases.

## Introduction

At the conclusion of a development effort, it is common for a project to conduct a postmortem or retrospective. The value of such an exercise lies in gaining an understanding of the process and learning from mistakes. While there are no set methods for conducting retrospectives, the general approach and spirit of the exercise are well understood. However, the sophistication of the analysis varies, leading to differing levels of insight and understanding.

### Common Approaches

- **Informal Analysis:** This is the most commonly used approach, where team opinions and observations are collected and consolidated. However, it can be challenging to resolve conflicting views or establish clear diagnostics.
- **Quantitative Methods:** These are less common and typically limited to organizations with the necessary resources and skills in software engineering process analysis.

### Orthogonal Defect Classification (ODC)

ODC is a measurement system for software processes based on the semantic information contained in the defect stream [Chillarege 92]. It brings a new level of sophistication to such analysis by leveraging information captured during the development process. ODC methods have been expanded to multidisciplinary design [Amezquita 96] and have been applied in recent case studies at IBM [Butcher 02] and CISCO [Mullen 02].

#### Misconceptions and Data Scope

A common misconception is that the full scope of ODC data is required for such analysis. While comprehensive data is valuable, it is not always necessary. The scope of data needed depends on the types of questions raised. Often, even a restricted set of data, such as ODC Triggers, can be highly valuable.

### Case Study Focus

This case study uses ODC Triggers to analyze the efficiency of the software testing subprocess. Triggers are key to understanding what happened during a test cycle and its efficacy. Additional data, such as ODC defect type and ODC source, would be useful but are not critical for the initial analysis.

## Case History

The project under study is the fourth or fifth iteration of an enterprise application, a typical modern three-tier web application with databases, access control, and zero-footprint clients. The backend is a relational database containing enterprise data and some business rules. The application layer is supported by an application server and business objects, with additional components for authentication, security, report generation, and dynamic data rendering.

### Challenges and Maturity

- **Usability and Performance:** The application aims to blend the usability of modern web interfaces with the efficiency and speed of classical mainframe applications, a challenging task.
- **SEI CMM Maturity:** The development team's maturity is assessed to be between SEI CMM Level 2 and Level 3, with a focus on requirements management, thorough design reviews, and prototyping.

## Objectives

The primary objective of this detailed quantitative retrospective is to gain a clearer understanding of the development and testing processes. Specifically, we aim to:

- Determine if the testing process was indeed slow and, if so, why.
- Evaluate the impact of process improvements, such as architecture and design, thorough requirements, and a well-articulated development and build mechanism.
- Identify factors that could improve the testing process.

## Data and Analysis

### Quantitative Insights

Figures 1 and 2 illustrate the challenges experienced qualitatively:
- **Defect Growth Curve (Fig 1):** Shows the growth of defects over time.
- **Priority Distribution vs. Stage (Fig 2):** Indicates a high proportion of priority 1 defects, which blocked test progress.

### Questions and Analysis

- **Was the test process independently responsible for the delays?**
- **Were there elements of development that could have helped the test cycle?**
- **Was there a visible benefit from good design and architecture?**
- **Was there a visible benefit from a more thorough requirements process?**
- **What would make the test process more effective?**

The answers to these questions will be substantiated with detailed data and analysis, providing inferences and recommendations. In the conclusions, we will tie the detailed findings back to our higher-level objectives.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)**
**0-7695-1597-5/02 $17.00 © 2002 IEEE**
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:19:12 UTC from IEEE Xplore. Restrictions apply.**