## 一、前言
js文件在日常测试中是一个容易被忽略的点，其代码繁杂冗长具有较差的可读性，但往往承载着重要业务逻辑，如前后端分离站点前端操作逻辑写在js中，开发者未对代码做安全处理直接发布便可能存在安全风险，而鉴于js代码的透明性，提高阅读难度似乎是最直接高效的办法
混淆前：
    console.log("Hello World!");
混淆后：
    // obfuscator default模式混淆
    function _0x5036(_0x92e953, _0x27bdba) {
        var _0xd97dbd = _0xd97d();
        return _0x5036 = function (_0x5036a0, _0x39efd5) {
            _0x5036a0 = _0x5036a0 - 0x144;
            var _0x3beebf = _0xd97dbd[_0x5036a0];
            return _0x3beebf;
        }, _0x5036(_0x92e953, _0x27bdba);
    }
    var _0x1721d6 = _0x5036;
    (function (_0x46d758, _0x1fbdfa) {
        var _0x284cfd = _0x5036,
            _0x14b3cc = _0x46d758();
        while (!![]) {
            try {
                var _0x2e2de6 = -parseInt(_0x284cfd(0x14b)) / 0x1 * (-parseInt(_0x284cfd(0x148)) / 0x2) + parseInt(
                        _0x284cfd(0x14c)) / 0x3 * (parseInt(_0x284cfd(0x144)) / 0x4) + parseInt(_0x284cfd(0x14d)) / 0x5 +
                    -parseInt(_0x284cfd(0x14f)) / 0x6 + -parseInt(_0x284cfd(0x147)) / 0x7 * (parseInt(_0x284cfd(0x14e)) /
                        0x8) + -parseInt(_0x284cfd(0x14a)) / 0x9 + -parseInt(_0x284cfd(0x150)) / 0xa * (parseInt(
                        _0x284cfd(0x149)) / 0xb);
                if (_0x2e2de6 === _0x1fbdfa) break;
                else _0x14b3cc['push'](_0x14b3cc['shift']());
            } catch (_0x107939) {
                _0x14b3cc['push'](_0x14b3cc['shift']());
            }
        }
    }(_0xd97d, 0x272e7), console[_0x1721d6(0x145)](_0x1721d6(0x146)));
    function _0xd97d() {
        var _0x9c87e1 = ['44VQhPEt', '1287702HdVyGJ', '399Bzqaro', '105wYuDVi', '1265195xzjWGR', '9832nUlriq',
            '54834DwHOIW', '657340hrdxqi', '14492DlEtEw', 'log', 'Hello\x20World!', '112Idibir', '1080ULAwBj'];
        _0xd97d = function () {
            return _0x9c87e1;
        };
        return _0xd97d();
    }
## 二、常见混淆方法
### 2.1 对象访问
当js运行在浏览器环境时，全局变量、函数、对象都可以被浏览器访问，变成window对象的成员
    function aaa(){
        console.log('aaa');
    }
    var bbb = 'bbb'
    window.aaa();
    window.bbb;
js有`.`和`[]`两种方式来访问对象成员，前者属性名为标识符，后者属性名为字符串，而字符串又支持拼接，利用这个性质可以将固定的标识符转变成可变化的字符串
    // 创建对象
    function Test(name){
        this.name = name
    }
    // 变化前
    var k1 = new Test('k1');
    console.log(k1.name);
    // 变化后
    var k1 = new window['Test']('k1');
    window['console']['l'+'o'+'g'](k1['n'+'a'+'m'+'e']);
### 2.2 编码格式
  * unicode编码  
js标识符包含变量名、函数名、参数名和属性名，支持写入unicode编码数据
    // 变化前
    function Aaa(ccc){
        this.name = ccc;
    }
    var bbb = new Aaa('kk');
    bbb.name;
    // 变化后
    function \u0041\u0061\u0061(\u0063\u0063\u0063){
        this.\u006e\u0061\u006d\u0065 = \u0063\u0063\u0063;
    }
    var \u0062\u0062\u0062 = new \u0041\u0061\u0061('\u006b\u006b');
    \u0062\u0062\u0062.\u006e\u0061\u006d\u0065;
  * hex编码
js字符串支持写入十六进制编码数据
    // 变化前
    var aaa = 'hello';
    console['log'](aaa);
    // 变化后
    var aaa = '\x68\x65\x6c\x6c\x6f';
    console['\x6c\x6f\x67'](\u0061\u0061\u0061);
  * ascii编码
`String`对象提供`charCodeAt()`、`fromCharCode()`两个方法可以实现ascii与字符间的转换
    // 字符转ascii
    'a'.charCodeAt();
    // ascii转字符
    String.fromCharCode('97')
可以搭配`eval()`函数实现混淆，将字符串转换成代码执行
    // 变化前
    var aaa = 'hello';
    console.log(aaa);
    // 变化后
    var test = [10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 114, 32, 97, 97, 97, 32, 61, 32, 39, 104, 101, 108, 108, 111, 39, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 99, 111, 110, 115, 111, 108, 101, 46, 108, 111, 103, 40, 97, 97, 97, 41, 59, 10, 32, 32, 32, 32]
    eval(String.fromCharCode.apply(null, test));
### 2.3 常量加密
  * 字符串加密
对象成员属性名为字符串时，支持动态变化，可以使用加解密函数改变字符串
    // 变化前
    var aaa = 'haaaaeaaaalaaaaalaaaaaoaaaaa';
    console.log(aaa.replace(/a/g, ''));
    // 变化后
    function double_b64_decode(sss){ // 双重base64解码函数
        var test = [97, 116, 111, 98, 40, 97, 116, 111, 98, 40, 115, 115, 115, 41, 41]; // ascii编码数据
        return eval(String.fromCharCode.apply(null, test)); // return atob(atob(sss));
    }
    var aaa = double_b64_decode('YUdGaFlXRmxZV0ZoWVd4aFlXRmhZV3hoWVdGaFlXOWhZV0ZoWVE9PQ==');
    console[double_b6\u0034_decode('\u0059kc5b\x67==')](aaa[double_b\u00364_decode('Y21Wd2JHRmpaUT09')](/a/g, ''));
  * 数值加密
利用位异或运算的自反特性，可以将数值转换为异或表达式
  * a ⊕ b = c --> 111 ⊕ 222 = 177
  * a ⊕ c = b --> 111 ⊕ 177 = 222
  * b ⊕ c = a --> 222 ⊕ 177 = 111
    // 变化前
    for (a=3, b=0; a>b; b++){
        console.log(b);
    }
    // 变化后
    for (a=(28904789 ^ 23411199) - (98209009 ^ 84326486), b=(82719280 ^ 72618394) - (27206798 ^ 19203876); a>b; b++){
        console.log(b);
    }
### 2.4 数组混淆
  * 数组混淆
提取代码中的字符串组合成一个大数组，再使用下标的方式来访问
    // 变化前
    var currTime = new window.Date().getTime();
    console.log(currTime);
    // 变化后
    var _JMX2pS = [""[atob('Y29uc3RydWN0b3I=')][atob('ZnJvbUNoYXJDb2Rl')], atob('bGVuZ3Ro'), atob('c3BsaXQ=')]
    function _phkzfz(str) {
        var i, k, m = "";
        k = str[_JMX2pS[2]](".");
        for (i = 0; i  头出尾进
        for (var x = num; x > 0 ; x--) {
            arr['push'](arr['shift']());
        }
    })(aaa, 7); // 做7次变化
    console.log(aaa); // [3, 4, 5, 1, 2]
    (function(arr, num){  // 数组还原 --> 尾出头进
        for (var x = num; x > 0 ; x--) {
            arr['unshift'](arr['pop']());
        }
    })(aaa, 7);
    console.log(aaa); // [1, 2, 3, 4, 5]
    // 变化后
    var _JMX2pS = [atob('c3BsaXQ='), ""[atob('Y29uc3RydWN0b3I=')][atob('ZnJvbUNoYXJDb2Rl')], atob('bGVuZ3Ro')];
    (function(arr, num){ // 数组还原函数
        for (var x = num; x > 0 ; x--) {
            arr['unshift'](arr['pop']());  // 尾出头进
        }
    })(_JMX2pS, 5);
    function _phkzfz(str) {
        var i, k, m = "";
        k = str[_JMX2pS[2]](".");
        for (i = 0; i  0 ; x--) {
            arr['push'](arr['shift']());  // 头出尾进
        }
    })(_N2JfbZ, 6);
    var _rAr7F7 = new window[_N2JfbZ[1]]()[_N2JfbZ[2]]();
    window[_N2JfbZ[3]][_N2JfbZ[0]](_rAr7F7);
### 2.5 jsfuck
根据js语言的弱类型性质，用`(`、`)`、`[`、`]`、`+`、`!`6种字符来替换代码：
  * `!`逻辑非，转化成布尔类型，并取反，如：![] ==> !1 ==> false、typeof(![]) ==> 'boolean'
  * `+`加法运算或字符串拼接，一元运算时转化为数值类型，如：+[] ==> +"" ==> 0、typeof(+[]) ==> 'number'；二元运算时，存在字符串则拼接字符串，不存在则做数字加法，如：'abc' + 1 ==> 'abc1'、true + true ==> 2、!![] + [] ==> true + '' ==> 'true'、!![] + !! + [] ==> true + false ==> 1 + 0 ==> 1
    false  ==>  ![]
    true   ==>  !![]
    0      ==>  +[]
    1      ==>  +!+[]
    10     ==>  +(1+0)  ==>+([+!+[]] + [+[]])
    a      ==>  ('false')[1] ==>  (![]+[])[+!+[]]
  * 再配合constructor构造函数eval执行字符串语句
    // 变化前
    alert(1);
    // 变化中
    []["filter"]["constructor"]('alert(1)')();
    "filter"  ==>  ((![]+[])[0] + ([![]]+[][[]])[10] + (![]+[])[2] + (!![]+[])[0] + (!![]+[])[3] + (!![]+[])[1])
        ├── 'f'  ==>  (false+[])[0]
        ├── 'i'  ==>  ([false]+undefined)[10]
        ├── 'l'  ==>  (false+[])[2]
        ├── 't'  ==>  (true+[])[0]
        ├── 'e'  ==>  (true+[])[3]
        └── 'r'  ==>  (true+[])[1]
    "constructor"  ==>  (([][((![]+[])[0] + ([![]]+[][[]])[10] + (![]+[])[2] + (!![]+[])[0] + (!![]+[])[3] + (!![]+[])[1])]+[])[3] + (!![]+[][((![]+[])[0] + ([![]]+[][[]])[10] + (![]+[])[2] + (!![]+[])[0] + (!![]+[])[3] + (!![]+[])[1])])[10] + ([][[]]+[])[1] + (![]+[])[3] + (!![]+[])[0] + (!![]+[])[1] + ([][[]]+[])[0] + ([][((![]+[])[0] + ([![]]+[][[]])[10] + (![]+[])[2] + (!![]+[])[0] + (!![]+[])[3] + (!![]+[])[1])]+[])[3] + (!![]+[])[0] + (!![]+[][((![]+[])[0] + ([![]]+[][[]])[10] + (![]+[])[2] + (!![]+[])[0] + (!![]+[])[3] + (!![]+[])[1])])[10] + (!![]+[])[1])
        ├── 'c'  ==>  ([]["filter"]+[])[3]
        ├── 'o'  ==>  (true+[]["filter"])[10]
        ├── 'n'  ==>  (undefined+[])[1]
        ├── 's'  ==>  (false+[])[3]
        ├── 't'  ==>  (true+[])[0]
        ├── 'r'  ==>  (true+[])[1]
        ├── 'u'  ==>  (undefined+[])[0]
        ├── 'c'  ==>  ([]["filter"]+[])[3]
        ├── 't'  ==>  (true+[])[0]
        ├── 'o'  ==>  (true+[]["filter"])[10]
        └── 'r'  ==>  (true+[])[1]
    "alert(1)"  ==>  ((![]+[])[1] + (![]+[])[2] + (!![]+[])[3] + (!![]+[])[1] + (!![]+[])[0] + (![]+[][((![]+[])[0] + ([![]]+[][[]])[10] + (![]+[])[2] + (!![]+[])[0] + (!![]+[])[3] + (!![]+[])[1])])[20] + 1 + (!![]+[][((![]+[])[0] + ([![]]+[][[]])[10] + (![]+[])[2] + (!![]+[])[0] + (!![]+[])[3] + (!![]+[])[1])])[20])
        ├── 'a'  ==>  (false+[])[1]
        ├── 'l'  ==>  (false+[])[2]
        ├── 'e'  ==>  (true+[])[3]
        ├── 'r'  ==>  (true+[])[1]
        ├── 't'  ==>  (true+[])[0]
        ├── '('  ==>  (false+[]["filter"])[20]
        ├── '1'  ==>  '1'
        └── ')'  ==>  (true+[]["filter"])[20]
    // 变化后
    [][((;
### 2.6 花指令
在代码中添加不影响运行但可以增加逆向工作量的垃圾代码
  * 二项式转函数
    // 变化前
    var a = 3;
    var b = 5;
    var c = 7;
    console.log(a+b+c);
    // 变化后
    function _yEMYyf(j, k, l){
        return j + l;
    }
    function _hDp7fx(j, k, l){
        return _yEMYyf(l, +![], j) + k;
    }
    function _zaApRm(j, k, l){
        return _hDp7fx(k, l, j);
    }
    console.log(_zaApRm(3, 5, 7));
  * 多层嵌套函数调用表达式
    // 变化前
    var a = 3;
    var b = 5;
    var c = 7;
    console.log(a+b+c);
    // 变化后
    function _B2PfcZ(j, k, l){