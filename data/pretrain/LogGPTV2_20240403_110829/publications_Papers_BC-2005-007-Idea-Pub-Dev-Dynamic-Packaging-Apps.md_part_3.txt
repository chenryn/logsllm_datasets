Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission
of Idea Group Inc. is prohibited.
 Cardoso
is represented, XML allow organizations to define data schemas that relate XML
tags with data content.
The travel industry has been adopting XML as a common format for data exchanged
across travel partners. For example, the Open Travel Alliance (OTA)3 provides a
vocabulary and grammar for communicating travel-related information as tags
implemented using XML across all travel industry segments. XML is well suited
in this context since schema for defining the XML tags can differ among industries,
and even within organizations. Furthermore, the three major worldwide online travel
agencies—Expedia, Travelocity, and Orbitz—have also adopted the XML standard to
enable the exchange of supplier information using XML-based exchange formats.
Resource Description Framework
The RDF (World Wide Web Consortium, 2005a) provides a standard way of referring
to metadata elements and metadata content. RDF builds standards for XML applica-
tions so that they can interoperate and intercommunicate more easily, facilitating
data and system integration and interoperability. RDF is a simple general-purpose,
metadata language for representing information on the Web and provides a model
for describing and creating relationships between resources. A resource can be a
thing, such as a person, a song, or a Web page. With RDF it is possible to add pre-
defined modeling primitives for expressing semantics of data to a document without
making any assumptions about the structure of the document. In a first approach, it
may seem that RDF is very similar to XML, but a closer analysis reveals that they
are conceptually different. If we model the information present in an RDF model
using XML, human readers would probably be able to infer the underlying semantic
structure, but general purpose applications would not.
While XML is being widely used across all travel industry segments, RDF is a
recent data model and its adoption is just starting in areas such as digital libraries,
Web services, and bioinformatics. Nevertheless, as the number of organizations
adhering to this standard starts growing, it is expected that the travel industry will
also adopt it.
Databases
In modern tourism organizations, it is almost unavoidable to use databases to pro-
duce, store, and search for critical data. Yet, it is only by combining the informa-
tion from various database systems that dynamic packaging applications can take
a competitive advantage from the value of data. Different travel industry segments
use distinct data sources. This diversity is caused by many factors including lack of
coordination among organization units; different rates of adopting new technology;
mergers and acquisitions; and geographic separation of collaborating groups.
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of
Idea Group Inc. is prohibited.
Developing Dynamic Packaging Applications 
To develop dynamic packaging applications, the most common form of data inte-
gration is achieved using special-purpose applications that access data sources of
interest directly and combine the data retrieved with the application itself. While
this approach always works, it is expensive in terms of both time and skills, fragile
due to the changes to the underlying sources, and hard to extend since new data
sources require new fragments of code to be written. In our architecture, the use
of semantics and ontologies to construct a global view will make the integration
process automatic, and there will be no requirement for a human integrator.
Tourism Data Source Integration
The technologies and infrastructures supporting the travel industry are complex
and heterogeneous. The vision of a comprehensive solution to interconnect many
applications and data sources based entirely on standards, such as the one provided
by OTA (2004), that are universally supported on every computing platform, is not
achieved in practice and far from reality.
Data integration is a challenge for dynamic packaging applications since they need
to query across multiple heterogeneous, autonomous, and distributed (HAD) tourism
data sources produced independently by multiple organizations in the travel industry.
Integrating HAD data sources involves combining the concepts and knowledge in
the individual tourism data sources into an integrated view of the data. The con-
struction of an integrated view is complicated because organizations store different
types of data, in varying formats, with different meanings, and reference them using
different names (Lawrence & Barker, 2001).
To allow the seamless integration of HAD tourism data sources rely on the use of
semantics. Semantic integration requires knowledge of the meaning of data within the
tourism data sources, including integrity rules and the relationships across sources.
Semantic technologies are designed to extend the capabilities of data sources al-
lowing to unbind the representation of data and the data itself and to give context
to data. The integration of tourism data sources requires thinking not of the data
itself but rather the structure of those data: schemas, data types, relational database
constructs, file formats, and so forth. Figure 5 illustrates the component in layer 3
of our architecture which carries out the mappings between different data models.
This layer can be seen as a middleware level that implements the interfaces to the
data sources to be integrated. These interfaces must overcome the heterogeneities
of communication protocols as well as the heterogeneities regarding programming
languages. Since the results are typically returned in different formats, the inter-
faces should translate them into the reference data model which is used inside the
middleware.
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission
of Idea Group Inc. is prohibited.
 Cardoso
Figure 5. Mapping between different data models
Semantic Semantic Semantic Semantic Layer
Data Model Data Model Data Model
3 Data Model Mapping
Extractor/Transformation/Wrapper Syntactic Layer
The syntactic data present in the tourism data source, such as databases, flat files,
HTML and XML files, are extracted and transformed using extractors and wrappers.
An important aspect of tourism data sources is that there is no single generic method
to retrieve data source data. Additionally, the schema of the tourism data sources
may or may not be available. In some data sources, such as XML documents, the
data sets may be self-described and schema information may be embedded inside the
data sets. In other cases, such as with databases, the system may store and provide
the schema as part of the data source itself but separately for the actual data. Finally,
some sources may not provide any schema. This is the case of HTML Web pages.
For this situation, methods need to be developed to analyze the data and extract its
underlying structure.
Once the data has been extracted and transformed, we use metadata to link the data
with tourism ontologies. Tourism ontologies are the backbone of semantic dynamic
packaging applications and explicitly define a set of shared tourism concepts and
their interconnections. They make explicit all concepts in a taxonomical structure,
their attributes, and relations. Wrappers, information extraction, and text analysis
combine information with ontologies and thereby create metadata. These tasks can
be done automatically.
Putting a semantic layer on a syntactical architecture creates an environment where
integration issues can be upgraded to an abstract level where graphical modeling
allows a higher degree of flexibility when developing and maintaining semantic
integration.
Data Integration using a Global Data Model
One simple approach to data integration is to implement each interface to data
sources as part of individual development projects by hand coding the necessary
data conversions. This approach is time consuming and error prone. It is necessary
to implement N*(N–1) different translation interfaces to integrate N data sources.
For dynamic packaging applications—where more than 100 tourism data sources
may need to be integrated—this approach is not feasible.
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of
Idea Group Inc. is prohibited.
Developing Dynamic Packaging Applications 
A more advanced approach uses hubs or brokers to achieve data and process integra-
tion. With this approach it is necessary to have two translation interfaces per data
source, one interface in and one out of the hub or broker. The number of required
interfaces between systems is 2*N. The data is not translated directly from a source
system to a destination system, but it is translated using a global data model present
in the hubs or brokers.
Another solution is to map all data sources onto an expressive global data model
and automatically deploy all the translation interfaces from these mappings. This
approach requires N mappings and the use of ontologies to develop expressive
global data models. In our architecture for dynamic packaging applications, we
use this last approach.
Data Extraction and Transformation
To achieve tourism data source integration, extractors and wrappers can be used to
extract the data that will be reconsolidated later. The extractors attempt to identify
simple patterns in data sources and then export this information to be mapped through
a wrapper. Since dynamic packaging applications use information stored in various
HAD data sources, an extractor has to be implemented for each kind of data source
to import. Therefore, a database extractor, an HTML extractor, an XML extractor,
and an RDF extractor have to be implemented.
As an example, let us describe the structure of an HTML extractor. Dynamic packag-
ing applications should be able to extract relevant information from an unstructured
set of HTML Web pages describing tourism products and services. The role of the
HTML extractor is to convert the information implicitly stored as an HTML docu-
ment, which consists of plain text with some tags, into information explicitly stored
as part of a data structure. This information is processed in order to provide meaning
to it, so that dynamic packaging applications can “understand” the texts, extract, and
infer knowledge from it. As will be shown later, this process of providing meaning
to the unstructured texts is achieved using e-tourism ontologies. In the case of the
Web, the extractor has to deal with the retrieving of data, via the HTTP protocol
(through a GET or a POST method). An extractor is split into two separate layers:
1. retrieval layer
2. extraction layer
The retrieval layer deals with accessing the source through a GET or a POST method.
This layer is in charge of building the correct URL to access a given resource and
to pass the correct parameters. It should also handle redirections, failures, and
authorizations.
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission
of Idea Group Inc. is prohibited.
 Cardoso
The extraction layer is specific to the resource and deals with the actual extraction,
taking advantage of the HTML grammar as well as regular expression patterns.
Each extraction layer consists of a set of extraction rules and the code required to
apply those rules. The extraction language should be expressive enough to capture
the structure expressed by the resource or document. At this level the extracted
information should be regarded as a string.
To program our extractors we have selected Compaq’s Web language (formerly
known as WebL) (Compaq Web Language, 2005). WebL is an imperative, inter-
preted scripting language for automating tasks on the Web that has built-in support
for common Web protocols like HTTP and FTP, and popular formats such as HTML
and XML.
A critical problem in developing dynamic packaging applications involves access-
ing information formatted for human use and transforming it into a structured data
format (Werthner & Ricci, 2004). Wrappers are one of the most commonly used
solutions to access information from data sources being in charge of transforming
the extracted information into the target structure that has been specified according
to the user’s needs. Wrappers have to implement interfaces to data source and should
take advantage of generic conversion tools that can directly map extracted strings
into say dates, zip codes, or phone numbers. These interfaces must overcome the
heterogeneities of communication protocols as well as the heterogeneities regarding
programming languages.
Data Model Mapping
There are many factors that make data integration for dynamic packaging applications
a difficult problem. However, the most notable challenge is the reconciliation of the
semantic heterogeneity of the tourism data sources being integrated. For dynamic
packaging applications one of the best solutions toward reconciling semantic het-
erogeneity is the use of languages for describing semantic mappings, expressions
that relate the semantics of data expressed in different structures (Lenzerini, 2002).
Figure 6 illustrates the mappings established between XML data sources and the
semantic data model used by our dynamic packaging application. Our common data
model is defined using an e-tourism ontology specified using the Web Ontology
Language (OWL) (World Wide Web Consortium, 2004).
OWL offers a common open standard format capable of representing both structured
data, semi-structured, and unstructured data. Thus, OWL can be used as a common
interchange format. We will discuss the details of this approach in section 3.5. For
each tourism data source type, that is, flat files, relational models, XML, HTML,
or RDF, mappings need to be defined to reference concepts present in our e-tour-
ism ontology.
Copyright © 2007, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of
Idea Group Inc. is prohibited.
Developing Dynamic Packaging Applications 
Figure 6. Mapping between different data models
Tourism data source Data mapping E-Tourism Ontology
DynamicPackage
+ Reservation
+ Flight
+ Accommodation
HC HCoR t oRS e tlS el XML + + C Aca tr ivR ite yntal
 + …
 Reservation
 + Name
 + ResID
 + ….
Accommodation
+ Hotel
WH WeHik b eii k n bsig ni st ge it e W Web eL bL XML + + B ...ed&Breakfast
Activity
+----Shopping
 +----…
 +----…
 +----Sport
+----Fishing
+----Tennis
+----Hiking
Data Consolidation
Data consolidation focuses on the orchestration of interactions between multiple lo-
cal data models, as illustrated in Figure 7. Local data models (layer 3) are combined
to create a global data model (layer 5) using the data consolidation layer (layer 4).
As explained previously, to facilitate the integration of data source and construct
local and global data models, we have adopted OWL as the standard format for
information exchange.
One of the key principles of our approach is the separation of the process being
implemented from the data being manipulated. We consolidate the semantic data
models using processes to subsequently create a shared global data model. To achieve
this incorporation, we define processes using workflow management systems and
technology. We use two main software components to consolidate data: process
designer and workflow engine. The process designer permits graphically design-
ing processes that will consolidate the semantic data models. This tool permits
defining business rules representing the integration logic. The workflow engine is
a state machine that executes the workflow activities that are part of a process. It
supports the execution of decision nodes; subprocesses; exception handling; forks
and joins; and loops.
The processes describing the activities that are necessary to construct our shared