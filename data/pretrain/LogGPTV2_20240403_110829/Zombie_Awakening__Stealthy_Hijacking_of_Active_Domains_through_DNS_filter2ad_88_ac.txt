on the stale records and then selects the most prevalent ones to find
their providers. In most cases, the domain name for the nameserver
carries the provider’s name (e.g., hank.ns.cloudflare.com). Oth-
erwise, we have to resort to WHOIS information for the provider’s
domains: for example, the nameserver (ns51.domaincontrol.com)
does not provide any indicator about who the provider is, but the
WHOIS record for the domain shows that the provider is GoDaddy.
Findings. To study PVDs and their providers in the wild, we
scanned 1,016,449 domains, including Alexa’s top 1M websites,
and education and government domains gathered from the Farsight
passive DNS records (PDNS), based upon their sponsored TLDs
(sTLDs) such as .edu, and .gov. We also included some country-
specific sTLDs such as China (CN) and Saudi Arabia (SA). The
selection of SA domains was made due to the massive increase of
attacks recently targeting Saudi Arabian services [3, 54, 66]. Thus,
an adversary may leverage the trust inherited from vulnerable do-
mains under the sTLDs to execute a more deceiving attack. Similarly,
CN domains were selected due to the observed pervasiveness of
DNS resolution interception, in which some were abused for illicit
traffic monetization [51]. This suggests that adversaries may also
consider launching a Zaw attack against sTLDs domains. Table 2
(in Appendix A) presents the number of the domains under each
sTLDs used in our dataset. Scanning all these 1,016,449 domains,
ZreFinder discovered 4,914 PVDs along with their corresponding
SLD stale NS records and further reported the top 11 most preva-
lent DNS hosting providers associated with these records. Also,
we included 6 additional popular providers that offer free service,
according to an online list [69]. Table 1 presents these services
along with the number of associated PVDs. These services were
further manually inspected to verify whether the PVDs are indeed
exploitable (Section 4.2).
4.2 Hijackable Domain Identification
Just because a PVD has Zref (i.e., a stale NS record pointing to a DNS
hosting provider) it does not necessarily mean that the domain is
hijackable. The provider may have a protection in place, presenting
: 𝐷 // List of domains in our dataset
Algorithm 1: ZreFinder to identify PVDs
Input
Output: 𝑃𝑉 𝐷𝑠 // List of potential vulnerable domains
1 for 𝑑𝑛 ∈ 𝐷 do
𝑇 𝐿𝐷𝑛𝑠 = ∅
𝑆𝐿𝐷𝑛𝑠 = ∅
𝑆𝐿𝐷𝑛𝑠_𝑜𝑛𝑙𝑦 = ∅
𝑃𝑉 𝐷𝑠 = ∅
𝑇 𝐿𝐷𝑛𝑠 = Query NS records at the TLD level
for 𝑛𝑠 ∈ 𝑇 𝐿𝐷𝑛𝑠 do
2
3
4
5
6
7
// Query NS records at the domain’s level
𝑎𝑛𝑠𝑤𝑒𝑟 = query 𝑛𝑠 for NS records
𝑆𝐿𝐷𝑛𝑠.add(𝑎𝑛𝑠𝑤𝑒𝑟)
end for
𝑆𝐿𝐷𝑛𝑠_𝑜𝑛𝑙𝑦 = 𝑆𝐿𝐷𝑛𝑠 − 𝑇 𝐿𝐷𝑛𝑠
for 𝑛𝑠 ∈ 𝑆𝐿𝐷𝑛𝑠_𝑜𝑛𝑙𝑦 do
𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒 = query 𝑛𝑠 for A record
if 𝑟𝑒𝑠𝑝𝑜𝑛𝑠𝑒_𝑠𝑡𝑎𝑡𝑢𝑠 == (REFUSED) then
𝑃𝑉 𝐷𝑠.add(𝑑𝑛, 𝑛𝑠)
8
9
10
11
12
13
14
15
16
17
18 end for
end if
end for
a different set of nameservers than what the requested domain
already has as stale records. An interesting finding is that even in the
absence of the protection, as happened in most of the providers we
investigated, some PVDs still may not be hijackable. This is due to
the observation that the domain could still be possessed by another
account at the provider and resolved by a different nameserver than
the one in the stale record. Also to be considered is the possibility
that the provider imposes restrictions on the domains it hosts.
Apparently, the simplest way to validate a vulnerable domain, re-
gardless of these concerns, is just to claim it at a given DNS hosting
provider. This approach, however, could not ensure that no dam-
age will be inflicted on the domain since a successful claim could
result in an automatic assignment of an IP to the domain by some
providers. Also, there is a slim chance the stale NS record could be
used by a resolver, and if so, the outcome could be cached because
the provider nameserver no longer responds with REFUSED. There-
fore, our methodology avoids such a direct claim and instead runs
a series of tests, including an unauthorized claim analysis, to deter-
mine whether any ownership check is performed on the provider
side, and three domain exploitability assessments (DEAs) to under-
stand whether a PVD can indeed be hijacked on an unprotected
provider.
Unauthorized claim analysis. This analysis is used to find out
whether a domain can be claimed on a DNS hosting provider by an
unauthorized party. Specifically, we first register a domain and then
open two accounts with a provider: victim and attacker. Through
the victim account, an A record is configured to point to IPvictim
and NS records pointing to the provider is set at the SLD zone.
After confirming that the domain is indeed active, we remove the
domain from the victim account. Then, we confirm that the assigned
nameservers respond with REFUSED status code when queried about
the domain to verify that the domain is no longer active at the
provider. Next, we attempt to claim the domain and set a different
A record pointing to IPattacker through the attack’s account with
the same nameserver assigned to the victim (so the stale NS record
can be used to hijack the domain). In the case that the provider
randomly assigns its nameservers, we continue to try until the
same nameserver shows up to serve the claim. This process can
be automated when the DNS hosting provider offers APIs (e.g.,
Amazon Route 53) for adding a zone and setting the RRs.
DEA 1: resolvable by another nameserver at provider. In our
research, we observed cases in which a domain has a Zref in addi-
tion to an active NS record both belong to the same provider. This
indicates that the domain is active under another account at the
provider. When this happens, an attempt to claim the domain with
the provider could fail. However, inspecting all PVDs’ TLD and
SLD zones is not a common approach to find out whether they
are in this category as the active NS records may not show up in
the zones. Our solution is to utilize PDNS data to identify all the
nameservers associated with a DNS provider and then query all of
them with each PVD whose stale record points to the provider. If
any of them does not respond with REFUSED, we suspect that the
domain may not be exploitable. To confirm this, we further utilize
the two accounts on the provider to claim our own domain: if the
attempt fails, the PVD is considered not vulnerable.
DEA 2: registration data at provider. Also possible is the situa-
tion that the DNS hosting service is actually operated by a registrar:
for example, GoDaddy offers both DNS hosting and domain regis-
tration services. In this case, the provider is in a position to check
the ownership although it may not do that. To evaluate the ex-
ploitability of a PVD, our approach checks its WHOIS information
to find out whether its registrar is also the provider that the Zref
points to. Then, for all the registrars/providers discovered in this
manner, we further register with each of them a domain under our
control through one account and try to claim it from a different
account through its DNS hosting service to determine whether the
domain can be captured by one without proper ownership.
DEA 3: TLD restriction at provider. Another observation of our
research is that some providers may stop serving domains with spe-
cific TLDs (mainly country code TLDs operated by some countries).
As a result, the PVDs with these TLDs can no longer be exploited
through the providers. To identify the presence of such restrictions,
our approach utilizes two strategies. For each DNS provider, we first
find out all their PVDs’ TLDs. Then for each TLD, we try to claim a
non-existing domain with the TLD at the provider. If the provider
fails to approve the claim, a justification will be returned about
the restriction. Although this strategy works for most providers,
some (actually, only GoDaddy found in our research) do not allow
claiming an unregistered domain. In this case, we resort to another
strategy, utilizing PDNS to identify all records with domains under
the TLD in question pointing to the provider’s nameserver. The
domains returned in PDNS are then used to send real-time queries
to its corresponding nameserver at the provider: if all of them fail
to resolve, we hypothesize that a restriction has been placed on the
TLD by the provider.
Findings. In our research, we evaluated all 1,304 PVDs that are
associated with the selected providers using the four tests and ob-
tained the results presented in Table 1. Among the 17 providers
studied, 14 allow unauthorized domain claims resulting in 628 PVDs.
Oracle Dyn no longer offers DNS hosting service, so all associated
PVDs cannot be claimed and thus not included in our experiments.
The two remaining providers are SEO web hosting and CloudFlare.
From our analysis, we found that SEO web hosting refuses claims
for a domain removed from their service stating that the domain
already exists in their servers. This prevented reclaiming our do-
main from the attackers account after we deleted it from victim
account. However, it is not clear if this was a result of a security
check or a failure to properly clean up the removed domains from
their system. We also found that CloudFlare, in particular, has a
strong verification mechanism to prevent unauthorized claims of a
domain. Specifically, to prevent the abuse of stale records, when a
client requests to add a domain to its service, it will first check the
domain’s current records through DNS queries: if the SLDns of the
domain already contains any nameserver pointing to CloudFlare it
will assign a different set of nameservers to it, thus requiring the
client to update the domain’s current records in order to activate
the domain at this service.
In the experiment for DEA 1, we analyzed all PVDs associated
with 11 affected providers. PVDs with Zref pointing to Amazon
Route 53 were excluded from this test because Amazon Route 53
allows a domain to be active under more than one account with
different NS records (Section 2.2). Thus, all its 75 associated PVDs
can be exploited. For the PVDs associated with the 11 providers, 155
of them have at least one nameserver that did not return REFUSED.
Therefore, they were considered not exploitable.
When it comes to DEA 2, from the registrar information of the
PVDs, 3 providers were found offering domain registration service,
GoDaddy, Hetzner Online GmbH and RU Center. Among them, only
GoDaddy has protection in place to prevent one from claiming the
domain not registered through his account. As a result, 38 PVDs that
have a Zref pointing to GoDaddy turned out to be not exploitable,
since they are all registered through GoDaddy. By running DEA 3 on
all the providers, we observed that Domain.com stopped supporting
the .ir domains, which leads to dropping 104 PVDs from our list.
4.3 DNS Resolver Analysis
For a PVD associated with an unprotected provider, a zombie res-
olution path (i.e., claim of the domain with an A record pointing
to an attack server) can be constructed on the DNS provider side
(Section 4.2). However, a Zaw attack can only succeed once this
path is “awakened,” being utilized to answer queries on the domains
at resolvers. In our research, we further investigated whether public
recursive resolvers can indeed be manipulated to enable the attack.
For this purpose, we analyzed three sets of recursive resolvers: 46
popular public resolvers offered by 12 well-known DNS service op-
erators [78], around 11K open resolvers on a public list [28], and a
resolver of an organization serving its members through DHCP. In
addition, we performed experiments on six DNS implementations
(e.g., Bind [1], Unbound [50] and Microsoft DNS [56]). Compared
e
l
b
a
k
c
a
j
i
h
#
s
D
V
P
#
/
s
n
i
a
m
o
d
?
d
e
t
c
e
ff
A
No
?
1
A
E
D
-
?
2
A
E
D
-
?
3
A
E
D
-
-
-
NA
0/38
0/193
Yes ◦ ◦ ◦ 75/75
Yes • • ◦ 19/200
Yes ◦ ◦ • 82/185
Yes ◦ ◦ ◦ 91/91
Yes ◦ ◦ ◦ 244/244
Yes ◦ ◦ ◦ 65/65
Yes • ◦ ◦ 15/24
Yes • ◦ ◦ 14/15
Yes ◦ ◦ ◦ 14/14
Yes • ◦ ◦
Yes ◦ ◦ ◦
Yes ◦ ◦ ◦
No
-