# 摩诃草APT团伙新脚本类攻击样本分析报告
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> “摩诃草”组织，又称Hangover、Viceroy Tiger、Patchwork、Dropping
> Elephant、MONSOON，国内其他安全厂商也称其为白象、丰收行动。
>
>
> 该组织是一个以长期针对中国、巴基斯坦及其他部分南亚国家从事网络间谍活动的APT组织。从2013年5月16日由国外安全厂商Norman首次曝光以来，该组织的网络攻击活动异常的活跃，并被国内外不少安全厂商相继发现其攻击事件和使用的恶意代码。
>
>
> 360公司也曾在2016年8月4日发布了《摩诃草组织（APT-C-09）来自南亚的定向攻击威胁》一文【1】，详细介绍了该组织发起的历史4次攻击行动，并对其历史使用的攻击工具和基础设施的关联性进行比较和总结。
>
>
> “摩诃草”组织主要针对我国的政府机构、科研教育领域以及军事领域的目标人员进行攻击，其主要使用鱼叉攻击，也使用基于即时通讯工具和社交网络作为恶意代码的投递途径。其攻击使用的恶意代码主要针对Windows系统，历史也出现过针对其他平台的恶意代码。
>
> 360威胁情报中心在近期对“摩诃草”组织的攻击活动监测过程中，发现其投入使用的新的攻击样本，我们决定发布此篇子分析报告，揭露该组织最新的攻击技术细节。
## 背景概述
“摩诃草”组织的攻击活动从2013年5月16日首次曝光以来，其历史的攻击行动及使用的攻击工具和资源也被国内外安全厂商多次揭露，但从360威胁情报中心对该组织的持续监测显示，该组织的攻击行动从未停止，并持续保持着一个比较高的频度活跃。
自我们上一次公开发布“摩诃草”组织的完整分析报告，已经过去了一年多，我们发现该组织在过去一年依然延续了过去的一些攻击模式，但使用的攻击工具和恶意代码还是出现了一些显著变化。
我们发现，“摩诃草”组织最近发起了一次可能是针对东欧部分国家的攻击事件，并使用了其新制作的一些基于脚本的攻击恶意代码文件，和过去常见的采用诱导漏洞文档类的攻击载荷手法出现了一些明显变化，并且已经有部分乌克兰用户遭受此类攻击并被植入远控木马。
目前我们尚不能确定该攻击事件背后的攻击动机，但为了预防该组织在未来的攻击行动中进一步大规模使用该类攻击恶意代码，我们决定披露其部分技术细节并预警，以便能更好的防御其未来使用该类攻击技术。
下面我们将重点分析“摩诃草”组织最新的脚本类攻击恶意代码技术。
## 基于脚本的攻击载荷投放
在“摩诃草”组织最新制作的攻击恶意代码中，我们发现其主体模块使用JS和PowerShell脚本进行编写，并利用多次解密、拼接来释放和加载下一阶段的攻击载荷。
下图为该恶意代码的结构和执行流程。
###  Dropper JS – dog.js
Dropper
JS是一个96KB的脚本，其会释放一个中间JS脚本。其前面部分为hex形式的附加数据被作为注释语句存放；后面的脚本会先获取当前正在执行脚本的路径，并读取自身文件数据，找到前面注释的附加数据拼接起来，转换成二进制形式，保存到”%temp%\laksasokpaslkak.js”，最后通过WScript容器执行这个脚本。
###  中间JS脚本 – laksasokpaslkak.js
该脚本会首先判断目标主机是否存在卡巴和NOD32程序，如果存在则脚本退出；如果不存在，会把脚本里的“dllData”和“code”两个数据一起写入到一个PowerShell脚本文件中，其名字为随机生成的5个字节。最后执行该PowerShell脚本。
###  随机名称PowerShell脚本
该PowerShell脚本以数组形式乱序放置Base64编码的数据，通过Base64解码并解压成PowerShell脚本后，采用了一种Bypass
UAC的形式来执行该脚本。其使用的Bypass
UAC技术在另一个APT组织“海莲花”的攻击工具中也曾使用【2】。其通过修改注册表键值劫持eventvwr.exe，调用SC命令创建一个服务，并指向解密后的PowerShell脚本。
###  PowerShell Loader
PowerShell Loader脚本也是随机生成的名字，其主要功能是加载主体远控模块。
该脚本从内存中加载payload，如下为加载代码流程：
其中“strexp”保存的为远控模块的文件数据，经过base64decode解码得到原始文件内容为一个DLL文件，其导出模块名为socksbot.dll。最后使用ReflectiveLoader技术加载。
通过对加载的部分代码分析，我们推测其可能参考了开源的代码实现【3】，并添加了在64位Windows系统下的兼容性代码。
## 远控模块分析
###  加载入口 – ReflectiveLoader
该函数首先获取当前函数的地址，然后往前搜索PE头部“MZ”标志以定位该DLL模块的基地址。
通过hash获取3个函数LoadLibrary、GetProcAddr、VirtualAlloc的地址。
然后调用VirtualAlloc分配一片内存空间。
把该DLL模块复制到新申请的内存中。
然后执行DllMain。
###  执行入口 – DllMain
DllMain会首先获取一些硬件信息计算出机器码。机器码是根据驱动器信息、电脑名和用户名算出来的：
然后会获取GetProcAddress和LoadLibraryA的地址，并把sub_1000234A代码通过复写进程的方式注入svchost.exe宿主中，如图：
注入后的代码会初始化网络套接字，发送一次touch包，然后创建一个主线程函数，如下：
在主线程中会连接C&C服务器地址5.8.88.64:80。
###  控制协议
这里我们详细分析该远控模块使用的控制通信协议，其基于HTTP协议实现控制通信。
  1. **touch包**
远控模块会发送touch数据包，其会根据机器码生成对应的php路径用作HTTP访问的请求路径，其将机器码和随机生成的密钥加密并附上密钥信息。
其具体算法实现如下：
计算后生成的机器码字符串是放到HTTP数据包的GET数据里，例如生成的字符串为j2ylvj50suxr8vzss17s3.php，那么加密后的机器码数据为j2ylvj50suxr8vzss17s3。其前16字节是机器码加密后的数据，从16字节开始到末尾是随机生成的密钥信息，密钥长度在5-16字节随机，数值的范围在0-35随机，然后通过编码成可见字符。
当服务器接收到该字符串会采用如下方式解密还原机器码：
  * 分割出加密的机器码和密钥
  * 通过解密算法去解密前面16字节的机器码。
例如这里对j2ylvj50suxr8vzss17s3.php进行解密。
分割j2ylvj50suxr8vzs为加密的16字节机器码，s17s3为随机生成的密钥。解密算法如下。
从而解密还原出原始的机器码：
其随后构造成HTTP格式的数据包发送出去。
如图为构造HTTP数据包的函数，UserAgent是通过ObtainUserAgentString函数生成的。