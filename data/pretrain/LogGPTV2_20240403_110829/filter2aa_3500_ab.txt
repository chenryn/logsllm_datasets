### 进入AHCI模式及FIS指令处理

- 要进入AHCI模式，需要确保`featureV&V11B`不为0。
- FIS（Frame Information Structure）指令由`handle_reg_h2d_fis`函数处理。
- `AHCI_PORT_REG_CMD/CMD_ISSUE`会调用`check_cmd`和`handle_cmd`来映射FIS。
- 通过FIS的第一个字节确认是否调用`handle_reg_h2d_fis`，该函数会设置重要的`ide_state`结构体（模拟IDE寄存器）。

### IDE指令的运行

- 在`handle_reg_h2d_fis`中设置完IDE寄存器后，会调用`ide_exec_cmd`处理IDE指令。
- 根据规范，IDE指令位于FIS的第三字节（`fis[2]`）。
- 它会在`ide_cmd_table`中查找与传入命令对应的处理函数。
- 使用`WIN_PACKETCMD`指令可以继续处理CommandVTable中的读取操作。
- `cmd_packet`也可以通过IDE设备的`ATA_IOPORT_WR_COMMAND`触发，但使用FIS更简单。

### 从`cmd_packet`到`cmd_read`

- `cmd_packet`通过读取ATAPI指令部分跳转到`cmd_read`。
- `cmd_read`的参数`buf`是我们在物理内存中写入的内容。
- QEMU的`ld*_be_p`函数用于读取值，其中`*`可以是`l=long, w=word, u=unsigned, be=大端`。
- 因此，`nb_sectors`和`lba`都是从客户机获取的污染输入。
- 之前提到的`size`字段也是可污染的。

### 从`cmd_read`到`ide_atapi_cmd_read_pio`

- `cmd_read`调用`ide_atapi_cmd_read`，而我们找到的污染位置是`ide_atapi_cmd_read_pio`。
- 当`s->atapi_dma`为FALSE时，`pio`会被调用。
- 我们之前要求`featureV&V11B`不为0是为了将其设置成0。

### `ide_atapi_cmd_reply_end`

- 我们从前后两个方向收敛到了这个可疑的位置，并发现其关键参数都是可控的。
- 内部还有一些较细粒度的限制，但都可控：
  - 需要将`lba`设置为-1，以绕过一些检查。
  - 单次拷贝的长度受到`lcyl`和`hcyl`（即柱面cylinder）的限制，可以在FIS中设置为最大`0xfffe`或其他方便进行漏洞利用的值。

### 代码总览

- 前半部分总结：
  - 它调用`pio_transfer`进行传输。
  - 但传递给`pio_transfer`的`data_ptr`已经越界。
  - 理论上注册了它的设备都有问题，但只有AHCI注册了它。
  - 这只是前两步，我们只解决了FIS和ATAPI的问题。

### 利用PRDT表

- 要利用这个漏洞，还需要处理PRDT表。
- `ahci_pio_transfer`从`cur_cmd`中取出`opts`（options），决定操作方向是读还是写。
- `ahci_dma_prepare_buf`从PRDT中取出任务，这些任务存放在`sglist`中，包括地址、长度等信息。
- 调用`dma_buf_write/read`来处理`sglist`的任务。

### `sglist`的添加过程

- `Sglist`（Scatter-Gather List）被用来存放要读取的操作序列。
- 遍历PRDT表，累加每一项的操作长度，与已操作的长度进行对比。
- 当PRDT表累加到某一项时，若已超过已操作的长度，则将其后面的内容加入`sglist`。
- `base`即为数据基地址。

### AHCI设备的初始化

- 每个SATA控制器有6条主线，每条主线关联有一个设备。
- SATA对应的AHCI会初始化6个`AHCIDevice`结构体及其成员使用的内存。

### 任意长度越界读

- 越界读的是`io_buffer`之后的数据，长度任意。
- 读出来的数据会写入DBA指向的物理内存，因此可以无限泄露QEMU的内存。
- 只要不是最后一个port，`ide_init1`之后通常会有下一个port的硬盘控制结构。
- 这个控制结构包含多个全局变量和函数指针，可以绕过ASLR。

### 任意长度越界写

- `opts`也可以设置成写操作。
- 写操作时，PRDT的DBA地址被当作源地址。
- 代码会从DBA读出数据，写入`io_buffer`后已越界的地址空间中。
- 长度和内容不限，我们现在有任意长度、任意内容越界读写的原语。

### 内存布局与堆风水

- 发生溢出的`s->io_buffer`，长度130KB，在设备初始化（realize）时被`ide_init1`申请。
- QEMU在初始化完成后，内存中间可能会有因其他操作留下的无权限的gap。
- 越界操作是类似`memcpy`的连续操作，不可避免会经过gap。
- 虽然可以通过技巧避免gap，但直接选择分配在主heap区的port来利用漏洞更简单。

### 实际的漏洞利用——布局部分

- 最稳定、最容易定位的是读取后面的`ahci_dma_ops`结构体。
- 这个结构体有10个字段，AHCI使用了其中8个。
- 这8个都是函数指针，因此可以用来绕过ASLR。
- AHCI没有使用`set_inactive`（#8）和`reset`（#10）。
- `reset`通常用于重启时通知IDE设备。
- AHCI/IDE共享代码片段，设置`reset`后可进入IDE的流程。
- 将第10个字段，即`.reset`改为ROP#1的地址。
- 当QEMU重启时，`reset`会被调用，从而开始代码执行。

### 利用时的一些细节

- 启动命令示例：
  ```sh
  /x86_64-softmmu/qemu-system-x86_64 -enable-kvm -m 2048 \
  -device ich9-ahci,id=ahci -drive file=/home/leon/iso.iso,media=cdrom,if=none,id=mycdrom \
  -device ide-cd,drive=mycdrom,bus=ahci.4 -hda /home/leon/disk.qcow2
  ```
  - `-device ide-cd,drive=mycdrom,bus=ahci.4`中的数字可以改为不同的总线编号。
- MMIO可以使用periphery库简化操作。
- 漏洞可以稳定利用，以QEMU权限执行任意代码。

### 漏洞的处理

- QEMU官方从源头上修复了问题（禁止CD读取时设置`lba`为-1）。
- 但是CVE提交的信息却是错误的。

### 企业使用或定制化QEMU时的一些思考

- 及时更新补丁。
- 不让用户定制过多的启动参数，过多的灵活性可能带来安全问题。
- 设置专门人员负责安全审计，将静态扫描的流程集中在开发环节每一个提交中。
- 及时处理崩溃或告警信息，合并PATCH并回报官方。
- 研制热补丁系统，以方便修补类似于CVE-2020-14364这样补丁不需要改动很多代码的问题。

感谢观看！  
KCon 汇聚黑客的智慧