There seem to be some performance regressions in compile time of `NTuple` in
1.0. Note, for example,  
1.0:
    using StaticArrays
    julia> @time @SMatrix rand(16,16)
     11.440824 seconds (1.41 M allocations: 85.987 MiB, 0.24% gc time)
0.6.4:
    using StaticArrays
    julia> @time @SMatrix rand(16,16);
      1.330479 seconds (356.50 k allocations: 13.710 MiB)
We were speculating that this is due to #27398. While it doesn't seem
unreasonable that the compiler really has to think about 256 type long
signatures, we believe that the compiler may not know that all the types are
guaranteed to be the same since (as far as I know) `NTuple` is nothing more
than an alias.
Am I getting the story here correct? Would it be possible to make the compiler
know that `NTuple` is promised to be homogeneous, but otherwise retain the
current behavior?
I apologize if this is somehow duplicating or echoing existing issues, I
wasn't able to find anything that addressed this directly.
(Thanks to @ChrisRackauckas for useful discussion on this.)