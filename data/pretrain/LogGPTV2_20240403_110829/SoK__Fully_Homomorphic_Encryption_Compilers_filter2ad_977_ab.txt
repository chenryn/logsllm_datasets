the product of two ciphertexts decrypts to the sum of their
plaintexts. Meanwhile, textbook RSA [28] is multiplicatively
homomorphic: the product of two ciphertexts decrypts to the
product of their plaintexts. While such partially homomor-
phic schemes have existed since the 1970s, fully homomor-
phic encryption schemes, i.e., schemes that are homomorphic
regarding both addition and multiplication, were an open
problem until recently. While ﬁrst proposed shortly after the
introduction of public-key cryptography in the 1970s [10],
proposed solutions could support only limited combinations of
operations (e.g., additions plus a single multiplication [29]).
Here, we provide a brief overview over the development of
modern FHE schemes, deferring more in-depth descriptions
of selected FHE schemes to the appendix (§A).
Foundations of practical FHE. Modern FHE schemes date
back to 2009 when Craig Gentry presented the ﬁrst feasible
FHE construction [11]. While the original scheme had im-
practically large constant overheads, follow-up work improved
upon the scheme, enabling a ﬁrst implementation [30].
All modern schemes follow the general approach laid out
by Gentry’s ﬁrst scheme: In these schemes, public keys are
values that cancel out to zero when combined with the secret
key sk. Encryption multiplies the public key pk with a
random number a and adds the message m. For two ciphertexts
xi = pk ∗ ai + mi, addition and multiplication trivially
translate to the equivalent operations on the plaintexts, i.e.,
x0 ∗ x1 = m0 ∗ m1 + pk ∗ (a0 ∗ x1 + a1 ∗ m0) which
decrypts to m0 ∗ m1 when combined with the secret key.
However, for a secure system, noise must be added to public
keys and ciphertexts. As long as the noise e is sufﬁciently
small, m + e(cid:48) can be rounded to the correct value and
applying the secret key recovers m. During homomorphic
operations, the noise in the ciphertext grows. While this effect
is negligible during additions, multiplying two ciphertexts
introduces signiﬁcantly more noise. This limits computations
to a (parameter-dependent) number of consecutive multipli-
cations (multiplicative depth) before decryption fails. This
limitation can be circumvented using bootstrapping, which
resets the noise level of a ciphertext to a ﬁxed lower level
by homomorphically evaluating the decryption circuit with
an encrypted secret key as input. However, the decryption
circuit needs to be sufﬁciently low-depth to allow at least one
additional multiplication before needing to bootstrap again.
Second Generation Schemes. While the ﬁrst generation of
FHE presented a signiﬁcant academic breakthrough, it was too
inefﬁcient (e.g., around 30 min needed to compute a single
homomorphic multiplication) to truly enable practical appli-
cations of FHE. In response, a second generation of schemes
like the Brakerski-Gentry-Vaikuntanathan (BGV) [31] and
Brakerski/Fan-Vercauteren (BFV) [32], [33] schemes evolved.
In order to overcome the performance penalties of bootstrap-
ping, they introduced the concept of leveled homomorphic
encryption. Here, the parameters are chosen sufﬁciently large
to evaluate the entire computation without bootstrapping.
While there is a cut-off point after which bootstrapping is
more efﬁcient, this is unlikely to be reached by most programs.
In addition, they introduced support for Single Instruction,
Multiple Data (SIMD)-style batching. This exploits the fact
that the plaintext space is a ring of polynomials with many
coefﬁcients. Using the Chinese Remainder Theorem [34], this
can be reinterpreted as many different independent slots and
many different messages (usually 213–216) can be packed
into a single ciphertext. Automorphisms additionally enable
homomorphically executable rotations between slots [35].
The Cheon-Kim-Kim-Song (CKKS) scheme [36] introduces
a further optimization, considering homomorphic encryption
for approximate numbers. While it follows a very similar
construction to BGV, it is formally speaking not an FHE
scheme since the result is only approximately the same as
the equivalent plaintext operation, which can introduce subtle
issues in practice. However,
this relaxation has led to an
extremely efﬁcient scheme. CKKS is designed primarily for
computations with ﬁxed-point numbers, i.e., a number x is
represented as m = (cid:98)x ∗ ∆(cid:101) for scale ∆, usually a large
integer. CKKS introduces a homomorphic rounding operation
to reduce the scale homomorphically, avoiding overﬂow issues.
Third Generation Schemes. More recently, a third gen-
eration of FHE schemes, based on the Gentry-Sahai-Waters
(GSW) scheme [37], has emerged. These schemes mostly
abandon batching and leveled HE and instead focus on fast
bootstrapping. For example, implementations of the Chillotti-
Gama-Georgieva-Izabachene (CGGI2) scheme [38], [39] can
perform bootstrapping in less than 0.1 seconds, while boot-
strapping for BFV or BGV usually takes several minutes
even in efﬁcient implementations. While initially limited to
binary settings, recent follow-up work [40] extends this to
arithmetic circuits. However, fast bootstrapping is incompati-
ble with batching, introducing a trade-off between latency and
throughput when compared to second-generation schemes.
FHE and MPC. Finally, we brieﬂy consider FHE in the wider
context of secure Multi-Party Computation (MPC). While FHE
could be used to realize many 2-party MPC protocols,
it
does not by default offer circuit privacy, i.e., does not hide
the function being computed. Where desired, this is usually
addressed in practice via noise ﬂooding [11], i.e., adding large
noise to the ﬁnal result before returning it to the client. FHE
can also be extended to multi-party or multi-key settings. In
multi-party FHE, different entities generate a public key and
shares of a secret key [41]. In multi-key FHE, each entity
independently generates their secret and public key [42]. There
are also hybrid schemes that combine FHE and MPC [43]
or different FHE schemes [44]. We only consider the two-
party FHE-only client-server setting, but many of the concepts
transfer directly to the other settings.
2The CGGI scheme is more commonly known as TFHE, however we refer
to it by the author initials in order to avoid confusion with the TFHE library.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1094
III. WHAT MAKES DEVELOPING FHE APPLICATIONS
CHALLENGING?
The intricacy of the underlying schemes still limits devel-
oping FHE-based applications predominantly to experts. Each
scheme presents a new set of conﬁgurations and performance
tradeoffs, and achieving state-of-the-art results requires a high
familiarity with the underlying schemes. In addition, FHE
imposes a fundamentally different programming paradigm, not
only because of the need for data-independent programs but
also because efﬁcient solutions frequently require complex
vectorization approaches.
Throughout the last decade, a signiﬁcant amount of folklore
knowledge around optimization methods and best practices
has been built up in the FHE community. However, these
techniques and insights are often scattered across the literature
or only referred to in passing. As a result, there is a vast gap
between state-of-the-art performance results and what non-
experts can achieve themselves.
In this section, we provide an overview of the key engi-
neering challenges that developers face today. The community
is starting to identify these accessibility issues as a major
roadblock to the broader adoption of FHE. Recent works are
trying to address these challenges by proposing higher-level
interfaces, better abstractions, and automated optimizations.
There will most likely always be speciﬁc applications that
impose additional challenges requiring expert input. However,
improved tools can beneﬁt a variety of common application
patterns and help ease the path to FHE for many applications.
A. Parameter Selection
Selecting secure and efﬁcient instantiations of the under-
lying cryptographic problems is hard for most encryption
schemes. In standard public-key cryptography, we circumvent
this by standardizing particular instantiations, e.g., selecting
certain elliptic curves, to avoid security issues arising when the
underlying hardness assumptions do not hold for poor choices.
FHE introduces the additional challenge of computation-
speciﬁc parameters. More complex computations require
larger plain- and ciphertext moduli to avoid overﬂow or noise
issues. However, as these parameters increase, the Learning
With Errors (LWE) problem that security is based on for most
schemes becomes easier, and the dimension of the problem
space (i.e., polynomial degree) must be increased to compen-
sate. As a result, we cannot standardize a single set of secure
parameter choices. Instead, the standardization effort [22] aims
to provide a conservative estimate of the security of different
combinations of moduli and dimensions. However, since this
does not address efﬁciency, parameter selection remains an
issue in developing FHE-based applications.
The time to evaluate homomorphic operations, for a given
polynomial degree n, is roughly proportional to the ciphertext
space modulus q, and a smaller q also gives higher security.
Therefore, we want to select the smallest q that still cor-
rectly decrypts the computation result. However, effectively
computing this minimal q remains an open challenge. While
formal analyses of the ciphertext noise growth exist for a
variety of schemes, these worse-case analyses are frequently
too conservative, giving parameters many times larger than the
experimentally determined optimum [45]. Also, the plaintext
space modulus t required to avoid overﬂows depends on the
size of the actual inputs, which likely come from a smaller
subset of Zt in practice. Here, again, worst-case analyses
lead to impractically conservative parameters. Instead,
the
community’s accepted method is to incrementally decrease q
until the computation (on some representative input values)
fails to decrypt correctly, then choosing the previous q plus
some “safety margin” determined by experience.
B. Encoding
With encryption schemes like AES or protocols like TLS,
developers do not generally have to consider the plaintext
spaces of the underlying encryption schemes. As long as a
message can be serialized into a binary string, only padding
concerns arise. However, in FHE, the semantics of the plaintext
space determine the effect of the homomorphic computations.
These semantics, however, frequently do not match the in-
tended application semantics exactly. While this is already a
concern in traditional programming, with ﬂoating-point accu-
racy errors or integer overﬂows, FHE introduces a signiﬁcantly
stronger deviation from the ‘ideal’ computation model.
For example, while we generally consider Zt as the mes-
sage space for most schemes, most support additional, more
complex spaces. For example, BGV supports Galois Fields
GF(2d) which can be used to efﬁciently realize AES-FHE
transciphering, i.e., converting a standard AES ciphertext to
an FHE ciphertext given an encryption of the AES key [46].
Conceptually, binary plaintext spaces (i.e., Z2) are the
easiest to work with since the semantics of homomorphic
computations directly correspond to binary circuits. However,
working directly with binary circuits is complicated as even
trivial functions like addition and multiplication of bit-wise
encoded integers require complex algorithms (e.g., Sklansky
or Kogge-Stone adders) to implement arithmetic operations
efﬁciently. Therefore, the conceptual ease-of-use is negated by
a signiﬁcant engineering overhead for even simple algorithms.
While using advanced encoding schemes will most likely
remain predominantly an expert technique, existing FHE tools
have already shown that they can be employed automatically
to some extent. For example, nGraph-HE [24] also uses the
imaginary part of the CKKS message space when no ciphertext
multiplications are required, roughly doubling throughput.
C. Data-Independent Computation
Virtually all standard programming paradigms rely on
some form of data-dependent execution branching. Traditional
iterative programming relies heavily on if/else statements
and loops, and even functional programming requires data-
dependent branching to terminate recursion.
FHE computations, on the other hand, are by deﬁnition data-
independent, or they would violate the privacy guarantees.
Therefore, FHE computations are frequently conceptualized as
circuits, i.e., gates (or operations) connected by wires, where
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:21 UTC from IEEE Xplore.  Restrictions apply. 
1095
the execution follows the same steps, no matter what values the
input has. While it is possible to emulate, e.g., if/else branches
by calculating the result for both branches and performing a
multiplexing selection afterward, this requires evaluating both
branches. Simulating (bounded) dynamic-length loops could
be achieved by following a similar approach; however, this
quickly becomes infeasible in practice.
In addition, many schemes offer the best performance when
using integer plaintext spaces (t (cid:29) 2). These arithmetic cir-
cuits are no longer Turing-complete and are instead limited to
computing polynomial functions. However, many applications,
including neural-network inference, can be approximated very
well. Therefore, a signiﬁcant part of developing an FHE-based
solution is to consider ﬁrst whether there exists a polynomial
approximation for the task to be performed. Sometimes, this
even requires completely switching the approach, e.g., stan-
dard algorithms for genomic sequence analysis are not suitable
for polynomial approximation, but alternative approaches exist
that can be expressed much more easily [47].
D. SIMD Batching
One of the major breakthroughs in achieving practical
performance in FHE-based solution was the introduction of
batching or packing in second-generation schemes, i.e., al-
lowing one to pack many different messages into a single
ciphertext. The resulting SIMD parallelism can trivially be
used to improve throughput by packing many different inputs
into a single computation run.
However, many FHE applications are limited in their practi-
cality by latency, i.e., non-amortized runtime. State-of-the-art
FHE-based solutions virtually always apply batching inside a
computation, even on a single instance of the input. Exploiting
SIMD batching to reduce latency requires novel programming
paradigms and algorithms that do not have equivalents outside
FHE. For example, matrix-vector-products can be expressed
more efﬁciently if we encode each of the matrix diagonals
into a SIMD vector [48], rather than row- or column-wise.
SIMD batching is, for those schemes that support it, po-
tentially the most important optimization technique, as the
large size of the vectors can lead to runtime improvements
of many orders of magnitude. However, it is also one of the
more complex techniques, requiring a deep understanding of
both the application and the performance-tradeoffs of the FHE
scheme in question. While some domains, such as machine
learning, are inherently heavily vectorized and can therefore
be automatically transformed into SIMD-friendly forms, this
remains an open problem for more general applications.
E. Ciphertext Maintenance
Different schemes use a variety of solutions to manage the
growth of the ciphertext noise during homomorphic compu-
tations. However, virtually all schemes feature some form of
ciphertext maintenance operations. These are operations like
relinearization, mod-switching/rescaling or bootstrapping that
must be called explicitly by the developer in order to manage
the noise growth optimally. For example, while one might
be tempted to apply relinearization immediately after each
multiplication, doing so is suboptimal. This is most obvious
for the last multiplication in a computation: with no further
multiplications following, the beneﬁt of reducing future noise
growth is lost. Similar issues appear when considering when
to rescale in the CKKS scheme.
Bootstrapping is frequently not efﬁcient when a leveled
approach can be used. However, there are some applications
for which it is the more suitable approach. In general, there is
a continuum of choices between the minimal parameters that
allow only a single operation before bootstrapping is needed
and the (potentially infeasibly large) parameters required to
execute the entire computation without bootstrapping.
One of the major advantages of the CGGI scheme is that it
inherently relies on bootstrapping to realize each operation.
Therefore,
it removes the developer’s burden to consider
parameters and bootstrapping. However, it is worth noting that
a leveled version of the scheme is, in fact, faster for certain
applications, once again demonstrating a trade-off between
simplicity and performance.
While a variety of tools have included automatic ciphertext
maintenance [49]–[51], these were usually naive heuristics that
did not improve performance. Developing efﬁcient strategies is
difﬁcult because there are usually multiple degrees of freedom.
For example, for the rescaling operations in CKKS one needs
to consider both what scale to rescale to and where to insert
the operations. Recently, however, there have been increasing
efforts to automate this process [17].
IV. SURVEY METHODOLOGY
We split our analysis of the FHE tool space into two parts.
First, we present an extensive survey of existing tools and
highlight their features and characteristics. Second, we con-
sider these tools in practice by experimentally evaluating them
across a range of case study applications, contrasting usability,
expressiveness, and performance. We combine our quantitative
performance analysis with a qualitative assessment, describing
the challenges of developing applications in the different tools.
The secure computation ecosystem includes many different
types of tools. On the low-level side, there are math libraries
that simplify building implementations of FHE schemes, e.g.,
by efﬁciently implementing techniques useful for general
lattice cryptography. Then, there are FHE libraries that im-
plement speciﬁc schemes and offer slightly higher-level APIs,
e.g., keygen, encode, encrypt, add, mult. Finally, there
are compilers that abstract aspects like parameter selection,
encryption and decryption by offering a higher-level language
that developers can use to specify their computation.
In our survey, we consider FHE libraries and compilers.
While some of the underlying math libraries provide imple-
mentations of FHE schemes as examples [52], we consider
only tools that natively offer an API for FHE operations.
Throughout the last decade, there has been signiﬁcant de-
velopment in schemes and implementations, with some being
discarded or replaced for security or efﬁciency reasons. We
only consider tools based on schemes that are currently still