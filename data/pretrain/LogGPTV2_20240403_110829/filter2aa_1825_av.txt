ffffbf0a74d20050 [ \File\
System\Ntfs]
ffffbf0a8e68ea20 [ffffbf0a7fcde080] irpStack: ( c, 2)
ffffbf0a74d20050 [ \File\
System\Ntfs]
ffffbf0a90deb710 [ffffbf0a808a1080] irpStack: ( c, 2)
ffffbf0a74d20050 [ \File\
System\Ntfs]
ffffbf0a99d1da90 [0000000000000000] Irp is complete (CurrentLocation 10 > Stack\
Count 9)
ffffbf0a74cec940 [0000000000000000] Irp is complete (CurrentLocation 8 > StackC\
ount 7)
ffffbf0aa0640a20 [ffffbf0a7fcde080] irpStack: ( c, 2)
ffffbf0a74d20050 [ \File\
System\Ntfs]
ffffbf0a89acf4e0 [ffffbf0a7fcde080] irpStack: ( c, 2)
ffffbf0a74d20050 [ \File\
System\Ntfs]
ffffbf0a89acfa50 [ffffbf0a7fcde080] irpStack: ( c, 2)
ffffbf0a74d20050 [ \File\
System\Ntfs]
(truncated)
Faced with a specific IRP, the command !irp examines the IRP, providing a nice overview of its data. As
always, the dt command can be used with the nt!_IRP type to look at the entire IRP structure. Here’s
an example of one IRP viewed with !irp:
kd> !irp ffffbf0a8bbada20
Irp is active with 13 stacks 12 is current (= 0xffffbf0a8bbade08)
No Mdl: No System Buffer: Thread ffffbf0a7fcde080:
Irp stack trace.
cmd
flg cl Device
File
Completion-Context
[N/A(0), N/A(0)]
0
0 00000000 00000000 00000000-00000000
Args: 00000000 00000000 00000000 00000000
[N/A(0), N/A(0)]
0
0 00000000 00000000 00000000-00000000
(truncated)
Args: 00000000 00000000 00000000 00000000
[N/A(0), N/A(0)]
0
0 00000000 00000000 00000000-00000000
Args: 00000000 00000000 00000000 00000000
>[IRP_MJ_DIRECTORY_CONTROL(c), N/A(2)]
0 e1 ffffbf0a74d20050 ffffbf0a7f52f790 fffff8015c0b50a0-ffffbf0a91d99010 Su\
Chapter 7: The I/O Request Packet
195
ccess Error Cancel pending
\FileSystem\Ntfs
Args: 00004000 00000051 00000000 00000000
[IRP_MJ_DIRECTORY_CONTROL(c), N/A(2)]
0
0 ffffbf0a60e83dc0 ffffbf0a7f52f790 00000000-00000000
\FileSystem\FltMgr
Args: 00004000 00000051 00000000 00000000
The !irp commands lists the I/O stack locations and the information stored in them. The current I/O
stack location is marked with a > symbol (see the IRP_MJ_DIRECTORY_CONTROL line above).
The details for each IO_STACK_LOCATION are as follows (in order):
• first line:
– Major function code (e.g. IRP_MJ_DEVICE_CONTROL).
– Minor function code.
• second line:
– Flags (mostly unimportant)
– Control flags
– Device object pointer
– File object pointer
– Completion routine (if any)
– Completion context (for the completion routine)
– Success, Error, Cancel indicate the IRP completion cases where the completion routine would
be invoked
– “pending” if the IRP was marked as pending (SL_PENDING_RETURNED flag is set in the
Control flags)
• Driver name for that layer
• “Args” line:
– The value of Parameters.Others.Argument1 in the I/O stack location. Essentially the
first pointer-size member in the Parameters union.
– The value of Parameters.Others.Argument2 in the I/O stack location (the second
pointer-size member in the Parameters union)
– Device I/O control code (if IRP_MJ_DEVICE_CONTROL or IRP_MJ_INTERNAL_DEVICE_-
CONTROL). It’s shown as a DML link that invokes the !ioctldecode command to decode the
control code (more on device I/O control codes later in this chapter). For other major function
codes, shows the third pointer-size member (Parameters.Others.Argument3)
– The forth pointer-size member (Parameters.Others.Argument4)
The !irp command accepts an optional details argument. The default is zero, which provides the output
described above (considered a summary). Specifying 1 provides additional information in a concrete form.
Here is an example for an IRP targeted towards the console driver (you can locate those easily by looking
for cmd.exe processes):
Chapter 7: The I/O Request Packet
196
lkd> !irp ffffdb899e82a6f0 1
Irp is active with 2 stacks 1 is current (= 0xffffdb899e82a7c0)
No Mdl: System buffer=ffffdb89c1c84ac0: Thread ffffdb89b6efa080:
Irp stack tr\
ace.
Flags = 00060030
ThreadListEntry.Flink = ffffdb89b6efa530
ThreadListEntry.Blink = ffffdb89b6efa530
IoStatus.Status = 00000000
IoStatus.Information = 00000000
RequestorMode = 00000001
Cancel = 00
CancelIrql = 0
ApcEnvironment = 00
UserIosb = 73d598f420
UserEvent = 00000000
Overlay.AsynchronousParameters.UserApcRoutine = 00000000
Overlay.AsynchronousParameters.UserApcContext = 00000000
Overlay.AllocationSize = 00000000 - 00000000
CancelRoutine = fffff8026f481730
UserBuffer = 00000000
&Tail.Overlay.DeviceQueueEntry = ffffdb899e82a768
Tail.Overlay.Thread = ffffdb89b6efa080
Tail.Overlay.AuxiliaryBuffer = 00000000
Tail.Overlay.ListEntry.Flink = ffff8006d16437b8
Tail.Overlay.ListEntry.Blink = ffff8006d16437b8
Tail.Overlay.CurrentStackLocation = ffffdb899e82a7c0
Tail.Overlay.OriginalFileObject = ffffdb89c1c0a240
Tail.Apc = 8b8b7240
Tail.CompletionKey = 15f8b8b7240
cmd
flg cl Device
File
Completion-Context
>[N/A(f), N/A(7)]
0
1 00000000 00000000 00000000-00000000
pending
Args: ffff8006d1643790 15f8d92c340 0xa0e666b0 ffffdb899e7a53c0
[IRP_MJ_DEVICE_CONTROL(e), N/A(0)]
5
0 ffffdb89846f9e10 ffffdb89c1c0a240 00000000-00000000
\Driver\condrv
Args: 00000000 00000060 0x500016 00000000
Additionally, specifying detail value of 4 shows Driver Verifier information related to the IRP (if the driver
handling this IRP is under the verifier’s microscope). Driver Verifier will be discussed in chapter 13.
Chapter 7: The I/O Request Packet
197
Dispatch Routines
In chapter 4, we have seen an important aspect of DriverEntry - setting up dispatch routines. These
are the functions connected with major function codes. The MajorFunction field in DRIVER_OBJECT
is the array of function pointers index by the major function code.
All dispatch routines have the same prototype, repeated here for convenience using the DRIVER_DIS-
PATCH typedef from the WDK (somewhat simplified for clarity):
typedef NTSTATUS DRIVER_DISPATCH (
_In_
PDEVICE_OBJECT DeviceObject,
_Inout_ PIRP Irp);
The relevant dispatch routine (based on the major function code) is the first routine in a driver that sees
the request. Normally, it’s called in the requesting thread context, i.e. the thread that called the relevant
API (e.g. ReadFile) in IRQL PASSIVE_LEVEL (0). However, it’s possible that a filter driver sitting on
top of this device sent the request down in a different context - it may be some other thread unrelated
to the original requestor and even in higher IRQL, such as DISPATCH_LEVEL (2). Robust drivers need to
be ready to deal with this kind of situation, even though for software drivers this “inconvenient” context
is rare. We’ll discuss the way to properly deal with this situation in the section “Accessing User Buffers”,
later in this chapter.
The first thing a typical dispatch routine does is check for errors. For example, read and write operations
contain buffers - do these buffers have appropriate size? For DeviceIoControl, there is a control code
in addition to potentially two buffers. The driver needs to make sure the control code is something it
recognizes. If any error is identified, the IRP is typically completed immediately with an appropriate status.
If all checks turn up ok, then the driver can deal with performing the requested operation.
Here is the list of the most common dispatch routines for a software driver:
• IRP_MJ_CREATE - corresponds to a CreateFile call from user mode or ZwCreateFile in kernel
mode. This major function is essentially mandatory, otherwise no client will be able to open a handle
to a device controlled by this driver. Most drivers just complete the IRP with a success status.
• IRP_MJ_CLOSE - the opposite of IRP_MJ_CREATE. Called by CloseHandle from user mode or
ZwClose from kernel mode when the last handle to the file object is about to be closed. Most drivers
just complete the request successfully, but if something meaningful was done in IRP_MJ_CREATE,
this is where it should be undone.
• IRP_MJ_READ - corresponds to a read operation, typically invoked from user mode by ReadFile
or kernel mode with ZwReadFile.
• IRP_MJ_WRITE - corresponds to a write operation, typically invoked from user mode by Write-
File or kernel mode with ZwWriteFile.
• IRP_MJ_DEVICE_CONTROL - corresponds to the DeviceIoControl call from user mode or
ZwDeviceIoControlFile from kernel mode (there are other APIs in the kernel that can generate
IRP_MJ_DEVICE_CONTROL IRPs).
• IRP_MJ_INTERNAL_DEVICE_CONTROL - similar to IRP_MJ_DEVICE_CONTROL, but only avail-
able to kernel callers.
Chapter 7: The I/O Request Packet
198
Completing a Request
Once a driver decides to handle an IRP (meaning it’s not passing down to another driver), it must eventually
complete it. Otherwise, we have a leak on our hands - the requesting thread cannot really terminate and
by extension, its containing process will linger on as well, resulting in a “zombie process”.
Completing a request means calling IoCompleteRequest after setting the request status and extra
information. If the completion is done in the dispatch routine itself (a common case for software drivers),
the routine must return the same status that was placed in the IRP.
The following code snippet shows how to complete a request in a dispatch routine:
NTSTATUS MyDispatchRoutine(PDEVICE_OBJECT, PIRP Irp) {
//...
Irp->IoStatus.Status = STATUS_XXX;
Irp->IoStatus.Information = bytes;
// depends on request type
IoCompleteRequest(Irp, IO_NO_INCREMENT);
return STATUS_XXX;
}
Since the dispatch routine must return the same status as was placed in the IRP, it’s tempting
to write the last statement like so: return Irp->IoStatus.Status; This, however, will
likely result in a system crash. Can you guess why?
After the IRP is completed, touching any of its members is a bad idea. The IRP has probably
already been freed and you’re touching deallocated memory. It can actually be worse, since
another IRP may have been allocated in its place (this is common), and so the code may return
the status of some random IRP.
The Information field should be zero in case of an error (a failure status). Its exact meaning for a
successful operation depends on the type of IRP.
The IoCompleteRequest API accepts two arguments: the IRP itself and an optional value to temporarily
boost the original thread’s priority (the thread that initiated the request in the first place). In most cases,
for software drivers, the thread in question is the executing thread, so a thread boost is inappropriate. The
value IO_NO_INCREMENT is defined as zero, so no increment in the above code snippet.
However, the driver may choose to give the thread a boost, regardless of whether it’s the calling thread
or not. In this case, the thread’s priority jumps with the given boost, and then it’s allowed to execute one
quantum with that new priority before the priority decreases by one, it can then get another quantum
with the reduced priority, and so on, until its priority returns to its original level. Figure 7-7 illustrates this
scenario.
Chapter 7: The I/O Request Packet
199
Figure 7-7: Thread priority boost and decay
The thread’s priority after the boost can never go above 15. If it’s supposed to, it will be 15. If
the original thread’s priority is above 15 already, boosting has no effect.
Accessing User Buffers
A given dispatch routine is the first to see the IRP. Some dispatch routines, mainly IRP_MJ_READ, IRP_-
MJ_WRITE and IRP_MJ_DEVICE_CONTROL accept buffers provided by a client - in most cases from user
mode. Typically, a dispatch routine is called in IRQL 0 and in the requesting thread context, which means
the buffers pointers provided by user mode are trivially accessible: the IRQL is 0, so page faults are handled
normally, and the thread is the requestor, so the pointers are valid in this process context.
However, there could be issues. As we’ve seen in chapter 6, even in this convenient context (requesting
thread and IRQL 0), it’s possible for another thread in the client’s process to free the passed-in buffer(s),
before the driver gets a chance to examine them, and so cause an access violation. The solution we’ve used
in chapter 6 is to use a __try / __except block to handle any access violation by returning failure to the
client.
In some cases, even that is not enough. For example, if we have some code running at IRQL 2 (such as a
DPC running as a result of timer expiration), we cannot safely access the user’s buffers in this context. In
general, there are two potential issues here:
• IRQL of the calling CPU is 2 (or higher), meaning no page fault handling can occur.
• The thread calling the driver may be some arbitrary thread, and not the original requestor. This
means that the buffer pointer(s) provided are meaningless, since the wrong process address space is
accessible.
Chapter 7: The I/O Request Packet
200
Using exception handling in such a case will not work as expected, because we’ll be accessing some
memory location that is essentially invalid in this random process context. Even if the access succeeds
(because that memory happens to be allocated in this random process and is resident in RAM), you’ll be
accessing random memory, and certainly not the original buffer provided to the client.
All this means that there must be some good way to access the original user’s buffer in such an inconvenient
context. In fact, there are two such ways provided by the I/O manager for this purpose, called Buffered I/O
and Direct I/O. In the next two sections, we’ll see what each of these schemes mean and how to use them.
Some data structures are always safe to access, since they are allocated from non-paged
pool (and are in system space). Common examples are device objects (created with
IoCreateDevice) and IRPs.
Buffered I/O
Buffered I/O is the simplest of the two ways. To get support for Buffered I/O for Read and Write operations,
a flag must be set on the device object like so:
DeviceObject->Flags |= DO_BUFFERED_IO;
// DO = Device Object
DeviceObject is the allocated pointer from a previous call to IoCreateDevice (or IoCreateDe-
viceSecure).
For IRP_MJ_DEVICE_CONTROL buffers, see the section “User Buffers for IRP_MJ_DEVICE_CONTROL”
later in this chapter.
Here are the steps taken by the I/O Manager and the driver when a read or write request arrives:
1. The I/O Manager allocates a buffer from non-paged pool with the same size as the user’s buffer. It
stores the pointer to this new buffer in the AssociatedIrp->SystemBuffer member of the IRP.
(The buffer size can be found in the current I/O stack location’s Parameters.Read.Length or
Parameters.Write.Length.)
2. For a write request, the I/O Manager copies the user’s buffer to the system buffer.
3. Only now the driver’s dispatch routine is called. The driver can use the system buffer pointer directly
without any checks, because the buffer is in system space (its address is absolute - the same from
any process context), and in any IRQL, because the buffer is allocated from non-paged pool, so it
cannot be paged out.
4. Once the driver completes the IRP (IoCompleteRequest), the I/O manager (for read requests)
copies the system buffer back to the user’s buffer (the size of the copy is determined by the
IoStatus.Information field in the IRP set by the driver).
5. Finally, the I/O Manager frees the system buffer.
Chapter 7: The I/O Request Packet
201
You may be wondering how does the I/O Manager copy back the system buffer to the original
user’s buffer from IoCompleteRequest. This function can be called from any thread, in
IRQL Flags |= DO_DIRECT_IO;
As with Buffered I/O, this selection only affects read and write requests. For DeviceIoControl see the
next section.
Here are the steps involved in handling Direct I/O:
1. The I/O Manager first makes sure the user’s buffer is valid and then pages it into physical memory
(if it wasn’t already there).
2. It then locks the buffer in memory, so it cannot be paged out until further notice. This solves one
of the issues with buffer access - page faults cannot happen, so accessing the buffer in any IRQL is
safe.
3. The I/O Manager builds a Memory Descriptor List (MDL), a data structure that describes a buffer in
physical memory. The address of this data structure is stored in the MdlAddress field of the IRP.
4. At this point, the driver gets the call to its dispatch routine. The user’s buffer, although locked in
RAM, cannot be accessed from an arbitrary thread just yet. When the driver requires access to the