Certainly! Below is a more polished and professional version of the provided text, along with an improved code snippet:

---

**Simple Port Scanner in Python**

This guide provides a simple port scanner script written in Python. The script allows you to specify a target host and a range of ports to scan. It will then check each port within the specified range to determine if it is open and list all open ports.

### Code Implementation

```python
import socket

def scan_ports(host, start_port, end_port):
    """
    Scans the specified range of ports on the given host.
    
    :param host: The target host (IP address or hostname).
    :param start_port: The starting port number.
    :param end_port: The ending port number.
    """
    print(f"Scanning {host} from port {start_port} to {end_port}...")

    # Iterate through the specified port range
    for port in range(start_port, end_port + 1):
        # Create a new socket object
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.1)  # Set a timeout for the connection attempt
        
        try:
            # Attempt to connect to the host and port
            s.connect((host, port))
            print(f"Port {port} is open")
        except (socket.timeout, ConnectionRefusedError):
            # If the connection fails, the port is closed
            pass
        finally:
            # Close the socket
            s.close()

if __name__ == "__main__":
    # Get user input for the host and port range
    host = input("Please enter the target host (IP address or hostname): ")
    start_port = int(input("Please enter the starting port number: "))
    end_port = int(input("Please enter the ending port number: "))

    # Perform the port scan
    scan_ports(host, start_port, end_port)
```

### How to Use the Script

1. **Run the Script**: Execute the script in your Python environment.
2. **Enter Host Information**: When prompted, enter the target host (either an IP address or a hostname).
3. **Specify Port Range**: Enter the starting and ending port numbers to define the range of ports to scan.
4. **View Results**: The script will output the open ports within the specified range.

### Notes

- **Timeout Setting**: The `settimeout` method is used to set a timeout for the connection attempt. This helps to avoid long waits for unresponsive ports.
- **Error Handling**: The script handles common exceptions such as `socket.timeout` and `ConnectionRefusedError` to ensure that the scanning process continues even if some ports are not responsive.

This simple port scanner is a useful tool for network administrators and security professionals to quickly identify open ports on a target host.

---