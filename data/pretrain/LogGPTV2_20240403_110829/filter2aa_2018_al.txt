multiples of the same ticket existed for di↵erent cache entries, but mapped to
di↵erent master key values. Intuitively, this is not possible for successful cache
operation; the ticket is meant to be unique, and contains the master key as part of
the state within the ticket. By virtue of a sound encryption scheme, di↵erent
masker keys would necessitate a di↵erent ticket, as a single bit changed in the
plaintext state would cause a massive change in the ciphertext.
Wireshark can decrypt sessions that employ session tickets, but it does so by
mapping them to the client random. Because the session cache does not appear to
maintain a relationship with the client random (as, after all, it used the ticket for a
unique identiﬁer and it caches the master key that was derived with the client
random), this means that manual decryption of items using session tickets is
currently required. It would be feasible, though outside the scope of this thesis, to
programmatically enable this by extending Wireshark through its scripting engine.
4.8 Schannel Classes
Extrapolating from the use of the vftable symbol as a class marker, the
Schannel symbols were searched for other vftable symbols to enumerate classes,
which yielded several classes of interest. There were two entries containing the word
“Key”: “CSslServerKey” and “CSslEphemKeyData.” Noting the similarity to 4lss
and 6lss respectively, this was investigated.
The ﬁrst entry in CSslServerKey after the vftable pointer was a pointer to an
NcryptSslKey that in turn pointed to a 4lss struct. Similarly, the ﬁrst entry in
CSslEphemData after the vftable pointed to an NcryptSslKey that pointed to a 6lss
struct.
85
Another set that were interesting were those that used the term
“Credential.” Two classes with this in the title had interesting names:
“CSslCredential” and “CCredentialGroup,” both of which had instantiations that
were memory resident. A pointer to CSslCredential was found within the
CSslCacheServerItem structure. A pointer to CCredentialGroup was found inside of
another identiﬁed class: “CSchannelTelemetryContext.” This telemetry class was
found to also contain the session ID (when session tickets were not employed), but it
did not reliably exist across samples. In addition to the session ID, this class was
observed to contain the TLS version, cipher suite, and the Server Name Indicator,
amongst other values. It seems, purely speculatively, that it may exist for active
connections, though this is truly anecdotal.
The “CSchannelTelemetryContext” class, when present, also pointed to
either “CSchannelClientTelemetryContext” or “CSchannelServerTelemetryContext.”
4.9 Schannel Parameters
While looking at the Schannel binary, several strings of interest were found
in the .rdata section. Nominally, the following three string contained the text
“cache,” bearing possible relation to the classes discovered previously:
“ClientCacheTime,” “ServerCacheTime,” and “MaximumCacheSize.”
As the strings are resident in the so-named “read-only data” section of the
binary, it seemed that they may not be variables to be modiﬁed, but possibly used
as a comparator against something like a registry key (e.g. as an existence check of
a regisrty value that overrides the default value). The strings were also reminiscent
of the “hard-coded” values alluded to by Checkoway and others in their Dual EC
paper. They speciﬁcally note that “SChannel caches ephemeral keys for two hours
(this timeout is hard-coded in the conﬁgurations we examined)” (Checkoway et al.,
2014, p. 8) and referenced a value of 20,000 when discussing the generation of
session IDs (Checkoway et al., 2014, p. 9).
86
Searching MSDN revealed that these values are indeed registry settings, with
default values that can be overridden (Microsoft, 2015e). A section deﬁning the
ClientCacheTime setting contains the following excerpt:
The ﬁrst time a client connects to a server through the Schannel SSP, a
full TLS handshake is performed. When this is complete, the master
secret, cipher suite, and certiﬁcates are stored in the session cache on the
respective client and server. (Microsoft, 2015e, p. 1)
This statement corroborates the independent ﬁndings of the thesis.
Table 4.2 contains the default values for the Client/Server cache time, per
Microsoft’s documentation (Microsoft, 2003b, 2015e):
Table 4.2. Client and server SSL cache time
OS Version
ClientCacheTime
ServerCacheTime
Windows 8.1
10 Hours
10 Hours
Windows Server 2012 R2
10 Hours
10 Hours
Windows 8
10 Hours
10 Hours
Windows Server 2012
10 Hours
10 Hours
Windows 7
10 Hours
10 Hours
Windows Server 2008 R2
10 Hours
10 Hours
Windows Vista
10 Hours
10 Hours
Windows XP
10 Hours
10 Hours
Windows 2000 SP2
10 Hours
10 Hours
Windows 2000 SP1
2 Minutes
2 Minutes
Windows NT 4.0 SP6a + Q265369
1 Hour
5 Minutes
Windows NT 4.0 SP6a
2 Minutes
2 Minutes
These default values can also be found in the .rdata section of the binary.
Searching for the dword 0x00004e20 (20,000) in Schannel matched exactly on the
87
symbol “schannel!CSslGlobals::m dwMaximumEntries.” Likewise, searching for the
dword 0x02255100 (10 hours in milliseconds) returned exact matches on the
symbols “schannel!CSslGlobals::m dwSessionTicketLifespan,”
“schannel!CSslGlobals::m dwServerLifespan,” and
“schannel!CSslGlobals::m dwClientLifespan.”
The outcome is that a captured connection created using Schannel, even if it
uses an ephemeral key exchange, can be decrypted by plundering the cache entry of
either party up to 10 hours after the connection was initiated, for up to 20,000
entries. It also means that the loose ﬁngerprint present for Schannel-generated
session IDs can be altered by creating the registry key that overrides the cache size
and setting it to something other than 20,000.
4.10 Scanning Physical Memory
After exhausting those master key entries within the LSASS process space,
scanning was then performed on the physical address space with bulk extractor’s
lightgrep scanner. Interestingly, about twice as many seemingly valid SSL structures
appeared. About half of these were duplicates of known master keys, but some were
unique to those found within LSASS. Those not resident in the LSASS process
space (i.e. the other structures) were not aligned on 32-bit or 64-bit boundaries
(respective of the system), whereas those that were identiﬁed in the LSASS process
space were byte aligned. Volatility was leveraged to scan all other processes in the
same memory image for instances of the ssl5 struct, but did not return the results
that were identiﬁed with bulk extractor from physical memory.
4.11 Automating Extraction
While the WinDbg one-liner is a semi-automation solution, it isn’t can’t be
applied across other memory samples without signiﬁcant alteration to the sample.
To that end, the Volatility and Rekall frameworks were leveraged to make the PoC
88
ﬂexible. Rekall was initialy favoured for development because of its philosophical
approach and embrace of symbols; however, during some preliminary examinations,
Rekall would not parse the test Windows 10 VMEM ﬁles correctly, whereas Volatiliy
did. This could be due to some peculiarity of the testers environment, however, the
latest release version and master branch from the projects git repository were tested
on Windows, Linux, and Mac environments to the same e↵ect.
Volatility was extended through a plug-in that dumps the session IDs and
master keys into the format that Wireshark accepts, allowing a single ﬁle to be
imported to decrypt packet captures containing sessions that were in the cache.
Because Volatility does not currently support the dynamic downloading and
extraction of symbols in the either the release version or master branch from its git
repository, a di↵erent algorithm was leveraged to extract cache items. Speciﬁcally,
because each cache entry maintains a one-to-one relationship with an NcryptSslKey
structure, which maintains a one-to-one relationship with a master key structure,
one can walk those structures backwards. This is ineﬃcient, however, because it
involves scanning the entire address space three times instead of one time, followed
by two dereferences.
For eﬃciency, the plugins scans for NcryptSslKey and checks if they point to
master keys, and then scans for pointers to the NcryptSslKey that do. This saves an
extra iteration of scanning the entire address space. The address space itself is
limited by only scanning VADs that have read-write permissions. This was chosen
as a precautionary middle ground between only scanning the heaps and scanning the
full address space, e↵ectively checking the writable address space within the process.
The real issue is detecting the vftable class identiﬁer without symbols, which
was addressed successfully but imperfectly. In order to identify a valid cache entry,
the identiﬁed pointer to the NcryptSslKey is instantiated as a cache item, and then
the pointer that should reference the vftable is tested. It is tested to see if it points
to Schannel’s .rdata section, which would rule out any invalid address, but does not
rule out. Currently, this has been completely Using rekall’s method of scanning for
89
the RSDS signature2, downloading the appropriate symbol ﬁle, and locating the
exact address would alleviate this concern.
The next issue is determining whether or not a cache entry is a server cache
item or a client cache item. This is done currently by checking a ﬂag present within
the master key structure that, in testing, was always zero for server cache entries
and one for client cache entries. This too is imperfect, but has proven functional in
all tests. As the client and server caches that employ session IDs store them at the
same o↵set, this only becomes problematic when looking for session tickets or other
structure speciﬁc information.
The ﬁnal issue is how to handle cache items with session tickets instead of
session IDs. This was accomplished by adding the capability to recognize valid
cache items that don’t have a session ID but do have a session ticket pointer and
enable printing them as debugging information, but not printing them by default. If
it is found that a relationship does persist for the client random and the session
tickets, then this could be extended to print in the format that Wireshark expects,
as the session ID entries do. One could also extend Wireshark to handle this
through its scripting engine, as has been pointed out earlier.
The result is a plug-in that successfully identiﬁes and extracts the required
information from the cache to decrypt a session with Wireshark when employing
session IDs. Items that use session tickets can be recognized and decrypted with
Wireshark more manually, but require a packet capture containing the client
random value. The plug-in is named “LSASSLKey,” and the result of running the
plug-in can be seen in Figure 4.21.
2The RSDS is a unique GUID that changes every time the binary is compiled, when this feature
is enabled, as it is by default on all Microsoft binaries
90
> vol.exe --plugins=./plugins --profile=Win10x64 -f Win10-Test-c2a4a77d.vmem lsasslkey
Volatility Foundation Volatility Framework 2.5
RSA Session-ID:b93c0000a110690b4ae9111bce5725c6c47a037b3c39c49c75ce51e1c2eb79ee Master-Key:
bc28467999b99fd3fdf3a24642c5d93b9ab43e51627f6e0145ef120ba98a1c3223f3dbe0154e30d7869bdb7ab66f5318
RSA Session-ID:173300000f84a86aebb2c5de0af20e6d5c2cab95ab65043e14c6e19cee54ee17 Master-Key:9
dd750e12e6e4439b08326d4a1f9eba2d2fe65c2a26c2088e7cec22ce1d91e9f219b704547a2b2eccb9a81d557d5ae1a
RSA Session-ID:3c2c000024b8f70dd2613d8b13d0c4ac4daaefbe53ab4b7cb9763e80feccb4f1 Master-Key:2
d119c64695ffc9c143c136471f5625d8cde92d35721f5f2849b92639603799a45e1e601786cbf89b00c186969d44983
RSA Session-ID:d4170000da09f8596739215e216c496568fa66e42ac32b974d440949dff33d2b Master-Key:44
b503bef7842ea9a416fbf8b63b932b23b7b687fbf5297b253eac427877c8e11595e14c3f00c40bf2a0f4688de0b7aa
RSA Session-ID:432a0000bf4f622f0fc119974a0ef30cd838c3a025b83abbdcdbce7b2325d2d9 Master-Key:552699
d61e21d1b871af4b05a54003bf03eade60666dd1e54b94c3b5ec98f296db4ae99baed4e23882175e5ffd88be31
RSA Session-ID:6f230000a021aac48d15544524c1454e4ec01d5adb305d8d9d57ab2b991dd597 Master-Key:8
bc9e9df653e3cbf533be84c6897787bd453b8cee9d5389e9c3659ebf997d9c8d0666aadca5be2258f30b9251215a717
Figure 4.21. Volatility LSASSLKey plug-in output
4.12 Decrypting a TLS session
Decrypting a TLS connection was now trivial, and simply involved directing
Wireshark to use the output from the Volatility plugin, and opening the associated
packet capture. The decrypted RDP session can be seen in Figure 4.22
91
Figure 4.22. Decrypted RDP session
92
CHAPTER 5. CONCLUSIONS
This thesis answered the question of whether connection parameters exist in
the memory of modern Windows systems to retroactively decrypt sessions, aﬃrming
that the requisite parameters do exist. A process for reliably extracted the master
key paired with a unique connection parameter was developed. This process was
then implemented in a technical solution atop one of the community accepted
memory forensic frameworks. The author achieved this result by systematically
identifying and reverse engineering data structures per the outlined methodology,
with several deviations that will likely be incorporated into future work. Finally,
ancillary ﬁndings about the tools used, and other related structures were identiﬁed,
which may also contribute to future work.
5.1 Summary of Outcomes
A summary of the outcomes of the thesis is as follows:
• Cached TLS/SSL master keys were identiﬁed and related to the session ID or
session ticket
• An automated method for extracting these artifacts into a form compatible
with Wireshark was developed as a PoC atop of the Volatility framework
• Ancillary structures that provided additional context about the connection,
including the public certiﬁcates, cipher suite were identiﬁed
• Methods that leverage symbol parsing, the vftable for object scanning, and
validation functions / error codes were discussed to improve upon the original
methodology
• Other structures, such as the session key structure and the client-server
random values, were identiﬁed, but not linked contextually to speciﬁc sessions
93
5.2 Contributions
Prior to this research there was no publicly available or discussed mechanism
for extracting master keys and private keys from main memory of Windows hosts,
and no mechanism existed for decrypting ephemeral connections retroactively on
Windows hosts. The author has contributed both a method that is generalizable
across Windows Vista to Windows 10 which enables retroactive decryption of
ephemeral connections and provided a PoC implementation of this method through
one of the main memory analysis frameworks, Volatility. This implementation
addresses the use cases documented in the Signiﬁcance section of Chapter One.
In so doing, the author also documented otherwise undocumented structures
used by Schannel and the cryptographic libraries for managing key material and
session related artifacts. This information can be leveraged by other analysts to
develop further research and contribute to the ﬁeld.
The implementation developed is easy to use and dumps output to a
Wireshark compatible format for decryption by default. This is designed to be
approachable for practitioners such as LEOs who may have had limited technical
training or exposure.
The cache items can live up to 10 hours by default, which may also outlive
the current connection identiﬁcation methods employed in Volatility and Rekall.
There may also be 20,000 entries by default for both the client and server caches,
which could provide a wealth of information previously not accessed. Session
Tickets were also noted to live 10 hours by default, which indicates that the key to
decrypt them should live on the server for at least 10 hours as well.
The methods described enable linking the TLS version and cipher suite to
unique connection identiﬁers. Tying cipher suites and protocol versions to
connections can help identify exploitative or anomalous connections. For example,
SSL downgrade attacks like “POODLE” and weak cipher suite parameters like those
used in “LogJam” and “FREAK” would be apparent when observing the caches.
94
The public certiﬁcate and server name indicator (SNI) seems to exist in the
client cache for connections that are made to virtual hosts sharing a single IP
address. Authors of the MiTLS website, which includes members of the Microsoft
Research team and is dedicated to identifying and mitigating attacks against SSL
and TLS, note that “Because of the popularity of cloud hosting and content delivery
networks, it is increasingly common for webservers to serve several websites on the
same IP address” (miTLS, n.d., p. 1). Other current OS-based connection
identiﬁcation mechanisms that exist within Volatility only operate at Layer 4 of the
OSI model and below. This means that they cannot currently make the distinction
between multiple virtual hosts co-located at the same IP address when observing
connections.
The presence of an entry in the server cache of a host that is supposed to be
a client could be an indicator of compromise, and this is almost guaranteed to live
for the full 10 hours of the cache default. The information in the server cache of a