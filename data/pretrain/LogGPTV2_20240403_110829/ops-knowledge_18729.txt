User: Some file read (readlines()) functions in Python
copy the file contents to memory (as a list)  
I need to process a file that's too large to
be copied in memory and as such need to use
a file pointer (to access the file one byte
at a time) -- as in C getc().  
The additional requirement I have is that
I'd like to rewind the file pointer to previous
bytes like in C ungetc().  
Is there a way to do this in Python?  
Also, in Python, I can read one line at a
time with readline()  
Is there a way to read the previous line
going backward?
Assistant: The question was initially prompted by my need to build a lexical analyzer.
getc() and ungetc() are useful at first (to get the read bugs out the way and
to build the state machine)  After the state machine is done,
getc() and ungetc() become a liability as they take too long to read
directly from storage.  
When the state machine was complete (debugged any IO problems,
finalized the states), I optimized the lexical analyzer.  
Reading the source file in chunks (or pages) into memory and running
the state machine on each page yields the best time result.
I found that considerable time is saved if getc() and ungetc() are not used
to read from the file directly.