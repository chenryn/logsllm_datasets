### Vector and Packet-Level Iterative Updates

Vectors and related parameters are updated iteratively at the packet level. For their experiments, they analyzed data extracted from WeChat, WhatsApp, and Facebook. Conti et al. [11, 12] proposed a system to analyze encrypted network traffic to identify user actions on Android devices, such as email exchanges and social network interactions. Their framework leverages information available in TCP/IP packets, including IP addresses, ports, and other features like packet size, direction, and timing. They analyzed various Android applications, such as Gmail, Facebook, Twitter, Tumblr, and Dropbox. Using machine learning techniques, their experiments demonstrated that the system can achieve accuracy and precision higher than 95% for several user actions. While our work is based on similar principles (i.e., the feasibility of user activity identification over encrypted network traffic based on packet trains), we advance the state-of-the-art by:
- Proposing a novel expressive pattern language specification.
- Building a scalable and optimized implementation, which was integrated into our proprietary DPI engine and tested on real-world traffic volumes.
- Showing that rule extraction is amenable to data mining techniques.

### Application Identification and Classification

In this work, we focus on fine-grained event identification within the traffic of an application, relying on application identification methods such as server IP address ranges or metadata available in plaintext, such as the Server Name Indication (SNI) header in TLS traffic or plaintext information in exchanged certificates. There is a significant body of work on automating application identification or classifying the nature of traffic (e.g., video streaming), primarily using machine learning approaches, and often applicable to encrypted traffic [4, 6, 9, 17, 20, 23, 27, 30, 31, 36, 40, 41].

### Endpoint Device Tools

We used tools running on endpoint devices to collect ground truth samples. Here, we survey a few related tools:
- **Haystack [28]**: A mobile application distributed via popular app stores that correlates contextual information such as app identifiers and radio state with specific traffic flows (encrypted or not) destined to remote services, providing insights into mobile application performance, privacy, and security.
- **ProfileDroid [37]**: A monitoring and profiling system that characterizes the behavior of Android applications at the static, user, OS, and network layers.
- **TaintDroid [16]**: A system that performs dynamic information-flow tracking to identify privacy leaks.

### Traffic Analysis Resistance

Efforts have been made to create protocols, networks, and applications that provide anonymity and privacy guarantees against traffic analysis. Some notable systems include:
- **Dissent [38]** and **Riposte [13]**: Systems that provide strong guarantees by using message broadcasting, protecting packet metadata but facing scalability issues.
- **Herd [22]**: A system that provides anonymity for VoIP calls, addressing some limitations of more general-purpose anonymity networks like Tor [15].
- **Vuvuzela [32]** and **Atom [21]**: More scalable systems (thousands of messages for millions of users) that employ differential privacy to inject noise into observable metadata.
- **AnonRep [43]**: Builds on top of these guarantees for reputation/voting systems.
- **TARN [42]**: Randomizes IP addresses.
- **TARANET [10]**: Employs packet mixing and splitting to achieve constant-rate transmission.

### Ethical Considerations

Given the potential ethical concerns of our study, we dedicate this section to discussing how we avoid abusing personal and private information. During offline testing, we processed samples collected using non-personal mobile devices and non-private accounts, explicitly for the purposes of this experiment. Thus, there should be no privacy concerns regarding the data processed during this phase.

During online testing, we minimized the information collected by the system to include only the number of matches per rule, without any personally identifiable information. No additional information was retrieved from the system besides performance measurements. All troubleshooting was conducted based on our own collected offline traces.

This study is motivated by benign uses such as customer experience/QoS assessment, data leakage detection, and policy enforcement (e.g., embargo on voice). However, it could be misused, as discussed extensively in the literature. Therefore, we strongly recommend that privacy-sensitive applications take precautions. We intentionally limited the scope of this work to a single direction of communication—only message sending—to avoid the possibility of correlating the user pairs that send and receive messages simultaneously, thus preventing the recovery of communication graphs.

### Conclusion

In this work, we discussed fine-grained identification of application events over encrypted network traffic, focusing on scalability and maintainability. We demonstrated that:
- A simple regex-inspired language is expressive enough to achieve a minimum hit rate of 84%.
- Our DPI engine can scale to 130 Gbps per node with no more than 10% extra CPU utilization.
- Rule extraction is amenable to data mining techniques.

Prior work has shown the feasibility of such techniques. Our work focuses on a real-world implementation because we believe that, just like substring pattern matching, packet train matching is a requirement in a state-of-the-art network monitoring system, even if techniques such as encryption and traffic analysis resistance (Sect. 6) exist to evade them.

### Acknowledgements

The authors would like to thank their shepherd Roya Ensafi.