使用JS Beautifier解析精简后的JavaScript代码
在执行反混淆处理时，尤其是在逆向分析恶意软件时，没有哪种工具和技术可以解决所有问题。因此，我们将不得不尝试各种工具、反混淆方法，甚至进行手动分析。在对JavaScript代码进行反混淆处理时，有各种工具可用。我们经常使用的一些工具是[JStillery](https://github.com/mindedsecurity/JStillery
"JStillery")、[JSDetox](http://relentless-coding.org/projects/jsdetox
"JSDetox")、[JS-Beautifier](https://github.com/einars/js-beautify "JS-Beautifier")、[IlluminateJs](https://github.com/geeksonsecurity/illuminatejs
"IlluminateJs")、[JSNice](http://www.jsnice.org/ "JSNice")等。
**在JavaScript代码中寻找感兴趣的信息**
* * *
1.在JavaScript文件中寻找的关键信息之一就是端点信息，即完整的URL、相对路径等。
    识别完整的URL、JavaScript文件中的相对路径能帮助我们发现攻击面，进而找到更多的安全漏洞
-[Jobert Abma](https://github.com/jobertabma/ "Jobert Abma")提供的[relative-url-extractor](https://github.com/jobertabma/relative-url-extractor "relative-url-extractor")工具能够非常方便快速地找出JavaScript文件中的所有相对路径。这个工具可以在本地和远程JavaScript文件上使用。此外，该工具还可以直接用于经过精简处理的JavaScript代码。
使用relative-url-extractor工具从远程JS文件中提取相对路径
-在识别JavaScript文件中的所有端点及其参数方面，[Gerben Javado](https://github.com/GerbenJavado "Gerben Javado")提供的[LinkFinder](https://github.com/GerbenJavado/LinkFinder "LinkFinder")工具用起来也非常方便。该工具也能直接用于经过精简处理的JavaScript代码，它会通过jsbeautifier来解析JavaScript代码。此外，还可以将其用于域名，以枚举所有JavaScript文件。
    python linkfinder.py -i https://example.com -d -o cli
使用LinkFinder从应用程序的所有JS文件中提取端点信息
  1. [CloudScraper](https://github.com/jordanpotti/CloudScraper "CloudScraper")是一种搜索云资源的工具，可以用来抓取目标。该搜索过程的副产品是，该工具还可以识别托管在云服务（如Amazon S3 Buckets）上的所有JavaScript文件。此外，该工具还可以查看JavaScript文件内容，进而寻找对云资源的引用。
使用CloudScraper识别源代码中的云资源
  1. JavaScript文件还可能包含敏感信息，如凭据和API密钥。从广义上讲，我们可以使用正则表达式或熵来识别源代码文件中的秘密。正则表达式搜索方法，将能够识别用户设置的相关凭据，例如用户名和密码。基于熵的搜索方法，在识别随机性较大的秘密（例如API密钥和令牌）信息方面是非常有效的。
  2. [truffleHog](https://github.com/dxa4481/truffleHog "truffleHog")是一个在源代码文件中搜索秘密信息的神奇工具。该工具支持基于熵和基于正则表达式的搜索。在正则表达式搜索方法和熵搜索方法中，truffleHog还能够轻松实现高度的定制化。
  3. 但是，千万不要忘记，在搜索源代码文件的特定敏感信息时，grep/sed/awk命令的功能也非常强大。
4.在查看JavaScript文件时，重要的是识别代码中的危险区域，即开发人员往往会犯错误的地方，安全问题往往就在这里。
  * innerHTML的应用意味着可能存在XSS漏洞。在现代客户端的JavaScript框架中，确实存在innerHTML的等价物，例如在React框架中恰当命名的dangerouslytSetInnerHTML，[在过去它们确实会导致严重的安全漏洞](https://thehackerblog.com/i-too-like-to-live-dangerously-accidentally-finding-rce-in-signal-desktop-via-html-injection-in-quoted-replies/index.html "在过去它们确实会导致严重的安全漏洞")。在Angular中，如果bypassSecurityTrustX方法使用不当，也会导致XSS问题。此外，在客户端和服务器端，eval函数都是一个容易出现安全问题的地方。
Angular中的bypassSecurityTrustX方法列表
  * [postMessage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage "postMessage API")是JSONP、带有CORS头部的XHR和其他方法的替代品，可以通过绕过同源策略（SOP），在不同的域之间发送数据。如果不仅能够绕过SOP，并且还能与不同域进行通信的话，这些正是攻击者所梦寐以求的。使用postMessage时，也存在各种[安全隐患](https://labs.detectify.com/2016/12/08/the-pitfalls-of-postmessage/ "安全隐患")。一旦知道了与postMessage相关的潜在安全问题，就可以在JavaScript文件中查找相关的实现代码了。在消息发送方，可以查找window.postMessage方法，而在接收方，则可以查找监听器window.addEventListener。需要牢记的是，很多框架都对postMessage实现了封装。
  * localStorage和sessionStorage是HTML Web存储对象。通过web存储，Web应用程序可以在用户的浏览器中本地存储数据。通过Web存储来识别其中存储的是哪些内容是非常重要的，因为其中一旦存储了敏感内容，就可能导致潜在的安全问题。为吃，我们可以在JavaScript中查找window.localStorage和window.sessionStorage方法。
在JavaScript中寻找可能导致潜在安全问题的危险代码高度依赖于正在使用的框架。我们应该首先确定使用了哪些框架，接着识别框架中的危险函数，然后就可以在源代码中查找它们了。
5。使用安全linter和静态安全扫描器可以很轻松地识别JavaScript代码中的容易识别的安全漏洞。[JSPrime](https://github.com/dpnishant/jsprime
"JSPrime")是一个静态分析工具，用于查找JavaScript代码中的安全隐患，但是该项目已经有一段时间没有更新了。[ESLint](https://github.com/eslint/eslint
"ESLint")是最流行的JavaScript
linter之一。通过添加自定义[规则](https://github.com/LewisArdern/eslint-plugin-angularjs-security-rules "规则")，ESLint很容易定制。ESLint有很多自定义安全规则，特别是针对Angular、React等现代框架的规则。
ESLint利用Angular的安全规则找到的潜在安全问题
6.在进行安全评估时，识别应用程序中使用的过时的和易受攻击的JavaScript框架/库是非常重要的一件事情。[Retire.js](https://retirejs.github.io/retire.js/
"Retire.js")是一个可以识别正在使用的过时JavaScript框架的工具。该工具可用作独立工具、浏览器插件、grunt插件或Burp/ZAP插件。如果您以用户驱动的方式执行测试，则RetireJS
Burp插件会特别有用。由于RetireJS会出现误报，因此RetireJS报告的库并非都是易受攻击的。
RetireJS的Burp suite插件报告了一个过时的JavaScript库
**小结**
* * *
在本文中，我们介绍了一种对客户端JavaScript代码进行静态分析的通用方法。在这里，我们给出了一个完整的工作流程，包括从收集JavaScript文件到使用JavaScript代码查找安全问题的整个过程，希望对大家能够有所帮助。
**参考资料**
* * *
[Performing JavaScript Static Analysis by Lewis Ardern
[Video]](https://www.youtube.com/watch?v=mGUsCAWwLGg&t=2601s "Performing
JavaScript Static Analysis by Lewis Ardern \[Video\]")  