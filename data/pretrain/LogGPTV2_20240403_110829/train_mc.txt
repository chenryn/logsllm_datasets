.ir e_type
this member of the structure identifies the object file type:
.rs
.tp 16
.pd 0
.br et_none
an unknown type.
.tp
.br et_rel
a relocatable file.
.tp
.br et_exec
an executable file.
.tp
.br et_dyn
a shared object.
.tp
.br et_core
a core file.
.pd
.re
.tp
.ir e_machine
this member specifies the required architecture for an individual file.
for example:
.rs
.tp 16
.pd 0
.br em_none
an unknown machine
.\" 0
.tp
.br em_m32
at&t we 32100
.\" 1
.tp
.br em_sparc
sun microsystems sparc
.\" 2
.tp
.br em_386
intel 80386
.\" 3
.tp
.br em_68k
motorola 68000
.\" 4
.tp
.br em_88k
motorola 88000
.\" 5
.\" .tp
.\" .br em_486
.\" intel 80486
.\" 6
.tp
.br em_860
intel 80860
.\" 7
.tp
.br em_mips
mips rs3000 (big-endian only)
.\" 8
.\" em_s370
.\" 9
.\" .tp
.\" .br em_mips_rs4_be
.\" mips rs4000 (big-endian only). deprecated
.\" 10
.\" em_mips_rs3_le (mips r3000 little-endian)
.\" 10
.tp
.br em_parisc
hp/pa
.\" 15
.tp
.br em_sparc32plus
sparc with enhanced instruction set
.\" 18
.tp
.br em_ppc
powerpc
.\" 20
.tp
.br em_ppc64
powerpc 64-bit
.\" 21
.tp
.br em_s390
ibm s/390
.\" 22
.tp
.br em_arm
advanced risc machines
.\" 40
.tp
.br em_sh
renesas superh
.\" 42
.tp
.br em_sparcv9
sparc v9 64-bit
.\" 43
.tp
.br em_ia_64
intel itanium
.\" 50
.tp
.br em_x86_64
amd x86-64
.\" 62
.tp
.br em_vax
dec vax
.\" 75
.\" em_cris
.\" 76
.\" .tp
.\" .br em_alpha
.\" compaq [dec] alpha
.\" .tp
.\" .br em_alpha_exp
.\" compaq [dec] alpha with enhanced instruction set
.pd
.re
.tp
.ir e_version
this member identifies the file version:
.rs
.tp 16
.pd 0
.br ev_none
invalid version
.tp
.br ev_current
current version
.pd
.re
.tp
.ir e_entry
this member gives the virtual address to which the system first transfers
control, thus starting the process.
if the file has no associated entry
point, this member holds zero.
.tp
.ir e_phoff
this member holds the program header table's file offset in bytes.
if
the file has no program header table, this member holds zero.
.tp
.ir e_shoff
this member holds the section header table's file offset in bytes.
if the
file has no section header table, this member holds zero.
.tp
.ir e_flags
this member holds processor-specific flags associated with the file.
flag names take the form ef_`machine_flag'.
currently, no flags have been defined.
.tp
.ir e_ehsize
this member holds the elf header's size in bytes.
.tp
.ir e_phentsize
this member holds the size in bytes of one entry in the file's
program header table; all entries are the same size.
.tp
.ir e_phnum
this member holds the number of entries in the program header
table.
thus the product of
.ir e_phentsize
and
.ir e_phnum
gives the table's size
in bytes.
if a file has no program header,
.ir e_phnum
holds the value zero.
.ip
if the number of entries in the program header table is
larger than or equal to
.\" this is a linux extension, added in linux 2.6.34.
.br pn_xnum
(0xffff), this member holds
.br pn_xnum
(0xffff) and the real number of entries in the program header table is held
in the
.ir sh_info
member of the initial entry in section header table.
otherwise, the
.ir sh_info
member of the initial entry contains the value zero.
.rs
.tp
.br pn_xnum
this is defined as 0xffff, the largest number
.ir e_phnum
can have, specifying where the actual number of program headers is assigned.
.pd
.re
.tp
.ir e_shentsize
this member holds a sections header's size in bytes.
a section header is one
entry in the section header table; all entries are the same size.
.tp
.ir e_shnum
this member holds the number of entries in the section header table.
thus
the product of
.ir e_shentsize
and
.ir e_shnum
gives the section header table's size in bytes.
if a file has no section
header table,
.ir e_shnum
holds the value of zero.
.ip
if the number of entries in the section header table is
larger than or equal to
.br shn_loreserve
(0xff00),
.ir e_shnum
holds the value zero and the real number of entries in the section header
table is held in the
.ir sh_size
member of the initial entry in section header table.
otherwise, the
.ir sh_size
member of the initial entry in the section header table holds
the value zero.
.tp
.ir e_shstrndx
this member holds the section header table index of the entry associated
with the section name string table.
if the file has no section name string
table, this member holds the value
.br shn_undef .
.ip
if the index of section name string table section is
larger than or equal to
.br shn_loreserve
(0xff00), this member holds
.br shn_xindex
(0xffff) and the real index of the section name string table section
is held in the
.ir sh_link
member of the initial entry in section header table.
otherwise, the
.ir sh_link
member of the initial entry in section header table contains the value zero.
.\"
.ss program header (phdr)
an executable or shared object file's program header table is an array of
structures, each describing a segment or other information the system needs
to prepare the program for execution.
an object file
.ir segment
contains one or more
.ir sections .
program headers are meaningful only for executable and shared object files.
a file specifies its own program header size with the elf header's
.ir e_phentsize
and
.ir e_phnum
members.
the elf program header is described by the type
.i elf32_phdr
or
.i elf64_phdr
depending on the architecture:
.pp
.in +4n
.ex
typedef struct {
    uint32_t   p_type;
    elf32_off  p_offset;
    elf32_addr p_vaddr;
    elf32_addr p_paddr;
    uint32_t   p_filesz;
    uint32_t   p_memsz;
    uint32_t   p_flags;
    uint32_t   p_align;
} elf32_phdr;
.ee
.in
.pp
.in +4n
.ex
typedef struct {
    uint32_t   p_type;
    uint32_t   p_flags;
    elf64_off  p_offset;
    elf64_addr p_vaddr;
    elf64_addr p_paddr;
    uint64_t   p_filesz;
    uint64_t   p_memsz;
    uint64_t   p_align;
} elf64_phdr;
.ee
.in
.pp
the main difference between the 32-bit and the 64-bit program header lies
in the location of the
.ir p_flags
member in the total struct.
.tp
.ir p_type
this member of the structure indicates what kind of segment this array
element describes or how to interpret the array element's information.
.rs 10
.tp
.br pt_null
the array element is unused and the other members' values are undefined.
this lets the program header have ignored entries.
.tp
.br pt_load
the array element specifies a loadable segment, described by
.ir p_filesz
and
.ir p_memsz .
the bytes from the file are mapped to the beginning of the memory
segment.
if the segment's memory size
.ir p_memsz
is larger than the file size
.ir p_filesz ,
the
"extra"
bytes are defined to hold the value 0 and to follow the segment's
initialized area.
the file size may not be larger than the memory size.
loadable segment entries in the program header table appear in ascending
order, sorted on the
.ir p_vaddr
member.
.tp
.br pt_dynamic
the array element specifies dynamic linking information.
.tp
.br pt_interp
the array element specifies the location and size of a null-terminated
pathname to invoke as an interpreter.
this segment type is meaningful
only for executable files (though it may occur for shared objects).
however it may not occur more than once in a file.
if it is present, it must precede any loadable segment entry.
.tp
.br pt_note
the array element specifies the location of notes (elfn_nhdr).
.tp
.br pt_shlib
this segment type is reserved but has unspecified semantics.
programs that
contain an array element of this type do not conform to the abi.
.tp
.br pt_phdr
the array element, if present,
specifies the location and size of the program header table itself,
both in the file and in the memory image of the program.
this segment type may not occur more than once in a file.
moreover, it may
occur only if the program header table is part of the memory image of the
program.
if it is present, it must precede any loadable segment entry.
.tp
.br pt_loproc ", " pt_hiproc
values in the inclusive range
.rb [ pt_loproc ", " pt_hiproc ]
are reserved for processor-specific semantics.
.tp
.br pt_gnu_stack
gnu extension which is used by the linux kernel to control the state of the
stack via the flags set in the
.ir p_flags
member.
.re
.tp
.ir p_offset
this member holds the offset from the beginning of the file at which
the first byte of the segment resides.
.tp
.ir p_vaddr
this member holds the virtual address at which the first byte of the
segment resides in memory.
.tp
.ir p_paddr
on systems for which physical addressing is relevant, this member is
reserved for the segment's physical address.
under
bsd
this member is
not used and must be zero.
.tp
.ir p_filesz
this member holds the number of bytes in the file image of the segment.
it may be zero.
.tp
.ir p_memsz
this member holds the number of bytes in the memory image of the segment.
it may be zero.
.tp
.ir p_flags
this member holds a bit mask of flags relevant to the segment:
.rs
.tp
.pd 0
.br pf_x
an executable segment.
.tp
.br pf_w
a writable segment.
.tp
.br pf_r
a readable segment.
.pd
.re
.ip
a text segment commonly has the flags
.br pf_x
and
.br pf_r .
a data segment commonly has
.br pf_w
and
.br pf_r .
.tp
.ir p_align
this member holds the value to which the segments are aligned in memory
and in the file.
loadable process segments must have congruent values for
.ir p_vaddr
and
.ir p_offset ,
modulo the page size.
values of zero and one mean no alignment is required.
otherwise,
.ir p_align
should be a positive, integral power of two, and
.ir p_vaddr
should equal
.ir p_offset ,
modulo
.ir p_align .
.\"
.ss section header (shdr)
a file's section header table lets one locate all the file's sections.
the
section header table is an array of
.i elf32_shdr
or
.i elf64_shdr
structures.
the
elf header's
.ir e_shoff
member gives the byte offset from the beginning of the file to the section
header table.
.ir e_shnum
holds the number of entries the section header table contains.
.ir e_shentsize
holds the size in bytes of each entry.
.pp
a section header table index is a subscript into this array.
some section
header table indices are reserved:
the initial entry and the indices between
.b shn_loreserve
and
.br shn_hireserve .
the initial entry is used in elf extensions for
.ir e_phnum ,
.ir e_shnum ,
and
.ir e_shstrndx ;
in other cases, each field in the initial entry is set to zero.
an object file does not have sections for
these special indices:
.tp
.br shn_undef
this value marks an undefined, missing, irrelevant,
or otherwise meaningless section reference.
.tp
.br shn_loreserve
this value specifies the lower bound of the range of reserved indices.
.tp
.br shn_loproc ", " shn_hiproc
values greater in the inclusive range
.rb [ shn_loproc ", " shn_hiproc ]
are reserved for processor-specific semantics.
.tp
.br shn_abs
this value specifies the absolute value for the corresponding reference.
for
example, a symbol defined relative to section number
.br shn_abs
has an absolute value and is not affected by relocation.
.tp
.br shn_common
symbols defined relative to this section are common symbols,
such as fortran common or unallocated c external variables.
.tp
.br shn_hireserve
this value specifies the upper bound of the range of reserved indices.
the
system reserves indices between
.br shn_loreserve
and
.br shn_hireserve ,
inclusive.
the section header table does not contain entries for the
reserved indices.
.pp
the section header has the following structure:
.pp
.in +4n
.ex
typedef struct {
    uint32_t   sh_name;
    uint32_t   sh_type;
    uint32_t   sh_flags;
    elf32_addr sh_addr;
    elf32_off  sh_offset;
    uint32_t   sh_size;
    uint32_t   sh_link;
    uint32_t   sh_info;
    uint32_t   sh_addralign;
    uint32_t   sh_entsize;
} elf32_shdr;
.ee
.in
.pp
.in +4n
.ex
typedef struct {
    uint32_t   sh_name;
    uint32_t   sh_type;
    uint64_t   sh_flags;
    elf64_addr sh_addr;
    elf64_off  sh_offset;
    uint64_t   sh_size;
    uint32_t   sh_link;
    uint32_t   sh_info;
    uint64_t   sh_addralign;
    uint64_t   sh_entsize;
} elf64_shdr;
.ee
.in
.pp
no real differences exist between the 32-bit and 64-bit section headers.
.tp
.ir sh_name
this member specifies the name of the section.