in Lighttpd
1
2
3
ret = read(fd, &timeout_fd, sizeof(timeout_fd);
...
conn_close_idle(conns[timeout_fd]);
Listing 4: An example (read) of unauthenticated channels in
Memcached
attacker
the
could make fdarray[fd] point
to the
We will
show that
the function pointer
the
could fully con-
trol
if he knows the memory lay-
out. ev->fdarray is placed at a lower address of
ev->epoll_events. By setting fd = 4100,
the at-
tacker
re-
gion inside ev->epoll_events buffer (&fdarray[fd]
== &epoll_events[1].data.ptr). Since
con-
tent of epoll_events buffer
is controlled by the at-
tacker, he can then set epoll_events[1].data.ptr =
&(epoll_events[2]) and craft a valid fdnode struc-
ture there (set (fdnode)epoll_events[2].fd = fd to
pass the check in line 12 and 13). Finally, the attacker can
set (fdnode)epoll_events[2].handler to any code
address he wants and gain control of the execution.
A similar vulnerability was found in Charybdis. The data
ﬁeld of epoll_event stores a pointer to a structure which
contains a function pointer. If the attacker lets the pointer point
to a controlled buffer and writes a function pointer there, he
can make the application call arbitrary functions.
Unauthenticated channel:
In our threat model, we exclude
payloads from an untrusted source such as network content.
However, a legacy application which trusts the OS may as-
sume the communication channel established among different
component of the application is reliable. Listing 4 shows an
Iago bug we found in Memcached. It reads a timeout_fd
from the libevent wakeup pipe. Since the timeout_fd is
written by another thread of the application, Memcached feels
safe to use it to index an array in line 3. A malicious OS could
change the timeout_fd to cause invalid memory access.
External: Some syscall return values describe a state that
can not be maintained by the application, and they do not
have clear invariant as Static or Local semantics do. Examples
include local protected ﬁles and state in the exclusive control
of the OS such as time received from gettimeofday and
9
1
2
3
4
5
6
7
8
9
10
11
#define _dl_cache_verify_ptr(ptr) (ptr = 0)
{
sizep = st.st_size;
result = mmap(NULL, sizep, prot, MAP_FILE, fd
, 0);
}
cachesize = sizep;
struct cache_file* cache = result;
cache_data = &cache->libs[cache->nlibs];
uint32_t cache_data_size = (const char *) cache +
cachesize - cache_data
...
Listing 5: An example (fstat) of the external semantics in glibc
ﬁle size received from stat. The application may have the
ability to affect those values by performing operations like
writing to a ﬁle, but the external world could also change it.
We found one such example in glibc’s code of parsing
ld.so.cache (Listing 5). It uses the ﬁle size retrieved from
fstat to mmap the same ﬁle in line 5. Then it assumes the
ﬁle content is written in a speciﬁc format and casts the buffer
to struct cache_file in line 8. If the malicious OS
returns a small ﬁle size (cachesize), glibc would mmap less
pages to cache, and the following parsing based on the ﬁle
format would eventually access unmapped memory. Although
glibc veriﬁes pointers with the macro deﬁned in line 1 before
using, the cache_data_size itself could be miscalculated.
In line 10, if the cachesize is smaller than the offset of
cache_data, cache_data_size would be a very large
number since it is unsigned.
In git_config_set_multivar_in_file_gently
of Git, it tries to modify key-value pairs in the conﬁg ﬁle by
copying ﬁle contents to a temporary lock ﬁle part by part. It
ﬁrst parses the conﬁg ﬁle and records each parsed element’s
position by calling lseek(fd, 0, SEEK_CUR). Then
it mmap the conﬁg ﬁle to a buffer named contents with
the ﬁle size read from fstat. During this procedure, Git
assumes the conﬁg ﬁle is owned exclusively by itself and
uses the lock ﬁle to prevent access from other Git processes.
Therefore, Git expects the recorded ﬁle offset to be smaller
than or equal to the ﬁle size they read from the fstat and
uses the recorded ﬁle offset to index the content buffer. In
this case, both ﬁle size and ﬁle offset describe a state that
cannot be maintained by the application alone (lseek with
SEEK_END will set the ﬁle offset based on ﬁle size).
A malicious OS could also compromise the application
through those return values in other ways. For example,
Apache used getpid and time as a random source, which
was mentioned in the original Iago paper. Those vulnerabilities
are ad-hoc and hard to detect automatically. Extra work such
as modifying the application logic or adding a trusted random
and time source is necessary to mitigate those vulnerabilities.
In summary, from Table 3, we can see that 80% of the vul-
nerabilities are caused by a returned size, which goes beyond
the local upper bound (e.g., the epoll_wait vulnerability
in category Local is caused by a returned number of ﬁle de-
scriptors which is larger than the speciﬁed maxevents). This
is not entirely unexpected since it is a common programming
practice to use the returned length of a syscall to access the
buffer used in the syscall. Examples include iterating a buffer
using the returned number of items, adding a zero to the end
of the received data to terminate a string, and copying the
buffer using a “smaller” size to save space. Similarly, we also
found it a common practice to store a ﬁle descriptor in the
epoll_data ﬁeld of epoll_event struct returned by the
epoll_wait syscall and use it to index into a ﬁle descriptor
array. The applications that did these often failed to check the
validity of the syscall returned value because they assume the
OS is trustworthy and correct.
D. Mitigating Iago vulnerabilities
An obvious way of mitigating the Iago vulnerabilities is to
check if the semantics of syscalls have been violated. This
could be done by either the application itself or the OFL.
Also, for each type of the syscall semantics, the implications
and difﬁculty might be different, which we will discuss in the
following.
Local and Static: As these types of semantics can be
checked against predeﬁned ranges or other constraints without
maintaining a state, the checks can be simply performed by the
OFL and they are straightforward and relatively cheap to do.
For example, the OFL can check if the returned size is smaller
or equal to the maximum length speciﬁed in the parameter. The
high number of Local vulnerabilities in Table 3 suggests that
the majority of Iago vulnerabilities can be mitigated in this
way, and this would eliminate 82.4% of the vulnerabilities for
Static and Local. The semantics might need to be manually
derived from the OS code or syscall speciﬁcations for the OFL
to check, but this would only be a one-time effort for each OS
version.
Stateful:
In contrast to Static and Local, while also straight-
forward to check, Stateful Iago vulnerabilities require more
complex logic to maintain parallel state with the untrusted
OS (e.g., keeping track of the syscall history). However, we
note that the main motivation of many user-TEEs is to reduce
the TCB of security-sensitive code and since the OFL is in
the TCB, it must also remain small as well. Implementing a
stateful OFL will thus increase the TCB, which is antithetical
to the philosophy of TEEs. Therefore, instead of purely relying
on the OFL, an alternative is to patch the application so that
it is no longer vulnerable. We found that all 6 applications
we examined that contain an epoll_wait vulnerability can
be easily ﬁxed by replacing epoll_wait with other polling
syscalls such as poll and select for compatibility reasons.
Unauthenticated channel: As with any network communica-
tion assuming an insecure channel, the unauthorized channel
vulnerabilities may be solved using cryptography to secure cer-
tain trusted channel within the trusted application components.
We also consider this type as straightforward to address.
External: As we have argued that the application should
not make assumptions on resources that it does not control
or keep track of. The root cause of the fstat and lseek
bugs in Git and glibc is the assumption that it owns the ﬁle
exclusively, which is not true even in a common threat model
(the OS is not malicious but with other applications running
in parallel). External metadata, such as ﬁle size, should also
be crypto-protected to prevent those vulnerabilities. Ad-hoc
vulnerabilities such as mistrusted random sources (causing
other application failures) can be mitigated through improved
application development.
V. OFL ANALYSIS
Further to the Iago vulnerabilities identiﬁed by Emilia
from legacy code, we are also interested to see to what
extent state-of-the-art OFLs and SGX applications mitigate
Iago vulnerabilities. However, we note that Emilia is not suited
to fuzzing OFLs the way it fuzzes legacy applications. There
are two reasons for this. First, OFLs typically have a trusted
portion that runs in the SGX enclave and an untrusted portion
that runs as a process on the untrusted OS, which makes the
actual syscalls. Fuzzing the syscall return values is likely to
ﬁnd Iago vulnerabilities in the untrusted portion, which is of
no consequence to the trusted portion. Second, to properly fuzz
the trusted portion, Emilia needs to be ported to each OFL to
fuzz the return values that each OFLs untrusted component
returns to the trusted component. As a result, we port Emilia
to fuzz one particular OFL, the Google Asylo project, and
perform a manual analysis of several other popular OFLs
and SGX applications by examining their documentation and
performing code reviews.
A. Documentation-based Analysis
We survey 17 recent OFLs and SGX applications to exam-
ine the types of Iago vulnerabilities they defend against.
Mmap and randomness Iago vulnerabilities: Mmap and
randomness Iago vulnerabilities were ﬁrst identiﬁed in the
original Iago paper [4] and thus the most well-known. Almost
all OFLs have included checks to ensure that the returned
address of memory management syscalls does not overlap
with previously allocated memory. Virtual Ghost [7] also
introduces a random number generator to defend against an
OS that provides bad randomness. Other isolation techniques
that have also addressed these two vulnerabilities include:
Trustshadow [11], AppShield [6], Sego [25], ShieldBox [39]
and HiddenApp [42].
Other Iago vulnerabilities: Section IV-A identiﬁes several
other types of Iago vulnerabilities, which have not been
systematically documented in the literature. As a result, only
some OFLs make explicit mention of mitigating these other
vulnerabilities, while many do not mention them at all. Most
OFLs make some effort to narrow the syscall interface by only
implementing certain syscalls. Minibox [27], SGX-Tor [21]
and InkTag [12] handle part of system services with spe-
cial care. InkTag has an application-level library to translate
read/write syscalls into operations on memory mapped ﬁles.
Minibox divides all syscalls into sensitive and non-sensitive
calls. Memory management, thread local storage management,
multi-threading management, and ﬁle I/O are handled by Mini-
box internally. Both Minibox and InkTag leave network I/O
directly forwarded to the OS for the reason that network was
originally considered as an untrusted communication channel
by the application and cryptographic protocols may be applied
to help secure the channel. However, we have shown that in
addition to the content of network trafﬁc, metadata like size,
descriptors or pointers returned by network syscalls can also
be attack vectors.
10
Ryoan [14], SeCage [29] and Glamdring [28] claim that
they would apply some checks in the OFL to validate the return
value of syscalls, but no information is disclosed about what
exactly those checks are. Panoply [35] studied the types of
syscall return values and categorized them into zero/error, inte-
ger value and structures. Their OFL will validate the returned
error code as well as ranges of some integer return values.
OpenSGX [18] also carefully considers the potential attack
surface on their OS interface and has a list of corresponding
checks they could apply on the OFL. However, none of them
perform experiments on real applications to prove the existence
of such vulnerabilities. Moreover, the Stateful and External ex-
amples we have presented indicate that without implementing
some part of the OS functionality, such as epoll, to get a
global view of the managed content, a stateless OFL check
alone is insufﬁcient to detect the inconsistency between actual
syscalls’ behavior and the application’s assumptions.
As a strong form of mitigation, Haven [3], Graphene-
SGX [40], and SCONE [2] place a library OS inside the iso-
lated environment. This method replaces the complex syscall
interface with a carefully designed small
interface, which
makes validation of values returned by the untrusted OS more
realistic. For example, in Graphene-SGX, the library OS can
track the offset of opened ﬁles and all epoll event data.
In other words,
the library OS acts as a stateful OFL to
address the Stateful type of vulnerabilities we have identiﬁed.
However, Van Bulck et al. [41] found the return value from
read was used to copy the return buffer in the Graphene-
SGX OFL itself, which lead to memory corruption. This
vulnerability was patched in April 2019 (hence rated as No
for OFL vulnerable in Table 4).
B. Code-based Analysis
To further delve into the state of OFL defenses against
Iago attacks, we conduct an analysis of 6 OFLs through code
review, in addition to examining publicized information. Our
analysis includes both general-purpose isolation frameworks
(Graphene-SGX, Asylo and Virtual Ghost) and TEE-secured
applications that use their own custom OFL (SGX-SQLite,
SGX-Tor and mbedtls-SGX). We selected these code-bases
based on the type of OFL (3 general and 3 application-
speciﬁc) and based on the availability, apparent maturity and
completeness of their code bases. We note that because the
following ﬁndings are made via manual code review, they are
lower bound on the true number of Iago vulnerabilities in these
OFLs. We analyze whether the OFL mitigates Static, Local
and Stateful vulnerabilities in legacy applications, and as well
as whether the OFL itself is vulnerable to Iago attacks. The
results are tabulated in Table 4.
The main purpose of our analysis is to ﬁnd out what
countermeasures the OFLs take to mitigate Iago vulnerabilities
when forwarding syscall return values to the application, based
on the Static, Local and Stateful vulnerability types that can
be mitigated by OFLs. For each of the vulnerability types, we
classify the level of mitigation into three levels: The worst case
is an OFL that forwards syscalls and does not have mitigations
on any of the syscalls. Next, an OFL may forward syscalls and
have mitigations on some of the syscalls but not others, making
it incomplete. Finally, in the ideal case, the OFL either doesn’t
forward any syscalls (and is thus not vulnerable), or it has
OFL
Mitigation for apps
Application
Static Local
Stateful
Vuln.
OFL Vuln.
Graphene-SGX
Google Asylo
Virtual Ghost
SGX-SQLite
SGX-Tor
mbedtls-SGX
: Syscalls forwarded and no mitigations for legacy applications
: Syscalls forwarded and incomplete mitigations for legacy applications
: Either no syscalls forwarded or complete mitigations for all forwaded
No
Yes (patched)
Yes
No
No
No
-
-
-
Yes
Yes
No
syscalls
Table 4: OFLs analyzed for Iago attack mitigation. The
columns of Static, Local and Stateful indicate whether the OFL
code has checks for violation of the corresponding semantics.
The last column is used to note if we have found the OFL
itself to contain Iago vulnerabilities, as opposed to just not
checking for the protected application code
mitigations for all forwarded syscalls, allowing it to provide
complete protection for that class of Iago vulnerability to a
legacy application.
Table 4 shows that most OFLs do not provide com-
plete mitigation for Iago vulnerabilities, and many provide
no mitigation at all for the most numerous class of Local
vulnerabilities. We also list whether the lack of mitigation
resulted in Iago vulnerabilities in the underlying applications
(only applicable to the SGX applications), as well as whether
there were any vulnerabilities a malicious OS could trigger in
the OFL code itself. We detail our analysis below.
Static: We were unable to ﬁnd any checks in the six OFLs
for syscall return values that can be statically veriﬁed, e.g.,
we did not see any veriﬁcation for negative error codes.
That means the accept vulnerability (Static) in the legacy
Redis may still be exposed to the attacker. Fortunately, our
ﬁndings in Section IV-C also show that the frequency of Static
vulnerabilities in legacy code tends to be low (though non-
zero).
Local: With the help of the library OS, Graphene-SGX
narrows the untrusted interface to only 37 OCALLs, and is thus
able to secure that narrow interface with comprehensive ver-
iﬁcation. They deﬁne an sgx_copy_to_enclave(ptr,
maxsize, uptr, usize) function which compares the
trusted and untrusted buffer lengths before copying any un-
trusted buffer. It also ensures both trusted and untrusted buffers
completely reside in the corresponding memory region (insid-
e/outside enclave). Even though Virtual Ghost instruments the
protected application to ensure pointers passed into or returned
by the untrusted OS do not point into the protected memory
region, we did not ﬁnd any veriﬁcation in its OFL. In particular,
we were unable to ﬁnd any checks applied on the syscall return
values from read, even though it is described as an example
in the paper.
SGX-SQLite, SGX-Tor and mbedtls-SGX are three SGX-
secured applications ported from legacy code. Instead of using
an existing isolation framework such as Asylo or Graphene-
SGX, they develop custom OCALL interfaces to only forward
11
necessary syscalls. However, they still forward the syscalls
that involve the local Iago semantics. The lack of mitigation
allowed us to ﬁnd two unmitigated Local Iago vulnerabilities
in SQLite’s handling of read and readlink syscall return
values in SGX-SQLite.
Stateful: Due to the peculiarity of this type, such vul-
nerabilities are often mitigated by just not forwarding the
corresponding syscalls. As mentioned above, Graphene-SGX
forwards no syscalls whose return values involve stateful
semantics. Therefore, Graphene-SGX can successfully defend
legacy code against both stateful (by not forwarding) and local
vulnerabilities. Virtual Ghost, SGX-SQLite and mbedtls-SGX
are the same case. However, we found one unmitigated Stateful
vulnerability caused by epoll_wait (which is forwarded) in
SGX-Tor.
Vulnerable OFLs: Compared to the threat model inconsis-
tency faced by legacy code, Iago vulnerabilities have been
included in the threat model of the OFL development. Still,
we see Iago vulnerabilities in the code of certain OFLs. For
example, the Virtual Ghost OFL is vulnerable to the local
semantic violation (e.g., in read and readlink). It uses the
untrusted buffer length to memcpy content from the shared