  今天，生活在美国的人口大概是15世纪佛罗伦萨的一千倍。那么按照比例推算，在我们之中存在着一千个达·芬奇和一千个米开朗基罗。如果这种推算成立，我们应该每天都看到令人惊叹的艺术奇迹。但是，事实并非如此，原因就是达·芬奇的出现除了他本身的天赋以外，还有赖于1450年的佛罗伦萨。
  推动人才成批涌现的最大因素就是，让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要，达·芬奇之所以成为达·芬奇，主要原因不仅仅是他的天赋，更重要的是他生活在当时的佛罗伦萨，而不是米兰。今天，人类生活的流动性高得多，但是伟大的项目依然不成比例地集中在少数几个热点上：德国包豪斯建筑学院、曼哈顿计划、《纽约人》杂志、洛克希德公司的臭鼬工作室、施乐公司的帕洛阿尔托研究中心。
  在历史的任何时刻都有一些热点项目，一些团体在这些项目上做出伟大的成绩。如果你远离这些中心，几乎不可能单靠自己就取得伟大成果。某种程度上，你个人最多可以对趋势产生一定的影响，但是你不可能决定趋势，实际上是趋势决定了你。（或许有人办得到，但是米兰的达·芬奇显然没有办到。）
  好设计常常是大胆的设计。在任何一段历史中，人们都会把某些荒谬的东西当作正确的，并且深信不疑，以至于一旦你出言质疑，就有被排挤或者被暴力伤害的危险。
  我们自己的这个时代要是不同以往，当然令人欢欣鼓舞。伹是就我所知，它并没有任何不同。
  这个问题不仅存在于每个年代，还或多或少存在于每个领域。许多文艺复兴时期的艺术作品在当时都被认为极其大逆不道。根据意大利画家瓦萨里的记载，波提切利因此向教会忏悔并且放弃绘画，巴尔托洛梅奥和洛伦索迪克雷迪则是把自己的作品烧掉。爱因斯坦的相对论触犯了许多同时代的物理学家，许多年后还没有被完全接受，法国物理学家直到20世纪50年代才接受相对论^。
^“参见Stephen G.Brush所著的“为什么相对论被接受了？”，Physics in Perspective，1999年第1期。”
  今天的实验性错误就是明天的新理论。如果你想做出伟大的新成果，那就不能对常识与真理不相吻合之处视而不见，反而应该特别注意才对。实际上，我觉得发现丑陋的东西要比你想象出一个优美的东西更容易。大多数做出优美成果的人好像只是为了修正他们眼中丑陋的东西。伟大成果的出现常常来源于某人看到一样东西后，心想我能做得比这更好。拜占庭帝国的《圣母像》最早是根据某个公认的模板画的，非常机械呆板。几百年后的14世纪，意大利画家乔托看到以后，深感不满，决定动手改进，他因此成为文艺复兴的先行者。哥白尼对地心说无法解释的事情深感困扰，他的同时代人都觉得这可以忍受，他却认为一定能找到一种更好的解释。
  单单是无法容忍丑陋的东西还不够，只有对这个领域非常熟悉，你才可能发现哪些地方可以动手改进。你必须锻炼自己。只有在成为某个领域的专家之后，你才会听到心里有一个细微的声音说：“这样解决太糟糕了！一定有更好的选择。”不要忽视这种声音，要培育它们。优秀作品的秘块就是：非常严格的品味，再加上实现这种品味的能力。
10.编程语言解析
  所有机器都有一张操作命令清单，让你可以控制它。有时这个清单非常简短。电水壶就只允许两种操作：打开和关闭。CD播放器稍微复杂点，除了打开和关闭以外，还能调节音量、播放、暂停、快进、快退、随机播放等。
  计算机和其他机器一样，也有一张操作命令清单。比如，可以命令计算机把两个数相加。这种操作命令的总和就是计算机的机器语言（machine language）。
机器语言
  计算机刚发明的时候，所有程序就是一条条机器语言的命令。没过多久，程序就改成使用汇编语言了，它要比机器语言写起来稍微方便一点。命令清单还是一样的，就是每个命令换了一个更人性化的名字。机器语言的加法命令是11001101，这可能就是计算机内部的加法表达方式，但是在汇编语言中，这条命令就改成了add
  机器语言和汇编语言的共同问题就是，只能让大多数计算机做一些很简单的事情。比如，假定你想让计算机的蜂鸣器响10次，但是不存在一条直接的机器语言命令让电脑重复进行n次操作，所以只能用机器语言写出下面这样的程序：
        将数字10存入内存地址0
a       如果内存地址0的值为负数，跳到b行
        蜂鸣器发出声音
        将内存地址0的值减1
        跳到a行
b       ……程序的其他部分……
#(sphinxs 补充：中译版此处a标记位置有误，已改正)#
  如果只是为了让蜂鸣器响10次就不得不写这么多代码，不难想象写出一个文字处理器或电子表格将是一项多么浩大的工程。
  顺便说一句，请再看一下上面的程序。蜂鸣器真的会响10次吗？不，响了11次。我不应该在第一行使用10，而应该使用9。我故意在这个例子中留了一个bug，证明编程语言的一个重要特点：一个操作所需的代码越多，就越难避免bug，也越难发现它们。
高级语言
  现在假设你不得不用汇编语言开发程序，但是你有了一个助手，他可以帮你承担那些麻烦的脏活。所以，你只要把程序写成下面这样就行了^：
dotimes 10 蜂鸣器响
^“dotimes是Lisp语言中表示循环处理的命令。——译者注”
  接下来，你的助手会用汇编语言来实现这条命令（假定他不会产生bug）。
  事实上大多数程序员就是这样工作的，不同之处就是，程序员的助手不是一个人，而是编译器。所谓“编译器”，本身就是一个程序，作用是将简便方式书写的程序（就像上面这一行命令）转变为硬件可以理解的语言。
  这种简便方式书写的程序所使用的语言就叫做高级语言。它让你能够使用更强大的命令开发程序，比如现在你就有了“重复n次操作”的命令，不再仅限于只能做简单的“两个数相加”。