ReDoS-vulnerable or false otherwise
1 β, M ← TransRE(α);
2 ΓN Q ← CheckNQ(β, M );
3 ΓEOD ← CheckEOD(β, M );
4 ΓEOA ← CheckEOA(β, M );
5 ΓPOA ← CheckPOA(β, M );
6 ΓSLQ ← CheckSLQ(β, M );
7 Γ ← ΓN Q ∪ ΓEOD ∪ ΓEOA ∪ ΓPOA ∪ ΓSLQ ;
8 if |Γ| = 0 then return false;
9 foreach info (vulDeg, vulSrc, vulPos, atkStr) ∈ Γ do
10
if verifyAtk(α, atkStr, vulDeg) = false then
pression β with a constraint memorizer M , which contains
the constraints to generate attack strings that also belong to
the original regex α (line 1). Next, according to β and M ,
ReDoSHunter deduces the diagnostic information (i.e., vul-
nerability degree, vulnerability source, vulnerability location,
and attack string) list Γ by statically detecting whether any
of the ﬁve patterns (i.e., NQ, EOD, EOA, POA, and SLQ, as
illustrated in Table 1), is triggered (lines 2-7). If Γ is empty,
ReDoSHunter returns false (line 8), otherwise it dynamically
veriﬁes whether the attack strings in Γ are successful and the
failed attack strings with their information are removed from
Γ (lines 9-11). Finally, ReDoSHunter returns true and Γ if Γ
is not empty (line 12), or returns false otherwise (line 13).
11
delete info (vulDeg, vulSrc, vulPos, atkStr) from
3.2 Regex Standardization
Γ;
12 if |Γ| > 0 then return true, Γ;
13 else return false;
3.2.1 Extensions
As shown in §2, regexes support several useful extensions.
We brieﬂy explain them below.
3850    30th USENIX Security Symposium
USENIX Association
A lazy quantiﬁer is in the form of r??, r*?, r+? or
r{m,n}?, which will match the shortest possible string. Match
as few as possible, repeat as few times (i.e., the minimal num-
ber of times) as possible. Anchors do not match any characters,
but still restrict the accepted words. The Start-of-line anchor
^ (resp. End-of-line anchor $) matches the position before
the ﬁrst (resp. after the last) character in the string. The word-
boundary anchor \b can match the position where one side
is a word and the other side is not a word. The anchor \B
(non-word boundary) is a dual form of the word boundary
\b. Lookarounds are useful to match something depending on
the context before/after it. Speciﬁcally, a positive lookahead
r1(?=r2) (resp. negative lookahead r1(?!r2)) denotes look-
ing for r1, but matching only if (resp. not) followed by r2.
A positive lookbehind (?1,
satisfying one of the following conditions in Table 3. Intu-
itively, there is a string with multiple matching paths through
alternation constructs in the pattern EOD.
Table 3: Conditions for Triggering Pattern EOD.
No. Condition
#1
#2
βp.ﬁrst ∩ βq.ﬁrst 6= ∅, where 1 ≤ p, q ≤ k and p 6= q
βp.ﬁrst ∩ βq.followlast 6= ∅, where 1 ≤ p, q ≤ k and p 6= q
We propose the algorithm CheckEOD to diagnose the EOD
pattern. Like CheckNQ, CheckEOD consists of three steps:
(i) identifying EOD patterns by the characteristics, (ii) con-
structing an attack string based on the pattern and the con-
straint memorizer M , wherein the inﬁx string y belongs to the
overlapping part (i.e., a string with multiple matching paths),
and (iii) locating the original source according to the relative
positions of corresponding sub-regexes.
Consider the example mentioned in §3.2 again, β =
(a+|b)♦1\s+\s+(a+|b)(cid:7)1(\d+)+(\s|\t)+(a*b+a*)+d.
First, as \s. ﬁrst ∩ \t. ﬁrst = {\t} 6= ∅, CheckEOD iden-
tiﬁes the EOD pattern (\s|\t)+ (shown in Figure 5) and
its preﬁx sub-regex Ψ1 = (a+|b)♦1\s+\s+(a+|b)(cid:7)1(\d+)+.
Similar to §3.3.1, CheckEOD synthesizes
the preﬁx
string x = x1x2x3x4x5 = ‘a\n\ta1’, the inﬁx string y =
‘\t’, and the sufﬁx string z = ‘!’ such that x ∈ L(Ψ1),
y ∈ (L((\s+) ∩ L((\t+))\{ε}, xyz /∈ L(β), and x satisﬁes
the corresponding constraints (i.e., ϑ1 and ϑ2 in §3.2) in
the memorizer M . Next, based on x, y, z, an attack string
x + y × NE + z is constructed, where the repetition number
NE is set to 30.
3.3.3 Pattern EOA: Exponential Overlapping Adjacent
The third pattern is an expression consisting of two adja-
cent overlapping components with a common outer quantiﬁer
{m,n}, where n > 1. We call it the Exponential Overlapping
Adjacent pattern (EOA) as it could lead to an exponential
behavior in the worst case on a mismatch. Speciﬁcally, there
are two possible overlapping cases. First, the characters fol-
lowed by the tail of the ﬁrst component and the head ones of
the second component overlap. For example, considering the
regex (ab*b*)+, the characters following the tail (i.e., {b})
of the ﬁrst component ab* and the head ones (i.e., {b}) of the
second component b* overlap. When matching on the pump
string of ‘b’, different components or paths can be selected.
The common outer quantiﬁer could make the matching an
exponential behavior in the worst case. Second, the head char-
acters of the ﬁrst component and the ones following the tail of
the second component overlap. Take the regex (a+b+a+)+ as
an example. The head characters (i.e., {a}) of the ﬁrst com-
ponent a+ and the ones followed by the tail (i.e., {a}) of the
second component b+a+ overlap. Due to the common outer
quantiﬁer +, the second component can reach the ﬁrst compo-
nent as well. Like the ﬁrst case, matching on the pump string
of ‘b’ could lead to an exponential behavior in the worse case.
the form β =
(. . .(β1β2). . .){mβ, nβ} with nβ > 1, satisfying one of the con-
ditions in Table 4. Following the cases of CheckNQ and
CheckEOD, we propose the algorithm CheckEOA to detect
the pattern EOA. Note that there may be more than one condi-
tion that are triggered by a regex (e.g., (a*a*)* triggers both
of the above conditions). This has no effect on the detection
of EOA, because we are concerned about whether the regex
belongs to EOA, rather than about which form of EOA.
Formally, the pattern EOA is of
Table 4: Conditions for Triggering Pattern EOA.
No. Condition
#1
#2
(β1.followlast ∪ β1.last) ∩ β2.ﬁrst 6= ∅
β1.ﬁrst ∩ (β2.followlast ∪ β2.last) 6= ∅
To illustrate CheckEOA, consider the example β again,
β =(a+|b)♦1\s+\s+(a+|b)(cid:7)1(\d+)+(\s|\t)+(a*b+a*)+d.
CheckEOA identiﬁes the sub-regex (a*b+a*)+ (Figure 5),
as it triggers the second condition a*b+.ﬁrst ∩ (a*.followlast
∪ a*.last) = {a} 6= ∅, as well as its preﬁx sub-regex Ψ1 =
(a+|b)♦1\s+\s+(a+|b)(cid:7)1(\d+)+(\s|\t)+. Then, similar to
§3.3.2, CheckEOA synthesizes the preﬁx string x = x1x2x3x4
x5x6 = ‘a\n\ta1\t’, the inﬁx string y = y1y2 = ‘ba’, and the
sufﬁx string z = ‘!’ such that x ∈ L(Ψ1), y ∈ L((a*b+a*)+),
xyz /∈ L(β), y2 ∈ a*b+.ﬁrst ∩ (a*.followlast ∪ a*.last), and x
satisﬁes the corresponding constraints (i.e., ϑ1 and ϑ2 in §3.2)
in the memorizer M . Next, based on x, y, z, an attack string
x + y × NE + z is constructed, where the repetition number
USENIX Association
30th USENIX Security Symposium    3853
NE is set to 30.
3.3.4 Pattern POA: Polynomial Overlapping Adjacent
The fourth pattern is an expression consisting of two adjacent
components such that the characters followed by the tail of the
ﬁrst component and the head ones of the second component
overlap. Similar to the ﬁrst case of the pattern EOA, matching
on the overlapping string could select either of the compo-
nents. But different from the pattern EOA, the pattern POA
has with an optional common outer quantiﬁer {0,1}. The
ambiguity of the pattern POA could lead to a polynomial be-
havior in the worse case. So we call this pattern as Polynomial
Overlapping Adjacent pattern (POA). For example, consider
the regex \d+\.?\d+$. The characters followed by the tail
of the ﬁrst component \d+$ are the digits, which also appear
in the head of the second component \.?\d+$. Due to the
quantiﬁer +, the ﬁrst component \d+ can reach itself. When
matching on the pump string of a digit, different components
can be selected.
Formally, the pattern POA is of the form β = β1β2 such
that β1.followlast ∩ β2.ﬁrst 6= ∅. Likewise, the algorithm
CheckPOA is proposed to detect the pattern POA.
Likewise, let us consider the example β =(a+|b)♦1\s+\s+
(a+|b)(cid:7)1(\d+)+(\s|\t)+(a*b+a*)+d to illustrate algo-
rithm CheckPOA. CheckPOA diagnoses that the sub-regex
\s+\s+ belongs to the pattern POA as it satisﬁes the condition
\s+.followlast ∩ \s+.ﬁrst = { , \t, \n, \r, . . .} 6= ∅ (symbol
presents a space character) for the two adjacent \s+, as illus-
trated in Figure 5. And its preﬁx sub-regex Ψ1 =(a+|b)♦1 is
also identiﬁed. Next, CheckPOA constructs the preﬁx string
x = ‘a’, the inﬁx string y = y1y2 =‘ \t\t’, and the sufﬁx string
z = ‘!’ such that x ∈ L(Ψ1), y ∈ L(\s+\s+), xyz /∈ L(β),
y1 = y2 ∈ \s+.followlast ∩ \s+.ﬁrst, and y2 ∈ L(\t.*) (i.e.,
the constraint ϑ1 in the memorizer M ). After that, CheckPOA
crafts an attack string such that it does not match the regex:
x + y × NP + z, where the repetition number NP , a pre-deﬁned
number of repetitions for polynomial patterns, is set to 10000
here.
3.3.5 Pattern SLQ: Starting with Large Quantiﬁer
The above four patterns are all due to some ambiguity during
the matching. Yet, some unambiguous regexes can be vul-
nerable when they cause the regex engine to keep moving
the matching regex across the malicious string that does not
have a match for the regex. For example, consider a simpliﬁed
version \s+$ of the regex that causes the outage of Stack Over-
ﬂow mentioned in §1 and an attack string ‘\t’ × 10000 + ‘!’.
The matching starts with the ﬁrst ‘\t’ and fails after 10, 000
steps, and then continues on the second ‘\t’ and so on. Finally,
it would take 10, 000 + 9, 999 + 9, 998 + . . . + 3 + 2 + 1 =
50, 005, 000 steps to reject the attack string, that is, a poly-
nomial behavior in the worst case on a mismatch. There are
several possible forms that can cause this vulnerability, and
we ﬁnd that the vulnerable parts are all at the beginning of the
regex and with a large quantiﬁer (the repetitions are greater
than a minimal number). So we group them in a pattern called
Starting with Large Quantiﬁer (SLQ).
Next, we describe four possible triggering conditions for
the pattern SLQ, as shown in Table 5, where nβ ≥ nmin, 1 ≤
p, q ≤ k, p 6= q, 1 ≤ ℓ, and nmin is a pre-deﬁned number for
the minimal repetitions. We present algorithm CheckSLQ to
detect the pattern SLQ based on these four conditions.
Table 5: Conditions for Triggering Pattern SLQ.
No. Condition
#1
#2
#3
#4
starting with β1{mβ, nβ}
starting
L(β2{mβ, nβ}))\{ε} 6= ∅
with
β1β2{mβ, nβ}
such
that
(L(β1) ∩
starting with β1(γ1|γ2| . . . |γk){mβ, nβ} such that
there ex-
ists a word w = w0w1 . . . wℓ ∈ L(γp{mβ, nβ}), w1 . . . wℓw0 ∈
L(γq{mβ, nβ}), and w0 ∈ L(β1)
starting with β1(γ1γ2 . . . γk){mβ, nβ} such that all the γ1, γ2, . . . , γk
are nullable, and there exists a word w = w0w1 . . . wℓ ∈
L(γp{mβ, nβ}), w1 . . . wℓw0 ∈ L(γq{mβ, nβ}), and w0 ∈ L(β1)
Let us further examine the above example β = (a+|b)♦1\s+
\s+(a+|b)(cid:7)1(\d+)+(\s|\t)+(a*b+a*)+d to illustrate algo-