图 6  伸缩演化示例
图 6 简单演示了伸缩演化的过程：简单的部署基本可以应对日增百兆数据的处理需求；随着数据量流增大可以通过扩展数据存储服务，并引入读写分离的方案来保证数据服务质量；若数据量进一步扩张，可以彻底将物理部署架构对应到逻辑层次上，每层均能够横向伸缩，以避免系统瓶颈的出现。这种演化过程并不需要变更程序逻辑，而是通过动态地添加计算节 点来完成。
3.2 高性能与高可用的数据收集与传输
	在复杂的分布式数据收集场景中，往往会面临一个问题就是，数据源端数量大大地超出 的数据收集末端的承载能力，出现比如数据连接超载、写资源竞争等情况。如下图所示：数据源代理
数据源代理
数据源代理
…… 数据收集末端
数据源代理
数据源代理
数据源代理
	图 7  数据收集传输瓶颈示意 
	为了避免上述情况的中出现的瓶颈问题，需要数据采集模块具备分级传输能力，以中间 层的方式来规避末端资源瓶颈，如下图所示：
东软集团股份有限公司 	10 
SaCa® DataInsight 产品白皮书 
数据源代理
数据源代理 	数据收集中间层
数据源代理
……	数据收集末端
数据源代理
数据源代理 	数据收集中间层
数据源代理
	图 8  分级数据传输 
	高可用数据传输分为两个方面。第一是数据传输节点的高可用，避免由于节点故障导致 的数据传输失败情形；第二是数据本身的可靠性，避免由于传输失败导致数据丢失的情形。
	数据传输节点应可按层次水平扩展，一来增大数据吞吐容量，二来更重要地是保证了避 免单点故障的出现。如下图所示：| 数据源代理 | 数据收集中间层 | 数据收集末端 |
|---|---|---|
| 数据源代理 |节点实例1 |节点实例1 |
| 数据源代理 |节点实例2 |节点实例2 |
| 数据源代理 |节点实例3 |节点实例3 |
	图 9  规避单点故障的节点实例集群示意 
	可靠性数据传输指的是数据从开始端到末端的传输过程中一旦发生传输错误的情况下保 证数据不会丢失的特性。抽象地描述数据传输过程如下：
数据源代理 数据传输中间过程 持久性终端
	图 10 数据传输抽象过程示意 
	针对以上数据传输过程，在下跳节点传输错误发生时，数据采集服务节点将采取“将消息 数据做本地持久化并待恢复后重发”的机制来保证数据不会丢失。
数据源代理 数据传输中间过程 FAILED
本地持久化暂存
图 11 本地持久化暂存保证数据传输可靠性
东软集团股份有限公司 	11东软集团股份有限公司 	11 
SaCa® DataInsight 产品白皮书 
	平台充分考虑分布式数据收集与传输系统的性能效率与可用性，保证企业能够以最小的 资源代价做到数据资产有效地统一收集管理。
3.3 高度可定制扩展的插件化数据预处理服务
由于不同数据源产出的不同结构、不同内容，需要不同的处理逻辑，而且面临着处理需 求不断演变的情况。应对此种普遍状况，平台创建了过滤器链的数据处理模型，将数据处理 逻辑的粒度放小至足以抽取通用逻辑，然后再以链式组装单元逻辑，已达到按需对应数据处 理场景的目的。这是一种“管道-过滤器”风格的软件架构，如下图所示：
| Data | Filter | Filter | …… | Filter | Filter | Data |
|---|---|---|---|---|---|---|
| Data | | |…… | | |Data |图 12 管道-过滤器风格的数据预处理模型 
	基于上述架构模型，可以有效地应对不同的数据预处理场景并且规避了由于处理需求的 差异性而引发的程序变更。在该模式下，过滤器是可复用软件资产，“预处理服务”将提供常用 的数据处理过滤器，那么在具体的使用过程中只需要按需组装即可；而且该模式基于插件化 的实现模式能够支持按需自定义新的过滤器，比如私有编码的处理工作，只要符合既定插件 规范，那么自定义过滤器也可以像其它任何过滤器一样被组装到过滤器链中。
	另外，从软件工程角度而言，以过滤器为单元的软件组件由于其功能范围较小且逻辑目 的明确所以更容易被维护和测试。
3.4 可视化、自动化工具辅助配置数据预处理规则
为了处理各种不同的非结构化数据，需要针对各种情况设置复杂的数据预处理规则以达 到数据规范化的目的。平台提供 GUI 向导与自动化工具，帮助用户无需关心数据预处理细节，只需要参照预览效果，按需添加处理规则即可。具体效果如图 13、14 所示。东软集团股份有限公司 	12 
SaCa® DataInsight 产品白皮书 
图 13 可视化、自动化辅助配置（1）
	图 14 可视化、自动化辅助配置（2）
	平台内置“时间戳识别”、“常见结构化数据解析”、“字段合并、拆分、替换、标记、删除”、“对象分类、丢弃”以及“定制化脚本过滤”等方面的配置支持。综上功能将帮助平台使用者大大 提升在数据预处理方面的工作效率。
3.5 多样化的存储机制与高效率的统一存储服务
“分布式存储服务”提供了多样性的数据存储机制，服务于不同的数据结构与存取需求，其
东软集团股份有限公司  13 
SaCa® DataInsight 产品白皮书 
中 NoSQL 存储主要作为海量分析数据的存储设施、关系数据库则主要作为平台支撑数据的存 储设施、文件系统主要作为离线数据的存储设施、而搜索引擎则提供了数据检索的功能基础。在分布式数据存储服务提供的细分服务中，被分析的大规模的数据通常进入 NoSQL 数据 库存储进而提供在线的即时数据服务；搜索引擎则提供高效的数据检索服务；分布式文件系 统主要用于归档管理或者旧数据的挖掘分析等离线性质的工作；关系数据库提供支撑数据存 储服务。整体上的逻辑结构如下图所示。
分布式数据存储服务
| NoSQL存储 | Node | …… | 搜索引擎 | 搜索引擎 | 搜索引擎 | Indexer Cluster | …… |
|---|---|---|---|---|---|---|---|
| Writer |Node |…… |Router |Router |Router |Indexer Cluster |…… |
| Node |Node |…… |Router |Router |Router |Indexer Cluster |…… || Shard  	ShardShard |Shard  	ShardShard |…… |Indexer Cluster |Indexer Cluster |Indexer Cluster |Indexer Cluster |…… |
| Reader |Node |…… |分布式文件系统 |分布式文件系统 |分布式文件系统 |关系数据库 |关系数据库 |
| Node |Node |…… |分布式文件系统 |分布式文件系统 |分布式文件系统 |关系数据库 |关系数据库 |
| Node |Node |…… |F_Node |F_Node |…… |关系数据库 |关系数据库 |
| Shard  	ShardShard |Shard  	ShardShard |…… |F_Node |F_Node |…… |关系数据库 |关系数据库 || Shard  	ShardShard |Shard  	ShardShard |…… |F_Node |F_Node |F_Node |主 |备 |
	图 15 分布式数据存储服务逻辑架构参考图示
	“关系数据库存储”能够存储的数据量相对较小，但支撑数据同样具备一定的重要性，所以 做双节点 HA 集群配置即可。
	“分布式文件系统”部分将文件系统扩展到一个多机网络环境下，并且屏蔽了数据在网络中 的分布细节，提供统一的文件读写上下文。
“NoSQL 数据库存储服务”是一种面向与 Document 的数据存储设施，它将会承担绝大 部分的在线海量数据的存储工作。首先为了提升数据读写效率对集群内部可做读写分离配置，数据将以分片（shard）为单位在节点间进行迁移和同步。并且数据分片将会被委派“主分片”和“从分片”两种角色，主分片承担数据更新与副本分发控制工作，此处通过数据冗余的手段来 保证数据的高可用。“搜索引擎”服务将提供数据检索服务，其原始数据源主要是 NoSQL 存储中的在线数据。为了提升数据检索效率，将以多索引集群加前端路由服务的方式来对外提供检索服务。进一 步须说明的是每个索引集群都是通过索引数据冗余来保证高可用的并提高并发查询执行效 率。
这些存储子部分每个都是一个独立的服务，相互之间并无耦合，所以可以分开来看待。
各种类型存储适用于不同的存储场景。具体特点与对应关系如下图所示：
东软集团股份有限公司 	14 
SaCa® DataInsight 产品白皮书 
半结构化数据，后续将会在存储
设施的支持下可以被直接应用于
| 数据存储服务 | 的关系模型数据 | 算结果数据 |
|---|---|---|