此stab为远程GumbalMachine的代理。
客户堆
服务器堆
umballMo
这是我们的监视
器代码，它使用
skeleton接受远程调用，并
代理来和运程糖
国将这些调用转移到服务
Gambat(Machine是我们的
果机沟通。
对象上。
远程服务，它为客户暴
露一个远程接口以供使
用。
PDG
450
第11章
---
## Page 487
代理模式
让GumballMachine准备好当一个远程服务
要把我们的代码改成使用代理，第一个步骤是让GumballMachine变成可以接受远程
调用。换句话说，我们要把它变成一个服务。做法如下：
1)为GumballMachine创建一个远程接口。该口提供了一组可以远程调用的方法。
2）确定接口的所有返回类型都是可序列化的。
3)在一个具体类中，实现此接口。
我们从远程接口开始：
别忘了impotj4v,tmi.*
这就是远程接口。
import java.rmi.*;
public interface GumballMachineRemote extends Remote {
public int getCount() throws RemoteException;
public String getLocation() throws RemoteException;
public State getState() throws RemoteException;
所有的返回类型都必须
这是准备支持的方法，每个都要据出
是原语类型或可序列化类
RemoteException,
我们有一个返回类型不是可序列化的：State类，现在来修改一下...
import java.io.*;
Serialixable在java.io包内。
public interface State extends Serializable(
public void insertQuarter () ;
然后我们只要扩展Serializable接口（此接
public void ejectQuarter();
个
public void turnCrank();
口没有方法）。现在所有子类中的State就
public void dispense () ;
可以在网络上传送了。
你现在的位置
451
---
## Page 488
糖果机的远程接口
实际上，我们还没处理完Serializable。对于State，我们有一个问题。你可能记得，每个状态对象
都维护着一个对糖果机的引用，这样一来，状态对象就可以调用糖果机的方法，改变糖果机的状
态。我们不希望整个糖果机都被序列化并随着State对象一起传送。修正这点很容易：
public class NoQuarterState implements State {
transient GumballMachine gumballMachine;
对于State的每个实现，我们都在
CumbalIMachine实例变量前面加上
//其他方法在这里。
trasient关键字，这样就告诉7UM不要
序列化这个字段。
我们已经实现了GumbalIMachine类，但是需要确定它可以当成服务使用，并处理来自网络上的请
求。为了做到这一点，我们必须确定GumballMachine实现GumballMachineRemote接口。
首光我们需要importrmi
GumbaMachine要继承
包。
/
UnicastRemoteO6ject，W成为一
GumbalMachine也常爱实现
个远程服务。
这个送程接…
import java.rmi.*;
import java.rmi.server.*;
public class GumballMachine
//这里有实例变量
public GumballMachine(String location, int numberGumballs) throws RemoteException {
//这里有代码
public int getCount()(
return count;
构造器需要抛出
1
RemoteException，因为超
类是这么做的。
public State getState(){
不要坏疑，这里完全不
return state;
需要改！
public String getLocation()(
return location;
//这里有其他的方法
452
第11章
---
## Page 489
代理模式
在RMIregistry中注册......
糖果机服务已经完成了。现在我们要将它装上去，好开始接受请求。首先我们
要确保将它注册到RMIregistry中，好让客户可以找到它。
我们要加上一点点代码进行测试：
public class GumballMachineTestDrive {
public static void main (String[] args)f
Gumbal1MachineRemote gumballMachine = nu11;
int count;
if (args.length  ") ;
System.exit(1) ;
首先，我们需要在实例化糖果的代
码周图加上try/catch块，因为我们
tryl
的构造器可能抛出异常。
count = Integer.parseInt (args [1]);
gumba11Machine =
new GumballMachine (args[0], count) ;
Naming.rebind("//"+args[0]+"/gumballmachine",gumballMachine）;
}catch（Exception e）{
e.printStackTrace();
K
我们也添加上对Naming.ebind的调
用，用sumballmachine的名字发布
GumbatlMachine6 stub
让我们开始执行...·
这金息动并运行RMJ
先执行这个。
resisty服务。
Fie EdtWindo
rmiregistry
Help Huh?
File Edit Window Help Huh?
java GumballMachineTestDrive seattle.mightygumball.com 100
这金使得GumbalMachine启动和运行
再执行这个。
并注册到RMJtegistty中
你现在的位置
453
---
## Page 490
糖果监视器客户端
现在是GumballMonitor客户端......
还记得GumballMonitor吗？我们要在不改写它的情况下复用它，
以符合网络的情况。为此，我们必须做一些小改变。
我们需爱impontRM的包，固为下面将用
到RemoteException类.....
import java.rmi.*;
现在我们准备依赖此远程接口，而不是具体
public class GumballMonitor {
的CamballMachine类。
GumballMachineRemote machine;
public GumballMonitor(GumballMachineRemote machine)(
this.machine = machine;
public void report()(
try(
System.out.println("Gumball Machine: " + machine.getLocation()) ;
System.out.println("Current state: " + machine.getState());
}catch（RemoteException e）(
e.printStackTrace();
当我们试图调用那些最终要逐过网络发生的方法时，
我们需要捕获所有可能发生的远程异常。
Frank是对的，这样
的做法相当可行。
454
第11章
---
## Page 491
代理模式
编写监视器测试程序
现在我们已经具备所需要的一切，只需再写一些代码，让CEO可
以监控许多糖果机。
这就是监视器测试程序.CEO全执行此
程序！
被监视的位置有这些。
我们创建一个数组.
import java.rmi.*;
数组内的元素是每台
public class GumballMonitorTestDrive (
机器的位置。
public static void main(String[] args) (
V
String[] 1ocation = ("rmi://santafe.mightygumball.com/gumballmachine",
"rmi: / /boulder.mightygumbal1.com/gumballmachine",
"rmi: / /seattle.mightygumball.com/gumballmachine"};
GumballMonitor[] monitor = new GumballMonitor[location.length];
for (int i-0;i 
e.printStackTrace () ;
一旦有了送程机器的代理，我们就可
以创建一个新的Gum6alMonitor，把要
监视的机器传给它。
为万能糖果公司CEO准备的另一个展示·…··…·
现在，让我们把所有这些放在一起，进行另一个展示。首先，确定有一些新版
的糖果机正在执行新代码：
.…..然后执行GumbalIMachine，拖定它的位置
每部机器上，在后台或者在另一
和初始的糖果数目。
个终端密口执行miegistty*…
rmiregistry&
java GumballMachineTestDrive santafe.mightygumball.com 100
Help Huh?
rmiregistry&
java GumballMachineTestDrive boulder.mightygumball.com 100
File Edit Wind
Help Huh?
rmiregistry6
8java GumballMachineTestDrive seattle.mightygumball.com 250
畅销的机器，糖果多放一些。
456
第11章
---
## Page 493
代理模式
接着，我们将监视器交到CEO手上，希
望这次他会喜欢：
Fle EditWng
com
Current inventory:99 gumballs
Current state:waiting for quarter
此监视器连历各台远程机器
Gumball Machine:boulder.mightygumball.com
并调用它们的setlocation（）
Current inventory:44gumballs
setCount（）.setState（）方法
Current state:waiting for turn of cran
Gumball Machine:seattle.mightygumball.(
Current inventory:187 gumballs
Current state:waiting for quarter
这真是太神奇了！我的业绩会
因此一飞冲天，我的对手会因
此一败涂地。
通过调用代理的方法，远程调用可以跨过网络，返回字符串、
整数和State对象。因为我们使用的是代理，调用的方法会在
远程执行，GumbalLMonitor根本就不知道/或不在乎这一点
（唯一要操心的是：要处理远程异常）。
DDI
你现在的位置
457
---
## Page 494
代理幕后花絮
这一切工作得很好，但是我希
望知运是怎么做到的
幕后
花絮
CEO执行监视器，先取得远程糖果机的代理，然后调用每个代理的
getState(）（以及getCount(）和getLocation()）。
CEO的桌面
类型是CumbalIMachineRemote
带2VM的达程糖果机
getState()
③
返回代理
Skeleton
②
糖果机上的RMIregistry
'seattle"
seattle
S
458
第11章
---
## Page 495
代理模式
2
代理上的getState（）被调用，此调用被转发到远程服务。Skeleton接收到请求，
然后转发给糖果机。
getStateO
getState()
Skeleton
Proxy
糖果机将状态返回给skeleton，skeleton将状态序列化，通过网络传回给代理，
代理将其反序列化，把它当作一个对象返回给监视器。
序列化
状态
的状态
对象
状态
对象
S
Skeleton
Proxyl
GumbalMachine实现了另一个接口而旦
监视器除了知道它可能全速遥远程
可能在构造器中抛出远程异常。除此心
异常之外根本没有改查。它也使用
外，糖果机的代码不需要改变。
GumbalMachineRemote接口，而不是具体的
实现。
我们也有一些代码负责使用RMresisty注册和定位stu6，但是无论如何
PDG
如果我们需要在网络上工作，我们就需要这些定位服务。
你现在的位置
459
---
## Page 496
定义代理模式
定义代理模式
这一章的篇幅已经很大了，因为我们花了很多时间在解释远程
代理。尽管如此，你还是会发现代理模式的定义和类图其实相
当直接易懂。请注意，远程代理是一般代理模式的一种实现，
其实这个模式的变体相当多，我们稍后会提到这些变体。
现在，我们就来看看代理模式的定义：
使用代理模式创建代
代理模式为另一个对象提供一个替身或占位符以控
表（representative)
制对这个对象的访问。
对象，让代表对象控
我们已经看到代理模式是如何为另一个对象提供替身的。我们
制某对象的访问，被
也将代理描述成另一个对象的“代表”。
代理的对象可以是远
但是代理控制访问怎么解释呢？这听起来有一点奇怪。别担
心，在糖果机的例子中，代理控制了对远程对象的访问。代理
程的对象、创建开销
之所以需要控制访问，是因为我们的客户（监视器）不知道如
何和远程对象沟通。从某个方面来看，远程代理控制访问，好
大的对象或需要安全
帮我们处理网络上的细节。正如同刚刚说过的，代理模式有许