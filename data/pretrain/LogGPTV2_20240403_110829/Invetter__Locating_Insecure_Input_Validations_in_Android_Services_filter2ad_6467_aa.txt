title:Invetter: Locating Insecure Input Validations in Android Services
author:Lei Zhang and
Zhemin Yang and
Yuyu He and
Zhenyu Zhang and
Zhiyun Qian and
Geng Hong and
Yuan Zhang and
Min Yang
Invetter: Locating Insecure Input Validations in Android Services
Lei Zhang
Fudan University
PI:EMAIL
Zhenyu Zhang
Fudan University
PI:EMAIL
Zhemin Yang
Fudan University
PI:EMAIL
Zhiyun Qian
University of California Riverside
PI:EMAIL
Yuyu He
Fudan University
PI:EMAIL
Geng Hong
Fudan University
PI:EMAIL
Yuan Zhang
Fudan University
PI:EMAIL
ABSTRACT
Android integrates an increasing number of features into system
services to manage sensitive resources, such as location, medical
and social network information. To prevent untrusted apps from
abusing the services, Android implements a comprehensive set
of access controls to ensure proper usage of sensitive resources.
Unlike explicit permission-based access controls that are discussed
extensively in the past, our paper focuses on the widespread yet
undocumented input validation problem.
As we show in the paper, there are in fact more input validations
acting as security checks than permission checks, rendering them
a critical foundation for Android framework. Unfortunately, these
validations are unstructured, ill-defined, and fragmented, making
it challenging to analyze. To this end, we design and implement a
tool, called Invetter, that combines machine learning and static
analysis to locate sensitive input validations that are problematic in
system services. By applying Invetter to 4 different AOSP codebases
and 4 vendor-customized images, we locate 103 candidate insecure
validations. Among the true positives, we are able to confirm that at
least 20 of them are truly exploitable vulnerabilities by constructing
various attacks such as privilege escalation and private information
leakage.
KEYWORDS
Android Framework, System Service, Input Validation, Permission
Validation
ACM Reference Format:
Lei Zhang, Zhemin Yang, Yuyu He, Zhenyu Zhang, Zhiyun Qian, Geng
Hong, Yuan Zhang, and Min Yang. 2018. Invetter: Locating Insecure Input
Validations in Android Services. In CCS ’18: 2018 ACM SIGSAC Conference on
Computer & Communications Security, Oct. 15–19, 2018, Toronto, ON, Canada.
ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3243734.3243843
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243843
Min Yang
Fudan University
PI:EMAIL
Figure 1: Input validations from Android system service and
Linux kernel.
1 INTRODUCTION
Never before has any operating system (OS) been so popular as
Android. Over 60 percent [22] of mobile devices are running An-
droid with a huge number of applications (apps for short) that are
connected to our daily life. To achieve a variety of functionalities,
apps read and manipulate Android system resources, such as GPS
device and screen display, and perform sensitive operations such as
sending and erasing SMS messages. In Android, these resources and
sensitive operations are administered by over 100 system services.
Evidently the access control in these services plays an important
role in the security of Android systems and is a relatively under-
studied research area.
Among the access controls, permission validations are well-
studied, e.g., Kratos [26] addressed the inconsistent permission
enforcement problem. In this paper, we conduct an empirical study
on a different set of critical security enforcements in system ser-
vices, which we define as sensitive input validations. As will be
unveiled in our study, Android imposes over 700 distinct sensitive
input validations (only a lower bound), compared to just 351 per-
missions. They serve various purposes, as an example in Figure 1,
the sensitive input deviceName is used to restrict usage of sensitive
operations, thus preventing system services from being abused by
untrusted apps. To the best of our knowledge, our work is the first
to systematically study the secure use of sensitive input validations
of Android services.
Android Frameworkpublic ParcelFileDescriptor openDevice(String (cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3)){(cid:258)(cid:258)if (isBlackListed( (cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3))) { // terminate the process} }RPCIUsbManager.openDevice( (cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:49)(cid:68)(cid:80)(cid:72)(cid:3));Android APPAndroid SDKUnlike the traditional input validation studies that focus on a
narrow and well-defined set of sensitive input, e.g., web input that
can cause SQL injection attacks, and user-space pointers passed to
Linux kernel that can cause memory corruption attacks, our paper
focuses on the opposite end of the spectrum where it is not even
clear what input crossing the trust boundary should be considered
sensitive and therefore checked:
Unlike
on
system-defined
sensitive input validations
• Unstructured.
that
Context.checkCallingOrSelfPermission()
permission
interfaces,
checks
and
e.g.
Binder.getCallingUid(),
in
system services are difficult to identify. In fact, as illustrated
in Figure 1, any input parameter to a public method of a
service can potentially lead to a sensitive input validation (a
conditional statement involving the check of a parameter).
• Ill-defined. Unlike permission validations, which are well
documented by the Android permission model [13], no pub-
licly available sources define how sensitive input validations
should be carried out in Android services. Thus, it is un-
clear whether an input needs to go through validation and
whether it is done correctly.
• Fragmented. Sensitive input validations are dispersed in a
large number of Java classes. For example in Android 7.0 , our
evaluation shows that they are scattered widely in 173 dif-
ferent Java classes, while Android permission enforcements
are clustered in 6 classes. Moreover, even in the same service
method, sensitive input validations are commonly scattered
in various execution paths, restricting system operations in
a fine-grained manner.
Android
rely
Despite the importance of sensitive input validations in Android
services, their design and usage have not been well thought out,
evidenced by its ad-hoc nature outlined above. By attempting to
summarize and identify flaws related to sensitive input validations,
we make two observations as below (which are detailed in §3).
• Confusions about system security model. Android ser-
vices sometimes incorrectly trust data from apps without any
validation. Interestingly, we even find sensitive input valida-
tions sometimes misplaced in the Android SDK (which runs
as the same process of the app), demonstrating a complete
misunderstanding of the trust model.
• Weakened validations in customized system images.
In the Android ecosystem, system services are often cus-
tomized to provide added value. During the process of cus-
tomization, we find common problems where the sensitive
input validations may become weakened.
By designing a general machine learning technique to identify
sensitive input validations as well as using static analysis to identify
their problematic uses, we develop Invetter and evaluate it on both
Android AOSP system images and third-party customized images.
According to our analysis of 4 AOSP images and 4 third-party
customized images, we find at least 20 exploitable vulnerabilities.
For example, we show that a zero-permission app (running in the
background) can stealthily launch phishing attacks, steal a user
password stored in another app, and sometimes delete the entire
“system” directory. Many of these cases are demonstrated in our
anonymous video: https://youtu.be/erLY_OMi4kQ.
Contributions. The contributions of our work are summarized as
follows.
• Our work is the first to systematically analyze, identify, and
report the scale of sensitive input validations inside Android
system services and their potential flaws.
• From analyzing and summarizing the flaws of sensitive input
validations, we develop a fully-functional tool Invetter to
automatically discover their problematic uses, which we plan
to open source.
• We evaluate our tool on 4 AOSP images, from Android 5.0
to 8.0, and find 20 exploitable vulnerabilities in total, many
of which are confirmed by the corresponding vendors.
2 BACKGROUND
In this section, we provide necessary background for understanding
how the Android system services work, and how input validations
are performed in Android framework.
2.1 Android System Services
The Android framework consists of more than one hundred system
services which provide support for accessing various system re-
sources, such as retrieving user location, sending SMS, and checking
network connectivity. Since these services are part of the Android
framework, their execution environment enjoys more privilege and
are separated from apps. For example, the system service media
is executed in a system process called media_server. Commonly,
system services should be registered to the ServiceManager, so that
they can be accessed by apps or other services.
Each system service can be accessed via a set of pre-defined
public interfaces. These interfaces are commonly declared using
Android Interface Definition Language (AIDL). During the compi-
lation process of Android framework, interfaces declared by AIDL
are compiled into two sets of Java classes, the Stubs and the Proxies,
to act as a channel between services and their clients (which can
be apps or other services). Specifically, Stubs are extended by the
services to implement their functionalities, and Proxies encapsulate
the remote-process communication (RPC) logic to facilitate easy
access by the clients.
Figure 2 depicts this process. To initiate a request to a service, the
client must first send a query to the Android ServiceManager, which
maintains a mapping between services and their corresponding
Binder objects. Using the Binder object returned by the ServiceM-
anager, requests can be served using the interfaces defined by the
Proxies. ServiceManager has no way of forbidding apps from forging
their inputs, thus in principle it should not trust any apps-supplied
data.
Additionally, on top of the Proxies abstraction, Android SDK
provides a set of Managers as wrappers that provide another layer
of APIs which are even simpler for developers to use. Different
from the service code, Managers execute in the same process as
the running app, so malicious developers can reimplement and
overwrite them. Thus, system services cannot trust any security
validation in such app-controlled code.
Figure 2: The Binder-based RPC between system service and
its client.
Figure 3: An input validation in Android SDK.
2.2 Sensitive Input Validations in Android
Services
Sensitive input validation acts as a critical part on the security
of Android services. Commonly, input validation looks like the
following: a piece of input data is compared against a set of pre-
defined expectations, or cross-validated with trusted data source,
and some subsequent actions will be taken based on the outcome of
the comparison. Note that not all input validations are for security
purposes, e.g., checking the format of input or whether there is
a null pointer. In this paper, we are more interested in security-
focused validations.
In Android, we summarize them in two forms: (1) verify the iden-
tity/property of input sender, or (2) restrict the usage of sensitive
resources. For (1), typically the identities/properties can be either
well-known: uid, pid, package name, or obscure: token, cert, and so
on. For (2), an example is the URIs used as keys to access system
content providers which can be restricted by checking the scope of
the URI supplied by an app.
3 OBSERVATION: INSECURE INPUT
VALIDATIONS
By analyzing the existing sensitive input validations, we observed
two sources of insecure input validations:
Confusions About System Security Model. As described in §2,
system services enjoy more privilege, e.g. a system uid compared