3) ht-m1
6) hote1
1) Ignore
I) Ignore all
r) Replace
R) Replace all
a)Add
1) Add Lover
b)Abort
x) Exit
？
aspell会认为HTML标志的内容是拼写错误。通过包含-H（HTML）检查模式选项，这个
问题能够解决，像这样：
309
---
## Page 311
[ne@linuxbox -]$ aspell -H check foo.txt
这会导致这样的结果：
Mispelled HTML file
The quick broun fox jinped over the laxy dog.
1) Mi spelled
6)Misapplied
2) Mi-spelled
7) Miscalled
3) Misspelled
8)Respe1led
4) Dispe1led
9) Misspel1
5) Spelled
0) Misled
i) Ignore
I) Ignore al1
r) Replace
R) Replace all
a) Add
1)Add Lover
b) Abort
x) Exit
？
这个HTML标志被忽略了，井且只会检查文件中非标志部分的内容。在这种模式下，
HTML标志的内容被忽略了，不会进行拼写检查。然而，ALT标志的内容，会被检查。
注意：默认情况下，aspell会忽略文本中的URL和电子邮件地址。通过命令行选项，可以
重写此行为。也有可能指定哪些标志进行检查及跳过。详细内容查看aspell命令手册。
21.6总结归纳
在这一章中，我们已经查看了一些操作文本的命令行工具。在下一章中，我们会再看几个命令
行工具。诚然，看起来不能立即显现出怎样或为什么你可能使用这些工具为日常的基本工具，
310
---
## Page 312
虽然我们已经展示了一些半实际的命令用法的例子。我们将在随后的章节中发现这些工具组成
了解决实际问题的基本工具箱。这将是确定无疑的，当我们学习shell脚本的时候，到时候这
些工具将真正体现出它们的价值。
21.7拓展阅读
GNU项目网站包含了本章中所讨论工具的许多在线指南。
·来自Coreutils软件包：
http://www.gnu.org/software/coreutils/manual/coreutils.html#Output-of-entire-files
http:/www.gnu.org/software/coreutils/manual/coreutils.html#Operating-on-sorted-files
http://www.gnu.org/software/coreutils/manual/coreutils.html#Operating-on-felds-within-
a-line
http://www.gnu.org/software/coreutils/manual/coreutils.html#Operating-on-characters
·来自Diffutils软件包：
http:// www.gnu.org/software/diffutils/manual/html_mono/diff.html
·sed 工具
http:// www.gnu.org/software/sed/manual/sed.html
·aspell 工具
http://aspell.net/man-html/index.html
·尤其对于sed工具，还有很多其它的在线资源：
http:/www.grymoire.com/Unix/Sed.html
http://sed.sourceforge.net/sedlline.txt
·试试用 google 搜索“sed one liners”，“sed cheat sheets”关键字
21.8友情提示
有一些更有趣的文本操作命令值得。在它们之间有：split（把文件分割成碎片），csplit（基于上
下文把文件分割成碎片），和sdiff（并排合井文件差异）。
311
---
## Page 313
22
格式化输出
在这章中，我们继续着手于文本相关的工具，关注那些用来格式化输出的程序，而不是改变文
本自身。这些工具通常让文本准备就绪打印，这是我们在下一章会提到的。我们在这章中会提
到的工具有以下这些：
·nl一添加行号
·fold一限制文件列宽
·fmnt一一个简单的文本格式转换器
·pr一让文本为打印做好准备
·printf一格式化数据并打印出来
·grof一一个文件格式化系统
22.1简单的格式化工具
我们将先着眼于一些简单的格式工具。他们都是功能单一的程序，并且做法有一点单纯，但是
他们能被用于小任务并且作为脚本和管道的一部分。
22.1.1nl-添加行号
nl程序是一个相当神秘的工具，用作一个简单的任务。它添加文件的行数。在它最简单的用途
中，它相当于cat -n
[ne@linuxbox -]$ nl distros.txt 1head
像cat，nl既能接受多个文件作为命令行参数，也能接受标准输入。然而，nl有一个相当数
量的选项并支持一个简单的标记方式去允许更多复杂的方式的计算。
312
---
## Page 314
nl在计算文件行数的时候支持一个叫“逻辑页面”的概念。这允许nl在计算的时候去重设
（再一次开始）可数的序列。用到那些选项的时候，可以设置一个特殊的开始值，并且在某个可
限定的程度上还能设置它的格式。一个逻辑页面被进一步分为header,body和footer这样的元
素。在每一个部分中，数行数可以被重设，并且/或被设置成另外一个格式。如果nl同时处理
多个文件，它会把他们当成一个单一的文本流。文本流中的部分被一些相当古怪的标记的存在
加进了文本：
标记
含义
逻辑页页眉开始处
逻辑页主体开始处
逻辑页页脚开始处
Table 22-1: nl 标记
每一个上迹的标记元素肯定在自已的行中独自出现。在处理完一个标记元素之后，nl把它
从文本流中删除。
这里有一些常用的nl选项：
选项
含义
-b style
把body按被要求方式数行，可以是以下方式：a=数所有
行
t=数非空行。这是默认设置。
Ⅱ=无
pregexp=只数那些匹配了正则表达式的行
-f style
将footer按被要求设置数。默认是无
-h style
将header按被要求设置数。默认是
-i number
将页面增加量设置为数字。默认是一。
-n format
设置数数的格式，格式可以是：ln=左偏，没有前导零。
m=右偏，没有前导零。
IZz=右偏，有前导零。
-P
不要在没一个逻辑页面的开始重设页面数。
-s string
在没一个行的末尾加字符作分割符号。默认是单个的tab。
-V number
将每一个逻辑页面的第一行设置成数字。默认是一。
313
---
## Page 315
-W width
将行数的宽度设置，默认是六。
表格22-2:常用nl选项
坦诚的说，我们大概不会那么频繁地去数行数，但是我们能用nl去查看我们怎么将多个
工具结合在一个去完成更复杂的任务。我们将在之前章节的基础上做一个Linux发行版的报
告。因为我们将使用nl，包含它的header/body/footer标记将会十分有用·我们将把它加到
上一章的sed脚本来做这个。使用我们的文本编辑器，我们将脚本改成一下并且把它保存成
listros-nl.sed:
# sed script to produce Linux distributions report
1i\
111-11-11
Linux Distributions Report\
Nane
Ver. Released\
:1=11
s/[09]{2)[09]2[09]4)$/31\2/
$i1
1=11
End Of Report
这个脚本现在加入了nl的逻辑页面标记并且在报告的最后加了一个footer。记得我们在我
们的标记中必须两次使用反斜杠，因为他们通常被sed解释成一个转义字符。
下一步，我们将结合sort，sed,nl来生成我们改进的报告：
[ne@linuxbox -]$ sort -k 1,1 -k 2n distros.txt 1 sed -f distros-nl.sed | nl
Linux Distributions Report
Bame
Ver.
Released
314
---
## Page 316
1Fedora5
20060320
2Fedora6
20061024
3Fedora7
20070531
4Fedora8
20071108
5
Fedora9
20080513
6
Fedora
10
2008-1125
SUSE
10.1
20060511
8
SUSE
10.2
20061207
SUSE
10.3
20071004
10SUSE
11.0
20080619
11Ubuntu
6.06
20060601
12 Ubuntu 6.10
20061026
13 Ubuntu 7.04
20070419
14 Ubuntu 7.10
20071018
15Ubuntu8.04
20080424
End Of Report
我们的报告是一串命令的结果，首先，我们给名单按发行版本和版本号（表格1和2处）
进行排序，然后我们用sed生产结果，增加了header（包括了为nl增加的逻辑页面标记）和
footer。最后，我们按默认用nl生成了结果，只数了属于逻辑页面的body部分的文本流的行
数。
我们能够重复命令并且实验不同的nl选项。一些有趣的方式：
nl -n rz
和
nl -v 3 -s
22.1.2fold-限制文件行宽
折叠是将文本的行限制到特定的宽的过程。像我们的其他命令，fold接受一个或多个文件及标
准输入。如果我们将一个简单的文本流fold，我们可以看到它工作的方式：
315
---
## Page 317
[ne@linuxbox -]$ echo *The quick brovn fox junped over the lazy dog." I fold -w 12
The quick br
oun fox junp
ed over the
lazy dog-
这里我们看到了fold的行为。这个用echo命令发送的文本用-w选项分解成块。在这个例
子中，我们设定了行宽为12个字符。如果没有字符设置，默认是80。注意到文本行不会因为
单词边界而不会被分解。增加的-s选项将让fold分解到最后可用的空白字符，即会考虑单词
边界。
Sop ze qa xoao padu xog uoq xotnb ou. ooo s[- xoqxnutou]
1fo1d =α 12 -5
The quick
broun fox
junped over
the lazy
dog.
22.1.3fmt-一个简单的文本格式器
fnt程序同样折叠文本，外加很多功能。它接受文本或标准输入并且在文本流上格式化段落。
它主要是填充和连接文本行，同时保留空白符和缩进。
为了解释。我们将需要一些文本。让我们抄一些fnt主页上的东西吧：
‘fat' reads fron the specified FILE argunents (or standard input if
none are given) , and vrites to standard output.
By default, blank lines, spaces betveen vords, and indentation are
preserved in the output; successive input lines vith different
indentation are not joined; tabs are expanded on input and introduced on
output.
fmt’ prefers breaking lines at the end of a sentence, and tries to
316
---
## Page 318
avoid line breaks after the first vord of a sentence or before the last
word of a sentence. A "sentence break" is defined as either the end of
10 saoeds on fq panottog *i&*, fo fue ut Surpua pzon e zo udexaered e
end of line, ignoring any intervening parentheses or quotes. Like TeI,
'fat'reads entire “paragraphs”before choosing line breaks; the
algorithn is a variant of that given by Donald E. Knuth and Michael F.