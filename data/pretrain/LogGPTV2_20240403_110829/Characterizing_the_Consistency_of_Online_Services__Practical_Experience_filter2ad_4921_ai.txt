if RYW or MR or WFR then
sl ← orderByTimestamp(sl)
if RYW then
sl ← addMissingSessionElementsToSL(sl, lstState.insertSet, lstState.lastSessionTimestamp)
sl ← purgeOldSessionElementsFromSL(sl, lstState.lastSessionTimestamp)
if MR or WFR and RYW then
sl ← addLocalViewElementsToSL(sl, lstState.localView)
sl ← purgeOldElementsFromSL(sl, lstState.lastTimestamp)
if MW then
if MR then
sl ← removeOldElementsFromSessionSequence(sl,lstState.localView)
sl ← sortSessionSequences(sl)
sl ← removeElementsWithMissingDependenciesMW(sl)
if WFR then
sl ← removeElementsWithMissingDependenciesWFR(sl)
cutTimestamp ← highestCutTimestamp(sl)
sl ← removeElementsBelowCutTimestamp(sl, cutTimestamp)
if MW then
sl ← removeElementsBelowMisssingSessionElement(sl)
sl ← subList(sl, 0, N )
if RYW then
lstState.lastSessionTimestamp ← getLastSessionTimestamp(sl)
lstState.insertSet ← purgeOldElements(lstState.insertSet, lstState.lastSessionTimestamp)
if MR or WFR then
lstState.lastTimestamp ← getLastTimestamp(sl)
lstState.localView ← addNewElements(sl, lstState.localView)
lstState.localView ← purgeOldElements(lstState.localView, lstState.lastTimestamp)
listStates[Lst] ← lstState
return removeMetadata(sl)
the operation in line 7 of the algorithm always generates a timestamp that in-
creases monotonically with the number of insert operations and when WFR is
selected is also greater than the timestamp of any of its direct dependencies, as
described in Section 4.3.4.
The get operation starts by executing the read block, which is the same
in all algorithms (lines 2− 3), then applies the transformation blocks of each
algorithm, and before returning to the client executes the store blocks of each
algorithm. To simplify the algorithm the store block of Writes Follow Read was
changed and now uses the lastTimestamp to remove the old elements from
the localView. In other words, the store block used in this case is similar to the
store block of the Monotonic Reads algorithm presented earlier. There were
67
CHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
Figure 4.4: Combinations anomaly
other changes in the algorithm that we explain in the following section.
4.3.6 Corner Cases
In this section we describe three corner cases that may arise when the algo-
rithms are working in combination.
To guarantee that the algorithm ensures safety, it is necessary to ensure
that the transformation blocks of the algorithms that remove elements from
sl do not remove elements that might aﬀect the guarantees provided by the
transformation blocks of the other algorithms that were executed before. There
are two situations where this can occur:
The ﬁrst situation happens when Monotonic Reads and Monotonic Writes
guarantees are selected in combination, In particular, this situation occurs
when the localView contains elements previously returned to the client, and
in the next get operation the service returns elements from a session that were
assumed to be truncated previously. This situation is exempliﬁed in Figure 4.4.
68
E1E2E3E4E5E6TimelineS2S2S2Get Operation returnsService returnsTs:1Ts:2Ts:3Ts:8Ts:9Ts:10Get Operation returnsService returnsS3S2S1FirstGet Operation:SecondGet Operation:TopE6E5E4E1E6E5E4E2E4E2XE6E5E4E1E3E2E2E6E5E4E1E14.3. ALGORITHMS
In this example, we have a timeline with six elements inserted in a list by ses-
sion 1, session 2, and session 3. The ﬁrst get operation returns four elements,
one from session 1, the last two inserted in session 2, and another from ses-
sion 3. Note that the service originally returned all elements and truncated
elements E3 and E2, and returned the last two elements inserted in session 2,
E4 and E1, which is valid considering the Monotonic Writes property. The next
get operation, initiated by session 2, obtains from the service the same three
elements at the top, but the last is E2, which was the ﬁrst element inserted in
session 2. In this case, the list returned by the service has an anomaly of the
Monotonic Writes property because element E3 is missing. This may happen
if the get operation is executed in a diﬀerent replica of the service, that did
not receive the other inserted elements yet. Our algorithm, in this situation is
going to merge the localView, which contains the elements previously return
to the client, with the list returned by the service, and the Monotonic Writes
transformation block is going to remove E5 and E6 to eliminate a gap in the
sequence of elements added by session 2. This situation causes an anomaly
because the get operation is going to return elements that preceded E5 and E6
previously, but misses E5 and E6. To eliminate this anomaly, it is necessary to
guarantee that the new elements inserted in sl do not create a gap below the
oldest element from a session subsequence that had been previously returned
to the client. To avoid this situation, before executing the Monotonic Writes
transformation block, we use the localView to identify the previous session’s
subsequences returned to the client, we then remove from sl the new elements
of each previous subsequence that are older than the last element of each subse-
quence previously returned to the client, this is done in line 13 of Algorithm 7.
In the example the get operation is going to return the same elements that were
previously returned to the client, which is safe. This happens because E2 was
the only new element returned in the last request from the service, and was
removed from sl, which means that the elements that are going to be returned
are the elements that were already stored in the localView.
The second situation happens when Read Your Writes and Writes Follow
69
CHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
Reads are selected together. To simplify the explanation, lets assume the fol-
lowing scenario: a client in a session issues a get operation that returns the
elements E1, E2, and E3 from other sessions that are dependencies of each
other, E1≺E2≺E3. Then the client inserts E4, a new element in the list (in this
case, E3, E2, and E1 are dependencies of E4). The client then issues another get
operation and the service retrieves only E3 and E1, and the Read your Writes
transformation block is going to insert E4 in sl, because E4 is missing. In this
case, Writes Follow Reads transformation block removes E4 from sl because
the E2 dependency is missing, this situation causes an anomaly, because the
get operation should return E4 and all of its dependencies. To guarantee this,
we need to ensure that the dependencies of E4 are in sl, to this end, the ele-
ments in localView i.e., the elements previously returned to the client, must
be included in sl. To achieve this, the Monotonic Reads transformation block
is executed before Writes Follow Reads transformation block, which will guar-
antee that all missing elements are added to sl, avoiding the exclusion of E4 by
the transformation block of the algorithm that enforces Writes Follow Reads.
Doing this guarantees that E4 and the respective dependencies are returned to
the client.
Finally, the last corner case happens when Monotonic Writes and Writes
Follow Reads are enforced together. To simplify the explanation let’s assume
the following scenario: a client in a session issues a get operation and then
inserts two elements in sequence. In this case, the dependencies of the two
elements are the elements retrieved in the get operation. If a client in another
session receives a list that contains several elements, including the dependen-
cies and only the last element of the sequence, an anomaly occurs, because the
ﬁrst element of the sequence is missing and its successor and the dependencies
of the two are present. To avoid this situation we associate to each element
the timestamp of the previous element inserted in the session, and at end of
the Writes Follow Reads transformation block we remove all elements with a
timestamp below the missing element. In this case we return a suﬃx of the list
generated by the execution of both transformation blocks of the algorithm.
This behavior emerges as a consequence of being able to switch on and oﬀ
70
4.3. ALGORITHMS
individual session guarantees, we could have interpreted this is as an example
of the subtle semantic distinctions of the various session guarantees however,
we decided to interpret this behavior as something that should be avoided, and
adapted our algorithms to preclude this situation.
According to our analysis of the algorithms these are the only possibilities
for this type of situations where one algorithm will break the conditions that
are necessary for the correctness of another algorithm. In Section 4.6 we present
the correctness arguments detailing why this is the case.
4.3.7 Progress
Our goal is to provide safety to applications that are using Internet services;
however we also need to guarantee progress, i.e., we need to ensure that the
algorithms alone or in combination, in a session, will return new elements.
When we combine the algorithm of Monotonic Reads with Monotonic Writes
or Writes Follow Reads, it becomes more challenging to ensure progress when
a client issues a sequence of get operations over the same list (i.e., data objects).
The problem arises when a get operation receives from the service a list with a
sequence of elements that are more recent than the previous elements returned
to the client. This situation can produce a gap between the two lists and Mono-
tonic Writes or Writes Follow Reads algorithms may remove all new elements
to ensure safety, causing subsequent get operations to return the same elements
in every request. This situation is illustrated in Figure 4.5. In this example we
have a timeline with seven elements inserted in a list by session 1 and session
2. The ﬁrst get operation returns the ﬁrst two elements inserted in the list, one
from session 1 and another from session 2; Then the next get operation, initi-
ated by the same client, obtains from the service the last two elements inserted,
E6 and E7, in the context of session 2. In this situation, the Monotonic Writes
algorithm detects that E4 from session 2 is missing and returns E1 and E2.
In order to avoid this problem, we execute the transformation block of the
get operation and test if the produced list contains the same elements that were
previously returned to the client. If the list contains the same elements and
there is a time gap between this list and the list returned by the service, we run
71
CHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
Figure 4.5: Time Gap
again the transformation block for the service list, but before, we remove all
elements from the localView, and we use the timestamp of the oldest element
in service list as lastTimestamp. After executing the get operation we compare
the number of elements of the two produced lists and return the list with more
elements or the list with the most recent elements if they have the same number
of elements. To guarantee progress, we also need to avoid situations where the
previous list returned to the client is always bigger than the list with the most
recent elements. To do this, we deﬁne the maximum number of times that the
old list can be returned. This value serves as a conﬁguration parameter for
our middleware layer. Leveraging this solution guarantees that in the example
described previously we are going to return E7 and E6. Note that this is the
same behavior provided by a service that ensures the properties mentioned
above in combination, the ﬁrst get operation returns E2 and E1 and the second
get operation is going to return E7 and E6 because the service contains the
seven elements and the get operation only returns the two elements at the top.
72
E1E2E3E4E5E6E7TimelineS2S2S2S2E2E1Get Operation returnsService returnsE2E1Ts:1Ts:2Ts:5Ts:8Ts:9Ts:11Ts:10E7E6Get Operation returnsService returnsE2E1S1S1S1FirstGet Operation:SecondGet Operation:Top4.4. MIDDLEWARE DESIGN
Figure 4.6: Middleware with adapters
4.4 Middleware Design
Another goal we have is to allow our solution to be generic and easy to adapt,
to allow accessing any Internet service with a public API, and give the devel-
opers the same library interface to work with. To this end, we introduced two
adapter layers that must be provided (see Figure 4.6) to execute our middle-
ware in this context. These layers capture the API calls performed by the client
application and translate them to a standard API exposed by our Middleware
(ClientAdapter), and translate the calls to the centralized service performed by
our Middleware into API calls to the library used to interact with the service
(ServiceAdapter), respectively. The adapters themselves are quite straightfor-
ward to write, and we believe most developers will be able to easily write new
adapters to use our Middleware in combination with diﬀerent libraries for
accessing other online services.
73
CHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
4.5 Evaluation
In this section we present the experimental evaluation of our Middleware,
which compares the client-perceived performance obtained when using our
Middleware to provide each of the session guarantees in isolation and their
combination (i.e, enforcing all four session guarantees). In our experiments
we used a prototype of our Middleware and the evaluation was made using
two diﬀerent geo-replicated online services. First, to illustrate the beneﬁt of
our Middleware when designing third-party applications that interact with
online social networks we have used Facebook’s public API. Then, to illustrate
the operation of our Middleware when interacting with a service that imposes
fewer restrictions on the number and timing of client operations, we experi-
mented with a geo-replicated deployment of the Redis data store managed by
ourselves.
Our evaluation focuses on assessing the overhead that results from the use
of our middleware, in terms of client perceived latency (for insert and get oper-
ations), the communication overhead due to the inclusion of additional meta-
data, and the storage overhead, namely due to the need for our Middleware
to locally maintain some information about previous operations performed by
the client. Our prototype of the Middleware layer was implemented in the
Java language. To interact with the two services that we explore in this work,
we resorted to the restFB library for Facebook [59], and the Jedis library for
interacting with Redis [43], for each library we implemented the respective
adapters explained previously in Section 4.4.
4.5.1 Facebook Results
We have conducted our experiments with Facebook by using YCSB [4] to emu-
late clients using Facebook to post messages to a group feed and reading the
contents of that group feed. To emulate such clients spread across the World,
we run three independent YCSB instances in three diﬀerent locations using
Amazon EC2 [6] instances in Oregon, Ireland, and Tokyo. Each YCSB instance
uses 10 threads, emulating a total of 10 independent clients, for a total of 30
74
4.5. EVALUATION
(a) Global
(b) Per location
Figure 4.7: Latency of Get Operation in Facebook
clients across the World. Each emulated client has an independent instance of
our Middleware. To accommodate the rate limits of Facebook’s public API, we
impose a maximum of 15 requests per second per YCSB instance.
Each experiment reported in this section was executed 7 times, and dif-
ferent consistency guarantees were rotated along experiments, such that each
diﬀerent consistency guarantee had experiments running on diﬀerent time pe-
riods of the day. This was done to remove experimental noise due to contention
on the Facebook servers, (e.g., to compensate for the activity of real users of the
system). The workload executed by clients was a mix of 50% insert and 50% get
operations. The Middleware was conﬁgured to have N = 25, meaning that each
get retrieves at most 25 elements from the feed. Experiments reported in this
section report the aggregated observations of 53,119 insert and get operations.
4.5.1.1 Latency
We start by observing the latency of operations in Facebook when accessing the
service directly through the library (labeled in the plots as None) and when
using our Middleware to enforce each of the session guarantees in isolation
and all of the session guarantees (labeled in the plots as All).
Figure 4.7 reports the latency observed for get operations, for all clients and
per location of the client. Figure 4.7a shows that our Middleware introduces
a small increase in the latency of get operations with a maximum increase of
approximately one hundred milliseconds. Not surprisingly the overhead is at
75
 0 50 100 150 200 250 300 350 400 450NoneRYWMRMWWFRALLTime(ms)Consistency GuaranteesCHAPTER 4. FINE-GRAINED CONSISTENCY FOR ONLINE SERVICES
(a) Average
(b) Average
Figure 4.8: Latency of Insert Operation in Facebook
its maximum when all session guarantees are being enforced by our Middle-
ware which is explained by a combination of the additional metadata carried
in each element, and the processing cost of the Middleware to perform the
enforcement of each individual session guarantee.
When observing the distribution of latency for requests according to the
region where the client is located (Figure 4.7b), we note the same relative
distribution in the results, with overall lower latency values for the clients in
Oregon. This is explained by the latency of those clients towards the Facebook
servers, which is notoriously smaller as conﬁrmed by measuring the latency
when using the client library directly. Another noteworthy aspect of Figure 4.7b
is that the observed latency has a visible variation, both across and even within
diﬀerent client locations. This suggests that the latency overhead in these
cases may suﬀer from a noticeable variability due to external factors which are
related with the architecture and deployment of such a large-scale real world
application.
Figure 4.8 reports average latency results for the insert operation for all
clients and per client location. The results reported in Figure 4.8a show that
globally the latency penalty incurred by the use of our Middleware is again
modest, with a maximum increase of at most 50 milliseconds. The individ-
ual session guarantee with the largest increase in latency is Monotonic Reads.
76
4.5. EVALUATION