ministrative scope of the role performing the deletion. This
problem arises because the operation aﬀects roles outside
the administrative scope of the role performing the dele-
tion. In the case of the operation deleteEdge(PL1, PE1, PL1),
the operation aﬀects DIR which is not in σ(PL1).
However, a 0SP model does not necessarily prevent a role
a from performing a hierarchy operation that preserves σ(a)
but does not preserve the administrative scope of a more
senior role. In many situations, we would not want this to
happen, hence the idea of 1SP models.
Note that a 1SP model would permit the operation
addRole(DIR,{QE1},{DIR}), which does not preserve σ(PL1).
As a further example, deleteEdge(DIR, ENG1, QE1) is 2SP, but
deleteEdge(DIR, QE1, PL1) is not. There may be situations –
when we wish to guarantee the autonomy of administrative
domains, for example – where we want the administrative
scope of every role to be preserved by every hierarchy oper-
ation; hence the introduction of 2SP models. (We shall see
later that ARBAC97 is approximately 2SP, although it was
never characterized in this way when it was introduced.)
Finally, we note that a 2SP model would permit the op-
eration deleteRole(DIR, QE1). Although this operation pre-
serves σ(PL1), since σ(PL1) ∩ R(cid:1)
, we may wish to
strengthen the autonomy of domains by preventing more se-
nior administrators changing nested domains and hence we
introduce the idea of 3SP models.
(cid:1)
= σ(PL1)
4.3 Scope preserving conditions
In this section we provide several diﬀerent sets of condi-
tions governing the success of hierarchy operations. We ﬁrst
introduce a number of useful consequences of Lemma 2. We
then state without proof a number of results concerning the
scope preserving properties of each of these sets of condi-
tions.
A corollary of Lemma 2 is that for every role r ∈ R,
there exists a smallest (non-trivial) administrative domain
to which r belongs, which we will denote by [r].5 Since [r]
is an administrative domain, [r] = σ(a) for some role a,
and we will say that a is the line manager of role r. From
Figure 1(c) we see that [PE1] = {ENG1, PE1, QE1, PL1}, for
example, and hence that PL1 is the line manager of PE1.
Let X ⊆ R. We deﬁne (cid:15)X(cid:16) to be the largest administra-
tive domain D such that D ⊆ [x] for all x ∈ X, and (cid:17)X(cid:18) to
be the smallest administrative domain D such that [x] ⊆ D
for all x ∈ X. We have, for example, (cid:15){QE2, PL2}(cid:16) = [QE2]
and (cid:17){QE2, PL2}(cid:18) = [PL2]; and (cid:15){QE1, PL2}(cid:16) = ∅ and
(cid:17){QE1, PL2}(cid:18) = R. Note that if there exist x, y ∈ X such
that [x] ∩ [y] = ∅ then (cid:15)X(cid:16) = ∅.
Table 3 lists four diﬀerent sets of conditions that must be
satisﬁed for hierarchy operations to be successful. We will
use these sets in the remainder of this section to prove the
existence of 0SP, 1SP, 2SP and 3SP administrative models:
Crha is the set of conditions used by the RHA family of
models, and is reproduced from Table 2 for convenience; Ci
gives rise to an iSP model, i = 0, 2, 3. We also prove that
C0 is suﬃcient to deﬁne a 1SP model.
Each column in the table speciﬁes a set of conditions for
each hierarchy operation. The conditions become increas-
ingly restrictive from left to right. Each set of conditions
is derived in part from the previous set. Note the following
features of the table:
• A new condition has been introduced in order to make
deleteEdge 0SP;
• New conditions are required to deﬁne 2SP operations
when those operations may add edges to the hierar-
chy. Informally, the new conditions require that new
edges are directed from children within a larger admin-
istrative domain to parents in a smaller administrative
domain;
• New conditions are required to deﬁne 3SP operations.
Informally, these conditions require that the most lo-
cal administrator performs the operation to preserve
autonomy.
Henceforth we will write ox to denote that we are con-
sidering hierarchy operation o using conditions Cx from Ta-
succeeds if C ⊆ (cid:2)σ(a), P ⊆ σ(a) and (cid:17)P(cid:18) ⊆ (cid:15)C(cid:16).
ble 3. The operation addRole2(a, r, C, P ), for example, only
Remark 8. It is worth noting that each of the conditions
in Table 3 can be easily checked using the domain tree. To
check that [c] = σ(a), for example, it is simply a matter of
conﬁrming that a is the immediate parent of c in the tree.
Theorem 9. C0 is 0SP.
5This domain is simply the (unique) immediate parent of
r in the domain tree. ARBAC97 deﬁnes the concept of an
immediate authority range, which is analogous to this type
of administrative domain.
Operation
addRole(a, r, C, P )
deleteRole(a, r)
addEdge(a, c, p)
deleteEdge(a, c, p)
Crha
C ⊆ (cid:2)σ(a)
P ⊆ σ(a)
r ∈ (cid:2)σ(a)
c, p ∈ σ(a)
c, p ∈ σ(a)
C0
C ⊆ (cid:2)σ(a)
P ⊆ σ(a)
r ∈ (cid:2)σ(a)
c, p ∈ σ(a)
c, p ∈ (cid:2)σ(a)
C2
C ⊆ (cid:2)σ(a)
P ⊆ σ(a)
(cid:17)P(cid:18) ⊆ (cid:15)C(cid:16)
r ∈ (cid:2)σ(a)
c, p ∈ σ(a)
[p] ⊆ [c]
c, p ∈ (cid:2)σ(a)
(cid:17)(cid:4)p(cid:18) ⊆ [c]
C3
C ⊆ (cid:2)σ(a)
P ⊆ σ(a)
(cid:15)C(cid:16) = (cid:17)C(cid:18) = σ(a)
r ∈ (cid:2)σ(a)
[r] = σ(a)
c, p ∈ σ(a)
c, p ∈ (cid:2)σ(a)
[c] = σ(a)
[c] = σ(a)
Table 3: Scope preserving conditions
Theorem 10. C0 is 1SP.
Theorem 11. C2 is 2SP.
Corollary 12. C3 is 2SP.
Theorem 13. C3 is 3SP.
Space constraints do not permit the inclusion of proofs
of these results. Theorem 9 is established by ﬁrst proving
that RHA operations preserve both ↓a and ↑a, except for
deleteEdgerha. The proof of this preparatory result is con-
structive and yields the appropriate condition for deleteEdge
to be 0SP. (Notice that columns two and three of Table 3
only diﬀer in the entry for the delete edge operation.) The-
orem 10 is proved by extending the proof method used for
Theorem 9. Theorem 11 is proved using the fact that do-
mains are either nested or disjoint and that C2 only permits
the addition of edges to the hierarchy if they are directed
into interior domains, thereby preserving the set of senior
roles of the child role. Corollary 12 is established by prov-
ing that if operation op3 succeeds then so does op2 and then
using Theorem 11, and again makes use of the fact that do-
mains are nested. Theorem 13 follows from the deﬁnition
of C3 and a simple proof by contradiction. Full proofs are
available in our technical report [5].
5. RBAT: A TEMPLATE FOR ROLE-
BASED ADMINISTRATIVE MODELS
We have introduced the idea of an administrative domain
and a number of criteria that can be used to control the
way in which administrative domains are aﬀected by hier-
archy operations. In this section we brieﬂy describe RBAT
(role-based administration template), which provides a de-
sign pattern for role-based administration models. We will
show how particular instances of the framework are related
to RHA4 and ARBAC97.
5.1 Components of RBAT
RBAT deﬁnes the following components:
• A non-empty set of administrative units U, each of
which contains a unique administrator role. Moreover,
for all U, U(cid:1) ∈ U, one of the following conditions must
hold: (i) U ⊆ U(cid:1)
(iii) U ∩ U(cid:1)
• A set of hierarchy operations O;
• A set of conditions C, each of which determines the
(ii) U ⊇ U(cid:1)
= ∅;
success of a particular operation;
• A set of administrative roles RA, which may be empty;
• A relation can-administer ⊆ RA×R, which associates
an administrative role with the administrator of an
If RA = ∅, can-administer ⊆
administrative unit.
R × R.
5.2 The can-administer relation
Instead of using roles in the hierarchy, we may deﬁne a dis-
tinct set of administrative roles and assign them to admin-
istrative domains within the role hierarchy. This is similar
to the approach taken in ARBAC97 and is a simpliﬁcation
of the admin-auth relation in the RHA family of models.
Since an administrative domain is uniquely deter-
mined by its administrator, we can introduce a relation
can-administer ⊆ RA × R, where RA is the set of admin-
istrative roles. The meaning of (a, r) ∈ can-administer is
that a has administrative control of σ(r), the administrative
unit deﬁned by its administrator r. (For simplicity, we con-
tinue to use σ(r) to denote the administrative unit deﬁned
by an administrator r; we will also write σ(a) to denote the
set of administrative units controlled by an administrative
role a.) Hence (PSO1, PL1) ∈ can-administer, for example,
could be used to specify that PSO1 has been granted control
over the administrative unit σ(PL1) = {ENG1, PE1, QE1, PL1}.
Table 4 shows the conditions for success of hierarchy op-
erations within this general framework.
In simple terms,
an operation performed by an administrative role a suc-
ceeds if all the arguments of the operation belong to a sin-
gle administrative unit (with administrator x) that is con-
trolled by a and x is permitted to perform the desired op-
eration within that administrative unit. The model can
be chosen to be 0SP, 1SP, 2SP or 3SP, simply by select-
ing the appropriate criteria for the operation to succeed
when performed by x. If (PSO1, PL1) ∈ can-administer, for
example, then deleteEdgerha (PSO1, PE1, PL1) succeeds, but
deleteEdge0(PSO1, PE1, PL1) fails.
5.3 The RHA4 model
It is natural to expect that RBAT has some similarity with
the RHA family of models, since administrative units are a
generalization of administrative domains (which are deﬁned
by administrative scope). Note that RHA1 is a special case
of RBAT in which U is the set of administrative domains,
RA = ∅, can-administer = {(r, r) : r ∈ R} and C = Crha .
The can-administer relation is identical in structure to
the relation admin-auth ⊆ RA × R deﬁned in RHA4, the
most complex model of the RHA family. In RBAT, we deﬁne
the administrative scope of an administrative role a to be the
Operation
addRole(a, r, C, P )
deleteRole(a, r)
addEdge(a, c, p)
deleteEdge(a, c, p)
Conditions
∃x ∈ R, (a, x) ∈ can-administer
addRole(x, r, C, P ) succeeds
deleteRole(x, r) succeeds
addEdge(x, c, p) succeeds
deleteEdge(x, c, p) succeeds
Table 4: Success of hierarchy operations in RBAT
union of the administrative units it controls and insist that
for any command to succeed, all arguments must belong to
a single one of those units. However, in RHA4, the adminis-
trative scope of a was deﬁned in terms of the roles controlled
by a (that is, {r ∈ R : (a, r) ∈ admin-auth}). An example
should make the diﬀerence clearer: the RHA model would
permit (PSO1, PE1), (PSO1, QE1) ∈ admin-auth, meaning that
σ(PSO1) = {ENG1, PE1, QE1}, whereas these pairs are not per-
mitted in the can-administer relation because PE1 and QE1
are not administrators in R. Moreover, although we per-
mit (PSO1, PL1), (PSO1, PL2) ∈ can-administer, for example,
we do not permit the operation addEdge2(PSO1, ENG1, QE2).
Strictly speaking, then, RHA4 is not an instance of RBAT,
although an 0SP model that uses administrative domains as
administrative units is a close approximation to RHA4.
6. CONNECTIONS WITH ARBAC97
section.
ARBAC97 deﬁnes
What is more surprising is that the ARBAC97 model
can be expressed in terms of the framework described
in the last
the relation
can-modify ⊆ RA × E, where E is the set of encapsulated
ranges in R (see Deﬁnition 14 below). Roughly speaking,
the administrative role a ∈ RA can perform a hierarchy
operation provided the arguments are contained in some en-
capsulated range E and (a, E) ∈ can-modify. In addition,
no hierarchy operation may violate the encapsulation of the
ranges contained in the can-modify relation: this is clearly
a kind of preservation property.
In this section we identify a strong link between encap-
sulated ranges and administrative domains and provide a
new formulation of ARBAC97. We also identify a couple
of weaknesses in the original formulation, which become ap-
parent when the ARBAC97 model is interpreted within our
framework.
The following deﬁnition is due to Sandhu et al [15, Deﬁni-
tion 16], although it has been slightly modiﬁed as a result of
an observation made by Crampton and Loizou [6, Remark
7.3].
Definition 14. A range [x, y] is encapsulated if for all
z ∈ (x, y) and all w (cid:6)∈ (x, y):
w > z iﬀ w (cid:1) y;
w < z iﬀ w (cid:2) x.
Lemma 15. For
(cid:17)[x, y](cid:18) = σ(y).
any
encapsulated
range
[x, y],
Proof. Let [x, y] be an encapsulated range and let
z ∈ [x, y]. We will show that ↑z ⊆ (cid:11)y. Let w ∈ ↑z. There are
two possibilities: (i) if w (cid:2) y then w ∈ (cid:11)y; (ii) if w (cid:6)(cid:2) y then
since z (cid:2) w and [x, y] is encapsulated we have y (cid:2) w and