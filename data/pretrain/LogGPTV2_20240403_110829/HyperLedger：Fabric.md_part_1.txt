# HyperLedger：超级账本
Hyperledger (或
Hyperledger项目)是一个旨在推动区块链跨行业应用的开源项目， 由
Linux基金会在2015年12月主导发起该项目，
成员包括金融，银行，物联网，供应链，制造和科技行业的领头羊。
**Hyperledger的区块链平台有：**
Hyperledger Burrow
Hyperledger Fabric：区块链技术的一个实现
Hyperledger Iroha：轻量级分布式账本，侧重于移动
Hyperledger Sawtooth：高度模块化的分布式账本平台
Hyperledger Indy
请访问官网：
请访问社区：
**Hyperledger Burrow**
Burrow是一个包含了"built-to-specification"的以太坊虚拟机.区块链客户端。其主要由Monax贡献，并由Monax
和英特尔赞助。Burrow是最早Monax开发的项目，后来进入HyplerLedger孵化。Burrow的Incubation
proposal中介绍，burrown之前的名字是 eris-db。
**Hyperledger Fabric**
Hyperledger Fabric是一个许可的区块链构架(permissioned blockchain
infrastructure)。其由IBM和Digital
Asset最初贡献给Hyperledger项目。它提供一个模块化的构架，把架构中的节点、智能合约的执行(Fabric项目中称为\"chaincode\")
以及可配置的共识和成员服务. 一个Fabric网络包含同伴节点（\"Peer
nodes\"）执行chaincode合约，访问账本数据，背书交易并称为应用程序的接口。命令者节点（\"Orderer
nodes\"）负责确保此区块链的一致性并传达被背书的交易给网络中的同伴们；以及MSP服务，主要作为证书权威（Certificate
Authority）管理X.509证书用于验证成员身份以及角色。
**Hyperledger Iroha**
Iroha是一个基于Hyperledger
Fabric主要面向移动应用的协议，由日本的金融科技公司Soramitsu贡献。
**Hyperledger Sawtooth**
由Intel贡献的Sawtooth利用一种新型公式机制称为时间流逝证明（\"Proof of
Elapsed
Time,\"）一种基于可信的执行环境的彩票设计模式的共识协议由英特尔的Software
Guard Extensions
(SGX)提供。相比Fabric，Sawtooth的一个亮点是能够并行的处理事务：支持事件订阅：
# 区块链工具：
-   **Cello：**是一个部署管理平台，也就是现在常说的baas，用来管理组成链的节点，以及部署链、管理链。用户可以直接通过Cello部署合约。
-   **Composer：**是用于合约、区块链应用开发的工具，用来简化、加快区块链应用的开发过程。
-   **Explorer：**是一个区块链浏览器。
-   Caliper是一个Benchmark工具，华为贡献的，Measuring Blockchain
    Performance with Hyperledger Caliper。
-   Quilt是Interledger Protocol (ILP)协议的Java实现，是日本的NTT
    Data贡献的。
    日本人对区块链很热情嘛，10个项目中，有2个是日本公司贡献的。Interledger
    Protocol
    (ILP)定义了分布式账本与分布式账本之间、传统账本与分布式账本之间的交互过程。
# Hyperledger Fabric概述
Hyperledger
Fabric是由IBM公司主导开发的一个面向企业级客户的开源项目。与比特币和以太坊这类公有链不同，Hyperledger
Fabric网络中的节点必须经过授权认证后才能加入，从而避免了POW资源(POW:共识算法)开销，大幅提高了交易处理效率，满足企业级应用对处理性能的诉求。在permissioned
networks（授权网络）上，进行private confidential
transactions（私人保密交易）。Fabric的定位是商业应用、是企业与企业之间的联盟链。联盟链是不能随随便便接入的，必须有准入限制（permissioned）。相比较于比特币的网络是全公开的网络，任何人都可以接入。同时，为了满足灵活多变的应用场景，Hyperledger
Fabric采用了高度模块化的系统设计理念，将模块进行分离部署，使开发者可以根据具体的业务场景替换模块，实现了模块的插件式管理（plug-in/plug-out）。所以，Hyperledger
Fabric是一个私有链／联盟链的开发框架，而且系统的运行不需要token（令牌）支持。
## fabric模块
-   权限认证模块（MSP）、
-   共识服务模块（Ordering Service）、
-   背书模块（Endorsing
    peers）：背书是指持票人为将票据权利转让给他人或者将一定票据权利授予他人行使。
-   区块提交模块（committing peers）
## 关键组件：
-   Channel(通道)：又称子链，是一种数据隔离机制，保证交易信息只有交易参与方可见，每个channel是一个独立的私有区块链，这使得多个用户可以共用同一个区块链系统而不用担心信息泄露问题。同一peer可加入不同channel，chaincode的操作基于channel进行，同一channel上的peer节点同步其上chaincode执行的结果
-   Chaincode：链码、链上代码，也叫智能合约，将资产定义和资产处理逻辑封装成接口，当其被用户调用的时候，改变账本的状态。[生成Transaction(交易)的唯一来源]{.underline}，[接口的实现代码]{.underline}，[部署在fabric区块链的peer(网络节点)上]{.underline}，[与fabric区块链交互的唯一渠道]{.underline}，[智能合约在fabric上的实现方式]{.underline}
-   Ledger：区块链账本，保存交易信息和智能合约代码。是一个channel(通道)的chain(链),由channel中每个peer维护的数据库。
-   Network：交易处理节点之间的P2P(peer-to-peer:伙伴对伙伴)网络，用于维持区块链账本的一致性。
-   World
    state：显示当前资产数据的状态，底层通过LevelDB和CouchDB数据库将区块链中的资产信息组织起来，提供高效的数据访问接口。
-   Membership service
    provider（MSP）：管理认证信息，为client和peers提供授权服务。为client和peer提供证书的系统抽象组件，Client用证书来认证他们的交易；peer用证书认证其交易背书。该接口与系统的交易处理组件密切相关，旨在使已定义的成员身份服务组件以这种方式顺利插入而不会修改系统的交易处理组件的核心。
-   Ordering Service
    ：排序服务或共识服务，独立于peer流程之外，以先到先得的方式为网络上所有的channel做教育排序，支持可插拔实现，目前默认Solo（单节点共识）、kafka（分布式队列）和SBFT（简单拜占庭容错）。是整个网络的公用binding，包含与每个Member（成员）相关的的加密材料。利用kafka、SBTF等共识算法对所有交易信息进行排序并打包成区块，发给committing
    peers节点(提交节点)，写入区块链中。
## Fabric Network中的三种类型的角色：
-   **Client：**应用客户端，用于将终端用户的交易请求发送到区块链网络；
-   **Orderer**:共识服务认证，对chaincode执行结果consensus。支持solo/kafka/sBFT不同的ordering策略
-   **Peers**：负责维护区块链账本，分为endoring peers和committing
    peers，其中，endorser为交易做背书（验证交易并对交易签名），committer接收打包好的区块，然后写入区块链中。Peers节点是一个逻辑的概念，endorser和committer可以同时部署在一台物理机上。
-   **Ordering
    Service**：接收交易信息，并将其排序后打包成区块，放入区块链，最后将结果返回给committer
    peers。
![](media/image1.jpeg)
普通节点peer：peer节点根据所承担的角色又可以分为记账节点（committer）、背书节点（endorser）、主节点（leader）和锚节点（anchor）。
参考：
-   记账节点（committer）：所有的peer节点都是记账节点，负责验证排序服务节点区块里的交易，维护状态和总账（Ledger）的副本。该节点会定期从orderer节点获取包含交易的区块，在对这些区块进行核发验证之后，会把这些区块加入到区块链中。[committer节点无法通过配置文件配置，需要在当前客户端或者命令行发起交易请求的时候手动指定相关的committer节点]{.underline}。记账节点可以有多个。
-   背书节点（endorser）：部分节点还会执行交易并对结果进行签名背书，充当背书节点的角色。背书节点是动态的角色，是与具体链码绑定的。每个链码在实例化的时候都会设置背书策略，指定哪些节点对交易背书后交易才是有效的。并且只有应用程序向它发起交易背书请求的时候才是背书节点，其他时候都是普通的记账节点，只负责验证交易并记账。[背书节点也无法通过配置文件指定，而是由发起交易请求的客户端指定]{.underline}。背书节点可以有多个。
-   主节点（leader peer）：peer节点还可以是主节点，能与排序服务节点通信，负责从排序服务节点获取最新的区块并在组织内部同步。主节点在整个组织中只能有一个。
-   锚节点（anchor
    peer）：peer节点还可以是锚节点，锚节点主要负责代表组织和其他组织进行信息交换。每个组织都有一个锚节点，锚节点对于组织来说非常重要，如果锚节点出现问题，当前组织就会与其他组织失去联系。[锚节点的配置信息是在configtxgen模块的配置文件configtx.yaml中配置的]{.underline}。锚节点只能有一个。
## Hyperledger交易流程
1.  客户端通过SDK接口，向endorsing peer节点(背书节点)发送交易信息：
2.  每个endorsing
    peer节点模拟处理交易，此时并不会将交易信息写入账本。然后，endorser
    peer会验证交易信息的合法性，并对交易信息签名后，返回给client。此时的交易信息只是在client和单个endorser
    peer之间达成共识，并没有完成全网共识，各个client的交易顺序没有确定，可能存在双花问题，所以还不能算是一个"有效的交易"。同时，client需要收到"大多数"endorser
    peer的验证回复后，才算验证成功，具体的背书策略由智能合约代码控制，可以由开发者自由配置。