chunk size of the victim object QWidgetPrivate is 464 in
ptmalloc, it can actually affect the 27th byte in the relay ob-
ject in the next chunk.
But
time.
Exploit Synthesis. As shown in Figure 10, we place a list
of string (data items of pyListObject ) as the relay object,
then the pointer to the string object is corrupted and redi-
rected to attacker-controllable areas. The forged data length
in the fake string object helps to leak data of a large range. As
long as the library base of array.cpython is obtained, a fake
object of bytearray is built, with controllable data pointer, we
successfully get primitives for AAR and AAW.
1734    30th USENIX Security Symposium
USENIX Association
0xea611251c0(1)MemorylayoutbeforeCOOPLUSattack①②③pyStringobjectDatarange=24DataFieldControllablememory0xea001251c0CounterfeitdataRange=0x7ff..fvptrCounterfeitvptr(2)MemorylayoutafterCOOPLUSattack……ReadableDataFieldReadableDataFieldSt-*
Ptr
Ld-AW[/Ex]-*
App
Bento4
Bitcoin
qt
ﬁrefox
chromium
ImageMagick
Table 4: Statistics of Primitive Capability Analyzing.
INVES
Units
361
60
4,206
4,303
14,822
51
63
3,185
21
222
662
1,594
65
openbable
374
#UVC-OVF: UVC with OOB VFunc.
INVS Unit: an investigation unit is that like [counterfeit virtual function, a member variable in counterfeit object].
Failure Rate: the proportion of Failed-to-Analyzing INVS units.
nonCtrl
108
4
126
361
896
0
16
18
6
8
75
78
6
28
nonPtr
19
4
471
633
1,326
0
10
758
6
34
52
156
17
89
Failure
Rate
4.4%
1.7%
4.0%
13.3%
13.8%
0.0%
1.6%
6.2%
14.3%
11.3%
11.2%
8.5%
13.8%
24.1%
Ex-PC
55
13
106
597
1,634
0
8
506
1
27
174
273
10
29
Const
87
4
46
230
838
0
0
1,641
16
3
115
24
5
89
#UVC
-OVF
31
25
840
969
3,741
1
19
86
8
11
206
303
28
31
exiv2
opencv
aGrum
SLikeNet
mongodb
oce
znc
8
0
453
66
280
0
10
31
2
1
13
9
4
19
Ctrl
9
4
73
133
386
0
3
76
0
5
141
30
4
80
Sum
286
29
1,275
2,020
5,360
0
47
3,030
31
78
570
570
46
334
Figure 11: Summary for the motivation example. The template use {{idx}} to distinguish different derived shape classes. When
the expected number for {{idx}} ranges from 1 to 35, a sample class inheritance hierarchy (CIH) can be seen from the ﬁgure.
A.2 Primitive Capability Analysis
We denote a primitive with a capability (deﬁned in Sec-
tion 3.3) as a primitive gadget. Table 4 shows the capabil-
ities VScape found from candidate primitives. An investi-
gation unit is a tuple contains a counterfeit function and a
member variable of the counterfeit object whose address is
in the relay object in COOPLUS attack. The third column
shows numbers of investigation units VScape found. Notice
that a primitive indicates a combination of a victim function
and any counterfeit function which belongs to the subclass of
the victim class, while an investigation unit is selected only
from counterfeit functions who override the direct parents’
method. So that the number of investigation units is much
less than the number of total primitives. VScape successfully
ﬁnds the majority of them as shown in the fourth column.
Some of the units are failed to analyze because we restricted
the maximum number of the taint paths and the trace depth,
to ensure we can get a result in considerable time. Column 4-
9 shows the exploitable instructions from the analyzed units,
we can see there are sufﬁcient gadgets found in applications
except for ImageMagick [43]. And with this analysis, VS-
cape ﬁlters out a great number of primitive candidates which
are useless for exploitation. For example, 51 primitive can-
didates in ImageMagick have no capabilities for our require-
ments, which is hard to make help for further exploitation.
A.3 Motivation Example
In this section, we present a motivation example help readers
better understand the steps of VScape as discussed in Sec-
tion 4. Due to the space limitation, more details can be found
online at https://github.com/cooplus-vscape
A.3.1 Victim Program
As shown in Figure 11, the target application dispatches
tasks with a switch table in the main loop. Analysts can trig-
ger different program behaviors with elaborate inputs.
This program implements polymorphism with a series of
shape classes. The step 3 in the main loop triggers vir-
tual call ::render() for each created shape. For simplic-
ity, we do not show the global inheritance in this ﬁgure,
.
USENIX Association
30th USENIX Security Symposium    1735
Shape Inheritanceclass shape0{  public:    virtual void render(void);    unsigned long long param_0;};class shape{{idx}}: public shape{{parent_idx}}{  public:    virtual void render(void);    char pre_buf_{{idx}}[{{prefix_buf_size}}];    unsigned long long param_{{idx}};    char suf_buf_{{idx}}[{{suffix_buf_size}}];}; 1: Create shape (shape_type: int)2: Delete shape (shape_idx: int)3: Trigger virtual call: render ( )           4: Create banner (size:int, string : char[ ])           5: Change banner (string : char[ ])           6: Trigger vulnerability ( )           7: Check pwn ( )Main Loopvoid shape{{idx}}::render(){      //expected OOB primitive      param_{{idx}} = param_0;      //side effect      suffix_buf_{{idx}}[{{offset2}}]=‘C’);};Virtual Method Overridevoid check_pwn(){// Exploit is supposed to modify // certificate (global data // stored in .bss)  if (certificate==0){    printf("Not PWNed\n");    }  else{    printf("OOOps!\n");}}Check exploit resultstruct banner{     char header[{{header_size}}];     unsigned long long length;     char* buffer;};void create_banner(uint64 length, char* input){    int allocate_size=sizeof(banner)+length+1;    g_ptr =new char[allocate_size];    g_ptr->length = length;    g_ptr->buffer = (char*)ptr+sizeof(banner);    memcpy(ptr->buffer, input, length);}Create banner - the relay objectvoid trigger_bug(){  // heap overflow happens  // when readin_size > bufsize  char* buf = new char[{{bufsize}}];  scanf("%{{readin_size}}s",buf);};Trigger vulnerabilityvoid change_banner(char* input){   memcpy(g_ptr->buffer,    input, g_ptr->length);}Change banner(cid:86)(cid:75)(cid:68)(cid:83)(cid:72)(cid:66)(cid:83)(cid:68)(cid:85)(cid:72)(cid:81)(cid:87)(cid:327)(cid:86)(cid:3)(cid:393)(cid:72)(cid:79)(cid:71)(cid:86)(cid:75)(cid:68)(cid:83)(cid:72)(cid:66)(cid:76)(cid:71)(cid:91)(cid:327)(cid:86)(cid:3)(cid:393)(cid:72)(cid:79)(cid:71)pre_buf_suf_buf_…1282251634724261110311213151733183219342127353125292330206914A Sample CIH{{idx}}Figure 12: A candidate primitive in motivation case.
Figure 14: Expected Primitive Attributes.
Figure 13: Vulnerability Description.
but present a template for shape declaration. The derived
shape implements three exclusive ﬁelds - pref_buf_{{idx}},
param_{{idx}} and sub_buf_{{idx}}; The overridden ::ren-
der() wirtes param_0 into para_{{idx}}, making it an ideal
candidate primitive for COOPLUS.
Furthermore, the banner is a ﬂexible structure, which is
similar to objects used in kernel exploitation [88]. It has a
length ﬁeld that controls the size for a content buffer, and
maintains a pointer to it. For simplicity, create_banner()
places the buffer close to the banner object. Then at step 5 of
the main loop, analysts are able to modify data in this buffer.
The overﬂow vulnerability locates at trigger_bug(). The
{{bufsize}} determines the chunk size in the cache, whereas
the {{readin_size}} deﬁnes the maximum length for read-in
bytes. Assuming the goal of exploit is to corrupt the certiﬁ-
cate in the global segment at runtime, we can verify the con-
sequence for our attack with the use of check_pwn() at step
7. Lastly, we build the motivation example with the jemalloc
heap allocator and the LLVM-CFI defense.
Moreover, to reﬂect the complexity of class hierarchy
in real world application, this sample program implements
more than thirty shape_{{idx}} classes with randomly gener-
ated pre- and suf- ﬁelds. It is hard for analysts to ﬁnd a cor-
rect solution without systematic approaches, to corrupt the
certiﬁcate ﬁeld when a semantics-aware CFI (i.e., LLVM-
CFI) is deployed.
A.3.2 Workﬂow of the VScape Compiler
The sample CIH is too complex to be analyzed manually,
thus, VScape is developed as a systematic approach to com-
pile elements for launching the COOPLUS attack. As shown
in Figure 4, VScape has three major components.
The ﬁrst task primitive generation is to search candidate
primitives. VScape takes source code of target application
as inputs and generates records of candidate primitives, as
shown in Figure 12.
The second task, expected primitive construction compo-
Figure 15: Memory State Constraints.
nent requires analysts to prepare (1) description of the given
vulnerability and (2) expected exploit primitive attributes.
Figure 13(a&b) models two types of vulnerabilities, and Fig-
ure 13(c) depicts the vulnerability in trigger_bug() with for-
malized language. And if either the pointer or length is cor-
rupted, we can launch COOPLUS from there. For simplicity,
we only focus on one exploit strategy, i.e., buffer pointer cor-
ruption, in this example. Figure 14 shows the expected primi-
tive attributes which can enable the aforementioned strategy,
which is provided by analysts too. Then VScape searches
primitives ﬁt for the vulnerability and expected primitive at-
tributes. Figure 15 shows one qualiﬁed primitive and its
memory state constraint in which the primitive could work.
The user-provided exploit template takes cares of other
critical steps of the exploitation, including (1) creating an ex-
pected heap layout for the character buffer, the victim object
and the banner, (2) utilizing the given vulnerability to tam-
per with vptr , and (3) utilizing the primitives provided by
VScape to ﬁnalize exploitation. VScape will provide quali-
ﬁed primitives for the exploit template to compose the ﬁnal
exploit. Figure 16 shows an example exploit, where texts in
yellow background are generated by VScape.
Figure 16: The Final Payload. Bytes in yellow background
are automated generated by VScape while manual efforts are
responsible for others.
1736    30th USENIX Security Symposium
USENIX Association
Virtual Call Site:   /home/cooplus/main.cxx:76:15Virtual Call:   shape0::renderOverridden VFuncs: [        shape1::render,        shape4::render,        ...]Victim-Counterfeit pair:   (shape0, shape30)Virtual Method:   "::render()"Access Fields of Counterfeit VFunc:  ++R  8  (EmitLoadOfLValue)    ++W  72 (EmitStoreThroughLValue)Capability:   St-nonPtr(a) Sample Record for Virtual Calls(b) Sample Record for Primitive PairUAF offsetChunk RangeSizeof(Vuln_Obj):    160Chunk Range:           160OOB Offset:              0Max OOB Length:    178OOB Value:  Vuln_ObjOOB OffsetOverwrittern DataNext_ObjCritical data(a) Model for Out-of-buffer WriteVuln_ObjChunk RangeUAF dataOverlap_ObjCriticaldata(b) Model for Use-After-Free write(c)  Capability Summary for        Motivation case8byte2OOBValues!byte/2{’\n’,’\t’,’’}AAACZnicbVHBbhMxEPVuKW1DaUMrxIGLRYTCAUW7baX2WJULtxaJpJXiKJp1JolVr72yZ1ui1f4kN85c+AycZCUgZSTLz2/eeDzPWaGVpyT5EcVbz7af7+zutV7svzw4bL86GnhbOol9abV1dxl41MpgnxRpvCscQp5pvM3uPy3ztw/ovLLmKy0KHOUwM2qqJFCgxu1aTK0Drbkg/EZVtiCsuVCmOV9fXw1Al+hrIVrCqdmcwDn7+EfNa2EsLQuqNdldbRnIe6/Bz7npftykKFC8W4t63O4kvWQV/ClIG9BhTdyM29/FxMoyR0MyXOWHaVLQqAJHSmqsW6L0WIQ+MMNhgAZy9KNqZVPN3wdmwsO8YRniK/bvigpy7xd5FpQ50Nxv5pbk/3LDkqYXo0qZoiQ0ct1oWmpOli895xPlUJJeBADSqfBWLufgQFL4mVYwId0c+SkYnPTS097Jl7PO5VVjxy57y96xDyxl5+ySfWY3rM8k+xntRUfRcfQrPohfx2/W0jhqao7ZPxHz379Wuhw=Expected Primitive Model:  % banner.buffer at off 40 % target at certiﬁcate address; Strat1: banner[40,48] == 0x605294Memory States Constraints:  victim class:      shape32 counterfeit class: shape35 Input[160,168] ==   0x402F48   ; fake vptr ∩ Input[168,176] == 0x605294 ; buffer ptr1\n32\n1\n32\n1\n32\n2\n2\n4\n104\nccccc\n2\n0\n6\nAAA(cid:335)\x48\x2f\x40\x00\x00\x00\x00\x00  \x94\x52\x60\x00\x00\x00\x00\x00\x0a3\n5\n2222\n7\nAlloc Victim ObjectAlloc Flexible ObjectTrigger BugHeap OpTrigger COOPlusArbitrary WriteCheck PWN shape32 address certiﬁcateHeap Opalloc banner to jemalloc-160shape35’s vtable addresswrite something