### 7.2.1 Simulation-based Evaluation

Figure 2 illustrates the cumulative distribution of end-to-end (e2e) latencies using our A3 implementation in simulation mode with the WEIGHTED relay selection policy [36]. The x-axis represents the achieved e2e latency, while the y-axis shows the fraction of paths that have at most that latency. For the trace-driven simulator, we used the King dataset [17], which contains pairwise latencies collected from the Internet using the King method [14].

As shown in Figure 2, the WEIGHTED policy reduces the e2e Round-Trip Time (RTT) of anonymous paths compared to random selection. For example, the median RTT of anonymous paths decreases by 30% from 261ms to 184ms when using the WEIGHTED policy.

Similarly, Figure 3 displays the achieved performance in terms of e2e bandwidth for anonymous paths, using various node-based relay selection policies. Paths were constructed using bandwidth information retrieved from Tor directory servers. As expected, the Tor routing policy produces paths with significantly higher bandwidths than random selection. The Snader-Borisov algorithm achieves tunable performance results: as the value of \( s \) increases, the effective e2e bandwidth of anonymous paths also increases.

The performance of the anonymous paths in Figures 2 and 3 can be validated by comparing them to results from previous studies [36] where the relay selection algorithms were hardcoded. Using A3, policies are concisely represented in a few lines of A3LOG and provided to the Relay Selection Engine during runtime.

Our novel CONSTRAINT algorithm allows applications to specify hard constraints on their anonymous paths. Figure 4 shows the performance results for various e2e latency constraints. The graph plots the percentage of anonymous paths whose e2e latency met the constraint for both the CONSTRAINT and RANDOM relay selection policies. The uniform selection policy serves as an approximation for the percentage of possible paths that meet the constraint, indicating the difficulty of finding conforming paths. Failures to meet the requirements specified by the CONSTRAINT strategy are due to embedding errors in the Vivaldi virtual coordinate system, which occasionally cause underestimations of network distances, leading the Relay Selection Engine to incorrectly believe that a non-conforming path met the policy requirements.

For a lax constraint allowing e2e latencies of up to 350ms, 74% and 94% of the paths generated using uniform and CONSTRAINT policies, respectively, adhered to the requirement. Even for very stringent requirements (e2e latencies of 150ms or less), 83% of paths produced for the CONSTRAINT policy met the requirement, whereas less than 9% of random paths had latencies below the threshold.

In addition to enabling flexible routing, A3 serves as a tool for protocol designers to empirically measure some of the security characteristics of their algorithms. New protocols can be quickly encoded in A3LOG and tested on A3. The security of a given algorithm can be partly assessed by examining the distribution of relays' node prevalences—the percentage of anonymous paths for which a given relay is a participant [36]. Comparing the node prevalences for various routing policies while keeping the network consistent provides a straightforward means of determining whether any particular relay is selected disproportionately during relay selection. Figures 5 and 6 plot the range of node prevalences for the previously described relay policies under simulation. Of particular interest is the maximum node prevalence—the percentage of paths that include the most popular chosen relay. As demonstrated in prior work [36], the node prevalences resulting from link-based path selection tend to be significantly lower than those from node-based selection.

### 7.2.2 PlanetLab Deployment

To evaluate the system's performance on real-world networks, we installed A3 on approximately 110 geographically distributed hosts on the PlanetLab testbed.

**PlanetLab Performance.** Figure 7 shows the e2e path performance results on PlanetLab for the RANDOM, WEIGHTED, and CONSTRAINT strategies. Due to instability in the PlanetLab network, paths were abandoned after a two-second timeout, leading to a maximum RTT of 2s. The WEIGHTED policy (with \( s = 9 \)) reduced the median RTT of paths by 194ms (38%) compared to random selection. 69% of paths met the fairly stringent 400ms requirement using the CONSTRAINT policy, whereas only 26% of random paths had e2e RTTs of less than 400ms.

**Information Provider Polling Frequency.** To produce paths that adhere to application policies, the Routing Engine must rely on the data stored in the Local Directory Cache. If the data is stale, routing decisions will be based on outdated information. However, frequent polling of the Information Providers consumes bandwidth both at relay nodes (whose resources may already be overburdened from forwarding traffic) and at the Providers. The rate at which information should be refreshed is highly dependent on the particular metric. For example, bandwidth capacities may be fairly static, whereas bandwidth utilization varies significantly over time.

To understand this tradeoff for our Network Coordinate Information Provider, we examined the rate at which coordinates changed under high degrees of churn. Figure 8 (log scale on both axes) plots the rate of change (as measured by the distance between successive coordinate updates) on PlanetLab. Since relays operate independently and conduct coordinate updates at varying times, results are grouped at one-minute intervals, with the 10th, 50th (median), and 90th percentiles plotted on the graph. Initially, 90% of all relays join the network at approximately the same time, resulting in substantial coordinate movement early in the experiment. However, the system quickly stabilizes, with the median rate of change decreasing to less than 10ms within 10 minutes. Hence, even in the near worst-case scenario where all participants join the network at once, the coordinate system reaches equilibrium within approximately 10 minutes.

To model a more realistic scenario, the remaining 10% of PlanetLab nodes join the network after approximately 30 minutes (indicated by arrows on the graph). Immediately following the introduction of the new participants, the median difference between coordinate updates experiences a minor jump but remains below 3ms. Our results indicate that latency is fairly stable (at least on PlanetLab), requiring infrequent coordinate updates. Even when members of a large coalition of relays join the network simultaneously, the effect on coordinate stability is minor.

**Processing Costs.** The Relay Selection Engine parses and interprets A3LOG policies and uses the information stored in the Local Directory Cache to generate conforming paths. The engine is implemented in C++ as an extension to the P2 declarative networking system [19]. We observe in our simulations and PlanetLab experiments that the time required to parse A3LOG scripts (which occurs only when such scripts are loaded) and produce paths is minimal. For example, when running on PlanetLab with a heavy network load, the Relay Selection Engine requires, on average, less than 200ms to produce a path using the CONSTRAINT policy with multiple constraints.

### 7.3 Path Instantiation

Our evaluation validated the flexibility of A3LOG for supporting a wide range of relay selection policies with low performance overhead. Next, we benchmark the performance of declarative onion path instantiation. As described in Section 6, the A3LOG implementation of this protocol requires the use of secure communication, as well as symmetric-key cryptographic primitives and onion assembly. To isolate the effects of CPU and communication overhead, we conducted our evaluation in a local cluster in addition to the PlanetLab testbed.

**Path Length.** Table 2 shows the median Onion Routing path instantiation time (in milliseconds) on our local cluster and on PlanetLab. The values in parentheses show the 20th and 80th percentile times on PlanetLab.

Our local cluster consists of quad-core machines with Intel Xeon 2.4GHz CPUs and 4GB RAM running Fedora 10 with kernel version 2.6, interconnected by Gigabit Ethernet. This setup allows us to isolate the computation overhead of onion routing in our benchmark.

Table 2 (second column) shows the path instantiation times (measured from the initiator creating the onion to the establishment of the bidirectional onion path) as the number of relays increases. For each relay size, we measured 10 path instantiations and computed the median. We make the following two observations: First, as expected, the path instantiation time increases linearly with the number of relays. Second, the instantiation time is within 244ms, even for up to 5 relay nodes, demonstrating the low overhead and efficiency of using A3LOG.

Table 2 (third column) shows a similar experimental evaluation on the PlanetLab testbed, where we measure the median path instantiation times as the number of relays increases. We observe greater variability in path instantiation times (as shown by the values in parentheses denoting the 20th and 80th percentile) for the same number of relays. On PlanetLab, the instantiation times are higher when the end-to-end latency dominates other factors due to the high load and network congestion observed on PlanetLab. Nevertheless, the majority of path instantiations complete within 2-3 seconds, even for many relays.

### 7.4 DJ-Anonymous A3 Audio Streamer

To illustrate how applications can leverage the flexibility provided by A3, we implemented a simple unicast audio streamer called DJ-Anonymous. DJ-Anonymous reads from an audio device at a fixed rate and transmits audio messages at regular intervals to the receiver. DJ-Anonymous supports the transmission of live audio and aims to minimize latency and maximize the bandwidth of its chosen paths.

DJ-Anonymous uses a dual-constraint policy in which the e2e latency is capped at 400ms and the tolerable maximum CPU utilization of a relay is set at 30% (as measured by CoMon [27]). Since rate limiting on PlanetLab prevents accurate bandwidth measurements, our policy does not include any bandwidth requirements. The entire policy used by DJ-Anonymous can be expressed in just six lines of A3LOG.

In our experimental setup, each PlanetLab node runs an instance of DJ-Anonymous, sending streams of data to randomly selected PlanetLab destinations. Streams are instantiated on average every two minutes (stream start times are randomized between -20% and +20% to avoid nodes functioning in lockstep) and persist for one minute. Initiators attempt to send 500-byte payloads every 25ms, representing a maximum possible throughput of 20KBps. Since we were not able (or willing) to read from live audio sources on PlanetLab nodes, DJ-Anonymous instances on PlanetLab read "audio" from their /dev/zero devices.

Figure 9 shows the e2e bandwidth (as measured by the receiver) achieved using DJ-Anonymous' two-constraint relay selection policy. For comparison, the bandwidth that results from using random selection is also plotted. Using our six-rule dual-constraint policy, DJ-Anonymous achieves a median throughput of 9.0KBps (sufficient for G.711/PCM µ-law audio encoding), more than doubling the median bandwidth of 3.7KBps that results from random selection.

### 8 Conclusion

This paper presents Application-Aware Anonymity (A3), an extensible anonymity framework that enables senders to compactly specify policies for relay selection and path instantiation that meet their performance and anonymity requirements. Unlike existing anonymity networks, where modifying the relay selection and path instantiation algorithms requires changes to the source code, A3 allows senders to customize the manner in which paths are chosen and constructed at runtime. A3 uses a declarative design in which senders specify their routing requirements using the A3LOG policy language. We demonstrate that A3 provides sufficient flexibility to encode the relay selection algorithms used by Tor [9], Snader and Borisov’s refinement to Tor [40], and link-based approaches [36] in just a few lines of A3LOG.

Results from simulations over trace-driven datasets and our deployment on PlanetLab show that A3 produces paths that conform to the specified policies with little computational overhead. In addition to providing flexible relay selection, A3 also enables initiators to customize both the manner in which anonymous paths are constructed and the mechanisms used to transport data over such paths. For example, we show how the Setup and Data Transmission phases of Onion Routing [30] can be compactly specified in A3LOG.

A3's flexibility has several advantages for anonymous routing. First, it allows senders to construct policies that meet their applications' specific requirements. For example, a real-time VoIP application may provide policies that enforce e2e latency constraints, whereas a file-sharing client may utilize a policy that favors bandwidth over other performance indicators. Second, the ability to rapidly deploy both relay selection and path instantiation algorithms makes A3 a useful tool for protocol designers and anonymity researchers. Finally, A3's modular design and declarative techniques permit the system to be easily extended and adapted to new scenarios.