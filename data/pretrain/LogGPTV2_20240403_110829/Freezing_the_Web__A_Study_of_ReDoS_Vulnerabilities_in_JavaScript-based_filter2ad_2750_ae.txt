vulnerable function suffers both from a ReDoS attack
and a command injection attack [37]. An attacker may
use the ReDoS attack as a hard-to-detect way to scan
which sites use the vulnerable module and then attack
these sites with a command injection.
372    27th USENIX Security Symposium
USENIX Association
6 Related Work
Server-side JavaScript Ojamaa and D¨u¨una [27] dis-
cuss the security of Node.js and identify algorithmic
complexity attacks as one of the main threats. Davis et
al. [11] show that ReDoS vulnerabilities are present in
popular modules. We take these observations further and
show that ReDoS affects real websites. Other studies on
Node.js explore command injection vulnerabilities [37]
and conﬁguration errors [32]. Several techniques han-
dle more general, Node.js-related issues: static analysis
that handles Node.js-speciﬁc events [26], fuzzing to un-
cover concurrency-related bugs [12], auto-sanitization to
protect against injections [37], and work on understand-
ing event interactions between server-side and client-side
code [1]. To the best of our knowledge, our work is the
ﬁrst to analyze Node.js security problems in real-world
websites and to demonstrate how an attacker may exploit
vulnerabilities in npm modules to attack websites.
Analysis of ReDoS Vulnerabilities Prior work ana-
lyzes the worst case matching time of regular expressions
[6, 41, 21, 2]. Most of this work assumes backtracking-
style matching and analyzes regular expressions in iso-
lation, ignoring whether attacker-controlled inputs reach
it. Recent work by W¨ustholz et al. [43] considers this
aspect. They combine static analysis and exploit genera-
tion to ﬁnd 41 vulnerabilities in Java software. Our work
differs in three ways: (i) we analyze JavaScript ReDoS,
which is more serious than Java ReDoS, (ii) we detect
vulnerabilities in real-world websites whose source code
is not available for analysis, and (iii) we uncover ReDoS
vulnerabilities containing advanced features, e.g. looka-
head, that are not supported by any of the previous work.
A study performed concurrently with ours considers Re-
DoS vulnerabilities in the npm ecosystem and conﬁrms
that ReDoS is a serious threat for JavaScript code [13].
Regular Expressions Regular expressions are often
used for sanitizers and XSS ﬁlters. Bates et al. [5] show
that XSS ﬁlters are often slow, incorrect, and sometimes
even introduce new vulnerabilities. Hooimeijer et al. [18]
show that supposedly equivalent implementations of san-
itizers differ. A study by Chapman et al. [9] shows that
developers have difﬁculties in composing and reading
regular expressions. We are the ﬁrst to analyze the im-
pact of this problem on real-world websites. To avoid
mistakes in regular expressions, developers may synthe-
size instead of writing them [3, 4].
Algorithmic Complexity Attacks Differences be-
tween average and worst case performance are the ba-
sis of algorithmic complexity attacks. Crosby and Wal-
lach [10] analyze vulnerabilities due to the performance
of hash tables and binary trees, while Dietrich et al. [15]
study serialization-related attacks. Wise [7], Slow-
Fuzz [28], and PerfSyn [39] generate inputs to trigger
unexpectedly high complexity.
Resource Exhaustion Attacks SAFER [8] statically
detects CPU and stack exhaustion vulnerabilities involv-
ing recursive calls and loops. Huang et al. [19] study
blocking operations in the Android system that can force
the OS to reboot when called multiple times. Shan et
al. [35] consider attacks on n-tier web applications and
model them using a queueing network model.
Testing Regular Expressions The problem of gener-
ating inputs for regular expressions is also investigated
from a software testing perspective [40], [24], [22], [34].
In contrast to our work, these techniques aim at maxi-
mizing coverage or ﬁnding bugs in the implementation.
Performance of JavaScript ReDoS vulnerabilities are
a kind of performance problem. Such problems are worth
ﬁxing independent of their exploitability in a denial of
service attack, e.g., to prevent websites from being per-
ceived as slow and unresponsive. Existing work has stud-
ied JavaScript performance issues [33] and proposed pro-
ﬁling techniques to identify them [30, 17, 20]. Studying
the exploitability of other performance issues beyond Re-
DoS is a promising direction for future work.
Studies of the Web Lauinger et al. [23] study the use
of client-side JavaScript libraries that are outdated and
have known vulnerabilities.
In contrast to their setup,
we focus on ReDoS issues, on server-side code, and on
code that is vulnerable despite being up-to-date. An-
other study looks into attack vectors and defenses related
to the postMessage API in HTML5 [36], showing that
attackers may use it to circumvent the same-origin pol-
icy. A study by Richards et al. [31] analyzes the use of
JavaScript’s eval function, which is prone to code injec-
tions. All the above studies are orthogonal to our work.
To the best of our knowledge, we are the ﬁrst to focus on
server-side JavaScript and on ReDoS vulnerabilities.
7 Conclusions
This paper studies ReDoS vulnerabilities in JavaScript-
based web servers and shows that they are an important
problem that affects various popular websites. We ex-
ploit eight vulnerabilities that affect at least 339 popular
websites. We show that an attacker could block these
vulnerable sites for several seconds and sometimes even
much longer. More generally, our results are a call-to-
arms to address the current lack of tools for analyzing
ReDoS vulnerabilities in JavaScript.
Acknowledgments
This work was supported by the German Federal Ministry of
Education and Research and by the Hessian Ministry of Sci-
ence and the Arts within CRISP, by the German Research
Foundation within the ConcSys and Perf4JS projects, and by
the Hessian LOEWE initiative within the Software-Factory 4.0
project.
USENIX Association
27th USENIX Security Symposium    373
References
[1] Saba Alimadadi, Ali Mesbah, and Karthik Pattabi-
raman. Understanding asynchronous interactions
in full-stack JavaScript. In Proceedings of the 38th
International Conference on Software Engineering,
ICSE, 2016.
[2] Arturs Backurs and Piotr Indyk. Which regular
In IEEE
expression patterns are hard to match?
57th Annual Symposium on Foundations of Com-
puter Science, FOCS, 2016.
[3] Alberto Bartoli, Giorgio Davanzo, Andrea De
Lorenzo, Eric Medvet, and Enrico Sorio. Auto-
matic synthesis of regular expressions from exam-
ples. IEEE Computer, 47(12):72–80, 2014.
[4] Alberto Bartoli, Andrea De Lorenzo, Eric Medvet,
and Fabiano Tarlao. Can a machine replace hu-
mans in building regular expressions? A case study.
IEEE Intelligent Systems, 2016.
[5] Daniel Bates, Adam Barth, and Collin Jackson.
Regular expressions considered harmful in client-
side XSS ﬁlters. In Proceedings of the 19th Interna-
tional Conference on World Wide Web, WWW 2010,
Raleigh, North Carolina, USA, April 26-30, 2010,
pages 91–100, 2010.
[6] Martin Berglund, Frank Drewes, and Brink van der
Merwe. Analyzing catastrophic backtracking be-
havior in practical regular expression matching. In
Proceedings 14th International Conference on Au-
tomata and Formal Languages, AFL 2014, Szeged,
Hungary, May 27-29, 2014., pages 109–123, 2014.
[7] Jacob Burnim, Sudeep Juvekar, and Koushik Sen.
WISE: Automated test generation for worst-case
complexity. In ICSE, pages 463–473. IEEE, 2009.
[8] Richard M. Chang, Guofei Jiang, Franjo Ivancic,
Sriram Sankaranarayanan, and Vitaly Shmatikov.
Inputs of coma: Static detection of denial-of-
service vulnerabilities. In Proceedings of the 22nd
IEEE Computer Security Foundations Symposium,
CSF 2009, Port Jefferson, New York, USA, July 8-
10, 2009, pages 186–199, 2009.
[9] Carl Chapman and Kathryn T. Stolee. Exploring
regular expression usage and context in Python. In
Proceedings of the 25th International Symposium
on Software Testing and Analysis, ISSTA, 2016.
[10] Scott A. Crosby and Dan S. Wallach. Denial of
service via algorithmic complexity attacks. In Pro-
ceedings of the 12th USENIX Security Symposium,
2003.
[11] James Davis, Gregor Kildow, and Dongyoon Lee.
The case of the poisoned event handler: Weak-
nesses in the Node.js event-driven architecture. In
Proceedings of the 10th European Workshop on
Systems Security, EUROSEC, 2017.
[12] James Davis, Arun Thekumparampil, and Dongy-
oon Lee. Node.fz: Fuzzing the server-side event-
driven architecture. In Proceedings of the Twelfth
European Conference on Computer Systems, Eu-
roSys 2017, Belgrade, Serbia, April 23-26, 2017,
pages 145–160, 2017.
[13] James C. Davis, Christy A. Coghlan, Francisco Ser-
vant, and Dongyoon Lee. The impact of regular
expression denial of service (ReDoS) in practice:
an empirical study at the ecosystem scale. In FSE,
2018.
[14] James C. Davis, Eric R. Williamson, and Dongyoon
Lee. A sense of time for JavaScript and Node.js. In
USENIX Security, 2018.
[15] Jens Dietrich, Kamil Jezek, Shawn Rasheed, Am-
jed Tahir, and Alex Potanin. Evil pickles: DoS at-
In 31st
tacks based on object-graph engineering.
European Conference on Object-Oriented Pro-
gramming, ECOOP, 2017.
[16] Andy Georges, Dries Buytaert, and Lieven Eeck-
hout. Statistically rigorous Java performance evalu-
ation. In Conference on Object-Oriented Program-
ming, Systems, Languages, and Application (OOP-
SLA), pages 57–76. ACM, 2007.
[17] Liang Gong, Michael Pradel, and Koushik Sen. JIT-
Prof: Pinpointing JIT-unfriendly JavaScript code.
In European Software Engineering Conference and
Symposium on the Foundations of Software Engi-
neering (ESEC/FSE), pages 357–368, 2015.
[18] Pieter Hooimeijer, Benjamin Livshits, David Mol-
nar, Prateek Saxena, and Margus Veanes. Fast and
In USENIX
precise sanitizer analysis with BEK.
Security Symposium, pages 1–16, August 2011.
[19] Heqing Huang, Sencun Zhu, Kai Chen, and Peng
Liu.
From system services freezing to system
server shutdown in Android: All you need is a
loop in an app. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communi-
cations Security, Denver, CO, USA, October 12-6,
2015, pages 1236–1247, 2015.
[20] Simon Holm Jensen, Manu Sridharan, Koushik
Sen, and Satish Chandra. MemInsight: platform-
independent memory debugging for JavaScript. In
374    27th USENIX Security Symposium
USENIX Association
Proceedings of the 2015 10th Joint Meeting on
Foundations of Software Engineering, ESEC/FSE
2015, Bergamo, Italy, August 30 - September 4,
2015, pages 345–356, 2015.
[21] James Kirrage, Asiri Rathnayake, and Hayo Thi-
Static analysis for regular expression
elecke.
In Network and System
denial-of-service attacks.
Security - 7th International Conference, NSS 2013,
Madrid, Spain, June 3-4, 2013. Proceedings, pages
135–148, 2013.
[22] Eric Larson and Anna Kirk. Generating evil test
In IEEE Interna-
strings for regular expressions.
tional Conference on Software Testing, Veriﬁcation
and Validation, ICST 2016, 2016.
[23] Tobias Lauinger, Abdelberi Chaabane, Sajjad Ar-
shad, William Robertson, Christo Wilson, and En-
gin Kirda. Thou shalt not depend on me: Analysing
the use of outdated JavaScript libraries on the web.
In NDSS, 2017.
[24] Nuo Li, Tao Xie, Nikolai Tillmann, Jonathan
de Halleux, and Wolfram Schulte. Reggae: Auto-
mated test generation for programs using complex
regular expressions. In ASE 2009, 24th IEEE/ACM
International Conference on Automated Software
Engineering, 2009.
[25] Alex Mackey, William Stewart Tulloch, and Ma-
Introducing. NET 4.5. Apress,
hesh Krishnan.
2012.
[26] Magnus Madsen, Frank Tip, and Ondrej Lhot´ak.
Static analysis of event-driven Node.js JavaScript
In Proceedings of the 2015 ACM
applications.
SIGPLAN International Conference on Object-
Oriented Programming, Systems, Languages, and
Applications, OOPSLA, 2015.
[27] Andres Ojamaa and Karl D¨u¨una. Assessing the se-
curity of Node.js platform. In International Con-
ference for Internet Technology and Secured Trans-
actions, 2012.
[28] Theoﬁlos Petsios,
Jason Zhao, Angelos D.
Keromytis, and Suman Jana. Slowfuzz: Automated
domain-independent detection of algorithmic com-
plexity vulnerabilities. In Proceedings of the 2017
ACM SIGSAC Conference on Computer and Com-
munications Security, CCS 2017, Dallas, TX, USA,
October 30 - November 03, 2017, pages 2155–
2168, 2017.
[29] Michael Pradel, Markus Huggler, and Thomas R.
Gross. Performance regression testing of concur-
rent classes. In International Symposium on Soft-
ware Testing and Analysis (ISSTA), pages 13–25,
2014.
[30] Michael Pradel, Parker Schuh, George Necula, and
Koushik Sen. EventBreak: Analyzing the respon-
siveness of user interfaces through performance-
In Conference on Object-
guided test generation.
Oriented Programming, Systems, Languages, and
Applications (OOPSLA), pages 33–47, 2014.
[31] Gregor Richards, Christian Hammer, Brian Burg,
and Jan Vitek. The eval that men do - a large-scale
study of the use of eval in JavaScript applications.
In European Conference on Object-Oriented Pro-
gramming (ECOOP), pages 52–78, 2011.
[32] Mohammed Sayagh, Noureddine Kerzazi, and
Bram Adams. On cross-stack conﬁguration errors.
In Proceedings of the 39th International Confer-
ence on Software Engineering, ICSE 2017, Buenos
Aires, Argentina, May 20-28, 2017, pages 255–265,
2017.
[33] Marija Selakovic and Michael Pradel. Performance
issues and optimizations in JavaScript: An empiri-
cal study. In International Conference on Software
Engineering (ICSE), pages 61–72, 2016.
[34] Muzammil Shahbaz, Phil McMinn, and Mark
Stevenson. Automated discovery of valid test
strings from the web using dynamic regular expres-
sions collation and natural language processing. In
12th International Conference on Quality Software,
2012.
[35] Huasong Shan, Qingyang Wang, and Calton Pu.
Tail attacks on web applications. In Proceedings of
the 2017 ACM SIGSAC Conference on Computer
and Communications Security, CCS 2017, Dallas,
TX, USA, October 30 - November 03, 2017, pages
1725–1739, 2017.
[36] Sooel Son and Vitaly Shmatikov.
The post-
man always rings twice: Attacking and defending
postmessage in HTML5 websites. In NDSS, 2013.
[37] Cristian-Alexandru Staicu, Michael Pradel, and
Ben Livshits. Understanding and automatically
preventing injection attacks on Node.js. In NDSS,
2018.
[38] Ken Thompson. Programming techniques: Regular
expression search algorithm. Communications of
the ACM, 11(6):419–422, 1968.
USENIX Association
27th USENIX Security Symposium    375
[39] Luca Della Toffola, Michael Pradel, and Thomas R.
Gross. Synthesizing programs that expose perfor-
mance bottlenecks. In CGO, 2018.
[40] Margus Veanes, Peli de Halleux, and Nikolai Till-
mann. Rex: Symbolic regular expression ex-
plorer. In Third International Conference on Soft-
ware Testing, Veriﬁcation and Validation, ICST
2010, 2010.
[41] Nicolaas Weideman, Brink van der Merwe, Martin
Berglund, and Bruce Watson. Analyzing match-
ing time behavior of backtracking regular expres-
sion matchers by using ambiguity of NFA. In Im-
plementation and Application of Automata - 21st
International Conference, CIAA, 2016.
[42] Paul Wilton. Beginning JavaScript. John Wiley &
Sons, 2004.
[43] Valentin W¨ustholz, Oswaldo Olivo, Marijn J. H.
Heule, and Isil Dillig. Static detection of DoS
vulnerabilities in programs that use regular expres-
sions. In Tools and Algorithms for the Construction
and Analysis of Systems - 23rd International Con-
ference, TACAS, Held as Part of the European Joint
Conferences on Theory and Practice of Software,
ETAPS, 2017.
376    27th USENIX Security Symposium
USENIX Association