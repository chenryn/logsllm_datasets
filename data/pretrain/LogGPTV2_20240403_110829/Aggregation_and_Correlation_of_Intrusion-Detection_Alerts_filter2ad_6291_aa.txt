# Aggregation and Correlation of Intrusion-Detection Alerts

**Authors:**
- Hervé Debar¹,²
- Andreas Wespi²,³

¹ France Télécom R&D  
42 Rue des Coutures, F–14000 Caen, France  
Email: [EMAIL]

² IBM Research  
Zurich Research Laboratory  
Säumerstrasse 4, CH–8803 Rüschlikon, Switzerland  
Email: [EMAIL]

## Abstract
This paper presents an aggregation and correlation algorithm designed and implemented for an intrusion-detection console built on the Tivoli Enterprise Console (TEC). The algorithm aims to collect and relate intrusion-detection alerts to provide a more concise and comprehensive view of security issues identified by intrusion-detection systems.

**Keywords:** Intrusion detection, alert aggregation, alert correlation, alert data model.

## 1. Introduction
In recent years, intrusion-detection products have become widely available and are gaining acceptance in enterprises as a valuable enhancement to security. These systems monitor access and data flows within information systems to detect malicious behavior, both from external and internal sources, and report this information to system operators. Additionally, they can respond to detected threats with countermeasures.

This work addresses several known weaknesses in intrusion-detection systems:

1. **Alert Flooding:** Intrusion-detection systems often generate a large number of alerts, overwhelming operators. This issue has been highlighted by tools like Stick and IDSwakeup, which can flood systems with unrelated alerts, effectively launching a denial-of-service attack against the operator.

2. **Contextual Grouping:** Attacks typically generate multiple related alerts, but current systems do not facilitate logical grouping of these alerts.

3. **False Alerts:** Existing systems frequently generate false positives and negatives due to imprecise attack signatures or non-conforming implementations.

4. **Scalability:** Current architectures make it difficult to deploy intrusion-detection systems at scale.

The paper is organized as follows:
- Section 2 introduces a generic and scalable intrusion-detection architecture and the concept of an Aggregation and Correlation Component (ACC).
- Section 3 outlines the conceptual and operational requirements for the ACC.
- Section 4 describes the alert processing architecture and the unified alert data model.
- Section 5 details the aggregation and correlation algorithm.
- Section 6 provides a usage example.
- Section 7 concludes and suggests future work.

## 2. A Generic, Scalable Intrusion-Detection Architecture
We distinguish between two types of components: intrusion-detection probes and Aggregation and Correlation Components (ACCs). Probes, often referred to as intrusion-detection systems, are commercial or open-source tools that monitor and report security issues. The ACC's role is to correlate the output from multiple probes and present a condensed view to the operator.

### 2.1 Probes
Probes acquire data from various sources (e.g., audit logs, network packets), format and preprocess this data, and generate alerts. They should adhere to evolving standards for intrusion-detection message exchange formats and protocols. Data formatting can be resource-intensive, leading to simple analysis and potentially more false alerts.

### 2.2 Aggregation and Correlation Components (ACCs)
Each ACC receives alerts from probes and other ACCs. Upon receiving an alert, the ACC performs two tasks: analyzing the alert in the context of previous alerts and configuration information, and providing output to the local operator. This hierarchical structure enables scalability and multi-level reporting.

## 3. Requirements
Our project had two sets of requirements: conceptual and operational.

### 3.1 Analysis of the Issues
- **Flooding:** Our ACC groups alerts to reduce operator overload and provides multi-level views, allowing focus on critical activities.
- **Context:** The ACC groups related alerts to provide a comprehensive analysis of attacks, enabling better countermeasure decisions.
- **False Alerts:** Each alert is associated with a confidence value, which can be adjusted by the operator to account for relative inaccuracy.
- **Scalability:** The hierarchical ACC structure distributes the load, making large-scale deployment feasible.

### 3.2 Conceptual Requirements
- **Semantics:** The ACC must present one alert per attack, aggregating and correlating from multiple sources to avoid false alerts.
- **Scalability:** Multiple ACCs can be deployed in a tree structure to handle large numbers of probes.
- **Reactivity:** The ACC should support automatic information gathering, configuration modification, escalation, and countermeasures.
- **Proactivity:** The ACC should anticipate alerts based on current flow and time of day, and cancel out known sequences of benign alerts.

### 3.3 Operational Requirements
- **Integration:** The intrusion-detection system must integrate with the management platform, ensuring easy configuration and performance.

## 4. Alert Processing Architecture and Data Model
[Detailed description of the architecture and data model will be provided here.]

## 5. Aggregation and Correlation Algorithm
[Detailed description of the algorithm will be provided here.]

## 6. Usage Example
[Example usage scenario will be provided here.]

## 7. Conclusions and Future Work
[Concluding remarks and suggestions for future research will be provided here.]

---

This revised version maintains the original content while improving clarity, coherence, and professionalism.