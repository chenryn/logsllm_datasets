title:Aggregation and Correlation of Intrusion-Detection Alerts
author:Herv&apos;e Debar and
Andreas Wespi
Aggregation and Correlation of
Intrusion-Detection Alerts
Herv´e Debar1,(cid:2) and Andreas Wespi2,(cid:2)(cid:2)
1 France T´el´ecom R&D
42 Rue des Coutures, F–14000 Caen, France
PI:EMAIL
2 IBM Research
Zurich Research Laboratory
S¨aumerstrasse 4, CH–8803 R¨uschlikon, Switzerland
PI:EMAIL
Abstract. This paper describes an aggregation and correlation algo-
rithm used in the design and implementation of an intrusion-detection
console built on top of the Tivoli Enterprise Console (TEC). The aggre-
gation and correlation algorithm aims at acquiring intrusion-detection
alerts and relating them together to expose a more condensed view of
the security issues raised by intrusion-detection systems.
Keywords: Intrusion detection, alert aggregation, alert correlation,
alert data model.
1 Introduction
Intrusion-detection products have become widely available in recent years, and
are beginning to gain acceptance in enterprises as a worthwhile improvement
on security. They monitor accesses and data ﬂows in information systems to
determine whether malicious behavior is taking place, either from outside or
inside, and make this information available to the operators of the information
system. In addition, they can also react to malicious behavior and take some
countermeasures.
The purpose of this work is to address the following areas of intrusion detec-
tion, which are known to present weaknesses:
1. Flooding. Intrusion-detection systems are prone to alert ﬂooding, i.e., they
provide a large number of alerts to the operator, who then has diﬃculties
coping with the load. This problem has been recently highlighted by the
(cid:1) This work was performed while employed by the IBM Zurich Research Laboratory.
(cid:1)(cid:1) This work was partially supported by the European IST Project MAFTIA (IST-
1999-11583). However, it represents the view of the author. The MAFTIA project
is partially funded by the European Commission and the Swiss Department for
Education and Science.
W. Lee, L. M´e, and A. Wespi (Eds.): RAID 2001, LNCS 2212, pp. 85–103, 2001.
c(cid:1) Springer-Verlag Berlin Heidelberg 2001
86
H. Debar and A. Wespi
release of stick 1 and IDSwakeup2, two tools that ﬂood an intrusion-detection
system with unrelated alerts, carrying an eﬀective denial-of-service attack
against the operator if the intrusion-detection system manages to cope with
the ﬂux of anomalous events.
2. Context. Attacks are likely to generate multiple related alerts. Current intru-
sion-detection systems do not make it easy for operators to logically group
related alerts.
3. False alerts. Existing intrusion-detection systems are likely to generate false
alerts, be it false positives or false negatives, for various reasons. For ex-
ample, attack descriptions (a.k.a. signatures) are often imprecise and also
cover acceptable behaviors of the monitored information system, or the im-
plementation does not conform to the speciﬁcation and known attacks go
undetected.
4. Scalability. Current intrusion-detection system architectures make it diﬃcult
to achieve large-scale deployment.
The outline of this paper is as follows. Section 2 describes a generic and
scalable intrusion-detection architecture and introduces the concept of an ag-
gregation and correlation component (ACC) that can analyze and correlate the
alerts generated by intrusion-detection probes attached to it. In Section 3, we
list the conceptual and operational requirements this ACC has to fulﬁll. Section
4 describes our architecture for alert processing as well as the uniﬁed alert data
model we use. In Section 5, we discuss the aggregation and correlation algorithm
that we have implemented in our prototype system, and in Section 6 we give
a usage example. Section 7 contains the conclusions and oﬀers ideas for future
work.
2 A Generic, Scalable Intrusion-Detection Architecture
In the current state of intrusion-detection technology, we wish to distinguish be-
tween two kinds of components, the probes and the aggregation and correlation
components (ACCs). What we call intrusion-detection probes in this context are
usually referred to as intrusion-detection systems available either as commercial
products or in the public domain. The purpose of the ACC is to correlate the
output of several probes and give the operator a condensed view of the reported
security issues. In the past few years, intrusion-detection research focussed on
developing new probes or improving the technology behind existing ones. How-
ever, when a set of probes is deployed in large environments, the correlation
problem becomes apparent. Thus far, aggregation and correlation have not been
addressed by intrusion-detection product developers and are only now gaining
momentum in the research community.
The relationship between probes and ACCs is shown in Figure 1. As one can
see, the architecture is a distributed set of components, hierarchically layered to
enable scalability of the whole system.
1 http://www.eurocompton.net/stick/projects8.html
2 http://www.hsc.fr/ressources/outils/idswakeup/
Aggregation and Correlation of Intrusion-Detection Alerts
87
Alert emission
Diagnostic
Alert analysis
Report emission
Report generation
Alert accumulation
Alert acquisition
Aggregation
& Correlation
(TEC )
Aggregation
& Correlation
(TEC )
Aggregation
 & Correlation
(TEC )
Aggregation
& Correlation
(TEC )
Alert emission
Diagnostic
Data analysis
Data formatting
Data acquisition
Probe
(ISS )
Probe
(Cisco )
Probe
(Cisco )
Probe
(WebIDS )
Probe
(ISS )
Probe
(Cisco )
Fig. 1. Overall intrusion-detection architecture.
We have implemented a prototype of an ACC that is based on the Tivoli
Enterprise Console (TEC) [4,7]. The TEC is the event-handling product of
IBM/Tivoli Systems. Based on our technology, there is also a product available
now, the Tivoli SecureWay Risk Manager [5,6].
2.1 Probes
A state-of-the-art review of intrusion-detection systems oriented towards a tax-
onomy [3] lists many diﬀerent probes, both host-based (e.g. using data sources
provided on hosts) and network-based (e.g. tapping into the network traﬃc to
retrieve data).
In our implementation and experiments, we used such probes as Internet
Security Systems’ RealSecure Network Engine3 and Cisco Systems’ Cisco Secure
IDS,4 as well as our own development prototype Web IDS [1] and simple, freely
available tools such as TCP Wrapper [8] and Klaxon. We believe that these
systems, although extremely useful, face a number of issues as far as large-scale
deployment and operation are concerned, and that they should be considered as
part of a larger ensemble rather than as individual solutions to the problem of
detecting malicious activities against information systems.
As shown in Figure 1, probes are responsible for acquiring data from external
sources (e.g. audit logs, accounting ﬁles, network packets), formatting this data
to extract the information that is of interest for the analysis mechanism and
preprocessing it to allow proper analysis. This analysis may lead the probe to
generate alerts which are transmitted higher up in the architecture. Probes are
3 http://www.iss.net/
4 http://www.cisco.com/
88
H. Debar and A. Wespi
expected to adhere to the evolving IDWG5 standards for an intrusion-detection
message exchange format and an intrusion alert protocol.
Probe implementors need to allocate resources to all functions of the probe.
In particular, the data formatting, e.g. reassembling network packets or recon-
structing process activity, can turn out to be very resource intensive. The time
spent on data formatting is lost for analysis. Therefore, data analysis has to be
kept simple, which is one reason why probes tend to generate false alerts.
2.2 Aggregation and Correlation Components (ACCs)
Each ACC receives alerts from probes and other ACCs. Alerts are sent in a
standard format and do not need to be altered. Once an alert has been received,
two sets of tasks are carried out, one to analyze the received alert in the context
of the ACC (comprising the alerts received earlier and conﬁguration information)
and one to provide output to the local operator, if any.
The ﬁrst set of tasks is covered by the aggregation and correlation algorithm
described in Section 5. The second set of tasks allows an operator to interact
with the ACC regardless of where this component is located in the tree. This
feature accommodates the fact that organizations have multiple reporting levels;
in our architecture, each department deploying the probes would have at least
one ACC as well, which would be used for local reporting and for feeding higher-
level ACCs corresponding to higher levels of the hierarchy.
3 Requirements
When we started this project, we had two groups of requirements. Conceptual
requirements focus on the service that the ACC provides to the operator, in-
dependently of any implementation considerations. Operational requirements
describe additional issues that are important but for which we are not yet able
to provide a generic solution, or issues that are handled on an ad hoc basis.
3.1 Analysis of the Issues
This subsection provides a deeper analysis of the issues listed in the introduction,
and describes the contribution of our ACC towards solving each issue.
Flooding. One of the most apparent characteristics of intrusion-detection sys-
tems is that they tend to generate numerous alerts. An operator can be
ﬂooded with alerts very easily, and the usual reaction is to reduce the ﬂux
by restricting or even turning oﬀ a large part of the signatures that can be
searched. This behavior is undesirable for two reasons:
1. The attack may still take place, and disabling signatures may reduce
the number of false positives but may also increase the number of false
negatives. Therefore, this approach does not solve the problem.
5 http://www.ietf.org/html.charters/idwg-charter.html
Aggregation and Correlation of Intrusion-Detection Alerts
89
2. For reporting, many alerts provide useful information, even though an
operator may not wish to see them in real time.
Our ACC intelligently groups alerts together to provide the operator with
sets of alerts. It oﬀers multi-level views on sets of alerts, and by displaying
only the most important views, the operator can concentrate on activities
that could actually lead to successful compromise or denial-of-service.
Context. An attack is very likely to manifest itself in multiple alerts spread over
a period of time. A skilled attacker will ﬁrst probe to evaluate its target and
then start penetrating, the entire activity being suﬃciently widely spread to
go barely noticed.
Our ACC groups alerts together to provide an analysis of the entire context,
not alert-per-alert. This allows the operator to carefully evaluate the progress
of the attacker and the knowledge he has gained, and to ensure that the
countermeasures taken are appropriate.
False alerts. As experience shows, probes tend to generate false alerts that
are directly related to the particularities of the information system in which
they are deployed. Given that developers of intrusion-detection systems – by
trying to avoid false negatives – accept a certain number of false positives,
this is a frequent issue in today’s systems. Inaccuracy of the alerts in the
correlation component is considered in two forms:
1. Intrinsic inaccuracy of the alert owing to the probe’s detection code
being poorly written such that it does not discriminate well between
normal and malicious activity for this particular attack.
2. Relative inaccuracy of the alert owing to the information system being
monitored exhibiting characteristics similar to those of malicious activi-
ties.
Both aspects are taken into account in the ACC by associating each alert
with a conﬁdence value. This value is determined independently of the prod-
uct vendor. Default values take into account the intrinsic inaccuracy of the
alert and should be modiﬁed by the operator to consider relative inaccuracy,
which results in reducing the conﬁdence value.
Further, our ACC can be conﬁgured such that it knows under which circum-
stances diﬀerent probes should report the same attack. If an expected alert
does not arrive at the correlation component, it can be deduced that a probe
is no longer working properly or does not adhere to its speciﬁcation.
Scalability. Given the number of alerts generated by current intrusion-
detection probes, scalability rapidly becomes an issue. When deploying a
larger number of probes, operators are forced to reduce the number of vul-
nerabilities monitored to limit the number of alerts to a reasonable level.
Our ACC distributes the load of handling alerts to the appropriate level in
the hierarchy of any organization.
Of course, some of these issues could be solved at the probe level. For example,
by writing better signatures many false alerts could be avoided. Although we
expect to see better probes in the future, there will be issues that are site-
speciﬁc or are not addressed perfectly by the probes. Therefore, we think that
the ACC has to address all the four issues listed above.
90
H. Debar and A. Wespi
3.2 Conceptual Requirements
The conceptual requirements focus on the semantic of the information that is
provided to operators, on the scalability of the entire intrusion-detection system,
on the reactivity, and on the proactivity that must be achieved to make such a
system usable.
Semantics. One of the main issues that prevents large-scale deployment of
intrusion-detection probes is the level of information they generate. Intru-
sion-detection alerts are very low-level bits of information from which it
is diﬃcult to obtain a global picture. The requirement on our ACC is to
present one alert per attack, even if this attack has generated many alerts.
It must thus present the most concise picture for each attack, while providing
as much information as possible. This includes aggregating and correlating
from as many sources as possible to ensure that no false alert is raised to
the operator.
To satisfy this requirement, we have developed the concept of situations,
described in Section 5.3.
Scalability. Trade-oﬀs have to be made between information collection and
system performance. In environments with a large number of probes, a single
ACC is easily overﬂooded.
In our architecture, multiple ACCs can be deployed, each of them handling a
set of probes on a topological or logical basis. These correlation components
in turn report to a master in a tree structure. As many layers of ACCs as
needed can be introduced to handle the required number of probes. Each
ACC provides an interface for local reporting, and sends data to the upper
layer.
Reactivity. The ACC must at least allow and better manage the reaction to
an intrusion by:
– automatically gathering more information (e.g. raw logs, audit session,
nslookup host, ﬁnger user). Being integrated with a network management
platform allows the ACC to make use of the network topology or available
discovery services;
– automatically modifying the setup of the intrusion-detection probes.
This includes modifying the conﬁguration of downstream reasoning en-
gines in a distributed correlation setting;
– automatically escalating and warning the appropriate person;
– automatically applying appropriate countermeasures.
Our ACC has the potential and the mechanisms to enable automatic coun-
termeasures. However, this part is still work in progress, as automatic coun-
termeasures introduce a high risk of self-inﬂicted denial-of-service attacks.
Proactivity. The ACC must be able to proactively expect intrusion-detection
alerts according to the current ﬂow of alerts or according to the time of day.
For example, routine vulnerability assessment scans are usually scheduled
periodically.
Our ACC can be conﬁgured to expect such scans and provide an alert if the
scan does not take place. The same mechanism applies time constraints to
series of alerts; frequently, sequences of alerts can be shown to correspond to
Aggregation and Correlation of Intrusion-Detection Alerts
91
automated, information-system speciﬁc behavior. Once these sequences have
been identiﬁed, they can be canceled out by the ACC, and only anomalies
in the sequence chains are reported.
3.3 Operational Requirements
These requirements focus on the interaction of the entire intrusion-detection sys-
tem (probes and ACCs) with the management platform. As such, the intrusion-
detection system must integrate with the management platform, and ensure an
easy conﬁguration and a certain level of performance.
Integration. We believe that in its current state, intrusion-detection systems
impose an additional burden on operators to deploy, conﬁgure and maintain.
Integration into an existing framework will give operators a familiar look-