plt.show()
```
此示例引用了绘图部分中使用的所有对象：它定义了对象 `fig` 和对象 `ax`。这在技术上是不必要的，因为 `plt` 对象可以直接用于绘制数据集。《[Matplotlib 教程](https://matplotlib.org/tutorials/introductory/pyplot.html#sphx-glr-tutorials-introductory-pyplot-py)》展示了这样一个接口：
```
plt.plot(fit_x, fit_y)
```
坦率地说，我不喜欢这种方法，因为它隐藏了各种对象之间发生的重要交互。不幸的是，有时[官方的例子](https://matplotlib.org/gallery/index.html)有点令人困惑，因为他们倾向于使用不同的方法。在这个简单的例子中，引用图形对象是不必要的，但是在更复杂的例子中（例如在图形用户界面中嵌入图形时），引用图形对象就变得很重要了。
#### 结果
命令行输入：
```
#### Anscombe's first set with Python ####
Slope: 0.500091
Intercept: 3.000091
Correlation coefficient: 0.816421
```
这是 Matplotlib 产生的图像：
![Plot and fit of the dataset obtained with Python](/data/attachment/album/202002/29/114814z7mefpy1np1ppy4n.png "Plot and fit of the dataset obtained with Python")
### GNU Octave 方式
[GNU Octave](https://www.gnu.org/software/octave/) 语言主要用于数值计算。它提供了一个简单的操作向量和矩阵的语法，并且有一些强大的绘图工具。这是一种像 Python 一样的解释语言。由于 Octave 的语法[几乎兼容](https://wiki.octave.org/FAQ#Differences_between_Octave_and_Matlab) [MATLAB](https://en.wikipedia.org/wiki/MATLAB)，它经常被描述为一个替代 MATLAB 的免费方案。Octave 没有被列为最流行的编程语言，而 MATLAB 则是，所以 Octave 在某种意义上是相当流行的。MATLAB 早于 NumPy，我觉得它是受到了前者的启发。当你看这个例子时，你会看到相似之处。
#### 安装
[fitting\_octave.m](https://gitlab.com/cristiano.fontana/polyglot_fit/-/blob/master/fitting_octave.m) 的例子只需要基本的 Octave 包，在 Fedora 中安装相当简单：
```
sudo dnf install octave
```
#### 代码注释
在 Octave 中，你可以用百分比符号（`%`）为代码添加注释，如果不需要与 MATLAB 兼容，你也可以使用 `#`。使用 `#` 的选项允许你编写像 Python 示例一样的特殊注释行，以便直接在命令行上执行脚本。
#### 必要的库
本例中使用的所有内容都包含在基本包中，因此你不需要加载任何新的库。如果你需要一个库，[语法](https://octave.org/doc/v5.1.0/Using-Packages.html#Using-Packages)是 `pkg load module`。该命令将模块的功能添加到可用功能列表中。在这方面，Python 具有更大的灵活性。
#### 定义变量
变量的定义与 Python 的语法基本相同：
```
input_file_name = "anscombe.csv";
delimiter = "\t";
skip_header = 3;
column_x = 1;
column_y = 2;
```
请注意，行尾有一个分号；这不是必需的，但是它会抑制该行结果的输出。如果没有分号，解释器将打印表达式的结果：
```
octave:1> input_file_name = "anscombe.csv"
input_file_name = anscombe.csv
octave:2> sqrt(2)
ans =  1.4142
```
#### 打印输出结果
强大的函数 [printf()](https://octave.org/doc/v5.1.0/Formatted-Output.html#XREFprintf) 是用来在终端上打印的。与 Python 不同，`printf()` 函数不会自动在打印字符串的末尾添加换行，因此你必须添加它。第一个参数是一个字符串，可以包含要传递给函数的其他参数的格式信息，例如：
```
printf("Slope: %f\n", slope);
```
在 Python 中，格式是内置在字符串本身中的，但是在 Octave 中，它是特定于 `printf()` 函数。
#### 读取数据
[dlmread()](https://octave.org/doc/v5.1.0/Simple-File-I_002fO.html#XREFdlmread) 函数可以读取类似 CSV 文件的文本内容：
```
data = dlmread(input_file_name, delimiter, skip_header, 0);
```
结果是一个[矩阵](https://octave.org/doc/v5.1.0/Matrices.html)对象，这是 Octave 中的基本数据类型之一。矩阵可以用类似于 Python 的语法进行切片：
```
x = data(:, column_x);
y = data(:, column_y);
```
根本的区别是索引从 1 开始，而不是从 0 开始。因此，在该示例中，`x` 列是第一列。
#### 拟合数据
要用直线拟合数据，可以使用 [polyfit()](https://octave.org/doc/v5.1.0/Polynomial-Interpolation.html) 函数。它用一个多项式拟合输入数据，所以你只需要使用一阶多项式：
```
p = polyfit(x, y, 1);
slope = p(1);
intercept = p(2);
```
结果是具有多项式系数的矩阵；因此，它选择前两个索引。要确定相关系数，请使用 [corr()](https://octave.org/doc/v5.1.0/Correlation-and-Regression-Analysis.html#XREFcorr) 函数：
```
r_value = corr(x, y);
```
最后，使用 `printf()` 函数打印结果：
```
printf("Slope: %f\n", slope);
printf("Intercept: %f\n", intercept);
printf("Correlation coefficient: %f\n", r_value);
```
#### 绘图
与 Matplotlib 示例一样，首先需要创建一个表示拟合直线的数据集:
```
fit_x = linspace(min(x) - 1, max(x) + 1, 100);
fit_y = slope * fit_x + intercept;
```
与 NumPy 的相似性也很明显，因为它使用了 [linspace()](https://octave.sourceforge.io/octave/function/linspace.html) 函数，其行为就像 Python 的等效版本一样。
同样，与 Matplotlib 一样，首先创建一个[图](https://octave.org/doc/v5.1.0/Multiple-Plot-Windows.html)对象，然后创建一个[轴](https://octave.org/doc/v5.1.0/Graphics-Objects.html#XREFaxes)对象来保存这些图：
```
fig_width = 7; %inch
fig_height = fig_width / 16 * 9; %inch
fig_dpi = 100;
fig = figure("units", "inches",
             "position", [1, 1, fig_width, fig_height]);
ax = axes("parent", fig);
set(ax, "fontsize", 14);
set(ax, "linewidth", 2);
```
要设置轴对象的属性，请使用 [set()](https://octave.org/doc/v5.1.0/Graphics-Objects.html#XREFset) 函数。然而，该接口相当混乱，因为该函数需要一个逗号分隔的属性和值对列表。这些对只是代表属性名的一个字符串和代表该属性值的第二个对象的连续。还有其他设置各种属性的函数：
```
xlim(ax, [min(x) - 1, max(x) + 1]);
ylim(ax, [min(y) - 1, max(y) + 1]);
xlabel(ax, 'x');
ylabel(ax, 'y');
```
绘图是用 [plot()](https://octave.org/doc/v5.1.0/Two_002dDimensional-Plots.html#XREFplot) 功能实现的。默认行为是每次调用都会重置坐标轴，因此需要使用函数 [hold()](https://octave.org/doc/v5.1.0/Manipulation-of-Plot-Windows.html#XREFhold)。
```
hold(ax, "on");
plot(ax, fit_x, fit_y,
     "marker", "none",
     "linestyle", "-",
     "linewidth", 2);
plot(ax, x, y,
     "marker", ".",
     "markersize", 20,
     "linestyle", "none");
hold(ax, "off");
```
此外，还可以在 `plot()` 函数中添加属性和值对。[legend](https://octave.org/doc/v5.1.0/Plot-Annotations.html#XREFlegend) 必须单独创建，标签应手动声明：
```
lg = legend(ax, "Fit", "Data");
set(lg, "location", "northwest");
```
最后，将输出保存到 PNG 图像：
```
image_size = sprintf("-S%f,%f", fig_width * fig_dpi, fig_height * fig_dpi);
image_resolution = sprintf("-r%f,%f", fig_dpi);
print(fig, 'fit_octave.png',
      '-dpng',
      image_size,
      image_resolution);
```
令人困惑的是，在这种情况下，选项被作为一个字符串传递，带有属性名和值。因为在 Octave 字符串中没有 Python 的格式化工具，所以必须使用 [sprintf()](https://octave.org/doc/v5.1.0/Formatted-Output.html#XREFsprintf) 函数。它的行为就像 `printf()` 函数，但是它的结果不是打印出来的，而是作为字符串返回的。
在这个例子中，就像在 Python 中一样，图形对象很明显被引用以保持它们之间的交互。如果说 Python 在这方面的文档有点混乱，那么 [Octave 的文档](https://octave.org/doc/v5.1.0/Two_002dDimensional-Plots.html#Two_002dDimensional-Plots)就更糟糕了。我发现的大多数例子都不关心引用对象；相反，它们依赖于绘图命令作用于当前活动图形。全局[根图形对象](https://octave.org/doc/v5.1.0/Graphics-Objects.html#XREFgroot)跟踪现有的图形和轴。
#### 结果
命令行上的结果输出是：
```
#### Anscombe's first set with Octave ####
Slope: 0.500091
Intercept: 3.000091
Correlation coefficient: 0.816421
```
它显示了用 Octave 生成的结果图像。
![Plot and fit of the dataset obtained with Octave](/data/attachment/album/202002/29/114815do6fh2xfac6w2r2g.png "Plot and fit of the dataset obtained with Octave")
### 接下来
Python 和 GNU Octave 都可以绘制出相同的信息，尽管它们的实现方式不同。如果你想探索其他语言来完成类似的任务，我强烈建议你看看 [Rosetta Code](http://www.rosettacode.org/)。这是一个了不起的资源，可以看到如何用多种语言解决同样的问题。
你喜欢用什么语言绘制数据？在评论中分享你的想法。
---
via: 
作者：[Cristiano L. Fontana](https://opensource.com/users/cristianofontana) 选题：[lujun9972](https://github.com/lujun9972) 译者：[heguangzhi](https://github.com/heguangzhi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出