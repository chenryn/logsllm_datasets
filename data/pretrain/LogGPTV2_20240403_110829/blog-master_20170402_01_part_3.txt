postgres=# set standard_conforming_strings =on;   
SET  
postgres=# insert into tbl(id,info) values (1,'{"activitytitle":"你好中华人民共和国","giftname":"\u6447\u4E00\u6447\u7EA2\u5305","ruledesc":null}');  
INSERT 0 1  
postgres=# select * from tbl;  
 id |                                                info                                                  
----+----------------------------------------------------------------------------------------------------  
  1 | {"activitytitle":"你好中华人民共和国","giftname":"\u6447\u4E00\u6447\u7EA2\u5305","ruledesc":null}  
(1 row)  
postgres=# select info->'activitytitle' from tbl;  
       ?column?         
----------------------  
 "你好中华人民共和国"  
(1 row)  
postgres=# select info->'giftname' from tbl;  
             ?column?               
----------------------------------  
 "\u6447\u4E00\u6447\u7EA2\u5305"  
(1 row)  
```  
## 小结
1\. 如何在字符串中输入特殊字符，例如回车。  
```
1. 使用转义的方法输入特殊字符
E'\?'
2. 使用UNIDOCE的方法输入特殊字符，standard_conforming_strings=off, escape_string_warning=off
U&'\xxxx'
```
2\. 如何在字符串中输入单引号。    
```
4种方式在字符串中输入单引号
U&'\????'
E'\''
$$'$$
''''
```
3\. 转义字符是什么？PostgreSQL如何使用反斜线转义？书写格式如何？    
```
反斜线作为转义字符，与C语言风格类似，可以输入特殊字符。
E'\?'
或者
standard_conforming_strings=off, escape_string_warning=off
'\?'
```
4\. 在SQL标准中，反斜线是转义符吗？
```
SQL标准中，反斜线是普通字符
standard_conforming_strings=on
'\' 中的\是普通字符
```
5\. 为什么转义单引号存在SQL注入的风险？数据库有什么参数可以控制这个风险？有哪些参数可以发出警告？  
```
转义字符可以将单引号转换为普通字符，这么做可能导致正常的字符串结束变成未结束。
通过参数可以控制是否允许转义单引号
backslash_quote = on 允许, off 不允许, safe_encoding（仅当client_encoding不允许反斜线```\```出现在多字节字符中时（大多数字符集```\```都是单字节表示），那么才允许使用```\'```转义单引号.）   
```
6\. 如何以UNICODE的形式输入字符串。  
```
6种写法
U&'\xxxx'
U&'\+xxxxxx'
E'\uxxxx'
E'\Uxxxxxxxx'
standard_conforming_strings=off
'\uxxxx'
'\Uxxxxxxxx'
```
7\. 以UNICODE的格式输入，支持所有字符集吗？目前支持哪些字符集，支持的CODE范围是多少？  
```
当数据库encoding 为 UTF8时，支持除zero字符以外的所有合法字符
当数据库encoding <> UTF8时，仅支持ASCII字符，即CODE0 then   
     RAISE EXCEPTION 'Found % in %, POS:%. please use another escape char other than %', $2, $1, strpos($1,$2), $2;  
   end if;  
   sql := format('SELECT U&%s UESCAPE %s',   
                         quote_literal(replace($1, '\u',$2)),  
                         quote_literal($2)) ;  
   raise notice 'sql: %', sql;  
   execute sql INTO result;  
   RETURN result;  
 END;  
 $function$;  
postgres=# select unescape('Odpov\u011Bdn\u00E1 osoba','^');  
    unescape       
-----------------  
 Odpovědná osoba  
(1 row)  
```  
## 防止SQL注入，我们需要注意以下几个要点：    
1.永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双"-"进行转换等。    
2.永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。    
3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。    
4.不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。    
5.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装    
6.sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。    
## 参考                      
https://www.postgresql.org/docs/9.6/static/runtime-config-compatible.html#RUNTIME-CONFIG-COMPATIBLE-VERSION    
https://www.postgresql.org/docs/9.6/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-UESCAPE    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")