return kr;
}
$ gcc -Wall -o lsmacaddr lsmacaddr.c -framework IOKit \
-framework CoreFoundation
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 55 of 79
$ ./lsmacaddr
00:0d:xx:xx:xx:xx
00:0d:xx:xx:xx:xx
10.7.10. Implementing an Encrypted Disk Filter Scheme
In this example, we will create a mass-storage filter scheme driver that implements transparent encryption at
the device level. The driver will facilitate encrypted volumes wherein all data (both user data and file system
data) will be encrypted on the storage medium, but mounting such a volume will allow us to access it
normally. We will assume familiarity with the concepts described in Apple's technical document titled
"Mass Storage Device Driver Programming Guide." As discussed in this document, a filter scheme driver
inherits from the IOStorage class and logically sits between two media objects, each of which is an instance
of the IOMedia class. The driver allows mapping of one or more media objects to one or more different
media objects. Our encryption filter is an example of a one-to-one mapping. A partition scheme driver maps
one media object (say, representing a whole disk) to many media objects (each representing a partition on
the disk). Conversely, a RAID scheme maps multiple media objects (RAID members) to a single media
object.
An important consideration while writing a filter scheme driver is the specification of a media object's
properties that the filter driver will match against. The set of target properties is specified in the filter
scheme driver's personality. Examples of IOMedia properties include whether the media is ejectable,
whether it is writable, the media's preferred block size in bytes, the media's entire size in bytes, the media's
BSD device node name, and the media's content description (or content hint, as specified when the media
object was created). In this example, we will arrange for our filter scheme driver to match all IOMedia
objects whose content description is osxbook_HFSthis way, it will not inadvertently match existing volumes.
To test the driver, we will explicitly create a volume on a disk image.
Let us call our driver SimpleCryptoDisk. We will begin with an Xcode project template for I/O Kit drivers.
Figure 1034 shows the personality and dependency specifications from the driver's Info.plist file. Note
that the personality includes a content-hint string.
Figure 1034. Personality and dependency list for the SimpleCryptoDisk I/O Kit driver
...
IOKitPersonalities
SimpleCryptoDisk
CFBundleIdentifier
com.osxbook.driver.SimpleCryptoDisk
Content Hint
osxbook_HFS
IOClass
com_osxbook_driver_SimpleCryptoDisk
IOMatchCategory
IOStorage
IOProviderClass
IOMedia
OSBundleLibraries
com.apple.iokit.IOStorageFamily
1.5
com.apple.kpi.iokit
8.0.0
com.apple.kpi.libkern
8.0.0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 56 of 79
Since the data is to be stored encrypted on disk, we will need to implement a read() method that performs
decryption and a write() method that performs encryption. Both these methods are asynchronouswhen the
I/O completes, the caller must be notified using the specified completion action. As we will shortly see, the
asynchrony somewhat complicates the implementation of these methods because our driver must substitute
its own completion action in place of the caller's actions, which it must eventually invoke. Figure 1035
shows the header file (SimpleCryptoDisk.h) for the driver.
Figure 1035. Header file for the SimpleCryptoDisk I/O Kit driver
// SimpleCryptoDisk.h
#include 
#include 
class com_osxbook_driver_SimpleCryptoDisk : public IOStorage {
OSDeclareDefaultStructors(com_osxbook_driver_SimpleCryptoDisk)
protected:
IOMedia *_filteredMedia;
virtual void free(void);
virtual bool handleOpen(IOService *client,
IOOptionBits options,
void *access);
virtual bool handleIsOpen(const IOService *client) const;
virtual void handleClose(IOService *client, IOOptionBits options);
public:
virtual bool init(OSDictionary *properties = 0);
virtual bool start(IOService *provider);
virtual void read(IOService *client,
UInt64 byteStart,
IOMemoryDescriptor *buffer,
IOStorageCompletion completion);
virtual void write(IOService *client,
UInt64 byteStart,
IOMemoryDescriptor *buffer,
IOStorageCompletion completion);
virtual IOReturn synchronizeCache(IOService *client);
virtual IOMedia *getProvider() const;
};
Figure 1036 shows the driver's source (SimpleCryptoDisk.cpp). Besides relatively trivial method
implementations that simply forward the invocation to the provider's methods, we implement the following
important methods and functions.
 com_osxbook_driver_SimpleCryptoDisk::start() initializes and publishes a new media object.
Note that our filter scheme driver matches against a content hint of osxbook_HFS but publishes a
media object with a content hint of Apple_HFS.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 57 of 79
 com_osxbook_driver_SimpleCryptoDisk::read() reads data from storage. Once the I/O finishes,
the driver postprocesses the data read by decrypting it. We use a structure of type
SimpleCryptoDiskContext to hold the context, including the caller's completion routine, for a read
or write operation.
 com_osxbook_driver_SimpleCryptoDisk::write() writes data to storage. The driver preprocesses
the data to encrypt it.
 fixBufferUserRead() is the encryption routine, where encryption is simply a logical NOT operation.
 fixBufferUserWrite() is the decryption routine, where decryption is again a logical NOT operation.
 SCDReadWriteCompletion() is the driver's completion routine. We replace the caller's completion
routine for both reads and writes. It is clear that we cannot decrypt until a read completes. In the case
of writes, we do not encrypt the caller's data buffer in placewe allocate a new data buffer for
encryption and wrap it in two IOMemoryDescriptor instances: one with a direction of
kIODirectionIn (used while encrypting) and another with a direction of kIODirectionOut (passed
to the provider's write() method).
Figure 1036. Source for the SimpleCryptoDisk I/O Kit driver
// SimpleCryptoDisk.cpp
#include 
#include 
#include "SimpleCryptoDisk.h"
#define super IOStorage
OSDefineMetaClassAndStructors(com_osxbook_driver_SimpleCryptoDisk, IOStorage)
// Context structure for our read/write completion routines
typedef struct {
IOMemoryDescriptor *buffer;
IOMemoryDescriptor *bufferRO;
IOMemoryDescriptor *bufferWO;
void *memory;
vm_size_t size;
IOStorageCompletion completion;
} SimpleCryptoDiskContext;
// Internal functions
static void fixBufferUserRead(IOMemoryDescriptor *buffer);
static void fixBufferUserWrite(IOMemoryDescriptor *bufferR,
IOMemoryDescriptor *bufferW);
static void SCDReadWriteCompletion(void *target, void *parameter,
IOReturn status, UInt64 actualByteCount);
bool
com_osxbook_driver_SimpleCryptoDisk::init(OSDictionary *properties)
{
if (super::init(properties) == false)
return false;
_filteredMedia = 0;
return true;
}
void
com_osxbook_driver_SimpleCryptoDisk::free(void)
{
if (_filteredMedia)
_filteredMedia->release();
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 58 of 79
super::free();
}
bool
com_osxbook_driver_SimpleCryptoDisk::start(IOService *provider)
{
IOMedia *media = (IOMedia *)provider;
assert(media);
if (super::start(provider) == false)
return false;
IOMedia *newMedia = new IOMedia;
if (!newMedia)
return false;
if (!newMedia->init(
0, // media offset in bytes
media->getSize(), // media size in bytes
media->getPreferredBlockSize(), // natural block size in bytes
media->isEjectable(), // is media ejectable?
false, // is it the whole disk?
media->isWritable(), // is media writable?
"Apple_HFS")) { // hint of media's contents
newMedia->release();
newMedia = 0;
return false;
}
UInt32 partitionID = 1;
char name[32];
// Set a name for this partition.
sprintf(name, "osxbook_HFS %ld", partitionID);
newMedia->setName(name);
// Set a location value (partition #) for this partition.
char location[32];
sprintf(location, "%ld", partitionID);
newMedia->setLocation(location);
_filteredMedia = newMedia;
newMedia->attach(this);
newMedia->registerService();
return true;
}
bool
com_osxbook_driver_SimpleCryptoDisk::handleOpen(IOService *client,
IOOptionBits options,
void *argument)
{
return getProvider()->open(this, options, (IOStorageAccess)argument);
}
bool
com_osxbook_driver_SimpleCryptoDisk::handleIsOpen(const IOService *client) const
{
return getProvider()->isOpen(this);
}
void
com_osxbook_driver_SimpleCryptoDisk::handleClose(IOService *client,
IOOptionBits options)
{
getProvider()->close(this, options);
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 59 of 79
IOReturn
com_osxbook_driver_SimpleCryptoDisk::synchronizeCache(IOService *client)
{
return getProvider()->synchronizeCache(this);
}
IOMedia *
com_osxbook_driver_SimpleCryptoDisk::getProvider(void) const
{
return (IOMedia *)IOService::getProvider();
}
void
com_osxbook_driver_SimpleCryptoDisk::read(IOService *client,
UInt64 byteStart,
IOMemoryDescriptor *buffer,
IOStorageCompletion completion)
{
SimpleCryptoDiskContext *context =
(SimpleCryptoDiskContext *)IOMalloc(sizeof(SimpleCryptoDiskContext));
context->buffer = buffer;
context->bufferRO = NULL;
context->bufferWO = NULL;
context->memory = NULL;
context->size = (vm_size_t)0;
// Save original completion function and insert our own.
context->completion = completion;
completion.action = (IOStorageCompletionAction)&SCDReadWriteCompletion;
completion.target = (void *)this;
completion.parameter = (void *)context;
// Hand over to the provider.
return getProvider()->read(this, byteStart, buffer, completion);
}
void
com_osxbook_driver_SimpleCryptoDisk::write(IOService *client,
UInt64 byteStart,
IOMemoryDescriptor *buffer,
IOStorageCompletion completion)
{
// The buffer passed to this function would have been created with a
// direction of kIODirectionOut. We need a new buffer that is created
// with a direction of kIODirectionIn to store the modified contents
// of the original buffer.
// Determine the original buffer's length.
IOByteCount length = buffer->getLength();
// Allocate memory for a new (temporary) buffer. Note that we would be
// passing this modified buffer (instead of the original) to our
// provider's write function. We need a kIODirectionOut "pointer",
// a new memory descriptor referring to the same memory, that we shall
// pass to the provider's write function.
void *memory = IOMalloc(length);
// We use this descriptor to modify contents of the original buffer.
IOMemoryDescriptor *bufferWO =
IOMemoryDescriptor::withAddress(memory, length, kIODirectionIn);
// We use this descriptor as the buffer argument in the provider's write().
IOMemoryDescriptor *bufferRO =
IOMemoryDescriptor::withSubRange(bufferWO, 0, length, kIODirectionOut);
SimpleCryptoDiskContext *context =
(SimpleCryptoDiskContext *)IOMalloc(sizeof(SimpleCryptoDiskContext));
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh4BFC.h... 20.08.2007
Chapter 10. Extending the Kernel Page 60 of 79
context->buffer = buffer;
context->bufferRO = bufferRO;
context->bufferWO = bufferWO;
context->memory = memory;
context->size = (vm_size_t)length;
// Save the original completion function and insert our own.
context->completion = completion;
completion.action = (IOStorageCompletionAction)&SCDReadWriteCompletion;
completion.target = (void *)this;
completion.parameter = (void *)context;
// Fix buffer contents (apply simple "encryption").
fixBufferUserWrite(buffer, bufferWO);
// Hand over to the provider.
return getProvider()->write(this, byteStart, bufferRO, completion);
}
static void
fixBufferUserRead(IOMemoryDescriptor *buffer)
{
IOByteCount i, j;
IOByteCount length, count;
UInt64 byteBlock[64];
assert(buffer);
length = buffer->getLength();
assert(!(length % 512));
length /= 512;
buffer->prepare(kIODirectionOutIn);
for (i = 0; i readBytes(i * 512, (UInt8 *)byteBlock, 512);
for (j = 0; j < 64; j++)