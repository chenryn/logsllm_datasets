and ignore any auxiliary overhead associated with maintaining those
data structures. For instance, rs, rs(cid:3) and lc use hash tables and
thus require additional space to maintain the keys. An array-based
approach like got or got(cid:3) does not have this additional overhead.
Hence the actual difference between the space requirement of got(cid:3)
and lc is smaller than shown in Figure 15(b). A more accurate space
comparison should also account for these extra overheads.
The above plots demonstrate that lazy expansion results in both
low space usage and low computation overhead. In the remainder of
the evaluations, we shall use the lazy expansion variants (got(cid:3), rs(cid:3),
cp(cid:3)) of our proposed algorithms.
6.1.2 Accuracy
A number of factors determine the accuracy of the proposed algo-
rithms – we consider each of them in turn. Note that under the same
situation, got and rs always provide identical estimates of the count
associated with a cluster, and hence have identical accuracy (F N,
F P and ES) measures. In the following accuracy evaluations, we
therefore only present results for got(cid:3), with the knowledge that the
accuracy-related conclusions for got(cid:3) apply identically to rs(cid:3).
First we consider the impact of the three heuristics copy-all, no-
copy, and splitting (introduced in Section 3.2) for estimating the
overall trafﬁc corresponding to a cluster. Figures 16(a)-(b) com-
 20
 15
 10
 5
 0
e
c
a
p
s
d
e
z
i
l
a
m
r
o
n
e
c
a
p
s
d
e
z
i
l
a
m
r
o
n
)
%
(
o
i
t
a
r
r
o
r
r
e
)
%
(
o
i
t
a
r
r
o
r
r
e
 35
 30
 25
 20
 15
 10
 5
 0
 60
 50
 40
 30
 20
 10
 0
array
hash table
omitted from the ﬁgures for better readability). The plots show that
across all combinations of HHH detection algorithm and missing
trafﬁc estimation heuristic, both the F P and F N values are higher
for smaller (cid:30) and and decrease for larger (cid:30). F P for copy-all is sub-
stantially higher than for the other 2 heuristics, for both got(cid:3) and
cp(cid:3), particularly for small (cid:30). Note also that no-copy has the worst
F N among the three copy schemes. Given the low F P and F N
for splitting, in the remainder of the evaluations, we focus on this
heuristic.
)
%
(
o
i
t
a
r
e
v
i
t
a
g
e
n
e
s
a
l
f
)
%
(
o
i
t
a
r
e
v
i
t
i
s
o
p
e
s
a
l
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
 4
 3.5
 3
 2.5
 2
 1.5
 1
 0.5
 0
cp*
got*
lc-noFP
 0.008
 0.01
 0.002
 0.004
 0.006
phi
(a) false negatives (gran = 1)
cp*
got*
sk
sk2
lc-noFN
 0.008
 0.01
 0.002
 0.004
 0.006
phi
(b) false positives (gran = 1)
Figure 17: Accuracy without compression
We next examine the impact of the compression technique (see
Section 3.6) on the accuracy. Figures 17(a)-(b) respectively plot the
F N and F P as a function of (cid:30), for different HHH detection algo-
rithms, when compression is not used. Figures 18(a)-(b) present the
corresponding plots when compression is used. Note that the Lossy
Count based baseline HHH detection algorithm lc can be conﬁgured
to detect HHHs using either a lower bound estimate (which ensures
F P = 0), or an upper bound estimate (which ensures F N = 0)
of the actual volume of each HHH; we use lc-noFP and lc-noFN
to refer to these two conﬁgurations of lc, respectively. The set of
plots reveal that compression signiﬁcantly improves both and FN,
for both cp(cid:3) and got(cid:3). The cause of this behavior can be traced to
the way compression works. Recall that the compression technique
begins with a small initial estimate of the total volume – its expan-
sion threshold is therefore smaller initially. Hence cp(cid:3) (also got(cid:3))
with compression may create a node for a HHH cluster and begin
accounting for its trafﬁc at an earlier instant, and therefore miss less
counts for the cluster. This contributes to the increased accuracy. A
second point to take away from the graphs is that the FP and FN
values are low and comparable for the baselines and the proposed
schemes, even without compression.
The detailed evaluations above are all based on the ISP-100K
trace. We next use the much larger one month long trace ISP-1mon
to measure the accuracy of got(cid:3) across the one-month period. We
present the cummulative distribution of the FP and FN for two dif-
ferent routers in Figures 19(a)-(b). The plots show that the bulk of
the FP and FN values are very low, for both routers.
sk2
lc
cp
got
rs
cp*
got*
rs*
(a) trace = ISP-100k, gran = 1, (cid:15) = 0:001
 20
 15
 10
 5
 0
array
hash table
sk2
lc
cp
got
rs
cp*
got*
rs*
(b) trace = ISP-100k, gran = 8, (cid:15) = 0:001
Figure 15: Normalized space costs of different algorithms. (nor-
malized space cost = total space cost / [1=(cid:15) (cid:1) (32=gran)2]). The
cost for sk (not shown) is 5.5 times more than that for sk2.
FP: got* (copy-all)
FN: got* (no-copy)
FN: got* (split)
FP: got* (split)
f
 0.002
 0.004
 0.006
 0.008
 0.01
phi
(a) gran = 1
FP: cp* (copy-all)
FN: cp* (no-copy)
FN: cp* (split)
FP: cp* (split)
 0.002
 0.004
 0.006
 0.008
 0.01
phi
(b) gran = 1
Figure 16: Comparison between 3 detection criteria
pare the accuracy for the three heuristics for the 2-d HHH detec-
tion techniques got(cid:3) and cp(cid:3), respectively, as a function of the HHH
threshold (cid:30), for gran = 1. Recall that by deﬁnition, copy-all has
F N = 0, and no-copy has F P = 0 (the corresponding plots are
cp*
got*
lc-noFP
 0.008
 0.01
 0.002
 0.004
 0.006
phi
(a) false negatives (gran = 1)
cp*
got*
sk
sk2
lc-noFN
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
)
%
(
e
g
a
t
n
e
c
r
e
p
)
%
(
e
g
a
t
n
e
c
r
e
p
)
%
(
o
i
t
a
r
e
v
i
t
a
g