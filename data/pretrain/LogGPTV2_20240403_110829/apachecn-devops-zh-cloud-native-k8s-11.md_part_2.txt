NOTES.txt
service.yaml
```
这个自动生成的图表可以作为一个起点提供很多帮助，但是为了本教程的目的，我们将从头开始制作这些图表。
创建一个名为`mynodeapp`的新文件夹，并将我们之前展示的`Chart.yaml`文件放入其中。然后，在里面创建一个名为`templates`的文件夹。
需要记住的一点是:Kubernetes 资源 YAML 本身就是一个有效的 Helm 模板。不需要在模板中使用任何变量。你可以只写普通的 YAML，Helm 安装仍然会工作。
为了展示这一点，让我们从向模板文件夹添加一个模板文件开始。称之为`deployment.yaml`并包含以下非变量 YAML:
deployment.yaml:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-myapp
  labels:
    app: frontend-myapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-myapp
  template:
    metadata:
      labels:
        app: frontend-myapp
    spec:
      containers:
      - name: frontend-myapp
        image: myrepo/myapp:1.0.0
        ports:
        - containerPort: 80
```
如你所见，这个 YAML 只是一个常规的 Kubernetes 资源 YAML。我们的模板中没有使用任何变量。
现在，我们有足够的资源来安装我们的图表。接下来让我们做那个。
### 安装和卸载 Helm 图表
要使用 Helm V3 安装一个图表，您可以从图表的`root`目录运行一个`helm install`命令:
```
helm install myapp .
```
这个安装命令创建一个名为`frontend-app`的 Helm 版本，并安装我们的图表。现在，我们的图表只包含一个带有两个 Pod 的部署，我们应该能够看到它在集群中运行，命令如下:
```
kubectl get deployment
```
这将产生以下输出:
```
NAMESPACE  NAME            READY   UP-TO-DATE   AVAILABLE   AGE
default    frontend-myapp  2/2     2            2           2m
```
从输出中可以看到，我们的 Helm `install`命令已经在 Kubernetes 中成功创建了一个部署对象。
卸载我们的图表也同样容易。我们可以通过运行以下命令来安装通过我们的图表安装的所有 Kubernetes 资源:
```
helm uninstall myapp
```
这个`uninstall`命令(【Helm V2 中的 T1】)只是取了我们 Helm 版本的名字。
现在，到目前为止，我们还没有使用 Helm 的任何真正的力量——我们一直在使用它作为一个没有任何附加功能的替代物。让我们通过在图表中实现一些变量来改变这种情况。
### 使用模板变量
将变量添加到我们的 Helm 图表模板就像使用双括号–`{{ }}`–语法一样简单。我们放在双括号中的内容将直接取自我们使用点符号安装图表时使用的值。
让我们看一个简单的例子。到目前为止，我们已经将我们的应用名称(和容器映像名称/版本)硬编码到我们的 YAML 文件中。如果我们想要使用 Helm 图表来部署不同的应用或不同的应用版本，这将极大地限制我们。
为了解决这个问题，我们将向图表中添加模板变量。看看这个生成的模板:
模板化-deployment.yaml:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-{{ .Release.Name }}
  labels:
    app: frontend-{{ .Release.Name }}
    chartVersion: {{ .Chart.version }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-{{ .Release.Name }}
  template:
    metadata:
      labels:
        app: frontend-{{ .Release.Name }}
    spec:
      containers:
      - name: frontend-{{ .Release.Name }}
        image: myrepo/{{ .Values.image.name }}
:{{ .Values.image.tag }}
        ports:
        - containerPort: 80
```
让我们看一下这个 YAML 文件，回顾一下我们的变量。我们在这个文件中使用了一些不同类型的变量，但是它们都使用相同的点符号。
Helm 实际上支持一些不同的顶级对象。这些是您可以在模板中引用的主要对象:
*   `.Chart`:用于引用`Chart.yaml`文件中的元数据值
*   `.Values`:用于引用安装时从`values`文件传入图表的值
*   `.Template`:用于引用当前模板文件的一些信息
*   `.Release`:用于参考头盔发布的信息
*   `.Files`:用于引用图表中非 YAML 模板的文件(例如`config`文件)
*   `.Capabilities`:用于引用目标 Kubernetes 集群的信息(换句话说就是版本)
在我们的 YAML 文件中，我们使用了其中的几个。首先，我们在几个地方引用了我们版本的`name`(包含在`.Release`对象中)。接下来，我们将利用`Chart`对象向`chartVersion`键注入元数据。最后，我们使用`Values`对象来引用容器映像`name`和`tag`。
现在，我们缺少的最后一件事是我们将通过`values.yaml`或命令行界面命令注入的实际值。其他一切都将使用`Chart.yaml`创建，或者我们将在运行时通过`helm`命令本身注入的值。
考虑到这一点，让我们从模板中创建我们的价值观文件，我们将传递我们的形象`name`和`tag`。因此，让我们以适当的格式包括这些内容:
```
image:
  name: myapp
  tag: 2.0.1
```
现在，我们可以通过我们的 Helm 图表安装我们的应用！使用以下命令执行此操作:
```
helm install myrelease -f values.yaml .
```
如您所见，我们正在用`-f`键传递我们的值(您也可以使用`--values`)。这个命令将安装我们应用的版本。
一旦我们有了版本，我们就可以使用 Helm CLI 升级到新版本或回滚到旧版本–我们将在下一节介绍这一点。
### 升级和回滚
现在我们有了一个活跃的头盔版本，我们可以升级它了。让我们对我们的`values.yaml`做一个小小的改变:
```
image:
  name: myapp
  tag: 2.0.2
```
为了使这成为我们版本的新版本，我们还需要更改我们的图表 YAML:
```
apiVersion: v2
name: mynodeapp
version: 1.0.1
```
现在，我们可以使用以下命令升级我们的版本:
```
helm upgrade myrelease -f values.yaml .
```
如果出于某种原因，我们想回滚到早期版本，可以使用以下命令:
```
helm rollback myrelease 1.0.0
```
如您所见，Helm 允许应用的无缝模板化、发布、升级和回滚。正如我们之前提到的，Kustomize 击中了许多相同的点，但以一种非常不同的方式做到了这一点——让我们看看是如何做到的。
## 用 Kubernetes 进行 Kustomize
虽然 Helm 图表可能会变得相当复杂，但 Kustomize 使用 YAML 时没有任何变量，而是使用了一种基于补丁和覆盖的方法，将不同的配置应用于基本的 Kubernetes 资源集。
使用 Kustomize 非常简单，正如我们在本章前面提到的，没有必备的 CLI 工具。一切都通过使用`kubectl apply -k /path/kustomize.yaml`命令工作，无需安装任何新的东西。但是，我们还将使用 Kustomize CLI 工具演示该流程。
重要说明
要安装 Kustomize CLI 工具，可以查看[https://kubernetes-sigs.github.io/kustomize/installation](https://kubernetes-sigs.github.io/kustomize/installation)的安装说明。
目前，安装使用以下命令:
```
curl -s "https://raw.githubusercontent.com/\
kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
```
现在我们已经安装了 Kustomize，让我们将 Kustomize 应用到我们现有的用例中。我们将从简单的 Kubernetes YAML 开始(在我们开始添加 Helm 变量之前):
普通部署. yaml:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-myapp
  labels:
    app: frontend-myapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-myapp
  template:
    metadata:
      labels:
        app: frontend-myapp
    spec:
      containers:
      - name: frontend-myapp
        image: myrepo/myapp:1.0.0
        ports:
        - containerPort: 80
```
创建了初始的`deployment.yaml`之后，我们现在可以创建一个 Kustomization 文件，我们称之为`kustomize.yaml`。
当我们稍后使用`-k`参数调用`kubectl`命令时，`kubectl`将查找这个`kustomize` YAML 文件，并使用它来确定哪些补丁应用于传递给`kubectl`命令的所有其他 YAML 文件。
Kustomize 允许我们修补单个值或设置要自动设置的公共值。一般来说，Kustomize 将创建新行，或者如果密钥已经存在于 YAML，则更新旧行。有三种方法可以应用这些更改:
*   直接在 Kustomization 文件中指定更改。