漏洞规则：URL_REWRITING  
该方法的实现包括确定是否需要在URL中编码session ID的逻辑。  
url重写已经是非常严重的安全问题了，因为session ID 出现在url中，这就很容易被第三方获取到。在url中的session
ID会以很多种的方式被暴露。
  * 日志 
  * 浏览器历史 
  * 复制粘贴到邮件中或者文章中 
  * http的Referrer头中 
有漏洞的代码：
    out.println("Click here");
解决方案：  
避免使用这些方法，如果您要编码URL字符串或表单参数，请不要将URL重写方法与URLEncoder类混淆。  
引用：  
[OWASP Top 10 2010-A3-Broken Authentication and Session Management](OWASP Top
10 2010-A3-Broken Authentication and Session Management)
# 不安全的SMTP SSL链接
漏洞特征：INSECURE_SMTP_SSL  
当进行ssl连接时，服务器会禁用身份验证。一些启用ssl连接的邮件库默认情况下不会验证服务器的证书。这就等于信任所有的证书。当试图去连接服务器的时候，应用会很乐意的接收由"hackedserver.com"签发的证书。当应用连接到黑客的邮件服务器时会有泄露用户敏感信息的风险。  
有漏洞的代码：
    ...
    Email email = new SimpleEmail();
    email.setHostName("smtp.servermail.com");
    email.setSmtpPort(465);
    email.setAuthenticator(new DefaultAuthenticator(username, password));
    email.setSSLOnConnect(true);
    email.setFrom("PI:EMAIL");
    email.setSubject("TestMail");
    email.setMsg("This is a test mail ... :-)");
    email.addTo("PI:EMAIL");
    email.send();
    ...
解决方案：  
请添加验证服务器证书的模块
    email.setSSLCheckServerIdentity(true);
引用：  
[CWE-297: Improper Validation of Certificate with Host
Mismatch](https://cwe.mitre.org/data/definitions/297.html)
# AWS查询注入
漏洞特征：AWS_QUERY_INJECTION  
如果SimpleDB数据库查询字符串中包含用户输入的话就会让攻击者查看未授权的记录。  
下面这个例子就是动态的创建查询字符串并且执行SimpleDB的select()查询，这个查询中允许用户指定productCategory。攻击者可以修改查询，绕过customerID的身份验证从而查看所有消费者的记录。  
有漏洞的代码：
    ...
    String customerID = getAuthenticatedCustomerID(customerName, customerCredentials);
    String productCategory = request.getParameter("productCategory");
    ...
    AmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);
    String query = "select * from invoices where productCategory = '"
                + productCategory + "' and customerID = '"
                + customerID + "' order by '"
                + sortColumn + "' asc";
    SelectResult sdbResult = sdbc.select(new SelectRequest(query));
解决方案：  
这个问题类似于sql注入，在进入SimpleDB数据库查询语句的之前要过滤用户的输入  
引用：  
[CWE-943: Improper Neutralization of Special Elements in Data Query
Logic](https://cwe.mitre.org/data/definitions/943.html)
# JavaBeans属性注入
漏洞特征：BEAN_PROPERTY_INJECTION  
攻击者可以设置任意bean的属性，这样会降低系统的完整性。Bean的population函数允许设置bean的属性或者嵌套属性。  
攻击者会影响这个函数从而去访问特殊的bean属性，比如class。类加载器允许他去操控系统属性并且会有潜在的执行任意代码的可能性。  
有漏洞的代码：
    MyBean bean = ...;
    HashMap map = new HashMap();
    Enumeration names = request.getParameterNames();
    while (names.hasMoreElements()) {
        String name = (String) names.nextElement();
        map.put(name, request.getParameterValues(name));
    }
    BeanUtils.populate(bean, map);
解决方案：  
避免使用用户能够控制的数据去设置Bean属性的名称
引用：  
[CWE-15: External Control of System or Configuration
Setting](https://cwe.mitre.org/data/definitions/15.html)
# Struts敏感文件暴露
漏洞特征：STRUTS_FILE_DISCLOSURE  
用户通过输入去访问服务器端的任意路径，这样会允许攻击者下载服务器端的任意文件（包含应用的类文件或者jar文件），或者直接查看在保护目录下的文件。  
攻击者可能会伪造请求去寻找服务器中敏感的文件。例如，请求"[http://example.com/?returnURL=WEB-INF/applicationContext.xml"，服务器就会展示出applicationContext.xml的内容。攻击者就能通过applicationContext.xml精确的定位其他配置文件的位置，并且下载这些配置文件，甚至是类文件或者jar文件。获取到敏感信息之后，攻击者就会进行其他类型的攻击了。](http://example.com/?returnURL=WEB-INF/applicationContext.xml)  
有漏洞的代码：
    ... 
    String returnURL = request.getParameter("returnURL"); 
    Return new ActionForward(returnURL); 
    ...
解决方案：  
避免把用户输入的数据放入路径查询字符串之中。
引用：  
[CWE-552: Files or Directories Accessible to External
Parties](https://cwe.mitre.org/data/definitions/552.html)
# Spring敏感文件暴露
漏洞特征：SPRING_FILE_DISCLOSURE  
用户通过输入去访问服务器端的任意路径，这样会允许攻击者下载服务器端的任意文件（包含应用的类文件或者jar文件），或者直接查看在保护目录下的文件。  
攻击者可能会伪造请求去寻找服务器中敏感的文件。例如，请求"[http://example.com/?returnURL=WEB-INF/applicationContext.xml"，服务器就会展示出applicationContext.xml的内容。攻击者就能通过applicationContext.xml精确的定位其他配置文件的位置，并且下载这些配置文件，甚至是类文件或者jar文件。获取到敏感信息之后，攻击者就会进行其他类型的攻击了。](http://example.com/?returnURL=WEB-INF/applicationContext.xml)  
有漏洞的代码：
    ... 
    String returnURL = request.getParameter("returnURL");
    return new ModelAndView(returnURL); 
    ...
解决方案：  
避免把用户输入的数据放入路径查询字符串之中。
引用：  
[CWE-552: Files or Directories Accessible to External
Parties](https://cwe.mitre.org/data/definitions/552.html)
# RequestDispatcher敏感文件暴露
漏洞特征：REQUESTDISPATCHER_FILE_DISCLOSURE  
用户通过输入去访问服务器端的任意路径，这样会允许攻击者下载服务器端的任意文件（包含应用的类文件或者jar文件），或者直接查看在保护目录下的文件。  
攻击者可能会伪造请求去寻找服务器中敏感的文件。例如，请求[http://example.com/?jspFile=../applicationContext.xml%3F"，服务器就会展示出applicationContext.xml的内容。攻击者就能通过applicationContext.xml精确的定位其他配置文件的位置，并且下载这些配置文件，甚至是类文件或者jar文件。获取到敏感信息之后，攻击者就会进行其他类型的攻击了。](http://example.com/?jspFile=../applicationContext.xml%3F)  
有漏洞的代码：
    ...
    String jspFile = request.getParameter("jspFile");
    request.getRequestDispatcher("/WEB-INF/jsps/" + jspFile + ".jsp").include(request, response);
    ...
解决方案：  
避免把用户输入的数据放入路径查询字符串之中。
引用：  
[CWE-552: Files or Directories Accessible to External
Parties](https://cwe.mitre.org/data/definitions/552.html)
# 格式化字符串操作
漏洞特征：FORMAT_STRING_MANIPULATION  
如果用户输入能够控制格式化字符串参数的话，那么攻击者这个漏洞让应用抛出异常或者泄露信息。  
攻击者可能会改变格式化字符串的参数，比如可以让应用抛出错误。如果错误没有被捕获，那么应用就会崩溃。  
此外，如果敏感信息保留在内存中的话，那么攻击者就会改变格式化字符串去泄露敏感数据。  
下面这个示例代码是让用户指定一个浮点数来展示余额，实际上，用户输入任何东西都会让应用抛出异常从而导致显示失败。甚至，更有害的例子是，如果攻击者输入"2f
%3$s %4$.2"，那么格式化字符串就会变成"The customer: %s %s has the balance %4$.2f %3$s
%4$.2"。这就会导致在输出结果中显示敏感的账户ID。  
有漏洞代码：
    Formatter formatter = new Formatter(Locale.US);
    String format = "The customer: %s %s has the balance %4$." + userInput + "f";
    formatter.format(format, firstName, lastName, accountNo, balance);
解决方案：  
避免让用户输入控制格式化字符串参数  
引用:  
[CWE-134: Use of Externally-Controlled Format
String](http://cwe.mitre.org/data/definitions/134.html)
# http参数被污染
漏洞特征：HTTP_PARAMETER_POLLUTION  
将未验证的用户输入直接拼接到url中，这会让攻击者操控请求参数的值。攻击者可能会操控已存在参数的值，注入新的参数或者利用非变量字典中的参数。http参数污染
(HPP) 攻击包含将已编码的查询字符串分隔符注入其他现有参数。如果应用没有过滤用户输入，那么恶意的用户就可以构造特殊的输入攻击服务器端或者客户端程序。  
在下面的例子中，程序员可能没有考虑到攻击者会给参数lang输入en&user_id=1，这可能会让他的用户id发生改变。  
有漏洞代码：
    String lang = request.getParameter("lang");
    GetMethod get = new GetMethod("http://www.host.com");
    get.setQueryString("lang=" + lang + "&user_id=" + user_id);
    get.execute();
解决方案：  
在使用http参数之前过滤用户输入数据  
引用：  
[CAPEC-460: HTTP Parameter Pollution
(HPP)](https://capec.mitre.org/data/definitions/460.html)
# 通过报错泄露敏感信息
漏洞特征：INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE  
在用户看来敏感信息是非常有价值的（比如密码），或者它可能会对其他平台有用，更多的情况下，会引发非常致命的攻击。如果攻击失败，攻击者就会参考服务器提供的错误信息来做更针对性的攻击。比如，试图利用目录穿越漏洞(CWE-22)可能会显示出应用安装的绝对路径。反过来，这样就可以选择合适数量的".."去跳转到目标文件上。攻击者使用的sql注入(CWE-89)可能在一开始的时候不会成功，但是错误信息可能会展示畸形的查询，这可能会暴露查询逻辑，甚至密码或者包含在数据库中的其他敏感信息  
有漏洞的代码：
    try {
      out = httpResponse.getOutputStream()
    } catch (Exception e) {
      e.printStackTrace(out);
    }
引用:  
[CWE-209: Information Exposure Through an Error
Message](https://cwe.mitre.org/data/definitions/209.html)
# SMTP 头部注入
漏洞特征：SMTP_HEADER_INJECTION  
简单邮件传输协议 (SMTP) 是基于纯文本协议来投递邮件的。就像http，头部字段被new line
所分割。如果用户输入被放置到邮件的头部，那么应用应该删除或者替换掉new line字符串(CR / LF)。你应该使用安全的封装，比如 [Apache
Common Email](https://commons.apache.org/proper/commons-email/userguide.html)
和[Simple Java Mail](http://www.simplejavamail.org/) ，这些库会过滤掉那些会导致头部注入的特殊字符。  
有漏洞代码：
    Message message = new MimeMessage(session);
    message.setFrom(new InternetAddress("PI:EMAIL"));
    message.setRecipients(Message.RecipientType.TO, new InternetAddress[] {new InternetAddress("PI:EMAIL")});
    message.setSubject(usernameDisplay + " has sent you notification"); //Injectable API
    message.setText("Visit your ACME Corp profile for more info.");
    Transport.send(message);
解决方案：  
使用[Apache Common Email](https://commons.apache.org/proper/commons-email/userguide.html) 或[Simple Java Mail](http://www.simplejavamail.org/)
引用：  
[OWASP SMTP
Injection](https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_\(OTG-INPVAL-011))  
[CWE-93: Improper Neutralization of CRLF Sequences ('CRLF
Injection')](https://cwe.mitre.org/data/definitions/93.html)  
[Commons Email: User Guide](https://commons.apache.org/proper/commons-email/userguide.html)  
[Simple Java Mail Website](http://www.simplejavamail.org/)  
[StackExchange InfoSec: What threats come from CRLF in email
generation?](https://security.stackexchange.com/a/54100/24973)