# BetterAuth: Revisiting Web Authentication

## Authors
- Martin Johns, SAP Research
- Sebastian Lekies, SAP Research
- Bastian Braun, University of Passau
- Benjamin Flesch, SAP Research

## Abstract
This paper introduces "BetterAuth," an authentication protocol designed for web applications. Drawing on two decades of web experience, BetterAuth addresses a range of attacks, including network-based attacks, Cross-site Request Forgery (CSRF), and Phishing. The protocol is fully implementable in standard JavaScript, enabling early adoption even with limited browser support.

## Introduction

### 1.1 Motivation
The current state of password-based authentication on the web is problematic. In its default configuration, web authentication often demonstrates severe flaws, such as transmitting passwords in cleartext, allowing untrusted parties to create authenticated requests, and exposing credentials to potentially malicious code. While there have been initial efforts to improve web-based password authentication, these approaches often fail to address all the inherent issues.

Web authentication shares characteristics with security protocols but lacks their rigorous enforcement of message sequence and integrity. This results in vulnerabilities like CSRF. Proposals that approach web authentication from a purely protocol perspective often solve only a subset of the problems, missing issues that arise from the versatile and fragile nature of web interactions.

### 1.2 Contribution & Organization
In this paper, we present BetterAuth, a password-based authentication scheme tailored to meet the web's security requirements and mitigate the flaws of existing methods. Our approach has the following properties:

- **Comprehensive Lifecycle**: Unlike related approaches, BetterAuth covers the full authentication lifecycle, including both the initial authentication and ongoing authentication tracking. This ensures a lightweight, consistent design with robust, end-to-end security guarantees.
- **Secure by Default**: BetterAuth is secure by default. Developers do not need to explicitly enable security properties; all security goals are met due to the inherent properties of the scheme. This transparently addresses many weaknesses of traditional methods, such as password sniffing, session credential theft, session fixation, and CSRF.
- **JavaScript Implementation**: BetterAuth can be implemented entirely in standard JavaScript, allowing web applications to adopt it immediately without waiting for browser vendors to catch up. This enables a transitional phase where only a subset of deployed web browsers natively support the scheme.

**Organization**: The remainder of the paper is structured as follows:
- Section 2: Summarizes the current state of web-based password authentication.
- Section 3: Describes BetterAuth, our improved authentication scheme.
- Section 4: Reports on our practical implementation experiences.
- Section 5: Evaluates the security, performance, and limitations.
- Section 6: Discusses related work.
- Section 7: Concludes the paper.

## 2. The Current State of Web-Based Password Authentication

The basic process of authenticating against web applications has remained largely unchanged since the early days of the web. We will first discuss the bare-bones authentication mechanism used by most web applications, then revisit attacks on web authentication and the countermeasures introduced to mitigate these threats.

### 2.1 Basics of Web Authentication and Authentication Tracking

Web authentication consists of two steps:
1. **Initial Authentication**: The user provides their user ID and password to the server using HTML forms. The browser creates an HTTP request, sending the credentials as GET or POST parameters, typically in cleartext.
2. **Authentication Tracking**: Since HTTP is stateless, application-layer measures like cookies are used to maintain an authenticated state. The server sets a cookie, and subsequent requests include this cookie, signifying the user's authenticated state.

### 2.2 Fixing Web Authentication: A History of Band-Aid Solutions and Additive Design

#### 2.2.1 Network-Based Attacks
Both the user's password and the authentication cookie are communicated in cleartext, making them vulnerable to network-level attacks. SSL/TLS was introduced to provide end-to-end confidentiality and integrity, mitigating these threats. However, SSL Stripping attacks exploit the initial HTTP request to force continued unencrypted communication. The HSTS header combats this by instructing the browser to use HTTPS for a defined period.

#### 2.2.2 Issues Related to Cookie-Based Authentication Tracking
After initial authentication, the cookie value becomes the user's authentication credential. However, HTTP cookies were not designed for security and are susceptible to various attacks, including session hijacking through cookie theft and session fixation. Countermeasures like the HTTPOnly flag and renewing the cookie value upon authorization level changes help mitigate these threats.

### Table 1: Overview of Countermeasures and Their Respective Implementation Levels

| Transport | HTTP Cookie | Application |
|-----------|-------------|-------------|
| SSL/TLS   | HSTS        | HTTPOnly    |
|           |             | Anti CSRF   |
|           |             | Session Fixation |
|           |             | Anti Framing |
|           |             | X-Frame Options |
|           |             | JS-framebuster |

## 3. BetterAuth: An Improved Authentication Scheme

[Detailed description of BetterAuth, including its design principles, architecture, and key features.]

## 4. Practical Implementation Experiences

[Report on the practical implementation of BetterAuth, including challenges, solutions, and real-world examples.]

## 5. Evaluation

[Evaluation of BetterAuth in terms of security, performance, and limitations.]

## 6. Related Work

[Discussion of related work and how BetterAuth compares to other approaches.]

## 7. Conclusion

[Conclusion summarizing the contributions of BetterAuth and potential future work.]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the paper.