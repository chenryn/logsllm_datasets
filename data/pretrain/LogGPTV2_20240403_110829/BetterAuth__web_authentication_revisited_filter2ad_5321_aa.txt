title:BetterAuth: web authentication revisited
author:Martin Johns and
Sebastian Lekies and
Bastian Braun and
Benjamin Flesch
BetterAuth: Web Authentication Revisited∗
Martin Johns
SAP Research
PI:EMAIL
Sebastian Lekies
SAP Research
PI:EMAIL
Bastian Braun
University of Passau
PI:EMAIL
Benjamin Flesch
SAP Research
benjamin.ﬂPI:EMAIL
ABSTRACT
This paper presents ”BetterAuth”, an authentication proto-
col for Web applications. Its design is based on the experi-
ences of two decades with the Web. BetterAuth addresses
existing attacks on Web authentication, ranging from net-
work attacks to Cross-site Request Forgery up to Phish-
ing. Furthermore, the protocol can be realized completely in
standard JavaScript. This allows Web applications an early
adoption, even in a situation with limited browser support.
INTRODUCTION
1.
1.1 Motivation
The current state of password-based authentication on the
Web is a mess. If used in its default conﬁguration without
additional protection measures, today’s Web authentication
almost appears to be an exercise in demonstrating how an
authentication process should not be realized, showcasing
severe ﬂaws, such as, sending the password in cleartext over
the wire, allowing untrusted parties to create arbitrary au-
thenticated requests, or exposing the authentication creden-
tials to potentially malicious code. While there have been
ﬁrst stabs in the direction of improving Web-based password
authentication, previous approaches expose at least one of
the following problems:
Web authentication diﬀers from most other authentica-
tion scenarios: It exposes many characteristics that resemble
properties from security protocols. However, it lacks a se-
curity protocol’s rigorous enforcement of message sequence
and integrity, resulting, for instance, in enabling the inser-
tion of messages in authenticated workﬂows via Cross-site
Request Forgery. Hence, proposals that approach Web au-
thentication purely from a protocol perspective are in danger
of solving only a subset of the problems and missing issues
that result from the versatile and fragile nature of Web in-
teraction.
∗
This work was in parts supported by the EU Projects
STREWS (FP7-318097) and WebSand (FP7-256964).
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
Furthermore, the vast majority of proposed improvements
require fundamental changes both in the browser as well
as in the client/server interaction. Hence, without Web
browser support Web applications cannot beneﬁt from the
potential security beneﬁts. This leads to a chicken/egg prob-
lem, as there is no early adopter path for motivated devel-
opers, which in turn could encourage the browser vendors
to natively implement the mechanism.
In consequence, the basic process of password authentica-
tion on the Web has not signiﬁcantly changed since the day
in which the type="password" attribute was introduced to
HTML.
1.2 Contribution & Organisation
In this paper, we propose BetterAuth, a password-based
authentication scheme that is tailored to ﬁt the Web’s se-
curity requirements and mitigate the ﬂaws of the current
scheme. Our approach has the following properties:
• Unlike related approaches [42, 40, 1, 2, 8, 37], Better-
Auth spans the full authentication lifecycle, consist-
ing of both the initial authentication process and the
ongoing authentication tracking. This allows both a
lightweight, consistent design as well as robust, end-
to-end security guarantees.
• Furthermore, BetterAuth is secure by default. The
developer does not need to enable security properties
explicitly.
Instead, all security goals are met due to
inherent properties of the scheme. In consequence, in
its default state, BetterAuth transparently addresses
many weaknesses of the established approach, includ-
ing password sniﬃng, session credential theft, session
ﬁxation, and cross-site request forgery.
• Finally, even while being suited to be adopted as a
native capability of Web browsers, BetterAuth can be
implemented completely in standard JavaScript. This
enables sites to use the scheme today without having
to wait for the browser vendors to catch up. This po-
tentially enables a viable, transitional phase, in which
only a subset of deployed Web browsers support the
scheme natively.
Organisation: The remainder of the paper is structured
as follows: First, we summarize the current state of Web-
based password authentication, both from the attacker as
well as the developer’s point of view (Sec. 2). Then, we
describe BetterAuth, our improved authentication scheme
169
(Sec. 3) and report on our experiences in practically imple-
menting the protocol (Sec. 4). An evaluation on security,
performance, and limitations is given in Sec. 5. Before we
conclude in Sec. 7, we discus related work (Sec. 6).
2. THE CURRENT STATE OF WEB-BASED
PASSWORD AUTHENTICATION
The basic process of authenticating against Web appli-
cations has not changed signiﬁcantly since the early days
of the Web.
In the following sections, we show how the
current state of Web authentication came to be. First, we
discuss the bare-bones authentication mechanism that is in
use by the vast majority of all existing Web applications (see
Sec. 2.1). Please note, that in this description, we omit all
potential security measures. We simply show how Web au-
thentication would look like, if implemented as is and how
little security is provided by default. Then, in Sections 2.2
and 2.3, we revisit attacks on Web authentication and the
countermeasures which were introduced to mitigate these
threats.
Also, please note, that for the remainder of this paper,
we restrict the discussion to password-based authentication,
and in this respect, even further to the well established prac-
tice of form-based authentication (see Sec. 2.1), as virtually
all professional Web applications utilize this method.
2.1 The Basics of Web Authentication and Au-
thentication Tracking
The Web authentication process consists of two steps:
First, the initial authentication, in which the user provides
his user ID and password to the application’s server-side.
Then, the authenticated state of the user is maintained over
the series of following HTTP request/response pairs. The
next two sections will explore these two processes.
Initial authentication: In form-based authentication,
the user’s ID and password are communicated using HTML
forms. After the user has entered his credentials, he sub-
mits the form. This causes the Web browser to create an
HTTP request, which carries the values in the form of GET
or POST parameters.
In particular, this implies that the
password is sent in clear-text to the server. The server com-
pares the submitted user ID and password with its inter-
nal records. If the password and ID match with one of its
records, the authentication process succeeds and the user’s
session is promoted to an authenticated state.
Authentication tracking: HTTP is a stateless proto-
col. Therefore, there is no protocol-level mechanism to pro-
mote a usage session into an authenticated state, as there
is no inherent session concept. In consequence, application-
layer measures for session and authentication tracking had
to be introduced. The dominant method to maintain an au-
thenticated state over a series of HTTP requests is to use
HTTP cookies for this purpose. An HTTP cookie is a value
that is set by a Web server for the Web server’s domain. The
value is stored by the browser. From this point on, all further
requests that are sent to the server’s domain carry the cookie
value automatically, via the Cookie-header. To implement
authentication tracking, the Web server sends a cookie to
the browser, which signiﬁes the authenticated state of this
client. All further requests which are received by the server
carrying this cookie value are regarded as being authenti-
cated under the user’s identity. Hence, the cookie value is
de facto the user’s authentication credential. Again, as with
the password, this credential is communicated in cleartext.
NB: Instead of setting a new cookie, the server could also
promote an already existing session identiﬁer (SID) cookie
into an authenticated state, thus, making this SID the user’s
credential.
2.2 Fixing Web Authentication: A History of
Band-Aid Solutions and Additive Design
In this section, we brieﬂy revisit documented classes of
Web attacks that target either the initial authentication or
the authentication tracking process. In addition, we discuss
the protective measures that have to be taken by the appli-
cation developer to mitigate the respective threat.
2.2.1 Network-Based Attacks
As already mentioned in Sec. 2.1, both the user’s pass-
word as well as the authenticator cookie are communicated
in cleartext to the server. This opens the communication to
various network-level attacks:
For one, every party that is able to observe the network
traﬃc between the browser and the server can simply sniﬀ
the password or cookie value and abuse these credentials
under the identity of the user. Furthermore, parties with
direct access to the network link can also launch man-in-
the-middle attacks, which allows the dynamic modiﬁcation
of HTTP requests and responses.
To counter these threats, the SSL/TLS protocol was in-
troduced, which provides end-to-end conﬁdentiality and in-
tegrity guarantees on top of TCP, making the sniﬃng of au-
thentication credentials infeasible. Furthermore, SSL/TLS
provides a PKI-based scheme to prove the server’s identity
to the user. This way, attempted man-in-the-middle attacks
can be mitigated (as long as the user does not choose to
ignore the warning dialogues).
SSL Stripping: Most Web applications serve content
both encrypted, via HTTPS, as well as unencrypted, via
HTTP. Unfortunately, if the user does not explicitly specify
the protocol when he accesses a Web page, browsers default
to HTTP. In consequence, in the majority of all cases, the
ﬁrst HTTP request to a server is sent via plain HTTP. This
opens a loophole for a network-based man-in-the-middle at-
tacker – the so-called SSL Stripping attacks [26].For this
ﬁrst request, an end-to-end SSL/TLS connection has not
been established yet. Thus, the attacker can set himself in
between the browser and the server and modify the server’s
responses. This way, even if the server requires HTTPS
for certain operations and tries to redirect the browser ac-
cordingly, the attacker can simply remove these redirection
attempts from the server’s responses, before they reach the
client. The client is forced to indeﬁnitely communicate un-
encrypted.
To combat this problem,
the HSTS HTTP response
header [17] was created. This header tells the browser that
from now on for a deﬁned time period, all communication
with the server shall be conducted using HTTPS. Under the
assumption that the ﬁrst connection to the server has been
done using an attacker-free network path, from that point
on the browser will reliably and exclusively use HTTPS to
communicate with this server. This way, SSL stripping at-
tempts are made impossible.
Further issues with SSL/TLS: The recent past has
shown, that the current state of SSL/TLS is not fully bullet
170
Transport HTTP Cookie App
SSL/TLS
HSTS
HTTPonly
Anti CSRF
Session Fix.
Anti Framing
X
(Xb)
X
(Xa)
Xd
X
(Xc)
X
X
Xe
a: Origin header, b: Origin-Bound Certs (exp.),
c: Origin ﬂag (exp.), d: X-Frame options, e: JS-framebuster
Table 1: Overview of countermeasures and their re-
spective implementation levels
proof. For one, the security of HTTPS-based communica-
tion heavily relies on the security policies and practice of the
Certiﬁcation Authorities (CAs), that issue the root certiﬁ-
cates which are included in Web browsers by default. How-
ever, issues in that domain have been reported repeatedly,
e.g., unlimited RA certiﬁcates have been issued [16] and the
internal systems of several CA’s have been compromised [10,
9]. As the CA system and its security is out of reach of the
application’s developers and operators, the current approach
oﬀers severely limited options to mitigate such threats.
2.2.2
Issues Related to Cookie-Based Authentication
Tracking
As discussed above, after the initial authentication pro-
cess, the cookie value becomes the user’s authentication cre-
dential. However, HTTP cookies have not been designed
with security in mind and were never intended to be used
for this purpose.
Session hijacking through cookie theft: For one,
based on the fact that the existence of the cookie value in
a request suﬃces that the request is recognized to be au-
thenticated, every party that can obtain this value is able to
send arbitrary authenticated requests under the identity of
the user. As, by default, the cookie value is sent in cleartext,
every party with access to the network can sniﬀ the value for
future abuse. While SSL/TLS protects against this threat,
many sites only protect the login page with SSL/TLS and
then revert back to plain HTTP [19], leaving the cookie ex-
posed.
Even in the existence of an uncompromised SSL/TLS con-
nection, the cookie is readable by default through JavaScript
via the document.cookie property. Hence, a simple Cross-
site Scripting (XSS) vulnerability allows to leak the cookie’s
value to the adversary. To counter this threat, browser
vendors introduced the HTTPonly-ﬂag [28], which hides the
cookie value from JavaScript. This ﬂag has to be set explic-
itly by the developer to mark the authentication cookie.
Session Fixation: The HTTPonly-ﬂag only prevents read
access to the cookie value. However, an attacker is still able
to set or overwrite cookie values. Hence, if he is able to
set cookies for an attacked domain in the user’s browser,
he can launch a session ﬁxation attack in which he tricks
the application to reuse a value controlled by the attacker
as the user’s authentication token. Possible scenarios, in
which attackers are able to set cookies for foreign domains
include XSS, HTTP header injection [23], or insecure sub-
domains [22].
While this problem is partially addressed with currently
experimental browser features [6, 2], the only reliable way
for an application to mitigate this attack, is to renew the
cookie’s value each time the authorization level of the user
changes [21].
Cross-site Request Forgery By default, the browser
attaches all cookie values that belong to a given origin to ev-
ery outgoing HTTP request to the corresponding site. How-
ever, due to the hypertext background of the Web, several
HTTP-tags, such as img, script, or iframe, have the in-
herent ability to create cross-domain HTTP requests. Re-
gardless of the actual origin of these elements, the browser