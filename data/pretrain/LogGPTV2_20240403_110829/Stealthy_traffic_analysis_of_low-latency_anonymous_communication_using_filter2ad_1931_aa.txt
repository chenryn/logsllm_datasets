title:Stealthy traffic analysis of low-latency anonymous communication using
throughput fingerprinting
author:Prateek Mittal and
Ahmed Khurshid and
Joshua Juen and
Matthew Caesar and
Nikita Borisov
Stealthy Trafﬁc Analysis of Low-Latency Anonymous
Communication Using Throughput Fingerprinting
Prateek Mittal, Ahmed Khurshid, Joshua Juen, Matthew Caesar, Nikita Borisov
University of Illinois at Urbana-Champaign
{mittal2, khurshi1, juen1, caesar, nikita}@illinois.edu
ABSTRACT
Anonymity systems such as Tor aim to enable users to com-
municate in a manner that is untraceable by adversaries that
control a small number of machines. To provide eﬃcient
service to users, these anonymity systems make full use of
forwarding capacity when sending traﬃc between interme-
diate relays. In this paper, we show that doing this leaks in-
formation about the set of Tor relays in a circuit (path). We
present attacks that, with high conﬁdence and based solely
on throughput information, can (a) reduce the attacker’s un-
certainty about the bottleneck relay of any Tor circuit whose
throughput can be observed, (b) exactly identify the guard
relay(s) of a Tor user when circuit throughput can be ob-
served over multiple connections, and (c) identify whether
two concurrent TCP connections belong to the same Tor
user, breaking unlinkability. Our attacks are stealthy, and
cannot be readily detected by a user or by Tor relays. We
validate our attacks using experiments over the live Tor net-
work. We ﬁnd that the attacker can substantially reduce
the entropy of a bottleneck relay distribution of a Tor cir-
cuit whose throughput can be observed—the entropy gets
reduced by a factor of 2 in the median case.
Such in-
formation leaks from a single Tor circuit can be combined
over multiple connections to exactly identify a user’s guard
relay(s). Finally, we are also able to link two connections
from the same initiator with a crossover error rate of less
than 1.5% in under 5 minutes. Our attacks are also more
accurate and require fewer resources than previous attacks
on Tor.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—
Security and protection
General Terms
Security, Measurement
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
Keywords
Anonymity, attacks, throughput
1.
INTRODUCTION
With the advent of sophisticated monitoring technolo-
gies [2,3] coupled with coordination within governments and
across businesses to exchange and mine information, com-
munication on the Internet is increasingly becoming less pri-
vate. At the same time, advancing use and pervasiveness of
networks have increased the danger of misuse of that infor-
mation, leading to potential invasions of user privacy, and
fear of retribution against whistleblowers, unoﬃcial leaks,
and political activists. To counter this threat, anonymous
communication systems such as Babel [22], Mixmaster [36],
and Mixminion [14] improve anonymity by routing commu-
nication through an overlay network that masks identities of
the endpoints. However, these systems work by introducing
large and variable latencies between the endpoints, mak-
ing them unsuitable for interactive applications. To ﬁll this
need, low-latency anonymous communication services like
AN.ON [9], Onion Routing [47], Freedom [6], I2P [28] and
Tor [16] were developed, which forward packets directly over
low-delay circuits. Tor has achieved great success, servicing
hundreds of thousands of users and carrying terabytes of
traﬃc daily [48], and is currently being used as a crucial ser-
vice by end users, government activists, journalists, as well
as protecting business and military communications [49].
Low-latency anonymous communication networks are more
vulnerable to a global passive adversary than other high-
latency communication designs [12, 13, 36] because timing
attacks can be used to link relayed copies of a communica-
tion stream [46]. Most users, however, are concerned about
less powerful, partial adversaries who can observe (or even
compromise) only a fraction of the network. A typical goal
for low-latency systems is to ensure that an adversary who
observes or controls a fraction f of the network can com-
promise the anonymity of f 2 of the ﬂows. The hope is that
making f large would require a high resource expenditure,
especially as networks grow large (e.g., the Tor network had
more than 2 000 active relays with an aggregate bandwidth
of 4 Gbps as of May 20111).
Further research has demonstrated that it is not, in fact,
necessary to directly observe the network to learn where a
ﬂow is being forwarded. Instead, probes can be used to test
a ﬂow’s presence at a particular location in the network by
creating an observable interference pattern [11,19,38], or by
1http://torstatus.blutmagie.de/
215otherwise correlating characteristics seen in the anonymous
ﬂow with a particular location [25]. In order to fully under-
stand the risks of using a given anonymity network, it is nec-
essary to understand what types of attacks of this class are
possible and what resources are required for a certain prob-
ability of success. Such understanding will let users make
informed security decisions; for example, a “low-resource”
congestion attack on the Tor network originally proposed
by Murdoch and Danezis in 2005 [38] is no longer consid-
ered practical for the current size of the network without
new techniques to improve its scalability [19]. Users may
also ﬁnd comfort in the fact that the state-of-the-art attacks
could be detected by Tor clients and relays, as they require
the insertion of interference patterns or malicious content in
ﬂows.
In contrast, we examine a new collection of stealthy at-
tacks on the Tor network that are based on detailed observa-
tions of the throughput of an anonymous ﬂow. We called our
attacks stealthy because, although they sometimes perform
active measurements, they do so by acting as completely or-
dinary Tor clients, and therefore Tor users and relays cannot
reliably detect that an attack is in progress. We observe that
the throughput of a Tor ﬂow can be used as a ﬁngerprint of
the bottleneck relay (i.e., the relay with minimal forwarding
capacity in the ﬂow path) used to forward it. By observ-
ing the dynamics of the throughput, it is also possible to
identify when two ﬂows share the same set (or subset) of
relays. We note that in contrast to prior work, our attacks
do not require the adversary to insert interference patterns
or other malicious content in ﬂows, and are thus not observ-
able by a user/relay. We also perform a detailed study of
how the throughput of the anonymous ﬂow is inﬂuenced by
scheduling, ﬂow-control, and congestion-control algorithms
at both the transport (i.e., TCP) and application (i.e., Tor)
layer. We use the eﬀects of these algorithms to design a pas-
sive attack that can show whether two ﬂows share the same
circuit and thus originate from the same user. To the best
of our knowledge, this is the ﬁrst study of ﬂow throughput
based attacks on Tor. Overall, our study demonstrates at-
tacks that use threat models and resource requirements that
diﬀer signiﬁcantly from attacks using other ﬂow features. It
also highlights the complexity of designing anonymous com-
munication systems by demonstrating the impact that ar-
chitectural and implementation decisions can have on the
security of the system.
1.1 Overview of Attacks
Information leakage via circuit throughput: We
show that it is possible to exploit heterogeneity of through-
put of Tor relays to learn information about which relays
used to forward a given stream. In particular, two circuits
that share the same bottleneck relay will have highly cor-
related throughput. Thus, by forming one-hop probe cir-
cuits through all of the Tor relays, it is possible to gain
some (probabilistic) information about the bottleneck re-
lay of any Tor stream whose throughput can be observed.
This observation also reveals some information about other
relays forwarding the stream, since their observed one-hop
throughput must be higher than the bottleneck. We per-
formed our attacks on a subset of the live Tor network, and
found that we were able to eﬀectively reduce the entropy of
the bottleneck relay distribution. Using this information,
we were able to uncover the identities of the guard relay (the
ﬁrst relay in the path) over multiple connection attempts.
We note that while learning a user’s relays is not suﬃcient
by itself to compromise the user identity in Tor, our attacks
serve as a stepping stone for completely de-anonymizing the
user; for example, several attacks in the literature rely on a
user’s guard relays being known to the adversary [11,24,25].
We also show that our attacks can also be applied to de-
anonymize location hidden services that act as Tor relays.
Stream linkability attack: We show that throughput
characteristics of two streams that are multiplexed over the
same circuit have a unique characteristic:
throughput of
each stream repeatedly drops to zero during mutually ex-
clusive periods of time, leading to a strong negative corre-
lation. Thus if a client is communicating over Tor with two
servers simultaneously, and if the servers collude, then they
can reliably infer that they are communicating with the same
client. Our experimental results indicate that after roughly
5 minutes of observations the attacker could reliably (with a
crossover error rate of less than 1.5%) identify if the streams
have been multiplexed over a common circuit. This is a sig-
niﬁcant improvement of the latency-based stream linking at-
tack by Hopper et al. [24], which had a crossover error rate
of 17% and required malicious content to be inserted into
web pages.
We have validated all of our attacks using experiments
over the live Tor network. Our source code and analysis
scripts are available at our project webpage [1].
Roadmap. The rest of the paper is organized as fol-
lows. We present an overview of low-latency anonymity
systems and discuss related attacks in Section 2.
In Sec-
tion 3 we show that there is a high degree of heterogeneity
in observed circuit throughput in the Tor network, and that
circuit throughput can be used to reduce the entropy of the
corresponding Tor relays. We also present several statis-
tical disclosure attacks based on information leakage from
circuit throughput to uncover the identities of guard relays
and relays that oﬀer location-hidden services. We present
our passive stream linkability attack in Section 4. Finally,
we discuss the implications of our attacks in Section 5 and
conclude in Section 6.
2. BACKGROUND AND RELATED WORK
We start by discussing work on designing low-latency anony-
mous communication systems. We then describe three key
attacks on these systems: side channel attacks, latency at-
tacks, and long-term attacks.
2.1 Tor Background
Tor [16] is a popular low-latency anonymous communica-
tion system. Deployed in 2003, Tor now serves hundreds of
thousands of users and carries terabytes of traﬃc daily. As
of May 2011, the network comprises more than 2 000 relays.1
Users (clients) download a list of relays from central direc-
tory authorities and build anonymous paths (called circuits)
using onion routing [46]. Tor clients build three-hop circuits
for anonymous communication, where the three relays are
respectively known as guard, middle, and exit relays. The
guard relay is always chosen from a ﬁxed set of three re-
lays that is unique to each client, to prevent certain long
term attacks on anonymous communication [50, 51].In order
to balance the load on the network, clients select Tor relays
in proportion to their bandwidths (subject to certain con-
straints). A Tor client can multiplex individual TCP connec-
216tions (called streams) over a single Tor circuit. The lifetime
of a Tor circuit is generally set to 10 minutes. Finally, in
addition to anonymous communication, Tor also provides
support for location-hidden services; clients can connect to
these services without knowing their network identity. We
refer the interested reader to [16] for a more detailed de-
scription of Tor.
2.2 Tor Security
Traditional security analyses of Tor [16] assume that a user
who controls (or observes) a fraction f of the network can
compromise the anonymity of f 2 of all tunnels by end-to-
end timing analysis (by observing the entry and exit point
of a stream). Note that due to bandwidth-weighted relay
selection, f is best thought of as the fraction of Tor band-
width controlled or observed by an adversary. This sim-
ple model, however, abstracts away many important prop-
erties of the system that aﬀect anonymity; recent research
has shown that, when these properties are properly con-
sidered, the potential for anonymity compromise is signiﬁ-
cantly greater than predicted by the model. Some examples
of such properties include the reliability of relays [10], the
skew of the internal system clocks [37] and the topology of
the underlying Internet paths used to forward traﬃc between
relays [17, 20, 39]. A particular class of attacks uses side-
channel information to determine whether an anonymous
ﬂow is forwarded by a particular Tor relay [7, 11, 19, 24, 38];
this eﬀectively increases the fraction of the network that is
observed (f ) with a moderate resource expenditure. As our
attacks fall into the same class, we next discuss these attacks
in detail.
2.3 Circuit Clogging Attacks
Murdoch and Danezis [38] proposed an attack on the Tor
network where an adversary aims to identify the Tor relays
of a circuit by modulating the sending rate of traﬃc through
a circuit, and studying the eﬀect of the modulations on the
latency characteristics (queueing delay) of individual Tor re-
lays. A high correlation between the two indicates that the
Tor relay is likely part of the original circuit. The attacks
were tested in 2005, when the Tor network comprised only
a handful of relays. Since 2005, the Tor network has grown
in size by two orders of magnitude and Evans et al. [19] re-
cently showed that the Murdoch–Danezis attack no longer
works on the Tor network.
Evans et al. [19] proposed a variant of the Murdoch–
Danezis attack where an adversary sets up a very long path
through the Tor network, consisting of loops, such that the
additional traﬃc introduced by an adversary gets ampliﬁed
(in order to eﬀectively congest a relay). There exist sim-
ple countermeasures to such an ampliﬁcation attack, like
imposing a bound on the maximum circuit length in Tor.
Houmansadr and Borisov [26] also show that attempts to cir-
cumvent the bound by having the ﬂow exit the Tor network
and then re-enter it (by the means of forwarding proxies)
can be mitigated using watermarking schemes. Note that
without the ability to amplify traﬃc, signiﬁcant resources
are required in order to congest a relay.
Chakravarty et al. [11] proposed another variant of the
Murdoch–Danezis attack in which an attacker modulates
traﬃc rates of a circuit, and uses estimation tools to observe
changes in forwarding capacity of Tor relays. In theory, their
approach also allows the identiﬁcation of Internet links used
to carry an anonymous ﬂow, with the potential to identify
the identity of the Tor client. The attack, however, requires
an extensive infrastructure of vantage points and maps of
Internet topologies to be fully eﬀective. Furthermore, the
experimental evaluation of the attack showed only moder-
ate success rates even under controlled settings; we expect
this is because modulation of circuit rates does not have any
impact on the forwarding capacity of nodes/links that are
already operating at full capacity (such as some Tor relays).
Note that all of these attacks rely on coarse-grained eﬀects
of active modulation of circuit traﬃc. One mitigation for
this attack approach is to reduce or eliminate the ability of
two circuits to interfere with each other’s performance by
altering the packet scheduling algorithms used by Tor [33].
2.4 Latency Observations
Hopper et al. [24,25] studied information leaks in Tor that
arise due to heterogeneous network latency. By measuring
the round-trip times through a Tor circuit (using malicious
JavaScript content inserted into web pages), it is possible
to compute the likelihood of it following a particular path
through the Tor network and eliminate some paths from con-
sideration entirely. Additionally, it may be possible to learn
information about the approximate geographic location of
the client. Some of our attack scenarios are similar in spirit,
but our attacks focus on throughput, rather than latency;
in the stream linkability attack, we ﬁnd that this results in
signiﬁcantly better accuracy.
A major limitation of circuit-clogging and latency attacks
is that they are not stealthy; the traﬃc modulations and ma-
licious content insertions can easily be detected by clients/Tor
relays. In contrast, our attacks use ﬁner-grained information
about circuit throughput that can be obtained by a simple
download through Tor, without actively modulating circuit
traﬃc. Thus, our attacks are stealthy and cannot be de-
tected by Tor relays and clients. Our techniques also enlarge
the scope of possible threat models under which an attacker
can perform traﬃc analysis. For example, prior attacks are
only applicable to the scenarios where either the destination
web server or the exit relay is compromised.
In contrast,
our attacks can be carried out by ISPs or other local traﬃc
observers. Finally, the ﬁner-grained information also allows
us to achieve better accuracy while using fewer resources.
2.5 Long-Term Anonymity
If multiple communication rounds can be linked (e.g., if
a user logs in frequently with a given pseudonym), the ano-
nymity guarantees provided will degrade over time. For ex-
ample, using the f 2 probability of circuit compromise, over
a number of path reformulations, the chance that at least
one tunnel will be observed at both the entry and exit ap-
proaches one [50, 51].This observation, along with attacks
that can force reformulations to occur [4, 10, 40], motivates
the use of guard relays in Tor, where each client uses a small
ﬁxed set of entry points into the network.
A similar degradation can be observed in mix-based sys-
tems, where observations of the set of active users [8, 43] or
senders and recipients [30] at each communication round al-
lows the use of intersection attacks to narrow down the set
of potentially communicating parties. A statistical version
of this attack (statistical disclosure attack ) was proposed by
Danezis [13]. Similarly, information learned by observing the
217)
s
p
B
K
(
t
u
p
h
g
u
o
r
h
t
/
y
t
i
c
a
p
a
c
d
e
v
r
e
s
b
O
 100000
 10000
 1000
 100
 10
 1
 0
Observed capacity
Throughput
 500
 1000
 1500
 2000
Tor relays (sorted by observed capacity/throughput)
Figure 1: Observed capacity/throughput hetero-
geneity in the Tor network.
throughput of circuits can be used for a statistical disclosure
attack, as we discuss in Section 3.
3.
INFORMATION LEAKAGE VIA
CIRCUIT THROUGHPUT
We next describe attacks on Tor that determine path in-
formation about a pair of circuits by correlating their ob-
served throughput. We ﬁrst motivate our approach by not-
ing that the capacities of Tor relays are quite heterogeneous
(Section 3.1). We then present an attack to determine if
two circuits share a common sub-path (Section 3.2), and an
attack to narrow in on which relays a given circuit traverses
(Section 3.3). We combine these probabilistic observations
over multiple circuit reformulations to de-anonymize guard
relays (Section 3.4). Finally, we show the applicability of
our attack on interactive traﬃc (Section 3.6).
3.1 Heterogeneity in the Tor Network
One fundamental observation used in our attacks is that
the Tor network is composed of relays that have heteroge-
neous capacities. Figure 1 plots the advertised capacities of
2 104 Tor relays, collected from the Tor directory service.
These capacity values are estimates based on the minimum
of the maximum input or output bandwidth sustained over
any ten second period at a particular Tor relay. This value
is re-evaluated each day by every Tor relay and reported to
the directory service. This information can be fetched using
the getinfo desc/all-recent command. By analyzing these
capacity values we can see that there is a signiﬁcant degree
of heterogeneity in the capacities of the Tor relays.
From Figure 1, we can see that around 38.6% of these Tor
relays have capacity (plotted on a log scale) below 100 KBps.
This increases the probability of the Tor network being the
bottleneck for most of the ﬂows passing through Tor and
makes it vulnerable to our attacks.
In order to balance the load on the network, Tor clients
select relays in proportion to their capacities. Let Ci de-
note the capacity of relay i.
If there are X circuits be-
ing constructed in the network, then the expected number
of circuits that choose any particular relay i is given by
Xi = 3 · X Ci
(there is a factor of 3 because the Tor path
Σi Ci
consists of 3 relays). The capacity of relay i should be dis-
tributed evenly amongst circuits that traverse it, given by
Ci
3·X . Thus we can see that in an ideal scenario, the
Xi
throughput received by all circuits should be homogeneous.2
2This is a slight simpliﬁcation; some relays cannot be in the
= Σi Ci
Unfortunately, this is not the situation in the current Tor
network.
In spite of load balancing, there exists a large
range of throughput that individual relays can sustain, as
shown in Figure 1. To measure this, we individually probed
the throughput of each available Tor relay using a 3-hop
circuit with our own guard and exit relay. We used the
stable version of Tor (Version 0.2.1.26, as of November 2010)
to do the probing. We used two custom-built TCP client and
server programs (details of these programs are presented in
Section 3.2) to set up a ﬂow through the relay being probed
(using it as the middle relay). We ran both the client and
the server programs at the same machine where the server
sent data to the client as fast as possible (only limited by
TCP’s congestion control mechanism). We measured the
throughput of the ﬂow as observed by the client. Each relay
was probed for 15 seconds, and we computed the average
observed throughput over the last 10 seconds to avoid TCP’s
slow-start eﬀect. As we probed each relay one by one, the
entire experiment took about 18 hours to complete. Note
that we chose a high capacity vantage point to perform this
experiment so that it did not become the bottleneck. We
were able to probe 2 104 out of 2 429 relays listed in the Tor
network consensus on July 24, 2011. The remaining 325
relays did not respond to our circuit setup requests as they
may have been oﬄine when they were probed during our