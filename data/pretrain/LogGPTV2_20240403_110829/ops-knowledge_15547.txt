**User:** I recently downloaded and manually installed a new version of Python on my Ubuntu 12.04 system, not realizing that Ubuntu already comes with Python pre-installed. This action seems to have caused issues, as one of the modules I need is no longer functioning. Is there a way to revert back to the original installation?

**Assistant:**

It's generally not recommended to build and install software from source (using `./configure`, `make`, and `make install`) on systems that use a package manager, as this can lead to conflicts and unexpected issues.

To undo the changes you made, you can try the following steps:

1. **Uninstall the Manually Installed Python:**
   - Navigate to the directory where you built Python and ran `make install`. This is typically the directory where the `Makefile` is located.
   - Run the command `sudo make uninstall` to remove the manually installed Python.

2. **Reinstall the Original Python:**
   - To ensure you have the original version of Python, you can reinstall it using the package manager. Run the following commands:
     ```sh
     sudo apt-get update
     sudo apt-get install --reinstall python
     ```

3. **Verify the Installation:**
   - After reinstallation, verify that the correct version of Python is being used by running:
     ```sh
     python --version
     ```
   - Additionally, check if the required module is now working correctly.

4. **Managing Multiple Python Versions:**
   - If you need to use a different version of Python alongside the system version, consider using a tool like `update-alternatives` to manage multiple versions. For example:
     ```sh
     sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
     sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2
     sudo update-alternatives --config python
     ```
   - This will allow you to switch between different Python versions easily.

By following these steps, you should be able to revert to the original Python installation and resolve the issues with the module.