J. W., Kleinjung, T., and Wachter, C. Public
keys. In Advances in Cryptology – CRYPTO 2012
(Aug. 2012), R. Safavi-Naini and R. Canetti, Eds.,
vol. 7417 of Lecture Notes in Computer Science,
Springer, pp. 626–642.
[16] Nguyen, P. Q., and Shparlinski, I. The insecurity
of the digital signature algorithm with partially known
nonces. Journal of Cryptology 15, 3 (2002), 151–176.
[17] Nisan, N., and Zuckerman, D. Randomness is
linear in space. J. Comput. Syst. Sci. 52, 1 (1996),
43–52.
[18] Sahai, A., and Vadhan, S. P. A complete problem
for statistical zero knowledge. J. ACM 50, 2 (2003),
196–249.
[19] Shoup, V. A computational introduction to number
theory and algebra. Cambridge University Press, 2006.
APPENDIX
A. PROOFS FOR STANDARD-MODEL PRNG
A.1 Proof of Theorem 2
We will refer to the attacker’s queries to either the get-next
or next-ror oracle in the robustness game as “next queries”.
We assume that the attacker makes exactly qR of them. We
say that a next query is uncompromised if corrupt = false
during the query, and we say it is compromised otherwise.
Without loss of generality, we will assume that all compro-
mised next queries that the attacker makes are to get-next
and not next-ror (since next-ror does not do/output anything
when corrupt = true).
We partition the uncompromised next queries into two
subcategories: preserving and recovering. We say that an
uncompromised next query is preserving if the corrupt ﬂag
remained set to false throughout the entire period between
the previous next query (if there is one) and the current
one. Otherwise, we say that an uncompromised next query
is recovering. With any recovering next query, we can as-
sociate a corresponding most recent entropy drain (mRED)
query which is the most recent query to either get-state,
set-state, get-next that precedes the current next query. An
mRED query must set the cumulative entropy estimate to
c = 0. Moreover, with any recovering next query, we asso-
ciate a corresponding sequence of recovering samples ¯I =
(Ij, . . . , Ij+d−1) which are output by all the calls to the
D-refresh oracle that precede the recovering next query, but
follow the associated mRED query.
It is easy to see that
any such sequence of recovering samples ¯I must satisfy the
γi ≥ γ∗ where the ith call to
D-refresh oracle outputs (Ii, γi, zi).
entropy requirements(cid:80)j+d−1
i=j
We deﬁne several hybrid games. Let Game 0 be the real-
or-random security game as deﬁned in Figure 2. Let Game
i be a modiﬁcation of this game where, for the ﬁrst i next
queries, if the query is uncompromised, then the challenger
always chooses (S, R) ← {0, 1}(cid:96)+n uniformly at random dur-
ing the query rather than using the next() function. As an
intermediate, we also deﬁne a hybrid Game (i + 1
2 ), which
lies between Game i and Game (i + 1). In particular, in
Game (i + 1
2 ), if the (i + 1)st next query is preserving than
the challenger acts as in Game(i + 1) and chooses a ran-
dom S, R, and otherwise it acts as in Game i and follows
the original oracle speciﬁcation. In all of these games, the
output of the game is the output of the ﬁnalize oracle at the
end, which is 1 if the attacker correctly guesses the challenge
bit, and 0 otherwise.
We claim that for all i ∈ {0, . . . , qR − 1}, Game i is in-
2 ), that in turn is indistin-
distinguishable from Game (i + 1
guishable from Game (i + 1)10.
1
Claim 1. Assuming that the PRNG has (t, εp)-preserving
security, then for any attacker/distinguisher A,D running
in time t(cid:48) ≈ t, we have | Pr[(Game i) = 1] − Pr[(Game i +
2 ) = 1]| ≤ εp.
Claim 2. If the PRNG is (t, qD, γ∗, εr)-recovering secure,
then for any attacker/distinguisher A,D running in time
t(cid:48) ≈ t, we have | Pr[(Game i + 1
2 ) = 1]− Pr[(Game i + 1) =
1]| ≤ εr.
Combining the above two claims, and using the hybrid
argument, we get:
| Pr[(Game 0) = 1] − Pr[(Game qR) = 1]| ≤ qR(εr + εp).
Moreover Game qR is completely independent of the chal-
lenger bit b. In particular, all next-ror queries return a ran-
dom R $← {0, 1}(cid:96) independent of the challenge bit b. There-
fore, we have Pr[(Game qR) = 1] = 1
2 . Combining with the
above, we see that the attacker’s advantage in the original
robustness game is(cid:12)(cid:12)Pr[(Game 0) = 1] − 1
(cid:12)(cid:12) ≤ qR(εr + εp).
2
A.2 Proof of Theorem 4
We show that G satisﬁes (t(cid:48), qD, γ∗, (εprg+q2Dεext)-recovering
security and (t(cid:48), (εprg + 2−n+1))-preserving security. Theo-
rem 4 then follows directly from Theorem 2.
10The proofs of these two claims are simple and we defer to
them to the full version.
657Claim 3. The PRNG G has (t(cid:48), εprg + 2−n+1)-preserving
security
Proof. Let Game 0 be the original preserving security game:
the game outputs a bit which is set to 1 iﬀ the attacker
guesses the challenge bit b∗ = b.
If the initial state is
$← {0, 1}n, the seed is seed = (X, X(cid:48)), and the adversar-
S0
ial samples are Id−1, . . . , I0 (indexed in reverse order where
Id−1 is the earliest sample) then the refreshed state that in-
j=0 Ij·X j.
As long as X (cid:54)= 0, the value Sd is uniformly random (over
the choice of S0). We consider a modiﬁed Game 1, where
the challenger simply chooses Sd
corporates these samples will be Sd := S0·X d +(cid:80)d−1
$← {0, 1}n and we have
| Pr[(Game 0) = 1] − Pr[(Game 1) = 1]| ≤ 2
−n.
Let U = [Sd · X(cid:48)]m
1 be the value computed by the challenger
during the computation (S, R) ← next(Sd) when the chal-
lenge bit is b = 0. Then, as long as X(cid:48) (cid:54)= 0, the value U is
uniformly random (over the choice Sd). Therefore, we can
deﬁne Game 2 where the challenger choose U $← {0, 1}n
during this computation and we have:
| Pr[(Game 1) = 1] − Pr[(Game 2) = 1]| ≤ 2
−n.
Finally (S, R) = next(Sd, seed) = G(U ). Then (S, R) is
(t, εprg) indistinguishable from uniform. Therefore we can
consider a modiﬁed Game 3 where the challenger just choos-
ing (S, R) at random even when the challenge bit is b = 0.
Since the attacker runs in time t(cid:48) ≈ t, we have:
| Pr[(Game 3) = 1] − Pr[(Game 2) = 1]| ≤ εprg.
2| ≤ εprg + 2−n+1.
2 and therefore | Pr[(Game 0) =
Since Game 3 is independent of the challenge bit b, we
have Pr[(Game 3) = 1] = 1
1] − 1
Claim 4. The PRNG G has (t(cid:48), qD, γ∗, (εprg + q2Dεext))-
recovering security.
Proof. Let Game 0 be the original recovering security game:
the game outputs a bit which is set to 1 iﬀ the attacker
guesses the challenge bit b∗ = b. We deﬁne Game 1 where,
during the challenger’s computation of (S∗, R) ← next(Sd)
for the challenge bit b = 0, it chooses U $← {0, 1}m uniformly
at random rather than setting U := [X(cid:48) · Sd]m
1 . We argue
that
| Pr[(Game 0) = 1] − Pr[(Game 1) = 1]| ≤ q2Dεext.
The loss of q2D comes from the fact that the attacker can
choose the index k and the value d adaptively depending on
the seed. In particular, assume that the above does not hold.
Then there must exist some values k∗, d∗ ∈ [qD] such that
the above distance is greater than εext conditioned on the
attacker making exactly k∗ calls to get-refresh and choosing
d∗ refreshes in the game. We show that this leads to a
contradiction. Fix the distribution on the subset of samples
¯I = (Ik∗+1, . . . , Ik+d∗ ) output by D during the ﬁrst step of
the game, which must satisfy
U := [X
(cid:48) · Sd]m
1 = [X
(cid:48) · S0X d]m
1 + hX,X(cid:48) ( ¯I)
H∞( ¯I | γ1, . . . , γqD , z1, . . . , zqD ) ≥ γ
∗
.
By Lemma 3, the function hX,X(cid:48) ( ¯I) is a (γ∗, εext)-extractor,
meaning that (X, X(cid:48), hX,X(cid:48) ( ¯I)) is εext-close to (X, X(cid:48), Z)
where Z is random an independent of X, X(cid:48). Then, for any
ﬁxed choice of k∗, d∗, the way we compute U in Game 0:
is εexst close to a uniformly random U as chosen in Game
1. This leads to a contradiction, showing that the equation
holds.
Finally, we deﬁne Game 2 where, during the challenger’s
computation of (S∗, R) ← next(Sd) for the challenge bit
b = 0, it chooses (S∗, R) uniformly at random instead of
(S∗, R) ← G(U ) as in Game 1. Since the attacker runs in
time t(cid:48) ≈ t, we have:
| Pr[(Game 2) = 1] − Pr[(Game 1) = 1]| ≤ εprg.
2| ≤ εprg.
2 and therefore | Pr[(Game 0) =
Since Game 2 is independent of the challenge bit b, we
have Pr[(Game 2) = 1] = 1
1] − 1
B. DISTRIBUTIONS USED FOR ATTACKS
B.1 Distributions Used in Attacks Based on
the Entropy Estimator
1
2, W i
, W i
1 = 212, W i
3]) $← D0(i), where W 0
2 = W i
Lemma 6. There exists a stateful distribution D0 such that
H∞(D0) = 0, whose estimated entropy by LINUX is high.
Proof. Let us deﬁne the 32-bits word distribution D0. On
input a state i, D0 updates its state to i + 1 and outputs a
triple (i + 1, [W i
1, W i
1 =
(cid:98)cos(i).220(cid:99) + W i−1
3 = 0. For each state, D0
outputs a 12-bytes input containing 0 bit of random data,
we have H∞(D0) = 0 conditioned on the previous and the
future outputs (i.e. D0 is legitimate only with γi = 0 for all
i). Then ∆i > 212 and Hi = 11.
Lemma 7. There exists a stateful distribution D1 such that
H∞(D1) = 64, whose estimated entropy by LINUX is null.
Proof. Let us deﬁne the 32-bits word distribution D1. On
input a state i, D1 updates its state to i + 1 and outputs a
$←
triple: (i + 1, [W i
$← U32. For each state, D1 outputs a 12-bytes
U32 and W3
input containing 8 bytes of random data, we have H∞(D1) =
64 conditioned on the previous and the future outputs (i.e.
D1 is legitimate with γi = 64 for all i). Then δi = 1, δ2
i = 0,
δ2
i−1 = 0, δ3
B.2 Distribution Used in Attack Based on the
3]) $← D1(i), where Wi = i, W2
i = 0, ∆i = 0 and Hi = 0.
1, W i
2, W i
Mixing Function
Lemma 8. There exists a stateful distribution D2 such that
H∞(D2) = 1, for which H∞(S) = 1 after t refresh, for
arbitrary high t.
Proof. Let us deﬁne the byte distributions Bi,b and Bi,$:
Bi,b = {(0,··· , b,··· , 0), bi ← b, bj = 0 if i (cid:54)= j}
Bi,$ = {(b0,··· , b7), bi
$← {0, 1}, bj = 0 if i (cid:54)= j}
Let us deﬁne the 12 bytes distribution D2. On input a state
i, D2 updates its state to i + 1 and outputs 12 bytes:
4 ← B7,$,
0, . . . , Bi
(i + 1, [Bi
5 ← B3,b, B10i+2
B10i
← B1,b, B10i+8
B10i+6
11]) $← D2(i), where B10i
← B5,b,
10 ← B0,b, with b = Bi
← B2,b, B10i+4
For each state i, D2 outputs a 12-bytes input containing 1
bit of random data (for i = 0 mod 10) or 0 bit of random
data (for i (cid:54)= 0 mod 10). If d = 0, k = 127 and S is known,
and noting St = refresh(S, refresh(St−1, [Bt−1
11 ])),
St = St
127, then St contains 1 random bit in word
St
127, at position 10, for all t.
, . . . , Bt−1
0, . . . , St
4,7
0
4
7
6
658