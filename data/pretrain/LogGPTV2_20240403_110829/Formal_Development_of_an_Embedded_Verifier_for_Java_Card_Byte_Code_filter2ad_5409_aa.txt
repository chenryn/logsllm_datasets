title:Formal Development of an Embedded Verifier for Java Card Byte Code
author:Ludovic Casset and
Lilian Burdy and
Antoine Requet
Formal Development of an Embedded Verifier for Java Card Byte 
Code 
Ludovic  Casset 
Lilian Burdy 
Gemplus  Research 
lilian. 
PI:EMAIL 
Labs 
Antoine Requet 
Gemplus Research Labs 
antoine. 
requet@gemplus.
com 
Gemplus Research Labs 
com 
casset@gemplus.
ludovic. 
Abstract 
with their specifications. 
of these 
by security 
policy is implemented 
as the Java Virtual Machine (JVM), 
The Java security 
components  such 
the API, the verifier, the loader. It is of prime im­
portance to ensure that the implementation 
components is in accordance 
Formal methods can be used to bring the mathemati­
cal proof that the implementation 
of these components 
In this paper, a for­
corresponds to their specification. 
mal development 
is performed on the Java Card byte 
code verifier using the B method. The whole Java Card 
language is taken into account in order to provide real­
istic metrics on formal development. 
and the tricky points of the development 
This formalization 
leads to an embeddable 
tion of the byte code verifier thanks to automatic code 
translation 
into C code. 
, We present the formal models, discuss the integration 
into the card and the results of such an experiment. 
from formal implementation 
implementa­
are presented. 
The architecture 
1.  Introduction 
or applications). 
data and applications, 
Smart cards have always had the reputation 
for be­
of smart cards comes from their 
is gathered in one single block: 
ing secured items of information system. These cards 
lock and protect their secret  (data 
: The invulnerability 
Everything 
conception. 
memory, CPU, communication, 
everything holds in 25 square millimeters. 
. cards allows to download new applications 
'its issuance. As there is no reason to believe that the 
downloaded code was developed 
'ogy that guarantees 
provide assurance 
of these applications 
will not threaten smart card integrity 
ity. The Java security 
ior of a program and the properties 
following 
its innocuousness, 
to the customer that the executions 
are safe. That is, their execution 
and confidential­
policy defines the correct behav 
that this program 
Open smart 
on card after 
it is necessary 
a methodol 
to 
to forge an 
as Java is a type-safe 
must hold. For example, it is not possible 
integer into an object  reference 
language. A key point of this security policy is the 
byte code verifier. The aim of a byte code verifier is 
to statically 
check that the flow control and the data 
flow do not generate an error. Moreover, in order to 
perform these checks, one has to ensure the syntactical 
correctness 
of a file sent to the verifier for verification. 
In this article, 
we describe 
a prototype 
of a formally 
to implement a lightweight 
developed and embedded byte code verifier for Java 
Card, a subset of the Java language adapted for smart 
card. This verifier relies on the Proof-Carrying 
Code 
byte code type 
techniques 
verifier. We then show that it is realistic 
to embed 
a byte code verifier into a smart card and that code 
developed using 
such as the B method [1] can fit the smart card con­
This paper presents the results of one case 
straints. 
study of the Matisse1  project. 
This project aims to 
propose methodologies, 
formal methods in industrial 
tools and techniques 
formal techniques 
concerns. 
for using 
and methodologies 
The remainder of this paper is organized 
Section 2 focuses on byte code verification 
and the Java Card context. Then section 3 emphases 
the model of the byte code verifier. Integration 
of 
formal development 
is dis­
cussed in section 4. Section 5 collects 
about the development 
and informal development 
and section 6 concludes. 
some metrics 
as follow. 
principles 
2. Byte code verification 
The byte code verification 
aims to enforce static con­
on downloaded byte code. Those constraints 
straints 
ensure that the byte code can be safely executed by the 
virtual  machine, 
se­
The byte code verification 
curity mechanisms. 
mally described 
of the downloaded applet ensuring that it conforms to 
in [8). It consists 
and cannot bypass the higher-level 
in a static analysis 
is infor­
1 European 1ST Project MATISSE number 1ST -1999·11435. 
0-7695-1597
-5/02 $17.00 «:12002 IEEE 
51 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:52 UTC from IEEE Xplore.  Restrictions apply. 
the Java Card semantics. For instance, 
that there are no stack overflow or underflow, that each 
argument is of the correct type and that 
instruction 
methods calls are performed in accordance 
with their 
visibility 
(public, protected, etc.). 
attributes 
it is checked 
This analysis 
is separated in two parts: a structural 
a type verification. 
verification,  and 
The next subsec­
tions will describe more in details the properties 
sured by those verifications. 
en­
2.1. The structural 
verification 
The structural verification 
consists 
in ensuring that 
the downloaded file is a valid file. That is, it really de­
scribes java classes and byte code, and the information 
it contains is consistent. 
the structures 
required parts exist. 
loaded file cannot be misinterpreted 
the virtual machine. 
For example, it checks that all 
size and that the 
Those tests ensure that the down­
have the appropriate 
by the verifier or 
. 
. Apart from the purely structural 
tests checking the 
binary format, other tests more related to the content 
of the file are performed. 
Those tests ensure that there 
are no cycles in the inheritance 
final methods are overridden. 
hierarchy, 
or that no 
A CAP file consists 
of several components that con­
tains specific information 
For instance, 
code of the methods, 
tion on classes such as references 
or declared method. 
from the Java Card package. 
the Method component contains the byte 
component informa­
to their super classes 
and the Class 
Therefore in the Java Card case, we distinguish 
in­
to 
from external structural 
correspond 
The internal 
verifications 
they consist in checking that 
that can be performed on a compo­
ternal structural verifications 
verifications. 
the verifications 
nent basis. For instance, 
the super classes occur first in the class component. 
The external verifications 
ing the consistency 
packages. For example, one of those tests consists in 
checking that the methods declared in the Class com­
ponent correspond 
methods in the Method 
component. 
between components or external 
correspond to tests ensur­
to existing 
2.2. The type verification 
This verification 
is performed on a method basis, 
and has to be done for each method present in the 
package. 
The type checking part ensures that no disallowed 
struction, 
be of compatible types. 
and arguments provided to methods have to 
As the type of the local variables is not explicitly 
the type 
stored in the byte code, it is needed to retrieve 
of those variables 
part of the verification 
and is both time and memory expensive. It requires 
computing the type of each variable and stack element 
for each instruction 
by analyzing the byte code. This 
is the most complicated 
one, 
and each execution path. 
In order to make such verification 
possible the veri· 
On the programs that are 
fication is quite conservative 
accepted. Only programs where the type of each ele· 
ment in the stack and local variable 
is the same what­
ever  path 
has been taken to reach an instruction 
are 
accepted. This also requires that the size of the stack 
is the same for each instruction 
reach this instruction. 
for each path that can 
2.3. Adaptation 
to embedded devices 
Performing the full byte code verification 
requires 
large amount of computing power and m emory. So 
different systems have been proposed to allow verifi­
cation to be performed on highly constrained 
such as smart cards. Those systems rely on an exter­
of the applet to verify. As the type 
nal pre-treatment 
is the most resource consuming part of the 
verification 
verification, they aim to simplify the verification 
algo­
rithm. 
devices 
Two approaches are usually used: Byte code nor­
and proof carrying code (PCC) or similar 
malisation 
techniques. The next subsection 
niques. The proof carrying code technique will be dis· 
cussed more in details, 
since this is the approach that 
has been developed. 
introduces 
those tech­
Byte code nor­
2.3.1. Byte code normalization. 
malization is the approach used by Tr usted-Logic's 
smart card verifier (7]. It consists in normalizing the 
verified  applet 
so that it is simpler to verify. More ex­
actly, the applet is modified so that each variable has 
one and only one type, and that the stack is empty at 
This greatly reduces the memory 
branch destinations. 
since the verifier does not have to keep 
requirements, 
typing information 
but only for 
each variable in the verified method.· The computing 
are also reduced, since only a simplified 
requirements 
has to be performed. However, 
fixpoint computation 
as the code is modified, its size and m em ory require­
ments can  theoretically  increase. 
for each instruction, 
type conversions 
ger cannot be converted 
casting can only be performed using the checkcast 
into an object reference, 
down­
in-
For example, an inte­
are performed. 
2.3.2. Lightweight byte code verification. In­
troduced by Necula and Lee [11], 
code 
in adding a proof of the program safety to the 
consists 
proof-carrying 
52 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:52 UTC from IEEE Xplore.  Restrictions apply. 
program. This proof can be generated by the code pro­
ducer, and the code is transmitted 
proof. The code receiver 
can then verify the proof in 
order to ensure the program safety. As checking the 
proof is simpler than generating it, the verification 
pro­
cess can be performed by a constrained device. 
along with its safety 
tion [3]. A similar work has been performed by  Bertot 
[2J using the Coq theorem Drover. He proves the  cor­
rectness 
implementation using the Coq extraction mechanism. 
However, we seem to be the first to propose to embed a 
formally developed byte code verifier into a smart card. 
of the verification algorithm and generates an 
An adaptation 
of this technique to Java has been 
in additional 
to the content of lo­
corresponding 
proposed by Rose [17] and is now used by Sun's KVM 
[9]. In this context, the "proof' consists 
type information 
cal variables and stack element for the branch targets. 
Compared to byte code normalization, 
ification 
from the byte code, and needs temporary storage in 
EEPROM memory for storing the type information. 
However, lightweight verification  performs 
the verifica­
tion as  a linear pass throughout the code, and leaves 
the code unmodified. 
ver­
removing the jsr and ret instructions 
lightweight 
requires 
2.4. Formal studies on byte code verification 
3. Modeling a byte code verifier in B 
In this section, 
The type verifier's 
the model 'of the byte code verifier is 
It is developed in two parts: The first one 
the second one the struc­
development is made 
provided by the 
described. 
concerns the type verifier and 
tural verifier. 
simpler as  it relies on many services 
structural verifier and expressed  throljgh 
This latter verifier deals mare with data representation 
and low level services 
provided by the card. In fact it 
relies on basic blocks such as the memory management, 
and file representation within the smart card. 
an interface. 
3.1. The Type Verifier Model 
Most of those studies focus on the type verification 
part of the algorithms. 
One of the most complete for­
m al models of the Java virtual machine is given by 
a large subset of the byte code 
Qian [15J. He considers 
and aims at proving the runtime correctness 
from its 
static typing. Then, he proposes the proof of a verifier 
that can be deducted from the virtual machine specifi­
cation. In a more recent work [5] the authors also pro­
of almost all as pects of 
pose  a correct implementation 
the Java byte code verifier. 
They  view the verification 
problem  as a data flow an alysis, and aims to formally 
describe the specification to extract the corresponding 
code  using the Specware  tool. 
The type verifier 
is entirely modeled in B, from its 
One proves that 
to its implementation. 
specification 
its implementation is consistent with its specification. 
The B method allows us to provide a  very abstract 
that is split in several modules. In  fact, 
specification 
we do not use a simple scheme where the' specifica­
tion is in the abstract machine which is refined and 
implemented. We provide a formal  specification 
is made of several modules  (abstract 
ments and implementation). This·form·al 
specification 
is then refined in order to obtain an implementation. 
which 
m achines, refine­
In the Bali project, 
Push [14] proves a part of the 
JVM using the prover Isabelle/HOL [7). Using Qian 
works  [15], 
she gives the verifier specification 
and then 
proves its correctness. 
She also defines a subset of 
Java, (jaya [13] and aims to prove properties over it. 
More precisely, 
semantics 
prover. In a more recent work [12], Nipkow introduces 
the·formal specification of the Java byte code verifier 
in Isabelle. 
of the:a1gorithm 
ticular JVM. 
the type system and the 
theorem 
Its idea is to come with the generic proof 
of this language using the Isabelle 
and then to instantiate 
they formalize 
it with  a par­
Roses verification' 
scheme has been proven safe us­
ing the Isabelle 
theorem prover by Nipkow [6J, and  a 
similar scheme for a Smart Card specific language has 
been proved correct using B in [16]. 
;·Works prior to the one described 
in this article have 
also ,been performed using the B method on the for­
malization of Iii simple verifier [4], and its implementa-
The for­
true and  what  means 
at a very high level is very simple. It 
what means 
ret)lrning false. There­
of the type verifier is not only 
3.1.1. The type verifier specification. 
mal specification, 
states that the. verifier must return true or false.  Us­
ing the refinement process, oqe clarifies 
returning 
fore, the specification 
the abstract machine but a set of abstract machines, 
that describes what 
refinements and implementations 
the type verifier  does.  The 
is based 
on several loops for the type verification. The first 
loop iterates 
into the CAP' file 
being verified. Then a second loop is designed iterat­
ing on the different byte codes of the method. One 
only states that if a method is correct then all its 
the specification re­
byte codes are correct. 
mains simple. W hen aiming to ensure correctness 
of 
the byte code, a description 
is mandatory. 
ifying what each byte code does and what. it modifies 
of each of 184 byte codes 
remains abstract, spec­
on methods contained 
formal specification 
This description 
Therefore, 
53 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:52 UTC from IEEE Xplore.  Restrictions apply. 
resent all the details of a component but to provide a 
sufficient description 
of its properties 
and its  services. 
Note that, 
even if it is really important to have a for­
implement­
components and not formally 
it is not necessary 
In fact, as we are 
But,  errors 
found 
to do so by formally 
components are similar, both in terms of 
mal specification 
of each component, 
to have its formal implementation. 
close to the CAP file format, it does not bring much to 
formally implement each component. We have decided 
to show that is possible 
ing nine of the twelve components. 
in formally implemented 
implemented 
number and of origins. 
to the translation 
(wrong offset definition, 
the abstract machine helps to understand 
the informal specification. 
with low level implementation,  it 
to implement efficiently. Moreover, the benefits 
as high as the cost for a formal development 
level. 
However, as one has to deal 
is hard to model and 
are not 
at this 
It mainly concerns errors due 
from informal to formal specification 
lack of services).  Designing 
and clarify 
(the stack, the local variable, 
etc ... ). 