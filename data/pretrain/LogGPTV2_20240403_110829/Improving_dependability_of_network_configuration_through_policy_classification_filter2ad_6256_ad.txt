### Table 1: Decrease in Communities and LaC

Table 1 illustrates a reduction in both the number of communities and the number of LaC (Large Autonomous Communities). This decrease is particularly noticeable in Network 1, which had been expanding as more networks were added over the two-year study period, leading to significant changes. It is important to note that some redundancies are intentional, and operators have the option to retain certain original communities from being restructured. Operators can either exclude the original communities from the analysis or accept only a subset of the new communities.

### New Communities and Their Functions

Each new community either represents an equivalent set of policies implemented by multiple communities in the original configuration or implements business relationships among transits, peers, and customers. Other new communities are designed for traffic engineering purposes. These relationships are common in network configurations, and the number of communities can be reduced based on the unique units of these relationships.

### Dangling Communities

A significant number of communities removed by our algorithm (180, 39, 31, and 7 communities from Networks 1, 2, 3, and 4, respectively) are either added in if-clauses but never matched, or matched but never added. We refer to these as "dangling communities" because they reference a certain group but do not form any edges in the instance-property model. These communities often remain in peering configurations even after relationships end. Some are defined for future use, allowing operators to handle modifications in peering relationships or unforeseen issues. However, our time-series analysis over two years shows that none of these communities were modified for actual usage. Such communities should only be used when necessary, as their inclusion can complicate the configuration, making it harder to understand, maintain, and more prone to errors.

### Subset Communities

Some communities are removed because their functions are subsumed by other communities. Specifically, the edges created by each removed community are a subset of those created by another community. For example, in one network, particular routes are re-advertised to a peer based on the following matching condition:
```python
if (A and Cl) or (A and C2) or (A and C3) or ...
```
Our algorithm detects that wherever A is attached, one of the Ci's is also attached, simplifying the condition to "if A." There are two main reasons why such communities exist: 
1. When communities are defined ad hoc, the dependencies and policies are not fully considered.
2. Communities that are replaced by others are not properly removed.

### Combination of Communities

There are communities that can be combined, even though none of them are functionally subsumed by one another. Such communities either represent the same set of routes and match in different if-clauses or involve different routes and match in the same if-clauses. For example, three communities are added by the same if-then clauses, representing the same set of routes. These communities are used to prevent the routes from being re-advertised to three different networks (1, 2, and 3). Our algorithm combines these three communities into one, matching and adding a single community instead of three. This combination does not limit the flexibility of routing policies as long as the same set of routes is managed. If the need to prevent routes from being advertised to Network 2 no longer exists, the single community can be removed from the corresponding if-clause.

### Equivalent Communities

Each of the other new communities (3, 4, 7, and 4 communities from Networks 1, 2, 3, and 4, respectively) is equivalent to an original community. Although these do not contribute to the reduction, they highlight an important implication: the majority of routing policies comply with the come-from relationship. There are a few exceptions, which we address in Section 6.

### Time-series Analysis

Finally, we conducted a time-series analysis on snapshots covering a two-year period for Networks 1 and 2. The results are encouraging, showing that configurations from a simple transformation can still evolve over time. During this period, the networks periodically add and remove peering relationships, with the overall number of relationships growing by approximately 25%. We found that the reduced set of communities is sufficient for this evolution. One or two communities are added and then deleted during the period to accommodate temporary peering relationships that require unique routing policies.

### Discussion

In this section, we discuss cases where the number of communities/LOC does not decrease because the new groupings reproduced by the come-from relationship disagree with the original configurations. Since we believe the original groupings may be more meaningful, we present methods to restructure the new groupings into the original come-from relationship. More details can be found in our technical paper [19].

#### Preference for Shorter Descriptions

A shorter description is often more intuitive than a longer one. For example, "All but routes from AS 1 are to be advertised to customers" is more concise than "Routes from ASes {2, 3, 4, ..., n} are to be advertised to customers." The come-from relationship produces the latter grouping, while the original configuration uses the former. The latter requires a community A to be attached to the routes from each of the n-1 ASes {2, 3, 4, ..., n}. The community is matched by "if A, permit" when the routes are advertised to customers. In contrast, to implement the former grouping, we can use negation in the if-clause, such as "if (not A), permit." This requires the community A to be added only to the routes from AS 1, reducing the LOC. Although this situation is not common, when it occurs, there is a tendency to use smaller I and P sets or fewer communities.

#### Finer Decomposition Based on Actions

We can further partition the policies resulting from the come-from relationship to make their meanings clearer. For example, if a set of prefixes P1 learned from external peers is either dropped or receives a lower preference at two different remote route filters, the come-from relationship identifies this as a single policy, "come-from P1," since the prefixes always receive the same action as a unit. However, we can divide this policy into two: i) "come-from P1 to be dropped," and ii) "come-from P1 to receive a lower preference." If the latter is used, our algorithm can be extended to further partition come-from-based policies according to the corresponding actions.

### Conclusion

We present NetPiler, a tool that transforms network configurations into a simpler form, making them easier to read and update. NetPiler groups policies into distinct specifications and combines unnecessarily decomposed specifications. We demonstrate NetPiler in four production networks, especially for policies implemented by the BGP community attribute. Our results show that up to 90% of communities and up to 70% of community-related commands can be reduced. We also ran NetPiler on snapshots over two years, showing that the reduced set of communities can be reused and is sufficient for this evolution.

The respective operators find NetPiler helpful for managing network configurations. Its strength lies not only in changing existing configurations but also in representing them concisely, improving readability. NetPiler simplifies hundreds of policies into roughly ten, enabling operators to identify unintended or misconfigured policies. We believe NetPiler can potentially reduce operator mistakes and maintenance costs, making the network more reliable and dependable. Finally, we plan to conduct user studies involving operators of various skill levels to assess the manageability of the resulting configuration files.

### References

[1] Z. Kerravala, "As the value of enterprise networks escalates, the need for configuration management," Enterprise Computing and Networking, Yankee Group, 2004.

[2] Agilent Technologies, "Evaluating high availability mechanisms," White Paper, 2005.

[3] R. Mahajan, D. Wetherall, and T. Anderson, "Understanding BGP misconfigurations," in Proc. ACM SIGCOMM, Aug. 2002.

[4] D. Oppenheimer, A. Ganapathi, and D. Patterson, "Why do Internet services fail, and what can be done about it?" in Proc. USITS, 2003.

[5] C. Alaettinoglu et al., Routing Policy Specification Language (RPSL), RFC-2622, 1999.

[6] T. Griffin, A. Jaggard, and V. Ramachandran, "Design principles for policy languages and path vector protocols," in Proc. ACM SIGCOMM, Aug. 2003.

[7] A. Greenberg et al., "A clean slate 4D approach to network control and management," ACM SIGCOMM Computer Communications Review, vol. 35, no. 5, Oct. 2005.

[8] H. Ballani and P. Francis, "CONMan: A step towards router manageability," in Proc. ACM SIGCOMM, Aug. 2007.

[9] F. Le, S. Lee, T. Wong, H. S. Kim, and D. Newcomb, "Minerals: Using data mining to detect router misconfigurations," in Proc. ACM SIGCOMM Workshop on Mining Network Data, Sep. 2006.

[10] N. Feamster and H. Balakrishnam, "Detecting BGP configuration faults with static analysis," in Proc. NSDI, May 2005.

[11] A. Feldmann and J. Rexford, "IP network configuration for intradomain traffic engineering," IEEE Network Magazine, 2001.

[12] R. Brayton, A. Sangiovanni-Vincentelli, C. McMullen, and G. Hachtel, Logic Minimization Algorithms for VLSI Synthesis, Kluwer Academic, 1984.

[13] A. Liu, E. Torng, and C. Meiners, "Firewall compressor: An algorithm for minimizing firewall policies," in Proc. IEEE Infocom, Apr. 2008.

[14] M. Caesar and J. Rexford, "BGP routing policies in ISP networks," IEEE Network Magazine, special issue on inter-domain routing, Nov/Dec. 2005.

[15] O. Bonaventure and B. Quoitin, "Common utilizations of the BGP community attribute," Internet draft, draft-bonaventure-quoitin-bgp-communities-OO.txt, work in progress, June 2003.

[16] S. Lee, T. Wong, and H. S. Kim, "To automate or not to automate: On the complexity of network configuration," in Proc. IEEE ICC, May 2008.

[17] H. Zuse, Software Complexity: Measures and Methods, Walter de Gruyter, 1991.

[18] S. Alexandrov, "Reliability of complex services," unpublished. Available at: http://www.cs.rutgers.edu/~rmartin/teaching/spring06/cs553/papers/

[19] S. Lee, T. Wong, and H. S. Kim, "NetPiler: Reducing network configuration complexity through policy classification," CMU Technical Report, CMU-CyLab-07-009, 2007.

[20] JUNOS Configuration Guides. Available at: http://www.juniper.net/techpubs/software/junos/junos83/index.html

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.