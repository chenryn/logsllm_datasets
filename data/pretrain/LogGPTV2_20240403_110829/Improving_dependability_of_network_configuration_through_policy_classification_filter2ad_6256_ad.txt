Table 1 shows decreases in both the number of
communities and the number of LaC. The decrease is
noticeable in Network 1 since it had been expanding as
more networks were added over the span of the two
years we studied and thus had gone through many
changes in the past. Note that some redundancies are
by design, and operators can always keep certain
original communities from being restructured. The
operators can either exclude the original communities
from the analysis, or accept only a subset of the new
communities.
or
of
the
Some
original
represents
community
Each of the new communities either is equivalent to
policies
an
implemented by multiple communities in the original
configuration.
new communities
implement business relationships among transits, peers,
and customers, while others
implement policies
intended for traffic engineering. These are common
relationships found in a network, and configurations
concerning communities thus naturally can be reduced
according to the unique units of these relationships in a
network.
Dangling
Communities.
The majority
of
communities that are removed by our algorithm (180,
39, 31, and 7 communities from network 1, 2, 3, and 4,
respectively) are either added in if-clauses but never
matched anywhere, or matched but never added. We
call
these communities dangling communities since
they refer to a certain group, but do not form any edges
in the instance-property model. These communities are
remains
peering
configurations when
old
of
1-4244-2398-9/08/$20.00 ©2008 IEEE
304
DSN 2008: Lee et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:36 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
9
relationships end. Others are defined by predicting later
usage thus allowing operators to use the communities
to deal with modification in peering relationships or
unforeseen problems in the future. However, from our
time-series analysis over a two-year period, we find
that none of these communities had been modified for
actual usage. These communities should be used only
when they are needed. Lengthening the configuration
with such communities might make the configuration
harder to understand, maintain, and more prone to
errors.
Subset Communities. A few communities are
removed since their functions are subsumed by those of
other communities. In other words, the edges created
by each of the removed communities are a subset of the
edges created by another community. In one network,
particular routes are re-advertised to a peer based on
the following matching condition.
There
if (A and Cl) or (A and C2) or (A and C3) or ...
Our algorithm detects that wherever A is attached,
one of the Ci's is attached as well and thus is able to
simplify the condition as "if A."
possible
such
communities exist: i) when communities are defined ad
hoc, the dependencies created by communities and the
policies
fully
considered, or ii) communities that are replaced by
others are not properly removed.
reasons why
implemented
previously
two
not
are
are
There
Combination
of Communities.
are
communities that can be combined although none of
them are functionally subsumed by one another. Such
communities either represent the same set of routes and
match in different if-clauses, or involve different routes
and match in the same if-clauses. For example, three
communities are added by the same if-then clauses and
thus represent the same set of routes. The communities
are used so that the routes are not re-advertised to three
different networks 1, 2, and 3,
respectively. Our
algorithm combines the three communities as one by
matching and adding a single community instead of the
three. Such combining does not limit the flexibility of
routing policies as long as we deal with the same set of
routes. If we no longer need to prevent the routes from
being advertised to network 2, we can simply remove
the single community from the corresponding if-clause.
Equivalent Communities. Each of the other new
communities (3, 4, 7, and 4 communities from network
1, 2, 3, and 4, respectively) is equivalent to an original
communities do not
community. Although these
contribute to the reduction,
they do present an
important implication as the combined communities.
This implication is that the majority of routing policies
comply with the come-from relationship. There are a
few exceptions, which we deal with in Section 6.
Time-series Analysis. Finally, we perform an
analysis on snapshots that cover a two-year period
(Network 1 and 2). The result is encouraging because it
shows that configurations from a simple transformation
can still be evolvable over time. During the period, the
networks
and remove peering relationships
periodically, and the overall number of relationships
grows by roughly 25%. We find that the reduced set of
communities is sufficient for this evolution. One or two
communities are added and then deleted during the
period
peering
relationships that require unique routing policies.
accommodate
temporary
add
to
6. Discussion
In this section, we go over a few cases where the
number of communities/LOC does not decrease when
the new groupings reproduced by the come-from
relationship disagree with the groupings in the original
configurations. Since we believe that
the original
groupings could be more meaningful, we present
methods that restructure the new groupings into the
original
come-from
relationship. More details can be found in our technical
version of the paper [19].
groupings
improve
the
to
Preference for Shorter Descriptions. A shorter
description could be more intuitive than a longer one.
For example, "All but routes from AS 1 are to be
advertised to customers." is more concise than "Routes
from ASes {2,3,4, ... ,n} are to be advertised to
customers." The come-from relationship produces the
latter grouping while the original configuration uses the
former. The latter requires a community A to be
attached to the routes from each of the n-l ASes
{2,3,4, ...n}. The community is matched by "if A,
permi t" when the
advertised to the
customers. On the contrary, to implement the former
grouping, we can use negation in the if-clause as in "if
(not A), permit". This requires the community A to
be added only to the routes from AS 1 and thus reduces
the LOC. Although the situation that we describe here
is not common, when it happens, we observe a
tendency towards using smaller I and P sets or fewer
communities.
routes
are
Finer Decomposition Based on Actions. We can
further partition the policies resulting from the come(cid:173)
from relationship in order to make their meanings
clearer. Assume that a set of prefixes P1 learned from
external peers is either dropped or receives a lower
preference at two different remote route filters. The
come-from relationship identifies the situation as one
1-4244-2398-9/08/$20.00 ©2008 IEEE
305
DSN 2008: Lee et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:36 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
10
single policy, "come-from P1," since the prefixes
always receive the same action as a unit. However, we
can divide the policy into two policies: i) "come-from
P1 to be dropped," and ii) "come-from P1 to receive a
lower preference." If the latter is used, one can easily
extend our algorithm so that come-from based policies
are further partitioned according to the corresponding
actions.
7. Conclusion
any
thus
policies,
removing
routing policies
We present NetPiler, a way to transform a network
configuration into a simpler form, which is easier to
read and update. NetPiler groups policies into a set of
distinct
duplicate
specifications, and it combines specifications that are
unnecessarily decomposed. We demonstrate NetPiler
for
in four production networks,
especially the policies
implemented by the BGP
community attribute. We show that up to 90% of
communities and up to 70% of community-related
commands are reduced. We also run NetPiler for
snapshots over two years and show that the reduced set
of communities can be reused and are sufficient for this
evolution.
a
and
their
understanding
The respective operators find NetPiler helpful for
managing
network
configurations. The strength of NetPiler is not only that
it helps change the existing configurations, but it also
represents the configurations in concise manners, thus
paving a way to improve the readability of
the
configurations. NetPiler simplifies hundreds of policies
into roughly ten policies, and the operators understand
original
such
configurations. This
the
operators to identify policies that are not intended or
misconfigured. Thus, we believe that NetPiler can
potentially reduce operator mistakes
as
maintenance costs, making the network more reliable
and dependable. Finally, we hope to conduct user
studies that will involve many operators of various skill
levels to see if the resulting configuration files are more
manageable.
representation also leads
representation
as well
better
than
the
8. References
so
for
does
[1] Z. Kerravala, "As the value of enterprise networks
escalates,
configuraiton
management," Enterprise Computing and Networking,
Yankee Group, 2004.
"Evaluating high availability mechanisms," Agilent
Technologies White Paper, 2005.
need
the
[2]
[3] R. Mahajan, D. wetherall,
and T. Anderson,
"Understanding BGP misconfigurations," in Proc. ACM
SIGCOMM, Aug. 2002.
[4] D. Oppenheimer, A. Ganapathi and D. Patterson, "Why
do Internet services fail, and what can be done about
it?" in Proc. USITS, 2003.
[5] C. Alaettinoglu, et aI., Routing Policy Specification
Language (RPSL), RFC-2622, 1999.
[6] T. Griffin, A. Jaggard, and V. Ramachandran, "Design
vector
principles
protocols," in Proc. ACM SIGCOMM, Aug. 2003.
of policy
languages
path
for
[7] A. Greenberg, et aI., "A clean slate 4D approach to
network control and management," ACM SIGCOMM
Computer Communications Review, vol. 35, no. 5, Oct.
2005.
[8] Hitesh Ballani and Paul Francis, "CONMan: A step
in Proc. ACM
network manageability,"
towards
SIGCOMM, Aug 2007.
[9] F. Le, S. Lee, T. Wong, H. S. Kim, and D. Newcomb,
to
router
ACM SIGCOMM
"Minerals: Using
misconfigurations,"
Workshop on Mining Network Data, Sep. 2006.
data mining
in
detect
Proc.
[10] N. Feamster and H. Balakrishnam, "Detecting BGP
configuration faults with static analysis," in Proc. NSDI,
May 2005.
[11] A. Feldmann and J. Rexford, "IP network configuration
intradomain traffic engineering," IEEE Network
for
Magazine, 2001.
[12] R. Brayton, A. Sangiovanni-Vincentelli, C. McMullen,
and G. Hachtel, Logic Minimization Algorithms for
VLSI SYnthesis, New York: Kluwer Academic, 1984.
[13] A. Liu, E. Torng, C. Meiners, "Firewall compressor: an
algorithm for minimizing firewall policies," in Proc.
IEEE In/ocom, Apr. 2008.
[14] M. Caesar and 1. Rexford, "BGP routing policies in ISP
networks," IEEE Network Magazine, special issues on
inter-domain routing, Nov/Dec. 2005.
[15] O. Bonaventure and B. Quoitin, "Common utilizations
of the BGP community attribute," Internet draft, draft(cid:173)
bonaventure-quoitin-bgp-communities-OO.txt, work in
progress, June 2003.
[16] S. Lee, T. Wong, and H. S. Kim, "To automate or not to
automate: on the complexity of network configuration",
in Proc. IEEE ICC, May 2008.
[17] H. Zuse, Software Complexity: Measures and Methods,
Berlin: Walter de Gruyter, 1991.
[18] S. Alexandrov,
"Reliability of complex services,"
unpublished.http://www.cs.rutgers.edu/-rmartin/teachin
g/spring06/cs553/papers/
[19] S. Lee, T. Wong, and Hyong S. Kim, "NetPiler:
Reducing network configuration complexity through
policy classification," CMU Technical Report, CMU(cid:173)
CyLab-07-009, 2007.
[20] JUNOS Configurations Guides.
http://www.juniper.netltechpubs/software/junos/junos83
/index.html
1-4244-2398-9/08/$20.00 ©2008 IEEE
306
DSN 2008: Lee et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:18:36 UTC from IEEE Xplore.  Restrictions apply.