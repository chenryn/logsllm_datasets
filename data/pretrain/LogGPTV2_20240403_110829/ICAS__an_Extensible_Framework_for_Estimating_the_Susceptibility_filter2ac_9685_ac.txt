security-critical wires based on designer annotations and
circuit dataﬂow, while GDSII-Score assesses the defensive
coverage of a given IC layout against a set of attacks. ICAS
takes as input four sets of ﬁles: 1) gate-level netlist (generated
after all physical layout optimizations), 2) process technology
ﬁles, 3) physical layout ﬁles, and 4) set of attacks. The process
technology ﬁles include a Library Exchange Format (LEF)
ﬁle and layer map ﬁle [37], [40]. The physical layout ﬁles
include a Design Exchange Format (DEF) ﬁle and the GDSII
ﬁle of an IC layout [37], [41]. The attack ﬁles are are a list of
properties for each attack to assess coverage against: number
of transistors, security-critical wire(s) to attach to, and timing
constraints. All ICAS input ﬁles except the attack ﬁles are
either generated-by or inputs-to the back-end IC design phase,
and hence are readily available to back-end designers.
Though ICAS is extensible, our implementation includes
three security metrics that capture the challenges faced by
a foundry-level attacker looking to insert a hardware Trojan:
amount and size of open-placement regions (Trigger Space),
Fig. 5. The supervisor bit signal of the OR1200 processor SoC is the data
input to the supervisor register of the OR1200 CPU. The supervisor register
stores the privilege mode the processor is currently executing in. Changing
the value on this net changes the privilege level of the processor allowing
an attacker to execute privileged instructions. The more congested the area
around this net, the more difﬁcult it is for a foundry-level attacker to attach
(or route in close proximity) a rogue wire to it.
To quantify the number of points along, above, and below
a targeted security-critical wire—and its N-deep fan-in—we
implement the Net Blockage metric. Figure 5 shows the open
(unblocked) integration points for the privilege net on the
OR1200 processor.
C. Challenges of Intra-Trojan Routing
The ﬁnal phase of a fabrication-time attack is Intra-Trojan
routing. Intra-Trojan routing requires connecting the compo-
nents that comprise the trigger and payload portions of the
hardware Trojan together—including connecting to the inte-
gration point with the victim—to form a complete hardware
Trojan. In the worst case, the attacker is able to ﬁnd a single
contiguous region to place the trigger and payload components
that is nearby the victim security-critical net. Thus, routing the
trigger and payload components will be trivial and the wire
used to inject the payload will be short. In the best case, the
attacker will have to implement their attack using many 4-
connected placement regions (i.e., low Trigger Space score)
and the only integration point on the targeted security-critical
net (i.e., high Net Blockage score) is as far away from the
open placement regions. Hence, we focus on quantifying the
difﬁculty of routing the payload output to open attachment
points on targeted security-critical nets (and its N-deep fan-
in). To this end, we identify two challenges of intra-Trojan
routing:
• Comply with design and fabrication rules
• Meet Trojan and payload-delivery timing requirements
1) Complying with Design Rules: For each process tech-
nology, there are many rules associated with how wires and
components must be laid out in a design. Some of these rules
are deﬁned in the Library Exchange Format (LEF) [37] and
contained in ﬁles that are loaded by modern Computer Aided
Design (CAD) tools throughout the IC design process. There
are two types of design rules: 1) those regarding the construc-
tion of circuit components (i.e., standard cells), and 2) those
utilizing the design [30], [42]. The second, and current state-
of-the-art developed by Zhang et al. [44], is semi-autonomous
identiﬁcation. Semi-autonomous identiﬁcation involves two
steps. First, a program observes a variety of test-benches
exercising the design to generate a large set of possible
invariants deﬁned over the hardware speciﬁcation. Second, a
pre-trained penalized logistic regression classiﬁer is used to
classify which invariants, or portions of the speciﬁcation, are
security-critical. This method of SCCI is semi-autonomous,
as it requires the classiﬁer model be pre-trained with either
existing published errata on previous versions of the hardware
design, or using manual
identiﬁcation. While we perform
manual SCCI, results reported by Zhang et al. [44] suggest
that their tool would result in a similar set of root security-
critical signals.
2) Identifying Security-Critical Signals in the PaR Netlist:
While there are existing (aforementioned) techniques for iden-
tifying and annotating security-critical components in the RTL
netlist, unfortunately, these techniques do not track security-
critical signals past the RTL design phase and do not capture
data-ﬂow. Thus, Nemo’s core task is to bridge the semantic
gap and uncover duplicated or renamed security-critical sig-
nals in the post-PaR netlist. Fortunately, while synthesis and
layout tools do modify a netlist by duplicating and removing
signals and components (as part of optimization and meeting
performance requirements), they do not completely rename
existing signals. This makes it possible for Nemo to identify
root security-critical signals (ﬂagged at the behavioral level)
by name at the physical level. To avoid removal of security-
critical signals, we modify synthesis and layout scripts to
essentially lock them in place. Nemo works backwards from
root security-critical signals to identify the fan-in to these
signals. The search depth is a conﬁgurable parameter of Nemo.
3) Implementation: Nemo is implemented as a back-end
target module to the open-source Icarus Verilog (IVL) [45]
Verilog compiler and simulation tool written in C++. The IVL
front-end exposes an API to allow third-parties to develop cus-
tom back-end target modules. Nemo is a custom target module
(also written in C++) designed to be loaded by IVL. Since
gate-level netlists are often described with the same HDL
that was synthesized to generate the netlist (e.g., Verilog), we
utilize the IVL front-end to interpret the Verilog representation
of the netlist and our custom back-end target module, Nemo,
to perform a breadth-ﬁrst search of the post-PaR netlist. We
open-source Nemo [19] and release instructions on how to
compile and integrate Nemo with IVL.
B. GDSII-Score
GDSII-Score is the second analysis tool
in the ICAS
framework. GDSII-Score is an extensible Python framework
for computing security metrics of a physical IC layout. It
takes as input the following: Nemo output, GDSII ﬁle, DEF
ﬁle, technology ﬁles (LEF and layer-map ﬁles), and attacks
description ﬁle. First, GDSII-Score loads all input ﬁles and
locates the security-critical nets within the physical layout.
Next, it computes security metrics characterizing the suscepti-
ICAS consists of two tools, Nemo and GDSII-Score, and ﬁts into
Fig. 6.
the existing IC design process (Fig. 1) between PaR and fabrication. Nemo
analyzes a gate-level (PaR) netlist and traces the fan-in to security-critical
nets in a design. GDSII-Score analyzes a GDSII ﬁle (i.e., an IC layout) and
computes metrics quantifying its vulnerability to a set of foundry-level attacks.
quantity of viable attachment points to targeted security-
critical (and inﬂuencer) nets (Net Blockage), and the proximity
of open placement regions to targeted security-critical net(s)
(Route Distance). Together with the attack requirements, these
metrics quantify the complexity an attacker faces for each step
of inserting speciﬁc hardware Trojans into the given IC layout.
We describe the implementation of both ICAS components
below.
A. Nemo
Nemo is the ﬁrst analysis tool in the ICAS framework. It
bridges the semantic gap between the human readable RTL
netlist and post-PaR netlist. Additionally, Nemo broadens the
set of “security-critical” nets by performing a fan-in analysis
of root security-critical nets. This is necessary since the inter-
connected nature of signals within a circuit design means an
adversary could inﬂuence the state of security-critical nets by
controlling a net that is a part of its fan-in. Nemo takes as input
a Verilog netlist and automatically identiﬁes security-critical
nets in the post-PaR netlist HDL, which it outputs in the
form of a Graphviz dot ﬁle. Similar to prior work [42]–[44],
Nemo assumes that a unique signal name preﬁx (within the
RTL HDL) has been appended to various signals considered
“security-critical”. We make this assumption since determining
what signals are “security critical” requires contextual knowl-
edge of how the design will be used.
1) Annotating Security-Critical Signals
in the RTL
Netlist: The process of uncovering and annotating security-
critical signals in the RTL netlist is Security-Critical Com-
ponent Identiﬁcation (SCCI). While SCCI is an active area
of research in the hardware security community, orthogonal
to addressing the untrusted foundry problem, there are two
approaches we are aware of: manual and semi-autonomous
identiﬁcation. The ﬁrst, and most traditional, is manual iden-
tiﬁcation. Manual identiﬁcation requires a human expert to
study the design’s speciﬁcation (e.g., Instruction Set Archi-
tecture in the case of a processor), and identify properties
that are critical to the security of software or other hardware
bility of an IC design to each of the input attacks. Speciﬁcally,
the three security metrics that we implement are: 1) Trigger
Space: the difﬁculty of implementing the hardware Trojan,
2) Net Blockage: the difﬁculty of Trojan/victim integration,
and 3) Route Distance: the difﬁculty of meeting Trojan timing
constraints. We open source the GDSII-Score framework and
our security metric implementations [20].
1) Metric 1: Trigger Space: The Trigger Space metric
estimates the challenges of Trojan placement (§V-A). It com-
putes a histogram of open 4-connected regions of all sizes
on an IC’s placement grid. The more large 4-connected open
placement regions available, the easier it is for an attacker to
locate a space to insert additional Trojan circuit components at
fabrication time. A placement site is considered to be “open” if
the site is empty, or if it is occupied by a ﬁller cell. Filler cells,
or capacitor cells, are inserted into empty spaces during the last
phase of layout to aid fabrication. Since they are inactive, an
attacker can create empty placement sites by removing them,
without altering the functionality or timing characteristics of
the victim IC.
To compute the trigger space histogram, GDSII-Score ﬁrst
constructs a bitmap representing the placement grid. Placement
sites occupied by standard cells (e.g., NAND gate transistors)
are colored while those that are open are not. Information
about the size of the placement grid and the occupancy of each
site in the grid is available in the Design Exchange Format
(DEF) ﬁle produced by commercial PaR tools. GDSII-Score
then employs a breadth-ﬁrst search algorithm to enumerate the
maximum size of all 4-connected open placement regions.
2) Metric 2: Net Blockage: The Net Blockage metric
estimates the challenges of integrating the hardware Trojan’s
payload into the victim circuit (§V-B). It computes the percent
blockage around security-critical nets and their inﬂuencers.
The more congested the area surrounding security-critical nets,
the more difﬁcult it is to attach the Trojan circuitry to these
nets. There are two types of net blockage that are calculated
for each security-critical net: same-layer and adjacent-layer.
Same-layer blockage is computed by traversing points
around the perimeter (North, South, East, West) at a gran-
ularity of g, at a speciﬁc distance, d, around the security-
critical net and determining which points lie within other
circuit components, as detailed in Figure 7a. To determine
if a speciﬁc point along the perimeter lies within the bounds
of another circuit component, we utilize the point-in-polygon
ray-casting algorithm [46]. The extension distance, d, around
the security-critical path element and the granularity of the
perimeter traversal, g, are conﬁgurable in our implementation.
However, we default to an extension distance of one wire-pitch
and a granularity of 1 database units, respectively, as deﬁned
in the process technology’s LEF ﬁle. The IC designs used in
our evaluation are built using a 45 nm process technology, for
which 1 database units is equivalent to 0.5 nm. Additionally,
an open region is considered “blocked” if it is not wide enough
for a minimal width wire to be routed through while main-
taining the minimal amount of wire spacing required on that
metal layer, as deﬁned in the LEF ﬁle. The percentage of the
Fig. 7. A) Same-layer net blockage is computed by traversing the perimeter
of the security-critical net, with granularity g, and extension distance d, and
determining if such points lie inside another component in the layout. B)
Adjacent-layer net blockage is computed by projecting the area of the security-
critical net to the layers above and below and determining the area of the
projections that are occupied by other components.
perimeter length that is blocked by other circuit components
is considered the same-layer blockage percentage.
Adjacent-layer blockage is computed by analyzing the area
directly above and below a security-critical net, and com-
puting the total area of overlap between other components,
as detailed in Figure 7b. To calculate this overlap area we
utilize an overlapping sliding window approach. Additionally,
any un-blocked regions above or below the security-critical
net are considered “blocked” if they are not large enough
to accommodate the smallest possible via geometry allowed
on the respective via layer, as deﬁned in the LEF ﬁle. The
percentage of the total top and bottom area that is blocked
by nearby circuit components is the adjacent-layer blockage
percentage.
The same-layer and adjacent-layer blockage percentages are
combined via a weighted average to form a comprehensive
overall net blockage percentage where 66% is based on same-
layer blockage (north, south, east, and west) and 33% is based
on adjacent-layer blockage (top and bottom). We weight the
3, because 4 out of 6 total
same-layer blockage by 66%, or 2
sides of a wire (north, south, east, west, top, and bottom)
are on the same layer. Likewise, we weight the adjacent-layer
3.
blockage by 33%, or 1
Lastly, a total same-layer, adjacent-layer, and overall net
blockage metric is computed for the entire IC design. For an
IC design with n security-critical nets, the same-layer (bsame),
adjacent-layer (badjacent), and overall (boverall) net blockage
metrics are computed according to equations 1, 2, and 3,
respectively.
bsame =
badjacent =
(cid:18) 2
3
boverall =
(cid:80)n
i=1 perimeter blockedn
i=1 perimetern
(cid:80)n
(cid:80)n
(cid:80)n
(cid:19)
i=1 2 ∗ arean
(cid:18) 1
i=1 area blockedn