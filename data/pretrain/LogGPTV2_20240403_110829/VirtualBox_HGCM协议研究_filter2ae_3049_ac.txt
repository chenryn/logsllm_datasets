       699 
       700     pMsg->Reference(); /* paranoia? */
       701 
     ► 702     int rc = pMsg->Thread()->MsgPost(pMsg, pfnCallback, fWait);
       703 
       704     pMsg->Dereference();
       705 
       706     LogFlow(("MAIN::hgcmMsgPostInternal: pMsg = %p, rc = %Rrc\n", pMsg, rc));
       707     return rc;
    pwndbg> p pMsg->Thread()->MsgPost
    $11 = {int (HGCMThread * const, HGCMMsgCore *, PHGCMMSGCALLBACK, bool)} 0x7fe5d8646a5c 
HGCMThread::MsgPost函数只是简单的将消息插入到消息队列，当HGCMThread的线程取出消息时，便会进行处理。HGCMThread的主线程函数为`hgcmThread`
####  hgcmThread
    /* The main HGCM thread handler. */
    static DECLCALLBACK(void) hgcmThread(HGCMThread *pThread, void *pvUser)
    {
        LogFlowFunc(("pThread = %p, pvUser = %p\n", pThread, pvUser));
        NOREF(pvUser);
        bool fQuit = false;
        while (!fQuit)
        {
            HGCMMsgCore *pMsgCore;
            int rc = hgcmMsgGet(pThread, &pMsgCore);
            if (RT_FAILURE(rc))
            {
                /* The error means some serious unrecoverable problem in the hgcmMsg/hgcmThread layer. */
                AssertMsgFailed(("%Rrc\n", rc));
                break;
            }
            uint32_t u32MsgId = pMsgCore->MsgId();
            switch (u32MsgId)
            {
                case HGCM_MSG_CONNECT:
                {
                    HGCMMsgMainConnect *pMsg = (HGCMMsgMainConnect *)pMsgCore;
                    LogFlowFunc(("HGCM_MSG_CONNECT pszServiceName %s, pu32ClientId %p\n",
                                 pMsg->pszServiceName, pMsg->pu32ClientId));
                    /* Resolve the service name to the pointer to service instance.
                     */
                    HGCMService *pService;
                    rc = HGCMService::ResolveService(&pService, pMsg->pszServiceName);
                    if (RT_SUCCESS(rc))
                    {
                        /* Call the service instance method. */
                        rc = pService->CreateAndConnectClient(pMsg->pu32ClientId,
                                                              0,
                                                              pMsg->pHGCMPort->pfnGetRequestor(pMsg->pHGCMPort, pMsg->pCmd),
                                                              pMsg->pHGCMPort->pfnIsCmdRestored(pMsg->pHGCMPort, pMsg->pCmd));
                        /* Release the service after resolve. */
                        pService->ReleaseService();
                    }
                } break;
                case HGCM_MSG_DISCONNECT:
                {
当收到`HGCM_MSG_CONNECT`消息时，调用`HGCMService::ResolveService(&pService,
pMsg->pszServiceName)`得到对应服务的句柄，该函数实际上就是一个链表查找的过程
    /** The method obtains a referenced pointer to the service with
     *  specified name. The caller must call ReleaseService when
     *  the pointer is no longer needed.
     *
     * @param ppSvc          Where to store the pointer to the service.
     * @param pszServiceName The name of the service.
     * @return VBox rc.
     * @thread main HGCM
     */
    /* static */ int HGCMService::ResolveService(HGCMService **ppSvc, const char *pszServiceName)
    {
        LogFlowFunc(("ppSvc = %p name = %s\n",
                     ppSvc, pszServiceName));
        if (!ppSvc || !pszServiceName)
        {
            return VERR_INVALID_PARAMETER;
        }
        HGCMService *pSvc = sm_pSvcListHead;
        while (pSvc)
        {
            if (strcmp(pSvc->m_pszSvcName, pszServiceName) == 0)
            {
                break;
            }
            pSvc = pSvc->m_pSvcNext;
        }
        LogFlowFunc(("lookup in the list is %p\n", pSvc));
        if (pSvc == NULL)
        {
            *ppSvc = NULL;
            return VERR_HGCM_SERVICE_NOT_FOUND;
        }
        pSvc->ReferenceService();
        *ppSvc = pSvc;
        return VINF_SUCCESS;
    }
而该服务链表是在`HGCM_MSG_LOAD`时通过`LoadService`初始化的
                case HGCM_MSG_LOAD:
                {
                    HGCMMsgMainLoad *pMsg = (HGCMMsgMainLoad *)pMsgCore;
                    LogFlowFunc(("HGCM_MSG_LOAD pszServiceName = %s, pMsg->pszServiceLibrary = %s, pMsg->pUVM = %p\n",
                                 pMsg->pszServiceName, pMsg->pszServiceLibrary, pMsg->pUVM));
                    rc = HGCMService::LoadService(pMsg->pszServiceLibrary, pMsg->pszServiceName, pMsg->pUVM, pMsg->pHgcmPort);
                } break;
其中`LoadService`函数就是加载对应的名称的`动态库`，然后将句柄存储到链表中。  
ResolveService得到服务模块句柄以后，就通过`CreateAndConnectClient`函数调用模块中初始化的函数
                    if (RT_SUCCESS(rc))
                    {
                        /* Call the service instance method. */
                        rc = pService->CreateAndConnectClient(pMsg->pu32ClientId,
                                                              0,
                                                              pMsg->pHGCMPort->pfnGetRequestor(pMsg->pHGCMPort, pMsg->pCmd),
                                                              pMsg->pHGCMPort->pfnIsCmdRestored(pMsg->pHGCMPort, pMsg->pCmd));
                        /* Release the service after resolve. */
                        pService->ReleaseService();
                    }
CreateAndConnectClient函数如下
    /* Create a new client instance and connect it to the service.
     *
     * @param pu32ClientIdOut If not NULL, then the method must generate a new handle for the client.
     *                        If NULL, use the given 'u32ClientIdIn' handle.
     * @param u32ClientIdIn   The handle for the client, when 'pu32ClientIdOut' is NULL.
     * @param fRequestor      The requestor flags, VMMDEV_REQUESTOR_LEGACY if not available.
     * @param fRestoring      Set if we're restoring a saved state.
     * @return VBox status code.
     */
    int HGCMService::CreateAndConnectClient(uint32_t *pu32ClientIdOut, uint32_t u32ClientIdIn, uint32_t fRequestor, bool fRestoring)
    {
        LogFlowFunc(("pu32ClientIdOut = %p, u32ClientIdIn = %d, fRequestor = %#x, fRestoring = %d\n",
                     pu32ClientIdOut, u32ClientIdIn, fRequestor, fRestoring));
        /* Allocate a client information structure. */
        HGCMClient *pClient = new (std::nothrow) HGCMClient(fRequestor);
        if (!pClient)
        {
            Log1WarningFunc(("Could not allocate HGCMClient!!!\n"));
            return VERR_NO_MEMORY;
        }
        uint32_t handle;
        if (pu32ClientIdOut != NULL)
        {
            handle = hgcmObjGenerateHandle(pClient);
        }
        else
        {
            handle = hgcmObjAssignHandle(pClient, u32ClientIdIn);
        }
        LogFlowFunc(("client id = %d\n", handle));
        AssertRelease(handle);
        /* Initialize the HGCM part of the client. */
        int rc = pClient->Init(this);
        if (RT_SUCCESS(rc))
        {
            /* Call the service. */
            HGCMMsgCore *pCoreMsg;
            rc = hgcmMsgAlloc(m_pThread, &pCoreMsg, SVC_MSG_CONNECT, hgcmMessageAllocSvc);
            if (RT_SUCCESS(rc))
            {
                HGCMMsgSvcConnect *pMsg = (HGCMMsgSvcConnect *)pCoreMsg;
                pMsg->u32ClientId = handle;
                pMsg->fRequestor = fRequestor;
                pMsg->fRestoring = fRestoring;
                rc = hgcmMsgSend(pMsg);
                if (RT_SUCCESS(rc))
                {
                    /* Add the client Id to the array. */
                    if (m_cClients == m_cClientsAllocated)
                    {
                        const uint32_t cDelta = 64;
                        /* Guards against integer overflow on 32bit arch and also limits size of m_paClientIds array to 4GB*/
                        if (m_cClientsAllocated u32ClientID;
        uint32_t        fFlags;
        size_t          cbActual;
        unsigned        i;
        int             rc;
        /*
         * Some more validations.
         */
        if (RT_LIKELY(pInfo->cParms cParms));
            return VERR_INVALID_PARAMETER;
        }
        cbActual = cbExtra + sizeof(*pInfo);
    #ifdef RT_ARCH_AMD64
        if (f32bit)