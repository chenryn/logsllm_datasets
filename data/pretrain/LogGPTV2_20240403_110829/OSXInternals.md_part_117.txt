return KERN_INVALID_ADDRESS;
*len = 0;
while (*in++)
(*len)++;
return KERN_SUCCESS;
}
// an operation that we export
kern_return_t
factorial(mach_port_t server_port, xput_number_t num, xput_number_t *fac)
{
int i;
if (!fac)
return KERN_INVALID_ADDRESS;
*fac = 1;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 61 of 153
for (i = 2; i end - mig_e[i]->start;
...
for (j = 0; j < range; j++) { // for each routine[j] in mig_e[i]
...
// populate mig_buckets hash table with routines
}
}
}
9.7. Mach Exceptions
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 66 of 153
Exceptions are synchronous interruptions to the normal flow of program control caused by the program
itself. The following are examples of reasons why exceptions can occur:
Attempting to access nonexistent memory
Attempting to access memory that violates address-space protection
Failing to execute an instruction because of an illegal or undefined opcode or operand
Producing an arithmetic error such as division by zero, overflow, or underflow
Executing an instruction intended to support emulation
Hitting a debugger-installed breakpoint or other exceptions related to debugging, tracing, and error
detection
Executing the system call instruction
Some exceptions do not represent abnormal conditions in that they are part of the normal functioning of
the operating system. Examples of such exceptions include page faults and system calls. As we saw in
Chapters 3 and 6, a Mac OS X program invokes a system call through the sc instruction, which causes a
hardware exception. A system call exception is handled differently from other types by the operating
system. The operating system also handles page faults transparently to user programs.
Several other types of exceptions must either be reported to user programs or otherwise require explicit
handling. These include exceptions that may be deliberately caused by programs, such as by a debugger
using hardware breakpoint and trace facilities.
The deliberate use of exceptions can be classified into categories such as error handling, debugging, and
emulation/virtualization.
Mach provides an IPC-based exception-handling facility wherein exceptions are converted to messages.
When an exception occurs, a message containing information about the exceptionsuch as the exception
type, the thread that caused it, and the thread's containing taskis sent to an exception port. The reply to this
message, which the thread waits for, indicates whether the exception was successfully handled by an
exception handler. Exceptions are system-level primitives in Mach.
Sets of exception portsone port per exception typeare maintained at the host, task, and thread levels
(Figure 933). When an exception message is to be delivered, the kernel attempts to deliver it to the most
specific port first. If either the delivery or the processing of that message fails, the kernel attempts the next
most specific port. Thus, the order is thread, task, and host. Typically, the delivery of an exception
message fails at a given level because there is no exception handler registered at that level. Similarly,
processing of the message fails because the handler returned an error.
Figure 933. Exception ports at the host, task, and thread levels
// osfmk/kern/exception.h
struct exception_action {
struct ipc_port *port; // exception port
thread_state_flavor_t flavor; // state flavor to send
exception_behavior_t behavior; // exception type to raise
};
// osfmk/kern/host.h
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 67 of 153
struct host {
...
struct exception_action exc_actions[EXC_TYPES_COUNT];
...
};
// osfmk/kern/task.h
struct task {
...
struct exception_action exc_actions[EXC_TYPES_COUNT];
...
};
// osfmk/kern/thread.h
struct thread {
...
struct exception_action exc_actions[EXC_TYPES_COUNT];
...
};
As we saw earlier, by default, the thread-level exception ports are all set to the null port, and the task-level
exception ports are inherited during fork(). Figure 934 shows the initialization of exception handling
during bootstrap. In particular, the Unix exception handler is also initialized here. This handler translates
several types of Mach exceptions to Unix signals. We discuss this mechanism in Section 9.8.8.
Figure 934. Initialization of exception handling during kernel bootstrap
// bsd/kern/bsd_init.c
void
bsdinit_task(void)
{
struct proc *p = current_proc();
struct uthread *ut;
kern_return_t kr;
thread_act_t th_act;
...
// initialize the Unix exception handler
ux_handler_init();
th_act = current_thread();
// the various exception masks are defined in osfmk/mach/exception_types.h
(void)host_set_exception_ports(host_priv_self(),
EXC_MASK_ALL & ~(EXC_MASK_SYSCALL |
EXC_MASK_MACH_SYSCALL | EXC_MASK_RPC_ALERT),
ux_exception_port, EXCEPTION_DEFAULT, 0);
(void)task_set_exception_ports(get_threadtask(th_act),
EXC_MASK_ALL & ~(EXC_MASK_SYSCALL |
EXC_MASK_MACH_SYSCALL | EXC_MASK_RPC_ALERT),
ux_exception_port, EXCEPTION_DEFAULT, 0);
...