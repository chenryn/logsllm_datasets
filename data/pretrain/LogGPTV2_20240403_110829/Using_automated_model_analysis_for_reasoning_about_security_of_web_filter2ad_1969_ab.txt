Q(cid:90)(cid:88)(cid:89)(cid:90)  
X(cid:135)
P
Y
Q has public key 
K 
Shared secret Y 
X is fresh.  
{ }KX
X  encrypted  by 
K 
YX(cid:162)
(cid:178)
X combined with 
Y 
Inference  Rules.    There  is  a  set  of  inference  rules  for  deriving 
new beliefs from old ones. E.g. the message-origin inference rule 
below states that if P knows that K is a secret key between itself 
and Q and it sees a message X encrypted by K, then P is entitled 
to believe that Q said X. Similar inference rules about public keys 
and  shared  secrets  are  also  provided,  as  shown  below.  K-1 
represents the private key corresponding to public key K. 
P
|
≡
Q
K
←→
P P
,
P Q
≡
|
~
|
{ }
X
K
(cid:18)
X
P Q
≡
|
Y
,
(cid:18)(cid:88)(cid:90)(cid:89)(cid:90)
P P
~
|
P Q
X
≡
|
P
|
≡
(cid:54)
K
Q P
,
(cid:18)
{ }
X
−
1
K
P Q
≡
|
(cid:162)
X
(cid:178)
Y
~
|
X
(R1)
A  nonce-verification  rule  (R2)  states  that,  in  addition  if  the 
message is known to be fresh, then  P believes that Q must 
still believe X. Further, the jurisdiction rule (R3) states that, 
if in addition, P also believes that  Q is an authority on the 
subject of X (i.e. Q controls X), then P is entitled to believe 
X itself. 
P Q
≡
|
~
|
X P
,
|
≡
(cid:135)
X
P Q
≡
|
|
≡
X P Q
≡
,
|
|
(cid:159)
X
Idealization. Each message exchanged in the protocol is idealized 
into  a  BAN  formula  representing  meaning  of  the  message 
including  any  facts  that  the  sending  of  the  message  implies. 
Consider  for  example,  the  second  message  in  the  Needham-
291
if 
it  greatly  simplifies  security  analysis 
(a)  a  user  that  has  recently  performed  a  sign-in  action  (and  not 
signed  out  yet)  at  a  provider  is  considered  a  principal  with  a 
named  local  identity,  (b)  a  principal  can  also  be  identified  by 
virtue of any other protocol specific action it performs, e.g. a user 
who recently registered at a website with certain data items. 
4.1.3  Need to Model Secure Channels 
In  the  absence  of  identifying  keys,  some  other  mechanism  is 
required 
to  associate  messages  with  principals.  Clear-text 
communication  is  ignored  by  belief  logics  since  it  does  not 
identify the source. However, most web transactions make use of 
underlying SSL/TLS based secure channels that provide unilateral 
(server)  authentication,  confidentiality  and  integrity.    Since 
security properties of transport layer security mechanisms are well 
understood, 
these 
properties  are  assumed  rather  than  proven  for  each  occurrence  a 
secure  channel.  Secure  channels  not  only  allow  associating 
statements  with  principals  without  identifying  keys  but  also 
ensure fixed end-points and freshness of message exchanges. 
4.1.4  Goals for Web Protocols 
In  a  cryptographic  protocol,  important  beliefs  generated  at 
principals  are  those  concerning  appropriateness  of  keys  and 
secrets. In web protocols, secrets and keys used are transparent to 
the user and thus rarely appear as protocol goals. Instead goals are 
often expressed as belief about a user or principal performing an 
action. E.g. ensuring that user accessing a service, is the one who 
completed  a  successful  payment  for  the  service,  is  a  reasonable 
goal for a web protocol.  
4.2  Extended Syntax 
We  introduce  two  new  types  of objects (sorts) in the logic: user 
and  action.  A  user  is  defined  as  the  client  side  of  a  secure 
channel.  We  use  the  channel  identifier  as  a  subscript  in  our 
notation  for  user.  We  note  that  ‘user’  in  our  logic  is  a  concept 
distinct  from  ‘principal’.  A  user  (end-point  of  a  secure  channel) 
could  be  signed  in  as  different  principals  at  different  epochs 
within  the  same  SSL/TLS  session.  In  the  rest  of  the  paper, 
depending on the context, the term ‘user’ refers either to a specific 
instance of the sort user or a principal playing the end user role.  
For a given protocol, we define a set of function symbols Atype - 
each associated with an arity of the form (cid:592)(cid:883) x …x (cid:592)(cid:144)(cid:3)(cid:1372)(cid:3)(cid:131)(cid:133)(cid:150)(cid:139)(cid:145)(cid:144)(cid:3)(cid:486)(cid:3)
representing  the  type  of  actions  in  the  protocol,  where (cid:592)(cid:883)(cid:481)(cid:3)(cid:485)(cid:3)(cid:592)(cid:144)(cid:3)(cid:3)
are  other  sorts  in  the logic. Then Aname(v(cid:592)(cid:883),  …,  v(cid:592)(cid:144)(cid:4667)(cid:481)(cid:3)(cid:4666)Aname (cid:2035) 
Atype)(cid:481)(cid:3) represents  an  instance  of  an  action  type  executed  in  a 
of  sort (cid:592)(cid:139)(cid:4667)(cid:484)(cid:3)   Actions  could  either  be  generic  or  specific  to  a 
protocol run (with argument v(cid:592)(cid:139)(cid:3)representing a constant or variable 
particular application. E.g. signing in as principal Q, represented 
as SignIn(Q) is a generic action.  
Table 2. Additional operators used in our extended logic. 
P
←→  :
UΔ
C
C is a secure channel between user UC and P. 
CX(cid:97)
(cid:98)  : Formula X exchanged over secure channel C. 
X(cid:1)(cid:134)  : User UC possesses secret X. 
CU
X
(cid:120)(cid:1)(cid:31)
Aname
(
v
σ
1
, ... ,
v
σ
n
)
: Secret X associated with action.
U
C
(cid:20)
(
Aname v
σ
1
, ... ,
v
σ
n
)
: User UC performs action. 
292
4.3  Inference Rules 
We  introduce  inference  rules  of  the  logic  that  allow  simple 
reasoning  about  users,  their  actions  and  associated  secrets.  R4.1 
says that if a principal P (usually server) believes that a user UC is 
communicating over a secure channel C, then any actions it sees 
over the secure channel C can be attributed to user UC. According 
to R4.2, any tokens seen over a secure channel are assumed to be 
possessed by the user. R4.3 says that when the client side receives 
a statement X over a secure channel, it is entitled to believe that 
the server principal believes X.  
P
|
≡
(
P
Δ
←→
U
P
|
≡
(
U
C
C
),
(cid:20)
P
(cid:18) (cid:97)
action
(cid:98)
C
P
|
≡
(
P
Δ
←→
U
C
action
)
(4.1)
P
|
≡
(
U
C
P
(cid:18) (cid:97)
X
(cid:98)
C
X
)
(4.2)
)
,
(cid:134)
U
C
|
≡
(
P
Δ
←→
U
C
),
U
C
(cid:18)
(cid:97)
X
(cid:98)
C
U
C
|
≡
P
|
≡
X
(4.3)
(
R 4)
R4.1 requires the believing principal to be a direct observer of the 
action. R5, on the other hand, allows belief about an action based 
on a secret associated with the action. If P believes secret S to be 
associated with action, and it sees user UC possessing the secret, 
then it believes that action was performed by UC
(cid:134)
action P U
P
S
S
≡
≡
(
|
|
C
P
(
U
action
)
C
               (R5)
While  R4.1,  R5  do  not  require  a  user  to  be  authenticated,  R6  is 
the corresponding rule for authenticated users. R5 says that if P is 
connected  to  UC  over  a  secure  channel  and  believes  that  UC  is 
currently signed in as Q, then P can attribute any actions seen on 
the channel to the principal Q. We use the predicate SignedIn(UC, 
Q) to denote that UC is signed in as Q. 
,
SignedIn U
(cid:18) (cid:97)
←→
U
P
P
P
P
Q
),
),
(
(
≡
≡
|
|
(cid:98)
action
C
c
C
Δ
(cid:120)
|
≡
),
(cid:20)
P
|
≡
(
Q acti
(cid:20)
on
)
       (R6)          
For browser based protocols, presence of a cookie can be used to 
establish whether a principal is signed-in or is aware of an action 
associated with a cookie. We use variable name ck and constants 
named Ckx (x is a principal name or an action) for cookies.  
P
|
≡
(
P
←→
UΔ
C
),
P
|
≡
ck
(cid:120)
SignIn Q P
),
(
(
)
P SignedIn
U Q
≡
,
|
c
(cid:18) (cid:97)
ck
(cid:98)
C
    (R7)
Due  to  space  limitation,  we  are  unable  to  include  a  proof  of 
soundness  but  walk  through  important  steps  here.  The  proof 
builds  on  semantics  of  BAN  described  in  [6].  In  addition  to  the 
model of [6], we associate a user with two collections: a sequence 
of actions executed by it and a set of actions it is allowed to assert 