:::
LVM 提供对 RAID 逻辑卷的清理支持。RAID
清理是读取阵列中的所有数据和奇偶校验块的过程，并检查它们是否是分配的。
::: orderedlist
**流程**
1.  可选：限制清理过程使用的 I/O 带宽。
    当您执行 RAID 清理操作时，`sync`{.literal} 操作所需的后台 I/O 可从
    LVM 设备中分离其他 I/O，比如卷组元数据更新。这可能导致其它 LVM
    操作速度下降。您可以使用节流功能控制清理操作的速度。
    在下一步的 `lvchange --syncaction`{.literal} 命令中添加以下选项：
    ::: variablelist
    [`--maxrecoveryrate Rate[bBsSkKmMgG]`{.literal}]{.term}
    :   设置最大恢复率，以便使操作不会严重影响小的 I/O
        操作。将恢复率设置为 0 表示它将不被绑定。
    [`--minrecoveryrate Rate[bBsSkKmMgG]`{.literal}]{.term}
    :   设置最小恢复率来确保 `sync`{.literal} 操作的 I/O
        获得最小吞吐量，即使存在大量 I/O。
    :::
    指定[*比率*]{.emphasis}，格式为"数量/每秒/阵列中的每个设备"。如果没有后缀，选项会假定为
    kiB/每秒/每个设备。
2.  显示阵列中未修复的差异的数量，没有修复它们：
    ``` screen
    # lvchange --syncaction check vg/raid_lv
    ```
3.  修正阵列中的差异：
    ``` screen
    # lvchange --syncaction repair vg/raid_lv
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `lvchange --syncaction repair`{.literal} 操作没有执行与
    `lvconvert --repair`{.literal} 操作相同的功能：
    ::: itemizedlist
    -   `lvchange --syncaction repair`{.literal}
        操作会在阵列中启动一个后台同步操作。
    -   `lvconvert --repair`{.literal} 操作修复或者替换镜像或者 RAID
        逻辑卷中失败的设备。
    :::
    :::
4.  可选：显示 scrubbing 操作的信息：
    ``` screen
    # lvs -o +raid_sync_action,raid_mismatch_count vg/lv
    ```
    ::: itemizedlist
    -   `raid_sync_action`{.literal} 字段显示 RAID
        卷执行的当前同步操作。可以是以下值之一：
        ::: variablelist
        [`idle`{.literal}]{.term}
        :   所有同步操作完成（什么都不做）
        [`resync`{.literal}]{.term}
        :   初始化阵列或在机器失败后恢复
        [`recover`{.literal}]{.term}
        :   替换阵列中的设备
        [`check`{.literal}]{.term}
        :   查找阵列的不一致
        [`repair`{.literal}]{.term}
        :   查找并修复不一致
        :::
    -   `raid_mismatch_count`{.literal} 字段显示在 `check`{.literal}
        操作中出现的差异数。
    -   `Cpy%Sync`{.literal} 字段显示 `sync`{.literal} 操作的进度。
    -   `lv_attr`{.literal} 字段提供额外指示。这个字段中的第 9
        位显示逻辑卷的健康状况，它支持以下指示：
        ::: itemizedlist
        -   `m`{.literal} （mismatches）表示 RAID
            逻辑卷存在差异。这个字符在 scrubbing 操作侦测到部分 RAID
            不一致时就会显示。
        -   `r`{.literal} （refresh）表示 RAID
            阵列中的某个设备有故障，且内核将其认为失败，即使 LVM
            可以读取该设备标签，且认为该设备正常运行。刷新逻辑卷通知内核该设备现在可用
            ; 如果您怀疑设备失败，则替换该设备。
        :::
    :::
:::
::: itemizedlist
**其它资源**
-   详情请查看 `lvchange(8)`{.literal} 和 `lvmraid(7)`{.literal} man
    page。
:::
:::
::: section
::: titlepage
## []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#failed-devices-in-lvm-raid_troubleshooting-lvm-raid}LVM RAID 中失败的设备 {.title}
:::
RAID 跟传统的 LVM 镜像不同。LVM
镜像需要删除失败的设备，或者镜像逻辑卷会挂起。RAID
阵列可在有失败设备的情况下继续运行。实际上，对于 RAID1 以外的 RAID
类型，删除设备意味着将设备转换为较低级别 RAID（例如：从 RAID6 转换为
RAID5，或者从 RAID4 或者 RAID5 转换到 RAID0）。
因此，LVM 允许您使用 `lvconvert`{.literal} 命令中的 `--repair`{.literal}
参数替换 RAID 卷中失败的设备，而不是无条件地删除失败的设备。
:::
::: section
::: titlepage
## []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#recovering-a-failed-raid-device-in-a-logical-volume_troubleshooting-lvm-raid}在逻辑卷中恢复失败的 RAID 设备 {.title}
:::
如果 LVM RAID
设备失败是一个临时故障，或者您可以修复失败的设备，您可以初始化失败设备的恢复。
::: itemizedlist
**先决条件**
-   之前失败的设备现在可以正常工作。
:::
::: itemizedlist
**流程**
-   刷新包含 RAID 设备的逻辑卷：
    ``` screen
    # lvchange --refresh my_vg/my_lv
    ```
:::
::: itemizedlist
**验证步骤**
-   使用恢复的设备检查逻辑卷：
    ``` screen
    # lvs --all --options name,devices,lv_attr,lv_health_status my_vg
    ```
:::
:::
::: section
::: titlepage
## []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#proc-replacing-failed-raid-device-troubleshooting-lvm-raid}在逻辑卷中替换失败的 RAID 设备 {.title}
:::
这个过程替换作为 LVM RAID 逻辑卷中的物理卷的失败设备。
::: itemizedlist
**先决条件**
-   卷组包含一个物理卷，它有足够的可用容量替换失败的设备。
    如果在卷组中没有足够可用扩展的物理卷，请使用 `vgextend`{.literal}
    程序添加新的、足够大的物理卷。
:::
::: orderedlist
**流程**
1.  在下面的示例中，RAID 逻辑卷布局如下：
    ``` screen
    # lvs --all --options name,copy_percent,devices my_vg
      LV               Cpy%Sync Devices
      my_lv            100.00   my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
      [my_lv_rimage_0]          /dev/sde1(1)
      [my_lv_rimage_1]          /dev/sdc1(1)
      [my_lv_rimage_2]          /dev/sdd1(1)
      [my_lv_rmeta_0]           /dev/sde1(0)
      [my_lv_rmeta_1]           /dev/sdc1(0)
      [my_lv_rmeta_2]           /dev/sdd1(0)
    ```
2.  如果 `/dev/sdc`{.literal} 设备失败，则 `lvs`{.literal}
    命令的输出如下：
    ``` screen
    # lvs --all --options name,copy_percent,devices my_vg
      /dev/sdc: open failed: No such device or address
      Couldn't find device with uuid A4kRl2-vIzA-uyCb-cci7-bOod-H5tX-IzH4Ee.
      WARNING: Couldn't find all devices for LV my_vg/my_lv_rimage_1 while checking used and assumed devices.
      WARNING: Couldn't find all devices for LV my_vg/my_lv_rmeta_1 while checking used and assumed devices.
      LV               Cpy%Sync Devices
      my_lv            100.00   my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
      [my_lv_rimage_0]          /dev/sde1(1)
      [my_lv_rimage_1]          [unknown](1)
      [my_lv_rimage_2]          /dev/sdd1(1)
      [my_lv_rmeta_0]           /dev/sde1(0)
      [my_lv_rmeta_1]           [unknown](0)
      [my_lv_rmeta_2]           /dev/sdd1(0)
    ```
3.  替换失败的设备并显示逻辑卷：
    ``` screen
    # lvconvert --repair my_vg/my_lv
      /dev/sdc: open failed: No such device or address
      Couldn't find device with uuid A4kRl2-vIzA-uyCb-cci7-bOod-H5tX-IzH4Ee.
      WARNING: Couldn't find all devices for LV my_vg/my_lv_rimage_1 while checking used and assumed devices.
      WARNING: Couldn't find all devices for LV my_vg/my_lv_rmeta_1 while checking used and assumed devices.
    Attempt to replace failed RAID images (requires full device resync)? [y/n]: y
      Faulty devices in my_vg/my_lv successfully replaced.
    ```
    可选： 要手动指定替换失败设备的物理卷，请在命令末尾添加物理卷：
    ``` screen
    # lvconvert --repair my_vg/my_lv replacement_pv
    ```
4.  使用替换检查逻辑卷：
    ``` screen
    # lvs --all --options name,copy_percent,devices my_vg
      /dev/sdc: open failed: No such device or address
      /dev/sdc1: open failed: No such device or address
      Couldn't find device with uuid A4kRl2-vIzA-uyCb-cci7-bOod-H5tX-IzH4Ee.
      LV               Cpy%Sync Devices
      my_lv            43.79    my_lv_rimage_0(0),my_lv_rimage_1(0),my_lv_rimage_2(0)
      [my_lv_rimage_0]          /dev/sde1(1)
      [my_lv_rimage_1]          /dev/sdb1(1)
      [my_lv_rimage_2]          /dev/sdd1(1)
      [my_lv_rmeta_0]           /dev/sde1(0)
      [my_lv_rmeta_1]           /dev/sdb1(0)
      [my_lv_rmeta_2]           /dev/sdd1(0)
    ```
    在您从卷组中删除失败的设备前，LVM 工具仍然指示 LVM
    无法找到失败的设备。
5.  从卷组中删除失败的设备：
    ``` screen
    # vgreduce --removemissing VG
    ```
:::
:::
:::
::: section
::: titlepage
# []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#troubleshooting-insufficient-free-extents-for-a-logical-volume_troubleshooting-lvm}对逻辑卷的可用扩展不足 {.title}
:::
当试图创建逻辑卷时，您可能会得到 `Insufficient free extents`{.literal}
错误信息，即使您认为卷组有足够的可用空间。您可以排除这个错误以便在卷组中创建逻辑卷。
::: section
::: titlepage
## []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#con_lvm-volume-groups_troubleshooting-insufficient-free-extents-for-a-logical-volume}卷组 {.title}
:::
物理卷合并为卷组（VG）。这样就创建了一个磁盘空间池，可使用它分配逻辑卷。
在卷组中，可用于分配的磁盘空间被分成固定大小的单元，我们称之为扩展。一个扩展就是可被分配的最小空间单位。在物理卷中，扩展被称为物理扩展。
逻辑卷被分配成与物理卷扩展大小相同的逻辑扩展。因此卷组中的所有逻辑卷的扩展大小都是一样的。卷组将逻辑扩展与物理扩展匹配。
:::
::: section
::: titlepage
## []{#troubleshooting-lvm_configuring-and-managing-logical-volumes.html#rounding-errors-in-lvm-output_troubleshooting-insufficient-free-extents-for-a-logical-volume}LVM 输出中的轮询错误 {.title}
:::
报告卷组空间使用情况的 LVM 命令会将报告数四舍五入为 2
十进制位置，以提供人类可读的输出。这包括 `vgdisplay`{.literal} 和
`vgs`{.literal} 工具。
因此，报告的剩余空间值可能大于卷组中物理扩展提供的内容。如果您试图根据报告可用空间的大小创建逻辑卷，则可能会遇到以下错误：
``` screen
Insufficient free extents
```
要临时解决这个问题，您必须检查卷组中可用物理扩展的数量，即可用空间的具体值。然后您可以使用扩展数目成功创建逻辑卷。
:::