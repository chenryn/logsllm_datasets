If you validate a form field with, for instance,
`Symfony\Component\Validator\Constraints\Length` and submit the form with the
value of the field as an array, the `LengthValidator` will throw an
`UnexpectedTypeException`, generating a 500 response, instead of adding a
violation to the form field.
I tried to work around this issue by adding a `Type` constraint, but the
`Length` constraint seems to be validated first. I also believe that most of
the constraints that are affected (see the bottom of this issue) should
implicitly validate the type as well. Having to add `Constraints\Type("File")`
to an already existing `Constraints\File` seems counter-intuitive to me.
To reproduce this, consider the following form type:
    add('test', FormType\TextType::class, array(
                    'constraints'   => array(
                        new Constraints\NotBlank(),
                        new Constraints\Length(5),
                    ),
                ))
            ;
        }
    }
If you submit the following request, you will receive an error page:
    POST / HTTP/1.1
    Host: localhost
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 19
    test[test][foo]=bar
This is due to the following piece of code which is present in
`Symfony\Component\Validator\Constraints\LengthValidator`:
        public function validate($value, Constraint $constraint)
        {
            // [...]
            if (!is_scalar($value) && !(is_object($value) && method_exists($value, '__toString'))) {
                throw new UnexpectedTypeException($value, 'string');
            }
            // [...]
        }
Similar checks seem to be present in the following constraints:  
`Country`, `Currency`, `DateTime`, `Date`, `Email`, `File`, `Iban`, `Ip`,
`Isbn`, `Issn`, `Language`, `Length`, `Locale`, `Regex`, `Time`, `Url`, `Uuid`