Please:
  * Check for duplicate issues.
  * Provide a complete example of how to reproduce the bug, wrapped in triple backticks like this:
`average` will succeed if `axis=False` but fail when using `value_and_grads`
    import jax
    def fn(arg_0):
        return jax.numpy.average(arg_0, axis=False).sum()
    mykey = jax.random.PRNGKey(92127318)
    array = jax.random.uniform(mykey, [2, 3, 4], jax.numpy.float32, minval=0, maxval=2)
    arg_0 = array.clone()
    print(fn(arg_0))
    # 12.970601
    arg_0 = array.clone()
    jax.value_and_grad(fn, (0))(arg_0)
    # ValueError: boolean array argument obj to delete must be one dimensional and match the axis length of 3
  * If applicable, include full error messages/tracebacks.
    ---------------------------------------------------------------------------
    JaxStackTraceBeforeTransformation         Traceback (most recent call last)
    /usr/local/Cellar/python@3.9/3.9.12_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/runpy.py in _run_module_as_main(***failed resolving arguments***)
        196         sys.argv[0] = mod_spec.origin
    --> 197     return _run_code(code, main_globals, None,
        198                      "__main__", mod_spec)
    /usr/local/Cellar/python@3.9/3.9.12_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/runpy.py in _run_code(***failed resolving arguments***)
         86                        __spec__ = mod_spec)
    ---> 87     exec(code, run_globals)
         88     return run_globals
    ~/Library/Python/3.9/lib/python/site-packages/ipykernel_launcher.py in 
         15     from ipykernel import kernelapp as app
    ---> 16     app.launch_new_instance()
    ~/Library/Python/3.9/lib/python/site-packages/traitlets/config/application.py in launch_instance(***failed resolving arguments***)
        844         app.initialize(argv)
    --> 845         app.start()
        846 
    ~/Library/Python/3.9/lib/python/site-packages/ipykernel/kernelapp.py in start(***failed resolving arguments***)
        618             try:
    --> 619                 self.io_loop.start()
        620             except KeyboardInterrupt:
    ~/Library/Python/3.9/lib/python/site-packages/tornado/platform/asyncio.py in start(***failed resolving arguments***)
        198             asyncio.set_event_loop(self.asyncio_loop)
    --> 199             self.asyncio_loop.run_forever()
        200         finally:
    /usr/local/Cellar/python@3.9/3.9.12_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py in run_forever(***failed resolving arguments***)
        600             while True:
    --> 601                 self._run_once()
        602                 if self._stopping:
    /usr/local/Cellar/python@3.9/3.9.12_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py in _run_once(***failed resolving arguments***)
       1904             else:
    -> 1905                 handle._run()
       1906         handle = None  # Needed to break cycles when an exception occurs.
    /usr/local/Cellar/python@3.9/3.9.12_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/events.py in _run(***failed resolving arguments***)
         79         try:
    ---> 80             self._context.run(self._callback, *self._args)
         81         except (SystemExit, KeyboardInterrupt):
    ~/Library/Python/3.9/lib/python/site-packages/tornado/ioloop.py in (***failed resolving arguments***)
        687             future.add_done_callback(
    --> 688                 lambda f: self._run_callback(functools.partial(callback, future))
        689             )
    ~/Library/Python/3.9/lib/python/site-packages/tornado/ioloop.py in _run_callback(***failed resolving arguments***)
        740         try:
    --> 741             ret = callback()
        742             if ret is not None:
    ~/Library/Python/3.9/lib/python/site-packages/tornado/gen.py in inner(***failed resolving arguments***)
        813                 f = None  # noqa: F841
    --> 814                 self.ctx_run(self.run)
        815 
    ~/Library/Python/3.9/lib/python/site-packages/tornado/gen.py in run(***failed resolving arguments***)
        774                     else:
    --> 775                         yielded = self.gen.send(value)
        776 
    ~/Library/Python/3.9/lib/python/site-packages/ipykernel/kernelbase.py in process_one(***failed resolving arguments***)
        357                 return None
    --> 358         yield gen.maybe_future(dispatch(*args))
        359 
    ~/Library/Python/3.9/lib/python/site-packages/tornado/gen.py in wrapper(***failed resolving arguments***)
        233                 try:
    --> 234                     yielded = ctx_run(next, result)
        235                 except (StopIteration, Return) as e:
    ~/Library/Python/3.9/lib/python/site-packages/ipykernel/kernelbase.py in dispatch_shell(***failed resolving arguments***)
        260             try:
    --> 261                 yield gen.maybe_future(handler(stream, idents, msg))
        262             except Exception:
    ~/Library/Python/3.9/lib/python/site-packages/tornado/gen.py in wrapper(***failed resolving arguments***)
        233                 try:
    --> 234                     yielded = ctx_run(next, result)
        235                 except (StopIteration, Return) as e:
    ~/Library/Python/3.9/lib/python/site-packages/ipykernel/kernelbase.py in execute_request(***failed resolving arguments***)
        535         reply_content = yield gen.maybe_future(
    --> 536             self.do_execute(
        537                 code, silent, store_history,
    ~/Library/Python/3.9/lib/python/site-packages/tornado/gen.py in wrapper(***failed resolving arguments***)
        233                 try:
    --> 234                     yielded = ctx_run(next, result)
        235                 except (StopIteration, Return) as e:
    ~/Library/Python/3.9/lib/python/site-packages/ipykernel/ipkernel.py in do_execute(***failed resolving arguments***)
        301                 # letting shell dispatch to loop runners
    --> 302                 res = shell.run_cell(code, store_history=store_history, silent=silent)
        303         finally:
    ~/Library/Python/3.9/lib/python/site-packages/ipykernel/zmqshell.py in run_cell(***failed resolving arguments***)
        538         self._last_traceback = None
    --> 539         return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)
        540 
    ~/Library/Python/3.9/lib/python/site-packages/IPython/core/interactiveshell.py in run_cell(***failed resolving arguments***)
       2897         try:
    -> 2898             result = self._run_cell(
       2899                 raw_cell, store_history, silent, shell_futures)
    ~/Library/Python/3.9/lib/python/site-packages/IPython/core/interactiveshell.py in _run_cell(***failed resolving arguments***)
       2943         try:
    -> 2944             return runner(coro)
       2945         except BaseException as e:
    ~/Library/Python/3.9/lib/python/site-packages/IPython/core/async_helpers.py in _pseudo_sync_runner(***failed resolving arguments***)
         67     try:
    ---> 68         coro.send(None)
         69     except StopIteration as exc:
    ~/Library/Python/3.9/lib/python/site-packages/IPython/core/interactiveshell.py in run_cell_async(***failed resolving arguments***)
       3168 
    -> 3169                 has_raised = await self.run_ast_nodes(code_ast.body, cell_name,
       3170                        interactivity=interactivity, compiler=compiler, result=result)
    ~/Library/Python/3.9/lib/python/site-packages/IPython/core/interactiveshell.py in run_ast_nodes(***failed resolving arguments***)
       3360                         asy = compare(code)
    -> 3361                     if (await self.run_code(code, result,  async_=asy)):
       3362                         return True
    ~/Library/Python/3.9/lib/python/site-packages/IPython/core/interactiveshell.py in run_code(***failed resolving arguments***)
       3440                 else:
    -> 3441                     exec(code_obj, self.user_global_ns, self.user_ns)
       3442             finally:
     in 
         17     arg_0 = arg_0_array.clone()
    ---> 18     results['res_2'], _ = jax.value_and_grad(fn, (0))(arg_0)
         19 except Exception as e:
     in fn(***failed resolving arguments***)
          5     returned = False
    ----> 6     return jax.numpy.average(arg_0, arg_1, returned=returned).sum()
          7 try:
    /usr/local/lib/python3.9/site-packages/jax/_src/numpy/reductions.py in average(***failed resolving arguments***)
        284             returned=False):
    --> 285   return _average(a, _ensure_optional_axes(axis), weights, returned)
        286 
    /usr/local/lib/python3.9/site-packages/jax/_src/numpy/reductions.py in _average(***failed resolving arguments***)
        292   if weights is None: # Treat all weights as 1
    --> 293     avg = mean(a, axis=axis)
        294     if axis is None:
    /usr/local/lib/python3.9/site-packages/jax/_src/numpy/reductions.py in mean(***failed resolving arguments***)
        251          out=None, keepdims=False, *, where=None):
    --> 252   return _mean(a, _ensure_optional_axes(axis), dtype, out, keepdims,
        253                where=where)
    /usr/local/lib/python3.9/site-packages/jax/_src/numpy/reductions.py in _mean(***failed resolving arguments***)
        278   return lax.div(
    --> 279       sum(a, axis, dtype=dtype, keepdims=keepdims, where=where),
        280       lax.convert_element_type(normalizer, dtype))
    /usr/local/lib/python3.9/site-packages/jax/_src/numpy/reductions.py in sum(***failed resolving arguments***)
        164         out=None, keepdims=None, initial=None, where=None):
    --> 165   return _reduce_sum(a, axis=_ensure_optional_axes(axis), dtype=dtype, out=out,
        166                      keepdims=keepdims, initial=initial, where=where)
    /usr/local/lib/python3.9/site-packages/jax/_src/numpy/reductions.py in _reduce_sum(***failed resolving arguments***)
        156                 dtype=None, out=None, keepdims=None, initial=None, where=None):
    --> 157   return _reduction(a, "sum", np.sum, lax.add, 0,
        158                     bool_op=lax.bitwise_or, upcast_f16_for_computation=True,
    /usr/local/lib/python3.9/site-packages/jax/_src/numpy/reductions.py in _reduction(***failed resolving arguments***)
         97   else:
    ---> 98     result = lax.reduce(a, init_val, op, dims)
         99   if initial is not None:
    JaxStackTraceBeforeTransformation: ValueError: boolean array argument obj to delete must be one dimensional and match the axis length of 3
    The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.
    --------------------
    The above exception was the direct cause of the following exception:
    ValueError                                Traceback (most recent call last)
     in 
         11 
         12 arg_0 = array.clone()
    ---> 13 jax.value_and_grad(fn, (0))(arg_0)
        [... skipping hidden 37 frame]
     in delete(*args, **kwargs)
    /usr/local/lib/python3.9/site-packages/numpy/lib/function_base.py in delete(arr, obj, axis)
       4470         if obj.dtype == bool:
       4471             if obj.shape != (N,):
    -> 4472                 raise ValueError('boolean array argument obj to delete '
       4473                                  'must be one dimensional and match the axis '
       4474                                  'length of {}'.format(N))
    ValueError: boolean array argument obj to delete must be one dimensional and match the axis length of 3