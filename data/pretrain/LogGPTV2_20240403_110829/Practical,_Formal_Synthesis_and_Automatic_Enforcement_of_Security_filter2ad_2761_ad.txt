### SEPAR: A Comprehensive Tool for Detecting and Mitigating ICC Vulnerabilities

SEPAR is a tool designed to detect and mitigate Inter-Component Communication (ICC) vulnerabilities in Android applications. It includes a policy enforcer, known as the APE module, which leverages the Xposed framework to prevent event messages that violate synthesized policies. This document presents the results of our evaluation of SEPAR, addressing several research questions.

#### Research Questions
1. **RQ1: Accuracy** - How accurate is SEPAR in detecting ICC vulnerabilities compared to other state-of-the-art techniques?
2. **RQ2: Practical Performance** - How well does SEPAR perform in real-world applications? Can it find security exploits and synthesize corresponding protection policies?
3. **RQ3: Analysis Performance** - What is the performance of SEPAR's analysis when using static analyzers and SAT solving technologies?
4. **RQ4: Policy Enforcement Performance** - What is the performance of SEPAR’s policy enforcement?

### A. Results for RQ1 (Accuracy)

To evaluate the accuracy of SEPAR, we used two benchmark suites: DroidBench [4] and ICC-Bench [8]. These benchmarks contain Android applications with known ICC-based privacy leaks, providing a ground truth for our evaluation. The test cases include commonly used ICC methods found in Google Play apps, as well as unreachable yet vulnerable components, which are considered false positives if detected.

We compared SEPAR with existing tools such as DidFail [40] and AmanDroid [57]. COVERT [17] was excluded because it only targets privilege escalation, and IccTA [41] was not included due to technical difficulties.

**Table I: Comparison of SEPAR, DidFail, and AmanDroid**

| Test Case | SEPAR | DidFail | AmanDroid |
|-----------|-------|---------|------------|
| bindService1 | ✓ | ✗ | ✗ |
| bindService2 | ✓ | ✗ | ✗ |
| bindService3 | ✓ | ✗ | ✗ |
| bindService4 | ✓ | ✗ | ✗ |
| sendBroadcast1 | ✓ | ✗ | ✗ |
| startActivity1 | ✓ | ✗ | ✗ |
| startActivity2 | ✓ | ✗ | ✗ |
| startActivity3 | ✓ | ✗ | ✗ |
| startActivity4 | ✓ | ✗ | ✗ |
| startActivity5 | ✓ | ✗ | ✗ |
| startActivityForResult1 | ✓ | ✗ | ✗ |
| startActivityForResult2 | ✓ | ✗ | ✗ |
| startActivityForResult3 | ✓ | ✗ | ✗ |
| startActivityForResult4 | ✓ | ✗ | ✗ |
| startService1 | ✓ | ✗ | ✗ |
| startService2 | ✓ | ✗ | ✗ |
| delete1 | ✓ | ✗ | ✗ |
| insert1 | ✓ | ✗ | ✗ |
| query1 | ✓ | ✗ | ✗ |
| update1 | ✓ | ✗ | ✗ |
| startActivity1 (IAC) | ✓ | ✗ | ✗ |
| startService1 (IAC) | ✓ | ✗ | ✗ |
| sendBroadcast1 (IAC) | ✓ | ✗ | ✗ |

**Key Findings:**
- SEPAR successfully detected all 23 known vulnerabilities in DroidBench and 7 out of 9 in ICC-Bench.
- SEPAR correctly identified privacy leaks in `bindService4` and `startActivityForResults4`.
- SEPAR correctly ignored non-reachable code, avoiding false positives.
- SEPAR missed vulnerabilities caused by dynamic registration of Broadcast Receivers, which is not handled by its model extractor.
- AmanDroid and DidFail performed worse, with DidFail missing vulnerabilities due to explicit Intents.

### B. Results for RQ2 (SEPAR and Real-World Apps)

To assess SEPAR's practical performance, we collected 4,000 apps from four sources:
1. **Google Play**: 600 randomly selected and 1,000 most popular free apps.
2. **F-Droid**: 1,100 free and open-source apps.
3. **Malgenome**: 1,200 malware samples.
4. **Bazaar**: 100 popular third-party apps.

We partitioned these apps into 80 non-overlapping bundles, each containing 50 apps, simulating a typical end-user device. SEPAR identified:
- 97 apps vulnerable to Intent hijack.
- 124 apps vulnerable to Activity/Service launch.
- 128 apps vulnerable to inter-component sensitive information leakage.
- 36 apps vulnerable to privilege escalation.

**Case Studies:**
- **Activity/Service Launch**: Barcoder, a barcode scanner app, exposes an unprotected Intent Filter, allowing unauthorized payments.
- **Intent Hijack**: Hesabdar, an accounting app, sends user account information via implicit Intents, which can be intercepted by malicious apps.
- **Information Leakage**: OwnCloud, a cloud-based file synchronization app, logs account information in an unprotected area, making it accessible to other apps.
- **Privilege Escalation**: Ermete SMS, a text messaging app, allows any app to send SMS without permission checks.

### C. Results for RQ3 (Performance and Timing)

We evaluated SEPAR's performance on a PC with an Intel Core i7 2.4 GHz CPU and 4 GB of RAM, using Sat4J as the SAT solver.

**Figure 5: Scatter plot representing analysis time for model extraction of Android apps.**

The scatter plot shows that SEPAR statically analyzes 95% of apps in less than two minutes. The total static analysis time scales linearly with the size of the apps.

**Table II: Experiments performance statistics.**

| Components | Intents | Intent Filters | Time (sec) |
|------------|---------|---------------|-------------|
| 313        | 322     | 148           | 260         |
|            |         |               | 57          |

### Conclusion

SEPAR demonstrates high accuracy and practical utility in detecting and mitigating ICC vulnerabilities. It outperforms existing tools in terms of both precision and recall, and it provides efficient and scalable performance for real-world applications.