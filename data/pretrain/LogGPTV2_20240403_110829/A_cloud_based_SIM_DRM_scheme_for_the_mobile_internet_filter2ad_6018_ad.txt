running in a hostile environment. Firstly,
to crack a SIM card thanks to well-developed industrial
standards, such as ISO 7816, GSM 11.11, and GSM 11.14.
Secondly, algorithms used in a SIM card are kept strictly con-
ﬁdential by the mobile operator. The encryption/decryption
schema of CS-DRM can be established on most of the
complex and advanced encryption/decryption algorithms,
which only need to customize the encryption/decryption
algorithms and adjust corresponding encryption/decryption
steps in the SIM card and license service. In this paper,
for convenience of explanation, the Advanced Encryption
Standard (AES) is adopted as the encryption/decryption
schema of CS-DRM. Thirdly, data hiding approaches applied
in the ﬁle system of the SIM card make LSW secure and
invisible to crackers. Finally, the interaction between a SIM
card and a DRM agent is protected by LSWP.
Another important security issue is how we can make
the DRM agent and the player in the mobile device enough
trustworthy. CS-DRM solves this issue from two aspects. On
one hand, in industry, there are kinds of certiﬁcation systems
based on diﬀerent mobile operating systems. The mobile
device can trust the applications if they pass the veriﬁcations
of these certiﬁcation systems. For instance, since we are the
Symbian partner in business, we own a special certiﬁcate for
the electronic signature. The programs of the DRM agent and
the player are signed by our special key. The SIM card checks
signatures of the DRM agent and the player in order to make
sure that they are enough trustworthy. On the other hand, the
data stream for the communication between the applications
running on the mobile device, such as the DRM agent and
EURASIP Journal on Wireless Communications and Networking
11
Table 4: A Comparison of Some DRM Schemes.
DRM Scheme
OMA DRM [1]
Conrado et al.’s
DRM [4]
Characteristic
Device based
Smart card based
Encrypted Content
Privacy Protection
PKI used in the license
delivery
Yes
No
Yes
No
Yes
No
Information Stored
Public/Private key
PK/SK, SKp, and
(cid:5)
p
SK
TMP-based DRM [17]
CS-DRM
Trust mobile platform
based
Yes
Yes
Yes
SIM card and cloud based
Yes
Yes
No
Public/Private key and
sensitive information for
proving the identity
Ki, LSW, and sensitive
information for proving the
identity
the player, are in the decoded format, which guarantees the
security of the communication.
Three types of attacks are listed as follows. We analyze
these attacks and present the solutions in CS-DRM.
Attack 1: Tamper the License. CS-DRM guarantees the
integrity of a license by the LSW and SIM card. A hash value
(Hash) will be calculated according to the license. The DRM
agent compares the computed Hash with License Hash in the
LSW by LSWP, before it uses the license. Once the license
has been tampered, the computed Hash is diﬀerent from the
License Hash. The modiﬁcation can be noticed by the DRM
agent, and then a mark is made on the license. The tampered
license is not available anymore; therefore, the attacker could
not use the tampered license.
Attack 2: Tamper or Detect the LSW. First, the LSW is stored
in the SIM card ﬁle system which owns complete access
control mechanism for the ﬁle system. Only authorized
program can access and modify the SIM card ﬁle system.
Because of that, a malicious user could not tamper the SIM
card ﬁle system. Second, a malicious user can scan the SIM
card ﬁle system using special tools such as SIMbrush [15].
However, the data hiding approach applied on the LSW
makes LSW invisible. Therefore, a malicious user will not
detect the LSW information even if (s)he can scan the ﬁle
system. Then, the attacker could not access the content by
tampering or detecting the LSW.
Attack 3: SIM Card Replication Attack. An attacker may
replicate a SIM card and attempt to illegally access the
content many times. However, the LSW will be modiﬁed
immediately once the attacker stops playing the content. The
information in the license server will be updated when the
upload phase starts. In the upload phase, only the LSW
with the correct version can be updated in the license server.
Otherwise, if another SIM card uploads LSW with the wrong
version, the license server will send a command to ask the
SIM card to delete LSW. So only one user can access the
content by the SIM card at a time.
5.2. Privacy Analysis. CS-DRM has the privacy protection
for users. In our scheme, IMSI of the SIM card is the only
sensitive information which can be used to know the user
identity. However, the hash value of IMSI instead of IMSI
itself is used during the process of the license acquisition,
so that the license server could not match this hash value
with a certain user. Meanwhile, the mobile operator does
not divulge user privacy, which makes sure that the license
server can only get Ki and is impossible to acquire the user
identity information from the mobile operator. Without the
permission of the mobile operator, the license server has
no rights to check IMSI. Let alone surveying user privacy.
Therefore, no one could acquire the privacy information of a
user, such as the license list of contents consumed by a user
and the user identity.
However, the certain user would be identiﬁed by exhaus-
tively searching all possible IMSI instead of reversing the hash
value. The number of the legal IMSI is limited. The attack
seems to be possible. In order to prevent this kind of exhaus-
tively searching attack, we can apply an encoding/decoding
function on the IMSI hash. Only the SIM card and the
mobile operator know how to encode/decode the message.
In this way, the IMSI hash is safe enough for the exhaustively
searching. This kind of encoding/decoding function can be
ﬂexible. Here we give the mode we used, as shown in Table 5.
The IMSI hash is expressed in hexadecimal. The original
IMSI hash is 20 bytes in the prototype. After the IMSI hash
is encoded in the frontend, the new IMSI hash is 37 bytes.
The ﬁrst byte denotes the mode of the encoding. If the ﬁrst
bit is 0, the encoding starts from the left-hand side, otherwise
from the right-hand side. If there are more 1’s than 0’s in the
rest 7 bits, the distribution of 1’s in the next 4 bytes denotes
the positions of the original 20 bytes appearing in the new
one. The rest positions are padded with random numbers.
Otherwise, the distribution of 0’s denotes the positions. Only
the mobile operator can decode this new IMSI hash to the
original one, and then ﬁnd the corresponding Ki.
5.3. Cost Analysis. In this subsection, we elaborate on
the cost of CS-DRM. Comparing with existing DRM
schemes, the cost of CS-DRM is much lower. First, for
smart card-based DRM schemes, a SIM card replaces a
smart card in CS-DRM, which reduces the cost for issuing
a smart card and a smart card reader. Second, the sensitive
data, for example, Kcek in the license, are encrypted by the
12
EURASIP Journal on Wireless Communications and Networking
Table 5: The encoding/decoding mode of IMSI hash.
1 byte
1 bit 2–8 bits
2–5 bytes
32 bits
0
1001110 10011010001001110011110110111111
Left
The distribution of 1’s denotes the positions
6–37 bytes expressed in hexadecimal
The original IMSI hash:
C635D8403E49CC949D155FFB90C16E50E9383196
The new IMSI hash in the encoded format:
C6357835D8FA407894653EAC5749CC94BC219D155FFB5590C1F46E50E9383196
encryption/decryption and authentication mechanisms
designed in CS-DRM. Comparing with some DRM schemes
(such as OMA DRM) which protect the sensitive data
depending on the mechanisms of Certiﬁcate Authority (CA)
and PKI, CS-DRM removes CA from the scheme and then
reduces the cost of purchasing certiﬁcations for each cloud
client. Third, as we mentioned before in Section 2.2.3, CS-
DRM is a cloud-based DRM scheme whose most important
characteristic is its “pay-as-you-go” manner. The owner
of CS-DRM does not need to purchase the infrastructure
which may be too expensive to be aﬀorded, such as software
and physical servers. CS-DRM only demands to rent services
provided by the cloud computing. The cost of renting
services is much lower than that of buying software and
hardware. Meanwhile, the high elasticity of the cloud brings
capabilities of matching resources to workload much more
closely by adding or removing resources at an acceptable
time of minutes rather than weeks, which makes CS-DRM
satisfy the requirements of cloud clients automatically
according to the current demands with a low cost. Also, the
disaster recovery and maintenance cost of the entire system
is reduced by the cloud.
5.4. Cloud DRM. CS-DRM is a cloud-based DRM scheme.
The cloud enhances our DRM scheme at three following
aspects. First, the virtualization technology used above the
infrastructure of the cloud guarantees the data security,
sharing, and isolation among tenants of the content server.
Second, because of the cloud, CS-DRM has high elasticity as
well as the “pay-as-you-go” manner of the cloud. The cost of
our DRM scheme is signiﬁcantly lower than that of others,
especially when the number of active users scales up. Third,
cloud computing is a large service platform. We can integrate
the most popular services nowadays to our DRM scheme.
Based on the cloud, CS-DRM can own powerful service
support, which makes CS-DRM a ﬂexible and humanistic
system with wonderful user experience. For instance, the
content server can provide kinds of content editing and
format conversion services for content providers.
6. Implementation
We have implemented a prototype, called “Phosphor”, of
our proposed CS-DRM scheme. Phosphor contains both the
frontend and the backend. Speciﬁcally, Phosphor is designed
for protecting mobile streaming multimedia. Obviously, we
can easily extend Phosphor to protect other kinds of media.
A preliminary description on Phosphor was presented in
[19]. In this section, we discuss the implementation details
of Phosphor. Firstly, we present the frontend and backend
of Phosphor in Sections 6.1 and 6.2, respectively. Secondly,
video encoding/decoding methods used in Phosphor are
brought forth. Finally, we concern the user experience of the
phosphor client.
6.1. Frontend. To verify our DRM scheme, we developed a
DRM video client, which is allowed to use the standard video
on demand services via RTSP protocol [14], on a mobile
device. It is a Symbian C++ application using the Nokia S60
3rd Edition Feature Pack 2 Software Development Kit [20].
We implemented a browser and a player besides the DRM
agent and SIM card. A user can browse the portal web site
hosted on the content server and the rights customization
web site on the license server by the browser. Meanwhile,
the player is for rendering video stream. A client receives
the encrypted video data from the content server via RTP
protocol [13] and applies for the decryption key from the
SIM card via APDU commands. If the acquisition of the key
is successful, the client decrypts the video data, decodes the
decrypted data to video frames, and renders the video frames
on the screen of the mobile device periodically.
6.2. Backend. We developed and deployed application ser-
vices of the CS-DRM scheme in both a private cloud and
a public cloud. The private cloud is a cluster of local
machines with abundant resources such as large storage
and eﬃcient computation. Meanwhile, the public cloud is
based on the GAE under the J2EE framework. GAE [21]
has several features such as dynamic web serving, automatic
scaling, and load balancing. In the public cloud, the data
of CS-DRM is stored in the ﬁle system of Google through
JDO. In order to test and update the prototype easily and
conveniently, Phosphor mainly runs in the private cloud. The
public cloud is used to learn the characteristics of public
cloud platform and do comparative experiments with the
private cloud. In the content service, the content portal web
site is hosted and media are transmitted to cloud clients by
Darwin Streaming Server (DSS) [22]. However, DSS based
on C programming language could not be hosted on GAE
which only supports Java and Python. Therefore, DSS is only
deployed locally. We set up the license customization web
site for license customization phase on the license server. The
communication for license acquisition between cloud clients
and the license server is implemented based on HTTP, Web
services, and Java servlet technologies.
EURASIP Journal on Wireless Communications and Networking
13
Content server
Video
acquisition
DCT/
scrambling
H.263 frame
No
Sampling
Yes
3GP ﬁle
Frame data
location
s%b == 0
Yes
c = 0
No
w = s%b
c = b − w
Padding c + b bits at the
end of a frame
AES encryption,
add info box
Encrypted H.263
frame
RTP/RTSP
Device
Assemble
Encrypted H.263
frame
AES decryption
Pseudo
H.263 frame
Removing padding bits
H.263 frame
Anti-scrambling
/inverse DCT
Inverse transform
RGB/YUV
Figure 6: The implementation process of the improved H.263 video encoding/decoding method in Phosphor.
Video
frame
DCT
Quantization
Entropy
encoding
Stream
Scrambling/
encryption
(a)
Video
frame
Inverse
DCT
Inverse
quantization
Entropy
decoding
Stream
Anti-scrambling/
decryption
(b)
Figure 7: The process of the improved H.263 video encod-
ing/decoding: (a) is the process of the improved H.263 video
encoding; (b) is the process of the improved H.263 video decoding.
6.3. Encoding/Decoding. We adopt an improved H.263 video
encoding/decoding method in Phosphor. The implementa-
tion process is shown in Figure 6. The encoding process is
carried out in the content server. First, we acquire the original
frames from the video. Through the DCT transform and
scrambling operations, the original video frame becomes a
H.263 frame. Then, the frame is encrypted by AES with
counter (CTR) mode [23] using Kcek and encoded by
the entropy encoding operation. After that, these frames
constitute a video streaming which is transmitted to the
device through RTP and RTSP. More details can be found
in Figure 7(a). The decoding process in the device, as shown
in Figure 7(b), is the inverse process of encoding.
Diﬀerent from traditional encoding/decoding methods,
there are some improved ones, such as [24], in which the
scrambling operation is added into the encoding/decoding
process. In Phosphor, similarly, the scrambling operation
is after the quantization and before the entropy encoding
in the content service. Meanwhile, the inverse scrambling
operation is between the inverse quantization and the
entropy decoding, after the streaming is received by the
device. More details are shown in Figure 7.
We compare the original video data with the encoded
video data. The result of
the comparison, shown in
Figure 8, demonstrates that the video is well protected
in Phosphor. Furthermore,
the improved H.263 video
encryption/decryption method provides higher security and
reduces the computational cost of encryption/decryption
operations.
6.4. User Experience. We implemented and deployed the
client of Phosphor on a real device, Nokia N76. In this
subsection, a perceptual understanding of Phosphor through
user operations is given. The following pictures shown in
Figure 9 are taken by a camera to record some typical
scenarios of Phosphor on the real device.
As shown in Figure 9(a), a user is browsing the content
server web site and selecting her/his favorite. The user
customizes the rights of the content in Figure 9(b) if there is