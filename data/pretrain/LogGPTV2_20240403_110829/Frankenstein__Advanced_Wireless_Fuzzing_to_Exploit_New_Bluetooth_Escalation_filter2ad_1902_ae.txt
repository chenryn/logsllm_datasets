### Bluetooth 4.2 PDU Length Extension and BLOC Buffer Limitations

In Bluetooth 4.2, the maximum Packet Data Unit (PDU) length was extended from 20 bytes to 255 bytes. A PDU is stored in a special-purpose BLOC pool with a buffer size of 264 bytes, as illustrated in Figure 9. In addition to the PDU payload, the buffer also contains 12 bytes for headers. Consequently, the buffer is 3 bytes too small to accommodate the maximum total PDU length of 255 bytes. These 3 bytes are part of the pointer to the next free BLOC buffer, as shown in Figure 6.

However, the fourth overflowing byte, determined by the Cyclic Redundancy Check (CRC), is also copied and stored in the receive buffer, even though it has already been validated in hardware. An attacker must adapt the payload, including the CRC, to take control of the heap. The initial CRC state is randomized for each connection. Malicious packets with a chosen CRC need to be generated within the tight Bluetooth clock to prevent connection termination. The attacker can pre-calculate the header and the first 248 bytes of the payload, which can remain static for this attack. The next 4 bytes of the payload are used to adjust the CRC. After this, 3 bytes of the BLOC buffer header are inserted, followed by the chosen CRC, which manipulates the remaining 1 byte of the header.

### Current Proof of Concept (PoC) and Heap Corruption

Our current PoC works over-the-air but only allocates two BLOC buffers at once by sending a fragmented GATT notification within one BLE event. One additional buffer allocation is needed to gain Remote Code Execution (RCE) with a write-what-where gadget. Since the affected BLOC buffer is one of the largest, we assume there is a standard-compliant way to execute this attack, such as using the 1M or 2M PHY modes. Table 5 lists tested devices, validated with the partial PoC and local buffer debugging on the device using InternalBlue.

Interestingly, the Samsung Galaxy S10e is differently affected by the same heap corruption. Bluetooth crashes over-the-air with our PoC because a new heap check was introduced. This check saves the Link Register (LR) and a static 1-byte canary at the end of each BLOC buffer element. If the check fails, the system crashes gracefully. When this happens, only one heap element is allocated, and we could not deploy a write-what-where gadget. The heap check protects against RCE with CVE-2019-13916, despite the bug still being present. We were able to produce correct data for the heap check, which already requires all 4 bytes of our overflow. To control the next element header, an 8-byte overflow would be required. Such a new RCE might be found by either manually patching CVE-2019-13916 on the CYW20735 firmware and continuing fuzzing with Frankenstein or by porting it to the non-vulnerable Samsung Galaxy S10e firmware.

As we did not provide a full PoC and Patchram is limited, CVE-2019-13916 has not been fixed on any RCE-exploitable device to the best of our knowledge, despite reporting it in July 2019.

### ACL Packet Vulnerability (CVE-2019-18614)

In classic Bluetooth, Asynchronous Connection-Less (ACL) mode is used for data transfer, such as tethering or music streaming. Similar to HCI, it is sent to the host using UART but with a different data prefix. Upon driver initialization by the operating system, the Bluetooth chip signals the maximum packet and buffer size using the HCI_Read_Buffer_Size command [12, p. 795]. Broadcom chips are configured for an ACL length of 1021 bytes and 8 packets. If this buffer is exceeded, it causes a heap overflow. It is important to note that this overflow cannot be exploited without bypassing the driver and operating system Bluetooth stack, which requires privileged access.

On the CYW20735 chip, there is a buffer misconfiguration that makes ACL exploitable. The global variables BT_ACL_HOST_TO_DEVICE_DEFAULT_SIZE and BT_ACL_DEVICE_TO_HOST_DEFAULT_SIZE are set to 384 bytes, while the chip still signals a size of 1021 bytes to the host. Thus, setting up a regular headset for audio streaming as a user immediately results in a heap overflow. As the misconfiguration affects both directions, the heap overflow can also be triggered over-the-air by sending a few L2Ping packets exceeding 384 bytes. When reconfiguring the buffer size in WICED Studio 6.2, this bricks the board’s capability of flashing new firmware.

This vulnerability stopped us from further ACL fuzzing with the emulated CYW20735 firmware. It is impossible to take a snapshot during music streaming or tethering before the firmware crashes. However, the CYW20819 firmware does not have this issue, and Frankenstein is almost completely ported to this newer firmware as of June 2020.

### BlueFrag (CVE-2020-0022)

We tried to create a PoC for CVE-2019-18614 based on the assumption that a chip might cache ACL packets if sent using Logical Link Control and Adaptation Protocol (L2CAP) fragments. Instead of crashing the chip, it crashed within bluetoothd of an up-to-date Samsung Galaxy S10e as of November 2019. After the report, which contained a PoC including a Control Flow Integrity (CFI) bypass to create a reverse shell using Bluetooth within 2 minutes, this was fixed in the Android February 2020 patches as CVE-2020-0022. The details are covered in our blog post [40].

### Link Management Protocol State Failures

The Link Management Protocol (LMP) in classic Bluetooth manages connection and encryption setup. The protocol itself is relatively simple, but recent attacks affecting a large fraction of Bluetooth devices were located in the LMP logic [2, 8]. Each packet type has a fixed length, with the maximum length being 17 bytes [12, p. 679].

We attach the emulated firmware to a Linux host to systematically test LMP with Frankenstein, as depicted in Figure 11. The firmware processes LMP packets generated by coverage-guided fuzzing, which in turn causes valid HCI events. A cache answers known event sequences, and unknown sequences are forwarded to the Linux BlueZ host implementation. This differs from code coverage-based tools like syzkaller [31], because only valid management-related events are passed to the host. Moreover, we aim to increase coverage within the firmware and not within the host.

This interplay with a real system generates various interesting outputs, as depicted in Figure 10. The user interface shows many unusual pairing requests. We even observed faults that produced dmesg error outputs and one system freeze. However, they were hard to debug in practice, and we were not able to file specific bug reports.

### Discussion

#### Applicability to Other Systems

The general idea of emulating firmware to facilitate wireless fuzzing can also be applied to other chips. An emulator similar to QEMU and a basic understanding of the firmware binary are required. Our emulation framework is tailored to ARM chips and ThreadX, the number one Real-Time Operating System (RTOS), which runs on over 6.2 billion devices and provides multiple ARM implementations [22]. Wireless firmware designed for this combination is widespread. The other firmware that we internally ported for Frankenstein is ARM-based and does not use any operating system at all.

In the following, we provide an overview of wireless firmware based on similar technologies. We assume that more similar wireless platforms exist, but confirming this requires extensive analysis of the respective firmware binaries. Due to the popularity of ARM and ThreadX, we assume there are further Frankenstein targets.

A platform that uses ARM and ThreadX and implements a wireless standard is Marvell Avastar Wi-Fi [43]. Additionally, the Huawei baseband and the Shannon baseband in Samsung smartphones are ARM-based [14]. Broadcom’s Wi-Fi chips are ARM-based but use the HNDRTE operating system [6]. We took a deeper look into the Raspberry Pi 3+/4 and Samsung Galaxy S9 Wi-Fi firmware and compared them to the Bluetooth firmware with known symbols. We found that the main function in Wi-Fi and Bluetooth calls _tx_initialize_kernel_enter. Thus, both Broadcom wireless stacks use ThreadX for threading, timers, and events. However, Wi-Fi uses HNDRTE functions instead of ThreadX functions for memory management.

#### Patching Bluetooth Vulnerabilities

Broadcom Bluetooth chips are released with a fixed ROM image. Patches are applied using a special Patchram mechanism [35]. Each Patchram slot is temporarily stored in a remapped RAM section and consists of 4 bytes. This is sufficient to insert a branch instruction to code stored in a regular RAM section. The operating system applies device-specific patches during driver initialization.

Depending on the chip, there can be 128 or 256 Patchram slots. This increasing number shows the need to apply more patches. Analysis of operating system patches reveals that 256 Patchram slots are far from sufficient. An overview is shown in Table 6. Moreover, the RAM area containing the code each patch jumps into is limited. Overall, even recently released devices only allow for a few more patches. Manufacturers like Apple, who support devices for multiple years, cannot include all patches. For example, CVE-2019-11516 was fixed in iOS 12.4 on all devices except the iPhone 6, which already uses all Patchram slots.

Broadcom claimed that CVE-2019-13916 would not be an issue despite producing a heap overflow. Thus, we assume that Broadcom only ships security updates for issues that are publicly known and that they consider exploitable. The limited Patchram slots force them into this decision. Expanding the Frankenstein fuzz cases beyond zero-click attacks would likely result in further issues that Broadcom would decide not to patch.

When initially finding CVE-2019-11516, it was exploitable on any Broadcom chip we tested. Surprisingly, during responsible disclosure, Broadcom stated that they knew about the issue since February 2018. We confirmed this because the Samsung Galaxy S10e ROM contains a fix and has a compile date of April 2018. Interestingly, the most recent Cypress evaluation board CYW20819 with firmware from May 2018 does not contain a fix.

Device manufacturers need to trust Broadcom to include proper patches. One of the device manufacturers claimed that Broadcom assured them the devices had been patched, despite being vulnerable in our tests. Dissecting and confirming patches at a large scale is very hard for anyone besides Broadcom. Binary diffing tools perform poorly on raw ARM binaries, as correct function identification due to duplicate meanings in Thumb mode at 2-byte offsets is challenging [23]. Advanced graph analysis methods fail on this firmware because state-of-the-art disassemblers miss a significant amount of functions, thus corrupting call graphs. Despite only differing in ARM Cortex M3 versus M4, having comparable compiler options, and similar hardware register locations, less than 6% of the functions could be identified in practice between the Nexus 5 firmware and the CYW20735 evaluation board firmware using BinDiff [35].

#### Memory Protection in Broadcom Chips

Broadcom announced the introduction of critical area access memory protection to prevent attacks like CVE-2019-15063. The idea is that special-purpose registers, such as those for coexistence, can only be configured during device initialization and are locked afterward. Despite reporting CVE-2019-15063 in August 2019, we did not see critical area access as a patch in any firmware as of February 2020. We assume that this feature is infeasible because the underlying ARM chip is a Cortex M3 on chips prior to 2016 and a Cortex M4 on newer chips [23], neither of which support such a feature.

After further questions to the Broadcom security team about how and when critical area access will be applied, we finally saw something potentially related to this feature in iOS 13.4.1 and the March 2020 Samsung Android release. Instead of protecting memory at the chip-level, the HCI commands to read and write memory are restricted, including the undocumented "super duper peek poke" command. After driver initialization, these commands are blocked. While this helps against misusing bluetoothd to block the Wi-Fi chip causing Denial of Service (DoS), it does not protect from over-the-air RCE on the Bluetooth chip and further escalation into the Wi-Fi chip.

#### Heap Management in ThreadX

CVE-2019-11516, CVE-2019-13916, and CVE-2019-18614 exploit the heap structure in the underlying operating system. Patching this would secure 6.2 billion systems running ThreadX. We proposed that Express Logic integrate a heap sanitizer. As the BLOC structure contains fixed sizes, these checks run in constant time and could fully mitigate our exploit technique and help developers detect vulnerabilities. They responded that we are not the first to exploit the ThreadX heap—a similar attack was published a few months before against Marvell Avastar Wi-Fi chips [43]. Nonetheless, they do not plan to integrate any mitigation, stating that applications are responsible for secure heap access.

Despite this statement, the Samsung Galaxy S10e performs a very basic heap check. We do not know whether Broadcom or Express Logic introduced it. Crafting valid payloads is possible with the new check, but the payload needs to be adapted for each firmware version. This is already a requirement for all attacks that rely on calling functions and do not only write to special hardware registers.

### Related Work

To the best of our knowledge, publicly available work on Bluetooth fuzzing only covers host implementations. Firmware has not been extensively fuzzed or systematically tested. Vendors might have non-public testing mechanisms. Yet, the previously listed findings in wireless firmware show that vendors do not have sufficient techniques to prevent heap and buffer overflows.

So far, Bluetooth firmware research has been limited to extending chip functionality. btlejack builds on the documented Nordic Semiconductor BLE firmware [15]. It supports passive and active Man-in-the-Middle (MITM) attacks, including BLE 5 hopping. In contrast, InternalBlue is based on reverse-engineered Broadcom chips [35]. While it does not support MITM attacks, it provides a powerful toolset for analyzing and manipulating Bluetooth firmware.