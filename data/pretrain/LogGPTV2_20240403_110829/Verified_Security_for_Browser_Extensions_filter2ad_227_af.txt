3
1
1
2
78
5.7
5.6
5.7
6.2
8.9
13.1
83.6
5.8
6.5
6.3
5.2
6.2
194.2
Fig. 8: Summary of experimental evaluation.
11
15
24
26
15
14
18
37
57
77
125
339
9
19
9
9
15
819
infer policies via program analysis, and expect this to reduce
programmer burden.
A. Summary of results
Figure 8 summarizes our experimental results. It lists the
17 extensions we wrote, the number of lines of code, the
number of policy rules (assumptions), and the time taken
to verify and compile each extension, and the number of
theorem prover queries that were issued during veriﬁcation.
Each of these extensions was
programmed against some sub-
set of our reﬁned APIs. Fig-
ure 9 alongside shows the var-
ious components in our APIs
and the lines of code in each.
It is worth pointing out that al-
though most of our extensions
use only a few policy assump-
tions, as illustrated in Section IV-B, logic-based policies are
not always easier to read than code—our visualization tools
go some way towards assisting with policy understanding.
LOC
API
31
Events + network
37
Local storage
58
JSON + Utilities
260
Behavior mining
267
DOM, URLs, Styles
TOTAL
653
Fig. 9: Extensions APIs
Our extensions fall into three categories. This ﬁrst group
includes ﬁve extensions that we wrote from scratch and veri-
ﬁed for access control properties. Magniﬁer is an accessibility
extension:
it enlarges text under the mouse on any web
page—its policy ensures that only the styling of a page is
changed. PrintNewYorker rewrites links on AMOHAH?
to go directly to print-view, removing ads and the multi-page
layout of the site—its policy ensures that the host of a link is
never changed and that only known constants are appended
to the query string of a url. Dictionary queries an online
dictionary for the selected word—only the selected word is
allowed to be sent on the network. Bib Parser uses its own
language of XML patterns to parse the contents of one of the
authors’ bibliography from a web format to bibtex—its policy
guarantees that it only reads data from a speciﬁc URL.
126
The second group of extensions are all veriﬁed for a
combination of authorization and information ﬂow properties.
The miners and personalizers in this group were developed in
conjunction with a project that was speciﬁcally investigating
the use of browser extensions for personalizing web content
by mining user behaviors [11]. The next section discusses a
variation of one of these extensions in detail—the others have a
similar ﬂavor. The last group of extensions includes 5 Chrome
extensions that we partially ported to Fine. We discuss these
in detail in Section VII-C.
B. NewsPers: Controlling data ﬂows and browsing history
NewsPers is an extension that personalizes OJEAI?.
It re-arranges the news stories presented on the front page to
link to stories more likely to be interesting to the user. It does
this in four steps, outlined below.
1) When the user browses to OJEAI?, NewsPers
reads a conﬁguration ﬁle on the local ﬁle system, that
speciﬁes a user’s news preferences.
2) It sends data from this preferences ﬁle to @ECC?, a
social news website, and obtains a response that lists
currently popular stories.
3) It consults the user’s browsing history to determine
which of these popular stories on OJEAI? have
not been read before by the user.
4) Finally, it re-arranges the OJEAI? page, placing
unread popular stories towards the top.
For this extension, we aim to enforce a policy that ensures
1) that @ECC? only obtains data from the conﬁguration ﬁle,
and 2) that no information about browsing history is leaked
to OJEAI? (in addition to what it may already know).
Figure 10 shows a fragment of NewsPers.
We begin by showing a fragment of our API that provides
extensions with access to features beyond the DOM. We start
with an API to access the local ﬁlesystem, using the readFile
function, which is guarded by the CanReadFile privilege. Next,
we show the API for working with URLs and making network
requests. And, ﬁnally, we show the API to the local browsing
history. Rather than providing extensions with access to the
entire browsing history, our API provides ﬁner controls by
which an extension can request to view the history of URLs
that a user may have visited at a particular site.
Using this API, our policy grants NewsPers the privilege
to read the conﬁguration ﬁle it needs and to read a user’s
browsing history only for OJEAI?. The assumption at
line 15 illustrates how ࡀ-safety policies can be used to
enforce ﬂow controls. Here, we state that only information
derived from the prefs ﬁle can be sent to @ECC?.
Lines 16–17 specify that the NewsPers has the privilege
to append an element e2 as the child of another element
e1, but only if e1 is a OJEAI? node, and if e2 was
derived from a node on the same domain. In other words, this
assumption gives NewsPers to reorder the structure of nodes
on an OJEAI? page, but not to add any new content.
This speciﬁcation is particularly important since NewsPers
has access to a user’s browsing history. If it
is able to
CanRequest s u
1 (ࢩ Partial API to local ﬁle system, URLs, network, and history ࢩ)
2 type url
3 type CanReadFile :: string  
4 type UrlHost :: url  string  
5 type CanRequest :: url  string  
6 type CanReadHistory :: string  
7 val readFile: f:ﬁlenameCanReadFile f ࢐ s:stringFlowsFrom s f
8 val mkUrl: s:string ࢐ h:string ࢐ ... ࢐ u:urlUrlHost u h && ...
9 val sendRequest: u:url ࢐ s:stringCanRequest u s ࢐ resp:string
10 val historyOnSite: host:stringCanReadHistory h ࢐ list url
11 (ࢩ Policy ࢩ)
12 let prefs = ‘‘AppDataࢨNewsPersࢨprefs.txt’’
13 assume CanReadFile prefs
14 assume CanReadHistory ‘‘nytimes.com’’
15 assume ࢘s, u. FlowsFrom s prefs && UrlHost u ‘‘digg.com’’ 
16 assume ࢘e1 e2 e3. FlowsFrom e2 e3 && EltDomain e3 ‘‘nytimes.com’’
17
18 assume ࢘e e2 e3. EltAncestor e2 e3 && FlowsFrom e e2  FlowsFrom e e3
19 (ࢩ Sending request to digg.com ࢩ)
20 val parseResponse: string ࢐ list url
21 let getPopularStories () =
22
23
24
25
26 (ࢩ Rearranging nytimes.com ࢩ)
27 val munge: digg:list url ࢐ history:list url ࢐ list url
28 val nodesInOrder: o:list url ࢐ r:elt ࢐ list (e:eltFlowsFrom e r)
29 let start root =
30
31
32
33
34
35
36
if (domain root) = ‘‘nytimes.com’’ then
let popular = getPopularStories () in
let h = getHistoryOnSite ‘‘nytimes.com’’ in
let ordering = munge popular h in
let nodes = nodesInOrder ordering root in
iter (fun e ࢐ appendChild root e) nodes
let p = readFile prefs in
let url = mkUrl ‘‘http’’ ‘‘digg.com’’ ... in
let resp = sendRequest url p in
parseResponse resp
EltDomain e1 ‘‘nytimes.com’’  CanAppend e1 e2
else ()
Fig. 10: A fragment of NewsPers.
leaking information about
write arbitrary elements to an OJEAI? page, it could,
for example, insert image tags to send requests to a third
party,
the browsing history. Of
course, by rearranging the structure of the OJEAI? page,
NewsPers reveals the user’s browsing history on OJEAI?
to OJEAI? itself—but this is not a serious concern.
At lines 20–26, we show an implementation of a function
that reads data from the local preferences ﬁle and sends it to
@ECC?. Lines 27–36 show the high-level structure of the
code that rearranges OJEAI?. We elide the implementa-
tions of several helper functions, but show their signatures—
these are largely free of security-sensitive operations. Notice
that the implementation itself is pleasingly free of type an-
notations. While decorating APIs with precise types requires
some effort, this burden is assumed, once and for all, by us,
the API developers.
Finally, the model of ﬂow controls we adopt here ﬁts natu-
rally into the ࡀ-safety framework. However, in compar-
ison to noninterference-based approaches to information ﬂow
controls, the security property we obtain is relatively weak. In
particular, what we obtain is a form of syntactic secrecy, rather
than an observational equivalence property. Practically, what
this means is that an extension can leak information about the
browsing history to @ECC? by choosing to send various
fragments of the user preference information to @ECC?
127
depending on what URLs appear in the browsing history,
i.e., via a form of implicit ﬂow. While prior work on Fine
shows how to eliminate this form of leak using value-indexed
types, for simplicity, we choose not to discuss this approach
here. Other extensions, including several of the miners, adopt
this approach (with additional programmer effort) to protect
against leaks via implicit ﬂows.
C. Retroﬁtted security for Chrome extensions
In section II-C, we argued that many Chrome extensions are
over-privileged because Chrome’s access-control system is too
coarse-grained. We also described the innocuous behavior of
eight over-privileged extensions (ﬁgure 3). Now that we have
a ﬁne-grained security system, we can consider securing them.
The last section of Figure 8 lists ﬁve full-featured exten-
sions. Chrome extensions are split into two components—
the content script and the extension core—that communicate
by message-passing. The size of the extension core ranges
from 500–20,000 lines of JavaScript (shown in parentheses).
The extension core can perform various privileged operations
(e.g., local storage, cross-domain requests, etc.), but it cannot
directly read or write to web pages. Content scripts, on the
other hand, can modify web pages, but they cannot access
the resources that the extension core can. Of course, the two
components can cooperate to provide extension core with
access to the web page, and vice versa, or content script with
access to storage. Nevertheless, the separation does provide a
reasonable degree of isolation.
In principle, we could port the entire Chrome extensions
to Fine and verify them for end-to-end properties. However,
we chose to rewrite only the content scripts in Fine, leaving
extension cores in JavaScript. This approach, while involving
much less effort, provides Chrome extensions with a measure
of the beneﬁts of our ﬁne-grained DOM authorization policies.
As Figure 3 shows, these extensions interact with web pages
in limited ways. However, their limited behavior cannot be
precisely expressed in Chrome manifests, hence they require
access to “your data on all websites”. We can precisely state
the limited privileges that these extensions actually need, and
to verify them automatically for compliance.
Our policy language and API remains the same, with the
exception of trivial, Chrome-speciﬁc message-passing func-
tions that allow our Fine-based content-scripts to commu-
nicate with extension cores. Deploying these extensions in
Chrome involves compiling content-scripts written in Fine to
JavaScript—we discuss this next.
VIII. CROSS-BROWSER EXTENSIONS
A signiﬁcant beneﬁt of IBEX comes from the fact that once
an extension is veriﬁed, it can be re-targeted to run in a variety
of modern browsers. To date, we have run our extensions
on four distinct web browsers: Internet Explorer, Google
Chrome, and C3, a research Web browser under development
at Microsoft Research. Additionally, because we can compile
from .NET to JavaScript, we have also retargeted some of our
extensions to run on Firefox. Each browser employs distinct
Fig. 11: C3 hosting architecture.
back-ends and TCBs. In this section, we discuss system-level
security guarantees that these browsers provide.
Internet Explorer: BHOs: To target Internet Explorer, we
compile our Fine extensions to .NET libraries. These libraries
are then loaded by a single native IE extension, or a BHO,