      while (reader.Read())
      {
        if (reader.NodeType == XmlNodeType.Text)
        {
          WriteLine(reader.Value);
        }
      }
      }
    }
用- r选项运行应用程序，显示所有文本节点的值：
    The Autobiography of Benjamin Franklin
    Benjamin
    Franklin
    8.99
    The Confidence Man
    Herman
    Melville
    11.99
    The Gorgias
    Plato
    9.99
1. Read（）方法
遍历文档有几种方式，如前面的示例所示，Read（）方法可以进入下一个节点。然
后验证该节点是否有一个值（HasValue（）），或者该节点是否有特性
（HasAttributes（））。也可以使用ReadStartElement（）方法，该方法验证当前节点是否
是起始元素，如果是起始元素，就可以定位到下一个节点上。如果不是起始元素，就引发
一个XmlException异常。调用这个方法与调用Read（）方法后再调用IsStartElement（）方
法是一样的。
ReadElementString（）类似于ReadString（），但它可以选择以元素名作为参数。如
果下一个内容节点不是起始标记，或者如果Name参数不匹配当前的节点Name，就会引发
异常。
下面的示例说明了如何使用ReadElementString（）方法。注意，因为这个示例使用
FileStream，所以需要确保导入System.IO名称空间（代码文件
XMLReaderAndWriterSample/Program.cs）：
    public static void ReadElementContent()
    {
      using (XmlReader reader = XmlReader.Create(BooksFileName))
      {
        while (! reader.EOF
)
        {
        if (reader.MoveToContent()
 == XmlNodeType.Element &&
            reader.Name == "title")
        {
          WriteLine(r
eader.ReadElementContentAsString());
        }
        else
        {
          // move on
          reader.Read()
;
        }
        }
      }
    }
在while循环中，使用MoveToContent（）方法查找类型为XmlNodeType.Element、名
称为title的节点。我们使用XmlTextReader类的EOF属性作为循环条件。如果节点的类型不
是Element，或者名称不是title, else子句就会调用Read（）方法进入下一个节点。当查找到
一个满足条件的节点时，就把ReadElementString（）方法的结果添加到控制台中。这样就
在控制台中添加一个书名。注意，在成功执行ReadElementString（）方法后，不需要调用
Read（）方法，因为ReadElementString（）方法已经使用了整个Element，并定位到下一
个节点上。
如果删除了if子句中的&&rdr.Name=="title"，在抛出XmlException异常时，就必须捕
获它。在XML数据文件中，MoveToContent（）方法查找到的第一个元素是，
因为它是一个元素，所以通过了if语句中的检查。但是，由于它不包含简单的文本类型，
因此它会导致ReadElementString（）方法引发一个XmlException异常。解决这个问题的一
种方式是捕获异常，在异常的处理程序中调用Read方法（代码文件
XmlReaderAndWriterSample/Program.cs）：
    public static void ReadElementContent2()
    {
      using (XmlReader reader = XmlReader.Create(BooksFileName))
      {
        while (! reader.EOF)
        {
        if (reader.MoveToContent() == XmlNodeType.Element)
        {
          try
          {
            WriteLine(reader.ReadElementContentAsString());
          }
          catch (XmlException ex)
          {
            reader.Read();
          }
        }
        else
        {
          // move on
          reader.Read();
        }
        }
      }
    }
运行这段代码，结果应与前面示例的结果一样。XmlReader类还可以读取强类型化的
数据，它有几个ReadElementContentAs（）方法，如ReadElementContentAsDouble（）、
ReadElementContentAs-Boolean（）等。下面的示例说明了如何把对应值读取为小数，并
对该值进行数学处理。在本例中，要给价格元素中的值增加25%（代码文件
XmlReaderAndWriterSample/Program.cs）：
    public static void ReadDecimal()
    {
      using (XmlReader reader = XmlReader.Create(BooksFileName))
      {
        while (reader.Read())
        {
          if (reader.NodeType == XmlNodeType.Element)
          {
          if (reader.Name == "price")
          {
            decimal price = reader.ReadElementContentAsDecimal();
            WriteLine($"Current Price = {price}");
            price += price ＊ .25m;
            WriteLine($"New price {price}");
          }
          else if (reader.Name == "title")
          {
            WriteLine(reader.ReadElementContentAsString());
          }
          }
        }
      }
    }
2．检索特性数据
在运行示例代码时，可能注意到在读取节点时，没有看到特性。这是因为特性不是文
档的结构的一部分。针对元素节点，可以检查特性是否存在，并可选择性地检索特性值。
例如，如果有特性，HasAttributes属性就返回true；否则返回false。AttributeCount属
性确定特性的个数。GetAttribute（）方法按照名称或索引来获取特性。如果要一次迭代
一个特性，就可以使用MoveToFirstAttribute（）和MoveToNextAttribute（）方法。
下面的示例迭代books.xml文档中的特性（代码文件
XmlReaderAndWriterSample/Program.cs）：
    public static void ReadAttributes()
    {
      using (XmlReader reader = XmlReader.Create(BooksFileName))
      {
        while (reader.Read())
        {
        if (reader.NodeType == XmlNodeType.Element)
        {
          for (int i = 0; i 
      Case of the Missing Cookie
        Cookie Monster
      9.99
在开始和结束写入元素和属性时，要注意控制元素的嵌套。在给authors元素添加
name子元素时，就可以看到这种嵌套。注意WriteStartElement（）和WriteEndElement（）
方法调用是如何安排的，以及它们如何在输出文件中生成嵌套的元素。
除了WriteElementString（）和WriteAttributeString（）方法外，还有其他几个专用的
写入方法。WriteComment（）方法以正确的XML格式输出注释。WriteChars（）方法输
出字符缓冲区的内容，WriteChars（）方法需要一个缓冲区（一个字符数组）、写入的起
始位置（一个整数）和要写入的字符个数（一个整数）。
使用基于XmlReader和XmlWriter的类读写XML非常灵活，使用起来也很简单。下面
介绍如何使用System.Xml名称空间中的XmlDocument类和XmlNode类实现DOM。
27.3 在.NET中使用DOM
.NET中的文档对象模型（Document Object Model, DOM）支持W3C DOM规范。DOM
通过XmlNode类来实现。XmlNode是一个抽象类，它表示XML文档的一个节点。具体的
类是XmlDocument、XmlDocumentFragment、XmlAttribute、XmlNotation。
XmlLinkedNode是一个抽象类，它派生于XmlNode。派生自XmlLinkedNode的具体类是
XmlDeclaration、XmlDocumentType、XmlElement和XmlProcessingInstruction。
XmlNodeList类是节点的一个有序列表。这是一个实时的节点列表，对节点的任何修
改都会立即反映在列表中。XmlNodeList类支持索引访问或迭代访问。
XmlNode类和XmlNodeList类组成了.NET Framework中DOM实现的核心。
使用XmlDocument的示例代码利用以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Xml.XmlDocument
名称空间：
    System
    System.IO
    System.Xml
    static System.Console
27.3.1 使用XmlDocument类读取
XmlDocument类是用于在.NET中表示DOM的类。与XmlReader类和XmlWriter类不
同，XmlDocument类具有读写功能，并可以随机访问DOM树。
下面介绍的示例创建一个XmlDocument对象，加载磁盘上的一个文档，再从标题元素
中加载带有数据的文本框，这类似于27.4.1节的示例，区别是本例选择要使用的节点，而
不是像基于XmlReader类的示例那样浏览整个文档。
下面是创建XmlDocument对象的代码，与XmlReader示例相比，这个示例比较简单
（代码文件XmlDocumentSample/Program.cs）：
    public static void ReadXml()
    {
      using (FileStream stream = File.OpenRead(BooksFileName))
      {
        var doc = new XmlDocument();
        doc.Load(stream);
        XmlNodeList titleNodes = doc.GetElementsByTagName("title");
        foreach (XmlNode node in titleNodes)
        {
        WriteLine(node.OuterXml);
        }
      }
    }
如果这就是我们需要完成的全部工作，使用XmlReader类就是加载文本框的一种非常
高效的方式，原因是我们只浏览一次文档，就完成了处理。这就是XmlReader类的工作方
式。但如果要重新查看某个节点，则最好使用XmlDocument类。
27.3.2 遍历层次结构
XmlDocument类的一大优势是可以导航DOM树。下面的例子访问所有的author元素，
把外部XML写到控制台（这是包括author元素的XML）、内部XML（没有author元素）、
下一个同级元素、上一个同级元素、第一个自元素和父元素（代码文件
XmlDocumentSample / Program.cs）：
    public static void NavigateXml()
    {
      using (FileStream stream = File.OpenRead(BooksFileName))
      {
        var doc = new XmlDocument();
        doc.Load(stream);
        XmlNodeList authorNodes = doc.GetElementsByTagName("author");
        foreach (XmlNode node in authorNodes)
        {
        WriteLine($"Outer XML: {node.OuterXml}");
        WriteLine($"Inner XML: {node.InnerXml}");
        WriteLine($"Next sibling outer XML: {node.NextSibling.OuterXml}");
        WriteLine($"Previous sibling outer XML:
          {node.PreviousSibling.OuterXml}");
        WriteLine($"First child outer Xml: {node.FirstChild.OuterXml}");
        WriteLine($"Parent name: {node.ParentNode.Name}");
        WriteLine();
        }
      }
    }