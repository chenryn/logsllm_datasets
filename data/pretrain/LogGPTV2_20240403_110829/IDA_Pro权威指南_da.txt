   seg000:0000006F loc_6F:                    ; CODE XREF:  seg000:0000007E↓ j  
   seg000:0000006F           inc     word ptr [esi-18h]  
   seg000:00000073           push    1Dh  
   seg000:00000075           pop     eax  
➋   seg000:00000076           int     80h ; LINUX - sys_pause  
   seg000:00000078           cmp     dword ptr [esi], 4B434148h  
   seg000:0000007E           jnz     short loc_6F  
   seg000:00000080           pop     edx  
   seg000:00000081           pop     edi  
   seg000:00000082           push    2  
   seg000:00000084           pop     ecx  
   seg000:00000085  
   seg000:00000085 loc_85:                    ; CODE XREF:  seg000:0000008F↓ j  
   seg000:00000085           push    5Ah ; 'Z'  
   seg000:00000087           pop     eax  
   seg000:00000088           cdq  
   seg000:00000089           push    ecx  
   seg000:0000008A           push    edi  
   seg000:0000008B           push    ecx  
➌   seg000:0000008C           int     80h ; LINUX - old_mmap  
   seg000:0000008E           dec     ecx  
   seg000:0000008F           jns     short loc_85  
   seg000:00000091           push    edx  
   seg000:00000092           push    'hs//'  
   seg000:00000097           push    'nib/'  
   ...             ; continues to invoke execve to spawn the shell
值得注意的是，该数据流中的前 8 个字节（➊）实际上是协议数据，而不是 shellcode ，因此我们选择不对它们进行反汇编。而且，IDA 似乎错误地标识了➋处和➌处的系统调用。我们忽略了一个事实，即此入侵程序针对的是 FreeBSD 应用程序，这将有助于对有效负载中使用的系统调用编号进行解码。由于 IDA 只能为Linux系统调用编号提供注释，因此，我们需要进行一些研究才能得知：FreeBSD 系统调用 29 （1dh）实际为 recvfrom
 （而非pause
 ），系统调用 90 （5Ah ）实际为dup2
 函数（而非 old_mmap
 ）。
通常，由于shellcode 中缺乏对IDA 有用的头部信息，因此，要想正确反汇编 shellcode ，你必须特别仔细。此外，shellcode 编写者经常使用 shellcode 编码器来避开入侵检测系统。这类编码器的作用与对标准二进制文件使用的模糊工具非常类似，这进一步增加了反汇编 shellcode 的难度。
22.5 小结
记住，IDA 并不是一种“万能”解决方案，能够发现二进制文件中的所有漏洞。如果你的最终目标是只使用 IDA 执行漏洞分析，那么尽可能最大限度地使分析过程自动化，将不失为一种明智之举。当开发用于分析二进制文件的算法时，你应该始终考虑如何使这些算法自动化，以在将来的分析过程中节省时间。最后，要明白一点，无论阅读多少最佳图书，你都不可能精通漏洞分析与破解程序开发。如果你希望培养自己的技能，实践是唯一的途径。有大量的站点提供了培养这种技能的实践。Wargames（http://www.overthewise.org/wargames/
 ）就是一个不错的起点。
第23章 实用IDA 插件
近些年来，IDA 有了各种各样的用途，但这毫不奇怪，因为人们为 IDA 开发出大量插件以增强它的功能，从而也满足自己的特殊需求。如果你想利用其他人的劳动成果，就应知道，关于公开发布的插件，并没有所谓的“一站式服务”。你主要可以在3 个地方找到相关插件：Hex-Rays 下载页面1
 、OpenRCE下载页面2
 以及 RCE 逆向工程论坛3
 。当然，花一些时间搜索Google 可能会有意想不到的收获。
1. 参见http://www.hex-rays.com/idapro/idadown.htm
 。
2. 参见http://www.openrce.org/downloads/
 。
3. 参见http://www.woodmann.com/forum/index.php
 。
和任何其他公开发布的软件一样，在安装第三方插件时，你可能会面临一些挑战。如果插件开发者决定公布其劳动成果，那么他会以源代码、编译二进制文件或同时以这两种形式发布插件。如果必须由源代码构建插件，你必须处理由插件作者提供的生成文件（或同等的其他文件），这个文件可能适合、也可能不适合你的编译器配置。另一方面，如果插件以二进制格式发布，它可能使用与你的 IDA 版本不兼容的SDK 版本构建，这意味着在插件作者发布一个更新的版本之前，你根本不能运行这个插件。最后，要构建、运行（或构建和运行）插件，你可能需要满足一些外部依赖关系。
本章将介绍几种常用的 IDA 插件，介绍它们的作用、获取方法以及如何构建、安装和使用它们。
23.1  Hex-Rays
Hex-Rays 可能是所有 IDA 插件的“始祖”，它是一个反编译器插件，能够为已编译的ARM或者32 位x86 二进制文件中的函数生成“类似 C 语言的伪代码”1
 。Hex-Rays 是一个商业插件，由开发IDA 的公司创建和销售。这个反编译器只能在32 位版本的 IDA 上使用。Hex-Rays 仅以二进制格式发布，要安装这个插件，只需将提供的插件文件复制到/plugins 目录即可。用户可以在线下载2
 一个有关 Hex-Rays 用法的手册，该手册提供 Hex-Rays 用法的详细概要，并且包含了一些用于创建反编译器插件的 Hex-Rays SDK3
 的文档。
1. 参见http://www.hex-rays.com/decompiler.shtml
 。
2. 参见http://www.hex-rays.com/manual/
 。
3. 参见http://www.hexblog.com/?p=107
 。请不要将它与IDA SDK 相混淆。
安装完毕后，你可以通过 View▶Open Subviews▶Pseudocode （热键F5）激活这个反编译器，反编译包含光标的函数，或者使用 File▶Produce File▶Create C File（热键CTRL+F5）反编译数据库中的所有文件，并将它们保存到一个文件中。
为一个函数生成伪代码时，IDA 将打开一个新的包含反编译函数的子视图（标签式窗口）。代码清单 23-1 显示了一个伪代码实例，它使用Hex-Rays 生成，用于查看“Defcon 15夺旗赛”二进制文件。每次你为某个函数生成伪代码，Hex-Rays 都会打开一个新的选项卡式窗口来显示结果。
代码清单 23-1 Hex-Kays输出示例
signed int __cdecl sub_80489B4(int fd)  
{  
  int v1; // eax@1  
  signed int v2; // edx@1  
  char buf; // [sp+4h] [bp-208h]@2  
  char s; // [sp+104h] [bp-108h]@2  
  v1=sub_8048B44(fd,(int)"Hans Brix ? Oh no ! Oh , herro . Great to see you again , Hans ! " , 0 );
  v2 = -1;  
  if ( v1 != -1 )  
  {  
    recv(fd, &buf, 0x100u, 0);  
    snprintf(&s, 0x12Cu, "Hans Brix says: \"%s\"\n", &buf);  
    sub_8048B44(fd, (int)&s, 0);  
    v2 = 0;  
  }  
  return v2;  
}
注意，虽然 Hex-Rays 对参数（a1
 、a2
 等）和局部变量（v1
 和v2
 ）使用的哑命名约定与 IDA中使用的约定略有不同，但是它们区分函数参数与局部变量的能力相同。如果你更改了反汇编代码清单中变量的名称，那么 Hex-Rays 反编译器（参见表 23-1 ）将使用这些名称，而不是内部生成的哑名。
表23-1 Hex-Rays反编译器
名称
Hex-Rays反编译器
作者
Ilfak Guilfanov、Hex-Rays.com
发布
仅二进制
价格
2239美元
描述
由编译的ARM或32位x86 函数生成类似C 语言的伪代码
信息
http://www.hex-rays.com/decompiler.shtml
Hex-Rays 利用IDA 采用的线索来推断数据类型。但是，如果用在某个操作中的数据类型不符合Hex-Rays 的期待，你会注意到，为了强制进行类型转换，可能会有更多的类型转换发生。为了方便，你可以通过单击右键并选择 Hide Casts菜单项，要求 Hex-Rays 隐藏所有类型转换。
打开伪代码窗口后，你就可以将它作为源代码编辑器和导航器使用。在伪代码窗口中进行导航和编辑，与在标准的 IDA 反汇编窗口中进行导航和编辑非常相似。例如，双击某个函数名称，将立即在伪代码窗口中反汇编该函数。上下文菜单提供了许多编辑功能（如图 23-1 所示），包括更改变量和函数名称及其类型。
图23-1 Hex-Rays反汇编器编辑选项
此外，你对变量名称、函数名称和数据类型所作的更改将传播回 IDA 的反汇编窗口。通过重复应用“重命名”（Rename）、“设置类型”（Set Type）以及隐藏转换类型，可以将代码清单 23-1轻松转换为以下代码。
signed int __cdecl sub_80489B4(int fd)  
{  
  int length; // eax@1  
  signed int error; // edx@1  
  char buf[256]; // [sp+4h] [bp-208h]@2  
  char s[264]; // [sp+104h] [bp-108h]@2  
  length=write_string(fd,"Hans Brix?Oh no!Oh,herro.Great to see you again, Hans!",0);  
  error = -1;  
  if ( length != -1 )  
  {  
    recv(fd, buf, 256u, 0);  
    snprintf(s, 300u, "Hans Brix says: \"%s\"\n", buf);  
    write_string(fd, s, 0);  
    error = 0;  
  }  
  return error;  
}
请记住，在编译过程中一些信息会丢失。同时也没有必要为任何非外部符号保留符号信息，编译器优化会删除冗余并简化代码。因此，除自由使用类型转换外，与人为生成的 C 代码相比，你在生成的伪代码中会看到更多的 goto
 语句。这并不意外，因为要将编译器生成的控制流完全还原成原始的 C 语言格式，往往会非常困难。不过， Hex-Rays 能够识别复杂的 C 结构，如switch
 语句，并付出了巨大的努力来识别各种 C 编译器使用的标准代码序列。
鉴于其提供的各种功能，我们不建议你过于依赖 Hex-Rays 。与对应的汇编代码相比，C 源代码确实更具可读性，也更加简明，但反编译并不完美。在阅读 Hex-Rays 伪代码的过程中，你认为自己看到的是基础汇编代码的可信表示形式，同时Ilfak 也尽其所能来确保 Hex-Rays 的准确性，但仍然存在一些特例，证明 Hex-Rays 有时会出问题。因此，我们强烈建议你对照基础汇编代码来验证你通过阅读 Hex-Rays 伪代码得出的任何结论。最后，请注意，虽然Hex-Rays 可用于处理用C++ 代码编译的二进制文件，但它只能生成 C 代码，并且生成的代码缺乏任何特定于 C++ 代码的特性。
23.2 IDAPython
IDAPython （见表23-2 ）是一个由Gergely Erdelyi 开发的第三方 IDA 插件，我们已在第 15章中详细介绍了该插件。该插件受到 IDA 用户的普遍欢迎。自 IDA 5.4 以来，所有 IDA 版本均以标准插件的形式自带了 IDAPython 。但是，IDAPython 仍然是一个开源项目，你可以下载该插件，对其进行修改，以满足自己的需要。
IDAPython 源代码中的 BUILDING.txt 文件提供了有关构建 IDAPython 的说明，IDAPython 网站则提供了安装该插件的说明。如果你选择从源代码构建IDAPython ，则必须满足一些依赖条件。第一个也是最重要的条件是，你需要安装 32 位的 IDAPython 。我们建议 Windows 和OS X用户使用Python 网站1
 上提供的一个安装程序获取并安装 Python 。通常，Linux用户可以使用针对其 Linux版本的 32 位版本 Python 。请注意，到本书截稿时，IDAPython 并不兼容 Python 版本 3. x。
1. 参见http://www.python.org/
 。
表23-2 IDAPython 插件
名称
IDAPython
作者
Gergely Erdelyi
发布
源代码和二进制（IDA 也自带二进制版本）
价格
免费
描述
用于IDA Pro 的Python 脚本引擎