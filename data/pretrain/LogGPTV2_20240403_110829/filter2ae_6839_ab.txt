                }
            }
        }
        if ( n )
        {
            printf( "\n" );
        }
    }
    function base64decode ()
    {
        o       = 0;
        bits    = 0;
        while( getline  some.txt
    $ base64 some > some.txt
这两个输出完全相同。
base64解码时，必须关闭%c的UTF-8支持，下面两种办法均可:
    $ LANG=C awk -f base64.awk d some
    $ awk --characters-as-bytes -f base64.awk d some
base64.awk直接使用awk的printf()。如果这个awk实际是由busybox提供的，此时可能无法输出0x00，这点需要在目标环境实测:
可以调用shell的printf输出0x00，UTF-8困挠一并被规避，参看`uudecode_ash.awk`。
### 3) uudecode.awk
busybox提供的awk可能无法输出0x00，本脚本不适用于busybox环境。
    #!/usr/bin/awk -f
    function looktable ( l, p )
    {
        uutable = "!\"#$%&'()*+,-./0123456789:;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_";
        return index( uutable, substr( l, p+1, 1 ) );
    }
    /^[^be]/    \
    {
        len = looktable( $0, 0 );
        for ( i = 1; len > 0; i += 4 )
        {
            a       = looktable( $0, i );
            b       = looktable( $0, i+1 );
            c       = looktable( $0, i+2 );
            d       = looktable( $0, i+3 );
            printf( "%c", a * 4 + b / 16 );
            if ( len > 1 )
            {
                printf( "%c", b * 16 + c / 4 );
                if ( len > 2 )
                {
                    printf( "%c", c * 64 + d );
                }
            }
            len    -= 3;
        }
    }
    $ uuencode some some > some.txt
    $ LANG=C awk -f uudecode.awk some
    $ awk --characters-as-bytes -f uudecode.awk some
### 4) uudecode_ash.awk
    #!/bin/awk -f
    function looktable ( l, p )
    {
        uutable = "!\"#$%&'()*+,-./0123456789:;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_";
        return index( uutable, substr( l, p+1, 1 ) );
    }
    /^[^be]/    \
    {
        len     = looktable( $0, 0 );
        n       = 1;
        for ( i = 1; len > 0; i += 4 )
        {
            a           = looktable( $0, i );
            b           = looktable( $0, i+1 );
            c           = looktable( $0, i+2 );
            d           = looktable( $0, i+3 );
            ret[n++]    = ( a * 4 + b / 16 ) % 256;
            if ( len > 1 )
            {
                ret[n++]    = ( b * 16 + c / 4 ) % 256;
                if ( len > 2 )
                {
                    ret[n++]    = ( c * 64 + d ) % 256;
                }
            }
            len    -= 3;
        }
        escseq  = "";
        for ( i = 1; i in ret; i++ )
        {
            escseq = escseq sprintf( "\\x%02x", ret[i] );
            delete ret[i];
        }
        system( "printf \"" escseq "\"" );
    }
    $ uuencode some some > some.txt
    $ busybox awk -f uudecode_ash.awk some
此处不需要LANG=C，并且可以输出0x00，适用于busybox环境。
### 5) base64_ash.awk
从base64.awk移植出一个可以在busybox(ash+awk)中使用的版本。
    #!/bin/awk -f
    #
    # Author : Danny Chouinard
    # Modify : scz@nsfocus
    #
    function base64encode ()
    {
        o       = 0;
        bits    = 0;
        n       = 0;
        count   = 0;
        while ( getline )
        {
            for ( c = 0; c = maxn )
                            {
                                printf( "\n" );
                                n   = 0;
                            }
                            o       = 0;
                            bits    = 0;
                        }
                    }
                }
            }
        }
        if ( bits )
        {
            while ( bits++ = maxn )
            {
                printf( "\n" );
                n   = 0;
            }
        }
        count   = int( count / 2 ) % 3;
        if ( count )
        {
            for ( i = 0; i = maxn )
                {
                    printf( "\n" );
                    n   = 0;
                }
            }
        }
        if ( n )
        {
            printf( "\n" );
        }
    }
    function base64decode ()
    {
        o       = 0;
        bits    = 0;
        while( getline  some.txt
    $ busybox awk -f base64_ash.awk d  some
此处不需要LANG=C，并且可以输出0x00，适用于busybox环境。
## bash
### 1) xxd.sh
这个脚本要求bash 4.3或更高版本，充斥着bash的各种奇技淫巧，如果读不懂，请看bash(1)。
    #!/bin/bash
    #
    # Read a file by bytes in BASH
    # https://stackoverflow.com/questions/13889659/read-a-file-by-bytes-in-bash
    #
    # Author : F. Hauri
    #        : 2016-09
    #
    # Modify : scz@nsfocus
    #        : 2018-10-08
    #        : 2018-10-11 15:12
    #
    function hexdump ()
    {
        printf -v escseq \\%o {32..126}
        printf -v asciitable "$escseq"
        printf -v ctrltable %-20sE abtnvfr
        if [ "$1" == "-p" ] ; then
            printf -v spaceline %30s
            fmt=${spaceline// /%02x}
        else
            printf -v spaceline %16s
            fmt=${spaceline// / %02x}
        fi
        offset=0
        hexarray=()
        asciidump=
        while LANG=C IFS= read -r -d '' -n 1 byte
        do
            if [ "$byte" ] ; then
                printf -v escchar "%q" "$byte"
                case ${#escchar} in
                1|2 )
                    index=${asciitable%$escchar*}
                    hexarray+=($((${#index}+0x20)))
                    asciidump+=$byte
                    ;;
                5 )
                    tmp=${escchar#*\'\\}
                    index=${ctrltable%${tmp%\'}*}
                    hexarray+=($((${#index}+7)))
                    asciidump+=.
                    ;;
                7 )
                    tmp=${escchar#*\'\\}
                    hexarray+=($((8#${tmp%\'})))
                    asciidump+=.
                    ;;
                * )
                    echo >&2 Error: "[$escchar]"
                    ;;
                esac
            else
                hexarray+=(0)
                asciidump+=.
            fi
            if [ "$1" == "-p" ] ; then
                if [ ${#hexarray[@]} -gt 29 ] ; then
                    printf "$fmt\n" ${hexarray[@]}
                    ((offset+=30))
                    hexarray=()
                    asciidump=