that contain malware or phishing content and is used by
many browsers including Chrome and Firefox [6].
The global_DB and the server_DB can be hosted on one or
more cloud platforms. Many cloud platforms already provide
dynamic scaling of resources to handle high load (e.g., the
auto scaling feature in Amazon EC2 [1] and Microsoft Azure
[9] provides this service), ensure high availability in case of
failures, and offer DDoS mitigation services (e.g., Amazon’s
AWS shield [2]).
538
Incentivizing Censorship Measurements via Circumvention
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Input
:URL
1 result = check_local_DB(URL);
2 /* if URL is not in DB
3 if result == not-measured then
send_redundant_requests ( );
4
result = measure_direct_path ( );
5
6 /* if URL is in DB but blocked
7 else if result == blocked then
circumvent based on the returned approach;
8
randomly do;
9
(a) send_request_direct_path ( );
10
(b) result = measure_direct_path ( );
11
12 /* if URL is in DB but not blocked
13 else
14
15 end
16 add_to_local_DB (URL, result);
17 /* Each URL entry expires after t secs
send_request_direct_path ( );
*/
*/
*/
*/
Algorithm 1: C-Saw Measurement Module
4.3 C-Saw Proxy
The C-Saw proxy resides on a client’s machine and imple-
ments the measurement and circumvention modules.
4.3.1 Measurement Module. All URL requests from a user
first go through the measurement module, which performs
four key functions: (1) it fetches the URL record from the
local_DB, (2) forwards either one request or multiple re-
dundant requests—depending on the blocking status—to the
circumvention module. The latter facilitates real-time block
page detection, (3) measures common forms of Web cen-
sorship (e.g., DNS blocking, IP blocking, and HTTP/HTTPS
blocking) and writes the results to the local_DB, and (4) peri-
odically sends updates about blocked URLs to the global_DB.
Algorithm 1 describes the flow of tasks in this module.
Detection algorithm. The measurement module implements
an in-line blocking detection algorithm for requests sent on
the direct path. Figure 4 shows a flowchart for detecting
common forms of blocking [15, 38]. Note that we declare a
URL to be blocked when (1) we receive a response from the
circumvention path but no response (or receive an anoma-
lous response) from the direct path or (2) the returned page
is flagged as a block page.
Redundant requests. There are two key challenges that
impact user experience when detecting censorship.
• High detection times for censored URLs: If an unmea-
sured URL is actually blocked, it may take a long time
before blocking can be detected (e.g., due to TCP time-
outs in case of TCP/IP blocking), thereby hurting user
response times. Table 5 shows the blocking detection
times for censored URLs in Pakistan that experience
Figure 4: Detecting different types of blocking.
Blocking Type
TCP/IP
DNS (Response: “Server Failure")
DNS (Response: “Server Refused")
HTTP (Block Page)
TCP/IP + DNS
Avg. Detect. Time(s)
21
10.6
0.025
1.8
32.7
Table 5: The average time for detecting different types
of blocking including TCP/IP, two types of DNS blocking,
HTTP, and multi-stage (i.e., DNS blocking followed by IP
blocking). Each result is the average of 50 runs.
different types of blocking. Observe that the detection
times can be as high as 32.7s.
• Detecting real-time content manipulation: Detecting
content manipulation (e.g., replacing a web page with a
block page or substituting content) in real-time is chal-
lenging due to the dynamic nature of content, which
may vary based on region of access or due to person-
alization [37, 42].
We address these challenges in C-Saw by making use of
redundant requests—one through the direct path and the
other through one or more circumvention paths—for URLs
having the not-measured status.7
Reducing response times with selective redundancy.
Redundant requests can improve response times when the
direct path is censored, in which case the user is served the
version delivered from the circumvention path. While redun-
dant requests offer improvements when the CPU load is low,
they may degrade performance at high loads [28, 39, 55]. This
7To avoid multiple writes, HTTP POST requests are not duplicated.
539
Local DNSQueryNoNoNoYesYesYesGlobal DNSQuery (GDNS)GDNS?GDNS?No Resp/ResetResponseBlock PageCorrect PageNo Resp/ResetEstablishedHTTP/S Blocking+ Possible DNSNO BlockingDNS BlockingDeclareIP BlockingNo Responseor NXDomainGDNS?Got IPSend HTTP/STCP ConnDNS QueryURL RequestBlock PageDetectionSIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Aqib Nisar, Aqsa Kashaf, Ihsan Ayyub Qazi, Zartash Afzal Uzmi
poses a problem for pages with a large number of embedded
links. To address this challenge, we use selective redundancy
i.e., for not-blocked URLs, we do not measure the direct path
for censorship. While this may increase detection times if the
URL becomes censored before its record expires, we think
this is an acceptable tradeoff, especially considering that
blocking events happen on long time scales.
Real-time detection of content manipulation. To en-
able fast detection of content manipulation, C-Saw uses a
2-phase algorithm. In the first phase, C-Saw attempts to de-
tect a block page by just examining the direct path response
using a heuristic based on HTML tags [42]. If the page is
not suspected to be a block page, it is served to the user,
without waiting for a response from the circumvention path.
If the page is deemed a block page, we go to the next phase.
In the second phase, we compare the sizes of the returned
webpages—one received from the direct path (i.e., block page)
and the other from the circumvention path (i.e., actual page),
similar to [42]. Such an approach has been shown to be quite
effective. The 2-phase approach reduces block page detection
times for the common case and achieves high accuracy in
other cases at the cost of higher detection times.
Using existing datasets of block pages from 47 ISPs across
the globe [3, 13], we find that C-Saw is able to accurately
classify ∼80% pages as block pages in the first phase, without
any false positives (i.e., normal pages being classified as
block pages). In case there are false positives, C-Saw simply
waits for the second phase. In case of a false negative (i.e.,
a block page classified as a normal page) at the first step,
the block page will be served to the user. However, this is
instantly corrected once response from the circumvention
path is received, by issuing a page refresh to the browser.
The use of redundant requests also helps in differentiat-
ing censorship from network problems (e.g., high delay or
packet loss). For instance, if a response is received from the
circumvention path but not from the direct path, the latter is
more likely to be a censorship event rather than a network
problem because both the paths share at least a subset of
network resources (e.g., access link) and a problem in them
will likely affect both the paths.
Low overhead vs. resilience to false reports. C-Saw clients
periodically download the list of blocked URLs from the
global_DB. Relying solely on these crowdsourced measure-
ments presents two challenges: (i) it makes the system vulner-
able to false reports—that can cause clients to use more costly
circumvention approaches thus leading to higher PLTs—and
(ii) it can reduce the footprint of measurements. To address
these challenges, C-Saw clients measure the direct path for
blocked URLs in global_DB randomly with probability p and
independently for each URL. The value of p presents a trade-
off: p = 0 implies that clients solely rely on global_DB for
measurements, which makes C-Saw vulnerable to false re-
ports whereas p = 1 implies that clients always measure
the direct path, which increases measurement overhead and
reduces the usefulness of global_DB. Thus, p should be be-
tween 0 and 1 to achieve a balance between low overhead
and resilience to false reports.
4.3.2 Circumvention Module. This module hosts differ-
ent circumvention services and allows URL requests to be
dispatched via the direct path, local-fix, static proxy, Tor, or
any other available circumvention method. The local-fix is
any non-relay based circumvention method, which varies
based on deployed censorship. For example, in case of DNS
blocking, the local-fix is to use a public/global DNS. In case
of HTTP blocking, HTTPS is used as a local-fix (if available),
and when HTTPS traffic is blocked, the local-fix is to use
domain fronting (if available).
Selecting a circumvention approach. For a blocked URL,
C-Saw may have multiple options for circumventing cen-
sorship. We aim to select a circumvention approach that is
expected to result in the smallest PLT. To this end, we always
prefer local-fixes over relay-based approaches (e.g., Tor and
Lantern) as the former usually have smaller path latencies.
If multiple relay-based approaches can be used for circum-
vention, we normally choose the one that yields the smallest
PLT, by way of maintaining a moving average of PLTs for
each circumvention approach and URL. To accommodate
the case where, over time, a circumvention approach may
improve in PLTs, we use a randomly chosen circumvention
approach (among possible approaches) for every n = 5-th
access to the URL.
4.4 C-Saw Features and Optimizations
C-Saw’s additional features include: (a) a modular design
with user customization, (b) ability to track evolution of
censorship, (c) an algorithm for reducing the size of local_DB,
which can be particularly useful for memory-constrained
devices in developing countries [21], and (d) the ability to
manage multi-homed clients.
Modular design with user customization. C-Saw’s de-
sign facilitates evolution and thus, can incorporate new cen-
sorship detection algorithms and circumvention methods via
automatic software updates. Furthermore, a user can specify
a desired configuration according to personal preferences
such as high performance or anonymity. If a user prefers
performance over anonymity, the C-Saw proxy always picks
local-fixes (whenever available). If a user prefers anonymity
over performance, C-Saw always chooses an anonymous
circumvention approach (e.g., Tor).
URL status churn. Based on censors’ policies, unblocked
URLs may get censored whereas censored URLs may get
whitelisted over time. C-Saw tracks these changes as follows:
540
Incentivizing Censorship Measurements via Circumvention
• Scenario A: Blocked → Unblocked. This type of churn is
handled by expiring the timer associated with the URL
record in the local_DB. On expiration, the URL status
is changed to not-measured. Then, as per Algorithm 1,
the proxy issues redundant requests over the direct
path and additional circumvention path(s), and will be
able to observe white listing of the URL.
• Scenario B: Unblocked → Blocked. This type of churn
is implicitly addressed in the design because the proxy
always measures the direct path for blocking.
Managing the database size. C-Saw reduces the size of the
local_DB, an in-memory hash table, by (1) aggregating URLs
and (2) expiring stale entries. With URL aggregation, derived
URLs are aggregated into a single URL, typically the domain
name or the hostname. This aggregation policy varies based
on the type of blocking.
(1) HTTP blocking: We consider three cases (a) if the base
URL (e.g., http://www.foo.com/) is blocked, we just keep
this one record in the local_DB and consider all derived
URLs (e.g., http://www.foo.com/a.html) as blocked, (b)
if a derived URL is blocked, then its base or derived
URLs on the same base may or may not be blocked
(e.g., censors sometimes block only specific pages [12]),
thus, we make an entry for the derived URL8, and (c)
if a URL, base or derived, is found to be uncensored, we
keep only one entry in the local_DB corresponding to
the base URL. Considering cases (b) and (c) collectively
requires longest prefix matching to find the correct
status of a derived URL that is blocked.
(2) IP, DNS, and HTTPS blocking: A censor uses these mech-
anisms to filter an IP address or a hostname. For ex-
ample, in case of HTTPS, a censor filters traffic based
on the SNI field, which contains the hostname in clear
text. Thus, if a censor uses either of these approaches,
we mark the base URL to be blocked (and store a single
entry in local_DB), even if we detect a derived URL as
being censored.
Multi-homed clients. Multi-homing creates a challenge
for C-Saw as it can increase PLTs. Consider a network that
randomly maps requests to one of two ISPs, A and B. Assume
A blocks URL Y but B does not. Suppose when the request for
URL Y first arrives, it goes through provider A. C-Saw will
mark the URL not-blocked. However, a subsequent request for
URL Y may go through ISP B that filters Y, requiring blocking
detection. For the next request, C-Saw may choose a more
expensive relay-based circumvention approach. This oscilla-
tory behavior, whereby a URL is deduced to be not-blocked
and blocked can continue leading to degraded performance.
C-Saw addresses this challenge by detecting multi-homing
8We avoid measuring the homepage due to lack of user consent, which may
not be practical to obtain in this case.
541
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
and then using a circumvention strategy commensurate with
the blocking mechanism of the filtering ISP (in case only one
ISP is blocking the URL) or the more strict censorship. For
example, if A filters HTTPS traffic for URL Y and B does
not, we use HTTP/DF for all subsequent requests for URL
Y. We detect multi-homing by periodically generating re-
quests for determining the ASN of the providers. If over
short timescales, more than one ASN is returned, we mark
the network to be multi-homed.