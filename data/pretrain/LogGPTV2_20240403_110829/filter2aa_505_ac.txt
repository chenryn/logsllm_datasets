# Advanced Exploitation Techniques and Bypassing Anti-Virus Emulators

## Introduction
This document outlines several advanced exploitation techniques that can be used to bypass anti-virus (AV) emulators. The focus is on Return-Oriented Programming (ROP), DLL forwarding, and Windows heap management mechanisms.

## ROP and Bypassing AV-Emulators

### ROP Gadget Example
```assembly
.text:77EC96C5                 pop     edi
.text:77EC96C6                 pop     esi
.text:77EC96C7                 mov     eax, ebx
.text:77EC96C9                 pop     ebx
.text:77EC96CA                 retn
```
This ROP gadget can be used to execute core code by manipulating the stack and control flow.

### Bypassing Specific AV-Emulators
- Kaspersky KIS2016
- Norman Suite 11
- Bitdefender Anti-virus2016
- ESET Smart Security 8
- VBA32
- ...

By finding a module that cannot be loaded by the AV-Emulator, it can be leveraged to bypass the emulator.

## DLL Forwarding

### Overview
DLL forwarding is a technique where an API call in one DLL is redirected to another DLL. This can be challenging for AV-Emulators because they typically scan the import table or dynamically load APIs to determine if an API can be called. Currently, AV-Emulators are not able to simulate indirect DLL forwarding.

### Example: URLDownloadToFile
1. Find an API that is not reported as risky by the AV-Emulator.
2. Use this API to indirectly load `URLMon.DLL`.

#### HrSniffUrlForRfc822
```c
signed int __stdcall HrSniffUrlForRfc822(LPCWSTR ppwzMimeOut)
{
    signed int v1; // edi@1
    v1 = 1;
    if (FindMimeFromData(0, ppwzMimeOut, 0, 0, 0, 0, (LPWSTR *)&ppwzMimeOut, 0) >= 0)
    {
        if (!StrCmpW(ppwzMimeOut, L"message/rfc822"))
            v1 = 0;
        CoTaskMemFree((LPVOID)ppwzMimeOut);
    }
    return v1;
}
```

### Call Chain
```c
__stdcall CBody::Load(int, struct IMoniker *, struct IBindCtx *, unsigned long) ->
HrSniffUrlForRfc822(LPCWSTR ppwzMimeOut) ->              
FindMimeFromData(x,x,x,x,x,x,x,x) -> 
```

### Bypassing AV-Emulators
- Kaspersky KIS2016
- Norman Suite 11
- Bitdefender Anti-virus2016
- ESET Smart Security 8
- VBA32
- ...

## Heap Allocation and Free

### Overview
The Windows memory heap mechanism is complex. AV-Emulators typically allocate chunks of memory to simulate memory operations of malicious programs. By taking advantage of predictable heap structure information, which AV-Emulators do not simulate, it is possible to bypass them.

### Example
```c
HLOCAL h1, h2, h3, h4, h5, h6; HANDLE hp;
hp = HeapCreate(0, 0x1000, 0);
h1 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 16);
h2 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 32);
h3 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 16);
HeapFree(hp, 0, h1);
HeapFree(hp, 0, h3);
HeapFree(hp, 0, h2);
h4 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 60);
if (h4 == h1) {
    printf("virurunning ...\n");
    VirusRunning();
}
```

### Heap Merging
After freeing `h2`, the heap manager will merge nearby free blocks. If a new block of size 64 is allocated, it will use the merged block directly. This predictability can be exploited to bypass AV-Emulators.

### Modifying Heap Block Pointers
By modifying the heap block pointers `Flink` and `Blink`, the heap merging operation can be broken, leading to the failure of `h4` allocation. AV-Emulators do not simulate such behavior.

### Example
```c
HeapFree(hp, 0, h1);
HeapFree(hp, 0, h3);
HeapFree(hp, 0, h2);
int diff = (16 + 8) + (32 + 8) + (16 + 8);
int nlink = (int)h1 + diff;
*(int *)h1 = nlink;
*((int *)h1 + 1) = nlink;
h4 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 60);
if (h4 == 0) {
    printf("virurunning ...\n");
    VirusRunning();
}
```

### Bypassing AV-Emulators
- Norman Suite 11
- Bitdefender Anti-virus2016
- VBA32
- ...

## Ntdll.RtlpAllocateHeap Failure

### Overview
When `Ntdll.RtlpAllocateHeap` fails on memory allocation, it can be used to bypass AV-Emulators.

### Example
```c
HeapFree(hp, 0, h1);
HeapFree(hp, 0, h3);
HeapFree(hp, 0, h2);
int diff = (16 + 8) + (32 + 8) + (16 + 8);
int nlink = (int)h1 + diff;
*(int *)h1 = nlink;
*((int *)h1 + 1) = nlink;
h4 = HeapAlloc(hp, HEAP_ZERO_MEMORY, 60);
if (h4 == 0) {
    printf("virurunning ...\n");
    VirusRunning();
}
```

### Bypassing AV-Emulators
- Kaspersky KIS2016
- Norman Suite 11
- Bitdefender Anti-virus2016
- ESET Smart Security 8
- VBA32
- ...

## Mitigation

### Challenges for AV-Emulators
- Lack of effective countermeasures.
- Difficulty in simulating real machine behavior.
- Need for deeper static heuristic analysis to avoid condition or branch issues.
- Protection of internal detection logic by rejecting a large number of scanning requests in a short time.

## Conclusion
Advanced exploitation techniques can be used to bypass AV-Emulators by leveraging ROP, DLL forwarding, and heap management mechanisms. While these techniques are powerful, they also highlight the need for more sophisticated AV-Emulator designs.

## Q&A
Thank you! Feel free to ask any questions.

**Contact Information:**
- Email: [Your Email]
- Website: [http://www.vxjump.net](http://www.vxjump.net)

**Special Thanks:**
- Bing Sun for providing cool ideas.
- Linxer for discussing VM inside details.