module name
f791feee f79231ee
bregdrv
(no symbols)
因此，sub_116f2函数对应的内存地址为0xf791f000+0x1a6a=0xF7920A6A，用WinDbg对其下
断点，输入g命令执行。
kd> u F7928A6A
bregdrv+ex1a6a:
f7920a6a 6a3c
push
3Ch
f7926a6c 687e1f92f7
push
offset bregdrv+ex2f7e (f7921f7e)
f7928a71 e892128088
ca11
bregdrv+ex2de8 (f7921de8)
f792ea76
33ff
xor
edi,ed1
f792ea78
897de4
nov
dword ptr [ebp-1Ch],ed
803d582192f7ee
du>
byte ptr [bregdrv+8x3158 (f7922158)],θ
f792ea82 758a
jne
bregdrv+ex1a8e (f7928a8e)
f7928a84 b8810888ce
mov
eax,eceeeee01h
kd> bp F7928A6A
kd>g
在虚拟机中执行exploitexe，以触发断点，然后单步执行下去，可以看到最后调用的是
CmSetValueKey函数，
一个微软未公开的底层函数，用于设置注册表键值：
kd>g
Breakpoint e hit
bregdrv+ex1a6a:
f7920a6a 6a3c
push
3Ch
单步调试下去，最后会调用到CmSetValuekey函数
f792ebf6 ff7518
push
dword ptr [ebp+18h]
f792ebf9 ff7514
push
dword ptr [ebp+14h]
f792ebfc ff751e
push
dword ptr [ebp+1eh]
f792ebff 8d4dc4
lea
ecx,[ebp-3ch]
f792ece2 51
Push
ecx
f7920ce3 5e
push
eax
f7928ce4 ff158c2192f7
ca11
dword ptr[bregdrv+8x318c（f792218c)]
ds:0023:f792218c={nt!CmSetValueKey（8862a5c2）}
其他bregdll.dll的导出函数也是相同原理，比如BregDeleteKeyW最终就是调用CmDeleteKey函数
来实现，它们均通过发送1O控制码给bregdrv.sys驱动，由该驱动调用一系列CmXxx未文档化的底层
---
## Page 441
422漏洞战争：软件漏洞分析精要
函数，相当于360自己实现操作注册表的一套NtXxx函数，以调用更为底层的CmXXX函数，但由于
未对调用者进行严格地验证，导致可被任意其他程序调用，实现内核级权限的注册表慕改，这正是
导致漏洞的根本原因。
上述漏洞被曝光后，相关的利用工具也出现在网络上，被用于对一些“肉鸡”提权，该工具会
创建出3389端口的连接后门，按5次Shif键可得到CMD权限。下面就是对该利用工具的分析，如图9-17
所示，它主要利用360漏洞修改注册表，实现对sethc.cxe的映像劫持，使得按5次shif键后自动打开CMD
应用，从而拿到高权限的后门，
144
1/
10[0-4] [] / 2 
-
SRegCreneegfx (
i,
return rerslt:
图9-17修改注册表开启Shift后门
利用工具执行后的效果如图9-18所示，通过连接3389后成功拿到system权限的cmd.exe。
坦生
图9-18成功实现本地权限
---
## Page 442
第9章内核漏润分析423
后来，360在新版应用中将bregdl.dll去掉不再使用，因此这里就省去了补丁比较的部分。
9.5CVE-2011-2005WindowsAfd.syS本地提权漏洞
9.5.1漏洞描述
2011年10月，微软补丁公告中提到，Windows系统中的辅助功能驱动程序Afdsys存在本地提权
漏润，影响Windows XP与Windows Server 2003系统。该漏洞主要是Microsof Windows Ancillary
FunctionDriver（afd.sys）驱动程序未对用户提交的数据进行完善地检测，导致存在本地提权漏洞，
攻击者利用该漏洞可执行任意代码。
9.5.2从利用代码到漏洞函数的定位分析
本次漏洞分析的测试环境如表9-2所示。
表9-2测试环境
推荐使用的环境
备注
操作系统
Windows 7
简体中文旗规版
反汇编器
IDA Pro
版本号：6.5
在exploit-db网站上有人公布了一份Python版本的利用代码，链接见：http:/www.exploit-db.com
exploits/18176/，从代码中很容易找到触发漏洞的关键之处，如图9-19所示，利用代码通过构造特定
的输入数据，向IOCTL为0x000120bb发送IO请求触发漏洞，而它正是由Afd.sys中的AFDJoinLeaf函数
来处理的。
212
2.13
215
214
nputbuffer
_s12e
-ex108
2
33
724
IOCTL
nef(Io5tatusblock),
225
226
r_size,
225
ats"engandno
图9-19构造恶意10请求触发漏洞
---
## Page 443
424漏洞战争：软件漏洞分析精要
用IDA加载Afd.sys驱动，在“Functionswindow”窗口中找到AFDJoinLeaf函数，双击打开对应
的反汇编代码。在函数中找到它对用户输入数据的处理情况，可以发现程序只在当OutBufferLength
不为o的情况下才检测UserBuffer地址的有效性，如图9-20所示，因此攻击者只需令OutBufferLength=
0即可绕过检测，这也正是图9-19中第217行代码将outputbuffer_size设置为0的原因。
19091888:3384
PACE:B8016097
PRGE:0801609E
PACE:0001609
PRCE:00016000
PACE:000106
PACE:00016001
Inp._Inliserfrsbeedress
PR5E:0001600D
00091208:33847
dorptr[eax]，：大于则触发异常，交由自定义的sEm程处理
性检
PACE:00016008
1ec_16088:
eax，[ei3ch]：对serfFer指向的地址进行读写性检剂
:C0DE 3BEF: fdJeinLeaf(x,x)+113T]
PA5E:00016005
PAGE:00016000
PAGE:000160C5
图9-20漏润代码
如果要利用该漏洞，并不像9.3节中那样简单，因为在Afd.sys中有几处关键点需要绕过。
1.输入缓冲区长度必须大于0x18
InputBufferLength=*(_DwoRD *)（a2+8);
//（8>Ag91（（+e）（））118>）
区长度必须大于ex18，否则跳走
f
n0e0000x=8A
v11 = Irp;
goto LABEL_72;
2.*(InputBuffer+8）必须不为0
v2 = a2;
（Tx+Z）（GOM）。=A
（8+A）（3N）。=puH
//*（InputBuffer+8）不为8.以供后面引用
v14 = ObReferenceObjectByHandle(
Handle,
//Handle=*（InputBuffer+8），此处不能为θ，否则触发异常
“9AssociatedIrp.MasterIrp = v9;
menset（v9, 0,@x3eu);
mencpy（（char*）v9+48，v8，v34）;//将*（InputBuffer+exC）的值复制到v9+48上的位置
（8+（S+d（））。>EA（uTpus）11=1（8+6A（Mo））。）下
//此
处要求*（v9+48）=*（InputBuffer+θxC）必须等于1.此处P+52=v9+52=v9+48+4=InputBuffer
+θxC+4=InputBuffer+@x1θ，所以 InputBufferLength-θxC必须大于*（InputBuffer+@x1e）+8,
否则触发异常
//注意：此处用IDAFS功能会反编译错误，显示的偏移数值是不正确的，笔者是在IDA6.5上分析的
ExRaiseStatus(exCeeeeeeDu);
4.连接到本地未开放的端口，比如lexploit-db上的利用代码是将其连接到4455未开放端口，使其
连接状态保持为CONNECTING
（+）（.）=
//v2+Bx18指向FILE_0BJECT 结构
( +）=x
//指向FxContext，用于描述套接字的连接状态，
比如xAFDe代表CONNECTING
·…省略部分内容…
if （*(_BYTE*)(_FxContext+2)= 2)
//套接字状态必须为CONNECTING（ex2）
{
v38 = AfdCreateConnection(
*（_DwORD *)(_FxContext +14θ)+16,
+（）
g（6>8)& 1,
+x（）
(int)&v37);
if (v38>=θ)
---
## Page 445
426漏洞战争：软件漏洞分析精要
满足以上几个关键点去构造利用代码，应该是不难的，具体可参考exploit-db上的代码，此处不
再赞述。
9.5.3补丁比较
通过补丁比较分析AFDJoinLeaf函数，可以发现补丁后的afs.sys不再检测OutBufferLength是否为
0，而是直接检测UserBuffer所指向的地址的有效性，如图9-21所示，左边是修复后的代码，右边是
修复前的。
：
10L_16094
lec_16005)
al1
ds:.
.[]
1os_1600
ahortitr_tees
[+t] 
as.ds
图9-21补丁对比
9.6CVE-2013-3660WindowSwin32k.sysEPATHOB指针
未初始化漏洞
9.6.1漏洞描述
2013年3月，来自Google安全团队的研究人员TavisOrmandy在对win32k.sys进行内存压力测试时
发生蓝屏，经过分析发现是win32ksys模块的一处本地提权漏洞，利用该漏洞可获取System最高权限。
http://pwmies.com/archive/2013/nominations/），虽然最终evad3rs越狱团队获得2013年度最佳提权漏润，
但并不影响该漏洞所体现出来的影响价值。同年5月，TavisOrmandy将该漏洞的PoC代码公布在其博
客及exploit-db站点上，微软于7月发布的补丁MS13-053中修复了该漏洞。
---
## Page 446
第9章内核漏润分析4427
9.6.2
通过IDA定义结构体辅助分析
本次漏洞分析的测试环境如表9-3所示。
表9-3测试环境
推荐使用的环境
备注
物理操作系统
Windows 7
简体中文旗舰版
虚拟机系统
Windows 7
家庭普通版
虚拟机软件
VMware Workstation
版本号：10.0.2 build-1744117
编译器
Visual Studio 2010 Ultimate
版本号：10.0.30319.1
调试器
WinDbg
版本号：6.11.0001.404
反汇编器
IDA Pro
版本号：6.5
开启WinDbg内核调试，用虚拟机Windows7打开poc.exe，运行后系统崩溃，被WinDbg断下：
kd> g
Access violation - code ceeeeee5 (!!! second chance !!!)
win32k1EPATH0BJ::bF1atten+8x15:
921b8406 f640810
test
byte ptr [eax+8],1eh
kd> kb
ChildEBP RetAddr Args to Chi1d
92e17ce4 922c7701 008eeee1 000e0157 fdac71d8 win32klEPATH0B3::bF1atten+ex15
92e17d28 83c8b42a 1ae128aa 0012f96c 77b464f4win32kINtGdiF1attenPath+ex5e
92e17d28 77b464f4 1a0128aa 012f96c 77b464f4 nt1KiFastCa11Entry+8x12a
WARNING: Stack unwind information not ava1lable. Following frames may be wrong.
0012f958 76a568ed 76a46581 1a8128aa e8008000 ex77b464f4
0012f95c 76a46501 1a0128aa 000000ee e012face gd1321NtGd1F1attenPath+0xc
0012f96c 00281745 1a0128aa 0000008e 1a0128aa gd1321F1attenPath+ex44
B012fbec 7ffdfeee 0e12fb54 77b5b3f5 7ffdfeee kerne1321BaseThreadInitThunk+exe
0012fb14 77b5b3f5 7ffdfee8 77eaa279 eeeee0e0 ex7ffdfe00
012fb6c 00000e0 0e282184 7ffdfeee e0ee000 ex77b5b3c8
从栈回测可以看到这里调用的关键函数win32kEPATHOBJ:bFlatten，直接用IDA加载存在漏
洞的win32k.sys进行分析，从F5反编译的代码可以看到其调用了EPATHOBJ:pprFlattenRec函数，如
图9-22所示，其实它就是导致本次漏洞的关键函数，具体参见后面的分析。
---
## Page 447
428漏润战争：软件漏洞分析精要
igned int _thiscal1 EPAtsgBa:bflattea(CPRtHosJ ethis)
PTB yt; // esi1