and countries particular variants are raging.
5 ATTACKING A LOW ENTROPY PRNG
Although the PRNG of Mirai is relatively simple, it creates good
quality output. The cycle length has a period of 296 − 1 and the
output passes the Dieharder test suite [7, 14]. Still, LFSRs are not
equivalent to cryptographic RNGs and inherently vulnerable, and
the lack of a suitable output transformation effectively leaks the
internal state via the generated randomness. If enough consecutive
bits become observable, it allows the prediction of future results.
The LFSR used within Mirai depends on four internal state-
keeping variables, which means that if we were to learn four con-
secutive random values we could predict all future ones. Observing
four complete consecutive values is however impossible, since the
rand_next() function is used not only in the packet generation
but also elsewhere, and the 32-bit output is truncated to 16-bits
when setting the IP ID or source port. If we were to obtain two
Mirai scan packets back-to-back, we would thus learn twice 32 bit
RNG output from the destination IP and twice 16 bits from the IP
ID. However, as IP addresses are hit randomly, it is unlikely that
two consecutive packets hit our telescope or honeypots. Still, as
two subsequent calls to rand_next() are used in the creation of a
single packet, we can efficiently confirm a correct state guess as the
likelihood to obtain a 32-bit and a 16-bit match is vanishingly low.
Attacking the seed. Any PRNG is only as good as the entropy
it has been seeded with. Even a cryptographically-strong PRNG
can be broken when initialized with (largely) predictable data. Such
insufficient entropy is another problem in Mirai’s home-grown
design. Upon startup of the thread, the router fills the internal state
variables with four values: (1) the epoch in seconds, (2) the process
ID, (3) the parent process ID, and (4) the number of clock ticks since
the program was launched. In theory, the combination of these
four values could provide 94 bits of entropy on a 32 bit system. In
practice however, the entropy of the random numbers is lower due
to a number of conceptual and implementation mistakes:
• time(NULL) returns the time in seconds since January 1,
1970. As Mirai immediately starts to send packets at a high
rate, the startup time will be very close to the time of the
first arriving packets, especially in a telescope. Even if we
very conservatively assume that the device has been infected
for 24h before we see the first packet, this would imply a
mere 16 bits of entropy. Our measurements have shown this
to be much shorter in practice, with the first attack packets
reaching us on average within 15 min after startup.
• Before the RNG is initialized, the process is forked to create
a dedicated thread for scanning. As a fork is essentially the
start of a new program, the number of clock ticks elapsed
starts at 0 for the child process. By the time the RNG is seeded,
only four instructions have been executed. This reduces 32
bits of potential entropy to just a handful of bits. In glibc prior
to version 2.18 which is frequently used in IoT devices, the
resolution of clock() was limited to a granularity of 10,000
ticks. Thus, possible values at this stage in the program are
either 0 or 10,000, reducing the entropy to just 1 bit.
• The state y is set to the process ID XORed with the parent
process ID. While both process IDs are 15 bits, the combina-
tion of both also has 15 bits of entropy.
Due to these issues the 94-bit seed has in practice only 32 bits
of entropy. We can analytically derive which bits in the four reg-
isters actually contain entropy, however given that LFSRs can be
efficiently computed, it is trivial to brute force the remaining 32
bits and evaluate the sequence to find a value pair where the 16
bits used in the source port and window size matches the output.
As the source port and window size only provide the last 16 bits
generated, multiple seeds in our search space will generate these
numbers in correct succession. To verify which of the matching
combinations is the actual seed, we can generate the sequence
of numbers and verify if this matches packets coming into the
telescope. In these sequences we can identify whether an IP ID and
Variant
1 MIORI
2 MIRAI
JOSHO
3
daddyl33t
4
5
Cult
Hosts
75,249
62,235
23,487
12,583
5,621
Variant Hosts
5,338
5,113
4,631
4,076
2,201
MASUTA
NGRLS
SORA
RBGLZ
OWARI
6
7
8
9
10
Table 2: Unique hosts for the top 10 advertised botnets.
destination IP address are generated consecutively, and repeat the
process until we have only one candidate seed left which is the right
seed. In most cases, we only have to generate the sequence until
the first IP address in order to find the correct seed. Generating
the sequence until the first observed IP address is a process that
will terminate for the correct seed, but for incorrect seeds it will
run in the worst case indefinitely. The number of steps we have
to take depends on the statistical likelihood to be hit by a Mirai
infected device, and as our telescope contains more than 216 IP
addresses, a fully random scan would target one of our IPs after on
average 215 steps. For 99% certainty that a seed is not correct we
can stop our verification if it does not generate the first observed
combination from the telescope within 225 steps. Program execution
can therefore be halted soon without potentially loosing candidate
solutions, and yields the seed within 100 milliseconds.
6 MIRAI’S BATTLE OVER THE IOT
The attack on the random number generator and the ability to
efficiently compute the seed value allows us to characterize the
current state and behavior of Mirai infections worldwide. When
receiving scan and brute-forcing attempts into our telescope and
honeypots, we can determine the exact moment when a particular
IoT device was infected. Since packets have the same random source
port and window size, we can relate all subsequent interactions to
a particular infection of which we know the variant type from the
honeypot interactions. Finally, as soon as no further connection
attempts appear within the expected inter-arrival time, we can tag
the device as cleaned again, due to a reboot or being patched by the
owner. We will use this method to look at the lifetime of infections,
first the infection characteristics in general, and second operational
aspects such as the regional biases and other modifications that
have been introduced into the source code by later botmasters.
In total, we received scanning and credential brute forcing from