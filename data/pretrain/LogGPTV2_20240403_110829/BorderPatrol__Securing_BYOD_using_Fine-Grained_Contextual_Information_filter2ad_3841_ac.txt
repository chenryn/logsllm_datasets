l
)
e
a
c
s
g
o
L
(
s
p
p
A
f
o
r
e
b
m
u
N
103
102
101
100
152
53
8
1
2
3
3
4
2
5
Number of IPs-of-Interest per app
Fig. 3: Number of apps that have different stack traces
connecting to the same IP addresses.
B. Analysis
BORDERPATROL is most useful in situations where (i) an
app contains a mix of desirable as well as non-desirable func-
tionalities, and (ii) these functionalities cannot be distinguished
by existing network-level enforcement mechanisms. Thus, in
this section we present an analysis and estimate the prevalence
of apps that fulﬁll these criteria. To this end, we evaluate
BORDERPATROL with apps from the PlayDrone [20] dataset.
As BORDERPATROL aims at a BYOD deployment, we
chose the 1,000 most popular (i.e., most downloaded) apps
in each BUSINESS and PRODUCTIVITY categories for a total
of 2,000 apps. We then exercise each app with adb monkey
and issue 5,000 random events while recording all generated
network trafﬁc during this experiment. As discussed above, a
network-based enforcement mechanism can easily distinguish
trafﬁc based on DNS names or IP addresses. Therefore, we
conservatively assume that BORDERPATROL will be most
useful if different functionalities within an app connect to
the same IP address. Hence, we deﬁne an IP-of-interest (i.e.,
IoI) as an IP address that is the destination of multiple IP
packets which contain more than one distinct stack trace.
465
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
As the calling context is established at the time a socket is
created, all packets of a given connection will contain the same
stack trace. Thus, stack traces will only differ for packets in
connections established at different contexts within the app.
Figure 3 shows the number of apps that connect to one or
more IoIs. Note that these numbers are extracted from the
dynamic analysis described above. As it is unlikely that our
monkey-based analysis achieves complete code-coverage, the
data presented in Figure 3 is a lower bound on the apps and
their IoIs, and BORDERPATROL might be applicable broader
than the ﬁgure suggests.
Based on these results, we observe that a total of 218 apps in
our experiment had at least one IoI. In 75% of the applications
with an IoI, the methods in the stack traces originate from
the same Java package. This corresponds to the case studies
presented in §VI-C, where the desirable and undesirable
functionality is contained in a third party library (i.e., the same
Java package in the Facebook SDK) or both belong to the core-
functionality of the app (i.e., the app’s main Java package for
Box and Dropbox). Interestingly, 25% of the IoIs receive traf-
ﬁc that contains stack traces with methods from different Java
packages. This will happen if different components within an
app reuse a shared common popular library. For example, the
Apache HTTP client library [21] frequently occurs here. An
advanced network-based enforcement mechanism might try to
ﬁngerprint network trafﬁc based on such predictable behavior
by the network library in use. However, the reuse of a network
library by different app components (as discussed here), would
thwart any such ﬁngerprinting attempts. This evaluation on the
prevalence and structure of IoIs illustrates that BYOD policy
enforcement mechanisms would greatly beneﬁt from the ﬁne-
grained contextual information that BORDERPATROL provides.
1) Validation: In this section we evaluate whether BOR-
DERPATROL is precise enough to only disable unwanted
functionality but leave the remainder of the app intact. Un-
fortunately, whether a given functionality is beneﬁcial or
detrimental to a company is not a global property. That is,
some functionality (e.g., “Login with Facebook”) might be
beneﬁcial for one company but deemed detrimental by another.
Hence, for this evaluation, we rely on data collected by Li et
al. [22] to determine an unwanted functionality. In their work,
Li et al. identiﬁed a set of 1,050 third party libraries that
exﬁltrate sensitive information including a variety of popular
analytics and advertisement libraries. Based on these ﬁndings,
we created a simple policy that drops all network packets
that contain stack traces that are associated with any of these
libraries. (e.g., com.flurry library, Example 1 in Snippet 1)
Subsequently,
to assess the impact of this policy on app
usability, we chose a set of 60 apps and manually evaluated
them by sorting the libraries that manifest themselves in IoI’s
according to their popularity in our app sample of 2,000
apps. We then traverse this list and for each library, chose
one app that includes the corresponding library. Finally, we
arrive at a data-set of 60 apps that in union include the 60
most popular libraries. To assess the impact created by our
policy on these apps, we manually run each app twice —
once as a baseline with BORDERPATROL disabled, and once
with BORDERPATROL enforcing the above-stated policy. The
task of the human evaluator at this point is to distinguish any
changes in behavior between the two runs.
As Li’s list contains a set of advertisement libraries, one of
the obvious differences observed repeatedly was the lack of
ads displayed when BORDERPATROL was in effect. Li’s list
also contains a wealth of analytics and tracking libraries. We
veriﬁed that BORDERPATROL correctly dropped all network
trafﬁc generated by the ﬂagged libraries by inspecting the
network trafﬁc before and after the Policy Enforcer. Blocking
analytics and tracking libraries did not result in any observable
differences in any of the apps. In summary, BORDERPATROL
correctly enforced the stated policy, prevented the transmis-
sion of sensitive information, and did so without negatively
affecting app functionality.
C. Case studies
Existing network-based BYOD enforcement mechanisms
operate on coarse-grained context information pertaining to
the network trafﬁc. The lack of ﬁne-grained context implies
that these systems cannot provide a variety of advantageous
business cases. More precisely,
if a given app contains a
mix of useful and detrimental functionalities for the company,
additional context can be used by a BYOD deployment to
allow the former but prevent the latter.
Our case studies focus on two such scenarios. First, cloud
storage apps provide a convenient way to share company data
among employees, but at the same time allow employees to
upload documents that might violate company policy or the
law (e.g., the GDPR or HIPPA). To demonstrate the utility
of a BYOD policy that distinguishes upload and any other
operations, we present this use-case with the Dropbox and Box
cloud storage apps. The second use-case involves apps that
rely on an identity provider (e.g., Facebook) for authentication
purposes, but at the same time transmit analytics information.
The prototypical example in this category is Facebook’s SDK
which provides access to the Facebook Graph API [23]. This
API implements functionality for identity provider capabilities
(e.g., “Login with Facebook”) as well as functionality that app
developers can use to collect usage statistics and implement
user tracking. We demonstrate this use-case on the SolCalen-
dar [24] app. To illustrate the utility of ﬁne-grained contextual
information for a BYOD deployment, we compare, for both
use-cases, a conventional network enforcement approach with
the capabilities provided by BORDERPATROL.
Cloud storage: Dropbox [6] and Box [25] are popular
cloud-based ﬁle synchronization apps available on the Google
PlayStore from BUSINESS and PRODUCTIVITY categories,
featuring more than 500M and 10M downloads, respectively.
On-network enforcement: In this scenario the policy
enforcement mechanism is implemented exclusively on the
network, and can allow or reject trafﬁc based on IP addresses,
DNS names, packet ﬂow direction and size, or any other
information available on the network layer (we refer the reader
to §VIII for more details about on-network enforcement). For
466
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
our purposes, we record the network trafﬁc generated when
using the Dropbox and Box apps to download and upload
content, at ﬁrst without enforcement. Dropbox uses the same
DNS names and IP addresses to upload and download content.
As such, a network-based enforcement mechanism can only
block both or neither of these functionalities, but cannot
establish the use-case where BYOD provisioned devices can
download documents but not upload (or leak) other data. On
ﬁrst glance, the situation with Box seems easier to handle for a
network-based mechanism. Speciﬁcally, Box uses different IP
addresses for the download and upload functionality. However,
merely blocking the IP address that is used to upload data also
prevents the listing and browsing of documents, and hence
effectively thwarts the download capability too, as users cannot
discover the ﬁles they might want to download. Additionally,
preventing outgoing packet ﬂows that exceed a certain size
fails to prevent uploads where ﬁle size is below the threshold.
BORDERPATROL: In our approach, we ﬁrst use BORDER-
PATROL to proﬁle apps and generate the json database.
We then use the policy maker to determine which methods
uniquely appear in the IP_OPTIONS when we upload and
download documents in the Dropbox and Box apps. Based
on this proﬁling information, the system creates a policy that
drops packets which include method signatures that are only
present in the connections used to upload content. Speciﬁ-
cally, the policy conﬁguration causes BORDERPATROL to drop
packets originating from Dropbox, if the stack trace includes
a speciﬁc method from the UploadTask class. (Example
3 in Snippet 1). Similarly, BORDERPATROL drops packets
that originate from Box if the stack trace includes a speciﬁc
method in the BoxRequestUpload class.With this policy in
place, we exercised both apps manually by traversing through
all available menu items, listing, searching, previewing and
downloading a previously uploaded image which is not present
on the device. We then downloaded another image from
Google Images which is not present in either of the cloud
storages and attempted to upload this image to both accounts.
We observed that beyond the blocked upload functionality, all
other app capabilities remain intact.
Facebook SDK analytics and login: For analytics activity,
we examine a calendar app called SolCalendar which uses the
Facebook Graph API to provide authentication and report back
analytics information. As discussed in §I, the transmission
of analytics information can be detrimental to a company’s
business interests. Hence to assess the capability of a BYOD
enforcement mechanism to allow authentication and prevent
analytics, we again compare the two different strategies.
On-network enforcement: In this scenario, we ﬁrst set a
policy to drop all packets whose destination IP corresponds
to a Facebook Graph API DNS name. We then run the
calendar app and immediately observe (unsurprisingly) that
the “Login with Facebook” functionality is broken. While
the above restriction obviously prevents analytics data from
being transmitted to Facebook,
it also thwarts the useful
authentication functionality. This example illustrates that ﬁne-
grained contextual information is necessary to enable BYOD
policies that maintain beneﬁcial app functions.
BORDERPATROL: The contextual
information provided
by BORDERPATROL is sufﬁcient to distinguish between the
authentication and analytics work-ﬂows. We use BORDER-
PATROL and leverage a simple policy to block undesirable
analytics activities by dropping the packets which include
any of the identiﬁed method signatures. During the manual
evaluation at
the time of policy enforcement, we observe
that BORDERPATROL preserves the “Login with Facebook”
functionality. Furthermore the policy enforcement does not
lead to any observable changes in the app. We also veriﬁed,
by inspecting the network trafﬁc, that our enforcement mech-
anism correctly drops the network packets used for analytics.
Takeaway: The above case studies illustrate how BYOD
enforcement mechanisms that rely exclusively on a network-
viewpoint
information to
enforce policies that are beneﬁcial to the company. However,
this shortcoming can be rectiﬁed with a system like BORDER-
PATROL that augments network information with ﬁne-grained
contextual information within the BYOD perimeter.
lack the ﬁne-grained contextual
D. Performance Evaluation
We evaluated our prototype implementation of BORDERPA-
TROL on a quad core 3.20GHz Intel ® Core ™ i5-4570 CPU
and 24GB of RAM. We performed the Android experiments
on emulators with modiﬁcations as described in §V. We
implemented a network stress test app that repeatedly (for
10,000 iterations) creates a socket, sends a single HTTP
GET request for a static 297-byte HTML page to a server,
and closes the socket again as fast as the device allows,
therefore representing the worst case scenario for a device’s
network stack. To avoid network-induced latency ﬂuctuations,
we hosted a Python SimpleHTTPServer [26] on the same host
that runs the Android emulator. The goal of this performance
evaluation is to measure the overhead of every component and
modiﬁcation we used to realize BORDERPATROL by adding
one component after another to the default emulator (i.e.,
baseline) until we obtain the full BORDERPATROL system.
These conﬁgurations are as follows:
(i) default-SLIRP (baseline): This conﬁguration corresponds
to an Android emulator as deﬁned by the Android
SDK, which uses an unmodiﬁed system image, default
Android Linux kernel and QEMU’s user-mode (SLIRP)
networking stack for connection.
(ii) default-tap: This conﬁguration modiﬁes the networking
setup of the baseline and uses virtual TAP interface,
allowing us to measure the performance difference be-
tween SLIRP and TAP networking modes.
conﬁguration
(iii) default-tap-nfqueue: This
introduces
iptables rules to redirect network trafﬁc into an
NFQUEUE, which is then consumed by a simple Python
program that reads all packets and injects them back
unmodiﬁed. Such setup corresponds to a situation where
BORDERPATROL enforces an empty (or allow-all) policy
and shows the minimum performance impact that the
Python-based Policy Enforcer introduces.
467