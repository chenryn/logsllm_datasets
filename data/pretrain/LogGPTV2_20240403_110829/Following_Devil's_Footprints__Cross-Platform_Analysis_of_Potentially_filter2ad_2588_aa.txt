# Title: Following Devil's Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android and iOS

## Authors:
Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Bin Ma, Aohui Wang, Yingjun Zhang, Wei Zou

## Conference:
2016 IEEE Symposium on Security and Privacy

## Abstract
Recently, it has been reported that legitimate libraries are being repackaged to propagate malware. However, an in-depth analysis of such potentially harmful libraries (PhaLibs) has not been conducted due to the challenges in identifying libraries whose code may be unavailable online or spread through underground channels. Specifically, for iOS apps, the integrated libraries cannot be easily recovered from their binary code and are not analyzed by any publicly available anti-virus (AV) systems. In this paper, we present the first systematic study on PhaLibs across both Android and iOS platforms. Our methodology leverages the observation that many iOS libraries have corresponding Android versions, which can help understand their behaviors and relationships. We first cluster similar packages from a large number of popular Android apps to identify libraries, then use AV systems to find PhaLibs. These libraries are then used to search for their iOS counterparts based on cross-platform invariant features. On each discovered iOS PhaLib, we further identify suspicious behaviors that also appear in their Android versions and confirm their potential harm using AV systems. By applying our methodology to 1.3 million Android apps and 140,000 popular iOS apps from eight markets, we discovered 117 PhaLibs with 1,008 variations on Android and 23 PhaLibs with 706 variations on iOS. The Android PhaLibs were found to infect 6.84% of Google Play apps, while the iOS libraries were embedded in thousands of iOS apps, including 2.94% of those from the official Apple App Store. Our research reveals recently reported suspicious iOS libraries like mobiSage, as well as their Android counterparts and six other backdoor libraries. These libraries exhibit risky behaviors such as reading from the host appâ€™s keychain, stealthily recording audio and video, and attempting to make phone calls. Our findings show that most Android-side harmful behaviors are preserved in their corresponding iOS libraries, and we provide new evidence of library repackaging for harmful code propagation on both platforms.

## 1. Introduction
The rapid growth of mobile ecosystems is driven by dynamic and expanding markets of mobile applications, which play increasingly important roles in daily life, from entertainment and social networking to serious businesses like finance, healthcare, and home security. However, behind these valuable services, there may be illegitimate or malicious activities that can harm mobile users. Examples include transferring private user information to unauthorized recipients, sending unrelated SMS messages, exploiting known vulnerabilities, and installing backdoors. Such apps are referred to as potentially harmful apps (PHAs), a term used by Google to describe "applications which pose a security risk to users or their data." Recent studies show that 7% of apps on Google Play are PHAs, mostly detected by mainstream AV scanners. In our research, we consider an app to be a PHA if it can cause potential damage to the user's information assets. An examination of these apps reveals that the sources of their harmful behavior often come from shared libraries. Similar observations have been made on iOS, a platform generally thought to be more secure. Recently, it was reported that iOS apps are infected with malicious code, either through the use of untrusted versions of popular libraries or via contaminated XCode toolkits.

### Challenges in PhaLib Analysis
Given the way modern apps are developed, with extensive reuse of existing code, it is plausible that PhaLibs could be a significant channel for spreading infections when popular legitimate libraries are contaminated. However, a systematic analysis of PhaLibs has never been done before, likely due to technical challenges. For a legitimate library, only the most recent versions are typically available online, even though older versions may still be in use. For PhaLibs, the situation is more complex, as contaminated libraries are scattered across various sources and quickly disappear. Recovering them from apps is nontrivial due to different versions and customizations. The challenge is even greater for iOS PhaLibs, as the library integrated into an iOS app is broken down into methods scattered across its binary, making it difficult to identify. Unlike Android, there are no public AV systems for detecting PHAs on iOS, making validation of findings challenging.

### Cross-Platform Study
In this paper, we report the first cross-platform analysis of PhaLibs, covering 1.3 million Android apps and 140,000 iOS apps, an unprecedented scale compared to existing research. Our methodology overcomes the aforementioned technical barriers. Using a scalable comparison technique for Android methods, we find similar methods shared by different packages across over a million apps. Clustering these packages helps us discover 763 libraries and their 4,912 variations. These libraries are then extracted and scanned by VirusTotal to identify suspicious ones and analyze their potentially harmful behaviors.

A key idea of our methodology is to leverage the relationships between Android and iOS libraries for a cross-platform PhaLib analysis. Many third-party services for Apple devices also have Android versions, allowing us to identify and analyze a subset of iOS libraries by leveraging the features they share with their Android counterparts. Our study shows that even independently developed related iOS and Android libraries can be linked using cross-platform invariants, such as constant strings and class connections. Based on these invariants, we can find an iOS PhaLib by inspecting iOS apps for invariants recovered from its Android version and correlating their behavior sequences. This enables us to validate reported harmful behavior within iOS apps when similar activities in Android apps are deemed problematic.

### Our Findings
Applying our methodology to our Android and iOS app sets, we discovered 117 Android PhaLibs (with 1,008 variations), which were mapped to 46 iOS libraries. Manual confirmation showed that all of them are indeed libraries, and 23 of them (706 variations) are potentially harmful. These PhaLibs were found in 98,308 Android apps and 2,844 iOS apps on the official Apple App Store, as well as 3,998 apps on third-party Apple stores. Surprisingly, 2.94% of the iOS apps on the Apple Store contain suspicious code, contradicting the common belief that the official iOS market is well-protected. Further study revealed not only the recently reported iOS PhaLib mobiSage but also its Android version and other unknown backdoor libraries. Interesting behaviors include stealthy audio and video recording, keychain access, command and control, and making call attempts. We also found that some versions of popular libraries contain suspicious action sequences not present in their official versions, indicating possible repackaging by adversaries to propagate malicious payloads. On both platforms, PhaLibs often execute potentially harmful actions through private APIs and avoid calling APIs that require user consent, instead leveraging the consent already obtained by the hosting app.

We are communicating with Apple, Google, and other app vendors to report our findings and assist in analyzing the apps involving the PhaLibs we discovered. The video demos and other materials related to the research are posted on a private website.

### Contributions
- **Cross-Platform Study on PhaLibs:** We conducted the first systematic study on potentially harmful libraries across both Android and iOS. Our methodology includes automatic identification of libraries from Android apps, mapping Android libraries to code components within iOS apps, and determining suspicious action sequences cross-platform. These techniques were evaluated over 1.3 million Android apps and 140,000 iOS apps from the official App Store and various third-party markets, a scale never achieved in prior research.
- **New Findings:** Our study led to surprising discoveries about the pervasiveness of Android and iOS PHAs, the critical roles played by PhaLibs, new suspicious activities, contamination of legitimate libraries for spreading harmful code, and the unique strategies taken by iOS PhaLibs to remain low-profile. Additionally, our research provides new insights into the relationships between Android and iOS libraries, leading to new techniques for effective detection of PHAs, particularly suspicious iOS apps, which have never been systematically investigated before.

## 2. Background
### Mobile Libraries
A mobile library is a collection of non-volatile resources, including subroutines, classes, and data, that provides a set of functionalities (e.g., taking pictures, setting up SSL connections) that developers can easily integrate into their programs. On Android, a library is typically included in a package, encapsulating its functionalities with well-defined Application Programming Interfaces (APIs). Most modern apps are built upon different libraries, such as unity3d, crashlytics, and inMobi for Android, and flurry, openfeint, and bugsnag for iOS. Libraries are also used by advertisers to deliver ads and collect user information for targeted advertising.

Although some libraries are maintained on official websites, many others are scattered across various sources like public code repositories (e.g., GitHub) and online forums. Even for well-maintained libraries, only the most recent versions are typically available, while older versions may still be in use. Comprehensive analysis of active mobile libraries is nontrivial. In our study, we recovered such libraries from Android and iOS apps through clustering their components using a code-similarity comparison technique.

Once a potentially harmful or contaminated library is published through online repositories or forums, it can reach many app developers, who unwittingly include harmful code in their programs. A notable example is the XCodeGhost attack, where XCode, Apple's programming environment, was repackaged with harmful code and uploaded to online repositories. Apps built with the contaminated XCode, including popular ones like WeChat, were found to contain potentially harmful libraries. In our research, we provide new evidence that library repackaging attacks are present on both Android and iOS.

### Mobile PHA Detection
Like traditional desktop systems, Android is known to be plagued by PHAs. Reports indicate that PHAs exist on the official Android market and are pervasive on third-party markets. Prior research shows that PHAs are often introduced through repackaging legitimate apps, enabling them to leverage the popularity of the original app. The role of repackaged shared libraries in spreading harmful code has been less clear but is studied in our research. Unlike Android, iOS is less susceptible to PHA infection due to its restrictive security controls and app vetting process. However, the XCodeGhost attack demonstrated that contaminated shared resources can be a realistic threat to iOS security.

Major AV companies are moving towards the mobile market, providing new services to detect mobile PHAs. The public AV platform VirusTotal integrates 54 AV scanners, including products from leading companies like Symantec, McAfee, and Kaspersky, all of which work on Android apps. These scanners inspect the disassembled code of an app, looking for signatures of known harmful behavior. App markets can also deploy their own PHA detection mechanisms, such as Google's Bouncer. However, similar AV services do not exist on iOS. Apple is less supportive of third-party AV products, and technically, PHA detection on the Apple platform is challenging due to encryption protection. An app downloaded from the Apple Store is encrypted with keys, and analyzing its code requires decryption, which cannot be done without the right key. In the absence of Apple's support, it is very difficult for ordinary users to decrypt and scan their installed apps. In our study, we manually checked over ten popular online AV services and found that none provide comprehensive PHA detection for iOS. For example, VirusTotal only reports metadata of an iOS app and can detect only a few known PHAs. Other services like VirSCAN also fail to capture harmful iOS code. The lack of public AV services is partly due to the belief that iOS PHAs are rare. Our research, however, reveals that a large number of apps on the Apple markets are involved in activities considered potentially harmful when performed by Android apps.

### Code-Similarity Comparison
To recover libraries integrated into an app's code, we compare code components (methods) across a large number of apps (over a million for Android). This comparison must be scalable, accurate, and capable of tolerating differences between components, which are common due to variations in different versions and customizations.