title:Following Devil's Footprints: Cross-Platform Analysis of Potentially
Harmful Libraries on Android and iOS
author:Kai Chen and
Xueqiang Wang and
Yi Chen and
Peng Wang and
Yeonjoon Lee and
XiaoFeng Wang and
Bin Ma and
Aohui Wang and
Yingjun Zhang and
Wei Zou
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Following Devil’s Footprints: Cross-Platform
Analysis of Potentially Harmful Libraries on
Android and iOS
Kai Chen1, Xueqiang Wang2, Yi Chen1, Peng Wang2, Yeonjoon Lee2, XiaoFeng Wang2
Bin Ma1, Aohui Wang1, Yingjun Zhang3, Wei Zou1
{chenkai, chenyi, mabin, wangaohui, zouwei}@iie.ac.cn, {xw48, pw7, yl52, xw7}@indiana.edu, PI:EMAIL
1State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences
3Trusted Computing and Information Assurance Laboratory, Institute of Software, Chinese Academy of Sciences
2Indiana University, Bloomington
Abstract—It is reported recently that legitimate libraries are
repackaged for propagating malware. An in-depth analysis of
such potentially-harmful libraries (PhaLibs) , however, has never
been done before, due to the challenges in identifying those
libraries whose code can be unavailable online (e.g., removed
from the public repositories, spreading underground, etc.). Par-
ticularly, for an iOS app, the library it integrates cannot be
trivially recovered from its binary code and cannot be analyzed
by any publicly available anti-virus (AV) systems. In this paper,
we report the ﬁrst systematic study on PhaLibs across Android
and iOS, based upon a key observation that many iOS libraries
have Android versions that can potentially be used to understand
their behaviors and the relations between the libraries on both
sides. To this end, we utilize a methodology that ﬁrst clusters
similar packages from a large number of popular Android apps
to identify libraries, and strategically analyze them using AV
systems to ﬁnd PhaLibs. Those libraries are then used to search
for their iOS counterparts within Apple apps based upon the
invariant features shared cross platforms. On each discovered iOS
PhaLib, our approach further identiﬁes its suspicious behaviors
that also appear on its Android version and uses the AV system
on the Android side to conﬁrm that it is indeed potentially
harmful. Running our methodology on 1.3 million Android apps
and 140,000 popular iOS apps downloaded from 8 markets, we
discovered 117 PhaLibs with 1008 variations on Android and 23
PhaLibs with 706 variations on iOS. Altogether, the Android
PhaLibs is found to infect 6.84% of Google Play apps and
the iOS libraries are embedded within thousands of iOS apps,
2.94% among those from the ofﬁcial Apple App Store. Looking
into the behaviors of the PhaLibs, not only do we discover the
recently reported suspicious iOS libraries such as mobiSage,
but also their Android counterparts and 6 other back-door
libraries never known before. Those libraries are found to contain
risky behaviors such as reading from their host apps’ keychain,
stealthily recording audio and video and even attempting to
make phone calls. Our research shows that most Android-side
harmful behaviors have been preserved on their corresponding
iOS libraries, and further identiﬁes new evidence about libraries
repackaging for harmful code propagations on both sides.
I. INTRODUCTION
The prosperity of mobile ecosystems is powered by highly
dynamic and ever-expanding markets of mobile applications
(app for short), which are playing increasingly important roles
in our daily life, from entertainment, social networking to
serious businesses like ﬁnance, health care and home security.
Behind such valuable services, however, there could be less
than legitimate or even sinister activities, which may cause
harm to mobile users. Examples include transferring private
user information such as her precise locations and IMEI to
unauthorized recipients, sending SMS messages unrelated to an
app’s functionalities, exploiting known vulnerabilities, installing
back-doors, etc. The apps exhibiting such behavior is called
potentially harmful app (PHA), a term Google uses to replace
the undeﬁned term “malware” for describing “applications
which pose a security risk to users or their data” [1]. A recent
study shows that such dangerous activities are found in 7% apps
on Google Play [2], most of which are detected by mainstream
anti-virus (AV) scanners integrated within VirusTotal. In our
research, we consider an app to be a PHA when it acts in a way
that can cause potential damage to the user’s information assets
(as described above). A close look at such apps reveals that the
sources of their potentially harmful behavior, oftentimes, are
the libraries shared across the apps [2]. Similar observations
have also been made on iOS, a platform widely thought to be
mostly PHA free: it has been reported recently that iOS apps
are infected with malicious code, which comes from either
unwitting use of untrusted versions of popular libraries [3] or
the methods injected by contaminated XCode toolkits [4].
Challenges in PhaLib analysis. Indeed, given the way that
today’s apps are developed, which are often built by extensively
reusing existing code, it is conceivable that potentially harmful
libraries (PhaLib) could feature prominently in mobile PHA,
constituting an important channel for spreading infections
when popular legitimate libraries are contaminated. However,
a systematic analysis on PhaLibs has never been done before,
possibly due to its technical challenges. Speciﬁcally, for a
legitimate library, what can be found online are just its most
recent versions, even when most of its older versions are still in
use within a large number of apps. An example is airpush,
a library we found to have 12 versions distributed across 1,650
popular apps. When it comes to PhaLibs, the situation becomes
even more complicated: contaminated libraries are scattered
across a variety of sources like public code repositories
(e.g., GitHub), online forums, etc. and come and go quickly;
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Kai Chen. Under license to IEEE.
DOI 10.1109/SP.2016.29
DOI 10.1109/SP.2016.29
357
357
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
dedicated malicious libraries are shared among PHA authors
and difﬁcult to come by. The attempt to recover them from
apps is nontrivial, due to the presence of different versions of
a PhaLib and the customizations made by the app developer.
More challenging is the study on iOS PhaLibs: the library
integrated into an iOS app is broken down into methods
scattered across its binary, which is much more difﬁcult to
identify than an Android library that typically stays in a
package; further unlike Android for which there are many AV
systems for detecting potentially harmful code and behavior,
up to our knowledge, no public system exists for ﬁnding iOS
PHAs. In the absence of such a system, validating the ﬁndings
of a PHA analysis becomes difﬁcult, as there is no ground truth
to conﬁrm that the PhaLibs discovered are indeed harmful.
Cross-platform study. In this paper, we report the ﬁrst cross-
platform analysis on PhaLibs, over 1.3 million Android apps
and 140,000 iOS apps, an unprecedented scale compared with
all existing research on Android and iOS PHAs. The study is
made possible by a methodology designed to overcome the
aforementioned technical barriers. More speciﬁcally, using a
recent technique for scalable comparison of Android meth-
ods [5], our approach is able to ﬁnd similar methods shared
by different packages across over a million apps. Clustering
the packages within the apps according to their names and
code similarity helps us discover 763 libraries and their 4,912
variations. These libraries are then extracted and scanned by
VirusTotal to ﬁnd out those suspicious and their potentially
harmful behaviors are further analyzed.
A key idea of our methodology is to leverage the relations
between Android and iOS libraries for a cross-platform PhaLib
analysis. The interesting thing here is that a signiﬁcant portion
of third-party services to Apple devices are also provided to
Android users through libraries: e.g., among the top 38 iOS
libraries reported by SourceDNA, 36 have Android versions
(see appendix); this enables us to identify and analyze a subset
of iOS libraries by leveraging the features they share with their
Android counterparts. Our study shows that even though related
iOS and Android libraries can be developed independently,
the relations between them can still be established using
the invariants across the platforms, particular, the constant
strings they share such as the URLs for accessing external
resources, and the ways the classes involving those strings are
connected to other classes (e.g., through method invocation,
see Section III-C). Based upon such invariants, we are able to
ﬁnd an iOS PhaLib cross-platform by inspecting iOS apps
for the invariants recovered from its Android version and
correlated their behavior sequences considered to be potentially
harmful by leading AV scanners: our technique detects common
action sequences within the Android and iOS libraries of the
same service and conﬁrms that they are part of the signatures
the scanners use to catch Android PHAs. This enables us
to validate reported harmful behavior within iOS apps, when
similar activities within Android apps are deemed problematic.
Our ﬁndings. Running the methodology over our Android,
iOS app sets, we discovered 117 Android PhaLibs (with 1008
variations), which were further mapped to 46 iOS libraries.
We manually conﬁrmed that all of them are indeed libraries
and 23 of them (706 variations) are potentially harmful. These
PhaLibs are found within 98,308 Android apps, and 2,844 iOS
apps on the ofﬁcial Apple App Store and 3,998 apps on the
third-party Apple stores, including those in North America,
Asia and Europe. Altogether 2.94% of the iOS apps (based
upon our random samples) on the Apple Store are considered to
contain suspicious code, which is surprising given the common
belief that the ofﬁcial iOS market is well guarded and unlikely
to have PHAs. A further study on the discovered PhaLibs
brings to light not only the recently reported iOS PhaLib
mobiSage but also its Android version, together with other
PhaLib back-doors (adwo, leadbolt, admogo, etc.) never known
before. Interesting behaviors discovered include stealthy audio
and video recording and picture taking, keychain access within
the advertising libraries, command and control, making call
attempts, disclosing app list etc., on both Android and iOS.
Further we found that on both platforms, some versions of
popular libraries contain the suspicious action sequences their
ofﬁcial versions do not have, indicating possible repackaging of
such libraries by the adversary to propagate malicious payloads.
Particularly, on the Android side, we found that 8 popular
libraries, including mappn, jpush, swiftp and etc., have all
been repackaged, with the apps using the potentially harmful
versions discovered on third-party app markets. Particularly, the
contaminated version of a popular Chinese app-market library,
mappn was found on GitHub. Also our study shows that within
iOS apps, the potentially harmful actions corresponding to
those observed in their Android counterparts are often executed
through private APIs. Of particular interest here is the strategy
both Android and iOS PhaLibs take to perform the operations
that need the user’s consent, such as collecting precise locations:
they typically avoid calling the APIs that need the approval from
the user, such as requestWhenInUseAuthorization,
and instead, read last retrieved location data from the hosting
app in background; in other words, the PhaLib is designed to
leverage the consent an app already gets from the user (for its
legitimate functionality) to execute potentially harmful actions.
We are communicating with Apple, Google and other app
vendors to report our ﬁndings and helping them analyze the
apps involving the PhaLibs we discovered. The video demos
and other materials related to the research are posted on a
private website [6].
Contributions. The contributions of the paper are summarized
as follows:
• Cross-platform study on PhaLibs. We conducted the ﬁrst
systematic study on potentially harmful libraries, over both
Android and iOS. The study is made possible by a suite
of innovative techniques, including automatic identiﬁcation
of libraries from Android apps, mapping Android libraries
to the code components within iOS apps and determining
suspicious action sequences cross-platform. These techniques
were evaluated over 1.3 million mainstream Android apps and
over 140,000 iOS apps from the ofﬁcial App Store and various
358358
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
third-party markets, a scale that has never been achieved in
the related prior research.
• New ﬁndings. Our study leads to surprising discoveries
about the pervasiveness of Android and iOS PHAs, the critical
roles played PhaLibs in these apps, new suspicious activities,
contamination of legitimate libraries for spreading potentially
harmful code and the unique strategy taken by iOS PhaLibs to
remain low-proﬁle. Also interesting is the new understanding
about the relations between Android and iOS libraries, which
could lead to new techniques for effective detection of PHAs
on these platforms, particularly suspicious iOS apps, which
have never been systematically investigated before.
II. BACKGROUND
Mobile libraries. A mobile library is a collection of non-
volatile resources (including subroutines, classes and data) that
provides a set of functionalities (taking pictures, setting up an
SSL connection, etc.) the developers can conveniently integrate
into their program. On Android, such a library is typically
included in a package. A library encapsulates the functionalities
it serves with a set of well-deﬁned Application Programming
Interfaces (APIs), through which one can easily acquire the
service. With such convenience, a vast majority of apps today
are built upon different libraries. Examples of popular libraries
include unity3d, crashlytics and inMobi for Android and ﬂurry,
openfeint and bugsnag for iOS. Also libraries are utilized by
advertisers to deliver advertisements (ad) from their servers to
the mobile users and collect the users’ information useful to
targeted advertising.
Although some libraries are maintained by their developers
on their ofﬁcial websites, many others are scattered across a
variety of sources like public code repositories (e.g., GitHub),
online forums, etc. Even for those well maintained, typically
only their most recent versions are available, which those
obsolete ones are most likely still in use within different apps.
As a result, a comprehensive analysis of active mobile libraries,
those still used by popular apps, is nontrivial. In our study, we
recovered such libraries from Android and iOS apps through
clustering their components using a similar code comparison
technique (Section III-B).
Once a potentially harmful or contaminated library is
published through online repositories or forums, it can reach
a large number of app developers, who by using the PhaLib,
unwittingly include harmful code in their programs. The
most prominent event related to this threat is the recent
XCodeGhost attack, in which XCode, the Apple’s programming
environment, was repackaged with potentially harmful code
and uploaded to online repositories, and all the apps built
with the contaminated XCode, including some leading apps
like WeChat, were all found to contain potentially harmful
libraries [4]. Note that the propagation of potentially harmful
code in the attack does not go through shared libraries directly:
instead the infection is passed on to apps by the compromised
programming environment. In our research, however, new
evidence is provided that the library repackaging attack is
indeed present on both Android and iOS.
Mobile PHA detection. Just like traditional desktop systems,
Android is also known to be plagued by PHAs. It is reported
that potentially harmful apps exist on the Android ofﬁcial
market [7] and are rather pervasive on third-party markets [2].
Also prior research shows that such PHAs are mainly introduced
through repackaging legitimate apps (e.g., AngryBird), which
enables the PHA to free-ride the legitimate app’s popularity
to reach a large audience. What has been less clear are other
avenues the PHA authors can exploit to spread potentially
harmful code, particulary repackaging shared libraries, which
was studied in our research. Different from Android, iOS is
less susceptible to PHA infection, thanks to its more restrictive
security control and app vetting process. However, the recent
XCodeGhost attack shows that contaminated shared resources
could be a realistic threat to iOS security.
Major Anti-Virus (AV) companies are moving towards the
mobile market, providing new services to detect mobile PHAs.
Particularly, the public AV platform VirusTotal has integrated
54 AV scanners, including the products of all leading AV
companies such as Symantec, McAFee, Kaspersky, etc., which
all work on Android apps. Those scanners typically inspect
the disassembled code of an app, looking for the signatures of
known harmful behavior. Also app markets can deploy their
own PHA detection mechanisms, such as Google’s Bouncer [8].
However, similar AV services do not exist on iOS. Apple is
known to be less supportive to third-party AV products [9], [10].
Technically, PHA detection on the Apple platform is hard due
to the encryption protection on apps: an app downloaded from
the Apple Store is encrypted with keys and analyzing its code
needs to ﬁrst decrypt the app, which cannot be done without the
right key. The problem is that such a key cannot be accessed
by the user without jail-breaking her device. Therefore, in the
absence of the help from Apple, it becomes very difﬁcult for
an ordinary user to decrypt the app she installs for an AV
scan. In our study, we manually checked more than ten popular
online AV services and found that none of them provides a
comprehensive PHA detection service for iOS. For example,
VirusTotal, the most famous AV platform, only reports the
metadata of an iOS app such as conﬁguration information [11].
The only PHA we found it is capable of detecting is “Find and
Call”, which is known to the public in 2012 [12]. Neither can
other services such as VirSCAN [13] capture harmful iOS code.
Such a lack of public AV services is also caused by the belief
that iOS PHAs are rare: there were just 4 iOS targeted attacks
in 2014, compared to 1268 known families of Android PHA
this year [14]. Our research, however, reveals that actually a
large number of apps on the Apple markets are involved in
the activities considered to be potentially harmful when they
are performed by Android apps (Section IV).
Code-similarity comparison. To recover the libraries already
integrated into an app’s code, we have to compare code
components (in terms of methods) across a large number of
apps (over a million for Android). Such comparison needs
to be scalable, accurate and also capable of tolerating some
differences between the components, which widely exist due to
359359
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
Android
Apps
Detecting 
PhaLibs
DEX.
constructor
Lib
combiner
LibFinder
Group 
packages
Cluster 
groups
Android 
libs
iOS
Apps
.DEX
Pha?
VirusTotal
.DEX
Pha?
Android 
PhaLibs
Cross-platform
mapping
anchors
Find lib 
members
Mapped
libs
Map 
classes
Suspicious behavior 
correlation
Behavior
Finder
IAC
pairs
Remove 
IAC
iOS
PhaLibs
Fig. 1: Overview of our approach.
the variations of the same library (different ofﬁcial, customized