144895
68107
ChachaPoly
SHA-256
SHA-512
Poly1305
Curve25519
64by
353297.74k
486701.81k
318616.27k
526845.47k
143626.18k
262761.53k
399483.59k
54075.54k
49251.87k
78481.92k
65673.72k
68173.85k
82447.35k
125367.98k
134963.35k
125854.18k
256by
377317.29k
728594.24k
342565.63k
1165745.92k
238075.98k
285738.89k
848875.62k
106500.44k
104402.28k
201910.03k
127720.99k
135549.35k
194595.05k
382090.15k
421210.62k
433647.19k
1024by
380701.70k
860998.38k
346045.80k
2382449.36k
277331.74k
304376.49k
1518847.66k
141369.19k
144965.29k
310514.47k
201159.46k
213524.48k
368933.21k
817432.47k
928101.54k
1383256.87k
8192by
386591.17k
910695.60k
371442.81k
2452002.59k
292995.07k
300509.41k
1632862.87k
158401.50k
161028.97k
375845.67k
234087.09k
263108.41k
519731.71k
1204432.92k
1355694.08k
3630256.03k
16384by
385418.53
924024.72
370262.02
2470173.90
302145.07
290193.41
1638246.57
153695.16
166327.74
389046.03
236592.63
264705.37
546442.02
1246641.57
1418755.77
4032672.28
Table 8: OpenSSL speed comparison for our algorithms. Each algorithm is run repeatedly for three seconds on different input
sizes, and we measure the number of bytes per second via the openssl speed command. The experiment is performed on an
Intel Core i7 @ 2.2Ghz running OSX 10.12.4. For Curve25519, we measure the number of ECDH computations per second.
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
s
/
s
e
t
y
b
f
o
s
0
0
0
1
2 · 106
1 · 106
0
16
64
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
s
/
s
e
t
y
b
f
o
s
0
0
0
1
1.5 · 106
1 · 106
5 · 105
0
8192
16384
16
64
1024
256
input bytes
HACL∗ HACL∗-vec OpenSSL OpenSSL ASM
1024
256
input bytes
8192
16384
HACL∗ OpenSSL OpenSSL ASM
Figure 10: OpenSSL speed comparison for the Chacha20 al-
gorithm. The algorithm is run repeatedly for three seconds
on different input sizes, and we measure the number of op-
erations via the openssl speed command. The experiment is
performed on an Intel Core i7 @ 2.2Ghz running OSX 10.12.4.
Figure 11: OpenSSL speed comparison for the AEAD algo-
rithm. The algorithm is run repeatedly for three seconds on
different input sizes, and we measure the number of opera-
tions via the openssl speed command. The experiment is per-
formed on an Intel Core i7 @ 2.2Ghz running OSX 10.12.4.
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
s
/
s
e
t
y
b
f
o
s
0
0
0
1
4 · 105
3 · 105
2 · 105
1 · 105
0
16
64
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
s
/
s
e
t
y
b
f
o
s
0
0
0
1
4 · 106
3 · 106
2 · 106
1 · 106
0
16
64
6 · 105
4 · 105
2 · 105
0
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
s
/
s
e
t
y
b
f
o
s
0
0
0
1
8192
16384
16
64
)
r
e
t
t
e
b
s
i
r
e
h
g
i
h
(
s
/
s
p
o
1.5 · 105
1 · 105
50000
0
8192
16384
1024
256
input bytes
HACL∗ OpenSSL OpenSSL ASM
1024
256
input bytes
8192
16384
HACL∗ OpenSSL OpenSSL ASM
Figure 12: OpenSSL speed comparison for the SHA2-256 al-
gorithm. The algorithm is run repeatedly for three seconds
on different input sizes, and we measure the number of op-
erations via the openssl speed command. The experiment is
performed on an Intel Core i7 @ 2.2Ghz running OSX 10.12.4.
Figure 13: OpenSSL speed comparison for the SHA2-512 al-
gorithm. The algorithm is run repeatedly for three seconds
on different input sizes, and we measure the number of op-
erations via the openssl speed command. The experiment is
performed on an Intel Core i7 @ 2.2Ghz running OSX 10.12.4.
1024
256
input bytes
HACL∗ OpenSSL OpenSSL ASM
10s
input bytes
HACL∗ OpenSSL
Figure 14: OpenSSL speed comparison for the Poly1305 al-
gorithm. The algorithm is run repeatedly for three seconds
on different input sizes, and we measure the number of op-
erations via the openssl speed command. The experiment is
performed on an Intel Core i7 @ 2.2Ghz running OSX 10.12.4.
Figure 15: OpenSSL speed comparison for the X25519 algo-
rithm. The algorithm is run repeatedly for ten seconds, and
we measure the number of operations via the openssl speed
command. The experiment is performed on an Intel Core i7
@ 2.2Ghz running OSX 10.12.4.