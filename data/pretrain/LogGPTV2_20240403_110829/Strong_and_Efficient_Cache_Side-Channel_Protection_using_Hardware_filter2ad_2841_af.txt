Systems (CHES) (2016).
[6] BHATTACHARYA, S., REBEIRO, C., AND MUKHOPADHYAY, D.
Hardware prefetchers leak : A revisit of SVF for cache-timing
attacks. In IEEE/ACM International Symposium on Microarchi-
tecture (MICRO) (2012).
[7] BRASSER, F., M ¨ULLER, U., DMITRIENKO, A., KOSTIAINEN,
K., CAPKUN, S., AND SADEGHI, A.-R. Software Grand Expo-
sure: SGX cache attacks are practical. arXiv:1702.07521 (2017).
[8] CHEN, S., ZHANG, X., REITER, M. K., AND ZHANG, Y. De-
tecting privileged side-channel attacks in shielded execution with
In ACM Symposium on Information, Computer and
D´ej`a Vu.
Communications Security (ASIACCS) (2017).
[9] CHIAPPETTA, M., SAVAS, E., AND YILMAZ, C.
Real
time detection of cache-based side-channel attacks using hard-
ware performance counters. Cryptology ePrint Archive, Report
2015/1034, 2015.
[10] COSTAN, V., AND DEVADAS, S. Intel SGX explained. Cryptol-
ogy ePrint Archive, Report 2016/086.
[11] COSTAN, V., LEBEDEV, I., AND DEVADAS, S.
Minimal hardware extensions for strong software isolation.
USENIX Security Symposium (2016).
Sanctum:
In
[12] DOMNITSER, L., JALEEL, A., LOEW, J., ABU-GHAZALEH,
N., AND PONOMAREV, D. Non-monopolizable caches: Low-
complexity mitigation of cache side channel attacks. ACM Trans-
actions on Architecture and Code Optimization (TACO) (2011).
[13] DOYCHEV, G., K ¨OPF, B., MAUBORGNE, L., AND REINEKE, J.
CacheAudit: a tool for the static analysis of cache side channels.
ACM Transactions on Information and System Security (TISSEC)
(2015).
[14] EVTYUSHKIN, D., AND PONOMAREV, D. Covert channels
through random number generator: Mechanisms, capacity esti-
mation and mitigations. In ACM Conference on Computer and
Communications Security (CCS) (2016).
[15] EVTYUSHKIN, D., PONOMAREV, D., AND ABU-GHAZALEH,
N.
Jump over ASLR: Attacking branch predictors to bypass
ASLR. In IEEE/ACM International Symposium on Microarchi-
tecture (MICRO) (2016).
[16] FERRI, C., BAHAR, R. I., LOGHI, M., AND PONCINO, M.
Energy-optimal synchronization primitives for single-chip multi-
processors. In ACM Great Lakes Symposium on VLSI (2009).
[17] GE, Q., YAROM, Y., COCK, D., AND HEISER, G. A sur-
vey of microarchitectural timing attacks and countermeasures on
contemporary hardware. Journal of Cryptographic Engineering
(2016).
[18] GODFREY, M. M., AND ZULKERNINE, M. Preventing cache-
based side-channel attacks in a cloud environment. IEEE Trans-
actions on Cloud Computing (2014).
[19] GOEL, B., TITOS-GIL, R., NEGI, A., MCKEE, S. A., AND
STENSTROM, P. Performance and energy analysis of the re-
stricted transactional memory implementation on Haswell.
In
International Conference on Parallel Processing (ICPP) (2014).
[20] G ¨OTZFRIED, J., ECKERT, M., SCHINZEL, S., AND M ¨ULLER,
T. Cache attacks on intel sgx. In European Workshop on System
Security (EuroSec) (2017).
[21] GRUSS, D., MAURICE, C., FOGH, A., LIPP, M., AND MAN-
GARD, S. Prefetch side-channel attacks: Bypassing SMAP and
Kernel ASLR. In ACM Conference on Computer and Communi-
cations Security (CCS) (2016).
[22] GRUSS, D., MAURICE, C., AND MANGARD, S. Rowhammer.js:
In Con-
A remote software-induced fault attack in JavaScript.
ference on Detection of Intrusions and Malware & Vulnerability
Assessment (DIMVA) (2016).
[23] GRUSS, D., MAURICE, C., WAGNER, K., AND MANGARD, S.
Flush+Flush: A fast and stealthy cache attack. In Conference on
Detection of Intrusions and Malware & Vulnerability Assessment
(DIMVA) (2016).
[24] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache tem-
plate attacks: Automating attacks on inclusive last-level caches.
In USENIX Security Symposium (2015).
[25] GUAN, L., LIN, J., LUO, B., JING, J., AND WANG, J. Protect-
ing private keys against memory disclosure attacks using hard-
ware transactional memory. In IEEE Symposium on Security and
Privacy (S&P) (2015).
[26] GULLASCH, D., BANGERTER, E., AND KRENN, S. Cache
Games – bringing access-based cache attacks on AES to practice.
In IEEE Symposium on Security and Privacy (S&P) (2011).
[27] HERLIHY, M., ELIOT, J., AND MOSS, B. Transactional mem-
ory: Architectural support for lock-free data structures. In Inter-
national Symposium on Computer Architecture (ISCA) (1993).
[28] HUND, R., WILLEMS, C., AND HOLZ, T. Practical timing side
channel attacks against kernel space ASLR. In IEEE Symposium
on Security and Privacy (S&P) (2013).
[29] INTEL CORP.
Software Development Emulator v. 7.49.
https://software.intel.com/en-us/articles/intel-
software-development-emulator/ (retrieved 19/01/2017).
[30] INTEL CORP. Intel 64 and IA-32 architectures optimization ref-
erence manual, June 2016.
[31] INTEL CORP. Intel 64 and IA-32 Architectures Software Devel-
oper’s Manual, Volume 1: Basic Architecture, September 2016.
[32] INTEL CORP. Intel 64 and IA-32 Architectures Software Devel-
oper’s Manual, Volume 3 (3A, 3B & 3C): System Programming
Guide, September 2016.
[33] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. S$A: A
shared cache attack that works across cores and deﬁes VM sand-
In IEEE Symposium on
boxing – and its application to AES.
Security and Privacy (S&P) (2015).
[34] IRAZOQUI, G., EISENBARTH, T., AND SUNAR, B. Cross pro-
cessor cache attacks. In ACM Symposium on Information, Com-
puter and Communications Security (ASIACCS) (2016).
[35] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B.
Wait a minute! a fast, cross-VM attack on AES. In Symposium
on Recent Advances in Intrusion Detection (RAID) (2014).
[36] JANG, Y., LEE, S., AND KIM, T. Breaking kernel address space
In ACM Conference on
layout randomization with intel TSX.
Computer and Communications Security (CCS) (2016).
USENIX Association
26th USENIX Security Symposium    231
[37] KIM, T., PEINADO, M., AND MAINAR-RUIZ, G. STEALTH-
MEM: System-level protection against cache-based side channel
attacks in the cloud. In USENIX Security Symposium (2012).
[55] PESSL, P., GRUSS, D., MAURICE, C., SCHWARZ, M., AND
MANGARD, S. DRAMA: Exploiting DRAM addressing for
cross-CPU attacks. In USENIX Security Symposium (2016).
[38] KOCHER, P. C. Timing attacks on implementations of Diffe-
In Advances in
Hellman, RSA, DSS, and other systems.
Cryptology—CRYPTO (1996).
[39] KUVAISKII, D., FAQEH, R., BHATOTIA, P., FELBER, P., AND
FETZER, C. HAFT: hardware-assisted fault tolerance. In Euro-
pean Conference on Computer Systems (EuroSys) (2016).
[40] LEE, S., SHIH, M.-W., GERA, P., KIM, T., KIM, H., AND
PEINADO, M. Inferring ﬁne-grained control ﬂow inside SGX en-
claves with branch shadowing. arXiv preprint arXiv:1611.06952
(2016).
[41] LIPP, M., GRUSS, D., SPREITZER, R., MAURICE, C., AND
MANGARD, S. ARMageddon: Cache attacks on mobile devices.
In USENIX Security Symposium (2016).
[42] LIU, F., GE, Q., YAROM, Y., MCKEEN, F., ROZAS, C.,
HEISER, G., AND LEE, R. B. Catalyst: Defeating last-level
In Interna-
cache side channel attacks in cloud computing.
tional Symposium on High Performance Computer Architecture
(HPCA) (2016).
[43] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE, R. B.
Last-level cache side-channel attacks are practical. In IEEE Sym-
posium on Security and Privacy (S&P) (2015).
[44] LIU, Y., XIA, Y., GUAN, H., ZANG, B., AND CHEN, H. Con-
current and consistent virtual machine introspection with hard-
ware transactional memory. In International Symposium on High
Performance Computer Architecture (HPCA) (2014).
[45] MAURICE, C., WEBER, M., SCHWARZ, M., GINER, L.,
GRUSS, D., ALBERTO BOANO, C., MANGARD, S., AND
R ¨OMER, K. Hello from the other side: SSH over robust cache
covert channels in the cloud. In Symposium on Network and Dis-
tributed System Security (NDSS) (2017).
[46] MOGHIMI, A.,
IRAZOQUI, G., AND EISENBARTH, T.
CacheZoom: How SGX ampliﬁes the power of cache attacks.
arXiv:1703.06986 (2017).
[47] M ¨ULLER, T., FREILING, F. C., AND DEWALD, A. TRESOR
runs encryption securely outside RAM. In USENIX Security Sym-
posium (2011).
[48] NAKAIKE, T., ODAIRA, R., GAUDET, M., MICHAEL, M. M.,
AND TOMARI, H. Quantitative comparison of hardware trans-
actional memory for Blue Gene/Q, zEnterprise EC12, Intel Core,
and POWER8. In International Symposium on Computer Archi-
tecture (ISCA) (2015).
[49] OHRIMENKO, O., SCHUSTER, F., FOURNET, C., MEHTA, A.,
NOWOZIN, S., VASWANI, K., AND COSTA, M. Oblivious multi-
party machine learning on trusted processors. In USENIX Secu-
rity Symposium (2016).
[50] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND
KEROMYTIS, A. D. The spy in the sandbox: Practical cache
attacks in JavaScript and their implications. In ACM Conference
on Computer and Communications Security (CCS) (2015).
[51] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache attacks
and countermeasures: the case of AES. In RSA Conference Cryp-
tographer’s Track (CT-RSA) (2006).
[52] PAGE, D. Partitioned cache architecture as a side-channel de-
fence mechanism. Cryptology ePrint Archive, Report 2005/280.
[53] PAYER, M. HexPADS: a platform to detect “stealth” attacks.
In International Symposium on Engineering Secure Software and
Systems (ESSoS) (2016).
[54] PERCIVAL, C. Cache missing for fun and proﬁt. In Proceedings
of BSDCan (2005).
[56] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE,
S. Hey, you, get off of my cloud: Exploring information leakage
in third-party compute clouds. In ACM Conference on Computer
and Communications Security (CCS) (2009).
[57] SCHWARZ, M., GRUSS, D., WEISER, S., MAURICE, C., AND
MANGARD, S. Malware Guard Extension: Using SGX to con-
ceal cache attacks. In Conference on Detection of Intrusions and
Malware & Vulnerability Assessment (DIMVA) (2017).
[58] SHI, J., SONG, X., CHEN, H., AND ZANG, B. Limiting cache-
based side-channel in multi-tenant cloud using dynamic page col-
In IEEE/IFIP International Conference on Dependable
oring.
Systems and Networks Workshops (DSN-W) (2011).
[59] SHIH, M.-W., LEE, S., KIM, T., AND PEINADO, M. T-
SGX: Eradicating controlled-channel attacks against enclave pro-
grams. In Symposium on Network and Distributed System Secu-
rity (NDSS) (2017).
[60] SPREITZER, R., AND PLOS, T. Cache-access pattern attack on
disaligned AES T-Tables. In Constructive Side-Channel Analysis
and Secure Design (COSADE) (2013).
[61] XU, Y., CUI, W., AND PEINADO, M. Controlled-channel at-
tacks: Deterministic side channels for untrusted operating sys-
tems. In IEEE Symposium on Security and Privacy (S&P) (2015).
[62] YAROM, Y., AND FALKNER, K. Flush+Reload: a high resolu-
tion, low noise, L3 cache side-channel attack. In USENIX Secu-
rity Symposium (2014).
[63] YOO, R. M., HUGHES, C. J., LAI, K., AND RAJWAR, R. Per-
formance evaluation of Intel transactional synchronization exten-
sions for high-performance computing. In International Confer-
ence for High Performance Computing, Networking, Storage and
Analysis (SC) (2013).
[64] ZACHAROPOULOS, G. Employing hardware transactional mem-
ory in prefetching for energy efﬁciency. Uppsala Universitet
(report), 2015. http://www.diva-portal.org/smash/get/
diva2:847611/FULLTEXT01.pdf (retrieved 20/02/2017).
[65] ZHANG, T., ZHANG, Y., AND LEE, R. B. CloudRadar: A real-
time side-channel attack detection system in clouds. In Sympo-
sium on Recent Advances in Intrusion Detection (RAID) (2016).
[66] ZHANG, X., XIAO, Y., AND ZHANG, Y. Return-oriented ﬂush-
reload side channels on ARM and their implications for Android
devices. In ACM Conference on Computer and Communications
Security (CCS) (2016).
[67] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART,
In ACM
T. Cross-tenant side-channel attacks in PaaS clouds.
Conference on Computer and Communications Security (CCS)
(2014).
[68] ZHANG, Y., AND REITER, M. D¨uppel: retroﬁtting commodity
operating systems to mitigate cache side channels in the cloud.
In ACM Conference on Computer and Communications Security
(CCS) (2013).
[69] ZHOU, Z., REITER, M. K., AND ZHANG, Y. A software ap-
proach to defeating side channels in last-level caches. In ACM
Conference on Computer and Communications Security (CCS)
(2016).
232    26th USENIX Security Symposium
USENIX Association
Listing 2: Decision tree classiﬁcation before and after
Cloak: the code in black is shared by both versions, the
code before Cloak is in dark gray(lines 1–3), and Cloak-
speciﬁc additions are in blue (lines 5–7, 11, 12, 15).
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
using Nodes = nelem_t*;
using Queries = Matrix;
using LeafIds = uint16_t*;
using Nodes = ReadArray;
using Queries = ReadMatrix;
using LeafIds = WriteArray;
tsx protected l o o k u p _ l e a f i d s (
void
Nodes & nodes , Queries & queries , LeafIds &
leafids ) {
nodes.preload();
queries.preload();
for ( size_t q =0; q < queries . entries () ;
q ++) {
if (!(q % 8)) leafids.preload();
size_t idx = 0 , left , right ;
for (;;) {
auto & node = nodes [ idx ];
left = node . left ;
right = node . r i g h t _ o r _ l e a f i d ;
if ( left == node ) {
leafids [ q ] = right ;
break ;
}
if ( queries . item (q , node . fdim ) <=
node . fthresh )
idx = left ;
else
idx = right ;
}
}
}
A Cloak Code Example
Listing 2 gives an example of the original code for tree
traversal and its Cloak-protected counterpart. In the orig-
inal code, a tree is stored in a Nodes array where each
node contains a feature, fdim, and a threshold, fthres.
Access to a node determines which feature is used to
make a split and its threshold on the value of this feature
indicates whether the traversal continues left or right. For
every record batched in Queries, the code traverses the
tree according to feature values in the record. Once a
leaf is reached its value is written as the output of this
query in LeafIds. The following features of Cloak are
used to protect code and data accesses of the tree traver-
sal. First, it uses Cloak data types to allocate Nodes and
Queries in the read set and LeafIds in the write sets.
This ensures that data is allocated as described in Sec-
tion 5.2.1, oblivious from the programmer. The parame-
ters NCS R and NCS W indicate the number of cache sets to
be used for the read and write sets. Second, the program-
mer indicates to the compiler which function should be
run within a transaction by using tsx protected anno-
tation. The programmer calls preload (lines 11, 12, and
15) on sensitive data structures. The repeated preloading
of the writable array leafids in line 15 refreshes the
write set to prevent premature evictions.
USENIX Association
26th USENIX Security Symposium    233