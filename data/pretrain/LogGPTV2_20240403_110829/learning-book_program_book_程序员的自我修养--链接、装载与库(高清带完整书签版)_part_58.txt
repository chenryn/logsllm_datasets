800
第10章内存
这种差异的是因为不同的Linux内核版本造成的。因为在图9-1里面所看到的共享库的装载
地址为0x40000000，这实际上已经是过时了的，在Linux内核2.6版本里面，共享库的装
载地址已经被挪到了靠近栈的位置，即位于0xbfxxxxxx附近（这一点从前面的章节中察看
/proc/xxx/maps也可以验证），所以从0xbfxxxxxx到进程用brk(设置的边界末尾简直是一马
平川，中间没有任何空间占用的情况（如果使用静态链接来产生可执行文件，这样就更没有
共享库的干扰了）。所以从理论可以推论，2.6版的Linux的malloc 的最大空间申请数应该
在2.9GB左右（其中可执行文件占去一部分、0x080 400000之前的地址占去一部分、栈占
去一部分、共享库占去一部分）。
还有其他诸多因素会影响malloc的最大空间人小，比如系统的资源限制（ulimit）、物
理内存和交换空间的总和等。我曾经在一台只有512MB内存和1.5GB交换空间的机器上测
试malloc的最大空间申请数，无论怎样结果都不会超过1.9GB左右，让我十分困惑。后来
发现原来是内存+交换空间的大小太小，导致mmap中请空间失败。因为mmap申请匿名空
间时，系统会为它在内存或交换空间中预留地址，但是申请的空间大小不能超出空闲内存+
空闲交换空间的总和。
10.3.3Windows进程堆管理
下 Windows 系统中进程的地址空间的分布。一个普通的 Windows 进程的地址空间分布可以
加图10-14所示。
可以看到，Windows的进程将地址空间分配给了各种EXE、DLL文件、堆、栈。其中
EXE文件一般位于0x00 400000起始的地址：而一部分DLL位于0x10000000起始的地址，
如运行库DLL：还有一部分DLL位于接近0x80000 000的位置，如系统DLL，NTDLL.DLL、
Kemel32.DLL.
栈的位置则在0x00030000和EXE文件后面都有分布，可能有读者奇怪为什么Windows
需要这么多栈呢？我们知道，每个线程的栈都是独立的，所以一个进程中有多少个线程，就
应该有多少个对应的栈，对于Windows来说，每个线程默认的栈大小是IMB，在线程启动
时，系统会为它在进程地址空间中分配相应的空间作为栈，线程栈的大小可以由创建线程时
CreateThread的参数指定。
在分配完上面这些地址以后，Windows的进程地址空间已经是支离破碎了。当程序向系
统中请堆空间时，只好从这些剩下的还没有被占用的地址上分配。Windows系统提供了一个
API 叫做VirtualAloc()，用来向系统申请空间，它与 Linux 下的 mmap 非常相似。实际上
VirtualAllocO申请的空间不一定只用于堆，它仅仅是向系统预留了一块虚拟地址，应用程序
可以按照需要随意使用。
程序员的自我修养一链接、装载与库
---
## Page 332
10.3堆与内存管理
309
Operating
System
x80000000
NIdE.dI
e32.d
0x7C900000
Ox7C800000
heap5
Other dls
MSVCR90D.dI
0x10000000
heap4
Prograr
heap3'
00000+00x0
0x0030000
sorttbis.nls
ctype.nis
sortkey.nls
locaLnls
heap2
0x00270000
0x00260000
heap0
00009200x0
0000910000
stackD
0x00030000
WindowsProcess
Virtual Space
图10-14Window进程地址空间分布
在使用VirtualAllocO函数申请空间时，系统要求空间大小必须为页的整数倍，即对于
x86系统来说，必须是4096字节的整数倍，很明显，这就是操作系统的“批发”内存的接
口函数了，4096字节起批，面且只能是4096字节的整数倍，多了少了都不行。那么应用程
序作为最终的“消费者”，如果它直接向操作系统中请内存的话，难免会造成大量的浪费，
比如程序只需要4097个字节的空间，它也必须申请8192字节。
程序员的自我修养——链接、装载与库
---
## Page 333
310
第10章内存
当然，在Windows下我们也可以自已实现一个分配的算法，首先通过VirtualAlloc向操
作系统一次性批发大量空间，比如10MB，然后再根据需要分配给程序。不过这么常用的分
配算法已经被各种系统、库实现了无数遍，一般情况下我们没有必要再重复发明轮子，自己
再实现一个，用现成的就可以了，在Windows 中，这个算法的实现位于堆管理器（Heap
Manager）.堆管理器提供了一套与堆相关的API可以用来创建、分配、释放和销毁堆空间：
·
HeapCreate：创建一个堆。
·HeapAlloc：在一个堆里分配内存。
·HeapFree：释放已经分配的内存。
·HeapDestroy：推毁一个堆。
这四个API的作用很明显，HeapCreate就是创建一个堆空间，它会向操作系统批发一
块内存空间（它也是通过VintualAlloc(实现的），而HeapAlloc 就是在堆空间里面分配一块
小的空间并返回给用户，如果堆空间不足的话，它还会通过VirtualAlloc向操作系统批发更
多的内存直到操作系统也没有空间可以分配为止。HeapFree 和HeapDestroy的作用就更不言
而喻了。
Windows堆管理器的位置
上面四个函数 HeapCreate、HeapAlloc、HeapFree 和 HeapDestroy 其实就是堆管理
器的核心接口，堆管理器实际上存在于Windows的两个位置。一份是位于NTDLL.DLL
中，这个 DLL是Windows 操作系统用户层的最底层DLL，它负责Windows子系统
DLL与Windows 内核之间的接口（我们在后面还会介绍Windows 子系统），所有用
户程序、运行时库和子系统的堆分配都是使用这部分的代码：而在Windows内核
Ntoskml.exe中，还存在一份类似的堆管理器，它负费Windows内核中的堆空间分配
（内核堆和用户的堆不是同一个），Windows 内核、内核组件、驱动程序使用堆时用
到的都是这份堆分配代码，内核堆管理器的接口都由RtHeap开头。
一直存在。款认堆的大小为1MB，不过我们可以通过链接器的/HEAP参数指定可执行文件
的默认维大小，这样系统在创建进程时就会按照可执行文件所指定的大小创建默认堆。当然
IMB的堆空间对很多程序来说是不够用的，如果用户中请的空间超过1MB，堆管理器就会
扩展堆的大小，它会通过VirtualAlloc向系统中请更多的空间。
通过前面介绍的Windows进程地址空间分布我们知道，一个进程中能够分配给堆用的
空间不是连续的。所以当一个堆的空间已经无法再扩展时，我们必须创建一个新的堆。但是
这一切都不需要用户操作，因为运行库的malloc函数已经解决了这一切，它实际上是对
Heapxxxx系列函数的包装，当一个堆空间不够时，它会在进程中创建额外的堆。
程序员的自我修养一链接、装载与库
---
## Page 334
10.3堆与内存管理
311
所以进程中可能存在多个堆，但是一个进程中一次性能够分配的最大的堆空间取决于最
大的那个堆。从上面的图中我们可以看到，Heap5应该是最大的一个维，它的大小大约是
1.5GB～1.7GB，这取决于进程所加载的DLL数量和大小。我们在前面的章节中说过的
Windows下能够通过malloc申请的最大的一块堆空间大约是1.5GB就很好解释了。
Q：我可以重复释放两次堆里的间一片内存吗？
A：不能。儿乎所有的堆实现里，都会在重复释放同一片堆里的内存时产生错误。glibc甚
亚能检测出这样的错误，并给出确切的错误信息。
Q：我在有些书里看到说堆总是向上增长，是这祥的吗？
A：不是，有些较老的书籍针对当时的系统曾微出过这样的断言，这在当时可能是正确的。
因为当时的系统多是类unix系统，它们使用类似于brk的方法来分配堆空间，而brk的
增长方向是向上的。但随着Windows的出现，这个规律被打破了。在Windows里，大
部分堆使用HeapCreate产生，而HcapCreate系列函数却完全不遵照向上增长这个规律。
Q：调用malloc会不会最后调用到系统调用或者API?
A：这个取决于当前进程向操作系统批发的那些空间还够不够用，如果够用了，郡么它可
以直接在仓库里取出来卖给用户；如果不够用了，它就只能通过系统调用或者API向
操作系统再进一批货了。
Q:malloc 申请的内存，进程结束以后还会不会存在？
A：这是一个很需见的问题，答案是很明确的：不会存在。因为当进程结束以后，所有与
进程相关的资源，包括进程的地址空间、物理内存、打开的文件、网络链接等都被操
作系统关闭或者放回，所以无论malloc申请了多少内存，进程结束以后都不存在了。
Q:malloc 申请的空间是不是连续的？
A：在分析这个问题之前，我们首先要分清楚“空间”这个词所指的意思。如果“空间”
是指虚拟空间的话，那么答案是连续的，即每一次malloc分配后返回的空间都可以看
微是一块连续的地址；如果空间是指“物理空间”的话，则答戴是不一定连续，因为
一块连续的虚拟地址空间有可能是若干个不连续的物理页拼凌而成的。
10.3.4堆分配算法
我们在前面的章节中已经详细介绍了堆在进程中的地址空间是如何分布的，对于程序来
说，堆空间只是程序向操作系统申请划出来的一大块地址空间，而程序在通过malloc申请
程序员的自我修养一链接、装载与库
---
## Page 335
312
第10章内存
内存空间时的大小却是不一定的，从数个字节到数个GB都是有可能的。于是我们必须将堆
空间管理起来，将它分块地按照用户需求出售给最终的程序，并且还可以按照一定的方式收
回内存。其实这个问题可以归结为：如何管理一大块连续的内存空间，能够按照需求分配、
释放其中的空间，这就是堆分配的算法。堆的分配算法有很多种，有很简单的（比如这里要
介绍的儿种方法），也有些很复杂、适用于某些高性能或者有其他特殊要求的场合。
1.空闲链表
空闲链表（FreeList）的方法实际上就是把堆中各个空闲的块按照链表的方式连接起来，
当用户请求一块空间时，可以遍历整个列表，直到找到合适大小的块并且将它拆分：当用户
释放空间时将它合并到空闲链表中。
我们首先需要一个数据结构来登记堆空间里所有的空闲空间，这样才能知道程序请求空间
的时候该分配给它哪一块内存。这样的结构有很多种，这里介绍最简单的一种一空闲链表。
空闲链表是这样一种结构，在堆里的每一个空闲空间的开头（或结尾）有一个头
（header），头结构里记录了上一个（prev）和下一个（next）空闲块的地址，也就是说，所
有的空闲块形成了一个链表。如图10-15所示。
Free(3)
10
Nxeu
NULL
m
Heap
Free(2)
nexf
olovo
Free(1)
NULC]
图10-15空闲链表分配
在这样的结构下如何分配空间呢？
首先在空闲链表里查找足够容纳请求大小的一个空闲块，然后将这个块分为两部分，一
程序员的自我修养一链接、装载与库
---
## Page 336
10.3堆与内存管理
313
部分为程序请求的空间，另一部分为剩余下来的空闲空间。下面将链表里对应原来空闲块的
结构更新为新的剩下的空闲块，如果剩下的空闲块大小为0，则直接将这个结构从链表里删
除。图10-16演示了用户请求一块和空闲块2恰好相等的内存空间后堆的状态。
Free(3)
leade
x
NULL
Heap
Free(1)
Hedrre
nex
V
NULL
图10-16空闲链表分配（2）
这样的空闲键表实现尽管简单，但在释放空间的时候，给定一个已分配块的指针，堆无
法确定这个块的大小，一个简单的解决方法是当用户请求k个字节空间的时候，我们实际分
配k+4个字节，这4个字节用于存储该分配的大小，即k+4。这样释放该内存的时候只要看
看这4个字节的值，就能知道该内存块的大小，然后将其插入到空闲链表里就可以了。
当然这仅仅是最简单的一种分配策略，这样的思路存在很多问题。例如，一旦链表被破
坏，或者记录长度的那4字节被破坏，整个堆就无法正常工作，面这些数据恰恰很容易被越
界读写所接触到。
2.位图
针对空闲链表的弊端，另-种分配方式显得更加稳键。这种方式称为位图（Bitmap），其
核心思想是将整个堆划分为大量的块（block），每个块的大小相同。当用户请求内存的时候，
总是分配整数个块的空间给用户，第一个块我们称为已分配区域的头（Head），其余的称为已
分配区域的主体（Body）。面我们可以使用一个整数数组来记录块的使用情况，由于每个块只
有头/主体/空闲三种状态，因此仅仅需要两位即可表示一个块，因此称为位图。
程序员的自我修养一链接、装载与库
---
## Page 337
314
第10章内存
O8A
假设堆的大小为IMB，部么我们让一个块大小为128字节，邢么总共就有1M/128=8k
个块，可以用8k/(32/2）=512个int来存储。这有512个int的数组就是一个位图，其中每两
位代表一个块。当用户请求300字节的内存时，堆分配给用户3个块，并将位图的相应位置
标记为头或躯体。
图10-17为一个这样的堆的实例。
H
+1
目
H
图10-17位图分配方式
这个堆分配了3片内存，分别有2/4/1个块，用虚线框标出。其对应的位图将是：
II 0T 00 00 00 00 00 00 00TT 0T 0T 0T 00 00 1T[HDIH)
(LOW)
其中11表示H（Head），10表示主体（Body），00表示空闲（Free）。
这样的实现方式有几个优点：
·速度快：由于整个堆的空闲信息存储在一个数组内，因此访问该数组时cache容易命中。
·稳定性好：为了避免用户越界读写破坏数据，我们只须简单地备份一下位图即可。而
且即使部分数据被破坏，也不会导致整个堆无法工作。
·块不需要额外信息，易于管理。
当然缺点也是显而易见的：
·分配内存的时候容易产生碎片。例如分配300字节时，实际分配了3个块即384个字
节，浪费了84个字节。
·如果堆很大，或者设定的一个块很小（这样可以减少碎片），那么位图将会很大，可能
失去cache命中率高的优势，而且也会浪费一定的空间。针对这种情况，我们可以使用
多级的位图。