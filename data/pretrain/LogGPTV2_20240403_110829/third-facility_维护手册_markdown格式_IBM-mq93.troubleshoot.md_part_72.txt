logger that cannot be stopped.
About this task
To collect a trace from a Managed File Transfer for z/OS logger using the fteSetLoggerTraceLevel
command, complete the following steps.
Procedure
1.Turn trace on for the logger, by running the following command:
fteSetLoggerTraceLevel -traceLogger classes=level logger_name
IBM MQ troubleshooting and support 461
The -traceLogger parameter determines the internal classes and packages that are to be traced.
Unless otherwise specified by your IBM Support representative, set this property to the value
com.ibm.wmqfte=all.
2.Reproduce the issue.
3.Turn trace off for the logger, by running the following command:
fteSetLoggerTraceLevel -traceLogger =off logger_name
4.If a logger is busy, then the trace files might wrap quickly and overwrite the information needed to
investigate the issue.
If you can stop the logger for a short period of time, complete the following steps to reduce the
amount of trace data that is collected. Otherwise, contact IBM Support and discuss alternative trace
specifications to reduce the amount of trace data that is collected.
a)Schedule some time to stop the logger.
b)Locate the logger.properties file for the logger that needs to be traced.
The logger.properties file can be found in the BFG_DATA/mqft/config/
coordination_qmgr_name/loggers/logger_name directory.
c)Edit the file and add entries for the following properties:
traceFiles=number_of_trace_files_to_use
traceSize=size_of_each_trace_file_in_MB
The traceFiles and traceSize properties are used to control the amount of trace data that is
collected.
The default value of the traceFiles property is 5, and the traceSize property has the default
value of 20MB. This means that if you turn on trace dynamically, and you have not set the
properties, the agent writes trace information to 5 wrapping trace files, each with a maximum
size of 20MB.
You should set these properties to large values, to collect as much trace data as possible.
For example, to collect 1GB of wrapping trace, add the following lines to the logger.properties
file:
traceFiles=5
traceSize=200
This results in the logger writing trace data to a maximum of 5 files, where each file has a size of
200MB.
For more information on these logger properties, see The MFT logger.properties file.
d)Stop the logger, by running the fteStopLogger command.
e)Start the logger, by running the fteStartLogger command.
f)Turn trace on for the logger, by running the following command:
fteSetLoggerTraceLevel -traceLogger trace_specification logger_name
g)Reproduce the issue.
h)Turn trace off for the logger, by running the following command:
fteSetLoggerTraceLevel -traceLogger =off logger_name
Results
The resultant trace files are written to the BFG_DATA/mqft/logs/coordination_qmgr_name/
loggers/logger_name/logs/trace%PID% directory, where %PID% is the process identifier for the
logger.
462 Troubleshooting and Support for IBM MQ
Collecting a standalone database logger trace dynamically using JCL
You can use the BFGLGTC member within the dataset containing the JCL, for the logger that needs to be
traced, to collect trace from a running Managed File Transfer for z/OS logger. This can be very useful if
IBM Support need to see a trace from a logger that cannot be stopped.
About this task
To collect a trace from a logger using the BFGLGTC member, complete the following steps.
Procedure
1.Locate the dataset containing the JCL for the logger that needs to be traced.
2.Edit the BFGLGTC member within the dataset, and locate the line that contains the text:
-traceLogger
The text following this contains the list of internal classes and packages that are to be traced. By
default, this list is set to:
com.ibm.wmqfte=all
Unless otherwise specified by your IBM Support representative, leave this value as is.
3.Submit the BFGLGTC member.
4.Reproduce the issue.
5.Edit the BFGLGTC member again, and set the -traceLogger parameter to =off, as shown:
-traceLogger =off +
6.Submit the BFGLGTC member again, to turn trace off.
7.If a logger is busy, then the trace files might wrap quickly and overwrite the information needed to
investigate the issue.
If you can stop the logger for a short period of time, complete the following steps to reduce the
amount of trace data that is collected. Otherwise, contact IBM Support and discuss alternative trace
specifications to reduce the amount of trace data that is collected.
a)Schedule some time to stop the logger.
b)Locate the logger.properties file for the logger that needs to be traced.
The logger.properties file can be found in the BFG_DATA/mqft/config/
coordination_qmgr_name/loggers/logger_name directory.
c)Edit the file and add entries for the following properties:
traceFiles=number_of_trace_files_to_use
traceSize=size_of_each_trace_file_in_MB
The traceFiles and traceSize properties are used to control the amount of trace data that is
collected.
The default value of the traceFiles property is 5, and the traceSize property has the default
value of 20MB. This means that if you turn on trace dynamically, and you have not set the
properties, the agent writes trace information to 5 wrapping trace files, each with a maximum
size of 20MB.
You should set these properties to large values, to collect as much trace data as possible.
IBM MQ troubleshooting and support 463
For example, to collect 1GB of wrapping trace, add the following lines to the logger.properties
file:
traceFiles=5
traceSize=200
This results in the logger writing trace data to a maximum of 5 files, where each file has a size of
200MB.
For more information on these logger properties, see The MFT logger.properties file.
d)Locate the data set containing the JCL for the logger that needs to be traced.
e)Submit the BFGLGSP member within the data set to stop the logger.
f)Restart the logger, by submitting the BFGLGST member in the data set.
g)Edit the BFGLGTC member within the data set, and locate the line that contains the following text:
-traceLogger
The text following this contains the list of internal classes and packages that are to be traced. By
default, this list is set to:
com.ibm.wmqfte=all
Unless otherwise specified by your IBM Support representative, leave this value as is.
h)When it is time to enable trace, submit the BFGLGTC member.
i)Reproduce the issue.
j)Edit the BFGLGTC member again, and set the -traceLogger parameter to =off by running the
following command:
-traceLogger =off +
k)Submit the BFGLGTC member again, to turn trace off.
Results
The trace files are written to the BFG_DATA/mqft/logs/coordination_qmgr_name/loggers/
logger_name/logs/trace%PID% directory, where %PID% is the process identifier for the logger.
Tracing the REST API
The trace facilities in the REST API are provided to help IBM staff to diagnose customer problems. Various
properties control the behavior of these facilities.
Before you begin
Include the following files and directories when you gather diagnostic information for IBM Service:
• The mqweb.xml file.
• The contents of the directory that contains the mqweb server definition:
– MQ_DATA_PATH/web/installations/installationName
– The directory that was specified when the crtmqweb script ran to create the mqweb
server definition. By default, this directory is /var/mqm/web/installation1.
About this task
The REST API consists of two functional areas, each with their own trace mechanisms:
• Enabling trace for the REST API code that runs in the mqweb server
464 Troubleshooting and Support for IBM MQ
• Enabling messaging trace for the REST API code that runs in the mqweb server.
For information about enabling trace for the IBM MQ Console, see “Tracing the IBM MQ Console” on page
416
Procedure
1.Enabling trace for the REST API code that runs in the mqweb server
a)Enter the following command on the command line:
setmqweb properties -k traceSpec -v
"*=info:com.ibm.mq*=all:com.ibm.mq.rest*=all:js.mq*=all"
If the mqweb server is running, trace is immediately enabled.
Trace is output to a set of files. The directory where the trace files are created is:
• MQ_DATA_PATH/web/installations/installationName/servers/mqweb/log
• The subdirectory /servers/mqweb/log beneath the directory that was specified
when the crtmqweb script ran to create the mqweb server definition. By default, this directory
is /var/mqm/web/installation1.
The active file is called trace.log. Historical trace is kept in files that are called
trace_timestamp.log. The size of these trace files, and the number of historical files that are kept
can be configured by setting the maxTraceFileSize and maxTraceFiles variables. By default, the
maximum trace file size is 20 MB, and the maximum number of trace files is 2. For more information,
see Configuring logging.
2.Enabling messaging trace for the REST API code that runs in the mqweb server
a)Create a file called jmstrace.config in one of the following directories:
MQ_DATA_PATH/web/installations/installationName/servers/mqweb
WLP_user_directory/servers/mqweb
Where WLP_user_directory is the directory that was specified when the crtmqweb script ran to
create the mqweb server definition.
b)Add the following lines to the jmstrace.config file:
com.ibm.msg.client.commonservices.trace.outputName=PATH/logs/jmstrace.txt
com.ibm.msg.client.commonservices.trace.limit=104857600
com.ibm.msg.client.commonservices.trace.count=10
com.ibm.msg.client.commonservices.trace.status=ON
Where PATH specifies the full path to the directory where you want the jmstrace.txt file to be
written.
These lines set the maximum trace file size to 100 MB, and set the maximum number of trace files
to 10. Ensure that you have disk space available for these files.
c)In the same directory as the jmstrace.config file, open or create the jvm.options file.
d)Add the following lines to the jvm.options file:
-Dcom.ibm.msg.client.commonservices.trace.startup=TRUE
-Dcom.ibm.msg.client.config.location=CONFIG_PATH/jmstrace.config
Where CONFIG_PATH specifies the full path to the directory where the jmstrace.config
file is located, as a URL. For example, file:c:/ProgramData/IBM/MQ/web/installations/
Installation2/servers/mqweb/.
e)Restart the mqweb server by using the following commands on the command line:
IBM MQ troubleshooting and support 465
endmqweb
strmqweb
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
information described in this section, IBM Support might request further information on a case by case
basis.
Tracing TLS: runmqakm, strmqikm, and runmqckm functions
How to trace Transport Layer Security (TLS), and request runmqakm tracing and strmqikm (iKeyman) and
runmqckm (iKeycmd) tracing.
strmqikm and runmqckm trace
To request strmqikm tracing, run the strmqikm command for your platform with the following -D flags.
On AIX, Linux, and Windows:
strmqikm -Dkeyman.debug=true -Dkeyman.jnitracing=ON
To request runmqckm tracing, run the runmqckm command for your platform with the following -D flags.
On AIX, Linux, and Windows:
runmqckm -Dkeyman.debug=true -Dkeyman.jnitracing=ON
strmqikm and runmqckm write three trace files to the directory from which you start them, so
consider starting iKeyman or runmqckm from the trace directory to which the runtime TLS trace
is written: /var/mqm/trace on AIX and Linux systems and MQ_INSTALLATION_PATH/trace on
Windows. MQ_INSTALLATION_PATH represents the high-level directory in which IBM MQ is installed.
The trace file generated by strmqikm and runmqckm has the following format:
debugTrace. n
where n is an incrementing number starting at 0.
runmqakm trace
To request runmqakm tracing, run the runmqakm command with the following flags:
runmqakm -trace filename
where filename is the name of the trace file to create. You cannot format the runmqakm trace file. Send it
unchanged to IBM support. The runmqakm trace file is a binary file and, if it is transferred to IBM support
via FTP, it must be transferred in binary transfer mode.
Runtime TLS trace
On AIX, Linux, and Windows systems, you can independently request trace information for strmqikm,
runmqckm, the runtime TLS functions, or a combination of these.
The runtime TLS trace files have the names AMQ.TLS.TRC and AMQ.TLS.TRC.1 and the TLS trace files have
the names AMQ.SSL.TRC and AMQ.SSL.TRC.1. You cannot format any of the TLS trace files; send them
unchanged to IBM support. The TLS trace files are binary files and, if they are transferred to IBM support
via FTP, they must be transferred in binary transfer mode.
466 Troubleshooting and Support for IBM MQ
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
information described in this section, IBM Support might request further information on a case by case
basis.
Tracing the WCF custom channel for IBM MQ
You can use IBM MQ trace to collect detailed information about what various parts of the IBM MQ code
is doing. When using Windows Communication Foundation (WCF), a separate trace output is generated
for the Microsoft Windows Communication Foundation (WCF) custom channel trace integrated with the
Microsoft WCF infrastructure trace.
About this task
Fully enabling trace for the WCF custom channel produces two output files:
1.The WCF custom channel trace integrated with the Microsoft WCF infrastructure trace.
2.The WCF custom channel trace integrated with XMS .NET.
By having two trace outputs, problems can be tracked at each interface using the appropriate tools, for
example:
• WCF problem determination using suitable Microsoft tooling.
• IBM MQ MQI client issues using the XMS trace format.
To simplify trace enablement, the .NET TraceSource and XMS .NET trace stack are both controlled using a
single interface.
There are two options for configuring WCF trace for the Non-SOAP/Non-JMS interface. You can either
configure trace programmatically or through an environment variable.
Procedure
To enable WCF trace for the Non-SOAP/Non-JMS interface, choose one of the following options:
• Configure trace through an environment variable by setting WMQ_TRACE_ON as the environment
variable.
• Configure trace programmatically by adding the following section of code to the
 section in the app.config file
Related concepts
“FFST: WCF XMS First Failure Support Technology” on page 374
You can collect detailed information about what various parts of the IBM MQ code is doing by using IBM
MQ trace. XMS FFST has its own configuration and output files for the WCF custom channel.
Related tasks
“Troubleshooting WCF custom channel for IBM MQ problems” on page 242
Troubleshooting information to help you solve problems with running Microsoft Windows Communication
Foundation (WCF) custom channel for IBM MQ applications.
“Contacting IBM Support” on page 301
IBM MQ troubleshooting and support 467
If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through
the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and
other news.
Developing Microsoft Windows Communication Foundation applications with IBM MQ
Tracing XMS .NET applications
If you are using IBM MQ classes for XMS .NET Framework, you can configure trace from an application
configuration file as well as from the XMS environment variables. If you are using IBM MQ classes for
XMS .NET (.NET Standard and .NET 6 libraries), you must configure trace from the XMS environment
variables. You can select the components that you want to trace. Trace is normally used under the
guidance of IBM Support.
About this task
Tracing for XMS .NET is based on the standard .NET trace infrastructure.
All tracing except for error tracing is disabled by default.
If you are using IBM MQ classes for XMS .NET Framework, you can turn on tracing and configure the trace
settings in the following ways:
• By using an application configuration file with a name that consists of the name of the executable
program to which the file relates, with the suffix .config. For example, the application configuration
file for text.exe would have the name text.exe.config. Using an application configuration file is the
preferred way of enabling trace for XMS .NET applications. For further details, see “Tracing XMS .NET
applications using an application configuration file” on page 469.
• By using XMS environment variables as for XMS C or C++ applications. For more information, see
“Tracing XMS .NET applications using XMS environment variables” on page 472.
• By using the mqclient.ini file and setting the appropriate properties of the Trace
stanza. You can also enable and disable tracing dynamically with the mqclient.ini file. For more
information, see “Tracing XMS .NET applications with mqclient.ini” on page 473.
Using an application configuration file is not supported for IBM MQ classes for XMS .NET (.NET Standard
and .NET 6 libraries). If you are using IBM MQ classes for XMS .NET (.NET Standard and .NET 6 libraries),
you can configure trace in the following ways:
• From the XMS environment variables. For more information, see “Tracing XMS .NET applications using
XMS environment variables” on page 472.
• From IBM MQ 9.3.3, by using the mqclient.ini file and setting the appropriate
properties of the Trace stanza. You can also enable and disable tracing dynamically with the
mqclient.ini file. For more information, see “Tracing XMS .NET applications with mqclient.ini” on
page 473.