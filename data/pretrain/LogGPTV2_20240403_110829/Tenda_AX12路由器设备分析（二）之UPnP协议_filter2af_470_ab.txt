> 客户端生成的SOAP请求会被嵌入在一个HTTP POST请求中，发送到Web服务器。Web 服服务器再把这些请求转发给Web service
> 请求处理器，它解析收到的SOAP 请求，调用Web service, 处理后再生成相应的额SOAP 应答。Web
> 服务器的到SOAP应答后，会再通过HTTP 应答的方式把它送回到客户端。
构建SOAP请求，需要包含下列元素：
  * 必须的Envelope元素，可把此XML文档标识为一条SOAP消息。
  * 可选的Header元素，包含头部信息
  * 必须的Body元素，包含所有的调用和响应信息。
  * 可选的Fault元素，提供有关处理此消息所发生错误的信息
基本结构为
      ...
              ...
                ...
使用python 来构造如下代码来获取Tenda 设备的外部IP，在代码中的注释都讲述了构造SOAP 调用需要的值意思。
    import requests
    # SOAP request URL
    url = "http://192.168.0.1:5000/ctl/IPConn"
    # 值来自于 rootDesc.xml文件中的 
    service_type="urn:schemas-upnp-org:service:WANIPConnection:1"
    # 值来自于SCPD XML中的GetExternalIPAddress
    action="GetExternalIPAddress"
    # structured XML
    payload = """
                """%(action,service_type,action)
    #soap_action="urn:schemas-wifialliance-org:service:WFAWLANConfig:1#GetDeviceInfo"
    soap_action="urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress"
    # headers
    headers = {
        'Content-Type': 'text/xml; charset=utf-8',
        'Host':'192.168.0.1:5000',
        'Content-Length':'355',
        'SOAPAction':'"%s"'%(soap_action)
    }
    # POST request
    response = requests.request("POST", url, headers=headers, data=payload)
    # prints the response
    print(response.text)
    print(response)
执行过上述代码之后，Tenda AX12 设备UPnP服务器会返回响应，其中有我们要获取的设备的外部IP.
    192.168.1.4
接下来我们来使用SOAP调用来介绍一下UPnP协议最主要的功能—端口映射，这里以一个比较简单的案例来介绍UPnP端口映射
在网络空间中，私有网络和公网交互的时候，私有网络使用的是内网IP地址，私有网络中的服务是无法被外网直接访问的，必须借助NAT网关设备把内网地址映射到网关的公网地址上，需要在NAT设备上为设备手动配置端口映射。但是如果多个设备都需要配置端口映射，并且端口不能冲突，那么配置就相当麻烦。但是路由设备中的UPnP服务可以自动为发送端口映射请求的设备进行端口分配，自动配置端口映射所需的操作。
ps:大多数路由器是支持UPnP的，有的是默认开启，有的是手动启动，Tenda AX12是需要手动启动的。
由于现在的路由器上的UPnP 端口映射都是自动的，这里了更好的理解和对UPnP进行后期的漏洞挖掘和测试，我将介绍如何手动给路由器的UPnP服务添加端口映射。
添加端口映射的action 在 
中，这里为了控制文章的篇幅，我并不想解释每个参数的意思，根据参数应该也不难理解吧。
        AddPortMapping
                NewRemoteHost
                in            RemoteHost
                NewExternalPort
                in
             ExternalPort
            NewProtocol
            in
      PortMappingProtocol
            NewInternalPort
            in
            InternalPort
            NewInternalClient
            in
            InternalClient
            NewEnabled
            in
            PortMappingEnabled
            NewPortMappingDescription
            in
            PortMappingDescription
            NewLeaseDuration
            in
            PortMappingLeaseDuration
根据AddPortMapping action的各种参数定义，很容易就开发出脚本
    import requests
    # SOAP request URL from 
    url = "http://192.168.0.1:5000/ctl/IPConn"
    soap_encoding = "http://schemas.xmlsoap.org/soap/encoding/"
    soap_env = "http://schemas.xmlsoap.org/soap/envelope"
    service_type = "urn:schemas-upnp-org:service:WANIPConnection:1"
    # from 
    action = "AddPortMapping"
    service_ns="urn:schemas-upnp-org:service:WANIPConnection:1"
    # structured XML
    payload = """
                5501
                TCP
                8009            192.168.0.101
                1            lll
                0
                """%(action,service_type,action)
    print("AddPortMapping ----------------------------------- request-----------------")
    print(payload)
    soap_Action= "%s#%s"%(service_type,action)
    # headers
    headers = {
        'Content-Type': 'text/xml; charset=utf-8',
        'Host':'192.168.0.1:5000',
        'Content-Length':'355',
        'SOAPAction':'"%s"'%(soap_Action)
    }
    # POST request
    response = requests.request("POST", url, headers=headers, data=payload)
    # prints the response
    print("AddPortMapping ----------------------------------- response-----------------")
    print(response.text)
    print(response)
映射的客户端端口必须是有效且开放的。不然会返回500，可以用python 开启8009端口
之后我们返回路由器查看UPnP服务的端口映射列表
## 0x03 UPnP 可能存在的风险
对于UPnP
存在的安全性和风险，我将结合一下实际的漏洞和案例进行讲解，可能描述的风险点不能够涵盖所有UPnP存在的潜在危害，目的也是为了更好的在实际的漏洞挖掘过程中提供不同的思路。因此仅供参考。
1） 缓冲区溢出漏洞
对缓冲区（Buffer ） 的使用没有进行检查和限制，外部的攻击者，可以通过这里取得整个系统的控制权限，缓冲区溢出漏洞在UPnP中是最常见的的漏洞之一。
[DD-WRT 45723 缓冲区溢出漏洞](https://www.exploit-db.com/exploits/49730)，
漏洞产生的位置在处理SSDP协议处理函数对uuid的值的长度进行限制，导致缓冲区溢出。
[NetGear R6400 upnp 栈溢出漏洞
CVE-2020-9373](https://cloud.tencent.com/developer/article/1599692) ,
漏洞的产生点位于SSDP 协议处理，upnpd处理ssdp包时直接利用strcpy复制未经过滤的数据导致的栈溢出。
2）命令注入漏洞
[DIR-815 UPnP命令注入漏洞](https://shadow-file.blogspot.com/2013/02/dlink-dir-815-upnp-command-injection.html)
在DIR-815路由器的固件中的/htdocs/cgibin中存在ssdpcgi_main函数，这个函数会把ST头的内容作为参数传递给M-search.sh，并执行。
并且我在DIR-802固件中也发现了同样的漏洞，并且发现了多处UPnP的命令注入漏洞。
目前嵌入式路由器中使用比较多的是miniUPnP，因为这个项目中没有使用到system等调用系统函数的代码，因此存在命令注入的可能性较小。小米路由器、Tenda路由器等都使用这个项目，相对来说，安全性还是很好的。
3） 拒绝服务漏洞
由于UPnP协议并没有对用户进行权限认证，因此攻击者可以不断的根据目标设备UPnP提供的服务进行请求配置，攻击者可以不断的构造较小的HTTP数据包请求UPnP服务端，UPnP服务端将返回XML服务配置文件，可以放大攻击，从而给目标设备造成大量流量并最终导致网络瘫痪。
4）信息泄露漏洞
现在的主流路由器设备上UPnP协议存在此漏洞的比较少，不过补排除存在一些小众品牌的路由设备上依旧存在信息泄露漏洞，有可能会泄露设备的SSID和密钥等敏感信息。
5）远程配置路由规则
在前面讲解如何在Tenda
AX12路由器上配置端口映射，在配置的过程中，并没有进行身份验证，并且NewInternalClient的值可以设置成其他设备的IP，这就意味着攻击者可以随意控制其他设备IP在路由器上的UPnP的端口映射。并且攻击者还可以进行端口映射的外部扫描，获取其他设备的端口情况。
## 0x04 总结
正片文章通过对Tenda
AX12路由器的测试来讲解了UPnP协议相关的信息，了解UPnP的具体属性和UPnP的功能，以及如何手动的编写UPnP的相关脚本和代码，便于对UPnP进行更好的安全性测试。还可以根据UPnP的数据包特点，开发专门的Fuzz工具，进行模糊测试。