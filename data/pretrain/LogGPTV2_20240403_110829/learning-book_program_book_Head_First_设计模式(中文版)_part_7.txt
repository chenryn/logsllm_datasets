到了真正的呱呱叫。
别忘了.因为MallardDuck继承Duck类，所以具有
使用FlyWithWings作为其FlyBehavior类
lyBehaviot与guackBehavion实例变量。
型。
public void display(){
System.out.printin("I'm a real Mallard duck") ;
所以，绿头鸭会真的“呱呱叫”，而不是“哎吱叫”，或“叫不出
声”。这是怎么办到的？当MallardDuck实例化时，它的构造器会把继
承来的quackBehavior实例变量初始化成Quack类型的新实例（Quack是
QuackBehavior的具体实现类）。
同样的处理方式也可以用在飞行行为上：MallardDuck的构造器将
flyBehavior实例变量初始化成FlyWithWings类型的实例（FlyWithWings是
FlyBehavior的具体实现类）。
16第1章
---
## Page 53
设计模式入门
等一下，你不是说过我们将不对具体实现
编程吗？但是我们在那个构造器里做什么
呢？我们正在制造一个具体的Quack实现类
的实例！
被你逮到了，我们的确是这么做的…….“只
是暂时”。
在本书的后续内容中，我们的工具箱中会有
更多的模式可用，到时候就可以修正这一点
了。
仍请注意，虽然我们把行为设定成具体的类
（通过实例化类似Quack或FlyWithWings的
行为类，并把它指定到行为引用变量中），
但是还是可以在运行时“轻易地”改变它。
所以，目前的做法还是很有弹性的，只是
初始化实例变量的做法不够弹性罢了。但
是想一想，因为quackBehavior的实例变
量是一个接口类型，我们能够在运行时，
通过多态的魔力动态地给它地指定不同的
QuickBehavior实现类。
花一点儿时间想一想，你如何实现一个其行
为可以在运行时改变的鸭子。（几页以后，
你就会看到做这件事的代码。）
PDG
你现在的位置
17
---
## Page 54
鸭子的行为测试
测试Duck的代码
①输入并编译下面的Duck类（Duck.java）以及两页前的
MallardDuck类（MallardDuck.java）。
public abstract class Duck (
为行为接口类型声明两个引
FlyBehavior flyBehavior;
用变量，所有鸭子子类（在
QuackBehavior quackBehavior;
public Duck(){
同一个packase中）都继承它
们。
public abstract void display();
public void performFly()(
flyBehavior.fly () ;
香托给行为类
public void performQuack()
quackBehavior.quack() ;
public void swim(){
System.out.println("All ducks float, even decoys!");
②输入并编译FlyBehavior接口（FlyBehavior.java）与两个行为实现
类（FlyWithWings.java与FlyNoWay.java）。
所有飞行行为类必须实现的
public interface FlyBehavior {
public void fly();
接口。
public class FlywithWings implements FlyBehavior {
public void fly()(
这是飞行行为的实现，给“真
System.out.println("I'm flying!!") ;
会”飞的鸭子用…
public class FlyNoWay implements FlyBehavior {
这是飞行行为的实瑰
public void fly(){
System.out.println(*I can't fly");
给“不会”飞的鸭子用
1
（包括橡皮鸭和诱饵鸭）
18
第1章
---
## Page 55
设计模式入门
继续测试Duck的代码
......
③输入并编译QuackBehavior接口（QuackBehavior.java）及其三个实现类
（Quack.java、MuteQuack.java、Squeak.java）。
public interface QuackBehavior {
public void quack();
public class Quack implements QuackBehavior {
public void quack(){
System,out.println ("Quack");
public class MuteQuack implements QuackBehavior {
public void quack(){
System.out.println (">");
public class Squeak implements QuackBehavior {
public void quack(){
System.out.println ("Squeak") ;
4
输入并编译测试类（MiniDuckSimulator.java）
public class MiniDuckSimulator {
public static void main(String[] args) {
Duck mallard = new MallardDuck () ;
这金调用MallardDuck继承来的
ma1lard.performQuack ()
mallard.performFly(); 
petormQuack（）方法，进而番托给该对
象的QuackBehavior对象处理（也就是说
调用继承来的quackBehavior引用对象的
运行代码！
quack())。
5
至于perlormFly(）.也是一样的道理。
Fie EditWin
java MiniDuckSimulator
Quack
I'm flying!!
你现在的位置》
19
---
## Page 56
具有动态行为的鸭子
动态设定行为
在鸭子里建立了一堆动态的功能没有用到，就太可惜了！假设我们想在鸭子子类中通
过“设定方法（settermethod）”来设定鸭子的行为，而不是在鸭子的构造器内实例化。
①在Duck类中，加入两个新方法：
public void setFlyBehavior (FlyBehavior fb)(
flyBehavior = fb;
Duck
/
FlyBehavior flyBehavior;
public void setQuackBehavior (QuackBehavior qb) {
QuackBehavior quackBehavior;
quackBehavior = qb;
?
swim(
display0
performQuack()
perfomFly0
setFlyBehavior)
setQuackBehavior()
从此以后，我们可以“随时”调用这两个方法改变鸭子的行
鸭子的其他方法
为。
②制造一个新的鸭子类型：模型鸭（ModelDuck.java）
public class ModelDuck extends Duck {
public ModelDuck(){
一开始，我们的模型鸭是不
flyBehavior = new FlyNoWay () ;
会飞的。
quackBehavior = new Quack();
1
public void display() (
System.out.println("I' m a model duck");
③建立一个新的FlyBehavior类型
没美系，我们建立一个利用火
(FlyRocketPowered.java)
箭动力的飞行行为。
public class FlyRocketPowered implements FlyBehavior (
public void fly()(
System.out.println(*I' m flying with a rocket!");
20
第1章
---
## Page 57
设计模式入门
4
改变测试类（MiniDuckSimulator.java），加上模型鸭，并使模型鸭具有
改变前
火箭动力。
public class MiniDuckSimulator {
public static void main(String[] args){
Duck mallard = new MallardDuck() ;
mallard.performQuack () ;
mallard.performFly() ;
第一次调用perormFly(）金被播托给
Duckmodel=new ModelDuck（）;
slyBehavior对象（也就是FlyNoWay实
model.performFly();
例）.该对象是在模型鸭构造器中设
model.setFlyBehavior（new FlyRocketPowered());
置的。
model.performFly();
这会调用继承来的setter方法，把火
箭动力飞行的行为设定到模型聘中。
如果成功了，就意味着模型鸭可以动态地
哇：模型鸭突然具有了火箭动力飞行
改变它的飞行行为。如果把行为的实现绑
能力！
死在鸭子类中，可就无法做到这样了。
5运行！
Fle Edt Window
&java MiniDuckSimulator
Quack
iibutgw,I
Ican'tfly
I'm fying with a rocket!
改变后
在运行时想改变鸭子的
行为，只需调用鸭子的
setter方法就可以。
你现在的位置
21
---
## Page 58
大局观
封装行为的大局观
好，我们已经深入研究了鸭子模拟器的设计，该是将头探出水面，
呼吸空气的时候了。现在就来看看整体的格局。
下面是整个重新设计后的类结构，你所期望的一切都有：鸭子继承Duck，
飞行行为实现FlyBehavior接口，呱呱叫行为实现QuackBehavior接口。
也请注意，我们描述事情的方式也稍有改变。不再把鸭子的行为说成
是“一组行为”，我们开始把行为想成是“一族算法”。想想看，在
SimUDuck的设计中，算法代表鸭子能做的事（不同的叫法和飞行法），
这样的做法也能很容易地用于用一群类计算不同州的销售税金。
请特别注意类之间的“关系”。拿起笔，把下面图形中的每个箭头
标上适当的关系，关系可以是IS-A（是一个）、HAS-A（有一个）或
IMPLEMENTS（实现）。
封装飞行行为
客户使用封装好的飞行和弧呱叫
FlyBetavior
算法族。
客户
Duck
把每组行为想象
or flyBiel
实现鸭子的飞行
成一个算法族。
efyfetarorg
封装呱呱叫行为
 鸭子的其他行为
Quac
fspiay0(
看起未像红头鸭)
10leds
乔起光业像皮鸭]
10fepk
 实现响子吸气明
10pt
看起米业绿头鸭）
可以互摘
法
22
第1章
---
## Page 59
设计模式入门
“有一个”关系相当有趣：每一鸭子都有一个FlyBehavior和
一个QuackBehavior，好将飞行和呱呱叫委托给它们代为处
理。
大师与徒·
当你将两个类结合起来使用，如同本例一般，这就是组
大师：蚱，告诉我，
合（composition）。这种做法和“继承”不同的地方在于，
在面向对象的道路上，
鸭子的行为不是继承来的，而是和适当的行为对象“组
你学到了什么？
合”来的。
门徒：大师，我学到了，面向对象之路
这是一个很重要的技巧。其实是使用了我们的第三个设计
承诺了“复用”。
原则：
大师：继续说..
门徒：大师，借由继承，好东西可以
设计原则
再被利用，所以程序开发时间就会大
幅减少，就好像在林中很快地砍竹子一
多用组合，少用继承。
样。
大师：蚱呀！软件开发完成“前”以
及完成“后”，何者需要花费更多时间
如你所见，使用组合建立系统具有很大的弹性，不仅可将算
呢？
法族封装成类，更可以“在运行时动态地改变行为”，只要
门徒：答案是“后”，大师。我们总是
组合的行为对象符合正确的接口标准即可。
需要花许多时间在系统的维护和变化
组合用在“许多”设计模式中，在本书中，你也会看到它的
上，比原先开发花的时间更多。
诸多优点和缺点。
大师：蚱，这就对啦！那么我们是不
是应该致力于提高可维护性和可扩展性
上的复用程度呀？
BRAIN
门徒：是的，大师，的确是如此。
X.POWER
大师：我觉得你还有很多东西要学，希
望你再深入研究继承。你会发现，继承
鸭鸣器（duckcall）是一种装置，猎人用鸭鸣器模拟
有它的问题，还有一些其他的方式可以
出鸭叫声，以引诱野鸭。你如何实现你自己的鸭鸣器，
达到复用。
而不继承Duck类？
你现在的位置
23
---
## Page 60
策略模式
讲到设计模式···
恭喜你，学会第一个模
式了！
你刚刚用了你的第一个设计模式：也就是策略模式（Strategy
Pattern）。不要怀疑，你正是使用策略模式改写SimUDuck程序
的。多亏这个模式，现在系统不担心遇到任何改变，主管们可
以勾画他们的赌城狂欢之旅了。
为了介绍这个模式，我们走了很长的一段路。下面是此模式的
正式定义：
策略模式定义了算法族，分别封装起来，让它们之间
当你需要给朋友留下深刻的
可以互相替换，此模式让算法的变化独立于使用算法的客
印象，或是想影响关键主管的
户。
决策时，
义：
PDG
24
第1章
---
## Page 61
设计模式入门
设计谜题
在下面，你将看到一堆杂乱的类与接口，这取自一个动作冒险游戏。你将看到代表
游戏角色的类和角色可以使用的武器行为的类。每个角色一次只能使用一种武器，
但是可以在游戏的过程中换武器。你的工作是要弄清楚这一切…
（答案在本章结尾处）
你的任务：
①安排类。
②找出一个抽象类、一个接口，以及八个类。
③在类之间画箭头。
a.继承就画成这样（“extend”）。
b.实现接口就画成这样（“implement”）。
C.“有一个”关系就画成这样。
④把serWeaponO方法放到正确的类中。
Character
WeaponBehavior weapon
fght(:
KnifeBehavior
BowAndArrowBehavior
useWa（w实现用匕首
刺杀）
WeaponBehavior
ccinterfao
fight()( )
useWeapon(]:
fghto ...)
King
Troll
AxeBehavior
pon0（#实现用斧头
Knight