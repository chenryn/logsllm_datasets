cd /tools/impacket && python ./setup.py install
apt-get -y install dsniff
在Kali机器的另一个终端中，安装所需的所有模块。 
git clone https://github.com/hak5/bashbunny-payloads.git/opt/bashbunny-payloads
您可以选择任何类型的静荷，但在示例中，我们将设置Bash Bunny两个静荷：BunnyTap和QuickCreds。 
cp -R/opt/bashbunny-payloads/payloads/library/credentials/BunnyTap/*/media/ root/BashBunny/payloads/switch1/
cp -R/opt/bashbunny-payloads/payloads/library/credentials/QuickCreds/*/media/ root/ BashBunny/payloads/switch2/
注意，在每个Switch1和Switch2文件夹中都有一个名为payload.txt的文件。在每个文件中，您需要将其配置为攻击Windows或macOS主机。对于Windows主机，需确保将ATTACKMODE设置为RNDIS_ETHERNET；对于macOS，需将其配置为ECM_ETHERNET。
6.4.2 QuickCreds
QuickCreds是一个可以推荐的工具，它利用Responder，从锁定和未锁定的主机捕获NTLMv2挑战散列值。假设您在做一次物理安全评估，进入公司并遇到许多锁屏的主机时，您插入Bash Bunny，选择QuickCreds，每台机器等待时间约2min。Bash Bunny将接管网络适配器，使用Response路由共享和身份验证请求，然后记录该数据。它将所有凭证保存到USB磁盘的loot文件夹中，如图6.10所示。
图6.10
6.4.3 BunnyTap
BunnyTap基于Samy Kamkar的PoisonTap工具。即使是在锁定的机器上，PoisonTap也可以执行以下操作。
通过USB（或Thunderbolt）模拟以太网设备。
劫持设备的所有互联网流量（低优先级/未知网络接口）。
从网络浏览器提取和存储Alexa前1,000,000个网站的HTTP Cookie和会话。
将内部路由器暴露给攻击者，使其可以通过WebSocket和DNS重新绑定进行远程访问（感谢Matt Austin提供重新绑定的想法）。
在HTTP缓存中为数十万个域和常见的JavaScript CDN URL安装基于Web的持久后门程序，所有这些都可以通过缓存中毒访问用户的Cookie。
允许攻击者在任何后门域上远程强制用户发出HTTP请求并回送响应（GET与POST）以及Cookie。
不需要解锁机器。
即使在设备被移除并且攻击者离开后，后门和远程访问仍然存在。
从物理安全评估的角度来看，您进入他们的办公室，将BunnyTap插入每台机器，然后等待大约2min。Bash Bunny将接管所有流量数据。如果主机浏览器已经打开并且处于活跃状态（如广告或任何定期更新的页面），那么BunnyTap将启动并请求所有Alexa排名前1,000,000的网站。如果被攻击用户当时登录任何这些站点，那么BunnyTap将捕获被攻击者的所有Cookie。现在，我们可以将这些Cookie导入我们的主机，用他们的Cookie替换我们的Cookie，在不知道他们的密码的情况下登录，如图6.11所示。
图6.11
6.5 WiFi
在WiFi方面，攻击客户端方法没有大的变化。我们看到WEP网络明显减少，攻击方式仍然是deauth、aireplay-ng和捕获IV数据包。对于WPA无线网络，这里推荐的选择仍然是断开客户端连接，捕获握手数据包，将其传递给hashcat，破解密码。这两种方法都很好用，我喜欢使用的版本是Wifite2版本，它是基于Alfa AWUS036NHA无线网卡完全重写的。Wifite2界面简单易用，支持多种攻击，比Aircrack支持类型还多，并且可以轻松破解捕获的散列值，如图6.12所示。
图6.12
在设备方面，除Alfas两个设备外，使用WiFi Pineapple Nanos网卡可以很方便地实现更隐蔽的WiFi攻击。如果您需要启动假的HostAP、通过另一个天线路由流量、搭建伪造页面、捕获身份验证信息、执行中间人攻击、运行Responder以及其他攻击，Nano是一个完成以上操作的轻量级硬件工具，如图6.13所示。
图6.13
如果没有订购Pineapple，那么还有一些工具可以开展类似的攻击，其中一个工具是EAPHammer。EAPHammer的功能如下。
从WPA-EAP和WPA2-EAP网络窃取RADIUS凭证。
执行恶意门户攻击以窃取AD凭证，实现间接无线迁移。
执行门户攻击。
内置Responder工具。
支持开放网络和WPA-EAP / WPA2-EAP。
大多数攻击都不需要手动配置。
安装和设置过程无须手动配置。
利用最新版本的hostapd（2.6）。
支持evil twin和karma攻击。
生成定时PowerShell静荷用于间接无线迁移。
集成HTTP服务器用于Hostile Portal攻击。
支持SSID隐藏。
EAPHammer的优势是可以使用自定义攻击功能，执行Responder攻击，捕获NTLM挑战身份验证散列，用于暴力破解和间接迁移。
6.6 结论
物理攻击看起来是一件有趣的事情。在许多行动中，我们可能会花几天的时间来了解公司，观察警卫轮换，并弄清楚他们有什么类型的门。我们可能会尝试远距离拍摄证件照片，记录人们离开公司的时间，并找出可以让我们进入公司的薄弱环节。
从红队的角度来看，我们要关注的不仅是物理安全方面的弱点，而且要关注人员的安全意识。
如果触发警报，相关人员需要多长时间才能调查清楚？
摄像头是否全天候监控？如果是，那么在出现可疑的情况时，需要多长时间才能发现？
员工是否留意尾随进门的情况？
如果被阻止尾随，那么您能够解释从而脱身吗？
如果您打扮成类似于设施工作人员（或任何第三方服务）的人，那么您会被如何处理？
最后一点，在开始之前，需确保您有明确的范围、一份免于牢狱之灾的授权书、CISO/物理安全负责人的电话号码，并确保与公司密切配合。您准备得越充分，您就越不可能被警卫，但是谁也不能保证……
第7章 四分卫突破——规避杀毒软件检测
7.1 为红队行动编写代码
能够成功地将红队和渗透测试人员区分的一个特征是能否适应和了解不同的安全防护机制。分析底层汇编语言，编写shellcode，创建自定义命令和控制二进制文件，修改代码空间隐藏恶意软件，这些都是日常工作的一部分。我经常遇到不会编码的渗透测试人员，虽然编码不是必需的，但是确实会影响他们进一步的专业发展。因此，我想为没有真正使用过底层语言开发代码的读者，专门写一章内容，帮助他们开始编写代码。
7.2 构建键盘记录器
键盘记录器是任何渗透测试人员/红队必备的工具，本节将指导您制作一个通用键盘记录器。有时我们只想持续监控某个用户或获取凭证。这可能是因为无法获得任何类型的横向渗透/权限提升，或者我们可能只想监视用户，为后续的行动做准备。在这样的情况下，我们喜欢在被攻击者系统上放置并运行键盘记录器，并将他们的键击记录发送出去。以下的例子只是一个原型系统，本实验的目的是让您了解原理和构建方法。使用C语言的原因是生成的二进制文件相对较小，并且由于是底层语言，可以更好地访问操作系统，并且可以规避杀毒软件检测。在本书第2版中，我们使用Python语言编写了键盘记录器，并使用py2exe编译成二进制文件，但是生成的文件容易被检测到。下面让我们来看一个稍微复杂的例子。
7.2.1 设置您的环境
下面是使用C语言编写和编译，生成Windows二进制文件，并创建自定义键盘记录器所需的基本设置。
虚拟机中的Windows 10。
安装Visual Studio，使用命令行编译器，使用Vim代码编辑。
到目前为止，Windows API编程的推荐资源是微软公司的MSDN网站。MSDN是一个非常宝贵的资源网站，详细说明了系统调用、类型和结构定义，并包含了许多示例。虽然这个项目并不一定需要这些资源，但通过阅读微软公司出版的Windows Internals一书，可以更深入地了解Windows操作系统。对于C语言，则可以参考《C语言设计语言》一书，作者是Kernighan和Ritchie。另外，也可以阅读Beej的《网络编程指南》（有印刷版和在线版），这是C语言网络编程的一本很好的入门读物。
7.2.2 从源代码开始编译
在下面这些实验中，将会有多个代码示例。本实验室将使用微软公司的Optimizing Compiler工具编译代码，该编译器随Visual Studio Community一起提供，并内置在Visual Studio Developer命令提示符中。在安装Visual Studio Community工具后，需确保安装通用Windows平台开发环境和工具，配置工具和C++桌面开发环境。如果编译示例，那么需打开开发人员命令提示符，然后导航到包含源文件的文件夹。最后，运行命令“cl sourcefile.c io.c”。这将生成一个与源文件同名的可执行文件。
编译器默认编译32位应用程序，但此代码也可以编译成64位应用程序。要编译成64位应用程序，需运行位于Visual Studio文件夹中的批处理脚本。在命令提示符中，导航到“C:\Program Files(x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build”，需要注意此路径可能会有所不同，具体取决于您的Visual Studio版本。然后，运行命令“vcvarsall.bat x86_amd64”，这将设置微软编译器编译64位可执行文件而不是32位可执行文件。现在，您可以通过运行“cl path/to/code.c”编译代码。
7.2.3 示例框架
该项目的目标是创建一个使用C语言和底层Windows功能来监视击键的键盘记录器。该键盘记录器使用SetWindowsHookEx和LowLevelKeyboardProc函数。SetWindowsHookEx允许在本地和全局上下文中设置各种类型的钩子。在这种情况下，WH_KEYBOARD_LL参数用于获取底层键盘事件。SetWindowsHookEx的函数原型如下所示。
HHOOK WINAPI SetWindowsHookEx(
  _In_ int    idHook,
  _In_ HOOKPROC lpfn,
  _In_ HINSTANCE hMod,
  _In_ DWORD   dwThreadId
);
SetWindowsHookEx函数采用整数表示钩子ID、指向函数的指针、句柄模块和线程ID，前两个值很重要。钩子ID是安装的钩子类型的整数标识。Windows功能页面上列出可用ID。在我们的例子中，使用ID 13或WH_KEYBOARD_LL。HOOKPROC是一个指向回调函数的指针，每次挂了钩子的进程接收数据都会调用该函数。这意味着每次按下一个键，都会调用HOOKPROC。这个函数用于将键值写入文件。hMod是DLL的句柄，包含lpfn指向的函数。此值将设置为NULL，因为函数与SetWindowsHookEx在同一进程中使用。dwThreadId设置为0，将与桌面应用程序的所有线程回调相关联。最后，该函数返回一个整数，该整数将用于验证钩子是否设置正确，如果设置不正确则退出。
第二部分是回调函数。回调函数实现程序大量的功能。此函数接收处理按键信息，将其转换为ASCII字母以及所有文件操作。LowLevelKeyboardProc的原型如下所示。
LRESULT CALLBACK LowLevelKeyboardProc(
  _In_ int  nCode,
  _In_ WPARAM wParam,
  _In_ LPARAM lParam
);
让我们回顾一下LowLevelKeyboardProc参数的内容。该函数的第一个参数是一个整数，告诉Windows如何解释该消息。其中两个参数是，①wParam，消息的标识符；②lParam，它指向KBDLLHOOKSTRUCT结构的指针。wParam的值需在函数参数中指定。参数lParam指向KBDLLHOOKSTRUCT成员。lParam KBDLLHOOKSTRUCT的值是vkCode或虚拟键盘码。这是按下键的代码，而不是实际的字母，因为字母可能会根据键盘语言的不同而有所不同。vkCode需要随后转换为相应的字母。现在，不需要担心参数传递给键盘回调函数，因为钩子激活后，操作系统自动传递参数。
在查看框架代码时，需要注意的事项是，在回调函数中，包含pragma注释行、消息循环和返回CallNextHookEx行。pragma注释行是用于链接User32 DLL的编译器指令。此DLL包含程序所需的大多数函数调用，因此需要进行链接。它也可以与编译器选项相关联。接下来，如果需要使用LowLevelKeyboardProc函数，则必须使用消息循环。MSDN声明：“此钩子在安装它的线程的上下文中调用。通过向安装了钩子的线程发送消息来进行调用。因此，安装钩子的线程必须有一个消息循环。”
返回CallNextHookEx是因为MSDN的声明：“调用CallNextHookEx函数链接到下一个挂钩过程是可选的，但是强烈推荐使用；否则，已安装挂钩的其他应用程序将不会收到挂钩通知，因此可能会出现错误行为。您应该调用CallNextHookEx，除非您需要阻止其他应用程序看到通知。”
接下来，我们继续构建回调函数，从文件句柄开始。在示例代码中，它在Windows Temp目录（C:\Windows\Temp）创建名为“log.txt”的文件。该文件配置了append参数，因为键盘记录器需要不断地将按键记录输出到文件。如果temp中不存在该文件，则将创建一个文件。
回到KBDLLHOOKSTRUCT，代码声明了一个KBDLLHOOKSTRUCT指针，然后将其分配给lParam。这将允许访问每个按键的lParam内的参数。然后代码检查wParam是否返回“WM_KEYDOWN”，即检查按键是否被按下。这样做是因为钩子会在按下和释放按键时触发。如果代码没有检查WM_KEYDOWN事件，那么程序将每次写入两次按键操作。
发现按键操作后，需要一个switch语句，检查lParam的vkCode（虚拟键码），获取按键值。某些键需要以其他方式写入文件，例如return、control、Shift、Space和Tab键。对于默认情况，代码需要将按键的虚拟键码转换为实际的字母。执行此转换的简单方法是使用ToAscii函数。ToAscii输入参数vkCode、一个ScanCode、一个指向键盘状态数组指针、指向接收字母缓冲区的指针，以及uFlags的整数值。vkCode和ScanCode来自键结构，键盘状态是先前声明的字节数组，用于保存输出的缓冲区，uFlags参数设置为0。
必须检查是否释放了某些键，例如Shift键。这可以通过编写另一个“if语句”来检查“WM_KEYUP”，然后使用“switch语句”来检查所需的按键。最后，需要关闭该文件并返回CallNextHookEx。
此时，键盘记录器完全正常工作。但是，有两个问题。一个问题是运行程序会产生一个命令提示符，这表明程序正在运行，并且缺少输出的内容，容易让人产生怀疑。另一个问题是运行键盘记录器获得文件仅放在本地计算机上，意义不是很大。
命令提示问题的修复相对容易，具体做法是修改标准C“Main”函数入口点为Windows特定的WinMain函数入口。根据我的理解，这样做很有效的原因是WinMain是Windows上图形程序的入口点。虽然操作系统预期是创建程序窗口，但我们可以告诉操作系统不创建任何窗口，因为有这个控件。现在，该程序只是在后台生成一个进程，不创建任何窗口。
该程序网络方面的问题可以更加直接地进行解决。首先通过声明WSAData，启动Winsock，清除提示结构以及填充相关参数，初始化Windows套接字函数。举个例子，代码将AF_UNSPEC用于IPv4，SOC_STREAM用于TCP连接，使用getaddrinfo函数填充命令和控制数据结构。在填写所有必需的参数后，可以创建套接字。最后，使用socket_connect函数创建套接字。
连接之后，socket_sendfile函数将执行大部分操作。它使用Windows“CreateFile”函数打开日志文件的句柄，然后使用“GetFileSizeEx”函数获取文件大小。一旦获取了文件大小，代码将分配一个文件大小的缓冲区，加上一个用于填充的缓冲区，然后将文件读入该缓冲区。最后，我们通过套接字发送缓冲区的内容。
对于服务器端，在命令和控制服务器上启动socat监听3490端口（启动socat命令：socat - TCP4-LISTEN:3490,fork）。一旦监听器启动并且键盘记录器正常运行，您就会看到被攻击者主机的所有命令，并且每10 min被推送到命令和控制服务器。在编译version_1.c之前，确保将getaddrinfo修改为当前的命令和控制服务器的IP地址。编译代码：cl version_1.c io.c。
需要介绍的最后一个函数是thread_func函数。thread_func调用函数get_time，获取当前时间。然后检查该值是否可被5整除，因为该工具每5min发送一次文件。如果它可以被5整除，那么它会设置套接字并尝试连接命令和控制服务器。如果连接成功，那么它将发送文件并运行清理功能。然后，循环休眠59 s。需要休眠功能的原因是这一切都在一个稳定的循环中运行，这意味着该函数将在几秒钟内运行，建立连接，连接和发送文件。如果没有59s的休眠时间，那么该函数最终可能会在1 min的间隔内发送文件数10次。休眠函数允许循环等待足够长的时间，切换到下一分钟，因此仅每5 min发送一次文件。
7.2.4 混淆
有数百种不同的方法来执行混淆。虽然本章不能全部涉及，但我想为您介绍一些基本的技巧和思路来规避杀毒软件。
您可能已经知道，杀毒软件会查找特定的字符串。规避杀毒软件的一种简单方法是创建一个简单的转盘密码，移动字符串的字符。在下面的代码中，有一个基本的解密函数，可以将所有字符串移动6个字符（ROT6）。这会导致杀毒软件可能无法检测到乱码。在程序开始时，代码将调用解密函数，获取字符串数组，返回到常规格式。解密函数如下所示。
int decrypt(const char* string, char result[]){
    int key = 6;
    int len = strlen(string);
    for(int n = 0; n < len; n++){