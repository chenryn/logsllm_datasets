第⼆个例⼦（在[⽆益的Solidity编码竞赛](https://github.com/Arachnid/uscc/tree/master/submissions-2017/doughoyte
"⽆益的Solidity编码竞赛")期间被发现）是由于数组的⻓度由⽆符号整数表示的事实促成的错误的错误：
    function popArrayOfThings() {
    require(arrayOfThings.length >= 0);
     arrayOfThings.length--;
    }
第三个例⼦是第⼀个例⼦的变体，其中两个⽆符号整数的算术结果是⼀个⽆符号整数：
    function votes(uint postId, uint upvote, uint downvotes) {
    if (upvote - downvote  尽可能避免使⽤低级别的“调⽤”。如果返回值处理不当，它可能会导致意外的⾏为。Remix
其中的密实度的更深层次的特点是低级别的功能`call()`，`callcode()`，`delegatecall()`和`send()`。他们在计算错误⽅⾯的⾏为与其他Solidity函数完全不同，因为他们不会传播（或冒泡），并且不会导致当前执⾏的全部回复。相反，他们会返回⼀个布尔值设置为false，并且代码将继续运⾏。这可能会让开发⼈员感到意外，如果未检查到这种低级别调⽤的返回值，则可能导致失败打开和其他不想要的结果。请记住，发送可能会失败！
真实世界影响：
  * [以太之王](https://www.kingoftheether.com/postmortem.html "以太之王")
  * [Etherpot](https://www.dasp.co/ "Etherpot")
代码示例：
下⾯的代码是⼀个当忘记检查返回值时会出错的例⼦send()。如果调⽤⽤于将ether发送给不接受它们的智能合约（例如，因为它没有应付回退功能），则EVM将⽤其替换其返回值false。由于在我们的例⼦中没有检查返回值，因此函数对合同状态的更改不会被恢复，并且etherLeft变量最终会跟踪⼀个不正确的值：
    function withdraw(uint256 _amount) public {
    require(balances[msg.sender] >= _amount);
     balances[msg.sender] -= _amount;
     etherLeft -= _amount;
     msg.sender.send(_amount);
    }
其他资源：
  * [未经检查的外部写⼊](https://github.com/trailofbits/not-so-smart-contracts/tree/master/unchecked_external_call "未经检查的外部写⼊")
  * [扫描“未经检查 - 发送”错误的现场以太坊合同](http://hackingdistributed.com/2016/06/16/scanning-live-ethereum-contracts-for-bugs/ "扫描“未经检查 - 发送”错误的现场以太坊合同")
#### 5.拒绝服务
包括达到gas上限，意外抛出，意外杀死，访问控制违规
> 我不⼩⼼杀了它。 devops199 on the Parity multi-sig wallet
在以太坊的世界中，拒绝服务是致命的：尽管其他类型的应⽤程序最终可以恢复，但智能合同可以通过
其中⼀种攻击永远脱机。许多⽅⾯导致拒绝服务，包括在作为交易接受⽅时恶意⾏为，⼈为地增加计算
功能所需的⽓体，滥⽤访问控制访问智能合约的私⼈组件，利⽤混淆和疏忽，...这类攻击包括许多不同的变体，并可能在未来⼏年看到很多发展。
损失：估计为514,874 ETH（当时约3亿美元）
真实世界影响：
  * [政府](https://www.reddit.com/r/ethereum/comments/4ghzhv/governmentals_1100_eth_jackpot_payout_is_stuck/ " 政府")
  * [奇偶校验多信号钱包](http://paritytech.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/ "奇偶校验多信号钱包")
示例：
  1. ⼀个拍卖合同允许其⽤户在竞标不同的资产。
  2. 为了投标，⽤户必须bid(uint object)⽤期望的以太数来调⽤函数。拍卖合同将把以太保存在第三⽅保存中，直到对象的所有者接受投标或初始投标⼈取消。这意味着拍卖合同必须在其余额中保留未解决出价的全部价值。
  3. 该拍卖合同还包含⼀个withdraw(uint amount)功能，它允许管理员从合同获取资⾦。随着函数发送amount到硬编码地址，开发⼈员决定公开该函数。
  4. ⼀个攻击者看到了潜在的攻击和调⽤功能，指挥所有的合同的资⾦为其管理员。这破坏了托管承诺并阻⽌了所有未决出价。
  5. 虽然管理员可能会将托管的钱退还给合同，但攻击者可以通过简单地撤回资⾦继续进⾏攻击。
代码示例：
在下⾯的例⼦中（受以太王的启发），游戏合同的功能可以让你成为总统，如果你公开贿赂前⼀个。不
幸的是，如果前总统是⼀个聪明的合同，并导致⽀付逆转，权⼒的转移将失败，恶意智能合同将永远保 持总统。听起来像是对我的独裁：
    function becomePresident() payable {
     require(msg.value >= price); // must pay the price to become president
     president.transfer(price); // we pay the previous president
     president = msg.sender; // we crown the new president
     price = price * 2; // we double the price to become president
    }
在第⼆个例⼦中，调⽤者可以决定下⼀个函数调⽤将奖励谁。由于for循环中有昂贵的指令，攻击者可
能会引⼊太⼤的数字来迭代（由于以太坊中的⽓体阻塞限制），这将有效地阻⽌函数的功能。
    function selectNextWinners(uint256 _largestWinner) {
    for(uint256 i = 0; i  合同对block.number年龄没有⾜够的验证，导致400个ETH输给⼀个未知的玩家，他在等待256个街区之前揭示了可预测的中奖号码。 Arseny
> Reutov
以太坊的随机性很难找到。虽然Solidity提供的功能和变量可以访问明显难以预测的值，但它们通常要么⽐看起来更公开，要么受到矿⼯影响。由于这些随机性的来源在⼀定程度上是可预测的，所以恶意⽤户通常可以复制它并依靠其不可预知性来攻击该功能。
损失：超过400 ETH
真实世界影响：
  * [SmartBillions彩票](https://www.reddit.com/r/ethereum/comments/74d3dc/smartbillions_lottery_contract_just_got_hacked/ "SmartBillions彩票")
  * [运⾏](https://medium.com/@hrishiolickel/why-smart-contracts-fail-undiscovered-bugs-and-what-we-can-do-about-them-119aa2843007 "运⾏")
示例：
  1. 甲智能合同使⽤块号作为随机有游戏⽤的源。
  2. 攻击者创建⼀个恶意合约来检查当前的块号码是否是赢家。如果是这样，它就称为第⼀个智能合约以获胜; 由于该呼叫将是同⼀交易的⼀部分，因此两个合约中的块编号将保持不变。
  3. 攻击者只需要调⽤她的恶意合同，直到获胜。
代码示例：
在第⼀个例⼦中，a private
seed与iteration数字和keccak256散列函数结合使⽤来确定主叫⽅是否获胜。Eventhough的seed是private，它必须是通过交易在某个时间点设置，并因此在blockchain可⻅。