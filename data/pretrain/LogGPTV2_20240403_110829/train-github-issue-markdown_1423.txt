I have run into an unexpected problem with (a more complicated version of) the
following code:
    julia> function f(x::Bool)
               if x
                   function g(y)
                       return y
                   end
                   return g
               else
                   function g(y)
                       return y + 1
                   end
                   return g
               end
           end
    f (generic function with 1 method)
    julia> f(true)
    (::var"#g#7") (generic function with 1 method)
    julia> f(false)
    ERROR: UndefVarError: g not defined
    Stacktrace:
     [1] f(::Bool) at ./REPL[1]:11
     [2] top-level scope at REPL[3]:1
I had assumed that closure notation `function f(x) ... end` was intended to be
equivalent to `f = (x) -> ...` (well, the former may allow you to attach an
addition method to the function or closure, also). Lowering has generated the
following code:
    julia> @code_lowered f(true)
    CodeInfo(
    1 ─     Core.NewvarNode(:(g))
    └──     goto #3 if not x
    2 ─     g = %new(Main.:(var"#g#7"))
    └──     return g
    3 ─     return g
    )
It seems to have removed the second closure assignment entirely. I expected it
to behave like the following assignment form (even with "long" function
notation):
    julia> function f(x::Bool)
               if x
                   g = function (y)
                       return y
                   end
                   return g
               else
                   g = function (y)
                       return y + 1
                   end
                   return g
               end
           end
    f (generic function with 1 method)
    julia> @code_lowered f(true)
    CodeInfo(
    1 ─     Core.NewvarNode(:(#8))
    │       Core.NewvarNode(:(#9))
    │       Core.NewvarNode(:(g))
    └──     goto #3 if not x
    2 ─     #8 = %new(Main.:(var"#8#10"))
    │       g = #8
    └──     return g
    3 ─     #9 = %new(Main.:(var"#9#11"))
    │       g = #9
    └──     return g
    )