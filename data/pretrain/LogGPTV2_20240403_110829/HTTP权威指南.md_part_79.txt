hierarchy/from 与网景格式中的route字段一样，hierarchy字段说明了代理向客户端发送请求
时经由的路径。efrom字段说明了代理用来发起请求的服务器的名称
content-type 代理响应实体的Content-Type
b： 回顾第2章，代理通常会记录下整条请求URL，这样如果URL中有用户和密码组件，代理就会在不
经意间记录下此信息。
c：rfc931-ident、hierarchy/from和content-type字段是在Squid 1.1中添加的。早期版本中都没有这些字段。
d：RFC 931描述了这种认证方式中使用的ident查找。
e：http://squid.nlanr.net/Doc/FAQ/FAQ-6.html#ss6.6列出了所有有效的Squid hierarchy代码。
例21-5给出了一个Squid日志格式条目的例子。
例21-5 Squid日志格式
99823414 3001 209.1.32.44 TCP_MISS/200 4087 GET http://www.joes-
hardware.com - DIRECT/
proxy.com text/html
这些字段的值如下所示。
字 段 值
timestamp 99823414
time-elapsed 3001
host-ip 209.1.32.44
action-code TCP_MISS
status 200
size 4087
method GET
URL http://www.joes-hardware.com 490
RFC 931 ident -
hierarchy DIRECTa
from proxy.com
content-type text/html
a：DIRECT Squid hierarchy值与网景日志格式中的DIRECT route值一样。
表21-9列出了各种Squid结果代码。2
注2： 这些行为代码中有几个通常是处理Squid代理缓存的内部行为，因此其他使用了Squid日志格式的代
理并没有使用全部的代码。
日志记录与使用情况跟踪 ｜ 513
表21-9 Squid结果代码
行 为 描 述
TCP_HIT 资源的有效副本是由缓存提供的
TCP_MISS 资源不在缓存中
TCP_REFRESH_HIT 资源在缓存中，但需要进行新鲜性检查。代理与服务器再次验证了资源，
发现缓存中的副本确实还是新鲜的
TCP_REF_FAIL_HIT 资源在缓存中，但需要进行新鲜性检查。但再验证失败了（可能是代理无
法连接到服务器），因此返回的是“过期”的资源
TCP_REFRESH_MISS 资源在缓存中，但需要进行新鲜性检查。在与服务器进行验证的时候，代
理得知缓存中的资源过期了，并收到一个新的副本
TCP_CLIENT_REFRESH_ 请求端发送了一个Pragma: no-cache，或类似的Cache-Control指
MISS 令，命令代理必须去获取资源
TCP_IMS_HIT 请求端发布了一个条件请求，对资源的已缓存副本进行验证
TCP_SWAPFAIL_MISS 代理认为资源位于缓存中，但出于某些原因无法访问该资源
TCP_NEGATIVE_HIT 返回已缓存的响应，但响应是否定的已缓存响应。Squid支持对资源错误信
息的缓存（比如，缓存404 Not Found响应）。这样，如果有多条对某无效
资源的请求都经过这个代理缓存，就可以由这个代理缓存提供错误信息
TCP_MEM_HIT 资源的有效副本是由缓存提供的，资源位于代理缓存的内存中（与必须访
问磁盘才能获取已缓存资源的方式相反）
TCP_DENIED 对此资源的请求被否决了，可能是请求端没有请求此资源的权利
TCP_OFFLINE_HIT 所请求的资源是在离线状态下从缓存中解析出来的。Squid（或另一个使用
此格式的代理）处于离线模式时，资源是未经验证的
UDP_* UDP_*代码说明请求是通过到代理的UDP接口收到的。HTTP通常会使用
491 TCP传输协议，因此这些请求使用的都不是HTTP协议a
UDP_HIT 资源的有效副本是由缓存提供的
UDP_MISS 资源不在缓存中
UDP_DENIED 对此资源的请求被否决了，可能是由于请求端没有请求此资源的权限
UDP_INVALID 代理收到的请求是无效的
UDP_MISS_NOFETCH Squid在特定的操作模式下，或在缓存常见错误的缓存中使用。会返回缓存
未命中，而且也没有获得资源
NONE 有时与错误信息一起记录
TCP_CLIENT_REFRESH 参见TCP_CLIENT_REFRESH_MISS
TCP_SWAPFAIL 参见TCP_SWAPFAIL_MISS
UDP_RELOADING 参见UDP_MISS_NOFETCH
a： Squid有自己的用于发起这些请求的协议：ICP。这是缓存到缓存的请求所使用的协议。更多信息请参
见http://www.squid-cache.org。
514 ｜ 第21章
21.3 命中率测量
原始服务器通常会出于计费的目的保留详细的日志记录。内容提供者需要知道
URL的受访频率，广告商需要知道广告的出现频率，网站作者需要知道所编写的
内容的受欢迎程度。客户端直接访问Web服务器时，日志记录可以很好地跟踪这
些信息。
但是，缓存服务器位于客户端和服务器之间，用于防止服务器同时处理大量访问请
求3（这正是缓存的目的）。缓存要处理很多HTTP请求，并在不访问原始服务器的
情况下满足它们的请求，服务器中没有客户端访问其内容的记录，导致日志文件中
出现遗漏。
由于日志数据会遗失，所以，内容提供者会对其最重要的页面进行缓存清除（cache
bust）。缓存清除是指内容提供者有意将某些内容设置为无法缓存，这样，所有对此
内容的请求都会被导向原始服务器。4于是，原始服务器就可以记录下访问情况了。
不使用缓存可能会生成更好的日志，但会减缓原始服务器和网络的请求速度，并增
加其负荷。
由于代理缓存（及一些客户端）都会保留自己的日志，所以如果服务器能够访问这
些日志（或者至少有一种粗略的方式可以判断代理缓存会以怎样的频率提供其内
容），就可以避免使用缓存清除。命中率测量协议是对HTTP的一种扩展，它为这个
问题提供了一种解决方案。命中率测量协议要求缓存周期性地向原始服务器汇报缓
存访问的统计数据。 492
RFC 2227详细定义了命中率测量协议。本节将详细介绍此协议。
21.3.1 概述
命中率测量协议定义了一种HTTP扩展，它提供了一些基本的功能，缓存和服务器
可以实现这些功能来共享访问信息，规范已缓存资源的可使用次数。
缓存给日志访问带来了问题，命中率测量并不是这个问题的完整解决方案，但它确
实提供了一种基本方式，以获取服务器希望跟踪的度量值。命中率测量协议并没有
（而且可能永远都不会）得到广泛的实现或应用。也就是说，在维护缓存性能增益的
同时，像命中率测量这样的合作方案会给出一些提供精确访问统计信息的承诺。希
望这会推动命中率测量协议的实现，而不是把内容标记为不可缓存的。
注3：回想一下，几乎每个浏览器都会有一个缓存。
注4：第7章说明了怎样将HTTP响应标记为不可缓存的。
日志记录与使用情况跟踪 ｜ 515
21.3.2 Meter首部
命中率测量扩展建议使用新增加的首部Meter，缓存和服务器可以通过它在相互间
传输与用法和报告有关的指令，这与用来进行缓存指令交换的Cache-Control首
部很类似。
表21-10列出了定义的各种指令和谁可以在Meter首部传输这些指令。
表21-10 命中率测量指令
指 令 缩 写 执 行 者 描 述
will-report-and-limit w 缓存 缓存可以报告使用情况并遵循服务器指定的所有使
用限制
wont-report x 缓存 缓存可以遵循使用限制，但不报告使用情况
wont-limit y 缓存 缓存可以报告使用情况但不会限制使用
count c 缓存 报告指令，以uses/reuses整数的形式说明。比
如：count=2/4 a
max-uses u 服务器 允许服务器指定某响应可被缓存使用的最大次数。
比如：max-uses=100
max-reuses r 服务器 允许服务器指定某响应可被缓存重用的最大次数。
比如：max-reuses=100
do-report d 服务器 服务器要求代理发送使用报告
dont-report e 服务器 服务器不要求使用汇报
timeout t 服务器 允许服务器指定对某资源进行计量的超时时间。缓
存应该在指定的超时时间，或在此时间之前发送报
告，允许有1分钟的误差。超时是以分钟为单位
的。比如：timeout=60
493 wont-ask n 服务器 服务器不需要任何计量信息
a：命中率测量定义了一个use，用一个响应来满足请求，还定义了一个reuse，对客户端请求进行再验证。
图21-1给出了一个执行中的命中率测量实例。事务的第一部分就是客户端和代理缓
存之间一个普通的HTTP事务，但在代理请求中，要注意有插入的Meter首部和来
自服务器的响应。这里，代理正在通知服务器它可以进行命中率测量，作为回应，
服务器则请求代理报告它的命中次数。
从客户端的角度来看，请求正常结束了，代理开始代表服务器跟踪该请求资源的命
中次数。稍后，代理会尝试与服务器再次验证资源。代理会在发送给服务器的条件
请求中嵌入它跟踪记录的计量信息。
516 ｜ 第21章
请求报文
GET http://joes-hardware.com/ HTTP/1.1 GET / HTTP/1.1
Host: www.joes-hardware.com Host: www.joes-hardware.com
Accept: * Meter: will-report-and-limit
客户端 Connection: Meter
代理
www.joes-hardware.com
响应报文
HTTP/1.1 200 OK
代理 Date: Fri, 06 Dec 1996 18:44:29 GMT
将响应发送给客户端，缓存 Content-length: 3152
起来，然后用于后继的请求 Content-type: text/html
客户端 Connection: Meter
HTTP/1.1 200 OK ETag: "v1.27"
Date: Fri, 06 Dec 1996 18:44:29 GMT Meter: do-report
Content-length: 3152
Content-type: text/html [...]
[...]
稍后，缓存对响应进行再
代理
验证，同时报告命中次数
GET / HTTP/1.1
Host: www.joes-hardware.com
Meter: 12/4
If-None-Match: "v1.27"
Connection: Meter
www.joes-hardware.com
HTTP/1.1 304 Not Modified
[...]
图21-1 命中率测量示例 494
21.4 关于隐私的考虑
日志记录实际上就是服务器和代理执行的一项管理功能，所以整个操作对用户来说
都是透明的。通常，用户甚至都不清楚他们的HTTP事务已被记录——实际上，很
多用户可能甚至都不知道他们访问Web上的内容时是在使用HTTP协议。
Web应用程序的开发者和管理者要清楚跟踪用户的HTTP事务可能带来的影响。他
可以根据获取的信息收集很多有关用户的情况。很显然，这些信息可以用于不良目
的——歧视、骚扰、勒索等。进行日志记录的Web服务器和代理一定要注意保护其
终端用户的隐私。
日志记录与使用情况跟踪 ｜ 517
有些情况下，比如在工作环境中，跟踪某用户的使用情况以确保他没有偷懒是可行
的，但管理员也应该将监视大家事务处理的事情公之于众。
简单来说，日志记录对管理者和开发者来说都是很有用的工具。只是要清楚在没有
获得用户许可，或在其不知情的情况下，使用记录其行为的日志可能会存在侵犯隐
私的问题。
21.5 更多信息
更多有关日志记录的信息，请参见以下资源。
• http://httpd.apache.org/docs/logs.html
“Apache HTTP Server: Log Files”（“Apache HTTP服务器：日志文件”）。Apache
HTTP服务器项目网站。
• http://www.squid-cache.org/Doc/FAQ/FAQ-6.html
“Squid Log Files”（“Squid日志文件”）。Squid代理缓存网站。
• http://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format
“Logging Control in W3C httpd”（“W3C httpd中的日志记录控制”）。
• http://www.w3.org/TR/WD-logfile.html
“Extended Log File Format”（“扩展日志文件格式”）。
• http://www.ietf.org/rfc/rfc2227.txt
RFC 2227，J. Mogul 和 P. Leach 编 写 的“Simple Hit-Metering and Usage-
495 Limiting for HTTP”（“简单的HTTP命中率测量和使用限制”）。
518 ｜ 第21章
第六部分
附 录
本书附录集中包含了一些有用的参考表格、背景信息以及关于HTTP结构和实现各
种主题的指南。
• 附录A URI方案
• 附录B HTTP状态码
• 附录C HTTP首部参考
• 附录D MIME类型
• 附录E Base-64编码
• 附录F 摘要认证
• 附录G 语言标记 496
~
• 附录H MIME字符集注册表 498