### 优化后的文本

#### 21.2 Squid日志格式

##### 21.2.1 字段说明

- **hierarchy/from**：与网景格式中的`route`字段类似，`hierarchy`字段描述了代理向客户端发送请求时所经过的路径。`efrom`字段则指明了代理用来发起请求的服务器名称。
- **content-type**：此字段表示代理响应实体的`Content-Type`。

回顾第2章，代理通常会记录整个请求URL。因此，如果URL中包含用户名和密码组件，这些信息可能会被无意间记录下来。

在Squid 1.1版本中添加了`rfc931-ident`、`hierarchy/from`和`content-type`字段。早期版本中并没有这些字段。

RFC 931详细描述了这种认证方式中使用的`ident`查找方法。

更多关于有效的Squid层次代码，请参见 [http://squid.nlanr.net/Doc/FAQ/FAQ-6.html#ss6.6](http://squid.nlanr.net/Doc/FAQ/FAQ-6.html#ss6.6)。

以下是一个Squid日志条目的示例：

```
99823414 3001 209.1.32.44 TCP_MISS/200 4087 GET http://www.joes-hardware.com - DIRECT/proxy.com text/html
```

各字段的值如下所示：

| 字段 | 值 |
| --- | --- |
| timestamp | 99823414 |
| time-elapsed | 3001 |
| host-ip | 209.1.32.44 |
| action-code | TCP_MISS |
| status | 200 |
| size | 4087 |
| method | GET |
| URL | http://www.joes-hardware.com |
| RFC 931 ident | - |
| hierarchy | DIRECT |
| from | proxy.com |
| content-type | text/html |

注释：
- `DIRECT`：Squid的`hierarchy`值与网景日志格式中的`DIRECT route`值相同。

表21-9列出了各种Squid结果代码。需要注意的是，其中一些行为代码通常是处理Squid代理缓存内部行为的，因此其他使用Squid日志格式的代理可能不会使用全部代码。

##### 表21-9 Squid结果代码

| 行为 | 描述 |
| --- | --- |
| TCP_HIT | 资源的有效副本由缓存提供 |
| TCP_MISS | 资源不在缓存中 |
| TCP_REFRESH_HIT | 资源在缓存中，但需要进行新鲜性检查。代理与服务器再次验证资源，发现缓存中的副本仍然有效 |
| TCP_REF_FAIL_HIT | 资源在缓存中，但需要进行新鲜性检查。再验证失败（可能是代理无法连接到服务器），返回过期资源 |
| TCP_REFRESH_MISS | 资源在缓存中，但需要进行新鲜性检查。在与服务器验证时，代理得知缓存中的资源已过期，并收到新的副本 |
| TCP_CLIENT_REFRESH_MISS | 请求端发送了Pragma: no-cache或类似的Cache-Control指令，命令代理必须获取资源 |
| TCP_IMS_HIT | 请求端发布了一个条件请求，对资源的已缓存副本进行验证 |
| TCP_SWAPFAIL_MISS | 代理认为资源位于缓存中，但由于某些原因无法访问该资源 |
| TCP_NEGATIVE_HIT | 返回已缓存的否定响应。Squid支持对错误信息（如404 Not Found）的缓存 |
| TCP_MEM_HIT | 资源的有效副本由缓存提供，且资源位于代理缓存的内存中 |
| TCP_DENIED | 对此资源的请求被拒绝，可能是请求端没有请求此资源的权利 |
| TCP_OFFLINE_HIT | 所请求的资源是在离线状态下从缓存中解析出来的。Squid（或另一个使用此格式的代理）处于离线模式时，资源未经验证 |
| UDP_* | 这些代码说明请求是通过代理的UDP接口收到的。HTTP通常使用TCP传输协议，因此这些请求不是HTTP协议 |
| UDP_HIT | 资源的有效副本由缓存提供 |
| UDP_MISS | 资源不在缓存中 |
| UDP_DENIED | 对此资源的请求被拒绝，可能是由于请求端没有请求此资源的权限 |
| UDP_INVALID | 代理收到的请求无效 |
| UDP_MISS_NOFETCH | Squid在特定操作模式下使用，返回缓存未命中且未获取资源 |
| NONE | 有时与错误信息一起记录 |
| TCP_CLIENT_REFRESH | 参见TCP_CLIENT_REFRESH_MISS |
| TCP_SWAPFAIL | 参见TCP_SWAPFAIL_MISS |
| UDP_RELOADING | 参见UDP_MISS_NOFETCH |

注释：
- Squid有自己的用于发起这些请求的协议ICP，这是缓存到缓存请求所使用的协议。更多信息请参见[http://www.squid-cache.org](http://www.squid-cache.org)。

#### 21.3 命中率测量

原始服务器通常会为了计费而保留详细的日志记录。内容提供者需要知道URL的受访频率，广告商需要知道广告的出现频率，网站作者需要知道所编写内容的受欢迎程度。当客户端直接访问Web服务器时，日志记录可以很好地跟踪这些信息。

然而，缓存服务器位于客户端和服务器之间，防止服务器同时处理大量访问请求。缓存处理许多HTTP请求并在不访问原始服务器的情况下满足它们，导致服务器中没有客户端访问其内容的记录，从而在日志文件中出现遗漏。

由于日志数据丢失，内容提供者对其最重要的页面进行缓存清除（cache bust）。缓存清除是指内容提供者有意将某些内容设置为不可缓存，使所有对该内容的请求都导向原始服务器。这样，原始服务器就可以记录访问情况。

不使用缓存可能会生成更好的日志，但会减慢原始服务器和网络的请求速度，并增加其负载。由于代理缓存（及一些客户端）都会保留自己的日志，如果服务器能够访问这些日志（或者至少有一种粗略的方式可以判断代理缓存会以怎样的频率提供其内容），就可以避免使用缓存清除。命中率测量协议是对HTTP的一种扩展，它为此问题提供了一种解决方案。命中率测量协议要求缓存周期性地向原始服务器汇报缓存访问的统计数据。

##### 21.3.1 概述

命中率测量协议定义了一种HTTP扩展，提供了基本功能，使缓存和服务器可以共享访问信息并规范已缓存资源的可使用次数。虽然命中率测量并不是这个问题的完整解决方案，但它确实提供了一种基本方式来获取服务器希望跟踪的度量值。尽管命中率测量协议并未广泛实现或应用，但在维护缓存性能增益的同时，像命中率测量这样的合作方案可以提供精确的访问统计信息。希望这会推动命中率测量协议的实现，而不是把内容标记为不可缓存的。

注释：
- 几乎每个浏览器都有一个缓存。
- 第7章说明了如何将HTTP响应标记为不可缓存。

##### 21.3.2 Meter首部

命中率测量扩展建议使用新增的`Meter`首部，缓存和服务器可以通过它在相互间传输与用法和报告有关的指令，类似于用于缓存指令交换的`Cache-Control`首部。

表21-10列出了定义的各种指令及其执行者。

| 指令 | 缩写 | 执行者 | 描述 |
| --- | --- | --- | --- |
| will-report-and-limit | w | 缓存 | 缓存可以报告使用情况并遵循服务器指定的所有使用限制 |
| wont-report | x | 缓存 | 缓存可以遵循使用限制，但不报告使用情况 |
| wont-limit | y | 缓存 | 缓存可以报告使用情况但不会限制使用 |
| count | c | 缓存 | 报告指令，以uses/reuses整数的形式说明。例如：count=2/4 |
| max-uses | u | 服务器 | 允许服务器指定某响应可被缓存使用的最大次数。例如：max-uses=100 |
| max-reuses | r | 服务器 | 允许服务器指定某响应可被缓存重用的最大次数。例如：max-reuses=100 |
| do-report | d | 服务器 | 服务器要求代理发送使用报告 |
| dont-report | e | 服务器 | 服务器不要求使用汇报 |
| timeout | t | 服务器 | 允许服务器指定对某资源进行计量的超时时间。缓存应该在指定的超时时间或之前发送报告，允许有1分钟的误差。超时是以分钟为单位的。例如：timeout=60 |
| wont-ask | n | 服务器 | 服务器不需要任何计量信息 |

图21-1展示了一个执行中的命中率测量实例。事务的第一部分是客户端和代理缓存之间的普通HTTP事务，但在代理请求中插入了`Meter`首部，并收到了来自服务器的响应。这里，代理正在通知服务器它可以进行命中率测量，作为回应，服务器请求代理报告它的命中次数。

从客户端的角度来看，请求正常结束，代理开始代表服务器跟踪该请求资源的命中次数。稍后，代理会尝试与服务器重新验证资源，并在发送给服务器的条件请求中嵌入它跟踪记录的计量信息。

##### 图21-1 命中率测量示例

请求报文：
```
GET / HTTP/1.1
Host: www.joes-hardware.com
Accept: *
Meter: will-report-and-limit
Connection: Meter
```

响应报文：
```
HTTP/1.1 200 OK
Date: Fri, 06 Dec 1996 18:44:29 GMT
Content-length: 3152
Content-type: text/html
Connection: Meter
ETag: "v1.27"
Meter: do-report
```

稍后，缓存对响应进行再验证并报告命中次数：
```
GET / HTTP/1.1
Host: www.joes-hardware.com
Meter: 12/4
If-None-Match: "v1.27"
Connection: Meter
```

响应报文：
```
HTTP/1.1 304 Not Modified
```

#### 21.4 关于隐私的考虑

日志记录是一项管理功能，对用户来说是透明的。通常，用户甚至不知道他们的HTTP事务已被记录——实际上，很多用户可能甚至都不知道他们在访问Web上的内容时使用的是HTTP协议。

Web应用程序的开发者和管理者应清楚跟踪用户的HTTP事务可能带来的影响。他们可以根据获取的信息收集很多有关用户的情况。显然，这些信息可以用于不良目的——歧视、骚扰、勒索等。进行日志记录的Web服务器和代理一定要注意保护其终端用户的隐私。

在某些情况下，比如工作环境中，跟踪某用户的使用情况以确保他没有偷懒是可行的，但管理员也应公开告知大家事务处理的监视情况。

简而言之，日志记录对管理者和开发者来说都是有用的工具。只是要清楚，在没有获得用户许可或在其不知情的情况下，使用记录其行为的日志可能会存在侵犯隐私的问题。

#### 21.5 更多信息

更多有关日志记录的信息，请参见以下资源：
- [Apache HTTP Server: Log Files](http://httpd.apache.org/docs/logs.html)
- [Squid Log Files](http://www.squid-cache.org/Doc/FAQ/FAQ-6.html)
- [Logging Control in W3C httpd](http://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format)
- [Extended Log File Format](http://www.w3.org/TR/WD-logfile.html)
- [RFC 2227: Simple Hit-Metering and Usage-Limiting for HTTP](http://www.ietf.org/rfc/rfc2227.txt)

#### 第六部分 附录

本书附录集中包含了一些有用的参考表格、背景信息以及关于HTTP结构和实现各种主题的指南。

- 附录A URI方案
- 附录B HTTP状态码
- 附录C HTTP首部参考
- 附录D MIME类型
- 附录E Base-64编码
- 附录F 摘要认证
- 附录G 语言标记
- 附录H MIME字符集注册表