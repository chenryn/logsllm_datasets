## PostgreSQL结合余弦、线性相关算法 在文本、图片、数组相似 等领域的应用 - 3 rum, smlar应用场景分析  
##### [TAG 15](../class/15.md)
### 作者    
digoal      
### 日期      
2017-01-16           
### 标签     
PostgreSQL , 文本相似性分析 , tf , idf , tf-idf , tag , 相关性 , 余弦相关性 , 线性相关性 , 关键词 , tfidf向量 , rum , smlar , cosine              
----       
## 背景  
前面介绍了tf-idf算法，以及它在文本分析中的应用(提取关键词)，参考如下。  
[《文本(关键词)分析 - TF(Term Frequency 词频) IDF(Inverse Document Frequency 逆向文本频率)》](./20170116_02.md)   
[《PostgreSQL 与 tf-idf 文本相似算法》](./20170116_03.md)   
除了提取文章的关键词，另外一方面，比较两篇文本的相似性也是一个比较常见的应用，例如在搜索引擎中，比如，"Google新闻"在主新闻下方，还提供多条相似的新闻。  
![pic](20170116_04_pic_001.png)    
引自 http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html   
那么如何才能找到 "相似" 的文本呢？  
注意我这里必须要解释一下相似的几个不同场景，否则很容易误入魔道。  
1\. 打个比方，很多人写作文，会引用一些名人名句，那么这些引用了同样的名人名句的文章他们具有相似性吗？  
2\. 小时候估计很多小朋友都抄过作业，甚至有一些考试的时候，会出现一模一样的卷子，答案完全一致。他们相似吗？  
3\. 老师带小朋友出去春游，回来叫大伙写春游游记，大家写的内容可能大致上差不多，这些文章相似吗？  
其实以上三个问题，都是相似性问题，只是要找出他们，用到的方法可能不一样（或者说面向它们的算法可以不一样，以提升效率）。  
1\. 文章的部分内容相似，包含了一模一样的词句，这个其实是全文检索的范畴，比如我搜一下哪些文章用到了这些名人名句。  
在PostgreSQL中，我们可以使用tsvector, tsquery, gist/gin/rum索引来实现高效的全文检索  
[《PostgreSQL 全文检索加速 快到没有朋友 - RUM索引接口(潘多拉魔盒)》](../201610/20161019_01.md)    
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)  
[《聊一聊双十一背后的技术 - 分词和搜索》](../201611/20161115_01.md)    
[《聊一聊双十一背后的技术 - 毫秒分词算啥, 试试正则和相似度》](../201611/20161118_01.md)   
2\. 完全一致的文本，其实通过文本的HASH值上的b-tree或hash index，可以快速的搜索到。  
```  
postgres=# create table t1(id int, info text, hashval int);  
CREATE TABLE  
postgres=# create or replace function tg() returns trigger as $$  
declare  
begin  
  NEW.hashval := hashtext(NEW.info);  
  return NEW;    
end;  
$$ language plpgsql strict;  
postgres=# create trigger tg before insert or update on t1 for each row execute procedure tg();  
CREATE TRIGGER  
postgres=# insert into t1(id,info) values (1,'test');  
INSERT 0 1  
postgres=# select * from t1;  
 id | info |  hashval     
----+------+------------  
  1 | test | 1771415073  
(1 row)  
postgres=# update t1 set info='a';  
UPDATE 1  
postgres=# select * from t1;  
 id | info |  hashval     
----+------+------------  
  1 | a    | 1075015857  
(1 row)  
postgres=# create index idx on t1(hashval);  
CREATE INDEX  
```  
3\. 小朋友们写的春游游记，看起来肯定不一样，但是大家可能都会体现一些共同点，比如游玩中遇到的一些事情，看到的一些风景啥。  
如果使用TF-IDF算法来提取小朋友们的文章关键词，那么是不是可以通过文章关键词来对比不同文章的相似性呢？  
（建议TF使用相对频率（出现次数/全文总词组(计算重复值)数），避免因为文章长短带来的差异）  
所以第三个问题变成了关键词的相似性计算方法。  
我们首先来了解几种相似性算法。  
## 1 线性相关性  
1801年，意大利天文学家朱赛普·皮亚齐发现了第一颗小行星谷神星。  
经过40天的跟踪观测后，由于谷神星运行至太阳背后，使得皮亚齐失去了谷神星的位置。  
随后全世界的科学家利用皮亚齐的观测数据开始寻找谷神星，但是根据大多数人计算的结果来寻找谷神星都没有果。  
时年24岁的高斯也计算了谷神星的轨道。奥地利天文学家海因里希·奥尔伯斯根据高斯计算出来的轨道重新发现了谷神星。   
这是一个线性回归分析linear regression, 最小二乘法least-squares-fit的小故事。  
背景知识参考：  
https://en.wikipedia.org/wiki/Correlation_coefficient  
https://en.wikipedia.org/wiki/Correlation_and_dependence  
https://en.wikipedia.org/wiki/Coefficient_of_determination  
线性回归分析，除了用于天文，其实还有很多应用，比如金融预测，天气预报，疾病预测等。  
下面我给了一些在PostgreSQL中使用一元、多元回归的应用例子。  
[《用PostgreSQL了解一些统计学术语以及计算方法和表示方法 - 1》](../201503/20150303_02.md)    
[《PostgreSQL aggregate function 2 : Aggregate Functions for Statistics》](../201503/20150303_03.md)    
[《在PostgreSQL中用线性回归分析(linear regression) - 实现数据预测》](../201503/20150303_01.md)    
[《PostgreSQL 线性回归 - 股价预测 1》](../201503/20150304_01.md)    
[《在PostgreSQL中用线性回归分析linear regression做预测 - 例子2, 预测未来数日某股收盘价》](../201503/20150305_01.md)   
[《PostgreSQL 统计信息之 - 逻辑与物理存储的线性相关性》](../201502/20150228_01.md)    
[《PostgreSQL 计算 任意类型 字段之间的线性相关性》](../201604/20160403_01.md)    
那么线性回归和文本相似性分析有什么关系吗？  
我个人理解，它也可以用于计算两个相似tf-idf向量的相关性，通过相关性来判断他们的相似性。  
算出来的相关性越接近1，越相似。  
比如：  
```  
文本A关键词tf-idf向量(注意TF使用相对频率)  
[('中国', 0.7), ('崛起', 0.9), ('星球大战', 1.3), ('化学', 0.5)]  
文本B关键词tf-idf向量  
[('美国', 0.7), ('金融危机', 0.9), ('星球大战', 1.3), ('化学', 0.5)]  
```  
但是它们的关键词并不完全重叠，所以有两种修正方法。  
1\. 求相交关键词的相关性，同时使用加权进行修正（如通过相交集的分值占比，或者元素个数占比来加权）。  
相交线性相关计算的是以下两组值的线性相关性=1  
```  
('星球大战', 1.3), ('化学', 0.5) && ('星球大战', 1.3), ('化学', 0.5)  
```  
2\. 将两篇文章的关键词取并集，然后在对应的文本中继续取出其词语的tf-idf值，得到两组向量，再计算两组向量的相关性。  
例如  
```  
文本A  
('中国', 0.7), ('崛起', 0.9), ('星球大战', 1.3), ('化学', 0.5), ('美国', 0.0001), ('金融危机', 0)  
文本B  
('美国', 0.7), ('金融危机', 0.9), ('星球大战', 1.3), ('化学', 0.5), ('中国', 0), ('崛起', 0)  
按文本排序后取相关性  
('中国', 0.7), ('崛起', 0.9), ('星球大战', 1.3), ('化学', 0.5), ('美国', 0.0001), ('金融危机', 0)  
('中国', 0), ('崛起', 0), ('星球大战', 1.3), ('化学', 0.5), ('美国', 0.7), ('金融危机', 9)  
```  
SQL如下  
```  
postgres=# select corr(x,y) from (values (0.7,0),(0.9,0),(1.3,1.3),(0.5,0.5),(0.0001,0.7),(0,9)) t(x,y);  
        corr          
--------------------  
 -0.509740523766277  
(1 row)  
```  
3\. 如果你觉得并集的确实关键词的TF-IDF不好取，也可以用0直接代替缺失词的tf-idf。  
最简单的还是直接求交集的相关性，索引实现也比较简单，然后使用加权。  
## 2 文本的相似性算法 - TOP N 词汇tf-idf的余弦相似  
除了线性相关，还有一种方法计算文本相似性：余弦相似算法  
同样需要提取关键词的TF-IDF值向量，然后对两组相交向量进行计算，因此依旧需要通过相交集的分值占比，或者元素个数占比来加权进行修正。  
背景知识  
http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html  
http://en.wikipedia.org/wiki/Cosine_similarity  