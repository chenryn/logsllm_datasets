title:Lyra: A Cross-Platform Language and Compiler for Data Plane Programming
on Heterogeneous ASICs
author:Jiaqi Gao and
Ennan Zhai and
Hongqiang Harry Liu and
Rui Miao and
Yu Zhou and
Bingchuan Tian and
Chen Sun and
Dennis Cai and
Ming Zhang and
Minlan Yu
Lyra: A Cross-Platform Language and Compiler for Data Plane
Programming on Heterogeneous ASICs
Jiaqi Gao†§, Ennan Zhai†, Hongqiang Harry Liu†, Rui Miao†, Yu Zhou†⋄, Bingchuan Tian†★, Chen Sun†
†Alibaba Group
Dennis Cai†, Ming Zhang†, Minlan Yu§
⋄Tsinghua University
§Harvard University
★Nanjing University
ABSTRACT
Programmable data plane has been moving towards deployments
in data centers as mainstream vendors of switching ASICs enable
programmability in their newly launched products, such as Broad-
com’s Trident-4, Intel/Barefoot’s Tofino, and Cisco’s Silicon One.
However, current data plane programs are written in low-level,
chip-specific languages (e.g., P4 and NPL) and thus tightly cou-
pled to the chip-specific architecture. As a result, it is arduous and
error-prone to develop, maintain, and composite data plane pro-
grams in production networks. This paper presents Lyra, the first
cross-platform, high-level language & compiler system that aids the
programmers in programming data planes efficiently. Lyra offers a
one-big-pipeline abstraction that allows programmers to use simple
statements to express their intent, without laboriously taking care
of the details in hardware; Lyra also proposes a set of synthesis and
optimization techniques to automatically compile this “big-pipeline”
program into multiple pieces of runnable chip-specific code that
can be launched directly on the individual programmable switches
of the target network. We built and evaluated Lyra. Lyra not only
generates runnable real-world programs (in both P4 and NPL), but
also uses up to 87.5% fewer hardware resources and up to 78% fewer
lines of code than human-written programs.
CCS CONCEPTS
• Networks → Programmable networks; Programming inter-
faces; • Theory of computation → Abstraction;
KEYWORDS
Programmable switching ASIC; Programmable Networks; Program-
ming Language; Compiler; P4 Synthesis
ACM Reference Format:
Jiaqi Gao, Ennan Zhai, Hongqiang Harry Liu, Rui Miao, Yu Zhou, Bingchuan
Tian, Chen Sun, Dennis Cai, Ming Zhang, Minlan Yu . 2020. Lyra: A Cross-
Platform Language and Compiler for Data Plane Programming on Heteroge-
neous ASICs. In Annual conference of the ACM Special Interest Group on Data
Communication on the applications, technologies, architectures, and protocols
for computer communication (SIGCOMM ’20), August 10–14, 2020, Virtual
Event, NY, USA. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/
3387514.3405879
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7955-7/20/08...$15.00
https://doi.org/10.1145/3387514.3405879
1 INTRODUCTION
“C language lets you get close to the machine, without getting
tied up in the machine.”
— Dr. Brian Kernighan
Programmable network devices have gained significant traction in
the networking community, as a result of their powerful capability
allowing network programmers to customize the algorithms di-
rectly in the data plane and thus operate packets at the line rate. Peo-
ple have shown the tremendous benefits brought by the flexibility of
programmable network devices [38], e.g., load balancing [12, 27, 32],
network monitoring [2, 22, 35], consistency algorithms [24, 28], in-
network caching [25] and congestion control [29]. Currently, a
growing number of programmable switching ASICs (application-
specific integrated circuits) are being commercialized by main-
stream chip vendors. For example, Broadcom launched Trident-4
and Jericho-2 which are programmable by NPL [1], whereas In-
tel/Barefoot’s Tofino [6] and Cisco’s Silicon One [4] support P4
programming [15].
Despite the bloom of programmable network devices and pro-
gramming languages, the foundation of network programming on
data plane is still at an early stage—network programmers are still
using chip-specific languages and manually take care of numerous
details with hardware features, hardware capacities, and network
environments when developing data plane algorithms, comparably
similar to the era when software engineers use assembly languages
to write software on CPUs (central processing units). As a result,
the manageability of data plane programs is still unready for large
scale deployments and operations.
Specifically, there are three major problems faced by network
programmers nowadays with chip-specific languages.
Portability. First of all, current data plane programs have poor
portability because they are tightly coupled with specific ASIC
models from specific vendors. For instance, even for the same ven-
dor, a program running on Barefoot Tofino 32Q does not necessarily
run automatically on Tofino 64Q due to the varying numbers of
march-action units and different memory resources; not to men-
tion the migration from Barefoot Tofino to Broadcom Trident-4
which has totally different pipeline design and chip-specific lan-
guage. Therefore, network programmers are required to be not only
proficient in all the languages involved, but also knowledgeable
about the various pipeline architectures and resource constraints
of the different programmable ASICs.
Extensibility. Second, low-level languages focus on programming
individual ASICs, while there are data plane programs that require
to execute on multiple ASICs in a distributed way. For example, INT
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Gao et al.
(in-band network telemetry) [2] has different roles for ingress, tran-
sit, and egress switches; middle-boxes, e.g., load balancer (LB) [32],
can also collectively use table resources in multiple switches for
accommodating large-scale workloads. However, nowadays, net-
work programmers have to individually program each switch’s data
plane with its own low-level chip language because a high-level,
network-wide abstraction for the data plane programming does not
currently exist yet.
Composition. Last but not least, a practical deployment of pro-
grammable data plane must have multiple programs enabled. For
instance, a data center network might want both INT, LB, and
scheduler co-existed in the data plane. One particular combination
of programs can lead to a complete restructure of each individual
program and their deployment arrangements because of the con-
siderations on the details of switch capability, network topology,
and so forth. The whole process is arduous and error-prone.
We believe the fundamental reason for the above problems in the
state-of-the-art data plane programming is the lack of a high-level
language. In this paper, we present Lyra—a language & compiler
system for programmable data center networks (DCNs)—that fa-
cilitates data plane programs to achieve portability, extensibility,
and composition simultaneously.1 Lyra language offers a one-big-
pipeline abstraction to network programmers, and the latter can
flexibly express the logic of their programs in a chip-neutral and
target-agnostic way; Lyra compiler compiles the Lyra program into
multiple pieces of runnable chip-specific code that can be launched
directly on the programmable switches of the target network, elim-
inating the need for engineer proficiency in any chip-specific ar-
chitectures and languages involved.
Lyra language. Different from the existing high-level abstractions
on control plane programming that focuses on packet forward-
ing [13, 14, 19, 31, 34], Lyra’s goal is to provide a high-level ab-
straction for data plane programming to express packet processing
logics, such as packet header write and arithmetic operations.
Lyra language offers a one-big-pipeline programming abstraction
that is simple and expressive for directly describing how packets
with different characters will be processed along a chain of algo-
rithms. Each algorithm is a tree-like procedure that defines the
packet processing logics with if-else statements and simple read,
write and arithmetic operations to packets. With this language, net-
work programmers can directly express packet process procedures
without worrying about how the underneath switches realize the
logics, e.g., using multiple tables to implement an if-else statement
or using one table to implement multiple if-else statements.
Lyra language also offers a critical ability to specify an algorithm
scope that explicitly defines the scope of candidate switches an
algorithm to be deployed into. For example, network programmers
may wish to deploy a stateful load balancer merely on ToR (top-
of-rack) switches. This feature provides an essential ability for
programmers to guide the final compilation and deployments with
high-level intents.
Lyra compiler. The core task of the Lyra compiler is to combine
the high-level Lyra program, algorithm scopes, network topology,
1We focus on programmable DCNs in this work, but we believe Lyra is easily extendable
to more scenarios such as programmable WANs.
and the low-level details of ASICs to generate correct and runnable
chip-specific code in the target network.
Different from prior works [14, 26, 41] that focus on resource
allocations with integer linear programming (ILP), Lyra faces more
complex scenarios due to conditional feature constraints, which
cannot be encoded with ILP, under the heterogeneity of ASICs.
For instance, if the address resolution protocol learning function is
deployed on an NPL/Trident-4 switch, we only need one table for
lookup, but the P4/Tofino switch requires more than two tables.
The key methodology of the Lyra compiler is to encode all logics
and constraints into an SMT (satisfiability modulo theories) prob-
lem and use an SMT solver to find the best implementation and
deployment strategy of a given Lyra program in the target network.
Lyra takes three steps to achieve this goal. First, Lyra translates
the Lyra program into a context-aware intermediate representation
(or context-aware IR), with important context information such
as instruction dependency and deployment constraints. Second,
Lyra synthesizes conditional language-specific implementations for
each algorithm based on its context-aware IR. Lyra puts the syn-
thesized conditional language-specific implementations into the
corresponding switches, and uses a logical formula to restrict that
there will be only one implementation exist of each algorithm in
the final solution. We design effective algorithms to solve the major
challenge at this step, which is the generation of language-specific
tables and their actions based on the dependencies of statements
written in Lyra language (§5.2 and §5.3). Finally, Lyra constructs an
SMT formula that encodes all resource and placement constraints
to decide the chip-specific implementation and placement of all
algorithms simultaneously. If an algorithm cannot be placed into a
single switch due to a lack of enough resources, Lyra can split it
into smaller ones and put them into multiple switches. The major
challenge here is to understand the resource allocation behaviors of
different ASICs and encode them into the SMT formula (§5.4-§5.5).
Evaluation. We have built Lyra and evaluated its effectiveness on
a variety of real-world programs. Lyra not only generated runnable
real-world programs (in both P4 and NPL), but also used up to 87.5%
fewer hardware resources and up to 78% fewer lines of code than
human-written programs.
2 OVERVIEW
As the major switch vendors, e.g., Broadcom, Cisco, Intel/Barefoot,
etc., embrace programmable data plane with their new mainstream
ASIC products for DCNs, the revolution towards programmable
DCNs has already started.
However, despite that programmability on data plane offers pro-
grammers tremendous opportunities to customize network features
or offload computations to networks, one crucial requirement to
deploy and operate a programmable DCN is how to maintain the
manageability at least on the same level as current DCNs. With-
out meeting this need, the adoption of programmable DCN would
significantly slow down or even never happen in the worst case.
As one of the largest global service providers, Alibaba is already
focusing on the challenge to develop, maintain, and composite data
plane programs in realistic DCNs with heterogeneous ASICs. In
fact, DCNs are always heterogeneous in switch vendors and ASIC
types for two reasons. First, network operators need to prevent
the “vendor lock-in” problem [30, 36], so they intentionally use
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
table check_src_ip {
logical_table check_ip {
action enable_int() {
enable_int = 1;
table_type:hash;
min_size:1024;
max_size:1024;
keys { bit[32] ip; }
key_construct() {
Figure 1: Motivating example. The network programmers deploy INT across the entire network, and stateful load balancer on
Agg 3, Agg 4, ToR 3 and ToR 4.
different vendors in their networks and require the equipment from
these vendors to be replaced transparently to their management
plane and applications. Second, different ASICs have distinctive
trade-offs among programmability, throughput, buffer size, and
cost, due to the physical limitations in chip manufacture. Differ-
ent layers of DCNs, therefore, adopt different types of ASICs. For
example, ToR switches may use high-programmability ASICs (e.g.,
Barefoot Tofino and Broadcom Trident-4) for near-server computa-
tion offloading, while core switches employ high-throughput but
less programmable ASICs, e.g., Broadcom Tomahawk.
2.1 Motivation
Similar to control plane software, data plane programs also need to
be continuously upgraded for bugs fixing or introductions of new
features; Different data plane programs still have to co-exist inside
one DCN, and each program should be added or deleted as well.
Nonetheless, the current practice of data plane programming with
chip-specific languages can hardly achieve the above requirements,
especially under the heterogeneity of ASICs. Concretely, there are
critical problems resulting from low-level programming languages,
as we will explain with a simplified but realistic example.
reads {ipv4.dst_ip:exact;}
actions {enable_int;}
size: 1024;
reads {ipv4.src_ip:exact;}
actions {enable_int;}
size: 1024;
Figure 2: Flow filter: P4 V.S. NPL.
apply(check_src_ip);
apply(check_dst_ip);
check_ip.lookup(0);
check_ip.lookup(1);
}
fields_assign() {
if(_LOOKUP0)