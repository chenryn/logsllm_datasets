### 成员权限与隐私保护
成员无法获取最敏感的公司计划文档。我们的私人Web通信，包括与孩子、配偶及暗恋对象的交流，都在一定程度上受到隐私保护，以确保信息安全。

### 服务器认证过程
服务器需要通过某种方式了解用户身份，以便判定其可访问的事务和资源。认证即证明用户的身份，通常通过提供用户名和密码来完成。HTTP为认证提供了一种原生工具。虽然可以在HTTP的认证形式和cookie基础上开发自己的认证系统，但在许多情况下，HTTP自带的认证功能已足够满足需求。
本章将探讨HTTP的认证机制，重点介绍最常见的基本认证（Basic Authentication）。下一章节则会讨论更为先进的摘要认证（Digest Authentication）技术。

#### 12.1 认证简介
认证意味着提供身份证明。例如，在展示带有照片的身份证件时，就是在提供自己身份的证据。在自动取款机输入PIN码或在计算机系统的对话框中输入密码，也是为了证明身份。然而，这些方法并非绝对安全：密码可能被猜测或窃听，证件可能被盗或伪造。尽管如此，它们仍有助于构建合理的信任关系。

##### 12.1.1 HTTP质询/响应认证框架
HTTP 提供了一个原生的质询/响应（Challenge/Response）框架，简化了用户的认证过程。当Web应用程序收到一条HTTP请求报文时，服务器不会立即执行该请求，而是返回一个“认证质询”，要求用户提供保密信息以验证身份。用户再次发起请求时需附上保密证书（用户名和密码）。如果证书匹配，则请求正常完成；否则，服务器将继续质询或返回错误信息。

![图12-1 简化的质询/响应认证框架](http://example.com/image.png)

##### 12.1.2 认证协议与首部
HTTP使用一组可定制的控制首部为不同的认证协议提供了扩展框架。表12-1列出了根据认证协议变化的首部格式和内容。认证协议同样在HTTP认证首部中指定。HTTP定义了两种官方认证协议：基本认证和摘要认证。未来可能会设计出更多基于HTTP质询/响应框架的新协议。本章其余部分将详细解释基本认证机制，而摘要认证将在第13章中讨论。

| 步骤 | 首部 | 描述 | 方法/状态 |
|---|---|---|---|
| 请求 | - | 第一条请求没有认证信息 | GET |
| 质询 | WWW-Authenticate | 服务器用401状态拒绝请求，说明需要用户名和密码 | 401 Unauthorized |
| 授权 | Authorization | 客户端重新发送请求，并附加认证算法、用户名和密码 | GET |
| 成功 | Authentication-Info | 如果授权证书正确，服务器返回文档，有些认证算法会在Authentication-Info首部返回附加信息 | 200 OK |

##### 12.1.3 安全域
在深入讨论基本认证之前，我们需要理解HTTP如何允许服务器对不同资源设置不同的访问权限。图12-2b中的WWW-Authenticate质询包含了一个realm指令。Web服务器会将受保护的文档组织成安全域，每个安全域可以有不同的授权用户集。例如，假设Web服务器设置了两个安全域：一个用于公司的财务信息，另一个用于个人家庭文档。不同的用户对各个安全域的访问权限是不同的。公司的CEO应能访问销售额预测资料，但不应访问员工及其家人的度假照片。

![图12-3 Web服务器上的安全域](http://example.com/image.png)

#### 12.2 基本认证
基本认证是最流行的HTTP认证协议，几乎所有主要客户端和服务器都实现了这一机制。它最初在HTTP/1.0规范中提出，后来移至RFC 2617中进行详细描述。在基本认证中，Web服务器可以拒绝一个事务，质询客户端并要求用户提供有效的用户名和密码。服务器返回401状态码并用WWW-Authenticate响应首部指定要访问的安全域。浏览器收到质询后，会打开一个对话框请求用户输入该域的用户名和密码。然后将用户名和密码稍加编码，再用Authorization请求首部回送给服务器。

##### 12.2.1 基本认证实例
图12-2展示了详细的基本认证流程：
- 在图12-2a中，用户请求了私人家庭相片/family/jeff.jpg。
- 在图12-2b中，服务器返回401 Authorization Required，对私人家庭相片进行密码质询，并附带WWW-Authenticate首部。
- 在图12-2c中，浏览器弹出对话框询问Family域的用户名和密码。用户输入后，浏览器将用户名和密码连接起来，编码成Base-64格式，并放在Authorization首部中回送。
- 在图12-2d中，服务器解码用户名和密码，验证其正确性，并用HTTP 200 OK报文返回所请求的内容。

| 质询/响应 | 首部语法及描述 |
|---|---|
| 质询 (服务器发往客户端) | `WWW-Authenticate: Basic realm=quoted-realm` |
| 响应 (客户端发往服务器) | `Authorization: Basic base64-username-and-password` |

##### 12.2.2 Base-64 编码用户名/密码
HTTP基本认证将用户名和密码打包在一起，并用Base-64编码方式进行编码。Base-64编码将8位字节序列划分为6位块，并从特殊字符表中选择一个字符。这个字符表包含了大部分字母和数字。图12-4显示了使用Base-64编码的基本认证实例。

![图12-4 从用户名和密码生成基本认证首部](http://example.com/image.png)

##### 12.2.3 代理认证
中间的代理服务器也可以实现认证功能。一些组织会在用户访问服务器、LAN或无线网络前，用代理服务器对其进行认证。通过代理服务器提供对某组织内部资源的统一访问控制是一种便捷的方式。代理认证的过程与Web服务器身份验证类似，但使用的首部和状态码有所不同。表12-3列出了Web服务器和代理在认证中使用的状态码和首部差异。

| Web服务器 | 代理服务器 |
|---|---|
| 401 Unauthorized | 407 Proxy Authentication Required |
| WWW-Authenticate | Proxy-Authenticate |
| Authorization | Proxy-Authorization |
| Authentication-Info | Proxy-Authentication-Info |

#### 12.3 基本认证的安全缺陷
虽然基本认证简单便捷，但存在以下安全缺陷：
1. **明文传输**：基本认证通过网络发送用户名和密码，这些信息是以容易解码的形式表示的。实际上，密码是以明文形式传输的，任何人都可以读取并捕获。虽然Base-64编码隐藏了用户名和密码，但它很容易被反向解码。因此，建议通过SSL加密信道发送所有HTTP事务，或使用更安全的认证协议如摘要认证。
2. **重放攻击**：即使密码经过加密，第三方用户仍可以捕获修改后的用户名和密码，并多次重放给原始服务器以获得访问权。目前没有措施可以防止这种重放攻击。
3. **不良习惯**：即使基本认证用于不太重要的应用，如公司内部网络的访问控制或个性化内容的访问，一些不良习惯也会使其变得危险。许多用户因厌烦频繁输入密码而采用简单的密码，增加了安全风险。