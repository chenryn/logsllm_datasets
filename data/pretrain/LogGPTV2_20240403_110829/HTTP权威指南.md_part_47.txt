的成员无法获取那些最敏感的公司计划文档。我们与孩子、配偶以及暗恋对象的私
人Web通信都是在带有些许隐私保护的情况下进行的，这样我们才能放心。
服务器需要通过某种方式来了解用户身份。一旦服务器知道了用户身份，就可以判
定用户可以访问的事务和资源了。认证就意味着要证明你是谁。通常是通过提供
用户名和密码来进行认证的。HTTP为认证提供了一种原生工具。尽管我们可以在
HTTP的认证形式和cookie基础之上“运行自己的”认证工具，但在很多情况下，
HTTP的原生认证功能就可以很好地满足要求。
本章阐述了HTTP的认证机制，深入介绍了最常见的HTTP认证形式，基本认证
（basic authentication）。下一章将介绍一种称为摘要认证（digest authentication）的
功能更强的认证技术。
12.1 认证
认证就是要给出一些身份证明。当出示像护照或驾照那样有照片的身份证件时，就
给出了一些证据，说明你就是你所声称的那个人。在自动取款机上输入PIN码，或
277 在计算机系统的对话框中输入了密码时，也是在证明你就是你所声称的那个人。
现在，这些策略都不是绝对有效的。密码可以被猜出来或被人偶然听到，身份证件
可能被偷去或被伪造，但每种证据都有助于构建合理的信任，说明你就是你所声称
的那个人。
12.1.1 HTTP的质询/响应认证框架
HTTP提供了一个原生的质询/响应（challenge/response）框架，简化了对用户的认
证过程。HTTP的认证模型如图12-1中所示。
Web应用程序收到一条HTTP请求报文时，服务器没有按照请求执行动作，而是以
一个“认证质询”进行响应，要求用户提供一些保密信息来说明他是谁，从而对其
进行质询。
用户再次发起请求时，要附上保密证书（用户名和密码）。如果证书不匹配，服务器
可以再次质询客户端，或产生一条错误信息。如果证书匹配，就可以正常完成请求了。
294 ｜ 第12章
请求 因特网 请把内部销售预测文档发给我。
客户端 服务器
质询 你请求的是保密的财务文档。
因特网
请告知你的用户名和密码。
服务器
(请求用户输入密码)
认证 请把内部的销售预算文档发给我。
因特网
这是我的用户名和密码：“******”。
服务器
成功
因特网 好的。你有访问权限。这是文档。
客户端 服务器
图12-1 简化的质询/响应认证框架
12.1.2 认证协议与首部
HTTP通过一组可定制的控制首部，为不同的认证协议提供了一个可扩展框架。表
12-1列出的首部格式和内容会随认证协议的不同而发生变化。认证协议也是在
HTTP认证首部中指定的。 278
HTTP定义了两个官方的认证协议：基本认证和摘要认证。今后人们可以随意设计
一些使用HTTP质询/响应框架的新协议。本章的其余部分将解释基本认证机制。
摘要认证的细节请参见第13章。
表12-1 认证的4个步骤
步骤 首 部 描 述 方法/状态
请求 第一条请求没有认证信息 GET
质询 WWW-Authenticate 服务器用401状态拒绝了请求，说明需要用 401 Unauthorized
户提供用户名和密码。
服务器上可能会分为不同的区域，每个区
域都有自己的密码，所以服务器会在WWW-
Authenticate首部对保护区域进行描述。
同样，认证算法也是在WWW-Authenticate
首部中指定的
基本认证机制 ｜ 295
（续）
步骤 首 部 描 述 方法/状态
授权 Authorization 客户端重新发出请求，但这一次会附加一个 GET
Authorization首部，用来说明认证算法、
用户名和密码
成功 Authentication-Info 如果授权证书是正确的，服务器就会将 200 OK
文档返回。有些授权算法会在可选的
Authentication-Info首部返回一些与授
权会话相关的附加信息
为了具体地说明这个问题，我们来看看图12-2。
客户端 服务器
GET /family/jeff.jpg HTTP/1.0 (a)
(b) HTTP/1.0 401 Authorization Required
WWW-Authenticate: Basic realm="Family"
GET /family/jeff.jpg HTTP/1.0 (c)
Authorization: Basic YnJpYW4tdG90dHk6T3ch
HTTP/1.0 200 OK
(d) Content-type: image/jpeg
...
图12-2 基本认证实例
服务器对用户进行质询时，会返回一条401 Unauthorized响应，并在WWW-Authenticate
279 首部说明如何以及在哪里进行认证（参见图12-2b）。
当客户端授权服务器继续处理时，会重新发送请求，但会在Authorization首部
附上加密的密码和其他一些认证参数（参见图12-2c）。
授权请求成功完成时，服务器会返回一个正常的状态码（比如，200 OK）；对高级
认证算法来说，可能还会在Authentication-Info首部附加一些额外的信息（参
见图12-2d）。
12.1.3 安全域
在对基本认证的细节进行讨论之前，需要解释一下HTTP是怎样允许服务器为
296 ｜ 第12章
不同的资源使用不同的访问权限的。你可能已经注意到了，图 12-2b 的 WWW-
Authenticate质询中包含了一个realm指令。Web服务器会将受保护的文档组织
成一个安全域（security realm）。每个安全域都可以有不同的授权用户集。
比如，假设Web服务器建立了两个安全域：一个用于公司的财务信息，另一个用
于个人家庭文档（参见图12-3）。不同的用户对各个安全域的访问权限是不同的。
公司的CEO应该能够访问销售额预测资料，但不应该允许他访问员工和其家人度
假的照片！
/
家庭域
corporate index.html family
press financials jeff.jpg brian.jpg
服务器
pr1.html pr2.html sales-forecast.xls
公司财务域
图12-3 Web服务器上的安全域
下面是一个假想的基本认证质询，它指定了一个域：
HTTP/1.0 401 Unauthorized
WWW-Authenticate: Basic realm="Corporate Financials"
域应该有一个描述性的字符名，比如Corporate Financials（公司财务资料），以帮助
用户了解应该使用哪个用户名和密码。在安全域的名称中列出服务器主机名也是很
有帮助的——比如，PI:EMAIL。 280
12.2 基本认证
基本认证是最流行的HTTP认证协议。几乎每个主要的客户端和服务器都实现了
基本认证机制。基本认证最初是在HTTP/1.0规范中提出的，但此后被移到了RFC
2617中，它详细介绍了HTTP的认证机制。
在基本认证中，Web服务器可以拒绝一个事务，质询客户端，请用户提供有效的用
户名和密码。服务器会返回401状态码，而不是200状态码来初始化认证质询，并
基本认证机制 ｜ 297
用WWW-Authenticate响应首部指定要访问的安全域。浏览器收到质询时，会打开
一个对话框，请求用户输入这个域的用户名和密码。然后将用户名和密码稍加扰码，
再用Authorization请求首部回送给服务器。
12.2.1 基本认证实例
图12-2是一个详细的基本认证实例。
• 在图12-2a中，用户请求了私人家庭相片/family/jeff.jpg。
• 在图12-2b中，服务器回送一条401 Authorization Required，对私人家庭相片
进行密码质询，同时回送的还有WWW-Authenticate首部。这个首部请求对
Family域进行基本认证。
• 在图 12-2c 中，浏览器收到了 401 质询，弹出对话框，询问 Family 域的用
户名和密码。用户输入用户名和密码时，浏览器会用一个冒号将其连接起
来，编码成“经过扰码的”Base-64 表示形式（下节介绍），然后将其放在
Authorization首部中回送。
• 在图12-2d中，服务器对用户名和密码进行解码，验证它们的正确性，然后用一
条HTTP 200 OK报文返回所请求的报文。
表12-2总结了HTTP基本认证的WWW-Authenticate和Authorization首部。
表12-2 基本认证首部
质询/响应 首部语法及描述
质询（服务器发往 网站的不同部分可能有不同的密码。域就是一个引用字符串，用来命名所请求的
客户端） 文档集，这样用户就知道该使用哪个密码了：
WWW-Authenticate: Basic realm=quoted-realm
响应（客户端发往 用冒号（：）将用户名和密码连接起来，然后转换成Base-64编码，这样在用户
服务器） 名和密码中包含国际字符会稍微容易一些，也能尽量避免通过观察网络流量并只
进行一些粗略的检查就可以获取用户名和密码情况的发生：
281 Authorization: Basic base64-username-and-password
注意，基本认证协议并没有使用表12-1所示的Authentication-Info首部。
12.2.2 Base-64 用户名/密码编码
HTTP基本认证将（由冒号分隔的）用户名和密码打包在一起，并用Base-64编码
方式对其进行编码。如果不知道Base-64编码是什么意思，也不用担心。你并不需
要对它有太多的了解，如果对此感兴趣，可以在附录E中读到所有与之有关的内
容。简单来说，Base-64编码会将一个8位字节序列划分为一些6位的块。用每个6
298 ｜ 第12章
位的块在一个特殊的由64个字符组成的字母表中选择一个字符，这个字母表中包含
了大部分字母和数字。
图12-4显示了使用Base-64编码的基本认证实例。在这个例子中，用户名为brian-
totty，密码为 Ow!。浏览器用冒号将用户名和密码连接起来，生成一个打包字
符串 brian-totty:Ow!。然后对这个字符串进行 Base-64 编码，变成一串乱码：
YnJpYW4tdG90dHk6T3ch。
brian-totty
（a）提示用户输入用户名和密码
Ow!
brian-totty
（b）用冒号将用户名和密码连接起来 brian-totty:Ow!
Ow!
（c）Base-64编码 BASE64ENC(brian-totty:Ow!) YnJpYW4tdG90dHk6T3ch
（d）发送认证信息
客户端 服务器
GET /family/jeff.jpg HTTP/1.0
Authorization: Basic YnJpYW4tdG90dHk6T3ch
图12-4 从用户名和密码中生成一个基本认证首部
Base-64编码可以接受二进制字符串、文本、国际字符表示的数据（在某些系统中
会引发一些问题），将其暂时转换成一个易移植的字母表以便传输。然后，在远端就
可以解码出原始字符串，而无需担心传输错误了。
有些用户名和密码中会包含国际字符或其他在HTTP首部中非法的字符（比如引号、
冒号和回车换行符），对这些用户名和密码来说，Base-64编码是非常有用的。而
且，Base-64编码扰乱了用户名和密码，这样也可以防止管理员在管理服务器和网 282
络时，不小心看到用户名和密码。
12.2.3 代理认证
中间的代理服务器也可以实现认证功能。有些组织会在用户访问服务器、LAN或无
线网络之前，用代理服务器对其进行认证。可以在代理服务器上对访问策略进行集中
管理，因此，通过代理服务器提供对某组织内部资源的统一访问控制是一种很便捷的
基本认证机制 ｜ 299
方式。这个过程的第一步就是通过代理认证（proxy authentication）来识别身份。
代理认证的步骤与Web服务器身份验证的步骤相同。但首部和状态码都有所不同。
表12-3列出了Web服务器和代理在认证中使用的状态码和首部的差异。
表12-3 Web服务器与代理认证
Web服务器 代理服务器
Unauthorized status code: 401 Unauthorized status code: 407
WWW-Authenticate Proxy-Authenticate
Authorization Proxy-Authorization
Authentication-Info Proxy-Authentication-Info
12.3 基本认证的安全缺陷
基本认证简单便捷，但并不安全。只能用它来防止非恶意用户无意间进行的访问，
或将其与SSL这样的加密技术配合使用。
基本认证存在下列安全缺陷。
(1) 基本认证会通过网络发送用户名和密码，这些用户名和密码都是以一种很容易
解码的形式表示的。实际上，密码是以明文形式传输的，任何人都可以读取并将
其捕获。虽然Base-64编码通过隐藏用户名和密码，致使友好的用户不太可能在
进行网络观测时无意中看到密码，但Base-64编码的用户名和密码可以很轻易地
通过反向编码过程进行解码，甚至可以用纸笔在几秒钟内手工对其进行解码！所
以经过Base-64编码的密码实际上就是“明文”传送的。如果有动机的第三方用
户有可能会去拦截基本认证发送的用户名和密码，就要通过SSL加密信道发送
283 所有的HTTP事务，或者使用更安全的认证协议，比如摘要认证。
(2) 即使密码是以更难解码的方式加密的，第三方用户仍然可以捕获被修改过的用户
名和密码，并将修改过的用户名和密码一次一次地重放给原始服务器，以获得对
服务器的访问权。没有什么措施可用来防止这些重放攻击。
(3) 即使将基本认证用于一些不太重要的应用程序，比如公司内部网络的访问控制或
个性化内容的访问，一些不良习惯也会让它变得很危险。很多用户由于受不了大