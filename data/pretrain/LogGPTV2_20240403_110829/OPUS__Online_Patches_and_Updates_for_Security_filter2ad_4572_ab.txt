
















!


"
#

$



%



&
'
'
#

$



(

)

)


#

$



(

)

)


#

$



(

)

)


*

+

,
-

-
&
'
'
*


+


*

+

,
-

-
.

)


/

0
0








$



)





1


0


/

)

)



"
2




3



4
5
0











)


)

6
)
3
)
3



$




3



7




)

9


2
1

)

3
(
1
1
"
2

3



)


$
1






:
;
?
@

A
>

=
+
>
?
&


+


B

6
#

$



%



branch of the if expression is unaffected by the expres-
sions tainted in the other branch, but the statements fol-
lowing the entire expression are processed as if taintings
from both branches have been applied. BINOP rules and
SEQ show how taint sets are modiﬁed when analysis
walks over an expression tree and a sequence of state-
ments, respectively.
The ASSIGN family of rules cover the way the left
hand side of an assignment statement gets tainted, with
each rule specifying what happens when an array type,
struct type and a pointer type variable is assigned. Fi-
nally, the base case EMPTY rule shows that an empty
expression leaves the tainted set unaltered. We omit the
rest of the rules for brevity, but they follow the same
high-level pattern.
The static analysis generates warnings when it en-
counters the following situations in the program’s source
code: (1) a reference to non-local data is dereferenced
on the left hand side of an assignment or (2) a new value
is assigned to an explicitly-named global variable. The
reader should be careful not to confuse the computation
of the tainted set and the conditions under which a warn-
ing is issued. Speciﬁcally, aliasing of pointer variables
produces no warnings whereas dereferencing a tainted
pointer on the left-hand side of an assignment does.
4.3.3 Limitations of static analysis
Implementation limitations. Our current implementa-
tion of static analysis warns only about new modiﬁca-
tions to non-local program state. A true conservative
analysis, however, should also produce warnings for al-
tered return values. This can be a problem, for exam-
ple, in the following sorting function, which periodically
invokes a comparator function to determine the desired
ordering on the input data.
void sort() {
qsort(array_of_numbers, array_length,
sizeof(int), &comparator);
}
int comparator(int* a, int* b) {
return *a > *b;
}
Suppose that the comparator function is modiﬁed such
that the ordering is reversed as follows:
int comparator(int* a, int* b) {
return *a < *b;
}
Further suppose that the program starts to sort with
the old comparator function, but then is dynamically
patched. Subsequently, it ﬁnishes the sort using the new
comparator function. The resulting “sort” does not corre-
spond to any sort produced by a statically applied version
of the original or patched version on the same data.
The above patch eludes our current implementation of
static analysis because it does not modify any non-local
data. However, it indirectly violates program semantics
through a change in return value and therefore violates
our notion of conservative safety.
Ideally, a warning
should be produced, but our current implementation
does not do so,
implying that the programmer must
consider the effects of the patch with respect to the
return value.
Fundamental limitations. Ignoring the implementation
limitations, a static analysis that strictly adheres to the
conservative safety model will generate false warnings
for many security patches (examples of which are given
in section 3.2 and section 6.5). These false warnings have
to be overridden by programmer intuition, which implies
that OPUS introduces some programmer overhead in the
patch development process. Perhaps more problematic,
incorrect programmer intuition may result in an unsafe
dynamic patch. In the end, OPUS can only alert the pro-
grammer to the potential dangers of dynamic patching.
It cannot guarantee that a dynamic patch is equivalent to
its static version nor can it point out ﬂaws in the patch
itself.
4.4 Patch generation
Once the programmer is satisﬁed with the patch, having
removed any errors and examined any warnings gener-
ated by the analysis, the patch generation stage can be in-
voked. Although OPUS does patching at function gran-
ularity, a patch object is actually a collection of changed
functions aggregated based on the source ﬁle of their ori-
gin.
The ﬁrst step in the patch generation is to pin down
exactly which ﬁles need to be compiled into a dynamic
patch object. The generation system does this by parsing
the annotation ﬁles sprinkled throughout the new and old
project source trees by the instrumented compiler. The
annotations are inspected in a pairwise fashion, identi-
fying which functions or globals have been added and
which functions have changed.
Next, the patch generator runs the source code through
the C preprocessor to create a single ﬁle with all the
header ﬁles spliced in. The static analysis tool is then re-
invoked on the preprocessed and stripped source code,
dumping annotation ﬁles which contain the new (post-
preprocessed) line numbers for each function and global
variable.
The ﬁnal step is to cut and extern the preprocessed
source. Cutting removes all of the code for any functions
292
14th USENIX Security Symposium
USENIX Association
Figure 2 Operational semantics for computing the set of tainted expressions.
e2 ∈ R
R (cid:1) e1 = e2 ⇒ R ∪ {e1}
e2 ∈ R
(ASSIGN)
R (cid:1) eempty ⇒ R
(EMPTY)
e2 ∈ R
R (cid:1) e1.f ield∗ = e2 ⇒ R ∪ {e1}
(ASSIGN-FIELD)
R (cid:1) e1[∗]∗ = e2 ⇒ R ∪ {e1}
(ASSIGN-ARRAY)
v ∈ R ; pointer type p(v) ; R (cid:1) e ⇒ R(cid:1)
R (cid:1) v ⊕ e ⇒ R(cid:1) ∪ {v ⊕ e}
(BINOP1)
v ∈ R(cid:1) ; pointer type p(v) ; R (cid:1) e ⇒ R(cid:1)
R (cid:1) e ⊕ v ⇒ R(cid:1) ∪ {e ⊕ v}
(BINOP2) R (cid:1) e1 ⇒ R(cid:1) ; R(cid:1) (cid:1) e2 ⇒ R(cid:1)(cid:1)
R (cid:1) e1; e2 ⇒ R(cid:1)(cid:1)
(SEQ)
R (cid:1) e1 ⇒ R1 ; R1 (cid:1) e2 ⇒ R2 ; R1 (cid:1) e3 ⇒ R3 ; R2 ∪ R3 (cid:1) e4 ⇒ R(cid:1)
R (cid:1) if (e1) then {e2} else {e3} e4 ⇒ R(cid:1)
(IF)
{e.args[i] | 0 < i < e.numargs ∧ pointer type p(e.args[i])}
function type p(e)
∪ {v | global p(v)} (cid:1) e.body ⇒ R
{} (cid:1) e ⇒ R
(FUNCTION)
that have not changed by blanking the line ranges of the
function deﬁnition. Externing involves placing an “ex-
tern” storage modiﬁer before any function or global vari-
able that is not new or changed. The end result is a single
source ﬁle that contains code for only new or changed
functions, and extern deﬁnitions for any other variables
which have not changed, but references to which are
needed for successful compilation.
Once the processed source is ready, the generation sys-
tem invokes the standard C compiler on the code. Addi-
tionally, OPUS adds the -shared compiler switch which
causes the compiler to create a shared object. When all
of the shared objects have been compiled, OPUS packs
them together in an archive with a patch deﬁnition ﬁle
and an unstripped copy of the original program binary.
The resulting archive comprises a dynamic patch object,
which can then be transferred to the machine in need of
patching and applied to a running process by the patch
injector.
4.5 Patch application
The patch application process is straightforward and con-
sists of two distinct phases. In the ﬁrst phase, the patch
installer attaches to a speciﬁed process. Once attached,
the installer gains complete control over the process: it
can inspect and modify the process’s address space, in-
tercept signals sent to the process, and can even execute
code on the child’s behalf.
In the second phase, the installer attempts to apply the
patch by redirecting calls of the target functions to the
newer versions contained in the patch. Before applying
the patch, however, the patch installer must ensure the
patch safety criteria discussed in section 3: current ex-
ecution point cannot be under the dynamic scope of a
target function, i.e., no frames on the stack should be-
long to the function being patched. If any of the stacks
contain activation frames of any of the target functions,
the safety criteria does not hold and patching is deferred.
Handling multiple threads posed a unique challenge in
the design of the patch injector. It is possible, although
unlikely, for threads to never exit the dynamic scope of
a target function. In such a case, program execution will
never satisfy our safety condition.
5
Implementation
A fully functional OPUS prototype has been developed
and vetted on real examples of dynamic patches (see
section 6). We now present noteworthy implementation
challenges encountered while building an OPUS proto-
type based on the preceding architecture.
USENIX Association
14th USENIX Security Symposium
293
5.1 GCC integration
GCC version 3.4.2 was taken as a baseline for our im-
plementation. The actual modiﬁcations to it were min-
imal — around 1,000 lines of code spread over 5 ﬁles.
Modifying GCC directly has imposed several implemen-
tation challenges not the least one of which has been sim-
ply grokking GCC APIs and ﬁnding the right time in the
compilation process to invoke our analysis. As a beneﬁt,
the static analysis effectively supports all features of the
C programming language, including arcane C extensions
supported by GCC [12, 18].
Despite some of the beneﬁts of integration, one of our
current action items is removing the static analysis from
GCC and implementing it externally under a tool like
cil [21]. We hope to report on the new version of the
static analysis in the ﬁnal version of the paper.
The critical aspect of the current implementation is
that both the standard and the instrumented compilers
produce identical answers on identical inputs. For any
arbitrarily complex build environment where a default
GCC is used, the modiﬁed version “just works” in its
place.
5.1.1 L-values
The ASSIGN “family” of taint ﬂow rules make the taint-
ing of the left hand side of an assignment expression ap-
pear straightforward. In reality, C allows deeply struc-
tured l-values that may include complex pointer manipu-
lation and conditionals, not just array indexes and struc-
ture ﬁeld accesses [18].
Consider a contrived example of an assignment:
(a == 42 ? arr1 : arr2) [argc] = a;
In the example above, it cannot be determined statically
which of the arrays gets tainted. When an anomalous l-
value is encountered we alert the user and request that a