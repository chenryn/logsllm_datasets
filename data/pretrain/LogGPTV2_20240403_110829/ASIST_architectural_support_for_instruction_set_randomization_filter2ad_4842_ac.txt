2-to-4 
decoder
EN
EN
EN
EN
Offset
2
Address
32
2
Offset
32
32
32
32
cacheline
Instruction 
Fetch
Main 
Memory
32
MMU
Address
32
Unencrypted instructions
Figure 3: ASIST hardware support for runtime instruction decryption. We see the modiﬁed ASIST processor that decrypts every
instruction with XOR and 32-bit key before the instruction cache. The key of the user-level running process is stored in usrkey
register, and operating system’s key is stored in oskey register. The supervisor bit deﬁnes which of these two keys will be used.
is scheduled for execution before each context switch. In case of
a 32-bit key, a single sta instruction can store the entire key. For
larger keys, more than one sta instructions may be needed.
The ASIST processor chooses between usrkey and oskey for de-
crypting instructions based on the value of the Supervisor bit. The
Supervisor bit is 0 when the processor executes user-level code, so
the usrkey is used for decryption, and it is 1 when the processor
executes kernel’s code (supervisor mode), so the oskey is selected.
When a trap instruction is executed (ta instruction in SPARC), con-
trol is transferred from user to kernel and the Supervisor bit changes
from 0 to 1; interrupts are treated similarly. Thus, the next in-
structions will be decrypted with oskey. Control is transferred back
to user from kernel with the return from trap instruction (rett in
SPARC). Then the Supervisor bit becomes 0 and the usrkey is used.
The context switch is performed when the operating system runs,
and oskey is used for decryption. Then the proper key of the process
that will run immediately after rett is stored at usrkey.
The decryption unit is placed before the instruction fetch cycle,
when instructions are moved from memory to the instruction cache.
We should note that decryption ﬁts in the processor’s pipeline and
no extra cycle is spent on it. Therefore, we expect no runtime over-
head from the hardware decryption part. We expect a slight in-
crease on the cost and on the power consumption due to the extra
hardware we used. Also, ASIST’s hardware architecture is back-
wards compatible with programs and operating system kernels that
are not encrypted. We set the default value of the key registers to
zero, which has no effect on the decryption.
3.2.1 Placement of the Decryption Unit
We decided to place the decryption unit as early as possible in the
modiﬁed processor to avoid adding any performance overhead or
spend an extra cycle, and to avoid breaking any runtime optimiza-
tions made by the processor. There are two possible choices for
placing the decryption unit: before and after the instruction cache.
Figure 4 presents the two options. When the decryption unit is after
the instruction cache, the instructions are stored encrypted and the
decryption takes place at each fetch cycle. Therefore, it is on the
critical path of the processor and may add a delay for more complex
decryption algorithms. Also, as the decryption circuit is utilized at
each fetch cycle, it may result in increased power consumption.
However, this approach protects the system from a possible code
injection in the instruction cache.
On the other hand, when the decryption unit is located before the
instruction cache, it is accessed only on instruction cache misses.
This leads to reduced power consumption for decryption, as the in-
structions that are executed many times, e.g., in loops, are found de-
crypted in the instruction cache. Also, an increased delay for more
complex encryption at this point will not have signiﬁcant impact to
the overall performance of the processor. In this case, instructions
are stored unencrypted into the instruction cache, which could be
vulnerable to code injections in the instruction cache. However, to
the best of our knowledge, it is not possible to inject code in the
instruction cache without passing from the path we have modiﬁed
to decrypt each instruction. For this reason, we selected to place
the decryption unit before the instruction cache.
3.2.2 Decryption Algorithms and Key Size
Figure 5 shows the implementation of XOR decryption with 128-
bit key. Since each encrypted instruction in our architecture is a 32-
bit word, we need to select the proper 32-bit part of the 128-bit key,
the same part that was used in the encryption of this instruction.
Thus, we use the two last bits of the instruction’s address to select
the correct 32-bit part of the 128-bit key using a multiplexer, and
ﬁnally decrypt the instruction. The same approach is used for XOR
decryption with other key sizes, multiple of 32 bits.
The implementation of decryption with transposition, as shown
in Figure 6, requires signiﬁcantly more hardware. This is because
it needs 32 multiplexers, one per bit of the decrypted instruction.
Each multiplexer has 32 input lines with all the 32 bits of the en-
crypted instruction, to choose the proper bit. It also has 5 select
lines that deﬁne the selection of the input bit at each position. The
select lines of each multiplexer are part of the 160-bit key. Besides
the additional hardware, the runtime operation of transposition is
equally fast with XOR, as it does not spend an extra cycle and does
not impose any delay to the processor. To dynamically select the
decryption algorithm and key size, we have added another memory
mapped register: asist_mode.
3.2.3 Return Address Encryption
To transparently protect a system against return-to-libc and ROP
attacks [14, 45], we extended our hardware design to provide pro-
tection of the return address integrity without any runtime over-
head. To this end, we slightly modiﬁed the ASIST processor to
encrypt the return address in each function call using the process’s
key, and decrypt it just before returning to the caller. This is similar
to the XOR random canary defense [21], which uses mprotect()
to hide the canary table from attackers. On the other hand, we take
advantage of the two hardware key registers, which are not acces-
sible by an attacker, to hide the encryption key. Also, our hardware
implementation does not impose any performance overhead.
In the SPARC V8 architecture, function calls are performed with
the call synthetic instruction, which is equal to jmpl func_addr,%o7.
Instruction cache
32
Address
Instruction cache
key
32
32
Encrypted 
instruction
Decryption 
32
unit
Unencrypted 
instruction
32
Unencrypted 
instruction
Instruction 
Fetch
32
Encrypted 
instruction
key
32
32
Encrypted 
instruction
32
Address
Decryption 
32
Instruction 
unit
Fetch
Unencrypted 
instruction
Unencrypted instructions
Encrypted instructions
(a) Decryption before the instruction cache
(b) Decryption after the instruction cache
Figure 4: Alternative choices for the placement of the decryption unit in the ASIST-enabled processor.
Hence, call writes the contents of the program counter (PC), i.e.,
the return address, into the o7 register, and then transfers the control
to the function’s address func_addr. To return from a function, the
ret synthetic instruction is used, which is equal to jmpl %i7+8,%g0
when returning from a normal subroutine (i7 register in the callee is
the same with o7 register in the caller) and jmpl %o7+8,%g0 when
returning from a leaf subroutine.
To encrypt the return address on each function call, we just XOR
the value of the PC with the usrkey register when a call or jmpl
instruction is executed and the value of the PC is stored into the
o7 register. The return address, i.e., the i7 register in the callee, is
decrypted with usrkey when a jmpl instruction uses the i7 register
(or o7 in case of leaf subroutine) to change the control ﬂow (ret
instrunction). Thus, the modiﬁed processor will return to the (%i7
XOR usrkey)+8 address.
This way, the return address remains always encrypted, e.g., when
it is pushed onto the stack (window overﬂow), and it is always de-
crypted by the jmpl instruction when returning. Hence, any modiﬁ-
cation of the return address, e.g., though a stack-based buffer over-
ﬂow or fake stack by changing the stack base pointer, or any ret
instructions executed by a ROP exploit without the proper call, will
lead to an unpredictable return address upon decryption, as the us-
rkey is unknown to the attacker.
Note that jmpl is also used for indirect jumps, not only for func-
tion calls and return, so our modiﬁed jmpl decrypts the given ad-
dress only when the i7 (or o7) register is used. This is a usual con-
vention for function calls in SPARC and it should be obeyed, i.e.,
the i7 and o7 registers should not be used for any indirect jumps
besides returning from function calls. Also, the calling conven-
tions should be strictly obeyed: return address cannot be changed
in any legal way before returning, and ret instructions without a
preceding call instruction cannot be called without a system crash.
As the calling conventions are not always strictly obeyed in several
legacy applications and libraries, the use of return address encryp-
tion may not be always possible. Therefore, although ASIST offers
this hardware feature, it may or may not be enabled by the soft-
ware. We use one bit of the asist_mode register to deﬁne whether
the return address encryption will be enabled or not.
3.3 Operating System Support
We now describe the new functionality we added in the operating
system to support the ASIST hardware features for ISR in order to
protect the system from attacks against possibly vulnerable user-
level processes and kernel’s vulnerabilities.
3.3.1 Kernel Modiﬁcations
In our prototype we modiﬁed the Linux kernel, and we ported
our changes to 2.6.21 and 3.8 kernel versions. First, we added two
new ﬁelds in the process table records (task_struct in Linux
kernel): the process’s key and the asist_mode. We initialize the pro-
cess’s key to zero and asist_mode to dynamic, so each unencrypted
program will be dynamically encrypted.
key
128
32 bit
32 bit
32 bit
32 bit
32
32
32
32
Offset
2
32
32
Unencrypted 
instruction
32
Encrypted 
instruction
Figure 5: Decryption using XOR with 128-bit key. Based on the
last two bits of the instruction’s address (offset) we select the
respective 32-bit part of the 128-bit key for decryption.
key
160
5
5
5
5 bit 5 bit
...
5 bit
160 bit
32
Encrypted 
instruction
5
5
5
32
32
32
32
...
Bit 0
32
...
Bit 1
...
32
Unencrypted 
instruction
32
...
Bit 31
Figure 6: Decryption using transposition with 160-bit key. The
implementation of transposition requires signiﬁcantly more
hardware, because it needs 32 multiplexers with all the 32 bits
of the encrypted instruction as input lines in each one.
We changed the binary ELF loader to read the key of the ex-
ecutable ELF ﬁle, in case it is statically encrypted, or generate
a random key, in case of dynamic encryption, after calling the
execve() system call. Then, the loader stores the process’s key
to the respective process table record. We also changed the sched-
uler to store the key of the next process that is scheduled to run in
the usrkey register before each context switch. For this, we added
an sta instruction before the context switch to store a 32-bit key.
For larger keys, the number of sta instructions depends on key size.
To implement dynamic encryption and shared library support we
modiﬁed the page fault handler. For each page fault, we ﬁrst check
whether it is related to code (text page fault) and whether the pro-
cess that caused the page fault uses dynamic code encryption. If
so, we allocate a new anonymous page that is not backed by any
ﬁle. Upon the reception of the requested page from disk (or buffer
cache), we encrypt its data with process’s key and copy it at the
same step into the newly allocated page. Then, the new page is
mapped into the process’s address space. Eventually, this page will
contain the code that will be accessed by the process.
3.3.2 Kernel Encryption
To encrypt kernel’s code we used the same approach with static
binary encryption. We modiﬁed an uncompressed kernel image by
(i) adding a new note section that contains the kernel’s encryption
key, and (ii) identifying and encrypting all code sections. We had
to carefully separate code from data into different sections while
building the kernel image. The oskey register saves the key of ker-
nel’s encrypted code. We modiﬁed the bootloader to read and then
store the kernel’s key into the oskey register with an sta instruc-
tion, just before the control is transfered from bootloader to kernel.
Since oskey is initialized with zero, which has no effect in XOR de-
cryption that is also default, the unencrypted code of the bootloader
can be successfully executed in the randomized processor.
We decided to statically encrypt the kernel’s code so as to not add
any delay to the boot process. Due to this, the key is decided once
when the kernel image is built and encrypted, and it cannot change
without re-encryption. Another option would be to encrypt the ker-
nel’s code while booting, using a new key that is randomly gener-
ated at this point. This option could add a further delay to the boot
process. However, most systems typically use a compressed kernel
image that is decompressed while booting. Thus, we can encrypt
the kernel’s code during the kernel loading stage when the image
is decompressed into memory. The routine that decompresses and
loads the kernel to memory must ﬁrst generate a random key and
then encrypt the kernel’s code along with decompression.
4. ASIST PROTOTYPE IMPLEMENTATION
In this section we describe the ASIST prototype implementation,
we present the results of the hardware synthesis using an FPGA
board, in terms of additional hardware needed compared to the un-
modiﬁed processor, and ﬁnally we discuss how the proposed sys-
tem can be easily ported to other architectures and systems.
4.1 Hardware Implementation
We modiﬁed Leon3 SPARC V8 processor [1], a 32-bit open-
source synthesizable processor [26], to implement the security fea-
tures of ASIST for hardware-based ISR support, as we described
in Section 3.2. All hardware modiﬁcations required fewer than 100
lines of VHDL code. Leon3 uses a single-issue, 7-stage pipeline.
Our implementation has 8 register windows, an 16 KB 2-way set
associative instruction cache, and a 16 KB 4-way set associative
data cache. We synthesized and mapped the modiﬁed ASIST pro-
cessors on a Xilinx XUPV5 ML509 FPGA board [54]. The FPGA
has 256 MB DDR2 SDRAM memory and the design operates at
80 MHz clock frequency. It also has several peripherals including
an 100Mb Ethernet interface.
4.2 Additional Hardware
Table 2 shows the results of the synthesis for three different
hardware implementations of ASIST, using XOR decryption with
32-bit and 128-bit keys, and decryption with transposition using
160-bit key. We compare them with the unmodiﬁed Leon3 pro-
cessor as a baseline to measure the additional hardware used by
ASIST to implement ISR functionality in each case. We see that
ASIST with XOR encryption and 32-bit key adds less than 1% of
additional hardware, both in terms of additional ﬂip ﬂops (0.73%)
and lookup tables (0.61%). When a larger key of 128 bits is used
for encryption, we observe a slight increase in the number of ﬂip
ﬂops (2.81%) due to the larger registers needed to store the two
128-bit keys. The implementation of transposition results in sig-
niﬁcantly more hardware used, both for ﬂip ﬂops (6.62% increase)
and lookup tables (6.87% increase). This is due to the larger circuit
Synthesized Processor
Vanilla Leon3
XOR with 32-bit key
XOR with 128-bit key
Transposition with 160-bit key
Flip Flops
9,227
LUTs
16,986
9,294 (0.73% increase)
9,486 (2.81% increase)
9,838 (6.62% increase)
17,090 (0.61% increase)
17,116 (0.77% increase)
18,153 (6.87% increase)
Table 2: Additional hardware used by ASIST. We see that
ASIST adds just 0.6%–0.7% more hardware with XOR de-
cryption using a 32-bit key, while it adds signiﬁcantly more
hardware (6.6%–6.9%) when using transposition.
used for the hardware implementation of transposition, which con-
sists of 32 multiplexers with 32 input lines each, as we showed in
Section 3.2.2.
4.3 Kernel and Software Modiﬁcations
The resulting system is a full-featured SPARC workstation using
a Linux operating system. We modiﬁed the Linux kernel as we de-
scribed in Section 3.3. We ported our Linux kernel modiﬁcations
in 2.6.21 and 3.8.0 kernel versions. We built a cross compilation
tool chain with gcc version 4.7.2 and uClibc version 0.9.33.2