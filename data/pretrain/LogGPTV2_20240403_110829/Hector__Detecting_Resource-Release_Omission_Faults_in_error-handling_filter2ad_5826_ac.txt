reports is then returned as the output of the algorithm.
The algorithm applies to our example as follows. The
candidate fault shown in Fig. 7(d) satisﬁes all of the conditions
for being reported as a fault. It does not return pdev (condition
1), it acquires its associated resource using the same function as
the exemplar (Fig. 7(c)) (condition 2), and it does not contain
any release of pdev (condition 3). Thus, the omission of the
release of pdev in the block of error-handling code starting on
line 12 is, correctly, reported as a fault.
As a second example, consider the code in Fig. 3 and the
acquisition of bhjh on line 1. One path from the acquisition
leads through the error-handling code starting on line 9. This
error-handling code releases bhjh using brelse, and so the path
is considered to be an exemplar. Suppose that another path from
the acquisition leads through the call to brelse on line 19 to a
later block of error-handling that does not release bhjh. This
path would be considered to be a candidate fault. However, it
meets only the ﬁrst two of the conditions for reporting a fault; it
does not satisfy the third condition because it contains a release
of bhjh that does not appear in the (truncated) exemplar. The
algorithm correctly concludes that the call to brelse annotated
as a release on line 19 is an actual release of bhjh, and thus
no further release is needed.
IV.
IMPLEMENTATION
We have validated our algorithm by implementing a tool,
Hector. Hector consists of around 3500 lines of OCaml code,
excluding the C parser and abstract syntax, which we have
borrowed from the open-source C-code transformation tool
Coccinelle.6 Creating this implementation requires implement-
ing a preprocessing phase and instantiating the algorithm with
various analysis strategies.
A. Preprocessing phase
Preprocessing requires identifying and annotating resource
acquisitions, resource releases, and error-handling code. Due
to the nature of the C language, this must necessarily be done
using heuristics. Our heuristics mostly rely on intraprocedural
information, making the implementation highly scalable.
A resource is typically represented by a collection of
information, and is thus implemented by a pointer to a structure
or buffer.7 Resource acquisition and release are typically
complex operations, and are thus implemented by function
calls. Hector recognizes an acquisition as a function call that
returns a pointer-typed value, either directly or via a reference
argument (&x), and recognizes a release as the last operation
on a resource in a path in the CFG. The result of a release
should not be tested, as release operations do not normally
report error codes. Finally, we ignore operations that have
constant string arguments, as such operations are typically
debugging code. To improve accuracy, within the ﬁle containing
the analyzed function, we identify resource-release operations
6http://coccinelle.lip6.fr/
7File descriptors, as obtained by open, are an exception, being represented
as integers, and thus Hector does not detect ﬁle descriptor release omissions.
open is, however, now rarely used, in favor of the more modern fopen,
which provides richer functionalities, and fopen returns a pointer. The Linux
kernel also uses pointers to represent its more primitive ﬁle objects.
interprocedurally. A function call that has an acquired resource
as an argument and whose deﬁnition contains a release of that
resource, according to the above criteria, is also considered to
be a release operation.
Some kinds of resources, notably locks, are not acquired
and released according to the above patterns, but instead
using a function that takes the resource as an argument, or
even takes no arguments. To account for these cases, we also
consider a function call having at most one argument as being
a resource acquisition, when the argument, if any, has pointer
type and is not involved in an earlier resource acquisition. The
corresponding release operation must occur in a block of error-
handling code and must include the same argument value, if
any, as veriﬁed by checking that the corresponding arguments
have the same set of reaching deﬁnitions.
Finally, in some cases a resource is released as a side-
effect of another operation. In Fig. 8, the resource kctl is
acquired on line 4. On line 12, kctl is passed to the function
add control to empty, which is the last operation on kctl before
the return on line 13. This call would not normally be considered
a release, because its value is tested. Nevertheless, kctl is never
again referenced on any execution path following this call,
neither on the success nor the failure of the test, and thus it is
considered to either release kctl or store it in some way that
makes a subsequent release in error-handling code unnecessary.
The latter is indeed the behavior of this function.
kctl = snd ctl new1(&mixer selectunit ctl, cval);
namelist = kmalloc(. . .);
1
2 if (! namelist) { . . . }
3 . . .
4
5 if (! kctl) {
6
7
8
9 }
10
11 . . .
12 if ((err = add control to empty(state, kctl)) private value = (unsigned long)namelist;
kfree(namelist);
. . .
return −ENOMEM;
return err;
Fig. 8. Extract of parse audio selector unit (From sound/usb/usbmixer.c)
Hector identiﬁes a block of error-handling code as a
conditional branch that ends by returning an error value. Infor-
mation about the return value is obtained using intraprocedural
ﬂow- and path-sensitive constant propagation. Error values
are speciﬁc to each software project, but typically include
NULL and various constants. In Linux, common error values
include negative constants, as illustrated in line 12 of Fig. 2,
and calls to ERR_PTR and PTR_ERR, as illustrated in line 3
of Fig. 2. Currently, the user must list these error values in
a conﬁguration ﬁle (the only conﬁguration information that
the user must provide), but we have developed a tool that
proposes a list of possibilities to the user based on the values
that are commonly returned in conditional branches. A block
of error-handling code might also return no value, or return
a variable whose value cannot be determined by the analysis,
as illustrated in line 22 of Fig. 1. In this case, a conditional
branch is considered to be a block of error-handling code if
the test expression checks for an error value and the branch
corresponds to the error value case.
B. Instantiation of the algorithm
The algorithm needs to connect resource-release operations
to the corresponding possible resource acquisitions, and then
to collect the paths in which an acquired resource is live. For
connecting the operations, Hector uses a backwards dataﬂow
analysis that takes into account alias information. Concretely,
the alias analysis considers statements of the form y = x,
y->ﬂd = x, and y = f (. . . , x, . . .) as creating a possible alias
from y to x. Other possible alias-creating patterns could be
added if found to be needed in practice. For collecting the
paths, Hector uses a forward path-sensitive dataﬂow analysis,
again taking into account alias information. In both cases, the
analyses are ﬂow sensitive and purely intraprocedural.
The need for path sensitivity is illustrated by the use of
pdev in Fig. 1. We have noted in Section III that the execution
path starting with line 4 and passing through the block of
error-handling code starting on line 12 is missing a release of
pdev and that this omission represents a fault. The execution
path starting on line 4 and passing through the block of error-
handling code starting on line 5 is likewise missing a release of
pdev (cf. Fig. 7(b)). However, the path-sensitivity of the path
collection process implies that the latter path is not reported as
a fault, because it includes a successful test that pdev is null,
implying that its value is different from the one obtained from
the successful execution of the resource acquisition on line 4,
for which a release is needed.
The need for alias analysis arises when an execution path
beginning with an acquisition of some resource x contains
e.g., y->ﬂd = x. Alias information makes the path collection
process aware that x may either be released directly or be
released via a release of y, thus allowing a path that contains
either resource release to be considered to be an exemplar.
Finally, the need for ﬂow sensitivity arises when a resource
is acquired and released more than once within a single function.
This is often the case of locking in systems code.
V. EXPERIMENTING WITH HECTOR
The goals of our experiments with Hector are 1) to
determine its success in ﬁnding faults in systems code, 2) to
compare the results obtained with those of related approaches,
3) to assess the potential impact of the identiﬁed faults, 4) to
understand the reason for any false positives and false negatives,
and 5) to understand the scalability of the approach. We evaluate
Hector on the large, widely used open-source infrastructure
software projects previously described in Table I, amounting
to almost 10.5 million lines of C code.
A. Found faults
As shown in Table II, Hector generates a total of 484 reports
for all of the projects. We manually investigated all of them
and found that 371, from 247 different functions, represent
actual faults. These faults occur in the use of 150 pairs of
resource acquisition and release operations. There are 113 false
positives. We study them further in Section V-C.
We ﬁrst investigate the complementarity of our approach
with other approaches. Because we do not have access to
implementations of other C code speciﬁcation mining tools, we
ﬁrst assess our results in terms of the strategies and thresholds
TABLE II.
FAULTS AND CONTAINING FUNCTIONS (FNS)
Impact
per Resource Dead Debug
Reports
(Fns)
Faults Faults
(Fns)
EHC
293 (180) 237 (152) 0.0026
48 (37) 0.0011
13 (11) 0.0007
20 (12) 0.0023
3 (3) 0.0012
30 (18) 0.0009
13 (10) 0.0053
7 (4) 0.0010
484 (314) 371 (247) 0.0018
92 (66)
17 (13)
22 (13)
5 (5)
31 (19)
16 (13)
8 (5)
Linux drivers
Linux snd/net/fs
Python (2.7)
Python (3.2.3)
Apache httpd
Wine
PHP
PostgreSQL
Total
leak
217
40
13
20
3
30
13
7
343
lock
7
2
0
0
0
0
0
0
9
13
6
0
0
0
0
0
0
19
Fig. 9. Support and conﬁdence associated with the protocols in the faults
reported by Hector. The dotted lines mark support 15 and conﬁdence 90%.
used in previous work. We then consider how many of the
faults detected by Hector have been found and ﬁxed in practice
in Linux code.
Comparison to speciﬁcation mining. In Section II-B,
we noted that speciﬁcation mining approaches often rely on
thresholds deﬁned in terms of support (the number of times
the protocol is followed across the code base) and conﬁdence
(the percentage of occurrences of a portion of the protocol
that satisfy the complete protocol) to reduce the number of
false positives. In Fig. 6, we showed that most of the pairs
of resource acquisition and release functions identiﬁed by the
heuristics presented in Section IV-A do not meet the support
and conﬁdence thresholds proposed by the speciﬁcation-mining
tool PR-Miner [9]. Here, we focus on the subset of these pairs
of resource acquisition and release functions that are associated
with the reports generated by Hector.
Fig. 9 shows the support and conﬁdence for the protocols
involved in our identiﬁed faults. The ×s and circles represent
the 150 pairs of resource acquisition and release operations
associated with the 371 faults identiﬁed by Hector. Protocols
associated with 52% of the faults found by Hector have support
less than 15, and protocols associated with 86% of the faults
found by Hector have conﬁdence less than 90%. Indeed, only
7 pairs, marked as ×, have support greater than or equal to
15 and conﬁdence greater than or equal to 90%. These 7 pairs
are associated with only 23 (6%) of the 371 faults found
by Hector, implying that 94% of the faults found by Hector
would be overlooked when using these thresholds. Indeed,
the well-known Linux protocol kmalloc/kfree, for which we
ﬁnd 28 faults, only has conﬁdence of 59%, as many of the
functions that call kmalloc have no reason to also call kfree. On
the other hand, reducing the support or conﬁdence thresholds
used by speciﬁcation-mining-based approaches could drastically
increase their number of false positives. Hector ﬁnds faults
independent of the support and conﬁdence of the protocol.
Fig. 9 also shows as open rectangles the support and
conﬁdence for the 55 protocols involved in our 113 false
0102030405060708090100 Confidence (%)1101001000 SupportPairs having support >= 15 and confidence >= 90%Other protocolsFalse Positivescrashes, as illustrated in Section II-A.
B. Impact of the detected faults
As illustrated in Section II-A, the kinds of faults we detect
can lead to crashes, memory exhaustion or deadlocks. Faults
can also involve omitted debugging operations, which do
not themselves cause a system crash, but can complicate the
process of debugging other errors, particularly those that are
difﬁcult to reproduce.
Faults in Linux. We ﬁrst focus on Linux, as this is the
most critical and long-running of the considered software
projects. The impact of a fault in error-handling code depends
on the probability that the function containing the fault will be
executed, the likelihood that the associated error will occur, and
the nature of the omitted operation. Table III classiﬁes the faults
that we have found according to these properties. Linux kernel
functions vary in the degree of privilege required to cause them
to be executed and the number of times they are likely to be
executed in normal system usage, with read/write functions
being executed the most often and requiring the least privilege,
and initialization functions being executed the least often and
frequently requiring the greatest privilege. We furthermore
distinguish between static initialization functions, which are
only executed during the boot, and dynamic initialization
functions, for e.g., hotpluggable devices that can be loaded
and unloaded many times within the lifetime of a system. The
errors handled range from a lack of memory, which should be
rare in a correctly dimensioned system, to invalid arguments
from the user level, which are completely under user control.
Finally, we classify faults according to the effect the fault may
have: a memory leak (Leak), a deadlock (Lock), or inconsistent
debugging logs (Debug).
TABLE III.
IMPACT OF FAULTS FOUND IN LINUX
Ioctl
Open
Leak
Read/write Lock
Debug
Leak
Lock
Debug
Leak
Lock
Debug
Leak
Lock
Debug
Leak
Lock
Debug
Leak
Lock
Debug
Dynamic
init
Static
init
Total
Lack of Transient No device
memory
2
0
0
12
0