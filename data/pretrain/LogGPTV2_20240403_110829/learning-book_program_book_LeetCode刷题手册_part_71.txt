Start, End
Tracked
boo1
Lazy
int
Left, Right *SegmentTreeNode
}
// Constructor715 define
func Constructor715() RangeModule{
return RangeModule{&SegmentTreeNode{0, le9, false, 0, ni1, ni1}}
// AddRange define
func (rm *RangeModule) AddRange(left int, right int) {
update(rm.Root, left, right-l, true)
// QueryRange define
func (rm *RangeModule) QueryRange(left int, right int) bool {
return query(rm.Root, 1eft, right-1)
// RemoveRange define
func (rm *RangeModule) RemoveRange(left int，right int) {
update(rm.Root, 1eft, right-1, false)
func 1azyUpdate(node *SegmentTreeNode){
if node.Lazy != 0 {
node.Tracked = node.Lazy == 2
if node.Start != node.End {
if node.Left == nil 11 node.Right == nil {
m := node.Start + (node.End-node.Start)/2
node.Left = &SegmentTreeNode{node.Start, m, node.Tracked, 0, nil, ni1}
node.Right = &SegmentTreeNode{m + 1, node.End, node.Tracked, 0, nil,
ni1}
} else if node.Lazy != 0 {
node.Left.Lazy = node.Lazy
node.Right.Lazy = node.Lazy
---
## Page 692
node.Lazy = 0
func update(node *SegmentTreeNode, start, end int, track bool) {
1azyupdate (node)
if start > end 11 node == ni1 11 end  end 11 node == ni1 11 end > 1
if hasRepeated(A, B, mid) {
1ow = mid
}else{
high = mid - 1
return 1ow
func hashslice(arr []int, length int) []int {
//hash数组里面记录arr比length长出去部分的hash值
hash,pl,h := make([]int,len(arr)-1ength+l),1,0
for i := 0; i = length-1 {
hash[i-1ength+1] = h
h -= p] * arr[i-1ength+1]
return hash
func hasSamePrefix(A, B []int, length int) bool {
for i := 0; i = 0; i-- {
for j = len(B) - 1; j >= 0; j--{