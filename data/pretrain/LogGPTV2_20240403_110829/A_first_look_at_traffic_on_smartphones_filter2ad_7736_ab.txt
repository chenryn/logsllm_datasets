Productivity
unknown/other
Bytes (%)
58.02
10.82
10.33
8.51
5.83
4.18
0.36
0.15
1.79
)
F
D
C
(
s
r
e
f
s
n
a
r
t
f
o
%
100
80
60
40
20
0
Uplink
Downlink
0
10 100 100010000
1
Transfer size in KB
Table 2: Trafﬁc generated by applications in Dataset2.
Figure 4: Transfer sizes in Dataset2. The x-axis is log scale.
bytes. We see that the dominant ports correspond to HTTPS, HTTP,
and IMAP4S. These results suggest that the main trafﬁc generators
on smartphones of these users are browsing and email. HTTPS is
used by secure Web sites and email servers (including Exchange).
HTTP of course is used heavily as part of browsing and for down-
loading data of various kinds.
IMAP4S is the secure version of
the IMAP protocol for email. While IMAP4S has the most pack-
ets, it is third with respect to the number of bytes. This implies a
bias towards small packets, likely generated as part of frequently
polling for (often non-existent) new email. Many Dataset1 users
had two conﬁgured email accounts—a push-based work account
and a polling-based personal account. Increased adoption of push-
based email, by which clients are notiﬁed when new email arrives,
will change the nature of email trafﬁc.
The 37% share of HTTP trafﬁc that we ﬁnd is roughly half of
that observed for mobile handheld devices in homes [15] and 50%
less than that in residential broadband trafﬁc [14].
The large volume of trafﬁc that uses HTTP or HTTPS perhaps
indicates the trend among smartphone applications to tunnel their
data through these protocols, even when such data would not nor-
mally be considered HTTP payload (e.g., music, video and, social
apps).
Applications [Dataset2] Our second dataset lets us directly
observe what applications are generating smartphone trafﬁc. We
partition applications into several categories that are shown in Ta-
ble 2. “System” includes applications that are part of the OS (e.g.,
package manager, backup), and “Productivity” includes applica-
tions for calendars, alarms, and document handling (e.g., Ofﬁce,
PDF reader). The meanings of the other application categories are
what their names suggest.
We see in the table that browsing dominates smartphone trafﬁc.
As in Dataset1, messaging is also a signiﬁcant contributor. Media
and maps are other major contributors. These applications tend to
use HTTP and HTTPS for transport, but the application-level view
lets us quantify their contribution independently.
4. TRANSFER SIZES
In this section, we study the sizes of individual data transfers,
which impact throughput as well as power consumption [2]. We
identify individual transfers using TCP ﬂows. A TCP ﬂow is iden-
tiﬁed using IP addresses and ports. Packets of a ﬂow without an ex-
tended idle period (1 minute), are considered as part of one transfer;
ﬂows with long idle periods are considered separate transfers [6].
Long idle periods can arise within a TCP ﬂow if the client (e.g.,
email application) maintains an open connection to the server, to
avoid the TCP connection setup overhead for each transfer.
Figure 3 shows the CDF of transfer sizes in bytes and packets
across all users in Dataset1. The size in bytes includes the bytes
contributed by TCP and IP headers. While the mean transfer size
is 273 KB sent and 57 KB received, most transfers are extremely
small. When considering both directions cumulatively, 30% of
them have fewer than 1K bytes and 10 packets. These results are
consistent with those of Maier et al. for HTTP trafﬁc from hand-
held devices [15].
Figure 4 shows that Dataset2 is dominated by small transfers as
well. We deﬁne a transfer size differently in this case. Dataset2
has bytes sent and received by individual applications in 2-minute
long intervals. For each application, we combine contiguous inter-
vals with non-zero data exchanged as one transfer. If an application
exchanges data over multiple TCP connections, this deﬁnition ag-
gregates data across those connections into one transfer. Despite
this aggregation, the graph shows that most transfers are small.
The small transfer sizes that we observe have many implications.
Given the high amount of energy consumed by the 3G radio to go
from sleep to ready state and from idle to sleep state (§6), there can
283)
F
D
C
(
s
r
e
f
s
n
a
r
t
f
o
%
100
80
60
40
20
0
)
F
D
C
(
s
r
e
f
s
n
a
r
t
f
o
%
100
80
60
40
20
0
TCP+
SSL+
0
20
40
60
80 100
(a) Bytes (%)
TCP+
SSL+
0
20
40
60
80 100
(b) Time (%)
Figure 5: The overhead of layers below TCP and SSL (inclu-
sive) in Dataset1.
be a high energy overhead associated with them. Another impli-
cation is that a scheme like Catnap [8] is unlikely to reduce radio
power consumption. Catnap puts the radio to sleep during transfers
but is effective only for long transfers. In §6, we present a sim-
ple method that can reduce radio power consumption by 35% by
appropriately setting radio sleep timers.
Yet another implication of small transfers is that the already high
overhead of lower-layer protocols can dominate. This overhead
manifests as extra bytes that must be transmitted as headers as well
as extra time that it takes to complete handshakes.
We quantify these overheads at the transport (TCP) and transport
security (SSL) layers. According to our analysis 96% of smart-
phone trafﬁc is TCP-based and more than half uses SSL (through
HTTPS and IMAP4S). In Figure 5, “TCP+” captures overhead of
TCP and all layers below it. “SSL+” captures overhead of SSL and
all layers below it, and it is computed only for SSL-based transfers.
Figure 5(a) shows that the median TCP+ overhead at byte-level
is 12%, i.e., more than one in ten bytes is devoted to TCP or lower
layer headers. SSL further increases overhead. The median SSL+
overhead is 40%, and 20% of the transfers have an overhead that is
twice that amount.
Figure 5(b) shows the time overhead. TCP+ is measured as the
time between the ﬁrst SYN and the ﬁrst packet that contains non-
TCP bytes. If the radio is asleep when the SYN is sent, this measure
will include the time to wake up the radio. In the next section, we
quantify the radio waking overhead separately. SSL+ is measured
as the time between the ﬁrst TCP SYN and the ﬁrst packet that
contains non-TCP, non-SSL bytes. Thus, in addition to the TCP
handshake, it includes any time needed for SSL key exchange.
We see that the time overhead too is signiﬁcant. The median
overhead of TCP is 20%, i.e., a ﬁfth of the total transfer time is
spent waiting for TCP handshake to complete.
Surprisingly, SSL does not add much to the time overhead be-
yond TCP, which points to the effectiveness of SSL session key
caching for smartphone workloads. Smartphones frequently talk
using SSL to the same server (e.g., email server). Cached session
keys enable quick connection establishment without the overhead
of full key exchange. Most of the additional overhead due to SSL
appears to be due to their larger headers. In Figure 5(b), the SSL+
overhead appears slightly lower than TCP+ in some cases because
the two curves are computed over different sets of transfers.
In summary, we ﬁnd that most smartphone transfers are small.
Such transfers have a high energy cost and amplify the overhead of
lower-layer protocols. One way to avoid this overhead, which we
will investigate in the future, is to aggregate transfers across appli-
cations and across time. Using a proxy in the cloud can facilitate
such aggregation.
5. PERFORMANCE
We now investigate the performance of TCP transfers. We study
observed round trip time, throughput, and retransmission rate as
well as estimate what limits the transfer throughput. We use only
Dataset1 because Dataset2 does not have the granularity of infor-
mation needed for this analysis. As almost all of Dataset1 trafﬁc is
3G-based (§3), our analysis sheds light on the performance that is
seen by smartphones when using the 3G interface in real operating
conditions.
5.1 Round trip time
We estimate the RTT of a transfer as the difference between
the SYN and SYN-ACK packets. Accurate inference of RTT us-
ing data and acknowledgment packets is complicated by delayed
acknowledgments. If multiple SYN packets are transmitted for a
transfer, we use the last SYN packet. In some cases, the SYN-ACK
packet may be sent by a proxy in carrier network instead of the
contacted server. Even in these cases, we get a good estimate if the
dominant component of the RTT is the wireless delay [12].
We explicitly correct for a source of error that would otherwise
signiﬁcantly overestimate network RTT. If the radio is asleep when
the transfer is initiated, it includes the times it takes for the radio to
wake up and synchronize with the tower. To weed out this impact,
we focus on transfers that are initiated when the radio is in full
power mode. We identify such transfers as those that are initiated
within 3 seconds of the previous transmission or reception. The
idle period after which the radios go into a lower power mode is
well above this threshold (§6).
The “Trailing” curve in Figure 6(a) shows the RTTs observed by
such transfers. We see that the median is 125 ms but 10% of the
transfers observe an RTT of over 0.5 seconds. Such high variance
in RTT is consistent with controlled experiments [12]. A TCP ﬂow
that experiences high variance in RTT will suffer from delayed re-
sponse to congestion among other things. Such variance can stem
from a host of factors including link layer retransmissions (that are
not visible to us), network congestion, and overloaded equipment
inside the carrier network.
The “All” curve in the graph represents RTTs computed for all
transfers, not just those initiated when the radio is awake. The dif-
ference in the two curves quantiﬁes the overhead of radio wake-ups.
The difference is 400 ms at the median and 1.7 seconds at 90th per-
centile. The variation stems from the variable amount of time the
radio takes to fully synchronize with the tower and a wake-up may
already be in progress because of another transfer.
5.2 Retransmission rate
We now study how frequently packets are retransmitted in TCP
transfers. Retransmissions are identiﬁed using sequence numbers
and provide a good estimate of path loss rate. Their rate can dif-
fer slightly from loss rate due to TCP dynamics such as spurious
timeouts.
Across all transfers, the uplink retransmission rate is 3.7% and
the downlink rate is 3.3%. These loss rates are much higher than
those for wired paths. The median average loss rate seen from the
SLAC laboratory during 2008 was less than 0.1% for North Amer-
ica and less than 1% for most of the world [7]. However, our ob-
served wireless loss rate is similar to those inferred using controlled
experiments [12]. We show below that packet loss is the main bot-
tleneck for TCP throughput.
Figure 6(b) shows the retransmission rates for individual trans-
fers. This graph is based only on connections that send more than
10 data packets in a given direction. We see that roughly 60% of
the connections experience no retransmissions. But 25% of them
284)
F
D
C
(
s
r
i
a
p
K
C
A
/
N
Y
S
f
o
%
100
80
60
40
20
0
All
Trailing
10
100
(a) RTT (ms)
1000
)
F
D
C
(
s
r
e
f
s
n
a
r
t
f
o
%
100
80
60
40
20
0
)
F
D
C
(
s
r
e
f
s
n
a
r
t
f
o
%
100
80
60
40
20
0
Uplink
Downlink
10
0
30
(b) Retransmission rate (%)
20
Limit
Packet loss
Sender window