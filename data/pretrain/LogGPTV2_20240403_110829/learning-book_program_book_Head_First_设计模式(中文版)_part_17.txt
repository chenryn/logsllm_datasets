从复杂的依赖中帮你脱困。
这是新的一章
109
---
## Page 146
思考new
喂！已经过了三个章节，
你还没回等我关于new的问题。
我们不应该针对实现编程，但是当我
每次使用new时，不正是在针对实
现编程吗？
当看到“new”，就会想到“具体”
是的，当使用“new”时，你的确是在实例化一个具体类，所以
用的确实是实现，而不是接口。这是一个好问题，你已经知道了
代码绑着具体类会导致代码更脆弱，更缺乏弹性。
Duck duck = new MallardDuck();
个
要使用接口让代码
但是还是得建立具体类
具有弹性
的实例！
当有一群相关的具体类时，通常会写出这样的代码：
Duck duck;
if (picnic){
duck = new MallardDuck () ;
}else if (hunting)(
有一大惟不同的鸭子类，但是
duck = new DecoyDuck();
必须等到运行时，才知道该实
}else if (inBathTub){
duck = new RubberDuck();
例化哪一个。
这里有一些要实例化的具体类，究竞实例化哪个类，要在运行
时由一些条件来决定。
当看到这样的代码，一旦有变化或扩展，就必须重新打开这段
代码进行检查和修改。通常这样修改过的代码将造成部分系统
更难维护和更新，而且也更容易犯错。
110
第4章
---
## Page 147
工厂模式
但是，总是要创建对象吧！
而√ava只提供一个new关键词创
建对象，不是吗？还能有些
什么？
“new”有什么不对劲？
在技术上，new没有错，毕竞这是Java的基础部分。真正的
犯人是我们的老朋友“改变”，以及它是如何影响new的
使用的。
针对接口编程，可以隔离掉以后系统可能发生的一大堆
改变。为什么呢？如果代码是针对接口而写，那么通过多
态，它可以与任何新类实现该接口。但是，当代码使用大
量的具体类时，等于是自找麻烦，因为一旦加入新的具体
记住，这个设计应慎“对
类，就必须改变代码。也就是说，你的代码并非“对修改
扩展开效，对修改美闭”。
回顾一下第3章吧！
关闭”。想用新的具体类型来扩展代码，必须重新打开它。
所以，该怎么办？当遇到这样的问题时，就应该回到00设
计原则去寻找线索。别忘了，我们的第一个原则用来处理
改变，并帮助我们“找出会变化的方面，把它们从不变的
部分分离出来”。
RAIN
POMER
如何将实例化具体类的代码从应用中抽离，或者封装起来，使它们不会干扰应用的其他
部分？
你现在的位置
111
---
## Page 148
识别变化的方面
识别变化的方面
假设你有一个比萨店，身为对象村内最先进的比萨店主人，你的代码
可能这么写：
Pizza orderPizza(){
Pizza pizza = new Pizza () ;
为了让系统有弹性，我们很希望
pizza.prepare ();
这是一个抽象类或接口。但如果
pizza.bake () ;
这样，这些类或接口就无法直接
pizza.cut () ;
实例化。
pizza.box () ;
return pizza;
但是你需要更多比萨类型····…·
所以必须增加一些代码，来“决定”适合的比萨类型，然后再“制造”这
个比萨：
Pizza orderPizza(String type)(
现在把比萨类型传入
Pizza pizza;
7
orderPixxa()。
if(type.equals("cheese"))(
pizza =new CheesePizza();
}else if（type.equals(greek")
根据比萨的类型，我们实例化正
pizza =new GreekPizza();
确的具体类，然后将其碱值给
)elseif(type.equals("pepperoni")
pizxa实例变量。请注意，这里的
pizza=new PepperoniPizza();
任何比萨都必须实现Pizxa接口
pizza.prepare () ;
pizza.bake () ;
一里我们有了一个比萨，需要做一些准
pizza.cut () ;
备（就是擀据面皮、加上佐科，例如芝
pizza.box();
士），然后烘烤、切片、装盒！
return pizza;
每个Pizxa的子类型（Cheese-Pizxa
VessiePixxa等）都知道如何准备自己。
112
第4章
---
## Page 149
工厂模式
但是压力来自于增加更多的比萨类型
你发现你所有的竞争者都已经在他们的菜单中加人了一些流行风味的比萨：Clam
Pizza（蛤比萨）、VeggiePizza（素食比萨）。很明显，你必须要赶上他们，所
以也要把这些风味加进你的菜单中。而最近GreekPizza（希腊比萨）卖得不好，
所以你决定将它从菜单中去掉：
Pizza orderPizza (String type){
Pizza pizza;
此代码“温有”对修改
if (type.equals ("cheese")){
封闭。如果比萨店改变
pizza = new CheesePizza ();
这是变化的部分。
它所供应的比萨风味
}else-if(type.equais("greek")+
随着时间过去，比
就得进到这里来修改。
pisza_=-newGreekPizza () ;
萨莱单改变，这里
}else if (type.equals("pepperoni"){
就必须一改再改。
pizza = new PepperoniPizza () ;
}else if(type.equals（clam"){
pizza -new ClamPizza();
}else if (type.equals("veggie")
pizza =new
VeggiePizza();
pizza.prepare () ;
pizza.bake () ;
这里是我们不想改变的地方。因
pizza.cut();
为比萨的准备、烘增、包装，多
pizza.box() ;
年来都持续不变，所以这部分的
return pizza;
代码不会改变，只有发生这些动
作的比萨会改变。
很明显地，如果实例化“某些”具体类，将使orderPizza(出问题，而且也无法让
orderPizza(对修改关闭；但是，现在我们已经知道哪些会改变，哪些不会改变，该是
使用封装的时候了。
你现在的位置
113
---
## Page 150
封装创建对象的代码
封装创建对象的代码
现在最好将创建对象移到orderPizza(之外，但怎么做呢？
if(type.equals（²cheese"})
这个嘛，要把创建比萨的代码移到另一个对象中，由这个
pizza -nev CheesePizza（）;
新对象专职创建比萨。
elseif(type.equals（pepperoni)(
pizza -new PepperoniPizza(）;
}else ir（type.equals(rclam"）（
pizza -new ClamPizza();
}else ir（type.equals（veggie")(
pizza -new VeggiePizza();
Pizza orderPizza (String type)(
Pizza pizza;
首无，把创建对象的代码
从orderPixxa(）方法中抽离。
pizza.prepare () ;
K
pizza.bake () ;
pizza.cut();
然后把这部分的代码搬到另一个对
pizza.box () ;
象中，这个新对象只管如何创建比
return pizza;
这里该怎么写？
萨。如果任何对象想要创建比萨，
找它就对了。
我们称这个新对象为“工厂”。
工厂（factory）处理创建对象的细节。一且有了SimplePizzaFactory，
orderPizza(就变成此对象的客户。当需要比萨时，就叫比萨工厂做
一个。那些orderPizza(方法需要知道希腊比萨或者蛤比萨的日子一
去不复返了。现在orderPizza(方法只关心从工厂得到了一个比萨，而
这个比萨实现了Pizza接口，所以它可以调用prepareO、bakeO、cut(O、
box0来分别进行准备、烘烤、切片、装盒。
还有一些细节有待补充，比方说，原本在orderPizzaO方法中的创建
代码，现在该怎么写？现在就来为比萨店实现一个简单的比萨工厂，
DD
来研究这个问题
114
第4章
---
## Page 151
工厂模式
建立一个简单比萨工厂
先从工厂本身开始。我们要定义一个类，为所有比萨封装创建对象的代码。代码像这样
SimplePixxaFactory是我们的新类，它只做一件事
在这个工厂内定
首先，
情：帮它的客户创建比萨。
义一个createPizxa(）方法。
所有客户用这个方法来
public class SimplePizzaFactory
实例化新对象。
publicPizzacreatePizza(String type)(
Pizza pizza = null;
if (type.equals ("cheese")){
pizza = new CheesePizza ();
}else if (type,
这是从orderPizza(）方法中移过
equals("pepperoni"))(
pizza = new PepperoniPizza() ;
来的代码。
)else if (type.equals("clam")){
pizza = new ClamPizza () ;
}else if (type.equals("veggie")){
pizza = new VeggiePizza() ;
return pizza;
这个代码没什么变动，和原本orderPixxa(方法中的代码
一样，依然是以比萨的类型为参数。
问：
thereareno
这么做有什么好处？
DumbQuestions
我曾看过一个类似的设
似乎只是把问题搬到另一个对象罢
的价钱和描述。可能还有一个
计方式，把工厂定义成一个静态的
了，问题依然存在。
HomeDelivery（宅急送）类，会）
方法。这有何差别？
以与PizzaShop类不同的方式来处
合：
别忘了，SimplePizza-
理比萨。总而言之，SimplePizza-
合：
利用静态方法定义一个
Factory可以有许多的客户。虽
Factory可以有许多的客户。
简单的工厂，这是很常见的技巧、
然目前只看到orderPizza（）方法
所以，把创建比萨的代码包装进一
常被称为静态工厂，为何使用静态
是它的客户，然而，可能还有
个类，当以后实现改变时，只需修
方法？因为不需要使用创建对象的
PizzaShopMenu（比萨店莱单）
改这个类即可。
方法来实例化对象。但请记住、这
类，会利用这个工厂来取得比萨
别忘了，我们也正要把具体实例化
也有缺点，不能通过继承来改变创
的过程，从客户的代码中删除！
建方法的行为。
你现在的位置
115
---
## Page 152
简单工厂
重做PizzaStore类
是时候修改我们的客户代码了，我们所要做的是仰仗工厂来为我们
创建比萨，要做这样的改变：
现在我们为PixxaStore加o一个对
SimplePixxaFactory6的引）用。
public class PizzaStore f
SimplePizzaFactory factory;
publicPizzaStore(SimplePizzaFactoryfactory)(
PixzaStove的构造器，需要一个
this.factory-factory;
工厂作为参数。
public Pizza orderPizza(String type) {
Pizza pizza;
pizza=factory.createPizza（type);
pizza.prepare ();
而orderPixxa(）方法通过简单传入
pizza.bake () ;
订单类型来使用工厂创建比萨。
pizza.cut () ;
pizza.box ();
return pizza;
请注意，我们把new梅作符替换
//这里是其他方法
成工厂对象的创建方法。这里
不再使用具体实例化！
BRAIN
POWER
我们知道对象组合可以在运行时动态改变行为，因为我们可以更换不同的实现。在
PizzaStore例子中要如何做到这点呢？有哪些工厂的实现能够被我们自由地更换？
我不知道你怎样，但我正在想的是纽约、芝加哥、加州风味的比萨工厂（别忘了还有纽黑
116
第4章
---
## Page 153
工厂模式
定义简单工厂
模
式
简单工厂其实不是一个设计模式，反而比较像是一种编程习惯。但由于经常被使
荣
用，所以我们给它一个“HeadFirstPattern荣誉奖”。有些开发人员的确是把这个
誉
编程习惯误认为是“工厂模式”（FactoryPattern）。当你下次和另一个开发人员
奖
之间无话可说的时候，这应当是打破沉默的一个不错的话题。
不要因为简单工厂不是一个“真正的”模式，就忽略了它的用法。让我们来看看
新的比萨店类图：
这是创建比萨的“工厂”，它应该
是我们的应用中唯一用到具体比萨
这是工厂的“产品”：比
类的地方..
萨！
把Pixxa定义为抽象类，
PizzaStore
SimplePizzaFactory
Pizza
具有一些有用的实现
orderPizza()
createPizza()
prepere[
这些实现可以被覆盖。
bake()
cut)
box)
这是工厂的“客户”
这个创建方法通常声明为
PixxaStoze现在通过
静态。
SimplePizxaFactory得
比萨的实例。
CheesePizza
PepperoniPizza
VeggiePizza
ClamPizza
这是我们的“具体户品”，每个户品
都必须实现Pizza接口★（在本例中是
指“扩展抽象的Pixxa类”）并设计成一
个具体类。这样一来，就可以被工厂创
建，并返回给客户。
谢谢简单工厂来为我们暖身。接下来登场的是两个重量级的模式，它们都是工厂。
但是别担心，未来还有更多的比萨！
★再提醒一次：在设计模式中，所调的“实现一个接口”并“不一定”表示“写一个类，并利用
implement关键词来实现某个ava接口”。“实现一个接口”远指“实现某个超类型（可以是类或接口）
的某个方法”。
你现在的位置
117