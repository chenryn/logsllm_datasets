The home computer application, developed for Mi-
crosoft Windows in Visual C++ 6.0, uses and modi-
ﬁes the VNC server and OpenSSL sources. First, the VNC
server is modiﬁed to run over SSL sockets instead of stan-
dard sockets. The VNC server is also changed to send out-
put packets to a different host than the one from which
it receives input packets. Whenever it receives an in-
put message from the PDA (mouse or keyboard event),
it updates the screen and sends the update to the un-
trusted terminal. The VNC server discards any keyboard
or mouse input packets received from the untrusted termi-
nal after the initialization phase of the VNC protocol is
over.
Several modiﬁcations had to be made to the OpenSSL li-
brary. We needed to change the server encryption key pe-
riodically (without changing the master secret or any other
keys) and OpenSSL does not provide an interface for this
functionality. We also changed the SSL record header to in-
clude a key identiﬁer, such that the SSL client (UT) knows
which key to use to decrypt that packet.
The untrusted terminal application is also developed in
Visual C++ 6.0 for Microsoft Windows. It is based on the
VNC client and OpenSSL sources. The VNC viewer is
modiﬁed to run over SSL and to receive the initial VNC
password and root certiﬁcate from the PDA. It also keeps
track of the 10 most recent encryption keys received from
the PDA and the index of the current key identiﬁer. When-
ever it receives an SSL packet, it checks its key identiﬁer.
If the key identiﬁer is greater than the current one, it waits
for the key from the PDA; if it receives the key, it updates
the client read key in SSL; otherwise, if a timeout has ex-
pired, it concludes that it lost the connection with the PDA
and the application triggers an exception. If the key identi-
ﬁer is less than the current one, then it retrieves the key from
the key table and changes the client read key in SSL.
The PDA application is written in eMbedded Visual C++
3.0 for Windows CE. From the VNC viewer sources, it uses
only those ﬁles that process keyboard and mouse events.
In our implementation, the untrusted terminal provides the
PDA with the necessary network connectivity once the PDA
is plugged into the terminal. In particular, the connection
from the PDA to the home computer ﬂows through the un-
trusted terminal. Remember, though, that this connection is
end-to-end SSL-protected.
The application consists of a full-screen window, which
receives mouse events from the PDA stylus, thus acting
like a touchpad. The keyboard and mouse events are en-
coded and sent over the SSL tunnel to the home computer.
In addition, we augmented the PDA with (parts of) an op-
tical mouse (see Figure 1). In the current implementation,
the communication between the PDA and the untrusted ter-
minal takes place over a (USB) wire, but we could also
use a secure wireless connection authenticated through a
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:42 UTC from IEEE Xplore.  Restrictions apply. 
428
362
382
total traffic in KB
450
400
350
300
250
200
150
100
50
0
Figure 3. Overhead comparison of plain VNC, SSL-secured VNC, and three-party VNC
plain VNC
VNC over SSL 3-party VNC
location-limited channel [4]. In the latter scenario, rather
than plugging our PDA/mouse into the terminal, we re-
quire that it has its own network connectivity, and we would
merely point the PDA/mouse at the untrusted terminal we
wish to use.
4.4. Performance Evaluation
We evaluated the overhead that our three-party secure re-
mote terminal introduces compared to a two-party remote
terminal application. We considered three protocols: plain
VNC, VNC over SSL and the three-party VNC. Using Ethe-
real [13], we measured the number of bytes sent in the
three-party VNC for a benchmark in which we connected to
the home computer, opened an email application, and com-
posed and sent an e-mail message. From this, we estimated
a lower bound on the trafﬁc generated by the plain VNC,
and the VNC-over-SSL protocols.
We considered bandwidth overhead (rather than, say
measurements of latency) as the appropriate metric for our
system for several reasons. First, our benchmark applica-
tion, email composition, takes an amount of time primarily
dependent on how long it must wait for the user to enter the
message – it is not CPU bound. Second, timing measure-
ments for our protocol will depend heavily on both the pro-
cessor characteristics of the trusted device, and the band-
width of its network connection. Measurements of band-
width overhead are independent of these. Finally, latency
and timing requirements can be estimated from measure-
ments of bandwidth overhead using the characteristics of
the trusted device under consideration, the bandwidth of its
connections to the UT and HC, and existing benchmarks
showing the proportion of time of SSL exchanges spent in
cryptographic computation and other activities [8].
Let us detail our analysis. We measured the number of
bytes sent on the links HC ↔ PDA and HC ↔ UT for the
three-party VNC protocol1 and the results were:
The trafﬁc on the link PDA ↔ UT is negligible.
1
S1 HC → UT : 361.450 KB
S2 UT → HC :
31.815 KB
S3 HC → PDA :
14.470 KB
PDA → HC :
S4
20.611 KB
The total number of bytes sent in the three-party VNC
protocol is S1 + S2 + S3 + S4 = 428.346 KB. In the two-
party VNC over SSL protocol, the packets to be sent are
at least those on the links S1 and S4, which are VNC out-
put and VNC input packets, respectively. The packets on the
links S2 and S3 are mostly ACK packets and some of them
may be sent in the VNC over SSL protocol. Thus, a lower
bound on the number of bytes sent in the VNC over SSL
protocol is S1 + S4 = 382.061 KB. In the worst case, our
three-party VNC protocol introduces an overhead of 12.1%
compared to the two-party VNC over SSL protocol.
We can evaluate how much overhead the SSL protocol
introduces in terms of the number of bytes. On the links S1
and S4, there were a total of 792 (SSL) packets sent. With-
out SSL, each packet would have been 25 bytes smaller
(SSL adds to each record a 5 bytes header and a 20 bytes
MAC for data integrity), which means that in total, SSL in-
troduces an additional total of 19.8 KB compared to (the
estimated lower bound of) plain VNC, which corresponds
to an overhead of 5.5%. Figure 3 summarizes our ﬁndings:
Compared to plain VNC, we estimate that an SSL-based
version of VNC would add 5.5% of trafﬁc overhead, and
our three-party-based protocol adds an additional 12.1%.
5. Conclusions
Accessing a home computing environment from an un-
trusted public terminal is currently a risky endeavor, as
well-publicized security compromises show. In this paper
we have presented a system that lowers that risk consider-
ably: First, the public terminal never learns credentials that
allow it to gain full access to the user’s home computing
environment. Second, the access that we do grant to the
untrusted terminal is read-only – it cannot manipulate the
home computing environment in any way. Third, which part
of the home computing environment is exposed to the un-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:42 UTC from IEEE Xplore.  Restrictions apply. 
[10] M. D. Corner and B. D. Noble. Protecting applications with
transient authentication. In The First International Confer-
ence on Mobile Systems, Applications, and Services (Mo-
biSys ’03), 2003.
[11] J. DeTreville. Binder, a logic-based security language.
In
2002 IEEE Symposium on Security and Privacy, Oakland,
CA, May 2002.
[12] C. M. Ellison, B. Frantz, B. Lampson, R. Rivest, B. M.
Thomas, and T. Ylonen. SPKI Certiﬁcate Theory, Septem-
ber 1999. RFC2693.
[13] Ethereal Project. Ethereal. http://www.ethereal.
com.
[14] A. O. Freier, P. Karlton, and P. C. Kocher. The SSL Proto-
col Version 3.0. IETF - Transport Layer Security Working
Group, The Internet Society, November 1996. Internet Draft
(work in progress).
[15] GoToMyPC. GoToMyPC. http://www.gotomypc.
com.
[16] C. Lesniewski-Laas and M. F. Kaashoek. SSL splitting: Se-
curely serving data from untrusted caches. In Proceedings
of the 12th USENIX Security Symposium, Washington, D.C.,
August 2003.
[17] B. A. Myers, J. O. Wobbrock, S. Yang, B. Yeung, J. Nichols,
and R. Miller. Using handhelds to help people with mo-
tor impairments.
In Proceedings of the Fifth International
ACM SIGCAPH Conference on Assistive Technologies; AS-
SETS 2002, Edinburgh, Scotland, July 2002.
[18] T. Richardson, Q. Stafford-Fraser, K. R. Wood, and A. Hop-
per. Virtual network computing. IEEE Internet Computing,
2(1):33–38, 1998.
[19] T. Richardson and K. Wood. The RFB Protocol. ORL, Cam-
bridge, January 1998.
[20] The Register.
Guilty plea in Kinko’s keystroke ca-
per. http://www.theregister.co.uk/content/
55/31832.html.
trusted terminal is entirely in the hands of the user. This
unique combination of trusted input device and read-only
access for an untrusted terminal allows for a natural and
safe interaction with the user’s home computing environ-
ment while away from home. It introduces only moderate
overhead compared to insecure, or merely trafﬁc-protected,
remote terminal applications, as we have demonstrated in
our prototype.
6. Acknowledgments
We would like to thank Paul Stewart for hacking an opti-
cal PS/2 mouse so that it can be used with the serial port of
a Compaq iPAQ, as well as creating the necessary cables to
connect (the remnants of) an optical mouse to the PDA, and
the PDA/mouse to the untrusted terminal. We would also
like to thank Mike Reiter for useful discussions concerning
the veriﬁcation of the output displayed by the untrusted ter-
minal.
References
[1] M. Abadi, M. Burrows, B. Lampson, and G. D. Plotkin.
A calculus for access control in distributed systems. ACM
Transactions on Programming Languages and Systems,
15(4):706–734, September 1993.
[2] A. W. Appel and E. W. Felten. Proof-carrying authentica-
tion. In Proceedings of the 6th ACM Conference on Com-
puter and Communications Security, Singapore, November
1999.
[3] D. Balfanz and E. Felten. Hand-held computers can be better
smart cards. In Proceedings of USENIX Security ’99, Wash-
ington, DC, August 1999.
[4] D. Balfanz, D. Smetters, P. Stewart, and H. C. Wong. Talk-
ing to strangers: Authentication in ad-hoc wireless networks.
In Proceedings of the 2002 Network and Distributed Systems
Security Symposium (NDSS’02), San Diego, CA, February
2002. The Internet Society.
[5] D. J. Barrett and R. E. Silverman. SSH The Secure Shell.
O’Reilly, 2001.
[6] Blaze, Feigenbaum, and Naor. A formal treatment of re-
In EUROCRYPT: Advances in
motely keyed encryption.
Cryptology: Proceedings of EUROCRYPT, 1998.
[7] M. Blaze. High-bandwidth encryption with low-bandwidth
smartcards. In Proceedings of the Fast Software Encryption
Workshop, number 1039 in Lecure Notes in Computer Sci-
ence, pages 33–40. Springer-Verlag, 1996.
[8] C. Coarfa, P. Druschel, and D. S. Wallach. Performance anal-
ysis of TLS web servers.
In Proceedings of Network and
Distributed System Security Symposium, NDSS ’02, Febru-
ary 2002.
[9] M. D. Corner and B. D. Noble. Zero-interaction authentica-
tion. In Proceedings of the eighth Annual International Con-
ference on Mobile Computing and Networking (MOBICOM-
02), pages 1–11, New York, Sept. 23–28 2002. ACM Press.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:42 UTC from IEEE Xplore.  Restrictions apply.