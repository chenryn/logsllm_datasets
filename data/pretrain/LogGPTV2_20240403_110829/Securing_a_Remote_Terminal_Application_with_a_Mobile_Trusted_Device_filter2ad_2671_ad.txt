### Home Computer Application

The home computer application, developed for Microsoft Windows using Visual C++ 6.0, integrates and modifies the VNC server and OpenSSL sources. Specifically, the VNC server is adapted to operate over SSL sockets instead of standard sockets. Additionally, it is configured to send output packets to a different host than the one from which it receives input packets. When the VNC server receives an input message from the PDA (such as a mouse or keyboard event), it updates the screen and sends the update to the untrusted terminal. After the initialization phase of the VNC protocol, the VNC server discards any keyboard or mouse input packets received from the untrusted terminal.

### Modifications to OpenSSL

Several modifications were made to the OpenSSL library to meet the project's requirements. One key change was the periodic alteration of the server encryption key without modifying the master secret or other keys, a functionality not natively supported by OpenSSL. Another modification involved changing the SSL record header to include a key identifier, allowing the SSL client (untrusted terminal) to determine which key to use for decrypting each packet.

### Untrusted Terminal Application

The untrusted terminal application, also developed in Visual C++ 6.0 for Microsoft Windows, is based on the VNC client and OpenSSL sources. The VNC viewer was modified to run over SSL and to receive the initial VNC password and root certificate from the PDA. It maintains a record of the 10 most recent encryption keys and the current key identifier. Upon receiving an SSL packet, it checks the key identifier. If the identifier is greater than the current one, it waits for the key from the PDA; if the key is received, it updates the client read key in SSL. If a timeout occurs, it assumes the connection with the PDA is lost and triggers an exception. If the key identifier is less than the current one, it retrieves the key from the key table and updates the client read key in SSL.

### PDA Application

The PDA application, written in eMbedded Visual C++ 3.0 for Windows CE, utilizes only the files from the VNC viewer that process keyboard and mouse events. In our implementation, the untrusted terminal provides the necessary network connectivity when the PDA is connected. The connection from the PDA to the home computer flows through the untrusted terminal, ensuring end-to-end SSL protection. The PDA application features a full-screen window that receives mouse events from the PDA stylus, functioning like a touchpad. Keyboard and mouse events are encoded and sent over the SSL tunnel to the home computer. We also augmented the PDA with parts of an optical mouse. Currently, communication between the PDA and the untrusted terminal occurs over a USB wire, but a secure wireless connection authenticated through a location-limited channel could be used.

### Performance Evaluation

We evaluated the overhead introduced by our three-party secure remote terminal compared to a two-party remote terminal application. We considered three protocols: plain VNC, VNC over SSL, and the three-party VNC. Using Ethereal, we measured the number of bytes sent during a benchmark where we connected to the home computer, opened an email application, composed, and sent an email message. This provided a lower bound on the traffic generated by the plain VNC and VNC-over-SSL protocols.

Bandwidth overhead was chosen as the primary metric for several reasons. First, the time taken for email composition primarily depends on user input, not CPU performance. Second, timing measurements would be heavily influenced by the processor characteristics and network bandwidth of the trusted device. Bandwidth measurements, however, are independent of these factors. Finally, latency and timing can be estimated from bandwidth measurements using the characteristics of the trusted device, its network connections, and existing benchmarks.

### Detailed Analysis

For the three-party VNC protocol, the measured traffic on the links HC ↔ PDA and HC ↔ UT was:
- S1 (HC → UT): 361.450 KB
- S2 (UT → HC): 31.815 KB
- S3 (HC → PDA): 14.470 KB
- S4 (PDA → HC): 20.611 KB

The total traffic for the three-party VNC protocol is 428.346 KB. For the two-party VNC over SSL protocol, the minimum traffic is S1 + S4 = 382.061 KB. Thus, the three-party VNC protocol introduces an overhead of 12.1% compared to the two-party VNC over SSL protocol.

In terms of SSL overhead, 792 SSL packets were sent on links S1 and S4. Without SSL, each packet would be 25 bytes smaller (due to the 5-byte header and 20-byte MAC). This results in an additional 19.8 KB, or a 5.5% overhead compared to plain VNC. Figure 3 summarizes these findings, showing that an SSL-based version of VNC adds 5.5% traffic overhead, while our three-party protocol adds an additional 12.1%.

### Conclusions

Accessing a home computing environment from an untrusted public terminal is currently risky. Our system significantly reduces this risk by ensuring that the public terminal never learns credentials for full access. The untrusted terminal has read-only access, preventing it from manipulating the home environment. The user controls which parts of the home environment are exposed. This combination of a trusted input device and read-only access for an untrusted terminal allows for a natural and safe interaction, with only moderate overhead compared to insecure or merely traffic-protected remote terminal applications.

### Acknowledgments

We thank Paul Stewart for modifying an optical PS/2 mouse to work with the serial port of a Compaq iPAQ and creating the necessary cables. We also thank Mike Reiter for discussions on verifying the output displayed by the untrusted terminal.

### References

[1] M. Abadi, M. Burrows, B. Lampson, and G. D. Plotkin. A calculus for access control in distributed systems. ACM Transactions on Programming Languages and Systems, 15(4):706–734, September 1993.
[2] A. W. Appel and E. W. Felten. Proof-carrying authentication. In Proceedings of the 6th ACM Conference on Computer and Communications Security, Singapore, November 1999.
[3] D. Balfanz and E. Felten. Hand-held computers can be better smart cards. In Proceedings of USENIX Security ’99, Washington, DC, August 1999.
[4] D. Balfanz, D. Smetters, P. Stewart, and H. C. Wong. Talking to strangers: Authentication in ad-hoc wireless networks. In Proceedings of the 2002 Network and Distributed Systems Security Symposium (NDSS’02), San Diego, CA, February 2002. The Internet Society.
[5] D. J. Barrett and R. E. Silverman. SSH The Secure Shell. O’Reilly, 2001.
[6] Blaze, Feigenbaum, and Naor. A formal treatment of remotely keyed encryption. In EUROCRYPT: Advances in Cryptology: Proceedings of EUROCRYPT, 1998.
[7] M. Blaze. High-bandwidth encryption with low-bandwidth smartcards. In Proceedings of the Fast Software Encryption Workshop, number 1039 in Lecure Notes in Computer Science, pages 33–40. Springer-Verlag, 1996.
[8] C. Coarfa, P. Druschel, and D. S. Wallach. Performance analysis of TLS web servers. In Proceedings of Network and Distributed System Security Symposium, NDSS ’02, February 2002.
[9] M. D. Corner and B. D. Noble. Zero-interaction authentication. In Proceedings of the eighth Annual International Conference on Mobile Computing and Networking (MOBICOM-02), pages 1–11, New York, Sept. 23–28 2002. ACM Press.