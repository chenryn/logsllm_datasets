IMEI, again bypassing the Android layer.
One USB debugging enabling command is found in
LG phones, together with an AT command to unlock
the screen. After USB debugging is enabled using this
AT command, there is no indication on the UI showing
USB debugging was enabled, and there is no prompt from
the UI asking for the key to be added. This shows that
the whole Android layer is bypassed without being noti-
ﬁed when we enable USB debugging using this AT com-
mand. Commands for sending touchscreen events and
keystrokes are also discovered for LG phones and the S8+;
we can see the indications on the screen. We suspect these
AT commands were mainly designed for UI automation
testing, since they mimic human interactions. Unfortu-
nately, they also enable more complicated attacks which
only requires a USB connection, as we will show in a later
section.
4.2.3 Sensitive Information Leaking
While Android security has been improving over the
years with respect to protecting privacy information, we
found quite a few AT commands providing different
kinds of information, including IMEI, battery level, phone
model, serial number, manufacturer, ﬁlesystem partition
information, software version, Android version, hard-
ware version, SIM card details, etc., as shown in Ta-
ble 9.10 Vendors also introduce their own commands to
7 While Odin wipes everything by default, LGUP leaves the user data
intact in the device if “Upgrade” mode is chosen.
8Level “full functionality” is where the highest level of power is
drawn.
9We discovered a bug leading to arbitrary ﬁle reads in the
AT%PROCCAT and AT%SYSCAT commands. See Section 4.3 for
more details.
10For more such commands, please refer to Table 14 in the Appendix.
Command
ATI
AT%SYSCAT
AT%PROCCAT
AT+DEVCONINFO
AT+GMR
AT+IMEINUM
AT+SERIALNO
AT+SIZECHECK
AT+VERSNAME
AT+CLAC
AT+ICCID
Action
Manufacturer, model,
revision, SVN, IMEI
Read and return data
from /sys/*9
Read and return data
from /proc/*
Phone model, serial
number, IMEI, and etc.
Phone model
IMEI number
Serial number
Filesystem partition
information
Android version
List all supported AT
commands
Sim card ICCID
Tested Phones
G4/S8+/Nexus5/
ZenPhone2
G3/G4
G3/G4
Note2/S7Edge/S8+
G3/G4/Note2/S8+/
ZenPhone2
Note2/S7Edge/S8+
Note2/S7Edge/S8+
Note2/S7Edge/S8+
S7Edge/S8+
G3/G4/S7Edge/Nexus5/
ZenPad/ZenPhone2
G3/G4/Nexus5
Table 9: A selection of commands that leak sensitive in-
formation about the device.
Figure 6: Output from “AT+DEVCONINFO” on a Sam-
sung S8+. Note information in bold corresponding to
model number, serial number, IMEI, and connection type.
ease querying. These are unauthenticated commands that
can be accessed by anyone. One example command is
“AT+DEVCONINFO” from S8+, providing detailed in-
formation about the phone as shown in Figure 6. Shown
in bold are examples of sensitive device information, in-
cluding device model (MN), serial number (SN), IMEI,
and connection over MTP.
We also ﬁnd 3 AT commands that report all supported
AT commands on the device. “AT+CLAC” is a stan-
dard command; “AT+LIST” only works on Nexus 5;
and “AT$QCCLAC” appears to be a Qualcomm-speciﬁc
command supported by Qualcomm baseband processors.
Note that both “AT+CLAC” and “AT$QCCLAC” could
be supported at the same time within a device, returning
different lists of supported AT commands. We also lever-
aged these commands to limit the scope of AT commands
to try when we attempted to un-brick the LG G4.
4.2.4 Modem AT Proxy
other Android
Unlike
on
sys.usb.config to manage the USB functionality,
ASUS ZenPhone 2 has a unique setting to enable the
devices, which
rely
282    27th USENIX Security Symposium
USENIX Association
[['AT+DEVCONINFO\r+DEVCONINFO:MN(SM-G955U);BASE(SM-N900);VER(G955USQU1AQD9/G955UOYN1AQD9/G955USQU1AQD9/G955USQU1AQD9);HIDVER(G955USQU1AQD9/G955UOYN1AQD9/G955USQU1AQD9/G955USQU1AQD9);MNC();MCC();PRD(VZW);;OMCCODE();SN(R38HC09NWMR);IMEI(354003080061555);UN(9887BC45395656444F);PN();CON(AT,MTP);LOCK(NONE);LIMIT(FALSE);SDP(RUNTIME);HVID(Data:196609,Cache:262145,System:327681);USER(OWNER)\r','#OK#\r', 'OK\r']]Command
Action
AT+XDBGCONF
Debug conﬁguration
AT+XABBTRACE
BB trace conﬁguration
AT+XSYSTRACE
AT+XSIMSTATE
System trace port
conﬁguration
SIM and phone lock status
AT+XLOG=95,1
Exception log reading
AT+XLEMA
Emergency number reset
AT+XNVMPLN
PLMN info list for GSM,
UMTS, and LTE tables
Tested Phones
ZenPhone2-mode2/
ZenPad
ZenPhone-mode2/
ZenPad
ZenPhone2-mode2/
ZenPad
ZenPhone2-mode2/
ZenPad
ZenPhone2-mode2/
ZenPad
ZenPhone2-mode2/
ZenPad
ZenPhone2-mode2
Table 10: Commands speciﬁc to the AT proxy mode that
allows debugging and tracing inside the modem.
hidden modem interface, called AT proxy mode, as shown
in Table 6. This modem AT proxy does not appear to be
speciﬁc to ASUS, but also occurs on Android devices
running Intel Atom processors from other vendors, in-
cluding Intel itself. According to Intel, “this functionality
provides the link to Modem to allow to use AT commands
through a virtual com port” [33]. Many commands found
in ZenPhone 2 also work on ZenPad.
There are 4 modes in ZenPhone 2, numbered from 1
to 4. Based on our testing, mode 1 works like a tradi-
tional modem and responds to most of the AT commands
from the standards, including making a call using “ATD”
and sending a SMS message using “AT+CMGS”. While
most standard commands still work on mode 2, a new
series of command starting with “AT+X” are also sup-
ported. We list some of these in Table 10. We base our
detailed description for each command on online docu-
mentation from Telit [51]. Mode 3 is similar to mode
2, except for truncation of responses to some commands.
Some commands stop working as well in mode 3, e.g.,
“AT+XABBTRACE”. Mode 4 is similar to mode 3, ex-
cept more commands worked without returning errors,
such as “AT+GMI” and “AT+GMM”. In general, once
this AT proxy mode is enabled, attackers can exﬁltrate
any information within the modem by setting debug or
trace points.
4.2.5 Others
We present other commands which do not directly ﬁt into
the previous categorizations but have security impacts
as well in Table 11. For example, we found 3 hidden
menus on LG phones during our testing, including Min-
iOS menu, Hidden menu11, and MID result menu. All
of them provide different information, testing, and de-
bugging functionalities. Even though these hidden menus
were exploited before [22], they still exist and can be trig-
11It is called Hidden menu.
Command
Action
Tested Phones
AT+VZWAPNE
AT$SPDEBUG
Manage APN settings
Engineering debugging
information
MiniOS mode
AT%MINIOS
Hidden menu
AT%VZWHM
Baseband version
AT%VZWHM
AT%VZWIOTHM
Baseband version
AT%AUTOUITEST MID result menu
G3/G4
Nexus5
G3/G4
G3/G4
Nexus5
Nexus5
G3/G4
Table 11: A section of commands that provide APN set-
tings, debugging information, and hidden menus.
gered by a single AT command. Interestingly, the com-
mand used to trigger the hidden menu is also found on
Nexus 5. We suspect that it is partially because Nexus 5
was made by LG. However, the response of the command
is overwritten to return the baseband version. Instead, a
separate AT command was added into Nexus 5 to provide
engineering debugging information.
4.3 Attacks
After analyzing many AT commands across vendors, we
have narrowed down the set to a selection of useful or in-
teresting commands from an attacker’s perspective. To
demonstrate the potential impact of exposed AT interfaces
on phones, we describe actual and theoretical attacks that
may be mounted against them.
Lockscreen Bypassing & Event Injection. With the
discovery of the LG G4’s AT interface and knowledge of
certain AT commands, we developed a proof of concept
attack against the phone in order to enable USB debug-
ging without any user interaction. Access to USB debug-
ging and developer options would allow a local attacker
connected to USB to install new unsigned applications
with high permissions to achieve persistence on a victim’s
phone. Additionally, they may be able to further compro-
mise the system using an Android Kernel exploit through
the Android Debug Bridge (ADB).
To demonstrate this attack, we combine AT commands
to (1) bypass the lock screen (AT%KEYLOCK=0), (2) nav-
igate to the settings menu using touchscreen automation,
and (3) allow USB debugging from our attacking machine
(AT%USB=adb). The KEYLOCK AT command bypasses the
lock screen even if a pattern or passcode is set [23]. From
there, arbitrary touch events can be sent to control the
phone.12 Given that nearly 28% of users do not have a
pin, pattern, or biometric lock [19], this attack would still
be feasible even without the LG-speciﬁc KEYLOCK com-
mand.
12Once these commands are patched, visit https://github.com/
FICS/atcmd for an automated script and the required utilities.
USENIX Association
27th USENIX Security Symposium    283
Confused Deputy Path Traversal. Through manual
auditing of the LG G4’s ﬁrmware image in IDA Pro
(speciﬁcally in atd), we discovered that the AT%PROCCAT
and AT%SYSCAT commands are intended to open, read,
and send back the contents of a ﬁle relative to the /proc
and /sys directories respectively. While this information
alone would be useful for an attacker mounting an attack
against the system, we discovered that these commands
are vulnerable to a path traversal attack. This means
we can send AT%PROCCAT=../arbitrary/file and re-
ceive back the entire file contents over the AT interface.
As a result, we are able to access all data in /sdcard, in-
cluding arbitrary private information. If pictures or appli-
cation data is stored in the /sdcard directory, then they can
be read by this attack. In addition, we attempted to access
Android user data in the /data/data/com.target.app
directories, but were unsuccessful due as no allow rule
was made for atd to access this region. The atd daemon
runs as the Android System user and acts within a rea-
sonably privileged SEAndroid context. It is unclear how
permissive the AT distributors’ policies are, but future au-
diting will focus on this area.
Memory Corruption. During our manual AT com-
mand testing, we discovered multiple buffer overﬂows
in the LG G3 & G4 atd process and one in the Sam-
sung S8+ connfwexe daemon. Upon inspection of
the tombstones (Android’s crash dump), all appeared to
be crashes via SIGABRT trigged from FORTIFY fail-
ures [36]. Although these out-of-bounds writes were
caught by FORTIFY SOURCE and are not exploitable, it is
possible that further stress testing and auditing of these
native daemons could yield an exploitable vulnerability.
Given that these interfaces are undocumented and propri-
etary, we believe it to be unlikely that they have received
audit from an external source.
If an exploitable memory corruption or Use-After-
Free vulnerability were discovered on LG’s system
daemons, we could dynamically gather Return Ori-
ented Programming (ROP) gadgets by using a call to
AT%PROCCAT=[pid]/exe to leak the entire binary image
and reveal Address Space Layout Randomization (ASLR)
slides using AT%PROCCAT=[pid]/maps to get all of the
memory region address ranges.
5 Discussion
Methodology Limitations. The design of the regular
expression is a tradeoff between discovering as many AT
commands as possible and keeping the false positive rate
low. Nevertheless, we might miss some AT commands
due to regex mismatching. For instance, we assume the
preﬁx “AT” is in the capital case, and ignore the small
case “at”. Because “at” introduced more false alarms, and
the preﬁx should be case insensitive according the stan-
dards. However, we did ﬁnd few commands only working
in the small case on certain device. Due to the limitation
of static analysis, we also could not ﬁnd AT commands
which are built dynamically during the runtime. While
our testing framework is able to send out AT commands
and record response in the logging automatically, fully au-
tomated testing is still infeasible. A response may be as
simple as “OK” and the side effect of a command (e.g.,
warning of conﬁguration changes) might be transient. To
ﬁgure out the exact impact of a command, we need to en-
able logcat from ADB to inspect the propagation path of
the command, and stare at the phone screen during the
command runtime looking for Android UI notiﬁcations.
Some commands also reset the USB connection which re-
quires human intervention to resume the testing.
USB Attack Surface. During our static and dynamic
analysis, we realized that there is a lot of extra functional-
ity hidden in phone conﬁgurations (e.g., init.usb.rc) such
as DIAG (Diagnostic), DM (Diagnostic Mode), TTY/SE-
RIAL (Terminal), SMD (Shared Memory Device), RM-
NET (Remote Network). This diverse functionality is a
beneﬁt of Android’s mature USB gadget driver, but un-
fortunately compared to MTP, Mass Storage, and ADB,
these USB classes are less understood or even proprietary.
These gadget interfaces all have different security im-
plications for the phones that expose them. Depending
on the protocols, they may be abused to compromise the
integrity of the phone if inadvertently exposed in produc-
tion. Some protocols such as DIAG offer full system con-
trol as a feature. This mode should never be exposed dur-
ing a production build. Our work has shown that even
access to a CDC ACM interface to input AT commands
can lead to unintended information loss or act as a start-
ing point for more sophisticated attacks. We thus strongly
recommend that manufacturers apply appropriate access
controls to all debug interfaces, or disable them outright,
when shipping production devices.
“Charge-Only” Mode Effectiveness. One may expect
Android’s “charge-only” mode to protect against com-
mands sent over USB, but the real-world case is more
complicated. The ﬁrst issue is that not every Android ver-
sion supports the charge only mode. For instance, Sam-
sung Note 2, running Android 4.4.2, does not have this
option at all. Second, charge only may not be the de-
fault option when the phone connected via USB. All three
Samsung phones we tested start in MTP mode by default
when connected with the host machine. This enables at-
tackers to switch to the modem interface and launch AT
commands as soon as the phone is connected.
284    27th USENIX Security Symposium
USENIX Association
LG does better since the default option is charge only.
However, once another USB option, e.g., MTP, is cho-
sen, this option becomes the default option across reboots.
With MTP enabled by default, an Android security pop-up
will initially show asking to allow the host machine to ac-
cess the device. But despite no choice having been made,
it is already too late as AT commands may be sent to the
phone immediately before Allow or Deny is chosen, ef-
fectively disabling charge only mode using AT%USB=adb
until the next reboot. Finally, some phones may not dis-
able all USB data even in charging mode. The Samsung
S7 Edge we tested exposes the USB modem interface even
after being put in charge only mode.
SELinux Effectiveness. Given the diverse and power-
ful functionality provided by AT commands, we wonder
if SELinux could help mitigate the impact, such as pre-
venting attackers from ﬂashing malicious ﬁrmware into
the device using AT commands. SELinux was introduced
into the Android ecosystem from Android 4.3, and then
became the default conﬁgurations in later versions. All
the devices we tested have SELinux enabled in enforcing
mode. We also did not ﬁnd any AT command, which can
disable or bypass SELinux.
When analyzing the LG G4 phone we discovered that
its primary AT distributor daemon possessed the Linux
Capabilities CAP SYS ADMIN, CAP DAC OVERRIDE, and
CAP CHOWN. Normally a non-root process with these ca-
pabilities would have little trouble escalating root due to
the vast permissions given. With this assumption we at-
tempted to read Android app user data using the distrib-