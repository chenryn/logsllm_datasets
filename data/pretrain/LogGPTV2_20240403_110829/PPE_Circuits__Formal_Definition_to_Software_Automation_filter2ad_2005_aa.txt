title:PPE Circuits: Formal Definition to Software Automation
author:Susan Hohenberger and
Satyanarayana Vusirikala and
Brent Waters
PPE Circuits: Formal Definition to Software Automation
Susan Hohenberger
Satyanarayana Vusirikala
Brent Waters
PI:EMAIL
University of Texas at Austin and
NTT Research
PI:EMAIL
Johns Hopkins University
PI:EMAIL
University of Texas at Austin
ABSTRACT
Pairing-based cryptography is widely used for its efficiency and
functionality. When designing pairing-based schemes, one common
task is to devise algorithms for verifying a set of untrusted group
elements with respect to a set of trusted group elements. One might
be searching for a verification algorithm for a signature scheme or
a method for verifying an IBE/ABE private key with respect to the
IBE/ABE public parameters. In ACM CCS 2019 [45], the AutoPPE
software tool was introduced for automatically generating a set of
pairing product equations (PPEs) that can verify the correctness of
a set of pairing group elements with respect to a set of trusted group
elements. This task is non-trivial. Some schemes (e.g., those based
on dual system encryption) provably do not support any efficient
algorithm for verifying the private keys with respect to the public
parameters. Other schemes (e.g., the Boyen-Waters anonymous
IBE) were left in a gray area by [45] – no conjunction of PPEs was
known for testing them, but no proof of untestability either.
In this work, we significantly generalize and expand on the foun-
dation of [45]. Specifically, we consider a larger space of verification
algorithms, which we call PPE Circuits, to verify a set of untrusted
group elements with respect to a set of trusted group elements. In-
formally, a PPE Circuit supports AND, OR, NOT and PPE gates, thus
capturing all of the capability of AutoPPE while novelly enabling
the verification algorithm to include arbitrary logic (as opposed
to only conjunctions of PPEs). Our contributions include a formal-
ization of PPE circuits, a provably-correct algorithm for searching
for a PPE circuit given a description of the trusted and untrusted
elements to be verified, and a new open-source software tool1 called
AutoCircuitPPE that realizes this algorithm. AutoCircuitPPE was
tested on a host of test cases and it output PPE circuits for all “gray
area“ schemes left unresolved in [45] as well as several new test
cases, usually in 100 seconds or less.
CCS CONCEPTS
• Security and privacy → Logic and verification.
KEYWORDS
Automated Proofs; Provable Security; Pairing-based Cryptography
1Available at https://github.com/JHUISI/auto-tools
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’20, November 9–13, 2020, Virtual Event, USA
© 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-7089-9/20/11...$15.00
https://doi.org/10.1145/3372297.3417230
ACM Reference Format:
Susan Hohenberger, Satyanarayana Vusirikala, and Brent Waters. 2020. PPE
Circuits: Formal Definition to Software Automation. In Proceedings of the
2020 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’20), November 9–13, 2020, Virtual Event, USA. ACM, New York, NY,
USA, 18 pages. https://doi.org/10.1145/3372297.3417230
1 INTRODUCTION
Cryptography is a powerful tool for securing digital systems, but
its design and security analyses are often both complex and te-
dious, where a single error can cause catastrophic failure. This is an
ideal situation for employing computers to help humans improve
the speed, accuracy, and design of cryptographic implementations.
Indeed, there has already been significant success in this area. A
growing suite of software tools, e.g., [6–8, 16–18, 20, 20–22, 25, 45],
have demonstrated that many cryptographic tasks can be greatly
improved and/or simplified with computer aid. These tasks typi-
cally fall into one of three categories: (1) designing a scheme, (2)
generating a security proof, or (3) verifying security proof. In this
work, we focus on building an automated tool that helps with the
first task - designing a scheme.
Like many prior works, we focus on the popular pairing-based
algebraic setting. The setting consists of groups G1, G2 and GT of
prime order p, and a pairing function which is an efficient map
e : G1 × G2 → GT , such that for all д ∈ G1, h ∈ G2 and a, b ∈ Zp,
it holds that e(дa, hb) = e(д, h)ab. Following [42], a pairing product
equation (PPE) over variables Z , {Xi}m
i =1 is an equation of
the form
i =1, {Yi}n
e(Ai , Yi) · m
e(Xi , Bi) · m
n
e(Xi , Yj)γi j = 1,
Z · n
i =1
where Ai , Xi ∈ G1, Bi , Yi ∈ G2, Z ∈ GT , γij ∈ Zp.
i =1
i =1
j=1
Pairing Element Verification is Useful but Non-Trivial. When de-
signing pairing-based schemes, one common task is that of figuring
out how to verify one or more group elements with respect to an-
other set of elements using the group operations and the pairing
function. One example is verifying a signature with respect to a mes-
sage and public key. Another example is verifying an IBE private
key with respect to the identity and public parameters. This is useful
when designing new structure-preserving signature schemes [1],
accountable authority IBE [39, 40] or oblivious transfer from blind
IBE [41].
Surprisingly, not all IBE schemes have private keys that can be
verified from the identity and public parameters [45]; making this
problem non-trivial. The Waters dual system IBE [53] is one such
example [45].2
2In the proof of [53], there are real and semi-functional private keys, with no over-
lap between these key spaces. The proof uses the fact that, under standard complexity
assumptions, no efficient adversary can distinguish between a real or a semi-functional
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA391In 2015, Barthe, Fagerholm, Fiore, Scedrov, Schmidt and Tibouchi [19]
Our Results in the Context of Prior Work. The goal of this work
(and past works [19, 45]) is realizing a tool that on input a de-
scription of trusted and untrusted elements outputs either (1) an
algorithm for verifying the untrusted elements with respect to the
trusted elements or (2) a message unknown (meaning that the tool
failed to find a verification algorithm.) The correctness require-
ment on any verification algorithm output by the tool is that when
given properly distributed trusted elements and a set of untrusted
elements, it must output 1 if the untrusted elements are properly
distributed and 0 otherwise. (There are no requirements on the tool
when the trusted parameters are incorrectly distributed. E.g., when
the public parameters are not honestly generated.)
To date, tools of this form are comprised of one or more rules
for when an untrusted element can be moved into the trusted set.
Our tool uses a set of four logic rules (see Section 4). Logic similar
to Rule 1 first appeared in [19], while that of Rule 2 was introduced
in [45]. Rules 3 and 4 are novel to this work and we prove their
correctness in Section 4. As we will see, these new rules allow us
to generate verification algorithms that perform arbitrary logic
over PPEs, as opposed to only conjunctions of PPEs considered
in [19, 45]. This expressiveness, in turn, allows the tool to output
multiple solutions on which prior tools output unknown. We now
describe the first two rules in the context of prior work and then
present the new ones.
built an automated tool to design optimal structure-preserving sig-
natures in Type II3 pairing groups. Their tool generates thousands
of candidate public key and signature pairs, and then for each pair
searches for a corresponding verification algorithm expressed as
the conjunction of PPEs. They weed out insecure schemes using
the GGA tool [18]. Their searching algorithm uses a logic similar to
our Rule 1 in Section 4, which checks if an untrusted element can
be verified using one PPE and pairing only with a fixed generator.
E.g., an untrusted element F ∈ G1 can be moved to the trusted set,
if e(F , д2) = A for some A that can be computed solely from the
trusted elements and д2 is the generator for G2.
Generalizing this approach beyond signatures, the AutoPPE soft-
ware tool [45] takes in a description of any set of trusted and un-
trusted elements and outputs either a verification algorithm that
consists of a set of pairing product equations (PPEs) or the message
unknown. This tool executes quickly and worked well for many
signature, VRF, and IBE test cases. It uses logic similar to our Rule
1 and Rule 2. Rule 2 in Section 4 (as an oversimplification) moves
an untrusted element F = дu into the trusted set if the variable u
does not yet appear in any element in the trusted set.
AutoPPE was not able to produce verification algorithms for
the Boyen-Waters anonymous IBE [30], the Bellare-Kiltz-Peikert-
Waters IBE [24] or the Dodis verifiable random function [34]. This
was very curious and unsatisfactory. While it was possible that the
IBE schemes might not have testable private keys (although we
later discovered that they do4), Dodis [34] provides an algorithm
private key. Thus, the existence of a polynomial-time verification algorithm for real
private keys would contradict this proof.
3See Section 2.1; in the Type II setting, there exists an efficient isomorphism from
G1 to G2 or from G2 to G1 but not both.
4We had to use our tool to find these answers. We were not aware of any known
algorithms for verifying the private keys of [24, 30] and we were not able to find one
by hand for the Boyen-Waters IBE [30].
for verifying his VRF proofs, so why couldn’t AutoPPE find this
algorithm? The answer is: it needed broader rules and support for
arbitrary logic.
In particular, prior works [19, 45] allow an element F to be moved
to trusted if it can be paired with a generator (in G1 or G2) and
tested against an element in A ∈ GT computable from the trusted
set, e.g., e(F , д2) = A. Whereas this work will allow an element to
be paired with a second element B computable from the trusted
set, e.g., e(F , B) = A, if B (cid:44) 1 (and this if introduces the need for
broader logic). Intuitively, schemes that require this more general
pairing test, such as [24, 30, 34], are one class of schemes for which
the new tool is an improvement.
PPE Circuits. In this work, we broaden the search rules and de-
velop a tool that can automatically find verification algorithms that
support arbitrary logic (in the form of AND, OR and NOT gates)
over PPEs, solving an open problem from [45]. The new tool called
AutoCircuitPPE automatically searches for a verification algorithm
expressed as a PPE Circuit (see Section 3 for a formalization and
Figure 11 for a picture example). Informally, a PPE Circuit can be
thought of as a circuit with AND, OR and NOT gates where some
inputs to these gates come from the evaluation of certain PPEs.
The requirement on any PPE Circuit output by the tool is that
given properly distributed trusted elements and a set of untrusted
elements, it must output 1 if the untrusted elements are properly
distributed and 0 otherwise. (That is, we require perfect correct-
ness.) The search space of PPE Circuits is much larger than that
of only the conjunction of PPEs. This makes this problem both
more interesting and more challenging. But the effort was worth
it: as described in Section 5, AutoCircuitPPE can find verification
algorithms for the Boyen-Waters anonymous IBE [30], the Bellare
et al. IBE [24], the Dodis VRF [34] and custom test cases – on
which AutoPPE output unknown. This demonstrates the power of
supporting arbitrary logic.
Building an Automated Tool for PPE Circuits. The heart of AutoCircuitPPE
is a recursive searching algorithm that, at every step, tries to move
an untrusted element into the trusted set and (possibly) adds some
logic and/or PPE to the verification algorithm (PPE Circuit). At each
step, it checks if any of our four logic rules apply. If at any point,
no rules are applicable, then the tool outputs unknown. Once all
elements are trusted, it outputs the PPE Circuit.
We already covered Rules 1 and 2. Informally, Rule 3 is a gen-
eralization of Rule 1, where an untrusted element F ∈ G1 can be
moved to the trusted set, if e(F , B) = A for some A ∈ GT and B ∈ G2
that can be computed solely from the trusted elements. However,
allowing B instead of only д2 creates an issue that must be handled
2? The PPE e(F , B) = A might then
0
carefully. What if B evaluates to д
hold regardless of the value of F. To deal with this, our verification
0
2. If the answer is no, then
algorithm must be able to test if B = д
the PPE e(F , B) = A can be used to verify F. If not, then it cannot,
0
but one can substitute д
2 = 1 for B anywhere that it appears and
then continue searching for a way to verify the simplified instance.
This rule is necessary for verifying the [24, 30, 34] test cases.
Similarly, Rule 4 is a generalization of Rule 2, where (we are
oversimplifying here) an element F can be moved to trusted if
h1·u+h2
, where h2 may not yet be computable using elements
F = д
1
Session 2B: Applied Cryptography CCS '20, November 9–13, 2020, Virtual Event, USA392from the trusted set, but h1 is computable from the trusted set, and
u is not yet used in any element in the trusted set. We must deal
with the issue when h1 = 0 and the verification algorithm must test
for this and branch in its logic accordingly. All of the [24, 30, 34]
test cases also required this rule.
In Section 5, we discuss the 29 test cases we explored for
AutoCircuitPPE. AutoCircuitPPE on Boyen-Waters [30] required
all four rules to output a PPE Circuit with 27 PPEs and 124 boolean
gates. To the best of our knowledge, this is the first time any
verification algorithm for verifying Boyen-Waters anonymous
IBE private keys with respect to the identity and public pa-
rameters has been discovered. The software took less than 19
seconds to find this verification algorithm, which we were unable
(after hours of trying) to find by hand. The most costly verifica-
tion algorithm to uncover automatically was that for the Lysyan-
skaya VRF [47] requiring almost 110 seconds. There is provably
no PPE Circuit for the Waters dual system IBE [53]; on this input,
AutoCircuitPPE ran for 105 seconds before giving up and outputting
unknown. Our test cases showed that this new tool is demonstrably
more comprehensive in its coverage than prior tools, while still
efficient enough for easy use.
1.1 Related Work
Our work builds on an impressive collection of prior work in com-
puter automation for cryptography. We highlight a selection here.
For more, we refer the reader to a recent survey of computer-aided
cryptography by Barbosa et al. [15].
We previously discussed the progress of Barthe et al. [19] and
Hohenberger-Vusirikala [45] from which we build upon. Addition-
ally, we use the Generic Group Analyzer (GGA) tool of Barthe et
al. [18], which analyzes cryptographic assumptions in the generic
group model, and was extended to handle unbounded assumptions