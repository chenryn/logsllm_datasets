exit (0) ;
这个程序的输出结果如下所示（经过删节）：
Directory scan of /home/neil:
S printdir
.1ess
.term/
lessrc
ternrc
eln/
Mai1/
elnrc
received
bash_history
nbox
fvumre
/ut2
mai11dx/
index/
563.1
posted
563 .2
attributes
Gone.
tinrc
操作注释：
大部分操作都是在printdir函数里完成的，所以我们重点对它进行说明。在一些初始的错误
检查之后，调用opendir函数，它能够检查子目录是否存在。接下来，printdir调用chdir进人指定
的子目录。在rcaddir函数返回的数据项不为空的前提下，程序检查该数据项是否是一个子目录。
如果它不是，根据deptb的值缩进并打印出文件数据项的内容。
如果该数据项确实是一个子目录，我们就需要对它进行递归逾历。在跳过“”和“”数据
项（它们分别代表当前子目录和上一级子目录）之后，printdir函数调用自己再次进人一个同样
的处理过程。那它又是如何退出这些循环的呢？到while循环完成的时候，函数调用“chdir".")”
将把它带回到目录树的上一级，从递归返回点开始继续以前的遍历、列出上级子目录的清单。
函数调用closedir（dp）关闭子目录，确保打开的子目录流个数不超出它的需要。
加入jaVa编程群：524621833
---
## Page 115
96
Linux程序设计
做为第4章对UNIX环境进行讨论的引子，我们来看看一个能够使这个程序更具通用性的方
法。这个程序的功能是很有限的，因为它只能对子日录/home/ncil进行操作。我们按下面的办法
对main进行修改，就能把它变成一个更有用的子目录浏览器：
int nain(int argc, char* argv[]]
char *topdir=*.*;
if (argc >= 2)
topdir=argv{1]:
printf(*Directory scan of s\n*,topdir);
printdir[topdir,0};
printf (*done.\n*) :
exit (0) :
我们修改了三条语句，增加了五条语句，可它现在是一个通用性的工具程序了。现在多了
一个传递出发点子目录名的可选参数，其默认值是当前子目录。我们可以通过下面这样的命令
运行它：
Sprintdir /usr/local 1more
输出结果将分页显示，用户可以前后翻页查看其输出。可以说，用户手里现在有了一个方
便通用的目录树浏览小工具。再努把力，你还可以增加显示文件的空间占用情况、限制遍历显
示的深度等其他功能。
3.8错误处理
本章介绍了许多系统调用和函数，但正如我们已经看到的，它们会因为各种各样的原因而
操作失败：在操作失败的时候，它们会设置外部变量errno的值来指明自己失败的原因。许多不
同的函数库都把这个变量用做报告错误的标准办法。我们也反复告诚大家，程序必须在函数报
告出错之后立刻检查errmo变量，因为它可能被下一个被程序调用的函数覆盖；有时候，下一个
函数即使自身并没有出错，也会覆盖这个变量。
错误代码的取值和含义都列在头文件errno.h里，其中包括：
·EPERM
操作不允许。
·ENOENT
文件或子目录不存在。
·EINTR
系统调用被中断。
·EIO
V/O错误。
·EBUSY
设备或资源忙。
·EEXIST
文件存在。
·EINVAL
非法参数。
· EMFILE
打开的文件过多。
·ENODEV
设备不存在。
·EISDIR
是一个子目录。
·ENOTDIR
不是一个子目录。
加入jaVa编程群：524621833
---
## Page 116
第3章如何使用和处理文件
66
有两个函数可以用来在错误出现时报告它们，它们是strerror和perror。
#include 
char *gtrerror(int errnum)1
strerror函数把错误的编码映射为一个字符串，由该字符串对刚才发生的错误的类型及原因
进行说明。
1nclude 
void perror( const cbar *g );
perror函数把error变量中报告的当前错误映射到一个字符申里去，再把它输出到标准错误输
出流上去。错误类型的前面先加上字符申s（如果没有给出参数s，就默认使用一个null空字符申）
中给出的倍息，再加上一个冒号和一个空格。请看下面的例子：
perror (*program*}:
它会在标准错误输出上给出如下所示的信息：
program: Too nany open files
3.9高级论题
读者可以跳过我们在这一小节讨论的两个问题，因为涉及它们的情况很少出现。我们还要
在此介绍它们的原因是为了让大家有一个参考，因为它们能够对一些让人头痛的问题提供比较
简单的解决方案。
3.9.1fcntl系统调用
fcntl系统调用对底层文件描述符提供了更高级的操控手段。
#include 
Int Ecntl（int tildes,Int cmd);
Int fentl(int fildes,int cad, 1ong axg)1
利用fcnt系统调用，我们可以对打开了的文件描述符完成一些杂项操作，其中包括对它们进
行复制、获取和设置文件描述符标志、获取和设置文件状态标志，以及管理文件加锁功能等。
对各种操作的取舍是通过给命令参数cmd选取不同的值来实现的，这个参数的取值在头文件
fcntl.h里定义。根据所选择命令的具体情况，fcn系统调用可能还要求加上它的第三个参数arg。
请看下面这个调用：
fcntl(fildes, F_DUPFD, newfd):
它返回一个新的文件描述符，新文件描述符的数值等于或大于整数newfd。这个新文件描述
符是描述符fildes的一个复制品。它的作用类似于系统调用dup（fildes)，但还要参考已经打开的文
件数量和ncwfd的取值才能确定。
再看下面这个调用：
fcnt1 (fi1des, F_GETFD)
它返同的是在fcntl.h文件里定义的文件描述符标志，其中包括一个FD_CLOEXEC标志，它
加入jaVa编程群：524621833
一
---
## Page 117
98
Linux程序设计
的作用是检查在成功地调用了某个exec类的系统调用之后该文件描述符是否被关闭了。
请看下面这个调用：
fent.1(fildes, F_SETFD, flags)
它被用来设置文件描述符标志，设置FD_CLOEXEC标志的情况最常见。
请看下面这个调用：
fcnt1 (fildes, F_GETFL)
fcnt1 (fildes, F_SETFL, flags)
这两个调用分别对文件的状态标志和权限模式代码进行设置。利用在fcnth文件中定义的掩
码O_ACCMODE，我们可以提取出文件的权限模式代码。其他标志包括那些当open函数用
O_CREAT模式打开文件时做为第三参数出现的标志。注意：用户只能对部分标志进行设置。准
确地说，用户不能通过fcnu设置文件的权限。
通过fcntl还可以实现文件加锁功能。详情请参考man命令给出的使用手册页第2小节，或者
等我们讲到第7章，我们将在那里讨论文件加锁问题
3.9.2mmap函数
UNIX里面有一个非常有用的功能，它允许程序共享内存，而Linux内核从2.0版本开始已经
把这一功能包括在其中了。mmap（内存映射）函数的作用是对一段内存进行设置，使它能够被
两个或更多个程序读写。一个程序做出的修改可以被其他的程序看见。
这一功能还可以用在文件的处理操作上。用户可以使某个磁盘文件的全部内容看起来就像
是内存中的某个数组。如果文件由记录组成，而这些记录又能够用C语言中的结构来描述的话，
用户就可以通过存取结构数组对文件内容进行修改。
这要通过使用带特殊权限设置集的虚拟内存段才能实现。对这类虚拟内存段的读写会使操
作系统去读写磁盘文件与之对应的部分。
mmap函数将创建-个指向一段内存的指针，该指针将与通过一个打开的文件描述符来访问
的文件的内容相关联。
#include 
void *meap(void *addx,slse_t len, int prot, int flags,int fildes, off_t off);
用传递off参数的办法可以改变经共享内存段访问的文件中数据的起始偏移值。文件描述符
由fildes参数给出。以这种办法被访问的数据量（即内存段的长度）由len参数设置、
我们可以通过addr参数请求使用某个特定的内存地址。如果这个参数的取值是零，结果中的
指针将是自动分配的。这是推荐做法，不这样做会降低程序的可移植性，因为不同系统上的可
用地址范围是不一样的。
prot参数用来设置内存段的访问权限。它是下列常数值的按位OR结果：
·PORT_READ
允许对该内存段进行读操作
· PORT_WRITE
允许对该内存段进行写操作：
·PORT_EXEC
允许该内存段被执行。
加入jaVa编程群：524621833
---
## Page 118
第3章如何使用和处理文件
99
·PORT_NONE
不允许访问该内存段。
flags参数控制着程序对该段内存的访问方式，它们如表3-7所示：
表3-7
该内存段是私用的，对它的修改只在此局部范图内有效
MAP_SHARED
把对该内存段的修改保存到融盘文件上去
MAP_FIXED
该内存段必须位于addr指定的地址处
msync函数的作用是把在该内存段的某个部分或整段中的修改写回到被映射文件里（或者从
被映射文件里读出）。
#include 
int msync(void *addx, size_t len, int flags);
内存段需要修改的部分通过做为参数传递过来的起始地址addr和长度len确定。flags参数控
制着修改的具体实现方式，见表3-8：
表3-8
HS_ASYNC
采用异步写方式进行修改
MS_SYNC
采用同步写方式进行修改
NS_INVALIDATE
从文件中读回数据
munmap函数的作用是释放内存段：
#nclude 
pnou
inciude 
#include 
include 
typedef struct (
char string[24]:
int integer;
}RECORD;
define NRSCORDS (100)
int main()
加入jaVa编程群：524621833
---
## Page 119
100Linux程序设计
f
RECORD record,*mapped;
inti.f;
fp= fopen(*records.dat*,*w+*);
FILE *fp:
forli=0:i<NRECORDS:i++)(
record,integer = 1
sprintf (record.string, *REcoRD-ed*,1) :
fwrite(&record,sizeof Irecord) ,1, fp) :
Eclose(fp):
2）现在，我们把第43条记录中的整数值由43修改为143，并把它写到第43条记录中的字符串
里去。
fp = fopen("records.dat*,*r+*};
fread(&record,sizeof(record),1,tp):
fseek(fp.43*sizeof (record),SEEx_SET) :
record.integer = 143;
sprintf (record.string,*REcoRD-sd*,record.integer) ;
fseek(fp,43*sizeof (record),SEEx_SET):
fwrite(&record.sizeof (record) ,1,fpl ;
felose (fp);
3）现在把这些记录映射到内存中去，再顺序访问到第43条记录，把它的整数值修改为243
（同时还要修改该记录中的字符串），还是使用内存映射的办法。
f = open(*records.dat*,O_RDWR);
napped = (RECORD *)map(0, NREcORDs*sizeoE(record),
PROT_READ|PROT_HRITE, MAP_SHARED, f, O) :
mapped[43].integer = 243;