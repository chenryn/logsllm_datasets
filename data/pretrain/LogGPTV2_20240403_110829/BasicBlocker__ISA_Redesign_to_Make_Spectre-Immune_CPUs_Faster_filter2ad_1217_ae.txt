path of conservative security assumptions that completely address a
large number of current and upcoming attacks. BasicBlocker dispels
the widely accepted assumption that control flow speculation is
inevitable for performance.
We propose a novel concept to transport control-flow informa-
tion from the software to the hardware, enabling practical imple-
mentations of strictly non-control-flow-speculative processors. The
performance evaluation clearly shows that BasicBlocker maintains
current levels of performance for code with large basic blocks, a
characteristic that is common in highly optimized code (i.e. func-
tion inlining, loop unrolling). For branch-heavy code control-flow
speculation is clearly faster, however, this is at the cost of security.
In contrast to other work, BasicBlocker allows to remove control-
flow speculation, including speculative-fetching, entirely and, hence,
tackles speculation-based attacks at the root cause. This simplifies
the security analysis drastically, is securely backwards compatible,
and the resulting code is independent of the underlying microar-
chitecture.
We showcase our concept by specifying the BBRISC-V ISA, in-
cluding a concrete implementation of that ISA based on VexRiscv
and Gem5, accompanied by an optimizing compiler that rests on
the LLVM Compiler Framework. We emphasize that BasicBlocker
is a generic solution that can be applied to other ISAs as well. Our
prototype implementations show that BasicBlocker is applicable
for a variety of processor types and we point to code-optimization
strategies, that can further enhance the performance.
By taking the algorithmic level into consideration further opti-
mizations can be achieved; see Appendix B. In addition, we expect
extensions and future work to improve the performance and se-
curity of BasicBlocker, most notably hardware loop counters, that
can be seamlessly integrated into our concept (see Appendix A), or
extensions dealing with fault-based transient-execution attacks.
ACKNOWLEDGMENTS
The authors would like to thank Bastian Kuttig for his support
on the Gem5 evaluation. Funded by the Deutsche Forschungsge-
meinschaft (DFG, German Research Foundation) under Germany’s
Excellence Strategy - EXC 2092 CASA - 390781972; by the DFG
under the Priority Program SPP 2253 Nano Security (Project RAIN-
COAT - Number: 440059533); by the Cisco University Research
Program; and by the U.S. National Science Foundation under grant
1913167. "Any opinions, findings, and conclusions or recommenda-
tions expressed in this material are those of the author(s) and do not
necessarily reflect the views of the National Science Foundation"
(or other funding agencies). Date of this document: 04 May 2021.
REFERENCES
[1] 2020. Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture
profile. Technical Report. ARM.
[2] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2009. Control-flow
integrity principles, implementations, and applications. ACM Transactions on
Information and System Security (TISSEC) 13, 1 (2009), 1–40.
[3] Onur Aciiçmez, Billy Bob Brumley, and Philipp Grabher. 2010. New Results on
Instruction Cache Attacks. In Cryptographic Hardware and Embedded Systems,
13
CHES 2010, 12th International Workshop, Santa Barbara, CA, USA, August 17-
20, 2010. Proceedings (Lecture Notes in Computer Science), Stefan Mangard and
François-Xavier Standaert (Eds.), Vol. 6225. Springer, Santa Barbara, CA, 110–124.
https://doi.org/10.1007/978-3-642-15031-9_8
[4] Krste Asanović and David A. Patterson. 2014. Instruction Sets Should Be Free:
The Case For RISC-V. (2014). https://people.eecs.berkeley.edu/~krste/papers/
EECS-2014-146.pdf.
[5] Kristin Barber, Anys Bacha, Li Zhou, Yinqian Zhang, and Radu Teodorescu. 2019.
Specshield: Shielding speculative data from microarchitectural covert channels.
In 2019 28th International Conference on Parallel Architectures and Compilation
Techniques (PACT). IEEE, 151–164.
[6] Mohammad Behnia, Prateek Sahu, Riccardo Paccagnella, Jiyong Yu, Zirui Neil
Zhao, Xiang Zou, Thomas Unterluggauer, Josep Torrellas, Carlos V. Rozas, Adam
Morrison, Frank McKeen, Fangfei Liu, Ron Gabor, Christopher W. Fletcher,
Abhishek Basak, and Alaa R. Alameldeen. 2020. Speculative Interference At-
tacks: Breaking Invisible Speculation Schemes. CoRR abs/2007.11818 (2020).
arXiv:2007.11818 https://arxiv.org/abs/2007.11818
[7] Daniel J. Bernstein. 2019. djbsort. (2019). https://sorting.cr.yp.to/
[8] Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K Reinhardt, Ali
Saidi, Arkaprava Basu, Joel Hestness, Derek R Hower, Tushar Krishna, Somayeh
Sardashti, et al. 2011. The gem5 simulator. ACM SIGARCH computer architecture
news 39, 2 (2011), 1–7.
[9] Benjamin A Braun, Suman Jana, and Dan Boneh. 2015. Robust and efficient
elimination of cache and timing side channels. arXiv preprint arXiv:1506.00189
(2015).
[10] Brad Calder and Dirk Grunwald. 1994. Fast and Accurate Instruction Fetch and
Branch Prediction. In Proceedings of the 21st Annual International Symposium
on Computer Architecture. Chicago, IL, USA, April 1994, David A. Patterson (Ed.).
IEEE Computer Society, 2–11. https://doi.org/10.1109/ISCA.1994.288166
[11] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Marina
Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, et al.
2019. Fallout: Leaking data on meltdown-resistant CPUs. In Proceedings of the
2019 ACM SIGSAC Conference on Computer and Communications Security. 769–
784.
[12] Claudio Canella, Sai Manoj Pudukotai Dinakarrao, Daniel Gruss, and Khaled N
Khasawneh. 2020. Evolution of defenses against transient-execution attacks. In
Proceedings of the 2020 on Great Lakes Symposium on VLSI. 169–174.
[13] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg,
Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. 2019. A
Systematic Evaluation of Transient Execution Attacks and Defenses. In USENIX
Security Symposium. extended classification tree at https://transient.fail/.
[14] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and
Ten H Lai. 2019. SgxPectre: Stealing intel secrets from SGX enclaves via spec-
ulative execution. In 2019 IEEE European Symposium on Security and Privacy
(EuroS&P). IEEE, 142–157.
[15] Youngsoo Choi, Allan Knies, Luke Gerke, and Tin-Fook Ngai. 2001. The im-
pact of if-conversion and branch prediction on program execution on the intel
itanium processor. In Proceedings. 34th ACM/IEEE International Symposium on
Microarchitecture. MICRO-34. Citeseer, 182–182.
[16] Douglas W. Clark and Henry M. Levy. 1982. Measurement and analysis of
instruction use in the VAX-11/780. (1982), 9–17 pages. https://dl.acm.org/doi/
pdf/10.1145/1067649.801709.
[17] Lucas Davi, Matthias Hanreich, Debayan Paul, Ahmad-Reza Sadeghi, Patrick Koe-
berl, Dean Sullivan, Orlando Arias, and Yier Jin. 2015. HAFIX: Hardware-assisted
flow integrity extension. In 2015 52nd ACM/EDAC/IEEE Design Automation Con-
ference (DAC). IEEE, 1–6.
John A. DeRosa and Henry M. Levy. 1987. An Evaluation of Branch Architec-
tures. In Proceedings of the 14th Annual International Symposium on Computer
Architecture. Pittsburgh, PA, USA, June 1987, Daniel C. St. Clair (Ed.). 10–16.
https://doi.org/10.1145/30350.30352
[19] Scott DiPasquale, Khaled Elmeleegy, CJ Ganier, and Erik Swanson. 2003. Hard-
[18]
ware Loop Buffering. (2003).
[20] Reem Elkhouly, Ahmed El-Mahdy, and Amr Elmasry. 2015. Pattern-Driven
Branchless Code Generation. JEC-ECC (2015).
[22]
[21] Amr Elmasry and Jyrki Katajainen. 2013. Branchless search programs. In Inter-
national Symposium on Experimental Algorithms. Springer, 127–138.
Joseph A Fisher. 1983. Very long instruction word architectures and the ELI-
512. In Proceedings of the 10th annual international symposium on Computer
architecture. 140–150.
[23] Agner Fog. 2020. The microarchitecture of Intel, AMD and VIA CPUs: An
optimization guide for assembly programmers and compiler makers. (2020).
https://www.agner.org/optimize/.
[24] Free and Open Source Silicon Foundation. 2020. Embench IOT. https://www.
embench.org/. (May 2020). Accessed: 2020-05-29.
[25] Shay Gal-On and Markus Levy. 2012. Exploring coremark a benchmark maximiz-
ing simplicity and efficacy. The Embedded Microprocessor Benchmark Consortium
(2012).
ArXiv Version, 2021, May
J. Thoma, J. Feldtkeller, M. Krausz, T. Güneysu, D. J. Bernstein
[26] Shay Gueron. 2010. Intel Advanced Encryption Standard (AES) New Instruc-
https://www.intel.com/content/dam/doc/white-paper/
tions Set.
advanced-encryption-standard-new-instructions-set-paper.pdf.
(2010).
[27] Linley Gwennap. 2010.
Sandy Bridge spans generations.
http://people.eecs.berkeley.edu/~kubitron/cs252/handouts/papers/
Microprocessor-Report-Sandy-Bridge-Spans-Generations-243901.pdf.
Jann Horn. 2018. speculative execution, variant 4: speculative store bypass.
(2018). https://bugs.chromium.org/p/project-zero/issues/detail?id=1528/.
J Johnston and T Fitzsimmons. 2021. The newlib homepage. URL http://sourceware.
org/newlib (2021).
(2010).
[28]
[29]
[30] Toni Juan, Sanji Sanjeevan, and Juan J. Navarro. 1998. Dynamic History-length
Fitting: A Third Level of Adaptivity for Branch Prediction. In Proceedings of
the 25th Annual International Symposium on Computer Architecture, ISCA 1998,
Barcelona, Spain, June 27 - July 1, 1998, Mateo Valero, Gurindar S. Sohi, and Doug
DeGroot (Eds.). IEEE Computer Society, 155–166. https://doi.org/10.1109/ISCA.
1998.694771
[31] Khaled N. Khasawneh, Esmaeil Mohammadian Koruyeh, Chengyu Song, Dmitry
Evtyushkin, Dmitry Ponomarev, and Nael B. Abu-Ghazaleh. 2018. SafeSpec:
Banishing the Spectre of a Meltdown with Leakage-Free Speculation. CoRR
abs/1806.05179 (2018).
[32] Vladimir Kiriansky, Ilia Lebedev, Saman Amarasinghe, Srinivas Devadas, and
Joel Emer. 2018. DAWG: A defense against cache timing attacks in speculative
execution processors. In 2018 51st Annual IEEE/ACM International Symposium on
Microarchitecture (MICRO). IEEE, 974–987.
[33] Vladimir Kiriansky and Carl Waldspurger. 2018. Speculative buffer overflows:
Attacks and defenses. arXiv preprint arXiv:1807.03757 (2018).
[34] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner
Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, et al. 2019.
Spectre attacks: Exploiting speculative execution. In 2019 IEEE Symposium on
Security and Privacy (SP). IEEE, 1–19.
[35] Esmaeil Mohammadian Koruyeh, Khaled N Khasawneh, Chengyu Song, and
Nael Abu-Ghazaleh. 2018. Spectre returns! speculation attacks using the return
stack buffer. In 12th USENIX Workshop on Offensive Technologies (WOOT 18).
[36] Chris Lattner and Vikram Adve. 2004. LLVM: A compilation framework for
lifelong program analysis & transformation. In International Symposium on Code
Generation and Optimization, 2004. CGO 2004. IEEE, 75–86.
[37] Edward A. Lee, Jan Reineke, and Michael Zimmer. 2017. Abstract PRET Machines.
In 2017 IEEE Real-Time Systems Symposium, RTSS 2017, Paris, France, December
5-8, 2017. 1–11. https://doi.org/10.1109/RTSS.2017.00041
[38] Peinan Li, Lutan Zhao, Rui Hou, Lixin Zhang, and Dan Meng. 2019. Conditional
speculation: An effective approach to safeguard out-of-order execution against
spectre attacks. In 2019 IEEE International Symposium on High Performance Com-
puter Architecture (HPCA). IEEE, 264–276.
[39] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas,
Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, et al. 2018.
Meltdown: Reading kernel memory from user space. In 27th USENIX Security
Symposium (USENIX Security 18). 973–990.
[40] Giorgi Maisuradze and Christian Rossow. 2018. ret2spec: Speculative execution
using return stack buffers. In Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security. 2109–2122.
[41] Hamed Nemati, Roberto Guanciale, Pablo Buiras, and Andreas Lindner. 2020.
Speculative Leakage in ARM Cortex-A53. arXiv preprint arXiv:2007.06865 (2020).
[42] Charles Papon. 2020. VexRiscv. https://github.com/SpinalHDL/VexRiscv. (May
2020). Accessed: 2020-05-28.
[43] Praveen Raghavan, Andy Lambrechts, Murali Jayapala, Francky Catthoor, and
Diederik Verkest. 2008. Distributed loop controller for multithreading in
unithreaded ILP architectures. IEEE Trans. Comput. 58, 3 (2008), 311–321.
[44] Christos Sakalis, Stefanos Kaxiras, Alberto Ros, Alexandra Jimborean, and Mag-
nus Själander. 2019. Efficient invisible speculative execution through selective
delay and value prediction. In 2019 ACM/IEEE 46th Annual International Sympo-
sium on Computer Architecture (ISCA). IEEE, 723–735.
[45] Michael Schwarz, Moritz Lipp, Claudio Canella, Robert Schilling, Florian Kargl,
and Daniel Gruss. 2020. Context: A generic approach for mitigating spec-
tre. In Proc. Network and Distributed System Security Symposium. https://doi.
org/10.14722/ndss, Vol. 10.
[46] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Steck-
lina, Thomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-privilege-
boundary data sampling. In Proceedings of the 2019 ACM SIGSAC Conference on
Computer and Communications Security. 753–768.
Jakub Szefer. 2019. Survey of microarchitectural side and covert channels, attacks,
and defenses. Journal of Hardware and Systems Security 3, 3 (2019), 219–234.
[48] Andrew S Tanenbaum. 2016. Structured computer organization. Pearson Education
[47]
[49] Paul Turner. 2018. Retpoline: A software construct for preventing branch-target-
injection. URL https://support. google. com/faqs/answer/7625886 (2018).
Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F Wenisch, Yuval Yarom, and Raoul Strackx.
[50]
India.
2018. Foreshadow: Extracting the keys to the intel SGX kingdom with transient
out-of-order execution. In 27th USENIX Security Symposium (USENIX Security
18). 991–1008.
[51] Stephan van Schaik, Alyssa Milburn, Sebastian Osterlund, Pietro Frigo, Giorgi
Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2019. Addendum
to RIDL: Rogue in-flight data load. (2019). https://mdsattacks.com/.
[52] Stephan Van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi
Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2019. RIDL:
Rogue in-flight data load. In 2019 IEEE Symposium on Security and Privacy (SP).
IEEE, 88–105.
[53] Venkatanathan Varadarajan, Thomas Ristenpart, and Michael Swift. 2014.
Scheduler-based defenses against cross-VM side-channels. In 23rd USENIX Secu-
rity Symposium (USENIX Security 14). 687–702.
[54] Ofir Weisse, Ian Neal, Kevin Loughlin, Thomas F Wenisch, and Baris Kasikci. 2019.
NDA: Preventing speculative execution attacks at their source. In Proceedings
of the 52nd Annual IEEE/ACM International Symposium on Microarchitecture.
572–586.
[55] Ofir Weisse, Jo Van Bulck, Marina Minkin, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Raoul Strackx, Thomas F. Wenisch, and Yuval Yarom.
2018. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient
Out-of-Order Execution. Technical report (2018). See also USENIX Security
paper Foreshadow.
[56] Nils Wistoff, Moritz Schneider, Frank K. Gürkaynak, Luca Benini, and Gernot
Heiser. 2020. Prevention of Microarchitectural Covert Channels on an Open-
Source 64-bit RISC-V Core. arXiv preprint arXiv:2005.02193 (2020).
[57] Mengjia Yan, Jiho Choi, Dimitrios Skarlatos, Adam Morrison, Christopher
Fletcher, and Josep Torrellas. 2018. Invisispec: Making speculative execution
invisible in the cache hierarchy. In 2018 51st Annual IEEE/ACM International
Symposium on Microarchitecture (MICRO). IEEE, 428–441.
Jiyong Yu, Lucas Hsiung, Mohamad El Hajj, and Christopher W Fletcher. 2019.
Data Oblivious ISA Extensions for Side Channel-Resistant and High Performance
Computing.. In NDSS.
Jiyong Yu, Mengjia Yan, Artem Khyzha, Adam Morrison, Josep Torrellas, and
Christopher W. Fletcher. 2019. Speculative Taint Tracking (STT): A Com-
prehensive Protection for Speculatively Accessed Data. In Proceedings of the
52nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO
’52). Association for Computing Machinery, New York, NY, USA, 954–968.
https://doi.org/10.1145/3352460.3358274
[60] Drew Zagieboylo, G Edward Suh, and Andrew C Myers. 2019. Using information
flow to design an isa that controls timing channels. In 2019 IEEE 32nd Computer
Security Foundations Symposium (CSF). IEEE, 272–27215.
[61] Yinqian Zhang and Michael K Reiter. 2013. Düppel: Retrofitting commodity
operating systems to mitigate cache side channels in the cloud. In Proceedings
of the 2013 ACM SIGSAC conference on Computer & communications security.
827–838.
[62] Lutan Zhao, Peinan Li, Rui Hou, Jiazhen Li, Michael C Huang, Lixin Zhang,
Xuehai Qian, and Dan Meng. 2020. A Lightweight Isolation Mechanism for
Secure Branch Predictors. arXiv preprint arXiv:2005.08183 (2020).
[58]
[59]
A LOOP COUNTER
Loops are often the execution hotspots in programs and contribute
considerably to diverging control flow. Therefore the concept of
hardware supported loops can be profitable as already discussed in
the literature [19, 43] and implemented in various architectures.
In general, hardware loop counters are realized by a hardware
counter which is set by a dedicated instruction with a value rep-
resenting the maximum trip count for the loop. The trip count
must be computable at compile time to be inserted by an immediate
value or available in a register at run-time before entering the loop.
Information about which instructions are included in the loop is
expressed via labels or additional specific instructions. The hard-
ware loop counter decrements the start value after each iteration
and induces a branch back to the start of the loop as long as the
counter is unequal to zero. This can be done implicitly at the end
of the loop or explicitly with an instruction.
Performance improvements by the usage of hardware loops re-
sult from reduced instruction size and dedicated loop control logic
that does not have to be calculated by the ALU. For our BasicBlocker
14
BasicBlocker: ISA Redesign to Make Spectre-Immune CPUs Faster
ArXiv Version, 2021, May
concept, hardware loops are actually much more valuable for per-
formance when only applied to loops that will not terminate early,
because in this case the control flow for all loop iterations is known
when entering the loop.
We can seamlessly support hardware loop counters in our de-
sign concept, by introducing a new instruction and adding two
arguments to the bb instruction. The lcnt sets the number of loop