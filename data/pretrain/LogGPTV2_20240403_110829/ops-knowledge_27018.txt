User: How to use Python to write a simple TCP server for receiving network requests from clients, processing and responding?
Assistant: The following is an example of a simple TCP server that accepts client connections and sends "Hello, world!" messages to connected clients: ```python import socket # Create a TCP socket server_socket = socket.socket(socket. AF_INET, socket.SOCK_STREAM) # Bind to an address and port server_socket.bind(('0.0.0.0', 12345)) # Enable listening mode, specify the number of clients waiting to connect server_socket.listen(5) while True: # Accept client connection client_socket, client_address = server_socket.accept() # Receive data from client data = client_socket.recv(1024) # Process received data response = b"Hello, world!" # Send response data to client client_socket.sendall(response) # close the connection client_socket.close() ``` In this example, we first create a TCP socket object. We then bind it to a specific address and port (port 12345 in this case) using the `bind` method. Next, we use the `listen` method to enable the listen mode associated with this socket and specify the number of clients waiting for connections. In this example, we set the value to 5, which means only 5 clients can connect to the server at the same time. In an infinite loop, we wait for a client to connect using the `accept` method. Once a client is connected, we receive data from the client using the `recv` method and send a string response back to the client using the `sendall` method. Finally, we close the connection with the client using the `close` method. Note that this example is very simplified and only applies to sending and receiving data once. In practical applications, servers usually require more complex logic to handle concurrent requests from multiple clients.