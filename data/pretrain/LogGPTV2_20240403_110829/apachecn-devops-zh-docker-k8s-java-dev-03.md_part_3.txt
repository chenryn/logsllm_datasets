创建分布式应用时，您可能希望考虑到在一段时间内数据会不一致。当应用更改一台机器上的数据项时，该更改需要传播到其他副本。由于更改传播不是即时的，因此会有一个时间间隔，在此期间，一些副本会有最新的更改，但其他副本不会。但是，更改最终会传播到所有副本。这就是为什么这被称为最终一致性。您的服务需要假设数据将在一段时间内处于不一致的状态，并且需要通过按原样使用数据、推迟操作或者甚至忽略某些数据来处理这种情况。
如您所见，使用微服务架构背后有很多挑战，但也有很多优势。不过，你应该得到警告，我们需要应对更多的挑战。由于服务相互独立，它们可以用不同的编程语言实现。这意味着每个应用的部署过程可能会有所不同:对于一个 Java web 应用和一个`node.js`应用来说，部署过程将完全不同。这可能会使服务器部署变得复杂。这正是 Docker 出手相救的地方。
# Docker 的角色
正如你从前面几章所记得的，Docker 利用了容器化的概念。您只需将您的应用(在这种情况下，应用将是一个微服务)放入一个单一的、可部署和可运行的软件中，称为映像。我们将在[第 4 章](04.html)、*创建 Java 微服务*中详细介绍将 Java 应用打包到映像中的过程。Docker 映像将包含我们的服务工作所需的一切，它可以是一个带有所有必需的库和应用服务器的 Java 虚拟机，也可以是一个与带有所有必需的`node.js`模块的`node.js`运行时打包在一起的`node.js`应用，例如`express.js`或`node.js`服务需要运行的任何东西。微服务可能由两个容器组成，一个运行服务代码，另一个运行数据库来保存服务自己的数据。
Docker 将容器隔离到一个过程或服务。实际上，我们应用的所有部分将只是一堆黑盒，打包好并准备使用 Docker 映像。容器作为完全隔离的沙箱运行，每个容器只有最少的操作系统内核。Docker 使用 Linux 内核，并利用内核接口，如 cnames 和名称空间，这允许多个容器共享同一个内核，同时彼此完全隔离运行。
因为底层系统的系统资源是共享的，所以您可以以最佳性能运行服务，与传统虚拟机相比，占用空间要小得多。因为容器是可移植的，正如我们在[第 2 章](02.html)、*网络和持久存储*中所说的，它们可以在 Docker 引擎可以运行的任何地方运行。这使得部署微服务的过程变得容易。为了部署在给定主机上运行的服务的新版本，可以简单地停止正在运行的容器，并使用最新版本的服务代码启动基于 Docker 映像的新容器。我们将在本书后面介绍创建映像新版本的过程。当然，主机上运行的所有其他容器都不会受到此更改的影响。
由于微服务需要使用`REST`协议进行通信，我们的 Docker 容器(或者更准确地说，您的 Java 微服务在 Docker 容器中打包并运行)也需要使用网络进行通信。正如您从[第 2 章](02.html)、*网络和持久存储*中所记得的，关于网络，很容易为 Docker 容器公开和映射网络端口。Docker 容器化似乎是微服务架构的理想选择。您可以将微服务打包到一个便携盒中，并公开所需的网络端口，使其能够与外界通信。需要时，您可以运行任意多个这样的盒子。
让我们总结一下在处理微服务时有用的 Docker 特性:
*   扩展和缩减服务很容易，只需更改运行的容器实例数
*   容器隐藏了每个服务背后的技术细节。我们服务的所有容器都以完全相同的方式启动和停止，无论它们使用什么技术栈
*   每个服务实例都是独立的
*   您可以限制容器消耗的 CPU 和内存的运行时约束
*   容器建造和启动都很快。正如您从[第 1 章](01.html)、*到 Docker* 所记得的，与传统虚拟化相比，开销最小
*   Docker 映像层被缓存，这在创建服务的新版本时给了你另一个速度提升
它不完全符合微服务架构的定义吗？当然有，但是有一个问题。因为我们的微服务分布在多个主机上，所以很难跟踪哪些主机正在运行某些服务，也很难监控哪些主机需要更多资源，或者在最坏的情况下，哪些主机已经停止运行并且无法正常工作。此外，我们需要对属于特定应用或功能的服务进行分组。这是我们拼图中缺失的元素:容器管理和编排。许多框架的出现仅仅是为了处理更复杂的场景:管理集群中的单个服务或跨主机的服务中的多个实例，或者如何在部署和管理级别上协调多个服务。其中一个工具是 Kubernetes。
# Kubernetes 的角色
虽然 Docker 提供了容器的生命周期管理，但是 Kubernetes 通过提供编排和管理容器集群，将容器的生命周期管理提升到了一个新的水平。如您所知，使用微服务架构创建的应用将包含几个独立的服务。我们如何编排和管理它们？Kubernetes 是一个开源工具，非常适合这个场景。它定义了一组构建模块，提供了部署、维护和扩展应用的机制。Kubernetes 中的基本调度单元称为 pod。pod 中的容器运行在同一个主机上，共享同一个 IP 地址，并通过 localhost 找到彼此。它们还可以使用标准的进程间通信(如共享内存或信号量)相互通信。pod 为容器化组件增加了另一个抽象层次。pod 由一个或多个容器组成，这些容器保证位于主机上并且可以共享资源。这与属于应用的容器的逻辑集合是一样的。
对于传统服务，比如 REST 端点和相应的数据库(实际上是我们完整的微服务)，Kubernetes 提供了一个服务的概念。服务定义了一个逻辑单元组，并强制执行从外部访问这些逻辑单元组的规则。Kubernetes 将标签的概念用于 pod 和其他资源(服务、部署等)。这些是简单的键值对，可以在创建时附加到资源上，然后随时添加和修改。稍后，我们将使用标签来组织和选择资源子集(例如，pods)以作为一个实体来管理它们。
Kubernetes 可以自动将您的容器或一组容器放置在特定的主机中。为了找到合适的主机(工作负载最小的主机)，它将分析主机的当前工作负载以及不同的托管和可用性限制。当然，您可以手动指定主机，但是拥有此自动功能可以充分利用可用的处理能力和资源。Kubernetes 可以在容器、pod 和集群级别监控资源使用情况(CPU 和 RAM)。资源使用和性能分析代理在每个节点上运行，自动发现节点上的容器，并收集 CPU、内存、文件系统和网络使用统计数据。
Kubernetes 还管理容器实例的生命周期。如果它们太多，其中一些将被停止。如果工作量增加，新容器将自动启动。这个特性叫做容器自动缩放。它会根据内存、CPU 利用率或您为服务定义的其他指标(例如每秒查询数)自动更改运行容器的数量。
正如您从[第 2 章](02.html)、*网络和持久存储*中所记得的，Docker 操作卷来保存您的应用数据。Kubernetes 还支持两种卷:与 pod 具有相同生命周期的常规卷，以及独立于任何 pod 的生命周期的持久卷。卷类型以插件的形式以与 Docker 相同的方式实现。这种可扩展的设计使您能够拥有几乎任何类型的卷。它目前包含存储插件，如谷歌云平台卷、AWS 弹性块存储卷等。
Kubernetes 可以监控您的服务的运行状况，它可以通过对指定的 URL 执行指定的`HTTP`方法(例如与`GET`相同)并分析作为响应返回的`HTTP`状态代码来实现。此外，TCP 探测器可以检查指定的端口是否打开，这也可以用来监控服务的运行状况。最后但同样重要的是，您可以指定可以在容器中执行的命令，以及可以根据命令的响应采取的一些操作。如果指定的探测方法发出容器有问题的信号，它可以自动重启。当您需要更新软件时，Kubernetes 支持滚动更新。此功能允许您在最短的停机时间内更新已部署的容器化应用。滚动更新功能允许您指定在更新时可能停机的旧副本的数量。用 Docker 升级容器化软件特别容易，正如你已经知道的，这只是容器的一个新的映像版本。我猜你现在已经了解了全部情况。部署可以更新、展开或回滚。在 Kubernetes 中可以获得负载平衡、服务发现，以及在编排和管理从 Docker 容器中运行的微服务群时可能需要的所有功能。最初是由谷歌大规模制造的，现在各种规模的组织都广泛使用 Kubernetes 来运行生产中的容器。
# 何时使用微服务架构
微服务架构是构建应用的一种新方法。一开始，当您开始创建一个相对较小的系统时，可能不需要使用微服务方法。当然，基本的 web 应用没什么问题。当为你办公室的人做基本的 web 应用时，采用微服务架构可能有些过分。另一方面，如果你计划开发一种新的超级互联网服务，将被数百万移动客户端使用，我会从一开始就考虑使用微服务。开个玩笑，你明白了，总是试着为工作选择最好的工具。最终，目标是提供商业价值。
然而，你应该记住一段时间后你的系统的全貌。如果您的应用在特性和功能上比您预期的要大，或者您从一开始就知道，您可能希望开始将特性分解成微服务。您应该尝试进行功能分解，并指出您的系统中有明确边界的部分，这些部分需要扩展，并在未来进行单独部署。如果有很多人在一个项目上工作，让他们开发一个应用的独立部分将会给开发过程带来巨大的推动。可以混合使用各种技术栈，每个服务都可以用不同的编程语言或框架来实现，并将自己的数据存储在最合适的数据存储中。这都是关于 API 和服务之间相互通信的方式。与整体架构相比，采用这种架构将加快构建、测试和部署的上市时间。如果您只需要扩展需要处理更高工作负载的服务。有了 Docker 和 Kubernetes，没有理由不进入微服务架构；这肯定会在未来得到回报。
微服务架构不仅仅是一个新的流行词，它被普遍认为是当今构建应用的更好方式。微服务思想的诞生是由更好地利用计算资源的需求和维护越来越复杂的基于网络的应用的需求所驱动的。
Java 是构建微服务的绝佳选择。您可以将微服务创建为单个可执行的 JAR、独立的 Spring Boot 应用或部署在应用服务器(如 Wildfly 或 Tomcat)上的全功能 web 应用。根据您的用例以及您的微服务的职责和特性，前面的任何一个都可以。Docker 存储库包含许多有用的映像，您可以自由地将其用作微服务的基础。Docker Hub 中的许多映像都是由个人创建的，有些是扩展官方映像并根据他们的需求进行定制，但有些是从基础映像定制的整个平台配置。基本映像可以像纯 JDK 一样简单，也可以是完全配置的准备运行的 Wildfly。这大大提高了开发性能。
# 摘要
在本章中，我们比较了单片和微服务架构。希望你看到使用后者的好处。我们还了解了 Docker 和 Kubernetes 在部署容器化应用时是如何融入全局的，从而使这个过程变得更加容易和愉快。Java 是实现微服务的成熟生态系统。您将要创建的软件将由小的、高度可测试的、高效的模块组成。事实上，在[第 4 章](04.html)*创建 Java 微服务*中，我们就要把手弄脏，创建这样一个微服务。