# C2 Profile中的`magic_mz_x86`和`magic_mz_x64`

## 0x00 前言
在最近的一个周末，我着手开发一个在线工具（稍后会发布）。在这个过程中，我注意到了C2 Profile中的`magic_mz_*`配置项。经过一番搜索，我发现目前还没有人专门写过关于这个配置项的文章。因此，我计划在这周撰写一篇文档并发布到星球上。然而，周一我在Twitter上看到已经有其他同学抢先一步发布了相关文章，竞争真是激烈！尽管如此，我还是决定继续完成我的文档。

那位同学的文章中有一些小错误：例如，该功能是在Cobalt Strike 4.2版本之后加入的，而不是2.4.3；另外，“dec abp”应为“dec ebp”。虽然这些只是笔误，但对于新手来说可能会造成困扰。因此，在这里我先指出来。那么，这两个配置项究竟有什么用途呢？

## 0x01 使用
`magic MZ`指的是PE文件结构中的前两个字节，它标志着这是一个PE文件，类似于图片文件头或压缩文件头。这个值是固定的`4D 5A`。熟悉Cobalt Strike的同学应该知道，在使用cs payload时，最终加载的是beacon.dll，这是一个反射DLL，默认以`4D 5A 52 45`开头。通常情况下，beacon.dll不会被保存到磁盘上，而是驻留在内存中。杀毒软件可以通过识别这个头部来定位我们的样本。因此，修改这个头部可以起到一定的逃避检测的作用。

根据官方解释（[链接](https://www.cobaltstrike.com/help-malleable-postex)），我们可以通过覆盖Beacon反射DLL的`4D 5A 52 45`来实现这一目的。需要注意的是，覆盖的数据必须是有效的指令，并且这些指令不能对程序执行产生实质性影响。举个例子，`a+1-1=a`，通过一次加法操作和一次减法操作，结果保持不变。

## 0x02 实操
为了实现这一点，我们需要编写一些汇编代码。首先，下载编译工具nasm（[链接](https://www.nasm.us/)）。接下来，创建一个包含以下内容的文件（这是官方提供的默认值`MZRE`）：

```assembly
; x86架构
bits 32
section .text
global _start
_start:
    dec ebp
    inc ebp
    inc eax
    dec eax
```

然后将生成的十六进制字符串填入`magic_mz_x86`配置项中。同样地，对于x64架构，我们可以使用如下代码：

```assembly
; x64架构
bits 64
section .text
global _start
_start:
    not r10
    not r10
    XCHG eax, ebx
    XCHG eax, ebx
```

## 0x03 测试
分别编译上述x86和x64汇编代码，并使用Notepad++的HexEditor插件查看编译结果。许多字符可能是不可见的，但这没有关系，因为Cobalt Strike配置文件支持十六进制格式。

最后，生成无阶段的raw格式代码进行测试。如果发现x64版本无法正常工作，可能是因为DOS头过长。这时，可以使用c2lint工具进行检测（建议在使用任何C2 Profile之前都进行这项检查）。

经过验证，我们得出以下结论：
- x86架构下，最大长度为27字节。
- x64架构下，最大长度为12字节。

适当减少x64指令的数量，即可成功上线。

## 0x04 总结
Cobalt Strike中有许多细节值得深入探究，随着研究的深入，你会愈发感受到其强大之处。除了`magic_mz_x86`和`magic_mz_x64`外，还有其他配置项，如同样在CS 4.2版本后引入的`magic_pe`。这些内容将在后续文章中进一步探讨。

---

*作者：L.N. / 日期：2021-08-24 / 出品方：AttackTeamFamily*
*欢迎访问 [www.red-team.cn]*