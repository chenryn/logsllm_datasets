title:All Your Screens Are Belong to Us: Attacks Exploiting the HTML5
Screen Sharing API
author:Yuan Tian and
Ying Chuan Liu and
Amar Bhosale and
Lin-Shung Huang and
Patrick Tague and
Collin Jackson
2014 IEEE Symposium on Security and Privacy
All Your Screens are Belong to Us:
Attacks Exploiting the HTML5 Screen Sharing API
Yuan Tian∗, Ying-Chuan Liu‡, Amar Bhosale†, Lin-Shung Huang∗,Patrick Tague†,Collin Jackson∗
∗{yuan.tian, linshung.huang, collin.jackson}@sv.cmu.edu,†{amarb, tague}@cmu.edu,‡{kateycliu}@gmail.com
Carnegie Mellon University
Abstract—HTML5 changes many aspects in the browser world
by introducing numerous new concepts; in particular, the new
HTML5 screen sharing API impacts the security implications of
browsers tremendously. One of the core assumptions on which
browser security is built is that there is no cross-origin feedback
loop from the client to the server. However, the screen sharing
API allows creating a cross-origin feedback loop. Consequently,
websites will potentially be able to see all visible content from
the user’s screen,
irrespective of its origin. This cross-origin
feedback loop, when combined with human vision limitations, can
introduce new vulnerabilities. An attacker can capture sensitive
information from victim’s screen using the new API without the
consensus of the victim. We investigate the security implications of
the screen sharing API and discuss how existing defenses against
traditional web attacks fail during screen sharing. We show that
several attacks are possible with the help of the screen sharing
API: cross-site request forgery, history snifﬁng, and information
stealing. We discuss how popular websites such as Amazon and
Wells Fargo can be attacked using this API and demonstrate the
consequences of the attacks such as economic losses, compromised
account and information disclosure. The objective of this paper
is to present the attacks using the screen sharing API, analyze
the fundamental cause and motivate potential defenses to design
a more secure screen sharing API.
I.
INTRODUCTION
Web browsers have evolved from applications that render
simple web pages to application platforms that handle complex
media, which often require installation of plugins, such as
the Google voice and video chat plugins [1]. Recently, the
Web Real-Time Communications (RTC) Working Group [2]
proposed APIs that allow real time communication between
browsers using only HTML5 APIs via JavaScript. Audio and
video communication, including screen sharing, can be set up
using this RTC platform [3]. The Google Chrome browser
supports screen sharing as an experimental feature. It is also
available in Mozilla Firefox’s nightly build. Moreover, this API
is interoperable between Google Chrome and Firefox Nightly
with a slight modiﬁcation to the calling site [4].
The screen sharing API could be utilized to build interactive
media tools and applications, however, the possibility of sharing
the screen with other web browsers and servers raises various
security and privacy concerns. Speciﬁcally, the screen sharing
API creates a cross-origin feedback loop that continuously
transmits the screen back to the screen sharing website which
belongs to other domains. This loop allows other users and the
screen sharing website to see the user’s conﬁdential information.
The fundamental assumption for the web is that this cross-
origin feedback loop does not exist by default; in most cases,
what is shown to the user is only accessible to that user and
the same-origin site. With the loop, however, an attacker can
exploit this information and launch attacks against the user
sharing the screen. The integrity and conﬁdentiality of the
user’s information are severely threatened.
The attacker who has access to the victim’s screen is very
analogous to a shoulder-surfer [5] but with the additional power
of opening and viewing the web pages of the attacker’s choice
inside the user’s browser without the user’s consent. Since
the browser automatically sends authentication information
(e.g. HTTP cookies), the newly opened pages that are only
supposed to be seen by an authenticated user can now be seen
by the attacker. We show that the attacker can steal sensitive
information such as personal messages and bank statements
from the attacker-opened pages. Even worse, we show that
cross-site request forgery (CSRF) tokens can be stolen from
the page source, which can then be used to mount further
attacks against the user.
In this paper, we discuss the extensions to the getUserMe-
dia() API introduced by Google to enable screen sharing and
their potential impact on user security. We present multiple
attacks using this API that can compromise a user’s conﬁden-
tiality and integrity. We show how an attacker can steal a user’s
data from the screen to modify the user’s accounts on popular
websites. Since the attackers have the ability to see the entire
content of the user’s screen, the attack can not be restricted by
the same-origin policy. Because of the limitations of human
sensing, a clever attacker can steal cross-origin page content by
forcefully opening cross-origin pages on the victim’s browser
or embedding cross-origin content inside an iframe. Making
the attacks unobservable such as ﬂashing content quickly or
using translucent color, the attacker can eavesdrop cross-origin
information without drawing attention. We also discuss how
the attacker can steal browser resources such as autocomplete
and autoﬁll history [6] since these resources are shared across
origins for the user’s convenience. These attacks can lead to
serious consequences such as loss of money from bank accounts,
personal information disclosure and identity theft. Simply put,
the attacker can not only see what the user wants him to see
but also force to user to show other sensitive information.
With the knowledge of the fundamental causes of these
attacks, we analyze the possibility of preventing them by a ﬁne-
grained screen sharing, use of incognito mode, and blocking
third-party cookies. We compare these solutions with a focus on
© 2014, Yuan Tian. Under license to IEEE.
DOI 10.1109/SP.2014.10
34
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
security and usability. Since the paper is primarily concerned
about attacks using the screen sharing API, we leave the
implementation and evaluation of these defenses as promising
future work.
Summary of Contributions
•
• We have analyzed the possible impact of the screen
sharing API on user privacy and security. Based on our
experiments and understanding about the current design
of the screen sharing API, we present the security
implications and vulnerabilities that this API could
possibly introduce.
Based on the vulnerabilities that we have discovered,
we show how malicious screen sharing websites can
steal cross-origin content from the user’s browser,
thus affecting privacy, conﬁdentiality and integrity. We
demonstrate how an attacker can perform a CSRF
attack even if the target website has employed CSRF
defenses, and how the attacker can steal other sensitive
user information. We also discuss how these attacks
can be made imperceptible to human by exploiting the
limitations of human sensing.
• We raised an alarm to the browser vendors about
the perils of view-source links. In particular, we
highlighted the risk of malicious screen sharing
websites gaining unauthorized access to security
credentials by viewing the source of cross-origin
websites. As a result of our security report, Google
[7] patched the Chrome browser, which prevents
view-source links to be opened inside iframes.
Organization. The rest of the paper is organized as follows.
In Section II, we discuss various screen sharing techniques
along with their security implications. We present the threat
model in Section III, and demonstrate attacks using the screen
sharing API in Section IV. In Section V, we analyze the
deﬁciencies of existing defenses and propose possible defenses
to mitigate the attacks using the screen sharing API. We
discuss related work in Section VI and conclude in Section VII.
II. SCREEN SHARING TECHNIQUES
Various solutions have been developed to achieve screen
sharing functionality in browsers. We classify these solutions
into three categories:
•
Techniques that Require Installation of Plugins or
Extensions: Popular products such as Google+ allow
their users to share their screens with others after
installing the Google voice and video chat plugin
[1]. Additionally, the screen can be shared using the
Chrome extension API and WebSockets [8]. The API
continuously captures the screenshots as images and
transmits the images to other sites via WebSocket. The
Chrome extension API chrome.desktopCapture is only
accessible to whitelisted extensions with whitelisted
origins.
35
•
•
Techniques that Clone the Document Object Model
(DOM) to Simulate Screen Sharing: Another option
to share a user’s tab is transmitting an HTML DOM
object to other sites. In [9], the author describes two
methods to do so: using Mutation Observers to monitor
the changes of DOM objects, and mirroring the entire
HTML DOM.
New HTML5 Screen Sharing API: The extension
of the getUserMedia() API built on WebRTC allows a
user’s screen to be shared via JavaScript as illustrated
in Figure 1. The detailed usage of the getUserMedia()
API is introduced in [10]1. We use Chrome 26 imple-
mentation as an example to explain the screen sharing
API here. Figure 2 shows the initiation of a screen
sharing session. There are two things to note. One is
that the API can work only over SSL connections. The
other is that the browser asks for the user’s permission
before it starts capturing the screen. After the user
grants the permission to share the screen, the API will
capture the entire visible area of the screen including
the area outside the browser. Also, the browser ﬂashes
a red notiﬁcation on the tab icon to alert the user that
his screen is currently being shared in this tab, as
illustrated in Figure 3.
var share = function share () {
var constraints = {
video: {
mandatory: {
chromeMediaSource: 'screen'
}
}
};
navigator.getUserMedia =
navigator.webkitGetUserMedia ||
navigator.getUserMedia;
navigator.getUserMedia(constraints,
onSharingSuccess, onSharingError);
};
Fig. 1. The usage of the screen sharing API: Google Chrome exposes the
chromeMediaSource constraint for developers to specify the video source. The
constraint is used as an argument of getUserMedia(). If the media source is
set as ’screen’, getUserMedia() would capture the entire screen into the media
stream.
Security Implications. Due to the fundamental differences
among screen sharing implementations, the new HTML5 API
has a very different security implication from the traditional
screen sharing techniques. In comparison to the screen sharing
techniques that require the user to download a plugin or an
extension, the site that uses the screen sharing HTML5 API
runs inside the browser and has the ability to control its own
page as well as open cross-origin content inside an iframe
or a new window. Although the browser’s same-origin policy
prevents the malicious site from accessing cross-origin content
1In Chrome 26, the user needs to enable screen capture support by setting
“Enable screen capture support in getUserMedia()” in chrome://ﬂags.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
(cid:38)(cid:89)(cid:89)(cid:70)(cid:72)(cid:80)(cid:74)(cid:87)(cid:6058)(cid:88)(cid:5)(cid:56)(cid:72)(cid:87)(cid:74)(cid:74)(cid:83)(cid:5)(cid:56)(cid:77)(cid:70)(cid:87)(cid:78)(cid:83)(cid:76)(cid:5)(cid:60)(cid:74)(cid:71)(cid:88)(cid:78)(cid:89)(cid:74)(cid:5)
(cid:56)(cid:74)(cid:83)(cid:88)(cid:78)(cid:89)(cid:78)(cid:91)(cid:74)(cid:5)(cid:40)(cid:84)(cid:83)(cid:89)(cid:74)(cid:83)(cid:89)(cid:5)
(cid:58)(cid:88)(cid:74)(cid:87)(cid:6058)(cid:88)(cid:5)(cid:59)(cid:78)(cid:74)(cid:92)(cid:5)
(cid:56)(cid:74)(cid:87)(cid:91)(cid:74)(cid:87)(cid:6058)(cid:88)(cid:5)(cid:59)(cid:78)(cid:74)(cid:92)(cid:5)
(cid:5)(cid:5)(cid:56)(cid:72)(cid:87)(cid:74)(cid:74)(cid:83)(cid:5)(cid:56)(cid:77)(cid:70)(cid:87)(cid:78)(cid:83)(cid:76)(cid:5)(cid:60)(cid:74)(cid:71)(cid:88)(cid:78)(cid:89)(cid:74)(cid:5)
(cid:5)(cid:5)(cid:5)(cid:56)(cid:72)(cid:87)(cid:74)(cid:74)(cid:83)(cid:5)(cid:56)(cid:77)(cid:70)(cid:87)(cid:78)(cid:83)(cid:76)(cid:5)(cid:60)(cid:74)(cid:71)(cid:88)(cid:78)(cid:89)(cid:74)(cid:5)
(cid:56)(cid:74)(cid:83)(cid:88)(cid:78)(cid:89)(cid:78)(cid:91)(cid:74)(cid:5)(cid:40)(cid:84)(cid:83)(cid:89)(cid:74)(cid:83)(cid:89)(cid:5)
Fig. 4.
information stealing process.
The limitation of human vision allows the attacker to hide the
III. THREAT MODEL
In-Scope Threats. In this paper, we are concerned with the
security impact of the new screen sharing API. We discuss
attacks which can be launched when a user is using a screen
sharing website to share his screen with other users. The attacker
could be the malicious screen sharing website or the other user
with whom your screen is shared.
As illustrated in Figure 5(a) and Figure 5(b), we consider
two threat models. In the ﬁrst model, a malicious screen sharing
website attempts to steal the user’s sensitive information from
other target sites and the browser and to affect the integrity of
the user’s account state. Then, the user is using their browser
with accounts from target websites logged in, and screen sharing
with other users from an attacker’s screen sharing website is
initiated. The malicious screen sharing website embeds pages
of target websites in iframes or pop-ups and makes these
pages invisible to the user. In the second threat model, the
attacker is a malicious receiver. While they are sharing screens
together by a screen sharing service, the malicious receiver
sends some malicious links which embeds sensitive information
to the victim. As the malicious receiver can use tricks to hide
sensitive information and record the shared screen to extract
content invisible to human eyes, the victim might not be aware
of the attack. Even if the victim user ﬁnds something suspicious
and quits the screen sharing session, his sensitive information
has already been collected by the attacker. To provide a clear
outline of the threat models, we identify six roles involved and
deﬁne their abilities below.
• Malicious website: A malicious website is a web at-
tacker who hosts a website with a valid SSL certiﬁcate
and uses the screen sharing API to view the user’s
screen. The attacker lures the user to visit the site and
convinces the user to share the screen. Once the user
starts using screen sharing on the malicious website, the
web attacker displays the user’s sensitive information
on the screen. Since the content on the user’s screen
is sent to the screen sharing server during the screen
Fig. 2. The browser requests the user’s permission for sharing his screen
with the host website. The screen sharing does not begin until the user grants
the permission.
Fig. 3. Once the user provides permission to capture the screen, the browser
ﬂashes a red notiﬁcation on the tab.
directly using JavaScript, using the new screen sharing API, the
malicious site can see the content belonging to cross-domains.
The malicious site can misuse this ability and force the browser
to open sensitive resources such as an email inbox page or
a victim’s bank account statement page inside iframes or in
new windows and capture the cross-origin content rendered
inside these new windows. Since the browser automatically
sends cookies for the respective sites, if the user is already
logged into those sites, the iframes embedded inside attacker’s
screen sharing website or new windows opened by the attacker
will reveal sensitive user information to the screen. Although
sensitive user information can be collected by an attacker’s
server, this information stealing may be imperceptible to victims
because of the limitation of human vision. For example, the
attacker can hide the malicious behavior by playing tricks such