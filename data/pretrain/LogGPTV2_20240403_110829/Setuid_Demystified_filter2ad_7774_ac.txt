ways carried by the euid in both setuid-like and setgid-
like calls. Thus, an effective group ID of zero does not
accord any special privileges to change groups. This is
a potential source of confusion: it is tempting to assume
incorrectly that since appropriate privileges are carried
by the euid in the setuid-like calls, they will be carried
4The seteuid(euid) call in Linux is implemented as setreuid(-1,
euid) or setresuid(-1, euid, -1), depending on the version of the C li-
brary. Hence, the seteuid system call might or might not set the fsuid
reliably, depending on the C library version.
Our model of the uid-setting system calls is based on ﬁ-
nite state automata. The operating system maintains per-
process state (e.g., the real, effective, and saved uids) to
track privilege levels, and thus it is natural to view the
operating system as implementing a ﬁnite state automa-
ton (FSA). A state of the FSA contains all relevant in-
formation about the process, e.g., the three uids. Each
uid-setting system call leads to a number of possible tran-
sitions; we label each transition with the system call that
it comes from.
We construct the FSA in two steps: (1) determine its
states by reading kernel sources; (2) determine its tran-
sitions by simulation. In the ﬁrst step, we determine the
states in the FSA by identifying kernel variables that af-
ruid=euid=suid=0fsuid=0setresuid(x,x,-1)ruid=euid=fsuid=xsuid=0setfsuid(0)ruid=euid=xsuid=fsuid=0setresuid(-1,-1,x)ruid=euid=suid=xfsuid=0fect the behavior of the uid-setting system calls. For ex-
ample, if only the real uid, effective uid, and saved uid
can affect the uid-setting system calls, then each state of
the FSA is of the form (r, e, s), representing the values
of the real, effective, and saved user IDs, respectively.
This is a natural approach. However, the problem one
immediately faces is that the resulting FSA is much too
large: in Linux, uids are 32-bit values, and so there are
(232)3 = 296 possible states. Obviously, manipulating
an FSA of such size is infeasible. Therefore, we need
to somehow abstract away inessential details and reduce
the size of the FSA dramatically.
Fortunately, we can note that there is a lot of symme-
try present. If we have a non-root user ID, the behav-
ior of the operating system is essentially independent
of the actual value of this user ID, and depends only
on the fact that it is non-zero. For example, the states
(ruid, euid, suid) = (100, 100, 100) and (200, 200, 200)
are isomorphic up to a substitution of the value 100 by
the value 200, since the OS will behave similarly in both
cases (e.g., setuid(0) will fail in both cases). In general,
we consider two states equivalent when each can be mu-
tated into the other by a consistent substitution on non-
root user IDs. By identifying equivalent states, we can
shrink the size of the FSA dramatically.
Now that we know that there must exist some reason-
able FSA model, the next problem is how to compute
it. Here we use simulation: if we simulate the presence
of a pseudo-application that tries every possible system
call and we observe the state transitions performed by
the operating system in response to these system calls,
we can infer how the operating system will behave when
invoked by real applications. Once we identify equiva-
lent states, the statespace will be small enough that we
can exhaustively explore the entire statespace of the op-
erating system. This idea is made concrete in Figure 3,
where we give an algorithm to construct an FSA model
using these techniques.
Note that by using simulation to create a model of the
uid-setting system calls, we assume that while a process
is executing such a call, the user IDs of the process can-
not be modiﬁed outside the call. In other words, there is
no race on the user IDs between a uid-setting system call
and other parts of the kernel. This requirement might not
hold in multi-threaded programs if multiple threads share
the same user IDs. We leave this topic for future work.
Implementation Our implementation follows Figure 3
closely. (Note that the simulator must run as root.) In
GETSTATE():
1. Call getresuid(&r,&e,&s).
2. Return (r, e, s).
SETSTATE(r, e, s):
1. Call setresuid(r, e, s).
2. Check for error.
GETALLSTATES():
1. Pick n arbitrary uids u1, . . . , un.
2. Let U := {u1, . . . , un}.
3. Let S := {(r, e, s) : r, e, s ∈ U}.
4. Let C := {setuid(x), setreuid(x, y),
setresuid(x, y, z), ···
: x, y, z ∈ U ∪ {−1}}.
5. Return (S, C).
BUILDMODEL():
1. Let (S, C) := GETALLSTATES().
2. Create an empty FSA with statespace S.
3. For each s ∈ S, do:
4.
5.
6.
7.
Call SETSTATE(s), and then invoke c.
Finally, let s0 := GETSTATE(),
For each c ∈ C, do:
Fork a child process, and within the child, do:
pass s0 to the parent process, and exit.
Add the transition s c→ s0 to the FSA.
8.
9. Return the newly-constructed FSA as the model.
Figure 3: The model-extraction algorithm.
practice, we extend this basic algorithm with several op-
timizations and extensions.
One simple optimization is to use a depth-ﬁrst search to
explore only the reachable states. In our case, the state-
space is small enough that the improvement is probably
unimportant, and we did not implement this optimiza-
tion. A more dangerous optimization would be to em-
ulate the behavior of the operating system from user-
level by cutting-and-pasting the source code of the setuid
system calls from the kernel into our simulation engine.
This would speed up model construction, but the perfor-
mance improvement comes at a severe price: it is hard
to be sure that our emulation of the OS is completely
faithful.
In any case, our unoptimized implementation
already takes only a few seconds to generate the model.
For these reasons, we do not apply this optimization in
our implementation.
To ensure maximum conﬁdence in the correctness of our
results, we check in two different ways that the call to
setresuid in line 1 of SETSTATE() succeeds. First, we
check the return value from the operating system. Sec-
ond, we call getresuid and check that all three user IDs
have been set as desired (see Section 8.1.3).
On Solaris, there are no getresuid and setresuid system
calls. However, we can simulate them using the /proc
ﬁlesystem. We read the three user IDs of a process from
its cred ﬁle, and we modify the user IDs by writing to
its ctl ﬁle (see proc(4) for details).
On Linux, we also model the SETUID capability bit by
adding a fourth dimension to the state tuple. Thus, states
are of the form (r, e, s, b) where the bit b is true when-
ever the SETUID capability is enabled. This allows us to
accurately model the case where an application explic-
itly clears or sets its SETUID capability bit; though we
are not aware of any real application that does this, if we
ever do encounter such an application our model will still
remain valid.
On all operating systems, we extend our model further to
deal with system calls that fail (i.e., when invoking call
c in line 6 of BUILDMODEL()). It is sometimes useful
to be able to reason about whether a system call has suc-
ceeded or failed, and one way is to add a bit to the state
denoting whether the previous system call returned suc-
cessfully or not.
Also, on all operating systems we extend our model to
include group IDs. This adds three additional dimensions
to the state: real gid, effective gid, and saved gid5. In
this way, we can model the semantics of the gid-setting
system calls. On Linux, we also add a bit to indicate
whether the SETGID capability is enabled or not.
6.2 Examples of Formal Models
In this section, we show a series of formal models of
the uid-setting system calls created using the algorithm
in Figure 3. These models differ in their set of user ID
values.
In other words, they differ in the user ID val-
ues picked in step 1 of GETALLSTATES() subroutine in
Figure 3.
We start with a simple model where the set of user ID
values is {0, x} where x is a non-root user ID. Although
simple, this model is accurate for many applications that
manipulate at most one non-root user ID at a time. For
5We don’t currently model supplemental groups, though this would
be straightforward to correct. Note that this omission does not affect
the correctness of our model, as supplemental groups are only used in
access control checks and never affect the behavior of the setgid-like
calls.
instance, a state like (100, 200, 100) will never appear in
such an application. Each state in this simple FSA has
three bits, each representing whether the real uid, effec-
tive uid, or saved uid is root or not. All together there are
eight states in the FSA. In Figure 4 we show graphically
the models one obtains in this way for the setuid call on
Linux, Solaris, and FreeBSD. Note that the models on
Solaris and Linux are equivalent, but they differ from the
model on FreeBSD. Figure 5 shows the models for the
seteuid, setreuid, and setresuid calls on Linux.
A variation of the previous models is shown in Figure 6
where the set of user ID values is {x, y} where x and y
are distinct non-root user ID values. This model is ap-
propriate for applications that switch between two non-
root user IDs (rather than between the root and a non-
root user ID). This model is appropriate for analyzing
BSD games [9] run under the dungeon master. Foley’s
work [10] offers a more serious use of this model.
We can easily extend the simple models to include more
user ID values, which are appropriate for applications
that use more than two user ID values. Figure 7 shows a
model where the set of user ID values is {0, x, y} where
x and y are distinct non-root user ID values. This is the
fully general model of Unix user IDs.
6.3 Correctness
Our model-extraction algorithm (Figure 3) is an instance
of a more general schema for inferring ﬁnite-state mod-
els, specialized by including application-dependent im-
plementations of the GETSTATE(), SETSTATE(), and
GETALLSTATES() subroutines. We argue that our al-
gorithm is correct by arguing that the general version is
correct. This section may be safely skipped on ﬁrst read-
ing.
We frame our theoretical discussion in terms of equiva-
lence relations. Let S denote the set of concrete states
(e.g., triples of 32-bit uids) and C the set of concrete sys-
tem calls. Write s c  t if the operating system will al-
ways transition from state s to t upon invocation of c.
We will need equivalence relations ≡S on S and ≡OS on
S×C that are respected by the operating system: in other
words, if s c  t and s ≡S s0, then there is some state t0
and some call c0 so that (s, c) ≡OS (s0, c0), t ≡S t0, and
s0 c0  t0. The intuition is that calling c from s is some-
how isomorphic to calling c0 from s0. Also, we require
that whenever (s, c) ≡OS (s0, c0) holds, then s ≡S s0
does, too.
(a) An FSA describing setuid in Linux 2.4.18
(b) An FSA describing setuid in Solaris 8
(c) An FSA describing setuid in FreeBSD 4.4
Figure 4: Three ﬁnite state automata describing the setuid system call in Linux, Solaris, and FreeBSD, respectively.
Ellipses represent states of the FSA, where a notation like “R=1,E=0,S=1” indicates that euid = 0 and ruid = suid 6= 0.
Each transition is labelled with the system call it corresponds to. To avoid cluttering the diagram, we omit the error
states and (in Linux) the capability bits that otherwise would appear in our deduced model.
R=1,E=1,S=0setuid(1)R=1,E=0,S=0setuid(0)R=0,E=0,S=0setuid(0)R=1,E=1,S=1setuid(1)R=1,E=0,S=1setuid(0)setuid(1)setuid(0)setuid(1)setuid(0)setuid(1)R=0,E=1,S=1setuid(1)R=0,E=0,S=1setuid(0)setuid(0)setuid(1)R=0,E=1,S=0setuid(0)setuid(1)R=1,E=1,S=0setuid(1)R=1,E=0,S=0setuid(0)R=0,E=0,S=0setuid(0)R=1,E=1,S=1setuid(1)R=1,E=0,S=1setuid(0)setuid(1)setuid(0)setuid(1)setuid(0)setuid(1)R=0,E=1,S=1setuid(1)R=0,E=0,S=1setuid(0)setuid(0)setuid(1)R=0,E=1,S=0setuid(0)setuid(1)R=1,E=1,S=0setuid(0)R=1,E=1,S=1setuid(1)setuid(0)setuid(1)R=1,E=0,S=1setuid(1)R=0,E=0,S=0setuid(0)setuid(1)setuid(0)R=1,E=0,S=0setuid(1)setuid(0)R=0,E=1,S=1setuid(1)setuid(0)R=0,E=1,S=0setuid(1)setuid(0)R=0,E=0,S=1setuid(1)setuid(0)(a) An FSA describing seteuid in Linux
(b) An FSA describing setreuid in Linux
(c) An FSA describing setresuid in Linux
Figure 5: Three ﬁnite state automata describing the seteuid, setreuid, setresuid system calls in Linux respectively.
Ellipses represent states of the FSA, where a notation like “R=1,E=0,S=1” indicates that euid = 0 and ruid = suid 6= 0.
Each transition is labelled with the system call it corresponds to.
R=1,E=1,S=1seteuid(0)seteuid(1)R=1,E=0,S=1seteuid(1)seteuid(0)R=1,E=1,S=0seteuid(1)R=1,E=0,S=0seteuid(0)seteuid(1)seteuid(0)R=0,E=1,S=1seteuid(1)R=0,E=0,S=1seteuid(0)seteuid(1)seteuid(0)R=0,E=1,S=0seteuid(1)R=0,E=0,S=0seteuid(0)seteuid(1)seteuid(0)R=1,E=1,S=0setreuid(0, 0)setreuid(0, 1)R=1,E=0,S=0setreuid(1, 0)R=1,E=1,S=1setreuid(1, 1)setreuid(1, 0)setreuid(1, 1)R=0,E=0,S=0setreuid(0, 0)R=0,E=1,S=1setreuid(0, 1)setreuid(0, 0)setreuid(0, 1)setreuid(1, 0)setreuid(1, 1)R=1,E=0,S=1setreuid(1, 0)setreuid(1, 1)setreuid(0, 0)setreuid(0, 1)setreuid(1, 0)setreuid(1, 1)setreuid(0, 0)setreuid(0, 1)setreuid(1, 0)setreuid(1, 1)setreuid(0, 0)setreuid(0, 1)R=0,E=1,S=0setreuid(1, 0)setreuid(1, 1)setreuid(0, 0)setreuid(0, 1)R=0,E=0,S=1setreuid(1, 0)setreuid(1, 1)setreuid(0, 0)setreuid(0, 1)R=1,E=1,S=1setresuid(0, 0, 0)setresuid(0, 0, 1)setresuid(0, 1, 0)setresuid(0, 1, 1)setresuid(1, 0, 0)setresuid(1, 0, 1)setresuid(1, 1, 0)setresuid(1, 1, 1)R=1,E=1,S=0setresuid(1, 1, 1)setresuid(1, 1, 0)R=0,E=0,S=0setresuid(0, 0, 0)R=0,E=0,S=1setresuid(0, 0, 1)R=0,E=1,S=0setresuid(0, 1, 0)R=0,E=1,S=1setresuid(0, 1, 1)R=1,E=0,S=0setresuid(1, 0, 0)R=1,E=0,S=1setresuid(1, 0, 1)setresuid(1, 1, 1)setresuid(1, 1, 0)setresuid(0, 0, 0)setresuid(0, 0, 1)setresuid(0, 1, 0)setresuid(0, 1, 1)setresuid(1, 0, 0)setresuid(1, 0, 1)setresuid(1, 1, 1)setresuid(1, 1, 0)setresuid(0, 0, 0)setresuid(0, 0, 1)setresuid(0, 1, 0)setresuid(0, 1, 1)setresuid(1, 0, 0)setresuid(1, 0, 1)setresuid(1, 1, 1)setresuid(1, 1, 0)setresuid(0, 0, 0)setresuid(0, 0, 1)setresuid(0, 1, 0)setresuid(0, 1, 1)setresuid(1, 0, 0)setresuid(1, 0, 1)setresuid(1, 1, 1)setresuid(1, 1, 0)setresuid(0, 0, 0)setresuid(0, 0, 1)setresuid(0, 1, 0)setresuid(0, 1, 1)setresuid(1, 0, 0)setresuid(1, 0, 1)setresuid(1, 1, 1)setresuid(1, 1, 0)setresuid(0, 0, 0)setresuid(0, 0, 1)setresuid(0, 1, 0)setresuid(0, 1, 1)setresuid(1, 0, 0)setresuid(1, 0, 1)setresuid(1, 1, 1)setresuid(1, 1, 0)setresuid(0, 0, 0)setresuid(0, 0, 1)setresuid(0, 1, 0)setresuid(0, 1, 1)setresuid(1, 0, 0)setresuid(1, 0, 1)Figure 6: A ﬁnite state automaton describing the setuid system call in Linux. This FSA considers only two distinct
non-root user ID values x and y. Ellipses represent states of the FSA, where a notation like “R=x,E=y,S=x” indicates
that euid = y and ruid = suid = x. Each transition is labelled with the system call it corresponds to.
Figure 7: A ﬁnite state automaton describing the setuid system call in Linux. This FSA considers three user ID values:
the root user ID and two distinct non-root user ID values x and y. Ellipses represent states of the FSA, where a notation
like “R=0,E=x,S=y” indicates that ruid = 0, euid = x and suid = y. Each transition is labelled with the system call it
corresponds to.
A critical requirement is that the operating system must
behave deterministically given the equivalence class of
the current state. More precisely, if s c  t and s0 c0  u
where (s, c) ≡OS (s0, c0), then we require t ≡S u. The
intuition is that the behavior of the operating system will
depend only on which equivalence class we are in, and
not on any other information about the state. For in-
stance, the behavior of the operating system cannot de-
pend on any global variables that don’t appear in the state
s; if it does, these global variables must be included into
the statespace S. As another example, a system call im-
plementation that attempts to allocate memory and re-
turned an error code if this allocation fails will violate
our requirement, because the success or failure of the
memory allocation introduces non-determinism, which