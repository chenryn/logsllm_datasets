**作者：evilpan**  
**原文链接：[ https://evilpan.com/2020/08/09/elf-inside-out/](https://evilpan.com/2020/08/09/elf-inside-out/ "
https://evilpan.com/2020/08/09/elf-inside-out/")  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！  
投稿邮箱：PI:EMAIL**
本文介绍了ELF的基本结构和内存加载的原理，并用具体案例来分析如何通过ELF特性实现HIDS bypass、加固/脱壳以及辅助进行binary
fuzzing。
# 前言
作为一个安全研究人员，ELF可以说是一个必须了解的格式，因为这关系到程序的编译、链接、封装、加载、动态执行等方方面面。有人就说了，这不就是一种文件格式而已嘛，最多按照SPEC实现一遍也就会了，难道还能复杂过FLV/MP4？曾经我也是这么认为的，直到我在日常工作时遇到了下面的错误:
    $ r2 a.out
    Segmentation fault
作为一个开源爱好者，我的[radare2](https://github.com/radareorg/radare2)经常是用master分支编译的，经过在github中搜索，发现radare对于ELF的处理还有不少同类的问题，比如[issue#17300](https://github.com/radareorg/radare2/issues/17300)以及[issue#17379](https://github.com/radareorg/radare2/issues/17379)，这还只是近一个月内的两个open
issue，历史问题更是数不胜数。
总不能说radare的开发者不了解ELF吧？事实上他们都是软件开发和逆向工程界的专家。不止radare，其实IDA和其他反编译工具也曾出现过各类[ELF相关的bug](https://ioactive.com/wp-content/uploads/2018/05/IOActive_ELF_Parsing_with_Melkor-1.pdf)。
说了那么多，只是为了引出一个观点:
ELF既简单也复杂，值得我们去深入了解。网上已经有了很多介绍ELF的文章，因此本文不会花太多篇幅在SPEC的复制粘贴上，而是结合实际案例和应用场景去进行说明。
# ELF 101
ELF的全称是 **Executable and Linking Format**
，这个名字相当关键，包含了ELF所需要支持的两个功能——执行和链接。不管是ELF，还是Windows的`PE`，抑或是MacOS的`Mach-O`，其根本目的都是为了能让处理器正确执行我们所编写的代码。
## 大局观
在上古时期，给CPU运行代码也不用那么复杂，什么代码段数据段，直接把编译好的机器码一把梭烧到中断内存空间，PC直接跳过来就执行了。但随着时代变化，大家总不能一直写汇编了，即便编译器很给力，也会涉及到多人协作、资源复用等问题。这时候就需要一种可拓展(Portable)的文件标准，一方面让开发者(编译器/链接器)能够高效协作，另一方面也需要系统能够正确、安全地将文件加载到对应内存中去执行，这就是ELF的使命。
从大局上看，ELF文件主要分为3个部分:
  * ELF Header
  * Section Header Table
  * Program Header Table
其中， **ELF Header** 是文件头，包含了固定长度的文件信息； **Section Header Table** 则包含了 **链接时**
所需要用到的信息； **Program Header Table** 中包含了 **运行时** 加载程序所需要的信息，后面会进行分别介绍。
## ELF Header
ELF头部的定义在[elf/elf.h](https://github.com/bminor/glibc/blob/glibc-2.27/elf/elf.h)中(以glibc-2.27为例)，使用POD结构体表示，内存可使用结构体的字段一一映射，头部表示如下:
    #define EI_NIDENT (16)
    typedef struct
    {
      unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */
      Elf32_Half    e_type;         /* Object file type */
      Elf32_Half    e_machine;      /* Architecture */
      Elf32_Word    e_version;      /* Object file version */
      Elf32_Addr    e_entry;        /* Entry point virtual address */
      Elf32_Off e_phoff;        /* Program header table file offset */
      Elf32_Off e_shoff;        /* Section header table file offset */
      Elf32_Word    e_flags;        /* Processor-specific flags */
      Elf32_Half    e_ehsize;       /* ELF header size in bytes */
      Elf32_Half    e_phentsize;        /* Program header table entry size */
      Elf32_Half    e_phnum;        /* Program header table entry count */
      Elf32_Half    e_shentsize;        /* Section header table entry size */
      Elf32_Half    e_shnum;        /* Section header table entry count */
      Elf32_Half    e_shstrndx;     /* Section header string table index */
    } Elf32_Ehdr;
注释都很清楚了，挑一些比较重要的来说。其中`e_type`表示ELF文件的类型，有以下几种:
  * ET_NONE: 未知类型
  * ET_REL: 可重定向类型(relocatable)，通常是我们编译的`*.o`文件
  * ET_EXEC: 可执行类型(executable)，静态编译的可执行文件
  * ET_DYN: 共享对象(shared object)，动态编译的可执行文件或者动态库`*.so`
  * ET_CORE: coredump文件
`e_entry`是程序的入口虚拟地址，注意不是main函数的地址，而是`.text`段的首地址`_start`。当然这也要求程序本身非PIE(`-no-pie`)编译的且ASLR关闭的情况下，对于非`ET_EXEC`类型通常并不是实际的虚拟地址值。
其他的字段大多数是指定Section Header(`e_sh`)和Program Header(`e_ph`)的信息。Section/Program
Header Table本身可以看做是数组结构，ELF头中的信息指定对应Table数组的位置、长度、元素大小信息。最后一个 _e_shstrndx_
表示的是section table中的第 _e_shstrndx_ 项元素，保存了所有section table名称的字符串信息。
## Section Header
上节说了section header table是一个数组结构，这个数组的位置在 _e_shoff_ 处，共有 _e_shnum_
个元素(即section)，每个元素的大小为 _e_shentsize_ 字节。每个元素的结构如下:
    typedef struct
    {
      Elf32_Word    sh_name;        /* Section name (string tbl index) */
      Elf32_Word    sh_type;        /* Section type */
      Elf32_Word    sh_flags;       /* Section flags */
      Elf32_Addr    sh_addr;        /* Section virtual addr at execution */
      Elf32_Off sh_offset;      /* Section file offset */
      Elf32_Word    sh_size;        /* Section size in bytes */
      Elf32_Word    sh_link;        /* Link to another section */
      Elf32_Word    sh_info;        /* Additional section information */
      Elf32_Word    sh_addralign;       /* Section alignment */
      Elf32_Word    sh_entsize;     /* Entry size if section holds table */
    } Elf32_Shdr;
其中`sh_name`是该section的名称，用一个word表示其在字符表中的偏移，字符串表(.shstrtab)就是上面说到的第
_e_shstrndx_ 个元素。ELF文件中经常使用这种偏移表示方式，可以方便组织不同区段之间的引用。
`sh_type`表示本section的类型，SPEC中定义了几十个类型，列举其中一些如下:
  * SHT_NULL: 表示该section无效，通常第0个section为该类型
  * SHT_PROGBITS: 表示该section包含由程序决定的内容，如`.text`、`.data`、`.plt`、`.got`
  * SHT_SYMTAB/SHT_DYNSYM: 表示该section中包含符号表，如`.symtab`、`.dynsym`
  * SHT_DYNAMIC: 表示该section中包含动态链接阶段所需要的信息
  * SHT_STRTAB: 表示该section中包含字符串信息，如`.strtab`、`.shstrtab`
  * SHT_REL/SHT_RELA: 包含重定向项信息
  * ...
虽然每个section header的大小一样(e_shentsize字节)，但不同类型的section有不同的内容，内容部分由这几个字段表示:
  * sh_offset: 内容起始地址相对于文件开头的偏移
  * sh_size: 内容的大小
  * sh_entsize: 有的内容是也是一个数组，这个字段就表示数组的元素大小
与运行时信息相关的字段为:
  * sh_addr: 如果该section需要在运行时加载到虚拟内存中，该字段就是对应section内容(第一个字节)的虚拟地址
  * sh_addralign: 内容地址的对齐，如果有的话需要满足`sh_addr % sh_addralign = 0`
  * sh_flags: 表示所映射内容的权限，可根据`SHF_WRITE/ALLOC/EXECINSTR`进行组合
另外两个字段`sh_link`和`sh_info`的含义根据section类型的不同而不同，如下表所示: