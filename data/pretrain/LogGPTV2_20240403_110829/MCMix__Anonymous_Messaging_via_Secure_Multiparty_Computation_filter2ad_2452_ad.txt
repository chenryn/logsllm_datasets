i,Ser(cid:96)
Ser(cid:96)
i,Ser1
i,Ser2
i,Ser3
5 The Dialing Protocol
The dialing protocol enables a user ui to notify another
user u j that she wants to start a conversation, much like
how the telephone protocol works. The protocol runs in
1224    26th USENIX Security Symposium
USENIX Association
rounds to deter possible timing attacks, where in each
round, every online active user will either send a DIAL
request or a DIALCHECK request. All requests are mu-
tually indiscriminate. For clarity, we ﬁrst provide a de-
scription of the Dialing protocol steps. Then, we proceed
with the efﬁcient program DLNsort implementing it.
Protocol description. The protocol runs in seven steps,
where steps 2-6 are executed by the MPC servers. Steps
1 and 7 are executed locally by each user.
1. Encoding: The inputs x1, . . . ,xn are of the form of
(DIAL,ui,u j) requests, (DIALCHECK,ui) requests, or
⊥, representing the action each user takes for this dialing
round. For simplicity, assume that the users are enumer-
ated as u1, . . . ,un consistently with the input sequence
x1, . . . ,xn, i.e. ui is the user that submitted the i-th in-
put. As a result, the active users that submitted non-⊥
values, are enumerated as u1, . . . ,uact, where act is the
size of the active set Uact. The inputs of the active users
are encoded as triples of the form ai := (ai[1],ai[2],ai[3])
where the third component is an input wire ID widi. The
wire IDs are initially set to zero, but in the following Step
2, each widi will be set unique for each ui.
In particular,
if ui wants to dial u j,
then the
(DIAL,ui,u j) request is encoded as (UNi, UN j,0) where
UNi and UN j are the usernames of the dialer and the
If ui is a dial checker, then the
dialee respectively.
(DIALCHECK,ui) request is encoded as (C, UN j,0),
where (i) C is a special value designated to denote a dial
check and is different from any possible username value,
and (ii) UN j is the checker’s own username.
2. Assigning wire ID values: As a ﬁrst step, the MPC
protocol assigns unique wire IDs for each user. This
is done by setting the third component ai[3] of the en-
coded triple ai to i. Therefore, for each ui, we have that
widi := i. These wire IDs are needed internally for the
MPC calculation and express the order in which the in-
puts were received so that the respective outputs will be
delivered in the same order.
3. Checking input validity: The protocol then checks
if any of the ﬁrst two members of each triple, denoted by
ai[1] and ai[2], is equal to the submitter’s username. This
check ensures that inputs are encoded in a way that does
not compromise the security of the system. The threat
here is that a user ui might try to impersonate a user u j by
encoding a DIALCHECK input as ai = (C, UN j, widi).
That attack would allow user ui to receive a dial request
that was intended for user u j. A similar problem arises
when considering a user ui encoding a DIAL input as
ai = (UNl, UN j, widi). In this case, user u j will think the
dial originated from user ul. To avert such impersonation
attacks, it is enough for the MPC protocol to check that
either the ﬁrst or the second member of an input tuple is
equal to the username of the user that submitted that in-
put. This, along with the fact that the input is sent from
the user to each MPC server using authenticated encryp-
tion (cf. step 2 of the architecture in section 4) guarantees
that no impersonation attack can take place.
In more detail, if the input is a DIALCHECK request,
then this check ensures that the second member of the
tuple is the user’s own username. In the case of a DIAL
request, the check ensures that a user can only imperson-
ate another user when she dials herself, that is a request
of the form ai = (UN j, UNi, widi) is created by user ui.
In this case, this request does not affect the protocol. If
the check fails for the encoded input ai, then the input is
set to ai = (0,0, widi) and does not affect the protocol.
4. Sorting by usernames: The encoded input triples
are ﬁrst sorted according to their second components
using the oblivious Quicksort algorithm of [33], im-
plemented according to [13]. Observe that every non-
zero second component is either (i) the username UN j
of dialee u j in a dial request from some user ui, or
(ii) the username UN j from dial checker u j. Thus,
when a triple (C, UN j, wid j) is adjacent to some triple
(UNi, UN j, widi) with a non-zero second component, this
determines a dial pair between ui, u j. We note that two
special conﬂict cases may appear:
I. (C, UN j, wid j) is adjacent to two dial triples as
. . . , (UNi, UN j, widi), (C, UN j, wid j), (UNi(cid:48), UN j, widi(cid:48) ), . . .
II. Two or more adjacent dial
triples correspond
to (C, UN j, wid j). The sorting would then appear as
. . . , (UNi(cid:48), UN j, widi(cid:48)), (UNi, UN j, widi), (C, UN j, wid j), . . .
5. Connecting neighbors: Next, requests are pro-
cessed individually by looking at both their neighbors’
triples to determine if there is a dial for any given dial
check request. Of course, requests at the ﬁrst and last
place of the sorted vector need only look at one neigh-
bor. Thus, we can claim that any dial check request will
have a suitable dial request as its neighbor or not at all.
In more detail, for every user ui, the protocol produces
a pair b := (bi[1],bi[2]), where bi[2] is widi and bi[1] is
either (i) the username UN j of some user u j that dialed
ui, or (ii) 0, if no dial request has been made for ui, or ui
has made a dial request.
6. Sorting by wire IDs: As a ﬁnal sorting step, the
protocol needs to sort the processed requests according
to their wire IDs in order for the correct requests to be
forwarded to each user. The latter sort, performed on
(cid:104)b1, . . . ,bact(cid:105) according to the wire IDs can again be im-
plemented by the Quicksort algorithm of [33].
The result of the last sorting is a vector (cid:104)ˆb1, . . . , ˆbact(cid:105)
where ˆbi is a pair (ˆbi[1], ˆbi[2]) that corresponds to ui and
ˆb1 is essentially either (i) a username UN j or (ii) a zero
value, in both cases indexed by ˆb2 := widi.
USENIX Association
26th USENIX Security Symposium    1225
The Dialing Program DLNsort
Input: a sequence (cid:104)x1, . . . ,xn(cid:105) where xi
is either a
(DIAL,ui,u j) request, a (DIALCHECK,ui) request,
or ⊥. All ⊥ inputs are stacked last.
Output: a sequence (cid:104)yi(cid:105)i:xi(cid:54)=⊥, where yi either is a κ-bit
integer ti, if xi = (DIAL,ui,u j), or a pair of a κ-bit
integer ti and a bit ci, if xi = (DIALCHECK,ui).
else if xi = (DIAL,ui,u j) then
else if xi = (DIALCHECK,ui) then
1. For each i ← 1, . . . ,n
if xi = ⊥ then
Set act := i− 1 ;
Break loop ;
Set ai := (ai[1],ai[2],ai[3]) ← (UNi, UN j,0) ;
Set ai := (ai[1],ai[2],ai[3]) ← (C, UNi,0) ;
end if
2. For each i ← 1, . . . , act
Set widi as ai[3] ← i ;
3. For each i ← 1, . . . , act
if ai[1] (cid:54)= UNi AND ai[2] (cid:54)= UNi then
else
Set ai[1] = ai[2] = 0 ;
end if
4. (cid:104)ai(cid:105)i:xi(cid:54)=⊥ according to second coordinate using
Quicksort;
5. For each i ← 1, . . . , act
if ai[1] = C AND ai[2] = ai−1[2] then
Set bi := (bi[1],bi[2]) ← (ai−1[1],ai[3]) ;
else if ai[1] = C AND ai[2] = ai+1[2] then
Set bi := (bi[1],bi[2]) ← (ai+1[1],ai[3]) ;
Set bi := (bi[1],bi[2]) ← (0,ai[3]) ;
end if
6. Sort tuples (cid:104)bi(cid:105)i:xi(cid:54)=⊥ according to second coordi-
nate using Quicksort;
7. For each i ← 1, . . . , act
if ai[1] = UNi then
else if ai[1] = C AND bi[1] ∈ UN then
Set ti ← H(cid:0)GenerateKey(ai[1],ai[2]),r(cid:1) ;
Set ti ← H(cid:0)GenerateKey(ai[1],bi[1]),r(cid:1) ;
Set ti ← H(cid:0)GenerateKey(ski,ρi),r(cid:1) ;
else if ai[1] = C AND bi[1] = 0 then
Set yi ← (ti,1) ;
Set yi ← ti ;
$← {0,1}64 ;
Pick ρi
Set yi ← (ti,0) ;
end if
return y := (cid:104)yi(cid:105)i:xi(cid:54)=⊥ .
Figure 4: The Dialing program DLNsort realizing the
Dialing program DLNabs for dialing round r, and users
u1, . . . ,un with usernames UN1, . . . , UNn ∈ {0,1}64. The
value C denotes a dial check request.
7. Computing the dead drops: After the Quicksort al-
gorithm is completed, the active users u1, . . . ,uact are de-
livered the values ˆb1[1], . . . , ˆb1[act] respectively. Having
received ˆbi[1], dialer ui that knows UN j, and dial checker
u j that obtained UNi, can calculate their shared dead drop
value for dialing round r as follows:
ti := H(cid:0)Ki, j,r(cid:1) ,
t j := H(cid:0)Kj,i,r(cid:1) ,
if ˆbi[1] = 0
if ˆbi[1] = UN j
Above, H is a standard cryptographic hash function,
r is the round number. The values Ki, j,Kj,i are the ID-
KA keys that ui and u j compute by running the key
agreement algorithm GenerateKey on input (ski, UN j)
and (sk j, UNi) respectively (cf. Section 2), where ski, sk j
are the secret keys of ui and u j. Recall that the opera-
tions for ID-KA key generation are over a ﬁnite multi-
plicative group of prime order q. We stress that the dead
drop value is at least 64 bits long to make accidental col-
lisions unlikely, although our system can tolerate them.
By the correctness of the ID-KA protocol, it holds that
Ki, j = Kj,i, hence we have that ti = t j.
On the other hand, if user ui dial checked but ˆbi[1] =
0 (no one dialed ui), then for uniformity reasons, she
computes a random dead drop as above by inserting a
random value ρi in place of UN j, i.e.
she sets ti :=
H(cid:0)GenerateKey(ski,ρi),r(cid:1).
Note that if ui has dialchecked, then either (i) she es-
tablished a rendezvous point with u j, if ˆb1 = UN j, or
(ii) no one dialed her, if ˆb1 = 0. Thus, she can set a
“success” bit ci to 1 or 0 respectively, indicating her suc-
cessful engagement in the dialing round r. Besides, if
ui is a dialer that dialed u j, then she always computes
the value ti := H(cid:0)GenerateKey(ski, UN j),r(cid:1), regardless
of the success of her dialing request. Hence, she can not
infer a success bit.
The Dialing program DLNsort .
The program DLNsort
implementing the Dialing protocol is presented in Fig. 4.
Following Section 3, we show that DLNsort realizes
the member of the Dialing program family DLNabs that
corresponds to our sorting process. Namely, in Step
4 of DLNsort (Sorting by usernames), the inputs are ar-
ranged according to an ordering of their second coordi-
nate. Thus, we set the index z that parameterizes the fam-
ily DLNabs to be the string zqs2 as follows: zqs2 is parsed
as the deterministic program Rzqs2
DLN that takes as takes as
input an index i and array of triples x in encoded form,
and outputs the index j so that when the array is sorted
according to Quicksort ordering on the second coordi-
nate, xi is the left neighbor of the encoded x j. Formally,
we state the following theorem and provide the proof in
the full version of the paper.
1226    26th USENIX Security Symposium
USENIX Association
Theorem 1. Let n be the number of users, κ ≥ 64 be
the dead drop string length and q be the prime order of
the underlying ID-KA group. Let H be the cryptographic
hash function modeled as a random oracle. Then, the
Dialing program DLNsort described in Fig. 4 implements
the member of the Dialing program family DLNabs de-
scribed in Fig. 2 for parameter zqs2 with correctness er-
ror n4
q + n
2κ .
Remark 2. The correctness error n4
2κ is typically a
negligible value in our setting. To provide intuition, con-
sider the case with a number of n = 100000 < 217 users,
dead drop size κ = 64 bits and group size q ≥ 2128. The
error for this case is less than 217·4
q + n
2128 + 217
264 ≈ 2−47 .
6 The Conversation Protocol
The Conversation protocol facilitates the actual exchange
of messages associated with the same t dead drop value,
which represents a rendezvous point computed in the ﬁ-
nal step of a Dialing protocol execution. It is expected
that no more than two messages will have the same t
value due to its large bit-size, although our system can
handle collisions as we will see later. As in the previ-
ous section, we ﬁrst provide a description of the Con-
versation protocol and then the corresponding program
labeled CNVsort that implements it. At this point, we have
to highlight our assumption that a valid message mi at the
input has its least signiﬁcant bit (LSB) equal to 0. This
ﬂag which could also be a discrete fourth member of our
tuple, is useful at (i) conﬂict resolution when more than
two dead drops are identical and (ii) the parallelization
of our protocol discussed in section 11 and in the full
version of the paper.
Protocol description. The protocol is executed via the
following steps, where steps 2-6 are executed by the
MPC servers. Step 1 is executed locally by each user.
1. Encoding:
the form of
(CONV,ti,mi) requests, or ⊥. Again, we assume that
the users are enumerated as u1, . . . ,un consistently with
the order they submitted their input sequence x1, . . . ,xn,
hence all ⊥ values are stacked last. Active users’ inputs
are encoded as triples of the form ai := (ai[1],ai[2],ai[3])
where the third component is an input wire ID widi that
will be uniquely assigned in the following step. In par-
ticular, if ui wants to engage in conversation, then the
(CONV,ti,mi) request is encoded as (ti,mi,0). In case
ui is not engaging in conversation the request will use a
random dead drop value and a random message.
2. Assigning wire ID values: As a ﬁrst step, the MPC
protocol assigns unique wire IDs for each user. This is
done by setting the third component ai[3] of the encoded
triple ai to i. Thus, for each ui, we have that widi := i.
The inputs are of
3. Sorting by dead drops: The encoded input triples
are ﬁrst sorted according to their ﬁrst components using
the oblivious Quicksort algorithm of [33]. As a result,
the inputs of any two users that share the same dead drop
value will become adjacent.
4. Exchanging adjacent messages: By construction,
two inputs with the same dead drop value indicate a pair
of users ui and u j that wish to communicate. Thus, the
protocol generates a vector (cid:104)b1, . . . ,bn(cid:105), where each bi
is a pair (bi[1],bi[2]), of which the second component is
widi and the ﬁrst component is either (i) the message of