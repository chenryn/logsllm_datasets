            solved[board] = True
    for board in range(len(boards)):
        if solved[board]:
            continue
        flag = True
        for row in range(3):
            for col in range(3):
                if boards[board][row][col] == 0:
                    flag = False
        if flag:
            solved[board] = True
    print(solved)
def check_solved1():
    # global boards
    global solved
    for board in range(len(boards)):
        if solved[board]:
            continue
        flag = True
        for row in range(3):
            for col in range(3):
                if boards[board][row][col] == 0:
                    flag = False
        if flag:
            solved[board] = True
    # print(solved)
unknown_conditions = [[1,2,4],[4,2,1],[1,3,9],[9,3,1],[2,4,8],[8,4,2],[4,6,9],[9,6,4]]
def judge():
    global boards
    global solved
    global opp_choice
    # Attack
    # for board in range(len(boards)-1,-1,-1):
    for board in [opp_choice]:
        # if solved[board]:
        #     continue
        # prevent draw here
        # rest = 0
        # for b in range(len(boards)):
        #     if not solved[b] and b != board:
        #         for row in range(3):
        #             for col in range(3):
        #                 if boards[b][row][col] == 0:
        #                     rest += 1
        # if rest %2 == 1 and solved.count(False) > 1:
        #     continue
        # Attack on row
        for row in range(3):
            if boards[board][row][0] and boards[board][row][1] and boards[board][row]
[2] == 0:
                if 0 < boards[board][row][1] - (boards[board][row][0]-boards[board]
[row][1]) < 10:
                    return 1, board, row, 2, boards[board][row][1] - (boards[board]
[row][0]-boards[board][row][1])
                for condition in unknown_conditions:
                    if boards[board][row][0] == condition[0] and boards[board][row][1] 
== condition[1]:
                        return 1, board, row, 2, condition[2]
            elif boards[board][row][0] and boards[board][row][2] and boards[board][row]
[1] == 0:
                if (boards[board][row][2]-boards[board][row][0])%2==0:
                    return 1, board, row, 1, boards[board][row][0] - (boards[board]
[row][0]-boards[board][row][2]+1)//2
                for condition in unknown_conditions:
                    if boards[board][row][0] == condition[0] and boards[board][row][2] 
== condition[2]:
                        return 1, board, row, 1, condition[1]
            elif boards[board][row][1] and boards[board][row][2] and boards[board][row]
[0] == 0:
                if 0 < boards[board][row][1] - (boards[board][row][2]-boards[board]
[row][1]) < 10:
                    return 1, board, row, 0, boards[board][row][1] - (boards[board]
[row][2]-boards[board][row][1])
                for condition in unknown_conditions:
                    if boards[board][row][1] == condition[1] and boards[board][row][2] 
== condition[2]:
                        return 1, board, row, 0, condition[0]
        # Attack on col
        for col in range(3):
            if boards[board][0][col] and boards[board][1][col] and boards[board][2]
[col] == 0:
                if 0 < boards[board][1][col] - (boards[board][0][col]-boards[board][1]
[col]) < 10:
                    return 1, board, 2, col, boards[board][1][col] - (boards[board][0]
[col]-boards[board][1][col])
                for condition in unknown_conditions:
                    if boards[board][0][col] == condition[0] and boards[board][1][col] 
== condition[1]:
                        return 1, board, 2, col, condition[2]
            elif boards[board][0][col] and boards[board][2][col] and boards[board][1]
[col] == 0:
                if (boards[board][2][col]-boards[board][0][col])%2==0:
                    return 1, board, 1, col, boards[board][0][col] - (boards[board][0]
[col]-boards[board][2][col]+1)//2
                for condition in unknown_conditions:
                    if boards[board][0][col] == condition[0] and boards[board][2][col] 
== condition[2]:
                        return 1, board, 1, col, condition[1]
            elif boards[board][1][col] and boards[board][2][col] and boards[board][0]
[col] == 0:
                if 0 < boards[board][1][col] - (boards[board][2][col]-boards[board][1]
[col]) < 10:
                    return 1, board, 0, col, boards[board][1][col] - (boards[board][2]
[col]-boards[board][1][col])
                for condition in unknown_conditions:
                    if boards[board][2][col] == condition[2] and boards[board][1][col] 
== condition[1]:
                        return 1, board, 0, col, condition[0]
    # Defend
    # for board in range(len(boards)):
    for board in [opp_choice]:
        if solved[board]:
            continue
        for row in range(3):
            for col in range(3):
                if boards[board][row][col]:
                    continue
                available = set(range(1,10))
                if   col == 0 and boards[board][row][2]==0 and boards[board][row][1]:
                    needRemove = set()
                    for val in available:
                        if 0 < boards[board][row][1] - (val-boards[board][row][1]) < 
10:
                            # print(f"Removing {val} due to rule 1")
                            needRemove.add(val) 
                    for condition in unknown_conditions:
                        if boards[board][row][1] == condition[1]:
                            needRemove.add(condition[0])
                    available -= needRemove
                elif col == 0 and boards[board][row][1]==0 and boards[board][row][2]:
                    needRemove = set()
                    for val in available:
                        if (boards[board][row][2]-val)%2==0:
                            # print(f"Removing {val} due to rule 2")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][row][2] == condition[2]:
                            needRemove.add(condition[0])
                    available -= needRemove
                elif col == 1 and boards[board][row][0]==0 and boards[board][row][2]:
                    needRemove = set()
                    for val in available:
                        if 0 < val - (boards[board][row][2]-val) < 10:
                            # print(f"Removing {val} due to rule 3")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][row][2] == condition[2]:
                            needRemove.add(condition[1])
                    available -= needRemove
                elif col == 1 and boards[board][row][2]==0 and boards[board][row][0]:
                    needRemove = set()
                    for val in available:
                        if 0 < val - (boards[board][row][0]-val) < 10:
                            # print(f"Removing {val} due to rule 4")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][row][0] == condition[0]:
                            needRemove.add(condition[1])
                    available -= needRemove
                elif col == 2 and boards[board][row][0]==0 and boards[board][row][1]:
                    needRemove = set()
                    for val in available:
                        if 0 < boards[board][row][1] - (val-boards[board][row][1]) < 
10:
                            # print(f"Removing {val} due to rule 5")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][row][1] == condition[1]:
                            needRemove.add(condition[2])
                    available -= needRemove
                elif col == 2 and boards[board][row][1]==0 and boards[board][row][0]:
                    needRemove = set()
                    for val in available:
                        if (val-boards[board][row][0])%2==0:
                            # print(f"Removing {val} due to rule 6")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][row][0] == condition[0]:
                            needRemove.add(condition[2])
                    available -= needRemove
                if   row == 0 and boards[board][2][col]==0 and boards[board][1][col]: