# References

1. **For Actor Computation**  
   *Journal of Functional Programming*, 7(1):1–72, 1997.

2. **C. Artho, W. Leungwattanakit, M. Hagiya, Y. Tanabe**  
   *Efficient Model Checking of Networked Applications*  
   *Objects, Models, Components and Patterns*, pp. 22–40, 2008.

3. **H. Attiya, A. Bar-Noy, D. Dolev**  
   *Sharing Memory Robustly in Message-Passing Systems*  
   *J. ACM*, 42(1):124–142, 1995.

4. **H. Attiya, J. Welch**  
   *Distributed Computing*  
   Wiley, 2004.

5. **R. Bhattacharya, S. German, G. Gopalakrishnan**  
   *Exploiting Symmetry and Transactions for Partial Order Reduction of Rule-Based Specifications*  
   *SPIN*, pp. 252-270, 2006.

6. **K. P. Birman**  
   *Reliable Distributed Systems: Technologies, Web Services, and Applications*  
   Springer, 2005.

7. **P. Bokor, M. Serafini, N. Suri, H. Veith**  
   *Role-Based Symmetry Reduction of Fault-Tolerant Distributed Protocols with Language Support*  
   *ICFEM*, pp. 147–166, 2009.

8. **P. Bokor, M. Serafini, N. Suri**  
   *On Efficient Models for Model Checking Message-Passing Distributed Protocols*  
   *FORTE*, pp. 216–223, 2010.

9. **P. Bokor, J. Kinder, M. Serafini, N. Suri**  
   *Local Partial-Order Reduction*  
   Tech. Report, TR-TUD-DEEDS-11-01-2010, 2010.

10. **M. Burrows**  
    *The Chubby Lock Service for Loosely-Coupled Distributed Systems*  
    *OSDI*, pp. 335-350, 2006.

11. **S. Lauterburg, R.K. Karmani, D. Marinov, G. Agha**  
    *Evaluating Ordering Heuristics for Dynamic Partial-Order Reduction Techniques*  
    *FASE*, pp. 308–322, 2010.

12. **M. Odersky, L. Spoon, B. Venners**  
    *Programming in Scala*  
    Artima, 2008.

13. **M. K. Reiter**  
    *Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart*  
    *CCS*, pp. 68–80, 1994.

14. **K. Sen, G. Agha**  
    *Automated Systematic Testing of Open Distributed Programs*  
    *FASE*, pp. 339–356, 2006.

15. **M. Serafini et al.**  
    *Application-Level Diagnostic and Membership Protocols for Generic Time-Triggered Systems*  
    *IEEE Trans. on Dep. and Sec. Comp.*, 2011 (To appear).

16. **M. Chaouch-Saad, V. Charron-Bost, S. Merz**  
    *A Reduction Theorem for the Verification of Round-Based Distributed Algorithms*  
    *Proc. Reachability Problems*, pp. 93–106, 2009.

17. **W. Steiner, J. Rushby, M. Sorea, H. Pfeifer**  
    *Model Checking a Fault-Tolerant Startup Algorithm: From Design Exploration to Exhaustive Fault Simulation*  
    *DSN*, pp. 189–198, 2004.

18. **E. Clarke, O. Grumberg, D. Peled**  
    *Model Checking*  
    MIT Press, 2000.

19. **T. Tsuchiya, A. Schiper**  
    *Using Bounded Model Checking to Verify Consensus Algorithms*  
    *DISC*, pp. 466–480, 2008.

20. **C. Flanagan, P. Godefroid**  
    *Dynamic Partial-Order Reduction for Model Checking Software*  
    *POPL*, pp. 110–121, 2005.

21. **A. Valmari**  
    *The State Explosion Problem*  
    *Petri Nets I: Basic Models*, pp. 429-528, 1998.

22. **S. Frolund, G. Agha**  
    *Abstracting Interactions Based on Message Sets*  
    *Object-based Models and Languages for Concurrent Systems*, pp. 107–124, 1995.

23. **P. Godefroid**  
    *Partial-Order Methods for the Verification of Concurrent Systems: An Approach to the State-Explosion Problem*  
    Springer, 1996.

24. **G. Gueta, C. Flanagan, E. Yahav, M. Sagiv**  
    *Cartesian Partial-Order Reduction*  
    *SPIN*, pp. 95–112, 2007.

25. **P. Verissimo, L. Rodrigues**  
    *Distributed Systems for System Architects*  
    Kluwer, 2001.

26. **M. Yabandeh, N. Knezevic, D. Kostic, V. Kuncak**  
    *CrystalBall: Predicting and Preventing Inconsistencies in Deployed Distributed Systems*  
    *NSDI*, pp. 229–244, 2009.

27. **Y. Yang, X. Chen, G. Gopalakrishnan, R. Kirby**  
    *Efficient Stateful Dynamic Partial Order Reduction*  
    *SPIN*, pp. 288–305, 2008.

28. **G. J. Holzmann**  
    *The SPIN Model Checker: Primer and Reference Manual*  
    Addison-Wesley, 2004.

29. **V. Kahlon, C. Wang, A. Gupta**  
    *Monotonic Partial Order Reduction: An Optimal Symbolic Partial Order Reduction Technique*  
    *CAV*, pp. 398–413, 2009.

30. **R. K. Karmani, A. Shali, G. Agha**  
    *Actor Frameworks for the JVM Platform: A Comparative Analysis*  
    *Int. Conf. Principles and Practice of Programming in Java*, pp. 11–20, 2009.

31. **L. Lamport**  
    *The Part-Time Parliament*  
    *ACM Trans. Comp. Sys.*, 16(2):133–169, 1998.

32. **L. Lamport**  
    *Paxos Made Simple*  
    *ACM SIGACT News*, 32(4):18–25, 2001.

33. **L. Lamport, R. Shostak, M. Pease**  
    *The Byzantine Generals Problem*  
    *ACM Trans. Prog. Lang. and Sys.*, 4(3): 382–401, 1982.

## Appendix

### MP-BASSET – User Guide

#### Basic Model Structure
MP-Basset models are written in Java syntax and consist of the following components (similar to Basset's actor programs):

- **Process (or Actor) Classes**: These are "types" of processes. For example, Paxos defines three classes of processes: proposers, acceptors, and learners. Each process class must extend the `Actor` class and define a constructor for instantiation. Process classes can also define variables and transitions. Variables encode the local state of the process, while transitions specify changes to the local state.
- **Driver**: A configuration file that describes the number and classes of processes in the system under test. Each process is created as an instance of its class and launched by the driver. If a transition `t` requires no message to be executed, the driver sends "fake" messages called `t` to the process executing `t`. For example, proposers in Paxos can be triggered from within the driver.
- **Specification**: Expresses the desired properties of the system. In the current version of MP-Basset, the specification is a set of Java assertions defined within transitions, restricting to invariants or global predicates. If an assertion evaluates to false, the search is terminated, and a counterexample is provided (if the `+fw.ce=1` flag is set).

Models are stored under `/jpf-actor/src/examples`. An example model of the Paxos protocol can be found in the package `paxos.actor` (files: `DriverMP.java`, `ProposerMP.java`, `AcceptorMP.java`, and `LearnerMP.java`).

#### Defining Transitions
The syntax of transitions is explained in Table III. In MP-Basset, every transition `t` is annotated with `@message` and named after the type of messages it can consume. Formally, the type of the message corresponds to a subset of all messages, and a transition can only process messages from the corresponding subset. A message consists of its type (or name) and a tuple of values, which are passed as parameters to the transition consuming the message. For example, `"READ(proposer1, 2)"` in Paxos is a message of type `READ` carrying the parameters `proposer1` (the name of the sender) and `2` (proposal number). A transition might change the local state of the process and send messages to other processes. Sending a message follows the syntax `send(recipient, msgType, p1, ..., pN)` with the recipient, message type, and parameters of the message.

A special class of transitions is quorum transitions, which can consume more than one message. A quorum transition `msgType` has an additional parameter of the Java type `Object[]` that is an array of messages, each of type `msgType`. The order of elements in this array is arbitrary, in accordance with MP semantics. Given a quorum transition of the form `msgType(p1, ..., pN, Object[] messages)`, the parameters `p1, ..., pN` define the format of the message so that a message can be cast from its `Object` type in the array. By convention, `p1, ..., pN` must not be read or written by a quorum transition!

Every transition `msgType` can be associated with a guard (similar to disabling "local synchronization guards" in ActorFoundry). Guards are annotated with `@Guard` and are Java functions with a boolean return value. A guard must not change the local state of the process nor send any message. If no guard is defined, any set containing messages of type `msgType` and sent to this process is accessible for transition `msgType` (as per MP semantics).

#### SPOR Support
Transitions can be annotated with `@LPORAnnotation` to ease SPOR and enable our transition refinement strategies (Table IV). The methods of this annotation are summarized in Table IV. The last three methods relate to quorum and reply-split, respectively. In particular, the user can tune the initial transition heuristic of POR. A possible heuristic is the "opposite transaction heuristic" where the greater priority, the more likely that `t` does not finish a concurrent operation (e.g., a Paxos instance or a multicast). In the current version of MP-Basset, the correctness of `@LPORAnnotation` must be verified by the user!

We now review the most important property preservation features of the SPOR algorithm in MP-Basset:

- **Deadlock Preservation**: All deadlock states are preserved, i.e., the reduced state graph contains a deadlock state `s` if and only if `s` is in the unreduced state graph.
- **Global Reachability Preservation**: If the unreduced state graph contains no cycles, no infinite paths, and all visible transitions with respect to a "state-predicate" `P` [12] are annotated (with `isVisible=true`), then global reachability is preserved. Specifically, there is a state `s ∈ S` in the reduced state graph such that `¬P(s)` if and only if there is `s' ∈ S` in the unreduced state graph such that `¬P(s')`.

#### Transition Refinement: Reply-Split
Reply-split can be implemented using `isReplyTransition()` (see Table IV). The current implementation only supports reply-split of single-message transitions. If a transition `t` consuming messages of type `msgType` is flagged by this annotation, we assume:
- The transition is called `msgType_senderID` where `senderID` is the ID of the (only) process that "communicates" with this transition.
- The process `senderID` sending messages of type `msgType` to the process executing `t` renames these messages to `msgType_senderID` before sending them.
- The `messageIn()` annotation of a reply transition does not have to be changed, i.e., it assumes `msgType`.

#### Transition Refinement: Quorum-Split
A quorum-split transition is a special quorum transition where the set of processes (quorum peers) from which the transition consumes a message is fixed. A quorum transition `msgType` can be "split" into a set of quorum transitions by specifying the quorum peers as an array of process IDs in `quorumPeers()`. Since Java does not allow identical method names with the same signature, quorum-split transition names must have a prefix `msgType__` (double underscore).

Examples of both transition refinement techniques can be found in `paxos.actor` in classes `QSplit*.java`.

#### Running MP-Basset
MP-Basset is built upon Basset and can be run similarly using the additional flag `+fw.mp=1`.

### Tables

#### Table III: Syntax of MP-BASSET Transitions
| Name                    | Syntax                                                      | Description                                                                 |
|-------------------------|-------------------------------------------------------------|-----------------------------------------------------------------------------|
| Single-message transition | `@message msgType(Type1 p1, ..., TypeN pN)`                | `msgType`: type of incoming message, `pi`: ith parameter of the message     |
| Quorum transition       | `@message msgType(Type1 p1, ..., TypeN pN, Object[] msgSet)` | `msgType`: type of incoming message, `pi`: ith parameter of `msgType`, `msgSet`: incoming messages, each of type `msgType` |
| Guard                   | `@Guard _msgType(Type1 p1, ..., TypeN pN, Object[] msgSet)` | Guard of `msgType`, returns boolean, `msgSet`: only for quorum transitions |

#### Table IV: Summary of Annotations of Transition `t`
| Name                  | Default Return Value | Description                                                                                         |
|-----------------------|----------------------|-----------------------------------------------------------------------------------------------------|
| `messageIn()`         | `""`                 | The only type of message `t` can receive.                                                           |
| `messageOut()`        | `""`                 | The only type of message `t` can send.                                                              |
| `isReceiver()`        | `true`               | `t` might process incoming messages.                                                                |
| `recipients()`        | `Actor.class`        | The class of processes that might send a message to this transition.                                |
| `isSender()`          | `true`               | `t` might send messages.                                                                            |
| `senders()`           | `Actor.class`        | The class of processes whom this transition might send a message.                                   |
| `isStateSensitive()`  | `false`              | `t`’s guard reads the local state.                                                                   |
| `isWrite()`           | `false`              | `t` writes the local state.                                                                          |
| `priority()`          | `0`                  | POR initial transition heuristic.                                                                   |
| `isQuorumTransition()`| `false`              | `t` is quorum transition.                                                                           |
| `quorumPeers()`       | `{}`                 | (quorum-split) `t` receives messages only from the listed processes.                                |
| `isReplyTransition()` | `false`              | (reply-split) `t` is a reply transition.                                                             |
| `quorumSize()`        | `0`                  | Size of the quorum if `t` is an exact quorum transition.                                             |
| `isVisible()`         | `false`              | True if `t` is a visible transition.                                                                 |

This revised text provides a clearer and more organized structure, making it easier to understand the content and references.