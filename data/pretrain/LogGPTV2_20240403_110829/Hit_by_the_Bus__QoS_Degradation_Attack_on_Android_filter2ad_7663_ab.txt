side-channel attacks have been exploited to detect ARM
Trust-Zone code usage in the L1 cache [13], again not on
a mobile platform. Finally in 2016, Lipp et al. [21] managed
to run micro-architectural attacks such as Prime+Probe and
Flush&Reload on various Android/ARM platforms, prov-
ing the practicality of these attacks on mobile devices. In
the attack, authors exploited timing diﬀerences of accesses
from cache and memory to recover sensitive information like
keystrokes using a non-suspicious app. Also in 2016, Veen
et al. [27] showed that the Rowhammer attack can be per-
formed in Android platforms, without relying on software
bugs or user permissions.
Other than cache attacks, there are also other OS based
side-channel attacks targeting mobile platforms. These at-
tacks take advantage of hardware related information pro-
vided by the OS to extract information. For instance, one
can access Linux public directories to monitor the data con-
sumption of each process to build a ﬁngerprinting attack [32].
The network traﬃc is not the only feature that can be ex-
ploited; e.g. per process memory statistics are given by the
OS can also be utilized to monitor what a victim application
is doing [20] or even recover user’s pictures [14].
As for countermeasures, very little work exists to elim-
inate side-channel attacks implemented in mobile devices.
However, there are studies showing that detecting a ma-
licious applications is possible. For instance, [11] utilizes
static analysis to identify code that executes GUI attacks,
whereas [15] focuses on preventing memory-related attacks
(including memory bus side channel attacks) by using ARM-
speciﬁc features.
4. THE QOS ATTACK
In order to perform the QoS attack on Android, we need
to overcome two separate problems: 1) Detecting when the
victim app is in active use i.e. in the foreground. 2) Perform-
ing an Exotic Atomic Operation and triggering a memory
bus lock.
The ﬁrst part of the attack is crucial to ensure that the
user does not suspect the attacker app as the culprit behind
the slowdown but rather blames it on the victim app. If the
attacker was to trigger memory bus locking continuously,
even from the background, it would appear as the system
altogether has a performance problem. Or even worse, the
user could trace the slowdown back to the attacker app and
uninstall it, rather than the victim app and defeat the pur-
pose of the attack. Therefore, the ﬁrst problem the attacker
has to overcome is detecting the victim app launch.
The second part of the attack is degrading the victim app’s
performance whenever it is active. The attacker can achieve
this by performing Exotic Atomic Operations that trigger
memory bus locking, resulting in signiﬁcant performance
overhead to the system. By triggering the lock while the
victim app is running, the attacker can ﬂush the ongoing
memory operations in the CPU, disrupting the victim app’s
operation for over 10K cycles. By continuously doing this
while the victim app is in the foreground, the attacker can
lead the user to think that the victim app has suboptimal
performance and consequently uninstall it.
Attack Scenario: Our attack consists of the following
steps:
1. Launch the attacker app, create a Sticky background
service meaning that the service will stay active even
if the attacker app is closed or even shutdown by the
user.
2. Run cache proﬁling tool to obtain spanning addresses
to perform Exotic Atomic Operations.
3. Check for victim app launch from the background ser-
vice. Wait until user puts the victim app in the fore-
ground.
4. When the victim launch is detected, start the Exotic
Atomic Operation loop, degrading the QoS of the tar-
geted app.
5. Keep the loop running until the target app is no longer
in the foreground. Stop the QoS degradation attack
and release the system bottleneck as soon as the user
quits the victim app.
6. Repeat until the user removes the victim app.
In the following, we describe the details of our attack as
well as the design and implementation of our attacker app.
4.1 Detecting Victim Launch
pre-Android 5.0 (API Level 21)
In order to know when the targeted app is running, we use
logical channels that are available to apps in Android OS.
However, as Android OS evolved, some of these channels
have been closed by the deprecated APIs.
In the follow-
ing, we show how to deduce the foreground app in diﬀerent
versions of Android OS, through various channels.
4.1.1
In Android 5.0 (API 21), it is possible to get the list of
running apps on the device as well as the foreground app.
By using the runningAppProcess method from the Activi-
tyManager class, an app can get the list as well as a binary
value LRU that holds whether or not the app is the least re-
cently used app. By continuously monitoring the LRU value
of a process, an attacker detects when the victim app is in
the foreground.
4.1.2 Android 5.0+ (API Level 21+)
With Android 5.0 and forward, Android OS limited the
access to other apps due to privacy and malware concerns.
After the deprecation of the APIs to retrieve running apps,
the background apps are now hidden to user level apps. Evi-
dently, Play Store still has many applications like Task Man-
agers, Memory Optimizers etc. that can detect apps running
in the system. The question is, if the running apps are hid-
den, how do these Task Managers still retrieve the list of
running. The answer lies in logical channel leakages. Here
we discuss various methods that can be used to retrieve run-
ning apps and subsequently the foreground app.
Package Usage Stats Permission: With UsageStats class
added in Android 5.0, apps can obtain various information
such as the Last Time Used (LTU), package name and total
time spent in the foreground about all the apps running on
the device. Although there is no information provided about
whether or not an app is in the foreground, it is still possible
to infer this information using other data as follows. Using
the getLastTimeUsed function, it is possible to check when
an app, the victim in this case, was put in the foreground by
the user. Note that this value is updated as soon as the user
puts the app in the foreground. However, during the use of
the app in the foreground, the LTU value remains constant.
The value is again updated when the user changes activities
and puts the victim app to the background. Using this in-
formation, one can monitor LTU value of an app as shown
in Algorithm 1 and deduce the foreground activity of the
victim app.
Timing the killBackgroundProcesses Function: After
Android 5.0 (API Level 21), some of the Task Managers in
the Play Store changed the way they worked to keep their
functionality.
Instead of getting the list of running apps,
they now retrieve the list of all installed apps using the
system provided getInstalledApplication function. Then
Algorithm 1: Victim app detection algorithm
functiin the foreground Check();
while SwitchON// The start service switch do
if inUse && !inUse old then
isActive = TRUE; // Victim app put in the
foreground
end
if isActive then
lock(); // Bus locking function
inUse old = inUse;
inUse = Check Usage();
if inUse && !inUse old then
isActive = FALSE; // Victim app put oﬀ
foreground
end
end
end
using the killBackgroundProcesses, go over the whole list
and try to kill all listed apps using app package names. Note
that this function requires the KILL_BACKGROUND_PROCESSES
permission and kills only the apps that were running.
In our attack scenario, we can improve this method to de-
tect whether the victim app is in the foreground. For the
apps in the list that were not running, the function simply
moves the next item. An attacker can periodically call this
function, time each call, and kill the victim app. If the call
of the function is above a certain threshold, the attacker
can then deduce that the victim app was indeed running.
Furthermore, if the victim app is in the foreground, the
function cannot kill it at all. By detecting such unsuccess-
ful kill requests, the attacker can deduce when the victim
is in the foreground. Moreover, this method requires only
the KILL_BACKGROUND_PROCESSES function that is a Normal
Permission and does not require explicit user consent.
Monitoring Hardware Resources: Hardware resources
in Android devices are shared hence accessible to all apps
(given the permission). However, even with legitimate access
rights, two apps cannot use certain resources simultaneously.
For instance, the camera can only be accessed by a single
app at any given time. So, when two apps try to access the
camera API at the same time, only the ﬁrst one is served
while the second one receives a busy respond. This shared
resource allows an attacker to monitor access to a hardware
API and detect when a competitor app is in use.
Getting the List of Running Services: After Android
5.0, the list of running apps became hidden while the list of
running services did not. Using this information, it is possi-
ble to check whether an installed application has any active
service indicating a recent use. While a low-grain estima-
tion, this information can still be used to detect whether an
app has run recently. This method is especially useful in
cases where victim app services launch after the app comes
to foreground.
Reading the System Logs: In Android, many events in-
cluding warnings, errors, crashes, and system-wide broad-
casts are written to the system log. The operating system
along with apps write to this log. Using this information,
an attacker determines which apps have written to the log
recently and monitor the victim app usage. Note that, since
Android 4.1 (API level 16), system logs are accessible by
only system/signature level apps meaning that third party
apps cannot read system logs.
Niceness of Apps: Another way of detecting foreground
app, is using getRunningAppProcess and to check niceness
of apps. When the app is in the foreground, niceness value
decreases to give the user a smoother experience. Therefore
by constantly monitoring the niceness value of an app, one
can defer foreground activity of a target app.
4.2 Cache Line Proﬁling Stage
Our attack is CPU-agnostic and employs memory bus
locking regardless of the total cache size, cache line size or
the number of cache sets. We achieve this by detecting un-
cacheable memory blocks with a quick, preliminary cache
proﬁling stage. The proﬁling eliminates the need to know
the CPU speciﬁcations e.g. the cache line size. Moreover,
the Java code in Android apps is compiled to run on the
JVM, resulting in changes to the cache addresses. By em-
ploying this proﬁling stage however, we can ignore address
changes at the runtime.
In order to obtain a data block that spans multiple cache
lines, we ﬁrst allocate a block of page-aligned memory using
AtomicIntegerArray from the java.util.concurrent.atomic
class. Note that the size of this array should be large enough
to contain multiple uncacheable addresses but not so large
that it would trigger an Out-of-Memory (OOM) error and
crash the app. In our experiments we have used array length
of 1024K to satisfy both conditions.
After the allocation, choose the ideal atomic operation to
be used with the memory bus locking. While there are many
atomic operations to choose from, it is most beneﬁcial for the
attacker to chose the operation that takes the longest time
to perform. Since the memory bus lock remains active until
the atomic operation is fully completed, longer operations
result in stronger degradation to the system.
In order to
maximize the performance penalty, we have tested various
operations such as compareAndSet, decrementAndGet, ad-
dAndGet, AndDecrement and getAndIncrement. Our results
showed that the getAndIncrement operation was taking the
longest time (10K-12K nanoseconds) hence was selected to
be used in the attack. After choosing the atomic operation,
we ﬁrst operate continuously on a single address to get a
baseline execution time. After the baseline execution time
is established -without the bus locking- we start perform-
ing on the array as described in Algorithm 2. Starting from
the beginning of the allocated array, we increment the array
index by one in each loop and record the execution time.
When a signiﬁcantly longer execution time is detected, it is
evident that the address is uncacheable or spanning multiple
cache lines, therefore triggering the memory bus lock. After
all the addresses are tested and the spanning ones recorded,
we obtain a list of addresses that satisfy the Exotic Atomic
Operation condition. We later use these addresses to lock
the memory bus in our QoS degradation attack. Note that
it is not necessary to obtain a long list since the attacker can
de-allocate the array and reuse same addresses.
Timing the Operations: To time the performed atomic
operations, we use the system provided nanotime() func-
tion. In theory, this function returns the JVM’s high-resolution
timer in nanoseconds. However in practice, due to numer-
ous delays stemming from both hardware and software, we
have observed varying timer resolutions. With the test de-
vices that are used in experiments, best timer resolutions
Algorithm 2: Cache line detection algorithm
arr = Atomic Integer Array of length array length
Output: List of cache line spanning addresses
for each i smaller than array length do
startTime = System.nanoTime();
value = arr.getAndIncrement(i);
operation time = System.nanoTime() - startTime;
if operation time>Pre calculated average then
exotic address[index++] = i;
end
end
that we have observed were 958, 468, 104 and 104 nanosec-
onds on Galaxy S2, Nexus 5, Nexus 5X and Galaxy S7 Edge
respectively. Considering that the aforementioned devices
have CPUs running in the range of 1.2 to 2.26 GHz and
assuming that the devices were running at highest possible
CPU speeds, we can estimate the timer resolution in CPU
cycles. By multiplying each CPU clock with the minimum
timer resolution in nanoseconds, we get 223, 187, 1057 and
1149 CPU cycles of timer resolution for each device. While
the low-resolution timer would present a problem for cache
attacks, it is suﬃcient to distinguish between regular and
Exotic Atomic Operations. Remember that we are mea-
suring the execution time of atomic operations on diﬀerent
memory addresses to detect uncacheable addresses where
this operation will incur a heavy timing penalty. In average,
the regular atomic operations take around 1686, 1610, 844
and 369 nanoseconds in our test platforms. While Exotic
Atomic Operations take around 3000-20000 nanoseconds as
shown in Figure 1. Since the gap between the two is large
enough, we can distinguish between the two using the nan-
otime() timer.
4.3 Attacker App Design and Implementation
We have designed a simple, lightweight proof-of-concept
app to turn the performance penalty into an attack and
tested it on various platforms and target apps. The app is
designed to work on all devices that have Android 5.0 (API
level 21) or a newer version of Android. According to [4] this
covers 58.4% percent of all Android devices as of November
2016. Since the app a proof-of-concept, it uses the Package
Usage Stats permission. This permission allows the app to
get the list of running apps their last active times. Note
that this permission opens a prompt and requires the user
to explicitly give permission to the app. Our app has a
simple interface that includes two activities. The ﬁrst activ-
ity prompts the user to give the necessary permission after
which the user can open the second activity. As seen in Fig-
ure 2, the app opens with an activity that shows disclaimer.
On this activity screen Figure 4.3, the user has to give the
necessary Package Usage Stats permission to the app or oth-
erwise the app will not enter the app selection activity. To
give the permission, the user only has to click on the ”Give
Ordinary Permissions” button and will automatically be for-
warded to the necessary system settings page. After the
permission is obtained, the user can return to the opening
activity and click on the Go To App Selection Screen. On
the app selection activity, as shown in Figure 2(b), the user
can select any of the apps that were used in the last 24 hours
as the target. After that, the user clicks on the ”Start Slow-
down Service” switch and the selected app name is passed
to the background service. Now, the background service
of the attacker app continuously monitors the list of used
apps. When the selected app is detected to be put in the
foreground, the service starts the attack and degrades the
target’s performance. The QoS attack continues until the
user exits the selected app.
5. EXPERIMENT SETUP AND RESULTS
In this section, we give the details of our experiment setup,
the devices that we have tested our attack on and ﬁnally
present the performance degradations observed by the se-
lected benchmarks apps.
5.1 Experiment Setup
In order to test the level of QoS degradation that our at-
tack can cause, we performed experiments on various smart-
phones. Also, since regular Android apps generally do not
provide performance statistics, we have used benchmarks to
quantify the QoS degradation. In our experiments, we have
collected performance measurements with and without the
attacker app running in the background.
As test platforms, we have used four diﬀerent mobile de-
vices namely Galaxy S2, Nexus 5, Nexus 5X and Galaxy S7
Edge. We have selected these devices to show the viability
of the attack on diﬀerent mobile CPUs. Also to add variety,