𝑛∑
𝑗=1
𝑥𝑗 × 𝑐𝐶𝑀𝑗
(4)
subject to the same constraint as in Eq. (2) (covered set =
𝒜). With the objective function 𝐹2 and the constraint given
above, the optimization problem is still a linear zero-one
integer programming problem. We build a recursion tree of
all possible solutions while computing cover under 𝐹2 in
search of the optimal solution. After the current best solution
is found, the tree is pruned whenever we come across a
solution that is worse than the current best solution. Some
terminology relevant to the branch and bound algorithm are
summarized as follows:
∙ Partial Solution: A partial solution consists of a subset
of the entire solution. Consider the complete solution as
a binary n-vector {𝑥1, 𝑥2,..., 𝑥𝑚−1, 𝑥𝑚,... 𝑥𝑛−1, 𝑥𝑛}.
At any stage, we may have a partial solution of the
form P = {𝑥1, 𝑥2, ..., 𝑥𝑚−1, 𝑥𝑚}= {1,0,..., 0,1}, with
unassigned values for {𝑥𝑚+1,...,𝑥𝑛}.
∙ Upper Bound (𝑍𝑈 ): This is the value of the objective
function for the best feasible solution found so far. If no
solution has yet been found, upper bound is assumed
to be
∙ Lower Bound (𝑍𝐿): For each partial solution, a lower
bound for the value of the objective function of the
solutions within that subset can be computed.
𝑗=1 𝑐𝐶𝑀𝑗 .
∑𝑛
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 2 Algorithm for solution with obj. function 𝐹1
OPTCMACT (ACT mincuts from SHARPE) {
1. Initialize 𝒪𝒫𝒯 (optimal set of countermeasures) = 𝜙,
m = ∣𝒜∣ and n = ∣𝒞ℳ∣.
where, 𝒜 = set of atomic attack events in ACT
2. Initialize the 𝑚 × 𝑛 matrix (T)
for every 𝐴𝑖 ∈ 𝒜
𝒞ℳ = set of all countermeasures
for every 𝐶𝑀𝑗 ∈ 𝒞ℳ
if (atomic attack event 𝐴𝑖 is covered by countermeasure
𝐶𝑀𝑗)
set 𝑡𝑖𝑗= 1
else set 𝑡𝑖𝑗= 0
end if
end for
end for
3. If 𝒜 ∕= 𝒞𝒱𝒮, (partial cover with intent)
(where 𝒞𝒱𝒮=set of atomic attack events to be
covered)
eliminate all rows in T /∈ 𝒞𝒱𝒮
end if
4. Eliminate any row in T with all zeros (partial cover w/o
intent i.e. this atomic attack event cannot be covered)
5. (𝒪𝒫𝒯 ,T) = REDUCE (𝒪𝒫𝒯 ,T) /*matrix reduction*/
6. if (T is a column matrix (𝐶𝑀𝑘))
{𝐶𝑀𝑘} /*greedy solution works*/
𝒪𝒫𝒯 =𝒪𝒫𝒯 ∪
else /*cyclic unate covering problem*/
/*call branch and bound*/
𝒪𝒫𝒯 =𝒪𝒫𝒯 ∪
matrix T is cyclic 𝑎
Z𝑈 =no. of columns in T,𝑐𝒞ℳ={1,1,...,1})𝑏
B&BACT (𝒫=𝜙,T,𝒪𝒫𝒯 1=𝜙,Z𝐿=0,
end if
7. return 𝒪𝒫𝒯
}
∙ Fathoming Tests: A partial solution is said to be fath-
omed if the corresponding subtree in the recursion tree
can be excluded from further consideration. A partial
solution can be fathomed if:
(1) Lower bound of the partial solution exceeds the
current upper bound of the objective function i.e.,
𝑍𝐿 ≥ 𝑍𝑈 .
(2) The subset of solutions under this partial solution
contains no feasible solutions. In terms of the matrix
T and partial solution {𝑥1, 𝑥2, ..., 𝑥𝑚−1, 𝑥𝑚}, the
test is:
𝑚∑
∃𝐴𝑖 ∈ 𝒜,
𝑡𝑖𝑗 × 𝑥𝑗 +
𝑛∑
𝑡𝑖𝑗  1
(6)
Algorithm 3 Recursive Branch and Bound algorithm
B&BACT (𝒫, T, 𝒪𝒫𝒯 , 𝑍𝐿, 𝑍𝑈 , c𝐶𝑀 ) {
1. /*compute lower bound*/
𝑍𝐿=LOWER BOUND(𝒫, 𝑍𝐿, c𝐶𝑀 )
2. /*is current solution bounded ?*/
if (𝑍𝐿 ≥Z𝑈 ) /*start Fathoming Test 1*/
else /*end Fathoming Test 1*/
return (𝒪𝒫𝒯 ,𝑍𝑈 ) /*return current optimal*/
/*are there any feasible solutions in this subtree ?*/
for every 𝐴𝑖 ∈ 𝒜 /*start Fathoming Test 2*/
3.
sum𝑖=sum𝑖+𝑡𝑖𝑗 ∗ 𝑥𝑗
sum𝑖=0
for every 𝑥𝑗 ∈ 𝒫
end for
for every 𝑥𝑗 /∈ 𝒫 & 𝐶𝑀𝑗 ∈ 𝒞ℳ
end for
if (sum𝑖 = 0) /*current solution is bounded*/
return (𝒪𝒫𝒯 ,𝑍𝑈 ) /*return current optimal*/
sum𝑖=sum𝑖+𝑡𝑖𝑗
end if
end for /*end Fathoming Test 2*/
/*is current 𝒫 a feasible solution for this subtree?*/
ﬂag=0 /*start Fathoming Test 3*/
for every 𝐴𝑖 ∈ 𝒜 /*for every row*/
sum𝑖=sum𝑖+𝑡𝑖𝑗 ∗ 𝑥𝑗
sum𝑖=0
for every 𝑥𝑗 ∈ 𝒫
end for
if (sum𝑖 = 0)
ﬂag=1
{𝑥𝑘+1,𝑥𝑘+2,....,𝑥𝑛} /*set new optimal*/
∪
else /*Fathoming Test 3 failed*/
end if
end for
if (ﬂag = 0) /*found new optimal*/
k=∣𝒫∣
set all 𝑥𝑘+1 to 𝑥𝑛 to 0
𝒪𝒫𝒯 =P
𝑍𝑈 = 𝑍𝐿 /*set new upper bound = current 𝑍𝐿*/
return (𝒪𝒫𝒯 ,𝑍𝑈 ) /*return new optimal*/
(𝒪𝒫𝒯 ,𝑍𝑈 )= B&BACT(𝒫∪
𝑥𝑘=1 /*Branch*/
if (𝒪𝒫𝒯 = P
else /*search the right subtree*/
return (𝒪𝒫𝒯 ,𝑍𝑈 ) /*return current optimal*/
(𝒪𝒫𝒯 ,𝑍𝑈 )= B&BACT (𝒫 ∪
𝑥𝑘=0
𝑍𝑈 ,𝑐𝐶𝑀 )
return (𝒪𝒫𝒯 ,𝑍𝑈 ) /*return optimal*/
𝑥𝑘) /*skip the right subtree*/
∪
𝑥𝑘,T,OPT,𝑍𝐿,𝑍𝑈 ,𝑐𝐶𝑀 )
𝑥𝑘, T, 𝒪𝒫𝒯 ,𝑍𝐿,
4.
5.
end if
end if
}
∑
∑𝑛
in the T matrix are removed and placed in the set ℰ𝒮𝒮 and
the sum of the costs of the countermeasures in ℰ𝒮𝒮 is stored
∀𝐶𝑀𝑗∈ℰ𝒮𝒮 𝑐𝐶𝑀𝑗 . The call B&BACT (𝒫=𝜙, T,
in 𝑐ℰ𝒮𝒮 =
𝒪𝒫𝒯 =𝜙, 𝑍𝐿=0, 𝑍𝑈 =
𝑗=1 𝑐𝐶𝑀𝑗 , 𝑐𝐶𝑀 ) to Algorithm 3
returns an optimal countermeasure set (𝒪𝒫𝒯 ). Set union of
𝒪𝒫𝒯 and ℰ𝒮𝒮 gives us the optimal solution corresponding
to the objective function 𝐹2 (where 𝑐𝐶𝑀 ={𝑐𝐶𝑀1,𝑐𝐶𝑀2 ,...,
𝑐𝐶𝑀𝑛}) and the corresponding optimal value of the objective
function 𝐹2 is obtained by adding 𝑐ℰ𝒮𝒮 to 𝑍𝑈 .
The recursive branch and bound algorithm [19] for comput-
ing the optimal countermeasure set using the objective func-
tion 𝐹2 is depicted in Algorithm 3. For objective function 𝐹2,
the T matrix for the ACT is generated. The essential columns
The corresponding procedure for computation of lower
bound is shown in Algorithm 4. We obtain the optimal
countermeasure set as {𝐶𝑀1,𝐶𝑀2} using Algorithm 2
on the ACT for TCP Sequence Number attack (shown
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
in Figure 5) with the objective function 𝐹1. Here one of
the three optimal solutions is selected by the branch and
bound algorithm and the other solutions are bounded under
fathoming test 1 and hence discarded. Using 𝐹2 on the BGP
ACT, an optimal countermeasure set of {𝐶𝑀121,𝐶𝑀2} with
minimum security investment cost = 80$ is returned. The
necessary input parameter values are in Table A.3 and Table
A.4.
Attack success
Attack success
AND
A
AND
D
M
D1
(a)
AND
A
OR
D2
…
Dm
AND
M1
(b)
Attack success
AND
A
AND
Attack event
Detection event
Mitigation Event
OR
….
M2
Mn
D1
AND
M1
(c)
AND
…
AND
D2
M2
Dn
Mn
Algorithm 4 Computing lower bound for obj. function 𝐹2
LOWER BOUND(𝒫, 𝑍𝐿, c𝐶𝑀 ) {
1. k=∣𝒫∣
2. if 𝑥𝑘 = 1
𝑍𝐿=𝑍𝐿 + 𝑐𝐶𝑀𝑘
return 𝑍𝐿 /*return new lower bound*/
return 𝑍𝐿 /*return old lower bound*/
else
end if
}
IV. OPTIMAL COUNTERMEASURE SELECTION WITH
PROBABILITY ASSIGNMENTS
In this section, we discuss the selection of optimal
countermeasure set from ACT with probability assignments.
Probability of success of an attack, detection or mitigation
event can be measured using simulation, emulation (like,
DETER testbed [21]), a testbed (in which real security
attack, detection and mitigation events happen) [22], a
honeypot [23] or IDS log information as in [8]. Incorporating
these probability values into our optimization problem, we
can provide more efﬁcient optimal solutions.
A. Quantitative Analysis using probability values
Quantitative analysis using ACT also includes metrics
such as probability of attack, risk and return on investment.
Probability of Attack. Figure 6(a) shows an ACT with
one atomic attack event, one detection event and one mit-
igation event. Eq. (7) is the corresponding expression for
the probability that attack is successful, i.e., either attack
is undetected or the attack is detected but unmitigated (𝐷
represents a detection event and 𝑀 represents a mitigation
event).
𝑃𝑔𝑜𝑎𝑙 = 𝑝𝐴(1 − 𝑝𝐷 + 𝑝𝐷(1 − 𝑝𝑀 ))
= 𝑝𝐴(1 − 𝑝𝐷 × 𝑝𝑀 ))
(7)
Figure 6.
(a) ACT with one attack, one detection and one mitigation event,
(b) one attack, 𝑚 detection and 𝑛 mitigation events and (c) one attack and
multiple pairs of detection and mitigation events
detected. The corresponding expression for 𝑃𝑔𝑜𝑎𝑙 is:
𝑃𝑔𝑜𝑎𝑙 = 𝑝𝐴
𝑛∏
𝑖=1
(1 − 𝑝𝐷𝑖
× 𝑝𝑀𝑖
))
(9)
Table II enumerates formulae for output probability for
AND, OR gates and k-of-n gates (with identical inputs for
k-of-n gates) in an ACT without repeated events.
Risk Computation. Risk to the system is deﬁned as the
expected value of the impact. Hence Risk𝑠𝑦𝑠 is the product
of the amount of damage an attack scenario can render to
the system (𝐼𝑔𝑜𝑎𝑙) and probability of attack success (𝑃𝑔𝑜𝑎𝑙):
Risk𝑠𝑦𝑠 = 𝑃𝑔𝑜𝑎𝑙 × 𝐼𝑔𝑜𝑎𝑙
(10)
ROI Computation. The basic deﬁnition of 𝑅𝑂𝐼𝐶𝑀𝑗
[4] is the proﬁt obtained by the implementation of 𝐶𝑀𝑗
(thereby signifying the efﬁcacy of that countermeasure).
ROI for countermeasure 𝐶𝑀𝑗 is a function of the impact
of attack, the decrease in the probability of attack at the
− 𝑃goal with 𝐶𝑀𝑗 ) due to 𝐶𝑀𝑗
ACT goal (𝑃goal without 𝐶𝑀𝑗
and the security investment cost for 𝐶𝑀𝑗 (𝑐𝐶𝑀𝑗 ). Adapting
Sonnenreich’s deﬁnition of Return on Security Investment
[4], we have:
proﬁt from CM𝑗 − Cost of implementing CM𝑗
𝐼𝑔𝑜𝑎𝑙 × (𝑃goal without 𝐶𝑀𝑗
Cost of implementing CM𝑗
− 𝑃goal with 𝐶𝑀𝑗
ROI𝐶𝑀𝑗
=
) − 𝑐𝐶𝑀𝑗
ROI𝐶𝑀𝑗
=
𝑐𝐶𝑀𝑗
(11)
Figure 6(b) shows an ACT with one atomic attack event,
𝑚 detection events and 𝑛 mitigation events. The correspond-
ing probability of successful attack is:
𝑃𝑔𝑜𝑎𝑙 = 𝑝𝐴(1 − (1 − 𝑚∏
(1 − 𝑝𝐷𝑖 )) × (1 − 𝑛∏
(1 − 𝑝𝑀𝑖 )))
(8)
𝑖=1
𝑖=1
Figure 6(c) shows an ACT with one atomic attack event
and 𝑛 pairs of detection and mitigation events. The nature
of mitigation triggered depends on the nature of intrusion
FORMULAE FOR PROBABILITY OF ATTACK SUCCESS
Table II
Gate type
AND gate
OR gate
k/n gate
Prob. of attack success
∏𝑛
𝑖=1 𝑝(𝑖)
1 − ∏𝑛
𝑖=1(1 − 𝑝(𝑖))
)
𝑝𝑗 ∗ (1 − 𝑝)𝑛−𝑗
(
∑𝑛
𝑗=𝑘
𝑛
𝑗
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:10 UTC from IEEE Xplore.  Restrictions apply. 
ROI for a set of countermeasures (S) can be deﬁned simi-
larly. ROI𝑆 is as in Eq. (12) where ∣𝑆∣=m.
𝐼𝑔𝑜𝑎𝑙 × (𝑃goal without S − 𝑃goal with S) − ∑𝑛
𝑗=1 𝑥𝑗 × 𝑐𝐶𝑀𝑗
ROI𝑆 =
∑𝑛
𝑗=1 𝑥𝑗 × 𝑐𝐶𝑀𝑗
(12)
Note that, for any 0  -1.
B. Maximize the proﬁt from implementing a set of counter-
measures
Proﬁt from implementing a set of countermeasures (S) is
the value of the numerator of ROI𝑆. The objective function
in this case is to select 𝑥𝑗 ∈ {0, 1}∀𝑗 so as to,
max
∀𝒮∈2𝒞ℳ
𝐹3 = 𝑅𝑂𝐼𝑆 × 𝑛∑
𝑥𝑗 × 𝑐𝐶𝑀𝑗
𝑗=1
= 𝐼𝑔𝑜𝑎𝑙 × (𝑃goal without S − 𝑃goal with S)
− 𝑛∑
𝑥𝑗 × 𝑐𝐶𝑀𝑗
(13)
𝑗=1
where S={CM1,CM2,...,CM𝑚} and the constraint (covered
set = 𝒜) is as in Eq. (2). Since P𝑔𝑜𝑎𝑙 is a non-linear function
of {𝑥1,𝑥2,...,𝑥𝑛}, the optimization problem is a non-linear
binary integer programming problem. We use Watters’ [14]
transformation to convert this non-linear integer program-
ming problem into a linear one. The non-linearity in P𝑔𝑜𝑎𝑙
is owing to the product terms of the form x𝑖1x𝑖2x𝑖3...x𝑖𝑞
(this being the i𝑡ℎ product
term). It can be easily seen
that the value of this product term will be one only when
x𝑖1=x𝑖2=x𝑖3=...=x𝑖𝑞=1. In all other cases, it is zero. Hence
we can replace the product term by a new binary integer
variable x𝑄 (where x𝑄 ∈ {0,1}) such that x𝑄 is one only
when x𝑖1=x𝑖2=x𝑖3=...=x𝑖𝑞=1 else zero. This is taken into
account by adding two additional constraints.
𝑞∑
𝑥𝑖𝑚 − 𝑥𝑄 ≤ 𝑞 − 1
𝑚=1
− 𝑞∑
𝑚=1
𝑥𝑖𝑚 + 𝑞𝑥𝑄 ≤ 0
(14)
In this way every term in P𝑔𝑜𝑎𝑙 that is a product of binary
integer variables is replaced by a new binary integer variable
with addition of new constraints (as shown in Eq. (14)). Thus
we now have a linear binary integer programming problem
which is solvable by the branch and bound Algorithm 3 with
the additional constraints being added to the fathoming tests.
C. Multiple Objective Functions
This is an approach most likely to be taken by a se-
curity decision maker. Utility theory can be used to in-
corporate multiple objective functions in a single objective
function as in the objective function 𝐹4 (Eq. (15)), where
S={CM1,CM2,...,CM𝑚} (constraint being full cover of 𝒜).
In F4, we simultaneously minimize P𝑔𝑜𝑎𝑙 and the security
investment cost with weights attached to each objective
function (the sum of the weights being one) and the objective
is to select 𝑥𝑗 ∈ {0, 1}∀𝑗 so as to minimize
𝐹4 = 𝛼 × 𝑃𝑔𝑜𝑎𝑙 + (1 − 𝛼) × 𝑛∑
𝑥𝑗 × 𝑐𝐶𝑀𝑗
(15)
𝑗=1
α=0.33 to 0.46 