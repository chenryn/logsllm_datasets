## PostgreSQL 并行计算解说 之22 - parallel append     
### 作者                                                                                    
digoal                                                                                    
### 日期                                                                                    
2019-03-17                                                                                    
### 标签                                                                                    
PostgreSQL , cpu 并行 , smp 并行 , 并行计算 , gpu 并行 , 并行过程支持                                           
----                                                                              
## 背景                                              
PostgreSQL 11 优化器已经支持了非常多场合的并行。简单估计，已支持27余种场景的并行计算。                                          
```                                          
parallel seq scan                                          
parallel index scan                                          
parallel index only scan                                          
parallel bitmap scan                                          
parallel filter                                          
parallel hash agg                                      
parallel group agg                                      
parallel cte                                          
parallel subquery                                          
parallel create table                                          
parallel create index                                          
parallel select into                                          
parallel CREATE MATERIALIZED VIEW                                          
parallel 排序 : gather merge                                           
parallel nestloop join                                          
parallel hash join                                          
parallel merge join                                          
parallel 自定义并行聚合                                          
parallel 自定义并行UDF                                          
parallel append                                          
parallel union                                          
parallel fdw table scan                                          
parallel partition join                                          
parallel partition agg                                          
parallel gather                                  
parallel gather merge                          
parallel rc 并行                                          
parallel rr 并行                                          
parallel GPU 并行                                          
parallel unlogged table        
lead parallel    
```                                          
接下来进行一一介绍。                                          
关键知识请先自行了解：                                          
1、优化器自动并行度算法 CBO                                           
[《PostgreSQL 9.6 并行计算 优化器算法浅析》](../201608/20160816_02.md)                                            
[《PostgreSQL 11 并行计算算法，参数，强制并行度设置》](../201812/20181218_01.md)                                            
## parallel append                 
多段并行执行         
例如分区表的操作，当一个QUERY涉及多个分区时，每个分区的执行部分为一个独立段，多个分区可以并行执行，优化器支持结果并行 append。    
数据量：10亿          
场景 | 数据量 | 关闭并行 | 开启并行 | 并行度 | 开启并行性能提升倍数                                        
---|---|---|---|---|---                                                    
parallel append | 10亿 | 70.5 秒 | 3.16 秒 | 24 | 22.3 倍          
```    
postgres=# show max_worker_processes ;    
 max_worker_processes     
----------------------    
 128    
(1 row)    
postgres=# set min_parallel_table_scan_size =0;    
postgres=# set min_parallel_index_scan_size =0;    
postgres=# set parallel_tuple_cost =0;    
postgres=# set parallel_setup_cost =0;    
postgres=# set max_parallel_workers=128;    
postgres=# set max_parallel_workers_per_gather =24;    
postgres=# set enable_parallel_hash =on;    
postgres=# set enable_parallel_append =on;    
postgres=# set enable_partitionwise_aggregate =off;    
postgres=# set work_mem ='128MB';    
```    
### 1、关闭并行，耗时： 70.5 秒。                                        
```       
postgres=# set max_parallel_workers_per_gather =0;    
postgres=# set enable_parallel_append =off;    
postgres=# explain select count(*) from ccc where order_id=1;    
                              QUERY PLAN                                
----------------------------------------------------------------------  
 Aggregate  (cost=17905421.61..17905421.62 rows=1 width=8)  
   ->  Append  (cost=0.00..17905421.55 rows=24 width=0)  
         ->  Seq Scan on ccc0  (cost=0.00..745998.20 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc1  (cost=0.00..727405.10 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc2  (cost=0.00..839291.45 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc3  (cost=0.00..634111.15 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc4  (cost=0.00..764438.90 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc5  (cost=0.00..708800.20 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc6  (cost=0.00..727511.15 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc7  (cost=0.00..783234.00 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc8  (cost=0.00..699378.05 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc9  (cost=0.00..708898.20 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc10  (cost=0.00..783522.20 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc11  (cost=0.00..615479.05 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc12  (cost=0.00..951260.55 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc13  (cost=0.00..783499.00 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc14  (cost=0.00..913779.60 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc15  (cost=0.00..708653.05 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc16  (cost=0.00..736590.70 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc17  (cost=0.00..783320.20 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc18  (cost=0.00..932607.90 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc19  (cost=0.00..615568.50 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc20  (cost=0.00..746233.40 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc21  (cost=0.00..466366.88 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc22  (cost=0.00..783250.55 rows=1 width=0)  
               Filter: (order_id = 1)  
         ->  Seq Scan on ccc23  (cost=0.00..746223.45 rows=1 width=0)  
               Filter: (order_id = 1)  
(50 rows)  
postgres=# select count(*) from ccc where order_id=1;    
 count   
-------  
     1  
(1 row)  
Time: 70514.708 ms (01:10.515)  
```                  
### 2、开启并行，耗时： 3.16 秒。                                 
```       
postgres=# set max_parallel_workers_per_gather =24;    
postgres=# set enable_parallel_append =on;    
postgres=# explain select count(*) from ccc where order_id=1;    
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Aggregate  (cost=5926253.57..5926253.58 rows=1 width=8)  
   ->  Gather  (cost=0.00..5926253.51 rows=24 width=0)  
         Workers Planned: 24  
         ->  Parallel Append  (cost=0.00..5926253.51 rows=24 width=0)  
               ->  Parallel Seq Scan on ccc12  (cost=0.00..314843.31 rows=1 width=0)  
                     Filter: (order_id = 1)  
               ->  Parallel Seq Scan on ccc18  (cost=0.00..308669.75 rows=1 width=0)  
                     Filter: (order_id = 1)  
               ->  Parallel Seq Scan on ccc14  (cost=0.00..302438.07 rows=1 width=0)  
                     Filter: (order_id = 1)  