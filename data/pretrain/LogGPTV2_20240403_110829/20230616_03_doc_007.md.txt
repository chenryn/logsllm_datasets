# PostgreSQL 数据库管理

## 目标
- 了解 PostgreSQL 数据库结构
- 掌握 PostgreSQL 数据库级权限管理
- 学习 PostgreSQL 数据库级环境参数设置
- 熟悉 PostgreSQL 数据库级属性修改

## 数据库集群逻辑结构
在 PostgreSQL 中，每个数据库存储的对象（如表、索引、视图等）是独立且私有的。可以将每个数据库比作一个房间，访问其中的对象需要先登录到指定的数据库。

### 数据库集群
- **数据库集群**：由 PostgreSQL 服务器管理的一组数据库。这里的“集群”并不意味着一组数据库服务器，而是指单个主机上运行的单个 PostgreSQL 服务器管理的一个数据库集合。
- **数据库**：是数据库对象的集合，包括表、索引、序列、视图和函数等。每个数据库在逻辑上彼此分离，所有其他数据库对象都属于各自的数据库。

### 数据库属主
- 创建者拥有创建数据库的权限（`createdb`），但不一定拥有该数据库中其他用户创建的对象的访问权限。
- 数据库创建后，默认允许 `public` 角色连接，即任何人都可以连接。
- 除了超级用户和数据库所有者外，其他人不能在该数据库中创建 schema。
- 默认会创建名为 `public` 的 schema，并赋予 `public` 角色所有权限，允许任何人在该 schema 中创建对象，但对其他用户的表没有任何权限。

## 数据库权限
### 权限类型
- **CREATE**：可以在指定数据库中创建 schema 的权限。
- **CONNECT**：可以连接到指定数据库的权限。
- **TEMPORARY**：可以创建临时表的权限。
- **ALL**：指定数据库的所有权限。

### 语法
```sql
GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
ON DATABASE 数据库名称 [, ...]
TO role_specification [, ...] [ WITH GRANT OPTION ]
```

### 示例
- **授权用户连接数据库**
  ```sql
  GRANT CONNECT ON DATABASE db_name TO user_name;
  ```
- **撤销用户连接数据库的权限**
  ```sql
  REVOKE CONNECT ON DATABASE db_name FROM PUBLIC;
  REVOKE CONNECT ON DATABASE db_name FROM user_name;
  ```
- **查看哪些用户有某个数据库的连接权限**
  ```sql
  SELECT datname, datacl FROM pg_database WHERE datname = 'db_name';
  ```

## 数据库环境设置
### 参数设置级别
PostgreSQL 的参数设置分为实例级、数据库级、用户级和会话级。优先级顺序为：会话级 > 用户级 > 数据库级 > 实例级。

### 配置语法
```sql
ALTER DATABASE 名称 SET 配置参数 { TO | = } { 值 | DEFAULT };
ALTER DATABASE 名称 SET 配置参数 FROM CURRENT;
ALTER DATABASE 名称 RESET 配置参数;
ALTER DATABASE 名称 RESET ALL;
```

### 配置示例
- **设置数据库搜索路径**
  ```sql
  ALTER DATABASE postgres SET search_path TO "$user", public, schema_name;
  ```
- **配置工作内存**
  ```sql
  ALTER DATABASE postgres SET work_mem = '8MB';
  ```
- **配置维护内存**
  ```sql
  ALTER DATABASE postgres SET maintenance_work_mem TO '256MB';
  ```
- **配置时区**
  ```sql
  ALTER DATABASE postgres SET TimeZone TO 'cet';
  ALTER DATABASE postgres SET DateStyle TO 'SQL, DMY'; -- 重新登录生效
  ```
- **配置语句超时时间**
  ```sql
  ALTER DATABASE postgres SET statement_timeout = 1000; -- 执行1秒超时
  ```
- **配置客户端编码**
  ```sql
  ALTER DATABASE postgres SET client_encoding TO 'gbk';
  ```
- **配置日志记录级别**
  ```sql
  ALTER DATABASE postgres SET log_statement = 'none';
  ```
- **配置 WAL 日志写盘级别**
  ```sql
  ALTER DATABASE postgres SET synchronous_commit TO 'local';
  ```
- **禁用某个规划器**
  ```sql
  ALTER DATABASE postgres SET enable_indexonlyscan TO 'off';
  ```
- **配置错误中断连接**
  ```sql
  ALTER DATABASE postgres SET exit_on_error TO 'on';
  ```

### 查看和重置配置
- **查看所有个性化配置**
  ```sql
  \drds
  ```
- **查询数据库的连接数限制**
  ```sql
  SELECT datname, datconnlimit FROM pg_database;
  ```
- **设置某个个性化设置为默认值**
  ```sql
  ALTER DATABASE postgres RESET exit_on_error;
  ```
- **设置所有个性化设置为默认值**
  ```sql
  ALTER DATABASE postgres RESET ALL;
  ```
- **查询数据库配置**
  ```sql
  SELECT datname, rolname, setconfig 
  FROM pg_db_role_setting t1 
  LEFT OUTER JOIN pg_database t2 ON t1.setdatabase = t2.oid 
  LEFT OUTER JOIN pg_authid t3 ON t1.setrole = t3.oid;
  ```

## 数据库属性修改
### 修改范围
- 数据库名字
- 数据库属主
- 表空间

### 语法
```sql
ALTER DATABASE 名称 RENAME TO 新的名称;
ALTER DATABASE 名称 OWNER TO { 新的属主 | CURRENT_USER | SESSION_USER };
ALTER DATABASE 名称 SET TABLESPACE 新的表空间;
```

### 示例
- **修改数据库名字**
  ```sql
  ALTER DATABASE newdb2 RENAME TO newdb3;
  ```
- **修改数据库属主**
  ```sql
  ALTER DATABASE newdb3 OWNER TO u1;
  ```
- **修改表空间**
  ```sql
  ALTER DATABASE newdb3 SET TABLESPACE new_tbl;
  ```

## 总结
- PostgreSQL 数据库结构
- PostgreSQL 数据库级权限管理
- PostgreSQL 数据库级环境参数设置
- PostgreSQL 数据库级属性修改

## 练习
1. 创建一个数据库，并修改这个数据库的 `work_mem` 参数。
2. 将数据库的连接权限和创建 schema 的权限赋予给某个普通用户。
3. 使用这个普通用户在这个数据库中创建 schema，在该 schema 中创建表并写入测试数据。
4. 删除以上创建的数据库。观察可能出现的报错，并解决这些问题。