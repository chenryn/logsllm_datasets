title:Fault Diversity among Off-The-Shelf SQL Database Servers
author:Ilir Gashi and
Peter T. Popov and
Lorenzo Strigini
Fault Diversity among Off-The-Shelf SQL Database Servers 
Ilir Gashi, Peter Popov, Lorenzo Strigini 
Centre for Software Reliability, 
City University,  
Northampton Square 
London, EC1V 0HB 
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract  
Fault tolerance is often the only viable way of obtaining 
the  required  system  dependability  from  systems  built  out 
of  “off-the-shelf”  (OTS)  products.  We  have  studied  a 
sample of bug reports from four off-the-shelf SQL servers 
so as to estimate the possible advantages of software fault 
tolerance  -  in  the  form  of  modular  redundancy  with 
diversity  -  in  complex  off-the-shelf software. We checked 
whether  these  bugs  would  cause  coincident  failures  in 
more than one of the servers. We found that very few bugs 
affected two of the four servers, and none caused failures 
in  more  than  two.  We  also  found  that  only  four  of  these 
bugs  would  cause  identical,  undetectable  failures  in  two 
servers.      Therefore,  a  fault-tolerant  server,  built  with 
diverse off-the-shelf servers, seems to have a good chance 
of  delivering  improvements  in  availability  and  failure 
rates compared with the individual off-the-shelf servers or 
their replicated, non-diverse configurations. 
1. Introduction
When  systems  are  built  out  of  “off-the  shelf”  (OTS) 
products,  fault  tolerance  is  often  the  only  viable  way  of 
obtaining the required system dependability [23, 30, 12]. 
Fault  tolerance  may  take  multiple  forms,  from  simple 
error detection and recovery add-ons (e.g. wrappers [22]) 
to  full-fledged  “diverse  modular  redundancy”  [16]: 
replication  with  diverse  versions  of  the  components.  
Even this latter class of solutions becomes affordable with 
many  OTS  products  and  has  the  advantage  of  a  fairly 
simple  architecture.  The  cost  of  procuring  two  or  even 
more  OTS  products  (some  of  which  may  be  free)  would 
still be far less than that of developing one’s own.  
All  these  design  solutions  are  well  known  from  the 
literature.  The  questions,  for  the  developers  of  a  system 
using OTS components, are about the dependability gains, 
implementation difficulties and extra cost that they would 
bring for that specific system. 
To  study  these  issues  for  a  realistic  category  of  OTS 
products we have chosen SQL database servers. These are 
complex  products,  with  many  faults  in  each  release,  and 
even  features  that  imply  an  accepted  possibility  of  an 
incorrect  behaviour,  albeit rare. An example of the latter 
is  the  known  “write  skew”  [3]  problem  with  some 
optimistic  concurrency  control  architectures  [7].  Further 
dependability  improvement  of  OTS  SQL  servers  seems 
only possible if fault tolerance through design diversity is 
used  [11].  Given  the  many  available  OTS  SQL  servers 
and the standardisation of their functionality (SQL 92 and 
SQL  99),  it  seems  reasonable  to  build  a  fault-tolerant 
SQL server from available OTS servers.  
for 
to  be 
adapted 
“middleware” 
The  effort  of  developing  an  SQL  server  using  design 
diversity  (e.g.  several  of-the-shelf  SQL  servers  and 
suitably 
replication 
management)  would  require  strong  evidence  of 
its 
usefulness:  for  example  empirical  evidence  that  likely 
failures  of  the  SQL  servers,  which  may  lead  to  serious 
consequences,  are  unlikely 
tolerated  without 
diversity.  This  paper  starts  to  investigate  such  empirical 
to  demonstrate  whether  design 
evidence.  We  seek 
diversity  has 
significant 
improvement of dependability of SQL servers, compared 
to  solutions  for  data  replication  that  can  only  tolerate 
crash failures. To this aim we are running experiments to 
determine  the  dependability  gains  achieved  through  fault 
tolerance.  
a  potential 
to  deliver 
A  preliminary  evaluation  step  concerns  fault  diversity 
rather  than  failure  diversity.  By  manual  selection  of  test 
cases,  one  can  check  whether  the  diverse  redundant 
configuration  would  tolerate  the  known  bugs  in  the 
repositories of bugs reported for the various OTS servers. 
We  have  conducted  a  study  on  four  SQL  servers,  both 
commercial  and  open-source.  We  collected  known  bug 
reports  for  these  servers.  For  each  bug,  we  took  the  test 
case that would trigger it and ran it on all four servers (if 
possible),  to  check  for  coincident  failures.  We found the 
number of coincident failures to be very low.      
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:53 UTC from IEEE Xplore.  Restrictions apply. 
We  use  the  following  terminology.  The  known  bugs 
for  the  OTS  servers  are  documented  in  bug  report 
repositories  (i.e.  bug  databases,  mailing  lists  etc).  Each 
bug report contains the description of what the bug is and 
the  bug  script  (SQL  code  that  contains  the  failure 
triggering  conditions)  required  to reproduce  the  failure
(the  erroneous  output  that  the  reporter  of  the  bug 
observed). In our study we collected these bug reports and 
ran the bug scripts in the servers (we will use the phrase 
“running a bug” for the sake of brevity). 
This  paper  is  structured  as  follows:  In  Section  2  we 
describe the background and motivation of the study and 
related work from the literature. In Section 3 we describe 
how  the  study  was  conducted  and  the  terminology  for 
classification  of  faults.  In  Section  4  we  present  the 
quantitative results obtained. In Section 5 we describe the 
bugs  that  caused  coincident  failures.  In  Section  6  we 
discuss the possible reliability gains to be had from using 
diverse  OTS  SQL  servers  and  in  Section  7  we  present 
conclusions and possible further work.  
then 
modifying  queries  on  a  single  server,  which 
propagates the updates to all other servers involved in the 
replication,  a  solution  considered  adequate  by 
the 
standardising bodies [28].  
thus 
the 
risk 
from 
reduce 
incorrect 
These approaches have shortcomings, i.e., they do not 
protect against failures that are not easily detectable (non-
fail-stop),  and  incorrect  updates  would  be  propagated  to 
all  the  replicas.  Using  diverse  SQL  servers  instead  of 
servers  of  the  same  type  would  improve  error  detection 
and 
results. 
Availability  could  also  be  improved  because  servers that 
are  diagnosed  as  correct  can  continue  operation  while 
recovery  is  performed  on  the  faulty  server[s].  Elsewhere 
[21,  9] we  describe 
toward 
implementing  middleware  for  data  replication  with 
diverse  SQL  servers.  There,  we  also  discuss  some 
difficulties  of  data  replication  with  diverse  servers,  such 
as the need to use the subset of SQL that is common to all 
servers  used,  and  to  translate  all  queries  into  the  SQL 
“dialects” of these servers. 
initial 
some 
steps 
2. Background and related work 
2.2. Studies of faults and failures 
2.1. Fault tolerance in databases  
Software  fault  tolerance  has  been  thoroughly  studied 
and  successfully  applied  in  many  sectors,  including 
databases.  For  example,  standard  database  mechanisms 
such 
and 
“checkpointing” can be used to tolerate faults that are due 
to transient conditions. These techniques can be used with 
or without data replication in the databases.  
transaction 
“rollback 
retry” 
and 
as 
There  are  many  solutions  for  data  replication  [4,  33, 
20],  as  a  feature  of  many  commercial  SQL  servers  or as 
middleware  that  can  be  used  with  a  variety  of  SQL 
servers.  Typically,  these  replication  solutions  work  with 
sets of identical servers. Jimenez-Peris et al [13] present a 
relevant discussion of the various ways in which database 
replication  with  OTS  servers  can  be  organised,  namely 
treating  the  servers  as  white,  grey  or  black  boxes.  All 
commercial  offerings  are  of  the  white-box  kind,  where 
code  necessary  for  replication  is  added  inside  the  server 
product. The grey-box approach, as implemented in [14], 
assumes  that  servers  provide  specific  services  to  assist 
with  replication.  The  black-box  approach  uses 
the 
standard interfaces of the servers. Both the grey and black 
box  approaches  are  implemented  via  middleware  on  top 
of  the  existing  servers.  To  the  best  of  our  knowledge,  a 
common  assumption  is  made  in  the  known  replication 
solutions  that  the  SQL  servers  will  fail  in  a  “fail-stop” 
manner [26], with detectable clean crashes, and leaving a 
copy  of  a  correct  state  for  use  in  recovery.  Apart  from 
simplifying 
the 
assumption  of  crash  failures  also  allows  for  some 
performance  optimisation 
the 
the  protocols  for  data  replication, 
as  executing 
such 
The  usefulness  of  diversity  depends  on  the  frequency 
of those failures that cannot be tolerated without it. There 
have been comparatively few related studies.  
Gray studied the TANDEM NonStop system [10] and 
observed that over an (unspecified) measured period only 
one out of 132 faults caused failures deterministically, i.e. 
the  same  failure  was  observed  on  retry.  Gray  calls  these 
“Bohrbugs”.  The  others,  which  he  calls  “Heisenbugs” 
only caused failures under special conditions (e.g. created 
by a combination of the state of the operating system and 
other  software),  difficult 
reproduce  artificially. 
Heisenbugs – so long as their failures are detected – can 
be  tolerated  by  replication  without  diversity,  as  in  the 
Tandem  system.  A  later  study,  [17]  of  field  software 
failures  for  the  Tandem  Guardian90  operating  system 
found that 82 % of the reported field software faults were 
tolerated.  However,  18  %  of  the  faults  did  lead  to  both 
non-diverse  processes  in  a  Tandem  process  failing  and 
therefore leading to a system failure. 
to 
Related  studies  exist  on  determinism  and  fail-stop 
properties  of  database  failures,  but  they,  like  our  study, 
concern faults rather than failure measurements.  A study 
[5]  examined  fault  reports  of  three  applications  (Apache 
Web server, GNOME and MySQL server). Only a small 
fraction  of  the  faults (5-14%) were Heisenbugs triggered 
by  transient  conditions  that  would  be  tolerated  by  a 
simple “rollback and retry” approach. However the reason 
why  there  are  few  Heisenbugs  here,  and  indeed  in  our 
study, might be that people are less likely to report faults 
that  they  cannot  reproduce,  and  this  is  acknowledged  by 
the  authors  in  [5].  In  another  study  [6]  the  same  authors 
found  (via  fault  injection)  that  a  significant  number  of 
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:53 UTC from IEEE Xplore.  Restrictions apply. 
faults  (7%)  violated  the  fail-stop  model  by  writing 
incorrect  data  to  stable  storage.  Even  though  they  report 
that this number falls to 2% when applying the Postgres95 
transaction mechanism, this number still remains high for 
applications with stringent reliability requirements.  
2.3. Diversity with off-the-shelf applications 
improving 
Other researchers have also considered the potential of 
diversity  for 
the  dependability  of  OTS 
software.  Various  architectures  have  been  proposed  that 
use  diversity  for  intrusion  tolerance:  e.g.  HACQIT  [25], 
which  demonstrates  diverse  replication  (with  two  OTS 
web servers - Microsoft’s IIS and Apache web server) to 
detect  failures  (especially  maliciously  caused  ones)  and 
initiate  recovery;  SITAR  [32],  an  intrusion  tolerant 
architecture for distributed services and especially COTS 
servers;  or  the  Cactus  architecture  [12],  intended  to 
enhance  survivability  of  applications  which  support 
diversity among application modules. 
In  another  example,  [2]  uses  diverse  Java  virtual 
machines  for  interoperability  rather  than  for  tolerating 
failures.      
3. Description of the study 
3.1. Bug reports   
Two  commercial  (Oracle  8.0.5  and  Microsoft  SQL 
Server  7  (without  any  service  packs  applied))  and  two 
open-source  (PostgreSQL  Version  7.0.0  and  Interbase 
Version  6.0),  SQL  servers  were  used  in  this  study. 
Interbase,  Oracle  and  MSSQL  were  all  run  on  the 
Windows  2000  Professional  operating  system,  whereas 
PostgreSQL  (which  is  not  available  for  Windows)  was 
run on RedHat Linux 6.0 (Hedwig).  
We  only  used  bugs  that  caused  failure  of  a  server’s 
core engine. We did not consider other bugs such as those 
that  caused  failure  to  a  client  application  tool  or  various 
connectivity  API’s  (JDBC/ODBC  etc.),  because  these 
functions  in  a  future  fault  tolerant  architecture  would  be 
provided by the middleware. 
For  each  of  these  servers  there  is  an  accessible 
repository  of  reports  of  known  bugs.  We  collected: 
Interbase bugs [27] reported in the period between August 
2000  and  August  2001;  PostgreSQL  bugs  [24] reported 
between  May  2000  and  January  2001;  Oracle  bugs  [19] 
reported  between  September  1998  and  December  2002. 
Bug  reports  for  MSSQL  [18]  do  not  specify  dates;  we 
used  all  reports  for  both  MSSQL  7  and  MSSQL  2000, 
available  as  of  August  2003,  that  included  “bug  scripts” 
and  were  core  engine  bugs.  For  Oracle  and  MSSQL  we 
collected  reports  from  longer  periods,  because  for  these 
two  servers  (both  “closed  development”  servers)  some 
reports do not include bug scripts and we could not check 
whether  the  bug  was  present  in  other  servers.  By 
extending  the  collection  period  we  obtained  reasonably 
large  (though  obviously  imperfect)  samples  of  bug 
reports.  Despite  this,  the  sample  that  we  could  use  for 
Oracle contained only 18 bugs, since most reports omitted 
the bug scripts.      
For  each  reported  bug  we  attempted  to  run  the 
corresponding bug script. Full details are available in [8].  
3.2. Reproducibility of failures 
the  servers.  Bugs  affecting  one  of 
All  these  servers  offer  features  that  are  extensions  to 
the  basic  SQL  standard,  and  these  extensions  differ 