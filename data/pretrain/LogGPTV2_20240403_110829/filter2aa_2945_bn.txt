    ...
}
If you implement the interface properties in a class, you can declare the
property implementations as virtual, which enables derived classes to
override the implementations.
Click here to view code image
class ScreenPosition : IScreenPosition
{
    ...
    public virtual int X
    {
        get { ... }
        set { ... }
    }
    public virtual int Y
    {
      get { ... }
      set { ... }
    }
    ...
}
Download from finelybook PI:EMAIL
524
Note This example shows a class. Remember that the virtual keyword is
not valid when creating a struct because structures do not support
inheritance.
You can also choose to implement a property by using the explicit
interface implementation syntax covered in Chapter 13. An explicit
implementation of a property is nonpublic and nonvirtual (and cannot be
overridden).
Click here to view code image
struct ScreenPosition : IScreenPosition
{
    ...
    int IScreenPosition.X
    {
        get { ... }
        set { ... }
    }
    int IScreenPosition.Y
    {
        get { ... }
        set { ... }
    }
    ...
}
Replacing methods with properties
Chapter 13 teaches you how to create a drawing application with which a
user can place circles and squares on a canvas in a window. In the exercises
in that chapter, you factor the common functionality for the Circle and
Square classes into an abstract class called DrawingShape. The
DrawingShape class provides the SetLocation and SetColor methods, which
the application uses to specify the position and color of a shape on the screen.
In the following exercise, you will modify the DrawingShape class to expose
the location and color of a shape as properties.
Use properties
1. Start Visual Studio 2017 if it is not already running.
Download from finelybook PI:EMAIL
525
2. Open the Drawing solution, which is located in the \Microsoft
Press\VCSBS\Chapter 15\Drawing Using Properties folder in your
Documents folder.
3. Display the DrawingShape.cs file in the Code and Text Editor window.
This file contains the same DrawingShape class that is in Chapter 13
except that, following the recommendations described earlier in this
chapter, the size field has been renamed as _size, and the locX and locY
fields have been renamed as _x and _y.
Click here to view code image
abstract class DrawingShape
{
    protected int _size;
    protected int _x = 0, _y = 0;
    ...
}
4. Open the IDraw.cs file for the Drawing project in the Code and Text
Editor window.
This interface specifies the SetLocation method, like this:
Click here to view code image
interface IDraw
{
  void SetLocation(int xCoord, int yCoord);
    ...
}
The purpose of this method is to set the _x and _y fields of the
DrawingShape object to the values passed in. This method can be
replaced with a pair of properties.
5. Delete this method and replace it with the definition of a pair of
properties named X and Y, as shown here in bold:
Click here to view code image
interface IDraw
{
    int X { get; set; }
    int Y { get; set; }
    ...
}
Download from finelybook PI:EMAIL
526
6. In the DrawingShape class, delete the SetLocation method and replace it
with the following implementations of the X and Y properties:
Click here to view code image
public int X
{
    get =>  this._x;
    set => this._x = value;
}
public int Y
{
    get => this._y;
    set => this._y = value;
}
7. Display the DrawingPad.xaml.cs file in the Code and Text Editor
window and locate the drawingCanvas_Tapped method.
This method runs when a user taps the screen or clicks the left mouse
button. It draws a square on the screen at the point where the user taps or
clicks.
8. Locate the statement that calls the SetLocation method to set the position
of the square on the screen. It is located in the if statement block as
highlighted in the following:
Click here to view code image
if (mySquare is IDraw)
{
    IDraw drawSquare = mySquare;
    drawSquare.SetLocation((int)mouseLocation.X,
(int)mouseLocation.Y);
    drawSquare.Draw(drawingCanvas);
}
9. Replace this statement with code that sets the X and Y properties of the
Square object, as shown in bold in the following code:
Click here to view code image
if (mySquare is IDraw)
{
    IDraw drawSquare = mySquare;
    drawSquare.X = (int)mouseLocation.X;
    drawSquare.Y = (int)mouseLocation.Y;
    drawSquare.Draw(drawingCanvas);
Download from finelybook PI:EMAIL
527
}
10. Locate the drawingCanvas_RightTapped method.
This method runs when the user taps and holds a finger on the screen or
clicks the right mouse button. It draws a circle at the location where the
user taps and holds or right-clicks.
11. In this method, replace the statement that calls the SetLocation method
of the Circle object and set the X and Y properties instead, as shown in
bold in the following example:
Click here to view code image
if (myCircle is IDraw)
{
    IDraw drawCircle = myCircle;
    drawCircle.X = (int)mouseLocation.X;
    drawCircle.Y = (int)mouseLocation.Y;
    drawCircle.Draw(drawingCanvas);
}
12. Open the IColor.cs file for the Drawing project in the Code and Text
Editor window. This interface specifies the SetColor method, like this:
Click here to view code image
interface IColor
{
  void SetColor(Color color);
}
13. Delete this method and replace it with the definition of a property named
Color, as presented here:
Click here to view code image
interface IColor
{
  Color Color { set; }
}
This is a write-only property, providing a set accessor but no get
accessor. You define the property this way because the color is not
stored in the DrawingShape class and is specified only as each shape is
drawn; you cannot actually query a shape to find out which color it is.
Download from finelybook PI:EMAIL
528
Note It is common practice for a property to share the same name
as a type (Color in this example).
14. Return to the DrawingShape class in the Code and Text Editor window.
Replace the SetColor method in this class with the Color property
shown here:
Click here to view code image
public Color Color
{
    set
    {
        if (this.shape != null)
        {
            SolidColorBrush brush = new SolidColorBrush(value);
            this.shape.Fill = brush;
        }
    }
}
Note The code for the set accessor is almost the same as the
original SetColor method except that the statement that creates the
SolidColorBrush object is passed the value parameter.
Additionally, this is an example where the method syntax is more
appropriate than using an expression-bodied member.
15. Return to the DrawingPad.xaml.cs file in the Code and Text Editor
window. In the drawingCanvas_ Tapped method, modify the statement
that sets the color of the Square object to match the following code in
bold:
Click here to view code image
Download from finelybook PI:EMAIL
529
if (mySquare is IColor)
{
    IColor colorSquare = mySquare;
    colorSquare.Color = Colors.BlueViolet;
}
16. Similarly, in the drawingCanvas_RightTapped method, modify the
statement that sets the color of the Circle object as shown in bold.
Click here to view code image
if (myCircle is IColor)
{
    IColor colorCircle = myCircle;
    colorCircle.Color = Colors.HotPink;
}
17. On the Debug menu, click Start Debugging to build and run the project.
18. Verify that the application operates in the same manner as before. If you
tap the screen or click the left mouse button on the canvas, the
application should draw a square, and if you tap and hold or click the
right mouse button, the application should draw a circle:
19. Return to the Visual Studio 2017 programming environment and stop
Download from finelybook PI:EMAIL
530
debugging.
Generating automatic properties
As mentioned earlier in this chapter, the principal purpose of properties is to
hide the implementation of fields from the outside world. This is fine if your
properties actually perform some useful work, but if the get and set accessors
simply wrap operations that just read or assign a value to a field, you might
be questioning the value of this approach. However, there are at least two
good reasons why you should define properties rather than expose data as
public fields even in these situations:
Compatibility with applications Fields and properties expose
themselves by using different metadata in assemblies. If you develop a
class and decide to use public fields, any applications that use this class
will reference these items as fields. Although you use the same C#
syntax for reading and writing a field that you use when reading and
writing a property, the compiled code is actually quite differentâ€”the
C# compiler just hides the differences from you. If you later decide that
you really do need to change these fields to properties (maybe the
business requirements have changed, and you need to perform
additional logic when assigning values), existing applications will not
be able to use the updated version of the class without being
recompiled. This is awkward if you have deployed the application on a
large number of devices throughout an organization. There are ways
around this, but it is generally better to avoid getting into this situation
in the first place.
Compatibility with interfaces If you are implementing an interface
and the interface defines an item as a property, you must write a
property that matches the specification in the interface, even if the
property just reads and writes data in a private field. You cannot
implement a property simply by exposing a public field with the same
name.
The designers of the C# language recognized that programmers are busy
people who should not have to waste their time writing more code than they
need to. To this end, the C# compiler can generate the code for properties
Download from finelybook PI:EMAIL
531
automatically, like this:
Click here to view code image
class Circle
{
    public int Radius{ get; set; }
    ...
}
In this example, the Circle class contains a property named Radius. Apart
from the type of this property, you have not specified how this property
worksâ€”the get and set accessors are empty. The C# compiler converts this
definition to a private field and a default implementation that looks similar to
this:
Click here to view code image
class Circle
{
    private int _radius;
    public int Radius{
        get
        {
            return this._radius;
        }
        set
        {
            this._radius = value;
        }
    }
    ...
}
So with very little effort, you can implement a simple property by using
automatically generated code, and if you need to include additional logic
later, you can do so without breaking any existing applications.
Note The syntax for defining an automatic property is almost identical
to the syntax for defining a property in an interface. The exception is
that an automatic property can specify an access modifier such as
private, public, or protected.
Download from finelybook PI:EMAIL
532
You can create a read-only automatic property by omitting the empty set
accessor from your property declaration, like this:
Click here to view code image
class Circle
{
    public DateTime CircleCreatedDate { get; }
    ...
}
This is useful in scenarios where you want to create an immutable
property; a property that is set when the object is constructed and cannot
subsequently be changed. For example, you might want to set the date on
which an object was created or the name of the user who created it, or you
might want to generate a unique identifier value for the object. These are
values that you typically want to set once and then prevent them from being
modified. With this in mind, C# allows you to initialize read-only automatic
properties in one of two ways. You can initialize the property from a
constructor, like this:
Click here to view code image
class Circle
{
    public Circle()
    {
        CircleCreatedDate = DateTime.Now;
    }
    public DateTime CircleCreatedDate { get; }
    ...
}
Alternatively, you can initialize the property as part of the declaration, like
this:
Click here to view code image
class Circle
{
    public DateTime CircleCreatedDate { get; } = DateTime.Now;
    ...
}
Download from finelybook PI:EMAIL
533
Be aware that if you initialize a property in this way and also set its value
in a constructor, the value provided by the constructor will overwrite the
value specified by the property initializer; use one approach or the other, but
not both!
Note You cannot create write-only automatic properties. If you attempt
to create an automatic property without a get accessor, you will see a
compile-time error.
Initializing objects by using properties
In Chapter 7, you learned how to define constructors to initialize an object.
An object can have multiple constructors, and you can define constructors
with varying parameters to initialize different elements in an object. For
example, you could define a class that models a triangle, like this:
Click here to view code image
public class Triangle
{
    private int side1Length;
    private int side2Length;
    private int side3Length;
    // default constructor - default values for all sides
    public Triangle()
    {
        this.side1Length = this.side2Length = this.side3Length = 10;
    }
    // specify length for side1Length, default values for the others
    public Triangle(int length1)
    {
        this.side1Length = length1;
        this.side2Length = this.side3Length = 10;
    }
    // specify length for side1Length and side2Length,
    // default value for side3Length
Download from finelybook PI:EMAIL
534
    public Triangle(int length1, int length2)
    {
        this.side1Length = length1;
        this.side2Length = length2;
        this.side3Length = 10;
    }
    // specify length for all sides
    public Triangle(int length1, int length2, int length3)
    {
        this.side1Length = length1;
        this.side2Length = length2;
        this.side3Length = length3;
    }
}
Depending on how many fields a class contains and the various
combinations you want to enable for initializing the fields, you could end up
writing a lot of constructors. There are also potential problems if many of the
fields have the same type: you might not be able to write a unique constructor
for all combinations of fields. For example, in the preceding Triangle class,
you could not easily add a constructor that initializes only the side1Length
and side3Length fields because it would not have a unique signature; it would
take two int parameters, and the constructor that initializes side1Length and
side2Length already has this signature. One possible solution is to define a
constructor that takes optional parameters and specify values for the
parameters as named arguments when you create a Triangle object. However,
a better and more transparent solution is to initialize the private fields to a set
of default values and expose them as properties, like this:
Click here to view code image
public class Triangle
{
    private int side1Length = 10;
    private int side2Length = 10;
    private int side3Length = 10;
    public int Side1Length
    {
        set => this.side1Length = value;
    }
    public int Side2Length
    {
        set => this.side2Length = value;
    }
Download from finelybook PI:EMAIL
535
    public int Side3Length
    {
        set => this.side3Length = value;
    }
}
When you create an instance of a class, you can initialize it by specifying
the names and values for any public properties that have set accessors. For
example, you can create Triangle objects and initialize any combination of
the three sides, like this:
Click here to view code image
Triangle tri1 = new Triangle { Side3Length = 15 };
Triangle tri2 = new Triangle { Side1Length = 15, Side3Length = 20 };
Triangle tri3 = new Triangle { Side2Length = 12, Side3Length = 17 };
Triangle tri4 = new Triangle { Side1Length = 9, Side2Length = 12,
Side3Length = 15 };
This syntax is known as an object initializer. When you invoke an object
initializer in this way, the C# compiler generates code that calls the default
constructor and then calls the set accessor of each named property to initialize
it with the value specified. You can specify object initializers in combination