title:S3: A DFW-based Scalable Security State Analysis Framework for
Large-Scale Data Center Networks
author:Abdulhakim Sabur and
Ankur Chowdhary and
Dijiang Huang and
Myong H. Kang and
Anya Kim and
Alexander Velazquez
S3: A DFW-based Scalable Security State Analysis Framework for Large-Scale
Data Center Networks
Abdulhakim Sabur, Ankur Chowdhary, and Dijiang Huang
{asabur, achaud16, dijiang}@asu.edu
Arizona State University
Myong Kang, Anya Kim, and Alexander Velazquez
{myong.kang, anya.kim, alexander.velazquez}@nrl.navy.mil
US Naval Research Lab
Abstract
With an average network size approaching 8000 servers, data-
center networks need scalable security-state monitoring so-
lutions. Using Attack Graph (AG) to identify possible attack
paths and network risks is a common approach. However, ex-
isting AG generation approaches suffer from the state-space
explosion issue. The size of AG increases exponentially as the
number of services and vulnerabilities increases. To address
this issue, we propose a network segmentation-based scal-
able security state management framework, called S3, which
applies a divide-and-conquer approach to create multiple
small-scale AGs (i.e., sub-AGs) by partitioning a large net-
work into manageable smaller segments, and then merge them
to establish the entire AG for the whole system. S3 utilizes
SDN-based distributed ﬁrewall (DFW) for managing service
reachability among different network segments. Therefore, it
avoids reconstructing the entire system-level AG due to the
dependencies among vulnerabilities.
Our experimental analysis shows that S3 (i) reduces AG
generation and analysis complexity by reducing AG’s den-
sity compared to existing AG-based solutions; (ii) utilizes
SDN-based DFW to provide a granular security management
framework, by incorporating security policies at the level of
individual hosts and segments. In effect, S3 helps in limiting
targeted slow and low attacks involving lateral movement.
1
Introduction
With the surge in cloud infrastructure and new technology
such as containers and server-less applications, the attack
surface has increased signiﬁcantly. In order to have a better
understanding of the security situation of a system, scalable
and effective attack representation methods (ARMs) are re-
quired. The security administrator can use information de-
rived from ARMs and apply the appropriate countermeasure
on the identiﬁed critical path [6].
Graphical security states management and analysis solu-
tions, e.g., Attack Graphs (AGs), is such a tool to fulﬁll the
purpose of security state analysis. AGs are deﬁned as a data
structure, used to model all possible critical attack paths and
vulnerabilities of a system, which an adversary can exploit in
order to achieve his/her attacking goals. However, generating
and analyzing AG in a security system requires a signiﬁcant
generation and analysis overhead, an issue addressed in this
paper, that has not been effectively addressed by existing so-
lutions. The AG generation and attack path searching when
performing AG-based attack scenario analysis can be an NP-
hard problem as noted by Durkota et. al. [12], which depends
on the density of a given AG. In a large network system, AGs
are often incomprehensible to a user due to its complex in-
terdependence among vulnerabilities. The identiﬁcation of
information regarding vulnerability dependencies becomes
increasingly difﬁcult as the number of services and vulnerabil-
ities are increasing in the network system. Amman et. al. [1]
proposed an AG generation approach with the scalability
of the order O(N6). MulVAL [27] reduces the AG genera-
tion and analysis complexity from O(N6) to O(N2)− O(N3),
where N is the number of network hosts1. Nevertheless, the
generation of AG by using MulVAL still takes an order of
minutes for a few hundreds of hosts.
The second problem S3 framework considers in this work
is lateral movement. This sophisticated attack is conducted
by highly expert individuals or organizations, which allow
for multiple exploits and movement from one system node to
another. AG can be used to identify the critical paths that can
be exploited by an expert attacker. AG-based security analysis
can identify the dependencies between services in a network
and minimize the security issues that will allow an adversary
to compromise critical services by lateral movement along
east-west network using exhaustive trials method [8] over
different attack paths. Moreover, AG has been widely used in
identifying the least expensive countermeasure solution [6].
1MulVAL ignored the scenarios when multiple vulnerabilities exist on
the same host. In current virtualized environments, vulnerabilities can be
interdependent within a given host and thus contribute to the complexity of
AG generation and analysis. In this paper, we consider N is the measurement
of the number of given vulnerabilities.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 473Thus, to identify and detect lateral movement, a well-modeled
security analysis tool is needed. S3 framework focuses on
the scalability of AG, which in return can be used to iden-
tify critical systems and help in the detecting complex attack
scenarios.
In this paper, we propose to leverage SDN-based Dis-
tributed Firewall (DFW) [13] rules to partition the large-scale
network into small network segments in order to efﬁciently
compute an AG in a data-centric network. We utilize the SDN
controller to inspect network events and obtain a global view
of the network and service reachability. SDN controller in-
teracts with distributed ﬁrewall’s Security Policy Database
(SPD) at the application plane to obtain an updated list of secu-
rity policies. The data-plane is based on OpenFlow switches.
SDN controller installs DFW rules on connected switches at
data-plane layer to limit trafﬁc across different logical seg-
ments. We apply micro-segmentation [3,21] in order to divide
the large data center into small segments based on granular
security policies. This helps in restricting the lateral move-
ments along east-west communication paths among network
segments.
In general, S3 framework follows a divide-and-conquer
approach to generates AG for each segment (sub-AG) after
obtaining vulnerability and reachability information from
vulnerability analysis tools. Finally, the result of divide-and-
conquer approach (sub-AGs) are merged based on the |DFW|
rules to obtain the system AG, or we call it the Composite
Attack Graph (CAG). The key contributions of S3 are as
follows:
• Our proposed S3-based micro-segmentation algorithm
is able to generate a scalable AG by utilizing DFW rules.
The algorithm complexity We achieved is O(( N
K )2) +
O(Klog(K)), where N is the total number of vulnerabil-
ities and K is the number of established segments. The
AG generation time achieved using S3 is much faster
compared to state-of-the-art AG generation tools, i.e.,
S3 takes ∼ 20 sec for generating AG for a network with
services over 6000 services, as shown in Section 6, com-
pared to over 1 hour taken by MulVAL [27].
• We propose a granular divide-and-conquer based secu-
rity state management approach for large data center
network micro-segmentation, which utilizes DFW to sig-
niﬁcantly reduce the AG density and number of attack
paths. Consequently, our approach is able to generate a
scalable AG by leveraging SDN capabilities and utilizing
DFW to obtain real-time security state policies.
The rest of the paper is organized as follows, Section 2
provides a literature review of existing AG generation meth-
ods and DFW frameworks, along with their limitations. We
discuss the threat model, S3 architecture and the details about
AG formalism in the Section 3. We discuss the SDN-based S3
system and API architecture in Section 4. The description of
S3-based micro-segmentation approach, graph segmentation
algorithm, optimal number of micro-segments, and a proof of
scalability of micro-segmentation method has been provided
in the Section 5. The evaluation of AG scalability, SDN con-
troller overhead, and experimental details on optimal number
of micro-segments is discussed in Section 6. In Section 7, we
discuss related issues such as cycles in directed graphs, alter-
native segmentation heuristics, and possible security policy
conﬂicts that can be induced by the micro-segmentation. Fi-
nally we conclude the research paper in Section 8, and provide
details on the future work.
2 Related Work
The Scalability of Attack Graphs: Generation of scalable
attack graphs has been a popular area of research. Amman et
al. [1] presented a scalable solution in comparison with prior
modules [32] by assuming monotonicity. This assumption
allowed them to achieve scalability of O(N6) [19]. To miti-
gate the state space explosion problem, most of the existing
solutions try to reduce the dependency among vulnerabilities
by using logical representation [27]. Hong et. al. [18] apply
a hierarchical strategy to reduce the computing and analysis
complexity of constructing and using AGs by grouping and
dividing the connectivity of the system into hierarchical ar-
chitecture. The performance time is, however, ∼ 50s for 50
services, whereas our framework generates scalable attack
graph of similar scale in 2.2s.
Kaynar and Sivrikaya [23] proposed a framework for dis-
tributed AG generation that utilizes a shared memory ap-
proach. The graph generation time is of order 2-3 minutes
for 450 hosts, which cannot be used for real-time security
analysis. Chowdhary et. al. [5], use distributed hypergraph
partitioning for Attack Graph generation. The research work
has however not considered application of DFW for further
optimizing the size of Attack Graph. Cao et. al. [2] proposed
an approach to compute AG in parallel. The division is based
on the privileges inside the hosts. The experimental analysis
in this work shows that the required generation time for ∼ 500
hosts is ∼ 20 sec, while in our work it takes only ∼ 6.5 sec.
Mjihil et. al. [25] used a parallel graph decomposition
approach. The evaluation in this research work tests the effect
of the number of vulnerabilities on the AG generation time,
which is not reliable since it does not explain how the number
of vulnerabilities is related to each service in the system as
we did in this paper. The research work tested a maximum of
50 vulnerabilities in which they obtaind an AG in ∼ 10 sec,
while in our work we obtain an AG in ∼ 2 sec.
Distributed Firewall: Some researchers have addressed
DFW in SDN [20] [30] [28]. Yet, they only consider stateless
ﬁrewall which does not leverage the full advantage of both
SDN and DFW. VMware has proposed a distributed ﬁrewall
for their NSX model, by using a central object that manages
the distributed ﬁrewall’s policies [26]. Unfortunately, this ar-
474          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationFigure 1: Representation of vulnerability information and corresponding attack graph in a multi-tenant data-center network.
Distributed Firewall (DFW) can be implemented at each tenant/segment.
chitecture is only applicable to the NSX model and cannot be
adopted to OpenFlow standards because NSX comprises of
both stateful and stateless components. The ﬁrewall rules of
the host machines are also controlled by the NSX manager,
whereas the OpenFlow protocol based SDN framework im-
plements a stateless ﬁrewall. There are no existing research
works, which attempt to control the security state explosion
in attack representation methods using better security policy
design and management framework. In S3 framework, we
utilize design principles based on VMWare NSX architecture,
and the programming ﬂexibility afforded by the SDN, in order
to limit the connections between different logically separated
regions of a data-center.
3 Background
3.1 Threat Model
In this section, we describe threat model, AG model, and
AG scalability challenge in order to motivate the need for a
scalable attack representation framework and allow the reader
to have a comprehensive understanding of AG scalability
issue.
To explain the attack graph more clearly, we show Figure 1
(a), which illustrates a simple multi-tenant data-center based
on Openstack framework. The network in this example con-
sists of 4 virtual machines (VM1-4), but this general model
can be applied to large scale cloud networks. The OpenStack
management framework can be used by the security adminis-
trator in order to insert DFW policies or monitor the status of
each VM present on tenant nodes.
The attacker is located on the Internet. The attack model
here is vulnerability exploitation to achieve privilege esca-
lation. There are several attack paths the attacker may take
to achieve their goal, which is to ex-ﬁltrate data from the
MySQL server, by obtaining root privileges on VM4, i.e., ex-
ecCode(VM4).
Lateral Movement: The scope of security enforcement
offered by a traditional ﬁrewall is limited to north-south traf-
ﬁc, i.e., ﬁrewall serves as a sentry between trusted and un-
trusted networks. Once the attacker has managed to breach
the security restrictions at the network edge, they can laterally
move inside the network (east-west trafﬁc) and exploiting key
resources virtually unchecked. Centralized ﬁrewalls do not
protect networks from multi-stage attacks using lateral move-
ment. Since everyone on the internal networks is trusted and
the trafﬁc within these trusted networks is not rigorously in-
spected by the traditional ﬁrewall based defense mechanisms.
The volume of east-west trafﬁc in the datacenter environ-
ment is around 76%, as compared to north-south trafﬁc -
17% [7]. As shown in Figure 1 (a), if the attacker can com-
promise Web Service on VM1 in Step (1) of the multi-stage
SDNControllerVM1(Web Server)VM2(FTP Server)vSwitchXSS VulnerabilityRemote CodeExecutionSegment 1API NetworkOpenFlow NetworkVM3(LDAP Server)VM4(MySQL Server)vSwitchLocal PrivilegeEscalationSQL InjectionSegment 2Tenant Node Tenant Node AttackerInternetdfwruledfwruledfwruleAttacker(Internet)execCode(VM4)Exploit(VM1,Web Server)Exploit(VM2,FTP Server)Root(VM1)Root(VM2)Exploit(VM3,LDAP Server)Attacker (User, VM1)Attacker (User, VM2)Attacker (User, VM3)Attacker (User, VM4)Exploit(VM4,MySQL Server)Root(VM3)123(a) Multi-tenant Cloud network with attacker s lateral movement(b) Attack graph with attack goal VM4 (MySQL Server) USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 475attack, they can use this attack as a pivot for compromising
VM3, and VM4 in steps (2) and (3). The lateral movement is
hard to detect and prevent using traditional security architec-
ture since in most cases its intended purpose is to defend the
network system against outsider adversaries.
3.2 Attack Graphs and Scalability Challenge
Data-center networks are scaling up at a fast pace. For ex-
ample, Amazon Web Services (AWS) has on average between
50,000 servers, to 80,000 servers, according to [22]. An ef-
ﬁcient security analysis of such data-center is expected to
be scalable and granular. Hence, there is a need for scalable
security analysis, and AG serves this purpose to module the
critical paths in the system.
In this paper, our research uses the exploit dependency
graph [4], since it directly models dependencies between the
vulnerabilities in a computer networked system. Also, all
services for application-based on networked-based attacks are
related in this graph and it shows what are the pre-requisites
(pre-conditions) and post-conditions for those attacks. Nodes
in such an AG are not the network states, but rather, they are
vulnerabilities. AG can be formally deﬁned as follows:
Deﬁnition 1. (Attack Graph (AG)) An attack graph is repre-
sented as a graph G = {V,E}, where V is the set of nodes and
E is the set of edges of the graph G, where
1. V = NC ∪ ND ∪ NR, where NC denotes the set of con-
junctive or exploit nodes (pre-condition), ND is a set of
disjunctive nodes or result of an exploit (post-condition),
and NR is the set of a starting nodes of an attack graph,
i.e. root nodes.
2. E = Epre ∪ Epost are sets of directed edges, such that
e ∈ Epre ⊆ ND × NC, i.e., NC must be satisﬁed to obtain
ND. An edge e ∈ Epost ⊆ NC × ND means that condition
NC leads to the consequence ND.
An example of vulnerability information, network service
information, and Host Access Control List (HACL) repre-
sented in datalog format is shown below:
vulExists (ipaddr, cve-id, service)
networkServiceInfo(ipaddr, service, prot, port)
hacl(srcip, dstip, prot, port)
Attack graph uses HACL tuples to model network and
ﬁrewall conﬁgurations, in which it uses a general rule to test
and specify reachability information (i.e., any host can access
any host using any port and protocol).
Attack Graph Scalability Challenge: As can be seen in
the Figure 1 (b), a network consisting from 4 hosts resulted
in a graph of 13 nodes. Large data-center networks have thou-
sands of services, servers, and VMs. The expected AG size of
such system is huge due to representing network state using a
conditional or combination of conditional and exploit repre-
sentation of security situation, which will lead to huge number
of nodes and edges in the AG [24, 34]. Therefore, an efﬁcient
and scalable methodology is needed to help the administrator
in representing and analyzing the security situation in the
system.
4 System Model and Architecture