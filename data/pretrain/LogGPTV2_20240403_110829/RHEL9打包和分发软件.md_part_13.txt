:::
:::
::: itemizedlist
**其他资源**
-   [Ruby
    打包指南](https://docs.fedoraproject.org/en-US/packaging-guidelines/Ruby/){.link}
:::
:::
::: section
::: titlepage
### []{#advanced-topics.html#assembly_converting-rubygems-packages-to-rpm-spec-files-with-gem2rpm_assembly_creating-rpm-packages-from-rubygems-packages}使用 gem2rpm 将 RubyGems 软件包转换为 RPM SPEC 文件 {.title}
:::
`gem2rpm`{.literal} 实用程序将 RubyGems 软件包转换为 RPM SPEC 文件。
以下小节描述了如何进行：
::: itemizedlist
-   安装 `gem2rpm`{.literal} 工具
-   显示所有 `gem2rpm`{.literal} 选项
-   使用 `gem2rpm`{.literal} 将 RubyGems 软件包覆盖到 RPM SPEC 文件
-   编辑 `gem2rpm`{.literal} 模板
:::
::: section
::: titlepage
#### []{#advanced-topics.html#proc_installing-gem2rpm_assembly_converting-rubygems-packages-to-rpm-spec-files-with-gem2rpm}安装 gem2rpm {.title}
:::
以下流程描述了如何安装 `gem2rpm`{.literal} 工具。
::: itemizedlist
**步骤**
-   要从 [RubyGems.org](https://rubygems.org/){.link} 安装
    `gem2rpm`{.literal}，请运行：
:::
``` literallayout
$ gem install gem2rpm
```
:::
::: section
::: titlepage
#### []{#advanced-topics.html#proc_displaying-all-options-of-gem2rpm_assembly_converting-rubygems-packages-to-rpm-spec-files-with-gem2rpm}显示 gem2rpm 的所有选项 {.title}
:::
下面的步骤描述了如何显示 `gem2rpm`{.literal} 工具的所有选项。
::: itemizedlist
**步骤**
-   要查看 `gem2rpm`{.literal} 的所有选项，请运行：
    ``` literallayout
    gem2rpm --help
    ```
:::
:::
::: section
::: titlepage
#### []{#advanced-topics.html#proc_using-gem2rpm-to-covert-rubygems-packages-to-rpm-spec-files_assembly_converting-rubygems-packages-to-rpm-spec-files-with-gem2rpm}使用 gem2rpm 将 RubyGems 软件包覆盖到 RPM SPEC 文件 {.title}
:::
以下流程描述了如何使用 `gem2rpm`{.literal} 实用程序将 RubyGems 软件包到
RPM SPEC 文件。
::: itemizedlist
**步骤**
-   在其最新版本中下载 gem，并为这个 gem 生成 RPM SPEC 文件：
    ``` literallayout
    $ gem2rpm --fetch  > .spec
    ```
:::
描述的步骤根据 gem 元数据中提供的信息创建 RPM SPEC 文件。但是 gem
丢失了通常在 RPM 中提供的一些重要信息，如许可证和更改日志。因此，生成的
SPEC 文件需要编辑。
:::
::: section
::: titlepage
#### []{#advanced-topics.html#ref_gem2rpm-templates_assembly_converting-rubygems-packages-to-rpm-spec-files-with-gem2rpm}gem2rpm 模板 {.title}
:::
`gem2rpm`{.literal} 模板是一个标准嵌入式
Ruby(ERB)文件，其中包含下表中列出的变量。
::: table
[]{#advanced-topics.html#idm140428014836176}
**表 4.6. gem2rpm 模板中的变量**
::: table-contents
  变量                       解释
  -------------------------- -----------------------------------------------------------------------------------------------
  package                    gem 的 `Gem::Package`{.literal} 变量。
  spec                       gem 的 `Gem::Specification`{.literal} 变量（与 format.spec 相同）。
  config                     `Gem2Rpm::Configuration`{.literal} 变量，可以重新定义 spec 模板帮助程序中使用的默认宏或规则。
  runtime_dependencies       `Gem2Rpm::RpmDependencyList`{.literal} 变量提供软件包运行时依赖项列表。
  development_dependencies   `Gem2Rpm::RpmDependencyList`{.literal} 变量提供软件包开发依赖项列表。
  测试                       `Gem2Rpm::TestSuite`{.literal} 变量提供允许执行测试框架的列表。
  files                      `Gem2Rpm::RpmFileList`{.literal} 变量提供软件包中未过滤的文件列表。
  main_files                 `Gem2Rpm::RpmFileList`{.literal} 变量提供适合主软件包的文件列表。
  doc_files                  `Gem2Rpm::RpmFileList`{.literal} 变量提供适合 `-doc`{.literal} 子软件包的文件列表。
  格式                       gem 的 `Gem::Format`{.literal} 变量。请注意，此变量现已弃用。
:::
:::
:::
::: section
::: titlepage
#### []{#advanced-topics.html#proc_listing-available-gem2rpm-templates_assembly_converting-rubygems-packages-to-rpm-spec-files-with-gem2rpm}列出可用的 gem2rpm 模板 {.title}
:::
使用以下步骤列出所有可用的 `gem2rpm`{.literal} 模板。
::: itemizedlist
**步骤**
-   要查看所有可用的模板，请运行：
    ``` literallayout
    $ gem2rpm --templates
    ```
:::
:::
::: section
::: titlepage
#### []{#advanced-topics.html#proc_editing-gem2rpm-templates_assembly_converting-rubygems-packages-to-rpm-spec-files-with-gem2rpm}编辑 gem2rpm 模板 {.title}
:::
您可以编辑生成 RPM SPEC 文件而不是编辑生成的 SPEC 文件的模板。
使用以下步骤编辑 `gem2rpm`{.literal} 模板。
::: orderedlist
**步骤**
1.  保存默认模板：
    ``` literallayout
    $ gem2rpm -T > rubygem-.spec.template
    ```
2.  根据需要编辑模板。
3.  使用编辑的模板生成 SPEC 文件：
    ``` literallayout
    $ gem2rpm -t rubygem-.spec.template - -GEM.spec
    ```
:::
现在，您可以使用编辑的模板构建 RPM 软件包，如[构建
RPM](#packaging-software_packaging-and-distributing-software.html#con_building-rpms_packaging-software "构建 RPM"){.link}
所述。
:::
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#how-to-handle-packages-with-perls-scripts_advanced-topics}如何使用 Perls 脚本处理 RPM 软件包 {.title}
:::
从 RHEL 8 开始，默认 buildroot 中不包含 Perl 编程语言。因此，包含 Perl
脚本的 RPM 软件包必须使用 RPM SPEC 文件中的 `BuildRequires:`{.literal}
指令明确指明 Perl 的依赖项。
::: section
::: titlepage
## []{#advanced-topics.html#common-perl-related-dependencies_how-to-handle-packages-with-perls-scripts}与 Perl 相关的常见依赖项 {.title}
:::
`BuildRequires`{.literal} 中使用的与 Perl 相关的构建依赖项是 ：
::: itemizedlist
-   `perl-generators`{.literal}
    为已安装的 Perl 文件自动生成运行时 `Requires`{.literal} 和
    `Provides`{.literal}。安装 Perl 脚本或 Perl
    模块时，必须包含针对这个软件包的构建依赖项。
-   `perl-interpreter`{.literal}
    如果以任何方式（通过 `perl`{.literal} 软件包或 `%__perl`{.literal}
    宏），或作为软件包构建系统的一部分，则必须将 Perl
    解释器列为构建依赖项。
-   `perl-devel`{.literal}
    提供 Perl 的 header 文件。如果构建特定于架构的代码，该代码链接到
    `libperl.so`{.literal} 库，如 XS Perl 模块，则必须包括
    `BuildRequires: perl-devel`{.literal}。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#using-a-specific-perl-module_how-to-handle-packages-with-perls-scripts}使用特定的 Perl 模块 {.title}
:::
如果构建时需要特定的 Perl 模块，请使用以下步骤：
::: itemizedlist
**步骤**
-   在您的 RPM SPEC 文件中应用以下语法：
    ``` literallayout
    BuildRequires: perl(MODULE)
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    另外，将此语法应用到 Perl 核心模块，因为它们可能会随时间推移和移出
    `perl`{.literal} 软件包。
    :::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#limiting-a-package-to-a-specific-perl-version_how-to-handle-packages-with-perls-scripts}将软件包限制为特定的 Perl 版本 {.title}
:::
要将软件包限制为特定的 Perl 版本，请按照以下步骤执行：
::: itemizedlist
**步骤**
-   使用 RPM SPEC 文件中的 `perl(:VERSION)`{.literal}
    依赖项与所需的版本约束：
    例如，要将软件包限制为 Perl 版本 5.30 及更高版本，请使用：
    ``` literallayout
    BuildRequires: perl(:VERSION) >= 5.30
    ```
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
不要使用与 `perl`{.literal} 软件包版本的比较，因为它会包括 epoch 号。
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#ensuring-that-a-package-uses-the-correct-perl-interpreter_how-to-handle-packages-with-perls-scripts}确保软件包使用正确的 Perl 解释器 {.title}
:::
红帽提供了多个 Perl 解释器，它们不完全兼容。因此，任何提供 Perl
模块的软件包都必须在运行时使用在构建时所用的 Perl 解释器。
要确定这一点，请按照以下步骤执行：
::: itemizedlist
**步骤**
-   对于提供 Perl 模块的任何软件包，在 RPM SPEC 文件中包括版本化的
    `MODULE_COMPAT`{.literal} `Requires`{.literal}:
    ``` literallayout
    Requires:  perl(:MODULE_COMPAT_%(eval `perl -V:version`; echo $version))
    ```
:::
[]{#advanced-topics.html#additional-resources-about-rpm-packaging_packaging-and-distributing-software}
::: title
**其他资源**
:::
本节介绍了与 RPM、RPM 打包和 RPM
构建相关的各种主题。其中一些是高级的，并扩展了本文档中包含的简介资料。
[Red Hat Software Collections
Overview](https://developers.redhat.com/products/softwarecollections/overview/){.link} -
Red Hat Software Collections
产品在最新稳定版本中提供持续更新的开发工具。
[Red Hat Software
Collections](https://access.redhat.com/documentation/en-us/red_hat_software_collections/3/html/packaging_guide/){.link} -
打包指南介绍了 Software Collections 以及如何构建和打包它们。具有基本了解
RPM 的软件打包的开发人员和系统管理员可以使用本指南来启动 Software
Collections。
[Mock](https://rpm-packaging-guide.github.io/#mock){.link} - Mock
为各种架构及 Fedora 或 RHEL
版本相比具有构建主机的不同架构提供社区支持的软件包构建解决方案。
[RPM 文档](http://rpm.org/documentation){.link} - 官方 RPM 文档.
[Fedora
打包指南](https://docs.fedoraproject.org/en-US/packaging-guidelines/){.link} -
Fedora 的官方打包指南，适用于所有基于 RPM 的发行版。
:::
:::
:::