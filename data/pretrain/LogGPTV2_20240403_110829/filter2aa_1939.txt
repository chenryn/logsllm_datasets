摸鱼的时候在挖洞，本身想写一个文件内容过滤的小脚本（误报太多了），发现报错，看网
上貌似是编码问题，于是我就百度了下，发现 py 上加两句就可以了 
# -*- coding: utf-8 -*- 
# coding:unicode_escape 
但是当我运行的时候，我突然发现注释报错了 
本来我以为是正常的报错，debug 一下，发现正常代码没任何问题，但我发现行数不对，是
在第 13 行，但是这是被注释掉的内容啊，我深入了一下发现，问题出现在 \n 和
unicode_escape 上，于是我新搞了个文件进行测试 
可以成功解析\n，那么使用命令呢 
我们可以看到注释的内容并不会在 debug 中跟到注释当中，但是会执行注释当中的语句，
这也就是为什么我 debug 不出来的原因 
但是 python 为啥使用 unicode_escape 即可解析注释的内容呢？带着这个问题写一个 demo
进行原理分析，我们可以看到下面两张图第一个是使用的 unicode_escape 编码的文件，而
第二个文件则是默认的 utf-8 
Test2.py 内容： 
# coding:unicode_escape 
# \nprint('1) 
其中我们可以看到 unicode_escape 的文件语句是  \nprint(1)，而默认的则是\\n,也就是说明
unicode_escape 的其实是给\\n 减少了一个\ 
于是尝试 debug，打上断点，我发现第一次出现 unicode_escape 是在 
我们定位到 read_or_stop 
发现只是一个简单的 readline，而注释也说了，最多只会调用两次，所以这也是为什么开发
一般编码都要放在第一行的原因，并且也说明了，如果未指定编码，默认将是 utf-8 
然后继续往下走，省下中间一堆无用过程，我们可以看到此时的 print（1）前面还是\\n 
但是在 513 行，先是判断 encoding 存不存在，如果存在就用 encoding 进行解析本身存在
的 line，此时我们可以看到\\n 被解析成了\n，于是就后面的 print(1)因为换行符的原因，被
调到了下一行，也就正常执行了 
我们本地简单测试下 
可以发现，正常的 a 输出后会减少一个\，但还是会输出\n，但是当使用 decode
（“unicode_escape”）后，我们发现被解析了，因为 print 本身就会空一行，所以 print(‘\n’（被
解析后的\n）)就会空 2 行，这也就成功的逃逸出注释符了 
这证明什么，证明只要能解析掉换行符我们即可执行注释，那么除了 unicode_escape 编码，
还有其他的么，打开 python 的底层源码，发现在 codescs.rst 中记录着各式各样的编码，在
unicode_escape 上方还有一个 raw_unicode_escape 
尝试用 raw_unicode_escape 执行 py 
发现不行，不过没关系，看一下源码中是咋注释的，毕竟带有 unicode_escape，肯定是有关
系的，上面是要以\uxxxx，那么试用一下换行符\u000d，发现也可以成功解析 
不过除了这种，应该还会有，我也就没有继续深挖下去，有兴趣的师傅可以自己看一看
python 的编码，应该是还会有其他的可以解析 
后面我在想，既然 python 能有这种编码操作，那么 php 和 java 会不会有呢？很不幸的是，
花活最多的 php 没找到这种操作（可能是因为我太菜了），但 java 却有了突破，找到了之前
p 牛写的一篇文章《unicode 反噬》用的也是利用注释进行 bypass（果然大佬永远快一步），
如图 
发现与 py 一样，同样可以执行注释里的内容 
但 java 与 py 不同的是，java 本身会用 unicode 解析整个项目，然后再进行执行，所以如图
所示，正常我们是可以执行计算器的 
但是如图所示，当我们在 java 代码中添加了\u000d 后，java 这边会执行报错，因为他解析
了换行符，所有就不会正常执行 
与之对应的是 py，虽然第四行同样报错，但 py 是一句一句执行的，所以可以正常的输出 1，
但 java 先进行了一遍整体 unicode 解析，所以当解析完换行符后，java 就不会开始执行而
是报错了 
用这个可能可以做到很多事，比如网站我们构造注释 webshell，比如二开 poc 脚本投毒进行
钓鱼，比如构造一个好玩的小程序用注释偷偷恶搞，用拼接的方式构造命令上线 cs，玩法有
很多很多，后面想到了再补充吧 
最后再放上 p 师傅的两个样本供大家学习 
Author Zac 
公众号 ZAC 安全 
微信 zacaq999 
知识星球 安全宝典