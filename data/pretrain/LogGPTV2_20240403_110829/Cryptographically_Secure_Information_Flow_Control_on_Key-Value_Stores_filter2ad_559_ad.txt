, (cid:146), V⟩
⟨c, (cid:146), V⟩ ⇝1 ⟨c
put ‹v : l1› at v k
′
−−−−−−−−−−−−−−−→ c
(cid:146)′ = {| put ‹b :l1› at vk · R′ · R
, (cid:146)′
n = increment(V(vk ))
c
Fetch-Exists
V′ = V[vk (cid:55)→ n]
(cid:12)(cid:12)(cid:12)(cid:12) R ← (cid:146);
(R′, ‹b :l1›) ← serializeP (σ , ‹(v, vk , n) :l1›) |}
′
, V′⟩
⟨c, (cid:146), V⟩ ⇝1 ⟨c
got τ ‹v : l1› at v k
′
−−−−−−−−−−−−−−−−→ c
(σ , p) ∈ {| R(∅) | R ← (cid:146) |}
n ≮ V(vk )
p > 0
‹(v, vk , n) :l1› = deserializeP (σ , σ (vk ), τ )
c
⟨c, (cid:146), V⟩ ⇝p ⟨c, (cid:146), V⟩
′
nothing-at v k
−−−−−−−−−−−−−→ c
(σ , p) ∈ {| R(∅) | R ← (cid:146) |}
p > 0
deserializeP (σ , σ (vk ), τ ) undefined
c
⟨c, (cid:146), V⟩ ⇝p ⟨c, (cid:146), V⟩
Fetch-Missing
Fetch-Replay
c
nothing-at v k
−−−−−−−−−−−−−→ c
′
′
k
v
(cid:44) vk or n  0
‹(v, v
⟨c, (cid:146), V⟩ ⇝p ⟨c, (cid:146), V⟩
Figure 6: Real Clio Semantics
to describe the probability distribution over the function f with
inputs of random variables X1, ..., Xn where Xi is distributed ac-
cording to distribution Di for 1 ≤ i ≤ n.
Figure 6 presents the inference rules for ⇝p. Internal steps do
not affect the interactions or versions. For storing (rule Store), the
version of the entry is incremented using the increment function
and the real Clio configuration uses a new distribution of inter-
actions (cid:146)′ containing the interactions to store the labeled value.
The new distribution contains the original interactions (distributed
according to the original distribution of interactions) along with a
concatenation of labeled ciphertexts and any new category keys
(distributed according to the distribution given by serialization func-
tion). Note that the label of the stored value is not encrypted as it
is public information. The configuration steps with probability 1 as
the Store rule will be used for all store operations.
When fetching a labeled value, there are three possible rules that
can be used depending on the current state of the store: Fetch-Exists,
Fetch-Missing, Fetch-Replay. The premise,
(σ , p) ∈ {| R(∅) | R ← (cid:146) |}
in each of these rules means that store σ has probability p of being
produced (by drawing interaction sequence R from distribution (cid:146)
and applying R to the empty store ∅ to give store σ).
Which rule is used for a fetch operation depends on the state
of the store, and so the transitions may have probability less than
Low-Step
(cid:146)′ = {| RA · R | RA ← (cid:146)A; R ← (cid:146) |}
⟨c, (cid:146)′
, V⟩ ⇝p ⟨c′
, (cid:146)′′
PC(c′
PC(c ) ⊑ C(ℓ)
(⟨c, (cid:146), V⟩, (cid:146)A ) ↷p ⟨c′
, V′⟩
) ⊑ C(ℓ)
, (cid:146)′′
, V′⟩
Low-to-High-to-Low-Step
(cid:146)′ = {| RA · R | RA ← (cid:146)A; R ← (cid:146) |}
⟨c0, (cid:146)0, V0⟩ ⇝p1 ... ⇝pj ⟨cj, (cid:146)j, Vj⟩
, V⟩ ⇝p0 ⟨c0, (cid:146)0, V)⟩
⟨c, (cid:146)′
∀0≤i <j . PC(ci ) ̸⊑ ℓ
PC(cj ) ⊑ ℓ
(⟨c, (cid:146), V⟩, (cid:146)A ) ↷p ⟨cj, (cid:146)j, Vj⟩
p = Π0≤i≤j pi
Interactions: R (cid:70) skip = λσ . σ
| put ck at C = λσ . σ [C (cid:55)→ ck]
| put ‹b :l› at v k
= λσ . σ [v k (cid:55)→ ‹b :l›]
Strategies: S : (cid:146) → (cid:146)
ℓ (c0, S, 1)
(cid:26)(cid:16)⟨c1, (cid:146)1, V1⟩, p0 · p1
(⟨c0, {(skip, 1)}, Σ0⟩, S({(skip, 1)})) ↷p1 ⟨c1, (cid:146)1, V1⟩(cid:27)
(cid:26)(cid:16)⟨c2, (cid:146)2, V2⟩, p0 · p1
(cid:16)⟨c1, (cid:146)1, V1⟩, p0
(cid:17) ∈ stepP
(⟨c1, (cid:146)1, V1⟩, S((cid:146)1)) ↷p1 ⟨c2, (cid:146)2, V2⟩(cid:27)
ℓ (c0, S, j + 1) =
ℓ (c0, S, j );
(cid:17)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:17)(cid:12)(cid:12)(cid:12)(cid:12)
=
stepP
stepP
Figure 7: Real Clio Low Step Semantics
one. Rule Fetch-Exists is used when the sequence of interactions
drawn produces a store that has a serialized labeled value indexed
by vk that can be correctly deserialized and whose version is not
less than the last version seen at this index. Rule Fetch-Missing is
used when the sequence of interactions drawn produces a store
that either does not have an entry indexed by vk, or has an entry
that cannot be correctly deserialized. Finally, Fetch-Replay rule is
used when the sequences of interactions drawn produce a store
where an adversary has attempted to replay an old value: the store
has a labeled value that can be deserialized correctly, but whose
recorded index is not the same as the index requested by the Clio
computation or whose version is less than the version last seen.
Similar to the ideal store semantics, we use a low step relation ↷p
to model adversary interactions, shown in Figure 7. The low step
relation is also probabilistic as it is based on the probabilistic single
step relation ⇝p. Additionally, we use a distribution of sequences
of adversarial interactions (cid:146)A to model an adversary that behaves
probabilistically. In rules Low-Step and Low-To-High-To-Low-Step a new
distribution of interactions, (cid:146)′ is created by concatenating interac-
tion sequences drawn from the existing distribution of interactions
(cid:146) and the adversary distribution (cid:146)A. This is analogous to the ap-
plication of adversary interactions to the current store in the ideal
semantics. The rest of the definitions of the rules follow the same
pattern as the ideal Clio low step store semantics.
With the low step relation, we use metafunction step to describe
the distributions of real Clio configurations resulting from taking
j low steps from configuration c0, formally defined in Figure 7. The
step function is parameterized by the keystore P and store level
ℓ. To provide a source of adversary interactions while running the
program, the step function also takes as input a strategy S which
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1900is a function from distributions of interactions to distributions of
interactions, representing the probabilities of interactions an active
adversary would perform. Before each low step, the strategy is
invoked to produce a distribution of interactions that will affect the
store that the Clio computation is using.
Strategy S expresses the ability of the attacker to modify the
store. The attacker chooses S (and t, v0, and v1), and S interacts
with the store during execution. S is a function from (distributions
of) interaction sequences to (distributions of) interaction sequences,
i.e., a function from a history of what has happened to the store
so far to the attacker’s next modifications to the store. Note that
we do not explicitly model fetching from the store as an adversary
interaction. There is no need for S to fetch values to determine
the next modification to the store since S effectively observes the
entire history of store interactions. At the end of the game when the
adversary continuation (A2) needs to pick v0 or v1, it observes the
history of interactions with the store via the interaction sequence
Rb, and thus does not need to explicitly get or fetch values.
5 Formal Properties
5.1 Indistinguishability
A cryptosystem is semantically secure if, informally, ciphertexts
of messages of equal length are computationally indistinguishable.
Two sequences of probability distributions are computationally
indistinguishable (written {Xn}n ≈ {Yn}n) if for all non-uniform
probabilistic polynomial time (ppt) algorithms A,
(cid:12)(cid:12)(cid:12) Pr[A(x ) = 1 | x ← Xn] − Pr[A(y) = 1 | y ← Yn ]
(cid:12)(cid:12)(cid:12)
is negligible in n [26].
In modern cryptosystems, semantic security is defined as indis-
tinguishability under chosen-plaintext attacks (CPA) [43].
Definition 5.1 (Indistinguishability under Chosen-Plaintext Attack).
Let the random variable INDb (A, n) denote the output of the ex-
periment, where A is non-uniform ppt, n ∈ (cid:142), b ∈ {0, 1} :
INDb (A, n) = (pk, sk ) ← Gen(1n );
m0, m1, A2 ← A(pk ) s.t. |m0| = |m1|;
c ← Enc(pk, mb );
Output A2(c)
Π = (Gen, Enc, Dec) is Chosen-Plaintext Attack (CPA) secure if
for all non-uniform ppt A:
IND0(A, n)
IND1(A, n)
≈(cid:26)
(cid:27)
(cid:27)
(cid:26)
n
n
This definition of indistinguishability phrases the security of
the cryptosystem in terms of a game where an adversary receives
the public key and then produces two plaintext messages of equal
length. One of the two messages is encrypted and the resulting
ciphertext given to the adversary. The cryptosystem is CPA Se-
cure if no adversary exists that can produce substantially different
distributions of output based on the choice of message. In other
words, no computationally-bounded adversary is able to effectively
distinguish which message was encrypted.
Clio relies on a semantically secure cryptosystem, but this is
insufficient for Clio to protect the confidentiality of secret infor-
mation. This is because CPA Security provides guarantees only for
individually chosen plaintext messages. In contrast, in our setting
we consider terms (i.e., programs) chosen by an adversary. There
are also many principals and as a result many keys in a real system,
so Clio must protect arbitrarily many principals’ information from
the adversary. Additionally, the adversary may already have ac-
cess to some of the keys. Finally, the adversary is active: it can see
interactions with the store and issue new interactions adaptively
while the program is running. It can attempt to leverage a Clio
computation to illegitimately produce a value it should not have,
or could try to trick the Clio system into leaking secret informa-
tion by interacting with the store. Traditionally, these actions of
the adversary are modeled by queries to a decryption oracle, as in
CCA-2 [43]. Here, they are modeled directly by the Clio language
and store semantics.
We chose to formulate a new definition of security that addresses
these concerns, as many previous classical definitions of security
fall short in this setting:
• Noninterference does not permit the use of computationally
secure mechanisms like cryptography.
• CPA security considers only the semantics of the crypto-
graphic algorithms, not the system they are embedded within.
• CCA and CCA2 attempt to model system behavior using
oracles, but the connection between these oracles and an
actual system is too abstract.
In contrast, we chose to employ a computational model of cryptog-
raphy that accurately represents the power of the attacker precisely
using the semantics of the language and interactions with the store.
With these considerations in mind, we define indistinguishability
under a new form of attack: chosen-term attacks (CTA).
Definition 5.2 (Indistinguishability under Chosen-Term Attack).
Let the random variable INDb (P, A, ˜p, j, n) denote the output of
the following experiment, where Π = (Gen, Enc, Dec, Sign, Verify),
A is non-uniform ppt, n ∈ (cid:142), b ∈ {0, 1}:
INDb (P0, A, ˜p, j, n) =
P′ ← Gen( ˜p, 1n ); P = P0 ⊎ P′;
t, v0, v1,S, A2 ← A(pub(P)) such that v0 =C
and ⊢ t : Labeled τ → LIO τ ′
and ⊢ v0 : Labeled τ
and ⊢ v1 : Labeled τ
and ℓ = authorityOf(P0);
ℓ v1
⟨c, (cid:146)b , V′⟩ ← stepP
ℓ (⟨Start(P), Clr(P) | (t vb )⟩,S, j);
Rb ← (cid:146)b; Output A2(Rb )
Clio using Π is CTA Secure if for all non-uniform ppt A, j ∈ (cid:142),
(cid:26)
(cid:27)
keystores P, and principals ˜p:
IND0(P, A, ˜p, j, n)
IND1(P, A, ˜p, j, n)
≈(cid:26)
(cid:27)
n