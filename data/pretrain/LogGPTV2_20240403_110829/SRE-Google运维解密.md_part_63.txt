然是不太可能发生的，但却是会造成严重问题的。当该服务的数据不可用时，备份系统
家一般都能理解。甚至有的人说，就像其他针对低可能性的危险的保护措施那样，这样
的好处。由于这个原因，在备份策略具体实施中如果出现了某些被忽视的细节问题，
为一个高优先级任务进行一
交付一个恢复系统，
可用性是没有意义的。
这个例子的中心思想是：从用户的角度来看，仅仅保障数据完整性，而没有保障数据的
很多意义。
但是，当然不是这样。用户数据虽然恢复了，但是由于太长时间无法访问，已经失去了
下没问题了吧！
息最后可以恢复。最后结果是数据没有完全丢失，这次事故仅仅只是一次事故而已，
根源问题
该针对每种潜在的事故类型来设计数据完整性机制。这3个因子分别是：
来保障其数据的可用性。我们不应该强调应该纳多少税，而是应该强调这些税会用来提
恢复任务来鼓励用户进行备份。备份其实就像纳税一样，是一个服务需要持久付出的代价，
相对于关注没人愿意做的备份任务来说，我们应该通过关注更重要的（但并不是更简单的）
的态度是必然发生的。这里的核心问题其实是，我们没有意识到备份措施防护的问题虽
针对系统进行备份是一个长期被忽视、被拖延的系统管理任务。任何人都不会将备份作
仅仅是一小部分用户的数据损坏或者丢失。
有些数据丢失是大规模的，同时影响很多实体。有些数据丢失是非常有针对性的，
应用程序的Bug、基础设施中的问题、硬件故障和部署区的大型事故。
某种无法恢复的用户数据丢失是由以下几个因素造成的：用户行为、管理员的错误、
·各团队需要定期进行演练，以确保他们有能力满足这些SLO。
·各团队需要为不同的失败场景定义一系列数据可用性SLO。
一备份需要长期消耗时间和资源，却不能带来任何现在可见
而非备份系统
保障数据完整性和可用性：GoogleSRE的目标
1301
大
这
346
---
## Page 344
347
302
照”，然后将它们保留数天时间。而完整备份和增量备份可能每两天进行一次，可以保
提供有限的保护，因为它们可以用来进行快速恢复。所以我们可以几个小时进行一次“快
用的底层API可能可以支持多种数据恢复手段。昂贵的本地“快照”可以针对软件Bug
采用了一种分级的备份策略，但是不提供这种时间点恢复的能力。例如，应用程序所采
完全用自己的研发力量来试图解决这个问题意味着在创新速度上受损。很多项目最后都
方案就像神话中的怪兽一样，几乎不可能存在。
据存储，同时还能够满足严格的在线时间、延迟、扩展性、更新速率，以及成本的解决
能够提供这种时间点恢复能力，同时能够覆盖该应用所使用的ACID与BASE类型的数
据恢复场景在Google之外被称为“时间点恢复(point-in-time）”,在Google内部被称为“时
甚至数月的数据。这个应用程序甚至需要将每块数据恢复到一个特定的时间点。这种数
从这种事故中恢复，
因此，Google所采用的保障机制也都是相应地针对这些类型的丢失设计的。
含 Bug的版本在更新数周、甚至数月之后才发现在生产环境中造成的数据损坏或者丢失。
是由于数据删除和软件Bug造成的引用完整性问题。其中遇到的最困难场景是，由于包
Google根据一次针对19次数据恢复过程的研究得出，最常见的用户可见数据丢失场景
Bug的恢复计划可能无法在全部数据丢失的情况下发挥作用。
间旅行”。
有效的故障恢复计划必须覆盖所有这些因子的全部有效组合。
图26-1：数据完整性事故故障分类图
发生速度
而有些数据丢失是缓慢持续进行的（例如，每分钟丢失10条数据，但是持续了一周
有些数据丢失是一瞬间造成的（例如，100万条数据在一次操作中被替换成了10条）。
时间）。
第26章数据完整性：读写一致
基础设施缺陷
应用程序Bug
根源问题（6）
硬件故障
操作员错误
自然灾害
用户行为
一个大型应用程序经常需要为数以百万计的用户恢复数天、数周，
影响范围（2）
范围很窄
广泛
。某个针对缓慢进行的应用
发生速度（2）
缓慢持续
快速发生
---
## Page 345
时间相同，所以加载这个数据可能还需要花费数个小时。能够最快地还原最新鲜的数据
恢复副本。针对某种媒介的隔离可以预防媒介导致的问题：在磁盘设备驱动中的某个Bug，
换过程中的Bug（双向的），本地文件的存储问题，以及两种格式之间潜在的语义区别。
护，但是仍然无法保护更底层的问题。同时，这种机制引入了几种新的危险一—数据转
存储多半会在你发现问题之前，将损坏的数据记录以及错误的删除动作更新到多个副本上。
事故等。但是有很多数据丢失场景是复制机制无法保护的。一个自动同步多个副本的数据
复制机制！”复制机制很重要，包括提高数据的本地性（locality），保护某个部署点单点
扩展性问题：全量、增量以及相互竞争的备份和恢复机制
在设计数据完整性保障机制时，必须要认识到复制机制和余并不意味着可恢复性。
维护数据完整性的深度和广度的困难之处
那么就应该同时使用两种特性。
可能无法做到时间点恢复，但是也必须能够做到分级备份能力。如果两种特性都可用，
在使用云计算API之前，一定要先考虑该API可选的数据恢复能力。有时候，这些API
存更长时间。如果这些工具中的一个或多个能够做到基于时间点的恢复，那就更好了。
个文件系统的镜像还原可能造成几个小时的信息丢失。而且一般来说，还原与备份所需
在这个场景中，当还原最后一个快照文件时，我们可能丢失最近40分钟的数据。而一
时间，
交易可能只需要几秒时间复制，然而将数据库快照导出成一个文件可能需要40分钟的
地方进行数据快照所需要的时间越长，也就意味着复制的频率越低。在数据库层，某个
对数据新鲜程度和复原完整程度的要求会与保护的周全性相互竞争。在技术栈越底层的
不太可能会影响到磁带备份。如果可能的话，我们应该把关键数据保存在黏土板上。
因此，我们可以看到，多样性是关键：针对层X的故障恢复，需要在X层保存多样化的
的影响。
于该组件的副本，例如和数据库文件处于同一个文件系统的导出备份文件也会受到相同
一个本地文件。这种机制可以在一定程度上针对用户错误和应用程序层面的Bug提供保
为了应对这个问题，我们可能会将数据定期导出成其他某种格式，例如将数据库导出成
9
一个完整的文件系统备份可能需要几个小时。
保障数据完整性和可用性：GoogleSRE的目标
一中出现。任何依赖
注6
303
348
---
## Page 346
349
据恢复计划不应该依赖于复制机制）。
保护在实践中被证实是针对意外数据删除的有效手段。第二层，是备份和对应的恢复机
恢复策略。
24种数据完整性的事故组合
模数据的完整性，需要很多特定选择的、相互独立的手段来各自提供高度保障。
制都可能在最不适合的时间出现问题。在所依赖的软件系统不停改变的情况下保障大规
就像我们假设Google的底层系统经常出问题那样，SRE同样假设任何一个数据保护机
GoogleSRE保障数据完整性的手段
304
这三层中，如果同时还有复制机制，那么在某些场景下对数据恢复是很有用的（但是数
制。第三层，也就是最后一层，更多信息参见本章后面“第三层：早期预警”小节。在
图26-2：某个对象从软删除到彻底摧毁的过程
也更为罕见。图26-2显示了某个对象从软删除到彻底摧毁的过程，以及对应的分级数据
我们需要分级进行。分级防护会引入多个层级，随着层级增加，所保护的数据丢失场景
由于数据丢失类型很多（如上文所述），没有任何一种银弹可以同时保护所有事故类型，
复杂。
的数据。当恢复这种数据时，将恢复数据与现有数据进行合并会将整个恢复过程变得更
可能需要一段时间才能被注意到。在后面这个场景中恢复数据就需要向前追溯一段时间
虽然用户或者管理员可能很快会发现某个数据库变空了，但是某些缓慢发生的数据丢失
保留期一
保留期
当然是最理想的情况，不幸的是，在某些故障场景下这不一定能够做到。
数
用户删除
据
第26章
预防用户错误
用户可以还原
用户可见的垃圾
也就是数据备份保存的时间一
数据完整性：读写一致
删除数据
应用程序
可以被用户支持团队或者
用户不可见，
防范应用程序Bug和
应用程序管理员恢复
或者存储服务软删除
服务管理员错误
一是另外一个需要考虑的因素。
由应用程序
清理数据
应用程序
其他所有场景提供保护
数据被应用程序或者
备份可以为这个和
还原需要使用备份
存储服务摧毁
无法还原
被摧毁
数据
---
## Page 347
的删除逻辑时造成的。尤其是在开发某种离线批处理数据流水线的时候（例如，某个离
Google同时发现最严重的数据删除案例经常是由于某个不熟悉现有代码的开发者实现新
30、45或者60天。在Google的经验中，大部分账号劫持和数据完整性问题都会在60
号的人常常会先将用户原始数据删除，再用这个账号来发送垃圾或者进行其他非法活动，
垃圾箱允许用户恢复30天之内删除的信息。
我们可以将这种软删除策略继续延伸，直接提供给用户数据恢复机制。例如，Gmail的
力是无法持续的。
除的文件。Google在使用量最高的工具上都实现了这种机制，否则用户支持所带来的压
用中的垃圾箱时应该采用软删除，同时提供某种支持工具允许有授权的管理员恢复误删
证场景、账号恢复、企业管理后台、用户支持，以及在线排错等。在用户清除自已的应
已删除，这样除了管理后台代码之外其他代码不可见。管理后台这里可能包括了司法取
软删除机制可以大幅度减少支持人员的压力。软删除意味着被删除的数据立刻被标记为
的时候。
降低出现频率，但是不能彻底消除这种场景，尤其是当该服务允许第三方插件删除数据
可避免地要处理误删除场景。允许用户恢复他们的数据（例如，使用回收站机制）可以
除操作是针对永久性数据丢失的第一道防线。
Bug造成的。事实上，数据删除逻辑的 Bug 非常常见，以至于快速复原一定时间内的删
API提供内置的软删除和恢复删除API，同时确保启用这项功能。
悉现有代码的开发者无法（或者非常困难）绕过软删除逻辑。一个有效方法是让云计算
线的MapReduce，或者Hadoop流水线）。于是，在设计接口的时候，最好能够使得不熟
天内汇报或者检测到。因此，为软删除保存超过60天的需求可能没有那么强烈。