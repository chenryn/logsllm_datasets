title:Towards HTTPS Everywhere on Android: We Are Not There Yet
author:Andrea Possemato and
Yanick Fratantonio
Towards HTTPS Everywhere on Android: 
We Are Not There Yet
Andrea Possemato, EURECOM / IDEMIA; Yanick Fratantonio, EURECOM
https://www.usenix.org/conference/usenixsecurity20/presentation/possemato
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Towards HTTPS Everywhere on Android:
We Are Not There Yet
Andrea Possemato
IDEMIA and EURECOM
Yanick Fratantonio
EURECOM
Abstract
Nowadays, virtually all mobile apps rely on communicating
with a network backend. Given the sensitive nature of the data
exchanged between apps and their backends, securing these
network communications is of growing importance. In recent
years, Google has developed a number of security mechanisms
for Android apps, ranging from multiple KeyStores to the
recent introduction of the new Network Security Policy, an
XML-based conﬁguration ﬁle that allows apps to deﬁne their
network security posture.
In this paper, we perform the ﬁrst comprehensive study
on these new network defense mechanisms. In particular, we
present them in detail, we discuss the attacks they are defending
from, and the relevant threat models. We then discuss the ﬁrst
large-scale analysis on this aspect. During June and July 2019,
we crawled125,419 applications andwe foundhow only 16,332
apps adopt this new security feature. We then focus on these
apps,andweuncoverhowdevelopersadoptweakandpotentially
vulnerable network security conﬁgurations. We note that, in
November 2019, Google then made the default policy stricter,
which would help the adoption. We thus opted to re-crawl
the same dataset (from April to June 2020) and we repeated
the experiments: while more apps do adopt this new security
mechanism, a signiﬁcant portion of them still do not take fully
advantage of it (e.g., by allowing usage of insecure protocols).
We then set out to explore the root cause of these weaknesses
(i.e., the why). Our analysis showed that app developers
often copy-paste vulnerable policies from popular developer
websites (e.g., StackOverﬂow). We also found that several
popular ad libraries require apps to weaken their security
policy, the key problem lying in the vast complexity of the ad
ecosystem. As a last contribution, we propose a new extension
of the Network Security Policy, so to allow app developers
to embed problematic ad libraries without the need to weaken
the security of their entire app.
1 Introduction
Nowadays, users rely on smartphones for a variety of security-
sensitive tasks, ranging from mobile payments to private
communications. Virtually all non-trivial mobile apps rely on
communication with a network backend. Given the sensitive
nature of the data exchanged between the app and the backend,
developers strive to protect the network communication by
using encryption, so that network attackers cannot eavesdrop
(or modify) the communication content. However, several
works have shown how properly securing network connections
is still a daunting challenge for app developers.
Within the context of Android, in recent years, Google has
introduced several new network security features to tackle these
problems. For example, starting from Android 4.x, Android
started to display alert information to the user if a “custom”
certiﬁcate was added to the set of trusted CAs. Later versions of
Android started supporting two diﬀerent repositories for CAs:
the System KeyStore, which contains the “default” set of trusted
CAs; and the User KeyStore, which contains custom CAs
“manually” added by the user. This separation allows Google to
make apps trust only the system CAs by default. From Android
6.0, Google started to push towards “HTTPS everywhere”
even further. It ﬁrst introduced a new app attribute (that could
be speciﬁed in the app’s manifest) to specify whether cleartext
(HTTP) connections should be allowed or blocked. It then
extended these settings by introducing the Network Security
Policy (NSP, in short): this mechanism allows a developer to
specify complex policies (with an XML conﬁguration ﬁle)
aﬀecting the network security of her app.
Motivated by these recent changes and by their potential
security impact on the ecosystem, in this paper we present the
ﬁrst comprehensive study on these new defense mechanisms.
We ﬁrst discuss in detail these new features, the attacks that
are mitigated by the NSP, and the relevant threat models. We
then highlight several security pitfalls: since the policy allows
the developer to deﬁne very complex conﬁgurations, they are
prone to misconﬁgurations. We identiﬁed several patterns for
which policies may provide a false sense of security, while,
in fact, they are not useful.
Guided by these insights, we then present the ﬁrst analysis
of the adoption of the Network Security Policy on the Android
ecosystem. This analysis, performed over 125,419 Android
apps crawled during June and July 2019, aims at characterizing
how developers are using these new features and whether they
are aﬀected by misconﬁgurations. The results are concerning.
Wefoundthatonly16,332appsaredeﬁningaNSPandthatmore
than 97% of them deﬁne a NSP to allow cleartext protocols.
Since starting from November 2019 Google changed some
important default values related to NSP (and especially related
to cleartext), we repeated the experiments over a fresh crawl
of the same dataset (performed from April to June 2020): Our
results show that while more apps do adopt this new security
USENIX Association
29th USENIX Security Symposium    343
mechanism, a signiﬁcant portion of them still do not take fully
advantage of it (e.g., by allowing usage of insecure protocols).
We then set out to explore why apps adopt such permissive
policies. We found that many of these policies are simply
copy-pasted from popular developer websites (e.g., StackOver-
ﬂow). Upon closer inspection, we also found how many of the
weak policies could be “caused” by embedding advertisement
libraries. In particular, we found that the documentation of
several prominent ad libraries requires app developers to adapt
their policy and make it very permissive, for example by allow-
ing the usage of cleartext within the entire application. While
the NSP format provides a mechanism to indicate a domain
name-speciﬁc policy, we found that the complex ad ecosystem
and the many actors that are part of it make it currently
impossible to adopt safer security policies. Thus, as another
contribution of this paper, we designed and implemented an
extension of the current Network Security Policy, which allows
developers to specify policies at the “app package” granularity
level. We then show how this proposal enables app developers
to embed ad libraries without the need of weakening the policy
of the core app, how it is fully backward compatible, and how
it can thus act as a drop-in replacement of the current version.
In summary, this paper makes the following contributions:
• We perform the ﬁrst comprehensive study on the newly
introduced Android network security mechanisms,
identifying strengths and common pitfalls.
• We perform the ﬁrst large-scale analysis on the adoption
of the Network Security Policy on the Android ecosystem,
using a dataset of 125,419 apps. Our study found that
a signiﬁcant portion of apps using the NSP are still
allowing cleartext.
• Weinvestigatetherootcausesleadingtoweakpolicies,and
we found that several popular ad libraries and the complex
advertisement ecosystem encourage unsafe practices.
• We propose a drop-in extension to the current Network
Security Policy format that allows developers to comply
with the needs of third-party libraries without weakening
the security of the entire application.
In the spirit of open science, we release all the source code
developed for this paper and the relevant datasets.
2 Network Communication Insecurity
This section explores the diﬀerent threats that an application
might be exposed to due to insecure network communications.
Foreachofthe issues,we also discuss the relevantthreatmodels.
2.1 HTTP
An application using a cleartext protocol to exchange data
with a remote server allows an attacker to mount so-called
Man-In-The-Middle (MITM) attack, through which it is
possible to eavesdrop (or even modify) the network traﬃc at
will. This, in turn, can lead to the compromisation of the user’s
private information or of the application itself [4, 32, 37, 49].
The actual severity of this threat changes depending on the
nature of the data exchanged by the application and the network
backend. In other words, this HTTP scenario can be exploited
by an attacker within the following threat model:
Threat Model 1. An attacker on the same WiFi network (or on
the network path) of the victim can eavesdrop and arbitrarily
modify apps’ unencrypted connections and data at will.
2.2 HTTPS and Certiﬁcate Pinning
By adopting the “secure” version of HTTP, HTTPS, it is possi-
ble to perform network operations over a secure and encrypted
channel. Exchanging data using HTTPS (SSL/TLS) ensures
integrity, conﬁdentiality, and authenticity over the connection
between the application and the remote server. This mechanism
works as follows. First, when an application tries to contact
a remote server using SSL/TLS, a “handshake” is performed.
Duringthisphase,theserverﬁrstsendsitscertiﬁcatetotheclient.
This certiﬁcate contains multiple pieces of information includ-
ingitsdomainnameandacryptographicsignaturebyaso-called
Certiﬁcate Authority (CA). To determine whether the client
should trust this CA,the system consults a set of hardcoded pub-
lickeysofthemostimportant(andtrusted)CAs:Ifthecertiﬁcate
is signed (directly or indirectly) by one of these CAs, the certiﬁ-
cate is then considered trusted and the (now secure) connection
can proceed; otherwise, the connection is interrupted [1].
While SSL/TLS is a powerful mechanism, it can be
compromised by an attacker within the following threat model:
Threat Model 2. An attacker that can obtain a rogue certiﬁcate
can perform MITM over HTTPS connections. We consider
a certiﬁcate to be “rogue” when it is correctly signed by a
(compromised) trusted CA without an attacker owning the
target domain name [2,33].
Attacks within this threat model can be mitigated by imple-
menting Certiﬁcate Pinning. Certiﬁcate pinning consists in
“hardcoding” (or, pinning) which is the expected certiﬁcate(s)
when performing a TLS handshake with a given server. From
the technical standpoint, this “expectation” is hardcoded within
the application itself, and the app can thus verify, during the
handshake,thatthe certiﬁcate sentfrom the servermatches with
the expected one. Even though pinning is a powerful security
mechanism, previous works have shown how it is very chal-
lenging to properly implement it. In fact, to implement pinning,
developers are tasked to rely on a wide variety of libraries,
each of which exposes a distinct set of APIs. Handling diverse
implementations of pinning may push developers to take some
shortcuts: It was shown how it is not uncommon for developers
to rely on “ready-to-use,” but broken, implementations of cer-
tiﬁcate pinning copied from websites like StackOverﬂow [25].
344    29th USENIX Security Symposium
USENIX Association
These broken implementations might lead to accepting arbi-
trary certiﬁcates without even verifying which CA signed them,
orwhetherthecertiﬁcatewasissuedforthegivendomain. More-
over, it has also been shown how even popular network libraries
themselves may fail to properly implement pinning [31].
2.3 User Certiﬁcates
The Android system comes with a set of pre-installed CAs to
trust and uses them to determine whether a given certiﬁcate
shouldbe trusted. These CAs reside in a componentnamedKey-
Store. ThesystemalsoallowstheusertospecifyaUserKeyStore
and to install custom CAs. There might be situations where the
custom CAs allow to perform a MITM over SSL/TLS connec-
tions (see Section 4). However,performing MITM overa secure
connection should not always be considered a malicious activ-
ity. For example, proxies used to debug network issues rely on
the same technique. Self-signed certiﬁcates generated by these
tools do not have a valid trust chain and thus cannot be veriﬁed,
andtheappwouldterminatetheconnection. Byaddingacustom
CA, apps can successfully establish a network connection.
Unfortunately, User KeyStore and self-signed certiﬁcates
can also be abused by malware. Of particular importance
is the emerging threat of “stalkware” (also known as
“spouseware”) [17,29]. In short, this scenario can be exploited
by an attacker within the following threat model:
Threat Model 3. An attacker that has physical access to
the device can silently install a new custom certiﬁcate to
the User KeyStore, and mount MITM (including on HTTPS
connections) to spy the user’s activities.
3 Network Security Policy
To make the adoption and implementation of “secure con-
nections” easier for a developer, Google recently introduced
several modiﬁcations and improvements, which we discuss
in this section.
The ﬁrst problem that Google tried to address relates to the
installation of self-signed certiﬁcates. In very early versions of
Android, it was possible to silently install one of these certiﬁ-
cates, thus allowing anyone who controls it to perform MITM
on SSL/TLS connections. In Android 4.4, however, Google
introduced the following change: if a self-signed certiﬁcate
is added to the device, the system would display a warning
message informing the user about the risks and consequences
of MITM on SSL traﬃc [45]. However, since there might be
scenarios where trusting a (benign) self-signed certiﬁcate is
necessary (e.g., to perform network debugging), Google de-
cidedtosplittheKeyStoreintotwoentities. Theﬁrstone,named
System KeyStore, is populated with pre-installed CAs, while
the second one, named User KeyStore, allows the user to install
self-signed certiﬁcates without altering the System KeyStore.
The second problem Google tried to mitigate is the adoption
of cleartext protocols [3]. Starting from Android 6.0, Google
introduced a new security mechanism to help apps preventing
cleartext communication, named Network Security Policy [5].
With this new policy, an app can specify the usesCleartext-
Traffic boolean attribute in its manifest ﬁle and, by setting
it to false, the app can completely opt-out from using cleartext
protocols, such as HTTP, FTP, IMAP, SMTP, WebSockets or
XMPP [7]. Moreover, from Android 7.0, the new default is that
appsdonottrustCAsaddedtotheUserKeyStore[14]. Itispossi-
ble to override this default, but the developer needs to explicitly
specify the intention of using the User CAs within the policy.
Note that, from an implementation point of view, the
policy is not enforced by the operating system (as it would
be impractical), but it is up to the various network libraries
to actually honor it (e.g., by interrupting an outbound HTTP
connection if cleartext traﬃc should not be allowed). Note also
that, to address backward compatibility concerns, for an app
targeting an API level from 23 to 27 (i.e., from Android 6.0 to
Android 8.1), the default value of the usesCleartextTraf-
fic attribute is true. However, if an app targets API level 28
or higher (i.e., Android 9.0+), then the default for that attribute
is false, forcing developers to explicitly opt-out from this
new policy in case their apps require HTTP traﬃc.
While this policy is a signiﬁcant improvement, for some
apps it may currently be impractical to completely opt-out from
cleartext communications. In fact,this policy follows an “all-or-
nothing” approach, which might be too coarse-grained. This is
especially true when a developeris notin complete controlofits
codebase, such as when embedding closed-source third-party
libraries. In fact, these third-party libraries may reach out to re-
moteserversusingcleartextprotocolsortosomedomain names
that are not even supporting HTTPS. To allow for a more granu-
lar speciﬁcation, with the release of Android 7.0, Google intro-
duced an extended version of the NSP, which we discuss next.
3.1 Policy Speciﬁcation
The new version of the NSP, introduced by Google in Android
7.0, has undergone a complete redesign [6]. The policy now
resides on an external XML ﬁle and it is not mixed anymore
with the AndroidManifest. The most interesting feature
introduced in this new version is the possibility to specify
additional network security settings other than allowing or
blocking cleartext protocols. Moreover, to overcome the lack
of granularity of the previous version, the policy now allows
for more customizations through the introduction of the new
base-config and domain-config XML nodes. The seman-
tics of these two nodes is the following: all the security settings
deﬁned within the base-config node are applied to the
entire application (i.e., it acts as a sort of default); the domain-
config node, instead, allows a developer to explicitly specify
a list of domains for which she can specify a diﬀerent policy.
Cleartext. Allowing or blocking cleartext protocols can now
be easily achieved with the cleartextTrafficPermitted
attribute. Moreover, the developer can decide “where” to apply
USENIX Association
29th USENIX Security Symposium    345
this security conﬁguration. This attribute can be deﬁned both
within a “base” and “domain” conﬁg node. To enforce this
settingatruntime,networkinglibrariescanrelyonthe Network-
SecurityPolicy.isCleartextTrafficPermitted()
API, which returns whether cleartext traﬃc should be allowed
for the entire application. Instead, to check if cleartext
traﬃc is allowed for a given host, a library can use the
isCleartextTrafficPermitted(String host) API.
Certiﬁcate Pinning. Conﬁguring certiﬁcate pinning is now
much simpler than it was in the past. First, since certiﬁcate
pinning is used to verify the identity of a speciﬁc domain, all
the conﬁgurations need to be deﬁned in a domain-config.
Second, the developer needs to deﬁne a pin-set node (with
an optional expiration attribute to specify an expiration date
for this entry). The pin-set node works as a wrapper for one