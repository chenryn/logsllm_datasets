respectively targeted at address public keys anew
pk,1 and anew
pk,2.
pk,2 may belong to u or to some
(The addresses anew
other user.) The user u, for each i ∈ {1, 2}, proceeds as follows:
; (ii) u computes
(i) u samples serial number randomness ρnew
; and (iii) u
knew
i
) for a random snew
computes cmnew
.
, snew
,
1
1
).
cmnew
, cmnew
, snew
, rnew
Next, u produces a zk-SNARK proof πPOUR for the following
NP statement, which we call POUR:
) for a random rnew
(vnew
:= (anew
pk,i(cid:107)ρnew
(anew
:= COMMsnew
(cid:107)knew
pk,1, vnew
1
, ρnew
This yields the coins cnew
pk,1 and anew
:= COMMrnew
) and cnew
:= (anew
pk,2, vnew
1 + vnew
, ρnew
, rnew
i
1
1
i
i
1
2
2
2
2
2
2
i
i
i
i
i
i
“Given the Merkle-tree root rt, serial number snold,
I know coins
,
and coin commitments
, and address secret key aold
sk such that:
cold, cnew
• The coins are well-formed: for cold it holds that kold =
pk (cid:107)ρold) and cmold = COMMsold(vold(cid:107)kold);
, cmnew
cmnew
, cnew
1
2
1
2
COMMrold(aold
and similarly for cnew
1
and cnew
.
2
• The coin commitment cmold appears as a leaf of a Merkle-
• The address secret key matches the public key: aold
pk =
• The serial number is computed correctly: snold
:=
PRFaddr
aold
sk
(0).
PRFsn
aold
sk
(ρold).
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
tree with root rt.
• The values add up: vnew
1 + vnew
2 = vold.”
, πPOUR) is appended to the ledger. (As before,
A resulting pour transaction txPour
2
:= (rt, snold, cmnew
,
1
the
cmnew
transaction is rejected if the serial number sn appears in a
previous transaction.)
sk,1 that is associated with the public key anew
because he cannot provide anew
Now suppose that u does not know, say, the address secret
key anew
pk,1. Then, u
cannot spend cnew
sk,1 as part of
the witness of a subsequent pour operation. Furthermore, when
a user that knows anew
, the user u cannot
track it, because he knows no information about its revealed
serial number, which is snnew
sk,1 does spend cnew
(ρnew
).
1
1
:= PRFsn
anew
sk,1
1
1
Also observe that txPour reveals no information about how
the value of the consumed coin was divided among the two
new fresh coins, nor which coin commitment corresponds to
the consumed coin, nor the address public keys to which the
two new fresh coins are targeted. The payment was conducted
in full anonymity.
More generally, a user may pour N old ≥ 0 coins into N new ≥
0 coins. For simplicity we consider the case N old = N new = 2,
without loss of generality. Indeed, for N old  2 or N new > 2, the user can
compose log N old + log N new of the 2-input/2-output pours.
Step 4: sending coins. Suppose that anew
pk,1 is the address public
key of u1. In order to allow u1 to actually spend the new coin
produced above, u must somehow send the secret values
cnew
1
in cnew
to u1. One way is for u to send u1 a private message,
but the requisite private communication channel necessitates
additional infrastructure or assumptions. We avoid this “out-
of-band” channel and instead build this capability directly into
our construction by leveraging the ledger as follows.
1
We modify the structure of an address key pair. Each
user now has a key pair (addrpk, addrsk), where addrpk =
(apk, pkenc) and addrsk = (ask, skenc). The values (apk, ask)
are generated as before. In addition, (pkenc, skenc) is a key pair
for a key-private encryption scheme [21].
1
1
1
1
, snew
, rnew
, ρnew
Then, u computes the ciphertext C1 that is the encryption
), under pknew
enc,1 (which
of the plaintext (vnew
is part of u1’s address public key addrnew
sk,1), and includes C1
in the pour transaction txPour. The user u1 can then ﬁnd and
decrypt this message (using his sknew
enc,1) by scanning the pour
transactions on the public ledger. Again, note that adding C1
to txPour leaks neither paid amounts, nor target addresses due
to the key-private property of the encryption scheme. (The
user u does the same with cnew
and includes a corresponding
ciphertext C2 in txPour.)
Step 5: public outputs. The construction so far allows users
to mint, merge, and split coins. But how can a user redeem
one of his coins, i.e., convert it back to the base currency
(Bitcoin)? For this, we modify the pour operation to include a
public output. When spending a coin, the user u also speciﬁes
a nonnegative vpub and an arbitrary string info. The balance
2
1 + vnew
equation in the NP statement POUR is changed accordingly:
“vnew
2 + vpub = vold”. Thus, of the input value vold,
a part vpub is publicly declared, and its target is speciﬁed,
somehow, by the string info. The string info can be used to
specify the destination of these redeemed funds (e.g., a Bitcoin
wallet public key).4 Both vpub and info are now included in the
resulting pour transaction txPour. (The public output is optional,
as the user u can set vpub = 0.)
Step 6: non-malleability. To prevent malleability attacks on
a pour transaction txPour (e.g., embezzlement by re-targeting
the public output of the pour by modifying info), we further
modify the NP statement POUR and use digital signatures.
Speciﬁcally, during the pour operation, the user u (i) samples
a key pair (pksig, sksig) for a one-time signature scheme;
(ii) computes hSig := CRH(pksig); (iii) computes the two values
h1 := PRFpk
(hSig), which act as
aold
sk,1
MACs to “tie” hSig to both address secret keys; (iv) modiﬁes
POUR to include the three values hSig, h1, h2 and prove that
the latter two are computed correctly; and (v) uses sksig to sign
every value associated with the pour operation, thus obtaining
a signature σ, which is included, along with pksig, in txPour.
Since the aold
sk,i are secret, and with high probability hSig changes
for each pour transaction, the values h1, h2 are unpredictable.
Moreover, the signature on the NP statement (and other values)
binds all of these together.
(hSig) and h2 := PRFpk
aold
sk,2
This ends the outline of the construction, which is summarized
in part in Figure 1. We conclude by noting that, due to
the zk-SNARK, our construction requires a one-time trusted
setup of public parameters. The trust affects soundness of the
proofs, though anonymity continues to hold even if the setup
is corrupted by a malicious party.
C. Zerocash
We outline Zerocash, a concrete implementation, at 128
bits of security, of our DAP scheme construction; see Sec-
tion V for details. Zerocash entails carefully instantiating
the cryptographic ingredients of the construction to ensure
that the zk-SNARK, the “heaviest” component, is efﬁcient
enough in practice. In the construction, the zk-SNARK is
used to prove/verify a speciﬁc NP statement: POUR. While
zk-SNARKs are asymptotically efﬁcient, their concrete efﬁ-
ciency depends on the arithmetic circuit C that is used to
decide the NP statement. Thus, we seek instantiations for which
we can design a relatively-small arithmetic circuit CPOUR for
verifying the NP statement POUR.
Our approach is to instantiate all of the necessary cryp-
tographic ingredients (commitment schemes, pseudorandom
functions, and collision-resistant hashing) based on SHA256.
We ﬁrst design a hand-optimized circuit for verifying SHA256
computations (or, more precisely, its compression function,
4These public outputs can be considered as an “input” to a Bitcoin-style
transaction, where the info string contains the Bitcoin output scripts. This
mechanism also allows us to support Bitcoin’s public transaction fees.
462
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: (a) Illustration of the CRH-based Merkle tree over the list CMList of coin commitments. (b) A coin c. (c) Illustration of the structure
of a coin commitment cm. (d) Illustration of the structure of a coin serial number sn.
which sufﬁces for our purposes).5 Then, we use this circuit in
constructing CPOUR, which veriﬁes all the necessary checks for
satisfying the NP statement CPOUR.
This, along with judicious parameter choices, and a state-of-
the-art implementation of a zk-SNARK for arithmetic circuits
[16] (see Section II-C), results in a zk-SNARK prover running
time of few minutes and zk-SNARK veriﬁer running time of
few milliseconds. This allows the DAP scheme implementation
to be practical for deployment, as our experiments show.
Zerocash can be integrated into Bitcoin or forks of it
(commonly referred to as “altcoins”); we later describe how
this is done.
D. Paper organization
The remainder of this paper is organized as follows.
Section II provides background on zk-SNARKs. We deﬁne
DAP schemes in Section III, and our construction thereof in
Section IV. Section V discusses the concrete instantiation in
Zerocash. Section VI describes the integration of Zerocash
into existing ledger-based currencies. Section VII provides
microbenchmarks for our prototype implementation, as well
as results based on full-network simulations. Section VIII
describes optimizations. We discuss concurrent work in Sec-
tion IX and summarize our contributions and future directions
in Section X.
II. BACKGROUND ON ZK-SNARKS
The main cryptographic primitive used in this paper is
a special kind of Succinct Non-interactive ARgument of
Knowledge (SNARK). Concretely, we use a publicly-veriﬁable
preprocessing zero-knowledge SNARK, or zk-SNARK for short.
In this section we provide basic background on zk-SNARKs,
provide an informal deﬁnition, and recall known constructions
and implementations.
5Alternatively, we could have opted to rely on the circuit generators [13, 14,
16], which support various classes of C programs, by writing C code expressing
the POUR checks. However, as discussed later, these generic approaches are
more expensive than our hand-optimized construction.
A. Informal deﬁnition
We informally deﬁne zk-SNARKs for arithmetic circuit
satisﬁability. We refer the reader to, e.g., [11] for a formal
deﬁnition.
For a ﬁeld F, an F-arithmetic circuit takes inputs that are
elements in F, and its gates output elements in F. We naturally
associate a circuit with the function it computes. To model
nondeterminism we consider circuits that have an input x ∈
Fn and an auxiliary input a ∈ Fh, called a witness. The
circuits we consider only have bilinear gates.6 Arithmetic
circuit satisﬁability is deﬁned analogously to the boolean case,
as follows.
Deﬁnition II.1. The arithmetic circuit satisﬁability problem
of an F-arithmetic circuit C : Fn × Fh → Fl is captured by the
relation RC = {(x, a) ∈ Fn×Fh : C(x, a) = 0l}; its language
is LC = {x ∈ Fn : ∃ a ∈ Fh s.t. C(x, a) = 0l}.
Given a ﬁeld F, a (publicly-veriﬁable preprocessing)
zk-SNARK for F-arithmetic circuit satisﬁability is a triple
of polynomial-time algorithms (KeyGen, Prove, Verify):
• KeyGen(1λ, C) → (pk, vk). On input a security parameter
λ (presented in unary) and an F-arithmetic circuit C, the
key generator KeyGen probabilistically samples a proving
key pk and a veriﬁcation key vk. Both keys are published as
public parameters and can be used, any number of times, to
prove/verify membership in LC.
• Prove(pk, x, a) → π. On input a proving key pk and any
(x, a) ∈ RC, the prover Prove outputs a non-interactive
proof π for the statement x ∈ LC.
• Verify(vk, x, π) → b. On input a veriﬁcation key vk, an input
x, and a proof π, the veriﬁer Verify outputs b = 1 if he is
convinced that x ∈ LC.
A zk-SNARK satisﬁes the following properties.
For every security parameter λ, any F-
Completeness.
arithmetic circuit C, and any (x, a) ∈ RC, the honest prover
6A gate with inputs y1, . . . , ym ∈ F is bilinear if the output
is