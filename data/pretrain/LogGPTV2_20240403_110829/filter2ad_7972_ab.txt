兼容模式运行脚本, 这意味我们虽然发现了 7 个漏洞, 但实际只有 5 个引发 WPAD, 然而其 他漏洞任然可以被用在 IE(包括 IE11) 投入
IE8 兼容模式的恶意网页。
#### 0x04 Exploit
##### 1、 Understanding JScript VARs and Strings
在这篇文章中的接下来的部分,我们将讨论JScript VARs和Strings, 在讨论漏洞工作方式之前,先讲述这些内容是十分有用的
JScript VAR是一个24-byte(64位)结构,这表示一个JavaScript变量,本质上是和VARIANT的数据结构相同的([MSDN
described](https://msdn.microsoft.com/en-us/library/windows/desktop/ms221627\(v=vs.85\).aspx)).
在多数情况下(足以跟踪漏洞)内存布局如下所示
例如，我们可以用一个VAR表示一个双精度数字，它在前2个字节中是5（表示double类型），后跟一个实际的双值，在偏移量为8。最后8个字节将没有使用，但如果从这个VAR.复制另一个VAR的值，它们将被复制
一个JScript的String 是VAR的一种类型在标志位为8,并且指针偏移量是8.这个指针指向一个BSTR结构体([described
here](https://msdn.microsoft.com/en-us/library/windows/desktop/ms221069\(v=vs.85\).aspx)).在64位的情况下BSTR的结构如下
一个String VAR
指针直接指向字符数组,这意味着,获取一个字符串的长度,指针需要-4从那个位置读取长度.注意,BSTRs被OleAut32.dll的处理,被分配在独特的堆(i.e.
意思就是其他的Jscript的对象被分配在其他的堆)
释放BSTR也不同于大多数对象,在释放的时候,不再是直接释放一个BSTR,当SysFreeSting被调用的时候,它首先会想一个字符串放在被OleAut32.dll控制的cache中.这个机制在[Javascript
Heap 风水](https://www.blackhat.com/presentations/bh-usa-07/Sotirov/Whitepaper/bh-usa-07-sotirov-WP.pdf)
##### 2、Stage 1:Infoleak
infoleak
的目的在于获取一个完全由我们控制的string在内存的地址,我们在这个点上没获得任何可执行模块的地址,但接下来会.然而,我们的目标是击破hig-entropy heap randomization(高熵堆随机化)并且让第二阶段的exploit可靠,而不需要是用堆喷
因此我们主要在RegExp.lastParen中使用[这个漏洞](https://bugs.chromium.org/p/project-zero/issues/detail?id=1382).为了理解这个bug,我们先来仔细看看jscript!RegExpFncObj的内存布局,以及他对应的
JScript RegExp 对象.在偏移OxAC处,
RegExpFncObj包含20个整数的缓冲区.实际上这是10对整数:每一对的第一个元素的输入字符串的start index(开始索引),第二个元素是end
index(结束索引).只要RegExp.test,RegExp.exec或带有RegExp参数的String.search在匹配正则语法-组(group)的时候(RegExp中的圆括号),匹配的开始和结束索引就会存储在这里.显然的缓冲区中只有10对空间,所以只有前10个匹配项会被存在这个缓冲区中
但是,如果RegExp.lastParen被调用,并且有超过10个的捕获组的时候,RegExpFncObj::LastParen会很高兴的使用捕获组的数量作为缓冲区的索引,从而导致越界读取
这是一个PoC:
    var r= new RegExp ( Array (100) .join ('() ') );
    ''.search (r);
    alert ( RegExp.lastParen );
这两项指标(我们称之为start_index,
end_index)读取缓冲区边界之外,并且可以达到任意大的区域.假设这第一个越界访问不会造成崩溃,如果这些索引中的值大于输入字符串的长度,那将发生第二次越界读取,这将允许我们读取输入字符串边界之外的内容.像这样的字符串越界读取,将字符串内容返回到字符串变量中的可以被检测到的调用处.
这第二次越界读将会是我们所使用的,但首先我们需要去明白如何获得start_index,
end_index的控制权.幸运的是,在RegExpFncObj的布局中,在index缓冲区后的有一段数据我们可以控制:RegExp.input
的值.通过设置RegExp.input为一个整数值,并且使用一个由41组空括号组成的RegExp(正则表达式),当RegExp.lastParen被调用的时候,start_index将会变成0,然后end_indx的值将会是我们写到RegExp.input的值
如果我们将一个输入字符串和一个释放字符串相邻,然后通过越界读取输入字符串的边界外内容,我们就可以获得堆的metadata,比如指向其他空闲堆的指针(堆块的红黑树的左,右和父节点参阅[window10堆内部信息](https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals.pdf)获得更多的信息),Image1 展示了相应对象在infoleak时的情况。
Image 1: Heap infoleak layout
我们将使用20000 bytes-long的字符串作输入,为了不被分配在低碎片堆(Low Fragmentation
Heap)(LFH只能被用来16k字节或更小的分配).因为LFH的堆metadata是不同的,在win10的Segment堆中不包含有用的指针.此外,LFH还引入了随机性,这会影响到我们把输入字符串被放在释放字符串旁边的构想
通过从返回的字符串中读取堆的metadata,我们可以获得一个释放字符串的地址,那么我们分配一个与释放字符串相同大小的字符串,它可能被分配在这个地址,我们实现了我们的目标,那就是我们知道了一个由我们控制的字符串的地址
这整个infoleak的过程大概是:
  1. 分配 1000 10000-character的String(提示: 10000 characters == 20000 bytes)
  2. 释放每第二个(Free every second one)
  3. 触发infoleak bug,使用剩余的字符串之一作为输入字符串并越界读取20080个bytes(字节)
  4. 分析泄露的字符串并获得指向其中一个释放字符串的指针
  5. 使用特定内容分配与释放的字符串(10000个 characters)长度相同的500个字符串
特定内容的字符串在这个步骤还不重要,但在下一阶段将变得十分重要,因此会在下一个阶段描述它.还注意,通过检查堆metadata,我们可以很容易的确定进程正在使用的堆(segment
堆和NT堆)
Image2和Image3展示了使用[Heap History
Viewer](https://github.com/thomasdullien/heap_history_viewer)
在infoleak时生成的堆可视化的图像
绿色的条纹表示分配块(被字符串占用),灰色的条纹标识分配后,但是被释放的后再分配的块,(指向的是我们释放后,又触发infoleak后被重新分配到(the
stings we free and then reallocate after triggering the infoleak
bug)),白色的条纹是代表从未被分配的数据(保护页).你可以看到随着时间的推移字符串是如何被分配的,然后一半被释放的(灰色的),一段时间后又被分配(条纹变成绿色)
我们可以看到,每3个这样大小的分配后就会有一个保护页.我们的exploit是从来没有想过去接触这些保护页的(这发生在读取字符串尾少量的数据(it reads
too little data past the end of the string for that to
occur))但有1/3的几率,infoleak输入的字符串后面讲不会有空字符串,所以预期的堆metadata将会丢失.但是我们可以很容易的检测到这种情况,并且使用另一个输入字符串触发infoleak错误,或者终止exploit(注意:到目前为止我们没有触发任何内存损坏)
Image 2: Heap Diagram: Showing the evolution of the heap over time
Image 3: Step-by-step illustration of leaking a pointer to a string.
##### 3、Stage2: overflow
在exploit的第二个阶段,我们使用[this heap overflow
bug](https://bugs.chromium.org/p/project-zero/issues/detail?id=1383)
在Array.sort中.如果驶入的数组中元素数量大于Array.length/2,JsArrayStringHeapSort(如果未指定比较函数则被Array.sort调用)就会分配一个与当前数组元素数量相同大小的临时的缓冲区(注意:可比array.length小).然后尝试从0到Array.length的每一个数组引索检索相应的元素,如果该元素存在,则将其添加到缓冲区,并转化为字符串.如果数组在JSArrayStringHeapSort的生命周期中没有改变,这将工作正常.但是,JsArrayStringHeapSort将数组元素转化为Strings将触发toString()回调.如果在其中一个toString()回调元素被添加到之前未定义的数组中时,将发生溢出.
为了更好的理解这个bug以及其可利用性,我们来仔细看看我们将会溢出的缓冲区结构.已经提到,数组的大小和当前正在输入数组中的元素数量相同(确切的说,这将是元素数量+1)数组的每个元素都是48字节(64位)结构如下
在JsArrayStringHeapSort期间,检索索引为 `` 的数组的每个元素,并且如果元素被定义,这会发生以下情况
  1. 这个数组元素将被读到偏移16的VAR中
  2. 原始的VAR将被转换为一个String VAR.指向这个String VAR的指针被写到偏移0
  3. 在偏移8,这个元素的index将被写入
  4. 取决于原始VAR的类型,0或1将被写入偏移40
看到临时缓存区的buffer,我们不能直接控制大部分.如果一个数组成员是一个字符串,那么在它偏移量为0和24时,我们将会有一个指针,当他被解引用的时候,我们将在偏移8处包含另一个指向我们控制数据的指针.然而,这是一个间接的在大多数情况下对我们有用的大层次
但是,如果数组的成员是双精度,则在偏移量24(对应原始VAR中的偏移量8)中,该数值将被写入,并直接在我们的控制之下.
如果我们使用与阶段1中获得指针相同的双重表示形式创建一个数字,那么可以使我们的溢出在缓存区结束后的某个地方使用指向我们直接控制的内存的指针来覆盖指针
现在问题变成了,我们可以使用这个方法改写这个漏洞,如果我们仔细研究一下对象如何在JScript中工作,那么答案可能就是其中一个
每个对象(具体的说,一个NameList的JScript对象)将有一个指向hash表的指针.这个hash表只是一个指针数组.当一个对象的成员元素被访问的时候,元素名称的hash被计算.然后取消对应于hash表最低位的偏移处指针.这个指针指向一个对象元素的链表,并且这个链表被遍历,直到我们到达一个与请求元素具有相同名字的元素.这将在Image4中显示
Image 4: JScript Object element internals
请注意,当元素名称少于4个字节时,它存储在与VAR(元素值)相同的结构中,否则将会有个指向元素名称的指针.名称长度<=4对于我们来说已经足够,所以我们不需要深入了解这个细节
一个对象的hash表是覆盖的很好的候选者,因为
  1. 我们能通过访问相应的成员对象来控制它的那些元素被解引用.我们用我们不控制的数据覆盖的元素将永远不会被访问
  2. 通过控制相应对象有多少个成员,我们对hash表的控制有限.例如,hash表以1024个字节开始,但如果我们向对象添加多于512个元素,hash表将被重新分配为8192个字节
  3. 通过用指向我们控制的数据的指针,覆盖hash表指针,我们可以在我们控制的数据中创建假的JScript变量,并通过访问相应对象成员来访问它们
要更可靠的覆盖,我们需要执行以下操作:
  1. 分配和释放大小为8192的大量内存块.这就将代开LFH以分配8192大小的堆.这将确保我们溢出的缓冲区,以及我们正在溢出的hash表被分配在LFH上.这一点很重要,因为这意味着附近不会有其他大小的分配来破坏漏洞攻击(因为LFH bucket只能包含特定大小的分配),这反过来将确保我们将高度可靠地完全覆盖我们想要的东西
  2. 创建2000个对象,每个对象包含512个成员.在这种状态下,每个对象都有一个1024字节的hash表,但是向其中一个对象添加一个元素将使其增长到8192个字节
  3. 添加第513个元素到前1000个对象中,这导致1000个8192-byte的hash表被分配
  4. 使用长度为300包含170个元素的数组触发Array.sort.这将分配一个(170 + 1)*48 = 8208bytes.由于LFH的规则,这个对象将被分配在与8192字节hash表相同的LFH bucket中.
  5. 立即在(第一个数组元素的toString()方法中)向第二个1000个对象添加第513个元素.这使得我们非常确定,现在排序缓冲区是相邻hash表之一.在相同的toString()方法中,还会向数组中添加更多的元素,这将使它超出边界.
Image5