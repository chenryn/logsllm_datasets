    1ee return result
分析到090观察到下面都是类似的代码结构，之后直接还原flag就可以了，只需要把比较的十六进制字符串按端序从后往前拼接起来得到  
`flag{E25BD838D2B62FE1B1579293CECDC5C7F349B0A4CA884B33}`
* * *
## Crypto
### fez
跟[tmctf一道题](https://ctftime.org/task/6634)类似,不过这个更加简单一点,直接表明了迭代了七次:  
解密见下:
    In [30]: test = "6c34525bcc8c004abbb2815031542849daeade4f774425a6a49e545188f670ce4667df9
        ...: db0b7ded2a25cdaa6e2a26f0d384d9699988f"
    In [31]: c1 = "8cf87cc3c55369255b1c0dd4384092026aea1e37899675de8cd3a097f00a14a772ff13524
        ...: 0fd03e77c9da02d7a2bc590fe797cfee990"
    In [32]: len(c1)
    Out[32]: 108
    In [33]: c2 = "ec42b9876a716393a8d1776b7e4be84511511ba579404f59956ce6fd12fc6cbfba909c6e5
        ...: a6ab3e746aec5d31dc62e480009317af1bb"
    In [34]: len(c2)
    Out[34]: 108
    In [35]: xor(xor(test[27:],c1[:27],c2[:27]))
    ---------------------------------------------------------------------------    TypeError                                 Traceback (most recent call last)
     in ()
    ----> 1 xor(xor(test[27:],c1[:27],c2[:27]))
    TypeError: xor() takes exactly 2 arguments (3 given)
    In [36]: xor(xor(test[27:],c1[:27]),c2[:27]))
      File "", line 1
        xor(xor(test[27:],c1[:27]),c2[:27]))
                                           ^
    SyntaxError: invalid syntax
    In [37]: xor(xor(test[27:],c1[:27]),c2[:27])
    ---------------------------------------------------------------------------    AssertionError                            Traceback (most recent call last)
     in ()
    ----> 1 xor(xor(test[27:],c1[:27]),c2[:27])
     in xor(a, b)
          1 def xor(a,b):
    ----> 2     assert len(a)==len(b)
          3     c=""
          4     for i in range(len(a)):
          5         c+=chr(ord(a[i])^ord(b[i]))
    AssertionError: 
    In [38]: test_1 = test.decode("hex")
    In [39]: c1_1 = c1.decode("hex")
    In [40]: c2_1 = c2.decode("hex")
    In [41]: xor(xor(test_1[27:],c1_1[:27]),c2_1[:27])
    Out[41]: "1234admin}\xcda\x94\xa9&\x9d\xddY\xa7\xfd\xfd\xeew\x11\x80'\xc9"
    In [42]: r = "1234admin}\xcda\x94\xa9&\x9d\xddY\xa7\xfd\xfd\xeew\x11\x80'\xc9"
    In [43]: xor(xor(xor(test_1[:27],c1_1[27:]),c2_1[27:]),r)
    Out[43]: '7\xe4\x97\x17\xb5 \x02\xac\xe9\xd5\xdb\x81\xa5\xc7=\xb1\xf9\xd4\x94YRT"\xfa\xa0\xa1\xb6'
    In [44]: xor(xor(xor(xor(test_1[:27],test_1[27:])),c1_1[27:]),c2_1[27:]),r)
      File "", line 1
        xor(xor(xor(xor(test_1[:27],test_1[27:])),c1_1[27:]),c2_1[27:]),r)
                                                                         ^
    SyntaxError: invalid syntax
    In [45]: xor(xor(xor(xor(test_1[:27],test_1[27:]),c1_1[27:]),c2_1[27:]),r)
    Out[45]: 'flag{festel_weak_666_lol999'
> flag :flag{festel_weak_666_lol9991234admin}
### wpa2
这一题刚刚没有提示的时候就解出来了,根据nc返回来的内容知道需要解密WPA2的数据包
    $ nc 117.78.26.200 31322
    Welcome to HuWang Bei WPA2 Simulation System.. Initilizing Parameters..
    SSID = HuWang
    PSK = srGxuFhA9PAc5NsX
    AP_MAC = 53:ED:30:6C:EF:56
    AP_Nonce = 5bbe3877d034b0fe502277797f21ec82e51ba75d9c7f45d60f87053dd2a920d5
    STA_MAC = 99:0B:04:36:5B:84
    STA_Nonce = 2ed66e19cc7c7bccb4fd8fb6831a80e85eaddedab4eeaa13f488815e632f3fb7
    CCMP Encrypted Packet = 88423a01990b04365b8453ed306cef5653ed306cef5660920000bfc2002021000000d5d9ce63cc5f9c722ccfd2cadacb5e645c31aaec0f067d7c741d0ea01d9d9f3f92cd3bcba49e391ccf
利用SSID,PSK,AP_MAC,STA_MAC,STA_Nonce,CCMP Encrypted Packet
等关键字,搜索WPA2的加密模式,懒得自己实现了,搜索到了[WPA2](https://github.com/REMath/80211_Cryptography),可以直接复用,修改后的脚本如下:
    from pwn import *
    from binascii import a2b_hex, b2a_hex, a2b_qp
    from pbkdf2 import PBKDF2
    import hmac
    from hashlib import sha1
    import struct
    from Crypto.Cipher import AES
    context.log_level ="debug"
    io = remote("117.78.26.200", 31322)
    data = io.recvuntil("CCMP Encrypted Packet = ")
    psk = data.split("PSK = ")[1].split("\r\n")[0]
    ap_mac = data.split("AP_MAC = ")[1].split("\r\n")[0].replace(":","")
    ap_nonce = data.split("AP_Nonce = ")[1].split("\r\n")[0]
    mac = data.split("STA_MAC = ")[1].split("\r\n")[0].replace(":","")
    mac_nonce = data.split("STA_Nonce = ")[1].split("\r\n")[0]
    ccmp = io.recv(150)
    def PRF512(key,A,B):
        blen = 64
        R    = ''
        for i in range(0,4):
            hmacsha1 = hmac.new(key,A+B+chr(i),sha1)
            R = R+hmacsha1.digest()
        return R[:blen]
    def frame_type(packet):
        header_two_bytes = struct.unpack("h", (packet[0:2]))[0]
        fc_type = bin(header_two_bytes)[-8:][4:6]
        if fc_type == "10":
            return "data"
        else:
            return None
    def compute_pairwise_master_key(preshared_key, ssid):
        return PBKDF2(preshared_key, ssid, 4096).read(32)
    def compute_message_integrity_check(pairwise_transient_key,data):
        return hmac.new(pairwise_transient_key[0:16],data,sha1).digest()[0:16]
    def compute_pairwise_transient_key(pairwise_master_key, A, B):
        return PRF512(pairwise_master_key, A, B)
    ssid = "HuWang"
    preshared_key = psk
    # From message 2 in handshake QoS data for 802.11, packet 95 in example pcap
    message_2_data = ccmp
    message_2_data = a2b_hex(message_2_data)
    message_intgrity_code = message_2_data[115:131]
    data = message_2_data[34:115] + "\x00"*16 + message_2_data[131:]
    # authenticator nonce found in message 1 of handshake, packet 93 in example
    a_nonce  = a2b_hex(ap_nonce)
    # supplicant nonce found in message 2 of handshake, packet 95 in example
    s_nonce  = a2b_hex(mac_nonce)
    mac_access_point = a2b_hex(ap_mac)
    mac_client   = a2b_hex(mac)
    A = "Pairwise key expansion" + '\x00'
    B = min(mac_access_point,mac_client)+max(mac_access_point,mac_client)+min(a_nonce,s_nonce)+max(a_nonce,s_nonce)
    pairwise_master_key = compute_pairwise_master_key(preshared_key, ssid)
    pairwise_transient_key = compute_pairwise_transient_key(pairwise_master_key, A, B)
    mic = compute_message_integrity_check(pairwise_transient_key,data)
    key_confirmation_key = pairwise_transient_key[0:16]
    key_encryption_key = pairwise_transient_key[16:16*2]
    temporal_key = pairwise_transient_key[16 * 2:(16 * 2) + 16]
    mic_authenticator_tx = pairwise_transient_key[16 * 3:(16 * 3) + 8]
    mic_authenticator_rx =  pairwise_transient_key[(16 * 3) + 8:(16 * 3) + 8 + 8]
    packet_103_encrypted_total_packet = ccmp
    packet_103_encrypted_total_packet = a2b_hex(packet_103_encrypted_total_packet)
    packet_103_encrypted_data = packet_103_encrypted_total_packet[34:34+84]
    ccmp_header = packet_103_encrypted_total_packet[26:26 + 8]
    ieee80211_header = packet_103_encrypted_total_packet[0:26]
    source_address = packet_103_encrypted_total_packet[10:16]
    PN5 = ccmp_header[7]
    PN4 =  ccmp_header[6]
    PN3 =  ccmp_header[5]
    PN2 =  ccmp_header[4]
    PN1 =  ccmp_header[1]
    PN0 =  ccmp_header[0]
    last_part_of_nonce = PN5 + PN4 + PN3 + PN2 + PN1 + PN0
    flag = a2b_hex('01')
    qos_priorty = a2b_hex('00')
    nonce_ = qos_priorty + source_address + last_part_of_nonce
    IV = flag + nonce_
    class WPA2Counter(object):
      def __init__(self, secret):
        self.secret = secret
        self.current = 1
      def counter(self):
        count = a2b_hex(struct.pack('>h', self.current).encode('hex'))
        i = self.secret + count
        self.current += 1
        return i
    counter = WPA2Counter(IV)
    crypto = AES.new(temporal_key, AES.MODE_CTR, counter=counter.counter)
    test = packet_103_encrypted_data[0:-8]
    fuck = crypto.decrypt(test)
    # io.recvuntil("Input decrypted challenge value in Packet:")
    io.send(fuck.split("Challenge Vlaue: ")[1]+"\n")
    io.recv()
    io.recv()
    io.recv()
    io.recv()
得到的是16byte随机的challenge
value,怎么提交都不返回flag,整了两个多小时,觉得应该是题目问题,最后联系主办方,修复题目后,拿到flag:
> flag: flag{6ae7ecdd73a5d4fa1d34f5f7b447ca58}
    [DEBUG] Received 0x4b bytes:
        'Welcome to HuWang Bei WPA2 Simulation System.. Initilizing Parameters..\r\n'
        '\r\n'
    [DEBUG] Received 0x1b9 bytes:
        'SSID = HuWang\r\n'
        '\r\n'
        'PSK = rnrVFt9s3x5wbhIc\r\n'
        '\r\n'
        'AP_MAC = 14:53:B9:00:71:17\r\n'
        '\r\n'
        'AP_Nonce = 55edce0680f5091de0a90d0195b66114649cdd673b2e25c3cf835cb6aa202c7e\r\n'
        '\r\n'
        'STA_MAC = 55:54:D4:F1:AA:6E\r\n'
        '\r\n'
        'STA_Nonce = e3f2488f0ad4a80ada5e485a865f57bbcbb8c548490ba03dbfdc4f09f88ebd71\r\n'
        '\r\n'
        'CCMP Encrypted Packet = 88423a015554d4f1aa6e1453b90071171453b900711760920000c1070020520000009e09ba503e99856c151d9d1a2bb1f5cc245ac85e18aebcaac2231e4c3a5641817e822df1776c89b25f\r\n'
        '\r\n'
    [DEBUG] Sent 0x11 bytes:
        'r1TwjR4pgAB7ihOa\n'
    [DEBUG] Received 0x4a bytes:
        '\r\n'
        'Congratulations!Your flag is: flag{6ae7ecdd73a5d4fa1d34f5f7b447ca58}\r\n'
* * *
## MISC
### 迟来的签到题
base64解密后单字节xor,爆破256位即可拿到flag