http://www.oilcan.org/oscar/.
[8] Wireshark, Network Protocol Analyzer.
http://www.wireshark.org.
[9] M. A. Beddoe. Network Protocol Analysis Using
Bioinformatics Algorithms.
http://www.baselineresearch.net/PI/.
[10] N. Borisov, D. J. Brumley, H. J. Wang, and C. Guo.
Generic Application-Level Protocol Analyzer and Its
Language. Network and Distributed System Security
Symposium, San Diego, CA, February 2007.
[11] D. Brumley, J. Caballero, Z. Liang, J. Newsome, and
D. Song. Towards Automatic Discovery of Deviations
in Binary Implementations with Applications to Error
Detection and Fingerprint Generation. USENIX
Security Symposium, Boston, MA, August 2007.
[12] J. Caballero, S. Venkataraman, P. Poosankam, M. G.
Kang, D. Song, and A. Blum. FiG: Automatic
Fingerprint Generation. Network and Distributed
System Security Symposium, San Diego, CA, February
2007.
[13] J. Chow, B. Pfaﬀ, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding Data Lifetime Via
Whole System Simulation. USENIX Security
Symposium, San Diego, CA, August 2004.
[14] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L.
Zhou, L. Zhang, and P. Barham. Vigilante:
End-to-End Containment of Internet Worms.
Symposium on Operating Systems Principles,
Brighton, United Kingdom, October 2005.
[15] J. R. Crandall, S. F. Wu, and F. T. Chong. Minos:
Architectural Support for Protecting Control Data.
ACM Transactions on Architecture and Code
Optimization, December 2006.
[16] D. Crocker and P. Overell. Augmented BNF for
Syntax Speciﬁcations: ABNF. RFC 4234 (Draft
Standard), 4234, October 2005.
[17] W. Cui, J. Kannan, and H. J. Wang. Discoverer:
Automatic Protocol Description Generation from
Network Traces. USENIX Security Symposium,
Boston, MA, August 2007.
[18] W. Cui, V. Paxson, N. C. Weaver, and R. H. Katz.
Protocol-Independent Adaptive Replay of Application
Dialog. Network and Distributed System Security
Symposium, San Diego, CA, February 2006.
[19] H. Dreger, A. Feldmann, M. Mai, V. Paxson, and R.
Sommer. Dynamic Application-Layer Protocol
Analysis for Network Intrusion Detection. USENIX
Security Symposium, Vancouver, Canada, July 2006.
[20] C. D. Grosso, G. Antoniol, M. D. Penta, P. Galinier,
and E. Merlo. Improving Network Applications
Security: A New Heuristic to Generate Stress Testing
Data. Genetic and Evolutionary Computation
Conference, June 2005.
[21] P. Haﬀner, S. Sen, O. Spatscheck, and D. Wang.
ACAS: Automated Construction of Application
Signatures. ACM SIGCOMM, Workshop on Mining
network data, Philadelphia, PA, October 2005.
[22] J. Kannan, J. Jung, V. Paxson, and C. E. Koksal.
Semi-Automated Discovery of Application Session
Structure. Internet Measurement Conference, Rio de
Janeiro, Brazil, October 2006.
[23] C. Leita, K. Mermoud, and M. Dacier. ScriptGen: An
Automated Script Generation Tool for Honeyd.
Annual Computer Security Applications Conference,
Tucson, AZ, December 2005.
[24] J. Lim, T. Reps, and B. Liblit. Extracting Output
Formats from Executables. Working Conference on
Reverse Engineering, Benevento, Italy, October 2006.
[25] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and
G. M. Voelker. Unexpected Means of Protocol
Inference. Internet Measurement Conference, Rio de
Janeiro, Brazil, October 2006.
[26] P. McMinn, M. Harman, D. Binkley, and P. Tonella.
The Species Per Path Approach to SearchBased Test
Data Generation. International Symposium on
Software Testing and Analysis, July 2006.
[27] P. V. Mockapetris. Domain Names - Implementation
and Speciﬁcation. RFC 1035 (Standard), IETF
Request for Comments 1035, November 1987.
[28] J. Newsome and D. Song. Dynamic Taint Analysis for
Automatic Detection, Analysis, and Signature
Generation of Exploits on Commodity Software.
Network and Distributed System Security Symposium,
San Diego, CA, February 2005.
[29] J. Newsome, D. Brumley, and D. Song.
Vulnerability-Speciﬁc Execution Filtering for Exploit
Prevention on Commodity Software. Network and
Distributed System Security Symposium, San Diego,
CA, February 2006.
[30] J. Newsome, D. Brumley, J. Franklin, and D. Song.
Replayer: Automatic Protocol Replay By Binary
Analysis. ACM Conference on Computer and
Communications Security, Alexandria, VA, October
2006.
[31] P. Oehlert. Violating Assumptions with Fuzzing.
IEEE Security and Privacy, 3(2), March 2005.
[32] R. Pang, M. Allman, M. Bennett, J. Lee, V. Paxson,
and B. Tierney. A First Look At Modern Enterprise
Traﬃc. Internet Measurement Conference, Berkeley,
CA, October 2005.
[33] R. Pang, V. Paxson, R. Sommer, and L. Peterson.
Binpac: A Yacc for Writing Application Protocol
Parsers. Internet Measurement Conference, Rio de
Janeiro, Brazil, October 2006.
[34] G. Portokalidis, A. Slowinska, and H. Bos. Argos: An
Emulator for Fingerprinting Zero-Day Attacks for
Advertised Honeypots with Automatic Signature
Generation. ACM SIGOPS Operating Systems Review,
40(4), October 2006.
[35] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas.
Secure Program Execution Via Dynamic Information
Flow Tracking. International Conference on
Architectural Support for Programming Languages and
Operating Systems, Boston, MA, October 2004.
[36] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C.
Kruegel, and G. Vigna. Cross-Site Scripting
Prevention with Dynamic Data Tainting and Static
Analysis. Network and Distributed System Security
Symposium, San Diego, CA, February 2007.
[37] H. Yin, D. Song, E. Manuel, C. Kruegel, and E.
Kirda. Panorama: Capturing System-Wide
Information Flow for Malware Detection and Analysis.
ACM Conference on Computer and Communications
Security, Alexandria, VA, October 2007.
APPENDIX
A. MONITORING THE EXECUTION
We implement the execution monitor using an emula-
tor [5]. Executing a program inside an emulator allows us to
monitor the internal execution of the program and the in-
put/output operations it performs. The emulator has been
enhanced to support dynamic taint analysis [13, 14, 15, 28,
34, 35]. In dynamic taint analyisis, input data that is consid-
ered important is marked (i.e., tainted) when it is received
and any instruction that operates on some of the tainted
data (e.g., moving it to another location or performing an
arithmetic or logical operation), propagates the taint infor-
mation to the destination operand.
For our purposes, we taint any information received by the
program from the network. Speciﬁcally, each input byte is
assigned a taint record that contains a ﬂag to indicate that it
came from the network, some connection identiﬁer, and the
position of that byte in the application data. Each location,
including memory, register and disk is assigned a shadow
memory, which is used to store the taint records of the input
bytes that the data in that location was generated from. As
the program moves the input tainted data to new locations,
and performs operations on it, the shadow memory for the
destination location is updated with the taint records of the
input bytes it was generated from. This taint propagation
includes all instructions performed by the program or any
library that the program uses, including system libraries and
dynamically loaded libraries such as dll’s.
In addition to the taint data, the emulator also collects
information about each instruction, including the content of
the operands at the time the instruction is executed. This
data is written into the execution trace, which contains all
instructions executed by the program, the data they oper-
ated on, and the associated taint information.
B. ADDITIONAL RESULTS
B.1
ICQ Login
Wireshark 0.99.5(cid:13)
Tiny ICQ  1.2(cid:13)
New(cid:13)
Connection(cid:13)
Close(cid:13)
Connection(cid:13)
0(cid:13)
1(cid:13)
2(cid:13)
4(cid:13)
6(cid:13)
0(cid:13)
1(cid:13)
2(cid:13)
4(cid:13)
6(cid:13)
8(cid:13)
10(cid:13)
16(cid:13)
18(cid:13)
20(cid:13)
83(cid:13)
85(cid:13)
87(cid:13)
Command Start: Fixed(cid:13)
Channel ID: Fixed(cid:13)
Sequence Number: Fixed(cid:13)
Data Field Length: Length(cid:13)
Protocol Version: Variable [4](cid:13)
Command Start: Fixed(cid:13)
Channel ID: Fixed(cid:13)
Sequence Number: Fixed(cid:13)
Data Field Length: Length(cid:13)
Value ID: Fixed(cid:13)
Field length: Length(cid:13)
Field data: Variable [6](cid:13)
Value ID: Fixed(cid:13)
Field length: Length(cid:13)
Field data: Variable [63](cid:13)
Value ID: Fixed(cid:13)
Field length: Length(cid:13)
Field data: Variable [2](cid:13)
Unused(cid:13)
Fixed(cid:13)
Unused(cid:13)
Unused(cid:13)
Fixed(cid:13)
Unused(cid:13)
Direction(cid:13)
Variable [8](cid:13)
Direction(cid:13)
Variable [65](cid:13)
Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Figure 7: Message format extracted from an ICQ
login session compared to the one from Wireshark.
B.2 DNS Query with Pointer
B.3
IRC keywords
Tables 6 and 7 show the results from the keyword extrac-
tion module for an IRC login request. Note that the PONG
keyword was not present in the JoinMe trace, because it is
a reply to a PING request that is only sent based on the
server’s conﬁguration.
Keyword Beware
NICK
USER
PONG
Yes
Yes
Yes
JoinMe Unreal
Yes
Yes
N/A
Yes
Yes
Yes
Table 6: Keywords present in a IRC login request
and whether they were properly extracted by our
system.
Wireshark 0.99.5(cid:13)
SimpleDNS 4.00.06(cid:13)
Header(cid:13)
Query(cid:13)
Name(cid:13)
0(cid:13)
2(cid:13)
4(cid:13)
6(cid:13)
8(cid:13)
10(cid:13)
12(cid:13)
13(cid:13)
16(cid:13)
18(cid:13)
20(cid:13)
22(cid:13)
23(cid:13)
30(cid:13)
31(cid:13)
34(cid:13)
35(cid:13)
37(cid:13)
Identification: Fixed(cid:13)
Flags: Fixed(cid:13)
Total Questions: Fixed(cid:13)
Total Answers: Fixed(cid:13)
Total Authority: Fixed(cid:13)
Total Additional: Fixed(cid:13)
Label length: Fixed(cid:13)
Label: Variable [3](cid:13)
“www”(cid:13)
Label pointer: Fixed(cid:13)
Type: Fixed(cid:13)
Class: Fixed(cid:13)
Label length: Fixed(cid:13)
Label: Variable [7](cid:13)
“example”(cid:13)
Label length: Fixed(cid:13)
Label: Variable [3](cid:13)
“net”(cid:13)
0(cid:13)
Type: Fixed(cid:13)
Class: Fixed(cid:13)
Fixed(cid:13)
Fixed(cid:13)
Unused(cid:13)
Fixed(cid:13)
Unused(cid:13)
Direction(cid:13)
Variable(cid:13)
Direction(cid:13)
Variable(cid:13)
Direction(cid:13)
Variable(cid:13)
Direction(cid:13)
Variable(cid:13)
Fixed(cid:13)
Unused(cid:13)
Figure 8: Message format extracted from an DNS
query containing a pointer ﬁeld. This type of query
is only supported by the SimpleDNS server.
Server Additional keywords found
Beware
JoinMe
Unreal
’:’ (1); ’:1301071548’ (1)
’ ’ (2); ’ :’ (1)
’e’ (1); ’:’ (1); ’:A’ (1);
’PROTOCTL’ (1); ’NAMESX’ (1)
Table 7: Additional keywords found in the IRC login
request.