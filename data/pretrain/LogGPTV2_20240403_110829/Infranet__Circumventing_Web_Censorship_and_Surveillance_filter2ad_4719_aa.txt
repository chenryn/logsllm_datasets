# Infranet: Circumventing Web Censorship and Surveillance

**Authors:** Nick Feamster, Magdalena Balazinska, Greg Harfst, Hari Balakrishnan, David R. Karger  
**Affiliation:** MIT Laboratory for Computer Science  
**Contact:** [feamster, mbalazin, gch, hari, PI:EMAIL](mailto:feamster, mbalazin, gch, hari, PI:EMAIL)  
**Project Website:** [http://nms.lcs.mit.edu/projects/infranet](http://nms.lcs.mit.edu/projects/infranet)

**Proceedings of the 11th USENIX Security Symposium**  
**Location:** San Francisco, California, USA  
**Date:** August 5-9, 2002  
**Publisher:** The USENIX Association  
**Copyright:** © 2002 by The USENIX Association  
**Phone:** 1-510-528-8649  
**FAX:** 1-510-548-5738  
**Email:** [PI:EMAIL](mailto:PI:EMAIL)  
**Website:** [http://www.usenix.org](http://www.usenix.org)  
**Rights:** All rights reserved. Individual paper rights remain with the author or the author's employer. Noncommercial reproduction for educational or research purposes is permitted, provided this copyright notice is included.

---

## Abstract

An increasing number of countries and companies routinely block or monitor access to parts of the Internet. To counteract these measures, we propose Infranet, a system that enables clients to surreptitiously retrieve sensitive content via cooperating Web servers distributed across the global Internet. These Infranet servers provide clients access to censored sites while continuing to host normal, uncensored content. Infranet uses a tunnel protocol that provides a covert communication channel between its clients and servers, modulated over standard HTTP transactions that resemble innocuous Web browsing. In the upstream direction, Infranet clients send covert messages to Infranet servers by associating meaning to the sequence of HTTP requests. In the downstream direction, Infranet servers return content by hiding censored data in uncensored images using steganographic techniques. We describe the design, prototype implementation, security properties, and performance of Infranet. Our security analysis shows that Infranet can successfully circumvent several sophisticated censoring techniques.

---

## 1. Introduction

The World Wide Web is a key facilitator of free speech, enabling many people to voice their views and access information that traditional publishing venues may be reluctant to publish. However, over the past few years, many countries, political regimes, and corporations have attempted to monitor and restrict access to portions of the Web by clients who use networks they control. Many of these attempts have been successful, severely compromising the Web's role as a free-flowing medium for information exchange.

Several countries filter Internet content at their borders, fearful of alternative political views or external influences. For example, China forbids access to many news sites critical of its domestic policies. Saudi Arabia is currently soliciting content filter vendors to block access to sites deemed inappropriate for political or religious reasons. Germany censors all Nazi-related material, and Australia's laws ban pornography. Additionally, Internet censorship often crosses political boundaries. For instance, the U.S. Supreme Court recently rejected France’s request to censor Nazi-related material on Yahoo’s site. Censorship and surveillance also extend into the corporate sector, with many companies in the U.S. blocking access to non-business-related sites and monitoring employees' web surfing habits.

This paper focuses on the technical challenges of circumventing Web censorship, largely ignoring related political, legal, and policy issues. Specifically, we investigate how to leverage Web communication with accessible servers to surreptitiously retrieve censored content while maintaining plausible deniability. To this end, we develop a covert communication tunnel that securely hides the exchange of censored content in normal, innocuous Web transactions.

Our system, called Infranet, consists of requesters and responders communicating over this covert tunnel. A requester, running on a user’s computer, first uses the tunnel to request censored content. Upon receiving the request, the responder, a standard public Web server running Infranet software, retrieves the sought content from the Web and returns it to the requester via the tunnel. The covert tunnel protocol between an Infranet requester and responder must be difficult to detect and block. More specifically, a censor should not be able to detect that a Web server is an Infranet responder or that a client is an Infranet requester. Nothing in their HTTP transactions should arouse suspicion.

The Infranet tunnel protocol uses novel techniques for covert upstream communication. It modulates covert messages on standard HTTP requests for uncensored content using a confidentially negotiated function that maps URLs to message fragments. For downstream communication, the tunnel protocol leverages existing data hiding techniques, such as steganography. While steganography provides little defense against certain attacks, we are confident that the ideas we present can be used in conjunction with other data hiding techniques.

The main challenge in the design of the tunnel protocol is ensuring covertness while providing a level of performance suitable for interactive browsing. Furthermore, the tunnel protocol must defend against a censor capable of passive attacks based on logging all transactions and packets, active attacks that modify messages or transactions, and impersonation attacks where the adversary pretends to be a legitimate Infranet requester or responder. Our security analysis indicates that Infranet can successfully circumvent several sophisticated censoring techniques, including various active and passive attacks. Our system handles almost all of these threats while achieving reasonable performance. This is achieved by taking advantage of the asymmetric bandwidth requirements of Web transactions, which require significantly less upstream bandwidth than downstream bandwidth.

To assess the feasibility of our design, we implemented an Infranet prototype and conducted a series of tests using client-side Web traces to evaluate the performance of our system. Our experimental evaluation shows that Infranet provides acceptable bandwidth for covert Web browsing. Our range-mapping algorithm for upstream communication allows a requester to innocuously transmit a hidden request in a number of visible HTTP requests proportional to the binary entropy of the hidden request distribution. For two typical Web sites running Infranet responders, we find that a requester using range-mapping can modulate 50% of all requests for hidden content in 6 visible HTTP requests or fewer and 90% of all hidden requests in 10 visible HTTP requests or fewer. Using typical Web images, our implementation of downstream hiding transmits approximately 1 kB of hidden data per visible HTTP response.

---

## 2. Related Work

Many existing systems seek to circumvent censorship and surveillance of Internet traffic. Anonymizer.com provides anonymous Web sessions by requiring users to make Web requests through a proxy that anonymizes user-specific information, such as the user’s IP address. The company also provides a product that encrypts HTTP requests to protect user privacy; Zero Knowledge provides a similar product. Squid is a caching Web proxy that can be used as an anonymizing proxy. The primary shortcoming of these schemes is that a well-known proxy is subject to being blocked by a censor. Additionally, the use of an encrypted tunnel between a user and the anonymizing proxy (e.g., port forwarding over SSH) engenders suspicion.

Because censoring organizations are actively discovering and blocking anonymizing proxies, SafeWeb has proposed a product called Triangle Boy, a peer-to-peer application that volunteers run on their personal machines and forward clients’ Web requests to SafeWeb’s anonymizing proxy. SafeWeb recently formed an alliance with the Voice of America, whose mission is to enable Chinese Internet users to gain access to censored sites. However, Triangle Boy has several drawbacks. First, the encrypted connection to a machine running Triangle Boy is suspicious and can be trivially blocked since SSL handshaking is unencrypted. Second, SafeWeb’s dependence on an encrypted channel for confidentiality makes it susceptible to traffic analysis, as Web site fingerprinting can expose the sites that a user requests, even if the request itself is encrypted. Third, SafeWeb is vulnerable to several attacks that allow an adversary to discover the identity of a SafeWeb user and every Web site visited by that user.

Peekabooty also attempts to circumvent censoring firewalls by sending SSL-encrypted requests for censored content to a third party, but its reliance on SSL also makes it susceptible to traffic analysis and blocking attacks.

Various systems have attempted to protect anonymity for users who publish and retrieve censored content. In Crowds, users join a large, geographically diverse group whose members cooperate in issuing requests, making it difficult to associate requests with the originating user. Onion routing also separates requests from the users who make them. Publius, Tangler, and Free Haven focus on protecting the anonymity of publishers of censored content and the content itself. Freenet provides anonymous content storage and retrieval.

Infranet aims to overcome censorship and surveillance while providing plausible deniability for users. In addition to establishing a secure channel between users and Infranet responders, our system creates a covert channel within HTTP, i.e., a communication channel that transmits information in a manner not envisioned by the original design of HTTP. In contrast with techniques that attempt to overcome censorship using a confidential channel (e.g., using SSL, which is trivial to detect and block), our approach is significantly harder to detect or block. To be effective against blocking, a scheme for circumventing censorship must be covert as well as secure.

---

## 3. System Architecture

### 3.1 Terminology

Figure 1 shows the system architecture of Infranet and introduces relevant terminology. Users surf Web content as usual via a Web browser. To retrieve censored content, the browser uses a software entity that runs on the same host, called the Infranet requester, as its local proxy. The Infranet requester knows about one or more Infranet responders, which are Web servers in the global Internet that implement additional Infranet functionality. The idea is for the Web browser to request censored content via the Infranet requester, which in turn sends a message to an Infranet responder. The responder retrieves this content from the appropriate origin Web server and returns it to the requester, which delivers the requested content to the browser.

The requester and responder communicate with each other using a covert tunnel. Technically, Infranet involves three distinct functions—issuing a hidden request, decoding the hidden request, and serving the requested content. We first describe a system whereby the responder performs the latter two functions. We describe a design enhancement in Section 8 whereby an untrusted forwarder can forward hidden requests and serve hidden content, thereby making it more difficult for a censor to block access to the system.

The censor shown in Figure 1 might have a wide range of capabilities. At a minimum, the censor can block specific IP addresses (e.g., of censored sites and suspected Infranet responders). More broadly, the censor might have the capability to analyze logs of all observed Web traffic or even to modify the traffic itself.

The long-term success of Infranet depends on the widespread deployment of Infranet responders in the Internet. One way of achieving this might be to bundle responder software with standard Web server software (e.g., Apache). Hopefully, a significant number of people will run Infranet responders due to altruism or because they believe in free speech.

### 3.2 Design Goals

We designed Infranet to meet a number of goals, ordered by priority:

1. **Deniability for any Infranet requester:** It should be computationally intractable to confirm that any individual is intentionally downloading information via Infranet, or to determine what that information might be.
2. **Statistical deniability for the requester:** Even if it is impossible to confirm that a client is using Infranet, an adversary might notice statistical anomalies in browsing patterns that suggest a client is using Infranet. Ideally, an Infranet user’s browsing patterns should be statistically indistinguishable from those of normal Web users.
3. **Responder covertness:** Since an adversary will likely block all known Infranet responders, it must be difficult to detect that a Web server is running Infranet simply by watching its behavior. Of course, any requester using the server will know that the server is an Infranet responder; however, this knowledge should only arise from possession of a secret that remains unavailable to the censor. If the censor chooses not to block access to the responder but rather to watch clients connecting to it for suspicious activities, deniability should not be compromised. The responder must assume that all clients are Infranet requesters. This ensures that Infranet requesters cannot be distinguished from innocent users based on the responder’s behavior.
4. **Communication robustness:** The Infranet channel should be robust in the presence of censorship activities designed to interfere with Infranet communication. Note that it is impossible to be infinitely robust, because a censor who blocks all Internet access will successfully prevent Infranet communication. Thus, we assume the censor permits some communication with non-censored sites. Any technique that prevents a site from being used as an Infranet responder should make that site fundamentally unusable by non-Infranet clients. For example, using SSL as our Infranet channel provides full requester and responder deniability and covertness (since many Web servers run SSL for innocent reasons), but it is quite plausible for a censor to block all SSL access to the Internet, as vast amounts of information remain accessible through non-encrypted connections. Thus, a censor can block SSL-Infranet without completely restricting Internet access. In a similar vein, if the censor has concluded that a particular site is an Infranet responder, we should ensure that their only option for blocking Infranet access is to block all access to the suspected site. Hopefully, this will make the censor more reluctant to block sites, allowing more Infranet responders to remain accessible.
5. **Performance:** We seek to maximize the performance of Infranet communication, subject to our other objectives.

### 3.3 Overview

A requester must be able to both join and use Infranet without arousing suspicion. To join Infranet, a user must obtain the Infranet requester software, plus the IP address and public key of at least one Infranet responder. Users must be able to obtain Infranet requester software without revealing that they are doing so. Information about Infranet responders must be available to legitimate users but should not fall into the hands of an adversary who could then configure a simple IP-based filtering proxy. One way to distribute software is out-of-band via a CD-ROM or floppy disk. Users can share copies of the software and learn about Infranet responders directly from one another.

The design and implementation of a good tunnel protocol between an Infranet requester and responder is the critical determinant of Infranet’s viability. The rest of this section gives an overview of the protocol, and Section 4 describes the protocol in detail.

We define the tunnel protocol between the requester and responder in terms of three abstraction layers:

1. **Message Exchange:** This layer specifies high-level notions of information that the requester and responder communicate to each other.
2. **Symbol Construction:** This layer specifies the underlying alphabets for both directions of communication. The primary design constraint is covertness.
3. **Modulation:** This layer specifies the mapping between symbols in the alphabet and message fragments. The main design goal is reasonable communication bandwidth without compromising covertness.

![Top-most layer of abstraction in communication](figure2.png)

---

This optimized version of the text improves clarity, coherence, and professionalism, making it easier to read and understand.