title:Infranet: Circumventing Web Censorship and Surveillance
author:Nick Feamster and
Magdalena Balazinska and
Greg Harfst and
Hari Balakrishnan and
David R. Karger
USENIX Association
Proceedings of the
11th USENIX Security
Symposium
San Francisco, California, USA
August 5-9, 2002
© 2002 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Infranet: Circumventing Web Censorship and Surveillance
Nick Feamster, Magdalena Balazinska, Greg Harfst, Hari Balakrishnan, David Karger
MIT Laboratory for Computer Science
ffeamster, mbalazin, gch, hari, PI:EMAIL
http://nms.lcs.mit.edu/projects/infranet
Abstract
An increasing number of countries and companies rou-
tinely block or monitor access to parts of the Internet.
To counteract these measures, we propose Infranet, a sys-
tem that enables clients to surreptitiously retrieve sensitive
content via cooperating Web servers distributed across the
global Internet. These Infranet servers provide clients ac-
cess to censored sites while continuing to host normal un-
censored content. Infranet uses a tunnel protocol that pro-
vides a covert communication channel between its clients
and servers, modulated over standard HTTP transactions
that resemble innocuous Web browsing.
In the upstream
direction, Infranet clients send covert messages to Infranet
servers by associating meaning to the sequence of HTTP
requests being made. In the downstream direction, Infranet
servers return content by hiding censored data in uncen-
sored images using steganographic techniques. We describe
the design, a prototype implementation, security properties,
and performance of Infranet. Our security analysis shows
that Infranet can successfully circumvent several sophisti-
cated censoring techniques.
1 Introduction
The World Wide Web is a prime facilitator of free
speech; many people rely on it to voice their views and to
gain access to information that traditional publishing venues
may be loath to publish. However, over the past few years,
many countries, political regimes, and corporations have at-
tempted to monitor and often restrict access to portions of
the Web by clients who use networks they control. Many of
these attempts have been successful, and the use of the Web
as a free-ﬂowing medium for information exchange is being
severely compromised.
Several countries ﬁlter Internet content at their borders,
fearful of alternate political views or external inﬂuences.
For example, China forbids access to many news sites that
have been critical of the country’s domestic policies. Saudi
Arabia is currently soliciting content ﬁlter vendors to help
block access to sites that the government deems inappro-
priate for political or religious reasons [10]. Germany cen-
sors all Nazi-related material. Australia’s laws ban pornog-
raphy.
In addition, Internet censorship repeatedly threat-
ens to cross political boundaries. For example, the U.S.
Supreme Court recently rejected France’s request to censor
Nazi-related material on Yahoo’s site [12]. Censorship and
surveillance also extend into free enterprise, with several
companies in the U.S. reportedly blocking access to sites
that are not related to conducting business. In addition to
blocking sites, many companies routinely monitor their em-
ployees’ Web surﬁng habits.
This paper focuses on the challenging technical prob-
lems of circumventing Web censorship and largely ignores
the many related political, legal, and policy issues. In par-
ticular, we investigate how to leverage Web communication
with accessible servers in order to surreptitiously retrieve
censored content, while simultaneously maintaining plausi-
ble deniability against receiving that content. To this end,
we develop a covert communication tunnel that securely
hides the exchange of censored content in normal, innocu-
ous Web transactions.
Our system, called Infranet, consists of requesters and
responders communicating over this covert tunnel. A re-
quester, running on a user’s computer, ﬁrst uses the tunnel
to request censored content. Upon receiving the request, the
responder, a standard public Web server running Infranet
software, retrieves the sought content from the Web and re-
turns it to the requester via the tunnel.1
The covert tunnel protocol between an Infranet requester
and responder must be difﬁcult to detect and block. More
speciﬁcally, a censor should not be able to detect that a
Web server is an Infranet responder or that a client is an In-
1We use the terms “requester” and “responder” rather than the more
traditional “client” and “server” to avoid confusion with Web clients
(“browsers”) and Web servers. We also considered a number of terms
like “proxy”, “gateway”, “front-end”, etc., but rejected them for similar
reasons.
franet requester. Nothing in their HTTP transactions ought
to arouse suspicion.
The Infranet tunnel protocol uses novel techniques for
covert upstream communication. It modulates covert mes-
sages on standard HTTP requests for uncensored con-
tent using a conﬁdentially negotiated function which maps
URLs to message fragments that compose requests for cen-
sored content. For downstream communication, the tunnel
protocol leverages existing data hiding techniques, such as
steganography. While steganography provides little defense
against certain attacks, we are conﬁdent that the ideas we
present can be used in conjunction with other data hiding
techniques.
The main challenge in the design of the tunnel protocol is
ensuring covertness while providing a level of performance
suitable for interactive browsing. Furthermore, the tunnel
protocol must defend against a censor capable of passive at-
tacks based on logging all transactions and packets, active
attacks that modify messages or transactions, and imper-
sonation attacks where the adversary pretends to be a legit-
imate Infranet requester or responder. Our security analy-
sis indicates that Infranet can successfully circumvent sev-
eral sophisticated censoring techniques, including various
active and passive attacks. Our system handles almost all of
these threats while achieving reasonable performance. This
is achieved by taking advantage of the asymmetric band-
width requirements of Web transactions, which require sig-
niﬁcantly less upstream bandwidth than downstream band-
width.
To assess the feasibility of our design, we implemented
an Infranet prototype and conducted a series of tests using
client-side Web traces to evaluate the performance of our
system. Our experimental evaluation shows that Infranet
provides acceptable bandwidth for covert Web browsing.
Our range-mapping algorithm for upstream communication
allows a requester to innocuously transmit a hidden request
in a number of visible HTTP requests that is proportional
to the binary entropy of the hidden request distribution. For
two typical Web sites running Infranet responders, we ﬁnd
that a requester using range-mapping can modulate 50% of
all requests for hidden content in 6 visible HTTP requests or
fewer and 90% of all hidden requests in 10 visible HTTP re-
quests or fewer. Using typical Web images, our implemen-
tation of downstream hiding transmits approximately 1 kB
of hidden data per visible HTTP response.
2 Related Work
Many existing systems seek to circumvent censorship
and surveillance of Internet trafﬁc. Anonymizer.com
provides anonymous Web sessions by requiring users to
make Web requests through a proxy that anonymizes user-
speciﬁc information, such as the user’s IP address [2]. The
company also provides a product that encrypts HTTP re-
quests to protect user privacy; Zero Knowledge provides a
similar product [24]. Squid is a caching Web proxy that
can be used as an anonymizing proxy [21]. The primary
shortcoming of these schemes is that a well-known proxy is
subject to being blocked by a censor. Additionally, the use
of an encrypted tunnel between a user and the anonymizing
proxy (e.g., port forwarding over ssh) engenders suspicion.
Because censoring organizations are actively discover-
ing and blocking anonymizing proxies, SafeWeb has pro-
posed a product called Triangle Boy, a peer-to-peer appli-
cation that volunteers run on their personal machines and
that forwards clients’ Web requests to SafeWeb’s anonymiz-
ing proxy [19, 27]. SafeWeb recently formed an alliance
with the Voice of America [28], whose mission is to en-
able Chinese Internet users to gain access to censored sites.
However, Triangle Boy has several drawbacks. First, the
encrypted connection to a machine running Triangle Boy is
suspicious and can be trivially blocked since SSL handshak-
ing is unencrypted. Second, SafeWeb’s dependence on an
encrypted channel for conﬁdentiality makes it susceptible to
trafﬁc analysis, since Web site ﬁngerprinting can expose the
Web sites that a user requests, even if the request itself is en-
crypted [7]. Third, SafeWeb is vulnerable to several attacks
that allow an adversary to discover the identity of a SafeWeb
user, as well as every Web site visited by that user [11].
Peekabooty also attempts to circumvent censoring ﬁrewalls
by sending SSL-encrypted requests for censored content to
a third party, but its reliance on SSL also makes it suscepti-
ble to trafﬁc analysis and blocking attacks [26].
Various systems have attempted to protect anonymity
for users who publish and retrieve censored content.
In
Crowds, users join a large, geographically diverse group
whose members cooperate in issuing requests, thus mak-
ing it difﬁcult to associate requests with the originating
user [18]. Onion routing also separates requests from the
users who make them [25]. Publius [30], Tangler [29], and
Free Haven [4] focus on protecting the anonymity of pub-
lishers of censored content and the content itself. Freenet
provides anonymous content storage and retrieval [3].
Infranet aims to overcome censorship and surveillance,
but also provides plausible deniability for users. In addition
to establishing a secure channel between users and Infranet
responders, our system creates a covert channel within
HTTP, i.e., a communication channel that transmits infor-
mation in a manner not envisioned by the original design of
HTTP [9]. In contrast with techniques that attempt to over-
come censorship using a conﬁdential channel (e.g., using
SSL, which is trivial to detect and block) [19, 23, 24, 26],
our approach is signiﬁcantly harder to detect or block. To
be effective against blocking, a scheme for circumventing
censorship must be covert as well as secure.
User Machine
User
Web
Browser
Infranet
Requester
Communication Tunnel
Visible HTTP
Req/
Hidden msg
Visible HTTP
Req/
Hidden msg
Censor
Visible HTTP
Resp/
Hidden content
Visible HTTP
Resp/
Hidden content
Infranet
Responder
Standard
HTTP
Origin
Web
Server
Figure 1. Infranet system architecture.
3 System Architecture
This section presents Infranet’s design considerations
and system architecture and gives an overview of the sys-
tem’s communication protocols.
3.1 Terminology
Figure 1 shows the system architecture of Infranet and
introduces relevant terminology. Users surf Web content as
usual via a Web browser. To retrieve censored content, the
browser uses a software entity that runs on the same host,
called the Infranet requester, as its local proxy. The In-
franet requester knows about one or more Infranet respon-
ders, which are Web servers in the global Internet that im-
plement additional Infranet functionality. The idea is for
the Web browser to request censored content via the In-
franet requester, which in turn sends a message to an In-
franet responder. The responder retrieves this content from
the appropriate origin Web server and returns it to the re-
quester, which delivers the requested content to the browser.
The requester and responder communicate with each other
using a covert tunnel. Technically, Infranet involves three
distinct functions—issuing a hidden request, decoding the
hidden request, and serving the requested content. We ﬁrst
describe a system whereby the responder performs the latter
two functions. We describe a design enhancement in Sec-
tion 8 whereby an untrusted forwarder can forward hidden
requests and serve hidden content, thereby making it more
difﬁcult for a censor to block access to the system.
The censor shown in Figure 1 might have a wide range
of capabilities. At a minimum, the censor can block speciﬁc
IP addresses (e.g., of censored sites and suspected Infranet
responders). More broadly, the censor might have the capa-
bility to analyze logs of all observed Web trafﬁc, or even to
modify the trafﬁc itself.
The long-term success of Infranet depends on the
widespread deployment of Infranet responders in the Inter-
net. One way of achieving this might be to bundle responder
software with standard Web server software (e.g., Apache).
Hopefully, a signiﬁcant number of people will run Infranet
responders due to altruism or because they believe in free
speech.
3.2 Design Goals
We designed Infranet to meet a number of goals. Or-
dered by priority, the goals are:
1. Deniability for any Infranet requester. It should be
computationally intractable to conﬁrm that any individual
is intentionally downloading information via Infranet, or to
determine what that information might be.
2. Statistical deniability for the requester. Even if it is
impossible to conﬁrm that a client is using Infranet, an ad-
versary might notice statistical anomalies in browsing pat-
terns that suggest a client is using Infranet. Ideally, an In-
franet user’s browsing patterns should be statistically indis-
tinguishable from those of normal Web users.
3. Responder covertness. Since an adversary will likely
block all known Infranet responders, it must be difﬁcult
to detect that a Web server is running Infranet simply by
watching its behavior. Of course, any requester using the
server will know that the server is an Infranet responder;
however, this knowledge should only arise from possession
of a secret that remains unavailable to the censor. If the cen-
sor chooses not to block access to the responder but rather to
watch clients connecting to it for suspicious activities, de-
niability should not be compromised. The responder must
assume that all clients are Infranet requesters. This ensures
that Infranet requesters cannot be distinguished from inno-
cent users based on the responder’s behavior.
4. Communication robustness. The Infranet channel
should be robust in the presence of censorship activities de-
signed to interfere with Infranet communication. Note that
it is impossible to be inﬁnitely robust, because a censor who
blocks all Internet access will successfully prevent Infranet
communication. Thus, we assume the censor permits some
communication with non-censored sites.
Any technique that prevents a site from being used as an
Infranet responder should make that site fundamentally un-
usable by non-Infranet clients. As an example of a scheme
that is not robust, consider using SSL as our Infranet chan-
nel. While this provides full requester and responder de-
niability and covertness (since many Web servers run SSL
for innocent reasons), it is quite plausible for a censor to
block all SSL access to the Internet, since vast amounts of
information remain accessible through non-encrypted con-
nections. Thus, a censor can block SSL-Infranet without
completely restricting Internet access.
In a similar vein, if the censor has concluded that a par-
ticular site is an Infranet responder, we should ensure that
their only option for blocking Infranet access is to block all
access to the suspected site. Hopefully, this will make the
censor more reluctant to block sites, which will allow more
Infranet responders to remain accessible.
5. Performance. We seek to maximize the performance
of Infranet communication, subject to our other objectives.
3.3 Overview
A requester must be able to both join and use Infranet
without arousing suspicion. To join Infranet, a user must
obtain the Infranet requester software, plus the IP address
and public key of at least one Infranet responder. Users
must be able to obtain Infranet requester software without
revealing that they are doing so. Information about Infranet
responders must be available to legitimate users, but should
not fall into the hands of an adversary who could then con-
ﬁgure a simple IP-based ﬁltering proxy. One way to dis-
tribute software is out-of-band via a CD-ROM or ﬂoppy
disk. Users can share copies of the software and learn about
Infranet responders directly from one another.
The design and implementation of a good tunnel proto-
col between an Infranet requester and responder is the crit-
ical determinant of Infranet’s viability. The rest of this sec-
tion gives an overview of the protocol, and Section 4 de-
scribes the protocol in detail.
We deﬁne the tunnel protocol between the requester and
responder in terms of three abstraction layers:
1. Message exchange. This layer of abstraction speciﬁes
high-level notions of information that requester and re-
sponder communicate to each other.
2. Symbol construction. Any communication system
must specify an underlying alphabet of symbols that
are transmitted. This layer of abstraction speciﬁes the
alphabets for both directions of communication. The
primary design constraint is covertness.
3. Modulation. The lowest layer of abstraction speci-
ﬁes the mapping between symbols in the alphabet and
message fragments. The main design goal is reason-
able communication bandwidth, without compromis-
ing covertness.
Infranet
Requester
Censor
Infranet
Responder
Hup (MSG ,  COVER up ,  SECRET )
Hdown (MSG ,  COVER down ,  SECRET )
Figure 2. Top-most layer of abstraction in communication