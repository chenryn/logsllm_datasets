title:Bandwidth-Hard Functions: Reductions and Lower Bounds
author:Jeremiah Blocki and
Ling Ren and
Samson Zhou
Bandwidth-Hard Functions: Reductions and Lower Bounds
Department of Computer Science, Purdue University
Jeremiah Blocki
PI:EMAIL
Samson Zhou
Ling Ren
CSAIL, MIT
PI:EMAIL
Department of Computer Science, Purdue University
PI:EMAIL
September 30, 2018
Abstract
Memory Hard Functions (MHFs) have been proposed as an answer to the growing inequality between
the computational speed of general purpose CPUs and Application Speciﬁc Integrated Circuits (ASICs).
MHFs have seen widespread applications including password hashing, key stretching and proofs of work.
Several metrics have been proposed to quantify the “memory hardness” of a function. Cumulative
memory complexity (CMC) [AS15] (or amortized Area × Time complexity [ABH17]) attempts to quantify
the cost to acquire/build the hardware to evaluate the function — after normalizing the time it takes
to evaluate the function. By contrast, bandwidth hardness [RD17] attempts to quantify the amortized
energy costs of evaluating this function on hardware — which in turn is largely dominated by the number
of cache misses. Ideally, a good MHF would be both bandwidth hard and have high cumulative memory
complexity. While the cumulative memory complexity of leading MHF candidates is well understood,
little is known about the bandwidth hardness of many prominent MHF candidates.
Our contributions are as follows: First, we provide the ﬁrst reduction proving that, in the parallel
random oracle model, the bandwidth hardness of a Data-Independent Memory Hard Function (iMHF) is
described by the red-blue pebbling cost of the directed acyclic graph (DAG) associated with that iMHF.
Second, we show that the goals of designing an MHF with high CMC/bandwidth hardness are well
aligned. In particular, we prove that any function with high CMC also has relatively high energy costs.
This result leads to the ﬁrst unconditional lower bound on the energy cost of scrypt in the parallel random
oracle model. Third, we analyze the bandwidth hardness of several prominent iMHF candidates such
as Argon2i [BDK15], winner of the password hashing competition, aATSample and DRSample [ABH17]
— the ﬁrst practical iMHF with essentially asymptotically optimal CMC. We show Argon2i, aATSample
and DRSample are maximally bandwidth hard under appropriate cache size. Finally, we show that the
problem of ﬁnding a red-blue pebbling with minimum energy cost is NP-hard.
1 Introduction
Memory Hard Functions (MHFs) [Per09, ABMW05] are a crucial building block in the design of password
hashing functions, moderately hard key-derivation functions and egalitarian proofs of work [DN92, Bac02].
For example, in password hashing it is critically important to ensure that it is prohibitively expensive for
an oﬄine attacker to evaluate the function millions or billions of times to check each password in a large
cracking dictionary. The development of improved Application Speciﬁc Integrated Circuits (ASICs) or Field
Programmable Gate Arrays (FPGAs) for computing cryptographic hash functions such as SHA256 makes
this goal increasingly challenging. For example, the Antminer S9, an ASIC Bitcoin [Nak08] miner, is able to
compute SHA256 hashes at a rate of 13.6 trillion hashes per second using just 1274 Joules of energy per second
(Watts). By contrast, the energy needed to compute SHA256 13.6 trillion times on a standard CPU would
1
be about six orders of magnitude higher! In fact, Blocki et al. [BHZ18] recently argued that non-memory
hard key derivation functions (e.g., PBKDF2-SHA256 and BCRYPT are based on hash iteration) cannot
provide suﬃcient protection against a rational (economically motivated) oﬄine attacker without introducing
unacceptably long authentication delays.
MHFs are based on the observation that memory costs (e.g., latency, bandwidth, energy consumption)
tend to be equitable across diﬀerent architectures. Thus, to develop an “egalitarian” function we want
to design a function where evaluation costs are dominated by memory costs. Two of the most prominent
approaches to measure the “evaluation cost” of MHFs are memory hardness [Per09, AS15] and bandwidth
hardness [RD17]. Memory hardness [Per09] seeks to quantify construction costs i.e., the cost to build/obtain
the hardware necessary to compute the MHF. By contrast, bandwidth hardness [RD17] seeks to quantify
the energy costs per evaluation i.e., the cost of running the hardware. Ideally, one would hope to design an
MHF that is both bandwidth hard and memory hard.
Broadly speaking there are two types of MHFs: data-dependent memory hard functions (dMHFs) and
data-independent memory hard functions (iMHFs). As the name suggests an iMHF induces a memory
access pattern that is independent of the sensitive input (e.g., password), which makes them naturally re-
sistant to certain side channel attacks e.g., cache-timing [Ber05]. Meanwhile, while dMHFs with high mem-
ory/bandwidth hardness are potentially easier to construct [AB16, ACP+17], they are also more vulnerable
to side channel attacks. Argon2 [BDK16], winner of the recently completed Password Hashing Competi-
tion [PHC15], includes a data-independent mode of operation (Argon2i), a data-dependent mode (Argon2d)
and a hybrid mode (Argon2id).
To a large extent, most of the recent cryptanalysis of MHF candidates has focused on memory hardness.
In particular, cumulative memory complexity (CMC) [AS15] and the closely related metric amortized area-
time complexity (aAT) [AB16, ABH17] aim to approximate the cost of constructing enough chips to evaluate
the function T times per year. For example, if evaluating the function one time requires us to lock up
1GB of DRAM for 1 second then, at minimum, an attacker would need to buy roughly 32 (1GB) DRAM
chips to evaluate the function a billion times per year. Alwen et al. [ACP+17] showed that the dMHF
scrypt [Per09] has maximal CMC Ω(n2) i.e., the amortized area-time complexity scales quadratically with
the running time n. By contrast, Alwen and Blocki [AB16, AB17] showed that any iMHF has cumulative
memory complexity at most O(cid:16) n2 log log n
such as balloon hashing [BCS16]. Blocki and Zhou [BZ17] showed that Argon2i has CMC at most O(cid:0)n1.767(cid:1)
and at least ˜Ω(cid:0)n1.75(cid:1). Alwen et al. [ABP17] also gave a theoretical construction of an iMHF with CMC at
Password Hashing Competition [PHC15] (PHC) winner Argon2i [BDK16] along with other candidate MHFs
and they exhibited even stronger amortization attacks against
(cid:17)
log n
(cid:16) n2
(cid:17)
least Ω
designed two practical iMHFs called DRSample and aATSample with the same asymptotic complexity.
, which is essentially optimal in an asymptotic sense. More recently, Alwen et al. [ABH17]
log n
By contrast, the notion of bandwidth-hardness was only introduced recently [RD17] with the intention of
lower bounding the energy required to evaluate the function. Ren and Devadas [RD17] observed that metrics
such as CMC or aAT do not provide an accurate picture of energy consumption. For example, certain types
of memory consume very little energy when idle, but cache misses are costly because we must retrieve data
from RAM. Memory Bound Functions [ABMW05] are functions whose computation always requires a large
number of cache-misses regardless of computation time. Bandwidth hardness [RD17] relaxes this notion by
requiring that any attacker who evaluates the function must either 1) incur a large number of expensive
cache misses, or 2) must perform a larger (e.g., super-linear) amount of computation.
Ren and Devadas proposed to cryptanalyze an iMHF using a variant of the red-blue pebbling game
in which red-moves (representing computation performed using data in cache) have a smaller cost cr than
blue-moves cb (representing data movements to/from memory) [RD17]. Ren and Devadas also proved that
the bit reversal graph [LT82], which forms the core of iMHF candidate Catena-BRG [FLW13], is maximally
bandwidth hard in the sense that any red-blue pebbling has cost Ω(n·cb). However, Ren and Devedas [RD17]
did not prove that any attacker in the parallel random oracle model (pROM) can be viewed as a red-blue
pebbling so it was not clear whether or not a graph (e.g., Catena-BRG [FLW13]) with high red-blue peb-
bling cost is necessarily bandwidth hard in the pROM model. Similarly, Ren and Devedas [RD17] showed
2
that scrypt is bandwidth hard under a restrictive assumption about the cache-architecture adopted by the
attacker e.g., they need to assume data from RAM can only be retrieved in large chunks. Prior to our
work nothing was known about the bandwidth hardness of key MHF candidates such as PHC winner Ar-
gon2i [PHC15, BDK16], DRSample and aATSample [ABH17].
Our Contributions. We formalize the notion of bandwidth hardness in the parallel random oracle model
and show that bandwidth hardness is indeed captured by the red-blue pebbling game. This does for band-
width hardness what Alwen and Serbinenko [AS15] did for CMC when they showed that CMC is captured
by the parallel black pebbling game.
Second, we demonstrate that CMC lower bounds can be used to directly lower bound energy costs. In
particular, we show that energy costs are at least Ω(cid:0)√
in time t will pay computation costs at least t · cr and energy cost at least(cid:0) CM C
at least Ω(n2 · w). Combined with our result this implies that scrypt has energy cost at least Ω(cid:0)√
cbcrCM C − cb · m(cid:1). Intuitively, an attacker running
t·w − m(cid:1) · cb where m denotes
cbcrn(cid:1).
the number of w-bit words that can be stored in cache. Alwen et al. [ACP+17] show that scrypt has CMC
While we would ideally hope for a lower bound of Ω(n · cb), we stress that this is the ﬁrst lower bound for
scrypt that does not require any restrictive assumptions about cache-architecture [RD17]. The result also
demonstrates that the goals of high CMC and high bandwidth hardness are well aligned.
Third, we introduce a new technique to lower-bound the red-blue pebbling cost of a DAG and we use
this new technical hammer to lower-bound the reb-blue pebbling cost of several important iMHF candidates
including: Argon2iB (the current version of PHC winner Argon2i [BDK16]), Argon2iA (an older version of
Argon2, which is similar to balloon hashing [BCS16] , DRSample and aATSample. In particular, we show that
if m = O(cid:0)n2/3−(cid:1) then any pROM attacker with cache-size m·w bits must incurs cost min{Ω (n · cb) , ω(n·cr)}.
In particular, Argon2iB is maximally bandwidth hard whenever the attacker’s cache size is suﬃciently small.
Argon2iB uses a round function with word size w = 210 Bytes. Assuming that we set our memory hardness
parameter n = 220 (ﬁlling nw = 1GB of RAM in about 1 second according to Argon2 benchmarks [BDK16])
then n2/3 · w corresponds to a cache-size of 10M B— our lower bounds would not apply if the attacker’s
cache size is larger. We prove even stronger lower bounds for DRSample and aATSample. In particular, we
prove that these functions are maximally bandwidth hard as long as m = O(cid:0)n1−(cid:1). Interestingly, DRSample
and aATSample have asymptotically higher CMC as well, which is consistent with our observation that the
goals of designing a MHF with high CMC is well aligned with the goal of designing an maximally bandwidth
hard function.
While we prove that DRSample, aATSample and Argon2iB are all maximally bandwidth hard in an
asymptotic sense, it would be nice to gain a more precise understanding of the constant factors in these
bounds. To this end it would be useful to develop an eﬃcient algorithm to determine the minimum cost
red-blue pebbling of a DAG G. However, our ﬁnal result is a negative one. We show that it is NP-Hard to
compute the minimum cost red-blue pebbling of a DAG G.
1.1 Graph Pebbling and iMHFs
An iMHF fG,H is deﬁned by a labeling game over a DAG G and a random oracle H : {0, 1}∗ → {0, 1}w. In
particular, the label (cid:96)v of an intermediate node v is computed as (cid:96)v = H(cid:0)v, (cid:96)v1, . . . , (cid:96)vindeg
(cid:1) where v1, . . . , vindeg
are the parents of node v in G. The output of the function is the label of the ﬁnal sink node. Before we
provide an overview of our technical results it is necessary to ﬁrst (informally) introduce the black pebbling
game and the red-blue pebbling game.
Black Pebbling.
Given a directed acyclic graph (DAG) G = (V, E), the goal of the (parallel) black
pebbling game is to place pebbles on all sink nodes of G (not necessarily simultaneously). The game is
played in rounds and we use Pi ⊆ V to denote the set of currently pebbled nodes on round i. Initially all
nodes are unpebbled, P0 = ∅, and in each round i ≥ 1 we may only include v ∈ Pi if all of v’s parents
were pebbled in the previous conﬁguration (parents(v) ⊆ Pi−1) or if v was already pebbled in the last round
(v ∈ Pi−1). In the sequential pebbling game we can place at most one new pebble on the graph in any
3
round (i.e., |Pi\Pi−1| ≤ 1), but in the parallel pebbling game no such restriction applies. The space cost
of the pebbling is deﬁned to be maxi |Pi|, which intuitively corresponds to minimizing the maximum space
required during computation of the associated function, and relates to the space-complexity of the black-
pebbling game. Gilbert et al. [GLT79] studied the space-complexity of the black-pebbling game and showed
that this problem is PSPACE − Complete by reducing from the truly quantiﬁed boolean formula (TQBF)
problem. Given a (parallel) legal black pebbling P1, . . . , Pt of a DAG G, we deﬁne the cumulative cost to
(cid:107)
be |P1| + . . . + |Pt|. Then we deﬁne Πcc(G) (resp. Π
cc(G) ) as the minimum cumulative cost of any legal
sequential (resp. parallel) black pebbling of G.
Pebbling Reduction in the pROM Model. Alwen and Serbinenko [AS15] show that under the parallel
random oracle model (pROM) of computation, the cryptanalysis of an iMHF, under the amortized time-space
metric, can be approximately reduced to the cumulative cost of a pebbling strategy. The result is signiﬁcant
in that it allows future cryptanalysis of iMHF candidates to focus on understanding the (parallel) black peb-
bling costs of the underlying DAG. In particular, a lower bound on the aAT complexity of the best pebbling
for a DAG G immediately yields a lower bound on the aAT complexity of any pROM attacker evaluating the
function fG,H . Intuitively, this means that if G has suﬃciently high (parallel) black pebbling cost then it
will be expensive for the attacker to obtain enough hardware to compute the function fG,H millions/billions
of times per year e.g., an oﬄine password cracking adversary.
Red-Blue Pebbling. Given a DAG G = (V, E), the goal of the red-blue pebbling game [HK81] is again
to place pebbles on all sink nodes of G (not necessarily simultaneously) from a starting conﬁguration that
contains no pebbles on any nodes. The game is again played in rounds, with each node possibly containing
a blue pebble or a red pebble at each time step. Informally, at each time step, for any node v we can swap
between a red pebble at v and a blue pebble at v (and vice versa). Each swap is called a blue move, and
while there is no limit to the number of blue moves at a single time step, they each have an associated cost
cb. Simultaneously, we may place a red pebble at a node v if all of v’s parents contained red pebbles in the
previous conﬁguration. This manner of placing a new red pebble is a red move and each occurrence incurs
cost cr. We are allowed to have at most m (cache-size) red-pebbles on the graph at any point in time. In a
sequential red-blue pebbling we are allowed to place at most one new red pebble on the graph during each
round, while no such constraint applies to a parallel red-blue pebbling. Finally, there is a parameter m that
denotes a threshold on the number of nodes that can contain red pebbles at each time step. The total cost
of the red-blue pebbling is the sum of the costs induced by the blue moves and the red moves. We deﬁne
(cid:107)
rbpeb
(G, m) (resp. rbpeb(G, m)) to be the minimum cost of any legal parallel (resp. sequential) red-blue
pebbling of G that places at most m red-pebbles on the graph at any point in time.
1.2 Overview of Our Results
Proving that the Red-Blue Pebbling Game Captures Bandwidth Hardness. We consider the
variant of the red-blue pebble game proposed by Ren and Devadas [RD17] in which red moves have cost cr
and blue moves have cost cb — note that if cr = 0 then we recover the traditional goal of minimizing the
number of cache misses. Ren and Devadas [RD17] proposed the adoption of red-blue pebbling to model the
bandwidth-complexity of iMHFs, with the idea that red moves correspond to hash computations and blue
moves correspond to (more expensive) swaps between cache and memory. However, they did not prove any
connection between red-blue pebbling costs and the actual bandwidth-costs of a pROM attacker.
Our contributions are two-fold. First, we formalize the notion of energy cost of a function fG,H in the
parallel random oracle model. Second, we prove that ecost (fG,H ) the energy cost of fG,H is closely related
to red-blue pebbling costs. In particular, we prove that any pROM machine computing fG,H with cache-size
(cid:107)
mw-bits has energy costs Ω(rbpeb
(G, 8m)). This resolves an open question of [RD17], and shows that future
cryptanalysis of the bandwidth hardness of iMHF candidates can focus on the red-blue pebbling cost of the
underlying DAG G.
Theorem 1.1. (Informal, see Theorem 3.3.) fG,H has energy cost at least ecost (fG,H , mw) ∈ Ω
(cid:107)
rbpeb
(cid:16)
(cid:17)
.
(G, 8m)
4
While Theorem 3.3 is similar to a result of Alwen and Serbinenko who showed that the cumulative
memory complexity of fG,H is captured by the black pebbling game [AS15], we stress that there are several
unique challenges in our reduction. In particular, it is easier to extract a black pebbling from the execution
trace of a pROM attacker since each new pebble that is placed on the graph during round i corresponds
directly to a random oracle query that was made during the previous round. However, in the red-blue
pebbling model only red moves correspond to random oracle queries. Intuitively, we expect that blue moves
correspond to labels that are transferred to/from memory, but an attacker may encode each of these labels
in an unexpected way (e.g., encryption). Thus, even if we can observe the data values being transferred
to/from memory we stress that we cannot directly infer which labels are being transferred making it diﬃcult
to extract a legal red-blue pebbling from the execution trace.
We overcome this diﬃculty by allowing the red-blue pebbling to use a little bit of extra memory (e.g., if
the pROM attacker has m · w bits of cache then the red-blue pebbling is allowed to use 8m red-pebbles) and
by introducing the notion of a red-blue extension pebbling of a legal black pebbling P = (P1, . . . , Pt). Given
a legal black pebbling extracted from the execution trace of the pROM attacker running in time t we can
partition time into intervals [t0 = 1, t1), [t1, t2), . . . [tk−1, tk = t] such that 1) during each interval [ti, ti+1) the
pROM attacker transfers at least mw bits from memory (at cost m · cb), and 2) there is a red-blue extension
pebbling that makes at most O (m) blue moves during each interval [ti, ti+1).
To partition time into intervals we introduce a set QueryFirst(x, y) that intuitively corresponds to the
data-labels that appear ﬁrst as input to a random oracle query during the time interval [x, y) before the
label appears as the output of some random oracle query during the same interval. We then deﬁne t1 to
be the minimum pebbling round such that there exists 1 ≤ j1  ti−1 to be the minimum
pebbling round such that there exists ti > ji ≥ ti−1 s.t. QueryFirst(ji, ti) has size at least 3m. At the
beginning of each interval [ti, ti+1) our red-blue extension pebbling will place red pebbles on all nodes in
the set QueryFirst(ji, ti) (e.g., to “load” these values into cache). We can accomplish this legally since
the extension pebbling is allowed to use up to 8m red-pebbles. Once we have red pebbles placed on all of
these nodes the extension pebbling is able to ﬁnish this interval without changing any other blue nodes into
red-nodes (i.e., zero cache misses).
To prove that the pROM attacker must transfer at least mw bits from memory during each interval we
rely on an extractor argument. In particular, let γi encode the messages transferred to/from cache during the
interval [ti, ti+1). Our extractor will extract 3m labels (without querying the random oracle at these points)
by simulating the pROM attacker starting with a hint. The labels we will extract correspond to the nodes in
the set QueryFirst(ti, ti+1)). The hint consists of γi along with other information such as the current state
of the cache (at most mw bits), indices of the 4m labels that we want to extract (4m log n bits to encode),
and the index of the ﬁrst query in which each label appears as input to a random oracle query (4m log q bits
to encode where q is an upper bound on number of queries made by the attacker). Since a random oracle is
incompressible, the extractor’s hint must have length at least 4mw if we expect the extractor to output 4m
labels (i.e., 4m distinct random oracle outputs of length w assuming there are no hash collisions) without
querying the random oracle at these points so it follows that |γi| ≥ m · w.
On the Relationship between Bandwidth Complexity and Cumulative Memory Complexity.
We show that bandwidth complexity and cumulative memory complexity are intricately related concepts.
(cid:107)
(G, m) is the minimum energy cost1 of any legal parallel reb-blue pebbling of G with cache size m
If rbpeb
and Πcc is the cumulative complexity of sequential black pebbling, then
Theorem 1.2.
(cid:107)
rbpeb
(G, m) ≥ 2cb
− 2m