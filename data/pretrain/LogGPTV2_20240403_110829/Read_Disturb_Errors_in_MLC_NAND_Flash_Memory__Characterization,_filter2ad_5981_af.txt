In this case, the optimal Va lies at the intersection of the two
distributions, as it minimizes the raw bit errors.
Va
Va
ER
(11)
P1
(10)
Vth
ER
(11)
P1
(10)
Vth
(a) No read disturb
(b) After some read disturb
Fig. 15. Vth distributions before and after read disturb.
Even when the optimal Va is applied after enough read
disturbs, some cells in the erased state are misread as being
in the P1 state (shown as blue cells), while some cells in
the P1 state are misread as being in the erased state (shown
as red cells). In these cases, errors occur, and, as we have
mentioned before, consume some of the ECC error correction
capability. Eventually, as these errors accumulate within a page
and exceed the total ECC correction capability, the ECC can
no longer correct them, resulting in an uncorrectable ﬂash
error. An uncorrectable ﬂash error is the most critical type of
error because (1) it determines the ﬂash lifetime, which is the
guaranteed time a ﬂash device can be used without exceeding
a ﬁxed rate of uncorrectable errors, and (2) it may result in the
permanent loss of important user data.
As we mentioned before, raw bit errors are a combination
of read disturb errors and other error types, such as program
errors and retention errors. If we were somehow able to correct
even a fraction of the read disturb errors with a mechanism
other than ECC, those now-removed errors would no longer
consume part of the limited ECC correction capability. As a
result, the total amount of raw bit errors that the ﬂash device
8RDR can perform error recovery either online or ofﬂine. We leave
the detailed exploration of the beneﬁts and trade-offs of online vs. ofﬂine
recovery to future work.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:16:06 UTC from IEEE Xplore.  Restrictions apply. 
can handle would increase. This, in effect, allows previously
uncorrectable ﬂash errors to be corrected. Thus, we would like
to develop a new recovery mechanism that can identify and
correct such read disturb errors.
In order to perform such a recovery, we need to ﬁrst identify
susceptible ﬂash cells (i.e., cells with a threshold voltage close
to a read reference voltage Vref ) whose states are most likely
to have been incorrectly changed due to read disturb. We do
this by characterizing the degree of this threshold voltage shift.
Second, we need to probabilistically correct these cells based
on this threshold voltage shift characterization. To this end, we
introduce our proposed mechanism, RDR, which performs these
two steps to successfully recover from read disturb errors.
5.2. Identifying and Correcting Susceptible Cells
When threshold voltage distributions of two different logical
states overlap due to read disturb related shifts, RDR identiﬁes
susceptible cells, and determines a threshold with which to
probabilistically estimate the correct
logical values of such
cells.
Although read disturb is pervasive across all ﬂash cells in a
chip, we hypothesize that each cell is affected by read disturb
to a different degree, due to effects such as process variation.
We verify this hypothesis experimentally for Vref = Va. First,
we program known, pseudo-randomly generated data values to a
ﬂash block with 8,000 P/E cycles of wear, and increase the read
disturb count by repeatedly reading data from the block. After
the ﬁrst round of 250K reads, we identify susceptible cells (in
this case, cells whose Vth is within the range Va± σ/2, where σ
is the standard deviation of the threshold voltage distribution).
Next, we record the threshold voltages of all susceptible cells
by sweeping the read reference voltage. Then, we add a second
round of 100K reads, and measure the threshold voltage of the
susceptible cells again. We compare the difference in threshold
voltage (ΔVth) for these susceptible cells between the ﬁrst and
second rounds, and plot the distribution of this difference in
Fig. 16. The blue line corresponds to susceptible cells originally
programmed in the erased state (cells illustrated as blue dots in
Fig. 15). The red line corresponds to susceptible cells originally
programmed in the P1 state (cells illustrated as red dots in
Fig. 15).
F
D
P
0.06
0.05
0.04
0.03
0.02
0.01
0.00
(cid:1)Vref
Cells originally
in the ER state
Cells originally
in the P1 state
Disturb-resistant
I
Disturb-prone
III
IV
II
-30       -20       -10          0          10        20         30         40
(cid:1)Vth: Threshold Voltage Change
Fig. 16. Probability density function of the threshold voltage change (ΔVth)
for susceptible cells with threshold voltages near Va. Cells in the area under
the blue line (regions II, III, IV) were originally in the ER state, and cells in
the area under the red line (regions I, II, IV) were originally in the P1 state.
Identiﬁcation. As Fig. 16 shows, by setting a delta threshold
voltage (ΔVref ) at the intersection of the two probability den-
sity functions, we can classify all the cells into two categories.
Since read disturb tends to increase a cell’s threshold voltage (as
is shown in Sec. 3.2), we classify cells with a higher threshold
voltage change (ΔVth > ΔVref ; regions III and IV in Fig. 16)
as disturb-prone cells. We classify cells with a lower or negative
threshold voltage change (ΔVth  ΔVref (regions III and IV under the
blue line), and are hence identiﬁed as disturb-prone. From our
ﬁrst prediction above, these cells are correctly recovered by
RDR to the ER state. In contrast, the remaining cells originally
programmed in the ER state that have ΔVth  ΔVref (region IV under the red line) are identiﬁed as
disturb-resistant, and are incorrectly recovered to the ER state.
As we just described, RDR can sometimes incorrectly
recover cells (region II under the blue line; region IV under
the red line). However, it still achieves a net reduction in errors
(which amounts to the area in regions I and III) because the
number of cells that are correctly recovered is much greater.
Incorrectly recovered cells can still be corrected later by ECC.
5.3. Mechanism
To recover from uncorrectable ﬂash errors, we propose to
use RDR to identify those cells whose states are most likely
to be changed by read disturb, and probabilistically correct
those cells to reduce the overall raw bit error rate to a level
correctable by ECC. Our mechanism consists of six steps:
Step 1: When we have an uncorrectable error in a block, back
up the valid, readable data in this block to another block.
Step 2: Scan the threshold voltages of the cells in the page
containing the data that ECC was unable to correct, using the
same methodology described in Sec. 3.1, and save the threshold
voltages to another block.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:16:06 UTC from IEEE Xplore.  Restrictions apply. 
Step 3: Induce additional read disturbs to this page, by repeat-
edly reading from another page in the same block 100K times.
Step 4: Scan and save the threshold voltages of the cells in the
failed page again (same as Step 2) to another block.
Step 5: Select the cells with threshold voltages close to a read
reference voltage (Vref − σ/2 < Vth < Vref + σ/2, and Vref is
set to Va, Vb, or Vc). Calculate the change in threshold voltage
for these cells before (Step 2) and after 100K read disturbs
(Step 4). Set ΔVref equal to the mean of these differences.
Step 6: Using the ΔVref value from Step 5, predict a cell
whose threshold voltage changes by more than ΔVref as
disturb-prone, and assume it was originally programmed into
the lower of the two possible cell states. Predict a cell whose
threshold voltage changes by less than ΔVref as disturb-
resistant, and assume it was originally in the higher voltage
state (see Sec. 5.2). Using these state assumptions, attempt to
recover the failed page using ECC.
5.4. Evaluation
We evaluate how the overall RBER changes when we use
RDR. Fig. 17 shows experimental results for error recovery in
a ﬂash block with 8,000 P/E cycles of wear. When RDR is
applied, the reduction in overall RBER grows with the read
disturb count, from a few percent for low read disturb counts
up to 36% for 1 million read disturb operations. As data ex-
periences a greater number of read disturb operations, the read
disturb error count contributes to a signiﬁcantly larger portion
of the total error count, which our recovery mechanism targets
and reduces. We therefore conclude that RDR can provide a
large effective extension of the ECC correction capability.
R
E
B
R
12
10
8
6
4
2
0
× 10-3
No Recovery
RDR
0
0.2M
0.4M
Read Disturb Count
0.6M
0.8M
1M
Fig. 17. Raw bit error rate vs. number of read disturb operations, with and
without RDR, for a ﬂash block with 8,000 P/E cycles of wear.
6. Conclusion
This paper provides the ﬁrst detailed experimental charac-
terization of read disturb errors for 2Y-nm MLC NAND ﬂash
memory chips. We ﬁnd that bit errors due to read disturb are
much more likely to take place in cells with lower threshold
voltages, as well as in cells with greater wear. We also ﬁnd
that reducing the pass-through voltage can effectively mitigate
read disturb errors. Using these insights, we propose (1) a
mitigation mechanism, called Vpass Tuning, which dynamically
adjusts the pass-through voltage for each ﬂash block online
to minimize read disturb errors, and (2) an error recovery
mechanism, called Read Disturb Recovery, which exploits the
differences in susceptibility of different cells to read disturb, to
probabilistically correct read disturb errors. We hope that our
characterization and analysis of the read disturb phenomenon
enables the development of other error mitigation and tolerance
mechanisms, which will become increasingly necessary as
continued ﬂash memory scaling leads to greater susceptibility
to read disturb. We also hope that our results will motivate
NAND ﬂash manufacturers to add pass-through voltage controls
to next-generation chips, allowing ﬂash controller designers to
exploit our ﬁndings and design controllers that tolerate read
disturb more effectively.
Acknowledgments
We thank the anonymous reviewers for their feedback. Erich
F. Haratsch and Ken Mai contributed to this work. This work
is partially supported by the Intel Science and Technology
Center, the CMU Data Storage Systems Center, and NSF grants
0953246, 1065112, 1212962, and 1320531.
References
[1] Y. Cai et al., “FPGA-Based Solid-State Drive Prototyping Platform,”
in FCCM, 2011.
[2] Y. Cai et al., “Error Patterns in MLC NAND Flash Memory: Measure-
ment, Characterization, and Analysis,” in DATE, 2012.
[3] Y. Cai et al., “Threshold Voltage Distribution in NAND Flash Memory:
Characterization, Analysis, and Modeling,” in DATE, 2013.
[4] Y. Cai et al., “Data Retention in MLC NAND Flash Memory: Char-
acterization, Optimization, and Recovery,” in HPCA, 2015.
[5] Y. Cai et al., “Program Interference in MLC NAND Flash Memory:
Characterization, Modeling, and Mitigation,” in ICCD, 2013.
[6] Y. Cai et al., “Flash Correct and Refresh: Retention Aware Management
for Increased Lifetime,” in ICCD, 2012.
[7] Y. Cai et al., “Error Analysis and Retention-Aware Error Management
for NAND Flash Memory,” Intel Technology Journal (ITJ), 2013.
[8] Y. Cai et al., “Neighbor Cell Assisted Error Correction in MLC NAND
Flash Memories,” in SIGMETRICS, 2014.
[9] J. Cha and S. Kang, “Data Randomization Scheme for Endurance
Enhancement and Interference Mitigation of Multilevel Flash Memory
Devices,” ETRI Journal, 2013.
[10] Charles Manning, “Yaffs NAND Flash Failure Mitigation,” 2012.
http://www.yaffs.net/sites/yaffs.net/ﬁles/YaffsNandFailureMitigation.
pdf
[11] J. Cooke, “The Inconvenient Truths of NAND Flash Memory,” Flash
Memory Summit, 2007.
[12] R. H. Fowler and L. Nordheim, “Electron Emission in Intense Electric
Fields,” in Proceedings of the Royal Society of London A: Mathemat-
ical, Physical and Engineering Sciences, 1928.
[13] H. H. Frost et al., “Efﬁcient Reduction of Read Disturb Errors in
NAND Flash Memory,” US Patent No. 7818525. 2010.
[14] L. M. Grupp et al., “Characterizing Flash Memory: Anomalies, Obser-
vations, and Applications,” in MICRO, 2009.
[15] K. Ha et al., “A Read-Disturb Management Technique for High-
Density NAND Flash Memory,” in APSys, 2013.
[16] JEDEC Solid State Technology Assn., “Failure Mechanisms and Mod-
els for Semiconductor Devices,” Doc. No. JEP122G. 2011.
[17] J. Katcher, “Postmark: A New File System Benchmark,” Network
Appliance, Tech. Rep. TR3022, 1997.
[18] C. Kim et al., “A 21 nm High Performance 64 Gb MLC NAND Flash
Memory with 400 MB/s Asynchronous Toggle DDR Interface,” JSSC,
2012.
[19] Y. Kim et al., “Flipping Bits in Memory Without Accessing Them: An
Experimental Study of DRAM Disturbance Errors,” in ISCA, 2014.
[20] R. Koller and R. Rangaswami, “I/O Deduplication: Utilizing Content
Similarity to Improve I/O Performance,” TOS, 2010.
[21] S. Lin and D. J. Costello, Error Control Coding. Prentice Hall, 2004.
[22] R.-S. Liu et al., “Duracache: A Durable SSD Cache Using MLC NAND
[23] R.-S. Liu et al., “Optimizing NAND Flash-Based SSDs via Retention
[24] N. Mielke et al., “Bit Error Rate in NAND Flash Memories,” in IRPS,
Flash,” in DAC, 2013.
Relaxation,” in FAST, 2012.
2008.
[25] V. Mohan et al., “reFresh SSDs: Enabling High Endurance, Low Cost
Flash in Datacenters,” Univ. of Virginia, Tech. Rep. CS-2012-05, 2012.
[26] V. Mohan et al., “How I Learned to Stop Worrying and Love Flash
Endurance,” in HotStorage, 2010.
[27] D. Narayanan et al., “Write off-Loading: Practical Power Management
for Enterprise Storage,” TOS, 2008.
[28] Y. Pan et al., “Quasi-Nonvolatile SSD: Trading Flash Memory Non-
volatility to Improve Storage System Performance for Enterprise Ap-
plications,” in HPCA, 2012.
[29] K.-T. Park et al., “A 7MB/s 64Gb 3-Bit/Cell DDR NAND Flash
Memory in 20nm-Node Technology,” in ISSCC, 2011.
[30] R. Smith, “SSD Moving Rapidly to the Next Level,” Flash Memory
[31] Storage Network Industry Assn., “IOTTA Repository: Cello 1999.”
Summit, 2014.
http://iotta.snia.org/traces/21
[32] T. Sugahara and T. Furuichi, “Memory Controller for Suppressing Read
Disturb When Data Is Repeatedly Read Out,” US Patent No. 8725952.
2014.
[33] K. Takeuchi et al., “A Negative Vth Cell Architecture for Highly
Scalable, Excellently Noise-Immune, and Highly Reliable NAND Flash
Memories,” IEEE Journal of Solid-State Circuits, 1999.
“Storage: UMass Trace Repository.”
[34] Univ. of Massachusetts,
http://tinyurl.com/k6golon
449449
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:16:06 UTC from IEEE Xplore.  Restrictions apply.