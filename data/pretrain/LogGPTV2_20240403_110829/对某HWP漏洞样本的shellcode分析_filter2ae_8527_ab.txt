    j = 0
    k = 0
    while k 
    #include 
    #define ROTATE_RIGHT(x, s, n) ((x) >> (n)) | ((x) > (8 - ((i / 2) & 7))) & 0xFF) ^ (i / 2)
        c = '{:02x}'.format(c & 0xFF)
        bin_data = bin_data[:i] + c[0] + c[1] + bin_data[i+2:]
        i += 2 * 1
    path_decode = os.path.join(cur_dir, "pe_decode.bin")
    with open(path_decode, "wb") as f:
        f.write(binascii.a2b_hex(bin_data[4:]))
解密前的PE数据如下：
解密后的PE数据如下：
###  创建userinit.exe进程并挂起
得到解密的PE文件后，shellcode做了一系列准备并最终去启动userinit.exe进程，启动时传入`CREATE_SUSPENDED`标志，指明将userinit.exe启动后挂起：
###  替换userinit.exe主模块
随后shellcode调用`GetThreadContext`获取userinit.exe主线程的线程上下文并保存到栈的指定位置：
接着读取userinit.exe的`Peb.ImageBaseAddress`：
然后动态获取`ntdll!ZwUnmapViewOfSection`，并判断操作系统版本，如果操作系统主版本小于6(相关原理可以参考[这篇文章](https://cysinfo.com/detecting-deceptive-hollowing-techniques/))，则调用该API对主模块基地址的内存进行解映射，否则直接跳到后续步骤：
接着shellcode在userinit.exe进程内`0x400000`地址处(即PE文件中写入的进程默认加载基址)申请一片内存，内存大小等于解密出来的PE文件，并先将PE文件的头部写入所申请的内存(`0x400000`)：
随后往上述内存区域循环写入PE文件的各个节区：
每写完一个节区后，shellcode获取PE文件中该节区的原始读写属性(通过`Characteristics`字段)，并在内存中相应更新这些节区对应的内存属性：
完成上述步骤后，shellcode将userinit.exe进程的`Peb.ImageBaseAddress`域改写为`0x400000`(即注入后的PE基地址)，并将线程上下文中`Context.eax`更新为所注入PE的`AddressOfEntryPoint`，这部分的原理可以参考[这篇文章](https://blog.csdn.net/lixiangminghate/article/details/42121929)。
最后恢复userinit.exe的主线程，并关闭刚才打开的userinit.exe进程句柄，从而使主线程去执行`Process
Hollowing`后的PE文件，达到偷天换日的目的。相关代码可以参考[这里](https://github.com/m0n0ph1/Process-Hollowing)。
## 注入的PE文件
前面我们已经静态解密出了PE文件，我们现在来看一下解密出的PE文件的基本信息，用`pestudio`打开该PE文件，看一下这个PE文件的基本信息：
可以看到该PE文件的编译时间是`2017.12.26 10:13:17`，此外还可以知道该PE文件的链接器版本是9.0。
###  逆向PE文件
整个PE文件既没有加壳，也没有加花指令，整体逻辑非常清晰明了，拖进IDA基本上就原形毕露了。
PE文件主入口函数如下：
正如函数名所示，它首先调用`AdjustTokenPrivileges`提升自己的权限，然后分别从`Kernel32.dll/Wininet.dll/Advapi32.dll`获取所需的功能函数并保存到全局变量，最后启动一个新的线程，并在10秒后退出当前函数。
(以下几个函数貌似并没有被用到)
来看一下启动的线程干了哪些事情，如下图所示，这个线程的主要目的就是先收集系统信息，并保存到`%appdata%MicrosoftNetworkxyz`，随后将这些信息发送给远程C2，传完之后删除xyz文件。随后进入一个循环，每隔30分钟从远程服务器尝试下载一个`zyx.dll`并保存到`%appdata%MicrosoftNetworkzyx.dll`并尝试加载之。这里推测是C2端需要先判断目标用户是否有价值，然后才决定是否将下一阶段的载荷发送给目标用户。
收集信息部分的代码也很直接，如下：
随后将收集的信息发送给远程C2：
最后，一旦远程dll被下发到目标机器，PE文件会立即加载之，并在3分钟后卸载对应的dll并删除文件。由于我们调试期间并没有获得下发的dll，所以dll里面具体执行了什么逻辑不得而知。
## IOC
    HWP: e488c2d80d8c33208e2957d884d1e918
    PE: 72d44546ca6526cdc0f6e21ba8a0f25d
    Domain: online[-]business.atwebpages[.]com
    IP: 185[.]176.43.82
## 参考链接