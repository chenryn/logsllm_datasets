现在，Weave 的配置已经完成，我们在所有支持 Weave 的 Docker 主机之间有了一个完整的网状网络。您可以使用`weave status connections`命令验证每台主机与其他对等主机的连接:
```
user@docker1:~$ weave status connections
-> 192.168.50.102:6783   established fastdp 42:ec:92:86:1a:31(docker4)
…
20: eth0@if21:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
22: ethwe@if23:  mtu 1410 qdisc noqueue state UP
    link/ether a6:f2:d0:36:6f:bd brd ff:ff:ff:ff:ff:ff
    inet 10.32.0.1/12 scope global ethwe
       valid_lft forever preferred_lft forever
    inet6 fe80::a4f2:d0ff:fe36:6fbd/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
请注意，容器现在有一个名为`ethwe`的附加接口，其 IP 地址为`10.32.0.1/12`。这是 Weave 网络接口，是对 Docker 网络接口(`eth0`)的补充。如果我们检查一下，我们会注意到自从我们通过了`-P`标志，Docker 已经向几个`eth0`接口发布了容器暴露的端口:
```
user@docker1:~$ docker port web1
80/tcp -> 0.0.0.0:32785
user@docker1:~$ sudo iptables -t nat -S
……
-A DOCKER ! -i docker0 -p tcp -m tcp --dport 32768 -j DNAT --to-destination 172.17.0.2:80 
user@docker1:~$
```
这证明了我们之前看到的所有端口发布功能仍然是通过 Docker 网络结构完成的。除了现有的 Docker 本地网络接口之外，还添加了 Weave 接口。
将容器连接到 Weave 网络的第二种方法可以通过两种不同的方式实现，但产生的结果基本相同。现有的 Docker 容器可以通过使用 Weave CLI 启动当前停止的容器，或者通过将正在运行的容器附加到 Weave 来添加到 Weave 网络。让我们看看每种方法。首先，让我们以通常使用 Docker CLI 的方式在主机`docker2`上启动一个容器，然后使用 Weave 重新启动它:
```
user@docker2:~$ docker run -dP --name=web2 jonlangemak/web_server_2
5795d42b58802516fba16eed9445950123224326d5ba19202f23378a6d84eb1f
user@docker2:~$ docker stop web2
web2
user@docker2:~$ weave start web2
web2
user@docker2:~$ docker exec web2 ip addr
……
15: eth0@if16:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
17: ethwe@if18:  mtu 1410 qdisc noqueue state UP
    link/ether e2:22:e0:f8:0b:96 brd ff:ff:ff:ff:ff:ff
    inet 10.44.0.0/12 scope global ethwe
       valid_lft forever preferred_lft forever
    inet6 fe80::e022:e0ff:fef8:b96/64 scope link
       valid_lft forever preferred_lft forever
user@docker2:~$
```
如您所见，当使用 Weave CLI 重新启动容器时，Weave 已经注意将 Weave 接口添加到容器中。同样，我们可以在主机`docker3`上启动我们的`web1`容器的第二个实例，然后使用`weave attach`命令将其动态连接到 Weave 网络:
```
user@docker3:~$ docker run -dP --name=web1 jonlangemak/web_server_1
dabdf098964edc3407c5084e56527f214c69ff0b6d4f451013c09452e450311d
user@docker3:~$ docker exec web1 ip addr
……
5: eth0@if6:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker3:~$ 
user@docker3:~$ weave attach web1
10.36.0.0
user@docker3:~$ docker exec web1 ip addr
……
5: eth0@if6:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
15: ethwe@if16:  mtu 1410 qdisc noqueue state UP
    link/ether de:d6:1c:03:63:ba brd ff:ff:ff:ff:ff:ff
    inet 10.36.0.0/12 scope global ethwe
       valid_lft forever preferred_lft forever
    inet6 fe80::dcd6:1cff:fe03:63ba/64 scope link
       valid_lft forever preferred_lft forever
user@docker3:~$
```
正如我们在前面的输出中看到的，容器没有`ethwe`接口，直到我们手动将其连接到 Weave 网络。附件是动态完成的，不需要重新启动容器。除了向 Weave 网络添加容器，您还可以使用`weave detach`命令从 Weave 中动态移除容器。
此时，您应该在所有现在连接到 Weave 网络的容器之间建立连接。在我的案例中，他们被分配了以下 IP 地址:
*   `web1`在主机`docker1`上:`10.32.0.1`
*   `web2`在主机`docker2`上:`10.44.0.0`
*   `web1`在主机`docker3`上:`10.36.0.0`
```
user@docker1:~$ docker exec -it web1 ping 10.44.0.0 -c 2
PING 10.40.0.0 (10.40.0.0): 48 data bytes
56 bytes from 10.40.0.0: icmp_seq=0 ttl=64 time=0.447 ms
56 bytes from 10.40.0.0: icmp_seq=1 ttl=64 time=0.681 ms
--- 10.40.0.0 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.447/0.564/0.681/0.117 ms
user@docker1:~$ docker exec -it web1 ping 10.36.0.0 -c 2
PING 10.44.0.0 (10.44.0.0): 48 data bytes
56 bytes from 10.44.0.0: icmp_seq=0 ttl=64 time=1.676 ms
56 bytes from 10.44.0.0: icmp_seq=1 ttl=64 time=0.839 ms
--- 10.44.0.0 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.839/1.257/1.676/0.419 ms
user@docker1:~$
```
这证明了 Weave 网络工作正常，容器在正确的网段上。
# 了解 Weave IPAM
正如我们在前面的章节中多次看到的，IPAM 是任何容器网络解决方案的关键组成部分。当您开始在多个 Docker 主机上使用公共网络时，IPAM 的重要性变得更加明显。随着 IP 分配的数量开始扩大，能够通过名称解析这些容器也变得至关重要。与 Docker 非常相似，Weave 也为其容器网络解决方案提供了自己的集成 IPAM。在本章中，我们将展示如何配置和利用 Weave IPAM 来管理整个 Weave 网络中的 IP 分配。
## 做好准备
假设您是在我们在本章第一个食谱中创建的实验室的基础上构建的。还假设主机安装了 Docker 和 Weave。Docker 应该处于默认配置，Weave 应该已安装但尚未对等。如果需要删除前面示例中定义的对等，请在每台主机上发出`weave reset`命令。
## 怎么做…
Weave 对 IPAM 的解决方案依赖于使用一个大子网的整个 Weave 网络，然后将其分割成更小的部分，并直接分配给每个主机。然后，主机从分配的 IP 地址池中分配容器 IP 地址。为了做到这一点，Weave 集群必须就分配给每个主机的 IP 分配达成一致。它通过首先在集群内达成共识来做到这一点。如果您对集群的规模有一个大概的了解，那么您可以在初始化期间向 Weave 提供一些细节，帮助它做出更好的决定。
### 注
本食谱的目标不是要详细说明优化 Weave 与 IPAM 使用的共识算法。有关详细信息，请参见以下链接:
[https://www.weave.works/docs/net/latest/ipam/](https://www.weave.works/docs/net/latest/ipam/)
为了这个配方，我们假设您不知道您的集群有多大，我们将假设它从两个主机开始，并从那里扩展。
重要的是要理解，在您供应第一个容器之前，Weave 中的 IPAM 一直处于闲置状态。例如，让我们从在主机`docker1`上配置 Weave 开始:
```
user@docker1:~$ weave launch-router --ipalloc-range 172.16.16.0/24
469c81f786ac38618003e4bd08eb7303c1f8fa84d38cc134fdb352c589cbc42d
user@docker1:~$
```
首先要注意的是参数`--ipalloc-range`的增加。正如我们前面提到的，Weave 基于一个大子网的概念。默认情况下，该子网为`10.32.0.0/12`。通过将`--ipalloc-range`标志传递给 Weave，可以在 Weave 初始化期间覆盖该默认设置。为了让这些示例更容易理解，我决定将默认子网更改为更易于管理的子网；在这种情况下，`172.16.16.0/24`。
让我们也在主机`docker2`上运行相同的命令，但是将主机`docker1`的 IP 地址传递给它，这样它就可以立即对等:
```
user@docker2:~$ weave launch-router --ipalloc-range \