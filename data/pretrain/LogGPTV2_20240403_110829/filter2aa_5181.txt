from pwn import *
import struct
from unicorn import *
from unicorn.x86_const import *
r = remote("chains.of.trust.felinae.pl", 7679)
byte = ord(r.recv(1))
def recv(n):
    data = ""
    while len(data) != n:
        data += r.recv(n-len(data))
    return data
def read_decode_binary():
    ln = struct.unpack("= 12:
            print "XXX", repr(recv(8))
            print "XXX", repr(recv(8))
            for i in range(4):
                print "XXX", repr(recv(8))
        cnt_mmap += 1
        return 1
        """
    def exitx(uc):
        print "exit"
        raise Exception("exit")
    assert num % 8 == 0
    num /= 8
    try:
        if num == 50: # ptrace
            global ptraced
            if ptraced == False:
                rv = 0
                ptraced = True
            else:
                rv = -1
                errno = 1
                uc.mem_write(ADDRESS + 0x20000 + 8 * 53, struct.pack("= ADDRESS + 0x20000:
            res = dispatch(uc, rip - (ADDRESS+0x20000))
            if res == "STOP":
                uc.emu_stop()
                return
            if res != "PASS":
                rip = uc.reg_write(UC_X86_REG_RIP, ADDRESS+0x20000-1)
        #print(">>> Tracing instruction at 0x%x, instruction size = 0x%x %s" %(address, size, repr(mem)))
    print("Emulate x86_64 code")
    mu = Uc(UC_ARCH_X86, UC_MODE_64)
    mu.mem_map(ADDRESS, 2 * 1024 * 1024)
    mu.mem_write(ADDRESS, str(mem))
    mu.reg_write(UC_X86_REG_RSP, ADDRESS + 0x200000)
    mu.mem_write(ADDRESS+0x20000-1, "\xc3")
    buf = ""
    for i in range(100):
        buf += struct.pack("<Q", ADDRESS+0x20000+i*8)
    mu.mem_write(ADDRESS + 0x10000, buf)
    mu.reg_write(UC_X86_REG_RDI, ADDRESS + 0x10000)
    mu.reg_write(UC_X86_REG_RSI, byte)
    mu.hook_add(UC_HOOK_CODE, hook_code64)
    mu.emu_start(ADDRESS+rest, ADDRESS + len(mem))
    byte = mu.reg_read(UC_X86_REG_RAX) & 0xff
    print "byte", hex(byte)