    /// In most cases, it is preferred that ingestion be done using the
    /// queued implementation of . See .
    public static IKustoIngestClient CreateDirectIngestClient(string connectionString);
    /// 
    /// Creates an implementation of  that communicates
    /// with the Kusto ingestion service using a reliable queue.
    /// 
    /// Indicates the connection to the Kusto ingestion service.
    /// Note that the ingestion service generally has a "ingest-" prefix in the
    /// DNS host name part.
    /// An implementation of  that communicates
    /// with the Kusto ingestion service using a reliable queue.
    public static IKustoQueuedIngestClient CreateQueuedIngestClient(KustoConnectionStringBuilder kcsb);
    /// 
    /// Creates an implementation of  that communicates
    /// with the Kusto ingestion service using a reliable queue.
    /// 
    /// Indicates the connection to the Kusto ingestion service.
    /// Note that the ingestion service generally has a "ingest-" prefix in the
    /// DNS host name part.
    /// An implementation of  that communicates with the Kusto ingestion service using a reliable queue.
    public static IKustoQueuedIngestClient CreateQueuedIngestClient(string connectionString);
    /// 
    /// Creates an implementation of  that performs managed streaming ingestion
    /// 
    /// Indicates the connection to the Kusto engine service.
    /// Indicates the connection to the Kusto data management service.
    /// An implementation of  that performs managed streaming ingestion
    /// Streaming ingestion is performed directy intto Kusto enginge cluster 
    /// and is optimized for low-latency ingestion of relatively small chunks of data.
    /// If the streaming ingset doesn't succeed after several retries, queued ingestion will be performed.
    public static IKustoIngestClient CreateManagedStreamingIngestClient(KustoConnectionStringBuilder engineKcsb, KustoConnectionStringBuilder dmKcsb);
    /// 
    /// Creates an implementation of  that performs managed streaming ingestion
    /// 
    /// Indicates the connection to the Kusto engine service.
    /// Indicates the connection to the Kusto data management service.
    /// An implementation of  that performs managed streaming ingestion
    /// Streaming ingestion is performed directy intto Kusto enginge cluster 
    /// and is optimized for low-latency ingestion of relatively small chunks of data.
    /// If the streaming ingset doesn't succeed after several retries, queued ingestion will be performed.
    public static IKustoIngestClient CreateManagedStreamingIngestClient(string engineConnectionString, string dmConnectionString);
    /// 
    /// Creates an implementation of  that performs streaming ingestion
    /// 
    /// Indicates the connection to the Kusto engine service.
    /// An implementation of  that performs streaming ingestion
    /// Streaming ingestion is performed directy intto Kusto enginge cluster 
    /// and is optimized for low-latency ingestion of relatively small chunks of data
    public static IKustoIngestClient CreateStreamingIngestClient(KustoConnectionStringBuilder kcsb);
    /// 
    /// Creates an implementation of  that performs streaming ingestion
    /// 
    /// Indicates the connection to the Kusto engine service.
    /// An implementation of  that performs streaming ingestion
    /// Streaming ingestion is performed directy into Kusto enginge cluster 
    /// and is optimized for low-latency ingestion of relatively small chunks of data
    public static IKustoIngestClient CreateStreamingIngestClient(string connectionString);
}
```
## Class KustoIngestionProperties
KustoIngestionProperties class contains basic ingestion properties for fine control over the ingestion process.
|Property   |Meaning    |
|-----------|-----------|
|DatabaseName |Name of the database to ingest into |
|TableName |Name of the table to ingest into |
|DropByTags |Tags that each extent will have. DropByTags are permanent and can be used as follows: `.show table T extents where tags has 'some tag'` or `.drop extents  DropByTags { get; set; }
    public IEnumerable IngestByTags { get; set; }
    public IEnumerable AdditionalTags { get; set; }
    public IEnumerable IngestIfNotExists { get; set; }
    public IngestionMapping IngestionMapping { get; set; }
    public ValidationPolicy ValidationPolicy { get; set; }
    public DataSourceFormat? Format { get; set; }
    public bool IgnoreSizeLimit { get; set; } // Determines whether the limit of 4GB per single ingestion source should be ignored. Defaults to false.
    public IDictionary AdditionalProperties { get; set; }
    public KustoIngestionProperties(string databaseName, string tableName);
}
```
## Class SourceOptions
SourceOptions and derived classes encapsulate additional information and handling options for the source data. The specifics differ between supported sources
```csharp
    // Base class
    public abstract class SourceOptions
    {
        public Guid SourceId  { get; set; };    // Identifies the ingestion source
        public bool Compress { get; set; };     // Determines whether data should be compressed before being uploaded.
    }
    // Represents a local file/blob/ADLSv2 file
    public sealed class StorageSourceOptions : SourceOptions
    {
        public long? Size { get; set; };    // Uncompressed data size. Should be used to comunicate the file size to the service for efficient ingestion
        public bool DeleteSourceOnSuccess { get; set; };    // Indicates whether the ingestion source should be deleted after successful ingestion. Defaults to 'false'. When set to 'true', will require the service to individually delete each blob, which could put extra pressure on the service.
        public DataSourceCompressionType CompressionType { get; set; }; //  Indicates compression used. Defaults to 'none'
    }
```
## Class IngestionMapping
Holds a reference to an existing mapping or a list of column mappings.
|Property   |Meaning    |
|-----------|-----------|
|IngestionMappings | Column mappings, each describing the target column data and its source |
|IngestionMappingKind | Kind of mapping described in the IngestionMappings property - one of: Csv, Json, Avro, Parquet, SStream, Orc, ApacheAvro or W3CLogFile |
|IngestionMappingReference | The precreated mapping name |
```csharp
public class IngestionMapping
{
    public IEnumerable IngestionMappings { get; set; }
    public IngestionMappingKind IngestionMappingKind { get; set; }
    public string IngestionMappingReference { get; set; }
    public IngestionMapping()
    public IngestionMapping(IngestionMapping ingestionMapping)
}
```
## Enum DataSourceFormat
```csharp
public enum DataSourceFormat
{
    csv,        // Data is in a CSV(-comma-separated values) format
    tsv,        // Data is in a TSV(-tab-separated values) format
    scsv,       // Data is in a SCSV(-semicolon-separated values) format
    sohsv,      // Data is in a SOHSV(-SOH (ASCII 1) separated values) format
    psv,        // Data is in a PSV (pipe-separated values) format
    tsve,       // Tab-separated value with '\' escaping character.
    txt,        // Each record is a line and has just one field
    raw,        // The entire stream/file/blob is a single record having a single field
    json,       // Data is in a JSON-line format (each line is record with a single JSON value)
    multijson,  // The data stream is a concatenation of JSON documents (property bags all)
    avro,       // Data is in a AVRO format
    orc,        // Data is in a ORC format
    parquet,    // Data is in a Parquet format
}
```
## Example of KustoIngestionProperties definition
```csharp
var guid = new Guid().ToString();
var kustoIngestionProperties = new KustoIngestionProperties("TargetDatabase", "TargetTable")
{
    DropByTags = new List { DateTime.Today.ToString() },
    IngestByTags = new List { guid },
    AdditionalTags = new List { "some tags" },
    IngestIfNotExists = new List { guid },
    IngestionMapping = new IngestionMapping() {
        IngestionMappingKind = Data.Ingestion.IngestionMappingKind.Csv,
        IngestionMappings = new ColumnMapping[] { new ColumnMapping() {
            ColumnName = "stringColumn",
            Properties = new Dictionary() {
            { MappingConsts.Ordinal, "1"} }
        } },
    },
    ValidationPolicy = new ValidationPolicy { ValidationImplications = ValidationImplications.Fail, ValidationOptions = ValidationOptions.ValidateCsvInputConstantColumns },
    Format = DataSourceFormat.csv
};
```
## Interface IKustoQueuedIngestClient
IKustoQueuedIngestClient interface adds tracking methods that follow the ingestion operation result and exposes RetryPolicy for the ingest client.
* PeekTopIngestionFailures
* GetAndDiscardTopIngestionFailures
* GetAndDiscardTopIngestionSuccesses
```csharp
public interface IKustoQueuedIngestClient : IKustoIngestClient
{
    /// 
    /// Peeks top (== oldest) ingestion failures  
    /// 
    /// Maximum ingestion failures to peek. Default value peeks 32 messages.
    /// A task which its result contains IEnumerable of . The received messages won't be discarded from the relevant azure queue.
    Task> PeekTopIngestionFailures(int messagesLimit = -1);
    /// 
    /// Returns and deletes top (== oldest) ingestion failure notifications 
    /// 
    /// Maximum ingestion failure notifications to get. Default value peeks 32 messages.
    /// A task which its result contains IEnumerable of . The received messages will be discarded from the relevant azure queue.
    Task> GetAndDiscardTopIngestionFailures(int messagesLimit = -1);
    /// 
    /// Returns and deletes top (== oldest) ingestion success notifications 
    /// 
    /// Maximum ingestion success notifications to get. Default value peeks 32 messages.
    /// A task which its result contains IEnumerable of . The received messages will be discarded from the relevant azure queue.
    Task> GetAndDiscardTopIngestionSuccesses(int messagesLimit = -1);
    /// 
    /// An implementation of IRetryPolicy that will be enforced on every ingest call,
    /// which affects how the ingest client handles retrying on transient failures 
    /// 
    IRetryPolicy QueueRetryPolicy { get; set; }
}
```
## Class KustoQueuedIngestionProperties
KustoQueuedIngestionProperties class extends KustoIngestionProperties with several control knobs that can be used to fine-tune the ingestion behavior.
|Property   |Meaning    |
|-----------|-----------|
|FlushImmediately |Defaults to `false`. If set to `true`, will bypass aggregation mechanism of the Data Management service |
|IngestionReportLevel |Controls the level of ingestion status reporting (defaults to `FailuresOnly`). For good performance and storage usage, we recommended you not set IngestionReportLevel to `FailuresAndSuccesses` |
|IngestionReportMethod |Controls the target of the ingestion status reporting. Available options are: Azure Queue, Azure Table, or both. Defaults to `Queue`.
```csharp
public class KustoQueuedIngestionProperties : KustoIngestionProperties
{
    /// 
    /// Allows to stop the batching phase and will cause to an immediate ingestion.
    /// Defaults to 'false'. 
    /// 
    public bool FlushImmediately { get; set; }
    /// 
    /// Controls the ingestion status report level.
    /// Defaults to 'FailuresOnly'.
    /// 
    public IngestionReportLevel ReportLevel { get; set; }
    /// 
    /// Controls the target of the ingestion status reporting. Available options are Azure Queue, Azure Table, or both.
    /// Defaults to 'Queue'.
    /// 
    public IngestionReportMethod ReportMethod { get; set; }
    /// 
    /// Controls the target of the ingestion status reporting. Available options are Azure Queue, Azure Table, or both.
    /// Defaults to 'Queue'.
    /// 
    public IngestionReportMethod ReportMethod;
    public KustoQueuedIngestionProperties(string databaseName, string tableName);
}
```