### Insecure Internal Storage in Android
**Claud Xiao**  
HITCON, Taipei  
August 2014

#### Introduction
It is well-known that in Android:
- **External storage** is globally readable and writable, making it insecure.
- **Internal storage** is isolated for each app through a sandbox, which is generally considered secure.

According to Google's recommendations, applications should store sensitive data and configurations in the internal storage. However, this presentation will:
- Present an attack that can read and write data in internal storage by combining known attacks and vulnerabilities.
- Explain why 94.2% of popular apps are vulnerable.
- Disclose a category of apps that store passwords in plaintext, which are susceptible to the attack, affecting billions of Android users and potentially leading to the leakage of enterprise or server accounts.
- Discuss potential mitigation strategies.

#### Attacks
##### ADB Backup and Restore
- **Android Debug Bridge (ADB)**
  - **ADB Backup**: Fully backs up almost all apps' internal data from the device to a PC.
    - Encryption with a password is optional but not enforced.
  - **ADB Restore**: Restores a backup archive to the device.
    - Data in the archive can be modified before restoration.
  - For more details on the archive format, see: [Unpacking Android Backups](http://nelenkov.blogspot.com/2012/06/unpacking-android-backups.html)

##### Exceptions
- Apps that won't be backed up or restored:
  - Those with `android:allowBackup` set to `false` in `AndroidManifest.xml`.
  - Those that implement their own `BackupAgent`.
- If developers do not manually set `android:allowBackup`, its default value is `true`.

##### Known "Attack Surface"
- ADB backup and restore have been used to root Android devices, including some phone and tablet models (on XDA Developers) and even Google Glass.
- These methods are not designed for real attacks, as they require user interaction and are primarily for rooting personal devices.

##### Restrictions of Abusing ADB Backup/Restore
1. Connect to the target device via a USB cable.
2. The system must support ADB backup/restore.
3. ADB debugging must be enabled.
4. The device’s screen must be unlocked.
5. The PC must pass ADB authentication.
6. Click “Back up my data” in the ADB backup interface.

#### Bypassing Restrictions
##### Connecting to the Device
- **Bridge-way**: Use the victim’s PC as a bridge/proxy.
  - Assume the attacker has compromised the victim’s PC with malware or phishing and plans to attack remotely.
  - Automation of all further steps is required.
- **Direct-way**: Directly attack the victim’s Android device.
  - Assume the attacker can physically access the target device temporarily.
  - This allows for manual interactions with the device in subsequent steps.

##### Finding a Bridge/Proxy
- Cross-infection between PCs and mobile devices:
  - **Mobile -> PC**: USBCleaver, Ssucl, etc.
  - **PC -> Mobile**: Zitmo, Droidpak, WinSpy/GimmeRat, etc.
- Other bridges include customized remote control spy boxes, similar to the Mactans presented at Black Hat 2013 or the “Juice-Jacking” attack.

##### Physical Access to a Device
- **Intentional**: Steal, borrow, or buy the device from the victim’s family.
- **Unintentional**: Purchase second-hand devices from resellers, find a lost phone, or interact with public Android embedded devices.

##### System Support for ADB Backup/Restore
- Introduced in Android ICS 4.0.
- As of July 7, 2014, ~85.8% of devices support it.
- Google reported over 1 billion 30-day active users on the Android platform in June 2014.

##### Enabling ADB Debugging
- Some enthusiasts have enabled it.
- Many PC auxiliary tools guide users to enable it.
- Some vendors enable it by default.
- Utilities like adbWireless can allow normal apps to use ADB debugging locally, bypassing the sandbox.

##### Bypassing ADB Authentication
- In devices supporting ADB, 45.7% do not have ADB authentication (as of July 7, 2014).
- For the remaining 54.3%:
  - In the bridge-way, assume the victim’s PC has already passed authentication.
  - In the direct-way, if the device screen is unlocked, manually approve it.
  - If the device screen is locked, use disclosed vulnerabilities to bypass it (affects Android <= 4.4.2).

##### Unlocking the Device Screen
- Not all users use screen locks.
- If the screen is locked, use ADB to disable it (e.g., CVE 2013-6271 for Android 4.0 - 4.3).
- Optionally, use existing exploits to gain root privileges and disable the lock (e.g., CVE-2014-3153 or Android bug #12504045, affecting almost all Android devices).

##### Automating User Interaction
- In the direct-way, manually click the confirmation button.
- In the bridge-way, simulate user clicks using `adb shell sendkey` to automate the process in the background.

#### Conclusions
1. It is highly possible to attack via USB cable through a PC or by physically accessing the device.
2. 85.8% of 1 billion devices support ADB backup.
3. ADB debugging is often enabled or can be enabled with special hardware.
4. ADB authentication can be bypassed in most cases.
5. Screen locks can be bypassed in many instances.
6. User interactions can be automated.

#### Demos
- **Bridge-way**:
  - Nexus 4, Android 4.3
  - ADB debugging enabled
  - PC authenticated
  - Screen locked
  - Fully automated
- **Direct-way**:
  - Nexus 4, Android 4.4.2
  - ADB debugging enabled
  - PC not authenticated
  - Screen locked

#### Impact
- If an app can be backed up/restored, attackers can:
  - Read internal sensitive data (e.g., passwords, tokens).
  - Modify sensitive data or configurations (e.g., login URLs for banking apps).
  - This poses a serious security risk.

#### Analysis of Popular Apps
- Analyzed 12,351 most popular apps from Google Play.
- 556 explicitly set `android:allowBackup` to `false`.
- 156 implemented a `BackupAgent` to restrict backup.
- The remaining 11,639 apps can be fully backed up and restored.

#### Statistics
- **Installation Counts**:
  - 500,000,000 - 1,000,000,000: 4 apps
  - 100,000,000 - 500,000,000: 35 apps
  - 50,000,000 - 100,000,000: 38 apps
  - 10,000,000 - 50,000,000: 524 apps
  - 5,000,000 - 10,000,000: 766 apps
  - 1,000,000 - 5,000,000: 5043 apps
  - 500,000 - 1,000,000: 5229 apps

- **Result**:
  - 94.2% of the most popular Android apps are under threat from this attack.

#### Next Steps
- From this perspective, anyone can easily identify numerous vulnerable apps. Further research and mitigation strategies are essential to address these security concerns.