The results are presented in Figure 2 which plots the number of correctly
recovered key bytes over the number of timed encryptions. The dash-dotted line
shows that the spy-process scenario completely recovers the key after only 217
encryptions. Prior to moving to the cross-VM scenario, a single VM scenario was
performed to gauge the impact of using VMs. The dotted line shows that due to
the noise introduced by virtualization we need to nearly double the number of
Wait a Minute! A fast, Cross-VM Attack on AES
315
encryptions to match the key recovery performance of the native case. The solid
line gives the result for the cross-VM attack: 219 observations are suﬃcient for
stable full key recovery. The diﬀerence might be due to cpuid like instructions
which are emulated by the hipervisor, therefore introducing more noise to the
attack. In the worst case, both the native spy process and the single VM attack
took around 25 seconds (for 400.000 encryptions). We believe that this is due to
communication via the localhost connection. However when we perform a cross-
VM attack it takes roughly twice as much time as in the previous cases. In this
case we are performing the communication via local IPs that have to reach the
router, which is believed to add the additional delay. This means that all of the
described attacks —even in the cross VM scenario— completely recover the key
in less than one minute!
6.1 Comparison to other Attacks
Next we compare the most commonly implemented cache-based side-channel
attacks to the proposed attack. Results are shown in Table 1. It is diﬃcult to
compare the attacks, since most of them have been run on diﬀerent platforms.
Many of the prior attacks target OpenSSL’s 0.9.8 version of AES. Most of
these attacks exploit the fact that AES has a separate T Table for the last
round, signiﬁcantly reducing the noise introduced by cache miss accesses. Hence,
attacks on OpenSSL0.9.8’s AES usually succeed much faster, a trend conﬁrmed
by our attack results. Note that our attack, together with [6] and [15] are the
only ones that have been run on a 64 bit processor. Moreover, we assume that
due to undocumented internal states and advanced features such as hardware
prefetchers, implementation on a 64 bit processor will add more noise than older
platforms running the attack. With respect to the number of encryptions, we
observe that the proposed attack has signiﬁcant improvements over most of the
previous attacks.
Spy Process in Native OS: Even though our attack runs in a noisier en-
vironment than Bernstein’s attack, evict and time, and cache timing collision
attacks, it shows better performance. Only prime and probe and Flush+Reload
using CFS show either comparable or better performance. The proposed attack
has better performance than prime and probe even though their measurements
were performed with the attack and the encryption being run as one unique pro-
cess. The Flush+Reload attack in [13] exploits a much stronger leakage, which
requires that attacker to interrupt the target AES between rounds (an
unrealistic assumption). Furthermore, Flush+Reload with CFS needs to monitor
the entire T tables, while our attack only needs to monitor a single line of the
cache, making the attack much more lightweight and subtle.
Cross-VM Attack: So far there is only one publication that has analyzed cache-
based leakage across VMs for AES [15]. Our proposed attack shows dramatic
improvements over [15], which needs 229 encryptions (hours of run time) for a
partial recovery of the key. Our attack only needs 219 encryptions to recover the
full key. Thus, while the attack presented in [15] needs to interact with the target
316
G. Irazoqui et al.
Table 1. Comparison of cache side-channel attack techniques against AES
Attack
Platform
Methodology
OpenSSL Traces
Spy-Process based Attacks:
Collision timing [9]
Prime+probe [19]
Evict+time [19]
Flush+reload (CFS) [13] Pentium M Flush+reload w/CFS 0.9.8m
i5-3320M L3 cache Flush+reload 0.9.8a
Our attack
Core2Duo
Bernstein [6]
1.0.1c
i5-3320M L3 cache Flush+reload 1.0.1f 100.000
Our attack
Pentium 4E Time measurement
0.9.8a 300.000
Pentium 4E L1 cache prime-probing 0.9.8a 16.000
Athlon 64
0.9.8a 500.000
Time measurement
100
8.000
222
L1 cache evicting
Cross-VM Attacks:
Bernstein [15]1
Our attack(VMware)
1 Only parts of the key were recovered, not the whole key.
2 The AES implementation was not updated for the recently released OpenSSL
1.0.1g and 1.0.2 beta versions. So the results for those libraries are identical.
i5-3320M
1.0.1f
i5-3320M L3 cache Flush+reload 1.0.1f
Time measurement
2 400.000
230
for several hours, our attack succeeds in under a minute and recovers the entire
key. Note that, the CFS enabled Flush+Reload attack in [13] will not work in
the cross-VM setting, since the attacker has no control over victim OS’s CFS.
7 Countermeasures
AES-NI: Using AES-NI instructions solves the cache-access leakage for AES.
In this case the AES encryption does not use the memory but it uses speciﬁc
hardware instructions, avoiding the possibility of implementing a cache-based
side-channel attack completely. However, AES is not the only symmetric cipher
in use nowadays: the problem remains for other encryption algorithms for which
hardware acceleration is not provided.
Cache Prefetching: Prefetching the T tables (or other table-based look-ups
for other ciphers) prior to each AES round execution can mitigate the problem
of using them as a source for side-channel attacks. An attacker cannot observe
diﬀerences between access times if all T table values reside in the cache before
the execution. However, since T tables have a total size of 4KB, this would
require to ﬁll a large portion of the cache. The prefetching also takes time, and
this would increase the encryption time for AES. OpenSSL provides an assembly
version of AES that uses this technique (among others like bit slicing and vector
permutation) to avoid having cache leakage due to T table accesses.
Cache Flushing: Flushing each of the T table values after the AES execution
will have the similar consequences as prefetching them before the execution [15].
Wait a Minute! A fast, Cross-VM Attack on AES
317
When the attacker wants to decide whether a line has been accessed, he will
ﬁnd that the T tables are in the memory and therefore, he will not see any time
diﬀerences. Again this implies a higher execution time. With such a counter-
measure the only possibility left to the attacker is to block the AES execution
during some of its rounds (as done in [13]). Hence, this would mitigate cross-VM
attacks and require a more advanced attacker than we considered for our attack.
Restricting the Deduplication: Disabling the deduplication would make the
attack impossible in the cloud however memory deduplication is highly per-
formance beneﬁcial, especially in cloud where multiple users share the same
hardware. This is why we believe that the system designers should restrict the
deduplication mechanism rather then completely disabling it. The madvise [12]
system call that manages the deduplication process scans only selected portions
of the memory. One can exploit this feature and limit the resource sharing be-
tween VMs. This limitation can either be on hardware or software level. As
suggested by Wang and Lee [30] the OS can enforce a smart process scheduling
method to protect critical processes with sensitive data and make sure that they
are never shared between VMs.
8 Conclusion
Flush+Reload in AES: A New Fine Grain Attack: Our experiments show
that if applied in a clever way, Flush+Reload is a ﬁne grain attack on AES
and can recover the whole key. Furthermore, the attack can be applied to any
block cipher that uses a T table based implementation. The attack has to take
advantage of deduplication so that victim and attacker share the same memory.
Making The Attack Feasible in The Cloud: We not only performed the
attack in native machine, but also in a cloud-like cross-VM scenario. Although
there is more noise in the latter scenario, the attack recovers the key with just
400.000 encryptions. In this case, the attacker has to take advantage of some
memory sharing mechanism (such as TPS in VMware).
Lightning-Fast Attack: Even in the worst case scenario (cross-VM) the attack
succeeds in less than a minute. To the best of our knowledge, no faster attack
has been implemented against AES in a realistic cloud-like setting. This also
means that just one minute of co-location with the encryption server suﬃces to
recover the key.
Acknowledgments. This work is supported by the National Science Founda-
tion, under grant CNS-1318919 and CNS-1314770. We would like to thank the
anonymous reviewers of RAID 2014 for their helpful comments, in particular for
pointing out that disabling the ASLR on the attacker’s side is not needed. We
would like to thank Dan Bernstein for his helpful comments on the related work
and history of cache attacks as well as Huzaifa Sidhpurwala for pointing out the
partially protected assembly implementations of AES in OpenSSL.
318
G. Irazoqui et al.
References
1. CFS Scheduler
(April 2014), https://www.kernel.org/doc/Documentation/
scheduler/sched-design-CFS.txt
2. Kernel Based Virtual Machine (April 2014), http://www.linux-kvm.org/page/
Main_Page
3. Kernel Samepage Merging (April 2014), http://kernelnewbies.org/Linux_2_6_
32#head-d3f32e41df508090810388a57efce73f52660ccb/
4. Acıi¸cmez, O.: Yet Another MicroArchitectural Attack: Exploiting I-Cache. In: Pro-
ceedings of the 2007 ACM Workshop on Computer Security Architecture, CSAW
2007, pp. 11–18. ACM, New York (2007)
5. Acıi¸cmez, O., Ko¸c, C¸ .K.: Trace-driven cache attacks on AES (short paper). In:
Ning, P., Qing, S., Li, N. (eds.) ICICS 2006. LNCS, vol. 4307, pp. 112–121. Springer,
Heidelberg (2006)
6. Aly, H., ElGayyar, M.: Attacking AES Using Bernstein’s Attack on Modern Pro-
cessors. In: Youssef, A., Nitaj, A., Hassanien, A.E. (eds.) AFRICACRYPT 2013.
LNCS, vol. 7918, pp. 127–139. Springer, Heidelberg (2013)
7. Arcangeli, A., Eidus, I., Wright, C.: Increasing memory density by using KSM. In:
Proceedings of the Linux Symposium, pp. 19–28 (2009)
8. Bernstein, D.J.: Cache-timing attacks on AES (2004), http://cr.yp.to/papers.
html#cachetiming
9. Bonneau, J., Mironov, I.: Cache-Collision Timing Attacks against AES. In: Goubin,
L., Matsui, M. (eds.) CHES 2006. LNCS, vol. 4249, pp. 201–215. Springer, Heidel-
berg (2006)
10. Brumley, D., Boneh, D.: Remote Timing Attacks are Practical. In: Proceedings of
the 12th USENIX Security Symposium, pp. 1–14 (2003)
11. Daemen, J., Rijmen, V.: The Design of Rijndael. Springer (2002)
12. Eidus, I., Dickins, H.: How to use the Kernel Samepage Merging feature (November
2009), https://www.kernel.org/doc/Documentation/vm/ksm.txt
13. Gullasch, D., Bangerter, E., Krenn, S.: Cache Games – Bringing Access-Based
Cache Attacks on AES to Practice. In: IEEE Symposium on Security and Privacy,
pp. 490–505 (2011)
14. Hu, W.-M.: Lattice scheduling and covert channels. In: Proceedings of the 1992
IEEE Symposium on Security and Privacy, SP 1992, p. 52. IEEE Computer Society,
Washington, DC (1992)
15. Irazoqui, G., Inci, M.S., Eisenbarth, T., Sunar, B.: Fine grain Cross-VM Attacks
on Xen and VMware are possible, https://eprint.iacr.org/2014/248.pdf
16. Kelsey, J., Schneier, B., Wagner, D., Hall, C.: Side Channel Cryptanalysis of Prod-
uct Ciphers. J. Comput. Secur. 8(2,3), 141–158 (2000)
17. Neve, M.: Cache-based Vulnerabilities and SPAM analysis. Doctor thesis, UCL
(2006)
18. National Institute of Standards and Technology. Advanced Encryption Standard.
NIST FIPS PUB 197 (2001)
19. Osvik, D.A., Shamir, A., Tromer, E.: Cache Attacks and Countermeasures: The
Case of AES. In: Pointcheval, D. (ed.) CT-RSA 2006. LNCS, vol. 3860, pp. 1–20.
Springer, Heidelberg (2006)
20. Page, D.: Theoretical Use of Cache Memory as a Cryptanalytic Side-Channel (2002)
21. Ristenpart, T., Tromer, E., Shacham, H., Savage, S.: Hey, You, Get oﬀ of My Cloud:
Exploring Information Leakage in Third-party Compute Clouds. In: Proceedings
of the 16th ACM Conference on Computer and Communications Security, CCS
2009, pp. 199–212. ACM, New York (2009)
Wait a Minute! A fast, Cross-VM Attack on AES
319
22. Suzaki, K., Iijima, K., Toshiki, Y., Artho, C.: Implementation of a Memory Disclo-
sure Attack on Memory Deduplication of Virtual Machines. Communications and
Computer Sciences 96(1), 215–224 (2013)
23. Suzaki, K., Iijima, K., Yagi, T., Artho, C.: Memory deduplication as a threat to the
guest OS. In: Proceedings of the Fourth European Workshop on System Security,
p. 1. ACM (2011)
24. Suzaki, K., Iijima, K., Yagi, T., Artho, C.: Software side channel attack on memory
deduplication. SOSP POSTER (2011)
25. Suzaki, K., Iijima, K., Yagi, T., Artho, C.: Eﬀects of Memory Randomization,
Sanitization and Page Cache on Memory Deduplication
26. The OpenSSL Project. OpenSSL: The open source toolkit for SSL/TLS (April
2003), http://www.openssl.org
27. Tsunoo, Y., Saito, T., Suzaki, T., Shigeri, M., Miyauchi, H.: Cryptanalysis of DES
implemented on computers with cache. In: Walter, C.D., Ko¸c, C¸ .K., Paar, C. (eds.)
CHES 2003. LNCS, vol. 2779, pp. 62–76. Springer, Heidelberg (2003)
28. VMware. Understanding Memory Resource Management in VMware vSphere 5.0,
http://www.vmware.com/files/pdf/mem_mgmt_perf_vsphere5.pdf
29. Waldspurger, C.A.: Memory resource management in VMware ESX server. ACM
SIGOPS Operating Systems Review 36(SI), 181–194 (2002)
30. Wang, Z., Lee, R.B.: Covert and side channels due to processor architecture. In:
22nd Annual Computer Security Applications Conference, ACSAC 2006, pp. 473–
482. IEEE (2006)
31. Weiß, M., Heinz, B., Stumpf, F.: A Cache Timing Attack on AES in Virtualization
Environments. In: Keromytis, A.D. (ed.) FC 2012. LNCS, vol. 7397, pp. 314–328.
Springer, Heidelberg (2012)
32. Yarom, Y., Benger, N.: Recovering OpenSSL ECDSA Nonces Using the
FLUSH+RELOAD Cache Side-channel Attack. Cryptology ePrint Archive, Re-
port 2014/140 (2014), http://eprint.iacr.org/
33. Yarom, Y., Falkner, K.E.: Flush+Reload: a High Resolution, Low Noise, L3 Cache
Side-Channel Attack. IACR Cryptology ePrint Archive, 448 (2013)
34. Zhang, Y., Juels, A., Reiter, M.K., Ristenpart, T.: Cross-VM Side Channels and
Their Use to Extract Private Keys. In: Proceedings of the 2012 ACM Confer-
ence on Computer and Communications Security, CCS 2012, pp. 305–316. ACM,
New York (2012)