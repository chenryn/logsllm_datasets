      "  pushl $.AFL_SHM_ENVn"
      "  call  getenvn"
      "  addl  $4, %espn"
      "n"
      "  testl %eax, %eaxn"
      "  je    __afl_setup_abortn"
      "n"
      "  pushl %eaxn"
      "  call  atoin"
      "  addl  $4, %espn"
      "n"
      "  pushl $0          /* shmat flags    */n"
      "  pushl $0          /* requested addr */n"
      "  pushl %eax        /* SHM ID         */n"
      "  call  shmatn"
      "  addl  $12, %espn"
      "n"
      "  cmpl $-1, %eaxn"
      "  je   __afl_setup_abortn"
      "n"
      "  /* Store the address of the SHM region. */n"
      "n"
      "  movl %eax, __afl_area_ptrn"
      "  movl %eax, %edxn"
      "n"
      "  popl %ecxn"
      "  popl %eaxn"
      "n"
      "__afl_forkserver:n"
      "n"
      "  /* Enter the fork server mode to avoid the overhead of execve() calls. */n"
      "n"
      "  pushl %eaxn"
      "  pushl %ecxn"
      "  pushl %edxn"
      "n"
      "  /* Phone home and tell the parent that we're OK. (Note that signals withn"
      "     no SA_RESTART will mess it up). If this fails, assume that the fd isn"
      "     closed because we were execve()d from an instrumented binary, or becausen" 
      "     the parent doesn't want to use the fork server. */n"
      "n"
      "  pushl $4          /* length    */n"
      "  pushl $__afl_temp /* data      */n"
      "  pushl $" STRINGIFY((FORKSRV_FD + 1)) "  /* file desc */n"
      "  call  writen"
      "  addl  $12, %espn"
      "n"
      "  cmpl  $4, %eaxn"
      "  jne   __afl_fork_resumen"
      "n"
      "__afl_fork_wait_loop:n"
      "n"
      "  /* Wait for parent by reading from the pipe. Abort if read fails. */n"
      "n"
      "  pushl $4          /* length    */n"
      "  pushl $__afl_temp /* data      */n"
      "  pushl $" STRINGIFY(FORKSRV_FD) "        /* file desc */n"
      "  call  readn"
      "  addl  $12, %espn"
      "n"
      "  cmpl  $4, %eaxn"
      "  jne   __afl_dien"
      "n"
      "  /* Once woken up, create a clone of our process. This is an excellent usen"
      "     case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedlyn"
      "     caches getpid() results and offers no way to update the value, breakingn"
      "     abort(), raise(), and a bunch of other things :-( */n"
      "n"
      "  call forkn"
      "n"
      "  cmpl $0, %eaxn"
      "  jl   __afl_dien"
      "  je   __afl_fork_resumen"
      "n"
      "  /* In parent process: write PID to pipe, then wait for child. */n"
      "n"
      "  movl  %eax, __afl_fork_pidn"
      "n"
      "  pushl $4              /* length    */n"
      "  pushl $__afl_fork_pid /* data      */n"
      "  pushl $" STRINGIFY((FORKSRV_FD + 1)) "      /* file desc */n"
      "  call  writen"
      "  addl  $12, %espn"
      "n"
      "  pushl $0             /* no flags  */n"
      "  pushl $__afl_temp    /* status    */n"
      "  pushl __afl_fork_pid /* PID       */n"
      "  call  waitpidn"
      "  addl  $12, %espn"
      "n"
      "  cmpl  $0, %eaxn"
      "  jle   __afl_dien"
      "n"
      "  /* Relay wait status to pipe, then loop back. */n"
      "n"
      "  pushl $4          /* length    */n"
      "  pushl $__afl_temp /* data      */n"
      "  pushl $" STRINGIFY((FORKSRV_FD + 1)) "  /* file desc */n"
      "  call  writen"
      "  addl  $12, %espn"
      "n"
      "  jmp __afl_fork_wait_loopn"
      "n"
      "__afl_fork_resume:n"
      "n"
      "  /* In child process: close fds, resume execution. */n"
      "n"
      "  pushl $" STRINGIFY(FORKSRV_FD) "n"
      "  call  closen"
      "n"
      "  pushl $" STRINGIFY((FORKSRV_FD + 1)) "n"
      "  call  closen"
      "n"
      "  addl  $8, %espn"
      "n"
      "  popl %edxn"
      "  popl %ecxn"
      "  popl %eaxn"
      "  jmp  __afl_storen"
      "n"
      "__afl_die:n"
      "n"
      "  xorl %eax, %eaxn"
      "  call _exitn"
      "n"
      "__afl_setup_abort:n"
      "n"
      "  /* Record setup failure so that we don't keep callingn"
      "     shmget() / shmat() over and over again. */n"
      "n"
      "  incb __afl_setup_failuren"
      "  popl %ecxn"
      "  popl %eaxn"
      "  jmp __afl_returnn"
      "n"
      ".AFL_VARS:n"
      "n"
      "  .comm   __afl_area_ptr, 4, 32n"
      "  .comm   __afl_setup_failure, 1, 32n"
    #ifndef COVERAGE_ONLY
      "  .comm   __afl_prev_loc, 4, 32n"
    #endif /* !COVERAGE_ONLY */
      "  .comm   __afl_fork_pid, 4, 32n"
      "  .comm   __afl_temp, 4, 32n"
      "n"
      ".AFL_SHM_ENV:n"
      "  .asciz "" SHM_ENV_VAR ""n"
      "n"
      "/* --- END --- */n"
      "n";
## afl-fuzz.c
这个是我们fuzz启动的入口，代码8000+行(看的我都麻木了- -)，下面会挑核心的逻辑来讲，细枝末节不再赘述。
从main函数开始，先是获取时间/扔随机数种子/解析参数/设置异常处理/设置环境变量/设置banner/检查终端/获取CPU核数，然后到了设置共享内存的函数
    EXP_ST void setup_shm(void) {
      u8* shm_str;
      if (!in_bitmap) memset(virgin_bits, 255, MAP_SIZE);
      //数组用来存储有无见过崩溃/tmouts
      memset(virgin_tmout, 255, MAP_SIZE);
      memset(virgin_crash, 255, MAP_SIZE);
      shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);
      if (shm_id < 0) PFATAL("shmget() failed");
      atexit(remove_shm);
      shm_str = alloc_printf("%d", shm_id);
      /* If somebody is asking us to fuzz instrumented binaries in dumb mode,
         we don't want them to detect instrumentation, since we won't be sending
         fork server commands. This should be replaced with better auto-detection
         later on, perhaps? */
      if (!dumb_mode) setenv(SHM_ENV_VAR, shm_str, 1);
      ck_free(shm_str);
      //shm_id是这块共享内存的标识id，NULL地址让系统自动选择合适的一块进行分配
      trace_bits = shmat(shm_id, NULL, 0);
      if (!trace_bits) PFATAL("shmat() failed");
    }
下面是对不同的执行次数进行划分(比如32次到127次都会认为是64次)
    static const u8 count_class_lookup8[256] = {
      [0]           = 0,
      [1]           = 1,
      [2]           = 2,
      [3]           = 4,
      [4 ... 7]     = 8,
      [8 ... 15]    = 16,
      [16 ... 31]   = 32,
      [32 ... 127]  = 64,
      [128 ... 255] = 128
    };
    static u16 count_class_lookup16[65536];
    EXP_ST void init_count_class16(void) {