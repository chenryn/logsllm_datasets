title:Impossibility of Precise and Sound Termination-Sensitive Security
Enforcements
author:Minh Ngo and
Frank Piessens and
Tamara Rezk
2018 IEEE Symposium on Security and Privacy
Impossibility of Precise and Sound
Termination-Sensitive Security Enforcements
Minh Ngo
INRIA, France
PI:EMAIL
Frank Piessens
imec-DistriNet, KU Leuven, Belgium
PI:EMAIL
Tamara Rezk
INRIA, France
PI:EMAIL
Abstract—An information ﬂow policy is termination-sensitive
if it imposes that the termination behavior of programs is not
inﬂuenced by conﬁdential input. Termination-sensitivity can be
statically or dynamically enforced. On one hand, existing static
enforcement mechanisms for termination-sensitive policies are
typically quite conservative and impose strong constraints on pro-
grams like absence of while loops whose guard depends on con-
ﬁdential information. On the other hand, dynamic mechanisms
can enforce termination-sensitive policies in a less conservative
way. Secure Multi-Execution (SME) [1], one of such mechanisms,
was even claimed to be sound and precise in the sense that the
enforcement mechanism will not modify the observable behavior
of programs that comply with the termination-sensitive policy.
However, termination-sensitivity is a subtle policy, that has been
formalized in different ways. A key aspect is whether the policy
talks about actual termination, or observable termination.
This paper proves that termination-sensitive policies that talk
about actual termination are not enforceable in a sound and
precise way. For static enforcements, the result follows directly
from a reduction of the decidability of the problem to the halting
problem. However, for dynamic mechanisms the insight is more
involved and requires a diagonalization argument.
In particular, our result contradicts the claim made about
SME. We correct these claims by showing that SME enforces a
subtly different policy that we call indirect termination-sensitive
noninterference and that talks about observable termination
instead of actual termination. We construct a variant of SME
that
termination-sensitive
noninterference. Finally, we also show that static methods can
be adapted to enforce indirect termination-sensitive information
ﬂow policies (but obviously not precisely) by constructing a sound
type system for an indirect termination-sensitive policy.
is sound and precise for indirect
I. INTRODUCTION
Information ﬂow policies are widely studied security poli-
cies [2]. Roughly, they state that public outputs of a program
are not inﬂuenced by conﬁdential inputs. Dually, for integrity,
trusted outputs are not inﬂuenced by untrusted inputs. Infor-
mation ﬂow policies restrict how information can ﬂow in a
program: information should not ﬂow from high (conﬁdential,
respectively untrusted) inputs to low (public, respectively
trusted) outputs. This can be generalized from high and low
(a 2-element lattice) to an arbitrary lattice of security levels.
Many information ﬂow policies exist. Different deﬁnitions
cater for different programming models (e.g. sequential ver-
sus concurrent programming, or interactive versus batch-style
programming), differ in the classes of information channels
they consider (e.g. whether timing and/or termination channels
© 2018, Minh Ngo. Under license to IEEE.
DOI 10.1109/SP.2018.00048
496
are taken into account), or allow for intentional release of
information (e.g. declassiﬁcation or endorsement).
This paper focuses on the termination-sensitivity aspect
of information ﬂow policies [3] in deterministic programs.
Roughly, an information ﬂow policy is termination-sensitive, if
(next to low outputs also) termination of the program is not in-
ﬂuenced by high inputs. Let us consider a simple termination-
sensitive information ﬂow policy called termination-sensitive
noninterference (TSNI) for sequential deterministic batch-style
programs. Sequential deterministic batch-style programs take
a tuple consisting of a low and a high input (iL, iH ), and
produce a tuple with a low and a high output (oL, oH ). TSNI
(cid:2)
for such programs p can be formalized as: for all iL, iH , i
H,
(cid:2)
the executions of p on (iL, iH ) and on (iL, i
H ) either (1) both
terminate with the same low output, or (2) both diverge. In
other words, the low output and the termination behavior of
the program are independent of the high inputs.
least
Surprisingly, termination-sensitive information ﬂow policies
cannot be enforced soundly and precisely, at
in the
case of deterministic programs. This is surprising because of
previous results [1], [4]–[6] on TSNI mechanisms. The main
contribution of this paper is a proof of impossibility for the
deterministic case: for static termination-sensitive information
ﬂow enforcement mechanisms,
the result follows from a
reduction of the decidability of the problem to the halting
problem [7]. However, for dynamic mechanisms the insight is
more involved and requires a diagonalization argument.
Another contribution of this paper is that we show that a dy-
namic enforcement mechanism called Secure Multi-Execution
(SME) [1] claimed to enforce TSNI actually enforces a subtly
different policy that we call Indirect TSNI (ITSNI). ITSNI
says that the non-termination of a program due to speciﬁc
high inputs cannot be observed by a low observer, under some
model of what a low observer can observe (for instance, such
an observer can only observe the low outputs, and hence learns
about termination indirectly in the sense that no more outputs
are produced).
For the conﬁdentiality interpretation of policies, the choice
between TSNI and ITSNI is essentially a choice of attacker
model: what exactly can an attacker observe about non-
termination? If we assume attackers can observe actual com-
putation, for instance because they can monitor the CPU
load, then TSNI is the appropriate policy. But in many cases
attackers learn about termination only indirectly, for instance
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
by means of an explicit end-of-program output, or even
more indirectly because no further output is produced. The
results of this paper show that the difference between these
attacker models is signiﬁcant: while TSNI cannot be enforced
soundly and precisely, ITSNI can. The essential insight is
that if the attacker learns about termination indirectly, then an
enforcement mechanism can fake termination. For instance,
the enforcement mechanism can make attackers believe the
program terminated by sending an end-of-program output to
low observers, even while it is still doing work to compute
high outputs. This power to fake termination is sufﬁcient to
construct sound and precise enforcement mechanisms.
For the integrity interpretation of policies, the choice be-
tween TSNI and ITSNI is essentially a choice of security
objective. TSNI enforces that an attacker cannot inﬂuence
program termination by means of low (untrusted) inputs.
This is a sensible security objective if one cares about the
consumption of CPU cycles: malicious untrusted inputs should
for instance not unexpectedly lead the program into an inﬁnite
loop. ITSNI enforces that untrusted inputs cannot inﬂuence
whether the program appears to be terminating with respect to
trusted outputs, for instance malicious untrusted inputs cannot
unexpectedly lead to an inﬁnite number of trusted outputs.
This is a sensible security objective if one cares for instance
about consumption of storage space for these trusted outputs.
For the remainder of the paper, we will mainly take the
conﬁdentiality perspective of policies, but all our results can
be dualized for integrity.
In summary, the main contributions of this paper are:
• We prove an impossibility result: termination-sensitive
information ﬂow policies cannot be enforced soundly and
precisely for deterministic programs.
• We correct some inaccuracies in the literature: we show
that SME [1] previously claimed to soundly and precisely
enforce TSNI actually does not. Even when the lattice is
totally ordered, SME [1], in fact, enforces a weakened
notion that we call Indirect TSNI, or ITSNI. Unfortu-
nately, SME as presented in [1] does not precisely enforce
ITSNI.
The remainder of
• We show the usefulness of ITSNI by constructing a
dynamic enforcement mechanism (based on SME) which
is sound and precise, as well as a static enforcement
mechanism which is sound.
this paper
is structured as follows:
Section II presents the impossibility result in a simple and
general setting. Section III presents our language setting.
Section IV presents the security policies for our language.
Section V presents the deﬁnitions of enforcement mechanism
in our language and instantiates the proof of Section II
to the information ﬂow policy of termination-sensitive non
interference, our language, and enforcement mechanism. Sec-
tion VI explains the failure of SME with low-prio scheduler on
enforcing soundly and precisely TSNI, and presents security
guarantees of SME with low-prio scheduler. It also presents
a sound and precise enforcement mechanism for ITSNI.
Section VII presents a static enforcement mechanism for
ITSNI. Section VIII discusses related work. We conclude in
Section IX.
II. IMPOSSIBILITY RESULT
Our objective in this section is to prove that TSNI cannot
be enforced soundly and precisely. We prove this impossibility
result for a very simple case: batch programs from natural
numbers to natural numbers, where both the input number as
well as the output number are labeled H. Hence TSNI for this
case just says that the input should not inﬂuence termination
behaviour, or in other words, such a program is TSNI if it
either (1) diverges on all inputs or (2) converges on all inputs.
The fact that we can prove the impossibility result for such
a simple case makes the result stronger. The proof for this
simple case implies that it is also impossible to soundly and
precisely enforce TSNI for more complex cases. For instance,
if we were to have a sound and precise enforcement mecha-
nism for batch programs that take both L and H inputs and
produce L and H outputs, then, by applying that mechanism to
the subset of programs that only take H inputs and produce H
outputs, we would have again a sound and precise enforcement
mechanism for the simple case – and we have proven that to
be impossible.
A. Programs, policies and enforcement mechanisms
Without loss of generality, we consider a complete pro-
gramming language for writing deterministic programs that
compute functions from N to N, where N is the set of the
natural numbers.
We construct an enumeration of all programs in this lan-
guage, and we write Px to refer to the program at the x-th
position in the enumeration. Each program Px corresponds to
a partial recursive function ϕx : N → N, such that:
(cid:2)
ϕx(y) =
z
undeﬁned
if Px(y) = z,
if Px(y) divergent.
Two partial functions ϕx and ϕx(cid:2) are equal (denoted by
ϕx = ϕx(cid:2)) if for all y, either ϕx(y) and ϕx(cid:2) (y) are deﬁned
and equal or ϕx(y) and ϕx(cid:2) (y) are not deﬁned. We denote the
range of ϕx as range(ϕx).
We deﬁne a policy P to be a set of programs, to be thought
of as the set of programs allowed by the policy. We require that
if Px ∈ P and Px and Px(cid:2) are equivalent (that is ϕx = ϕx(cid:2)),
then Px(cid:2) ∈ P. We write ϕx ∈ P when Px ∈ P.
An enforcement mechanism is a mechanism to make sure
that programs comply with a given policy. Such mechanisms
can be static (like a type system), or dynamic (like a refer-
ence monitor or a taint tracker). By deﬁning an enforcement
mechanism to be a total recursive function from programs to
programs, as in e.g. [8], [9], we cover all these cases: a static
enforcement mechanism is a function that rejects some input
programs, and returns the programs that pass the static check
unmodiﬁed, whereas a dynamic enforcement mechanism is a
function that inlines the necessary dynamic checks in the input
program. By using our enumeration of programs, we can think
of an enforcement mechanism as a function from N to N.
497
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition II.1. An enforcement mechanism EM of P is a total,
recursive function from N to N. An enforcement mechanism
is said to be sound, respectively precise, if it satisﬁes:
• Soundness: ∀x ∈ N : ϕEM(x) ∈ P.
• Precision: ∀x ∈ N : ϕx ∈ P =⇒ ϕEM(x) = ϕx.
The soundness requirement makes sure that the mechanism
actually enforces the policy: every program that is an output
of the enforcement mechanism complies with the policy.
Soundness is a very common requirement on both static and
dynamic enforcement mechanisms.
The precision requirement constrains what the enforcement
mechanism can do to programs that already satisfy the policy.
In the ideal case, an enforcement mechanism would leave
such programs untouched: the mechanism does not have to
do anything if the program on which it is operating already
satisﬁes the policy. However, since it is in general undecidable
whether the input program satisﬁes the policy, an enforce-
ment mechanism might insert some defensive checks anyway.
Hence, it makes sense to only require that the enforcement
mechanism transforms the program to some possibly other
program, but one that
is indistinguishable from the input
program. While the program has changed syntactically by the
insertion of the defensive checks, for a program that complies
with the policy these defensive checks will not change the
semantics of the program. The notion of indistinguishability
that
is used can depend on the kind of programs one is
considering, but in our simple setting here, the only notion of
indistinguishability that makes sense is extensional function
equality, and that is what the deﬁnition above captures.
Static enforcement mechanisms are usually not precise,
as most
interesting policies are undecidable and hence a
static mechanism will conservatively reject some programs
that actually satisfy the policy. However, precise (and sound)
dynamic mechanisms exist for interesting policies like nonin-
terference [9] deﬁned for terminating programs.
P, we have that
If EM is a sound and precise enforcement mechanism for
(cid:2)
EM(x) =
(cid:2)
(cid:2)(cid:2)
x
x
if ϕx ∈ P, where ϕx = ϕx(cid:2),
if ϕx (cid:6)∈ P, where ϕx(cid:2)(cid:2) ∈ P.
B. Termination-sensitivity cannot be soundly and precisely
enforced
We now formalize the very simple case of a TSNI policy
for batch programs from N to N where both the input number
and the output number are H, and we call it the termination-
sensitive policy.
Deﬁnition II.2 (Termination-Sensitive Policy). A program
satisﬁes the termination-sensitive (TS) policy (denoted by
P ∈ T S) if for all x1 and x2:
(∃y1 ∈ N : P (x1) = y1) =⇒ (∃y2 ∈ N : P (x2) = y2)
It is straightforward to see from Deﬁnition II.2 that Px ∈
T S if and only if Px either converges on all inputs or diverges
on all inputs.
498
Now we are ready to prove our impossibility result.
Theorem II.1. There is no sound and precise enforcement
mechanism for TS.
Proof. The proof is a relatively straightforward diagonaliza-
tion argument similar to the proof that the set of all indices
of total programs is not decidable [7].
Suppose that
there is a sound and precise enforcement
mechanism for TS. We have that:
(cid:2)
EM(x) =
x
x
(cid:2)
(cid:2)(cid:2)
if ϕx ∈ T S, where ϕx = ϕx(cid:2),
if ϕx (cid:6)∈ T S, where ϕx(cid:2)(cid:2) ∈ T S.
Given such an EM, we can construct a function ψ whose
range will be a set of indices of programs that are all total.
We construct ψ as below:
(cid:2)
ψ(x) =
EM(x)
divergent
if PEM(x)(x) convergent,
if PEM(x)(x) divergent.
Since EM is total and recursive, from Church’s Thesis, it fol-
lows that ψ is a partial recursive function. Let A = range(ψ)
be the range of ψ, and AConv (cid:2) {x|∀y : ϕx(y) deﬁned}
be the set of all indices of all programs that converge on all
inputs.
have that:
From the property of EM and the construction of ψ, we
1) x ∈ A =⇒ x ∈ AConv,
2) x ∈ AConv =⇒ ∃x
3) A is inﬁnite (notice that the set of all total recursive
(cid:2) ∈ A : ϕx = ϕx(cid:2),
functions is inﬁnite).
So we see that A is very close to the set of indices of all total
programs. We can now use a diagonalization argument.
Since A is the range of a partial recursive function, from
Corollary 5.V(a) in [7], A is recursively enumerable and hence,
there is a total and recursive function f s.t. A = range(f ).
From f, we ﬁrst construct a one-to-one function h with the
same range as f, as deﬁned below, where for an x, θy[∀i ≤