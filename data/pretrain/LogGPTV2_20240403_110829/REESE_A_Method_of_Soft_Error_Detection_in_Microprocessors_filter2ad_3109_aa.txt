title:REESE: A Method of Soft Error Detection in Microprocessors
author:Joel B. Nickel and
Arun K. Somani
REESE: A Method of Soft Error Detection in Microprocessors* 
Joel B. Nickel and Arun K. Somani 
Department of Electrical  and Computer Engineering 
Iowa State University 
Ames, Iowa 5001 1 
{jbn, arun) @iastate.edu 
Abstract 
Future reliability of general-purpose processors (GPPs) 
is threatened by a combination of shrinking transistor size, 
higher clock rates, reduced supply voltages, and other fac- 
tors.  It  is predicted  that the occurrence  of  arbitrary  tran- 
sient faults,  or soft  errors,  will dramatically  increase  as 
these trends continue.  In this papec  we develop and evalu- 
ate u fault-tolerant niicroprocessor architecture that detects 
soft  errors in  its own datu pipeline.  This architecture ac- 
coniplishes  soft  error  detection  through  tinie  redundancy, 
while  requiring  little  execution  tinie  overhead.  Our ap- 
proach,  called REESE (REdundant Execution  using  Spare 
Elements), jirst niininiizes this overhead and then decreases 
it even further by strategically  adding a  m a l l  niiniber of 
functional units to the pipeline. This differs from siniilar ap- 
proaches in the past that have not addressed waj~s of  reduc- 
ing  the overhead necessaqt  to iniplenient tinie  redundancy 
in GPPs. 
1  Introduction 
Processor architectures are currently driven  by  the  fast 
pace of changes in technology. This development is keeping 
pace with  Moore's law, which  states that computer speed 
and memory capacity double every 18 months. Technologi- 
cal advances in general purpose processors (GPPs) and on- 
chip memories have significantly  increased the  speed  and 
density of these components. Progress has been made while 
maintaining, or even  increasing,  the reliability  of the  indi- 
vidual components. 
The reliability of future computer systems will be threat- 
ened by a variety of factors. One factor is the occurrence of 
soft errors.  An error can simply be defined as an inappro- 
priate change in the value of  a signal (from high to low, or 
'The  research reported in this paper was supported  in part by the NSF 
under Grant MIP 989602.5 
vice versa). Soft errors are arbitrary, transient errors caused 
by unstable environmental conditions. 
Although modern VLSI  chip fabrication  methods have 
improved  performance dramatically, they  also make chips 
more prone to soft errors.  Microprocessor design goals in- 
clude low power consumption and high performance.  De- 
signers  are rewarded  for systems  with  fast  switching  and 
low  voltage  levels,  and tolerance  levels of  circuit  designs 
are very small.  Each new generation of technology pushes 
the envelope just a little bit  further.  Downward  scaling of 
circuits imposes many design restrictions  [I].  As this con- 
tinues, soft errors due to environmental factors (e.g. cosmic 
rays) will become more frequent. 
Soft errors do not necessarily  translate into system fail- 
ures,  making it  hard  to measure their frequency  of  occur- 
rence. The location and timing of the error determine the fi- 
nal effect. A given soft error may be inconsequential or may 
propagate for a  certain  time  without  affecting  a computa- 
tional result or the flow of instructions through the pipeline. 
Since memories have always been  more susceptible  to er- 
rors than  processor pipelines, some recent research has fo- 
cused  on  estimating  the  soft  error  rate  in  the  context  of 
memory technology  [2, 31.  Traditionally,  error-correcting 
codes (ECCs) have been  used  to insure memory reliability 
[4].  ECCs can drastically reduce the  chance that  an error 
will  cause  system  failure.  Currently,  a  given  single-bit is 
expected to  flip  in  a RAM  only once every  many  billions 
of hours of operation.  However, with the growing sizes of 
RAMS and other hardware components, one can expect the 
error frequency to become much more noticeable in the near 
future. 
The bit error rate (BER) in a processor can be expected 
to be about ten times higher than in  a memory chip due to 
the higher complexity of the processor.  At current operat- 
ing speeds, a processor experiences a bit flip once every  10 
hours. Although not all soft errors result in a failure, the fact 
that even a single-bit error may  cause fatal damage gener- 
ates a need for error detection and recovery techniques for 
the system.  As we become more dependent on computers, 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
401 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:23 UTC from IEEE Xplore.  Restrictions apply. 
higher demand for affordable, yet dependable, computing is 
expected. In his recent article [ 5 ] ,  John Hennessy, one of the 
leading computer architects of the last two decades, points 
out  that  we  need  to  change the  performance-centric  pro- 
cessor design  to “other  performance”-centric design.  The 
“other”  category  includes  reliability,  maintainability,  and 
availability as the main parameters.  This recommendation 
would represent a significant shift in processor design. 
1.1  Our Solution 
Many high-end computer systems already include soft- 
error tolerance.  They implement it by replicating hardware, 
so that performance  is not sacrificed.  In today’s competi- 
tive market, GPPs cannot afford decreased performance or 
large amounts of extra hardware. GPPs must be able to im- 
plement soft-error tolerance with minimal impacts to both 
die size and performance. 
One method  of  incorporating soft-error detection capa- 
bility  in a processor system is to make use of the system’s 
idle capacit),.  Idle capacity exists when  a functional  unit 
within a processor is not carrying out any computation dur- 
ing  a  certain  period  of  time.  The functional unit  may  be 
idle for a variety of reasons.  During this idle time, the unit 
can  be  used for other purposes  without decreasing  overall 
processor  performance.  If  idle  capacity  is  not  sufficient, 
spare capacity (extra hardware) can be added to meet per- 
formance  goals.  This paper  uses  functional  units  to  add 
spare capacity. 
In today’s microprocessors, a large amount of idle capac- 
ity exists (30-40% of execution time).  Idle capacity can be 
used  to perform recomputation, which can detect the pres- 
ence of errors in the system. However, this time is not suf- 
ficient  to  duplicate  the  entire computation.  Therefore, if 
recomputation became a standard feature in computer sys- 
tems, then it might significantly impact the amount of time 
needed for execution of  programs.  As  an alternative, one 
may perform selective recomputation or include additional 
hardware (like function units) to compensate for the perfor- 
mance loss. This would meet both performance and reliabil- 
ity goals. However, both methods have problems. Selective 
recomputation would not detect all soft errors, and adding 
a large amount of  hardware is not a cost-effective solution. 
However, a limited amount of spare capacity may be added 
to maintain performance standards without much extra cost. 
In  this  paper,  we  propose  and  implement  a  scheme 
called  REESE  (REdundant  Execution  using  Spare  Ele- 
ments).  REESE is a microarchitectural method  of  detect- 
ing soft errors.  It has two components.  First,  instruction 
recomputation capabilities are added to the microprocessor 
pipeline.  Recomputation is an appropriate method for de- 
tecting the  occurrence  of  soft errors because  it can detect 
faults that are short-lived.  Implementing recomputation re- 
quires no extra hardware, so chip area does not have to be 
increased. This method of soft-error tolerance is also sensi- 
tive to performance factors. Since performance is a top pri- 
ority for GPPs, the second part of REESE includes adding 
a minimal amount of hardware to ensure that recomputation 
does not overly inhibit performance.  When implementing 
REESE, we focussed on the following question: How much 
additional hardware is needed to incorporate soft error de- 
tection into a superscalar processor without increasing over- 
all execution time? This is in contrast to past research which 
identifies the amount  of  overhead necessary  to implement 
fault tolerance but  does not attempt  to decrease  this over- 
head. 
1.2  Paper Organization 
Section 2 of this paper discusses the concept of time re- 
dundancy.  Section 3  gives details concerning  research  re- 
lated  to  instruction  re-execution  and  soft  error  detection. 
The next section outlines how REESE can be implemented 
in  a  microprocessor pipeline to detect errors while speed- 
ily executing the extra computation. Section 5 gives details 
about the simulation environment. Test results and analysis 
are shown in Section 6.  Section 7 presents a summary and 
conclusions. 
2  Time Redundancy and Error Detection 
To  be  fault  tolerant,  a  microprocessor  must be  able  to 
cope with all possible sources of errors. Time redundancy is 
one method of accomplishing this. In a processor with time 
redundancy, computations are performed multiple times on 
the  same hardware [6, 71.  One advantage of this approach 
is that no new hardware is necessary to implement it. How- 
ever,  multiple  executions  require  additional  time  and/or 
hardware to complete. 
Executing a computation two times adds a degree of fault 
tolerance to the system. This comparison only allows for er- 
ror detection, not error correction.  In this paper, we define 
an  instruction  to belong  to  the  primary  instruction  stream, 
or P  sfream, during  its first execution.  When  the instruc- 
tion  is re-executed, it belongs to the redundant  instruction 
stream, or R  stream.  If  a  soft error affects the result  of  a 
P-stream instruction, the error can be detected by  the copy 
of the instruction in the R stream. 
As the time period between P-stream and R-stream exe- 
cutions of an instruction grows, the probability that the R- 
stream version will be susceptible to the same environmen- 
tal cause of a soft error decreases. Therefore, the R-stream 
execution of an instruction should not occur too soon after 
its; P-stream execution. In other words, if the cause of a soft 
error is present for time At, then detection of the soft error 
is only guaranteed if the P-stream and R-stream executions 
402 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:23 UTC from IEEE Xplore.  Restrictions apply. 
are separated by  a time greater than  At. If  the executions 
are separated by  a smaller time period, then both might be 
susceptible to the same soft error.  This paper is concerned 
with infrequent, short-lived soft errors. 
A longer separation between P-stream  and R-stream in- 
struction execution will also cause commitment of every in- 
struction to be delayed by  at least At. All  time redundant 
schemes must balance out the desire to detect all  transient 
errors with  the  need  to  keep the  time  to instruction  com- 
mit as low as possible. REESE attempts to maintain a good 
balance between these two factors. 
3  Related Work 
Time redundancy is only one of many methods of detect- 
ing soft errors. Other methods include using software for re- 
computation or code replication (software redundancy) and 
performing a  computation on different  hardware elements 
(hardware redundancy). 
Software redundancy can detect errors when redundancy 
is  introduced  at  the  code  level.  One  advantage  of  this 
scheme is that fault tolerance may be directly implemented 
at the source code level  without modifying the underlying 
hardware structure.  However,  one recent  implementation 
of this method in  [SI  caused a doubling of code size and a 
slowdown  of  five times compared to normal  program exe- 
cution. This slowdown would be unacceptable for GPPs. 
Self-checking circuits [9, 101 use hardware redundancy 
to provide error coverage.  However, this technique cannot 
usually be applied globally  to the processor,  and the extra 
hardware overhead might be impractical for GPPs. IBM has 
taken a different approach by using partial hardware repli- 
cation  in the G4 and G5 versions  of  its  S/390 mainframe 
[13].  In  [ l l ,  121, both  time and hardware redundancy are 
used to detect errors at the circuit level. Outputs of combi- 
national  circuits are tested to find soft errors.  All of these 
circuit-level  techniques  differ  from our microarchitectural 
approach.  REESE tests  for errors at the pipeline level by 
comparing the results of individual instructions. 
Hardware redundancy is used  at the microarchitectural 
level by  Franklin  in  [14].  Various possible  sources of er- 
rors in the microprocessor pipeline are analyzed and cate- 
gorized.  Then hardware is added to the pipeline to handle 
each type of error, This approach would need less additional 
hardware than gate-level hardware redundancy. Results also 
show that performance is only slightly affected. 
In  [15], time redundancy is combined with recomputa- 
tion with shifted operands (RESO). Using RESO, the redun- 
dant  instruction  undergoes  a  shifting  transformation  both 
before  and after it  is executed.  This can  detect  both  per- 
manent and transient  errors in the processor pipeline.  In- 
structions are duplicated early in the pipeline and temporar- 
ily stored.  As a result, redundant instructions can  be flex- 
ibly  scheduled,  allowing the  redundant  instruction  to exe- 
cute efficiently.  The only drawback to this  method is that 
it only covers the execution stage of the processor pipeline. 
Other research  [ 161 also provides error detection that does 
not cover other pipeline stages. 
This paper focuses on superscalar processors, since they 
are  the  type  used  in  GPPs.  However,  error  detection 
schemes have been developed for a wide variety of proces- 
sor types. NOW (Network Of Workstations)  [ 191 and other 
projects [20,21,22,23] have utilized hardware on multipro- 