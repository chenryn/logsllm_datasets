### 优化后的文本

**作为上下文强盗问题。**
- arXiv:1806.03806, 2018.

[27] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. **T-Fuzz: 通过程序转换进行模糊测试**. In 2018 IEEE Symposium on Security and Privacy (SP), pages 697–710. IEEE, 2018.

[28] Van-Thuan Pham, Marcel Böhme, Andrew E Santosa, Alexandru Răzvan Căciulescu, and Abhik Roychoudhury. **智能灰盒模糊测试**. arXiv preprint arXiv:1811.09447, 2018.

[29] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. **Vuzzer: 应用感知的进化模糊测试**. In NDSS, volume 17, pages 1–14, 2017.

[30] Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos, Jonathan Foote, David Warren, Gustavo Grieco, and David Brumley. **优化种子选择以提高模糊测试效果**. In 23rd USENIX Security Symposium (USENIX Security 14), pages 861–875, 2014.

[31] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy Vyukov. **AddressSanitizer: 快速地址检查器**. 在2012 USENIX Annual Technical Conference (USENIX ATC 12) 中呈现, pages 309–318, 2012.

[32] Michael Sutton, Adam Greene, and Pedram Amini. **Fuzzing: 暴力漏洞发现**. Pearson Education, 2007.

[33] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. **SkyFire: 数据驱动的种子生成用于模糊测试**. In 2017 IEEE Symposium on Security and Privacy (SP), pages 579–594. IEEE, 2017.

[34] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. **TaintScope: 一种校验和感知的定向模糊测试工具**. In 2010 IEEE Symposium on Security and Privacy, pages 497–512. IEEE, 2010.

[35] Peter Whittle. **多臂强盗与Gittins指数**. Journal of the Royal Statistical Society: Series B (Methodological), 42(2):143–149, 1980.

[36] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and David Brumley. **黑盒变异模糊测试的调度**. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, pages 511–522. ACM, 2013.

[37] Bo Yu, Pengfei Wang, Tai Yue, and Yong Tang. **海报: 通过多阶段消息生成对IoT固件进行模糊测试**. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, pages 2525–2527. ACM, 2019.

[38] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. **QSYM: 为混合模糊测试定制的实际符号执行引擎**. In 27th USENIX Security Symposium (USENIX Security 18), pages 745–761, 2018.

[39] Michal Zalewski. **AFL漏洞奖杯榜**. Website, 2014. http://lcamtuf.coredump.cx/afl/#bugs.

[40] Michal Zalewski. **American Fuzzy Lop**. Website, 2014. http://lcamtuf.coredump.cx/afl.

[41] Michał Zalewski. **FidgetyAFL**. Website, 2016. https://groups.google.com/forum/#!msg/afl-users/fOPeb62FZUg/CES5lhznDgAJ.

[42] Michał Zalewski. **American Fuzzy Lop技术细节**. Website, 2018. http://lcamtuf.coredump.cx/afl/technical_details.txt.

[43] Gen Zhang, Xu Zhou, Yingqi Luo, Xugang Wu, and Erxue Min. **PTFuzz: 基于处理器跟踪反馈的引导模糊测试**. IEEE Access, 6:37302–37313, 2018.

[44] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. **将最难的问题交给我: 混合模糊测试中的概率路径优先级**. In NDSS, 2019.

---

### 附录
#### 8.1 平均成本评估的更多分析
在本小节中，我们将对第5.2节中的评估结果进行更深入的分析。

**路径覆盖率**  
从图6可以看出，在大多数程序上，EcoFuzz的表现优于其他六种模糊测试工具，除了cxxfilt、readelf、djpeg、xmllint和infotocap。对于这五个程序：
- 在xmllint和infotocap上，EcoFuzz在相同执行次数下找到的路径比其他工具更多。EcoFuzz达到的路径覆盖率略低于FidgetyAFL或AFLFast.new，原因是它们生成了更多的测试用例。
- 在cxxfilt上，当路径数量低于7,000时，EcoFuzz的表现优于AFLFast.new和FidgetyAFL。之后，AFLFast.new和FidgetyAFL生成了比EcoFuzz更多的测试用例，因此它们发现的路径也更多。
- 在readelf上，EcoFuzz在早期阶段的表现与AFLFast.new和FidgetyAFL相似。后期，EcoFuzz发现的路径数量略少于AFLFast.new和FidgetyAFL。
- 在djpeg上，如图6所示，AFLFast.new和FidgetyAFL的曲线在后期有两个显著的增长点，使得它们发现的路径数量超过了EcoFuzz。我们分析了每次运行的结果，发现在两次运行中，AFLFast.new和FidgetyAFL分别发现了超过4,500条路径。在其他情况下，它们发现的路径数量接近EcoFuzz。我们认为这是实验偶然性的影响。

此外，在大多数情况下，没有使用不确定策略的模糊测试工具（EcoFuzz、FidgetyAFL和AFLFast.new）表现优于FairFuzz、AFL、AFLFast和MOPT-AFL。这证明了不确定突变策略在一般情况下是有效的。特别是，EcoFuzz发现的路径数量明显多于这四种工具，并且总体而言，EcoFuzz在路径探索和能源节约方面表现优于其他六种技术。

**平均成本和总执行次数**  
从表2中可以看出，在大多数情况下，EcoFuzz在同一测试时间内生成的测试用例数量远少于其他技术，尤其是在cxxfilt、xmllint和infotocap等目标上。原因是EcoFuzz在分配能量给种子时，不考虑种子的执行时间或长度。这导致EcoFuzz在长执行时间的种子上分配的能量与其他快速种子相同，从而花费更多时间进行模糊测试。此外，EcoFuzz已经模糊测试了队列中的所有种子，并且在修剪策略上执行了比其他技术更多的操作。不同于我们的调度算法，其他模糊测试工具的功率调度主要基于AFL，并保留了大部分特性。如第2.1节所述，在不确定策略期间，AFL根据性能得分分配能量给种子，该得分基于执行时间、覆盖率和发现时间计算。执行时间越长，分配的能量越少。这种机制保证了AFL不会在这些长时间执行的种子上花费太多时间。然而，为这些长时间执行的种子分配能量也是有意义的，这有助于提高覆盖率。

**更多统计分析**  
在第5.2节中，我们报告了统计分析的结果，并指出EcoFuzz在总体上优于其他工具。在本小节中，我们将详细分析p值和极值的统计结果。

从表6可以看出，在路径覆盖率上，p1在所有评估中都小于10^-4，表明EcoFuzz和AFL发现的总路径数分布有显著差异。进一步地，p3、p5和p6大多也趋于小于10^-3，这证明了EcoFuzz在路径探索方面也显著优于AFLFast、FairFuzz和MOPT-AFL。在大多数评估中，p4大约等于10^-1，这表明EcoFuzz和AFLFast.new发现的路径没有显著不同。然而，在平均成本上，p4在11次评估中小于10^-2，从而证明EcoFuzz的平均成本显著低于AFLFast.new。

从表7可以看出，无论是在最大路径数还是最小路径数方面，EcoFuzz和AFLFast.new在大多数程序上都优于其他五种工具。EcoFuzz在六个程序上达到了最大路径覆盖的上限，在八个程序上达到了最小路径覆盖的下限。与AFLFast.new相比，尽管EcoFuzz的路径覆盖接近AFLFast.new，但其能耗低于AFLFast.new。

#### 8.2 EcoFuzz检测到的漏洞分析
在第5.4节中，我们评估了EcoFuzz在检测漏洞方面的有效性，并报告了一些由EcoFuzz发现的漏洞。在本小节中，我们将对这些漏洞进行详细分析。

除了在GNU Binutils中发现的漏洞外，EcoFuzz还在第5.2节中测试的一些程序中发现了5个漏洞，其中包括gif2png和tcpdump中的2个堆缓冲区溢出，以及libpng和jhead中的3个内存泄漏。具体来说，在gif2png中发现了2个漏洞：一个是在gif2png.c中的writefile函数中的堆缓冲区溢出，另一个是在memory.c中的xalloc函数中的内存泄漏。此外，由于gif2png是基于libpng构建的，EcoFuzz还在libpng的png-mem.c文件中的png_malloc_warn函数中发现了一个内存泄漏，这是在gif2png崩溃时重现的。此外，EcoFuzz还在jhead中发现了一个堆缓冲区溢出。

---

### 表6: 每次评估的p值结果
| 主题     | nm      | objdump  | readelf  | size    | cxxfilt  | djpeg    | xmllint  | gif2png  | readpng  | tcpdump  | infotocap | jhead    | magick   | bsdtar   |
|----------|---------|----------|----------|---------|----------|----------|----------|----------|----------|----------|-----------|----------|----------|----------|
| p1       | 1.2*10^−7 | 5.0*10^−8 | 9.2*10^−7 | 9.2*10^−7 | 5.8*10^−6 | 7.6*10^−5 | 9.3*10^−9 | 4.2*10^−7 | 7.1*10^−6 | 1.8*10^−6 | 4.5*10^−6 | 5.7*10^−6 | 1.8*10^−10 | 1.0*10^−10 |
| p2       | 1.2*10^−2 | 1.4*10^−1 | 5.2*10^−1 | 2.8*10^−5 | 4.4*10^−3 | 2.3*10^−1 | 6.6*10^−3 | 6.3*10^−4 | 4.3*10^−2 | 2.3*10^−3 | 2.7*10^−1 | 1.5*10^−4 | 3.8*10^−2 | 6.7*10^−3 |
| 总路径数 | p3       | 1.3*10^−4 | 2.4*10^−5 | 3.3*10^−5 | 9.3*10^−4 | 1.7*10^−7 | 4.6*10^−4 | 9.1*10^−5 | 7.1*10^−6 | 7.0*10^−5 | 6.9*10^−5 | 3.3*10^−9 | 9.4*10^−6 |
|          | p4       | 6.4*10^−1 | 2.6*10^−1 | 4.6*10^−2 | 9.5*10^−3 | 7.1*10^−4 | 1.4*10^−1 | 6.1*10^−2 | 1.5*10^−1 | 3.2*10^−1 | 9.1*10^−1 | 1.6*10^−1 | 1.8*10^−4 | 4.4*10^−1 | 7.8*10^−1 |
|          | p5       | 1.2*10^−4 | 2.2*10^−6 | 2.8*10^−4 | 1.3*10^−6 | 6.1*10^−8 | 9.2*10^−6 | 1.9*10^−3 | 2.2*10^−6 | 9.8*10^−2 | 3.6*10^−2 | 8.7*10^−5 | 7.9*10^−6 | 1.6*10^−5 | 3.3*10^−7 |
|          | p6       | 3.9*10^−7 | 3.6*10^−8 | 1.4*10^−6 | 4.8*10^−6 | 3.2*10^−1 | 4.4*10^−2 | 1.9*10^−3 | 1.8*10^−4 | 4.8*10^−2 | 2.6*10^−5 | 3.3*10^−2 | 1.8*10^−4 | 7.1*10^−7 | 6.1*10^−7 |
| p1       | 1.5*10^−5 | 9.5*10^−8 | 4.9*10^−8 | 1.0*10^−5 | 4.4*10^−7 | 7.4*10^−4 | 2.0*10^−5 | 1.2*10^−1 | 3.6*10^−3 | 3.9*10^−7 | 6.4*10^−6 | 8.4*10^−7 | 5.6*10^−9 | 2.9*10^−10 |
| p2       | 8.5*10^−3 | 1.9*10^−3 | 6.2*10^−1 | 7.2*10^−6 | 5.1*10^−8 | 4.8*10^−2 | 5.5*10^−6 | 9.2*10^−4 | 2.0*10^−4 | 1.4*10^−2 | 3.3*10^−5 | 3.0*10^−4 | 2.3*10^−2 |

希望这些改进使您的文本更加清晰、连贯和专业。如果有任何进一步的需求，请告诉我！