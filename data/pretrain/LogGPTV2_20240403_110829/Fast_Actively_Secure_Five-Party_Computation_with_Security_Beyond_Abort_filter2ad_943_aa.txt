# Fast Actively Secure Five-Party Computation with Security Beyond Abort

## Authors
- Megha Byali, Indian Institute of Science, Bangalore, India (PI:EMAIL)
- Carmit Hazay, Bar-Ilan University, Ramat Gan, Israel (PI:EMAIL)
- Arpita Patra, Indian Institute of Science, Bangalore, India (PI:EMAIL)
- Swati Singla, Indian Institute of Science, Bangalore, India (PI:EMAIL)

## Abstract
Secure Multi-party Computation (MPC) with a small number of participants and an honest majority has gained significant attention due to the potential for efficient and customized techniques. In this work, we explore a range of security notions in a five-party setting, tolerating up to two active corruptions. Our protocols are constant-round, making them suitable for high-latency networks such as the Internet.

In a minimal setting with pairwise-private channels, we present efficient instantiations that achieve unanimous abort (where either all honest parties receive the output or none do) and fairness (where the adversary receives the output only if all honest parties also receive it). With the addition of a broadcast channel, which is known to be necessary, we provide a construction with guaranteed output delivery (GOD), ensuring that any adversarial behavior cannot prevent the honest parties from receiving the output. The broadcast communication is minimal and independent of the circuit size.

In terms of performance (communication and runtime), our protocols incur minimal overhead compared to the best-known protocol by Chandran et al. (ACM CCS 2016), which achieves the least secure notion of selective abort. Additionally, our protocols for fairness and unanimous abort can be extended to n-parties with at most √n corruptions, similar to Chandran et al. Our results demonstrate the feasibility of achieving stronger security notions for more than one active corruption, with a cost not significantly higher than the least desired security of selective abort.

## Acknowledgments
- Carmit Hazay was supported by the European Research Council under the ERC consolidators grant agreement n. 615172 (HIPS), the BIU Center for Research in Applied Cryptography and Cyber Security in conjunction with the Israel National Cyber Bureau in the Prime Minister’s Office, and ISF grant 1316/18.
- Arpita Patra was supported by the SERB Women Excellence Award 2017 (DSTO 1706).

## Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

## Conference Details
CCS '19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3345657

## Keywords
- Secure Multiparty Computation
- Guaranteed Output Delivery
- Fairness
- Unanimous Abort
- Garbled Circuits

## ACM Reference Format
Byali, M., Hazay, C., Patra, A., & Singla, S. (2019). Fast Actively Secure Five-Party Computation with Security Beyond Abort. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/3319535.3345657

## 1 Introduction
Secure Multiparty Computation (MPC) [27, 46, 65] is a field of cryptography that has evolved significantly over the years, focusing on enabling a set of n mutually distrusting parties to perform joint computations on their private inputs while ensuring correctness and privacy. MPC guarantees that no coalition of t parties can affect the output or learn additional information beyond what is revealed by the output.

While there has been extensive theoretical work in MPC, recent years have seen a growing focus on practical MPC constructs [9, 39, 64] due to the increasing demand for efficiency in real-time networks like the Internet. MPC literature can be broadly categorized into dishonest majority [7, 16, 37, 40, 46, 52, 57, 64] and honest majority [10, 11, 14, 15, 55, 61]. Designing practical MPC with an honest majority is particularly compelling because it enables stronger security goals such as fairness and guaranteed output delivery (GOD) [31].

These properties are crucial in real-life applications where time and resources are limited, as they ensure that parties are bound to participate in the computation, thereby curbing adversarial behavior. For example, in e-commerce and e-auction, an adversary can cause an abort if the outcome is unfavorable unless a stronger security notion is enforced. In e-voting, an adversary can repeatedly abort the computation to learn the outputs and rig the election.

Moreover, an honest majority allows for the design of efficient protocols using symmetric-key functions, replacing the need for public-key primitives. This setting also enables the design of information-theoretic protocols [14, 15, 49, 61], in addition to computational ones. Achieving these stronger security goals has driven significant research, with works such as [35, 36] showing constant-round protocols with GOD. The round-optimality of these notions has been studied in [45, 47, 60], and 3 rounds have been proven necessary. Recent works [1, 8, 47] have presented round-optimal MPC protocols with GOD, relying on Common Reference Strings (CRS) or public-key operations, while [2, 4] and [60] have done so under super-honest-majority (t < n/4) and for 3-party settings, respectively.

The work of [38] demonstrates how to compile an honest-majority MPC protocol for arithmetic circuits with abort into a protocol with fairness, preserving its efficiency. While [31] rules out fairness in a dishonest majority, [3, 17, 30, 59] show its feasibility using non-standard techniques such as public bulletin boards, secure processors, or penalties via Bitcoin.

Since its inception, MPC has primarily focused on generic constructions with n parties. However, the regime of practical MPC has seen major breakthroughs in small-party settings (3-5 parties). Applications such as the Danish Sugar-Beet Auction [22], statistical and financial data analysis [21], email filtering [51], distributed credential encryption [55], Kerberos [6], privacy-preserving machine learning [53], and frameworks like VIFF [44], Sharemind [20], and ABY-Arithmetic Boolean Yao [54] are designed for 3 parties with one corruption. The 4- and 5-party settings with minority corruption have been explored in [24, 25, 49].

The most popular setting of 3 or 4 parties with one active corruption has led to the development of custom-made tools such as Yao's garbled circuits [65] for achieving malicious security [24, 55, 60], using just 2-3 elements per party in arithmetic circuits [5], and the sure-election of one honest party as a trusted party in case of an adversarial attack [24, 60]. These techniques rely on the adversary not having an accomplice. However, when the adversary has a collaborator (2 corruptions), these tools become ineffective, making it challenging to achieve desired security with real-time efficiency.

In this paper, we consider MPC for 5 parties (5PC) with 2 corruptions, aiming to achieve securities of unanimous abort, fairness, and GOD, with an overhead not significantly higher than the result of [25], which achieves the least desired security of selective abort.

### 1.1 Related Work
Notable works on MPC for small parties come in two categories: low-latency and high-throughput protocols. Low-latency protocols, relying on garbled circuits, offer constant-round protocols suitable for high-latency networks like the Internet. High-throughput protocols, built on secret sharing, aim for low communication but require rounds proportional to the circuit depth, catering to low-latency networks. We focus on the former category.

The most relevant work to ours is [25], which proposes a 5PC protocol achieving the weak notion of selective abort against two malicious corruptions. Their customization for 5PC resulted in an efficient protocol for actively-secure distributed garbling of 4 parties, relying solely on the passively-secure scheme of [13], saving 60% communication compared to [13] with four corruptions. In the 3-party (3PC) and 4-party (4PC) domains, [49, 55] presented a 3PC with selective abort, and [49] also gave a 2-round 4PC with GOD. Recently, [24] improved the state-of-the-art with efficient 3PC and 4PC achieving fairness and GOD with minimal overhead over [55]. In the dishonest-majority setting, [29] studies 3PC with two corruptions.

Orthogonally, recent works [5, 6, 26, 42, 43] in the high-throughput setting with non-constant rounds show abort security in 3PC with one corruption. The works of [26, 28, 38, 58] additionally include constructs attaining fairness.

### 1.2 Our Contribution
In the regime of low-latency protocols, the known works [25, 49, 55], despite being in an honest majority, trade efficiency for security and settle for weaker guarantees such as selective abort. With 3 or 4 parties, [24, 49, 60] demonstrate that fairness and GOD are feasible goals and present protocols with minimal overhead over those achieving weaker notions. Our paper extends this effort to the 5-party setting.

We present efficient, constant-round 5PC protocols with an honest majority that achieve security notions ranging from unanimous abort to GOD, relying solely on symmetric-key primitives. Being efficient and constant-round, our protocols are well-suited for high-latency networks like the Internet. Designed in the Boolean world, our protocols build on the semi-honest variant of the distributed garbling scheme of [64] while leveraging the techniques of seed distribution and Attested Oblivious Transfer of [25]. The generality of our protocols allows them to accommodate any passively secure distributed garbling scheme as a building block.

Our theoretical findings are supported by implementation results using benchmark circuits AES-128 and SHA-256.

### 5PC with Fairness and Unanimous Abort
In a minimal network of pairwise-secure channels, we achieve fairness and unanimous abort in 5PC with performance almost on par with [25], consuming 8 rounds. Building on [25], we achieve fairness by ensuring a robust output computation phase even when the adversary chooses not to participate after learning the output. This is realized using techniques that enforce the adversary to aid at least one honest party in computing the correct output before she can learn it herself. Further, we employ techniques to allow this honest party to release the output and convince the remaining honest parties of its correctness.

Our 5PC with unanimous abort simplifies the fair construct, allowing the adversary to learn the output without aid from honest parties, but if she helps at least one honest party get the output, that honest party aids fellow honest parties to get the output (as in the fair construct).

Both our 5PC protocols with fairness and unanimous abort can be extended to n parties under the constraint of t = √n corruptions, as established in [25].

### 5PC with GOD
Our protocol uses point-to-point channels and a broadcast channel, which is inevitable due to the optimal threshold [32]. As broadcast is expensive in real-time, we limit broadcast communication to be minimal and independent of circuit, input, and output size. Our implementation uses a software broadcast based on the Dolev-Strong protocol [41]. Technically, our protocol relies on 2-robust techniques, including a 4-party 2-private replicated secret sharing (RSS) scheme for input distribution and seed-distribution of [25] to ensure each party's role is emulated by two other parties. These strategies ensure that each piece of intermediate data is with a 3-party committee, and any wrongdoing by at most 2 parties will ensue conflict. When a conflict occurs, we determine a smaller instance of a 3PC with at most 1 corruption to compute the output robustly. Our technical innovations maintain input privacy and consistency across the 3PC and outer 5PC. Due to the use of customized tools for small parties such as RSS, conflict identification, and running a smaller 3PC instance, this protocol cannot be scaled to n-parties while retaining the goal of efficiency.

### Empirical Comparison
A consolidated view of our results is presented below, outlining the security achieved, rounds, use of broadcast (BC), and empirical values. The values indicate overhead in maximum runtime latency in LAN, WAN, and total communication (CC) over [25], which offers selective abort in 8 rounds. The range is composed over the choice of circuits: AES-128, SHA-256. AES is a smaller circuit, with 33,616 gates, compared to 236,112 gates of SHA. (*: The total rounds is computed plugging in the state-of-the-art robust 3PC [24]. The rounds for GOD are stated assuming broadcast channel availability in ours and [24]).

| Security | Rounds | BC | LAN (ms) | WAN (s) | CC (MB) |
|----------|--------|----|-----------|---------|---------|
| Selective Abort | 8 | ✗ | 0.2-0.01 | 0.28-0.03 | 1.16-0.82 |
| Fairness | 8 | ✗ | 0.2-0.01 | 0.28-0.03 | 1.16-0.82 |
| Unanimous Abort | 8 | ✗ | 0.2-0.01 | 0.28-0.03 | 1.16-0.82 |
| GOD | 12* | ✓ | 2.26-2.33 | 2.26-2.33 | 2.26-2.33 |

This table provides a comprehensive comparison of the different security notions and their respective performance metrics.