Credentials, Camera, 
Geolocation, Contact List
Application
(a)
Contact List
Application
(b)
Fig. 1: Representative example of a banking application design for (a) current
mobile applications and (b) MobileIFC.
that tradeoﬀs will arise: certain policy decisions that may prevent malicious ap-
plication behavior may also disrupt the functionality of certain non-malicious
applications. Such decisions must be made by users based on their speciﬁc orga-
nization’s restrictions and requirements.
Representative Application: Banking. We use a banking application as
our running example (Figure 1). The application takes a user’s credentials to
login into his bank account. The credentials are veriﬁed at the bank’s servers
before the account details are presented to the user. The banking application
also communicates with third-party servers to present value-added services to
the user, e.g., showing nearby bank locations using a map obtained from Google
Maps. Moreover, it uses the device’s camera to capture check images that are
sent to the bank’s servers. The application also accesses the contact list to fa-
cilitate selection of recipients for peer-to-peer (P2P) payments. The contact list
information is not shared with any external entity.
The current Android permission model lists a set of pre-deﬁned permissions
that an application can request in order to access corresponding resources on
the device. In our banking example, an Android application would need to re-
quest the INTERNET permission (to communicate with external entities) and
ACCESS FINE LOCATION (to get access to user’s geolocation to determine the
closest bank locations) using a manifest. It would further request the CAMERA
permission to have the capability to capture images with the device’s camera
and READ CONTACTS permission to have access to the device’s contact list. This
manifest must be approved by the user before the application is installed.
We now give some examples of diﬀerent types of security policies, and discuss
how they can be accommodated in MobileIFC’s permission model.
Information Flow Control with Functionality-Based Least Privileges
This type of security property is concerned with protecting the user’s private
assets from leaks by untrusted applications. One security requirement for the
banking application is that a user’s bank credentials and location should be
protected from eavesdropping or leakage. At the same time, the requirement
should not break the application, i.e., the application should have enough privi-
leges to satisfy the desired functionality. This requirement leads to the following
high-level security policies:
– The user’s login credentials should only be shared with the bank’s server
bank.com.
– The device’s geolocation information should only be shared with Google.
Limitations of the current model There are two major issues with the
current access control model for Android applications. First, the resource access
is coarse grained and does not follow the principle of least privilege. For the bank-
ing application, even if the application needs to communicate over the Internet
only with its own server, it still possesses full capabilities to freely communicate
information, such as the user’s credentials, to any other external entities. Second,
there is no correlation between speciﬁc data items and the external parties to
which they are sent. As a result, there is nothing that prevents the application
from sharing the user’s banking credentials with Google.
Our permission model In our permission model, the application’s mani-
fest provides ﬁner-grained requirements for its external communication. Speciﬁ-
cally, it provides an input-to-output mapping, which represents what protected
user/device information (asset) is to be shared with what external entity. For the
banking application, this mapping would correspond to the set {(login creden-
tials, bank.com), (geolocation, google.com)}. Our application design will ensure
that the application conforms to the the requested (and approved) information
ﬂows (Section 3).
Context-Aware Security Properties This security property addresses con-
ditional use of user content by the application. The conditions can be a derivative
of the device state, such as the GPS location or time of the day. As an example
of a situation where permissions depend on context, consider a scenario where an
organization such as DoD wants to impose the requirement “No images should
be captured at the Pentagon”. This property maps to the following security
policy:
– When the geolocation of the device corresponds to Pentagon’s location co-
ordinates, an application’s camera capture ability should be disabled.
Limitation of the current model The current Android model does not
consider any location-based permissions. Once the application has the CAMERA
permission, it can freely capture pictures irrespective of the location.
Our permission model MobileIFC ensures that the camera is only acti-
vated when the device’s geolocation is in a certain state. To address such a sce-
nario, MobileIFC’s design restricts the application to access the device’s camera
only through a prescribed API. MobileIFC’s mediation layer resolves the re-
quired context to identify the device’s current geolocation and then ensure that
the camera is only activated in accordance with the policy under consideration.
3 MobileIFC Design
MobileIFC shifts the bulk of the performance costs of tracking information
ﬂows to the application development stage. Instead of using traditional taint
tracking mechanisms [17], MobileIFC exposes the security-relevant information
ﬂows within an application by redesigning the application. It splits the appli-
cation into chunks that represent the smallest unit of ﬂow tracking within the
MobileIFC framework. A chunk represents a piece of code that is uniquely iden-
tiﬁed by its input values and the external entities it needs to communicate with.
For instance in our representative banking example, chunk C2 takes in geolo-
cation as the input and communicates with google.com as the external entity
(Figure 1(b)).
While an ideal application design in MobileIFC would follow the principle of
least privilege, MobileIFC does not place any restriction on the developers on
how to design their application. In other words, it means that the actual function-
ality, semantics, and runtime characteristics are not of interest in MobileIFC and
are left to the developer. This provides the application developer with enough
freedom and ﬂexibility to build rich applications. However, MobileIFC ensures
that only the ﬂows approved by the user (or allowed by his mandatory policies)
are allowed, thus forcing the application developers to make any intended com-
munication explicit. For instance, a developer can design the banking application
in two ways. First, he can follow the current monolithic application design as
shown in Figure 1(a) and in that case, the application’s manifest would declare
that it requires user’s credentials, camera, geolocation and contact list as input
and bank.com and google.com as the external entities. It eﬀectively means that
the complete application would act as a single blackbox and any of the input
parameters are allowed to be shared with any of the external entities. Note that
even this ﬁrst design is an improvement over existing application design as it
explicitly enumerates the allowed external entities. Alternatively, he can design
the application as shown in Figure 1(b). Since the second design splits the infor-
mation ﬂow from the input parameter to the external entity, each chunk possess
lower privileges (and only privileges that it needs) thus reducing the attack sur-
face in case of a malicious application or conﬁning any exploit to within a chunk
in case of a vulnerability. As a result, the user would be more inclined to approve
the second design in comparison to the ﬁrst.
We envision that an application can be automatically split into chunks, where
a chunk boundary is eﬀectively decided by individual user policies. Our current
system relies on application developers to manually split the applications; we
plan to develop an automated system for application splitting as future work.
3.1 Conﬁnement of chunks
The chunks of an application encapsulate diﬀerent levels of private informa-
tion for the users. Therefore, these chunks need to be isolated from each other
in order to prevent information leaks. Since hybrid applications use webview for
all layout rendering, they are administered by the Same Origin Policy (SOP).
However, since the application’s HTML ﬁles are associated with the file://
protocol, all pages have the same origin thus neutralizing any potential beneﬁt
of SOP. Moreover, cross-origin AJAX requests are enabled allowing the applica-
tion chunks to freely communicate with any external entities.
ADSAFE = function() {
  ...
  return {
    go:function(id, f) {
      /* parse manifest and user policies to
      derive capability object 'moIFCCap' */
      ...
      /* Proxy the capability so that it can
      be mediated at runtime based on 
      context-aware policies */
      var moIFCLib = ProxyWrap(moIFCCap);
      f(dom, moIFCLib);
    }
  }
}
ADsafe wrapper 
for chunk C2
Fig. 2: ADsafe-based chunk conﬁnement and monitoring in MobileIFC.
A script on a page has intimate access to all information and relationships
of the page. As a result, the chunks are free to access the Document Object
Model (DOM) objects of other chunks. Additionally, the chunks are allowed to
access the device’s resources using the APIs exposed by the hybrid platform.
Therefore, any conﬁnement mechanism should (1) constrain a chunk to access
only its own DOM objects with no view of other chunks’ objects, and (2) limit
a chunk’s access to only approved resources on the device.
In order to constrain chunks into their own control domain, we limit the
application code to be written in an object capability language called ADsafe [1].
In an object capability language, references are represented by capabilities and
objects are accessed using these references. ADsafe deﬁnes a subset of JavaScript
that makes it safe to include guest code (such as third-party scripted advertising
or widgets) on any web page. ADsafe removes features from JavaScript that
are unsafe or grant uncontrolled access to elements on the page. Some of the
features that are removed from JavaScript are global variables and functions
such as this, eval and prototype. It is powerful enough to allow guest code
to perform valuable interactions, while at the same time preventing malicious or
accidental damage or intrusion.
To monitor and control access to the device’s resources, we modiﬁed AD-
safe to exclude any PhoneGap API calls that provide a direct handle to ac-
cess the resources and to invoke their functionality. As an example, the API
navigator.camera that is used to capture an image using the device’s camera
is banned. The access to provided indirectly by means of a chunk-speciﬁc wrap-
per object that exposes only a subset of the APIs as allowed by the approved
permissions for the chunk (Figure 2).
3.2 Realization of security policies
We developed a proxy engine that mediates all calls to PhoneGap APIs and
realizes the policy requirements of the user. The proxy engine takes as input
any mandatory security policies speciﬁed by the user. Since the mediation is
User registration
Application deployment on MobileIFC
Application installation by user
with MobileIFC
Chunk
Data
External 
Entity
bank.com
C1
C2
C3
Credentials
Camera
Geolocation
google.com
Contact list
-
Information provided by
application to MobileIFC at installation
User's 
mandatory
policies
Data
Credentials
Camera
Geolocation
External 
Entity
bank.com
Geolocation
google.com
Application manifest
shown to the user
Chunk labels
used by MobileIFC
Fig. 3: Typical life cycle of an application in MobileIFC.
done at runtime (i.e. at the time of use), any runtime modiﬁcations to the user’s
mandatory policies are also incorporated (Figure 2).
The user policies dictate the book-keeping tasks taken up by the proxy engine.
For context-aware policies (Section 2.2), the engine analyzes the input policy
to resolve any unknown contexts before verifying them against the speciﬁed
conditions. For conditional location-based policies as an example, it resolves
user’s current geolocation before checking the associated condition. Note that
the proxy engine runs within the trust domain of the hybrid platform, so it
is privileged with all the permissions that are associated with the platform,
eﬀectively enabling it to resolve contexts by utilizing the device’s sensors.
The current design of MobileIFC maintains a mapping between permissions
and the corresponding PhoneGap APIs that require these permissions. For ex-
ample, CAMERA permission in Android corresponds to the navigator.Camera
and navigator.Capture objects in PhoneGap. Each of these objects have mul-
tiple member properties and functions that administer certain ability to the