### Overview of Overhead for Sandbox Destruction

We have conducted an experiment to measure the total overhead required for destroying a sandbox. Additionally, we measured the latency of the `kill()` system call when executed by a sandboxed process. The results are presented in Figure 8.

### Experiment Setup and Results

For this experiment, we configured the sandbox of the sending process so that it allows sending signals to the receiving process, which is placed within a separate sandbox. The horizontal axis in Figure 8 represents the depth of nested sandboxes. For example, a value of 3 indicates that the sandbox enclosing the sending process has a parent and a grandparent, resulting in privilege checks at three separate levels. A value of 0 on the horizontal axis indicates that the process is not inside a sandbox, and therefore, no privilege checks occur.

The graph in Figure 8 shows that a single privilege check incurs approximately 5 microseconds of overhead. When sandboxes are nested, each additional privilege check incurs approximately 1 microsecond of overhead.

### Capabilities as an Alternative to Sandboxes

Capabilities are another alternative to sandboxes. A capability has two primary characteristics:
1. A subject that holds a capability is granted access to the privilege it specifies.
2. A subject that lacks a capability is denied access to the privilege it specifies.

Sandboxing mechanisms exhibit the second property but not the first. This aspect allows their controls to be safely manipulated by untrusted users. The centralized location of the controls in a sandbox makes it easy to track and revoke privileges. In contrast, capabilities require complete revocation from all processes to which they have been delegated.

### Related Work

#### Access Control Lists (ACLs)
Access control lists (ACLs) are a commonly used mechanism for enhancing system security. They associate detailed access rights with objects such as files. The main difference between sandboxes and ACLs is that ACLs associate privileges with objects, while sandboxes associate privileges with subjects. Sandboxes provide a centralized and easily verifiable control, imposing strict upper bounds on privileges without depending on assumptions about file permissions. They also allow for the creation of customized protection domains without changing settings on a wide variety of system objects. Our sandboxing mechanism is designed to complement alternatives like ACLs rather than replace them.

#### Domain and Type Enforcement (DTE)
Domain and type enforcement (DTE) is a useful tool for implementing mandatory access controls. This technique groups subjects into domains and objects into types, with rules specifying which domains are granted access to which types. DTE is geared toward implementing system-wide mandatory access controls, defined by a trusted security administrator. In contrast, sandboxes are lightweight entities that can be created, configured, and destroyed by untrusted users, allowing for both mandatory and discretionary access controls. We plan to extend their functionality by enabling transitions between sandboxes when certain programs are executed.

#### Other Sandboxing Techniques
- **Language-Specific Sandboxes**: Some approaches, such as Java, build protection mechanisms into programming languages. While these are useful for specific environments, they are not suitable as general-purpose mechanisms.
- **Embedded Sandboxes**: Techniques like proof-carrying code embed the sandbox within the program. Another option is to instrument existing binaries with additional machine instructions to verify compliance with security policies. However, these methods require modification of binaries and are not applicable to all types of programs.
- **User-Space Monitoring**: Systems like Janus use user-space monitoring processes for intercepting system calls made by sandboxed programs. This approach limits applicability and introduces significant overhead.
- **Kernel-Based Sandboxes**: Sandboxes can be implemented as loadable kernel modules, providing increased isolation and reducing context switching overhead. However, this requires loading a fully trusted kernel module, which must be performed by a trusted user.

#### ChakraVyuha (CV)
ChakraVyuha implements a kernel-based sandboxing mechanism where sandbox definitions are stored in a secure location and enforced by a kernel-resident enforcer. Unlike our design, CV requires specialized installers and configuration files, limiting its flexibility. Our model allows dynamic reconfiguration of sandboxes at runtime and treats privilege sets as first-class objects that can be manipulated using set-theoretic primitives.

#### WindowBox
WindowBox implements a sandboxing mechanism within the Windows NT kernel, focusing on ease of use for unsophisticated users. It consists of completely separated desktops with varying privileges. However, these desktops are relatively static and not designed as lightweight containers for individual programs.

#### TRON
TRON, a sandboxing mechanism added to the ULTRIX operating system, allows the creation of sandboxes by untrusted users but does not provide a blocking mechanism for interactive privilege determination at runtime. TRON's approach to nested sandboxes reduces performance overhead by verifying at creation time that a nested sandbox contains a subset of its parent's privileges. However, our design allows changes in a sandbox configuration to affect all nested sandboxes, enabling interactive manipulation and maintaining precise policy representation.

### Conclusions

In summary, we have presented a general-purpose system call API for confining untrusted programs. Our design is flexible and provides a simple set of primitives with a wide scope of applicability. Preliminary performance results are encouraging, and we will continue to perform more extensive testing.

### Availability

At the time of writing, we are finalizing the implementation of the sandboxing API. The latest version of the code can be obtained from [http://seclab.cs.ucdavis.edu/projects/sandbox.html](http://seclab.cs.ucdavis.edu/projects/sandbox.html). As our work progresses, updates will be available at this location.

### References

[1] Dennis, J., and VanHorn, E. Programming semantics for multiprogrammed computations. Communications of the ACM, 9:143–155, Mar. 1966.
[2] Walker, K., Sterne, D., Badger, L., Petkac, M., Shermann, D., and Oostendorp, K. Confining root programs with domain and type enforcement (DTE). In Proceedings of the Sixth USENIX Security Symposium, Jul. 1996.
[3] Security-enhanced linux. http://www.nsa.gov/selinux/.
[4] Saltzer, J., and Schroeder, M. The protection of information in computer systems. Proceedings of the IEEE, 63(9):1278–1308, Sep. 1975.
[5] Chang, F., Itzkovitz, A., and Karamcheti, V. User-level resource-constrained sandboxing. In Proceedings of the 4th USENIX Windows Systems Symposium, Aug. 2000.
[6] Lal, M., and Pandey, R. A scheduling scheme for controlling allocation of CPU resources for mobile programs. Autonomous Agents and Multi-Agent Systems, 5(1):7–43, Mar. 2002.
[7] Gong, L., Mueller, M., Prafullchandra, H., and Schemers, R. Going beyond the sandbox: An overview of the new security architecture in the Java Development Kit 1.2. In Proceedings of the USENIX Symposium on Internet Technologies and Systems, Dec. 1997.
[8] Necula, G., and Lee, P. Safe kernel extensions without run-time checking. In Proceedings of the USENIX 2nd Symposium on Operating Systems Design and Implementation, Oct. 1996.
[9] Small, C. A tool for constructing safe extensible C++ systems. In Proceedings of the Third USENIX Conference on Object-Oriented Technologies and Systems, Jun. 1997.
[10] Goldberg, I., Wagner, D., Thomas, R., and Brewer, E. A secure environment for untrusted helper applications (confining the wily hacker). In Proceedings of the Sixth USENIX Security Symposium, Jul. 1996.
[11] Acharya, A., and Raje, M. MAPbox: Using parameterized behavior classes to confine applications. In Proceedings of the 9th USENIX Security Symposium, Aug. 2000.
[12] Alexandrov, A., Kmiec, P., and Schauser, K. Consh: Confined internet execution environment. http://www.cs.ucsb.edu/˜berto/papers/99-usenix-consh.ps.
[13] Balfanz, D., and Simon, D. WindowBox: A simple security model for the connected desktop. In Proceedings of the 4th USENIX Windows Systems Symposium, Aug. 2000.
[14] Fraser, T., Badger, L., and Feldman, M. Hardening COTS software with generic software wrappers. In Proceedings of the 1999 IEEE Symposium on Security and Privacy, May 1999.
[15] Mitchem, T., Lu, R., and O’Brien, R. Using kernel hypervisors to secure applications. In Proceedings, 13th Annual Computer Security Applications Conference, Dec. 1997.
[16] Dan, A., Mohindra, A., Ramaswami, R., and Sitaram, D. Chakravyuha (CV): A sandbox operating system environment for controlled execution of alien code. Technical Report 20742, IBM T.J. Watson Research Center, 1997.
[17] Berman, A., Bourassa, V., and Selberg, E. TRON: Process-specific file protection for the UNIX operating system. In Proceedings of the 1995 Winter USENIX Conference, Jan. 1995.