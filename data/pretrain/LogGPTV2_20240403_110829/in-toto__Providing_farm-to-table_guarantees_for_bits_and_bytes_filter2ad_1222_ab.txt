into the develop branch and that all commits are signed.
For example, as seen in Figure 1, a project owner can de-
ﬁne a supply chain consisting of three steps: a tag, a build
and a package step. With these deﬁnitions, the project owner
also deﬁnes how the artifacts will ﬂow through the supply
chain (e.g., foo.c is used by build, yet foo.po is packaged
directly from tag). Afterwards, the project owner can assign
functionaries to carry out each of these steps and deﬁne an in-
spection so the end user can verify that foo was indeed created
during build and that foo.po came from the tagged release.
Layout creation tool. We provide a web-based layout
creation tool [12] to help project owners create in-toto
layouts. The tool uses an intuitive, graphical interface to
deﬁne: (1) the steps of the software supply chain (i.e., how
is the source code managed? how is the software’s quality
veriﬁed? how is the software built? how is the software
packaged?), (2) the actors (functionaries) who are allowed
to perform different steps of the software supply chain. An
in-toto layout is generated based on this information. In
addition, the in-toto website [13, 15] provides several
examples of layouts, which can serve as starting templates
for project owners seeking to integrate in-toto.
3.2.2 Link metadata
Verifying the actions carried out in the supply chain, requires
information about all steps performed in creating the
delivered product. Like a chain in real life, an in-toto
supply chain consists of conjoined links, with each link
serving as a statement that a given step was carried out.
Functionaries in charge of executing a step within the
supply chain must share information about these links.
Sharing such information as what materials were fed to
the step, and what product(s) were created, can ensure no
artifacts are altered in transit. To ensure that only the right
functionaries performed this step, the piece of link metadata
must be signed with the private key that corresponds to this
functionary’s key (as deﬁned in the supply chain layout).
There is a one-to-one relationship between the step deﬁni-
tions in the supply chain layout and the link metadata. That is,
each piece of link metadata gathered during each step within
the supply chain must match what the requirements prescribe
for that step. In order to ensure that the link metadata is gener-
ated by the intended entity, it must be cryptographically signed
with one (or more, if there is a threshold higher than one de-
ﬁned) of the keys indicated in the requirements for that link.
When all the link metadata has been collected, and the
supply chain has been properly deﬁned, the supply chain
layout and all the links can be shipped, along with the
delivered product, to the end user for veriﬁcation. We show
Figure 1: Graphical depiction of the software supply chain with in-toto ele-
ments added. The project owner creates a layout with three steps, each of which
will be performed by a functionary. Notice how the tag step creates foo.c and
a localization ﬁle foo.po, which are fed to different steps down the chain.
which steps must be performed and by who). In practice,
this would be the maintainer of an open-source project
or the dev-ops engineers of a project.
Functionaries: Functionaries are the parties that perform
the steps within the supply chain, and provide an
authenticated record of the artifacts used as materials
and the resulting products. Functionaries can be humans
carrying out a step (e.g., signing off a security audit) or
an automated system (e.g., a build farm).
Client: (e.g., end user): The client is the party that will
inspect and afterwards utilize a delivered product.
We will now elaborate on how these three parties interact
with the components of in-toto.
3.2 in-toto components
in-toto secures the software supply chain by using three dif-
ferent types of information: the software supply chain layout
(or layout, for short), link metadata, and the delivered product.
Each of these has a unique function within in-toto.
3.2.1 The supply chain layout
Laying out the structure of the supply chain allows the devel-
opers and maintainers of a project to deﬁne requirements for
steps involved in source code writing, testing, and distribution
within a software product’s lifecycle. In the abstract sense,
this supply chain layout is a recipe that identiﬁes which steps
will be performed, by whom, and in what order.
The supply chain layout deﬁnes a series of steps in the
supply chain. These deﬁnitions are used to enforce measures
on what artifacts should be used as materials. To ensure that
only the intended parties execute the right steps, a public key
is associated with each step. In order to ensure that the layout
was created by the project owner, it is cryptographically
signed with the project owner’s private key.
The project owner will deﬁne this supply chain layout by
setting different requirements for the project’s steps. These
requirements take the form of types of artifacts that can be pro-
duced (e.g., a localization step can only produce .po ﬁles), the
expected return values, the type of host that can carry out this
step and so forth. When consuming the delivered product, the
client (end user) veriﬁes that these requirements are satisﬁed.
In addition to deﬁning supply chain steps, the layout will
also specify a series of inspection steps (or inspections). These
1396    28th USENIX Security Symposium
USENIX Association
a minimal software supply chain, along with a graphical
representation of an in-toto layout in Figure 1.
3.2.3 The delivered product
The delivered product is the piece of software that the end
user wants to install. In order to verify the delivered product,
the end user (or client) will utilize the supply chain layout
and its corresponding pieces of link metadata. The end user
will use the link metadata to verify that the software provided
has not been tampered with, and that all the steps were
performed as the project owner intended. In Figure 1 the
delivered product consists of the foo.pkg ﬁle.
3.3 in-toto usage lifecycle
The in-toto usage lifecycle encompasses the following
overarching operations:
1. The project owner deﬁnes a supply-chain layout.
2. Each step is carried out as speciﬁed, and functionaries
gather and sign link metadata.
3. A delivered product is shipped to the client, who veriﬁes
it upon installation by:
ensuring the layout provided was signed by the
project owner and is not expired.
checking that all the steps deﬁned have enough
pieces of link metadata; that such links were signed
by the indicated functionaries; and that all artifacts
recorded ﬂowed properly between the steps as
indicated in the layout.
carrying out any inspection steps contained in the
layout and making sure that all artifacts recorded
match the ﬂow described in the layout.
As seen in Figure 1 a project owner creates the layout to
describe an overarching structure of the supply chain that the
client can use to verify. Later, functionaries carry out their
operations as usual, and submit link metadata to attest for
the result of their operation. Finally, a client uses a delivered
product, metadata links and a layout to verify the integrity
of the delivered product and of the entire chain.
By following the chain of attestations in the link metadata,
the client can reconstruct the operations described in Figure 1.
Afterwards, the client can verify these attestations against the
layout and execute any inspections to make sure everything
is in order before consuming the delivered product.
4 in-toto internals
In order to avoid tampered, incomplete or counterfeit
software, in-toto ensures the integrity and accuracy of all
software supply chain operations. in-toto ensures supply
chain integrity by the verifying the collected link metadata
against a software supply chain layout ﬁle. This ensures that
all operations were carried out, by the intended party and as
the legitimate project owner intended.
Understanding how the system’s metadata helps to ensure
the integrity of the supply chain is critical to a deeper
appreciation of how in-toto works. In this section, we will
explore the speciﬁcs of the link metadata and the layout ﬁle
to understand how in-toto operates.
For the context of this section, we will demonstrate the
different features of in-toto using Figure 1 as an example.
The project owner Diana will create a layout that describes
three steps and three functionaries for each step. The ﬁrst
step, tag, will produce a ﬁle foo.c to be input into the build
step, as well as a foo.po localization ﬁle. The second step,
build, will use the foo.c ﬁle from the tag step and produce a
foo binary. Finally, the package step will take the foo.po and
foo ﬁles and produce a package installable by the end user.
For a more complete and thorough description of all the
ﬁelds, signature schemes, implementations, a layout editing
tool and more, refer to the resources on the project website:
https://in-toto.io.
4.1 The supply chain layout
The supply chain layout explicitly deﬁnes the expected layout
of the software supply chain. This way, end users can ensure
that its integrity is not violated upon veriﬁcation. To do this,
the layout contains the following ﬁelds:
1 { " _ t y p e "
2
3
4
5
6
7 }
:
" e x p i r e s "
" readme " :
" keys "
" s t e p s "
" i n s p e c t i o n s "
: { "" : "" . . . } ,
:
[ "" , " . . . "
]
Listing 1: The supply chain layout structure
" l a y o u t " ,
:
"" ,
"" ,
:
[ "" , " . . . "
] ,
The overarching architecture of the layout deﬁnition
includes the following relevant ﬁelds:
An expiration date: this will ensure that the supply chain
information is still fresh, and that old delivered products
can not be replayed to users.
A readme ﬁeld: this is intended to provide a human-
readable description of the supply chain.
A list of public keys:
these keys belong to each
functionary in the supply chain and will be assigned to
different steps to ensure that only the right functionary
performs a particular step in the supply chain.
A list of steps: these are the steps to be performed in
the supply chain and by who. Step deﬁnitions, described
in depth in Section 4.1.1, will contain a series of
requirements that limit the types of changes that can be
done in the pipeline and what functionary can sign link
metadata to attest for its existence.
A list of inspections: these are the inspections to be
performed in the supply chain. As described in depth
in section 4.1.2, inspections are veriﬁcation steps to
be performed on the delivered product by the client to
further probe into its completeness and accuracy.
Though its structure is quite simple, the layout actually
provides a detailed description of the supply chain topology.
It characterizes each of the steps, and deﬁnes any possible
requirements for every step. Likewise, it contains instructions
for local inspection routines (e.g., verify that every ﬁle in a
tar archive was created by the right party in the supply chain),
which further ensure the delivered product has not been
USENIX Association
28th USENIX Security Symposium    1397
:
" e x p i r e s "
" readme " :
" keys "
tampered with. As such the layout allows the project owner to
construct the necessary framework for a secure supply chain.
For our example supply chain, Diana would have to list the
public keys as described on Listing 2, as well as all the steps.
1 { " _ t y p e "
2
3
4
5
6
7
8
9
10
11 }
: { "" : "" ,
"" ,
"" } ,
[ { " name " :
{ " name " :
{ " name " :
" l a y o u t " ,
:
" foo . pkg s u p p l y c h a i n " ,
" t a g " , " . . . " } ,
" b u i l d " , " . . . " } ,
" package " , " . . . " } ] ,
" i n s p e c t " , " . . . " } ]
" i n s p e c t i o n s "
"" ,
[ " { " name " :
" s t e p s "
Listing 2: The supply chain for our example
:
:
As described, the layout ﬁle already limits all actions to
trusted parties (by means of their public keys), deﬁnes the
steps that are carried out (to limit the scope of any step) and
speciﬁes veriﬁcation routines that are used to dive into the
speciﬁcs of a particular supply chain. We will describe the
latter two ﬁelds in depth now.
4.1.1 Step deﬁnition
1 { " _name " :
2
3
4
5
6
7 }
" t h r e s h o l d " :
" e x p e c t e d _ m a t e r i a l s " :
" e x p e c t e d _ p r o d u c t s " :
" pubkeys " :
" expected_command " :
[ [ "" ] ,
[ [ "" ] ,
] ,
""
[ "" , " . . . "
"" ,
"" ,
Listing 3: A supply chain step in the supply chain layout
" . . . " ] ,
" . . . " ] ,
Every step of the supply chain contains the following ﬁelds:
name: A unique identiﬁer that describes a step. This
identiﬁer will be used to match this deﬁnition with the
corresponding pieces of link metadata.
expected_materials: The materials expected as input
ARTIFACT_RULES as described in Section 4.1.3. It serves
as a master reference for all the artifacts used in a step.
expected_products: Given the step’s output information,
or evidence, what should be expected from it? The ex-
pected products also contains a list of ARTIFACT_RULES
as described in section 4.1.3.
expected_command: The command to execute and any
ﬂags that may be passed to it.
threshold: The minimum number of pieces of signed
link metadata that must be provided to verify this step.
This ﬁeld is intended for steps that require a higher de-
gree of trust, so multiple functionaries must perform the
operation and report the same results. For example, if the
threshold is set to k, then at least k pieces of signed link
metadata need to be present during veriﬁcation.
a list of public keys id’s: The id’s of the keys that can be
used to sign the link metadata for this step.
The ﬁelds within this deﬁnition list will indicate re-
quirements for the step identiﬁed with that name. To
verify these requirements, these ﬁelds will be matched
against the link metadata associated with the step. The
expected_materials and expected_products ﬁelds will
be used to compare against the materials and products
reported in the link metadata. This ensures that no disallowed
artifacts are included, that no required artifacts are missing,
and the artifacts used are from allowed steps who created
them as products. Listing 4 contains the step deﬁnition for
the build step for our example Layout above.
1 { " _name " :
2
3
4
5
6
7
8
9
10 }
] ,
" e x p e c t e d _ p r o d u c t s " :
" pubkeys " :
" expected_command " :
[ [ "CREATE" , " foo " ] ] ,
" gcc foo . c −o foo "
[ "MATCH" , " foo . c " , "WITH" ,
"PRODUCTS" , "FROM" , " t a g " ]
" t h r e s h o l d " :
" e x p e c t e d _ m a t e r i a l s " :
[ "" ] ,
" b u i l d " ,
" 1 " ,
[
Listing 4: The build step in our example layout
Inspection deﬁnition