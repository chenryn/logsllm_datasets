tation, and evaluation of a novel Proof-of-Stake blockchain
called BCUBE (i.e., Byzantine Broadcast-based Blockchain, or
B3). Using OVERLAYBB as its core, BCUBE can tolerate f ≥
2, while achieving practically usable transaction throughput
1
and conﬁrmation latency. Speciﬁcally, we have implemented a
prototype of BCUBE, and evaluated its performance, with up
to 10000 nodes and under similar conﬁgurations as in prior
works [11], [33]. In our experiments with f = 0.7 and a
target error probability of  ≤ 2−30, BCUBE achieves 163Kbps
throughput, with one 2MB block generated about every 98
seconds, and has a transaction conﬁrmation latency of less
than 6 hours.
Such performance of BCUBE is certainly not on par with
2. But BCUBE’s throughput
blockchains that only tolerate f < 1
and latency are nevertheless practically usable: As a reference
point, Bitcoin’s throughput is about 14Kbps, with one 1MB
block generated about every 600 seconds. Bitcoin entails a
conﬁrmation latency of about 9.3 hours,3 based on the state-
of-the-art analysis [17], to achieve  ≤ 2−30 under f = 0.25.
To our knowledge, BCUBE is the very ﬁrst blockchain that
can tolerate f ≥ 1
2, while achieving practically usable through-
put and latency. There are only a few prior approaches [6],
[26] for designing blockchains with f ≥ 1
2, which are all
based on byzantine broadcast. The throughput achieved by
those approaches (i.e., no more than 0.45Kbps under same
setting as BCUBE) is far from practically usable. Furthermore,
all those prior works are purely theoretical, ignore various
practical issues, and provide no implementation.
Roadmap. The next section deﬁnes our system/attack model.
Section III provides some background. Section IV and V
describe the design of OVERLAYBB. Section VI presents the
design of BCUBE. Section VII gives the security analysis of
OVERLAYBB and BCUBE. Section VIII presents the imple-
mentation and evaluation of BCUBE.
II. SYSTEM MODEL AND ATTACK MODEL
We model hash functions as random oracles. We assume
that some initial trusted setup provides a genesis block, which
contains an unbiased random beacon to be used in the very
ﬁrst epoch. This is a typical assumption in Proof-of-Stake
blockchains (e.g., [7], [11]).
Nodes and stakes/coins. We consider a permissionless set-
ting (i.e., similar to Algorand [11]), without PKI or initial
trusted setup for binding nodes to identities. Each node in
the system holds a locally-generated public-private key pair,
and the public key is viewed as the node’s id. Each node
can either be honest or malicious. The malicious nodes are
fully byzantine, and may deviate arbitrarily from the protocol.
They may also arbitrarily collude, and we view them as all
being controlled by the adversary. We allow the adversary
to be mildly-adaptive [7], [16], [35] — for example, it takes
multiple epochs for the adversary to adaptively corrupt a node.
We rely on Proof-of-Stake (PoS) [7], [11], [16] for Sybil
defense in our permissionless setting: We assume that there are
2Prior works have considered communication complexity (CC), which is
the total number of bits sent by all honest nodes. But CC does not map to
throughput or TTB ratio. For example, some protocols [6], [8], [25] require a
node to send many bits in a few “busy” rounds, and nothing in other rounds.
(For a given node, the adversary decides which rounds are “busy” for that
node.) While such protocols may have low CC, the deployment environment
still needs to provision for the high bandwidth need of those “busy” rounds.
3Based on the formula from [17], to ensure that the probability of the
adversary (under all possible attack strategies) reverting a block is at most
2−30 in Bitcoin, the block needs to be at least 56 blocks deep in the
blockchain. Given Bitcoin’s 10-minute inter-block time, this translates to 9.3
hours. The well-known “6 blocks deep” rule of thumb in Bitcoin, and the
corresponding 1-hour conﬁrmation latency, would only give  ≈ 0.05 [17]
under f = 0.25.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
21264
some stakes (or coins) in the system, where the total number
of coins may change over time. At any point of time, each coin
has an owner, which is the node holding that coin. Again, the
owner may change over time. Information regarding which
nodes hold which coins is stored in the blockchain itself, and
is publicly known. We assume that at any point of time, at
most f fraction of the stakes/coins in the system are owned
by malicious nodes, where f is some constant no larger than
0.99. (Our experiments mainly consider f = 0.7.) Sometimes
as a stepping stone, we also consider a simpliﬁed permissioned
setting with exactly n nodes, where we use f to denote the
fraction of malicious nodes.
To simplify periodic beacon generation, BCUBE further re-
lies on a weak Proof-of-Work (PoW) assumption: We assume
that the adversary’s computational power is at most 100 times
of the aggregate computational power of the honest nodes.
This assumption is separate from and independent of the
earlier f threshold. (If needed, this “100” value can be further
increased without impacting security, but at the cost of lower
performance.) Note that our assumption differs from PoW-
based blockchains, whose security depends on the adversary
having less computational power than the honest nodes.
Communication. We assume that all the honest nodes form a
connected overlay network — this is a typical assumption in
large-scale blockchain systems (e.g., [11]). Consider any two
neighboring honest nodes A and B in the overlay. It will be
convenient to view the undirected edge between A and B as
two directed edges in two directions. With respect to some δ1
value, we say that the directed edge from A to B is good if a
message sent by A can reach (with proper retries) B within δ1
time, as long as the message is relatively small (e.g, ≤ 10KB).
Otherwise the edge is bad. In general, under reasonably large
δ1 (e.g., δ1 = 10 seconds), one would expect that while some
edges may occasionally be bad, most edges among the honest
nodes will be good. Hence we assume the honest subgraph
(i.e., the subgraph containing all the honest nodes and all the
good edges) to be connected. We use d to denote an upper
bound on the diameter of this honest subgraph.
Partitioning attacks [2], [30] can cause our assumption to
be violated in general. But such attacks apply to many other
existing blockchains as well (e.g., [2], [16], [21], [23], [30],
[33]), despite that all these existing designs can only tolerate
2. How to defend against such partitioning attacks is an
f < 1
active research topic by itself, and is beyond the scope of this
paper: Possible defenses include hiding the overlay network
structure [4], diversifying neighbors’ proﬁle [13], or preserving
neighbors that provide fresher data [30].
We assume that nodes have loosely synchronized clocks, so
that the clock readings on any two nodes do not differ by more
than δ2 (e.g., δ2 = 2 second). We will describe a byzantine
broadcast execution as a sequence of rounds, and each node
uses its local clock to keep track of the beginning of this
execution as well as the current round number. We allow the
starting time of each round on different nodes to be somewhat
misaligned due to the δ2 clock error. Each round has a ﬁxed
TABLE I: Key notations.
total number of nodes (for permissioned setting)
n
m number of nodes (for permissioned setting) in the committee,
f
or number of coins (for PoS setting) held by committee members
fraction of malicious nodes (for permissioned setting),
or fraction of coins (for PoS setting) held by malicious nodes
upper bound on diameter of subgraph containing honest nodes/edges
d
w maximum number of neighbors (both honest neighbors
and malicious neighbors) that an honest node may have
error probability
round duration
size of object to be broadcast in byzantine broadcast protocol
total number of fragments (of the object to be broadcast)

δ
l
s
duration δ = δ1 + δ2 (e.g., δ = 12 seconds). We assume that
CPU processing delay is negligible, as compared to δ. At the
beginning of each round, a node receives messages, processes
them, and then sends new messages. Since δ = δ1 + δ2, a
message sent in round i along a good edge is received by
the beginning of round i + 1 on the receiver, as long as the
message is relatively small (e.g, ≤ 10KB).
Problem deﬁnition. We aim to design a blockchain sys-
tem where each node maintains an append-only sequence of
blocks. (BCUBE has no forks, and all blocks in this sequence
are considered as “conﬁrmed”.) Each block may contain, for
example, a list of transactions. The blockchain should achieve
standard safety and liveness guarantees, despite the byzantine
behavior of all the malicious nodes. Roughly speaking, safety
means that the sequences on all honest nodes are consistent
with each other, while liveness means that the sequence on
each honest node keeps growing over time. We defer the exact
deﬁnitions to Section VII.
Notations. Table I summarizes the notations so far, and also
deﬁnes several other notations.
III. BACKGROUND ON BYZANTINE BROADCAST
We review two existing byzantine broadcast protocols [6],
[8], which OVERLAYBB builds upon. To help understanding,
we describe them in a simple permissioned setting with n
nodes, out of which f n are malicious. We will ﬁrst assume
a clique topology among the n nodes, and then generalize to
arbitrary multi-hop topology.
A. Dolev-Strong Protocol [8]
Clique topology. In round 0 of this protocol, the broadcaster
sends the object to all nodes, with its own signature attached.
Upon receiving an object in round t, if the object has less than
t signatures attached (including the broadcaster’s signature), a
node drops the object. Otherwise the node accepts this object,
and then adds its own signature to the object and forwards
the object to all other nodes. Once an object is accepted, a
node will not forward the object again in the future. A node
may accept more than one object, when the broadcaster is
malicious. At the end of round f n + 1, a node outputs the
special null object ⊥, if it has accepted more than one object
(implying a conﬂict) or if it has accepted none. Otherwise it
outputs the (single) object accepted.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
31265
The key intuition in this protocol is the following: When a
node B is about to forward/send an object, node B can safely
accept the object if B knows that its send will cause all other
honest nodes to accept this object (if they have not already
done so). This ensures that either all or none honest nodes
accept that object. Speciﬁcally in this protocol, if B receives
and then immediately forwards an object in round t ≤ f n,
then B is sure that all other honest nodes must receive and
accept this object in round t + 1 ≤ f n + 1, which is before the
end of the protocol. On the other hand, if B sends an object
in round f n + 1, then other nodes will not receive the object
before the end of the execution. But in such a case, B must
have seen at least f n + 1 signatures on the object. One of
these must be from some honest node A, and A must have
previously already forwarded the object to all honest nodes.
Namely, A has already done the job for B.
The protocol comes with a further optimization: Once a
node has accepted two objects, it no longer accepts/forwards
more objects. Hence a node only sends at most two messages
throughout the execution. Agreement is still preserved: If one
honest node A accepts two objects, then another honest node
B must also accept two objects (which may be different from
what A accepts). Hence all honest nodes will output ⊥.
Multi-hop topology. The protocol naturally generalizes [8],
[31] to multi-hop topologies. The only modiﬁcations needed
are: i) the protocol now runs for f n + d rounds, and ii) a node
now only forwards an object to its (up to w) neighbors.
TTB ratio. Consider any honest node A. In the above protocol,
there are some rounds (potentially chosen by the adversary)
during which A needs to forward objects to all its neighbors.
Recall from Table I that l is the object size. Hence in each
of those rounds, A needs to send at least lw bits total. Under
the given bandwidth constraint B, each node has the capacity
to send at most Bδ bits in each round, where δ is the round
duration. Hence the maximum l the protocol can manage is
Bδ
w . The protocol has total f n + d rounds. Since the protocol
Bδ
manages to broadcast an object of size l =
w using total
(f n+d)δ and R = T/B =
(f n + d)δ time, we have T =
(f n+d)δB ≤ Bδ/w
B. Chan et al.’s Protocol [6]
(f n+d)δB < 1
wf n.
l
l
Clique topology. Recently, Chan et al. [6]4 have proposed an
elegant design to substantially reduce the number of rounds in
the Dolev-Strong protocol. Chan et al.’s protocol ﬁrst selects
a random committee of m nodes. Now the m committee
members can do byzantine broadcast among themselves, using
the Dolev-Strong protocol [8] while taking at most m rounds.
But
immediately clear how the remaining non-
committee members can decide. In particular, since a majority
of the committee members can be malicious, voting will not
work.
is not
it
4Chan et al.’s original protocol [6] allows a fully-adaptive adversary, but
can only broadcast messages containing a single-bit. The version we describe
here is for mildly-adaptive adversaries and can broadcast multi-bit messages.
Chan et al. [6] overcomes this problem in the following
way. Consider one round in the Dolev-Strong protocol, where
one committee member A sends a message (containing the
object and signatures) to all other committee members. Their
idea [6] is to replace this round with two rounds, so that A
sends the message to all the non-committee members ﬁrst,
and then the non-committee members forward A’s message
(unchanged) to all
the committee members. (Hence there
will be total 2m rounds.) This enables the non-committee
members to observe the communication originated from the
honest committee members. Before forwarding an object, a
non-committee member B can precisely predict (based on the
signatures on the object) whether the committee members,
upon receiving this object, will accept the object. If yes, B
accepts the object before forwarding it.
Multi-hop topology. Chan et al.’s protocol trivially generalizes
to a multi-hop topology, assuming that each node has sufﬁcient
bandwidth to relay all messages. Speciﬁcally, whenever a node
needs to send messages to other nodes,
it simply does a
multicast (i.e., ﬂooding) on the multi-hop topology, taking d
rounds. Hence each of the 2m rounds in the clique setting
now becomes d rounds, and there are total 2dm rounds.
IV. DESIGN OF OVERLAYBB
Byzantine broadcast protocols are often not complex in
implementation, but their designs can be subtle. Because of