# Network Operations and System Calls

- **System Calls** are listed in the `sys_call_table`.
- This table is an array of pointers, indexed by system call number.

---

## Building a Linux Rootkit (Continued)

### Traditional Rootkits
- Traditional rootkits are software packages that often replace system binaries such as `ls`, `ps`, and `netstat`.
- They are used to hide an attacker's files, processes, and connections.
- These rootkits can be easily detected by:
  - Comparing "known good" files with suspect ones.
  - Comparing checksums (e.g., using RPM database or FIM utility).

### Kernel Rootkits
- A "kernel rootkit" can subvert the kernel itself using "hooks".
- It can hide specific processes from `/proc` so that `ps` cannot see them.
- It can also hide itself from LKM listings and subvert calls made by the `lsmod` command.

### What is a "Hook"?
- A hook is a redirection of a system call.
- It modifies the flow of execution.
- A hook registers its address as the location for a specific function.
- When the function is called, the hook is executed instead.

### Creating a LKM in Android
- By creating a Loadable Kernel Module (LKM) in Android, we not only subvert the layers above the kernel but also the end-user experience.

---

## Building a Linux Rootkit – Hurdles

### Retrieve the `sys_call_table` Address
- **Problem**: Linux Kernel 2.5 or greater no longer exports the `sys_call_table` structure.
  - `extern void *system_call_table[];` does not work.
- **Solution**: The address can be found in the `System.map` file within the device’s kernel source code.
  ```bash
  root@argon:~/android/legend-kernel# grep sys_call_table System.map
  C0029fa4 T sys_call_table
  ```
  - These addresses are static for all devices with the same hardware/firmware/kernel.

### Compile Against the Device Kernel Source Code
- **Problem**: The kernel refused to accept our LKM because version magics did not match.
- **Solution**: Version magics are stored as a static string in `include/linux/utsrelease.h`.
  ```bash
  root@argon:~/android/legend-kernel# cat utsrelease.h
  #define UTS_RELEASE "2.6.29"
  ```
  - After re-compiling our LKM against the HTC Legend source, the module loaded.
  ```bash
  root@argon:~/android/legend-kernel# cat utsrelease.h
  #define UTS_RELEASE "2.6.29-9a3026a7"
  ```

### Enable System Call Debugging
- **Problem**: We needed to map out the system calls of interest to discover high-layer phone functions for later interception.
- **Solution**: We wrote a debug LKM that intercepted the following calls:
  - `sys_write`
  - `sys_read`
  - `sys_open`
  - `sys_close`

- **What Did We Learn?**
  - We can discover phone routines by parsing `dmesg` for specific actions or data inputs.
  - Example: Placing/receiving a call to/from the "rootkitted" phone and parsing for the phone number reveals commands used by the phone.
  - Our debug LKM captures all browsing activity and social networking activity conducted on the phone, which could be used as an additional Command and Control (C&C) channel.

---

## Introducing Mindtrick – The Android Rootkit

### Current Capabilities
- Sends an attacker a reverse shell over 3G/WiFi.
- Triggered by a pre-defined phone number.
- The attacker then has access to the phone’s OS as ROOT.
- The rootkit is hidden from the kernel.
- **Note**: The source for Mindtrick is on the DEFCON 18 CD.
  ```bash
  # lsmod
  # insmod mindtrick.ko
  # lsmod
  ```

### Live Demo
- **Steps**:
  - Install the rootkit.
  - Activate the rootkit via a phone call.
  - View the reverse shell connection.
  - View SMS messages.
  - View contacts.
  - Retrieve GPS coordinates.
  - Make a phantom phone call.
  - Shutdown the phone.

### Current Prevention
- **Testing**:
  - Neither Lookout Mobile Security nor Norton Smartphone Security detect LKM rootkits.
- **Recommendations**:
  - Manufacturers should ensure all device drivers/LKMs are centrally signed.

### Conclusions
- It is possible to write a rootkit for the Android platform.
- We did not include automated functionality (by design), but this can easily be done.
- Little attention is being paid to smartphone security, while everyone trusts their devices for critical tasks.
- In the next 10 years, we will see an explosive growth in attacks against smartphones and other mobile computing platforms. Will we be prepared?

### Contact Us
- Nicholas J. Percoco / PI:EMAIL / @c7five
- Christian Papathanasiou / PI:EMAIL / @h0h0_

---

Copyright © Trustwave 2010