  and	
  network	
opera0ons	
•  Systems	
  Calls	
  are	
  listed	
  in	
  sys_call_table	
•  An	
  array	
  of	
  pointers	
  /	
  Indexed	
  by	
  system	
  call	
  number	
Copyright Trustwave 2010 
Building a Linux Rootkit (cont’d) 
•  Tradi0onal	
  “rootkits”	
  are	
  so7ware	
  packages	
•  Onen	
  replace	
  system	
  binaries	
  like	
  ls,	
  ps,	
  netstat	
•  Used	
  to	
  hide	
  aFacker’s	
  ﬁles,	
  processes	
  and	
  connecHons	
•  Tradi0onal	
  “rootkits”	
  can	
  be	
  easily	
  be	
  detected	
  by:	
•  Comparing	
  “known	
  good”	
  ﬁles	
  with	
  suspect	
  ones	
•  Comparing	
  checksums	
  (RPM	
  database	
  or	
  FIM	
  uHlity)	
•  A	
  “kernel	
  rootkit”	
  can	
  subvert	
  the	
  kernel	
  itself	
  using	
  “hooks”	
•  Hide	
  speciﬁc	
  processes	
  from	
  /proc	
  so	
  ps	
  can’t	
  see	
  it	
•  Hide	
  itself	
  from	
  LKM	
  lisHngs	
•  Subvert	
  calls	
  made	
  by	
  lsmod	
  command	
Copyright Trustwave 2010 
Building a Linux Rootkit (cont’d) 
What	
  is	
  a	
  “hook”?	
•  A	
  hook	
  is	
  a	
  redirecHon	
  of	
  a	
  system	
  call	
•  Modiﬁes	
  the	
  ﬂow	
  of	
  execuHon	
•  A	
  hook	
  registers	
  its	
  address	
  as	
  the	
  locaHon	
  for	
  a	
speciﬁc	
  funcHon	
•  When	
  the	
  funcHon	
  is	
  called	
  the	
  hook	
  is	
  executed	
instead	
By	
  Crea0ng	
  a	
  LKM	
  in	
  Android,	
  we	
  not	
  only	
  subvert	
  the	
layers	
  above	
  the	
  kernel,	
  but	
  the	
  End-­‐User	
  Himself!	
Copyright Trustwave 2010 
Building a Linux Rootkit – Hurdles  
•  There	
  were	
  a	
  few	
  hurdles	
  to	
  overcome:	
•  Retrieve	
  the	
  sys_call_table	
  address	
•  Compile	
  against	
  the	
  device	
  kernel	
  source	
  code	
•  Enable	
  System	
  Call	
  Debugging	
Copyright Trustwave 2010 
Building a Linux Rootkit – Hurdles  
Retrieve	
  the	
  sys_call_table	
  address	
•  Problem:	
•  Linux	
  Kernel	
  2.5	
  or	
  greater	
  no	
  longer	
  export	
  sys_call_table	
structure	
•  extern void *system_call_table[]; DOES	
  NOT	
WORK!	
•  Solu0on:	
•  It	
  can	
  be	
  found	
  in	
  the	
  System.map	
•  Find	
  it	
  in	
  the	
  device’s	
  kernel	
  source	
  code	
root@argon:~/android/legend-kernel# grep sys_call_table System.map 
C0029fa4 T sys_call_table 
root@argon:~/android/legend-kernel#  
These	
  addresses	
  are	
  STATIC	
  all	
  devices	
  with	
  the	
  same	
  hardware/ﬁrmware/kernel!	
Copyright Trustwave 2010 
Building a Linux Rootkit – Hurdles  
Compile	
  against	
  the	
  device	
  kernel	
  source	
  code	
•  Problem:	
•  The	
  kernel	
  refused	
  to	
  accept	
  our	
  LKM	
  because	
  version	
  magics	
didn’t	
  match	
•  Solu0on:	
•  We	
  found	
  version	
  magics	
  are	
  stored	
  in	
  the	
  form	
  of	
  a	
  staHc	
  string	
•  We	
  need	
  modify	
  kernel	
  source	
  code	
  in	
  include/linux/utsrelease.h 
root@argon:~/android/legend-kernel# cat utsrelease.h 
#define UTS_RELEASE “2.6.29” 
root@argon:~/android/legend-kernel#  
A7er	
  re-­‐compiling	
  our	
  LKM	
  against	
  the	
  HTC	
  Legend	
  source,	
  the	
  module	
  loaded!	
root@argon:~/android/legend-kernel# cat utsrelease.h 
#define UTS_RELEASE “2.6.29-9a3026a7” 
root@argon:~/android/legend-kernel#  
OLD	
NEW	
Copyright Trustwave 2010 
Building a Linux Rootkit – Hurdles  
Enable	
  System	
  Call	
  Debugging	
•  Problem:	
•  We	
  need	
  to	
  map	
  out	
  the	
  system	
  calls	
  we	
  were	
  interested	
  in	
  in	
order	
  to	
  discover	
  high	
  layer	
  phone	
  funcHons	
  which	
  we	
  would	
  later	
intercept	
•  Solu0on:	
•  We	
  wrote	
  a	
  debug	
  LKM	
  that	
  incepted	
  the	
  following	
  calls:	
•  sys_write	
•  sys_read	
•  sys_open	
•  sys_close	
Copyright Trustwave 2010 
Building a Linux Rootkit – Hurdles  
Enable	
  System	
  Call	
  Debugging	
•  What	
  did	
  we	
  learn?	
•  We	
  can	
  discover	
  phone	
  rouHnes	
  by	
  parsing	
  dmesg for	
speciﬁc	
  acHons	
  (or	
  data	
  we	
  input).	
•  Example:	
•  Placing/Receiving	
  a	
  call	
  to/from	
  the	
  “rootkiFed”	
  phone	
and	
  parsing	
  for	
  the	
  phone	
  number	
  reveals	
  commands	
used	
  by	
  the	
  phone.	
•  Our	
  debug	
  LKM	
  captures	
  all	
  browsing	
  acHvity	
  and	
  social	
networking	
  acHvity	
  being	
  conducted	
  on	
  the	
  phone	
  as	
well.	
  This	
  could	
  be	
  used	
  as	
  an	
  addiHonal	
  C&C	
  channel.	
Copyright Trustwave 2010 
Introducing Mindtrick – The Android Rootkit 
What	
  does	
  it	
  do	
  (today)?	
•  Sends	
  an	
  aoacker	
  a	
  reverse	
  shell	
  over	
  3G/WiFi	
•  Triggered	
  by	
  a	
  pre-­‐deﬁned	
  phone	
  number	
•  Aoacker	
  than	
  have	
  access	
  to	
  the	
  phone’s	
  OS	
  as	
  ROOT	
•  See	
  Demo	
  for	
  other	
  FUN!	
•  The	
  rootkit	
  is	
  hidden	
  from	
  the	
  kernel	
Note:	
  The	
  source	
  for	
  Mindtrick	
  is	
  on	
  the	
  DEFCON	
  18	
  CD.	
# lsmod 
# insmod mindtrick.ko 
# lsmod 
# 
Copyright Trustwave 2010 
Live Demo 
What	
  are	
  we	
  going	
  to	
  do?	
• 
Install	
  the	
  rootkit	
• 
AcHvate	
  the	
  rootkit	
  via	
  a	
  phone	
  call	
• 
View	
  the	
  reverse	
  shell	
  connect	
• 
View	
  SMS	
  messages	
• 
View	
  Contacts	
• 
Retrieve	
  GPS	
  coordinates	
• 
Make	
  phantom	
  phone	
  call	
• 
Shutdown	
  the	
  phone	
Copyright Trustwave 2010 
Current Prevention 
What	
  did	
  we	
  test?	
•  Neither	
  Lookout	
  Mobile	
  Security	
  nor	
  Norton	
  Smart	
Phone	
  Security	
  detect	
  LKM	
  Rootkits	
What	
  can	
  be	
  done?	
•  Manufactures	
  should	
  ensure	
  all	
  device	
  drivers	
  /	
LKM	
  /	
  are	
  centrally	
  signed.	
Copyright Trustwave 2010 
Conclusions 
•  It	
  is	
  possible	
  to	
  write	
  a	
  rootkit	
  for	
  the	
  Android	
  plaporm.	
•  We	
  didn’t	
  include	
  automated	
  func0onality	
  (by	
  design).	
•  This	
  can	
  easily	
  be	
  done.	
•  Liole	
  aoen0on	
  is	
  being	
  paid	
  to	
  smartphone	
  security,	
  while	
everyone	
  trusts	
  their	
  device	
  to	
  perform	
  cri0cal	
  tasks.	
•  In	
  the	
  next	
  10	
  years,	
  we	
  will	
  see	
  an	
  explosive	
  growth	
  in	
  the	
number	
  of	
  aoacks	
  against	
  smartphones	
  and	
  other	
  mobile	
compu0ng	
  device	
  plaporms.	
  Will	
  we	
  be	
  prepared?	
Contact Us: 
Nicholas J. Percoco / PI:EMAIL / @c7five 
Christian Papathanasiou / PI:EMAIL / @h0h0_