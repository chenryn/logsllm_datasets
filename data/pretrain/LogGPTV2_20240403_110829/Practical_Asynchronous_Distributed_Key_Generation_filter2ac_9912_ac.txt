share of the ﬁnal secret key z.
By deﬁnition, an asynchronous veriﬁable secret sharing
(AVSS) scheme allows a situation where enough, but not
all, honest nodes receive their shares from the dealer. Such
a situation usually arises when a malicious dealer sends
valid shares to a subset of honest nodes, and the corrupted
nodes also claim to have the shares so that all honest
nodes terminate the sharing phase. Hence, with AVSS, it is
possible that not all honest nodes received shares of every
AVSS instance included in an intermediate key set Ti. Such
situations prohibit nodes from aggregating AVSS instances
in Ti, which is required for generating shared randomness
and computing its share of the ﬁnal secret key z.
We address this issue using two ideas. First, we use
asynchronous complete secret sharing (ACSS) instead of
AVSS. A crucial property of ACSS is that it ensures that
if it terminates successfully at one honest node, then all
honest nodes will eventually receive a valid share. Second,
an honest node i participates in the reliable broadcast (RBC)
of key set proposal Tj only after every ACSS instance in Tj
has terminated at node i. This ensures if a RBC instance
delivers Tj at any honest node, then every ACSS instance
in Tj will eventually terminate at all honest nodes, which
further ensures that honest nodes can construct the shared
randomness for jth ABA as well as the ﬁnal secret key.
Challenge 2. Ensure all ABA instances terminate, even if
some malicious nodes do not send their intermediate key
sets.
There is a subtle liveness issue in the approach we
described so far. If a malicious node j does not propose
the jth intermediate key set, then there is no shared ran-
domness available for the jth ABA to circumvent the FLP
impossibility [25]. To resolve this issue, we make the crucial
observation that the FLP impossibility only applies when
the initial state is bivalent, i.e., honest nodes have different
inputs. For a univalent initial state, i.e., all honest nodes have
the same input, there is no impossibility, and agreement can
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:29 UTC from IEEE Xplore.  Restrictions apply. 
3
2520
Figure 1: Overview of our ADKG protocol in a network of 4 nodes where node 4 is malicious. During the Sharing phase, each node
secret shares a random secret using a ACSS protocol. During the Key Set Proposal phase, each node waits till t + 1 ACSS terminates
locally. Let Ti be the set of t + 1 ACSS instances that terminated at node i. Node i then reliably broadcasts Ti. During the agreement
phase, nodes agree on which nodes proposed a valid key set using n-parallel ABAs. Also, for ith ABA nodes use the secrets of nodes
in Ti to generate shared randomness. Finally, once all ABA instances terminate, nodes reconstruct the ﬁnal public key during the Key
Derivation phase.
terminate without any randomness. Therefore, we designed
our protocol to ensure that if a malicious node does not
propose an intermediate key set, it leads to a univalent
initial state for ABA. In particular, in such a situation, all
honest nodes input 0, and we need the ABA to output
0 without using randomness. We refer to this property as
Good-Case-Coin-Free, and indeed, the ABA protocol due to
Crain [17] (restated in Appendix B) has this property. Hence,
either all honest nodes input 0 to ABA and it terminates
deterministically or, thanks to ACSS, eventually all honest
nodes receive the intermediate key set and thus can generate
shared randomness to circumvent FLP.
III. PRELIMINARIES
In this section, we describe the preliminaries used in our
ADKG protocol. We summarize the notations used in the
paper in Table II.
Table II: Notations used in the paper
Notation
Description
n
t
Zq
G
g, h
z, hz
zi
hzi
(cid:96)
κ
pki, ski
si
pi(·)
vi
si,j
vi,j
Ti
T (cid:48)
i
Total number of nodes
Maximum number of malicious nodes
Field of order q where q is prime
Group of order q where DDH is assumed to be hard
Random and independent generators of G
ADKG secret and public key
Secret share of z output by node i
Threshold public key of node i
Reconstruction threshold of ADKG
Security parameter
Public and secret keys of ith node.
Secret chosen by ith node during sharing phase
Polynomial chosen by ith node to share si
Feldman commitment of the polynomial pi(·)
pi(j), i.e., pi(·) evaluated at j
Commitment of si,j computed as gsi,j
Intermediate key set proposed by node i in RBC
Indices of ACSS that terminates at node i
A. Validated Reliable Broadcast
Deﬁnition 1 (Reliable Broadcast [11]). A protocol for a
set of nodes {1, ...., n}, where a distinguished node called
the broadcaster holds an initial
is a reliable
broadcast (RBC) protocol, if the following properties hold
• Agreement: If an honest node outputs a message M(cid:48) and
another honest node outputs M(cid:48)(cid:48), then M(cid:48) = M(cid:48)(cid:48).
input M,
• Validity: If the broadcaster is honest, all honest nodes
eventually output the message M.
• Totality: If an honest node outputs a message, then every
honest node eventually outputs a message.
We will use the recent validated RBC protocol of [19].
For a message M, its communication cost is O(n|M|+κn2)
where |M| is the size of M and κ is the output size of a
collision-resistant hash function.
B. Asynchronous Complete Secret Sharing
Deﬁnition 2 (Asynchronous Complete Secret Sharing). An
ACSS protocol consists of two phases: Sharing and Recon-
struction. During the sharing phase, a dealer L shares a
secret s using Sh. During the reconstruction phase, nodes
use Rec to recover the secret. We say that (Sh, Rec) is a t-
resilient ACSS protocol if the following properties hold with
probability 1 − negl(κ) against an adversary controlling up
to t nodes:
• Termination:
1) If the dealer L is honest, then each honest node will
eventually terminate the Sh protocol.
2) If an honest node terminates the Sh protocol, then every
honest node will eventually terminate Sh.
3) If all honest nodes start Rec, then each honest node will
eventually terminate Rec.
• Correctness:
1) If L is honest, then each honest node upon terminating
Rec, outputs the shared secret s.
4
2521
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:29 UTC from IEEE Xplore.  Restrictions apply. 
Node 1Node 2Node 3Node 4-parallel ACSS-parallel RBC-parallel ABA [1,0,1,0][1,0,1,0][1,0,1,0]Interpolate andoutput Interpolate andoutput Interpolate andoutput Sharing PhaseKey Set Proposal PhaseAgreement PhaseKey Derivation Phase2) If some honest node terminates Sh, then there exists a
ﬁxed secret s(cid:48) ∈ Zq, such that each honest node upon
completing Rec, will output s(cid:48).
• Secrecy: If L is honest and no honest node has begun
executing Rec, then an adversary that corrupts up to t
nodes has no information about s.
• Completeness: If some honest node terminates Sh, then
there exists a degree t polynomial p(·) over Zq such that
p(0) = s(cid:48) and each honest node i will eventually hold a
share si = p(i). Moreover, when L is honest s(cid:48) = s.
We need to slightly relax the above standard secrecy
notion: for a uniformly random s ∈ Zq, we allow the ACSS
to reveal gs for a random generator g ∈ G. We prove in §V
that revealing gs does not affect the Secrecy property of our
ADKG protocol.
We also require the ACSS scheme to satisfy the following
Homomorphic-Partial-Commitment property.
• Homomorphic-Partial-Commitment: If some honest node
terminates Sh for a secret s,
then every honest node
outputs commitments of si (as deﬁned in Completeness)
for all i. Furthermore, these commitments are additively
homomorphic across different ACSS instances.
We require the Homomorphic-Partial-Commitment prop-
erty for two reasons: ﬁrst, we need nodes to output the
threshold public key hzj of each node; second, we need
to aggregate commitments of distinct ACSS instances.
We observe that if an ACSS protocol outputs a Feldman
commitment of the underlying polynomial, then it guaran-
tees Homomorphic-Partial-Commitment. We brieﬂy describe
the Feldman polynomial commitment next.
Feldman polynomial commitment. The commitment to a
random degree-d polynomial
p(x) = a0 + a1x + a2x2 + ··· + adxd
for uniformly random coefﬁcients ak ∈ Zq for each k ∈
[0, d], is a vector v computed as:
v = [ga0, ga1, ga2, . . . , gad ]
It is easy to see that given the Feldman commitment v of
a polynomial p(·), we can compute gp(i), the commitment
of p(i) by interpolating p(i) in the exponent. Also, given
polynomial p(·) and p(cid:48)(·), the commitments gp(i) and gp(cid:48)(i)
are additively homomorphic. Note that this commitment is
not completely hiding as it leaks gak for each k ∈ [0, d]. We
show in §V that revealing gak does not violate the secrecy
property of our ADKG. Also, the size of the commitment is
linear in d. Given a commitment v and a share si, a node
checks whether si = p(i) by checking whether
d(cid:89)
k=1
gsi =
vik
k
(1)
5
2522
In our paper, we use two different ACSS protocols; the
ACSS scheme from Das et al. [19] which improves upon
Yurek et al. [58], and our new ACSS scheme in §VII. We
will incorporate a Feldman commitment into each of them
to ensure the Homomorphic-Partial-Commitment property.
For the ACSS scheme of [19], we can simply use Feld-
man commitment instead of Pedersen’s commitment for the
underlying polynomial. Our high-threshold ACSS in §VII
outputs the Feldman commitment by construction.
C. Asynchronous Binary Agreement
Deﬁnition 3 (Asynchronous Binary Agreement). A proto-
col for a set of nodes {1, ...., n} each holding an initial
binary input b ∈ {0, 1}, is an Asynchronous Binary Agree-
ment (ABA) protocol, if the following properties hold under
asynchrony
• Agreement: No two honest nodes output different values.
• Validity: If all honest nodes have the same input value, no
honest node outputs a different value.
• Termination: Every honest node eventually outputs a
value.
All ABA protocols rely on randomization to circumvent
the FLP impossibility [25]. The most efﬁcient approach is
to use shared randomness, provided by a common coin pro-
tocol [12]. Our ADKG protocol requires an ABA protocol
with the following additional property.
• Good-Case-Coin-Free: If all honest nodes input the same
value to the ABA, then all honest nodes output without
invoking the common coin.
The ABA protocol of Crain [17] has the Good-Case-Coin-
Free property. It uses O(n2) expected communication and
expected O(1) rounds. For completeness, we provide the
pseudocode of Crain’s ABA and explain why it satisﬁes the
Good-Case-Coin-Free property in Appendix B (Figure 5).
IV. DESIGN
Our ADKG protocol has four phases: Sharing, Key Set
Proposal, Agreement and Key Derivation. The ﬁrst three
phases have a similar structure where we run n concurrent
instances of ACSS, RBC, and ABA, respectively, where each
node initiates one instance of ACSS and RBC, and each
ABA instance agrees on whether or not the corresponding
RBC terminates. We refer to the ACSS (RBC or ABA)
invoked by or associated with node i as the ith ACSS (RBC
or ABA). We give the pseudocode of our ADKG protocol
in Algorithm 1 and describe each phase next.
The public parameters for our ADKG protocol are a pair
of randomly and independently chosen generators (g, h) of
a group G of prime order q, in addition to any public
parameters of the ACSS protocol. In this section, we will
focus on the case of (cid:96) = t + 1 (refer to §II-B).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:29 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 ADKG for node i
OUTPUT: zi, hz,{hzj} for each j ∈ [n]
PUBLIC PARAMETER: g, h,{pkj} for each j ∈ [n]
SHARING PHASE:
1: Sample a random secret s ← Zq
2: ACSS(s)
i = {}
KEY SET PROPOSAL PHASE:
11: Let Si = {}; T (cid:48)
12: upon termination of jth ACSS do
13:
14:
15:
16:
17:
18:
19: Participate in jth RBC when Tj ⊆ T (cid:48)
Let sj,i be the share of node i for jth ACSS.
Si := Si ∪ {sj,i}
i ∪ {j}
T (cid:48)
i := T (cid:48)
if |T (cid:48)
i|= t + 1 then
Ti := T (cid:48)
i
RBC(Ti)
i
i ⊇ Tj do
Input 1 to jth ABA
ui,j :=(cid:80)
Let Tj be the RBC output
upon T (cid:48)
AGREEMENT PHASE:
21: upon termination of jth RBC do
22:
23:
24:
25:
26:
27: T := {}
28: upon termination of jth ABA do
29:
30:
31:
if jth ABA outputs 1 then
T := T ∪ Tj
Input 0 to all remaining ABAs
Use ui,j for coin in jth ABA
k∈Tj
(cid:46) if it has not input any value
sk,i (cid:46) share of key for jth ABA coin.
k∈T sk
KEY DERIVATION PHASE:
41: Wait until all ABAs terminate
42: zi :=(cid:80)
(cid:46) share of ﬁnal secret key z =(cid:80)
k∈T sk,i
43: Let πi be the NIZK proof of logg gzi = logh hzi
44: send (cid:104)KEY, hzi , πi(cid:105) to all
45: H = {}
46: upon receiving (cid:104)KEY, hz(cid:48)
47:
48:
49:
50:
51:
52:
j , πj(cid:105) from node j do
Derive gzj using the ACSS commitments
if πj is a valid NIZK proof of logg gzj = logh hz(cid:48)
Interpolate hz and any missing hzj for each j ∈ [n]
output zi, hz, and hzj for each j ∈ [n]
H ← H ∪ {(j, hz(cid:48)
if |H|≥ (cid:96) then
j then
j )}
A. Sharing Phase
During the sharing phase, each node i samples a uniformly
random secret si ∈ Zq and secret-shares it with all other
nodes using an ACSS scheme (lines 1-2 in Algorithm 1).
For (cid:96) = t + 1, we use the ACSS scheme from [19] but
replace its Pedersen polynomial commitment with a Feldman
polynomial commitment to achieve Homomorphic-Partial-
Commitment (refer to §III-B). This simply requires using
a zero-polynomial as the hiding polynomial in Pedersens’
polynomial commitment.
6