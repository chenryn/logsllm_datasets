7.5.2RSA
7.5.2.1 Introduction to RSA
RSA is one of the most widely used public-key cryptographic algorithm in engi-
neering today. The security of RSA is based on a simple mathematical fact: it is very
01 nnogp anb nq b pue d soqunu suud ue oj b × d = u andu o adus
decompose the factors to obtain p and q when n is known.
The basic algorithm for RSA is as follows: select two large prime numbers, p and
q (generally greater than 512 bits, and p is not equal to q) and calculate the
b × d = u
Calculate the Euler totient function of α.
p(n) = p(p) × p(q) =(p  1) × (q  1)
Choose an integer e that is co-prime with p(n) and calculate d, the inverse of the e,
i.e.
e × d = 1 mod μp(n)
Then  is the public key and  is the private key. To speed up encryption in
 ns qu ud us oo pou nq s  se uso eu s auou
65537.
With m denoting the plaintext and c denoting the ciphertext, the encryption and
decryption operation is as follows.
c = nf mod n
m = cd mod n
(u > w > 0)
The correctness of the encryption and decryption is proved as follows.
We combine the decryption formula with the encryption formula: c" mod
n = md mod n.
And since we have ed = 1 mod p(n), we suppose ed = 1 + kp(n) where k is a
non-negative integer.
---
## Page 606
594
7 Crypto
When m and n are not co-prime, since 0 ≤ m  = , since the value
of n is small, consider using the factorization method. Executing factor
(16422644908304291) in Yafu yields the following output.
>> factor (16422644908304291)
fac: factoring 16422644908304291
fac: using pretesting plan: normal
div: prines less than 10000
fac: no tune info: using qs/gnfs crossover of 9s digits
rho: x^2 + 2, starting 100o iterations on C17
rho: x^2 + 3, starting 1o00 iterations on C17
rho: x^2 + 1, starting 100o iterations on C17
Total factoring time = 0.o092 seconds
+**factors found+++
P9 = 134235139
P9 = 122342369
ans = 1
---
## Page 608
596
7 Crypto
Using the gmpy2, the value of the private key d can be calculated.
>>> p = 122342369
6ETSEz+ET = b >> n = p * q
>>> phi = (p-1) ▪ (q-1)
>>> d = gapy2 . invert (e, phi)
mpz (8237257961022977)
>>> d
2. Low Public Exponent and Small Plaintext
For example, consider the following case: n = 100000980001501, e = 3, and m =
233, then pow(m, e) = 12649337, which is still smaller than n. In this case, the
plaintext can be recovered by calculating the cube root of 12649337.
If the encrypted c is larger than r but not too large, since pow(m, e) = kor + c, you
example, when r and e are the same as above, but m = 233333, we have c = pow
can enumerate k and then calculate the e-th root until the e-th root is an integer. For
(n, e, n) = 3524799146410.
The code to enumerate the coefficient k of n using Python is as follows.
TOS10008600000 =>>  = 3
>>> c = 3524799146410
>>> vhi1e (gmpy2 . izoot (c + k * n, e) [1] == False) :
>>> k = 0
k += 1
>>> print k, c + k * n, gmpy2.iroot [c + k * n, e) [0]
127 12703649259337037 233333
As you can see, when  = 127, the cube root is an integer, and we find the
plaintext, 233333.
3. Common Modulus
If an RSA cryptosystem uses the same n, different public exponent e and e2, where
e and e are co-prime, and encrypt the same plaintext to obtain the ciphertexts c and
C, then we can compute the plaintext m without knowing the private key.
u pou μr = 1
u pou r = 
Since e; and e are co-prime, then
x; + ye = 1
x, y ∈ Z
---
## Page 609
7.5 Public Key Cryptography
597
where x and y can be solved by the extended Euclidean algorithm. From the above
equation we can get
c × c mod n = mr*n x m: mod n = m’ mod n = m
Therefore, we can recover the plaintext.
For example, consider the following scenarios.
n = 212477166660821650097233277368272711813975 9545978267843010676
1351699
e2 = 100003
e1 = 65537
c1 = 188875645824871444298132575690116556238363101932264 978111748
EEEEEEEEEEEEEEEEEEEEEEEEEZ = W
c2 = 206060809790236832863013248393231595159994856097839740666461
58766355
58762676
First, we use the extended Euclidean algorithm to find x and y in xe + ye2 = 1.
>>> g, ×, Y = gmpy2 ·gcdext (e1, e2)
((06st)zdu * (εo) zdu)
>> x, y
Then calculate c↑ × c mod n.
>>> pov (c1, x, n) * pov(c2, y, n) $ n
Since the time complexity of the extended Euclidean algorithm is O(logn), this
method still works when n is very large.
In CTF, if you encounter a situation where there is only one plaintext, but
encrypted with multiple e, you should first consider using a common modulus attack.
4. Hastad’s Broadcast Attack
For the same plaintext m, if someone uses the same public exponent e and different
moduli n, M, ", n, result in i (i > e) ciphertexts, we can use the Chinese
remainder theorem to derive the plaintext. Suppose we have:
[C; =mrf mod n
C = mr mod n
( c = erf mod n;
By using the Chinese remainder theorem, we can obtain a Cx satisfying
---
## Page 610
598
?Crypto
; = m mod
When / > e, m is less than all n, then the product of all  must be greater than m, so
we can directly calculate the e-th root of c to recover the plaintext m.
Consider the following.
n1 = 155311552567157024738576177044868087087181491443402182939895
n2 = 466587666444923816750322714067394105117720828734438345264450
72553
n3 = 211837157440169619167682048828416160310888045617565034605097
E8E5
63179
e = 3 
c1 = 354524635742002775108080151359635480579250745407919898099420
8613
c2 = 270701041056840262362185726147780326022504084737010958702403
c3 = 998836626769926819150463464305884798915796158345290979909044
6966
5547
The following is a demo to solve for n using Hastad'’s broadcast attack.
def crt (a, n) :
prod = reduce (lanbda a, b: a*b, n)
sum = 0
for n_i, a_i in zip (n, a) :
P = prod / n_i
sum += a_1 * gmpy2.invert (p, n_i) * p
return sum ↓ prod
n = [n1, n2, n3]
c = [c1, c2, c3]
x = crt (c, n)
#(ampz (23333333333333333333333333333333333333333333L) , True)
pzint gmpy2.iroot (×, e)
As you can see, we have successfully solved the plaintext.
In CTF, this method should be considered if you see multiple encryptions using
the same e and different n’s with smaller e and the number of ciphertexts is no less
than e.
5. Low Private Exponent (Wiener’s Attack)
In 1989, Michael J. Wiener published Cryptanzlysis of Short RSA Secret Exponents,
which proposed a method for aftacking RSAs with low private exponent af, based on
---
## Page 611
7.5 Public Key Cryptography
599
Continued Fraction. Wiener proposes that if ed = 1 + kp(nr), when q x>0)  aa3onu wopuea e asoouo “dZ go 8
get the public key (p, g, y) and the private key is k.
To encrypt, a random integer r (0 = GF (31337)
E = E11ipticCurve (k, [123, 234] )
P = E([233, 18927])
Q = E([1926, 3590]]
for i in range (1, 31337) :
tmp = P
if (tmp == Q) :
print (1)
break
 2899
tmp += P
The time complexity of the method is O(n). So you can choose to apply the brute-
force search approach when P is small.
---
## Page 615
7.6 Other Common Cryptography Applications
603
2. More efficient calculation methods
Sagemath has different kinds of built-in discrete logarithm calculation methods,
which are suitable for various situations. The following code introduces some
commonly used algorithms for calculating discrete logarithms.