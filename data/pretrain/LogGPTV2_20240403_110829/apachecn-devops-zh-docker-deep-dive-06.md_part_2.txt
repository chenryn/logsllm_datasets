第二，`latest`标记没有任何神奇的力量。仅仅因为映像被标记为`latest`并不能保证它是存储库中最新的映像。例如，`alpine`库中最近的映像通常被标记为`edge`。故事的寓意——使用`latest`标签时要小心。
从*非官方存储库*提取映像本质上是一样的——您只需要在存储库名称前面加上 Docker Hub 用户名或组织名称。以下示例显示了如何从不可信的人拥有的`tu-demo`存储库中提取`v2`映像，该人的 Docker Hub 帐户名为`nigelpoulton`。
```
$ docker image pull nigelpoulton/tu-demo:v2
//This will pull the image tagged as `v2`
//from the `tu-demo` repository within the `nigelpoulton` namespace 
```
 `在我们之前的 Windows 示例中，我们使用以下命令提取了 PowerShell 映像:
`> docker image pull mcr.microsoft.com/powershell:latest`
这将从`mcr.microsoft.com/powershell`存储库中提取标记为`latest`的映像。
如果您想从第三方注册中心(而不是 Docker Hub)获取映像，您需要在存储库名称前面加上注册中心的 DNS 名称。例如，以下命令从谷歌容器注册(gcr.io)上的`google-containers/git-sync`回购中提取`3.1.5`映像。
```
$ docker image pull gcr.io/google-containers/git-sync:v3.1.5
v3.1.5: Pulling from google-containers/git-sync
597de8ba0c30: Pull complete 
b263d8e943d1: Pull complete 
a20ed723abc0: Pull complete 
49535c7e3a51: Pull complete 
4a20d0825f07: Pull complete 
Digest: sha256:f38673f25b8...b5f8f63c4da7cc6
Status: Downloaded newer image for gcr.io/google-containers/git-sync:v3.1.5
gcr.io/google-containers/git-sync:v3.1.5 
```
 `请注意 Docker Hub 和谷歌容器注册中心的拉取体验是如何完全相同的。
#### 带有多个标签的映像
关于映像标签的最后一句话…一个映像可以有任意多的标签。这是因为标签是作为元数据存储在映像旁边的任意字母数字值。我们来看一个例子。
通过在`docker image pull`命令中添加`-a`标志，拉取存储库中的所有映像。然后运行`docker image ls`来查看所拉的映像。
从`mcr.microsoft.com`存储库中提取所有映像可能不是一个好主意，因为微软映像可能会非常大。此外，如果您提取的存储库包含多个体系结构和平台的映像，如 Linux **和**窗口，该命令可能会失败。我们建议您在以下示例中使用命令和存储库。
```
$ docker image pull -a nigelpoulton/tu-demo
latest: Pulling from nigelpoulton/tu-demo
aad63a933944: Pull complete 
f229563217f5: Pull complete 
>
Digest: sha256:c9f8e18822...6cbb9a74cf
v1: Pulling from nigelpoulton/tu-demo
aad63a933944: Already exists 
f229563217f5: Already exists 
fc669453c5af: Pull complete 
Digest: sha256:674cb03444...f8598e4d2a
v2: Pulling from nigelpoulton/tu-demo
Digest: sha256:c9f8e18822...6cbb9a74cf
Status: Downloaded newer image for nigelpoulton/tu-demo
docker.io/nigelpoulton/tu-demo
$ docker image ls
REPOSITORY             TAG       IMAGE ID       CREATED       SIZE
nigelpoulton/tu-demo   latest    d5e1e48cf932   2 weeks ago   104MB
nigelpoulton/tu-demo   v2        d5e1e48cf932   2 weeks ago   104MB
nigelpoulton/tu-demo   v1        6852022de69d   2 weeks ago   104MB 
```
 `关于刚刚发生的一些事情:
首先。该命令从`nigelpoulton/tu-demo`存储库中提取了三个映像:`latest`、`v1`和`v2`。
其次。仔细查看`docker image ls`命令输出中的`IMAGE ID`列。你会看到两个身份证匹配。这是因为两个标签引用了同一个映像。换句话说…其中一张图片有两个标签。如果你仔细看，你会发现`v2`和`latest`标签有相同的`IMAGE ID`。这意味着它们是相同映像的两个标签。
这是之前发布的关于`latest`标签的警告的完美例子。在本例中，`latest`标签指的是与`v2`标签相同的映像。这意味着它指向两个映像中较旧的一个！故事的寓意，`latest`是一个任意的标签，不保证指向存储库中最新的映像！
#### 过滤`docker image ls`的输出
Docker 提供`--filter`标志来过滤`docker image ls`返回的映像列表。
以下示例将只返回悬空映像。
```
$ docker image ls --filter dangling=true
REPOSITORY    TAG       IMAGE ID       CREATED       SIZE
            4fd34165afe0   7 days ago    14.5MB 
```
 `悬空映像是不再被标记的映像，在列表中显示为`:`。它们发生的一种常见方式是在构建新映像时给它一个已经存在的标签。当这种情况发生时，Docker 将构建新映像，注意现有映像已经有了相同的标签，从现有映像中移除标签并将其赋予新映像。
考虑这个例子，您基于`alpine:3.4`构建一个新的应用映像，并将其标记为`dodge:challenger`。然后更新图片使用`alpine:3.5`代替`alpine:3.4`。当您构建新映像时，该操作将创建一个标记为`dodge:challenger`的新映像，并从旧映像中移除标记。旧的形象会变成悬空的形象。
您可以使用`docker image prune`命令删除系统上的所有悬空映像。如果添加`-a`标志，Docker 还会删除所有未使用的映像(那些没有被任何容器使用的映像)。
Docker 目前支持以下过滤器:
*   `dangling:`接受`true`或`false`，只返回悬空映像(真)或非悬空映像(假)。
*   `before:`需要一个映像名称或 ID 作为参数，并返回之前创建的所有映像。
*   `since:`同上，但返回指定映像后创建的映像。
*   `label:`根据标签或标签和值的存在过滤映像。`docker image ls`命令在其输出中不显示标签。
对于所有其他过滤，您可以使用`reference`。
这里有一个使用`reference`只显示标记为“最新”的映像的例子。
```
$ docker image ls --filter=reference="*:latest"
REPOSITORY   TAG      IMAGE ID        CREATED        SIZE
alpine       latest   f70734b6a266    3 days ago     5.61MB
redis        latest   a4d3716dbb72    3 days ago     98.3MB
busybox      latest   be5888e67be6    12 days ago    1.22MB 
```
 `您也可以使用`--format`标志使用 Go 模板格式化输出。例如，以下命令将只返回 Docker 主机上映像的大小属性。
```
$ docker image ls --format "{{.Size}}"
5.61MB
98.3MB
1.22MB 
```
 `使用以下命令返回所有映像，但只显示报告、标签和大小。
```
$ docker image ls --format "{{.Repository}}: {{.Tag}}: {{.Size}}"
alpine:  latest: 5.61MB
redis:   latest: 98.3MB
busybox: latest: 1.22MB 
```
 `如果你需要更强大的过滤，可以随时使用你的 OS 和 shell 提供的工具，比如`grep`、`awk`。
#### 从命令行界面搜索 Docker 中心
`docker search`命令允许您从命令行界面搜索 Docker 中心。这个值是有限的，因为您只能对“名称”字段中的字符串进行模式匹配。但是，您可以根据任何返回的列过滤输出。
最简单的形式是，它在“名称”字段中搜索包含某个字符串的所有转帖。例如，以下命令搜索“名称”字段中带有“nigelpoulton”的所有转贴。
```
$ docker search nigelpoulton
NAME                         DESCRIPTION               STARS   AUTOMATED
nigelpoulton/pluralsight..   Web app used in...        22       [OK]
nigelpoulton/tu-demo                                   12
nigelpoulton/k8sbook         Kubernetes Book web app   2
nigelpoulton/workshop101     Kubernetes 101 Workshop   0                                       
```
 `“名称”字段是存储库名称。这包括非官方存储库的 Docker ID 或组织名称。例如，以下命令将列出名称中包含字符串“alpine”的所有存储库。
```
$ docker search alpine
NAME                   DESCRIPTION          STARS    OFFICIAL    AUTOMATED
alpine                 A minimal Docker..   6386     [OK]
mhart/alpine-node      Minimal Node.js..    465
anapsix/alpine-java    Oracle Java 8...     442                  [OK]
```
 `请注意，返回的存储库有些是官方的，有些是非官方的。可以使用`--filter "is-official=true"`只显示官方转帖。
```
$ docker search alpine --filter "is-official=true"
NAME                   DESCRIPTION          STARS    OFFICIAL    AUTOMATED
alpine                 A minimal Docker..   6386     [OK] 
```
 `您可以再次这样做，但这一次只显示自动构建的重新发布。
```
$ docker search alpine --filter "is-automated=true"
NAME                       DESCRIPTION               OFFICIAL     AUTOMATED
anapsix/alpine-java        Oracle Java 8 (and 7)..                [OK]
frolvlad/alpine-glibc      Alpine Docker image..                  [OK]
alpine/git                 A simple git container..               [OK]                                \
```
 `关于`docker search`最后一件事。默认情况下，Docker 将只显示 25 行结果。但是，您可以使用`--limit`标志将其增加到最大值 100。
#### 映像和图层
Docker 映像只是一堆松散连接的只读层，每个层包含一个或多个文件。这如图 6.3 所示。
![Figure 6.3](img/figure6-3.png)
Figure 6.3