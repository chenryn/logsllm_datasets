title:Safe Serializable Secure Scheduling: Transactions and the Trade-Off
Between Security and Consistency
author:Isaac C. Sheff and
Tom Magrino and
Jed Liu and
Andrew C. Myers and
Robbert van Renesse
Safe Serializable Secure Scheduling:
Transactions and the Trade-Off Between Security and Consistency
Isaac Sheff
Tom Magrino
Jed Liu
Andrew C. Myers
Robbert van Renesse
Cornell University Department of Computer Science
Ithaca, New York, USA
{isheff,tmagrino,liujed,andru,rvr}@cs.cornell.edu
ABSTRACT
Modern applications often operate on data in multiple administra-
tive domains. In this federated setting, participants may not fully
trust each other. These distributed applications use transactions as
a core mechanism for ensuring reliability and consistency with per-
sistent data. However, the coordination mechanisms needed for
transactions can both leak conﬁdential information and allow unau-
thorized inﬂuence.
By implementing a simple attack, we show these side channels
can be exploited. However, our focus is on preventing such attacks.
We explore secure scheduling of atomic, serializable transactions
in a federated setting. While we prove that no protocol can guaran-
tee security and liveness in all settings, we establish conditions for
sets of transactions that can safely complete under secure schedul-
ing. Based on these conditions, we introduce staged commit, a
secure scheduling protocol for federated transactions. This proto-
col avoids insecure information channels by dividing transactions
into distinct stages. We implement a compiler that statically checks
code to ensure it meets our conditions, and a system that schedules
these transactions using the staged commit protocol. Experiments
on this implementation demonstrate that realistic federated transac-
tions can be scheduled securely, atomically, and efﬁciently.
1.
INTRODUCTION
Many modern applications are distributed, operating over data
from multiple domains. Distributed protocols are used by applica-
tions to coordinate across physically separate locations, especially
to maintain data consistency. However, distributed protocols can
leak conﬁdential information unless carefully designed otherwise.
Distributed applications are often structured in terms of transac-
tions, which are atomic groups of operations. For example, when
ordering a book online, one or more transactions occur to ensure
that the same book is not sold twice, and to ensure that the sale of
a book and payment transfer happen atomically. Transactions are
ubiquitous in modern distributed systems. Implementations include
Google’s Spanner [11], Postgres [29], and Microsoft’s Azure Stor-
age [9]. Common middleware such as Enterprise Java Beans [26]
and Microsoft .NET [1] also support transactions.
Many such transactions are distributed, involving multiple au-
tonomous participants (vendors, banks, etc.). Crucially, these par-
ticipants may not be equally trusted with all data. Standards such as
X/Open XA [2] aim speciﬁcally to facilitate transactions that span
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24–28, 2016, Vienna, Austria
© 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978415
multiple systems, but none address information leaks inherent to
transaction scheduling.
Distributed transaction implementations are often based on the
two-phase commit protocol (2PC) [17]. We show that 2PC can cre-
ate unintentional channels through which private information may
be leaked, and trusted information may be manipulated. We expect
our results apply to other protocols as well.
There is a fundamental tension between providing strong consis-
tency guarantees in an application and respecting the security re-
quirements of the application’s trust domains. This work deepens
the understanding of this trade-off and demonstrates that providing
both strong consistency and security guarantees, while not always
possible, is not a lost cause.
Concretely, we make the following contributions in this paper:
• We describe abort channels, a new kind of side channel through
which conﬁdential information can be leaked in transactional
systems (§2).
• We demonstrate exploitation of abort channels on a distributed
system (§2.3).
• We deﬁne an abstract model of distributed systems, trans-
actions, and information ﬂow security (§ 3), and introduce
relaxed observational determinism, a noninterference-based
security model for distributed systems (§3.7.1).
• We establish that within this model, it is not possible for any
protocol to securely serialize all sets of transactions, even if
the transactions are individually secure (§4).
• We introduce and prove a sufﬁcient condition for ensuring
serializable transactions can be securely scheduled (§5).
• We deﬁne the staged commit protocol, a novel secure schedul-
ing protocol for transactions meeting this condition (§6).
• We implement our novel protocol in the Fabric system [24],
and extend the Fabric language and compiler to statically en-
sure transactions will be securely scheduled (§7).
• We evaluate the expressiveness of the new static checking
discipline and the runtime overhead of the staged commit
protocol (§8).
We discuss related work further in § 9, and conclude in § 10. For
brevity, we present proof sketches of the results in this paper; full
proofs can be found in the technical report [34].
2. ABORT CHANNELS
Two transactions working with the same data can conﬂict if at
least one of them is writing to the data. Typically, this means that
one (or both) of the transactions has failed and must be aborted.
Rainforest
order
order
Gloria
purchase
purchase
d
e
b
it
d
e
bit
Fred
Figure 1: Rainforest example. Gloria and Fred each buy an Outel
chip via Rainforest’s store. Gloria’s transaction is in red, dashed
arrows; Fred’s is in blue, solid arrows.
In many transaction protocols, including 2PC, a participant1 in-
volved in both transactions can abort a failed transaction by send-
ing an abort message to all other participants in the failed transac-
tion [17]. These abort messages can create unintended abort chan-
nels, through which private information can be leaked, and trusted
information can be manipulated.
An abort message can convey secret information if a participant
aborts a transaction otherwise likely to be scheduled, because an-
other participant in the same transaction might deduce something
about the aborting participant. For example, that other partici-
pant might guess that the abort is likely caused by the presence
of another—possibly secret—conﬂicting transaction.
Conspirators might deliberately use abort channels to covertly
transfer information within a system otherwise believed to be se-
cure. Although abort channels communicate at most one bit per
(attempted) transaction, they could be used as a high-bandwidth
covert channel for exﬁltration of sensitive information. Current
transactional systems can schedule over 100 million transactions
per second, even at modest system sizes [15]. It is difﬁcult to know
if abort channels are already being exploited in real systems, but
large-scale, multi-user transactional systems such as Spanner [11]
or Azure Storage [9] are in principle vulnerable.
Abort messages also affect the integrity of transaction schedul-
ing. An abort typically causes a transaction not to be scheduled.
Even if the system simply retries the transaction until it is sched-
uled, this still permits a participant to control the ordering of trans-
actions, even if it has no authority to affect them. For example,
a participant might gain some advantage by ensuring that its own
transactions always happen after a competitor’s.
Transactions can also create channels that leak information based
on timing or termination [5, 8]. We treat timing and termination
channels as outside the scope of this work, to be handled by mech-
anisms such as timing channel mitigation [22, 4, 7]. Abort channels
differ from these previously identiﬁed channels in that information
leaks via the existence of explicit messages, with no reliance on
timing other than their ordering. Timing mitigation does not con-
trol abort channels.
2.1 Rainforest Example
A simple example illustrates how transaction aborts create a chan-
nel that can leak information. Consider a web-store application for
the ﬁctional on-line retailer Rainforest, illustrated in Fig. 1. Rain-
forest’s business operates on data from suppliers, customers, and
banks. Rainforest wants to ensure that it takes money from cus-
tomers only if the items ordered have been shipped from the sup-
pliers. As a result, Rainforest implements purchasing using serial-
izable transactions. Customers expect that their activities do not in-
ﬂuence each other, and that their ﬁnancial information is not leaked
1Transaction participants are often processes or network nodes.
r0
r1
Rainforest
b1
b0
Gloria
r2
r3
b2
b3
Fred
r4
b4
r5
b5
Figure 2: The events of the transactions in Fig. 1. Gloria’s trans-
action consists of r0, r1, r2, r3, r4, and r5. Bob’s consists of b0,
b1, b2, b3, b4, and b5. Happens-before ((cid:95)) relationships are ar-
rows. The shaded blocks around events indicate locations, and are
labeled with participants from Fig. 1.
to suppliers. These expectations might be backed by law.
In Fig. 1, Gloria and Fred are both making purchases on Rain-
forest at roughly the same time. They each purchase an Outel chip,
and pay using their accounts at CountriBank.
If Rainforest uses 2PC to perform both of these transactions, it is
possible for Gloria to see an abort when Outel tries to schedule her
transaction and Fred’s. The abort leaks information about Fred’s
purchase at Outel to Gloria. Alternatively, if Gloria is simultane-
ously using her bank account in an unrelated purchase, scheduling
conﬂicts at the bank might leak to Outel, which could thereby learn
of Gloria’s unrelated purchase.
These concerns are about conﬁdentiality, but transactions may
also create integrity concerns. The bank might choose to abort
transactions to affect the order in which Outel sells chips. Rain-
forest and Outel may not want the bank to have this power.
2.2 Hospital Example
As a second, running example, we use two small programs with
an abort channel. Suppose Patsy is a trusted hospital employee,
running the code in Fig. 3a to collect the addresses of HIV-positive
patients in order to send treatment reminders. Patsy runs her trans-
action on her own computer, which she fully controls, but it in-
teracts with a trusted hospital database on another machine. Patsy
starts a transaction for each patient p, where transaction blocks are
indicated by the keyword atomic.
If p does not have HIV, the
transaction ﬁnishes immediately. Fig. 3c shows the resulting trans-
action in solid blue. (Events in the transaction are represented as
ovals; arrows represent dependencies between transaction events.)
Otherwise, if the patient has HIV, Patsy’s transaction reads the pa-
tient’s address and prints it (the blue transaction in Fig. 3c, includ-
ing dashed events).
Suppose Mallory is another employee at the same hospital, but is
not trusted to know each patient’s HIV status. Mallory is, however,
trusted with patient addresses. Like Patsy, Mallory’s code runs on
her own computer, which she fully controls, but interacts with the
trusted hospital database on another machine. She runs the code in
Fig. 3b to update each patient’s address in a separate transaction,
resulting in the red transaction in Fig. 3c. When Mallory updates
the address of an HIV-positive patient, her transaction might con-
ﬂict with one of Patsy’s, and Mallory would observe an abort. Thus
Mallory can learn which patients are HIV-positive by updating each
patient’s address while Patsy is checking the patients’ HIV statuses.
Each time one of Mallory’s transactions aborts, private information
leaks: that patient has HIV.
One solution to this problem is to change Patsy’s transaction:
instead of reading the address only if the patient is HIV positive,
$$Read HIV
Print address
Read HIV
Print address
x = p.address(cid:105);
1 atomic {
2 (cid:104)h = p.hasHiv(cid:107)
3
4 if (h) {
5
6 }
7 }
print(x);
High Security (H)
Low Security (L)
Update address
?
Mallory start
1 atomic {
2 h = p.hasHiv;
3 if (h) {
4
5
6 }
7 }
x = p.address;
print(x);
Read address
Patsy start
(c) Resulting transactions
(a) Patsy’s code
1 atomic {
2 p.address+="␣";
3 }
(b) Mallory’s code
Figure 3: Insecure hospital scenario. Patsy runs a program (3a)