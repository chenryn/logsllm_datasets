  * `background`: '#cc9966' // 验证码图片背景颜色
该函数返回的对象拥有以下属性
  * `data`: string // svg 路径
  * `text`: string // 验证码文字
除此之外，在生成验证码的时候还可以设置字符对应的字体等一些操作，感兴趣的读者可以到此项目了解一下。
我们可以通过`svgCaptcha('1234')`命令生成指定字符串的验证码。当我们多次生成相同字符串的验证码时，如下图(连续生成了三次的相同字符串的验证码)：
好像除了干扰线不同之外，数字似乎位置和形状都相同。
如果我们将`1234` 的数字调换，再生成一次看看:
    var svgCaptcha = require('svg-captcha');
    for (i = 0; i ')
    }
其实可以发现数字即便在位置发生变化时，样式也没有变。
当我们给验证码开启了随机颜色后，也是如此：
我们继续分析，如果把``中的``拆分，进行对比，会有什么效果呢。
    import re
    svg_data = '''
        ', svg_data)
    for x in path_list:
        print(x)
然后拿到5个数据：
分别拿去填充在``标签中，结果如下图：
既然相同字母，无论位置和是否有颜色形状都相同，那么应该会有一定的规律。当我们对比了各个path中d属性的长度时，会发现绝大多书数字及字符绘制出来时，``中的`d`属性长度都不同，相同的字符的相同。
同样是`1234`的字符串，结果如下：
    # 数字 => d属性值的长度
    1 => 998 
    2 => 2546
    3 => 3878
    4 => 2318
以此为基础，我们生成由`1234`组成的svg验证码，通过判断``中`d`属性值的长度进而尝试识别，于是，发现4对应的不止一种长度。将两种不同长度的`d`属性值提取，并将4展示出来如下图：