## Code
    fn foo1(x: &str) {
            println!("foo1({})", x);
    }
    fn foo2(x: &str) {
            println!("foo2({})", x);
    }
    macro_rules! wtf {
            (1) => (foo1);
            (2) => (foo2);
    }
    macro_rules! wtf_foo {
            ($x:expr, $num:expr) => {
                    wtf!($num)($x);
            }
    }
    fn main() {
            //Fails
            wtf_foo!("one", 1);
            //Works
            wtf!(1)("one");
    }
## Output
    $ rustc foo.rs 
    foo.rs:16:8: 17:12 error: no rules expected the token `1`
    foo.rs:16               wtf!($num)($x);
                                 ^~~~
## Expected Output
    $ rustc foo.rs 
    foo.rs:5:1: 7:2 warning: function is never used: `foo2`, #[warn(dead_code)] on by default
    foo.rs:5 fn foo2(x: &str) {
    foo.rs:6        println!("foo2({})", x);
    foo.rs:7 }
    $ ./foo
    foo1(one)
    foo1(one)
## Other
This works fine, so the problem appears to be limited to literal patterns (not
sure if that's the right term):
    macro_rules! print_stuff_for_real {
            ($x:expr) => (println!("Printing stuff: {}", $x));
    }
    macro_rules! print_stuff {
            ($x:expr) => (print_stuff_for_real!($x));
    }
    fn main() {
            print_stuff!("stuff");
    }
## Meta
I used two versions of rustc; they behaved identically.
    rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)
    binary: rustc
    commit-hash: a59de37e99060162a2674e3ff45409ac73595c0e
    commit-date: 2015-05-13
    build-date: 2015-05-14
    host: x86_64-unknown-linux-gnu
    release: 1.0.0
    rustc 1.2.0-nightly (f76d9bcfc 2015-05-28) (built 2015-05-28)
    binary: rustc
    commit-hash: f76d9bcfc2c269452522fbbe19f66fe653325646
    commit-date: 2015-05-28
    build-date: 2015-05-28
    host: x86_64-unknown-linux-gnu
    release: 1.2.0-nightly