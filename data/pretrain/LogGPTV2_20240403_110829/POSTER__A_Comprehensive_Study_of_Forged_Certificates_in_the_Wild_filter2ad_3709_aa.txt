title:POSTER: A Comprehensive Study of Forged Certificates in the Wild
author:Mingxin Cui and
Zigang Cao and
Gang Xiong and
Junzheng Shi
2014 IEEE Symposium on Security and Privacy
Analyzing Forged SSL Certiﬁcates in the Wild
Lin-Shung Huang∗, Alex Rice†, Erling Ellingsen†, Collin Jackson∗
∗Carnegie Mellon University, {linshung.huang, collin.jackson}@sv.cmu.edu
†Facebook, {arice, erling}@fb.com
the attacker’s certiﬁcates were signed by trusted CAs, standard
browsers cannot simply distinguish the attacker’s intercepting
server from the legitimate server (unless the forged certiﬁcate
is later revoked). Hypothetically [9], some governments may
also compel CAs to issue trusted SSL certiﬁcates for spying
purposes without the website’s consent.
Abstract—The SSL man-in-the-middle attack uses forged SSL
certiﬁcates to intercept encrypted connections between clients
and servers. However, due to a lack of reliable indicators, it is
still unclear how commonplace these attacks occur in the wild. In
this work, we have designed and implemented a method to detect
the occurrence of SSL man-in-the-middle attack on a top global
website, Facebook. Over 3 million real-world SSL connections
to this website were analyzed. Our results indicate that 0.2%
of the SSL connections analyzed were tampered with forged
SSL certiﬁcates, most of them related to antivirus software and
corporate-scale content ﬁlters. We have also identiﬁed some SSL
connections intercepted by malware. Limitations of the method
and possible defenses to such attacks are also discussed.
Keywords-SSL; certiﬁcates; man-in-the-middle attack;
I. INTRODUCTION
Secure Socket Layer (SSL) [1], or its successor, Transport
Layer Security (TLS) [2], is an encryption protocol designed
to provide secure communication and data transfers over the
Internet.1 SSL allows clients to authenticate the identity of
servers by verifying their X.509 [3] digital certiﬁcates, and
reject connections if the server’s certiﬁcate is not issued by
a trusted certiﬁcate authority (CA). SSL is most popular for
enabling the encryption of HTTP trafﬁc between websites
and browsers, but also widely used for other applications
such as instant messaging and email transfers. An SSL man-
in-the-middle attack is an interception of such an encrypted
connection between a client and a server where the attacker
impersonates the server through a forged SSL certiﬁcate —
that is, an SSL certiﬁcate not provided or authorized by the
legitimate owner. We explain how this is possible below.
In practice, certiﬁcates issued through hundreds [4] of
CAs are automatically trusted by modern browsers and client
operating systems. Under the current X.509 public key in-
frastructure, every single CA has the ability to issue trusted
certiﬁcates to any website on the Internet. Therefore, CAs must
ensure that trusted certiﬁcates are only issued to the legitimate
owners of each website (by certifying the real identities of
their customers). However, if any of the trusted CAs suffers a
security breach, then it is possible for attackers to obtain forged
CA certiﬁcates for any desired website. In other words, a
single CA failure would allow the attacker to intercept all SSL
connections on the Internet. In fact, multiple commercial CAs
(DigiNotar [5], Comodo [6], and TURKTRUST [7]) have been
found to mis-issue fraudulent certiﬁcates in the past. Some of
these CA incidents actually resulted in real man-in-the-middle
attacks against high-proﬁle websites such as Google [8]. Since
1For brevity, we refer to SSL/TLS as SSL in this paper.
Furthermore, even if the attacker cannot obtain a trusted
certiﬁcate of legitimate websites, it is still possible to intercept
SSL connections against some users (that ignore browser secu-
rity warnings). Historically, browsers tend to behave leniently
when encountering errors during SSL certiﬁcate validation,
and still allow users to proceed over a potentially insecure
connection. One could argue that certiﬁcate warnings are
mostly caused by server mis-conﬁgurations (e.g. certiﬁcate
expirations) rather than real attacks, therefore browsers should
let users determine whether they should dismiss the errors.
However, designing an effective security warning dialog has
been a challenging task for browser vendors. A number of
usability studies [10], [11], [12], [13] have shown that many
users actually ignore SSL certiﬁcate warnings. Note that
users who incautiously ignore certiﬁcate warnings would be
vulnerable to the simplest SSL interception attacks (using self-
signed certiﬁcates).
Despite that SSL man-in-the-middle attack attempts have
previously been observed in the wild (e.g. in Iran [8] and
Syria [14]), it is unclear how prevalent these attacks actually
are. Several existing SSL surveys [4], [15], [16], [17] have
collected large amounts of SSL certiﬁcates via scanning public
websites or monitoring SSL trafﬁc on institutional networks,
yet no signiﬁcant data on forged SSL certiﬁcates have been
publicly available. We hypothesize that real attackers are
more likely to perform only highly targeted attacks at certain
geographical locations, or on a small number of high-value
sessions, therefore, previous methodologies would not be able
to detect these attacks effectively.
Unfortunately, detecting SSL man-in-the-middle attacks
from the website’s perspective, on a large and diverse set
of clients, is not a trivial task. Since most users do not use
client certiﬁcates, servers cannot simply rely on SSL client
authentication to distinguish legitimate clients from attackers.
Furthermore, there is currently no way for a web application
to check the certiﬁcate validation status of the underlying SSL
connection, not even when an SSL error has occurred on the
client. Also, it is currently not possible for web applications
to directly access the SSL handshake with native browser
networking APIs, like XMLHttpRequest and WebSockets, to
validate SSL certiﬁcates on their own.
© 2014, Lin-Shung Huang. Under license to IEEE.
DOI 10.1109/SP.2014.13
83
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 07:14:31 UTC from IEEE Xplore.  Restrictions apply. 
In this paper, we ﬁrst introduce a practical method for
websites to detect SSL man-in-the-middle attacks in a large
scale, without alterations on the client’s end (e.g. custom
browsers). We utilized the widely-supported Flash Player
plugin to enable socket functionalities not natively present in
current browsers, and implemented a partial SSL handshake
on our own to capture forged certiﬁcates. We deployed this
detection mechanism on an Alexa top 10 website, Facebook,
which terminates connections through a diverse set of network
operators across the world. We analyzed 3, 447, 719 real-world
SSL connections and successfully discovered at least 6, 845
(0.2%) of them were forged SSL certiﬁcates.
Our contributions can be summarized as follows:
• We designed a novel method for websites to collect
direct evidence of man-in-the-middle attacks against their
SSL connections. We further implemented this detection
method on Facebook’s website.
• We conducted the ﬁrst analysis on forged SSL certiﬁcates
by measuring over 3 million SSL connections. Our results
show that 0.2% SSL connections are in fact tampered
with forged certiﬁcates.
• Based real-world data, we categorized the root causes
of forged SSL certiﬁcates. We showed that most of
the SSL interceptions are due to antivirus software and
organization-scale content ﬁlters.
• We provided evidence of SSL interceptions by malware,
which have infected users across at least 45 countries.
The rest of this paper is organized as follows. Section II
provides background information and surveys related work.
Section III details the design, implementation, and experimen-
tation of our plugin-based detection method. Section IV gives
an analysis of the forged SSL certiﬁcates that were observed.
Section V surveys possible mitigations. Section VI concludes.
II. BACKGROUND
In this section, we provide an overview of the SSL protocol,
and how the SSL man-in-the-middle attack works. We then
survey related work, and discuss existing tamper detection
techniques that may be used by websites to detect network
interceptions.
A. The SSL Protocol
The Secure Socket Layer (SSL) protocol was designed
to ensure secure communications between two entities over
untrusted networks. The SSL protocol provides authentication
based on the X.509 public key infrastructure, protects data
conﬁdentiality using symmetric encryption, and ensures data
integrity with cryptographic message digests. SSL is com-
monly used for securing websites and mail servers, preventing
passive network attackers from eavesdropping or replaying the
client’s messages, and is generally considered security best
practice for websites. By enabling encryption, websites can
easily prevent the eavesdropping of unencrypted conﬁdential
data (e.g. Firesheep [18]).
To establish an SSL connection, the client and the server
performs a handshake to authenticate each other, and negotiate
84
Fig. 1. A basic SSL handshake with no client certiﬁcates
the cipher algorithms and parameters to be used. Figure 1
depicts a basic SSL handshake using the RSA key exchange
with no client certiﬁcates. First, the client sends a ClientHello
message to the server, which speciﬁes a list of supported
cipher suites and a client-generated random number. Second,
the server responds with the ServerHello message which
contains the server-chosen cipher suite and a server-generated
random number. In addition, the Certiﬁcate message contains
the server’s public key and hostname, digitally signed by
a certiﬁcate authority, in which the client is responsible of
verifying. The client then encrypts the pre-master secret using
the server’s public key and sends the pre-master secret to the
server over a ClientKeyExchange message. Both the client
and server can hence derive the same session key from the
pre-master secret and random numbers. Finally,
the client
and server exchanges ChangeCipherSpec messages to notify
each other that subsequent application data within the current
session will be encrypted using the derived session key.
As mentioned in Section I, the SSL protocol allows clients
to authenticate the identity of servers by verifying their SSL
certiﬁcates. In practice, commercial SSL certiﬁcates are often
signed by intermediate CAs (a delegated certiﬁcate signer),
instead of directly signed by a trusted root CA (which are kept
ofﬂine to reduce the risk of being compromised). Therefore,
the server’s Certiﬁcate message normally includes a chain
of certiﬁcates, consisting of one leaf certiﬁcate (to identify
the server itself), and one or more intermediate certiﬁcates (to
identify the intermediate CAs). Each certiﬁcate is cryptograph-
ically signed by the entity of the next certiﬁcate in the chain,
and so on. A valid certiﬁcate chain must chain up to a root
CA that is trusted by the client. Note that SSL certiﬁcates are
by design transferred in plaintext since the integrity can be
veriﬁed by signatures. It is critical that clients must validate
every certiﬁcate in the chain. In the following section, we will
explain why validating SSL server certiﬁcates is necessary.
B. The SSL Man-in-the-Middle Attack
The SSL man-in-the-middle (MITM) attack is a form of
active network interception where the attacker inserts itself
into the communication channel between the victim client and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 07:14:31 UTC from IEEE Xplore.  Restrictions apply. 
Browser HTTPS server ClientHello ServerHello, Certificateserver, ServerHelloDone ClientKeyExchange, ChangeCipherSpec, Finished ChangeCipherSpec, Finished between them (decrypting messages from the client, and
then re-encrypting them before sending to the server).
Now, the attacker can read and even modify the en-
crypted messages between the client and the server.
As soon as the client accepts the forged SSL certiﬁcate, the
client’s secrets will be encrypted with the attacker’s public key,
which can be decrypted by the attacker. Note that regardless of
whether the attacker’s forged certiﬁcate is issued by a trusted
CA, the attack steps are the same. If one of the client’s trusted
CAs went rogue or was otherwise coerced [9] into issuing
a certiﬁcate for the attacker, the browser will automatically
accept the forged certiﬁcate. In fact, professional attackers
have proven capable of compromising CAs themselves in
order to obtain valid certiﬁcates, as has occurred during the
security breaches of DigiNotar [5] and Comodo [6]. Moreover,
even if the attacker does not have a trusted certiﬁcate of the
victim server and uses a self-signed certiﬁcate, researchers
have shown that many users ignore SSL certiﬁcate warnings
presented by the browser [11]. Even worse, studies have
discovered that some non-browser software and native mobile
applications actually contain faulty SSL certiﬁcate validation
code, which silently accepts invalid certiﬁcates [20], [21], [22].
Lastly, numerous automated tools that can mount SSL man-
in-the-middle attacks are publicly available on the Internet
(e.g. sslsniff [23]), which greatly reduce the level of technical
sophistication necessary to mount such attacks.
C. Certiﬁcate Observatories
A number of SSL server surveys [4], [15], [16], [17] have
analyzed SSL certiﬁcates and certiﬁcate authorities on the
Internet. The EFF SSL Observatory [4] analyzed over 1.3
million unique SSL certiﬁcates by scanning the entire IPv4
space, and indicated that 1,482 trusted certiﬁcate signers are
being used. Similarly, Durumeric et al. [17] collected over
42 million unique certiﬁcates by scanning 109 million hosts,
and identiﬁed 1,832 trusted certiﬁcate signers. Holz et al. [15]
analyzed SSL certiﬁcates by passively monitoring live SSL
trafﬁc on a research network in addition to actively scanning
popular websites, and found that over 40% certiﬁcates ob-
served were invalid due to expiration, incorrect host names, or
other reasons. Akhawe et al. [16] analyzed SSL certiﬁcates by
monitoring live user trafﬁc at several institutional networks,
and provided a categorization of common certiﬁcate warn-
ings, including server mis-conﬁgurations and browser design
decisions. However, existing studies do not provide insights
on forged certiﬁcates, probably since network attackers are
relatively rare on those research institutional networks. In our
work, we set out to measure real-world SSL connections from
a large and diverse set of clients, in an attempt to ﬁnd forged
SSL certiﬁcates.
D. Tamper Detection Techniques for WebSites
Several techniques have been proposed to assist websites
in detecting whether the client’s network connections has
been tampered with. In this paper, we focus on detection
methods that do not require user interaction, and do not require
85
Fig. 2. An SSL man-in-the-middle attack between the browser and the server,
using a forged SSL certiﬁcate to impersonate as the server to the client.
the server (typically for the purpose of eavesdropping or ma-
nipulating private communications). The attacker establishes
two separate SSL connections with the client and the server,
and relays messages between them, in a way such that both the
client and the server are unaware of the middleman. This setup
enables the attacker to record all messages on the wire, and