::: {#mask}
:::
::: wrapper
::: {#header-desktop .desktop}
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: menu
::: menu-inner
[Posts](/posts/){.menu-item} [Categories](/categories/){.menu-item}
[whoami](/whoami){.menu-item} [Projects](/projects){.menu-item} [KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer" target="_blank"}
[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"} []{.menu-item .delimiter}[
[](javascript:void(0); "Search"){#search-toggle-desktop .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-desktop
.search-button .search-clear} []{#search-loading-desktop .search-button
.search-loading} ]{#search-desktop .menu-item
.search}[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
:::
::: {#header-mobile .mobile}
::: header-container
::: header-wrapper
::: header-title
[KQL Query](/ "Kusto Query Language | KQLQuery.com")
:::
::: {#menu-toggle-mobile .menu-toggle}
:::
:::
::: {#menu-mobile .menu}
::: search-wrapper
::: {#search-mobile .search .mobile}
[](javascript:void(0); "Search"){#search-toggle-mobile .search-button
.search-toggle} [](javascript:void(0); "Clear"){#search-clear-mobile
.search-button .search-clear} []{#search-loading-mobile .search-button
.search-loading}
:::
[Cancel](javascript:void(0);){#search-cancel-mobile .search-cancel}
:::
[Posts](/posts/){.menu-item}[Categories](/categories/){.menu-item}[whoami](/whoami){.menu-item}[Projects](/projects){.menu-item}[KQL
News](https://kustoinsights.substack.com/){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://github.com/bert-janp "GitHub"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://twitter.com/BertJanCyber "Twitter"){.menu-item
rel="noopener noreffer"
target="_blank"}[](https://linkedin.com/in/bert-janpals "LinkedIn"){.menu-item
rel="noopener noreffer" target="_blank"}
[](javascript:void(0); "Switch Theme"){.menu-item .theme-switch}
:::
:::
:::
::: {.search-dropdown .desktop}
::: {#search-dropdown-desktop}
:::
:::
::: {.search-dropdown .mobile}
::: {#search-dropdown-mobile}
:::
:::
::: {.main role="main"}
::: container
# Incident Response Part 2: What about the other logs? {#incident-response-part-2-what-about-the-other-logs .single-title .animate__animated .animate__flipInX}
::: post-meta
::: post-meta-line
[[Bert-Jan Pals](/ "Author"){.author
rel="author"}]{.post-author} [included in [KQL](/categories/kql/) [Azure
Data
Explorer](/categories/azure-data-explorer/) [PowerShell](/categories/powershell/) [Incident
Response](/categories/incident-response/)]{.post-category}
:::
::: post-meta-line
 2023-10-13  1518 words   8 minutes 
:::
:::
::: {#content .content}
The second part of the Incident Response series is here! In the last
blog, we were lucky enough to have the logs already available in
Microsoft 365 Defender or Sentinel. But what could you do if you do not
ingest the logs in your SIEM or it is not logged by your EDR? This blog
will explain how you can still perform incident response using KQL.
Spoiler: Azure Data Explorer is your best friend! Furthermore, some
practical examples are shared which can help you enrich your current
M365D and Sentinel incident response cases. Do you not have any
Microsoft Security Tooling? No problem, those are not needed for this
blog!
The incident response series consists of the following parts:
1.  **Incident Response Part 1: [IR on Microsoft Security Incidents (KQL
    edition)](https://kqlquery.com/posts/kql-incident-response/){target="_blank"
    rel="noopener noreffer"}**
2.  **Incident Response Part 2: What about the other logs?**
3.  **Incident Response Part 3: [Leveraging Live
    Response](https://kqlquery.com/posts/leveraging-live-response/){target="_blank"
    rel="noopener noreffer"}**
::: {.details .admonition .note .open}
::: {.details-summary .admonition-title}
Free Azure Data Explorer Cluster
:::
::: details-content
::: admonition-content
You can get a free Azure Data Explorer Cluster if you do not have a
company owned cluster. This cluster will include roughly 100 GB of log
storage. The documentation below can be used to create your cluster,
which is a prerequisite for the next part of the blog.
Documentation:
-   [https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free-web-ui](https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free-web-ui){target="_blank"
    rel="noopener noreffer"}
-   [https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free](https://learn.microsoft.com/en-us/azure/data-explorer/start-for-free){target="_blank"
    rel="noopener noreffer"}
:::
:::
:::
The reason why certain logs are not ingested in your SIEM can differ per
organisation. This could be cost, inadequate data quality, ingestion
limitations or you simply do not have security tooling running. The
reason why something is not ingested is also not relevant for this blog,
since we are going to perform incident response on logs that are not
ingested in the first place. An example of such logs could be an
appliance whose logs are not ingested in Sentinel, but a critical
vulnerability requires you to investigate the logs to validate if
exploitation has been performed. Another option could be that you have
custom incident response scripts that collect specific logs from a
compromised system.
# Azure Data Explorer
The starting point of this incident response part is a working Azure
Data Explorer (ADX) cluster (If you do not have this yet, check the
section above). This could also be the cluster you have used for [Kusto
Detective Agency](https://detective.kusto.io/){target="_blank"
rel="noopener noreffer"}. The query language in ADX is very familiar to
a lot of you, it's the name of the domain this blog is hosted on, KQL.
This makes it easier to react to the incidents. As in Sentinel or M365D,
we again have tables that contain content, in the case of the image
below 100 rows of content of the table *IpInfo* are returned.
![Azure Data Explorer](/svg/loading.min.svg){.lazyload
data-src="/images/kql-for-incident-response-part2/ADXImage.png"
data-srcset="/images/kql-for-incident-response-part2/ADXImage.png, /images/kql-for-incident-response-part2/ADXImage.png 1.5x, /images/kql-for-incident-response-part2/ADXImage.png 2x"
data-sizes="auto"}
# Windows Security Events
Similar to when a real incident needs to be investigated, it is first
required to collect the needed logs. It is important to collect logs as
soon as possible because data might be overwritten after some time on
local systems. So before we can use ADX we first secure the logs, in
this case Windows Security Events from a compromised workstation.
Windows Security Events can be useful for investigating security
incidents because they contain a lot of useful information. Such as the
creation of processes and Active Directory Events. But it can be that
you do not ingest those logs, or only partially. The PowerShell script
below can be (remotely, more on that in the third part of the Incident
Response series) executed on a compromised device, this script will save
all security events in a CSV. This CSV is then loaded into ADX to query
the logs using KQL.
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
$ExecutionDate = $(get-date -f yyyy-MM-dd)
$OutputName = "SecurityEvents-$ExecutionDate.csv"
Get-EventLog -LogName Security | Export-Csv -Path $OutputName -NoTypeInformation
if (Test-Path -Path $OutputName) {
    $folderPath = (Get-Item $OutputName).DirectoryName
    Write-Host "Output File Location: $folderPath\$OutputName"
} else {
    Write-Host "File does not exist."
}
```
:::
> **Looking for more PowerShell Incident Response Scripts?** [They are
> available
> here!](https://github.com/Bert-JanP/Incident-Response-Powershell){target="_blank"
> rel="noopener noreffer"}
## Ingesting Logs in Azure Data Explorer
The above PowerShell script returned a CSV that we can ingest into ADX
to analyse its content. This ingestion consists of the following steps:
1.  Menu -\> Data
2.  Quick Actions -\> Ingest Data
    ![Ingestiong Data Section ADX](/svg/loading.min.svg){.lazyload
    data-src="/images/kql-for-incident-response-part2//IngestData1.png"
    data-srcset="/images/kql-for-incident-response-part2//IngestData1.png, /images/kql-for-incident-response-part2//IngestData1.png 1.5x, /images/kql-for-incident-response-part2//IngestData1.png 2x"
    data-sizes="auto"}
3.  Select the Cluster, Database and write down your tablename. In this
    case the table name is *SecurityEventsDevice1*. If you only want to
    add more rows to a current table, select ingest data in the
    exsisting table.
    ![Configuring Table Name](/svg/loading.min.svg){.lazyload
    data-src="/images/kql-for-incident-response-part2//IngestData2.png"
    data-srcset="/images/kql-for-incident-response-part2//IngestData2.png, /images/kql-for-incident-response-part2//IngestData2.png 1.5x, /images/kql-for-incident-response-part2//IngestData2.png 2x"
    data-sizes="auto"}
4.  Upload the CSV file.
5.  Verify Schema.
    ![Verify Ingested Schema](/svg/loading.min.svg){.lazyload
    data-src="/images/kql-for-incident-response-part2//Schema.png"
    data-srcset="/images/kql-for-incident-response-part2//Schema.png, /images/kql-for-incident-response-part2//Schema.png 1.5x, /images/kql-for-incident-response-part2//Schema.png 2x"
    data-sizes="auto"}
6.  Start Ingestion, for larger datasets this can take a few minutes.
7.  Query the data:
::: highlight
``` {tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"}
SecurityEventsDevice1 //Change this to your table name
| take 10
```
:::
Very easy right? Now we can start analysing this device for malicious
activities.
ADX Ingestion Documentation:
[https://learn.microsoft.com/en-us/azure/data-explorer/ingest-data-overview](https://learn.microsoft.com/en-us/azure/data-explorer/ingest-data-overview){target="_blank"