scheme itself is similar in spirit to BRRS: the plaintext
bitstring is encrypted using an authenticated encryption
scheme, the resulting intermediate ciphertext interpreted
as a number, and this number is then unranked into the
target language. Like BRRS, this scheme works on slices
of a given regular language.
USENIX Association  
23rd USENIX Security Symposium  879
3
DCRS observe that regular expressions provide a
friendlier programming interface for specifying inputs.
But to use the GS scheme for ranking/unranking, they
must ﬁrst convert the given regular expression to an NFA
and then from an NFA to a DFA. The last step often leads
to a large blowup in the number of states, sometimes ren-
dering the process completely intractable. (Examples of
such regexs, and the associated NFA and DFA sizes, are
given in Table 6 in Section 6.) Even when the process is
tractable, the precomputed tables that DCRS and BRRS
use to implement ranking require space that scales lin-
early in the number of states in the DFA. Many of the for-
mats used by DCRS require several megabytes of mem-
ory; in one case, 383 MB. This is prohibitive for many
applications, especially if one wants to keep several po-
tential formats in memory.
Thus, in many instances it would be preferable to use
the NFA representation of the given regex, but BRRS
showed that ranking given just the NFA representation
of a regular language is PSPACE-hard. Building any FPE
or FTE scheme that works directly from an NFA has re-
mained an open problem.
We also note that developers might hope for a gen-
eral purpose FTE scheme, that takes arbitrary regular ex-
pressions for the input and output formats, and that can
be built from existing deterministic cryptographic prim-
itives (e.g., wideblock tweakable blockciphers) or ran-
domized ones (e.g., authenticated encryption schemes).
But actually instantiating such a scheme presents an ar-
ray of algorithmic and engineering choices; in the current
state of affairs, expert knowledge is required.
Summary. While a number of approaches to FPE and
FTE exist, there is a gap between theory and developer-
friendly tools.
Implementations are non-existent, and
even expert developers encounter challenges when im-
plementing schemes from the literature, including: un-
derstanding and managing memory requirements, devel-
oping a “good” construction, or engineering the plain-
text/ciphertext format pair. Finally, there exist funda-
mental performance roadblocks when using some classes
of regular expressions. This is compounded by the fact
that, a priori, it isn’t obvious when a given regex will
raise these roadblocks.
3 Overview of libfte
To aid adoption and usage of FPE and FTE, we de-
veloped a set of tools known collectively as libfte. At
libfte has two primary components (see
a high level,
Figure 3): a standalone tool called the conﬁguration as-
sistant, and a library of algorithms (implemented in a
mixture of Python and C/C++) that exposes an API for
encryption and decryption via a number of underlying
{ s 2 L(R)(cid:31)(cid:31) ↵  |s|  β }, where L(R) is the set
FPE/FTE schemes. Loosely, the API takes a conﬁgura-
tion, describing what algorithms to use, and some key
inputs for those algorithms, while the assistant helps de-
velopers determine good conﬁgurations. Let us start by
talking about the assistant.
Conﬁguration assistant.
A format is a tuple F =
(R, ↵, β), where R is a regular expression, and ↵  β
are numbers. A format deﬁnes a set of strings L(F) =
of strings matched by R. Following traditional naming
conventions, we call L(F) the language of the format.
Because of its wide-spread use, in libfte the input R is
speciﬁed in Perl-Compatible Regular Expression syntax.
However, we note that PCRE syntax allows expressions
that have no equivalent, formal regular expression. For
instance, PCRE expressions using \1,\2, ... (where \1 is
a back-reference to the ﬁrst capture group; see [1]) are
not even context free, let alone regular. Thus, libfte ac-
cepts expressions built from a subset of the full PCRE
syntax.
Our conﬁguration assistant takes as input two formats,
one describing the format of plaintext strings (FP ), and
one describing the desired format of ciphertext strings
(FC). It also accepts some “preference parameters”, for
example specifying the maximum memory footprint of
any scheme considered by the assistant, but these are set
to some reasonable default value if not speciﬁed. It then
runs a battery of tests, in an effort to determine which
conﬁgurations will result in FPE/FTE scheme that abide
by the user’s inputs. Concretely, the assistant outputs a
table listing various possible conﬁgurations (some con-
ﬁgurations may not be possible, given the user’s input),
along with information pertaining to expected perfor-
mance and memory usage. Given the user’s preferences,
the table lists the best option ﬁrst. In the case that no
available conﬁguration is possible, the assistant provides
information as to why, so that the user can alter their in-
puts and try again.
The encryption API. The algorithm library exposes an
encryption API that takes as input an encryption conﬁg-
uration, which consist of a plaintext format, a cipher-
text format, and a conﬁguration identiﬁer. The latter is
a string that speciﬁes the desired methods for perform-
ing ranking, unranking, encryption and decryption. The
library performs all necessary precomputations (initial-
ize rankers, build look-up tables, etc.) in an initialization
function and returns a handle to an object that can per-
form encryption and decryption, according to the speci-
ﬁed conﬁguration. Currently, ten conﬁgurations are sup-
ported by libfte (see Section 6 for descriptions).
Roadmap.
In Sections 4 and 5 we describe in detail
the algorithms that result in these conﬁgurations. In Sec-
tion 4 we detail a new type of ranking algorithm, what
880  23rd USENIX Security Symposium 
USENIX Association
4
input/output 
format
encryption is
(randomized | 
deterministic)
…
utilization | runtime 
prefer (memory 
performance)
M
input
format
output
format
…
…
…
valid
conﬁg.
valid
conﬁg.
invalid
conﬁg.
valid
conﬁg.
rank
a
encrypt
b
“valid?”
Y
N
“try again”
b
unrank
C
Figure 3: Left: The libfte conﬁguration assistant (built against the library) helps users create formats that meet their
speciﬁc performance requirements. The assistant takes an input/output format pair and uses a decision-tree process
to determine if the formats are valid. If the formats are deemed valid, performance statistics are reported for the
instantiated scheme(s). Right: The library implements APIs for FPE/FTE schemes. Shown is a diagram of the basic
ﬂow of our FPE/FTE schemes. As input it takes an input/output format and message M and returns a ciphertext C.
we call relaxed ranking, that allows us to work more di-
rectly with regular expressions (in particular, their equiv-
alent NFAs), and sidestep the PSPACE-hardness obsta-
cle. In Section 5, we lay out methods of combining re-
laxed ranking with standard cryptographic primitives to
build both deterministic and randomized FPE and FTE
schemes. For deterministic schemes, we leverage a tech-
nique called cycle walking, and for randomized schemes,
we employ rejection sampling.
Then in Section 6 we describe speciﬁc instantiations
of these schemes, and explain how the conﬁguration as-
sistant works in more detail. Finally, in Section 7 we
show how these schemes can be put to work in three dif-
ferent use cases: database encryption, web form encryp-
tion, and network monitor circumvention.
4 Fast, Relaxed Ranking
The rank-encipher-unrank method for constructing
FPE/FTE schemes needs efﬁcient techniques for map-
ping strings in a regular language L to positive integers
as well as computing the inverse operation (mapping pos-
itive integers back to strings in the language). Exist-
ing techniques are often impractical for two main rea-
sons. First, the traditional DFA-based ranking requires
the construction of a DFA corresponding to a regular
expression. DFAs for some regular expressions can be
very large. For instance, the minimum DFA for the regex
(a|b)⇤a(a|b){20} has 1 + 221 states. Second, the num-
bers involved in ranking can be very large (for languages
with many strings) and operations on these integers can
therefore be computationally expensive. As an extreme
example, ranking a 10, 000-byte long element accepted
by the regex .⇤ requires numbers of up to (28)10000 bits,
or 10, 000 bytes. This section tackles these two chal-
lenges.
4.1 Relaxed Ranking
We introduce a framework for building FPE and FTE
schemes directly from NFAs. The resulting algorithms
will often use signiﬁcantly less memory than the DFA ap-
proach, thus enabling general-purpose regex-based rank-
ing in memory-constrained applications. For instance,
the NFA for the regex (a|b)⇤a(a|b){20} has 48 states.
A key insight is that we can circumvent the negative
result about NFA ranking if we shift to a relaxed rank-
ing approach, which we formally deﬁne in a moment.
This will require, in turn, constructing FPE and FTE
schemes given only relaxed ranking which we address
in Section 5.
4.1.1 Relaxed Ranking Schemes
Informally, a relaxed ranking of a language L relaxes the
requirement for a bijection from L to Z|L|.
Formally, a relaxed ranking scheme for L is a pair of
functions RankL and UnrankL, such that:
1. RankL : L ! Zi is injective, i ≥ |L| (Note that
we capitalize ‘Rank’ to distinguish relaxed ranking
from ranking.)
2. UnrankL : Zi ! L is surjective; and
3. For all X 2 L, UnrankL(RankL(X)) = X.
The last condition means that we can correctly invert
points in the image of L, denoted Img(L) ✓ Zi. Note
that a ranking is a relaxed ranking with i = |L|.
DFA-based ranking revisited. As a thought experi-
ment, one can view the traditional GS DFA-based rank-
ing for regular languages as follows: let I be the set of all
USENIX Association  
23rd USENIX Security Symposium  881
5
accepting paths in a DFA. First, one maps a string X 2 L
to its accepting path ⇡X 2 I. Then, one maps ⇡X to an
integer via an (exact) ranking. The composition of these
two functions yields a ranking function for all strings in
L. In the DFA ranking algorithms of [5, 12], these two
steps are merged.
A two-stage framework. We can use this two-step pro-
cedure to build efﬁcient relaxed ranking algorithms. Sup-
pose we desire to build a relaxed ranking function RankL
from a given set L into Zi. We ﬁrst identify three com-
ponents:
1. an intermediate set I for which we can efﬁciently
perform ranking, i.e., there is an efﬁcient algorithm
for rankI : I ! Zi where i = |I|;
2. an injective function map : L ! I; and
3. a surjective function unmap : I ! L such that for
We then deﬁne
all X 2 L it holds that unmap(map(X)) = X.
RankL(X) =rank
I(map(X))
UnrankL(Y ) =unmap (unrankI(Y ))
Should unmap additionally be injective, then RankL is a
bijection, and we have (strict) ranking.
At ﬁrst glance, this framework may seem to not have
accomplished much as we rely on a strict ranking to real-
ize it. But we will ensure that the language I allows for
strict ranking, and so the framework allows us to trans-
form the problem of ranking from a difﬁcult set (L) to an
easier one (I).
4.1.2 Relaxed Ranking Using NFAs
We construct relaxed ranking for NFAs using the ap-
proach above. We use as intermediate set I the set of
all accepting paths in the NFA. To map into this set, for
each string in L we deterministically pick an accepting
path (a process called parsing). To rank on I we de-
ﬁne a path ordering, and generalize the Goldberg-Sipser
ranking algorithm for DFAs to count paths based on this
ordering.
Recall that an NFA is a 5-tuple M = (Q, ⌃, δ, q0, F ),
where Q is a ﬁnite set of states, ⌃ is the alphabet, δ ✓
Q ⇥ ⌃ ⇥ Q is the transition relation2, q0 2 Q is the
start state, and F ✓ Q is the set of ﬁnal (or accepting)
states. If (q, a, q0) 2 δ then M may transition from state
q to state q0 when the current input symbol is a. We also
write a transition ⌧ = (q, a, q0) 2 δ as q a! q0, where q
is the source and q0 is the destination of ⌧.
A path ⇡ in M is a sequence of transitions
ajn! qin ·
aj2! qi2 ··· qin−1
aj1! qi1
qi0
2We assume that there are no ✏-transitions, but this is without loss
of generality as there are standard methods to efﬁciently remove them
from an NFA.
Path ⇡ can also be expressed as a sequence of transitions
⌧1⌧2 ··· ⌧n, where n = |⇡| is the length of ⇡. The sufﬁx
⇡1 of the path ⇡ is ⌧2 ··· ⌧n, and we have ⇡ = ⌧1⇡1. The
sequence of characters in the path is ⇡|⌃ = aj1 aj2 ...ajn.
The intermediate set I. An accepting path is one that
ends in an accepting state. Let AccM(q) be the set
of accepting paths starting from state q. We let I =
AccM(q0).
The functions map and unmap. We must map from L
to I and back. The latter is simpler: deﬁne unmap(⇡) to
be the word ⇡|⌃. This is fast to compute, in time linear in
|w|. The forward direction map(w) requires a determin-
istic choice for an accepting path for w. This is called
parsing. Any suitable parsing algorithm will work, but
we note that the most obvious algorithms may be quite
inefﬁcient. For example, simply recording all accepting
paths while running the NFA runs in time exponential in
|w| in the worst case.
Linear-time parsing. We now give the (to the best of
our knowledge) ﬁrst algorithm for determining a com-
pact representation of all of an NFA’s accepting paths for
a string w. Then map(w) simply runs this algorithm for
w and outputs the lexicographically least accepting path.
Our algorithm constructs an implicit representation of a
directed-acyclic graph (DAG) representing all accepting
paths for w. The lexicographically least accepting path
for w can then be found using a simple traversal of the
DAG. Next we describe the algorithm in detail.
Let M = (Q, ⌃, δ, q0, F ) be an NFA, Q0 ✓ Q, and
c 2 ⌃. We denote by δ(Q0, c) the set of states q such that
(q0, c, q) 2 δ for some q0 2 Q0, and by δ−1(Q0, c) the set
of states q such that (q, c, q0) 2 δ for some q0 2 Q0.
Consider a string w = c1c2...cn. Traditional NFA
matching starts with a frontier of states F0 = {q0}, and
at every position k in w it computes Fk = δ(Fk−1, ck).
The string is accepted if Fn \ F 6= ;. However, this
does not allow easy recovery of an accepting path, even
if all Fk sets are saved. The main reason for this is that
there might be states in the frontiers that do not lead to
an accepting state. To work around this, we also scan
the input backwards, maintaining a backwards frontier
set of states where Bn = F , and Bk−1 = δ−1(Bk, ck).
Given the sequences {Fk} and {Bk}, with k = 0, ..., n,
we compute {Sk} where Sk = Fk \ Bk. The set Sk
contains all states reachable from the start state follow-
ing transitions on c1...ck such that ck+1ck+2...cn is an
accepting path. Together, {Sk} and the NFA transitions
of the form (q, ck, q0) with q 2 Sk−1 ^ q0 2 Sk, form an
implicit Direct Acyclic Graph (DAG) representation of
all accepting paths for w. Finally, we traverse this DAG
starting from q0 2 S0 and following the lexicographi-
cally smallest transitions, which yields map(w).
NFA path ranking. All that remains is to give a strict
882  23rd USENIX Security Symposium 
USENIX Association
6
ranking algorithm for I, the set of accepting paths in
the NFA. Here, we can adapt techniques from the DFA-
based ranking by Goldberg and Sipser. Their algorithm
can be viewed as a recursive procedure for counting the
number of accepting DFA paths that precede a given path
in lexicographical order.
Let T (q, n) be the number of paths of length n in
AccM(q). Note that, for all q 2 Q and 0  i  n,
the value of T (q, i) can be computed in polynomial time
using a simple dynamic-programming algorithm.
1 and ⇡2 = ⌧2⇡1
2, then this order is:
(1)
2
1 ≺ ⇡1
Assume that the NFA transitions are enumerated ac-
cording to a total ordering, and that ⌧ l ⌧0 means that