title:Unicorn: Runtime Provenance-Based Detector for Advanced Persistent
Threats
author:Xueyuan Han and
Thomas F. J.-M. Pasquier and
Adam Bates and
James Mickens and
Margo I. Seltzer
UNICORN: Runtime Provenance-Based Detector for
Advanced Persistent Threats
Xueyuan Han∗, Thomas Pasquier†, Adam Bates‡, James Mickens∗ and Margo Seltzer§
{hanx,mickens}@g.harvard.edu
∗Harvard University
†University of Bristol
PI:EMAIL
‡University of Illinois at Urbana-Champaign
PI:EMAIL
§University of British Columbia
PI:EMAIL
Abstract—Advanced Persistent Threats (APTs) are difﬁcult to
detect due to their “low-and-slow” attack patterns and frequent
use of zero-day exploits. We present UNICORN, an anomaly-
based APT detector that effectively leverages data provenance
analysis. From modeling to detection, UNICORN tailors its design
speciﬁcally for the unique characteristics of APTs. Through
extensive yet time-efﬁcient graph analysis, UNICORN explores
provenance graphs that provide rich contextual and historical
information to identify stealthy anomalous activities without pre-
deﬁned attack signatures. Using a graph sketching technique, it
summarizes long-running system execution with space efﬁciency
to combat slow-acting attacks that take place over a long time
span. UNICORN further improves its detection capability using a
novel modeling approach to understand long-term behavior as the
system evolves. Our evaluation shows that UNICORN outperforms
an existing state-of-the-art APT detection system and detects real-
life APT scenarios with high accuracy.
I.
INTRODUCTION
Advanced Persistent Threats (APT) are becoming increas-
ingly common [9]. The long timescale over which such attacks
take place makes them fundamentally different from more
conventional attacks. In an APT, the adversary’s goal is to gain
control of a speciﬁc (network of) system(s) while remaining
undetected for an extended period of time [116]. The adversary
often relies on zero-day exploits [96, 116] to gain a foothold
in the victim system.
Traditional detection systems are not well-suited to APTs.
Detectors dependent on malware signatures are blind to attacks
that exploit new vulnerabilities [20]. Anomaly-based systems
typically analyze series of system calls [114] and log-adjacent
system events [130], but most of them [36, 81, 92, 109] have
difﬁculty modeling long-term behavior patterns. Further, they
are susceptible to evasion techniques, because they typically
inspect only short sequences of system calls and events.
As a result, they have exhibited little success in detecting
APTs. Systems that attempt
to capture long-term program
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24046
www.ndss-symposium.org
behavior [112] limit their analysis to event co-occurrence to
avoid high computational and memory overheads.
More recent work [15, 19, 83, 87] suggests that data
provenance might be a better data source for APT detection.
Data provenance represents system execution as a directed
acyclic graph (DAG) that describes information ﬂow between
system subjects (e.g., processes) and objects (e.g., ﬁles and
sockets). It connects causally-related events in the graph, even
when those events are separated by a long time period. Thus,
even though systems under APT attack usually behave simi-
larly to unattacked systems, the richer contextual information
in provenance allows for better separation of benign and
malicious events [55].
However, leveraging data provenance to perform runtime
APT analysis is difﬁcult. Provenance graph analysis is com-
putationally demanding, because the graph size grows con-
tinuously as APTs slowly penetrate a system. The neces-
sary contextual analysis, which requires large graph compo-
nents, makes the task even more challenging. One approach
to provenance-based APT detection [87] uses simple edge-
matching rules based on prior attack knowledge, but this makes
it difﬁcult to detect new classes of APTs [15]. Provenance-
based anomaly detection systems rely on graph neighborhood
exploration to understand normal behavior through either
static [53] or dynamic [83] models. However, practical com-
putational constraints limit the scope of the contextual anal-
ysis that is feasible. Thus, current systems suffer from some
combination of the following three problems: 1) static models
cannot capture long term system behavior, 2) the low-and-slow
APT approach can gradually poison dynamic models, and 3)
approaches that require in-memory computation [83, 87] scale
poorly in the presence of long-running attacks [87].
We introduce UNICORN, a provenance-based anomaly de-
tector capable of detecting APTs. UNICORN uses graph sketch-
ing to build an incrementally updatable, ﬁxed size, longitudinal
graph data structure 1 that enables efﬁcient computation of
graph statistics [33]. This longitudinal nature of the structure
permits extensive graph exploration, which allows UNICORN
1An algorithm that builds a graph data structure is called a graph kernel,
which is an overloaded term that also refers to functions that compare the
similarity between two graphs. We adopt the second deﬁnition here.
to track stealthy intrusions. The ﬁxed size and incrementally
updatable graph data structure obviates the need for an in-
memory representation of the provenance graph, so UNICORN
is scalable with low computational and storage overheads. It
can succinctly track a machine’s entire provenance history
from boot to shutdown. UNICORN directly models a system’s
evolving behavior during training, but
it does not update
models afterward, preventing an attacker from poisoning the
model.
We make the following contributions:
• We present a provenance-based anomaly detection system
• We introduce a novel sketch-based, time-weighted prove-
nance encoding that is compact and able to usefully sum-
marize provenance graphs over long time periods.
• We evaluate UNICORN against both simulated and real-
life APT attack scenarios. We show that UNICORN can
detect APT campaigns with high accuracy. Compared to
previous work, UNICORN signiﬁcantly improves precision
and accuracy by 24% and 30%, respectively.
• We provide an open source implementation.
tailored to APT attacks.
II. BACKGROUND
Traditional anomaly-based intrusion detection systems
(IDS) analyze system call
traces from audit systems [37,
81, 130, 134]. However, for APT detection, whole-system
provenance [100] is a superior data source.
A. Challenges of Syscall Traces
The system call abstraction provides a simple interface by
which user-level applications request services of the operating
system. As the mechanism through which system services are
invoked, the system call interface is also generally the entry
point for attackers trying to subvert a system [61]. Therefore,
system call traces have long been regarded as the de facto
information source for intrusion detection [37].
However, existing systems capture unstructured collections
of syscall audit
logs, requiring analysis to make sense of
such information. Given the low-and-slow nature of APTs,
analyzing individual syscall logs to detect point-wise outliers
is often fruitless [23], as is inspection of short system call
sequences. Such analysis does not reﬂect the historical context
of each syscall event, resulting in high false positive rates
and mimicry attacks that evade detection [98, 123]. In con-
trast, data provenance encodes historical context into causality
graphs [21].
Data provenance can be used to model a variety of event
sequences in computing, including syscall audit logs. Indeed,
there exist frameworks that reconstruct provenance graph
structures from audit data streams to allow for better rea-
soning about system execution [44]. However, such post-hoc
approaches make it difﬁcult to ensure graph correctness [104];
it is difﬁcult to prove completeness, trustworthiness, or re-
liability of the syscall traces from which the graph is built,
because many syscall
interposition techniques suffer from
concurrency issues [43, 125]. It is easy to bypass library-
wrapper-based syscall capture mechanisms [63], while user-
space mechanisms (e.g., ptrace) incur unacceptable runtime
performance overheads [43] and are susceptible to race condi-
tions [63]. The same race condition issues also plague in-kernel
mechanisms (e.g., Systrace [105], Janus [46]), resulting
in time-of-check-to-time-of-use (TOCTTOU),
time-of-audit-
to-time-of-use (TOATTOU), and time-of-replacement-to-time-
of-use (TORTTOU) bugs [125]. For example, many IDS [81,
130] analyze syscalls and their arguments to defend against
mimicry attacks, but TOATTOU bugs cause the captured
syscall arguments to be different from the true values accessed
in the kernel [43]. Perhaps more importantly, instead of a
single graph of system execution, syscall-based provenance
frameworks produce many disconnected graphs, because they
cannot trace the interrelationships of kernel threads that do
not make use of the syscall
interface. Consequently, such
frameworks can rarely detect the stealthy malicious events
found in APTs.
B. Whole-System Provenance
Whole-system provenance collection runs at the operating
system level, capturing all system activities and the interactions
between them [104]. OS-level provenance systems such as
Hi-Fi [104], LPM [16], and CamFlow [100] provide strong
security and completeness guarantees with respect to informa-
tion ﬂow capture. This completeness is particularly desirable in
APT scenarios as it captures long-distance causal relationships
enabling contextualized analysis, even if a malicious agent ma-
nipulates security-sensitive kernel objects to hide its presence.
We use CamFlow [100] as the reference implementation
throughout the paper, although there exist other whole-system
provenance implementations; in § VI, we show that UNI-
CORN works seamlessly with other capture mechanisms as
well. CamFlow adopts the Linux Security Modules (LSM)
framework [89] to ensure high-quality, reliable recording of
information ﬂows among data objects [45, 101]. LSM elim-
inates race conditions (e.g., TOCTTOU attacks) by placing
mediation points inside the kernel instead of at the system call
interface [61].
C. Summary and Problem Statement
Prior research [15, 83, 87] explored the use of data prove-
nance for APT detection. However, these approaches all suffer
from some combinations of the following limitations:
L1: Pre-deﬁned edge-matching rules are overly sensitive and
make it difﬁcult to detect zero-day exploits common in
APTs [87].
L2: Constrained provenance graph exploration provides only
limited understanding of information context critical to de-
tect low-proﬁle anomalies. For example, graph exploration
is limited to small graph neighborhoods, single node/edge
attributes, and truncated subgraphs [15, 53, 83].
L3: System behavior models fail to cater to the unique character-
istics of APT attacks. Static models cannot capture dynamic
behavior of long-running systems [53], while dynamic mod-
eling during runtime risks poisoning from the attackers [83].
L4: Provenance graphs are stored and analyzed only in memory,
sacriﬁcing long-term scalability [83, 87].
UNICORN addresses those issues. We formalize the system-
wide intrusion detection problem in APT campaigns as a
2
real-time graph-based anomaly detection problem on large,
attributed, streaming whole-system provenance graphs. At any
point in time, the entirety of a provenance graph, captured
from system boot to its current state is compared against a
behavior model consisting of known good provenance graphs.
The system is considered under attack if its provenance graph
deviates signiﬁcantly from the model. For APT detection, an
ideal provenance-based IDS must:
• Continuously analyze provenance graphs with space and
time efﬁciency while taking full advantage of rich informa-
tion content provided by whole-system provenance graphs;
• Take into consideration the entire duration of system exe-
• Learn only normal system behavior changes but not those
cution without making assumptions of attack behavior;
directed by the attackers.
III. THREAT MODEL
We assume APT scenarios for host intrusion detection: an
attacker illegitimately gains access to a system and plans to
remain there for an extended period of time without being
detected. The attacker may conduct the attack in several phases
and use a variety of techniques during each phase [131]. The
goal of UNICORN is to detect such attacks at any stage by
interpreting the provenance generated by the host. We assume
that, prior to the attack, UNICORN thoroughly observes the
host system during normal operation and that no attacks arise
during this initial modeling period.
The integrity of the data collection framework is central
to UNICORN’s correctness. We assume that Linux Security
Modules [89], which is the Linux reference monitor implemen-
tation, correctly provides reference monitor guarantees [10] for
CamFlow [100]. Speciﬁcally, we assume that LSM integrity is
provided via an attested boot sequence [16]. We make similar
integrity assumptions for other data collection frameworks.
UNICORN can further safeguard its data source by streaming
it across the network. While we primarily envision UNICORN
as an endpoint security monitor, UNICORN’s ability to stream
provenance data enables off-host intrusion detectors that are
not co-located with a potentially compromised machine.
For the remainder of the paper, we assume the correctness
of the kernel, the provenance data, and the analysis engine.
We instead focus on UNICORN’s analytic capabilities.
IV. DESIGN
UNICORN is a host-based intrusion detection system capa-
ble of simultaneously detecting intrusions on a collection of
networked hosts. We begin with a brief overview of UNICORN
and then follow with a detailed discussion of each system com-
ponent in the following sections. Fig. 1 illustrates UNICORN’s
general pipeline.
1 Takes as input a labeled, streaming provenance graph.
UNICORN accepts a stream of attributed edges produced by
a provenance capture system running on one or more net-
worked hosts. Provenance systems construct a single, whole-
system provenance DAG with a partial-order guarantee, which
allows for efﬁcient streaming computation (§ IV-B) and fully
contextualized analysis (L2). We present UNICORN using
CamFlow [100], although it can obtain provenance from other
3
Fig. 1: UNICORN 1 takes a streaming provenance graph, 2 periodically
summarizes graph features into histograms, and then 3 creates ﬁxed-size
graph sketches. The resulting clustering-based model 4 captures the dynamics
of system execution. During deployment, graph sketches are created through
the same steps ( 1 , 2 and 3 ) and then compared against the model in 4 .
systems, such as LPM [16] and Spade [44], the latter of which
interoperates with commodity audit systems such as Linux
Audit and Windows ETW.
2 Builds at runtime an in-memory histogram. UNICORN
efﬁciently constructs a streaming graph histogram that rep-
resents the entire history of system execution, updating the
counts of histogram elements as new edges arrive in the
graph data stream. By iteratively exploring larger graph neigh-
borhoods, it discovers causal relationships between system
entities providing execution context. This is UNICORN’s ﬁrst
step in building an efﬁcient data structure that facilitates
contextualized graph analysis (L2). Speciﬁcally, each element
in the histogram describes a unique substructure of the graph,
taking into consideration the heterogeneous label(s) attached
to the vertices and edges within the substructure, as well as
the temporal order of those edges.
To adapt to expected behavioral changes during the course
of normal system execution, UNICORN periodically discounts
the inﬂuence of histogram elements that have no causal
relationships with recent events ( L3). Slowly “forgetting”
irrelevant past events allows us to effectively model meta-
states (§ IV-D) throughout system uptime (e.g., system boot,
initialization, serving requests, failure modes, etc.). However,
it does not mean that UNICORN forgets informative execution
history; rather, UNICORN uses information ﬂow dependencies
in the graph to keep up-to-date important, relevant context
information. Attackers can slowly penetrate the victim system
in an APT, hoping that a time-based IDS eventually forgets
this initial attack, but they cannot break the information ﬂow
dependencies that are essential to the success of the attack [87].
3 Periodically, computes a ﬁxed-size graph sketch. In a
pure streaming environment, the number of unique histogram
elements can grow arbitrarily large as UNICORN summarizes
the entire provenance graph. This variation in size makes
it challenging to efﬁciently compute similarity between two
histograms and impractical
to design algorithms for later
modeling and detection. UNICORN employs a similarity-
preserving hashing technique [132] to transform the histogram
to a graph sketch [7]. The graph sketch is incrementally
maintainable, meaning that UNICORN does not need to keep
the entire provenance graph in memory; its size is constant
(L4). Additionally, graph sketches preserve normalized Jaccard
similarity [64] between two graph histograms. This distance-
preserving property is particularly important to the clustering
1234algorithm in our later analysis, which is based on the same
graph similarity metric.
4 Clusters sketches into a model. UNICORN builds a normal
system execution model and identiﬁes abnormal activities
without attack knowledge (L1). However, unlike traditional
clustering approaches, UNICORN takes advantage of its stream-
ing capability to generate models that are evolutionary. The
model captures behavioral changes within a single execution
by clustering system activities at various stages of its exe-
cution, but UNICORN does not modify models dynamically
during runtime when the attacker may be subverting the system
( L3). It is therefore more suitable for long-running systems
under potential APT attacks.
A. Provenance Graph
Provenance graphs are increasingly popular for attack
analysis [15, 40, 79, 102] and are attractive for APT detection.
In particular, provenance graphs capture causality relationships
between events. Causal connectivity facilitates reasoning over
events that are temporally distant, thus useful in navigating
through APT’s low-and-slow attack pattern. Audit log analysis
frequently relies on temporal relationships, while provenance
analysis leverages causality relationships, producing a more
meaningful model of system behavior.
UNICORN compares two system executions based on the
similarity between their corresponding provenance graphs.
UNICORN always considers the entire provenance graph to
detect long-running attacks. There exist many graph similarity
measures, but many approaches (e.g., graph isomorphism)
are too restrictive (i.e., require two graphs to be exactly or
largely identical) [110], because even normal executions often
produce slightly different provenance graphs. Whole-system
provenance graphs can grow large quickly [100], so NP-
complete [42, 95] and even polynomial algorithms [71, 122]
are too computationally expensive for streaming settings. As
we show in the following sections, UNICORN’s graph similar-
ity algorithm does not exhibit these problems.
B. Constructing Graph Histograms
Our goal is to efﬁciently compare provenance graphs while
tolerating minor variations in normal executions. The two
criteria we have for an algorithm are: 1) the representation
should take into account long-term causal relationships, and
2) we must be able to implement the algorithm on the real-
time streaming graph data so that we can thwart intrusions
when they happen (not merely detect them).
We adapt a linear-time, fast Weisfeiler-Lehman (WL) sub-