漏洞来源于长亭安全研究实验室在2017年PWN2OWN大赛中Ubuntu 16.10
Desktop的本地提权漏洞，本分析是该漏洞利用的一种直接越界写cred结构体进而提权的方法，后续可能会分析长亭文档中提及的劫持控制流的方法。
本次漏洞分析基于`Linux 4.4.0-21-generic`版本，即`Ubuntu 16.04.1`。镜像可从[此处](http://old-releases.ubuntu.com/releases/16.04.1/ubuntu-16.04-desktop-amd64.iso)下载，文中涉及的脚本可从[此处](https://github.com/ret2p4nda/kernel-pwn/blob/master/CVE-2017-7184)下载。
本篇文章被同步于[我的blog](http://p4nda.top/2019/02/16/CVE-2017-7184/)上，内容如有差错，望指出orz。
# 双机调试环境搭建
本次分析没有采用`QEMU`，而是用了`VMware`来进行双机调试，给我个人的感觉就是很慢，而且符号表不全很多函数都被编译优化掉了。调试环境构建参考了[《ubuntu
内核源码调试方法（双机调试》](https://bbs.pediy.com/thread-249192.htm)，由于我已经有了一个调试虚拟机（debugging），所以仅需利用上述镜像构建被调试机（debuggee）。
## debugging环境配置
由于主要的调试时在`debugging`上完成的，所以大部分的程序包都需要安装在debugging上。
**dbsym安装**
这个就是带有符号表的vmlinux文件，需要根据debuggee来确定。
如在`debuggee`上利用`uname -sr`命令得到的结果是`Linux
4.4.0-21-generic`，则需要下载安装`vmlinux-4.4.0-21-generic`。
首先需要更新源文件，执行命令如下：
    # 增加source.list
    codename=$(lsb_release -c | awk '{print $2}')
    sudo tee /etc/apt/sources.list.d/ddebs.list add_time when changing date */
        long        saved_tmo;
        /* Last used time */
        unsigned long       lastused;
        /* Reference to data common to all the instances of this
         * transformer. */
        const struct xfrm_type  *type;
        struct xfrm_mode    *inner_mode;
        struct xfrm_mode    *inner_mode_iaf;
        struct xfrm_mode    *outer_mode;
        /* Security context */
        struct xfrm_sec_ctx *security;
        /* Private data of this transformer, format is opaque,
         * interpreted by xfrm_type methods. */
        void            *data;
    };
其中，`struct xfrm_id id;`用于标识一个`SA`身份，包含`daddr、spi、proto`三个参数。
    struct xfrm_id {
        xfrm_address_t  daddr;
        __be32      spi;
        __u8        proto;
    };
此外，`SA`还包括一个`xfrm_replay_state_esn`结构体，该结构体定义如下。其中bmp是一个边长的内存区域，是一块`bitmap`，用于标识数据包的`seq`是否被重放过，其中`bmp_len`表示变长结构体的大小，replay_window用于`seq`索引的模数，即索引的范围，此结构体在创建`xfrm_state`结构体时根据用户输入参数动态被创建，而程序漏洞存在于这个结构体的读写过程中。
    struct xfrm_replay_state_esn {
        unsigned int    bmp_len;
        __u32       oseq;
        __u32       seq;
        __u32       oseq_hi;
        __u32       seq_hi;
        __u32       replay_window;
        __u32       bmp[0];
    };
## xfrm_state结构体生成
该结构体生成位于[xfrm_add_sa](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L616)函数中，在[1]处对用户输入数据进行参数及协议检查，在[2]处对根据用户输入对结构体进行构造，并放入SA结构体的哈希链表中
    static int xfrm_add_sa(struct sk_buff *skb, struct nlmsghdr *nlh,
            struct nlattr **attrs)
    {
        struct net *net = sock_net(skb->sk);
        struct xfrm_usersa_info *p = nlmsg_data(nlh);
        struct xfrm_state *x;
        int err;
        struct km_event c;
    [1] err = verify_newsa_info(p, attrs); //协议及参数检查
        if (err)
            return err;
    [2] x = xfrm_state_construct(net, p, attrs, &err);
        if (!x)
            return err;
        xfrm_state_hold(x);
        if (nlh->nlmsg_type == XFRM_MSG_NEWSA)
            err = xfrm_state_add(x);
        else
            err = xfrm_state_update(x);
        xfrm_audit_state_add(x, err ? 0 : 1, true);
        if (err km.state = XFRM_STATE_DEAD;
            __xfrm_state_put(x);
            goto out;
        }
        c.seq = nlh->nlmsg_seq;
        c.portid = nlh->nlmsg_pid;
        c.event = nlh->nlmsg_type;
        km_state_notify(x, &c);
    out:
        xfrm_state_put(x);
        return err;
    }
在[verify_newsa_info](https://elixir.bootlin.com/linux/v4.10.6/source/net/xfrm/xfrm_user.c#L151)函数中，首先根据`id.proto`协议对用户输入的非兼容性参数进行检查，并对各输入参数中的长度合理性进行检查，我们只关心在[1]处的`XFRMA_REPLAY_ESN_VAL`数据检查。
    static int verify_newsa_info(struct xfrm_usersa_info *p,
                     struct nlattr **attrs)
    {
        int err;
        err = -EINVAL;
        switch (p->family) {
        case AF_INET: //IPv4
            break;
        case AF_INET6: //IPv6
    #if IS_ENABLED(CONFIG_IPV6)
            break;
    #else
            err = -EAFNOSUPPORT;
            goto out;
    #endif
        default:
            goto out;
        }
        err = -EINVAL;
        switch (p->id.proto) {
        case IPPROTO_AH:
    ......
            break;
        case IPPROTO_ESP:
    ......
            break;
        case IPPROTO_COMP:
    ......
            break;
    #if IS_ENABLED(CONFIG_IPV6)
        case IPPROTO_DSTOPTS:
        case IPPROTO_ROUTING:
    ......
            break;
    #endif
        default:
            goto out;
        }
        if ((err = verify_aead(attrs))) //XFRMA_ALG_AEAD参数长度检查
            goto out;
        if ((err = verify_auth_trunc(attrs)))//XFRMA_ALG_AUTH_TRUNC参数长度检查
            goto out;