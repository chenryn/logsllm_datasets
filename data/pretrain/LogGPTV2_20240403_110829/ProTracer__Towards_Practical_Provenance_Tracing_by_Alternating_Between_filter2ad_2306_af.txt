580/128
148/82
388/208
432/226
864/305
TABLE IV: Causal graph comparison (BEEP/ProTracer).
To further compare the quality of the query results. We
compare the causal graphs generated by BEEP and ProTracer
in answering the forward queries. The results are shown in
Table IV, which shows the number of taint sources, the number
of processes (i.e. the internal nodes along the attack path), the
number of ﬁles affected by the attacks, and the number of
nodes in the graphs. Note that LogGC would produce the same
graphs as BEEP. Observe that the two systems produce the
same set of taint sources and processes. The differences in the
ﬁles are due to the fact that BEEP does not log ﬁle accesses in
the start and the end phases (e.g. loaded libraries). In this sense,
we argue that the ProTracer-induced graphs are more complete.
Finally, the ProTracer-induced graphs are much smaller than
graphs generated by BEEP, reducing the human inspection
efforts.
To acquire an intuitive understanding of the differences
between ProTracer graphs and BEEP graphs, we present parts
of the graphs by BEEP and ProTracer for the forward query
in the backdoor attack case. The query aims to ﬁnd all the
reachable items from the external IPs connected to the FTP
server. There are three connections. The one from a.a.a.a
downloaded and uploaded a ﬁle, and exploited the backdoor.
The one from b.b.b.b simply downloaded and uploaded a
ﬁle. The one from c.c.c.c lost its connection. Observe that
the ProTracer graph is a lot more concise and clear. This is
because using tainting, ProTracer avoids logging many events
and generating nodes for those events. For example, the box on
the bottom of the BEEP graph shows a zoom-in view of part
of the graph. It is reduced to a single node (FTP-a0) in our
graph. And our graph is still equally informative. Moreover,
the events related to c.c.c.c are precluded from our log in
the ﬁrst place as the taints did not propagate to any permanent
changes.
VI. DISCUSSION
In this section, we will discuss the limitations of ProTracer.
(1) While the execution of many programs can be divided
autonomous units which are only connected through workﬂow
(2) Similar to BEEP [27], ProTracer relies on training runs
to identify unit loops and workﬂow dependencies. However,
the training may not be complete. If unit loops cannot be
properly identiﬁed, ProTracer treats the entire execution as a
unit. Once a unit loop is identiﬁed, the corresponding workﬂow
dependencies can be identiﬁed as they rarely change [27]. In
theory, however, ProTracer may miss such dependencies hence
the corresponding memory accesses are not
instrumented,
leading to broken causal paths.
(3) Just like most audit logging systems, ProTracer requires
that the kernel and the user space daemon are not compro-
mised. This limitation can be mitigated by porting ProTracer
to a hypervisor. Furthermore, if a system is clean to begin with
and an attacker successfully subverts the system at a later time,
the initial subversion will be accurately captured by ProTracer.
But the log entries after the system’s subversion cannot be
trusted.
(4) Similar to most
logging systems, ProTracer excels at
capturing provenance through benign and commonly used
applications, such as browsers and editors, as many attacks
leverage these applications. In contrast, malware usually makes
use of various methods to protect themselves such as obfus-
cation and self-modiﬁcation, which may create trouble for
ProTracer’s analysis. As a result, ProTracer usually treats
malware execution as a single unit. We argue that this is
reasonable because all malware actions are – by deﬁnition –
of interest (instead of noise) to attack investigation.
VII. RELATED WORK
System logging: Lots of works [9], [10], [15], [16], [21],
[24], [26], [29], [34], [35], [35], [36], [52] have been done in
tracking provenance using system-level audit logs. However,
many of them suffer from dependence explosion and have
high overhead. BEEP [27] and LogGC [28] are the most
closely related work. ProTracer uses similar unit partitioning to
avoid dependence explosion. Compared to BEEP and LogGC,
ProTracer has much lower space and run-time overhead, due
to the new infrastructure and the integration of tainting and
logging. The graphs by ProTracer are also much more concise.
Some of these techniques [34]–[36] provide high performance.
However, they do not perform any on-the-ﬂy reduction but
rather simply store the whole traces. They may also be
susceptible to dependence explosion.
13
a.a.a.a
b.b.b.b
FTP main
c.c.c.c
FTP listener 
unit
work queue
FTP 
worker
FTP worker unit
bash
68 
nodes
432 
nodes
476 
nodes
Connection 
is  lost
a.a.a.a
FTP 
main
FTP listener 
unit
work queue
FTP worker
FTP worker unit
(c) Merge multiple nodes in the graph generated by BEEP into one in our graph
(a) BEEP
bash
nodes
FTP-a0
bash
Other nodes
c.c.c.c
connection lost
a.a.a.a
Other nodes
FTP-a1: CMD_UPLOAD
File-a1
b.b.b.b
FTP-b0
File-b1
FTP-a2: CMD_DOWNLOAD
File-a2
FTP-b1
File-b2
(b) ProTracer
Fig. 11: Part of the graphs generated by BEEP and ProTracer for the backdoor case.
Dynamic information ﬂow tracking and tainting: Tainting
and dynamic information ﬂow tracking [12]–[14], [20], [23],
[33], [42], [47]–[50] have been studied from different aspects
(e.g., ﬁle system, kernel object level, network ﬂow) on dif-
ferent platforms (e.g., Linux, Android) including some new
operating system prototypes like Asbestos [12] or HiStar [49]
to precisely trace provenance. They can trace provenance with
high precision. But their run-time overhead tends to be on the
high end, due to the heavy-weight instrumentation. ProTracer
borrows the basic concept of tainting, optimizes it at
the
unit level to avoid the heavy-weight instrumentation used in
existing approaches. Moreover, tainting alone cannot answer
how-queries.
Log storage and presentation: Provenance data can be rep-
resented as graphs, researchers have done a lot of work [44]–
[46] on reducing the size of these graphs by borrowing ideas
from Web graph compression and dictionary based encoding.
In [6], researchers leverage Mandatory Access Control (MAC)
policies to reduce the storage cost of provenance based on
the Hi-Fi [36] system. We envision such policies can also be
adopted in ProTracer to achieve more sophisticated reduction.
G2 [18] stores logs in databases, and provides execution graphs
that can be analyzed using LINQ queries or user-deﬁned
programs. However, it depends on printed messages by the
applications. Some techniques [9], [28] try to reduce events
ofﬂine. Since ProTracer performs online reduction, the whole
trace is not visible to ProTracer. Some reduction that is easy for
ofﬂine analysis cannot be applied online. In other words, these
ofﬂine reduction techniques are complementary to ProTracer.
ProTracer can provide pre-analyzed logs with small size, which
help [19] gain more accurate results and better performance
with lower network trafﬁc. In [43], researchers proposed a
primitive that provides the integrity of execution trace. It works
on instruction-level execution traces. The same idea can be
applied in ProTracer to guarantee the integrity of the log and
provide better attack resilience. Recently in [7], researchers
propose a novel generic framework for the development of
provenance-aware systems based on LSM to secure such
systems. Other researchers also try to enhance the storage
system to provide the integrity of the provenance data. For
example, [41] suggests using an isolated versioning system –
working at the disk level – to store provenance; [38] develops
a storage system that allows repetitive reads but only a single
write to guarantee data integrity.
VIII. CONCLUSION
We develop ProTracer, a cost-effective provenance tracing
system that features the capabilities of alternating between
logging and unit-level taint propagation, and event process-
ing through a lightweight kernel module and a sophisticated
concurrent user space daemon. Our evaluation results show
that ProTracer substantially improves the state-of-the-art. In
our experiments, it only generates 13MB audit log per day,
and 0.84GB(Server)/2.32GB(Client) in 3 months with less than
7% overhead, while the generated logs do not lose any attack-
related information.
IX. ACKNOWLEDGMENTS
Log integrity: In [19], researchers proposed a real-time
server/client audit model. The client sends integrity-assured
log to the server side for post-mortem detection of infections.
We thank the anonymous reviewers for their constructive
comments. This research was supported, in part, by DARPA
under contract FA8650-15-C-7562, NSF under award 1409668,
14
ONR under contract N000141410468, and Cisco Systems
under an unrestricted gift. Any opinions, ﬁndings, and con-
clusions in this paper are those of the authors only and do not
necessarily reﬂect the views of our sponsors.
REFERENCES
[1] Apache benchmark. https://httpd.apache.org/docs/2.2/programs/ab.html.
[2]
Irs phishing email. https://www.spamstopshere.com/blog/spam-news/
alert-irs-scam-email-links-malicious-code.
[3] Proftp backdoor. http://www.osvdb.org/69562.
[4] Student
hacker.
http://www.hufﬁngtonpost.com/2014/03/05/
student-hacking n 4907344.html.
[5] Tracepoints.
https://www.kernel.org/doc/Documentation/trace/
tracepoints.txt.
[6] BATES, A., BUTLER, K. R., AND MOYER, T. Take only what you
need: Leveraging mandatory access control policy to reduce provenance
storage costs. TaPP’15.
[7] BATES, A., TIAN, D. J., BUTLER, K. R., AND MOYER, T. Trustworthy
whole-system provenance for the linux kernel. Usenix Security’15.
[8] BOSMAN, E., SLOWINSKA, A., AND BOS, H. Minemu: The world’s
fastest taint tracker. RAID’11.
[9] BRAUN, U., GARFINKEL, S., HOLLAND, D. A., MUNISWAMY-
REDDY, K.-K., AND SELTZER, M. I. Issues in automatic provenance
collection. In Provenance and annotation of data.
[10] CHOW, J., PFAFF, B., GARFINKEL, T., CHRISTOPHER, K., AND
ROSENBLUM, M. Understanding data lifetime via whole system
simulation. USENIX SSYM’04.
[11] CLAUSE, J., LI, W., AND ORSO, A. Dytan: A generic dynamic taint
analysis framework. ISSTA ’07.
[12] EFSTATHOPOULOS, P., KROHN, M., VANDEBOGART, S., FREY, C.,
ZIEGLER, D., KOHLER, E., MAZIERES, D., KAASHOEK, F., AND
MORRIS, R. Labels and event processes in the asbestos operating
system. SOSP ’05.
[13] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J., MC-
DANIEL, P., AND SHETH, A. N. Taintdroid: An information-ﬂow track-
ing system for realtime privacy monitoring on smartphones. OSDI’10.
[14] ENCK, W., GILBERT, P., HAN, S., TENDULKAR, V., CHUN, B.-G.,
COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH, A. N. Taintdroid:
an information-ﬂow tracking system for realtime privacy monitoring
on smartphones. ACM Transactions on Computer Systems (TOCS) 32
(2014).
[15] GEHANI, A., AND TARIQ, D. Spade: Support for provenance auditing
in distributed environments. Middleware’12.
[16] GOEL, A., PO, K., FARHADI, K., LI, Z., AND DE LARA, E. The taser
intrusion recovery system. SOSP ’05.
[17] GROTH, P., MILES, S., FANG, W., WONG, S. C., ZAUNER, K. P., AND
MOREAU, L. HPDC’05.
[18] GUO, Z., ZHOU, D., LIN, H., YANG, M., LONG, F., DENG, C., LIU,
C., AND ZHOU, L. G2: A graph processing system for diagnosing
distributed systems. USENIX ATC’11.
[19]
[20]
[21]
JAKOBSSON, M., AND JUELS, A. Server-side detection of malware
infection. NSPW ’09.
JEE, K., PORTOKALIDIS, G., KEMERLIS, V. P., GHOSH, S., AUGUST,
D. I., AND KEROMYTIS, A. D. A general approach for effciently
accelerating software-based dynamicdata ﬂow tracking on commodity
hardware. NSDI’12.
JIANG, X., WALTERS, A., XU, D., SPAFFORD, E. H., BUCHHOLZ, F.,
AND WANG, Y.-M. Provenance-aware tracing ofworm break-in and
contaminations: A process coloring approach. ICDCS ’06.
[22] KANG, M. G., MCCAMANT, S., POOSANKAM, P., AND SONG, D.
Dta++: Dynamic taint analysis with targeted control-ﬂow propagation.
NDSS’11.
[23] KEMERLIS, V. P., PORTOKALIDIS, G., JEE, K., AND KEROMYTIS,
A. D. Libdft: Practical dynamic data ﬂow tracking for commodity
systems. VEE ’12.
[25] KING, S. T., AND CHEN, P. M. Backtracking intrusions. SOSP ’03.
[26] KING, S. T., MAO, Z. M., LUCCHETTI, D. G., AND CHEN, P. M.
Enriching intrusion alerts through multi-host causality. NDSS’05.
[27] LEE, K. H., ZHANG, X., AND XU, D. High accuracy attack provenance
via binary-based execution partition. NDSS’13.
[28] LEE, K. H., ZHANG, X., AND XU, D. Loggc: garbage collecting audit
log. CCS ’13.
[29] MA, S., LEE, K. H., KIM, C. H., RHEE, J., ZHANG, X., AND XU, D.
Accurate, low cost and instrumentation-free security audit logging for
windows. ACSAC ’15.
[30] MASRI, W., PODGURSKI, A., AND LEON, D. Detecting and debugging
insecure information ﬂows. ISSRE ’04.
[31] MCCAMANT, S., AND ERNST, M. D. Quantitative information ﬂow as
network ﬂow capacity. PLDI ’08.
[32] MILES, S., GROTH, P., BRANCO, M., AND MOREAU, L. The require-
ments of recording and using provenance in e-science experiments.
Journal of Grid Computing.
[33] MUNISWAMY-REDDY, K.-K., BRAUN, U., HOLLAND, D. A.,
MACKO, P., MACLEAN, D., MARGO, D., SELTZER, M., AND
SMOGOR, R. Layering in provenance systems. USENIX ATC’09.
[34] MUNISWAMY-REDDY, K.-K., HOLLAND, D. A., BRAUN, U., AND
SELTZER, M. I. Provenance-aware storage systems. Usenix ATC ’06.
[35] NEWSOME, J., AND SONG, D. X. Dynamic taint analysis for automatic
detection, analysis, and signaturegeneration of exploits on commodity
software. NDSS’05.
[36] POHLY, D. J., MCLAUGHLIN, S., MCDANIEL, P., AND BUTLER, K.
Hi-ﬁ: Collecting high-ﬁdelity whole-system provenance. ACSAC ’12.
[37] QIN, F., WANG, C., LI, Z., KIM, H.-S., ZHOU, Y., AND WU, Y. Lift:
A low-overhead practical information ﬂow tracking system for detecting
security attacks. MICRO 39.
[38] SION, R. Strong worm. ICDCS’08.
[39] SITARAMAN, S., AND VENKATESAN, S. Forensic analysis of ﬁle
system intrusions using improved backtracking. IWIA ’05.
[40] SONG, D., BRUMLEY, D., YIN, H., CABALLERO, J., JAGER, I.,
KANG, M. G., LIANG, Z., NEWSOME, J., POOSANKAM, P., AND
SAXENA, P. Bitblaze: A new approach to computer security via binary
analysis. ICISS ’08.
[41] SUNDARARAMAN, S., SIVATHANU, G., AND ZADOK, E. Selective
versioning in a secure disk system. Usenix Security’08.
[42] TAK, B. C., TANG, C., ZHANG, C., GOVINDAN, S., URGAONKAR,
B., AND CHANG, R. N. vpath: precise discovery of request processing
paths from black-box observations of thread and network activities.
USENIX ATC’09.
[43] VASUDEVAN, A., QU, N., AND PERRIG, A. Xtrec: Secure real-time
execution trace recording on commodity platforms. HICSS’11.
[44] XIE, Y., FENG, D., TAN, Z., CHEN, L., MUNISWAMY-REDDY, K.-K.,
LI, Y., AND LONG, D. D. A hybrid approach for efﬁcient provenance
storage. CIKM ’12.
[45] XIE, Y., MUNISWAMY-REDDY, K.-K., FENG, D., LI, Y., AND LONG,
D. D. Evaluation of a hybrid approach for efﬁcient provenance storage.
ACM Transactions on Storage (TOS) 9, 4 (2013), 14.
[46] XIE, Y., MUNISWAMY-REDDY, K.-K., LONG, D. D., AMER, A.,
FENG, D., AND TAN, Z. Compressing provenance graphs. TaPP’11.
[47] XU, K., XIONG, H., WU, C., STEFAN, D., AND YAO, D. Data-
provenance veriﬁcation for secure hosts. Dependable and Secure
Computing, IEEE Transactions on 9, 2 (2012).
[48] YIN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA, E.
Panorama: capturing system-wide information ﬂow for malware detec-
tion and analysis. CCS ’07.
[49] ZELDOVICH, N., BOYD-WICKIZER, S., KOHLER, E., AND
MAZI `ERES, D. Making information ﬂow explicit in histar. OSDI ’06.
[50] ZHANG, H., YAO, D. D., AND RAMAKRISHNAN, N. Detection of
stealthy malware activities with trafﬁc causality and scalable triggering
relation discovery. ACSAC’14.
[51] ZHANG, M., ZHANG, X., ZHANG, X., AND PRABHAKAR, S. Tracing
lineage beyond relational operators. VLDB ’07.
[24] KIM, T., WANG, X., ZELDOVICH, N., AND KAASHOEK, M. F. Intru-
[52] ZHU, N., AND CHIUEH, T.-C. Design, implementation, and evaluation
sion recovery using selective re-execution. OSDI’10.
of repairable ﬁle service. DSN’13.
15