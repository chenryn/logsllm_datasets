### Executing Interpreters Inside Enclaves

To execute an interpreter inside an enclave, we must address the fact that enclaves cannot perform system calls. Many scripts rely on system calls for networking and file system operations, which are essential for their correct execution.

Initially, it might seem necessary to modify the source code of each interpreter. While this is possible, it is tedious and not scalable if we aim to support multiple interpreters. Fortunately, most interpreters are dynamically linked to standard C libraries. By statically linking the interpreter with a modified version of `libc`, we can avoid modifying the interpreter itself. The challenge then shifts to modifying how system calls are invoked in `libc` so that we can statically link our modified `libc` with the enclave code and execute it inside the enclave.

Identifying the points of system call invocation at the function level in `libc` would be cumbersome. For example, both `printf` and `fprintf` invoke the `write` system call. Manually examining all standard library code, identifying functions that invoke system calls, and adding a bridge function for each of these functions would require significant effort. Therefore, a more systematic approach is needed. We found that in the `musl-libc` implementation, all system calls are invoked from a central location rather than independently. By directly patching the centralized system call code, we can avoid the need to examine and patch all `libc` functions.

Specifically, we add a shim layer atop the existing system call invocation point in `musl-libc`. At this shim layer, based on the system call number, we invoke the corresponding bridge function (the ocall wrappers) and execute the system call outside the enclave. The interpreter can now be statically linked with our modified C library and executed inside the enclave.

Our Trusted Module also needs to decrypt the script. The decryption key is passed by the client through a secure channel. After decryption, the script can be executed. Given that the enclave does not trust the OS in our threat model, we cannot rely on the return values from system calls, as a malicious OS could return arbitrary values. This is a known class of attacks called Iago attacks. To defend against this, we insert verification code inside the enclave to check the system call return values, as has been done in Haven. For example, for a `read` system call, the return value contains the number of bytes read. By checking that the return value is not larger than the `count` argument, we can verify that the return value is within a legal range.

### Evaluation

We have implemented ScriptShield. In this section, we present the evaluation results. Our performance experiments were conducted on a 14.04.1-Ubuntu system with a 4-core Intel Core i7-6700 CPU running at 3.40GHz, 64GiB memory, and 1Gbit/s Ethernet Connection I219-LM, using the latest Intel SDK and SGX driver. We set up two environments for running our benchmarks: (1) natively and (2) under ScriptShield. We measured the execution time using the OS clock outside of the enclave. Specifically, we started the clock outside the enclave, executed a script inside the enclave, and then stopped the clock to calculate the total execution time.

We evaluated ScriptShield using three popular cross-platform scripting languages: Lua, JavaScript (using the MuJS interpreter), and Squirrel. No modifications to the interpreter source code are required when porting it to run in our enclave. The steps involved are: (1) adding an ecall as an entry point to call the interpreter, (2) modifying the interpreter makefiles to statically link `musl-libc`, and (3) modifying the enclave makefiles to integrate the statically linked interpreter into the enclave and generate the final `enclave.so` with the client’s hard-coded public key.

Since ScriptShield is compatible with legacy code, we can directly run unmodified existing scripting language benchmarks to evaluate the performance impact of ScriptShield when running the interpreter inside the enclave. We selected the following benchmark scripts for each tested interpreter:

- **Lua**: Our dataset includes 5 standard benchmarks used in the Lua language evaluation.
- **MuJS**: MuJS is a lightweight JavaScript interpreter. We used benchmarks from the Duktape performance tests, grouped into 18 sets.
- **Squirrel**: Squirrel is a Lua-like language with a C-like syntax, typically embedded in a host application. We ran 15 sample benchmarks.

**Results:**

- **MuJS**: Figure 2 shows the percentage overhead of running MuJS benchmarks in ScriptShield compared to native execution. The overheads are reasonable, with some benchmarks showing higher overhead due to short runtimes.
- **Lua**: Figure 3 shows the percentage overhead of running Lua programs in ScriptShield. The overhead for most benchmarks is reasonable, except for `k-nucleotide`, where the high overhead is due to the short runtime.
- **Squirrel**: Figure 4 shows the percentage overhead of running Squirrel benchmarks in ScriptShield. The overheads appear high due to the very short runtimes of the benchmarks.

### Limitations and Future Work

ScriptShield has several limitations. Currently, it only supports applications written purely in scripting languages and does not directly support applications with interpreters depending on native components. Porting efforts to support native components are left for future work.

We have ported three interpreters so far. While we do not modify the interpreter source, recompiling and statically linking it with our modified `musl-libc` involves significant engineering effort. Future work will investigate automatic compilation dependency resolution and makefile patching to automate this process.

We have implemented bridge functions and ocalls for 60 commonly used system calls. We plan to add support for the remaining system calls in future work.

### Related Work

**Protecting Applications with SGX:**

- **Haven [4]**: Ports a Windows library OS to SGX, achieving shielded execution of unmodified legacy applications but with a large TCB.
- **Panoply [20]**: Provides a micro-container isolating data and code with SGX but requires changes to the application code.
- **Scone [2]**: Isolates Docker containers running on a public cloud using SGX enclaves.
- **Ryoan [11]**: Protects secret data in a distributed sandbox using hardware enclaves.
- **SGX-Elide [3]**: Protects the secrecy of SGX code by enabling dynamic updates.
- **Glamdring [15]**: Automatically partitions applications into trusted and untrusted parts.
- **TrustJS [8]**: Explores using SGX to protect JavaScript but requires script modifications and does not provide a general execution framework.

**SGX Attacks and Defenses:**

- **Controlled-Channel Attack [23]**: A malicious OS infers secrets by observing page fault patterns.
- **Higher Resolution Side Channels [9]**: Exploit timer interrupts and cache misses.
- **ROP [13] and Branch Shadowing [14]**: Other attack vectors.
- **T-SGX [18]**: Leverages transactional memory and compiler extensions to detect attack attempts.
- **Other Solutions [19, 7]**: Mask page fault patterns by determining memory access behavior or using large pages.

### Conclusion

We have presented ScriptShield, a backward-compatible application execution framework that ensures the confidentiality and integrity of scripts by executing scripting language interpreters inside SGX enclaves. We have implemented a prototype and tested it with Lua, JavaScript, and Squirrel. Our experimental results show that ScriptShield does not introduce noticeable overhead. Running interpreters inside SGX offers benefits such as signing the trusted enclave once while allowing the execution of arbitrary scripts and transparent protection of script confidentiality and integrity.

### Acknowledgement

We thank the anonymous reviewers for their helpful comments. This work was supported in part by NSF grants 1750809, 1718084, 1834213, 1834215, and 1834216.

### References

[1] “Intel Software Guard Extensions Programming Reference,” https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf, Oct. 2014.
[2] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. Stillwell et al., “Scone: Secure Linux Containers with Intel SGX.” in OSDI, 2016.
[3] E. Bauman, H. Wang, M. Zhang, and Z. Lin, “SGXElide: Enabling Enclave Code Secrecy via Self-Modification,” in CGO. ACM, 2018, pp. 75–86.