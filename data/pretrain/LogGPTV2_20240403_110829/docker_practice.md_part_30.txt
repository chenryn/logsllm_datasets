&& wget -O /usr/local/bin/gosu.asc "https://github.com/tiano
n/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-archi
tecture).asc" \
&& export GNUPGHOME="$(mktemp -d)" \
&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B4
2F6819007F00F88E364FD4036A9C25BF357DD4 \
&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/b
in/gosu \
&& rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc \
&& chmod +x /usr/local/bin/gosu \
&& gosu nobody true
ENV REDIS_VERSION 3.2.3
ENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-3
.2.3.tar.gz
ENV REDIS_DOWNLOAD_SHA1 92d6d93ef2efc91e595c8bf578bf72baff397507
# for redis-sentinel see: http://redis.io/topics/sentinel
RUN buildDeps='gcc libc6-dev make' \
&& set -x \
&& apt-get update && apt-get install -y $buildDeps --no-inst
all-recommends \
&& rm -rf /var/lib/apt/lists/* \
&& wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL" \
&& echo "$REDIS_DOWNLOAD_SHA1 *redis.tar.gz" | sha1sum -c -
\
&& mkdir -p /usr/src/redis \
&& tar -xzf redis.tar.gz -C /usr/src/redis --strip-component
s=1 \
&& rm redis.tar.gz \
&& make -C /usr/src/redis \
&& make -C /usr/src/redis install \
368
Redis
&& rm -r /usr/src/redis \
&& apt-get purge -y --auto-remove $buildDeps
RUN mkdir /data && chown redis:redis /data
VOLUME /data
WORKDIR /data
COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]
EXPOSE 6379
CMD [ "redis-server" ]
369
Nginx
Nginx
基本信息
Nginx 是开源的高效的 Web 服务器实现，支持 HTTP、HTTPS、SMTP、POP3、
IMAP 等协议。
该仓库位于 https://hub.docker.com/_/nginx/ ，提供了 Nginx 1.0 ~ 1.11.x 各个版本
的镜像。
使用方法
下面的命令将作为一个静态页面服务器启动。
$ docker run --name some-nginx -v /some/content:/usr/share/nginx
/html:ro -d nginx
用户也可以不使用这种映射方式，通过利用 Dockerfile 来直接将静态页面内容放到
镜像中，内容为
FROM nginx
COPY static-html-directory /usr/share/nginx/html
之后生成新的镜像，并启动一个容器。
$ docker build -t some-content-nginx .
$ docker run --name some-nginx -d some-content-nginx
开放端口，并映射到本地的 8080 端口。
docker run --name some-nginx -d -p 8080:80 some-content-nginx
Nginx的默认配置文件路径为 /etc/nginx/nginx.conf ，可以通过映射它来使用
本地的配置文件，例如
370
Nginx
docker run --name some-nginx -v /some/nginx.conf:/etc/nginx/ngin
x.conf:ro -d nginx
使用配置文件时，为了在容器中正常运行，需要保持 daemon off; 。
Dockerfile
stable 版本
371
Nginx
FROM debian:jessie
MAINTAINER NGINX Docker Maintainers "PI:EMAIL"
ENV NGINX_VERSION 1.10.1-1~jessie
RUN apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573
BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \
&& echo "deb http://nginx.org/packages/debian/ jessie nginx"
>> /etc/apt/sources.list \
&& apt-get update \
&& apt-get install --no-install-recommends --no-install-sugg
ests -y \
ca-certificates \
nginx=${NGINX_VERSION} \
nginx-module-xslt \
nginx-module-geoip \
nginx-module-image-filter \
nginx-module-perl \
nginx-module-njs \
gettext-base \
&& rm -rf /var/lib/apt/lists/*
# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
&& ln -sf /dev/stderr /var/log/nginx/error.log
EXPOSE 80 443
CMD ["nginx", "-g", "daemon off;"]
1.11.x 版本
372
Nginx
FROM debian:jessie
MAINTAINER NGINX Docker Maintainers "PI:EMAIL"
ENV NGINX_VERSION 1.11.1-1~jessie
RUN apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573
BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \
&& echo "deb http://nginx.org/packages/mainline/debian/ jess
ie nginx" >> /etc/apt/sources.list \
&& apt-get update \
&& apt-get install --no-install-recommends --no-install-sugg
ests -y \
ca-certificates \
nginx=${NGINX_VERSION} \
nginx-module-xslt \
nginx-module-geoip \
nginx-module-image-filter \
nginx-module-perl \
nginx-module-njs \
gettext-base \
&& rm -rf /var/lib/apt/lists/*
# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
&& ln -sf /dev/stderr /var/log/nginx/error.log
EXPOSE 80 443
CMD ["nginx", "-g", "daemon off;"]
373
WordPress
WordPress
基本信息
WordPress 是开源的 Blog 和内容管理系统框架，它基于 PhP 和 MySQL。
该仓库位于 https://hub.docker.com/_/wordpress/ ，提供了 WordPress 4.x 版本的
镜像。
使用方法
启动容器需要 MySQL 的支持，默认端口为 80 。
$ docker run --name some-wordpress --link some-mysql:mysql -d wo
rdpress
启动 WordPress 容器时可以指定的一些环境参数包括：
-e WORDPRESS_DB_USER=... 缺省为 “root”
-e WORDPRESS_DB_PASSWORD=... 缺省为连接 mysql 容器的环境变量
MYSQL_ROOT_PASSWORD 的值
-e WORDPRESS_DB_NAME=... 缺省为 “wordpress”
-e WORDPRESS_AUTH_KEY=... , -e WORDPRESS_SECURE_AUTH_KEY=... ,
-e WORDPRESS_LOGGED_IN_KEY=... , -e WORDPRESS_NONCE_KEY=... , -
e WORDPRESS_AUTH_SALT=... , -e WORDPRESS_SECURE_AUTH_SALT=... ,
-e WORDPRESS_LOGGED_IN_SALT=... , -e WORDPRESS_NONCE_SALT=...
缺省为随机 sha1 串
Dockerfile
4.0 版本
FROM debian:wheezy
RUN apt-get update && apt-get install -y \
374
WordPress
apache2 \
curl \
libapache2-mod-php5 \
php5-curl \
php5-gd \
php5-mysql \
rsync \
wget \
&& rm -rf /var/lib/apt/lists/*
RUN a2enmod rewrite
# copy a few things from apache's init script that it requires t
o be setup
ENV APACHE_CONFDIR /etc/apache2
ENV APACHE_ENVVARS $APACHE_CONFDIR/envvars
# and then a few more from $APACHE_CONFDIR/envvars itself
ENV APACHE_RUN_USER www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_RUN_DIR /var/run/apache2
ENV APACHE_PID_FILE $APACHE_RUN_DIR/apache2.pid
ENV APACHE_LOCK_DIR /var/lock/apache2
ENV APACHE_LOG_DIR /var/log/apache2
ENV LANG C
RUN mkdir -p $APACHE_RUN_DIR $APACHE_LOCK_DIR $APACHE_LOG_DIR
# make CustomLog (access log) go to stdout instead of files
# and ErrorLog to stderr
RUN find "$APACHE_CONFDIR" -type f -exec sed -ri ' \
s!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g; \
s!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g; \
' '{}' ';'
RUN rm -rf /var/www/html && mkdir /var/www/html
VOLUME /var/www/html
WORKDIR /var/www/html
ENV WORDPRESS_VERSION 4.0.0
ENV WORDPRESS_UPSTREAM_VERSION 4.0
# upstream tarballs include ./wordpress/ so this gives us /usr/s
375
WordPress
rc/wordpress
RUN curl -SL http://wordpress.org/wordpress-${WORDPRESS_UPSTREAM
_VERSION}.tar.gz | tar -xzC /usr/src/
COPY docker-apache.conf /etc/apache2/sites-available/wordpress
RUN a2dissite 000-default && a2ensite wordpress
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
EXPOSE 80
CMD ["apache2", "-DFOREGROUND"]
4.5 版本
FROM php:5.6-apache
RUN a2enmod rewrite expires
# install the PHP extensions we need
RUN apt-get update && apt-get install -y libpng12-dev libjpeg-de
v && rm -rf /var/lib/apt/lists/* \
&& docker-php-ext-configure gd --with-png-dir=/usr --with-jp
eg-dir=/usr \
&& docker-php-ext-install gd mysqli opcache
# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
RUN { \
echo 'opcache.memory_consumption=128'; \
echo 'opcache.interned_strings_buffer=8'; \
echo 'opcache.max_accelerated_files=4000'; \
echo 'opcache.revalidate_freq=60'; \
echo 'opcache.fast_shutdown=1'; \
echo 'opcache.enable_cli=1'; \
} > /usr/local/etc/php/conf.d/opcache-recommended.ini
VOLUME /var/www/html
376
WordPress
ENV WORDPRESS_VERSION 4.5.3
ENV WORDPRESS_SHA1 835b68748dae5a9d31c059313cd0150f03a49269
# upstream tarballs include ./wordpress/ so this gives us /usr/s
rc/wordpress
RUN curl -o wordpress.tar.gz -SL https://wordpress.org/wordpress
-${WORDPRESS_VERSION}.tar.gz \
&& echo "$WORDPRESS_SHA1 *wordpress.tar.gz" | sha1sum -c - \
&& tar -xzf wordpress.tar.gz -C /usr/src/ \
&& rm wordpress.tar.gz \
&& chown -R www-data:www-data /usr/src/wordpress
COPY docker-entrypoint.sh /entrypoint.sh
# grr, ENTRYPOINT resets CMD now
ENTRYPOINT ["/entrypoint.sh"]
CMD ["apache2-foreground"]
377
Node.js
Node.js
基本信息
Node.js是基于 JavaScript 的可扩展服务端和网络软件开发平台。
该仓库位于 https://hub.docker.com/_/node/ ，提供了 Node.js 0.10 ~ 6.3.x 各个版
本的镜像。
使用方法
在项目中创建一个 Dockerfile。
FROM node:0.10-onbuild
# replace this with your application's default port
EXPOSE 8888
然后创建镜像，并启动容器。
$ docker build -t my-nodejs-app
$ docker run -it --rm --name my-running-app my-nodejs-app
也可以直接运行一个简单容器。
$ docker run -it --rm --name my-running-script -v "$(pwd)":/usr/
src/myapp -w /usr/src/myapp node:0.10 node your-daemon-or-script
.js
Dockerfile
0.10 版本
378
Node.js
FROM buildpack-deps
RUN apt-get update && apt-get install -y \
ca-certificates \
curl
# verify gpg and sha256: http://nodejs.org/dist/v0.10.31/SHASUMS
256.txt.asc
# gpg: aka "Timothy J Fontaine (Work) "
RUN gpg --keyserver pgp.mit.edu --recv-keys 7937DFD2AB06298B2293
C3187D33FF9D0246406D
ENV NODE_VERSION 0.10.32
RUN curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE
_VERSION-linux-x64.tar.gz" \
&& curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/SHASUMS2
56.txt.asc" \