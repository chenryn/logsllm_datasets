title:Dynamic Fault Tree Analysis Using Input/Output Interactive Markov
Chains
author:Hichem Boudali and
Pepijn Crouzen and
Mari&quot;elle Stoelinga
Dynamic Fault Tree analysis using Input/Output Interactive Markov Chains∗
Hichem Boudali
Pepijn Crouzen
§,†
Mari¨elle Stoelinga
PI:EMAIL
PI:EMAIL
PI:EMAIL
University of Twente, Department of Computer Science,
§
P.O. Box 217, 7500 AE Enschede, the Netherlands.
Saarland University, Department of Computer Science,
D-66123 Saarbr¨ucken, Germany.
Abstract
Dynamic Fault Trees (DFT) extend standard fault trees
by allowing the modeling of complex system components’
behaviors and interactions. Being a high level model and
easy to use, DFT are experiencing a growing success among
reliability engineers. Unfortunately, a number of issues still
remains when using DFT. Brieﬂy, these issues are (1) a lack
of formality (syntax and semantics), (2) limitations in mod-
ular analysis and thus vulnerability to the state-space ex-
plosion problem, and (3) lack in modular model-building.
We use the input/output interactive Markov chain (I/O-IMC)
formalism to analyse DFT. I/O-IMC have a precise seman-
tics and are an extension of continuous-time Markov chains
with input and output actions. In this paper, using the I/O-
IMC framework, we address and resolve issues (2) and (3)
mentioned above. We also show, through some examples,
how one can readily extend the DFT modeling capabilities
using the I/O-IMC framework.
KEYWORDS: Fault tree, Interactive process, Markov
chain, compositional aggregation, modularity.
1. Introduction
Dynamic fault trees (DFT) [10, 7, 19] extend stan-
dard (or static) fault trees (FT) [20] by deﬁning additional
gates called dynamic gates. These gates allow the model-
ing of complex system components’ behaviors and inter-
actions which is far superior to the modeling capabilities
∗
†
This research has been partially funded by the Netherlands Or-
ganisation for Scientiﬁc Research (NWO) under FOCUS/BRICKS grant
number 642.000.505 (MOQS); the EU under grant number IST-004527
(ARTIST2); and by the DFG/NWO bilateral cooperation programme un-
der project number DN 62-600 (VOSS2).
The majority of this work was done while the author was at the Uni-
versity of Twente.
of standard FT. Like standard FT, dynamic fault trees are
a high-level formalism for computing reliability measures
of computer-based systems, such as the probability that the
system fails during its mission time. For over a decade now,
DFT have been experiencing a growing success among re-
liability engineers. Unfortunately, a number of issues still
remains when using DFT. Most notably the following three
issues are a matter of concern: (1) the DFT semantics is
rather imprecise and the lack of formality has, in some
cases, led to undeﬁned behavior and misinterpretation of
the DFT model. (2) DFT lack modular analysis. That is,
even though stochastically-independent sub-modules exist
in a certain DFT module (speciﬁcally those whose top-node
is a dynamic gate), these sub-modules cannot be solved
separately and still get an exact solution. Consequently, a
DFT model, which is typically analyzed by ﬁrst convert-
ing it into a Markov chain (MC), becomes vulnerable to the
state space explosion problem. (3) DFT also lack modular
model-building, i.e. there are some rather severe restrictions
on the type of allowed inputs to certain gates (e.g. inputs to
spare gates and dependent events of functional dependency
gates have to be basic events), which greatly diminish the
modeling ﬂexibility and power of DFT.
DFT are comprised of various elements1: Basic events,
static gates (AND, OR, and K/M gates), and dynamic gates
(functional dependency, priority AND, and spare gates).
Each of these elements is viewed as a process moving from
one state to another. States denote either the operation or
the failure of the element. Each element, or process, also
interacts (communicates) with its environment by respond-
ing to certain input signals and producing output signals.
These elements2 could also possess a purely stochastic be-
havior by allowing (in a probabilistic fashion) the passage
of time prior to moving to another state. In the remainder
1Also called components.
2At this point only the basic events.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007of the paper, we assume this passage of time to be governed
by an exponential probability distribution (thus behaving as
a Markovian process). Moving from one state to another is
therefore caused by either an input or output transition or
due to a Markovian transition.
Given the nature of DFT elements we have used the in-
put/output interactive Markov chain (I/O-IMC) formalism
[4] to model the semantics of DFT. In fact, I/O-IMC aug-
ment continuous-time Markov chains with input and out-
put actions and a clear separation between Markovian tran-
sitions and interactive (involving input or output actions)
transitions is made. Furthermore, I/O-IMC have a precise
and formal semantics and have proved to be a suitable and
natural way to model DFT elements.
I/O-IMC are an example of a stochastic extension to a
process algebra. These stochastic process algebras have re-
cently gained popularity in performance modeling and anal-
ysis due to their compositional aggregation approach. We
refer the reader to [14] for case studies on the application
of the compositional aggregation approach to the model-
ing and analysis of real systems. Compositional aggrega-
tion is a technique to build an I/O-IMC by composing, in
successive iterations, a number of elementary and smaller
I/O-IMC and reducing (i.e. aggregating) the state-space of
the generated I/O-IMC as the composition takes place (cf.
Section 3).
Issue (1), mentioned above, has been addressed in [4]
where a formal syntax and semantics for DFT have been
deﬁned. The formal syntax is derived by characterizing the
DFT as a directed acyclic graph. The formal DFT semantics
is described in terms of I/O-IMC, and provides a rigorous
basis for the analysis of DFT. In fact, each DFT element
has a corresponding elementary I/O-IMC. This semantics
is fully compositional, that is, the semantics of a DFT is
expressed in terms of the semantics of its elements. This
enables an efﬁcient analysis of DFT through compositional
aggregation to produce a single I/O-IMC, on which we can
then carry out performance analysis. Earlier work on for-
malizing DFT can be found in [8], where DFT are speciﬁed
using the Z formal speciﬁcation language. The main differ-
ence between the formal speciﬁcation in [8] and the formal
speciﬁcation used in this paper is that in our framework we
use a process algebra-like formalism (i.e. I/O-IMC) which
allows us to use the well-deﬁned concept of compositional
aggregation which helps us to combat the state-space ex-
plosion problem. In fact, this notion of compositional ag-
gregation is not present in [8] and the state-space explosion
problem is not addressed or mitigated whatsoever.
We address issue (2) by showing, using the I/O-IMC
framework, how the DFT analysis becomes greatly mod-
ular compared to current state of the art DFT analysis tech-
niques. In particular, we demonstrate, through an example
system, how an I/O-IMC corresponding to a certain (inde-
pendent) dynamic module3 can be reused in any larger DFT
model.
We also tackle issue (3) and lift two previously enforced
restrictions on DFT; namely, the restriction on spares and
functional dependency gates’ dependent events to be basic
events. In fact, in our framework it becomes possible to,
for instance, model a spare as a complex sub-system com-
prised of several basic events and gates. The use of (shared)
spares in DFT has always been somehow problematic [8].
In this paper, we carefully examine, clarify, and generalize
the concept of spare activation.
To summarize, we make the following contributions:
1. Illustrate, through a case study, the use of the I/O-IMC
framework for the analysis of DFT, and in particular
we show the beneﬁts of the compositional aggregation
approach.
2. Show the increased DFT modular analysis and the con-
cept of reuse of dynamic modules.
3. Extend the DFT modeling capabilities by allowing
complex spares (through the generalization of the con-
cept of activation) and complex functionally dependent
events.
4. Illustrate how readily one can deﬁne new DFT ele-
ments and provide 3 examples.
The remainder of the paper is organized as follows: In
Section 2 and Section 3, we introduce DFT and I/O-IMC
respectively. In Section 4, we show how a DFT is auto-
matically converted into a community of I/O-IMC and dis-
cuss non-determinism. In Section 5, we illustrate the DFT
modular analysis. In Section 6, we lift the restrictions on
the spare and functional dependency (FDEP) gates. Finally,
in Section 7, we illustrate how one can readily extend the
modeling capabilities of DFT by augmenting or modifying
the set of elementary I/O-IMC models. Some of these ex-
tensions include mutually exclusive events and repair. We
conclude the paper and suggest future work in Section 8.
2. Dynamic fault trees
A fault tree model describes the system failure in terms
of the failure of its components. Standard FT are combi-
natorial models and are built using static gates (the AND,
the OR, and the K/M gates) and basic events (BE). A com-
binatorial model only captures the combination of events
and not the order of their occurrence. Combinatorial mod-
els become, therefore, inadequate to model today’s complex
dynamic systems. DFT introduce three novel modeling ca-
pabilities: (1) spare component management and allocation,
3Also called sub-system or sub-tree.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007(2) functional dependency, and (3) failure sequence depen-
dency. These modeling capabilities are realized using three
main dynamic gates4: The spare gate, the functional de-
pendency (FDEP) gate, and the priority AND (PAND) gate.
Figure 1 depicts the three dynamic gates.
The PAND gate fails when all its inputs fail and fail from
left to right (as depicted on the ﬁgure) order. The spare gate
has one primary input and one or more alternate inputs (i.e.
the spares). The primary input is initially powered on and
when it fails, it is replaced by an alternate input. The spare
gate fails when the primary and all the alternate inputs fail
(or are unavailable). A spare could also be shared among
multiple spare gates.
In this conﬁguration, when a spare
is taken by a spare gate, it becomes unavailable (i.e. essen-
tially seen as failed) to the rest of the spare gates. The FDEP
gate is comprised of a trigger event and a set of depen-
dent components. When the trigger event occurs, it causes
the dependent components to become inaccessible or unus-
able (i.e. essentially failed). The FDEP gate’s output is a
‘dummy’ output (i.e. it is not taken into account during the
calculation of the system’s failure probability). Along with
Output
Output
SPARE GATE
Trigger
event
Inputs
(a)
Primary
Spares
(b)
Dummy
output
FDEP
Dependent
events
(c)
Figure 1. Dynamic gates: (a) PAND, (b) spare, (c) FDEP.
static and dynamic gates, DFT also possess basic events,
which are leaves of the tree. A basic event usually repre-
sents a physical component having a certain failure proba-
bility distribution (e.g. exponential). A DFT element has
a number of operational or failed states. In the case of a
BE5, operational states could be further classiﬁed as dor-
mant or active states. A dormant state is a state where the
BE failure rate is reduced by a factor called the dormancy
factor α. An active state is a state where the BE failure rate
λ is unchanged. Depending on the value of α, we classify
BE as: cold BE (α = 0), hot BE (α = 1), and warm BE
(0 < α < 1). The dormant and active states of a BE cor-
respond to dormant and active modes of the physical com-
ponent. For instance, a spare tire of a car is initially in a
dormant mode and switches to an active mode when it is
ﬁxed on the car for use.
4A fourth gate called ‘Sequence Enforcing’ gate has also been deﬁned
in [10]; however, it turns out that this gate can be emulated using a cold
spare gate.
5Also a spare gate as we will see in Section 6.
Galileo DIFTree [11] was the ﬁrst package to introduce,
use, and analyze DFT. DIFTree uses a modular approach
to analyze a DFT. Indeed, the DFT is ﬁrst split into inde-
pendent static and dynamic modules, the modules are then
solved separately and each of them is replaced by a BE with
a constant failure probability. The modules’ solutions are
then combined to ﬁnd the overall system reliability. This
process is iterative as independent modules could be nested.
An independent module is dynamic if it contains at least
one dynamic gate, otherwise it is static. Static modules are
solved using binary decision diagrams and dynamic mod-
ules are solved by converting them into Markov chains.
Note that when an independent module is replaced by
a BE with a constant failure probability, some information
(i.e.
the shape) of the module’s failure distribution is lost
since it is replaced by a single failure probability value.
Moreover, since any dynamic gate requires the knowledge
of the entire failure probability density functions of their in-
puts, solving an independent module and replacing it by a
BE with a constant failure probability is only possible if the
module is part of a larger static (and not dynamic) module.
This constraint, which is linked to issue (2) mentioned in the
Introduction, makes DFT far less modular (cf. Section 5).
3. Input/output interactive Markov chains