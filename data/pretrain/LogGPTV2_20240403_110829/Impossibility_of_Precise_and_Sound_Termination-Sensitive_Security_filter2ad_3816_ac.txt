intuitively an observer at
with I when A is ﬁnite. Now we come to the deﬁnition of
TSNI.
l cannot
distinguish two executions on I1 and I2 where I1|l = I2|l
if either these two executions both terminate and consume the
same visible input events and generates the same visible output
events, or these two executions both diverge. When they both
diverge, there are no constraints on consumed input events or
generated output events.
Deﬁnition IV.1 (TSNI
[1]). A state Q is termination-
sensitively noninterferent (denoted by Q ∈ TSNI) if for all
l, for all I1 and I2
2|l ∧ O1|l = O2|l,
1|l = I
I1|l = I2|l∧ﬁn(A1) =⇒ ﬁn(A2)∧I
(cid:2)
(cid:2)
where Q(I1)(cid:2) (cid:10)I
2, O2(cid:11), Q(I1)(cid:2) A1, and
1, O1(cid:11), Q(I2)(cid:2) (cid:10)I
(cid:2)
Q(I2)(cid:2) A2.
(cid:2)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
1: input x from chH
2: if x > 1 then
3:
4: else
5:
input x from chL
skip
1: output 1 to chL
2: input x from chH
3: if x > 1 then
4:
5: else skip
while 1 do skip
(a) Program 1
(b) Program 2
Fig. 2: Non-TSNI Programs
output 0 to chL
1: input x from chH
2: if x > 1 then
3:
4: else
5:
6: while 1 do skip
output 1 to chL
(a) Program 3
output 0 to chL
1: input x from chH
2: if x > 1 then
3:
4: else
5:
6:
skip
output 0 to chL
(b) Program 4
Fig. 3: TSNI Programs
Example IV.1 (Non-TSNI Programs). Examples of programs
that are not TSNI are presented in Fig. 2, where the levels of
chH and chL are respectively H and L, and L (cid:3) H.
• Program 1 does not generate any output event. However,
this program is not TSNI since depending on the input
event from chH, an input event from chL may be con-
sumed. Indeed, we consider I1 = chH(2) : chL(0) and
I2 = chH(0) : chL(0). On I1, the input consumed by the
(cid:2)
1(chL) = chL(0). On I2, the input
program is I
(cid:2)
(cid:2)
2(chL) = []. We
2 where I
consumed by the program is I
can easily check that I1|L = I2|L but I
1|L (cid:6)= I
(cid:2)
(cid:2)
1 where I
2|L.
(cid:2)
• Program 2 always sends chL(1) to chL. However, this
program is not TSNI since its termination behavior de-
pends on the input event from chH. Indeed, the program
on I1 = chH(2) diverges since the while loop is
executed, while it terminates on I2 = chH(0).
Example IV.2 (TSNI Program). Examples of programs that
are TSNI are presented in Fig. 3, where the levels of chH and
chL are respectively H and L, and L (cid:3) H. Program 3 always
diverges. Therefore, this program is TSNI. Program 4 is TSNI
since regardless of the input events on chH, the output events
generated by the program are always chL(0) and the program
always terminates.
B. Indirect Termination-Sensitive Noninterference
TSNI presented in the previous section assumes that an
observer at l can observe consumed input events and generated
output events only when the execution terminates. However,
this assumption may be violated [11]. In addition, TSNI
assumes that given an execution, an observer at l can decide
whether there is a step of computation or not (even in the
case where there is no visible event). However, if the observer
can only observe visible events to him, this assumption is too
strong.
Therefore, we propose Indirect Termination-Sensitive Non-
interference (ITSNI) that takes the problems mentioned above
into account. Regarding ITSNI, two executions appear to be
the same to an observer at l if they consume the same visible
input events and generate the same visible output events at l.
501
Deﬁnition IV.2. A state Q satisﬁes indirect
termination-
sensitive noninterference (denoted by Q ∈ ITSNI) if for all
l, for all I1 and I2,
I1|l = I2|l =⇒ I
1|l = I
(cid:2)
2|l ∧ O1|l = O2|l,
(cid:2)
where Q(I1)(cid:2) (cid:10)I
1, O1(cid:11) and Q(I2)(cid:2) (cid:10)I
(cid:2)
2, O2(cid:11).
(cid:2)
ITSNI does not imply TSNI since ITSNI does not put
restrictions on termination of programs. A program that is
ITSNI but not TSNI can be found in Example IV.4. TSNI does
not imply ITSNI either since TSNI does not have constraints
on diverging executions. A program that is TSNI but not ITSNI
can be found in Example IV.3.
Example IV.3 (Non-ITSNI Program). Program 3 in Fig. 3
(which is a TSNI program) is not ITSNI since the output
events sent to chL depend on the input events from chH.
Program 1 in Fig. 2 is not ITSNI either since as described
in Example IV.1, the consumption of an input event from chL
depends on conﬁdential input event on chH.
Example IV.4 (ITSNI Program). We can easily check that
Program 4 in Fig. 3 is ITSNI. As described in Example IV.1,
Program 2 in Fig. 2 is not TSNI since the termination
behavior of this program depends on the input event from chH.
However, this program is ITSNI because the output event sent
to chL is always chL(1).
V. ENFORCEMENT MECHANISM
Indistinguishability: Intuitively, an enforcement mecha-
nism is precise if the following holds: if the original state
already satisﬁes the policy, then the enforcement mechanism
must preserve the semantics of the original state [1], [8], [9],
[12]. In other words, if the original state is good, the behavior
of the state under the enforcement mechanism and the behavior
of the original state are indistinguishable.
Following [12], we require that
the indistinguishability
relation is an equivalence relation, and if Q1 and Q2 are
indistinguishable w.r.t. policy P (denoted by Q1
Q2), then
the policy is not able to distinguish them.
∼=P
∼=P
Q1
Q2 =⇒ (Q1 ∈ P ⇔ Q2 ∈ P)
In addition, we argue that indistinguishability should be
deﬁned based on what can be observed by a normal user (as
opposed to an attacker). For TSNI, a normal user can decide
whether an execution is still in progress. For terminated execu-
tions, he can also observe all input events consumed and output
events generated. Hence, two states are indistinguishable w.r.t.
TSNI if on any input, both of them either diverge, or converge
and must consume the same input events and generate the same
output events. For ITSNI, since a normal user cannot observe
whether there is a step of execution or not, two states are
indistinguishable w.r.t. ITSNI if on any input, they consume
the same input events and generate the same output events.
The deﬁnitions of indistinguishability relations of TSNI and
(cid:2)
ITSNI are as below. In the deﬁnition, we write Q(I) (cid:2)M
, O(cid:11) or Q(I)(cid:2)M A when Q is a state of a program whose
(cid:10)I
transition relation is (cid:2)M .
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
Deﬁnition V.1 (Indistinguishability of TSNI). Two states Q1
∼=T S
and Q2 are indistinguishable w.r.t TSNI (denoted by Q1
Q2) if for all I,
(cid:3)
ﬁn(A1) ∧ ﬁn(A2) ∧ I
where Q1(I)(cid:2)M1
(cid:10)I
and Q2(I)(cid:2)M2 A2.
(cid:4) ∨
(cid:4)
(cid:3)
2 ∧ O1 = O2
(cid:2)
(cid:2)
1 = I
inf(A1) ∧ inf(A2)
2, O2(cid:11), Q1(I)(cid:2)M1 A1
1, O1(cid:11), Q2(I)(cid:2)M2
(cid:10)I
,
(cid:2)
(cid:2)
(cid:2)
(cid:2)
1 = I
1, O1(cid:11), and Q2(I)(cid:2)M2 (cid:10)I
Deﬁnition V.2 (Indistinguishability of ITSNI). Two states Q1
∼=IT S
and Q2 are indistinguishable w.r.t ITSNI (denoted by Q1
(cid:2)
Q1(I)(cid:2)M1 (cid:10)I
Q2) if for all I, it follows that O1 = O2 and I
2, where
2, O2(cid:11).
(cid:2)
We can check that ∼=T S and ∼=IT S are equivalence relations.
As proven in Lemma V.1 and Lemma V.2, our deﬁnitions of
indistinguishability relations satisfy the condition that related
states cannot be distinguished by policy. Hence, ∼=T S and
∼=IT S satisfy all constraints for indistinguishability relation.
∼=T S Q2 =⇒ (Q1 ∈ TSNI ⇔ Q2 ∈ TSNI).
Lemma V.1. Q1
Proof. From deﬁnitions of TSNI and ∼=T S.
Lemma V.2. Q1
Proof. From deﬁnitions of ITSNI and ∼=IT S.
∼=IT S Q2 =⇒ (Q1 ∈ ITSNI⇔ Q2 ∈ ITSNI).
Enforcement mechanism: As in §IV, we deﬁne enforce-
ment mechanisms on states, not on the whole programs. In the
below deﬁnition, the deﬁnition of precision is based on ∼=P
.
Deﬁnition V.3. An enforcement mechanism EM of a policy
P is a total and recursive function from states to states.
An enforcement mechanism is said to be sound, respectively
precise, if it satisﬁes:
• Soundness: ∀Q, EM(Q) ∈ P,
∼=P
• Precision: ∀Q ∈ P : Q
EM(Q).
A. Enforcement mechanism of TSNI
It is worth noting that our deﬁnition of precision for TSNI
does not take into account the order of events. Furthermore, a
program may generate output events before it terminates. Even
with these differences, the result in Section II still applies.
Theorem V.1. There is no sound and precise enforcement
mechanism for TSNI.
Proof. We consider a complete language that satisﬁes Deﬁni-
tion III.1 s.t.: (1) there is only one channel; (2) a program in
the language must consume an integer number from a channel
at the beginning of the execution and it can only send an
integer number to a channel right before its termination (if we
use the syntax of the language presented in §III, programs are
(cid:2); output e to ch, where there
of the form input x from ch; P
(cid:2)); and (3) there is only
is no input and output command in P
one initial state. Since there is only one initial state, this initial
state can be considered as a program.
We have that the restricted language described here and the
language in Section II are equivalent (they are both complete,
502
programs are deterministic, and a program consumes an inte-
ger number and may generate an integer number).
We now consider the setting where the lattice has two levels:
L and H and L (cid:3) H, and the channel in the restricted
language is at H (notice that the restricted language has only
one channel). For programs in the restricted language, under
our setting, TSNI is actually TS deﬁned in Deﬁnition II.2.
Suppose that
there is a sound and precise enforcement
mechanism for TSNI in the complete language without any re-
striction. Then there must be a sound and precise enforcement
mechanism for TSNI in the restricted language. Since there is
a sound and precise enforcement mechanism for TSNI in the
restricted language, we have a sound and precise enforcement
mechanism for TSNI in the setting above. In other words, there
is a sound and precise enforcement mechanism for TS.
that
As proven in Theorem II.1, there is no enforcement mecha-
nism for TS. Hence, there is no sound and precise enforcement
mechanism for TSNI.
Remark V.1. Notice that
the proof of Theorem V.1 does
not depend on the equality between low streams,
is
the indistinguishability criterion in noninterference policies.
Hence, our proof generalizes to other more general forms of
noninterference where the indistiguishability criterion is based
on equivalence relations like the ones presented in Section 3
of [3] thus capturing declassiﬁcation policies [13], [14].
Remark V.2. TSNI in Deﬁnition IV.1 and in Theorem V.1
does not put any constraint on diverging executions since it
assumes that an observer at l can only observe consumed
input events and generated output events when executions
terminate. This assumption may be violated [11]. Thus, we can
strengthen TSNI by further requiring that diverging executions
on equivalent inputs at l must have the same visible events
at l. W.r.t. this strengthened version of TSNI, Program 3 in
Fig. 3 is not a good program. By using the similar reasoning
in the proof of Theorem V.1, we can also prove that there
is no sound and precise enforcement mechanism for the
strengthened version of TSNI.
VI. SECURE MULTI-EXECUTION
Secure multi-execution (SME) was presented in [1] by
Devriese and Piessens. The basic idea of SME is that SME
executes several local executions (i.e. copies of the original
program), each corresponding to a security level and carefully
handles input events and output events of these local execu-
tions. Before presenting the semantics of SME, we introduce
some auxiliary notations.
A waiting input W is a function from channels to input
event queues. We abuse the notation and use [] for the empty
queue. A non-empty input event queue is of the form i.K,
where i is at the head of the queue and will be consumed
ﬁrst. Given a queue K and an input event i, the result of
appending i to K is K.i.
Semantics of local execution: A state of a local execution
is of the form (cid:10)P, μ, W(cid:11)l. A state (cid:10)P, μ, W(cid:11)l
is a
at
terminated state if P is skip. The semantics of local executions
l
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
LASSIGN
(cid:2)x := e, μ, W(cid:3)l
v = μ(e)
(cid:2)
(cid:2)E (cid:2)skip, μ[x (cid:4)→ v], W(cid:3)l
LIF1
μ(e) = v
(cid:2)if e then P1 else P2, μ, W(cid:3)l
v = 1
(cid:2)
(cid:2)E (cid:2)P1, μ, W(cid:3)l
μ(e) = v
LIF2
(cid:2)if e then P1 else P2, μ, W(cid:3)l
v (cid:6)= 1
(cid:2)
(cid:2)E (cid:2)P2, μ, W(cid:3)l
LWHILE1
v = 1
μ(e) = v