  $key1: $value1 
  $key2: $value2 
```
Namespace, name, label, and annotation are located in the metadata section of object spec. Selector is located in the spec section of selector-supported resources, such as ReplicationController, service, ReplicaSet, and Deployment.
# 分离舱
Pod 是 Kubernetes 中最小的可部署单元。它可以包含一个或多个容器。大多数时候，我们只需要一个容器。在某些特殊情况下，同一 pod 中包含多个容器，如 Sidecar 容器([http://blog . kubernetes . io/2015/06/the-distributed-system-toolkit-patterns . html](http://blog.kubernetes.io/2015/06/the-distributed-system-toolkit-patterns.html))。同一个 pod 中的容器运行在同一个节点上的共享上下文中，共享网络命名空间和共享卷。Pod 也被设计成凡人。当一个 PODS 因为某些原因死亡，比如在缺乏资源时被 Kubernetes 控制器杀死，它不会自己恢复。相反，Kubernetes 使用控制器来为我们创建和管理 PODS 的期望状态。
我们可以使用`kubectl explain `通过命令行获取资源的详细描述。它将显示资源支持的字段:
```
// get detailed info for `pods` 
# kubectl explain pods 
DESCRIPTION: 
Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts. 
FIELDS: 
   metadata   
     Standard object's metadata. More info: 
     http://releases.k8s.io/HEAD/docs/devel/api- 
     conventions.md#metadata 
   spec   
     Specification of the desired behavior of the pod. 
     More info: 
     http://releases.k8s.io/HEAD/docs/devel/api-
     conventions.md#spec-and-status 
   status   
     Most recently observed status of the pod. This data 
     may not be up to date. 
     Populated by the system. Read-only. More info: 
     http://releases.k8s.io/HEAD/docs/devel/api-
     conventions.md#spec-and-status 
   apiVersion   
     APIVersion defines the versioned schema of this 
     representation of an 
     object. Servers should convert recognized schemas to 
     the latest internal 
     value, and may reject unrecognized values. More info: 
     http://releases.k8s.io/HEAD/docs/devel/api-
     conventions.md#resources 
   kind   
     Kind is a string value representing the REST resource  
     this object represents. Servers may infer this from 
     the endpoint the client submits 
     requests to. Cannot be updated. In CamelCase. More 
         info: 
     http://releases.k8s.io/HEAD/docs/devel/api-
     conventions.md#types-kinds 
```
在下面的示例中，我们将展示如何在一个 pod 中创建两个容器，并演示它们如何相互访问。请注意，这既不是一个有意义的，也不是一个经典的 Sidecar 模式的例子。这些用于非常具体的场景。以下只是我们如何访问 pod 中其他容器的一个示例:
```
// an example for creating co-located and co-scheduled container by pod
# cat 3-2-1_pod.yaml
apiVersion: v1
kind: Pod
metadata:
 name: example
spec:
 containers:
 - name: web
 image: nginx
 - name: centos
 image: centos
 command: ["/bin/sh", "-c", "while : ;do curl http://localhost:80/; sleep 10; done"]
```
![](img/00036.jpeg)
Containers inside a Pod are visible via localhost
该规范将创建两个容器，`web`和`centos`。Web 是一个 nginx 容器([https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/))。默认情况下暴露容器端口`80`，由于 centos 与 nginx 共享相同的上下文，在 [http://localhost:80/](http://localhost:80/) 中做 curl 时，应该可以访问 nginx。
接下来，使用`kubectl create`命令启动 pod `-f`选项，让 kubectl 知道如何使用文件中的数据:
```
// create the resource by `kubectl create` - Create a resource by filename or stdin
# kubectl create -f 3-2-1_pod.yaml
pod "example" created  
```
Adding `--record=true` at the end of the `kubectl` command when we create the resources. Kubernetes will add the latest command while creating or updating this resource. Therefore, we won't forget which resources are created by which spec.
我们可以使用`kubectl get `命令获取对象的当前状态。在这种情况下，我们使用`kubectl get pods`命令。
```
// get the current running pods 
# kubectl get pods
NAME      READY     STATUS              RESTARTS   AGE
example   0/2       ContainerCreating   0          1s
```
Add `--namespace=$namespace_name` could access the object in different namespaces. The following is an example to check the pods in the `kube-system` namespace, which is used by system-type pods:
`# kubectl get pods --namespace=kube-system`
`NAME READY STATUS RESTARTS AGE`
`kube-addon-manager-minikube 1/1 Running 2 3d`
`kube-dns-196007617-jkk4k 3/3 Running 3 3d`
`kubernetes-dashboard-3szrf 1/1 Running 1 3d`
Most of the objects have their short names, which come in handy when we use `kubectl get ` to list their status. For example, pods could be called po, services could be called svc, and deployment could be called deploy. Type `kubectl get` to know more.
我们的示例 Pod 的状态是`ContainerCreating`。在这个阶段，Kubernetes 已经接受了请求，试图安排 pod 并拉下映像。零个容器当前正在运行。稍等片刻后，我们可以再次获得状态:
```
// get the current running pods
# kubectl get pods
NAME      READY     STATUS    RESTARTS   AGE
example   2/2       Running   0          3s  
```
我们可以看到两个容器当前正在运行。正常运行时间为三秒。使用`kubectl logs  -c `可以得到容器的`stdout`，类似于`docker logs `:
```
// get stdout for centos
# kubectl logs example -c centos
Welcome to nginx!
...
```
pod 中的 Centos 通过 localhost 与 nginx 共享相同的网络！Kubernetes 与 pod 一起创建了一个网络容器。网络容器的功能之一是在一个容器内的容器之间转发流量。我们将在[第 5 章](05.html#3O56S0-6c8359cae3d4492eb9973d94ec3e4f1e)、*网络与安全*中了解更多信息。
If we specify labels in pod spec, we could use the `kubectl get pods -l ` command to get the pods that are satisfying the requirements. For example, `kubectl get pods -l 'tier in (frontend, backend)'`. Additionally, if we use `kubectl pods -owide`, it will list down which pod is running on which nodes.
我们可以使用`kubectl describe  `来获取资源的详细信息:
```
// get detailed information for a pod
# kubectl describe pods example
Name:    example
Namespace:  default
Node:    minikube/192.168.99.100
Start Time:  Fri, 09 Jun 2017 07:08:59 -0400
Labels:    
Annotations:  
Status:    Running
IP:    172.17.0.4
Controllers:  
Containers:  
```
在这一点上，我们知道这个 pod 在哪个节点上运行，在 minikube 中，我们只得到一个节点，所以不会有任何区别。在真实的集群环境中，知道哪个节点对故障排除有用。我们没有为它关联任何标签、注释和控制器:
```
web:
 Container ID:    
 docker://a90e56187149155dcda23644c536c20f5e039df0c174444e 0a8c8  7e8666b102b
   Image:    nginx
   Image ID:    docker://sha256:958a7ae9e56979be256796dabd5845c704f784cd422734184999cf91f24c2547
   Port:
   State:    Running
      Started:    Fri, 09 Jun 2017 07:09:00 -0400
   Ready:    True
   Restart Count:  0
   Environment:  
   Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from 
      default-token-jd1dq (ro)
     centos:
     Container ID:  docker://778965ad71dd5f075f93c90f91fd176a8add4bd35230ae0fa6c73cd1c2158f0b
     Image:    centos
     Image ID:    docker://sha256:3bee3060bfc81c061ce7069df35ce090593bda584d4ef464bc0f38086c11371d
     Port:
     Command:
       /bin/sh
       -c
       while : ;do curl http://localhost:80/; sleep 10; 
       done
      State:    Running
       Started:    Fri, 09 Jun 2017 07:09:01 -0400
      Ready:    True
      Restart Count:  0
      Environment:  
      Mounts:
          /var/run/secrets/kubernetes.io/serviceaccount from default-token-jd1dq (ro)
```
在容器部分，我们将看到这个容器中包含两个容器。它们的状态、映像和重启计数:
```
Conditions:
 Type    Status
 Initialized   True
 Ready   True
 PodScheduled   True
```
一个 Pod 有一个`PodStatus`，它包括一个表示为`PodConditions`的阵列图。`PodConditions`可能的键是`PodScheduled`、`Ready`、`Initialized`和`Unschedulable`。值将为真、假或未知。如果没有相应地创建 pod，`PodStatus`将为我们提供哪个零件出现故障的简要视图:
```
Volumes:
 default-token-jd1dq:
 Type:  Secret (a volume populated by a Secret)
 SecretName:  default-token-jd1dq
 Optional:  false
```
Pod 与一个服务帐户相关联，该帐户为运行 pod 的进程提供标识。它由应用编程接口服务器中的服务帐户和令牌控制器控制。
它会将只读卷装载到包含 API 访问令牌的 pod 中`/var/run/secrets/kubernetes.io/serviceaccount`下的每个容器中。Kubernetes 创建一个默认服务帐户。我们可以使用`kubectl get serviceaccounts`命令来列出它们:
```
QoS Class:  BestEffort
Node-Selectors:  
Tolerations:  
```
我们还没有给这个 Pod 分配任何选择器。服务质量意味着资源服务质量。容错用于限制一个节点可以使用多少个 PODS。我们将在[第 8 章](08.html#5J99O0-6c8359cae3d4492eb9973d94ec3e4f1e)*集群管理:*中了解更多信息
```
Events:
 FirstSeen  LastSeen  Count  From      SubObjectPath    Type     
  Reason    Message
  ---------  --------  -----  ----      -------------    ------ 
  --  ------    -------
  19m    19m    1  default-scheduler        Normal    Scheduled  
  Successfully assigned example to minikube
  19m    19m    1  kubelet, minikube  spec.containers{web}  
  Normal    Pulling    pulling image "nginx"
  19m    19m    1  kubelet, minikube  spec.containers{web}  
  Normal    Pulled    Successfully pulled image "nginx"
  19m    19m    1  kubelet, minikube  spec.containers{web}  
  Normal    Created    Created container with id 
  a90e56187149155dcda23644c536c20f5e039df0c174444e0a8c87e8666b102b
  19m    19m    1  kubelet, minikube  spec.containers{web}   
  Normal    Started    Started container with id  
 a90e56187149155dcda23644c536c20f5e039df0c174444e0a8c87e86 
 66b102b
  19m    19m    1  kubelet, minikube  spec.containers{centos}  
  Normal    Pulling    pulling image "centos"
  19m    19m    1  kubelet, minikube  spec.containers{centos}  
  Normal    Pulled    Successfully pulled image "centos"
  19m    19m    1  kubelet, minikube  spec.containers{centos}  
  Normal    Created    Created container with id 
 778965ad71dd5f075f93c90f91fd176a8add4bd35230ae0fa6c73cd1c 
 2158f0b
  19m    19m    1  kubelet, minikube  spec.containers{centos}  
  Normal    Started    Started container with id 
 778965ad71dd5f075f93c90f91fd176a8add4bd35230ae0fa6c73cd1c 
 2158f0b 
```
通过查看事件，我们可以知道 Kubernetes 运行节点的步骤。首先，scheduler 将任务分配给一个节点，这里它被命名为 minikube。然后 minikube 上的 kubelet 开始拉第一个映像，并相应地创建一个容器。然后 kubelet 拉下第二个容器并运行。
# 复制集和复制控制器
PODS 不是自愈的。当 Pod 遇到故障时，它不会自行恢复。**副本集** ( **RS** )和**副本控制器** ( **RC** )因此进场。复制集和复制控制器都将确保指定数量的复制盒始终在集群中启动和运行。如果一个 Pod 因任何原因崩溃，复制集和复制控制器将请求启动一个新的 Pod 。
最新的 Kubernetes 之后，ReplicationController 逐渐被 ReplicaSet 取代。它们有相同的概念，只是对 pod 选择器使用不同的要求。复制控制器使用基于等式的选择器要求，而复制集使用基于集合的选择器要求。复制集通常不是由用户创建的，而是由 Kubernetes Deployments 对象创建的，而复制控制器是由用户自己创建的。在本节中，我们将首先通过示例来解释 RC 的概念，这更容易理解。然后我们会在最后引入副本集。
![](img/00037.jpeg)
ReplicationController with desired count 2
假设我们想要创建一个`ReplicationController`对象，期望计数为 2。这意味着我们将永远有两个 Pod 在服务。在我们为复制控制器编写规范之前，我们必须先决定 pod 模板。Pod 模板类似于 pod 的规格。在复制控制器中，元数据部分中的标签是必需的。复制控制器使用容器选择器来选择它所管理的容器。标签允许复制控制器区分是否所有匹配选择器的 Pod 都在轨道上。
在本例中，我们将创建两个带有标签`project`、`service`和`version`的 PODS，如上图所示:
```
// an example for rc spec
# cat 3-2-2_rc.yaml
apiVersion: v1
kind: ReplicationController
metadata:
 name: nginx
spec:
 replicas: 2
 selector:
 project: chapter3
 service: web
 version: "0.1"
 template:
 metadata:
 name: nginx
 labels:
 project: chapter3
 service: web
 version: "0.1"
 spec:
 containers:
 - name: nginx
 image: nginx
 ports:
 - containerPort: 80
// create RC by above input file
# kubectl create -f 3-2-2_rc.yaml
replicationcontroller "nginx" created  
```
然后我们可以使用`kubectl`获取当前的 RC 状态:
```
// get current RCs
# kubectl get rc
NAME      DESIRED   CURRENT   READY     AGE
nginx     2         2         2         5s  
```
它显示我们有两个想要的 Pod ，我们目前有两个 Pod ，两个 Pod 准备好了。我们现在有多少个 PODS？