1 
16 
xt,5 
0 
4 
4 
10 
4 
3 
16 
0 
4 
5 
13 
20 
4 
3 
xt,6 
3 
0 
7 
13 
0 
15 
2 
21 
13 
18 
20 
4 
0 
15 
Case  3) uj  receives  two  corrupted  values 
,
3,1x
2,1x
2,1x =1  and 
3,1x =7  instead  of  the  correct  residues  x1,2=2  and 
x1,3=14. Applying the Chinese Remainder Theorem to 
decode  the  residues  (x1,1,
,  x1,4,  x1,5,  x1,6)
yields the illegitimate number 9242941, which means 
that the error has been detected. As shown in Table 3, 
decoding any possible 5-tuple of the received residues 
yields  an 
the  error 
multiplicity exceeds the error correcting capability of 
the  given  RRNS,  and 
record  cannot  be 
reconstructed.  Observe  that,  decoding  the  4-tuples 
(x1,1,
,  x1,4)  and  (x1,1, x1,4,  x1,5,  x1,6)  yield 
18061  and  16997,  respectively,  which  are  both 
legitimate,  and  uj  cannot  discriminate  between  the 
two values. 
illegitimate  number,  hence 
2,1x
the 
3,1x
,
Case  4) uj  fails  to  receive  x1,1,  and  it  receives  the 
3,1x =13 instead of the correct 
corrupted residue digit 
residue  x1,3=14.  According  to  theorems  1  and  2,  the 
RRNS under consideration can detect but not correct a 
single  error  combined  with  one  erasure.  In  fact, 
decoding (x1,2,
, x1,4, x1,5, x1,6) yields 3058517: an 
illegitimate number, hence the error can be detected. 
On  the  other  hand,  decoding  the  4-tuples  (x1,2, x1,4,
x1,5,  x1,6)  and  (
,  x1,4,  x1,5,  x1,6)  yield  16997  and 
42343, respectively, which are both legitimate, and uj
cannot  discriminate  between  the  two  values.  Hence 
the error cannot be corrected. 
3,1x
3,1x
6.  Discussion and Conclusions 
We  have  introduced  a  distributed  data  storage  for 
mobile,  wireless  networks  based  on  a  peer-to-peer 
paradigm.  The  distributed  storage  provides  support  to 
create  and  to  share  files  under  a  read-only  model,  and 
the  same 
ensures  at 
time  data  confidentiality  and 
dependability  by  encoding  files  in  a  Redundant  Residue 
Number  System.  More  specifically  files  are  partitioned 
into  records  and  each  record  in  encoded  separately  as 
(h+r)-tuples  of  data  residues  using  h+r  moduli.  In  turn, 
the  residues  are  distributed  among  the  mobiles  in  the 
network.  Dependability  is  ensured  since  data  can  be 
reconstructed  in  the  presence  of  up  to  s≤r  residue 
erasures,  combined  with  up  to  (cid:172)
  corrupted  residues. 
Data  confidentiality  is  ensured  since  recovering  the 
original information requires knowledge of the entire set 
of moduli. 
sr−
(cid:188)2
The  achievable  degrees  of  dependability  and  security 
are determined by the choice of the RRNS (that is, of the 
set of moduli). 
The  set  of  moduli  used  to  encode  the  files  also 
determines  the  storage  overhead.  In  fact,  let  us  consider 
files partitioned into records of b bits, and let m1,…,mh+r
be  the  (h+r)-tuple  of  the  moduli:  then  each  record  is 
encoded  into  h+r  residue  digits  which  account  for 
rh
=
1
(cid:170)
log
bits.  Recalling 
(cid:166) +
be 
M=m1⋅…⋅mh>2b,  and  that  mp>mp–1  for  each  p∈[2,h+r],  it 
follows  that  the  storage  efficiency  is  improved  if  the 
moduli  (which  must  be  pairwise prime)  as  close to  each 
other. This is easier to achieve with large moduli. 
that  must 
pm
(cid:186)
p
2
Several  optimizations  may  be  possible  in  some 
circumstances.  If  the  set  of  mobiles  hosting  the  residue 
digits  is  the  same  for  every  record,  identification  of 
mobiles  needs  not  to  be  replicated  in  every  record 
descriptor. If the error model excludes data corruption and 
only  erasures  are  expected,  the  number  of  redundant 
residues  should  simply  be  no  less  than  the  expected 
number  of  disconnected  or  failed  mobiles.  If  data 
confidentiality  is  not  an  issue,  the  set  of  moduli  (both 
redundant  and  not  redundant)  may  be  predefined  and 
publicly  disclosed.  The  mobiles  creating  new  files  need 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:04 UTC from IEEE Xplore.  Restrictions apply. 
Table 2. Case 2: decoding of the 5-tuples.  
5-tuples 
Decoded value 
Legitimate 
(x1,2, x1,3, x1,4, x1,5, x1,6)
(x1,1, x1,3, x1,4, x1,5, x1,6)
(x1,1, x1,2, x1,4, x1,5, x1,6)
(x1,1, x1,2, x1,3, x1,5, x1,6)
(x1,1, x1,2, x1,3, x1,4, x1,6) 
(x1,1, x1,2, x1,3, x1,4, x1,5)
1525084 
16997 
194419 
334489 
541549 
745039 
NO 
YES 
NO 
NO 
NO 
NO 
Table 3. Case 3: decoding of the 5-tuples.
5-tuples 
Decoded value 
Legitimate 
(x1,2, x1,3, x1,4, x1,5, x1,6)
(x1,1, x1,3, x1,4, x1,5, x1,6)
(x1,1, x1,2, x1,4, x1,5, x1,6)
(x1,1, x1,2, x1,3, x1,5, x1,6)
(x1,1, x1,2, x1,3, x1,4, x1,6)
(x1,1, x1,2, x1,3, x1,4, x1,5)
2779711 
194419 
1258951 
2099371 
1374661 
1442491 
NO 
NO 
NO 
NO 
NO 
NO 
only to select an appropriate subset of redundant moduli, 
as 
required 
required  degree  of 
dependability. 
to  achieve 
the 
least  k  residue  digits.  In  general 
In principle a record could be reconstructed also by a 
mobile which has guessed k<h moduli and has somehow 
received  at 
the 
correspondence  of  residue  digits  with  the  moduli  is 
unknown  to  the  malicious  mobile  which  should  then 
consider  all  possible  k-tuples  of  residues  in  association 
with  all  permutations  of the  available moduli.  Assuming 
that  the  correct  association  of  a  k-tuple  of  residues  with 
the k moduli is somehow guessed, the decoding procedure 
only  yield  an  integer  which  is  congruent  to  the  record. 
The 
recovered  by  adding  some 
(unknown)  multiple  of  the  product  of  some  of  the 
additional moduli.   
record  could  be 
Decoding  the  residues  in  this  way  leads  to  many 
legitimate  numbers,  and  it  may  be  very  difficult  to  
determine  the  right  one.  If  the  records  are  plain  ASCII 
encoding,  a  clue  may  be  provided  by  the  fact  that  most 
legitimate numbers do not correspond to ASCII encoding. 
However  data  confidentiality  could  be  still  enforced  by 
encrypting the record before the encoding with RRNS.
Similarly 
in 
to  other 
techniques  used 
internet 
applications, the proposed data storage could also be used 
to  speed  up  file  access.  This  issue  is  matter  of  ongoing 
studies.  Subjects  of  future  research  are  also  an  extended 
model  allowing  distribution  of  write  privileges,  accurate 
evaluation  of  the  performance  and  storage  overhead  and 
accurate analysis of the resilience of the encoding scheme 
based on RRNS in case of unauthorized access to the files. 
Acknowledgements 
The  authors  are  indebted  to  anonymous  referees  for 
constructive  criticisms  and  for  providing  additional 
reference to previous work.  
References 
[1]  W.  Diepstraten,  G.  Ennis,  and  P.  Berlanger,  “DFWMAC: 
Distributed Foundation Wireless Medium Access Control”,
IEEE Document P802.11-93/190, November 1993. 
[2]  L.M.  Feeney  and  M.  Nilsson,  “Investigating  the  Energy 
Consumption of a Wireless Network Interface in an Ad Hoc 
Networking  Environment”, Proc.  IEEE  20th  INFOCOM,
vol. 3, Anchorage AK, April 2001, pp. 1548 –1557. 
[3]  D. B. Johnson and D. A. Maltz, “Dynamic source routing in 
ad hoc wireless networks”, In Mobile Computing, edited by 
T. Imielinski and H. Korth, chapter 5, pp. 153-181. Kluwer 
Academic Publishers, 1996.  
[4]  C.  E.  Perkins  and  E.  M.  Royer,  “Ad-hoc  on-demand 
distance  vector  routing”, Proc.  IEEE  2nd  Workshop  on 
Mobile Computing Systems and Applications, New Orleans, 
LA, 1999, pp. 90-100. 
[5]  V.  Park  and  M.  S.  Corson,  “A  highly  adaptive  distributed 
routing  algorithm  for  mobile  wireless  networks”, Proc. 
IEEE  16th  INFOCOM,  Kobe,  Japan,  1997,  pp.  1405-1413, 
vol. 3. 
[6]  E.  K.  Lee  and  C.  A.  Thekkath,  “Petal:  Distributed  Virtual 
Disks”, Proc. 7th International Conference on Architectural 
Support 
for  Programming  Languages  and  Operating 
Systems, Cambridge, MA,1996, pp. 84-92. 
[7]  C.  A.  Thekkath,  T.  Mann,  and  E.  K.  Lee,  “Frangipani:  A 
Scalable  Distributed  File  System”, Proc.  ACM  17th
Symposium  on  Operating  Systems  Principles,  1997,  pp. 
224-237. 
[8]  Satyanarayanan,  M.;  Kistler,  J.J.;  Kumar,  P.;  Okasaki, 
M.E.;  Siegel,  E.H.;  Steere,  “Coda:  a  highly  available  file 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:04 UTC from IEEE Xplore.  Restrictions apply. 
system  for  a  distributed  workstation  environment”, IEEE 
Transactions  on  Computers,  vol.39  (4),  April  1990,  pp. 
447-459. 
[9]  L.  B.  Mummert,  M.  R.  Ebling,  and  M.  Satyanarayanan, 
“Exploiting  Weak  Connectivity  for  Mobile  File  Access”
Proc.  ACM  15th  Symposium  on  Operating  System 
Principles,  Copper  Mountain  Resort,  Colorado,  December 
1995, pp. 143-155. 
[10] T.  E.  Anderson,  M.  Dahlin,  J.  Neefe,  D.  Patterson,  D. 
Roselli,  and  R.  Wang,  “Serverless  Network  File  System”,
Proc.  ACM  15th  Symposium  on  Operating  System 
Principles,  Copper  Mountain  Resort,  Colorado,  December 
1995, pp. 109-126.  
[11] M.  O.  Rabin,  “Efficient  Dispersal  of  Information  for 
Security, Load Balancing, and Fault Tolerance”, Journal of 
the ACM, Vol.36, (2), April 1989, pp.335-348. 
[12] Y. Deswarte, L. Blain and J.C. Fabre, ”Intrusion Tolerance 
in Distributed Computing  Systems”, Proc.  IEEE  Symp. on 
Research  in  Security  and  Privacy,  Oakland,  CA,  1991, 
pp.110-121.   
[13] J.  C.  Fabre,  Y.  Deswarte,  and  B.  Randell.  “Designing 
secure  and  reliable  applications  using  fragmentation-
redundancy-scattering: an object-oriented approach”, Proc. 
1st  European  Dependable  Computing  Conference,  Berlin, 
Germany, October 1994, pp. 21–38. 
[14] D.  Malkhi,  “From  Byzantine  agreement 
to  practical 
survivability: a position paper”, Proc. 21st IEEE Symp. on 
Reliable Distributed Systems, 2002, pp. 374 –379. 
[15] A. V. Goldberg  and P. N. Yianilos, “Towards an Archival 
Intermemory”, Proc.  IEEE  Research  and  Technology 
Advances  in  Digital  Libraries  (ADL  98),  Santa  Barbara, 
CA, 1998, pp. 147-156. 
[16] Y. Chen, J. Edler, A. Goldberg, A. Gottlieb, S. Sobti, and P. 
Yianilos,  “A  Prototype 
Implementation  of  Archival 
Intermemory”, Proc.  ACM  4th  Conference  on  Digital 
libraries, Berkeley, CA, August 1999, pp. 28-37. 
[17] L. Rizzo, “Effective Erasure Codes for Reliable Computer 
Communication 
Computer 
Communication Review, vol. 27 (2), April  1997, pp. 24-36. 
Protocols”,
ACM 
[18] J.  Kubiatowicz  et.  Al.,  “OceanStore :  An  Architecture  for 
Global-Scale  Persistent  Storage”, Proc.  ACM  9th
Conference  on  Architectural  Support  for  Programming 
Languages  and  Operating  Systems,  Cambridge,  MA, 
November 2000, pp. 190 – 201. 
[19] J.  W.  Byers,  M.  Luby,  M.  Mitzenmacher,  “Accessing 
Multiple Mirror Sites in Parallel:  Using Tornado  Codes to 
Speed Up Downloads”, Proc. IEEE 18th INFOCOM, vol. 1, 
1999, pp. 275 –283. 
[20] F.  Barsi  and  P.  Maestrini,  “Error  Correcting  Properties  of 
Redundant  Residue  Number  Systems”, IEEE  Transactions 
on Computers, Vol. C-22 (3), March 1973, pp. 307-315. 
[21] N.  S.  Szabo  and  R.  I.  Tanaka,  Residue  Arithmetic  and  its 
Applications to Computer Technology, Mc Graw-Hill, New 
York, 1967. 
[22] D. Mandelbaum, “Error Correction in Residue Arithmetic”,
IEEE  Transactions  on  Computers,  Vol.  C-21  (6),  June 
1972, pp. 538-545. 
[23] D.  Mandelbaum,  “On  a  Class  of  Arithmetic  Codes  and 
Decoding  Algorithm”, IEEE  Transactions  on  Information 
Theory, vol. IT-21, January 1976, pp. 85-88. 
[24] F. Barsi and P. Maestrini, “Improved Decoding Algorithms 
for  Arithmetic  Residues  Codes”, IEEE  Transactions  on 
Information  Theory,  vol.  IT-24,  September  1978,  pp.  640-
643. 
[25] J.  D.  Sun  and  H.  Krishna,  “A  coding  theory  approach  to 
error  control  in  redundant  residue  number  systems.  II. 
Multiple  Error 
IEEE 
Transactions  on  Circuits  and  Systems  II:  Analog  and 
Digital  Signal  Processing,  Vol.  39  (1)  ,  January  1992, 
pp.18 –34. 
correction”,
detection 
and 
[26] M.  Soderstrand,  W.  K.  Jenkins,  G.  A.  Jullien  and  F.  J. 
Taylor, Residue Number  Arithmetic:  Modern  Applications 
in Digital Signal Processing, IEEE Press,NY, 1986. 
[27] A.  Salooma,  Public-Key  Cryptography,  2nd  edition, 
Springer, 1996. 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:04 UTC from IEEE Xplore.  Restrictions apply.