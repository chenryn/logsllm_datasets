# TWCTF 2018 escapeme writeup
|
##### 译文声明
本文是翻译文章，文章来源：blogspot.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
#
这是我之前见过最好的KVM题了。感谢@shift_crops出的这么吊的题，赛后还放了[源码](https://github.com/shift-crops/EscapeMe)。  
原题文件可以在[作者的repo](https://github.com/shift-crops/EscapeMe)里找到，包括4个二进制文件，两个文本文件和一个python脚本。  
我的CTF writeup repo里有我[三个exp](https://github.com/david942j/ctf-writeups/tree/master/twctf-2018/EscapeMe)。
## 介绍
题目有三个文件，`kvm.elf`, `kernel.bin`和`memo-static.elf`。
这个题里有三个flag，分别需要用户空间任意shellcode执行，内核空间执行和host模拟器(`kvm.elf`)执行。
shell里输入`./kvm.elf kernel.bin memo-static.elf`跑起来，会看到一个看起来比较常规的pwn题的样子：  
`kvm.elf` 是一个模拟器(和`qemu-system`一个作用)，装备了kvm，也就是一个在linux内核里实现的vm，用来做模拟。  
`kernel.bin`实现了一个非常小的内核，可以加载静态的ELF文件，以及有一些系统调用。  
`memo-static.elf`是一个实现备忘录系统的常规ELF文件。  
因为[作者的repo](https://github.com/shift-crops/EscapeMe/)里已经把源码放出来了，我这就不再介绍整个题了，就主要关注漏洞部分。
## EscapeMe1: 用户空间
`memo-static.elf`是一个静态链接的文件，checksec结果：  
其实对这个题来说checksec **基本没什么卵用**
，因为用来执行这个二进制文件的“内核”是由`kernel.bin`来实现的，其实根本就没开针对可执行文件的任何现代保护方法，导致的结果就是
**没有aslr** , **没有NX** (所有段都可执行),只要我们能控制rip就万事大吉了。
###  漏洞
bug非常容易看到，在`Alloc`里我们可以在堆上加一个memo，最多可以有0x28个字节的数据，之后我们可以有一次`Edit`各个memo的机会，edit的实现如下：
    read(0, memo[id].data, strlen(memo[id].data));
如果一个memo刚好有0x28个不带null字节的数据，那么这个地方就可以溢出到下一个chunk了。
###  利用
这题并不难，不过有个问题就是这个内存分配器不是我们在glibc里熟悉的那个`ptmalloc`。这里的`malloc/free`的实现其实和`ptmalloc`非常像，不过没有`tcache`和`fastbin`。
我们采用的方法是用伪造chunk进行`unlink`，如下图：
                       |-----------------------------|
                       |              |     0x31     |
             (*ptr) -> |              |     0x51     |  |     0x50     |     0x30     | <- 溢出，清除掉prev_in_use
                       |   CCCCCCCC   |   CCCCCCCC   |
                       |   CCCCCCCC   |   CCCCCCCC   |
                       |-----------------------------|
堆溢出发生在B块里，把下一块的size从`0x31`改为`0x30`，然后也构造一个`prev_size`(0x50)。
之后我们`Delete`(free)掉C块，这样就会试图把前块（伪造的）unlink掉。最后，本来指向堆的`*ptr`就可以指向`ptr - 0x18`。
之后，我们几乎就可以任意写了，但是因为我们必须写同样长度的数据，所以还是挺限制的。(回忆一下之前的`Edit`实现）。所以现在我们还不能直接修改栈上的数据（因为地址0x7fffffffxx比heap地址0x606000要长）.我在这其实卡了一会，最后用的方法：
  1. 把`top_chunk`（位于0x604098)指针修改为0x604038。 
    * 改为0x604038是因为这有个0x604040的值，所以在malloc的时候可以过size的check
  2. `Alloc`三个memo，第三个就会分配在`top_chunk`自己这，然后我们伪造`top_chunk`，使其指向一个栈地址
  3. 再`Alloc`一个memo，然后我们就可以分配在栈上了，之后就可以伪造返回地址了。
之后就是把rip改成准备好的shellcode，用来读下一步的shellcode，然后执行。
之后，我就又卡住了。[笑哭]
是，我现在是有任意代码执行了，但是flag呢？由于我觉得要继续pwn其他的部分（内核和模拟器部分），我们反正都得先做到代码执行，所以我就直接去尝试继续去利用，压根没去拿flag1.
之后我稍微逆了一下，发现在`kernel.bin`的实现里有一个0x10c8为调用号的特殊系统调用。这个系统调用把flag拷到了一个只写的页里：
    uint64_t sys_getflag(void){
      uint64_t addr;
      char flag[] = "Here is first flag : "FLAG1;
      addr = mmap_user(0, 0x1000, PROT_WRITE);
      copy_to_user(addr, flag, sizeof(flag));
      mprotect_user(addr, 0x1000, PROT_NONE);
      return addr;
    }
于是我们只需要调用一下这个系统调用，然后mprotect一下让这个页可以读，然后打印出来就可以了
    shellcode = asm('''
            mov rax, 0x10c8
            syscall
            mov rbp, rax
    ''' + shellcraft.mprotect('rbp', 0x1000, 6) + shellcraft.write(1, 'rbp', 60))
比赛期间我写的exploit可以在[我的github repo里](https://github.com/david942j/ctf-writeups/blob/master/twctf-2018/EscapeMe/exp1.py)找到。
其实我当时都没注意到NX没开，所以我是ROP，mmap了一个新page来放shellcode的。所以其实这个利用比我这讲的要麻烦一点。
Flag1:  
TWCTF{fr33ly_3x3cu73_4ny_5y573m_c4ll}
## EscapeMe2: 内核空间
`kernel.bin`包括三个部分：
  1. 实现了一个解析和加载用户程序的简单execve
  2. 实现了一个MMU表，用来把虚拟内存转换到物理内存。
  3. 实现了几个系统调用，包括：read, write, mmap, munmap, mprotect, brk, exit 和 get_flag(给EscapeMe1用的)
我和队友花了点时间来找内存相关操作，比如mmap, munmap和MMU的实现部分的漏洞，发现根本就不对。
我们的目标当然是做到内核层的shellcode任意执行。但是因为这个自己写的MMU表把虚拟地址是否能够由用户空间访问用一个bit标记了一下，所以我们不能直接用用户空间shellcode去重写kernel代码。
###  漏洞
根据hint，我们知道在内存管理部分是有个洞的。
bug是由在模拟器和内核间的abi不一致造成的。在模拟器里有一个自己实现的内存分配器，`palloc`和`pfree`，然后kernel把`pfree`用挫了。
在用户调`mmap(vaddr, len, perm)`系统调用的时候，内核会：
  1. hyper call调用`palloc(0, len)`，来获取一个物理地址`paddr`，长度为`len`。
  2. 设置好MMU表，把`vaddr`映射到`paddr`，并且把权限位设置好。设置期间可能会调用一些`palloc(0, 0x1000)`（这得看`vaddr`相应的entry是否已经创建了）
  3. 返回vaddr
而在用户调用`munmap(vaddr, len)`的时候，内核会：
  1. 把`vaddr`映射到`paddr`