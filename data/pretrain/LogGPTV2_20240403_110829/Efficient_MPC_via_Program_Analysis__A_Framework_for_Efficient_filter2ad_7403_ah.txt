distance to the query C (here m = 512, n = 4). This is a standard MPC benchmark whose assignment
is well known. It has a two pass structure. In the ﬁrst pass, arithmetic operations are highly parallelized.
Therefore, the ﬁrst pass is assigned the arithmetic protocol πA. The second pass computes the minimum and
uses (unamortized) comparison (GE) and multiplexing (MUX) operations. Both of these cost less in πY than
in πB. Therefore, the second pass is assigned πY. There is a single array that contains the output of the ﬁrst
pass, therefore, a single conversion happens before the second pass. Our assignment is the same as the well
known assignment.
3) Modular Exponentiation Two parties come together to compute base exp mod m (base, exp and mod are
all 32 bit unsigned integers) where one party holds base and the other party holds exp. This protocol accepts
no parallelization either and is assigned πY for the same reason as GCD. In the (simulated) WAN setting,
10 We have translated all HyCC’s publicly available benchmarks, except, due to time constraints, Gauss.
23
Table 3. Assignments Comparison with HyCC[B¨us+18] and ABY[DSZ15]. For easier notation, we use A, B, and Y
instead of πA, πB, and πY.
Simulated LAN
Simulated WAN
—
HyCC‡ ABY
—
—
Benchmark
OPA Solver
HyCC ABY
OPA Solver
—
Y
GCD
A+Y(4,3,1)* A+Y A+Y
Biometric Matching
Modular Exponentiation
Y
Private Set Intersection (PSI) B
Histogram
MiniONN (MNIST)
k-means
DB-Merge (500 + 500)
DB-Join (50 x 50)
DB-Join (25 x 200)
Cryptonets (Square)
Y
A+Y(4,3,1)* A+Y A+Y
—
—
A+B+Y Y
Y
B†
B+Y†
B
—
—
A+Y(3,21,1)* —
—
A+Y(3,21,1)* —
–
A+Y(65,49,7)* A+Y –
A+Y(65,49,7)* A+Y —
B+Y(2,34,2)* A+Y –
B+Y(2,34,2)* A+Y —
A+Y(5,21,4)* A+Y –
A+Y(5,21,4)* A+Y —
A+Y(6,27,2)* A+Y —
A+Y(6,27,2)* A+Y –
A+Y(6,37,3)* A+Y –
A+Y(6,37,3)* A+Y —
A+Y(24,15,1)* A
—
A+Y(24,15,1)* A
–
— Assignment not provided.
† ABY[DSZ15] does not specify which implementation of PSI it uses, therefore comparison is not meaningful.
‡ We use the assignment in HyCC[B¨us+18] that yields minimum total time (setup + online).
* The ﬁrst value in the triplet is # of operations in A or B depending on the assignment, A+Y or B+Y respectively.
The second value is # of operations in Y, the third value is # of conversions.
our assignment is the same as ABY’s [DSZ15]. In the (simulated) LAN seting, ABY [DSZ15] assigns a
combination of all three protocols using a faster MUX—whose implementation is not publicly available. Our
assignment, πY, which we computed using the standard implementation of MUX is their second best.
4) Private Set Intersection (PSI) A server holds set S1, a client holds set S2 (here sizes of S1 and S2 are 1024
and 32 respectively, elements are 32-bit unsigned integers). We use the straighftorward O(n2) protocol. It is
completely parallelizable and relies on NE and MUX operations. Looking at the cost tables, the amortized
NE and MUX are cheaper with πB, therefore the πB assignment.
5) Histogram This is a benchmark that we adapted from the PUMA benchmark suite of MapReduce pro-
grams. Parties jointly hold a movie ratings database of n reviewers and m movies (here n = 100, m = 100,
and all elements are unsigned integers). Together, they compute a histogram of average ratings of the re-
viewers. It has one loop with enough parallelization to justify a πA assignment, hence the optimal assignment
mixes πA and πY.
6) MiniONN [Liu+17] (MNIST) and Cryptonets [Gil+16] These are Machine Learning benchmarks. We
translated them from HyCC [B¨us+18]’s public code and ran them through our toolchain. MNIST is the
largest benchmark in terms of lines of code, and the most complex one. Several loops with arithmetic
operations are parallelizable, and those loops are assigned πA; all other operations are assigned πY. This
makes the summary assignment mixing πA and πY, the same as reported by HyCC [B¨us+18]. In Cryptonets
(RELU function being square), although there are only arithmetic operations, some of them are inside non-
parallel loops. Because our unamortized πY-costs are less than unamortized πA (which is standard in the WAN
setting), arithmetic operations in the non-parallel loops are assigned πY. This makes the full assignment a
mix of πA and πY. By comparison, the assignment from HyCC [B¨us+18] uses πA only; although HyCC does
not report the relevant costs, we believe that the reason for this assignment is that their cost of arithmetic
operations in πA is less than in πY.
7) k-means This is a clustering algorithm and a data mining benchmark. We took it from HyCC [B¨us+18]’s
public code and ran it through our toolchain. We did not detect parallelizable loops, which explains the lack
24
of assignments to πA. There is an OR operation (in the implementation of integer division) whose result is
accumulated for subsequent operations. This gets an assignment of πB. Our overall assignment is then a mix
of πB and πY. HyCC’s assignment is a mix of πA and πY. The reason we do not detect any πA assignments is
that we analyze the standard version, and we do not detect parallelization. HyCC analyzes a parallelizable
version, hence the πA assignment to arithmetic operations.
8) DB-Merge (500 + 500), DB-Join (50x50) and DB-Join (25 x 200) These are data analytics benchmarks,
also taken from HyCC [B¨us+18]. All of these contain some arithmetic operations inside parallelizable loops.
Therefore those operations are assigned πA. The overall assignment that optimizes total time in all three
cases is a mix of πA and πY, just as in HyCC.
8 Conclusions
We revisit the problem of optimal protocol assignment (OPA) for hybrid MPC which was conjectured to
be NP-hard. We prove that, modulo scheduling/parallelization, for the special case of two protocols, the
problem can in fact be solved in polynomial time. Our analysis is based on a framework we propose which
combines ideas and techniques from program analysis and MPC. We implemented our OPA solver and tested
it using simulated costs in a wide set of known benchmarks demonstrating its eﬃciency and quality. Our
treatment points to several open problems in programming language, MPC, and networks.
References
[Aho+06] Alfred V. Aho et al. Compilers: Principles, Techniques, and Tools (2Nd Edition). Boston, MA,
[Bea92]
USA: Addison-Wesley Longman Publishing Co., Inc., 2006. isbn: 0321486811.
Donald Beaver. “Eﬃcient Multiparty Protocols Using Circuit Randomization.” In: CRYPTO’91.
Ed. by Joan Feigenbaum. Vol. 576. LNCS. Santa Barbara, CA, USA: Springer, Heidelberg,
Germany, Aug. 1992, pp. 420–432. doi: 10.1007/3-540-46766-1_34.
[BK15]
[BGW88] Michael Ben-Or, Shaﬁ Goldwasser, and Avi Wigderson. “Completeness Theorems for Non-
Cryptographic Fault-Tolerant Distributed Computation (Extended Abstract).” In: 20th ACM
STOC. Chicago, IL, USA: ACM Press, May 1988, pp. 1–10. doi: 10.1145/62212.62213.
Niklas B¨uscher and Stefan Katzenbeisser. “Faster Secure Computation through Automatic Par-
allelization.” In: 24th USENIX Security Symposium, USENIX Security 15, Washington, D.C.,
USA, August 12-14, 2015. 2015, pp. 531–546. url: https://www.usenix.org/conference/
usenixsecurity15/technical-sessions/presentation/buescher.
[BLW08] Dan Bogdanov, Sven Laur, and Jan Willemson. “Sharemind: A Framework for Fast Privacy-
Preserving Computations.” In: ESORICS 2008. Ed. by Sushil Jajodia and Javier L´opez.
Vol. 5283. LNCS. M´alaga, Spain: Springer, Heidelberg, Germany, Oct. 2008, pp. 192–206. doi:
10.1007/978-3-540-88313-5_13.
A. Ben-David, N. Nisan, and B. Pinkas. “FairplayMP: a system for secure multi-party computa-
tion.” In: Proc. 15th ACM Conf. Comput. and Commun. Security (CCS). Alexandria, VA, USA:
ACM, 2008, pp. 257–266.
[BNP08]
[B¨us+18] Niklas B¨uscher et al. “HyCC: Compilation of Hybrid Protocols for Practical Secure Computa-
tion.” In: ACM CCS 18. Ed. by David Lie et al. Toronto, ON, Canada: ACM Press, Oct. 2018,
pp. 847–861. doi: 10.1145/3243734.3243786.
Paul Camion. “Characterization of Totally Unimodular Matrices.” In: Proceedings of the Amer-
ican Mathematical Society 16.5 (1965), pp. 1068–1073.
[Cam65]
[CCD88] David Chaum, Claude Cr´epeau, and Ivan Damg˚ard. “Multiparty Unconditionally Secure Pro-
tocols (Extended Abstract).” In: 20th ACM STOC. Chicago, IL, USA: ACM Press, May 1988,
pp. 11–19. doi: 10.1145/62212.62214.
[Cha+17] Nishanth Chandran et al. “EzPC: Programmable, Eﬃcient, and Scalable Secure Two-Party
Computation.” In: IACR Cryptology ePrint Archive 2017 (2017), p. 1109.
25
[Cho+07]
Stephen Chong et al. “Secure Web Applications via Automatic Partitioning.” In: Proceedings of
Twenty-ﬁrst ACM SIGOPS Symposium on Operating Systems Principles. SOSP ’07. Stevenson,
Washington, USA: ACM, 2007, pp. 31–44. isbn: 978-1-59593-591-5. doi: 10.1145/1294261.
1294265. url: http://doi.acm.org/10.1145/1294261.1294265.
[Cho+13] Ashish Choudhury et al. “Between a Rock and a Hard Place: Interpolating between MPC and
FHE.” In: ASIACRYPT 2013, Part II. Ed. by Kazue Sako and Palash Sarkar. Vol. 8270. LNCS.
Bengalore, India: Springer, Heidelberg, Germany, Dec. 2013, pp. 221–240. doi: 10.1007/978-
3-642-42045-0_12.
[Cyt+91] Ron Cytron et al. “Eﬃciently Computing Static Single Assignment Form and the Control Depen-
dence Graph.” In: ACM Trans. Program. Lang. Syst. 13.4 (Oct. 1991), pp. 451–490. issn: 0164-
0925. doi: 10.1145/115372.115320. url: http://doi.acm.org/10.1145/115372.115320.
Daniel Demmler, Thomas Schneider, and Michael Zohner. “ABY - A Framework for Eﬃcient
Mixed-Protocol Secure Two-Party Computation.” In: NDSS 2015. San Diego, CA, USA: The
Internet Society, Feb. 2015.
[DSZ15]
[Fra+14] Martin Franz et al. “CBMC-GC: An ANSI C Compiler for Secure Two-Party Computations.” In:
Compiler Construction - 23rd International Conference, CC 2014, Held as Part of the European
Joint Conferences on Theory and Practice of Software, ETAPS 2014, Grenoble, France, April
5-13, 2014. Proceedings. 2014, pp. 244–249. doi: 10 . 1007 / 978 - 3 - 642 - 54807 - 9 \ _15. url:
https://doi.org/10.1007/978-3-642-54807-9%5C_15.
Ran Gilad-Bachrach et al. “CryptoNets: Applying Neural Networks to Encrypted Data with High
Throughput and Accuracy.” In: Proceedings of the 33nd International Conference on Machine
Learning, ICML 2016, New York City, NY, USA, June 19-24, 2016. 2016, pp. 201–210. url:
http://jmlr.org/proceedings/papers/v48/gilad-bachrach16.html.
[Gil+16]
[GMW87] Oded Goldreich, Silvio Micali, and Avi Wigderson. “How to Play any Mental Game or A Com-
pleteness Theorem for Protocols with Honest Majority.” In: 19th ACM STOC. Ed. by Alfred Aho.
New York City, NY, USA: ACM Press, May 1987, pp. 218–229. doi: 10.1145/28395.28420.
[IJT91]
[IMZ19]
[Hen+10] Wilko Henecka et al. “TASTY: tool for automating secure two-party computations.” In: ACM
CCS 10. Ed. by Ehab Al-Shaer, Angelos D. Keromytis, and Vitaly Shmatikov. Chicago, Illinois,
USA: ACM Press, Oct. 2010, pp. 451–462. doi: 10.1145/1866307.1866358.
Fran¸cois Irigoin, Pierre Jouvelot, and R´emi Triolet. “Semantical interprocedural parallelization:
an overview of the PIPS project.” In: Proceedings of the 5th international conference on Super-
computing, ICS 1991, Cologne, Germany, June 17-21, 1991. 1991, pp. 244–251. doi: 10.1145/
109025.109086. url: https://doi.org/10.1145/109025.109086.
Muhammad Ishaq, Ana Milanova, and Vassilis Zikas. “Eﬃcient MPC via Program Analysis: A
Framework for Eﬃcient Optimal Mixing.” In: 2019 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’19), November 11–15, 2019, London, United Kingdom. 2019.
isbn: 978-1-4503-6747-9/19/11. doi: 10.1145/800057.808695.
N. Karmarkar. “A New Polynomial-time Algorithm for Linear Programming.” In: Proceedings
of the Sixteenth Annual ACM Symposium on Theory of Computing. STOC ’84. New York, NY,
USA: ACM, 1984, pp. 302–311. isbn: 0-89791-133-4. doi: 10.1145/800057.808695. url: http:
//doi.acm.org/10.1145/800057.808695.
Leonid G. Khachiyan. “A Polynomial-Time Algorithm for Solving Linear Programs.” In: Math-
ematics of Operations Research 5.1 (Feb. 1980). issn: 0364-765X. doi: 10.1287/moor.5.1.iv.
Vladimir Kolesnikov, Ahmad-Reza Sadeghi, and Thomas Schneider. “A systematic approach to
practically eﬃcient general two-party secure function evaluation protocols and their modular
design.” In: Journal of Computer Security 21.2 (2013), pp. 283–315. url: http://dblp.uni-
trier.de/db/journals/jcs/jcs21.html#KolesnikovS013.
Florian Kerschbaum, Thomas Schneider, and Axel Schr¨opfer. “Automatic Protocol Selection in
Secure Two-Party Computations.” In: ACNS 14. Ed. by Ioana Boureanu, Philippe Owesarski,
and Serge Vaudenay. Vol. 8479. LNCS. Lausanne, Switzerland: Springer, Heidelberg, Germany,
June 2014, pp. 566–584. doi: 10.1007/978-3-319-07536-5_33.
[KSS13]
[KSS14]
[Kar84]
[Kha80]
26
[Liu+17]
[MR18]
[NK14]
[NNH10]
[Pat+16]
[Sch03]
[Sco15]
[SK11]
Jian Liu et al. “Oblivious Neural Network Predictions via MiniONN Transformations.” In: ACM
CCS 17. Ed. by Bhavani M. Thuraisingham et al. Dallas, TX, USA: ACM Press, Oct. 2017,
pp. 619–631. doi: 10.1145/3133956.3134056.