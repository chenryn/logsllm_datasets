### 11.2.9 TCP Connect and TCP Accept

The `tcpconnect(8)` and `tcpaccept(8)` tools, introduced in Chapter 10, are BCC and bpftrace utilities designed to trace new TCP connections. These tools can help identify suspicious network activity, as many types of attacks involve at least one connection attempt. Below is an example output from the `tcpconnect(8)` tool:

```
PID   COMM     IP SADDR    DPORT
22411 a.out    10.0.0.1   8080
```

This output indicates that an `a.out` process (which is a default filename generated by some compilers and not typically used by installed software) is making a connection to 10.0.0.1 on port 8080, which could be suspicious.

#### Example Output from `tcpaccept(8)`

```
TIME(s)  PID   COMM      IP RADDR     LPORT  RPORT
0.000    1440  sshd      10.10.1.201  22
0.201    1440  pqas      10.10.1.201  22
0.408    1440  sshd      10.10.1.201  22
0.612    1440  pq2s      10.10.1.201  22
```

This output shows multiple connections from 10.10.1.201 to port 22, handled by `sshd(8)`. The connections occur approximately every 200 milliseconds, as indicated by the *TIME(s)* column, which may suggest a brute-force attack.

A key advantage of these tools is their efficiency; they only instrument TCP session events rather than tracing every network packet, which can significantly reduce overhead on busy systems. For more details, refer to Chapter 10.

### 11.2.10 TCP Reset

The `tcpreset(8)` tool, implemented in bpftrace, traces when TCP sends reset (RST) packets. This can be useful for detecting TCP port scanning, where packets are sent to a range of ports, including closed ones, triggering RSTs in response. Here is an example output:

```
TIME    LADDR         LPORT  RADDR         RPORT
20:50:24 100.66.115.238 80    100.65.2.196  45195
20:50:24 100.66.115.238 443   100.65.2.196  45195
20:50:24 100.66.115.238 995   100.65.2.196  45451
...
```

This output shows numerous TCP RSTs being sent for different local ports within the same second, indicating a possible port scan. The tool works by tracing the kernel function that sends resets, and the overhead is minimal since this occurs infrequently during normal operation.

The columns in the output are:
- **TIME**: Time in HH:MM:SS format
- **LADDR**: Local address
- **LPORT**: Local TCP port
- **RADDR**: Remote IP address
- **RPORT**: Remote TCP port

The source code for `tcpreset(8)` is as follows:

```c
#!/usr/local/bin/bpftrace
#include <linux/in.h>
#include <linux/ip.h>
#include <linux/tcp.h>

BEGIN
{
    printf("Tracing TCP resets. Hit Ctrl-C to end.\n");
    printf("%-8s %-14s %-6s %-14s %-6s\n", "TIME", "LADDR", "LPORT", "RADDR", "RPORT");
}

kprobe:tcp_v4_send_reset
{
    $stcp = (struct tcphdr*)$arg2;
    $sip = (struct iphdr*)$arg1;
    printf("%-8s %-14s %-6d %-14s %-6d\n", nsecs_to_clock(), ntop(AF_INET, &($sip->saddr)), $stcp->source, ntop(AF_INET, &($sip->daddr)), $stcp->dest);
}
```

This script traces the `tcp_v4_send_reset` kernel function, which only tracks IPv4 traffic. It can be extended to include IPv6 if needed. The tool also demonstrates how to read IP and TCP headers from a socket buffer using the kernel's `ip_hdr()` and `tcp_hdr()` functions.

### 11.2.11 Capable

The `capable(8)` tool provides visibility into capability checks, enhancing security by monitoring when processes check for specific capabilities. Here is an example output:

```
TIME    UID   PID  COMM       CAP    NAME             AUDIT
22:52:11 0    20007 capable    21     CAP_SYS_ADMIN    1
22:52:11 0    20007 capable    21     CAP_SYS_ADMIN    1
...
22:52:12 1000 20108 s.sh       7      CAP_SETUID       1
22:52:12 0    20109 sshd       6      CAP_SETGID       1
...
```

This output shows the `capable(8)` tool checking for the `CAP_SYS_ADMIN` capability (superuser), followed by `ssh(1)` checking `CAP_SETUID`, and `sshd(8)` checking various capabilities. Documentation for these capabilities can be found in the `capabilities(7)` man page.

The columns in the output are:
- **CAP**: Capability number
- **NAME**: Code name for the capability
- **AUDIT**: Whether this capability check writes to the audit log

The tool works by tracing the `cap_capable()` kernel function, which determines whether the current process has the required capability. The overhead is negligible.

#### Command Line Usage

**BCC Version:**

```
[options] [output_file]
Options:
-v: Include non-audit checks (verbose)
-R: Include kernel stack traces
-U: Include user-level stack traces
```

Some checks are considered "non-audit" and do not write messages to the audit log. These are excluded by default unless the `-v` option is used.

**bpftrace Version:**

The following is the core functionality of the `capable(8)` tool in bpftrace. This version does not support options and traces all capability checks, including non-audit.

```c
#!/usr/local/bin/bpftrace
BEGIN
{
    printf("Tracing cap_capable syscalls... Hit Ctrl-C to end.\n");
    printf("%-8s %-6s %-6s %-16s %-4s %-20s %s\n", "TIME", "UID", "PID", "COMM", "CAP", "NAME", "AUDIT");
}

kprobe:cap_capable
{
    @cap[$cap] = $name;
    printf("%-8s %-6d %-6d %-16s %-4d %-20s %d\n", nsecs_to_clock(), uid, pid, comm, cap, @cap[$cap], audit);
}
```

This script initializes the capability names and traces the `cap_capable` function, printing the relevant information.