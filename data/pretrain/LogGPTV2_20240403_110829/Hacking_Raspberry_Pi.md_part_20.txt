and Enter to continue.
3. When the next Configuring phpmyadmin screen displays, select Yes to install the
phpmyadmin database.
4. Type in the MySQL root user password and press Enter to continue. You’ll next be asked
to create and confirm a phpMyAdmin administrator password.
5. Now you need to open the Apache 2 configuration file and link Apache to phpMyAdmin.
Click here to view code image
sudo nano /etc/apache2/apache2.conf
6. In nano, press Ctrl+V repeatedly to scroll to the bottom of the file. When you are there,
add the following line, save changes, and exit nano.
Click here to view code image
Include /etc/phpmyadmin/apache.conf
7. Restart Apache.
Click here to view code image
sudo /etc/init.d/apache2 restart
8. To test phpMyAdmin, start LXDE, open Midori, and navigate to the following URL:
http://localhost/phpmyadmin
Log in with the username root and whatever password you specified for the MySQL
administrator. If you see the interface that is shown in Figure 15.6, you’re home free!
Note: For Further Learning
Packt Publishing has released a series of books on how to use phpMyAdmin; check
them out at http://is.gd/OyFw0J.
You know, as much as I like the idea behind Midori as a minimalist web browser, I haven’t had much
luck running anything but the most bare-bones of web apps from this tool. For instance, phpMyAdmin
displays all these distressing artifacts on screen.
As an alternative, you might want to consider installing Iceweasel (http://is.gd/cfmCHP), the Debian
port of the Mozilla Firefox web browser. Run sudo apt-get install iceweasel, confirm the installation,
and check the Internet folder in LXPanel menu—you might love it!
Setting Up Joomla
Joomla (http://is.gd/Xl2hSu) is a leading content management system (CMS) platform. Many
businesses build their corporate websites on Joomla because Joomla is open source, free, and
eminently flexible. Under the hood, Joomla is a PHP/MySQL-based web application, so it functions
perfectly well in a LAMP stack environment. I show you the Joomla default Home page inF igure
15.7.
FIGURE 15.7 Joomla is an awesome content management platform.
You can also use Joomla as a blog or as an online photo/video gallery...the list is almost limitless.
Note: More on Joomla!
For step-by-step instructions on how to use Joomla to build dynamic websites, please
r e a d The Official Joomla! Book by Jennifer Marriott and Elin Waring
(http://is.gd/BA3jtO).
Despite its richness and robustness, Joomla runs reasonably well on the Raspberry Pi. Let’s learn
how to install the platform.
Task: Installing Joomla on Your Raspberry Pi
1. From LXDE, fire up your favorite web browser, visit http://is.gd/spdPUN, and
download the latest version of Joomla. The installer will come down as a ZIP archive to
your home directory by default.
2. Open a Terminal session and unpack the Joomla contents to your default Apache content
directory.
Click here to view code image
cd
sudo unzip joomla.zip -d /var/www
In the previous code, replace joomla.zip with the actual name of the Joomla ZIP you
downloaded from the Joomla website.
3. You need to tweak the PHP configuration file a bit, so open it up in nano:
Click here to view code image
sudo nano /etc/php5/apache2/php.ini
4. In nano, press Ctrl+W to search for the string output_buffering.
5. Set the Development Value and Production Value parameters to 0.
6. Press Ctrl+O, ENTER, and then Ctrl+X to save the file and exit the nano editor.
7. Reboot the Pi.
sudo reboot
8. When you’re back from the reboot and in LXDE again, open another Terminal session,
create the Joomla configuration file, and make sure that the new file is writable.
Click here to view code image
cd /var/www
sudo touch configuration.php
sudo chmod 777 configuration.php
The touch command is used to create a new empty file. The chmod (pronounced see
aich mod) is used to edit permissions on files. You can learn more about the Linux file
system permissions, including the octal numeric and symbolic methods, by visiting good ol’
Wikipedia at http://is.gd/5hFhgO.
9. It’s time to complete the installation via a web browser. Open Midori, Iceweasel, or
your preferred web browser and open your Apache installation’s default content page:
http://localhost
10. If you see the default Apache page instead of a Joomla page, delete the old index.html
page:
sudo rm index.html
11. You are prompted to walk through a three-step initial configuration wizard, the first
screen of which is shown to you in Figure 15.8.
FIGURE 15.8 Joomla has a simple initial configuration wizard.
Here’s a brief discussion of the information you need to supply to Joomla:
Main Configuration: Site name and description; Joomla administrator login and contact
details
Database: Connection details to MySQL
Finalization: Install sample data, email data, confirm installation defaults
12. For security purposes, you are prompted to delete the installation folder before you can
begin using Joomla on your Pi. If you receive an error when you try to do this from a
browser, you can perform the action through Terminal:
cd /var/www
sudo rm -rf installation/
Putting Your Web Server on the Public Internet
The final subject I cover in this chapter is how to put your Raspberry Pi web server on the global
Internet. Inside the vast majority of private homes and businesses, computers use private, nonroutable
IP addresses dispensed by a DHCP server. These internal IP addresses are fine for communications
within the home or organization, but they don’t allow people on the Internet to connect directly to
those hosts.
Why would you want to expose your Raspberry Pi to the wild and wooly jungle called the World
Wide Web? Here are some valid reasons:
You can consume public web services such as Dropbox and Spotify.
You can communicate with other Internet users.
You can test out location services and other Internet-dependent applications.
On the other hand, you need to be mindful of some clear and present dangers associated with placing
any computer within reach of systems located around the globe:
A malicious user or application can infiltrate your Raspberry Pi.
You may unintentionally expose private data.
You may unknowingly consume network bandwidth (relevant for users with metered Internet
connections).
Thus, my suggested workflow for putting your Pi on the Internet is to
Configure your Pi with a static IP address. (I showed you how to do this in Chapter 7).
Use a dynamic DNS service.
Dynamic DNS services are necessary because DHCP is a lease-based protocol. In other words, your
host computers periodically receive new and different IP addresses from their servers, which makes
reliable connections to computers unreliable.
Configuring your Raspberry Pi with a static private IP address is fine; this means you’ll always be
able to connect to the device from within your LAN by using that IP address. Dynamic DNS services
come into play because they allow you to map an internal network device with a public Domain
Name System (DNS) name.
In my experience, the two major players in the dynamic DNS space are
No-IP (http://is.gd/hhmpFu)
DynDNS (http://is.gd/nKysbj)
Both of these services offer entry-level features for free and more advanced capabilities for a
subscription fee.
First, you need to visit the No-IP website and create a free account. After you’ve done that, you can
manage your host/domain name mappings. By default, your DNS host names will use the suffix no-
ip.biz. If you own a domain of your own, you can become a paying subscriber to access those
additional features.
Second, you need to determine whether your Pi connects directly to your ISP and has a public IP
address or if the device resides behind your router and receives a private IP.
The former case is the easiest; you see your ISP-given public IP and associated default hostname in
your No-IP control panel as shown in Figure 15.9.
FIGURE 15.9 You can adjust your host-DNS name mappings in the No-IP Control Panel.
If your Pi is one of several hosts behind your single Internet connection, don’t sweat it because the
No-IP client that you’ll install on your Pi is intelligent enough to sort it all out.
Task: Making Your Raspberry Pi Publicly Accessible by Using No-IP
1. Create a subdirectory inside your home directory to place the No-IP client software:
cd
mkdir noip
cd noip
2. Download the No-IP dynamic update client (DUC) software:
Click here to view code image
wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
3. Unpack the compressed tarball archive and navigate into the new folder:
Click here to view code image
ar vzxf no-ip-duc-linux.tar.gz
ls no*
cd noip-2.1.9-1
Note: Version Control
In step 3, make sure to use the ls command to verify the name of the extracted
directory. Your No-IP client version might be more recent than the one I used at the
time of this writing.
4. The files you downloaded are the uncompiled source, which often comes as a surprise to
Windows or OS X users that don’t typically have to deal with compiling downloaded
software. Enter the following commands to manually compile the software:
sudo make
sudo make install
You are prompted to enter your no-ip.com membership credentials during the client
installation process on the Pi. You are also asked to specify a default refresh interval,
which synchronizes your computer’s IP address with the No-IP hostname.
5. Mission accomplished! You can now run the No-IP client:
sudo /usr/local/bin/noip2
If your Raspberry Pi exists as a DHCP client on your internet network, you have one more step to do.
You need to log into your router and set up port forwarding to allow traffic on TCP port 80 (HTTP)
to transit to your Raspberry Pi’s internal IP address. The setup on my Comcast IP Business Gateway
is shown in Figure 15.10.
FIGURE 15.10 I need to set up port forwarding to my internal Raspberry Pi.
To test that the public IP works, fire up a web browser on another computer, preferably on a remote
network, and see if you can load the Joomla site you just created. For instance, my No-IP DNS name
is timwarner.no-ip.biz, so in my browser I type
http://timwarner.no-ip.biz
You will be unpleasantly surprised, I’m sure, to learn that the No-IP dynamic update client does not
run automatically at startup by default. Never fear, however. You can find an excellent, step-by-step
tutorial for doing this at the Stuff About Code website (http://is.gd/VVolQr).
Chapter 16. Raspberry Pi Portable Webcam
In this chapter you learn how to take still pictures and record video with your Raspberry Pi. Perhaps
you want to investigate time lapse photography, install a baby monitor, set up a security camera,
deploy a bird feeder cam, or simply snap interesting images.
Prior to May 2013, when the Raspberry Pi Foundation introduced the Raspberry Pi Camera Board,
enthusiasts did their best to use their USB webcams with their Raspberry Pi units. To be sure, this
chapter teaches you how to use the Pi with third-party cameras. However, I must tell you that the
Raspberry Pi Camera Board is pretty slick!
I conclude this lesson with step-by-step instructions and best practice advice for putting your
Raspberry Pi on battery and therefore freeing you up to take your new webcam wherever you need to
take it. Let’s get started!
About the Raspberry Pi Camera Board
As you know, the Model A and Model B boards include a Camera Serial Interface 2 (CSI-2) camera
connector, shown in Figure 16.1. The interface is labeled S5 and is located between the USB and
HDMI ports on the Pi PCB.
FIGURE 16.1 The MIPI CS-2 camera interface on a Model A board
Initially the Foundation said nothing as to whether it would create a camera to connect to this
interface, leaving Raspberry Pi enthusiasts to speculate as to how they could access the CSI-2
interface through hardware hacking. Other Pi users simply plugged in their USB-connected cameras;
we cover that idea later in this chapter.
This situation cleared up in May 2013 when the Raspberry Pi Foundation announced a $25 accessory
called the Raspberry Pi Camera Board, which does in fact connect to the Pi through the CSI-2
interface.
The Raspberry Pi camera board is available through the typical channels:
RS Components: http://is.gd/6ol2Gq
Premier Farnell/Element 14: http://is.gd/xJSkbQ
Physically, the CSI connector (the one shown in Figure 16.1) implements a 15-pin flex ribbon cable.
One end connects to the CSI-2 interface on the Raspberry Pi PCB. The other end of that cable is
soldered directly to the Raspberry Pi Camera Board, as shown in Figure 16.2.
FIGURE 16.2 Raspberry Pi Camera Board PCB
The specs for this board (also called Camera Module) are listed in Table 16.1.
TABLE 16.1 Raspberry Pi Camera Board Specifications
I think you’ll find that the Raspberry Pi camera board specs compare favorably with those of, say, the
iPhone 4 from summer 2010. Not too shabby! Actually, I found that the Camera Board shoots better
video than many entry-level webcams I’ve used in the past.
The Camera Board ships in an anti-static bag enclosed by a minimalist paper box. When you handle
the Camera Board, be careful not to kink the ribbon cable—it is on the delicate side. You also want
to avoid touching the camera lens to avoid fingerprint smudges.
With no further ado, let’s get your new Raspberry Pi Camera Board set up and start snapping some
pictures and recording some video!
Installing and Configuring the Raspberry Pi Camera Board
Getting the Raspberry Pi Camera Board up and running consists of two phases:
Preparing the Pi and installing the camera driver
Physically installing the camera
As usual, in this chapter I assume you’re using the official Raspbian Linux distribution.
Task: Preparing the Raspberry Pi for the Camera Board
It is never a good idea to connect hardware to a computer’s motherboard while that
computer is powered up. That said, before you unplug the Pi and physically attach the
Camera Board, you need to enable the use of the camera in Raspbian.
As you’ll learn the raspi-config utility provides a simple interface for managing the
camera functionality. Let’s do that now.
1. Do not plug in the Camera Board yet. Power on the Pi, access a Terminal prompt, and
update your software (including Raspi-Config):
Click here to view code image
sudo apt-get update && sudo apt-get upgrade
2. Let’s go into Raspi-Config:
sudo raspi-config
3. In Raspi-Config, arrow down to the Camera option and press Enter.
4. In the Enable support for Raspberry Pi camera? dialog box, shown in Figure 16.3, select
Enable and press Enter.
FIGURE 16.3 Enable the Camera Board by using Raspi-Config.
5. Exit the Raspi-Config utility and reboot your Pi. When you are back from the reboot, shut
down the system to prepare for the Camera Board installation. Remember that the
shutdown command uses two primary switches: -h for shutdown (halt), and -r for reboot.
sudo shutdown -h now
Now that you have installed the necessary device drivers and readied the Raspberry Pi to use the
Camera Board, let’s connect the add-on to the Pi’s PCB.
Task: Installing the Raspberry Pi Camera Board
Okay. Now that you’ve notified your Pi’s software that you want to use the Camera
Board, and you’ve removed power from the Pi (is that similar to “power to the people”?
Never mind...), you can proceed with the physical installation.
One preliminary word of caution: The CSI-2 interface on the Raspberry Pi is delicate.
Don’t use too much force or you may break the retaining clips and render the entire
interface useless. Let’s get to work!
1. Make sure that your Raspberry Pi is powered off. Unplug all cables from the PCB.
2. Using your fingers, grasp the edges of the CSI-2 connector and gently lift up the retaining
clip. Note that the clip remains attached to the interface; it lifts approximately 1–2mm.
3. Insert the Camera Board ribbon cable into the CSI-2 interface with the copper traces
facing away from the USB ports. You can see the correct orientation in Figure 16.4.
FIGURE 16.4 The Camera Board installation procedure is a bit tedious, and the components
are certainly delicate.
4. When the ribbon cable is seated in the interface, grasp the retaining clip with your
fingers and gently press down to lock the cable and the interface together securely.
Alrighty then! As you can see in Figure 16.5, the Raspberry Pi and the Camera Board are now
(hopefully) a functional unit.
FIGURE 16.5 The Raspberry Pi and the Camera Board add-on make a nice pair, don’t they?
Using the Camera Board
The Raspberry Pi Foundation provides two command-line utilities for using the Camera Board:
raspistill: Used to take still images in both JPEG and RAW formats
raspivid: Used to record video by using the H.264 codec
In the next section I cover how to use raspistill to take still pictures. In the section that follows I turn
your attention to shooting full-motion video (FMV) using raspivid.
Capturing Still Pictures
Let’s begin by obtaining some command-line syntax help:
raspistill | less
Figure 16.6 shows you the screen output for raspistill; this should serve as a nice reference for you.
FIGURE 16.6 raspistill command syntax
You can also download the full documentation for the Camera Board commands from
http://is.gd/18PvNf.
To tell your Pi to snap a picture, enter the following command:
raspistill -o myimage.jpg
When you run raspistill, you see an LED light up on the Camera Board for approximately four
seconds; the image is exposed just before the LED goes out.
Any photographs you capture are stored in your present working directory. Thus, if you execute the
raspistill command in the context of your home directory, that’s where your files reside by default.
The -o switch enables you to name the images using whatever file name you input after the switch,
myimage.jpg in this example.
From LXDE, you can double-click the image files to open them in your default web browser.
Alternatively, you can right-click them and select ImageMagick (display) to open them in the
ImageMagick open source image viewer.
Despite the lack of a flash or manual focus override, the picture quality is actually pretty good. Take a
look at Figure 16.7 to see yours truly posing for your viewing (and laughing) pleasure:
FIGURE 16.7 Despite the poor subject, you can see that the Raspberry Pi Camera Board takes a
pretty good picture.
Let’s buzz through some more sample syntax to give you a better idea as to what raspistill can do for
you. You can, for example, tell your Pi’s camera to take a picture at a set delay or image quality.