### 6.3.1 Member Methods

A member method is a function or procedure defined within an object type and can only be invoked through an instance of that type. These methods have access to, and can modify, the attributes of the object instance on which they are operating.

#### Example: `emp_obj_typ` Object Type with a Member Method

The following object type specification creates the `emp_obj_typ` object type, which includes a member method named `display_emp`:

```sql
CREATE OR REPLACE TYPE emp_obj_typ AS OBJECT
(
    empno NUMBER(4),
    ename VARCHAR2(20),
    addr ADDR_OBJ_TYP,
    MEMBER PROCEDURE display_emp(SELF IN OUT emp_obj_typ)
);
```

- **Attributes**:
  - `empno`: Employee number.
  - `ename`: Employee name.
  - `addr`: Address, which is an instance of the `ADDR_OBJ_TYP` object type.
- **Member Method**:
  - `display_emp`: A procedure that displays the employee's details.

The `SELF` parameter in the `display_emp` method refers to the instance of the `emp_obj_typ` on which the method is invoked. The `SELF` parameter is always the first parameter in a member procedure or function, even if it is not explicitly declared in the parameter list.

#### Object Type Body for `emp_obj_typ`

The following code snippet defines the object type body for `emp_obj_typ`:

```sql
CREATE OR REPLACE TYPE BODY emp_obj_typ AS
    MEMBER PROCEDURE display_emp (SELF IN OUT emp_obj_typ) IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Employee No : ' || SELF.empno);
        DBMS_OUTPUT.PUT_LINE('Name : ' || SELF.ename);
        DBMS_OUTPUT.PUT_LINE('Street : ' || SELF.addr.street);
        DBMS_OUTPUT.PUT_LINE('City/State/Zip: ' || SELF.addr.city || ', ' ||
                             SELF.addr.state || ' ' || LPAD(SELF.addr.zip, 5, '0'));
    END;
END;
```

- **Functionality**:
  - The `display_emp` method outputs the employee's number, name, and address details using `DBMS_OUTPUT.PUT_LINE`.

### 6.3.2 Static Methods

A static method belongs to an object type but is invoked by the type itself rather than by an instance of the type. Static methods do not have access to, and cannot change, the attributes of an object instance.

#### Example: `dept_obj_typ` Object Type with a Static Method

The following object type specification includes a static function `get_dname` and a member procedure `display_dept`:

```sql
CREATE OR REPLACE TYPE dept_obj_typ AS OBJECT
(
    deptno NUMBER(2),
    STATIC FUNCTION get_dname(p_deptno IN NUMBER) RETURN VARCHAR2,
    MEMBER PROCEDURE display_dept
);
```

- **Attributes**:
  - `deptno`: Department number.
- **Static Function**:
  - `get_dname`: Returns the department name based on the department number.
- **Member Procedure**:
  - `display_dept`: Displays the department details.

#### Object Type Body for `dept_obj_typ`

The following code snippet defines the object type body for `dept_obj_typ`:

```sql
CREATE OR REPLACE TYPE BODY dept_obj_typ AS
    STATIC FUNCTION get_dname(p_deptno IN NUMBER) RETURN VARCHAR2 IS
        v_dname VARCHAR2(14);
    BEGIN
        CASE p_deptno
            WHEN 10 THEN v_dname := 'ACCOUNTING';
            WHEN 20 THEN v_dname := 'RESEARCH';
            WHEN 30 THEN v_dname := 'SALES';
            WHEN 40 THEN v_dname := 'OPERATIONS';
            ELSE v_dname := 'UNKNOWN';
        END CASE;
        RETURN v_dname;
    END;

    MEMBER PROCEDURE display_dept IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Dept No : ' || SELF.deptno);
        DBMS_OUTPUT.PUT_LINE('Dept Name : ' || dept_obj_typ.get_dname(SELF.deptno));
    END;
END;
```

- **Functionality**:
  - The `get_dname` function returns the department name based on the provided department number.
  - The `display_dept` procedure outputs the department number and name using `DBMS_OUTPUT.PUT_LINE`.

### 6.3.3 Constructor Methods

A constructor method is a function that creates an instance of an object type, typically by assigning values to the members of the object. An object type may define several constructors to accomplish different tasks. A constructor method is a member function (invoked with a `SELF` parameter) whose name matches the name of the type.

#### Example: `address` Object Type with a Custom Constructor

The following object type specification includes a custom constructor for the `address` type:

```sql
CREATE TYPE address AS OBJECT
(
    street_address VARCHAR2(40),
    postal_code VARCHAR2(10),
    city VARCHAR2(40),
    state VARCHAR2(2),
    CONSTRUCTOR FUNCTION address
    (
        street_address VARCHAR2,
        postal_code VARCHAR2
    ) RETURN self AS RESULT
);

CREATE TYPE BODY address AS
    CONSTRUCTOR FUNCTION address
    (
        street_address VARCHAR2,
        postal_code VARCHAR2
    ) RETURN self AS RESULT IS
    BEGIN
        self.street_address := street_address;
        self.postal_code := postal_code;
        self.city := postal_code_to_city(postal_code);
        self.state := postal_code_to_state(postal_code);
        RETURN;
    END;
END;
```

- **Functionality**:
  - The custom constructor initializes the `street_address` and `postal_code` attributes and computes the `city` and `state` based on the `postal_code`.

### 6.4 Creating Object Instances

To create an instance of an object type, you must first declare a variable of the object type and then initialize it using a constructor method.

#### Example: Declaring and Initializing an `EMP_OBJ_TYP` Instance

```sql
DECLARE
    v_emp EMP_OBJ_TYP;
BEGIN
    v_emp := emp_obj_typ(9001, 'JONES', addr_obj_typ('123 MAIN STREET', 'EDISON', 'NJ', 08817));
    DBMS_OUTPUT.PUT_LINE('Employee No : ' || v_emp.empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || v_emp.ename);
    DBMS_OUTPUT.PUT_LINE('Street : ' || v_emp.addr.street);
    DBMS_OUTPUT.PUT_LINE('City/State/Zip: ' || v_emp.addr.city || ', ' ||
                         v_emp.addr.state || ' ' || LPAD(v_emp.addr.zip, 5, '0'));
END;
```

- **Output**:
  - This block declares and initializes the `v_emp` variable and then outputs the employee's details.

### 6.5 Referencing an Object

Once an object variable is created and initialized, individual attributes can be referenced using dot notation.

#### Example: Referencing Attributes and Calling Methods

```sql
DECLARE
    v_emp EMP_OBJ_TYP;
BEGIN
    v_emp := emp_obj_typ(9001, 'JONES', addr_obj_typ('123 MAIN STREET', 'EDISON', 'NJ', 08817));
    v_emp.display_emp;
END;
```

- **Output**:
  - This block calls the `display_emp` method to output the employee's details.

### 6.6 Dropping an Object Type

To delete an object type, use the `DROP TYPE` command. If the object type has a body, both the type and its body will be dropped.

#### Example: Dropping `emp_obj_typ` and `addr_obj_typ`

```sql
DROP TYPE emp_obj_typ;
DROP TYPE addr_obj_typ;
```

- **Note**:
  - Drop the dependent types first before dropping the parent type.

#### Example: Dropping Only the Object Type Body

```sql
DROP TYPE BODY dept_obj_typ;
```

- **Note**:
  - This command only drops the type body, not the type specification.

### 7 Open Client Library

The Open Client Library provides application interoperability with the Oracle Call Interface, allowing applications to work with either EDB Postgres Advanced Server or an Oracle database with minimal changes to the application code. The EnterpriseDB implementation of the Open Client Library is written in C.

For detailed usage information about the Open Client Library and the supported functions, please refer to the EDB Postgres Advanced Server OCI Connector Guide.