k
ika
(cid:215)
kja
. 
(1) 
The  matching  of 
in  matrix 
multiplication corresponds to matching steps of an attack 
rows  and  columns 
the  summation  counts 
the  numbers  of 
graph,  and 
matching  steps.    Thus,  each  element  of  A2  gives  the 
number of 2-step attacks between the corresponding pair 
(row and column) of attack graph vertices.  Similarly, A3 
gives all 3-step attacks, A4 gives all 4-step attacks, etc. 
2
-
1
3
A
(cid:218)
(cid:218)
nA
AA
(cid:218)(cid:218)
In  our  matrix  multiplication,  if  we  calculate  the 
Boolean  product  rather  than  the  simple  product,  the 
resulting Ap simply tells us whether there is at least one p-
step  attack  from  one  vertex  to  another,  rather  than  the 
actual number of such paths.  Thus, the Boolean sum 
(2) 
tells us, for each pair of vertices, whether the attacker can 
reach one attack graph vertex to another over all possible 
numbers  of  steps.    This  Boolean  sum  is  known  as  the 
transitive  closure  of  A.    The  classical  Floyd-Warshall 
algorithm  computes  transitive  closure  in  O(n3),  although 
there are improved algorithms, e.g., [15], that come closer 
  Frequently  in  practice,  elements  of  Ap 
to  O(n2). 
monotonically increase as p increases.  In such cases, we 
can distinguish the minimum number of steps required to 
reach each pair of attack graph vertices by computing the 
multi-step reachability matrix 
(cid:1)
2
+
3
+
nA
+
-
1
+
(cid:1)
, 
A
(3) 
AA
where  the  matrix  multiplication  is  Boolean  and  the 
summation  is  simply  arithmetic.    Since  elements  of  Ap 
increase  monotonically  from  zero  to  one  (under  Boolean 
matrix  multiplication),  the  elements  of  the  reachability 
matrix in Equation (3) give the minimum number of steps 
required to reach one attack graph vertex to another. 
A fundamental property of attack graphs is how well 
connected the various graph vertices (exploits, machines, 
etc.)  are.    For  example,  attack  graphs  that  have  few  or 
weak  (large  multi-step  only)  connections  are  easier  to 
defend  against,  and  those  with  more  and  stronger 
connections  are  more  difficult 
to  defend  against.  
Knowing the numbers and depths of attacks (e.g., through 
higher  powers  of 
the  adjacency  matrix)  helps  us 
understand  large-scale  tendencies  across  the  network.  
Individual vertices’ roles within the attack graph are also 
described by their numbers and depths of attacks to other 
vertices. For example, vertices (e.g., machines) with many 
attack paths through them might bear closer scrutiny.  Or, 
critical vertices could be identified as “bottlenecks” in the 
attack graph. 
3.4  Attack Prediction 
In  our  approach,  one  can  place  detected  intrusions 
within  the  context  of  vulnerability-based  attack  graphs.  
We first compute a vulnerability-based attack graph from 
knowledge  of 
the  network  configuration,  attacker 
exploits,  etc.    We  then  form  the  adjacency  matrix  A  for 
the  attack  graph,  perform  clustering  on  A,  and  compute 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:28 UTC from IEEE Xplore.  Restrictions apply. 
either  the  transitive  closure  of  A  or  the  multi-step 
reachability  matrix  in  Equation  (3).    Then,  when  an 
intrusion alarm is generated, if we can associate it with an 
edge  (e.g.,  exploit)  in  the  attack  graph,  we  can  thus 
associate it with the corresponding element of any of the 
following: 
1.  The  adjacency  matrix  A  (for  single-step 
reachability) 
2.  The  multi-step  reachability  matrix 
in 
Equation (3) (for multi-step reachability) 
3.  The  transitive  closure  of  A  (for  all-step 
reachability) 
From  this,  we  can  immediately  categorize  alerts 
based  on  the  numbers  of  associated  attack  steps.    For 
example,  if  an  alarm  occurs  within  a  zero-valued  region 
of  the  transitive  closure,  we  might  conclude  it  is  a  false 
alarm,  i.e.,  we  know  it  is  not  possible  according  to  the 
attack graph.  Or, if an alarm occurs within a single-step 
region  of  the  reachability  matrix,  we  know  that  it  is 
indeed  one  of  the  single-step  attacks  in  the  attack  graph.  
Somewhere  in  between,  if  an  alarm  occurs  in  a  p-step 
region,  we  know  the  attack  graph  predicts  that  it  takes  a 
minimum of p steps to achieve such an attack. 
By  associating  intrusion  alarms  with  a  reachability 
graph,  we  can  also  predict  the  origin  and  impact  of 
attacks.  That is, once we place intrusion alarm on one of 
the  vulnerability-based  reachability  graphs,  we  can 
navigate the graph to do attack prediction.  The idea is to 
project  to  the  main  diagonal  of  the  graph,  in  which  row 
and column indices are equal.  Vertical projection (along 
a column) leads to attack step(s) in the forward direction.  
That  is,  when  one  projects  along  a  column  to  the  main 
diagonal,  the  resulting  row  gives  the  possible  steps 
forward  in  the  attack.    We  can  predict  attack  origin  and 
impact  either  (1)  one  step  away,  (2)  multiple  steps  away 
with  the  number  of  steps  distinguished,  or  (3)  over  all 
steps combined.  Here are those 3 possibilities: 
1.  When using the adjacency matrix A, non-
zero  elements  along  the  projected  row 
show  all  possible  single  steps  forward.  
Projection also can be done iteratively, to 
follow  step-by-step  (one  at  a  time)  in  the 
attack. 
the  minimum 
2.  When  using  the  multi-step  reachability 
matrix  in  Equation  (3),  the  projected  row 
shows 
of 
subsequent  steps  needed  to  reach  another 
vertex.    One  can  also  iteratively  project, 
either choosing single-step elements only, 
or “skipping” steps by choosing multi-step 
elements. 
number 
3.  When  using  the  transitive  closure,  the 
projected  row  shows  whether  a  particular 
vertex can be subsequently reached in any 
iterative 
number  of 
projection 
since 
transitive closure shows reachability  
is  not  necessary, 
  Here, 
steps. 
an 
steps 
(possible 
forward)  of 
From the preceding discussion, we see that projection 
along  a  column  of  a  reachability  matrix  predicts  the 
impact 
attack.  
Correspondingly, we can project along a row (as opposed 
to  a  column)  of  such  a  matrix  to  predict  attack  origin 
(possible steps backward).  In this case, when one projects 
along  a  row  to  the  main  diagonal,  the  resulting  column 
gives  the  possible  steps  backward  in  the  attack.    As 
before,  we  can  predict  attack  origin  using  either  (1)  the 
adjacency  matrix,  (2)  the  multi-step  reachability  matrix, 
or  (3)  the  transitive  closure.    Just  as  for  forward 
projection,  this  gives  either  (1)  single-step  reachability, 
(2) multi-step reachability, or (3) all-step reachability, but 
this  time  in  a  backward  direction  for  predicting  attack 
origin. 
4.  Applications 
In  this  section,  we  apply  our  general  approach  to  a 
number  of  different  network  security  situations.    Sub-
Section 4.1  shows  the  application  of  clustered  adjacency 
and  reachability  matrices  to  a  vulnerability-based  attack 
graph.    In  Sub-Section 4.2,  we  show  how  reachability 
matrices give a concise summary of attack graph changes 
driven  by  changes  to  the  network  configuration.    Sub-
Section 4.4 shows  how our approach can help categorize 
intrusion alarms and predict attack origin and impact. 
4.1  Vulnerability-Based Attack Graphs 
Figure  1  shows  an  example  drawn  attack  graph,  in 
which low-level security conditions have been aggregated 
to  machine  vertices,  and  exploits  have  been  aggregated 
for  pairs  of  machines.    This  attack  graph  was  generated 
from  a  network  model  created  from  Nessus  [16] 
vulnerability scans.  Despite the fact that this attack graph 
has  been  aggregated  to  the  level  of  machines,  the  drawn 
graph  is  still  cluttered  with  edges  and  is  hard  to  follow.  
Some clustering is apparent in this drawing, but the exact 
nature of the clusters, such as their boundaries and cross-
cluster relationships, is not readily apparent. 
Figure  2  shows  the  same  attack  graph  as  Figure  1, 
this  time  represented  as  an  adjacency  matrix.    In  the 
matrix, rows represent exploits from a particular machine, 
and  columns  represent  exploits  to  a  particular  machine.  
The  presence  at  least  one  exploit  between  a  pair  of 
machines  is  indicated  by  black  matrix  element,  and  the 
absence is indicated by  white.  Here, there is no a priori 
way  of  ordering  the  matrix  rows  and  columns  to  form 
meaningful clusters.  That is, from the given ordering, the 
underlying structure of the attack graph is obscured. 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:28 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1:  Example drawn attack graph. 
5
5
10
10
15
15
20
20
25
25
30
30
35
35
40
40
5
5
10
10
15
15
20
20
25
25
30
30
35
35
40
40
Figure 2:  Unclustered adjacency matrix for 
attack graph in Figure 1. 
identified  9  clusters 
In  Figure  3,  we  have  clustered  the  attack  graph 
adjacency matrix in Figure 2.  The underlying structure of 
the  attack  graph  is  now  clear.    The  clustering  algorithm 
has 
(rectangular  blocks)  of 
homogeneous  graph  edges.    The  3  blocks  on  the  main 
diagonal  (blocks  A1,1,  A2,2,  and  A3,3)  are  solid  black, 
indicating  full  attack  graph  connectivity  within  each 
block.  That is, within one of these main-diagonal blocks, 
every machine can attack every other machine (through at 
least  one  exploit).    Thus  in  the  terminology  of  [4],  these 
blocks  constitute  protection  domains,  which  have  been 
detected automatically by the clustering algorithm.  Block 
A2,3  of  the  clustered  adjacency  matrix  shows  exploits 
launched  from  the  2nd  to  3rd  protection  domains  (from 
block  A2,2  to  A3,3).    Similarly,  block  A3,1  shows  exploits 
from the 3rd to 1st protection domains (from block A3,3 to 
A1,1).    Note  that  Figure  3  shows  how  matrix  rows  and 
columns  were reordered by the clustering algorithm, i.e., 
rows and columns are labeled with their original indices.  
In practice, we might use more meaningful labels, such as 
IP addresses. 
Figure  4  shows  the  square  of  the  clustered  attack 
graph  adjacency  matrix  in  Figure  3.    Here  we  have  used 
the  arithmetic  product  (as  opposed  to  the  Boolean 
product).    This  shows  not  only  whether  there  exists  at 
least  one  2-step  attack  from  one  machine  to  another,  but 
also  the  actual  count  of  all  possible  2-step  attacks.    For 
example,  we  see  that  within  the  2nd  protection  domain 
(block A2,2), there are 20 possible 2-step attacks between 
each pair of machines, corresponding to the 20 machines 
in  that  protection  domain. 
  We  see  corresponding 
numbers  of  2-step  attacks  within  the  other  2  protection 
domains (blocks A1,1 and A3,3).  There are relatively fewer 
2-step attacks across protection domains (blocks A2,3 and 
A3,1). 
Figure 5 shows successive powers (A2, A3, and A4) of 
the  clustered  adjacency  matrix,  this  time  employing 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:12:28 UTC from IEEE Xplore.  Restrictions apply. 
Boolean  matrix  multiplication.    This  shows  attacker 
reachability  between  each  pair  of  machines,  within  2,  3, 
and  4  steps,  respectively.    We  see  that  within  4  steps, 
machines  in  the  2nd  block  can  successfully  attack  all 
machines (i.e., all columns) in the network.  Also within 4 
steps,  machines  in  the  1st  block  can  be  successfully 
attacked  from  all  machines  (i.e.,  from  all  rows)  in  the 
network. 
0
0
371
371
1
1
1
1
2
2
1
1
4
4
1
1
5
5
1
1
7
7
1
1
8
8
1
1
8
8
2
2
4
4
3
3
9
9
3
3
3
3
4
4
4
4
4
4
3
3
161
161
9
9
1
1
0
0
2
2
1
1
2
2
2
2
2
2
3
3
2
2
4
4
2
2
5
5
2
2
6
6
2
2
7
7
2
2
9
9
2
2
0
0
3
3
1
1
3
3
2
2
3
3
3
3
3
3
5
5
3
3
8
8
3
3