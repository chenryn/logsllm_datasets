req *compat-commit(ID, pid)
vid ← HG.commit(ID, pid)
(𝛾[ID], 𝐼,𝑊pub, Wpriv,𝑇 ) ← Commit(𝛾[ID], PM[pid]; 𝑟)
Key[vid] ← 𝐼
BR[vid] ← (𝑟 ̸= ⊥)
for ID′ ∈ HG.roster(V-Pt[ID])
(ID1, . . . , ID𝑚) ← Props.addedIDs(pid)
for 𝑖 = 1, . . . , 𝑚
CM[vid, ID′] ← 𝑇
WMpub[vid, ID𝑖] ← 𝑊pub
WMpriv[vid, ID𝑖] ← Wpriv[ID𝑖]
return (vid,𝑇 ,𝑊pub, Wpriv)
Figure 11: Oracles for group creation, add, remove, update
proposals and commits of the security game for continuous
group key agreement schemes. The compatibility functions are
described in the accompanying text; a formal description is
provided in Figure 14.
// Process commit msg for ID and epoch vid
process(vid, ID)
req *compat-process(vid, ID)
𝑇 ← CM[vid, ID]
P ← PM[HG[vid].pid]
(𝛾[ID], GI, 𝐼) ← Proc-Com(𝛾[ID],𝑇 , P)
if ¬HG.checkGI(vid, GI) ∨ Key[vid] ̸= 𝐼
if ¬Del[ID]
win
V-Tr[ID] ← V-Pt[ID]
if HG.isRemoved(vid, ID)
V-Pt[ID] ← vidroot
V-Pt[ID] ← vid
else
𝑖[ID] ← 0
P-St[ID] ← ∅
return GI
// Reveal the update secret of epoch vid
reveal(vid)
req Key[vid] ̸= 𝜖
req ¬(Reveal[vid] ∨ Chall[vid])
Reveal[vid] ← true
return Key[vid]
// Challenge the update secret of epoch vid
chall(vid)
req Key[vid] ̸= 𝜖
req ¬(Reveal[vid] ∨ Chall[vid])
𝐼0 ← Key[vid]
𝐼1 ← I
Chall[vid] ← true
return 𝐼𝑏
// Welcome msg. of epoch vid delivered to ID
dlv-WM(vid, ID)
req *compat-dlv-WM(vid, ID)
𝑊pub ← WM-pub[vid, ID]
𝑊priv ← WM-priv[vid, ID]
ikid ← HG.addedIK(vid, ID)
isk ← IK-SK[ikid]
let 𝑣 s.t. 𝑣.vid = vid
orig ← 𝑣.orig = vid
(𝛾[ID], GI, 𝐼) ← Join(ID, orig,𝑊pub,𝑊priv, isk)
if ¬HG.checkGI(vid, GI) ∨ Key[vid] ̸= 𝐼
if ¬Del[ID]
IK-St[ID] −← ikid
V-Pt[ID] ← vid
return GI
win
IK-Tr[ID] +← ikid
Figure 12: Part one of oracles for message processing, cor-
ruption, and challenges of the security game for continuous
group key agreement schemes. The compatibility functions are
described in the accompanying text; a formal description is
provided in Figure 14.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1479// Corrupt ID
corr(ID)
V-Lk +← {(vid, ID) | vid ∈ {V-Pt[ID]} ∪ V-Tr[ID]}
IK-Lk +← IK-St[ID] ∪ IK-Tr[ID]
HG.corrHanging(ID)
return 𝛾[ID]
// Enable no-delete for ID
no-del(ID)
disable deletions for ID
Del[ID] ← false
return ∀vid : Chall[vid] =⇒ *CGKA-priv(vid)
// Safety for privacy
*priv-safe
Figure 13: Part two of oracles for message processing, cor-
ruption, and challenges of the security game for continuous
group key agreement schemes. The compatibility functions are
described in the accompanying text; a formal description is
provided in Figure 14.
as a child of ID’s current epoch V-Pt[ID] and returns vid = 𝑣.vid.
Note that the key output by Commit is stored in array Key. Further-
more, observe that the algorithm outputs (one) public and several
private welcome messages (one for each newly added party). The
private welcome messages are not returned to A and are deliv-
ered securely to their intended recipient—the idea being that these
messages are encrypted by the higher-level application.
Process control messages. The oracles process and dlv-WM (Fig-
ure 13) allow the attacker to deliver commit messages (to existing
group members) resp. welcome messages (to new group members).
The oracles works much like their SGM counterparts, except that
all the information required by Proc-Com resp. Join is supplied by
the game. The oracles also check that the key 𝐼 output by Proc-Com
resp. Join and matches the one stored in array Key during the cor-
responding call to commit.
Key-reveal and challenge oracles. For each epoch, the attacker A
gets to either see the actual key output by the protocol or a challenge
by calling reveal or chall (Figure 13), respectively. Oracle chall
outputs either the real key or a completely random one, depending
on the secret internal bit 𝑏 chosen at the onset of the game.
Corruption oracles. The oracles related to corruption in the CGKA
game (Figure 13) are:
• corr(ID): leaks the state of ID to A;
• no-del(ID): instructs ID to stop deleting old values.
Safety. At the end of the execution of the CGKA security
A.2.6
game, the procedure *priv-safe ensures that the attacker has only
challenged in epochs that are considered secure by the (generic)
safety predicate *CGKA-priv. If the condition is not satisfied, the
attacker loses the game.
A.2.7 Advantage. Let Π = *CGKA-priv be the generic safety pred-
icate used in the CGKA definition. The attacker A is parameterized
by it’s running time, 𝑡, and the number of challenge queries, 𝑞, and
referred to as (𝑡, 𝑞)-attacker. The advantage of A against a CGKA
scheme K w.r.t. to predicate Π is denoted by AdvK
CGKA,Π(A).
Definition A.1. A CGKA scheme K is (𝑡, 𝑞, 𝜀)-secure w.r.t. predicate
Π, if for all (𝑡, 𝑞)-attackers,
AdvK
CGKA,Π(A) ≤ 𝜀 .
*compat-create(ID, ikid)
chk ikid ∈ IK-St[ID]
return V-Pt[ID] = vidroot
*compat-prop(op, ID, ID′, ikid)
vid ← V-Pt[ID]
chk vid ̸= vidroot
𝐺 ← HG.roster(vid)
select op
case add do
chk ∃ipk′ : IK-PK[ikid′] = ipk′
chk ID′ /∈ 𝐺
chk ID′ ∈ 𝐺
case rem do
*compat-commit(ID, pid)
return true
vid ← V-Pt[ID]
chk vid ̸= vidroot
G ← HG.roster(vid)
for pid ∈ pid
𝑝 ← Props[pid]
chk 𝑝.vid = vid
G ← *app-prop(G, 𝑝)
chk G ̸= ⊥
chk ID /∈ G
return true
*compat-process(vid, ID)
chk HG.isChild(V-Pt[ID], vid)
return true
*app-prop(G, 𝑝)
req 𝑝.orig ∈ G
select 𝑝.op
case add do
(ID′, ·) ← 𝑝.data
req ID′ /∈ G
G +← ID′
case rem do
ID′ ← 𝑝.data
req ID′ ∈ 𝐺
G −← ID′
return G
*compat-dlv-WM(vid, ID)
chk V-Pt[ID] = vidroot
ikid ← HG.addedIK(vid, ID)
chk ikid ̸= ⊥
∧ ikid ∈ IK-St[ID]
return true
Figure 14: Compatibility oracles of the security game for con-
tinuous group key agreement schemes.
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1480B FORWARD-SECURE GROUP AEAD
B.1 Syntax
• 𝑣 ← Init(𝑘𝑒, 𝑛, ID): takes as input a key 𝑘𝑒, the group size 𝑛,
as well as a party ID ID and generates the initial state.
• (𝑣′, 𝑒) ← Send(𝑣, 𝑎, 𝑚) generates ciphertext 𝑒 encrypting
plaintext 𝑚 and authenticating associated data 𝑎;
• (𝑣′, S, 𝑖, 𝑚) ← Rcv(𝑣, 𝑎, 𝑒): decrypts ciphertext 𝑒 to plaintext
𝑚 and verifies associated data 𝑎; also outputs a pair (S, 𝑖)
consisting of sender ID S and message index 𝑖.
B.2 Security
B.2.1 Main oracles. The oracles of the FS-GAEAD game are de-
picted in Figure 15.
Initialization. At the onset of the FS-GAEAD security game, a
random bit 𝑏 and a uniformly random key 𝑘𝑒 are chosen, and the
initialization algorithm is run for all group members in 𝐺 (which
is specified by an argument to the initialization procedure). The
security game also initializes a message counter 𝑖[ID] for each party.
Additionally, the game maintains the following variables, which
work analogously to their counterparts in the SGM game.
by S was a challenge,
deleted key material by ID,
• a set Chall of pairs (S, 𝑖) recording that the 𝑖th message sent
• a trash array AM-Tr[ID] of pairs (S, 𝑖) keeping track of non-
• a set AM-Lk of elements (ID, AM-Rcvd, AM-Tr[ID]), where
AM-Tr[ID] keeps track of the messages whose key material is
leaked via corruption of ID, and AM-Rcvd are the messages
that have been already received at the time of corruption.
• a Boolean array Del[ID] keeping track of which parties are
• an array AM[S, 𝑖, R] of triples (𝑎, 𝑚, 𝑒) consisting of associated
deleting old values, and
data (AD), plaintext, and ciphertext.
The recorded data informs a safety predicate *priv-safe evaluated
at the end of the game to determine whether a given execution was
legal.
Sending messages and challenges. The oracle send(S, 𝑎, 𝑚) allows
the attacker to have party S send AD 𝑎 and message 𝑚 (to all
other group members). The oracle runs algorithm Send, which
produces a ciphertext 𝑒. The triple (𝑎, 𝑚, 𝑒) is recorded in array AM.
Oracle chall works similarly, except that it takes two (equal-length)
messages as input and passes one of them to Send; which one is
chosen is determined by the secret random bit 𝑏 chosen initially.
Furthermore, the pair (S, 𝑖[S]) is recorded as being a challenge.
Delivering and injecting ciphertexts. Oracle dlv-AM(S, 𝑖, R) allows
A to have the ciphertext corresponding to the 𝑖th message sent
by S delivered to R. The ciphertext and the corresponding AD are
fed to algorithm Rcv, which must correctly decrypt the ciphertext
and identify sender S and message number 𝑖. The pair (S, 𝑖) is set as
“received” by R by setting AM[S, 𝑖, R] ← received which indicates
that the corresponding key material should now have been deleted
by R; in case R does not delete old values (i.e., Del[R] = false), the
pair is added to AM-Tr.
// Initialize group
init(𝐺)
𝑏 ← {0, 1}
𝑘𝑒 ← K
for ID ∈ 𝐺
𝑣[ID] ← Init(𝑘𝑒, |𝐺 |, ID)
𝑖[ID] ← 0
Chall ← ∅
AM-Tr[·] ← ∅
AM-Lk ← ∅
AM[·, ·, ·] ← 𝜖
Del[·] ← 𝜖
// S sends 𝑚 with AD 𝑎
send(S, 𝑎, 𝑚)
(𝑣[S], 𝑒) ← Send(𝑣[S], 𝑎, 𝑚)
𝑖[S]++
for R ∈ 𝐺 \ {S}
return 𝑒
AM[S, 𝑖[S], R] ← (𝑎, 𝑚, 𝑒)
// Corruption of ID
corr(ID)
AM-Rcvd ← {(S, 𝑖) | AM[S, 𝑖, ID] = received}
AM-Lk +← (ID, AM-Rcvd, AM-Tr[ID])
return 𝑣[ID]
// Message delivery
dlv-AM(S, 𝑖, R)
req AM[S, 𝑖, R] ̸= {𝜖, received}
(𝑎, 𝑚, 𝑒) ← AM[S, 𝑖, R]
(𝑣[R], S′, 𝑖′, 𝑚′) ← Rcv(𝑣[R], 𝑎, 𝑒)
if (S′, 𝑖′, 𝑚′) ̸= (S, 𝑖, 𝑚)
win
if ¬Del[R]
AM-Tr[R] +← (S, 𝑖)
AM[S, 𝑖, R] ← received
// stop deletions for ID
no-del(ID)
Del[ID] ← false
// Message injection
inj-AM(𝑎′, 𝑒′, R)
req ∀S, 𝑖, 𝑖 : AM[S, 𝑖, R] ̸= (𝑎′, 𝑖, 𝑒′)
(𝑣[S], S′, 𝑖′, 𝑚′) ← Rcv(𝑣[R], 𝑎, 𝑒)
if 𝑚′ ̸= ⊥
win
AM[S′, 𝑖′, R] ← received
return (S′, 𝑖′, 𝑚′)
// S challs 𝑚0, 𝑚1
chall(S, 𝑎, 𝑚0, 𝑚1)
req |𝑚0|= |𝑚1|
(𝑣[S], 𝑒) ← Send(𝑣[S], 𝑎, 𝑚𝑏)
𝑖[S]++
for R ∈ 𝐺 \ {S}
Chall +← (S, 𝑖)
return 𝑒
AM[S, 𝑖[S], R] ← (𝑎, 𝑚, 𝑒)
// Safety predicate