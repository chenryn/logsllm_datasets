title:Assessing Browser-level Defense against IDN-based Phishing
author:Hang Hu and
Steve T. K. Jan and
Yang Wang and
Gang Wang
Assessing Browser-level Defense against IDN-based Phishing
Hang Hu*2, Steve T.K. Jan*1,2, Yang Wang1, Gang Wang1
1University of Illinois at Urbana-Champaign 2Virginia Tech
{hanghu, tekang}@vt.edu, {yvw, gangw}@illinois.edu
Abstract
Internationalized Domain Names (IDN) allow people around
the world to use their native languages for domain names.
Unfortunately, because characters from different languages
can look like each other, IDNs have been used to imperson-
ate popular domains for phishing, i.e., IDN homograph. To
mitigate this risk, browsers have recently introduced defense
policies. However, it is not yet well understood regarding how
these policies are constructed and how effective they are.
In this paper, we present an empirical analysis of browser
IDN policies, and a user study to understand user perception
of homograph IDNs. We focus on 5 major web browsers
(Chrome, Firefox, Safari, Microsoft Edge, and IE), and 2 mo-
bile browsers (Android Chrome and iOS Safari) and analyze
their current and historical versions released from January
2015 to April 2020. By treating each browser instance as a
black box, we develop an automated tool to test the browser
policies with over 9,000 testing cases. We ﬁnd that all the
tested browsers have weaknesses in their rules, leaving oppor-
tunities for attackers to craft homograph IDNs to impersonate
target websites while bypassing browsers’ defense. In addi-
tion, a browser’s defense is not always getting stricter over
time. For example, we observe Chrome has reversed its rules
to re-allow certain homograph IDNs. Finally, our user study
shows that the homograph IDNs that can bypass browsers’
defense are still highly deceptive to users. Overall, our results
suggest the need to improve the current defense against IDN
homograph.
1 Introduction
The Internet is progressively globalizing, and yet for a long
time, most Internet domain names were restricted to English
characters (in combination with hyphen and digits) [43]. To
allow people around the world to use their native languages
for domain names, Internationalized Domain Names (IDN)
*Co-ﬁrst authors with equal contribution.
were introduced and standardized in 2003 [28], which support
Unicode characters from a variety of languages.
As more IDNs are registered, a growing concern is that
IDN can be used to impersonate other domain names for
phishing purposes. This is because different characters from
different languages can look like each other. For example, the
Latin character “a” looks similar to the Cyrillic character “a”.
As a result, attackers can register a domain name apple.com
with the Cyrillic “a” to impersonate the ofﬁcial website of
Apple. This is also called homograph attack [25]. Researchers
have analyzed real-world DNS records and found homograph
IDNs created for phishing [8, 35, 37, 61].
To mitigate the risk, browsers have designed defense
strategies to detect and warn users about homograph IDNs.
Commonly, browsers implement rules to detect homograph
IDNs that are likely impersonating other legitimate domain
names [18]. Once detected, browsers will no longer display
the Unicode, but display their Punycode version. Punycode
code is initially designed to translate IDNs to ASCII Compat-
ible Encoding so that they can be recognized by legacy proto-
cols and systems. For example, the Punycode for apple.com
with the Cyrillic “a” is “xn--pple-43d.com”. By display-
ing this Punycode in the address bar, browser vendors try to
protect users from deception.
In this paper, we want to systematically assess the browser-
level defense against homograph IDNs. We seek to answer
three classes of research questions:
• First, what policies do major browser vendors implement
to prevent IDN homographs, and how well do browser
vendors enforce the claimed policies?
• Second, are there ways to systematically bypass existing
policies to create homograph IDNs?
• Third, how well can end users recognize homograph IDNs?
Are homograph IDNs blocked by browsers more or less
deceptive than those that bypass existing defenses?
Empirical Tests.
To answer the ﬁrst two questions, we
focus on ﬁve major web browsers (Chrome, Firefox, Safari,
Microsoft Edge, and IE), and two mobile browsers (Android
Chrome and iOS Safari). We analyze their current and his-
torical versions released from January 2015 to April 2020.
We treat each browser version as a “black box”. Then we
construct more than 9,000 testing cases to examine 1) the
browser’s enforcement of known IDN policies; and 2) possi-
ble ways to bypass existing policies. To run a large number of
tests over various browsers and platforms, we build a tool to in-
strument browsers to load testing IDNs while video-recording
browsers’ reactions. Based on the recorded videos, we auto-
matically analyze how browsers handle different IDNs.
Our analysis has several key ﬁndings. First, all the browsers
have failed to detect certain types of homograph IDNs, with
a failure rate ranging from 20.62% to 44.46% Chrome has
implemented the strictest rules compared with other browsers.
Second, we show that it is possible to craft homograph IDNs
by exploiting the exceptions and blind spots of existing rules.
Several evasion methods are very effective, such as imperson-
ating less “popular” but critical websites (e.g., .gov, .org),
using extensive confusable characters and neglected Unicode
blocks (e.g., “Latin Extended-A”), and using whole-script
confusables (i.e., all the characters in a domain name are re-
placed by look-alike characters from a single script). Third,
although Chrome has strengthened its defense over time, we
ﬁnd that certain rules have been recently revoked, allowing
corresponding homograph IDNs to be displayed again. In
addition, browsers such as Firefox have not updated their
defense policies for years.
To examine whether (and how) the weaknesses in existing
IDN policies are exploited in practice, we analyzed 300 mil-
lion DNS records. We identiﬁed 900,000 real-world IDNs and
found 1,855 are homograph IDNs that impersonate popular
domain names. By loading these homograph IDNs against
recent browsers, we showed that the best performing Chrome
identiﬁed 64.1% of them (i.e., displaying Punycode), while
Safari and Firefox only identiﬁed 9.7% and 6.1%.
User Study.
To answer the third question, we run a user
study where participants examine a series of website screen-
shots. The domain names of the webpages are a mixture of
real domain names and homograph IDNs (including those that
are blocked by Chrome and those that can bypass Chrome).
We study users’ ability to judge the authenticity of the domain
names under mild priming. Our study shows that users are
signiﬁcantly better at identifying real domain names (94.6%
success rate) than identifying homograph IDNs. For exam-
ple, participants only have a success rate of 48.5% on IDNs
blocked by Chrome. In addition, we ﬁnd homograph IDNs
blocked by Chrome are indeed more deceptive than those not
blocked. Even so, the homograph IDNs that Chrome missed
can still deceive users for 45.8% of the time, posing a nontriv-
ial risk. Finally, we show that users’ education level, comput-
ing background, age, and gender have a signiﬁcant correlation
with their performance in judging domain authenticity, while
website popularity and category are not signiﬁcant factors.
Contributions.
In summary, our key contributions are:
• First, we systematically test browser-level defenses against
homograph IDNs. We show all of the tested browsers have
weaknesses in their policies and implementations, making
it possible for homograph IDNs to bypass the defense.
• Second, we develop a tool to automatically perform black-
box testing on browser IDN policies across browser ver-
sions and platforms. The tool can be used to monitor and
test future browsers.
• Third, we perform a user study to examine user perception
of homograph IDNs, and demonstrate the need to enhance
the current defense against IDN-based phishing. We have
disclosed our ﬁndings to related browser vendors.
2 Background
We start by brieﬂy introducing the background of internation-
alized domain names (IDN) and the related phishing risk.
Internationalized Domain Name (IDN).
A domain
name is an identiﬁcation string for Internet hosts or services.
Through the Domain Name System (DNS), a user-readable
domain name can be mapped to its corresponding IP address.
Originally, domain name only allowed ASCII (English) let-
ters, digits and hyphens [43]. In 2003, Internationalized Do-
main Name (IDN) was introduced to allow people, especially
non-English speakers, to use characters from their native lan-
guages to create domain names [28]. The new speciﬁcation
supports Unicode characters, which cover more than 143,000
characters from a variety of languages (154 scripts, divided
into 308 blocks) [66].
Punycode.
The challenge of using IDN is that non-ASCII
characters are not supported everywhere. To maintain compat-
ibility with existing protocols and systems, there needs to be
a way to convert IDNs to ASCII Compatible Encoding (ACE)
strings. The standardized mechanism is called International-
izing Domain Names in Applications (IDNA) [10, 56]. IDNA
converts Unicode labels to an ASCII Compatible Encoding
(ACE) label which is also called Punycode. Punycode always
starts with “xn--”. For example, Unicode string “bücher.de”
is mapped to Punycode “xn--bcher-kva.de.” IDNA has
been adopted by browsers and email clients to support IDNs.
Before sending a DNS query for IDN, the domain name is
usually translated to its Punycode ﬁrst to ensure the success
of the DNS resolving.
Homograph IDN and Phishing.
IDN has been used for
phishing because characters from different languages may
look like each other. For example, ASCII “a” (U+0061) looks
very similar to Cyrillic “a” (U+0430). An attacker thus can
use the Cyrillic “a” to construct an IDN to spoof legitimate do-
main names that contain the ASCII “a”, which is called homo-
graph attack [25]. Existing works have performed real-world
Records
DNS records
Unique domain names
Unique IDNs
Homograph IDNs
Count
347,014,213
143,482,491
916,805
1,855
Table 1: Analysis results of .com DNS zone ﬁle.
measurements and found homograph IDNs that impersonate
popular domain names [8, 35, 37, 61].
3 IDN Usage in the Wild
To provide the contexts of IDN usage and motivate our prob-
lem, we ﬁrst empirically analyze the DNS zone ﬁles. Through
the analysis, we aim to identify real-world homograph IDNs
that impersonate popular domain names. Then we test these
homograph IDNs against recent browsers to illustrate the
problems of browser-level defenses.
Dataset. We obtained the access to the “.com” zone ﬁle
from Verisign Labs1 in January 2020. “.com” is a top-level
domain (TLD) where most commercial websites are regis-
tered, and is one of the most popular TLDs. We choose .com
to illustrate the problem, and the same analysis methodology
can be applied to other TLDs too. As shown in Table 1, there
are 347 million DNS records in the zone ﬁle. Among them,
there are 143 million unique domain names. For each domain
name, we check whether it contains any character outside of
the ASCII table.
In total, we ﬁnd 916,805 IDNs. While the percentage is not
high (0.64% of all .com domain names), the absolute number
of IDNs is still nearly 1 million. We observe that most IDNs
come from East Asia and Europe, which is consistent with that
of a prior study [37]. We also ﬁnd script mixing is common.
Out of the 916,805 IDNs, 315,671 (34.4%) domain names
have script mixing.
Homograph IDNs.
To identify homograph IDNs, we fol-
low a common detection method: 1) we select the domain
names from Alexa top 10,000 domains [1] as the imper-
sonation target; 2) We search for homograph candidates us-
ing a database of look-alike characters (e.g., “a” (U+0061)
looks like “a” (U+0430)). We use a comprehensive homo-
graph database from recent work [61]. This database covers
look-alike characters across all Unicode blocks that can be
displayed by browsers. To detect homograph IDNs, we re-
cursively replace the characters in the target domain name
with their look-alike characters (while keeping the TLD un-
changed), and then search the modiﬁed domain name in our
IDN list. Recursive character replacement means we would
replace multiple characters in the domain name if there are
candidate look-alike characters. If the modiﬁed domain name
is in the list, we consider it as a homograph IDN.
1Verisign Labs have made their datasets open to researchers: https:
//www.verisign.com/en_US/company-information/verisign-labs
In total, we identiﬁed 1,855 homograph IDNs that
impersonate 674 popular domain names. The top ﬁve
most impersonated targets were amazon.com, google.com,
paypal.com, canva.com, and gmail.com. For example,
xn--gmal-spa.com (gmaìl.com) impersonates gmail.com.
Testing Homograph IDNs against Browsers.
Consid-
ering the potential risk of homograph IDNs, browsers have
implemented defense mechanisms. For example, when users
visit a homograph IDN, the browser will no longer display the
Unicode in the address bar. Instead, the corresponding Puny-
code is displayed to protect users from potential deception. To
understand the efﬁcacy of browsers’ IDN policies, we tested
the 1,855 real-world homograph IDNs by displaying them in
the recent Chrome 81.0, Safari 13.0, and Firefox 75.0. Dis-
playing a Punycode means browsers can successfully detect
and block the homograph IDN.
We ﬁnd that Chrome displays Punycode for 1,189 homo-
graph IDNs (64.1%); Safari and Firefox only display Pun-
ycode for 180 (9.7%) and 113 (6.1%) of them. Chrome’s
defense is stronger than that of Safari and Firefox. But even
so, Chrome has missed 35.9% of the homograph IDNs (more
than one third).
Note that our ﬁnding is slightly different from an earlier
study from 2018 [37] which showed Chrome’s defense was
effective against homograph IDNs discovered at that time
(100% detection rate). Our results indicate that attackers have
already exploited new ways to construct homograph IDNs to
bypass existing browser policies.
4 Testing IDN Policies in Browsers
To understand the reasons behind the above observation, we
want to take a closer look into the major browsers’ IDN de-
fense policies, and build testing cases to systematically eval-
uate them. This current section (Section 4) will be focused
on browser policies and constructing test cases. In Section 5,
we will present our testing results on the latest browsers and
their historical versions, and examine the longitudinal browser
policy changes.
4.1 Browsers’ IDN Policies
To understand how major browsers handle IDNs, we ﬁrst
select a set of popular browsers based on their current and his-
torical market shares [46, 60, 69]. We choose Chrome, Safari,
Firefox, IE, and Windows Edge to analyze their publicly-
available documentations and compare their claimed IDN
policies. Table 2 summarizes representative policies. Dif-
ferent browsers may share the same high-level policies (e.g.,
prohibiting script mixing) but implement them differently
(e.g., by deﬁning different mixing rules). Below, we discuss
each browser’s policies in detail.
Saf.
Fir.
X
X
Policy
P1: Unicode script mix (blocked)
P2: Unicode script mix (allowed)
P3: Skeleton rule (top domain)
P4: Confusable chars (blocked)
P5: Whole-script + allowed TLD
P6: Unicode script (allowed)
Table 2: The claimed policies of different browsers based on
public documentations.
Edge
X
X
X
X
X
Chr.
X
X
X
X
X
IE
X
X
X
Chrome.
For Chrome, we focus on the main policies re-
lated to IDN homograph and omit those related to IDNA
implementations [18]. First, Chrome deﬁnes policies to al-
low and disallow certain characters from different Unicode
scripts to be mixed in a single domain name (P1 and P2).
For example, Latin, Cyrillic or Greek characters cannot be
mixed with each other. This is to prevent homograph IDNs
such as “apple.com” where Cyrillic “a” (U+0430) is used
to mix with other Latin characters. Latin characters in the
ASCII range can be mixed only with Chinese, Japanese and
Korean; Han can be mixed with Japanese and Korean. Such
script mixing is allowed because these blocks rarely contain
look-alike characters.
Second, Chrome will compare the “skeleton” of the IDN
with top domain names2 (and domain names recently visited
by the user). The skeleton is computed, for example, by re-
moving diacritic marks (googlé.com with “é” replaced by
“e”). This rule is called skeleton rule (P3). Using the skeleton
rule, googlé.com will be ﬂagged due to its high similarity
with the popular domain name google.com.
Third, if an IDN contains mixed scripts and also confus-
able characters or dangerous patterns, Chrome will display
Punycode (P4). For example, this rule disallows U+0585 (Ar-
menian Small Letter Oh “o”) and U+0581 (Armenian Small
Letter Co “g”) to be next to Latin due to their similarity to the
Latin letters o and g.
Finally, P5 is used on domain names of whole-script con-
fusables. Whole-script confusable means the domain name
does not have mixing characters from different scripts. In-
stead, all the characters are from a single script but they look
similar with ASCII letters. In this case, Chrome will check if
the TLD is allowable. For example, attackers can construct
www.apple.com (xn--80ak6aa92e.com) where the domain
name only contains Cyrillic characters. In this case, since
TLD “.com” is not Cyrillic, it will be ﬂagged by this rule.
Firefox.
Firefox’s policies [45], as shown in Table 2, are
different from those of Chrome. For example, Firefox does
not have the skeleton rule to compare the IDN with popu-
lar domain names. Before 2012, Firefox only allowed IDNs
with certain TLDs to be displayed in Unicode. However, as