有鉴于此，JavaScript支持函数式编程（高阶函数、内置的map和reduce等）和面向对象编程（对象、继承）的混合编程风格也就不足为奇了。
1.2 语法
本节将介绍JavaScript的基本语法原则。
1.2.1 语法概述
一些语法的示例：
注意等于号的两种不同用法。
一个单独的等于号（=），用于为变量赋值。
三个连续的等于号（===），用于比较两个值（参见1.5.3“等式运算符”）。
1.2.2 语句和表达式
要理解JavaScript的语法，需要认识它的两大语法类别：语句和表达式。
语句“做事情”。程序其实就是一系列的语句的集合。如这个语句的示例，它用来声明（或创建）一个变量foo：
表达式产生值。它们通常是函数的参数，或是赋值的右边部分。比如：
JavaScript中有两种方式来实现if-then-else，这可以很好地说明语句和表达式之间的区别。语句的方式：
表达式的方式：
后面这种方式可以用于函数的参数（而前者不行）：
总之，在JavaScript中，表达式可以用在所有需要语句的地方。比如：
整个这行就是一条语句（所谓的表达式语句），但这个函数调用foo(7, 1)也是一个表达式。
1.2.3 分号
在JavaScript中，分号是可选的。然而，我推荐一直带上它，要不JavaScript会猜错语句的结束位置。详见7.5.3“自动分号插入”。
分号用于结束语句，而不是结束块。有一种情况你会看到分号出现在块之后：函数表达式作为一个表达式时。如果这样的表达式出现在语句的最后，它后面就会跟上一个分号：
1.2.4 注释
JavaScript有两种类型的注释：单行注释和多行注释。单行注释由两个斜杠//开始，行终止时结束：
多行注释限定在/＊和＊/之间：
1.3 变量和赋值
JavaScript里的变量在声明后使用：
1.3.1 赋值
变量声明和赋值可以同时进行：
也可以为一个已有变量进行赋值：
1.3.2 复合赋值运算符
在JavaScript中还会有复合赋值运算符，如+=。以下两种赋值实际上是相等的：
1.3.3 标识符与变量名
标识符是JavaScript中各种语法的名称。例如，变量的名字就是一个标识符。标识符区分大小写。
大致来讲，标识符的第一个字符可以是任意Unicode字符、美元符（$），或者下划线（_）。后面的字符除此之外还可以为任意Unicode数字。因此，以下这些都是合法的标识符：
以下标识符为保留字——它们是语法的一部分，不能作为变量名使用（包括函数名和参数名）：
以下三个标识符不是保留字，但同样需要视为保留字：
最后，对一些标准的全局变量名，同样需要避开（参见第23章）。虽然它们用作局部变量时不会破坏什么，但这还是会使你的代码变得令人困惑。
1.4 值
JavaScript有很多值，都是我们预期的编程语言的值：布尔值、数字、字符串、数组等。在JavaScript中所有的值都有属性。每一个属性都有一个key（或者是name）和一个value。可以认为，属性就像是一条记录的字段。通过点（.）操作符可以读取属性：
例如，字符串'abc'有length这个属性：
这段代码也可以写为：
点操作符同样可以用于给属性赋值：
我们也可以通过点操作符来调用方法：
在上面的示例中，我们在值hello上调用了toUpperCase()方法。
1.4.1 原始值和对象
JavaScript中，对值的区分有点自由。
原始值包括布尔值、数字、字符串、null和undefined。
其他的值都是对象。
这两者之间最主要的区别在于它们的比较方式；每个对象都有唯一的标识且只（严格地）等于自己：
相反，所有的原始值，只要编码值相同，则被认为相等：
后面两节将更详细地介绍原始值和对象。
1.4.2 原始值
以下即为所有的原始值（或简称为primitives）。
布尔值：true、false（参见1.5“布尔值”）
数字：20156、1.351（参见1.6“数字”）
字符串：'dh'、"abc"（参见1.8“字符串”）
两个“空值”：undefined、null（参见1.4.4“undefined和null”）
原始值具有以下特点。
（1）按值进行比较
内容比较：
（2）不可改变
其属性不能被改变、添加或移除：
（读取一个未知属性时，总会返回undefined。）
1.4.3 对象
所有的非原始值都是对象。最常见的对象如下。
简单对象，可以通过对象字面量来创建（参见1.14.1“单一对象”）：
上述对象有两个属性：属性firstName的值是Jane，属性lastName的值是Doe。
数组，可以通过数组字面量来创建（参见1.15“数组”）：
上面的数组有3个元素，可以通过数字索引来访问它们。例如，'apple'的索引是0。
正则表达式，可以通过正则表达式字面量来创建（参见1.16“正则表达式”）：
对象具有以下特点。
（1）按引用进行比较
比较身份标识；每个值都有各自的身份标识：
（2）默认可变
对象属性可以很自由地被改变、添加和移除（参见1.14.1“单一对象”）：
1.4.4 undefined和null
大多数编程语言都会有一些值去表示丢失的信息。JavaScript有两个类似的“空值”，undefined和null。
undefined的意思是“没有值”。未被初始化的变量即为undefined：
丢失的参数也会是undefined：
访问不存在的属性，也会得到undefined：
null的意思是“没有对象”。在用到对象的时候它表示空值（例如参数、对象链中的最后一个元素等）。
警告：
 undefined和null没有属性，甚至连toString()这种标准方法都没有。
检查undefined或null
通常，函数允许透过undefined或null来表示缺失的值。可以通过以下显式的检查来做到同样的事情：
也可以利用undefined和null都可被视为false这一事实来处理：
警告：
 false, 0, NaN, 和 '' 都可被视为false（参见1.5.1“真值与假值”）。
1.4.5 使用typeof和instanceof对值分类
有两种对值进行分类的操作符：typeof主要用于原始值，instanceof用于对象。
typeof用法形如：
它的返回值会是一个表示这个值“类型”的字符串。如以下示例：
表1.1列出了typeof会得到的所有结果：
表1.1
操作数
结果
undefined
'undefined'
null
object
布尔值
boolean
数字
number
字符串
string
函数
function
所有其他的常规值
object
引擎创建的值
JavaScript引擎可以被允许去创建一些值，且typeof的结果可以返回任意字符串（可以与表中列出的结果都不一样）
typeof null返回object是一个不能去修正的bug，因为这会破坏现有的代码。但这并不表示null是一个对象。
instanceof用法形如：
如果value是一个通过Constr构造器创建的对象，则返回true（参见1.14.5“构造函数：对象工厂”）。如以下示例：
1.5 布尔值
原始布尔类型包含true和false两个值。以下运算符会产生布尔值。
二元逻辑运算符：&&（与）， || （或）。
前置逻辑运算符：! （非）。
比较运算符。
相等运算符：===、!==、==、!=。
排序运算符（针对字符串及数字）：>，>=，<，<=。
1.5.1 真值与假值
在JavaScript中，可以使用任意值来表示布尔值（如作为if语句的条件）。它们都会被解释成true或false。以下的值会被解释成false。
undefined、null。
布尔值：false。
数字：-0、NaN。
字符串：' '。
其他所有的值（包括所有的对象）都会被当成true。被解释为false的值可被称为假值，被解释为true的值可被称为真值。Boolean()作为函数调用时，会将传入的参数转换为一个布尔值。可以用它来测试看看一个值是如何被解释的：
1.5.2 二元逻辑运算符
JavaScript中的二元逻辑运算符是短路的。因为如果第一个运算数就足以确定结果的话，则不会对第二个运算数做评估。例如，以下表达式，其中的foo()函数永远不会被调用：
此外，二元逻辑运算符会返回运算数中的一个——可能是一个布尔值，也可能不是。对真假的检查将用于确定返回哪一个。
（1）与（&&）
如果第一个运算数是假值，返回它。否则，返回第二个运算数。
（2）或（||）
如果第一个运算数是真值，返回它。否则，返回第二个运算数。
1.5.3 等式运算符
JavaScript有两种类型的相等。
常规的，或“宽松的”相等（或不相等）：== 和 !=。
严格的相等（或不相等）：=== 和 !==。
常规相等，更多考虑值是否相等（详细解释参见9.3.2“普通（宽松）相等（==，!=）”），这种方式可以隐藏一些bug。因此，推荐使用严格相等。
1.6 数字
JavaScript中所有的数字都是浮点数：
也包含一些特殊的数字：
NaN（“not a number”）
一个错误的值：
Infinity
多数情况下也是一个错误的值：
Infinity比任何一个数都要大（NaN除外）。同样的，-Infinity比任何一个数都要小（NaN除外）。这使得这两个数字常用来作为默认值（比如，当你需要一个最小值和最大值的时候）。
1.7 运算符
JavaScript具有如下算术运算符（参见11.8“算术运算符”）。
加法：数字1 + 数字2。
减法：数字1 - 数字2。
乘法：数字1 * 数字2。
除法：数字1 / 数字2。
取模：数字1 % 数字2。
增量：++变量，变量++。