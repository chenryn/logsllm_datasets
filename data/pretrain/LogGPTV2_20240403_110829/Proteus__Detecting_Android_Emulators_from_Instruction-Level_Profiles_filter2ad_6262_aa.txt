title:Proteus: Detecting Android Emulators from Instruction-Level Profiles
author:Onur Sahin and
Ayse K. Coskun and
Manuel Egele
Proteus: Detecting Android Emulators
from Instruction-Level Proﬁles
Onur Sahin(B), Ayse K. Coskun, and Manuel Egele
Boston University, Boston, MA 02215, USA
PI:EMAIL
Abstract. The popularity of Android and the personal information
stored on these devices attract the attention of regular cyber-criminals
as well as nation state adversaries who develop malware that targets this
platform. To identify malicious Android apps at a scale (e.g., Google Play
contains 3.7M Apps), state-of-the-art mobile malware analysis systems
inspect the execution of apps in emulation-based sandboxes. An emerg-
ing class of evasive Android malware, however, can evade detection by
such analysis systems through ceasing malicious activities if an emulation
sandbox is detected. Thus, systematically uncovering potential meth-
ods to detect emulated environments is crucial to stay ahead of adver-
saries. This work uncovers the detection methods based on discrepancies
in instruction-level behavior between software-based emulators and real
ARM CPUs that power the vast majority of Android devices. To sys-
tematically discover such discrepancies at scale, we propose the Proteus
system. Proteus performs large-scale collection of application execution
traces (i.e., registers and memory) as they run on an emulator and on
accurate software models of ARM CPUs. Proteus automatically identi-
ﬁes the instructions that cause divergent behavior between emulated and
real CPUs and, on a set of 500K test programs, identiﬁed 28K divergent
instances. By inspecting these instances, we reveal 3 major classes of root
causes that are responsible for these discrepancies. We show that some of
these root causes can be easily ﬁxed without introducing observable per-
formance degradation in the emulator. Thus, we have submitted patches
to improve resilience of Android emulators against evasive malware.
1
Introduction
Android is a fast growing ecosystem. By acting as a trusted medium between
developers and users, application repositories (e.g., Google Play Store) have
enabled explosive growth in the number of mobile applications available to bil-
lions of users worldwide [6]. Currently, the Play Store consists of more than 3.7M
Android applications with thousands of new applications emerging every day [9].
Unfortunately, this massive ecosystem is also appealing to miscreants who seek
to infect a wide set of users with malicious applications.
To protect users, malware analysis systems are widely used in both academia
and industry. Since malware can easily defeat static analysis via obfuscation and
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 3–24, 2018.
https://doi.org/10.1007/978-3-030-00470-5_1
4
O. Sahin et al.
packing [14], contemporary analysis systems for Android adopt dynamic analysis
to inspect the runtime behavior of applications. State-of-the-art malware analyz-
ers for Android are based on emulators [23,28,30], which can easily scale across
multiple hosts to inspect vast number of Android apps. Such emulation-based
analysis also oﬀers easy instrumentation [30] and fast state restore capabilities
(e.g., orders of magnitude faster than bare-metal [22]), making the emulation-
based analysis approach appealing to security researchers and practitioners.
The eﬀectiveness of these dynamic malware analysis systems, however, is
largely at risk due to an emerging class of evasive malware. Such malware looks
for discrepancies that exist between emulated and real systems before triggering
any malicious attempt. By ceasing malicious activities on an emulated enviro-
ment, the malware can thwart existing emulator-based malware analyzers. The
situation is alarming as studies show a rising number of malware instances that
employ evasion tactics [18] (e.g., Branco et al. ﬁnd evasion methods in more than
80% of 4M malware samples [13]). For Android, several recent classes of evasive
malware (e.g., Xavier [1], Grabos [7]) have already been identiﬁed in the Play
Store. A crucial step for defending against such malware is to systematically
extract the discrepancies between emulated and real systems. Once discovered,
such discrepancies can be eliminated [19] or can be used to inspect applications
for presence of evasion tactics leveraging these artifacts [13].
Many of the approaches to date [10,25,29] discover discrepancies of
emulation-based sandboxes in an ad hoc fashion by engineering malware samples
or speciﬁc emulator components (e.g., scheduling). Such manual approaches can-
not provide large-scale discovery of unknown discrepancies, which is needed to
stay ahead of adversaries. Recent work [17] automatically identiﬁes ﬁle system
and API discrepancies used by several Android malware (e.g., [1,7]). Evasion
tactics that rely on such artifacts can be rendered ineﬀective by using modiﬁed
system images and ensuring the API return values match those in real devices
[12]. Besides API/ﬁle checks, a malware can also leverage diﬀerences in the
semantics of CPU instructions to ﬁngerprint emulation [13] (e.g., by embedding
checks in the native code [25]). As opposed to ad hoc approaches or API/ﬁle
heuristics, our work focuses on systematically discovering instruction-level dis-
crepancies that are intrinsically harder to enumerate and ﬁx for modern complex
CPUs.
Prior discoveries of instruction-level discrepancies in emulated CPUs are lim-
ited to x86 instruction set [21,24,27], while the vast majority mobile devices use
ARM CPUs. Despite the large number of discrepancies reported in prior work
[21,24], such ﬁndings are not readily useful for improving the ﬁdelity of emu-
lators as their analysis does not reveal the root causes of discrepancies. Such
analysis of root causes is essential as not all discrepancies are reliable detection
heuristics due to Unpredictable ARM instructions [4], whose behavior varies
across platforms. In addition, reliance on physical CPUs to obtain the ground
truth instruction behavior poses practical limitations on the number of test cases
(e.g., instructions, register/memory operands, system register settings) that can
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles
5
be covered. Approaches to improve coverage [27] are based on heavy analysis of
ISA speciﬁcations, which are notorious for their complexity and size.
To address the shortcomings above and identify instruction-level discrepan-
cies in Android emulators at a scale, we propose to collect and analyze a large
number of instruction-level traces corresponding to execution on real ARM CPUs
and emulators. By recording how each ARM instruction modiﬁes the architec-
tural state (i.e., registers and memory) on an emulated and real ARM CPU, we
can automatically detect divergences that are directly observable by user-level
programs. To scale the divergence analysis system, we demonstrate the feasibility
of using accurate software models for ARM CPUs instead of physical hardware.
We build our instruction-level analysis framework into a new system, Pro-
teus. Proteus automatically identiﬁes architectural diﬀerences between real
and emulated ARM CPUs. Proteus uses oﬃcial software models for ARM
CPUs (i.e., Fast Models [3]) to gather detailed and accurate instruction-level
traces corresponding to real CPU operation. We instrument QEMU to collect
traces for emulated CPUs. We target QEMU as it forms the base of state-of-the-
art Android malware analysis systems [23,28,30] as well as the Android SDK
emulator. We evaluate our system with over a million CPU instructions. Our
randomized test cases allow us to examine instruction behavior that would not
be triggered during execution of conventional compiler-generated programs.
Proteus automatically groups the instructions that generate similar diver-
gent behavior and reveals several major classes of instruction-level discrepancies
between emulated and real ARM CPUs. We ﬁnd that a single root cause (e.g.,
relaxed opcode veriﬁcation) can account for a large number divergent cases and
that some of these sources of divergences can be eliminated by minor modiﬁ-
cations in the QEMU source code. To improve resilience of Android emulators
against detection via CPU semantic attacks, we have disclosed our root cause
ﬁndings including patches where appropriate to the QEMU community1. Our
evaluation of discovered discrepancies on physical devices and SDK emulators
demonstrates how unprivileged user-mode programs can deterministically ﬁn-
gerprint Android emulators to easily perform CPU semantic attacks (e.g., by
using a few CPU instructions in native code). To the best of our knowledge, this
is the ﬁrst systematic study to demonstrate instruction semantic attacks against
QEMU’s ARM support. Overall, we make the following speciﬁc contributions:
– Proteus: We design, implement, and evaluate a scalable approach for dis-
covering discrepancies between emulated and real ARM CPUs (Sect. 3). Our
system collects a large number of instruction-level traces from accurate soft-
ware models of ARM CPUs and from an instrumented QEMU instance. Pro-
teus automatically identiﬁes the instructions and conditions that cause a
divergence, and groups instructions with similar behavior to facilitate further
inspection for root cause analysis (Sect. 4).
– Novel Attack Surface: We systematically analyze the divergences found
by Proteus and uncover novel detection methods for Android emulators
1 We have eliminated several root causes as part of our work and have already sub-
mitted a patch.
6
O. Sahin et al.
based on instruction-level diﬀerences between emulated and real ARM CPUs
(Sect. 5.1). We show the eﬀectiveness of these methods for deterministically
distinguishing physical devices from Android emulators (Sect. 5.3).
– Fidelity Improvements: We identify a set of root causes (Sect. 5.2) that
are responsible for a large set of divergences. We show that some of these root
causes can be eliminated in Android emulators through minor ﬁxes without
causing any observable performance overhead (Sect. 5.4).
2 Background
This section provides a brief overview of the ARM architecture and clariﬁes the
terminology that we use throughout the rest of this paper. We also describe the
attack model we are assuming in this work.
2.1 ARMv7-A Architecture
This paper focuses on ARMv7-A instruction set architecture (ISA), the vastly
popular variant of ARMv7 that targets high-performance CPUs which support
OS platforms such as Linux and Android (e.g., smartphones, IoT devices). The
ARM architecture implements a Reduced Instruction Set Computer (RISC)
organization where memory accesses are handled explicitly via load/store
instructions. Each ARM instruction is of ﬁxed 32-bit length. ARMv7-A features
16 32-bit registers (i.e., 13 general purpose registers (R0-R12), stack pointer (SP),
link register (LR), program counter (PC)) accessible in user-mode (usr) programs.
The CPU supports 6 operating modes (usr,hyp,abt,svc,fiq,irq) and 3 privilege
levels PL0, PL1 and PL2 (i.e., lower numbers correspond to lower privilege levels).
The Current Program Status Register (CPSR) stores the CPU mode, execution
state bits (e.g., endianness, ARM/Thumb instruction set) and status ﬂags.
Undefined Instructions: The ARMv7 speciﬁcation explicitly deﬁnes the set
of encodings that do not correspond to a valid instruction as architecturally
Undefined. For example, Fig. 1 shows the encoding diagram for multiplication
instructions in ARMv7. The architecture speciﬁcation [4] states that the instruc-
tions are Undefined when the op ﬁeld equals 5 or 7 in this encoding.
Fig. 1. Encoding diagram for multiplication instructions in ARMv7 ISA [4].
An Undefined instruction causes the CPU to switch to the undeﬁned (und)
mode and generates an undeﬁned instruction exception. An undeﬁned instruction
exception is also generated when an instruction tries to access a co-processor that
is not implemented or for which access is restricted to higher privilege levels [4].
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles
7
Unpredictable Instruction Behavior: The ARM architecture contains a
large set of instruction encodings for which the resulting instruction behavior is
unspeciﬁed and cannot be relied upon (i.e., Unpredictable). ARM instructions
can exhibit Unpredictable behavior depending on speciﬁc cases of operand
registers, current CPU mode or system control register values [4]. For example,
many instructions in the ARM architecture are Unpredictable if the PC is used
as a register operand. In addition, some instruction encoding bits are speciﬁed as
“should be” and denoted as “(0)” and “(1)” in ARM’s oﬃcial encoding diagrams.
While diﬀerent encodings for “should be” bits do not correspond to diﬀerent
instructions, the resulting behavior is Unpredictable if a given encoding fails
to match against the speciﬁed “should be” bit pattern.
The eﬀect of an Unpredictable instruction is at
the sole discre-
tion of the CPU manufacturer and can behave as a NOP or Undefined
instruction, or can change the architectural state of CPU. Consider the
“LDMDA pc!,{r0,r1,r5,r6, r8,sp,lr}” Unpredictable instruction (encoded
as 0xE83F6163), which loads the given set of registers from consecutive memory
addresses starting at PC and writes the ﬁnal target address back to PC. This
instruction causes undeﬁned instruction exception on a real CPU while it mod-
iﬁes the PC and causes an inﬁnite loop on QEMU. Note that both behaviors
comply with the ARM speciﬁcation.
2.2 Threat Model
The aim of the malware author is to evade detection by the analysis tools and
distribute a malicious application to real users. The malware possesses a set of
detection heuristics to distinguish emulators from real devices. Malware achieves
evasion by ceasing any malicious behavior on an emulated analysis environment,
which could otherwise be ﬂagged by the analysis tool. Once the malware escapes
detection and reaches real users, it can execute the harmful content within the
application or dynamically load the malicious payload at runtime [26].
Our work focuses on discrepancies that are observable by user-level programs.
Thus, we assume applications running in usr mode at the lowest PL0 privilege
level. Since our technique detects emulators by natively executing CPU instruc-
tions and monitoring their eﬀects, we assume an Android application that con-
tains a native code. This is a common case for many applications (e.g., games,
physics simulations) that use native code for the performance-critical sections
and for the convenience of reusing existing C/C++ libraries [2,26].
We assume that applications are subject to dynamic analysis in a QEMU-
based emulation environment. Indeed, state-of-the-art dynamic analysis frame-
works that are commonly used in academia [28,30] and industry [23] use QEMU
as the emulation engine. In addition, the Android emulator that is distributed
with the Android SDK is also based on QEMU.
8
O. Sahin et al.
Fig. 2. Overview of Proteus.
3 Proteus System Architecture
The aim of the proposed Proteus system (Fig. 2) is to ﬁnd the diﬀerences
in semantics of instructions executed on a real and an emulated ARM CPU.
Proteus consists of a trace collection part and an analysis component to auto-
matically identify and classify divergences. This section provides an overview of
the core components of Proteus and describes its high-level operation.
Central to our system is collection of detailed instruction-level traces that
capture the execution behavior of programs on both emulated and real CPUs.
The traces capture all updates to user-visible registers as well as the operands
in memory transactions from load/store instructions. If a program terminates
by a CPU exception, the respective signal number is also recorded.
The “Program Generator” component ( 1 ) generates the test programs which
are used for collecting instruction-level traces and discovering discrepancies. Note
that ARM CPU emulation in QEMU is inadvertently tested using millions of
apps by Android developers. Thus, programs generated for divergence identi-
ﬁcation should also exercise platforms for uncommon cases beyond the set of
instructions emitted by compilers and found in legitimate Android apps.
For each generated test program, we collect its instruction-level traces by
executing the same binary on two diﬀerent platforms ( 2 ) which provide the
traces corresponding to execution on an emulator and a real CPU.
The “Divergence Identiﬁcation & Categorization” component ( 3 ) compares
emulator and real CPU traces of a program to identify the initial point of
divergence. A divergence can be due to a mismatch in register values, mem-
ory operands or exception behavior. Divergent cases that stem from the same
mismatch are grouped together automatically to facilitate manual inspection of
discovered discrepancies. Our hypothesis behind the grouping is that there exist
a small number of root causes that cause the same divergent behavior (e.g.,
exception mismatch) on potentially a large set of test cases. For instance, we
can group together the divergent instructions that generate an illegal instruction
exception in a real CPU but execute as a valid instruction in emulator. We also
check if the divergent instruction is Unpredictable ( 4 ). Since Unpredictable
instructions can exhibit diﬀerent behavior across any two platforms, we do
Proteus: Detecting Android Emulators from Instruction-Level Proﬁles