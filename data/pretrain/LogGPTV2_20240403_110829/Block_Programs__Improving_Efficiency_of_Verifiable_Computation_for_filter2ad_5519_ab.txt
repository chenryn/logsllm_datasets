whether the wire is a left input, right input, or output of
each multiplication gate [16, 23]. The resulting set of poly-
nomials is a complete description of the original circuit.
3.2 A Recent Efﬁcient Argument System: Za-
atar
= (C1((cid:28) );··· ; CW ′ ((cid:28) )).
′′
The very recent work of [9] observes that QAPs can also
be viewed as linear PCPs. By re-designing the PCP query
generation and replacing the quadratic consistency checks
and circuit correctness checks with the divisibility check of
a QAP, Setty et al. successfully ﬁt QAPs into the frame-
work of Ginger [26]. The result is the novel protocol Zaatar
[24], which signiﬁcantly reduces the prover’s workload. The
key observation of Zaatar is that the evaluation of the poly-
nomial P (t) at the point t = (cid:28) can be simply written as:
P ((cid:28) ) = (⟨Z; q⟩+A0((cid:28) ))·(⟨Z; q
′′⟩+C0((cid:28) ));
where Z = (z1; z2;··· ; zW ′ ), q = (A1((cid:28) ); A2((cid:28) );··· ; AW ′ ((cid:28) )),
′
′⟩+B0((cid:28) ))−(⟨Z; q
= (B1((cid:28) ); B2((cid:28) );··· ; BW ′ ((cid:28) )), and q
q
Thus, P ((cid:28) ) can be evaluated through three standard PCP
queries to the dot product oracle (cid:25)Z (·) = ⟨Z;·⟩. If we rep-
resent the polynomials H(t) explicitly: H(t) = h|CZ|t
+
··· + h1t + h0 (where CZ is the set of constraints in Za-
atar), similar observations on H((cid:28) ) can be made: H((cid:28) ) =
⟨KH ; qH⟩ where KH = (h0; h1;··· ; h|CZ|) and qH = (1; (cid:28); (cid:28) 2;
··· ; (cid:28)
). Thus, H((cid:28) ) can also be evaluated through one
PCP query to the oracle (cid:25)H (·) = ⟨KH ;·⟩. If Z consists of the
input X with width |X| = N , output Y with width |Y | = N
′
and intermediate results R with |R| = W
), then
in order to guarantee that Y is the correct output when the
input is X, the veriﬁer needs to compute a part of ⟨Z; q⟩, and
also a part of ⟨Z; q
′′⟩, by himself. Consequently, V
only queries the linear function oracle (cid:25)R(·) = ⟨R;·⟩, instead
of (cid:25)Z (·). Zaatar inherits the single-commit-multi-decommit
protocol from Ginger [26].
′⟩ and ⟨Z; q
′ − (N + N
|CZ|
|CZ|
′
4. OUR THEORETICAL RESULTS: BLOCK
PROGRAMS (BPS)
Just as QSPs are a natural extension of span programs
(SPs) [20], our new form of arithmetization which we call
Block Programs (BPs), is a natural extension of Quadratic
Arithmetic Programs (QAPs). We focus on a kind of general
circuits, which may be an arithmetic circuit or a boolean
circuit, that is composed of identical units. This elementary
unit, which we call block, can be a simple NAND gate. But it
is more common to be a more complex sub-circuit. This kind
of sub-circuit can be multiple-input-multiple-output. The
sub-circuits can be viewed as pseudo-gates, a generalized
form of gates. Consider a scenario where the whole circuit
is composed of this kind of sub-circuits just like in Figure 1,
where all blocks are identical. We deﬁne BPs as follows.
Quadratic Arithmetic Programs (QAPs) [16])
Definition 2. (Block Programs)(BPs, Generalization of
We assume that a circuit computing a function Ψ : FN 7→
FN
is composed of identical substructures, all of which com-
pute the same function:   : FV 7→ FM . (  implies M func-
′
407Meaning
Index of Input of a Block
Index of Output of a Block
Index of Blocks
Index of wires in the circuit
w is represented as (w1; w2)
w is represented as (w1; w2)
the number of inputs of the circuit
the number of outputs of the circuit
Index of Direct Input of a Block
Index of Extra Input of a Block
Range
1; (cid:1) (cid:1) (cid:1) ; V
1; (cid:1) (cid:1) (cid:1) ; M
1; (cid:1) (cid:1) (cid:1) ; K
1; (cid:1) (cid:1) (cid:1) ; W
1; (cid:1) (cid:1) (cid:1) ; M + Q
1; (cid:1) (cid:1) (cid:1) ; K
1; (cid:1) (cid:1) (cid:1) ; M
1; (cid:1) (cid:1) (cid:1) ; Q
v
j
k
w
w1
w2
N
′
N
i
u
Figure 1: Computing through Blocks
Figure 2: Notations
tions  j : FV 7→ F where j = 1; 2;··· ; M . Each of these M
functions is associated to one of the outputs of  .)
A BP Q over ﬁeld F contains V sets of W polynomi-
als: {A1w(t)}, {A2w(t)}, ··· , {AV w(t)}, and M sets of
W polynomials : {B1w(t)}, {B2w(t)}, ··· , {BM w(t)}, for
w ∈ {1;··· ; W}, and a target polynomial D(t). We say Q
computes Ψ using block   if the following holds:
(z1; z2;··· ; zN +N′ ) ∈ FN +N
zN +N′+1;··· ; zW such that D(t) divides Pj(t), (j = 1;··· ; M ),
(
W∑
W∑
where Pj(t) =
is a valid assignment of Ψ’s
inputs and outputs, if and only if there exist coeﬃcients
W∑
)
′
zw · AV w(t)
− [
zw · Bjw(t)]:
 j
zw · A1w(t);··· ;
w=1
w=1
w=1
(4.1)
In other words, for each j, there exists a polynomial Hj(t)
such that D(t) · Hj(t) = Pj(t), where j = 1; 2;··· ; M .
K
After we deﬁne Block Programs, two natural questions
are: (1) do Block Programs exist? (2) if yes, how to con-
struct Block Programs? Here, we will show the existence
of Block Programs by constructing corresponding BPs by
polynomial interpolation. In particular, given a circuit that
computes Ψ and is composed of identical blocks denoted by
  : FV 7→ FM as above, we ﬁrstly construct a group of inter-
polation polynomials in Lagrange form. Then, we prove that
the constructed polynomials form the BP that computes Ψ.
Suppose the circuit is composed of K blocks. We pick an
∏
arbitrary value (cid:27)k for each block. When we pick these K
values from F, we make sure all these values are diﬀerent
from each other. We deﬁne the target polynomial as fol-
k=1(t − (cid:27)k). Now we consider the set of all
lows: D(t) =
the inputs of the circuit, and all the outputs of each block.
Firstly, we label each input of the whole circuit and each out-
put from a block with an index w, where w ∈ {1; 2;··· ; W}
and W is the total number of all wires, namely, all the inputs
of the whole circuit and all the outputs of each block. We
can easily deduce that W = N + K · M . (Recall that N is
the number of inputs to the whole circuit, K is the number
of blocks, and M is the number of outputs from a block)
Then the values of each input of the whole circuit and each
output from a block can be denoted by zw. Secondly, we
assign V + M interpolation polynomials in Lagrange form
to each wire, indicating whether the corresponding value zw
is the v-th input, or the j-th output of each block, where
v = 1; 2;··· ; V and j = 1; 2;··· ; M . These polynomials in-
deed determine how these blocks are interconnected. Thus,
the resulting set of polynomials is a complete description
of the original circuit. Speciﬁcally, we let the polynomi-
als {Avw(t)} (for w = 1; 2;··· ; W ) encode the v-th input
into each block, where v = 1; 2;··· ; V and let {Bjw(t)} (for
w = 1; 2;··· ; W ) encode the j-th output from each block,
where j = 1; 2;··· ; M . In particular, we let
{
{
Avw((cid:27)k) =
if zw is the v-th input to the k-th block;
1
0 otherwise:
(4.2)
Bjw((cid:27)k) =
if zw is the j-th output from the k-th block;
1
0 otherwise:
∏
∏
(4.3)
Based on the evaluations at the K values (cid:27)1;··· ; (cid:27)K ,
it is straightforward to construct {Avw(t)} and {Bjw(t)},
for w = 1;··· ; W , v = 1;··· ; V , and j = 1;··· ; M us-
ing interpolation polynomials in Lagrange form. Let K be
∑
the set of indices: K = {1; 2;··· ; K}. Then, Avw(t) =
Bjw((cid:27)k)·
Avw((cid:27)k)·
∏
k∈K
∏
k∗∈K;k∗̸=k
k∗∈K;k∗̸=k
We can show that {Avw(t)} and {Bjw(t)}, which we have
constructed using interpolation polynomials in Lagrange form,
constitute a BP that computes Ψ, where w = 1; 2;··· ; W ,
v = 1; 2;··· ; V , and j = 1; 2;··· ; M .
(t−(cid:27)k∗ )
((cid:27)k−(cid:27)k∗ ) , and Bjw(t) =
k∗∈K;k∗̸=k
k∗∈K;k∗̸=k
(t−(cid:27)k∗ )
((cid:27)k−(cid:27)k∗ ) .
∑
k∈K
′
Theorem 1. For a circuit which computes a function Ψ :
FN 7→ FN
, if the circuit is composed of identical blocks
denoted by   : FV 7→ FM , then {Avw(t)} and {Bjw(t)}
constructed above constitute a BP that compute Ψ, where
w = 1; 2;··· ; W , v = 1; 2;··· ; V , and j = 1; 2;··· ; M .
Proof. The rough idea of the proof is as follows. If we
evaluate {Avw(t)} and {Bjw(t)} in (cid:27)k, for w = 1; 2;··· ; W ,
v = 1; 2;··· ; V , and j = 1; 2;··· ; M , which we have con-
structed, we can observe that this makes the equation (4.1)
become:
Pj((cid:27)k) = j(the kth block’s inputs)−
(the kth block’s output):
(4.4)
This means that if the output is correct, then Pj((cid:27)k) = 0.
Namely, (cid:27)k is a root of Pj(t), which in turn means that
(t − (cid:27)k) divides Pj(t). If all blocks are computed correctly,
this results in D(t) dividing Pj(t).
Z1Z2Z3Z4Z5Z6Z7Z8Z9Z10Z11Z12Z13Z14Block No.1Block No.2Block No.3Block No.44085. OUR SCHEME: INTERACTIVE VERIFI-
CATION FOR LOOPS
In this section, we use the previously described Block Pro-
grams to develop the full solution to the veriﬁcation of a
“loop” computation. Since the theoretical results in Section
4 apply to all general circuits that have repeated substruc-
tures, which are not limited to those circuits that a piece
of “loop” code is mapped to, we are not directly ready for
designing the veriﬁcation protocol for a “loop” computation.
Thus, in Section 5.1, we further reﬁne the theoretical re-
sults we have developed in Section 4, to loop-speciﬁc results
which are more appropriate for the blocks to which a piece
of “loop” code is mapped. Then, in Section 5.2, we demon-
strate our veriﬁcation protocol for “loop” computations using
Block Programs.
5.1 Theoretical Results for Loop Circuits
As stated in Section 2, the computation task is a piece of
“loop” code written in a high-level programming language.
In the veriﬁcation stage, this piece of code is transformed
into an arithmetic circuit form using existing compilers such
as [26, 24, 23]. This arithmetic circuit, to which we map a
piece of code describing a loop, is called as a loop circuit.
It is straightforward to abstract the structure of this cir-
cuit as follows. As shown in Figure 3, a loop circuit is a series
of identical blocks, the output of each of which serves as the
input for the next. Each block, which is an arithmetic cir-
cuit or boolean circuit, is actually one loop iteration of the
original “loop” code. Meanwhile, since each loop iteration
may have extra inputs from the outside of the whole piece
of code, (e.g.
in the big data processing scenarios) each
block may have corresponding extra inputs from the outside
of the circuit. The block is demonstrated in Figure 4, where
EX
(2)
1 ; EX
In Section 4, we show that for a circuit that has repeated
substructures there exists a BP that computes that circuit.
We have introduced the theoretical results that show how
to construct the corresponding BP, and how to determine
whether a given (inputs, outputs) tuple is valid for that cir-
cuit using BPs. Since a loop circuit has repeated substruc-
tures, we can easily apply our previous results to loops.
(2)
Q are the extra inputs.
2 ;··· ; EX
(2)
Now, we consider a loop circuit as shown in Figure 3.
The circuit’s functionality is to compute a function Ψ :
FM +K·Q 7→ FM . The circuit is composed of identical blocks
as shown in Figure 4, denoted by   : FM +Q 7→ FM . The
block   can also be formulated as M functions:  j : FM +Q 7→
F, for j = 1; 2;··· ; M . By Theorem 1, we can construct a
BP Q that computes Ψ, where Q consists of a target poly-
nomial D(t), M + Q sets of K · (M + Q) + M polynomi-
als (See Figure 2 for notations): {A1;w(t)}, {A2;w(t)}, ··· ,
{AM;w(t)}, and M sets of K · (M + Q) + M polynomials:
{B1;w(t)}, {B2;w(t)}, ··· , {BM;w(t)}, where w is the index
which represents the labels of wires and K · (M + Q) + M
is the number of the wires.
Since a “loop” circuit has a regular structure, we label the
wires with a pair of indices and get explicit expressions of
the corresponding Block Programs. Then we can simplify
these Block Programs into succinct expressions denoted by
Ak(t); k = 1; 2;··· K. Namely, we let w be (w1; w2) and de-
note each wire by Zw1;w2 as shown in Figure 3. Correspond-
ingly, each polynomial in Q is denoted by {Av;(w1;w2)(t)} or
{Bj;(w1;w2)(t)} where v; w1 ∈ {1; 2;··· ; M; M + 1;··· ; M +
k∈K
Bj;(w1;w2)(t) =
Av;(w1;w2)(t) =
∑
∑
Av;(w1;w2)((cid:27)k) ·
Bj;(w1;w2)((cid:27)k)·
Q}, j ∈ {1; 2;··· ; M}, and w2 ∈ {1; 2;··· ; K + 1}. The
explicit expressions of Q are as follows: Let K be the set
of indices, K = {1; 2;··· ; K}. If (cid:27)1; (cid:27)2;··· ; (cid:27)K are distinct
∏
values, each of which is picked from F, then,
∏
∏
∏
(t−(cid:27)k∗ )
((cid:27)k−(cid:27)k∗ ) , and
(t−(cid:27)k∗ )
((cid:27)k−(cid:27)k∗ ) ; where
Av;(w1;w2)((cid:27)k) and Bj;(w1;w2)((cid:27)k) are determined by the in-
terconnection of the blocks in the circuit: Av;(w1;w2)((cid:27)k) is
1 if Zw1;w2 is the v-th input of the k-th block and 0 oth-
erwise; Bj;(w1;w2)((cid:27)k) is 1 if Zw1;w2 is the j-th output from
the k-th block and 0 otherwise. From the circuit’s struc-
ture, we can simplify the above as follows: Av;(w1;w2)((cid:27)k) is
1 if w1 = v; w2 = k and 0 otherwise; Bj;(w1;w2)((cid:27)k) is 1 if
w1 = j; w2 = k + 1 and 0 otherwise.
k∗∈K;k∗̸=k
k∗∈K;k∗̸=k
k∗∈K;k∗̸=k