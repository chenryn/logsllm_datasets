gs(cid:48)
,
DK3 = K3,θ · gr(cid:48)
3 = KU3,θ · gs(cid:48)
2 , DK(cid:48)
θ·(u1,i−(ID)i·u1,0+ktagi·w1)
θ·(u2,i−(ID)i·u2,0+ktagi·w2)
DK4,i=K4,i,θ·gr(cid:48)
.
– Encap(P P, T, S): To encrypt the privileged identity set S ={ID1,ID2,...,IDn}
with n (cid:54) m, the algorithm deﬁnes a vector y = (y0, y1,··· , ym) as the asso-
i=0 yiZ i. Note that
the coordinates yn+1,··· , ym are all set to 0 if n < m. Given the public pa-
), it picks s, ctag R←− Zp, and
1 , gu1
rameters P P with U 1 = gu
s and the header Hdr = (C1,C2,C3, C4, ctag)
computes the session key K = gT
1)s, C3 = (Z1 · ˆZ T
with C1 = gs
1, C2 = (gb
– Decap(P P, T, S, Hdr, DKID,T ): For ID ∈ S, it parses DKID,T and Hdr as
i=1} and (C1, C2, C3, C4, ctag),
{DK1, DK2, DK3, DK(cid:48)
i=1 yi · ktagi, where yi
is the coeﬃcient of the polynomial PS[Z]. If ktag = ctag, the output is ⊥.
Otherwise it computes:
A = e(C1, DK1) · e(C2, DK2)/e(C3, DK(cid:48)
3),
respectively. This algorithm then computes ktag =(cid:80)m
B = (e(C1,(cid:81)n
IDj∈S (Z − IDj) =(cid:80)n
·(cid:81)n
i=1 (DK4,i)yi) · e(C2,(cid:81)n
1 ,··· , gum
1 )s, C4 = (W ctag
i=1 (DK5,i)yi)/e(C4, DK3))
3, (DK4,i, DK5,i, ktagi)m
i=0 (gui
1 )yi)s.
1 = (gu0
1
1
ktag−ctag ,
θ
2
2
1
and returns K = A/B as the session key.
– Revoke(ID, T, RL, ST ): This revocation algorithm updates the revocation
list RL by adding (η, ID, T ), where η is the leaf node associated with ID.
CORRECTNESS . The correctness of our revocable RIBBE scheme follows from
the correctness analysis of IBBE in Section 3.1, and it is omitted here.
5 Security Analysis
posed revocable IBBE scheme (cid:81)
(cid:81)
RIBBE is a revocable IBE system (cid:81)
Theorem 2. If the ADDH1 assumption and DDH2 assumption hold, the pro-
RIBBE is semi-adaptively secure under chosen
plaintext attacks. More particularly, if we set the maximum size of the set of
receivers for one encryption m to be m = 1, the above revocable IBBE scheme
RIBE, which is adaptively secure against
chosen plaintext attacks under the same assumptions.
The proof of Theorem 2 proceeds in the following two Theorems: Theorem 3
and Theorem 4. We ﬁrst provide a reduction in the semi-adaptive model to the
16
1, ID∗
2, ..., ID∗
secure under the ADDH1 and DDH2 assumptions.
IBBE described in Section 3.1, which has
been proven to be adaptively secure in Section 3.2 under the ADDH1 and DDH2
RIBBE is semi-adaptivey
(non-revocable) basic IBBE scheme(cid:81)
assumptions. Therefore, the revocable IBBE scheme(cid:81)
Theorem 3. If the underlying IBBE scheme(cid:81)
IBBE scheme(cid:81)
IBBE scheme (cid:81)
PPT algorithm C to break the adaptive security of the basic IBBE scheme(cid:81)
IBBE described in Section 3.1 is
adaptively secure against chosen plaintext attacks, then the proposed revocable
RIBBE in Section 4 is semi-adaptively secure.
Proof. Suppose there exists an adversary A that attacks the above revocable
RIBBE with a non-negligible advantage ε, we will construct a
IBBE
described in Section 3.1, following the strategy-dividing lemma in [17]. Namely,
when the challenge set S∗ = {ID∗
n} is given by the (semi-adaptive)
adversary A, we can divide A’s strategy into the following n + 1 types: Type-
0,Type-1,...,Type-n. A is a Type-k adversary if the number of identities for
ID ∈ S∗ that A issues private key query is exactly k. In particular, A is a Type-
0 adversary if A has not issued any ID ∈ S∗ for the private key query, and A
is a Type-n adversary if A has queried private keys of all users in S∗. It is easy
to check that Type-0, Type-1,..., Type-n can cover all possible strategies of A,
and each Type-k is mutually exclusive with publicly detectable in the security
game. For each k = 0, 1, ..., n, let Ak denote an adversary that always follow the
Type-k strategy (and never break the promise). We can prove that the advantage
RIBBE is negligible if the
IBBE described in Section 3.1 is adaptively secure.
RIBBE satisﬁes
semi-adaptive security, as the advantage AdvsaIND-CPA
Ak,RIBBE is
also negligible for polynomial size of n. In other words, we can divide the proof
of Theorem 3 into n + 1 sub-proofs of Lemma 4.
for each Ak in attacking the revocable IBBE scheme(cid:81)
underlying IBBE scheme (cid:81)
Thus, for general adversary A following an arbitrary strategy,(cid:81)
(cid:54)(cid:80)n
Lemma 4. If the underlying IBBE scheme (cid:81)
adversary Ak against the proposed revocable IBBE scheme(cid:81)
Proof of Lemma 4. At the beginning, C receives public parameters of (cid:81)
IBBE described in Section 3.1 is
adaptively secure against chosen plaintext attacks, then the advantage of a Type-k
RIBBE in Section 4
IBBE:
(g1,gb
). Dur-
ing the process, C can access to the secret key generation oracle KeyGenIBBE(·),
that is, if C sends this oracle KeyGenIBBE(·) an identity ID, then it will receive
a private key of SKID = {K1, K2, K3, (K4,i, K5,i, ktagi)m
K1 = gα1
2
K4,i = ((gw1
)r.
Setup: C should guess the right time period T ∗ that Ak will submit the target
identity in the challenge ciphertext phase. For the rest of the proof, assuming
that C’s guess is correct, which holds with probability 1/|T |. Note that C will
Then C interacts with Ak as follows:
· (gw1
2 )ktagi · gu1,i
2 )r, K3 = gr
2,
)(ID)i
2 )ktagi · gu2,i
k=0 AdvsaIND-CPA
2 ,gu2
2 ,gw1
2 ,gw2
2 ,gβα
1 ,gβα1
2 )r, K2 = gα2
2
1,U 1 = gu1+bu2
1
)r, K5,i = ((gw2
,W1 = gw1+bw2
,gT,g2,gu1
i=1} with:
/(gu2,0
)(ID)i
is negligible.
/(gu1,0
2
,gβα2
,g1/β
2
2
2
A,RIBBE
1
· (gw2
2
2
2
17
terminate the simulation once C ﬁnds that the guess is wrong, and a random bit
β(cid:48) will be outputted. C then proceeds as follows:
1. It ﬁrst creates a binary tree BT with N leaves. It initializes RL and ST as
an empty set respectively.
1
1
2. C chooses z(cid:48)
1, z(cid:48)
Z1 = gz1+b·z2
2 = gz(cid:48)
gz1
which implicitly sets:
z1 = z(cid:48)
R←− Zp and computes:
2, ˆz(cid:48)
1, ˆz(cid:48)
2
= gz(cid:48)
1)z(cid:48)
2/(gβα
1 (gb
2 = gz(cid:48)
)T ∗
, gz2
1 )T ∗
2 /(gβα2
2 − T ∗ · βα2, ˆz1 = ˆz(cid:48)
2 /(gβα1
1 − T ∗ · βα1, z2 = z(cid:48)
3. C then sends to Ak the public parameters of(cid:81)
, ˆZ1 = g ˆz1+b·ˆz2
1
2 = g ˆz(cid:48)
)T ∗
, g ˆz1
2
2
1
2
1
= g ˆz(cid:48)
2 gβα1
1)ˆz(cid:48)
2(gβα
1 (gb
2 = g ˆz(cid:48)
, g ˆz2
1 ),
2 gβα2
2
2
1
2
,
1 + βα1, ˆz2 = ˆz(cid:48)
2 + βα2.
2 , gu2
2 , gw1
P P = (g1, gb
2 , gz2
1, ID∗
k} from BT. η∗
2 , g ˆz2
2 , g ˆz1
2, ..., ID∗
1, U 1, W1, Z1, ˆZ1, gT , g2, gu1
k = {η∗
2, ..., η∗
1, η∗
i ∈ S∗.
i is not necessary assigned to ID∗
RIBBE as:
2 , gz1
2 , gw2
2 ).
Challenge Set: Ak submits a challenge set S∗ = {ID∗
n} to the
challenger C, which will be used in the challenge ciphertexts. As the Type-k
adversary Ak only issues k private key query for any identity ID∗ ∈ S∗, C will
choose k random leaf nodes L∗
i will be assigned
to an identity ID∗ ∈ S∗ that is issued by Ak for the private key. We emphasize
that η∗
Key Extraction Phase 1: Ak may adaptively make a polynomial number of
queries, which are processed as follows:
– If this is a private key query for an identity ID, C performs the following:
1. It ﬁrst checks whether ID ∈ S∗ or not. If ID ∈ S∗, C will assign ID
to a random undeﬁned leaf η∗ ∈ L∗
k and saves (ID, η∗) to ST . Fur-
thermore, C chooses m random tags: ktag1,··· , ktagm from Zp, and
stores these tags for ID. Otherwise, ID /∈ S∗, C assigns ID to a ran-
dom undeﬁned leaf η outside of L∗
k from BT and saves (ID, η) to ST .
C can transfer ID to the oracle: KeyGenIBBE(·) and gets the private
key {K1,K2,K3,(K4,i,K5,i,ktagi)m
i=1}. C also stores these given tags for ID.
We denote N∗
(cid:83)k
k as all the nodes from the root node to the leaf nodes
which are assigned to identities queried in the challenge set S∗: N∗
k =
i=1 P ath(BT, η∗
i ).
2. For each node θ ∈ P ath(BT, η), C can retrieve Hθ if it was deﬁned.
Otherwise, it chooses Hθ = (H1,θ, H2,θ) R←− G2 and stores Hθ in the
node θ. Note that θ can be further divided into the following two types
according to N∗
k :
k : In this case, ID /∈ S∗ and C has gotten a private key of
• Case θ /∈ N∗
i=1}. C
ID from the oracle KeyGenIBBE(·): {K1,K2,K3,(K4,i,K5,i,ktagi)m
R←−Zp, and computes:
further chooses rθ
2 )rθ · H2,θ, K3,θ = K3 · grθ
2 )rθ· H1,θ, K2,θ = K2 · (gw2
K1,θ = K1·(gw1
2 ,
K4,i,θ = K4,i · grθ(u1,i−(ID)i·u1,0+ktagi·w1)
K5,i,θ = K5,i · grθ(u2,i−(ID)i·u2,0+ktagi·w2)
REMARK . Here we implicitly set H1,θ := gα1
2 H1,θ, H2,θ := gα2
rθ := r + rθ, where r denotes the internal randomness of K3.
2 H2,θ,
2
2
,
.
18
• Case θ∈ N∗
k : C can retrieve the tags ktag1,··· , ktagm corresponding
R←−Zp, and computes:
to ID. Then it chooses rθ
K1,θ = H1,θ · (gw1
K4,i,θ = grθ(u1,i−(ID)i·u1,0+ktagi·w1)
2 )rθ , K2,θ = H2,θ · (gw2
2 )rθ , K3,θ = grθ
2 ;
, K5,i,θ = grθ(u2,i−(ID)i·u2,0+ktagi·w2)
.
2
2
3. Finally, it stores and outputs the private key SKID to Ak with:
i=1}θ∈P ath(BT,η).
SKID ={K1,θ, K2,θ, K3,θ, (K4,i,θ, K5,i,θ, ktagi)m
– If this is an update key query for the time T , C ﬁrst runs KUNode(BT, RL, T )
algorithm with the current revocation list RL and time T . For each node
θ ∈ KUNode(BT, RL, T ), C can retrieve Hθ if it was deﬁned. Otherwise, it
chooses Hθ = (H1,θ,H2,θ) R←−G2 and stores Hθ in the node θ. Then it chooses
R←−Zp, checks whether θ∈ N∗
sθ
• Case θ∈ N∗
k : KU1,θ = (gz1
2 (g ˆz2
2 )T )sθ H
− z(cid:48)
2+T ˆz(cid:48)
T−T ∗ , KU3,θ = gsθ
KU2,θ = (gz2
2 (g
REMARK . In this case, we implicitly set sθ := sθ −
β(T−T ∗) . We further em-
phasize that for T = T ∗, there will be no node θ such that θ ∈ KUNode(BT, RL, T )∩
k , as the corresponding SKID with ID ∈ S∗ must be revoked before T ∗ ac-
N∗
cording to the restriction.
k , and computes:
2 (g ˆz1
1+T ˆz(cid:48)
T−T ∗ ,
2 )T )sθ H