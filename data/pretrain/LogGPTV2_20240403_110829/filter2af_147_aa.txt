# 前言
本篇是Cryptography密码学类的题解。难度从简到难，涉及了一些ctf比赛中常见的密码学套路。部分题目附件已打包。  
链接:  提取码: 3ei6
# Crypto Warmup 1
## Question
> Crpyto can often be done by hand, here's a message you got from a friend,
> `llkjmlmpadkkc` with the key of `thisisalilkey`. Can you use this
> [table](https://2018shell2.picoctf.com/static/43f28853477d7b2ed52e0efbfb04dff7/table.txt)
> to solve it?.
### Hint
> Submit your answer in our competition's flag format. For example, if you
> answer was 'hello', you would submit 'picoCTF{HELLO}' as the flag.
>
> Please use all caps for the message.
## Solution
维吉尼亚密码，详细内容可以参考[wiki](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher)。解密脚本如下：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    cipher = 'llkjmlmpadkkc'
    key = 'thisisalilkey'
    message = ''
    for i in xrange(len(cipher)):
        message += chr(((ord(cipher[i]) - 97) - (ord(key[i]) - 97) + 26) % 26 + 97)
    print message
flag:`picoCTF{SECRETMESSAGE}`
# Crypto Warmup 2
## Question
> Cryptography doesn't have to be complicated, have you ever heard of
> something called rot13? `cvpbPGS{guvf_vf_pelcgb!}`
### Hint
> This can be solved online if you don't want to do it by hand!
## Solution
凯撒密码，经过一次rot13就可以恢复原文。
    ❯ python -c "print 'cvpbPGS{guvf_vf_pelcgb!}'.decode('rot_13')"
    picoCTF{this_is_crypto!}
flag:`picoCTF{this_is_crypto!}`
# HEEEEEEERE'S Johnny!
## Question
> Okay, so we found some important looking files on a linux computer. Maybe
> they can be used to get a password to the process. Connect with `nc
> 2018shell1.picoctf.com 5221`. Files can be found here:
> [passwd](https://2018shell2.picoctf.com/static/7a017af70c0b86ab002896616376499e/passwd)
> [shadow](https://2018shell2.picoctf.com/static/7a017af70c0b86ab002896616376499e/shadow).
### Hint
> If at first you don't succeed, try, try again. And again. And again.
>
> If you're not careful these kind of problems can really "rockyou".
## Solution
根据题目名字提示，可以使用[John the
Ripper](https://www.openwall.com/john/)，一款密码破解工具。使用`john`自带的密码表就可以跑出root的密码了。
    ❯ ./unshadow passwd shadow > ./crack.db
    ❯ ./john ./crack.db
    Warning: detected hash type "sha512crypt", but the string is also recognized as "sha512crypt-opencl"
    Use the "--format=sha512crypt-opencl" option to force loading these as that type instead
    Warning: hash encoding string length 98, type id $6
    appears to be unsupported on this system; will not load such hashes.
    Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 64/64 OpenSSL])
    Press 'q' or Ctrl-C to abort, almost any other key for status
    kissme           (root)
    1g 0:00:00:06 DONE 2/3 (2018-10-14 11:56) 0.1529g/s 361.6p/s 361.6c/s 361.6C/s kissme
    Use the "--show" option to display all of the cracked passwords reliably
    Session completed
    ❯ nc 2018shell2.picoctf.com 40157
    Username: root
    Password: kissme
    picoCTF{J0hn_1$_R1pp3d_1b25af80}
flag:`picoCTF{J0hn_1$_R1pp3d_1b25af80}`
# caesar cipher 1
## Question
> This is one of the older ciphers in the books, can you decrypt the
> [message](https://2018shell2.picoctf.com/static/1496b9c149dea14875a4f750169a7af1/ciphertext)?
> You can find the ciphertext in /problems/caesar-> cipher-1_4_e4dc6dcfb004bdade0b9ce8e44f1bac4 on the shell server.
### Hint
> caesar cipher [tutorial](https://learncryptography.com/classical-> encryption/caesar-cipher)
## Solution
还是凯撒，爆破一下偏移量，找到有意义的字符串。
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    cipher = 'vgefmsaapaxpomqemdoubtqdxoaxypeo'
    for j in xrange(25):
        flag = ''
        for i in cipher:
            if ord(i) >= 97 and ord(i) = 65 and ord(i)  Here's another simple cipher for you where we made a bunch of substitutions.
> Can you decrypt it? Connect with `nc 2018shell1.picoctf.com 18581`.
### Hint
> NOTE: Flag is not in the usual flag format
## Solution
替换密码，因为给的段落足够长，所以可以对词频进行静态分析，得到替换表，然后恢复原文，[在线工具](https://quipqiup.com/)。
flag:`substitution_ciphers_are_solvable_fuosdblgwv`
# blaise's cipher
## Question
> My buddy Blaise told me he learned about this cool cipher invented by a guy
> also named Blaise! Can you figure out what it says? Connect with `nc
> 2018shell1.picoctf.com 46966`.
### Hint
> There are tools that make this easy.
>
> This cipher was NOT invented by Pascal
## Solution
还是关于维吉尼亚密码（发明者全名为`Blaise De
Vigenère`），和第一题不同的是这题没有提供密钥。但这题给的密文还是相当的长，依然可以使用静态分析，主要的方法有`Kasiski
测试法`和`互重合指数法`。这里使用
得到密钥：`flag`。
然后解密，得到flag。
flag:`picoctf{v1gn3r3_c1ph3rs_ar3n7_bad_cdf08bf0}`
# hertz 2
## Question
> This flag has been encrypted with some kind of cipher, can you decrypt it?
> Connect with `nc 2018shell1.picoctf.com 23479`.
### Hint
> These kinds of problems are solved with a frequency that merits some
> analysis.
## Solution
还是替换密码，不过这次给的密文比较短。
    Let's decode this now!
    Jea vbpkh glsni dsc obmyf stal jea wqzx usr. P kqi'j gawpata jepf pf fbke qi aqfx ylsgwam pi Ypks. Pj'f qwmsfj qf pd P fswtau q ylsgwam qwlaqux! Shqx, dpia. Eala'f jea dwqr: ypksKJD{fbgfjpjbjpsi_kpyealf_qla_jss_aqfx_txugsyxgti}
根据flag的特征，可以得到线索`ypksKJD=picoCTF`。再使用
flag:`picoCTF{substitution_ciphers_are_too_easy_vydbopybvn}`
# Safe RSA
## Question
> Now that you know about RSA can you help us decrypt this
> [ciphertext](https://2018shell2.picoctf.com/static/6fc0e4875e66b042896fc9019b7fa9d2/ciphertext)?
> We don't have the decryption key but something about those values looks
> funky..
### Hint
> RSA [tutorial](https://en.wikipedia.org/wiki/RSA_\(cryptosystem))
>
> Hmmm that e value looks kinda small right?
>
> These are some really big numbers.. Make sure you're using functions that
> don't lose any precision!
## Solution
附件给了密文和公钥对：
    N: 374159235470172130988938196520880526947952521620932362050308663243595788308583992120881359365258949723819911758198013202644666489247987314025169670926273213367237020188587742716017314320191350666762541039238241984934473188656610615918474673963331992408750047451253205158436452814354564283003696666945950908549197175404580533132142111356931324330631843602412540295482841975783884766801266552337129105407869020730226041538750535628619717708838029286366761470986056335230171148734027536820544543251801093230809186222940806718221638845816521738601843083746103374974120575519418797642878012234163709518203946599836959811