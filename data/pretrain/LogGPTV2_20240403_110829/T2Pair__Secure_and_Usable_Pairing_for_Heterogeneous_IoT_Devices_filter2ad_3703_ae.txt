0.300
0.807
0.046
0.164
0.095
0.829
0.505
0.343
0.360
0.796
Table 4: Average entropy and estimated bit rate.
𝜎 of 𝐼1 (ms)
𝜎 of 𝐼2 (ms)
Entropy (bits)
Bit Rate (bit/sec)
Button
67
501
34.3–38.5
10.3–13.2
Knob
72
362
34.3–37.9
10.6–13.6
Screen
53
424
32.3–36.6
11.6–14.8
𝐸𝑖= 1
2
log2(2𝜋𝑒𝜎2)
as 𝜇 and standard deviation as 𝜎) can be computed as follows [35].
𝑛2
(3)

(2)
Assuming each piece of evidence contains 𝑛1 intervals from 𝐼1 and
𝑛2 intervals from 𝐼2, the evidence entropy can be computed as:
𝑙𝐸= 𝑛1∗ 𝐸1+ 𝑛2∗ 𝐸2+ log2𝑛1+ 𝑛2
𝑛2  is introduced to account for the random occur-
rence positions of the 𝑛2 pauses in the evidence.
The term𝑛1+𝑛2
Then, the bit rate is 𝑙𝐸⇑𝑇 .
The total time of generating a piece of evidence is denoted as 𝑇 .
Entropy evaluation using a real-world dataset. Figure 8 shows
the distributions of the time intervals of 𝐼1 and 𝐼2 among all the
users. We test the normality of the distributions with one-sample
Kolmogorov-Smirnov testing [24]. For each device, more than 86%
of the time intervals follow the normality assumption. Thus, most
of the data for each device could be abstracted into a normal dis-
tribution. The prior studies [10, 21] of keystrokes and/or screen
touches are consistent with our finding.
We then use the pairing operations on buttons as an example
to compute the entropy. As summarized in Table 4, the intervals
of 𝐼1 mostly fall in [100ms, 500ms] with the standard deviation
𝜎1 67ms, while those of 𝐼2 in [800ms, 3000ms] with the standard
deviation 𝜎2 501ms. With the base value= 10ms (see Section 7.4), 𝜎1
and 𝜎2 become 6.7 and 50.1, respectively. According to our entropy
definition in Equation 2, the entropy for one interval in 𝐼1 is around
4.8 bits, and that in 𝐼2 around 7.7 bits. As each piece of evidence
consists of 4 (or 5) intervals of 𝐼1 and 2 (or 1) intervals of 𝐼2, the
total entropy is around 38.5 (or 34.3) bits. The mean values for the
intervals of 𝐼1 and 𝐼2 are 238ms and 1402ms, respectively, so the
total time for generating a piece of evidence is 3756ms (or 2592ms).
The bit rate is around 10.3 bit/s (or 13.2 bit/s).
(a) Intervals of 𝐼1.
(b) Intervals of 𝐼2.
Figure 8: Time interval distributions.
7.4 Study of Parameters and Stability
For the following experiments, we focus on pairing with pauses.
Evidence length. The evidence length is represented as the num-
ber of time intervals, which is related to the number of salient
points. Longer evidence provides better security, but also requires
longer time to finish the pairing, which sacrifices usability. Thus,
the evidence length is a trade-off between security and usability.
To study its impact, we set the FRR to a fixed value 0.05, and
examine the changes of the FAR as the evidence length varies.
Figure 9(a) shows the FARs with different evidence lengths for the
three types of devices. As expected, if the evidence length is longer,
the FAR is lower—the security is better. For knob-based devices, an
evidence length 7 is appropriate as a longer length can only improve
the FAR a little bit. For both button-based and screen-based devices,
the FAR is below 0.01 if the evidence length is longer than 6. Hence,
6 is an appropriate length for them.
Base value. The base value is used to encode the time intervals.
In general, a larger base may generate a less accurate encoding of
the time interval because of more coarse approximations, but it
can create a shorter encoding of the evidence that is more efficient.
Thus, selecting an appropriate base value is a trade-off between
accuracy and efficiency. For simplicity, we use EER to study the
impact of the base by weighting the FAR and FRR equally.
Figure 9(b) shows the EERs for the three types of pairing by vary-
ing the base from 1 to 30ms. We find that the EERs grow slowly as
the base increases. Although a base smaller than 10 can slightly im-
prove EERs, it also yields long evidence. Considering both accuracy
and efficiency, we choose the base value as 10ms.
Sampling rate. The sensor data from the wristband (“helper”) is
used to extract salient points and generate the evidence. A low sam-
pling rate of the sensor data may result in inaccuracy in detecting
salient points. While a high sampling rate can help capture more
subtle motions, it also introduces a higher burden on data collection.
An optimal sampling rate needs to be determined by considering
both accuracy and efficiency.
Figure 9(c) presents the performance of T2Pair by changing the
sampling rate from 10Hz to 100Hz at a step of 10Hz. We observe
that button clicking requires a sampling rate higher than 80Hz to
achieve the best performance, and knob rotation and screen swiping
only require a sampling rate higher than 50Hz. We thus select a
sampling rate of 80Hz, 50Hz, and 50Hz for button clicking, knob
rotation, and screen swiping, respectively.
IoT device position. IoT devices may be installed/placed at dif-
ferent positions based on the demand (e.g., whether needing to be
0.01.02.03.04.05.06.0TiPe Interval (Psec)×1020.00.20.40.60.83robability×10−2Button.nob6creen0.51.01.52.02.53.03.5TiPe Interval (Psec)×1030.00.20.40.60.81.01.21.43robability×10−3Button.nob6creenSession 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA318(a) FAR vs. evidence length
(b) EER vs. base value
(c) EER vs. sampling rate
(d) EER vs. device position
(e) EER vs. helper
(f) EER vs. IoT device
Figure 9: Impacts of different parameters and experimental settings.
connected to a power source) or the user’s preference. We examine
three common positions that a device may be installed/placed: (a)
plugged into a wall outlet; (b) placed on a table; (c) held in a hand.
Figure 9(d) shows the EERs for the three types of pairings in
terms of different device positions. For buttons and screens, T2Pair
performs slightly better when the devices are in the positions (a)
and (b), while for knobs, the positions (a) and (c) achieve slightly
better performance. Overall, the results indicate that different device
positions have little impact on the pairing performance.
Different kinds of helpers. Besides wristbands, we also test the
feasibility of holding a smartphone to perform pairings. We present
the EERs in Figure 9(e) for the three types of pairings using the
two different helpers: wristband and smartphone. When the smart-
phone is used, T2Pair achieves an EER of 0.017, 0.031, and 0.017 for
buttons, knobs, and screens, respectively. No obvious difference is
observed in the pairing performance between the two helpers. We
thus conclude that holding a smartphone for pairings is feasible.
Nevertheless, we find the usability is not satisfactory when the user
holding a smartphone twists a small knob.
Different sizes and materials of IoT devices. We further study
whether T2Pair can work well on IoT devices with different sizes
and materials. We have two knob-based devices (a large knob and
a small knob), two button-based devices (a rubber keypad and a
plastic keypad), and two touchscreens (a smartphones Nexus 5X
and a Unihertz Atom that have different screen sizes). Dataset I is
collected using the large knob, the plastic keypad, and the Nexus 5X
with a relatively large screen. We then recruit another 5 participants
to perform the pairing operations on the other three devices.
Figure 9(f) shows the EERs for the six devices. For any two
devices with the same type of UI, we do not observe any significant
difference between their performance. Thus, the device size and
material have little impact on the pairing performance of T2Pair.
(FAR, FRR)
Table 5: Comparison with other works.
Method
Time(s)
ShaVe/
ShaCK [30]
SFIRE [12]
Tap-to-Pair [49]
Checksum [1]
T2Pair
(0.0, -)
(-, 0.117)
(-, 0.10)
(0.0, 0.10–0.12)
(0.0, 0.03–0.09)
3
6
15–20
5.7
3.2–4.1
7.5 Efficiency
We next evaluate the efficiency of the pairing operations; here we
only consider the pairing operations with random pauses. Specifi-
cally, we measure the time used for performing the pairing operations
with an evidence length of 7 for knobs, 6 for screens and 6 for
buttons (see Evidence Length in Section 7.4).
For knobs, screens, and buttons, the mean time for pairing is
2.8s (SD=0.85), 2.3s (SD=0.66), and 3.2s (SD=0.93), respectively. The
pairing operations require very short time to finish and are efficient.
We also measure the time used for running fuzzy commitment
and PAKE to establish a shard key between two parties. The average
execution time on the smartwatch and the Arduino controller is
0.9s (SD=0.37) and 0.7s (SD=0.25), respectively.
Note that the “big silence” (≤ 3s) before each pairing is not in-
cluded here; it is considered in the Usability Study in Appendix A.
7.6 Comparison with Other Approaches
Table 5 shows the comparison of T2Pair with some prior works.
Our work achieves better accuracies than these works [1, 30, 49].
Moreover, T2Pair is more efficient than Tap-to-Pair [49], SFIRE [12],
and Checksum [1] in terms of the pairing time. E.g., Tap-to-Pair
needs at least 15 seconds, while our system only needs up to 4.1
2345678910Evidence length (number of events)0.00.10.20.30.40.5FARButtonKnobScreen151015202530Base value0.000.020.040.060.080.10EERButtonKnobScreen102030405060708090100Sampling rate (Hz)0.000.050.100.150.200.250.30EERButtonKnobScreenButtonKnobScreen0.000.020.040.060.08EERPosition(a)Position(b)Position(c)ButtonKnobScreen0.000.020.040.060.080.10EERWearing a wristbandHolding a phone  Plastic|Rubber  ButtonsLarge|Small  Knobs     5X|Atom  Screens0.000.020.040.060.080.10EERSession 1E: Cyberphysical Systems CCS '20, November 9–13, 2020, Virtual Event, USA319seconds (the maximum time observed for performing pairing oper-
ations 3.2s plus the time running our fuzzy commitment 0.9s). Note
that each pairing approach requires some initialization phase, and
the statistics about the initialization time are not available in many
of the works; we thus exclude the initialization time for fair compar-
ison. But even the initialization time (“big silence”) is considered,
the maximum time of 7.1s (= 4.1+ 3) still shows our pairing is fast.
In contrast, Perceptio [14] takes hours or even days for pairing.
8 RELATED WORK
Proximity-based pairing. Some approaches [19, 29, 37] trans-
form the Received Signal Strength (RSS) values into a key, while oth-
ers exploit Channel State Information (CSI) [25, 46]. As a user moves
her smartphone near an IoT device, Move2Auth [48] and SFIRE [12]
authenticate the device by checking whether the RSS changes cor-
relate the motion trace of the smartphone. Tap-to-Pair [49] has a
user tap, to create RSS changes, the wireless transmitter on an IoT
device following the instructions displayed by another device (e.g.,
a smartphone) to authenticate the IoT device. Many only authenti-
cate the IoT device to the user’s mobile device [12, 48, 49], but not
the other way around; hence, IoT devices may get paired with the
attacker’s device, while T2Pair provides mutual authentication.
The changes in ambient context, such as audio [42] and lumi-
nosity [32], can also be used to prove co-presence. Perceptio [14]
clusters contextual information detected by devices equipped with
different sensors to derive a key. Like our work, it also aims at a
pairing approach applicable to heterogeneous IoT devices. But it
assumes there exists a physical security boundary (e.g., the house
wall) and no malicious devices within the boundary. In contrast,
T2Pair largely eliminates the threat of co-located malicious devices.
Perceptio has the advantage of pairing multiple devices without
human intervention, but it may take a very long time for pairing
some devices (e.g., a laundry washer that is used once per week
and a glass-break sensor that is triggered only once during multiple
years), while T2Pair takes seconds for pairing a device. Further-
more, Perceptio has no guarantee whether a device can be paired
correctly, especially for devices (e.g., in different floors) that per-
ceive different contextual information.
Both wireless signal changes and the ambient context can be
sensed and thus exploited by co-located malicious devices.
Physical contact-based pairing. Some approaches require users
to have physical contact with IoT devices for pairing purposes.
By shaking [30] or bumping [15] two devices simultaneously, the
motion data on both devices becomes correlated and can be used for
pairing. Touch-And-Guard [45] has the user wearing a wristband
touch the target IoT device, and the wristband’s vibration motor
creates resonance, which is measured by the accelerometers of
both sides and used for pairing. Sethi et al. [43] require users to
perform synchronized drawings on two touchscreens; the resulting
drawings can be used for pairing. By shaking [36] or moving [1]
an IoT device according to the public key shown on the display,
the key is authenticated. But all these approaches require inertial
or touch sensors embedded in the IoT device or a metal pin on its
surface [47], which are not available on many IoT devices. While
many authentication approaches [27, 28, 33] based on physical
contact (including our prior work P2Auth [23]) have been proposed,
they all assume a secure communication channel between devices,
while the pairing task cannot assume it.
There exist other approaches that do not fall in either of the two
categories above. SiB [31] authenticates other device’s public key by
taking a picture of a 2D bar code encoding the hash of the public key
of the other device. VIC [41] improves it by presenting the key with
a binary display. Many vendors embed a hard-coded password into
the firmware of an IoT device, and print the password on the user
manual, so the vendor has to carefully make sure the device and the
unique manual are packaged together correctly, which is a burden
to vendors [12, 48]. Some vendors simply use an identical password
for all devices, which is a critical security flaw. Moreover, given an
IoT device (such as a smart blood-pressure meter in Walmart) that
needs to get paired with many users’ personal mobile devices, a
single password for all users is insecure, while T2Pair provides a
secure and usable solution.
9 LIMITATIONS
T2Pair largely eliminates the threat of co-located malicious devices,
but not completely. If a nearby malicious device (or an attacker) has
a camera that points at the user performing authentication, T2Pair
is vulnerable to man-in-the-middle attacks assisted by computer
vision techniques. Similarly, if the authentication operations gener-
ate noises, for example, in the case of pressing a button, a nearby
malicious device which has a microphone can also be used to fa-
cilitate MITM attacks. How to mitigate side-channel attacks that
infer information from noises has been studied [3, 4]. It is worth
pointing out that, as analyzed in Section 4.2, offline attacks based
on recorded videos or audios do not work.