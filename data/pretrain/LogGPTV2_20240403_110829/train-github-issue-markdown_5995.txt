I defined a class:
    export class TCommand 
    {
    }
and created an alias for the closed type:
export type Command = TCommand;
now when i try:
export class NextCommand extends Command {  
}
the compiler says: Error 1 Cannot find name 'Command'
var cmd = new MOD.mvvm.Command();
Produces the same error  
but i can write
var cmd: Command = null;
without errors,
Expected: to allow using this type alias for inheritance purposes.  
The problem is that Typescript creates not a true alias  
it produces in the output:
    var NextCommand = (function (_super) {
        __extends(NextCommand, _super);
        function NextCommand() {
            _super.apply(this, arguments);
        }
        return NextCommand;
    })(Command);  /// notice Command is not defined.
but it should produce
    var NextCommand = (function (_super) {
        __extends(NextCommand, _super);
        function NextCommand() {
            _super.apply(this, arguments);
        }
        return NextCommand;
    })(TCommand);  /// notice Command is replaced with original TCommand
That means - we don't need new definitions in the output for alias, but alias
should be replaced with the original definition in the output!