### Effectiveness of Top-Ranked InfoPaths

To illustrate the effectiveness of the top-ranked InfoPaths, we consider two communities: an attack-related community (C3) and a community without attack-related events (C8). Table VII presents the top 3 InfoPaths for both communities concerning attack A4.

**Community C3:**
- **Events:** The attacker runs a malicious script to compress, encrypt, and upload sensitive files to a remote server.
- **Top-1 InfoPath:** With a priority score of 0.8234, the top-1 InfoPath effectively represents these attack behaviors. The input node is a malicious script process (i.e., `leak`), which facilitates further security analysis by tracing the origin of the malicious script.
- **Top-2 and Top-3 InfoPaths:** While these InfoPaths also cover the behaviors, they are less effective as they do not start with the malicious script process.

**Community C8:**
- **Events:** A user logs into a host using sshd, transfers a compressed file from a server to the host, and decompresses the file.
- **Top-1 InfoPath:** The top-1 InfoPath, with the highest priority score of 0.4914, accurately represents all these activities.
- **Top-2 InfoPath:** Lacks the sshd login event.
- **Top-3 InfoPath:** Lacks the sshd login event and includes a file event (`/dev/nullâ†’bash`) that is common in many communities.

### Turnaround Time Performance of DEPCOMM

To evaluate the turnaround time performance of DEPCOMM, we measured the time taken for each phase across 14 attack cases. The hierarchical walks and vectorization in the community detection phase can be parallelized, and we used 20 processes on a single host to achieve this. The results, summarized in Table VIII, show that DEPCOMM, on average, takes 1,148.90 seconds to generate a summary graph, which is approximately 6 times faster than running in a single process.

- **Dependency Graph Construction:** 32.12 seconds
- **Dependency Graph Pre-processing:** 256.72 seconds
- **Community Detection:**
  - Hierarchical Walks: 581.28 seconds (approximately 7 times faster)
  - Vectorization: 269.26 seconds (approximately 4 times faster)
- **Community Compression:** 1.41 seconds
- **Community Summarization:** 0.17 seconds

Key observations:
1. The community detection phase, particularly hierarchical walks and vectorization, consumes the most time but can be significantly accelerated through parallelization.
2. DEPCOMM efficiently compresses process-centric communities due to the highly efficient frequent pattern mining algorithm.
3. The community summarization phase requires the least time due to the small community sizes after compression.

In summary, the turnaround time performance of DEPCOMM can be further improved by parallelizing the hierarchical walks and vectorization.

### Discussion

#### Cooperation with Other Investigation Techniques
DEPCOMM can be integrated with visualization techniques to provide an overview of system activities and on-demand zoom in/out functionality. By combining with other causality analysis techniques, DEPCOMM can generate heat maps to highlight suspicious behavior.

#### Forensics of Real-World Attacks
Recent sophisticated and stealthy attacks, such as Advanced Persistent Threats (APTs), require long-term log storage and efficient search capabilities. DEPCOMM, in conjunction with advanced log compression and distributed database solutions, can detect and highlight attack-related communities.

#### Analysis Turnaround Time
The current implementation of DEPCOMM takes an average of 1,148.90 seconds to generate a summary graph. Parallelizing hierarchical walks and vectorization can further reduce this time. Integration with real-time intrusion detection systems can enable quicker system recovery and prevent future compromises.

#### Limitations of DEPCOMM
- **Hyper-parameters:** Manual setting of hyper-parameters (e.g., walking length, window size, vector dimensions) based on sensitivity analysis.
- **Event Compression:** Some less-important events, such as interactions with system files, may not be compressed. Discriminative pattern mining can help identify such patterns.

### Related Work

#### Causality Analysis via System Audit Logs
Causality analysis, initially proposed by King et al., aims to reconstruct attack steps. Recent research has focused on fine-grained causality analysis and dependency prioritization. Unlike these techniques, DEPCOMM generates a summary graph and can highlight attack-related communities.

#### Behavior Analysis via System Audit Logs
Techniques like domain-specific languages, correlation of suspicious information flows, and runtime analysis of provenance have been proposed. DEPCOMM can integrate with these techniques to facilitate the understanding of attack behaviors and provide better defenses.

#### Community Detection
Various algorithms, such as NISE, EgoSplitter, NMNF, DANMF, PMCV, CGAN, VGRAPH, and CNRL, focus on homogeneous graphs. DEPCOMM, however, gives priorities to neighbor nodes that are more likely to represent intimate processes.

#### Graph Summarization
Graph summarization techniques produce compact representations of large-scale graphs. DEPCOMM processes dependency graphs, a type of heterogeneous graph where process nodes and resource nodes represent different steps of system activities.

### Conclusion

DEPCOMM clusters and compresses repeated events within communities, identifies and ranks InfoPaths, and assists in attack investigation. Evaluations on real attacks demonstrate its effectiveness in detecting process-centric communities, compressing repeated events, and prioritizing InfoPaths.

### Acknowledgments
We thank the anonymous reviewers for their constructive comments and suggestions. This work was partially supported by the Strategic Priority Research Program of the Chinese Academy of Sciences and the National Science Foundation.

### References
[References listed here, following the format provided in the original text.]