0.4914
0.3839
0.1830
We next use two communities to illustrate the effectiveness
of the top-ranked InfoPaths. Table VII shows the top 3 In-
foPaths of an attack-related community C3 that contains attack
behaviors and a community without attack-related events C8
for the attack A4. The events in C3 show that an attacker
runs a malicious script to compress, encrypt, and upload the
sensitive ﬁles to a remote server. We can see that these attack
behaviors can be effectively represented by using the top-
1 InfoPath whose priority score is 0.8234. While the top-2
and the top-3 can also cover the behaviors, the input node
of the top-1 InfoPath is a malicious script process (i.e., leak
) and it is easier to help security analysis further trace the
community that creates the malicious script. The events in
C8 show that a user logs into a host using sshd, transfers a
compressed ﬁle from a server to the host, and decompresses
the ﬁle. We can see that the top-1 InfoPath with the highest
priority score (0.4914) can represent all these activities, while
the top-2 InfoPath lacks the events for sshd login, and the top-
3 InfoPath lacks the sshd login event and contains a ﬁle event
(/dev/null→bash) that appears in many communities.
G. RQ6: Turnaround Time Performance of DEPCOMM
To understand the turnaround time performance of DE-
PCOMM, we measure the turnaround time of each phase
in DEPCOMM for the 14 attack cases. As the hierarchical
walks and vectorization in the community detection phase are
independent to each other, it is feasible to parallelize all the
hierarchical walks and vectorization. We use multi-processes
(20 processes) in a host to realize the parallelization. The
results are shown in Table VIII. On average, DEPCOMM takes
1, 148.90s to generate a summary graph, which is ∼ 6×
faster than running in a single process. More speciﬁcally,
dependency graph construction uses 32.12s, dependency graph
pre-processing uses 256.72s, and community detection uses
858.48s. For community detection, hierarchical walks uses
581.28s and vectorization uses 269.26s, which are ∼ 7× and
∼ 4× faster than running in a single process. Finally, commu-
nity compression uses 1.41s and community summarization
uses 0.17s. We can observe that (1) the community detection
phase takes up most of the time due to the walking sampling
and representation learning, and they can be accelerated by
parallelization; (2) DEPCOMM takes less time to compress
process-centric communities due to the highly efﬁcient fre-
quent pattern mining algorithm; (3) the community summa-
rization phase requires the lest time because of the small
community sizes after compression. In a word, the turnaround
time performance of DEPCOMM can be further improved by
parallelizing the hierarchical walks and vectorization.
VI. DISCUSSION
Cooperation with Other Investigation Techniques. Besides
highlighting attack-related communities, visualization tech-
niques can be applied on the summary graphs generated by
DEPCOMM to show the overview of system activities, and
provide on-demand zoom in (zoom out) functionality to show
(hide) the detailed events in the communities. Additionally, by
integrating with other causality analysis techniques [12, 14,
28], DEPCOMM can generate a heat map that highlights the
communities that are likely to contain suspicious behaviors.
Forensics of Real-World Attacks. Recent real-world attacks,
such as Advanced Persistent Threat (APT) [75, 76], are sophis-
ticated (multi-step attacks that exploit various vulnerabilities)
and stealthy (staying dormant for a long period). With the
advances of log compression techniques [26, 27, 33, 60] and
the continuing decreases of storage costs, it is affordable to
store system audit logs for months or even years. Furthermore,
recent distributed database solutions [18, 19, 79, 80] show
promising results to improve the search performance of the
logs, which can be used to generate dependency graphs for
massive amount of logs. By working together with these
solutions, DEPCOMM can be applied on the generated de-
pendency graphs to detect communities, and integrate with
other detection techniques [14, 32] to highlight attack-related
communities.
Analysis Turnaround Time. Our current
implementation
of DEPCOMM takes averagely 1, 148.90s (in Table VIII) to
generate a summary graph. As the hierarchical walks and
vectorization are independent to each other, it is feasible to
parallelize all the hierarchical walks and vectorization [63].
By working with intrusion detection systems [11, 23] that
can provide real-time alerts and defenses, DEPCOMM can
be applied to identify the attack entry points and impacts,
enabling quicker turnaround time for system recovery and
preventing future compromises.
Limitations of DEPCOMM. Hierarchical graph embedding
is a novel graph embedding technology for system depen-
dency graphs. However, there are still some hyper-parameters
(e.g., the walking length, the window size for sub-sequence
extraction, and the dimension of vectors) that need to be set
manually. We adjust them based on the existing sensitivity
analysis [38], where the walking length is set to 200, the
window size is 20, and the dimensions is 20. There are still
some less-important events that cannot be compressed by
DEPCOMM, such as some interactions with system ﬁles (e.g.,
bash→/dev/null). By inspecting the communities, these events
can be found in different communities, and thus mining dis-
criminative patterns [81, 82] may help identify such patterns.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
553
TABLE VIII: Turnaround Time of DEPCOMM
Dep. Graph
Dep. Graph Community
Community
Attack Cases
A1: Email Penetration
A2: Compile Crash
A3: Files Tamper
A4: Data Exﬁltration
A5: Password Crack
A6: VPN Filter
D1: Phishing Email (C.S.)
D2: Phishing Email (F.D.)
D3: Firefox Backdoor (F.D.)
D4: Browser Extension (F.D.)
D5: Browser Extension (Theia)
D6: Firefox Backdoor (Theia)
D7: Phishing Email (Theia)
D8: Pine Backdoor (Trace)
Average
Construction(s) Preprocess(s) Detection(s) Compression(s)
0.032
0.0096
0.029
0.027
0.0075
0.049
0.0052
4.53
7.36
7.70
0.017
0.025
0.011
0.022
1.42
7.14
1.4
147.13
6.55
3.19
111.9
1,028.32
486.57
780.93
953.06
10.21
10.4
8.27
38.97
256.72
186.72
78.38
740.28
172.24
20.54
1,463.45
110.77
2,247.12
2,968.01
2,846.95
135.69
159.11
105.28
784.18
858.48
1.15
0.23
30.64
1.11
0.80
13.42
141.63
60.72
83.38
93.06
5.87
5.76
5.86
6.06
32.12
Community
Summarization(s)
0.054
0.089
0.13
0.074
0.0085
0.17
0.060
0.31
0.47
0.41
0.16
0.16
0.11
0.17
0.17
Total(s)
195.09
80.11
918.21
180.00
24.54
1,588.99
1,280.78
2,799.25
3,840.15
3,901.18
151.95
175.45
119.53
829.40
1,148.90
VII. RELATED WORK
Causality Analysis via System Audit Logs. Causality anal-
ysis was initially proposed by King et al. [8, 9], which aims
to automatically reconstruct a series of events that represent
attack steps. As causality analysis suffers from the depen-
dency explosion problem [26, 27, 33, 51], recent research has
proposed techniques to perform ﬁne-grained causality analy-
sis [13, 15, 25, 83, 84] and prioritize dependencies [12, 14].
Also, Gui et al. [85] proposed an approach that presents
updates of causality analysis periodically and involves human
in the loop to provide heuristics in reducing the generated
dependency graphs. Unlike these techniques that aim to re-
veal attack-related events, DEPCOMM generates a summary
graph from the dependency graph, and can work with these
techniques to highlight the attack-related communities.
Behavior Analysis via System Audit Logs. Gao et al. [18, 19]
proposed domain-speciﬁc languages that query system audit
logs for efﬁcient attack investigation. Milajerdi et al. [32]
proposed to rely on the correlation of suspicious information
ﬂows to detect ongoing attack campaigns, and used the knowl-
edge from cyber threat intelligence (CTI) reports to align the
attack behaviors recorded in system audit logs [86]. Pasquier
et al. [87] proposed a runtime analysis of provenance by com-
bining runtime kernel-layer reference monitor with a query
module. Hossain et al. [28] proposed a tag-based technique
to perform real-time attack detection and reconstruction from
system audit logs. The summary graphs generated by DEP-
COMM can be integrated with these techniques to facilitate the
understanding of attack behaviors and provide better defenses.
Furthermore, recent approaches [14, 88] leverage alerts from
threat detection systems or software applications’ runtime
logging activities [89] to generate compact graphs. Unlike
these approach whose quality heavily depend on the detected
alerts and the generalizability of the learned system proﬁles,
DEPCOMM is a general approach that
leverages only the
information inside dependency graphs to detect communities,
and can easily cooperate with various automatic investigation
techniques [32] to detect attack-related communities.
Community Detection. NISE [36] is a local-expansion al-
gorithm, which expands a initialized seed set into clusters
with overlaps. EgoSplitter [41] ﬁrst build a node-decoupling
graph through splitting nodes into multiple replicas,
then
applies some classic methods for disjoint community detection
to the build graph. NMNF [42] uses non-negative matrix
factorization to learn node representation with mesoscopic
community structure. DANMF [43] proposed a novel deep
NMF model for overlapping community detection, which
models the non-negative matrix factorization process by auto-
encoder network. PMCV [44] detects overlapping communi-
ties through searching and joining adjacent k-cliques sharing
k-1 nodes. CGAN [45] uses the Generative Adversarial Nets
to learn the membership strength of nodes to communities.
VGRAPH [46] uses neural networks to model the generation
of node neighbors, which joins community detection and node
representation learning. CNRL [47] applies the Latent Dirich-
let Allocation model (LDA) to the random walk sequences to
learn the community membership. DeepWalk [38] joins ran-
dom walk schemes and word2vec to learn node representation
with community structure. These existing algorithms mainly
focus on homogeneous graphs and treat each node equally,
while DEPCOMM gives priorities for neighbor nodes that are
more likely to represent intimate processes.
Graph Summarization. Graph summarization produces a
compact representation of a large-scale graph, facilitating the
identiﬁcation of structure and meaning in data [29–31]. It
has extensive applications, such as clustering, classiﬁcation,
community detection, and outlier detection. Unlike these tech-
niques whose target data is mainly stored in databases, DEP-
COMM processes dependency graphs, a type of heterogeneous
graphs where process nodes and other resource nodes represent
different steps of system activities.
VIII. CONCLUSION
We have presented DEPCOMM, which clusters intimate
processes that cooperate with each other to accomplish cer-
tain system tasks into a community and compresses the
repeated events inside each community. For each commu-
nity, DEPCOMM further identiﬁes InfoPaths that represent
the information ﬂows across communities, and ranks these
InfoPaths based on their likelihoods to reveal attack behaviors.
The top-ranked InfoPaths are then used as the summary for
each community. Our evaluations on real attacks demonstrate
the effectiveness of DEPCOMM in detecting process-centric
communities, compressing repeated events, and prioritizing
InfoPaths to assist attack investigation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
554
[1] Ebay, “Ebay Inc.
to change pass-
words,” 2014, http://blog.ebay.com/ebay-inc-ask-ebay-users-
change-passwords/.
[2] CNN, “OPM government data breach impacted 21.5 mil-
lion,” 2015, http://www.cnn.com/2015/07/09/politics/ofﬁce-of-
personnel-management-data-breach-20-million.
[3] New York Times, “Target data breach incident,” 2014,
http://www.nytimes.com/2014/02/27/business/target-reports-on-
fourth-quarter-earnings.html? r=1.
Depot
[4] NPR,
Conﬁrms
Breach
http://www.npr.org/2014/09/09/347007380/home-depot-
conﬁrms-data-breach-at-u-s-canadian-stores.
Canadian
Stores,”
U.S.,
“Home
At
Data
2014,
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for
the constructive comments and suggestions to improve the
manuscript. Zhiqiang Xu, Yu Wen, and Dan Meng are par-
tially supported by the Strategic Priority Research Program
of Chinese Academy of Sciences, Grant No.XDC02010300.
Pengcheng Fang, Changlin Liu, and Xusheng Xiao are par-
tially supported by the National Science Foundation under the
grants CNS-2028748 and CCF-2046953.
REFERENCES
to ask Ebay users
[5] Techcrunch, “Yahoo discloses hack of 1 billion accounts,”
2016, https://techcrunch.com/2016/12/14/yahoo-discloses-hack-
of-1-billion-accounts/.
[6] Federal Trade Commission, “The equifax data breach,” 2017,
https://www.ftc.gov/equifax-data-breach.
[7] Federal Trade Commission, “The marriott data breach,” 2018,
marriott-data-
https://www.consumer.ftc.gov/blog/2018/12/
breach.
[8] S. T. King and P. M. Chen, “Backtracking intrusions,” in
the ACM Symposium on Operating Systems
Proceedings of
Principles (SOSP). ACM, 2003, pp. 223–236.
[9] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M. Chen,
“Enriching intrusion alerts through multi-host causality,” in
Proceedings of the Annual Network and Distributed System
Security Symposium (NDSS).
ISOC, 2005.
[10] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara, “The
taser intrusion recovery system,” in Proceedings of the ACM
Symposium on Operating Systems Principles (SOSP). ACM,
2005, pp. 163–176.
[11] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, “Intrusion
recovery using selective re-execution,” in Proceedings of the
USENIX Symposium on Operating Systems Design and Imple-
mentation (OSDI). USENIX Association, 2010, pp. 89–104.
[12] Y. S. Liu, M. Zhang, D. Li, K. Jee, Z. C. Li, Z. Y. Wu, J. Rhee,
and P. Mittal, “Towards a timely causality analysis for enterprise
security,” in Proceedings of the Annual Network and Distributed
System Security Symposium (NDSS).
ISOC, 2018.
[13] Y. Kwon, F. Wang, W. H. Wang, K. H. Lee, W. C. Lee, S. Q. Ma,
X. Y. Zhang, D. Y. Xu, S. Jha, G. F. Ciocarlie, A. Gehani, and
V. Yegneswaran, “MCI : Modeling-based causality inference in
audit logging for attack investigation,” in Proceedings of the