## PostgreSQL 触发器 用法详解 2      
### 作者                                         
digoal                                          
### 日期                                        
2013-03-11                                           
### 标签                                        
PostgreSQL , trigger , 触发器 , 用法详解                                                                             
----                                        
## 背景                 
触发器在数据库中的应用非常广泛，例如在发生insert, update, delete, truncate时触发，调用事先写好的触发器函数。      
触发器函数可以使用plpgsql , c , python , perl , java等语言编写。       
触发器函数中支持很多内置的变量，可以干很多事情。      
本文将以PostgreSQL 9.2为例, 介绍触发器的使用. 分两部分.     
第一部分链接 :     
[《PostgreSQL 触发器 用法详解 1》](20130311_01.md)       
## 内容简介    
一、    
1\. 什么是触发器? 触发器有什么用? 创建触发器的语法?    
2\. 什么是触发器函数, 触发器函数可以用哪些语言编写?    
3\. 触发器有哪些分类?    
4\. 同一个表或视图上可以建多少个触发器? 如果一个表或视图上有多个触发器, 调用顺序如何决定?    
5\. 同一个触发器函数可以被多个触发器调用吗? 触发器函数的返回类型时什么? 触发器函数的返回值是否会影响下一个触发器函数或者被操作的行的数据? NEW 或者OLD record修改后会带来什么影响? 哪些触发器函数的返回值没有意义?    
6\. 触发器函数的返回值与返回行数的关系, 与变量FOUND, ROW_COUNT, RETURNING的关系.    
7\. 触发器的延时属性和状态.    
8\. 可以在系统表或系统视图上创建触发器吗?    
二、    
以plpgsql语言为例, 讲解触发器函数.    
9\. 触发器函数的返回值.    
10\. 触发器函数的参数.    
11\. 触发器函数中的变量与传递.    
12\. 触发器函数的数据可视与什么有关?    
13\. 触发器会无限递归吗? 如何避免?    
14\. 触发条件与性能.    
15\. 加入触发器后的事务特性.    
16\. 触发器的返回值是如何影响returning的结果的?    
## 正文    
二、  
以plpgsql语言为例, 讲解触发器函数.  
## 9. 触发器函数的返回值.  
上一篇中有大量的例子进行讲解, 文章末尾也做了总结, 这里就略过了.  
稍微小结一下,  
[返回值的类型 : ]  
  空 或者 触发器函数所在表或视图的结构化数据(record类型).  
[返回值的意义 : ]  
```  
    -- for each statement的触发器函数的返回值没有意义, 不会造成任何影响. 不管是返回NULL还是HeapTuple都无意义, 所以返回NULL就可以了.  
    -- after for each row 的触发器函数的返回值也没有意义, 不会造成任何影响. 不管是返回NULL还是HeapTuple都无意义, 所以返回NULL就可以了.  
    -- 因此有意义的就是before for each row的触发器函数的返回值.   
    -- before for each row触发器函数返回NULL将造成跳过该行的操作, 同时跳过后面所有的for each row触发器.  
    -- before for each row触发器函数返回HeapTuple时, 返回值将传递给下一个before for each row的触发器函数的NEW, 或者行操作的C函数.  
    -- 注意OLD不会传递给下一个触发器函数或操作行的C函数.  
```  
## 10. 触发器函数的参数与值传递.  
这里说的是plpgsql触发器函数的参数, 不是放在形参定义中, 而是使用TG_ARGV[]来获取.  
参数的值传递 :   
在创建触发器时传递, 以STRING常量类型传递, 如果不是string类型, 会自动转换成string类型.  
```  
arguments  
An optional comma-separated list of arguments to be provided to the function when the trigger is executed.   
The arguments are literal string constants. Simple names and numeric constants can be written here, too, but they will all be converted to strings.   
Please check the description of the implementation language of the trigger function to find out how these arguments can be accessed within the function;   
it might be different from normal function arguments.  
```  
例如 :   
```  
digoal=> create or replace function tg() returns trigger as $$  
declare  
begin  
  raise notice 'args:%', TG_NARGS;   
  if TG_NARGS>0 then  
    for i in 0..(TG_NARGS-1) loop  
      raise notice 'ARG%: %', i, TG_ARGV[i];  
    end loop;  
  end if;  
  return new;  
end;  
$$ language plpgsql;  
CREATE FUNCTION  
digoal=> create table arg_test (id int, info text, crt_time timestamp);  
CREATE TABLE  
```  
-- 参数是字符串常量, 不是变量.  
```  
digoal=> create trigger tg0 before insert on arg_test for each row execute procedure tg(id, info, crt_time);  
CREATE TRIGGER  
digoal=> insert into arg_test values (1,'digoal',now());  
NOTICE:  args:3  
NOTICE:  ARG0: id  
NOTICE:  ARG1: info  
NOTICE:  ARG2: crt_time  
INSERT 0 1  
```  
## 11. 触发器函数中的变量与传递.   
特殊变量, 这些变量自动被创建 :   
```  
When a PL/pgSQL function is called as a trigger, several special variables are created automatically in the top-level block. They are:  
NEW  
Data type RECORD; variable holding the new database row for INSERT/UPDATE operations in row-level triggers. This variable is NULL in statement-level triggers and for DELETEoperations.  
OLD  
Data type RECORD; variable holding the old database row for UPDATE/DELETE operations in row-level triggers. This variable is NULL in statement-level triggers and for INSERToperations.  
TG_NAME  
Data type name; variable that contains the name of the trigger actually fired.  
TG_WHEN  
Data type text; a string of BEFORE, AFTER, or INSTEAD OF, depending on the trigger's definition.  
TG_LEVEL  
Data type text; a string of either ROW or STATEMENT depending on the trigger's definition.  
TG_OP  
Data type text; a string of INSERT, UPDATE, DELETE, or TRUNCATE telling for which operation the trigger was fired.  
TG_RELID  
Data type oid; the object ID of the table that caused the trigger invocation.  
TG_RELNAME  
Data type name; the name of the table that caused the trigger invocation. This is now deprecated, and could disappear in a future release. Use TG_TABLE_NAME instead.  
TG_TABLE_NAME  
Data type name; the name of the table that caused the trigger invocation.  
TG_TABLE_SCHEMA  
Data type name; the name of the schema of the table that caused the trigger invocation.  
TG_NARGS  
Data type integer; the number of arguments given to the trigger procedure in the CREATE TRIGGER statement.  
TG_ARGV[]  
Data type array of text; the arguments from the CREATE TRIGGER statement. The index counts from 0. Invalid indexes (less than 0 or greater than or equal to tg_nargs) result in a null value.  
```  
其他变量 :   
与plpgsql函数的用法一致.   
declare 中声明.  
begin 中使用.  
这里不详细讲解.  
## 12. 触发器函数的数据可视与什么有关?  
在触发器函数中执行SQL时, 需要特别注意数据的可视, 是否能看到触发这个触发器的SQL语句前面已经修改过的行数据.  
```  
If you execute SQL commands in your trigger function, and these commands access the table that the trigger is for,   
then you need to be aware of the data visibility rules,   
because they determine whether these SQL commands will see the data change that the trigger is fired for. Briefly:  
Statement-level triggers follow simple visibility rules:   
none of the changes made by a statement are visible to statement-level triggers that are invoked before the statement,   
whereas all modifications are visible to statement-level AFTER triggers.  
```  
before for each statement 不能看到任何数据更改.   
after for each statement 能看到所有的数据更改.   
```  
The data change (insertion, update, or deletion) causing the trigger to fire is naturally not visible to SQL commands executed in a row-level BEFORE trigger, because it hasn't happened yet.  
before for each row触发器不能看到insert , update , delete对本行数据的更改. 因为本行数据变更尚未发生.  
However, SQL commands executed in a row-level BEFORE trigger will see the effects of data changes for rows previously processed in the same outer command. This requires caution, since the ordering of these change events is not in general predictable; a SQL command that affects multiple rows can visit the rows in any order.  
before for each row触发器可以看到其他已经变更的行的数据, 因为一条SQL语句可能操作多条数据, 后面的行触发器可以看到前面已经变更的行数据.   
Similarly, a row-level INSTEAD OF trigger will see the effects of data changes made by previous firings of INSTEAD OF triggers in the same outer command.  
instead of 触发器与上面类似, 可以看到其他已经变更的行的数据, 因为一条SQL语句可能操作多条数据, 后面的行触发器可以看到前面已经变更的行数据.   
When a row-level AFTER trigger is fired, all data changes made by the outer command are already complete, and are visible to the invoked trigger function.  
注意, after for each row触发器函数可以看到所有的数据变更, 因为after for each row触发器是在所有行都操作完后触发的.   
```  
例如SQL语句更新10条记录, 那么是这样的流程 :   
```  
1. before for each statement(触发1次)  
2. 循环10次  
{  
  before for each row (触发1次)  
  检查约束, 操作行.  
}  
3. after for each row(触发10次)  
4. after for each statement(触发1次)  
```  
```  
If your trigger function is written in any of the standard procedural languages, then the above statements apply only if the function is declared VOLATILE.   
Functions that are declared STABLE or IMMUTABLE will not see changes made by the calling command in any case.  
```  
以上对变更数据的可视仅限于函数为volatile, 当触发器函数为stable或者immutable时, 任何情况下都不能看到已经变更的数据.  
举例 :   
-- 创建测试表  
```  
digoal=> create table test(id int);  
CREATE TABLE  
```  
-- 创建触发器函数  
```  
digoal=> create or replace function tg() returns trigger as $$                                
declare  
  cnt int8;  
begin  
  select count(*) into cnt from test where id=1;  
  raise notice '%, %, %, %, cnt:%', TG_LEVEL, TG_WHEN, TG_OP, TG_NAME, cnt;  
  return new;  
end;  
$$ language plpgsql volatile;  
CREATE FUNCTION  
```  
-- 创建触发器  
```  
digoal=> create trigger tg0 before insert on test for each statement execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg1 after insert on test for each statement execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg2 before insert on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg3 before insert on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg4 before insert on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg5 after insert on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg6 after insert on test for each row execute procedure tg();  
CREATE TRIGGER  
digoal=> create trigger tg7 after insert on test for each row execute procedure tg();  
CREATE TRIGGER  
```  
-- 插入1行数据  
```  