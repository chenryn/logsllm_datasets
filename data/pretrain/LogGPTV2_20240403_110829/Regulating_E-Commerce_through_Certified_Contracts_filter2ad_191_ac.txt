Figure 3. Revised version of the contract-
example.
amount offered does not exceed $1,000. The question is:
how should a purchase order arriving while the ﬁrst version
was valid, but processed after it was revoked, be treated?
Here we chose to resolve the rule conﬂict by providing for
a grandfather clause (see Rule R5 in Figure 4).
R5. arbiter(version(1),
purchaseOffer(Specs,Amount,
PaymentInfo,Vendor),ClientCert) :-
issuer(ford CA,ClientCert),
role(purchaseOfficer,ClientCert),
do(accept).
A purchaseOffer request processed under version 2
of the contract is considered valid if: (1) it was received
under the ﬁrst version of the contract, and (2) it mets the
conditions stated in that contract version, namely, it was
sentbyadulyauthorized purchaseOfficer.
Figure 4. Revised version of the contract-
example (cont.)
6. Implementation
The system architecture, illustrated in Figure 5, relies on
the existence of three trusted entities: revocation servers,
contract repositories and generic policy-engines, called ob-
servers. Observers are trusted to verify certiﬁcates, inter-
pret and carry out contract terms, and maintain the list of
trusted contract issuers, TI. Under this scheme, an appli-
cation server (e.g. Web, database, or e-mail server) has (at
least) one associated observer, to which it passes received
requests for evaluation. Servers are trusted to service only
requests sanctioned by observers.
We are in position now to explain how contract enforce-
ment is carried out. Consider that a user U, makes a request
R, to a server S, which has an associated observer O. As-
sume further that R is accompanied by a certiﬁed contract
CC, and by a list (possibly empty) of subject certiﬁcates.
Then the following steps are taken:
(cid:127) The server S, passes the request, and the certiﬁcates to
the observer O to decide whether the request should be
served or not.
(cid:127) O veriﬁes that S is authorized to serve requests issued
under the contract designated by CC. This implies
checking if CC has been signed by a principal belong-
ing to TI, the list of trusted issuers.
(cid:127) O checks if request R has arrived during the validity
period inscribed in CC.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
(cid:127) O checks if the contract is still valid. Assuming that a
pull scheme is used, this implies contacting the revoca-
tion server mentioned in the certiﬁcate and retrieving
the latest CRLs. If the contract is valid, O records the
contract rules, the request, and the contract-version un-
der which it was received.
(cid:127) In case the contract has been revoked, O searches for an
update of this contract. For this, it asks the repository
mentioned by CC for the latest version of the contract.
Assuming that the repository maintains a newer ver-
sion of the contract CC’, then O takes the following
steps: First it checks whether, CC’ itself has not been
revoked. Second, it records the contract rules, and the
contract-version under which the request was received.
(cid:127) In case a valid version of the contract exists, then, for
each subject certiﬁcate SC, accompanying the request,
O checks that SC is valid by verifying that: (1) the sig-
nature is correct, (2) the certiﬁcate belongs to U, and
(3) the certiﬁcate has not been revoked.
(cid:127) Finally, O checks whether there is a rule in the contract
authorizing the request and carries out the ruling. This
is done as follows. First, the observer tries the eval
rules. If none is found, then, if appropriate, it checks
the arbiter rules. (An arbiter rule may be trig-
gered only if there is a discrepancy between the current
version of the contract, and the contract version num-
ber under which the request was received.) If there is a
rule sanctioning the request, then the observer carries
out any additional provisions. In the end, the server is
informed of the outcome; if the request was authorized
then, S processes the request; otherwise, the request is
discarded.
In the current implementation we are using the Jigsaw
server [6], developed by W3 Consortium, which has been
modiﬁed to communicate with observers. Observers are im-
plemented mostly in Java, and operate as independent pro-
cesses. An observer communicates by pipes with the server
it is associated with. To ensure state consistency a controller
evaluates the rules pertaining to the same contract sequen-
tially, and carries them out atomically, so that the sequence
of operations that constitutes the ruling for one request does
not interleave with those of any other request sent under the
same contract.
7. Related Work
There has been a growing interest in supporting e-
commerce contracts, and a variety of different, and quite
powerful, enforcement mechanisms have been devised, like
for example [7, 14, 1, 12]. However, to the best of our
knowledge, none of the frameworks proposed so far, em-
bed contracts in certiﬁcates, nor do they deal with contract
annulment or revision. We will brieﬂy review here some of
the general access control frameworks designed to support
independently stated, evolving policies.
Blaze, Feigenbaum and Lacy [4] built a toolkit, called
PolicyMaker, which can interpret arbitrary security poli-
cies. An agent receiving a request gives it for evaluation
to PolicyMaker together with its speciﬁc policy, and the re-
quester’s credentials. Thus, this framework supports any
number of policies, that can be updated/revoked at will by
the agent in charge of a given PolicyMaker engine. How-
ever, the framework does not consider the case where the
same policy is enforced by several, disparate policy en-
gines, and thus does not provide means for assuring that
all servers would update or revoke policies simultaneously.
Another related attempt is Tivoli Policy Director [11], an
impressive mechanism for controlling access to resources
over geographically dispersed intranets and extranets. This
framework, like ours, can support large sets of autonomous,
dynamic policies. However, Tivoli is speciﬁcally designed
for resource control, and it is not clear whether it can regu-
late applications, like e-commerce, which require control of
inter-agent communication.
There are few researchers which, like us, propose to em-
bed expressing various types of control policies in certiﬁ-
cates. Theimer et al.
[15] and Aura [2] proposed that
delegation policies should be distributed as certiﬁcates; and
Ioannidis et al. [10] advocated the use of certiﬁcates for dis-
semination of network security policies. The main differ-
ence between these works and ours boils down to the dis-
parate views we have on the content of these certiﬁcates. In
their view, a certiﬁcate contains both the identity of a user
(given as his public key) and the policy fragment spelling
out his rights. Thus, in these approaches, a policy is estab-
lished by issuing certiﬁcates for all agents having privileges
under the policy in question. And if a policy needs to be re-
voked, or revised, the certiﬁcates of all agents, which have
rights under the policy in question, have to be updated. This
is difﬁcult to achieve, especially if the number of policies
and/or the number of agents is large.
In our view, we have two distinct types of certiﬁcates:
subject-certiﬁcates, which establish the identity of their
owners, and certiﬁed-contracts which describe the rights of
all agents operating under the contract. In this case, to es-
tablish a contract, a single certiﬁcate has to be issued. And
if the contract is annulled or revised, all it is needed is to
revoke/update the certiﬁcate embedding the contract.
8. Conclusion
We have argued that existent access control mechanisms
cannot support adequately large sets of disparate, evolving
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Request,
Certificates
Requester
Legend:
pass info.
trusted 
issuers (TI)
give
response
Revocation Server
Server
Observer
Repository
information regarding a contract (name, version, validity period, 
revocation server, repository, requests)
Figure 5. System architecture
contracts. To deal with this problem we proposed in this pa-
per to certify contract terms, and to use the certiﬁcate infras-
tructure for contract management. This approach has sev-
eral important beneﬁts in B2B e-commerce context. First,
one does not have to maintain a dedicated server for each
contract (or set of contacts). As such, the number of agree-
ments, in which an enterprise is involved in, is no longer
an issue. Second, it is easy to establish new contracts: all
that is required, is to embed them in certiﬁcates, and deploy
them on repositories. Finally, contract revision and annul-
ment can be supported with great ease.
But our presentation of the certiﬁed-contract concept is
still wanting in some respects. In particular, we have as-
sumed that contract revocation and update can be carried
out only by the agent which issued the CC in question. This
solution relies on the assumption that the trusted principal
maintains its status and is available for the life time of the
contract. Since this assumption might not always hold, it
would be desirable to annul (revise) a contract without re-
sorting to a single, hardwired trusted party. To deal with
this issue we plan to explicitly embed into a CC informa-
tion regarding additional agents which are allowed to call
for an update or the annulment of the CC, and to investigate
how the mechanism should be extended to support this type
of extension. This, and other issues, will be discussed in a
subsequent paper.
References
[1] S. Abiteboul, V. Vianu, B. Forham, and Y. Yesha. Rela-
tional transducers for electronic commerce. In Symposium
on Principles of Database Systems, pages 179–187, June
1998.
[2] T. Aura. Distributed access-rights management with dele-
gations certiﬁcates. In Secure Internet Programming, pages
211–235, 1999.
[3] C. Bidan and V. Issarny. Dealing with multi-policy security
in large open distributed systems. In Proceedings of 5th Eu-
ropean Symposium on Research in Computer Security, pages
51–66, Sept. 1998.
[4] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust
managemnt. In Proceedings of the IEEE Symposium on Se-
curity and Privacy, May 1996.
[5] P. Bonatti, S. D. C. di Vimercati, and P. Samarati. A modular
approach to composing access control policies. In Proc. of
the Seventh ACM Conference on Computer and Communi-
cations Security, pages 164 – 173, Athens, Greece, 2000.
[6] W. W. W. Consortium. Jigsaw - the W3C’s web server. web-
site:http://www.w3.org/Jigsaw/.
[7] A. Dan, D. Dias, R. Kearny, T. Lau, T. N. Nguyen, F. N.
Parr, M. W. Sachs, and H. H. Shaickh. Business-to-business
integration with tpaML asnd a business-to-business protocol
framework. IBM Systems Journal, 40(1):68–90, 2001.
[8] Economist. E-commerce (a survey). pages 6–54.
(The
February 26th 2000 issue).
[9] Economist. Riding the storm. pages 63–64. (November 6th
1999 issue).
[10] S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M.
Smith. Implementing a distributed ﬁrewall. In ACM Con-
ference on Computer and Communications Security, pages
190–199, 2000.
[11] G. Karjoth. The authorization service of Tivoli policy direc-
tor. In Proc. of the 17th Annual Computer Security Applica-
tions Conference (ACSAC 2001), December 2001.
[12] N. Minsky and V. Ungureanu. A mechanism for establishing
policies for electronic commerce. In The 18th International
Conference on Distributed Computing Systems (ICDCS),
pages 322–331, Amsterdam, The Netherlands, May 1998.
[13] N. Minsky and V. Ungureanu. Law-governed interaction: a
coordination and control mechanism for heterogeneous dis-
tributed systems. TOSEM, ACM Transactions on Software
Engineering and Methodology, 9(3):273–305, July 2000.
[14] M. Roscheisen and T. Winograd. A communication agree-
ment framework for access/action control. In Proceedings
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
of the IEEE Symposium on Security and Privacy, Oakland,
California, May 1996.
[15] M. Theimer, D. Nichols, and D. Terry. Delegation through
In Proceedings of Distributed
access control programs.
Computing System, pages 529–536, 1992.
[16] R. Wright, P. Lincoln, and J. Millen.
Efﬁcient fault-
tolerant certiﬁcate revocation.
In Proceedings of the 7th
ACM Conference on Computer and Communications Secu-
rity, November 2000.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE