### Figure 3. Revised Version of the Contract Example

In this revised version, a purchase order that arrives while the first version of the contract is valid but is processed after it has been revoked raises a question: How should such a purchase order be treated? We resolve this rule conflict by incorporating a grandfather clause (see Rule R5 in Figure 4).

**Rule R5:**
```prolog
arbiter(version(1), purchaseOffer(Specs, Amount, PaymentInfo, Vendor), ClientCert) :-
    issuer(ford_CA, ClientCert),
    role(purchaseOfficer, ClientCert),
    do(accept).
```

A `purchaseOffer` request processed under version 2 of the contract is considered valid if:
1. It was received under the first version of the contract.
2. It meets the conditions stated in the first version, specifically that it was sent by a duly authorized purchase officer.

### Figure 4. Revised Version of the Contract Example (Continued)

### 6. Implementation

The system architecture, illustrated in Figure 5, relies on three trusted entities: revocation servers, contract repositories, and generic policy engines called observers. Observers are responsible for verifying certificates, interpreting and enforcing contract terms, and maintaining a list of trusted contract issuers, TI. Under this scheme, an application server (e.g., Web, database, or email server) is associated with at least one observer, to which it forwards received requests for evaluation. Servers are trusted to service only those requests sanctioned by the observers.

#### Contract Enforcement Process

Consider a user U making a request R to a server S, which has an associated observer O. Assume that R is accompanied by a certified contract CC and a list (possibly empty) of subject certificates. The following steps are taken:

1. **Request Forwarding:**
   - The server S passes the request and the certificates to the observer O to determine whether the request should be served.

2. **Authorization Verification:**
   - O verifies that S is authorized to serve requests issued under the contract designated by CC. This involves checking if CC has been signed by a principal belonging to TI, the list of trusted issuers.

3. **Validity Period Check:**
   - O checks if the request R arrived during the validity period specified in CC.

4. **Contract Validity Check:**
   - O checks if the contract is still valid. Assuming a pull scheme, this involves contacting the revocation server mentioned in the certificate and retrieving the latest Certificate Revocation Lists (CRLs). If the contract is valid, O records the contract rules, the request, and the contract version under which it was received.

5. **Contract Update Check:**
   - If the contract has been revoked, O searches for an updated version of the contract. It queries the repository mentioned in CC for the latest version. If a newer version CC' exists, O performs the following:
     - Checks if CC' itself has not been revoked.
     - Records the contract rules and the contract version under which the request was received.

6. **Subject Certificate Validation:**
   - For each subject certificate SC accompanying the request, O checks that SC is valid by verifying:
     1. The signature is correct.
     2. The certificate belongs to U.
     3. The certificate has not been revoked.

7. **Rule Evaluation:**
   - Finally, O checks if there is a rule in the contract authorizing the request and enforces the ruling. This is done as follows:
     - First, the observer tries the `eval` rules. If none is found, it checks the `arbiter` rules (an arbiter rule is triggered only if there is a discrepancy between the current contract version and the version under which the request was received).
     - If a rule sanctions the request, the observer carries out any additional provisions. The server is informed of the outcome; if the request is authorized, S processes the request; otherwise, the request is discarded.

In the current implementation, we use the Jigsaw server [6], developed by W3 Consortium, which has been modified to communicate with observers. Observers are implemented mostly in Java and operate as independent processes. An observer communicates with the server via pipes. To ensure state consistency, a controller evaluates the rules pertaining to the same contract sequentially and carries them out atomically, so that the sequence of operations for one request does not interleave with those of any other request under the same contract.

### 7. Related Work

There has been growing interest in supporting e-commerce contracts, and various powerful enforcement mechanisms have been devised, such as [7, 14, 1, 12]. However, to the best of our knowledge, none of the proposed frameworks embed contracts in certificates or deal with contract annulment or revision. We briefly review some general access control frameworks designed to support independently stated, evolving policies.

- **PolicyMaker [4]:** Blaze, Feigenbaum, and Lacy built a toolkit called PolicyMaker, which can interpret arbitrary security policies. An agent receiving a request gives it to PolicyMaker along with its specific policy and the requester's credentials. This framework supports any number of policies that can be updated or revoked at will by the agent in charge of a given PolicyMaker engine. However, it does not address the case where the same policy is enforced by several disparate policy engines, nor does it provide means to ensure simultaneous updates or revocations across all servers.

- **Tivoli Policy Director [11]:** This is an impressive mechanism for controlling access to resources over geographically dispersed intranets and extranets. Like our framework, Tivoli can support large sets of autonomous, dynamic policies. However, Tivolic is specifically designed for resource control, and it is unclear whether it can regulate applications like e-commerce, which require control of inter-agent communication.

- **Other Approaches:** Some researchers propose embedding various types of control policies in certificates. Theimer et al. [15] and Aura [2] suggested distributing delegation policies as certificates, and Ioannidis et al. [10] advocated using certificates for disseminating network security policies. The main difference between these works and ours lies in the content of the certificates. In their view, a certificate contains both the identity of a user (given as their public key) and the policy fragment spelling out their rights. Thus, a policy is established by issuing certificates for all agents with privileges under the policy. If a policy needs to be revoked or revised, the certificates of all agents with rights under the policy must be updated, which is difficult to achieve, especially with a large number of policies and/or agents.

In our approach, we have two distinct types of certificates:
- **Subject Certificates:** Establish the identity of their owners.
- **Certified Contracts:** Describe the rights of all agents operating under the contract. To establish a contract, a single certificate is issued. If the contract is annulled or revised, only the certificate embedding the contract needs to be revoked or updated.

### 8. Conclusion

We argue that existing access control mechanisms cannot adequately support large sets of disparate, evolving contracts. To address this problem, we propose certifying contract terms and using the certificate infrastructure for contract management. This approach offers several important benefits in the B2B e-commerce context:
1. **Reduced Server Overhead:** There is no need to maintain a dedicated server for each contract or set of contracts, making the number of agreements manageable.
2. **Ease of Establishment:** New contracts can be easily established by embedding them in certificates and deploying them on repositories.
3. **Simplified Revision and Annulment:** Contract revision and annulment can be supported with ease.

However, our presentation of the certified-contract concept is still lacking in some respects. Specifically, we assume that contract revocation and update can only be carried out by the agent that issued the CC. This solution relies on the assumption that the trusted principal maintains its status and is available for the life of the contract. Since this assumption may not always hold, it would be desirable to annul or revise a contract without relying on a single, hardwired trusted party. To address this, we plan to explicitly embed information into a CC regarding additional agents allowed to call for an update or annulment of the CC, and to investigate how the mechanism should be extended to support this type of extension. These and other issues will be discussed in a subsequent paper.

### References

[1] S. Abiteboul, V. Vianu, B. Forham, and Y. Yesha. Relational transducers for electronic commerce. In Symposium on Principles of Database Systems, pages 179–187, June 1998.

[2] T. Aura. Distributed access-rights management with delegations certificates. In Secure Internet Programming, pages 211–235, 1999.

[3] C. Bidan and V. Issarny. Dealing with multi-policy security in large open distributed systems. In Proceedings of 5th European Symposium on Research in Computer Security, pages 51–66, Sept. 1998.

[4] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust management. In Proceedings of the IEEE Symposium on Security and Privacy, May 1996.

[5] P. Bonatti, S. D. C. di Vimercati, and P. Samarati. A modular approach to composing access control policies. In Proc. of the Seventh ACM Conference on Computer and Communications Security, pages 164 – 173, Athens, Greece, 2000.

[6] W. W. W. Consortium. Jigsaw - the W3C’s web server. website: http://www.w3.org/Jigsaw/.

[7] A. Dan, D. Dias, R. Kearny, T. Lau, T. N. Nguyen, F. N. Parr, M. W. Sachs, and H. H. Shaickh. Business-to-business integration with tpaML and a business-to-business protocol framework. IBM Systems Journal, 40(1):68–90, 2001.

[8] Economist. E-commerce (a survey). pages 6–54. (The February 26th 2000 issue).

[9] Economist. Riding the storm. pages 63–64. (November 6th 1999 issue).

[10] S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M. Smith. Implementing a distributed firewall. In ACM Conference on Computer and Communications Security, pages 190–199, 2000.

[11] G. Karjoth. The authorization service of Tivoli policy director. In Proc. of the 17th Annual Computer Security Applications Conference (ACSAC 2001), December 2001.

[12] N. Minsky and V. Ungureanu. A mechanism for establishing policies for electronic commerce. In The 18th International Conference on Distributed Computing Systems (ICDCS), pages 322–331, Amsterdam, The Netherlands, May 1998.

[13] N. Minsky and V. Ungureanu. Law-governed interaction: a coordination and control mechanism for heterogeneous distributed systems. TOSEM, ACM Transactions on Software Engineering and Methodology, 9(3):273–305, July 2000.

[14] M. Roscheisen and T. Winograd. A communication agreement framework for access/action control. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, California, May 1996.

[15] M. Theimer, D. Nichols, and D. Terry. Delegation through access control programs. In Proceedings of Distributed Computing System, pages 529–536, 1992.

[16] R. Wright, P. Lincoln, and J. Millen. Efficient fault-tolerant certificate revocation. In Proceedings of the 7th ACM Conference on Computer and Communications Security, November 2000.

Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC 2002)  
1063-9527/02 $17.00 © 2002 IEEE