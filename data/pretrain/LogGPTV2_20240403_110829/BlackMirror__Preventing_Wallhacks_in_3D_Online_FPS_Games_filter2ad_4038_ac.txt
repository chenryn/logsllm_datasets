and devices commonly-used.
6 DESIGN OF BLACKMIRROR
In this paper, we present an alternative approach to defeating wall-
hacks using trusted execution. In particular, we present an anti-
cheat system, where players do not have to install untrusted pro-
prietary kernel modules on their machines and neither does the
game company have to deploy insecure obfuscation techniques to
hide sensitive information.
The key idea behind BlackMirror is to provision the game
application with an SGX enclave and store all sensitive game entities
within the enclave, and therefore, inaccessible to the potentially
dishonest player. More specifically, sensitive game entities (e.g.,
enemy characters) reside in the enclave even when they should
not be visible to the player. To maintain compatibility with legacy
game engines, BlackMirror performs in-enclave updates to these
states based on secure messages from the server and player inputs.
Then, BlackMirror performs in-enclave visibility testing on
each frame to determine the visibility of entities requested by the
untrusted game client, in the current frame. If an entity is found
to be visible, BlackMirror declassifies such an entity—i.e., the
current state of the entity is provided to the untrusted client, so
that it can be processed by GPU. Otherwise, BlackMirror keeps
the states secure in the enclave. Note that this does not harm the
original functionality of our rendering pipeline, because non-visible
entities will not be processed anyways.
In the remaining, we first describe how BlackMirror boot-
straps on the machine and creates a secure connection with the
server (§6.1). Then we describe which entities are sensitive and thus
stored within an enclave (§6.2). Next, we explain how BlackMirror
updates the entity states within an enclave to maintain the game
functionality (§6.3). Lastly, we describe how BlackMirror per-
forms in-enclave visibility testing and declassifies an entity if found
to be visible in a given frame (§6.4).
6.1 Bootstrapping
In this subsection, we go over the bootstrapping of BlackMirror,
as an enclave module installed alongside the game client, as well
as the establishment of a secure channel with the game server.
Installation of secure enclave. BlackMirror is deployed as an
enclave, and which should be loaded by the game client. First of all,
the user downloads the game client from the web. Installation of a
game is done in a similar manner to typical games, except that the
installation includes an enclave program.
Attestation of correctness. Later, the user runs the client asks a
game server to join a game. Upon receiving a request, the server
challenges the client to prove the correct loading of BlackMirror
on its platform. In particular we take advantage of remote attesta-
tion [13, 42] of SGX. As a result, the server can enforce that every
connected client runs BlackMirror on an SGX-enabled CPU.
Establishing trusted channel with server. BlackMirror and
the game server generate a shared secret key, using Elliptic Curve
Diffie-Hellman (ECDH), that resides within the enclave and is valid
for the duration of the game. The shared key is not exposed out-
side the enclave and the server will not perform this step with-
out prior attestation. Furthermore, if the attacker stops running
BlackMirror during gameplay, their program will terminate in an
unstable state since server updates cannot be deciphered without
the shared key. They will also lose all updates stored within the
enclave memory. Lastly, server appends sequence numbers to the
messages that it sends to the client, to prevent replay attacks.
6.2 Protecting Entities for Trusted Visibility
Testing
The key idea of BlackMirror is to store potentially sensitive enti-
ties within an enclave. In order to still leverage GPU-based render-
ing, those secured entities are allowed to leave an enclave and pass
to GPU only if known to be visible. Hence, BlackMirror needs
trusted visibility testing such that it can faithfully tell entities can
leave an enclave or not. In this regard, the following of this subsec-
tion describes which entities should be stored within an enclave
for trusted visibility testing.
Entity Hierarchy and Visibility Testing. A hierarchy of game
entities can be illustrated as shown in Figure 6. Entities can be
classified into either self, sensitive, or non-sensitive entities. Self
entity represents the player him/herself, from which the camera
location is determined. Sensitive entities are the entities whose state
should not be leaked, unless it is necessary, for example, the enemy
entities or the supplies. On the contrary, the state of non-sensitive
entities are not crucial for the game play, even if it is leaked, for
example, the walls or environment objects. Non-sensitive entity
can be classified into i) occluders, which may affect the visibility of
sensitive entity (e.g., wall) and ii) non-occluders, which does not
block the view.
Player’s visibility is determined with following two factors: 1)
a visible volume, which considers if an entity is within a field-of-
view of the self-player; and 2) an occlusion, which considers if an
entity is obstructed by other entities (such as wall). For example,
in Figure 8, the visible volume is highlighted with shadow area,
and 𝑒2 and 𝑒3 survives visible-volume-based clipping, as they are
included in the shadow. However, 𝑒1 is non-visible entity because it
is placed outside the visible volume. Then considering the occlusion,
𝑒2 becomes a non-visible entity as it is behind the wall, which is
highlighted with darker shadow. As a result, only 𝑒3 is the visible
entity for the player, and 𝑒1 and 𝑒2 are non-visible entities.
Entities for Trusted Visibility Testing. BlackMirror protects
the entities that are relevant to visibility testing, namely self, sensi-
tive entities, and occluders. More specifically, BlackMirror needs
to guarantee the confidentiality of sensitive entities, because enemy
entity information itself is the target of game cheating. BlackMirror
also needs to ensure the integrity of all of these entities, as they
possibly affect the result of visibility testing. For instance, if an at-
tacker is able to change the location of a box, which is an occluder,
Entities
: Confidentiality + Integrity
: Integrity-only
: No protection
Self (Camera)
Sensitive
Non-sensitive
Occluders
Non-occluders
self
visible
non-visible occl-
self
visible
occl-
non-occl-
Trusted State
Untrusted State
Figure 6: An entity hierarchy and BlackMirror’s partition-
ing to trusted and untrusted state. Filled lines denote that
entities are unconditionally declassified, and dashed lines
denote that entities are declassified depending on the result
of visibility testing.
C
A
M
|
|
s
t
u
p
n
i
t
n
e
i
l
C
s
t
u
p
n
i
t
n
e
i
l
C
Server
Global
State
Game
Engine
Update
Encode +
Encrypt
Trusted updates
Client
BlackMirror
Insensitive updates
d
e
t
s
u
r
t
n
U
r
e
d
o
c
e
D
Prediction
Engine
2
P
r
e
d
i
c
t
Decode +
Decrypt
1 Update
Trusted
State
Trusted
Geometry
Geometry,
Textures
& Shaders
Untrusted
State
BMTest
3 Declassify
Inputs
GPU
Figure 7: Overall architecture of BlackMirror
the attacker would be able to evade the visibility testing, so that an
enemy entity which should not be visible, say it is behind the box,
for the attacker can be tested as visible.
6.3 Trusted State Updates
BlackMirror stores sensitive entity states within an enclave as
described in §6.2. Thus, BlackMirror should be able to update such
entity states within an enclave so as to preserve the functionality of
game plays. More specifically, there are two in-enclave updates to
trusted state: (a) updates from the server through encrypted packets
to ensure consistent game states; and (b) predictions performed by
the enclave in response to input received from the player.
Updating Trusted State with Server Messages. The server pe-
riodically transmits encrypted packets, which includes changes
to each entities including the player entity and sensitive entities.
Update (w/ server messages)
Predict
Trusted
State
𝑝𝑙𝑎𝑦𝑒𝑟
𝑥′
𝑠
𝑒𝑛𝑡1
𝑥′
1
𝑒𝑛𝑡2
𝑥′
2
𝑒𝑛𝑡3
𝑥′
3
𝑥′′
𝑠 = 𝑥𝑠 + Δ𝑡 · 𝑢↑ · 𝑣
BlackMirror
Client
e
t
a
d
p
u
1
Enc
𝑝𝑙𝑎𝑦𝑒𝑟
𝑥𝑠 → 𝑥′
𝑒𝑛𝑡1
𝑠 𝑥1 → 𝑥′
𝑒𝑛𝑡2
1 𝑥2 → 𝑥′
𝑒𝑛𝑡3
2 𝑥3 → 𝑥′
3
t
c
i
d
e
r
p
2
Untrusted
State
Server
𝑝𝑙𝑎𝑦𝑒𝑟
𝑥𝑠
𝑒𝑛𝑡1
𝑥1
𝑒𝑛𝑡2
𝑥2
𝑒𝑛𝑡3
𝑥3
𝑝𝑙𝑎𝑦𝑒𝑟
𝑥′′
𝑠
𝑒𝑛𝑡1
𝑥′′
1
𝑒𝑛𝑡2
𝑥′′
2
𝑒𝑛𝑡3
𝑥′′
3
Inputs
, timestamp
Declassify
BMTest
𝑒3
𝑒2
Visible
Volume
𝑠
Field-of-View
𝑒1
3
d
e
c
l
a
s
s
i
f
y
𝑝𝑙𝑎𝑦𝑒𝑟
𝑥′′
𝑠
𝑒𝑛𝑡1
𝑥1
𝑒𝑛𝑡2
𝑥′′
2
𝑒𝑛𝑡3
𝑥3
GPU
Time
Figure 8: BlackMirror’s workflow on update, predict and declassify operations
Upon receiving these packets, BlackMirror runs update opera-
tion ( 1 in Figure 8) to synchronize its trusted state with the server.
Updating the trusted state is done similarly to how the regular
(insecure) client updates its local entity states (refer §2.1).
Local Prediction using Player Input. The client invokes predict
operation ( 2 ) to perform prediction-based state updates using
player input. Recall that this local prediction is vital to ensuring
that game scenes are updated more frequently (§2.1).
Calculating state updates using provided input. To perform predic-
tions, BlackMirror requires player input, e.g., from keyboard and
mouse, and the elapsed time from the last prediction to predict the
future trusted state. To be more specific, it uses the input states,
such as the fraction of time a key was pressed, and what was the
mouse direction to compute final location of the player entity. For
example, in Figure 8, the player’s origin was 𝑥′
𝑠 after server up-
dates. The time between the last prediction and current time is
Δ𝑡 and the player pressed forward (↑) key for given time interval.
BlackMirror can compute unit vector of the forward direction
using the view angle and call it be 𝑢↑. Then the predicted origin of
the player becomes 𝑥′′
𝑠 = 𝑥𝑠 + Δ𝑡 · 𝑢↑ · 𝑣, where 𝑣 is the speed value
stored in the enclave.
Sensitive entities other than the player entities can be updated
as well. In particular, BlackMirror extrapolates the origin and
angle based on the elapsed time and previously received server mes-
sages. Security Checks on Untrusted Player Inputs. BlackMirror
should also address malicious inputs during the prediction, since