Algorithm 2 ReceiptGen by the UC
Require: (tk = ( ˜R, σ ˜R), vkSM, skUC = α)
Ensure: rcpti
1: procedure
2:
3:
4:
5:
6:
7:
8: end procedure
Parse tk as ( ˜R, σ ˜R)
if Verify(vkSM,( ˜R, σ ˜R)) = 0 then
else
return ⊥
return rcpti = ˜Rα .
end if
UC → RU:
rithm 2) after payment confirmation.
(1) The UC outputs rcpti ← ReceiptGen(tk, vkSM, skUC) (Algo-
(2) If rcpti (cid:44) ⊥, the UC sends it to the RU; otherwise, it aborts.
?= e( ˜R, дα). If not, the RU aborts.7
The RU checks e(rcpti , д)
Bill Verification Phase (SM → RU, RU → UC):
Suppose at the end of the billing period t, the RU with identity ID
is charged by K units of e-cash. Then, the SM must have issued K
tokens {tki}K = { ˜Ri , σ ˜Ri }K to the RU. If the RU had paid K units
of e-cash to the UC, he would have received K receipts {rcpti}i∈K .
This is the only phase in which the RU reveals the identity ID to
the utility company, perform bookkeeping locally (and reminding
the other customers who did not settle the bill).
SM → RU: The SM executes BillGen (Algorithm 3) to generate the
bill for the RU whose identity is ID. The SM forwards the output
of BillGen, i.e., bill = (τ , mID,t , σ B
ID,t), to the RU. Here, τ is the in-
ternal state of the SM, which consists of the aggregated random
exponent and aggregated random element (See Algorithm 1). σ B
ID,t
is a signature on the billing information mID,t .
RU → UC: Suppose the RU has settled the bill bill = (τ, mID,t ,
ID,t) from the SM, i.e., received K receipts {rcpti}i∈K from the
σ B
UC. The RU executes CombineReceipt(bill, {rcpti}i∈K , PPUC) (Al-
gorithm 4) to obtain σ R
ID,t . Then, the RU presents the proof πID,t =
ID,t) to the UC, who verifies it by checking whether
(mID,t , σ B
ID,t , д) = e(RID,t , дα), where
Verify(vkSM,(mID,t , σ B
RID,t is a part of mID,t . If both hold, the UC is convinced that the
RU with identity ID has settled the bill for the period t.
ID,t)) = 1 and e(σ R
ID,t , σ R
We remark that while the SM uses the same signing key skSM to
= Sign(skSM, mID,t) here and σ ˜R := Sign(skSM, ˜R)
create both σ B
in TokenGen, their respective message spaces are different, and the
UC will distinguish two different kinds of signatures.
If everything was executed honestly and with the needed verifi-
cations, the RU will convince the UC in the bill verification phase,
which follows from the correctness of the signature scheme SS
and the equality below:
ID,t
7A malicious UC can always refuse to return a receipt after receiving a coin. This can
be generally resolved by requiring a fair exchange protocol. The RU may report any
misbehavior to some third-party arbitrator.
Algorithm 3 BillGen (with internal state τ) by SM
Require: (skSM, ID, t, τ)
Ensure: bill
1: procedure
2:
3:
4:
5:
6: end procedure
Parse τ as (rID,t , RID,t)
mID,t := (RID,t , ID, t)
ID,t := Sign(skSM, mID,t)
σ B
return bill := (τ , mID,t , σ B
ID,t)
▷ Prepare the bill information
Algorithm 4 CombineReceipt by RU
Require: (bill, {rcpti}i∈K , PPUC)
Ensure: σ R
ID,t
1: procedure
2:
3:
4:
5:
ID,t
6: end procedure
Parse bill as (τ , mID,t , σ B
Extract rID,t , дα from τ and PPUC, respectively
ID,t := (
σ R
return σ R
ID,t)
i =1 rcpti)/(дα)rID,t
K
e(σ R
ID,t , д) = e((
i =1
rcpti)/(дα)rID,t , д)
K
K
i =1(дri Ri)α/дαrID,t , д)
K
K
K
i =1(Ri)/дrID,t , дα)
i =1 ri
= e(
= e(д
= e(
i =1
Ri , дα)
= e(RID,t , дα).
▷ since rID,t =K
K
▷ since RID,t =
Ri
i =1
i =1 ri
4.4 Flexible Payment and Fault Tolerance
Each random element Ri corresponds to a unit payment. We can
easily extend it such that the RU can choose to pay more for each
time. Suppose ten dollars is also a valid denomination. The RU can
choose to hide among the set of users who pay ten dollars at a time.
Sipster can handle non-malicious malfunction of either the RU or
the SM with some small twists. In the above description, if one pay-
ment/receipt for a particular Ri term is missed, all the other receipts
will become useless in the final aggregated receipt verification. To
add fault tolerance, instead of choosing (ri , Ri) uniformly at ran-
dom (or forcing each SM to store every single pair (ri , Ri)), the SM
computes (ri , Ri) = PRF(kPRF,(ID||i)), where kPRF is a hard-coded
key for the pseudorandom function PRF : {0, 1}|kPRF| × {0, 1}∗ →
Z∗p × G1. The RU can request the SM for the missing i-th token and
re-pay the UC. This resilience feature requires the SM to have a
simple interface for keying in a number. The internal state of the
SM can also store the total number of receipts issued so far.
225ACSAC ’21, December 6–10, 2021, Austin, Texas, USA
Sherman S. M. Chow, Ming Li, Yongjun Zhao, and Wenqiang Jin
If the SM stops functioning in the middle of a billing period, we
can make further modifications so that the RU does not need to pay
the entire bill again. Namely, the internal state of the SM also stores
an “interim” signature σinterim on minterim = (Rτ , ID||“interim”, t).
When the need arises, the RU requests the smart meter company
staff to fix the meter physically and retrieve this special signature
and the internal state rτ before resetting the SM to the initial state.
The RU completes the proof almost as usual, but now the ID is
appended with a tag “interim” in clear. The UC is then assured that
the RU had paid the latest amount up to the breaking point.
In the very rare case, the (“trusted”) SM completely fails, and
even σinterim is lost too, any financial loss can still be resolved by
pre-defined agreements or different dispute resolution procedures
independent/transparent to Sipster. For example, if the meter is
deemed faulty by the staff, the smart-meter company is responsible;
otherwise, the RU should compensate for the loss and possibly the
checking and fixing fees. In practice, there are usually collateral
requirements on the RU (e.g., originally for late payment), and the
UC probably has some waiving/capping policy too.
4.5 Security Analysis
Section 2.3 identified three goals for Sipster: privacy, unforgeability,
and double-spending prevention. Accordingly, we formulate two
security notions for our Sipster systems: privacy (Definition 5) and
soundness (Definition 7, covering both unforgeability and double-
spending prevention), via cryptographic games between a chal-
lenger and an adversary, who has oracle access to various algo-
rithms. We describe the intuition behind the formalism below and
leave the formal details in Appendix C.
Intuitively, with our specific design, and the typical blind signing
trick in the underlying signature scheme, the UC only sees and signs
(pseudo)random and unlinkable tokens and verifies a constant-size
proof of correct-bill-settlement, all these can be simulated without
any secret knowledge nor any identifying information of any payer.
The intuition for soundness is more difficult to explain in purely
high-level terms as it largely depends on the cryptographic con-
struction. Intuitively, while the application settings are different,
the core arguments for unforgeability are similar to the implicit
underlying aggregate signature [13]. Likewise, for double-spending
prevention, it roots from the unforgeability of the user identity
component and the “restricted signing functionality” that only
works on the randomness chosen by the trusted meter, but not
adversarially-chosen values (as they cannot be fed to the meter).
Remarks on Usages of Pairings. The use of asymmetric primi-
tives such as pairing enables public verifiability, particularly over
the tokens generated by the UC and the proof of bill-settlement
generated by the RU. This comes in handy in dispute resolution.
If asymmetric pairing group (G1 = ⟨д1⟩, G2 = ⟨д2⟩, GT ) is pre-
ferred, Sipster can be rewritten in the asymmetric setting easily.
Specifically, дα
1 can be released for CombineReceipt (Algorithm 4)
and дα
2 can be released for UC verification. The security proofs will
remain more or less the same, except Theorem 2 will rely on the
co-gap-DH assumption [14].
Figure 1: An Illustration of the Experimental Setup
5 PERFORMANCE EVALUATION
We evaluate the computation and communication performances of
the proposed Sipster system to show its practicability. Fig. 1 shows
the experimental setups of Sipster: The SM is built on a testbed with
a 1.5GHz ARM Cortex-A9 processor and 1GB RAM, reflecting the
moderate computation power of a typical smart meter.8 Both the
RU and UC are implemented on PCs with a 3.4GHz Intel-i5 CPU
and 32GB RAM. The communication among them is established
via local Ethernet with 89.6Mbps bandwidth.
We instantiate the signature used by the SM by ECDSA [41] from
OpenSSL [56]. Its elliptic curve is over a prime field of n = 256 bits.
As a prototype, we use the Pairing Based Cryptography Library9
with a “Type A” elliptic curve generated for 256-bit group order
and 512-bit base field. One could easily port it over other curves,
such as “Type-F” curves. We follow a basic implementation without
any optimization, e.g., pre-computation of some pairing values, or
speeding up exponentiation for those sharing the same base, which
will further decrease the timing figures. Table 1 summarizes the time
needed for all basic operations. We report the performance in three
dimensions: (aggregated) computation time (Section 5.1), service
latency (Section 5.2), and communication cost (Section 5.3). We omit
the underlying (e-)cash system since it is not part of our design,
and any such system can do. All experimental results represent an
average of 10000 trials.
5.1 Computation Performance
Sipster has four phases: setup, bill issuing, bill settlement, and
bill verification. Setup is carried offline only once at the system
8 Cortex A-series has been adopted, e.g., STMicroelectronics offers energy SM products
with Cortex-A9 as the control unit (https://www.st.com/content/ccc/resource/sales_
and_marketing/promotional_material/brochure/eb/29/0b/3e/a3/7a/4b/7d/brmeter.
pdf/files/brmeter.pdf/jcr:content/translations/en.brmeter.pdf). It was first released in
2013. That means the great performance (in the order of milliseconds) of Sipster is