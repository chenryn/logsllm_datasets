title:Out of Control: Overcoming Control-Flow Integrity
author:Enes G&quot;oktas and
Elias Athanasopoulos and
Herbert Bos and
Georgios Portokalidis
2014 IEEE Symposium on Security and Privacy
Out Of Control: Overcoming Control-Flow Integrity
Enes Gökta¸s∗
Vrije Universiteit
Elias Athanasopoulos†
FORTH-ICS
Amsterdam, The Netherlands
Email: PI:EMAIL
Heraklion, Crete, Greece
Email: PI:EMAIL
Herbert Bos
Vrije Universiteit
Amsterdam, The Netherlands
Email: PI:EMAIL
Georgios Portokalidis
Stevens Institute of Technology
Hoboken, NJ, USA
Email: PI:EMAIL
Abstract—As existing defenses like ASLR, DEP, and stack
cookies are not sufﬁcient to stop determined attackers from
exploiting our software, interest in Control Flow Integrity (CFI)
is growing. In its ideal form, CFI prevents ﬂows of control that
were not intended by the original program, effectively putting
a stop to exploitation based on return oriented programming
(and many other attacks besides). Two main problems have
prevented CFI from being deployed in practice. First, many CFI
implementations require source code or debug information that
is typically not available for commercial software. Second, in
its ideal form, the technique is very expensive. It is for this
reason that current research efforts focus on making CFI fast
and practical. Speciﬁcally, much of the work on practical CFI is
applicable to binaries, and improves performance by enforcing a
looser notion of control ﬂow integrity. In this paper, we examine
the security implications of such looser notions of CFI: are they
still able to prevent code reuse attacks, and if not, how hard is it
to bypass its protection? Speciﬁcally, we show that with two new
types of gadgets, return oriented programming is still possible.
We assess the availability of our gadget sets, and demonstrate
the practicality of these results with a practical exploit against
Internet Explorer that bypasses modern CFI implementations.
Keywords—Control-ﬂow integrity evaluation, code-reuse attack
I.
INTRODUCTION
Since the broader adoption of a variety of protection
mechanisms, exploiting software vulnerabilities has become
more challenging [1]. In particular, the introduction of hard-
ware support for non-executable data regions and its ensuing
support from operating systems (e.g., data execution prevention
or DEP [2]), the incorporation of stack smashing protection
(SSP) [3] in compilers, and the use of address-space layout
randomization (ASLR) [4] by applications have signiﬁcantly
raised the bar for exploit writers. However, the sophistica-
tion level of attackers has also risen. Information leakage
and guessing attacks [5], [6] enable attackers to construct
exploits [1], [7], [8] that bypass ASLR and SSP, and are now
commonly part of the exploit. Even the smallest initial leak
of a code pointer can help expose signiﬁcant portions of the
program in memory [5], while code reuse attacks employing
return-oriented programming (ROP) [9], [10], jump-oriented
programming (JOP) [11], [12], and return-to-libc [13] are used
to overcome DEP.
None of the attacks mentioned above would be possible, if
we can prevent an exploit from hijacking the control ﬂow of a
program. Enforcing control-ﬂow integrity (CFI), as proposed
by Abadi et al. [14], guards against ﬂows of control not
intended by the original program. Restricting program ﬂow
in this manner prevents all such attacks. Additionally, CFI is
not vulnerable to information leakage, but it assumes that DEP
is in place. Since its inception in 2005, there have been tens
of follow-up publications [15], [16], [17], [18], while it has
been particularly successful on other domains like software-
fault isolation [19], [20].
Two main problems have prevented CFI from being de-
ployed in practice. First, many CFI implementations require
source code or debug information that is typically not available
for commercial software. Second, the technique is expensive
with overheads that may be as high as 25% [20] to 50% [14].
It is for this reason that much of the recent research focuses
on making it fast and practical. Speciﬁcally, recent work on
practical CFI is applicable on binaries, but it enforces a looser
notion of control ﬂow integrity [17], [16].
It is crucial to question what the implications of such looser
notions of CFI are for the security of the system. Can they still
prevent code-reuse attacks, like return-to-libc and ROP? If not,
how hard are they to bypass? Because of the importance of CFI
and its potential beneﬁts, it is imperative that we can answer
these questions.
This work provides an answer to the above questions by
evaluating the effectiveness of state-of-the-art CFI solutions.
We examine three versions of CFI: the original implementation
described by Abadi et al. [14], and recent works by Chao
Zhang et al. [16] (CCFIR) and Mingwei Zhang et al. [17] (bin-
CFI). We identify the control-ﬂow restrictions they impose,
and compose a conservative model of the most restrictive
framework, which is CCFIR. We then proceed to develop a
methodology for constructing code-reuse attacks under this
most-restrictive model. Our approach follows the steps of an
attacker, who would target a CFI-protected system. First, we
identify permissible control-ﬂow transfers. We then proceed
to identify and collect various types of code-segments, or
gadgets in ROP terminology, that can be invoked given the
allowable control-ﬂow transfers. After, we link these segments,
frequently in a similar fashion to conventional code-reuse
attacks. Finally, we use a chain of our CFI-resistant gadgets
to inject and execute shellcode.
We demonstrate the feasibility and effectiveness of our
methodology by constructing a proof-of-concept exploit, based
on a real-world exploit [21] against Internet Explorer 8 on
Windows 7 with DEP and ASLR in use.1 Brieﬂy, the exploit
is based on a heap overﬂow that serves a dual purpose, so
unlike other attacks, we only use a single vulnerability for
the whole attack. First, it serves as a memory disclosure bug,
which we use to locate the addresses of loaded components
1The exploit used was a winner in the 2012 Pwn2Own competition
http://pwn2own.zerodayinitiative.com/.
© 2014, Enes Göktaş. Under license to IEEE.
DOI 10.1109/SP.2014.43
575
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 
and of the gadgets we need to perform the attack. Second,
it grants us control over a jump instruction. We redirect the
controlled jump to a chain of gadgets linked through call
instructions to corrupt the stack and, eventually, control a
return instruction. We proceed to perform stack-pivoting [10]
to be able to perform ROP using the gadgets available to
us. Next, we use a chain of gadgets, linked through return
instructions, to make a code segment writable and overwrite
it with our shellcode. The ﬁnal step executes one last, CFI-
checked, but permissible, return instruction into our shellcode.
Contributions: In this paper, we:
evaluate fast, state-of-the-art CFI techniques and show
that they do not protect against advanced ROP ex-
ploits;
develop a methodology for performing code-reuse
attacks against CFI-protected software;
we demonstrate the chaining of gadgets using func-
tion calls to perform useful actions, i.e., call-oriented
programming (COP);
construct a working exploit for Internet Explorer 8 on
Windows 7 with DEP and ASLR on, and assuming
CCFIR is in place;
assess the availability of gadgets required to launch
such attacks against other popular software on Win-
dows 7, such as Internet Explorer 9, Acrobat Reader
XI, the Microsoft Ofﬁce 2013 suite of programs, and
Firefox 24.
•
•
•
•
•
Although we show that current CFI proposals are still
vulnerable to ROP exploits, we do not dispute that they (again)
raise the bar for attackers. Instead, we propose that CFI is
augmented with a run-time mechanism for enforcing integrity.
In their original CFI work [14], Abadi et al. had already
suggested the use of a run-time mechanism for checking that
functions return to their caller [22]. Even though this approach
also suffers from applicability problems, due to the counter-
intuitive asymmetry between call and return instructions in
binaries, we want to reassert the need for run-time defenses
to complement CFI toward comprehensive protection from
control hijacking and code-reuse attacks. It is our hope that
this work will encourage additional research in the direction
of CFI to further improve the provided security guarantees and
performance.
The rest of this paper is organized as follows. Section II
provides some background information on CFI. It compares an
ideal version of it with recent more practical instantiations, and
presents their limitations. Section III presents our methodology
for performing code-reuse attacks under CFI. Based on the
steps presented in Sec. III, we describe how we built a working
attack against Internet Explorer in Sec. IV. In Sec. V, we
analyze different applications on Windows 7 and show that our
attack is generic and applicable on many other applications,
as its components are found in abundance in many different
libraries and programs. Section VI discusses other defenses
that may be vulnerable to our attack and identiﬁes future
directions for defending against it, and code-reuse attacks in
general. Related work, even though discussed throughout the
paper, is in Sec. VII. We conclude the paper in Sec. VIII.
576
II. CONTROL-FLOW INTEGRITY
In this section we present background information on
control-ﬂow integrity (CFI). We begin by presenting an ideal
version of it, we expand on how it is practically implemented,
and we conclude by summarizing the weaknesses of its differ-
ent instantiations.
A. Ideal CFI
The vast majority of control-ﬂow hijacking attacks operate
by exploiting a memory corruption bug, such as a buffer
overﬂow, to control an indirect control-ﬂow transfer instruction
in the vulnerable program, most commonly function pointers
and return addresses. Control hijacking attacks lead to code-
reuse (e.g., return-to-libc [13], ROP [9], and JOP [11], [12])
and code-injection attacks.
CFI thwarts control-hijacking attacks by ensuring that the
control ﬂow remains within the control-ﬂow graph (CFG)
intended by the programmer. Every instruction that
is the
target of a legitimate control-ﬂow transfer is assigned a unique
identiﬁer (ID), and checks are inserted before control-ﬂow
instructions to ensure that only valid targets are allowed. All
programs usually contain two types of control-ﬂow transfers:
direct and indirect. Direct transfers have a ﬁxed target and
they do not require any enforcement checks. However, indirect
transfers, like function calls and returns, and indirect jumps,
take a dynamic target address as argument. As the target ad-
dress could be controlled by an attacker due to a vulnerability,
CFI checks to ensure that its ID matches the list of known and
allowable target IDs of the instruction. An example is shown
in Fig. 1. Note that this CFI is even stricter than the original
proposal [14].
CFI, along with W⊕X protection such as Data Execution
Prevention (DEP) [2], and ASLR provides strong guarantees
regarding the integrity of the protected programs. However,
there are two major challenges for the adoption of CFI in its
ideal form. First, it requires a complete and precise CFG of the
protected application in order to accurately identify all indirect
transfer targets and assign IDs. A poor identiﬁcation of IDs
would result in breaking applications. Second, it incurs a non-
negligible performance overhead, caused by the introduced
checks before indirect control-ﬂow instructions. The larger the
number of possible legitimate targets an instruction has, the
higher the number of the checks required and the overhead.
B. Practical CFI
We can improve CFI’s performance by reducing the num-
ber of IDs (also referred to as labels) used in a program. Such
a reduction also simpliﬁes the ID checks required before an
indirect transfer. For instance, in Fig. 1, we can replace labels
ID41 and ID51 by a shared label ID40, so that we need to
check only for the new label before call *(fptr) in function
sort. Note that if we are just examining the code snippets in
Fig. 1, collapsing the two IDs into one does not compromise
the CFG being enforced by CFI. Similarly, we can replace IDs
ID11 and ID21 with a new label ID10 that will be checked
before sort returns.
Perhaps the biggest challenge in applying the ideal form of
CFI is obtaining the complete CFG for a program, particularly
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:49 UTC from IEEE Xplore.  Restrictions apply. 


"$
$






 !"




 !#





%






#$


$



$



Fig. 1: An example program and its CFG. Conceptually, CFI introduces labels and checks for all indirect transfers. Control-ﬂow
transfers checked by CFI are shown in solid lines.
when source code or debugging symbols are not available. Like
pointer analysis [23], perfect CFG generation is an intractable
problem in many setups. For example, if a function other than
less_than and greater_than is passed to sort, and we fail to
determine this control ﬂow during the analysis of the program,
then the check before call *(fptr) will fail, terminating the
application.
To tackle the problem of incomplete CFGs, the original CFI
proposal, as well as more recent work like CCFIR and bin-CFI,
adopts more relaxed rules when enforcing control ﬂow. The
approach they take is to coalesce multiple control-ﬂow-target
IDs into a single one—essentially permitting more control-ﬂow
transfers than in the ideal case. Considering the challenges of
obtaining a precise CFG for most applications, Abadi et al. [14]
suggest an implementation of CFI using only one or two IDs
for all transfer targets. As a result, when using a single ID,
indirect transfers through function calls, returns, and indirect
jumps are allowed to: (a) functions whose addresses are
used in the program (function addresses), and (b) instructions
following functions calls (i.e., return addresses). When using
two IDs, indirect calls are allowed to (a) and returns to (b).
Recent CFI designs have also made signiﬁcant progress in
applying CFI to binary-only software (CCFIR [16]) and even
commercial-off-the-shelf (COTS) software without the need
for any debugging or relocation information (bin-CFI [17]).
Both of these approaches have proposed improved disassem-
bly techniques to extract the control-ﬂow targets of indirect
control-ﬂow instructions in binaries and apply CFI with low
performance overhead. In addition,
they both use a small
number of IDs to restrict the control ﬂow. Bin-CFI uses two
IDs: one for function returns and jumps, and another one for
function calls. CCFIR supports three IDs, one for function
calls and indirect jumps, one for return addresses in “normal”
functions, and a specialized one for return addresses in a set of
security-sensitive functions. Table I summarizes the restrictions
enforced by the CFI approaches we have discussed. Among the
three, bin-CFI requires the least information about the binary
being protected, and CCFIR has the strictest rules. We discuss
more CFI approaches in Sec. VII.
TABLE I: Allowable transfers in different CFI approaches.
CCFIR
(3 IDs)
All ret instructions
ret instructions in
sensitive functions
indirect call & jmp
instructions
X
bin-CFI
(2 IDs)
ret & indirect
jmp instructions
indirect call
instructions
CFI
(1 ID)
All
indirect
transfers
Return addresses
Return addresses in
sensitive functions
Exported functions
Sensitive functions






















Fig. 2: Loose CFI allows a broader set of control-ﬂow transfers,