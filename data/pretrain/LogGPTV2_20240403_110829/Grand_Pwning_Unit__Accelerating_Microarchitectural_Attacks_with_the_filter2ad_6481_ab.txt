memory from the browser in Section VII.
P4. Fast memory access: Accessing memory quickly is a
necessary condition when performing Rowhammer attacks. In
order to be able to trigger bit ﬂips, in fact, the attacker needs
to quickly access different DRAM rows. The CPU caches,
however, absorb most, if not all, of these reads from DRAM.
On the x86 architecture, ﬂushing the CPU cache using the
unprivileged clflush instruction is a common technique to
bypass the caches [42], [45], [51]. On most ARM platforms,
evicting the CPU cache is a privileged operation. Dram-
mer [48] hence relies on uncached DMA memory provided
by the Android ION allocator for hammering.
In the browser, there is no possibility for executing cache
ﬂush instructions or conveniently accessing DMA mem-
ory through JavaScript. Rowhammer.js [20] and Dedup Est
Machina [7] rely on eviction buffers to ﬂush the cache. While
this works on x86, ﬂushing CPU caches on ARM is too slow
to trigger bit ﬂips [48]. Hence, it remains an open question
whether it is possible to perform Rowhammer attacks from
the browser on most mobile devices.
In Section VIII, we report on the ﬁrst successful Rowham-
mer bit ﬂips in the browser on ARM devices. This is now
possible from the GPU by (i) enabling more efﬁcient double-
sided Rowhammer variant with physical memory layout infor-
mation leaked by P3, and, more importantly, (ii) implementing
an efﬁcient cache eviction (and thus hammering) strategy due
to the small size and deterministic behavior of the GPU caches.
We use these bit ﬂips to build GLitch in Section IX, our
reliable end-to-end exploit that orchestrates all the GPU-based
primitives we described to compromise the browser running
on a mobile phone in less than two minutes by relying on
microarchitectural attacks alone.
V. THE TIMING ARMS RACE
To implement timing side-channel attacks, attackers need
the ability to time a secret operation (P1). Recent work has
shown the impact of these attacks on browsers [18], [28], [38]
forcing vendors to disable high-precision timers [1], [41], [47],
[50] and bringing researchers to investigate new advanced
defenses [9], [29]. In this section, we present explicit and
implicit GPU-based timing sources demonstrating how such
defenses are ﬂawed due to their incomplete threat model that
does not take the GPU into account. We start by presenting
two explicit timing sources showing how these allow us to
time both GPU’s and CPU’s operations. We then present two
other commutable implicit timers based on the second revision
of the WebGL API. We test all these timers against major
browsers as well as state of the art defenses (i.e., Fuzzyfox
and DeterFox) and discuss the implications of these timing
sources.
A. Explicit GPU timing sources
EXT_DISJOINT_TIMER_QUERY is an OpenGL exten-
sion developed to provide developers with more detailed
information about the performance of their applications [46].
This extension, if made available to the system by the GPU
driver, is accessible from both WebGL and WebGL2, and
provides the JavaScript runtime with two timing sources:
(1) TIME_ELAPSED_EXT and (2) TIMESTAMP_EXT. Such
timers allow an attacker to measure the timing of secret
operations (e.g., memory accesses) performed either by the
CPU or the GPU.
T1. TIME ELAPSED EXT: This
functionality allows
JavaScript code to query the GPU asynchronously to measure
how much time the GPU took to execute an operation. While
there are different instances of JavaScript-based side channels
on the CPU [7], [18], [28], [38], there are no current examples
of remote GPU-based attacks. In Section VII, we will show
how we can use the timer we are now presenting to implement
the ﬁrst timing side channel targeting DRAM executed directly
on a remote GPU.
Since TIME_ELAPSED_EXT is based on a WebGL ex-
tension that requires the underlying OpenGL extension to
be accessible, its availability and resolution are driver and
browser dependent. The speciﬁcation of the extension requires
the return value to be stored as a uint64 in a nanosecond
variable as an implementation dependent feature, it does not
guarantee nanosecond resolution, even in a native environ-
ment. Furthermore, when adding the browser’s JavaScript
engine on top of this stack the return value becomes browser-
dependent as well. Firefox limits itself to casting the value
to an IEEE-754 double in accordance to the ECMAScript
speciﬁcation which does not support 64 bit integers, while
Chrome rounds up the result to 1 μs, reducing the granularity
of the actual measurements.
T2. TIMESTAMP EXT: Besides the asynchronous timer, the
extension also provides a synchronous functionality capable
of measuring CPU instructions. Speciﬁcally, by activating the
extension the OpenGL context acquires a new parameter,
TIMESTAMP_EXT, which the code can poll using the WebGL
getParameter() function. The result is a synchronous
timestamp returned from the GPU that can be used in lieu
of the well-known performance.now() to measure CPU
operations. What makes this timer even more relevant is the
fact that we are able to discern CPU cached and uncached ac-
cesses with it by implementing a variant of clock-edging [29]
that executes a (padding) count down over an empty loop
before checking for the new timestamp value. This makes it
possible to revive currently mitigated attacks [18], [28], [38].
Like TIME_ELAPSED_EXT, this timer is driver- and browser-
dependent. Firefox supports it, while Chrome disables it due
to compatibility issues [15].
B. WebGL2-based timers
The timers introduced in the previous section are made
available through a WebGL extension. We now demonstrate
198
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
how WebGL represents a more fundamental issue in the timing
arms race, by showing how an attacker can craft homebrewed
timers using only standard WebGL2 functions. WebGL2 is the
latest version of the API and, while not as widely available
as WebGL1 yet, it is supported by default in major browsers
such as Chrome and Firefox.
The API provides two almost commutable timing sources
based on WebGLSync,
the interface that helps develop-
ers synchronize CPU and GPU operations. GLSync objects
are fences that get pushed to the GPU command buffer.
This command buffer is serialized and accepts commands
sequentially. WebGL2 provides the developer with several
functions to synchronize the two processors, and we use
two of them to craft our timers: clientWaitSync() and
getSyncParameter().
sets
a
or
a
has
an
return value
to see
if
upper
and
Unfortunately,
attacker ﬁrst
function’s
(CONDITION_SATISFIED)
(TIMEOUT_EXPIRED)
T3. clientWaitSync: This function waits until either the
signaled, or a timeout event occurs.
sync object gets
The
threshold and then checks
the operation
the
timeout
completed
the
occurred
bound
timeout
implementation-deﬁned
(MAX_CLIENT_WAIT_TIMEOUT_WEBGL)
therefore
may not work in all cases. For
instance, Chrome sets
this value to 0 to avoid CPU stalls. To address this
problem, we adopted a technique which we call
ticks-
to the clock-edging
to-signal
proposed by Kohlbrenner and Shacham [29].
It consists
of calling the clientWaitSync() function in a tight
loop with the timeout set to 0 and counting until it returns
ALREADY_SIGNALED. The full timing measurement consists
1(cid:2) ﬂush the command buffer,
of several smaller steps: ﬁrst
and 2(cid:2) dispatch the command to the GPU, then 3(cid:2) issue
the WebGLSync fence, and ﬁnally 4(cid:2) count the loops of
clientWaitSync(0) until it is signaled.
(TTS) which is
similar
If measuring a secret CPU operation we execute the se-
3(cid:2) and 4(cid:2). Whether the CPU or the
cret between steps
GPU acts as ground truth depends on the secret
the at-
tacker is trying to leak. However, when measuring a secret
CPU operation, we require the GPU operation to run in
(relatively) constant time. Since the measurement requires a
context change it can be more noisy to the timers based
on EXT_DISJOINT_TIMER_QUERY. Nonetheless, this tech-
nique is quite effective, as we will show in Section V-C.
T4. getSyncParameter: This function provide an equivalent
solution. If called with SYNC_STATUS as parameter after
issuing a fence, it returns either SIGNALED or UNSIGNALED,
which is exactly analogous to clientWaitSync(0).
The timers we build using both these functions work on
every browser that supports the WebGL2 standard (such as
Chrome and Firefox). In fact, in order to comply with the
WebGL2 speciﬁcation none of these functions can be disabled.
Also, due to the synchronous nature of these timers, we can
use them to measure both CPU and GPU operations.
199
TABLE I: Results on different browsers for the two families
of timers. With * we indicate driver dependet values.
Chrome
Firefox
Fuzzyfox
DeterFox
TIME_ELAPSED_EXT
TIMESTAMP_EXT
clientWaitSync
1 μs
-
100 ns*
1.8 μs*
-
-
-
-
60 μs
400 ns
400 ns
1.8 μs
getSyncParameter
60 μs
400 ns
400 ns
1.8 μs
Fig. 1: Clock-edging [29] applied to TIMESTAMP_EXT on
Firefox on Intel HD Graphics 4000.
C. Evaluation
We evaluate our timers against Chrome and Firefox, as well
as two Firefox-derived browsers that implement state-of-the-
art defenses in effort to stop high-precision timing: Fuzzy-
fox [29] and DeterFox [9]. We use a laptop equipped with
an Intel Core i5-6200U processor that includes an integrated
Intel HD Graphics 520 GPU for the measurements. We further
experimented with the same timers on an integrated Adreno
330 GPU on an ARM SoC when developing our side-channel
attack in Section VII and on an Intel HD Graphics 4000 GPU.
Table I shows the results of our experiments. The two
explicit
timers, as mentioned before, are driver-/browser-
dependent, but if available, return unambiguous values. So far,
we found that the extension is fully available only on Firefox.
Both Fuzzyfox and DeterFox disable it, without any mention
of it in their manuscripts [9], [29]. Chrome rounds up the
value for TIME_ELAPSED_EXT to 1 μs and returns 0 for
TIMESTAMP_EXT.
The two WebGL2-based timers are accessible in all four
browsers. While on Chrome we get a coarser resoltuion of
60 μs, we obtained 400 ns resolution on Firefox and Fuzzyfox
and 1.8μs resolution on Deterfox. We further tested our
WebGL2-based timers against Chrome Zero [44], a Chrome
plugin developed to protect users against side channels. This
did not affect them.
TIMESTAMP_EXT represents the biggest
threat among
these timers. As we show in Figure 1, by exploiting the
aforementioned clock-edging technique on Firefox we are
capable of crafting a timer with 2.5 ns resolution making it
possible to discern cached and uncached accesses. This revives
currently mitigated attacks [18], [28], [38] by providing an
attacker with a high-precision timer.
D. Discussion
We showed how the GPU provides an attacker with
explicit
timing sources directly and aids the crafting of
new timers—allowing attackers to bypass state-of-the-art de-
fenses from both industry and academia. As long as the
JavaScript context can synchronously interact with external
contexts such as WebWorkers [18], WebGL and potentially
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:05 UTC from IEEE Xplore.  Restrictions apply. 
others (e.g., audio), a diligent attacker can craft new tim-
ing sources. Even though disabling some of these interfaces
(e.g., SharedArrayBuffer [1], [41], [47], [50]) allows
to temporarily mitigate the threat of advanced cache attacks,
our homebrewed timers are a demonstration of how tackling
the threat posed by timing side channels by besieging timing
sources does not represent a viable and long term solution to
the issue.
VI. A PRIMER ON THE GPU
Modern SoCs accommodate multiple co-processors within
the same chip to gain better performances while saving space
and power. In order to fully exploit the advantages of this
design, these co-processors usually share resources over the
memory hierarchy. In this section, we look at the general ar-
chitecture of integrated GPUs before studying a concrete GPU
implementation on a commonly deployed ARM SoC. Like
many similar implementations,
this integrated GPU shares
DRAM at the bottom of the memory hierarchy with the CPU
(P2). However, to reach DRAM from the GPU, we need to
evict two specialized GPU caches with an entirely different
architecture than that of modern CPUs. We present a novel
reverse engineering technique that makes usage of OpenGL
shaders to reconstruct the architecture of these GPU caches.
We use this knowledge in Section VII for building a DRAM-
based side channel that leaks information about the layout of
data in physical memory.
Fig. 2: Building blocks of an integrated GPU
A. The GPU architecture
A Graphical Processing Unit is a specialized circuit con-
ceived with the purpose of accelerating image rendering.
As mentioned in Section III, this system aids the rendering
pipeline by executing the shaders provided by the developer.
We now discuss how the GPU architecture implements this
pipeline.
Processing units: Figure 2 shows the general architecture of a
GPU. The Stream Processors (SPs) are the fundamental units
of the GPU that are in charge of running the shaders. To maxi-
mize throughput when handling inputs, GPUs include multiple
200
SPs, each incorporating multiple ALUs to further parallelize
the computation. Shaders running on the SPs can then query
the texture processors (TPs) to fetch additional input data used
during their computations. This data is typically in the form
of textures used to compute the fragment colors to which TPs
apply ﬁlters of different natures (e.g., anti-aliasing).
GPU caching: During their execution, shaders can request
external data in the form of textures by querying the TPs.
All this data is stored on DRAM due to its large size. Since
fetching data from DRAM is slow and can cause pipeline
stalls, GPUs often include a two-level private cache (i.e., L1
and L2) to speed up accesses to vertices and textures. While
the larger L2 is used by both SPs, to store vertices, and TPs
to store textures, the latter makes use of a faster (but smaller)
L1 cache to further speed the inner execution of the shader.
We later discuss the architecture of these caches in the Adreno
330 GPU.
In order to increase performances when writing to frame-
buffers, integrated GPUs are usually equipped with smaller
chunks of faster on-chip memory (OCMEM) that allows them
to store portions of the render target and to asynchronously
transfer them back to DRAM, as shown in Figure 2.
B. The Adreno 330: A case study
To better understand the architecture of integrated GPUs,
we analyze the Adreno 330, a GPU found in the common
Snapdragon 800/801 mobile SoCs. These SoCs are embedded
in many Android devices such as LG Nexus 5, HTC One, LG
G2 and OnePlus One.
The A330 exposes a similar architecture to what we de-
scribed earlier in this section. Main peculiarity of this system,
however, is the presence of an IOMMU in between DRAM
and the L2 cache (known as UCHE). This essentially means
that the GPU operates on virtual memory rather than physical
memory, unlike the CPU cores.
Considering the architecture in Figure 2, an attacker can
access memory either by inputing vertices to the vertex shaders