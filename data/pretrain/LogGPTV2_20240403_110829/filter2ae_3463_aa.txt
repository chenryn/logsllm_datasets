# HEVD池溢出分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 环境准备
Win 10 64位 主机 + win 7 32位虚拟机
Windbg：调试器
VirtualKD-3.0：双击调试工具
InstDrv：驱动安装，运行工具
HEVD：一个Windows内核漏洞训练项目，里面几乎涵盖了内核可能存在的所有漏洞类型，非常适合我们熟悉理解Windows内核漏洞的原理，利用技巧等等
## windows内核池简介
想要研究windows内核漏洞，需要对windows池有一定的认识，其管理结构、分配、释放都需要有很深的了解。这里我不会详细介绍池的一些知识，只推荐一些网站以供参考。
下面给一个内核pool page的图，知道这个图，对于该池漏洞的分析，基本足够。
Windows内核中有很多以4k为单位的pool page，每个pool page会被划分为大小不一的pool chunk以供内核程序使用。每个pool
chunk有一个pool header结构（8个字节大小），用来描述pool chunk的一些基本信息。
Pool header结构如下：
    kd> dt nt!_POOL_HEADER
       +0x000 PreviousSize     : Pos 0, 9 Bits
       +0x000 PoolIndex        : Pos 9, 7 Bits
       +0x002 BlockSize        : Pos 0, 9 Bits
       +0x002 PoolType         : Pos 9, 7 Bits
       +0x000 Ulong1           : Uint4B
       +0x004 PoolTag          : Uint4B
       +0x004 AllocatorBackTraceIndex : Uint2B
       +0x006 PoolTagHash      : Uint2B
当我们运行代码：
    KernelBuffer = ExAllocatePoolWithTag(NonPagedPool,
                                                 (SIZE_T)POOL_BUFFER_SIZE,
                                                 (ULONG)POOL_TAG);
该函数回返回一个pool chunk，返回的地址KernelBuffer = pool header +
8的空间。也就是说我们返回的空间前面有8个字节的头部，只是我们看不到。Pool header
后面紧跟的是我们的数据，当我们的数据过程长时，就会向下覆盖到其他chunk。
## HEVD池漏洞代码分析
漏洞代码如下：
    #define POOL_BUFFER_SIZE 504
        __try {
            DbgPrint("[+] Allocating Pool chunk\n");
            // Allocate Pool chunk
            KernelBuffer = ExAllocatePoolWithTag(NonPagedPool,
                                                 (SIZE_T)POOL_BUFFER_SIZE,
                                                 (ULONG)POOL_TAG);
            if (!KernelBuffer) {
                // Unable to allocate Pool chunk
                DbgPrint("[-] Unable to allocate Pool chunk\n");
                Status = STATUS_NO_MEMORY;
                return Status;
            }
            else {
                DbgPrint("[+] Pool Tag: %s\n", STRINGIFY(POOL_TAG));
                DbgPrint("[+] Pool Type: %s\n", STRINGIFY(NonPagedPool));
                DbgPrint("[+] Pool Size: 0x%X\n", (SIZE_T)POOL_BUFFER_SIZE);
                DbgPrint("[+] Pool Chunk: 0x%p\n", KernelBuffer);
            }
            // Verify if the buffer resides in user mode
            ProbeForRead(UserBuffer, (SIZE_T)POOL_BUFFER_SIZE, (ULONG)__alignof(UCHAR));
            DbgPrint("[+] UserBuffer: 0x%p\n", UserBuffer);
            DbgPrint("[+] UserBuffer Size: 0x%X\n", Size);
            DbgPrint("[+] KernelBuffer: 0x%p\n", KernelBuffer);
            DbgPrint("[+] KernelBuffer Size: 0x%X\n", (SIZE_T)POOL_BUFFER_SIZE);
    #ifdef SECURE
            // Secure Note: This is secure because the developer is passing a size
            // equal to size of the allocated Pool chunk to RtlCopyMemory()/memcpy().
            // Hence, there will be no overflow
            RtlCopyMemory(KernelBuffer, UserBuffer, (SIZE_T)POOL_BUFFER_SIZE);
    #else
            DbgPrint("[+] Triggering Pool Overflow\n");
            // Vulnerability Note: This is a vanilla Pool Based Overflow vulnerability
            // because the developer is passing the user supplied value directly to
            // RtlCopyMemory()/memcpy() without validating if the size is greater or
            // equal to the size of the allocated Pool chunk
            RtlCopyMemory(KernelBuffer, UserBuffer, Size);
    #endif
            if (KernelBuffer) {
                DbgPrint("[+] Freeing Pool chunk\n");
                DbgPrint("[+] Pool Tag: %s\n", STRINGIFY(POOL_TAG));
                DbgPrint("[+] Pool Chunk: 0x%p\n", KernelBuffer);
                // Free the allocated Pool chunk
                ExFreePoolWithTag(KernelBuffer, (ULONG)POOL_TAG);
                KernelBuffer = NULL;
            }
        }
        __except (EXCEPTION_EXECUTE_HANDLER) {
            Status = GetExceptionCode();
            DbgPrint("[-] Exception Code: 0x%X\n", Status);
        }
其中UserBuffer，Size的获取方式如下：
    UserBuffer = IrpSp->Parameters.DeviceIoControl.Type3InputBuffer;
    Size = IrpSp->Parameters.DeviceIoControl.InputBufferLength;
我们看上面的代码，首先调用
    ExAllocatePoolWithTag(NonPagedPool, (SIZE_T) POOL_BUFFER_SIZE, (ULONG)POOL_TAG);
申请一个固定大小的非分页池，然后调用拷贝函数，将ring3级传入的数据拷贝到申请的pool chunk中。
    RtlCopyMemory(KernelBuffer, UserBuffer, Size);
这里KernelBuffer是固定长度，
UserBuffer和Size都是我们ring3级可控的，当我们的size大于POOL_BUFFER_SIZE时，就会造成溢出，覆盖到下面的pool
chunk。
## 漏洞跟踪调试
Windbg下断点Bp HEVD!TriggerPoolOverflow，
因为驱动是我自己编译的，有符号文件，所以这里我直接对函数名下断点，如果你是直接从网上下载的驱动，那么你需要自己找该函数对应的偏移。
当函数执行完
            KernelBuffer = ExAllocatePoolWithTag(NonPagedPool,
                                                 (SIZE_T)POOL_BUFFER_SIZE,
                                                 (ULONG)POOL_TAG);
后，得KernelBuffer = 0x8745dd88，所以可知kernelbuffer所在的pool chunk的地址为0x8745dd88–8 =
0x8745dd80。
    kd> !pool 0x8745dd88
    Pool page 8745dd88 region is Nonpaged pool
     8745d000 size:  988 previous size:    0  (Allocated)  Devi (Protected)
     8745d988 size:    8 previous size:  988  (Free)       File
     8745d990 size:   c8 previous size:    8  (Allocated)  Ntfx
     8745da58 size:   90 previous size:   c8  (Allocated)  MmCa
     8745dae8 size:  168 previous size:   90  (Allocated)  CcSc
     8745dc50 size:   b8 previous size:  168  (Allocated)  File (Protected)
     8745dd08 size:    8 previous size:   b8  (Free)       usbp
     8745dd10 size:   68 previous size:    8  (Allocated)  EtwR (Protected)
     8745dd78 size:    8 previous size:   68  (Free)       XSav
    *8745dd80 size:  200 previous size:    8  (Allocated) *Hack
         Owning component : Unknown (update pooltag.txt)
     8745df80 size:   80 previous size:  200  (Free )  MmRl
可以看出，pool page 是以1000h即4kb为单位的， 里面每个都是pool chunk。
下面观察一个标记为free的pool chunk。 地址为 8745d988
    kd> dd 8745d988
    8745d988  00010131 e56c6946 04190001 7866744e
    8745d998  00bc0743 00000001 00000000 00000000
    8745d9a8  00040001 00000000 8745d9b0 8745d9b0
    8745d9b8  00000000 8745da1c 87336164 00000000
    8745d9c8  00000000 00000000 00000000 00000000
    8745d9d8  00000000 00000000 00000000 00000000
    8745d9e8  00000000 00000000 00000000 00280707
    8745d9f8  00000000 00000000 00000000 00000000
    kd> dt nt!_POOL_HEADER 8745d988
       +0x000 PreviousSize     : 0y100110001 (0x131)
       +0x000 PoolIndex        : 0y0000000 (0)
       +0x002 BlockSize        : 0y000000001 (0x1)
       +0x002 PoolType         : 0y0000000 (0)
       +0x000 Ulong1           : 0x10131
       +0x004 PoolTag          : 0xe56c6946
       +0x004 AllocatorBackTraceIndex : 0x6946
       +0x006 PoolTagHash      : 0xe56c
PreviousSize 前一个chunk大小，对应的值为0x131, 根据ListHeads数组可知， 0x131对应chunk大小为 0x131 * 8
= 0x988
BlockSize 对应本chunk大小， 对应的值为0x1， 根据ListHeads数组可知， 0x1对应chunk大小为 0x1 * 8 = 0x8
PoolType = 0 表示free。
这里不懂也没关系。
再看看我们申请的pool块， 函数返回的地址为0x8745dd88，块头地址为0x8745dd80， 所以返回的真正存放数据的地址为PoolHeader +
8
即0x8745dd80 + 8 = 0x8745dd88
    kd> dd 8745dd80
    8745dd80  04400001 6b636148 00000000 0000001b
    8745dd90  083e0003 c3504c41 88129210 00000148
    8745dda0  183c0005 6770534e 85aad038 00000000
    8745ddb0  8745dde4 0000000a 00000001 00000001
    8745ddc0  8745ddfc 00000018 8745deec 00000018
    8745ddd0  8745de8c 00000008 8745debc 00000008
    8745dde0  00000004 00000018 00000001 eb004a01
    8745ddf0  11d49b1a 50002391 bc597704 00000000
    kd> dt nt!_POOL_HEADER 8745dd80
       +0x000 PreviousSize     : 0y000000001 (0x1)
       +0x000 PoolIndex        : 0y0000000 (0)
       +0x002 BlockSize        : 0y001000000 (0x40)
       +0x002 PoolType         : 0y0000010 (0x2)
       +0x000 Ulong1           : 0x4400001
       +0x004 PoolTag          : 0x6b636148
       +0x004 AllocatorBackTraceIndex : 0x6148
       +0x006 PoolTagHash      : 0x6b63
PoolType为0x2, 表示Allocated， 空间被使用， 由dd 8745dd80可知，
0x8745dd88 开始后的数据并不是全0， 也就是ExAllocatePoolWithTag申请空间时，并不会做初始化工作。
    //memset(UserModeBuffer, 0x41, 504);
    RtlCopyMemory(KernelBuffer, UserBuffer, Size);
当执行RtlCopyMemory后，0x8745dd88开始的数据将会被A覆盖
    kd> dd 8745dd80 L100
    8745dd80  04400001 6b636148 41414141 41414141
    8745dd90  41414141 41414141 41414141 41414141
    8745dda0  41414141 41414141 41414141 41414141
    8745ddb0  41414141 41414141 41414141 41414141
    8745ddc0  41414141 41414141 41414141 41414141
    8745ddd0  41414141 41414141 41414141 41414141
    8745dde0  41414141 41414141 41414141 41414141
    8745ddf0  41414141 41414141 41414141 41414141
    8745de00  41414141 41414141 41414141 41414141
    8745de10  41414141 41414141 41414141 41414141
    8745de20  41414141 41414141 41414141 41414141
    8745de30  41414141 41414141 41414141 41414141
    8745de40  41414141 41414141 41414141 41414141
    8745de50  41414141 41414141 41414141 41414141
    8745de60  41414141 41414141 41414141 41414141
    8745de70  41414141 41414141 41414141 41414141
    8745de80  41414141 41414141 41414141 41414141
    8745de90  41414141 41414141 41414141 41414141
    8745dea0  41414141 41414141 41414141 41414141
    8745deb0  41414141 41414141 41414141 41414141
    8745dec0  41414141 41414141 41414141 41414141
    8745ded0  41414141 41414141 41414141 41414141
    8745dee0  41414141 41414141 41414141 41414141
    8745def0  41414141 41414141 41414141 41414141
    8745df00  41414141 41414141 41414141 41414141
    8745df10  41414141 41414141 41414141 41414141
    8745df20  41414141 41414141 41414141 41414141
    8745df30  41414141 41414141 41414141 41414141
    8745df40  41414141 41414141 41414141 41414141
    8745df50  41414141 41414141 41414141 41414141
    8745df60  41414141 41414141 41414141 41414141
    8745df70  41414141 41414141 41414141 41414141
    8745df80  08100040 6c526d4d 00000000 87487398
    8745df90  00000000 8745df94 8745df94 00000004
    8745dfa0  00000005 ffffffff 00000000 00000000
    8745dfb0  00000000 8745dfb4 8745dfb4 00000000
    8745dfc0  00000000 00000000 00000000 8745dfcc
    8745dfd0  8745dfcc 00000004 00000465 87ef35e8
    8745dfe0  88097ae0 00000000 00000000 00000000
    8745dff0  00000000 00000000 00000000 87f32380
    8745e000  01010129 00000000 00055400 0003023f
    8745e010  00000000 00055420 00030240 00000000
    ---------------------------------------------------------    
    char UserModeBuffer[512 + 8] = { 0x41 };
    memset(UserModeBuffer, 0x41, 512);
    memset(UserModeBuffer + 512, 0x42, 8);