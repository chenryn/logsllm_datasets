| > socks           | > Start SOCKS4a server to relay traffic          |
+-------------------+--------------------------------------------------+
| > socks stop      | > Stop SOCKS4a server                            |
+-------------------+--------------------------------------------------+
| > spawn           | > Spawn a session                                |
+-------------------+--------------------------------------------------+
| > spawnas         | > Spawn a session as another user                |
+-------------------+--------------------------------------------------+
| > spawnto         | > Set an executable to spawn processes into      |
+-------------------+--------------------------------------------------+
| > spawnu          | > Spawn a session under another PID              |
+-------------------+--------------------------------------------------+
+-------------------+--------------------------------------------------+
| > ssh             | > Use SSH to spawn an SSH session on a host      |
+-------------------+--------------------------------------------------+
| > ssh-key         | > Use SSH to spawn an SSH session on a host      |
+-------------------+--------------------------------------------------+
| > steal_token     | > Steal access token from a process              |
+-------------------+--------------------------------------------------+
| > timestamp       | > Apply timestamps from one file to another      |
+-------------------+--------------------------------------------------+
| > unlink          | > Disconnect from parent beacon                  |
+-------------------+--------------------------------------------------+
| > upload          | > Upload a file                                  |
+-------------------+--------------------------------------------------+
| > wdigest         | > Dump plaintext credentials with Mimikatz       |
+-------------------+--------------------------------------------------+
| > winrm           | > Use WinRM to spawn a session on a host         |
+-------------------+--------------------------------------------------+
| > wmi             | > Use WMI to spawn a session on a host           |
+-------------------+--------------------------------------------------+
> []{#_bookmark190 .anchor}**Pivoting through Cobalt Strike**
>
> We have already covered the different ways of pivoting and why this is
> necessary in [Chapter 6](#pivoting-1), *Pivoting*. In this section, we
> will look at the ways we can pivot into a network using Cobalt Strike.
>
> Cobalt Strike allows us to pivot in three ways:
>
> SOCKS Server Listener Deploy VPN
>
> The preceding pivot can be explained as follows:
>
> SOCKS Server: This will create a **SOCKS4 proxy** on our team server.
> All the connections that go through this SOCKS proxy will be converted
> into tasks for the beacon to execute. This allows us to tunnel inside
> the network through any type of beacon. To set up a SOCKS Server, we
> right-click the host, choose Pivoting \| SOCKS Server, shown as
> follows:
>
> ![](media/image635.jpeg)
>
> A new window will then open, asking for the port number on which we
> want the server to be started. We enter the port and click on the
>
> Launch button:
>
> ![](media/image636.jpeg)
>
> ![](media/image637.jpeg)Once the server is started, we can run other
> tools such as Metasploit or Nmap on our system against the network for
> further reconnaissance and exploitation. The following screenshot is
> an example of how we can connect an Nmap through a SOCKS Server of a
> Cobalt Strike:
>
> Listener: A pivot listener allows us to create a listener that tunnels
> all of its traffic through a beacon session. This prevents us from
> creating new connections from our Cobalt Strike server to the
> victim\'s machine, thereby helping us to keep the noise at a minimum.
> To set up a listener, right-click on the host, click on Pivoting \|
> Listener\..., shown as follows:
>
> ![](media/image638.jpeg)
>
> ![](media/image639.jpeg)A new window will then open, where we specify
> the listener\'s name, payload, host, port number, and the remote host
> and port to which the traffic will be forwarded:
>
> ![](media/image640.jpeg)After entering the data, we click on the Save
> button and we will see that it runs a rportfwd command and creates a
> tunnel:
>
> Deploy VPN: This features allows us to pivot through VPN using the
> covert VPN feature. Covert VPN creates a network interface from the
> system where the team server is running to the target network. To set
> up a VPN we right-click on the host, choose Pivoting \| Deploy VPN:
>
> ![](media/image641.jpeg)
>
> A new window will open, where we can choose the destination network
> and add a network interface by clicking on the Add button:
>
> ![](media/image642.jpeg)
>
> We then specify the interface name, the MAC address, the port number,
> and the channel to use for tunneling:
>
> ![](media/image643.jpeg)
>
> For best performance, we recommend the UDP channel. The UDP channel
> has the least amount of overhead compared to the TCP and HTTP
> channels. Alternatively, the ICMP, HTTP, or TCP (bind) channels can be
> used to bypass firewalls:
>
> ![](media/image644.jpeg)
>
> ![](media/image645.jpeg)Once the interface is created, we click on the
> Deploy button and the interface will be created. We can view the list
> of currently active VPN channels from the Cobalt Strike menu, as shown
> in the following screenshot:
# Aggressor Scripts
> Aggressor Scripts is the scripting language for Cobalt Strike 3.0 and
> above. It
>
> can be considered as a successor to the Cortana scripting language,
> which is used by Armitage. Aggressor Scripts is described on Cobalt
> Strike\'s official website
>
> as follows: \"Aggressor Scripts is a scripting language for red team
> operations and adversary simulations inspired by scriptable IRC
> clients and bots. Its purpose is two-fold. We may create long running
> bots that simulate virtual red team members, hacking side-by-side with
> you. We may also use it to extend and modify the Cobalt Strike client
> to our needs.\"
There are a lot of Aggressor Scripts available on the internet which
have been developed by users across the globe to perform various tasks.
Most of these are available on GitHub. In this section, we will learn
how to load the scripts on our Cobalt Strike client and run them.
1.  First we can download the scripts from the website:
    > [https://github.com/bluscre
    > enofjeff/AggressorScripts.](https://github.com/bluscreenofjeff/AggressorScripts)
2.  To load a script permanently on our client, we go to the Cobalt
    > Strike menu and click on the Script Manager option:
> ![](media/image646.jpeg)
3.  In the tab which opens, click on the Load button:
> ![](media/image647.jpeg)
4.  We then browse to the directory where we downloaded our script.
    > Choose the script we want to load and click on the Open button,
    > shown as follows:
> ![](media/image648.jpeg)
5.  In this example, we have loaded two scripts that will run
    > ping_aliases.cna: and ps-window-alias:
> ![](media/image649.jpeg)
6.  Upon opening the script in Notepad, we can see that it has created
    > two new aliases. The first, qping command, is used to ping a host
    > with one ping packet, while the second, smbscan, is used to run a
    > scan on port 445 on a particular host or a range of hosts:
> ![](media/image650.jpeg)
7.  To test the script, we interact with our beacon and run the qping
    > 8.8.8.8
> command:
>
> ![](media/image651.jpeg)
>
> From the preceding screenshot we can see that it executes ping
>
> command through the shell on the host.
8.  We also had another script loaded, ps-windows-alias. This window
    > creates an
> alias command that opens the process pane of the selected host:
>
> ![](media/image652.jpeg)
>
> Running the command will open the process pane, shown as follows:
>
> ![](media/image653.jpeg)
# Summary
> In this chapter, we learned about the listener module of Cobalt Strike
> along with its type and usage. We then learned about beacons and their
> features. We also saw examples of different features of beacons, both
> through the beacon menu and the beacon console. After that, we looked
> at different methods of pivoting using Cobalt Strike. Finally, we
> explored Aggressor Script and its use in Cobalt Strike.
# Questions
1.  Is cobalt strike free?
2.  Can Cobalt Strike communicate with any other C2?
3.  How can we slip through the scanners and Indicator of Compromise
    > (IOCs).
4.  Does Cobalt Strike use Metasploit Framework?
# Further reading
> For more information on the topics discussed in this chapter, visit
> the following links:
>
> **A Red Teamer\'s guide to pivoting**:
> [https://artkond.com/2017/03/23/pivoting-gui
> de/](https://artkond.com/2017/03/23/pivoting-guide/)
>
> **SSH and Meterpreter Pivoting Techniques**:
> [https://highon.coffee/blog/ssh-me](https://highon.coffee/blog/ssh-meterpreter-pivoting-techniques/)
>
> [terpreter-pivoting-techniques/](https://highon.coffee/blog/ssh-meterpreter-pivoting-techniques/)
>
> **Aggressor Scripts**:
>  **HOWTO: Port
> Forwards through a SOCKS proxy**: [https://blog.cobaltstri
> ke.com/2016/06/01/howto-port-forwards-through-a-socks-proxy/](https://blog.cobaltstrike.com/2016/06/01/howto-port-forwards-through-a-socks-proxy/)
>
> **Kerberos Attack**s:
> [https://www.cyberark.com/blog/kerberos-attacks-what-you-need-t
> o-know/](https://www.cyberark.com/blog/kerberos-attacks-what-you-need-to-know/)
# C2 - Master of Puppets
> Almost everyone who is involved with cybersecurity will already have a
> clear idea about what a Command and Control server is. In case you
> don\'t know, a Command and Control server, also known as a C&C or a
> C2, is generally used in cyberattacks. It is a system that controls
> all the infected systems (the bots or zombies) that were infected by
> the attacker in a malware or phishing attack. A
>
> C2 is controlled by an attacker and is used to send commands to
> perform different tasks such as a DDoS attack, spamming, stealing data
> from bots, or spreading malware. The question remains, therefore, if
> C2s are used by cyber criminals to execute a cyberattack, does that
> makes Red Team operations illegal?
Many people still have a misunderstanding about the motivation behind
red team operations. The idea of red team is not to hack into an
organization and steal the data with a negative motivation. Instead, red
team operations are a simulation carried out by professionals who mimic
cybercriminals. Just as cybercriminals use C2 servers for cyberattacks,
Red Team professionals also use C2 servers to perform simulated
cyberattacks on an organization.
> The motivation of a red team is not to protect the organization from
> an attack. It is to attack the organization just as a cybercriminal
> would, but to report the attack to the blue team as well. The blue
> team are the defenders of the organization; they\'ll be the ones
> responsible for detecting any malicious or harming activity.
>
> In this chapter, we will cover the following topics:
>
> Introduction to C2
>
> Cloud-based file sharing using C2 C2 covert channels
# Technical requirements
> Linux Empire
# Introduction to C2
> In a Red Team engagement, the C2s that are installed and configured
> are the team servers that are used to manage the reverse connections.
> In the previous chapters, we have covered Koadic, Armitage, Cobalt
> Strike, and Empire. All of these tools have one thing in common: they
> are frameworks that can get a reverse connection and manage multiple
> connections at the same time. These C2s are crucial in a red team
> engagement. From the basic instances that we looked at in previous
> chapters, we now have to think bigger.
One of the biggest issues in red team operations is the detection of the
payload by antivirus software or firewalls. Even if our payload is not
detected, the outgoing connection (also known as egress traffic) from
the target server may well be detected by the monitoring team. How can
we perform a red team operation without our Redirector or C2 being
blacklisted or burned?
# Cloud-based file sharing using C2
> In a situation the one described previously, organizations monitor the
> outgoing connection very closely so it is difficult to get access
> without getting detected. Fortunately, many organizations use
> cloud-based file sharing services from project execution to delivery.
> Their trust on these cloud-based file sharing services is often
> immovable. As a red teamer, we are going to exploit this trust so that
> we can get access in a far stealthier manner.
![](media/image654.jpeg)We are going to make the cloud-based file
sharing service a **middle-man** to set up the communication playground
between the target server and the Empire C2:
> Assuming that the Empire C2 is properly installed and configured, we
> will be using Dropbox and Microsoft\'s OneDrive for the cloud-based
> file sharing C2.
# Using Dropbox as the C2
> ![](media/image655.jpeg)Dropbox is a file-hosting service that offers
> cloud storage, file synchronization, a personal cloud, and client
> software. In this case, we will be using Dropbox to store our payload
> so that the target connects to Dropbox and downloads it. Let\'s check
> the current listeners for now using the listeners command. This will
> bring us to the listeners menu and show us the list of active
> listeners as well. We can then execute the uselisteners dbx command in
> the listeners menu to open the Dropbox Empire listeners module:
![](media/image656.jpeg)Upon executing the info command, we can see the
options available for this listener:
> The option that we need to set is the API token. The API token can be
> retrieved only after registering to Dropbox and going to the
> [http://www.dropbox.com/developers/ apps/create
> link.](http://www.dropbox.com/developers/apps/create)
>
> In step one, we need to select **Dropbox API**.
>
> ![](media/image657.jpeg)
In step two, we need to choose which type of access we need. This can be
either:
> **App folder**: This gives us access to a single folder that is
> created specifically for our app
**Full Dropbox**: This gives us access to all files and folders in our
Dropbox
Let\'s choose **App folder** for now. In step three, let\'s give a name
to our app:
> ![](media/image658.jpeg)
Click on the **Create app** button to create the app. After doing so,
the app dashboard will look as follows:
> ![](media/image659.jpeg)
>
> To generate the APIToken, click on the **Generate** button under the
> **Generated access token** header:
>
> ![](media/image660.jpeg)
Use this newly generated APIToken in the Empire dbx listener:
> ![](media/image661.jpeg)
>
> Set the APIToken option and start the dbx listener:
>
> ![](media/image662.jpeg)
>
> When the listener is ready, Empire will create a folder for itself.
>
> ![](media/image663.jpeg)
>
> Inside the Empire folder, we can see three different folders:
>
> The results folder, which will save the results of the executed
> command on the target
>
> The staging folder, which contains the PowerShell and the Python
> stagers
>
> The taskings folder, which contains the tasks given by the Empire C2
> to the target server
>
> ![](media/image664.jpeg)
The PowerShell and Python stagers are pushed to the dropbox by C2 so
that the target server can download it.
> ![](media/image665.jpeg)
![](media/image666.jpeg)Now that the Dropbox listener is ready, we can
use a stager. In this case, we\'re going to use the classic Empire
PowerShell launcher:
Once the stager is executed on the target, it will connect to the
Dropbox C2. At this point, the Empire C2 will check the status from
Dropbox. If the agent is
> detected, the Empire C2 will start with the staging process:
>
> ![](media/image667.jpeg)
>
> Confirm the newly connected agent via Dropbox:
>
> ![](media/image668.jpeg)
Information regarding the agent is shown in the following screenshot:
> ![](media/image669.jpeg)
If we analyse the traffic on the target, we can see that the stager is
connecting to
> [https://www.dropbox.com](https://www.dropbox.com/) domain:
>
> ![](media/image670.jpeg)
And a valid SSL certificate to communicate:
> ![](media/image671.jpeg)
>
> Create a new account because sometimes Dropbox disable the account. We
> can also use Microsoft\'s OneDrive in a similar manner.
# Using OneDrive as the C2
> ![](media/image672.jpeg)The settings for OneDrive are different to
> those of Dropbox, but the concept is the same. Let\'s create a
> OneDrive listener in Empire using the uselistener onedrive command
> from the listeners menu: