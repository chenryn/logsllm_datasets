logs stored in databases. AIQL can be used to investi-
gate the real-time anomalies detected by our SAQL sys-
tem over the stream of system monitoring data. Together,
these two systems can provide a better defense against
advanced cyber attacks.
Security-Related Languages: There exist domain-
speciﬁc languages in a variety of security ﬁelds that have
a well-established corpus of low level algorithms, such as
cryptographic systems [33, 34, 70], secure overlay net-
works [61, 72], and network intrusions [36, 44, 82, 86]
and obfuscations [47]. These languages are explicitly de-
signed to solve domain speciﬁc problems, providing spe-
cialized constructs for their particular problem domain
and eschewing irrelevant features.
In contrast to these
languages, the novelty of SAQL focuses on how to spec-
ify anomaly models as queries and how to execute the
queries over system monitoring data.
Security Anomaly Detection: Anomaly detection tech-
niques have been widely used in detecting malware [58,
83, 65, 67], preventing network intrusion [89, 90, 80],
internal threat detection [81], and attack prediction [87].
Rule-based detection techniques characterize normal be-
haviors of programs through analysis and detect un-
known behaviors that have not been observed during
the characterization [49, 58]. Outlier-based detection
techniques [89, 90, 80] detect unusual system behaviors
based on clustering or other machine learning models.
Unlike these techniques, which focus on ﬁnding effec-
tive features and building speciﬁc models under different
scenarios, SAQL provides a uniﬁed interface to express
anomalies based on domain knowledge of experts.
Complex Event Processing Platforms & Data Stream
Management Systems: Complex Event Processing
(CEP) platforms, such as Esper [12], Siddhi [20], Apache
Flink [4], and Aurora [29] match continuously incom-
ing events against a pattern. Unlike traditional database
management systems where a query is executed on the
stored data, CEP queries are applied on a potentially in-
ﬁnite stream of data, and all data that is not relevant to
the query is immediately discarded. These platforms
provide their own domain-speciﬁc languages that can
compose patterns of complex events with the support
of sliding windows. Wukong+S [91] builds a stream
querying platform that can query both the stream data
and stored data. Data stream management systems [79],
such as CQL [51], manage multiple data streams and
provide a query language to process the data over the
stream. These CEP platforms are useful in managing
large streams of data. Thus, they can be used as a man-
agement infrastructure for our approach. However, these
CEP systems alone do not provide language constructs
to support stateful computation in sliding windows, and
thus lack the capability to express stateful anomaly mod-
els as our system does.
Stream Computation Systems: Stream computation
systems allow users to compute various metrics based
on the stream data. These systems include Microsoft
StreamInsight [31], MillWheel [30], Naiad [76], and
Puma [41]. These systems normally provide a good sup-
port for stateless computation (e.g., data aggregation).
However, they do not support stateful anomaly models
as our SAQL system does, which are far more complex
than data aggregation.
Other System Analysis Languages: Splunk [21] and
Elasticsearch [10] are platforms that automatically parse
general application logs, and provide a keyword-based
search language to ﬁlter entries of logs. OSQuery [17,
18] allows analysts to use SQL queries to probe the real-
time system status. However, these systems and the lan-
guages themselves cannot support anomaly detection and
do not support stateful computation in sliding windows.
Other languages, such as Weir [37] and StreamIt [84],
652    27th USENIX Security Symposium
USENIX Association
focus on monitoring the system performance, and lack
support for expressing anomaly models.
9 Conclusion
We have presented a novel stream-based query system
that takes a real-time event feed aggregated from differ-
ent hosts under monitoring, and provides an anomaly
query engine that checks the event stream against the
queries submitted by security analysts to detect anoma-
lies in real-time. Our system provides a domain-speciﬁc
language, SAQL, which is specially designed to facili-
tate the task of expressing anomalies based on domain
knowledge. SAQL provides the constructs of event pat-
terns to easily specify relevant system activities and their
relationships, and the constructs to perform stateful com-
putation by deﬁning states in sliding windows and ac-
cessing historical states to compute anomaly models.
With these constructs, SAQL allows security analysts to
express models for (1) rule-based anomalies, (2) time-
series anomalies, (3) invariant-based anomalies, and (4)
outlier-based anomalies. Our evaluation results on 17 at-
tack queries and 64 micro-benchmark queries show that
the SAQL system has a low alert detection latency and a
high system throughput, and is more efﬁcient in memory
utilization than the existing stream processing systems.
10 Acknowledgements
We would like to thank the anonymous reviewers and our
shepherd, Prof. Adam Bates, for their insightful feed-
back in ﬁnalizing this paper. This work was partially sup-
ported by the National Science Foundation under grants
CNS-1553437 and CNS-1409415. Any opinions, ﬁnd-
ings, and conclusions made in this material are those of
the authors and do not necessarily reﬂect the views of the
funding agencies.
References
[1] Advanced
persistent
work.
https://www.symantec.com/theme.jsp?themeid=apt-infographic-
1.
threats:
How
they
[2] Anatomy
of
advanced
persistent
threats.
https://www.ﬁreeye.com/current-threats/anatomy-of-a-cyber-
attack.html.
[3] ANTLR. http://www.antlr.org/.
[4] Apache Flink. https://ﬂink.apache.org/.
[5] Cpulimit. https://github.com/opsengine/cpulimit.
[6] CVE-2008-0081.
bin/cvename.cgi?name=CVE-2008-0081.
http://www.cve.mitre.org/cgi-
[7] CVE-2014-6271.
6271.
https://nvd.nist.gov/vuln/detail/CVE-2014-
[8] DTrace. http://dtrace.org/.
[9] Ebay
Inc.
to
ask Ebay
users
to
change
passwords.
http://blog.ebay.com/ebay-inc-ask-ebay-users-change-
passwords/.
[10] Elasticsearch. https://www.elastic.co/.
[11] The Equifax data breach.
https://www.ftc.gov/equifax-data-
breach.
[12] Esper. http://www.espertech.com/products/esper.php.
[13] ETW
events
the
in
common
language
https://msdn.microsoft.com/en-
runtime.
us/library/ff357719(v=vs.110).aspx.
[14] Home Depot conﬁrms data breach at U.S., Canadian stores.
http://www.npr.org/2014/09/09/347007380/home-depot-
conﬁrms-data-breach-at-u-s-canadian-stores.
[15] The Linux audit framework. https://github.com/linux-audit/.
[16] OPM government
impacted
breach
data
21.5 million.
http://www.cnn.com/2015/07/09/politics/ofﬁce-of-personnel-
management-data-breach-20-million.
[17] osquery. https://osquery.io/.
[18] osquery for security. https://medium.com/@clong/osquery-for-
security-b66fffdf2daf.
[19] SAQL: A stream-based query system for real-time abnormal sys-
tem behavior detection. https://sites.google.com/site/saqlsystem/.
engine.
[20] Siddhi
processing
complex
event
https://github.com/wso2/siddhi.
[21] Splunk. http://www.splunk.com/.
[22] SQLMap. http://sqlmap.org.
[23] Target
data
breach
incident.
[24] Top
http://www.nytimes.com/2014/02/27/business/target-reports-
on-fourth-quarter-earnings.html? r=1.
sudden
network
causes
of
5
spikes.
https://www.paessler.com/press/pressreleases/top 5 causes -
of sudden spikes in trafﬁc.
[25] Transparent computing. http://www.darpa.mil/program/transparent-
computing.
[26] Using
Splunk
to
detect
DNS
tunneling.
https://www.sans.org/reading-room/whitepapers/dns/splunk-
detect-dns-tunneling-37022.
[27] WSO2
clustering
and
deployment
guide.
https://docs.wso2.com/display/CLUSTER44x/.
[28] Cyber kill chain, 2017. http://www.lockheedmartin.com/us/what-
we-do/aerospace-defense/cyber/cyber-kill-chain.html.
[29] ABADI, D. J., CARNEY, D., C¸ ETINTEMEL, U., CHERNIACK,
M., CONVEY, C., LEE, S., STONEBRAKER, M., TATBUL, N.,
AND ZDONIK, S. Aurora: A new model and architecture for data
stream management. The VLDB Journal 12, 2 (2003), 120–139.
[30] AKIDAU, T., BALIKOV, A., BEKIRO ˘GLU, K., CHERNYAK, S.,
HABERMAN, J., LAX, R., MCVEETY, S., MILLS, D., NORD-
STROM, P., AND WHITTLE, S. Millwheel: Fault-tolerant stream
processing at internet scale. Proc. VLDB Endow. 6, 11 (2013),
1033–1044.
[31] ALI, M. An introduction to Microsoft SQL server streaminsight.
In COM.Geo (2010).
[32] BATES, A. M., TIAN, D., BUTLER, K. R. B., AND MOYER, T.
Trustworthy whole-system provenance for the Linux kernel. In
USENIX Security (2015).
[33] BHARGAVAN, K., CORIN, R., DENILOU, P. M., FOURNET, C.,
AND LEIFER, J. J. Cryptographic protocol synthesis and veriﬁ-
cation for multiparty sessions. In CSF (2009).
USENIX Association
27th USENIX Security Symposium    653
[34] BHARGAVAN, K., FOURNET, C., CORIN, R., AND ZALINESCU,
E. Cryptographically veriﬁed implementations for TLS. In CCS
(2008).
[35] BLUM, A. On-line algorithms in machine learning. In Devel-
opments from a June 1996 Seminar on Online Algorithms: The
State of the Art (1998).
[36] BORDERS, K., SPRINGER, J., AND BURNSIDE, M. Chimera:
A declarative language for streaming network trafﬁc analysis. In
USENIX Security (2012).
[37] BURTSEV, A., MISHRIKOTI, N., EIDE, E., AND RICCI, R.
Weir: A streaming language for performance analysis. In PLOS
(2013).
[38] CASELLA, G., AND BERGER, R. L. Statistical inference, vol. 2.
Duxbury Paciﬁc Grove, 2002.
[39] CHANDOLA, V., BANERJEE, A., AND KUMAR, V. Anomaly
detection: A survey. ACM Comput. Surv. 41, 3 (2009), 15:1–
15:58.
[40] CHANDRA, R., KIM, T., SHAH, M., NARULA, N., AND ZEL-
DOVICH, N. Intrusion recovery for database-backed web appli-
cations. In SOSP (2011).
[41] CHEN, G. J., WIENER, J. L., IYER, S., JAISWAL, A., LEI, R.,
SIMHA, N., WANG, W., WILFONG, K., WILLIAMSON, T., AND
YILMAZ, S. Realtime data processing at Facebook. In SIGMOD
(2016).
[42] CHEN, Q., HSU, M., AND ZELLER, H. Experience in continu-
ous analytics as a service (CaaaS). In EDBT/ICDT (2011).
[43] CLARKE, J. SQL injection attacks and defense, 1st ed. Syngress
Publishing, 2009.
[44] CUPPENS, F., AND ORTALO, R. LAMBDA: A language to
model a database for detection of attacks. In RAID (2000).
[45] DEBAR, H., AND WESPI, A. Aggregation and correlation of
intrusion-detection alerts. In RAID (2001).
[46] DOLAN-GAVITT, B., HODOSH, J., HULIN, P., LEEK, T., AND
WHELAN, R. Repeatable reverse engineering with PANDA. In
PPREW-5 (2015).
[47] DYER, K. P., COULL, S. E., AND SHRIMPTON, T. Marionette:
A programmable network trafﬁc obfuscation system. In USENIX
Security (2015).
[48] ESTER, M., KRIEGEL, H.-P., SANDER, J., AND XU, X. A
density-based algorithm for discovering clusters a density-based
algorithm for discovering clusters in large spatial databases with
noise. In KDD (1996).
[49] FORREST, S., HOFMEYR, S. A., SOMAYAJI, A., AND
LONGSTAFF, T. A. A sense of self for unix processes. In IEEE
S&P (1996).
[50] GAO, P., XIAO, X., LI, Z., JEE, K., XU, F., KULKARNI, S. R.,
AND MITTAL, P. AIQL: Enabling efﬁcient attack investigation
from system monitoring data. In USENIX ATC (2018).
[51] GAROFALAKIS, M. N., GEHRKE, J., AND RASTOGI, R., Eds.
Data stream management - processing high-speed data streams.
Springer, 2016.
[52] GOEL, A., PO, K., FARHADI, K., LI, Z., AND DE LARA, E.
The taser intrusion recovery system. In SOSP (2005).
[53] GUO, Z., WANG, X., TANG, J., LIU, X., XU, Z., WU, M.,
KAASHOEK, M. F., AND ZHANG, Z. R2: An application-level
kernel for record and replay. In OSDI (2008).
[54] HALFOND, W. G., VIEGAS, J., ORSO, A., ET AL. A classiﬁ-
cation of SQL-injection attacks and countermeasures. In ISSSE
(2006).
[55] HAMILTON, J. D. Time series analysis, vol. 2. Princeton Uni-
versity Press, 1994.
[56] HAN, J., PEI, J., AND KAMBER, M. Data mining: concepts and
techniques. Elsevier, 2011.