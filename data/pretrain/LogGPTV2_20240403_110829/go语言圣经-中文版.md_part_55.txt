示函数的用法，比文字描述更直接易懂，特别是作为一个提醒或快速参考时。一个示例函数
也可以方便展示属于同一个接口的几种类型或函数之间的关系，所有的文档都必须关联到一
个地方，就像一个类型或函数声明都统一到包一样。同时，示例函数和注释并不一样，示例
函数是真实的Go代码，需要接受编译器的编译时检查，这样可以保证源代码更新时，示例代
码不会脱节。
根据示例函数的后缀名部分，godoc这个web文档服务器会将示例函数关联到某个具体函数或
包本身，因此ExampleIsPalindrome示例函数将是IsPalindrome函数文档的一部分，Example
示例函数将是包文档的一部分。
示例函数的第二个用处是，在 执行测试的时候也会运行示例函数测试。如果示例函
go test
数内含有类似上面例子中的 格式的注释，那么测试工具会执行这个示例函数，然
// Output:
后检查示例函数的标准输出与注释是否匹配。
示例函数的第三个目的提供一个真实的演练场。 http://golang.org 就是由godoc提供的文档服
务，它使用了Go Playground让用户可以在浏览器中在线编辑和运行每个示例函数，就像图
11.4所示的那样。这通常是学习函数使用或Go语言特性最快捷的方式。
示例函数 423
gopl
本书最后的两章是讨论reflect和unsafe包，一般的Go程序员很少使用它们，事实上也很少需
要用到。因此，如果你还没有写过任何真实的Go程序的话，现在可以先去写些代码了。
示例函数 424
gopl
第十二章 反射
Go语言提供了一种机制，能够在运行时更新变量和检查它们的值、调用它们的方法和它们支
持的内在操作，而不需要在编译时就知道这些变量的具体类型。这种机制被称为反射。反射
也可以让我们将类型本身作为第一类的值类型处理。
在本章，我们将探讨Go语言的反射特性，看看它可以给语言增加哪些表达力，以及在两个至
关重要的API是如何使用反射机制的：一个是fmt包提供的字符串格式功能，另一个是类似
encoding/json和encoding/xml提供的针对特定协议的编解码功能。对于我们在4.6节中看到过
的text/template和html/template包，它们的实现也是依赖反射技术的。然后，反射是一个复杂
的内省技术，不应该随意使用，因此，尽管上面这些包内部都是用反射技术实现的，但是它
们自己的API都没有公开反射相关的接口。
反射 425
gopl
12.1. 为何需要反射?
有时候我们需要编写一个函数能够处理一类并不满足普通公共接口的类型的值，也可能是因
为它们并没有确定的表示方式，或者是在我们设计该函数的时候还这些类型可能还不存在。
一个大家熟悉的例子是fmt.Fprintf函数提供的字符串格式化处理逻辑，它可以用来对任意类型
的值格式化并打印，甚至支持用户自定义的类型。让我们也来尝试实现一个类似功能的函
数。为了简单起见，我们的函数只接收一个参数，然后返回和fmt.Sprint类似的格式化后的字
符串。我们实现的函数名也叫Sprint。
我们首先用switch类型分支来测试输入参数是否实现了String方法，如果是的话就调用该方
法。然后继续增加类型测试分支，检查这个值的动态类型是否是string、int、bool等基础类
型，并在每种情况下执行相应的格式化操作。
func Sprint(x interface{}) string {
type stringer interface {
String() string
}
switch x := x.(type) {
case stringer:
return x.String()
case string:
return x
case int:
return strconv.Itoa(x)
// ...similar cases for int16, uint32, and so on...
case bool:
if x {
return "true"
}
return "false"
default:
// array, chan, func, map, pointer, slice, struct
return "???"
}
}
但是我们如何处理其它类似[]float64、map[string][]string等类型呢？我们当然可以添加更多的
测试分支，但是这些组合类型的数目基本是无穷的。还有如何处理类似url.Values这样的具名
类型呢？即使类型分支可以识别出底层的基础类型是map[string][]string，但是它并不匹配
url.Values类型，因为它们是两种不同的类型，而且switch类型分支也不可能包含每个类似
url.Values的类型，这会导致对这些库的依赖。
没有办法来检查未知类型的表示方式，我们被卡住了。这就是我们为何需要反射的原因。
为何需要反射? 426
gopl
为何需要反射? 427
gopl
12.2. reflect.Type和reflect.Value
反射是由 reflect 包提供的。 它定义了两个重要的类型, Type 和 Value. 一个 Type 表示一个Go
类型. 它是一个接口, 有许多方法来区分类型以及检查它们的组成部分, 例如一个结构体的成员
或一个函数的参数等. 唯一能反映 reflect.Type 实现的是接口的类型描述信息(§7.5), 也正是这
个实体标识了接口值的动态类型.
函数 reflect.TypeOf 接受任意的 interface{} 类型, 并以reflect.Type形式返回其动态类型:
t := reflect.TypeOf(3) // a reflect.Type
fmt.Println(t.String()) // "int"
fmt.Println(t) // "int"
其中 TypeOf(3) 调用将值 3 传给 interface{} 参数. 回到 7.5节 的将一个具体的值转为接口类型
会有一个隐式的接口转换操作, 它会创建一个包含两个信息的接口值: 操作数的动态类型(这里
是int)和它的动态的值(这里是3).
因为 reflect.TypeOf 返回的是一个动态类型的接口值, 它总是返回具体的类型. 因此, 下面的代
码将打印 "*os.File" 而不是 "io.Writer". 稍后, 我们将看到能够表达接口类型的 reflect.Type.
var w io.Writer = os.Stdout
fmt.Println(reflect.TypeOf(w)) // "*os.File"
要注意的是 reflect.Type 接口是满足 fmt.Stringer 接口的. 因为打印一个接口的动态类型对于
调试和日志是有帮助的, fmt.Printf 提供了一个缩写 %T 参数, 内部使用 reflect.TypeOf 来输出:
fmt.Printf("%T\n", 3) // "int"
reflect 包中另一个重要的类型是 Value. 一个 reflect.Value 可以装载任意类型的值. 函数
reflect.ValueOf 接受任意的 interface{} 类型, 并返回一个装载着其动态值的 reflect.Value. 和
reflect.TypeOf 类似, reflect.ValueOf 返回的结果也是具体的类型, 但是 reflect.Value 也可以持
有一个接口值.
v := reflect.ValueOf(3) // a reflect.Value
fmt.Println(v) // "3"
fmt.Printf("%v\n", v) // "3"
fmt.Println(v.String()) // NOTE: ""
和 reflect.Type 类似, reflect.Value 也满足 fmt.Stringer 接口, 但是除非 Value 持有的是字符串,
否则 String 方法只返回其类型. 而使用 fmt 包的 %v 标志参数会对 reflect.Values 特殊处理.
reflect.Type和reflect.Value 428
gopl
对 Value 调用 Type 方法将返回具体类型所对应的 reflect.Type:
t := v.Type() // a reflect.Type
fmt.Println(t.String()) // "int"
reflect.ValueOf 的逆操作是 reflect.Value.Interface 方法. 它返回一个 interface{} 类型，装载着
与 reflect.Value 相同的具体值:
v := reflect.ValueOf(3) // a reflect.Value
x := v.Interface() // an interface{}
i := x.(int) // an int
fmt.Printf("%d\n", i) // "3"
reflect.Value 和 interface{} 都能装载任意的值. 所不同的是, 一个空的接口隐藏了值内部的表示
方式和所有方法, 因此只有我们知道具体的动态类型才能使用类型断言来访问内部的值(就像上
面那样), 内部值我们没法访问. 相比之下, 一个 Value 则有很多方法来检查其内容, 无论它的具
体类型是什么. 让我们再次尝试实现我们的格式化函数 format.Any.
我们使用 reflect.Value 的 Kind 方法来替代之前的类型 switch. 虽然还是有无穷多的类型, 但是
它们的kinds类型却是有限的: Bool, String 和 所有数字类型的基础类型; Array 和 Struct 对应
的聚合类型; Chan, Func, Ptr, Slice, 和 Map 对应的引用类型; interface 类型; 还有表示空值的
Invalid 类型. (空的 reflect.Value 的 kind 即为 Invalid.)
gopl.io/ch12/format
reflect.Type和reflect.Value 429
gopl
package format
import (
"reflect"
"strconv"
)
// Any formats any value as a string.
func Any(value interface{}) string {
return formatAtom(reflect.ValueOf(value))
}
// formatAtom formats a value without inspecting its internal structure.
func formatAtom(v reflect.Value) string {
switch v.Kind() {
case reflect.Invalid:
return "invalid"
case reflect.Int, reflect.Int8, reflect.Int16,
reflect.Int32, reflect.Int64:
return strconv.FormatInt(v.Int(), 10)
case reflect.Uint, reflect.Uint8, reflect.Uint16,
reflect.Uint32, reflect.Uint64, reflect.Uintptr:
return strconv.FormatUint(v.Uint(), 10)
// ...floating-point and complex cases omitted for brevity...
case reflect.Bool:
return strconv.FormatBool(v.Bool())
case reflect.String:
return strconv.Quote(v.String())
case reflect.Chan, reflect.Func, reflect.Ptr, reflect.Slice, reflect.Map:
return v.Type().String() + " 0x" +
strconv.FormatUint(uint64(v.Pointer()), 16)
default: // reflect.Array, reflect.Struct, reflect.Interface
return v.Type().String() + " value"
}
}
到目前为止, 我们的函数将每个值视作一个不可分割没有内部结构的物品, 因此它叫
formatAtom. 对于聚合类型(结构体和数组)和接口，只是打印值的类型, 对于引用类型
(channels, functions, pointers, slices, 和 maps), 打印类型和十六进制的引用地址. 虽然还不够
理想, 但是依然是一个重大的进步, 并且 Kind 只关心底层表示, format.Any 也支持具名类型. 例
如:
var x int64 = 1
var d time.Duration = 1 * time.Nanosecond
fmt.Println(format.Any(x)) // "1"
fmt.Println(format.Any(d)) // "1"
fmt.Println(format.Any([]int64{x})) // "[]int64 0x8202b87b0"
fmt.Println(format.Any([]time.Duration{d})) // "[]time.Duration 0x8202b87e0"
reflect.Type和reflect.Value 430
gopl
reflect.Type和reflect.Value 431
gopl
12.3. Display，一个递归的值打印器
接下来，让我们看看如何改善聚合数据类型的显示。我们并不想完全克隆一个fmt.Sprint函
数，我们只是构建一个用于调试用的Display函数：给定任意一个复杂类型 x，打印这个值对
应的完整结构，同时标记每个元素的发现路径。让我们从一个例子开始。
e, _ := eval.Parse("sqrt(A / pi)")
Display("e", e)
在上面的调用中，传入Display函数的参数是在7.9节一个表达式求值函数返回的语法树。
Display函数的输出如下：
Display e (eval.call):
e.fn = "sqrt"
e.args[0].type = eval.binary
e.args[0].value.op = 47
e.args[0].value.x.type = eval.Var
e.args[0].value.x.value = "A"
e.args[0].value.y.type = eval.Var
e.args[0].value.y.value = "pi"
你应该尽量避免在一个包的API中暴露涉及反射的接口。我们将定义一个未导出的display函数
用于递归处理工作，导出的是Display函数，它只是display函数简单的包装以接受interface{}类
型的参数：
gopl.io/ch12/display
func Display(name string, x interface{}) {
fmt.Printf("Display %s (%T):\n", name, x)
display(name, reflect.ValueOf(x))
}
在display函数中，我们使用了前面定义的打印基础类型——基本类型、函数和chan等——元
素值的formatAtom函数，但是我们会使用reflect.Value的方法来递归显示复杂类型的每一个成
员。在递归下降过程中，path字符串，从最开始传入的起始值（这里是“e”），将逐步增长来
表示是如何达到当前值（例如“e.args[0].value”）的。
因为我们不再模拟fmt.Sprint函数，我们将直接使用fmt包来简化我们的例子实现。
Display递归打印 432
gopl
func display(path string, v reflect.Value) {
switch v.Kind() {
case reflect.Invalid:
fmt.Printf("%s = invalid\n", path)
case reflect.Slice, reflect.Array:
for i := 0; i < v.Len(); i++ {
display(fmt.Sprintf("%s[%d]", path, i), v.Index(i))
}
case reflect.Struct:
for i := 0; i < v.NumField(); i++ {
fieldPath := fmt.Sprintf("%s.%s", path, v.Type().Field(i).Name)
display(fieldPath, v.Field(i))
}
case reflect.Map:
for _, key := range v.MapKeys() {
display(fmt.Sprintf("%s[%s]", path,
formatAtom(key)), v.MapIndex(key))
}
case reflect.Ptr:
if v.IsNil() {
fmt.Printf("%s = nil\n", path)
} else {
display(fmt.Sprintf("(*%s)", path), v.Elem())
}
case reflect.Interface:
if v.IsNil() {
fmt.Printf("%s = nil\n", path)
} else {
fmt.Printf("%s.type = %s\n", path, v.Elem().Type())