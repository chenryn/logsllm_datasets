### Restricting Adversary and Extractor Running Time

To ensure the effectiveness of seed-dependent extractors, it is necessary to restrict the adversary \( A \) such that its running time is less than the running time of the extractor. Seed-dependent extractors are characterized by:
1. An unbounded family of randomness sources.
2. Correlation between the seed and the source.
3. Limited adversary capabilities.

### Strong Extractors

In contrast to seeded extractors, where we do not want to restrict the running time of the adversary \( A \), we need to ensure independence between the source and the seed. Additionally, we aim to minimize the use of the extra randomness seed. This leads to the concept of strong extractors, as defined in Definition 7.

**Definition 7 (Strong Extractors).** A function \( \text{Extract} : \{0, 1\}^p \times \{0, 1\}^s \rightarrow \{0, 1\}^m \) is a strong \((k, \epsilon)\)-extractor if for all probabilistic adversaries \( A \) who sample a distribution \( X \) with min-entropy \( H_{\infty}(X) \geq k \), the distributions \((\text{seed}, \text{Extract}(X, \text{seed}))\) and \((\text{seed}, U_m)\) are \(\epsilon\)-close, where \(\text{seed} \leftarrow \{0, 1\}^s\) and \( X \) is independent of \(\text{seed}\).

This definition ensures that once a random parameter \(\text{seed}\) is chosen, the extraction process can be repeated using the same \(\text{seed}\).

**Definition 7 in Terms of Universal Hash Functions:**
The hash functions family \( H \) is a \((k, \epsilon)\)-extractor if for any random variable \( I \) over \(\{0, 1\}^p\) with min-entropy \( H_{\infty}(I) \geq k \), the distributions \((\text{seed}, h_{\text{seed}}(I))\) and \((\text{seed}, U_m)\) are \(\epsilon\)-close, where \(\text{seed}\) is uniformly random over \(\{0, 1\}^s\). The Leftover Hash Lemma (Lemma 4) constructively builds a strong extractor from a universal hash functions family.

### Summary of Extractor Types

We summarize the different types of extractors seen in this section in Table 2.1. The five extractor types (deterministic, resilient, seed-dependent, seeded, strong) are detailed, specifying:
1. Whether the parameter \(\text{seed}\) must be independent from the randomness source (denoted by ) or can be correlated to it (denoted by ).
2. Whether the parameter \(\text{seed}\) must remain secret (denoted by ) or can be made public (denoted by ).
3. Whether the existence of an extractor of a given type implies restrictions on the number of randomness sources or the capacities of the adversary \( A \) (denoted by ) or no restriction is needed (denoted by ).

Table 2.1 – Tradeoffs for Randomness Extractors
| Extractor Type | Correlation | Secrecy | Number of Sources | Attacker Capacities |
|----------------|-------------|---------|-------------------|--------------------|
| Deterministic  |            |        |                  |                   |
| Resilient      |            |        |                  |                   |
| Seed-dependent |            |        |                  |                   |
| Seeded         |            |        |                  |                   |
| Strong         |            |        |                  |                   |

**Note:** ∅: No parameter seed is used, : Possible correlation, public seed / no restriction on the source or on \( A \), : Independence required, private seed, restrictions on the source or on \( A \).

### Leftover Hash Lemma

We present two versions of the Leftover Hash Lemma. The first one constructively builds strong extractors from universal hash functions families, and the second one builds resilient extractors from pairwise independent hash functions families. This important lemma was first formally stated in [HILL99].

**Lemma 4 (Leftover-Hash Lemma for Universal Hash Functions Family).** Assume that the hash functions family \( H = \{h : \{0, 1\}^p \rightarrow \{0, 1\}^m\} \) is \(\rho\)-universal where \(\rho = (1 + \alpha)2^{-m}\) for some \(\alpha > 0\). Then, for any \( k > 0 \), it is also a strong \((k, \epsilon)\)-extractor for \(\epsilon = \frac{1}{2} \sqrt{2m - k + \alpha}\).

**Proof.** We recall the proof described in [Vad12]. Fix any \( I \neq I' \in \{0, 1\}^p \) with \( H_{\infty}(I) \geq k \) and \( H_{\infty}(I') \geq k \). Fix \( X \in \{0, 1\}^s \) independently of \( I \) and \( I' \) and \( U \leftarrow \{0, 1\}^m \). First, consider the statistical distance between \((X, h_X(I))\) and \((X, U)\). As in [Vad12], we introduce a second notion of distance between two random variables \( X \) and \( Y \):

\[
\Delta_2(X, Y) = \sum_x |\Pr[X = x] - \Pr[Y = x]|
\]

and we define the collision probability of a random variable \( X \) as the probability that two independent samples of \( X \) are equal:

\[
\text{CP}(X) = \sum_x \Pr[X = x]^2
\]

We can bound the statistical distance between \((X, h_X(I))\) and \((X, U)\) by their \(\Delta_2\) distance:

\[
\text{SD}((X, h_X(I)), (X, U)) \leq \frac{1}{2} \sqrt{2^s \cdot 2^m \cdot \Delta_2((X, h_X(I)), (X, U))^2}
\]

and we have:

\[
\Delta_2((X, h_X(I)))^2 = \Delta_2((X, h_X(I)), (X, U))^2 + 2^{-m-s}
\]

Now, as \(\Delta_2((X, h_X(I)))^2 \leq \text{CP}(X) \cdot (\Pr[I = I'] + \Pr[h_X(I) = h_X(I') | I \neq I'])\), and since \( I \) and \( I' \) are sampled independently of \( X \), and \( H \) is \( 2^{-m} \cdot (1 + \alpha) \)-universal:

\[
\Delta_2((X, h_X(I)))^2 \leq 2^{-s} \cdot (2^{-k} + 2^{-m} \cdot (1 + \alpha))
\]

Finally, with \(\alpha = 4 \cdot \epsilon^2 - 2^{m-k}\):

\[
\text{SD}((X, h_X(I)), (X, U)) \leq \frac{1}{2} \sqrt{2^s \cdot 2^m \cdot \left(2^{-k} + 2^{-m} \cdot (1 + \alpha)\right)} \leq \epsilon
\]

Thus, the hash functions family \( H = \{h_X : \{0, 1\}^p \rightarrow \{0, 1\}^m\}_{X \in \{0, 1\}^s} \) is a \((k, \epsilon)\)-strong extractor for \(\epsilon = \frac{1}{2} \sqrt{2m - k + \alpha}\).

### Pseudo-Random Number Generators

#### Standard Pseudo-Random Number Generator

A secure pseudo-random number generator (PRNG) is an extending function that, on input a random bit string \( S \) (called a seed), outputs a longer bit string indistinguishable from random. Note that the notion of seed here should not be confused with the seed used in randomness extractors. Here, the seed models a secret, random input to the PRNG.

**Definition 8 (Standard Pseudo-Random Number Generator).** Let \( p \) and \( \ell \) be integers such that \( p < \ell \). A standard pseudo-random number generator is a function \( G : \{0, 1\}^p \rightarrow \{0, 1\}^\ell \) that takes as input a bit string \( S \) (called a seed) of length \( p \) and outputs a bit string \( R \) of length \( \ell \).

**Security Game PR:**
- **Procedure next-ror:**
  - \( R_0 \leftarrow G(S) \)
  - \( R_1 \leftarrow \{0, 1\}^\ell \)
  - RETURN \( R_b \)
- **Procedure initialize:**
  - \( S \leftarrow \{0, 1\}^p \)
  - \( b \leftarrow \{0, 1\} \)
- **Procedure finalize(b*):**
  - IF \( b = b^* \) RETURN 1
  - ELSE RETURN 0

**Definition 9 (Security of a Standard Pseudo-Random Number Generator).** A standard pseudo-random number generator is \((t, \epsilon)\)-secure if for any adversary \( A \) running in time at most \( t \), the advantage of \( A \) in game PR is at most \( \epsilon \).

#### Stateful Pseudo-Random Number Generator

A stateful pseudo-random number generator is an iterative and stateful algorithm that, at each invocation, produces some output bits as a function of the current seed and updates the seed. The associated security property generalizes the security of a standard pseudo-random number generator, as the adversary is challenged after several iterations of the generator on its capability to distinguish the output of the generator from random.

**Definition 10 (Stateful Pseudo-Random Number Generator).** A stateful pseudo-random number generator is a couple of algorithms \((\text{key}, \text{next})\), where \(\text{key}\) is a probabilistic algorithm that takes no input and outputs an initial state \( S \in \{0, 1\}^p \), and \(\text{next}\) is a deterministic algorithm that, given the current state \( S \), outputs a pair \((S', R) \leftarrow \text{next}(S)\) where \( S' \) is the new state and \( R \in \{0, 1\}^\ell \) is the output.

**Security Game SPR:**
- **Procedure next-ror:**
  - \((S, R_0) \leftarrow \text{next}(S)\)
  - \( R_1 \leftarrow \{0, 1\}^\ell \)
  - OUTPUT \( R_b \)
- **Procedure initialize:**
  - \( S \leftarrow \text{key} \)
  - \( b \leftarrow \{0, 1\} \)
- **Procedure finalize(b*):**
  - IF \( b = b^* \) RETURN 1
  - ELSE RETURN 0

**Definition 11 (Security of a Stateful Pseudo-Random Number Generator).** A stateful pseudo-random number generator \( G = (\text{key}, \text{next}) \) is \((t, \epsilon)\)-secure if for any attacker \( A \) running in time at most \( t \), the advantage of \( A \) in game SPR is at most \( \epsilon \).

#### Pseudo-Random Number Generator with Input

Consider now an iteration of the pseudo-random number generator where, at each iteration, the generator processes a different auxiliary input in addition to the key. This leads to the notion of a pseudo-random number generator with input. Informally, a pseudo-random number generator with input mixes two different processes: the collection of new inputs and the generation of the output.

**Different Definitions:**
- In 1998, Gutmann and Kelsey, Schneier, Wagner, and Hall provided guidelines for designing a secure pseudo-random number generator with input.
- In 2002, Desai, Hevia, and Yin modeled a pseudo-random number generator with input as an iterative algorithm taking three inputs: a key \( K \), an internal state \( S \), and an auxiliary input \( I \). The algorithm generates pseudo-random numbers \( R \) and a new state \( S' \).
- In 2003, Barak, Shaltiel, and Tromer proposed a security model for a pseudo-random number generator with input where an attacker can control the inputs.
- In 2005, Barak and Halevi defined a pseudo-random number generator with input as a couple of deterministic polynomial-time algorithms \( G = (\text{refresh}, \text{next}) \), where \(\text{refresh}\) updates the internal state \( S \) with an input \( I \) containing randomness, and \(\text{next}\) generates the output \( R \) and updates the internal state \( S \).

In the following chapters, we present the main contributions of this thesis, which include a new definition of a pseudo-random number generator with input based on strong extractors and the formal statement of security properties for such generators.

### Pseudo-Random Functions

We recall the definitions of a pseudo-random function from [BKR94]. A pseudo-random function is a family of functions such that no adversary can computationally distinguish the input/output behavior of a random instance from this family from the input/output behavior of a random function.

In this security model, the adversary can give inputs to the function and receive the corresponding output in a black-box manner. The term "random function" means a function chosen at random.