˙Vi(x1, . . . , xsi )
def
= ˜Vi(x1, . . . , xsi ) + Zi(x1, . . . , xsi )
(cid:9)
z∈{0,1}
Ri(x1, z),
(3)
(cid:11)
si
˙Vi
where Zi(x) =
x ∈ {0, 1}si.
of Vi, as
As Ri
of
values
random
(cid:8)
to mask
i=1 xi(1 − xi), i.e., Zi(x) = 0 for all
is known as the low degree extension
˙Vi(x) = ˜Vi(x) = Vi(x) for all x ∈ {0, 1}si.
is randomly selected by P, revealing evaluations
the
in the circuit. Additionally, P selects another
δi(x1, . . . , xsi+1 , y1, . . . , ysi+1 , z)
=
leak information about Vi,
polynomial
the
˙Vi does not
sumcheck
Let Hi
protocol.
thus
x,y∈{0,1}si+1 ,z∈{0,1} δi(x1, . . . , xsi+1 , y1, . . . , ysi+1 , z),
Equation 2 to run sumcheck on becomes
αi ˙Vi(u(i)) + βi ˙Vi(v(i)) + γiHi
(cid:9)
=
x,y∈{0,1}si+1 ,z∈{0,1} f
1 , z), Ri(v(i)
Ri(u(i)
1 , z), δi(x, y, z)) ,
(cid:4)
i ( ˙Vi+1(x), ˙Vi+1(y),
(4)
(cid:4)
i
1 , g(i)), Ri(v(i)
where γi ∈ F is randomly selected by V, and f
is de-
ﬁned by αi, βi, γi, u(i), v(i), Zi(u(i)), Zi(v(i))3. Now V and
P can execute the sumcheck and GKR protocol on Equa-
tion 4. In each round, P additionally opens Ri and δi at
1 , g(i)), δi(u(i+1), v(i+1), g(i)) for g(i) ∈
Ri(u(i)
F randomly selected by V. With these values, V reduces
the correctness of two evaluations ˙Vi(u(i)), ˙Vi(v(i)) to two
˙Vi(u(i+1)), ˙Vi(v(i+1)) on one layer above like
evaluations
before. In addition, as fi
is masked by δi, the sumcheck
protocol
the
two evaluations of ˙Vi do not leak information. The full zero
knowledge argument protocol in [70] is given in Protocol 1.
We have the following theorem:
[70]. Let C : Fn → F be a layered arithmetic
Lemma 2.
circuit with D layers, input in and witness w. Protocol 1 is a
zero knowledge argument of knowledge under Deﬁnition 2 for
the relation deﬁned by 1 = C(in; w).
is zero knowledge; as ˜Vi
is masked by Ri,
The variable degree of Ri is O(1). δi(x, y, z) = δi,1(x1) +
. . . + δi,si+1 (xsi+1 ) + δi,si+1+1(y1) + . . . + δi,2si+1 (ysi+1 ) +
δi,2si+1+1(z) is the summation of 2si+1 + 1 univariate poly-
nomials of degree O(1). Other than the zkVPD instantiations,
the proof size is O(D log |C|) and the prover time is O(|C|).
When C is regular, the veriﬁcation time is O(n + D log |C|).
D. Univariate Sumcheck
Our transparent zkVPD protocol is inspired by the univari-
ate sumcheck protocol recently proposed by Ben-Sasson et
al.in [14]. As the name indicates, the univariate sumcheck
protocol allows the veriﬁer to validate the result of the sum
f(cid:3)
i
3Formally,
is
+
I((x, y), 0)(αiZi(u(i))R(u(i)
1 , z) + βiZi(v(i))R(v(i)
1 , z)) + γiδi(x, y, z),
where I(a, b) is an identity polynomial I(a, b) = 0 iff a = b. We will not
use f(cid:3)
i explicitly in our constructions later.
I(0, z)fi( ˙Vi+1(x), ˙Vi+1(y))
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
863
(cid:8)
(cid:8)
of a univariate polynomial on a subset H of the ﬁeld F:
a∈H f (a). The key idea of the protocol relies on the
μ =
following lemma:
Lemma 3.
[27]. Let H be a multiplicative coset4 of F, and
let g(x) be a univariate polynomial over F of degree strictly
less that |H|. Then
a∈H g(a) = g(0) · |H|.
Because of Lemma 3, to test the result of
a∈H f (a) for f
(cid:11)
with degree less than k, we can decompose f into two parts
f (x) = g(x) + ZH(x) · h(x), where ZH(x) =
a∈H(x − a)
(i.e., ZH(a) = 0 for all a ∈ H), and the degrees of g and
h are strictly less than |H| and k − |H|. This decomposition
is unique for every f. As ZH(a) is always 0 for a ∈ H,
a∈H g(a) = g(0) · |H| by Lemma 3.
μ =
Therefore, if the claimed sum μ sent by the prover is correct,
f (x) − ZH(x) · h(x) − μ/|H| must be a polynomial of degree
less than |H| with constant term 0, or equivalently polynomial
a∈H f (a) =
(cid:8)
(cid:8)
(cid:8)
|H| · f (x) − |H| · ZH(x) · h(x) − μ
p(x) =
|H| · x
(5)
must be a polynomial of degree less than |H|− 1. To test this,
the univariate sumcheck uses a low degree test (LDT) protocol
on Reed-Solomon (RS) code. We will deﬁne Reed-Solomon
Code in appendix and LDT below.
Low Degree Test and Rational Constraints. Low degree test
allows a veriﬁer to test whether a polynomial/vector belongs
to an RS code, i.e., the vector is the evaluations of some
polynomial of degree less than m on L.
In our constructions, we use the LDT protocol
in [14,
Protocol 8.2], which was used to transform an RS-encoded
IOP to a regular IOP. It applies the LDT protocol proposed
in [10] protocol to a sequence of polynomials (cid:11)ρ and their
rational constraint p, which is a polynomial
that can be
computed as the division of the polynomials in (cid:11)ρ. In the
case of univariate sumcheck, the sequence of polynomials is
(cid:11)ρ = (f, h) and the rational constraint is given by Equation 5.
The high level idea is as follows. First, the veriﬁer multiplies
each polynomial in (cid:11)ρ and the rational constraint p with an ap-
propriate monomial such that they have the same degree max,
and takes their random linear combination. Then the veriﬁer
tests that the resulting polynomial is in RS[L, max+1]. At the
end of the protocol, the veriﬁer needs oracle access to κ evalu-
ations of each polynomial in (cid:11)ρ and the rational constraint p at
points in L indexed by I, and checks that each evaluation of p
is consistent with the evaluations of the polynomials in (cid:11)ρ. We
denote the protocol as (cid:3)LDT.P((cid:11)ρ, p), LDT.V( (cid:11)m, deg(p))(cid:4)(L),
where (cid:11)ρ is a sequence of polynomials over F, p(x) is their
rational constraint, (cid:11)m, deg(p) is the degrees of the polynomials
and the rational constraint to test, and L is a multiplicative
coset of F. We state the properties of the protocol in the
following lemma:
4In [14], the protocols are mainly using additive cosets. We require H to be
a multiplicative coset for our constructions over prime ﬁelds and extensions.
The univariate sumsheck on multiplicative cosets is also stated in [14].
4.
exist
There
Lemma
an
protocol
(cid:3)LDT.P((cid:11)ρ, p), LDT.V( (cid:11)m, deg(p))(cid:4)(L)
complete
|L|
|F| ) + negl(κ), given
and sound with soundness error O(
oracle access to evaluations of each polynomial in (cid:11)ρ at κ
points indexed by I in L. The proof size and the veriﬁcation
time are O(log |L|) other than the oracle access, and the
prover time is O(L).
LDT
is
that
The LDT protocol can be made zero knowledge in a
straight-forward way by adding a random polynomial of
degree max in (cid:11)ρ. That is, there exists a simulator S such
that given the random challenges of I of any PPT al-
gorithm V∗,
it can simulate the view of V∗ such that
View((cid:3)LDT.P((cid:11)ρ, p),V∗
( (cid:11)m, deg(p))(cid:4)(L)) ≈ SV∗
(deg(p)). In
particular, S generates p
∗ ∈ RS[L, deg(p)] and can simulate
∗ subject
the view of any sequence of random polynomials (cid:11)ρ
to the constraint that their evaluations at points indexed by I
are consistent with the oracle access of p
Merkle Tree. Merkle hash tree proposed by Ralph Merkle
in [57] is a common primitive to commit a vector and open it
at an index with logarithmic proof size and veriﬁcation time.
It consists of three algorithms:
• rootc MT.Commit(c)
• (cidx, πidx) MT.Open(idx, c)
• (1, 0) MT.Verify(rootc, idx, cidx, πidx)
The security follows the collision-resistant property of the hash
function used to construct the Merkle tree.
∗.
With these tools, the univariate sumcheck protocol works
as follows. To prove μ =
a∈H f (a), the veriﬁer and the
prover picks L, a multiplicative coset of F and a superset of
H, where |L| > k. P decompose f (x) = g(x) + ZH(x) · h(x)
as deﬁned above, and computes the vectors f|L and h|L. P
then commits to these two vectors using Merkle trees. P then
deﬁnes a polynomial p(x) =
, which
is a rational constraint of f and h. As explained above, in
order to ensure the correctness of μ, it sufﬁces to test that the
degree of (f, h), p is less than (k, k − |H|),|H| − 1, which
is done through the low degree test. At the end of the LDT,
V needs oracle access to κ points of f|L and h|L. P sends
these points with their Merkle tree proofs, and V validates their
correctness. The formal protocol and the lemma is presented in
Appendix B. As shown in [14], it sufﬁces to set |L| = O(|H|).
|H|·f (x)−|H|·ZH(x)·h(x)−μ
|H|·x
(cid:8)
III. TRANSPARENT ZERO KNOWLEDGE POLYNOMIAL
DELEGATION
In this section, we present our main construction, a zero
knowledge veriﬁable polynomial delegation scheme without
trusted setup. We ﬁrst construct a VPD scheme that is correct
and sound, then extend it to be zero knowledge. Our construc-
tion is inspired by the univariate sumcheck [14] described in
Section II-D.
Our main idea is as follows. To evaluate an (cid:2)-variate poly-
nomial f with variable degree d at point t = (t1, . . . , t(cid:3)), we
model the evaluation as the inner product between the vector of
coefﬁcients in f and the vector of all monomials in f evaluated
at t. Formally speaking, let N = |W(cid:3),d| = (d + 1)(cid:3) be the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:28 UTC from IEEE Xplore.  Restrictions apply. 
864
(cid:2)N
Protocol 2 (Veriﬁable Polynomial Delegation). Let F be a family of
(cid:8)-variate polynomial over F with variable-degree d and N = (d +
1)(cid:4).We use W(cid:4),d = {Wi(x1, . . . , x(cid:4))}N
i=1 to denote the collection
of all monomials in F. rf = ⊥ and we omit if in the algorithms.
• pp
KeyGen(1λ): Pick a hash function from the collision-
resistant hash function family for Merkle tree. Find a multiplica-
tive coset H of F such that |H| = (d + 1)(cid:4). Find a multiplicative
coset L of F such that |L| = O(|H|) > 2|H| and H ⊂ L ⊂ F.
• com ← Commit(f, pp): For a polynomial f ∈ F of the form
i=1 ciWi(x), ﬁnd the unique univariate polynomial
f (x) =
l(x) : F → F such that l|H = (c1, . . . , cN ). P evaluates l|L and
runs rootl ← MT.Commit(l|L). Output com = rootl.
• ((μ, π);{0, 1}) ← (cid:3)Open(f ), Verify(com)(cid:4)(t, pp): This is an
interactive protocol between P and V.
1) P computes μ = f (t) and sends it to V.
2) P evaluates T = (W1(t), . . . , WN (t)). P ﬁnds the unique
univariate polynomial q(x) : F → F such that q|H = T .
3) P computes l(x) · q(x). P uniquely decomposes l(x) · q(x) =
g(x) + ZH(x) · h(x) , where ZH(x) =
a∈H(x − a) and the
degrees of g and h are strictly less than |H| and |H| − 1. P
evaluates h|L and runs rooth ← MT.Commit(h|L) and sends
rooth to V.
. P and V invoke a
4) Let p(x) =
low degree test: (cid:3)LDT.P((l· q, h), p), LDT.V((2|H|− 1,|H|−
1),|H| − 1)(cid:4)(L). If
fails, V aborts and output 0.
Otherwise, at then end of the test, V needs oracle access to
κ points of l(x) · q(x), h(x) and p(x) at indices I.
5) For each index i ∈ I, let ai be the corresponding point in L.
P opens (l(ai), πl
MT.Open(i, h|L).
and
executes
MT.Verify(rooth, i, h(ai), πh
for all points opened by
i )
P. If any veriﬁcation fails, abort and output 0.
test, P and V runs
low degree
(cid:3)GKR.P, GKR.V(cid:4)(C, t), where
the
circuit C computes