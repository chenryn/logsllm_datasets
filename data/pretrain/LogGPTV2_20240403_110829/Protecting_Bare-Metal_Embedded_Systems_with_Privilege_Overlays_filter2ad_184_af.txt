MPU thereby disabling all (MPU-based) protections.
VII. RELATED WORK
Our work uses our novel privilege overlays,
to enable
established security policies from the desktop world for bare-
metal embedded systems. We also customize several of these
protections to the unique constraints of bare-metal systems.
Modern desktop operating systems such as Windows, Linux,
and Mac OS X protect against code injection and control-ﬂow
hijack attacks through a variety of defenses, such as DEP [55],
stack canaries [22], Address Space Layout Randomization
[49], and multiple levels of execution privileges.
The research community has expended signiﬁcant effort
in developing defenses for control-ﬂow hijacking and data
corruption. These works include: Artiﬁcial Diversity [20,
36, 13, 14, 35, 32, 38, 41, 48, 25], Control-Flow Integrity
(CFI) [9, 43, 58, 59, 46, 18], and Code Pointer Integrity
(CPI) [40]. Artiﬁcial Diversity [20] outlines many techniques
for creating functionally equivalent but different binaries and
how they may impact the ability for attacks to scale across
applications. A recent survey [41] performs an in-depth review
of the 20+ years of work that has been done in this area.
Artiﬁcial software diversity is generally grouped by how it is
applied, by a compiler [36, 13, 14, 35, 32, 38, 45, 15] or by
binary rewriting [48, 25]. With the exceptions of [32, 45, 15]
these works target
the applications supported by an OS,
and assume virtual address space to create large entropy.
Mclaughlin et al. [45] propose a ﬁrmware diversiﬁcation
technique for smart meters, using compiler rewriting. They
give analytically results on how it would slow attack prop-
agation through smart meters. They give no analysis with
respect to execution time overhead or energy consumption.
Giuffrida et al. [32] diversify the stack by adding variables to
stack frames, creating a non-deterministic stack size which is
not suitable for embedded systems. EPOXY applies compile-
time diversiﬁcation and utilizes techniques appropriate to their
constraints. Braden et al. [15] focus on creating memory
leakage resistant applications without hardware support. They
use an approach based on SFI to prevent disclosure of code
that has been randomized using ﬁne-grained diversiﬁcation
techniques. Their approach assumes W ⊕ X and is compatible
with MPUs. Our work provides a way to ensure enforcement
of W ⊕ X automatically.
CFI uses control-ﬂow information to ensure the targets of
all indirect control-ﬂow transfers end up at valid targets. CFI
faces two challenges: precision and performance. While the
performance overhead has been signiﬁcantly reduced over
time [46, 54], even the most precise CFI mechanism is
ineffective if an attacker ﬁnds a code location that allows
enough gadgets to be reached, e.g., an indirect function call
that may call the function desired by the attacker [19, 28].
CFI with custom hardware additions has been implemented
on embedded systems [24] with low overhead. Our techniques
only require the commonly available MPU. CPI [40] enforces
strict integrity of code pointers with low overhead but re-
quires runtime support and virtual memory. However, separate
memory regions and MMU-based isolation are not available
on bare-metal embedded systems. We leverage SafeStack, an
independent component of CPI that protects return addresses
on the stack, and adapt it to embedded systems without virtual
memory support.
Embedded systems security is an important research topic.
Cui and Stolfo [23] use binary rewriting to inject runtime
integrity checks and divert execution to these checks; diversi-
fying code in the process. Their checks are limited to checking
static memory via signatures and assumes DEP. Francillon
et al. [31] use micro-controller architecture extensions to
create a regular stack and a protected return stack. EPOXY
also uses a dual stack, without additional hardware support.
Firmware integrity attestation [30, 27, 44, 10] uses either a
software or hardware trust anchor to provide validation that
the ﬁrmware and or its execution matches a known standard.
These techniques can be used to enforce our assumption
that the ﬁrmware is not tampered with at installation. Some
frameworks [16, 4, 7, 1] enable creation of isolated compu-
tational environments on embedded systems. mbedOS[4] and
FreeRTOS [1] are both embedded operating systems which
can utilize the MPU to isolate OS context from application
context. TyTan [16] and mbed μV isor [7] enable sandboxing
between different tasks of a bare-metal system. These require
that an application be developed using its respective API.
ARM’s TrustZone [12] provides hardware to divide execution
between untrusted and trusted execution environments. The
ARMv7-M architecture does not contain this feature.
301
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
VIII. DISCUSSION
ACKNOWLEDGMENTS
Real-time systems. The diversity techniques we employ
introduce some non-determinism between variants. This may
make it unsuitable for real-time systems with strict timing
requirements. However, the variability is low (a few percent)
making our techniques applicable to wide ranges of devices,
particularly IoT devices, as they generally have soft real-time
constraints. Investigation of the methods to further reduce
variability is an area of future work. This involves intrusive
changes to the compiler infrastructure to make its actions more
deterministic in the face of diversiﬁcation.
Protecting inputs and outputs. We demonstrated EPOXY’s
ability to protect the lock actuator on PinLock. Protecting the
Ethernet and the SD interfaces is conceptually the same—a
series of reads and writes to IO registers. However, the HAL
for these interfaces makes use of long indirection chains, i.e.,
passing the addresses of these registers as function parameters.
Our current analysis does not detect these accesses, and the
complexity of the HAL makes manual annotation a daunting
task. Extending our analysis to be inter-procedural will allow
us to handle these complex IO patterns.
Use with lightweight OSs. EPOXY can be extended to apply
its protections to lightweight OSs, such as FreeRTOS. Our
diversity techniques are directly usable as they do not change
any calling conventions. Privilege Overlays require the use of
a system call and care must be take to ensure one is reserved.
Currently SVC FE is used, an arbitrary choice, which can
be changed to a compile-time parameter. Thus, enabling the
application of W ⊕ X—assuming the OS does not use the
MPU, which typically is the case. To apply SafeStack, the only
remaining protection, EPOXY needs to know the number of
threads created, and how to initialize each unsafestack. This
may be obtained by making EPOXY aware of the OS thread
create functionality, so it can be modiﬁed to setup both stacks.
The OS’s context switch would also need to be changed to save
and restore separate unsafestack guards for each thread. With
these changes EPOXY could apply its defenses to systems
using a lightweight OS.
IX. CONCLUSION
Bare-metal systems typically operate without even basic
modern security protections like DEP and control-ﬂow hijack
protections. This is caused by the dichotomy inherent
in
bare-metal system development: all memory is executable
and accessible to simplify system development, but security
principles dictate restricting some of their use at runtime. We
propose EPOXY, that uses a novel technique called privilege
overlaying to solve this dichotomy. It applies protections
against code injection, control-ﬂow hijack, and data corruption
attacks in a system-speciﬁc way. A performance evaluation of
our prototype implementation shows that not only are these
defenses effective, but that they result in negligible execution
and power overheads. The open-source version of EPOXY is
available at https://github.com/HexHive/EPOXY.
We thank the anonymous reviewers for their insightful
comments. We also thank Brandon Eames for his informative
feedback. This material is based in part upon work supported
by the National Science Foundation under Grant Numbers
CNS-1464155 and CNS-1548114. Any opinions, ﬁndings, and
conclusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views of
the National Science Foundation. This work is also funded by
Sandia National Laboratories. Sandia National Laboratories is
a multi-program laboratory managed and operated by Sandia
Corporation, a wholly owned subsidiary of Lockheed Martin
Corporation, for the U.S. Department of Energys National
Nuclear Security Administration under contract DE-AC04-
94AL85000.
REFERENCES
[1] FreeRTOS-MPU.
http://www.freertos.org/
FreeRTOS-MPU-memory-protection-unit.html
[2] FreeRToS Support Forum. ARM CM3 MPU does not seem
to build in FreeRTOS 9.0.0. https://sourceforge.net/p/freertos/
discussion/382005/thread/3743f72c/
[3] FreeRToS Support Forum. Stack overﬂow detection on Cortex-
m3 with MPU . https://sourceforge.net/p/freertos/discussion/
382005/thread/18f8a0ce/#deab
[4] mbed OS. https://www.mbed.com/en/development/mbed-os/
[5] STM32479I-EVAL.
http://www.st.com/resource/en/user
manual/dm00219352.pdf
[6] STM32F4-Discovery.
static/active/en/resource/technical/document/data brief/
DM00037955.pdf
[7] The mbed OS uVisor. https://www.mbed.com/en/technologies/
http://www.st.com/st-web-ui/
security/uvisor/
[8] FreeRToS
Support
for
GCC/ARM CM3 MPU , Jan 2016. https://sourceforge.net/
p/freertos/discussion/382005/thread/6a4f7df2/
Forum. Mistype
port.c
in
[9] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, Control-
ﬂow integrity, In ACM Conf. on Computer and Communication
Security. ACM, 2005, pp. 340–353.
[10] T. Abera, N. Asokan, L. Davi, J. Ekberg, T. Nyman, A. Paverd,
A. Sadeghi, and G. Tsudik, C-FLAT: control-ﬂow attestation
for embedded systems software, In Symp. on Information,
Computer and Communications Security, 2016.
[11] ARM, ARMv7-M Architecture Reference Manual, “E.b” ed.,
2014.
[12] ARM,
Trustzone,
2015.
http://www.arm.com/products/
processors/technologies/trustzone/
[13] S. Bhatkar, D. DuVarney, and R. Sekar, Address Obfuscation:
An Efﬁcient Approach to Combat a Broad Range of Memory
Error Exploits. USENIX Security Symp., 2003.
[14] S. Bhatkar, D. DuVarney, and R. Sekar, Efﬁcient Techniques
for Comprehensive Protection from Memory Error Exploits,
USENIX Security Symp., 2005.
[15] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen,
and A.-R. Sadeghi, Leakage-resilient layout randomization for
mobile devices, In Network and Distributed Systems Security
Symp. (NDSS), 2016.
[16] F. Brasser, B. El Mahjoub, A.-R. Sadeghi, C. Wachsmann, and
P. Koeberl, Tytan: Tiny trust anchor for tiny devices, In Design
Automation Conf. ACM/IEEE, 2015, pp. 1–6.
[17] bunnie and Xobs, The exploration and explotation of a sd
memory card, In Chaos Computing Congress, 2013.
[18] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brun-
thaler, and M. Payer, Control-Flow Integrity: Precision, Security,
302
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply. 
fense. Springer, 2011, pp. 77–98.
on
Dyn
[39] B.
ter,
ddos-on-dyn-impacts-twitter-spotify-reddit/
Krebs,
DDoS
Spotify, Reddit.
Twit-
https://krebsonsecurity.com/2016/10/
Impacts
[40] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and
D. Song, Code Pointer Integrity, USENIX Symp. on Operating
Systems Design and Implementation, 2014.
[41] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz, SoK:
Automated Software Diversity, IEEE Symp. on Security and
Privacy, pp. 276–291, 2014.
[42] C. Lattner and V. Adve, Llvm: A compilation framework for
lifelong program analysis and transformation, In Intl. Symp.
IEEE, 2004, pp. 75–86.
Code Generation and Optimization.
[43] J. Li, Z. Wang, T. Bletsch, D. Srinivasan, M. Grace, and
X. Jiang, Comprehensive and efﬁcient protection of kernel con-
trol data, IEEE Trans. on Information Forensics and Security,
vol. 6, no. 4, pp. 1404–1417, 2011.
[44] Y. Li, J. M. McCune, and A. Perrig, Viper: Verifying the
integrity of peripherals’ ﬁrmware, In ACM Conf. on Computer
and Communications Security, 2011, pp. 3–16.
[45] S. E. McLaughlin, D. Podkuiko, A. Delozier, S. Miadzvezhanka,
and P. McDaniel, Embedded ﬁrmware diversity for smart elec-
tric meters. In USENIX Work. on Hot Topics in Security, 2010.
[46] B. Niu and G. Tan, Modular control-ﬂow integrity, ACM SIG-
PLAN Notices, vol. 49, no. 6, pp. 577–587, 2014.
[47] J. Pallister, S. J. Hollis, and J. Bennett, BEEBS: open
benchmarks for energy measurements on embedded platforms,
CoRR, vol. abs/1308.5174, 2013.
[48] V. Pappas, M. Polychronakis, and A. D. Keromytis, Smashing
the gadgets: Hindering return-oriented programming using in-
place code randomization, IEEE Symp. on Security and Privacy,
pp. 601–615, 2012.
[49] PaX Team, PaX address space layout randomization (ASLR),
2003. http://pax.grsecurity.net/docs/aslr.txt
[50] G. Ramalingam, The undecidability of aliasing, ACM Trans.
Program. Lang. Syst., vol. 16, no. 5, Sep. 1994.
[51] A.-R. Sadeghi, C. Wachsmann, and M. Waidner, Security and
privacy challenges in industrial internet of things, In Design
Automation Conf. ACM/IEEE, 2015, p. 54.
[52] J. Salwan, ROPgadget - Gadgets Finder and Auto-Roper, 2011.
and Performance, ACM Computing Surveys, vol. 50, no. 1, 2018,
preprint: https://arxiv.org/abs/1602.04056.
[19] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross,
Control-Flow Bending: On the Effectiveness of Control-Flow
Integrity, In SEC: USENIX Security Symposium, 2015.
[20] F. B. Cohen, Operating system protection through program
evolution, Computers and Security, vol. 12, no. 6, pp. 565–584,
oct 1993.
[21] A. Costin, J. Zaddach, A. Francillon, and D. Balzarotti, A
large-scale analysis of the security of embedded ﬁrmwares, In
USENIX Security Symp., 2014, pp. 95–110.
[22] C. Cowan, C. Pu, D. Maier, and J. Walpole, StackGuard:
Automatic Adaptive Detection and Prevention of Buffer-
Overﬂow Attacks. USENIX Security Symp., 1998.
[23] A. Cui and S. J. S. Stolfo, Defending Embedded Systems
with Software Symbiotes, In Intl. Conf. on Recent Advances in
Intrusion Detection. Springer, 2011, pp. 358–377.
[24] L. Davi, M. Hanreich, D. Paul, A.-R. Sadeghi, P. Koeberl,
D. Sullivan, O. Arias, and Y. Jin, Haﬁx: Hardware-assisted ﬂow
integrity extension, In Proceedings of the 52Nd Annual Design
Automation Conference, ser. DAC ’15, 2015, pp. 74:1–74:6.
[25] L. V. Davi, A. Dmitrienko, S. N¨urnberger, and A.-R. Sadeghi,
Gadge Me If You Can, In Symp. on Information, Computer
and Communications Security. ACM Press, 2013, p. 299.
[26] L. Duﬂot, Y.-A. Perez, G. Valadon, and O. Levillain, Can you
still trust your network card, CanSecWest, pp. 24–26, 2010.
[27] K. Eldefrawy, G. Tsudik, A. Francillon, and D. Perito, Smart:
Secure and minimal architecture for (establishing dynamic) root
of trust. In Network and Distributed System Security Symp.,
vol. 12, 2012, pp. 1–15.
[28] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard,
H. Okhravi, and S. Sidiroglou-Douskos, Control jujutsu: On the
weaknesses of ﬁne-grained control ﬂow integrity, In CCS’15:
Conference on Computer and Communications Security, 2015.
[29] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, Jump over
aslr: Attacking branch predictors to bypass aslr, In IEEE/ACM
International Symposium on Microarchitecture (MICRO), 2016.
[30] A. Francillon, Q. Nguyen, K. B. Rasmussen, and G. Tsudik,
A minimalist approach to remote attestation, In Euro. Design,
Automation, and Test. EDAA, 2014, p. 244.
[31] A. Francillon, D. Perito, and C. Castelluccia, Defending
embedded systems against control ﬂow attacks, In ACM Conf.
on Computer and Communication Security, 2009, pp. 19–26.
[32] C. Giuffrida, A. Kuijsten, and A. Tanenbaum, Enhanced
operating system security through efﬁcient and ﬁne-grained
address space randomization. USENIX Security Symp., 2012.
[33] J. Gustafsson, A. Betts, A. Ermedahl, and B. Lisper, The
m¨alardalen wcet benchmarks: Past, present and future, In Open
Access Series in Informatics, vol. 15.
Schloss Dagstuhl-
Leibniz-Zentrum fuer Informatik, 2010.
[34] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin,
T. Mudge, and R. B. Brown, Mibench: A free, commercially
representative embedded benchmark suite, In Intl. Work. on
Workload Characterization.
IEEE, 2001, pp. 3–14.
[35] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and M. Franz,
Proﬁle-guided automated software diversity, In Intl Symp. on
Code Generation and Optimization.
IEEE, 2013, pp. 1–11.
[36] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz, Librando:
Transparent code randomization for just-in-time compilers, In
ACM Conf. on Computer and Communication Security, 2013.
[37] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, and
Z. Liang, Data-oriented programming: On the expressiveness
of non-control data attacks, In IEEE Symp. on Security and
Privacy.
IEEE, 2016, pp. 969–986.
[38] T. Jackson, B. Salamat, A. Homescu, K. Manivannan, G. Wag-
ner, A. Gal, S. Brunthaler, C. Wimmer, and M. Franz,
Compiler-generated software diversity, In Moving Target De-
http://shell-storm.org/project/ROPgadget/
[53] L. Szekeres, M. Payer, and D. Song, SoK: Eternal War in
IEEE, may
Memory, In IEEE Symp. on Security and Privacy.
2013, pp. 48–62.
[54] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, ´U. Erlings-
son, L. Lozano, and G. Pike, Enforcing forward-edge control-
ﬂow integrity in gcc & llvm, In USENIX Security Symp., 2014.
[55] A. van de Ven and I. Molnar, Exec Shield, 2004. https:
//www.redhat.com/f/pdf/rhel/WHP0006US Execshield.pdf
[56] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham,
Efﬁcient software-based fault isolation, In SOSP’03: Symposium
on Operating Systems Principles, 1993.
[57] J. Zaddach, A. Kurmus, D. Balzarotti, E.-O. Blass, A. Francil-
lon, T. Goodspeed, M. Gupta, and I. Koltsidas, Implementation
and implications of a stealth hard-drive backdoor, In Annual
Computer Security Applications Conf., 2013, pp. 279–288.
[58] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, Practical control ﬂow integrity and ran-
domization for binary executables, In IEEE Symp. on Security
and Privacy.
IEEE, 2013, pp. 559–573.
[59] M. Zhang and R. Sekar, Control ﬂow integrity for cots binaries,
In USENIX Security Symp., 2013, pp. 337–352.
[60] V. Zivojnovic, J. M. Velarde, C. Schlager, and H. Meyr, Dsp-
stone: A dsp-oriented benchmarking methodology, In Intl. Conf.
on Signal Processing Applications and Technology, 1994, pp.
715–720.
303
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:08 UTC from IEEE Xplore.  Restrictions apply.