### VII. Related Work

Our work leverages novel privilege overlays to implement established security policies from desktop environments in bare-metal embedded systems. We also tailor several of these protections to the unique constraints of such systems.

Modern desktop operating systems, including Windows, Linux, and macOS, employ a variety of defenses to protect against code injection and control-flow hijacking attacks. These defenses include Data Execution Prevention (DEP) [55], stack canaries [22], Address Space Layout Randomization (ASLR) [49], and multiple levels of execution privileges.

The research community has made significant efforts to develop defenses against control-flow hijacking and data corruption. Key works in this area include Artificial Diversity [20, 36, 13, 14, 35, 32, 38, 41, 48, 25], Control-Flow Integrity (CFI) [9, 43, 58, 59, 46, 18], and Code Pointer Integrity (CPI) [40].

**Artificial Diversity**:
- **Overview**: Artificial Diversity [20] outlines various techniques for creating functionally equivalent but different binaries, which can hinder the scalability of attacks across applications.
- **Survey**: A recent survey [41] provides an in-depth review of over two decades of research in this area.
- **Application**: These techniques are generally applied either by a compiler [36, 13, 14, 35, 32, 38, 45, 15] or through binary rewriting [48, 25].
- **Limitations**: Most of these works target applications supported by an OS and assume the availability of virtual address space to create large entropy. Exceptions include [32, 45, 15], which do not fit well with the constraints of embedded systems.

**Firmware Diversification**:
- **Mclaughlin et al. [45]**: Propose a firmware diversification technique for smart meters using compiler rewriting. They provide analytical results on slowing attack propagation but do not analyze execution time overhead or energy consumption.
- **Giuffrida et al. [32]**: Introduce non-deterministic stack sizes by adding variables to stack frames, which is not suitable for embedded systems.
- **EPOXY**: Applies compile-time diversification and uses techniques appropriate for embedded systems.
- **Braden et al. [15]**: Focus on creating memory leakage-resistant applications without hardware support, using Software Fault Isolation (SFI) to prevent the disclosure of randomized code. Their approach assumes W ⊕ X and is compatible with Memory Protection Units (MPUs).

**Control-Flow Integrity (CFI)**:
- **Overview**: CFI uses control-flow information to ensure that all indirect control-flow transfers end up at valid targets.
- **Challenges**: Precision and performance. While performance overhead has been significantly reduced over time [46, 54], even the most precise CFI mechanisms can be ineffective if an attacker finds a code location that allows enough gadgets to be reached.
- **Embedded Systems**: CFI with custom hardware additions has been implemented on embedded systems [24] with low overhead. Our techniques only require commonly available MPUs.

**Code Pointer Integrity (CPI)**:
- **Overview**: CPI enforces strict integrity of code pointers with low overhead but requires runtime support and virtual memory.
- **Adaptation**: EPOXY leverages SafeStack, an independent component of CPI that protects return addresses on the stack, and adapts it to embedded systems without virtual memory support.

**Other Embedded Security Techniques**:
- **Cui and Stolfo [23]**: Use binary rewriting to inject runtime integrity checks, diversifying code in the process. Their checks are limited to static memory via signatures and assume DEP.
- **Francillon et al. [31]**: Use microcontroller architecture extensions to create a regular stack and a protected return stack. EPOXY also uses a dual stack without additional hardware support.
- **Firmware Integrity Attestation [30, 27, 44, 10]**: Uses software or hardware trust anchors to validate that the firmware and its execution match a known standard. These techniques can enforce our assumption that the firmware is not tampered with at installation.
- **Isolated Computational Environments [16, 4, 7, 1]**: Frameworks like mbedOS [4] and FreeRTOS [1] utilize MPUs to isolate OS context from application context. TyTan [16] and mbed μVisor [7] enable sandboxing between different tasks in a bare-metal system, requiring applications to be developed using their respective APIs.
- **ARM’s TrustZone [12]**: Provides hardware to divide execution between untrusted and trusted environments. However, the ARMv7-M architecture does not include this feature.

### VIII. Discussion

**Real-Time Systems**:
- The diversity techniques we employ introduce some non-determinism between variants, which may make them unsuitable for real-time systems with strict timing requirements. However, the variability is low (a few percent), making our techniques applicable to a wide range of devices, particularly IoT devices, which generally have soft real-time constraints. Further reducing variability is an area of future work, involving more deterministic compiler actions.

**Protecting Inputs and Outputs**:
- We demonstrated EPOXY's ability to protect the lock actuator on PinLock. Protecting Ethernet and SD interfaces is conceptually similar, involving reads and writes to IO registers. However, the Hardware Abstraction Layer (HAL) for these interfaces uses long indirection chains, making manual annotation challenging. Extending our analysis to be inter-procedural will allow us to handle these complex IO patterns.

**Use with Lightweight OSs**:
- EPOXY can be extended to apply its protections to lightweight OSs like FreeRTOS. Our diversity techniques are directly usable as they do not change any calling conventions. Privilege Overlays require the use of a system call, and care must be taken to ensure one is reserved. Currently, SVC FE is used, which can be changed to a compile-time parameter. To apply SafeStack, EPOXY needs to know the number of threads created and how to initialize each unsafe stack. This can be achieved by making EPOXY aware of the OS thread creation functionality, so it can set up both stacks. The OS's context switch would also need to be modified to save and restore separate unsafe stack guards for each thread. With these changes, EPOXY could apply its defenses to systems using a lightweight OS.

### IX. Conclusion

Bare-metal systems typically lack modern security protections like DEP and control-flow hijack protections due to the dichotomy in their development: all memory is executable and accessible to simplify system development, but security principles dictate restricting some of their use at runtime. We propose EPOXY, which uses a novel technique called privilege overlaying to solve this dichotomy. It applies protections against code injection, control-flow hijacking, and data corruption attacks in a system-specific way. A performance evaluation of our prototype implementation shows that these defenses are effective and result in negligible execution and power overheads. The open-source version of EPOXY is available at https://github.com/HexHive/EPOXY.

### Acknowledgments

We thank the anonymous reviewers for their insightful comments and Brandon Eames for his informative feedback. This material is based in part upon work supported by the National Science Foundation under Grant Numbers CNS-1464155 and CNS-1548114. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation. This work is also funded by Sandia National Laboratories, managed and operated by Sandia Corporation, a wholly owned subsidiary of Lockheed Martin Corporation, for the U.S. Department of Energy's National Nuclear Security Administration under contract DE-AC04-94AL85000.