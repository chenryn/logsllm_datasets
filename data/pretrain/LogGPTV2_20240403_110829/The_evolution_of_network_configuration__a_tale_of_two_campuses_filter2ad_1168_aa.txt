title:The evolution of network configuration: a tale of two campuses
author:Hyojoon Kim and
Theophilus Benson and
Aditya Akella and
Nick Feamster
The Evolution of Network Conﬁguration:
A Tale of Two Campuses
Hyojoon Kim
Georgia Tech
Atlanta, GA, USA
PI:EMAIL
Theophilus Benson
University of Wisconsin
Madison, WI, USA
PI:EMAIL
Nick Feamster
Georgia Tech
Atlanta, GA, USA
PI:EMAIL
Aditya Akella
University of Wisconsin
Madison, WI, USA
PI:EMAIL
ABSTRACT
1.
INTRODUCTION
Studying network conﬁguration evolution can improve our under-
standing of the evolving complexity of networks and can be helpful
in making network conﬁguration less error-prone. Unfortunately,
the nature of changes that operators make to network conﬁguration
is poorly understood. Towards improving our understanding, we
examine and analyze ﬁve years of router, switch, and ﬁrewall con-
ﬁgurations from two large campus networks using the logs from
version control systems used to store the conﬁgurations. We study
how network conﬁguration is distributed across different network
operations tasks and how the conﬁguration for each task evolves
over time, for different types of devices and for different loca-
tions in the network. To understand the trends of how conﬁgura-
tion evolves over time, we study the extent to which conﬁguration
for various tasks are added, modiﬁed, or deleted. We also study
whether certain devices experience conﬁguration changes more fre-
quently than others, as well as whether conﬁguration changes tend
to focus on speciﬁc portions of the conﬁguration (or on speciﬁc
tasks). We also investigate when network operators make conﬁgu-
ration changes of various types. Our results concerning conﬁgura-
tion changes can help the designers of conﬁguration languages un-
derstand which aspects of conﬁguration might be more automated
or tested more rigorously and may ultimately help improve conﬁg-
uration languages.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Opera-
tions—Network management
General Terms
Management, Measurement
Keywords
Network conﬁguration, Network evolution, Longitudinal analysis
The behavior of a communications network depends in part on
the conﬁguration of thousands of constituent network devices, each
of which is conﬁgured independently. In this sense, network con-
ﬁguration is a large, distributed program. Despite its importance
in dictating the overall behavior of the network, we understand
very little about the nature of conﬁguration. Today, network opera-
tors implement high-level network tasks with low-level conﬁgura-
tion commands; operators frequently make mistakes when making
changes to network conﬁguration [6, 14]. Although some studies
have examined properties of conﬁguration “snapshots” (e.g., [15]),
we have little understanding of how network conﬁguration evolves
over time.
Studying the evolution of network conﬁguration over time can
offer unique insights that cannot be learned from a single static
snapshot. First, such a study can shed light on how network func-
tions evolve over time:
for example, we can learn more about
how network conﬁguration evolves, and which network tasks con-
tribute to the growth in complexity. Second, because conﬁgura-
tion changes are the cause of many errors, understanding the nature
of how conﬁguration changes over time—and what tasks conﬁg-
uration changes are associated with—can better inform conﬁgura-
tion testing by helping create targeted test cases. Third, knowledge
about conﬁguration changes also offers valuable information about
the parts of network conﬁguration where operators spend time,
which may help designers of conﬁguration languages and conﬁg-
uration management systems design a better environment to make
these tasks easier.
Towards these goals, this paper presents the ﬁrst long-term lon-
gitudinal study of the evolution of network conﬁguration, for two
large campus networks: Georgia Tech and the University of Wis-
consin. Comparing the evolution of network conﬁguration across
two different large campuses allows us to identify trends that are
common across campuses, as well as practices that are speciﬁc to
a particular network. We study the changes that operators make
to the conﬁgurations of all routers, switches, and ﬁrewalls in these
networks over a ﬁve-year period. We study the following questions:
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’11, November 2–4, 2011, Berlin, Germany.
Copyright 2011 ACM 978-1-4503-1013-0/11/11 ...$10.00.
• How does network conﬁguration size evolve over time? How
many of the changes are additions, modiﬁcations, or dele-
tions? Do changes tend to occur at a speciﬁc time of day or
day of the week?
• Which network-wide factors contribute most to conﬁguration
evolution?
499• What parts of the conﬁguration change most frequently, and
why?
• Are there dependencies and correlations in changes to net-
work conﬁguration, and why?
We perform our analysis on two campus networks. Although the
results may not generalize beyond these two campuses, they repre-
sent a case study and a ﬁrst attempt to perform extensive longitu-
dinal analysis on campus networks. Our study also complements
previous studies, which have focused on enterprise and backbone
networks [7, 18].
We ﬁnd that conﬁgurations continue to grow over time, and a
variety of factors—infrequent ones, such as, infrastructure expan-
sion and policy changes, and more frequent ones, such as customer
addition/modiﬁcation—contribute in interesting ways to conﬁgu-
ration evolution. We ﬁnd that routers experience conﬁguration
changes more frequently, and that changes to routers involve a
broader range of network conﬁguration tasks than the changes that
operators make to switch and ﬁrewall conﬁgurations. Given that
there are far fewer routers than ﬁrewalls or switches in both net-
works, the relative frequency of conﬁguration changes to routers
highlights that many crucial day-to-day network operations tasks
center around router conﬁgurations. Third, although there are many
similarities in the conﬁgurations between the two campuses—both
in the amount of conﬁguration devoted to each conﬁguration task
and to the nature of the conﬁguration changes—the network op-
erators for each campus do have distinct practices (e.g., the use
of static ARP entries) that tend to appear on more general pur-
pose devices, such as core routers.
In contrast, devices that are
more special-purpose such as ﬁrewalls tend to exhibit more com-
mon conﬁguration change patterns. Finally, we note that conﬁg-
uration changes to switches and routers are sometimes correlated,
suggesting the possibility for better conﬁguration tools that can as-
sist operators by automatically recognizing these dependencies.
Our ﬁndings suggest possible areas for improvement in conﬁg-
uration management and testing. For example, our ﬁndings con-
cerning correlated changes across conﬁgurations can suggest im-
provements to the conﬁguration process: a conﬁguration manage-
ment system could observe correlations in conﬁguration changes
and suggest changes that operators might make to low-level conﬁg-
uration constructs based on observations of past correlated changes
for different high-level tasks. The management system can simi-
larly help with debugging erroneous changes to conﬁguration. Our
observations regarding the high frequency of router conﬁguration
updates—which are often manual and hence error-prone—suggest
the need for automated network-wide conﬁguration management
systems targeted speciﬁcally toward routers.
The rest of the paper is organized as follows. Section 2 presents
background on network conﬁguration, and on the conﬁguration
management systems used to make changes to network conﬁgura-
tion. Section 3 describes the datasets that we use for this study and
our approach. Section 4 describes our results for routers, switches,
and ﬁrewalls. In each case, we observe characteristics for a snap-
shot of the network conﬁguration; we also perform a longitudinal
analysis of conﬁguration changes over the ﬁve years of our study.
Section 5 discusses possible future research directions for our re-
sults, including suggestions for how they might be used to improve
conﬁguration management and testing. Section 6 concludes.
2. BACKGROUND AND RELATED WORK
We use an archived history of network conﬁguration ﬁles to an-
alyze the nature and causes of conﬁguration changes to switches,
routers, and ﬁrewalls in the Georgia Tech and University of Wis-
5 1 5 : 0 4 : 2 8 EST 2010
p o r t − o b j e c t
r a n g e b o o t p s b o o t p c
a160 4
o b j e c t − g r o u p s e r v i c e 12−123−12−13−any−udp udp
p o r t − o b j e c t
r a n g e b o o t p s b o o t p c
t e x t
. . .
1 . 5 1
l o g
1
2
3
4 @Fri Feb
5 @
6
7 @a141 1
8
9
10
11
12
13
14
15
16
17
18
19
20 @
o b j e c t − g r o u p s e r v i c e 12−123−12−14−any−udp udp
p o r t − o b j e c t
r a n g e b o o t p s b o o t p c
d173 16
a188 9
o b j e c t − g r o u p s e r v i c e 13−14−15−16−any−udp udp
p o r t − o b j e c t
r a n g e b o o t p s b o o t p c
o b j e c t − g r o u p s e r v i c e 14−15−16−17−any−udp udp
. . .
Figure 1: RCS ﬁle showing changes to network conﬁguration.
consin campus networks. In this section, we describe the common
conﬁguration management systems used by the networks studied.
2.1 Conﬁguration Management
Both campus networks use a conﬁguration management tool
called RANCID [17] for tracking and monitoring network device
conﬁgurations. RANCID’s main function is to construct a catalog
of devices, pull the current conﬁgurations, and store them in a ver-
sion control system, which can allow network operators to track
changes in the conﬁgurations to network devices. In addition to
device conﬁgurations, RANCID also pulls hardware information
(e.g., cards, serial numbers). RANCID operates with devices from
many vendors, including Cisco, Juniper, Foundry, and HP. More
details can be found on the RANCID Web site [17].
In addition to accepting input from RANCID, the version control
system also allows network operators to manually checkpoint and
commit changes to the repository. Just as programmers use revision
control to track changes to source code, network operators have
adopted revision control to manage network devices by tracking
changes to device conﬁguration ﬁles. The CVS repository tracks
changes by giving each revision of the conﬁguration ﬁle a unique
revision number and by storing metadata along with this revision,
such as the time of change, comment, author of the change, and the
sets of lines changed.
CVS stores all the metadata along with revisions for each conﬁg-
uration ﬁle in a single Revision Control System (RCS) ﬁle. Figure 1
shows an excerpt from an RCS ﬁle. The current revision number
is on the top (line 2), followed by log (lines 3–5), which contain
comments provided by the operator or RANCID explaining the na-
ture and cause of the change (the revision date in this case). The
text (lines 6–20) lines document the location, number and nature of
the change; these lines allow us to track additions and deletions to
the network conﬁguration. We interpret an addition immediately
followed by a deletion as a modiﬁcation if the sum of the line num-
ber and the number of line changes of deletion is equal to the line
number of addition added by one. For example, in Figure 1, lines
14–15 shows a modiﬁcation (173+16 = 188+1).
2.2 Related Work
We provide a brief overview of related work. We ﬁrst discuss
various prior work on static analysis of network conﬁguration to
better understand network properties and to characterize or diag-
nose network conﬁgurations. Although the networking community
500has seen only limited work on analyzing conﬁguration changes, the
software engineering community has performed extensive studies
of changes to source code that relate to our study.
Static analysis. Previous work has performed static analysis of
network conﬁgurations to study network properties and to help net-
work operators diagnose misconﬁgurations in their networks. Cald-
well et al. propose a system to automatically discover conﬁguration
templates and rules [2]. Maltz et al. performed a study of many en-
terprise network conﬁgurations to gain insights about the design
and use of network conﬁguration in enterprise networks [15]. The
rcc tool performs network-wide static analysis of router conﬁgu-
rations to detect conﬁguration errors in BGP [6]. There is much
other previous work on identifying and detecting misconﬁgura-
tion [10,14], but these tools focus on static analysis. Other work has
used static analysis of router conﬁguration to understand how oper-
ators conﬁgure speciﬁc functions (e.g., route redistribution [12] and
access control [19]), as well as to identify sources of conﬁguration
complexity [1]. The NetDB system pulled router conﬁgurations
from the AT&T backbone network into a database for analysis of
conﬁguration snapshots [7]. Gottlieb et al. used NetDB to perform
static analysis of network conﬁguration to discover and construct
conﬁguration templates to help network operators automatically
conﬁgure new sessions for ISP customers [8]; a follow-up system,
Presto, constructs network conﬁgurations based on conﬁguration
templates [5]. These systems rely on operators to manually specify
network conﬁguration templates; ultimately, the type of analysis
we perform in this study might help automatically identify com-
mon tasks and conﬁguration idioms that could be automated.
Dynamic analysis. Other projects have explored the changes in
conﬁguration over time, albeit for smaller sets of network conﬁg-
uration, or over shorter periods of time. Sung et al. examined
changes in stanzas over time for ﬁve enterprises VPN customers.
They study which sets of stanzas change most often [18]. Chen
et al. also examine the dependencies between conﬁguration stan-
zas by analyzing changes [3]. Le et al. [11] aim to automatically
generate rules to determine commands that a given stanza should
contain. This approach requires pre-processing and domain knowl-
edge to determine how to represent the commands as attributes of
stanza; it also does not explore conﬁguration changes over time.
Mining software repositories. The ﬁeld of software repository
mining, a sub-area of software engineering, mines version control
systems to discover artifacts that are produced and archived during
the evolution of a software program. Several studies have explored
the longitudinal evolution of software. Lehman et al. studied the
evolution of source code in several IBM products between 1969
and 2001 [13]. Eick et al. studied the phenomenon of code de-
cay, whereby changes to a software system become increasingly
difﬁcult over its lifetime [4]. Those studying changes to software
repositories focus on both changes to high-level properties, such
as software complexity or maintainability; and on changes to ar-
tifacts, which is typically done by analyzing differences between
versions in the version control system itself. A speciﬁc approach
to mining software repositories called source code differencing, pi-
oneered by Raghavan et al., examines difference data in software
repositories to look for additions, deletions, and modiﬁcations to
source code over time [16]. This approach is similar to that which
we take in this paper, where we explore additions, deletions, and
modiﬁcations to network conﬁguration ﬁles to understand changes
to software artifacts. Kagdi et al. provide an excellent survey and
taxonomy of the large body of work in mining software reposito-
ries [9].
Routers
Firewalls
Switches
Georgia Tech
Wisconsin
16
53
365
325
716
1246
Total
1097
1624
Table 1: Number of devices for each device type.
3. DATA AND ANALYSIS
We describe the conﬁguration data that we use in our study and
our approach for postprocessing and analyzing the data.
3.1 Data
Both Georgia Tech (GT) and University of Wisconsin (UW) man-
age their network conﬁgurations with RANCID and CVS, the tools
described in the previous section. We have collected ﬁve years of
archived conﬁguration ﬁles from all network devices (i.e., routers,
ﬁrewalls, and switches) in the two networks. Table 1 shows the
number of network devices currently deployed in both networks
for each device type. We note that both networks comprise mostly
Cisco devices; conﬁgurations are stored in the RCS format. Our
analysis tools thus focus on parsing Cisco’s conﬁguration language
and the RCS format. The border routers in both networks are Ju-
niper routers. Because the conﬁguration language syntax differs
signiﬁcantly from Cisco’s conﬁguration language, we omit the bor-
der routers from our analysis for both networks. We now describe
the design of each network and how they use RANCID and CVS in
more detail.
Georgia Tech. Figure 2a shows the topology of the Georgia Tech
network. The Internet connection originates from two multi-homed
border routers; two physical ﬁrewalls are deployed close to the bor-
der. Departments, research groups, and residence halls are divided
into separate subnets and assigned unique virtual LANs (VLANs).
Each subnet has different access control policies, enforced with a
separate virtual ﬁrewall. The network has hundreds of virtual ﬁre-
wall instances that are not shown in the ﬁgure. Hosts are connected
to the network via switches at the edge. RANCID pulls the lat-
est conﬁguration ﬁles every three hours and saves the snapshot of
the ﬁles. A CVS “commit” only occurs when the system detects
a change in the latest conﬁguration. In this network, the operators
rarely make manual backups of the conﬁgurations; as such, most
revisions in the repository are created by RANCID.
University of Wisconsin. The UW network, shown in Figure 2b,
is similar to GT in many aspects; like the GT network, the UW net-
work topology is hierarchical, with Internet trafﬁc entering through
two border routers and redirected through two major border ﬁre-
walls for access control. Border routers are distinct from core rou-
ters, and they reside one level higher than the core routers. Fig-
ure 2b does not show the border routers. The UW network con-
tains four tiers: the core and node layers, which primarily com-
prises routers; and the radial and access layers, primarily com-
prising switches. The access switches connect computers in the
different departments to the network. Unlike GT, the RANCID
setup at UW pulls snapshots for only ﬁrewall conﬁgurations. Simi-
larly, commits to ﬁrewall conﬁguration ﬁles only happen when the
system detects a change to the latest conﬁguration. Operational
policies and tools at UW force operators to manually snapshot and
commit all other conﬁguration changes before they can be pushed
to the devices. As such, most revisions are created by operators.
This different approach does not affect our results, as it simply re-
ﬂects a difference in the mechanism on who pulls snapshots, detects
changes and commits to the repository.
501Meaning
device management
settings
interface/port settings
layer 2 settings
mgt
l1
l2
vlan VLAN settings
l3
layer 3 related
acl
access control
sec
security related
cﬂt
qos
control ﬁltering
QoS
(a) Georgia Tech
bandwidth,
Examples
username, password,
telnet, ssh,
logging, aaa, clock, console, radius-
server
interface deﬁnition,
switchport, description, duplex
arp x.x.x.x, mac-address, ip proxy-
arp, arp timeout, spanning-tree
vlan deﬁnition, switchport mode
trunk, switchport mode access vlan,
set vtp, set vmps
ip address x.x.x.x ,
ip gateway
x.x.x.x, ip route x.x.x.x, nat, router
bgp/ospf/rip, router-id, neighbor
object deﬁne, access-list, permit,
deny
vpn, ipsec, crypto, webvpn, any-
connect, ssl,
tunnel-group, ﬂood-
guard
preﬁx-list
policy-map,
service-
policy, port-channel load-balance,
set qos
class-map,
Table 2: Functionality map. We map each command to a speciﬁc
functionality to effectively analyze conﬁguration ﬁles.
checksum values, comments, banners, start/end markers, and ver-
sion info). Although not complete, we believe our functionality
map is extensive enough to cover 93% of all conﬁguration com-
mands and 91% of all conﬁguration changes in University of Wis-
consin, and 98% of all commands and changes in Georgia Tech,
thus complete enough to shed light on how operators devote time
to various high-level tasks.
To abstract conﬁguration changes that involve multiple lines of
conﬁguration, we group conﬁguration into stanzas, each of which
is the largest contiguous block of commands that encapsulate a
piece of the network functionality. Cisco’s conﬁguration language
provides special symbols (“!”) for separating stanzas. We analyze
conﬁguration changes according to how stanzas change in total.
3.2.2 Change analysis
After developing abstractions for the conﬁguration tasks and
grouping conﬁguration commands by stanza, we perform three
types of analysis on the conﬁguration changes to better understand
how conﬁguration evolves over time:
• Snapshot and change analysis. As a baseline for understand-
ing the composition of network conﬁguration in the two net-
works, we analyze a snapshot of the network conﬁguration
for each network and examine the number of lines of con-
ﬁguration devoted to each function. To understand where
operators devote their efforts when modifying network con-
ﬁguration, we then study the extent to which network conﬁg-
uration changes are associated with different functions that
the conﬁguration performs. We also explore how many of
the changes corresponded to additions, deletions, and modi-
ﬁcations. We use a Python library called difﬂib to infer what
constitutes an addition, deletion, or modiﬁcation, by com-
paring two consecutive revisions and producing a “diff” in a
context format. We evaluate the size of the diff in terms of
number of lines. We assume the library is able to correctly
identify additions, deletions, and modiﬁcations. We also cor-
relate the line number difference from the ﬁrst version to the
(b) University of Wisconsin
Figure 2: GT and UW campus networks.
3.2 Analysis
We analyze the evolution of network conﬁguration changes by
analyzing the RCS ﬁles for changes and extracting information
about how each conﬁguration ﬁle changes over time. This section
describes our analysis, which has two major parts: (1) abstracting
higher-level operator tasks from low-level conﬁguration changes;
(2) performing change analysis on the RCS ﬁles.
3.2.1 Developing abstractions for functionality
The ﬁrst task in analyzing the network conﬁguration is to derive
abstractions of high-level functions and tasks from low-level con-
ﬁguration commands. This helps us more readily identify the types
of tasks that network operators most commonly perform when
making changes to the network conﬁguration and the amount of