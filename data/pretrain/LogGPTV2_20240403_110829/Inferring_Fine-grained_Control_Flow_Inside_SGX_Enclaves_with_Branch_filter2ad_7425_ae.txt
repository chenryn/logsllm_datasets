Data-oblivious machine learning algorithms et al. [39]
eliminate all branches by using a conditional move in-
struction, CMOV. However, their approach is algorithm-
specific, i.e., it is not applicable to general applications.
Raccoon [44] always executes both paths of a conditional
branch, such that no branch history will be leaked. But,
its performance overhead is high (21.8×).
Zigzagger. We propose a practical, compiler-based mit-
igation against branch shadowing, called Zigzagger. It
obfuscates a set of branch instructions into a single indi-
rect branch, as inferring the state of an indirect branch is
more difficult than inferring those of conditional and un-
conditional branches (§3.5). However, it is not straightfor-
ward to compute the target block of each branch without
relying on conditional jumps because conditional expres-
sions could become complex because of nested branches.
In Zigzagger, we solved this problem by using a CMOV
instruction [39, 44] and introducing a sequence of non-
conditional jump instructions in lieu of each branch.
Figure 10 shows how Zigzagger transforms an exam-
ple code snippet having if, else-if, and else blocks. It
(a) An example code snippet. It selectively executes a branch
block according to a and b variables.
(b) The protected code snippet by Zigzagger. All branch instruc-
tions are executed regardless of a and b variables. An indirect
branch in the trampoline and CMOVs in the translated code are
used to obfuscate the final target address. r15 is reserved to
store the target address.
Figure 10: An example of Zigzagger transformation.
converts all conditional and unconditional branches into
unconditional branches targeting Zigzagger’s trampoline,
which jumps back-and-forth with the converted branches.
The trampoline finally jumps into the real target address
stored in a reserved register r15. Note that reserving a
register is only for improving performance. We can use
the memory to store the target address when an applica-
tion needs to use a large number of registers. To emulate
conditional execution, the CMOV instructions in Figure 10b
update the target address in r15 only when a or b is zero.
Otherwise, they are treated as NOP instructions. Since all
of the unconditional branches are executed almost simul-
taneously in sequence, recognizing the current instruction
pointer is difficult. Further, since the trampoline now
has five different target addresses, inferring real targets
among them is not straightforward.
Zigzagger’s approach has several benefits: 1) security:
it provides the first line of protection on each branch block
in an enclave program; 2) performance: its overhead is at
most 2.19× (Table 5); 3) practicality: its transformation
demands neither complex analysis of code semantics nor
heavy code changes. However, it does not ensure perfect
security such that we still need ORAM-like techniques to
protect very sensitive functions.
Implementation. We implemented Zigzagger in LLVM
4.0 as an LLVM pass that converts branches in each func-
tion and constructs the required trampoline. We also mod-
568    26th USENIX Security Symposium
USENIX Association
cmp $0, $aje block2jmp block5cmp $0, $bje block4jmp block5if (a != 0) {  }else if (b != 0) {  }else {  } block3:block1:block2:block5:block0:block4:mov $block1, r15cmp $0, $acmov $block2, r15jmp zz1mov $block5, r15jmp zz2mov $block3, r15cmp $0, $bcmov $block4, r15jmp zz3mov $block5, r15jmp zz4block0:block0.j:block1.j:block1:block2.j:block2:block3.j:block3:block5:block4:Zigzagger's trampolinezz1:jmp block1.jzz2:jmp block2.jzz3:jmp block3.jzz4:jmpq *r15Zigzagger
#Branches (overhead)
5
3
4
Benchmark
Baseline
(iter/s)
2
967.25
682.31
4.5E+08
96.204
54982
35.73
10,378
2478.1
16.554
1,130
numeric sort
string sort
bitfield
fp emulation
fourier
assignment
idea
huffman
neural net
lu decomposition
All
1.05× 1.11× 1.12× 1.13× 1.15×
1.08× 1.15× 1.18× 1.15× 1.27×
1.03× 1.10× 1.14× 1.18× 1.31×
1.10× 1.21× 1.15× 1.27× 1.35×
0.99× 0.99× 1.01× 1.01× 1.01×
1.36× 1.56× 1.50× 1.55× 1.90×
2.16× 2.16× 2.18× 2.19× 2.19×
1.59× 1.46× 1.61× 1.63× 1.81×
0.75× 0.77× 0.85× 0.86× 0.89×
1.04× 1.09× 1.08× 1.11× 1.17×
1.17× 1.22× 1.24× 1.26× 1.34×
GEOMEAN
Table 5: Overhead of the Zigzagger approach according to the
number of branches belonging to each Zigzagger.
ified the LLVM backend to reserve a register. The number
of branches a single trampoline manages affects the over-
all performance, so our implementation provides a knob
to configure it to trade the security for performance.
Our proof-of-concept implementation of Zigzagger,
merging every branch in each function, imposed a 1.34×
performance overhead when evaluating it with the nbench
benchmark suite (Table 5). With optimization (i.e., merg-
ing ≤ 3 branches into a single trampoline), the average
overhead became ≤ 1.22×. Note that reserving a register
resulted in a 4%–50% performance improvement.
6 Discussion
In this section, we explain some limitations of the
branch shadowing attack and discuss possible advanced
attacks.
6.1 Limitations
The branch shadowing attack has limitations. First, it
cannot distinguish a not-taken conditional branch from a
not-executed conditional branch because, in both cases,
the BTB stores no information; the static branch pre-
diction rule is applied. Second, it cannot distinguish an
indirect branch to the next instruction from a not-executed
indirect branch because their predicted branch targets are
the same. Therefore, an attacker has to probe a number
of correlated branches (e.g., unconditional branches in
else-if or case blocks) to overcome these limitations.
Third, as with the controlled-channel attack, the branch
shadowing attack needs repetitions to increase attack ac-
curacy, which can be prohibited by a state continuity solu-
tion [55]. However, this requires persistence storage such
as that provided by a trusted platform module (TPM).
6.2 Advanced Attacks
We consider how branch shadowing can be improved:
hyperthreading and blind approaches.
Hyperthreaded branch shadowing. Since two hyper-
threads simultaneously running in the same physical core
share the BTB and BPU, a malicious hyperthread can
attack a victim enclave hyperthread by using BTB entry
conflicts if a malicious OS gives the address information
of the victim to it. We observed that branch instructions
with the same low 16-bit address were mapped into the
same BTB set. Thus, a malicious hyperthread can mon-
itor a BTB set for evictions by filling the BTB set with
four branch instructions (§5.1). The BTB flushing cannot
prevent this attack because it demands no enclave mode
switch, so disabling hyperthreading or preventing the hy-
perthreads from sharing the BTB and BPU is necessary.
Blind branch shadowing. A blind branch shadowing
attack is an attempt to probe the entire or selected memory
region of a victim enclave process to detect any unknown
branch instructions. This attack would be necessary if a
victim enclave process has self-modifying code or uses
remote code loading, though this is outside the scope
of our threat model (§3.1). In the case of unconditional
branches, blind probing is easy and effective because it
does not need to infer target addresses. However, in the
case of conditional and indirect branches, blind probing
needs to consider branch instructions and their targets
simultaneously such that the search space would be huge.
We plan to consider an effective method to minimize the
search space to know whether this attack is practical.
7 Related Work
Intel SGX. The strong security guarantee provided
by SGX has drawn significant attention from the re-
search community. Several security applications of
SGX are proposed, including secure and distributed data
analysis [7, 11, 39, 46, 66] and secure networking ser-
vice [31, 41, 48]. Also, researchers implemented SGX
layers [5, 6, 51, 57] to run existing applications inside an
enclave without any modifications. The security proper-
ties of SGX itself are also being intensively studied. For
example, Sinha et al. [52, 53] develop tools to verify the
confidentiality of enclave programs.
However, researchers find security attacks against Intel
SGX. Xu et al. [60] and Shinde et al. [50] demonstrate the
first side-channel attack on SGX by leveraging the fact
that SGX relies on an OS for memory resource manage-
ment. The attack is done by intentionally manipulating the
page table to trigger a page fault and using a page-fault
sequence to infer the secret inside an enclave. Weich-
brodt et al. [59] also show how a synchronous bug can
be exploited to attack SGX applications. Further, concur-
rently with our work, Hähnel et al. [21] exploit a frequent
timer in Windows to realize a precise cache side-channel
attack against the Intel SGX simulator.
To address the page-fault-based side-channel attack,
Shinde et al. [50] obfuscate the memory access pattern of
an enclave. Shih et al. [49] propose a compiler-based solu-
tion using Intel TSX to detect suspicious page faults inside
an enclave. Also, Costan et al. [10] propose a new en-
USENIX Association
26th USENIX Security Symposium    569
clave design to prevent both page-fault and cache-timing
side-channel attacks. Finally, Seo et al. [47] enforce fine-
grained ASLR on enclave programs, which can raise the
bar of exploiting any vulnerabilities and inferring control
flow with page-fault sequences. However, all of these
solutions heavily use branch instructions and do not clear
branch states, such that they would be vulnerable to our
attack.
Microarchitectural side channel.
Researchers con-
sidered the security problems of microarchitectural side
channels. The most popular and well-studied microar-
chitectural side channel is a CPU cache timing channel
first developed by [29, 34, 40] to break cryptosystems.
This attack is further extended to be conducted in the
public cloud setting to recognize co-residency of virtual
machines [45, 64]. Several researchers further improved
this attack to exploit the last level cache [27, 35] and cre-
ate a low-noise cache storage channel [19]. The CPU
cache is not the sole source of the microarchitectural side
channel. For example, to break kernel ASLR, researchers
exploit a TLB timing channel [23], an Intel TSX instruc-
tion [28], a PREFETCH instruction [18], and a BTB timing
channel [13]. Ge et al. [14] conducted a comprehensive
survey of microarchitectural side channels.
8 Conclusion
A hardware-based TEE such as Intel SGX demands
thorough analysis to ensure its security against hostile
environments. In this paper, we presented and evaluated
the branch shadowing attack, which identifies fine-grained
execution flows inside an SGX enclave. We also proposed
hardware-based countermeasure that clears the branch
history during enclave mode switches and software-based
mitigation that makes branch executions oblivious.
Responsible disclosure. We reported our attack to Intel
and discussed with them to find effective solutions against
it. Also, after having a discussion with us, the authors of
Sanctum [10] revised their eprint paper that coped with
our attack.
Acknowledgments. We thank the anonymous reviewers
for their helpful feedback. This research was supported
by the NSF award DGE-1500084, CNS-1563848, CRI-
1629851 ONR under grant N000141512162, DARPA
TC program under contract No. DARPA FA8650-15-C-
7556, DARPA XD3 program under contract No. DARPA
HR0011-16-C-0059, and ETRI MSIP/IITP[B0101-15-
0644].
References
[1] The BTB in contemporary Intel chips—Matt Godbolt’s blog.
http://xania.org/201602/bpu-part-three. (Accessed on
11/10/2016).
[2] Kernel self protection project - Linux kernel security sub-
system. https://kernsec.org/wiki/index.php/Kernel_
Self_Protection_Project.
[3] ACIICMEZ, O., KOC, K., AND SEIFERT, J. On the power of
In Proceedings of the 2nd
simple branch prediction analysis.
ACM Symposium on Information, Computer and Communications
Security (ASIACCS) (2007).
[4] ARM. ARM TrustZone. https://www.arm.com/products/
security-on-arm/trustzone.
[5] ARNAUTOX, S., TARCH, B., GREGOR, F., KNAUTH, T.,
MARTIN, A., PRIEBE, C., LIND, J., MUTHUKUMARAN, D.,
O’KEEFFE, D., STILLWELL, M. L., GOLTZSCHE, D., EYERS,
D., KAPITZA, R., PIETZUCH, P., AND FETZER, C. SCONE:
Secure Linux containers with Intel SGX. In Proceedings of the
12th USENIX Symposium on Operating Systems Design and Im-
plementation (OSDI) (Savannah, GA, Nov. 2016).
[6] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding appli-
cations from an untrusted cloud with Haven. In Proceedings of
the 11th USENIX Symposium on Operating Systems Design and
Implementation (OSDI) (Broomfield, Colorado, Oct. 2014).
[7] BRENNER, S., WULF, C., LORENZ, M., WEICHBRODT, N.,
GOLTZSCHE, D., FETZER, C., PIETZUCH, P., AND KAPITZA, R.
SecureKeeper: Confidential ZooKeeper using Intel SGX. In Pro-
ceedings of the 16th Annual Middleware Conference (Middleware)
(2016).
[8] BRUMLEY, D., AND BONEH, D. Remote timing attacks are
practical. In Proceedings of the 12th USENIX Security Symposium
(Security) (Washington, DC, Aug. 2003).
[9] CHECKOWAY, S., AND SHACHAM, H. Iago attacks: Why the sys-
tem call API is a bad untrusted RPC interface. In Proceedings of
the 18th ACM International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS)
(Houston, TX, Mar. 2013).
[10] COSTAN, V., LEBEDEV, I., AND DEVADAS, S. Sanctum: Mini-
mal hardware extensions for strong software isolation. In Proceed-
ings of the 25th USENIX Security Symposium (Security) (Austin,
TX, Aug. 2016).
[11] DINH, T. T. A., SAXENA, P., CANG, E.-C., OOI, B. C., AND
ZHANG, C. M2R: Enabling stronger privacy in MapReduce com-
putation. In Proceedings of the 24th USENIX Security Symposium
(Security) (Washington, DC, Aug. 2015).
[12] EVTYUSHKIN, D., PONOMAREV, D., AND ABU-GHAZALCH, N.
Covert channels through branch predictors: A feasibility study. In
Proceedings of the 4th Workshop on Hardware and Architectural
Support for Security and Privacy (HASP) (2015).
[13] EVTYUSHKIN, D., PONOMAREV, D., AND ABU-GHAZALCH,
N.
Jump over ASLR: Attacking branch predictors to bypass
ASLR. In Proceedings of the 49th Annual IEEE/ACM Interna-
tional Symposium on Microarchitecture (MICRO) (Taipei, Taiwan,
Oct. 2016).
[14] GE, Q., YAROM, Y., COCK, D., AND HEISER, G. A survey of
microarchitectural timing attacks and countermeasures on contem-
porary hardware. Cryptology ePrint Archive, Report 2016/613,
2016. http://eprint.iacr.org/2016/613.pdf.
[15] GIUFFRIDA, C., KUIJSTEN, A., AND TANENBAUM, A. S.
Enhanced operating system security through efficient and fine-
In Proceedings of the
grained address space randomization.
21st USENIX Security Symposium (Security) (Bellevue, WA, Aug.
2012).
[16] GRANCE, T., AND JANSEN, W. Guidelines on security and
privacy in public cloud computing. https://www.nist.gov/
node/591971.
[17] GRUBBS, P., MCPHERSON, R., NAVEED, M., RISTENPART, T.,
AND SHMATIKOV, V. Breaking web applications built on top of
encrypted data. In Proceedings of the 23rd ACM Conference on
Computer and Communications Security (CCS) (Vienna, Austria,
Oct. 2016).
570    26th USENIX Security Symposium
USENIX Association
[18] GRUSS, D., MAURICE, C., FOGH, A., LIPP, M., AND MAN-
GARD, S. Prefetch side-channel attacks: Bypassing SMAP and
kernel ASLR. In Proceedings of the 23rd ACM Conference on
Computer and Communications Security (CCS) (Vienna, Austria,
Oct. 2016).
[19] GUANCIALE, R., NEMATI, H., BAUMANN, C., AND DAM, M.
Cache storage channels: Alias-driven attacks and verified coun-
In Proceedings of the 37th IEEE Symposium on
termeasures.