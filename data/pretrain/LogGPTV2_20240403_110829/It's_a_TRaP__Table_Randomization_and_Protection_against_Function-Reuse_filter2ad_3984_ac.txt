GOT into execute-only trampolines in the PLT. To do so,
we precompute all of the function addresses in the GOT.
Then, we rewrite all the trampolines in the PLT so they
jump to the target function directly rather than reading the
function address from the GOT and indirectly jumping to it.
This allows us to remove the code pointers from the GOT
altogether. By stripping the GOT from all code pointers, we
can also remove its associated relocation information from
the memory. We then shuﬄe the trampolines in the PLT.
This transformation prevents attackers from inferring the
layout of the PLT or leaking the code pointers it contains.
Finally, we use the TRaP information stored by our compiler
to rewrite all call sites that point into the PLT with the
corresponding randomized address.
5.5 Countering Guessing Attacks
Since we prevent attackers from directly reading valuable
tables such as the PLT and vtables, we expect that attackers
may try to execute xvtable entries and other addresses in
execute-only memory to guess their contents. Researchers
have shown that brute-force attacks can bypass diversity,
especially in services that automatically restart without re-
randomization after crashing [6, 15, 33, 34]. We use software
booby traps to counter this threat [10]. The idea is that
booby traps lie dormant during normal program operation
but are likely triggered by adversarial probing. Booby traps
therefore terminate the program immediately and notify an
administrator or security software of the issue. Terminating
Figure 4: Without protection, an adversary that
can read arbitrary memory can read the vtable con-
tents and disclose the function layout. In Readac-
tor++ apps, the readable part of vtables (rvtable)
contain no code pointers and the executable and ran-
domized part (xvtable) is not readable.
to parse the heap and discover how objects of a given class
are randomized. We therefore chose to randomize the layout
of vtables instead.
If we only randomize the ordering of vtable entries, an ad-
versary can still follow vptr’s in the heap or stack to disclose
the vtable layout. Legitimate vtables are most commonly
stored on pages with read permissions. To prevent disclosure
of the vtable layout after randomization, we want to prevent
adversaries from reading the part of vtables that contains
code pointers. Our solution is to transform read-only code
pointers into execute-only code. We encode each code pointer
p as a direct jump using the value of p as the immediate
operand. In addition to code pointers, vtables contain other
data such as Run-Time Type Information (RTTI). We there-
fore split each vtable into two parts: a read-only part called
the rvtable and an execute-only part called the xvtable. We
can either place the rvtable and xvtable on successive mem-
ory pages or we can add a pointer from the rvtable to the
xvtable. If we choose the former approach, we need to pad
rvtables to the nearest page boundary which wastes mem-
ory. We instead add a new ﬁeld to the rvtable, xpointer,
referencing the corresponding xvtable. Figure 4 shows how a
traditional vtable (left) is split into an rvtable and an xvtable
(right).
After splitting the vtable and inserting booby trap entries,
we can securely randomize the ordering of each class’s virtual
functions. Since we store the xvtable in execute-only memory,
an attacker cannot de-randomize the ordering of functions
in the xvtable. We randomly permute the ordering of each
class’s virtual functions and rewrite all vtables in a semantics
preserving way; Section 6.2 describes how we do this. After
A::func1offsetrtti_ptrvtableClass AA::func1A::func2data pages (RW)code pages (RX)A::func2A::func2offsetrtti_ptrrvtableClass Axvtabledata pages (RW)randomized code pages (X)A::func1  (trap)jmp A::func2xvtable  (trap)jmp A::func1adversaryCode disclosurepreventedCode disclosure possible112  Traditional App Readactor++ App248A system that hosts Readactor++ binaries must support
execute-only memory permissions; we build our implementa-
tion of Readactor++ on top of the Readactor system [11] in
order to also mitigate indirect code disclosure.
6.1 Compiler Support
We modiﬁed the LLVM compiler to (i) generate code
that can be mapped with execute-only permissions, (ii) split
vtables into read-only and execute-only parts, and (iii) collect
TRaP information to facilitate randomization of vtables and
linker tables at load time.
Code and Data Separation As with other systems
which require execute-only code pages, we must ensure that
legitimate code never tries to read itself. We modify the
LLVM compiler infrastructure and the Gold linker to ensure
that the compiler will never mix code and readable data.
Splitting Vtables As we discuss in Section 5.3, we must
split vtables into a read-only rvtable and an execute-only
xvtable in order to protect the randomized table contents
from disclosure. We modify the Clang C++ front end to split
vtables accordingly.
We must also modify all virtual call sites to handle the new,
split layout. Rewritten call sites must ﬁrst dereference the
vtable pointer from the object, as usual, to get the address
of the correct rvtable. The call must then dereference the
xvtable pointer found in this rvtable. After the xvtable
address is obtained, the virtual call indexes into this table to
ﬁnd the correct trampoline address for the virtual function,
which can then be called. Altogether, we add one additional
memory reference to each virtual method call.
In C++, one can also store the address of a class method
into a method pointer and later dereference this pointer to
call the method. We also handle this slightly more complex
case by storing an index in the method pointer struct, as
normal. We then handle the xvtable pointer dereference
whenever a method pointer is invoked.
Collecting TRaP Information We use several types of
information, available at compile time, to properly randomize
the PLT and vtable at load time. We embed this meta-data
in a special section of the output object ﬁles to avoid the
need for static binary analysis.
To randomize the xvtables, we need the location of each
class’s vtable, as well as the number of virtual functions in
the class, which is not present in the binary. We modify both
the C++ front end and the code emission back end of LLVM
to add additional metadata (TRaP information) which marks
the location of and number of functions in each vtable for use
at load time. We also mark the class inheritance hierarchy
for each component of the vtable, since this information is
diﬃcult to derive from the vtable alone.
Additionally, we need the location of each reference to the
PLT and each virtual call in the program code, in order to
rewrite these uses after randomization. We modify the Clang
C++ front end to ﬁnd all PLT references and virtual function
call sites and modify the compiler back end to mark these
locations in the binary. Speciﬁcally, we mark instructions
which hold the index of a virtual function so that these
indices can be rewritten.
6.2 Runtime Randomization Engine
Our runtime randomization component, RandoLib, con-
sumes the TRaP information emitted by the compiler, per-
mutes the PLT and all vtables, and ﬁnally updates all ref-
In traditional apps, functions call PLT
Figure 5:
entries directly (left).
In Readactor++ apps, func-
tions ﬁrst jump to a trampoline which performs the
actual call, so that actual return addresses are not
leaked. Moreover, we resolve the targets of PLT
entries, remove the GOT, and add booby traps to
deter probing.
the program causes it to re-randomize as it starts up again,
invalidating whatever knowledge the adversary has collected
so far. When randomizing xvtables and procedure linkage
tables, we insert booby traps. These are simply direct jumps
to a booby trap handling routine. This probabilistically
bounds the number of undetected guesses.
We take special care to ensure that there are many possible
permutations for each table. Speciﬁcally, we ensure that
each permuted table contains at least nmin = 16 entries. As
explained Section 6.2, portions of each xvtable, which we
call sub-xvtables, are permuted together. However we cannot
alter the relative ordering of sub-xvtables. Thus, we ensure
that each sub-xvtable has at least nmin = 16 entries. We
also require that at least k = 1
4 of the entries of each table
are booby traps, so guessing the table entries by executing
them will quickly lead to detection. Given a class with n
virtual functions, we add max((cid:100)k · n(cid:101), nmin − n) booby traps
to its xvtable to meet these requirements. Both nmin and k
are fully tunable for increased security. See Section 7.1 for a
discussion of the security impact of these parameters.
6.
IMPLEMENTATION
Our prototype implementation targets x86-64 Linux appli-
cations compiled with the LLVM/Clang compiler. However,
our techniques are fully generalizable to other combinations
of operating systems, compilers, and microarchitectures.
We prepare applications for load-time randomization using
a modiﬁed compiler which we describe in Section 6.1. We
then link the runtime randomization engine, described in
Section 6.2, into the resulting binary. When the binary is
loaded, the randomization engine uses the embedded TRaP
information to randomize the host binary without the need
for disassembly or complex binary analysis to recover the
necessary information. Protected binaries are as simple to
distribute and patch as current binaries and preserve com-
patibility with virus scanners, code signing, and whitelisting.
PUSH .hello_strCALL PI:EMAIL (RX)JMP *(printf@got)PUSH printf_idxCALL resolveaddr.plt (RX).got (RW)printf@plt+5PUSH .hello_strJMP printf_trampolinereturn_site_1:randomized .text (X)MOV printf_addr, eaxJMP *eaxrandomized .plt (X) (trap)adversaryCode pointerdisclosure preventedPointer disclosure possibleCALL printf@pltJMP return_site_1randomized trampolines (X)1123  Traditional App Readactor++ App2249has a set of vtable entries that correspond to the virtual
methods deﬁned by class A; we call such sets sub-vtables.
The layout of a sub-vtable must be the same for all classes
related by inheritance.
In Figure 6, the ﬁrst sub-vtables shared among the class A
and its descendants share the A-in- preﬁx in their names. A
virtual method call that operates on an object of type A can
eﬀectively use any entry in the A-in- sub-vtables because any
object of one of A’s sub-types can be assigned to a pointer
of type A. This is why we must ensure that the layouts of
each of these sub-vtables are mutually compatible.
Since the TRaP section contains the locations and sizes of
whole xvtables, RandoLib must ﬁrst split the xvtables into
sub-xvtables and then group sub-xvtables together by their
type. RandoLib relies on the vtable inheritance relationships
to identify sub-xvtables. Consider again the previous exam-
ple. If we know that B’s xvtable is based on A’s xvtable,
then the compiler will guarantee that the lower part of B’s
xvtable will be the A-in-B sub-xvtable.
Information about the inheritance relationships between
xvtables is not readily available at run time. This informa-
tion can in principle be derived from the Run-Time Type
Information (RTTI) structures that are embedded in C++
programs by default [9]. During the course of this research,
however, we have found several ambiguous cases where un-
used vtables are not emitted and therefore we could not
always correctly disambiguate complex vtable layouts. Addi-
tionally, we found that compilers implementing the Itanium
ABI do not always agree on sub-vtable layouts, although
this is presumably due to compiler bugs. We have therefore
chosen to embed the names of the bases for each sub-vtable
in the TRaP information as well. For example, we mark
classes A, B, D as the bases of the primary vtable of Class
D in Figure 6. This information, combined with the RTTI
structures, is suﬃcient to recover the whole xvtable hierarchy
in the program. If it is undesirable to embed C++ RTTI
information in the binary, we can easily extend the TRaP
information to store all necessary meta-data.
Identifying references Next, RandoLib resolves the tar-
get of all table references. These references must be updated
to reﬂect the new table layouts after permutation.
The TRaP section contains the locations of all index op-
erations into the PLT and vtables. To save space we do
not embed the indices used in these references in the TRaP
section, since they can be read by disassembling the marked
instructions. We can disassemble references quickly and
accurately because they are valid, single instructions.
The TRaP section also contains the name of the intended
target class for each xvtable reference. RandoLib can then
resolve the target to the set of sub-xvtables corresponding
to receiving class, which are all randomized using the same
permutation as described previously.
Randomization Finally RandoLib randomly permutes all
tables identiﬁed in the ﬁrst step and updates the references
identiﬁed in the second step.
We use Algorithm 1 to update xvtable references. In this
algorithm, G is a directed graph that represents the class
hierarchy. We calculate G based on the RTTI information.
Each node in G represents a class that has an array of sub-
xvtable pointers (V T ables). For each sub-xvtable, we store a
link to the sub-xvtable that preceded it in the original (whole)
xvtable (P receding) and the oﬀset of the sub-xvtable within
that original xvtable (Of f set). XRef sV ector is an array of
Figure 6: Example class hierarchy rooted in class A.
The direct subclasses of A use single inheritance and
provide their own implementation of func2. Class
D uses multiple inheritance and therefore has two
virtual function tables.
erences to these tables to refer to a new, randomized index.
We built RandoLib as a dynamically linked module that ran-
domizes the other loaded modules as the program starts.
Our modiﬁed compiler automatically emits an initialization
routine into each module that registers the module with
RandoLib. RandoLib then randomizes all registered modules
together after all modules have been loaded but before the
dynamic linker passes control to the program entry point.
RandoLib can then be safely unloaded after it has random-
ized the registered modules. When it unloads, it frees all of
the memory it had allocated and overwrites all of the code
pointers in its private data with zeros. It therefore does not
increase the attack surface.
Identifying tables First, RandoLib collects the locations
and sizes of the PLT and xvtables from the TRaP section. Af-
ter identifying all xvtables, we must identify and distinguish
all copies of each class’s xvtable. Vtables contain sub-vtables
corresponding to the vtables of their base classes, and each
of these corresponding sub-vtables must be randomized in
the same order. To see why this process is necessary, we
give an example of a simple inheritance hierarchy and the
corresponding vtable layouts. Figure 6 shows the “diamond”
inheritance pattern in which a class D has two base classes,
B and C that both inherit from a single class A. If a call is
made to func1 on an instance of D, the target of the call
depends on the call site. If the call site expects an instance
of C, C::func1 is invoked, and A::func1 is invoked in all
other cases. This behavior is implemented using a primary
and secondary vtable for instances of class D (see bottom
third of Figure 6). The primary vtable is used from call sites
that expect objects of type A, B, or D and the second vtable
is used when a call expects an instance of class C. For this
reason, all instances of class D contain two vtable pointers.
To explain why xvtables must be split into sub-xvtables
for randomization, let us consider randomizing the class
hierarchy shown in Figure 6. Three classes derive directly or
indirectly from class A. Each of these subclasses therefore
A::func1A::func2A-in-Aprimary vtableA::func1B::func2A-in-Bprimary vtableB::func3B-in-BC::func1C::func2A-in-Cprimary vtableA::func1D::func2A-in-D1primary vtableC::func1D::func2secondary vtableB::func3D::func4D::func5A-in-D0B-in-D0D-in-D0Class DClass BClass AClass C250(Location, ClassN ame, Index) tuples. Each tuple represents
one xvtable reference. The ClassN ame, which represents
the name of the intended object type for the virtual method
call, as well as the Location are read from the TRaP section.
We determine the Index by disassembling the reference.
For each xvtable reference, we start by ﬁnding the primary
xvtable for the call’s intended target type (line 4). We then
resolve the reference to an exact sub-xvtable group based
on the sub-xvtable oﬀsets (line 5-7). We then calculate the
index of the intended target of the reference within that