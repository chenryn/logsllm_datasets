-   -a:列出所有本地镜像(含中间映像层) -q:只显示镜像ID
-   \- -digests:显示镜像的摘要信息 - -no-trunc:显示完整镜像信息
    \]# docker search \[opshion\] tomcat #从docker
    hub（https://hub.docker.com）上查询镜像
```{=html}
```
-   就算配置了阿里云镜像也是从docker
    > hub（https://hub.docker.com）上查询镜像
-   -s:列出收藏数不小于指定值得镜像， 例：docker search -s 30 tomcat
-   \- -no-trunc:显示完整的镜像描述 - -automated:只列出automated
    > build类型镜像
    ![截图_2020031314432843SS](media/image8.png){width="7.110416666666667in"
    height="0.7548611111111111in"}
\]# docker pull tomcat #下载tomcat镜像
-   未设置tag等价于docker pull tomcat:latest
    > 拉取指定版本，tomcat:3.2、tomcat:5.7
\]# docker rmi hello-world #删除hello-world镜像
\]# docker rmi hello-world nginx #删除hello-world和nginx
镜像，删除多个，空格隔开
\]# docker rmi -f \$(docker images -qa)
#强制删除全部镜像\-\-\-\-\-\-\-\-\-\--慎用、慎用、慎用
-   -f:强制删除
\]# docker commit #提交镜像
docker commit -m="提交的描述信息" -a="作者" 正在运行容器ID
要创建的目标镜像名:标签名
\]# docker commit -a=\"zdd\" -m=\"tomcat docker test\" 3d8e
newtomcat:1.1
![截图_2020031615123412SS](media/image9.png){width="6.00625in"
height="0.7680555555555556in"}
\]#docker push busybox #上传镜像
\]#docker save busbox:lotest \>busybox.tar
#导出镜像到一个tar包中，对应【load】
\]#docker load \ #启动centos镜像，并创建容器 -it :进行交互式操作 --d：放后台
> --name重新起名
build #定制镜像
commit #提交镜像
### 容器命令
\]#docker run 【OPTIONS】 IMAGE 【COMMAND】 【ARG.】
\]# docker run -it 470671
#交互式启动以ID号为470671的镜像启动一个容器，并提供一个伪终端
\]# docker run -it centos /bin/bash #以/bin/bash命令格式交互，默认为这个
\]# docker run -it - -name centostest centos
#以centos的镜像启动一个容器，并命名为：centostest
\]# docker run -d - -name centostest centos #以后台模式启动一个容器
-   \--name=\"容器新名字∵为容器指定一个名称
-   -d：后台运行容器，并返回容器ID，也即启动守护式容器；
-   -i：以交互模式运行容器，通常与-t同时使用；
-   -t：为容器重新分配一个伪输入终端，通常与-同时使用P：随机端口映射
-   -P：随机端口映射
-   -p：指定端口映射，有以下四种格式 例如：\]# docker run -d -p
    5566:8080 tomcat
> ip:hostPort:containerPort
>
> ip::containerPort
>
> hostPort:containerPort
>
> containerPort
以后台模式启动一个容器docker run -d centos问题：然后 docker ps
-a进行查看，会发现容器已经停止退出
很重要的要说明的一点：Docker容器后台运行，就必须有一个前台进程容器运行的命令如果不是那些一直挂起的命令（比如运行top,ta），就是会自动退出的这个是
docker的机制问题，
比如你的web容器，我们以
ngInx为例，正常情况下，我们配置启动服务只需要启动响应的
service即可。例如service nginx
start但是，这样做，ngInx为后台进程模式运行，就导致
docker前台没有运行的应用，这样的容器后台启动后，会立即自杀因为他觉得他没事可做了所以，最佳的解决方案是，将你要运行的程序以前台进程的形式运行
\]# docker ps #查看正在运行的容器
\]# docker ps -aq
-   -a：列出当前所有正在运行的容器+历史上运行过的
-   -q：静默模式，只显示容器编号。
-   -l：显示最近创建的容器。
-   -n：显示最近n个创建的容器。例：docker ps -n 3
-   \--no- trunc：不截断输出。
    退出容器 组合键：ctrl + q + p 、exit
-   ctrl + p + q：容器不停止退出 用docker attach a9重新进入docker容器
-   exit：容器停止退出
\]# docker stop 1310f #停止容器
\]# docker kill 1310f #强制停止容器
\]# docker start 1310f #启动容器，可用容器名或者容器ID
\]# docker restart 1310f #重启容器，可用容器名或者容器ID
\]# docker rm 1310f #删除容器，删除前先停止运行容器
\]# docker rm 1310f 2345d #删除多个容器，删除前先停止运行容器
\]# docker rm -f \$(docker ps -aq) #强制删除所有容器，包括在运行的
\]# docker ps -aq \|xargs docker rm -f
#同上，强制删除所有容器，包括在运行的
-   -f :强制删除,正在运行容器的也将被删除
    \]# docker logs -t -f \--tail a9 #打印容器运行日志
-   -t:是加入时间戳
-   -f:跟随最新的日志打印
-   \- -tail数字:显示最后多少条
-   实验案例
    \]# docker run -d centos /bin/sh -c \"while true; do echo hello
    zzyy;sleep 2;done\"
    \]# docker ps -a
    \]# docker logs -t a9
    \]# docker logs -t -f a9
    \]# docker logs -t -f \--tail 5 a9 #从第5行开始，持续输出日志
    \]# docker top a9 #查看容器内运行的进程信息
    \]# docker inspect a9 #查看容器内部的细节，以JSON串形式体现
\]# docker inspect -f 64852f #查看容器详细信息,底层信息
\]# docker inspect -f \'{{.NetworkSettings.MacAddress}}\' a9
#查看mac地址
\]# docker inspect -f \'{{.NetworkSettings.IPAddress}}\' a9 #查看ip地址
\]# docker attach a9 #进入容器
\]# docker exec -it a9 /bin/bash #以bashshell进入容器，
-   -i:interactive交互方式 -t:tty命令行意思
-   attach：直接进入容器启动命令的终端，不会启动新的进程，exit退出容器将关闭
-   exec：在容器中打开新的终端，并且可以启动新的进程，exit退出容器不关闭
-   docker exec -it a9 ls -l :不进入容器，即在容器中执行ls -l 命令
\]# docker cp a3:/tmp/aaaa.txt /root #将容器内的文件拷贝到宿主机
docker cp 容器ID:容器内路径 目的主机路径
create #创建新的容器，同run 但不启动
diff #查看容器变化
events #从docker服务获取容器实时事件
login #注册或者登陆一个docker源服务器
logout #从当前的Docker registry 退出
export #导出容器的内容流作为一个tar归档文件【对应import】
import #从tar包中的内容创建一个新的文件系统映像【对应export】
port #查看映射端口对
pause #暂停容器
unpause #取消暂停容器
wait #截取容器停止时的退出状态值
**自定义镜像：**
**docker commit
命令方式：**进行打包成新的镜像，提交一个具有新配置的容器成为镜像，后面跟容器的name
或者容器Id ，最后是生成新镜像的名字
**dockerfile + docker
build命令方式：**dockerfile包含创建镜像所需要的全部指令。基于在这些的指令，我们可
以使用Docker
build命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。
\]# docker build -t centos_sshd_1 . \# -t 选项来docker
build新的镜像以便于标记构建的镜像，. 表示当前目录，也可以指定dockerfile
文件所在目录。
**创建私有镜像仓库：**
\]# systemctl restart docker #重启docker
\]# docker run -d -p 5000:5000 registry #docker重启之后要重新运行
\]# docker tag busybox:latest 192.168.1.100:5000/busybox:latest
#制作镜像
\]# docker push 192.168.1.100:5000/busybox:latest #上传镜像
\]# docker run -it 192.168.1.100:5000/busybox:latest /bin/bash
#直接起订进行