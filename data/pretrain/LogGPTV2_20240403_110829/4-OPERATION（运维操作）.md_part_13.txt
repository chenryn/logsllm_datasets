Java:跨平台,面向对象的程序设计语言,具有通用性,高效性,平台移植性,安全性
Php只是做网页的,java可做网页,做程序,
Java SE 标准板
Java EE 企业版
Java ME 移动版
JDK (java Development kit):java语言软件开发工具包
JDK 包括java运行环境 java工具 java基础的类库(类似shell函数)
JRE 是JDK的子集
JRE 包括java虚拟机 核心类库和支持文件 不包含工具
Java Servlet
Servlet 是java 扩展Web服务器功能的组件规范
常见的Servlet 容器
IBM公司的 websphere
Oracle公司的 weblogic
Apache 公司的 tomcat
Redhat 公司的 Jboss
PHP ,python + Nginx,httpd
# 1 案例1：安装部署Tomcat服务器
1.1 问题
本案例要求部署Tomcat服务器，具体要求如下：
-   安装部署JDK基础环境
-   安装部署Tomcat服务器
-   创建JSP测试页面，文件名为test.jsp，显示服务器当前时间
然后客户机访问此Web服务器验证效果：
-   使用火狐浏览器访问Tomcat服务器的8080端口，浏览默认首页
-   使用火狐浏览器访问Tomcat服务器的8080端口，浏览默认测试页面
1.2 方案
使用2台RHEL7虚拟机，其中一台作为Tomcat服务器（192.168.2.100）、另外一台作为测试用的Linux客户机（192.168.2.5），如图-1所示。
## 1.3 步骤一
实现此案例需要按照如下步骤进行。
步骤一：部署Tomcat服务器软件(192.168.2.100/24)
### 1）使用RPM安装JDK环境
\[root@web1 \~\]# yum -y install java-1.8.0-openjdk
//安装JDK,实验环境已安装
\[root@web1 \~\]# yum -y install java-1.8.0-openjdk-headless //安装JDK
\[root@web1 \~\]# java -version //查看JAVA版本
### 2）安装Tomcat（apache-tomcat-8.0.30.tar.gz软件包，在lnmp_soft中有提供）
\[root@web1 \~\]# tar -xf apache-tomcat-8.0.30.tar.gz
\[root@web1 \~\]# mv apache-tomcat-8.0.30 /usr/local/tomcat #安装完成
\[root@web1 \~\]# ls /usr/local/tomcat
bin/ //主程序目录
lib/ //库文件目录
logs/ //日志目录
temp/ //临时目录
work/ //自动编译目录jsp代码转换servlet
conf/ //配置文件目录
webapps/ //页面目录
Tomcat软件是java写的脚本.
### 3）启动服务
\[root@web1 \~\]# /usr/local/tomcat/bin/startup.sh #启动tomcat
\[root@web1 \~\]# /usr/local/tomcat/bin/shutdown.sh #关闭tomcat
\[root@web1 \~\]# firewall-cmd \--set-default-zone=trusted
\[root@web1 \~\]# setenforce 0
### 4）服务器验证端口信息
\[root@web1 \~\]# netstat -nutlp \|grep java //查看java监听的端口
tcp 0 0 :::8080 :::\* LISTEN 2778/java
tcp 0 0 ::ffff:127.0.0.1:8005 :::\* LISTEN 2778/java
提示：如果检查端口时，8005端口启动非常慢，可用使用下面的命令用urandom替换random（非必须操作）。
因为:tomcat启动需要取随机数,urandom的随机数,比random效率高很多,删除random.用urandom
改名替换random,以后常用
\[root@web1 \~\]# mv /dev/random /dev/random.bak
\[root@web1 \~\]# dom
ln -s /dev/urandom /dev/ran
### 5）客户端浏览测试页面(proxy作为客户端)
\[root@proxy \~\]# firefox http://192.168.2.100:8080
## 步骤二：修改Tomcat配置文件
### 创建测试JSP页面:首页是在 /usr/local/tomcat/webapps/ROOT/ 目录里面
\]# vim /usr/local/tomcat/webapps/ROOT/test.jsp
\
\
\
Now time is: \ //显示服务器当前时间
\
\
\
### 重启服务
\~\]# /usr/local/tomcat/bin/shutdown.sh
\~\]# /usr/local/tomcat/bin/startup.sh
\[PI:EMAIL:8080
\[root@proxy \~\]# firefox 
# 2 案例2：使用Tomcat部署虚拟主机
2.1 问题
沿用练习二，使用Tomcat部署加密虚拟主机，实现以下要求：
-   实现两个基于域名的虚拟主机，域名分别为：www.a.com和 www.b.com
-   使用www.a.com域名访问的页面根路径为/usr/local/tomcat/a/ROOT
-   使用www.b.com域名访问的页面根路径为/usr/local/tomcat/b/base
-   访问www.a.com/test时，页面自动跳转到/var/www/html目录下的页面
-   访问页面时支持SSL加密通讯
-   私钥、证书存储路径为/usr/local/tomcat/conf/cert
-   每个虚拟主机都拥有独立的访问日志文件
-   配置tomcat集群环境
### 步骤一 :创建虚拟主机
修改server.xml配置文件，创建两个域名的虚拟主机，修改如下两个参数块(严格区分大小写)：
\# cat /usr/local/tomcat/conf/server.xml
\
\
\ #可起多个端口,只要不重复
\
\
\
\
\
\
\
\
... ...
\
此行表示用IP访问的时候默认打开一个Host name=localhost的网页
每个Host是一个网站,谁在上面,默认就打开谁
name 为域名
appBase
为网站根目录,Tomcat装在哪根目录就在哪,本实验中a在/usr/local/tomcat/a
unpackWARS="true":java打包一般为WAR包,true为自动解压
格式2种风格都是正确的:
格式1 \
格式2\ \*\* \*\* \*\* \
2）创建虚拟主机对应的页面根路径 默认都在ROOT下
\[root@web1 \~\]# mkdir -p /usr/local/tomcat/{a,b}/ROOT
\[root@web1 \~\]# echo \"AAA\" \> /usr/local/tomcat/a/ROOT/index.html
\[root@web1 \~\]# echo \"BBB\" \> /usr/local/tomcat/b/ROOT/index.html
3）重启Tomcat服务器
\[root@web1 \~\]# /usr/local/tomcat/bin/shutdown.sh
\[root@web1 \~\]# /usr/local/tomcat/bin/startup.sh
4）客户端设置host文件，并浏览测试页面进行测试(proxy充当客户端角色)
注意：ssh远程连接时使用使用-X参数才可以！！！
\[root@proxy \~\]# vim /etc/hosts
... ...
192.168.2.100 www.a.com www.b.com
\[root@proxy \~\]# firefox http://www.a.com:8080/ //注意访问的端口为8080
\[root@proxy \~\]# firefox http://www.b.com:8080/
### 步骤二：修改www.b.com网站的首页目录为base
1.  使用docBase参数可以修改默认网站首页路径
\[root@web1 \~\]# vim /usr/local/tomcat/conf/server.xml
\
\ #Host 里面增加此行
\
Path:类似与Nginx的地址跳转
\[root@web1 \~\]# mkdir /usr/local/tomcat/b/base
\[root@web1 \~\]# echo \"BASE\" \> /usr/local/tomcat/b/base/index.html
\[root@web1 \~\]# /usr/local/tomcat/bin/shutdown.sh
\[root@web1 \~\]# /usr/local/tomcat/bin/startup.sh
\[root@proxy \~\]# firefox http://www.b.com:8080/
//结果为base目录下的页面内容
### 步骤三：跳转
1）当用户访问http://www.a.com/test打开/var/www/html目录下的页面
\[root@web1 \~\]# vim /usr/local/tomcat/conf/server.xml
... ...
\
\
\
\
\
\
... ...
当访问www.a.com/test 将跳转到/var/www/html
\[root@web1 \~\]# echo \"Test\" \> /var/www/html/index.html
\[root@web1 \~\]# /usr/local/tomcat/bin/shutdown.sh
\[root@web1 \~\]# /usr/local/tomcat/bin/startup.sh
2）测试查看页面是否正确(proxy充当客户端角色)
\[root@proxy \~\]# firefox http://www.a.com:8080/test
//返回/var/www/html/index.html的内容
//注意，访问的端口为8080
### 步骤四：配置Tomcat支持SSL加密网站
> 1）创建加密用的私钥和证书文件
只要加密一次,所有的网站都会加密,端口和网站是不绑定的,一个端口可访问所有的网站.
\
如果defaultHost
为空的,,,即为没有默认网站,那么访问网页未指定域名.将被拒绝
\[root@web1 \~\]# keytool -genkeypair -alias tomcat -keyalg RSA
-keystore /usr/local/tomcat/keystore //提示输入密码为:123456
//-genkeypair 生成密钥对
//-alias tomcat 密钥别名
//-keyalg RSA 定义密钥算法为RSA算法
//-keystore 定义密钥文件存储在:/usr/local/tomcat/keystore
可最后不输入文件存储路径.将会弹出提示:
\[root@Web1111 \~\]# keytool -genkeypair -alias tomcat -keyalg RSA
-keystore
命令选项-keystore需要一个参数。
keytool -genkeypair \[OPTION\]\...
生成密钥对
选项:
-alias \ 要处理的条目的别名
-keyalg \ 密钥算法名称
-keysize \ 密钥位大小
-sigalg \ 签名算法名称
-destalias \ 目标别名
-dname \ 唯一判别名
-startdate \ 证书有效期开始日期/时间
-ext \ X.509 扩展
-validity \ 有效天数
-keypass \ 密钥口令
-keystore \ 密钥库名称
-storepass \ 密钥库口令
-storetype \ 密钥库类型
-providername \ 提供方名称
-providerclass \ 提供方类名
-providerarg \ 提供方参数
-providerpath \ 提供方类路径
-v 详细输出
-protected 通过受保护的机制的口令
\[root@Web1111 \~\]# keytool -genkeypair -alias tomcat -keyalg RSA
-keystore /usr/local/tomcat/keystore
输入密钥库口令: #本实验设置口令为:123456
再次输入新口令:
您的名字与姓氏是什么?
\[Unknown\]: zdd
您的组织单位名称是什么?
\[Unknown\]: zdd
您的组织名称是什么?
\[Unknown\]: zdd
您所在的城市或区域名称是什么?
\[Unknown\]: zdd
您所在的省/市/自治区名称是什么?
\[Unknown\]: zdd
该单位的双字母国家/地区代码是什么?
\[Unknown\]: zdd
CN=zdd, OU=zdd, O=zdd, L=zdd, ST=zdd, C=zdd是否正确?
\[否\]: y
输入 \ 的密钥口令 #本实验设置口令为:123456
(如果和密钥库口令相同, 按回车):
再次输入新口令:
\[root@Web1111 \~\]#