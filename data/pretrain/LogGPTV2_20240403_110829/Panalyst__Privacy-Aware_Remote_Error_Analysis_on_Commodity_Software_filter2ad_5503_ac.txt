reproducing a runtime error, as the server may need to
know the value of a pointer, or at least its range, to deter-
mine whether an illegal memory access is about to occur.
However, this treatment may disclose too much user in-
formation, in particular when the pointer involves only
one symbol: a “yes” to such a question often exposes
the real value of that symbol. Such a problem usually
happens in a string-related GLIBC function, where let-
ters on a string are used as offsets to look up a table.
Our solution is to accommodate symbolic pointers in our
analysis if such a pointer carries only one symbol and is
used to read from a memory location. This approach can
be explicated through an example. Consider the instruc-
tion “MOV EAX, [ESI+CL]”, where CL is tainted by
an input byte Bj. Instead of directly asking the client
for the value of ESI+CL, which reveals the real value of
Bj, the server gathers the bytes from the memory loca-
tions pointed by (ESI+0, ESI+1, . . . , ESI+ 255) to
form a list. The list is used to prepare a question should
EAX get involved in a branching condition such as “CMP
EAX, 1”. In this case, the server generates a query in-
cluding [ESI+CL], which is the symbolic expression
of EAX, the value of ESI, the list and the condition. In
response to the query, the client uses the real value of
Bj and the list to verify the condition and answer either
“yes” or “no”, which enables the server to identify the
right branch.
USENIX Association  
17th USENIX Security Symposium 
297
Instruction Category
data movement
arithmetic
address calculation
conditional jump
Table 1: Examples of the Taint Rules.
Taint Propagation
(1) taint is propagated to the destination if the source is tainted,
(2) the destination operand is not tainted if the source operand
is not tainted.
(1) taint is propagated to the destination if the source is tainted,
(2) the EFLAGS is also regarded as a destination operand.
an address is tainted if any element in the address calculation is
tainted
regard EFLAGS as a source operand
compare
regard EFLAGS as a destination operand
push eax;
Examples
mov eax,ebx;
call 0x4080022;
lea ebx, ptr [ecx+10]
and eax, ebx;
shr eax,0x8
mov ebx, dword ptr
[ecx+2*ebx+0x08]
jz 0x0746323;
jnle 0x878342; jg 0x405687
cmp eax,ebx; test eax,eax
inc ecx;
The analysis stops when the execution reaches a state
where a runtime error is about to happen. Examples
of such a state include a jump to an address outside
the process image or an illegal instruction, and mem-
ory access through an illegal pointer. When this hap-
pens, Panalyst server announces that an input reproduc-
ing the error has been identiﬁed, and can be used for
further analysis of the underlying bug and generation of
signatures [52, 50, 39] or patches [49]. Our analysis also
contributes to a preliminary classiﬁcation of bugs: if the
illegal address that causes the error is found to be tainted,
we have a reason to believe that the underlying bug can
be exploited remotely and therefore is security critical.
Reducing communication overhead. A major concern
for Panalyst seems to be communication overhead: the
server may need to query the client whenever a tainted
branching condition or a tainted pointer is encountered.
However, in our research, we found that the bandwidth
consumed in an analysis usually is quite small,
less
than a hundred KB during the whole analysis. This is
because the number of tainted conditions and pointers
can be relatively small in many programs, and both the
server’s questions and the client’s answers are usually
short. Need for communication can be further reduced
if an initial error report supplies the server with a sufﬁ-
cient amount of public information regarding the error.
However, the performance of the server and the client
will still be affected when the program intensively oper-
ates on tainted data, which in many cases is related to
loop.
A typical loop that appears in many network-facing
applications is similar to the one in the example (Line
6 of Figure 2). The loop compares individual bytes in
a protocol ﬁeld with a delimiter such as ‘\n’ or ‘ ’ to
identify the end of the ﬁeld. If we simply view the loop as
a sequence of conditional branching, then the server has
to query the client for every byte within that ﬁeld, which
can be time consuming. To mitigate this problem, we
designed a technique in our research to ﬁrst identify such
a loop and then let client proactively scan its message
to ﬁnd the location of the ﬁrst string that terminates the
loop. We describe the technique below.
The server monitors a tainted conditional branching
that the execution has repeatedly bumped into. When
the number of such encounters exceeds a threshold, we
believe that a loop has been identiﬁed. The step value
of that loop can be approximated by the difference be-
tween the indices of the symbols that appear in two con-
secutive evaluations of the condition. For example, con-
sider the loop in Figure 2.
If the ﬁrst time the execu-
tion compares Bj with ‘\n’ and the second time it tries
Bj+1, we estimate the step as one. The server then sends
a question to the client, including the loop condition
C(Bk[1], . . . , Bk[m]) and step estimates λk[1], . . . , λk[m].
The client starts from the k[i]th byte (1 ≤ i ≤ m) to scan
its message every λk[j] bytes, until it ﬁnds a set of bytes
(Bk[1], . . . , Bk[m]) that makes the condition false. The
positions of these bytes are shipped to the server. As a
result, the analysis can evaluate the loop condition using
such information, without talking to the client iteration
by iteration.
The above technique only works on a simple loop
characterized by a constant step value. Since such a
loop frequently appears in network-facing applications,
our approach contributes to signiﬁcant reduction of com-
munication when analyzing these applications. Devel-
opment of a more general approach for dealing with the
loops with varying step size is left as our future research.
Another problem of our technique is that the condition it
identiﬁes may not be a real loop condition. However, this
does not bring us much trouble in general, as the penalty
of such a false positive can be small, including nothing
but the requirement for the client to scan its message and
disclosure of a few bytes that seem to meet the exit con-
dition.
If the client refuses to do so, the analysis can
still continue through directly querying the client about
branching conditions.
Improving constraint-solving performance. Solving
a constraint can be time consuming, particularly when
the constraint is nonlinear, involving operations such as
bitwise AND, OR and XOR. To maintain a valid run-
time state for the program under analysis, Panalyst server
298 
17th USENIX Security Symposium 
USENIX Association
needs to run a constraint solver to update hypothetic sym-
bol values whenever a new branching condition or mem-
ory access is encountered. This will impact the server’s
performance. In our research, we adopted a very sim-
ple strategy to mitigate this impact: we check whether
current hypothetic values satisfy a new constraint before
solving the constraint. This turns out to be very effective:
in many cases, we found that symbol values good for an
old constraint also work for a new constraint, which al-
lows us to skip the constraint-solving step.
4 Implementation
We implemented a prototype of Panalyst under Linux, in-
cluding its server component and client component. The
details of our implementation are described in this sec-
tion.
Message logging. We adopted ptrace to dump the
packet payloads an application receives. Speciﬁcally,
ptrace intercepts the system call socketcall()
and parses its parameters to identify the location of an
input buffer. The content of the buffer is dumped to a log
ﬁle. We also labels the beginning of a connection when
an accept() is observed and the end of the connection
when there is a close(). The data between these two
calls are used to build a message once a runtime excep-
tion happens to the application.
Estimate of information leaks. To evaluate the infor-
mation leaks caused by answering a question, our imple-
mentation ﬁrst generates a constraint that is a conjunction
of all the constraints the client receives that are directly
or transitively related to the question, and then samples
values of the constraint using the random values of the
symbols it contains. We set the number of samples to
400, which achieves a conﬁdence interval of ±0.05 and a
conﬁdence level of 0.95. A problem here is that the gran-
ularity of the control here could be coarse, as 400 sam-
ples can only represent loss of one byte of information.
When this happens, our current implementation takes a
conservative treatment to assume that all the bytes in a
constraint are revealed. A ﬁner-grained approach can be
restoring the values of the symbols byte by byte to re-
peatedly check information leaks, until all the bytes are
disclosed. An evaluation of such an approach is left as
our future work.
Error analyzer. We implemented an error analyzer as
a Pin tool that works under Pin’s Just-In-Time (JIT)
mode [40]. The analyzer performs both taint analysis
and symbolic execution on a vulnerable application, and
builds a new input to reproduce the runtime error that
occurred on the client. The analyzer starts from a mes-
sage that contains nothing but zeros and has the same
length as the client’s input, and designates a symbol to
every byte on that message. During the analysis, the
analyzer ﬁrst checks whether a taint will be propagated
by an instruction and only symbolically evaluates those
whose operands involve tainted bytes. Since many in-
structions related to taint propagation use the informa-
tion of EFLAGS, the analyzer also takes this register as
a source operand for these instructions. Once an instruc-
tion’s source operand is tainted, symbolic expressions are
computed for the destination operand(s). For example,
consider the instruction add eax, ebx, where ebx is
tainted. Our analyzer ﬁrst computes a symbolic expres-
sion Bebx + veax, where Bebx is an expression for ebx
and veax is the value of eax, and then generates another
expression for EFLAGS because the result of the opera-
tion affects Flag OF, SF, ZF, AF, CF, PF.
jump is encountered,
the
server queries the client about EFLAGS. To avoid ask-
ing the client to give away too much information, such
a query only concerns the speciﬁc ﬂag that affects that
branching,
instead of the whole status of EFLAGS.
For example, consider the following branching: cmp
eax,ebx and then jz 0x33fd740. In this case, the
server’s question is only limited to the status of ZF,
which the branching condition depends on, though the
comparison instruction also changes other ﬂags such as
SF and CF.
Whenever a conditional
Constraint solver. Our implementation uses Yices [33]
to solve constraints so as to ﬁnd the hypothetic values
for individual symbols. These values are important to
keeping the application in a state that is consistent with
its input. Yices is a powerful constraint solver which
can handle many nonlinear constraints. However, there
are situations when a constraint is so complicated that
its solution cannot be obtained within a reasonable time.
When this happens, we adopted a strategy that gradually
inquires the client about the values of individual sym-
bols to simplify the constraint, until it becomes solvable
by the constraint solver.
Data compression. We implemented two measures to
reduce the communication between the client and the
server. The ﬁrst one is for processing the questions that
include the same constraints except input symbols. Our
implementation indexes each question the server sends
to the client. Whenever the server is about to ask a ques-
tion that differs from a previous one only in symbols, it
only transmits the index of the old question and these
symbols. This strategy is found to be extremely effec-
tive when the sizes of the questions become large:
in
our experiment, a question with 8KB was compressed to
52 bytes. The strategy also complements our technique
for processing loops: for a complicated loop with vary-
ing steps which the technique cannot handle, the server
USENIX Association  
17th USENIX Security Symposium 
299
needs to query the client iteratively; however, the sizes of
these queries can be very small as they are all about the
same constraint with different symbols. The second mea-
sure is to use a lightweight real-time compression algo-
rithm to reduce packet sizes. The algorithm we adopted
is minilzo [6], which reduced the bandwidth consump-
tion in our experiments to less than 100 KB for an anal-
ysis, at a negligible computational overhead.
5 Evaluation
In this section, we describe our experimental study of
Panalyst. The objective of this study is to understand the
effectiveness of our technique in remote error analysis
and protection of the user’s privacy, and the overheads
it introduces. To this end, we evaluated our prototype
using 6 real applications and report the outcomes of these
experiments here.
Our experiments were carried out on two Linux work-
stations, one as the server and the other as the client.
Both of them were installed with Redhat Enterprise 4.
The server has a 2.40GHz Core 2 Duo processor and
3GB memory. The client has a Pentium 4 1.3GHz pro-
cessor and 256MB memory.
5.1 Effectiveness
We ran Panalyst to analyze the errors that occurred
in 6 real applications, including Newspost [7], Open-
VMPS [19], Null-HTTPd (Nullhttpd) [8], Sumus [15],
Light HTTPd [5] and ATP-HTTPd [3]. The experimental
results are presented in Table 2. These applications con-
tain bugs that are subject to stack-based overﬂow, format
string error and heap-based overﬂow. The errors were
triggered by a single or multiple input packets on the
client and analyzed on the server. As a result, new pack-
ets were gradually built from an initial error report and
interactions with the client to reproduce an error. This
was achieved without leaking too much user information.
We elaborate our experiments below.
Newspost. Newspost is a Usenet binary autoposter for
Unix and Linux. Its version 2.1.1 and earlier has a bug
subject to stack-based overﬂow: speciﬁcally, a buffer in
the socket getline() function can be overrun by a
long string without a newline character. In our experi-
ment, the application was crashed by a packet of 2KB.
After this happened, the client sent the server an initial
error report that described the length of the packet and
the type of the error. The report was converted into an
input to an analysis performed on the application, which
included an all-zero string of 2KB. During the analy-
sis, the server identiﬁed a loop that iteratively searched
for ‘0xa’, the newline symbol, as a termination condi-
tion for moving bytes into a buffer, and questioned the
client about the position at which the byte ﬁrst appeared.
The byte actually did not exist in the client’s packet.
As a result, the input string overﬂowed the buffer and
was spilled on an illegal address to cause a segmentation
fault. Therefore, the server’s input was shown to be able
to reproduce the error. This analysis was also found to
disclose very little user information: nothing more than
the fact that none of the input bytes were ‘0xa’ were
revealed. This was quantiﬁed as 0.9 byte.
OpenVMPS. OpenVMPS is an open-source implemen-
tation of Cisco Virtual Membership Policy Server, which
dynamically assigns ports to virtual networks accord-
ing to Ethernet addresses. The application has a format
string bug which allows the input to supply a string with
format speciﬁers as a parameter for vfprintf(). This
could make vfprintf() write to a memory location.
In the experiment, Panalyst server queried the client to
get “00 00 0c 02” as illustrated in Figure 4. These
four bytes were part of a branching condition, and seems
to be a keyword of the protocol. We also found that the
string “00 b9” were used as a loop counter. These two