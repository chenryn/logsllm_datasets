但是由于我们发送的jsonstring中是没有与`sortedFieldDeserializers`所对应的键名的，所以这里仍无法匹配到。因为没有办法找到与设定的type相符的键，这个时候获取到的内容为空，fastjson会将当前这个字段判断为一个键值，根据当前符号的下一个符号来判断这个键所对应的值是什么类型，如果是`{`则这个键所对应的值也是一个key-value的格式，如果是`"`则为具体的值。在当前例子中，我们知道下一个字段应为`{`，fastjson在处理时会再次调用`parseObject`来处理这个新的键值对格式，下面便是如何将处理流程转交`parserObject`进行二次处理的过程。这里需要用到`FieldDeserializers`来进行解析了：
跟进`parseField`中，关键的处理流程为：
继续跟进：
这里首先通过`fieldInfo.fieldClass`和`fieldInfo.fieldType`来获取`fieldValueDeserilizer`由于这里对应的jsonstring是string类型，则这里最后获取到的`fieldValueDeserilizer`是`StringCodec`。所以接下来就是跟进`StringCodec#deserialze`中：
传入的clazz应为String类型，而非StringBuffer或StringBuilder，所以继续跟进`deserialze`：
最终调用`DefaultJSONParser#parse`解析jsonstring：
现在解析的位置应为`{`所对应的的token，所以应为12，也就是LBRACE，这里将调用`parseObject`来对jsonstring进行解析，我这里截取关键部分：
在这段代码的前面都是lexer对jsonstring的截取和处理操作，当检测到jsonstring中含有以`@type`为键名的字段后，获取其值，将值传入`checkAutoType`中做长度检测以及黑白名单的检测:
如果通过的话，则调用`config.getDeserializer`获取clazz的类：
根据jsonstring中的`val`字段来获取obj的值：
这里将`objVal`的名称以字符串的形式赋值给`strVal`。后面会根据`clazz`的类型将处理流程转交给不同的流程这里由于指定了`java.lang.class`所以是转交到`TypeUtils.loadClass`来处理的：
前面将对传入的`className`进行解析，如果符合相应格式就会进行相应的解析（这里也是之前漏洞所在地），而后面的则会判断`cache`是否为`true`，如果为真则将实例化后的类加入到mappings中（这也是这次漏洞的核心），最终都将把实例化后的类进行返回。
# 0x02 Fastjson gadget流程
其实在前文都有涉及，在这里将化繁为简，总结一下关键点在哪几个地方。
## 2.1 jsonstring解析简述
纵观整个Fastjson的处理流程，可以注意到对jsonstring的核心处理流程是在`DefaultJSONParser#parse(Object
fieldName)`中根据jsonstring的标志位来进行分发的，常见有两种情况：
      # 正常的kv结构
      {"k":"v"}
      # 嵌套结构
      {"k":{"kk":"vv","kk":"vv"},"k":{"k":"kk","kk":"vv","kk":"vv"}},k:v}
而Fastjson的解析方式会首先判断当前标志位是什么，这里拿完整的解析过程来举个例子：
最开始解析的标志位为`{`
  1. 判断下一个标志位是否为`"`，如果是`"`则提取key值，这时的标志位为`"`。
  2. 判断下一个标志位是否为`:`： 
    * 如果为`:`则判断下一个标志位是否为`"`，如果是，则获取value值，这时的标志位为`"`。
    * 如果为`{`则重复1、2的过程。
  3. 判断下一个标志位是否为`}`： 
    * 如果为`}`则表示这一个单元的解析结束
    * 如果为`,`则表示要解析下一个kv的数据，重复1、2、3
根据不同的标志位进行不同的解析。当解析的过程中碰到了`@type`或`$ref`时，将当做特殊的标志做相应的处理。
## 2.2 checkAutoType黑名单检测
当解析过程中找到了`@type`这个关键的标志时，将提取其所对应的值，并检测这个值是否在黑名单中：
先过黑名单再过白名单，这样保证了`@type`所引用的类是较为安全的。
## 2.3 deserialze流程
jsonstring经过解析且经过安全性验证后，最终都要变成相应的对象，而变成对象的过程就是利用反射完成的，这个过程就是反序列化的过程。而该过程主要在`DefaultJSONParser#parseObject`中调用`deserializer.deserialze()`完成：
这里会根据`@type`所指定的类来获取或生成反序列化类，完成反序列化过程，这里如果是在预定数组中的类的话就可以直接调用相关类的`deserialze`方法完成反序列化操作：
如果没有则会进入asm创建处理类的流程。
## 2.4 gadget执行的关键——反射调用
在具体进行反射前还有一个操作，将会解析看jsonstring中是否存在`val`字段，如果有，则将其提取出来赋给`objVal`，并将`objVal`的类名赋值给`strVal`：
之后根据`clazz`类型交由不同的流程来处理：
当`clazz`是一个class类型时，就会进入`TypeUtils.loadClass`中根据`strVal`进行类调用:
这里有两个点需要注意，而这两个点就是造成Fastjson两个rce的关键点。
  * 第一个点会对传入的`@type`的值进行解析，如果符合相应的格式则直接进行类加载。
  * 第二个点首先会反射调用`@type`的值所设置的类，然后将其加入到mappings中，当后面再次经过`checkAutoType`时，将会调用：
将首先从mappings中获取和`typeName`相同的类，也就是说这里在进行黑名单检测前就已经返回了类，从而绕过了黑名单。
# 0x03 总结
就目前来说，针对Fastjson的攻防集中于对于`@type`的检测的利用以及黑名单的绕过这两部分。而从整体的运行逻辑上来看，由于Fastjson很多地方写的比较死，很难出现重新调用构造方法覆盖黑名单或者覆盖mapping的操作，所以就现在最新版的Fastjson而言是比较难以绕过防护措施的。
未来可以参考struts2 ognl的攻防手法，看是否能从置空黑名单或者操作mappings来尝试绕过防护。
# 0x04 Reference
  * 
  * [http://xxlegend.com/2017/12/06/%E5%9F%BA%E4%BA%8EJdbcRowSetImpl%E7%9A%84Fastjson%20RCE%20PoC%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/](http://xxlegend.com/2017/12/06/基于JdbcRowSetImpl的Fastjson RCE PoC构造与分析/)
* * *