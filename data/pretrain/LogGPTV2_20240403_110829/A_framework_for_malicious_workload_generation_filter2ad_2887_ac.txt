impact on the PIX. Since the PIX is performing NAT, it
must maintain state for each connection. Even with a single
MACE host, all 64 MB of system memory is used after a
1On each host we modiﬁed the kernel parameter
debug.bpf bufsiz from 4096 bytes to 524,288 bytes, as sug-
gested in the Bro documentation. Snort presumably can
beneﬁt from this change as well so we applied the change to
each NIDS host.
2The PIX documentation notes that it is possible to set the
fragment reassembly maximum queue length to be equal to
the total number of buﬀers available. The documentation
warns that such a conﬁguration would enable fragment at-
tacks to be eﬀective denial-of-service attacks.
internal networkexternal networktraffic generatorsremote hosts1000baseSX1000baseTX1000baseTX100baseTX100baseTXBroSnort6500Cisco..............Cisco6500delayemulatorPIX 515eCiscolegitimate requestsmace trafficlegitimate responses12000Cisco12000Cisco50msAdtech SX−141000baseTXOC3OC385short while because of this state requirement3. While there
is still some memory available for buﬀering packets as they
ﬂow through the system, this memory pool is now much
smaller and consequently, the PIX has diminished ability
to absorb bursts of packets. This situation does not oc-
cur with the spoofed SYN ﬂood, since the source addresses
do not conform to the NAT conﬁguration at the PIX and
are dropped.
In our traces, we see persistent dropping of
legitimate packets during the non-spoofed SYN ﬂood and
multimodal experiments (in both low and high background
traﬃc regimes) and aggregate traﬃc rates through the PIX
clearly show the well-known poor performance of TCP in
the face of such high packet loss:
for the low background
SYN ﬂood experiment using only one MACE host, the in-
bound (external to internal) packet rate through the PIX
for the spoofed SYN ﬂood is nearly twice that of the non-
spoofed SYN ﬂood. For experiments with more than one
MACE process, the results are more dramatic. In summary,
maintaining state and managing system resources under a
low rate non-spoofed SYN ﬂood is diﬃcult even for a spe-
cialized device. Considering the rate at which resources con-
sumed by the embryonic connections are reclaimed by the
PIX, there is probably a “sweet spot” at which SYNs can be
sent at a low enough rate to cause problems for good traﬃc,
but are not at a high enough rate to easily detect.
The Welchia and Blaster worms, as with other worms,
are typically short ﬂows, so even with a low attack rate the
primary eﬀect on the PIX is an increased rate of connec-
tion initiations. To the PIX (without any special packet
ﬁlters installed) these worms look like benign traﬃc and are
treated the same as all other legitimate packets. In our ex-
periments, the PIX appears to be suﬃciently provisioned to
handle the increased volume.
Finally, it is interesting to note that while all Rose and
spoofed SYN ﬂood packets are dropped by the PIX, these
attacks have peculiar eﬀects on CPU usage. Without de-
tailed internal information of the PIX, we can only surmise
that the path for handling IP fragments is signiﬁcantly faster
than the process of matching a source address to the NAT
conﬁguration at the PIX (though, as pointed out above,
there is a potential denial-of-service problem related to frag-
ment processing).
Summary: (1) Non-spoofed low-rate SYN ﬂoods are eﬀec-
tive resource exploits leading to signiﬁcant service degra-
dation, and (2) Obfuscations via packet fragmentation are
eﬀective resource exploits against poorly conﬁgured systems.
4.3.2 Effects on Bro and Snort
There is a sharp contrast between behavior of Bro and
Snort. For example, the Rose attack has little eﬀect on Bro,
but an enormous impact on Snort. Since Bro and Snort
receive raw packets from the network interface, they must
perform reassembly of fragments. Bro is clearly able to han-
dle fragments more eﬃciently than Snort, even though Snort
maintains much less overall state than Bro.
For Bro as with the PIX, the non-spoofed SYN ﬂood has
the greatest impact on CPU load and packet loss. For the
3There are timeouts deﬁned in the PIX to reclaim resources
used by idle and half-closed connections, and a feature called
“ﬂoodguard” which essentially prioritizes which resources
to reclaim in order to deal with resource shortages. Our
experiments are shorter than either one of the default values
for these timeouts (1 hour for idle connections, 10 minutes
for half-closed connections).
Figure 4: CPU utilization measurements. Results
for the PIX, Bro and Snort are in top, middle, and
bottom rows, respectively. Left and right columns
show results for low and high background traﬃc
loads, respectively. Load levels along the x-axis cor-
respond to number of MACE hosts used in each test.
Each MACE host generates roughly 1 Mbps of traf-
ﬁc regardless of attack or background traﬃc level.
Figure 5: Packet loss measurements. Results for
the PIX, Bro and Snort are in top, middle, and bot-
tom rows, respectively. Left and right columns show
results for low and high background traﬃc loads, re-
spectively. Plots for the PIX show packet drops for
benign traﬃc only, while plots for Bro and Snort
show aggregate packet drops. Load levels along the
x-axis correspond to number of MACE hosts used
in each test. Each MACE host generates roughly 1
Mbps of traﬃc regardless of attack or background
traﬃc level.
01234502060100loadpercent utilizationPIX FirewallWelchiaSYN floodSYN flood (spoofed)Rosemultimodallow background load01234502060100loadpercent utilizationBroWelchiaSYN floodSYN flood (spoofed)Rosemultimodal01234502060100loadpercent utilizationSnortWelchiaSYN floodSYN flood (spoofed)Rosemultimodal01234502060100loadpercent utilizationPIX FirewallWelchiaSYN floodSYN flood (spoofed)Rosemultimodalhigh background load01234502060100loadpercent utilizationBroWelchiaSYN floodSYN flood (spoofed)Rosemultimodal01234502060100loadpercent utilizationSnortWelchiaSYN floodSYN flood (spoofed)Rosemultimodal0123450204060loadpercent lossPIX FirewallWelchiaSYN floodSYN flood (spoofed)Rosemultimodallow background load0123450204060loadpercent lossBroWelchiaSYN floodSYN flood (spoofed)Rosemultimodal0123450204060loadpercent lossSnortWelchiaSYN floodSYN flood (spoofed)Rosemultimodal0123450204060loadpercent lossPIX FirewallWelchiaSYN floodSYN flood (spoofed)Rosemultimodalhigh background load0123450204060loadpercent lossBroWelchiaSYN floodSYN flood (spoofed)Rosemultimodal0123450204060loadpercent lossSnortWelchiaSYN floodSYN flood (spoofed)Rosemultimodal86non-spoofed SYN ﬂood, Bro maintains state for all attack-
induced connections. Although Bro periodically expires idle
connection state, the rate of SYNs in our experiment was
high enough that Bro eventually exhausted available mem-
ory4. Since the table of known connections continues to grow
during this attack, connection state lookups are more costly.
The resulting eﬀect on packet drops is clearly shown in the
center column graphs of Figure 5. The reason the spoofed
SYN ﬂood has relatively little impact on Bro is that the
PIX silently blocks the spoofed SYNs so Bro will never see
a SYN/ACK response. Apparently this lack of response al-
lows Bro to ﬂush the embryonic connection state in a more
eﬃcient manner.
Except for the Welchia attack, Snort performs similarly
under all attacks. The SYN ﬂoods, Rose, and multimodal
attacks each contain packet-level attacks in contrast to Welchia,
which (at least from the perspectives of IP and TCP) looks
like legitimate background traﬃc to Snort5. Eﬃciently pro-
cessing ill-formed packets and pathological packet sequences
is clearly a requirement and a challenge for NIDS.
With respect to packet loss, Bro and Snort again exhibit
contrasting behavior. Except for the Welchia attack, Snort
consistently drops roughly 20-30% of all packets once MACE
traﬃc is introduced. Bro, despite maintaining signiﬁcant
connection-level state, drops a relatively small proportion of
packets except for the non-spoofed SYN ﬂood attack. For
both NIDS, any signiﬁcant level of packet dropping will af-
fect the ability of the tool to detect ongoing attacks. Ad-
ditionally, knowledge of packet dropping behavior could be
exploited by an attacker to launch a relatively benign low-
rate attack in order to mask one that is more insidious.
Summary: (1) Multiple attack vectors are eﬀective resource
exploits leading to packet loss, implying degraded detection
rates, and (2) The marginal impact of resource exploits does
not appear to be greater for NIDS maintaining connection
state.
5. CONCLUSIONS AND FUTURE WORK
The escalation of malicious activity in the Internet mo-
tivates the need for better tools to measure the resiliency
of routers and middleboxes to malicious traﬃc. To address
this need, we propose MACE, a framework for malicious
network traﬃc generation. The MACE architecture is com-
posed of three building blocks: exploits, obfuscators, and
propagation elements. These components deﬁne and create
malicious traﬃc for use in laboratory testing of routers and
network security infrastructure. We provided experimen-
tal results of measurements conducted on a popular ﬁrewall
and two network intrusion detection systems to document
the varying responses of these systems to malicious traﬃc.
Our results show that relatively low rates of attack traﬃc
can exploit the overheads of maintaining connection state or
ineﬃcient processing of certain packets.
A tool like MACE can be used for testing and reﬁning the
operation of network systems, but if in the wrong hands,
could be used for generating malicious traﬃc in the live In-
ternet. Our plan for making MACE available to a wider
4We also experimented with the reduce-memory policy
script with Bro, which caused an increase in CPU usage
and higher packet loss rates for all attacks.
5The default conﬁguration of Snort lacks specialized rules
for processing HTTP traﬃc. Enabling HTTP-speciﬁc rules
causes higher CPU load and packet drops for all attack pro-
ﬁles.
community is to supply the code only to legitimate researchers
and, to the best of our ability, keep careful documentation
regarding who has copies of the code. Despite these pre-
cautions, there remains the possibility that MACE could be
misused. While MACE cannot self-propagate, it could be
used for seeding new worms.
We plan to expand the list of exploit and obfuscation
building blocks within MACE and to make improvements to
the volume of exploit traﬃc that MACE is able to produce.
We believe these enhancements will facilitate the laboratory
emulation of large-scale failure scenarios using more elabo-
rate physical and logical topologies and a greater diversity
of network devices.
6. ACKNOWLEDGEMENTS
We thank Somesh Jha, Jon Giﬃn, Shai Rubin and the
anonymous reviewers for helpful comments.
This material is based upon work supported by the Na-
tional Science Foundation under Grant No. 0335234 and by
support from Cisco Systems. Any opinions, ﬁndings, and
conclusions or recommendations expressed in this material
are those of the authors and do not necessarily reﬂect the
views of the National Science Foundation or Cisco Systems.
7. REFERENCES
[1] Microsoft Security Bulletin MS03-007. http://www.microsoft-
.com/technet/security/bulletin/MS03-007.mspx, 2003.
[2] Microsoft Security Bulletin MS03-026. http://www.microsoft-
.com/technet/security/bulletin/MS03-026.mspx, 2003.
[3] Nessus. http://www.nessus.org, 2004.
[4] The Network Simulator – ns-2. http://www.isi.edu/nsnam/ns,
2004.
[5] NISCC Vulnerability Advisory 236929.
http://www.uniras.gov.uk/vuls/2004/236929/, 2004.
[6] THOR: A Tool to Test Intrusion Detection Systems by
Variations of Attacks. http://thor.cryptojail.net/, 2004.
[7] M. Allman. On the Performance of Middleboxes. In Proceedings
of ACM SIGCOMM Internet Measurement Conference, 2003.
[8] E. J. Aronne. The Nimda worm: An overview.
http://www.sans.org/rr/papers/36/95.pdf, 2001.
[9] P. Barford and M. Crovella. Generating Representative Web
Workloads for Network and Server Perfromance Evaluation. In
Proceedings of ACM SIGMETRICS, 1998.
[10] J. Cowie, A. Ogielsky, B. Premore, and Y. Yuan. Global
Routing Instabilities Triggered by CodeRed II and Nimda
Worm Attacks.
http://www.renesys.com/projects/bgp instability, 2001.
[11] S. Crosby and D. Wallach. Denial of service via algorithmic
[12] Gandalf. IP Fragmentation −− > The Rose Attack.
complexity attacks. In USENIX Security, 2003.
http://www.securityfocus.com/archive/1/359144, 2004.
[13] W. Lee, J. B. Cabrera, A. Thomas, N. Baliwalli, S. Saluja, and
Y. Zhang. Performance Adaptation in Real-Time Intrusion
Detection Systems. In Proceedings of RAID, 2002.
[14] R. Lippmann, D. J. Fried, I. Graf, J. W. Haines, K. R. Kendall,
D. McClung, D. Weber, S. E. Webster, D. Wyschogrod, R. K.
Cunningham, and M. A. Zissman. Evaluating Intrusion
Detection Systems: 1998 DARPA Oﬀ-line Intrusion Detection
Evaluation. In Proceedings of IEEE Security Symposium,
1998.
[15] J. Mirkovic and P. Reiher. A Taxonomy of DDoS Attack and
DDoS Defence Mechanisms. ACM SIGCOMM Computer
Communication Review, 32(2), 2004.
[16] D. Mutz, G. Vigna, and R. Kemmerer. An Experience
Developing an IDS Simulator for the Black-Box Testing of
Network Intrusion Detection Systems. In Proceedings of
ACSAC, 2003.
[17] J. Sommers and P. Barford. Self-Conﬁguring Network Traﬃc
Generation. In Proceedings of ACM SIGCOMM Internet
Measurement Conference, 2004.
[18] N. Weaver, V. Paxson, S. Staniford, and R. Cunningham. A
Taxonomy of Computer Worms. In Proceedings of CCS
Worms, 2003.
87