of time as performed by BotWatcher.
Table 2. Resilience to time-based evasion techniques.
Our experiments show that there are three types of time-based evasion tech-
niques. These are listed in Table 2. The classic technique is performed by the
malware on the client side. This includes calling an API function to sleep or by
performing time-consuming computations before actually executing the mali-
cious payload (e.g. Sect. 3.2 Dyzap). The second technique is to delay the exe-
cution on the server side (e.g. Sect. 3.2 Gamarue). A combination of these can
also be used (e.g. Sect. 3.4 Necurs). Classical sandboxes cannot cope with these
techniques. The research community proposed several techniques to overcome
time-based evasion techniques on the client side [21]. However, they remain inef-
fective against server-based techniques. Since we perform monitoring over an
extended period of time, we are less likely to be aﬀected by client-side and
server-side time-based evasion technique.
5 Limitations
This section discusses limitations of BotWatcher. These limitations are mem-
ory dump frequency and analysis environment detection.
5.1 Memory Dump Frequency
BotWatcher does not monitor every change of the virtual analysis environ-
ment’s memory. Execution events that start and terminate between two consec-
utive memory dumps might go missed by BotWatcher. However, the corre-
sponding artifacts usually stay for a longer period of time in memory. Therefore,
BotWatcher ﬁnds these data structures and can still detect the corresponding
short-living execution events.
5.2 Analysis Environment Detection
BotWatcher analyzes malware in a non invasive fashion. However, the malware
is run in a virtual analysis environment. Like any dynamic analysis system,
BotWatcher: Transparent and Generic Botnet Tracking
583
BotWatcher can be detected by malware [11]. As a result the malware might
refuse to work properly. However, this is increasingly unlikely since today several
productive systems run in virtual machines. We also try to minimize the chance
that malware detects our analysis environment by hardening it. For example,
we assign real vendor names to virtual hardware devices instead of the default
names that are used to ﬁngerprint virtual machines.
An alternative approach would be using bare-metal machines instead of vir-
tual machines [20]. When deploying BotWatcher on bare-metal machines addi-
tional challenges have to be faced. BotWatcher’s analysis steps are based on
memory dumps and network traﬃc. We could implement the interception of net-
work traﬃc at networking switches (e.g. mirror port). However, the creation of
memory dumps would be a little bit more demanding. A possible way would be
direct memory access (DMA). DMA allows hardware devices such as network
cards or hard disks to directly read and write the main memory [29]. For exam-
ple, a specially crafted PCI device would be needed. With it, we could create
continuously memory dumps. Unfortunately, it would not be possible to read out
all the system’s memory at once with DMA. This means that we would have to
soften the notion of an exact memory dump at point in time t since the creation
of a memory dump would last up to several seconds. However, Volatility can also
work with these memory dumps. Please note that the remaining analysis steps
of BotWatcher remain unchanged in the bare-metal case.
6 Related Work
This section discusses related work in the ﬁelds of botnet tracking and automated
dynamic malware analysis.
6.1 Botnet Tracking
Freiling et al. [17] are the ﬁrst to describe the tracking of botnets in a detailed
and scientiﬁc manner. Caballero et al. [15] performed a measurement study of
Pay-per-Install services. They inﬁltrated several of these services by implement-
ing milkers. A milker is a hand-crafted replica of a malware downloader that
only downloads the malicious payload but does not execute it. Several publica-
tions and projects focus on tracking one single malware component of one botnet
instance. Plohmann et al. [24] tracked the Miner botnet for four months. The
public project ZeuS Tracker tracks Zeus botnet instances [9]. Rossow et. al [25]
propose several attack methods for P2P botnets. Their paper features also the
tracking of several P2P botnets like ZeusP2P over six weeks. BotWatcher is
diﬀerent from these works. Our approach focuses on generic tracking of multi-
component botnets in an automated fashion. We provide a global overview
of these botnets without assuming any previous knowledge about the tracked
botnet.
Rossow et al. performed a large-scale and long-term analysis for malware
downloaders [26]. They analyzed 32 Windows-based malware downloader over
584
T. Barabosch et al.
two years. They used the Sandnet [27] to execute and dynamically analyze down-
loaders’ communication architectures, carrier protocols and encryption schemes.
While this work presents a generic long-term botnet monitoring system, it does
not follow the transparency goal. For example, the system is based on kernel-
based Windows system driver that records the ﬁle images whenever new processes
are forked or system drivers are loaded.
6.2 Botnet Inﬁltration and Takeover
We aim to generically and transparently analyze unknown botnets. Orthogo-
nal related work monitors previously-known botnets. These approaches leverage
knowledge about the functionality and structure of botnets to gain detailed
information about several aspects of the botnet operation. For example, Kanich
et al. inﬁltrated the Storm botnet by impersonating proxy peers in the overlay
network [19]. They used this approach to analyze two spam campaigns. Stone-
Gross et al. took over the Torpig botnet C&C infrastructure and performed a
live analysis [28]. This enabled the authors to provide estimates on the botnet
size and statistics about the stolen data. Rossow et al. presented several generic
attacks against P2P botnets and used them to evaluate the resilience of eleven
active P2P botnets [25]. Using these attacks, the authors provide estimation of
botnet sizes. The approaches provide more detailed and accurate insights than
BotWatcher. However, they rely on previous knowledge and are diﬃcult to adapt
to new and previously-unknown botnets.
6.3 Automated Dynamic Malware Analysis
Willems et al. [30] present CWSandbox, one of the ﬁrst dynamic malware sys-
tem for collecting behavioral information. To achieve this, CWSandbox injects a
library into every process space and hooks several APIs. The sandbox is intended
for quick behavior-analysis of a large number of samples. Lengyel et al. [23]
present DRAKVUF, a system that uses active virtual machine introspection by
injecting breakpoints into the monitored guest. Each malware sample is run for
sixty seconds and behavior information is extracted. Even though they claim
their system to be transparent, the injected breakpoints can be easily found by
self-hashing [18]. Their system is also vulnerable to time-based evasion tech-
niques. Kirat et al. [20] propose BareCloud, a dynamic analysis system based
on bare metal machines. This system does not introduce in-guest monitoring
components and it is therefore transparent. Although BareCloud focuses on the
detection of evasive malware and not on botnet tracking, it can be extended to
support our techniques. By periodically providing memory dumps and network
traﬃc, our techniques can be directly applied on top of bare-metal systems like
BareCloud. A bare-metal solution of BotWatcher might be built on top of
BareCloud (see Sect. 5.2).
BotWatcher is diﬀerent from these systems. Our approach does not focus
on quickly processing as much malware samples as possible, but rather it focuses
BotWatcher: Transparent and Generic Botnet Tracking
585
on investigating the life-cycle of complex botnets. These botnets consists of sev-
eral components that can be dynamically downloaded at any point during the
botnet operation.
7 Conclusion and Future Work
BotWatcher is a novel approach for transparent and generic botnet tracking.
It works in a non-invasive way and oﬀers a host-based (memory dumps) as well
as network-based (network traﬃc) view of the botnet life-cycle. To this end,
BotWatcher analyses the evolution of the analysis environment’s state and
reconstructs the actions that caused this evolution. Our monitoring approach is
less likely to be aﬀected by time-based evasion techniques – on the client and
the server side – since BotWatcher tracks botnets for a longer period of time
than typical sandboxes.
We implemented BotWatcher for Microsoft Windows and Mac OS X for
both 32- and 64-bits. Our experiments show that BotWatcher provided valu-
able insights into the behavior of the observed botnets. These insights would
allow security researchers and law enforcement to better understand the modus
operandi of the botnets in order to take further actions.
Future work includes extending the set of inference rules and long-term inves-
tigations of botnets. It will also focus on porting BotWatcher to further plat-
forms like Android in order to cope with future threats. We also intend to extend
the source of information from which we extract the system state to include the
hard disk. Furthermore, we will evaluate the current way of creating memory
dumps and other possible solutions in order to minimize the time during which
the VM is unresponsive.
Acknowledgments. We would like to thank our shepherd Christian Rossow for his
assistance to improve the quality of this paper. We also want to express our gratitude
toward the reviewers for their helpful feedback, valuable comments and suggestions.
References
1. Blue Coat Labs, CryptoLocker, Kegotip, Medfos Malware Triple-Threat,
26 September 2015. http://bluecoat.com/security-blog/2013-10-11/cryptolocker-
kegotip-medfos-malware-triple-threat
2. Kaspersky Lab ZAO, The Banking Trojan Emotet: Detailed Analysis, 26
September 2015. http://securelist.com/analysis/publications/69560/the-banking-
trojan-emotet-detailed-analysis
3. Microsoft Malware Protection Center, MSRT January 2015 - Dyzap, 26 September
2015. http://blogs.technet.com/b/mmpc/archive/2015/01/13/msrt-january-2015-
dyzap.aspx
4. Microsoft Malware Protection Center, Unexpected reboot: Necurs, 26 September
2015. http://blogs.technet.com/b/mmpc/archive/2012/12/07/unexpected-reboot-
necurs.aspx
586
T. Barabosch et al.
5. Oracle VirtualBox, 26 September 2015. www.virtualbox.org
6. The Bro Network Security Monitor, 26 September 2015. www.bro.org
7. The netﬁlter project (1999). www.netﬁlter.org
8. The Volatility Foundation, 26 September 2015. www.volatilityfoundation.org
9. ZeuS Tracker, 26 September 2015. www.zeustracker.abuse.ch
10. Zscaler Research, Evolution of Upatre Trojan Downloader, 26 September 2015.
www.research.zscaler.com/2014/11/evolution-of-upatre-trojan-downloader.html
11. Balzarotti, D., Cova, M., Karlberger, C., Kirda, E., Kruegel, C., Vigna, G.: Eﬃcient
detection of split personalities in malware. In: Network and Distributed System
Security Symposium (NDSS) (2010)
12. Barabosch, T.: Complementary material used in Botwatcher: Transparent and
Generic Botnet Tracking, 26 September 2015. http://net.cs.uni-bonn.de/wg/cs/
staﬀ/thomas-barabosch/
13. Barabosch, T., Eschweiler, S., Gerhards-Padilla, E.: Bee master: detecting host-
based code injection attacks. In: Dietrich, S. (ed.) DIMVA 2014. LNCS, vol. 8550,
pp. 235–254. Springer, Heidelberg (2014)
14. Bilge, L., Kirda, E., Kruegel, C., Balduzzi, M.: EXPOSURE: ﬁnding malicious
domains using passive DNS analysis. In: Network and Distributed System Security
Symposium (NDSS) (2011)
15. Caballero, J., Grier, C., Kreibich, C., Paxson, V.: Measuring pay-per-install: the
commoditization of malware distribution. In: USENIX Security Symposium (2011)
16. Denneman, F.: Memory Deep Dive - Optimizing for Performance, 26 September
2015. http://frankdenneman.nl/2015/02/20/memory-deep-dive/
17. Freiling, F.C., Holz, T., Wicherski, G.: Botnet tracking: exploring a root-cause
methodology to prevent distributed denial-of-service attacks. In: di Vimercati, S.C.,
Syverson, P.F., Gollmann, D. (eds.) ESORICS 2005. LNCS, vol. 3679, pp. 319–335.
Springer, Heidelberg (2005)
18. Horne, B., Matheson, L.R., Sheehan, C., Tarjan, R.E.: Dynamic self-checking tech-
niques for improved tamper resistance. In: Sander, T. (ed.) DRM 2001. LNCS, vol.
2320, pp. 141–159. Springer, Heidelberg (2002)
19. Kanich, C., Kreibich, C., Levchenko, K., Enright, B., Voelker, G.M., Paxson, V.,
Savage, S.: Spamalytics: an empirical analysis of spam marketing conversion. In:
Proceedings of the 15th ACM Conference on Computer and Communications Secu-
rity (CCS) (2008)
20. Kirat, D., Vigna, G., Kruegel, C.: BareCloud: bare-metal analysis-based evasive
malware detection. In: USENIX Security Symposium (2014)
21. Kolbitsch, C., Kirda, E., Kruegel, C.: The power of procrastination: detection and
mitigation of execution-stalling malicious code. In: ACM Conference on Computer
and Communications Security (CCS) (2011)
22. Kreibich, C., Weaver, N., Kanich, C., Cui, W., Paxson, V.: GQ: practical con-
tainment for measuring modern malware systems. In: ACM SIGCOMM Internet
Measurement Conference (IMC) (2011)
23. Lengyel, T.K., Maresca, S., Payne, B.D., Webster, G.D., Vogl, S., Kiayias, A.: Scal-
ability, ﬁdelity and stealth in the DRAKVUF dynamic malware analysis system.
In: Annual Computer Security Applications Conference (ACSAC) (2014)
24. Plohmann, D., Gerhards-Padilla, E.: Case study of the Miner Botnet. In: Interna-
tional Conference on Cyber Conﬂict (CYCON) (2012)
25. Rossow, C., Andriesse, D., Werner, T., Stone-Gross, B., Plohmann, D., Dietrich,
C.J., Bos, H.: P2PWNED: modeling and evaluating the resilience of peer-to-peer
botnets. In: IEEE Symposium on Security and Privacy (S&P) (2013)
BotWatcher: Transparent and Generic Botnet Tracking
587
26. Rossow, C., Dietrich, C., Bos, H.: Large-scale analysis of malware downloaders. In:
Flegel, U., Markatos, E., Robertson, W. (eds.) DIMVA 2012. LNCS, vol. 7591, pp.
42–61. Springer, Heidelberg (2013)
27. Rossow, C., Dietrich, C.J., Bos, H., Cavallaro, L., van Steen, M., Freiling, F.C.,
Pohlmann, N.: Sandnet: network traﬃc analysis of malicious software. In: Proceed-
ings of Building Analysis Datasets and Gathering Experience Returns for Security
(BADGERS) (2011)
28. Stone-Gross, B., Cova, M., Cavallaro, L., Gilbert, B., Szydlowski, M., Kemmerer,
R., Kruegel, C., Vigna, G.: Your Botnet is My Botnet: analysis of a Botnet takeover.
In: Proceedings of the 16th ACM Conference on Computer and Communications
Security (CCS) (2009)
29. Weis, S.: Protecting data in use from ﬁrmware and physical attacks. In: BlackHat
(2014)
30. Willems, C., Holz, T., Freiling, F.: Toward automated dynamic malware analysis
using CWSandbox. In: IEEE Symposium on Security and Privacy (S&P) (2007)