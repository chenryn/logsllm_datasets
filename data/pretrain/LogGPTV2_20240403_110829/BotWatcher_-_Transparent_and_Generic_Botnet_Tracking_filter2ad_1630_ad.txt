### Resilience to Time-Based Evasion Techniques

Our experiments demonstrate the existence of three types of time-based evasion techniques, as summarized in Table 2. The first technique involves the malware performing actions on the client side, such as calling an API function to sleep or executing time-consuming computations before delivering the malicious payload (e.g., Dyzap, Section 3.2). The second technique delays the execution on the server side (e.g., Gamarue, Section 3.2). A combination of both client-side and server-side techniques can also be employed (e.g., Necurs, Section 3.4).

Traditional sandboxes are often ineffective against these evasion techniques. While the research community has proposed several methods to counteract client-side time-based evasion [21], these approaches remain inadequate for server-side evasion. BotWatcher, by monitoring over extended periods, is better equipped to detect and mitigate both client-side and server-side time-based evasion techniques.

### Limitations

This section outlines the limitations of BotWatcher, which include memory dump frequency and analysis environment detection.

#### 5.1 Memory Dump Frequency

BotWatcher does not capture every change in the virtual analysis environment's memory. Execution events that start and terminate between two consecutive memory dumps may be missed. However, the associated artifacts typically persist in memory for a longer duration. As a result, BotWatcher can still detect these short-lived execution events by identifying the relevant data structures.

#### 5.2 Analysis Environment Detection

BotWatcher analyzes malware in a non-invasive manner within a virtual analysis environment. Like any dynamic analysis system, BotWatcher can be detected by malware [11], potentially leading to the malware refusing to execute properly. This risk is mitigated by the increasing use of virtual machines in production systems. We further minimize the likelihood of detection by hardening the analysis environment, such as assigning real vendor names to virtual hardware devices instead of default names commonly used to fingerprint virtual machines.

An alternative approach would be to use bare-metal machines instead of virtual machines [20]. Deploying BotWatcher on bare-metal machines presents additional challenges. BotWatcher's analysis relies on memory dumps and network traffic. Network traffic interception could be implemented at networking switches (e.g., using a mirror port). However, creating memory dumps on bare-metal machines would be more complex. Direct Memory Access (DMA) could be used, allowing hardware devices like network cards or hard disks to directly read and write the main memory [29]. A specially crafted PCI device would be required to create continuous memory dumps. Unfortunately, DMA cannot read all system memory at once, meaning the creation of a memory dump could take several seconds. Despite this, Volatility can still process these memory dumps, and the remaining analysis steps of BotWatcher remain unchanged in the bare-metal scenario.

### Related Work

This section discusses related work in the fields of botnet tracking and automated dynamic malware analysis.

#### 6.1 Botnet Tracking

Freiling et al. [17] were the first to describe botnet tracking in a detailed and scientific manner. Caballero et al. [15] conducted a measurement study of Pay-per-Install services, infiltrating these services with hand-crafted malware downloaders called "milkers." Other publications and projects focus on tracking specific components of individual botnets. For example, Plohmann et al. [24] tracked the Miner botnet for four months, while the public project ZeuS Tracker monitors Zeus botnet instances [9]. Rossow et al. [25] proposed attack methods for P2P botnets and tracked several P2P botnets, including ZeusP2P, over six weeks. BotWatcher differs from these works by focusing on the generic and automated tracking of multi-component botnets, providing a global overview without requiring prior knowledge of the botnet.

Rossow et al. [26] performed a large-scale, long-term analysis of 32 Windows-based malware downloaders over two years, using Sandnet [27] to analyze their communication architectures, carrier protocols, and encryption schemes. While this work presents a generic long-term botnet monitoring system, it lacks the transparency goal, relying on a kernel-based Windows system driver to record file images during process forking and system driver loading.

#### 6.2 Botnet Infiltration and Takeover

BotWatcher aims to generically and transparently analyze unknown botnets. Orthogonal related work focuses on monitoring previously known botnets, leveraging existing knowledge about botnet functionality and structure to gain detailed insights into their operations. For instance, Kanich et al. [19] infiltrated the Storm botnet by impersonating proxy peers in the overlay network to analyze spam campaigns. Stone-Gross et al. [28] took over the Torpig botnet C&C infrastructure, providing estimates of botnet size and statistics on stolen data. Rossow et al. [25] presented generic attacks against P2P botnets, evaluating the resilience of eleven active P2P botnets and estimating their sizes. These approaches offer more detailed and accurate insights but rely on prior knowledge and are difficult to adapt to new, unknown botnets.

#### 6.3 Automated Dynamic Malware Analysis

Willems et al. [30] introduced CWSandbox, one of the first dynamic malware systems for collecting behavioral information by injecting a library into every process space and hooking several APIs. Lengyel et al. [23] developed DRAKVUF, a system that uses active virtual machine introspection by injecting breakpoints into the monitored guest. Each malware sample is run for sixty seconds, and behavior information is extracted. Although they claim their system is transparent, the injected breakpoints can be easily detected by self-hashing [18], and the system is vulnerable to time-based evasion techniques. Kirat et al. [20] proposed BareCloud, a dynamic analysis system based on bare-metal machines, which does not introduce in-guest monitoring components and is thus transparent. While BareCloud focuses on detecting evasive malware rather than botnet tracking, it can be extended to support our techniques. By periodically providing memory dumps and network traffic, our techniques can be directly applied to bare-metal systems like BareCloud.

BotWatcher differs from these systems by not prioritizing the rapid processing of a large number of malware samples but instead focusing on investigating the lifecycle of complex botnets, which consist of multiple components that can be dynamically downloaded during operation.

### Conclusion and Future Work

BotWatcher is a novel approach for transparent and generic botnet tracking. It operates in a non-invasive manner, offering both host-based (memory dumps) and network-based (network traffic) views of the botnet lifecycle. By analyzing the evolution of the analysis environment's state and reconstructing the actions that caused this evolution, BotWatcher is less susceptible to time-based evasion techniques on both the client and server sides, as it tracks botnets over a longer period than typical sandboxes.

We have implemented BotWatcher for Microsoft Windows and Mac OS X, supporting both 32-bit and 64-bit systems. Our experiments show that BotWatcher provides valuable insights into botnet behavior, enabling security researchers and law enforcement to better understand and counteract these threats.

Future work includes extending the set of inference rules and conducting long-term investigations of botnets. We also plan to port BotWatcher to additional platforms, such as Android, to address future threats. Additionally, we aim to expand the sources of information for extracting the system state to include the hard disk. We will evaluate the current method of creating memory dumps and explore other possible solutions to minimize the time during which the VM is unresponsive.

### Acknowledgments

We would like to thank Christian Rossow for his assistance in improving the quality of this paper. We also express our gratitude to the reviewers for their helpful feedback, valuable comments, and suggestions.

### References

1. Blue Coat Labs, CryptoLocker, Kegotip, Medfos Malware Triple-Threat, 26 September 2015. http://bluecoat.com/security-blog/2013-10-11/cryptolocker-kegotip-medfos-malware-triple-threat
2. Kaspersky Lab ZAO, The Banking Trojan Emotet: Detailed Analysis, 26 September 2015. http://securelist.com/analysis/publications/69560/the-banking-trojan-emotet-detailed-analysis
3. Microsoft Malware Protection Center, MSRT January 2015 - Dyzap, 26 September 2015. http://blogs.technet.com/b/mmpc/archive/2015/01/13/msrt-january-2015-dyzap.aspx
4. Microsoft Malware Protection Center, Unexpected reboot: Necurs, 26 September 2015. http://blogs.technet.com/b/mmpc/archive/2012/12/07/unexpected-reboot-necurs.aspx
5. Oracle VirtualBox, 26 September 2015. www.virtualbox.org
6. The Bro Network Security Monitor, 26 September 2015. www.bro.org
7. The netfilter project (1999). www.netfilter.org
8. The Volatility Foundation, 26 September 2015. www.volatilityfoundation.org
9. ZeuS Tracker, 26 September 2015. www.zeustracker.abuse.ch
10. Zscaler Research, Evolution of Upatre Trojan Downloader, 26 September 2015. www.research.zscaler.com/2014/11/evolution-of-upatre-trojan-downloader.html
11. Balzarotti, D., Cova, M., Karlberger, C., Kirda, E., Kruegel, C., Vigna, G.: Efficient detection of split personalities in malware. In: Network and Distributed System Security Symposium (NDSS) (2010)
12. Barabosch, T.: Complementary material used in Botwatcher: Transparent and Generic Botnet Tracking, 26 September 2015. http://net.cs.uni-bonn.de/wg/cs/staff/thomas-barabosch/
13. Barabosch, T., Eschweiler, S., Gerhards-Padilla, E.: Bee master: detecting host-based code injection attacks. In: Dietrich, S. (ed.) DIMVA 2014. LNCS, vol. 8550, pp. 235–254. Springer, Heidelberg (2014)
14. Bilge, L., Kirda, E., Kruegel, C., Balduzzi, M.: EXPOSURE: finding malicious domains using passive DNS analysis. In: Network and Distributed System Security Symposium (NDSS) (2011)
15. Caballero, J., Grier, C., Kreibich, C., Paxson, V.: Measuring pay-per-install: the commoditization of malware distribution. In: USENIX Security Symposium (2011)
16. Denneman, F.: Memory Deep Dive - Optimizing for Performance, 26 September 2015. http://frankdenneman.nl/2015/02/20/memory-deep-dive/
17. Freiling, F.C., Holz, T., Wicherski, G.: Botnet tracking: exploring a root-cause methodology to prevent distributed denial-of-service attacks. In: di Vimercati, S.C., Syverson, P.F., Gollmann, D. (eds.) ESORICS 2005. LNCS, vol. 3679, pp. 319–335. Springer, Heidelberg (2005)
18. Horne, B., Matheson, L.R., Sheehan, C., Tarjan, R.E.: Dynamic self-checking techniques for improved tamper resistance. In: Sander, T. (ed.) DRM 2001. LNCS, vol. 2320, pp. 141–159. Springer, Heidelberg (2002)
19. Kanich, C., Kreibich, C., Levchenko, K., Enright, B., Voelker, G.M., Paxson, V., Savage, S.: Spamalytics: an empirical analysis of spam marketing conversion. In: Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS) (2008)
20. Kirat, D., Vigna, G., Kruegel, C.: BareCloud: bare-metal analysis-based evasive malware detection. In: USENIX Security Symposium (2014)
21. Kolbitsch, C., Kirda, E., Kruegel, C.: The power of procrastination: detection and mitigation of execution-stalling malicious code. In: ACM Conference on Computer and Communications Security (CCS) (2011)
22. Kreibich, C., Weaver, N., Kanich, C., Cui, W., Paxson, V.: GQ: practical containment for measuring modern malware systems. In: ACM SIGCOMM Internet Measurement Conference (IMC) (2011)
23. Lengyel, T.K., Maresca, S., Payne, B.D., Webster, G.D., Vogl, S., Kiayias, A.: Scalability, fidelity, and stealth in the DRAKVUF dynamic malware analysis system. In: Annual Computer Security Applications Conference (ACSAC) (2014)
24. Plohmann, D., Gerhards-Padilla, E.: Case study of the Miner Botnet. In: International Conference on Cyber Conflict (CYCON) (2012)
25. Rossow, C., Andriesse, D., Werner, T., Stone-Gross, B., Plohmann, D., Dietrich, C.J., Bos, H.: P2PWNED: modeling and evaluating the resilience of peer-to-peer botnets. In: IEEE Symposium on Security and Privacy (S&P) (2013)
26. Rossow, C., Dietrich, C., Bos, H.: Large-scale analysis of malware downloaders. In: Flegel, U., Markatos, E., Robertson, W. (eds.) DIMVA 2012. LNCS, vol. 7591, pp. 42–61. Springer, Heidelberg (2013)
27. Rossow, C., Dietrich, C.J., Bos, H., Cavallaro, L., van Steen, M., Freiling, F.C., Pohlmann, N.: Sandnet: network traffic analysis of malicious software. In: Proceedings of Building Analysis Datasets and Gathering Experience Returns for Security (BADGERS) (2011)
28. Stone-Gross, B., Cova, M., Cavallaro, L., Gilbert, B., Szydlowski, M., Kemmerer, R., Kruegel, C., Vigna, G.: Your Botnet is My Botnet: analysis of a Botnet takeover. In: Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS) (2009)
29. Weis, S.: Protecting data in use from firmware and physical attacks. In: BlackHat (2014)
30. Willems, C., Holz, T., Freiling, F.: Toward automated dynamic malware analysis using CWSandbox. In: IEEE Symposium on Security and Privacy (S&P) (2007)