title:Thwarting Memory Disclosure with Efficient Hypervisor-enforced Intra-domain
Isolation
author:Yutao Liu and
Tianyu Zhou and
Kexin Chen and
Haibo Chen and
Yubin Xia
Thwarting Memory Disclosure with Efﬁcient
Hypervisor-enforced Intra-domain Isolation
Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, Yubin Xia
Shanghai Key Laboratory of Scalable Computing and Systems &
Institute of Parallel and Distributed Systems
Shanghai Jiao Tong University, Shanghai, China
{ytliu.cc, zhoutianyu007, kalzium, haibochen, xiayubin}@sjtu.edu.cn
ABSTRACT
Exploiting memory disclosure vulnerabilities like the Heart-
Bleed bug may cause arbitrary reading of a victim’s mem-
ory, leading to leakage of critical secrets such as crypto keys,
personal identity and ﬁnancial information. While isolating
code that manipulates critical secrets into an isolated exe-
cution environment is a promising countermeasure, existing
approaches are either too coarse-grained to prevent intra-
domain attacks, or require excessive intervention from low-
level software (e.g., hypervisor or OS), or both. Further, few
of them are applicable to large-scale software with millions
of lines of code.
This paper describes a new approach, namely SeCage,
which retroﬁts commodity hardware virtualization exten-
sions to support eﬃcient isolation of sensitive code manip-
ulating critical secrets from the remaining code. SeCage is
designed to work under a strong adversary model where a
victim application or even the OS may be controlled by the
adversary, while supporting large-scale software with small
deployment cost. SeCage combines static and dynamic anal-
ysis to decompose monolithic software into several compart-
ments, each of which may contain diﬀerent secrets and their
corresponding code. Following the idea of separating con-
trol and data plane, SeCage retroﬁts the VMFUNC mecha-
nism and nested paging in Intel processors to transparently
provide diﬀerent memory views for diﬀerent compartments,
while allowing low-cost and transparent invocation across
domains without hypervisor intervention.
We have implemented SeCage in KVM on a commodity
Intel machine. To demonstrate the eﬀectiveness of SeCage,
we deploy it to the Nginx and OpenSSH server with the
OpenSSL library as well as CryptoLoop with small eﬀorts.
Security evaluation shows that SeCage can prevent the dis-
closure of private keys from HeartBleed attacks and memory
scanning from rootkits. The evaluation shows that SeCage
only incurs small performance and space overhead.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813690 .
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Ac-
cess control, information ﬂow controls
General Terms
Security
Keywords
Privacy protection, memory disclosure, virtualization
1.
INTRODUCTION
Problem. Cloud servers are increasingly being deployed
with services that touch critical secrets such as cryptographic
keys, personal identity and ﬁnancial information. Yet, such
secrets are being continually disclosed due to memory disclo-
sure attacks. For example, HeartBleed (CVE-2014-0160) [3,
23], as one of the most notorious vulnerabilities, can be lever-
aged by attackers to persistently read up to 64KB memory
data. This leads to the leakage of the most conﬁdential se-
crets such as private keys or session keys of all connections.
Actually, memory disclosure vulnerabilities are routinely
discovered and pose severe threats to the privacy of secrets.
Table 1 shows that there are 388 such vulnerabilities from
the CVE database according to the triggering mechanisms
for both applications and kernels, which can be exploited by
local (L column) or remote (R column) attacks. Worse even,
leakage of secrets can be directly done if an attacker gained
control over a privileged application or even the OS kernel
through other vulnerabilities such as privilege escalation.
Facing such a strong adversary model, it is notoriously
hard to prevent attackers from controlling victim applica-
tions or even the OS kernel from reading such memory-
resident secrets. This is further being exaggerated due to
the fact that large-scale software usually has a large code
base and thus large attack surfaces. While there have been
a number of approaches aiming at protecting an application
from various attacks, they still fall short in several aspects.
For example, hypervisor-based protection schemes [16, 17,
18, 53, 19] only provide protection at an application level
and thus vulnerabilities still exist inside a victim applica-
tion; approaches targeting at Pieces of Application Logic
(PAL) [34] require the PAL being self-contained and thus
allowing no interaction with other parts of an application.
This makes it hard to be adopted for some real and large
1607software like OpenSSL1. Further, due to the close-coupling
of security and functionality, prior approaches usually re-
quire frequent intervention from a privileged system (e.g.,
hypervisor), forcing users to make a tradeoﬀ between secu-
rity and performance.
Table 1: Sensitive memory disclosure vulnerabilities
from CVE (2000-2015)
Error type
Uninitialized memory
Out-of-bound read
Others
Use-after-free vuln
Permission uncheck
Bad error handling
Plaintext in memory
Bad null terminator
Invalid pointer
Oﬀ-by-one vuln
String format vuln
Leak to readable ﬁle
Total
Application
L
1
4
3
14
4
1
10
0
1
1
0
3
42
R
34
37
28
7
14
12
2
3
0
5
4
0
146
Kernel
R
L
8
104
4
20
16
7
4
6
0
10
0
8
0
0
0
6
6
0
0
0
0
0
0
1
23
177
Summary
147
65
54
31
28
21
12
9
7
6
4
4
388
Our solution. In this paper, we leverage the idea of priv-
ilege separation by hybrid analysis to (mostly) automatically
decompose a monolithic software system into a set of com-
partments, with each secret compartment containing a set of
secrets and its corresponding code and a main compartment
handling the rest of the application logic. This ensures that
only the functions inside a secret compartment can access
the secrets. As static analysis is usually imprecise and may
introduce large code base in the secret compartment, SeCage
further combines dynamic analysis to extract the most com-
monly used functions. To handle possible coverage issues,
SeCage resorts to runtime exception handling to detect if an
access is legal or not based on the static analysis result and
runtime information.
SeCage leverages hardware virtualization techniques to
enforce strong isolation among secret compartments and the
main compartment, even under a strong adversary model
such that an application or even the OS is controlled by an
attacker. Speciﬁcally, SeCage assigns each compartment a
completely isolated address space and leverages hardware-
assisted nested paging to enforce strong isolation. To pro-
vide secure and eﬃcient communication among components,
SeCage follows the idea of separating control plane from data
plane by using the VMFUNC feature from Intel’s hardware-
assisted virtualization support. In particular, SeCage ﬁrst
designates the security policy on which secret compartment
is invokable by another compartment to the CPU, and allows
such an invocation from being done without the hypervisor
intervention. This signiﬁcantly reduces the overhead caused
by frequent trapping into the hypervisor.
Evaluation on real-world applications. We have im-
plemented a prototype of SeCage in KVM using Intel’s hard-
ware virtualization support; we use CIL [1], an analysis
framework of C programming language, to (mostly) auto-
matically decompose a software system into a set of com-
1For example, the authors of TrustVisor [34] explicitly ac-
knowledged that “We faced the greatest porting challenge
with Apache + OpenSSL ...This proved to be diﬃcult due to
OpenSSL’s extensive use of function pointers and adaptabil-
ity to diﬀerent cryptographic providers and instead resort to
PolarSSL” in section 6.4.
partments. We further use a dynamic analysis engine to re-
ﬁne the results. To demonstrate the eﬀectiveness of SeCage,
we apply SeCage to Nginx and OpenSSH server with the
OpenSSL library, as well as the Linux kernel’s disk encryp-
tion module CryptoLoop to demonstrate its eﬀectiveness.
We use HeartBleed, kernel memory disclosure and rootkit
defenses as examples to illustrate how SeCage protects user-
deﬁned secrets. Our evaluation shows that SeCage only in-
troduces negligible performance overhead, since the portion
of secrets related code is small and there are very few hy-
pervisor interventions at runtime.
Contributions. In summary, this paper makes the fol-
lowing contributions:
• A new scheme to protect secrets from extensive attack
surfaces by compartmentalizing critical code and data
from normal ones.
• A separation of control plane (policy) and data plane
(invocation) for cross-compartment communication by
leveraging commodity hardware features (VMFUNC).
• A working prototype implemented on KVM and its
application to large-scale software such as Nginx and
OpenSSH with the OpenSSL library and the Cryp-
toLoop module in Linux kernel, as well as security and
performance evaluations that conﬁrm the eﬀectiveness
and eﬃciency of SeCage.
The rest of the paper is organized as follows: the next
section ﬁrst illustrates the architecture overview of SeCage
and the threat model. Section 3 and section 4 illustrate the
design and detailed implementation of the runtime isolation
and application decomposition parts of SeCage, followed by
the usage scenarios in section 5. Then the security evalu-
ation of SeCage and its incurred performance overhead are
evaluated in section 6 and section 7 accordingly. Finally,
we review and compare SeCage with state-of-the-art in sec-
tion 8, discuss the limitation of SeCage in section 9 and
conclude the paper in section 10.
2. OVERVIEW
The primary goal of SeCage is to oﬀer the strong assurance
of conﬁdentiality for user-speciﬁc secrets (e.g., private keys),
even facing a vulnerable application or a malicious OS. The
secondary goal of SeCage is to make the approach of SeCage
practical and thus can be deployed for large software systems
with small overhead.
2.1 Approach Overview
Hybrid analysis to extract secret closure. As secrets
may be copied and propagated through its lifecycle, it is far
from enough to simply secure the storage of secrets. Instead,
SeCage must provide a thorough mechanism to prevent se-
crets and their provenance from being disclosed during the
whole application execution, while not aﬀecting the normal
usage of the secrets. Hence, SeCage needs to ﬁnd a closure
of all functions that may manipulate the secrets.
One intuitive approach is using static analysis to discover
the closure of code. However, the static analysis still has
precision issues for large-scale software written in C/C++
due to issues such as pointer aliasing. This may easily lead
to a signiﬁcantly larger closure than necessary, which may
enlarge the code base of the secret compartment and add
16081
App
Decomposition
App
App
CODE
DATA
Main 
Compartment
Operating System
3
Trampoline
S Func
2
Memory Isolation
Initialization
Devices
CPU
Memory
DATA
Secret 
Compartment
Hypervisor
 Hardware
Secret
Control Flow in Initialization
Data Access during Runtime
Execution Flow during Runtime
Figure 1: Architecture overview of SeCage
a large number of unnecessary context switches. Another
approach would be rewriting the code related to secrets and
decoupling the operations of secrets into a standalone ser-
vice [13, 34], or even to a trusted third-party node. However,
this may involve high manual eﬀort and can be prohibitively
diﬃcult for large-scale software such as OpenSSL [34].
SeCage instead combines static and dynamic analysis to
extract the closures of functions related to secrets. It ﬁrst
uses static analysis to discover potential functions related
to secrets. To reduce the size of secret closure, it then re-
lies on dynamic analysis using a set of training input to
derive a compact and precise set of functions related to se-
crets. To handle coverage issue that a function may be legal
to touch the secrets but is excluded in the secret compart-
ment, SeCage adaptively includes this function to the secret
compartment according to the static analysis result and ex-
ecution context during runtime exception handling.
Hypervisor-enforced protection. Facing the strong
adversary model of a malicious OS, SeCage leverages a trusted
hypervisor to protect the privacy of secrets. Speciﬁcally,
SeCage runs the closure of a particular secret into a separate
compartment and leverages hardware virtualization support
to provide strong isolation among diﬀerent compartments.
Separating control and data plane. As each compart-
ment still needs to communicate with each other, it seems
inevitable that the hypervisor will need to frequently inter-
venes such communications. This, however, will cause fre-
quent VMExits and thus high overhead. To mitigate such
overhead, SeCage leverages the idea of separating control
and data plane to minimize hypervisor intervention. Specif-
ically, SeCage only requires the hypervisor to deﬁne policies
on whether a call between two compartments are legal (con-
trol plane), while letting the communications between two
compartments go as long as they conform to the predeﬁned
policies (data plane). In the entry gate of each compartment,
it may do further check of the caller to see if the commu-
nication should be allowed or not. SeCage achieves such
a scheme by leveraging the commodity hardware features
called VM functions (section 3.1).
Architecture overview. An overview of SeCage’s ar-
chitecture is shown in Figure 1. The protected application
is divided into one main compartment and a set of secret
compartments. Each secret compartment comprises a set
of secrets and the corresponding sensitive functions manip-
ulating them. We do not assume that the compartment is
self-contained, the functions inside are able to interact with
the main compartment of the application. However, SeCage
guarantees that the secret in one compartment cannot be ac-
cessed by other compartments of the same application and
the underlying software.
Once the compartments are generated (step 1(cid:13)), during
the application initialization phase (step 2(cid:13)), the hypervi-
sor is responsible to setup one isolated memory for each