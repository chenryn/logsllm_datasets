ization and while dvc is in an inactive state-i.e., 
presently executing the protocol with TO  as input-and 
that 
TO is not subsequently input to the device by the user.  This 
decouples the capture of dvc and T O ,  and is consistent with 
our motivation  that dvc is captured while not in use by  the 
user and, once captured, is unavailable to the user. 
We  denote by  ADV(S), where S g  {dvc,svr,ro}, the 
class of adversaries who succeed in capturing the elements 
of S. As such, ADV(&) E  ADV(&) if SI (I S 2 .  The se- 
curity goals of our schemes are informally stated as follows: 
I.  Any  adversary  in  ADV({svr,ro})  is  unable  to  forge 
signatures  or  decrypt  messages  for the  device  (with 
overwhelming probability). 
11.  Any  adversary  in  ADv({dvc})  can  forge  signatures 
or decrypt messages for the device with  probability  at 
most q/ID1 after q invocations of the server, where D 
is the space from which  the  user’s password  is drawn 
(uniformly at random). 
111.  Any  adversary  in  ADV({dvc,svr})  can  forge  signa- 
tures or decrypt messages for the device only if it suc- 
ceeds in an offline dictionary attack on the user’s pass- 
word. 
IV.  Any adversary in ADv({dvc, T O } )  can forge signatures 
or decrypt messages for the device only until the device 
key  is disabled  (in those schemes supporting key dis- 
abling),  and  subsequently  cannot  forge  signatures or 
decrypt messages for the device. 
3.2. Definitions 
In order to state our protocols to meet the goals outlined 
in Section 3.1, we first introduce some definitions and nota- 
tion. 
Security parameters  Let K  be the main cryptographic se- 
curity parameter; a reasonable value today may be K  = 160. 
We  will  use  X  >  K  as a secondary  security  parameter  for 
public  keys.  For  instance,  in  an  RSA  public  key  scheme 
may  we may set X  = 1024 to indicate that we use  1024-bit 
moduli. 
Hash functions  We use h, with an additional subscript as 
needed, to denote a hash function. Unless otherwise stated, 
the range of a hash function is (0, l}”. 
We do not specify here the exact security properties (e.g., 
one-wayness,  collision  resistance,  or  pseudorandomness) 
we  will  need  for  the  hash  functions  (or  keyed  hash  func- 
tions, below) that we use.  To formally  prove that our pro- 
tocols meet every goal outlined above, we generally require 
that  these  hash  functions  behave  like  random  oracles  [6]. 
(For  heuristics  on  instantiating  random  oracles,  see  [6].) 
However,  for certain  subsets  of  goals,  weaker  properties 
may suffice; details will be given in the individual cases. 
14 
Keyed hash functions  A  keyed  hash  function family  is 
a family  of hash  functions {fv}  parameterized by  a secret 
value w. We will  typically  write  fv(m) as f ( v , m ) ,  as this 
will  be convenient in  our proofs.  In this paper we employ 
various  keyed  hash  functions with  different ranges, which 
we will specify when not clear from context. 
We  will also use  a specific type of keyed hash function, 
a message authentication code (MAC). We  denote a MAC 
family  as  {mac,}. 
In this paper we do not require MACS 
to  behave  like  random  oracles, but  to  have  the  following 
standard property:  If a is unknown, then given zero or more 
it is computationally infeasible to 
pairs  , 
for any new m # mi. 
compute any pair  
Encryption schemes  An encryption scheme E  is a triple 
(G,,,,  E ,  D) of algorithms, the first two being  probabilis- 
tic,  and  all  running  in  expected  polynomial  time.  G,,, 
takes  as  input  lX and outputs a  public key  pair  ( p k , s k ) ,  
i.e.,  ( p k ,  s k )  t Genc(lX). E  takes a public key p k  and a 
message m as input and outputs an encryption c f o r m ;  we 
denote this c t Epk (m). D takes a ciphertext c and a secret 
key sk as input and returns either a message m such that c is 
a valid encryption of m, if such an m exists, and otherwise 
returns 1. Our protocols require an encryption scheme se- 
cure against adaptive chosen ciphertext attacks [37]. Practi- 
cal examples can be found in [7, 131. 
Signature schemes  A  digital  signature  scheme  S  is  a 
triple (GSPg , SI V) of algorithms, the first two being proba- 
bilistic, and all running in expected polynomial time.  Gszg 
takes  as input  lX and  outputs a  public key  pair  ( p k , s k ) ,  
i.e., ( p k ,  s k )  t Gszg(lA). S takes a message m and a se- 
cret key  sk  as input  and outputs a signature 0 for m, i.e., 
(I t S,,(m).  V takes a message m, a public key p k ,  and 
a candidate signature d for m as input and returns the bit 
b  = 1 if  0’ is  a  valid  signature for m, and  otherwise re- 
turns the bit  b  = 0.  That is, b  t V&(m,d). Naturally, if 
(I t Ssk(m), then Vpk(m,a) = 1. 
We  say  a  signature  scheme  is  niatchable  if  for  each 
public  key p k  produced by  GSzg(lA) 
there is  a  single se- 
cret key  sk  that  would  be  produced  (i.e.,  the  probability 
of  ( p k , s k )  t GSzg(lX) and  (pk,sk’) t Gszg(lX) with 
sk # sk‘  is zero), and there is a probabilistic  algorithm M 
that runs in expected polynomial  time and that takes as in- 
put a public key pk and a secret key sk, and returns 1 if sk is 
the single private key corresponding to p k  (i.e., if Gszg (1’) 
could  have  produced  ( p k ,  sk) with  non-zero  probability) 
and returns 0 otherwise. In most popular signature schemes, 
including those we consider here, there is a straightforward 
way to implement the M  function.  (We can define match- 
able encryption schemes similarly.) 
4. A simple protocol without key disabling 
We  begin by  presenting a simple protocol for achieving 
goals I, 11, and I11 described in Section 3.1. Since this pro- 
tocol remains the same regardless of whether the device is 
used  to decrypt  or  sign, here  we  discuss the  protocol  us- 
ing terminology as  if  the  device is  used  for signing.  This 
scheme is parameterized by  the device’s signature scheme 
S  and an  encryption scheme E  for the  server,’ and  works 
independently  of the form of S and E. We thus refer to this 
protocol as “generid”, and denote the protocol by GENERIC. 
The intuition behind GENERIC is exceedingly simple. At 
device initialization  time,  the  private  key  of  the  device is 
encrypted in a way that can be recovered  only with the co- 
operation  of both  the device (if it is given  the user’s pass- 
word) and the server.  This ciphertext, called  a ticket, also 
embeds other information that enables the server to authen- 
ticate requests that accompany the ticket as coming from a 
device  that  has been  given the user’s password.  When the 
device  is required  to perform an operation with its private 
key, it sends the ticket to the server.  The device  accompa- 
nies the ticket with evidence of its knowledge of the user’s 
password; the server can check this evidence against  infor- 
mation  in  the  ticket.  The server then  performs a transfor- 
mation on the ticket to “partially decrypt” it, and returns the 
result  to  the  device.  The device completes the  decryption 
to recover its private key. The device may then use  the pri- 
vate  key  for performing the required operations, and  may 
even cache the  key  in  volatile  memory  for  some period  of 
time so that additional operations can be performed without 
contacting the server for each one. 
Note that a protocol of this form cannot support key dis- 
abling:  if  an  attacker  captures the  device and  guesses the 
user’s password  (i.e., the adversary is  in  ADV({dvc, T O } ) ) ,  
then it can retrieve the private key and keep it forever. Lim- 
iting  the  damage an  attacker can  do in  this  case requires 
assistance  from some external  mechanism for revoking the 
device’s public key, if such a mechanism exists. 
In  the  following  two  sections,  we  detail  the  steps  of 
the  initialization  algorithm and  the  key  retrieval  protocol. 
This protocol can be formally proven (in the random oracle 
model) to meet  goals 1-111  of Section  3.1, though  we omit 
this proof here due to space limitations. 
4.1. Device initialization 
The inputs to device initialization  are the server’s public 
encryption  key pk,,,,  the  user’s password TO, the  device’s 
public signature verification key pkdvc, and the correspond- 
ing private signing key skdvc. The steps of the initialization 
‘When speaking  about security  of this and later  protocols  against  off- 
line dictionary attack, we also include a parameter ’D  to denote a dictionary 
of the possible passwords. 
15 
algorithm proceed  as follows, where ‘‘z t~ S” is used to 
denote  assignment  to  z  of  an  element  of  S  selected  uni- 
formly at random. 
dvc 
svr 
The values U, a, r, pkdvc, and pk,,,  are saved in stable stor- 
age on the device.  All  other values, including skdvc,  TO, b 
and c, are deleted from the device.  We assume that f  out- 
puts a value of length equal to the length of Skdvc.  For the 
protocol of Section 4.2, we assume this length is A. 
The  value  r  is  the  “ticket”  to  which  we  referred  pre- 
viously.  Note  that  this  ticket encapsulates  a  value  c from 
which the device can  recover Skdvc  with  knowledge of the 
user’s password.  The server’s role in the key retrieval pro- 
tocol will thus involve decrypting this ticket and sending c 
to the device (encrypted).  Note that c does not provide the 
basis for the server to mount an attack against Skdvc,  since 
the server does not know U. 
4.2. Key retrieval protocol 
The input provided to  the device to  initiate the key  re- 
trieval protocol is the input password 7r  and all of the values 
saved on stable storage in the initialization protocol of Sec- 
tion 4.1. The protocol by which the device retrieves Skdvc is 
shown in Figure  I. 
In Figure  I ,  p is an authenticator that proves knowledge 
of  7r  to  the server.  p  acts as a one-time  pad by  which the 
server encrypts c to return  it to the device.  y is an encryp- 
tion of /3  and p to securely transport them to the server. The 
value S is a message authentication code that  is generated 
from  the  MAC  key  a  stored  on  the  device,  and  that  the 
server uses  to confirm that this request  actually  originated 
from the device.  Though 6 is not required  to prove  secu- 
rity of this protocol, it nevertheless is important in practice: 
it  enables  the  server to  distinguish requests  bearing  7 but 
not originating from the device (i.e., mac,()  # S), 
from requests bearing  T  that originate from the device but 
for  which the  device’s  knowledge of  the  user’s  password 
cannot be verified (i.e., p # b). The latter category may in- 
dicate an online dictionary attack, and accordingly the ticket 
r should be ignored (perhaps for some period of time) after 
sufficiently many such requests. The former type should not 
“count against” r, however, since they do not pose a risk to 
the password;  indeed, the authenticator ,f3  is never checked 
in these cases. On the contrary, if this former category were 
treated  like  the  latter,  then  this  would  enable  a  denial-of- 
service attack on  T  (i.e.,  the device)  in  which an  attacker, 
having seen r pass on the network, submits requests to the 
server containing T and random values for y and 6. 
77 
t 
Figure 1. GENERIC key retrieval protocol 
~ 
~~ 
It is important for security that the device delete D, p and, 
of  course,  sk  when  it  is done with  them,  so that  none  of 
these  values are available  to an attacker who subsequently 
captures the device. In particular, these values should never 
be stored on stable storage on the device to ensure, e.g., that 
they will disappear from the device if the device crashes. 
Brief  intuition for the security  of this protocol  is as fol- 
lows. First, goal I is achieved due to the encryption of Skdvc 
by f ( v ,  T O ) ,  since an adversary in ADV( {svr, no}) does not 
know U. Goal I1 is achieved since the  only  way  an adver- 
sary in ADv({dvc})  gains information about the password 
is by  submitting guesses at p (or rather, P ’ s  resulting from 
guesses at the password) to the server. Finally, even an ad- 
versary in ADv({dvc, svr}) is required to conduct an offline 
dictionary  attack  against  the  password  to  discover  skdvc, 
since Skdvc is encrypted using f(v, T O ) .  
5. Systems supporting key disabling 
In this section we present protocols that satisfy all of the 
goals  of  Section  3.1, including  the  ability  for  the  user  to 
disable the private key of the device even after the attacker 
has  captured the  device  and  guessed  the  user’s password. 
As described in Section 4, the reason  that key disabling  is 
not possible with GENERIC is that the device’s private key is 
recovered by the device as part of that protocol. As a result, 
an attacker who captures the device and guesses the user’s 
password can recover the private key and use it indefinitely. 
16 
In  order  to  make  key  disabling  possible,  we  thus  de- 
sign protocols in  which the  private  key  is never  recovered 