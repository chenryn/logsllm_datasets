### System Bootstrapping and Security Analysis

#### On-Chip Bootloader
The on-chip bootloader is responsible for initializing the system. This component loads the ARK certificate and the PSP OS from flash memory, as outlined in steps 2 and 3. Since it is not part of the PSP firmware loaded from flash and is stored in a read-only memory (ROM) within the PSP, it is referred to as the on-chip bootloader.

Our static analysis revealed that the One-Time Programmable (OTP) value used to derive the Cryptographic Encryption Key (CEK), as described in Section 2.3, is provided by the PSP OS via a system call. The implementation of this system call simply forwards a value from the Cryptographic Coprocessor (CCP) to the calling unprivileged component. This value is stored in a storage block of the CCP, which is used to maintain context for cryptographic routines [22]. From this, we conclude that the on-chip bootloader is also responsible for storing the OTP value in the CCP storage block, as shown in Step 1 of Figure 4.

#### PSP OS Initialization
After verifying the integrity of the PSP OS, the PSP OS is executed. It initializes the PSP, as depicted in Step 4, which includes basic operating system tasks such as initializing the page tables and peripherals, including the interrupt controller. In Step 5, the PSP OS loads the Secure Encrypted Virtualization (SEV) firmware and verifies its integrity using the ARK public key. The ARK public key is not reloaded from flash but is assumed to be present at a fixed memory location. We infer that the PSP on-chip bootloader placed the ARK public key there after its integrity was verified in Step 2. Finally, upon initialization of the SEV firmware, the firmware either loads the platform state from non-volatile storage, as described in Section 2.2, or generates the cryptographic keys, as detailed in Section 2.5.

#### Security Issues
Our experiments uncovered a security issue in the signature verification mechanism of the PSP OS, allowing us to load custom components through modified UEFI images. An attacker with physical access to the SPI flash chip can use an SPI programmer, or the UEFI update mechanism of the motherboard vendor, to flash a custom image. Depending on the vendor, there may be no signature check on the UEFI image [28], or it can be disabled [10]. These tools can be used remotely, eliminating the need for physical access to the target device. Similar issues have been previously reported by security researchers [13]. AMD confirmed the existence of these issues [24], and newer versions of the PSP OS are already patched. However, our experiments showed that the PSP does not employ any rollback prevention mechanism, meaning that even if a system is running a patched PSP OS, it is possible to revert to an earlier, vulnerable version. Thus, mitigations require changes to the on-chip bootloader to prevent the loading of a vulnerable PSP OS version.

AMD confirmed in personal correspondence that the on-chip bootloader is not updatable through a firmware update. Instead, the UEFI update mechanism allows the PSP to update a fuse configuration, enabling the change of the key used to authenticate the PSP firmware components. This could be leveraged to revoke the currently used key and prevent the loading of a vulnerable PSP OS version. In this case, updated versions of the PSP OS would need to be signed with an alternative key.

Despite multiple issues of the PSP OS being reported to AMD in mid-2018 [13], we found no evidence of key revocation. We analyzed ten different binaries from five different motherboard vendors and found that the latest UEFI updates contain PSP OS versions signed with the same key as the vulnerable PSP OS version. This indicates that AMD has not revoked any ARK public keys to suspend vulnerable PSP firmware versions. To the best of our knowledge, the same ARK is used across all CPUs in the AMD Epyc Naples series, suggesting that every CPU in this series is affected as long as the PSP OS version is signed with the ARK.

Based on these results, we conclude that for the AMD Epyc Naples series CPUs, an attacker can:
1. Execute custom code on the PSP using a vulnerability in the signature verification mechanism of the PSP OS.
2. Roll back from any PSP OS version to a vulnerable PSP OS version.

### CEK Extraction
Leveraging the security issues discussed, we built and deployed a patched SEV firmware that allows reading and writing arbitrary PSP memory. Using this patched SEV firmware, we extracted the SEV state, including the CEK private key, from three different AMD Epyc CPUs. We obtained the corresponding signed CEK certificates from the AMD key server and verified the extracted private keys by creating signatures that can be validated using the signed CEK certificate. A proof-of-concept signature created with an extracted CEK can be found at [9].

Although the exact details of the CEK extraction are omitted in this paper, we will provide security researchers with additional details to reproduce our results upon request. We plan to release the exact details once a fixed hardware platform is available for customers.

As both the authenticity of the SEV platform and the confidentiality of the data protected by SEV rely on the security of the CEK, the CEK extraction lays the groundwork for the attacks described in Section 5.

### Attack Motivation
#### Data Theft
The first motivation for an attack is data theft, originating from an individual targeting an SEV guest owner. SEV enables companies to process confidential data in the cloud, which would otherwise not be processed due to confidentiality concerns. The goal of this type of attacker is to access this data despite the presence of SEV. An individual with malicious intent and sufficient permissions could use data from a commercial guest owner to commit traditional fraud, such as using stolen credit card data.

#### Economic Incentives
The second motivation is economic, originating from the organizational level of a cloud provider. In an Infrastructure-as-a-Service (IaaS) scenario, the cloud provider charges guest owners based on the amount of resources they allocate, including CPU, memory, and disk utilization. To increase overall memory utilization, many hypervisors use Kernel Same-page Merging (KSM) [7]. KSM requires the hypervisor to read the guest memory in plaintext to identify duplicate pages. SEV prohibits KSM because memory pages of different guest VMs are encrypted using different keys, increasing the memory requirement and resulting in higher costs for the cloud provider. In an IaaS scenario, these additional costs are likely to be passed on to customers commissioning the security features of SEV.

A malicious cloud provider could fake the presence of SEV while still charging for SEV protection. The guest VM would instead be hosted traditionally on a non-SEV-enabled system, leveraging KSM to reduce memory consumption and costs for the cloud provider.

### Attacks
#### Fake SEV
As described in Section 4.2, SEV prevents the use of virtualization features like KSM, increasing the overall memory requirements of a cloud setup. This additional cost may motivate a malicious cloud provider to fake the presence of SEV. By faking SEV, the cloud provider gains access to data that is not accessible when protected by SEV. Using an extracted CEK private key, the cloud provider can pose as an authentic AMD SEV platform even though SEV is not enabled or present.

**Attack Model:**
- **Attacker:** A cloud provider running arbitrary hosting hardware who has had one-time access to any SEV-enabled system to extract the CEK private key and the corresponding platform ID.
- **Victim:** A cloud customer expecting an SEV-enabled VM from the attacker.

**Method:**
1. The attacker generates an arbitrary Platform Endorsement Key (PEK) and signs it using the Original Certificate Authority (OCA).
2. The attacker uses the extracted CEK private key to sign the PEK and then generates a Platform Diffie-Hellman (PDH) key, which is signed by the PEK.
3. The attacker provides the platform ID, PEK, and PDH to the guest owner.
4. The guest owner obtains the ASK, ARK, and CEK certificates from the AMD key server.
5. After verifying the certificate chains, the guest owner deploys the guest VM, including the encrypted transport keys.
6. The attacker, possessing the private PDH key, decrypts the transport keys and calculates a hash of the guest VM’s memory.
7. The attacker provides the hash of the guest VM’s memory and protects it using the transport keys.
8. The last step is to provide a secret, such as a disk encryption key, to the guest VM. The guest owner protects the disk encryption key using the transport keys, which are known to the attacker.
9. The attacker decrypts the disk encryption key and the encrypted disk to access the guest VM’s confidential data.
10. The attacker injects the encrypted disk encryption key into the guest VM, making it fully operational. The guest owner cannot detect the absence of SEV.

This enables a malicious cloud provider to increase the number of guests on a single host using KSM, reducing memory consumption and costs. Additionally, the lack of runtime protection allows the attacker to access any data used in the guest VM.

#### Migration Attack
The goal of this attack is to extract runtime data of an SEV-enabled guest from a host system.

**Attack Model:**
- **Attacker:** An individual, such as a system administrator of an otherwise trusted organization, with access to the management interface of an SEV-enabled host.
- **Victim:** A cloud customer who successfully deployed a virtual machine on the SEV-enabled host of the cloud provider.

**Method:**
1. The attacker first needs to obtain a valid CEK private key of any authentic SEV-enabled system.
2. The attacker creates the two certificate chains as described in Section 5.1.
3. Using the SEV API commands for VM migration, the attacker instructs the SEV firmware to initiate the migration of the victim’s VM using the prepared PDH, PEK, and ARK.
4. The SEV firmware on the source host will authenticate the target platform of the migration.
5. The SEV firmware generates the transport keys and wraps them using keys derived from the authenticated PDH.
6. The memory of the VM is encrypted using the generated transport keys and exported along with the wrapped transport keys.
7. Instead of forwarding the keys, the attacker unwraps the transport keys and decrypts the virtual machine’s memory since he controls the PDH used to derive the keys.

This attack does not require any security issues to be present in the PSP firmware of the source host. By owning any CEK private key, the attacker can impersonate a valid target for migration and decrypt the exported memory.

#### Debug Override Attack
The goal of this attack is to extract runtime data of an SEV-enabled guest from a host system.

**Attack Model:**
- **Attacker:** An individual, such as a system administrator, with the ability to install UEFI updates on the system that hosts the victim’s VM. UEFI updates can be deployed remotely using the server’s update mechanism or with physical access via an SPI programmer.

**Method:**
1. The SEV API specifies a debug interface to assist in debugging SEV-protected virtual machines, allowing a hypervisor to read and write guest memory in plaintext.
2. In a QEMU/KVM scenario, QEMU offers the `pmemsave` command to dump guest memory to a file [31].
3. In an SEV-enabled guest, the memory is encrypted and thus of no use for debugging. The SEV API debug commands enable the hypervisor to read and write guest memory in plaintext, bypassing the encryption.

This attack does not require any security issues to be present in the PSP firmware of the source host. By installing a modified UEFI, the attacker can use the debug interface to access the guest memory in plaintext.