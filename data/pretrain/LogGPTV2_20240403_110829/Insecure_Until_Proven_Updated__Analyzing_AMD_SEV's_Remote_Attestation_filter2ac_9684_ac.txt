nent is responsible for bootstrapping the system. This component
is responsible for loading the ARK certificate and the PSP OS from
flash, steps 2 & 3. Since it is not part of the PSP firmware loaded
from flash and we conclude that it is stored in a read-only memory
(ROM) of the PSP, we call it on-chip bootloader.
Our static analysis revealed that the OTP value that is used to
derive the CEK, see Section 2.3, is provided by the PSP OS via a
syscall. The implementation of that syscall simply forwards a value
from the CCP to the calling unprivileged component. This value is
stored in a storage block of the CCP. These storage blocks are used by
the CCP to maintain a context for cryptographic routines [22]. From
that, we conclude that the on-chip bootloader is also responsible
for storing the OTP value in the CCP storage block, see Step 1 of
Figure 4.
After the integrity of the PSP OS is verified, the PSP OS is exe-
cuted. It initializes the PSP, Step 4, which includes basic operating
systems tasks such as initializing the pagetables and peripherals,
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1092e.g., the interrupt controller. In Step 5, it loads the SEV firmware
and verifies its integrity using the ARK public key. The ARK public
key is not loaded from flash again, but instead, the PSP OS assumes
the presence of that key at a fixed memory location. We infer that
the PSP on-chip bootloader placed the ARK public key there after
its integrity was verified in Step 2. Lastly, upon initialization of the
SEV firmware, the firmware either loads the platform state from
non-volatile storage, see Section 2.2, or generates the cryptographic
keys, Step 6, as described in Section 2.5.
Security Issues Our experiments revealed a security issue in the
signature verification mechanism of the PSP OS which allowed us to
load custom components through modified UEFI images. Either the
attacker has physical access to the SPI flash chip and makes use of an
SPI programmer, or the UEFI update mechanism of the motherboard
vendor allows her to flash a custom image. Depending on the vendor,
there is no signature check on the UEFI image in place [28] or
it can be disabled [10]. These tools can be used remotely, so no
physical access to the target device is required. Similar issues were
previously published by security researchers [13]. AMD confirmed
the existence of these issues [24] and newer versions of the PSP
OS are already patched. However, our experiments showed that
the PSP does not employ any rollback prevention mechanism, i.e.,
even though a system already makes use of a patched PSP OS, it
is always possible to revert to an earlier, vulnerable version. Thus,
as the issues exist in signed versions of the PSP OS, mitigations
require changes to the component verifying the signature, the on-
chip bootloader, in order to prevent a vulnerable PSP OS version
from being loaded.
AMD confirmed to us in personal correspondence that the on-
chip bootloader is not updatable through a firmware update. Instead,
using the UEFI update mechanism, the PSP is able to update a
fuse configuration that allows changing the key that is used to
authenticate the PSP firmware components. This could be leveraged
to revoke the currently used key and thus prevent the vulnerable
PSP OS version to be loaded. In this case, updated versions of the
PSP OS would have to be signed with an alternative key.
But even though multiple issues of the PSP OS have been reported
to AMD in mid 2018 [13], we have not found any evidence of a key
revocation. To that end, we analyzed ten different binaries from five
different motherboard vendors. At the time of writing, the latest
UEFI updates contain PSP OS versions that are signed with the
same key as the vulnerable PSP OS version. From that, we conclude
that AMD has not revoked any ARK public keys in order to suspend
vulnerable PSP firmware versions. To the best of our knowledge,
the same ARK is used across all CPUs of the AMD Epyc Naples
series. This indicates that every CPU of that series is affected as
any PSP OS version is loaded as long as it is signed with the ARK.
Based on these results we conclude that for the AMD Epyc Naples
series CPUs, an attacker is able to:
(1) Execute custom code on the PSP using a vulnerability in
the signature verification mechanism of the PSP OS.
(2) Roll back from any PSP OS version to a vulnerable PSP
OS version.
3.3 CEK Extraction
Leveraging the security issues discussed in the previous section, we
built and deployed a patched SEV firmware. This firmware allows
us to read and write arbitrary PSP memory. Using this patched SEV
firmware, we extracted the SEV state, see Section 3.1, including the
CEK private key of three different AMD Epyc CPUs.
We obtained the corresponding signed CEK certificates from
the AMD key server, see Section 2.3, and verified the extracted
private keys by creating signatures that can be validated using the
signed CEK certificate. A proof-of-concept signature created with
an extracted CEK can be found at [9].
Although the exact details of the CEK extraction are omitted
in this paper, we will provide security researchers with additional
details to reproduce our results upon request. We plan to release
the exact details once a fixed hardware platform is available for
customers.
As both the authenticity of the SEV platform as well as the
confidentiality of the data protected by SEV rely on the security of
the CEK, the CEK extraction lays the groundwork for the first two
attacks in Section 5. The motivation for our attacks is discussed in
the following section.
4 ATTACK MOTIVATION
The SEV technology offers data protection of virtual machines
in the face of an untrusted platform owner. This incorporates a
malicious cloud provider or a malicious system administrator. In
this section, we present two different motivations for an attacker to
circumvent the security properties of SEV as presented in Section
2 and Section 3.
4.1 Extract Confidential Data
The first motivation regards data theft and originates from an indi-
vidual targeting an SEV guest owner.
The additional security measures provided by SEV enable compa-
nies to process confidential data in the cloud, that would otherwise
not be processed in the cloud because of its confidentiality. The
goal of the first type of attacker is to get access to this data despite
the presence of SEV.
An individual with malicious intent and sufficient permissions
could use data from a commercial guest owner to pursue traditional
fraud, e.g., with stolen credit card data.
4.2 Save Resource Overhead
The second motivation is of economic nature and originates on the
organizational level of a cloud provider.
In an Infrastructure-as-a-Service (IaaS) scenario, the cloud provider
charges guest owners based on the amount of resources they allo-
cate, including CPU, memory, and disk utilization.
In order to increase the overall utilization of memory, many
hypervisors employ Kernel same-page merging (KSM) [7] to increase
the memory utilization.
KSM requires the hypervisor to read the guest memory of vir-
tual machines in plaintext to identify duplicate pages. Using SEV
prohibits KSM, since memory pages of different guest VMs are en-
crypted using different keys. Therefore, the memory requirement
of an SEV-enabled system is increased, which results in higher
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1093costs for the cloud provider. In an IaaS scenario, it is likely that the
cloud provider will pass those additional costs to the customers
commissioning the security features of SEV.
While a benevolent cloud provider might disable KSM to prevent
attacks such as [35], and [27], this is not necessarily the case for a
provider with malicious intent.
In order to increase revenue, a malicious cloud provider could
fake the presence of SEV, while still charging additionally for SEV
protection. The guest VM would instead be hosted traditionally on
a non SEV-enabled system, leveraging, e.g., KSM to reduce the mem-
ory consumption and therefore the costs for the cloud provider.
5 ATTACKS
In this section, we propose three different attacks targeting AMD
SEV. These are structured according to the two main attack moti-
vations, as described in Section 4.
5.1 Fake SEV
As presented in Section 4.2, SEV prevents the use of virtualization
features like KSM, thus increasing the overall memory requirements
of a cloud setup. This additional cost may motivate a malicious cloud
provider to fake the presence of SEV. Furthermore, by faking the
presence of SEV, the cloud provider gains access to data which
is not accessible when protected by SEV. Using an extracted CEK
private key as shown in Section 3.3, the cloud provider may pose as
an authentic AMD SEV platform even though SEV is not enabled
or even present at all.
Attack model The attacker is a cloud provider running arbitrary
hosting hardware, who has had access to any SEV-enabled sys-
tem for one-time extraction of the CEK private key and the corre-
sponding platform ID. It is not required that this specific system
hosts the victim’s VM. The victim is a cloud customer expecting
an SEV-enabled VM from the attacker. This attack does not impose
restrictions on the guest system in use.
Method From the point of view of a guest owner, the correct
deployment of VMs can be verified through remote attestation by
the trusted SEV firmware. As described in Step 5 of Figure 2, the
guest owner authenticates the remote platform using a certificate
chain (as seen in Figure 1) that roots in the AMD Root Signing Key
(ARK). Once the remote platform is authenticated, the guest owner
defines the transport keys, wraps them, and sends them to the cloud
provider, see Steps 7 and 8 of Figure 2.
In order to simulate the presence of SEV, the attacker first gen-
erates an arbitrary PEK and, if required, signs it using the OCA.
Next, she uses the extracted CEK private key (see Section 3.3) to
sign the PEK. She then generates a PDH which is in turn signed by
the PEK. Now, the attacker has control over the highlighted parts
of the certificate chains:
PDH → PEK → CEK → ASK → ARK
(3)
PDH → PEK → OCA
(4)
To mount the attack, the attacker provides the platform ID corre-
sponding to the CEK, the PEK, and PDH to the guest owner. The
guest owner will obtain the ASK, ARK, and CEK certificates from
the AMD key server, see Steps 3 and 4, variant D of Figure 2. After
verification of the certificate chains, the guest owner deploys the
guest VM, including the encrypted transport keys. As the attacker
possesses the private PDH key, she can decrypt the transport keys
provided by the guest owner. Now the attacker calculates a hash
of the guest VM’s memory. As shown in Figure 3 Step 4, the hash
is provided to the guest owner. Due to the fact that the attacker
controls the transport keys, she can provide the hash of the guest
VM’s memory and protect it using the transport keys.
The last step in the guest deployment phase is to provide a
secret, e.g., a disk encryption key, to the guest VM, see Step 5 of
Figure 3. The guest owner protects the disk encryption key using
the transport keys. As they are known to the attacker, she can first
decrypt the disk encryption key and then decrypt the encrypted
disk to get access to the guest virtual machine’s confidential data.
To fake the presence of SEV, the attacker injects the encrypted disk
encryption key into the guest virtual machine, i.e., she copies it into
the guest’s memory. The guest is now fully operational; however,
although the remote attestation mechanism of SEV was successfully
carried out, the guest owner has no means to detect the absence of
the SEV feature.
This enables a malicious cloud provider to increase the number
of guests on a single host making use of KSM, see Section 4.2. More
so, as the runtime protection of SEV is not enabled, the attacker
can access any data used in the guest VM.
5.2 Migration Attack
As outlined in Section 4.1, the goal of this attack is to extract run-
time data of an SEV-enabled guest from a host system.
Attack model The attacker is an individual, e.g., a system ad-
ministrator of an otherwise trusted organization, with access to
the management interface of an SEV-enabled host. The victim is a
cloud customer who successfully deployed a virtual machine on the
SEV-enabled host of the cloud provider. We assume that there are
no security issues present in the guest VM and the PSP firmware
on the host. The attacker must have had access to any SEV-enabled
system for one-time extraction of the CEK private key and to obtain
the corresponding CEK certificate. It is not required for the attacker
to have access to the CEK private key belonging to the platform
hosting the VM. Furthermore, he must be able to initiate a virtual
machine migration of the victim’s VM using the management inter-
face of the host. Additionally, the guest policy must allow migration
of the guest. To benefit from cloud services such as high availability
and dynamic resource allocation, migration is required in order to
handle resource contention or failures in the host system. Thus it
is likely that the guest policy allows migration.
Method Similarly to the previous attack, the attacker first needs
to get hold of a valid CEK private key of any authentic SEV-enabled
system, see Section 3.3. The attacker creates the two certificate
chains as described in Section 5.1, chain 3, and chain 4.
Using the SEV API commands for VM migration (see Section 2.6),
the attacker instructs the SEV firmware to initiate the migration
of the victim’s VM using the prepared PDH, PEK, and ARK. Using
the attacker-controlled PDH, the SEV firmware on the source host
Session 5C: Cloud Security IICCS ’19, November 11–15, 2019, London, United Kingdom1094will authenticate the target platform of the migration, see Step 5
of Figure 2. Since the provided certificates were created using a
valid (extracted) CEK, the SEV firmware will accept the PDH. The
SEV firmware then generates the transport keys, and wraps them
using keys derived from the authenticated PDH, see Steps 7 and 8 of
Figure 2. The memory of the VM is encrypted using the generated
transport keys and exported along with the wrapped transport
keys.
Instead of forwarding the keys, see Step 9 of Figure 2, the at-
tacker can now unwrap the transport keys and decrypt the virtual
machine’s memory since he controls the PDH that was used to
derive the keys used to encrypt the transport keys.
We emphasize that this attack does not require any security
issues to be present in the PSP firmware of the source host. By
owning any CEK private key, the attacker can impersonate a valid
target for migration. As the transport encryption keys in SEV must
be shared with the target of a migration, the attacker, posing as a
valid migration target, can decrypt the exported memory.
5.3 Debug Override Attack
Similarly to the previous attack and as outlined in Section 4.1, the
goal of this attack is to extract run-time data of an SEV-enabled
guest from a host system.
Attack model The attack model is similar to the Migration At-
tack in Section 5.2, with the additional requirement that the at-
tacker must be able to install UEFI updates on the system that hosts
the victim’s VM. UEFI updates can be deployed remotely without
any physical access using the server’s update mechanism, see Sec-
tion 3.2. Alternatively, they can be deployed with physical access
via directly programming the SPI flash located on the server’s moth-
erboard using an SPI programmer.
Method The SEV API specifies a debug interface to assist debug-
ging of SEV-protected virtual machines. The debug interface allows
a hypervisor to read and write guest memory in plaintext, see [3,
Chapter 7.1]. For example, in a QEMU/KVM scenario, QEMU offers
the pmemsave command to dump guest memory to a file [31]. In
an SEV-enabled guest, that memory is encrypted and thus of no
use to debug the guest. The SEV API debug commands enable the